uint64_t TextChildQuery.unresolvedText.getter()
{
  uint64_t Value;
  uint64_t v1;

  Value = AGGraphGetValue();
  v1 = *(_QWORD *)Value;
  outlined copy of Text.Storage(*(_QWORD *)Value, *(_QWORD *)(Value + 8), *(_BYTE *)(Value + 16));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t TextChildQuery.renderer.getter()
{
  uint64_t result;

  type metadata accessor for TextRendererBoxBase();
  result = AGGraphGetWeakValue();
  if (result)
    return swift_retain();
  return result;
}

uint64_t TextChildQuery.environment.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t *Value;
  uint64_t v3;
  uint64_t v4;

  Value = (uint64_t *)AGGraphGetValue();
  v4 = *Value;
  v3 = Value[1];
  *a1 = v4;
  a1[1] = v3;
  swift_retain();
  return swift_retain();
}

uint64_t TextChildQuery.value.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unsigned int *v2;
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v32;
  unsigned int v33;
  char v35[16];
  _QWORD v36[2];
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unsigned int v40;
  unsigned int v41;
  uint64_t v42;
  uint64_t v43;
  char v44;

  v4 = *v2;
  v3 = v2[1];
  v5 = v2[2];
  v6 = v2[3];
  v7 = v2[4];
  v8 = v2[5];
  v9 = v2[6];
  v10 = v2[7];
  v33 = v2[8];
  type metadata accessor for ResolvedStyledText();
  v32 = *(_QWORD *)AGGraphGetValue();
  v11 = TextChildQuery.unresolvedText.getter();
  v28 = v12;
  v29 = v11;
  v26 = v13;
  v30 = v14;
  v27 = TextChildQuery.renderer.getter();
  v37 = __PAIR64__(v3, v4);
  v38 = __PAIR64__(v6, v5);
  v39 = __PAIR64__(v8, v7);
  v40 = v9;
  v41 = v10;
  LODWORD(v42) = v33;
  if (TextChildQuery.renderer.getter())
  {
    swift_retain();
    swift_release();
    v37 = __PAIR64__(v3, v4);
    v38 = __PAIR64__(v6, v5);
    v39 = __PAIR64__(v8, v7);
    v40 = v9;
    v41 = v10;
    LODWORD(v42) = v33;
    v15 = a1;
    TextChildQuery.environment.getter(v36);
    v16 = v36[0];
    if (v36[1])
    {
      swift_retain_n();
      swift_retain_n();
      v17 = specialized PropertyList.Tracker.value<A>(_:for:)(v16);
      swift_release_n();
    }
    else
    {
      v21 = swift_retain_n();
      v17 = specialized closure #1 in PropertyList.subscript.getter(v21, (uint64_t)v35);
    }
    swift_release_n();
    v20 = a2;
    v18 = v32;
  }
  else
  {
    v18 = v32;
    swift_retain();
    v17 = 0;
    v20 = a2;
    v15 = a1;
  }
  v22 = *(_QWORD *)(v15 + 16);
  v23 = *(_QWORD *)(v15 + 24);
  v37 = v18;
  v38 = v29;
  v39 = v28;
  LOBYTE(v40) = v26 & 1;
  v42 = v30;
  v43 = v27;
  v44 = v17 & 1;
  v24 = type metadata accessor for AccessibilityStyledTextContentView(0, v22, v23, v19);
  AccessibilityStyledTextContentView.body.getter(v24, v20);
  swift_release();
  outlined consume of Text.Storage(v29, v28, v26 & 1);
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t AccessibilityStyledTextContentView.init(text:unresolvedText:renderer:needsDrawingGroup:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X5>, char a7@<W6>, uint64_t a8@<X8>)
{
  *(_QWORD *)a8 = result;
  *(_QWORD *)(a8 + 8) = a2;
  *(_QWORD *)(a8 + 16) = a3;
  *(_BYTE *)(a8 + 24) = a4 & 1;
  *(_QWORD *)(a8 + 32) = a5;
  *(_QWORD *)(a8 + 40) = a6;
  *(_BYTE *)(a8 + 48) = a7;
  return result;
}

uint64_t AccessibilityStyledTextContentView.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t AssociatedTypeWitness;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  void (*v15)(_QWORD *, uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t AssociatedConformanceWitness;
  void (*v17)(char *, uint64_t);
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD v25[2];
  char v26;

  v24 = a2;
  v4 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD *)(a1 + 24);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v23 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v19 - v9;
  v11 = *v2;
  v12 = v2[1];
  v22 = v2[2];
  v21 = *((unsigned __int8 *)v2 + 24);
  v13 = v2[5];
  v20 = v2[4];
  v14 = *((_BYTE *)v2 + 48);
  v25[0] = v11;
  v25[1] = v13;
  v26 = v14;
  v15 = *(void (**)(_QWORD *, uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t))(v3 + 24);
  swift_retain();
  swift_retain();
  v15(v25, v12, v22, v21, v20, v11, v4, v3);
  swift_release();
  swift_release();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  static ViewBuilder.buildExpression<A>(_:)(v7, AssociatedTypeWitness, AssociatedConformanceWitness);
  v17 = *(void (**)(char *, uint64_t))(v23 + 8);
  v17(v7, AssociatedTypeWitness);
  static ViewBuilder.buildBlock<A>(_:)((uint64_t)v10, AssociatedTypeWitness, v24);
  return ((uint64_t (*)(char *, uint64_t))v17)(v10, AssociatedTypeWitness);
}

uint64_t static TextChildQuery.scrapeContent(from:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  __int128 *v6;
  __int128 *v7;
  uint64_t v8;
  int v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  int v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  int v22;
  int v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;

  AGGraphGetAttributeInfo();
  v7 = v6;
  v8 = swift_allocObject();
  v9 = *((_DWORD *)v7 + 8);
  v10 = v7[1];
  v25 = *v7;
  v26 = v10;
  LODWORD(v27) = v9;
  type metadata accessor for TextChildQuery(0, a1, a2, v11);
  *(_QWORD *)(v8 + 16) = TextChildQuery.unresolvedText.getter();
  *(_QWORD *)(v8 + 24) = v12;
  *(_BYTE *)(v8 + 32) = v13 & 1;
  *(_QWORD *)(v8 + 40) = v14;
  type metadata accessor for ResolvedStyledText();
  LODWORD(a2) = *(_DWORD *)v7;
  *(_QWORD *)(v8 + 48) = *(_QWORD *)AGGraphGetValue();
  v15 = *((_DWORD *)v7 + 8);
  LODWORD(v16) = a2;
  DWORD1(v16) = *((_DWORD *)v7 + 1);
  *((_QWORD *)&v16 + 1) = *((_QWORD *)v7 + 1);
  v17 = v7[1];
  v25 = v16;
  v26 = v17;
  LODWORD(v27) = v15;
  TextChildQuery.environment.getter((_QWORD *)(v8 + 56));
  v24 = v8;
  v22 = *((_DWORD *)v7 + 8);
  v23 = 0;
  ScrapeableContent.Item.init(_:ids:_:position:size:transform:)(&v24, &v23, &v22, (uint64_t)&v25);
  v18 = v29;
  v19 = v26;
  *(_OWORD *)a3 = v25;
  *(_OWORD *)(a3 + 16) = v19;
  v20 = v28;
  *(_OWORD *)(a3 + 32) = v27;
  *(_OWORD *)(a3 + 48) = v20;
  *(_QWORD *)(a3 + 64) = v18;
  return swift_retain();
}

uint64_t protocol witness for static Rule.initialValue.getter in conformance TextChildQuery<A>@<X0>(uint64_t a1@<X8>)
{
  uint64_t AssociatedTypeWitness;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 56))(a1, 1, 1, AssociatedTypeWitness);
}

uint64_t protocol witness for static ScrapeableAttribute.scrapeContent(from:) in conformance TextChildQuery<A>@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  return static TextChildQuery.scrapeContent(from:)(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a2);
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance TextChildQuery<A>(uint64_t a1)
{
  MEMORY[0x23B7C9C04](&protocol conformance descriptor for TextChildQuery<A>, a1);
  return static AsyncAttribute.flags.getter();
}

double StyledTextLayoutEngine.sizeThatFits(_:)(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 v6;
  double (*v7)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t *);
  double v8;
  char v9;
  uint64_t v11;
  char v12;
  uint64_t v13;
  unsigned __int8 v14;

  v3 = *a1;
  v4 = *((unsigned __int8 *)a1 + 8);
  v5 = a1[2];
  v6 = *((_BYTE *)a1 + 24);
  if (a3)
  {
    v11 = a2;
    v7 = *(double (**)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t *))(*(_QWORD *)a3 + 104);
    swift_retain();
    swift_retain();
    v8 = v7(v3, v4, v5, v6, &v11);
    swift_release();
    swift_release();
  }
  else if ((v4 & 1) != 0
         || ((v3 & 0x7FFFFFFFFFFFFFFFLL) != 0 ? (v9 = 1) : (v9 = *((_BYTE *)a1 + 24)),
             (v9 & 1) != 0 || (v8 = 0.0, (v5 & 0x7FFFFFFFFFFFFFFFLL) != 0)))
  {
    v11 = *a1;
    v12 = v4;
    v13 = v5;
    v14 = v6;
    return (*(double (**)(uint64_t *))(*(_QWORD *)a2 + 224))(&v11);
  }
  return v8;
}

uint64_t protocol witness for LayoutEngine.spacing() in conformance StyledTextLayoutEngine()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 216))();
}

double protocol witness for LayoutEngine.sizeThatFits(_:) in conformance StyledTextLayoutEngine(uint64_t *a1)
{
  uint64_t *v1;

  return StyledTextLayoutEngine.sizeThatFits(_:)(a1, *v1, v1[1]);
}

double protocol witness for LayoutEngine.lengthThatFits(_:in:) in conformance StyledTextLayoutEngine(uint64_t a1, char a2)
{
  uint64_t *v2;
  char v4;
  double result;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  char v14;

  v4 = *(_BYTE *)(a1 + 8);
  if ((a2 & 1) != 0 || (*(_BYTE *)(a1 + 8) & 1) != 0 || (result = 0.0, (*(_QWORD *)a1 & 0x7FFFFFFFFFFFFFFFLL) != 0))
  {
    v6 = *(_BYTE *)(a1 + 24);
    v7 = *(_QWORD *)(a1 + 16);
    v8 = *v2;
    v9 = v2[1];
    v11 = *(_QWORD *)a1;
    v12 = v4;
    v13 = v7;
    v14 = v6;
    result = StyledTextLayoutEngine.sizeThatFits(_:)(&v11, v8, v9);
    if ((a2 & 1) != 0)
      return v10;
  }
  return result;
}

uint64_t protocol witness for LayoutEngine.explicitAlignment(_:at:) in conformance StyledTextLayoutEngine(uint64_t a1, double *a2)
{
  uint64_t v2;

  return (*(uint64_t (**)(double, double))(**(_QWORD **)v2 + 272))(*a2, a2[1]);
}

uint64_t protocol witness for LayoutEngine.debugContentDescription.getter in conformance StyledTextLayoutEngine()
{
  uint64_t v0;
  void *v1;
  id v2;
  uint64_t v3;

  v1 = *(void **)(*(_QWORD *)v0 + 192);
  if (!v1)
    return 0;
  v2 = objc_msgSend(v1, sel_string);
  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

uint64_t AccessibilityStyledTextContentView.text.getter()
{
  return swift_retain();
}

uint64_t AccessibilityStyledTextContentView.text.setter(uint64_t a1)
{
  _QWORD *v1;
  uint64_t result;

  result = swift_release();
  *v1 = a1;
  return result;
}

uint64_t (*AccessibilityStyledTextContentView.text.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t AccessibilityStyledTextContentView.unresolvedText.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 8);
  outlined copy of Text.Storage(v1, *(_QWORD *)(v0 + 16), *(_BYTE *)(v0 + 24));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t AccessibilityStyledTextContentView.unresolvedText.setter(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t result;

  outlined consume of Text.Storage(*(_QWORD *)(v4 + 8), *(_QWORD *)(v4 + 16), *(_BYTE *)(v4 + 24));
  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v4 + 8) = a1;
  *(_QWORD *)(v4 + 16) = a2;
  *(_BYTE *)(v4 + 24) = a3 & 1;
  *(_QWORD *)(v4 + 32) = a4;
  return result;
}

uint64_t (*AccessibilityStyledTextContentView.unresolvedText.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t AccessibilityStyledTextContentView.renderer.getter()
{
  return swift_retain();
}

uint64_t AccessibilityStyledTextContentView.renderer.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_release();
  *(_QWORD *)(v1 + 40) = a1;
  return result;
}

uint64_t (*AccessibilityStyledTextContentView.renderer.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t AccessibilityStyledTextContentView.needsDrawingGroup.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 48);
}

uint64_t AccessibilityStyledTextContentView.needsDrawingGroup.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 48) = result;
  return result;
}

uint64_t (*AccessibilityStyledTextContentView.needsDrawingGroup.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t StyledTextContentView.init(text:renderer:needsDrawingGroup:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  *(_QWORD *)a4 = result;
  *(_QWORD *)(a4 + 8) = a2;
  *(_BYTE *)(a4 + 16) = a3;
  return result;
}

uint64_t StyledTextContentView.text.getter()
{
  return swift_retain();
}

uint64_t StyledTextContentView.text.setter(uint64_t a1)
{
  _QWORD *v1;
  uint64_t result;

  result = swift_release();
  *v1 = a1;
  return result;
}

uint64_t (*StyledTextContentView.text.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t StyledTextContentView.renderer.getter()
{
  return swift_retain();
}

uint64_t StyledTextContentView.renderer.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_release();
  *(_QWORD *)(v1 + 8) = a1;
  return result;
}

uint64_t (*StyledTextContentView.renderer.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t StyledTextContentView.needsDrawingGroup.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 16);
}

uint64_t StyledTextContentView.needsDrawingGroup.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 16) = result;
  return result;
}

uint64_t (*StyledTextContentView.needsDrawingGroup.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t static StyledTextContentView.animatesSize.getter()
{
  return 0;
}

double StyledTextContentView.shape(in:)(uint64_t a1, CGFloat a2, CGFloat a3)
{
  uint64_t *v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double (*v10)(uint64_t);
  uint64_t v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;

  v7 = *v3;
  v8 = v3[1];
  v9 = *((unsigned __int8 *)v3 + 16);
  if (v8)
  {
    v10 = *(double (**)(uint64_t))(*(_QWORD *)v8 + 112);
    v11 = swift_retain();
    v12 = v10(v11);
    v16 = CGRect.outset(by:)(v12, v13, v14, v15, 0.0, 0.0, a2, a3);
    swift_release();
  }
  else
  {
    v16 = 0.0;
  }
  *(_QWORD *)a1 = v7;
  *(_QWORD *)(a1 + 8) = v8;
  *(_QWORD *)(a1 + 16) = v9;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_QWORD *)(a1 + 88) = 0;
  *(_DWORD *)(a1 + 96) = 0x200000;
  swift_retain();
  swift_retain();
  return v16;
}

uint64_t static StyledTextContentView._makeView(view:inputs:)@<X0>(unsigned int *a1@<X0>, __int128 *a2@<X1>, _OWORD *a3@<X8>)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  unsigned int v8;
  int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  int v28;
  unint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  __int128 v40;
  __int128 v41;
  int v42;
  uint64_t KeyPath;
  int v44;
  __int128 v45;
  uint64_t v46;
  unsigned __int8 v47;
  unint64_t v48;
  unint64_t v49;
  unsigned int OffsetAttribute2;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  _QWORD *v54;
  uint64_t v55;
  unsigned int v56;
  unsigned int v57;
  unsigned int v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  int v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  int v70;
  uint64_t v71;
  int v72;
  int v73;
  uint64_t v74;
  _OWORD *v75;
  int v76;
  unsigned int v77;
  unsigned int v78;
  unsigned int v79;
  unsigned int v80;
  uint64_t v81;
  char v82;
  __int128 v83;
  unsigned __int8 v84[24];
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  int v90;
  __int128 v91;
  _BYTE v92[32];
  __int128 v93;
  __int128 v94;
  int v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  _BYTE v100[20];
  __int128 v101;
  _BYTE v102[32];
  __int128 v103;
  _BYTE v104[20];
  __int128 v105;
  __int128 v106;
  __int128 v107;
  uint64_t v108;

  v108 = *MEMORY[0x24BDAC8D0];
  v4 = a2[1];
  v5 = a2[3];
  v98 = a2[2];
  v99 = v5;
  v6 = a2[3];
  *(_OWORD *)v100 = a2[4];
  v7 = a2[1];
  v96 = *a2;
  v97 = v7;
  v8 = *a1;
  *(_DWORD *)&v100[16] = *((_DWORD *)a2 + 20);
  v106 = v4;
  v107 = v98;
  v105 = v96;
  *(_OWORD *)&v92[16] = v98;
  v93 = v6;
  v94 = a2[4];
  v9 = *((_DWORD *)a2 + 20);
  v91 = v96;
  *(_OWORD *)v92 = v4;
  v82 = BYTE4(v98);
  v10 = DWORD1(v98) & 0xFFFFFFFD;
  v95 = v9;
  *(_DWORD *)&v92[20] = DWORD1(v98) & 0xFFFFFFFD;
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, (unint64_t *)&lazy cache variable for type metadata for _AnyPreferenceKey<ViewRespondersKey>, (uint64_t)&type metadata for ViewRespondersKey, (uint64_t)&protocol witness table for ViewRespondersKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for _AnyPreferenceKey);
  v12 = v11;
  v13 = *(_QWORD *)(v99 + 16);
  v80 = v8;
  v81 = v99;
  if (v13)
  {
    v14 = 0;
    v15 = (_QWORD *)(v99 + 32);
    while (*v15 != v11)
    {
      ++v14;
      v15 += 2;
      if (v13 == v14)
        goto LABEL_5;
    }
    outlined retain of _ViewInputs((uint64_t)&v96);
    specialized Array.remove(at:)(v14);
  }
  else
  {
LABEL_5:
    outlined retain of _ViewInputs((uint64_t)&v96);
  }
  v79 = *(_DWORD *)v100;
  v16 = v106;
  *(_OWORD *)&v102[16] = v98;
  v103 = v99;
  *(_OWORD *)v104 = *(_OWORD *)v100;
  v76 = *(_DWORD *)&v100[8];
  v77 = HIDWORD(v99);
  *(_DWORD *)&v104[16] = *(_DWORD *)&v100[16];
  v101 = v96;
  *(_OWORD *)v102 = v97;
  v84[0] = 1;
  swift_beginAccess();
  v17 = CachedEnvironment.resolvedShapeStyles(for:role:mode:)((uint64_t)&v101, v84, 0x100000000);
  swift_endAccess();
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, (unint64_t *)&lazy cache variable for type metadata for _AnyPreferenceKey<DisplayList.Key>, (uint64_t)&type metadata for DisplayList.Key, (uint64_t)&protocol witness table for DisplayList.Key, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for _AnyPreferenceKey);
  v78 = v17;
  if (!v13)
  {
LABEL_14:
    *(_OWORD *)&v102[16] = *(_OWORD *)&v92[16];
    v103 = v93;
    *(_OWORD *)v104 = v94;
    *(_DWORD *)&v104[16] = v95;
    v101 = v91;
    *(_OWORD *)v102 = *(_OWORD *)v92;
    outlined retain of _ViewInputs((uint64_t)&v101);
    v23 = v8;
    specialized static ShapeStyledLeafView.makeLeafView(view:inputs:styles:interpolatorGroup:data:)(v8, (uint64_t)&v101, v17, 0, &v85);
    outlined release of _ViewInputs((uint64_t)&v101);
    v83 = v85;
    if ((v82 & 2) == 0)
      goto LABEL_40;
    goto LABEL_38;
  }
  v19 = (_QWORD *)(v81 + 32);
  v20 = (_QWORD *)(v81 + 32);
  v21 = v13;
  while (*v20 != v18)
  {
    v20 += 2;
    if (!--v21)
    {
      v22 = v13;
      while (*v19 != v12)
      {
        v19 += 2;
        if (!--v22)
          goto LABEL_14;
      }
      break;
    }
  }
  v24 = v105;
  outlined retain of _ViewInputs((uint64_t)&v96);
  outlined retain of _GraphInputs((uint64_t)&v105);
  v25 = swift_retain();
  v26 = specialized find<A>(_:key:)(v25);
  v75 = a3;
  if (!v26)
  {
    swift_release();
    outlined release of _GraphInputs((uint64_t)&v105);
    outlined release of _ViewInputs((uint64_t)&v96);
LABEL_22:
    type metadata accessor for _ShapeStyle_InterpolatorGroup();
    v36 = swift_allocObject();
    v37 = MEMORY[0x24BEE4AF8];
    *(_DWORD *)(v36 + 32) = 0;
    *(_BYTE *)(v36 + 36) = 0;
    *(_DWORD *)(v36 + 40) = 0;
    *(_BYTE *)(v36 + 44) = 1;
    *(_DWORD *)(v36 + 48) = 160;
    *(_BYTE *)(v36 + 52) = 3;
    *(_QWORD *)(v36 + 56) = 0;
    *(_QWORD *)(v36 + 16) = 0x7FF0000000000000;
    *(_QWORD *)(v36 + 24) = v37;
    swift_beginAccess();
    LODWORD(v38) = v79;
    if ((v82 & 0x20) == 0)
    {
LABEL_36:
      swift_endAccess();
      *(_QWORD *)&v101 = v91;
      DWORD2(v101) = DWORD2(v91);
      *(_OWORD *)&v102[8] = *(_OWORD *)&v92[8];
      *(_QWORD *)v102 = *(_QWORD *)v92;
      *(_QWORD *)&v102[24] = *(_QWORD *)&v92[24];
      v103 = v93;
      *(_DWORD *)v104 = v94;
      *(_DWORD *)&v104[4] = v38;
      *(_QWORD *)&v104[8] = *((_QWORD *)&v94 + 1);
      *(_DWORD *)&v104[16] = v95;
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_retain();
      v23 = v8;
      specialized static ShapeStyledLeafView.makeLeafView(view:inputs:styles:interpolatorGroup:data:)(v8, (uint64_t)&v101, v78, v36, &v85);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
      swift_release();
      v83 = v85;
      OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
      specialized _ViewOutputs.applyInterpolatorGroup<A>(_:content:inputs:animatesSize:defersRender:)(v36, OffsetAttribute2, (uint64_t)&v96, 0, 0);
      swift_release();
      goto LABEL_37;
    }
    v69 = DWORD2(v96);
    v71 = v97;
    v74 = v96;
    v39 = DWORD2(v97);
    v40 = v98;
    v41 = v99;
    v67 = *(_QWORD *)&v100[8];
    v68 = *(_QWORD *)v100;
    *(_OWORD *)&v102[16] = v98;
    v103 = v99;
    *(_OWORD *)v104 = *(_OWORD *)v100;
    v66 = *(_DWORD *)&v100[16];
    *(_DWORD *)&v104[16] = *(_DWORD *)&v100[16];
    v101 = v96;
    *(_OWORD *)v102 = v97;
    outlined retain of _ViewInputs((uint64_t)&v96);
    v42 = _ViewInputs.geometryTransaction()();
    KeyPath = swift_getKeyPath();
    v44 = specialized CachedEnvironment.attribute<A>(keyPath:)(KeyPath);
    swift_release();
    if ((*(_BYTE *)(v16 + 81) & 1) == 0
      && (_DWORD)v68 == *(_DWORD *)(v16 + 32)
      && (_DWORD)v67 == *(_DWORD *)(v16 + 36)
      && v44 == *(_DWORD *)(v16 + 40)
      && v69 == *(_DWORD *)(v16 + 44)
      && v42 == *(_DWORD *)(v16 + 48)
      && v39 == *(_DWORD *)(v16 + 52))
    {
      if ((*(_BYTE *)(v16 + 64) & 1) == 0)
      {
        LODWORD(v38) = *(_DWORD *)(v16 + 60);
LABEL_35:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release();
        swift_release();
        goto LABEL_36;
      }
    }
    else
    {
      *(_QWORD *)&v101 = v74;
      DWORD2(v101) = v69;
      *(_QWORD *)v102 = v71;
      *(_DWORD *)&v102[8] = v39;
      *(_DWORD *)&v102[12] = v42;
      *(_OWORD *)&v102[16] = v40;
      v103 = v41;
      *(_QWORD *)v104 = v68;
      *(_QWORD *)&v104[8] = v67;
      *(_DWORD *)&v104[16] = v66;
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      CachedEnvironment.AnimatedFrame.init(inputs:pixelLength:environment:)(&v101, v44, (uint64_t)&v85);
      v45 = v86;
      v46 = v87;
      v47 = v88;
      v48 = v87 | ((unint64_t)DWORD1(v87) << 32);
      v49 = BYTE8(v87) | ((unint64_t)HIDWORD(v87) << 32);
      *(_OWORD *)(v16 + 32) = v85;
      *(_OWORD *)(v16 + 48) = v45;
      *(_QWORD *)(v16 + 64) = v48;
      *(_QWORD *)(v16 + 72) = v49;
      *(_WORD *)(v16 + 80) = v47;
      if (v46 != 1)
      {
        v38 = HIDWORD(*((_QWORD *)&v45 + 1));
        goto LABEL_35;
      }
    }
    LODWORD(v38) = AGGraphCreateOffsetAttribute2();
    *(_DWORD *)(v16 + 60) = v38;
    *(_BYTE *)(v16 + 64) = 0;
    goto LABEL_35;
  }
  v27 = *(_BYTE *)(v26 + 72);
  swift_release();
  outlined release of _GraphInputs((uint64_t)&v105);
  outlined release of _ViewInputs((uint64_t)&v96);
  if ((v27 & 1) == 0)
    goto LABEL_22;
  v72 = v107;
  *(_QWORD *)&v101 = __PAIR64__(*(_DWORD *)(v16 + 16), v8);
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  lazy protocol witness table accessor for type StyledTextContentView.ArchivedTransitionEnvironment and conformance StyledTextContentView.ArchivedTransitionEnvironment();
  v28 = Attribute.init<A>(body:value:flags:update:)();
  v29 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for MutableBox<CachedEnvironment>, (uint64_t)&type metadata for CachedEnvironment, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for MutableBox);
  v30 = swift_allocObject();
  *(_DWORD *)(v30 + 16) = v28;
  *(_QWORD *)(v30 + 24) = MEMORY[0x24BEE4AF8];
  *(_OWORD *)(v30 + 32) = 0u;
  *(_OWORD *)(v30 + 48) = 0u;
  *(_OWORD *)(v30 + 64) = 0u;
  *(_WORD *)(v30 + 80) = 256;
  *(_QWORD *)(v30 + 88) = v29;
  swift_release();
  *(_QWORD *)v92 = v30;
  v31 = v72;
  if ((v72 & 0x20) == 0)
  {
    v31 = v72 | 0x20;
    *(_DWORD *)&v92[16] = v72 | 0x20;
  }
  v73 = *(_DWORD *)&v100[4];
  v32 = *((_QWORD *)&v107 + 1);
  v70 = DWORD2(v105);
  v33 = *((_QWORD *)&v106 + 1);
  v34 = *(_QWORD *)&v100[12];
  swift_beginAccess();
  LODWORD(v101) = *(_DWORD *)(v30 + 16);
  *((_QWORD *)&v101 + 1) = 1;
  v102[4] = 3;
  *(_DWORD *)v102 = 0x2000000;
  *(_WORD *)&v102[5] = 0;
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  lazy protocol witness table accessor for type ContentTransitionEffect.Init and conformance ContentTransitionEffect.Init();
  v35 = Attribute.init<A>(body:value:flags:update:)();
  *(_QWORD *)&v101 = v24;
  DWORD2(v101) = v70;
  *(_QWORD *)v102 = v30;
  *(_QWORD *)&v102[8] = v33;
  *(_DWORD *)&v102[16] = v31;
  *(_DWORD *)&v102[20] = v10;
  *(_QWORD *)&v102[24] = v32;
  *(_QWORD *)&v103 = v93;
  *((_QWORD *)&v103 + 1) = __PAIR64__(v77, DWORD2(v93));
  *(_DWORD *)v104 = v79;
  *(_DWORD *)&v104[4] = v73;
  *(_DWORD *)&v104[8] = v76;
  *(_QWORD *)&v104[12] = v34;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v23 = v80;
  specialized static _RendererEffect._makeRendererEffect(effect:inputs:body:)(v35, (uint64_t)&v101, v80, v78, &v85);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  v83 = v85;
LABEL_37:
  a3 = v75;
  if ((v82 & 2) == 0)
    goto LABEL_40;
LABEL_38:
  LODWORD(v85) = v23;
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  lazy protocol witness table accessor for type StyledTextLayoutComputer and conformance StyledTextLayoutComputer();
  HIDWORD(v83) = Attribute.init<A>(body:value:flags:update:)();
  if ((BYTE8(v83) & 0x80) == 0)
    DWORD2(v83) |= 0x80u;
LABEL_40:
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for _AnyPreferenceKey<Text.LayoutKey>, (uint64_t)&type metadata for Text.LayoutKey, (uint64_t)&protocol witness table for Text.LayoutKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for _AnyPreferenceKey);
  if (v13)
  {
    v52 = v51;
    v53 = (_QWORD *)(v81 + 32);
    v54 = (_QWORD *)(v81 + 32);
    v55 = v13;
    while (*v54 != v51)
    {
      v54 += 2;
      if (!--v55)
        goto LABEL_46;
    }
    v56 = AGGraphCreateOffsetAttribute2();
    v57 = AGGraphCreateOffsetAttribute2();
    *(_QWORD *)&v85 = __PAIR64__(v79, v56);
    *((_QWORD *)&v85 + 1) = __PAIR64__(v77, v57);
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for [Text.LayoutKey.AnchoredLayout], (uint64_t)&type metadata for Text.LayoutKey.AnchoredLayout, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1250]);
    lazy protocol witness table accessor for type TextLayoutQuery and conformance TextLayoutQuery();
    v58 = Attribute.init<A>(body:value:flags:update:)();
    LOBYTE(v85) = 0;
    PreferencesOutputs.subscript.setter(v58, v52, (uint64_t)&protocol witness table for _AnyPreferenceKey<A>, v59);
LABEL_46:
    v60 = 0;
    while (1)
    {
      v61 = v60 + 1;
      if (__OFADD__(v60, 1))
        __break(1u);
      if (*v53 == v12)
        break;
      ++v60;
      v53 += 2;
      if (v61 == v13)
        goto LABEL_52;
    }
    v87 = v98;
    v88 = v99;
    v89 = *(_OWORD *)v100;
    v90 = *(_DWORD *)&v100[16];
    v85 = v96;
    v86 = v97;
    type metadata accessor for StyledTextResponder();
    v62 = swift_allocObject();
    outlined retain of _ViewInputs((uint64_t)&v96);
    v63 = specialized StyledTextResponder.init(view:styles:inputs:)(v23, v78, (uint64_t *)&v85, v62);
    swift_release();
    *(_QWORD *)&v85 = v63;
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    _s10Foundation4DateVSgMaTm_0(0, &lazy cache variable for type metadata for [ViewResponder], 255, (uint64_t (*)(uint64_t))type metadata accessor for ViewResponder, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1250]);
    lazy protocol witness table accessor for type StyledTextResponderFilter and conformance StyledTextResponderFilter();
    LODWORD(v62) = Attribute.init<A>(body:value:flags:update:)();
    swift_release();
    LOBYTE(v85) = 0;
    PreferencesOutputs.subscript.setter(v62, v12, (uint64_t)&protocol witness table for _AnyPreferenceKey<A>, v64);
  }
LABEL_52:
  *a3 = v83;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

uint64_t StyledTextContentView.ArchivedTransitionEnvironment.value.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t *Value;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 v11;
  unsigned __int8 v12;
  uint64_t v13;
  int v14;
  char v15;
  int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t result;
  uint64_t v24;
  uint64_t *v25;
  unint64_t v26;
  unsigned int v27;
  unsigned __int8 v28;
  unsigned __int8 v29;
  unsigned __int8 v30;
  unsigned __int8 v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;

  Value = (uint64_t *)AGGraphGetValue();
  v3 = *Value;
  v4 = Value[1];
  v34 = *Value;
  v35 = v4;
  v5 = *(_QWORD *)AGGraphGetValue();
  if (v4)
  {
    swift_retain_n();
    swift_retain_n();
    swift_retain();
    specialized PropertyList.Tracker.value<A>(_:for:)(v3, (uint64_t)&v26);
    swift_release_n();
    v6 = swift_release_n();
    v7 = v26;
    v8 = v27 | ((unint64_t)v28 << 32);
    v9 = v29;
    if (v29)
    {
LABEL_13:
      swift_release();
      goto LABEL_14;
    }
  }
  else
  {
    swift_retain_n();
    swift_retain();
    v10 = specialized find<A>(_:key:)(v3);
    v25 = a1;
    if (v10)
    {
      v7 = *(_QWORD *)(v10 + 72);
      v8 = *(unsigned int *)(v10 + 80) | ((unint64_t)*(unsigned __int8 *)(v10 + 84) << 32);
      v9 = *(unsigned __int8 *)(v10 + 85);
      v11 = *(_BYTE *)(v10 + 86);
      v12 = *(_BYTE *)(v10 + 87);
      v13 = *(_QWORD *)(v10 + 88);
      v14 = *(_DWORD *)(v10 + 96);
      outlined copy of ContentTransition.Storage(v7, v8, v9);
      swift_retain();
    }
    else
    {
      v9 = 0;
      v11 = 0;
      v12 = 0;
      v13 = 0;
      v14 = 0;
      v8 = 0x302000000;
      v7 = 0x8000000000;
    }
    v30 = v11;
    v31 = v12;
    v32 = v13;
    v33 = v14;
    v6 = swift_release_n();
    a1 = v25;
    if ((_DWORD)v9)
      goto LABEL_13;
  }
  if ((v7 & 0xC000000000) != 0x4000000000 || (v7 & 0xFF0000000000) != 0x20000000000)
    goto LABEL_13;
  v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 200))(v6);
  swift_release();
  if ((v15 & 1) != 0)
    v7 = v7 & 0xFFFF0001FFFFFFFFLL | 0x4000000000;
  else
    v7 = v7 & 0xFFFF0001FFFFFFFFLL | 0x14000000000;
LABEL_14:
  v16 = v30;
  v17 = v32;
  v18 = v33;
  v19 = v31;
  swift_retain_n();
  outlined copy of ContentTransition.Storage(v7, v8, v9);
  v20 = 0x1000000000000;
  if (!v16)
    v20 = 0;
  v21 = v8 & 0xFFFFFFFFFFLL | (v9 << 40) | v20 | (v19 << 56);
  swift_retain();
  specialized closure #1 in PropertyList.subscript.setter(&v34, v7, v21, v17, v18);
  swift_release();
  outlined consume of ContentTransition.Storage(v7, v8, v9);
  swift_release();
  if (v4)
  {
    v22 = v34;
    swift_retain();
    swift_retain();
    specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v3, v22);
    swift_release();
    swift_release();
    swift_release();
    outlined consume of ContentTransition.Storage(v7, v8, v9);
    result = swift_release();
  }
  else
  {
    swift_release();
    outlined consume of ContentTransition.Storage(v7, v8, v9);
    result = swift_release();
    v22 = v34;
  }
  v24 = v35;
  *a1 = v22;
  a1[1] = v24;
  return result;
}

uint64_t protocol witness for Rule.value.getter in conformance StyledTextContentView.ArchivedTransitionEnvironment@<X0>(uint64_t *a1@<X8>)
{
  return StyledTextContentView.ArchivedTransitionEnvironment.value.getter(a1);
}

double protocol witness for ShapeStyledLeafView.shape(in:) in conformance StyledTextContentView(uint64_t a1, CGFloat a2, CGFloat a3)
{
  uint64_t *v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double (*v10)(uint64_t);
  uint64_t v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;

  v7 = *v3;
  v8 = v3[1];
  v9 = *((unsigned __int8 *)v3 + 16);
  if (v8)
  {
    v10 = *(double (**)(uint64_t))(*(_QWORD *)v8 + 112);
    v11 = swift_retain();
    v12 = v10(v11);
    v16 = CGRect.outset(by:)(v12, v13, v14, v15, 0.0, 0.0, a2, a3);
    swift_release();
  }
  else
  {
    v16 = 0.0;
  }
  *(_QWORD *)a1 = v7;
  *(_QWORD *)(a1 + 8) = v8;
  *(_QWORD *)(a1 + 16) = v9;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_QWORD *)(a1 + 88) = 0;
  *(_DWORD *)(a1 + 96) = 0x200000;
  swift_retain();
  swift_retain();
  return v16;
}

uint64_t TextLayoutQuery.value.getter(unint64_t a1, uint64_t a2)
{
  uint64_t v4;
  double *Value;
  double v6;
  double v7;
  void (*v8)(unint64_t *__return_ptr, _QWORD, double, double, double, double, double, double);
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  char v12;
  __int128 v13;
  double *v14;
  double v15;
  double v16;
  double v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;

  type metadata accessor for ResolvedStyledText();
  v4 = *(_QWORD *)AGGraphGetValue();
  type metadata accessor for CGSize(0);
  Value = (double *)AGGraphGetValue();
  v6 = *Value;
  v7 = Value[1];
  v8 = *(void (**)(unint64_t *__return_ptr, _QWORD, double, double, double, double, double, double))(*(_QWORD *)v4 + 296);
  swift_retain();
  v8(&v22, 0, 0.0, 0.0, v6, v7, v6, v7);
  swift_release();
  v9 = v22;
  if (!v22)
    return MEMORY[0x24BEE4AF8];
  v10 = HIDWORD(a1);
  v12 = v23;
  v11 = v24;
  if (one-time initialization token for topLeading != -1)
    swift_once();
  v13 = static UnitPoint.topLeading;
  v14 = (double *)AGGraphGetValue();
  v15 = *(double *)&v13 * *v14;
  v16 = *((double *)&v13 + 1) * v14[1];
  v22 = __PAIR64__(a2, v10);
  LODWORD(v23) = HIDWORD(a2);
  v17 = CGPoint.prepare(geometry:)(v15, v16);
  v19 = v18;
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for AnchorValueBox<UnitPoint>, (uint64_t)&type metadata for UnitPoint, (uint64_t)&protocol witness table for UnitPoint, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for AnchorValueBox);
  v20 = swift_allocObject();
  *(double *)(v20 + 16) = v17;
  *(_QWORD *)(v20 + 24) = v19;
  type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<Text.LayoutKey.AnchoredLayout>, (uint64_t)&type metadata for Text.LayoutKey.AnchoredLayout, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
  result = swift_allocObject();
  *(_OWORD *)(result + 16) = xmmword_23527E860;
  *(_QWORD *)(result + 32) = v20;
  *(_QWORD *)(result + 40) = v9;
  *(_BYTE *)(result + 48) = v12 & 1;
  *(_QWORD *)(result + 56) = v11;
  return result;
}

uint64_t protocol witness for Rule.value.getter in conformance TextLayoutQuery@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;

  result = TextLayoutQuery.value.getter(*(_QWORD *)v1, *(_QWORD *)(v1 + 8));
  *a1 = result;
  return result;
}

uint64_t static ResolvedStyledText.defaultTransition.getter@<X0>(uint64_t a1@<X8>)
{
  unsigned int v2;
  uint64_t result;
  uint64_t v4;

  if (one-time initialization token for v4 != -1)
    swift_once();
  v2 = static Semantics.v4;
  if (one-time initialization token for forced != -1)
    swift_once();
  swift_beginAccess();
  if ((byte_25426FAB4 & 1) != 0)
    result = dyld_program_sdk_at_least();
  else
    result = static Semantics.forced >= v2;
  v4 = 0x8000000001;
  if ((_DWORD)result)
    v4 = 0;
  *(_QWORD *)a1 = v4;
  *(_BYTE *)(a1 + 12) = 3;
  *(_DWORD *)(a1 + 8) = 0x2000000;
  *(_WORD *)(a1 + 13) = 0;
  return result;
}

uint64_t ResolvedStyledText.requiresTransition(to:)(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  void *v3;
  id v4;
  id v5;
  id v6;
  _QWORD *v7;
  uint64_t v8;
  void *v9;
  id v10;
  id v11;
  uint64_t result;
  id v13;
  id v14;
  _QWORD aBlock[6];
  void *v16;

  if (v1 == a1)
    return 0;
  if ((*(_WORD *)(v1 + 236) & 0x80) == 0)
    return 1;
  v2 = *(void **)(v1 + 192);
  if (!v2)
    return 1;
  v3 = *(void **)(a1 + 192);
  if (!v3)
    return 1;
  v16 = 0;
  v4 = v2;
  v5 = v3;
  v6 = objc_msgSend(v4, sel_length);
  v7 = (_QWORD *)swift_allocObject();
  v7[2] = &v16;
  v7[3] = v5;
  v7[4] = v4;
  v8 = swift_allocObject();
  *(_QWORD *)(v8 + 16) = partial apply for closure #1 in ResolvedStyledText.requiresTransition(to:);
  *(_QWORD *)(v8 + 24) = v7;
  aBlock[4] = partial apply for thunk for @callee_guaranteed (@guaranteed [NSAttributedStringKey : Any], @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ();
  aBlock[5] = v8;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed (@guaranteed [NSAttributedStringKey : Any], @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ();
  aBlock[3] = &block_descriptor_12_1;
  v9 = _Block_copy(aBlock);
  v10 = v4;
  v11 = v5;
  swift_retain();
  swift_release();
  objc_msgSend(v10, sel_enumerateAttributesInRange_options_usingBlock_, 0, v6, 0, v9);
  _Block_release(v9);
  LOBYTE(v6) = swift_isEscapingClosureAtFileLocation();
  result = swift_release();
  if ((v6 & 1) != 0)
  {
    __break(1u);
  }
  else
  {
    v13 = v16;
    v14 = objc_msgSend(v11, sel_length);
    swift_release();

    return v13 != v14;
  }
  return result;
}

uint64_t closure #1 in ResolvedStyledText.requiresTransition(to:)(uint64_t a1, uint64_t a2, uint64_t a3, _BYTE *a4, uint64_t *a5, void *a6, void *a7)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  double v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t result;
  id v22;
  void (*v23)(char *, uint64_t);
  uint64_t v24;
  void *v25;
  uint64_t v26;
  char v27;
  id v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  id v33;
  id v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  _BYTE *v39;
  uint64_t v40;
  id v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  __int128 v45;
  __int128 v46;
  uint64_t v47;

  v40 = a3;
  v41 = a7;
  v47 = *MEMORY[0x24BDAC8D0];
  v12 = type metadata accessor for AttributeContainer();
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v15 = (char *)&v39 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = MEMORY[0x24BDAC7A8](v16);
  v19 = (char *)&v39 - v18;
  v20 = *a5;
  result = (uint64_t)objc_msgSend(a6, sel_length, v17);
  if (v20 >= result)
  {
    *a4 = 1;
    return result;
  }
  v39 = a4;
  v43 = 0;
  v44 = 0;
  v22 = objc_msgSend(a6, sel_attributesAtIndex_effectiveRange_, *a5, &v43);
  type metadata accessor for NSAttributedStringKey(0);
  lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type NSAttributedStringKey and conformance NSAttributedStringKey, (uint64_t (*)(uint64_t))type metadata accessor for NSAttributedStringKey, (uint64_t)&protocol conformance descriptor for NSAttributedStringKey);
  static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  swift_bridgeObjectRetain();
  AttributeContainer.init(_:)();
  AttributeContainer.init(_:)();
  LOBYTE(v22) = static AttributeContainer.== infix(_:_:)();
  v23 = *(void (**)(char *, uint64_t))(v13 + 8);
  v23(v15, v12);
  result = ((uint64_t (*)(char *, uint64_t))v23)(v19, v12);
  if ((v22 & 1) == 0)
    goto LABEL_19;
  v24 = MEMORY[0x23B7C5DAC](0xD00000000000001DLL, 0x80000002352E2350);
  v25 = (void *)v24;
  if (*(_QWORD *)(a1 + 16) && (v26 = specialized __RawDictionaryStorage.find<A>(_:)(v24), (v27 & 1) != 0))
  {
    outlined init with copy of Any(*(_QWORD *)(a1 + 56) + 32 * v26, (uint64_t)&v45);
  }
  else
  {
    v45 = 0u;
    v46 = 0u;
  }

  if (!*((_QWORD *)&v46 + 1))
  {
    outlined destroy of CodableAttributedString.Range.DecodingWrapper<ResolvableProgress>((uint64_t)&v45, (uint64_t)&lazy cache variable for type metadata for Any?, MEMORY[0x24BEE4AD8] + 8, (uint64_t)MEMORY[0x24BEE1C68], (uint64_t (*)(_QWORD))type metadata accessor for MutableBox<CachedEnvironment>);
LABEL_13:
    v28 = objc_msgSend(v41, sel_attributedSubstringFromRange_, a2, v40);
    v29 = objc_msgSend(v28, sel_string);

    v30 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v32 = v31;

    v33 = objc_msgSend(a6, sel_attributedSubstringFromRange_, v43, v44);
    v34 = objc_msgSend(v33, sel_string);

    v35 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v37 = v36;

    if (v30 == v35 && v32 == v37)
    {
      result = swift_bridgeObjectRelease_n();
      goto LABEL_17;
    }
    v38 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    result = swift_bridgeObjectRelease();
    if ((v38 & 1) != 0)
      goto LABEL_17;
LABEL_19:
    *v39 = 1;
    return result;
  }
  result = swift_dynamicCast();
  if ((result & 1) == 0 || (v42 & 1) == 0)
    goto LABEL_13;
LABEL_17:
  if (__OFADD__(*a5, v44))
    __break(1u);
  *a5 += v44;
  return result;
}

uint64_t ResolvedStyledText.appliesTransitionsForSizeChanges.getter()
{
  return 1;
}

uint64_t ResolvedStyledText.addsDrawingGroup.getter()
{
  uint64_t v0;

  return (*(unsigned __int16 *)(v0 + 236) >> 3) & 1;
}

void ResolvedStyledText.modifyTransition(state:to:)(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  void *v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  BOOL v18;
  int v19;
  char v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  char v24;

  if ((*(_BYTE *)(a1 + 24) & 2) != 0)
    goto LABEL_19;
  v5 = (void *)v2[24];
  if (v5)
  {
    v6 = objc_msgSend(v5, sel_string);
    v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v9 = v8;

    v10 = *(void **)(a2 + 192);
    if (!v10)
    {
      if (!v9)
        goto LABEL_19;
      goto LABEL_15;
    }
  }
  else
  {
    v10 = *(void **)(a2 + 192);
    if (!v10)
      goto LABEL_19;
    v9 = 0;
    v7 = 0;
  }
  v11 = objc_msgSend(v10, sel_string);
  v12 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v14 = v13;

  if (!v9)
  {
    if (!v14)
      goto LABEL_19;
    goto LABEL_15;
  }
  if (!v14)
  {
LABEL_15:
    swift_bridgeObjectRelease();
    goto LABEL_16;
  }
  if (v7 == v12 && v9 == v14)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_19;
  }
  v24 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v24 & 1) == 0)
  {
LABEL_16:
    v15 = *(_QWORD *)a1;
    v16 = *(unsigned int *)(a1 + 8) | ((unint64_t)*(unsigned __int8 *)(a1 + 12) << 32);
    if (*(_BYTE *)(a1 + 13))
    {
      outlined consume of ContentTransition.Storage(v15, v16, *(_BYTE *)(a1 + 13));
    }
    else
    {
      v23 = (v15 >> 38) & 3;
      if (!(_DWORD)v23)
      {
        *(_QWORD *)a1 = 1;
        *(_BYTE *)(a1 + 12) = BYTE4(v16);
        *(_DWORD *)(a1 + 8) = v16 & 0xFF000000;
        *(_BYTE *)(a1 + 13) = 0;
        goto LABEL_19;
      }
      if ((_DWORD)v23 == 1
        || (_DWORD)v23 == 2
        && __PAIR128__((__CFADD__(v15, 0xFFFFFF7FFFFFFFFFLL) + *(_DWORD *)(a1 + 8) - 1) & 0xFFFFFF, v15 - 0x8000000001) < 2)
      {
        goto LABEL_19;
      }
    }
    *(_QWORD *)a1 = 0x8000000004;
    *(_WORD *)(a1 + 12) = 3;
    *(_DWORD *)(a1 + 8) = 0x2000000;
  }
LABEL_19:
  v17 = *(_QWORD *)a1;
  if (*(_BYTE *)(a1 + 13))
    v18 = 0;
  else
    v18 = (*(_QWORD *)a1 & 0xFFC000000000) == 0x24000000000;
  if (v18)
  {
    v19 = *(_DWORD *)(a1 + 8);
    v20 = *(_BYTE *)(a1 + 12);
    v21 = (*(uint64_t (**)(void))(*v2 + 200))();
    v22 = 0x4000000000;
    if ((v21 & 1) == 0)
      v22 = 0x14000000000;
    *(_QWORD *)a1 = v17 & 0xFFFF0001FFFFFFFFLL | v22;
    *(_BYTE *)(a1 + 12) = v20;
    *(_DWORD *)(a1 + 8) = v19;
    *(_BYTE *)(a1 + 13) = 0;
  }
}

uint64_t protocol witness for static InterpolatableContent.defaultTransition.getter in conformance ResolvedStyledText@<X0>(uint64_t a1@<X8>)
{
  return static ResolvedStyledText.defaultTransition.getter(a1);
}

uint64_t protocol witness for InterpolatableContent.requiresTransition(to:) in conformance ResolvedStyledText(uint64_t *a1)
{
  return ResolvedStyledText.requiresTransition(to:)(*a1) & 1;
}

uint64_t protocol witness for InterpolatableContent.addsDrawingGroup.getter in conformance ResolvedStyledText()
{
  uint64_t v0;

  return (*(unsigned __int16 *)(*(_QWORD *)v0 + 236) >> 3) & 1;
}

void protocol witness for InterpolatableContent.modifyTransition(state:to:) in conformance ResolvedStyledText(uint64_t a1, uint64_t *a2)
{
  ResolvedStyledText.modifyTransition(state:to:)(a1, *a2);
}

uint64_t StyledTextLayoutComputer.updateValue()()
{
  _QWORD *Value;
  uint64_t v1;
  _BYTE v3[16];
  _QWORD *v4;
  _QWORD v5[2];

  Value = (_QWORD *)AGGraphGetValue();
  v1 = Value[1];
  v5[0] = *Value;
  v5[1] = v1;
  v4 = v5;
  swift_retain();
  swift_retain();
  specialized StatefulRule<>.update<A>(modify:create:)((uint64_t)partial apply for specialized closure #1 in StatefulRule<>.update<A>(to:), (uint64_t)v3, (void (*)(uint64_t *__return_ptr))_s14AttributeGraph12StatefulRuleP7SwiftUIAD14LayoutComputerV5ValueRtzrlE6update2toyqd___tAD0G6EngineRd__lFqd__yXEfU0_AD010StyledTextgH033_641995D812913A47B866B20B88782376LLV_AD0mngL0VTG5TA_0);
  swift_release();
  return swift_release();
}

void one-time initialization function for swiftUIOptions()
{
  static NSStringDrawingOptions.swiftUIOptions = static NSStringDrawingOptions.disableUILabelCompatibility | 1;
}

uint64_t TextLayoutProperties.lineLimit.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t TextLayoutProperties.lineLimit.setter(uint64_t result, char a2)
{
  uint64_t v2;

  *(_QWORD *)v2 = result;
  *(_BYTE *)(v2 + 8) = a2 & 1;
  return result;
}

uint64_t (*TextLayoutProperties.lineLimit.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t TextLayoutProperties.lowerLineLimit.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 16);
}

uint64_t TextLayoutProperties.lowerLineLimit.setter(uint64_t result, char a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = result;
  *(_BYTE *)(v2 + 24) = a2 & 1;
  return result;
}

uint64_t (*TextLayoutProperties.lowerLineLimit.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

void TextLayoutProperties.truncationMode.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 25);
}

_BYTE *TextLayoutProperties.truncationMode.setter(_BYTE *result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 25) = *result;
  return result;
}

uint64_t (*TextLayoutProperties.truncationMode.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t TextLayoutProperties.multilineTextAlignment.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 26);
}

uint64_t TextLayoutProperties.multilineTextAlignment.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 26) = result;
  return result;
}

uint64_t (*TextLayoutProperties.multilineTextAlignment.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

void TextLayoutProperties.layoutDirection.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 27);
}

_BYTE *TextLayoutProperties.layoutDirection.setter(_BYTE *result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 27) = *result;
  return result;
}

uint64_t (*TextLayoutProperties.layoutDirection.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

void TextLayoutProperties.transitionStyle.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 28);
}

_BYTE *TextLayoutProperties.transitionStyle.setter(_BYTE *result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 28) = *result;
  return result;
}

uint64_t (*TextLayoutProperties.transitionStyle.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

double TextLayoutProperties.minScaleFactor.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 32);
}

void TextLayoutProperties.minScaleFactor.setter(double a1)
{
  uint64_t v1;

  *(double *)(v1 + 32) = a1;
}

uint64_t (*TextLayoutProperties.minScaleFactor.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

double TextLayoutProperties.lineSpacing.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 40);
}

void TextLayoutProperties.lineSpacing.setter(double a1)
{
  uint64_t v1;

  *(double *)(v1 + 40) = a1;
}

uint64_t (*TextLayoutProperties.lineSpacing.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

double TextLayoutProperties.lineHeightMultiple.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 48);
}

void TextLayoutProperties.lineHeightMultiple.setter(double a1)
{
  uint64_t v1;

  *(double *)(v1 + 48) = a1;
}

uint64_t (*TextLayoutProperties.lineHeightMultiple.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

double TextLayoutProperties.maximumLineHeight.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 56);
}

void TextLayoutProperties.maximumLineHeight.setter(double a1)
{
  uint64_t v1;

  *(double *)(v1 + 56) = a1;
}

uint64_t (*TextLayoutProperties.maximumLineHeight.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

double TextLayoutProperties.minimumLineHeight.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 64);
}

void TextLayoutProperties.minimumLineHeight.setter(double a1)
{
  uint64_t v1;

  *(double *)(v1 + 64) = a1;
}

uint64_t (*TextLayoutProperties.minimumLineHeight.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

double TextLayoutProperties.hyphenationFactor.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 72);
}

void TextLayoutProperties.hyphenationFactor.setter(double a1)
{
  uint64_t v1;

  *(double *)(v1 + 72) = a1;
}

uint64_t (*TextLayoutProperties.hyphenationFactor.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

void TextLayoutProperties.writingMode.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 80);
}

_BYTE *TextLayoutProperties.writingMode.setter(_BYTE *result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 80) = *result;
  return result;
}

uint64_t (*TextLayoutProperties.writingMode.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

double TextLayoutProperties.bodyHeadOutdent.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 88);
}

void TextLayoutProperties.bodyHeadOutdent.setter(double a1)
{
  uint64_t v1;

  *(double *)(v1 + 88) = a1;
}

uint64_t (*TextLayoutProperties.bodyHeadOutdent.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

double TextLayoutProperties.pixelLength.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 96);
}

void TextLayoutProperties.pixelLength.setter(double a1)
{
  uint64_t v1;

  *(double *)(v1 + 96) = a1;
}

uint64_t (*TextLayoutProperties.pixelLength.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t TextLayoutProperties.textSizing.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 + 112);
  *(_BYTE *)a1 = *(_BYTE *)(v1 + 104);
  *(_QWORD *)(a1 + 8) = v2;
  return swift_bridgeObjectRetain();
}

uint64_t TextLayoutProperties.textSizing.setter(char *a1)
{
  uint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t result;

  v2 = *a1;
  v3 = *((_QWORD *)a1 + 1);
  result = swift_bridgeObjectRelease();
  *(_BYTE *)(v1 + 104) = v2;
  *(_QWORD *)(v1 + 112) = v3;
  return result;
}

uint64_t (*TextLayoutProperties.textSizing.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t TextLayoutProperties.widthIsFlexible.getter()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + 120) & 1;
}

uint64_t TextLayoutProperties.widthIsFlexible.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 120) = *(_BYTE *)(v1 + 120) & 0xFE | result;
  return result;
}

_BYTE *(*TextLayoutProperties.widthIsFlexible.modify(uint64_t a1))(_BYTE *result)
{
  uint64_t v1;

  *(_QWORD *)a1 = v1;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(v1 + 120) & 1;
  return TextLayoutProperties.widthIsFlexible.modify;
}

_BYTE *TextLayoutProperties.widthIsFlexible.modify(_BYTE *result)
{
  *(_BYTE *)(*(_QWORD *)result + 120) = *(_BYTE *)(*(_QWORD *)result + 120) & 0xFE | result[8];
  return result;
}

uint64_t TextLayoutProperties.sizeFitting.getter()
{
  uint64_t v0;

  return (*(unsigned __int8 *)(v0 + 120) >> 1) & 1;
}

uint64_t TextLayoutProperties.sizeFitting.setter(uint64_t result)
{
  uint64_t v1;
  char v2;

  if ((result & 1) != 0)
    v2 = 2;
  else
    v2 = 0;
  *(_BYTE *)(v1 + 120) = *(_BYTE *)(v1 + 120) & 0xFD | v2;
  return result;
}

_BYTE *(*TextLayoutProperties.sizeFitting.modify(uint64_t a1))(_BYTE *result)
{
  uint64_t v1;

  *(_QWORD *)a1 = v1;
  *(_BYTE *)(a1 + 8) = (*(_BYTE *)(v1 + 120) & 2) != 0;
  return TextLayoutProperties.sizeFitting.modify;
}

_BYTE *TextLayoutProperties.sizeFitting.modify(_BYTE *result)
{
  char v1;

  if (result[8])
    v1 = 2;
  else
    v1 = 0;
  *(_BYTE *)(*(_QWORD *)result + 120) = *(_BYTE *)(*(_QWORD *)result + 120) & 0xFD | v1;
  return result;
}

uint64_t TextLayoutProperties.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;

  if (one-time initialization token for defaultValue != -1)
    swift_once();
  v2 = static MaximumLineHeightKey.defaultValue;
  if (one-time initialization token for defaultValue != -1)
    swift_once();
  v3 = static MinimumLineHeightKey.defaultValue;
  if (one-time initialization token for standard != -1)
    swift_once();
  v4 = static Text.Sizing.standard;
  v5 = qword_25426BAF8;
  *(_QWORD *)a1 = 0;
  *(_BYTE *)(a1 + 8) = 1;
  *(_QWORD *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 24) = 1;
  *(_DWORD *)(a1 + 25) = 1;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 32) = 0x3FF0000000000000;
  *(_QWORD *)(a1 + 56) = v2;
  *(_QWORD *)(a1 + 64) = v3;
  *(_QWORD *)(a1 + 72) = 0;
  *(_BYTE *)(a1 + 80) = 0;
  *(_OWORD *)(a1 + 88) = xmmword_23528A280;
  *(_BYTE *)(a1 + 104) = v4;
  *(_QWORD *)(a1 + 112) = v5;
  *(_BYTE *)(a1 + 120) = 0;
  return swift_bridgeObjectRetain();
}

uint64_t TextLayoutProperties.init(from:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  char v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  char v29;
  char v30;
  uint64_t v31;
  uint64_t result;
  __int16 v33;
  Swift::Int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  Swift::Int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  uint64_t v48;
  char v49;
  uint64_t v50;
  char v51;
  __int16 v52;
  uint64_t v53;
  uint64_t v54;

  v4 = a1[1];
  v53 = *a1;
  v3 = v53;
  v54 = v4;
  EnvironmentValues.truncationMode.getter((char *)&v52);
  v51 = v52;
  v53 = v3;
  v54 = v4;
  v50 = EnvironmentValues.lineLimit.getter();
  v49 = v5;
  v53 = v3;
  v54 = v4;
  v48 = EnvironmentValues.lowerLineLimit.getter();
  v47 = v6;
  v53 = v3;
  v54 = v4;
  EnvironmentValues.pixelLength.getter();
  v8 = v7;
  if (v4)
  {
    swift_retain_n();
    swift_retain_n();
    v9 = specialized PropertyList.Tracker.value<A>(_:for:)(v3);
    swift_release_n();
    swift_release_n();
    swift_retain_n();
    swift_retain_n();
    v10 = specialized PropertyList.Tracker.value<A>(_:for:)(v3);
    swift_release_n();
    swift_release_n();
    swift_retain_n();
    swift_retain_n();
    v11 = specialized PropertyList.Tracker.value<A>(_:for:)(v3);
    swift_release_n();
    swift_release_n();
    swift_retain_n();
    swift_retain_n();
    v12 = specialized PropertyList.Tracker.value<A>(_:for:)(v3);
    swift_release_n();
    swift_release_n();
    swift_retain_n();
    swift_retain_n();
    v13 = specialized PropertyList.Tracker.value<A>(_:for:)(v3);
    swift_release_n();
    swift_release_n();
    swift_retain_n();
    swift_retain_n();
    v14 = specialized PropertyList.Tracker.value<A>(_:for:)(v3);
    swift_release_n();
    swift_release_n();
    swift_retain_n();
    swift_retain_n();
    v15 = specialized PropertyList.Tracker.value<A>(_:for:)(v3);
    swift_release_n();
    swift_release_n();
    swift_retain_n();
    swift_retain_n();
    v16 = specialized PropertyList.Tracker.value<A>(_:for:)(v3);
    swift_release_n();
    swift_release_n();
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v3, &v53);
    swift_release_n();
    swift_release_n();
    v17 = v53;
  }
  else
  {
    v18 = swift_retain_n();
    v9 = specialized closure #1 in PropertyList.subscript.getter(v18);
    swift_release_n();
    v19 = swift_retain_n();
    v10 = specialized closure #1 in PropertyList.subscript.getter(v19);
    swift_release_n();
    v20 = swift_retain_n();
    v11 = specialized closure #1 in PropertyList.subscript.getter(v20);
    swift_release_n();
    v21 = swift_retain_n();
    v12 = specialized closure #1 in PropertyList.subscript.getter(v21);
    swift_release_n();
    v22 = swift_retain_n();
    v13 = specialized closure #1 in PropertyList.subscript.getter(v22);
    swift_release_n();
    v23 = swift_retain_n();
    v14 = specialized closure #1 in PropertyList.subscript.getter(v23);
    swift_release_n();
    v24 = swift_retain_n();
    v15 = specialized closure #1 in PropertyList.subscript.getter(v24);
    swift_release_n();
    v25 = swift_retain_n();
    v16 = specialized closure #1 in PropertyList.subscript.getter(v25);
    swift_release_n();
    v26 = swift_retain_n();
    v27 = specialized find<A>(_:key:)(v26);
    if (v27)
      v17 = *(_BYTE *)(v27 + 72);
    else
      v17 = 0;
    swift_release_n();
  }
  v53 = v3;
  v54 = v4;
  EnvironmentValues.contentTransitionStyle.getter(&v52);
  v28 = v52;
  if (v4)
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v3, (char *)&v52);
    swift_release_n();
    swift_release_n();
    v29 = v52;
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v3, (uint64_t)&v53);
    swift_release_n();
    swift_release_n();
    v30 = v53;
    v31 = v54;
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v3, &v52);
    swift_release_n();
    result = swift_release_n();
    v33 = v52;
  }
  else
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<WritingModeKey>, (uint64_t)&type metadata for WritingModeKey, (uint64_t)&protocol witness table for WritingModeKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    BloomFilter.init(hashValue:)(v34);
    v35 = v53;
    v36 = swift_retain_n();
    v37 = specialized find1<A>(_:key:filter:)(v36, v35);
    if (v37)
      v29 = *(_BYTE *)(v37 + 72);
    else
      v29 = 0;
    v33 = 2;
    swift_release_n();
    v38 = swift_retain_n();
    specialized closure #1 in PropertyList.subscript.getter(v38, (uint64_t)&v53);
    swift_release_n();
    v30 = v53;
    v31 = v54;
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<TextJustificationKey>, (uint64_t)&type metadata for TextJustificationKey, (uint64_t)&protocol witness table for TextJustificationKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    BloomFilter.init(hashValue:)(v39);
    v40 = v53;
    v41 = swift_retain_n();
    v42 = specialized find1<A>(_:key:filter:)(v41, v40);
    if (v42)
      v33 = *(_WORD *)(v42 + 72);
    result = swift_release_n();
  }
  if (v33 == 2)
    v43 = 0;
  else
    v43 = HIBYTE(v33) & 1;
  if (v16 == 3)
    v44 = 0;
  else
    v44 = v16;
  v45 = v48 & ~(v48 >> 63);
  if ((v47 & 1) != 0)
    v45 = v48;
  if (v50 <= 1)
    v46 = 1;
  else
    v46 = v50;
  LOBYTE(v53) = v49 & 1;
  if ((v49 & 1) != 0)
    v46 = v50;
  *(_QWORD *)a2 = v46;
  *(_BYTE *)(a2 + 8) = v49 & 1;
  *(_QWORD *)(a2 + 16) = v45;
  *(_BYTE *)(a2 + 24) = v47 & 1;
  *(_BYTE *)(a2 + 25) = v51;
  *(_BYTE *)(a2 + 26) = v44;
  *(_BYTE *)(a2 + 27) = v17;
  *(_BYTE *)(a2 + 28) = v28;
  *(double *)(a2 + 32) = v9;
  *(double *)(a2 + 40) = v10;
  *(double *)(a2 + 48) = v11;
  *(double *)(a2 + 56) = v12;
  *(double *)(a2 + 64) = v13;
  *(double *)(a2 + 72) = v14;
  *(_BYTE *)(a2 + 80) = v29;
  *(double *)(a2 + 88) = v15;
  *(_QWORD *)(a2 + 96) = v8;
  *(_BYTE *)(a2 + 104) = v30;
  *(_QWORD *)(a2 + 112) = v31;
  *(_BYTE *)(a2 + 120) = v43;
  return result;
}

uint64_t protocol witness for static DerivedEnvironmentKey.value(in:) in conformance TextLayoutProperties.Key@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6[2];

  v4 = *a1;
  v3 = a1[1];
  v6[0] = v4;
  v6[1] = v3;
  swift_retain();
  swift_retain();
  return TextLayoutProperties.init(from:)(v6, a2);
}

uint64_t TextLayoutProperties.update(_:from:)(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  char v4;
  uint64_t v5;
  char v6;
  double v7;
  double v8;
  double v9;
  int v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  char v14;
  int v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  int v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  uint64_t result;
  int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  unint64_t v54;
  int v55;
  double v56;
  double v57;
  double v58;
  double v59;
  int v60;
  int v61;
  unint64_t v62;
  int v63;
  int v64;
  int v65;
  int v66;
  int v67;
  int v68;
  int v69;
  unsigned __int8 v70;

  v4 = *(_BYTE *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_BYTE *)(a2 + 24);
  v65 = *(unsigned __int8 *)(a2 + 25);
  v66 = *(unsigned __int8 *)(a2 + 26);
  v67 = *(unsigned __int8 *)(a2 + 27);
  v60 = *(unsigned __int8 *)(a2 + 28);
  v8 = *(double *)(a2 + 32);
  v7 = *(double *)(a2 + 40);
  v56 = *(double *)(a2 + 48);
  v57 = *(double *)(a2 + 56);
  v9 = *(double *)(a2 + 72);
  v58 = *(double *)(a2 + 64);
  v63 = *(unsigned __int8 *)(a2 + 80);
  v10 = *(unsigned __int8 *)(a2 + 104);
  v54 = *(_QWORD *)(a2 + 112);
  v11 = *(_QWORD *)v2;
  v12 = *(_BYTE *)(v2 + 8);
  v13 = *(_QWORD *)(v2 + 16);
  v14 = *(_BYTE *)(v2 + 24);
  v55 = *(unsigned __int8 *)(v2 + 25);
  v68 = *(unsigned __int8 *)(v2 + 26);
  v69 = *(unsigned __int8 *)(v2 + 27);
  v15 = *(unsigned __int8 *)(v2 + 28);
  v17 = *(double *)(v2 + 32);
  v16 = *(double *)(v2 + 40);
  v19 = *(double *)(v2 + 48);
  v18 = *(double *)(v2 + 56);
  v20 = *(double *)(v2 + 72);
  v59 = *(double *)(v2 + 64);
  v64 = *(unsigned __int8 *)(v2 + 80);
  v61 = *(unsigned __int8 *)(v2 + 104);
  v62 = *(_QWORD *)(v2 + 112);
  if ((v12 & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 8) & 1) == 0)
      goto LABEL_3;
LABEL_14:
    v23 = *(unsigned __int8 *)(a2 + 104);
    v24 = *(unsigned __int8 *)(v2 + 27);
    if ((*(_BYTE *)(v2 + 24) & 1) == 0)
      goto LABEL_6;
    goto LABEL_15;
  }
  if (v11 != *(_QWORD *)a2)
    v4 = 1;
  if ((v4 & 1) == 0)
    goto LABEL_14;
LABEL_3:
  v52 = *(_QWORD *)(a2 + 16);
  v53 = *(_BYTE *)(a2 + 24);
  v21 = *a1;
  swift_retain_n();
  specialized closure #1 in PropertyList.subscript.setter(a1, v11, v12);
  swift_release();
  if (a1[1])
  {
    v22 = *a1;
    swift_retain();
    swift_retain();
    specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v21, v22);
    swift_release();
    swift_release();
  }
  swift_release();
  v23 = v10;
  v24 = v69;
  v6 = v53;
  v5 = v52;
  if ((v14 & 1) == 0)
  {
LABEL_6:
    if (v13 == v5)
      v25 = v6;
    else
      v25 = 1;
    if ((v25 & 1) == 0)
      goto LABEL_19;
    goto LABEL_16;
  }
LABEL_15:
  if ((v6 & 1) != 0)
    goto LABEL_19;
LABEL_16:
  v26 = *a1;
  swift_retain_n();
  specialized closure #1 in PropertyList.subscript.setter(a1, v13, v14);
  swift_release();
  if (a1[1])
  {
    v27 = *a1;
    swift_retain();
    swift_retain();
    specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v26, v27);
    swift_release();
    swift_release();
  }
  swift_release();
LABEL_19:
  v28 = v68;
  if (v55 != v65)
  {
    v29 = *a1;
    swift_retain_n();
    specialized closure #1 in PropertyList.subscript.setter(a1, v55);
    swift_release();
    if (a1[1])
    {
      v30 = *a1;
      swift_retain();
      swift_retain();
      specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v29, v30);
      swift_release();
      v24 = v69;
      swift_release();
    }
    swift_release();
    v28 = v68;
  }
  if (v28 != v66)
  {
    v31 = *a1;
    swift_retain_n();
    specialized closure #1 in PropertyList.subscript.setter(a1, v28);
    swift_release();
    if (a1[1])
    {
      v32 = *a1;
      swift_retain();
      swift_retain();
      specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v31, v32);
      swift_release();
      v24 = v69;
      swift_release();
    }
    swift_release();
  }
  if (v67 == v24)
  {
    if (v17 == v8)
      goto LABEL_29;
LABEL_34:
    EnvironmentValues.minimumScaleFactor.setter(v17);
    if (v16 == v7)
      goto LABEL_38;
    goto LABEL_35;
  }
  v33 = *a1;
  swift_retain_n();
  specialized closure #1 in PropertyList.subscript.setter(a1, v24);
  swift_release();
  if (a1[1])
  {
    v34 = *a1;
    swift_retain();
    swift_retain();
    specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v33, v34);
    swift_release();
    swift_release();
  }
  swift_release();
  if (v17 != v8)
    goto LABEL_34;
LABEL_29:
  if (v16 == v7)
    goto LABEL_38;
LABEL_35:
  v35 = *a1;
  swift_retain_n();
  specialized closure #1 in PropertyList.subscript.setter(a1, v16);
  swift_release();
  if (a1[1])
  {
    v36 = *a1;
    swift_retain();
    swift_retain();
    specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v35, v36);
    swift_release();
    swift_release();
  }
  swift_release();
LABEL_38:
  if (v19 != v56)
  {
    v37 = *a1;
    swift_retain_n();
    specialized closure #1 in PropertyList.subscript.setter(a1, v19);
    swift_release();
    if (a1[1])
    {
      v38 = *a1;
      swift_retain();
      swift_retain();
      specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v37, v38);
      swift_release();
      swift_release();
    }
    swift_release();
  }
  if (v18 != v57)
  {
    v39 = *a1;
    swift_retain_n();
    specialized closure #1 in PropertyList.subscript.setter(a1, v18);
    swift_release();
    if (a1[1])
    {
      v40 = *a1;
      swift_retain();
      swift_retain();
      specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v39, v40);
      swift_release();
      swift_release();
    }
    swift_release();
  }
  if (v59 == v58)
  {
    if (v20 == v9)
      goto LABEL_48;
  }
  else
  {
    v41 = *a1;
    swift_retain_n();
    specialized closure #1 in PropertyList.subscript.setter(a1, v59);
    swift_release();
    if (a1[1])
    {
      v42 = *a1;
      swift_retain();
      swift_retain();
      specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v41, v42);
      swift_release();
      swift_release();
    }
    swift_release();
    if (v20 == v9)
    {
LABEL_48:
      if (v15 == v60)
        goto LABEL_49;
LABEL_57:
      v70 = v15;
      EnvironmentValues.contentTransitionStyle.setter(&v70);
      if (v61 != v23)
        goto LABEL_60;
      goto LABEL_58;
    }
  }
  v43 = *a1;
  swift_retain_n();
  specialized closure #1 in PropertyList.subscript.setter(a1, v20);
  swift_release();
  if (a1[1])
  {
    v44 = *a1;
    swift_retain();
    swift_retain();
    specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v43, v44);
    swift_release();
    swift_release();
  }
  swift_release();
  if (v15 != v60)
    goto LABEL_57;
LABEL_49:
  if (v61 != v23)
    goto LABEL_60;
LABEL_58:
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v45 = specialized static Array<A>.== infix(_:_:)(v62, v54);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  if ((v45 & 1) != 0)
  {
    v47 = v64;
    goto LABEL_64;
  }
LABEL_60:
  v48 = *a1;
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  specialized closure #1 in PropertyList.subscript.setter(a1, v61, v62);
  swift_bridgeObjectRelease();
  swift_release();
  if (a1[1])
  {
    v49 = *a1;
    swift_retain();
    swift_retain();
    specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v48, v49);
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  v47 = v64;
  result = swift_release();
LABEL_64:
  if (v63 != v47)
  {
    v50 = *a1;
    swift_retain_n();
    specialized closure #1 in PropertyList.subscript.setter(a1, v47);
    swift_release();
    if (a1[1])
    {
      v51 = *a1;
      swift_retain();
      swift_retain();
      specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v50, v51);
      swift_release();
      swift_release();
    }
    return swift_release();
  }
  return result;
}

void TextLayoutProperties.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  char v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  Swift::UInt v18;
  char v19;
  char v20;
  double v21;
  Swift::UInt v22;
  uint64_t v23;
  int64_t v24;
  uint64_t v25;
  int64_t v26;
  double v27;
  Swift::UInt v28;
  uint64_t v29;
  int64_t v30;
  uint64_t v31;
  int64_t v32;
  double v33;
  Swift::UInt v34;
  uint64_t v35;
  int64_t v36;
  uint64_t v37;
  int64_t v38;
  double v39;
  Swift::UInt v40;
  uint64_t v41;
  int64_t v42;
  uint64_t v43;
  int64_t v44;
  double v45;
  Swift::UInt v46;
  uint64_t v47;
  int64_t v48;
  uint64_t v49;
  int64_t v50;
  double v51;
  Swift::UInt v52;
  uint64_t v53;
  int64_t v54;
  uint64_t v55;
  int64_t v56;
  double v57;
  float v58;
  Swift::UInt v59;
  uint64_t v60;
  int64_t v61;
  uint64_t v62;
  int64_t v63;
  double v64;
  Swift::UInt v65;
  uint64_t v66;
  int64_t v67;
  uint64_t v68;
  int64_t v69;
  char v70;
  Swift::UInt v71;
  char v72;
  char v73;
  double v74;
  double v75;

  v3 = v1;
  v5 = *(_QWORD *)v3;
  v6 = *(_BYTE *)(v3 + 8);
  v7 = *(_QWORD *)(v3 + 16);
  v8 = *(_BYTE *)(v3 + 24);
  v9 = *(unsigned __int8 *)(v3 + 25);
  v10 = *(unsigned __int8 *)(v3 + 26);
  v73 = *(_BYTE *)(v3 + 27);
  v11 = *(unsigned __int8 *)(v3 + 28);
  v13 = *(double *)(v3 + 32);
  v12 = *(double *)(v3 + 40);
  v15 = *(double *)(v3 + 48);
  v14 = *(double *)(v3 + 56);
  v17 = *(double *)(v3 + 64);
  v16 = *(double *)(v3 + 72);
  v70 = *(_BYTE *)(v3 + 80);
  v75 = *(double *)(v3 + 88);
  v74 = *(double *)(v3 + 96);
  v71 = *(unsigned __int8 *)(v3 + 104);
  v72 = *(_BYTE *)(v3 + 120);
  if (v9 != 1)
  {
    v18 = v9 + 1;
    ProtobufEncoder.encodeVarint(_:)(8uLL);
    ProtobufEncoder.encodeVarint(_:)(v18);
  }
  if (v5 == 0x7FFFFFFFFFFFFFFFLL)
    v19 = 1;
  else
    v19 = v6;
  if ((v19 & 1) == 0)
  {
    ProtobufEncoder.encodeVarint(_:)(0x10uLL);
    ProtobufEncoder.encodeVarint(_:)((2 * v5) ^ (v5 >> 63));
  }
  if (v7 == 0x7FFFFFFFFFFFFFFFLL)
    v20 = 1;
  else
    v20 = v8;
  if ((v20 & 1) == 0)
  {
    ProtobufEncoder.encodeVarint(_:)(0x18uLL);
    ProtobufEncoder.encodeVarint(_:)((2 * v7) ^ (v7 >> 63));
  }
  if (v13 != 1.0)
  {
    v21 = fabs(v13);
    if (v21 >= 65536.0)
      v22 = 33;
    else
      v22 = 37;
    ProtobufEncoder.encodeVarint(_:)(v22);
    if (v21 >= 65536.0)
    {
      v25 = a1[1];
      v26 = v25 + 8;
      if (__OFADD__(v25, 8))
      {
        __break(1u);
      }
      else if (a1[2] >= v26)
      {
        a1[1] = v26;
        *(double *)(*a1 + v25) = v13;
        goto LABEL_24;
      }
      *(double *)ProtobufEncoder.growBufferSlow(to:)(v26) = v13;
    }
    else
    {
      v23 = a1[1];
      v24 = v23 + 4;
      if (__OFADD__(v23, 4))
      {
        __break(1u);
      }
      else
      {
        *(float *)&v13 = v13;
        if (a1[2] >= v24)
        {
          a1[1] = v24;
          *(_DWORD *)(*a1 + v23) = LODWORD(v13);
          goto LABEL_24;
        }
      }
      *(_DWORD *)ProtobufEncoder.growBufferSlow(to:)(v24) = LODWORD(v13);
    }
  }
LABEL_24:
  if (v12 == 0.0)
    goto LABEL_35;
  v27 = fabs(v12);
  if (v27 >= 65536.0)
    v28 = 41;
  else
    v28 = 45;
  ProtobufEncoder.encodeVarint(_:)(v28);
  if (v27 >= 65536.0)
  {
    v31 = a1[1];
    v32 = v31 + 8;
    if (__OFADD__(v31, 8))
    {
      __break(1u);
    }
    else if (a1[2] >= v32)
    {
      a1[1] = v32;
      *(double *)(*a1 + v31) = v12;
      goto LABEL_35;
    }
    *(double *)ProtobufEncoder.growBufferSlow(to:)(v32) = v12;
  }
  else
  {
    v29 = a1[1];
    v30 = v29 + 4;
    if (__OFADD__(v29, 4))
    {
      __break(1u);
    }
    else
    {
      *(float *)&v12 = v12;
      if (a1[2] >= v30)
      {
        a1[1] = v30;
        *(_DWORD *)(*a1 + v29) = LODWORD(v12);
        goto LABEL_35;
      }
    }
    *(_DWORD *)ProtobufEncoder.growBufferSlow(to:)(v30) = LODWORD(v12);
  }
LABEL_35:
  if (v15 == 0.0)
    goto LABEL_46;
  v33 = fabs(v15);
  if (v33 >= 65536.0)
    v34 = 49;
  else
    v34 = 53;
  ProtobufEncoder.encodeVarint(_:)(v34);
  if (v33 >= 65536.0)
  {
    v37 = a1[1];
    v38 = v37 + 8;
    if (__OFADD__(v37, 8))
    {
      __break(1u);
    }
    else if (a1[2] >= v38)
    {
      a1[1] = v38;
      *(double *)(*a1 + v37) = v15;
      goto LABEL_46;
    }
    *(double *)ProtobufEncoder.growBufferSlow(to:)(v38) = v15;
  }
  else
  {
    v35 = a1[1];
    v36 = v35 + 4;
    if (__OFADD__(v35, 4))
    {
      __break(1u);
    }
    else
    {
      *(float *)&v15 = v15;
      if (a1[2] >= v36)
      {
        a1[1] = v36;
        *(_DWORD *)(*a1 + v35) = LODWORD(v15);
        goto LABEL_46;
      }
    }
    *(_DWORD *)ProtobufEncoder.growBufferSlow(to:)(v36) = LODWORD(v15);
  }
LABEL_46:
  if (one-time initialization token for defaultValue != -1)
    swift_once();
  if (v14 != *(double *)&static MaximumLineHeightKey.defaultValue)
  {
    v39 = fabs(v14);
    if (v39 >= 65536.0)
      v40 = 57;
    else
      v40 = 61;
    ProtobufEncoder.encodeVarint(_:)(v40);
    if (v39 >= 65536.0)
    {
      v43 = a1[1];
      v44 = v43 + 8;
      if (__OFADD__(v43, 8))
      {
        __break(1u);
      }
      else if (a1[2] >= v44)
      {
        a1[1] = v44;
        *(double *)(*a1 + v43) = v14;
        goto LABEL_59;
      }
      *(double *)ProtobufEncoder.growBufferSlow(to:)(v44) = v14;
    }
    else
    {
      v41 = a1[1];
      v42 = v41 + 4;
      if (__OFADD__(v41, 4))
      {
        __break(1u);
      }
      else
      {
        *(float *)&v14 = v14;
        if (a1[2] >= v42)
        {
          a1[1] = v42;
          *(_DWORD *)(*a1 + v41) = LODWORD(v14);
          goto LABEL_59;
        }
      }
      *(_DWORD *)ProtobufEncoder.growBufferSlow(to:)(v42) = LODWORD(v14);
    }
  }
LABEL_59:
  if (one-time initialization token for defaultValue != -1)
    swift_once();
  if (v17 != *(double *)&static MinimumLineHeightKey.defaultValue)
  {
    v45 = fabs(v17);
    if (v45 >= 65536.0)
      v46 = 65;
    else
      v46 = 69;
    ProtobufEncoder.encodeVarint(_:)(v46);
    if (v45 >= 65536.0)
    {
      v49 = a1[1];
      v50 = v49 + 8;
      if (__OFADD__(v49, 8))
      {
        __break(1u);
      }
      else if (a1[2] >= v50)
      {
        a1[1] = v50;
        *(double *)(*a1 + v49) = v17;
        goto LABEL_72;
      }
      *(double *)ProtobufEncoder.growBufferSlow(to:)(v50) = v17;
    }
    else
    {
      v47 = a1[1];
      v48 = v47 + 4;
      if (__OFADD__(v47, 4))
      {
        __break(1u);
      }
      else
      {
        *(float *)&v17 = v17;
        if (a1[2] >= v48)
        {
          a1[1] = v48;
          *(_DWORD *)(*a1 + v47) = LODWORD(v17);
          goto LABEL_72;
        }
      }
      *(_DWORD *)ProtobufEncoder.growBufferSlow(to:)(v48) = LODWORD(v17);
    }
  }
LABEL_72:
  if (v16 == 0.0)
    goto LABEL_83;
  v51 = fabs(v16);
  if (v51 >= 65536.0)
    v52 = 73;
  else
    v52 = 77;
  ProtobufEncoder.encodeVarint(_:)(v52);
  if (v51 >= 65536.0)
  {
    v55 = a1[1];
    v56 = v55 + 8;
    if (__OFADD__(v55, 8))
    {
      __break(1u);
    }
    else if (a1[2] >= v56)
    {
      a1[1] = v56;
      *(double *)(*a1 + v55) = v16;
      goto LABEL_83;
    }
    *(double *)ProtobufEncoder.growBufferSlow(to:)(v56) = v16;
  }
  else
  {
    v53 = a1[1];
    v54 = v53 + 4;
    if (__OFADD__(v53, 4))
    {
      __break(1u);
    }
    else
    {
      *(float *)&v16 = v16;
      if (a1[2] >= v54)
      {
        a1[1] = v54;
        *(_DWORD *)(*a1 + v53) = LODWORD(v16);
        goto LABEL_83;
      }
    }
    *(_DWORD *)ProtobufEncoder.growBufferSlow(to:)(v54) = LODWORD(v16);
  }
LABEL_83:
  if (v75 == 0.0)
    goto LABEL_94;
  v57 = fabs(v75);
  v58 = 0.0;
  if (v57 >= 65536.0)
    v59 = 81;
  else
    v59 = 85;
  ProtobufEncoder.encodeVarint(_:)(v59);
  if (v57 >= 65536.0)
  {
    v62 = a1[1];
    v63 = v62 + 8;
    if (__OFADD__(v62, 8))
    {
      __break(1u);
    }
    else if (a1[2] >= v63)
    {
      a1[1] = v63;
      *(double *)(*a1 + v62) = v75;
      goto LABEL_94;
    }
    *(double *)ProtobufEncoder.growBufferSlow(to:)(v63) = v75;
  }
  else
  {
    v60 = a1[1];
    v61 = v60 + 4;
    if (__OFADD__(v60, 4))
    {
      __break(1u);
    }
    else
    {
      v58 = v75;
      if (a1[2] >= v61)
      {
        a1[1] = v61;
        *(float *)(*a1 + v60) = v58;
        goto LABEL_94;
      }
    }
    *(float *)ProtobufEncoder.growBufferSlow(to:)(v61) = v58;
  }
LABEL_94:
  if (v74 == 1.0)
    goto LABEL_105;
  v64 = fabs(v74);
  if (v64 >= 65536.0)
    v65 = 89;
  else
    v65 = 93;
  ProtobufEncoder.encodeVarint(_:)(v65);
  if (v64 >= 65536.0)
  {
    v68 = a1[1];
    v69 = v68 + 8;
    if (__OFADD__(v68, 8))
    {
      __break(1u);
    }
    else if (a1[2] >= v69)
    {
      a1[1] = v69;
      *(double *)(*a1 + v68) = v74;
      goto LABEL_105;
    }
    *(double *)ProtobufEncoder.growBufferSlow(to:)(v69) = v74;
  }
  else
  {
    v66 = a1[1];
    v67 = v66 + 4;
    if (__OFADD__(v66, 4))
    {
      __break(1u);
    }
    else
    {
      *(float *)&v64 = v74;
      if (a1[2] >= v67)
      {
        a1[1] = v67;
        *(_DWORD *)(*a1 + v66) = LODWORD(v64);
        goto LABEL_105;
      }
    }
    *(_DWORD *)ProtobufEncoder.growBufferSlow(to:)(v67) = LODWORD(v64);
  }
LABEL_105:
  if ((_DWORD)v10)
  {
    ProtobufEncoder.encodeVarint(_:)(0x60uLL);
    ProtobufEncoder.encodeVarint(_:)(v10 + 1);
  }
  if ((v73 & 1) != 0)
  {
    ProtobufEncoder.encodeVarint(_:)(0x68uLL);
    ProtobufEncoder.encodeVarint(_:)(1uLL);
  }
  if (!v11 || (specialized ProtobufEncoder.messageField<A>(_:_:)(14), !v2))
  {
    if ((v70 & 1) != 0)
    {
      ProtobufEncoder.encodeVarint(_:)(0x80uLL);
      ProtobufEncoder.encodeVarint(_:)(1uLL);
    }
    if ((v72 & 1) != 0)
    {
      ProtobufEncoder.encodeVarint(_:)(0x88uLL);
      ProtobufEncoder.encodeVarint(_:)(1uLL);
    }
    if ((_DWORD)v71)
    {
      ProtobufEncoder.encodeVarint(_:)(0x90uLL);
      ProtobufEncoder.encodeVarint(_:)(v71);
    }
    if ((v72 & 2) != 0)
    {
      ProtobufEncoder.encodeVarint(_:)(0x98uLL);
      ProtobufEncoder.encodeVarint(_:)(1uLL);
    }
  }
}

uint64_t TextLayoutProperties.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  double v6;
  double v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t result;
  uint64_t v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  BOOL v20;
  char v21;
  char v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  char v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  double *v36;
  uint64_t v37;
  double *v38;
  uint64_t v39;
  double *v40;
  uint64_t v41;
  double *v42;
  uint64_t v43;
  double *v44;
  uint64_t v45;
  double *v46;
  uint64_t v47;
  double *v48;
  uint64_t v49;
  unint64_t v50;
  char v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  unint64_t v69;
  unsigned int v70;
  unsigned int v71;
  uint64_t v72;
  unint64_t v73;
  char v74;
  char v75;
  uint64_t v76;
  unint64_t v77;
  float *v78;
  float v79;
  float *v80;
  float v81;
  float *v82;
  float v83;
  float *v84;
  float v85;
  float *v86;
  float v87;
  float *v88;
  float v89;
  float *v90;
  float v91;
  unint64_t v92;
  _QWORD *v93;
  _QWORD *v94;
  char v95;
  char v96;
  BOOL v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  char v102;
  _BYTE v103[7];
  uint64_t v104;
  char v105;
  char v106;
  char v107;
  char v108;
  char v109;
  __int16 v110;
  char v111;
  double v112;
  double v113;
  uint64_t v114;
  double v115;
  double v116;
  double v117;
  BOOL v118;
  _BYTE v119[7];
  double v120;
  double v121;
  char v122;
  _BYTE v123[7];
  uint64_t v124;
  char v125;
  _BYTE v126[7];
  _BYTE v127[7];
  __int16 v128;
  char v129;
  char v130;
  _BYTE v131[7];
  char v132;
  char v133;
  char v134;

  v3 = v2;
  if (one-time initialization token for defaultValue != -1)
    swift_once();
  v6 = *(double *)&static MaximumLineHeightKey.defaultValue;
  if (one-time initialization token for defaultValue != -1)
    swift_once();
  v7 = *(double *)&static MinimumLineHeightKey.defaultValue;
  if (one-time initialization token for standard != -1)
    swift_once();
  v8 = static Text.Sizing.standard;
  v9 = qword_25426BAF8;
  v10 = 1;
  v134 = 1;
  v133 = 1;
  v132 = 1;
  v130 = 1;
  v11 = a1[1];
  v12 = a1[2];
  result = swift_bridgeObjectRetain();
  if (v11 >= v12)
  {
    v20 = 0;
    LOBYTE(v14) = 0;
    v21 = 0;
    v22 = 0;
    v23 = 0;
    v24 = 0;
    v25 = 0;
    v18 = 0.0;
    v19 = 1.0;
    v17 = 0.0;
    v26 = 1;
    v15 = 0.0;
    v16 = 1.0;
    v27 = 1;
    goto LABEL_10;
  }
  v99 = 0;
  v100 = 0;
  v98 = 0;
  v14 = 0;
  v97 = 0;
  v94 = a1 + 5;
  v15 = 0.0;
  v16 = 1.0;
  v95 = 0;
  v96 = 1;
  v17 = 0.0;
  v18 = 0.0;
  v19 = 1.0;
  while (2)
  {
    result = a1[3];
    if (!result)
      goto LABEL_19;
    v28 = a1[4];
    if (v11 >= v28)
    {
      if (v28 < v11)
        goto LABEL_211;
      a1[3] = 0;
LABEL_19:
      result = ProtobufDecoder.decodeVarint()();
      if (v3)
        goto LABEL_212;
      if ((unint64_t)result <= 7)
        goto LABEL_211;
    }
    switch((unint64_t)result >> 3)
    {
      case 1uLL:
        if ((result & 7) == 0)
          goto LABEL_28;
        if ((result & 7) != 2)
          goto LABEL_211;
        v29 = ProtobufDecoder.decodeVarint()();
        if (v3)
          goto LABEL_212;
        if (v29 < 0)
          goto LABEL_219;
        v30 = a1[1] + v29;
        if (v12 < v30)
          goto LABEL_211;
        a1[3] = 8;
        a1[4] = v30;
LABEL_28:
        result = ProtobufDecoder.decodeVarint()();
        if (v3)
          goto LABEL_212;
        if (result == 1)
        {
          v96 = 0;
        }
        else if (result == 3)
        {
          v96 = 2;
        }
        else
        {
          v96 = 1;
        }
        goto LABEL_14;
      case 2uLL:
        if ((result & 7) == 0)
          goto LABEL_38;
        if ((result & 7) != 2)
          goto LABEL_211;
        v31 = ProtobufDecoder.decodeVarint()();
        if (v3)
          goto LABEL_212;
        if (v31 < 0)
          goto LABEL_220;
        v32 = a1[1] + v31;
        if (v12 < v32)
          goto LABEL_211;
        a1[3] = 16;
        a1[4] = v32;
LABEL_38:
        result = ProtobufDecoder.decodeVarint()();
        if (v3)
          goto LABEL_212;
        v99 = -(result & 1) ^ (result >> 1);
        v132 = 0;
        goto LABEL_14;
      case 3uLL:
        if ((result & 7) == 0)
          goto LABEL_46;
        if ((result & 7) != 2)
          goto LABEL_211;
        v33 = ProtobufDecoder.decodeVarint()();
        if (v3)
          goto LABEL_212;
        if (v33 < 0)
          goto LABEL_221;
        v34 = a1[1] + v33;
        if (v12 < v34)
          goto LABEL_211;
        a1[3] = 24;
        a1[4] = v34;
LABEL_46:
        result = ProtobufDecoder.decodeVarint()();
        if (v3)
          goto LABEL_212;
        v100 = -(result & 1) ^ (result >> 1);
        v130 = 0;
        goto LABEL_14;
      case 4uLL:
        v35 = result & 7;
        if (v35 == 5)
        {
          v78 = (float *)a1[1];
          if (v12 < (unint64_t)(v78 + 1))
            goto LABEL_211;
          v79 = *v78;
          a1[1] = v78 + 1;
          v16 = v79;
        }
        else
        {
          if (v35 == 2)
          {
            result = ProtobufDecoder.decodeVarint()();
            if (v3)
              goto LABEL_212;
            if (result < 0)
              goto LABEL_228;
            v36 = (double *)a1[1];
            if (v12 < (unint64_t)v36 + result)
              goto LABEL_211;
            a1[3] = 33;
            a1[4] = (char *)v36 + result;
          }
          else
          {
            if (v35 != 1)
              goto LABEL_211;
            v36 = (double *)a1[1];
          }
          if (v12 < (unint64_t)(v36 + 1))
            goto LABEL_211;
          v16 = *v36;
          a1[1] = v36 + 1;
        }
        goto LABEL_14;
      case 5uLL:
        v37 = result & 7;
        if (v37 == 5)
        {
          v80 = (float *)a1[1];
          if (v12 < (unint64_t)(v80 + 1))
            goto LABEL_211;
          v81 = *v80;
          a1[1] = v80 + 1;
          v15 = v81;
        }
        else
        {
          if (v37 == 2)
          {
            result = ProtobufDecoder.decodeVarint()();
            if (v3)
              goto LABEL_212;
            if (result < 0)
              goto LABEL_229;
            v38 = (double *)a1[1];
            if (v12 < (unint64_t)v38 + result)
              goto LABEL_211;
            a1[3] = 41;
            a1[4] = (char *)v38 + result;
          }
          else
          {
            if (v37 != 1)
              goto LABEL_211;
            v38 = (double *)a1[1];
          }
          if (v12 < (unint64_t)(v38 + 1))
            goto LABEL_211;
          v15 = *v38;
          a1[1] = v38 + 1;
        }
        goto LABEL_14;
      case 7uLL:
        v39 = result & 7;
        if (v39 == 5)
        {
          v82 = (float *)a1[1];
          if (v12 < (unint64_t)(v82 + 1))
            goto LABEL_211;
          v83 = *v82;
          a1[1] = v82 + 1;
          v6 = v83;
        }
        else
        {
          if (v39 == 2)
          {
            result = ProtobufDecoder.decodeVarint()();
            if (v3)
              goto LABEL_212;
            if (result < 0)
              goto LABEL_230;
            v40 = (double *)a1[1];
            if (v12 < (unint64_t)v40 + result)
              goto LABEL_211;
            a1[3] = 57;
            a1[4] = (char *)v40 + result;
          }
          else
          {
            if (v39 != 1)
              goto LABEL_211;
            v40 = (double *)a1[1];
          }
          if (v12 < (unint64_t)(v40 + 1))
            goto LABEL_211;
          v6 = *v40;
          a1[1] = v40 + 1;
        }
        goto LABEL_14;
      case 8uLL:
        v41 = result & 7;
        if (v41 == 5)
        {
          v84 = (float *)a1[1];
          if (v12 < (unint64_t)(v84 + 1))
            goto LABEL_211;
          v85 = *v84;
          a1[1] = v84 + 1;
          v7 = v85;
        }
        else
        {
          if (v41 == 2)
          {
            result = ProtobufDecoder.decodeVarint()();
            if (v3)
              goto LABEL_212;
            if (result < 0)
              goto LABEL_231;
            v42 = (double *)a1[1];
            if (v12 < (unint64_t)v42 + result)
              goto LABEL_211;
            a1[3] = 65;
            a1[4] = (char *)v42 + result;
          }
          else
          {
            if (v41 != 1)
              goto LABEL_211;
            v42 = (double *)a1[1];
          }
          if (v12 < (unint64_t)(v42 + 1))
            goto LABEL_211;
          v7 = *v42;
          a1[1] = v42 + 1;
        }
        goto LABEL_14;
      case 9uLL:
        v43 = result & 7;
        if (v43 == 5)
        {
          v86 = (float *)a1[1];
          if (v12 < (unint64_t)(v86 + 1))
            goto LABEL_211;
          v87 = *v86;
          a1[1] = v86 + 1;
          v17 = v87;
        }
        else
        {
          if (v43 == 2)
          {
            result = ProtobufDecoder.decodeVarint()();
            if (v3)
              goto LABEL_212;
            if (result < 0)
              goto LABEL_232;
            v44 = (double *)a1[1];
            if (v12 < (unint64_t)v44 + result)
              goto LABEL_211;
            a1[3] = 73;
            a1[4] = (char *)v44 + result;
          }
          else
          {
            if (v43 != 1)
              goto LABEL_211;
            v44 = (double *)a1[1];
          }
          if (v12 < (unint64_t)(v44 + 1))
            goto LABEL_211;
          v17 = *v44;
          a1[1] = v44 + 1;
        }
        goto LABEL_14;
      case 0xAuLL:
        v45 = result & 7;
        if (v45 == 5)
        {
          v88 = (float *)a1[1];
          if (v12 < (unint64_t)(v88 + 1))
            goto LABEL_211;
          v89 = *v88;
          a1[1] = v88 + 1;
          v18 = v89;
        }
        else
        {
          if (v45 == 2)
          {
            result = ProtobufDecoder.decodeVarint()();
            if (v3)
              goto LABEL_212;
            if (result < 0)
              goto LABEL_233;
            v46 = (double *)a1[1];
            if (v12 < (unint64_t)v46 + result)
              goto LABEL_211;
            a1[3] = 81;
            a1[4] = (char *)v46 + result;
          }
          else
          {
            if (v45 != 1)
              goto LABEL_211;
            v46 = (double *)a1[1];
          }
          if (v12 < (unint64_t)(v46 + 1))
            goto LABEL_211;
          v18 = *v46;
          a1[1] = v46 + 1;
        }
        goto LABEL_14;
      case 0xBuLL:
        v47 = result & 7;
        if (v47 == 5)
        {
          v90 = (float *)a1[1];
          if (v12 < (unint64_t)(v90 + 1))
            goto LABEL_211;
          v91 = *v90;
          a1[1] = v90 + 1;
          v19 = v91;
        }
        else
        {
          if (v47 == 2)
          {
            result = ProtobufDecoder.decodeVarint()();
            if (v3)
              goto LABEL_212;
            if (result < 0)
              goto LABEL_234;
            v48 = (double *)a1[1];
            if (v12 < (unint64_t)v48 + result)
              goto LABEL_211;
            a1[3] = 89;
            a1[4] = (char *)v48 + result;
          }
          else
          {
            if (v47 != 1)
              goto LABEL_211;
            v48 = (double *)a1[1];
          }
          if (v12 < (unint64_t)(v48 + 1))
            goto LABEL_211;
          v19 = *v48;
          a1[1] = v48 + 1;
        }
        goto LABEL_14;
      case 0xCuLL:
        if ((result & 7) == 0)
          goto LABEL_85;
        if ((result & 7) != 2)
          goto LABEL_211;
        v49 = ProtobufDecoder.decodeVarint()();
        if (v3)
          goto LABEL_212;
        if (v49 < 0)
          goto LABEL_222;
        v50 = a1[1] + v49;
        if (v12 < v50)
          goto LABEL_211;
        a1[3] = 96;
        a1[4] = v50;
LABEL_85:
        result = ProtobufDecoder.decodeVarint()();
        if (v3)
          goto LABEL_212;
        v51 = result == 2;
        if (result == 3)
          v51 = 2;
        BYTE4(v98) = v51;
        goto LABEL_14;
      case 0xDuLL:
        if ((result & 7) == 0)
          goto LABEL_95;
        if ((result & 7) != 2)
          goto LABEL_211;
        v52 = ProtobufDecoder.decodeVarint()();
        if (v3)
          goto LABEL_212;
        if (v52 < 0)
          goto LABEL_223;
        v53 = a1[1] + v52;
        if (v12 < v53)
          goto LABEL_211;
        a1[3] = 104;
        a1[4] = v53;
LABEL_95:
        result = ProtobufDecoder.decodeVarint()();
        if (v3)
          goto LABEL_212;
        LOBYTE(v98) = result != 0;
        goto LABEL_14;
      case 0xEuLL:
        if ((result & 7) != 2)
          goto LABEL_211;
        v54 = v9;
        v55 = v14;
        v56 = (_QWORD *)*v94;
        v14 = v8;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v56 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v56[2] + 1, 1, v56);
        v58 = v56[2];
        v57 = v56[3];
        v59 = v58 + 1;
        if (v58 >= v57 >> 1)
        {
          v93 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v57 > 1), v58 + 1, 1, v56);
          v59 = v58 + 1;
          v56 = v93;
        }
        v56[2] = v59;
        v56[v58 + 4] = v12;
        a1[5] = v56;
        v60 = ProtobufDecoder.decodeVarint()();
        if (v3)
        {
          LOBYTE(v8) = v14;
          LOBYTE(v14) = v55;
LABEL_216:
          v9 = v54;
LABEL_212:
          v101 = v99;
          v102 = v132;
          *(_DWORD *)v103 = *(_DWORD *)v131;
          *(_DWORD *)&v103[3] = *(_DWORD *)&v131[3];
          v104 = v100;
          v105 = v130;
          v106 = v96;
          v107 = BYTE4(v98);
          v108 = v98;
          v109 = v95;
          v110 = v128;
          v111 = v129;
          v112 = v16;
          v113 = v15;
          v114 = 0;
          v115 = v6;
          v116 = v7;
          v117 = v17;
          v118 = v97;
          *(_DWORD *)v119 = *(_DWORD *)v127;
          *(_DWORD *)&v119[3] = *(_DWORD *)&v127[3];
          v120 = v18;
          v121 = v19;
          v122 = v8;
          *(_DWORD *)&v123[3] = *(_DWORD *)&v126[3];
          *(_DWORD *)v123 = *(_DWORD *)v126;
          v124 = v9;
          v125 = v14;
          return outlined release of TextLayoutProperties((uint64_t)&v101);
        }
        if (v60 < 0)
        {
          __break(1u);
LABEL_218:
          __break(1u);
LABEL_219:
          __break(1u);
LABEL_220:
          __break(1u);
LABEL_221:
          __break(1u);
LABEL_222:
          __break(1u);
LABEL_223:
          __break(1u);
LABEL_224:
          __break(1u);
LABEL_225:
          __break(1u);
LABEL_226:
          __break(1u);
LABEL_227:
          __break(1u);
LABEL_228:
          __break(1u);
LABEL_229:
          __break(1u);
LABEL_230:
          __break(1u);
LABEL_231:
          __break(1u);
LABEL_232:
          __break(1u);
LABEL_233:
          __break(1u);
LABEL_234:
          __break(1u);
LABEL_235:
          __break(1u);
          __break(1u);
          JUMPOUT(0x234D23208);
        }
        v8 = v14;
        v61 = a1[1] + v60;
        v14 = v55;
        if (v12 < v61)
        {
          lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
          swift_allocError();
          swift_willThrow();
          goto LABEL_216;
        }
        a1[2] = v61;
        ContentTransition.Style.init(from:)((unint64_t)a1, (char *)&v101);
        v9 = v54;
        v62 = (_QWORD *)*v94;
        if (!*(_QWORD *)(*v94 + 16))
          goto LABEL_218;
        result = swift_isUniquelyReferenced_nonNull_native();
        if ((result & 1) != 0)
        {
          v63 = v62[2];
          if (!v63)
            goto LABEL_210;
          goto LABEL_108;
        }
        result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v62);
        v62 = (_QWORD *)result;
        v63 = *(_QWORD *)(result + 16);
        if (!v63)
        {
LABEL_210:
          __break(1u);
LABEL_211:
          lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
          swift_allocError();
          swift_willThrow();
          goto LABEL_212;
        }
LABEL_108:
        v64 = v63 - 1;
        v65 = v62[v64 + 4];
        v62[2] = v64;
        a1[5] = v62;
        a1[2] = v65;
        v95 = v101;
LABEL_14:
        v11 = a1[1];
        v12 = a1[2];
        if (v11 < v12)
          continue;
        v26 = v132;
        v10 = v130;
        v20 = v97;
        v22 = v98;
        v23 = BYTE4(v98);
        v25 = v99;
        v24 = v100;
        v21 = v95;
        v27 = v96;
LABEL_10:
        a1[3] = 0;
        *(_DWORD *)(a2 + 9) = *(_DWORD *)v131;
        *(_DWORD *)(a2 + 12) = *(_DWORD *)&v131[3];
        *(_WORD *)(a2 + 29) = v128;
        *(_BYTE *)(a2 + 31) = v129;
        *(_DWORD *)(a2 + 81) = *(_DWORD *)v127;
        *(_DWORD *)(a2 + 84) = *(_DWORD *)&v127[3];
        *(_DWORD *)(a2 + 108) = *(_DWORD *)&v126[3];
        *(_DWORD *)(a2 + 105) = *(_DWORD *)v126;
        *(_QWORD *)a2 = v25;
        *(_BYTE *)(a2 + 8) = v26;
        *(_QWORD *)(a2 + 16) = v24;
        *(_BYTE *)(a2 + 24) = v10;
        *(_BYTE *)(a2 + 25) = v27;
        *(_BYTE *)(a2 + 26) = v23;
        *(_BYTE *)(a2 + 27) = v22;
        *(_BYTE *)(a2 + 28) = v21;
        *(double *)(a2 + 32) = v16;
        *(double *)(a2 + 40) = v15;
        *(_QWORD *)(a2 + 48) = 0;
        *(double *)(a2 + 56) = v6;
        *(double *)(a2 + 64) = v7;
        *(double *)(a2 + 72) = v17;
        *(_BYTE *)(a2 + 80) = v20;
        *(double *)(a2 + 88) = v18;
        *(double *)(a2 + 96) = v19;
        *(_BYTE *)(a2 + 104) = v8;
        *(_QWORD *)(a2 + 112) = v9;
        *(_BYTE *)(a2 + 120) = v14;
        return result;
      case 0x10uLL:
        if ((result & 7) == 0)
          goto LABEL_115;
        if ((result & 7) != 2)
          goto LABEL_211;
        v66 = ProtobufDecoder.decodeVarint()();
        if (v3)
          goto LABEL_212;
        if (v66 < 0)
          goto LABEL_224;
        v67 = a1[1] + v66;
        if (v12 < v67)
          goto LABEL_211;
        a1[3] = 128;
        a1[4] = v67;
LABEL_115:
        result = ProtobufDecoder.decodeVarint()();
        if (v3)
          goto LABEL_212;
        v97 = result == 1;
        goto LABEL_14;
      case 0x11uLL:
        if ((result & 7) == 0)
          goto LABEL_123;
        if ((result & 7) != 2)
          goto LABEL_211;
        v68 = ProtobufDecoder.decodeVarint()();
        if (v3)
          goto LABEL_212;
        if (v68 < 0)
          goto LABEL_225;
        v69 = a1[1] + v68;
        if (v12 < v69)
          goto LABEL_211;
        a1[3] = 136;
        a1[4] = v69;
LABEL_123:
        result = ProtobufDecoder.decodeVarint()();
        if (v3)
          goto LABEL_212;
        v70 = v14 & 0xFFFFFFFE;
        v71 = v14 | 1;
        goto LABEL_11;
      case 0x12uLL:
        if ((result & 7) == 0)
          goto LABEL_131;
        if ((result & 7) != 2)
          goto LABEL_211;
        v72 = ProtobufDecoder.decodeVarint()();
        if (v3)
          goto LABEL_212;
        if (v72 < 0)
          goto LABEL_226;
        v73 = a1[1] + v72;
        if (v12 < v73)
          goto LABEL_211;
        a1[3] = 144;
        a1[4] = v73;
LABEL_131:
        v74 = ProtobufDecoder.decodeVarint()();
        if (v3)
          goto LABEL_212;
        v75 = v74;
        result = swift_bridgeObjectRelease();
        if (v75 == 2)
          v8 = 2;
        else
          v8 = v75 == 1;
        v9 = MEMORY[0x24BEE4AF8];
        goto LABEL_14;
      case 0x13uLL:
        if ((result & 7) == 0)
          goto LABEL_142;
        if ((result & 7) != 2)
          goto LABEL_211;
        v76 = ProtobufDecoder.decodeVarint()();
        if (v3)
          goto LABEL_212;
        if (v76 < 0)
          goto LABEL_227;
        v77 = a1[1] + v76;
        if (v12 < v77)
          goto LABEL_211;
        a1[3] = 152;
        a1[4] = v77;
LABEL_142:
        result = ProtobufDecoder.decodeVarint()();
        if (v3)
          goto LABEL_212;
        v70 = v14 & 0xFFFFFFFD;
        v71 = v14 | 2;
LABEL_11:
        if (result)
          v14 = v71;
        else
          v14 = v70;
        goto LABEL_14;
      default:
        switch(result & 7)
        {
          case 0:
            result = ProtobufDecoder.decodeVarint()();
            if (v3)
              goto LABEL_212;
            goto LABEL_14;
          case 1:
            v92 = a1[1] + 8;
            goto LABEL_206;
          case 2:
            result = ProtobufDecoder.decodeVarint()();
            if (v3)
              goto LABEL_212;
            if (result < 0)
              goto LABEL_235;
            v92 = a1[1] + result;
LABEL_206:
            if (v12 < v92)
              goto LABEL_211;
            a1[1] = v92;
            break;
          case 5:
            v92 = a1[1] + 4;
            goto LABEL_206;
          default:
            goto LABEL_211;
        }
        goto LABEL_14;
    }
  }
}

void protocol witness for ProtobufEncodableMessage.encode(to:) in conformance TextLayoutProperties(_QWORD *a1)
{
  TextLayoutProperties.encode(to:)(a1);
}

uint64_t protocol witness for ProtobufDecodableMessage.init(from:) in conformance TextLayoutProperties@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return TextLayoutProperties.init(from:)(a1, a2);
}

uint64_t one-time initialization function for oversizedScalars()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void (*v10)(char *, char *, uint64_t);
  uint64_t v12;

  v0 = type metadata accessor for CharacterSet();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x24BDAC7A8](v0);
  v3 = (char *)&v12 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for CharacterSet?(0);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_allocate_value_buffer(v0, static NSAttributedString.oversizedScalars);
  v7 = __swift_project_value_buffer(v0, (uint64_t)static NSAttributedString.oversizedScalars);
  v8 = CTFontCopySystemUIFontExcessiveLineHeightCharacterSet();
  if (v8)
  {
    v9 = (void *)v8;
    static CharacterSet._unconditionallyBridgeFromObjectiveC(_:)();

    v10 = *(void (**)(char *, char *, uint64_t))(v1 + 32);
    v10(v6, v3, v0);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v1 + 56))(v6, 0, 1, v0);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v1 + 48))(v6, 1, v0) != 1)
      return ((uint64_t (*)(uint64_t, char *, uint64_t))v10)(v7, v6, v0);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v1 + 56))(v6, 1, 1, v0);
  }
  CharacterSet.init()();
  return outlined destroy of TypesettingConfiguration((uint64_t)v6, (uint64_t (*)(_QWORD))type metadata accessor for CharacterSet?);
}

uint64_t one-time initialization function for oversizedScalarsWithoutEmoji()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  void (*v10)(char *, uint64_t);
  uint64_t v12;

  v0 = type metadata accessor for CharacterSet();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x24BDAC7A8](v0);
  v3 = (char *)&v12 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v12 - v5;
  __swift_allocate_value_buffer(v7, static NSAttributedString.oversizedScalarsWithoutEmoji);
  __swift_project_value_buffer(v0, (uint64_t)static NSAttributedString.oversizedScalarsWithoutEmoji);
  if (one-time initialization token for oversizedScalars != -1)
    swift_once();
  v8 = __swift_project_value_buffer(v0, (uint64_t)static NSAttributedString.oversizedScalars);
  (*(void (**)(char *, uint64_t, uint64_t))(v1 + 16))(v6, v8, v0);
  v9 = objc_msgSend((id)objc_opt_self(), sel_ic_emojiCharacterSet);
  static CharacterSet._unconditionallyBridgeFromObjectiveC(_:)();

  CharacterSet.subtracting(_:)();
  v10 = *(void (**)(char *, uint64_t))(v1 + 8);
  v10(v3, v0);
  return ((uint64_t (*)(char *, uint64_t))v10)(v6, v0);
}

uint64_t closure #1 in NSAttributedString.allFonts()(uint64_t a1)
{
  void *v2;
  id v3;
  __int128 v4;
  uint64_t v5;
  _OWORD v6[2];

  outlined init with copy of Any?(a1, (uint64_t)&v4);
  if (!v5)
    return outlined destroy of CodableAttributedString.Range.DecodingWrapper<ResolvableProgress>((uint64_t)&v4, (uint64_t)&lazy cache variable for type metadata for Any?, MEMORY[0x24BEE4AD8] + 8, (uint64_t)MEMORY[0x24BEE1C68], (uint64_t (*)(_QWORD))type metadata accessor for MutableBox<CachedEnvironment>);
  outlined init with take of Any(&v4, v6);
  outlined init with copy of Any((uint64_t)v6, (uint64_t)&v4);
  type metadata accessor for CTFontRef(0);
  swift_dynamicCast();
  specialized Set._Variant.insert(_:)(&v3, v2);

  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v6);
}

uint64_t ResolvedStyledText.layoutProperties.getter@<X0>(_OWORD *a1@<X8>)
{
  _OWORD *v1;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  _OWORD v11[2];
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  _OWORD v16[2];

  swift_beginAccess();
  v4 = v1[6];
  v14 = v1[5];
  v3 = v14;
  v15 = v4;
  v16[0] = v1[7];
  v5 = v16[0];
  *(_OWORD *)((char *)v16 + 9) = *(_OWORD *)((char *)v1 + 121);
  v6 = *(_OWORD *)((char *)v16 + 9);
  v7 = v1[2];
  v11[0] = v1[1];
  v11[1] = v7;
  v9 = v1[4];
  v12 = v1[3];
  v8 = v12;
  v13 = v9;
  *a1 = v11[0];
  a1[1] = v7;
  a1[2] = v8;
  a1[3] = v9;
  a1[4] = v3;
  a1[5] = v4;
  a1[6] = v5;
  *(_OWORD *)((char *)a1 + 105) = v6;
  return outlined retain of TextLayoutProperties((uint64_t)v11);
}

uint64_t ResolvedStyledText.layoutProperties.setter(__int128 *a1)
{
  _OWORD *v1;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  _OWORD v13[6];
  _OWORD v14[2];

  swift_beginAccess();
  v3 = v1[6];
  v13[4] = v1[5];
  v13[5] = v3;
  v14[0] = v1[7];
  *(_OWORD *)((char *)v14 + 9) = *(_OWORD *)((char *)v1 + 121);
  v4 = v1[2];
  v13[0] = v1[1];
  v13[1] = v4;
  v5 = v1[4];
  v13[2] = v1[3];
  v13[3] = v5;
  v6 = *a1;
  v7 = a1[1];
  v8 = a1[3];
  v1[3] = a1[2];
  v1[4] = v8;
  v1[1] = v6;
  v1[2] = v7;
  v9 = a1[4];
  v10 = a1[5];
  v11 = a1[6];
  *(_OWORD *)((char *)v1 + 121) = *(__int128 *)((char *)a1 + 105);
  v1[6] = v10;
  v1[7] = v11;
  v1[5] = v9;
  return outlined release of TextLayoutProperties((uint64_t)v13);
}

uint64_t (*ResolvedStyledText.layoutProperties.modify())()
{
  swift_beginAccess();
  return CAHostingLayer.propertiesNeedingUpdate.modify;
}

double ResolvedStyledText.layoutMargins.getter()
{
  uint64_t v0;

  swift_beginAccess();
  return *(double *)(v0 + 144);
}

uint64_t ResolvedStyledText.layoutMargins.setter(double a1, double a2, double a3, double a4)
{
  double *v4;
  uint64_t result;

  result = swift_beginAccess();
  v4[18] = a1;
  v4[19] = a2;
  v4[20] = a3;
  v4[21] = a4;
  return result;
}

uint64_t (*ResolvedStyledText.layoutMargins.modify())()
{
  swift_beginAccess();
  return DisplayList.GraphicsRenderer.platformViewMode.modify;
}

uint64_t ResolvedStyledText.scaleFactorOverride.getter()
{
  uint64_t v0;

  swift_beginAccess();
  return *(_QWORD *)(v0 + 176);
}

uint64_t ResolvedStyledText.scaleFactorOverride.setter(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t v5;

  v5 = swift_beginAccess();
  *(_QWORD *)(v2 + 176) = a1;
  *(_BYTE *)(v2 + 184) = a2 & 1;
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 168))(v5);
}

uint64_t (*ResolvedStyledText.scaleFactorOverride.modify(uint64_t a1))(uint64_t a1, char a2)
{
  uint64_t v1;

  *(_QWORD *)(a1 + 24) = v1;
  swift_beginAccess();
  return ResolvedStyledText.scaleFactorOverride.modify;
}

uint64_t ResolvedStyledText.scaleFactorOverride.modify(uint64_t a1, char a2)
{
  uint64_t result;

  result = swift_endAccess();
  if ((a2 & 1) == 0)
    return (*(uint64_t (**)(uint64_t))(**(_QWORD **)(a1 + 24) + 168))(result);
  return result;
}

Swift::Void __swiftcall ResolvedStyledText.resetCache()()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void *ResolvedStyledText.storage.getter()
{
  uint64_t v0;
  void *v1;
  id v2;

  v1 = *(void **)(v0 + 192);
  v2 = v1;
  return v1;
}

double ResolvedStyledText.stylePadding.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 200);
}

double ResolvedStyledText.drawingMargins.getter()
{
  return 0.0;
}

uint64_t ResolvedStyledText.isCollapsible.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 234);
}

void ResolvedStyledText.features.getter(_WORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_WORD *)(v1 + 236);
}

uint64_t ResolvedStyledText.styles.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t ResolvedStyledText.transitions.getter()
{
  return swift_bridgeObjectRetain();
}

BOOL ResolvedStyledText.needsStyledRendering.getter()
{
  uint64_t v0;
  __int16 v1;

  v1 = *(_WORD *)(v0 + 236);
  if ((v1 & 1) != 0)
    return 1;
  if ((v1 & 2) != 0 && (*(_BYTE *)(v0 + 232) & 1) != 0)
  {
    if (*(_QWORD *)(v0 + 192))
      return !NSAttributedString.isDynamic.getter();
    return 1;
  }
  return 0;
}

uint64_t ResolvedStyledText.needsRBDisplayList.getter()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  unsigned int v4;
  _OWORD v5[2];

  v1 = *(void **)(v0 + 192);
  if (v1 && (uint64_t)objc_msgSend(*(id *)(v0 + 192), sel_length) >= 1)
  {
    if (one-time initialization token for updateSchedule != -1)
      swift_once();
    v2 = static NSAttributedStringKey.updateSchedule;
    objc_msgSend(v1, sel_length);
    if (objc_msgSend(v1, sel_attribute_atIndex_effectiveRange_, v2, 0, 0))
    {
      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
      outlined destroy of CodableAttributedString.Range.DecodingWrapper<ResolvableProgress>((uint64_t)v5, (uint64_t)&lazy cache variable for type metadata for Any?, MEMORY[0x24BEE4AD8] + 8, (uint64_t)MEMORY[0x24BEE1C68], (uint64_t (*)(_QWORD))type metadata accessor for MutableBox<CachedEnvironment>);
      return 0;
    }
    memset(v5, 0, sizeof(v5));
    outlined destroy of CodableAttributedString.Range.DecodingWrapper<ResolvableProgress>((uint64_t)v5, (uint64_t)&lazy cache variable for type metadata for Any?, MEMORY[0x24BEE4AD8] + 8, (uint64_t)MEMORY[0x24BEE1C68], (uint64_t (*)(_QWORD))type metadata accessor for MutableBox<CachedEnvironment>);
  }
  if ((*(_WORD *)(v0 + 236) & 8) != 0)
    return 1;
  v4 = *(unsigned __int8 *)(v0 + 232);
  if ((v4 & 1) != 0)
    return (v4 >> 4) & 1;
  else
    return 0;
}

uint64_t ResolvedStyledText.maxFontMetrics.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v12[8];

  if ((*(_BYTE *)(v1 + 320) & 1) != 0)
  {
    if (*(_QWORD *)(v1 + 192))
    {
      result = NSAttributedString.maxFontMetrics.getter((uint64_t)v12);
      v5 = v12[0];
      v4 = v12[1];
      v7 = v12[2];
      v6 = v12[3];
      v8 = v12[4];
      v9 = v12[5];
      v10 = v12[6];
      v11 = v12[7];
    }
    else
    {
      v8 = 0;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      v6 = 0;
      v7 = 0;
      v4 = 0;
      v5 = 0;
    }
    *(_QWORD *)(v1 + 256) = v5;
    *(_QWORD *)(v1 + 264) = v4;
    *(_QWORD *)(v1 + 272) = v7;
    *(_QWORD *)(v1 + 280) = v6;
    *(_QWORD *)(v1 + 288) = v8;
    *(_QWORD *)(v1 + 296) = v9;
    *(_QWORD *)(v1 + 304) = v10;
    *(_QWORD *)(v1 + 312) = v11;
    *(_BYTE *)(v1 + 320) = 0;
  }
  else
  {
    v10 = *(_QWORD *)(v1 + 304);
    v11 = *(_QWORD *)(v1 + 312);
    v8 = *(_QWORD *)(v1 + 288);
    v9 = *(_QWORD *)(v1 + 296);
    v7 = *(_QWORD *)(v1 + 272);
    v6 = *(_QWORD *)(v1 + 280);
    v5 = *(_QWORD *)(v1 + 256);
    v4 = *(_QWORD *)(v1 + 264);
  }
  *a1 = v5;
  a1[1] = v4;
  a1[2] = v7;
  a1[3] = v6;
  a1[4] = v8;
  a1[5] = v9;
  a1[6] = v10;
  a1[7] = v11;
  return result;
}

uint64_t ResolvedStyledText.__allocating_init(storage:layoutProperties:layoutMargins:stylePadding:archiveOptions:isCollapsible:features:suffix:attachments:styles:transitions:scaleFactorOverride:)(void *a1, __int128 *a2, uint64_t a3, __int16 *a4, char a5, __int16 *a6, uint64_t a7, uint64_t a8, double a9, double a10, double a11, double a12, uint64_t a13, uint64_t a14)
{
  swift_allocObject();
  return specialized ResolvedStyledText.init(storage:layoutProperties:layoutMargins:stylePadding:archiveOptions:isCollapsible:features:suffix:attachments:styles:transitions:scaleFactorOverride:)(a1, a2, a3, a4, a5, a6, a7, a9, a10, a11, a12, a8, a13, a14);
}

uint64_t ResolvedStyledText.init(storage:layoutProperties:layoutMargins:stylePadding:archiveOptions:isCollapsible:features:suffix:attachments:styles:transitions:scaleFactorOverride:)(void *a1, __int128 *a2, uint64_t a3, __int16 *a4, char a5, __int16 *a6, uint64_t a7, double a8, double a9, double a10, double a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  return specialized ResolvedStyledText.init(storage:layoutProperties:layoutMargins:stylePadding:archiveOptions:isCollapsible:features:suffix:attachments:styles:transitions:scaleFactorOverride:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14);
}

double ResolvedStyledText.lineHeightScalingAdjustment(lineHeightMultiple:maximumLineHeight:minimumLineHeight:)(double a1, double a2, double a3)
{
  uint64_t v3;
  BOOL v7;
  double v8;
  uint64_t v9;
  double v10;
  double v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  double v15;
  double v16;
  double v17;
  double v18;
  _QWORD v20[3];
  __int128 v21;
  __int128 v22;
  uint64_t v23;

  v7 = a1 != 0.0 && a1 < 1.0;
  v8 = 0.0;
  if (v7 || a2 != 0.0 || a3 != 0.0)
  {
    if ((*(_BYTE *)(v3 + 320) & 1) != 0)
    {
      if (*(_QWORD *)(v3 + 192))
      {
        NSAttributedString.maxFontMetrics.getter((uint64_t)v20);
        v9 = v20[0];
        v11 = *(double *)&v20[1];
        v10 = *(double *)&v20[2];
        v12 = v21;
        v13 = v22;
        v14 = v23;
      }
      else
      {
        v14 = 0;
        v9 = 0;
        v12 = 0uLL;
        v10 = 0.0;
        v11 = 0.0;
        v13 = 0uLL;
      }
      *(_QWORD *)(v3 + 256) = v9;
      *(double *)(v3 + 264) = v11;
      *(double *)(v3 + 272) = v10;
      *(_OWORD *)(v3 + 280) = v12;
      *(_OWORD *)(v3 + 296) = v13;
      *(_QWORD *)(v3 + 312) = v14;
      *(_BYTE *)(v3 + 320) = 0;
    }
    else
    {
      v11 = *(double *)(v3 + 264);
      v10 = *(double *)(v3 + 272);
    }
    v15 = v11 - v10;
    v16 = 1.0;
    if (a1 != 0.0)
      v16 = a1;
    v17 = v16 * v15;
    if (a2 == 0.0)
      v18 = v17;
    else
      v18 = a2;
    if (v17 < a3)
      v17 = a3;
    if (v18 < v17)
      v17 = v18;
    if (v17 < v15)
      return v15 - v17;
  }
  return v8;
}

void ResolvedStyledText.majorAxis.getter()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void ResolvedStyledText.drawingScale(size:)()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

SwiftUI::Spacing __swiftcall ResolvedStyledText.spacing()()
{
  SwiftUI::Spacing result;

  result.minima._rawValue = (void *)_assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void ResolvedStyledText.sizeThatFits(_:)()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

CGSize __swiftcall ResolvedStyledText.size(in:)(CGSize in)
{
  double v1;
  double v2;
  CGSize result;

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  result.height = v2;
  result.width = v1;
  return result;
}

CGSize __swiftcall ResolvedStyledText.frameSize(in:)(CGSize in)
{
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  double v4;
  double v5;
  CGSize result;

  (*(void (**)(__n128, __n128))(*(_QWORD *)v1 + 232))((__n128)__PAIR128__(v2, *(unint64_t *)&in.width), (__n128)__PAIR128__(v3, *(unint64_t *)&in.height));
  result.height = v5;
  result.width = v4;
  return result;
}

void ResolvedStyledText.metrics(in:layoutMargins:)()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void ResolvedStyledText.size(in:context:)()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void ResolvedStyledText.explicitAlignment(_:at:)()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void ResolvedStyledText.linkURL(at:in:)()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void ResolvedStyledText.draw(in:with:applyingMarginOffsets:containsResolvable:context:renderer:)()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void ResolvedStyledText.layoutValue(in:with:applyingMarginOffsets:)(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

uint64_t ResolvedStyledText.resolvingContent(in:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  void *v8;
  id v9;
  void *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  id v15;
  char isEscapingClosureAtFileLocation;
  uint64_t result;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  double v25;
  double v26;
  double v27;
  double v28;
  char v29;
  double v30;
  char v31;
  id v32;
  double v33;
  double v34;
  double v35;
  double v36;
  uint64_t v37;
  id v38;
  __int128 v39;
  uint64_t v40;
  _BYTE v41[32];
  uint64_t v42;
  __int128 v43;
  __int16 v44;
  __int16 v45;
  _OWORD v46[6];
  _OWORD v47[4];
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  _OWORD v54[2];
  void *v55;
  _OWORD v56[2];
  char v57;

  v2 = v1;
  v4 = type metadata accessor for ResolvableStringResolutionContext();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_QWORD *)(v5 + 64);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v37 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *(void **)(v1 + 192);
  if (!v8)
    goto LABEL_9;
  v9 = v8;
  if (!NSAttributedString.isDynamic.getter()
    || (objc_msgSend(v9, sel_mutableCopy),
        _bridgeAnyObjectToAny(_:)(),
        swift_unknownObjectRelease(),
        type metadata accessor for CAPresentationModifier(0, (unint64_t *)&lazy cache variable for type metadata for NSMutableAttributedString), (swift_dynamicCast() & 1) == 0))
  {

LABEL_9:
    swift_retain();
    return v2;
  }
  v10 = v55;
  if (one-time initialization token for resolvableTextSegment != -1)
    swift_once();
  *(_QWORD *)&v39 = static NSAttributedStringKey.resolvableTextSegment;
  v38 = objc_msgSend(v10, sel_length);
  outlined init with copy of TypesettingLanguage(a1, (uint64_t)&v37 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t (*)(_QWORD))type metadata accessor for ResolvableStringResolutionContext);
  v11 = (*(unsigned __int8 *)(v5 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v12 = swift_allocObject();
  *(_QWORD *)(v12 + 16) = v10;
  outlined init with take of LocalizedStringKey.FormatArgument((uint64_t)v7, v12 + v11, (uint64_t (*)(_QWORD))type metadata accessor for ResolvableStringResolutionContext);
  v13 = swift_allocObject();
  *(_QWORD *)(v13 + 16) = _s7SwiftUI30ResolvableTextSegmentAttributeO6update_2inySo25NSMutableAttributedStringC_AA0cK17ResolutionContextVtFZyypSg_So8_NSRangeVSpy10ObjectiveC8ObjCBoolVGtXEfU_TA_0;
  *(_QWORD *)(v13 + 24) = v12;
  *(_QWORD *)&v50 = thunk for @callee_guaranteed (@in_guaranteed Any?, @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ()partial apply;
  *((_QWORD *)&v50 + 1) = v13;
  *(_QWORD *)&v48 = MEMORY[0x24BDAC760];
  *((_QWORD *)&v48 + 1) = 1107296256;
  *(_QWORD *)&v49 = thunk for @escaping @callee_guaranteed (@in_guaranteed Any?, @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ();
  *((_QWORD *)&v49 + 1) = &block_descriptor_23_1;
  v14 = _Block_copy(&v48);
  v15 = v10;
  swift_retain();
  swift_release();
  objc_msgSend(v15, sel_enumerateAttribute_inRange_options_usingBlock_, (_QWORD)v39, 0, v38, 2, v14);
  _Block_release(v14);
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  result = swift_release();
  if ((isEscapingClosureAtFileLocation & 1) == 0)
  {
    swift_beginAccess();
    v18 = *(_OWORD *)(v2 + 96);
    v19 = *(_OWORD *)(v2 + 64);
    v52 = *(_OWORD *)(v2 + 80);
    v53 = v18;
    v20 = *(_OWORD *)(v2 + 96);
    v54[0] = *(_OWORD *)(v2 + 112);
    *(_OWORD *)((char *)v54 + 9) = *(_OWORD *)(v2 + 121);
    v21 = *(_OWORD *)(v2 + 32);
    v48 = *(_OWORD *)(v2 + 16);
    v49 = v21;
    v22 = *(_OWORD *)(v2 + 64);
    v24 = *(_OWORD *)(v2 + 16);
    v23 = *(_OWORD *)(v2 + 32);
    v50 = *(_OWORD *)(v2 + 48);
    v51 = v22;
    v46[4] = v52;
    v46[5] = v20;
    v47[0] = *(_OWORD *)(v2 + 112);
    *(_OWORD *)((char *)v47 + 9) = *(_OWORD *)(v2 + 121);
    v46[0] = v24;
    v46[1] = v23;
    v46[2] = v50;
    v46[3] = v19;
    memset(v56, 0, sizeof(v56));
    v57 = 1;
    v25 = *(double *)(v2 + 200);
    v26 = *(double *)(v2 + 208);
    v27 = *(double *)(v2 + 216);
    v28 = *(double *)(v2 + 224);
    v45 = *(_WORD *)(v2 + 232);
    v29 = *(_BYTE *)(v2 + 234);
    v44 = *(_WORD *)(v2 + 236);
    v42 = 0;
    memset(v41, 0, sizeof(v41));
    v43 = xmmword_235260F00;
    v40 = MEMORY[0x24BEE4AF8];
    v39 = *(_OWORD *)(v2 + 240);
    swift_beginAccess();
    v30 = *(double *)(v2 + 176);
    v31 = *(_BYTE *)(v2 + 184);
    v32 = v15;
    outlined retain of TextLayoutProperties((uint64_t)&v48);
    v2 = specialized static ResolvedStyledText.styledText(storage:layoutProperties:layoutMargins:stylePadding:archiveOptions:isCollapsible:features:suffix:attachments:styles:transitions:scaleFactorOverride:)(v15, v46, (uint64_t)v56, (char *)&v45, v29, &v44, (uint64_t)v41, &v40, v25, v26, v27, v28, v33, v34, v35, v36, v39, *((uint64_t *)&v39 + 1), v30,
           v31);

    outlined release of TextLayoutProperties((uint64_t)&v48);
    return v2;
  }
  __break(1u);
  return result;
}

uint64_t static ResolvedStyledText.styledText(storage:layoutProperties:layoutMargins:stylePadding:archiveOptions:isCollapsible:features:suffix:attachments:styles:transitions:scaleFactorOverride:)(void *a1, _OWORD *a2, uint64_t a3, char *a4, char a5, __int16 *a6, uint64_t a7, uint64_t *a8, double a9, double a10, double a11, double a12, double a13, double a14, double a15, double a16, uint64_t a17, uint64_t a18, double a19, char a20)
{
  return specialized static ResolvedStyledText.styledText(storage:layoutProperties:layoutMargins:stylePadding:archiveOptions:isCollapsible:features:suffix:attachments:styles:transitions:scaleFactorOverride:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, *(double *)&a17, a14, a15, a16, a17, a18, a19,
           a20 & 1);
}

uint64_t ResolvedStyledText.description.getter()
{
  uint64_t v0;
  void *v1;
  id v2;
  uint64_t v3;

  v1 = *(void **)(v0 + 192);
  if (!v1)
    return 0;
  v2 = objc_msgSend(v1, sel_string);
  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

uint64_t ResolvedStyledText.accessibilityText.getter()
{
  uint64_t v0;
  void *v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  char v6;
  uint64_t result;
  uint64_t v8;
  _QWORD v9[4];
  _QWORD v10[2];
  char v11;
  char v12;

  v1 = *(void **)(v0 + 192);
  if (v1)
  {
    v9[3] = type metadata accessor for CAPresentationModifier(0, (unint64_t *)&lazy cache variable for type metadata for NSAttributedString);
    v9[0] = v1;
    v2 = v1;
    AccessibilityText.init(_:)(v9, (uint64_t)v10);
    v3 = v10[0];
    v4 = v10[1];
    v5 = v11;
    v6 = v12;
    type metadata accessor for AccessibilityTextStorage();
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v3;
    *(_QWORD *)(result + 24) = v4;
    *(_BYTE *)(result + 32) = v5;
    *(_BYTE *)(result + 33) = v6;
  }
  else
  {
    v8 = MEMORY[0x24BEE4AF8];
    type metadata accessor for LocalizedTextStorage();
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0xE000000000000000;
    *(_BYTE *)(result + 32) = 0;
    *(_QWORD *)(result + 40) = v8;
    *(_QWORD *)(result + 48) = 0;
    *(_QWORD *)(result + 56) = 0;
    *(_QWORD *)(result + 64) = 0;
  }
  return result;
}

void (*ResolvedStyledText.cgStyleHandler.getter())(uint64_t a1, unint64_t a2)
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  char v3;
  uint64_t v4;

  v1 = *(_QWORD *)(v0 + 248);
  if (!*(_QWORD *)(v1 + 16))
    return 0;
  swift_beginAccess();
  v2 = *(_BYTE *)(v0 + 43);
  v3 = *(_BYTE *)(v0 + 44);
  v4 = swift_allocObject();
  *(_QWORD *)(v4 + 16) = v1;
  *(_BYTE *)(v4 + 24) = v3;
  *(_BYTE *)(v4 + 25) = v2;
  swift_bridgeObjectRetain();
  return partial apply for closure #1 in ResolvedStyledText.cgStyleHandler.getter;
}

void closure #1 in ResolvedStyledText.cgStyleHandler.getter(uint64_t a1, unint64_t a2, uint64_t a3, unsigned int a4, char a5)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  BOOL v13;
  uint64_t v14;
  id v15;
  Class isa;

  if ((a2 & 0x8000000000000000) == 0 && *(_QWORD *)(a3 + 16) > a2)
  {
    v5 = a3 + 16 * a2;
    v6 = *(_QWORD *)(v5 + 32);
    v7 = *(unsigned int *)(v5 + 40) | ((unint64_t)*(unsigned __int8 *)(v5 + 44) << 32);
    v8 = *(unsigned __int8 *)(v5 + 45);
    if (*(_BYTE *)(v5 + 45))
    {
      if (v8 == 1)
      {
        if (BYTE4(v7) == 2)
          v9 = a5;
        else
          v9 = BYTE4(v7) & 1;
        if ((v9 & 1) != 0)
          v10 = 0x100000000;
        else
          v10 = 0;
        outlined copy of ContentTransition.Storage(v6, v7, 1);
        v7 = v10 & 0xFFFFFFFF00000000 | v7;
      }
    }
    else
    {
      if (BYTE4(v7) == 3)
        v11 = a4;
      else
        v11 = BYTE4(v7);
      if ((v7 & 0xFF000000) == 0x2000000)
        v12 = a5;
      else
        v12 = BYTE3(v7) & 1;
      v13 = (v12 & 1) == 0;
      v14 = 0x1000000;
      if (v13)
        v14 = 0;
      v7 = v14 & 0xFFFFFFFFFF000000 | v7 & 0xFFFFFF | (v11 << 32);
    }
    v15 = ContentTransition.rbTransition.getter();
    RBDrawingStateSetTransition();

    if (v8)
    {
      outlined consume of ContentTransition.Storage(v6, v7, v8);
    }
    else if ((v6 & 0xC100000000) == 0x4100000000)
    {
      isa = Float._bridgeToObjectiveC()().super.super.isa;
      RBDrawingStateSetAttribute();

    }
  }
}

id ResolvedStyledText.makeRBDisplayList(for:renderer:deviceScale:)(uint64_t a1, double a2, double a3, double a4)
{
  _QWORD *v4;
  id v9;
  double v10;
  id v11;
  id v12;
  uint64_t v13;
  BOOL v14;
  id v15;

  v9 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BE7EEF8]), sel_init);
  objc_msgSend(v9, sel_setDefaultColorSpace_, 1);
  objc_msgSend(v9, sel_setDeviceScale_, a4);
  LODWORD(v10) = 1.0;
  v11 = objc_msgSend(v9, sel_beginCGContextWithAlpha_, v10);
  v12 = objc_msgSend(objc_allocWithZone((Class)CoreGraphicsContext), sel_initWithCGContext_, v11);
  objc_msgSend(v12, sel_push);
  if (one-time initialization token for shared != -1)
    swift_once();
  v13 = static TextDrawingContext.shared;
  if (v4[24])
  {
    swift_retain();
    v14 = NSAttributedString.isDynamic.getter();
  }
  else
  {
    swift_retain();
    v14 = 0;
  }
  (*(void (**)(uint64_t, BOOL, uint64_t, uint64_t, double, double, double, double, double, double))(*v4 + 288))(1, v14, v13, a1, 0.0, 0.0, a2, a3, a2, a3);
  swift_release();
  objc_msgSend(v12, "pop");

  objc_msgSend(v9, sel_endCGContext);
  v15 = objc_msgSend(v9, sel_moveContents);

  return v15;
}

id ResolvedStyledText.layers(for:renderer:deviceScale:)(uint64_t a1, double a2, double a3, double a4)
{
  uint64_t v4;
  id v5;
  id v6;
  double v7;
  double v8;
  double v9;
  double v10;
  id v11;
  uint64_t v13;
  uint64_t v14;
  int v15;
  _QWORD *v16;
  _QWORD *v17;
  double v18;
  double v19;
  double v20;
  double v21;
  id v22;
  unint64_t v23;
  unint64_t v24;
  double v25;
  double v26;
  double v27;
  double v28;
  unsigned __int8 v29;
  id v30;

  v5 = ResolvedStyledText.makeRBDisplayList(for:renderer:deviceScale:)(a1, a2, a3, a4);
  if (!ResolvedStyledText.needsStyledRendering.getter())
    return 0;
  v6 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BE7EF08]), sel_init);
  if (one-time initialization token for foregroundKeyColorAnyAlpha != -1)
    swift_once();
  LODWORD(v8) = HIDWORD(static RBColor.foregroundKeyColorAnyAlpha);
  LODWORD(v7) = static RBColor.foregroundKeyColorAnyAlpha;
  LODWORD(v9) = dword_254287BD0;
  LODWORD(v10) = dword_254287BD4;
  objc_msgSend(v6, sel_addConditionWithFillColor_colorSpace_, 2, v7, v8, v9, v10);
  v11 = objc_msgSend(v6, sel_copyFilteredDisplayList_, v5);
  v30 = v11;
  if ((objc_msgSend(v11, sel_isEmpty) & 1) != 0)
    v11 = 0;
  else
    swift_unknownObjectRetain();
  v13 = *(_QWORD *)(*(_QWORD *)(v4 + 240) + 16);
  if (v13)
  {
    v14 = 0;
    v15 = *MEMORY[0x24BE7EF80];
    v16 = (_QWORD *)MEMORY[0x24BEE4AF8];
    do
    {
      objc_msgSend(v6, sel_removeAll, v30);
      *(float *)&v18 = (float)v14 * 0.00097656;
      LODWORD(v19) = -1.0;
      LODWORD(v20) = -1.0;
      LODWORD(v21) = v15;
      objc_msgSend(v6, sel_addConditionWithFillColor_colorSpace_, 2, v19, v20, v18, v21);
      v22 = objc_msgSend(v6, sel_copyFilteredDisplayList_, v5);
      if ((objc_msgSend(v22, sel_isEmpty) & 1) == 0)
      {
        swift_unknownObjectRetain();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v16[2] + 1, 1, v16);
        v24 = v16[2];
        v23 = v16[3];
        if (v24 >= v23 >> 1)
          v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v23 > 1), v24 + 1, 1, v16);
        v16[2] = v24 + 1;
        v17 = &v16[2 * v24];
        v17[4] = v14;
        v17[5] = v22;
      }
      ++v14;
      swift_unknownObjectRelease();
    }
    while (v13 != v14);
  }
  objc_msgSend(v6, sel_removeAll, v30);
  if (one-time initialization token for keyColorAnyAlpha != -1)
    swift_once();
  LODWORD(v26) = HIDWORD(static RBColor.keyColorAnyAlpha);
  LODWORD(v25) = static RBColor.keyColorAnyAlpha;
  LODWORD(v27) = dword_25622D100;
  LODWORD(v28) = unk_25622D104;
  objc_msgSend(v6, sel_addConditionWithFillColor_colorSpace_, 2, v25, v26, v27, v28);
  objc_msgSend(v6, sel_setInvertsResult_, 1);
  v29 = objc_msgSend(objc_msgSend(v6, sel_copyFilteredDisplayList_, v5), sel_isEmpty);
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();

  if ((v29 & 1) != 0)
    swift_unknownObjectRelease();
  return v11;
}

uint64_t ResolvedStyledText.deinit()
{
  uint64_t v0;
  __int128 v1;
  __int128 v2;
  __int128 v3;
  _OWORD v5[6];
  _OWORD v6[2];

  v1 = *(_OWORD *)(v0 + 96);
  v5[4] = *(_OWORD *)(v0 + 80);
  v5[5] = v1;
  v6[0] = *(_OWORD *)(v0 + 112);
  *(_OWORD *)((char *)v6 + 9) = *(_OWORD *)(v0 + 121);
  v2 = *(_OWORD *)(v0 + 32);
  v5[0] = *(_OWORD *)(v0 + 16);
  v5[1] = v2;
  v3 = *(_OWORD *)(v0 + 64);
  v5[2] = *(_OWORD *)(v0 + 48);
  v5[3] = v3;
  outlined release of TextLayoutProperties((uint64_t)v5);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t ResolvedStyledText.__deallocating_deinit()
{
  uint64_t v0;
  __int128 v1;
  __int128 v2;
  __int128 v3;
  _OWORD v5[6];
  _OWORD v6[2];

  v1 = *(_OWORD *)(v0 + 96);
  v5[4] = *(_OWORD *)(v0 + 80);
  v5[5] = v1;
  v6[0] = *(_OWORD *)(v0 + 112);
  *(_OWORD *)((char *)v6 + 9) = *(_OWORD *)(v0 + 121);
  v2 = *(_OWORD *)(v0 + 32);
  v5[0] = *(_OWORD *)(v0 + 16);
  v5[1] = v2;
  v3 = *(_OWORD *)(v0 + 64);
  v5[2] = *(_OWORD *)(v0 + 48);
  v5[3] = v3;
  outlined release of TextLayoutProperties((uint64_t)v5);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ResolvedStyledText()
{
  uint64_t v0;
  void *v1;
  id v2;
  uint64_t v3;

  v1 = *(void **)(*(_QWORD *)v0 + 192);
  if (!v1)
    return 0;
  v2 = objc_msgSend(v1, sel_string);
  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

Swift::tuple_UInt_optional_CGSize __swiftcall ResolvedStyledText.textSizeCacheMetrics(in:)(CGSize in)
{
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  Swift::UInt v4;
  Swift::Bool v5;
  double v6;
  double v7;
  _QWORD v8[8];
  Swift::Bool v9;
  _OWORD v10[2];
  char v11;
  Swift::tuple_UInt_optional_CGSize result;

  memset(v10, 0, sizeof(v10));
  v11 = 1;
  (*(void (**)(_QWORD *__return_ptr, _OWORD *, unsigned __int128, unsigned __int128))(*(_QWORD *)v1 + 256))(v8, v10, __PAIR128__(v2, *(unint64_t *)&in.width), __PAIR128__(v3, *(unint64_t *)&in.height));
  v4 = v8[7];
  v5 = v9;
  v6 = *(double *)v8;
  v7 = *(double *)&v8[1];
  result._1.height = v7;
  result._1.width = v6;
  result._0.value = v4;
  result._0.is_nil = v5;
  return result;
}

double ResolvedStyledText.linkURLMetrics(in:layoutMargins:)(double a1, double a2, double a3, double a4, double a5, double a6)
{
  uint64_t v6;
  _QWORD v8[9];
  _QWORD v9[4];
  char v10;

  *(double *)v9 = a3;
  *(double *)&v9[1] = a4;
  *(double *)&v9[2] = a5;
  *(double *)&v9[3] = a6;
  v10 = 0;
  (*(void (**)(_QWORD *__return_ptr, _QWORD *))(*(_QWORD *)v6 + 256))(v8, v9);
  return *(double *)&v8[2];
}

void CodableResolvedStyledText.encode(to:)(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  void *v11;
  id v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  unsigned __int8 *v25;
  uint64_t v26;
  unint64_t v27;
  int v28;
  int v29;
  int64_t v30;
  int64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  _QWORD *v35;
  unint64_t v36;
  unint64_t v37;
  int64_t v38;
  uint64_t v39;
  int64_t v40;
  uint64_t v41;
  _QWORD *v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  int64_t v46;
  uint64_t v47;
  _QWORD *v48;
  unint64_t v49;
  unint64_t v50;
  int64_t v51;
  uint64_t v52;
  _QWORD *v53;
  unint64_t v54;
  unint64_t v55;
  int64_t v56;
  Swift::UInt v57;
  int64_t v58;
  int64_t v59;
  int64_t v60;
  int64_t v61;
  int64_t v62;
  int64_t v63;
  int64_t v64;
  int64_t v65;
  int64_t v66;
  _DWORD *v67;
  int64_t v68;
  int64_t v69;
  int64_t v70;
  int64_t v71;
  int64_t v72;
  _BYTE *v73;
  int64_t v74;
  _BYTE *v75;
  int64_t v76;
  _BYTE *v77;
  int64_t v78;
  _BYTE *v79;
  int64_t v80;
  _BYTE *v81;
  int64_t v82;
  _BYTE *v83;
  int64_t v84;
  _BYTE *v85;
  int64_t v86;
  _BYTE *v87;
  int64_t v88;
  _BYTE *v89;
  int64_t v90;
  _BYTE *v91;
  Swift::UInt v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  int v96;
  uint64_t v97;
  int v98;
  uint64_t v99;
  int v100;
  char v101;
  _OWORD v102[6];
  _OWORD v103[3];
  unint64_t v104;

  v5 = type metadata accessor for ResolvableAttributeConfiguration(0);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v93 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v93 - v9;
  v11 = *(void **)(a2 + 192);
  if (!v11
    || (v12 = v11,
        specialized ProtobufEncoder.messageField<A>(_:_:)(1, (uint64_t)v12),
        v12,
        !v2))
  {
    if ((v13 = *(double *)(a2 + 200),
          v14 = *(double *)(a2 + 208),
          v15 = *(double *)(a2 + 216),
          v16 = *(double *)(a2 + 224),
          v13 == 0.0)
      && v14 == 0.0
      && v15 == 0.0
      && v16 == 0.0
      || (ProtobufEncoder.encodeVarint(_:)(0x12uLL),
          specialized ProtobufEncoder.encodeMessage<A>(_:)(v13, v14, v15, v16),
          !v2))
    {
      if ((swift_beginAccess(),
            v17 = *(double *)(a2 + 144),
            v18 = *(double *)(a2 + 152),
            v19 = *(double *)(a2 + 160),
            v20 = *(double *)(a2 + 168),
            v17 == 0.0)
        && v18 == 0.0
        && v19 == 0.0
        && v20 == 0.0
        || (ProtobufEncoder.encodeVarint(_:)(0x1AuLL),
            specialized ProtobufEncoder.encodeMessage<A>(_:)(v17, v18, v19, v20),
            !v2))
      {
        if (!v11
          || (NSAttributedString.resolvableAttributeConfiguration.getter((uint64_t)v7),
              outlined init with take of LocalizedStringKey.FormatArgument((uint64_t)v7, (uint64_t)v10, type metadata accessor for ResolvableAttributeConfiguration), specialized ProtobufEncoder.codableField<A>(_:_:)(4, (uint64_t)v10), outlined destroy of TypesettingConfiguration((uint64_t)v10, type metadata accessor for ResolvableAttributeConfiguration), !v2))
        {
          swift_beginAccess();
          v21 = *(_OWORD *)(a2 + 96);
          v102[4] = *(_OWORD *)(a2 + 80);
          v102[5] = v21;
          v103[0] = *(_OWORD *)(a2 + 112);
          *(_OWORD *)((char *)v103 + 9) = *(_OWORD *)(a2 + 121);
          v22 = *(_OWORD *)(a2 + 32);
          v102[0] = *(_OWORD *)(a2 + 16);
          v102[1] = v22;
          v23 = *(_OWORD *)(a2 + 64);
          v102[2] = *(_OWORD *)(a2 + 48);
          v102[3] = v23;
          outlined retain of TextLayoutProperties((uint64_t)v102);
          specialized ProtobufEncoder.messageField<A>(_:_:)(5);
          outlined release of TextLayoutProperties((uint64_t)v102);
          if (!v2)
          {
            v24 = *(_QWORD *)(*(_QWORD *)(a2 + 248) + 16);
            if (v24)
            {
              v93 = a2;
              v94 = swift_bridgeObjectRetain();
              v25 = (unsigned __int8 *)(v94 + 46);
              while (1)
              {
                v26 = *(_QWORD *)(v25 - 14);
                v27 = *(unsigned int *)(v25 - 6) | ((unint64_t)*(v25 - 2) << 32);
                v28 = *(v25 - 1);
                v29 = *v25;
                v30 = a1[1];
                v31 = a1[2];
                v104 = v27;
                v97 = v24;
                v98 = v29;
                if (v30 >= v31)
                {
                  v74 = v30 + 1;
                  if (__OFADD__(v30, 1))
                    goto LABEL_134;
                  if (v31 < v74)
                  {
                    outlined copy of ContentTransition.Storage(v26, v27, v28);
                    v75 = (_BYTE *)ProtobufEncoder.growBufferSlow(to:)(v74);
                  }
                  else
                  {
                    a1[1] = v74;
                    v75 = (_BYTE *)(*a1 + v30);
                    outlined copy of ContentTransition.Storage(v26, v27, v28);
                  }
                  v33 = v28;
                  v32 = v26;
                  *v75 = 50;
                }
                else
                {
                  *(_BYTE *)(*a1 + v30) = 50;
                  a1[1] = v30 + 1;
                  v32 = v26;
                  v33 = v28;
                  outlined copy of ContentTransition.Storage(v26, v27, v28);
                }
                v34 = a1[1];
                v35 = (_QWORD *)a1[3];
                if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
                  v35 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v35[2] + 1, 1, v35);
                v37 = v35[2];
                v36 = v35[3];
                if (v37 >= v36 >> 1)
                  v35 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v36 > 1), v37 + 1, 1, v35);
                v35[2] = v37 + 1;
                v35[v37 + 4] = v34;
                a1[3] = v35;
                v38 = v34 + 1;
                if (__OFADD__(v34, 1))
                  break;
                a1[1] = v38;
                v96 = v33;
                if (v33)
                {
                  v39 = v104;
                  if (v33 == 1)
                  {
                    v40 = a1[2];
                    if (v38 >= v40)
                    {
                      v78 = v34 + 2;
                      if (__OFADD__(v38, 1))
                        goto LABEL_137;
                      if (v40 < v78)
                      {
                        outlined copy of ContentTransition.Storage(v32, v104, 1);
                        v79 = (_BYTE *)ProtobufEncoder.growBufferSlow(to:)(v78);
                      }
                      else
                      {
                        a1[1] = v78;
                        v79 = (_BYTE *)(*a1 + v38);
                        outlined copy of ContentTransition.Storage(v32, v39, 1);
                      }
                      *v79 = 18;
                    }
                    else
                    {
                      *(_BYTE *)(*a1 + v38) = 18;
                      a1[1] = v34 + 2;
                      outlined copy of ContentTransition.Storage(v32, v39, 1);
                    }
                    v95 = v32;
                    v99 = v32;
                    v100 = v39;
                    v101 = BYTE4(v39);
                    v41 = a1[1];
                    v42 = (_QWORD *)a1[3];
                    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
                      v42 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v42[2] + 1, 1, v42);
                    v44 = v42[2];
                    v43 = v42[3];
                    if (v44 >= v43 >> 1)
                      v42 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v43 > 1), v44 + 1, 1, v42);
                    v42[2] = v44 + 1;
                    v42[v44 + 4] = v41;
                    a1[3] = v42;
                    if (__OFADD__(v41, 1))
                      goto LABEL_130;
                    a1[1] = v41 + 1;
                    ContentTransition.CustomTransition.encode(to:)(a1);
                    ProtobufEncoder.endLengthDelimited()();
                    v32 = v95;
                    v45 = v104;
                    outlined consume of ContentTransition.Storage(v95, v104, 1);
                  }
                  else
                  {
                    v51 = a1[2];
                    if (v38 >= v51)
                    {
                      v82 = v34 + 2;
                      if (__OFADD__(v38, 1))
                        goto LABEL_139;
                      if (v51 < v82)
                      {
                        v83 = (_BYTE *)ProtobufEncoder.growBufferSlow(to:)(v82);
                      }
                      else
                      {
                        a1[1] = v82;
                        v83 = (_BYTE *)(*a1 + v38);
                      }
                      *v83 = 34;
                      v52 = a1[1];
                    }
                    else
                    {
                      *(_BYTE *)(*a1 + v38) = 34;
                      v52 = v34 + 2;
                      a1[1] = v38 + 1;
                    }
                    v53 = (_QWORD *)a1[3];
                    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
                      v53 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v53[2] + 1, 1, v53);
                    v55 = v53[2];
                    v54 = v53[3];
                    if (v55 >= v54 >> 1)
                      v53 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v54 > 1), v55 + 1, 1, v53);
                    v53[2] = v55 + 1;
                    v53[v55 + 4] = v52;
                    a1[3] = v53;
                    v56 = v52 + 1;
                    if (__OFADD__(v52, 1))
                      goto LABEL_132;
                    a1[1] = v56;
                    v57 = v32;
                    v45 = v104;
                    if ((_DWORD)v32)
                    {
                      v58 = a1[2];
                      if (v56 >= v58)
                      {
                        v84 = v56 + 1;
                        if (__OFADD__(v56, 1))
                          goto LABEL_140;
                        if (v58 < v84)
                        {
                          v85 = (_BYTE *)ProtobufEncoder.growBufferSlow(to:)(v84);
                        }
                        else
                        {
                          a1[1] = v84;
                          v85 = (_BYTE *)(*a1 + v56);
                        }
                        *v85 = 8;
                        v57 = v32;
                        v45 = v104;
                      }
                      else
                      {
                        *(_BYTE *)(*a1 + v56) = 8;
                        a1[1] = v56 + 1;
                      }
                      ProtobufEncoder.encodeVarint(_:)(v57);
                    }
                    if ((v32 & 0x100000000) == 0)
                    {
                      v59 = a1[1];
                      v60 = a1[2];
                      if (v59 >= v60)
                      {
                        v86 = v59 + 1;
                        if (__OFADD__(v59, 1))
                          goto LABEL_141;
                        if (v60 < v86)
                        {
                          v87 = (_BYTE *)ProtobufEncoder.growBufferSlow(to:)(v86);
                        }
                        else
                        {
                          a1[1] = v86;
                          v87 = (_BYTE *)(*a1 + v59);
                        }
                        *v87 = 16;
                        v61 = a1[1];
                        v45 = v104;
                      }
                      else
                      {
                        *(_BYTE *)(*a1 + v59) = 16;
                        v61 = v59 + 1;
                        a1[1] = v61;
                      }
                      v62 = a1[2];
                      if (v61 >= v62)
                      {
                        v88 = v61 + 1;
                        if (__OFADD__(v61, 1))
                          goto LABEL_142;
                        if (v62 < v88)
                        {
                          v89 = (_BYTE *)ProtobufEncoder.growBufferSlow(to:)(v88);
                        }
                        else
                        {
                          a1[1] = v88;
                          v89 = (_BYTE *)(*a1 + v61);
                        }
                        *v89 = 0;
                        v45 = v104;
                      }
                      else
                      {
                        *(_BYTE *)(*a1 + v61) = 0;
                        a1[1] = v61 + 1;
                      }
                    }
                    if (*(float *)&v45 != 1.0)
                    {
                      v63 = a1[1];
                      v64 = a1[2];
                      if (v63 >= v64)
                      {
                        v90 = v63 + 1;
                        if (__OFADD__(v63, 1))
                          goto LABEL_143;
                        if (v64 < v90)
                        {
                          v91 = (_BYTE *)ProtobufEncoder.growBufferSlow(to:)(v90);
                        }
                        else
                        {
                          a1[1] = v90;
                          v91 = (_BYTE *)(*a1 + v63);
                        }
                        *v91 = 29;
                        v65 = a1[1];
                        v45 = v104;
                        v66 = v65 + 4;
                        if (__OFADD__(v65, 4))
                          goto LABEL_133;
                      }
                      else
                      {
                        *(_BYTE *)(*a1 + v63) = 29;
                        v65 = v63 + 1;
                        a1[1] = v65;
                        v66 = v65 + 4;
                        if (__OFADD__(v65, 4))
                          goto LABEL_133;
                      }
                      if (a1[2] < v66)
                      {
                        v67 = (_DWORD *)ProtobufEncoder.growBufferSlow(to:)(v66);
                      }
                      else
                      {
                        a1[1] = v66;
                        v67 = (_DWORD *)(*a1 + v65);
                      }
                      *v67 = v45;
                    }
                    ProtobufEncoder.endLengthDelimited()();
                  }
                }
                else
                {
                  v46 = a1[2];
                  if (v38 >= v46)
                  {
                    v80 = v34 + 2;
                    if (__OFADD__(v38, 1))
                      goto LABEL_138;
                    if (v46 < v80)
                    {
                      v81 = (_BYTE *)ProtobufEncoder.growBufferSlow(to:)(v80);
                    }
                    else
                    {
                      a1[1] = v80;
                      v81 = (_BYTE *)(*a1 + v38);
                    }
                    *v81 = 10;
                    v47 = a1[1];
                  }
                  else
                  {
                    *(_BYTE *)(*a1 + v38) = 10;
                    v47 = v34 + 2;
                    a1[1] = v38 + 1;
                  }
                  v99 = v32;
                  v100 = v104;
                  v101 = BYTE4(v104);
                  v48 = (_QWORD *)a1[3];
                  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
                    v48 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v48[2] + 1, 1, v48);
                  v50 = v48[2];
                  v49 = v48[3];
                  if (v50 >= v49 >> 1)
                    v48 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v49 > 1), v50 + 1, 1, v48);
                  v48[2] = v50 + 1;
                  v48[v50 + 4] = v47;
                  a1[3] = v48;
                  if (__OFADD__(v47, 1))
                    goto LABEL_131;
                  a1[1] = v47 + 1;
                  ContentTransition.NamedTransition.encode(to:)((uint64_t)a1);
                  ProtobufEncoder.endLengthDelimited()();
                  v45 = v104;
                }
                if (v98)
                {
                  v68 = a1[1];
                  v69 = a1[2];
                  if (v68 >= v69)
                  {
                    v76 = v68 + 1;
                    if (__OFADD__(v68, 1))
                      goto LABEL_136;
                    if (v69 < v76)
                    {
                      v77 = (_BYTE *)ProtobufEncoder.growBufferSlow(to:)(v76);
                    }
                    else
                    {
                      a1[1] = v76;
                      v77 = (_BYTE *)(*a1 + v68);
                    }
                    *v77 = 24;
                    v70 = a1[1];
                  }
                  else
                  {
                    *(_BYTE *)(*a1 + v68) = 24;
                    v70 = v68 + 1;
                    a1[1] = v70;
                  }
                  v71 = a1[2];
                  if (v70 < v71)
                  {
                    *(_BYTE *)(*a1 + v70) = 1;
                    a1[1] = v70 + 1;
                  }
                  else
                  {
                    v72 = v70 + 1;
                    if (__OFADD__(v70, 1))
                      goto LABEL_135;
                    if (v71 < v72)
                    {
                      v73 = (_BYTE *)ProtobufEncoder.growBufferSlow(to:)(v72);
                    }
                    else
                    {
                      a1[1] = v72;
                      v73 = (_BYTE *)(*a1 + v70);
                    }
                    *v73 = 1;
                  }
                }
                v25 += 16;
                ProtobufEncoder.endLengthDelimited()();
                outlined consume of ContentTransition.Storage(v32, v45, v96);
                v24 = v97 - 1;
                if (v97 == 1)
                {
                  swift_bridgeObjectRelease();
                  a2 = v93;
                  goto LABEL_126;
                }
              }
              __break(1u);
LABEL_130:
              __break(1u);
LABEL_131:
              __break(1u);
LABEL_132:
              __break(1u);
LABEL_133:
              __break(1u);
LABEL_134:
              __break(1u);
LABEL_135:
              __break(1u);
LABEL_136:
              __break(1u);
LABEL_137:
              __break(1u);
LABEL_138:
              __break(1u);
LABEL_139:
              __break(1u);
LABEL_140:
              __break(1u);
LABEL_141:
              __break(1u);
LABEL_142:
              __break(1u);
LABEL_143:
              __break(1u);
            }
            else
            {
LABEL_126:
              v92 = *(unsigned __int16 *)(a2 + 236);
              if (v92)
              {
                ProtobufEncoder.encodeVarint(_:)(0x38uLL);
                ProtobufEncoder.encodeVarint(_:)(v92);
              }
            }
          }
        }
      }
    }
  }
}

void protocol witness for ProtobufEncodableMessage.encode(to:) in conformance CodableResolvedStyledText(_QWORD *a1)
{
  uint64_t *v1;

  CodableResolvedStyledText.encode(to:)(a1, *v1);
}

unint64_t protocol witness for ProtobufDecodableMessage.init(from:) in conformance CodableResolvedStyledText@<X0>(unint64_t a1@<X0>, unint64_t *a2@<X8>)
{
  uint64_t v2;
  unint64_t result;

  result = specialized CodableResolvedStyledText.init(from:)(a1);
  if (!v2)
    *a2 = result;
  return result;
}

uint64_t ResolvedStyledText.firstBaseline(in:)(double a1, double a2)
{
  uint64_t v2;

  if (one-time initialization token for firstTextBaseline != -1)
    swift_once();
  return (*(uint64_t (**)(uint64_t, double, double))(*(_QWORD *)v2 + 272))(static VerticalAlignment.firstTextBaseline, a1, a2);
}

uint64_t ResolvedStyledText.lastBaseline(in:)(double a1, double a2)
{
  uint64_t v2;

  if (one-time initialization token for lastTextBaseline != -1)
    swift_once();
  return (*(uint64_t (**)(uint64_t, double, double))(*(_QWORD *)v2 + 272))(static VerticalAlignment.lastTextBaseline, a1, a2);
}

__C::CGRect __swiftcall ResolvedStyledText.frame(in:)(CGSize in)
{
  double *v1;
  unint64_t v2;
  unint64_t v3;
  double v4;
  double v5;
  CGFloat v6;
  uint64_t v7;
  double v8;
  double v9;
  CGFloat v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  __C::CGRect result;

  v4 = (*(double (**)(__n128, __n128))(*(_QWORD *)v1 + 240))((__n128)__PAIR128__(v2, *(unint64_t *)&in.width), (__n128)__PAIR128__(v3, *(unint64_t *)&in.height));
  v6 = v5;
  v7 = swift_beginAccess();
  v8 = v1[13];
  if (*((_BYTE *)v1 + 43))
    v9 = 0.0;
  else
    v9 = 0.0 - v8;
  v10 = v4 + v8;
  v11 = (*(double (**)(uint64_t))(*(_QWORD *)v1 + 176))(v7);
  v13 = v12;
  v15 = v14;
  v17 = v16;
  swift_beginAccess();
  v18 = CGRect.inset(by:)(v1[18] - v11 + 0.0, v1[19] - v13 + 0.0, v1[20] - v15 + 0.0, v1[21] - v17 + 0.0, v9, 0.0, v10, v6);
  result.size.height = v21;
  result.size.width = v20;
  result.origin.y = v19;
  result.origin.x = v18;
  return result;
}

CGSize __swiftcall ResolvedStyledText.frameOffset()()
{
  uint64_t v0;
  double v1;
  double v2;
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  CGSize result;

  v1 = (*(double (**)(void))(*(_QWORD *)v0 + 176))();
  v3 = v2;
  swift_beginAccess();
  v4 = *(double *)(v0 + 144);
  v5 = -(v3 - *(double *)(v0 + 152));
  swift_beginAccess();
  if ((*(_BYTE *)(v0 + 43) & 1) == 0)
    v5 = v5 - *(double *)(v0 + 104);
  v6 = -(v1 - v4);
  v7 = v5;
  result.height = v6;
  result.width = v7;
  return result;
}

uint64_t property wrapper backing initializer of TextDrawingContext.ctx@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  type metadata accessor for AtomicBuffer<NSStringDrawingContext>(0);
  result = swift_allocObject();
  *(_DWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = a1;
  *a2 = result;
  return result;
}

uint64_t one-time initialization function for shared()
{
  uint64_t v0;
  id v1;
  uint64_t result;

  type metadata accessor for TextDrawingContext();
  v0 = swift_allocObject();
  v1 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BEBB4A8]), sel_init);
  objc_msgSend(v1, sel_setWrapsForTruncationMode_, 1);
  objc_msgSend(v1, sel_setWantsBaselineOffset_, 1);
  objc_msgSend(v1, sel_setWantsScaledLineHeight_, 1);
  objc_msgSend(v1, sel_setWantsScaledBaselineOffset_, 1);
  objc_msgSend(v1, sel_setCachesLayout_, 1);
  type metadata accessor for AtomicBuffer<NSStringDrawingContext>(0);
  result = swift_allocObject();
  *(_DWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = v1;
  *(_QWORD *)(v0 + 16) = result;
  static TextDrawingContext.shared = v0;
  return result;
}

{
  uint64_t result;

  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for ShapeStyleBox<BackgroundStyle>, (uint64_t)&type metadata for BackgroundStyle, (uint64_t)&protocol witness table for BackgroundStyle, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ShapeStyleBox);
  result = swift_allocObject();
  static BackgroundStyle.shared = result;
  return result;
}

{
  uint64_t result;

  type metadata accessor for _ImpossibleActor();
  result = swift_allocObject();
  static _ImpossibleActor.shared = result;
  return result;
}

unint64_t closure #2 in closure #1 in TextDrawingContext.withStringDrawingContext<A>(minScaleFactor:lineLimit:kitCache:useNSLayoutManager:do:)(unint64_t a1)
{
  uint64_t v1;
  id v2;
  _OWORD v4[2];
  unint64_t v5;

  if (!a1)
    a1 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  v5 = a1;
  v1 = one-time initialization token for kitForegroundColor;
  swift_bridgeObjectRetain();
  if (v1 != -1)
    swift_once();
  v2 = (id)static NSAttributedStringKey.kitForegroundColor;
  specialized Dictionary._Variant.removeValue(forKey:)((uint64_t)v2, v4);

  outlined destroy of CodableAttributedString.Range.DecodingWrapper<ResolvableProgress>((uint64_t)v4, (uint64_t)&lazy cache variable for type metadata for Any?, MEMORY[0x24BEE4AD8] + 8, (uint64_t)MEMORY[0x24BEE1C68], (uint64_t (*)(_QWORD))type metadata accessor for MutableBox<CachedEnvironment>);
  return v5;
}

uint64_t TextDrawingContext.deinit()
{
  uint64_t v0;

  swift_release();
  return v0;
}

uint64_t TextDrawingContext.__deallocating_deinit()
{
  swift_release();
  return swift_deallocClassInstance();
}

_QWORD *protocol witness for _DisplayList_ViewFactory.makeView() in conformance DynamicTextViewFactory()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v1 = *v0;
  v2 = v0[1];
  v3 = v0[2];
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for AnyViewStorage<DynamicTextView>, (uint64_t)&type metadata for DynamicTextView, (uint64_t)&protocol witness table for DynamicTextView, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for AnyViewStorage);
  v4 = (_QWORD *)swift_allocObject();
  v4[2] = v1;
  v4[3] = v2;
  v4[4] = v3;
  swift_retain();
  return v4;
}

void protocol witness for _DisplayList_ViewFactory.identity.getter in conformance DynamicTextViewFactory(_DWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_DWORD *)(v1 + 24);
}

ValueMetadata *protocol witness for AnyViewFactory.viewType.getter in conformance DynamicTextViewFactory()
{
  return &type metadata for DynamicTextView;
}

double static DynamicTextView._makeView(view:inputs:)@<D0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  _DWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  __int128 v18;
  int OffsetAttribute2;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  int v33;
  int v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  double v41;
  _QWORD *v42;
  double result;
  _BYTE v44[12];
  int v45;
  __int128 v46;
  uint64_t v47;
  int v48;
  int v49;
  uint64_t v50;
  _QWORD *v51;
  int v52;
  __int128 v53;
  int v54;
  int v55;
  int v56;
  int v57;
  int v58;
  int v59;
  uint64_t v60;
  int v61;
  unsigned int v62;
  __int128 v63;
  __int128 v64;
  uint64_t v65;
  int v66;
  int v67;
  int v68;
  int v69;
  uint64_t v70;
  uint64_t v71;
  int v72;
  int v73;
  int v74;
  unint64_t v75;
  int v76;
  int v77;
  uint64_t v78;

  v51 = a3;
  v78 = *MEMORY[0x24BDAC8D0];
  v47 = type metadata accessor for DynamicTextView.DynamicTextEnvironment(0);
  MEMORY[0x24BDAC7A8](v47);
  v6 = &v44[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = type metadata accessor for DynamicTextView.DynamicTextFilter(0);
  MEMORY[0x24BDAC7A8](v7);
  v9 = &v44[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v10 = *a1;
  v11 = *(_QWORD *)a2;
  v61 = *(_DWORD *)(a2 + 8);
  v12 = *(_QWORD *)(a2 + 16);
  v13 = *(_DWORD *)(a2 + 24);
  v57 = *(_DWORD *)(a2 + 28);
  v58 = v13;
  v59 = *(_DWORD *)(a2 + 32);
  v49 = *(_DWORD *)(a2 + 36);
  v14 = *(_QWORD *)(a2 + 40);
  v15 = *(_QWORD *)(a2 + 48);
  v56 = *(_DWORD *)(a2 + 56);
  v55 = *(_DWORD *)(a2 + 60);
  LODWORD(v8) = *(_DWORD *)(a2 + 64);
  *(_QWORD *)&v16 = *(_QWORD *)(a2 + 68);
  v53 = v16;
  v48 = *(_DWORD *)(a2 + 76);
  v54 = *(_DWORD *)(a2 + 80);
  *(_QWORD *)&v64 = __PAIR64__(v8, v10);
  v45 = v8;
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  lazy protocol witness table accessor for type DynamicTextView.DynamicTextFrame and conformance DynamicTextView.DynamicTextFrame();
  Attribute.init<A>(body:value:flags:update:)();
  swift_beginAccess();
  v52 = *(_DWORD *)(v12 + 16);
  swift_retain_n();
  swift_retain_n();
  v60 = v14;
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  v17 = specialized find<A>(_:key:)(v11);
  if (v17)
    *(_QWORD *)&v18 = *(_QWORD *)(v17 + 72);
  else
    v18 = 0uLL;
  v46 = v18;
  swift_bridgeObjectRelease();
  v50 = v15;
  swift_bridgeObjectRelease_n();
  swift_release_n();
  swift_release_n();
  OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
  *((_QWORD *)v9 + 3) = 0;
  type metadata accessor for PropertyList.Tracker();
  v20 = swift_allocObject();
  type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for AtomicBuffer<TrackerData>, (uint64_t)&type metadata for TrackerData, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for AtomicBuffer);
  v21 = swift_allocObject();
  *(_DWORD *)(v21 + 16) = 0;
  v22 = MEMORY[0x24BEE4B00];
  *(_QWORD *)(v21 + 24) = 0;
  *(_QWORD *)(v21 + 32) = v22;
  v23 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v21 + 40) = v22;
  *(_QWORD *)(v21 + 48) = v23;
  *(_BYTE *)(v21 + 56) = 0;
  *(_QWORD *)(v20 + 16) = v21;
  *((_QWORD *)v9 + 4) = v20;
  *((_QWORD *)v9 + 5) = 0;
  static Date.distantPast.getter();
  *(_DWORD *)v9 = v52;
  *(_QWORD *)(v9 + 4) = v46;
  *((_DWORD *)v9 + 3) = v61;
  *((_DWORD *)v9 + 4) = OffsetAttribute2;
  *((_DWORD *)v9 + 5) = v10;
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  type metadata accessor for DynamicTextView.DynamicTextFilter.Value(0);
  lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type DynamicTextView.DynamicTextFilter and conformance DynamicTextView.DynamicTextFilter, type metadata accessor for DynamicTextView.DynamicTextFilter, (uint64_t)&protocol conformance descriptor for DynamicTextView.DynamicTextFilter);
  v52 = Attribute.init<A>(body:value:flags:update:)();
  outlined destroy of TypesettingConfiguration((uint64_t)v9, type metadata accessor for DynamicTextView.DynamicTextFilter);
  swift_retain();
  swift_retain();
  v24 = v50;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  LODWORD(v46) = AGGraphCreateOffsetAttribute2();
  v25 = AGGraphCreateOffsetAttribute2();
  v26 = *(_DWORD *)(v12 + 16);
  type metadata accessor for Date();
  v27 = AGGraphCreateOffsetAttribute2();
  static Date.distantPast.getter();
  v28 = v57;
  *v6 = v26;
  v6[1] = v28;
  v6[2] = v27;
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type DynamicTextView.DynamicTextEnvironment and conformance DynamicTextView.DynamicTextEnvironment, type metadata accessor for DynamicTextView.DynamicTextEnvironment, (uint64_t)&protocol conformance descriptor for DynamicTextView.DynamicTextEnvironment);
  v29 = Attribute.init<A>(body:value:flags:update:)();
  outlined destroy of TypesettingConfiguration((uint64_t)v6, type metadata accessor for DynamicTextView.DynamicTextEnvironment);
  v30 = MEMORY[0x24BEE4AF8];
  v31 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for MutableBox<CachedEnvironment>, (uint64_t)&type metadata for CachedEnvironment, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for MutableBox);
  v32 = swift_allocObject();
  *(_DWORD *)(v32 + 16) = v29;
  *(_QWORD *)(v32 + 24) = v30;
  *(_OWORD *)(v32 + 32) = 0u;
  *(_OWORD *)(v32 + 48) = 0u;
  *(_OWORD *)(v32 + 64) = 0u;
  *(_WORD *)(v32 + 80) = 256;
  *(_QWORD *)(v32 + 88) = v31;
  swift_release();
  v33 = v59 | 0x38;
  v62 = AGGraphCreateOffsetAttribute2();
  *(_QWORD *)&v64 = v11;
  DWORD2(v64) = v61;
  v65 = v32;
  v66 = v58;
  v67 = v28;
  v34 = v49;
  v68 = v33;
  v69 = v49;
  v35 = v60;
  v70 = v60;
  v71 = v24;
  v72 = v56;
  v73 = v55;
  v74 = v46;
  v75 = __PAIR64__(v25, v53);
  v36 = v48;
  v76 = v48;
  v77 = v54;
  static StyledTextContentView._makeView(view:inputs:)(&v62, &v64, &v63);
  swift_retain_n();
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  v37 = specialized find<A>(_:key:)(v11);
  if (v37)
  {
    v38 = *(_QWORD *)(v37 + 72);
    v39 = *(_QWORD *)(v37 + 80);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    swift_release_n();
    v40 = swift_release_n();
    if (v38)
    {
      DWORD2(v64) = v61;
      *(_QWORD *)&v64 = v11;
      v65 = v12;
      v66 = v58;
      v67 = v57;
      v68 = v59;
      v69 = v34;
      v70 = v35;
      v71 = v24;
      v72 = v56;
      v73 = v55;
      v74 = v45;
      v75 = v53;
      v76 = v36;
      v77 = v54;
      v41 = MEMORY[0x24BDAC7A8](v40);
      *(_DWORD *)&v44[-16] = v52;
      (*(void (**)(__int128 *, uint64_t (*)(), double))(v39 + 8))(&v64, partial apply for implicit closure #1 in static DynamicTextView._makeView(view:inputs:), v41);
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
  }
  else
  {
    swift_release();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_release_n();
    swift_release_n();
  }
  v42 = v51;
  *v51 = v63;
  result = *((double *)&v63 + 1);
  v42[1] = *((_QWORD *)&v63 + 1);
  return result;
}

uint64_t DynamicTextView.DynamicTextFilter.textManager.getter()
{
  uint64_t v0;
  uint64_t v1;

  if (*(_QWORD *)(v0 + 24))
  {
    v1 = *(_QWORD *)(v0 + 24);
  }
  else
  {
    v1 = DynamicTextView.DynamicTextFilter.makeTextManager()();
    *(_QWORD *)(v0 + 24) = v1;
    swift_retain();
  }
  swift_retain();
  return v1;
}

uint64_t DynamicTextView.DynamicTextFilter.makeTextManager()()
{
  uint64_t v0;
  uint64_t v1;
  _BYTE *v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t *Value;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE v20[16];

  type metadata accessor for Date?(0);
  MEMORY[0x24BDAC7A8](v0);
  v2 = &v20[-((v1 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v3 = type metadata accessor for ResolvableStringResolutionContext();
  MEMORY[0x24BDAC7A8](v3);
  v5 = &v20[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  Value = (uint64_t *)AGGraphGetValue();
  v7 = *Value;
  v8 = Value[1];
  v9 = Value[2];
  v10 = (uint64_t *)AGGraphGetValue();
  v12 = *v10;
  v11 = v10[1];
  v13 = type metadata accessor for Date();
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v5, 1, 1, v13);
  v14 = &v5[*(int *)(v3 + 24)];
  *(_QWORD *)v14 = 0;
  v14[8] = 1;
  swift_retain_n();
  if (v11)
  {
    swift_retain_n();
    swift_retain();
    specialized PropertyList.Tracker.value<A>(_:for:)(v12, (uint64_t)v2);
  }
  else
  {
    swift_retain();
    specialized closure #1 in PropertyList.subscript.getter(v12, (uint64_t)v2);
  }
  swift_release_n();
  swift_release_n();
  outlined assign with take of ResolvedTextHelper.NextUpdate((uint64_t)v2, (uint64_t)v5, (uint64_t (*)(_QWORD))type metadata accessor for Date?);
  v15 = (uint64_t *)&v5[*(int *)(v3 + 20)];
  *v15 = v12;
  v15[1] = v11;
  *(_QWORD *)v14 = 0;
  v14[8] = 1;
  type metadata accessor for SizeFittingTextCache<DynamicTextView.DynamicTextHelper, StickyTextSizeFittingLogic>(0, &lazy cache variable for type metadata for SizeFittingTextCache<DynamicTextView.DynamicTextHelper, StickyTextSizeFittingLogic>, (uint64_t (*)(_QWORD, _QWORD *))type metadata accessor for SizeFittingTextCache);
  v16 = swift_allocObject();
  v17 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v16 + 16) = 10;
  *(_QWORD *)(v16 + 24) = v17;
  *(_BYTE *)(v16 + 32) = 0;
  type metadata accessor for _ContiguousArrayStorage<SizeFittingTextCache<DynamicTextView.DynamicTextHelper, StickyTextSizeFittingLogic>.CacheEntry>();
  v18 = swift_allocObject();
  *(_OWORD *)(v18 + 16) = xmmword_23527E860;
  *(_QWORD *)(v18 + 32) = v7;
  *(_QWORD *)(v18 + 40) = v8;
  *(_QWORD *)(v18 + 48) = v9;
  *(_OWORD *)(v18 + 56) = 0u;
  *(_OWORD *)(v18 + 72) = 0u;
  *(_OWORD *)(v18 + 81) = 0u;
  *(_QWORD *)(v16 + 40) = v18;
  *(_WORD *)(v16 + 48) = 0;
  *(_OWORD *)(v16 + 56) = 0u;
  *(_OWORD *)(v16 + 72) = 0u;
  *(_WORD *)(v16 + 88) = 256;
  outlined init with take of LocalizedStringKey.FormatArgument((uint64_t)v5, v16 + *(_QWORD *)(*(_QWORD *)v16 + 144), (uint64_t (*)(_QWORD))type metadata accessor for ResolvableStringResolutionContext);
  return v16;
}

uint64_t DynamicTextView.DynamicTextFilter.updateValue()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *Value;
  char v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  BOOL v41;
  uint64_t WeakValue;
  int v43;
  double *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void (*v54)(char *, uint64_t, uint64_t);
  uint64_t v55;
  void (*v56)(char *, uint64_t);
  uint64_t OutputValue;
  __n128 v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  void (*v64)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  __int16 v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t *v81;
  uint64_t v82;
  _QWORD *v83;
  double *v84;
  double v85;
  double v86;
  double v87;
  double v88;
  double v89;
  unint64_t v90;
  uint64_t v91;
  char v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  double v97;
  uint64_t v98;
  double v99;
  double v100;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  uint64_t v107;
  char *v108;
  uint64_t v109;
  uint64_t v110;
  char *v111;
  uint64_t v112;
  char *v113;
  char *v114;
  uint64_t v115;
  void (*v116)(char *, uint64_t, uint64_t);
  char *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;

  v1 = v0;
  v126 = *MEMORY[0x24BDAC8D0];
  v115 = type metadata accessor for DynamicTextView.DynamicTextFilter.Value(0);
  MEMORY[0x24BDAC7A8](v115);
  v113 = (char *)&v102 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v107 = type metadata accessor for ResolvableStringResolutionContext();
  MEMORY[0x24BDAC7A8](v107);
  v108 = (char *)&v102 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v4);
  v112 = (uint64_t)&v102 - v5;
  type metadata accessor for Date?(0);
  v110 = v6;
  MEMORY[0x24BDAC7A8](v6);
  v106 = (char *)&v102 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8);
  v104 = (uint64_t)&v102 - v9;
  MEMORY[0x24BDAC7A8](v10);
  v105 = (uint64_t)&v102 - v11;
  MEMORY[0x24BDAC7A8](v12);
  v111 = (char *)&v102 - v13;
  MEMORY[0x24BDAC7A8](v14);
  v103 = (uint64_t)&v102 - v15;
  MEMORY[0x24BDAC7A8](v16);
  v18 = (char *)&v102 - v17;
  MEMORY[0x24BDAC7A8](v19);
  v21 = (char *)&v102 - v20;
  v109 = 0;
  v22 = type metadata accessor for Date();
  v118 = *(_QWORD *)(v22 - 8);
  MEMORY[0x24BDAC7A8](v22);
  v24 = (char *)&v102 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v25);
  v27 = (char *)&v102 - v26;
  MEMORY[0x24BDAC7A8](v28);
  v114 = (char *)&v102 - v29;
  MEMORY[0x24BDAC7A8](v30);
  v117 = (char *)&v102 - v31;
  Value = (uint64_t *)AGGraphGetValue();
  v34 = v33;
  v36 = *Value;
  v35 = Value[1];
  v37 = *(_QWORD *)AGGraphGetValue();
  v120 = v35;
  v121 = v37;
  v119 = v36;
  if ((v38 & 1) != 0)
  {
    swift_retain();
    swift_retain();
    swift_retain();
    LODWORD(v116) = 1;
  }
  else
  {
    swift_retain();
    v37 = v121;
    swift_retain();
    if ((v34 & 1) != 0)
    {
      v39 = swift_retain_n();
      LODWORD(v116) = PropertyList.Tracker.hasDifferentUsedValues(_:)(v39);
      swift_release();
    }
    else
    {
      swift_retain();
      LODWORD(v116) = 0;
    }
  }
  v40 = v118;
  if (!*(_QWORD *)(v37 + 192) || (swift_retain(), v41 = NSAttributedString.isDynamic.getter(), swift_release(), !v41))
  {
    v43 = 0;
    v18 = (char *)(v1 + *(int *)(type metadata accessor for DynamicTextView.DynamicTextFilter(0) + 48));
    v47 = 2;
    v45 = (uint64_t)v117;
    goto LABEL_22;
  }
  WeakValue = AGGraphGetWeakValue();
  if (WeakValue)
  {
    outlined init with copy of TypesettingLanguage(WeakValue, (uint64_t)v21, (uint64_t (*)(_QWORD))type metadata accessor for Date?);
    outlined init with take of LocalizedStringKey.FormatArgument((uint64_t)v21, (uint64_t)v18, (uint64_t (*)(_QWORD))type metadata accessor for Date?);
    v43 = 1;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v40 + 48))(v18, 1, v22) != 1)
    {
      v47 = 4;
      v45 = (uint64_t)v117;
      goto LABEL_22;
    }
    outlined destroy of TypesettingConfiguration((uint64_t)v18, (uint64_t (*)(_QWORD))type metadata accessor for Date?);
  }
  v44 = (double *)AGGraphGetValue();
  v45 = (uint64_t)v117;
  if (*v44 >= *(double *)(v1 + 40))
  {
    if (v120)
    {
      v48 = v119;
      swift_retain_n();
      swift_retain_n();
      v49 = v103;
      specialized PropertyList.Tracker.value<A>(_:for:)(v48, v103);
    }
    else
    {
      v50 = swift_retain_n();
      v49 = v103;
      v51 = v109;
      specialized closure #1 in PropertyList.subscript.getter(v50, v103);
      v109 = v51;
      v40 = v118;
    }
    swift_release_n();
    swift_release_n();
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v40 + 48))(v49, 1, v22) == 1)
    {
      v18 = v114;
      static Date.now.getter();
      outlined destroy of TypesettingConfiguration(v49, (uint64_t (*)(_QWORD))type metadata accessor for Date?);
    }
    else
    {
      v18 = v114;
      (*(void (**)(char *, uint64_t, uint64_t))(v40 + 32))(v114, v49, v22);
    }
  }
  else
  {
    v46 = v1 + *(int *)(type metadata accessor for DynamicTextView.DynamicTextFilter(0) + 48);
    v18 = v114;
    (*(void (**)(char *, uint64_t, uint64_t))(v40 + 16))(v114, v46, v22);
  }
  v43 = 1;
  v47 = 4;
LABEL_22:
  (*(void (**)(uint64_t, char *, uint64_t))(v40 + 8 * v47))(v45, v18, v22);
  if ((v116 & 1) != 0)
  {
    v52 = DynamicTextView.DynamicTextFilter.makeTextManager()();
    swift_release();
    *(_QWORD *)(v1 + 24) = v52;
    v116 = *(void (**)(char *, uint64_t, uint64_t))(v40 + 16);
    v116(v27, v45, v22);
    v114 = *(char **)(v40 + 8);
    ((void (*)(char *, uint64_t))v114)(v27, v22);
    v53 = v119;
    goto LABEL_29;
  }
  v54 = *(void (**)(char *, uint64_t, uint64_t))(v40 + 16);
  v54(v27, v45, v22);
  v55 = v1 + *(int *)(type metadata accessor for DynamicTextView.DynamicTextFilter(0) + 48);
  v116 = v54;
  v54(v24, v55, v22);
  lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type Date and conformance Date, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], MEMORY[0x24BDCE958]);
  LOBYTE(v54) = dispatch thunk of static Equatable.== infix(_:_:)();
  v56 = *(void (**)(char *, uint64_t))(v40 + 8);
  v56(v24, v22);
  v114 = (char *)v56;
  v56(v27, v22);
  if ((v54 & 1) == 0)
  {
    v53 = v119;
LABEL_29:
    v59 = *(_QWORD *)(v1 + 32);
    PropertyList.Tracker.reset()();
    if (v43)
    {
      if (v53)
        v60 = *(_QWORD *)(v53 + 64);
      else
        v60 = 0;
      v62 = *(_QWORD *)(v59 + 16);
      swift_retain_n();
      swift_retain_n();
      swift_retain_n();
      swift_retain();
      os_unfair_lock_lock((os_unfair_lock_t)(v62 + 16));
      *(_QWORD *)(v62 + 24) = v60;
      os_unfair_lock_unlock((os_unfair_lock_t)(v62 + 16));
      swift_release();
      swift_release();
      swift_release();
      v124 = v53;
      v125 = v59;
      v63 = (uint64_t)v111;
      v116(v111, v45, v22);
      v64 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v40 + 56);
      v64(v63, 0, 1, v22);
      v65 = v105;
      outlined init with copy of TypesettingLanguage(v63, v105, (uint64_t (*)(_QWORD))type metadata accessor for Date?);
      v66 = v104;
      outlined init with copy of TypesettingLanguage(v65, v104, (uint64_t (*)(_QWORD))type metadata accessor for Date?);
      swift_retain_n();
      v67 = v109;
      specialized closure #1 in PropertyList.subscript.setter(&v124, v66);
      swift_release();
      outlined destroy of TypesettingConfiguration(v66, (uint64_t (*)(_QWORD))type metadata accessor for Date?);
      v68 = v125;
      if (v125)
      {
        v69 = v124;
        swift_retain();
        swift_retain();
        specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v53, v69);
        swift_release();
        swift_release();
      }
      swift_release();
      outlined destroy of TypesettingConfiguration(v65, (uint64_t (*)(_QWORD))type metadata accessor for Date?);
      outlined destroy of TypesettingConfiguration((uint64_t)v111, (uint64_t (*)(_QWORD))type metadata accessor for Date?);
      v70 = *(_WORD *)(v121 + 236);
      swift_release();
      if ((v70 & 4) != 0)
      {
        v72 = v124;
        swift_retain_n();
        specialized closure #1 in PropertyList.subscript.setter(&v124, 1);
        v109 = v67;
        swift_release();
        v68 = v125;
        if (v125)
        {
          v73 = v124;
          swift_retain();
          swift_retain();
          specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v72, v73);
          swift_release();
          swift_release();
        }
        v71 = (uint64_t)v106;
        swift_release();
      }
      else
      {
        v109 = v67;
        v71 = (uint64_t)v106;
      }
      LODWORD(v111) = v43;
      v74 = AGGraphGetWeakValue();
      if (v74)
      {
        outlined init with copy of TypesettingLanguage(v74, v71, (uint64_t (*)(_QWORD))type metadata accessor for Date?);
      }
      else
      {
        v64(v71, 1, 1, v22);
        v68 = v125;
      }
      v75 = v71;
      v76 = v124;
      v77 = *(_QWORD *)AGGraphGetValue();
      v78 = (uint64_t)v108;
      v64((uint64_t)v108, 1, 1, v22);
      v79 = v107;
      v80 = v78 + *(int *)(v107 + 24);
      *(_QWORD *)v80 = 0;
      *(_BYTE *)(v80 + 8) = 1;
      swift_retain();
      swift_retain();
      outlined assign with take of ResolvedTextHelper.NextUpdate(v75, v78, (uint64_t (*)(_QWORD))type metadata accessor for Date?);
      v81 = (uint64_t *)(v78 + *(int *)(v79 + 20));
      *v81 = v76;
      v81[1] = v68;
      *(_QWORD *)v80 = v77;
      *(_BYTE *)(v80 + 8) = 0;
      v82 = v112;
      outlined init with take of LocalizedStringKey.FormatArgument(v78, v112, (uint64_t (*)(_QWORD))type metadata accessor for ResolvableStringResolutionContext);
      v83 = (_QWORD *)DynamicTextView.DynamicTextFilter.textManager.getter();
      v84 = (double *)AGGraphGetValue();
      v85 = *v84;
      v86 = v84[1];
      v87 = v84[2];
      v88 = v84[3];
      outlined init with copy of TypesettingLanguage(v82, v78, (uint64_t (*)(_QWORD))type metadata accessor for ResolvableStringResolutionContext);
      specialized SizeFittingTextCache.input.setter(v78, 1);
      if ((~*(_QWORD *)&v87 & 0x7FF0000000000000) == 0 && (*(_QWORD *)&v87 & 0xFFFFFFFFFFFFFLL) != 0)
        v89 = 0.0;
      else
        v89 = v87;
      if ((~*(_QWORD *)&v88 & 0x7FF0000000000000) == 0 && (*(_QWORD *)&v88 & 0xFFFFFFFFFFFFFLL) != 0)
        v90 = 0;
      else
        v90 = *(_QWORD *)&v88;
      LOBYTE(v123) = (~*(_QWORD *)&v87 & 0x7FF0000000000000) == 0 && (*(_QWORD *)&v87 & 0xFFFFFFFFFFFFFLL) != 0;
      LOBYTE(v122) = (~*(_QWORD *)&v88 & 0x7FF0000000000000) == 0 && (*(_QWORD *)&v88 & 0xFFFFFFFFFFFFFLL) != 0;
      v61 = specialized SizeFittingTextCache.withValue<A>(for:compute:)(*(_QWORD **)&v89, v123, v90, v122, v83);
      swift_retain();
      LOBYTE(v123) = (~*(_QWORD *)&v87 & 0x7FF0000000000000) == 0 && (*(_QWORD *)&v87 & 0xFFFFFFFFFFFFFLL) != 0;
      LOBYTE(v122) = (~*(_QWORD *)&v88 & 0x7FF0000000000000) == 0 && (*(_QWORD *)&v88 & 0xFFFFFFFFFFFFFLL) != 0;
      specialized SizeFittingTextCache.withResolver<A>(for:compute:)(*(_QWORD **)&v89, v123, v90, v122, (uint64_t)v83, (uint64_t)v83, v85, v86, v87, v88);
      swift_release();
      swift_release();
      v91 = v119;
      if (v120)
      {
        swift_retain_n();
        swift_retain_n();
        swift_retain();
        v92 = specialized PropertyList.Tracker.value<A>(_:for:)(v91);
      }
      else
      {
        swift_retain_n();
        swift_retain();
        v92 = specialized closure #1 in PropertyList.subscript.getter(v91);
      }
      v45 = (uint64_t)v117;
      v40 = v118;
      v43 = (int)v111;
      swift_release_n();
      swift_release_n();
      v122 = *(_QWORD *)AGGraphGetValue();
      ResolvedStyledText.nextUpdate(after:equivalentDate:reduceFrequency:)((double *)&v122, v45, v92 & 1, (double *)&v123);
      swift_release();
      outlined destroy of TypesettingConfiguration(v112, (uint64_t (*)(_QWORD))type metadata accessor for ResolvableStringResolutionContext);
      swift_release();
      swift_release();
      *(_QWORD *)(v1 + 40) = v123;
    }
    else
    {
      swift_retain();
      v61 = v37;
    }
    v93 = type metadata accessor for DynamicTextView.DynamicTextFilter(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v40 + 24))(v1 + *(int *)(v93 + 48), v45, v22);
    v94 = v115;
    v95 = (uint64_t)v113;
    v116(&v113[*(int *)(v115 + 20)], v45, v22);
    v96 = v95 + *(int *)(v94 + 24);
    swift_retain();
    ResolvedStyledText.schedule.getter(v96);
    *(_QWORD *)v95 = v61;
    *(_QWORD *)(v95 + 8) = 0;
    *(_BYTE *)(v95 + 16) = 0;
    AGGraphSetOutputValue();
    swift_release();
    outlined destroy of TypesettingConfiguration(v95, type metadata accessor for DynamicTextView.DynamicTextFilter.Value);
    if (!v43)
      goto LABEL_59;
    goto LABEL_55;
  }
  OutputValue = AGGraphGetOutputValue();
  v53 = v119;
  if (!OutputValue)
    goto LABEL_29;
  if (!v43)
    goto LABEL_59;
LABEL_55:
  v97 = *(double *)(v1 + 40);
  v58.n128_u64[0] = *(_QWORD *)AGGraphGetValue();
  if (v58.n128_f64[0] >= v97)
  {
LABEL_59:
    ((void (*)(uint64_t, uint64_t, __n128))v114)(v45, v22, v58);
    swift_release();
    swift_release();
    return swift_release();
  }
  v98 = specialized static ViewGraph.current.getter();
  swift_release();
  swift_release();
  swift_release();
  ((void (*)(uint64_t, uint64_t))v114)(v45, v22);
  v99 = *(double *)(v1 + 40);
  swift_beginAccess();
  v100 = *(double *)(v98 + 376);
  if (v99 < v100)
    v100 = v99;
  *(double *)(v98 + 376) = v100;
  return swift_release();
}

uint64_t protocol witness for static StatefulRule.initialValue.getter in conformance DynamicTextView.DynamicTextFilter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;

  v2 = type metadata accessor for DynamicTextView.DynamicTextFilter.Value(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(a1, 1, 1, v2);
}

uint64_t DynamicTextView.DynamicTextHelper.widthAdaptedText.getter()
{
  _QWORD *v0;
  uint64_t v1;

  if (v0[3])
  {
    v1 = v0[3];
  }
  else
  {
    v1 = closure #1 in DynamicTextView.DynamicTextHelper.widthAdaptedText.getter(v0);
    v0[3] = v1;
    swift_retain();
  }
  swift_retain();
  return v1;
}

uint64_t closure #1 in DynamicTextView.DynamicTextHelper.widthAdaptedText.getter(_QWORD *a1)
{
  _BOOL4 v2;
  uint64_t v3;
  uint64_t v4;
  __int16 v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  id v9;
  id v10;
  _QWORD *v11;
  uint64_t v12;
  void *v13;
  id v14;
  uint64_t result;
  id v16;
  id v17;
  void *v18;
  __int16 v19;
  __int16 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  double v27;
  double v28;
  double v29;
  double v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  double v34;
  char v35;
  id v36;
  double v37;
  double v38;
  double v39;
  double v40;
  uint64_t v41;
  uint64_t v42;
  _OWORD v43[2];
  uint64_t v44;
  __int128 v45;
  __int16 v46;
  __int16 v47;
  _OWORD v48[6];
  _OWORD v49[2];
  __int128 aBlock;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  _OWORD v56[2];
  BOOL v57;
  _OWORD v58[2];
  char v59;

  v2 = a1[4] == 0;
  v57 = a1[4] == 0;
  v3 = *a1;
  swift_beginAccess();
  if ((*(_BYTE *)(v3 + 136) & 2) == 0)
  {
    v4 = *a1;
    v5 = *(_WORD *)(*a1 + 236);
LABEL_12:
    v18 = *(void **)(v4 + 192);
    v17 = v18;
    v14 = 0;
    goto LABEL_13;
  }
  v6 = *(_QWORD *)(v3 + 192);
  if (!v6)
    goto LABEL_9;
  v7 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDD1688]), sel_initWithAttributedString_, v6);
  if (one-time initialization token for resolvableTextSegment != -1)
    swift_once();
  v8 = static NSAttributedStringKey.resolvableTextSegment;
  v9 = v7;
  v10 = objc_msgSend(v9, sel_length);

  v11 = (_QWORD *)swift_allocObject();
  v11[2] = v9;
  v11[3] = a1;
  v11[4] = &v57;
  v12 = swift_allocObject();
  *(_QWORD *)(v12 + 16) = partial apply for closure #1 in closure #1 in closure #1 in DynamicTextView.DynamicTextHelper.widthAdaptedText.getter;
  *(_QWORD *)(v12 + 24) = v11;
  *(_QWORD *)&v52 = thunk for @callee_guaranteed (@in_guaranteed Any?, @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ()partial apply;
  *((_QWORD *)&v52 + 1) = v12;
  *(_QWORD *)&aBlock = MEMORY[0x24BDAC760];
  *((_QWORD *)&aBlock + 1) = 1107296256;
  *(_QWORD *)&v51 = thunk for @escaping @callee_guaranteed (@in_guaranteed Any?, @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ();
  *((_QWORD *)&v51 + 1) = &block_descriptor_60_0;
  v13 = _Block_copy(&aBlock);
  v14 = v9;
  swift_retain();
  swift_release();
  objc_msgSend(v14, sel_enumerateAttribute_inRange_options_usingBlock_, v8, 0, v10, 0, v13);
  _Block_release(v13);
  LOBYTE(v8) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  result = swift_release();
  if ((v8 & 1) != 0)
  {
    __break(1u);
    return result;
  }
  if (v14)
  {
    v16 = v14;
    NSMutableAttributedString.resolveUpdateSchedule(recalculate:)(1, (uint64_t)&aBlock);

  }
  else
  {
LABEL_9:
    v14 = 0;
    *(_QWORD *)&v52 = 0;
    aBlock = 0u;
    v51 = 0u;
  }
  outlined destroy of CodableAttributedString.Range.DecodingWrapper<ResolvableProgress>((uint64_t)&aBlock, (uint64_t)&lazy cache variable for type metadata for TimelineSchedule?, (uint64_t)&lazy cache variable for type metadata for TimelineSchedule, (uint64_t)&protocol descriptor for TimelineSchedule, (uint64_t (*)(_QWORD))type metadata accessor for AnyTrackedValue?);
  v4 = *a1;
  v5 = *(_WORD *)(*a1 + 236);
  v2 = v57;
  if (!v14)
    goto LABEL_12;
  v17 = v14;
  v18 = v14;
LABEL_13:
  if (v2)
    v19 = 256;
  else
    v19 = 0;
  v20 = v5 & 0xFEFF | v19;
  swift_beginAccess();
  v21 = *(_OWORD *)(v4 + 80);
  v22 = *(_OWORD *)(v4 + 96);
  v23 = *(_OWORD *)(v4 + 112);
  *(_OWORD *)((char *)v56 + 9) = *(_OWORD *)(v4 + 121);
  v55 = v22;
  v56[0] = v23;
  v54 = v21;
  v24 = *(_OWORD *)(v4 + 32);
  aBlock = *(_OWORD *)(v4 + 16);
  v51 = v24;
  v25 = *(_OWORD *)(v4 + 64);
  v52 = *(_OWORD *)(v4 + 48);
  v53 = v25;
  v48[4] = v21;
  v48[5] = v22;
  v49[0] = v56[0];
  *(_OWORD *)((char *)v49 + 9) = *(_OWORD *)((char *)v56 + 9);
  v48[0] = aBlock;
  v48[1] = v24;
  v48[2] = v52;
  v48[3] = v25;
  swift_beginAccess();
  v26 = *(_OWORD *)(v4 + 160);
  v58[0] = *(_OWORD *)(v4 + 144);
  v58[1] = v26;
  v59 = 0;
  v27 = *(double *)(v4 + 200);
  v28 = *(double *)(v4 + 208);
  v29 = *(double *)(v4 + 216);
  v30 = *(double *)(v4 + 224);
  v47 = *(_WORD *)(v4 + 232);
  v31 = *(_BYTE *)(v4 + 234);
  v46 = v20;
  v44 = 0;
  memset(v43, 0, sizeof(v43));
  v45 = xmmword_235260F00;
  v42 = MEMORY[0x24BEE4AF8];
  v33 = *(_QWORD *)(v4 + 240);
  v32 = *(_QWORD *)(v4 + 248);
  swift_beginAccess();
  v34 = *(double *)(v4 + 176);
  v35 = *(_BYTE *)(v4 + 184);
  v36 = v14;
  outlined retain of TextLayoutProperties((uint64_t)&aBlock);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v41 = specialized static ResolvedStyledText.styledText(storage:layoutProperties:layoutMargins:stylePadding:archiveOptions:isCollapsible:features:suffix:attachments:styles:transitions:scaleFactorOverride:)(v18, v48, (uint64_t)v58, (char *)&v47, v31, &v46, (uint64_t)v43, &v42, v27, v28, v29, v30, v37, v38, v39, v40, v33, v32, v34,
          v35);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined release of TextLayoutProperties((uint64_t)&aBlock);

  return v41;
}

uint64_t closure #1 in closure #1 in closure #1 in DynamicTextView.DynamicTextHelper.widthAdaptedText.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, _BYTE *a7)
{
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t (*v26)(void);
  id v27;
  _QWORD *v28;
  uint64_t v29;
  _OWORD v30[2];
  _QWORD v31[4];
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  _QWORD v35[3];
  uint64_t v36;
  uint64_t v37;

  type metadata accessor for ResolvableTextSegmentAttribute.Value?(0);
  MEMORY[0x24BDAC7A8](v13);
  v15 = (char *)&v28 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for ResolvableTextSegmentAttribute.Value(0);
  v17 = *(_QWORD *)(v16 - 8);
  MEMORY[0x24BDAC7A8](v16);
  v19 = (char *)&v28 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of Any?(a1, (uint64_t)v35);
  if (!v36)
  {
    outlined destroy of CodableAttributedString.Range.DecodingWrapper<ResolvableProgress>((uint64_t)v35, (uint64_t)&lazy cache variable for type metadata for Any?, MEMORY[0x24BEE4AD8] + 8, (uint64_t)MEMORY[0x24BEE1C68], (uint64_t (*)(_QWORD))type metadata accessor for MutableBox<CachedEnvironment>);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v17 + 56))(v15, 1, 1, v16);
    return outlined destroy of TypesettingConfiguration((uint64_t)v15, (uint64_t (*)(_QWORD))type metadata accessor for ResolvableTextSegmentAttribute.Value?);
  }
  v29 = a3;
  v20 = MEMORY[0x24BEE4AD8];
  v21 = swift_dynamicCast();
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v15, v21 ^ 1u, 1, v16);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16) == 1)
    return outlined destroy of TypesettingConfiguration((uint64_t)v15, (uint64_t (*)(_QWORD))type metadata accessor for ResolvableTextSegmentAttribute.Value?);
  outlined init with take of LocalizedStringKey.FormatArgument((uint64_t)v15, (uint64_t)v19, type metadata accessor for ResolvableTextSegmentAttribute.Value);
  v22 = *(int *)(v16 + 20);
  if (objc_msgSend(a5, sel_attribute_atIndex_effectiveRange_, *(_QWORD *)&v19[v22], a2, 0))
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v30, 0, sizeof(v30));
  }
  outlined init with take of AccessibilityDataSeriesConfiguration.AxisConfiguration?((uint64_t)v30, (uint64_t)v31, (unint64_t *)&lazy cache variable for type metadata for Any?, v20 + 8);
  if (v31[3])
  {
    type metadata accessor for ScrollStateRequest(0, &lazy cache variable for type metadata for ResolvableStringAttribute);
    if ((swift_dynamicCast() & 1) != 0)
    {
      if (*((_QWORD *)&v33 + 1))
      {
        outlined init with take of ScrollStateRequest(&v32, (uint64_t)v35);
        v24 = v36;
        v25 = v37;
        v28 = __swift_project_boxed_opaque_existential_1(v35, v36);
        v31[0] = *(_QWORD *)(a6 + 32);
        v26 = *(uint64_t (**)(void))(v25 + 72);
        *((_QWORD *)&v33 + 1) = v24;
        v34 = v25;
        __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v32);
        *a7 = (v26() | *a7) & 1;
        v27 = *(id *)&v19[v22];
        objc_msgSend(a5, sel_addAttribute_value_range_, v27, _bridgeAnythingToObjectiveC<A>(_:)(), a2, v29);

        swift_unknownObjectRelease();
        outlined destroy of TypesettingConfiguration((uint64_t)v19, type metadata accessor for ResolvableTextSegmentAttribute.Value);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v32);
        return __swift_destroy_boxed_opaque_existential_1((uint64_t)v35);
      }
    }
    else
    {
      v34 = 0;
      v32 = 0u;
      v33 = 0u;
    }
  }
  else
  {
    outlined destroy of CodableAttributedString.Range.DecodingWrapper<ResolvableProgress>((uint64_t)v31, (uint64_t)&lazy cache variable for type metadata for Any?, v20 + 8, (uint64_t)MEMORY[0x24BEE1C68], (uint64_t (*)(_QWORD))type metadata accessor for MutableBox<CachedEnvironment>);
    v32 = 0u;
    v33 = 0u;
    v34 = 0;
  }
  outlined destroy of TypesettingConfiguration((uint64_t)v19, type metadata accessor for ResolvableTextSegmentAttribute.Value);
  return outlined destroy of CodableAttributedString.Range.DecodingWrapper<ResolvableProgress>((uint64_t)&v32, (uint64_t)&lazy cache variable for type metadata for ResolvableStringAttribute?, (uint64_t)&lazy cache variable for type metadata for ResolvableStringAttribute, (uint64_t)&protocol descriptor for ResolvableStringAttribute, (uint64_t (*)(_QWORD))type metadata accessor for AnyTrackedValue?);
}

uint64_t DynamicTextView.DynamicTextHelper.value(for:)(uint64_t a1)
{
  uint64_t v2;
  char v3;
  char v4;
  void *v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  double v13;
  double v14;
  double v15;
  double v16;
  char v17;
  double v18;
  char v19;
  double v20;
  double v21;
  double v22;
  double v23;
  __int128 v25;
  uint64_t v26;
  _OWORD v27[2];
  uint64_t v28;
  __int128 v29;
  __int16 v30;
  char v31[2];
  _OWORD v32[6];
  _OWORD v33[2];
  _OWORD v34[6];
  _OWORD v35[2];
  _OWORD v36[2];
  char v37;

  DynamicTextView.DynamicTextHelper.widthAdaptedText.getter();
  v2 = ResolvedStyledText.resolvingContent(in:)(a1);
  swift_release();
  v3 = *(_BYTE *)(v2 + 233);
  v4 = *(_BYTE *)(v2 + 232) & 0xFE;
  v5 = *(void **)(v2 + 192);
  swift_beginAccess();
  v6 = *(_OWORD *)(v2 + 96);
  v34[4] = *(_OWORD *)(v2 + 80);
  v34[5] = v6;
  v35[0] = *(_OWORD *)(v2 + 112);
  *(_OWORD *)((char *)v35 + 9) = *(_OWORD *)(v2 + 121);
  v7 = *(_OWORD *)(v2 + 32);
  v34[0] = *(_OWORD *)(v2 + 16);
  v34[1] = v7;
  v8 = *(_OWORD *)(v2 + 64);
  v34[2] = *(_OWORD *)(v2 + 48);
  v34[3] = v8;
  v9 = *(_OWORD *)(v2 + 96);
  v32[4] = *(_OWORD *)(v2 + 80);
  v32[5] = v9;
  v33[0] = *(_OWORD *)(v2 + 112);
  *(_OWORD *)((char *)v33 + 9) = *(_OWORD *)(v2 + 121);
  v10 = *(_OWORD *)(v2 + 32);
  v32[0] = *(_OWORD *)(v2 + 16);
  v32[1] = v10;
  v11 = *(_OWORD *)(v2 + 64);
  v32[2] = *(_OWORD *)(v2 + 48);
  v32[3] = v11;
  swift_beginAccess();
  v12 = *(_OWORD *)(v2 + 160);
  v36[0] = *(_OWORD *)(v2 + 144);
  v36[1] = v12;
  v37 = 0;
  v13 = *(double *)(v2 + 200);
  v14 = *(double *)(v2 + 208);
  v15 = *(double *)(v2 + 216);
  v16 = *(double *)(v2 + 224);
  v31[0] = v4;
  v31[1] = v3;
  v17 = *(_BYTE *)(v2 + 234);
  v30 = *(_WORD *)(v2 + 236);
  v28 = 0;
  memset(v27, 0, sizeof(v27));
  v29 = xmmword_235260F00;
  v26 = MEMORY[0x24BEE4AF8];
  v25 = *(_OWORD *)(v2 + 240);
  swift_beginAccess();
  v18 = *(double *)(v2 + 176);
  v19 = *(_BYTE *)(v2 + 184);
  outlined retain of TextLayoutProperties((uint64_t)v34);
  specialized static ResolvedStyledText.styledText(storage:layoutProperties:layoutMargins:stylePadding:archiveOptions:isCollapsible:features:suffix:attachments:styles:transitions:scaleFactorOverride:)(v5, v32, (uint64_t)v36, v31, v17, &v30, (uint64_t)v27, &v26, v13, v14, v15, v16, v20, v21, v22, v23, v25, *((uint64_t *)&v25 + 1), v18,
    v19);
  outlined release of TextLayoutProperties((uint64_t)v34);
  return v2;
}

uint64_t protocol witness for SizeFittingTextResolver.shouldUpdate(for:inputChanged:) in conformance DynamicTextView.DynamicTextHelper(uint64_t a1, char a2)
{
  return a2 & 1;
}

uint64_t protocol witness for SizeFittingTextResolver.value(for:) in conformance DynamicTextView.DynamicTextHelper@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;

  result = DynamicTextView.DynamicTextHelper.value(for:)(a1);
  *a2 = result;
  a2[1] = v4;
  a2[2] = v5;
  return result;
}

uint64_t protocol witness for SizeFittingTextResolver.narrowerVariant.getter in conformance DynamicTextView.DynamicTextHelper@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  BOOL v3;
  uint64_t v4;
  uint64_t result;

  v2 = *(_QWORD *)(v1 + 32);
  v3 = __OFADD__(v2, 1);
  v4 = v2 + 1;
  if (v3)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)a1 = *(_QWORD *)v1;
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(v1 + 8);
    *(_QWORD *)(a1 + 24) = 0;
    *(_QWORD *)(a1 + 32) = v4;
    return swift_retain();
  }
  return result;
}

uint64_t DynamicTextView.DynamicTextEnvironment.updateValue()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(uint64_t);
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t *Value;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(char *, uint64_t, uint64_t);
  void (*v16)(char *, uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char v26;
  char v27;
  char v28;
  int v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  int v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;

  v1 = v0;
  v55 = *MEMORY[0x24BDAC8D0];
  v2 = type metadata accessor for DynamicTextView.DynamicTextEnvironment(0);
  MEMORY[0x24BDAC7A8](v2);
  v46 = (uint64_t)&v43 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for Date();
  v5 = (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900];
  v6 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v43 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v43 - v10;
  Value = (uint64_t *)AGGraphGetValue();
  v13 = Value[1];
  v53 = *Value;
  v54 = v13;
  v14 = AGGraphGetValue();
  v15 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 16);
  v15(v11, v14, v4);
  v47 = v1 + *(int *)(v2 + 28);
  ((void (*)(char *))v15)(v8);
  lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type Date and conformance Date, v5, MEMORY[0x24BDCE958]);
  swift_retain();
  swift_retain();
  LOBYTE(v2) = dispatch thunk of static Equatable.== infix(_:_:)();
  v48 = v6;
  v16 = *(void (**)(char *, uint64_t))(v6 + 8);
  v17 = v1;
  v16(v8, v4);
  v16(v11, v4);
  if ((v2 & 1) != 0)
    goto LABEL_20;
  AGGraphClearUpdate();
  v18 = v1;
  v19 = v46;
  outlined init with copy of TypesettingLanguage(v18, v46, type metadata accessor for DynamicTextView.DynamicTextEnvironment);
  v45 = *(_QWORD *)AGGraphGetValue();
  swift_retain();
  outlined destroy of TypesettingConfiguration(v19, type metadata accessor for DynamicTextView.DynamicTextEnvironment);
  AGGraphSetUpdate();
  v20 = v53;
  v46 = v54;
  if (!v54)
  {
    v22 = swift_retain_n();
    v23 = specialized find<A>(_:key:)(v22);
    if (v23)
    {
      v24 = *(_QWORD *)(v23 + 72);
      v25 = *(unsigned int *)(v23 + 80) | ((unint64_t)*(unsigned __int8 *)(v23 + 84) << 32);
      v26 = *(_BYTE *)(v23 + 85);
      v27 = *(_BYTE *)(v23 + 86);
      v28 = *(_BYTE *)(v23 + 87);
      v21 = *(_QWORD *)(v23 + 88);
      v29 = *(_DWORD *)(v23 + 96);
      outlined copy of ContentTransition.Storage(v24, v25, v26);
      swift_retain();
    }
    else
    {
      v26 = 0;
      v27 = 0;
      v28 = 0;
      v21 = 0;
      v29 = 0;
      v25 = 0x302000000;
      v24 = 0x8000000000;
    }
    v49 = v24;
    LODWORD(v50) = v25;
    BYTE4(v50) = BYTE4(v25);
    BYTE5(v50) = v26;
    BYTE6(v50) = v27;
    HIBYTE(v50) = v28;
    v51 = v21;
    v52 = v29;
    swift_release_n();
    v44 = v17;
    if (v21)
      goto LABEL_15;
LABEL_9:
    v30 = swift_retain();
    v31 = specialized closure #1 in PropertyList.subscript.getter(v30);
    swift_release();
    if ((v31 & 1) != 0 || HIBYTE(v50) - 1 >= 2)
    {
      v21 = 0;
    }
    else
    {
      if (one-time initialization token for default != -1)
        swift_once();
      v21 = static Animation.default;
      swift_retain();
    }
    goto LABEL_15;
  }
  swift_retain_n();
  swift_retain_n();
  specialized PropertyList.Tracker.value<A>(_:for:)(v20, (uint64_t)&v49);
  swift_release_n();
  swift_release_n();
  v21 = v51;
  v44 = v17;
  if (!v51)
    goto LABEL_9;
LABEL_15:
  v32 = v49;
  v33 = v50 | ((unint64_t)BYTE4(v50) << 32);
  v34 = BYTE5(v50);
  v35 = BYTE6(v50);
  v36 = v52;
  v37 = HIBYTE(v50);
  swift_retain_n();
  outlined copy of ContentTransition.Storage(v32, v33, v34);
  v38 = 0x1000000000000;
  if (!v35)
    v38 = 0;
  v39 = v33 | (v34 << 40) | v38 | (v37 << 56);
  swift_retain();
  specialized closure #1 in PropertyList.subscript.setter(&v53, v32, v39, v21, v36);
  swift_release();
  outlined consume of ContentTransition.Storage(v32, v33, v34);
  swift_release();
  if (v46)
  {
    v40 = v53;
    swift_retain();
    swift_retain();
    specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v20, v40);
    swift_release();
    swift_release();
  }
  swift_release();
  outlined consume of ContentTransition.Storage(v32, v33, v34);
  swift_release();
  swift_release();
LABEL_20:
  v41 = AGGraphGetValue();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v48 + 24))(v47, v41, v4);
  v49 = v53;
  v50 = v54;
  AGGraphSetOutputValue();
  swift_release();
  return swift_release();
}

double DynamicTextView.DynamicTextFrame.value.getter@<D0>(uint64_t a1@<X8>)
{
  uint64_t Value;
  unint64_t v3;
  unint64_t v4;
  double x;
  double y;
  double *v7;
  double v8;
  double v9;
  uint64_t v10;
  double result;
  uint64_t v12;
  __C::CGRect v13;

  Value = AGGraphGetValue();
  v3 = *(_QWORD *)(Value + 8);
  v4 = *(_QWORD *)(Value + 16);
  swift_retain();
  v13 = ResolvedStyledText.frame(in:)((CGSize)__PAIR128__(v4, v3));
  x = v13.origin.x;
  y = v13.origin.y;
  swift_release();
  v7 = (double *)AGGraphGetValue();
  v8 = *v7 - x;
  v9 = v7[1] - y;
  v10 = AGGraphGetValue();
  result = *(double *)(v10 + 8);
  v12 = *(_QWORD *)(v10 + 16);
  *(double *)a1 = v8;
  *(double *)(a1 + 8) = v9;
  *(double *)(a1 + 16) = result;
  *(_QWORD *)(a1 + 24) = v12;
  *(double *)(a1 + 32) = result;
  *(_QWORD *)(a1 + 40) = v12;
  return result;
}

double protocol witness for Rule.value.getter in conformance DynamicTextView.DynamicTextFrame@<D0>(uint64_t a1@<X8>)
{
  return DynamicTextView.DynamicTextFrame.value.getter(a1);
}

uint64_t static ResolvedStyledText.styledText(storage:stylePadding:layoutProperties:archiveOptions:isCollapsible:features:suffix:attachments:styles:transitions:)(void *a1, _OWORD *a2, __int16 *a3, char a4, __int16 *a5, uint64_t a6, uint64_t *a7, uint64_t a8, double a9, double a10, double a11, double a12, double a13, double a14, double a15, double a16, uint64_t a17)
{
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int16 v20;
  __int16 v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v26;
  _OWORD v27[2];
  __int128 v28;
  uint64_t v29;
  __int16 v30;
  __int16 v31;
  _OWORD v32[6];
  _OWORD v33[2];
  _BYTE v34[48];

  v17 = a2[5];
  v32[4] = a2[4];
  v32[5] = v17;
  v33[0] = a2[6];
  *(_OWORD *)((char *)v33 + 9) = *(_OWORD *)((char *)a2 + 105);
  v18 = a2[1];
  v32[0] = *a2;
  v32[1] = v18;
  v19 = a2[3];
  v32[2] = a2[2];
  v32[3] = v19;
  v20 = *a3;
  v21 = *a5;
  v22 = *(_QWORD *)(a6 + 48);
  v23 = *a7;
  memset(v34, 0, 32);
  v34[32] = 1;
  v31 = v20;
  v30 = v21;
  v24 = *(_OWORD *)(a6 + 16);
  v27[0] = *(_OWORD *)a6;
  v27[1] = v24;
  v28 = *(_OWORD *)(a6 + 32);
  v29 = v22;
  v26 = v23;
  return specialized static ResolvedStyledText.styledText(storage:layoutProperties:layoutMargins:stylePadding:archiveOptions:isCollapsible:features:suffix:attachments:styles:transitions:scaleFactorOverride:)(a1, v32, (uint64_t)v34, (char *)&v31, a4, &v30, (uint64_t)v27, &v26, a9, a10, a11, a12, *(double *)&v28, *(double *)&v24, a15, a16, a8, a17, 0.0,
           1);
}

uint64_t type metadata accessor for ResolvedTextFilter(uint64_t a1)
{
  return type metadata accessor for TimerTimelineSchedule(a1, (uint64_t *)&type metadata singleton initialization cache for ResolvedTextFilter);
}

uint64_t type metadata accessor for ResolvedTextHelper(uint64_t a1)
{
  return type metadata accessor for TimerTimelineSchedule(a1, (uint64_t *)&type metadata singleton initialization cache for ResolvedTextHelper);
}

uint64_t type metadata accessor for ResolvedTextHelper.NextUpdate(uint64_t a1)
{
  return type metadata accessor for TimerTimelineSchedule(a1, (uint64_t *)&type metadata singleton initialization cache for ResolvedTextHelper.NextUpdate);
}

uint64_t type metadata accessor for ResolvedStyledText()
{
  return objc_opt_self();
}

unint64_t lazy protocol witness table accessor for type Text.MakeRepresentableContext and conformance Text.MakeRepresentableContext()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Text.MakeRepresentableContext and conformance Text.MakeRepresentableContext;
  if (!lazy protocol witness table cache variable for type Text.MakeRepresentableContext and conformance Text.MakeRepresentableContext)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Text.MakeRepresentableContext, &unk_250645DB0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.MakeRepresentableContext and conformance Text.MakeRepresentableContext);
  }
  return result;
}

uint64_t sub_234D28790()
{
  return swift_deallocObject();
}

uint64_t block_copy_helper_11(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_11()
{
  return swift_release();
}

uint64_t specialized closure #1 in StatefulRule<>.update<A>(to:)(_QWORD *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *a2;
  v4 = a2[1];
  swift_release();
  swift_release();
  *a1 = v3;
  a1[1] = v4;
  swift_retain();
  return swift_retain();
}

uint64_t specialized closure #2 in StatefulRule<>.update<A>(to:)@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  v3 = *a1;
  v2 = a1[1];
  *a2 = v3;
  a2[1] = v2;
  swift_retain();
  return swift_retain();
}

uint64_t specialized static TextLayoutProperties.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  int v4;
  int v5;
  int v6;
  int v7;
  float64x2_t v8;
  float64x2_t v9;
  float64x2_t v10;
  int v11;
  float64x2_t v12;
  int v13;
  unint64_t v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  float64x2_t v20;
  float64x2_t v21;
  float64x2_t v22;
  float64x2_t v23;
  int v24;
  unint64_t v25;
  int v26;
  uint64_t result;
  char v28;
  BOOL v29;
  BOOL v30;
  BOOL v31;
  BOOL v32;
  int8x8_t v33;
  unsigned __int8 v34;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_BYTE *)(a1 + 24);
  v4 = *(unsigned __int8 *)(a1 + 25);
  v5 = *(unsigned __int8 *)(a1 + 26);
  v6 = *(unsigned __int8 *)(a1 + 27);
  v7 = *(unsigned __int8 *)(a1 + 28);
  v9 = *(float64x2_t *)(a1 + 32);
  v8 = *(float64x2_t *)(a1 + 48);
  v10 = *(float64x2_t *)(a1 + 64);
  v11 = *(unsigned __int8 *)(a1 + 80);
  v12 = *(float64x2_t *)(a1 + 88);
  v13 = *(unsigned __int8 *)(a1 + 104);
  v14 = *(_QWORD *)(a1 + 112);
  v15 = *(unsigned __int8 *)(a1 + 120);
  v16 = *(unsigned __int8 *)(a2 + 25);
  v17 = *(unsigned __int8 *)(a2 + 26);
  v18 = *(unsigned __int8 *)(a2 + 27);
  v19 = *(unsigned __int8 *)(a2 + 28);
  v21 = *(float64x2_t *)(a2 + 32);
  v20 = *(float64x2_t *)(a2 + 48);
  v22 = *(float64x2_t *)(a2 + 64);
  v23 = *(float64x2_t *)(a2 + 88);
  v24 = *(unsigned __int8 *)(a2 + 104);
  v25 = *(_QWORD *)(a2 + 112);
  v26 = *(unsigned __int8 *)(a2 + 120);
  if ((*(_BYTE *)(a1 + 8) & 1) != 0)
  {
    if (!*(_BYTE *)(a2 + 8))
      return 0;
  }
  else
  {
    if (*(_QWORD *)a1 == *(_QWORD *)a2)
      v28 = *(_BYTE *)(a2 + 8);
    else
      v28 = 1;
    if ((v28 & 1) != 0)
      return 0;
  }
  result = 0;
  if ((v3 & 1) != 0)
  {
    v29 = (vminv_u8((uint8x8_t)vcltz_s8(vshl_n_s8(vmovn_s16(vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vceqq_f64(v9, v21), (int32x4_t)vceqq_f64(v8, v20)), (int16x8_t)vuzp1q_s32((int32x4_t)vceqq_f64(v10, v22), (int32x4_t)vceqq_f64(v12, v23)))), 7uLL))) & (v5 == v17) & (v7 == v19 && v13 == v24) & *(_BYTE *)(a2 + 24)) == 1&& v4 == v16;
    if (!v29 || ((v6 ^ v18) & 1) != 0)
      return result;
LABEL_29:
    if (((v11 ^ *(unsigned __int8 *)(a2 + 80)) & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v34 = specialized static Array<A>.== infix(_:_:)(v14, v25);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v34 & (v15 == v26);
    }
    return result;
  }
  if ((*(_BYTE *)(a2 + 24) & 1) == 0)
  {
    v30 = v4 == v16;
    v31 = v2 == *(_QWORD *)(a2 + 16) && v13 == v24;
    v32 = v31;
    if (v6 == v18)
    {
      v33 = vand_s8(vcltz_s8(vshl_n_s8(vmovn_s16(vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vceqq_f64(v9, v21), (int32x4_t)vceqq_f64(v8, v20)), (int16x8_t)vuzp1q_s32((int32x4_t)vceqq_f64(v10, v22), (int32x4_t)vceqq_f64(v12, v23)))), 7uLL)), (int8x8_t)0x8040201008040201);
      v33.i8[0] = vaddv_s8(v33);
      if (v33.i32[0] == 255 && v30 && v5 == v17 && v7 == v19 && v32)
        goto LABEL_29;
    }
  }
  return result;
}

uint64_t specialized ResolvedStyledText.init(storage:layoutProperties:layoutMargins:stylePadding:archiveOptions:isCollapsible:features:suffix:attachments:styles:transitions:scaleFactorOverride:)(void *a1, __int128 *a2, uint64_t a3, __int16 *a4, char a5, __int16 *a6, uint64_t a7, double a8, double a9, double a10, double a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v14;
  uint64_t v15;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int16 v37;
  __int16 v38;
  _OWORD *v39;
  char *v40;
  id v41;
  double v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  _OWORD v55[6];
  _OWORD v56[2];
  char v57;
  uint64_t v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  char v63;
  _OWORD v64[2];
  char v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  _BYTE v72[25];

  v15 = v14;
  swift_bridgeObjectRelease();
  outlined consume of ResolvedTextSuffix(*(void **)a7, *(_QWORD *)(a7 + 8), *(_QWORD *)(a7 + 16), *(_QWORD *)(a7 + 24), *(_QWORD *)(a7 + 32), *(_QWORD *)(a7 + 40));
  v27 = a2[5];
  v29 = a2[3];
  v70 = a2[4];
  v28 = v70;
  v71 = v27;
  v30 = a2[5];
  *(_OWORD *)v72 = a2[6];
  *(_OWORD *)&v72[9] = *(__int128 *)((char *)a2 + 105);
  v31 = a2[1];
  v33 = v31;
  v66 = *a2;
  v32 = v66;
  v67 = v31;
  v34 = a2[3];
  v68 = a2[2];
  v35 = v68;
  v69 = v34;
  *(double *)(v15 + 200) = a8;
  *(double *)(v15 + 208) = a9;
  *(double *)(v15 + 216) = a10;
  *(double *)(v15 + 224) = a11;
  *(_OWORD *)(v15 + 121) = *(__int128 *)((char *)a2 + 105);
  v36 = a2[6];
  *(_OWORD *)(v15 + 96) = v30;
  *(_OWORD *)(v15 + 112) = v36;
  v37 = *a4;
  v38 = *a6;
  *(_QWORD *)(v15 + 176) = 0;
  v39 = (_OWORD *)(v15 + 256);
  *(_BYTE *)(v15 + 320) = 1;
  v40 = (char *)(v15 + 320);
  *(_BYTE *)(v15 + 184) = 1;
  *(_OWORD *)(v15 + 64) = v29;
  *(_OWORD *)(v15 + 80) = v28;
  *(_OWORD *)(v15 + 256) = 0u;
  *(_OWORD *)(v15 + 272) = 0u;
  *(_OWORD *)(v15 + 288) = 0u;
  *(_OWORD *)(v15 + 304) = 0u;
  *(_QWORD *)(v15 + 192) = a1;
  *(_WORD *)(v15 + 232) = v37;
  *(_BYTE *)(v15 + 234) = a5;
  *(_WORD *)(v15 + 236) = v38;
  *(_QWORD *)(v15 + 240) = a13;
  *(_QWORD *)(v15 + 248) = a14;
  *(_OWORD *)(v15 + 32) = v33;
  *(_OWORD *)(v15 + 48) = v35;
  *(_OWORD *)(v15 + 16) = v32;
  outlined init with take of AccessibilityDataSeriesConfiguration.AxisConfiguration?(a3, (uint64_t)v64, &lazy cache variable for type metadata for EdgeInsets?, (uint64_t)&type metadata for EdgeInsets);
  if (v65 == 1)
  {
    if (a1)
    {
      v61 = 0uLL;
      v62 = 0uLL;
      v59 = 0uLL;
      v60 = 0uLL;
      v63 = 1;
      v57 = v72[8];
      v58 = *(_QWORD *)&v72[16];
      v55[4] = v70;
      v55[5] = v71;
      v56[0] = *(_OWORD *)v72;
      *(_OWORD *)((char *)v56 + 9) = *(_OWORD *)&v72[9];
      v55[0] = v66;
      v55[1] = v67;
      v55[2] = v68;
      v55[3] = v69;
      v41 = a1;
      outlined retain of TextLayoutProperties((uint64_t)&v66);
      v42 = Text.Sizing.layoutMargins(for:metrics:layoutProperties:)((uint64_t)v41, (uint64_t)&v59, (uint64_t)v55);
      v44 = v43;
      v46 = v45;
      v48 = v47;

      outlined release of TextLayoutProperties((uint64_t)&v66);
      v49 = v63;
      v50 = v60;
      v51 = v61;
      v52 = v62;
      *(_OWORD *)(v15 + 256) = v59;
      *(_OWORD *)(v15 + 272) = v50;
      *(_OWORD *)(v15 + 288) = v51;
      *(_OWORD *)(v15 + 304) = v52;
      *v40 = v49;
      *(double *)(v15 + 144) = v42;
      *(_QWORD *)(v15 + 152) = v44;
      *(_QWORD *)(v15 + 160) = v46;
      *(_QWORD *)(v15 + 168) = v48;
    }
    else
    {
      *(_OWORD *)(v15 + 288) = 0uLL;
      *(_OWORD *)(v15 + 304) = 0uLL;
      *v39 = 0uLL;
      *(_OWORD *)(v15 + 272) = 0uLL;
      *v40 = 1;
      *(_OWORD *)(v15 + 144) = 0uLL;
      *(_OWORD *)(v15 + 160) = 0uLL;
    }
  }
  else
  {
    *(_OWORD *)(v15 + 288) = 0uLL;
    *(_OWORD *)(v15 + 304) = 0uLL;
    *v39 = 0uLL;
    *(_OWORD *)(v15 + 272) = 0uLL;
    *v40 = 1;
    v53 = v64[1];
    *(_OWORD *)(v15 + 144) = v64[0];
    *(_OWORD *)(v15 + 160) = v53;
  }
  return v15;
}

uint64_t specialized static ResolvedStyledText.styledText(storage:layoutProperties:layoutMargins:stylePadding:archiveOptions:isCollapsible:features:suffix:attachments:styles:transitions:scaleFactorOverride:)(void *a1, _OWORD *a2, uint64_t a3, char *a4, char a5, __int16 *a6, uint64_t a7, uint64_t *a8, double a9, double a10, double a11, double a12, double a13, double a14, double a15, double a16, uint64_t a17, uint64_t a18, double a19, char a20)
{
  __int128 v21;
  __int128 v22;
  __int128 v23;
  char v24;
  char v25;
  __int16 v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  id v38;
  uint64_t v39;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  id v44;
  uint64_t v45;
  double v46;
  double v47;
  double v48;
  double v49;
  char v50;
  char v51;
  __int16 v52;
  uint64_t v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  __int16 v64;
  char v65;
  char v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  _OWORD v73[2];
  _OWORD v74[5];
  __int128 v75;
  _OWORD v76[3];

  v21 = a2[5];
  v74[4] = a2[4];
  v75 = v21;
  v76[0] = a2[6];
  *(_OWORD *)((char *)v76 + 9) = *(_OWORD *)((char *)a2 + 105);
  v22 = a2[1];
  v74[0] = *a2;
  v74[1] = v22;
  v23 = a2[3];
  v74[2] = a2[2];
  v74[3] = v23;
  v24 = *a4;
  v25 = a4[1];
  v26 = *a6;
  v27 = *(void **)a7;
  v28 = *(_QWORD *)(a7 + 8);
  v29 = *(_QWORD *)(a7 + 16);
  v30 = *(_QWORD *)(a7 + 24);
  v32 = *(_QWORD *)(a7 + 32);
  v31 = *(_QWORD *)(a7 + 40);
  v33 = *(_QWORD *)(a7 + 48);
  v34 = *a8;
  if (*(_QWORD *)&vand_s8((int8x8_t)vdup_n_s16((unsigned __int16)*a6), (int8x8_t)0x80001000400008)
    || (v75 & 1) != 0
    || *(_QWORD *)(v34 + 16))
  {
    goto LABEL_6;
  }
  v50 = *a4;
  v51 = a4[1];
  v52 = *a6;
  if ((v31 & 0x8000000000000000) == 0)
  {
    outlined copy of ResolvedTextSuffix(v27, v28, v29, v30, v32, v31);
    outlined consume of ResolvedTextSuffix(v27, v28, v29, v30, v32, v31);
    outlined consume of ResolvedTextSuffix(0, 0, 0, 0, 0, 0x8000000000000000);
    v25 = v51;
    v26 = v52;
    v24 = v50;
LABEL_6:
    v35 = a2[5];
    v71 = a2[4];
    v72 = v35;
    v73[0] = a2[6];
    *(_OWORD *)((char *)v73 + 9) = *(_OWORD *)((char *)a2 + 105);
    v36 = a2[1];
    v67 = *a2;
    v68 = v36;
    v37 = a2[3];
    v69 = a2[2];
    v70 = v37;
    v65 = v24;
    v66 = v25;
    v64 = v26;
    v57 = v27;
    v58 = v28;
    v59 = v29;
    v60 = v30;
    v61 = v32;
    v62 = v31;
    v63 = v33;
    v56 = v34;
    type metadata accessor for ResolvedStyledText.TextLayoutManager();
    swift_allocObject();
    outlined copy of ResolvedTextSuffix(v27, v28, v29, v30, v32, v31);
    v38 = a1;
    outlined retain of TextLayoutProperties((uint64_t)v74);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v39 = swift_bridgeObjectRetain();
    return specialized ResolvedStyledText.TextLayoutManager.init(storage:layoutProperties:layoutMargins:stylePadding:archiveOptions:isCollapsible:features:suffix:attachments:styles:transitions:scaleFactorOverride:)(a1, (uint64_t *)&v67, a3, &v65, a5 & 1, &v64, (uint64_t)&v57, &v56, a9, a10, a11, a12, a17, v39);
  }
  outlined consume of ResolvedTextSuffix(v27, v28, v29, v30, v32, v31);
  outlined consume of ResolvedTextSuffix(0, 0, 0, 0, 0, 0x8000000000000000);
  v41 = a2[5];
  v71 = a2[4];
  v72 = v41;
  v73[0] = a2[6];
  *(_OWORD *)((char *)v73 + 9) = *(_OWORD *)((char *)a2 + 105);
  v42 = a2[1];
  v67 = *a2;
  v68 = v42;
  v43 = a2[3];
  v69 = a2[2];
  v70 = v43;
  v65 = v50;
  v66 = v51;
  v64 = v52;
  v57 = v27;
  v58 = v28;
  v59 = v29;
  v60 = v30;
  v61 = v32;
  v62 = v31;
  v63 = v33;
  v56 = v34;
  type metadata accessor for ResolvedStyledText.StringDrawing();
  swift_allocObject();
  v44 = a1;
  outlined retain of TextLayoutProperties((uint64_t)v74);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v45 = swift_bridgeObjectRetain();
  return ResolvedStyledText.StringDrawing.init(storage:layoutProperties:layoutMargins:stylePadding:archiveOptions:isCollapsible:features:suffix:attachments:styles:transitions:scaleFactorOverride:)(a1, (uint64_t)&v67, a3, &v65, a5 & 1, &v64, (uint64_t *)&v57, &v56, a9, a10, a11, a12, v46, v47, v48, v49, a17, v45, a19,
           a20 & 1);
}

unint64_t specialized CodableResolvedStyledText.init(from:)(unint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  void *v8;
  double v9;
  double v10;
  double v11;
  double v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  _QWORD *v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  __int128 v38;
  __int128 v39;
  _QWORD *v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  char v53;
  unint64_t v54;
  unint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  unint64_t v58;
  __int16 v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v63;
  id v64;
  double v65;
  double v66;
  double v67;
  double v68;
  _QWORD *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  void *v75;
  __int128 v76;
  __int128 v77;
  __int16 v78;
  _QWORD *v79;
  uint64_t v80;
  __int16 v81;
  __int16 v82;
  __int128 v83;
  __int128 v84;
  _BYTE v85[32];
  __int128 v86;
  __int128 v87;
  _OWORD v88[2];
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  _OWORD v95[2];
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  _OWORD v102[2];
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  _BYTE v108[41];
  _OWORD v109[2];
  char v110;
  uint64_t v111;

  v2 = v1;
  v111 = *MEMORY[0x24BDAC8D0];
  if (one-time initialization token for defaultValue != -1)
    swift_once();
  v4 = static MaximumLineHeightKey.defaultValue;
  if (one-time initialization token for defaultValue != -1)
    swift_once();
  v5 = static MinimumLineHeightKey.defaultValue;
  if (one-time initialization token for standard != -1)
    swift_once();
  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(_QWORD *)(a1 + 16);
  if (v6 >= v7)
  {
    *(_QWORD *)(a1 + 24) = 0;
    goto LABEL_99;
  }
  *(_QWORD *)&v103 = 0;
  BYTE8(v103) = 1;
  *(_QWORD *)&v104 = 0;
  BYTE8(v104) = 1;
  *(_DWORD *)((char *)&v104 + 9) = 1;
  *(_QWORD *)&v106 = 0;
  v105 = 0x3FF0000000000000uLL;
  *((_QWORD *)&v106 + 1) = v4;
  v107 = (unint64_t)v5;
  v108[0] = 0;
  *(_OWORD *)&v108[8] = xmmword_23528A280;
  v108[24] = static Text.Sizing.standard;
  *(_QWORD *)&v108[32] = qword_25426BAF8;
  v108[40] = 0;
  swift_bridgeObjectRetain();
  v8 = 0;
  v78 = 0;
  v9 = 0.0;
  v10 = 0.0;
  v11 = 0.0;
  v12 = 0.0;
  v79 = (_QWORD *)MEMORY[0x24BEE4AF8];
  v76 = 0u;
  v77 = 0u;
  v13 = *(_QWORD *)(a1 + 24);
  if (v13)
    goto LABEL_9;
  while (2)
  {
    v15 = ProtobufDecoder.decodeVarint()();
    if (v2)
      goto LABEL_101;
    v13 = v15;
    if (v15 < 8)
    {
LABEL_100:
      lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
      swift_allocError();
      swift_willThrow();
LABEL_101:
      swift_bridgeObjectRelease();

      outlined release of TextLayoutProperties((uint64_t)&v103);
      return a1;
    }
LABEL_14:
    switch(v13 >> 3)
    {
      case 1uLL:
        if ((v13 & 7) != 2)
          goto LABEL_100;
        ProtobufDecoder.beginMessage()();
        if (v2)
          goto LABEL_101;
        CodableAttributedString.init(from:)((id *)a1, (id **)&v83);
        v2 = 0;
        v16 = *(_QWORD **)(a1 + 40);
        if (!v16[2])
          goto LABEL_123;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
        {
          v17 = v16[2];
          if (!v17)
            goto LABEL_125;
        }
        else
        {
          v16 = specialized _ArrayBuffer._consumeAndCreateNew()(v16);
          v17 = v16[2];
          if (!v17)
            goto LABEL_125;
        }
        v18 = v17 - 1;
        v19 = v16[v18 + 4];
        v16[2] = v18;

        *(_QWORD *)(a1 + 40) = v16;
        *(_QWORD *)(a1 + 16) = v19;
        v8 = (void *)v83;
        goto LABEL_87;
      case 2uLL:
        if ((v13 & 7) != 2)
          goto LABEL_100;
        v20 = *(_QWORD **)(a1 + 40);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v20 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v20[2] + 1, 1, v20);
        v22 = v20[2];
        v21 = v20[3];
        if (v22 >= v21 >> 1)
          v20 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v21 > 1), v22 + 1, 1, v20);
        v20[2] = v22 + 1;
        v20[v22 + 4] = v7;
        *(_QWORD *)(a1 + 40) = v20;
        v23 = ProtobufDecoder.decodeVarint()();
        if (v2)
          goto LABEL_101;
        if (v23 < 0)
        {
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
          __break(1u);
          v69 = specialized _ArrayBuffer._consumeAndCreateNew()(&v96);
          v73 = v69[2];
          if (v73)
            goto LABEL_118;
          __break(1u);
          v69 = *(_QWORD **)(a1 + 40);
          if (v69[2])
          {
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
            {
              v70 = v69[2];
              if (v70)
              {
LABEL_111:
                v71 = v70 - 1;
                v72 = v69[v71 + 4];
                v69[2] = v71;
                swift_bridgeObjectRelease();

LABEL_119:
                *(_QWORD *)(a1 + 40) = v69;
                *(_QWORD *)(a1 + 16) = v72;
                return a1;
              }
LABEL_138:
              __break(1u);
              __break(1u);
              v69 = specialized _ArrayBuffer._consumeAndCreateNew()(v69);
              v73 = v69[2];
              if (v73)
                goto LABEL_118;
              __break(1u);
              v69 = *(_QWORD **)(a1 + 40);
              if (v69[2])
              {
                if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
                {
                  v73 = v69[2];
                  if (v73)
                  {
LABEL_118:
                    v74 = v73 - 1;
                    v72 = v69[v74 + 4];
                    v69[2] = v74;
                    swift_bridgeObjectRelease();

                    outlined release of TextLayoutProperties((uint64_t)&v103);
                    goto LABEL_119;
                  }
LABEL_115:
                  __break(1u);
                  v69 = *(_QWORD **)(a1 + 40);
                  if (v69[2])
                  {
                    if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
                    {
                      v73 = v69[2];
                      if (v73)
                        goto LABEL_118;
LABEL_145:
                      __break(1u);
                    }
                  }
                  else
                  {
                    __break(1u);
                  }
                  v69 = specialized _ArrayBuffer._consumeAndCreateNew()(v69);
                  v73 = v69[2];
                  if (v73)
                    goto LABEL_118;
                  goto LABEL_145;
                }
              }
              else
              {
                __break(1u);
              }
              v69 = specialized _ArrayBuffer._consumeAndCreateNew()(v69);
              v73 = v69[2];
              if (v73)
                goto LABEL_118;
              goto LABEL_115;
            }
          }
          else
          {
            __break(1u);
          }
          v69 = specialized _ArrayBuffer._consumeAndCreateNew()(v69);
          v70 = v69[2];
          if (v70)
            goto LABEL_111;
          goto LABEL_138;
        }
        v24 = *(_QWORD *)(a1 + 8) + v23;
        if (v7 < v24)
          goto LABEL_100;
        *(_QWORD *)(a1 + 16) = v24;
        v83 = 0u;
        v84 = 0u;
        closure #1 in EdgeInsets.init(from:)((unint64_t)&v83, (_QWORD *)a1, &v80);
        v25 = *(_QWORD **)(a1 + 40);
        if (!v25[2])
          goto LABEL_127;
        v10 = *((double *)&v83 + 1);
        v9 = *(double *)&v83;
        v12 = *((double *)&v84 + 1);
        v11 = *(double *)&v84;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v25 = specialized _ArrayBuffer._consumeAndCreateNew()(v25);
        v26 = v25[2];
        if (!v26)
          goto LABEL_130;
LABEL_46:
        v32 = v26 - 1;
        v33 = v25[v32 + 4];
        v25[2] = v32;
        *(_QWORD *)(a1 + 40) = v25;
        *(_QWORD *)(a1 + 16) = v33;
LABEL_87:
        v93 = v107;
        v94 = *(_OWORD *)v108;
        v95[0] = *(_OWORD *)&v108[16];
        *(_OWORD *)((char *)v95 + 9) = *(_OWORD *)&v108[25];
        v89 = v103;
        v90 = v104;
        v38 = v105;
        v39 = v106;
LABEL_88:
        v91 = v38;
        v92 = v39;
LABEL_89:
        v6 = *(_QWORD *)(a1 + 8);
        v7 = *(_QWORD *)(a1 + 16);
        if (v6 < v7)
        {
          v107 = v93;
          *(_OWORD *)v108 = v94;
          *(_OWORD *)&v108[16] = v95[0];
          *(_OWORD *)&v108[25] = *(_OWORD *)((char *)v95 + 9);
          v103 = v89;
          v104 = v90;
          v105 = v91;
          v106 = v92;
          v13 = *(_QWORD *)(a1 + 24);
          if (!v13)
            continue;
LABEL_9:
          v14 = *(_QWORD *)(a1 + 32);
          if (v6 < v14)
            goto LABEL_14;
          if (v14 < v6)
            goto LABEL_100;
          *(_QWORD *)(a1 + 24) = 0;
          continue;
        }
        *(_QWORD *)(a1 + 24) = 0;
        v100 = v93;
        v101 = v94;
        v102[0] = v95[0];
        *(_OWORD *)((char *)v102 + 9) = *(_OWORD *)((char *)v95 + 9);
        v96 = v89;
        v97 = v90;
        v98 = v91;
        v99 = v92;
        if (v8)
        {
          v93 = v100;
          v94 = v101;
          v95[0] = v102[0];
          *(_OWORD *)((char *)v95 + 9) = *(_OWORD *)((char *)v102 + 9);
          v89 = v96;
          v90 = v97;
          v91 = v98;
          v92 = v99;
          v109[0] = v77;
          v109[1] = v76;
          v110 = 0;
          v82 = 513;
          v81 = v78;
          *(_QWORD *)v85 = 0;
          v83 = 0u;
          v84 = 0u;
          *(_OWORD *)&v85[8] = xmmword_235260F00;
          v63 = MEMORY[0x24BEE4AF8];
          v80 = MEMORY[0x24BEE4AF8];
          v64 = v8;
          a1 = specialized static ResolvedStyledText.styledText(storage:layoutProperties:layoutMargins:stylePadding:archiveOptions:isCollapsible:features:suffix:attachments:styles:transitions:scaleFactorOverride:)(v8, &v89, (uint64_t)v109, (char *)&v82, 0, &v81, (uint64_t)&v83, &v80, v9, v10, v11, v12, v65, v66, v67, v68, v63, (uint64_t)v79, 0.0,
                 1);

          swift_bridgeObjectRelease();
          outlined release of TextLayoutProperties((uint64_t)&v96);
          return a1;
        }
        swift_bridgeObjectRelease();
        outlined release of TextLayoutProperties((uint64_t)&v96);
LABEL_99:
        lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
        swift_allocError();
        swift_willThrow();
        return a1;
      case 3uLL:
        if ((v13 & 7) != 2)
          goto LABEL_100;
        v27 = *(_QWORD **)(a1 + 40);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v27 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v27[2] + 1, 1, v27);
        v29 = v27[2];
        v28 = v27[3];
        if (v29 >= v28 >> 1)
          v27 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v28 > 1), v29 + 1, 1, v27);
        v27[2] = v29 + 1;
        v27[v29 + 4] = v7;
        *(_QWORD *)(a1 + 40) = v27;
        v30 = ProtobufDecoder.decodeVarint()();
        if (v2)
          goto LABEL_101;
        if (v30 < 0)
          goto LABEL_121;
        v31 = *(_QWORD *)(a1 + 8) + v30;
        if (v7 < v31)
          goto LABEL_100;
        *(_QWORD *)(a1 + 16) = v31;
        v83 = 0u;
        v84 = 0u;
        closure #1 in EdgeInsets.init(from:)((unint64_t)&v83, (_QWORD *)a1, &v80);
        v25 = *(_QWORD **)(a1 + 40);
        if (!v25[2])
          goto LABEL_128;
        v76 = v84;
        v77 = v83;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v25 = specialized _ArrayBuffer._consumeAndCreateNew()(v25);
        v26 = v25[2];
        if (v26)
          goto LABEL_46;
        goto LABEL_131;
      case 5uLL:
        outlined release of TextLayoutProperties((uint64_t)&v103);
        if ((v13 & 7) != 2)
        {
          lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
          swift_allocError();
          swift_willThrow();
LABEL_107:
          swift_bridgeObjectRelease();

          return a1;
        }
        ProtobufDecoder.beginMessage()();
        if (v2)
          goto LABEL_107;
        TextLayoutProperties.init(from:)((_QWORD *)a1, (uint64_t)&v83);
        v2 = 0;
        v34 = *(_QWORD **)(a1 + 40);
        if (!v34[2])
          goto LABEL_124;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
        {
          v35 = v34[2];
          if (!v35)
            goto LABEL_126;
        }
        else
        {
          v34 = specialized _ArrayBuffer._consumeAndCreateNew()(v34);
          v35 = v34[2];
          if (!v35)
            goto LABEL_126;
        }
        v36 = v35 - 1;
        v37 = v34[v36 + 4];
        v34[2] = v36;
        *(_QWORD *)(a1 + 40) = v34;
        *(_QWORD *)(a1 + 16) = v37;
        v93 = v86;
        v94 = v87;
        v95[0] = v88[0];
        *(_OWORD *)((char *)v95 + 9) = *(_OWORD *)((char *)v88 + 9);
        v89 = v83;
        v90 = v84;
        v38 = *(_OWORD *)v85;
        v39 = *(_OWORD *)&v85[16];
        goto LABEL_88;
      case 6uLL:
        if ((v13 & 7) != 2)
          goto LABEL_100;
        v40 = *(_QWORD **)(a1 + 40);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v40 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v40[2] + 1, 1, v40);
        v42 = v40[2];
        v41 = v40[3];
        if (v42 >= v41 >> 1)
          v40 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v41 > 1), v42 + 1, 1, v40);
        v40[2] = v42 + 1;
        v40[v42 + 4] = v7;
        *(_QWORD *)(a1 + 40) = v40;
        v43 = ProtobufDecoder.decodeVarint()();
        if (v2)
          goto LABEL_101;
        if (v43 < 0)
          goto LABEL_122;
        v44 = *(_QWORD *)(a1 + 8) + v43;
        if (v7 < v44)
          goto LABEL_100;
        *(_QWORD *)(a1 + 16) = v44;
        ContentTransition.init(from:)(a1, (uint64_t)&v83);
        v45 = *(_QWORD **)(a1 + 40);
        if (!v45[2])
          goto LABEL_129;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
        {
          v46 = v45[2];
          if (!v46)
            goto LABEL_132;
        }
        else
        {
          v45 = specialized _ArrayBuffer._consumeAndCreateNew()(v45);
          v46 = v45[2];
          if (!v46)
            goto LABEL_132;
        }
        v47 = v46 - 1;
        v48 = v45[v47 + 4];
        v45[2] = v47;
        *(_QWORD *)(a1 + 40) = v45;
        *(_QWORD *)(a1 + 16) = v48;
        v49 = v83;
        v50 = BYTE12(v83);
        v51 = DWORD2(v83);
        v52 = BYTE13(v83);
        v53 = BYTE14(v83);
        v75 = v8;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v79 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v79[2] + 1, 1, v79);
        v55 = v79[2];
        v54 = v79[3];
        if (v55 >= v54 >> 1)
          v79 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v54 > 1), v55 + 1, 1, v79);
        v79[2] = v55 + 1;
        v56 = &v79[2 * v55];
        v56[4] = v49;
        *((_DWORD *)v56 + 10) = v51;
        *((_BYTE *)v56 + 44) = (v51 | (unint64_t)(v50 << 32)) >> 32;
        *((_BYTE *)v56 + 45) = v52;
        *((_BYTE *)v56 + 46) = v53;
        v89 = v103;
        v90 = v104;
        v91 = v105;
        v92 = v106;
        v93 = v107;
        v94 = *(_OWORD *)v108;
        v95[0] = *(_OWORD *)&v108[16];
        *(_OWORD *)((char *)v95 + 9) = *(_OWORD *)&v108[25];
        v8 = v75;
        goto LABEL_89;
      case 7uLL:
        if ((v13 & 7) == 0)
          goto LABEL_78;
        if ((v13 & 7) != 2)
          goto LABEL_100;
        v57 = ProtobufDecoder.decodeVarint()();
        if (v2)
          goto LABEL_101;
        if (v57 < 0)
          goto LABEL_133;
        v58 = *(_QWORD *)(a1 + 8) + v57;
        if (v7 < v58)
          goto LABEL_100;
        *(_QWORD *)(a1 + 24) = 56;
        *(_QWORD *)(a1 + 32) = v58;
LABEL_78:
        v59 = ProtobufDecoder.decodeVarint()();
        if (v2)
          goto LABEL_101;
        v78 = v59;
        goto LABEL_87;
      default:
        switch(v13 & 7)
        {
          case 0uLL:
            ProtobufDecoder.decodeVarint()();
            if (v2)
              goto LABEL_101;
            goto LABEL_87;
          case 1uLL:
            v60 = *(_QWORD *)(a1 + 8) + 8;
            goto LABEL_85;
          case 2uLL:
            v61 = ProtobufDecoder.decodeVarint()();
            if (v2)
              goto LABEL_101;
            if (v61 < 0)
              goto LABEL_134;
            v60 = *(_QWORD *)(a1 + 8) + v61;
LABEL_85:
            if (v7 < v60)
              goto LABEL_100;
            *(_QWORD *)(a1 + 8) = v60;
            break;
          case 5uLL:
            v60 = *(_QWORD *)(a1 + 8) + 4;
            goto LABEL_85;
          default:
            goto LABEL_100;
        }
        goto LABEL_87;
    }
  }
}

uint64_t specialized static ResolvedStyledText.styledText(storage:stylePadding:environment:archiveOptions:isCollapsible:features:suffix:attachments:styles:transitions:writingMode:sizeFitting:)(void *a1, unint64_t *a2, char *a3, char a4, __int16 *a5, __int128 *a6, uint64_t *a7, uint64_t a8, double a9, double a10, double a11, double a12, uint64_t a13, unsigned __int8 *a14, char a15)
{
  unint64_t v19;
  char v20;
  char v21;
  __int16 v22;
  uint64_t v23;
  int v24;
  double v25;
  double v26;
  double v27;
  double v28;
  char v29;
  char v30;
  uint64_t v31;
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  uint64_t v40;
  _OWORD v41[3];
  uint64_t v42;
  __int16 v43;
  char v44[2];
  __int128 v45;
  uint64_t v46;
  char v47;
  __int16 v48;
  __int16 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  char v53;
  __int128 v54;
  char v55;
  uint64_t v56;
  char v57;
  char v58;
  char v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  _BYTE v65[41];
  _OWORD v66[5];
  __int128 v67;
  _OWORD v68[2];
  _BYTE v69[64];

  v19 = *a2;
  v20 = *a3;
  v21 = a3[1];
  v22 = *a5;
  v35 = a6[1];
  v36 = *a6;
  v34 = a6[2];
  v23 = *((_QWORD *)a6 + 6);
  v33 = *a7;
  v24 = *a14;
  if (a2[1])
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.derivedValue<A>(_:for:)(v19, v66);
    swift_release_n();
    swift_release_n();
  }
  else
  {
    v60 = *a2;
    swift_retain();
    TextLayoutProperties.init(from:)((uint64_t *)&v60, (uint64_t)v66);
  }
  *(_OWORD *)&v65[25] = *(_OWORD *)((char *)v68 + 9);
  v64 = v66[4];
  *(_OWORD *)v65 = v67;
  *(_OWORD *)&v65[16] = v68[0];
  v60 = v66[0];
  v61 = v66[1];
  v62 = v66[2];
  v63 = v66[3];
  v29 = v67;
  if (v24 != 2)
    v29 = v24;
  if ((a15 & 1) != 0)
    v30 = 2;
  else
    v30 = 0;
  v59 = BYTE8(v60);
  v58 = BYTE8(v61);
  *(_QWORD *)&v45 = v60;
  BYTE8(v45) = BYTE8(v60);
  v46 = v61;
  v47 = BYTE8(v61);
  v48 = *(_WORD *)((char *)&v61 + 9);
  v49 = *(_WORD *)((char *)&v61 + 11);
  v50 = v62;
  v51 = v63;
  v52 = v64;
  v53 = v29 & 1;
  v54 = *(_OWORD *)&v65[8];
  v55 = v65[24];
  v56 = *(_QWORD *)&v65[32];
  v57 = v65[40] & 0xFD | v30;
  memset(v69, 0, 32);
  v69[32] = 1;
  v44[0] = v20;
  v44[1] = v21;
  v43 = v22;
  v41[0] = v36;
  v41[1] = v35;
  v41[2] = v34;
  v42 = v23;
  v40 = v33;
  v31 = specialized static ResolvedStyledText.styledText(storage:layoutProperties:layoutMargins:stylePadding:archiveOptions:isCollapsible:features:suffix:attachments:styles:transitions:scaleFactorOverride:)(a1, &v45, (uint64_t)v69, v44, a4 & 1, &v43, (uint64_t)v41, &v40, a9, a10, a11, a12, v25, v26, v27, v28, a8, a13, 0.0,
          1);
  outlined release of TextLayoutProperties((uint64_t)&v60);
  return v31;
}

void _s10Foundation4DateVSgMaTm_0(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(uint64_t), uint64_t (*a5)(uint64_t, uint64_t))
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;

  if (!*a2)
  {
    v8 = a4(a3);
    v9 = a5(a1, v8);
    if (!v10)
      atomic_store(v9, a2);
  }
}

unint64_t lazy protocol witness table accessor for type StyledTextResponderFilter and conformance StyledTextResponderFilter()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type StyledTextResponderFilter and conformance StyledTextResponderFilter;
  if (!lazy protocol witness table cache variable for type StyledTextResponderFilter and conformance StyledTextResponderFilter)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for StyledTextResponderFilter, &type metadata for StyledTextResponderFilter);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StyledTextResponderFilter and conformance StyledTextResponderFilter);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type TextLayoutQuery and conformance TextLayoutQuery()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TextLayoutQuery and conformance TextLayoutQuery;
  if (!lazy protocol witness table cache variable for type TextLayoutQuery and conformance TextLayoutQuery)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for TextLayoutQuery, &unk_25061F808);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TextLayoutQuery and conformance TextLayoutQuery);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type StyledTextLayoutComputer and conformance StyledTextLayoutComputer()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type StyledTextLayoutComputer and conformance StyledTextLayoutComputer;
  if (!lazy protocol witness table cache variable for type StyledTextLayoutComputer and conformance StyledTextLayoutComputer)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for StyledTextLayoutComputer, &unk_250639AC8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StyledTextLayoutComputer and conformance StyledTextLayoutComputer);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type StyledTextContentView.ArchivedTransitionEnvironment and conformance StyledTextContentView.ArchivedTransitionEnvironment()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type StyledTextContentView.ArchivedTransitionEnvironment and conformance StyledTextContentView.ArchivedTransitionEnvironment;
  if (!lazy protocol witness table cache variable for type StyledTextContentView.ArchivedTransitionEnvironment and conformance StyledTextContentView.ArchivedTransitionEnvironment)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for StyledTextContentView.ArchivedTransitionEnvironment, &unk_250633680);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StyledTextContentView.ArchivedTransitionEnvironment and conformance StyledTextContentView.ArchivedTransitionEnvironment);
  }
  return result;
}

uint64_t sub_234D2A070()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t sub_234D2A09C()
{
  return swift_deallocObject();
}

uint64_t sub_234D2A0B0()
{
  return swift_deallocObject();
}

uint64_t sub_234D2A0C0()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

void partial apply for closure #1 in ResolvedStyledText.cgStyleHandler.getter(uint64_t a1, unint64_t a2)
{
  uint64_t v2;

  closure #1 in ResolvedStyledText.cgStyleHandler.getter(a1, a2, *(_QWORD *)(v2 + 16), *(unsigned __int8 *)(v2 + 24), *(_BYTE *)(v2 + 25));
}

void type metadata accessor for AtomicBuffer<NSStringDrawingContext>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  if (!lazy cache variable for type metadata for AtomicBuffer<NSStringDrawingContext>)
  {
    v2 = type metadata accessor for CAPresentationModifier(255, (unint64_t *)&lazy cache variable for type metadata for NSStringDrawingContext);
    v5 = type metadata accessor for AtomicBuffer(a1, v2, v3, v4);
    if (!v6)
      atomic_store(v5, (unint64_t *)&lazy cache variable for type metadata for AtomicBuffer<NSStringDrawingContext>);
  }
}

uint64_t associated type witness table accessor for View.Body : View in AccessibilityStyledTextContentView<A>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_234D2A18C@<X0>(uint64_t result@<X0>, _BYTE *a2@<X8>)
{
  *a2 = *(_BYTE *)(result + 120) & 1;
  return result;
}

_BYTE *sub_234D2A19C(_BYTE *result, uint64_t a2)
{
  *(_BYTE *)(a2 + 120) = *(_BYTE *)(a2 + 120) & 0xFE | *result;
  return result;
}

uint64_t sub_234D2A1B4@<X0>(uint64_t result@<X0>, BOOL *a2@<X8>)
{
  *a2 = (*(_BYTE *)(result + 120) & 2) != 0;
  return result;
}

_BYTE *sub_234D2A1C4(_BYTE *result, uint64_t a2)
{
  char v2;

  if (*result)
    v2 = 2;
  else
    v2 = 0;
  *(_BYTE *)(a2 + 120) = *(_BYTE *)(a2 + 120) & 0xFD | v2;
  return result;
}

uint64_t sub_234D2A1E8@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t result;
  char v5;

  v3 = *a1;
  result = swift_beginAccess();
  v5 = *(_BYTE *)(v3 + 184);
  *(_QWORD *)a2 = *(_QWORD *)(v3 + 176);
  *(_BYTE *)(a2 + 8) = v5;
  return result;
}

uint64_t sub_234D2A234(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *a1;
  v3 = *((_BYTE *)a1 + 8);
  v4 = *a2;
  v5 = swift_beginAccess();
  *(_QWORD *)(v4 + 176) = v2;
  *(_BYTE *)(v4 + 184) = v3;
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 168))(v5);
}

uint64_t destroy for AccessibilityStyledTextContentView(uint64_t a1)
{
  swift_release();
  outlined consume of Text.Storage(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_BYTE *)(a1 + 24));
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t initializeWithCopy for AccessibilityStyledTextContentView(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_BYTE *)(a2 + 24);
  swift_retain();
  outlined copy of Text.Storage(v4, v5, v6);
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_BYTE *)(a1 + 24) = v6;
  v7 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v7;
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for AccessibilityStyledTextContentView(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  char v9;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_retain();
  swift_release();
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_BYTE *)(a2 + 24);
  outlined copy of Text.Storage(v4, v5, v6);
  v7 = *(_QWORD *)(a1 + 8);
  v8 = *(_QWORD *)(a1 + 16);
  v9 = *(_BYTE *)(a1 + 24);
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_BYTE *)(a1 + 24) = v6;
  outlined consume of Text.Storage(v7, v8, v9);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_retain();
  swift_release();
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  return a1;
}

uint64_t assignWithTake for AccessibilityStyledTextContentView(uint64_t a1, uint64_t a2)
{
  char v4;
  uint64_t v5;
  uint64_t v6;
  char v7;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_release();
  v4 = *(_BYTE *)(a2 + 24);
  v5 = *(_QWORD *)(a1 + 8);
  v6 = *(_QWORD *)(a1 + 16);
  v7 = *(_BYTE *)(a1 + 24);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 24) = v4;
  outlined consume of Text.Storage(v5, v6, v7);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  swift_release();
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  return a1;
}

uint64_t getEnumTagSinglePayload for AccessibilityStyledTextContentView(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 49))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AccessibilityStyledTextContentView(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 48) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 49) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 49) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t type metadata accessor for AccessibilityStyledTextContentView(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AccessibilityStyledTextContentView);
}

uint64_t initializeBufferWithCopyOfBuffer for StyledTextContentView(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for StyledTextContentView(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_retain();
  swift_release();
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  return a1;
}

uint64_t assignWithTake for StyledTextContentView(uint64_t a1, uint64_t a2)
{
  swift_release();
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release();
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  return a1;
}

ValueMetadata *type metadata accessor for StyledTextContentView()
{
  return &type metadata for StyledTextContentView;
}

uint64_t destroy for TextLayoutProperties()
{
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for TextLayoutProperties(uint64_t a1, uint64_t a2)
{
  __int128 v3;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_WORD *)(a1 + 25) = *(_WORD *)(a2 + 25);
  *(_BYTE *)(a1 + 27) = *(_BYTE *)(a2 + 27);
  *(_BYTE *)(a1 + 28) = *(_BYTE *)(a2 + 28);
  v3 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v3;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for TextLayoutProperties(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *a2;
  *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
  *(_QWORD *)a1 = v4;
  v5 = a2[2];
  *(_BYTE *)(a1 + 24) = *((_BYTE *)a2 + 24);
  *(_QWORD *)(a1 + 16) = v5;
  *(_BYTE *)(a1 + 25) = *((_BYTE *)a2 + 25);
  *(_BYTE *)(a1 + 26) = *((_BYTE *)a2 + 26);
  *(_BYTE *)(a1 + 27) = *((_BYTE *)a2 + 27);
  *(_BYTE *)(a1 + 28) = *((_BYTE *)a2 + 28);
  *(_QWORD *)(a1 + 32) = a2[4];
  *(_QWORD *)(a1 + 40) = a2[5];
  *(_QWORD *)(a1 + 48) = a2[6];
  *(_QWORD *)(a1 + 56) = a2[7];
  *(_QWORD *)(a1 + 64) = a2[8];
  *(_QWORD *)(a1 + 72) = a2[9];
  *(_BYTE *)(a1 + 80) = *((_BYTE *)a2 + 80);
  *(_QWORD *)(a1 + 88) = a2[11];
  *(_QWORD *)(a1 + 96) = a2[12];
  *(_BYTE *)(a1 + 104) = *((_BYTE *)a2 + 104);
  *(_QWORD *)(a1 + 112) = a2[14];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 120) = *((_BYTE *)a2 + 120);
  return a1;
}

__n128 __swift_memcpy121_8(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __n128 result;
  __int128 v6;
  __int128 v7;

  v2 = *a2;
  v3 = a2[1];
  v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  result = (__n128)a2[4];
  v6 = a2[5];
  v7 = a2[6];
  *(_OWORD *)(a1 + 105) = *(__int128 *)((char *)a2 + 105);
  *(_OWORD *)(a1 + 80) = v6;
  *(_OWORD *)(a1 + 96) = v7;
  *(__n128 *)(a1 + 64) = result;
  return result;
}

uint64_t assignWithTake for TextLayoutProperties(uint64_t a1, uint64_t a2)
{
  __int128 v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_WORD *)(a1 + 25) = *(_WORD *)(a2 + 25);
  *(_BYTE *)(a1 + 27) = *(_BYTE *)(a2 + 27);
  *(_BYTE *)(a1 + 28) = *(_BYTE *)(a2 + 28);
  v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
  return a1;
}

uint64_t getEnumTagSinglePayload for TextLayoutProperties(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 121))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 112);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for TextLayoutProperties(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 120) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 121) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 112) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 121) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for TextLayoutProperties()
{
  return &type metadata for TextLayoutProperties;
}

uint64_t method lookup function for ResolvedStyledText()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of ResolvedStyledText.resetCache()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 168))();
}

uint64_t dispatch thunk of ResolvedStyledText.drawingMargins.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 176))();
}

uint64_t dispatch thunk of ResolvedStyledText.__allocating_init(storage:layoutProperties:layoutMargins:stylePadding:archiveOptions:isCollapsible:features:suffix:attachments:styles:transitions:scaleFactorOverride:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  char v4;
  uint64_t (*v5)(uint64_t, uint64_t, _OWORD *);
  __int128 v6;
  _OWORD v8[2];
  char v9;

  v4 = *(_BYTE *)(a3 + 32);
  v5 = *(uint64_t (**)(uint64_t, uint64_t, _OWORD *))(v3 + 184);
  v6 = *(_OWORD *)(a3 + 16);
  v8[0] = *(_OWORD *)a3;
  v8[1] = v6;
  v9 = v4;
  return v5(a1, a2, v8);
}

uint64_t dispatch thunk of ResolvedStyledText.lineHeightScalingAdjustment(lineHeightMultiple:maximumLineHeight:minimumLineHeight:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 192))();
}

uint64_t dispatch thunk of ResolvedStyledText.majorAxis.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 200))() & 1;
}

uint64_t dispatch thunk of ResolvedStyledText.drawingScale(size:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 208))();
}

uint64_t dispatch thunk of ResolvedStyledText.spacing()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 216))();
}

uint64_t dispatch thunk of ResolvedStyledText.sizeThatFits(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 224))();
}

uint64_t dispatch thunk of ResolvedStyledText.size(in:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 232))();
}

uint64_t dispatch thunk of ResolvedStyledText.frameSize(in:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 240))();
}

uint64_t dispatch thunk of ResolvedStyledText.size(in:context:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 264))();
}

uint64_t dispatch thunk of ResolvedStyledText.explicitAlignment(_:at:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 272))();
}

uint64_t dispatch thunk of ResolvedStyledText.linkURL(at:in:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 280))();
}

uint64_t dispatch thunk of ResolvedStyledText.draw(in:with:applyingMarginOffsets:containsResolvable:context:renderer:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 288))();
}

uint64_t dispatch thunk of ResolvedStyledText.layoutValue(in:with:applyingMarginOffsets:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 296))();
}

uint64_t type metadata accessor for TextDrawingContext()
{
  return objc_opt_self();
}

uint64_t method lookup function for TextDrawingContext()
{
  return swift_lookUpClassMethod();
}

uint64_t sub_234D2AA64()
{
  swift_getAssociatedTypeWitness();
  return swift_getAssociatedConformanceWitness();
}

ValueMetadata *type metadata accessor for CodableResolvedStyledText()
{
  return &type metadata for CodableResolvedStyledText;
}

void *type metadata accessor for TextLayoutProperties.Flags()
{
  return &unk_250630BF0;
}

uint64_t initializeWithCopy for DynamicTextViewFactory(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for DynamicTextViewFactory(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  return a1;
}

uint64_t assignWithTake for DynamicTextViewFactory(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_release();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  return a1;
}

uint64_t getEnumTagSinglePayload for DynamicTextViewFactory(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 28))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for DynamicTextViewFactory(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_DWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 28) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 28) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for DynamicTextViewFactory()
{
  return &type metadata for DynamicTextViewFactory;
}

void *type metadata accessor for StyledTextContentView.ArchivedTransitionEnvironment()
{
  return &unk_250633680;
}

void *type metadata accessor for StyledTextLayoutComputer()
{
  return &unk_250639AC8;
}

void *type metadata accessor for TextLayoutQuery()
{
  return &unk_25061F808;
}

void *type metadata accessor for Text.MakeRepresentableContext()
{
  return &unk_250645DB0;
}

_QWORD *initializeBufferWithCopyOfBuffer for ResolvedTextHelper.NextUpdate(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;

  v5 = *(_QWORD *)(a3 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    v13 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v13 + ((v6 + 16) & ~(unint64_t)v6));
    swift_retain();
  }
  else if (swift_getEnumCaseMultiPayload() == 1)
  {
    *a1 = *a2;
    type metadata accessor for (lastTime: Time, lastDate: Date, reduceFrequency: Bool, resolved: ResolvedStyledText)();
    v8 = v7;
    v9 = *(int *)(v7 + 48);
    v10 = (char *)a1 + v9;
    v11 = (char *)a2 + v9;
    v12 = type metadata accessor for Date();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(v10, v11, v12);
    *((_BYTE *)a1 + *(int *)(v8 + 64)) = *((_BYTE *)a2 + *(int *)(v8 + 64));
    *(_QWORD *)((char *)a1 + *(int *)(v8 + 80)) = *(_QWORD *)((char *)a2 + *(int *)(v8 + 80));
    swift_retain();
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(v5 + 64));
  }
  return a1;
}

uint64_t destroy for ResolvedTextHelper.NextUpdate(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  result = swift_getEnumCaseMultiPayload();
  if ((_DWORD)result == 1)
  {
    type metadata accessor for (lastTime: Time, lastDate: Date, reduceFrequency: Bool, resolved: ResolvedStyledText)();
    v4 = a1 + *(int *)(v3 + 48);
    v5 = type metadata accessor for Date();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
    return swift_release();
  }
  return result;
}

_QWORD *initializeWithCopy for ResolvedTextHelper.NextUpdate(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;

  if (swift_getEnumCaseMultiPayload() == 1)
  {
    *a1 = *a2;
    type metadata accessor for (lastTime: Time, lastDate: Date, reduceFrequency: Bool, resolved: ResolvedStyledText)();
    v7 = v6;
    v8 = *(int *)(v6 + 48);
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = type metadata accessor for Date();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
    *((_BYTE *)a1 + *(int *)(v7 + 64)) = *((_BYTE *)a2 + *(int *)(v7 + 64));
    *(_QWORD *)((char *)a1 + *(int *)(v7 + 80)) = *(_QWORD *)((char *)a2 + *(int *)(v7 + 80));
    swift_retain();
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  return a1;
}

_QWORD *assignWithCopy for ResolvedTextHelper.NextUpdate(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;

  if (a1 != a2)
  {
    outlined destroy of TypesettingConfiguration((uint64_t)a1, type metadata accessor for ResolvedTextHelper.NextUpdate);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      *a1 = *a2;
      type metadata accessor for (lastTime: Time, lastDate: Date, reduceFrequency: Bool, resolved: ResolvedStyledText)();
      v7 = v6;
      v8 = *(int *)(v6 + 48);
      v9 = (char *)a1 + v8;
      v10 = (char *)a2 + v8;
      v11 = type metadata accessor for Date();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
      *((_BYTE *)a1 + *(int *)(v7 + 64)) = *((_BYTE *)a2 + *(int *)(v7 + 64));
      *(_QWORD *)((char *)a1 + *(int *)(v7 + 80)) = *(_QWORD *)((char *)a2 + *(int *)(v7 + 80));
      swift_retain();
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    }
  }
  return a1;
}

_QWORD *initializeWithTake for ResolvedTextHelper.NextUpdate(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;

  if (swift_getEnumCaseMultiPayload() == 1)
  {
    *a1 = *a2;
    type metadata accessor for (lastTime: Time, lastDate: Date, reduceFrequency: Bool, resolved: ResolvedStyledText)();
    v7 = v6;
    v8 = *(int *)(v6 + 48);
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = type metadata accessor for Date();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v9, v10, v11);
    *((_BYTE *)a1 + *(int *)(v7 + 64)) = *((_BYTE *)a2 + *(int *)(v7 + 64));
    *(_QWORD *)((char *)a1 + *(int *)(v7 + 80)) = *(_QWORD *)((char *)a2 + *(int *)(v7 + 80));
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  return a1;
}

_QWORD *assignWithTake for ResolvedTextHelper.NextUpdate(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;

  if (a1 != a2)
  {
    outlined destroy of TypesettingConfiguration((uint64_t)a1, type metadata accessor for ResolvedTextHelper.NextUpdate);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      *a1 = *a2;
      type metadata accessor for (lastTime: Time, lastDate: Date, reduceFrequency: Bool, resolved: ResolvedStyledText)();
      v7 = v6;
      v8 = *(int *)(v6 + 48);
      v9 = (char *)a1 + v8;
      v10 = (char *)a2 + v8;
      v11 = type metadata accessor for Date();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v9, v10, v11);
      *((_BYTE *)a1 + *(int *)(v7 + 64)) = *((_BYTE *)a2 + *(int *)(v7 + 64));
      *(_QWORD *)((char *)a1 + *(int *)(v7 + 80)) = *(_QWORD *)((char *)a2 + *(int *)(v7 + 80));
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    }
  }
  return a1;
}

uint64_t type metadata completion function for ResolvedTextHelper.NextUpdate()
{
  uint64_t result;
  unint64_t v1;
  char v2;
  uint64_t v3;
  char *v4;

  v3 = MEMORY[0x24BEE0178] + 64;
  result = type metadata accessor for Date();
  if (v1 <= 0x3F)
  {
    swift_getTupleTypeLayout();
    v4 = &v2;
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for ResolvedTextHelper(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t Update;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;

  v4 = a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v11 = *a2;
    *(_QWORD *)v4 = *a2;
    v4 = v11 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    *(_DWORD *)a1 = *(_DWORD *)a2;
    *(_QWORD *)(a1 + 4) = *(uint64_t *)((char *)a2 + 4);
    *(_WORD *)(a1 + 12) = *((_WORD *)a2 + 6);
    *(_DWORD *)(a1 + 14) = *(_DWORD *)((char *)a2 + 14);
    *(_BYTE *)(a1 + 18) = *((_BYTE *)a2 + 18);
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 3);
    *(_QWORD *)(a1 + 40) = a2[5];
    v7 = a2[9];
    swift_retain();
    if (v7)
    {
      v8 = a2[6];
      v9 = a2[7];
      v10 = *((_BYTE *)a2 + 64);
      outlined copy of Text.Storage(v8, v9, v10);
      *(_QWORD *)(v4 + 48) = v8;
      *(_QWORD *)(v4 + 56) = v9;
      *(_BYTE *)(v4 + 64) = v10;
      *(_QWORD *)(v4 + 72) = v7;
      swift_bridgeObjectRetain();
    }
    else
    {
      v12 = *((_OWORD *)a2 + 4);
      *(_OWORD *)(v4 + 48) = *((_OWORD *)a2 + 3);
      *(_OWORD *)(v4 + 64) = v12;
    }
    v13 = *(int *)(a3 + 56);
    v14 = (_QWORD *)(v4 + v13);
    v15 = (uint64_t *)((char *)a2 + v13);
    Update = type metadata accessor for ResolvedTextHelper.NextUpdate(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      *v14 = *v15;
      type metadata accessor for (lastTime: Time, lastDate: Date, reduceFrequency: Bool, resolved: ResolvedStyledText)();
      v18 = v17;
      v19 = *(int *)(v17 + 48);
      v20 = (char *)v14 + v19;
      v21 = (char *)v15 + v19;
      v22 = type metadata accessor for Date();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v22 - 8) + 16))(v20, v21, v22);
      *((_BYTE *)v14 + *(int *)(v18 + 64)) = *((_BYTE *)v15 + *(int *)(v18 + 64));
      *(_QWORD *)((char *)v14 + *(int *)(v18 + 80)) = *(_QWORD *)((char *)v15 + *(int *)(v18 + 80));
      swift_retain();
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(Update - 8) + 64));
    }
    *(_QWORD *)(v4 + *(int *)(a3 + 60)) = *(uint64_t *)((char *)a2 + *(int *)(a3 + 60));
  }
  return v4;
}

uint64_t destroy for ResolvedTextHelper(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  swift_release();
  if (*(_QWORD *)(a1 + 72))
  {
    outlined consume of Text.Storage(*(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_BYTE *)(a1 + 64));
    swift_bridgeObjectRelease();
  }
  v4 = a1 + *(int *)(a2 + 56);
  type metadata accessor for ResolvedTextHelper.NextUpdate(0);
  result = swift_getEnumCaseMultiPayload();
  if ((_DWORD)result == 1)
  {
    type metadata accessor for (lastTime: Time, lastDate: Date, reduceFrequency: Bool, resolved: ResolvedStyledText)();
    v7 = v4 + *(int *)(v6 + 48);
    v8 = type metadata accessor for Date();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
    return swift_release();
  }
  return result;
}

uint64_t initializeWithCopy for ResolvedTextHelper(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  __int128 v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t Update;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_QWORD *)(a1 + 4) = *(_QWORD *)(a2 + 4);
  *(_WORD *)(a1 + 12) = *(_WORD *)(a2 + 12);
  *(_DWORD *)(a1 + 14) = *(_DWORD *)(a2 + 14);
  *(_BYTE *)(a1 + 18) = *(_BYTE *)(a2 + 18);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  v6 = *(_QWORD *)(a2 + 72);
  swift_retain();
  if (v6)
  {
    v7 = *(_QWORD *)(a2 + 48);
    v8 = *(_QWORD *)(a2 + 56);
    v9 = *(_BYTE *)(a2 + 64);
    outlined copy of Text.Storage(v7, v8, v9);
    *(_QWORD *)(a1 + 48) = v7;
    *(_QWORD *)(a1 + 56) = v8;
    *(_BYTE *)(a1 + 64) = v9;
    *(_QWORD *)(a1 + 72) = v6;
    swift_bridgeObjectRetain();
  }
  else
  {
    v10 = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 64) = v10;
  }
  v11 = *(int *)(a3 + 56);
  v12 = (_QWORD *)(a1 + v11);
  v13 = (_QWORD *)(a2 + v11);
  Update = type metadata accessor for ResolvedTextHelper.NextUpdate(0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    *v12 = *v13;
    type metadata accessor for (lastTime: Time, lastDate: Date, reduceFrequency: Bool, resolved: ResolvedStyledText)();
    v16 = v15;
    v17 = *(int *)(v15 + 48);
    v18 = (char *)v12 + v17;
    v19 = (char *)v13 + v17;
    v20 = type metadata accessor for Date();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v20 - 8) + 16))(v18, v19, v20);
    *((_BYTE *)v12 + *(int *)(v16 + 64)) = *((_BYTE *)v13 + *(int *)(v16 + 64));
    *(_QWORD *)((char *)v12 + *(int *)(v16 + 80)) = *(_QWORD *)((char *)v13 + *(int *)(v16 + 80));
    swift_retain();
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(Update - 8) + 64));
  }
  *(_QWORD *)(a1 + *(int *)(a3 + 60)) = *(_QWORD *)(a2 + *(int *)(a3 + 60));
  return a1;
}

uint64_t assignWithCopy for ResolvedTextHelper(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _OWORD *v6;
  _OWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t Update;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(a2 + 12);
  *(_BYTE *)(a1 + 13) = *(_BYTE *)(a2 + 13);
  *(_BYTE *)(a1 + 14) = *(_BYTE *)(a2 + 14);
  *(_BYTE *)(a1 + 15) = *(_BYTE *)(a2 + 15);
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  *(_BYTE *)(a1 + 18) = *(_BYTE *)(a2 + 18);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_retain();
  swift_release();
  v6 = (_OWORD *)(a1 + 48);
  v7 = (_OWORD *)(a2 + 48);
  v8 = *(_QWORD *)(a2 + 72);
  if (*(_QWORD *)(a1 + 72))
  {
    if (v8)
    {
      v9 = *(_QWORD *)(a2 + 48);
      v10 = *(_QWORD *)(a2 + 56);
      v11 = *(_BYTE *)(a2 + 64);
      outlined copy of Text.Storage(v9, v10, v11);
      v12 = *(_QWORD *)(a1 + 48);
      v13 = *(_QWORD *)(a1 + 56);
      v14 = *(_BYTE *)(a1 + 64);
      *(_QWORD *)(a1 + 48) = v9;
      *(_QWORD *)(a1 + 56) = v10;
      *(_BYTE *)(a1 + 64) = v11;
      outlined consume of Text.Storage(v12, v13, v14);
      *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      if (a1 == a2)
        goto LABEL_14;
    }
    else
    {
      outlined destroy of Text(a1 + 48);
      v18 = *(_OWORD *)(a2 + 64);
      *v6 = *v7;
      *(_OWORD *)(a1 + 64) = v18;
      if (a1 == a2)
        goto LABEL_14;
    }
  }
  else if (v8)
  {
    v15 = *(_QWORD *)(a2 + 48);
    v16 = *(_QWORD *)(a2 + 56);
    v17 = *(_BYTE *)(a2 + 64);
    outlined copy of Text.Storage(v15, v16, v17);
    *(_QWORD *)(a1 + 48) = v15;
    *(_QWORD *)(a1 + 56) = v16;
    *(_BYTE *)(a1 + 64) = v17;
    *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
    swift_bridgeObjectRetain();
    if (a1 == a2)
      goto LABEL_14;
  }
  else
  {
    v19 = *(_OWORD *)(a2 + 64);
    *v6 = *v7;
    *(_OWORD *)(a1 + 64) = v19;
    if (a1 == a2)
      goto LABEL_14;
  }
  v20 = *(int *)(a3 + 56);
  v21 = (_QWORD *)(a1 + v20);
  v22 = (_QWORD *)(a2 + v20);
  outlined destroy of TypesettingConfiguration(a1 + v20, type metadata accessor for ResolvedTextHelper.NextUpdate);
  Update = type metadata accessor for ResolvedTextHelper.NextUpdate(0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    *v21 = *v22;
    type metadata accessor for (lastTime: Time, lastDate: Date, reduceFrequency: Bool, resolved: ResolvedStyledText)();
    v25 = v24;
    v26 = *(int *)(v24 + 48);
    v27 = (char *)v21 + v26;
    v28 = (char *)v22 + v26;
    v29 = type metadata accessor for Date();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v29 - 8) + 16))(v27, v28, v29);
    *((_BYTE *)v21 + *(int *)(v25 + 64)) = *((_BYTE *)v22 + *(int *)(v25 + 64));
    *(_QWORD *)((char *)v21 + *(int *)(v25 + 80)) = *(_QWORD *)((char *)v22 + *(int *)(v25 + 80));
    swift_retain();
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(Update - 8) + 64));
  }
LABEL_14:
  *(_QWORD *)(a1 + *(int *)(a3 + 60)) = *(_QWORD *)(a2 + *(int *)(a3 + 60));
  return a1;
}

uint64_t outlined destroy of Text(uint64_t a1)
{
  destroy for AccessibilityDataSeriesConfiguration.ValueDescription(a1);
  return a1;
}

uint64_t initializeWithTake for ResolvedTextHelper(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t Update;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_QWORD *)(a1 + 4) = *(_QWORD *)(a2 + 4);
  *(_WORD *)(a1 + 12) = *(_WORD *)(a2 + 12);
  *(_DWORD *)(a1 + 14) = *(_DWORD *)(a2 + 14);
  *(_BYTE *)(a1 + 18) = *(_BYTE *)(a2 + 18);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  v6 = *(_OWORD *)(a2 + 64);
  v7 = *(int *)(a3 + 56);
  v8 = (_QWORD *)(a1 + v7);
  v9 = (_QWORD *)(a2 + v7);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v6;
  Update = type metadata accessor for ResolvedTextHelper.NextUpdate(0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    *v8 = *v9;
    type metadata accessor for (lastTime: Time, lastDate: Date, reduceFrequency: Bool, resolved: ResolvedStyledText)();
    v12 = v11;
    v13 = *(int *)(v11 + 48);
    v14 = (char *)v8 + v13;
    v15 = (char *)v9 + v13;
    v16 = type metadata accessor for Date();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 32))(v14, v15, v16);
    *((_BYTE *)v8 + *(int *)(v12 + 64)) = *((_BYTE *)v9 + *(int *)(v12 + 64));
    *(_QWORD *)((char *)v8 + *(int *)(v12 + 80)) = *(_QWORD *)((char *)v9 + *(int *)(v12 + 80));
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(Update - 8) + 64));
  }
  *(_QWORD *)(a1 + *(int *)(a3 + 60)) = *(_QWORD *)(a2 + *(int *)(a3 + 60));
  return a1;
}

uint64_t assignWithTake for ResolvedTextHelper(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  __int128 v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t Update;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(a2 + 12);
  *(_BYTE *)(a1 + 13) = *(_BYTE *)(a2 + 13);
  *(_DWORD *)(a1 + 14) = *(_DWORD *)(a2 + 14);
  *(_BYTE *)(a1 + 18) = *(_BYTE *)(a2 + 18);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_release();
  if (!*(_QWORD *)(a1 + 72))
  {
LABEL_6:
    v11 = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 64) = v11;
    if (a1 == a2)
      goto LABEL_10;
    goto LABEL_7;
  }
  v6 = *(_QWORD *)(a2 + 72);
  if (!v6)
  {
    outlined destroy of Text(a1 + 48);
    goto LABEL_6;
  }
  v7 = *(_BYTE *)(a2 + 64);
  v8 = *(_QWORD *)(a1 + 48);
  v9 = *(_QWORD *)(a1 + 56);
  v10 = *(_BYTE *)(a1 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 64) = v7;
  outlined consume of Text.Storage(v8, v9, v10);
  *(_QWORD *)(a1 + 72) = v6;
  swift_bridgeObjectRelease();
  if (a1 == a2)
    goto LABEL_10;
LABEL_7:
  v12 = *(int *)(a3 + 56);
  v13 = (_QWORD *)(a1 + v12);
  v14 = (_QWORD *)(a2 + v12);
  outlined destroy of TypesettingConfiguration(a1 + v12, type metadata accessor for ResolvedTextHelper.NextUpdate);
  Update = type metadata accessor for ResolvedTextHelper.NextUpdate(0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    *v13 = *v14;
    type metadata accessor for (lastTime: Time, lastDate: Date, reduceFrequency: Bool, resolved: ResolvedStyledText)();
    v17 = v16;
    v18 = *(int *)(v16 + 48);
    v19 = (char *)v13 + v18;
    v20 = (char *)v14 + v18;
    v21 = type metadata accessor for Date();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v21 - 8) + 32))(v19, v20, v21);
    *((_BYTE *)v13 + *(int *)(v17 + 64)) = *((_BYTE *)v14 + *(int *)(v17 + 64));
    *(_QWORD *)((char *)v13 + *(int *)(v17 + 80)) = *(_QWORD *)((char *)v14 + *(int *)(v17 + 80));
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(Update - 8) + 64));
  }
LABEL_10:
  *(_QWORD *)(a1 + *(int *)(a3 + 60)) = *(_QWORD *)(a2 + *(int *)(a3 + 60));
  return a1;
}

uint64_t getEnumTagSinglePayload for ResolvedTextHelper()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_234D2BB9C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t Update;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 24);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    Update = type metadata accessor for ResolvedTextHelper.NextUpdate(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(Update - 8) + 48))(a1 + *(int *)(a3 + 56), a2, Update);
  }
}

uint64_t storeEnumTagSinglePayload for ResolvedTextHelper()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_234D2BC24(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t Update;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 24) = (a2 - 1);
  }
  else
  {
    Update = type metadata accessor for ResolvedTextHelper.NextUpdate(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(Update - 8) + 56))(v5 + *(int *)(a4 + 56), a2, a2, Update);
  }
  return result;
}

uint64_t type metadata completion function for ResolvedTextHelper()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for ResolvedTextHelper.NextUpdate(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for ResolvedTextFilter()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for ResolvedTextFilter()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t instantiation function for generic protocol witness table for ResolvedTextFilter(uint64_t a1)
{
  uint64_t result;

  result = lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type ResolvedTextFilter and conformance ResolvedTextFilter, type metadata accessor for ResolvedTextFilter, (uint64_t)&protocol conformance descriptor for ResolvedTextFilter);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t base witness table accessor for _AttributeBody in ResolvedTextFilter()
{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type ResolvedTextFilter and conformance ResolvedTextFilter, type metadata accessor for ResolvedTextFilter, (uint64_t)&protocol conformance descriptor for ResolvedTextFilter);
}

unint64_t instantiation function for generic protocol witness table for Text.MakeRepresentableContext(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type Text.MakeRepresentableContext and conformance Text.MakeRepresentableContext();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t instantiation function for generic protocol witness table for TextLayoutQuery(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type TextLayoutQuery and conformance TextLayoutQuery();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t instantiation function for generic protocol witness table for StyledTextLayoutComputer(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type StyledTextLayoutComputer and conformance StyledTextLayoutComputer();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t instantiation function for generic protocol witness table for StyledTextContentView.ArchivedTransitionEnvironment(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type StyledTextContentView.ArchivedTransitionEnvironment and conformance StyledTextContentView.ArchivedTransitionEnvironment();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type TextLayoutProperties.Flags and conformance TextLayoutProperties.Flags()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TextLayoutProperties.Flags and conformance TextLayoutProperties.Flags;
  if (!lazy protocol witness table cache variable for type TextLayoutProperties.Flags and conformance TextLayoutProperties.Flags)
  {
    result = MEMORY[0x23B7C9C04]("Yj<\x1B()\v", &unk_250630BF0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TextLayoutProperties.Flags and conformance TextLayoutProperties.Flags);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TextLayoutProperties.Flags and conformance TextLayoutProperties.Flags;
  if (!lazy protocol witness table cache variable for type TextLayoutProperties.Flags and conformance TextLayoutProperties.Flags)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for TextLayoutProperties.Flags, &unk_250630BF0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TextLayoutProperties.Flags and conformance TextLayoutProperties.Flags);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TextLayoutProperties.Flags and conformance TextLayoutProperties.Flags;
  if (!lazy protocol witness table cache variable for type TextLayoutProperties.Flags and conformance TextLayoutProperties.Flags)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for TextLayoutProperties.Flags, &unk_250630BF0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TextLayoutProperties.Flags and conformance TextLayoutProperties.Flags);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TextLayoutProperties.Flags and conformance TextLayoutProperties.Flags;
  if (!lazy protocol witness table cache variable for type TextLayoutProperties.Flags and conformance TextLayoutProperties.Flags)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for TextLayoutProperties.Flags, &unk_250630BF0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TextLayoutProperties.Flags and conformance TextLayoutProperties.Flags);
  }
  return result;
}

void type metadata accessor for (Date??, Date??)(uint64_t a1)
{
  type metadata accessor for (Date?, Date?)(a1, &lazy cache variable for type metadata for (Date??, Date??), type metadata accessor for Date??);
}

void type metadata accessor for (Date?, Date?)(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  unint64_t TupleTypeMetadata2;
  uint64_t v5;

  if (!*a2)
  {
    a3(255);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v5)
      atomic_store(TupleTypeMetadata2, a2);
  }
}

uint64_t type metadata accessor for ResolvedOptionalTextFilter(uint64_t a1)
{
  return type metadata accessor for TimerTimelineSchedule(a1, (uint64_t *)&type metadata singleton initialization cache for ResolvedOptionalTextFilter);
}

uint64_t _s14AttributeGraph12StatefulRuleP7SwiftUIAD14LayoutComputerV5ValueRtzrlE6update2toyqd___tAD0G6EngineRd__lFqd__yXEfU0_AD010StyledTextgH033_641995D812913A47B866B20B88782376LLV_AD0mngL0VTG5TA_0@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  v2 = *(_QWORD **)(v1 + 16);
  v3 = v2[1];
  *a1 = *v2;
  a1[1] = v3;
  swift_retain();
  return swift_retain();
}

uint64_t outlined assign with take of ResolvedTextHelper.NextUpdate(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v5;

  v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 40))(a2, a1, v5);
  return a2;
}

uint64_t objectdestroyTm_7()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for ResolvableStringResolutionContext() - 8) + 80);
  v2 = (v1 + 24) & ~v1;

  v3 = type metadata accessor for Date();
  v4 = *(_QWORD *)(v3 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(v0 + v2, 1, v3))
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v0 + v2, v3);
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_234D2C184()
{
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #2 in static Text.makeCommonAttributes(view:inputs:)()
{
  return implicit closure #2 in static Text.makeCommonAttributes(view:inputs:)();
}

double sub_234D2C19C@<D0>(uint64_t a1@<X8>)
{
  return ResolvedStyledText.schedule.getter(a1);
}

void type metadata accessor for Focus<ResolvedStyledText, TimelineSchedule?>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for Focus<ResolvedStyledText, TimelineSchedule?>)
  {
    type metadata accessor for ResolvedStyledText();
    type metadata accessor for AnyTrackedValue?(255, &lazy cache variable for type metadata for TimelineSchedule?, (unint64_t *)&lazy cache variable for type metadata for TimelineSchedule);
    v0 = type metadata accessor for Focus();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Focus<ResolvedStyledText, TimelineSchedule?>);
  }
}

uint64_t type metadata accessor for TextChildQuery(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for TextChildQuery);
}

void type metadata accessor for CharacterSet?(uint64_t a1)
{
  _s10Foundation4DateVSgMaTm_0(a1, &lazy cache variable for type metadata for CharacterSet?, 255, (uint64_t (*)(uint64_t))MEMORY[0x24BDCB750], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
}

ValueMetadata *type metadata accessor for TextLayoutProperties.Key()
{
  return &type metadata for TextLayoutProperties.Key;
}

__n128 __swift_memcpy36_4(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t getEnumTagSinglePayload for TextChildQuery(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 36))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for TextChildQuery(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_DWORD *)(result + 32) = 0;
    *(_QWORD *)result = (a2 - 1);
    *(_QWORD *)(result + 8) = 0;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 36) = v3;
  return result;
}

_QWORD *initializeBufferWithCopyOfBuffer for ResolvedTextFilter(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v3;
  int v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t Update;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;

  v3 = a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v12 = *a2;
    *v3 = *a2;
    v3 = (_QWORD *)(v12 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    *a1 = *a2;
    v5 = *(int *)(a3 + 24);
    v6 = (char *)a1 + v5;
    v7 = (char *)a2 + v5;
    *(_DWORD *)v6 = *(_DWORD *)((char *)a2 + v5);
    *(_QWORD *)(v6 + 4) = *(_QWORD *)((char *)a2 + v5 + 4);
    *((_WORD *)v6 + 6) = *(_WORD *)((char *)a2 + v5 + 12);
    *(_DWORD *)(v6 + 14) = *(_DWORD *)((char *)a2 + v5 + 14);
    v6[18] = *((_BYTE *)a2 + v5 + 18);
    *(_OWORD *)(v6 + 24) = *(_OWORD *)((char *)a2 + v5 + 24);
    *((_QWORD *)v6 + 5) = *(_QWORD *)((char *)a2 + v5 + 40);
    v8 = *(_QWORD *)((char *)a2 + v5 + 72);
    swift_retain();
    if (v8)
    {
      v9 = *((_QWORD *)v7 + 6);
      v10 = *((_QWORD *)v7 + 7);
      v11 = v7[64];
      outlined copy of Text.Storage(v9, v10, v11);
      *((_QWORD *)v6 + 6) = v9;
      *((_QWORD *)v6 + 7) = v10;
      v6[64] = v11;
      *((_QWORD *)v6 + 9) = v8;
      swift_bridgeObjectRetain();
    }
    else
    {
      v13 = *((_OWORD *)v7 + 4);
      *((_OWORD *)v6 + 3) = *((_OWORD *)v7 + 3);
      *((_OWORD *)v6 + 4) = v13;
    }
    v14 = type metadata accessor for ResolvedTextHelper(0);
    v15 = *(int *)(v14 + 56);
    v16 = &v6[v15];
    v17 = &v7[v15];
    Update = type metadata accessor for ResolvedTextHelper.NextUpdate(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      *(_QWORD *)v16 = *(_QWORD *)v17;
      type metadata accessor for (lastTime: Time, lastDate: Date, reduceFrequency: Bool, resolved: ResolvedStyledText)();
      v20 = v19;
      v21 = *(int *)(v19 + 48);
      v22 = &v16[v21];
      v23 = &v17[v21];
      v24 = type metadata accessor for Date();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v24 - 8) + 16))(v22, v23, v24);
      v16[*(int *)(v20 + 64)] = v17[*(int *)(v20 + 64)];
      *(_QWORD *)&v16[*(int *)(v20 + 80)] = *(_QWORD *)&v17[*(int *)(v20 + 80)];
      swift_retain();
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(Update - 8) + 64));
    }
    *(_QWORD *)&v6[*(int *)(v14 + 60)] = *(_QWORD *)&v7[*(int *)(v14 + 60)];
  }
  return v3;
}

uint64_t destroy for ResolvedTextFilter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1 + *(int *)(a2 + 24);
  swift_release();
  if (*(_QWORD *)(v2 + 72))
  {
    outlined consume of Text.Storage(*(_QWORD *)(v2 + 48), *(_QWORD *)(v2 + 56), *(_BYTE *)(v2 + 64));
    swift_bridgeObjectRelease();
  }
  v3 = v2 + *(int *)(type metadata accessor for ResolvedTextHelper(0) + 56);
  type metadata accessor for ResolvedTextHelper.NextUpdate(0);
  result = swift_getEnumCaseMultiPayload();
  if ((_DWORD)result == 1)
  {
    type metadata accessor for (lastTime: Time, lastDate: Date, reduceFrequency: Bool, resolved: ResolvedStyledText)();
    v6 = v3 + *(int *)(v5 + 48);
    v7 = type metadata accessor for Date();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v6, v7);
    return swift_release();
  }
  return result;
}

_QWORD *initializeWithCopy for ResolvedTextFilter(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t Update;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;

  *a1 = *a2;
  v4 = *(int *)(a3 + 24);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  *(_DWORD *)v5 = *(_DWORD *)((char *)a2 + v4);
  *(_QWORD *)(v5 + 4) = *(_QWORD *)((char *)a2 + v4 + 4);
  *((_WORD *)v5 + 6) = *(_WORD *)((char *)a2 + v4 + 12);
  *(_DWORD *)(v5 + 14) = *(_DWORD *)((char *)a2 + v4 + 14);
  v5[18] = *((_BYTE *)a2 + v4 + 18);
  *(_OWORD *)(v5 + 24) = *(_OWORD *)((char *)a2 + v4 + 24);
  *((_QWORD *)v5 + 5) = *(_QWORD *)((char *)a2 + v4 + 40);
  v7 = *(_QWORD *)((char *)a2 + v4 + 72);
  swift_retain();
  if (v7)
  {
    v8 = *((_QWORD *)v6 + 6);
    v9 = *((_QWORD *)v6 + 7);
    v10 = v6[64];
    outlined copy of Text.Storage(v8, v9, v10);
    *((_QWORD *)v5 + 6) = v8;
    *((_QWORD *)v5 + 7) = v9;
    v5[64] = v10;
    *((_QWORD *)v5 + 9) = v7;
    swift_bridgeObjectRetain();
  }
  else
  {
    v11 = *((_OWORD *)v6 + 4);
    *((_OWORD *)v5 + 3) = *((_OWORD *)v6 + 3);
    *((_OWORD *)v5 + 4) = v11;
  }
  v12 = type metadata accessor for ResolvedTextHelper(0);
  v13 = *(int *)(v12 + 56);
  v14 = &v5[v13];
  v15 = &v6[v13];
  Update = type metadata accessor for ResolvedTextHelper.NextUpdate(0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    *(_QWORD *)v14 = *(_QWORD *)v15;
    type metadata accessor for (lastTime: Time, lastDate: Date, reduceFrequency: Bool, resolved: ResolvedStyledText)();
    v18 = v17;
    v19 = *(int *)(v17 + 48);
    v20 = &v14[v19];
    v21 = &v15[v19];
    v22 = type metadata accessor for Date();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v22 - 8) + 16))(v20, v21, v22);
    v14[*(int *)(v18 + 64)] = v15[*(int *)(v18 + 64)];
    *(_QWORD *)&v14[*(int *)(v18 + 80)] = *(_QWORD *)&v15[*(int *)(v18 + 80)];
    swift_retain();
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(Update - 8) + 64));
  }
  *(_QWORD *)&v5[*(int *)(v12 + 60)] = *(_QWORD *)&v6[*(int *)(v12 + 60)];
  return a1;
}

_DWORD *assignWithCopy for ResolvedTextFilter(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  uint64_t v5;
  char *v6;
  char *v7;
  _OWORD *v8;
  _OWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t Update;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;

  *a1 = *a2;
  a1[1] = a2[1];
  v5 = *(int *)(a3 + 24);
  v6 = (char *)a1 + v5;
  v7 = (char *)a2 + v5;
  *(_DWORD *)v6 = *(_DWORD *)((char *)a2 + v5);
  *((_DWORD *)v6 + 1) = *(_DWORD *)((char *)a2 + v5 + 4);
  *((_DWORD *)v6 + 2) = *(_DWORD *)((char *)a2 + v5 + 8);
  v6[12] = *((_BYTE *)a2 + v5 + 12);
  v6[13] = *((_BYTE *)a2 + v5 + 13);
  v6[14] = *((_BYTE *)a2 + v5 + 14);
  v6[15] = *((_BYTE *)a2 + v5 + 15);
  *((_WORD *)v6 + 8) = *(_WORD *)((char *)a2 + v5 + 16);
  v6[18] = *((_BYTE *)a2 + v5 + 18);
  *(_OWORD *)(v6 + 24) = *(_OWORD *)((char *)a2 + v5 + 24);
  *((_QWORD *)v6 + 5) = *(_QWORD *)((char *)a2 + v5 + 40);
  swift_retain();
  swift_release();
  v8 = v6 + 48;
  v9 = v7 + 48;
  v10 = *((_QWORD *)v7 + 9);
  if (*((_QWORD *)v6 + 9))
  {
    if (v10)
    {
      v11 = *((_QWORD *)v7 + 6);
      v12 = *((_QWORD *)v7 + 7);
      v13 = v7[64];
      outlined copy of Text.Storage(v11, v12, v13);
      v14 = *((_QWORD *)v6 + 6);
      v15 = *((_QWORD *)v6 + 7);
      v16 = v6[64];
      *((_QWORD *)v6 + 6) = v11;
      *((_QWORD *)v6 + 7) = v12;
      v6[64] = v13;
      outlined consume of Text.Storage(v14, v15, v16);
      *((_QWORD *)v6 + 9) = *((_QWORD *)v7 + 9);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      outlined destroy of Text((uint64_t)(v6 + 48));
      v20 = *((_OWORD *)v7 + 4);
      *v8 = *v9;
      *((_OWORD *)v6 + 4) = v20;
    }
  }
  else if (v10)
  {
    v17 = *((_QWORD *)v7 + 6);
    v18 = *((_QWORD *)v7 + 7);
    v19 = v7[64];
    outlined copy of Text.Storage(v17, v18, v19);
    *((_QWORD *)v6 + 6) = v17;
    *((_QWORD *)v6 + 7) = v18;
    v6[64] = v19;
    *((_QWORD *)v6 + 9) = *((_QWORD *)v7 + 9);
    swift_bridgeObjectRetain();
  }
  else
  {
    v21 = *((_OWORD *)v7 + 4);
    *v8 = *v9;
    *((_OWORD *)v6 + 4) = v21;
  }
  v22 = type metadata accessor for ResolvedTextHelper(0);
  v23 = v22;
  if (a1 != a2)
  {
    v24 = *(int *)(v22 + 56);
    v25 = &v6[v24];
    v26 = &v7[v24];
    outlined destroy of TypesettingConfiguration((uint64_t)&v6[v24], type metadata accessor for ResolvedTextHelper.NextUpdate);
    Update = type metadata accessor for ResolvedTextHelper.NextUpdate(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      *(_QWORD *)v25 = *(_QWORD *)v26;
      type metadata accessor for (lastTime: Time, lastDate: Date, reduceFrequency: Bool, resolved: ResolvedStyledText)();
      v29 = v28;
      v30 = *(int *)(v28 + 48);
      v31 = &v25[v30];
      v32 = &v26[v30];
      v33 = type metadata accessor for Date();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v33 - 8) + 16))(v31, v32, v33);
      v25[*(int *)(v29 + 64)] = v26[*(int *)(v29 + 64)];
      *(_QWORD *)&v25[*(int *)(v29 + 80)] = *(_QWORD *)&v26[*(int *)(v29 + 80)];
      swift_retain();
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v25, v26, *(_QWORD *)(*(_QWORD *)(Update - 8) + 64));
    }
  }
  *(_QWORD *)&v6[*(int *)(v23 + 60)] = *(_QWORD *)&v7[*(int *)(v23 + 60)];
  return a1;
}

_QWORD *initializeWithTake for ResolvedTextFilter(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t Update;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;

  *a1 = *a2;
  v4 = *(int *)(a3 + 24);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  *(_DWORD *)v5 = *(_DWORD *)((char *)a2 + v4);
  *(_QWORD *)(v5 + 4) = *(_QWORD *)((char *)a2 + v4 + 4);
  *((_WORD *)v5 + 6) = *(_WORD *)((char *)a2 + v4 + 12);
  *(_DWORD *)(v5 + 14) = *(_DWORD *)((char *)a2 + v4 + 14);
  v5[18] = *((_BYTE *)a2 + v4 + 18);
  *(_OWORD *)(v5 + 24) = *(_OWORD *)((char *)a2 + v4 + 24);
  *((_QWORD *)v5 + 5) = *(_QWORD *)((char *)a2 + v4 + 40);
  v7 = *(_OWORD *)((char *)a2 + v4 + 64);
  *((_OWORD *)v5 + 3) = *(_OWORD *)((char *)a2 + v4 + 48);
  *((_OWORD *)v5 + 4) = v7;
  v8 = type metadata accessor for ResolvedTextHelper(0);
  v9 = *(int *)(v8 + 56);
  v10 = &v5[v9];
  v11 = &v6[v9];
  Update = type metadata accessor for ResolvedTextHelper.NextUpdate(0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    *(_QWORD *)v10 = *(_QWORD *)v11;
    type metadata accessor for (lastTime: Time, lastDate: Date, reduceFrequency: Bool, resolved: ResolvedStyledText)();
    v14 = v13;
    v15 = *(int *)(v13 + 48);
    v16 = &v10[v15];
    v17 = &v11[v15];
    v18 = type metadata accessor for Date();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v18 - 8) + 32))(v16, v17, v18);
    v10[*(int *)(v14 + 64)] = v11[*(int *)(v14 + 64)];
    *(_QWORD *)&v10[*(int *)(v14 + 80)] = *(_QWORD *)&v11[*(int *)(v14 + 80)];
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(Update - 8) + 64));
  }
  *(_QWORD *)&v5[*(int *)(v8 + 60)] = *(_QWORD *)&v6[*(int *)(v8 + 60)];
  return a1;
}

_QWORD *assignWithTake for ResolvedTextFilter(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t Update;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;

  *a1 = *a2;
  v5 = *(int *)(a3 + 24);
  v6 = (char *)a1 + v5;
  v7 = (char *)a2 + v5;
  *(_QWORD *)v6 = *(_QWORD *)((char *)a2 + v5);
  *((_DWORD *)v6 + 2) = *(_DWORD *)((char *)a2 + v5 + 8);
  v6[12] = *((_BYTE *)a2 + v5 + 12);
  v6[13] = *((_BYTE *)a2 + v5 + 13);
  *(_DWORD *)(v6 + 14) = *(_DWORD *)((char *)a2 + v5 + 14);
  v6[18] = *((_BYTE *)a2 + v5 + 18);
  *(_OWORD *)(v6 + 24) = *(_OWORD *)((char *)a2 + v5 + 24);
  *((_QWORD *)v6 + 5) = *(_QWORD *)((char *)a2 + v5 + 40);
  swift_release();
  if (*((_QWORD *)v6 + 9))
  {
    v8 = *((_QWORD *)v7 + 9);
    if (v8)
    {
      v9 = v7[64];
      v10 = *((_QWORD *)v6 + 6);
      v11 = *((_QWORD *)v6 + 7);
      v12 = v6[64];
      *((_OWORD *)v6 + 3) = *((_OWORD *)v7 + 3);
      v6[64] = v9;
      outlined consume of Text.Storage(v10, v11, v12);
      *((_QWORD *)v6 + 9) = v8;
      swift_bridgeObjectRelease();
      goto LABEL_6;
    }
    outlined destroy of Text((uint64_t)(v6 + 48));
  }
  v13 = *((_OWORD *)v7 + 4);
  *((_OWORD *)v6 + 3) = *((_OWORD *)v7 + 3);
  *((_OWORD *)v6 + 4) = v13;
LABEL_6:
  v14 = type metadata accessor for ResolvedTextHelper(0);
  v15 = v14;
  if (a1 != a2)
  {
    v16 = *(int *)(v14 + 56);
    v17 = &v6[v16];
    v18 = &v7[v16];
    outlined destroy of TypesettingConfiguration((uint64_t)&v6[v16], type metadata accessor for ResolvedTextHelper.NextUpdate);
    Update = type metadata accessor for ResolvedTextHelper.NextUpdate(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      *(_QWORD *)v17 = *(_QWORD *)v18;
      type metadata accessor for (lastTime: Time, lastDate: Date, reduceFrequency: Bool, resolved: ResolvedStyledText)();
      v21 = v20;
      v22 = *(int *)(v20 + 48);
      v23 = &v17[v22];
      v24 = &v18[v22];
      v25 = type metadata accessor for Date();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v25 - 8) + 32))(v23, v24, v25);
      v17[*(int *)(v21 + 64)] = v18[*(int *)(v21 + 64)];
      *(_QWORD *)&v17[*(int *)(v21 + 80)] = *(_QWORD *)&v18[*(int *)(v21 + 80)];
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(Update - 8) + 64));
    }
  }
  *(_QWORD *)&v6[*(int *)(v15 + 60)] = *(_QWORD *)&v7[*(int *)(v15 + 60)];
  return a1;
}

uint64_t getEnumTagSinglePayload for ResolvedOptionalTextFilter()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t __swift_get_extra_inhabitant_index_33Tm(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;

  v4 = a1 + *(int *)(a3 + 24);
  v5 = type metadata accessor for ResolvedTextHelper(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(v4, a2, v5);
}

uint64_t storeEnumTagSinglePayload for ResolvedOptionalTextFilter()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t __swift_store_extra_inhabitant_index_34Tm(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;

  v5 = a1 + *(int *)(a4 + 24);
  v6 = type metadata accessor for ResolvedTextHelper(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v5, a2, a2, v6);
}

uint64_t type metadata completion function for ResolvedTextFilter()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for ResolvedTextHelper(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for DynamicTextView()
{
  return &type metadata for DynamicTextView;
}

ValueMetadata *type metadata accessor for StyledTextLayoutEngine()
{
  return &type metadata for StyledTextLayoutEngine;
}

uint64_t instantiation function for generic protocol witness table for ResolvedOptionalTextFilter(uint64_t a1)
{
  uint64_t result;

  result = lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID((unint64_t *)&lazy protocol witness table cache variable for type ResolvedOptionalTextFilter and conformance ResolvedOptionalTextFilter, type metadata accessor for ResolvedOptionalTextFilter, (uint64_t)&protocol conformance descriptor for ResolvedOptionalTextFilter);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t base witness table accessor for _AttributeBody in ResolvedOptionalTextFilter()
{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID((unint64_t *)&lazy protocol witness table cache variable for type ResolvedOptionalTextFilter and conformance ResolvedOptionalTextFilter, type metadata accessor for ResolvedOptionalTextFilter, (uint64_t)&protocol conformance descriptor for ResolvedOptionalTextFilter);
}

uint64_t instantiation function for generic protocol witness table for TextChildQuery<A>(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for TextChildQuery<A>);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type TextLayoutProperties and conformance TextLayoutProperties()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TextLayoutProperties and conformance TextLayoutProperties;
  if (!lazy protocol witness table cache variable for type TextLayoutProperties and conformance TextLayoutProperties)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for TextLayoutProperties, &type metadata for TextLayoutProperties);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TextLayoutProperties and conformance TextLayoutProperties);
  }
  return result;
}

void base witness table accessor for _AttributeBody in TextChildQuery<A>()
{
  JUMPOUT(0x23B7C9C04);
}

uint64_t type metadata accessor for DynamicTextView.DynamicTextEnvironment(uint64_t a1)
{
  return type metadata accessor for TimerTimelineSchedule(a1, (uint64_t *)&type metadata singleton initialization cache for DynamicTextView.DynamicTextEnvironment);
}

uint64_t type metadata accessor for DynamicTextView.DynamicTextFilter(uint64_t a1)
{
  return type metadata accessor for TimerTimelineSchedule(a1, (uint64_t *)&type metadata singleton initialization cache for DynamicTextView.DynamicTextFilter);
}

unint64_t lazy protocol witness table accessor for type DynamicTextView.DynamicTextFrame and conformance DynamicTextView.DynamicTextFrame()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type DynamicTextView.DynamicTextFrame and conformance DynamicTextView.DynamicTextFrame;
  if (!lazy protocol witness table cache variable for type DynamicTextView.DynamicTextFrame and conformance DynamicTextView.DynamicTextFrame)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for DynamicTextView.DynamicTextFrame, &unk_25061D820);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DynamicTextView.DynamicTextFrame and conformance DynamicTextView.DynamicTextFrame);
  }
  return result;
}

uint64_t type metadata accessor for DynamicTextView.DynamicTextFilter.Value(uint64_t a1)
{
  return type metadata accessor for TimerTimelineSchedule(a1, (uint64_t *)&type metadata singleton initialization cache for DynamicTextView.DynamicTextFilter.Value);
}

uint64_t partial apply for implicit closure #1 in static DynamicTextView._makeView(view:inputs:)()
{
  type metadata accessor for DynamicTextView.DynamicTextFilter.Value(0);
  return AGGraphCreateOffsetAttribute2();
}

void type metadata accessor for _ContiguousArrayStorage<SizeFittingTextCache<DynamicTextView.DynamicTextHelper, StickyTextSizeFittingLogic>.CacheEntry>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _ContiguousArrayStorage<SizeFittingTextCache<DynamicTextView.DynamicTextHelper, StickyTextSizeFittingLogic>.CacheEntry>)
  {
    type metadata accessor for SizeFittingTextCache<DynamicTextView.DynamicTextHelper, StickyTextSizeFittingLogic>(255, (unint64_t *)&lazy cache variable for type metadata for SizeFittingTextCache<DynamicTextView.DynamicTextHelper, StickyTextSizeFittingLogic>.CacheEntry, (uint64_t (*)(_QWORD, _QWORD *))type metadata accessor for SizeFittingTextCache.CacheEntry);
    v0 = type metadata accessor for _ContiguousArrayStorage();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<SizeFittingTextCache<DynamicTextView.DynamicTextHelper, StickyTextSizeFittingLogic>.CacheEntry>);
  }
}

void type metadata accessor for SizeFittingTextCache<DynamicTextView.DynamicTextHelper, StickyTextSizeFittingLogic>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(_QWORD, _QWORD *))
{
  unint64_t v4;
  uint64_t v5;
  _QWORD v6[4];

  if (!*a2)
  {
    v6[0] = &type metadata for DynamicTextView.DynamicTextHelper;
    v6[1] = &type metadata for StickyTextSizeFittingLogic;
    v6[2] = &protocol witness table for DynamicTextView.DynamicTextHelper;
    v6[3] = &protocol witness table for StickyTextSizeFittingLogic;
    v4 = a3(0, v6);
    if (!v5)
      atomic_store(v4, a2);
  }
}

uint64_t sub_234D2D030()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in closure #1 in DynamicTextView.DynamicTextHelper.widthAdaptedText.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return closure #1 in closure #1 in closure #1 in DynamicTextView.DynamicTextHelper.widthAdaptedText.getter(a1, a2, a3, a4, *(void **)(v4 + 16), *(_QWORD *)(v4 + 24), *(_BYTE **)(v4 + 32));
}

uint64_t sub_234D2D060()
{
  return swift_deallocObject();
}

uint64_t sub_234D2D070()
{
  uint64_t v0;

  outlined consume of Text.Storage(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_BYTE *)(v0 + 32));
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t destroy for DynamicTextView.DynamicTextHelper()
{
  swift_release();
  return swift_release();
}

uint64_t initializeWithCopy for DynamicTextView.DynamicTextHelper(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  v3 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v3;
  swift_retain();
  swift_retain();
  return a1;
}

_QWORD *assignWithCopy for DynamicTextView.DynamicTextHelper(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_retain();
  swift_release();
  a1[4] = a2[4];
  return a1;
}

uint64_t assignWithTake for DynamicTextView.DynamicTextHelper(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_release();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_release();
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  return a1;
}

ValueMetadata *type metadata accessor for DynamicTextView.DynamicTextHelper()
{
  return &type metadata for DynamicTextView.DynamicTextHelper;
}

uint64_t initializeBufferWithCopyOfBuffer for DynamicTextView.DynamicTextFilter.Value(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;

  v3 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  v4 = *a2;
  *(_QWORD *)a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v7 = v4 + ((v3 + 16) & ~(unint64_t)v3);
    swift_retain();
  }
  else
  {
    v7 = a1;
    *(_QWORD *)(a1 + 8) = a2[1];
    *(_BYTE *)(a1 + 16) = *((_BYTE *)a2 + 16);
    v8 = *(int *)(a3 + 20);
    v9 = a1 + v8;
    v10 = (uint64_t)a2 + v8;
    v11 = type metadata accessor for Date();
    v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
    swift_retain();
    swift_retain();
    v12(v9, v10, v11);
    v13 = *(int *)(a3 + 24);
    v14 = v7 + v13;
    v15 = (uint64_t)a2 + v13;
    v16 = *(uint64_t *)((char *)a2 + v13 + 24);
    if (v16)
    {
      v17 = *(_QWORD *)(v15 + 32);
      *(_QWORD *)(v14 + 24) = v16;
      *(_QWORD *)(v14 + 32) = v17;
      (**(void (***)(void))(v16 - 8))();
    }
    else
    {
      v18 = *(_OWORD *)(v15 + 16);
      *(_OWORD *)v14 = *(_OWORD *)v15;
      *(_OWORD *)(v14 + 16) = v18;
      *(_QWORD *)(v14 + 32) = *(_QWORD *)(v15 + 32);
    }
  }
  return v7;
}

uint64_t destroy for DynamicTextView.DynamicTextFilter.Value(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  swift_release();
  swift_release();
  v4 = a1 + *(int *)(a2 + 20);
  v5 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  result = a1 + *(int *)(a2 + 24);
  if (*(_QWORD *)(result + 24))
    return __swift_destroy_boxed_opaque_existential_1(result);
  return result;
}

uint64_t initializeWithCopy for DynamicTextView.DynamicTextFilter.Value(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;

  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for Date();
  v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16);
  swift_retain();
  swift_retain();
  v11(v8, v9, v10);
  v12 = *(int *)(a3 + 24);
  v13 = a1 + v12;
  v14 = a2 + v12;
  v15 = *(_QWORD *)(a2 + v12 + 24);
  if (v15)
  {
    v16 = *(_QWORD *)(v14 + 32);
    *(_QWORD *)(v13 + 24) = v15;
    *(_QWORD *)(v13 + 32) = v16;
    (**(void (***)(void))(v15 - 8))();
  }
  else
  {
    v17 = *(_OWORD *)(v14 + 16);
    *(_OWORD *)v13 = *(_OWORD *)v14;
    *(_OWORD *)(v13 + 16) = v17;
    *(_QWORD *)(v13 + 32) = *(_QWORD *)(v14 + 32);
  }
  return a1;
}

uint64_t assignWithCopy for DynamicTextView.DynamicTextFilter.Value(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 *v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_retain();
  swift_release();
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v6 = *(int *)(a3 + 20);
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 24))(v7, v8, v9);
  v10 = *(int *)(a3 + 24);
  v11 = a1 + v10;
  v12 = (__int128 *)(a2 + v10);
  v13 = *((_QWORD *)v12 + 3);
  if (!*(_QWORD *)(a1 + v10 + 24))
  {
    if (v13)
    {
      *(_QWORD *)(v11 + 24) = v13;
      *(_QWORD *)(v11 + 32) = *((_QWORD *)v12 + 4);
      (**(void (***)(uint64_t, __int128 *))(v13 - 8))(v11, v12);
      return a1;
    }
LABEL_7:
    v14 = *v12;
    v15 = v12[1];
    *(_QWORD *)(v11 + 32) = *((_QWORD *)v12 + 4);
    *(_OWORD *)v11 = v14;
    *(_OWORD *)(v11 + 16) = v15;
    return a1;
  }
  if (!v13)
  {
    __swift_destroy_boxed_opaque_existential_1(v11);
    goto LABEL_7;
  }
  __swift_assign_boxed_opaque_existential_1((uint64_t *)v11, (uint64_t *)v12);
  return a1;
}

uint64_t initializeWithTake for DynamicTextView.DynamicTextFilter.Value(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v6 = *(int *)(a3 + 20);
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
  v10 = *(int *)(a3 + 24);
  v11 = a1 + v10;
  v12 = a2 + v10;
  v13 = *(_OWORD *)(v12 + 16);
  *(_OWORD *)v11 = *(_OWORD *)v12;
  *(_OWORD *)(v11 + 16) = v13;
  *(_QWORD *)(v11 + 32) = *(_QWORD *)(v12 + 32);
  return a1;
}

uint64_t assignWithTake for DynamicTextView.DynamicTextFilter.Value(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_release();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_release();
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v6 = *(int *)(a3 + 20);
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 40))(v7, v8, v9);
  v10 = *(int *)(a3 + 24);
  v11 = a1 + v10;
  if (*(_QWORD *)(a1 + v10 + 24))
    __swift_destroy_boxed_opaque_existential_1(a1 + v10);
  v12 = *(_OWORD *)(a2 + v10 + 16);
  *(_OWORD *)v11 = *(_OWORD *)(a2 + v10);
  *(_OWORD *)(v11 + 16) = v12;
  *(_QWORD *)(v11 + 32) = *(_QWORD *)(a2 + v10 + 32);
  return a1;
}

uint64_t getEnumTagSinglePayload for DynamicTextView.DynamicTextFilter.Value()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_234D2D6A0(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for Date();
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(&a1[*(int *)(a3 + 20)], a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for DynamicTextView.DynamicTextFilter.Value()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

char *sub_234D2D728(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)result = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for Date();
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 20)], a2, a2, v7);
  }
  return result;
}

uint64_t type metadata completion function for DynamicTextView.DynamicTextFilter.Value()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for Date();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

void *type metadata accessor for DynamicTextView.DynamicTextFrame()
{
  return &unk_25061D820;
}

_QWORD *initializeBufferWithCopyOfBuffer for DynamicTextView.DynamicTextFilter(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  _QWORD *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t);
  uint64_t v11;

  v3 = (_QWORD *)a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v11 = *a2;
    *v3 = *a2;
    v3 = (_QWORD *)(v11 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    *(_DWORD *)a1 = *(_DWORD *)a2;
    *(_QWORD *)(a1 + 4) = *(uint64_t *)((char *)a2 + 4);
    *(_QWORD *)(a1 + 12) = *(uint64_t *)((char *)a2 + 12);
    *(_DWORD *)(a1 + 20) = *((_DWORD *)a2 + 5);
    v5 = a2[4];
    *(_QWORD *)(a1 + 24) = a2[3];
    *(_QWORD *)(a1 + 32) = v5;
    v6 = *(int *)(a3 + 48);
    v7 = (uint64_t)a2 + v6;
    v8 = a1 + v6;
    *(_QWORD *)(a1 + 40) = a2[5];
    v9 = type metadata accessor for Date();
    v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 16);
    swift_retain();
    swift_retain();
    v10(v8, v7, v9);
  }
  return v3;
}

uint64_t destroy for DynamicTextView.DynamicTextFilter(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_release();
  swift_release();
  v4 = a1 + *(int *)(a2 + 48);
  v5 = type metadata accessor for Date();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

uint64_t initializeWithCopy for DynamicTextView.DynamicTextFilter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t, uint64_t);

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_QWORD *)(a1 + 4) = *(_QWORD *)(a2 + 4);
  *(_QWORD *)(a1 + 12) = *(_QWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  v4 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v4;
  v5 = *(int *)(a3 + 48);
  v6 = a2 + v5;
  v7 = a1 + v5;
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  v8 = type metadata accessor for Date();
  v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 16);
  swift_retain();
  swift_retain();
  v9(v7, v6, v8);
  return a1;
}

uint64_t assignWithCopy for DynamicTextView.DynamicTextFilter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  v6 = *(int *)(a3 + 48);
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 24))(v7, v8, v9);
  return a1;
}

uint64_t initializeWithTake for DynamicTextView.DynamicTextFilter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_QWORD *)(a1 + 4) = *(_QWORD *)(a2 + 4);
  *(_QWORD *)(a1 + 12) = *(_QWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  v4 = *(int *)(a3 + 48);
  v5 = a2 + v4;
  v6 = a1 + v4;
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  v7 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v6, v5, v7);
  return a1;
}

uint64_t assignWithTake for DynamicTextView.DynamicTextFilter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_release();
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_release();
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  v6 = *(int *)(a3 + 48);
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 40))(v7, v8, v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for DynamicTextView.DynamicTextFilter()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_234D2DBDC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 32);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for Date();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 48), a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for DynamicTextView.DynamicTextFilter()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_234D2DC64(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 32) = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for Date();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 48), a2, a2, v7);
  }
  return result;
}

uint64_t type metadata completion function for DynamicTextView.DynamicTextFilter()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for Date();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

_QWORD *initializeBufferWithCopyOfBuffer for DynamicTextView.DynamicTextEnvironment(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  _QWORD *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = (_QWORD *)a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v9 = *a2;
    *v3 = *a2;
    v3 = (_QWORD *)(v9 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    *(_QWORD *)a1 = *a2;
    *(_DWORD *)(a1 + 8) = *((_DWORD *)a2 + 2);
    v5 = *(int *)(a3 + 28);
    v6 = a1 + v5;
    v7 = (uint64_t)a2 + v5;
    v8 = type metadata accessor for Date();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(v6, v7, v8);
  }
  return v3;
}

uint64_t destroy for DynamicTextView.DynamicTextEnvironment(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1 + *(int *)(a2 + 28);
  v3 = type metadata accessor for Date();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(v2, v3);
}

uint64_t initializeWithCopy for DynamicTextView.DynamicTextEnvironment(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  v4 = *(int *)(a3 + 28);
  v5 = a1 + v4;
  v6 = a2 + v4;
  v7 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(v5, v6, v7);
  return a1;
}

_DWORD *assignWithCopy for DynamicTextView.DynamicTextEnvironment(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;

  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  v4 = *(int *)(a3 + 28);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  v7 = type metadata accessor for Date();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 24))(v5, v6, v7);
  return a1;
}

uint64_t initializeWithTake for DynamicTextView.DynamicTextEnvironment(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  v4 = *(int *)(a3 + 28);
  v5 = a1 + v4;
  v6 = a2 + v4;
  v7 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

uint64_t assignWithTake for DynamicTextView.DynamicTextEnvironment(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  v4 = *(int *)(a3 + 28);
  v5 = a1 + v4;
  v6 = a2 + v4;
  v7 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 40))(v5, v6, v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for DynamicTextView.DynamicTextEnvironment()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_234D2DFF0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;

  v4 = a1 + *(int *)(a3 + 28);
  v5 = type metadata accessor for Date();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(v4, a2, v5);
}

uint64_t storeEnumTagSinglePayload for DynamicTextView.DynamicTextEnvironment()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_234D2E03C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;

  v5 = a1 + *(int *)(a4 + 28);
  v6 = type metadata accessor for Date();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v5, a2, a2, v6);
}

uint64_t type metadata completion function for DynamicTextView.DynamicTextEnvironment()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for Date();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t instantiation function for generic protocol witness table for DynamicTextView.DynamicTextEnvironment(uint64_t a1)
{
  uint64_t result;

  result = lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type DynamicTextView.DynamicTextEnvironment and conformance DynamicTextView.DynamicTextEnvironment, type metadata accessor for DynamicTextView.DynamicTextEnvironment, (uint64_t)&protocol conformance descriptor for DynamicTextView.DynamicTextEnvironment);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t base witness table accessor for _AttributeBody in DynamicTextView.DynamicTextEnvironment()
{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type DynamicTextView.DynamicTextEnvironment and conformance DynamicTextView.DynamicTextEnvironment, type metadata accessor for DynamicTextView.DynamicTextEnvironment, (uint64_t)&protocol conformance descriptor for DynamicTextView.DynamicTextEnvironment);
}

uint64_t instantiation function for generic protocol witness table for DynamicTextView.DynamicTextFilter(uint64_t a1)
{
  uint64_t result;

  result = lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type DynamicTextView.DynamicTextFilter and conformance DynamicTextView.DynamicTextFilter, type metadata accessor for DynamicTextView.DynamicTextFilter, (uint64_t)&protocol conformance descriptor for DynamicTextView.DynamicTextFilter);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t base witness table accessor for _AttributeBody in DynamicTextView.DynamicTextFilter()
{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type DynamicTextView.DynamicTextFilter and conformance DynamicTextView.DynamicTextFilter, type metadata accessor for DynamicTextView.DynamicTextFilter, (uint64_t)&protocol conformance descriptor for DynamicTextView.DynamicTextFilter);
}

unint64_t instantiation function for generic protocol witness table for DynamicTextView.DynamicTextFrame(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type DynamicTextView.DynamicTextFrame and conformance DynamicTextView.DynamicTextFrame();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

_UNKNOWN **associated type witness table accessor for SizeFittingTextResolver.Engine : LayoutEngine in DynamicTextView.DynamicTextHelper()
{
  return &protocol witness table for StyledTextLayoutEngine;
}

void *type metadata accessor for DynamicTextView.TextManager()
{
  return &unk_25061D7D8;
}

uint64_t AttributeCountTestInfo.merge(_:)(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char isUniquelyReferenced_nonNull_native;
  char v6;
  char v7;
  uint64_t v9;

  v2 = *a1;
  v3 = a1[1];
  v4 = a1[2];
  swift_bridgeObjectRetain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v9 = *v1;
  *v1 = 0x8000000000000000;
  specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(v2, (uint64_t)specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A, @in_guaranteed B) -> (@out A, @out B), 0, isUniquelyReferenced_nonNull_native, &v9);
  *v1 = v9;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  v6 = swift_isUniquelyReferenced_nonNull_native();
  v9 = v1[1];
  v1[1] = 0x8000000000000000;
  specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(v3, (uint64_t)specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A, @in_guaranteed B) -> (@out A, @out B), 0, v6, &v9);
  v1[1] = v9;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  v7 = swift_isUniquelyReferenced_nonNull_native();
  v9 = v1[2];
  v1[2] = 0x8000000000000000;
  specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(v4, (uint64_t)specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A, @in_guaranteed B) -> (@out A, @out B), 0, v7, &v9);
  v1[2] = v9;
  return swift_bridgeObjectRelease();
}

uint64_t specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A, @in_guaranteed B) -> (@out A, @out B)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  int v3;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_DWORD *)(a1 + 16);
  *(_QWORD *)a2 = *(_QWORD *)a1;
  *(_QWORD *)(a2 + 8) = v2;
  *(_DWORD *)(a2 + 16) = v3;
  return swift_bridgeObjectRetain();
}

uint64_t specialized static AttributeCountTestInfo.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[1];
  v4 = a1[2];
  v3 = a1[3];
  v5 = a2[1];
  v7 = a2[2];
  v6 = a2[3];
  if ((specialized static Dictionary<>.== infix(_:_:)(*a1, *a2) & 1) != 0
    && (specialized static Dictionary<>.== infix(_:_:)(v2, v5) & 1) != 0
    && (specialized static Dictionary<>.== infix(_:_:)(v4, v7) & 1) != 0)
  {
    return specialized static Dictionary<>.== infix(_:_:)(v3, v6);
  }
  else
  {
    return 0;
  }
}

uint64_t destroy for AttributeCountTestInfo()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

_QWORD *initializeWithCopy for AttributeCountTestInfo(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for AttributeCountTestInfo(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_OWORD *assignWithTake for AttributeCountTestInfo(_OWORD *a1, _OWORD *a2)
{
  swift_bridgeObjectRelease();
  *a1 = *a2;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for AttributeCountTestInfo()
{
  return &type metadata for AttributeCountTestInfo;
}

void static GestureStateProtocol.gesture<A, B>(content:_:)()
{
  swift_getAssociatedTypeWitness();
  type metadata accessor for StateContainerGesture();
}

void sub_234D2EBC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  va_list va;

  va_start(va, a5);
  v9 = MEMORY[0x23B7C9C04](&protocol conformance descriptor for StateContainerGesture<A, B, C>, a1);
  Gesture.modifier<A>(_:)((uint64_t)va, v6, a1, v5, v9, v7);
}

uint64_t StateContainerGesture.init(_:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  *a3 = result;
  a3[1] = a2;
  return result;
}

void type metadata accessor for StateContainerGesture()
{
  JUMPOUT(0x23B7C9B5CLL);
}

uint64_t StateContainerGesture.body.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_retain();
  return v1;
}

uint64_t StateContainerGesture.body.setter(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t result;

  result = swift_release();
  *v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*StateContainerGesture.body.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

void static StateContainerGesture._makeGesture(modifier:inputs:body:)(uint64_t a1)
{
  MEMORY[0x24BDAC7A8](a1);
  type metadata accessor for StateContainerPhase();
}

void sub_234D2ED48(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _DWORD *v16;
  int v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  int v21;
  uint64_t v22;
  __n128 v23;

  *(_QWORD *)(v14 - 336) = *(_QWORD *)(a1 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v16 = (_DWORD *)((char *)&a9 - v15);
  v17 = *v11;
  v18 = *(_OWORD *)(v10 + 80);
  *(_OWORD *)(v14 - 160) = *(_OWORD *)(v10 + 64);
  *(_OWORD *)(v14 - 144) = v18;
  *(_OWORD *)(v14 - 128) = *(_OWORD *)(v10 + 96);
  v19 = *(_OWORD *)(v10 + 16);
  *(_OWORD *)(v14 - 224) = *(_OWORD *)v10;
  *(_OWORD *)(v14 - 208) = v19;
  v20 = *(_OWORD *)(v10 + 48);
  *(_OWORD *)(v14 - 192) = *(_OWORD *)(v10 + 32);
  *(_OWORD *)(v14 - 176) = v20;
  v21 = *(_DWORD *)(v10 + 112);
  v22 = *(_QWORD *)(v10 + 116);
  *(_DWORD *)(v14 - 112) = v21;
  *(_QWORD *)(v14 - 108) = v22;
  v23 = ((__n128 (*)(uint64_t))*(_QWORD *)(v14 - 320))(v14 - 224);
  *(_DWORD *)(v14 - 348) = *(_DWORD *)(v14 - 280);
  v23.n128_u64[0] = *(_QWORD *)(v14 - 296);
  *(__n128 *)(v14 - 320) = v23;
  (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v9, v13);
  *v16 = v17;
  v16[1] = *(_OWORD *)(v14 - 320);
  v16[2] = v21;
  *(_QWORD *)(v14 - 224) = v9;
  *(_QWORD *)(v14 - 216) = v12;
  *(_QWORD *)(v14 - 208) = *(_QWORD *)(v14 - 360);
  *(_QWORD *)(v14 - 200) = v13;
  type metadata accessor for StateContainerPhase();
}

uint64_t sub_234D2EE34(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;

  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 344) + 32))(v5 + *(int *)(a1 + 60), v7, v1);
  *(_DWORD *)(v5 + *(int *)(a1 + 64)) = 0;
  *(_QWORD *)(v8 - 256) = type metadata accessor for GesturePhase(0, v6, v10, v11);
  *(_QWORD *)(v8 - 248) = v4;
  *(_QWORD *)(v8 - 240) = MEMORY[0x23B7C9C04](&protocol conformance descriptor for StateContainerPhase<A, B, C>, v4);
  v12 = type metadata accessor for Attribute();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v5, (uint64_t)partial apply for closure #1 in Attribute.init<A>(_:), v8 - 272, v4, MEMORY[0x24BEE4078], v12, MEMORY[0x24BEE40A8], v13);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 336) + 8))(v5, v4);
  v14 = *(_DWORD *)(v8 - 224);
  *(_QWORD *)(v8 - 224) = *(_QWORD *)(v8 - 320);
  *(_QWORD *)(v8 - 216) = v2;
  *(_DWORD *)(v8 - 208) = *(_DWORD *)(v8 - 348);
  type metadata accessor for _GestureOutputs(0, v3, v15, v16);
  _GestureOutputs.withPhase<A>(_:)(v14, *(_QWORD *)(v8 - 328));
  return swift_bridgeObjectRelease();
}

void type metadata accessor for StateContainerPhase()
{
  JUMPOUT(0x23B7C9B5CLL);
}

void StateContainerPhase.modifier.getter()
{
  type metadata accessor for StateContainerGesture();
}

uint64_t sub_234D2EFB8()
{
  _QWORD *v0;
  uint64_t *Value;
  uint64_t v2;
  uint64_t v3;

  Value = (uint64_t *)AGGraphGetValue();
  v3 = *Value;
  v2 = Value[1];
  *v0 = v3;
  v0[1] = v2;
  return swift_retain();
}

uint64_t StateContainerPhase.childPhase.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v5;
  uint64_t Value;

  v5 = type metadata accessor for GesturePhase(0, *(_QWORD *)(a1 + 32), a2, a3);
  Value = AGGraphGetValue();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a4, Value, v5);
}

void protocol witness for static GestureModifier._makeGesture(modifier:inputs:body:) in conformance StateContainerGesture<A, B, C>(uint64_t a1)
{
  static StateContainerGesture._makeGesture(modifier:inputs:body:)(a1);
}

uint64_t StateContainerPhase.resetPhase()(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v10;

  v2 = v1;
  v4 = *(_QWORD *)(a1 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x24BDAC7A8](a1);
  v8 = (char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(uint64_t))(*(_QWORD *)(v6 + 40) + 8))(v4);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v5 + 40))(v2 + *(int *)(a1 + 60), v8, v4);
}

BOOL StateContainerPhase.updateValue()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  _BOOL8 result;

  v5 = type metadata accessor for GesturePhase(0, *(_QWORD *)(a1 + 32), a3, a4);
  MEMORY[0x24BDAC7A8](v5);
  v8 = type metadata accessor for GesturePhase(0, *(_QWORD *)(a1 + 24), v6, v7);
  v9 = MEMORY[0x24BDAC7A8](v8);
  MEMORY[0x23B7C9C04](&protocol conformance descriptor for StateContainerPhase<A, B, C>, a1, v9);
  result = ResettableGestureRule.resetIfNeeded()();
  if (result)
    StateContainerPhase.modifier.getter();
  return result;
}

uint64_t protocol witness for ResettableGestureRule.lastResetSeed.getter in conformance StateContainerPhase<A, B, C>(uint64_t a1)
{
  uint64_t v1;

  return *(unsigned int *)(v1 + *(int *)(a1 + 64));
}

uint64_t protocol witness for ResettableGestureRule.lastResetSeed.setter in conformance StateContainerPhase<A, B, C>(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  *(_DWORD *)(v2 + *(int *)(a2 + 64)) = result;
  return result;
}

uint64_t (*protocol witness for ResettableGestureRule.lastResetSeed.modify in conformance StateContainerPhase<A, B, C>())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

unint64_t protocol witness for CustomStringConvertible.description.getter in conformance StateContainerPhase<A, B, C>()
{
  return specialized StateContainerPhase.description.getter();
}

uint64_t protocol witness for static StatefulRule.initialValue.getter in conformance StateContainerPhase<A, B, C>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v5;

  v5 = type metadata accessor for GesturePhase(0, *(_QWORD *)(a1 + 24), a2, a3);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(a4, 1, 1, v5);
}

uint64_t sub_234D2F334@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a1;
  v3 = a1[1];
  *a2 = v2;
  a2[1] = v3;
  return swift_retain();
}

uint64_t sub_234D2F340(uint64_t *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  v4 = *a1;
  v3 = a1[1];
  swift_retain();
  result = swift_release();
  *a2 = v4;
  a2[1] = v3;
  return result;
}

uint64_t sub_234D2F380()
{
  return 32;
}

__n128 sub_234D2F38C(uint64_t a1, _OWORD *a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a1;
  v3 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  return result;
}

uint64_t dispatch thunk of GestureStateProtocol.init()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t type metadata completion function for StateContainerPhase()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for StateContainerPhase(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v9;
  _DWORD *v10;
  _DWORD *v11;
  _DWORD *v12;
  _DWORD *v13;
  uint64_t v14;
  uint64_t v15;

  v3 = a1;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 80);
  v6 = *(_QWORD *)(v4 + 64) + 3;
  if ((v5 | 3uLL) > 7
    || (*(_DWORD *)(v4 + 80) & 0x100000) != 0
    || ((v6 + ((v5 + 12) & ~v5)) & 0xFFFFFFFFFFFFFFFCLL) + 4 > 0x18)
  {
    v9 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v9 + ((v5 + 16) & ~(v5 | 3)));
    swift_retain();
  }
  else
  {
    *(_DWORD *)a1 = *(_DWORD *)a2;
    v10 = (_DWORD *)(((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFCLL);
    v11 = (_DWORD *)(((unint64_t)a2 + 7) & 0xFFFFFFFFFFFFFCLL);
    *v10 = *v11;
    v12 = (_DWORD *)(((unint64_t)v10 + 7) & 0xFFFFFFFFFFFFFFFCLL);
    v13 = (_DWORD *)(((unint64_t)v11 + 7) & 0xFFFFFFFFFFFFFFFCLL);
    *v12 = *v13;
    v14 = ((unint64_t)v12 + v5 + 4) & ~v5;
    v15 = ((unint64_t)v13 + v5 + 4) & ~v5;
    (*(void (**)(uint64_t, uint64_t))(v4 + 16))(v14, v15);
    *(_DWORD *)((v6 + v14) & 0xFFFFFFFFFFFFFCLL) = *(_DWORD *)((v6 + v15) & 0xFFFFFFFFFFFFFCLL);
  }
  return v3;
}

uint64_t destroy for StateContainerPhase(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(unint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 8))((((((a1 + 7) & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL) + *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80) + 4) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80));
}

_DWORD *initializeWithCopy for StateContainerPhase(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  _DWORD *v4;
  _DWORD *v5;
  _DWORD *v6;
  _DWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  *a1 = *a2;
  v4 = (_DWORD *)(((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFCLL);
  v5 = (_DWORD *)(((unint64_t)a2 + 7) & 0xFFFFFFFFFFFFFCLL);
  *v4 = *v5;
  v6 = (_DWORD *)(((unint64_t)v4 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  v7 = (_DWORD *)(((unint64_t)v5 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *v6 = *v7;
  v8 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = ((unint64_t)v6 + v9 + 4) & ~v9;
  v11 = ((unint64_t)v7 + v9 + 4) & ~v9;
  (*(void (**)(uint64_t, uint64_t))(v8 + 16))(v10, v11);
  *(_DWORD *)((*(_QWORD *)(v8 + 64) + 3 + v10) & 0xFFFFFFFFFFFFFCLL) = *(_DWORD *)((*(_QWORD *)(v8 + 64) + 3 + v11) & 0xFFFFFFFFFFFFFCLL);
  return a1;
}

_DWORD *assignWithCopy for StateContainerPhase(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  _DWORD *v4;
  _DWORD *v5;
  _DWORD *v6;
  _DWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  *a1 = *a2;
  v4 = (_DWORD *)(((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFCLL);
  v5 = (_DWORD *)(((unint64_t)a2 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *v4 = *v5;
  v6 = (_DWORD *)(((unint64_t)v4 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  v7 = (_DWORD *)(((unint64_t)v5 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *v6 = *v7;
  v8 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = ((unint64_t)v6 + v9 + 4) & ~v9;
  v11 = ((unint64_t)v7 + v9 + 4) & ~v9;
  (*(void (**)(uint64_t, uint64_t))(v8 + 24))(v10, v11);
  *(_DWORD *)((*(_QWORD *)(v8 + 64) + 3 + v10) & 0xFFFFFFFFFFFFFCLL) = *(_DWORD *)((*(_QWORD *)(v8 + 64) + 3 + v11) & 0xFFFFFFFFFFFFFCLL);
  return a1;
}

_DWORD *initializeWithTake for StateContainerPhase(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  _DWORD *v4;
  _DWORD *v5;
  _DWORD *v6;
  _DWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  *a1 = *a2;
  v4 = (_DWORD *)(((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFCLL);
  v5 = (_DWORD *)(((unint64_t)a2 + 7) & 0xFFFFFFFFFFFFFCLL);
  *v4 = *v5;
  v6 = (_DWORD *)(((unint64_t)v4 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  v7 = (_DWORD *)(((unint64_t)v5 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *v6 = *v7;
  v8 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = ((unint64_t)v6 + v9 + 4) & ~v9;
  v11 = ((unint64_t)v7 + v9 + 4) & ~v9;
  (*(void (**)(uint64_t, uint64_t))(v8 + 32))(v10, v11);
  *(_DWORD *)((*(_QWORD *)(v8 + 64) + 3 + v10) & 0xFFFFFFFFFFFFFCLL) = *(_DWORD *)((*(_QWORD *)(v8 + 64) + 3 + v11) & 0xFFFFFFFFFFFFFCLL);
  return a1;
}

_DWORD *assignWithTake for StateContainerPhase(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  _DWORD *v4;
  _DWORD *v5;
  _DWORD *v6;
  _DWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  *a1 = *a2;
  v4 = (_DWORD *)(((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFCLL);
  v5 = (_DWORD *)(((unint64_t)a2 + 7) & 0xFFFFFFFFFFFFFCLL);
  *v4 = *v5;
  v6 = (_DWORD *)(((unint64_t)v4 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  v7 = (_DWORD *)(((unint64_t)v5 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *v6 = *v7;
  v8 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = ((unint64_t)v6 + v9 + 4) & ~v9;
  v11 = ((unint64_t)v7 + v9 + 4) & ~v9;
  (*(void (**)(uint64_t, uint64_t))(v8 + 40))(v10, v11);
  *(_DWORD *)((*(_QWORD *)(v8 + 64) + 3 + v10) & 0xFFFFFFFFFFFFFCLL) = *(_DWORD *)((*(_QWORD *)(v8 + 64) + 3 + v11) & 0xFFFFFFFFFFFFFCLL);
  return a1;
}

uint64_t getEnumTagSinglePayload for StateContainerPhase(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = *(unsigned __int8 *)(v4 + 80);
  if (v5 >= a2)
  {
    if (v5)
      return (*(uint64_t (**)(unint64_t))(v4 + 48))((((((a1 + 7) & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL)
                                                                    + v6
                                                                    + 4) & ~v6);
    return 0;
  }
  if (((((*(_QWORD *)(v4 + 64) + ((v6 + 12) & ~v6) + 3) & 0xFFFFFFFFFFFFFFFCLL) + 4) & 0xFFFFFFFC) != 0)
    v7 = 2;
  else
    v7 = a2 - v5 + 1;
  if (v7 >= 0x10000)
    v8 = 4;
  else
    v8 = 2;
  if (v7 < 0x100)
    v8 = 1;
  if (v7 >= 2)
    v9 = v8;
  else
    v9 = 0;
  return ((uint64_t (*)(void))((char *)&loc_234D2F858 + 4 * byte_23529B560[v9]))();
}

void storeEnumTagSinglePayload for StateContainerPhase(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  int v11;
  int v12;
  unsigned int v13;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = *(unsigned __int8 *)(v6 + 80);
  if (v7 >= a3)
  {
    v12 = 0;
    if (a2 <= v7)
      goto LABEL_14;
  }
  else
  {
    v9 = a3 - v7;
    if (((*(_DWORD *)(v6 + 64) + (((_DWORD)v8 + 12) & ~(_DWORD)v8) + 3) & 0xFFFFFFFC) == 0xFFFFFFFC)
      v10 = v9 + 1;
    else
      v10 = 2;
    if (v10 >= 0x10000)
      v11 = 4;
    else
      v11 = 2;
    if (v10 < 0x100)
      v11 = 1;
    if (v10 >= 2)
      v12 = v11;
    else
      v12 = 0;
    if (a2 <= v7)
LABEL_14:
      __asm { BR              X13 }
  }
  if (((*(_DWORD *)(v6 + 64) + (((_DWORD)v8 + 12) & ~(_DWORD)v8) + 3) & 0xFFFFFFFC) != 0xFFFFFFFC)
  {
    v13 = ~v7 + a2;
    bzero(a1, ((*(_QWORD *)(v6 + 64) + ((v8 + 12) & ~v8) + 3) & 0xFFFFFFFFFFFFFFFCLL) + 4);
    *a1 = v13;
  }
  __asm { BR              X10 }
}

void sub_234D2F9CC()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
}

void sub_234D2F9D4(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x234D2F9DCLL);
}

void sub_234D2FA10()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
}

void sub_234D2FA18()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
}

uint64_t sub_234D2FA20@<X0>(int a1@<W1>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_WORD *)(v5 + v6) = 0;
  if (!a1)
    JUMPOUT(0x234D2FA28);
  return (*(uint64_t (**)(unint64_t))(v3 + 56))((((((v5 + 7) & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL)
                                                                + v4
                                                                + 4) & a2);
}

uint64_t instantiation function for generic protocol witness table for StateContainerPhase<A, B, C>(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for StateContainerPhase<A, B, C>);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

void base witness table accessor for _AttributeBody in StateContainerPhase<A, B, C>()
{
  JUMPOUT(0x23B7C9C04);
}

unint64_t specialized StateContainerPhase.description.getter()
{
  Swift::String v0;

  v0._countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  return 0x86E2206574617453;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay7SwiftUI34CodableAccessibilityVersionStorageOyAF0F18ResolvedStyledTextVAF0gL0VGG_AF0L0Vs5NeverOTg503_s7d4UI43fg54DataSeriesConfigurationV04AxisG0V13configurationAA0defu9VADVvgAA4l8VAA0cD14hi8OyAA0c14jK62J0VAA0dJ0VGcfu_32f6f9bf4b0141814c023ba9cad627274bArKTf3nnnpk_nTf1cn_n(uint64_t a1)
{
  int64_t v1;
  uint64_t v2;
  uint64_t v4;
  _BYTE *v5;
  _QWORD *v6;
  uint64_t v7;
  __int16 v8;
  uint64_t v9;
  void *v10;
  uint64_t ObjCClassFromMetadata;
  uint64_t v12;
  char v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t result;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  _OWORD v22[2];
  char v23;
  __int128 v24;
  unint64_t v25;
  uint64_t v26;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = MEMORY[0x24BEE4AF8];
  if (v1)
  {
    v26 = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0);
    v4 = v26;
    v5 = (_BYTE *)(a1 + 50);
    while (1)
    {
      v6 = *(_QWORD **)(v5 - 18);
      v7 = *(_QWORD *)(v5 - 10);
      v8 = *((_WORD *)v5 - 1);
      if ((*v5 & 1) != 0)
      {
        type metadata accessor for AccessibilityTextStorage();
        v9 = swift_allocObject();
        *(_QWORD *)(v9 + 16) = v6;
        *(_QWORD *)(v9 + 24) = v7;
        *(_BYTE *)(v9 + 32) = v8 & 1;
        *(_BYTE *)(v9 + 33) = HIBYTE(v8) & 1;
        outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v6, v7, v8, 1);
      }
      else
      {
        v10 = (void *)v6[24];
        if (v10)
        {
          v25 = type metadata accessor for NSAttributedString();
          *(_QWORD *)&v24 = v10;
          v23 = 0;
          ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
          outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v6, v7, v8, 0);
          v19 = objc_msgSend(v10, sel_isKindOfClass_, ObjCClassFromMetadata);
          if (v19)
          {
            outlined init with take of Any(&v24, v22);
            swift_dynamicCast();
            v12 = 0;
            v18 = v20;
            v13 = v23;
          }
          else
          {
            outlined init with copy of Any((uint64_t)&v24, (uint64_t)v22);
            if ((swift_dynamicCast() & 1) == 0)
            {
              result = _assertionFailure(_:_:file:line:flags:)();
              __break(1u);
              return result;
            }
            v12 = v21;
            v18 = v20;
            __swift_destroy_boxed_opaque_existential_1((uint64_t)&v24);
            v13 = 0;
          }
          type metadata accessor for AccessibilityTextStorage();
          v9 = swift_allocObject();
          *(_QWORD *)(v9 + 16) = v18;
          *(_QWORD *)(v9 + 24) = v12;
          *(_BYTE *)(v9 + 32) = v19;
          *(_BYTE *)(v9 + 33) = v13;
          outlined consume of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v6, v7, v8, 0);
          v2 = MEMORY[0x24BEE4AF8];
        }
        else
        {
          type metadata accessor for LocalizedTextStorage();
          v9 = swift_allocObject();
          *(_QWORD *)(v9 + 16) = 0;
          *(_QWORD *)(v9 + 24) = 0xE000000000000000;
          *(_BYTE *)(v9 + 32) = 0;
          *(_QWORD *)(v9 + 40) = v2;
          *(_QWORD *)(v9 + 48) = 0;
          *(_QWORD *)(v9 + 56) = 0;
          *(_QWORD *)(v9 + 64) = 0;
        }
      }
      v26 = v4;
      v15 = *(_QWORD *)(v4 + 16);
      v14 = *(_QWORD *)(v4 + 24);
      if (v15 >= v14 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v14 > 1, v15 + 1, 1);
        v4 = v26;
      }
      v5 += 24;
      *(_QWORD *)(v4 + 16) = v15 + 1;
      v16 = v4 + 32 * v15;
      *(_QWORD *)(v16 + 32) = v9;
      *(_QWORD *)(v16 + 40) = 0;
      *(_BYTE *)(v16 + 48) = 1;
      *(_QWORD *)(v16 + 56) = v2;
      if (!--v1)
        return v4;
    }
  }
  return MEMORY[0x24BEE4AF8];
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay7SwiftUI43CodableAccessibilityDataSeriesConfigurationV16ValueDescriptionVG_AF0ghiJ0VAIVs5NeverOTg503_s7d4UI43fghij31V04AxisG0V13configurationAA0defr10VADVvgAH16kL58VAcJVcfu0_33_21c9bbe930dcb26c694134c0e56303c8AlKTf3nnnpk_nTf1cn_n(uint64_t a1)
{
  int64_t v1;
  uint64_t v2;
  uint64_t v4;
  _OWORD *i;
  uint64_t v6;
  _QWORD *v7;
  unsigned int v8;
  void *v9;
  uint64_t ObjCClassFromMetadata;
  uint64_t v11;
  char v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t result;
  uint64_t v21;
  unsigned int v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  _OWORD v27[2];
  char v28;
  __int128 v29;
  unint64_t v30;
  uint64_t v31;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = MEMORY[0x24BEE4AF8];
  if (v1)
  {
    v31 = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0);
    v4 = v31;
    for (i = (_OWORD *)(a1 + 56); ; i = (_OWORD *)((char *)i + 40))
    {
      v7 = (_QWORD *)*((_QWORD *)i - 3);
      v6 = *((_QWORD *)i - 2);
      v8 = *((unsigned __int16 *)i - 4) | (*((unsigned __int8 *)i - 6) << 16);
      v24 = *i;
      if (*((unsigned __int8 *)i - 6) == 255)
      {
        outlined consume of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>?(v7, v6, v8);
        v13 = xmmword_23529B6E0;
      }
      else if (((*((unsigned __int8 *)i - 6) << 16) & 0x10000) != 0)
      {
        type metadata accessor for AccessibilityTextStorage();
        v14 = swift_allocObject();
        *(_QWORD *)(v14 + 16) = v7;
        *(_QWORD *)(v14 + 24) = v6;
        *(_BYTE *)(v14 + 32) = v8 & 1;
        *(_BYTE *)(v14 + 33) = BYTE1(v8) & 1;
        outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>?(v7, v6, v8);
        v13 = (unint64_t)v14;
      }
      else
      {
        v9 = (void *)v7[24];
        if (v9)
        {
          v30 = type metadata accessor for NSAttributedString();
          *(_QWORD *)&v29 = v9;
          v28 = 0;
          ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
          outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>?(v7, v6, v8);
          v22 = objc_msgSend(v9, sel_isKindOfClass_, ObjCClassFromMetadata);
          if (v22)
          {
            outlined init with take of Any(&v29, v27);
            swift_dynamicCast();
            v11 = 0;
            v21 = v25;
            v12 = v28;
          }
          else
          {
            outlined init with copy of Any((uint64_t)&v29, (uint64_t)v27);
            if ((swift_dynamicCast() & 1) == 0)
            {
              result = _assertionFailure(_:_:file:line:flags:)();
              __break(1u);
              return result;
            }
            v11 = v26;
            v21 = v25;
            __swift_destroy_boxed_opaque_existential_1((uint64_t)&v29);
            v12 = 0;
          }
          type metadata accessor for AccessibilityTextStorage();
          v16 = swift_allocObject();
          *(_QWORD *)(v16 + 16) = v21;
          *(_QWORD *)(v16 + 24) = v11;
          *(_BYTE *)(v16 + 32) = v22;
          *(_BYTE *)(v16 + 33) = v12;
          outlined consume of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>?(v7, v6, v8);
          v13 = (unint64_t)v16;
          v2 = MEMORY[0x24BEE4AF8];
        }
        else
        {
          type metadata accessor for LocalizedTextStorage();
          v15 = swift_allocObject();
          *(_QWORD *)(v15 + 16) = 0;
          *(_QWORD *)(v15 + 24) = 0xE000000000000000;
          *(_BYTE *)(v15 + 32) = 0;
          *(_QWORD *)(v15 + 40) = v2;
          *(_QWORD *)(v15 + 48) = 0;
          *(_QWORD *)(v15 + 56) = 0;
          *(_QWORD *)(v15 + 64) = 0;
          v13 = (unint64_t)v15;
        }
      }
      v31 = v4;
      v18 = *(_QWORD *)(v4 + 16);
      v17 = *(_QWORD *)(v4 + 24);
      if (v18 >= v17 >> 1)
      {
        v23 = v13;
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v17 > 1, v18 + 1, 1);
        v13 = v23;
        v4 = v31;
      }
      *(_QWORD *)(v4 + 16) = v18 + 1;
      v19 = v4 + 48 * v18;
      *(_OWORD *)(v19 + 32) = v13;
      *(_BYTE *)(v19 + 48) = v8 < 0xFF0000;
      *(_QWORD *)(v19 + 56) = v2;
      *(_OWORD *)(v19 + 64) = v24;
      if (!--v1)
        return v4;
    }
  }
  return MEMORY[0x24BEE4AF8];
}

uint64_t AccessibilityDataSeriesConfiguration.ValueDescription.description.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)v0;
  outlined copy of Text.Storage(*(_QWORD *)v0, *(_QWORD *)(v0 + 8), *(_BYTE *)(v0 + 16));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t AccessibilityDataSeriesConfiguration.ValueDescription.description.setter(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t result;

  outlined consume of Text.Storage(*(_QWORD *)v4, *(_QWORD *)(v4 + 8), *(_BYTE *)(v4 + 16));
  result = swift_bridgeObjectRelease();
  *(_QWORD *)v4 = a1;
  *(_QWORD *)(v4 + 8) = a2;
  *(_BYTE *)(v4 + 16) = a3 & 1;
  *(_QWORD *)(v4 + 24) = a4;
  return result;
}

uint64_t (*AccessibilityDataSeriesConfiguration.ValueDescription.description.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

double AccessibilityDataSeriesConfiguration.ValueDescription.effectiveValueRange.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 32);
}

void AccessibilityDataSeriesConfiguration.ValueDescription.effectiveValueRange.setter(double a1, double a2)
{
  uint64_t v2;

  *(double *)(v2 + 32) = a1;
  *(double *)(v2 + 40) = a2;
}

uint64_t (*AccessibilityDataSeriesConfiguration.ValueDescription.effectiveValueRange.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t AccessibilityDataSeriesConfiguration.ValueDescription.init(description:effectiveValueRange:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X8>, double a6@<D0>, double a7@<D1>)
{
  *(_QWORD *)a5 = result;
  *(_QWORD *)(a5 + 8) = a2;
  *(_BYTE *)(a5 + 16) = a3 & 1;
  *(_QWORD *)(a5 + 24) = a4;
  *(double *)(a5 + 32) = a6;
  *(double *)(a5 + 40) = a7;
  return result;
}

uint64_t AccessibilityDataSeriesConfiguration.AxisConfiguration.title.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  outlined copy of Text?(*v0, v0[1], v0[2], v0[3]);
  return v1;
}

uint64_t AccessibilityDataSeriesConfiguration.AxisConfiguration.title.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t result;

  result = outlined consume of Text?(*v4, v4[1], v4[2], v4[3]);
  *v4 = a1;
  v4[1] = a2;
  v4[2] = a3;
  v4[3] = a4;
  return result;
}

uint64_t (*AccessibilityDataSeriesConfiguration.AxisConfiguration.title.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t AccessibilityDataSeriesConfiguration.AxisConfiguration.unitLabel.getter()
{
  _QWORD *v0;
  uint64_t v1;

  v1 = v0[4];
  outlined copy of Text?(v1, v0[5], v0[6], v0[7]);
  return v1;
}

uint64_t AccessibilityDataSeriesConfiguration.AxisConfiguration.unitLabel.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t result;

  result = outlined consume of Text?(v4[4], v4[5], v4[6], v4[7]);
  v4[4] = a1;
  v4[5] = a2;
  v4[6] = a3;
  v4[7] = a4;
  return result;
}

uint64_t (*AccessibilityDataSeriesConfiguration.AxisConfiguration.unitLabel.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t AccessibilityDataSeriesConfiguration.AxisConfiguration.categoryLabels.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t AccessibilityDataSeriesConfiguration.AxisConfiguration.categoryLabels.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 64) = a1;
  return result;
}

uint64_t (*AccessibilityDataSeriesConfiguration.AxisConfiguration.categoryLabels.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t AccessibilityDataSeriesConfiguration.AxisConfiguration.minimumValue.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 72);
}

uint64_t AccessibilityDataSeriesConfiguration.AxisConfiguration.minimumValue.setter(uint64_t result, char a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 72) = result;
  *(_BYTE *)(v2 + 80) = a2 & 1;
  return result;
}

uint64_t (*AccessibilityDataSeriesConfiguration.AxisConfiguration.minimumValue.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t AccessibilityDataSeriesConfiguration.AxisConfiguration.maximumValue.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 88);
}

uint64_t AccessibilityDataSeriesConfiguration.AxisConfiguration.maximumValue.setter(uint64_t result, char a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 88) = result;
  *(_BYTE *)(v2 + 96) = a2 & 1;
  return result;
}

uint64_t (*AccessibilityDataSeriesConfiguration.AxisConfiguration.maximumValue.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t AccessibilityDataSeriesConfiguration.AxisConfiguration.gridlinePositions.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t AccessibilityDataSeriesConfiguration.AxisConfiguration.gridlinePositions.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 104) = a1;
  return result;
}

uint64_t (*AccessibilityDataSeriesConfiguration.AxisConfiguration.gridlinePositions.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t AccessibilityDataSeriesConfiguration.AxisConfiguration.values.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t AccessibilityDataSeriesConfiguration.AxisConfiguration.values.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 112) = a1;
  return result;
}

uint64_t (*AccessibilityDataSeriesConfiguration.AxisConfiguration.values.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t AccessibilityDataSeriesConfiguration.AxisConfiguration.valueDescriptions.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t AccessibilityDataSeriesConfiguration.AxisConfiguration.valueDescriptions.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 120) = a1;
  return result;
}

uint64_t (*AccessibilityDataSeriesConfiguration.AxisConfiguration.valueDescriptions.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

__n128 AccessibilityDataSeriesConfiguration.AxisConfiguration.init(title:unitLabel:categoryLabels:minimumValue:maximumValue:gridlinePositions:values:valueDescriptions:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, char a12, uint64_t a13, char a14, __n128 a15, uint64_t a16)
{
  __n128 result;

  result = a15;
  *(_QWORD *)a9 = a1;
  *(_QWORD *)(a9 + 8) = a2;
  *(_QWORD *)(a9 + 16) = a3;
  *(_QWORD *)(a9 + 24) = a4;
  *(_QWORD *)(a9 + 32) = a5;
  *(_QWORD *)(a9 + 40) = a6;
  *(_QWORD *)(a9 + 48) = a7;
  *(_QWORD *)(a9 + 56) = a8;
  *(_QWORD *)(a9 + 64) = a10;
  *(_QWORD *)(a9 + 72) = a11;
  *(_BYTE *)(a9 + 80) = a12 & 1;
  *(_QWORD *)(a9 + 88) = a13;
  *(_BYTE *)(a9 + 96) = a14 & 1;
  *(__n128 *)(a9 + 104) = a15;
  *(_QWORD *)(a9 + 120) = a16;
  return result;
}

SwiftUI::AccessibilityDataSeriesConfiguration::DataSeriesType_optional __swiftcall AccessibilityDataSeriesConfiguration.DataSeriesType.init(rawValue:)(Swift::Int rawValue)
{
  char *v1;
  char v2;

  v2 = 3;
  if ((unint64_t)rawValue < 3)
    v2 = rawValue;
  *v1 = v2;
  return (SwiftUI::AccessibilityDataSeriesConfiguration::DataSeriesType_optional)rawValue;
}

uint64_t AccessibilityDataSeriesConfiguration.DataSeriesType.rawValue.getter()
{
  unsigned __int8 *v0;

  return *v0;
}

SwiftUI::AccessibilityDataSeriesConfiguration::DataSeriesType_optional protocol witness for RawRepresentable.init(rawValue:) in conformance AccessibilityDataSeriesConfiguration.DataSeriesType(Swift::Int *a1)
{
  return AccessibilityDataSeriesConfiguration.DataSeriesType.init(rawValue:)(*a1);
}

uint64_t protocol witness for Decodable.init(from:) in conformance AccessibilityDataSeriesConfiguration.DataSeriesType()
{
  lazy protocol witness table accessor for type AccessibilityDataSeriesConfiguration.DataSeriesType and conformance AccessibilityDataSeriesConfiguration.DataSeriesType();
  return RawRepresentable<>.init(from:)();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance AccessibilityDataSeriesConfiguration.DataSeriesType()
{
  lazy protocol witness table accessor for type AccessibilityDataSeriesConfiguration.DataSeriesType and conformance AccessibilityDataSeriesConfiguration.DataSeriesType();
  return RawRepresentable<>.encode(to:)();
}

uint64_t AccessibilityDataSeriesConfiguration.name.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)v0;
  outlined copy of Text.Storage(*(_QWORD *)v0, *(_QWORD *)(v0 + 8), *(_BYTE *)(v0 + 16));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t AccessibilityDataSeriesConfiguration.name.setter(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t result;

  outlined consume of Text.Storage(*(_QWORD *)v4, *(_QWORD *)(v4 + 8), *(_BYTE *)(v4 + 16));
  result = swift_bridgeObjectRelease();
  *(_QWORD *)v4 = a1;
  *(_QWORD *)(v4 + 8) = a2;
  *(_BYTE *)(v4 + 16) = a3 & 1;
  *(_QWORD *)(v4 + 24) = a4;
  return result;
}

uint64_t (*AccessibilityDataSeriesConfiguration.name.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

void AccessibilityDataSeriesConfiguration.type.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 32);
}

_BYTE *AccessibilityDataSeriesConfiguration.type.setter(_BYTE *result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 32) = *result;
  return result;
}

uint64_t (*AccessibilityDataSeriesConfiguration.type.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t AccessibilityDataSeriesConfiguration.supportsSonification.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 33);
}

uint64_t AccessibilityDataSeriesConfiguration.supportsSonification.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 33) = result;
  return result;
}

uint64_t (*AccessibilityDataSeriesConfiguration.supportsSonification.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t AccessibilityDataSeriesConfiguration.sonificationDuration.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 40);
}

uint64_t AccessibilityDataSeriesConfiguration.sonificationDuration.setter(uint64_t result, char a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 40) = result;
  *(_BYTE *)(v2 + 48) = a2 & 1;
  return result;
}

uint64_t (*AccessibilityDataSeriesConfiguration.sonificationDuration.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t AccessibilityDataSeriesConfiguration.includesTrendlineInSonification.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 49);
}

uint64_t AccessibilityDataSeriesConfiguration.includesTrendlineInSonification.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 49) = result;
  return result;
}

uint64_t (*AccessibilityDataSeriesConfiguration.includesTrendlineInSonification.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t AccessibilityDataSeriesConfiguration.supportsSummarization.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 50);
}

uint64_t AccessibilityDataSeriesConfiguration.supportsSummarization.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 50) = result;
  return result;
}

uint64_t (*AccessibilityDataSeriesConfiguration.supportsSummarization.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

_QWORD *AccessibilityDataSeriesConfiguration.xAxisConfiguration.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  _QWORD v4[16];

  outlined init with take of AccessibilityDataSeriesConfiguration.AxisConfiguration?(v1 + 56, (uint64_t)v4);
  outlined init with take of AccessibilityDataSeriesConfiguration.AxisConfiguration?((uint64_t)v4, a1);
  return outlined retain of AccessibilityDataSeriesConfiguration.AxisConfiguration?(v4, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of AccessibilityDataSeriesConfiguration.AxisConfiguration?);
}

uint64_t outlined init with take of AccessibilityDataSeriesConfiguration.AxisConfiguration?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for AccessibilityDataSeriesConfiguration.AxisConfiguration?, (uint64_t)&type metadata for AccessibilityDataSeriesConfiguration.AxisConfiguration, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1C68]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t AccessibilityDataSeriesConfiguration.xAxisConfiguration.setter(uint64_t a1)
{
  uint64_t v1;
  _BYTE v3[128];
  _QWORD v4[17];

  outlined init with take of AccessibilityDataSeriesConfiguration.AxisConfiguration?(a1, (uint64_t)v3);
  outlined init with take of AccessibilityDataSeriesConfiguration.AxisConfiguration?(v1 + 56, (uint64_t)v4);
  outlined retain of AccessibilityDataSeriesConfiguration.AxisConfiguration?(v4, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of AccessibilityDataSeriesConfiguration.AxisConfiguration?);
  return outlined init with take of AccessibilityDataSeriesConfiguration.AxisConfiguration?((uint64_t)v3, v1 + 56);
}

_QWORD *outlined retain of AccessibilityDataSeriesConfiguration.AxisConfiguration?(_QWORD *a1, void (*a2)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  a2(*a1, a1[1], a1[2], a1[3], a1[4], a1[5], a1[6], a1[7], a1[8], a1[9], a1[10], a1[11], a1[12], a1[13], a1[14], a1[15]);
  return a1;
}

uint64_t (*AccessibilityDataSeriesConfiguration.xAxisConfiguration.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

_QWORD *AccessibilityDataSeriesConfiguration.yAxisConfiguration.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  _QWORD v4[16];

  outlined init with take of AccessibilityDataSeriesConfiguration.AxisConfiguration?(v1 + 184, (uint64_t)v4);
  outlined init with take of AccessibilityDataSeriesConfiguration.AxisConfiguration?((uint64_t)v4, a1);
  return outlined retain of AccessibilityDataSeriesConfiguration.AxisConfiguration?(v4, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of AccessibilityDataSeriesConfiguration.AxisConfiguration?);
}

uint64_t AccessibilityDataSeriesConfiguration.yAxisConfiguration.setter(uint64_t a1)
{
  uint64_t v1;
  _BYTE v3[128];
  _QWORD v4[17];

  outlined init with take of AccessibilityDataSeriesConfiguration.AxisConfiguration?(a1, (uint64_t)v3);
  outlined init with take of AccessibilityDataSeriesConfiguration.AxisConfiguration?(v1 + 184, (uint64_t)v4);
  outlined retain of AccessibilityDataSeriesConfiguration.AxisConfiguration?(v4, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of AccessibilityDataSeriesConfiguration.AxisConfiguration?);
  return outlined init with take of AccessibilityDataSeriesConfiguration.AxisConfiguration?((uint64_t)v3, v1 + 184);
}

uint64_t (*AccessibilityDataSeriesConfiguration.yAxisConfiguration.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

void *AccessibilityDataSeriesConfiguration.init(name:type:supportsSonification:sonificationDuration:includesTrendlineInSonification:supportsSummarization:xAxisConfiguration:yAxisConfiguration:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, char *a5@<X4>, char a6@<W5>, uint64_t a7@<X6>, char a8@<W7>, void *a9@<X8>, __int16 a10, uint64_t a11, uint64_t a12)
{
  char v18;
  _BYTE v22[128];
  _BYTE v23[128];
  _QWORD __src[40];

  v18 = *a5;
  outlined init with take of AccessibilityDataSeriesConfiguration.AxisConfiguration?(a11, (uint64_t)v22);
  outlined init with take of AccessibilityDataSeriesConfiguration.AxisConfiguration?(a12, (uint64_t)v23);
  __src[0] = a1;
  __src[1] = a2;
  LOBYTE(__src[2]) = a3 & 1;
  __src[3] = a4;
  LOBYTE(__src[4]) = v18;
  BYTE1(__src[4]) = a6;
  __src[5] = a7;
  LOBYTE(__src[6]) = a8 & 1;
  *(_WORD *)((char *)&__src[6] + 1) = a10;
  outlined init with take of AccessibilityDataSeriesConfiguration.AxisConfiguration?((uint64_t)v22, (uint64_t)&__src[7]);
  outlined init with take of AccessibilityDataSeriesConfiguration.AxisConfiguration?((uint64_t)v23, (uint64_t)&__src[23]);
  return memcpy(a9, __src, 0x138uLL);
}

unint64_t lazy protocol witness table accessor for type AccessibilityDataSeriesConfiguration.DataSeriesType and conformance AccessibilityDataSeriesConfiguration.DataSeriesType()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AccessibilityDataSeriesConfiguration.DataSeriesType and conformance AccessibilityDataSeriesConfiguration.DataSeriesType;
  if (!lazy protocol witness table cache variable for type AccessibilityDataSeriesConfiguration.DataSeriesType and conformance AccessibilityDataSeriesConfiguration.DataSeriesType)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for AccessibilityDataSeriesConfiguration.DataSeriesType, &type metadata for AccessibilityDataSeriesConfiguration.DataSeriesType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityDataSeriesConfiguration.DataSeriesType and conformance AccessibilityDataSeriesConfiguration.DataSeriesType);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AccessibilityDataSeriesConfiguration.DataSeriesType and conformance AccessibilityDataSeriesConfiguration.DataSeriesType;
  if (!lazy protocol witness table cache variable for type AccessibilityDataSeriesConfiguration.DataSeriesType and conformance AccessibilityDataSeriesConfiguration.DataSeriesType)
  {
    result = MEMORY[0x23B7C9C04]("Yb<\x1B\\\"\v", &type metadata for AccessibilityDataSeriesConfiguration.DataSeriesType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityDataSeriesConfiguration.DataSeriesType and conformance AccessibilityDataSeriesConfiguration.DataSeriesType);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AccessibilityDataSeriesConfiguration.DataSeriesType and conformance AccessibilityDataSeriesConfiguration.DataSeriesType;
  if (!lazy protocol witness table cache variable for type AccessibilityDataSeriesConfiguration.DataSeriesType and conformance AccessibilityDataSeriesConfiguration.DataSeriesType)
  {
    result = MEMORY[0x23B7C9C04]("Ab<\x1B4\"\v", &type metadata for AccessibilityDataSeriesConfiguration.DataSeriesType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityDataSeriesConfiguration.DataSeriesType and conformance AccessibilityDataSeriesConfiguration.DataSeriesType);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AccessibilityDataSeriesConfiguration.DataSeriesType and conformance AccessibilityDataSeriesConfiguration.DataSeriesType;
  if (!lazy protocol witness table cache variable for type AccessibilityDataSeriesConfiguration.DataSeriesType and conformance AccessibilityDataSeriesConfiguration.DataSeriesType)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for AccessibilityDataSeriesConfiguration.DataSeriesType, &type metadata for AccessibilityDataSeriesConfiguration.DataSeriesType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityDataSeriesConfiguration.DataSeriesType and conformance AccessibilityDataSeriesConfiguration.DataSeriesType);
  }
  return result;
}

uint64_t destroy for AccessibilityDataSeriesConfiguration(uint64_t a1)
{
  uint64_t result;

  outlined consume of Text.Storage(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
  result = swift_bridgeObjectRelease();
  if (*(_QWORD *)(a1 + 120))
  {
    if (*(_QWORD *)(a1 + 80))
    {
      outlined consume of Text.Storage(*(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_BYTE *)(a1 + 72));
      swift_bridgeObjectRelease();
    }
    if (*(_QWORD *)(a1 + 112))
    {
      outlined consume of Text.Storage(*(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_BYTE *)(a1 + 104));
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    result = swift_bridgeObjectRelease();
  }
  if (*(_QWORD *)(a1 + 248))
  {
    if (*(_QWORD *)(a1 + 208))
    {
      outlined consume of Text.Storage(*(_QWORD *)(a1 + 184), *(_QWORD *)(a1 + 192), *(_BYTE *)(a1 + 200));
      swift_bridgeObjectRelease();
    }
    if (*(_QWORD *)(a1 + 240))
    {
      outlined consume of Text.Storage(*(_QWORD *)(a1 + 216), *(_QWORD *)(a1 + 224), *(_BYTE *)(a1 + 232));
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t initializeWithCopy for AccessibilityDataSeriesConfiguration(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char v6;
  _OWORD *v7;
  _OWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  _OWORD *v26;
  _OWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;
  uint64_t v44;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  v6 = *(_BYTE *)(a2 + 16);
  outlined copy of Text.Storage(*(_QWORD *)a2, v5, v6);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  *(_BYTE *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_WORD *)(a1 + 32) = *(_WORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_WORD *)(a1 + 49) = *(_WORD *)(a2 + 49);
  v7 = (_OWORD *)(a1 + 56);
  v8 = (_OWORD *)(a2 + 56);
  v9 = *(_QWORD *)(a2 + 120);
  swift_bridgeObjectRetain();
  if (!v9)
  {
    v18 = *(_OWORD *)(a2 + 136);
    *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
    *(_OWORD *)(a1 + 136) = v18;
    v19 = *(_OWORD *)(a2 + 168);
    *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
    *(_OWORD *)(a1 + 168) = v19;
    v20 = *(_OWORD *)(a2 + 72);
    *v7 = *v8;
    *(_OWORD *)(a1 + 72) = v20;
    v21 = *(_OWORD *)(a2 + 104);
    *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
    *(_OWORD *)(a1 + 104) = v21;
    goto LABEL_9;
  }
  v10 = *(_QWORD *)(a2 + 80);
  if (!v10)
  {
    v22 = *(_OWORD *)(a2 + 72);
    *v7 = *v8;
    *(_OWORD *)(a1 + 72) = v22;
    v14 = *(_QWORD *)(a2 + 112);
    if (v14)
      goto LABEL_4;
LABEL_7:
    v23 = *(_OWORD *)(a2 + 104);
    *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
    *(_OWORD *)(a1 + 104) = v23;
    goto LABEL_8;
  }
  v11 = *(_QWORD *)(a2 + 56);
  v12 = *(_QWORD *)(a2 + 64);
  v13 = *(_BYTE *)(a2 + 72);
  outlined copy of Text.Storage(v11, v12, v13);
  *(_QWORD *)(a1 + 56) = v11;
  *(_QWORD *)(a1 + 64) = v12;
  *(_BYTE *)(a1 + 72) = v13;
  *(_QWORD *)(a1 + 80) = v10;
  swift_bridgeObjectRetain();
  v14 = *(_QWORD *)(a2 + 112);
  if (!v14)
    goto LABEL_7;
LABEL_4:
  v15 = *(_QWORD *)(a2 + 88);
  v16 = *(_QWORD *)(a2 + 96);
  v17 = *(_BYTE *)(a2 + 104);
  outlined copy of Text.Storage(v15, v16, v17);
  *(_QWORD *)(a1 + 88) = v15;
  *(_QWORD *)(a1 + 96) = v16;
  *(_BYTE *)(a1 + 104) = v17;
  *(_QWORD *)(a1 + 112) = v14;
  swift_bridgeObjectRetain();
LABEL_8:
  v24 = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 120) = v9;
  *(_QWORD *)(a1 + 128) = v24;
  *(_BYTE *)(a1 + 136) = *(_BYTE *)(a2 + 136);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_BYTE *)(a1 + 152) = *(_BYTE *)(a2 + 152);
  v25 = *(_QWORD *)(a2 + 168);
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  *(_QWORD *)(a1 + 168) = v25;
  *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
LABEL_9:
  v26 = (_OWORD *)(a1 + 184);
  v27 = (_OWORD *)(a2 + 184);
  v28 = *(_QWORD *)(a2 + 248);
  if (v28)
  {
    v29 = *(_QWORD *)(a2 + 208);
    if (v29)
    {
      v30 = *(_QWORD *)(a2 + 184);
      v31 = *(_QWORD *)(a2 + 192);
      v32 = *(_BYTE *)(a2 + 200);
      outlined copy of Text.Storage(v30, v31, v32);
      *(_QWORD *)(a1 + 184) = v30;
      *(_QWORD *)(a1 + 192) = v31;
      *(_BYTE *)(a1 + 200) = v32;
      *(_QWORD *)(a1 + 208) = v29;
      swift_bridgeObjectRetain();
      v33 = *(_QWORD *)(a2 + 240);
      if (v33)
      {
LABEL_12:
        v34 = *(_QWORD *)(a2 + 216);
        v35 = *(_QWORD *)(a2 + 224);
        v36 = *(_BYTE *)(a2 + 232);
        outlined copy of Text.Storage(v34, v35, v36);
        *(_QWORD *)(a1 + 216) = v34;
        *(_QWORD *)(a1 + 224) = v35;
        *(_BYTE *)(a1 + 232) = v36;
        *(_QWORD *)(a1 + 240) = v33;
        swift_bridgeObjectRetain();
LABEL_16:
        v43 = *(_QWORD *)(a2 + 256);
        *(_QWORD *)(a1 + 248) = v28;
        *(_QWORD *)(a1 + 256) = v43;
        *(_BYTE *)(a1 + 264) = *(_BYTE *)(a2 + 264);
        *(_QWORD *)(a1 + 272) = *(_QWORD *)(a2 + 272);
        *(_BYTE *)(a1 + 280) = *(_BYTE *)(a2 + 280);
        v44 = *(_QWORD *)(a2 + 296);
        *(_QWORD *)(a1 + 288) = *(_QWORD *)(a2 + 288);
        *(_QWORD *)(a1 + 296) = v44;
        *(_QWORD *)(a1 + 304) = *(_QWORD *)(a2 + 304);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        return a1;
      }
    }
    else
    {
      v41 = *(_OWORD *)(a2 + 200);
      *v26 = *v27;
      *(_OWORD *)(a1 + 200) = v41;
      v33 = *(_QWORD *)(a2 + 240);
      if (v33)
        goto LABEL_12;
    }
    v42 = *(_OWORD *)(a2 + 232);
    *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 216);
    *(_OWORD *)(a1 + 232) = v42;
    goto LABEL_16;
  }
  v37 = *(_OWORD *)(a2 + 264);
  *(_OWORD *)(a1 + 248) = *(_OWORD *)(a2 + 248);
  *(_OWORD *)(a1 + 264) = v37;
  v38 = *(_OWORD *)(a2 + 296);
  *(_OWORD *)(a1 + 280) = *(_OWORD *)(a2 + 280);
  *(_OWORD *)(a1 + 296) = v38;
  v39 = *(_OWORD *)(a2 + 200);
  *v26 = *v27;
  *(_OWORD *)(a1 + 200) = v39;
  v40 = *(_OWORD *)(a2 + 232);
  *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 216);
  *(_OWORD *)(a1 + 232) = v40;
  return a1;
}

uint64_t assignWithCopy for AccessibilityDataSeriesConfiguration(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  __int128 *v11;
  __int128 *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  uint64_t v45;
  uint64_t v46;
  __int128 v47;
  _OWORD *v48;
  _OWORD *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  uint64_t v57;
  uint64_t v58;
  char v59;
  __int128 v60;
  __int128 v61;
  uint64_t v62;
  __int128 *v63;
  __int128 *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char v69;
  uint64_t v70;
  uint64_t v71;
  char v72;
  uint64_t v73;
  uint64_t v74;
  char v75;
  uint64_t v76;
  uint64_t v77;
  char v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  uint64_t v85;
  uint64_t v86;
  char v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  uint64_t v97;
  uint64_t v98;
  __int128 v99;
  _OWORD *v100;
  _OWORD *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  char v105;
  uint64_t v106;
  uint64_t v107;
  char v108;
  uint64_t v109;
  uint64_t v110;
  char v111;
  __int128 v112;
  __int128 v113;
  uint64_t v114;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  v6 = *(_BYTE *)(a2 + 16);
  outlined copy of Text.Storage(*(_QWORD *)a2, v5, v6);
  v7 = *(_QWORD *)a1;
  v8 = *(_QWORD *)(a1 + 8);
  v9 = *(_BYTE *)(a1 + 16);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  *(_BYTE *)(a1 + 16) = v6;
  outlined consume of Text.Storage(v7, v8, v9);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_BYTE *)(a1 + 33) = *(_BYTE *)(a2 + 33);
  v10 = *(_QWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = v10;
  *(_BYTE *)(a1 + 49) = *(_BYTE *)(a2 + 49);
  *(_BYTE *)(a1 + 50) = *(_BYTE *)(a2 + 50);
  v11 = (__int128 *)(a1 + 56);
  v12 = (__int128 *)(a2 + 56);
  v13 = *(_QWORD *)(a2 + 120);
  if (!*(_QWORD *)(a1 + 120))
  {
    if (!v13)
    {
      v36 = *v12;
      v37 = *(_OWORD *)(a2 + 72);
      v38 = *(_OWORD *)(a2 + 104);
      *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
      *(_OWORD *)(a1 + 104) = v38;
      *v11 = v36;
      *(_OWORD *)(a1 + 72) = v37;
      v39 = *(_OWORD *)(a2 + 120);
      v40 = *(_OWORD *)(a2 + 136);
      v41 = *(_OWORD *)(a2 + 168);
      *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
      *(_OWORD *)(a1 + 168) = v41;
      *(_OWORD *)(a1 + 120) = v39;
      *(_OWORD *)(a1 + 136) = v40;
      goto LABEL_27;
    }
    if (*(_QWORD *)(a2 + 80))
    {
      v21 = *(_QWORD *)(a2 + 56);
      v22 = *(_QWORD *)(a2 + 64);
      v23 = *(_BYTE *)(a2 + 72);
      outlined copy of Text.Storage(v21, v22, v23);
      *(_QWORD *)(a1 + 56) = v21;
      *(_QWORD *)(a1 + 64) = v22;
      *(_BYTE *)(a1 + 72) = v23;
      *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
      swift_bridgeObjectRetain();
      if (*(_QWORD *)(a2 + 112))
      {
LABEL_9:
        v24 = *(_QWORD *)(a2 + 88);
        v25 = *(_QWORD *)(a2 + 96);
        v26 = *(_BYTE *)(a2 + 104);
        outlined copy of Text.Storage(v24, v25, v26);
        *(_QWORD *)(a1 + 88) = v24;
        *(_QWORD *)(a1 + 96) = v25;
        *(_BYTE *)(a1 + 104) = v26;
        *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
        swift_bridgeObjectRetain();
LABEL_17:
        *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
        v45 = *(_QWORD *)(a2 + 128);
        *(_BYTE *)(a1 + 136) = *(_BYTE *)(a2 + 136);
        *(_QWORD *)(a1 + 128) = v45;
        v46 = *(_QWORD *)(a2 + 144);
        *(_BYTE *)(a1 + 152) = *(_BYTE *)(a2 + 152);
        *(_QWORD *)(a1 + 144) = v46;
        *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
        *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
        *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        goto LABEL_27;
      }
    }
    else
    {
      v43 = *(_OWORD *)(a2 + 72);
      *v11 = *v12;
      *(_OWORD *)(a1 + 72) = v43;
      if (*(_QWORD *)(a2 + 112))
        goto LABEL_9;
    }
    v44 = *(_OWORD *)(a2 + 104);
    *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
    *(_OWORD *)(a1 + 104) = v44;
    goto LABEL_17;
  }
  if (v13)
  {
    v14 = *(_QWORD *)(a2 + 80);
    if (*(_QWORD *)(a1 + 80))
    {
      if (v14)
      {
        v15 = *(_QWORD *)(a2 + 56);
        v16 = *(_QWORD *)(a2 + 64);
        v17 = *(_BYTE *)(a2 + 72);
        outlined copy of Text.Storage(v15, v16, v17);
        v18 = *(_QWORD *)(a1 + 56);
        v19 = *(_QWORD *)(a1 + 64);
        v20 = *(_BYTE *)(a1 + 72);
        *(_QWORD *)(a1 + 56) = v15;
        *(_QWORD *)(a1 + 64) = v16;
        *(_BYTE *)(a1 + 72) = v17;
        outlined consume of Text.Storage(v18, v19, v20);
        *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
      }
      else
      {
        outlined destroy of Text(a1 + 56);
        v42 = *(_OWORD *)(a2 + 72);
        *v11 = *v12;
        *(_OWORD *)(a1 + 72) = v42;
      }
    }
    else if (v14)
    {
      v33 = *(_QWORD *)(a2 + 56);
      v34 = *(_QWORD *)(a2 + 64);
      v35 = *(_BYTE *)(a2 + 72);
      outlined copy of Text.Storage(v33, v34, v35);
      *(_QWORD *)(a1 + 56) = v33;
      *(_QWORD *)(a1 + 64) = v34;
      *(_BYTE *)(a1 + 72) = v35;
      *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
      swift_bridgeObjectRetain();
    }
    else
    {
      v47 = *(_OWORD *)(a2 + 72);
      *v11 = *v12;
      *(_OWORD *)(a1 + 72) = v47;
    }
    v48 = (_OWORD *)(a1 + 88);
    v49 = (_OWORD *)(a2 + 88);
    v50 = *(_QWORD *)(a2 + 112);
    if (*(_QWORD *)(a1 + 112))
    {
      if (v50)
      {
        v51 = *(_QWORD *)(a2 + 88);
        v52 = *(_QWORD *)(a2 + 96);
        v53 = *(_BYTE *)(a2 + 104);
        outlined copy of Text.Storage(v51, v52, v53);
        v54 = *(_QWORD *)(a1 + 88);
        v55 = *(_QWORD *)(a1 + 96);
        v56 = *(_BYTE *)(a1 + 104);
        *(_QWORD *)(a1 + 88) = v51;
        *(_QWORD *)(a1 + 96) = v52;
        *(_BYTE *)(a1 + 104) = v53;
        outlined consume of Text.Storage(v54, v55, v56);
        *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
      }
      else
      {
        outlined destroy of Text(a1 + 88);
        v60 = *(_OWORD *)(a2 + 104);
        *v48 = *v49;
        *(_OWORD *)(a1 + 104) = v60;
      }
    }
    else if (v50)
    {
      v57 = *(_QWORD *)(a2 + 88);
      v58 = *(_QWORD *)(a2 + 96);
      v59 = *(_BYTE *)(a2 + 104);
      outlined copy of Text.Storage(v57, v58, v59);
      *(_QWORD *)(a1 + 88) = v57;
      *(_QWORD *)(a1 + 96) = v58;
      *(_BYTE *)(a1 + 104) = v59;
      *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
      swift_bridgeObjectRetain();
    }
    else
    {
      v61 = *(_OWORD *)(a2 + 104);
      *v48 = *v49;
      *(_OWORD *)(a1 + 104) = v61;
    }
    *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v62 = *(_QWORD *)(a2 + 128);
    *(_BYTE *)(a1 + 136) = *(_BYTE *)(a2 + 136);
    *(_QWORD *)(a1 + 128) = v62;
    LOBYTE(v62) = *(_BYTE *)(a2 + 152);
    *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
    *(_BYTE *)(a1 + 152) = v62;
    *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  else
  {
    outlined destroy of AccessibilityDataSeriesConfiguration.AxisConfiguration(a1 + 56);
    v27 = *(_OWORD *)(a2 + 104);
    v29 = *v12;
    v28 = *(_OWORD *)(a2 + 72);
    *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
    *(_OWORD *)(a1 + 104) = v27;
    *v11 = v29;
    *(_OWORD *)(a1 + 72) = v28;
    v30 = *(_OWORD *)(a2 + 168);
    v32 = *(_OWORD *)(a2 + 120);
    v31 = *(_OWORD *)(a2 + 136);
    *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
    *(_OWORD *)(a1 + 168) = v30;
    *(_OWORD *)(a1 + 120) = v32;
    *(_OWORD *)(a1 + 136) = v31;
  }
LABEL_27:
  v63 = (__int128 *)(a1 + 184);
  v64 = (__int128 *)(a2 + 184);
  v65 = *(_QWORD *)(a2 + 248);
  if (!*(_QWORD *)(a1 + 248))
  {
    if (!v65)
    {
      v88 = *v64;
      v89 = *(_OWORD *)(a2 + 200);
      v90 = *(_OWORD *)(a2 + 232);
      *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 216);
      *(_OWORD *)(a1 + 232) = v90;
      *v63 = v88;
      *(_OWORD *)(a1 + 200) = v89;
      v91 = *(_OWORD *)(a2 + 248);
      v92 = *(_OWORD *)(a2 + 264);
      v93 = *(_OWORD *)(a2 + 296);
      *(_OWORD *)(a1 + 280) = *(_OWORD *)(a2 + 280);
      *(_OWORD *)(a1 + 296) = v93;
      *(_OWORD *)(a1 + 248) = v91;
      *(_OWORD *)(a1 + 264) = v92;
      return a1;
    }
    if (*(_QWORD *)(a2 + 208))
    {
      v73 = *(_QWORD *)(a2 + 184);
      v74 = *(_QWORD *)(a2 + 192);
      v75 = *(_BYTE *)(a2 + 200);
      outlined copy of Text.Storage(v73, v74, v75);
      *(_QWORD *)(a1 + 184) = v73;
      *(_QWORD *)(a1 + 192) = v74;
      *(_BYTE *)(a1 + 200) = v75;
      *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
      swift_bridgeObjectRetain();
      if (*(_QWORD *)(a2 + 240))
      {
LABEL_35:
        v76 = *(_QWORD *)(a2 + 216);
        v77 = *(_QWORD *)(a2 + 224);
        v78 = *(_BYTE *)(a2 + 232);
        outlined copy of Text.Storage(v76, v77, v78);
        *(_QWORD *)(a1 + 216) = v76;
        *(_QWORD *)(a1 + 224) = v77;
        *(_BYTE *)(a1 + 232) = v78;
        *(_QWORD *)(a1 + 240) = *(_QWORD *)(a2 + 240);
        swift_bridgeObjectRetain();
LABEL_43:
        *(_QWORD *)(a1 + 248) = *(_QWORD *)(a2 + 248);
        v97 = *(_QWORD *)(a2 + 256);
        *(_BYTE *)(a1 + 264) = *(_BYTE *)(a2 + 264);
        *(_QWORD *)(a1 + 256) = v97;
        v98 = *(_QWORD *)(a2 + 272);
        *(_BYTE *)(a1 + 280) = *(_BYTE *)(a2 + 280);
        *(_QWORD *)(a1 + 272) = v98;
        *(_QWORD *)(a1 + 288) = *(_QWORD *)(a2 + 288);
        *(_QWORD *)(a1 + 296) = *(_QWORD *)(a2 + 296);
        *(_QWORD *)(a1 + 304) = *(_QWORD *)(a2 + 304);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        return a1;
      }
    }
    else
    {
      v95 = *(_OWORD *)(a2 + 200);
      *v63 = *v64;
      *(_OWORD *)(a1 + 200) = v95;
      if (*(_QWORD *)(a2 + 240))
        goto LABEL_35;
    }
    v96 = *(_OWORD *)(a2 + 232);
    *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 216);
    *(_OWORD *)(a1 + 232) = v96;
    goto LABEL_43;
  }
  if (v65)
  {
    v66 = *(_QWORD *)(a2 + 208);
    if (*(_QWORD *)(a1 + 208))
    {
      if (v66)
      {
        v67 = *(_QWORD *)(a2 + 184);
        v68 = *(_QWORD *)(a2 + 192);
        v69 = *(_BYTE *)(a2 + 200);
        outlined copy of Text.Storage(v67, v68, v69);
        v70 = *(_QWORD *)(a1 + 184);
        v71 = *(_QWORD *)(a1 + 192);
        v72 = *(_BYTE *)(a1 + 200);
        *(_QWORD *)(a1 + 184) = v67;
        *(_QWORD *)(a1 + 192) = v68;
        *(_BYTE *)(a1 + 200) = v69;
        outlined consume of Text.Storage(v70, v71, v72);
        *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
      }
      else
      {
        outlined destroy of Text(a1 + 184);
        v94 = *(_OWORD *)(a2 + 200);
        *v63 = *v64;
        *(_OWORD *)(a1 + 200) = v94;
      }
    }
    else if (v66)
    {
      v85 = *(_QWORD *)(a2 + 184);
      v86 = *(_QWORD *)(a2 + 192);
      v87 = *(_BYTE *)(a2 + 200);
      outlined copy of Text.Storage(v85, v86, v87);
      *(_QWORD *)(a1 + 184) = v85;
      *(_QWORD *)(a1 + 192) = v86;
      *(_BYTE *)(a1 + 200) = v87;
      *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
      swift_bridgeObjectRetain();
    }
    else
    {
      v99 = *(_OWORD *)(a2 + 200);
      *v63 = *v64;
      *(_OWORD *)(a1 + 200) = v99;
    }
    v100 = (_OWORD *)(a1 + 216);
    v101 = (_OWORD *)(a2 + 216);
    v102 = *(_QWORD *)(a2 + 240);
    if (*(_QWORD *)(a1 + 240))
    {
      if (v102)
      {
        v103 = *(_QWORD *)(a2 + 216);
        v104 = *(_QWORD *)(a2 + 224);
        v105 = *(_BYTE *)(a2 + 232);
        outlined copy of Text.Storage(v103, v104, v105);
        v106 = *(_QWORD *)(a1 + 216);
        v107 = *(_QWORD *)(a1 + 224);
        v108 = *(_BYTE *)(a1 + 232);
        *(_QWORD *)(a1 + 216) = v103;
        *(_QWORD *)(a1 + 224) = v104;
        *(_BYTE *)(a1 + 232) = v105;
        outlined consume of Text.Storage(v106, v107, v108);
        *(_QWORD *)(a1 + 240) = *(_QWORD *)(a2 + 240);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
      }
      else
      {
        outlined destroy of Text(a1 + 216);
        v112 = *(_OWORD *)(a2 + 232);
        *v100 = *v101;
        *(_OWORD *)(a1 + 232) = v112;
      }
    }
    else if (v102)
    {
      v109 = *(_QWORD *)(a2 + 216);
      v110 = *(_QWORD *)(a2 + 224);
      v111 = *(_BYTE *)(a2 + 232);
      outlined copy of Text.Storage(v109, v110, v111);
      *(_QWORD *)(a1 + 216) = v109;
      *(_QWORD *)(a1 + 224) = v110;
      *(_BYTE *)(a1 + 232) = v111;
      *(_QWORD *)(a1 + 240) = *(_QWORD *)(a2 + 240);
      swift_bridgeObjectRetain();
    }
    else
    {
      v113 = *(_OWORD *)(a2 + 232);
      *v100 = *v101;
      *(_OWORD *)(a1 + 232) = v113;
    }
    *(_QWORD *)(a1 + 248) = *(_QWORD *)(a2 + 248);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v114 = *(_QWORD *)(a2 + 256);
    *(_BYTE *)(a1 + 264) = *(_BYTE *)(a2 + 264);
    *(_QWORD *)(a1 + 256) = v114;
    LOBYTE(v114) = *(_BYTE *)(a2 + 280);
    *(_QWORD *)(a1 + 272) = *(_QWORD *)(a2 + 272);
    *(_BYTE *)(a1 + 280) = v114;
    *(_QWORD *)(a1 + 288) = *(_QWORD *)(a2 + 288);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(_QWORD *)(a1 + 296) = *(_QWORD *)(a2 + 296);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(_QWORD *)(a1 + 304) = *(_QWORD *)(a2 + 304);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  else
  {
    outlined destroy of AccessibilityDataSeriesConfiguration.AxisConfiguration(a1 + 184);
    v79 = *(_OWORD *)(a2 + 232);
    v81 = *v64;
    v80 = *(_OWORD *)(a2 + 200);
    *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 216);
    *(_OWORD *)(a1 + 232) = v79;
    *v63 = v81;
    *(_OWORD *)(a1 + 200) = v80;
    v82 = *(_OWORD *)(a2 + 296);
    v84 = *(_OWORD *)(a2 + 248);
    v83 = *(_OWORD *)(a2 + 264);
    *(_OWORD *)(a1 + 280) = *(_OWORD *)(a2 + 280);
    *(_OWORD *)(a1 + 296) = v82;
    *(_OWORD *)(a1 + 248) = v84;
    *(_OWORD *)(a1 + 264) = v83;
  }
  return a1;
}

uint64_t outlined destroy of AccessibilityDataSeriesConfiguration.AxisConfiguration(uint64_t a1)
{
  destroy for AccessibilityDataSeriesConfiguration.AxisConfiguration(a1);
  return a1;
}

void *__swift_memcpy312_8(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x138uLL);
}

uint64_t assignWithTake for AccessibilityDataSeriesConfiguration(uint64_t a1, uint64_t a2)
{
  char v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  _OWORD *v8;
  _OWORD *v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  __int128 v23;
  _OWORD *v24;
  _OWORD *v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  __int128 v39;

  v4 = *(_BYTE *)(a2 + 16);
  v5 = *(_QWORD *)a1;
  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(_BYTE *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = v4;
  outlined consume of Text.Storage(v5, v6, v7);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_BYTE *)(a1 + 33) = *(_BYTE *)(a2 + 33);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_BYTE *)(a1 + 49) = *(_BYTE *)(a2 + 49);
  *(_BYTE *)(a1 + 50) = *(_BYTE *)(a2 + 50);
  v8 = (_OWORD *)(a1 + 56);
  v9 = (_OWORD *)(a2 + 56);
  if (!*(_QWORD *)(a1 + 120))
    goto LABEL_7;
  if (!*(_QWORD *)(a2 + 120))
  {
    outlined destroy of AccessibilityDataSeriesConfiguration.AxisConfiguration(a1 + 56);
LABEL_7:
    v14 = *(_OWORD *)(a2 + 136);
    *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
    *(_OWORD *)(a1 + 136) = v14;
    v15 = *(_OWORD *)(a2 + 168);
    *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
    *(_OWORD *)(a1 + 168) = v15;
    v16 = *(_OWORD *)(a2 + 72);
    *v8 = *v9;
    *(_OWORD *)(a1 + 72) = v16;
    v17 = *(_OWORD *)(a2 + 104);
    *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
    *(_OWORD *)(a1 + 104) = v17;
    goto LABEL_16;
  }
  if (*(_QWORD *)(a1 + 80))
  {
    if (*(_QWORD *)(a2 + 80))
    {
      v10 = *(_BYTE *)(a2 + 72);
      v11 = *(_QWORD *)(a1 + 56);
      v12 = *(_QWORD *)(a1 + 64);
      v13 = *(_BYTE *)(a1 + 72);
      *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
      *(_BYTE *)(a1 + 72) = v10;
      outlined consume of Text.Storage(v11, v12, v13);
      *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
      swift_bridgeObjectRelease();
      goto LABEL_10;
    }
    outlined destroy of Text(a1 + 56);
  }
  v18 = *(_OWORD *)(a2 + 72);
  *v8 = *v9;
  *(_OWORD *)(a1 + 72) = v18;
LABEL_10:
  if (!*(_QWORD *)(a1 + 112))
  {
LABEL_14:
    v23 = *(_OWORD *)(a2 + 104);
    *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
    *(_OWORD *)(a1 + 104) = v23;
    goto LABEL_15;
  }
  if (!*(_QWORD *)(a2 + 112))
  {
    outlined destroy of Text(a1 + 88);
    goto LABEL_14;
  }
  v19 = *(_BYTE *)(a2 + 104);
  v20 = *(_QWORD *)(a1 + 88);
  v21 = *(_QWORD *)(a1 + 96);
  v22 = *(_BYTE *)(a1 + 104);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_BYTE *)(a1 + 104) = v19;
  outlined consume of Text.Storage(v20, v21, v22);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  swift_bridgeObjectRelease();
LABEL_15:
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_BYTE *)(a1 + 136) = *(_BYTE *)(a2 + 136);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_BYTE *)(a1 + 152) = *(_BYTE *)(a2 + 152);
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
  swift_bridgeObjectRelease();
LABEL_16:
  v24 = (_OWORD *)(a1 + 184);
  v25 = (_OWORD *)(a2 + 184);
  if (*(_QWORD *)(a1 + 248))
  {
    if (*(_QWORD *)(a2 + 248))
    {
      if (*(_QWORD *)(a1 + 208))
      {
        if (*(_QWORD *)(a2 + 208))
        {
          v26 = *(_BYTE *)(a2 + 200);
          v27 = *(_QWORD *)(a1 + 184);
          v28 = *(_QWORD *)(a1 + 192);
          v29 = *(_BYTE *)(a1 + 200);
          *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 + 184);
          *(_BYTE *)(a1 + 200) = v26;
          outlined consume of Text.Storage(v27, v28, v29);
          *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
          swift_bridgeObjectRelease();
          goto LABEL_25;
        }
        outlined destroy of Text(a1 + 184);
      }
      v34 = *(_OWORD *)(a2 + 200);
      *v24 = *v25;
      *(_OWORD *)(a1 + 200) = v34;
LABEL_25:
      if (*(_QWORD *)(a1 + 240))
      {
        if (*(_QWORD *)(a2 + 240))
        {
          v35 = *(_BYTE *)(a2 + 232);
          v36 = *(_QWORD *)(a1 + 216);
          v37 = *(_QWORD *)(a1 + 224);
          v38 = *(_BYTE *)(a1 + 232);
          *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 216);
          *(_BYTE *)(a1 + 232) = v35;
          outlined consume of Text.Storage(v36, v37, v38);
          *(_QWORD *)(a1 + 240) = *(_QWORD *)(a2 + 240);
          swift_bridgeObjectRelease();
LABEL_30:
          *(_QWORD *)(a1 + 248) = *(_QWORD *)(a2 + 248);
          swift_bridgeObjectRelease();
          *(_QWORD *)(a1 + 256) = *(_QWORD *)(a2 + 256);
          *(_BYTE *)(a1 + 264) = *(_BYTE *)(a2 + 264);
          *(_QWORD *)(a1 + 272) = *(_QWORD *)(a2 + 272);
          *(_BYTE *)(a1 + 280) = *(_BYTE *)(a2 + 280);
          *(_QWORD *)(a1 + 288) = *(_QWORD *)(a2 + 288);
          swift_bridgeObjectRelease();
          *(_QWORD *)(a1 + 296) = *(_QWORD *)(a2 + 296);
          swift_bridgeObjectRelease();
          *(_QWORD *)(a1 + 304) = *(_QWORD *)(a2 + 304);
          swift_bridgeObjectRelease();
          return a1;
        }
        outlined destroy of Text(a1 + 216);
      }
      v39 = *(_OWORD *)(a2 + 232);
      *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 216);
      *(_OWORD *)(a1 + 232) = v39;
      goto LABEL_30;
    }
    outlined destroy of AccessibilityDataSeriesConfiguration.AxisConfiguration(a1 + 184);
  }
  v30 = *(_OWORD *)(a2 + 264);
  *(_OWORD *)(a1 + 248) = *(_OWORD *)(a2 + 248);
  *(_OWORD *)(a1 + 264) = v30;
  v31 = *(_OWORD *)(a2 + 296);
  *(_OWORD *)(a1 + 280) = *(_OWORD *)(a2 + 280);
  *(_OWORD *)(a1 + 296) = v31;
  v32 = *(_OWORD *)(a2 + 200);
  *v24 = *v25;
  *(_OWORD *)(a1 + 200) = v32;
  v33 = *(_OWORD *)(a2 + 232);
  *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 216);
  *(_OWORD *)(a1 + 232) = v33;
  return a1;
}

uint64_t getEnumTagSinglePayload for AccessibilityDataSeriesConfiguration(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 312))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AccessibilityDataSeriesConfiguration(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 296) = 0u;
    *(_OWORD *)(result + 280) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 312) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 24) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 312) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for AccessibilityDataSeriesConfiguration()
{
  return &type metadata for AccessibilityDataSeriesConfiguration;
}

uint64_t destroy for AccessibilityDataSeriesConfiguration.ValueDescription(uint64_t a1)
{
  outlined consume of Text.Storage(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for AccessibilityDataSeriesConfiguration.ValueDescription(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char v6;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  v6 = *(_BYTE *)(a2 + 16);
  outlined copy of Text.Storage(*(_QWORD *)a2, v5, v6);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  *(_BYTE *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for AccessibilityDataSeriesConfiguration.ValueDescription(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  char v9;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  v6 = *(_BYTE *)(a2 + 16);
  outlined copy of Text.Storage(*(_QWORD *)a2, v5, v6);
  v7 = *(_QWORD *)a1;
  v8 = *(_QWORD *)(a1 + 8);
  v9 = *(_BYTE *)(a1 + 16);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  *(_BYTE *)(a1 + 16) = v6;
  outlined consume of Text.Storage(v7, v8, v9);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  return a1;
}

uint64_t assignWithTake for AccessibilityDataSeriesConfiguration.ValueDescription(uint64_t a1, uint64_t a2)
{
  char v4;
  uint64_t v5;
  uint64_t v6;
  char v7;

  v4 = *(_BYTE *)(a2 + 16);
  v5 = *(_QWORD *)a1;
  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(_BYTE *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = v4;
  outlined consume of Text.Storage(v5, v6, v7);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  return a1;
}

uint64_t getEnumTagSinglePayload for AccessibilityDataSeriesConfiguration.ValueDescription(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 48))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AccessibilityDataSeriesConfiguration.ValueDescription(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 48) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 24) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 48) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for AccessibilityDataSeriesConfiguration.ValueDescription()
{
  return &type metadata for AccessibilityDataSeriesConfiguration.ValueDescription;
}

uint64_t destroy for AccessibilityDataSeriesConfiguration.AxisConfiguration(uint64_t a1)
{
  if (*(_QWORD *)(a1 + 24))
  {
    outlined consume of Text.Storage(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
    swift_bridgeObjectRelease();
  }
  if (*(_QWORD *)(a1 + 56))
  {
    outlined consume of Text.Storage(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_BYTE *)(a1 + 48));
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for AccessibilityDataSeriesConfiguration.AxisConfiguration(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;

  v4 = a2[3];
  if (!v4)
  {
    v12 = *((_OWORD *)a2 + 1);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v12;
    v8 = a2[7];
    if (v8)
      goto LABEL_3;
LABEL_5:
    v13 = *((_OWORD *)a2 + 3);
    *(_OWORD *)(a1 + 32) = *((_OWORD *)a2 + 2);
    *(_OWORD *)(a1 + 48) = v13;
    goto LABEL_6;
  }
  v5 = *a2;
  v6 = a2[1];
  v7 = *((_BYTE *)a2 + 16);
  outlined copy of Text.Storage(*a2, v6, v7);
  *(_QWORD *)a1 = v5;
  *(_QWORD *)(a1 + 8) = v6;
  *(_BYTE *)(a1 + 16) = v7;
  *(_QWORD *)(a1 + 24) = v4;
  swift_bridgeObjectRetain();
  v8 = a2[7];
  if (!v8)
    goto LABEL_5;
LABEL_3:
  v9 = a2[4];
  v10 = a2[5];
  v11 = *((_BYTE *)a2 + 48);
  outlined copy of Text.Storage(v9, v10, v11);
  *(_QWORD *)(a1 + 32) = v9;
  *(_QWORD *)(a1 + 40) = v10;
  *(_BYTE *)(a1 + 48) = v11;
  *(_QWORD *)(a1 + 56) = v8;
  swift_bridgeObjectRetain();
LABEL_6:
  v14 = a2[9];
  *(_QWORD *)(a1 + 64) = a2[8];
  *(_QWORD *)(a1 + 72) = v14;
  *(_BYTE *)(a1 + 80) = *((_BYTE *)a2 + 80);
  *(_QWORD *)(a1 + 88) = a2[11];
  *(_BYTE *)(a1 + 96) = *((_BYTE *)a2 + 96);
  v15 = a2[14];
  *(_QWORD *)(a1 + 104) = a2[13];
  *(_QWORD *)(a1 + 112) = v15;
  *(_QWORD *)(a1 + 120) = a2[15];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for AccessibilityDataSeriesConfiguration.AxisConfiguration(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  __int128 v14;
  __int128 v15;
  _OWORD *v16;
  _OWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;

  v4 = *(_QWORD *)(a2 + 24);
  if (*(_QWORD *)(a1 + 24))
  {
    if (v4)
    {
      v5 = *(_QWORD *)a2;
      v6 = *(_QWORD *)(a2 + 8);
      v7 = *(_BYTE *)(a2 + 16);
      outlined copy of Text.Storage(*(_QWORD *)a2, v6, v7);
      v8 = *(_QWORD *)a1;
      v9 = *(_QWORD *)(a1 + 8);
      v10 = *(_BYTE *)(a1 + 16);
      *(_QWORD *)a1 = v5;
      *(_QWORD *)(a1 + 8) = v6;
      *(_BYTE *)(a1 + 16) = v7;
      outlined consume of Text.Storage(v8, v9, v10);
      *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      outlined destroy of Text(a1);
      v14 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v14;
    }
  }
  else if (v4)
  {
    v11 = *(_QWORD *)a2;
    v12 = *(_QWORD *)(a2 + 8);
    v13 = *(_BYTE *)(a2 + 16);
    outlined copy of Text.Storage(*(_QWORD *)a2, v12, v13);
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v12;
    *(_BYTE *)(a1 + 16) = v13;
    *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
    swift_bridgeObjectRetain();
  }
  else
  {
    v15 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v15;
  }
  v16 = (_OWORD *)(a1 + 32);
  v17 = (_OWORD *)(a2 + 32);
  v18 = *(_QWORD *)(a2 + 56);
  if (*(_QWORD *)(a1 + 56))
  {
    if (v18)
    {
      v19 = *(_QWORD *)(a2 + 32);
      v20 = *(_QWORD *)(a2 + 40);
      v21 = *(_BYTE *)(a2 + 48);
      outlined copy of Text.Storage(v19, v20, v21);
      v22 = *(_QWORD *)(a1 + 32);
      v23 = *(_QWORD *)(a1 + 40);
      v24 = *(_BYTE *)(a1 + 48);
      *(_QWORD *)(a1 + 32) = v19;
      *(_QWORD *)(a1 + 40) = v20;
      *(_BYTE *)(a1 + 48) = v21;
      outlined consume of Text.Storage(v22, v23, v24);
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      outlined destroy of Text(a1 + 32);
      v28 = *(_OWORD *)(a2 + 48);
      *v16 = *v17;
      *(_OWORD *)(a1 + 48) = v28;
    }
  }
  else if (v18)
  {
    v25 = *(_QWORD *)(a2 + 32);
    v26 = *(_QWORD *)(a2 + 40);
    v27 = *(_BYTE *)(a2 + 48);
    outlined copy of Text.Storage(v25, v26, v27);
    *(_QWORD *)(a1 + 32) = v25;
    *(_QWORD *)(a1 + 40) = v26;
    *(_BYTE *)(a1 + 48) = v27;
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
    swift_bridgeObjectRetain();
  }
  else
  {
    v29 = *(_OWORD *)(a2 + 48);
    *v16 = *v17;
    *(_OWORD *)(a1 + 48) = v29;
  }
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v30 = *(_QWORD *)(a2 + 72);
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  *(_QWORD *)(a1 + 72) = v30;
  LOBYTE(v30) = *(_BYTE *)(a2 + 96);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_BYTE *)(a1 + 96) = v30;
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for AccessibilityDataSeriesConfiguration.AxisConfiguration(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  __int128 v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  __int128 v15;

  if (*(_QWORD *)(a1 + 24))
  {
    v4 = *(_QWORD *)(a2 + 24);
    if (v4)
    {
      v5 = *(_BYTE *)(a2 + 16);
      v6 = *(_QWORD *)a1;
      v7 = *(_QWORD *)(a1 + 8);
      v8 = *(_BYTE *)(a1 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_BYTE *)(a1 + 16) = v5;
      outlined consume of Text.Storage(v6, v7, v8);
      *(_QWORD *)(a1 + 24) = v4;
      swift_bridgeObjectRelease();
      goto LABEL_6;
    }
    outlined destroy of Text(a1);
  }
  v9 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v9;
LABEL_6:
  if (!*(_QWORD *)(a1 + 56))
  {
LABEL_10:
    v15 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 48) = v15;
    goto LABEL_11;
  }
  v10 = *(_QWORD *)(a2 + 56);
  if (!v10)
  {
    outlined destroy of Text(a1 + 32);
    goto LABEL_10;
  }
  v11 = *(_BYTE *)(a2 + 48);
  v12 = *(_QWORD *)(a1 + 32);
  v13 = *(_QWORD *)(a1 + 40);
  v14 = *(_BYTE *)(a1 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 48) = v11;
  outlined consume of Text.Storage(v12, v13, v14);
  *(_QWORD *)(a1 + 56) = v10;
  swift_bridgeObjectRelease();
LABEL_11:
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for AccessibilityDataSeriesConfiguration.AxisConfiguration(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 128))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 64);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AccessibilityDataSeriesConfiguration.AxisConfiguration(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 120) = 0;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 128) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 64) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 128) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for AccessibilityDataSeriesConfiguration.AxisConfiguration()
{
  return &type metadata for AccessibilityDataSeriesConfiguration.AxisConfiguration;
}

uint64_t storeEnumTagSinglePayload for AccessibilityDataSeriesConfiguration.DataSeriesType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_234D32168 + 4 * byte_23529B6F5[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_234D3219C + 4 * byte_23529B6F0[v4]))();
}

uint64_t sub_234D3219C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_234D321A4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x234D321ACLL);
  return result;
}

uint64_t sub_234D321B8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x234D321C0);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_234D321C4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_234D321CC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AccessibilityDataSeriesConfiguration.DataSeriesType()
{
  return &type metadata for AccessibilityDataSeriesConfiguration.DataSeriesType;
}

id outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(void *a1, uint64_t a2, char a3, char a4)
{
  if ((a4 & 1) != 0)
    return outlined copy of AccessibilityText.Storage(a1, a2, a3 & 1);
  else
    return (id)swift_retain();
}

uint64_t destroy for CodableAccessibilityDataSeriesConfiguration.AxisConfiguration(uint64_t a1)
{
  int v2;
  int v3;

  if (*(unsigned __int8 *)(a1 + 18) != 255)
  {
    v2 = *(unsigned __int16 *)(a1 + 16) | (*(unsigned __int8 *)(a1 + 18) << 16);
    outlined consume of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(*(void **)a1, *(_QWORD *)(a1 + 8), v2, BYTE2(v2) & 1);
  }
  if (*(unsigned __int8 *)(a1 + 42) != 255)
  {
    v3 = *(unsigned __int16 *)(a1 + 40) | (*(unsigned __int8 *)(a1 + 42) << 16);
    outlined consume of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(*(void **)(a1 + 24), *(_QWORD *)(a1 + 32), v3, BYTE2(v3) & 1);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for CodableAccessibilityDataSeriesConfiguration.AxisConfiguration(uint64_t a1, uint64_t *a2)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (*((unsigned __int8 *)a2 + 18) == 255)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_DWORD *)(a1 + 15) = *(_DWORD *)((char *)a2 + 15);
  }
  else
  {
    v4 = *((unsigned __int16 *)a2 + 8) | (*((unsigned __int8 *)a2 + 18) << 16);
    v5 = *a2;
    v6 = a2[1];
    outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>((void *)*a2, v6, *((_WORD *)a2 + 8), BYTE2(v4) & 1);
    *(_QWORD *)a1 = v5;
    *(_QWORD *)(a1 + 8) = v6;
    *(_WORD *)(a1 + 16) = v4;
    *(_BYTE *)(a1 + 18) = BYTE2(v4) & 1;
  }
  if (*((unsigned __int8 *)a2 + 42) == 255)
  {
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 3);
    *(_DWORD *)(a1 + 39) = *(_DWORD *)((char *)a2 + 39);
  }
  else
  {
    v7 = *((unsigned __int16 *)a2 + 20) | (*((unsigned __int8 *)a2 + 42) << 16);
    v8 = (void *)a2[3];
    v9 = a2[4];
    outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v8, v9, *((_WORD *)a2 + 20), BYTE2(v7) & 1);
    *(_QWORD *)(a1 + 24) = v8;
    *(_QWORD *)(a1 + 32) = v9;
    *(_WORD *)(a1 + 40) = v7;
    *(_BYTE *)(a1 + 42) = BYTE2(v7) & 1;
  }
  v10 = a2[7];
  *(_QWORD *)(a1 + 48) = a2[6];
  *(_QWORD *)(a1 + 56) = v10;
  *(_BYTE *)(a1 + 64) = *((_BYTE *)a2 + 64);
  *(_QWORD *)(a1 + 72) = a2[9];
  *(_BYTE *)(a1 + 80) = *((_BYTE *)a2 + 80);
  v11 = a2[12];
  *(_QWORD *)(a1 + 88) = a2[11];
  *(_QWORD *)(a1 + 96) = v11;
  *(_QWORD *)(a1 + 104) = a2[13];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for CodableAccessibilityDataSeriesConfiguration.AxisConfiguration(uint64_t a1, __int128 *a2)
{
  int v4;
  __int128 v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  char v13;
  __int16 v14;
  __int128 *v15;
  __int128 *v16;
  int v17;
  __int128 v18;
  int v19;
  void *v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  char v26;
  __int16 v27;
  uint64_t v28;

  v4 = *((unsigned __int16 *)a2 + 8) | (*((unsigned __int8 *)a2 + 18) << 16);
  if (*(unsigned __int8 *)(a1 + 18) == 255)
  {
    if (BYTE2(v4) == 255)
    {
      v5 = *a2;
      *(_DWORD *)(a1 + 15) = *(_DWORD *)((char *)a2 + 15);
      *(_OWORD *)a1 = v5;
    }
    else
    {
      v7 = *(_QWORD *)a2;
      v8 = *((_QWORD *)a2 + 1);
      outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(*(void **)a2, v8, v4, BYTE2(v4) & 1);
      *(_QWORD *)a1 = v7;
      *(_QWORD *)(a1 + 8) = v8;
      *(_WORD *)(a1 + 16) = v4;
      *(_BYTE *)(a1 + 18) = BYTE2(v4) & 1;
    }
  }
  else if (BYTE2(v4) == 255)
  {
    outlined destroy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(a1);
    v6 = *(_DWORD *)((char *)a2 + 15);
    *(_OWORD *)a1 = *a2;
    *(_DWORD *)(a1 + 15) = v6;
  }
  else
  {
    v9 = *(void **)a2;
    v10 = *((_QWORD *)a2 + 1);
    outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(*(void **)a2, v10, v4, BYTE2(v4) & 1);
    v11 = *(void **)a1;
    v12 = *(_QWORD *)(a1 + 8);
    v13 = *(_BYTE *)(a1 + 18);
    *(_QWORD *)a1 = v9;
    *(_QWORD *)(a1 + 8) = v10;
    v14 = *(_WORD *)(a1 + 16);
    *(_WORD *)(a1 + 16) = v4;
    *(_BYTE *)(a1 + 18) = BYTE2(v4) & 1;
    outlined consume of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v11, v12, v14, v13);
  }
  v15 = (__int128 *)(a1 + 24);
  v16 = (__int128 *)((char *)a2 + 24);
  v17 = *((unsigned __int16 *)a2 + 20) | (*((unsigned __int8 *)a2 + 42) << 16);
  if (*(unsigned __int8 *)(a1 + 42) == 255)
  {
    if (BYTE2(v17) == 255)
    {
      v18 = *v16;
      *(_DWORD *)(a1 + 39) = *(_DWORD *)((char *)a2 + 39);
      *v15 = v18;
    }
    else
    {
      v20 = (void *)*((_QWORD *)a2 + 3);
      v21 = *((_QWORD *)a2 + 4);
      outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v20, v21, *((_WORD *)a2 + 20), BYTE2(v17) & 1);
      *(_QWORD *)(a1 + 24) = v20;
      *(_QWORD *)(a1 + 32) = v21;
      *(_WORD *)(a1 + 40) = v17;
      *(_BYTE *)(a1 + 42) = BYTE2(v17) & 1;
    }
  }
  else if (BYTE2(v17) == 255)
  {
    outlined destroy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(a1 + 24);
    v19 = *(_DWORD *)((char *)a2 + 39);
    *v15 = *v16;
    *(_DWORD *)(a1 + 39) = v19;
  }
  else
  {
    v22 = (void *)*((_QWORD *)a2 + 3);
    v23 = *((_QWORD *)a2 + 4);
    outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v22, v23, *((_WORD *)a2 + 20), BYTE2(v17) & 1);
    v24 = *(void **)(a1 + 24);
    v25 = *(_QWORD *)(a1 + 32);
    v26 = *(_BYTE *)(a1 + 42);
    *(_QWORD *)(a1 + 24) = v22;
    *(_QWORD *)(a1 + 32) = v23;
    v27 = *(_WORD *)(a1 + 40);
    *(_WORD *)(a1 + 40) = v17;
    *(_BYTE *)(a1 + 42) = BYTE2(v17) & 1;
    outlined consume of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v24, v25, v27, v26);
  }
  *(_QWORD *)(a1 + 48) = *((_QWORD *)a2 + 6);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v28 = *((_QWORD *)a2 + 7);
  *(_BYTE *)(a1 + 64) = *((_BYTE *)a2 + 64);
  *(_QWORD *)(a1 + 56) = v28;
  LOBYTE(v28) = *((_BYTE *)a2 + 80);
  *(_QWORD *)(a1 + 72) = *((_QWORD *)a2 + 9);
  *(_BYTE *)(a1 + 80) = v28;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 11);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 96) = *((_QWORD *)a2 + 12);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 104) = *((_QWORD *)a2 + 13);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t outlined destroy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t assignWithTake for CodableAccessibilityDataSeriesConfiguration.AxisConfiguration(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  int v5;
  void *v6;
  uint64_t v7;
  _OWORD *v8;
  unsigned int v9;
  int v10;
  void *v11;
  uint64_t v12;

  if (*(unsigned __int8 *)(a1 + 18) == 255)
    goto LABEL_4;
  v4 = *(unsigned __int16 *)(a2 + 16) | (*(unsigned __int8 *)(a2 + 18) << 16);
  if (HIWORD(v4) > 0xFEu)
  {
    outlined destroy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(a1);
LABEL_4:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_DWORD *)(a1 + 15) = *(_DWORD *)(a2 + 15);
    goto LABEL_6;
  }
  v5 = *(unsigned __int16 *)(a1 + 16) | (*(unsigned __int8 *)(a1 + 18) << 16);
  v6 = *(void **)a1;
  v7 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_WORD *)(a1 + 16) = v4;
  *(_BYTE *)(a1 + 18) = BYTE2(v4) & 1;
  outlined consume of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v6, v7, v5, BYTE2(v5) & 1);
LABEL_6:
  v8 = (_OWORD *)(a2 + 24);
  if (*(unsigned __int8 *)(a1 + 42) != 255)
  {
    v9 = *(unsigned __int16 *)(a2 + 40) | (*(unsigned __int8 *)(a2 + 42) << 16);
    if (HIWORD(v9) <= 0xFEu)
    {
      v10 = *(unsigned __int16 *)(a1 + 40) | (*(unsigned __int8 *)(a1 + 42) << 16);
      v11 = *(void **)(a1 + 24);
      v12 = *(_QWORD *)(a1 + 32);
      *(_OWORD *)(a1 + 24) = *v8;
      *(_WORD *)(a1 + 40) = v9;
      *(_BYTE *)(a1 + 42) = BYTE2(v9) & 1;
      outlined consume of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v11, v12, v10, BYTE2(v10) & 1);
      goto LABEL_11;
    }
    outlined destroy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(a1 + 24);
  }
  *(_OWORD *)(a1 + 24) = *v8;
  *(_DWORD *)(a1 + 39) = *(_DWORD *)(a2 + 39);
LABEL_11:
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for CodableAccessibilityDataSeriesConfiguration.AxisConfiguration(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 112))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 48);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for CodableAccessibilityDataSeriesConfiguration.AxisConfiguration(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 104) = 0;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 112) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 48) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 112) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for CodableAccessibilityDataSeriesConfiguration.AxisConfiguration()
{
  return &type metadata for CodableAccessibilityDataSeriesConfiguration.AxisConfiguration;
}

void destroy for CodableAccessibilityDataSeriesConfiguration(uint64_t a1)
{
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;

  if (*(unsigned __int8 *)(a1 + 18) != 255)
  {
    v2 = *(unsigned __int16 *)(a1 + 16) | (*(unsigned __int8 *)(a1 + 18) << 16);
    outlined consume of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(*(void **)a1, *(_QWORD *)(a1 + 8), v2, BYTE2(v2) & 1);
  }
  if (*(_QWORD *)(a1 + 88))
  {
    if (*(unsigned __int8 *)(a1 + 58) != 255)
    {
      v3 = *(unsigned __int16 *)(a1 + 56) | (*(unsigned __int8 *)(a1 + 58) << 16);
      outlined consume of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(*(void **)(a1 + 40), *(_QWORD *)(a1 + 48), v3, BYTE2(v3) & 1);
    }
    if (*(unsigned __int8 *)(a1 + 82) != 255)
    {
      v4 = *(unsigned __int16 *)(a1 + 80) | (*(unsigned __int8 *)(a1 + 82) << 16);
      outlined consume of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(*(void **)(a1 + 64), *(_QWORD *)(a1 + 72), v4, BYTE2(v4) & 1);
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  if (*(_QWORD *)(a1 + 200))
  {
    if (*(unsigned __int8 *)(a1 + 170) != 255)
    {
      v5 = *(unsigned __int16 *)(a1 + 168) | (*(unsigned __int8 *)(a1 + 170) << 16);
      outlined consume of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(*(void **)(a1 + 152), *(_QWORD *)(a1 + 160), v5, BYTE2(v5) & 1);
    }
    if (*(unsigned __int8 *)(a1 + 194) != 255)
    {
      v6 = *(unsigned __int16 *)(a1 + 192) | (*(unsigned __int8 *)(a1 + 194) << 16);
      outlined consume of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(*(void **)(a1 + 176), *(_QWORD *)(a1 + 184), v6, BYTE2(v6) & 1);
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
}

uint64_t initializeWithCopy for CodableAccessibilityDataSeriesConfiguration(uint64_t a1, uint64_t *a2)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  _OWORD *v7;
  _OWORD *v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  int v13;
  void *v14;
  uint64_t v15;
  int v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _OWORD *v21;
  _OWORD *v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  int v27;
  void *v28;
  uint64_t v29;
  int v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  if (*((unsigned __int8 *)a2 + 18) == 255)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_DWORD *)(a1 + 15) = *(_DWORD *)((char *)a2 + 15);
  }
  else
  {
    v4 = *((unsigned __int16 *)a2 + 8) | (*((unsigned __int8 *)a2 + 18) << 16);
    v5 = *a2;
    v6 = a2[1];
    outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>((void *)*a2, v6, *((_WORD *)a2 + 8), BYTE2(v4) & 1);
    *(_QWORD *)a1 = v5;
    *(_QWORD *)(a1 + 8) = v6;
    *(_WORD *)(a1 + 16) = v4;
    *(_BYTE *)(a1 + 18) = BYTE2(v4) & 1;
  }
  *(_WORD *)(a1 + 19) = *(_WORD *)((char *)a2 + 19);
  *(_QWORD *)(a1 + 24) = a2[3];
  *(_BYTE *)(a1 + 32) = *((_BYTE *)a2 + 32);
  *(_WORD *)(a1 + 33) = *(_WORD *)((char *)a2 + 33);
  v7 = (_OWORD *)(a1 + 40);
  v8 = a2 + 5;
  v9 = a2[11];
  if (v9)
  {
    if (*((unsigned __int8 *)a2 + 58) == 255)
    {
      *v7 = *v8;
      *(_DWORD *)(a1 + 55) = *(_DWORD *)((char *)a2 + 55);
    }
    else
    {
      v13 = *((unsigned __int16 *)a2 + 28) | (*((unsigned __int8 *)a2 + 58) << 16);
      v14 = (void *)a2[5];
      v15 = a2[6];
      outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v14, v15, *((_WORD *)a2 + 28), BYTE2(v13) & 1);
      *(_QWORD *)(a1 + 40) = v14;
      *(_QWORD *)(a1 + 48) = v15;
      *(_WORD *)(a1 + 56) = v13;
      *(_BYTE *)(a1 + 58) = BYTE2(v13) & 1;
    }
    if (*((unsigned __int8 *)a2 + 82) == 255)
    {
      *(_OWORD *)(a1 + 64) = *((_OWORD *)a2 + 4);
      *(_DWORD *)(a1 + 79) = *(_DWORD *)((char *)a2 + 79);
    }
    else
    {
      v16 = *((unsigned __int16 *)a2 + 40) | (*((unsigned __int8 *)a2 + 82) << 16);
      v17 = (void *)a2[8];
      v18 = a2[9];
      outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v17, v18, *((_WORD *)a2 + 40), BYTE2(v16) & 1);
      *(_QWORD *)(a1 + 64) = v17;
      *(_QWORD *)(a1 + 72) = v18;
      *(_WORD *)(a1 + 80) = v16;
      *(_BYTE *)(a1 + 82) = BYTE2(v16) & 1;
    }
    v19 = a2[12];
    *(_QWORD *)(a1 + 88) = v9;
    *(_QWORD *)(a1 + 96) = v19;
    *(_BYTE *)(a1 + 104) = *((_BYTE *)a2 + 104);
    *(_QWORD *)(a1 + 112) = a2[14];
    *(_BYTE *)(a1 + 120) = *((_BYTE *)a2 + 120);
    v20 = a2[17];
    *(_QWORD *)(a1 + 128) = a2[16];
    *(_QWORD *)(a1 + 136) = v20;
    *(_QWORD *)(a1 + 144) = a2[18];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v10 = *(_OWORD *)(a2 + 15);
    *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 13);
    *(_OWORD *)(a1 + 120) = v10;
    *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 17);
    v11 = *(_OWORD *)(a2 + 7);
    *v7 = *v8;
    *(_OWORD *)(a1 + 56) = v11;
    v12 = *(_OWORD *)(a2 + 11);
    *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 9);
    *(_OWORD *)(a1 + 88) = v12;
  }
  v21 = (_OWORD *)(a1 + 152);
  v22 = a2 + 19;
  v23 = a2[25];
  if (v23)
  {
    if (*((unsigned __int8 *)a2 + 170) == 255)
    {
      *v21 = *v22;
      *(_DWORD *)(a1 + 167) = *(_DWORD *)((char *)a2 + 167);
    }
    else
    {
      v27 = *((unsigned __int16 *)a2 + 84) | (*((unsigned __int8 *)a2 + 170) << 16);
      v28 = (void *)a2[19];
      v29 = a2[20];
      outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v28, v29, *((_WORD *)a2 + 84), BYTE2(v27) & 1);
      *(_QWORD *)(a1 + 152) = v28;
      *(_QWORD *)(a1 + 160) = v29;
      *(_WORD *)(a1 + 168) = v27;
      *(_BYTE *)(a1 + 170) = BYTE2(v27) & 1;
    }
    if (*((unsigned __int8 *)a2 + 194) == 255)
    {
      *(_OWORD *)(a1 + 176) = *((_OWORD *)a2 + 11);
      *(_DWORD *)(a1 + 191) = *(_DWORD *)((char *)a2 + 191);
    }
    else
    {
      v30 = *((unsigned __int16 *)a2 + 96) | (*((unsigned __int8 *)a2 + 194) << 16);
      v31 = (void *)a2[22];
      v32 = a2[23];
      outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v31, v32, *((_WORD *)a2 + 96), BYTE2(v30) & 1);
      *(_QWORD *)(a1 + 176) = v31;
      *(_QWORD *)(a1 + 184) = v32;
      *(_WORD *)(a1 + 192) = v30;
      *(_BYTE *)(a1 + 194) = BYTE2(v30) & 1;
    }
    v33 = a2[26];
    *(_QWORD *)(a1 + 200) = v23;
    *(_QWORD *)(a1 + 208) = v33;
    *(_BYTE *)(a1 + 216) = *((_BYTE *)a2 + 216);
    *(_QWORD *)(a1 + 224) = a2[28];
    *(_BYTE *)(a1 + 232) = *((_BYTE *)a2 + 232);
    v34 = a2[31];
    *(_QWORD *)(a1 + 240) = a2[30];
    *(_QWORD *)(a1 + 248) = v34;
    *(_QWORD *)(a1 + 256) = a2[32];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v24 = *(_OWORD *)(a2 + 29);
    *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 27);
    *(_OWORD *)(a1 + 232) = v24;
    *(_OWORD *)(a1 + 248) = *(_OWORD *)(a2 + 31);
    v25 = *(_OWORD *)(a2 + 21);
    *v21 = *v22;
    *(_OWORD *)(a1 + 168) = v25;
    v26 = *(_OWORD *)(a2 + 25);
    *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 + 23);
    *(_OWORD *)(a1 + 200) = v26;
  }
  return a1;
}

uint64_t assignWithCopy for CodableAccessibilityDataSeriesConfiguration(uint64_t a1, __int128 *a2)
{
  int v4;
  __int128 v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  char v13;
  __int16 v14;
  uint64_t v15;
  __int128 *v16;
  __int128 *v17;
  uint64_t v18;
  int v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  int v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  int v33;
  void *v34;
  uint64_t v35;
  __int128 v36;
  int v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  uint64_t v43;
  void *v44;
  uint64_t v45;
  void *v46;
  uint64_t v47;
  char v48;
  __int16 v49;
  __int128 *v50;
  __int128 *v51;
  int v52;
  __int128 v53;
  int v54;
  void *v55;
  uint64_t v56;
  void *v57;
  uint64_t v58;
  void *v59;
  uint64_t v60;
  char v61;
  __int16 v62;
  uint64_t v63;
  __int128 *v64;
  __int128 *v65;
  uint64_t v66;
  int v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  int v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  int v81;
  void *v82;
  uint64_t v83;
  __int128 v84;
  int v85;
  void *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  void *v90;
  uint64_t v91;
  void *v92;
  uint64_t v93;
  void *v94;
  uint64_t v95;
  char v96;
  __int16 v97;
  __int128 *v98;
  __int128 *v99;
  int v100;
  __int128 v101;
  int v102;
  void *v103;
  uint64_t v104;
  void *v105;
  uint64_t v106;
  void *v107;
  uint64_t v108;
  char v109;
  __int16 v110;
  uint64_t v111;

  v4 = *((unsigned __int16 *)a2 + 8) | (*((unsigned __int8 *)a2 + 18) << 16);
  if (*(unsigned __int8 *)(a1 + 18) == 255)
  {
    if (BYTE2(v4) == 255)
    {
      v5 = *a2;
      *(_DWORD *)(a1 + 15) = *(_DWORD *)((char *)a2 + 15);
      *(_OWORD *)a1 = v5;
    }
    else
    {
      v7 = *(_QWORD *)a2;
      v8 = *((_QWORD *)a2 + 1);
      outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(*(void **)a2, v8, v4, BYTE2(v4) & 1);
      *(_QWORD *)a1 = v7;
      *(_QWORD *)(a1 + 8) = v8;
      *(_WORD *)(a1 + 16) = v4;
      *(_BYTE *)(a1 + 18) = BYTE2(v4) & 1;
    }
  }
  else if (BYTE2(v4) == 255)
  {
    outlined destroy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(a1);
    v6 = *(_DWORD *)((char *)a2 + 15);
    *(_OWORD *)a1 = *a2;
    *(_DWORD *)(a1 + 15) = v6;
  }
  else
  {
    v9 = *(void **)a2;
    v10 = *((_QWORD *)a2 + 1);
    outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(*(void **)a2, v10, v4, BYTE2(v4) & 1);
    v11 = *(void **)a1;
    v12 = *(_QWORD *)(a1 + 8);
    v13 = *(_BYTE *)(a1 + 18);
    *(_QWORD *)a1 = v9;
    *(_QWORD *)(a1 + 8) = v10;
    v14 = *(_WORD *)(a1 + 16);
    *(_WORD *)(a1 + 16) = v4;
    *(_BYTE *)(a1 + 18) = BYTE2(v4) & 1;
    outlined consume of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v11, v12, v14, v13);
  }
  *(_BYTE *)(a1 + 19) = *((_BYTE *)a2 + 19);
  *(_BYTE *)(a1 + 20) = *((_BYTE *)a2 + 20);
  v15 = *((_QWORD *)a2 + 3);
  *(_BYTE *)(a1 + 32) = *((_BYTE *)a2 + 32);
  *(_QWORD *)(a1 + 24) = v15;
  *(_BYTE *)(a1 + 33) = *((_BYTE *)a2 + 33);
  *(_BYTE *)(a1 + 34) = *((_BYTE *)a2 + 34);
  v16 = (__int128 *)(a1 + 40);
  v17 = (__int128 *)((char *)a2 + 40);
  v18 = *((_QWORD *)a2 + 11);
  if (*(_QWORD *)(a1 + 88))
  {
    if (v18)
    {
      v19 = *((unsigned __int16 *)a2 + 28) | (*((unsigned __int8 *)a2 + 58) << 16);
      if (*(unsigned __int8 *)(a1 + 58) == 255)
      {
        if (*((unsigned __int8 *)a2 + 58) == 255)
        {
          v20 = *v17;
          *(_DWORD *)(a1 + 55) = *(_DWORD *)((char *)a2 + 55);
          *v16 = v20;
        }
        else
        {
          v42 = (void *)*((_QWORD *)a2 + 5);
          v43 = *((_QWORD *)a2 + 6);
          outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v42, v43, *((_WORD *)a2 + 28), BYTE2(v19) & 1);
          *(_QWORD *)(a1 + 40) = v42;
          *(_QWORD *)(a1 + 48) = v43;
          *(_WORD *)(a1 + 56) = v19;
          *(_BYTE *)(a1 + 58) = BYTE2(v19) & 1;
        }
      }
      else if (*((unsigned __int8 *)a2 + 58) == 255)
      {
        outlined destroy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(a1 + 40);
        v27 = *(_DWORD *)((char *)a2 + 55);
        *v16 = *v17;
        *(_DWORD *)(a1 + 55) = v27;
      }
      else
      {
        v44 = (void *)*((_QWORD *)a2 + 5);
        v45 = *((_QWORD *)a2 + 6);
        outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v44, v45, *((_WORD *)a2 + 28), BYTE2(v19) & 1);
        v46 = *(void **)(a1 + 40);
        v47 = *(_QWORD *)(a1 + 48);
        v48 = *(_BYTE *)(a1 + 58);
        *(_QWORD *)(a1 + 40) = v44;
        *(_QWORD *)(a1 + 48) = v45;
        v49 = *(_WORD *)(a1 + 56);
        *(_WORD *)(a1 + 56) = v19;
        *(_BYTE *)(a1 + 58) = BYTE2(v19) & 1;
        outlined consume of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v46, v47, v49, v48);
      }
      v50 = (__int128 *)(a1 + 64);
      v51 = a2 + 4;
      v52 = *((unsigned __int16 *)a2 + 40) | (*((unsigned __int8 *)a2 + 82) << 16);
      if (*(unsigned __int8 *)(a1 + 82) == 255)
      {
        if (*((unsigned __int8 *)a2 + 82) == 255)
        {
          v53 = *v51;
          *(_DWORD *)(a1 + 79) = *(_DWORD *)((char *)a2 + 79);
          *v50 = v53;
        }
        else
        {
          v55 = (void *)*((_QWORD *)a2 + 8);
          v56 = *((_QWORD *)a2 + 9);
          outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v55, v56, *((_WORD *)a2 + 40), BYTE2(v52) & 1);
          *(_QWORD *)(a1 + 64) = v55;
          *(_QWORD *)(a1 + 72) = v56;
          *(_WORD *)(a1 + 80) = v52;
          *(_BYTE *)(a1 + 82) = BYTE2(v52) & 1;
        }
      }
      else if (*((unsigned __int8 *)a2 + 82) == 255)
      {
        outlined destroy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(a1 + 64);
        v54 = *(_DWORD *)((char *)a2 + 79);
        *v50 = *v51;
        *(_DWORD *)(a1 + 79) = v54;
      }
      else
      {
        v57 = (void *)*((_QWORD *)a2 + 8);
        v58 = *((_QWORD *)a2 + 9);
        outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v57, v58, *((_WORD *)a2 + 40), BYTE2(v52) & 1);
        v59 = *(void **)(a1 + 64);
        v60 = *(_QWORD *)(a1 + 72);
        v61 = *(_BYTE *)(a1 + 82);
        *(_QWORD *)(a1 + 64) = v57;
        *(_QWORD *)(a1 + 72) = v58;
        v62 = *(_WORD *)(a1 + 80);
        *(_WORD *)(a1 + 80) = v52;
        *(_BYTE *)(a1 + 82) = BYTE2(v52) & 1;
        outlined consume of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v59, v60, v62, v61);
      }
      *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 11);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v63 = *((_QWORD *)a2 + 12);
      *(_BYTE *)(a1 + 104) = *((_BYTE *)a2 + 104);
      *(_QWORD *)(a1 + 96) = v63;
      LOBYTE(v63) = *((_BYTE *)a2 + 120);
      *(_QWORD *)(a1 + 112) = *((_QWORD *)a2 + 14);
      *(_BYTE *)(a1 + 120) = v63;
      *(_QWORD *)(a1 + 128) = *((_QWORD *)a2 + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 136) = *((_QWORD *)a2 + 17);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 144) = *((_QWORD *)a2 + 18);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      outlined destroy of CodableAccessibilityDataSeriesConfiguration.AxisConfiguration(a1 + 40);
      v23 = *(__int128 *)((char *)a2 + 56);
      v22 = *(__int128 *)((char *)a2 + 72);
      *v16 = *v17;
      *(_OWORD *)(a1 + 56) = v23;
      *(_OWORD *)(a1 + 72) = v22;
      v24 = *(__int128 *)((char *)a2 + 136);
      v26 = *(__int128 *)((char *)a2 + 88);
      v25 = *(__int128 *)((char *)a2 + 104);
      *(_OWORD *)(a1 + 120) = *(__int128 *)((char *)a2 + 120);
      *(_OWORD *)(a1 + 136) = v24;
      *(_OWORD *)(a1 + 88) = v26;
      *(_OWORD *)(a1 + 104) = v25;
    }
  }
  else if (v18)
  {
    if (*((unsigned __int8 *)a2 + 58) == 255)
    {
      v21 = *v17;
      *(_DWORD *)(a1 + 55) = *(_DWORD *)((char *)a2 + 55);
      *v16 = v21;
    }
    else
    {
      v33 = *((unsigned __int16 *)a2 + 28) | (*((unsigned __int8 *)a2 + 58) << 16);
      v34 = (void *)*((_QWORD *)a2 + 5);
      v35 = *((_QWORD *)a2 + 6);
      outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v34, v35, *((_WORD *)a2 + 28), BYTE2(v33) & 1);
      *(_QWORD *)(a1 + 40) = v34;
      *(_QWORD *)(a1 + 48) = v35;
      *(_WORD *)(a1 + 56) = v33;
      *(_BYTE *)(a1 + 58) = BYTE2(v33) & 1;
    }
    if (*((unsigned __int8 *)a2 + 82) == 255)
    {
      v36 = a2[4];
      *(_DWORD *)(a1 + 79) = *(_DWORD *)((char *)a2 + 79);
      *(_OWORD *)(a1 + 64) = v36;
    }
    else
    {
      v37 = *((unsigned __int16 *)a2 + 40) | (*((unsigned __int8 *)a2 + 82) << 16);
      v38 = (void *)*((_QWORD *)a2 + 8);
      v39 = *((_QWORD *)a2 + 9);
      outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v38, v39, *((_WORD *)a2 + 40), BYTE2(v37) & 1);
      *(_QWORD *)(a1 + 64) = v38;
      *(_QWORD *)(a1 + 72) = v39;
      *(_WORD *)(a1 + 80) = v37;
      *(_BYTE *)(a1 + 82) = BYTE2(v37) & 1;
    }
    *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 11);
    v40 = *((_QWORD *)a2 + 12);
    *(_BYTE *)(a1 + 104) = *((_BYTE *)a2 + 104);
    *(_QWORD *)(a1 + 96) = v40;
    v41 = *((_QWORD *)a2 + 14);
    *(_BYTE *)(a1 + 120) = *((_BYTE *)a2 + 120);
    *(_QWORD *)(a1 + 112) = v41;
    *(_QWORD *)(a1 + 128) = *((_QWORD *)a2 + 16);
    *(_QWORD *)(a1 + 136) = *((_QWORD *)a2 + 17);
    *(_QWORD *)(a1 + 144) = *((_QWORD *)a2 + 18);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v28 = *v17;
    v29 = *(__int128 *)((char *)a2 + 72);
    *(_OWORD *)(a1 + 56) = *(__int128 *)((char *)a2 + 56);
    *(_OWORD *)(a1 + 72) = v29;
    *v16 = v28;
    v30 = *(__int128 *)((char *)a2 + 88);
    v31 = *(__int128 *)((char *)a2 + 104);
    v32 = *(__int128 *)((char *)a2 + 136);
    *(_OWORD *)(a1 + 120) = *(__int128 *)((char *)a2 + 120);
    *(_OWORD *)(a1 + 136) = v32;
    *(_OWORD *)(a1 + 88) = v30;
    *(_OWORD *)(a1 + 104) = v31;
  }
  v64 = (__int128 *)(a1 + 152);
  v65 = (__int128 *)((char *)a2 + 152);
  v66 = *((_QWORD *)a2 + 25);
  if (*(_QWORD *)(a1 + 200))
  {
    if (v66)
    {
      v67 = *((unsigned __int16 *)a2 + 84) | (*((unsigned __int8 *)a2 + 170) << 16);
      if (*(unsigned __int8 *)(a1 + 170) == 255)
      {
        if (BYTE2(v67) == 255)
        {
          v68 = *v65;
          *(_DWORD *)(a1 + 167) = *(_DWORD *)((char *)a2 + 167);
          *v64 = v68;
        }
        else
        {
          v90 = (void *)*((_QWORD *)a2 + 19);
          v91 = *((_QWORD *)a2 + 20);
          outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v90, v91, *((_WORD *)a2 + 84), BYTE2(v67) & 1);
          *(_QWORD *)(a1 + 152) = v90;
          *(_QWORD *)(a1 + 160) = v91;
          *(_WORD *)(a1 + 168) = v67;
          *(_BYTE *)(a1 + 170) = BYTE2(v67) & 1;
        }
      }
      else if (BYTE2(v67) == 255)
      {
        outlined destroy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(a1 + 152);
        v75 = *(_DWORD *)((char *)a2 + 167);
        *v64 = *v65;
        *(_DWORD *)(a1 + 167) = v75;
      }
      else
      {
        v92 = (void *)*((_QWORD *)a2 + 19);
        v93 = *((_QWORD *)a2 + 20);
        outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v92, v93, *((_WORD *)a2 + 84), BYTE2(v67) & 1);
        v94 = *(void **)(a1 + 152);
        v95 = *(_QWORD *)(a1 + 160);
        v96 = *(_BYTE *)(a1 + 170);
        *(_QWORD *)(a1 + 152) = v92;
        *(_QWORD *)(a1 + 160) = v93;
        v97 = *(_WORD *)(a1 + 168);
        *(_WORD *)(a1 + 168) = v67;
        *(_BYTE *)(a1 + 170) = BYTE2(v67) & 1;
        outlined consume of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v94, v95, v97, v96);
      }
      v98 = (__int128 *)(a1 + 176);
      v99 = a2 + 11;
      v100 = *((unsigned __int16 *)a2 + 96) | (*((unsigned __int8 *)a2 + 194) << 16);
      if (*(unsigned __int8 *)(a1 + 194) == 255)
      {
        if (BYTE2(v100) == 255)
        {
          v101 = *v99;
          *(_DWORD *)(a1 + 191) = *(_DWORD *)((char *)a2 + 191);
          *v98 = v101;
        }
        else
        {
          v103 = (void *)*((_QWORD *)a2 + 22);
          v104 = *((_QWORD *)a2 + 23);
          outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v103, v104, *((_WORD *)a2 + 96), BYTE2(v100) & 1);
          *(_QWORD *)(a1 + 176) = v103;
          *(_QWORD *)(a1 + 184) = v104;
          *(_WORD *)(a1 + 192) = v100;
          *(_BYTE *)(a1 + 194) = BYTE2(v100) & 1;
        }
      }
      else if (BYTE2(v100) == 255)
      {
        outlined destroy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(a1 + 176);
        v102 = *(_DWORD *)((char *)a2 + 191);
        *v98 = *v99;
        *(_DWORD *)(a1 + 191) = v102;
      }
      else
      {
        v105 = (void *)*((_QWORD *)a2 + 22);
        v106 = *((_QWORD *)a2 + 23);
        outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v105, v106, *((_WORD *)a2 + 96), BYTE2(v100) & 1);
        v107 = *(void **)(a1 + 176);
        v108 = *(_QWORD *)(a1 + 184);
        v109 = *(_BYTE *)(a1 + 194);
        *(_QWORD *)(a1 + 176) = v105;
        *(_QWORD *)(a1 + 184) = v106;
        v110 = *(_WORD *)(a1 + 192);
        *(_WORD *)(a1 + 192) = v100;
        *(_BYTE *)(a1 + 194) = BYTE2(v100) & 1;
        outlined consume of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v107, v108, v110, v109);
      }
      *(_QWORD *)(a1 + 200) = *((_QWORD *)a2 + 25);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v111 = *((_QWORD *)a2 + 26);
      *(_BYTE *)(a1 + 216) = *((_BYTE *)a2 + 216);
      *(_QWORD *)(a1 + 208) = v111;
      LOBYTE(v111) = *((_BYTE *)a2 + 232);
      *(_QWORD *)(a1 + 224) = *((_QWORD *)a2 + 28);
      *(_BYTE *)(a1 + 232) = v111;
      *(_QWORD *)(a1 + 240) = *((_QWORD *)a2 + 30);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 248) = *((_QWORD *)a2 + 31);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 256) = *((_QWORD *)a2 + 32);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      outlined destroy of CodableAccessibilityDataSeriesConfiguration.AxisConfiguration(a1 + 152);
      v71 = *(__int128 *)((char *)a2 + 168);
      v70 = *(__int128 *)((char *)a2 + 184);
      *v64 = *v65;
      *(_OWORD *)(a1 + 168) = v71;
      *(_OWORD *)(a1 + 184) = v70;
      v72 = *(__int128 *)((char *)a2 + 248);
      v74 = *(__int128 *)((char *)a2 + 200);
      v73 = *(__int128 *)((char *)a2 + 216);
      *(_OWORD *)(a1 + 232) = *(__int128 *)((char *)a2 + 232);
      *(_OWORD *)(a1 + 248) = v72;
      *(_OWORD *)(a1 + 200) = v74;
      *(_OWORD *)(a1 + 216) = v73;
    }
  }
  else if (v66)
  {
    if (*((unsigned __int8 *)a2 + 170) == 255)
    {
      v69 = *v65;
      *(_DWORD *)(a1 + 167) = *(_DWORD *)((char *)a2 + 167);
      *v64 = v69;
    }
    else
    {
      v81 = *((unsigned __int16 *)a2 + 84) | (*((unsigned __int8 *)a2 + 170) << 16);
      v82 = (void *)*((_QWORD *)a2 + 19);
      v83 = *((_QWORD *)a2 + 20);
      outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v82, v83, *((_WORD *)a2 + 84), BYTE2(v81) & 1);
      *(_QWORD *)(a1 + 152) = v82;
      *(_QWORD *)(a1 + 160) = v83;
      *(_WORD *)(a1 + 168) = v81;
      *(_BYTE *)(a1 + 170) = BYTE2(v81) & 1;
    }
    if (*((unsigned __int8 *)a2 + 194) == 255)
    {
      v84 = a2[11];
      *(_DWORD *)(a1 + 191) = *(_DWORD *)((char *)a2 + 191);
      *(_OWORD *)(a1 + 176) = v84;
    }
    else
    {
      v85 = *((unsigned __int16 *)a2 + 96) | (*((unsigned __int8 *)a2 + 194) << 16);
      v86 = (void *)*((_QWORD *)a2 + 22);
      v87 = *((_QWORD *)a2 + 23);
      outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v86, v87, *((_WORD *)a2 + 96), BYTE2(v85) & 1);
      *(_QWORD *)(a1 + 176) = v86;
      *(_QWORD *)(a1 + 184) = v87;
      *(_WORD *)(a1 + 192) = v85;
      *(_BYTE *)(a1 + 194) = BYTE2(v85) & 1;
    }
    *(_QWORD *)(a1 + 200) = *((_QWORD *)a2 + 25);
    v88 = *((_QWORD *)a2 + 26);
    *(_BYTE *)(a1 + 216) = *((_BYTE *)a2 + 216);
    *(_QWORD *)(a1 + 208) = v88;
    v89 = *((_QWORD *)a2 + 28);
    *(_BYTE *)(a1 + 232) = *((_BYTE *)a2 + 232);
    *(_QWORD *)(a1 + 224) = v89;
    *(_QWORD *)(a1 + 240) = *((_QWORD *)a2 + 30);
    *(_QWORD *)(a1 + 248) = *((_QWORD *)a2 + 31);
    *(_QWORD *)(a1 + 256) = *((_QWORD *)a2 + 32);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v76 = *v65;
    v77 = *(__int128 *)((char *)a2 + 184);
    *(_OWORD *)(a1 + 168) = *(__int128 *)((char *)a2 + 168);
    *(_OWORD *)(a1 + 184) = v77;
    *v64 = v76;
    v78 = *(__int128 *)((char *)a2 + 200);
    v79 = *(__int128 *)((char *)a2 + 216);
    v80 = *(__int128 *)((char *)a2 + 248);
    *(_OWORD *)(a1 + 232) = *(__int128 *)((char *)a2 + 232);
    *(_OWORD *)(a1 + 248) = v80;
    *(_OWORD *)(a1 + 200) = v78;
    *(_OWORD *)(a1 + 216) = v79;
  }
  return a1;
}

uint64_t outlined destroy of CodableAccessibilityDataSeriesConfiguration.AxisConfiguration(uint64_t a1)
{
  destroy for CodableAccessibilityDataSeriesConfiguration.AxisConfiguration(a1);
  return a1;
}

void *__swift_memcpy264_8(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x108uLL);
}

uint64_t assignWithTake for CodableAccessibilityDataSeriesConfiguration(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  int v5;
  void *v6;
  uint64_t v7;
  _OWORD *v8;
  _OWORD *v9;
  unsigned int v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  int v14;
  void *v15;
  uint64_t v16;
  _OWORD *v17;
  unsigned int v18;
  int v19;
  void *v20;
  uint64_t v21;
  _OWORD *v22;
  _OWORD *v23;
  unsigned int v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  int v28;
  void *v29;
  uint64_t v30;
  _OWORD *v31;
  unsigned int v32;
  int v33;
  void *v34;
  uint64_t v35;

  if (*(unsigned __int8 *)(a1 + 18) == 255)
    goto LABEL_4;
  v4 = *(unsigned __int16 *)(a2 + 16) | (*(unsigned __int8 *)(a2 + 18) << 16);
  if (HIWORD(v4) > 0xFEu)
  {
    outlined destroy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(a1);
LABEL_4:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_DWORD *)(a1 + 15) = *(_DWORD *)(a2 + 15);
    goto LABEL_6;
  }
  v5 = *(unsigned __int16 *)(a1 + 16) | (*(unsigned __int8 *)(a1 + 18) << 16);
  v6 = *(void **)a1;
  v7 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_WORD *)(a1 + 16) = v4;
  *(_BYTE *)(a1 + 18) = BYTE2(v4) & 1;
  outlined consume of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v6, v7, v5, BYTE2(v5) & 1);
LABEL_6:
  *(_BYTE *)(a1 + 19) = *(_BYTE *)(a2 + 19);
  *(_BYTE *)(a1 + 20) = *(_BYTE *)(a2 + 20);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_BYTE *)(a1 + 33) = *(_BYTE *)(a2 + 33);
  *(_BYTE *)(a1 + 34) = *(_BYTE *)(a2 + 34);
  v8 = (_OWORD *)(a1 + 40);
  v9 = (_OWORD *)(a2 + 40);
  if (!*(_QWORD *)(a1 + 88))
  {
LABEL_13:
    v11 = *(_OWORD *)(a2 + 120);
    *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
    *(_OWORD *)(a1 + 120) = v11;
    *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
    v12 = *(_OWORD *)(a2 + 56);
    *v8 = *v9;
    *(_OWORD *)(a1 + 56) = v12;
    v13 = *(_OWORD *)(a2 + 88);
    *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
    *(_OWORD *)(a1 + 88) = v13;
    goto LABEL_21;
  }
  if (!*(_QWORD *)(a2 + 88))
  {
    outlined destroy of CodableAccessibilityDataSeriesConfiguration.AxisConfiguration(a1 + 40);
    goto LABEL_13;
  }
  if (*(unsigned __int8 *)(a1 + 58) == 255)
  {
LABEL_11:
    *v8 = *v9;
    *(_DWORD *)(a1 + 55) = *(_DWORD *)(a2 + 55);
    goto LABEL_15;
  }
  v10 = *(unsigned __int16 *)(a2 + 56) | (*(unsigned __int8 *)(a2 + 58) << 16);
  if (HIWORD(v10) > 0xFEu)
  {
    outlined destroy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(a1 + 40);
    goto LABEL_11;
  }
  v14 = *(unsigned __int16 *)(a1 + 56) | (*(unsigned __int8 *)(a1 + 58) << 16);
  v15 = *(void **)(a1 + 40);
  v16 = *(_QWORD *)(a1 + 48);
  *(_OWORD *)(a1 + 40) = *v9;
  *(_WORD *)(a1 + 56) = v10;
  *(_BYTE *)(a1 + 58) = BYTE2(v10) & 1;
  outlined consume of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v15, v16, v14, BYTE2(v14) & 1);
LABEL_15:
  v17 = (_OWORD *)(a2 + 64);
  if (*(unsigned __int8 *)(a1 + 82) != 255)
  {
    v18 = *(unsigned __int16 *)(a2 + 80) | (*(unsigned __int8 *)(a2 + 82) << 16);
    if (HIWORD(v18) <= 0xFEu)
    {
      v19 = *(unsigned __int16 *)(a1 + 80) | (*(unsigned __int8 *)(a1 + 82) << 16);
      v20 = *(void **)(a1 + 64);
      v21 = *(_QWORD *)(a1 + 72);
      *(_OWORD *)(a1 + 64) = *v17;
      *(_WORD *)(a1 + 80) = v18;
      *(_BYTE *)(a1 + 82) = BYTE2(v18) & 1;
      outlined consume of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v20, v21, v19, BYTE2(v19) & 1);
      goto LABEL_20;
    }
    outlined destroy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(a1 + 64);
  }
  *(_OWORD *)(a1 + 64) = *v17;
  *(_DWORD *)(a1 + 79) = *(_DWORD *)(a2 + 79);
LABEL_20:
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  swift_bridgeObjectRelease();
LABEL_21:
  v22 = (_OWORD *)(a1 + 152);
  v23 = (_OWORD *)(a2 + 152);
  if (*(_QWORD *)(a1 + 200))
  {
    if (*(_QWORD *)(a2 + 200))
    {
      if (*(unsigned __int8 *)(a1 + 170) != 255)
      {
        v24 = *(unsigned __int16 *)(a2 + 168) | (*(unsigned __int8 *)(a2 + 170) << 16);
        if (HIWORD(v24) <= 0xFEu)
        {
          v28 = *(unsigned __int16 *)(a1 + 168) | (*(unsigned __int8 *)(a1 + 170) << 16);
          v29 = *(void **)(a1 + 152);
          v30 = *(_QWORD *)(a1 + 160);
          *(_OWORD *)(a1 + 152) = *v23;
          *(_WORD *)(a1 + 168) = v24;
          *(_BYTE *)(a1 + 170) = BYTE2(v24) & 1;
          outlined consume of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v29, v30, v28, BYTE2(v28) & 1);
LABEL_30:
          v31 = (_OWORD *)(a2 + 176);
          if (*(unsigned __int8 *)(a1 + 194) != 255)
          {
            v32 = *(unsigned __int16 *)(a2 + 192) | (*(unsigned __int8 *)(a2 + 194) << 16);
            if (HIWORD(v32) <= 0xFEu)
            {
              v33 = *(unsigned __int16 *)(a1 + 192) | (*(unsigned __int8 *)(a1 + 194) << 16);
              v34 = *(void **)(a1 + 176);
              v35 = *(_QWORD *)(a1 + 184);
              *(_OWORD *)(a1 + 176) = *v31;
              *(_WORD *)(a1 + 192) = v32;
              *(_BYTE *)(a1 + 194) = BYTE2(v32) & 1;
              outlined consume of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v34, v35, v33, BYTE2(v33) & 1);
              goto LABEL_35;
            }
            outlined destroy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(a1 + 176);
          }
          *(_OWORD *)(a1 + 176) = *v31;
          *(_DWORD *)(a1 + 191) = *(_DWORD *)(a2 + 191);
LABEL_35:
          *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
          swift_bridgeObjectRelease();
          *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
          *(_BYTE *)(a1 + 216) = *(_BYTE *)(a2 + 216);
          *(_QWORD *)(a1 + 224) = *(_QWORD *)(a2 + 224);
          *(_BYTE *)(a1 + 232) = *(_BYTE *)(a2 + 232);
          *(_QWORD *)(a1 + 240) = *(_QWORD *)(a2 + 240);
          swift_bridgeObjectRelease();
          *(_QWORD *)(a1 + 248) = *(_QWORD *)(a2 + 248);
          swift_bridgeObjectRelease();
          *(_QWORD *)(a1 + 256) = *(_QWORD *)(a2 + 256);
          swift_bridgeObjectRelease();
          return a1;
        }
        outlined destroy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(a1 + 152);
      }
      *v22 = *v23;
      *(_DWORD *)(a1 + 167) = *(_DWORD *)(a2 + 167);
      goto LABEL_30;
    }
    outlined destroy of CodableAccessibilityDataSeriesConfiguration.AxisConfiguration(a1 + 152);
  }
  v25 = *(_OWORD *)(a2 + 232);
  *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 216);
  *(_OWORD *)(a1 + 232) = v25;
  *(_OWORD *)(a1 + 248) = *(_OWORD *)(a2 + 248);
  v26 = *(_OWORD *)(a2 + 168);
  *v22 = *v23;
  *(_OWORD *)(a1 + 168) = v26;
  v27 = *(_OWORD *)(a2 + 200);
  *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 + 184);
  *(_OWORD *)(a1 + 200) = v27;
  return a1;
}

uint64_t getEnumTagSinglePayload for CodableAccessibilityDataSeriesConfiguration(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 264))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 88);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for CodableAccessibilityDataSeriesConfiguration(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 248) = 0u;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 264) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 264) = 0;
    if (a2)
      *(_QWORD *)(result + 88) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for CodableAccessibilityDataSeriesConfiguration()
{
  return &type metadata for CodableAccessibilityDataSeriesConfiguration;
}

uint64_t CodableAccessibilityDataSeriesConfiguration.ValueDescription.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int16 v20;
  char v21;
  int v22;
  char v23;

  type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for KeyedEncodingContainer<CodableAccessibilityDataSeriesConfiguration.ValueDescription.CodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type CodableAccessibilityDataSeriesConfiguration.ValueDescription.CodingKeys and conformance CodableAccessibilityDataSeriesConfiguration.ValueDescription.CodingKeys, (uint64_t)&unk_250643EC0, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE3520]);
  v4 = v3;
  v16 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v15 - v5;
  v7 = *v1;
  v8 = v1[1];
  v22 = *((unsigned __int16 *)v1 + 8);
  v9 = *((_BYTE *)v1 + 18);
  v10 = v1[3];
  v11 = v1[4];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type CodableAccessibilityDataSeriesConfiguration.ValueDescription.CodingKeys and conformance CodableAccessibilityDataSeriesConfiguration.ValueDescription.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v18 = v7;
  v19 = v8;
  v21 = v9;
  v20 = v22;
  v23 = 0;
  type metadata accessor for CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>();
  lazy protocol witness table accessor for type CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText> and conformance CodableAccessibilityVersionStorage<A, B>(&lazy protocol witness table cache variable for type CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText> and conformance CodableAccessibilityVersionStorage<A, B>, (uint64_t)&protocol conformance descriptor for CodableAccessibilityVersionStorage<A, B>);
  v12 = v17;
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  if (v12)
    return (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v6, v4);
  v14 = v16;
  v18 = v10;
  v19 = v11;
  v23 = 1;
  type metadata accessor for Range<Double>();
  lazy protocol witness table accessor for type Range<Double> and conformance <> Range<A>(&lazy protocol witness table cache variable for type Range<Double> and conformance <> Range<A>, MEMORY[0x24BEE13D8], MEMORY[0x24BEE1B98]);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v6, v4);
}

void CodableAccessibilityDataSeriesConfiguration.ValueDescription.init(from:)(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  int v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  unsigned __int16 v17;
  unsigned __int8 v18;
  char v19;

  type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for KeyedDecodingContainer<CodableAccessibilityDataSeriesConfiguration.ValueDescription.CodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type CodableAccessibilityDataSeriesConfiguration.ValueDescription.CodingKeys and conformance CodableAccessibilityDataSeriesConfiguration.ValueDescription.CodingKeys, (uint64_t)&unk_250643EC0, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE33E0]);
  v15 = v5;
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v14 - v7;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type CodableAccessibilityDataSeriesConfiguration.ValueDescription.CodingKeys and conformance CodableAccessibilityDataSeriesConfiguration.ValueDescription.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2)
  {
    v10 = 0;
    v11 = 0;
    v12 = 16711680;
  }
  else
  {
    v14 = v6;
    type metadata accessor for CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>();
    v19 = 0;
    lazy protocol witness table accessor for type CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText> and conformance CodableAccessibilityVersionStorage<A, B>(&lazy protocol witness table cache variable for type CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText> and conformance CodableAccessibilityVersionStorage<A, B>, (uint64_t)&protocol conformance descriptor for CodableAccessibilityVersionStorage<A, B>);
    v9 = v15;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    v10 = *((_QWORD *)&v16 + 1);
    v11 = (void *)v16;
    v12 = v17 | (v18 << 16);
    type metadata accessor for Range<Double>();
    v19 = 1;
    outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>?(v11, v10, v12);
    lazy protocol witness table accessor for type Range<Double> and conformance <> Range<A>(&lazy protocol witness table cache variable for type Range<Double> and conformance <> Range<A>, MEMORY[0x24BEE1400], MEMORY[0x24BEE1BC8]);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v14 + 8))(v8, v9);
    v13 = v16;
    *(_QWORD *)a2 = v11;
    *(_QWORD *)(a2 + 8) = v10;
    *(_BYTE *)(a2 + 18) = BYTE2(v12);
    *(_WORD *)(a2 + 16) = v12;
    *(_OWORD *)(a2 + 24) = v13;
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  outlined consume of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>?(v11, v10, v12);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance CodableAccessibilityDataSeriesConfiguration.ValueDescription.CodingKeys()
{
  _BYTE *v0;

  if (*v0)
    return 0xD000000000000013;
  else
    return 0x7470697263736564;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance CodableAccessibilityDataSeriesConfiguration.ValueDescription.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = specialized CodableAccessibilityDataSeriesConfiguration.ValueDescription.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance CodableAccessibilityDataSeriesConfiguration.ValueDescription.CodingKeys()
{
  lazy protocol witness table accessor for type CodableAccessibilityDataSeriesConfiguration.ValueDescription.CodingKeys and conformance CodableAccessibilityDataSeriesConfiguration.ValueDescription.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CodableAccessibilityDataSeriesConfiguration.ValueDescription.CodingKeys()
{
  lazy protocol witness table accessor for type CodableAccessibilityDataSeriesConfiguration.ValueDescription.CodingKeys and conformance CodableAccessibilityDataSeriesConfiguration.ValueDescription.CodingKeys();
  return CodingKey.debugDescription.getter();
}

void protocol witness for Decodable.init(from:) in conformance CodableAccessibilityDataSeriesConfiguration.ValueDescription(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  CodableAccessibilityDataSeriesConfiguration.ValueDescription.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance CodableAccessibilityDataSeriesConfiguration.ValueDescription(_QWORD *a1)
{
  return CodableAccessibilityDataSeriesConfiguration.ValueDescription.encode(to:)(a1);
}

uint64_t CodableAccessibilityDataSeriesConfiguration.AxisConfiguration.init(_:in:)@<X0>(__int128 *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t inited;
  void *v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  uint64_t v45;
  unsigned __int16 v46;
  unsigned __int8 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;

  v4 = a1[5];
  v52 = a1[4];
  v53 = v4;
  v5 = a1[7];
  v54 = a1[6];
  v55 = v5;
  v6 = a1[1];
  v48 = *a1;
  v49 = v6;
  v7 = a1[3];
  v50 = a1[2];
  v51 = v7;
  v8 = *a2;
  v9 = a2[1];
  v10 = *((_QWORD *)&v6 + 1);
  if (!*((_QWORD *)&v6 + 1))
    goto LABEL_3;
  v12 = *((_QWORD *)&v48 + 1);
  v11 = v49;
  v13 = v48;
  type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<Text>, (uint64_t)&type metadata for Text, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_23527E860;
  *(_QWORD *)(inited + 32) = v13;
  *(_QWORD *)(inited + 40) = v12;
  *(_BYTE *)(inited + 48) = v11 & 1;
  *(_QWORD *)(inited + 56) = v10;
  v42 = v8;
  v43 = v9;
  v40 = 0;
  v41 = 0;
  swift_retain();
  swift_retain();
  outlined copy of Text?(v13, v12, v11, v10);
  CodableAccessibilityVersionStorage<>.init(texts:in:optional:idiom:)(inited, &v42, 0, &v40, (uint64_t)&v44);
  if (v47 != 255)
  {
    v17 = v46 | (v47 << 16);
    v15 = v44;
    v16 = v45;
  }
  else
  {
LABEL_3:
    v15 = 0;
    v16 = 0;
    v17 = 16711680;
  }
  v18 = *((_QWORD *)&v51 + 1);
  v39 = v16;
  v32 = v8;
  if (!*((_QWORD *)&v51 + 1))
  {
    outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>?(v15, v16, v17);
    goto LABEL_9;
  }
  v20 = *((_QWORD *)&v50 + 1);
  v19 = v51;
  v21 = v50;
  type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<Text>, (uint64_t)&type metadata for Text, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
  v22 = swift_initStackObject();
  *(_OWORD *)(v22 + 16) = xmmword_23527E860;
  *(_QWORD *)(v22 + 32) = v21;
  *(_QWORD *)(v22 + 40) = v20;
  *(_BYTE *)(v22 + 48) = v19 & 1;
  *(_QWORD *)(v22 + 56) = v18;
  v42 = v8;
  v43 = v9;
  v40 = 0;
  v41 = 0;
  swift_retain();
  swift_retain();
  outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>?(v15, v39, v17);
  outlined copy of Text?(v21, v20, v19, v18);
  CodableAccessibilityVersionStorage<>.init(texts:in:optional:idiom:)(v22, &v42, 0, &v40, (uint64_t)&v44);
  if (v47 == 255)
  {
LABEL_9:
    v24 = 0;
    v25 = 0;
    v23 = 16711680;
    goto LABEL_10;
  }
  v23 = v46 | (v47 << 16);
  v24 = v44;
  v25 = v45;
LABEL_10:
  v33 = v25;
  swift_retain();
  swift_retain();
  outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>?(v24, v25, v23);
  v26 = swift_bridgeObjectRetain();
  v27 = specialized Sequence.compactMap<A>(_:)(v26, v32, v9);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  v38 = *((_QWORD *)&v52 + 1);
  v37 = v53;
  v36 = *((_QWORD *)&v53 + 1);
  v35 = v54;
  v34 = v55;
  v28 = *((_QWORD *)&v54 + 1);
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  v29 = swift_bridgeObjectRetain();
  v30 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay7SwiftUI36AccessibilityDataSeriesConfigurationV16ValueDescriptionVG_AF07CodablefghI0VAIVs5NeverOTg503_s7d4UI43lfghi21V04AxisG0V_2inAeA0defr35VADV_AA17EnvironmentValuesVtcfcAC16jK11VAhLVXEfU0_AF0xY0VTf1cn_nTf4ng_n(v29, v32, v9);
  swift_release_n();
  swift_release_n();
  outlined release of AccessibilityDataSeriesConfiguration.AxisConfiguration((uint64_t *)&v48);
  swift_bridgeObjectRelease();
  outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>?(v15, v39, v17);
  outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>?(v24, v33, v23);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined consume of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>?(v24, v33, v23);
  outlined consume of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>?(v15, v39, v17);
  *(_QWORD *)a3 = v15;
  *(_QWORD *)(a3 + 8) = v39;
  *(_BYTE *)(a3 + 18) = BYTE2(v17);
  *(_WORD *)(a3 + 16) = v17;
  *(_QWORD *)(a3 + 24) = v24;
  *(_QWORD *)(a3 + 32) = v33;
  *(_BYTE *)(a3 + 42) = BYTE2(v23);
  *(_WORD *)(a3 + 40) = v23;
  *(_QWORD *)(a3 + 48) = v27;
  *(_QWORD *)(a3 + 56) = v38;
  *(_BYTE *)(a3 + 64) = v37;
  *(_QWORD *)(a3 + 72) = v36;
  *(_BYTE *)(a3 + 80) = v35;
  *(_QWORD *)(a3 + 88) = v28;
  *(_QWORD *)(a3 + 96) = v34;
  *(_QWORD *)(a3 + 104) = v30;
  outlined consume of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>?(v15, v39, v17);
  outlined consume of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>?(v24, v33, v23);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t CodableAccessibilityDataSeriesConfiguration.AxisConfiguration.configuration.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  void *v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  void *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t result;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v34 = 0;
  v35 = 0;
  v32 = 0;
  v33 = 0;
  v3 = *(void **)(v1 + 24);
  v4 = *(_QWORD *)(v1 + 32);
  v5 = *(unsigned __int16 *)(v1 + 40) | (*(unsigned __int8 *)(v1 + 42) << 16);
  v31 = *(_QWORD *)(v1 + 56);
  v30 = *(_BYTE *)(v1 + 64);
  v29 = *(_QWORD *)(v1 + 72);
  v28 = *(_BYTE *)(v1 + 80);
  v26 = *(_QWORD *)(v1 + 96);
  v27 = *(_QWORD *)(v1 + 88);
  if (*(unsigned __int8 *)(v1 + 18) != 255)
  {
    v7 = *(void **)v1;
    v6 = *(_QWORD *)(v1 + 8);
    v8 = *(unsigned __int16 *)(v1 + 16) | (*(unsigned __int8 *)(v1 + 18) << 16);
    if (((*(unsigned __int8 *)(v1 + 18) << 16) & 0x10000) != 0)
    {
      type metadata accessor for AccessibilityTextStorage();
      v13 = swift_allocObject();
      *(_QWORD *)(v13 + 16) = v7;
      *(_QWORD *)(v13 + 24) = v6;
      *(_BYTE *)(v13 + 32) = v8 & 1;
      *(_BYTE *)(v13 + 33) = BYTE1(v8) & 1;
      v34 = 1;
      v35 = v13;
      outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v7, v6, v8, 1);
      v33 = 0;
      v32 = MEMORY[0x24BEE4AF8];
    }
    else
    {
      outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(*(void **)v1, *(_QWORD *)(v1 + 8), *(_WORD *)(v1 + 16), 0);
      v9 = ResolvedStyledText.accessibilityText.getter();
      v32 = v11;
      v33 = v10;
      v34 = v12 & 1;
      v35 = v9;
      outlined consume of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>?(v7, v6, v8);
    }
  }
  if (BYTE2(v5) == 255)
  {
    v14 = 0;
    v15 = 0;
    v16 = 0;
    v17 = 0;
  }
  else if ((v5 & 0x10000) != 0)
  {
    type metadata accessor for AccessibilityTextStorage();
    v14 = swift_allocObject();
    *(_QWORD *)(v14 + 16) = v3;
    *(_QWORD *)(v14 + 24) = v4;
    *(_BYTE *)(v14 + 32) = v5 & 1;
    *(_BYTE *)(v14 + 33) = BYTE1(v5) & 1;
    v16 = 1;
    outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v3, v4, v5, 1);
    v15 = 0;
    v17 = MEMORY[0x24BEE4AF8];
  }
  else
  {
    outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v3, v4, v5, 0);
    v14 = ResolvedStyledText.accessibilityText.getter();
    v15 = v18;
    v17 = v19;
    v16 = v20 & 1;
    outlined consume of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>?(v3, v4, v5);
  }
  v21 = swift_bridgeObjectRetain();
  v22 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay7SwiftUI34CodableAccessibilityVersionStorageOyAF0F18ResolvedStyledTextVAF0gL0VGG_AF0L0Vs5NeverOTg503_s7d4UI43fg54DataSeriesConfigurationV04AxisG0V13configurationAA0defu9VADVvgAA4l8VAA0cD14hi8OyAA0c14jK62J0VAA0dJ0VGcfu_32f6f9bf4b0141814c023ba9cad627274bArKTf3nnnpk_nTf1cn_n(v21);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v23 = swift_bridgeObjectRetain();
  v24 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay7SwiftUI43CodableAccessibilityDataSeriesConfigurationV16ValueDescriptionVG_AF0ghiJ0VAIVs5NeverOTg503_s7d4UI43fghij31V04AxisG0V13configurationAA0defr10VADVvgAH16kL58VAcJVcfu0_33_21c9bbe930dcb26c694134c0e56303c8AlKTf3nnnpk_nTf1cn_n(v23);
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a1 = v35;
  *(_QWORD *)(a1 + 8) = v33;
  *(_QWORD *)(a1 + 16) = v34;
  *(_QWORD *)(a1 + 24) = v32;
  *(_QWORD *)(a1 + 32) = v14;
  *(_QWORD *)(a1 + 40) = v15;
  *(_QWORD *)(a1 + 48) = v16;
  *(_QWORD *)(a1 + 56) = v17;
  *(_QWORD *)(a1 + 64) = v22;
  *(_QWORD *)(a1 + 72) = v31;
  *(_BYTE *)(a1 + 80) = v30;
  *(_QWORD *)(a1 + 88) = v29;
  *(_BYTE *)(a1 + 96) = v28;
  *(_QWORD *)(a1 + 104) = v27;
  *(_QWORD *)(a1 + 112) = v26;
  *(_QWORD *)(a1 + 120) = v24;
  return result;
}

uint64_t CodableAccessibilityDataSeriesConfiguration.AxisConfiguration.CodingKeys.stringValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_234D345CC + 4 * byte_23529B6FA[a1]))(0x656C746974, 0xE500000000000000);
}

uint64_t sub_234D345CC()
{
  return 0x6562614C74696E75;
}

uint64_t sub_234D345E8()
{
  return 0x79726F6765746163;
}

uint64_t sub_234D3460C()
{
  return 0x566D756D696E696DLL;
}

unint64_t sub_234D34638()
{
  return 0xD000000000000011;
}

uint64_t CodableAccessibilityDataSeriesConfiguration.AxisConfiguration.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  __int16 v36;
  char v37;
  int v38;
  char v39;

  type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for KeyedEncodingContainer<CodableAccessibilityDataSeriesConfiguration.AxisConfiguration.CodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type CodableAccessibilityDataSeriesConfiguration.AxisConfiguration.CodingKeys and conformance CodableAccessibilityDataSeriesConfiguration.AxisConfiguration.CodingKeys, (uint64_t)&unk_250643D08, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE3520]);
  v4 = v3;
  v32 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v19 - v5;
  v8 = *v1;
  v7 = v1[1];
  v38 = *((unsigned __int16 *)v1 + 8);
  v9 = *((_BYTE *)v1 + 18);
  v10 = v1[3];
  v30 = v1[4];
  v31 = v10;
  LODWORD(v10) = *((unsigned __int8 *)v1 + 42);
  v28 = *((unsigned __int16 *)v1 + 20);
  v29 = v10;
  v11 = v1[6];
  v26 = v1[7];
  v27 = v11;
  LODWORD(v11) = *((unsigned __int8 *)v1 + 64);
  v12 = v1[9];
  v24 = *((unsigned __int8 *)v1 + 80);
  v25 = v11;
  v22 = v1[11];
  v23 = v12;
  v13 = v1[12];
  v20 = v1[13];
  v21 = v13;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type CodableAccessibilityDataSeriesConfiguration.AxisConfiguration.CodingKeys and conformance CodableAccessibilityDataSeriesConfiguration.AxisConfiguration.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v34 = v8;
  v35 = v7;
  v37 = v9;
  v36 = v38;
  v14 = v6;
  v39 = 0;
  type metadata accessor for CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>();
  lazy protocol witness table accessor for type CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText> and conformance CodableAccessibilityVersionStorage<A, B>(&lazy protocol witness table cache variable for type CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText> and conformance CodableAccessibilityVersionStorage<A, B>, (uint64_t)&protocol conformance descriptor for CodableAccessibilityVersionStorage<A, B>);
  v15 = v33;
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  if (v15)
    return (*(uint64_t (**)(char *, uint64_t))(v32 + 8))(v6, v4);
  v17 = v27;
  v18 = v32;
  v34 = v31;
  v35 = v30;
  v37 = (v28 | (v29 << 16)) >> 16;
  v36 = v28;
  v39 = 1;
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  v34 = v17;
  v39 = 2;
  type metadata accessor for [CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>]();
  lazy protocol witness table accessor for type [CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>] and conformance <A> [A](&lazy protocol witness table cache variable for type [CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>] and conformance <A> [A], &lazy protocol witness table cache variable for type CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText> and conformance CodableAccessibilityVersionStorage<A, B>, (uint64_t)&protocol conformance descriptor for CodableAccessibilityVersionStorage<A, B>, MEMORY[0x24BEE12A0]);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  LOBYTE(v34) = 3;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  LOBYTE(v34) = 4;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  v34 = v22;
  v39 = 5;
  type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for [Double], MEMORY[0x24BEE13C8], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1250]);
  lazy protocol witness table accessor for type [Double] and conformance <A> [A](&lazy protocol witness table cache variable for type [Double] and conformance <A> [A], MEMORY[0x24BEE13D8], MEMORY[0x24BEE12A0]);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  v34 = v21;
  v39 = 6;
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  v34 = v20;
  v39 = 7;
  type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for [CodableAccessibilityDataSeriesConfiguration.ValueDescription], (uint64_t)&type metadata for CodableAccessibilityDataSeriesConfiguration.ValueDescription, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1250]);
  lazy protocol witness table accessor for type [CodableAccessibilityDataSeriesConfiguration.ValueDescription] and conformance <A> [A](&lazy protocol witness table cache variable for type [CodableAccessibilityDataSeriesConfiguration.ValueDescription] and conformance <A> [A], (uint64_t (*)(void))lazy protocol witness table accessor for type CodableAccessibilityDataSeriesConfiguration.ValueDescription and conformance CodableAccessibilityDataSeriesConfiguration.ValueDescription, MEMORY[0x24BEE12A0]);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v18 + 8))(v14, v4);
}

uint64_t CodableAccessibilityDataSeriesConfiguration.AxisConfiguration.init(from:)@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  id v11;
  uint64_t v12;
  int v13;
  id v14;
  id v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  id v26;
  id v27;
  void *v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  id v33;
  id v34;
  id v35;
  _QWORD *v36;
  uint64_t v37;
  id v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  int v43;
  int v44;
  id v45;
  uint64_t v46;
  _QWORD *v47;
  id v48;
  id v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  id v53;
  uint64_t v54;
  unsigned __int16 v55;
  unsigned __int8 v56;
  int v57;
  char v58;

  v47 = a2;
  type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for KeyedDecodingContainer<CodableAccessibilityDataSeriesConfiguration.AxisConfiguration.CodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type CodableAccessibilityDataSeriesConfiguration.AxisConfiguration.CodingKeys and conformance CodableAccessibilityDataSeriesConfiguration.AxisConfiguration.CodingKeys, (uint64_t)&unk_250643D08, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE33E0]);
  v50 = v4;
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v39 - v6;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type CodableAccessibilityDataSeriesConfiguration.AxisConfiguration.CodingKeys and conformance CodableAccessibilityDataSeriesConfiguration.AxisConfiguration.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  v52 = a1;
  if (v2)
  {
    v51 = v2;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v52);
    outlined consume of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>?(0, 0, 16711680);
    outlined consume of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>?(0, 0, 16711680);
    return (uint64_t)v49;
  }
  else
  {
    v46 = v5;
    type metadata accessor for CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>();
    v58 = 0;
    lazy protocol witness table accessor for type CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText> and conformance CodableAccessibilityVersionStorage<A, B>(&lazy protocol witness table cache variable for type CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText> and conformance CodableAccessibilityVersionStorage<A, B>, (uint64_t)&protocol conformance descriptor for CodableAccessibilityVersionStorage<A, B>);
    v8 = v50;
    v9 = v7;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    v11 = v53;
    v12 = v54;
    v13 = v55 | (v56 << 16);
    v58 = 1;
    outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>?(v53, v54, v13);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    v57 = v13;
    v14 = v11;
    v15 = v53;
    v16 = v54;
    LODWORD(v11) = v55 | (v56 << 16);
    type metadata accessor for [CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>]();
    v58 = 2;
    outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>?(v15, v16, (int)v11);
    lazy protocol witness table accessor for type [CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>] and conformance <A> [A](&lazy protocol witness table cache variable for type [CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>] and conformance <A> [A], &lazy protocol witness table cache variable for type CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText> and conformance CodableAccessibilityVersionStorage<A, B>, (uint64_t)&protocol conformance descriptor for CodableAccessibilityVersionStorage<A, B>, MEMORY[0x24BEE12D0]);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    v44 = (int)v11;
    v17 = v53;
    LOBYTE(v53) = 3;
    swift_bridgeObjectRetain();
    v18 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    v45 = v17;
    v19 = v18;
    v43 = v20;
    LOBYTE(v53) = 4;
    v21 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    v41 = v22;
    v42 = v21;
    type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for [Double], MEMORY[0x24BEE13C8], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1250]);
    v24 = v23;
    v58 = 5;
    lazy protocol witness table accessor for type [Double] and conformance <A> [A](&lazy protocol witness table cache variable for type [Double] and conformance <A> [A], MEMORY[0x24BEE1400], MEMORY[0x24BEE12D0]);
    v51 = v24;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    v25 = v53;
    v58 = 6;
    swift_bridgeObjectRetain();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    v49 = v25;
    v40 = v19;
    v26 = v53;
    type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for [CodableAccessibilityDataSeriesConfiguration.ValueDescription], (uint64_t)&type metadata for CodableAccessibilityDataSeriesConfiguration.ValueDescription, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1250]);
    v58 = 7;
    lazy protocol witness table accessor for type [CodableAccessibilityDataSeriesConfiguration.ValueDescription] and conformance <A> [A](&lazy protocol witness table cache variable for type [CodableAccessibilityDataSeriesConfiguration.ValueDescription] and conformance <A> [A], (uint64_t (*)(void))lazy protocol witness table accessor for type CodableAccessibilityDataSeriesConfiguration.ValueDescription and conformance CodableAccessibilityDataSeriesConfiguration.ValueDescription, MEMORY[0x24BEE12D0]);
    swift_bridgeObjectRetain();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    v51 = 0;
    v48 = v26;
    (*(void (**)(char *, uint64_t))(v46 + 8))(v9, v8);
    v27 = v53;
    v28 = v14;
    v29 = v14;
    v30 = v12;
    v31 = v12;
    LODWORD(v12) = v57;
    outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>?(v29, v31, v57);
    v32 = v16;
    LODWORD(v19) = v44;
    outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>?(v15, v16, v44);
    v33 = v45;
    swift_bridgeObjectRetain();
    v34 = v49;
    swift_bridgeObjectRetain();
    v35 = v27;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined consume of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>?(v15, v32, v19);
    outlined consume of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>?(v28, v30, v12);
    v36 = v47;
    *v47 = v28;
    v36[1] = v30;
    *((_BYTE *)v36 + 18) = BYTE2(v12);
    *((_WORD *)v36 + 8) = v12;
    v36[3] = v15;
    v36[4] = v32;
    *((_BYTE *)v36 + 42) = BYTE2(v19);
    *((_WORD *)v36 + 20) = v19;
    v37 = v40;
    v36[6] = v33;
    v36[7] = v37;
    *((_BYTE *)v36 + 64) = v43 & 1;
    v36[9] = v42;
    *((_BYTE *)v36 + 80) = v41 & 1;
    v38 = v48;
    v36[11] = v34;
    v36[12] = v38;
    v36[13] = v35;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v52);
    outlined consume of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>?(v28, v30, v12);
    outlined consume of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>?(v15, v32, v19);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance CodableAccessibilityDataSeriesConfiguration.AxisConfiguration.CodingKeys()
{
  unsigned __int8 *v0;

  return CodableAccessibilityDataSeriesConfiguration.AxisConfiguration.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance CodableAccessibilityDataSeriesConfiguration.AxisConfiguration.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = specialized CodableAccessibilityDataSeriesConfiguration.AxisConfiguration.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance CodableAccessibilityDataSeriesConfiguration.AxisConfiguration.CodingKeys()
{
  lazy protocol witness table accessor for type CodableAccessibilityDataSeriesConfiguration.AxisConfiguration.CodingKeys and conformance CodableAccessibilityDataSeriesConfiguration.AxisConfiguration.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CodableAccessibilityDataSeriesConfiguration.AxisConfiguration.CodingKeys()
{
  lazy protocol witness table accessor for type CodableAccessibilityDataSeriesConfiguration.AxisConfiguration.CodingKeys and conformance CodableAccessibilityDataSeriesConfiguration.AxisConfiguration.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for Decodable.init(from:) in conformance CodableAccessibilityDataSeriesConfiguration.AxisConfiguration@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return CodableAccessibilityDataSeriesConfiguration.AxisConfiguration.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance CodableAccessibilityDataSeriesConfiguration.AxisConfiguration(_QWORD *a1)
{
  return CodableAccessibilityDataSeriesConfiguration.AxisConfiguration.encode(to:)(a1);
}

void *CodableAccessibilityDataSeriesConfiguration.init(_:in:)@<X0>(void *__src@<X0>, uint64_t *a2@<X1>, void *a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  unint64_t v23;
  void *v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  int v46;
  uint64_t v47;
  void *v48;
  void *v49;
  unint64_t v50;
  uint64_t v51;
  void *v52;
  uint64_t v53[2];
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  unsigned __int16 v63;
  unsigned __int8 v64;
  __int128 v65;
  unsigned __int16 v66;
  unsigned __int8 v67;
  uint64_t v68;
  uint64_t v69;
  unsigned __int8 v70;
  uint64_t v71;
  unsigned __int8 v72;
  __int128 v73;
  uint64_t v74;
  _BYTE __srca[264];
  __int128 v76[8];
  _QWORD __dst[39];
  uint64_t v78[18];

  memcpy(__dst, __src, sizeof(__dst));
  v5 = *a2;
  v4 = a2[1];
  v6 = __dst[0];
  v7 = __dst[1];
  v8 = __dst[2];
  v9 = __dst[3];
  type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<Text>, (uint64_t)&type metadata for Text, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
  v10 = swift_allocObject();
  *(_OWORD *)(v10 + 16) = xmmword_23527E860;
  *(_QWORD *)(v10 + 32) = v6;
  *(_QWORD *)(v10 + 40) = v7;
  *(_BYTE *)(v10 + 48) = v8;
  *(_QWORD *)(v10 + 56) = v9;
  v78[0] = v5;
  v78[1] = v4;
  v76[0] = 0uLL;
  swift_bridgeObjectRetain();
  outlined copy of Text.Storage(v6, v7, v8);
  swift_retain();
  swift_retain();
  CodableAccessibilityVersionStorage<>.init(texts:in:optional:idiom:)(v10, v78, 0, (uint64_t *)v76, (uint64_t)__srca);
  v11 = *(void **)__srca;
  v12 = *(_QWORD *)&__srca[8];
  v13 = *(unsigned __int16 *)&__srca[16] | (__srca[18] << 16);
  outlined init with take of AccessibilityDataSeriesConfiguration.AxisConfiguration?((uint64_t)&__dst[7], (uint64_t)v78);
  v47 = v12;
  v48 = v11;
  v46 = v13;
  if (_s7SwiftUI36AccessibilityDataSeriesConfigurationV04AxisF0VSgWOg((uint64_t)v78) == 1)
  {
    outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>?(v11, v12, v13);
    v51 = 0;
    v52 = 0;
    v49 = 0;
    v50 = 0;
    v41 = 0;
    v44 = 0;
    v45 = 0;
    v43 = 0;
    v14 = 0;
    v15 = 0;
    v16 = 0;
    v17 = 0;
    v18 = 0;
    v19 = 0;
  }
  else
  {
    outlined init with take of AccessibilityDataSeriesConfiguration.AxisConfiguration?((uint64_t)&__dst[7], (uint64_t)__srca);
    v76[4] = *(_OWORD *)&__srca[64];
    v76[5] = *(_OWORD *)&__srca[80];
    v76[6] = *(_OWORD *)&__srca[96];
    v76[7] = *(_OWORD *)&__srca[112];
    v76[0] = *(_OWORD *)__srca;
    v76[1] = *(_OWORD *)&__srca[16];
    v76[2] = *(_OWORD *)&__srca[32];
    v76[3] = *(_OWORD *)&__srca[48];
    *(_QWORD *)&v62 = v5;
    *((_QWORD *)&v62 + 1) = v4;
    swift_retain();
    swift_retain();
    outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>?(v11, v12, v13);
    outlined retain of AccessibilityDataSeriesConfiguration.AxisConfiguration?(&__dst[7], (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of AccessibilityDataSeriesConfiguration.AxisConfiguration?);
    CodableAccessibilityDataSeriesConfiguration.AxisConfiguration.init(_:in:)(v76, (uint64_t *)&v62, (uint64_t)&v54);
    v51 = *((_QWORD *)&v54 + 1);
    v52 = (void *)v54;
    v49 = (void *)*((_QWORD *)&v55 + 1);
    v50 = (unsigned __int16)v55 | ((unint64_t)BYTE2(v55) << 16);
    v41 = v56;
    v44 = v57;
    v45 = WORD4(v56) | ((unint64_t)BYTE10(v56) << 16);
    v43 = *((_QWORD *)&v57 + 1);
    v14 = v58;
    v15 = *((_QWORD *)&v58 + 1);
    v16 = v59;
    v17 = *((_QWORD *)&v59 + 1);
    v19 = *((_QWORD *)&v60 + 1);
    v18 = v60;
  }
  outlined init with take of AccessibilityDataSeriesConfiguration.AxisConfiguration?((uint64_t)&__dst[23], (uint64_t)v76);
  v39 = v19;
  v40 = v15;
  v38 = v18;
  if (_s7SwiftUI36AccessibilityDataSeriesConfigurationV04AxisF0VSgWOg((uint64_t)v76) == 1)
  {
    v20 = v16;
    v22 = v51;
    v21 = v52;
    v24 = v49;
    v23 = v50;
    v25 = v41;
    outlined copy of CodableAccessibilityDataSeriesConfiguration.AxisConfiguration?(v52, v51, v50, v49, v41, v45, v44);
    swift_release();
    swift_release();
    outlined release of AccessibilityDataSeriesConfiguration((uint64_t)__dst);
    v26 = 0;
    v27 = 0;
    v28 = 0;
    v29 = 0;
    v30 = 0;
    v31 = 0;
    v32 = 0;
    v33 = 0;
    v34 = 0uLL;
    v35 = 0uLL;
    v36 = 0uLL;
  }
  else
  {
    outlined init with take of AccessibilityDataSeriesConfiguration.AxisConfiguration?((uint64_t)&__dst[23], (uint64_t)__srca);
    v58 = *(_OWORD *)&__srca[64];
    v59 = *(_OWORD *)&__srca[80];
    v60 = *(_OWORD *)&__srca[96];
    v61 = *(_OWORD *)&__srca[112];
    v54 = *(_OWORD *)__srca;
    v55 = *(_OWORD *)&__srca[16];
    v56 = *(_OWORD *)&__srca[32];
    v57 = *(_OWORD *)&__srca[48];
    v53[0] = v5;
    v53[1] = v4;
    outlined retain of AccessibilityDataSeriesConfiguration.AxisConfiguration?(&__dst[23], (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of AccessibilityDataSeriesConfiguration.AxisConfiguration?);
    outlined retain of AccessibilityDataSeriesConfiguration.AxisConfiguration?(&__dst[23], (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of AccessibilityDataSeriesConfiguration.AxisConfiguration?);
    v20 = v16;
    v22 = v51;
    v24 = v49;
    v23 = v50;
    v25 = v41;
    outlined copy of CodableAccessibilityDataSeriesConfiguration.AxisConfiguration?(v52, v51, v50, v49, v41, v45, v44);
    CodableAccessibilityDataSeriesConfiguration.AxisConfiguration.init(_:in:)(&v54, v53, (uint64_t)&v62);
    outlined release of AccessibilityDataSeriesConfiguration((uint64_t)__dst);
    outlined retain of AccessibilityDataSeriesConfiguration.AxisConfiguration?(&__dst[23], (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of AccessibilityDataSeriesConfiguration.AxisConfiguration?);
    v34 = v62;
    v26 = v63 | ((unint64_t)v64 << 16);
    v35 = v65;
    v27 = v66 | ((unint64_t)v67 << 16);
    v28 = v68;
    v29 = v69;
    v30 = v70;
    v31 = v71;
    v32 = v72;
    v36 = v73;
    v21 = v52;
    v33 = v74;
  }
  __srca[18] = BYTE2(v46);
  *(_WORD *)&__srca[19] = __dst[4];
  *(_QWORD *)&__srca[24] = __dst[5];
  *(_WORD *)&__srca[32] = __dst[6];
  __srca[34] = BYTE2(__dst[6]);
  *(_QWORD *)&__srca[168] = v26;
  *(_QWORD *)&__srca[192] = v27;
  *(_QWORD *)&__srca[200] = v28;
  *(_QWORD *)&__srca[208] = v29;
  *(_QWORD *)&__srca[216] = v30;
  *(_QWORD *)&__srca[224] = v31;
  *(_OWORD *)&__srca[152] = v34;
  *(_OWORD *)&__srca[176] = v35;
  *(_OWORD *)&__srca[240] = v36;
  *(_QWORD *)&__srca[232] = v32;
  *(_QWORD *)&__srca[256] = v33;
  *(_QWORD *)__srca = v48;
  *(_QWORD *)&__srca[8] = v47;
  *(_WORD *)&__srca[16] = v46;
  *(_QWORD *)&__srca[40] = v21;
  *(_QWORD *)&__srca[48] = v22;
  *(_QWORD *)&__srca[56] = v23;
  *(_QWORD *)&__srca[64] = v24;
  *(_QWORD *)&__srca[72] = v25;
  *(_QWORD *)&__srca[80] = v45;
  *(_QWORD *)&__srca[88] = v44;
  *(_QWORD *)&__srca[96] = v43;
  *(_QWORD *)&__srca[104] = v14;
  *(_QWORD *)&__srca[112] = v40;
  *(_QWORD *)&__srca[120] = v20;
  *(_QWORD *)&__srca[128] = v17;
  *(_QWORD *)&__srca[136] = v38;
  *(_QWORD *)&__srca[144] = v39;
  outlined retain of CodableAccessibilityDataSeriesConfiguration((uint64_t)__srca, (void (*)(_QWORD, _QWORD, _QWORD))outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>?, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, uint64_t, uint64_t))outlined copy of CodableAccessibilityDataSeriesConfiguration.AxisConfiguration?);
  outlined consume of CodableAccessibilityDataSeriesConfiguration.AxisConfiguration?(v21, v22, v23, v24, v25, v45, v44);
  outlined consume of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>?(v48, v47, v46);
  outlined retain of CodableAccessibilityDataSeriesConfiguration((uint64_t)__srca, (void (*)(_QWORD, _QWORD, _QWORD))outlined consume of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>?, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, uint64_t, uint64_t))outlined consume of CodableAccessibilityDataSeriesConfiguration.AxisConfiguration?);
  return memcpy(a3, __srca, 0x108uLL);
}

void *CodableAccessibilityDataSeriesConfiguration.configuration.getter@<X0>(void *a1@<X8>)
{
  uint64_t v1;
  void *v2;
  char v3;
  __int128 v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  int v20;
  unint64_t v21;
  uint64_t v22;
  char v23;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  char v33;
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  __int128 v43;
  unint64_t v44;
  uint64_t v45;
  char v46;
  char v47;
  char v48;
  uint64_t v49;
  char v50;
  char v51;
  _BYTE __src[312];
  __int128 v53;
  __int16 v54;
  char v55;
  __int128 v56;
  __int16 v57;
  char v58;
  uint64_t v59;
  uint64_t v60;
  char v61;
  uint64_t v62;
  char v63;
  __int128 v64;
  uint64_t v65;
  __int128 v66;
  __int16 v67;
  char v68;
  __int128 v69;
  __int16 v70;
  char v71;
  uint64_t v72;
  uint64_t v73;
  char v74;
  uint64_t v75;
  char v76;
  __int128 v77;
  uint64_t v78;

  v2 = a1;
  v51 = *(_BYTE *)(v1 + 19);
  v50 = *(_BYTE *)(v1 + 20);
  v49 = *(_QWORD *)(v1 + 24);
  v47 = *(_BYTE *)(v1 + 33);
  v48 = *(_BYTE *)(v1 + 32);
  v3 = *(_BYTE *)(v1 + 34);
  v4 = *(_OWORD *)(v1 + 40);
  v5 = *(_QWORD *)(v1 + 56);
  v6 = *(_OWORD *)(v1 + 64);
  v8 = *(_QWORD *)(v1 + 80);
  v7 = *(_QWORD *)(v1 + 88);
  v10 = *(_QWORD *)(v1 + 96);
  v9 = *(_QWORD *)(v1 + 104);
  v12 = *(_QWORD *)(v1 + 112);
  v11 = *(_QWORD *)(v1 + 120);
  v13 = *(_OWORD *)(v1 + 128);
  v14 = *(_QWORD *)(v1 + 144);
  v15 = *(_QWORD *)(v1 + 168);
  v35 = *(_OWORD *)(v1 + 152);
  v36 = *(_OWORD *)(v1 + 176);
  v16 = *(_QWORD *)(v1 + 200);
  v37 = *(_QWORD *)(v1 + 192);
  v38 = *(_QWORD *)(v1 + 208);
  v39 = *(_QWORD *)(v1 + 216);
  v40 = *(_QWORD *)(v1 + 224);
  v41 = *(_QWORD *)(v1 + 232);
  v43 = *(_OWORD *)(v1 + 240);
  v42 = *(_QWORD *)(v1 + 256);
  if (*(unsigned __int8 *)(v1 + 18) == 255)
  {
    v17 = 0;
    v46 = 0;
    v44 = 0xE000000000000000;
    v45 = MEMORY[0x24BEE4AF8];
    if (v7)
    {
LABEL_3:
      v66 = v4;
      v67 = v5;
      v68 = BYTE2(v5);
      v69 = v6;
      v70 = v8;
      v71 = BYTE2(v8);
      v72 = v7;
      v73 = v10;
      v74 = v9 & 1;
      v75 = v12;
      v76 = v11 & 1;
      v77 = v13;
      v78 = v14;
      CodableAccessibilityDataSeriesConfiguration.AxisConfiguration.configuration.getter((uint64_t)__src);
      _ViewInputs.base.modify(__src);
      goto LABEL_9;
    }
  }
  else
  {
    v25 = *(_OWORD *)(v1 + 40);
    v26 = *(_OWORD *)(v1 + 64);
    v27 = *(_QWORD *)(v1 + 96);
    v28 = *(_QWORD *)(v1 + 104);
    v29 = *(_QWORD *)(v1 + 112);
    v30 = *(_QWORD *)(v1 + 120);
    v31 = *(_QWORD *)(v1 + 144);
    v32 = *(_OWORD *)(v1 + 128);
    v33 = *(_BYTE *)(v1 + 34);
    v19 = *(void **)v1;
    v18 = *(_QWORD *)(v1 + 8);
    v20 = *(unsigned __int16 *)(v1 + 16) | (*(unsigned __int8 *)(v1 + 18) << 16);
    if (((*(unsigned __int8 *)(v1 + 18) << 16) & 0x10000) != 0)
    {
      type metadata accessor for AccessibilityTextStorage();
      v17 = swift_allocObject();
      *(_QWORD *)(v17 + 16) = v19;
      *(_QWORD *)(v17 + 24) = v18;
      *(_BYTE *)(v17 + 32) = v20 & 1;
      *(_BYTE *)(v17 + 33) = BYTE1(v20) & 1;
      v46 = 1;
      outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v19, v18, v20, 1);
      v44 = 0;
      v45 = MEMORY[0x24BEE4AF8];
    }
    else
    {
      outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(*(void **)v1, *(_QWORD *)(v1 + 8), *(_WORD *)(v1 + 16), 0);
      v17 = ResolvedStyledText.accessibilityText.getter();
      v44 = v21;
      v45 = v22;
      v46 = v23 & 1;
      outlined consume of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>?(v19, v18, v20);
    }
    v2 = a1;
    v3 = v33;
    v13 = v32;
    LOBYTE(v11) = v30;
    v14 = v31;
    LOBYTE(v9) = v28;
    v12 = v29;
    v10 = v27;
    v4 = v25;
    v6 = v26;
    if (v7)
      goto LABEL_3;
  }
  _s7SwiftUI36AccessibilityDataSeriesConfigurationV04AxisF0VSgWOi0_(__src);
LABEL_9:
  outlined init with take of AccessibilityDataSeriesConfiguration.AxisConfiguration?((uint64_t)__src, (uint64_t)&v66);
  if (v16)
  {
    v53 = v35;
    v54 = v15;
    v55 = BYTE2(v15);
    v56 = v36;
    v57 = v37;
    v58 = BYTE2(v37);
    v59 = v16;
    v60 = v38;
    v61 = v39 & 1;
    v62 = v40;
    v63 = v41 & 1;
    v64 = v43;
    v65 = v42;
    CodableAccessibilityDataSeriesConfiguration.AxisConfiguration.configuration.getter((uint64_t)__src);
    _ViewInputs.base.modify(__src);
  }
  else
  {
    _s7SwiftUI36AccessibilityDataSeriesConfigurationV04AxisF0VSgWOi0_(__src);
  }
  outlined init with take of AccessibilityDataSeriesConfiguration.AxisConfiguration?((uint64_t)__src, (uint64_t)&v53);
  *(_QWORD *)__src = v17;
  *(_QWORD *)&__src[8] = v44;
  __src[16] = v46;
  *(_QWORD *)&__src[24] = v45;
  __src[32] = v51;
  __src[33] = v50;
  *(_QWORD *)&__src[40] = v49;
  __src[48] = v48;
  __src[49] = v47;
  __src[50] = v3;
  outlined init with take of AccessibilityDataSeriesConfiguration.AxisConfiguration?((uint64_t)&v66, (uint64_t)&__src[56]);
  outlined init with take of AccessibilityDataSeriesConfiguration.AxisConfiguration?((uint64_t)&v53, (uint64_t)&__src[184]);
  return memcpy(v2, __src, 0x138uLL);
}

uint64_t CodableAccessibilityDataSeriesConfiguration.CodingKeys.stringValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_234D35B5C + 4 * byte_23529B702[a1]))(1701667182, 0xE400000000000000);
}

uint64_t sub_234D35B5C()
{
  return 1701869940;
}

unint64_t sub_234D35B68()
{
  return 0xD000000000000014;
}

unint64_t sub_234D35BD4()
{
  return 0xD000000000000012;
}

uint64_t CodableAccessibilityDataSeriesConfiguration.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  int v45;
  int v46;
  uint64_t v47;
  int v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  char v67;

  type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for KeyedEncodingContainer<CodableAccessibilityDataSeriesConfiguration.CodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type CodableAccessibilityDataSeriesConfiguration.CodingKeys and conformance CodableAccessibilityDataSeriesConfiguration.CodingKeys, (uint64_t)&unk_250643E30, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE3520]);
  v4 = v3;
  v50 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v15 - v5;
  v8 = *v1;
  v7 = v1[1];
  v66 = *((unsigned __int16 *)v1 + 8);
  v9 = *((_BYTE *)v1 + 18);
  v10 = *((unsigned __int8 *)v1 + 19);
  v48 = *((unsigned __int8 *)v1 + 20);
  v49 = v10;
  v47 = v1[3];
  v11 = *((unsigned __int8 *)v1 + 32);
  v45 = *((unsigned __int8 *)v1 + 33);
  v46 = v11;
  v44 = *((unsigned __int8 *)v1 + 34);
  v30 = v1[5];
  v31 = v1[6];
  v32 = v1[7];
  v33 = v1[8];
  v34 = v1[9];
  v43 = v1[10];
  v42 = v1[11];
  v41 = v1[12];
  v40 = v1[13];
  v39 = v1[14];
  v38 = v1[15];
  v37 = v1[16];
  v36 = v1[17];
  v35 = v1[18];
  v16 = v1[19];
  v17 = v1[20];
  v18 = v1[21];
  v19 = v1[22];
  v20 = v1[23];
  v29 = v1[24];
  v28 = v1[25];
  v27 = v1[26];
  v26 = v1[27];
  v25 = v1[28];
  v24 = v1[29];
  v23 = v1[30];
  v22 = v1[31];
  v21 = v1[32];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type CodableAccessibilityDataSeriesConfiguration.CodingKeys and conformance CodableAccessibilityDataSeriesConfiguration.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v52 = v8;
  v53 = v7;
  BYTE2(v54) = v9;
  LOWORD(v54) = v66;
  v67 = 0;
  type metadata accessor for CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>();
  lazy protocol witness table accessor for type CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText> and conformance CodableAccessibilityVersionStorage<A, B>(&lazy protocol witness table cache variable for type CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText> and conformance CodableAccessibilityVersionStorage<A, B>, (uint64_t)&protocol conformance descriptor for CodableAccessibilityVersionStorage<A, B>);
  v12 = v51;
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  if (v12)
    return (*(uint64_t (**)(char *, uint64_t))(v50 + 8))(v6, v4);
  v14 = v50;
  LOBYTE(v52) = v49;
  v67 = 1;
  lazy protocol witness table accessor for type AccessibilityDataSeriesConfiguration.DataSeriesType and conformance AccessibilityDataSeriesConfiguration.DataSeriesType();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  LOBYTE(v52) = 2;
  KeyedEncodingContainer.encode(_:forKey:)();
  LOBYTE(v52) = 3;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  LOBYTE(v52) = 4;
  KeyedEncodingContainer.encode(_:forKey:)();
  LOBYTE(v52) = 5;
  KeyedEncodingContainer.encode(_:forKey:)();
  v52 = v30;
  v53 = v31;
  v54 = v32;
  v55 = v33;
  v56 = v34;
  v57 = v43;
  v58 = v42;
  v59 = v41;
  v60 = v40;
  v61 = v39;
  v62 = v38;
  v63 = v37;
  v64 = v36;
  v65 = v35;
  v67 = 6;
  lazy protocol witness table accessor for type CodableAccessibilityDataSeriesConfiguration.AxisConfiguration and conformance CodableAccessibilityDataSeriesConfiguration.AxisConfiguration();
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  v52 = v16;
  v53 = v17;
  v54 = v18;
  v55 = v19;
  v56 = v20;
  v57 = v29;
  v58 = v28;
  v59 = v27;
  v60 = v26;
  v61 = v25;
  v62 = v24;
  v63 = v23;
  v64 = v22;
  v65 = v21;
  v67 = 7;
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v6, v4);
}

void *CodableAccessibilityDataSeriesConfiguration.init(from:)@<X0>(_QWORD *a1@<X0>, void *a2@<X8>)
{
  unint64_t v2;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  void *v9;
  char *v10;
  void *v12;
  uint64_t v13;
  unsigned int v14;
  void *v15;
  int v16;
  int v17;
  int v18;
  uint64_t v19;
  void (*v20)(char *, void *);
  char v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  void *v34;
  unsigned int v35;
  void *v36;
  uint64_t v37;
  unsigned int v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  void *v59;
  uint64_t v60;
  void *v61;
  void *v62;
  unint64_t v63;
  _QWORD *v64;
  void *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  void *v70;
  uint64_t v71;
  uint64_t v72;
  _QWORD v73[33];
  void *v74;
  uint64_t v75;
  uint64_t v76;
  void *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  void *v93;
  uint64_t v94;
  uint64_t v95;
  void *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  char v107;
  void *v108;
  uint64_t v109;
  uint64_t v110;
  void *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  int v122;
  char v123;
  char v124;
  __int16 v125;
  char v126;
  uint64_t v127;

  v61 = a2;
  type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for KeyedDecodingContainer<CodableAccessibilityDataSeriesConfiguration.CodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type CodableAccessibilityDataSeriesConfiguration.CodingKeys and conformance CodableAccessibilityDataSeriesConfiguration.CodingKeys, (uint64_t)&unk_250643E30, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE33E0]);
  v62 = v4;
  v5 = *((_QWORD *)v4 - 1);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v33 - v6;
  v124 = 1;
  v8 = a1[3];
  v64 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v8);
  lazy protocol witness table accessor for type CodableAccessibilityDataSeriesConfiguration.CodingKeys and conformance CodableAccessibilityDataSeriesConfiguration.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2)
  {
    v63 = v2;
    v127 = 0;
    v71 = 0;
    v72 = 0;
    v68 = 0;
    v69 = 0;
    v70 = 0;
    v66 = 0;
    v67 = 0;
    v65 = 0;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v64);
    outlined consume of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>?(0, 0, 16711680);
    outlined consume of CodableAccessibilityDataSeriesConfiguration.AxisConfiguration?(v65, v66, v67, v70, v68, v69, v71);
    return outlined consume of CodableAccessibilityDataSeriesConfiguration.AxisConfiguration?(0, 0, 0, 0, 0, 0, 0);
  }
  else
  {
    v60 = v5;
    type metadata accessor for CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>();
    LOBYTE(v73[0]) = 0;
    lazy protocol witness table accessor for type CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText> and conformance CodableAccessibilityVersionStorage<A, B>(&lazy protocol witness table cache variable for type CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText> and conformance CodableAccessibilityVersionStorage<A, B>, (uint64_t)&protocol conformance descriptor for CodableAccessibilityVersionStorage<A, B>);
    v9 = v62;
    v10 = v7;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    v12 = v74;
    v13 = v75;
    v14 = (unsigned __int16)v76 | (BYTE2(v76) << 16);
    LOBYTE(v73[0]) = 1;
    outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>?(v74, v75, v14);
    lazy protocol witness table accessor for type AccessibilityDataSeriesConfiguration.DataSeriesType and conformance AccessibilityDataSeriesConfiguration.DataSeriesType();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    v15 = v12;
    LODWORD(v12) = v74;
    LOBYTE(v74) = 2;
    v16 = KeyedDecodingContainer.decode(_:forKey:)();
    LOBYTE(v74) = 3;
    v59 = (void *)KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    LODWORD(v58) = v16;
    v124 = v17 & 1;
    LOBYTE(v74) = 4;
    v18 = v17;
    LODWORD(v56) = KeyedDecodingContainer.decode(_:forKey:)();
    LODWORD(v57) = v18;
    LOBYTE(v74) = 5;
    LOBYTE(v18) = KeyedDecodingContainer.decode(_:forKey:)();
    LOBYTE(v73[0]) = 6;
    v63 = lazy protocol witness table accessor for type CodableAccessibilityDataSeriesConfiguration.AxisConfiguration and conformance CodableAccessibilityDataSeriesConfiguration.AxisConfiguration();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    v51 = (int)v12;
    v19 = v81;
    v107 = 7;
    v54 = v87;
    v55 = v86;
    v53 = v85;
    v52 = v84;
    v127 = v83;
    v72 = v82;
    v65 = v74;
    v66 = v75;
    v67 = v76;
    v68 = v78;
    v69 = v79;
    v70 = v77;
    v71 = v80;
    outlined copy of CodableAccessibilityDataSeriesConfiguration.AxisConfiguration?(v74, v75, v76, v77, v78, v79, v80);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    v63 = 0;
    v46 = v58 & 1;
    v50 = v56 & 1;
    v20 = *(void (**)(_QWORD, _QWORD))(v60 + 8);
    v21 = v18 & 1;
    v39 = v18 & 1;
    v20(v10, v9);
    v22 = v108;
    v23 = v110;
    v62 = v111;
    v24 = v112;
    v60 = v113;
    v58 = v114;
    v56 = v115;
    v41 = v109;
    v42 = v116;
    v43 = v117;
    v44 = v118;
    v45 = v119;
    v47 = v120;
    v48 = v121;
    v40 = v110;
    v49 = v112;
    outlined copy of CodableAccessibilityDataSeriesConfiguration.AxisConfiguration?(v108, v109, v110, v111, v112, v113, v114);
    outlined consume of CodableAccessibilityDataSeriesConfiguration.AxisConfiguration?(0, 0, 0, 0, 0, 0, 0);
    v36 = v15;
    v37 = v13;
    v73[0] = v15;
    v73[1] = v13;
    LOBYTE(v73[4]) = v57 & 1;
    v35 = v14;
    v38 = HIWORD(v14);
    BYTE2(v73[2]) = BYTE2(v14);
    LOWORD(v73[2]) = v14;
    BYTE3(v73[2]) = v51;
    BYTE4(v73[2]) = v46;
    v73[3] = v59;
    BYTE1(v73[4]) = v50;
    BYTE2(v73[4]) = v21;
    v73[5] = v65;
    v73[6] = v66;
    v73[7] = v67;
    v73[8] = v70;
    v73[9] = v68;
    v73[10] = v69;
    v73[11] = v71;
    v73[12] = v19;
    v73[13] = v72;
    v73[14] = v127;
    v57 = v19;
    v73[15] = v52;
    v73[16] = v53;
    v73[17] = v55;
    v73[18] = v54;
    v34 = v22;
    v25 = v41;
    v73[19] = v22;
    v73[20] = v41;
    v73[21] = v23;
    v73[22] = v62;
    v73[23] = v24;
    v73[24] = v60;
    v73[25] = v58;
    v73[26] = v56;
    v73[27] = v42;
    v73[28] = v43;
    v73[29] = v44;
    v73[30] = v45;
    v73[31] = v47;
    v73[32] = v48;
    outlined retain of CodableAccessibilityDataSeriesConfiguration((uint64_t)v73, (void (*)(_QWORD, _QWORD, _QWORD))outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>?, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, uint64_t, uint64_t))outlined copy of CodableAccessibilityDataSeriesConfiguration.AxisConfiguration?);
    outlined consume of CodableAccessibilityDataSeriesConfiguration.AxisConfiguration?(v22, v25, v40, v62, v49, v60, v58);
    v27 = (uint64_t)v65;
    v26 = v66;
    v28 = v67;
    v29 = v68;
    v30 = v69;
    outlined consume of CodableAccessibilityDataSeriesConfiguration.AxisConfiguration?(v65, v66, v67, v70, v68, v69, v71);
    v32 = v36;
    v31 = v37;
    LOWORD(v19) = v35;
    outlined consume of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>?(v36, v37, v35);
    memcpy(v61, v73, 0x108uLL);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v64);
    v74 = v32;
    v75 = v31;
    BYTE2(v76) = v38;
    LOWORD(v76) = v19;
    BYTE3(v76) = v51;
    BYTE4(v76) = v46;
    v77 = v59;
    BYTE1(v78) = v50;
    *(_WORD *)((char *)&v76 + 5) = v125;
    HIBYTE(v76) = v126;
    LOBYTE(v78) = v124;
    BYTE2(v78) = v39;
    *(_DWORD *)((char *)&v78 + 3) = v122;
    HIBYTE(v78) = v123;
    v79 = v27;
    v80 = v26;
    v81 = v28;
    v82 = (uint64_t)v70;
    v83 = v29;
    v84 = v30;
    v85 = v71;
    v86 = v57;
    v87 = v72;
    v88 = v127;
    v89 = v52;
    v90 = v53;
    v91 = v55;
    v92 = v54;
    v93 = v34;
    v94 = v41;
    v95 = v40;
    v96 = v62;
    v97 = v49;
    v98 = v60;
    v99 = v58;
    v100 = v56;
    v101 = v42;
    v102 = v43;
    v103 = v44;
    v104 = v45;
    v105 = v47;
    v106 = v48;
    return (void *)outlined retain of CodableAccessibilityDataSeriesConfiguration((uint64_t)&v74, (void (*)(_QWORD, _QWORD, _QWORD))outlined consume of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>?, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, uint64_t, uint64_t))outlined consume of CodableAccessibilityDataSeriesConfiguration.AxisConfiguration?);
  }
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance CodableAccessibilityDataSeriesConfiguration.CodingKeys()
{
  unsigned __int8 *v0;

  return CodableAccessibilityDataSeriesConfiguration.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance CodableAccessibilityDataSeriesConfiguration.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = specialized CodableAccessibilityDataSeriesConfiguration.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance CodableAccessibilityDataSeriesConfiguration.CodingKeys()
{
  lazy protocol witness table accessor for type CodableAccessibilityDataSeriesConfiguration.CodingKeys and conformance CodableAccessibilityDataSeriesConfiguration.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CodableAccessibilityDataSeriesConfiguration.CodingKeys()
{
  lazy protocol witness table accessor for type CodableAccessibilityDataSeriesConfiguration.CodingKeys and conformance CodableAccessibilityDataSeriesConfiguration.CodingKeys();
  return CodingKey.debugDescription.getter();
}

void *protocol witness for Decodable.init(from:) in conformance CodableAccessibilityDataSeriesConfiguration@<X0>(_QWORD *a1@<X0>, void *a2@<X8>)
{
  return CodableAccessibilityDataSeriesConfiguration.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance CodableAccessibilityDataSeriesConfiguration(_QWORD *a1)
{
  return CodableAccessibilityDataSeriesConfiguration.encode(to:)(a1);
}

unint64_t lazy protocol witness table accessor for type CodableAccessibilityDataSeriesConfiguration.CodingKeys and conformance CodableAccessibilityDataSeriesConfiguration.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CodableAccessibilityDataSeriesConfiguration.CodingKeys and conformance CodableAccessibilityDataSeriesConfiguration.CodingKeys;
  if (!lazy protocol witness table cache variable for type CodableAccessibilityDataSeriesConfiguration.CodingKeys and conformance CodableAccessibilityDataSeriesConfiguration.CodingKeys)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for CodableAccessibilityDataSeriesConfiguration.CodingKeys, &unk_250643E30);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodableAccessibilityDataSeriesConfiguration.CodingKeys and conformance CodableAccessibilityDataSeriesConfiguration.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CodableAccessibilityDataSeriesConfiguration.CodingKeys and conformance CodableAccessibilityDataSeriesConfiguration.CodingKeys;
  if (!lazy protocol witness table cache variable for type CodableAccessibilityDataSeriesConfiguration.CodingKeys and conformance CodableAccessibilityDataSeriesConfiguration.CodingKeys)
  {
    result = MEMORY[0x23B7C9C04]("y_<\x1BT \v", &unk_250643E30);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodableAccessibilityDataSeriesConfiguration.CodingKeys and conformance CodableAccessibilityDataSeriesConfiguration.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CodableAccessibilityDataSeriesConfiguration.CodingKeys and conformance CodableAccessibilityDataSeriesConfiguration.CodingKeys;
  if (!lazy protocol witness table cache variable for type CodableAccessibilityDataSeriesConfiguration.CodingKeys and conformance CodableAccessibilityDataSeriesConfiguration.CodingKeys)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for CodableAccessibilityDataSeriesConfiguration.CodingKeys, &unk_250643E30);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodableAccessibilityDataSeriesConfiguration.CodingKeys and conformance CodableAccessibilityDataSeriesConfiguration.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CodableAccessibilityDataSeriesConfiguration.CodingKeys and conformance CodableAccessibilityDataSeriesConfiguration.CodingKeys;
  if (!lazy protocol witness table cache variable for type CodableAccessibilityDataSeriesConfiguration.CodingKeys and conformance CodableAccessibilityDataSeriesConfiguration.CodingKeys)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for CodableAccessibilityDataSeriesConfiguration.CodingKeys, &unk_250643E30);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodableAccessibilityDataSeriesConfiguration.CodingKeys and conformance CodableAccessibilityDataSeriesConfiguration.CodingKeys);
  }
  return result;
}

void outlined consume of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>?(void *a1, uint64_t a2, int a3)
{
  if (BYTE2(a3) != 255)
    outlined consume of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(a1, a2, a3, BYTE2(a3) & 1);
}

void *outlined consume of CodableAccessibilityDataSeriesConfiguration.AxisConfiguration?(void *result, uint64_t a2, int a3, void *a4, uint64_t a5, int a6, uint64_t a7)
{
  if (a7)
  {
    outlined consume of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>?(result, a2, a3);
    outlined consume of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>?(a4, a5, a6);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return (void *)swift_bridgeObjectRelease();
  }
  return result;
}

id outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>?(id result, uint64_t a2, int a3)
{
  if (BYTE2(a3) != 255)
    return outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(result, a2, a3, BYTE2(a3) & 1);
  return result;
}

unint64_t lazy protocol witness table accessor for type CodableAccessibilityDataSeriesConfiguration.AxisConfiguration and conformance CodableAccessibilityDataSeriesConfiguration.AxisConfiguration()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CodableAccessibilityDataSeriesConfiguration.AxisConfiguration and conformance CodableAccessibilityDataSeriesConfiguration.AxisConfiguration;
  if (!lazy protocol witness table cache variable for type CodableAccessibilityDataSeriesConfiguration.AxisConfiguration and conformance CodableAccessibilityDataSeriesConfiguration.AxisConfiguration)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for CodableAccessibilityDataSeriesConfiguration.AxisConfiguration, &type metadata for CodableAccessibilityDataSeriesConfiguration.AxisConfiguration);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodableAccessibilityDataSeriesConfiguration.AxisConfiguration and conformance CodableAccessibilityDataSeriesConfiguration.AxisConfiguration);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CodableAccessibilityDataSeriesConfiguration.AxisConfiguration and conformance CodableAccessibilityDataSeriesConfiguration.AxisConfiguration;
  if (!lazy protocol witness table cache variable for type CodableAccessibilityDataSeriesConfiguration.AxisConfiguration and conformance CodableAccessibilityDataSeriesConfiguration.AxisConfiguration)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for CodableAccessibilityDataSeriesConfiguration.AxisConfiguration, &type metadata for CodableAccessibilityDataSeriesConfiguration.AxisConfiguration);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodableAccessibilityDataSeriesConfiguration.AxisConfiguration and conformance CodableAccessibilityDataSeriesConfiguration.AxisConfiguration);
  }
  return result;
}

void *outlined copy of CodableAccessibilityDataSeriesConfiguration.AxisConfiguration?(void *result, uint64_t a2, int a3, void *a4, uint64_t a5, int a6, uint64_t a7)
{
  if (a7)
  {
    outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>?(result, a2, a3);
    outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>?(a4, a5, a6);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return (void *)swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t outlined retain of CodableAccessibilityDataSeriesConfiguration(uint64_t a1, void (*a2)(_QWORD, _QWORD, _QWORD), void (*a3)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, uint64_t, uint64_t))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v19 = *(_QWORD *)(a1 + 48);
  v20 = *(_QWORD *)(a1 + 40);
  v4 = *(_QWORD *)(a1 + 64);
  v18 = *(_QWORD *)(a1 + 56);
  v5 = *(_QWORD *)(a1 + 72);
  v6 = *(_QWORD *)(a1 + 80);
  v7 = *(_QWORD *)(a1 + 88);
  v8 = *(_QWORD *)(a1 + 96);
  v14 = *(_OWORD *)(a1 + 120);
  v15 = *(_OWORD *)(a1 + 104);
  v9 = *(_QWORD *)(a1 + 136);
  v10 = *(_QWORD *)(a1 + 144);
  v27 = *(_QWORD *)(a1 + 160);
  v28 = *(_QWORD *)(a1 + 152);
  v25 = *(_QWORD *)(a1 + 176);
  v26 = *(_QWORD *)(a1 + 168);
  v23 = *(_QWORD *)(a1 + 192);
  v24 = *(_QWORD *)(a1 + 184);
  v21 = *(_QWORD *)(a1 + 208);
  v22 = *(_QWORD *)(a1 + 200);
  v16 = *(_OWORD *)(a1 + 232);
  v17 = *(_OWORD *)(a1 + 216);
  v11 = *(_QWORD *)(a1 + 248);
  v12 = *(_QWORD *)(a1 + 256);
  a2(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(unsigned __int16 *)(a1 + 16) | (*(unsigned __int8 *)(a1 + 18) << 16));
  a3(v20, v19, v18, v4, v5, v6, v7, v8, v15, *((_QWORD *)&v15 + 1), v14, *((_QWORD *)&v14 + 1), v9, v10);
  a3(v28, v27, v26, v25, v24, v23, v22, v21, v17, *((_QWORD *)&v17 + 1), v16, *((_QWORD *)&v16 + 1), v11, v12);
  return a1;
}

unint64_t lazy protocol witness table accessor for type CodableAccessibilityDataSeriesConfiguration.AxisConfiguration.CodingKeys and conformance CodableAccessibilityDataSeriesConfiguration.AxisConfiguration.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CodableAccessibilityDataSeriesConfiguration.AxisConfiguration.CodingKeys and conformance CodableAccessibilityDataSeriesConfiguration.AxisConfiguration.CodingKeys;
  if (!lazy protocol witness table cache variable for type CodableAccessibilityDataSeriesConfiguration.AxisConfiguration.CodingKeys and conformance CodableAccessibilityDataSeriesConfiguration.AxisConfiguration.CodingKeys)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for CodableAccessibilityDataSeriesConfiguration.AxisConfiguration.CodingKeys, &unk_250643D08);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodableAccessibilityDataSeriesConfiguration.AxisConfiguration.CodingKeys and conformance CodableAccessibilityDataSeriesConfiguration.AxisConfiguration.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CodableAccessibilityDataSeriesConfiguration.AxisConfiguration.CodingKeys and conformance CodableAccessibilityDataSeriesConfiguration.AxisConfiguration.CodingKeys;
  if (!lazy protocol witness table cache variable for type CodableAccessibilityDataSeriesConfiguration.AxisConfiguration.CodingKeys and conformance CodableAccessibilityDataSeriesConfiguration.AxisConfiguration.CodingKeys)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for CodableAccessibilityDataSeriesConfiguration.AxisConfiguration.CodingKeys, &unk_250643D08);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodableAccessibilityDataSeriesConfiguration.AxisConfiguration.CodingKeys and conformance CodableAccessibilityDataSeriesConfiguration.AxisConfiguration.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CodableAccessibilityDataSeriesConfiguration.AxisConfiguration.CodingKeys and conformance CodableAccessibilityDataSeriesConfiguration.AxisConfiguration.CodingKeys;
  if (!lazy protocol witness table cache variable for type CodableAccessibilityDataSeriesConfiguration.AxisConfiguration.CodingKeys and conformance CodableAccessibilityDataSeriesConfiguration.AxisConfiguration.CodingKeys)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for CodableAccessibilityDataSeriesConfiguration.AxisConfiguration.CodingKeys, &unk_250643D08);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodableAccessibilityDataSeriesConfiguration.AxisConfiguration.CodingKeys and conformance CodableAccessibilityDataSeriesConfiguration.AxisConfiguration.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CodableAccessibilityDataSeriesConfiguration.AxisConfiguration.CodingKeys and conformance CodableAccessibilityDataSeriesConfiguration.AxisConfiguration.CodingKeys;
  if (!lazy protocol witness table cache variable for type CodableAccessibilityDataSeriesConfiguration.AxisConfiguration.CodingKeys and conformance CodableAccessibilityDataSeriesConfiguration.AxisConfiguration.CodingKeys)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for CodableAccessibilityDataSeriesConfiguration.AxisConfiguration.CodingKeys, &unk_250643D08);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodableAccessibilityDataSeriesConfiguration.AxisConfiguration.CodingKeys and conformance CodableAccessibilityDataSeriesConfiguration.AxisConfiguration.CodingKeys);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type [CodableAccessibilityDataSeriesConfiguration.ValueDescription] and conformance <A> [A](unint64_t *a1, uint64_t (*a2)(void), uint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  result = *a1;
  if (!result)
  {
    type metadata accessor for MutableBox<CachedEnvironment>(255, &lazy cache variable for type metadata for [CodableAccessibilityDataSeriesConfiguration.ValueDescription], (uint64_t)&type metadata for CodableAccessibilityDataSeriesConfiguration.ValueDescription, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1250]);
    v8 = v7;
    v9 = a2();
    result = MEMORY[0x23B7C9C04](a3, v8, &v9);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type CodableAccessibilityDataSeriesConfiguration.ValueDescription and conformance CodableAccessibilityDataSeriesConfiguration.ValueDescription()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CodableAccessibilityDataSeriesConfiguration.ValueDescription and conformance CodableAccessibilityDataSeriesConfiguration.ValueDescription;
  if (!lazy protocol witness table cache variable for type CodableAccessibilityDataSeriesConfiguration.ValueDescription and conformance CodableAccessibilityDataSeriesConfiguration.ValueDescription)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for CodableAccessibilityDataSeriesConfiguration.ValueDescription, &type metadata for CodableAccessibilityDataSeriesConfiguration.ValueDescription);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodableAccessibilityDataSeriesConfiguration.ValueDescription and conformance CodableAccessibilityDataSeriesConfiguration.ValueDescription);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CodableAccessibilityDataSeriesConfiguration.ValueDescription and conformance CodableAccessibilityDataSeriesConfiguration.ValueDescription;
  if (!lazy protocol witness table cache variable for type CodableAccessibilityDataSeriesConfiguration.ValueDescription and conformance CodableAccessibilityDataSeriesConfiguration.ValueDescription)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for CodableAccessibilityDataSeriesConfiguration.ValueDescription, &type metadata for CodableAccessibilityDataSeriesConfiguration.ValueDescription);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodableAccessibilityDataSeriesConfiguration.ValueDescription and conformance CodableAccessibilityDataSeriesConfiguration.ValueDescription);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText> and conformance CodableAccessibilityVersionStorage<A, B>(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = type metadata accessor for CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>();
    result = MEMORY[0x23B7C9C04](a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type [Double] and conformance <A> [A](unint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;

  result = *a1;
  if (!result)
  {
    type metadata accessor for MutableBox<CachedEnvironment>(255, &lazy cache variable for type metadata for [Double], MEMORY[0x24BEE13C8], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1250]);
    v8 = a2;
    result = MEMORY[0x23B7C9C04](a3, v7, &v8);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t _s7SwiftUI36AccessibilityDataSeriesConfigurationV04AxisF0VSgWOg(uint64_t a1)
{
  unint64_t v1;

  v1 = *(_QWORD *)(a1 + 64);
  if (v1 >= 0xFFFFFFFF)
    LODWORD(v1) = -1;
  return (v1 + 1);
}

uint64_t outlined release of AccessibilityDataSeriesConfiguration(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v11 = *(_QWORD *)(a1 + 64);
  v12 = *(_QWORD *)(a1 + 56);
  v2 = *(_QWORD *)(a1 + 88);
  v9 = *(_QWORD *)(a1 + 80);
  v10 = *(_QWORD *)(a1 + 72);
  v3 = *(_QWORD *)(a1 + 96);
  v4 = *(_QWORD *)(a1 + 104);
  v5 = *(_QWORD *)(a1 + 112);
  v7 = *(_OWORD *)(a1 + 120);
  v19 = *(_QWORD *)(a1 + 192);
  v20 = *(_QWORD *)(a1 + 184);
  v17 = *(_QWORD *)(a1 + 208);
  v18 = *(_QWORD *)(a1 + 200);
  v15 = *(_QWORD *)(a1 + 224);
  v16 = *(_QWORD *)(a1 + 216);
  v13 = *(_QWORD *)(a1 + 240);
  v14 = *(_QWORD *)(a1 + 232);
  v8 = *(_OWORD *)(a1 + 248);
  outlined consume of Text.Storage(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
  swift_bridgeObjectRelease();
  outlined consume of AccessibilityDataSeriesConfiguration.AxisConfiguration?(v12, v11, v10, v9, v2, v3, v4, v5, v7);
  outlined consume of AccessibilityDataSeriesConfiguration.AxisConfiguration?(v20, v19, v18, v17, v16, v15, v14, v13, v8);
  return a1;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay7SwiftUI36AccessibilityDataSeriesConfigurationV16ValueDescriptionVG_AF07CodablefghI0VAIVs5NeverOTg503_s7d4UI43lfghi21V04AxisG0V_2inAeA0defr35VADV_AA17EnvironmentValuesVtcfcAC16jK11VAhLVXEfU0_AF0xY0VTf1cn_nTf4ng_n(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int64_t v3;
  uint64_t v4;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t inited;
  uint64_t v14;
  int v15;
  int v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v23;
  int64_t v24;
  uint64_t v25[2];
  uint64_t v26[2];
  _QWORD v27[2];
  unsigned __int16 v28;
  unsigned __int8 v29;
  uint64_t v30;

  v3 = *(_QWORD *)(a1 + 16);
  v4 = MEMORY[0x24BEE4AF8];
  if (v3)
  {
    v30 = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3, 0);
    v4 = v30;
    type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<Text>, (uint64_t)&type metadata for Text, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
    v6 = (_QWORD *)(a1 + 72);
    do
    {
      v24 = v3;
      v7 = *(v6 - 5);
      v8 = *(v6 - 4);
      v9 = *((_BYTE *)v6 - 24);
      v10 = *(v6 - 2);
      v11 = *(v6 - 1);
      v12 = *v6;
      inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_23527E860;
      *(_QWORD *)(inited + 32) = v7;
      *(_QWORD *)(inited + 40) = v8;
      *(_BYTE *)(inited + 48) = v9;
      *(_QWORD *)(inited + 56) = v10;
      v26[0] = a2;
      v26[1] = a3;
      v25[0] = 0;
      v25[1] = 0;
      outlined copy of Text.Storage(v7, v8, v9);
      swift_bridgeObjectRetain();
      outlined copy of Text.Storage(v7, v8, v9);
      swift_bridgeObjectRetain();
      swift_retain();
      swift_retain();
      CodableAccessibilityVersionStorage<>.init(texts:in:optional:idiom:)(inited, v26, 0, v25, (uint64_t)v27);
      v14 = v27[0];
      v23 = v27[1];
      v15 = v29;
      v16 = v28;
      outlined consume of Text.Storage(v7, v8, v9);
      swift_bridgeObjectRelease();
      v30 = v4;
      v18 = *(_QWORD *)(v4 + 16);
      v17 = *(_QWORD *)(v4 + 24);
      if (v18 >= v17 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v17 > 1, v18 + 1, 1);
        v4 = v30;
      }
      *(_QWORD *)(v4 + 16) = v18 + 1;
      v19 = v4 + 40 * v18;
      *(_QWORD *)(v19 + 32) = v14;
      *(_QWORD *)(v19 + 40) = v23;
      *(_BYTE *)(v19 + 50) = (v16 | (v15 << 16)) >> 16;
      *(_WORD *)(v19 + 48) = v16;
      *(_QWORD *)(v19 + 56) = v11;
      *(_QWORD *)(v19 + 64) = v12;
      v6 += 6;
      v3 = v24 - 1;
    }
    while (v24 != 1);
  }
  return v4;
}

_QWORD *specialized Sequence.compactMap<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t inited;
  unsigned __int8 v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  unsigned int v16;
  _QWORD *v17;
  __int128 v19;
  uint64_t v22[2];
  uint64_t v23[2];
  __int128 v24;
  unsigned __int16 v25;
  unsigned __int8 v26;
  _QWORD *v27;

  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
    return (_QWORD *)MEMORY[0x24BEE4AF8];
  type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<Text>, (uint64_t)&type metadata for Text, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
  swift_bridgeObjectRetain();
  v5 = (_QWORD *)(a1 + 56);
  v6 = (_QWORD *)MEMORY[0x24BEE4AF8];
  do
  {
    v27 = v6;
    v7 = *v5;
    v8 = *((_BYTE *)v5 - 8);
    v9 = *(v5 - 3);
    v10 = *(v5 - 2);
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_23527E860;
    *(_QWORD *)(inited + 32) = v9;
    *(_QWORD *)(inited + 40) = v10;
    *(_BYTE *)(inited + 48) = v8;
    *(_QWORD *)(inited + 56) = v7;
    v23[0] = a2;
    v23[1] = a3;
    v22[0] = 0;
    v22[1] = 0;
    swift_bridgeObjectRetain();
    outlined copy of Text.Storage(v9, v10, v8);
    swift_bridgeObjectRetain();
    outlined copy of Text.Storage(v9, v10, v8);
    swift_retain();
    swift_retain();
    CodableAccessibilityVersionStorage<>.init(texts:in:optional:idiom:)(inited, v23, 0, v22, (uint64_t)&v24);
    outlined consume of Text.Storage(v9, v10, v8);
    swift_bridgeObjectRelease();
    v12 = v26;
    if (v26 == 255)
    {
      v6 = v27;
    }
    else
    {
      v19 = v24;
      v13 = v25;
      v6 = v27;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v6[2] + 1, 1, v6);
      v15 = v6[2];
      v14 = v6[3];
      if (v15 >= v14 >> 1)
        v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v14 > 1), v15 + 1, 1, v6);
      v16 = v13 & 0xFF00FFFF | (v12 << 16);
      v6[2] = v15 + 1;
      v17 = &v6[3 * v15];
      *((_OWORD *)v17 + 2) = v19;
      *((_WORD *)v17 + 24) = v16;
      *((_BYTE *)v17 + 50) = BYTE2(v16) & 1;
    }
    v5 += 4;
    --v3;
  }
  while (v3);
  swift_bridgeObjectRelease();
  return v6;
}

uint64_t *outlined release of AccessibilityDataSeriesConfiguration.AxisConfiguration(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = a1[4];
  v3 = a1[5];
  v4 = a1[6];
  v5 = a1[7];
  outlined consume of Text?(*a1, a1[1], a1[2], a1[3]);
  outlined consume of Text?(v2, v3, v4, v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

void *type metadata accessor for CodableAccessibilityDataSeriesConfiguration.AxisConfiguration.CodingKeys()
{
  return &unk_250643D08;
}

uint64_t storeEnumTagSinglePayload for CodableAccessibilityDataSeriesConfiguration.AxisConfiguration.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 7 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 7) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF9)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF8)
    return ((uint64_t (*)(void))((char *)&loc_234D3787C + 4 * byte_23529B70F[v4]))();
  *a1 = a2 + 7;
  return ((uint64_t (*)(void))((char *)sub_234D378B0 + 4 * byte_23529B70A[v4]))();
}

uint64_t sub_234D378B0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_234D378B8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x234D378C0);
  return result;
}

uint64_t sub_234D378CC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x234D378D4);
  *(_BYTE *)result = a2 + 7;
  return result;
}

uint64_t sub_234D378D8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_234D378E0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for CodableAccessibilityDataSeriesConfiguration.CodingKeys()
{
  return &unk_250643E30;
}

void destroy for CodableAccessibilityDataSeriesConfiguration.ValueDescription(uint64_t a1)
{
  int v1;

  if (*(unsigned __int8 *)(a1 + 18) != 255)
  {
    v1 = *(unsigned __int16 *)(a1 + 16) | (*(unsigned __int8 *)(a1 + 18) << 16);
    outlined consume of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(*(void **)a1, *(_QWORD *)(a1 + 8), v1, BYTE2(v1) & 1);
  }
}

uint64_t initializeWithCopy for CodableAccessibilityDataSeriesConfiguration.ValueDescription(uint64_t a1, uint64_t *a2)
{
  int v4;
  uint64_t v5;
  uint64_t v6;

  if (*((unsigned __int8 *)a2 + 18) == 255)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_DWORD *)(a1 + 15) = *(_DWORD *)((char *)a2 + 15);
  }
  else
  {
    v4 = *((unsigned __int16 *)a2 + 8) | (*((unsigned __int8 *)a2 + 18) << 16);
    v5 = *a2;
    v6 = a2[1];
    outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>((void *)*a2, v6, *((_WORD *)a2 + 8), BYTE2(v4) & 1);
    *(_QWORD *)a1 = v5;
    *(_QWORD *)(a1 + 8) = v6;
    *(_WORD *)(a1 + 16) = v4;
    *(_BYTE *)(a1 + 18) = BYTE2(v4) & 1;
  }
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 3);
  return a1;
}

uint64_t assignWithCopy for CodableAccessibilityDataSeriesConfiguration.ValueDescription(uint64_t a1, __int128 *a2)
{
  int v4;
  __int128 v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  char v13;
  __int16 v14;

  v4 = *((unsigned __int16 *)a2 + 8) | (*((unsigned __int8 *)a2 + 18) << 16);
  if (*(unsigned __int8 *)(a1 + 18) == 255)
  {
    if (BYTE2(v4) == 255)
    {
      v5 = *a2;
      *(_DWORD *)(a1 + 15) = *(_DWORD *)((char *)a2 + 15);
      *(_OWORD *)a1 = v5;
    }
    else
    {
      v7 = *(_QWORD *)a2;
      v8 = *((_QWORD *)a2 + 1);
      outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(*(void **)a2, v8, v4, BYTE2(v4) & 1);
      *(_QWORD *)a1 = v7;
      *(_QWORD *)(a1 + 8) = v8;
      *(_WORD *)(a1 + 16) = v4;
      *(_BYTE *)(a1 + 18) = BYTE2(v4) & 1;
    }
  }
  else if (BYTE2(v4) == 255)
  {
    outlined destroy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(a1);
    v6 = *(_DWORD *)((char *)a2 + 15);
    *(_OWORD *)a1 = *a2;
    *(_DWORD *)(a1 + 15) = v6;
  }
  else
  {
    v9 = *(void **)a2;
    v10 = *((_QWORD *)a2 + 1);
    outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(*(void **)a2, v10, v4, BYTE2(v4) & 1);
    v11 = *(void **)a1;
    v12 = *(_QWORD *)(a1 + 8);
    v13 = *(_BYTE *)(a1 + 18);
    *(_QWORD *)a1 = v9;
    *(_QWORD *)(a1 + 8) = v10;
    v14 = *(_WORD *)(a1 + 16);
    *(_WORD *)(a1 + 16) = v4;
    *(_BYTE *)(a1 + 18) = BYTE2(v4) & 1;
    outlined consume of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v11, v12, v14, v13);
  }
  *(_QWORD *)(a1 + 24) = *((_QWORD *)a2 + 3);
  *(_QWORD *)(a1 + 32) = *((_QWORD *)a2 + 4);
  return a1;
}

uint64_t assignWithTake for CodableAccessibilityDataSeriesConfiguration.ValueDescription(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  int v5;
  void *v6;
  uint64_t v7;

  if (*(unsigned __int8 *)(a1 + 18) != 255)
  {
    v4 = *(unsigned __int16 *)(a2 + 16) | (*(unsigned __int8 *)(a2 + 18) << 16);
    if (HIWORD(v4) <= 0xFEu)
    {
      v5 = *(unsigned __int16 *)(a1 + 16) | (*(unsigned __int8 *)(a1 + 18) << 16);
      v6 = *(void **)a1;
      v7 = *(_QWORD *)(a1 + 8);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_WORD *)(a1 + 16) = v4;
      *(_BYTE *)(a1 + 18) = BYTE2(v4) & 1;
      outlined consume of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v6, v7, v5, BYTE2(v5) & 1);
      goto LABEL_6;
    }
    outlined destroy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(a1);
  }
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_DWORD *)(a1 + 15) = *(_DWORD *)(a2 + 15);
LABEL_6:
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  return a1;
}

uint64_t getEnumTagSinglePayload for CodableAccessibilityDataSeriesConfiguration.ValueDescription(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFE && *(_BYTE *)(a1 + 40))
    return (*(_DWORD *)a1 + 254);
  v3 = *(unsigned __int8 *)(a1 + 18);
  if (v3 <= 1)
    v4 = -1;
  else
    v4 = (v3 ^ 0xFF) - 1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for CodableAccessibilityDataSeriesConfiguration.ValueDescription(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)result = a2 - 254;
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 40) = 1;
  }
  else
  {
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 40) = 0;
    if (a2)
      *(_BYTE *)(result + 18) = ~(_BYTE)a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for CodableAccessibilityDataSeriesConfiguration.ValueDescription()
{
  return &type metadata for CodableAccessibilityDataSeriesConfiguration.ValueDescription;
}

uint64_t specialized CodableAccessibilityDataSeriesConfiguration.ValueDescription.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x7470697263736564 && a2 == 0xEB000000006E6F69;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000013 && a2 == 0x80000002352E24C0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t specialized CodableAccessibilityDataSeriesConfiguration.AxisConfiguration.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x656C746974 && a2 == 0xE500000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6562614C74696E75 && a2 == 0xE90000000000006CLL
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x79726F6765746163 && a2 == 0xEE00736C6562614CLL
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x566D756D696E696DLL && a2 == 0xEC00000065756C61
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x566D756D6978616DLL && a2 == 0xEC00000065756C61
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x80000002352E2480
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0x7365756C6176 && a2 == 0xE600000000000000
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x80000002352E24A0)
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 7;
    else
      return 8;
  }
}

uint64_t specialized CodableAccessibilityDataSeriesConfiguration.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 1701667182 && a2 == 0xE400000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 1701869940 && a2 == 0xE400000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000014 && a2 == 0x80000002352E23C0
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0xD000000000000014 && a2 == 0x80000002352E23E0
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0xD00000000000001FLL && a2 == 0x80000002352E2400
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0xD000000000000015 && a2 == 0x80000002352E2420
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x80000002352E2440
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x80000002352E2460)
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 7;
    else
      return 8;
  }
}

unint64_t lazy protocol witness table accessor for type CodableAccessibilityDataSeriesConfiguration.ValueDescription.CodingKeys and conformance CodableAccessibilityDataSeriesConfiguration.ValueDescription.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CodableAccessibilityDataSeriesConfiguration.ValueDescription.CodingKeys and conformance CodableAccessibilityDataSeriesConfiguration.ValueDescription.CodingKeys;
  if (!lazy protocol witness table cache variable for type CodableAccessibilityDataSeriesConfiguration.ValueDescription.CodingKeys and conformance CodableAccessibilityDataSeriesConfiguration.ValueDescription.CodingKeys)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for CodableAccessibilityDataSeriesConfiguration.ValueDescription.CodingKeys, &unk_250643EC0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodableAccessibilityDataSeriesConfiguration.ValueDescription.CodingKeys and conformance CodableAccessibilityDataSeriesConfiguration.ValueDescription.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CodableAccessibilityDataSeriesConfiguration.ValueDescription.CodingKeys and conformance CodableAccessibilityDataSeriesConfiguration.ValueDescription.CodingKeys;
  if (!lazy protocol witness table cache variable for type CodableAccessibilityDataSeriesConfiguration.ValueDescription.CodingKeys and conformance CodableAccessibilityDataSeriesConfiguration.ValueDescription.CodingKeys)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for CodableAccessibilityDataSeriesConfiguration.ValueDescription.CodingKeys, &unk_250643EC0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodableAccessibilityDataSeriesConfiguration.ValueDescription.CodingKeys and conformance CodableAccessibilityDataSeriesConfiguration.ValueDescription.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CodableAccessibilityDataSeriesConfiguration.ValueDescription.CodingKeys and conformance CodableAccessibilityDataSeriesConfiguration.ValueDescription.CodingKeys;
  if (!lazy protocol witness table cache variable for type CodableAccessibilityDataSeriesConfiguration.ValueDescription.CodingKeys and conformance CodableAccessibilityDataSeriesConfiguration.ValueDescription.CodingKeys)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for CodableAccessibilityDataSeriesConfiguration.ValueDescription.CodingKeys, &unk_250643EC0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodableAccessibilityDataSeriesConfiguration.ValueDescription.CodingKeys and conformance CodableAccessibilityDataSeriesConfiguration.ValueDescription.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CodableAccessibilityDataSeriesConfiguration.ValueDescription.CodingKeys and conformance CodableAccessibilityDataSeriesConfiguration.ValueDescription.CodingKeys;
  if (!lazy protocol witness table cache variable for type CodableAccessibilityDataSeriesConfiguration.ValueDescription.CodingKeys and conformance CodableAccessibilityDataSeriesConfiguration.ValueDescription.CodingKeys)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for CodableAccessibilityDataSeriesConfiguration.ValueDescription.CodingKeys, &unk_250643EC0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodableAccessibilityDataSeriesConfiguration.ValueDescription.CodingKeys and conformance CodableAccessibilityDataSeriesConfiguration.ValueDescription.CodingKeys);
  }
  return result;
}

void type metadata accessor for Range<Double>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for Range<Double>)
  {
    v0 = type metadata accessor for Range();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Range<Double>);
  }
}

uint64_t lazy protocol witness table accessor for type Range<Double> and conformance <> Range<A>(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;

  result = *a1;
  if (!result)
  {
    type metadata accessor for Range<Double>();
    v8 = a2;
    result = MEMORY[0x23B7C9C04](a3, v7, &v8);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for CodableAccessibilityDataSeriesConfiguration.ValueDescription.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_234D3865C + 4 * byte_23529B719[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_234D38690 + 4 * byte_23529B714[v4]))();
}

uint64_t sub_234D38690(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_234D38698(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x234D386A0);
  return result;
}

uint64_t sub_234D386AC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x234D386B4);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_234D386B8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_234D386C0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for CodableAccessibilityDataSeriesConfiguration.ValueDescription.CodingKeys()
{
  return &unk_250643EC0;
}

void Text.Effect.ClusterTransformMap.subscript.getter(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>, __n128 a4@<Q0>, __n128 a5@<Q1>, __n128 a6@<Q2>)
{
  __int128 v7;
  uint64_t v10;
  char v11;
  unint64_t v12;
  char v13;
  _OWORD *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;

  v7 = 0uLL;
  if (!*(_QWORD *)(a2 + 16))
  {
    v13 = 1;
    v15 = 0uLL;
    v16 = 0uLL;
    v17 = 0uLL;
    goto LABEL_8;
  }
  v10 = specialized __RawDictionaryStorage.find<A>(_:)(a4, a5, a6, (__n128)0);
  if ((v11 & 1) == 0)
  {
    v13 = 1;
    v15 = 0uLL;
    v16 = 0uLL;
    v17 = 0uLL;
    v7 = 0uLL;
    goto LABEL_8;
  }
  v12 = *(_QWORD *)(*(_QWORD *)(a2 + 56) + 8 * v10);
  if ((v12 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (v12 < *(_QWORD *)(a1 + 16))
  {
    v13 = 0;
    v14 = (_OWORD *)(a1 + (v12 << 6));
    v7 = v14[2];
    v15 = v14[3];
    v16 = v14[4];
    v17 = v14[5];
LABEL_8:
    *(_OWORD *)a3 = v7;
    *(_OWORD *)(a3 + 16) = v15;
    *(_OWORD *)(a3 + 32) = v16;
    *(_OWORD *)(a3 + 48) = v17;
    *(_BYTE *)(a3 + 64) = v13;
    return;
  }
  __break(1u);
}

uint64_t specialized static Text.Effect.ClusterTransformMap.byWords(fragment:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  void *v14;
  const __CFAttributedString *v15;
  CFIndex v16;
  CFIndex v17;
  __CFString *v18;
  CFIndex v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  CFIndex v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  _QWORD *v48;
  _QWORD *v49;
  uint64_t v50;
  char isUniquelyReferenced_nonNull_native;
  __n128 v52;
  __n128 v53;
  __n128 v54;
  __n128 v55;
  char v56;
  unint64_t v57;
  uint64_t v58;
  _BOOL8 v59;
  uint64_t v60;
  char v61;
  __n128 v62;
  __n128 v63;
  __n128 v64;
  __n128 v65;
  uint64_t v66;
  char v67;
  uint64_t v68;
  uint64_t v69;
  BOOL v70;
  uint64_t v71;
  _QWORD *v72;
  uint64_t result;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  CFIndex v79;
  __int128 v80;
  __int128 v81;
  CFIndex v82;
  _QWORD *v83;
  unint64_t v84;
  uint64_t v85;
  _QWORD *v86;
  uint64_t v87;
  CFIndex v88;
  __int128 v89;
  __int128 v90;
  uint64_t v91;
  CFRange v92;

  type metadata accessor for RangeSet<Text.Layout.CharacterIndex>.Ranges(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<Text.Layout.CharacterIndex>, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x24BEE4968]);
  v3 = v2;
  v4 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v6 = (char *)&v74 - v5;
  type metadata accessor for RangeSet<Text.Layout.CharacterIndex>.Ranges(0, &lazy cache variable for type metadata for RangeSet<Text.Layout.CharacterIndex>.Ranges, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x24BEE4908]);
  v8 = v7;
  v9 = *(_QWORD *)(v7 - 8);
  v10 = MEMORY[0x24BDAC7A8](v7);
  v12 = (char *)&v74 - v11;
  v75 = a1;
  v13 = *(_QWORD *)(a1 + 24);
  v14 = *(void **)(v13 + 80);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v4 + 16))(v6, v13+ OBJC_IVAR____TtCVVOE7SwiftUIVS_4Text6Effect14KeyframeLayout8FragmentP33_FDECD420473C8A183CD8DF57060B1B937Storage_characterRanges, v3, v10);
  v15 = v14;
  RangeSet.ranges.getter();
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  if (RangeSet.Ranges.count.getter() == 1)
  {
    RangeSet.Ranges.subscript.getter();
    v16 = v88;
    RangeSet.Ranges.subscript.getter();
    v17 = v87 - (_QWORD)v86;
    if (__OFSUB__(v87, v86))
    {
LABEL_68:
      __break(1u);
LABEL_69:
      __break(1u);
LABEL_70:
      result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
      return result;
    }
    (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
    v17 = 0;
    v16 = -1;
  }
  v18 = (id)CFAttributedStringGetString(v15);
  if (!v18)
    goto LABEL_69;
  v92.location = v16;
  v92.length = v17;
  v19 = specialized Text.Effect.Tokenizer.init(_:range:)(v18, v92);

  v20 = *(_QWORD *)(v19 + 16);
  if (v20)
  {
    v21 = *(_QWORD *)(v13 + 96);
    v22 = *(_QWORD *)(v21 + 16);
    v82 = v19 + 32;
    v23 = v21 + 32;
    v24 = swift_bridgeObjectRetain();
    v25 = 0;
    v26 = (_QWORD *)MEMORY[0x24BEE4AF8];
    v27 = (_QWORD *)MEMORY[0x24BEE4B00];
    v28 = v75;
    v78 = v20;
    v79 = v19;
    v77 = v24;
    v76 = v22;
    do
    {
      if (v25 >= *(_QWORD *)(v19 + 16))
        goto LABEL_63;
      if (v22)
      {
        v29 = 0;
        v30 = (uint64_t *)(v82 + 16 * v25);
        v32 = *v30;
        v31 = v30[1];
        v85 = v26[2];
        v33 = *(_QWORD *)(v24 + 16);
        v34 = v22;
        do
        {
          v35 = v34 >> 1;
          v36 = v29 + (v34 >> 1);
          if (__OFADD__(v29, v34 >> 1))
          {
            __break(1u);
LABEL_56:
            __break(1u);
LABEL_57:
            __break(1u);
LABEL_58:
            __break(1u);
LABEL_59:
            __break(1u);
LABEL_60:
            __break(1u);
LABEL_61:
            __break(1u);
LABEL_62:
            __break(1u);
LABEL_63:
            __break(1u);
LABEL_64:
            __break(1u);
LABEL_65:
            __break(1u);
LABEL_66:
            __break(1u);
LABEL_67:
            __break(1u);
            goto LABEL_68;
          }
          if (v36 >= v33)
            goto LABEL_56;
          v34 += ~v35;
          if (*(_QWORD *)(v23 + 24 * v36) < v32)
            v29 = v36 + 1;
          else
            v34 = v35;
        }
        while ((uint64_t)v34 > 0);
        v37 = 0;
        v38 = v22;
        do
        {
          v39 = v38 >> 1;
          v40 = v37 + (v38 >> 1);
          if (__OFADD__(v37, v38 >> 1))
            goto LABEL_57;
          if (v40 >= v33)
            goto LABEL_58;
          v38 += ~v39;
          if (*(_QWORD *)(v23 + 24 * v40) < v31)
            v37 = v40 + 1;
          else
            v38 = v39;
        }
        while ((uint64_t)v38 > 0);
        if (v29 < v37)
        {
          v83 = v26;
          v41 = *(_QWORD *)(v28 + 48);
          v42 = v29 + v41;
          if (__OFADD__(v29, v41))
            goto LABEL_64;
          v43 = v37 + v41;
          if (__OFADD__(v37, v41))
            goto LABEL_65;
          if (v43 < v42)
            goto LABEL_66;
          v84 = v25;
          Text.Effect.BaseFragment.typographicBounds(for:)(v42, v43, (uint64_t)&v88);
          v44 = v88;
          v80 = v90;
          v81 = v89;
          v45 = v91;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v83 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v83[2] + 1, 1, v83);
          v25 = v84;
          v47 = v83[2];
          v46 = v83[3];
          if (v47 >= v46 >> 1)
          {
            v72 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v46 > 1), v47 + 1, 1, v83);
            v25 = v84;
            v83 = v72;
          }
          v48 = v83;
          v83[2] = v47 + 1;
          v49 = &v48[8 * v47];
          v49[4] = v42;
          v49[5] = v43;
          v49[6] = v44;
          *(_OWORD *)(v49 + 7) = v81;
          *(_OWORD *)(v49 + 9) = v80;
          v49[11] = v45;
          if (__OFSUB__(v43, v42))
            goto LABEL_67;
          if (v43 != v42)
          {
            v50 = v37 - v29;
            while (1)
            {
              if (v42 >= v43)
                goto LABEL_59;
              isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
              v86 = v27;
              v57 = specialized __RawDictionaryStorage.find<A>(_:)(v52, v53, v54, v55);
              v58 = v27[2];
              v59 = (v56 & 1) == 0;
              v60 = v58 + v59;
              if (__OFADD__(v58, v59))
                goto LABEL_60;
              v61 = v56;
              if (v27[3] >= v60)
              {
                if ((isUniquelyReferenced_nonNull_native & 1) != 0)
                {
                  v27 = v86;
                  if ((v56 & 1) == 0)
                    goto LABEL_47;
                }
                else
                {
                  specialized _NativeDictionary.copy()();
                  v27 = v86;
                  if ((v61 & 1) == 0)
                    goto LABEL_47;
                }
              }
              else
              {
                specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v60, isUniquelyReferenced_nonNull_native);
                v66 = specialized __RawDictionaryStorage.find<A>(_:)(v62, v63, v64, v65);
                if ((v61 & 1) != (v67 & 1))
                  goto LABEL_70;
                v57 = v66;
                v27 = v86;
                if ((v61 & 1) == 0)
                {
LABEL_47:
                  v27[(v57 >> 6) + 8] |= 1 << v57;
                  v68 = 8 * v57;
                  *(_QWORD *)(v27[6] + v68) = v42;
                  *(_QWORD *)(v27[7] + v68) = v85;
                  v69 = v27[2];
                  v70 = __OFADD__(v69, 1);
                  v71 = v69 + 1;
                  if (v70)
                    goto LABEL_62;
                  v27[2] = v71;
                  goto LABEL_49;
                }
              }
              *(_QWORD *)(v27[7] + 8 * v57) = v85;
LABEL_49:
              swift_bridgeObjectRelease();
              if (__OFSUB__(v43, v42 + 1))
                goto LABEL_61;
              ++v42;
              --v50;
              v25 = v84;
              if (!v50)
              {
                v28 = v75;
                break;
              }
            }
          }
          v20 = v78;
          v19 = v79;
          v26 = v83;
          v24 = v77;
          v22 = v76;
        }
      }
      ++v25;
    }
    while (v25 != v20);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    return MEMORY[0x24BEE4AF8];
  }
  return (uint64_t)v26;
}

ValueMetadata *type metadata accessor for Text.Effect.ClusterTransformMap.Element()
{
  return &type metadata for Text.Effect.ClusterTransformMap.Element;
}

ValueMetadata *type metadata accessor for Text.Effect.ClusterTransformMap()
{
  return &type metadata for Text.Effect.ClusterTransformMap;
}

void Gesture.requiredTapCount(_:)(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v15 = a1;
  v16 = a2 & 1;
  v13 = type metadata accessor for RequiredTapCountWriter(0, AssociatedTypeWitness, v11, v12);
  v14 = MEMORY[0x23B7C9C04](&protocol conformance descriptor for RequiredTapCountWriter<A>, v13);
  Gesture.modifier<A>(_:)((uint64_t)&v15, a3, v13, a4, v14, a5);
}

uint64_t type metadata accessor for RequiredTapCountWriter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for RequiredTapCountWriter);
}

void sub_234D38EA4()
{
  uint64_t AssociatedTypeWitness;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v3 = type metadata accessor for RequiredTapCountWriter(255, AssociatedTypeWitness, v1, v2);
  MEMORY[0x23B7C9C04](&protocol conformance descriptor for RequiredTapCountWriter<A>, v3);
  type metadata accessor for ModifierGesture();
}

uint64_t sub_234D38F10(uint64_t a1)
{
  return MEMORY[0x23B7C9C04](&protocol conformance descriptor for ModifierGesture<A, B>, a1);
}

ValueMetadata *type metadata accessor for RequiredTapCountKey()
{
  return &type metadata for RequiredTapCountKey;
}

_QWORD *protocol witness for static PreferenceKey.reduce(value:nextValue:) in conformance RequiredTapCountKey(uint64_t *a1, _QWORD *(*a2)(uint64_t *__return_ptr))
{
  _QWORD *result;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  if ((a1[1] & 1) != 0)
  {
    result = a2(&v7);
    v4 = v7;
    v5 = v8;
  }
  else
  {
    v6 = *a1;
    result = a2(&v7);
    v5 = 0;
    v4 = v7;
    if (v7 <= v6)
      v4 = v6;
    if (v8)
      v4 = v6;
  }
  *a1 = v4;
  *((_BYTE *)a1 + 8) = v5;
  return result;
}

double static RequiredTapCountWriter._makeGesture(modifier:inputs:body:)@<D0>(int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(double *__return_ptr, _OWORD *)@<X2>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  int v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _DWORD *v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  double result;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  double v33;
  uint64_t v34;
  int v35;
  _OWORD v36[6];
  uint64_t v37;
  int v38;
  __int128 v39;
  uint64_t v40;

  v40 = *MEMORY[0x24BDAC8D0];
  v7 = *a1;
  v8 = *(_OWORD *)(a2 + 48);
  v36[2] = *(_OWORD *)(a2 + 32);
  v36[3] = v8;
  v9 = *(_OWORD *)(a2 + 80);
  v36[4] = *(_OWORD *)(a2 + 64);
  v36[5] = v9;
  v10 = *(_OWORD *)(a2 + 16);
  v36[0] = *(_OWORD *)a2;
  v36[1] = v10;
  v11 = *(_QWORD *)(a2 + 96);
  v12 = *(_DWORD *)(a2 + 104);
  v39 = *(_OWORD *)(a2 + 108);
  v37 = v11;
  v38 = v12;
  a3(&v33, v36);
  type metadata accessor for _AnyPreferenceKey<RequiredTapCountKey>(0, &lazy cache variable for type metadata for _AnyPreferenceKey<RequiredTapCountKey>, (uint64_t (*)(_QWORD, ValueMetadata *, _UNKNOWN **))type metadata accessor for _AnyPreferenceKey);
  v14 = *(_QWORD *)(v11 + 16);
  if (v14)
  {
    v15 = v13;
    v16 = 32;
    while (*(_QWORD *)(v11 + v16) != v13)
    {
      v16 += 16;
      if (!--v14)
        goto LABEL_13;
    }
    LODWORD(v36[0]) = v7;
    MEMORY[0x24BDAC7A8](v13);
    v30 = type metadata accessor for RequiredTapCountWriter.Child(0, a4, v17, v18);
    v31 = MEMORY[0x23B7C9C04](&protocol conformance descriptor for RequiredTapCountWriter<A>.Child, v30);
    type metadata accessor for Attribute<(_:)>();
    v20 = v19;
    swift_bridgeObjectRetain();
    _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v36, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TA_8, (uint64_t)&v29, v30, MEMORY[0x24BEE4078], v20, MEMORY[0x24BEE40A8], v21);
    v22 = *(_QWORD *)(v34 + 16);
    if (v22)
    {
      v23 = (_DWORD *)(v34 + 48);
      while (*((_QWORD *)v23 - 2) != v15)
      {
        v23 += 6;
        if (!--v22)
        {
          v23 = (_DWORD *)MEMORY[0x24BE096C0];
          break;
        }
      }
    }
    else
    {
      v23 = (_DWORD *)MEMORY[0x24BE096C0];
    }
    *(_QWORD *)&v36[0] = __PAIR64__(*v23, v32);
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for Int?();
    type metadata accessor for _AnyPreferenceKey<RequiredTapCountKey>(0, &lazy cache variable for type metadata for PreferenceTransform<RequiredTapCountKey>, (uint64_t (*)(_QWORD, ValueMetadata *, _UNKNOWN **))type metadata accessor for PreferenceTransform);
    lazy protocol witness table accessor for type PreferenceTransform<RequiredTapCountKey> and conformance PreferenceTransform<A>();
    v24 = Attribute.init<A>(body:value:flags:update:)();
    LOBYTE(v36[0]) = 0;
    PreferencesOutputs.subscript.setter(v24, v15, (uint64_t)&protocol witness table for _AnyPreferenceKey<A>, v25);
    swift_bridgeObjectRelease();
  }
LABEL_13:
  v26 = v34;
  v27 = v35;
  result = v33;
  *(double *)a5 = v33;
  *(_QWORD *)(a5 + 8) = v26;
  *(_DWORD *)(a5 + 16) = v27;
  return result;
}

uint64_t *(*RequiredTapCountWriter.Child.value.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4))(uint64_t *result)
{
  uint64_t Value;
  uint64_t v5;
  char v6;
  uint64_t v7;

  type metadata accessor for RequiredTapCountWriter(0, a2, a3, a4);
  Value = AGGraphGetValue();
  v5 = *(_QWORD *)Value;
  v6 = *(_BYTE *)(Value + 8);
  v7 = swift_allocObject();
  *(_QWORD *)(v7 + 16) = v5;
  *(_BYTE *)(v7 + 24) = v6;
  return partial apply for closure #1 in RequiredTapCountWriter.Child.value.getter;
}

uint64_t *closure #1 in RequiredTapCountWriter.Child.value.getter(uint64_t *result, uint64_t a2, char a3)
{
  char v3;
  uint64_t v4;

  if ((result[1] & 1) != 0)
  {
    v3 = a3 & 1;
  }
  else
  {
    v3 = 0;
    if (*result <= a2)
      v4 = a2;
    else
      v4 = *result;
    if ((a3 & 1) != 0)
      a2 = *result;
    else
      a2 = v4;
  }
  *result = a2;
  *((_BYTE *)result + 8) = v3;
  return result;
}

uint64_t protocol witness for Rule.value.getter in conformance RequiredTapCountWriter<A>.Child@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t (**a4)(uint64_t a1)@<X8>)
{
  unsigned int *v4;
  uint64_t *(*v6)(uint64_t *);
  uint64_t v7;
  uint64_t v8;
  uint64_t result;

  v6 = RequiredTapCountWriter.Child.value.getter(*v4, *(_QWORD *)(a1 + 16), a2, a3);
  v8 = v7;
  result = swift_allocObject();
  *(_QWORD *)(result + 16) = v6;
  *(_QWORD *)(result + 24) = v8;
  *a4 = partial apply for specialized closure #1 in AGAttribute.mutateBody<A>(as:invalidating:_:);
  a4[1] = (uint64_t (*)(uint64_t))result;
  return result;
}

double protocol witness for static GestureModifier._makeGesture(modifier:inputs:body:) in conformance RequiredTapCountWriter<A>@<D0>(int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(double *__return_ptr, _OWORD *)@<X2>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  return static RequiredTapCountWriter._makeGesture(modifier:inputs:body:)(a1, a2, a3, *(_QWORD *)(a4 + 16), a5);
}

uint64_t type metadata accessor for RequiredTapCountWriter.Child(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for RequiredTapCountWriter.Child);
}

uint64_t _s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TA_8@<X0>(_DWORD *a1@<X8>)
{
  type metadata accessor for (_:)();
  return closure #1 in Attribute.init<A>(_:)(a1);
}

void type metadata accessor for Attribute<(_:)>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for Attribute<(_:)>)
  {
    type metadata accessor for (_:)();
    v0 = type metadata accessor for Attribute();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Attribute<(_:)>);
  }
}

{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for Attribute<(_:)>)
  {
    type metadata accessor for (_:)();
    v0 = type metadata accessor for Attribute();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Attribute<(_:)>);
  }
}

void type metadata accessor for _AnyPreferenceKey<RequiredTapCountKey>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(_QWORD, ValueMetadata *, _UNKNOWN **))
{
  unint64_t v4;
  uint64_t v5;

  if (!*a2)
  {
    v4 = a3(0, &type metadata for RequiredTapCountKey, &protocol witness table for RequiredTapCountKey);
    if (!v5)
      atomic_store(v4, a2);
  }
}

unint64_t lazy protocol witness table accessor for type PreferenceTransform<RequiredTapCountKey> and conformance PreferenceTransform<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type PreferenceTransform<RequiredTapCountKey> and conformance PreferenceTransform<A>;
  if (!lazy protocol witness table cache variable for type PreferenceTransform<RequiredTapCountKey> and conformance PreferenceTransform<A>)
  {
    type metadata accessor for _AnyPreferenceKey<RequiredTapCountKey>(255, &lazy cache variable for type metadata for PreferenceTransform<RequiredTapCountKey>, (uint64_t (*)(_QWORD, ValueMetadata *, _UNKNOWN **))type metadata accessor for PreferenceTransform);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for PreferenceTransform<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PreferenceTransform<RequiredTapCountKey> and conformance PreferenceTransform<A>);
  }
  return result;
}

uint64_t sub_234D3951C()
{
  return swift_deallocObject();
}

uint64_t *partial apply for closure #1 in RequiredTapCountWriter.Child.value.getter(uint64_t *result)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  BOOL v4;

  v2 = *(_QWORD *)(v1 + 16);
  v3 = *(unsigned __int8 *)(v1 + 24);
  if ((result[1] & 1) == 0)
  {
    if (*result > v2)
      v2 = *result;
    v4 = v3 == 0;
    LOBYTE(v3) = 0;
    if (!v4)
      v2 = *result;
  }
  *result = v2;
  *((_BYTE *)result + 8) = v3;
  return result;
}

void base witness table accessor for _AttributeBody in RequiredTapCountWriter<A>.Child()
{
  JUMPOUT(0x23B7C9C04);
}

uint64_t sub_234D39570()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t dispatch thunk of SceneStorageHost.sceneStorageDidChange()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

double PanEvent.location.getter()
{
  uint64_t v0;

  return *(double *)v0;
}

void PanEvent.location.setter(double a1, double a2)
{
  double *v2;

  *v2 = a1;
  v2[1] = a2;
  v2[7] = a1;
  v2[8] = a2;
}

__n128 (*PanEvent.location.modify(_QWORD *a1))(__n128 **a1, char a2)
{
  uint64_t v1;

  *a1 = v1;
  return PanEvent.location.modify;
}

__n128 PanEvent.location.modify(__n128 **a1, char a2)
{
  __n128 result;

  if ((a2 & 1) == 0)
  {
    result = **a1;
    *(__n128 *)((char *)*a1 + 56) = result;
  }
  return result;
}

double PanEvent.globalLocation.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 16);
}

void PanEvent.globalLocation.setter(double a1, double a2)
{
  uint64_t v2;

  *(double *)(v2 + 16) = a1;
  *(double *)(v2 + 24) = a2;
}

uint64_t (*PanEvent.globalLocation.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

void PanEvent.phase.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 32);
}

_BYTE *PanEvent.phase.setter(_BYTE *result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 32) = *result;
  return result;
}

uint64_t (*PanEvent.phase.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

double PanEvent.timestamp.getter@<D0>(double *a1@<X8>)
{
  uint64_t v1;
  double result;

  result = *(double *)(v1 + 40);
  *a1 = result;
  return result;
}

double PanEvent.timestamp.setter(double *a1)
{
  uint64_t v1;
  double result;

  result = *a1;
  *(double *)(v1 + 40) = *a1;
  return result;
}

uint64_t (*PanEvent.timestamp.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t PanEvent.binding.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_QWORD *)(v1 + 48);
  return swift_retain();
}

uint64_t PanEvent.binding.setter(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;

  v2 = *a1;
  result = swift_release();
  *(_QWORD *)(v1 + 48) = v2;
  return result;
}

uint64_t (*PanEvent.binding.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

double PanEvent.translation.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 56);
}

void PanEvent.translation.setter(double a1, double a2)
{
  uint64_t v2;

  *(double *)(v2 + 56) = a1;
  *(double *)(v2 + 64) = a2;
}

uint64_t (*PanEvent.translation.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

double PanEvent.globalTranslation.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 72);
}

void PanEvent.globalTranslation.setter(double a1, double a2)
{
  uint64_t v2;

  *(double *)(v2 + 72) = a1;
  *(double *)(v2 + 80) = a2;
}

uint64_t (*PanEvent.globalTranslation.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

void PanEvent.touchType.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 88);
}

_BYTE *PanEvent.touchType.setter(_BYTE *result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 88) = *result;
  return result;
}

uint64_t (*PanEvent.touchType.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t PanEvent.init(_:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  double (*v15)(uint64_t, uint64_t);
  double v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  double v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v28;

  v5 = a1[3];
  v4 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v5);
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)(v4 + 8) + 8))(&v28, v5);
  v6 = v28;
  v8 = a1[3];
  v7 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v8);
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)(v7 + 8) + 16))(&v28, v8);
  v9 = v28;
  v11 = a1[3];
  v10 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v11);
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)(v10 + 8) + 24))(&v28, v11);
  v12 = v28;
  v13 = a1[3];
  v14 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v13);
  v15 = *(double (**)(uint64_t, uint64_t))(v14 + 24);
  swift_retain();
  v16 = v15(v13, v14);
  v18 = v17;
  v19 = a1[3];
  v20 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v19);
  v21 = (*(double (**)(uint64_t, uint64_t))(v20 + 32))(v19, v20);
  v23 = v22;
  v25 = a1[3];
  v24 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v25);
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)(v24 + 16) + 8))(&v28, v25);
  v26 = v28;
  *(double *)a2 = v16;
  *(_QWORD *)(a2 + 8) = v18;
  *(double *)(a2 + 16) = v21;
  *(_QWORD *)(a2 + 24) = v23;
  *(_BYTE *)(a2 + 32) = v6;
  *(_QWORD *)(a2 + 40) = v9;
  *(_QWORD *)(a2 + 48) = v12;
  *(double *)(a2 + 56) = v16;
  *(_QWORD *)(a2 + 64) = v18;
  *(double *)(a2 + 72) = v21;
  *(_QWORD *)(a2 + 80) = v23;
  *(_BYTE *)(a2 + 88) = v26;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  return swift_release();
}

char *PanEvent.init(globalLocation:phase:timestamp:globalTranslation:touchType:)@<X0>(char *result@<X0>, uint64_t *a2@<X1>, char *a3@<X2>, uint64_t a4@<X8>, double a5@<D0>, double a6@<D1>, double a7@<D2>, double a8@<D3>)
{
  char v8;
  uint64_t v9;
  char v10;

  v8 = *result;
  v9 = *a2;
  v10 = *a3;
  *(double *)a4 = a5;
  *(double *)(a4 + 8) = a6;
  *(double *)(a4 + 16) = a5;
  *(double *)(a4 + 24) = a6;
  *(_BYTE *)(a4 + 32) = v8;
  *(_QWORD *)(a4 + 40) = v9;
  *(_QWORD *)(a4 + 48) = 0;
  *(double *)(a4 + 56) = a7;
  *(double *)(a4 + 64) = a8;
  *(double *)(a4 + 72) = a7;
  *(double *)(a4 + 80) = a8;
  *(_BYTE *)(a4 + 88) = v10;
  return result;
}

uint64_t PanEvent.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  char v10;
  __int128 v11;
  _OWORD v12[2];
  unsigned __int8 v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  char v18;
  __int128 v19[2];
  uint64_t v20;
  _BYTE v21[40];

  outlined init with copy of AnyTrackedValue(a1, (uint64_t)v12);
  type metadata accessor for ScrollStateRequest(0, (unint64_t *)&lazy cache variable for type metadata for EventType);
  type metadata accessor for ScrollStateRequest(0, &lazy cache variable for type metadata for PanEventType);
  if ((swift_dynamicCast() & 1) != 0)
  {
    outlined init with take of ScrollStateRequest(v19, (uint64_t)v21);
    outlined init with copy of AnyTrackedValue((uint64_t)v21, (uint64_t)v19);
    PanEvent.init(_:)(v19, (uint64_t)v12);
    __swift_destroy_boxed_opaque_existential_1(a1);
    result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v21);
    v5 = v13;
    v6 = v14;
    v7 = v15;
    v8 = v16;
    v9 = v17;
    v10 = v18;
    v11 = v12[1];
    *(_OWORD *)a2 = v12[0];
    *(_OWORD *)(a2 + 16) = v11;
    *(_QWORD *)(a2 + 32) = v5;
    *(_QWORD *)(a2 + 40) = v6;
  }
  else
  {
    v20 = 0;
    memset(v19, 0, sizeof(v19));
    __swift_destroy_boxed_opaque_existential_1(a1);
    result = outlined destroy of PanEventType?((uint64_t)v19);
    v8 = 0uLL;
    v9 = 0;
    v10 = 0;
    *(_OWORD *)(a2 + 16) = 0u;
    *(_OWORD *)(a2 + 32) = 0u;
    *(_OWORD *)a2 = 0u;
    v7 = xmmword_235260EF0;
  }
  *(_OWORD *)(a2 + 48) = v7;
  *(_OWORD *)(a2 + 64) = v8;
  *(_QWORD *)(a2 + 80) = v9;
  *(_BYTE *)(a2 + 88) = v10;
  return result;
}

uint64_t outlined destroy of PanEventType?(uint64_t a1)
{
  uint64_t v2;

  type metadata accessor for PanEventType?();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void type metadata accessor for PanEventType?()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for PanEventType?)
  {
    type metadata accessor for ScrollStateRequest(255, &lazy cache variable for type metadata for PanEventType);
    v0 = type metadata accessor for Optional();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for PanEventType?);
  }
}

double PanEvent.radius.getter()
{
  return 0.0;
}

void PanEvent.kind.getter(_BYTE *a1@<X8>)
{
  *a1 = 2;
}

double protocol witness for PanEventType.translation.getter in conformance PanEvent()
{
  uint64_t v0;

  return *(double *)(v0 + 56);
}

double protocol witness for PanEventType.globalTranslation.getter in conformance PanEvent()
{
  uint64_t v0;

  return *(double *)(v0 + 72);
}

void protocol witness for SpatialEventType.globalLocation.setter in conformance PanEvent(double a1, double a2)
{
  uint64_t v2;

  *(double *)(v2 + 16) = a1;
  *(double *)(v2 + 24) = a2;
}

double protocol witness for SpatialEventType.location.getter in conformance PanEvent()
{
  uint64_t v0;

  return *(double *)v0;
}

void protocol witness for SpatialEventType.location.setter in conformance PanEvent(double a1, double a2)
{
  double *v2;

  *v2 = a1;
  v2[1] = a2;
  v2[7] = a1;
  v2[8] = a2;
}

uint64_t (*protocol witness for SpatialEventType.location.modify in conformance PanEvent(_QWORD *a1))()
{
  uint64_t v1;

  *a1 = v1;
  return protocol witness for SpatialEventType.location.modify in conformance PanEvent;
}

void protocol witness for EventType.phase.getter in conformance PanEvent(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 32);
}

double protocol witness for EventType.timestamp.getter in conformance PanEvent@<D0>(double *a1@<X8>)
{
  uint64_t v1;
  double result;

  result = *(double *)(v1 + 40);
  *a1 = result;
  return result;
}

uint64_t protocol witness for EventType.binding.getter in conformance PanEvent@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_QWORD *)(v1 + 48);
  return swift_retain();
}

uint64_t protocol witness for EventType.binding.setter in conformance PanEvent(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;

  v2 = *a1;
  result = swift_release();
  *(_QWORD *)(v1 + 48) = v2;
  return result;
}

void protocol witness for TouchTypeProviding.touchType.getter in conformance PanEvent(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 88);
}

BOOL specialized static PanEvent.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  _BOOL8 result;
  uint64_t v4;
  double v5;
  double v6;
  double v7;
  double v8;
  int v9;
  uint64_t v10;
  double v11;

  result = 0;
  if ((vminv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(vmovn_s32(vuzp1q_s32((int32x4_t)vceqq_f64(*(float64x2_t *)a1, *(float64x2_t *)a2), (int32x4_t)vceqq_f64(*(float64x2_t *)(a1 + 16), *(float64x2_t *)(a2 + 16)))), 0xFuLL))) & 1) == 0|| *(double *)(a1 + 40) != *(double *)(a2 + 40)|| *(unsigned __int8 *)(a1 + 32) != *(unsigned __int8 *)(a2 + 32))
  {
    return result;
  }
  v4 = *(_QWORD *)(a1 + 48);
  v6 = *(double *)(a1 + 56);
  v5 = *(double *)(a1 + 64);
  v8 = *(double *)(a1 + 72);
  v7 = *(double *)(a1 + 80);
  v9 = *(unsigned __int8 *)(a1 + 88);
  v10 = *(_QWORD *)(a2 + 48);
  v11 = *(double *)(a2 + 56);
  if (v4)
  {
    if (v10)
    {
      result = 0;
      if (v4 != v10 || v6 != v11)
        return result;
      goto LABEL_14;
    }
    swift_retain();
LABEL_12:
    swift_release();
    return 0;
  }
  if (v10)
    goto LABEL_12;
  result = 0;
  if (v6 != v11)
    return result;
LABEL_14:
  if (v5 == *(double *)(a2 + 64) && v8 == *(double *)(a2 + 72) && v7 == *(double *)(a2 + 80))
    return v9 == *(unsigned __int8 *)(a2 + 88);
  return result;
}

__n128 sub_234D39C30@<Q0>(__n128 *a1@<X0>, __n128 *a2@<X8>)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

double sub_234D39C3C(uint64_t a1, uint64_t a2)
{
  double result;
  uint64_t v3;

  result = *(double *)a1;
  v3 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = *(_QWORD *)a1;
  *(_QWORD *)(a2 + 8) = v3;
  *(double *)(a2 + 56) = result;
  *(_QWORD *)(a2 + 64) = v3;
  return result;
}

uint64_t dispatch thunk of PanEventType.translation.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of PanEventType.globalTranslation.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t initializeWithCopy for PanEvent(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  uint64_t v4;

  v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v3;
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  v4 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for PanEvent(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  return a1;
}

uint64_t assignWithTake for PanEvent(uint64_t a1, uint64_t a2)
{
  __int128 v4;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_release();
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  return a1;
}

uint64_t getEnumTagSinglePayload for PanEvent(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 89))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 48);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for PanEvent(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 88) = 0;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 89) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 89) = 0;
    if (a2)
      *(_QWORD *)(result + 48) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for PanEvent()
{
  return &type metadata for PanEvent;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay7SwiftUI20DynamicPropertyCacheV12TaggedFieldsVG_Si3tag_AF01_fG6BufferV5linksts5NeverOTg5(void (*a1)(__int128 *__return_ptr, _QWORD *), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t *i;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  __int128 v17;
  _QWORD v18[2];
  __int128 v19;
  uint64_t v20;
  uint64_t v21;

  v4 = v3;
  v5 = *(_QWORD *)(a3 + 16);
  v6 = MEMORY[0x24BEE4AF8];
  if (v5)
  {
    v21 = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5, 0);
    v6 = v21;
    for (i = (uint64_t *)(a3 + 40); ; i += 2)
    {
      v10 = *i;
      v18[0] = *(i - 1);
      v18[1] = v10;
      swift_bridgeObjectRetain();
      a1(&v19, v18);
      if (v4)
        break;
      v4 = 0;
      swift_bridgeObjectRelease();
      v11 = v19;
      v12 = v20;
      v21 = v6;
      v14 = *(_QWORD *)(v6 + 16);
      v13 = *(_QWORD *)(v6 + 24);
      if (v14 >= v13 >> 1)
      {
        v17 = v19;
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v13 > 1, v14 + 1, 1);
        v11 = v17;
        v6 = v21;
      }
      *(_QWORD *)(v6 + 16) = v14 + 1;
      v15 = v6 + 24 * v14;
      *(_OWORD *)(v15 + 32) = v11;
      *(_QWORD *)(v15 + 48) = v12;
      if (!--v5)
        return v6;
    }
    swift_release();
    swift_bridgeObjectRelease();
  }
  return v6;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay7SwiftUI18LocalizedStringKeyV14FormatArgumentVG_s7CVarArg_ps5NeverOTg5(void (*a1)(__int128 *__return_ptr, uint64_t), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  __int128 v15[2];
  uint64_t v16;

  v4 = v3;
  v5 = *(_QWORD *)(a3 + 16);
  v6 = MEMORY[0x24BEE4AF8];
  if (v5)
  {
    v16 = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5, 0);
    v6 = v16;
    v9 = *(_QWORD *)(type metadata accessor for LocalizedStringKey.FormatArgument(0) - 8);
    v10 = a3 + ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
    v11 = *(_QWORD *)(v9 + 72);
    while (1)
    {
      a1(v15, v10);
      if (v4)
        break;
      v4 = 0;
      v16 = v6;
      v13 = *(_QWORD *)(v6 + 16);
      v12 = *(_QWORD *)(v6 + 24);
      if (v13 >= v12 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v12 > 1, v13 + 1, 1);
        v6 = v16;
      }
      *(_QWORD *)(v6 + 16) = v13 + 1;
      outlined init with take of ScrollStateRequest(v15, v6 + 40 * v13 + 32);
      v10 += v11;
      if (!--v5)
        return v6;
    }
    swift_release();
  }
  return v6;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF7SwiftUI4TextVAFE6EffectO15ChunkCollectionV_AJ6TimingV0H033_EA19070B6A02390AF2C0CF68765CF6B2LLVs5NeverOTg5(void (*a1)(__int128 *__return_ptr, _OWORD *), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  __int128 *i;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  __int128 v18;
  _OWORD v19[2];
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v4 = v3;
  v5 = *(_QWORD *)(a3 + 16);
  v6 = MEMORY[0x24BEE4AF8];
  if (v5)
  {
    v23 = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5, 0);
    v6 = v23;
    for (i = (__int128 *)(a3 + 48); ; i += 2)
    {
      v10 = *i;
      v19[0] = *(i - 1);
      v19[1] = v10;
      a1(&v20, v19);
      if (v4)
        break;
      v4 = 0;
      v11 = v20;
      v12 = v21;
      v13 = v22;
      v23 = v6;
      v15 = *(_QWORD *)(v6 + 16);
      v14 = *(_QWORD *)(v6 + 24);
      if (v15 >= v14 >> 1)
      {
        v18 = v20;
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v14 > 1, v15 + 1, 1);
        v11 = v18;
        v6 = v23;
      }
      *(_QWORD *)(v6 + 16) = v15 + 1;
      v16 = v6 + 32 * v15;
      *(_OWORD *)(v16 + 32) = v11;
      *(_QWORD *)(v16 + 48) = v12;
      *(_QWORD *)(v16 + 56) = v13;
      if (!--v5)
        return v6;
    }
    swift_release();
  }
  return v6;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFShy7SwiftUI19CAHostingLayerEventV11MouseButtonVG_AH8ResolvedVs5NeverOTg5(void (*a1)(_OWORD *__return_ptr, uint64_t *), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  int64_t v9;
  int v10;
  int v11;
  char v12;
  char v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  _OWORD *v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v24;
  _OWORD v25[3];
  uint64_t v26;

  v4 = v3;
  v5 = *(_QWORD *)(a3 + 16);
  v6 = MEMORY[0x24BEE4AF8];
  if (!v5)
    return v6;
  v7 = a3;
  v26 = MEMORY[0x24BEE4AF8];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5, 0);
  v6 = v26;
  result = specialized Set.startIndex.getter(v7);
  v9 = result;
  v11 = v10;
  v13 = v12 & 1;
  v22 = v7 + 56;
  while ((v9 & 0x8000000000000000) == 0 && v9 < 1 << *(_BYTE *)(v7 + 32))
  {
    if (((*(_QWORD *)(v22 + (((unint64_t)v9 >> 3) & 0xFFFFFFFFFFFFF8)) >> v9) & 1) == 0)
      goto LABEL_15;
    if (*(_DWORD *)(v7 + 36) != v11)
      goto LABEL_16;
    v24 = *(_QWORD *)(*(_QWORD *)(v7 + 48) + 8 * v9);
    a1(v25, &v24);
    if (v4)
    {
      swift_release();
      return v6;
    }
    v14 = v7;
    v26 = v6;
    v16 = *(_QWORD *)(v6 + 16);
    v15 = *(_QWORD *)(v6 + 24);
    if (v16 >= v15 >> 1)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v15 > 1, v16 + 1, 1);
      v6 = v26;
    }
    *(_QWORD *)(v6 + 16) = v16 + 1;
    v17 = (_OWORD *)(v6 + 48 * v16);
    v18 = v25[0];
    v19 = v25[2];
    v17[3] = v25[1];
    v17[4] = v19;
    v17[2] = v18;
    v7 = v14;
    result = specialized _NativeSet.index(after:)(v9, v11, v13 & 1, v14);
    v9 = result;
    v11 = v20;
    v13 = v21 & 1;
    --v5;
    v4 = 0;
    if (!v5)
    {
      outlined consume of [String : AccessibilityCustomAttributes.Value].Index._Variant(result, v20, v21 & 1);
      return v6;
    }
  }
  __break(1u);
LABEL_15:
  __break(1u);
LABEL_16:
  __break(1u);
  return result;
}

uint64_t _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)(unint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  int v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  __int128 v29;
  unint64_t v30;
  uint64_t v31;
  int v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t Counter;
  const char *v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  uint64_t v44;

  v6 = type metadata accessor for OSSignpostID();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(_DWORD *)a1;
  v42 = *a2;
  LOBYTE(v11) = *((_BYTE *)a2 + 16);
  v12 = *v3;
  LODWORD(a1) = *((_DWORD *)v3 + 3);
  static os_signpost_type_t.event.getter();
  result = kdebug_is_enabled();
  if ((_DWORD)result)
  {
    if (one-time initialization token for _signpostLog != -1)
LABEL_24:
      swift_once();
    result = OS_os_log.signpostsEnabled.getter();
    if ((result & 1) != 0)
    {
      v44 = a3;
      swift_getMetatypeMetadata();
      v39 = String.init<A>(describing:)();
      v16 = v15;
      v38 = specialized static Tracing.libraryName(defining:)();
      a3 = v17;
      v18 = (id)AGGraphGetAttributeGraph();
      Counter = AGGraphGetCounter();

      if ((v11 & 1) != 0)
      {
        swift_bridgeObjectRelease();
        return swift_bridgeObjectRelease();
      }
      v35 = a3;
      v36 = v16;
      v41 = v12;
      v32 = v10;
      v33 = v9;
      v34 = v7;
      v43 = 0;
      swift_bridgeObjectRetain();
      if (!(_DWORD)a1)
      {
LABEL_20:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        return swift_bridgeObjectRelease();
      }
      v9 = 0;
      v10 = 0;
      v11 = (uint64_t *)(v42 + 48);
      a1 = (a1 - 1);
      v29 = xmmword_23529BF50;
      v30 = a1;
      v31 = v6;
      while (v41)
      {
        v7 = v41 + v10;
        if ((_DWORD)a1 == (_DWORD)v9)
          v10 = 0;
        else
          v10 += *(_DWORD *)(v7 + 8);
        v19 = *(char **)(v42 + 16);
        if (v9 == v19)
          goto LABEL_20;
        if (v9 >= v19)
        {
          __break(1u);
          goto LABEL_24;
        }
        v12 = *v11;
        a3 = static os_signpost_type_t.event.getter();
        static os_signpost_type_t.event.getter();
        if (kdebug_is_enabled() && (OS_os_log.signpostsEnabled.getter() & 1) != 0)
        {
          v40 = a3;
          a1 = (unint64_t)v33;
          static OSSignpostID.exclusive.getter();
          type metadata accessor for _ContiguousArrayStorage<CVarArg>();
          v20 = swift_allocObject();
          *(_OWORD *)(v20 + 16) = v29;
          v21 = _typeName(_:qualified:)();
          v6 = v22;
          a3 = MEMORY[0x24BEE0D00];
          *(_QWORD *)(v20 + 56) = MEMORY[0x24BEE0D00];
          v23 = lazy protocol witness table accessor for type String and conformance String();
          *(_QWORD *)(v20 + 32) = v21;
          *(_QWORD *)(v20 + 40) = v6;
          v24 = MEMORY[0x24BEE1E88];
          *(_QWORD *)(v20 + 96) = MEMORY[0x24BEE1E88];
          v25 = MEMORY[0x24BEE1ED8];
          *(_QWORD *)(v20 + 64) = v23;
          *(_QWORD *)(v20 + 72) = v7;
          *(_QWORD *)(v20 + 136) = a3;
          *(_QWORD *)(v20 + 144) = v23;
          v26 = v39;
          *(_QWORD *)(v20 + 104) = v25;
          *(_QWORD *)(v20 + 112) = v26;
          v27 = v35;
          *(_QWORD *)(v20 + 120) = v36;
          *(_QWORD *)(v20 + 176) = a3;
          *(_QWORD *)(v20 + 184) = v23;
          *(_QWORD *)(v20 + 152) = v38;
          *(_QWORD *)(v20 + 160) = v27;
          *(_QWORD *)(v20 + 216) = MEMORY[0x24BEE1768];
          *(_QWORD *)(v20 + 224) = MEMORY[0x24BEE17F0];
          *(_QWORD *)(v20 + 192) = v12;
          *(_QWORD *)(v20 + 256) = MEMORY[0x24BEE44F0];
          *(_QWORD *)(v20 + 264) = MEMORY[0x24BEE4558];
          *(_DWORD *)(v20 + 232) = v32;
          *(_QWORD *)(v20 + 296) = v24;
          *(_QWORD *)(v20 + 304) = v25;
          if (Counter < 0)
            goto LABEL_26;
          *(_QWORD *)(v20 + 272) = Counter;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          os_signpost(_:dso:log:name:signpostID:_:_:)();
          (*(void (**)(unint64_t, uint64_t))(v34 + 8))(a1, v31);
          swift_bridgeObjectRelease();
          LODWORD(a1) = v30;
          if ((v43 & 1) != 0)
            goto LABEL_20;
        }
        v28 = (int)v9;
        v11 += 4;
        ++v9;
        if ((_DWORD)a1 == v28 && !v10)
          goto LABEL_20;
      }
      __break(1u);
LABEL_26:
      result = _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
    }
  }
  return result;
}

void _DynamicPropertyBuffer.append<A>(_:fieldOffset:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  _DWORD v11[2];

  v8 = type metadata accessor for BoxVTable(0, a3, a4, a4);
  UnsafeHeterogeneousBuffer.append<A>(_:vtable:)(a1, v8, a3, v11);
  if (!*v4)
    goto LABEL_8;
  v9 = *v4 + v11[1];
  v10 = *(_DWORD *)(v9 + 12) & 0x80000000;
  *(_DWORD *)(v9 + 12) = v10;
  if (a2 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_7;
  }
  if (a2 > 0x7FFFFFFF)
  {
LABEL_7:
    __break(1u);
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  if ((a2 & 0x80000000) == 0)
  {
    *(_DWORD *)(v9 + 12) = v10 | a2;
    return;
  }
LABEL_9:
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void _DynamicPropertyBuffer.getState<A>(type:)(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t *v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __n128 v10;
  uint64_t v11;
  char *v12;
  int v13;
  uint64_t v14;
  int v15;
  int v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;

  v7 = type metadata accessor for Binding(255, a1, a2, a3);
  v8 = type metadata accessor for Optional();
  v9 = *(_QWORD *)(v8 - 8);
  v10.n128_f64[0] = MEMORY[0x24BDAC7A8](v8);
  v12 = (char *)&v22 - v11;
  v13 = *((_DWORD *)v4 + 3);
  if (!v13)
  {
    v19 = *(_QWORD *)(v7 - 8);
    v21 = 1;
LABEL_12:
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v19 + 56))(a4, v21, 1, v7);
    return;
  }
  v22 = a4;
  v14 = *v4;
  if (*v4)
  {
    v15 = 0;
    v16 = v13 - 1;
    while (1)
    {
      v17 = (uint64_t *)(v14 + v15);
      if (v16)
        v15 += *((_DWORD *)v17 + 2);
      else
        v15 = 0;
      v18 = *v17;
      v23 = v17;
      (*(void (**)(uint64_t **, uint64_t, uint64_t, __n128))(v18 + 128))(&v23, a1, a1, v10);
      v19 = *(_QWORD *)(v7 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v12, 1, v7) != 1)
        break;
      v20 = v16 | v15;
      (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
      --v16;
      if (!v20)
      {
        v21 = 1;
        a4 = v22;
        goto LABEL_12;
      }
    }
    a4 = v22;
    (*(void (**)(uint64_t, char *, uint64_t))(v19 + 32))(v22, v12, v7);
    v21 = 0;
    goto LABEL_12;
  }
  __break(1u);
}

void _DynamicPropertyBuffer.init()(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

double _DynamicPropertyBuffer.init<A>(fields:container:inputs:baseOffset:)@<D0>(uint64_t *a1@<X0>, int *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, double *a6@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  char v9;
  int v10;
  int v11;
  double result;
  int v13;
  _QWORD v14[2];
  char v15;
  int v16;
  uint64_t v17;
  double v18;

  v7 = *a1;
  v8 = a1[1];
  v9 = *((_BYTE *)a1 + 16);
  v10 = *((_DWORD *)a1 + 5);
  v11 = *a2;
  v17 = 0;
  v18 = 0.0;
  v14[0] = v7;
  v14[1] = v8;
  v15 = v9;
  v16 = v10;
  v13 = v11;
  _DynamicPropertyBuffer.addFields<A>(_:container:inputs:baseOffset:)((uint64_t)v14, &v13, a3, a4, a5);
  outlined consume of DynamicPropertyCache.Fields.Layout();
  *(_QWORD *)a6 = v17;
  result = v18;
  a6[1] = v18;
  return result;
}

uint64_t _DynamicPropertyBuffer.addFields<A>(_:container:inputs:baseOffset:)(uint64_t result, int *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD v18[3];
  int v19;
  uint64_t v20;
  int v21;

  v6 = v5;
  v10 = *(_QWORD *)result;
  v11 = *(_QWORD *)(result + 8);
  v12 = *a2;
  if ((*(_BYTE *)(result + 16) & 1) != 0)
  {
    if (*(_QWORD *)(v11 + 16))
    {
      MEMORY[0x24BDAC7A8](result);
      v18[2] = a5;
      v19 = v12;
      v20 = a3;
      swift_bridgeObjectRetain();
      v13 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay7SwiftUI20DynamicPropertyCacheV12TaggedFieldsVG_Si3tag_AF01_fG6BufferV5linksts5NeverOTg5((void (*)(__int128 *__return_ptr, _QWORD *))partial apply for closure #1 in _DynamicPropertyBuffer.addFields<A>(_:container:inputs:baseOffset:), (uint64_t)v18, v11);
      outlined consume of DynamicPropertyCache.Fields.Layout();
      project #1 <A><A1>(type:) in _DynamicPropertyBuffer.addFields<A>(_:container:inputs:baseOffset:)(v10, v6, v13, a4, a5, v10);
      return swift_bridgeObjectRelease();
    }
  }
  else
  {
    v14 = *(_QWORD *)(v10 + 16);
    if (v14)
    {
      swift_bridgeObjectRetain();
      v15 = (uint64_t *)(v10 + 48);
      do
      {
        v16 = *(v15 - 1);
        v17 = *v15;
        v15 += 4;
        v21 = v12;
        (*(void (**)(uint64_t *, int *, uint64_t, uint64_t, uint64_t))(v16 + 8))(v5, &v21, v17 + a4, a3, a5);
        --v14;
      }
      while (v14);
      return outlined consume of DynamicPropertyCache.Fields.Layout();
    }
  }
  return result;
}

double _DynamicPropertyBuffer.init<A>(fields:container:inputs:)@<D0>(uint64_t *a1@<X0>, int *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, double *a5@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  char v8;
  int v9;
  int v10;
  double result;
  int v12;
  _QWORD v13[2];
  char v14;
  int v15;
  uint64_t v16;
  double v17;

  v6 = *a1;
  v7 = a1[1];
  v8 = *((_BYTE *)a1 + 16);
  v9 = *((_DWORD *)a1 + 5);
  v10 = *a2;
  v16 = 0;
  v17 = 0.0;
  v13[0] = v6;
  v13[1] = v7;
  v14 = v8;
  v15 = v9;
  v12 = v10;
  _DynamicPropertyBuffer.addFields<A>(_:container:inputs:baseOffset:)(v13, &v12, a3, 0, a4);
  outlined consume of DynamicPropertyCache.Fields.Layout();
  *(_QWORD *)a5 = v16;
  result = v17;
  a5[1] = v17;
  return result;
}

BOOL _DynamicPropertyBuffer.isEmpty.getter()
{
  uint64_t v0;

  return *(_DWORD *)(v0 + 12) == 0;
}

double closure #1 in _DynamicPropertyBuffer.addFields<A>(_:container:inputs:baseOffset:)@<D0>(uint64_t *a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  double v14;
  double result;
  uint64_t v16;
  uint64_t v17[2];
  char v18;
  int v19;
  double v20[2];
  int v21;

  v10 = *a1;
  v9 = a1[1];
  v11 = *(_QWORD *)(v9 + 16);
  if (v11)
  {
    v16 = *a1;
    swift_bridgeObjectRetain_n();
    v12 = 0;
    v13 = v9 + 40;
    do
    {
      v12 |= (*(uint64_t (**)(void))(*(_QWORD *)v13 + 16))();
      v13 += 32;
      --v11;
    }
    while (v11);
    swift_bridgeObjectRelease();
    v10 = v16;
  }
  else
  {
    swift_bridgeObjectRetain();
    v12 = 0;
  }
  v17[0] = v9;
  v17[1] = 0;
  v18 = 0;
  v19 = v12;
  v21 = a2;
  _DynamicPropertyBuffer.init<A>(fields:container:inputs:)(v17, &v21, a3, a4, v20);
  v14 = v20[0];
  result = v20[1];
  *(_QWORD *)a5 = v10;
  *(double *)(a5 + 8) = v14;
  *(double *)(a5 + 16) = result;
  return result;
}

uint64_t project #1 <A><A1>(type:) in _DynamicPropertyBuffer.addFields<A>(_:container:inputs:baseOffset:)(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  int v12;
  BOOL v13;
  int v14;
  unsigned int v15;

  v9 = type metadata accessor for EnumVTable(0, a6, a3, a4);
  swift_bridgeObjectRetain();
  result = UnsafeHeterogeneousBuffer.allocate(bytes:)(48);
  *(_QWORD *)result = v9;
  *(_QWORD *)(result + 8) = 48;
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(result + 16) = a3;
  *(_BYTE *)(result + 40) = 1;
  v11 = *a2;
  if (!*a2)
    goto LABEL_14;
  if (result - v11 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_10;
  }
  if (result - v11 > 0x7FFFFFFF)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  v12 = *((_DWORD *)a2 + 3);
  v13 = __OFADD__(v12, 1);
  v14 = v12 + 1;
  if (v13)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  *((_DWORD *)a2 + 3) = v14;
  v15 = *(_DWORD *)(result + 12) & 0x80000000;
  *(_DWORD *)(result + 12) = v15;
  if (a4 < (uint64_t)0xFFFFFFFF80000000)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  if (a4 > 0x7FFFFFFF)
  {
LABEL_13:
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  if ((a4 & 0x80000000) == 0)
  {
    *(_DWORD *)(result + 12) = v15 | a4;
    return result;
  }
LABEL_15:
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

Swift::Void __swiftcall _DynamicPropertyBuffer.destroy()()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  __int128 v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int v17;

  v1 = type metadata accessor for OSSignpostID();
  v14 = *(_QWORD *)(v1 - 8);
  MEMORY[0x24BDAC7A8](v1);
  v3 = (char *)&v10 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = *v0;
  v11 = *((_DWORD *)v0 + 2);
  v13 = *((_DWORD *)v0 + 3);
  static os_signpost_type_t.event.getter();
  if (!kdebug_is_enabled())
    goto LABEL_15;
  if (one-time initialization token for _signpostLog != -1)
    swift_once();
  if ((OS_os_log.signpostsEnabled.getter() & 1) == 0 || !v13)
    goto LABEL_15;
  if (v4)
  {
    v5 = 0;
    v6 = v13 - 1;
    v12 = xmmword_23527E860;
    do
    {
      v8 = v4 + v5;
      if (v6)
        v5 += *(_DWORD *)(v8 + 8);
      else
        v5 = 0;
      static os_signpost_type_t.event.getter();
      static os_signpost_type_t.event.getter();
      if (kdebug_is_enabled())
      {
        if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
        {
          static OSSignpostID.exclusive.getter();
          type metadata accessor for _ContiguousArrayStorage<CVarArg>();
          v9 = swift_allocObject();
          *(_OWORD *)(v9 + 16) = v12;
          *(_QWORD *)(v9 + 56) = MEMORY[0x24BEE1E88];
          *(_QWORD *)(v9 + 64) = MEMORY[0x24BEE1ED8];
          *(_QWORD *)(v9 + 32) = v8;
          os_signpost(_:dso:log:name:signpostID:_:_:)();
          (*(void (**)(char *, uint64_t))(v14 + 8))(v3, v1);
          swift_bridgeObjectRelease();
        }
      }
    }
    while (v6-- | v5);
LABEL_15:
    v15 = v4;
    v16 = v11;
    v17 = v13;
    UnsafeHeterogeneousBuffer.destroy()();
    return;
  }
  __break(1u);
}

Swift::Void __swiftcall _DynamicPropertyBuffer.reset()()
{
  uint64_t *v0;
  int v1;
  uint64_t v2;
  int v3;
  int v4;
  int v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t *v8;

  v1 = *((_DWORD *)v0 + 3);
  if (v1)
  {
    v2 = *v0;
    if (*v0)
    {
      v3 = 0;
      v4 = v1 - 1;
      do
      {
        v7 = (uint64_t *)(v2 + v3);
        if (v4)
          v3 += *((_DWORD *)v7 + 2);
        else
          v3 = 0;
        v5 = v4 | v3;
        v6 = *v7;
        v8 = v7;
        (*(void (**)(uint64_t **))(v6 + 112))(&v8);
        --v4;
      }
      while (v5);
    }
    else
    {
      __break(1u);
    }
  }
}

uint64_t _DynamicPropertyBuffer.update(container:phase:)(uint64_t result, int *a2)
{
  uint64_t *v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  char v7;
  int v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  unsigned int v14;
  uint64_t *v15;
  int v16;
  uint64_t *v17;

  v3 = *((_DWORD *)v2 + 3);
  if (!v3)
  {
    v7 = 0;
    return v7 & 1;
  }
  v4 = *v2;
  if (*v2)
  {
    v5 = result;
    v6 = 0;
    v7 = 0;
    v8 = *a2;
    v9 = v3 - 1;
    do
    {
      v15 = (uint64_t *)(v4 + v6);
      if (v9)
        v6 += *((_DWORD *)v15 + 2);
      else
        v6 = 0;
      v10 = v9 | v6;
      v11 = v5 + (*((_DWORD *)v15 + 3) & 0x7FFFFFFF);
      v12 = *v15;
      v17 = v15;
      v16 = v8;
      v13 = (*(uint64_t (**)(uint64_t **, uint64_t, int *))(v12 + 120))(&v17, v11, &v16);
      if ((v13 & 1) != 0)
        v14 = 0x80000000;
      else
        v14 = 0;
      *((_DWORD *)v15 + 3) = v14 & 0x80000000 | *((_DWORD *)v15 + 3) & 0x7FFFFFFF;
      v7 |= v13;
      --v9;
    }
    while (v10);
    return v7 & 1;
  }
  __break(1u);
  return result;
}

uint64_t _DynamicPropertyBuffer.applyChanged(to:)(uint64_t result)
{
  uint64_t *v1;
  int v2;
  uint64_t v3;
  uint64_t (*v4)(_QWORD);
  int v5;
  int v6;
  uint64_t v8;
  int v9;

  v2 = *((_DWORD *)v1 + 3);
  if (v2)
  {
    v3 = *v1;
    if (*v1)
    {
      v4 = (uint64_t (*)(_QWORD))result;
      v5 = 0;
      v6 = v2 - 1;
      while (1)
      {
        v8 = v3 + v5;
        if (v6)
        {
          v5 += *(_DWORD *)(v8 + 8);
          v9 = *(_DWORD *)(v8 + 12);
          if (v9 < 0)
            goto LABEL_9;
        }
        else
        {
          v5 = 0;
          v9 = *(_DWORD *)(v8 + 12);
          if (v9 < 0)
LABEL_9:
            result = v4(v9 & 0x7FFFFFFF);
        }
        if (!(v6-- | v5))
          return result;
      }
    }
    __break(1u);
  }
  return result;
}

uint64_t static BoxVTableBase.getState<A>(elt:type:)@<X0>(uint64_t a1@<X2>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v4;

  v4 = type metadata accessor for Binding(0, a1, a1, a2);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a3, 1, 1, v4);
}

BOOL static BoxVTable.hasType<A>(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return *(_QWORD *)(v2 + 136) == a2;
}

uint64_t static BoxVTable.moveInitialize(elt:from:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;

  v2 = *(_QWORD *)(v1 + 136);
  MEMORY[0x24BDAC7A8](a1);
  v4 = (char *)&v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *v5;
  v11 = *v7;
  v8 = _UnsafeHeterogeneousBuffer_Element.body<A>(as:)();
  v11 = v6;
  _UnsafeHeterogeneousBuffer_Element.body<A>(as:)();
  UnsafeMutablePointer.move()();
  return _sSpsRi_zrlE10initialize2toyxn_tF((uint64_t)v4, v8, v2);
}

uint64_t static BoxVTable.deinitialize(elt:)()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 136);
  _UnsafeHeterogeneousBuffer_Element.body<A>(as:)();
  (*(void (**)(uint64_t))(*(_QWORD *)(v0 + 144) + 24))(v1);
  return UnsafeMutablePointer.deinitialize(count:)();
}

uint64_t static BoxVTable.reset(elt:)()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 136);
  _UnsafeHeterogeneousBuffer_Element.body<A>(as:)();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v0 + 144) + 32))(v1);
}

uint64_t static BoxVTable.update(elt:property:phase:)(uint64_t *a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t AssociatedTypeWitness;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char v19;
  void (*v20)(char *, uint64_t, uint64_t);
  int v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  void (*v33)(char *, uint64_t);
  void (*v34)(char *, uint64_t);
  uint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t DynamicType;
  uint64_t v44[3];
  uint64_t v45;

  v7 = type metadata accessor for OSSignpostID();
  v40 = *(_QWORD *)(v7 - 8);
  v41 = v7;
  MEMORY[0x24BDAC7A8](v7);
  v42 = (char *)&v36 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(_QWORD *)(v3 + 136);
  v9 = *(_QWORD *)(v3 + 144);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v12 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v14 = (char *)&v36 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v15);
  v17 = (char *)&v36 - v16;
  v18 = *a1;
  LODWORD(a1) = *a3;
  v39 = v18;
  v44[0] = v18;
  _UnsafeHeterogeneousBuffer_Element.body<A>(as:)();
  LODWORD(v44[0]) = (_DWORD)a1;
  v19 = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t, uint64_t))(v9 + 40))(a2, v44, v10, v9);
  if ((v19 & 1) != 0)
  {
    v20 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 16);
    v20(v17, a2, AssociatedTypeWitness);
    v21 = static os_signpost_type_t.event.getter();
    v20(v14, (uint64_t)v17, AssociatedTypeWitness);
    static os_signpost_type_t.event.getter();
    if (!kdebug_is_enabled())
      goto LABEL_7;
    if (one-time initialization token for _signpostLog != -1)
      swift_once();
    if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
    {
      static OSSignpostID.exclusive.getter();
      type metadata accessor for _ContiguousArrayStorage<CVarArg>();
      v22 = swift_allocObject();
      v38 = v21;
      v23 = (_QWORD *)v22;
      *(_OWORD *)(v22 + 16) = xmmword_235283260;
      v45 = AssociatedTypeWitness;
      boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v44);
      v20((char *)boxed_opaque_existential_1, (uint64_t)v14, AssociatedTypeWitness);
      __swift_project_boxed_opaque_existential_1(v44, v45);
      DynamicType = swift_getDynamicType();
      type metadata accessor for Any.Type();
      v37 = String.init<A>(describing:)();
      v26 = v25;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v44);
      v23[7] = MEMORY[0x24BEE0D00];
      v27 = lazy protocol witness table accessor for type String and conformance String();
      v23[4] = v37;
      v23[5] = v26;
      v28 = MEMORY[0x24BEE1ED8];
      v23[12] = MEMORY[0x24BEE1E88];
      v23[13] = v28;
      v29 = v39;
      v23[8] = v27;
      v23[9] = v29;
      swift_getAssociatedConformanceWitness();
      v30 = DynamicProperty.linkValueDescription.getter(AssociatedTypeWitness);
      v23[17] = MEMORY[0x24BEE0D00];
      v23[18] = v27;
      v23[14] = v30;
      v23[15] = v31;
      v32 = v42;
      os_signpost(_:dso:log:name:signpostID:_:_:)();
      (*(void (**)(char *, uint64_t))(v40 + 8))(v32, v41);
      v33 = *(void (**)(char *, uint64_t))(v12 + 8);
      v33(v14, AssociatedTypeWitness);
      v33(v17, AssociatedTypeWitness);
      swift_bridgeObjectRelease();
    }
    else
    {
LABEL_7:
      v34 = *(void (**)(char *, uint64_t))(v12 + 8);
      v34(v14, AssociatedTypeWitness);
      v34(v17, AssociatedTypeWitness);
    }
  }
  return v19 & 1;
}

uint64_t static BoxVTable.getState<A>(elt:type:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;

  v6 = *(_QWORD *)(v3 + 136);
  _UnsafeHeterogeneousBuffer_Element.body<A>(as:)();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 + 144) + 48))(a2, a3, v6);
}

__n128 static EnumVTable.moveInitialize(elt:from:)(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  __n128 result;

  v2 = *a1;
  v3 = *(_BYTE *)(*(_QWORD *)a2 + 40);
  result = *(__n128 *)(*(_QWORD *)a2 + 24);
  *(_QWORD *)(v2 + 16) = *(_QWORD *)(*(_QWORD *)a2 + 16);
  *(__n128 *)(v2 + 24) = result;
  *(_BYTE *)(v2 + 40) = v3;
  return result;
}

uint64_t static EnumVTable.deinitialize(elt:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(*(_QWORD *)a1 + 16);
  v2 = *(_QWORD *)(v1 + 16);
  if (v2)
  {
    swift_bridgeObjectRetain();
    v3 = v1 + 48;
    do
    {
      v3 += 24;
      _DynamicPropertyBuffer.destroy()();
      --v2;
    }
    while (v2);
    swift_bridgeObjectRelease();
  }
  return swift_arrayDestroy();
}

uint64_t static EnumVTable.reset(elt:)(uint64_t result)
{
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  int v7;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;

  v1 = *(_QWORD *)result;
  if ((*(_BYTE *)(*(_QWORD *)result + 40) & 1) == 0)
  {
    v2 = *(_QWORD *)(v1 + 32);
    if ((v2 & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else
    {
      v3 = *(_QWORD *)(v1 + 16);
      if (v2 < *(_QWORD *)(v3 + 16))
      {
        v4 = v3 + 24 * v2;
        v5 = *(_DWORD *)(v4 + 52);
        if (!v5)
        {
LABEL_11:
          *(_QWORD *)(v1 + 24) = 0;
          *(_QWORD *)(v1 + 32) = 0;
          *(_BYTE *)(v1 + 40) = 1;
          return result;
        }
        v6 = *(_QWORD *)(v4 + 40);
        if (v6)
        {
          v7 = 0;
          v8 = v5 - 1;
          do
          {
            v11 = (uint64_t *)(v6 + v7);
            if (v8)
              v7 += *((_DWORD *)v11 + 2);
            else
              v7 = 0;
            v9 = v8 | v7;
            v10 = *v11;
            v12 = v11;
            result = (*(uint64_t (**)(uint64_t **))(v10 + 112))(&v12);
            --v8;
          }
          while (v9);
          goto LABEL_11;
        }
LABEL_15:
        __break(1u);
        return result;
      }
    }
    __break(1u);
    goto LABEL_15;
  }
  return result;
}

uint64_t static EnumVTable.update(elt:property:phase:)()
{
  AGTypeApplyMutableEnumData();
  return 0;
}

void closure #1 in static EnumVTable.update(elt:property:phase:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, _BYTE *a5, int a6)
{
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;

  if ((a4[3] & 1) == 0)
  {
    v11 = a4[2];
    v12 = *a4;
    if (a4[1] == a1)
    {
      if ((v11 & 0x8000000000000000) == 0)
        goto LABEL_14;
      __break(1u);
    }
    if ((v11 & 0x8000000000000000) != 0)
    {
LABEL_18:
      __break(1u);
      goto LABEL_19;
    }
    if (v11 >= *(_QWORD *)(v12 + 16))
    {
LABEL_19:
      __break(1u);
      return;
    }
    v13 = a4 + 1;
    v14 = v12 + 24 * v11;
    v20 = *(_QWORD *)(v14 + 40);
    v21 = *(_QWORD *)(v14 + 48);
    _DynamicPropertyBuffer.reset()();
    *v13 = 0;
    a4[2] = 0;
    *((_BYTE *)a4 + 24) = 1;
    *a5 = 1;
  }
  v15 = *(_QWORD *)(*a4 + 16);
  if (!v15)
    return;
  v11 = 0;
  v16 = (uint64_t *)(*a4 + 32);
  while (1)
  {
    v17 = *v16;
    v16 += 3;
    if (v17 == a1)
      break;
    if (v15 == ++v11)
      return;
  }
  a4[1] = a1;
  a4[2] = v11;
  *((_BYTE *)a4 + 24) = 0;
  *a5 = 1;
  v12 = *a4;
LABEL_14:
  if (v11 >= *(_QWORD *)(v12 + 16))
  {
    __break(1u);
    goto LABEL_18;
  }
  v18 = v12 + 24 * v11;
  v20 = *(_QWORD *)(v18 + 40);
  v21 = *(_QWORD *)(v18 + 48);
  v19 = a6;
  *a5 = (_DynamicPropertyBuffer.update(container:phase:)(a3, &v19) | *a5) & 1;
}

void static EnumVTable.getState<A>(elt:type:)(uint64_t *a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v5 = *a1;
  if ((*(_BYTE *)(*a1 + 40) & 1) != 0)
  {
    v6 = type metadata accessor for Binding(0, a2, a2, a3);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(a4, 1, 1, v6);
    return;
  }
  v7 = *(_QWORD *)(v5 + 32);
  if ((v7 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (v7 < *(_QWORD *)(*(_QWORD *)(v5 + 16) + 16))
  {
    _DynamicPropertyBuffer.getState<A>(type:)(a2, a2, a3, a4);
    return;
  }
  __break(1u);
}

uint64_t specialized Set.startIndex.getter(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  v1 = *(_QWORD *)(a1 + 56);
  if (v1)
  {
    v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  v5 = *(_BYTE *)(a1 + 32);
  v6 = v5 & 0x3F;
  v3 = 1 << v5;
  if (v6 < 7)
    return v3;
  v1 = *(_QWORD *)(a1 + 64);
  if (v1)
  {
    v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  if (v6 < 8)
    return v3;
  v1 = *(_QWORD *)(a1 + 72);
  if (v1)
  {
    v2 = 128;
    return __clz(__rbit64(v1)) + v2;
  }
  v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 3)
    v7 = 3;
  v8 = v7 - 3;
  v9 = (unint64_t *)(a1 + 80);
  v2 = 128;
  while (v8)
  {
    v10 = *v9++;
    v1 = v10;
    --v8;
    v2 += 64;
    if (v10)
      return __clz(__rbit64(v1)) + v2;
  }
  return v3;
}

int64_t specialized _NativeSet.index(after:)(int64_t result, int a2, char a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;

  if ((a3 & 1) != 0)
    goto LABEL_20;
  v4 = result;
  if (result < 0 || (result = 1 << *(_BYTE *)(a4 + 32), result <= (uint64_t)v4))
  {
    __break(1u);
    goto LABEL_18;
  }
  v5 = v4 >> 6;
  v6 = a4 + 56;
  v7 = *(_QWORD *)(a4 + 56 + 8 * (v4 >> 6));
  if (((v7 >> v4) & 1) == 0)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  if (*(_DWORD *)(a4 + 36) != a2)
  {
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
    return result;
  }
  v8 = v7 & (-2 << (v4 & 0x3F));
  if (v8)
    return __clz(__rbit64(v8)) | v4 & 0xFFFFFFFFFFFFFFC0;
  v9 = v5 + 1;
  v10 = (unint64_t)(result + 63) >> 6;
  if (v5 + 1 < v10)
  {
    v11 = *(_QWORD *)(v6 + 8 * v9);
    if (v11)
      return __clz(__rbit64(v11)) + (v9 << 6);
    v9 = v5 + 2;
    if (v5 + 2 < v10)
    {
      v11 = *(_QWORD *)(v6 + 8 * v9);
      if (v11)
        return __clz(__rbit64(v11)) + (v9 << 6);
      while (v10 - 3 != v5)
      {
        v11 = *(_QWORD *)(a4 + 80 + 8 * v5++);
        if (v11)
        {
          v9 = v5 + 2;
          return __clz(__rbit64(v11)) + (v9 << 6);
        }
      }
    }
  }
  return result;
}

uint64_t type metadata accessor for BoxVTable(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for BoxVTable);
}

double partial apply for closure #1 in _DynamicPropertyBuffer.addFields<A>(_:container:inputs:baseOffset:)@<D0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return closure #1 in _DynamicPropertyBuffer.addFields<A>(_:container:inputs:baseOffset:)(a1, *(_DWORD *)(v2 + 24), *(_QWORD *)(v2 + 32), *(_QWORD *)(v2 + 16), a2);
}

ValueMetadata *type metadata accessor for _DynamicPropertyBuffer()
{
  return &type metadata for _DynamicPropertyBuffer;
}

uint64_t type metadata accessor for BoxVTableBase()
{
  return objc_opt_self();
}

uint64_t type metadata completion function for BoxVTable()
{
  return swift_initClassMetadata2();
}

uint64_t type metadata completion function for EnumVTable()
{
  return swift_initClassMetadata2();
}

uint64_t type metadata accessor for EnumVTable(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for EnumVTable);
}

void partial apply for closure #1 in static EnumVTable.update(elt:property:phase:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  closure #1 in static EnumVTable.update(elt:property:phase:)(a1, a2, a3, *(uint64_t **)(v3 + 16), *(_BYTE **)(v3 + 24), *(_DWORD *)(v3 + 32));
}

uint64_t specialized _DynamicPropertyBuffer.applyChanged(to:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  int v5;
  uint64_t v6;
  char v8;
  int v11;
  unint64_t v12;
  int v13;
  uint64_t v15;
  int v16;

  v5 = *(_DWORD *)(result + 12);
  if (v5)
  {
    v6 = *(_QWORD *)result;
    if (*(_QWORD *)result)
    {
      v8 = a4;
      v11 = 0;
      v12 = a4 & 0xFFFFFFFF00000000;
      v13 = v5 - 1;
      while (1)
      {
        v15 = v6 + v11;
        if (v13)
        {
          v11 += *(_DWORD *)(v15 + 8);
          v16 = *(_DWORD *)(v15 + 12);
          if (v16 < 0)
            goto LABEL_9;
        }
        else
        {
          v11 = 0;
          v16 = *(_DWORD *)(v15 + 12);
          if (v16 < 0)
LABEL_9:
            result = closure #2 in changedBodyProperties<A>(of:)(v16 & 0x7FFFFFFF, a2, a3, v12 | v8 & 1, a5);
        }
        if (!(v13-- | v11))
          return result;
      }
    }
    __break(1u);
  }
  return result;
}

uint64_t assignWithCopy for EnumBox(uint64_t a1, uint64_t a2)
{
  __int128 v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = *(_OWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_OWORD *)(a1 + 8) = v4;
  return a1;
}

void *type metadata accessor for EnumBox()
{
  return &unk_25064D648;
}

AXChartDescriptor __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> AccessibilityChartDescriptorStorage.resolve()()
{
  AXChartDescriptor result;

  result.super.isa = (Class)_assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t AccessibilityChartDescriptorStorage.isEqual(to:)()
{
  return 0;
}

uint64_t static AccessibilityChartDescriptorStorage.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 88))(a2) & 1;
}

uint64_t AccessibilityChartDescriptorStorage.deinit()
{
  uint64_t v0;

  return v0;
}

uint64_t AccessibilityChartDescriptorStorage.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance AccessibilityChartDescriptorStorage(uint64_t a1, _QWORD *a2)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)a1 + 88))(*a2) & 1;
}

uint64_t RepresentableChartDescriptorStorage.__allocating_init(_:)(__int128 *a1)
{
  uint64_t v2;

  v2 = swift_allocObject();
  *(_QWORD *)(v2 + 56) = 0;
  *(_BYTE *)(v2 + 64) = 0;
  *(_DWORD *)(v2 + 68) = 0;
  outlined init with take of ScrollStateRequest(a1, v2 + 16);
  return v2;
}

uint64_t RepresentableChartDescriptorStorage.init(_:)(__int128 *a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 56) = 0;
  *(_BYTE *)(v1 + 64) = 0;
  *(_DWORD *)(v1 + 68) = 0;
  outlined init with take of ScrollStateRequest(a1, v1 + 16);
  return v1;
}

Swift::Void __swiftcall RepresentableChartDescriptorStorage.reset()()
{
  uint64_t v0;
  void *v1;

  *(_DWORD *)(v0 + 68) = 0;
  *(_BYTE *)(v0 + 64) = 0;
  v1 = *(void **)(v0 + 56);
  *(_QWORD *)(v0 + 56) = 0;

}

uint64_t RepresentableChartDescriptorStorage.markNeedsUpdate(_:)(uint64_t *a1)
{
  uint64_t v1;
  uint64_t result;
  int v4;
  BOOL v5;
  int v6;

  swift_beginAccess();
  __swift_assign_boxed_opaque_existential_1((uint64_t *)(v1 + 16), a1);
  result = swift_endAccess();
  v4 = *(_DWORD *)(v1 + 68);
  v5 = __CFADD__(v4, 1);
  v6 = v4 + 1;
  if (v5)
  {
    __break(1u);
  }
  else
  {
    *(_DWORD *)(v1 + 68) = v6;
    *(_BYTE *)(v1 + 64) = 1;
  }
  return result;
}

AXChartDescriptor __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> RepresentableChartDescriptorStorage.resolve()()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  void (*v4)(void);
  id v5;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  id v11;
  _QWORD v12[3];
  uint64_t v13;
  uint64_t v14;

  v1 = v0;
  v2 = *(void **)(v0 + 56);
  if (v2)
  {
    if (*(_BYTE *)(v0 + 64) == 1)
    {
      swift_beginAccess();
      outlined init with copy of AnyTrackedValue(v0 + 16, (uint64_t)v12);
      v3 = v14;
      __swift_project_boxed_opaque_existential_1(v12, v13);
      v4 = *(void (**)(void))(v3 + 16);
      v5 = v2;
      v4();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v12);
      *(_BYTE *)(v0 + 64) = 0;
      return (AXChartDescriptor)v5;
    }
    else
    {
      return (AXChartDescriptor)v2;
    }
  }
  else
  {
    swift_beginAccess();
    outlined init with copy of AnyTrackedValue(v0 + 16, (uint64_t)v12);
    v7 = v13;
    v8 = v14;
    __swift_project_boxed_opaque_existential_1(v12, v13);
    v9 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v8 + 8))(v7, v8);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v12);
    v10 = *(void **)(v1 + 56);
    *(_QWORD *)(v1 + 56) = v9;
    v11 = v9;

    *(_BYTE *)(v1 + 64) = 0;
    return (AXChartDescriptor)v11;
  }
}

uint64_t RepresentableChartDescriptorStorage.isEqual(to:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _BYTE v4[40];
  _BYTE v5[40];
  uint64_t v6;

  v6 = *MEMORY[0x24BDAC8D0];
  v1 = swift_dynamicCastClass();
  v2 = v1;
  if (v1)
  {
    if (*(_DWORD *)(v0 + 68) == *(_DWORD *)(v1 + 68))
    {
      swift_beginAccess();
      outlined init with copy of AnyTrackedValue(v0 + 16, (uint64_t)v5);
      swift_beginAccess();
      outlined init with copy of AnyTrackedValue(v2 + 16, (uint64_t)v4);
      type metadata accessor for AXChartDescriptorRepresentable();
      v2 = AGCompareValues();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v4);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v5);
    }
    else
    {
      return 0;
    }
  }
  return v2;
}

unint64_t type metadata accessor for AXChartDescriptorRepresentable()
{
  unint64_t result;

  result = lazy cache variable for type metadata for AXChartDescriptorRepresentable;
  if (!lazy cache variable for type metadata for AXChartDescriptorRepresentable)
  {
    result = swift_getExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for AXChartDescriptorRepresentable);
  }
  return result;
}

void RepresentableChartDescriptorStorage.__ivar_destroyer()
{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_1(v0 + 16);

}

uint64_t RepresentableChartDescriptorStorage.deinit()
{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_1(v0 + 16);

  return v0;
}

uint64_t RepresentableChartDescriptorStorage.__deallocating_deinit()
{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_1(v0 + 16);

  return swift_deallocClassInstance();
}

uint64_t CodableAXChartDescriptor.storage.getter()
{
  return swift_retain();
}

uint64_t CodableAXChartDescriptor.storage.setter(uint64_t a1)
{
  _QWORD *v1;
  uint64_t result;

  result = swift_release();
  *v1 = a1;
  return result;
}

uint64_t (*CodableAXChartDescriptor.storage.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t CodableAXChartDescriptor.init(_:)@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = result;
  return result;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance CodableAXChartDescriptor.CodingKeys()
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CodableAXChartDescriptor.CodingKeys()
{
  return String.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance CodableAXChartDescriptor.CodingKeys()
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  return Hasher._finalize()();
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance CodableAXChartDescriptor.CodingKeys@<X0>(Swift::String *a1@<X0>, BOOL *a2@<X8>)
{
  Swift::Int v3;
  uint64_t result;

  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of protocol witness for RawRepresentable.init(rawValue:) in conformance CodableAXChartDescriptor.CodingKeys, *a1);
  result = swift_bridgeObjectRelease();
  *a2 = v3 != 0;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance CodableAXChartDescriptor.CodingKeys(char *a1@<X8>)
{
  strcpy(a1, "dictionaryData");
  a1[15] = -18;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance CodableAXChartDescriptor.CodingKeys()
{
  return 0x616E6F6974636964;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance CodableAXChartDescriptor.CodingKeys@<X0>(Swift::String string@<0:X0, 8:X1>, BOOL *a2@<X8>)
{
  void *object;
  Swift::String v3;
  Swift::Int v5;
  uint64_t result;

  object = string._object;
  v3._countAndFlagsBits = string._countAndFlagsBits;
  v3._object = object;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of protocol witness for CodingKey.init(stringValue:) in conformance CodableAXChartDescriptor.CodingKeys, v3);
  result = swift_bridgeObjectRelease();
  *a2 = v5 != 0;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance CodableAXChartDescriptor.CodingKeys()
{
  lazy protocol witness table accessor for type CodableAXChartDescriptor.CodingKeys and conformance CodableAXChartDescriptor.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CodableAXChartDescriptor.CodingKeys()
{
  lazy protocol witness table accessor for type CodableAXChartDescriptor.CodingKeys and conformance CodableAXChartDescriptor.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t CodableAXChartDescriptor.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v14[2];

  type metadata accessor for KeyedDecodingContainer<CodableAXChartDescriptor.CodingKeys>(0, &lazy cache variable for type metadata for KeyedDecodingContainer<CodableAXChartDescriptor.CodingKeys>, (uint64_t (*)(uint64_t, void *, unint64_t))MEMORY[0x24BEE33E0]);
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v9 = (char *)v14 - v8;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type CodableAXChartDescriptor.CodingKeys and conformance CodableAXChartDescriptor.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    lazy protocol witness table accessor for type Data and conformance Data();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    v10 = v14[0];
    v11 = v14[1];
    type metadata accessor for AccessibilitySpecificChartDescriptorStorage();
    v12 = swift_allocObject();
    *(_QWORD *)(v12 + 16) = v10;
    *(_QWORD *)(v12 + 24) = v11;
    *a2 = v12;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

unint64_t lazy protocol witness table accessor for type CodableAXChartDescriptor.CodingKeys and conformance CodableAXChartDescriptor.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CodableAXChartDescriptor.CodingKeys and conformance CodableAXChartDescriptor.CodingKeys;
  if (!lazy protocol witness table cache variable for type CodableAXChartDescriptor.CodingKeys and conformance CodableAXChartDescriptor.CodingKeys)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for CodableAXChartDescriptor.CodingKeys, &unk_250639060);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodableAXChartDescriptor.CodingKeys and conformance CodableAXChartDescriptor.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CodableAXChartDescriptor.CodingKeys and conformance CodableAXChartDescriptor.CodingKeys;
  if (!lazy protocol witness table cache variable for type CodableAXChartDescriptor.CodingKeys and conformance CodableAXChartDescriptor.CodingKeys)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for CodableAXChartDescriptor.CodingKeys, &unk_250639060);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodableAXChartDescriptor.CodingKeys and conformance CodableAXChartDescriptor.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CodableAXChartDescriptor.CodingKeys and conformance CodableAXChartDescriptor.CodingKeys;
  if (!lazy protocol witness table cache variable for type CodableAXChartDescriptor.CodingKeys and conformance CodableAXChartDescriptor.CodingKeys)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for CodableAXChartDescriptor.CodingKeys, &unk_250639060);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodableAXChartDescriptor.CodingKeys and conformance CodableAXChartDescriptor.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CodableAXChartDescriptor.CodingKeys and conformance CodableAXChartDescriptor.CodingKeys;
  if (!lazy protocol witness table cache variable for type CodableAXChartDescriptor.CodingKeys and conformance CodableAXChartDescriptor.CodingKeys)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for CodableAXChartDescriptor.CodingKeys, &unk_250639060);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodableAXChartDescriptor.CodingKeys and conformance CodableAXChartDescriptor.CodingKeys);
  }
  return result;
}

uint64_t type metadata accessor for AccessibilitySpecificChartDescriptorStorage()
{
  return objc_opt_self();
}

uint64_t CodableAXChartDescriptor.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v13;
  id v14;
  void *v15;
  Class isa;
  id v17;
  id v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  uint64_t v23;
  id v24[3];

  v24[2] = *(id *)MEMORY[0x24BDAC8D0];
  type metadata accessor for KeyedDecodingContainer<CodableAXChartDescriptor.CodingKeys>(0, &lazy cache variable for type metadata for KeyedEncodingContainer<CodableAXChartDescriptor.CodingKeys>, (uint64_t (*)(uint64_t, void *, unint64_t))MEMORY[0x24BEE3520]);
  v5 = v4;
  v6 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v24[-1] - v7;
  v9 = *v1;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type CodableAXChartDescriptor.CodingKeys and conformance CodableAXChartDescriptor.CodingKeys();
  v10 = dispatch thunk of Encoder.container<A>(keyedBy:)();
  v11 = (void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 80))(v10);
  if (v2)
    return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  v13 = v11;
  v23 = v6;
  v14 = objc_msgSend(v11, sel_dictionaryRepresentation);
  static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  v15 = (void *)objc_opt_self();
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v24[0] = 0;
  v17 = objc_msgSend(v15, sel_archivedDataWithRootObject_requiringSecureCoding_error_, isa, 1, v24);

  v18 = v24[0];
  if (v17)
  {
    v19 = (void *)static Data._unconditionallyBridgeFromObjectiveC(_:)();
    v21 = v20;

    v24[0] = v19;
    v24[1] = v21;
    lazy protocol witness table accessor for type Data and conformance Data();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v23 + 8))(v8, v5);

    return outlined consume of Data._Representation((uint64_t)v19, (unint64_t)v21);
  }
  else
  {
    v22 = v18;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    return (*(uint64_t (**)(char *, uint64_t))(v23 + 8))(v8, v5);
  }
}

void type metadata accessor for KeyedDecodingContainer<CodableAXChartDescriptor.CodingKeys>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, void *, unint64_t))
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    v6 = lazy protocol witness table accessor for type CodableAXChartDescriptor.CodingKeys and conformance CodableAXChartDescriptor.CodingKeys();
    v7 = a3(a1, &unk_250639060, v6);
    if (!v8)
      atomic_store(v7, a2);
  }
}

uint64_t protocol witness for Decodable.init(from:) in conformance CodableAXChartDescriptor@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return CodableAXChartDescriptor.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance CodableAXChartDescriptor(_QWORD *a1)
{
  return CodableAXChartDescriptor.encode(to:)(a1);
}

uint64_t dispatch thunk of AXChartDescriptorRepresentable.makeChartDescriptor()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of AXChartDescriptorRepresentable.updateChartDescriptor(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 16))();
}

uint64_t type metadata accessor for AccessibilityChartDescriptorStorage()
{
  return objc_opt_self();
}

uint64_t method lookup function for AccessibilityChartDescriptorStorage()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of AccessibilityChartDescriptorStorage.resolve()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 80))();
}

uint64_t dispatch thunk of AccessibilityChartDescriptorStorage.isEqual(to:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 88))();
}

uint64_t type metadata accessor for RepresentableChartDescriptorStorage()
{
  return objc_opt_self();
}

uint64_t method lookup function for RepresentableChartDescriptorStorage()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of RepresentableChartDescriptorStorage.__allocating_init(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 136))();
}

ValueMetadata *type metadata accessor for CodableAXChartDescriptor()
{
  return &type metadata for CodableAXChartDescriptor;
}

AXChartDescriptor __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> AccessibilitySpecificChartDescriptorStorage.resolve()()
{
  uint64_t v0;
  void *v1;
  unint64_t v2;
  Class isa;
  id v4;
  AXChartDescriptor result;
  id v6;
  Class v7;
  id v8;
  uint64_t v9;
  unint64_t v10;
  id v11;
  _OWORD v12[2];
  _BYTE v13[24];
  uint64_t v14;

  v1 = *(void **)(v0 + 16);
  v2 = *(_QWORD *)(v0 + 24);
  if ((v2 & 0x2000000000000000) != 0)
    return (AXChartDescriptor)v1;
  outlined copy of Data._Representation(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
  isa = Data._bridgeToObjectiveC()().super.isa;
  v4 = (id)_AXSwiftUIUnarchiveChartDescriptor((uint64_t)isa);

  if (v4)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v12, 0, sizeof(v12));
  }
  outlined init with take of Any?((uint64_t)v12, (uint64_t)v13);
  if (!v14)
  {
    outlined destroy of Any?((uint64_t)v13);
    goto LABEL_11;
  }
  type metadata accessor for [AnyHashable : Any]();
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_11:
    lazy protocol witness table accessor for type AccessibilitySpecificChartDescriptorStorage.ChartDescriptorArchiveError and conformance AccessibilitySpecificChartDescriptorStorage.ChartDescriptorArchiveError();
    swift_allocError();
    swift_willThrow();
    outlined consume of AccessibilitySpecificChartDescriptorStorage.Storage((uint64_t)v1, v2);
    return result;
  }
  v6 = objc_allocWithZone(MEMORY[0x24BDB3D60]);
  v7 = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v8 = objc_msgSend(v6, sel_initWithDictionary_, v7);

  outlined consume of AccessibilitySpecificChartDescriptorStorage.Storage((uint64_t)v1, v2);
  v9 = *(_QWORD *)(v0 + 16);
  v10 = *(_QWORD *)(v0 + 24);
  *(_QWORD *)(v0 + 16) = v8;
  *(_QWORD *)(v0 + 24) = 0x2000000000000000;
  v11 = v8;
  outlined consume of AccessibilitySpecificChartDescriptorStorage.Storage(v9, v10);
  return (AXChartDescriptor)v11;
}

uint64_t AccessibilitySpecificChartDescriptorStorage.isEqual(to:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  char v6;
  char v7;
  AXChartDescriptor v9;
  AXChartDescriptor v10;
  Class isa;
  AXChartDescriptor v12;
  AXChartDescriptor v13;
  Class v14;
  id v15;
  id v16;
  Class v17;
  Class v18;

  v1 = swift_dynamicCastClass();
  if (v1)
  {
    v2 = *(_QWORD *)(v0 + 16);
    v3 = *(_QWORD *)(v0 + 24);
    v5 = *(_QWORD *)(v1 + 16);
    v4 = *(_QWORD *)(v1 + 24);
    if (((v3 | v4) & 0x2000000000000000) == 0)
    {
      outlined copy of AccessibilitySpecificChartDescriptorStorage.Storage(*(_QWORD *)(v1 + 16), v4);
      outlined copy of AccessibilitySpecificChartDescriptorStorage.Storage(v2, v3);
      outlined copy of AccessibilitySpecificChartDescriptorStorage.Storage(v2, v3);
      outlined copy of AccessibilitySpecificChartDescriptorStorage.Storage(v5, v4);
      swift_retain();
      specialized static Data.== infix(_:_:)(v2, v3);
      v7 = v6;
      outlined consume of AccessibilitySpecificChartDescriptorStorage.Storage(v5, v4);
      outlined consume of AccessibilitySpecificChartDescriptorStorage.Storage(v2, v3);
      outlined consume of AccessibilitySpecificChartDescriptorStorage.Storage(v2, v3);
      outlined consume of AccessibilitySpecificChartDescriptorStorage.Storage(v5, v4);
      swift_release();
      return v7 & 1;
    }
    outlined copy of AccessibilitySpecificChartDescriptorStorage.Storage(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
    outlined copy of AccessibilitySpecificChartDescriptorStorage.Storage(v5, v4);
    swift_retain();
    outlined consume of AccessibilitySpecificChartDescriptorStorage.Storage(v2, v3);
    outlined consume of AccessibilitySpecificChartDescriptorStorage.Storage(v5, v4);
    v9.super.isa = AccessibilitySpecificChartDescriptorStorage.resolve()().super.isa;
    if (v10.super.isa)
    {

    }
    else
    {
      isa = v9.super.isa;
      v12.super.isa = AccessibilitySpecificChartDescriptorStorage.resolve()().super.isa;
      if (!v13.super.isa)
      {
        v14 = v12.super.isa;
        v15 = -[objc_class dictionaryRepresentation](isa, sel_dictionaryRepresentation);
        static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

        v16 = -[objc_class dictionaryRepresentation](v14, sel_dictionaryRepresentation);
        static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

        type metadata accessor for NSObject();
        v17 = Dictionary._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease();
        v18 = Dictionary._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease();
        v7 = static NSObject.== infix(_:_:)();
        swift_release();

        return v7 & 1;
      }

    }
    swift_release();
  }
  return 0;
}

void AccessibilitySpecificChartDescriptorStorage.__ivar_destroyer()
{
  uint64_t v0;

  outlined consume of AccessibilitySpecificChartDescriptorStorage.Storage(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t AccessibilitySpecificChartDescriptorStorage.__deallocating_deinit()
{
  uint64_t v0;

  outlined consume of AccessibilitySpecificChartDescriptorStorage.Storage(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
  return swift_deallocClassInstance();
}

uint64_t *initializeBufferWithCopyOfBuffer for AccessibilitySpecificChartDescriptorStorage.Storage(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  unint64_t v4;

  v3 = *a2;
  v4 = a2[1];
  outlined copy of AccessibilitySpecificChartDescriptorStorage.Storage(*a2, v4);
  *a1 = v3;
  a1[1] = v4;
  return a1;
}

id outlined copy of AccessibilitySpecificChartDescriptorStorage.Storage(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0x2000000000000000) != 0)
    return (id)a1;
  else
    return (id)outlined copy of Data._Representation(a1, a2);
}

void destroy for AccessibilitySpecificChartDescriptorStorage.Storage(uint64_t a1)
{
  outlined consume of AccessibilitySpecificChartDescriptorStorage.Storage(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
}

void outlined consume of AccessibilitySpecificChartDescriptorStorage.Storage(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0x2000000000000000) != 0)

  else
    outlined consume of Data._Representation(a1, a2);
}

uint64_t *assignWithCopy for AccessibilitySpecificChartDescriptorStorage.Storage(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v3 = *a2;
  v4 = a2[1];
  outlined copy of AccessibilitySpecificChartDescriptorStorage.Storage(*a2, v4);
  v5 = *a1;
  v6 = a1[1];
  *a1 = v3;
  a1[1] = v4;
  outlined consume of AccessibilitySpecificChartDescriptorStorage.Storage(v5, v6);
  return a1;
}

uint64_t *assignWithTake for AccessibilitySpecificChartDescriptorStorage.Storage(uint64_t *a1, _OWORD *a2)
{
  uint64_t v3;
  unint64_t v4;

  v3 = *a1;
  v4 = a1[1];
  *(_OWORD *)a1 = *a2;
  outlined consume of AccessibilitySpecificChartDescriptorStorage.Storage(v3, v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for AccessibilitySpecificChartDescriptorStorage.Storage(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 3 && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 3);
  v3 = ((2 * ((*(_QWORD *)(a1 + 8) & 0x1000000000000000) != 0)) | ((*(_QWORD *)(a1 + 8) >> 60) >> 1) & 1) ^ 3;
  if (v3 >= 2)
    v3 = -1;
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for AccessibilitySpecificChartDescriptorStorage.Storage(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 2)
  {
    *(_QWORD *)result = a2 - 3;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 3)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if (a3 >= 3)
      *(_BYTE *)(result + 16) = 0;
    if (a2)
    {
      *(_QWORD *)result = 0;
      *(_QWORD *)(result + 8) = (unint64_t)((2 * (a2 & 1)) | 1) << 60;
    }
  }
  return result;
}

uint64_t getEnumTag for AccessibilitySpecificChartDescriptorStorage.Storage(uint64_t a1)
{
  return (*(_QWORD *)(a1 + 8) >> 61) & 1;
}

uint64_t destructiveProjectEnumData for AccessibilitySpecificChartDescriptorStorage.Storage(uint64_t result)
{
  *(_QWORD *)(result + 8) &= ~0x2000000000000000uLL;
  return result;
}

uint64_t destructiveInjectEnumTag for AccessibilitySpecificChartDescriptorStorage.Storage(uint64_t result, char a2)
{
  *(_QWORD *)(result + 8) = *(_QWORD *)(result + 8) & 0xCFFFFFFFFFFFFFFFLL | ((unint64_t)(a2 & 1) << 61);
  return result;
}

void *type metadata accessor for AccessibilitySpecificChartDescriptorStorage.Storage()
{
  return &unk_250643BE8;
}

void *type metadata accessor for CodableAXChartDescriptor.CodingKeys()
{
  return &unk_250639060;
}

void closure #1 in static Data.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __asm { BR              X10 }
}

uint64_t sub_234D3D398(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, __int16 a10, char __s2, char a12, char a13, char a14, char a15, char a16, char a17, char a18, char a19, char a20,char a21,char a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37)
{
  BOOL *v37;
  const void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t result;
  uint64_t v42;
  __int16 v43;
  char v44;
  char v45;
  char v46;
  char v47;

  v42 = v39;
  v43 = v40;
  v44 = BYTE2(v40);
  v45 = BYTE3(v40);
  v46 = BYTE4(v40);
  v47 = BYTE5(v40);
  if (!v38)
  {
    __break(1u);
    JUMPOUT(0x234D3D57CLL);
  }
  result = memcmp(v38, &v42, BYTE6(v40));
  *v37 = (_DWORD)result == 0;
  return result;
}

void specialized Data._Representation.withUnsafeBytes<A>(_:)(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }
}

uint64_t sub_234D3D5FC()
{
  unint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  char v7;
  uint64_t v8;
  __int16 v9;
  char v10;
  char v11;
  char v12;
  char v13;

  v8 = v3;
  v9 = v4;
  v10 = BYTE2(v4);
  v11 = BYTE3(v4);
  v12 = BYTE4(v4);
  v13 = BYTE5(v4);
  closure #1 in static Data.== infix(_:_:)((uint64_t)&v8, (uint64_t)&v8 + BYTE6(v4), v1, v0);
  outlined consume of Data._Representation(v1, v0);
  if (!v2)
    v5 = v7;
  return v5 & 1;
}

uint64_t specialized __DataStorage.withUnsafeBytes<A>(in:apply:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t result;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  char v19;

  result = __DataStorage._bytes.getter();
  v11 = result;
  if (result)
  {
    result = __DataStorage._offset.getter();
    if (__OFSUB__(a1, result))
    {
LABEL_15:
      __break(1u);
      return result;
    }
    v11 += a1 - result;
  }
  v12 = __OFSUB__(a2, a1);
  v13 = a2 - a1;
  if (v12)
  {
    __break(1u);
    goto LABEL_15;
  }
  v14 = __DataStorage._length.getter();
  if (v14 >= v13)
    v15 = v13;
  else
    v15 = v14;
  v16 = v11 + v15;
  if (v11)
    v17 = v16;
  else
    v17 = 0;
  closure #1 in static Data.== infix(_:_:)(v11, v17, a4, a5);
  if (!v5)
    v18 = v19;
  return v18 & 1;
}

void specialized static Data.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  __asm { BR              X11 }
}

uint64_t sub_234D3D8BC()
{
  unint64_t v0;

  return ((uint64_t (*)(void))((char *)&loc_234D3D8F0 + *((int *)qword_234D3D9B0 + (v0 >> 62))))();
}

uint64_t sub_234D3D900@<X0>(uint64_t a1@<X8>)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;

  if (a1 == BYTE6(v1))
  {
    if (a1 < 1)
    {
      v5 = 1;
    }
    else
    {
      outlined copy of Data._Representation(v2, v1);
      specialized Data._Representation.withUnsafeBytes<A>(_:)(v4, v3);
    }
  }
  else
  {
    v5 = 0;
  }
  return v5 & 1;
}

unint64_t lazy protocol witness table accessor for type AccessibilitySpecificChartDescriptorStorage.ChartDescriptorArchiveError and conformance AccessibilitySpecificChartDescriptorStorage.ChartDescriptorArchiveError()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AccessibilitySpecificChartDescriptorStorage.ChartDescriptorArchiveError and conformance AccessibilitySpecificChartDescriptorStorage.ChartDescriptorArchiveError;
  if (!lazy protocol witness table cache variable for type AccessibilitySpecificChartDescriptorStorage.ChartDescriptorArchiveError and conformance AccessibilitySpecificChartDescriptorStorage.ChartDescriptorArchiveError)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for AccessibilitySpecificChartDescriptorStorage.ChartDescriptorArchiveError, &type metadata for AccessibilitySpecificChartDescriptorStorage.ChartDescriptorArchiveError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilitySpecificChartDescriptorStorage.ChartDescriptorArchiveError and conformance AccessibilitySpecificChartDescriptorStorage.ChartDescriptorArchiveError);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AccessibilitySpecificChartDescriptorStorage.ChartDescriptorArchiveError and conformance AccessibilitySpecificChartDescriptorStorage.ChartDescriptorArchiveError;
  if (!lazy protocol witness table cache variable for type AccessibilitySpecificChartDescriptorStorage.ChartDescriptorArchiveError and conformance AccessibilitySpecificChartDescriptorStorage.ChartDescriptorArchiveError)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for AccessibilitySpecificChartDescriptorStorage.ChartDescriptorArchiveError, &type metadata for AccessibilitySpecificChartDescriptorStorage.ChartDescriptorArchiveError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilitySpecificChartDescriptorStorage.ChartDescriptorArchiveError and conformance AccessibilitySpecificChartDescriptorStorage.ChartDescriptorArchiveError);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for CodableAXChartDescriptor.CodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_234D3DAAC + 4 * asc_23529C020[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_234D3DACC + 4 * byte_23529C025[v4]))();
}

_BYTE *sub_234D3DAAC(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_234D3DACC(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_234D3DAD4(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_234D3DADC(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_234D3DAE4(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_234D3DAEC(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for AccessibilitySpecificChartDescriptorStorage.ChartDescriptorArchiveError()
{
  return &type metadata for AccessibilitySpecificChartDescriptorStorage.ChartDescriptorArchiveError;
}

uint64_t Text.LineStyle.nsUnderlineStyleValue.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t (*Text.LineStyle.nsUnderlineStyleValue.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t Text.LineStyle.color.getter()
{
  return swift_retain();
}

uint64_t Text.LineStyle.color.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_release();
  *(_QWORD *)(v1 + 8) = a1;
  return result;
}

uint64_t (*Text.LineStyle.color.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t Text.LineStyle.nsUnderlineStyle.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t Text.LineStyle.nsUnderlineStyle.setter(uint64_t result)
{
  _QWORD *v1;

  *v1 = result;
  return result;
}

uint64_t (*Text.LineStyle.nsUnderlineStyle.modify(_QWORD *a1))(uint64_t result)
{
  _QWORD *v1;

  *a1 = *v1;
  a1[1] = v1;
  return Dictionary._Variant.asNative.modifyspecialized ;
}

void static Text.LineStyle.Pattern.solid.getter(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

_QWORD *Text.LineStyle.init(pattern:color:)@<X0>(_QWORD *result@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  *a3 = *result | 1;
  a3[1] = a2;
  return result;
}

void static Text.LineStyle.Pattern.dot.getter(_QWORD *a1@<X8>)
{
  *a1 = 256;
}

void static Text.LineStyle.Pattern.dash.getter(_QWORD *a1@<X8>)
{
  *a1 = 512;
}

void static Text.LineStyle.Pattern.dashDot.getter(_QWORD *a1@<X8>)
{
  *a1 = 768;
}

void static Text.LineStyle.Pattern.dashDotDot.getter(_QWORD *a1@<X8>)
{
  *a1 = 1024;
}

double static Text.LineStyle.single.getter@<D0>(_OWORD *a1@<X8>)
{
  double result;

  *(_QWORD *)&result = 1;
  *a1 = xmmword_235260EF0;
  return result;
}

uint64_t Text.LineStyle.init(_nsUnderlineStyle:)@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  _BOOL8 v3;
  uint64_t v4;

  v3 = (~(_BYTE)result & 9) == 0 || result == 0 || (result & 0x8002) != 0;
  if (v3)
    v4 = 0;
  else
    v4 = result;
  *a2 = v4;
  a2[1] = v3;
  return result;
}

uint64_t Text.LineStyle.Resolved.nsUnderlineStyle.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t Text.LineStyle.Resolved.nsUnderlineStyle.setter(uint64_t result)
{
  _QWORD *v1;

  *v1 = result;
  return result;
}

uint64_t (*Text.LineStyle.Resolved.nsUnderlineStyle.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t Text.LineStyle.Resolved.color.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 8);
}

uint64_t Text.LineStyle.Resolved.color.setter(uint64_t result, uint64_t a2, char a3)
{
  uint64_t v3;

  *(_QWORD *)(v3 + 8) = result;
  *(_QWORD *)(v3 + 16) = a2;
  *(_BYTE *)(v3 + 24) = a3 & 1;
  return result;
}

uint64_t (*Text.LineStyle.Resolved.color.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

void Text.LineStyle.hash(into:)(uint64_t a1)
{
  Swift::UInt *v1;
  Swift::UInt *v2;
  Swift::UInt v4;
  void (*v5)(uint64_t);

  v2 = v1;
  v4 = v2[1];
  Hasher._combine(_:)(*v2);
  if (v4)
  {
    Hasher._combine(_:)(1u);
    v5 = *(void (**)(uint64_t))(*(_QWORD *)v4 + 136);
    swift_retain();
    v5(a1);
    swift_release();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
}

Swift::Int Text.LineStyle.hashValue.getter()
{
  Swift::UInt *v0;
  Swift::UInt v1;
  Swift::UInt v2;
  void (*v3)(_BYTE *);
  _BYTE v5[72];

  v2 = *v0;
  v1 = v0[1];
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v2);
  if (v1)
  {
    Hasher._combine(_:)(1u);
    v3 = *(void (**)(_BYTE *))(*(_QWORD *)v1 + 136);
    swift_retain();
    v3(v5);
    swift_release();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Text.LineStyle()
{
  Swift::UInt *v0;
  Swift::UInt v1;
  Swift::UInt v2;
  void (*v3)(_BYTE *);
  _BYTE v5[72];

  v2 = *v0;
  v1 = v0[1];
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v2);
  if (v1)
  {
    Hasher._combine(_:)(1u);
    v3 = *(void (**)(_BYTE *))(*(_QWORD *)v1 + 136);
    swift_retain();
    v3(v5);
    swift_release();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance Text.LineStyle(uint64_t a1)
{
  Swift::UInt *v1;
  Swift::UInt *v2;
  Swift::UInt v4;
  void (*v5)(uint64_t);

  v2 = v1;
  v4 = v2[1];
  Hasher._combine(_:)(*v2);
  if (v4)
  {
    Hasher._combine(_:)(1u);
    v5 = *(void (**)(uint64_t))(*(_QWORD *)v4 + 136);
    swift_retain();
    v5(a1);
    swift_release();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Text.LineStyle()
{
  Swift::UInt *v0;
  Swift::UInt v1;
  void (*v2)(_BYTE *);
  _BYTE v4[72];

  Hasher.init(_seed:)();
  v1 = v0[1];
  Hasher._combine(_:)(*v0);
  if (v1)
  {
    Hasher._combine(_:)(1u);
    v2 = *(void (**)(_BYTE *))(*(_QWORD *)v1 + 136);
    swift_retain();
    v2(v4);
    swift_release();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  return Hasher._finalize()();
}

uint64_t EnvironmentValues.underlineStyle.getter()
{
  return EnvironmentValues.underlineStyle.getter((void (*)(uint64_t))specialized PropertyList.Tracker.value<A>(_:for:), (void (*)(uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.getter);
}

uint64_t View.underline(_:pattern:color:)(char a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return View.underline(_:pattern:color:)(a1, a2, a3, a4, a5);
}

{
  uint64_t v9;
  uint64_t *KeyPath;
  uint64_t v11;
  _QWORD v13[2];

  v9 = *a2;
  KeyPath = (uint64_t *)swift_getKeyPath();
  if ((a1 & 1) != 0)
  {
    v11 = v9 | 1;
    swift_retain();
  }
  else
  {
    v11 = 0;
    a3 = 1;
  }
  v13[0] = v11;
  v13[1] = a3;
  View.environment<A>(_:_:)(KeyPath, (uint64_t)v13, a4, a5);
  swift_release();
  return outlined consume of Text.LineStyle?(v11, a3);
}

uint64_t View.strikethrough(_:pattern:color:)(char a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return View.underline(_:pattern:color:)(a1, a2, a3, a4, a5);
}

uint64_t EnvironmentValues.strikethroughStyle.getter()
{
  return EnvironmentValues.underlineStyle.getter((void (*)(uint64_t))specialized PropertyList.Tracker.value<A>(_:for:), (void (*)(uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.getter);
}

uint64_t EnvironmentValues.underlineStyle.getter(void (*a1)(uint64_t), void (*a2)(uint64_t, uint64_t *))
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v8;

  v3 = *v2;
  if (v2[1])
  {
    swift_retain_n();
    swift_retain_n();
    a1(v3);
    swift_release_n();
  }
  else
  {
    v6 = swift_retain_n();
    a2(v6, &v8);
  }
  return swift_release_n();
}

double key path getter for EnvironmentValues.underlineStyle : EnvironmentValues@<D0>(uint64_t *a1@<X0>, void (*a2)(__int128 *__return_ptr, uint64_t)@<X3>, void (*a3)(__int128 *__return_ptr, uint64_t, uint64_t *)@<X4>, _OWORD *a4@<X8>)
{
  uint64_t v5;
  uint64_t v8;
  double result;
  uint64_t v10;
  __int128 v11;

  v5 = *a1;
  if (a1[1])
  {
    swift_retain_n();
    swift_retain_n();
    a2(&v11, v5);
    swift_release_n();
  }
  else
  {
    v8 = swift_retain_n();
    a3(&v11, v8, &v10);
  }
  swift_release_n();
  result = *(double *)&v11;
  *a4 = v11;
  return result;
}

uint64_t key path setter for EnvironmentValues.underlineStyle : EnvironmentValues(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t, uint64_t))
{
  uint64_t v6;
  uint64_t v7;

  v6 = *a1;
  v7 = a1[1];
  outlined copy of Text.LineStyle?(*a1, v7);
  a5(v6, v7);
  return outlined consume of Text.LineStyle?(v6, v7);
}

double protocol witness for static EnvironmentKey.defaultValue.getter in conformance UnderlineStyleKey@<D0>(_OWORD *a1@<X8>)
{
  double result;

  result = 0.0;
  *a1 = xmmword_235260F20;
  return result;
}

uint64_t specialized static Text.LineStyle.== infix(_:_:)(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t);

  if (*a1 == *a2)
  {
    v2 = a1[1];
    v3 = a2[1];
    if (v2)
    {
      if (v3)
      {
        if (v2 == v3)
          return 1;
        v4 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 88);
        swift_retain();
        swift_retain();
        LOBYTE(v4) = v4(v3);
        swift_release();
        swift_release();
        if ((v4 & 1) != 0)
          return 1;
      }
    }
    else if (!v3)
    {
      return 1;
    }
  }
  return 0;
}

double sub_234D3E268@<D0>(uint64_t *a1@<X0>, _OWORD *a2@<X8>)
{
  return key path getter for EnvironmentValues.underlineStyle : EnvironmentValues(a1, (void (*)(__int128 *__return_ptr, uint64_t))specialized PropertyList.Tracker.value<A>(_:for:), (void (*)(__int128 *__return_ptr, uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.getter, a2);
}

uint64_t sub_234D3E28C(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for EnvironmentValues.underlineStyle : EnvironmentValues(a1, a2, a3, a4, (void (*)(uint64_t, uint64_t))specialized EnvironmentValues.subscript.setter);
}

double sub_234D3E2A8@<D0>(uint64_t *a1@<X0>, _OWORD *a2@<X8>)
{
  return key path getter for EnvironmentValues.underlineStyle : EnvironmentValues(a1, (void (*)(__int128 *__return_ptr, uint64_t))specialized PropertyList.Tracker.value<A>(_:for:), (void (*)(__int128 *__return_ptr, uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.getter, a2);
}

uint64_t sub_234D3E2CC(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for EnvironmentValues.underlineStyle : EnvironmentValues(a1, a2, a3, a4, (void (*)(uint64_t, uint64_t))specialized EnvironmentValues.subscript.setter);
}

unint64_t lazy protocol witness table accessor for type Text.LineStyle and conformance Text.LineStyle()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Text.LineStyle and conformance Text.LineStyle;
  if (!lazy protocol witness table cache variable for type Text.LineStyle and conformance Text.LineStyle)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Text.LineStyle, &type metadata for Text.LineStyle);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.LineStyle and conformance Text.LineStyle);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Text.LineStyle and conformance Text.LineStyle;
  if (!lazy protocol witness table cache variable for type Text.LineStyle and conformance Text.LineStyle)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Text.LineStyle, &type metadata for Text.LineStyle);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.LineStyle and conformance Text.LineStyle);
  }
  return result;
}

_QWORD *sub_234D3E330@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *result;
  return result;
}

_QWORD *sub_234D3E33C(_QWORD *result, _QWORD *a2)
{
  *a2 = *result;
  return result;
}

_QWORD *assignWithCopy for Text.LineStyle(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  return a1;
}

_QWORD *assignWithTake for Text.LineStyle(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_release();
  return a1;
}

ValueMetadata *type metadata accessor for Text.LineStyle()
{
  return &type metadata for Text.LineStyle;
}

ValueMetadata *type metadata accessor for Text.LineStyle.Pattern()
{
  return &type metadata for Text.LineStyle.Pattern;
}

ValueMetadata *type metadata accessor for Text.LineStyle.Resolved()
{
  return &type metadata for Text.LineStyle.Resolved;
}

uint64_t sub_234D3E3E8(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[2];

  v1 = *a1;
  v2 = a1[1];
  type metadata accessor for _EnvironmentKeyWritingModifier<Text.LineStyle?>(255);
  v5 = type metadata accessor for ModifiedContent(255, v1, v3, v4);
  v7[0] = v2;
  v7[1] = &protocol witness table for _EnvironmentKeyWritingModifier<A>;
  return MEMORY[0x23B7C9C04]("I{:\x1B̧\t", v5, v7);
}

void type metadata accessor for _EnvironmentKeyWritingModifier<Text.LineStyle?>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  if (!lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Text.LineStyle?>)
  {
    type metadata accessor for Text.LineStyle?();
    v5 = type metadata accessor for _EnvironmentKeyWritingModifier(a1, v2, v3, v4);
    if (!v6)
      atomic_store(v5, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Text.LineStyle?>);
  }
}

void type metadata accessor for Text.LineStyle?()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for Text.LineStyle?)
  {
    v0 = type metadata accessor for Optional();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Text.LineStyle?);
  }
}

ValueMetadata *type metadata accessor for UnderlineStyleKey()
{
  return &type metadata for UnderlineStyleKey;
}

ValueMetadata *type metadata accessor for StrikethroughStyleKey()
{
  return &type metadata for StrikethroughStyleKey;
}

ValueMetadata *type metadata accessor for ShakeHorizontalTextEffect()
{
  return &type metadata for ShakeHorizontalTextEffect;
}

unint64_t lazy protocol witness table accessor for type ShakeHorizontalTextEffect.LayoutState and conformance ShakeHorizontalTextEffect.LayoutState()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ShakeHorizontalTextEffect.LayoutState and conformance ShakeHorizontalTextEffect.LayoutState;
  if (!lazy protocol witness table cache variable for type ShakeHorizontalTextEffect.LayoutState and conformance ShakeHorizontalTextEffect.LayoutState)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ShakeHorizontalTextEffect.LayoutState, &type metadata for ShakeHorizontalTextEffect.LayoutState);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ShakeHorizontalTextEffect.LayoutState and conformance ShakeHorizontalTextEffect.LayoutState);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ShakeHorizontalTextEffect.LayoutState and conformance ShakeHorizontalTextEffect.LayoutState;
  if (!lazy protocol witness table cache variable for type ShakeHorizontalTextEffect.LayoutState and conformance ShakeHorizontalTextEffect.LayoutState)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ShakeHorizontalTextEffect.LayoutState, &type metadata for ShakeHorizontalTextEffect.LayoutState);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ShakeHorizontalTextEffect.LayoutState and conformance ShakeHorizontalTextEffect.LayoutState);
  }
  return result;
}

_UNKNOWN **associated type witness table accessor for Text.Effect.Base.Timing : Text.Effect.DurationProvider in ShakeHorizontalTextEffect()
{
  return &protocol witness table for Text.Effect.Timing;
}

id closure #1 in ShakeHorizontalTextEffect.configuration(_:)(void *a1, uint64_t a2)
{
  uint64_t v4;
  id v5;
  uint64_t v6;

  type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for AnyDynamicFontModifier<WeightDeltaModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type WeightDeltaModifier and conformance WeightDeltaModifier, (uint64_t)&type metadata for WeightDeltaModifier, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnyDynamicFontModifier);
  v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_23529C550;
  *(_QWORD *)(v4 + 32) = 0x408F400000000000;
  v5 = a1;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v6 = swift_retain();
  MEMORY[0x23B7C61A8](v6);
  if (*(_QWORD *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  swift_release();
  return v5;
}

uint64_t closure #2 in ShakeHorizontalTextEffect.configuration(_:)(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  double v5;
  Swift::UInt64 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  CFIndex v11;
  double v12;
  double Size;
  uint64_t v14;
  void *v15;
  id v16;
  id v17;
  const __CTLine *v18;
  void *v19;
  const __CTFont *v20;
  unint64_t v21;
  uint64_t *v22;
  double v23;
  double v24;
  uint64_t v25;
  unint64_t v26;
  char v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  BOOL v34;
  Swift::UInt64 v35;
  uint64_t v36;
  uint64_t v37;
  double MidX;
  uint64_t v39;
  uint64_t v40;
  __n128 v41;
  uint64_t v42;
  __n128 v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t inited;
  int64_t v47;
  _QWORD *v48;
  _QWORD *v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t result;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD v62[3];
  __n128 v63[5];
  uint64_t v64;
  _QWORD v65[3];
  double v66;
  double v67;
  _QWORD v68[8];
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  CGRect v72;

  v58 = *(_QWORD *)(a1 + 24);
  v59 = *(_QWORD *)(a1 + 16);
  v56 = *(_QWORD *)(a1 + 40);
  v57 = *(_QWORD *)(a1 + 32);
  outlined retain of Text.Effect.DrawableFragment<SmallTextEffect>((uint64_t)a2);
  v5 = 0.0;
  specialized Text.Effect.PathInterpolator.init<A>(_:quantization:default:options:body:)((uint64_t)a2, a3, 1, (uint64_t)a2, v63, 0.0);
  v6 = a2[1];
  v61 = *a2;
  v8 = a2[2];
  v7 = a2[3];
  v9 = a2[5];
  v68[0] = v7;
  v11 = *(_QWORD *)(v7 + 16);
  v10 = *(_QWORD *)(v7 + 24);
  swift_retain_n();
  v60 = v9;
  if (v11 != v10)
  {
    v12 = 0.0;
    do
    {
      v15 = *(void **)(v7 + 32);
      v14 = *(_QWORD *)(v7 + 40);
      if ((*(_BYTE *)(v7 + 48) & 1) != 0)
      {
        outlined copy of Text.Layout.Line.Line(*(void **)(v7 + 32), *(_QWORD *)(v7 + 40), 1);
        v16 = (id)_NSTextLineFragmentGetCTLine(v15);
        if (!v16)
          goto LABEL_65;
        v17 = v16;
        outlined consume of Text.Layout.Line.Line(v15, v14, 1);
        v15 = v17;
      }
      else
      {
        outlined copy of Text.Layout.Line.Line(*(void **)(v7 + 32), *(_QWORD *)(v7 + 40), 0);
        outlined copy of Text.Layout.Line.Line(v15, v14, 0);

        swift_release();
      }
      if (v11 < *(_QWORD *)(v7 + 16) || v11 >= *(_QWORD *)(v7 + 24))
        goto LABEL_60;
      swift_retain();
      v18 = v15;
      v19 = (id)_CTLineGetRunAtIndex(v18, v11);
      v20 = (const __CTFont *)(id)CTRunGetFont();
      swift_release();

      if (v20)
      {
        Size = CTFontGetSize(v20);
        swift_release();

        v18 = v20;
      }
      else
      {
        swift_release();
        Size = 0.0;
      }
      ++v11;

      if (v12 <= Size)
        v12 = Size;
    }
    while (v11 != *(_QWORD *)(v7 + 24));
    v5 = v12 * 0.25;
    v9 = v60;
  }
  outlined release of ViewTransform((uint64_t)v68);
  outlined release of ViewTransform((uint64_t)v68);
  if (v9 < 0)
    goto LABEL_61;
  if (v9)
  {
    v21 = 0;
    v22 = (uint64_t *)(v61 + 48);
    v23 = INFINITY;
    v24 = -INFINITY;
    do
    {
      if (v21 == v9)
        goto LABEL_55;
      swift_beginAccess();
      v25 = *v22;
      if (!*(_QWORD *)(*v22 + 16))
        goto LABEL_67;
      swift_retain_n();
      swift_retain();
      v26 = specialized __RawDictionaryStorage.find<A>(_:)(v6, v8);
      if ((v27 & 1) == 0)
      {
        swift_release();
        goto LABEL_69;
      }
      v28 = *(_QWORD *)(*(_QWORD *)(v25 + 56) + 16 * v26);
      swift_endAccess();
      swift_bridgeObjectRetain();
      swift_release();
      v29 = *(_QWORD *)(v28 + 16);
      if (v21 >= v29)
        goto LABEL_56;
      v30 = *(_QWORD *)(v28 + 32 + 8 * v21);
      if (v21)
      {
        v31 = 0;
        v32 = 0;
        while (1)
        {
          v33 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v28 + 32 + 8 * v31) + 96) + 16);
          v34 = __OFADD__(v32, v33);
          v32 += v33;
          if (v34)
            break;
          if (v21 == ++v31)
            goto LABEL_30;
        }
        __break(1u);
        goto LABEL_53;
      }
      v32 = 0;
LABEL_30:
      swift_retain();
      swift_bridgeObjectRelease();
      v68[1] = v61;
      v68[2] = v6;
      v35 = v6;
      v68[3] = v8;
      v68[4] = v30;
      v68[5] = v21;
      v68[6] = v29;
      v68[7] = v32;
      v36 = *(_QWORD *)(*(_QWORD *)(v30 + 96) + 16);
      v37 = v32 + v36;
      if (__OFADD__(v32, v36))
        goto LABEL_57;
      if (v37 < v32)
        goto LABEL_58;
      if (__OFSUB__(v37, v32))
        goto LABEL_59;
      if (v37 != v32)
      {
        while (v32 < v37)
        {
          Text.Effect.BaseFragment.typographicBounds(for:)(v32, v32 + 1, (uint64_t)v65);
          *(_QWORD *)&v72.origin.x = v65[0];
          *(_QWORD *)&v72.size.width = v65[2];
          v72.origin.y = *(double *)&v65[1] - v66;
          v72.size.height = v66 + v67;
          MidX = CGRectGetMidX(v72);
          if (__OFSUB__(v37, v32 + 1))
            goto LABEL_54;
          if (v24 <= MidX)
            v24 = MidX;
          if (MidX < v23)
            v23 = MidX;
          ++v32;
          if (!--v36)
            goto LABEL_19;
        }
LABEL_53:
        __break(1u);
LABEL_54:
        __break(1u);
LABEL_55:
        __break(1u);
LABEL_56:
        __break(1u);
LABEL_57:
        __break(1u);
LABEL_58:
        __break(1u);
LABEL_59:
        __break(1u);
LABEL_60:
        __break(1u);
LABEL_61:
        __break(1u);
LABEL_62:
        __break(1u);
LABEL_63:
        __break(1u);
LABEL_64:
        __break(1u);
LABEL_65:
        __break(1u);
        goto LABEL_66;
      }
LABEL_19:
      swift_release();
      ++v21;
      swift_release();
      swift_release();
      v9 = v60;
      v6 = v35;
    }
    while (v60 != v21);
    if (v23 > v24)
      goto LABEL_66;
    v69 = v59;
    v70 = v58;
    v71 = v57;
    v62[0] = v56;
    v39 = swift_allocObject();
    *(_OWORD *)(v39 + 16) = *(_OWORD *)a1;
    *(_QWORD *)(v39 + 32) = v59;
    *(_QWORD *)(v39 + 40) = v58;
    *(_QWORD *)(v39 + 48) = v57;
    *(_QWORD *)(v39 + 56) = v56;
    *(double *)(v39 + 64) = v5;
    *(double *)(v39 + 72) = v24 - v23;
    *(double *)(v39 + 80) = v23;
    *(double *)(v39 + 88) = v24;
    v40 = swift_allocObject();
    v41 = v63[3];
    *(__n128 *)(v40 + 48) = v63[2];
    *(__n128 *)(v40 + 64) = v41;
    *(__n128 *)(v40 + 80) = v63[4];
    v42 = v64;
    v43 = v63[1];
    *(__n128 *)(v40 + 16) = v63[0];
    *(__n128 *)(v40 + 32) = v43;
    *(_QWORD *)(v40 + 96) = v42;
    *(_QWORD *)(v40 + 104) = partial apply for closure #2 in closure #2 in ShakeHorizontalTextEffect.configuration(_:);
    *(_QWORD *)(v40 + 112) = v39;
    type metadata accessor for _ContiguousArrayStorage<Text.Effect.Drawable.Fragment>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<Text.Effect.Drawable.Fragment>);
    v44 = swift_allocObject();
    *(_OWORD *)(v44 + 16) = xmmword_23527E860;
    *(_QWORD *)(v44 + 32) = partial apply for closure #1 in Text.Effect.DrawableFragment.transform(with:transform:);
    v45 = v44 + 32;
    *(_QWORD *)(v44 + 40) = v40;
    type metadata accessor for _ContiguousArrayStorage<Text.Effect.Drawable.Fragment>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<Text.Effect.Drawable>);
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_23527E860;
    *(_QWORD *)(inited + 32) = v44;
    v47 = *(_QWORD *)(v44 + 16);
    outlined retain of LinearGradient((uint64_t)&v69);
    outlined retain of LinearGradient((uint64_t)&v70);
    outlined retain of LinearGradient((uint64_t)&v71);
    outlined retain of LinearGradient((uint64_t)v62);
    outlined retain of Text.Effect.PathInterpolator((uint64_t)v63);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v48 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v47, 1, MEMORY[0x24BEE4AF8]);
    v49 = v48;
    if (!*(_QWORD *)(v44 + 16))
    {
      if (v47)
        goto LABEL_62;
      goto LABEL_51;
    }
    v50 = v48[2];
    if ((v48[3] >> 1) - v50 < v47)
      goto LABEL_63;
    v51 = (unint64_t)&v48[2 * v50 + 4];
    if (v45 >= v51 + 16 * v47 || v51 >= v45 + 16 * v47)
    {
      swift_arrayInitWithCopy();
      if (v47)
      {
        v52 = v49[2];
        v34 = __OFADD__(v52, v47);
        v53 = v52 + v47;
        if (v34)
          goto LABEL_64;
        v49[2] = v53;
      }
LABEL_51:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_setDeallocating();
      swift_arrayDestroy();
      outlined release of Text.Effect.PathInterpolator((uint64_t)v63);
      return (uint64_t)v49;
    }
  }
  else
  {
LABEL_66:
    __break(1u);
LABEL_67:
    swift_retain();
    swift_retain();
LABEL_69:
    swift_endAccess();
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t closure #1 in closure #2 in ShakeHorizontalTextEffect.configuration(_:)(_QWORD *a1, uint64_t a2)
{
  Swift::UInt64 v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v12;
  _QWORD v13[7];
  _QWORD v14[7];

  v3 = *(_QWORD *)(a2 + 8);
  v4 = *(_QWORD *)(a2 + 32);
  type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for Text.Effect.ConcreteLayoutState<ShakeHorizontalTextEffect>, (uint64_t (*)(void))lazy protocol witness table accessor for type ShakeHorizontalTextEffect and conformance ShakeHorizontalTextEffect, (uint64_t)&type metadata for ShakeHorizontalTextEffect, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for Text.Effect.ConcreteLayoutState);
  v5 = swift_allocObject();
  *(_BYTE *)(v5 + 16) = 0;
  v6 = swift_retain();
  specialized Text.Effect.BaseFragment.init(keyframes:key:fragment:)(v6, v3, v5, v4, v13);
  outlined retain of Text.Effect.DrawableFragment<SmallTextEffect>((uint64_t)v13);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v14[0] = *a1;
  *a1 = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v13, isUniquelyReferenced_nonNull_native, 0.0);
  *a1 = v14[0];
  swift_bridgeObjectRelease();
  outlined release of Text.Effect.BaseFragment((uint64_t)v13);
  v8 = swift_allocObject();
  *(_BYTE *)(v8 + 16) = 1;
  v9 = swift_retain();
  specialized Text.Effect.BaseFragment.init(keyframes:key:fragment:)(v9, v3, v8, v4, v14);
  outlined retain of Text.Effect.DrawableFragment<SmallTextEffect>((uint64_t)v14);
  v10 = swift_isUniquelyReferenced_nonNull_native();
  v12 = *a1;
  *a1 = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v14, v10, 1.0);
  *a1 = v12;
  swift_bridgeObjectRelease();
  return outlined release of Text.Effect.BaseFragment((uint64_t)v14);
}

void closure #2 in closure #2 in ShakeHorizontalTextEffect.configuration(_:)(unint64_t a1, uint64_t a2, uint64_t a3, double a4, double a5, double a6)
{
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double MidX;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  __int128 v40;
  __int128 v41;
  uint64_t v42;
  _BYTE v43[80];
  _QWORD v44[2];
  __int128 v45;
  __int128 v46;
  __int128 v47;
  uint64_t v48;
  char v49;

  v11 = *(double *)(a2 + 64);
  v12 = *(double *)(a2 + 40) - *(double *)(a2 + 32);
  if (v12 >= 0.0)
  {
    v15 = v12 / v11;
    v13 = 0.0;
    if (v15 >= 0.0)
    {
      if (v15 <= 1.0)
        v13 = v15;
      else
        v13 = 1.0;
    }
  }
  else
  {
    v13 = 0.0;
    v14 = 0.0 / v11;
    if (v14 >= 0.0)
    {
      v13 = v14;
      if (v14 > 1.0)
        v13 = 1.0;
    }
  }
  if ((a1 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_32;
  }
  if (*(_QWORD *)(*(_QWORD *)(a3 + 16) + 16) <= a1)
  {
LABEL_32:
    __break(1u);
    goto LABEL_33;
  }
  v16 = *(_QWORD *)(a3 + 32);
  if (*(_QWORD *)(v16 + 16) <= a1)
  {
LABEL_33:
    __break(1u);
LABEL_34:
    __break(1u);
    return;
  }
  v17 = v16 + 40 * a1;
  v40 = *(_OWORD *)(v17 + 48);
  v18 = *(_QWORD *)(v17 + 64);
  v19 = 0.0;
  if (v13 < 1.0)
  {
    v20 = sin(v13 * -6.0 * 3.0);
    v19 = pow(2.71828183, -v13) * v20;
  }
  if (__OFSUB__(*(_QWORD *)a2, a1))
    goto LABEL_34;
  v21 = *(double *)(a2 + 232);
  v23 = *(double *)(a2 + 216);
  v22 = *(double *)(a2 + 224);
  v24 = *(double *)(a2 + 208);
  v25 = 0.0;
  if (*(_QWORD *)a2 == a1)
  {
    v26 = *(double *)(a2 + 240);
  }
  else
  {
    v24 = 0.0;
    v23 = 0.0;
    v22 = 0.0;
    v21 = 0.0;
    v26 = 0.0;
  }
  v27 = v23 - v21;
  v28 = v26 + v21;
  MidX = CGRectGetMidX(*(CGRect *)&v24);
  v30 = 0.5;
  if (a5 > 0.0)
    v30 = (MidX - a6) / a5;
  if (v30 < 0.0)
    v31 = 0.0;
  else
    v31 = v30;
  if (v31 <= 1.0)
    v32 = v31;
  else
    v32 = 1.0;
  if (v13 >= 1.0 || (v33 = sin(v13 * -6.0 * 3.0), v25 = pow(2.71828183, -v13) * v33, v25 <= 0.0))
    v34 = v32 * fabs(v25);
  else
    v34 = (1.0 - v32) * v25;
  *(double *)v44 = v34;
  *(double *)&v44[1] = v19 * a4;
  v45 = 0u;
  v46 = 0u;
  __asm { FMOV            V0.2D, #1.0 }
  v47 = _Q0;
  v48 = 0x3FF0000000000000;
  v49 = 0;
  v41 = v40;
  v42 = v18;
  Text.Effect.TransformContext.record(target:for:spring:)((uint64_t)v44, *(double *)&a1, (double *)&v41, (uint64_t)v43);
  Text.Effect.TransformContext.draw(state:keyPath:)((uint64_t)v43, 0, 0, 0, 1);
}

uint64_t protocol witness for static TextEffect.staticUnitProgress.getter in conformance ShakeHorizontalTextEffect()
{
  return 0x3FE8000000000000;
}

uint64_t protocol witness for static TextEffect.name.getter in conformance ShakeHorizontalTextEffect()
{
  return 0x726F48656B616873;
}

void *protocol witness for static Text.Effect.Base.states.getter in conformance ShakeHorizontalTextEffect()
{
  return &outlined read-only object #0 of protocol witness for static Text.Effect.Base.states.getter in conformance ShakeHorizontalTextEffect;
}

double protocol witness for Text.Effect.Base.timing(for:from:to:duration:) in conformance ShakeHorizontalTextEffect@<D0>(uint64_t a1@<X0>, double a2@<X5>, char a3@<W6>, _OWORD *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  __int128 v11;
  double v12;
  __int128 v13;
  double result;
  _OWORD v15[2];
  __int128 v16;
  __int128 v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  char v30;
  __int128 v31;
  char v32;
  char v33;
  char v34;
  char v35;

  type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for Text.Effect.DrawableContent<ShakeHorizontalTextEffect>, (uint64_t (*)(void))lazy protocol witness table accessor for type ShakeHorizontalTextEffect and conformance ShakeHorizontalTextEffect, (uint64_t)&type metadata for ShakeHorizontalTextEffect, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for Text.Effect.DrawableContent);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)v15 - v9;
  v35 = 1;
  v34 = 1;
  v33 = 0;
  v17 = xmmword_23529C560;
  v18 = 1;
  v19 = 0;
  v20 = 0;
  v21 = 2;
  v23 = 0;
  v24 = 0;
  v22 = 0;
  v25 = 0;
  v26 = 0;
  v27 = 0;
  v28 = 1;
  v29 = MEMORY[0x24BEE4AF8];
  v30 = 0;
  v31 = xmmword_235281F60;
  v32 = 0;
  if (one-time initialization token for spring != -1)
    swift_once();
  v11 = static ShakeHorizontalTextEffect.spring;
  v12 = *(double *)&qword_25622D170;
  outlined init with copy of Text.Effect.DrawableContent<ShakeHorizontalTextEffect>(a1, (uint64_t)v10);
  specialized Text.Effect.Timing.init<A>(configuration:duration:spring:content:)((uint64_t)&v17, a2, a3 & 1, (uint64_t)v10, v15, *(double *)&v11, *((double *)&v11 + 1), v12);
  v13 = v15[1];
  *a4 = v15[0];
  a4[1] = v13;
  result = *(double *)&v16;
  a4[2] = v16;
  return result;
}

unint64_t instantiation function for generic protocol witness table for ShakeHorizontalTextEffect(uint64_t a1)
{
  unint64_t result;

  *(_QWORD *)(a1 + 8) = lazy protocol witness table accessor for type ShakeHorizontalTextEffect and conformance ShakeHorizontalTextEffect();
  result = lazy protocol witness table accessor for type ShakeHorizontalTextEffect and conformance ShakeHorizontalTextEffect();
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

_QWORD *specialized ShakeHorizontalTextEffect.configuration(_:)()
{
  _QWORD *v0;
  unint64_t v1;
  unint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  _QWORD *v8;

  v0 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 1, MEMORY[0x24BEE4AF8]);
  v2 = v0[2];
  v1 = v0[3];
  if (v2 >= v1 >> 1)
    v0 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v1 > 1), v2 + 1, 1, v0);
  v0[2] = v2 + 1;
  v3 = &v0[4 * v2];
  v3[4] = 1;
  v3[5] = closure #1 in ShakeHorizontalTextEffect.configuration(_:);
  v3[6] = 0;
  *((_BYTE *)v3 + 56) = 1;
  v4 = swift_allocObject();
  *(_QWORD *)(v4 + 16) = partial apply for closure #2 in ShakeHorizontalTextEffect.configuration(_:);
  *(_QWORD *)(v4 + 24) = 0;
  v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 1, MEMORY[0x24BEE4AF8]);
  v7 = v5[2];
  v6 = v5[3];
  if (v7 >= v6 >> 1)
    v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v6 > 1), v7 + 1, 1, v5);
  v5[2] = v7 + 1;
  v8 = &v5[2 * v7];
  v8[4] = partial apply for specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A.Text.Effect.Base.Timing, @guaranteed Text.Effect.DrawableFragment<A>, @unowned Text.Effect.QuantizationContext) -> (@owned Text.Effect.Drawable);
  v8[5] = v4;
  return v0;
}

uint64_t sub_234D3F4D8()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_234D3F4FC()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

void partial apply for closure #2 in closure #2 in ShakeHorizontalTextEffect.configuration(_:)(unint64_t a1, uint64_t a2)
{
  double *v2;

  closure #2 in closure #2 in ShakeHorizontalTextEffect.configuration(_:)(a1, a2, (uint64_t)(v2 + 2), v2[8], v2[9], v2[10]);
}

uint64_t sub_234D3F548()
{
  uint64_t v0;

  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(v0 + 96) >= 3uLL)
    swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocObject();
}

unint64_t lazy protocol witness table accessor for type WeightDeltaModifier and conformance WeightDeltaModifier()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type WeightDeltaModifier and conformance WeightDeltaModifier;
  if (!lazy protocol witness table cache variable for type WeightDeltaModifier and conformance WeightDeltaModifier)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for WeightDeltaModifier, &type metadata for WeightDeltaModifier);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WeightDeltaModifier and conformance WeightDeltaModifier);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type WeightDeltaModifier and conformance WeightDeltaModifier;
  if (!lazy protocol witness table cache variable for type WeightDeltaModifier and conformance WeightDeltaModifier)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for WeightDeltaModifier, &type metadata for WeightDeltaModifier);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WeightDeltaModifier and conformance WeightDeltaModifier);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type WeightDeltaModifier and conformance WeightDeltaModifier;
  if (!lazy protocol witness table cache variable for type WeightDeltaModifier and conformance WeightDeltaModifier)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for WeightDeltaModifier, &type metadata for WeightDeltaModifier);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WeightDeltaModifier and conformance WeightDeltaModifier);
  }
  return result;
}

uint64_t outlined init with copy of Text.Effect.DrawableContent<ShakeHorizontalTextEffect>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for Text.Effect.DrawableContent<ShakeHorizontalTextEffect>, (uint64_t (*)(void))lazy protocol witness table accessor for type ShakeHorizontalTextEffect and conformance ShakeHorizontalTextEffect, (uint64_t)&type metadata for ShakeHorizontalTextEffect, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for Text.Effect.DrawableContent);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t storeEnumTagSinglePayload for ShakeHorizontalTextEffect.LayoutState(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_234D3F690 + 4 * byte_23529C585[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_234D3F6C4 + 4 * byte_23529C580[v4]))();
}

uint64_t sub_234D3F6C4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_234D3F6CC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x234D3F6D4);
  return result;
}

uint64_t sub_234D3F6E0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x234D3F6E8);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_234D3F6EC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_234D3F6F4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ShakeHorizontalTextEffect.LayoutState()
{
  return &type metadata for ShakeHorizontalTextEffect.LayoutState;
}

uint64_t _GraphValue.subscript.getter@<X0>(void (*a1)(uint64_t)@<X0>, uint64_t a2@<X3>, _DWORD *a3@<X8>)
{
  uint64_t result;

  if (*(_QWORD *)(*(_QWORD *)(a2 - 8) + 64))
    a1(1);
  result = AGGraphCreateOffsetAttribute2();
  *a3 = result;
  return result;
}

uint64_t _GraphValue.init(_:)@<X0>(uint64_t result@<X0>, _DWORD *a2@<X8>)
{
  *a2 = result;
  return result;
}

uint64_t _GraphValue.unsafeBitCast<A>(to:)@<X0>(_DWORD *a1@<X8>)
{
  uint64_t result;

  result = Attribute.unsafeBitCast<A>(to:)();
  *a1 = result;
  return result;
}

uint64_t _GraphValue.init<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _DWORD *a5@<X8>)
{
  return _GraphValue.init<A>(_:)(a1, a2, a3, a4, (uint64_t)partial apply for closure #1 in Attribute.init<A>(_:), a5);
}

{
  return _GraphValue.init<A>(_:)(a1, a2, a3, a4, (uint64_t)partial apply for closure #1 in Attribute.init<A>(_:), a5);
}

uint64_t _GraphValue.subscript.getter@<X0>(_QWORD *a1@<X0>, _DWORD *a2@<X8>)
{
  int *v2;
  uint64_t v5;
  int v6;
  uint64_t v7;
  char v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  _QWORD v12[3];
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  int v16;
  _QWORD *v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  v5 = *a1;
  v6 = *v2;
  v7 = dispatch thunk of AnyKeyPath._storedInlineOffset.getter();
  if ((v8 & 1) != 0)
  {
    v16 = v6;
    v17 = a1;
    MEMORY[0x24BDAC7A8](v7);
    v12[2] = *(_QWORD *)(*MEMORY[0x24BEE46A8] + v5 + 8);
    v13 = type metadata accessor for Focus();
    v14 = MEMORY[0x23B7C9C04](MEMORY[0x24BE09660], v13);
    v10 = type metadata accessor for Attribute();
    swift_retain();
    _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v16, (uint64_t)closure #1 in Attribute.init<A>(_:)partial apply, (uint64_t)v12, v13, MEMORY[0x24BEE4078], v10, MEMORY[0x24BEE40A8], v11);
    swift_release();
    result = v15;
  }
  else
  {
    result = AGGraphCreateOffsetAttribute2();
  }
  *a2 = result;
  return result;
}

uint64_t _GraphValue.value.getter()
{
  unsigned int *v0;

  return *v0;
}

uint64_t _GraphValue.value.setter(uint64_t result)
{
  _DWORD *v1;

  *v1 = result;
  return result;
}

uint64_t (*_GraphValue.value.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t _GraphValue.init<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, _DWORD *a6@<X8>)
{
  uint64_t v12;
  double v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(char *, uint64_t);
  uint64_t result;
  _DWORD v20[4];
  _BYTE v21[16];
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v12 = *(_QWORD *)(a3 - 8);
  v13 = MEMORY[0x24BDAC7A8](a1);
  v15 = (char *)v20 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, double))(v12 + 16))(v15, a1, v13);
  v22 = a2;
  v23 = a3;
  v24 = a4;
  v16 = type metadata accessor for Attribute();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v15, a5, (uint64_t)v21, a3, MEMORY[0x24BEE4078], v16, MEMORY[0x24BEE40A8], v17);
  v18 = *(void (**)(char *, uint64_t))(v12 + 8);
  v18(v15, a3);
  LODWORD(a4) = v20[3];
  result = ((uint64_t (*)(uint64_t, uint64_t))v18)(a1, a3);
  *a6 = a4;
  return result;
}

void _GraphValue.unsafeCast<A>(to:)(_DWORD *a1@<X8>)
{
  _DWORD *v1;

  *a1 = *v1;
}

BOOL static _GraphValue.== infix(_:_:)(_DWORD *a1, _DWORD *a2)
{
  return *a1 == *a2;
}

ValueMetadata *type metadata accessor for _Graph()
{
  return &type metadata for _Graph;
}

uint64_t type metadata accessor for _GraphValue(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for _GraphValue);
}

uint64_t Transaction.init()()
{
  return 0;
}

uint64_t withTransaction<A>(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v5;
  _QWORD v7[7];
  uint64_t v8;
  uint64_t v9;

  v9 = a1;
  v7[2] = a4;
  v7[3] = a1;
  v7[4] = a2;
  v7[5] = a3;
  v5 = type metadata accessor for Error();
  return _ss20withExtendedLifetimeyq0_x_q0_yq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v9, (uint64_t)partial apply for closure #1 in withTransaction<A>(_:_:), (uint64_t)v7, (uint64_t)&type metadata for Transaction, v5, a4, MEMORY[0x24BEE3F20], (uint64_t)&v8);
}

uint64_t Transaction.subscript.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;

  v5 = type metadata accessor for TransactionPropertyKey(0, a3, a4, a4);
  v6 = MEMORY[0x23B7C9C04](&protocol conformance descriptor for TransactionPropertyKey<A>, v5);
  return PropertyList.subscript.getter(v5, a2, v5, v6);
}

uint64_t Transaction.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t AssociatedTypeWitness;

  specialized Transaction.subscript.setter(a1, a2, a3, a4);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 8))(a1, AssociatedTypeWitness);
}

uint64_t static TransactionKey<>._valuesEqual(_:_:)()
{
  swift_getAssociatedTypeWitness();
  return dispatch thunk of static Equatable.== infix(_:_:)() & 1;
}

{
  swift_getAssociatedTypeWitness();
  return dispatch thunk of static Equatable.== infix(_:_:)() & 1;
}

uint64_t static Transaction.current.getter()
{
  uint64_t result;

  result = _threadTransactionData();
  if (result)
  {
    type metadata accessor for PropertyList.Element();
    swift_unknownObjectRetain();
    return swift_dynamicCastClassUnconditional();
  }
  return result;
}

uint64_t protocol witness for static TransactionKey._valuesEqual(_:_:) in conformance Transaction.AnimationListenerKey()
{
  return protocol witness for static TransactionKey._valuesEqual(_:_:) in conformance Transaction.AnimationListenerKey();
}

{
  type metadata accessor for AnimationListener?();
  return AGCompareValues();
}

uint64_t static TransactionKey._valuesEqual(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  int v9;
  unsigned __int8 v10;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v8 = a2;
  v9 = 3;
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(a1, (uint64_t)partial apply for closure #1 in compareValues<A>(_:_:options:), (uint64_t)&v6, AssociatedTypeWitness, MEMORY[0x24BEE4078], MEMORY[0x24BEE1328], MEMORY[0x24BEE40A8], v4);
  return v10;
}

{
  return static TransactionKey._valuesEqual(_:_:)(a1, a2) & 1;
}

uint64_t static TransactionPropertyKey.defaultValue.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t static TransactionPropertyKey.valuesEqual(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 24))() & 1;
}

uint64_t protocol witness for static PropertyKey.defaultValue.getter in conformance TransactionPropertyKey<A>(uint64_t a1)
{
  return static TransactionPropertyKey.defaultValue.getter(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24));
}

uint64_t protocol witness for static PropertyKey.valuesEqual(_:_:) in conformance TransactionPropertyKey<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return static TransactionPropertyKey.valuesEqual(_:_:)(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24));
}

uint64_t Transaction.plist.setter(uint64_t a1)
{
  _QWORD *v1;
  uint64_t result;

  result = swift_release();
  *v1 = a1;
  return result;
}

uint64_t (*Transaction.plist.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

void Transaction.ID.hash(into:)()
{
  Swift::UInt32 *v0;

  Hasher._combine(_:)(*v0);
}

BOOL static Transaction.ID.== infix(_:_:)(_DWORD *a1, _DWORD *a2)
{
  return *a1 == *a2;
}

Swift::Int Transaction.ID.hashValue.getter()
{
  Swift::UInt32 *v0;
  Swift::UInt32 v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t static Transaction.id.getter@<X0>(_DWORD *a1@<X8>)
{
  uint64_t result;

  result = _threadTransactionID();
  *a1 = result;
  return result;
}

uint64_t static Transaction._core_barrier()()
{
  return _threadTransactionID();
}

void (*Transaction.subscript.modify(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4))(uint64_t **a1, char a2)
{
  uint64_t *v4;
  _QWORD *v9;
  uint64_t AssociatedTypeWitness;
  uint64_t v11;
  size_t v12;
  void *v13;

  v9 = malloc(0x40uLL);
  *a1 = v9;
  v9[2] = a4;
  v9[3] = v4;
  *v9 = a2;
  v9[1] = a3;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v9[4] = AssociatedTypeWitness;
  v11 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v9[5] = v11;
  v12 = *(_QWORD *)(v11 + 64);
  v9[6] = malloc(v12);
  v13 = malloc(v12);
  v9[7] = v13;
  Transaction.subscript.getter((uint64_t)v13, *v4, a3, a4);
  return Transaction.subscript.modify;
}

void Transaction.subscript.modify(uint64_t **a1, char a2)
{
  uint64_t *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void *, uint64_t);

  v2 = *a1;
  v3 = (void *)(*a1)[6];
  v4 = (void *)(*a1)[7];
  v5 = (*a1)[4];
  v6 = (*a1)[5];
  v7 = (*a1)[2];
  v9 = **a1;
  v8 = (*a1)[1];
  if ((a2 & 1) != 0)
  {
    (*(void (**)(uint64_t, void *, uint64_t))(v6 + 16))((*a1)[6], v4, v5);
    specialized Transaction.subscript.setter((uint64_t)v3, v9, v8, v7);
    v10 = *(void (**)(void *, uint64_t))(v6 + 8);
    v10(v3, v5);
  }
  else
  {
    specialized Transaction.subscript.setter((*a1)[7], v9, v8, v7);
    v10 = *(void (**)(void *, uint64_t))(v6 + 8);
  }
  v10(v4, v5);
  free(v4);
  free(v3);
  free(v2);
}

BOOL Transaction.isEmpty.getter(uint64_t a1)
{
  return a1 == 0;
}

BOOL Transaction.mayConcatenate(with:)(unint64_t a1, unint64_t a2)
{
  BOOL v2;
  uint64_t v6;

  v2 = (a2 | a1) == 0;
  if (a2 && a1)
  {
    v6 = MEMORY[0x24BEE4AF8];
    swift_retain();
    swift_retain();
    v2 = compareLists(_:_:ignoredTypes:)(a2, a1, (uint64_t)&v6);
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
  }
  return v2;
}

uint64_t Transaction.set(_:)(uint64_t result)
{
  uint64_t *v1;
  uint64_t v2;

  v2 = result;
  if (!*v1)
  {
    if (!result)
      return result;
    goto LABEL_6;
  }
  if (!result || *v1 != result)
  {
LABEL_6:
    swift_retain();
    result = swift_release();
    *v1 = v2;
  }
  return result;
}

Swift::UInt Transaction.current.getter(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;

  swift_retain();
  if (_threadTransactionData())
  {
    type metadata accessor for PropertyList.Element();
    swift_unknownObjectRetain();
    v2 = swift_dynamicCastClassUnconditional();
    v6 = v2;
    if (a1)
    {
      if (v2)
      {
        if (a1[3])
        {
          type metadata accessor for TypedElement<EmptyKey>(0, v3, v4, v5);
          swift_allocObject();
          return PropertyList.Element.init(keyType:before:after:)((Swift::Int)&type metadata for EmptyKey, v6, (uint64_t)a1).value;
        }
        else
        {
          v7 = a1[4];
          v8 = *(uint64_t (**)(uint64_t, uint64_t))(*a1 + 216);
          swift_retain();
          v9 = swift_retain();
          v10 = v8(v9, v7);
          swift_release();
          swift_release_n();
          swift_release();
          return v10;
        }
      }
    }
    else
    {
      return v2;
    }
  }
  return (Swift::UInt)a1;
}

void Transaction.forEach<A>(keyType:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11;
  uint64_t v12;
  _QWORD v13[6];

  v11 = type metadata accessor for TransactionPropertyKey(0, a5, a6, a4);
  v13[2] = a5;
  v13[3] = a6;
  v13[4] = a2;
  v13[5] = a3;
  v12 = MEMORY[0x23B7C9C04](&protocol conformance descriptor for TransactionPropertyKey<A>, v11);
  PropertyList.forEach<A>(keyType:_:)(v11, (uint64_t)partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed A?) -> (@out ()), (uint64_t)v13, a4, v11, v12);
}

uint64_t specialized closure #1 in withTransaction<A>(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  unsigned int v7;

  _threadTransactionData();
  v6 = one-time initialization token for v5;
  swift_retain();
  if (v6 != -1)
    swift_once();
  v7 = static Semantics.v5;
  if (one-time initialization token for forced != -1)
    swift_once();
  swift_beginAccess();
  if (byte_25426FABC == 1)
  {
    if ((dyld_program_minos_at_least() & 1) == 0)
      goto LABEL_13;
  }
  else if (dword_25426FAB8 < v7)
  {
    goto LABEL_13;
  }
  if (_threadTransactionData())
  {
    swift_unknownObjectRetain();
    swift_release();
    type metadata accessor for PropertyList.Element();
    swift_dynamicCastClassUnconditional();
  }
  else
  {
    swift_release();
  }
  PropertyList.merge(_:)(a1);
LABEL_13:
  _setThreadTransactionData();
  closure #1 in closure #2 in ScrollStateEnqueueRequests.enqueueRequests(_:)(a2, a3);
  _setThreadTransactionData();
  swift_release();
  return outlined release of ScrollStateEnqueueRequests(a2);
}

uint64_t specialized closure #1 in withTransaction<A>(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;

  _threadTransactionData();
  v6 = one-time initialization token for v5;
  swift_retain();
  if (v6 != -1)
    swift_once();
  v7 = static Semantics.v5;
  if (one-time initialization token for forced != -1)
    swift_once();
  swift_beginAccess();
  if (byte_25426FABC != 1)
  {
    if (dword_25426FAB8 < v7)
      goto LABEL_13;
LABEL_9:
    if (_threadTransactionData())
    {
      swift_unknownObjectRetain();
      swift_release();
      type metadata accessor for PropertyList.Element();
      swift_dynamicCastClassUnconditional();
    }
    else
    {
      swift_release();
    }
    PropertyList.merge(_:)(a1);
    goto LABEL_13;
  }
  if ((dyld_program_minos_at_least() & 1) != 0)
    goto LABEL_9;
LABEL_13:
  _setThreadTransactionData();
  v8 = *(_QWORD *)(a4 + 16);
  if (v8)
  {
    v9 = (_QWORD *)(a4 + 32);
    swift_bridgeObjectRetain();
    do
    {
      v10 = v9[3];
      v11 = v9[4];
      __swift_project_boxed_opaque_existential_1(v9, v10);
      (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v10, v11);
      v9 += 5;
      --v8;
    }
    while (v8);
    swift_bridgeObjectRelease();
  }
  _setThreadTransactionData();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

uint64_t closure #1 in withTransaction<A>(_:_:)(uint64_t a1, void (*a2)(_QWORD *), uint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v5;
  uint64_t v7;
  uint64_t v10;
  unsigned int v11;
  _QWORD *v12;
  uint64_t result;

  v7 = v5;
  _threadTransactionData();
  v10 = one-time initialization token for v5;
  swift_retain();
  if (v10 != -1)
    swift_once();
  v11 = static Semantics.v5;
  if (one-time initialization token for forced != -1)
    swift_once();
  swift_beginAccess();
  if (byte_25426FABC == 1)
  {
    if ((dyld_program_minos_at_least() & 1) == 0)
      goto LABEL_13;
  }
  else if (dword_25426FAB8 < v11)
  {
    goto LABEL_13;
  }
  if (_threadTransactionData())
  {
    swift_unknownObjectRetain();
    swift_release();
    type metadata accessor for PropertyList.Element();
    swift_dynamicCastClassUnconditional();
  }
  else
  {
    swift_release();
  }
  PropertyList.merge(_:)(a1);
LABEL_13:
  v12 = _setThreadTransactionData();
  a2(v12);
  _setThreadTransactionData();
  result = swift_release();
  if (v7)
    *a5 = v7;
  return result;
}

uint64_t partial apply for closure #1 in withTransaction<A>(_:_:)(_QWORD *a1)
{
  uint64_t v1;

  return closure #1 in withTransaction<A>(_:_:)(*(_QWORD *)(v1 + 24), *(void (**)(_QWORD *))(v1 + 32), *(_QWORD *)(v1 + 40), *(_QWORD *)(v1 + 16), a1);
}

uint64_t _ss20withExtendedLifetimeyq0_x_q0_yq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t (*v14)(char *);
  uint64_t result;
  uint64_t v16;

  v11 = *(_QWORD *)(a5 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v13 = (char *)&v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = v14(v13);
  if (v8)
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v11 + 32))(a8, v13, a5);
  return result;
}

uint64_t type metadata accessor for TransactionPropertyKey(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for TransactionPropertyKey);
}

uint64_t protocol witness for static TransactionKey._valuesEqual(_:_:) in conformance Transaction.ScrollTargetAnchorKey(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t result;
  double v5;
  unsigned int v6;

  v3 = *(_BYTE *)(a1 + 16);
  result = *(unsigned __int8 *)(a2 + 16);
  if ((v3 & 1) == 0)
  {
    v5 = *(double *)(a1 + 8);
    v6 = (*(double *)a1 == *(double *)a2) & ~(_DWORD)result;
    if (v5 == *(double *)(a2 + 8))
      return v6;
    else
      return 0;
  }
  return result;
}

BOOL protocol witness for static TransactionKey._valuesEqual(_:_:) in conformance AnimationKey(uint64_t *a1, _QWORD *a2)
{
  uint64_t v2;
  _BOOL8 result;
  BOOL v4;
  uint64_t (*v5)(uint64_t);
  uint64_t v6;
  char v7;

  v2 = *a1;
  result = (*a1 | *a2) == 0;
  if (v2)
    v4 = *a2 == 0;
  else
    v4 = 1;
  if (!v4)
  {
    v5 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 104);
    v6 = swift_retain();
    v7 = v5(v6);
    swift_release();
    return v7 & 1;
  }
  return result;
}

uint64_t protocol witness for static TransactionKey._valuesEqual(_:_:) in conformance AnimationFrameIntervalKey(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t result;

  v3 = *(_BYTE *)(a1 + 8);
  result = *(unsigned __int8 *)(a2 + 8);
  if ((v3 & 1) == 0)
    return (*(double *)a1 == *(double *)a2) & ~(_DWORD)result;
  return result;
}

uint64_t protocol witness for static TransactionKey._valuesEqual(_:_:) in conformance AnimationReasonKey(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t result;

  v3 = *(_BYTE *)(a1 + 4);
  result = *(unsigned __int8 *)(a2 + 4);
  if ((v3 & 1) == 0)
    return (*(_DWORD *)a1 == *(_DWORD *)a2) & ~(_DWORD)result;
  return result;
}

uint64_t specialized Transaction.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  Swift::Int v5;
  uint64_t v6;

  v5 = type metadata accessor for TransactionPropertyKey(0, a3, a4, a4);
  v6 = MEMORY[0x23B7C9C04](&protocol conformance descriptor for TransactionPropertyKey<A>, v5);
  return specialized PropertyList.subscript.setter(a1, v5, v5, v6);
}

unint64_t lazy protocol witness table accessor for type Transaction.ID and conformance Transaction.ID()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Transaction.ID and conformance Transaction.ID;
  if (!lazy protocol witness table cache variable for type Transaction.ID and conformance Transaction.ID)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Transaction.ID, &type metadata for Transaction.ID);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Transaction.ID and conformance Transaction.ID);
  }
  return result;
}

uint64_t dispatch thunk of static TransactionKey.defaultValue.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of static TransactionKey._valuesEqual(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 24))();
}

ValueMetadata *type metadata accessor for Transaction()
{
  return &type metadata for Transaction;
}

ValueMetadata *type metadata accessor for Transaction.ID()
{
  return &type metadata for Transaction.ID;
}

void type metadata accessor for AnimationListener?()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for AnimationListener?)
  {
    type metadata accessor for AnimationListener();
    v0 = type metadata accessor for Optional();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for AnimationListener?);
  }
}

uint64_t outlined release of ScrollStateEnqueueRequests(uint64_t a1)
{
  swift_release();
  return a1;
}

void Stack.init()(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

BOOL Stack.isEmpty.getter(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  _BOOL8 v8;
  _QWORD v10[2];

  v3 = *(_QWORD *)(a1 + 16);
  v4 = type metadata accessor for Optional();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)v10 - v6;
  v10[1] = *v1;
  Stack.top.getter(a1, (uint64_t)v10 - v6);
  v8 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 48))(v7, 1, v3) == 1;
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  return v8;
}

uint64_t Stack3.init()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t TupleTypeMetadata3;
  uint64_t v5;
  uint64_t v6;
  void (*v8)(uint64_t, uint64_t, uint64_t, uint64_t);

  type metadata accessor for Optional();
  TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
  v5 = a2 + *(int *)(TupleTypeMetadata3 + 48);
  v6 = a2 + *(int *)(TupleTypeMetadata3 + 64);
  v8 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 56);
  v8(a2, 1, 1, a1);
  v8(v5, 1, 1, a1);
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v8)(v6, 1, 1, a1);
}

uint64_t Stack3.contains(_:)(void (*a1)(char *, uint64_t), uint64_t a2)
{
  char *v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t TupleTypeMetadata3;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  double v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  void (*v47)(char *, uint64_t);
  uint64_t v48;
  char *v49;
  char *v50;
  char *v51;
  char *v52;
  void (*v53)(void);
  char *v54;
  void (*v55)(void);
  uint64_t v56;
  uint64_t v57;
  char *v58;
  unsigned int (*v59)(char *, uint64_t, uint64_t);
  unsigned int v60;
  void (*v61)(char *, uint64_t);
  char v62;
  uint64_t v63;
  char *v64;
  char *v65;
  char *v66;
  char *v67;
  void (*v68)(char *, uint64_t);
  char *v69;
  char *v70;
  void (*v71)(char *, uint64_t);
  char *v72;
  char *v73;
  char *v74;
  uint64_t v75;
  char *v76;
  char *v77;
  void (*v78)(char *, uint64_t);
  char *v79;
  void (*v80)(char *, uint64_t);
  char *v81;
  char *v82;
  char v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  char *v87;
  char *v88;
  char *v89;
  void (*v90)(void);
  char *v91;
  char *v92;
  char *v93;
  unsigned int (*v94)(char *, uint64_t, uint64_t);
  char *v95;
  void (*v96)(char *, uint64_t);
  char *v97;
  char *v98;
  char *v99;
  void (*v100)(char *, uint64_t);
  char *v101;
  char *v102;
  void (*v103)(char *, void (*)(_QWORD, _QWORD), uint64_t);
  char *v104;
  char *v105;
  char *v106;
  uint64_t v107;
  char *v108;
  uint64_t v109;
  char *v110;
  char *v111;
  char *v112;
  char *v113;
  char *v114;
  void (*v115)(void);
  char *v116;
  char *v117;
  char *v118;
  char *v119;
  unsigned int (*v120)(char *, uint64_t, uint64_t);
  void (*v121)(char *, uint64_t);
  char *v122;
  void (*v123)(char *, uint64_t);
  uint64_t v124;
  char *v125;
  uint64_t v126;
  char v127;
  char *v128;
  void (*v129)(char *, uint64_t);
  void (*v130)(char *, uint64_t);
  char *v131;
  char *v132;
  char *v133;
  uint64_t v134;
  char *v135;
  void (*v136)(char *, uint64_t);
  uint64_t v138;
  char *v139;
  char *v140;
  char *v141;
  char *v142;
  char *v143;
  char *v144;
  char *v145;
  char *v146;
  void (*v147)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v148;
  unsigned int (*v149)(char *, uint64_t, uint64_t);
  void (*v150)(void);
  char *v151;
  uint64_t v152;
  char *v153;
  char *v154;
  void (*v155)(char *, uint64_t);
  uint64_t v156;
  uint64_t v157;
  char *v158;
  char *v159;
  char *v160;
  char *v161;
  char *v162;
  char *v163;
  void (*v164)(char *, uint64_t);
  uint64_t v165;
  uint64_t v166;
  void (*v167)(char *, uint64_t);
  uint64_t TupleTypeMetadata2;

  v3 = v2;
  v167 = a1;
  v162 = *(char **)(a2 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v163 = (char *)&v138 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v158 = (char *)&v138 - v6;
  v8 = *(_QWORD *)(v7 + 16);
  v9 = *(_QWORD *)(v8 - 8);
  v165 = v7;
  v166 = v9;
  MEMORY[0x24BDAC7A8](v10);
  v160 = (char *)&v138 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v12);
  v159 = (char *)&v138 - v13;
  MEMORY[0x24BDAC7A8](v14);
  v143 = (char *)&v138 - v15;
  v16 = type metadata accessor for Optional();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v152 = *(_QWORD *)(TupleTypeMetadata2 - 8);
  MEMORY[0x24BDAC7A8](TupleTypeMetadata2);
  v142 = (char *)&v138 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v18);
  v151 = (char *)&v138 - v19;
  MEMORY[0x24BDAC7A8](v20);
  v22 = (char *)&v138 - v21;
  v23 = *(_QWORD *)(v16 - 8);
  MEMORY[0x24BDAC7A8](v24);
  v139 = (char *)&v138 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v26);
  v141 = (char *)&v138 - v27;
  MEMORY[0x24BDAC7A8](v28);
  v140 = (char *)&v138 - v29;
  MEMORY[0x24BDAC7A8](v30);
  v146 = (char *)&v138 - v31;
  MEMORY[0x24BDAC7A8](v32);
  v144 = (char *)&v138 - v33;
  MEMORY[0x24BDAC7A8](v34);
  v36 = (char *)&v138 - v35;
  TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
  MEMORY[0x24BDAC7A8](TupleTypeMetadata3);
  v145 = (char *)&v138 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v39);
  v153 = (char *)&v138 - v40;
  v42 = MEMORY[0x24BDAC7A8](v41);
  v44 = (char *)&v138 - v43;
  v46 = *(int *)(v45 + 48);
  v47 = (void (*)(char *, uint64_t))((char *)&v138 + v46 - v43);
  v148 = v45;
  v48 = *(int *)(v45 + 64);
  v49 = (char *)&v138 + v48 - v43;
  v50 = v3;
  v51 = &v3[v46];
  v52 = &v50[v48];
  v156 = v23;
  v53 = *(void (**)(void))(v23 + 16);
  v54 = v22;
  v164 = (void (*)(char *, uint64_t))v50;
  v55 = v53;
  ((void (*)(char *, double))v53)((char *)&v138 - v43, v42);
  v155 = v47;
  ((void (*)(void (*)(char *, uint64_t), char *, uint64_t))v55)(v47, v51, v16);
  v154 = v49;
  ((void (*)(char *, char *, uint64_t))v55)(v49, v52, v16);
  v56 = v166;
  v161 = *(char **)(v166 + 16);
  ((void (*)(char *, void (*)(char *, uint64_t), uint64_t))v161)(v36, v167, v8);
  v147 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v56 + 56);
  v147(v36, 0, 1, v8);
  v57 = v56;
  v58 = &v54[*(int *)(TupleTypeMetadata2 + 48)];
  ((void (*)(char *, char *, uint64_t))v55)(v54, v44, v16);
  ((void (*)(char *, char *, uint64_t))v55)(v58, v36, v16);
  v59 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v56 + 48);
  v60 = v59(v54, 1, v8);
  v149 = v59;
  v150 = v55;
  v157 = v8;
  if (v60 != 1)
  {
    v64 = v144;
    ((void (*)(char *, char *, uint64_t))v55)(v144, v54, v16);
    if (v59(v58, 1, v8) != 1)
    {
      v69 = v143;
      (*(void (**)(char *, char *, uint64_t))(v57 + 32))(v143, v58, v8);
      v70 = v64;
      v62 = dispatch thunk of static Equatable.== infix(_:_:)();
      v71 = *(void (**)(char *, uint64_t))(v57 + 8);
      v71(v69, v8);
      v61 = *(void (**)(char *, uint64_t))(v156 + 8);
      v61(v36, v16);
      v71(v70, v8);
      v63 = v165;
      v61(v54, v16);
      goto LABEL_8;
    }
    v61 = *(void (**)(char *, uint64_t))(v156 + 8);
    v61(v36, v16);
    (*(void (**)(char *, uint64_t))(v57 + 8))(v64, v8);
LABEL_6:
    v63 = v165;
    v65 = v163;
    v67 = v154;
    v66 = (char *)v155;
    (*(void (**)(char *, uint64_t))(v152 + 8))(v54, TupleTypeMetadata2);
    v62 = 0;
    v68 = v167;
    goto LABEL_9;
  }
  v61 = *(void (**)(char *, uint64_t))(v156 + 8);
  v61(v36, v16);
  if (v59(v58, 1, v8) != 1)
    goto LABEL_6;
  v61(v54, v16);
  v62 = 1;
  v63 = v165;
LABEL_8:
  v65 = v163;
  v68 = v167;
  v67 = v154;
  v66 = (char *)v155;
LABEL_9:
  v61(v67, v16);
  v61(v66, v16);
  v155 = v61;
  v61(v44, v16);
  v72 = v162;
  v73 = v158;
  v156 = *((_QWORD *)v162 + 2);
  ((void (*)(char *, void (*)(char *, uint64_t), uint64_t))v156)(v158, v164, v63);
  v74 = v159;
  v75 = v157;
  v76 = v161;
  ((void (*)(char *, void (*)(char *, uint64_t), uint64_t))v161)(v159, v68, v157);
  if ((v62 & 1) == 0)
  {
    v84 = *(int *)(v148 + 48);
    v85 = &v73[v84];
    v86 = *(int *)(v148 + 64);
    v87 = &v73[v86];
    v88 = &v153[v84];
    v89 = &v153[v86];
    v90 = v150;
    v150();
    ((void (*)(char *, char *, uint64_t))v90)(v88, v85, v16);
    v144 = v89;
    ((void (*)(char *, char *, uint64_t))v90)(v89, v87, v16);
    v91 = v146;
    ((void (*)(char *, char *, uint64_t))v76)(v146, v74, v75);
    v147(v91, 0, 1, v75);
    v92 = v151;
    v93 = &v151[*(int *)(TupleTypeMetadata2 + 48)];
    v154 = v88;
    ((void (*)(char *, char *, uint64_t))v90)(v151, v88, v16);
    ((void (*)(char *, char *, uint64_t))v90)(v93, v91, v16);
    v94 = v149;
    v95 = v73;
    if (v149(v92, 1, v75) == 1)
    {
      v96 = v155;
      v155(v91, v16);
      v97 = v74;
      v78 = *(void (**)(char *, uint64_t))(v166 + 8);
      v78(v97, v75);
      v80 = (void (*)(char *, uint64_t))*((_QWORD *)v162 + 1);
      v98 = v95;
      v63 = v165;
      v80(v98, v165);
      if (v94(v93, 1, v75) == 1)
      {
        v96(v92, v16);
        v96(v144, v16);
        v96(v154, v16);
        v96(v153, v16);
        v65 = v163;
        v68 = v167;
        v81 = v161;
        goto LABEL_11;
      }
    }
    else
    {
      v99 = v140;
      ((void (*)(char *, char *, uint64_t))v90)(v140, v92, v16);
      if (v94(v93, 1, v75) != 1)
      {
        v124 = v166;
        v125 = v143;
        (*(void (**)(char *, char *, uint64_t))(v166 + 32))(v143, v93, v75);
        v126 = v165;
        v127 = dispatch thunk of static Equatable.== infix(_:_:)();
        v128 = v125;
        v78 = *(void (**)(char *, uint64_t))(v124 + 8);
        v78(v128, v75);
        v129 = v155;
        v155(v146, v16);
        v78(v159, v75);
        v130 = (void (*)(char *, uint64_t))*((_QWORD *)v162 + 1);
        v131 = v95;
        v63 = v126;
        v130(v131, v126);
        v132 = v99;
        v80 = v130;
        v78(v132, v75);
        v129(v151, v16);
        v129(v144, v16);
        v129(v154, v16);
        v129(v153, v16);
        v65 = v163;
        ((void (*)(char *, void (*)(char *, uint64_t), uint64_t))v156)(v163, v164, v126);
        v82 = v160;
        v106 = v161;
        ((void (*)(char *, void (*)(char *, uint64_t), uint64_t))v161)(v160, v167, v75);
        if ((v127 & 1) != 0)
          goto LABEL_12;
LABEL_19:
        v164 = v80;
        v167 = v78;
        v107 = *(int *)(v148 + 48);
        v108 = &v65[v107];
        v109 = *(int *)(v148 + 64);
        v110 = v65;
        v111 = &v65[v109];
        v112 = &v145[v107];
        v113 = &v145[v109];
        v114 = v106;
        v115 = v150;
        v150();
        v162 = v112;
        ((void (*)(char *, char *, uint64_t))v115)(v112, v108, v16);
        ((void (*)(char *, char *, uint64_t))v115)(v113, v111, v16);
        v116 = v141;
        ((void (*)(char *, char *, uint64_t))v114)(v141, v82, v75);
        v117 = v116;
        v147(v116, 0, 1, v75);
        v118 = v142;
        v119 = &v142[*(int *)(TupleTypeMetadata2 + 48)];
        v161 = v113;
        ((void (*)(char *, char *, uint64_t))v115)(v142, v113, v16);
        ((void (*)(char *, char *, uint64_t))v115)(v119, v117, v16);
        v120 = v149;
        if (v149(v118, 1, v75) == 1)
        {
          v121 = v155;
          v155(v117, v16);
          v167(v160, v75);
          v164(v110, v165);
          if (v120(v119, 1, v75) == 1)
          {
            v121(v118, v16);
            v83 = 1;
LABEL_28:
            v121(v161, v16);
            v121(v162, v16);
            v121(v145, v16);
            return v83 & 1;
          }
        }
        else
        {
          v122 = v139;
          ((void (*)(char *, char *, uint64_t))v115)(v139, v118, v16);
          if (v120(v119, 1, v75) != 1)
          {
            v133 = v143;
            (*(void (**)(char *, char *, uint64_t))(v166 + 32))(v143, v119, v75);
            v134 = v165;
            v83 = dispatch thunk of static Equatable.== infix(_:_:)();
            v135 = v133;
            v136 = v167;
            v167(v135, v75);
            v121 = v155;
            v155(v117, v16);
            v136(v160, v75);
            v164(v163, v134);
            v136(v122, v75);
            v121(v118, v16);
            goto LABEL_28;
          }
          v121 = v155;
          v155(v117, v16);
          v123 = v167;
          v167(v160, v75);
          v164(v163, v165);
          v123(v122, v75);
        }
        (*(void (**)(char *, uint64_t))(v152 + 8))(v118, TupleTypeMetadata2);
        v83 = 0;
        goto LABEL_28;
      }
      v96 = v155;
      v155(v146, v16);
      v78 = *(void (**)(char *, uint64_t))(v166 + 8);
      v78(v159, v75);
      v100 = (void (*)(char *, uint64_t))*((_QWORD *)v162 + 1);
      v101 = v95;
      v63 = v165;
      v100(v101, v165);
      v102 = v99;
      v80 = v100;
      v78(v102, v75);
    }
    v65 = v163;
    v103 = (void (*)(char *, void (*)(_QWORD, _QWORD), uint64_t))v156;
    v104 = v154;
    v105 = v144;
    (*(void (**)(char *, uint64_t))(v152 + 8))(v151, TupleTypeMetadata2);
    v96(v105, v16);
    v96(v104, v16);
    v96(v153, v16);
    v103(v65, (void (*)(_QWORD, _QWORD))v164, v63);
    v82 = v160;
    v106 = v161;
    ((void (*)(char *, void (*)(char *, uint64_t), uint64_t))v161)(v160, v167, v75);
    goto LABEL_19;
  }
  v77 = v74;
  v78 = *(void (**)(char *, uint64_t))(v166 + 8);
  v78(v77, v75);
  v79 = v73;
  v80 = (void (*)(char *, uint64_t))*((_QWORD *)v72 + 1);
  v80(v79, v63);
  v81 = v76;
LABEL_11:
  ((void (*)(char *, void (*)(char *, uint64_t), uint64_t))v156)(v65, v164, v63);
  v82 = v160;
  ((void (*)(char *, void (*)(char *, uint64_t), uint64_t))v81)(v160, v68, v75);
LABEL_12:
  v78(v82, v75);
  v80(v65, v63);
  v83 = 1;
  return v83 & 1;
}

uint64_t Stack3.push(_:)(uint64_t a1, uint64_t a2)
{
  char *v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t TupleTypeMetadata3;
  char *v15;
  uint64_t (*v16)(char *, uint64_t, uint64_t);
  int v17;
  void (*v18)(char *, uint64_t);
  char *v19;
  char *v20;
  void (*v21)(char *, char *, uint64_t);
  int v22;
  char *v23;
  int v24;
  void (*v25)(char *, char *, uint64_t);
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  void (*v31)(char *, char *, uint64_t);
  uint64_t v32;
  uint64_t v33;

  v3 = v2;
  v33 = a1;
  v4 = *(_QWORD *)(a2 + 16);
  v5 = type metadata accessor for Optional();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v30 = (char *)&v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v28 - v9;
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)&v28 - v12;
  TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
  v15 = &v2[*(int *)(TupleTypeMetadata3 + 64)];
  v31 = *(void (**)(char *, char *, uint64_t))(v6 + 16);
  v31(v13, v15, v5);
  v32 = *(_QWORD *)(v4 - 8);
  v16 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v32 + 48);
  v17 = v16(v13, 1, v4);
  v29 = v6;
  v18 = *(void (**)(char *, uint64_t))(v6 + 8);
  v18(v13, v5);
  if (v17 == 1)
  {
    v3 = v15;
  }
  else
  {
    v19 = v15;
    v20 = &v3[*(int *)(TupleTypeMetadata3 + 48)];
    v21 = v31;
    v31(v10, v20, v5);
    v22 = v16(v10, 1, v4);
    v18(v10, v5);
    if (v22 == 1)
    {
      v3 = v20;
    }
    else
    {
      v23 = v30;
      v21(v30, v3, v5);
      v24 = v16(v23, 1, v4);
      v18(v23, v5);
      if (v24 != 1)
      {
        v25 = *(void (**)(char *, char *, uint64_t))(v29 + 24);
        v25(v19, v20, v5);
        v25(v20, v3, v5);
      }
    }
  }
  v18(v3, v5);
  v26 = v32;
  (*(void (**)(char *, uint64_t, uint64_t))(v32 + 16))(v3, v33, v4);
  return (*(uint64_t (**)(char *, _QWORD, uint64_t, uint64_t))(v26 + 56))(v3, 0, 1, v4);
}

uint64_t Stack.top.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (*v2)
  {
    v4 = *(_QWORD *)(a1 + 16);
    v5 = swift_projectBox();
    v6 = *(_QWORD *)(v4 - 8);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(a2, v5, v4);
    v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 56);
    v8 = a2;
    v9 = 0;
    v10 = v4;
  }
  else
  {
    v10 = *(_QWORD *)(a1 + 16);
    v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56);
    v8 = a2;
    v9 = 1;
  }
  return v7(v8, v9, 1, v10);
}

uint64_t Stack.count.getter(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  unsigned int (*v8)(char *, uint64_t, uint64_t);
  uint64_t v9;
  void (*v10)(char *, uint64_t);
  uint64_t v12;

  v3 = *(_QWORD *)(a1 + 16);
  v4 = type metadata accessor for Optional();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v12 - v6;
  v12 = *v1;
  swift_retain();
  MEMORY[0x23B7C9C04](&protocol conformance descriptor for Stack<A>, a1);
  Sequence<>.makeIterator()();
  Stack.pop()(a1, (uint64_t)v7);
  v8 = *(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 48);
  v9 = 0;
  if (v8(v7, 1, v3) != 1)
  {
    v9 = 0;
    v10 = *(void (**)(char *, uint64_t))(v5 + 8);
    do
    {
      ++v9;
      v10(v7, v4);
      Stack.pop()(a1, (uint64_t)v7);
    }
    while (v8(v7, 1, v3) != 1);
  }
  swift_release();
  return v9;
}

uint64_t Stack.push(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t TupleTypeMetadata2;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;

  v4 = *(_QWORD *)(a2 + 16);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v6 = swift_allocBox();
  v8 = v7;
  v9 = *(int *)(TupleTypeMetadata2 + 48);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(v7, a1, v4);
  *(_QWORD *)(v8 + v9) = *v2;
  *v2 = v6;
  return result;
}

uint64_t Stack.pop()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v2;
  uint64_t v4;
  uint64_t TupleTypeMetadata2;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (!*v2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8) + 56))(a2, 1, 1);
  v4 = *(_QWORD *)(a1 + 16);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v6 = swift_projectBox();
  v7 = *(_QWORD *)(v6 + *(int *)(TupleTypeMetadata2 + 48));
  v8 = *(_QWORD *)(v4 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16))(a2, v6, v4);
  *v2 = v7;
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v8 + 56))(a2, 0, 1, v4);
  swift_retain();
  return swift_release();
}

Swift::Void __swiftcall Stack.popAll()()
{
  _QWORD *v0;

  swift_release();
  *v0 = 0;
}

uint64_t Stack.map<A>(_:)@<X0>(void (*a1)(char *)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t *v5;
  uint64_t v11;
  uint64_t isStackAllocationSafe;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  _QWORD v21[2];

  v21[1] = *MEMORY[0x24BDAC8D0];
  v11 = *v5;
  v21[0] = *v5;
  isStackAllocationSafe = Stack.count.getter(a3);
  if (isStackAllocationSafe < 0)
    goto LABEL_11;
  v13 = isStackAllocationSafe;
  v14 = *(_QWORD *)(a4 - 8);
  v15 = *(_QWORD *)(v14 + 72);
  if ((unsigned __int128)(isStackAllocationSafe * (__int128)v15) >> 64 != (isStackAllocationSafe * v15) >> 63)
    goto LABEL_12;
  v16 = *(unsigned __int8 *)(v14 + 80);
  if ((v16 & (unint64_t)(v16 + 1)) != 0)
  {
    __break(1u);
LABEL_11:
    __break(1u);
LABEL_12:
    __break(1u);
  }
  if (v16 > 0xF
    || isStackAllocationSafe * v15 > 1024
    && (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), !(_DWORD)isStackAllocationSafe))
  {
    v17 = swift_slowAlloc();
    closure #1 in Stack.map<A>(_:)(v17, v13, v11, v13, a1, a2, *(_QWORD *)(a3 + 16), a4, a5);
    JUMPOUT(0x23B7C9D54);
  }
  MEMORY[0x24BDAC7A8](isStackAllocationSafe);
  result = closure #1 in Stack.map<A>(_:)((uint64_t)v21 - v18, v13, v11, v13, a1, a2, *(_QWORD *)(a3 + 16), a4, v21);
  *a5 = v21[0];
  return result;
}

uint64_t closure #1 in Stack.map<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void (*a5)(char *)@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _QWORD *a9@<X8>)
{
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t result;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(char *, uint64_t, uint64_t);
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t (*v40)(char *, char *, uint64_t);
  unsigned int (*v41)(char *, uint64_t, uint64_t);
  uint64_t v42;
  void (*v43)(char *);
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;

  v39 = a2;
  v43 = a5;
  v44 = a6;
  v45 = a4;
  v47 = a1;
  v38 = a9;
  v12 = *(_QWORD *)(a8 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v14 = (char *)&v38 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = *(_QWORD *)(v15 - 8);
  MEMORY[0x24BDAC7A8](v17);
  v19 = (char *)&v38 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = type metadata accessor for Optional();
  MEMORY[0x24BDAC7A8](v20);
  v22 = (char *)&v38 - v21;
  v48 = a3;
  v25 = type metadata accessor for Stack(0, a7, v23, v24);
  swift_retain();
  MEMORY[0x23B7C9C04](&protocol conformance descriptor for Stack<A>, v25);
  Sequence<>.makeIterator()();
  v42 = v25;
  Stack.pop()(v25, (uint64_t)v22);
  v46 = v16;
  v41 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48);
  if (v41(v22, 1, a7) != 1)
  {
    v40 = *(uint64_t (**)(char *, char *, uint64_t))(v46 + 32);
    v26 = 1;
    while (1)
    {
      result = v40(v19, v22, a7);
      v28 = v45 - v26;
      if (__OFSUB__(v45, v26))
        break;
      v43(v19);
      (*(void (**)(uint64_t, char *, uint64_t))(v12 + 32))(v47 + *(_QWORD *)(v12 + 72) * v28, v14, a8);
      (*(void (**)(char *, uint64_t))(v46 + 8))(v19, a7);
      ++v26;
      Stack.pop()(v42, (uint64_t)v22);
      if (v41(v22, 1, a7) == 1)
        goto LABEL_5;
    }
    __break(1u);
    goto LABEL_13;
  }
LABEL_5:
  swift_release();
  v49 = 0;
  result = MEMORY[0x23B7C69D0](v47, v39, a8);
  v30 = 0;
  if (v29 == result)
  {
LABEL_11:
    *v38 = v30;
    return result;
  }
  if (v29 < result)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  v31 = v29 - result;
  if (v29 > result)
  {
    v32 = *(_QWORD *)(v12 + 72);
    v33 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 32);
    v34 = v47 + result * v32;
    do
    {
      v33(v14, v34, a8);
      v37 = type metadata accessor for Stack(0, a8, v35, v36);
      Stack.push(_:)((uint64_t)v14, v37);
      result = (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v14, a8);
      v34 += v32;
      --v31;
    }
    while (v31);
    v30 = v49;
    goto LABEL_11;
  }
LABEL_14:
  __break(1u);
  return result;
}

uint64_t static Stack<A>.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  _QWORD *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t TupleTypeMetadata2;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(char *, uint64_t, uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  void (*v29)(char *, uint64_t);
  void (*v30)(char *, uint64_t);
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v6 = *(_QWORD *)(a3 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v8 = (char *)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9);
  v13 = (char *)&v32 - v12;
  v16 = *v15;
  if (!*v14)
  {
    if (!v16)
    {
      v28 = 1;
      return v28 & 1;
    }
LABEL_8:
    v28 = 0;
    return v28 & 1;
  }
  type metadata accessor for Stack(255, a3, v10, v11);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v18 = swift_projectBox();
  if (!v16)
    goto LABEL_8;
  v19 = v18;
  v33 = a4;
  v20 = *(int *)(TupleTypeMetadata2 + 48);
  v21 = *(_QWORD *)(v18 + v20);
  v22 = swift_projectBox();
  v23 = *(_QWORD *)(v22 + v20);
  v24 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 16);
  v25 = v19;
  v26 = v23;
  v24(v13, v25, a3);
  v24(v8, v22, a3);
  v27 = v33;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  if ((dispatch thunk of static Equatable.== infix(_:_:)() & 1) == 0)
  {
    swift_release();
    swift_release();
    v30 = *(void (**)(char *, uint64_t))(v6 + 8);
    v30(v8, a3);
    v30(v13, a3);
    swift_release();
    swift_release();
    goto LABEL_8;
  }
  v34 = v26;
  v35 = v21;
  v28 = static Stack<A>.== infix(_:_:)(&v35, &v34, a3, v27);
  v29 = *(void (**)(char *, uint64_t))(v6 + 8);
  v29(v8, a3);
  v29(v13, a3);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return v28 & 1;
}

uint64_t type metadata accessor for Stack(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Stack);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance <A> Stack<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return static Stack<A>.== infix(_:_:)(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a4 - 8));
}

uint64_t static Stack<A>.isTriviallyReusable.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))() & 1;
}

uint64_t Stack<A>.makeReusable(indirectMap:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v7 = *v3;
  v14 = *v3;
  result = Stack.isEmpty.getter(a2);
  if ((result & 1) == 0)
  {
    v13 = v7;
    MEMORY[0x24BDAC7A8](result);
    v10 = *(_QWORD *)(a2 + 16);
    v11 = a3;
    v12 = a1;
    Stack.map<A>(_:)((void (*)(char *))partial apply for closure #1 in Stack<A>.makeReusable(indirectMap:), (uint64_t)&v9, a2, v10, &v14);
    result = swift_release();
    *v3 = v14;
  }
  return result;
}

uint64_t partial apply for closure #1 in Stack<A>.makeReusable(indirectMap:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = v2[2];
  v4 = v2[3];
  v5 = v2[4];
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a2, a1, v3);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v5, v3, v4);
}

uint64_t Stack<A>.tryToReuse(by:indirectMap:testOnly:)(uint64_t *a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5)
{
  uint64_t *v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE *v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE *v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  unsigned int (*v27)(_BYTE *, uint64_t, uint64_t);
  void (*v28)(_BYTE *, _BYTE *, uint64_t);
  char v29;
  void (*v30)(_BYTE *, uint64_t);
  _BYTE v32[12];
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v34 = a2;
  v35 = a5;
  v39 = *MEMORY[0x24BDAC8D0];
  v9 = *(_QWORD *)(a4 + 16);
  v10 = type metadata accessor for Optional();
  MEMORY[0x24BDAC7A8](v10);
  v12 = &v32[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v13);
  v15 = &v32[-v14];
  v16 = *(_QWORD **)(v9 - 8);
  MEMORY[0x24BDAC7A8](v17);
  v19 = &v32[-((v18 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v20);
  v22 = &v32[-v21];
  v23 = *v5;
  v37 = *a1;
  v38 = v23;
  swift_retain();
  swift_retain();
  v33 = a3 & 1;
  while (1)
  {
    v24 = v38;
    v36 = v38;
    v25 = Stack.isEmpty.getter(a4);
    v26 = v37;
    if (v25)
      break;
    v36 = v37;
    if (Stack.isEmpty.getter(a4))
      break;
    Stack.pop()(a4, (uint64_t)v15);
    v27 = (unsigned int (*)(_BYTE *, uint64_t, uint64_t))v16[6];
    if (v27(v15, 1, v9) == 1)
    {
      __break(1u);
LABEL_14:
      __break(1u);
    }
    v28 = (void (*)(_BYTE *, _BYTE *, uint64_t))v16[4];
    v28(v22, v15, v9);
    Stack.pop()(a4, (uint64_t)v12);
    if (v27(v12, 1, v9) == 1)
      goto LABEL_14;
    v28(v19, v12, v9);
    v29 = (*(uint64_t (**)(_BYTE *, uint64_t, _QWORD, uint64_t))(v35 + 24))(v19, v34, v33, v9);
    v30 = (void (*)(_BYTE *, uint64_t))v16[1];
    v30(v19, v9);
    v30(v22, v9);
    if ((v29 & 1) == 0)
      goto LABEL_12;
  }
  if (!(v24 | v26))
    return 1;
  swift_beginAccess();
  if (static ReuseTrace.recorder)
    AGGraphAddTraceEvent();
LABEL_12:
  swift_release();
  swift_release();
  return 0;
}

uint64_t protocol witness for static GraphReusable.isTriviallyReusable.getter in conformance <A> Stack<A>(uint64_t a1, uint64_t a2)
{
  return static Stack<A>.isTriviallyReusable.getter(*(_QWORD *)(a1 + 16), *(_QWORD *)(a2 - 8));
}

uint64_t protocol witness for GraphReusable.makeReusable(indirectMap:) in conformance <A> Stack<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return Stack<A>.makeReusable(indirectMap:)(a1, a2, *(_QWORD *)(a3 - 8));
}

uint64_t protocol witness for GraphReusable.tryToReuse(by:indirectMap:testOnly:) in conformance <A> Stack<A>(uint64_t *a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5)
{
  return Stack<A>.tryToReuse(by:indirectMap:testOnly:)(a1, a2, a3, a4, *(_QWORD *)(a5 - 8));
}

uint64_t Stack3.pop()@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  double v22;
  uint64_t v23;
  char *v24;
  void (*v25)(char *, uint64_t, uint64_t);
  unsigned int (*v26)(char *, uint64_t, uint64_t);
  void (*v27)(char *, uint64_t);
  uint64_t TupleTypeMetadata3;
  uint64_t v29;
  char *v30;
  void (*v31)(char *, uint64_t, uint64_t);
  char *v32;
  void (*v33)(char *, uint64_t);
  char *v34;
  char *v35;
  unsigned int v36;
  char *v37;
  _QWORD *v38;
  void (*v40)(char *, char *, uint64_t);
  uint64_t v41;
  void (*v42)(uint64_t, uint64_t, uint64_t, uint64_t);
  char *v43;
  _QWORD *v44;
  void (*v45)(char *, char *, uint64_t);
  char *v46;
  void (*v47)(char *, char *, uint64_t);
  char *v48;
  void (*v49)(uint64_t, uint64_t, uint64_t, uint64_t);
  char *v50;
  char *v51;
  char *v52;
  _QWORD *v53;
  void (*v54)(char *, uint64_t, uint64_t);
  char *v55;
  char *v56;
  uint64_t v57;

  v3 = v2;
  v56 = a2;
  v4 = *(_QWORD *)(a1 + 16);
  v5 = type metadata accessor for Optional();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v50 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9);
  v55 = (char *)&v50 - v10;
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)&v50 - v12;
  v14 = *(_QWORD **)(v4 - 8);
  MEMORY[0x24BDAC7A8](v15);
  v17 = (char *)&v50 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v18);
  v20 = (char *)&v50 - v19;
  v22 = MEMORY[0x24BDAC7A8](v21);
  v24 = (char *)&v50 - v23;
  v25 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 16);
  v57 = v3;
  v54 = v25;
  ((void (*)(char *, uint64_t, uint64_t, double))v25)(v13, v3, v5, v22);
  v26 = (unsigned int (*)(char *, uint64_t, uint64_t))v14[6];
  if (v26(v13, 1, v4) != 1)
  {
    v40 = (void (*)(char *, char *, uint64_t))v14[4];
    v40(v24, v13, v4);
    v41 = v57;
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v57, v5);
    v42 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v14[7];
    v42(v41, 1, 1, v4);
    v43 = v56;
    v40(v56, v24, v4);
    return ((uint64_t (*)(char *, _QWORD, uint64_t, uint64_t))v42)(v43, 0, 1, v4);
  }
  v50 = v17;
  v51 = v20;
  v52 = v8;
  v53 = v14;
  v27 = *(void (**)(char *, uint64_t))(v6 + 8);
  v27(v13, v5);
  TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
  v29 = v57;
  v30 = (char *)(v57 + *(int *)(TupleTypeMetadata3 + 48));
  v31 = v54;
  v32 = v55;
  v54(v55, (uint64_t)v30, v5);
  if (v26(v32, 1, v4) != 1)
  {
    v44 = v53;
    v45 = (void (*)(char *, char *, uint64_t))v53[4];
    v46 = v51;
    v45(v51, v32, v4);
    v27(v30, v5);
    v42 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v44[7];
    v42((uint64_t)v30, 1, 1, v4);
    v43 = v56;
    v45(v56, v46, v4);
    return ((uint64_t (*)(char *, _QWORD, uint64_t, uint64_t))v42)(v43, 0, 1, v4);
  }
  v33 = v27;
  v27(v32, v5);
  v34 = (char *)(v29 + *(int *)(TupleTypeMetadata3 + 64));
  v35 = v52;
  v31(v52, (uint64_t)v34, v5);
  v36 = v26(v35, 1, v4);
  v37 = v56;
  v38 = v53;
  if (v36 == 1)
  {
    v33(v35, v5);
    return ((uint64_t (*)(char *, uint64_t, uint64_t, uint64_t))v38[7])(v37, 1, 1, v4);
  }
  else
  {
    v47 = (void (*)(char *, char *, uint64_t))v53[4];
    v48 = v50;
    v47(v50, v35, v4);
    v33(v34, v5);
    v49 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v38[7];
    v49((uint64_t)v34, 1, 1, v4);
    v47(v37, v48, v4);
    return ((uint64_t (*)(char *, _QWORD, uint64_t, uint64_t))v49)(v37, 0, 1, v4);
  }
}

void associated type witness table accessor for Sequence.Iterator : IteratorProtocol in Stack<A>()
{
  JUMPOUT(0x23B7C9C04);
}

uint64_t type metadata completion function for Stack3()
{
  uint64_t result;
  unint64_t v1;
  char v2;
  char *v3;

  result = type metadata accessor for Optional();
  if (v1 <= 0x3F)
  {
    swift_getTupleTypeLayout3();
    v3 = &v2;
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for Stack3(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  size_t v7;
  uint64_t v8;
  uint64_t v9;
  size_t v10;
  uint64_t v13;
  unsigned int (*v14)(uint64_t *, uint64_t, uint64_t);
  _QWORD *v15;
  void *v16;
  _QWORD *v17;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  if (*(_DWORD *)(v6 + 84))
    v7 = *(_QWORD *)(v6 + 64);
  else
    v7 = *(_QWORD *)(v6 + 64) + 1;
  v8 = *(_DWORD *)(v6 + 80);
  v9 = ~v8;
  v10 = v7 + v8;
  if (v8 > 7 || (*(_DWORD *)(v6 + 80) & 0x100000) != 0 || ((v10 + (v10 & v9)) & v9) + v7 > 0x18)
  {
    v13 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v13 + ((v8 + 16) & v9));
    swift_retain();
  }
  else
  {
    v14 = *(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v6 + 48);
    if (v14(a2, 1, *(_QWORD *)(a3 + 16)))
    {
      memcpy(a1, a2, v7);
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v6 + 16))(a1, a2, v5);
      (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
    }
    v15 = (_QWORD *)(((unint64_t)a2 + v10) & v9);
    if (v14(v15, 1, v5))
    {
      memcpy((void *)(((unint64_t)a1 + v10) & v9), v15, v7);
    }
    else
    {
      (*(void (**)(unint64_t, _QWORD *, uint64_t))(v6 + 16))(((unint64_t)a1 + v10) & v9, v15, v5);
      (*(void (**)(unint64_t, _QWORD, uint64_t, uint64_t))(v6 + 56))(((unint64_t)a1 + v10) & v9, 0, 1, v5);
    }
    v16 = (void *)((v10 + (((unint64_t)a1 + v10) & v9)) & v9);
    v17 = (_QWORD *)(((unint64_t)v15 + v10) & v9);
    if (v14(v17, 1, v5))
    {
      memcpy(v16, v17, v7);
    }
    else
    {
      (*(void (**)(void *, _QWORD *, uint64_t))(v6 + 16))(v16, v17, v5);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v6 + 56))(v16, 0, 1, v5);
    }
  }
  return a1;
}

uint64_t destroy for Stack3(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int (*v5)(uint64_t, uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;

  v3 = *(_QWORD *)(a2 + 16);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48);
  if (!v5(a1, 1, v3))
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(a1, v3);
  if (*(_DWORD *)(v4 + 84))
    v6 = *(_QWORD *)(v4 + 64);
  else
    v6 = *(_QWORD *)(v4 + 64) + 1;
  v7 = *(unsigned __int8 *)(v4 + 80);
  v8 = v6 + v7;
  v9 = ~v7;
  v10 = (v6 + v7 + a1) & ~v7;
  if (!v5(v10, 1, v3))
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v10, v3);
  v11 = (v8 + v10) & v9;
  result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v5)(v11, 1, v3);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8))(v11, v3);
  return result;
}

void *initializeWithCopy for Stack3(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int (*v7)(const void *, uint64_t, uint64_t);
  int v8;
  size_t v9;
  size_t v10;
  size_t v11;
  uint64_t v12;
  size_t v13;
  uint64_t v14;
  void *v15;
  const void *v16;
  void *v17;
  const void *v18;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v6 + 48);
  if (v7(a2, 1, v5))
  {
    v8 = *(_DWORD *)(v6 + 84);
    v9 = *(_QWORD *)(v6 + 64);
    if (v8)
      v10 = *(_QWORD *)(v6 + 64);
    else
      v10 = v9 + 1;
    memcpy(a1, a2, v10);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v6 + 16))(a1, a2, v5);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
    v8 = *(_DWORD *)(v6 + 84);
    v9 = *(_QWORD *)(v6 + 64);
  }
  if (v8)
    v11 = v9;
  else
    v11 = v9 + 1;
  v12 = *(unsigned __int8 *)(v6 + 80);
  v13 = v11 + v12;
  v14 = ~v12;
  v15 = (void *)(((unint64_t)a1 + v11 + v12) & ~v12);
  v16 = (const void *)(((unint64_t)a2 + v11 + v12) & ~v12);
  if (v7(v16, 1, v5))
  {
    memcpy(v15, v16, v11);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v6 + 16))(v15, v16, v5);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v6 + 56))(v15, 0, 1, v5);
  }
  v17 = (void *)(((unint64_t)v15 + v13) & v14);
  v18 = (const void *)(((unint64_t)v16 + v13) & v14);
  if (v7(v18, 1, v5))
  {
    memcpy(v17, v18, v11);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v6 + 16))(v17, v18, v5);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v6 + 56))(v17, 0, 1, v5);
  }
  return a1;
}

void *assignWithCopy for Stack3(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(void *, uint64_t, uint64_t);
  int v8;
  int v9;
  size_t v10;
  size_t v11;
  uint64_t v12;
  size_t v13;
  uint64_t v14;
  void *v15;
  void *v16;
  int v17;
  int v18;
  void *v19;
  void *v20;
  int v21;
  int v22;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v6 + 48);
  v8 = v7(a1, 1, v5);
  v9 = v7(a2, 1, v5);
  if (v8)
  {
    if (!v9)
    {
      (*(void (**)(void *, void *, uint64_t))(v6 + 16))(a1, a2, v5);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
      goto LABEL_10;
    }
  }
  else
  {
    if (!v9)
    {
      (*(void (**)(void *, void *, uint64_t))(v6 + 24))(a1, a2, v5);
      goto LABEL_10;
    }
    (*(void (**)(void *, uint64_t))(v6 + 8))(a1, v5);
  }
  if (*(_DWORD *)(v6 + 84))
    v10 = *(_QWORD *)(v6 + 64);
  else
    v10 = *(_QWORD *)(v6 + 64) + 1;
  memcpy(a1, a2, v10);
LABEL_10:
  if (*(_DWORD *)(v6 + 84))
    v11 = *(_QWORD *)(v6 + 64);
  else
    v11 = *(_QWORD *)(v6 + 64) + 1;
  v12 = *(unsigned __int8 *)(v6 + 80);
  v13 = v11 + v12;
  v14 = ~v12;
  v15 = (void *)(((unint64_t)a1 + v11 + v12) & ~v12);
  v16 = (void *)(((unint64_t)a2 + v11 + v12) & ~v12);
  v17 = v7(v15, 1, v5);
  v18 = v7(v16, 1, v5);
  if (v17)
  {
    if (!v18)
    {
      (*(void (**)(void *, void *, uint64_t))(v6 + 16))(v15, v16, v5);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v6 + 56))(v15, 0, 1, v5);
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  if (v18)
  {
    (*(void (**)(void *, uint64_t))(v6 + 8))(v15, v5);
LABEL_18:
    memcpy(v15, v16, v11);
    goto LABEL_19;
  }
  (*(void (**)(void *, void *, uint64_t))(v6 + 24))(v15, v16, v5);
LABEL_19:
  v19 = (void *)(((unint64_t)v15 + v13) & v14);
  v20 = (void *)(((unint64_t)v16 + v13) & v14);
  v21 = v7(v19, 1, v5);
  v22 = v7(v20, 1, v5);
  if (!v21)
  {
    if (!v22)
    {
      (*(void (**)(void *, void *, uint64_t))(v6 + 24))(v19, v20, v5);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v6 + 8))(v19, v5);
    goto LABEL_24;
  }
  if (v22)
  {
LABEL_24:
    memcpy(v19, v20, v11);
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v6 + 16))(v19, v20, v5);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v6 + 56))(v19, 0, 1, v5);
  return a1;
}

void *initializeWithTake for Stack3(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int (*v7)(const void *, uint64_t, uint64_t);
  int v8;
  size_t v9;
  size_t v10;
  size_t v11;
  uint64_t v12;
  size_t v13;
  uint64_t v14;
  void *v15;
  const void *v16;
  void *v17;
  const void *v18;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v6 + 48);
  if (v7(a2, 1, v5))
  {
    v8 = *(_DWORD *)(v6 + 84);
    v9 = *(_QWORD *)(v6 + 64);
    if (v8)
      v10 = *(_QWORD *)(v6 + 64);
    else
      v10 = v9 + 1;
    memcpy(a1, a2, v10);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v6 + 32))(a1, a2, v5);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
    v8 = *(_DWORD *)(v6 + 84);
    v9 = *(_QWORD *)(v6 + 64);
  }
  if (v8)
    v11 = v9;
  else
    v11 = v9 + 1;
  v12 = *(unsigned __int8 *)(v6 + 80);
  v13 = v11 + v12;
  v14 = ~v12;
  v15 = (void *)(((unint64_t)a1 + v11 + v12) & ~v12);
  v16 = (const void *)(((unint64_t)a2 + v11 + v12) & ~v12);
  if (v7(v16, 1, v5))
  {
    memcpy(v15, v16, v11);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v6 + 32))(v15, v16, v5);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v6 + 56))(v15, 0, 1, v5);
  }
  v17 = (void *)(((unint64_t)v15 + v13) & v14);
  v18 = (const void *)(((unint64_t)v16 + v13) & v14);
  if (v7(v18, 1, v5))
  {
    memcpy(v17, v18, v11);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v6 + 32))(v17, v18, v5);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v6 + 56))(v17, 0, 1, v5);
  }
  return a1;
}

void *assignWithTake for Stack3(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(void *, uint64_t, uint64_t);
  int v8;
  int v9;
  size_t v10;
  size_t v11;
  uint64_t v12;
  size_t v13;
  uint64_t v14;
  void *v15;
  void *v16;
  int v17;
  int v18;
  void *v19;
  void *v20;
  int v21;
  int v22;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v6 + 48);
  v8 = v7(a1, 1, v5);
  v9 = v7(a2, 1, v5);
  if (v8)
  {
    if (!v9)
    {
      (*(void (**)(void *, void *, uint64_t))(v6 + 32))(a1, a2, v5);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
      goto LABEL_10;
    }
  }
  else
  {
    if (!v9)
    {
      (*(void (**)(void *, void *, uint64_t))(v6 + 40))(a1, a2, v5);
      goto LABEL_10;
    }
    (*(void (**)(void *, uint64_t))(v6 + 8))(a1, v5);
  }
  if (*(_DWORD *)(v6 + 84))
    v10 = *(_QWORD *)(v6 + 64);
  else
    v10 = *(_QWORD *)(v6 + 64) + 1;
  memcpy(a1, a2, v10);
LABEL_10:
  if (*(_DWORD *)(v6 + 84))
    v11 = *(_QWORD *)(v6 + 64);
  else
    v11 = *(_QWORD *)(v6 + 64) + 1;
  v12 = *(unsigned __int8 *)(v6 + 80);
  v13 = v11 + v12;
  v14 = ~v12;
  v15 = (void *)(((unint64_t)a1 + v11 + v12) & ~v12);
  v16 = (void *)(((unint64_t)a2 + v11 + v12) & ~v12);
  v17 = v7(v15, 1, v5);
  v18 = v7(v16, 1, v5);
  if (v17)
  {
    if (!v18)
    {
      (*(void (**)(void *, void *, uint64_t))(v6 + 32))(v15, v16, v5);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v6 + 56))(v15, 0, 1, v5);
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  if (v18)
  {
    (*(void (**)(void *, uint64_t))(v6 + 8))(v15, v5);
LABEL_18:
    memcpy(v15, v16, v11);
    goto LABEL_19;
  }
  (*(void (**)(void *, void *, uint64_t))(v6 + 40))(v15, v16, v5);
LABEL_19:
  v19 = (void *)(((unint64_t)v15 + v13) & v14);
  v20 = (void *)(((unint64_t)v16 + v13) & v14);
  v21 = v7(v19, 1, v5);
  v22 = v7(v20, 1, v5);
  if (!v21)
  {
    if (!v22)
    {
      (*(void (**)(void *, void *, uint64_t))(v6 + 40))(v19, v20, v5);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v6 + 8))(v19, v5);
    goto LABEL_24;
  }
  if (v22)
  {
LABEL_24:
    memcpy(v19, v20, v11);
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v6 + 32))(v19, v20, v5);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v6 + 56))(v19, 0, 1, v5);
  return a1;
}

uint64_t getEnumTagSinglePayload for Stack3(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  char v10;
  int v11;
  unsigned int v12;
  int v13;
  unsigned int v15;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = v5 - 1;
  if (!v5)
    v6 = 0;
  v7 = *(_QWORD *)(v4 + 64);
  if (!v5)
    ++v7;
  if (!a2)
    return 0;
  v8 = a2 - v6;
  if (a2 > v6)
  {
    v9 = ((v7
         + *(unsigned __int8 *)(v4 + 80)
         + ((v7 + *(unsigned __int8 *)(v4 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80))) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80))
       + v7;
    v10 = 8 * v9;
    if (v9 > 3)
      goto LABEL_8;
    v12 = ((v8 + ~(-1 << v10)) >> v10) + 1;
    if (HIWORD(v12))
    {
      v11 = *(_DWORD *)(a1 + v9);
      if (v11)
        goto LABEL_15;
    }
    else
    {
      if (v12 <= 0xFF)
      {
        if (v12 < 2)
          goto LABEL_22;
LABEL_8:
        v11 = *(unsigned __int8 *)(a1 + v9);
        if (!*(_BYTE *)(a1 + v9))
          goto LABEL_22;
LABEL_15:
        v13 = (v11 - 1) << v10;
        if (v9 > 3)
          v13 = 0;
        if ((_DWORD)v9)
        {
          if (v9 > 3)
            LODWORD(v9) = 4;
          __asm { BR              X12 }
        }
        return v6 + v13 + 1;
      }
      v11 = *(unsigned __int16 *)(a1 + v9);
      if (*(_WORD *)(a1 + v9))
        goto LABEL_15;
    }
  }
LABEL_22:
  if (v5 < 2)
    return 0;
  v15 = (*(uint64_t (**)(void))(v4 + 48))();
  if (v15 >= 2)
    return v15 - 1;
  else
    return 0;
}

void storeEnumTagSinglePayload for Stack3(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  unsigned int v6;
  uint64_t v7;
  int v8;
  unsigned int v9;
  uint64_t v10;
  size_t v11;
  BOOL v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  int v16;

  v6 = 0;
  v7 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v8 = *(_DWORD *)(v7 + 84);
  v9 = v8 - 1;
  if (!v8)
    v9 = 0;
  v10 = *(_QWORD *)(v7 + 64);
  if (!v8)
    ++v10;
  v11 = ((v10
        + *(unsigned __int8 *)(v7 + 80)
        + ((v10 + *(unsigned __int8 *)(v7 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))
      + v10;
  v12 = a3 >= v9;
  v13 = a3 - v9;
  if (v13 != 0 && v12)
  {
    if (v11 > 3)
    {
      v6 = 1u;
      if (v9 < a2)
        goto LABEL_15;
      goto LABEL_22;
    }
    v14 = ((v13 + ~(-1 << (8 * v11))) >> (8 * v11)) + 1;
    if (HIWORD(v14))
    {
      v6 = 4u;
      if (v9 < a2)
      {
LABEL_15:
        v15 = ~v9 + a2;
        if (v11 < 4)
        {
          if ((_DWORD)v11)
          {
            v16 = v15 & ~(-1 << (8 * v11));
            bzero(a1, v11);
            if ((_DWORD)v11 == 3)
            {
              *a1 = v16;
              *((_BYTE *)a1 + 2) = BYTE2(v16);
            }
            else if ((_DWORD)v11 == 2)
            {
              *a1 = v16;
            }
            else
            {
              *(_BYTE *)a1 = v16;
            }
          }
        }
        else
        {
          bzero(a1, v11);
          *(_DWORD *)a1 = v15;
        }
        __asm { BR              X10 }
      }
LABEL_22:
      __asm { BR              X11 }
    }
    if (v14 >= 0x100)
      v6 = 2;
    else
      v6 = v14 > 1;
  }
  if (v9 < a2)
    goto LABEL_15;
  goto LABEL_22;
}

void sub_234D43BFC()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
}

void sub_234D43C04()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
}

uint64_t type metadata accessor for Stack3(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Stack3);
}

ValueMetadata *type metadata accessor for ExplodeTextEffect()
{
  return &type metadata for ExplodeTextEffect;
}

unint64_t lazy protocol witness table accessor for type NoTextEffectState and conformance NoTextEffectState()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NoTextEffectState and conformance NoTextEffectState;
  if (!lazy protocol witness table cache variable for type NoTextEffectState and conformance NoTextEffectState)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for NoTextEffectState, &type metadata for NoTextEffectState);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NoTextEffectState and conformance NoTextEffectState);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NoTextEffectState and conformance NoTextEffectState;
  if (!lazy protocol witness table cache variable for type NoTextEffectState and conformance NoTextEffectState)
  {
    result = MEMORY[0x23B7C9C04]("!\a;\x1BT\n\n", &type metadata for NoTextEffectState);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NoTextEffectState and conformance NoTextEffectState);
  }
  return result;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay7SwiftUI4TextVAFE6EffectO19SubcomponentKeyPathVG_So6CGRectVs5NeverOTg503_s7d11UI17Explodefg91V13configurationyAA0D0VAAE0E0O13ConfigurationVy__ACGSSFAH8DrawableVAH6TimingV_AH0H8Fragmentw78__ACGAH19QuantizationContextVtcfU_yAH12ClusterIndexV_AH09TransformL0VztcfU_So6k5VAH19hiJ6VXEfU_AJ16TransformContextVTf1cn_n(uint64_t a1, _QWORD *a2)
{
  int64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  uint64_t result;
  uint64_t v25;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = MEMORY[0x24BEE4AF8];
  if (!v2)
    return v3;
  v25 = MEMORY[0x24BEE4AF8];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2, 0);
  v3 = v25;
  v6 = a1 + 48;
  while (a2[34])
  {
    v7 = a2[42];
    v8 = *(_QWORD *)(v6 - 16);
    v9 = __OFSUB__(v8, v7);
    v10 = v8 - v7;
    if (v9)
    {
      __break(1u);
LABEL_14:
      __break(1u);
LABEL_15:
      __break(1u);
LABEL_16:
      __break(1u);
LABEL_17:
      __break(1u);
      break;
    }
    if ((v10 & 0x8000000000000000) != 0)
      goto LABEL_14;
    v11 = a2[43];
    if (v10 >= *(_QWORD *)(v11 + 16))
      goto LABEL_15;
    v12 = *(_QWORD *)(v6 - 8);
    if ((v12 & 0x8000000000000000) != 0)
      goto LABEL_16;
    if (v12 >= *(_QWORD *)(*(_QWORD *)(v11 + 56 * v10 + 56) + 16))
      goto LABEL_17;
    Text.Effect.PathInterpolator.Glyph.bounds(for:)();
    v14 = v13;
    v16 = v15;
    v18 = v17;
    v20 = v19;
    v22 = *(_QWORD *)(v25 + 16);
    v21 = *(_QWORD *)(v25 + 24);
    if (v22 >= v21 >> 1)
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v21 > 1, v22 + 1, 1);
    v6 += 24;
    *(_QWORD *)(v25 + 16) = v22 + 1;
    v23 = (_QWORD *)(v25 + 32 * v22);
    v23[4] = v14;
    v23[5] = v16;
    v23[6] = v18;
    v23[7] = v20;
    if (!--v2)
      return v3;
  }
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

Swift::Int specialized MutableCollection<>.sort(by:)(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  Swift::Int result;
  _QWORD v5[2];

  v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v2 = specialized _ContiguousArrayBuffer._consumeAndCreateNew()(v2);
  v3 = *(_QWORD *)(v2 + 16);
  v5[0] = v2 + 32;
  v5[1] = v3;
  result = specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(v5);
  *a1 = v2;
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  Swift::Int result;
  uint64_t v5[2];

  v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v2 = specialized _ContiguousArrayBuffer._consumeAndCreateNew()(v2);
  v3 = *(_QWORD *)(v2 + 16);
  v5[0] = v2 + 32;
  v5[1] = v3;
  result = specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(v5);
  *a1 = v2;
  return result;
}

double one-time initialization function for defaultSpring()
{
  double result;

  result = 15.612495;
  static ExplodeTextEffect.defaultSpring = xmmword_23529C920;
  qword_25622D190 = 0x3FF0000000000000;
  return result;
}

uint64_t closure #1 in ExplodeTextEffect.configuration(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  __n128 v13;
  uint64_t v14;
  __n128 v15;
  uint64_t (*v16)(void);
  uint64_t v17;
  unint64_t v18;
  uint64_t inited;
  int64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t result;
  __n128 v29[5];
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v6 = *(_QWORD *)(a1 + 16);
  v7 = *(_QWORD *)(a1 + 24);
  v8 = *(_QWORD *)(a1 + 32);
  v9 = *(_QWORD *)(a1 + 40);
  outlined retain of Text.Effect.DrawableFragment<SmallTextEffect>(a2);
  specialized Text.Effect.PathInterpolator.init<A>(_:quantization:options:)(a2, a3, 6, v29);
  v31 = v6;
  v32 = v7;
  v33 = v8;
  v34 = v9;
  v10 = swift_allocObject();
  *(_OWORD *)(v10 + 16) = *(_OWORD *)a1;
  *(_QWORD *)(v10 + 32) = v6;
  *(_QWORD *)(v10 + 40) = v7;
  *(_QWORD *)(v10 + 48) = v8;
  *(_QWORD *)(v10 + 56) = v9;
  v11 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(v10 + 64) = *(_OWORD *)a2;
  *(_OWORD *)(v10 + 80) = v11;
  *(_OWORD *)(v10 + 96) = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(v10 + 112) = *(_QWORD *)(a2 + 48);
  v12 = swift_allocObject();
  v13 = v29[3];
  *(__n128 *)(v12 + 48) = v29[2];
  *(__n128 *)(v12 + 64) = v13;
  *(__n128 *)(v12 + 80) = v29[4];
  v14 = v30;
  v15 = v29[1];
  *(__n128 *)(v12 + 16) = v29[0];
  *(__n128 *)(v12 + 32) = v15;
  *(_QWORD *)(v12 + 96) = v14;
  *(_QWORD *)(v12 + 104) = partial apply for closure #1 in closure #1 in ExplodeTextEffect.configuration(_:);
  *(_QWORD *)(v12 + 112) = v10;
  v16 = MEMORY[0x24BEE3598];
  type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<Text.Effect.Drawable.Fragment>, (uint64_t)&type metadata for Text.Effect.Drawable.Fragment, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
  v17 = swift_allocObject();
  *(_OWORD *)(v17 + 16) = xmmword_23527E860;
  *(_QWORD *)(v17 + 32) = partial apply for closure #1 in Text.Effect.DrawableFragment.transform(with:transform:);
  v18 = v17 + 32;
  *(_QWORD *)(v17 + 40) = v12;
  type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<Text.Effect.Drawable>, (uint64_t)&type metadata for Text.Effect.Drawable, (uint64_t (*)(_QWORD, uint64_t))v16);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_23527E860;
  *(_QWORD *)(inited + 32) = v17;
  v20 = *(_QWORD *)(v17 + 16);
  outlined retain of Text.Effect.DrawableFragment<SmallTextEffect>(a2);
  outlined retain of LinearGradient((uint64_t)&v31);
  outlined retain of LinearGradient((uint64_t)&v32);
  outlined retain of LinearGradient((uint64_t)&v33);
  outlined retain of LinearGradient((uint64_t)&v34);
  outlined retain of Text.Effect.PathInterpolator((uint64_t)v29);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v21 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v20, 1, MEMORY[0x24BEE4AF8]);
  v22 = v21;
  if (!*(_QWORD *)(v17 + 16))
  {
    if (!v20)
      goto LABEL_9;
    __break(1u);
    goto LABEL_11;
  }
  v23 = v21[2];
  if ((v21[3] >> 1) - v23 < v20)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  v24 = (unint64_t)&v21[2 * v23 + 4];
  if (v18 < v24 + 16 * v20 && v24 < v18 + 16 * v20)
    goto LABEL_13;
  swift_arrayInitWithCopy();
  if (!v20)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_setDeallocating();
    swift_arrayDestroy();
    outlined release of Text.Effect.PathInterpolator((uint64_t)v29);
    return (uint64_t)v22;
  }
  v25 = v22[2];
  v26 = __OFADD__(v25, v20);
  v27 = v25 + v20;
  if (!v26)
  {
    v22[2] = v27;
    goto LABEL_9;
  }
LABEL_12:
  __break(1u);
LABEL_13:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

__n128 specialized Text.Effect.PathInterpolator.init<A>(_:quantization:options:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, __n128 *a4@<X8>)
{
  __int128 v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __n128 result;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  __n128 v25;
  _QWORD *v26;
  _OWORD v27[3];
  unint64_t v28;

  v8 = *(_OWORD *)(a1 + 16);
  v27[0] = *(_OWORD *)a1;
  v27[1] = v8;
  v25 = *(__n128 *)(a1 + 16);
  v27[2] = *(_OWORD *)(a1 + 32);
  v9 = *(_QWORD *)(a1 + 48);
  v28 = v9;
  v10 = *(_QWORD *)a1;
  v22 = *(_QWORD *)(a1 + 8);
  v23 = *(_QWORD *)(a1 + 32);
  v24 = *(_QWORD *)(a1 + 40);
  outlined retain of Text.Effect.DrawableFragment<SmallTextEffect>((uint64_t)v27);
  v11 = MEMORY[0x24BEE4B00];
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v27, isUniquelyReferenced_nonNull_native, 0.0);
  swift_bridgeObjectRelease();
  outlined retain of Text.Effect.DrawableFragment<SmallTextEffect>(a1);
  outlined retain of Text.Effect.DrawableFragment<SmallTextEffect>(a1);
  swift_bridgeObjectRetain();
  v13 = specialized static Text.Effect.stopMarkers(_:)((uint64_t)v27);
  v15 = v14;
  outlined release of Text.Effect.BaseFragment(a1);
  v16 = Text.Effect.PathInterpolator.Map.computeFragment(quantization:stopMarkers:defaultKey:options:)(a2, v13, v15, a3, v11, 0.0);
  v18 = v17;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v19 = swift_bridgeObjectRetain();
  v26 = specialized _copyCollectionToContiguousArray<A>(_:)(v19);
  specialized MutableCollection<>.sort(by:)((uint64_t *)&v26);
  swift_bridgeObjectRelease();
  v20 = (uint64_t)v26;
  if (specialized static Array<A>.== infix(_:_:)((uint64_t)&outlined read-only object #0 of Text.Effect.PathInterpolator.MapKeys.init(_:), (uint64_t)v26))
  {
    swift_release();
    outlined release of Text.Effect.BaseFragment(a1);
    swift_bridgeObjectRelease();
    v20 = 0;
  }
  else if (specialized static Array<A>.== infix(_:_:)((uint64_t)&outlined read-only object #1 of Text.Effect.PathInterpolator.MapKeys.init(_:), v20))
  {
    swift_release();
    outlined release of Text.Effect.BaseFragment(a1);
    swift_bridgeObjectRelease();
    v20 = 1;
  }
  else if (specialized static Array<A>.== infix(_:_:)((uint64_t)&outlined read-only object #2 of Text.Effect.PathInterpolator.MapKeys.init(_:), v20))
  {
    swift_release();
    outlined release of Text.Effect.BaseFragment(a1);
    swift_bridgeObjectRelease();
    v20 = 2;
  }
  else
  {
    outlined release of Text.Effect.BaseFragment(a1);
    swift_bridgeObjectRelease();
  }
  a4->n128_u64[0] = v10;
  a4->n128_u64[1] = v22;
  result = v25;
  a4[1] = v25;
  a4[2].n128_u64[0] = v23;
  a4[2].n128_u64[1] = v24;
  a4[3].n128_u64[0] = v9;
  a4[3].n128_u64[1] = 0;
  a4[4].n128_u64[0] = v16;
  a4[4].n128_u64[1] = v18;
  a4[5].n128_u64[0] = v20;
  return result;
}

uint64_t closure #1 in closure #1 in ExplodeTextEffect.configuration(_:)(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t *v5;
  unint64_t v6;
  double v7;
  double v8;
  double v9;
  double v10;
  CGFloat v11;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  double v26;
  double v27;
  double v28;
  double v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  double v36;
  double v37;
  double v38;
  double v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  CGFloat v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  CGFloat v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  uint64_t v55;
  uint64_t v56;
  double v57;
  uint64_t v58;
  uint64_t v59;
  double v60;
  double v61;
  double v62;
  CGFloat v63;
  double v64;
  double v65;
  uint64_t v66;
  double v67;
  double v68;
  double v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char v85;
  int8x16_t v86;
  float32x4_t v87;
  int8x16_t v88;
  float32x4_t v89;
  double v90;
  float32x4_t v91;
  float32x4_t v92;
  unsigned __int32 v93;
  unsigned __int32 v94;
  unsigned __int32 v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t v98;
  double v99;
  double v100;
  double v101;
  double v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  char *v107;
  char *v108;
  uint64_t v109;
  uint64_t v110;
  double v111;
  double v112;
  double v113;
  double Height;
  uint64_t v115;
  double v116;
  double v117;
  uint64_t v118;
  double v119;
  double v120;
  double v121;
  double v122;
  CGFloat v123;
  CGFloat v124;
  CGFloat v125;
  CGFloat v126;
  CGSize v127;
  double v128;
  CGFloat v129;
  double v130;
  double v131;
  double v132;
  double v133;
  double v134;
  double v135;
  uint64_t v137;
  unint64_t v138;
  uint64_t v139;
  uint64_t v140;
  __int128 v141;
  CGFloat v142;
  CGFloat v143;
  uint64_t v144;
  CGFloat v145;
  __int128 v146;
  CGFloat v147;
  CGFloat v148;
  uint64_t v149;
  char *v150;
  uint64_t v151;
  char *v152;
  uint64_t v153;
  uint64_t v154;
  double v155;
  CGFloat v156;
  CGFloat v157;
  uint64_t v158;
  uint64_t v159;
  float32x4_t v160;
  int8x16_t v161;
  unint64_t v162;
  double v163;
  uint64_t v164;
  uint64_t v165;
  _OWORD v166[24];
  char v167;
  char v168;
  _QWORD v169[9];
  char v170;
  CGFloat v171[8];
  CGRect v172;
  __C::CGRect v173;
  CGRect v174;
  CGRect v175;
  __C::CGRect v176;

  type metadata accessor for FontBox<Font.SystemProvider>(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<Text.Layout.CharacterIndex>, (uint64_t (*)(void))lazy protocol witness table accessor for type Text.Layout.CharacterIndex and conformance Text.Layout.CharacterIndex, (uint64_t)&type metadata for Text.Layout.CharacterIndex, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE4968]);
  v153 = *(_QWORD *)(v16 - 8);
  v154 = v16;
  MEMORY[0x24BDAC7A8](v16);
  v152 = (char *)&v137 - v17;
  type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for RangeSet<Text.Layout.CharacterIndex>.Ranges, (uint64_t (*)(void))lazy protocol witness table accessor for type Text.Layout.CharacterIndex and conformance Text.Layout.CharacterIndex, (uint64_t)&type metadata for Text.Layout.CharacterIndex, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE4908]);
  v149 = *(_QWORD *)(v18 - 8);
  MEMORY[0x24BDAC7A8](v18);
  v21 = (char *)&v137 - v20;
  if ((a1 & 0x8000000000000000) != 0)
  {
LABEL_63:
    __break(1u);
    goto LABEL_64;
  }
  v22 = *(_QWORD *)(a3 + 16);
  if (*(_QWORD *)(v22 + 16) <= a1)
  {
LABEL_64:
    __break(1u);
    goto LABEL_65;
  }
  v23 = *(_QWORD *)(a3 + 32);
  if (*(_QWORD *)(v23 + 16) <= a1)
  {
LABEL_65:
    __break(1u);
LABEL_66:
    __break(1u);
    goto LABEL_67;
  }
  v150 = v21;
  v151 = v19;
  v24 = v22 + 32 * a1;
  v25 = *(_QWORD *)(v24 + 48);
  v26 = *(double *)(v23 + 40 * a1 + 32);
  v27 = *(double *)(a2 + 32);
  v28 = *(double *)(a2 + 40);
  v29 = v28 - v27;
  v142 = *(double *)&a4;
  if (v28 - v27 >= 0.0)
  {
    v155 = 0.0;
    if (v29 <= v26)
      goto LABEL_9;
    goto LABEL_8;
  }
  v29 = 0.0;
  v155 = 0.0;
  if (v26 < 0.0)
LABEL_8:
    v155 = v29 - v26;
LABEL_9:
  v163 = *(double *)(v24 + 32);
  v30 = *(_BYTE *)(a2 + 16);
  v31 = *(_QWORD *)(a2 + 24);
  v32 = *(_QWORD *)(a2 + 48);
  v33 = *(_QWORD *)(a2 + 64);
  v34 = *(_BYTE *)(a2 + 72);
  v35 = *(_QWORD *)(a2 + 96);
  v36 = *(double *)(a2 + 104);
  v7 = *(double *)(a2 + 208);
  v8 = *(double *)(a2 + 216);
  v9 = *(double *)(a2 + 224);
  v37 = *(double *)(a2 + 232);
  v39 = *(double *)(a2 + 240);
  v38 = *(double *)(a2 + 248);
  v40 = *(_QWORD *)(a2 + 256);
  v5 = *(uint64_t **)(a2 + 264);
  v6 = *(_QWORD *)(a2 + 272);
  v41 = *(uint64_t *)(a2 + 280);
  v42 = *(_QWORD *)(a2 + 288);
  v43 = *(uint64_t *)(a2 + 296);
  v44 = *(double *)(a2 + 304);
  v45 = *(_QWORD *)(a2 + 312);
  v46 = *(_QWORD *)(a2 + 320);
  v47 = *(uint64_t *)(a2 + 328);
  v48 = *(double *)(a2 + 336);
  v49 = *(_QWORD *)(a2 + 344);
  v50 = *(_QWORD *)(a2 + 368);
  v51 = *(_BYTE *)(a2 + 376);
  v168 = *(_BYTE *)(a2 + 56);
  v167 = v51;
  v146 = *(_OWORD *)a2;
  v166[0] = v146;
  LOBYTE(v166[1]) = v30;
  *((_QWORD *)&v166[1] + 1) = v31;
  *(double *)&v166[2] = v27;
  *((double *)&v166[2] + 1) = v28;
  *(_QWORD *)&v166[3] = v32;
  BYTE8(v166[3]) = v168;
  *(_QWORD *)&v166[4] = v33;
  BYTE8(v166[4]) = v34;
  v166[5] = *(_OWORD *)(a2 + 80);
  *(_QWORD *)&v166[6] = v35;
  *((double *)&v166[6] + 1) = v36;
  v143 = v36;
  v52 = *(_OWORD *)(a2 + 128);
  v166[7] = *(_OWORD *)(a2 + 112);
  v166[8] = v52;
  v53 = *(_OWORD *)(a2 + 160);
  v166[9] = *(_OWORD *)(a2 + 144);
  v166[10] = v53;
  v54 = *(_OWORD *)(a2 + 192);
  v166[11] = *(_OWORD *)(a2 + 176);
  v166[12] = v54;
  *(double *)&v166[13] = v7;
  *((double *)&v166[13] + 1) = v8;
  *(double *)&v166[14] = v9;
  *((double *)&v166[14] + 1) = v37;
  *(double *)&v166[15] = v39;
  *((double *)&v166[15] + 1) = v38;
  *(_QWORD *)&v166[16] = v40;
  *((_QWORD *)&v166[16] + 1) = v5;
  *(_QWORD *)&v166[17] = v6;
  a4 = v41;
  *((_QWORD *)&v166[17] + 1) = v41;
  v4 = v42;
  *(_QWORD *)&v166[18] = v42;
  v158 = v43;
  v159 = v47;
  *((_QWORD *)&v166[18] + 1) = v43;
  v147 = v48;
  v148 = v44;
  *(CGFloat *)&v166[19] = v44;
  v161.i64[0] = v45;
  *((_QWORD *)&v166[19] + 1) = v45;
  v160.i64[0] = v46;
  *(_QWORD *)&v166[20] = v46;
  *((_QWORD *)&v166[20] + 1) = v47;
  *(CGFloat *)&v166[21] = v48;
  v144 = v49;
  *((_QWORD *)&v166[21] + 1) = v49;
  v141 = *(_OWORD *)(a2 + 352);
  v166[22] = v141;
  *(_QWORD *)&v166[23] = v50;
  BYTE8(v166[23]) = v51;
  v139 = v25;
  swift_bridgeObjectRetain();
  v162 = a1;
  v55 = Text.Effect.TransformContext.subcomponents(for:)(a1);
  v56 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay7SwiftUI4TextVAFE6EffectO19SubcomponentKeyPathVG_So6CGRectVs5NeverOTg503_s7d11UI17Explodefg91V13configurationyAA0D0VAAE0E0O13ConfigurationVy__ACGSSFAH8DrawableVAH6TimingV_AH0H8Fragmentw78__ACGAH19QuantizationContextVtcfU_yAH12ClusterIndexV_AH09TransformL0VztcfU_So6k5VAH19hiJ6VXEfU_AJ16TransformContextVTf1cn_n(v55, (_QWORD *)a2);
  swift_bridgeObjectRelease();
  v10 = *MEMORY[0x24BDBF070];
  v11 = *(double *)(MEMORY[0x24BDBF070] + 8);
  v57 = *(double *)(MEMORY[0x24BDBF070] + 16);
  v156 = *(double *)(MEMORY[0x24BDBF070] + 24);
  v157 = v57;
  v58 = *(_QWORD *)(v56 + 16);
  if (v58)
  {
    swift_bridgeObjectRetain();
    v59 = v56 + 56;
    v61 = v156;
    v60 = v157;
    do
    {
      v62 = v10;
      v63 = v11;
      *(CGRect *)(&v60 - 2) = CGRectUnion(*(CGRect *)(&v60 - 2), *(CGRect *)(v59 - 24));
      v10 = v64;
      v11 = v65;
      v59 += 32;
      --v58;
    }
    while (v58);
    v156 = v61;
    v157 = v60;
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  v66 = v146;
  if (__OFSUB__((_QWORD)v146, v162))
    goto LABEL_66;
  v67 = 0.0;
  if ((_QWORD)v146 == v162)
    v68 = v7;
  else
    v68 = 0.0;
  if ((_QWORD)v146 == v162)
    v7 = v8;
  else
    v7 = 0.0;
  if ((_QWORD)v146 == v162)
    v69 = v9;
  else
    v69 = 0.0;
  if ((_QWORD)v146 == v162)
    v8 = v37;
  else
    v8 = 0.0;
  if ((_QWORD)v146 == v162)
    v9 = v39;
  else
    v9 = 0.0;
  v145 = v69;
  *(double *)&v146 = v68;
  v171[0] = v68;
  v171[1] = v7;
  v171[2] = v69;
  v171[3] = v8;
  if (v66 == v162)
    v67 = v38;
  v171[4] = v9;
  v171[5] = v67;
  if (v6)
  {
    v70 = v141;
    outlined copy of Text.Effect.TransformContext.DrawingMode(v6, a4, v4, v158, *(uint64_t *)&v148, v161.i64[0], v160.i64[0], v159, *(uint64_t *)&v147, v144, v141);
    swift_retain();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    *(_QWORD *)&v141 = v70;
    outlined copy of Text.Effect.PathInterpolator.MapKeys(v70);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
    {
LABEL_33:
      v72 = v5[2];
      v71 = v5[3];
      v140 = v72 + 1;
      if (v72 >= v71 >> 1)
        v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v71 > 1), v72 + 1, 1, v5);
      *(_QWORD *)&v166[0] = v6;
      *((_QWORD *)&v166[0] + 1) = a4;
      *(_QWORD *)&v166[1] = v4;
      *((_QWORD *)&v166[1] + 1) = v158;
      v138 = v6;
      v73 = *(_QWORD *)&v147;
      v74 = *(_QWORD *)&v148;
      *(CGFloat *)&v166[2] = v148;
      *((_QWORD *)&v166[2] + 1) = v161.i64[0];
      *(_QWORD *)&v166[3] = v160.i64[0];
      *((_QWORD *)&v166[3] + 1) = v159;
      v75 = v144;
      *(CGFloat *)&v166[4] = v147;
      *((_QWORD *)&v166[4] + 1) = v144;
      *(_OWORD *)((char *)&v166[5] + 8) = 0u;
      *(_OWORD *)((char *)&v166[6] + 8) = 0u;
      *(_OWORD *)((char *)&v166[7] + 8) = 0u;
      __asm { FMOV            V0.2D, #1.0 }
      *(_OWORD *)((char *)&v166[8] + 8) = _Q0;
      v81 = v141;
      *(_QWORD *)&v166[5] = v141;
      *((_QWORD *)&v166[9] + 1) = 0x3FF0000000000000;
      LOBYTE(v166[10]) = 0;
      _s7SwiftUI4TextVAAE6EffectO11DisplayInfoV13DrawOperationOWOi1_((uint64_t)v166);
      v5[2] = v140;
      outlined init with take of Text.Effect.DisplayInfo.DrawOperation((uint64_t)v166, (uint64_t)&v5[27 * v72 + 4]);
      outlined consume of Text.Effect.TransformContext.DrawingMode(v138, a4, v4, v158, v74, v161.i64[0], v160.i64[0], v159, v73, v75, v81);
      *(_QWORD *)(a2 + 264) = v5;
      goto LABEL_36;
    }
LABEL_67:
    v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5[2] + 1, 1, v5);
    goto LABEL_33;
  }
LABEL_36:
  if (v143 != 0.0)
  {
    type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for Text.Effect.ConcreteConfiguration<ExplodeTextEffect>, (uint64_t (*)(void))lazy protocol witness table accessor for type ExplodeTextEffect and conformance ExplodeTextEffect, (uint64_t)&type metadata for ExplodeTextEffect, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for Text.Effect.ConcreteConfiguration);
    v82 = swift_dynamicCastClass();
    if (v82)
    {
      if ((*(_BYTE *)(v82 + 32) & 1) == 0)
      {
        v83 = *(_QWORD *)(v82 + 36);
        v84 = *(_QWORD *)(v82 + 44);
        v85 = *(_BYTE *)(v82 + 52);
        v161 = *(int8x16_t *)(v82 + 16);
        if (one-time initialization token for legacyInterpolation != -1)
          swift_once();
        swift_beginAccess();
        if ((static Color.Resolved.legacyInterpolation & 1) == 0)
        {
          LOBYTE(v169[0]) = 2;
          ResolvedGradient.ColorSpace.convertIn(_:)((float *)v166, v161, *(float *)&v161.i32[1], v161.u32[2], *(float *)&v161.i32[3], v86);
          v161 = (int8x16_t)v166[0];
        }
        if ((v85 & 1) == 0)
        {
          v87.i64[0] = 0x4300000043000000;
          v87.i64[1] = 0x4300000043000000;
          v88.i64[0] = v83;
          v88.i64[1] = v84;
          if ((static Color.Resolved.legacyInterpolation & 1) == 0)
          {
            LOBYTE(v169[0]) = 2;
            ResolvedGradient.ColorSpace.convertIn(_:)((float *)v166, v88, *((float *)&v83 + 1), v84, *((float *)&v84 + 1), v86);
            v87.i64[0] = 0x4300000043000000;
            v87.i64[1] = 0x4300000043000000;
            v88 = (int8x16_t)v166[0];
          }
          v89.i64[0] = 0x4300000043000000;
          v89.i64[1] = 0x4300000043000000;
          v160 = vmulq_f32((float32x4_t)v88, v89);
          v161 = (int8x16_t)vmulq_f32((float32x4_t)v161, v87);
          if (one-time initialization token for color != -1)
            swift_once();
          specialized ExplodeTextEffect.Timeline.value(at:)(static ExplodeTextEffect.Target.color, v155);
          *(float *)&v90 = v90;
          v91.i64[0] = 0x3C0000003C000000;
          v91.i64[1] = 0x3C0000003C000000;
          v92 = vmulq_f32(vaddq_f32((float32x4_t)v161, vmulq_n_f32(vsubq_f32(v160, (float32x4_t)v161), *(float *)&v90)), v91);
          if ((static Color.Resolved.legacyInterpolation & 1) != 0)
          {
            v93 = v92.u32[1];
            v95 = v92.u32[3];
            v94 = v92.u32[2];
          }
          else
          {
            LOBYTE(v169[0]) = 2;
            v166[0] = v92;
            v92.f32[0] = ResolvedGradient.ColorSpace.convertOut(_:)((float *)v166);
          }
          *(_QWORD *)(a2 + 360) = v92.u32[0] | ((unint64_t)v93 << 32);
          *(_QWORD *)(a2 + 368) = v94 | ((unint64_t)v95 << 32);
          *(_BYTE *)(a2 + 376) = 0;
        }
      }
    }
  }
  v147 = v11;
  v148 = v10;
  memcpy(v166, (const void *)a2, 0x179uLL);
  v140 = Text.Effect.TransformContext.subcomponents(for:)(v162);
  v4 = *(_QWORD *)(v140 + 16);
  if (v4)
  {
    v96 = *(_QWORD *)(*(_QWORD *)&v142 + 24);
    v142 = v8 + v9;
    v143 = v7 - v8;
    *(double *)&v141 = v163 + -0.5 + v163 + -0.5;
    v144 = v96
         + OBJC_IVAR____TtCVVOE7SwiftUIVS_4Text6Effect14KeyframeLayout8FragmentP33_FDECD420473C8A183CD8DF57060B1B937Storage_characterRanges;
    v5 = (uint64_t *)(v140 + 48);
    v10 = v155;
    do
    {
      v6 = *(v5 - 2);
      v97 = *(v5 - 1);
      v98 = *v5;
      a4 = a2;
      memcpy(v166, (const void *)a2, 0x179uLL);
      v162 = v97;
      Text.Effect.TransformContext.subcomponentBounds(for:)(v6, v97);
      v11 = v99;
      v8 = v100;
      v7 = v101;
      v9 = v102;
      v103 = v152;
      v104 = v153;
      v105 = v154;
      (*(void (**)(char *, uint64_t, uint64_t))(v153 + 16))(v152, v144, v154);
      v106 = v150;
      RangeSet.ranges.getter();
      v107 = v103;
      v108 = v106;
      (*(void (**)(char *, uint64_t))(v104 + 8))(v107, v105);
      a2 = v151;
      v109 = RangeSet.Ranges.count.getter();
      *(double *)v161.i64 = v7;
      *(double *)v160.i64 = v9;
      if (v109 == 1)
      {
        RangeSet.Ranges.subscript.getter();
        RangeSet.Ranges.subscript.getter();
        v110 = v165 - v164;
        v111 = v163;
        if (__OFSUB__(v165, v164))
        {
          __break(1u);
          goto LABEL_63;
        }
        (*(void (**)(char *, uint64_t))(v149 + 8))(v108, a2);
      }
      else
      {
        (*(void (**)(char *, uint64_t))(v149 + 8))(v106, a2);
        v110 = 0;
        v111 = v163;
      }
      specialized ExplodeTextEffect.Target.amplitude(for:at:of:)(v110, v111);
      v113 = v112;
      v172.size.width = v145;
      *(_QWORD *)&v172.origin.x = v146;
      v172.size.height = v142;
      v172.origin.y = v143;
      Height = CGRectGetHeight(v172);
      a2 = a4;
      if (one-time initialization token for z != -1)
        swift_once();
      v5 += 3;
      v115 = static ExplodeTextEffect.Target.z;
      specialized ExplodeTextEffect.Timeline.value(at:)(static ExplodeTextEffect.Target.z, v10);
      v117 = exp(Height * 3.0 * (v113 * 1.5 + 0.25) * v116 / Height);
      *(double *)&v158 = ExplodeTextEffect.Target.translation(for:at:of:)(v171, v110, v111, v10);
      v159 = v118;
      ExplodeTextEffect.Target.vibration(for:at:)(v171, v111, v10);
      v120 = v119;
      v122 = v121;
      v173.origin.x = v11;
      v173.origin.y = v8;
      *(_QWORD *)&v173.size.width = v161.i64[0];
      *(_QWORD *)&v173.size.height = v160.i64[0];
      v123 = v147;
      v124 = v148;
      v176.origin.x = v148;
      v176.origin.y = v147;
      v126 = v156;
      v125 = v157;
      v176.size.width = v157;
      v176.size.height = v156;
      v127 = ExplodeTextEffect.Target.subcomponentTranslation(for:in:)(v173, v176);
      *(double *)v160.i64 = v117 * (*(double *)&v158 + v120 + v127.width) + 0.0;
      v128 = v117 * (*(double *)&v159 + v122 + v127.height) + 0.0;
      v174.origin.x = v124;
      v174.origin.y = v123;
      v174.size.width = v125;
      v174.size.height = v126;
      *(double *)v161.i64 = CGRectGetMidX(v174) + *(double *)v160.i64;
      v175.origin.x = v124;
      v175.origin.y = v123;
      v175.size.width = v125;
      v175.size.height = v126;
      v129 = CGRectGetMidY(v175) + v128;
      v130 = v163;
      specialized ExplodeTextEffect.Target.amplitude(for:at:of:)(v110, v163);
      v132 = *(double *)&v141 * (v131 + 0.5) * 10.0;
      specialized ExplodeTextEffect.Timeline.value(at:)(v115, v10);
      v134 = v133 * v132;
      v135 = ExplodeTextEffect.Target.opacity(for:at:of:)(v171, v110, v130, v10);
      v169[0] = 0;
      v169[1] = v160.i64[0];
      *(double *)&v169[2] = v128;
      *(double *)&v169[3] = v134;
      v169[4] = v161.i64[0];
      *(CGFloat *)&v169[5] = v129;
      *(double *)&v169[6] = v117;
      *(double *)&v169[7] = v117;
      *(double *)&v169[8] = v135;
      v170 = 0;
      Text.Effect.TransformContext.draw(position:for:)((uint64_t)v169, v6, v162, v98);
      --v4;
    }
    while (v4);
  }
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t specialized ExplodeTextEffect.Timeline.value(at:)(uint64_t result, double a2)
{
  uint64_t v2;
  double v3;
  uint64_t v4;
  uint64_t i;
  void (**v6)(uint64_t, double);
  void (*v7)(uint64_t, double);
  double v8;
  uint64_t v9;

  v2 = *(_QWORD *)(result + 16);
  if (v2)
  {
    v3 = *(double *)(result + 48);
    if (v3 >= a2)
    {
      v6 = (void (**)(uint64_t, double))(result + 56);
LABEL_11:
      v7 = *v6;
      v8 = a2 / v3;
      v9 = swift_retain();
      v7(v9, v8);
      return swift_release();
    }
    v4 = v2 - 1;
    if (v2 != 1)
    {
      a2 = a2 - v3;
      for (i = result + 104; ; i += 40)
      {
        v3 = *(double *)(i - 16);
        if (v3 >= a2)
          break;
        a2 = a2 - v3;
        if (!--v4)
          return result;
      }
      v6 = (void (**)(uint64_t, double))(i - 8);
      goto LABEL_11;
    }
  }
  return result;
}

double ExplodeTextEffect.Target.translation(for:at:of:)(CGFloat *a1, uint64_t a2, double a3, double a4)
{
  double v7;
  double Height;
  double v9;
  double v10;
  double v11;
  double v12;
  CGRect v14;

  v14.origin.x = *a1;
  v14.size.width = a1[2];
  v7 = a1[3];
  v14.origin.y = a1[1] - v7;
  v14.size.height = v7 + a1[4];
  Height = CGRectGetHeight(v14);
  specialized ExplodeTextEffect.Target.amplitude(for:at:of:)(a2, a3);
  v10 = v9;
  if (one-time initialization token for x != -1)
    swift_once();
  specialized ExplodeTextEffect.Timeline.value(at:)(static ExplodeTextEffect.Target.x, a4);
  v12 = v11;
  if (one-time initialization token for y != -1)
    swift_once();
  specialized ExplodeTextEffect.Timeline.value(at:)(static ExplodeTextEffect.Target.y, a4);
  return (1.0 - v10) * ((a3 + -0.5 + a3 + -0.5) * (Height * 3.0) * v12);
}

uint64_t ExplodeTextEffect.Target.vibration(for:at:)(CGFloat *a1, double a2, double a3)
{
  double v5;
  uint64_t result;
  uint64_t v12;
  unint64_t v13;
  CGRect v14;

  if (one-time initialization token for vibration != -1)
    swift_once();
  specialized ExplodeTextEffect.Timeline.value(at:)(static ExplodeTextEffect.Target.vibration, a3);
  v14.origin.x = *a1;
  v14.size.width = a1[2];
  v5 = a1[3];
  v14.origin.y = a1[1] - v5;
  v14.size.height = v5 + a1[4];
  CGRectGetHeight(v14);
  result = Double.hashValue.getter();
  if (__OFADD__(result, 123))
  {
    __break(1u);
    goto LABEL_9;
  }
  v12 = result + 123;
  v13 = 0xDA3E39CB94B95BDBLL;
  specialized static BinaryFloatingPoint<>.random<A>(in:using:)((unint64_t *)&v12, 0.0, 1.0);
  result = Double.hashValue.getter();
  if (__OFADD__(result, 123))
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  v12 = result + 123;
  v13 = 0xDA3E39CB94B95BDBLL;
  specialized static BinaryFloatingPoint<>.random<A>(in:using:)((unint64_t *)&v12, 0.0, 1.0);
  result = Double.hashValue.getter();
  if (__OFADD__(result, 123))
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  v12 = result + 123;
  v13 = 0xDA3E39CB94B95BDBLL;
  specialized static BinaryFloatingPoint<>.random<A>(in:using:)((unint64_t *)&v12, 0.0, 1.0);
  result = Double.hashValue.getter();
  if (!__OFADD__(result, 123))
  {
    v12 = result + 123;
    v13 = 0xDA3E39CB94B95BDBLL;
    result = (uint64_t)specialized static BinaryFloatingPoint<>.random<A>(in:using:)((unint64_t *)&v12, 0.0, 1.0);
    __asm { FMOV            V1.2D, #-1.0 }
    return result;
  }
LABEL_11:
  __break(1u);
  return result;
}

CGSize __swiftcall ExplodeTextEffect.Target.subcomponentTranslation(for:in:)(__C::CGRect a1, __C::CGRect in)
{
  CGFloat y;
  CGFloat x;
  double v4;
  CGFloat height;
  CGFloat width;
  CGFloat v7;
  CGFloat v8;
  CGFloat v9;
  CGFloat v10;
  double MidY;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  CGSize result;
  CGFloat v26;
  double v27;
  double MidX;
  CGFloat rect;
  double v30;
  CGRect v31;
  CGRect v32;
  CGRect v33;
  CGRect v34;
  CGRect v35;

  y = a1.origin.y;
  x = a1.origin.x;
  v4 = 0.0;
  if (v30 >= 2.38333333)
  {
    v13 = 0.0;
  }
  else
  {
    height = in.size.height;
    width = in.size.width;
    v7 = in.origin.y;
    v8 = a1.size.height;
    v9 = a1.size.width;
    v10 = in.origin.x;
    MidX = CGRectGetMidX((CGRect)a1);
    v31.origin.x = v10;
    v31.origin.y = v7;
    v31.size.width = width;
    v31.size.height = height;
    v27 = CGRectGetMidX(v31);
    v32.origin.x = x;
    v32.origin.y = y;
    v32.size.width = v9;
    v32.size.height = v8;
    MidY = CGRectGetMidY(v32);
    rect = v10;
    v33.origin.x = v10;
    v26 = v7;
    v33.origin.y = v7;
    v33.size.width = width;
    v33.size.height = height;
    v12 = CGRectGetMidY(v33);
    if (vabdd_f64(MidX, v27) < 0.001)
    {
      v13 = 0.0;
      v4 = 0.0;
    }
    else
    {
      v13 = 0.0;
      v4 = 0.0;
      if (vabdd_f64(MidY, v12) >= 0.001)
      {
        v14 = MidX - v27;
        v15 = MidY - v12;
        v16 = sqrt(v14 * v14 + v15 * v15);
        v34.origin.x = rect;
        v34.origin.y = v26;
        v34.size.width = width;
        v34.size.height = height;
        v17 = CGRectGetWidth(v34);
        if (one-time initialization token for x != -1)
          swift_once();
        v18 = v14 / v16;
        v19 = v15 / v16;
        specialized ExplodeTextEffect.Timeline.value(at:)(static ExplodeTextEffect.Target.x, v30);
        v21 = v17 * v20 * 0.4;
        v35.origin.x = rect;
        v35.origin.y = v26;
        v35.size.width = width;
        v35.size.height = height;
        v22 = CGRectGetHeight(v35);
        if (one-time initialization token for y != -1)
          swift_once();
        v4 = v18 * v21;
        specialized ExplodeTextEffect.Timeline.value(at:)(static ExplodeTextEffect.Target.y, v30);
        v13 = v19 * (v22 * v23);
      }
    }
  }
  v24 = v4;
  result.height = v13;
  result.width = v24;
  return result;
}

double ExplodeTextEffect.Target.opacity(for:at:of:)(CGFloat *a1, uint64_t a2, double a3, double a4)
{
  double v6;
  double v7;
  double v8;
  double Height;
  double v10;
  double v11;
  double v12;
  double result;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  CGRect v21;

  specialized ExplodeTextEffect.Target.amplitude(for:at:of:)(a2, a3);
  v7 = v6;
  v21.origin.x = *a1;
  v21.size.width = a1[2];
  v8 = a1[3];
  v21.origin.y = a1[1] - v8;
  v21.size.height = v8 + a1[4];
  Height = CGRectGetHeight(v21);
  v10 = (v7 * 1.5 + 0.25) * (Height * 3.0);
  if (one-time initialization token for z != -1)
    swift_once();
  specialized ExplodeTextEffect.Timeline.value(at:)(static ExplodeTextEffect.Target.z, a4);
  v12 = exp(v10 * v11 / Height);
  if (v12 >= 4.0)
  {
    v14 = v12 + -4.0;
    v15 = v14 * 0.5;
    if (v14 < 0.0)
      v15 = 0.0;
    if (v14 <= 2.0)
      v16 = v15;
    else
      v16 = 1.0;
    if (one-time initialization token for alpha != -1)
      swift_once();
    specialized ExplodeTextEffect.Timeline.value(at:)(static ExplodeTextEffect.Target.alpha, a4);
    v18 = 1.0 - v16 * v16;
    if (v18 < 0.0)
      v19 = 0.0;
    else
      v19 = 1.0 - v16 * v16;
    if (v18 <= 1.0)
      v20 = v19;
    else
      v20 = 1.0;
    return v20 * v17;
  }
  else
  {
    if (one-time initialization token for alpha != -1)
      swift_once();
    specialized ExplodeTextEffect.Timeline.value(at:)(static ExplodeTextEffect.Target.alpha, a4);
  }
  return result;
}

double one-time initialization function for alpha(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v10;
  uint64_t v11;
  double result;

  type metadata accessor for _ContiguousArrayStorage<ExplodeTextEffect.Timeline<Double>.Keyframe>(0, a2, a3, a4);
  v4 = swift_allocObject();
  __asm { FMOV            V1.2D, #1.0 }
  *(_OWORD *)(v4 + 16) = xmmword_23528B7A0;
  *(_OWORD *)(v4 + 32) = _Q1;
  *(_QWORD *)(v4 + 48) = 0x3FEB333333333333;
  *(_QWORD *)(v4 + 56) = _ViewInputs.base.modify;
  *(_QWORD *)(v4 + 64) = 0;
  v10 = swift_allocObject();
  *(_OWORD *)(v10 + 16) = xmmword_23529C930;
  *(_OWORD *)(v10 + 32) = xmmword_23529C940;
  *(_BYTE *)(v10 + 48) = 0;
  *(_OWORD *)(v4 + 72) = xmmword_235281560;
  *(_QWORD *)(v4 + 88) = 0x3FEF74BC6A7EF9DBLL;
  *(_QWORD *)(v4 + 96) = implicit closure #2 in implicit closure #1 in ExplodeTextEffect.Timeline.Keyframe.init(from:to:duration:curve:)partial apply;
  *(_QWORD *)(v4 + 104) = v10;
  *(_QWORD *)(v4 + 112) = 0;
  *(_QWORD *)(v4 + 120) = 0;
  *(_QWORD *)(v4 + 128) = 0x3FE6E147AE147AE1;
  *(_QWORD *)(v4 + 136) = _ViewInputs.base.modify;
  *(_QWORD *)(v4 + 144) = 0;
  v11 = swift_allocObject();
  *(_OWORD *)(v11 + 16) = xmmword_23529C930;
  *(_OWORD *)(v11 + 32) = xmmword_23529C940;
  *(_BYTE *)(v11 + 48) = 0;
  result = 0.0;
  *(_OWORD *)(v4 + 152) = xmmword_23528A280;
  *(_QWORD *)(v4 + 168) = 0x3FBDB22D0E560419;
  *(_QWORD *)(v4 + 176) = implicit closure #2 in implicit closure #1 in ExplodeTextEffect.Timeline.Keyframe.init(from:to:duration:curve:)partial apply;
  *(_QWORD *)(v4 + 184) = v11;
  static ExplodeTextEffect.Target.alpha = v4;
  return result;
}

double one-time initialization function for color(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v11;
  double result;

  type metadata accessor for _ContiguousArrayStorage<ExplodeTextEffect.Timeline<Double>.Keyframe>(0, a2, a3, a4);
  v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_23528B7A0;
  *(_QWORD *)(v4 + 32) = 0;
  *(_QWORD *)(v4 + 40) = 0;
  *(_QWORD *)(v4 + 48) = 0x3FE8000000000000;
  *(_QWORD *)(v4 + 56) = _ViewInputs.base.modify;
  *(_QWORD *)(v4 + 64) = 0;
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_23529C930;
  *(_OWORD *)(v5 + 32) = xmmword_23529C940;
  *(_BYTE *)(v5 + 48) = 0;
  *(_OWORD *)(v4 + 72) = xmmword_23528A280;
  *(_QWORD *)(v4 + 88) = 0x3FEF74BC6A7EF9DBLL;
  *(_QWORD *)(v4 + 96) = partial apply for implicit closure #2 in implicit closure #1 in ExplodeTextEffect.Timeline.Keyframe.init(from:to:duration:curve:);
  *(_QWORD *)(v4 + 104) = v5;
  __asm { FMOV            V0.2D, #1.0 }
  *(_OWORD *)(v4 + 112) = _Q0;
  *(_QWORD *)(v4 + 128) = 0x3FE6E147AE147AE1;
  *(_QWORD *)(v4 + 136) = _ViewInputs.base.modify;
  *(_QWORD *)(v4 + 144) = 0;
  v11 = swift_allocObject();
  *(_OWORD *)(v11 + 16) = xmmword_23529C930;
  *(_OWORD *)(v11 + 32) = xmmword_23529C940;
  *(_BYTE *)(v11 + 48) = 0;
  result = 1.0;
  *(_OWORD *)(v4 + 152) = xmmword_235281560;
  *(_QWORD *)(v4 + 168) = 0x3FBDB22D0E560419;
  *(_QWORD *)(v4 + 176) = implicit closure #2 in implicit closure #1 in ExplodeTextEffect.Timeline.Keyframe.init(from:to:duration:curve:)partial apply;
  *(_QWORD *)(v4 + 184) = v11;
  static ExplodeTextEffect.Target.color = v4;
  return result;
}

double one-time initialization function for vibration(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  double result;

  type metadata accessor for _ContiguousArrayStorage<ExplodeTextEffect.Timeline<Double>.Keyframe>(0, a2, a3, a4);
  v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_23528B7A0;
  *(_QWORD *)(v4 + 32) = 0;
  *(_QWORD *)(v4 + 40) = 0;
  *(_QWORD *)(v4 + 48) = 0x3FC999999999999ALL;
  *(_QWORD *)(v4 + 56) = _ViewInputs.base.modify;
  *(_QWORD *)(v4 + 64) = 0;
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_235286C10;
  *(_OWORD *)(v5 + 32) = xmmword_23529C950;
  *(_BYTE *)(v5 + 48) = 0;
  *(_OWORD *)(v4 + 72) = xmmword_23528A280;
  *(_QWORD *)(v4 + 88) = 0x3FE083126E978D50;
  *(_QWORD *)(v4 + 96) = implicit closure #2 in implicit closure #1 in ExplodeTextEffect.Timeline.Keyframe.init(from:to:duration:curve:)partial apply;
  *(_QWORD *)(v4 + 104) = v5;
  v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_23529C960;
  *(_OWORD *)(v6 + 32) = xmmword_23529C970;
  *(_BYTE *)(v6 + 48) = 0;
  result = 1.0;
  *(_OWORD *)(v4 + 112) = xmmword_235281560;
  *(_QWORD *)(v4 + 128) = 0x3FE10E5604189375;
  *(_QWORD *)(v4 + 136) = implicit closure #2 in implicit closure #1 in ExplodeTextEffect.Timeline.Keyframe.init(from:to:duration:curve:)partial apply;
  *(_QWORD *)(v4 + 144) = v6;
  *(_QWORD *)(v4 + 152) = 0;
  *(_QWORD *)(v4 + 160) = 0;
  *(_QWORD *)(v4 + 168) = 0x3FF11EB851EB851FLL;
  *(_QWORD *)(v4 + 176) = _ViewInputs.base.modify;
  *(_QWORD *)(v4 + 184) = 0;
  static ExplodeTextEffect.Target.vibration = v4;
  return result;
}

double one-time initialization function for x(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  double result;

  type metadata accessor for _ContiguousArrayStorage<ExplodeTextEffect.Timeline<Double>.Keyframe>(0, a2, a3, a4);
  v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_235283240;
  *(_QWORD *)(v4 + 32) = 0;
  *(_QWORD *)(v4 + 40) = 0;
  *(_QWORD *)(v4 + 48) = 0x3FCDD2F1A9FBE76DLL;
  *(_QWORD *)(v4 + 56) = _ViewInputs.base.modify;
  *(_QWORD *)(v4 + 64) = 0;
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_23529C980;
  *(_OWORD *)(v5 + 32) = xmmword_235285B50;
  *(_BYTE *)(v5 + 48) = 0;
  *(_OWORD *)(v4 + 72) = xmmword_23529C990;
  *(_QWORD *)(v4 + 88) = 0x3FCDD2F1A9FBE76DLL;
  *(_QWORD *)(v4 + 96) = implicit closure #2 in implicit closure #1 in ExplodeTextEffect.Timeline.Keyframe.init(from:to:duration:curve:)partial apply;
  *(_QWORD *)(v4 + 104) = v5;
  *(int64x2_t *)(v4 + 112) = vdupq_n_s64(0xBFA999999999999ALL);
  *(_QWORD *)(v4 + 128) = 0x3FD0000000000000;
  *(_QWORD *)(v4 + 136) = _ViewInputs.base.modify;
  *(_QWORD *)(v4 + 144) = 0;
  v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_23529C9A0;
  *(_OWORD *)(v6 + 32) = xmmword_23529C940;
  *(_BYTE *)(v6 + 48) = 0;
  *(_OWORD *)(v4 + 152) = xmmword_23529C9B0;
  *(_QWORD *)(v4 + 168) = 0x3FF1DB22D0E56042;
  *(_QWORD *)(v4 + 176) = implicit closure #2 in implicit closure #1 in ExplodeTextEffect.Timeline.Keyframe.init(from:to:duration:curve:)partial apply;
  *(_QWORD *)(v4 + 184) = v6;
  __asm { FMOV            V0.2D, #1.0 }
  *(_OWORD *)(v4 + 192) = _Q0;
  *(_QWORD *)(v4 + 208) = 0x3FD54FDF3B645A1DLL;
  *(_QWORD *)(v4 + 216) = _ViewInputs.base.modify;
  *(_QWORD *)(v4 + 224) = 0;
  result = 1.0;
  *(_OWORD *)(v4 + 232) = xmmword_235281560;
  *(_QWORD *)(v4 + 248) = 0x3FD883126E978D50;
  *(_QWORD *)(v4 + 256) = _ViewInputs.base.modify;
  *(_QWORD *)(v4 + 264) = 0;
  static ExplodeTextEffect.Target.x = v4;
  return result;
}

double one-time initialization function for y(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double result;

  type metadata accessor for _ContiguousArrayStorage<ExplodeTextEffect.Timeline<Double>.Keyframe>(0, a2, a3, a4);
  v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_23529C9C0;
  *(_QWORD *)(v4 + 32) = 0;
  *(_QWORD *)(v4 + 40) = 0;
  *(_QWORD *)(v4 + 48) = 0x3FCDD2F1A9FBE76DLL;
  *(_QWORD *)(v4 + 56) = _ViewInputs.base.modify;
  *(_QWORD *)(v4 + 64) = 0;
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_23529C930;
  *(_OWORD *)(v5 + 32) = xmmword_23529C940;
  *(_BYTE *)(v5 + 48) = 0;
  *(_OWORD *)(v4 + 72) = xmmword_23529C9D0;
  *(_QWORD *)(v4 + 88) = 0x3FCDD2F1A9FBE76DLL;
  *(_QWORD *)(v4 + 96) = implicit closure #2 in implicit closure #1 in ExplodeTextEffect.Timeline.Keyframe.init(from:to:duration:curve:)partial apply;
  *(_QWORD *)(v4 + 104) = v5;
  *(int64x2_t *)(v4 + 112) = vdupq_n_s64(0xBFB999999999999ALL);
  *(_QWORD *)(v4 + 128) = 0x3FD0000000000000;
  *(_QWORD *)(v4 + 136) = _ViewInputs.base.modify;
  *(_QWORD *)(v4 + 144) = 0;
  v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_23529C9A0;
  *(_OWORD *)(v6 + 32) = xmmword_235285B50;
  *(_BYTE *)(v6 + 48) = 0;
  *(_OWORD *)(v4 + 152) = xmmword_23529C9E0;
  *(_QWORD *)(v4 + 168) = 0x3FD76C8B43958106;
  *(_QWORD *)(v4 + 176) = implicit closure #2 in implicit closure #1 in ExplodeTextEffect.Timeline.Keyframe.init(from:to:duration:curve:)partial apply;
  *(_QWORD *)(v4 + 184) = v6;
  v7 = swift_allocObject();
  *(_OWORD *)(v7 + 16) = xmmword_23529C980;
  *(_OWORD *)(v7 + 32) = xmmword_23529C9F0;
  *(_BYTE *)(v7 + 48) = 0;
  *(_OWORD *)(v4 + 192) = xmmword_23529CA00;
  *(_QWORD *)(v4 + 208) = 0x3FD21CAC083126E9;
  *(_QWORD *)(v4 + 216) = implicit closure #2 in implicit closure #1 in ExplodeTextEffect.Timeline.Keyframe.init(from:to:duration:curve:)partial apply;
  *(_QWORD *)(v4 + 224) = v7;
  v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16) = xmmword_23529CA10;
  *(_OWORD *)(v8 + 32) = xmmword_23529CA20;
  *(_BYTE *)(v8 + 48) = 0;
  *(_OWORD *)(v4 + 232) = xmmword_23529CA30;
  *(_QWORD *)(v4 + 248) = 0x3FCDD2F1A9FBE76DLL;
  *(_QWORD *)(v4 + 256) = implicit closure #2 in implicit closure #1 in ExplodeTextEffect.Timeline.Keyframe.init(from:to:duration:curve:)partial apply;
  *(_QWORD *)(v4 + 264) = v8;
  v9 = swift_allocObject();
  *(_OWORD *)(v9 + 16) = xmmword_23529C980;
  *(_OWORD *)(v9 + 32) = xmmword_23529C9F0;
  *(_BYTE *)(v9 + 48) = 0;
  *(_OWORD *)(v4 + 272) = xmmword_23529CA40;
  *(_QWORD *)(v4 + 288) = 0x3FCDD2F1A9FBE76DLL;
  *(_QWORD *)(v4 + 296) = implicit closure #2 in implicit closure #1 in ExplodeTextEffect.Timeline.Keyframe.init(from:to:duration:curve:)partial apply;
  *(_QWORD *)(v4 + 304) = v9;
  *(_QWORD *)(v4 + 312) = 0xBFE3333333333333;
  *(_OWORD *)(v4 + 320) = xmmword_23529CA50;
  *(_QWORD *)(v4 + 336) = _ViewInputs.base.modify;
  *(_QWORD *)(v4 + 344) = 0;
  v10 = swift_allocObject();
  *(_OWORD *)(v10 + 16) = xmmword_23529C930;
  *(_OWORD *)(v10 + 32) = xmmword_23529C940;
  *(_BYTE *)(v10 + 48) = 0;
  result = -0.6;
  *(_OWORD *)(v4 + 352) = xmmword_23529CA60;
  *(_QWORD *)(v4 + 368) = 0x3FBDB22D0E560419;
  *(_QWORD *)(v4 + 376) = implicit closure #2 in implicit closure #1 in ExplodeTextEffect.Timeline.Keyframe.init(from:to:duration:curve:)partial apply;
  *(_QWORD *)(v4 + 384) = v10;
  static ExplodeTextEffect.Target.y = v4;
  return result;
}

double one-time initialization function for z(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  double result;

  type metadata accessor for _ContiguousArrayStorage<ExplodeTextEffect.Timeline<Double>.Keyframe>(0, a2, a3, a4);
  v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_235283240;
  *(_QWORD *)(v4 + 32) = 0;
  *(_QWORD *)(v4 + 40) = 0;
  *(_QWORD *)(v4 + 48) = 0x3FCDD2F1A9FBE76DLL;
  *(_QWORD *)(v4 + 56) = _ViewInputs.base.modify;
  *(_QWORD *)(v4 + 64) = 0;
  *(_QWORD *)(v4 + 72) = 0;
  *(_QWORD *)(v4 + 80) = 0;
  *(_QWORD *)(v4 + 88) = 0x3FCDD2F1A9FBE76DLL;
  *(_QWORD *)(v4 + 96) = _ViewInputs.base.modify;
  *(_QWORD *)(v4 + 104) = 0;
  *(_QWORD *)(v4 + 112) = 0;
  *(_QWORD *)(v4 + 120) = 0;
  *(_QWORD *)(v4 + 128) = 0x3FD0000000000000;
  *(_QWORD *)(v4 + 136) = _ViewInputs.base.modify;
  *(_QWORD *)(v4 + 144) = 0;
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_23529C9A0;
  *(_OWORD *)(v5 + 32) = xmmword_23529C940;
  *(_BYTE *)(v5 + 48) = 0;
  *(_OWORD *)(v4 + 152) = xmmword_23528A280;
  *(_QWORD *)(v4 + 168) = 0x3FF1DB22D0E56042;
  *(_QWORD *)(v4 + 176) = implicit closure #2 in implicit closure #1 in ExplodeTextEffect.Timeline.Keyframe.init(from:to:duration:curve:)partial apply;
  *(_QWORD *)(v4 + 184) = v5;
  __asm { FMOV            V0.2D, #1.0 }
  *(_OWORD *)(v4 + 192) = _Q0;
  *(_QWORD *)(v4 + 208) = 0x3FD54FDF3B645A1DLL;
  *(_QWORD *)(v4 + 216) = _ViewInputs.base.modify;
  *(_QWORD *)(v4 + 224) = 0;
  result = 1.0;
  *(_OWORD *)(v4 + 232) = xmmword_235281560;
  *(_QWORD *)(v4 + 248) = 0x3FD883126E978D50;
  *(_QWORD *)(v4 + 256) = _ViewInputs.base.modify;
  *(_QWORD *)(v4 + 264) = 0;
  static ExplodeTextEffect.Target.z = v4;
  return result;
}

unint64_t *specialized static BinaryFloatingPoint<>.random<A>(in:using:)(unint64_t *result, double a2, double a3)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;

  if (a2 == a3)
  {
    __break(1u);
    goto LABEL_7;
  }
  if ((~COERCE__INT64(a3 - a2) & 0x7FF0000000000000) == 0)
  {
LABEL_7:
    __break(1u);
    return result;
  }
  v4 = *result;
  v3 = result[1];
  do
  {
    v5 = v3 + 0x5851F42D4C957F2DLL * v4;
    v6 = __ROR4__((v5 >> 45) ^ (v5 >> 27), v5 >> 59) | ((unint64_t)(__ROR4__((v4 >> 45) ^ (v4 >> 27), v4 >> 59) & 0x1FFFFF) << 32);
    v4 = v3 + 0x5851F42D4C957F2DLL * v5;
  }
  while ((a3 - a2) * ((double)v6 * 1.11022302e-16) + a2 == a3);
  *result = v4;
  return result;
}

uint64_t protocol witness for static TextEffect.staticUnitProgress.getter in conformance ExplodeTextEffect()
{
  return 0x3FB999999999999ALL;
}

uint64_t protocol witness for static TextEffect.name.getter in conformance ExplodeTextEffect()
{
  return 0x65646F6C707865;
}

uint64_t protocol witness for static Text.Effect.Base.animatorConfiguration(from:) in conformance ExplodeTextEffect@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _BYTE v4[40];

  specialized static ExplodeTextEffect.animatorConfiguration(from:)(a1, (uint64_t)v4);
  return outlined init with take of ExplodeTextEffect.AnimatorConfiguration?((uint64_t)v4, a2);
}

double protocol witness for Text.Effect.Base.timing(for:from:to:duration:) in conformance ExplodeTextEffect@<D0>(uint64_t a1@<X0>, double a2@<X5>, char a3@<W6>, _OWORD *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  __int128 v11;
  double v12;
  __int128 v13;
  double result;
  _OWORD v15[2];
  __int128 v16;
  __int128 v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  char v30;
  __int128 v31;
  char v32;
  char v33;
  char v34;
  char v35;

  type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for Text.Effect.DrawableContent<ExplodeTextEffect>, (uint64_t (*)(void))lazy protocol witness table accessor for type ExplodeTextEffect and conformance ExplodeTextEffect, (uint64_t)&type metadata for ExplodeTextEffect, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for Text.Effect.DrawableContent);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)v15 - v9;
  v35 = 0;
  v34 = 1;
  v33 = 0;
  v17 = xmmword_23529CA70;
  v18 = 0;
  v19 = 0;
  v20 = 0;
  v21 = 2;
  v23 = 0;
  v24 = 0;
  v22 = 0;
  v25 = 0;
  v26 = 0;
  v27 = 0;
  v28 = 1;
  v29 = MEMORY[0x24BEE4AF8];
  v30 = 0;
  v31 = xmmword_235281F60;
  v32 = 0;
  if (one-time initialization token for defaultSpring != -1)
    swift_once();
  v11 = static ExplodeTextEffect.defaultSpring;
  v12 = *(double *)&qword_25622D190;
  outlined init with copy of Text.Effect.DrawableContent<ExplodeTextEffect>(a1, (uint64_t)v10);
  specialized Text.Effect.Timing.init<A>(configuration:duration:spring:content:)((uint64_t)&v17, a2, a3 & 1, (uint64_t)v10, v15, *(double *)&v11, *((double *)&v11 + 1), v12);
  v13 = v15[1];
  *a4 = v15[0];
  a4[1] = v13;
  result = *(double *)&v16;
  a4[2] = v16;
  return result;
}

unint64_t instantiation function for generic protocol witness table for ExplodeTextEffect(uint64_t a1)
{
  unint64_t result;

  *(_QWORD *)(a1 + 8) = lazy protocol witness table accessor for type ExplodeTextEffect and conformance ExplodeTextEffect();
  result = lazy protocol witness table accessor for type ExplodeTextEffect and conformance ExplodeTextEffect();
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

uint64_t specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A.Text.Effect.Base.Timing, @guaranteed Text.Effect.DrawableFragment<A>, @unowned Text.Effect.QuantizationContext) -> (@owned Text.Effect.Drawable)@<X0>(_OWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  __int128 v5;
  __int128 v6;
  __int128 v7;
  uint64_t result;
  _OWORD v9[3];
  _OWORD v10[3];
  uint64_t v11;
  _OWORD v12[2];
  uint64_t v13;

  v5 = *(_OWORD *)(a2 + 16);
  v10[0] = *(_OWORD *)a2;
  v10[1] = v5;
  v10[2] = *(_OWORD *)(a2 + 32);
  v11 = *(_QWORD *)(a2 + 48);
  v6 = *(_OWORD *)(a3 + 16);
  v12[0] = *(_OWORD *)a3;
  v12[1] = v6;
  v13 = *(_QWORD *)(a3 + 32);
  v7 = a1[1];
  v9[0] = *a1;
  v9[1] = v7;
  v9[2] = a1[2];
  result = closure #1 in ExplodeTextEffect.configuration(_:)((uint64_t)v9, (uint64_t)v10, (uint64_t)v12);
  *a4 = result;
  return result;
}

{
  __int128 v5;
  __int128 v6;
  __int128 v7;
  uint64_t result;
  _OWORD v9[3];
  _OWORD v10[3];
  uint64_t v11;
  _OWORD v12[2];
  uint64_t v13;

  v5 = *(_OWORD *)(a2 + 16);
  v10[0] = *(_OWORD *)a2;
  v10[1] = v5;
  v10[2] = *(_OWORD *)(a2 + 32);
  v11 = *(_QWORD *)(a2 + 48);
  v6 = *(_OWORD *)(a3 + 16);
  v12[0] = *(_OWORD *)a3;
  v12[1] = v6;
  v13 = *(_QWORD *)(a3 + 32);
  v7 = a1[1];
  v9[0] = *a1;
  v9[1] = v7;
  v9[2] = a1[2];
  result = closure #1 in SomersaultTextEffect.configuration(_:)((uint64_t)v9, (uint64_t)v10, (uint64_t)v12);
  *a4 = result;
  return result;
}

{
  __int128 v5;
  __int128 v6;
  __int128 v7;
  uint64_t result;
  _OWORD v9[3];
  _OWORD v10[3];
  uint64_t v11;
  _OWORD v12[2];
  uint64_t v13;

  v5 = *(_OWORD *)(a2 + 16);
  v10[0] = *(_OWORD *)a2;
  v10[1] = v5;
  v10[2] = *(_OWORD *)(a2 + 32);
  v11 = *(_QWORD *)(a2 + 48);
  v6 = *(_OWORD *)(a3 + 16);
  v12[0] = *(_OWORD *)a3;
  v12[1] = v6;
  v13 = *(_QWORD *)(a3 + 32);
  v7 = a1[1];
  v9[0] = *a1;
  v9[1] = v7;
  v9[2] = a1[2];
  result = closure #3 in BigTextEffect.configuration(_:)((uint64_t)v9, (uint64_t)v10, (uint64_t)v12);
  *a4 = result;
  return result;
}

void specialized static ExplodeTextEffect.animatorConfiguration(from:)(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4;
  char v5;
  id v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  char v11;
  unint64_t v12;
  char v13;
  id v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  char v19;
  unint64_t v20;
  uint64_t v21;
  __int128 v22;
  BOOL v23;
  char v24;
  void *v25;
  _BYTE v26[32];
  char v27;
  unsigned __int8 v28;

  v28 = 1;
  v27 = 1;
  if (!*(_QWORD *)(a1 + 16)
    || (v4 = specialized __RawDictionaryStorage.find<A>(_:)(0x6F43656372756F73, 0xEB00000000726F6CLL), (v5 & 1) == 0)
    || (outlined init with copy of Any(*(_QWORD *)(a1 + 56) + 32 * v4, (uint64_t)v26),
        type metadata accessor for NSObject(),
        (swift_dynamicCast() & 1) == 0))
  {
LABEL_8:
    v9 = 0;
    v7 = 0;
    if (!*(_QWORD *)(a1 + 16))
      goto LABEL_14;
    goto LABEL_9;
  }
  v6 = (id)CGColorForCoreColor(0, v25);
  if (!v6)
  {

    goto LABEL_8;
  }
  v7 = specialized Color.Resolved.init(failableCGColor:)(v6);
  v9 = v8;
  v11 = v10;

  v28 = v11 & 1;
  if (!*(_QWORD *)(a1 + 16))
    goto LABEL_14;
LABEL_9:
  v12 = specialized __RawDictionaryStorage.find<A>(_:)(0x6F43746567726174, 0xEB00000000726F6CLL);
  if ((v13 & 1) != 0)
  {
    outlined init with copy of Any(*(_QWORD *)(a1 + 56) + 32 * v12, (uint64_t)v26);
    type metadata accessor for NSObject();
    if ((swift_dynamicCast() & 1) != 0)
    {
      v14 = (id)CGColorForCoreColor(0, v25);
      if (v14)
      {
        v15 = specialized Color.Resolved.init(failableCGColor:)(v14);
        v17 = v16;
        v19 = v18;

        v27 = v19 & 1;
        goto LABEL_15;
      }

    }
  }
LABEL_14:
  v15 = 0;
  v17 = 0;
LABEL_15:
  v20 = v28 | (v15 << 32);
  *((_QWORD *)&v22 + 1) = v17;
  *(_QWORD *)&v22 = v15;
  v21 = v22 >> 32;
  v23 = v27 == 0;
  v24 = 1;
  *(_QWORD *)a2 = v7;
  *(_QWORD *)(a2 + 8) = v9;
  if (v23)
    v24 = 0;
  *(_QWORD *)(a2 + 16) = v20;
  *(_QWORD *)(a2 + 24) = v21;
  *(_DWORD *)(a2 + 32) = HIDWORD(v17);
  *(_BYTE *)(a2 + 36) = v24;
  *(_BYTE *)(a2 + 37) = 0;
}

uint64_t specialized ExplodeTextEffect.configuration(_:)()
{
  _QWORD *v0;
  unint64_t v1;
  unint64_t v2;
  _QWORD *v3;

  v0 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 1, MEMORY[0x24BEE4AF8]);
  v2 = v0[2];
  v1 = v0[3];
  if (v2 >= v1 >> 1)
    v0 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v1 > 1), v2 + 1, 1, v0);
  v0[2] = v2 + 1;
  v3 = &v0[2 * v2];
  v3[4] = specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A.Text.Effect.Base.Timing, @guaranteed Text.Effect.DrawableFragment<A>, @unowned Text.Effect.QuantizationContext) -> (@owned Text.Effect.Drawable);
  v3[5] = 0;
  return MEMORY[0x24BEE4AF8];
}

uint64_t sub_234D46E58()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in ExplodeTextEffect.configuration(_:)(unint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return closure #1 in closure #1 in ExplodeTextEffect.configuration(_:)(a1, a2, v2 + 16, v2 + 64);
}

uint64_t sub_234D46EB8()
{
  uint64_t v0;

  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(v0 + 96) >= 3uLL)
    swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocObject();
}

void specialized ExplodeTextEffect.Target.amplitude(for:at:of:)(uint64_t a1, double a2)
{
  uint64_t v4;
  double v5;
  double v6;
  double v7;
  unint64_t v8[2];

  v4 = Double.hashValue.getter();
  if (__OFADD__(v4, 123))
  {
    __break(1u);
  }
  else
  {
    v8[0] = v4 + 123;
    v8[1] = 0xDA3E39CB94B95BDBLL;
    specialized static BinaryFloatingPoint<>.random<A>(in:using:)(v8, 0.0, 1.0);
    v6 = v5 * 0.02 + a2;
    sin(v6 * 3.14159265);
    v7 = (double)a1 + -1.0;
    sin(v7 * 3.14159265 * 0.5 * v6);
    sin(v7 * 3.14159265 * (v6 + -1.0));
    sin((v7 * 0.75 + -1.0) * 3.14159265 * v6);
    sin(v6 * 6.28318531);
  }
}

void type metadata accessor for _ContiguousArrayStorage<ExplodeTextEffect.Timeline<Double>.Keyframe>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  uint64_t v5;

  if (!lazy cache variable for type metadata for _ContiguousArrayStorage<ExplodeTextEffect.Timeline<Double>.Keyframe>)
  {
    type metadata accessor for ExplodeTextEffect.Timeline<Double>.Keyframe(255, a2, a3, a4);
    v4 = type metadata accessor for _ContiguousArrayStorage();
    if (!v5)
      atomic_store(v4, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<ExplodeTextEffect.Timeline<Double>.Keyframe>);
  }
}

void type metadata accessor for ExplodeTextEffect.Timeline<Double>.Keyframe(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  uint64_t v5;

  if (!lazy cache variable for type metadata for ExplodeTextEffect.Timeline<Double>.Keyframe)
  {
    v4 = type metadata accessor for ExplodeTextEffect.Timeline.Keyframe(0, MEMORY[0x24BEE13C8], (uint64_t)&protocol witness table for Double, a4);
    if (!v5)
      atomic_store(v4, (unint64_t *)&lazy cache variable for type metadata for ExplodeTextEffect.Timeline<Double>.Keyframe);
  }
}

uint64_t type metadata accessor for ExplodeTextEffect.Timeline.Keyframe(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ExplodeTextEffect.Timeline.Keyframe);
}

uint64_t sub_234D470F8()
{
  return swift_deallocObject();
}

Swift::Double partial apply for implicit closure #2 in implicit closure #1 in ExplodeTextEffect.Timeline.Keyframe.init(from:to:duration:curve:)(Swift::Double a1)
{
  return UnitCurve.value(at:)(a1);
}

uint64_t sub_234D47140()
{
  return swift_deallocObject();
}

uint64_t sub_234D47150()
{
  return swift_deallocObject();
}

uint64_t sub_234D47160()
{
  return swift_deallocObject();
}

uint64_t sub_234D47170()
{
  return swift_deallocObject();
}

uint64_t sub_234D47180()
{
  return swift_deallocObject();
}

uint64_t sub_234D47190()
{
  return swift_deallocObject();
}

uint64_t sub_234D471A0()
{
  return swift_deallocObject();
}

uint64_t sub_234D471B0()
{
  return swift_deallocObject();
}

uint64_t sub_234D471C0()
{
  return swift_deallocObject();
}

uint64_t sub_234D471D0()
{
  return swift_deallocObject();
}

uint64_t sub_234D471E0()
{
  return swift_deallocObject();
}

uint64_t sub_234D471F0()
{
  return swift_deallocObject();
}

uint64_t sub_234D47200()
{
  return swift_deallocObject();
}

uint64_t sub_234D47210()
{
  return swift_deallocObject();
}

uint64_t outlined init with copy of Text.Effect.DrawableContent<ExplodeTextEffect>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for Text.Effect.DrawableContent<ExplodeTextEffect>, (uint64_t (*)(void))lazy protocol witness table accessor for type ExplodeTextEffect and conformance ExplodeTextEffect, (uint64_t)&type metadata for ExplodeTextEffect, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for Text.Effect.DrawableContent);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with take of ExplodeTextEffect.AnimatorConfiguration?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for ExplodeTextEffect.AnimatorConfiguration?, (uint64_t)&type metadata for ExplodeTextEffect.AnimatorConfiguration, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1C68]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t type metadata completion function for ExplodeTextEffect.Timeline.Keyframe()
{
  uint64_t result;
  unint64_t v1;

  result = swift_getAssociatedTypeWitness();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for ExplodeTextEffect.Timeline.Keyframe(uint64_t *a1, uint64_t *a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t *, uint64_t *, uint64_t);
  unint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = *(_DWORD *)(v5 + 80);
  v8 = v6 + v7;
  v9 = v6 + 7;
  v10 = ((((v6 + 7 + ((v6 + v7) & ~v7)) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 16;
  if (v7 > 7 || (*(_DWORD *)(v5 + 80) & 0x100000) != 0 || v10 > 0x18)
  {
    v13 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v13 + ((v7 & 0xF8 ^ 0x1F8) & (v7 + 16)));
  }
  else
  {
    v14 = AssociatedTypeWitness;
    v15 = ~v7;
    v16 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v5 + 16);
    v16(a1, a2, AssociatedTypeWitness);
    v17 = ((unint64_t)a2 + v8) & v15;
    v16((uint64_t *)(((unint64_t)a1 + v8) & v15), (uint64_t *)v17, v14);
    v18 = (_QWORD *)((v9 + (((unint64_t)a1 + v8) & v15)) & 0xFFFFFFFFFFFFF8);
    v19 = (_QWORD *)((v9 + v17) & 0xFFFFFFFFFFFFF8);
    *v18 = *v19;
    v20 = (_QWORD *)(((unint64_t)v19 + 15) & 0xFFFFFFFFFFFFFFF8);
    v21 = v20[1];
    v22 = (_QWORD *)(((unint64_t)v18 + 15) & 0xFFFFFFFFFFFFFFF8);
    *v22 = *v20;
    v22[1] = v21;
  }
  swift_retain();
  return a1;
}

uint64_t destroy for ExplodeTextEffect.Timeline.Keyframe(unint64_t a1)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v3;
  void (*v4)(unint64_t, uint64_t);

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v3 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v4 = *(void (**)(unint64_t, uint64_t))(v3 + 8);
  v4(a1, AssociatedTypeWitness);
  v4((*(_QWORD *)(v3 + 64) + a1 + *(unsigned __int8 *)(v3 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80), AssociatedTypeWitness);
  return swift_release();
}

uint64_t initializeWithCopy for ExplodeTextEffect.Timeline.Keyframe(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
  v6(a1, a2, AssociatedTypeWitness);
  v7 = *(_QWORD *)(v5 + 64);
  v8 = *(unsigned __int8 *)(v5 + 80);
  v9 = (v7 + v8 + a1) & ~v8;
  v10 = (v7 + v8 + a2) & ~v8;
  v6(v9, v10, AssociatedTypeWitness);
  v11 = (_QWORD *)((v7 + 7 + v9) & 0xFFFFFFFFFFFFF8);
  v12 = (_QWORD *)((v7 + 7 + v10) & 0xFFFFFFFFFFFFF8);
  *v11 = *v12;
  v13 = (uint64_t *)(((unint64_t)v12 + 15) & 0xFFFFFFFFFFFFFFF8);
  v15 = *v13;
  v14 = v13[1];
  v16 = (_QWORD *)(((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v16 = v15;
  v16[1] = v14;
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for ExplodeTextEffect.Timeline.Keyframe(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 24);
  v6(a1, a2, AssociatedTypeWitness);
  v7 = *(_QWORD *)(v5 + 64);
  v8 = *(unsigned __int8 *)(v5 + 80);
  v9 = (v7 + v8 + a1) & ~v8;
  v10 = (v7 + v8 + a2) & ~v8;
  v6(v9, v10, AssociatedTypeWitness);
  v11 = (_QWORD *)((v7 + 7 + v9) & 0xFFFFFFFFFFFFF8);
  v12 = (_QWORD *)((v7 + 7 + v10) & 0xFFFFFFFFFFFFF8);
  *v11 = *v12;
  v13 = (_QWORD *)(((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFFFF8);
  v14 = (_QWORD *)(((unint64_t)v12 + 15) & 0xFFFFFFFFFFFFFFF8);
  v15 = v14[1];
  *v13 = *v14;
  v13[1] = v15;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t initializeWithTake for ExplodeTextEffect.Timeline.Keyframe(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 32);
  v6(a1, a2, AssociatedTypeWitness);
  v7 = *(_QWORD *)(v5 + 64);
  v8 = *(unsigned __int8 *)(v5 + 80);
  v9 = (v7 + v8 + a1) & ~v8;
  v10 = (v7 + v8 + a2) & ~v8;
  v6(v9, v10, AssociatedTypeWitness);
  v11 = (_QWORD *)((v7 + 7 + v9) & 0xFFFFFFFFFFFFF8);
  v12 = (_QWORD *)((v7 + 7 + v10) & 0xFFFFFFFFFFFFF8);
  *v11 = *v12;
  *(_OWORD *)(((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v12 + 15) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t assignWithTake for ExplodeTextEffect.Timeline.Keyframe(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 40);
  v6(a1, a2, AssociatedTypeWitness);
  v7 = *(_QWORD *)(v5 + 64);
  v8 = *(unsigned __int8 *)(v5 + 80);
  v9 = (v7 + v8 + a1) & ~v8;
  v10 = (v7 + v8 + a2) & ~v8;
  v6(v9, v10, AssociatedTypeWitness);
  v11 = (_QWORD *)((v7 + 7 + v9) & 0xFFFFFFFFFFFFF8);
  v12 = (_QWORD *)((v7 + 7 + v10) & 0xFFFFFFFFFFFFF8);
  *v11 = *v12;
  *(_OWORD *)(((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v12 + 15) & 0xFFFFFFFFFFFFF8);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for ExplodeTextEffect.Timeline.Keyframe(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  unint64_t v15;

  v4 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(_QWORD *)(v4 + 64);
  v8 = *(unsigned __int8 *)(v4 + 80);
  v9 = v7 + v8;
  v10 = v7 + 7;
  if (v6 < a2)
  {
    if (((((((v10 + (v9 & ~v8)) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 16) & 0xFFFFFFF8) != 0)
      v11 = 2;
    else
      v11 = a2 - v6 + 1;
    if (v11 >= 0x10000)
      v12 = 4;
    else
      v12 = 2;
    if (v11 < 0x100)
      v12 = 1;
    if (v11 >= 2)
      v13 = v12;
    else
      v13 = 0;
    __asm { BR              X17 }
  }
  if (v5 >= 0x7FFFFFFF)
    return (*(uint64_t (**)(uint64_t))(v4 + 48))(a1);
  v15 = *(_QWORD *)((((v10 + ((v9 + a1) & ~v8)) & 0xFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFF8);
  if (v15 >= 0xFFFFFFFF)
    LODWORD(v15) = -1;
  return (v15 + 1);
}

void storeEnumTagSinglePayload for ExplodeTextEffect.Timeline.Keyframe(unsigned int *a1, unsigned int a2, unsigned int a3)
{
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  int v11;
  int v12;
  unsigned int v13;

  v6 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  if (*(_DWORD *)(v6 + 84) <= 0x7FFFFFFFu)
    v7 = 0x7FFFFFFF;
  else
    v7 = *(_DWORD *)(v6 + 84);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = *(unsigned __int8 *)(v6 + 80);
  if (v7 >= a3)
  {
    v12 = 0;
    if (a2 <= v7)
      goto LABEL_17;
  }
  else
  {
    if ((((((_DWORD)v8 + 7 + (((_DWORD)v8 + (_DWORD)v9) & ~(_DWORD)v9)) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) == 0xFFFFFFF0)
      v10 = a3 - v7 + 1;
    else
      v10 = 2;
    if (v10 >= 0x10000)
      v11 = 4;
    else
      v11 = 2;
    if (v10 < 0x100)
      v11 = 1;
    if (v10 >= 2)
      v12 = v11;
    else
      v12 = 0;
    if (a2 <= v7)
LABEL_17:
      __asm { BR              X14 }
  }
  if ((((((_DWORD)v8 + 7 + (((_DWORD)v8 + (_DWORD)v9) & ~(_DWORD)v9)) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) != 0xFFFFFFF0)
  {
    v13 = ~v7 + a2;
    bzero(a1, ((((v8 + 7 + ((v8 + v9) & ~v9)) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 16);
    *a1 = v13;
  }
  __asm { BR              X10 }
}

void sub_234D47B04()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
  JUMPOUT(0x234D47B8CLL);
}

void sub_234D47B0C()
{
  uint64_t v0;
  int v1;
  uint64_t v2;

  *(_DWORD *)(v0 + v2) = 0;
  if (v1)
    JUMPOUT(0x234D47B14);
  JUMPOUT(0x234D47B8CLL);
}

void sub_234D47B64()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x234D47B8CLL);
}

void sub_234D47B6C()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x234D47B8CLL);
}

uint64_t sub_234D47B74@<X0>(unsigned int a1@<W2>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_WORD *)(v3 + v5) = 0;
  if (!(_DWORD)v4)
    JUMPOUT(0x234D47B8CLL);
  if (a1 < 0x7FFFFFFF)
  {
    if ((v4 & 0x80000000) == 0)
      JUMPOUT(0x234D47B88);
    JUMPOUT(0x234D47B80);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 56))(v3, v4);
}

ValueMetadata *type metadata accessor for ExplodeTextEffect.AnimatorConfiguration()
{
  return &type metadata for ExplodeTextEffect.AnimatorConfiguration;
}

uint64_t type metadata accessor for ExplodeTextEffect.Timeline(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ExplodeTextEffect.Timeline);
}

uint64_t EnvironmentValues.redactionReasons.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;

  v3 = *v1;
  if (v1[1])
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v3, a1);
    swift_release_n();
  }
  else
  {
    v4 = swift_retain_n();
    specialized closure #1 in PropertyList.subscript.getter(v4, a1);
  }
  return swift_release_n();
}

uint64_t key path getter for EnvironmentValues.redactionReasons : EnvironmentValues@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;

  v3 = *a1;
  if (a1[1])
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v3, &v6);
    swift_release_n();
  }
  else
  {
    v4 = swift_retain_n();
    specialized closure #1 in PropertyList.subscript.getter(v4, &v6);
  }
  result = swift_release_n();
  *a2 = v6;
  return result;
}

uint64_t key path setter for EnvironmentValues.redactionReasons : EnvironmentValues(uint64_t *a1)
{
  uint64_t v2;

  v2 = *a1;
  return EnvironmentValues.redactionReasons.setter(&v2);
}

uint64_t EnvironmentValues.redactionReasons.setter(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *a1;
  v3 = *v1;
  swift_retain_n();
  specialized closure #1 in PropertyList.subscript.setter(v1, v2);
  swift_release();
  if (v1[1])
  {
    v4 = *v1;
    swift_retain();
    swift_retain();
    specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v3, v4);
    swift_release();
    swift_release();
  }
  return swift_release();
}

uint64_t View.unredacted()(uint64_t a1, uint64_t a2)
{
  uint64_t *KeyPath;
  uint64_t v6;

  KeyPath = (uint64_t *)swift_getKeyPath();
  v6 = 0;
  View.environment<A>(_:_:)(KeyPath, (uint64_t)&v6, a1, a2);
  return swift_release();
}

uint64_t EnvironmentValues.shouldRedactContent.getter()
{
  uint64_t *v0;
  uint64_t v1;
  char v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8[2];

  v1 = *v0;
  if (v0[1])
  {
    swift_retain_n();
    swift_retain_n();
    v2 = specialized PropertyList.Tracker.derivedValue<A>(_:for:)(v1);
    swift_release_n();
    swift_release_n();
    return v2 & 1;
  }
  else
  {
    v8[0] = *v0;
    v8[1] = 0;
    swift_retain();
    v7 = specialized static ShouldRedactContentKey.value(in:)(v8, v4, v5, v6);
    swift_release();
    return v7 & 1;
  }
}

uint64_t RedactionReasons.rawValue.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

SwiftUI::RedactionReasons __swiftcall RedactionReasons.init(rawValue:)(SwiftUI::RedactionReasons rawValue)
{
  SwiftUI::RedactionReasons *v1;

  v1->rawValue = rawValue.rawValue;
  return rawValue;
}

void static RedactionReasons.placeholder.getter(_QWORD *a1@<X8>)
{
  *a1 = 1;
}

void static RedactionReasons.privacy.getter(_QWORD *a1@<X8>)
{
  *a1 = 2;
}

void static RedactionReasons.invalidated.getter(_QWORD *a1@<X8>)
{
  *a1 = 4;
}

void static RedactionReasons.screencaptureProhibited.getter(_QWORD *a1@<X8>)
{
  *a1 = 8;
}

uint64_t View.redacted(reason:)(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t *KeyPath;
  uint64_t v7;

  v5 = *a1;
  KeyPath = (uint64_t *)swift_getKeyPath();
  v7 = swift_allocObject();
  *(_QWORD *)(v7 + 16) = v5;
  View.transformEnvironment<A>(_:transform:)(KeyPath, (uint64_t)partial apply for closure #1 in View.redacted(reason:), v7, a2, a3);
  swift_release();
  return swift_release();
}

uint64_t protocol witness for static DerivedEnvironmentKey.value(in:) in conformance ShouldRedactContentKey@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _BYTE *a5@<X8>)
{
  uint64_t result;

  result = specialized static ShouldRedactContentKey.value(in:)(a1, a2, a3, a4);
  *a5 = result & 1;
  return result;
}

uint64_t EnvironmentValues.unredactSymbolImage.getter()
{
  uint64_t *v0;
  uint64_t v1;
  char v2;
  uint64_t v4;
  char v5;

  v1 = *v0;
  if (v0[1])
  {
    swift_retain_n();
    swift_retain_n();
    v2 = specialized PropertyList.Tracker.value<A>(_:for:)(v1);
    swift_release_n();
    swift_release_n();
    return v2 & 1;
  }
  else
  {
    v4 = swift_retain_n();
    v5 = specialized closure #1 in PropertyList.subscript.getter(v4);
    swift_release_n();
    return v5 & 1;
  }
}

uint64_t key path getter for EnvironmentValues.unredactSymbolImage : EnvironmentValues@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t result;

  v3 = *a1;
  if (a1[1])
  {
    swift_retain_n();
    swift_retain_n();
    v4 = specialized PropertyList.Tracker.value<A>(_:for:)(v3);
    swift_release_n();
  }
  else
  {
    v5 = swift_retain_n();
    v4 = specialized closure #1 in PropertyList.subscript.getter(v5);
  }
  result = swift_release_n();
  *a2 = v4 & 1;
  return result;
}

uint64_t EnvironmentValues.unredactSymbolImage.setter(char a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;

  v3 = *v1;
  swift_retain_n();
  specialized closure #1 in PropertyList.subscript.setter(v1, a1);
  swift_release();
  if (v1[1])
  {
    v4 = *v1;
    swift_retain();
    swift_retain();
    specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v3, v4);
    swift_release();
    swift_release();
  }
  return swift_release();
}

void (*EnvironmentValues.unredactSymbolImage.modify(_QWORD *a1))(uint64_t a1)
{
  uint64_t *v1;
  _QWORD *v3;
  uint64_t v4;
  char v5;
  uint64_t v6;

  v3 = malloc(0x30uLL);
  *a1 = v3;
  v3[3] = v1;
  v4 = *v1;
  if (v1[1])
  {
    swift_retain_n();
    swift_retain_n();
    v5 = specialized PropertyList.Tracker.value<A>(_:for:)(v4);
    swift_release_n();
  }
  else
  {
    v6 = swift_retain_n();
    v5 = specialized closure #1 in PropertyList.subscript.getter(v6);
  }
  swift_release_n();
  v3[4] = 0;
  *((_BYTE *)v3 + 40) = v5 & 1;
  return EnvironmentValues.unredactSymbolImage.modify;
}

void EnvironmentValues.unredactSymbolImage.modify(uint64_t a1)
{
  _QWORD **v1;
  uint64_t *v2;
  char v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *(_QWORD ***)a1;
  v2 = *(uint64_t **)(*(_QWORD *)a1 + 24);
  v3 = *(_BYTE *)(*(_QWORD *)a1 + 40);
  v4 = *v2;
  swift_retain_n();
  specialized closure #1 in PropertyList.subscript.setter(v2, v3);
  swift_release();
  if (v2[1])
  {
    v5 = *v1[3];
    swift_retain();
    swift_retain();
    specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v4, v5);
    swift_release();
    swift_release();
  }
  swift_release();
  free(v1);
}

uint64_t EnvironmentValues.shouldRedactSymbolImages.getter()
{
  uint64_t *v0;
  uint64_t v1;
  char v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  char v9;
  uint64_t v10[2];

  v1 = *v0;
  if (v0[1])
  {
    swift_retain_n();
    swift_retain_n();
    v2 = specialized PropertyList.Tracker.derivedValue<A>(_:for:)(v1);
    swift_release_n();
    swift_release_n();
    return v2 & 1;
  }
  else
  {
    v10[0] = *v0;
    v10[1] = 0;
    swift_retain_n();
    if ((specialized static ShouldRedactContentKey.value(in:)(v10, v4, v5, v6) & 1) != 0)
    {
      v7 = swift_retain_n();
      v8 = specialized closure #1 in PropertyList.subscript.getter(v7);
      swift_release_n();
      v9 = v8 ^ 1;
    }
    else
    {
      swift_release_n();
      v9 = 0;
    }
    swift_release();
    return v9 & 1;
  }
}

uint64_t protocol witness for static DerivedEnvironmentKey.value(in:) in conformance ShouldRedactSymbolImagesKey@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = specialized static ShouldRedactSymbolImagesKey.value(in:)(a1);
  *a2 = result & 1;
  return result;
}

uint64_t (*EnvironmentValues.redactionReasons.modify(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4))(uint64_t *a1)
{
  uint64_t *v4;
  uint64_t v6;
  Swift::Int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  a1[3] = (uint64_t)v4;
  v6 = *v4;
  if (v4[1])
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v6, a1);
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<RedactionReasonsKey>(0, a2, a3, a4);
    BloomFilter.init(hashValue:)(v7);
    v8 = swift_retain_n();
    v9 = specialized find1<A>(_:key:filter:)(v8, v12);
    if (v9)
      v10 = *(_QWORD *)(v9 + 72);
    else
      v10 = 0;
    *a1 = v10;
  }
  swift_release_n();
  return EnvironmentValues.redactionReasons.modify;
}

uint64_t EnvironmentValues.redactionReasons.modify(uint64_t *a1)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = (uint64_t *)a1[3];
  v3 = *a1;
  v4 = *v2;
  swift_retain_n();
  specialized closure #1 in PropertyList.subscript.setter(v2, v3);
  swift_release();
  if (v2[1])
  {
    v5 = *(_QWORD *)a1[3];
    swift_retain();
    swift_retain();
    specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v4, v5);
    swift_release();
    swift_release();
  }
  return swift_release();
}

void GraphicsImage.redact(in:)(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  float v5;
  int v6;
  int v7;
  _QWORD v8[2];

  v2 = *a1;
  v3 = a1[1];
  v4 = swift_allocObject();
  if (one-time initialization token for foreground != -1)
    swift_once();
  v8[0] = v2;
  v8[1] = v3;
  *(float *)(v4 + 16) = (*(float (**)(_QWORD *))(*(_QWORD *)static Color.foreground + 104))(v8);
  *(_DWORD *)(v4 + 20) = v6;
  *(_DWORD *)(v4 + 24) = v7;
  *(float *)(v4 + 28) = v5 * 0.16;
  outlined consume of GraphicsImage.Contents?(*(void **)v1, *(_BYTE *)(v1 + 8));
  *(_QWORD *)v1 = v4;
  *(_BYTE *)(v1 + 8) = 4;
}

uint64_t one-time initialization function for redacted()
{
  uint64_t result;

  type metadata accessor for ImageProviderBox<Image.RedactedImageProvider>(0);
  result = swift_allocObject();
  static Image.redacted = result;
  return result;
}

uint64_t static Image.redacted.getter()
{
  if (one-time initialization token for redacted != -1)
    swift_once();
  return swift_retain();
}

__n128 Image.RedactedImageProvider.resolve(in:)@<Q0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  float v8;
  int v9;
  __n128 result;
  unsigned __int8 v16;
  __int128 v17[2];
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  __int128 v26;
  __int128 v27;
  char v28;
  __int16 v29;
  char v30;

  v3 = *a1;
  v4 = a1[1];
  v5 = swift_allocObject();
  v6 = one-time initialization token for foreground;
  swift_retain();
  swift_retain();
  if (v6 != -1)
    swift_once();
  v18 = v3;
  v19 = v4;
  *(float *)(v5 + 16) = (*(float (**)(uint64_t *))(*(_QWORD *)static Color.foreground + 104))(&v18);
  *(_DWORD *)(v5 + 20) = v7;
  *(_DWORD *)(v5 + 24) = v9;
  *(float *)(v5 + 28) = v8 * 0.16;
  swift_release();
  swift_release();
  if (one-time initialization token for resizable != -1)
    swift_once();
  v18 = v5;
  LOBYTE(v19) = 4;
  __asm { FMOV            V0.2D, #1.0 }
  v20 = _Q0;
  v21 = 0x3FF0000000000000;
  v22 = 0;
  v24 = 0;
  v23 = 0;
  v25 = 1;
  v26 = static Image.ResizingInfo.resizable;
  v27 = xmmword_2561A7438;
  v28 = byte_2561A7448;
  v29 = 257;
  v30 = 3;
  v17[0] = 0uLL;
  v17[1] = xmmword_235260F10;
  v16 = 3;
  Image.Resolved.init(image:decorative:label:basePlatformItemImage:backgroundShape:backgroundCornerRadius:)(&v18, 1, v17, 0, &v16, 0.0, 1, a2);
  return result;
}

uint64_t sub_234D48878(uint64_t *a1)
{
  uint64_t v2;

  v2 = *a1;
  return EnvironmentValues.redactionReasons.setter(&v2);
}

uint64_t specialized static ShouldRedactContentKey.value(in:)(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  Swift::Int v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v4 = *a1;
  v5 = a1[1];
  if (v5)
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v4, &v14);
    swift_release_n();
    swift_release_n();
    LOBYTE(v6) = v14;
    if ((v14 & 1) != 0)
      return 1;
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<RedactionReasonsKey>(0, a2, a3, a4);
    BloomFilter.init(hashValue:)(v7);
    v8 = swift_retain_n();
    v9 = specialized find1<A>(_:key:filter:)(v8, v14);
    if (v9)
      v6 = *(_QWORD *)(v9 + 72);
    else
      LOBYTE(v6) = 0;
    swift_release_n();
    if ((v6 & 1) != 0)
      return 1;
  }
  if ((v6 & 2) != 0)
  {
    if (v5)
    {
      swift_retain_n();
      swift_retain_n();
      v10 = specialized PropertyList.Tracker.value<A>(_:for:)(v4);
      swift_release_n();
      swift_release_n();
      if ((v10 & 1) != 0)
        return 1;
    }
    else
    {
      v12 = swift_retain_n();
      v13 = specialized closure #1 in PropertyList.subscript.getter(v12);
      swift_release_n();
      if ((v13 & 1) != 0)
        return 1;
    }
  }
  return 0;
}

uint64_t sub_234D489E8()
{
  return swift_deallocObject();
}

_QWORD *partial apply for closure #1 in View.redacted(reason:)(_QWORD *result)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 + 16);
  if ((v2 & ~*result) != 0)
    *result |= v2;
  return result;
}

void type metadata accessor for EnvironmentPropertyKey<RedactionReasonsKey>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  uint64_t v5;

  if (!lazy cache variable for type metadata for EnvironmentPropertyKey<RedactionReasonsKey>)
  {
    v4 = type metadata accessor for EnvironmentPropertyKey(0, (uint64_t)&type metadata for RedactionReasonsKey, (uint64_t)&protocol witness table for RedactionReasonsKey, a4);
    if (!v5)
      atomic_store(v4, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<RedactionReasonsKey>);
  }
}

uint64_t sub_234D48A70()
{
  return swift_deallocObject();
}

unint64_t lazy protocol witness table accessor for type RedactionReasons and conformance RedactionReasons()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type RedactionReasons and conformance RedactionReasons;
  if (!lazy protocol witness table cache variable for type RedactionReasons and conformance RedactionReasons)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for RedactionReasons, &type metadata for RedactionReasons);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RedactionReasons and conformance RedactionReasons);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type RedactionReasons and conformance RedactionReasons;
  if (!lazy protocol witness table cache variable for type RedactionReasons and conformance RedactionReasons)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for RedactionReasons, &type metadata for RedactionReasons);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RedactionReasons and conformance RedactionReasons);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type RedactionReasons and conformance RedactionReasons;
  if (!lazy protocol witness table cache variable for type RedactionReasons and conformance RedactionReasons)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for RedactionReasons, &type metadata for RedactionReasons);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RedactionReasons and conformance RedactionReasons);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type RedactionReasons and conformance RedactionReasons;
  if (!lazy protocol witness table cache variable for type RedactionReasons and conformance RedactionReasons)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for RedactionReasons, &type metadata for RedactionReasons);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RedactionReasons and conformance RedactionReasons);
  }
  return result;
}

uint64_t sub_234D48BA4(char *a1)
{
  return EnvironmentValues.unredactSymbolImage.setter(*a1);
}

ValueMetadata *type metadata accessor for RedactionReasons()
{
  return &type metadata for RedactionReasons;
}

uint64_t sub_234D48BD8(uint64_t *a1)
{
  return get_witness_table_7SwiftUI4ViewRzlAA15ModifiedContentVyxAA32_EnvironmentKeyTransformModifierVyAA16RedactionReasonsVGGAaBHPxAaBHD1__AiA0cI0HPyHCHCTm(a1, &lazy cache variable for type metadata for _EnvironmentKeyTransformModifier<RedactionReasons>, (uint64_t (*)(_QWORD, ValueMetadata *))type metadata accessor for _EnvironmentKeyTransformModifier, (uint64_t)&protocol witness table for _EnvironmentKeyTransformModifier<A>);
}

uint64_t sub_234D48BF4(uint64_t *a1)
{
  return get_witness_table_7SwiftUI4ViewRzlAA15ModifiedContentVyxAA32_EnvironmentKeyTransformModifierVyAA16RedactionReasonsVGGAaBHPxAaBHD1__AiA0cI0HPyHCHCTm(a1, &lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<RedactionReasons>, (uint64_t (*)(_QWORD, ValueMetadata *))type metadata accessor for _EnvironmentKeyWritingModifier, (uint64_t)&protocol witness table for _EnvironmentKeyWritingModifier<A>);
}

uint64_t get_witness_table_7SwiftUI4ViewRzlAA15ModifiedContentVyxAA32_EnvironmentKeyTransformModifierVyAA16RedactionReasonsVGGAaBHPxAaBHD1__AiA0cI0HPyHCHCTm(uint64_t *a1, unint64_t *a2, uint64_t (*a3)(_QWORD, ValueMetadata *), uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[2];

  v5 = *a1;
  v6 = a1[1];
  type metadata accessor for _EnvironmentKeyTransformModifier<RedactionReasons>(255, a2, a3);
  v9 = type metadata accessor for ModifiedContent(255, v5, v7, v8);
  v11[0] = v6;
  v11[1] = a4;
  return MEMORY[0x23B7C9C04]("I{:\x1B̧\t", v9, v11);
}

void type metadata accessor for _EnvironmentKeyTransformModifier<RedactionReasons>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(_QWORD, ValueMetadata *))
{
  unint64_t v4;
  uint64_t v5;

  if (!*a2)
  {
    v4 = a3(0, &type metadata for RedactionReasons);
    if (!v5)
      atomic_store(v4, a2);
  }
}

ValueMetadata *type metadata accessor for RedactionReasonsKey()
{
  return &type metadata for RedactionReasonsKey;
}

void type metadata accessor for ImageProviderBox<Image.RedactedImageProvider>(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  if (!lazy cache variable for type metadata for ImageProviderBox<Image.RedactedImageProvider>)
  {
    v2 = lazy protocol witness table accessor for type Image.RedactedImageProvider and conformance Image.RedactedImageProvider();
    v4 = type metadata accessor for ImageProviderBox(a1, (uint64_t)&unk_25064C470, v2, v3);
    if (!v5)
      atomic_store(v4, (unint64_t *)&lazy cache variable for type metadata for ImageProviderBox<Image.RedactedImageProvider>);
  }
}

unint64_t lazy protocol witness table accessor for type Image.RedactedImageProvider and conformance Image.RedactedImageProvider()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Image.RedactedImageProvider and conformance Image.RedactedImageProvider;
  if (!lazy protocol witness table cache variable for type Image.RedactedImageProvider and conformance Image.RedactedImageProvider)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Image.RedactedImageProvider, &unk_25064C470);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Image.RedactedImageProvider and conformance Image.RedactedImageProvider);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Image.RedactedImageProvider and conformance Image.RedactedImageProvider;
  if (!lazy protocol witness table cache variable for type Image.RedactedImageProvider and conformance Image.RedactedImageProvider)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Image.RedactedImageProvider, &unk_25064C470);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Image.RedactedImageProvider and conformance Image.RedactedImageProvider);
  }
  return result;
}

uint64_t specialized static ShouldRedactSymbolImagesKey.value(in:)(uint64_t *a1)
{
  uint64_t v1;
  char v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  char v9;
  uint64_t v11[2];

  v1 = *a1;
  if (!a1[1])
  {
    v11[0] = *a1;
    v11[1] = 0;
    swift_retain();
    v7 = specialized static ShouldRedactContentKey.value(in:)(v11, v4, v5, v6);
    swift_release();
    if ((v7 & 1) != 0)
    {
      v8 = swift_retain_n();
      v3 = specialized closure #1 in PropertyList.subscript.getter(v8);
      goto LABEL_6;
    }
LABEL_7:
    v9 = 0;
    return v9 & 1;
  }
  swift_retain_n();
  swift_retain_n();
  v2 = specialized PropertyList.Tracker.derivedValue<A>(_:for:)(v1);
  swift_release_n();
  swift_release_n();
  if ((v2 & 1) == 0)
    goto LABEL_7;
  swift_retain_n();
  swift_retain_n();
  v3 = specialized PropertyList.Tracker.value<A>(_:for:)(v1);
  swift_release_n();
LABEL_6:
  swift_release_n();
  v9 = v3 ^ 1;
  return v9 & 1;
}

ValueMetadata *type metadata accessor for ShouldRedactContentKey()
{
  return &type metadata for ShouldRedactContentKey;
}

ValueMetadata *type metadata accessor for UnredactSymbolImage()
{
  return &type metadata for UnredactSymbolImage;
}

ValueMetadata *type metadata accessor for ShouldRedactSymbolImagesKey()
{
  return &type metadata for ShouldRedactSymbolImagesKey;
}

void *type metadata accessor for Image.RedactedImageProvider()
{
  return &unk_25064C470;
}

unint64_t instantiation function for generic protocol witness table for Image.RedactedImageProvider(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type Image.RedactedImageProvider and conformance Image.RedactedImageProvider();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

void static SemanticFeature.requirement.getter(_BYTE *a1@<X8>)
{
  static SemanticFeature.requirement.getter(a1);
}

{
  *a1 = 0;
}

_QWORD *static SemanticFeature.prior.getter@<X0>(uint64_t a1@<X1>, _DWORD *a2@<X8>)
{
  _QWORD *result;
  uint64_t v4;

  result = (*(_QWORD *(**)(uint64_t *__return_ptr))(a1 + 16))(&v4);
  if ((_DWORD)v4)
    *a2 = v4 - 1;
  else
    __break(1u);
  return result;
}

uint64_t one-time initialization function for introduced(uint64_t a1)
{
  return one-time initialization function for introduced(a1, &one-time initialization token for v2, &static Semantics.v2, &static _SemanticFeature_v2.introduced);
}

{
  return one-time initialization function for introduced(a1, &one-time initialization token for v2_1, &static Semantics.v2_1, &static _SemanticFeature_v2_1.introduced);
}

{
  return one-time initialization function for introduced(a1, &one-time initialization token for v2_3, &static Semantics.v2_3, &static _SemanticFeature_v2_3.introduced);
}

{
  return one-time initialization function for introduced(a1, &one-time initialization token for v3, &static Semantics.v3, &static _SemanticFeature_v3.introduced);
}

{
  return one-time initialization function for introduced(a1, &one-time initialization token for v4, &static Semantics.v4, &static _SemanticFeature_v4.introduced);
}

{
  return one-time initialization function for introduced(a1, &one-time initialization token for v4_4, &static Semantics.v4_4, &static _SemanticFeature_v4_4.introduced);
}

{
  return one-time initialization function for introduced(a1, &one-time initialization token for v5, &static Semantics.v5, &static _SemanticFeature_v5.introduced);
}

{
  return one-time initialization function for introduced(a1, one-time initialization token for v5_2, &static Semantics.v5_2, &static _SemanticFeature_v5_2.introduced);
}

{
  return one-time initialization function for introduced(a1, &one-time initialization token for v6, &static Semantics.v6, &static _SemanticFeature_v6.introduced);
}

{
  return one-time initialization function for introduced(a1, &one-time initialization token for v6, &static Semantics.v6, &static Semantics.DismissPopsInNavigationSplitViewRoots.introduced);
}

{
  return one-time initialization function for introduced(a1, &one-time initialization token for firstRelease, &static Semantics.firstRelease, static EnabledFeature.introduced);
}

_QWORD *static _SemanticFeature_v2.introduced.getter@<X0>(_DWORD *a1@<X8>)
{
  return static _SemanticFeature_v2.introduced.getter(&one-time initialization token for introduced, &static _SemanticFeature_v2.introduced, a1);
}

uint64_t protocol witness for static SemanticFeature.introduced.getter in conformance _SemanticFeature_v2@<X0>(_DWORD *a1@<X8>)
{
  return protocol witness for static PropertyKey.defaultValue.getter in conformance _GraphInputs.ScrollPositionAnchorKey(&one-time initialization token for introduced, &static _SemanticFeature_v2.introduced, a1);
}

_QWORD *static _SemanticFeature_v2_1.introduced.getter@<X0>(_DWORD *a1@<X8>)
{
  return static _SemanticFeature_v2.introduced.getter(&one-time initialization token for introduced, &static _SemanticFeature_v2_1.introduced, a1);
}

_QWORD *static _SemanticFeature_v2.introduced.getter@<X0>(_QWORD *result@<X0>, _DWORD *a2@<X1>, _DWORD *a3@<X8>)
{
  if (*result != -1)
    result = (_QWORD *)swift_once();
  *a3 = *a2;
  return result;
}

uint64_t protocol witness for static SemanticFeature.introduced.getter in conformance _SemanticFeature_v2_1@<X0>(_DWORD *a1@<X8>)
{
  return protocol witness for static PropertyKey.defaultValue.getter in conformance _GraphInputs.ScrollPositionAnchorKey(&one-time initialization token for introduced, &static _SemanticFeature_v2_1.introduced, a1);
}

_QWORD *static _SemanticFeature_v2_3.introduced.getter@<X0>(_DWORD *a1@<X8>)
{
  return static _SemanticFeature_v2.introduced.getter(&one-time initialization token for introduced, &static _SemanticFeature_v2_3.introduced, a1);
}

uint64_t protocol witness for static SemanticFeature.introduced.getter in conformance _SemanticFeature_v2_3@<X0>(_DWORD *a1@<X8>)
{
  return protocol witness for static PropertyKey.defaultValue.getter in conformance _GraphInputs.ScrollPositionAnchorKey(&one-time initialization token for introduced, &static _SemanticFeature_v2_3.introduced, a1);
}

_QWORD *static _SemanticFeature_v3.introduced.getter@<X0>(_DWORD *a1@<X8>)
{
  return static _SemanticFeature_v2.introduced.getter(&one-time initialization token for introduced, &static _SemanticFeature_v3.introduced, a1);
}

uint64_t protocol witness for static SemanticFeature.introduced.getter in conformance _SemanticFeature_v3@<X0>(_DWORD *a1@<X8>)
{
  return protocol witness for static PropertyKey.defaultValue.getter in conformance _GraphInputs.ScrollPositionAnchorKey(&one-time initialization token for introduced, &static _SemanticFeature_v3.introduced, a1);
}

_QWORD *static _SemanticFeature_v4.introduced.getter@<X0>(_DWORD *a1@<X8>)
{
  return static _SemanticFeature_v2.introduced.getter(&one-time initialization token for introduced, &static _SemanticFeature_v4.introduced, a1);
}

uint64_t protocol witness for static SemanticFeature.introduced.getter in conformance _SemanticFeature_v4@<X0>(_DWORD *a1@<X8>)
{
  return protocol witness for static PropertyKey.defaultValue.getter in conformance _GraphInputs.ScrollPositionAnchorKey(&one-time initialization token for introduced, &static _SemanticFeature_v4.introduced, a1);
}

_QWORD *static _SemanticFeature_v4_4.introduced.getter@<X0>(_DWORD *a1@<X8>)
{
  return static _SemanticFeature_v2.introduced.getter(&one-time initialization token for introduced, &static _SemanticFeature_v4_4.introduced, a1);
}

uint64_t protocol witness for static SemanticFeature.introduced.getter in conformance _SemanticFeature_v4_4@<X0>(_DWORD *a1@<X8>)
{
  return protocol witness for static PropertyKey.defaultValue.getter in conformance _GraphInputs.ScrollPositionAnchorKey(&one-time initialization token for introduced, &static _SemanticFeature_v4_4.introduced, a1);
}

_QWORD *static _SemanticFeature_v5.introduced.getter@<X0>(_DWORD *a1@<X8>)
{
  return static _SemanticFeature_v2.introduced.getter(&one-time initialization token for introduced, &static _SemanticFeature_v5.introduced, a1);
}

uint64_t protocol witness for static SemanticFeature.introduced.getter in conformance _SemanticFeature_v5@<X0>(_DWORD *a1@<X8>)
{
  return protocol witness for static PropertyKey.defaultValue.getter in conformance _GraphInputs.ScrollPositionAnchorKey(&one-time initialization token for introduced, &static _SemanticFeature_v5.introduced, a1);
}

_QWORD *static _SemanticFeature_v5_2.introduced.getter@<X0>(_DWORD *a1@<X8>)
{
  return static _SemanticFeature_v2.introduced.getter(&one-time initialization token for introduced, &static _SemanticFeature_v5_2.introduced, a1);
}

uint64_t protocol witness for static SemanticFeature.introduced.getter in conformance _SemanticFeature_v5_2@<X0>(_DWORD *a1@<X8>)
{
  return protocol witness for static PropertyKey.defaultValue.getter in conformance _GraphInputs.ScrollPositionAnchorKey(&one-time initialization token for introduced, &static _SemanticFeature_v5_2.introduced, a1);
}

_QWORD *static _SemanticFeature_v6.introduced.getter@<X0>(_DWORD *a1@<X8>)
{
  return static _SemanticFeature_v2.introduced.getter(&one-time initialization token for introduced, &static _SemanticFeature_v6.introduced, a1);
}

uint64_t protocol witness for static SemanticFeature.introduced.getter in conformance _SemanticFeature_v6@<X0>(_DWORD *a1@<X8>)
{
  return protocol witness for static PropertyKey.defaultValue.getter in conformance _GraphInputs.ScrollPositionAnchorKey(&one-time initialization token for introduced, &static _SemanticFeature_v6.introduced, a1);
}

_QWORD *static Semantics.DismissPopsInNavigationSplitViewRoots.introduced.getter@<X0>(_DWORD *a1@<X8>)
{
  return static _SemanticFeature_v2.introduced.getter(&one-time initialization token for introduced, &static Semantics.DismissPopsInNavigationSplitViewRoots.introduced, a1);
}

void static Semantics.DismissPopsInNavigationSplitViewRoots.requirement.getter(_BYTE *a1@<X8>)
{
  *a1 = 1;
}

uint64_t protocol witness for static SemanticFeature.introduced.getter in conformance Semantics.DismissPopsInNavigationSplitViewRoots@<X0>(_DWORD *a1@<X8>)
{
  return protocol witness for static PropertyKey.defaultValue.getter in conformance _GraphInputs.ScrollPositionAnchorKey(&one-time initialization token for introduced, &static Semantics.DismissPopsInNavigationSplitViewRoots.introduced, a1);
}

void static DisabledFeature.introduced.getter(_DWORD *a1@<X8>)
{
  *a1 = -1;
}

uint64_t static DisabledFeature.isEnabled.getter()
{
  return 0;
}

void protocol witness for static SemanticFeature.introduced.getter in conformance DisabledFeature(_DWORD *a1@<X8>)
{
  *a1 = -1;
}

uint64_t one-time initialization function for introduced(uint64_t a1, _QWORD *a2, _DWORD *a3, _DWORD *a4)
{
  uint64_t result;

  if (*a2 != -1)
    result = swift_once();
  *a4 = *a3;
  return result;
}

_QWORD *static EnabledFeature.introduced.getter@<X0>(_DWORD *a1@<X8>)
{
  return static _SemanticFeature_v2.introduced.getter(&one-time initialization token for introduced, static EnabledFeature.introduced, a1);
}

_UNKNOWN **associated type witness table accessor for ViewInputFlag.Input : ViewInput in _SemanticFeature_v2()
{
  return &protocol witness table for _SemanticFeature_v2;
}

_UNKNOWN **associated type witness table accessor for ViewInputFlag.Input : ViewInput in _SemanticFeature_v2_1()
{
  return &protocol witness table for _SemanticFeature_v2_1;
}

_UNKNOWN **associated type witness table accessor for ViewInputFlag.Input : ViewInput in _SemanticFeature_v2_3()
{
  return &protocol witness table for _SemanticFeature_v2_3;
}

_UNKNOWN **associated type witness table accessor for ViewInputFlag.Input : ViewInput in _SemanticFeature_v3()
{
  return &protocol witness table for _SemanticFeature_v3;
}

_UNKNOWN **associated type witness table accessor for ViewInputFlag.Input : ViewInput in _SemanticFeature_v4()
{
  return &protocol witness table for _SemanticFeature_v4;
}

_UNKNOWN **associated type witness table accessor for ViewInputFlag.Input : ViewInput in _SemanticFeature_v4_4()
{
  return &protocol witness table for _SemanticFeature_v4_4;
}

_UNKNOWN **associated type witness table accessor for ViewInputFlag.Input : ViewInput in _SemanticFeature_v5()
{
  return &protocol witness table for _SemanticFeature_v5;
}

_UNKNOWN **associated type witness table accessor for ViewInputFlag.Input : ViewInput in _SemanticFeature_v5_2()
{
  return &protocol witness table for _SemanticFeature_v5_2;
}

_UNKNOWN **associated type witness table accessor for ViewInputFlag.Input : ViewInput in _SemanticFeature_v6()
{
  return &protocol witness table for _SemanticFeature_v6;
}

_UNKNOWN **associated type witness table accessor for ViewInputFlag.Input : ViewInput in Semantics.DismissPopsInNavigationSplitViewRoots()
{
  return &protocol witness table for Semantics.DismissPopsInNavigationSplitViewRoots;
}

_UNKNOWN **associated type witness table accessor for ViewInputFlag.Input : ViewInput in DisabledFeature()
{
  return &protocol witness table for DisabledFeature;
}

uint64_t protocol witness for static SemanticFeature.introduced.getter in conformance EnabledFeature@<X0>(_DWORD *a1@<X8>)
{
  return protocol witness for static PropertyKey.defaultValue.getter in conformance _GraphInputs.ScrollPositionAnchorKey(&one-time initialization token for introduced, static EnabledFeature.introduced, a1);
}

_UNKNOWN **associated type witness table accessor for ViewInputFlag.Input : ViewInput in EnabledFeature()
{
  return &protocol witness table for EnabledFeature;
}

uint64_t dispatch thunk of static SemanticFeature.introduced.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of static SemanticFeature.requirement.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

ValueMetadata *type metadata accessor for _SemanticFeature_v2()
{
  return &type metadata for _SemanticFeature_v2;
}

ValueMetadata *type metadata accessor for _SemanticFeature_v2_1()
{
  return &type metadata for _SemanticFeature_v2_1;
}

ValueMetadata *type metadata accessor for _SemanticFeature_v2_3()
{
  return &type metadata for _SemanticFeature_v2_3;
}

ValueMetadata *type metadata accessor for _SemanticFeature_v3()
{
  return &type metadata for _SemanticFeature_v3;
}

ValueMetadata *type metadata accessor for _SemanticFeature_v4()
{
  return &type metadata for _SemanticFeature_v4;
}

ValueMetadata *type metadata accessor for _SemanticFeature_v4_4()
{
  return &type metadata for _SemanticFeature_v4_4;
}

ValueMetadata *type metadata accessor for _SemanticFeature_v5()
{
  return &type metadata for _SemanticFeature_v5;
}

ValueMetadata *type metadata accessor for _SemanticFeature_v5_2()
{
  return &type metadata for _SemanticFeature_v5_2;
}

ValueMetadata *type metadata accessor for _SemanticFeature_v6()
{
  return &type metadata for _SemanticFeature_v6;
}

ValueMetadata *type metadata accessor for Semantics.DismissPopsInNavigationSplitViewRoots()
{
  return &type metadata for Semantics.DismissPopsInNavigationSplitViewRoots;
}

ValueMetadata *type metadata accessor for DisabledFeature()
{
  return &type metadata for DisabledFeature;
}

ValueMetadata *type metadata accessor for EnabledFeature()
{
  return &type metadata for EnabledFeature;
}

uint64_t static WindowDragGestureIsActiveKey.defaultValue.getter()
{
  return 0;
}

uint64_t static WindowDragGestureIsActiveKey.reduce(value:nextValue:)(_BYTE *a1, uint64_t (*a2)(void))
{
  uint64_t result;

  if ((*a1 & 1) != 0)
    result = 1;
  else
    result = a2();
  *a1 = result & 1;
  return result;
}

char *protocol witness for static PreferenceKey.reduce(value:nextValue:) in conformance WindowDragGestureIsActiveKey(char *result, _QWORD *(*a2)(uint64_t *__return_ptr))
{
  char *v2;
  char v3;
  uint64_t v4;

  v2 = result;
  if ((*result & 1) != 0)
  {
    v3 = 1;
  }
  else
  {
    result = (char *)a2(&v4);
    v3 = v4;
  }
  *v2 = v3;
  return result;
}

ValueMetadata *type metadata accessor for WindowDragGestureIsActiveKey()
{
  return &type metadata for WindowDragGestureIsActiveKey;
}

void *static ControlSize.allCases.getter()
{
  return &outlined read-only object #0 of static ControlSize.allCases.getter;
}

BOOL static ControlSize.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

void ControlSize.hash(into:)()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0);
}

Swift::Int ControlSize.hashValue.getter()
{
  unsigned __int8 *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void protocol witness for static CaseIterable.allCases.getter in conformance ControlSize(_QWORD *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of protocol witness for static CaseIterable.allCases.getter in conformance ControlSize;
}

uint64_t EnvironmentValues.controlSize.getter@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, char *a4@<X8>)
{
  uint64_t *v4;
  uint64_t v6;
  uint64_t result;
  int v8;
  Swift::Int v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  unsigned __int8 v14;

  v6 = *v4;
  if (v4[1])
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v6, (char *)&v14);
    swift_release_n();
    result = swift_release_n();
    v8 = v14;
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<ControlSizeKey>(0, a1, a2, a3);
    BloomFilter.init(hashValue:)(v9);
    v10 = swift_retain_n();
    v11 = specialized find1<A>(_:key:filter:)(v10, v13);
    if (v11)
      v8 = *(unsigned __int8 *)(v11 + 72);
    else
      v8 = 5;
    result = swift_release_n();
  }
  if (v8 == 5)
    v12 = 2;
  else
    v12 = v8;
  *a4 = v12;
  return result;
}

uint64_t (*EnvironmentValues.controlSize.modify(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4))()
{
  uint64_t v4;

  *(_QWORD *)(a1 + 16) = v4;
  EnvironmentValues.controlSize.getter(a2, a3, a4, (char *)(a1 + 24));
  return EnvironmentValues.controlSize.modify;
}

uint64_t EnvironmentValues.explicitControlSize.getter@<X0>(char *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;

  v3 = *v1;
  if (v1[1])
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v3, a1);
    swift_release_n();
  }
  else
  {
    v4 = swift_retain_n();
    specialized closure #1 in PropertyList.subscript.getter(v4, a1);
  }
  return swift_release_n();
}

uint64_t key path getter for EnvironmentValues.explicitControlSize : EnvironmentValues@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  char v6;

  v3 = *a1;
  if (a1[1])
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v3, &v6);
    swift_release_n();
  }
  else
  {
    v4 = swift_retain_n();
    specialized closure #1 in PropertyList.subscript.getter(v4, &v6);
  }
  result = swift_release_n();
  *a2 = v6;
  return result;
}

uint64_t EnvironmentValues.controlSize.setter(unsigned __int8 *a1)
{
  uint64_t *v1;
  uint64_t v2;
  unsigned __int8 v3;
  uint64_t v4;

  v2 = *v1;
  v3 = *a1;
  swift_retain_n();
  specialized closure #1 in PropertyList.subscript.setter(v1, v3);
  swift_release();
  if (v1[1])
  {
    v4 = *v1;
    swift_retain();
    swift_retain();
    specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v2, v4);
    swift_release();
    swift_release();
  }
  return swift_release();
}

uint64_t (*EnvironmentValues.explicitControlSize.modify(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4))()
{
  uint64_t *v4;
  char *v5;
  uint64_t v6;
  Swift::Int v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v12;

  v5 = (char *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = v4;
  v6 = *v4;
  if (v4[1])
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v6, v5);
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<ControlSizeKey>(0, a2, a3, a4);
    BloomFilter.init(hashValue:)(v7);
    v8 = swift_retain_n();
    v9 = specialized find1<A>(_:key:filter:)(v8, v12);
    if (v9)
      v10 = *(_BYTE *)(v9 + 72);
    else
      v10 = 5;
    *v5 = v10;
  }
  swift_release_n();
  return EnvironmentValues.controlSize.modify;
}

uint64_t EnvironmentValues.controlSize.modify(uint64_t a1)
{
  unsigned __int8 v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_BYTE *)(a1 + 24);
  v3 = *(uint64_t **)(a1 + 16);
  v4 = *v3;
  swift_retain_n();
  specialized closure #1 in PropertyList.subscript.setter(v3, v2);
  swift_release();
  if (v3[1])
  {
    v5 = **(_QWORD **)(a1 + 16);
    swift_retain();
    swift_retain();
    specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v4, v5);
    swift_release();
    swift_release();
  }
  return swift_release();
}

uint64_t View.controlSize(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *KeyPath;

  KeyPath = (uint64_t *)swift_getKeyPath();
  View.environment<A>(_:_:)(KeyPath, a1, a2, a3);
  return swift_release();
}

void protocol witness for static EnvironmentKey.defaultValue.getter in conformance ControlSizeKey(_BYTE *a1@<X8>)
{
  *a1 = 5;
}

void type metadata accessor for EnvironmentPropertyKey<ControlSizeKey>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  uint64_t v5;

  if (!lazy cache variable for type metadata for EnvironmentPropertyKey<ControlSizeKey>)
  {
    v4 = type metadata accessor for EnvironmentPropertyKey(0, (uint64_t)&type metadata for ControlSizeKey, (uint64_t)&protocol witness table for ControlSizeKey, a4);
    if (!v5)
      atomic_store(v4, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ControlSizeKey>);
  }
}

uint64_t sub_234D49C24@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, char *a4@<X8>)
{
  return EnvironmentValues.controlSize.getter(a1, a2, a3, a4);
}

uint64_t sub_234D49C44(char *a1)
{
  char v2;

  v2 = *a1;
  return EnvironmentValues.controlSize.setter(&v2);
}

unint64_t lazy protocol witness table accessor for type ControlSize and conformance ControlSize()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ControlSize and conformance ControlSize;
  if (!lazy protocol witness table cache variable for type ControlSize and conformance ControlSize)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ControlSize, &type metadata for ControlSize);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ControlSize and conformance ControlSize);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type [ControlSize] and conformance [A]()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type [ControlSize] and conformance [A];
  if (!lazy protocol witness table cache variable for type [ControlSize] and conformance [A])
  {
    type metadata accessor for [ControlSize](255, &lazy cache variable for type metadata for [ControlSize], (uint64_t (*)(_QWORD, ValueMetadata *))MEMORY[0x24BEE1250]);
    result = MEMORY[0x23B7C9C04](MEMORY[0x24BEE12E0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [ControlSize] and conformance [A]);
  }
  return result;
}

uint64_t sub_234D49D1C@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, _BYTE *a4@<X8>)
{
  uint64_t result;
  char v6;

  result = EnvironmentValues.controlSize.getter(a1, a2, a3, &v6);
  *a4 = v6;
  return result;
}

uint64_t sub_234D49D5C(char *a1)
{
  char v2;

  v2 = *a1;
  return EnvironmentValues.controlSize.setter(&v2);
}

uint64_t sub_234D49D94(char *a1)
{
  char v2;

  v2 = *a1;
  return EnvironmentValues.controlSize.setter(&v2);
}

uint64_t storeEnumTagSinglePayload for ControlSize(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_234D49E14 + 4 * byte_23529D715[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_234D49E48 + 4 * asc_23529D710[v4]))();
}

uint64_t sub_234D49E48(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_234D49E50(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x234D49E58);
  return result;
}

uint64_t sub_234D49E64(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x234D49E6CLL);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_234D49E70(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_234D49E78(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ControlSize()
{
  return &type metadata for ControlSize;
}

uint64_t sub_234D49E94(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[2];

  v1 = *a1;
  v2 = a1[1];
  type metadata accessor for [ControlSize](255, &lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<ControlSize>, (uint64_t (*)(_QWORD, ValueMetadata *))type metadata accessor for _EnvironmentKeyWritingModifier);
  v5 = type metadata accessor for ModifiedContent(255, v1, v3, v4);
  v7[0] = v2;
  v7[1] = &protocol witness table for _EnvironmentKeyWritingModifier<A>;
  return MEMORY[0x23B7C9C04]("I{:\x1B̧\t", v5, v7);
}

void type metadata accessor for [ControlSize](uint64_t a1, unint64_t *a2, uint64_t (*a3)(_QWORD, ValueMetadata *))
{
  unint64_t v4;
  uint64_t v5;

  if (!*a2)
  {
    v4 = a3(0, &type metadata for ControlSize);
    if (!v5)
      atomic_store(v4, a2);
  }
}

ValueMetadata *type metadata accessor for ControlSizeKey()
{
  return &type metadata for ControlSizeKey;
}

void specialized MutableCollection<>.sort(by:)(_QWORD **a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5[2];

  v2 = *(_QWORD *)(type metadata accessor for Date.ComponentsFormatStyle.Field() - 8);
  v3 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v3 = (_QWORD *)specialized _ContiguousArrayBuffer._consumeAndCreateNew()(v3);
  v4 = v3[2];
  v5[0] = (uint64_t)v3 + ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  v5[1] = v4;
  specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(v5);
  *a1 = v3;
}

uint64_t static FormatStyle<>.offset(to:allowedFields:maxFieldCount:sign:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;

  v10 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(a5, a1, v10);
  v11 = (int *)type metadata accessor for SystemFormatStyle.DateOffset();
  v12 = a5 + v11[7];
  v13 = type metadata accessor for NumberFormatStyleConfiguration.SignDisplayStrategy();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(v12, a4, v13);
  *(_QWORD *)(a5 + v11[8]) = 0;
  swift_bridgeObjectRetain();
  static Locale.autoupdatingCurrent.getter();
  result = static Calendar.autoupdatingCurrent.getter();
  *(_BYTE *)(a5 + v11[11]) = 0;
  *(_BYTE *)(a5 + v11[12]) = 0;
  *(_BYTE *)(a5 + v11[13]) = 0;
  *(_QWORD *)(a5 + v11[5]) = a2;
  *(_QWORD *)(a5 + v11[6]) = a3;
  return result;
}

uint64_t SystemFormatStyle.DateOffset.init(to:allowedFields:maxFieldCount:sign:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  int *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v10 = (int *)type metadata accessor for SystemFormatStyle.DateOffset();
  *(_QWORD *)(a5 + v10[8]) = 0;
  static Locale.autoupdatingCurrent.getter();
  static Calendar.autoupdatingCurrent.getter();
  *(_BYTE *)(a5 + v10[11]) = 0;
  *(_BYTE *)(a5 + v10[12]) = 0;
  *(_BYTE *)(a5 + v10[13]) = 0;
  v11 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(a5, a1, v11);
  *(_QWORD *)(a5 + v10[5]) = a2;
  *(_QWORD *)(a5 + v10[6]) = a3;
  v12 = a5 + v10[7];
  v13 = type metadata accessor for NumberFormatStyleConfiguration.SignDisplayStrategy();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 32))(v12, a4, v13);
}

uint64_t type metadata accessor for SystemFormatStyle.DateOffset()
{
  uint64_t result;

  result = type metadata singleton initialization cache for SystemFormatStyle.DateOffset;
  if (!type metadata singleton initialization cache for SystemFormatStyle.DateOffset)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t SystemFormatStyle.DateOffset.calendar(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;

  outlined init with copy of TypesettingLanguage(v2, a2, (uint64_t (*)(_QWORD))type metadata accessor for SystemFormatStyle.DateOffset);
  v5 = a2 + *(int *)(type metadata accessor for SystemFormatStyle.DateOffset() + 40);
  v6 = type metadata accessor for Calendar();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(v5, a1, v6);
}

uint64_t SystemFormatStyle.DateOffset.CodingKeys.stringValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_234D4A264 + 4 * byte_23529D830[a1]))(0x726F68636E61, 0xE600000000000000);
}

uint64_t sub_234D4A264()
{
  return 0x466465776F6C6C61;
}

uint64_t sub_234D4A288()
{
  return 0x646C65694678616DLL;
}

uint64_t sub_234D4A2AC()
{
  return 1852270963;
}

uint64_t sub_234D4A2BC()
{
  return 0x69726156657A6973;
}

uint64_t sub_234D4A2DC()
{
  return 0x656C61636F6CLL;
}

uint64_t sub_234D4A2EC()
{
  return 0x7261646E656C6163;
}

uint64_t sub_234D4A304()
{
  return 0x7246657461647075;
}

uint64_t sub_234D4A328()
{
  return 0x6964496863746177;
}

unint64_t sub_234D4A344()
{
  return 0xD000000000000012;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance SystemFormatStyle.DateOffset.CodingKeys()
{
  unsigned __int8 *v0;

  return SystemFormatStyle.DateOffset.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance SystemFormatStyle.DateOffset.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = specialized SystemFormatStyle.DateOffset.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance SystemFormatStyle.DateOffset.CodingKeys()
{
  lazy protocol witness table accessor for type SystemFormatStyle.DateOffset.CodingKeys and conformance SystemFormatStyle.DateOffset.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance SystemFormatStyle.DateOffset.CodingKeys()
{
  lazy protocol witness table accessor for type SystemFormatStyle.DateOffset.CodingKeys and conformance SystemFormatStyle.DateOffset.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t SystemFormatStyle.DateOffset.format(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(uint64_t);
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  char v52;
  uint64_t v53;
  uint64_t result;
  const char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  void *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  char *v66;
  char *v67;
  uint64_t v68;
  void (*v69)(uint64_t, char *, char *);
  uint64_t v70;
  void (*v71)(uint64_t, char *, uint64_t);
  uint64_t v72;
  int v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  char v84;
  char v85;
  uint64_t v86;
  uint64_t v87;
  int *v88;
  const char *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  void *v93;
  char *v94;
  uint64_t v95;
  char *v96;
  char *v97;
  char *v98;
  uint64_t v99;
  void (*v100)(char *, char *, uint64_t);
  uint64_t v101;
  void (*v102)(char *, char *, uint64_t);
  char *v103;
  uint64_t v104;
  char *v105;
  uint64_t v106;
  char *v107;
  char *v108;
  char *v109;
  uint64_t v110;
  void (*v111)(char *, uint64_t);
  uint64_t v112;
  uint64_t v113;
  char *v114;
  int v115;
  uint64_t v116;
  uint64_t v117;
  char *v118;
  uint64_t v119;
  char *v120;
  char *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  unint64_t v125;
  uint64_t v126;
  uint64_t v127;
  char *v128;
  uint64_t v129;
  char v130;
  char v131;
  uint64_t v132;
  uint64_t v133;
  char *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  char v138;
  void (*v139)(char *, char *);
  char *v140;
  int *v141;
  char *v142;
  uint64_t v143;
  void (*v144)(int *, uint64_t, uint64_t);
  uint64_t v145;
  uint64_t v146;
  char *v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  void (*v151)(char *, uint64_t, uint64_t);
  void (*v152)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v153;
  void (*v154)(char *, uint64_t);
  uint64_t v155;
  const char *v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  void *v160;
  uint64_t v161;
  uint64_t v162;
  char *v163;
  char *v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  char *v170;
  uint64_t v171;
  char *v172;
  uint64_t v173;
  char *v174;
  uint64_t v175;
  char *v176;
  void (*v177)(uint64_t, char *, char *);
  char *v178;
  char *v179;
  uint64_t v180;
  uint64_t v181;
  char *v182;
  char *v183;
  uint64_t v184;
  char *v185;
  char *v186;
  uint64_t v187;
  uint64_t v188;
  int *v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  _QWORD v193[2];

  v192 = a1;
  v187 = a2;
  v166 = type metadata accessor for DateComponents();
  v165 = *(_QWORD *)(v166 - 8);
  MEMORY[0x24BDAC7A8](v166);
  v164 = (char *)&v162 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v168 = type metadata accessor for Calendar.Component();
  v167 = *(_QWORD *)(v168 - 8);
  MEMORY[0x24BDAC7A8](v168);
  v171 = (uint64_t)&v162 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for AttributeContainer();
  MEMORY[0x24BDAC7A8](v5);
  v170 = (char *)&v162 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Range<Date>();
  MEMORY[0x24BDAC7A8](v7);
  v169 = (uint64_t)&v162 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = (void (*)(uint64_t))MEMORY[0x24BDCE760];
  type metadata accessor for (style: Date.ComponentsFormatStyle, largestField: Date.ComponentsFormatStyle.Field, smallestField: Date.ComponentsFormatStyle.Field)?(0, &lazy cache variable for type metadata for (style: Date.ComponentsFormatStyle, largestField: Date.ComponentsFormatStyle.Field, smallestField: Date.ComponentsFormatStyle.Field)?, (uint64_t)&lazy cache variable for type metadata for (style: Date.ComponentsFormatStyle, largestField: Date.ComponentsFormatStyle.Field, smallestField: Date.ComponentsFormatStyle.Field), (uint64_t)MEMORY[0x24BDCE760], (void (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for (style: Date.ComponentsFormatStyle, largestField: Date.ComponentsFormatStyle.Field, smallestField: Date.ComponentsFormatStyle.Field));
  MEMORY[0x24BDAC7A8](v10);
  v186 = (char *)&v162 - v11;
  type metadata accessor for (Date.ComponentsFormatStyle, Date.ComponentsFormatStyle.Field, Date.ComponentsFormatStyle.Field)(0, &lazy cache variable for type metadata for (Date.ComponentsFormatStyle, Date.ComponentsFormatStyle.Field, Date.ComponentsFormatStyle.Field), v9);
  v173 = v12;
  MEMORY[0x24BDAC7A8](v12);
  v172 = (char *)&v162 - v13;
  v14 = type metadata accessor for Date.ComponentsFormatStyle();
  v180 = *(_QWORD *)(v14 - 8);
  v181 = v14;
  MEMORY[0x24BDAC7A8](v14);
  v179 = (char *)&v162 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v175 = type metadata accessor for WhitespaceRemovingFormatStyle<Duration.UnitsFormatStyle.Attributed, AttributeScopes.FoundationAttributes.MeasurementAttribute>();
  MEMORY[0x24BDAC7A8](v175);
  v176 = (char *)&v162 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for Duration.UnitsFormatStyle.UnitWidth();
  v184 = *(_QWORD *)(v17 - 8);
  v185 = (char *)v17;
  MEMORY[0x24BDAC7A8](v17);
  v183 = (char *)&v162 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v19);
  v182 = (char *)&v162 - v20;
  v21 = (void (*)(uint64_t))MEMORY[0x24BDD0960];
  type metadata accessor for (style: Date.ComponentsFormatStyle, largestField: Date.ComponentsFormatStyle.Field, smallestField: Date.ComponentsFormatStyle.Field)?(0, &lazy cache variable for type metadata for (style: Duration.UnitsFormatStyle.Attributed, largestField: Date.ComponentsFormatStyle.Field, smallestField: Date.ComponentsFormatStyle.Field)?, (uint64_t)&lazy cache variable for type metadata for (style: Duration.UnitsFormatStyle.Attributed, largestField: Date.ComponentsFormatStyle.Field, smallestField: Date.ComponentsFormatStyle.Field), (uint64_t)MEMORY[0x24BDD0960], (void (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for (style: Date.ComponentsFormatStyle, largestField: Date.ComponentsFormatStyle.Field, smallestField: Date.ComponentsFormatStyle.Field));
  MEMORY[0x24BDAC7A8](v22);
  v24 = (char *)&v162 - v23;
  type metadata accessor for (style: Date.ComponentsFormatStyle, largestField: Date.ComponentsFormatStyle.Field, smallestField: Date.ComponentsFormatStyle.Field)(0, &lazy cache variable for type metadata for (style: Duration.UnitsFormatStyle.Attributed, largestField: Date.ComponentsFormatStyle.Field, smallestField: Date.ComponentsFormatStyle.Field), v21);
  v26 = v25;
  v27 = *((_QWORD *)v25 - 1);
  MEMORY[0x24BDAC7A8](v25);
  v174 = (char *)&v162 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v29);
  v188 = (uint64_t)&v162 - v30;
  v31 = type metadata accessor for Date.ComponentsFormatStyle.Field();
  v32 = *(_QWORD *)(v31 - 8);
  v190 = v31;
  v191 = v32;
  MEMORY[0x24BDAC7A8](v31);
  v178 = (char *)&v162 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v34);
  v36 = (char *)&v162 - v35;
  v189 = (int *)type metadata accessor for SystemFormatStyle.DateOffset();
  MEMORY[0x24BDAC7A8](v189);
  v38 = (char *)&v162 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for (style: Duration.TimeFormatStyle.Attributed, smallestField: Date.ComponentsFormatStyle.Field)?, (uint64_t (*)(uint64_t))type metadata accessor for (style: Duration.TimeFormatStyle.Attributed, smallestField: Date.ComponentsFormatStyle.Field), (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v39);
  v41 = (char *)&v162 - v40;
  type metadata accessor for (style: Duration.TimeFormatStyle.Attributed, smallestField: Date.ComponentsFormatStyle.Field)();
  v43 = v42;
  v44 = *(_QWORD *)(v42 - 8);
  MEMORY[0x24BDAC7A8](v42);
  v177 = (void (*)(uint64_t, char *, char *))((char *)&v162 - ((v45 + 15) & 0xFFFFFFFFFFFFFFF0));
  v46 = v2;
  if (!SystemFormatStyle.DateOffset.canUseTimeStyle.getter())
  {
LABEL_4:
    v47 = v192;
    SystemFormatStyle.DateOffset.unitsStyle(for:)(v192, (uint64_t)v24);
    if ((*(unsigned int (**)(char *, uint64_t, char *))(v27 + 48))(v24, 1, v26) == 1)
    {
      outlined destroy of (style: Duration.UnitsFormatStyle.Attributed, largestField: Date.ComponentsFormatStyle.Field, smallestField: Date.ComponentsFormatStyle.Field)?((uint64_t)v24, &lazy cache variable for type metadata for (style: Duration.UnitsFormatStyle.Attributed, largestField: Date.ComponentsFormatStyle.Field, smallestField: Date.ComponentsFormatStyle.Field)?, (uint64_t)&lazy cache variable for type metadata for (style: Duration.UnitsFormatStyle.Attributed, largestField: Date.ComponentsFormatStyle.Field, smallestField: Date.ComponentsFormatStyle.Field), (uint64_t)MEMORY[0x24BDD0960], (void (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for (style: Date.ComponentsFormatStyle, largestField: Date.ComponentsFormatStyle.Field, smallestField: Date.ComponentsFormatStyle.Field));
      v48 = v186;
      SystemFormatStyle.DateOffset.componentsStyle(for:)(v47, (uint64_t)v186);
      type metadata accessor for (style: Date.ComponentsFormatStyle, largestField: Date.ComponentsFormatStyle.Field, smallestField: Date.ComponentsFormatStyle.Field)(0, &lazy cache variable for type metadata for (style: Date.ComponentsFormatStyle, largestField: Date.ComponentsFormatStyle.Field, smallestField: Date.ComponentsFormatStyle.Field), (void (*)(uint64_t))MEMORY[0x24BDCE760]);
      v50 = v49;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v49 - 8) + 48))(v48, 1, v49) == 1)
      {
        outlined destroy of (style: Duration.UnitsFormatStyle.Attributed, largestField: Date.ComponentsFormatStyle.Field, smallestField: Date.ComponentsFormatStyle.Field)?((uint64_t)v48, &lazy cache variable for type metadata for (style: Date.ComponentsFormatStyle, largestField: Date.ComponentsFormatStyle.Field, smallestField: Date.ComponentsFormatStyle.Field)?, (uint64_t)&lazy cache variable for type metadata for (style: Date.ComponentsFormatStyle, largestField: Date.ComponentsFormatStyle.Field, smallestField: Date.ComponentsFormatStyle.Field), (uint64_t)MEMORY[0x24BDCE760], (void (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for (style: Date.ComponentsFormatStyle, largestField: Date.ComponentsFormatStyle.Field, smallestField: Date.ComponentsFormatStyle.Field));
        static Date.ComponentsFormatStyle.Field.minute.getter();
        v51 = SystemFormatStyle.DateOffset.needsSign(for:smallestFieldShown:)(v47, (uint64_t)v36);
        (*(void (**)(char *, uint64_t))(v191 + 8))(v36, v190);
        v52 = static Date.< infix(_:_:)();
        v53 = v187;
        result = SystemFormatStyle.DateOffset.smallerOneMinuteString.getter(v187);
        if ((v51 & 1) != 0)
        {
          if ((v52 & 1) != 0)
          {
            v55 = "A negative time value (argument provides the value as localized by\n"
                  "ICU, either in a form like \"1 day, 2 hours\", or \"1:23:45\")";
            v56 = v53;
            v57 = 3;
            v58 = 9603298;
            v59 = (void *)0xA300000000000000;
          }
          else
          {
            v55 = "A positive time value (argument provides the value as localized by\n"
                  "ICU, either in a form like \"1 day, 2 hours\", or \"1:23:45\")";
            v56 = v53;
            v57 = 1;
            v58 = 43;
            v59 = (void *)0xE100000000000000;
          }
          return SystemFormatStyle.DateOffset.addNegativeSign(to:)(v56, v57, v58, v59, (uint64_t)v55);
        }
        return result;
      }
      v94 = &v48[*(int *)(v50 + 48)];
      v185 = &v48[*(int *)(v50 + 64)];
      v95 = v173;
      v96 = v172;
      v97 = &v172[*(int *)(v173 + 48)];
      v98 = &v172[*(int *)(v173 + 64)];
      v99 = v181;
      v100 = *(void (**)(char *, char *, uint64_t))(v180 + 32);
      v100(v172, v48, v181);
      v188 = v2;
      v101 = v191;
      v102 = *(void (**)(char *, char *, uint64_t))(v191 + 32);
      v103 = v94;
      v104 = v190;
      v102(v97, v103, v190);
      v105 = v98;
      v106 = v192;
      v102(v105, v185, v104);
      v107 = &v96[*(int *)(v95 + 48)];
      v108 = &v96[*(int *)(v95 + 64)];
      v109 = v179;
      v100(v179, v96, v99);
      v110 = (uint64_t)v178;
      v102(v178, v108, v104);
      v111 = *(void (**)(char *, uint64_t))(v101 + 8);
      v111(v107, v104);
      v112 = v106;
      v113 = v106;
      v114 = v109;
      v115 = SystemFormatStyle.DateOffset.needsSign(for:smallestFieldShown:)(v113, v110);
      if ((Date.ComponentsFormatStyle.isPositive.getter() & 1) != 0)
      {
        v116 = v169;
        SystemFormatStyle.DateOffset.dateRange(for:)(v112, v169);
        Date.ComponentsFormatStyle.format(_:)();
        outlined destroy of TypesettingConfiguration(v116, (uint64_t (*)(_QWORD))type metadata accessor for Range<Date>);
        AttributeContainer.init()();
        v117 = v187;
        AttributedString.init(_:attributes:)();
        if ((v115 & 1) != 0)
          SystemFormatStyle.DateOffset.addNegativeSign(to:)(v117, 1, 43, (void *)0xE100000000000000, (uint64_t)"A positive time value (argument provides the value as localized by\nICU, either in a form like \"1 day, 2 hours\", or \"1:23:45\")");
        v111((char *)v110, v190);
        return (*(uint64_t (**)(char *, uint64_t))(v180 + 8))(v114, v181);
      }
      v186 = (char *)v111;
      LODWORD(v191) = v115;
      v123 = v171;
      SystemFormatStyle.DateOffset.component(for:)(v110, v171);
      type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for _ContiguousArrayStorage<Calendar.Component>, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF290], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
      v124 = v167;
      v125 = (*(unsigned __int8 *)(v167 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v167 + 80);
      v126 = swift_allocObject();
      *(_OWORD *)(v126 + 16) = xmmword_23527E860;
      v127 = v168;
      (*(void (**)(unint64_t, uint64_t, uint64_t))(v124 + 16))(v126 + v125, v123, v168);
      specialized Set.init(_nonEmptyArrayLiteral:)(v126);
      swift_setDeallocating();
      swift_arrayDestroy();
      swift_deallocClassInstance();
      v128 = v164;
      Calendar.dateComponents(_:from:to:)();
      swift_bridgeObjectRelease();
      v129 = DateComponents.value(for:)();
      v131 = v130;
      (*(void (**)(char *, uint64_t))(v165 + 8))(v128, v166);
      if ((v131 & 1) != 0)
      {
        v161 = v169;
        SystemFormatStyle.DateOffset.dateRange(for:)(v112, v169);
        Date.ComponentsFormatStyle.format(_:)();
        outlined destroy of TypesettingConfiguration(v161, (uint64_t (*)(_QWORD))type metadata accessor for Range<Date>);
        AttributeContainer.init()();
        v133 = v187;
        AttributedString.init(_:attributes:)();
        v134 = v178;
      }
      else
      {
        v132 = v169;
        SystemFormatStyle.DateOffset.dateRange(for:)(v112, v169);
        Date.ComponentsFormatStyle.format(_:)();
        outlined destroy of TypesettingConfiguration(v132, (uint64_t (*)(_QWORD))type metadata accessor for Range<Date>);
        AttributeContainer.init()();
        v133 = v187;
        AttributedString.init(_:attributes:)();
        v134 = v178;
        if (!v129)
          goto LABEL_50;
      }
      SystemFormatStyle.DateOffset.removeNegativeSign(from:)(v133);
LABEL_50:
      if ((v191 & 1) != 0)
        SystemFormatStyle.DateOffset.addNegativeSign(to:)(v133, 3, 9603298, (void *)0xA300000000000000, (uint64_t)"A negative time value (argument provides the value as localized by\nICU, either in a form like \"1 day, 2 hours\", or \"1:23:45\")");
      (*(void (**)(uint64_t, uint64_t))(v124 + 8))(v171, v127);
      ((void (*)(char *, uint64_t))v186)(v134, v190);
      return (*(uint64_t (**)(char *, uint64_t))(v180 + 8))(v179, v181);
    }
    v60 = *((int *)v26 + 12);
    v61 = v188;
    v62 = v188 + v60;
    v179 = v26;
    v63 = *((int *)v26 + 16);
    v64 = v188 + v63;
    v65 = &v24[v60];
    v66 = &v24[v63];
    v67 = (char *)type metadata accessor for Duration.UnitsFormatStyle.Attributed();
    v68 = *((_QWORD *)v67 - 1);
    v69 = *(void (**)(uint64_t, char *, char *))(v68 + 32);
    v186 = v67;
    v177 = v69;
    ((void (*)(uint64_t, char *))v69)(v61, v24);
    v70 = v2;
    v71 = *(void (**)(uint64_t, char *, uint64_t))(v191 + 32);
    v72 = v190;
    v71(v62, v65, v190);
    v71(v64, v66, v72);
    v73 = SystemFormatStyle.DateOffset.needsSign(for:smallestFieldShown:)(v47, v64);
    LODWORD(v178) = static Date.< infix(_:_:)();
    Date.timeIntervalSince(_:)();
    v74 = static Duration.seconds(_:)();
    v76 = v75;
    static Duration.zero.getter();
    if ((static Duration.< infix(_:_:)() & 1) != 0)
    {
      v77 = static Duration.zero.getter();
      v180 = MEMORY[0x23B7C7B64](v77);
      v76 = v78;
    }
    else
    {
      v180 = v74;
    }
    v119 = v184;
    v118 = v185;
    v121 = v182;
    v120 = v183;
    v122 = *(_QWORD *)(v70 + v189[8]);
    LODWORD(v181) = v73;
    v192 = v76;
    if (v122 > 1)
    {
      static Duration.UnitsFormatStyle.UnitWidth.narrow.getter();
    }
    else if (v122 == 1)
    {
      if ((*(_BYTE *)(v70 + v189[12]) & 1) != 0)
        static Duration.UnitsFormatStyle.UnitWidth.condensedAbbreviated.getter();
      else
        static Duration.UnitsFormatStyle.UnitWidth.abbreviated.getter();
    }
    else
    {
      static Duration.UnitsFormatStyle.UnitWidth.wide.getter();
    }
    static Duration.UnitsFormatStyle.UnitWidth.condensedAbbreviated.getter();
    v138 = static Duration.UnitsFormatStyle.UnitWidth.== infix(_:_:)();
    v139 = *(void (**)(char *, char *))(v119 + 8);
    v139(v120, v118);
    v139(v121, v118);
    if ((v138 & 1) != 0)
    {
      v140 = v174;
      v189 = (int *)&v174[*((int *)v179 + 12)];
      v141 = v189;
      v185 = &v174[*((int *)v179 + 16)];
      v142 = v185;
      (*(void (**)(char *, uint64_t, char *))(v68 + 16))(v174, v188, v186);
      v143 = v190;
      v144 = *(void (**)(int *, uint64_t, uint64_t))(v191 + 16);
      v144(v141, v62, v190);
      v144((int *)v142, v64, v143);
      v145 = v175;
      v146 = (uint64_t)v176;
      v147 = &v176[*(int *)(v175 + 76)];
      v148 = *MEMORY[0x24BDCBF68];
      v149 = type metadata accessor for AttributeScopes.FoundationAttributes.MeasurementAttribute.Component();
      v150 = *(_QWORD *)(v149 - 8);
      v151 = *(void (**)(char *, uint64_t, uint64_t))(v150 + 104);
      v151(v147, v148, v149);
      v152 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v150 + 56);
      v152(v147, 0, 1, v149);
      v153 = v146 + *(int *)(v145 + 80);
      v151((char *)v153, *MEMORY[0x24BDCBF60], v149);
      v152((char *)v153, 0, 1, v149);
      v177(v146, v140, v186);
      v154 = *(void (**)(char *, uint64_t))(v191 + 8);
      v154(v185, v143);
      v154((char *)v189, v143);
      v193[0] = v180;
      v193[1] = v192;
      lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.Attributed and conformance Duration.UnitsFormatStyle.Attributed, (uint64_t (*)(uint64_t))MEMORY[0x24BDD0960], MEMORY[0x24BDD0958]);
      v155 = v187;
      dispatch thunk of FormatStyle.format(_:)();
      outlined destroy of TypesettingConfiguration(v146, (uint64_t (*)(_QWORD))type metadata accessor for WhitespaceRemovingFormatStyle<Duration.UnitsFormatStyle.Attributed, AttributeScopes.FoundationAttributes.MeasurementAttribute>);
      if ((v181 & 1) == 0)
        return outlined destroy of (style: Duration.UnitsFormatStyle.Attributed, largestField: Date.ComponentsFormatStyle.Field, smallestField: Date.ComponentsFormatStyle.Field)(v188);
    }
    else
    {
      v155 = v187;
      Duration.UnitsFormatStyle.Attributed.format(_:)();
      if ((v181 & 1) == 0)
        return outlined destroy of (style: Duration.UnitsFormatStyle.Attributed, largestField: Date.ComponentsFormatStyle.Field, smallestField: Date.ComponentsFormatStyle.Field)(v188);
    }
    if ((v178 & 1) != 0)
    {
      v156 = "A negative time value (argument provides the value as localized by\n"
             "ICU, either in a form like \"1 day, 2 hours\", or \"1:23:45\")";
      v157 = v155;
      v158 = 3;
      v159 = 9603298;
      v160 = (void *)0xA300000000000000;
    }
    else
    {
      v156 = "A positive time value (argument provides the value as localized by\n"
             "ICU, either in a form like \"1 day, 2 hours\", or \"1:23:45\")";
      v157 = v155;
      v158 = 1;
      v159 = 43;
      v160 = (void *)0xE100000000000000;
    }
    SystemFormatStyle.DateOffset.addNegativeSign(to:)(v157, v158, v159, v160, (uint64_t)v156);
    return outlined destroy of (style: Duration.UnitsFormatStyle.Attributed, largestField: Date.ComponentsFormatStyle.Field, smallestField: Date.ComponentsFormatStyle.Field)(v188);
  }
  v162 = v27;
  v163 = v36;
  outlined init with copy of TypesettingLanguage(v2, (uint64_t)v38, (uint64_t (*)(_QWORD))type metadata accessor for SystemFormatStyle.DateOffset);
  v38[v189[11]] = 0;
  SystemFormatStyle.DateOffset.timeStyle(for:)(v192, (uint64_t)v41);
  outlined destroy of TypesettingConfiguration((uint64_t)v38, (uint64_t (*)(_QWORD))type metadata accessor for SystemFormatStyle.DateOffset);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v44 + 48))(v41, 1, v43) == 1)
  {
    outlined destroy of (style: Duration.TimeFormatStyle.Attributed, smallestField: Date.ComponentsFormatStyle.Field)?((uint64_t)v41, &lazy cache variable for type metadata for (style: Duration.TimeFormatStyle.Attributed, smallestField: Date.ComponentsFormatStyle.Field)?, (uint64_t (*)(uint64_t))type metadata accessor for (style: Duration.TimeFormatStyle.Attributed, smallestField: Date.ComponentsFormatStyle.Field));
    v36 = v163;
    v27 = v162;
    goto LABEL_4;
  }
  v79 = *(int *)(v43 + 48);
  v80 = (uint64_t)v177;
  v81 = (uint64_t)v177 + v79;
  v82 = &v41[v79];
  v83 = type metadata accessor for Duration.TimeFormatStyle.Attributed();
  (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v83 - 8) + 32))(v80, v41, v83);
  (*(void (**)(uint64_t, char *, uint64_t))(v191 + 32))(v81, v82, v190);
  v84 = SystemFormatStyle.DateOffset.needsSign(for:smallestFieldShown:)(v192, v81);
  v85 = static Date.< infix(_:_:)();
  Date.timeIntervalSince(_:)();
  static Duration.seconds(_:)();
  static Duration.zero.getter();
  if ((static Duration.< infix(_:_:)() & 1) != 0)
  {
    v86 = static Duration.zero.getter();
    MEMORY[0x23B7C7B64](v86);
  }
  v87 = v187;
  Duration.TimeFormatStyle.Attributed.format(_:)();
  v88 = v189;
  if ((v84 & 1) != 0)
  {
    if ((v85 & 1) != 0)
    {
      v89 = "A negative time value (argument provides the value as localized by\n"
            "ICU, either in a form like \"1 day, 2 hours\", or \"1:23:45\")";
      v90 = v87;
      v91 = 3;
      v92 = 9603298;
      v93 = (void *)0xA300000000000000;
    }
    else
    {
      v89 = "A positive time value (argument provides the value as localized by\n"
            "ICU, either in a form like \"1 day, 2 hours\", or \"1:23:45\")";
      v90 = v87;
      v91 = 1;
      v92 = 43;
      v93 = (void *)0xE100000000000000;
    }
    SystemFormatStyle.DateOffset.addNegativeSign(to:)(v90, v91, v92, v93, (uint64_t)v89);
  }
  v135 = v88[11];
  if (*(unsigned __int8 *)(v46 + v135) >= 2u)
  {
    v136 = *(_QWORD *)(v46 + v88[5]);
    v137 = (uint64_t)v163;
    static Date.ComponentsFormatStyle.Field.second.getter();
    LOBYTE(v136) = specialized Set.contains(_:)(v137, v136);
    (*(void (**)(uint64_t, uint64_t))(v191 + 8))(v137, v190);
    if ((v136 & 1) != 0)
    {
      LOBYTE(v193[0]) = *(_BYTE *)(v46 + v135);
      AttributedString.redact(for:locale:)(v193, v46 + v88[9]);
    }
  }
  return outlined destroy of TypesettingConfiguration(v80, (uint64_t (*)(_QWORD))type metadata accessor for (style: Duration.TimeFormatStyle.Attributed, smallestField: Date.ComponentsFormatStyle.Field));
}

uint64_t type metadata accessor for WhitespaceRemovingFormatStyle<Duration.UnitsFormatStyle.Attributed, AttributeScopes.FoundationAttributes.MeasurementAttribute>()
{
  uint64_t result;
  uint64_t (*v1)(uint64_t);
  uint64_t (*v2)(uint64_t);
  uint64_t (*v3)(uint64_t);

  result = lazy cache variable for type metadata for WhitespaceRemovingFormatStyle<Duration.UnitsFormatStyle.Attributed, AttributeScopes.FoundationAttributes.MeasurementAttribute>;
  if (!lazy cache variable for type metadata for WhitespaceRemovingFormatStyle<Duration.UnitsFormatStyle.Attributed, AttributeScopes.FoundationAttributes.MeasurementAttribute>)
  {
    type metadata accessor for Duration.UnitsFormatStyle.Attributed();
    v1 = (uint64_t (*)(uint64_t))MEMORY[0x24BDD0960];
    type metadata accessor for AttributeScopes.FoundationAttributes.MeasurementAttribute();
    v2 = (uint64_t (*)(uint64_t))MEMORY[0x24BDCBFB0];
    lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.Attributed and conformance Duration.UnitsFormatStyle.Attributed, v1, MEMORY[0x24BDD0958]);
    lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.MeasurementAttribute and conformance AttributeScopes.FoundationAttributes.MeasurementAttribute, v2, MEMORY[0x24BDCBFA0]);
    lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.MeasurementAttribute and conformance AttributeScopes.FoundationAttributes.MeasurementAttribute, v2, MEMORY[0x24BDCBFA8]);
    v3 = (uint64_t (*)(uint64_t))MEMORY[0x24BDCBF70];
    lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.MeasurementAttribute.Component and conformance AttributeScopes.FoundationAttributes.MeasurementAttribute.Component, (uint64_t (*)(uint64_t))MEMORY[0x24BDCBF70], MEMORY[0x24BDCBF90]);
    lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.MeasurementAttribute.Component and conformance AttributeScopes.FoundationAttributes.MeasurementAttribute.Component, v3, MEMORY[0x24BDCBF80]);
    type metadata accessor for WhitespaceRemovingFormatStyle();
  }
  return result;
}

void type metadata accessor for (style: Date.ComponentsFormatStyle, largestField: Date.ComponentsFormatStyle.Field, smallestField: Date.ComponentsFormatStyle.Field)?(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t, uint64_t, uint64_t))
{
  unint64_t v6;
  uint64_t v7;

  if (!*a2)
  {
    a5(255, a3, a4);
    v6 = type metadata accessor for Optional();
    if (!v7)
      atomic_store(v6, a2);
  }
}

void type metadata accessor for (style: Date.ComponentsFormatStyle, largestField: Date.ComponentsFormatStyle.Field, smallestField: Date.ComponentsFormatStyle.Field)(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  unint64_t TupleTypeMetadata3;
  uint64_t v5;

  if (!*a2)
  {
    a3(255);
    type metadata accessor for Date.ComponentsFormatStyle.Field();
    TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
    if (!v5)
      atomic_store(TupleTypeMetadata3, a2);
  }
}

void type metadata accessor for (style: Duration.TimeFormatStyle.Attributed, smallestField: Date.ComponentsFormatStyle.Field)()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!lazy cache variable for type metadata for (style: Duration.TimeFormatStyle.Attributed, smallestField: Date.ComponentsFormatStyle.Field))
  {
    type metadata accessor for Duration.TimeFormatStyle.Attributed();
    type metadata accessor for Date.ComponentsFormatStyle.Field();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (style: Duration.TimeFormatStyle.Attributed, smallestField: Date.ComponentsFormatStyle.Field));
  }
}

BOOL SystemFormatStyle.DateOffset.canUseTimeStyle.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char v9;
  uint64_t (*v10)(_QWORD);
  char v11;
  _BOOL8 v12;
  uint64_t v14;

  v1 = v0;
  v2 = type metadata accessor for SystemFormatStyle.DateOffset();
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)&v14 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v14 - v6;
  v9 = *(_BYTE *)(v1 + *(int *)(v8 + 52));
  outlined init with copy of TypesettingLanguage(v1, (uint64_t)&v14 - v6, v10);
  if ((v9 & 1) != 0)
  {
    outlined destroy of TypesettingConfiguration((uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for SystemFormatStyle.DateOffset);
    outlined init with copy of TypesettingLanguage(v1, (uint64_t)v4, (uint64_t (*)(_QWORD))type metadata accessor for SystemFormatStyle.DateOffset);
  }
  else
  {
    v11 = v7[*(int *)(v2 + 48)];
    outlined destroy of TypesettingConfiguration((uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for SystemFormatStyle.DateOffset);
    outlined init with copy of TypesettingLanguage(v1, (uint64_t)v4, (uint64_t (*)(_QWORD))type metadata accessor for SystemFormatStyle.DateOffset);
    if ((v11 & 1) == 0)
    {
      v12 = 1;
      goto LABEL_6;
    }
  }
  v12 = v4[*(int *)(v2 + 44)] < 2u;
LABEL_6:
  outlined destroy of TypesettingConfiguration((uint64_t)v4, (uint64_t (*)(_QWORD))type metadata accessor for SystemFormatStyle.DateOffset);
  return v12;
}

uint64_t SystemFormatStyle.DateOffset.updateFrequency(_:)@<X0>(char *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  char v4;
  uint64_t result;

  v4 = *a1;
  outlined init with copy of TypesettingLanguage(v2, a2, (uint64_t (*)(_QWORD))type metadata accessor for SystemFormatStyle.DateOffset);
  result = type metadata accessor for SystemFormatStyle.DateOffset();
  *(_BYTE *)(a2 + *(int *)(result + 44)) = v4;
  return result;
}

uint64_t SystemFormatStyle.DateOffset.timeStyle(for:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char v30;
  char *v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  char v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  char *v59;
  char *v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  void (*v67)(char *, uint64_t);
  uint64_t v68;
  char *v69;
  char *v70;
  char *v71;
  char *v72;
  char *v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;

  v80 = a1;
  v91 = a2;
  v3 = type metadata accessor for NumberFormatStyleConfiguration.Grouping();
  v88 = *(_QWORD *)(v3 - 8);
  v89 = v3;
  MEMORY[0x24BDAC7A8](v3);
  v90 = (char *)&v68 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v81 = type metadata accessor for Date();
  v84 = *(_QWORD *)(v81 - 8);
  MEMORY[0x24BDAC7A8](v81);
  v83 = (char *)&v68 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v92 = type metadata accessor for SystemFormatStyle.DateOffset();
  MEMORY[0x24BDAC7A8](v92);
  v82 = (uint64_t)&v68 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Date.ComponentsFormatStyle.Field();
  v78 = *(_QWORD *)(v7 - 8);
  v79 = v7;
  MEMORY[0x24BDAC7A8](v7);
  v87 = (char *)&v68 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Locale();
  MEMORY[0x24BDAC7A8](v9);
  v85 = (char *)&v68 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v86 = type metadata accessor for FloatingPointRoundingRule();
  v11 = *(_QWORD *)(v86 - 8);
  MEMORY[0x24BDAC7A8](v86);
  v13 = (char *)&v68 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for Duration.TimeFormatStyle.Pattern();
  MEMORY[0x24BDAC7A8](v14);
  v16 = (char *)&v68 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for Duration.TimeFormatStyle();
  v18 = *(_QWORD *)(v17 - 8);
  MEMORY[0x24BDAC7A8](v17);
  v20 = (char *)&v68 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v21);
  v23 = (char *)&v68 - v22;
  MEMORY[0x24BDAC7A8](v24);
  v26 = (char *)&v68 - v25;
  MEMORY[0x24BDAC7A8](v27);
  v29 = (char *)&v68 - v28;
  SystemFormatStyle.DateOffset.unitsConfigurationAllowsTimeStyle.getter();
  if ((v30 & 1) == 0)
  {
    type metadata accessor for (style: Duration.TimeFormatStyle.Attributed, smallestField: Date.ComponentsFormatStyle.Field)();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v52 - 8) + 56))(v91, 1, 1, v52);
  }
  v71 = v26;
  v72 = v16;
  v73 = v13;
  v77 = v11;
  v69 = v29;
  v75 = v20;
  v70 = v23;
  v74 = v18;
  v31 = v90;
  v32 = *(unsigned __int8 *)(v2 + *(int *)(v92 + 44));
  v76 = v2;
  if (v32 < 2)
  {
    v33 = v2;
    v34 = *(_QWORD *)(v2 + *(int *)(v92 + 20));
    v35 = (uint64_t)v87;
    static Date.ComponentsFormatStyle.Style.spellOut.getter();
    LOBYTE(v34) = specialized Set.contains(_:)(v35, v34);
    (*(void (**)(uint64_t, uint64_t))(v78 + 8))(v35, v79);
    v36 = v33;
    v37 = v82;
    outlined init with copy of TypesettingLanguage(v36, v82, (uint64_t (*)(_QWORD))type metadata accessor for SystemFormatStyle.DateOffset);
    v39 = v83;
    v38 = v84;
    v40 = v81;
    (*(void (**)(char *, uint64_t, uint64_t))(v84 + 16))(v83, v80, v81);
    if ((v34 & 1) != 0)
    {
      Date.timeIntervalSince(_:)();
      static Duration.seconds(_:)();
      static Duration.zero.getter();
      v41 = static Duration.< infix(_:_:)();
      v42 = v91;
      v43 = v70;
      v44 = v69;
      if ((v41 & 1) != 0)
      {
        v45 = static Duration.zero.getter();
        MEMORY[0x23B7C7B64](v45);
      }
      v46 = static Duration.< infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v84 + 8))(v83, v40);
      outlined destroy of TypesettingConfiguration(v82, (uint64_t (*)(_QWORD))type metadata accessor for SystemFormatStyle.DateOffset);
      v47 = v77;
      if ((v46 & 1) == 0)
      {
        v48 = v73;
        v49 = v86;
        (*(void (**)(char *, _QWORD, uint64_t))(v77 + 104))(v73, *MEMORY[0x24BEE38B8], v86);
        static Duration.TimeFormatStyle.Pattern.hourMinuteSecond(padHourToLength:fractionalSecondsLength:roundFractionalSeconds:)();
        v50 = v77;
        v51 = v48;
LABEL_12:
        v60 = v71;
        v56 = v42;
        v59 = v43;
        v58 = v74;
        v57 = v90;
        goto LABEL_13;
      }
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v38 + 8))(v39, v40);
      outlined destroy of TypesettingConfiguration(v37, (uint64_t (*)(_QWORD))type metadata accessor for SystemFormatStyle.DateOffset);
      v42 = v91;
      v43 = v70;
      v44 = v69;
      v47 = v77;
    }
    v61 = v73;
    v49 = v86;
    (*(void (**)(char *, _QWORD, uint64_t))(v47 + 104))(v73, *MEMORY[0x24BEE38B8], v86);
    static Duration.TimeFormatStyle.Pattern.minuteSecond(padMinuteToLength:fractionalSecondsLength:roundFractionalSeconds:)();
    v50 = v47;
    v51 = v61;
    goto LABEL_12;
  }
  v54 = v77;
  v55 = v73;
  v49 = v86;
  (*(void (**)(char *, _QWORD, uint64_t))(v77 + 104))(v73, *MEMORY[0x24BEE38B8], v86);
  static Duration.TimeFormatStyle.Pattern.hourMinute(padHourToLength:roundSeconds:)();
  v51 = v55;
  v56 = v91;
  v57 = v31;
  v50 = v54;
  v58 = v74;
  v59 = v70;
  v44 = v69;
  v60 = v71;
LABEL_13:
  (*(void (**)(char *, uint64_t))(v50 + 8))(v51, v49);
  static Locale.autoupdatingCurrent.getter();
  Duration.TimeFormatStyle.init(pattern:locale:)();
  (*(void (**)(char *, char *, uint64_t))(v58 + 32))(v44, v60, v17);
  type metadata accessor for (style: Duration.TimeFormatStyle.Attributed, smallestField: Date.ComponentsFormatStyle.Field)();
  v63 = v62;
  v64 = v56;
  v91 = v56 + *(int *)(v62 + 48);
  v65 = v75;
  v66 = Duration.TimeFormatStyle.locale(_:)();
  MEMORY[0x23B7C4810](v66);
  Duration.TimeFormatStyle.grouping(_:)();
  (*(void (**)(char *, uint64_t))(v88 + 8))(v57, v89);
  v67 = *(void (**)(char *, uint64_t))(v58 + 8);
  v67(v65, v17);
  Duration.TimeFormatStyle.attributed.getter();
  v67(v59, v17);
  static Date.ComponentsFormatStyle.Field.second.getter();
  v67(v44, v17);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v63 - 8) + 56))(v64, 0, 1, v63);
}

uint64_t SystemFormatStyle.DateOffset.needsSign(for:smallestFieldShown:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t);
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char v18;
  void (*v19)(char *, uint64_t);
  char v20;
  char v21;
  char v22;
  char v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  char v29;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v3 = v2;
  v31 = a2;
  v36 = a1;
  v4 = type metadata accessor for DateComponents();
  v34 = *(_QWORD *)(v4 - 8);
  v35 = v4;
  MEMORY[0x24BDAC7A8](v4);
  v33 = (char *)&v31 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = type metadata accessor for Calendar.Component();
  v6 = *(_QWORD *)(v32 - 8);
  MEMORY[0x24BDAC7A8](v32);
  v8 = (char *)&v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for NumberFormatStyleConfiguration.SignDisplayStrategy();
  v10 = (uint64_t (*)(uint64_t))MEMORY[0x24BDCD5F8];
  v11 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v13 = (char *)&v31 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v14);
  v16 = (char *)&v31 - v15;
  v17 = type metadata accessor for SystemFormatStyle.DateOffset();
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v16, v3 + *(int *)(v17 + 28), v9);
  static NumberFormatStyleConfiguration.SignDisplayStrategy.never.getter();
  lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.SignDisplayStrategy and conformance NumberFormatStyleConfiguration.SignDisplayStrategy, v10, MEMORY[0x24BDCD618]);
  v18 = dispatch thunk of static Equatable.== infix(_:_:)();
  v19 = *(void (**)(char *, uint64_t))(v11 + 8);
  v19(v13, v9);
  if ((v18 & 1) != 0)
  {
    v19(v16, v9);
    v20 = 0;
  }
  else
  {
    static NumberFormatStyleConfiguration.SignDisplayStrategy.automatic.getter();
    v21 = dispatch thunk of static Equatable.== infix(_:_:)();
    v19(v13, v9);
    if ((v21 & 1) != 0)
    {
      v19(v16, v9);
      v20 = static Date.< infix(_:_:)();
    }
    else
    {
      static NumberFormatStyleConfiguration.SignDisplayStrategy.always(includingZero:)();
      v22 = dispatch thunk of static Equatable.== infix(_:_:)();
      v19(v13, v9);
      if ((v22 & 1) != 0)
      {
        v19(v16, v9);
        v20 = 1;
      }
      else
      {
        static NumberFormatStyleConfiguration.SignDisplayStrategy.always(includingZero:)();
        v23 = dispatch thunk of static Equatable.== infix(_:_:)();
        v19(v13, v9);
        v19(v16, v9);
        v20 = 0;
        if ((v23 & 1) != 0)
        {
          SystemFormatStyle.DateOffset.component(for:)(v31, (uint64_t)v8);
          type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for _ContiguousArrayStorage<Calendar.Component>, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF290], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
          v24 = (*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
          v25 = swift_allocObject();
          *(_OWORD *)(v25 + 16) = xmmword_23527E860;
          v26 = v32;
          (*(void (**)(unint64_t, char *, uint64_t))(v6 + 16))(v25 + v24, v8, v32);
          specialized Set.init(_nonEmptyArrayLiteral:)(v25);
          swift_setDeallocating();
          v20 = 1;
          swift_arrayDestroy();
          swift_deallocClassInstance();
          v27 = v33;
          Calendar.dateComponents(_:from:to:)();
          swift_bridgeObjectRelease();
          v28 = DateComponents.value(for:)();
          LOBYTE(v25) = v29;
          (*(void (**)(char *, uint64_t))(v34 + 8))(v27, v35);
          (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v26);
          if ((v25 & 1) == 0)
            v20 = v28 != 0;
        }
      }
    }
  }
  return v20 & 1;
}

uint64_t SystemFormatStyle.DateOffset.addNegativeSign(to:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)(uint64_t);
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  Swift::String v23;
  uint64_t (*v24)(uint64_t);
  uint64_t v25;
  uint64_t v26;
  Swift::String v27;
  uint64_t v28;
  id v29;
  char *v30;
  uint64_t KeyPath;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;

  v47 = a5;
  v38 = a2;
  v39 = a1;
  v7 = type metadata accessor for Locale.Language();
  v49 = *(_QWORD *)(v7 - 8);
  v50 = v7;
  MEMORY[0x24BDAC7A8](v7);
  v48 = (char *)&v38 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for LocalizedStringResource.BundleDescription();
  v45 = *(_QWORD *)(v9 - 8);
  v46 = v9;
  MEMORY[0x24BDAC7A8](v9);
  v43 = (char *)&v38 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for Locale();
  v40 = *(_QWORD *)(v11 - 8);
  v41 = v11;
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)&v38 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for String.LocalizationValue();
  MEMORY[0x24BDAC7A8](v14);
  v15 = type metadata accessor for AttributedString.InterpolationOptions();
  v16 = (uint64_t (*)(uint64_t))MEMORY[0x24BDCC398];
  v17 = *(_QWORD *)(v15 - 8);
  MEMORY[0x24BDAC7A8](v15);
  v19 = (char *)&v38 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = type metadata accessor for String.LocalizationValue.StringInterpolation();
  MEMORY[0x24BDAC7A8](v20);
  v21 = type metadata accessor for LocalizedStringResource();
  MEMORY[0x24BDAC7A8](v21);
  v42 = (char *)&v38 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  String.LocalizationValue.StringInterpolation.init(literalCapacity:interpolationCount:)();
  v23._countAndFlagsBits = a3;
  v23._object = a4;
  String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v23);
  v51 = MEMORY[0x24BEE4AF8];
  lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type AttributedString.InterpolationOptions and conformance AttributedString.InterpolationOptions, v16, MEMORY[0x24BDCC3A8]);
  type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for [AttributedString.InterpolationOptions], v16, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1250]);
  v24 = v16;
  v25 = v39;
  lazy protocol witness table accessor for type [AttributedString.InterpolationOptions] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [AttributedString.InterpolationOptions] and conformance [A], &lazy cache variable for type metadata for [AttributedString.InterpolationOptions], v24, MEMORY[0x24BEE12C8]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  String.LocalizationValue.StringInterpolation.appendInterpolation(_:options:)();
  v26 = type metadata accessor for AttributedString();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 8))(v25, v26);
  (*(void (**)(char *, uint64_t))(v17 + 8))(v19, v15);
  v27._countAndFlagsBits = 0;
  v27._object = (void *)0xE000000000000000;
  String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v27);
  String.LocalizationValue.init(stringInterpolation:)();
  v28 = type metadata accessor for SystemFormatStyle.DateOffset();
  (*(void (**)(char *, uint64_t, uint64_t))(v40 + 16))(v13, v44 + *(int *)(v28 + 36), v41);
  if (one-time initialization token for systemFormatStyle != -1)
    swift_once();
  v29 = objc_msgSend((id)static NSBundle.systemFormatStyle, sel_bundleURL, v38);
  v30 = v43;
  static URL._unconditionallyBridgeFromObjectiveC(_:)();

  (*(void (**)(char *, _QWORD, uint64_t))(v45 + 104))(v30, *MEMORY[0x24BDCD330], v46);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)();
  swift_getKeyPath();
  type metadata accessor for AttributeScopes.AccessibilityAttributes();
  lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type AttributeScopes.AccessibilityAttributes and conformance AttributeScopes.AccessibilityAttributes, (uint64_t (*)(uint64_t))MEMORY[0x24BDB3CA8], MEMORY[0x24BDB3CA0]);
  AttributedString.init<A>(localized:including:)();
  KeyPath = swift_getKeyPath();
  MEMORY[0x24BDAC7A8](KeyPath);
  *(&v38 - 2) = v32;
  swift_getKeyPath();
  v33 = v48;
  Locale.language.getter();
  v34 = Locale.Language.maximalIdentifier.getter();
  v36 = v35;
  (*(void (**)(char *, uint64_t))(v49 + 8))(v33, v50);
  v51 = v34;
  v52 = v36;
  return AttributedString.subscript.setter();
}

uint64_t SystemFormatStyle.DateOffset.unitsStyle(for:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int64_t v50;
  unint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t result;
  uint64_t v56;
  BOOL v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  char *v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t (*v69)(uint64_t);
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unsigned int v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  char *v88;
  char *v89;
  uint64_t v90;
  char v91;
  char v92;
  uint64_t v93;
  char *v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  void (*v99)(char *, uint64_t, uint64_t);
  char *v100;
  char *v101;
  char v102;
  uint64_t v103;
  void (*v104)(uint64_t, uint64_t);
  char v105;
  char v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  void (*v110)(char *, uint64_t, uint64_t);
  char *v111;
  unint64_t v112;
  unint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  char *v117;
  uint64_t v118;
  char *v119;
  char *v120;
  uint64_t v121;
  void (*v122)(char *, uint64_t);
  uint64_t v123;
  void (*v124)(char *, char *, uint64_t);
  char *v125;
  char *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  char *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  void (*v137)(unint64_t);
  char *v138;
  uint64_t v139;
  uint64_t v140;
  char *v141;
  uint64_t v142;
  uint64_t v143;
  char *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  char *v149;
  char *v150;
  char *v151;
  char *v152;
  char *v153;
  uint64_t v154;
  uint64_t v155;
  char *v156;
  char *v157;
  char *v158;
  uint64_t v159;
  unint64_t v160;
  char *v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  char *v167;
  char *v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  char *v172;
  char *v173;
  char *v174;
  uint64_t v175;
  char *v176;
  char *v177;
  uint64_t v178;
  char *v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  char *v184;
  uint64_t v185;
  uint64_t v186;
  char *v187;
  unint64_t v188;
  uint64_t v189;

  v181 = a1;
  v169 = a2;
  v3 = type metadata accessor for FloatingPointRoundingRule();
  v159 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v158 = (char *)&v137 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for Duration.UnitsFormatStyle.FractionalPartDisplayStrategy();
  MEMORY[0x24BDAC7A8](v5);
  v157 = (char *)&v137 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Duration.UnitsFormatStyle.ZeroValueUnitsDisplayStrategy();
  MEMORY[0x24BDAC7A8](v7);
  v156 = (char *)&v137 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
  type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for Duration.UnitsFormatStyle.Unit?, (uint64_t (*)(uint64_t))MEMORY[0x24BDD0A50], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v10);
  v173 = (char *)&v137 - v11;
  v12 = type metadata accessor for Duration.UnitsFormatStyle.Unit();
  v182 = *(_QWORD *)(v12 - 8);
  v183 = v12;
  MEMORY[0x24BDAC7A8](v12);
  v177 = (char *)&v137 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v14);
  v172 = (char *)&v137 - v15;
  v16 = type metadata accessor for Duration.UnitsFormatStyle.UnitWidth();
  MEMORY[0x24BDAC7A8](v16);
  v149 = (char *)&v137 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for Date.ComponentsFormatStyle.Field?, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE6C8], v9);
  MEMORY[0x24BDAC7A8](v18);
  v20 = (char *)&v137 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v21);
  v150 = (char *)&v137 - v22;
  MEMORY[0x24BDAC7A8](v23);
  v179 = (char *)&v137 - v24;
  v155 = type metadata accessor for Duration.UnitsFormatStyle();
  v154 = *(_QWORD *)(v155 - 8);
  MEMORY[0x24BDAC7A8](v155);
  v152 = (char *)&v137 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v26);
  v151 = (char *)&v137 - v27;
  MEMORY[0x24BDAC7A8](v28);
  v153 = (char *)&v137 - v29;
  v30 = type metadata accessor for Duration.UnitsFormatStyle.Attributed();
  v31 = *(_QWORD *)(v30 - 8);
  MEMORY[0x24BDAC7A8](v30);
  v33 = (char *)&v137 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  v142 = type metadata accessor for Calendar.Component();
  v143 = *(_QWORD *)(v142 - 8);
  MEMORY[0x24BDAC7A8](v142);
  v141 = (char *)&v137 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  v140 = type metadata accessor for DateComponents();
  v139 = *(_QWORD *)(v140 - 8);
  MEMORY[0x24BDAC7A8](v140);
  v138 = (char *)&v137 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  v162 = type metadata accessor for Date();
  v178 = *(_QWORD *)(v162 - 8);
  MEMORY[0x24BDAC7A8](v162);
  v174 = (char *)&v137 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  v37 = type metadata accessor for Date.ComponentsFormatStyle.Field();
  v38 = *(_QWORD *)(v37 - 8);
  MEMORY[0x24BDAC7A8](v37);
  v176 = (char *)&v137 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v40);
  v184 = (char *)&v137 - v41;
  MEMORY[0x24BDAC7A8](v42);
  v44 = (char *)&v137 - v43;
  v45 = type metadata accessor for SystemFormatStyle.DateOffset();
  MEMORY[0x24BDAC7A8](v45);
  v164 = (uint64_t)&v137 - ((v46 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v47);
  v163 = (uint64_t)&v137 - v48;
  v52 = SystemFormatStyle.DateOffset.applicableFields(for:)(v181);
  v53 = *(int *)(v45 + 32);
  v54 = *(_QWORD *)(v2 + v53);
  v170 = v45;
  result = *(_QWORD *)(v2 + *(int *)(v45 + 24));
  if (v54 >= 3)
  {
    v56 = result + 2;
    if (__OFADD__(result, 2))
      goto LABEL_58;
    v57 = __OFSUB__(v56, v54);
    v58 = v56 - v54;
    if (v57)
    {
LABEL_59:
      __break(1u);
LABEL_60:
      __break(1u);
      goto LABEL_61;
    }
    if (v58 <= 1)
      result = 1;
    else
      result = v58;
  }
  v161 = v44;
  v145 = v53;
  v146 = v3;
  v171 = v2;
  v167 = v33;
  v147 = v31;
  v148 = v30;
  v144 = v20;
  v59 = specialized Collection.prefix(_:)(result, (uint64_t)v52, v49, v50, v51);
  v61 = v60;
  v63 = v62;
  v65 = v64;
  type metadata accessor for [(_:)](0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Date.ComponentsFormatStyle.Field>, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE6C8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
  v66 = *(_QWORD *)(v38 + 72);
  v67 = swift_allocObject();
  *(_OWORD *)(v67 + 16) = xmmword_235283260;
  static Date.ComponentsFormatStyle.Style.spellOut.getter();
  v180 = v66;
  static Date.ComponentsFormatStyle.Field.minute.getter();
  v68 = v59;
  static Date.ComponentsFormatStyle.Field.second.getter();
  v188 = v65;
  v189 = v67;
  v185 = v59;
  v186 = v61;
  v165 = v61;
  v168 = v63;
  v187 = v63;
  v160 = v65;
  v69 = (uint64_t (*)(uint64_t))MEMORY[0x24BDCE6C8];
  type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for [Date.ComponentsFormatStyle.Field], (uint64_t (*)(uint64_t))MEMORY[0x24BDCE6C8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1250]);
  type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for ArraySlice<Date.ComponentsFormatStyle.Field>, v69, MEMORY[0x24BEE2150]);
  lazy protocol witness table accessor for type [AttributedString.InterpolationOptions] and conformance [A](&lazy protocol witness table cache variable for type [Date.ComponentsFormatStyle.Field] and conformance [A], &lazy cache variable for type metadata for [Date.ComponentsFormatStyle.Field], v69, MEMORY[0x24BEE12E0]);
  lazy protocol witness table accessor for type ArraySlice<Date.ComponentsFormatStyle.Field> and conformance ArraySlice<A>();
  v70 = lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type Date.ComponentsFormatStyle.Field and conformance Date.ComponentsFormatStyle.Field, v69, MEMORY[0x24BDCE6E8]);
  LOBYTE(v59) = Collection<>.contains<A>(_:)();
  swift_bridgeObjectRelease();
  if ((v59 & 1) == 0)
  {
    type metadata accessor for (style: Date.ComponentsFormatStyle, largestField: Date.ComponentsFormatStyle.Field, smallestField: Date.ComponentsFormatStyle.Field)(0, &lazy cache variable for type metadata for (style: Duration.UnitsFormatStyle.Attributed, largestField: Date.ComponentsFormatStyle.Field, smallestField: Date.ComponentsFormatStyle.Field), (void (*)(uint64_t))MEMORY[0x24BDD0960]);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v81 - 8) + 56))(v169, 1, 1, v81);
    return swift_unknownObjectRelease();
  }
  v175 = v70;
  v166 = v68;
  v72 = v170;
  v71 = v171;
  v73 = *(unsigned __int8 *)(v171 + *(int *)(v170 + 44));
  v74 = v163;
  outlined init with copy of TypesettingLanguage(v171, v163, (uint64_t (*)(_QWORD))type metadata accessor for SystemFormatStyle.DateOffset);
  if (v73 < 2)
  {
    outlined destroy of TypesettingConfiguration(v74, (uint64_t (*)(_QWORD))type metadata accessor for SystemFormatStyle.DateOffset);
    v75 = v164;
    outlined init with copy of TypesettingLanguage(v71, v164, (uint64_t (*)(_QWORD))type metadata accessor for SystemFormatStyle.DateOffset);
    v76 = v178;
    v77 = v174;
    v78 = v162;
    (*(void (**)(char *, uint64_t, uint64_t))(v178 + 16))(v174, v181, v162);
    v79 = v179;
    v80 = (uint64_t)v161;
LABEL_15:
    (*(void (**)(char *, uint64_t))(v76 + 8))(v77, v78);
    outlined destroy of TypesettingConfiguration(v75, (uint64_t (*)(_QWORD))type metadata accessor for SystemFormatStyle.DateOffset);
    goto LABEL_16;
  }
  v82 = *(_QWORD *)(v74 + *(int *)(v72 + 20));
  v80 = (uint64_t)v161;
  static Date.ComponentsFormatStyle.Field.second.getter();
  LOBYTE(v82) = specialized Set.contains(_:)(v80, v82);
  (*(void (**)(uint64_t, uint64_t))(v38 + 8))(v80, v37);
  outlined destroy of TypesettingConfiguration(v74, (uint64_t (*)(_QWORD))type metadata accessor for SystemFormatStyle.DateOffset);
  v75 = v164;
  outlined init with copy of TypesettingLanguage(v71, v164, (uint64_t (*)(_QWORD))type metadata accessor for SystemFormatStyle.DateOffset);
  v76 = v178;
  v77 = v174;
  v78 = v162;
  (*(void (**)(char *, uint64_t, uint64_t))(v178 + 16))(v174, v181, v162);
  v79 = v179;
  if ((v82 & 1) == 0)
    goto LABEL_15;
  v181 = v75 + *(int *)(v72 + 40);
  type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for _ContiguousArrayStorage<Calendar.Component>, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF290], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
  v83 = v143;
  v84 = (*(unsigned __int8 *)(v143 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v143 + 80);
  v85 = swift_allocObject();
  *(_OWORD *)(v85 + 16) = xmmword_23527E860;
  LODWORD(v163) = *MEMORY[0x24BDCF258];
  v137 = *(void (**)(unint64_t))(v83 + 104);
  v86 = v85 + v84;
  v87 = v142;
  v137(v86);
  specialized Set.init(_nonEmptyArrayLiteral:)(v85);
  swift_setDeallocating();
  v79 = v179;
  swift_arrayDestroy();
  swift_deallocClassInstance();
  v88 = v138;
  Calendar.dateComponents(_:from:to:)();
  swift_bridgeObjectRelease();
  v89 = v141;
  ((void (*)(char *, _QWORD, uint64_t))v137)(v141, v163, v87);
  v90 = DateComponents.value(for:)();
  v92 = v91;
  (*(void (**)(char *, uint64_t))(v143 + 8))(v89, v87);
  (*(void (**)(char *, uint64_t))(v139 + 8))(v88, v140);
  (*(void (**)(char *, uint64_t))(v178 + 8))(v174, v78);
  outlined destroy of TypesettingConfiguration(v164, (uint64_t (*)(_QWORD))type metadata accessor for SystemFormatStyle.DateOffset);
  if ((v92 & 1) == 0 && !v90)
  {
    swift_unknownObjectRelease();
    type metadata accessor for (style: Date.ComponentsFormatStyle, largestField: Date.ComponentsFormatStyle.Field, smallestField: Date.ComponentsFormatStyle.Field)(0, &lazy cache variable for type metadata for (style: Duration.UnitsFormatStyle.Attributed, largestField: Date.ComponentsFormatStyle.Field, smallestField: Date.ComponentsFormatStyle.Field), (void (*)(uint64_t))MEMORY[0x24BDD0960]);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v93 - 8) + 56))(v169, 1, 1, v93);
  }
LABEL_16:
  v94 = (char *)(v160 >> 1);
  v95 = v168;
  if (v168 != (char *)(v160 >> 1))
  {
    result = swift_unknownObjectRetain();
    v181 = MEMORY[0x24BEE4AF8];
    v97 = v165 + (_QWORD)v95 * v180;
    v98 = (uint64_t)v173;
    v174 = v94;
    while (1)
    {
      if ((uint64_t)v95 >= (uint64_t)v94)
      {
        __break(1u);
LABEL_58:
        __break(1u);
        goto LABEL_59;
      }
      v99 = *(void (**)(char *, uint64_t, uint64_t))(v38 + 16);
      v99(v79, v97, v37);
      v178 = *(_QWORD *)(v38 + 56);
      ((void (*)(char *, _QWORD, uint64_t, uint64_t))v178)(v79, 0, 1, v37);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v38 + 48))(v79, 1, v37) == 1)
        goto LABEL_19;
      v100 = v184;
      (*(void (**)(char *, char *, uint64_t))(v38 + 32))(v184, v79, v37);
      v101 = v176;
      v99(v176, (uint64_t)v100, v37);
      static Date.ComponentsFormatStyle.Style.spellOut.getter();
      v102 = dispatch thunk of static Equatable.== infix(_:_:)();
      v103 = v38;
      v104 = *(void (**)(uint64_t, uint64_t))(v38 + 8);
      v104(v80, v37);
      if ((v102 & 1) != 0)
      {
        v104((uint64_t)v101, v37);
        static Duration.UnitsFormatStyle.Unit.hours.getter();
      }
      else
      {
        static Date.ComponentsFormatStyle.Field.minute.getter();
        v105 = dispatch thunk of static Equatable.== infix(_:_:)();
        v104(v80, v37);
        if ((v105 & 1) != 0)
        {
          v104((uint64_t)v101, v37);
          static Duration.UnitsFormatStyle.Unit.minutes.getter();
        }
        else
        {
          static Date.ComponentsFormatStyle.Field.second.getter();
          v106 = dispatch thunk of static Equatable.== infix(_:_:)();
          v104((uint64_t)v101, v37);
          v104(v80, v37);
          if ((v106 & 1) == 0)
          {
            v107 = 1;
            goto LABEL_36;
          }
          static Duration.UnitsFormatStyle.Unit.seconds.getter();
        }
      }
      v107 = 0;
LABEL_36:
      v109 = v182;
      v108 = v183;
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v182 + 56))(v98, v107, 1, v183);
      v104((uint64_t)v184, v37);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v109 + 48))(v98, 1, v108) == 1)
      {
        result = outlined destroy of (style: Duration.TimeFormatStyle.Attributed, smallestField: Date.ComponentsFormatStyle.Field)?(v98, &lazy cache variable for type metadata for Duration.UnitsFormatStyle.Unit?, (uint64_t (*)(uint64_t))MEMORY[0x24BDD0A50]);
        v38 = v103;
        v79 = v179;
        v94 = v174;
      }
      else
      {
        v110 = *(void (**)(char *, uint64_t, uint64_t))(v109 + 32);
        v111 = v172;
        v110(v172, v98, v108);
        v110(v177, (uint64_t)v111, v108);
        v38 = v103;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v181 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v181 + 16) + 1, 1, v181);
        v94 = v174;
        v113 = *(_QWORD *)(v181 + 16);
        v112 = *(_QWORD *)(v181 + 24);
        if (v113 >= v112 >> 1)
          v181 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v112 > 1, v113 + 1, 1, v181);
        v115 = v181;
        v114 = v182;
        *(_QWORD *)(v181 + 16) = v113 + 1;
        result = ((uint64_t (*)(unint64_t, char *, uint64_t))v110)(v115+ ((*(unsigned __int8 *)(v114 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v114 + 80))+ *(_QWORD *)(v114 + 72) * v113, v177, v183);
        v98 = (uint64_t)v173;
        v79 = v179;
      }
      ++v95;
      v97 += v180;
      if (v94 == v95)
        goto LABEL_18;
    }
  }
  v178 = *(_QWORD *)(v38 + 56);
  swift_unknownObjectRetain();
  v181 = MEMORY[0x24BEE4AF8];
LABEL_18:
  ((void (*)(char *, uint64_t, uint64_t, uint64_t))v178)(v79, 1, 1, v37);
LABEL_19:
  swift_unknownObjectRelease();
  specialized Set.init<A>(_:)(v181);
  swift_bridgeObjectRelease();
  v96 = *(_QWORD *)(v171 + v145);
  if (v96 >= 2)
  {
    static Duration.UnitsFormatStyle.UnitWidth.narrow.getter();
  }
  else if (v96 == 1)
  {
    if ((*(_BYTE *)(v171 + *(int *)(v170 + 48)) & 1) != 0)
      static Duration.UnitsFormatStyle.UnitWidth.condensedAbbreviated.getter();
    else
      static Duration.UnitsFormatStyle.UnitWidth.abbreviated.getter();
  }
  else
  {
    static Duration.UnitsFormatStyle.UnitWidth.wide.getter();
  }
  static Duration.UnitsFormatStyle.ZeroValueUnitsDisplayStrategy.show(length:)();
  v116 = v159;
  v117 = v158;
  v118 = v146;
  (*(void (**)(char *, _QWORD, uint64_t))(v159 + 104))(v158, *MEMORY[0x24BEE38B8], v146);
  static Duration.UnitsFormatStyle.FractionalPartDisplayStrategy.hide(rounded:)();
  (*(void (**)(char *, uint64_t))(v116 + 8))(v117, v118);
  v119 = v152;
  Duration.UnitsFormatStyle.init(allowedUnits:width:maximumUnitCount:zeroValueUnits:valueLength:fractionalPart:)();
  v120 = v151;
  Duration.UnitsFormatStyle.locale(_:)();
  v121 = v154;
  v122 = *(void (**)(char *, uint64_t))(v154 + 8);
  v123 = v155;
  v122(v119, v155);
  v124 = *(void (**)(char *, char *, uint64_t))(v121 + 32);
  v125 = v153;
  v124(v153, v120, v123);
  v126 = v167;
  Duration.UnitsFormatStyle.attributed.getter();
  v122(v125, v123);
  type metadata accessor for (style: Date.ComponentsFormatStyle, largestField: Date.ComponentsFormatStyle.Field, smallestField: Date.ComponentsFormatStyle.Field)(0, &lazy cache variable for type metadata for (style: Duration.UnitsFormatStyle.Attributed, largestField: Date.ComponentsFormatStyle.Field, smallestField: Date.ComponentsFormatStyle.Field), (void (*)(uint64_t))MEMORY[0x24BDD0960]);
  v128 = v127;
  v129 = v169;
  v130 = v169 + *(int *)(v127 + 48);
  v131 = v147;
  v132 = v148;
  result = (*(uint64_t (**)(uint64_t, char *, uint64_t))(v147 + 16))(v169, v126, v148);
  v133 = v168;
  if (v168 == v94)
  {
    v134 = (uint64_t)v150;
    ((void (*)(char *, uint64_t, uint64_t, uint64_t))v178)(v150, 1, 1, v37);
    goto LABEL_49;
  }
  v134 = (uint64_t)v150;
  if ((uint64_t)v168 < (uint64_t)v94)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v38 + 16))(v150, v165 + v180 * (_QWORD)v168, v37);
    ((void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v178)(v134, 0, 1, v37);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v38 + 48))(v134, 1, v37) != 1)
    {
      result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v38 + 32))(v130, v134, v37);
      v135 = v129 + *(int *)(v128 + 64);
LABEL_52:
      if ((uint64_t)v94 > (uint64_t)v133)
      {
        v136 = (uint64_t)v144;
        (*(void (**)(char *, uint64_t, uint64_t))(v38 + 16))(v144, v165 + (_QWORD)(v94 - 1) * v180, v37);
        ((void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v178)(v136, 0, 1, v37);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v38 + 48))(v136, 1, v37) != 1)
        {
          (*(void (**)(char *, uint64_t))(v131 + 8))(v167, v132);
          swift_unknownObjectRelease();
          (*(void (**)(uint64_t, uint64_t, uint64_t))(v38 + 32))(v135, v136, v37);
          return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v128 - 8) + 56))(v129, 0, 1, v128);
        }
LABEL_54:
        static Date.ComponentsFormatStyle.Field.second.getter();
        swift_unknownObjectRelease();
        (*(void (**)(char *, uint64_t))(v131 + 8))(v167, v132);
        outlined destroy of (style: Duration.TimeFormatStyle.Attributed, smallestField: Date.ComponentsFormatStyle.Field)?(v136, &lazy cache variable for type metadata for Date.ComponentsFormatStyle.Field?, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE6C8]);
        return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v128 - 8) + 56))(v129, 0, 1, v128);
      }
      goto LABEL_60;
    }
LABEL_49:
    static Date.ComponentsFormatStyle.Field.second.getter();
    result = outlined destroy of (style: Duration.TimeFormatStyle.Attributed, smallestField: Date.ComponentsFormatStyle.Field)?(v134, &lazy cache variable for type metadata for Date.ComponentsFormatStyle.Field?, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE6C8]);
    v135 = v129 + *(int *)(v128 + 64);
    if (v133 == v94)
    {
      v136 = (uint64_t)v144;
      ((void (*)(char *, uint64_t, uint64_t, uint64_t))v178)(v144, 1, 1, v37);
      goto LABEL_54;
    }
    goto LABEL_52;
  }
LABEL_61:
  __break(1u);
  return result;
}

uint64_t SystemFormatStyle.DateOffset.componentsStyle(for:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  int *v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  char v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t result;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  void (*v61)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unsigned int (*v67)(uint64_t, uint64_t, uint64_t);
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  int64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  void (*v77)(unint64_t);
  uint64_t v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  char *v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  _QWORD *v103;
  uint64_t v104;

  v3 = v2;
  v104 = a1;
  v96 = a2;
  type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for Date.ComponentsFormatStyle.Field?, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE6C8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v4);
  v85 = (char *)&v76 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v93 = (char *)&v76 - v7;
  v8 = type metadata accessor for Calendar();
  v89 = *(_QWORD *)(v8 - 8);
  v90 = v8;
  MEMORY[0x24BDAC7A8](v8);
  v92 = (char *)&v76 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for Locale();
  v86 = *(_QWORD *)(v10 - 8);
  v87 = v10;
  MEMORY[0x24BDAC7A8](v10);
  v91 = (char *)&v76 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for Date.ComponentsFormatStyle.Style();
  MEMORY[0x24BDAC7A8](v12);
  v88 = (char *)&v76 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for Date.ComponentsFormatStyle();
  v100 = *(_QWORD *)(v14 - 8);
  v101 = v14;
  MEMORY[0x24BDAC7A8](v14);
  v99 = (char *)&v76 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v83 = type metadata accessor for Calendar.Component();
  v84 = *(_QWORD *)(v83 - 8);
  MEMORY[0x24BDAC7A8](v83);
  v82 = (char *)&v76 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v81 = type metadata accessor for DateComponents();
  v80 = *(_QWORD *)(v81 - 8);
  MEMORY[0x24BDAC7A8](v81);
  v79 = (char *)&v76 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for Date();
  v94 = *(_QWORD *)(v18 - 8);
  v95 = v18;
  MEMORY[0x24BDAC7A8](v18);
  v20 = (char *)&v76 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = type metadata accessor for Date.ComponentsFormatStyle.Field();
  v22 = *(_QWORD *)(v21 - 8);
  MEMORY[0x24BDAC7A8](v21);
  v24 = (char *)&v76 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = (int *)type metadata accessor for SystemFormatStyle.DateOffset();
  MEMORY[0x24BDAC7A8](v25);
  v27 = (char *)&v76 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v28);
  v30 = (char *)&v76 - v29;
  v31 = swift_allocObject();
  *(_OWORD *)(v31 + 16) = 0u;
  *(_OWORD *)(v31 + 32) = 0u;
  v103 = (_QWORD *)v31;
  v32 = *(unsigned __int8 *)(v3 + v25[11]);
  outlined init with copy of TypesettingLanguage(v3, (uint64_t)v30, (uint64_t (*)(_QWORD))type metadata accessor for SystemFormatStyle.DateOffset);
  v97 = v22;
  v98 = v21;
  v102 = v3;
  if (v32 < 2)
  {
    outlined destroy of TypesettingConfiguration((uint64_t)v30, (uint64_t (*)(_QWORD))type metadata accessor for SystemFormatStyle.DateOffset);
    outlined init with copy of TypesettingLanguage(v3, (uint64_t)v27, (uint64_t (*)(_QWORD))type metadata accessor for SystemFormatStyle.DateOffset);
    v34 = v94;
    v33 = v95;
    (*(void (**)(char *, uint64_t, uint64_t))(v94 + 16))(v20, v104, v95);
LABEL_7:
    (*(void (**)(char *, uint64_t))(v34 + 8))(v20, v33);
    outlined destroy of TypesettingConfiguration((uint64_t)v27, (uint64_t (*)(_QWORD))type metadata accessor for SystemFormatStyle.DateOffset);
    goto LABEL_8;
  }
  v35 = *(_QWORD *)&v30[v25[5]];
  static Date.ComponentsFormatStyle.Field.second.getter();
  LOBYTE(v35) = specialized Set.contains(_:)((uint64_t)v24, v35);
  (*(void (**)(char *, uint64_t))(v22 + 8))(v24, v21);
  outlined destroy of TypesettingConfiguration((uint64_t)v30, (uint64_t (*)(_QWORD))type metadata accessor for SystemFormatStyle.DateOffset);
  outlined init with copy of TypesettingLanguage(v3, (uint64_t)v27, (uint64_t (*)(_QWORD))type metadata accessor for SystemFormatStyle.DateOffset);
  v34 = v94;
  v33 = v95;
  (*(void (**)(char *, uint64_t, uint64_t))(v94 + 16))(v20, v104, v95);
  if ((v35 & 1) == 0)
    goto LABEL_7;
  type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for _ContiguousArrayStorage<Calendar.Component>, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF290], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
  v36 = v84;
  v37 = (*(unsigned __int8 *)(v84 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v84 + 80);
  v38 = swift_allocObject();
  *(_OWORD *)(v38 + 16) = xmmword_23527E860;
  LODWORD(v78) = *MEMORY[0x24BDCF258];
  v77 = *(void (**)(unint64_t))(v36 + 104);
  v39 = v83;
  v77(v38 + v37);
  specialized Set.init(_nonEmptyArrayLiteral:)(v38);
  swift_setDeallocating();
  swift_arrayDestroy();
  swift_deallocClassInstance();
  v40 = v79;
  Calendar.dateComponents(_:from:to:)();
  swift_bridgeObjectRelease();
  v41 = v82;
  ((void (*)(char *, _QWORD, uint64_t))v77)(v82, v78, v39);
  v78 = DateComponents.value(for:)();
  v43 = v42;
  (*(void (**)(char *, uint64_t))(v84 + 8))(v41, v39);
  (*(void (**)(char *, uint64_t))(v80 + 8))(v40, v81);
  (*(void (**)(char *, uint64_t))(v34 + 8))(v20, v33);
  outlined destroy of TypesettingConfiguration((uint64_t)v27, (uint64_t (*)(_QWORD))type metadata accessor for SystemFormatStyle.DateOffset);
  if ((v43 & 1) == 0 && !v78)
  {
    type metadata accessor for (style: Date.ComponentsFormatStyle, largestField: Date.ComponentsFormatStyle.Field, smallestField: Date.ComponentsFormatStyle.Field)(0, &lazy cache variable for type metadata for (style: Date.ComponentsFormatStyle, largestField: Date.ComponentsFormatStyle.Field, smallestField: Date.ComponentsFormatStyle.Field), (void (*)(uint64_t))MEMORY[0x24BDCE760]);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v44 - 8) + 56))(v96, 1, 1, v44);
    return swift_release();
  }
LABEL_8:
  v45 = v102;
  v46 = v103;
  v47 = *(_QWORD *)(v102 + v25[8]);
  if (v47 > 1)
  {
    static Date.ComponentsFormatStyle.Style.narrow.getter();
    v48 = v101;
    v49 = v99;
    v50 = v97;
  }
  else
  {
    v48 = v101;
    v49 = v99;
    v50 = v97;
    if (v47 == 1)
    {
      if ((*(_BYTE *)(v102 + v25[12]) & 1) != 0)
        static Date.ComponentsFormatStyle.Style.condensedAbbreviated.getter();
      else
        static Date.ComponentsFormatStyle.Style.abbreviated.getter();
    }
    else
    {
      static Date.ComponentsFormatStyle.Style.wide.getter();
    }
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v86 + 16))(v91, v45 + v25[9], v87);
  (*(void (**)(char *, uint64_t, uint64_t))(v89 + 16))(v92, v45 + v25[10], v90);
  getter of fieldsToDisplay #1 in SystemFormatStyle.DateOffset.componentsStyle(for:)(v46, v45, v104);
  specialized Set.init<A>(_:)(v51, v52, v53);
  swift_unknownObjectRelease();
  Date.ComponentsFormatStyle.init(style:locale:calendar:fields:)();
  v54 = v102;
  if ((static Date.< infix(_:_:)() & 1) != 0)
    Date.ComponentsFormatStyle.isPositive.setter();
  v55 = v96;
  (*(void (**)(uint64_t, char *, uint64_t))(v100 + 16))(v96, v49, v48);
  v56 = v104;
  result = getter of fieldsToDisplay #1 in SystemFormatStyle.DateOffset.componentsStyle(for:)(v46, v54, v104);
  if (v59 == v60 >> 1)
  {
    v61 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v50 + 56);
    v62 = (uint64_t)v93;
    v63 = v98;
    v61(v93, 1, 1, v98);
  }
  else
  {
    v62 = (uint64_t)v93;
    if (v59 >= (uint64_t)(v60 >> 1))
    {
      __break(1u);
      goto LABEL_34;
    }
    v63 = v98;
    (*(void (**)(char *, uint64_t, uint64_t))(v50 + 16))(v93, v58 + *(_QWORD *)(v50 + 72) * v59, v98);
    v61 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v50 + 56);
    v61((char *)v62, 0, 1, v63);
  }
  swift_unknownObjectRelease();
  type metadata accessor for (style: Date.ComponentsFormatStyle, largestField: Date.ComponentsFormatStyle.Field, smallestField: Date.ComponentsFormatStyle.Field)(0, &lazy cache variable for type metadata for (style: Date.ComponentsFormatStyle, largestField: Date.ComponentsFormatStyle.Field, smallestField: Date.ComponentsFormatStyle.Field), (void (*)(uint64_t))MEMORY[0x24BDCE760]);
  v65 = v64;
  v66 = v55 + *(int *)(v64 + 48);
  v67 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v50 + 48);
  if (v67(v62, 1, v63) == 1)
  {
    static Date.ComponentsFormatStyle.Field.second.getter();
    outlined destroy of (style: Duration.TimeFormatStyle.Attributed, smallestField: Date.ComponentsFormatStyle.Field)?(v62, &lazy cache variable for type metadata for Date.ComponentsFormatStyle.Field?, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE6C8]);
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v50 + 32))(v66, v62, v63);
  }
  result = getter of fieldsToDisplay #1 in SystemFormatStyle.DateOffset.componentsStyle(for:)(v103, v54, v56);
  v71 = v70 >> 1;
  if (v69 == v70 >> 1)
  {
    v72 = 1;
    v73 = (uint64_t)v85;
    v74 = v98;
LABEL_29:
    v61((char *)v73, v72, 1, v74);
    swift_unknownObjectRelease();
    v75 = v55 + *(int *)(v65 + 64);
    if (v67(v73, 1, v74) == 1)
    {
      static Date.ComponentsFormatStyle.Field.second.getter();
      (*(void (**)(char *, uint64_t))(v100 + 8))(v99, v101);
      outlined destroy of (style: Duration.TimeFormatStyle.Attributed, smallestField: Date.ComponentsFormatStyle.Field)?(v73, &lazy cache variable for type metadata for Date.ComponentsFormatStyle.Field?, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE6C8]);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v100 + 8))(v99, v101);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v97 + 32))(v75, v73, v74);
    }
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v65 - 8) + 56))(v55, 0, 1, v65);
    return swift_release();
  }
  v73 = (uint64_t)v85;
  v74 = v98;
  if (v71 > v69)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v97 + 16))(v85, v68 + *(_QWORD *)(v97 + 72) * (v71 - 1), v98);
    v72 = 0;
    goto LABEL_29;
  }
LABEL_34:
  __break(1u);
  return result;
}

uint64_t SystemFormatStyle.DateOffset.dateRange(for:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  char *v17;
  char v18;
  void (*v19)(char *, uint64_t, uint64_t);
  uint64_t result;
  char *v21;
  void (*v22)(char *, char *, uint64_t);
  char *v23;
  uint64_t v24;
  void (*v25)(char *, uint64_t);
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;

  v3 = v2;
  v30 = a2;
  type metadata accessor for (lower: AttributedString.Index, upper: AttributedString.Index)(0, (unint64_t *)&lazy cache variable for type metadata for (lower: Date, upper: Date), (void (*)(uint64_t))MEMORY[0x24BDCE900]);
  v6 = v5;
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v27 - v10;
  type metadata accessor for Range<Date>();
  v28 = v12;
  MEMORY[0x24BDAC7A8](v12);
  v29 = (char *)&v27 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for Date();
  v15 = *(_QWORD **)(v14 - 8);
  MEMORY[0x24BDAC7A8](v14);
  v17 = (char *)&v27 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = static Date.< infix(_:_:)();
  v19 = (void (*)(char *, uint64_t, uint64_t))v15[2];
  v19(v17, v3, v14);
  lazy protocol witness table accessor for type Date and conformance Date();
  if ((v18 & 1) != 0)
  {
    result = dispatch thunk of static Comparable.<= infix(_:_:)();
    if ((result & 1) != 0)
    {
      v21 = &v11[*(int *)(v6 + 48)];
      v19(v11, a1, v14);
      v22 = (void (*)(char *, char *, uint64_t))v15[4];
      v22(v21, v17, v14);
LABEL_6:
      v23 = &v8[*(int *)(v6 + 48)];
      v19(v8, (uint64_t)v11, v14);
      v19(v23, (uint64_t)v21, v14);
      v24 = (uint64_t)v29;
      v22(v29, v8, v14);
      v25 = (void (*)(char *, uint64_t))v15[1];
      v25(v23, v14);
      v26 = &v8[*(int *)(v6 + 48)];
      v22(v8, v11, v14);
      v22(v26, v21, v14);
      v22((char *)(v24 + *(int *)(v28 + 36)), v26, v14);
      v25(v8, v14);
      return outlined init with take of LocalizedStringKey.FormatArgument(v24, v30, (uint64_t (*)(_QWORD))type metadata accessor for Range<Date>);
    }
    __break(1u);
  }
  else
  {
    result = dispatch thunk of static Comparable.<= infix(_:_:)();
    if ((result & 1) != 0)
    {
      v21 = &v11[*(int *)(v6 + 48)];
      v22 = (void (*)(char *, char *, uint64_t))v15[4];
      v22(v11, v17, v14);
      v19(v21, a1, v14);
      goto LABEL_6;
    }
  }
  __break(1u);
  return result;
}

uint64_t SystemFormatStyle.DateOffset.component(for:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t);
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  double v15;
  uint64_t v16;
  char *v17;
  void (*v18)(char *, uint64_t);
  unsigned int *v19;
  char v20;
  char v21;
  char v22;
  char v23;
  char v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t result;
  Swift::String v29;
  _QWORD v30[2];

  v3 = v2;
  v6 = type metadata accessor for SystemFormatStyle.DateOffset();
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Date.ComponentsFormatStyle.Field();
  v10 = (uint64_t (*)(uint64_t))MEMORY[0x24BDCE6C8];
  v11 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v13 = (char *)v30 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = MEMORY[0x24BDAC7A8](v14);
  v17 = (char *)v30 - v16;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v11 + 16))((char *)v30 - v16, a1, v9, v15);
  static Date.ComponentsFormatStyle.Style.wide.getter();
  lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type Date.ComponentsFormatStyle.Field and conformance Date.ComponentsFormatStyle.Field, v10, MEMORY[0x24BDCE6E8]);
  LOBYTE(v10) = dispatch thunk of static Equatable.== infix(_:_:)();
  v18 = *(void (**)(char *, uint64_t))(v11 + 8);
  v18(v13, v9);
  if ((v10 & 1) != 0)
  {
    v18(v17, v9);
    v19 = (unsigned int *)MEMORY[0x24BDCF240];
LABEL_15:
    v26 = *v19;
    v27 = type metadata accessor for Calendar.Component();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 104))(a2, v26, v27);
  }
  static Date.ComponentsFormatStyle.Style.narrow.getter();
  v20 = dispatch thunk of static Equatable.== infix(_:_:)();
  v18(v13, v9);
  if ((v20 & 1) != 0)
  {
    v18(v17, v9);
    v19 = (unsigned int *)MEMORY[0x24BDCF250];
    goto LABEL_15;
  }
  static Date.ComponentsFormatStyle.Style.abbreviated.getter();
  v21 = dispatch thunk of static Equatable.== infix(_:_:)();
  v18(v13, v9);
  if ((v21 & 1) != 0)
  {
    v18(v17, v9);
    v19 = (unsigned int *)MEMORY[0x24BDCF1F8];
    goto LABEL_15;
  }
  static Date.ComponentsFormatStyle.Style.condensedAbbreviated.getter();
  v22 = dispatch thunk of static Equatable.== infix(_:_:)();
  v18(v13, v9);
  if ((v22 & 1) != 0)
  {
    v18(v17, v9);
    v19 = (unsigned int *)MEMORY[0x24BDCF220];
    goto LABEL_15;
  }
  static Date.ComponentsFormatStyle.Style.spellOut.getter();
  v23 = dispatch thunk of static Equatable.== infix(_:_:)();
  v18(v13, v9);
  if ((v23 & 1) != 0)
  {
    v18(v17, v9);
    v19 = (unsigned int *)MEMORY[0x24BDCF230];
    goto LABEL_15;
  }
  static Date.ComponentsFormatStyle.Field.minute.getter();
  v24 = dispatch thunk of static Equatable.== infix(_:_:)();
  v18(v13, v9);
  if ((v24 & 1) != 0)
  {
    v18(v17, v9);
    v19 = (unsigned int *)MEMORY[0x24BDCF258];
    goto LABEL_15;
  }
  static Date.ComponentsFormatStyle.Field.second.getter();
  v25 = dispatch thunk of static Equatable.== infix(_:_:)();
  v18(v13, v9);
  if ((v25 & 1) != 0)
  {
    v18(v17, v9);
    v19 = (unsigned int *)MEMORY[0x24BDCF260];
    goto LABEL_15;
  }
  outlined init with copy of TypesettingLanguage(v3, (uint64_t)v8, (uint64_t (*)(_QWORD))type metadata accessor for SystemFormatStyle.DateOffset);
  v30[0] = 0;
  v30[1] = 0xE000000000000000;
  _StringGuts.grow(_:)(43);
  v29._object = (void *)0x80000002352E2820;
  v29._countAndFlagsBits = 0xD000000000000029;
  String.append(_:)(v29);
  _print_unlocked<A, B>(_:_:)();
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t SystemFormatStyle.DateOffset.removeNegativeSign(from:)(uint64_t a1)
{
  uint64_t (*v2)(uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  void (*v34)(char *, char *, uint64_t);
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  void (*v45)(char *, uint64_t);
  char v46;
  char *v47;
  void (*v48)(char *, uint64_t, uint64_t, uint64_t);
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  uint64_t v54;
  char *v55;
  char *v56;
  void (*v57)(char *, char *, uint64_t);
  char *v58;
  char *v59;
  char *v60;
  char *v61;
  void (*v62)(char *, char *, uint64_t);
  char *v63;
  char *v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  char *v75;
  char *v76;
  uint64_t v77;
  void (*v78)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  void (*v82)(char *, uint64_t);
  char *v83;
  uint64_t v84;
  char *v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;

  v2 = (uint64_t (*)(uint64_t))MEMORY[0x24BDCC4F0];
  type metadata accessor for (lower: AttributedString.Index, upper: AttributedString.Index)(0, (unint64_t *)&lazy cache variable for type metadata for (lower: AttributedString.Index, upper: AttributedString.Index), (void (*)(uint64_t))MEMORY[0x24BDCC4F0]);
  v77 = v3;
  MEMORY[0x24BDAC7A8](v3);
  v75 = (char *)&v69 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v76 = (char *)&v69 - v6;
  type metadata accessor for ClosedRange<AttributedString.Index>(0);
  v74 = v7;
  MEMORY[0x24BDAC7A8](v7);
  v73 = (char *)&v69 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9);
  v72 = (uint64_t)&v69 - v10;
  type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for AttributedString.Index?, v2, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v11);
  v89 = (char *)&v69 - v12;
  v13 = type metadata accessor for AttributedString.Index();
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x24BDAC7A8](v13);
  v16 = (char *)&v69 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v17);
  v86 = (char *)&v69 - v18;
  type metadata accessor for DefaultIndices<AttributedString.CharacterView>(0);
  v20 = v19;
  MEMORY[0x24BDAC7A8](v19);
  v22 = (char *)&v69 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = type metadata accessor for AttributedString.CharacterView();
  v88 = *(_QWORD *)(v23 - 8);
  v24 = v88;
  MEMORY[0x24BDAC7A8](v23);
  v26 = (char *)&v69 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for ReversedCollection<DefaultIndices<AttributedString.CharacterView>>(0, &lazy cache variable for type metadata for ReversedCollection<DefaultIndices<AttributedString.CharacterView>>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE3038]);
  MEMORY[0x24BDAC7A8](v27);
  v84 = (uint64_t)&v69 - v28;
  type metadata accessor for ReversedCollection<DefaultIndices<AttributedString.CharacterView>>.Iterator(0);
  v85 = (char *)v29;
  MEMORY[0x24BDAC7A8](v29);
  v81 = (uint64_t)&v69 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v31);
  v33 = (char *)&v69 - v32;
  v87 = a1;
  AttributedString.characters.getter();
  v34 = *(void (**)(char *, char *, uint64_t))(v24 + 16);
  v35 = (uint64_t)v22;
  v34(v22, v26, v23);
  lazy protocol witness table accessor for type AttributedString.CharacterView and conformance AttributedString.CharacterView();
  dispatch thunk of Collection.startIndex.getter();
  dispatch thunk of Collection.endIndex.getter();
  v82 = *(void (**)(char *, uint64_t))(v88 + 8);
  v83 = v26;
  v82(v26, v23);
  v36 = v84;
  outlined init with take of LocalizedStringKey.FormatArgument(v35, v84, (uint64_t (*)(_QWORD))type metadata accessor for DefaultIndices<AttributedString.CharacterView>);
  v37 = v81;
  outlined init with copy of TypesettingLanguage(v36, v81, (uint64_t (*)(_QWORD))type metadata accessor for DefaultIndices<AttributedString.CharacterView>);
  v38 = v36 + *(int *)(v20 + 40);
  v39 = v86;
  v88 = *(_QWORD *)(v14 + 16);
  ((void (*)(char *, uint64_t, uint64_t))v88)(v86, v38, v13);
  outlined destroy of TypesettingConfiguration(v36, (uint64_t (*)(_QWORD))type metadata accessor for DefaultIndices<AttributedString.CharacterView>);
  v40 = (uint64_t)v85;
  v41 = v37 + *((int *)v85 + 9);
  v86 = *(char **)(v14 + 32);
  ((void (*)(uint64_t, char *, uint64_t))v86)(v41, v39, v13);
  outlined init with take of LocalizedStringKey.FormatArgument(v37, (uint64_t)v33, (uint64_t (*)(_QWORD))type metadata accessor for ReversedCollection<DefaultIndices<AttributedString.CharacterView>>.Iterator);
  v42 = &v33[*(int *)(v40 + 36)];
  v43 = *(int *)(v20 + 36);
  v85 = v33;
  v44 = (uint64_t)&v33[v43];
  v80 = lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type AttributedString.Index and conformance AttributedString.Index, (uint64_t (*)(uint64_t))MEMORY[0x24BDCC4F0], MEMORY[0x24BDCC508]);
  v81 = v44;
  if ((dispatch thunk of static Equatable.== infix(_:_:)() & 1) == 0)
  {
    v84 = lazy protocol witness table accessor for type AttributedString.CharacterView and conformance AttributedString.CharacterView();
    v79 = v14;
    v70 = v23;
    v71 = v16;
    while (1)
    {
      dispatch thunk of BidirectionalCollection.formIndex(before:)();
      v47 = v89;
      ((void (*)(char *, char *, uint64_t))v88)(v89, v42, v13);
      v48 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v14 + 56);
      v48(v47, 0, 1, v13);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v47, 1, v13) == 1)
        return outlined destroy of TypesettingConfiguration((uint64_t)v85, (uint64_t (*)(_QWORD))type metadata accessor for ReversedCollection<DefaultIndices<AttributedString.CharacterView>>.Iterator);
      v78 = v48;
      ((void (*)(char *, char *, uint64_t))v86)(v16, v89, v13);
      v49 = v83;
      AttributedString.characters.getter();
      v50 = AttributedString.CharacterView.subscript.getter();
      v52 = v51;
      v82(v49, v23);
      if (v50 == 45 && v52 == 0xE100000000000000
        || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
        || v50 == 9603298 && v52 == 0xA300000000000000)
      {
        swift_bridgeObjectRelease();
      }
      else
      {
        v53 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if ((v53 & 1) == 0)
        {
          v45 = *(void (**)(char *, uint64_t))(v14 + 8);
          goto LABEL_4;
        }
      }
      lazy protocol witness table accessor for type AttributedString.Index and conformance AttributedString.Index();
      if ((dispatch thunk of static Comparable.<= infix(_:_:)() & 1) == 0)
      {
        __break(1u);
        break;
      }
      v55 = v76;
      v54 = v77;
      v56 = &v76[*(int *)(v77 + 48)];
      v57 = (void (*)(char *, char *, uint64_t))v88;
      ((void (*)(char *, char *, uint64_t))v88)(v76, v16, v13);
      v57(v56, v16, v13);
      v58 = v75;
      v59 = &v75[*(int *)(v54 + 48)];
      v57(v75, v55, v13);
      v57(v59, v56, v13);
      v60 = v73;
      v61 = v42;
      v62 = (void (*)(char *, char *, uint64_t))v86;
      ((void (*)(char *, char *, uint64_t))v86)(v73, v58, v13);
      v45 = *(void (**)(char *, uint64_t))(v14 + 8);
      v45(v59, v13);
      v63 = &v58[*(int *)(v54 + 48)];
      v64 = v55;
      v23 = v70;
      v62(v58, v64, v13);
      v62(v63, v56, v13);
      v62(&v60[*(int *)(v74 + 36)], v63, v13);
      v42 = v61;
      v65 = v58;
      v16 = v71;
      v45(v65, v13);
      v66 = (uint64_t)v60;
      v67 = v72;
      outlined init with take of LocalizedStringKey.FormatArgument(v66, v72, (uint64_t (*)(_QWORD))type metadata accessor for ClosedRange<AttributedString.Index>);
      lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type ClosedRange<AttributedString.Index> and conformance ClosedRange<A>, (uint64_t (*)(uint64_t))type metadata accessor for ClosedRange<AttributedString.Index>, MEMORY[0x24BEE08F8]);
      AttributedString.removeSubrange<A>(_:)();
      outlined destroy of TypesettingConfiguration(v67, (uint64_t (*)(_QWORD))type metadata accessor for ClosedRange<AttributedString.Index>);
LABEL_4:
      v45(v16, v13);
      v46 = dispatch thunk of static Equatable.== infix(_:_:)();
      v14 = v79;
      if ((v46 & 1) != 0)
      {
        v78(v89, 1, 1, v13);
        return outlined destroy of TypesettingConfiguration((uint64_t)v85, (uint64_t (*)(_QWORD))type metadata accessor for ReversedCollection<DefaultIndices<AttributedString.CharacterView>>.Iterator);
      }
    }
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v14 + 56))(v89, 1, 1, v13);
  return outlined destroy of TypesettingConfiguration((uint64_t)v85, (uint64_t (*)(_QWORD))type metadata accessor for ReversedCollection<DefaultIndices<AttributedString.CharacterView>>.Iterator);
}

uint64_t SystemFormatStyle.DateOffset.smallerOneMinuteString.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t (*v31)(_QWORD, _QWORD);
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(char *, uint64_t);
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  char v44;
  void (*v45)(char *, uint64_t);
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void (*v52)(uint64_t, uint64_t, uint64_t);
  void (*v53)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v54;
  uint64_t v55;
  uint64_t (*v56)(char *, uint64_t);
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  char *v66;
  char *v67;
  uint64_t v68;
  char *v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  uint64_t (*v79)(_QWORD, _QWORD);
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  __int128 v87;

  v73 = a1;
  v64 = type metadata accessor for WhitespaceRemovingFormatStyle<Duration.UnitsFormatStyle.Attributed, AttributeScopes.FoundationAttributes.MeasurementAttribute>();
  MEMORY[0x24BDAC7A8](v64);
  v65 = (char *)&v63 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v2 = type metadata accessor for AttributedString();
  v71 = *(_QWORD *)(v2 - 8);
  v72 = v2;
  MEMORY[0x24BDAC7A8](v2);
  v70 = (char *)&v63 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for FloatingPointRoundingRule();
  v78 = *(_QWORD *)(v4 - 8);
  v79 = (uint64_t (*)(_QWORD, _QWORD))v4;
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v63 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Duration.UnitsFormatStyle.FractionalPartDisplayStrategy();
  MEMORY[0x24BDAC7A8](v7);
  v77 = (char *)&v63 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Duration.UnitsFormatStyle.ZeroValueUnitsDisplayStrategy();
  MEMORY[0x24BDAC7A8](v9);
  v81 = type metadata accessor for Duration.UnitsFormatStyle.UnitWidth();
  v68 = *(_QWORD *)(v81 - 8);
  MEMORY[0x24BDAC7A8](v81);
  v69 = (char *)&v63 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)&v63 - v12;
  MEMORY[0x24BDAC7A8](v14);
  v16 = (char *)&v63 - v15;
  MEMORY[0x24BDAC7A8](v17);
  v84 = (uint64_t)&v63 - v18;
  v19 = type metadata accessor for Duration.UnitsFormatStyle();
  v75 = *(_QWORD *)(v19 - 8);
  v76 = v19;
  MEMORY[0x24BDAC7A8](v19);
  v21 = (char *)&v63 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v80 = type metadata accessor for Duration.UnitsFormatStyle.Attributed();
  v82 = *(_QWORD *)(v80 - 8);
  MEMORY[0x24BDAC7A8](v80);
  v23 = (char *)&v63 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v24);
  v85 = (char *)&v63 - v25;
  type metadata accessor for [(_:)](0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Duration.UnitsFormatStyle.Unit>, (uint64_t (*)(uint64_t))MEMORY[0x24BDD0A50], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
  type metadata accessor for Duration.UnitsFormatStyle.Unit();
  v26 = swift_allocObject();
  *(_OWORD *)(v26 + 16) = xmmword_23527E860;
  static Duration.UnitsFormatStyle.Unit.minutes.getter();
  specialized Set.init(_nonEmptyArrayLiteral:)(v26);
  swift_setDeallocating();
  swift_arrayDestroy();
  swift_deallocClassInstance();
  v27 = type metadata accessor for SystemFormatStyle.DateOffset();
  v28 = v27;
  v83 = *(int *)(v27 + 32);
  v29 = *(_QWORD *)(v86 + v83);
  v67 = v13;
  v66 = v16;
  if (v29 > 1)
  {
    static Duration.UnitsFormatStyle.UnitWidth.narrow.getter();
LABEL_7:
    v30 = v80;
    goto LABEL_8;
  }
  if (v29 != 1)
  {
    static Duration.UnitsFormatStyle.UnitWidth.wide.getter();
    goto LABEL_7;
  }
  v30 = v80;
  if ((*(_BYTE *)(v86 + *(int *)(v27 + 48)) & 1) != 0)
    static Duration.UnitsFormatStyle.UnitWidth.condensedAbbreviated.getter();
  else
    static Duration.UnitsFormatStyle.UnitWidth.abbreviated.getter();
LABEL_8:
  static Duration.UnitsFormatStyle.ZeroValueUnitsDisplayStrategy.show(length:)();
  v32 = v78;
  v31 = v79;
  (*(void (**)(char *, _QWORD, uint64_t (*)(_QWORD, _QWORD)))(v78 + 104))(v6, *MEMORY[0x24BEE38B8], v79);
  static Duration.UnitsFormatStyle.FractionalPartDisplayStrategy.hide(rounded:)();
  (*(void (**)(char *, uint64_t (*)(_QWORD, _QWORD)))(v32 + 8))(v6, v31);
  Duration.UnitsFormatStyle.init(allowedUnits:width:maximumUnitCount:zeroValueUnits:valueLength:fractionalPart:)();
  Duration.UnitsFormatStyle.attributed.getter();
  (*(void (**)(char *, uint64_t))(v75 + 8))(v21, v76);
  v33 = v86;
  v34 = v86 + *(int *)(v28 + 36);
  Duration.UnitsFormatStyle.Attributed.locale(_:)();
  v35 = *(void (**)(char *, uint64_t))(v82 + 8);
  v35(v23, v30);
  v36 = v83;
  v37 = *(_QWORD *)(v33 + v83);
  v38 = v30;
  v74 = v28;
  v79 = (uint64_t (*)(_QWORD, _QWORD))v35;
  v84 = v34;
  if (v37 >= 2)
  {
    v43 = v66;
    static Duration.UnitsFormatStyle.UnitWidth.narrow.getter();
  }
  else
  {
    if (v37 == 1)
    {
      v39 = (uint64_t)v70;
      v40 = v81;
      v41 = v68;
      v42 = v67;
      v43 = v66;
      if ((*(_BYTE *)(v86 + *(int *)(v28 + 48)) & 1) != 0)
        static Duration.UnitsFormatStyle.UnitWidth.condensedAbbreviated.getter();
      else
        static Duration.UnitsFormatStyle.UnitWidth.abbreviated.getter();
      goto LABEL_15;
    }
    v43 = v66;
    static Duration.UnitsFormatStyle.UnitWidth.wide.getter();
  }
  v39 = (uint64_t)v70;
  v40 = v81;
  v41 = v68;
  v42 = v67;
LABEL_15:
  static Duration.UnitsFormatStyle.UnitWidth.condensedAbbreviated.getter();
  v44 = static Duration.UnitsFormatStyle.UnitWidth.== infix(_:_:)();
  v45 = *(void (**)(char *, uint64_t))(v41 + 8);
  v45(v42, v40);
  v45(v43, v40);
  if ((v44 & 1) != 0)
  {
    v46 = (uint64_t)v65;
    (*(void (**)(char *, char *, uint64_t))(v82 + 16))(v65, v85, v38);
    v47 = v64;
    v48 = v46 + *(int *)(v64 + 76);
    v49 = *MEMORY[0x24BDCBF68];
    v50 = type metadata accessor for AttributeScopes.FoundationAttributes.MeasurementAttribute.Component();
    v51 = *(_QWORD *)(v50 - 8);
    v52 = *(void (**)(uint64_t, uint64_t, uint64_t))(v51 + 104);
    v52(v48, v49, v50);
    v53 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v51 + 56);
    v36 = v83;
    v53(v48, 0, 1, v50);
    v54 = *(int *)(v47 + 80);
    v38 = v80;
    v55 = v46 + v54;
    v52(v46 + v54, *MEMORY[0x24BDCBF60], v50);
    v53(v55, 0, 1, v50);
    v40 = v81;
    v87 = xmmword_23529DC00;
    lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.Attributed and conformance Duration.UnitsFormatStyle.Attributed, (uint64_t (*)(uint64_t))MEMORY[0x24BDD0960], MEMORY[0x24BDD0958]);
    dispatch thunk of FormatStyle.format(_:)();
    outlined destroy of TypesettingConfiguration(v46, (uint64_t (*)(_QWORD))type metadata accessor for WhitespaceRemovingFormatStyle<Duration.UnitsFormatStyle.Attributed, AttributeScopes.FoundationAttributes.MeasurementAttribute>);
  }
  else
  {
    Duration.UnitsFormatStyle.Attributed.format(_:)();
  }
  v56 = (uint64_t (*)(char *, uint64_t))v79;
  v57 = *(_QWORD *)(v86 + v36);
  if (v57 > 1)
  {
    v61 = (uint64_t)v69;
    static Duration.UnitsFormatStyle.UnitWidth.narrow.getter();
    goto LABEL_24;
  }
  if (v57 != 1)
  {
    v61 = (uint64_t)v69;
    static Duration.UnitsFormatStyle.UnitWidth.wide.getter();
LABEL_24:
    v59 = v72;
    v58 = v73;
    v60 = v71;
    goto LABEL_25;
  }
  v59 = v72;
  v58 = v73;
  v60 = v71;
  v61 = (uint64_t)v69;
  if ((*(_BYTE *)(v86 + *(int *)(v74 + 48)) & 1) != 0)
    static Duration.UnitsFormatStyle.UnitWidth.condensedAbbreviated.getter();
  else
    static Duration.UnitsFormatStyle.UnitWidth.abbreviated.getter();
LABEL_25:
  static SystemFormatStyle.lessThanOneMinuteString(_:locale:width:)(v39, v84, v61, v58);
  v45((char *)v61, v40);
  (*(void (**)(uint64_t, uint64_t))(v60 + 8))(v39, v59);
  return v56(v85, v38);
}

uint64_t SystemFormatStyle.DateOffset.locale(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;

  outlined init with copy of TypesettingLanguage(v2, a2, (uint64_t (*)(_QWORD))type metadata accessor for SystemFormatStyle.DateOffset);
  v5 = a2 + *(int *)(type metadata accessor for SystemFormatStyle.DateOffset() + 36);
  v6 = type metadata accessor for Locale();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(v5, a1, v6);
}

void SystemFormatStyle.DateOffset.hash(into:)(__int128 *a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  uint64_t v5;

  v2 = v1;
  type metadata accessor for Date();
  lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type Date and conformance Date, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], MEMORY[0x24BDCE930]);
  dispatch thunk of Hashable.hash(into:)();
  v4 = (int *)type metadata accessor for SystemFormatStyle.DateOffset();
  v5 = *(_QWORD *)(v1 + v4[5]);
  swift_bridgeObjectRetain();
  specialized Set.hash(into:)(a1, v5);
  swift_bridgeObjectRelease();
  Hasher._combine(_:)(*(_QWORD *)(v2 + v4[6]));
  type metadata accessor for NumberFormatStyleConfiguration.SignDisplayStrategy();
  lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.SignDisplayStrategy and conformance NumberFormatStyleConfiguration.SignDisplayStrategy, (uint64_t (*)(uint64_t))MEMORY[0x24BDCD5F8], MEMORY[0x24BDCD610]);
  dispatch thunk of Hashable.hash(into:)();
  Hasher._combine(_:)(*(_QWORD *)(v2 + v4[8]));
  type metadata accessor for Locale();
  lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type Locale and conformance Locale, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEEA8], MEMORY[0x24BDCEED0]);
  dispatch thunk of Hashable.hash(into:)();
  type metadata accessor for Calendar();
  lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type Calendar and conformance Calendar, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF2D8], MEMORY[0x24BDCF300]);
  dispatch thunk of Hashable.hash(into:)();
  Hasher._combine(_:)(*(unsigned __int8 *)(v2 + v4[11]));
  Hasher._combine(_:)(*(_BYTE *)(v2 + v4[12]));
  Hasher._combine(_:)(*(_BYTE *)(v2 + v4[13]));
}

void specialized static Set.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  __n128 v12;
  char *v13;
  int64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t i;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  int64_t v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(char *, unint64_t, uint64_t, __n128);
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  char v31;
  void (*v32)(char *, uint64_t);
  char *v33;
  uint64_t v34;
  uint64_t v35;
  int64_t v36;
  uint64_t v37;
  int64_t v38;
  uint64_t v39;
  uint64_t v40;

  v4 = type metadata accessor for Date.ComponentsFormatStyle.Field();
  v40 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v33 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v33 - v8;
  v12.n128_f64[0] = MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)&v33 - v11;
  if (a1 == a2 || *(_QWORD *)(a1 + 16) != *(_QWORD *)(a2 + 16))
    return;
  v14 = 0;
  v15 = *(_QWORD *)(a1 + 56);
  v34 = a1;
  v35 = a1 + 56;
  v16 = 1 << *(_BYTE *)(a1 + 32);
  if (v16 < 64)
    v17 = ~(-1 << v16);
  else
    v17 = -1;
  v18 = v17 & v15;
  v36 = (unint64_t)(v16 + 63) >> 6;
  v39 = a2 + 56;
  v33 = (char *)&v33 - v11;
  if (!v18)
    goto LABEL_9;
LABEL_7:
  v37 = (v18 - 1) & v18;
  v38 = v14;
  for (i = __clz(__rbit64(v18)) | (v14 << 6); ; i = __clz(__rbit64(v21)) + (v22 << 6))
  {
    v24 = v40;
    v25 = *(_QWORD *)(v40 + 72);
    v26 = *(void (**)(char *, unint64_t, uint64_t, __n128))(v40 + 16);
    v26(v13, *(_QWORD *)(a1 + 48) + v25 * i, v4, v12);
    (*(void (**)(char *, char *, uint64_t))(v24 + 32))(v9, v13, v4);
    lazy protocol witness table accessor for type Date.ComponentsFormatStyle.Field and conformance Date.ComponentsFormatStyle.Field();
    v27 = dispatch thunk of Hashable._rawHashValue(seed:)();
    v28 = -1 << *(_BYTE *)(a2 + 32);
    v29 = v27 & ~v28;
    if (((*(_QWORD *)(v39 + ((v29 >> 3) & 0xFFFFFFFFFFFFF8)) >> v29) & 1) == 0)
    {
      (*(void (**)(char *, uint64_t))(v40 + 8))(v9, v4);
      return;
    }
    v30 = ~v28;
    while (1)
    {
      ((void (*)(char *, unint64_t, uint64_t))v26)(v6, *(_QWORD *)(a2 + 48) + v29 * v25, v4);
      lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type Date.ComponentsFormatStyle.Field and conformance Date.ComponentsFormatStyle.Field, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE6C8], MEMORY[0x24BDCE6E8]);
      v31 = dispatch thunk of static Equatable.== infix(_:_:)();
      v32 = *(void (**)(char *, uint64_t))(v40 + 8);
      v32(v6, v4);
      if ((v31 & 1) != 0)
        break;
      v29 = (v29 + 1) & v30;
      if (((*(_QWORD *)(v39 + ((v29 >> 3) & 0xFFFFFFFFFFFFF8)) >> v29) & 1) == 0)
      {
        v32(v9, v4);
        return;
      }
    }
    v32(v9, v4);
    v13 = v33;
    a1 = v34;
    v18 = v37;
    v14 = v38;
    if (v37)
      goto LABEL_7;
LABEL_9:
    v20 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
      __break(1u);
      goto LABEL_34;
    }
    if (v20 >= v36)
      return;
    v21 = *(_QWORD *)(v35 + 8 * v20);
    v22 = v14 + 1;
    if (!v21)
    {
      v22 = v20 + 1;
      if (v20 + 1 >= v36)
        return;
      v21 = *(_QWORD *)(v35 + 8 * v22);
      if (!v21)
      {
        v22 = v20 + 2;
        if (v20 + 2 >= v36)
          return;
        v21 = *(_QWORD *)(v35 + 8 * v22);
        if (!v21)
        {
          v22 = v20 + 3;
          if (v20 + 3 >= v36)
            return;
          v21 = *(_QWORD *)(v35 + 8 * v22);
          if (!v21)
            break;
        }
      }
    }
LABEL_24:
    v37 = (v21 - 1) & v21;
    v38 = v22;
  }
  v23 = v20 + 4;
  if (v23 >= v36)
    return;
  v21 = *(_QWORD *)(v35 + 8 * v23);
  if (v21)
  {
    v22 = v23;
    goto LABEL_24;
  }
  while (1)
  {
    v22 = v23 + 1;
    if (__OFADD__(v23, 1))
      break;
    if (v22 >= v36)
      return;
    v21 = *(_QWORD *)(v35 + 8 * v22);
    ++v23;
    if (v21)
      goto LABEL_24;
  }
LABEL_34:
  __break(1u);
}

uint64_t SystemFormatStyle.DateOffset.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  int *v10;
  uint64_t v12;
  uint64_t v13;

  v3 = v1;
  type metadata accessor for KeyedEncodingContainer<SystemFormatStyle.DateOffset.CodingKeys>(0, &lazy cache variable for type metadata for KeyedEncodingContainer<SystemFormatStyle.DateOffset.CodingKeys>, (uint64_t (*)(uint64_t, void *, unint64_t))MEMORY[0x24BEE3520]);
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v9 = (char *)&v12 - v8;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type SystemFormatStyle.DateOffset.CodingKeys and conformance SystemFormatStyle.DateOffset.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v13) = 0;
  type metadata accessor for Date();
  lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type Date and conformance Date, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], MEMORY[0x24BDCE920]);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    v10 = (int *)type metadata accessor for SystemFormatStyle.DateOffset();
    v13 = *(_QWORD *)(v3 + v10[5]);
    HIBYTE(v12) = 1;
    type metadata accessor for Set<Date.ComponentsFormatStyle.Field>(0);
    lazy protocol witness table accessor for type Set<Date.ComponentsFormatStyle.Field> and conformance <> Set<A>(&lazy protocol witness table cache variable for type Set<Date.ComponentsFormatStyle.Field> and conformance <> Set<A>, (uint64_t (*)(uint64_t))type metadata accessor for Set<Date.ComponentsFormatStyle.Field>, lazy protocol witness table accessor for type Date.ComponentsFormatStyle.Field and conformance Date.ComponentsFormatStyle.Field, MEMORY[0x24BEE1700]);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    LOBYTE(v13) = 2;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v13) = 3;
    type metadata accessor for NumberFormatStyleConfiguration.SignDisplayStrategy();
    lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.SignDisplayStrategy and conformance NumberFormatStyleConfiguration.SignDisplayStrategy, (uint64_t (*)(uint64_t))MEMORY[0x24BDCD5F8], MEMORY[0x24BDCD608]);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    v13 = *(_QWORD *)(v3 + v10[8]);
    HIBYTE(v12) = 4;
    lazy protocol witness table accessor for type TextSizeVariant and conformance TextSizeVariant();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    LOBYTE(v13) = 5;
    type metadata accessor for Locale();
    lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type Locale and conformance Locale, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEEA8], MEMORY[0x24BDCEEC8]);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    LOBYTE(v13) = 6;
    type metadata accessor for Calendar();
    lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type Calendar and conformance Calendar, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF2D8], MEMORY[0x24BDCF2F8]);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    LOBYTE(v13) = *(_BYTE *)(v3 + v10[11]);
    HIBYTE(v12) = 7;
    lazy protocol witness table accessor for type TimeDataFormatting.UpdateFrequency and conformance TimeDataFormatting.UpdateFrequency();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    LOBYTE(v13) = 8;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v13) = 9;
    KeyedEncodingContainer.encode(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

Swift::Int SystemFormatStyle.DateOffset.hashValue.getter()
{
  __int128 v1[4];

  Hasher.init(_seed:)();
  SystemFormatStyle.DateOffset.hash(into:)(v1);
  return Hasher._finalize()();
}

uint64_t SystemFormatStyle.DateOffset.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v30;
  int *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  int *v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  _QWORD v42[2];
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  int *v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  char *v66;
  char v67;
  uint64_t v68;

  v46 = a2;
  v3 = type metadata accessor for Calendar();
  v62 = *(_QWORD *)(v3 - 8);
  v63 = v3;
  MEMORY[0x24BDAC7A8](v3);
  v47 = (char *)v42 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v61 = type metadata accessor for Locale();
  v64 = *(_QWORD *)(v61 - 8);
  MEMORY[0x24BDAC7A8](v61);
  v48 = (char *)v42 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v51 = type metadata accessor for NumberFormatStyleConfiguration.SignDisplayStrategy();
  v49 = *(_QWORD *)(v51 - 8);
  MEMORY[0x24BDAC7A8](v51);
  v50 = (char *)v42 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Date();
  v57 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v52 = (char *)v42 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for KeyedEncodingContainer<SystemFormatStyle.DateOffset.CodingKeys>(0, &lazy cache variable for type metadata for KeyedDecodingContainer<SystemFormatStyle.DateOffset.CodingKeys>, (uint64_t (*)(uint64_t, void *, unint64_t))MEMORY[0x24BEE33E0]);
  v53 = v9;
  v55 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)v42 - v10;
  v12 = (int *)type metadata accessor for SystemFormatStyle.DateOffset();
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)v42 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = *(int *)(v15 + 32);
  *(_QWORD *)&v14[v16] = 0;
  v60 = &v14[*(int *)(v15 + 36)];
  static Locale.autoupdatingCurrent.getter();
  v65 = &v14[v12[10]];
  static Calendar.autoupdatingCurrent.getter();
  v17 = v12[11];
  v14[v17] = 0;
  v18 = v12[12];
  v14[v18] = 0;
  v56 = v12;
  v19 = v12[13];
  v66 = v14;
  v14[v19] = 0;
  v20 = a1[3];
  v58 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v20);
  lazy protocol witness table accessor for type SystemFormatStyle.DateOffset.CodingKeys and conformance SystemFormatStyle.DateOffset.CodingKeys();
  v54 = v11;
  v21 = v59;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v21)
  {
    v22 = v61;
    v23 = v64;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v58);
    v28 = v62;
    v27 = v63;
    (*(void (**)(char *, uint64_t))(v23 + 8))(v60, v22);
    return (*(uint64_t (**)(char *, uint64_t))(v28 + 8))(v65, v27);
  }
  else
  {
    v59 = v16;
    v45 = v17;
    v44 = v18;
    v43 = v19;
    LOBYTE(v68) = 0;
    lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type Date and conformance Date, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], MEMORY[0x24BDCE960]);
    v24 = v52;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    v25 = v64;
    v26 = v7;
    v30 = v66;
    (*(void (**)(char *, char *, uint64_t))(v57 + 32))(v66, v24, v7);
    type metadata accessor for Set<Date.ComponentsFormatStyle.Field>(0);
    v67 = 1;
    lazy protocol witness table accessor for type Set<Date.ComponentsFormatStyle.Field> and conformance <> Set<A>(&lazy protocol witness table cache variable for type Set<Date.ComponentsFormatStyle.Field> and conformance <> Set<A>, (uint64_t (*)(uint64_t))type metadata accessor for Set<Date.ComponentsFormatStyle.Field>, lazy protocol witness table accessor for type Date.ComponentsFormatStyle.Field and conformance Date.ComponentsFormatStyle.Field, MEMORY[0x24BEE1720]);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    v31 = v56;
    *(_QWORD *)&v30[v56[5]] = v68;
    LOBYTE(v68) = 2;
    v32 = KeyedDecodingContainer.decode(_:forKey:)();
    v33 = v61;
    *(_QWORD *)&v30[v31[6]] = v32;
    LOBYTE(v68) = 3;
    lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.SignDisplayStrategy and conformance NumberFormatStyleConfiguration.SignDisplayStrategy, (uint64_t (*)(uint64_t))MEMORY[0x24BDCD5F8], MEMORY[0x24BDCD620]);
    v34 = v50;
    v35 = v31;
    v36 = v51;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, char *, uint64_t))(v49 + 32))(&v66[v35[7]], v34, v36);
    v67 = 4;
    lazy protocol witness table accessor for type TextSizeVariant and conformance TextSizeVariant();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    v42[1] = v26;
    *(_QWORD *)&v66[v59] = v68;
    LOBYTE(v68) = 5;
    lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type Locale and conformance Locale, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEEA8], MEMORY[0x24BDCEEE8]);
    v37 = v48;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, char *, uint64_t))(v25 + 40))(v60, v37, v33);
    LOBYTE(v68) = 6;
    lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type Calendar and conformance Calendar, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF2D8], MEMORY[0x24BDCF310]);
    v38 = v47;
    v39 = v63;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, char *, uint64_t))(v62 + 40))(v65, v38, v39);
    v67 = 7;
    lazy protocol witness table accessor for type TimeDataFormatting.UpdateFrequency and conformance TimeDataFormatting.UpdateFrequency();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    v66[v45] = v68;
    LOBYTE(v68) = 8;
    v66[v44] = KeyedDecodingContainer.decode(_:forKey:)() & 1;
    LOBYTE(v68) = 9;
    v40 = KeyedDecodingContainer.decode(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v55 + 8))(v54, v53);
    v41 = (uint64_t)v66;
    v66[v43] = v40 & 1;
    outlined init with copy of TypesettingLanguage(v41, v46, (uint64_t (*)(_QWORD))type metadata accessor for SystemFormatStyle.DateOffset);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v58);
    return outlined destroy of TypesettingConfiguration(v41, (uint64_t (*)(_QWORD))type metadata accessor for SystemFormatStyle.DateOffset);
  }
}

uint64_t protocol witness for FormatStyle.locale(_:) in conformance SystemFormatStyle.DateOffset@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;

  outlined init with copy of TypesettingLanguage(v3, a3, (uint64_t (*)(_QWORD))type metadata accessor for SystemFormatStyle.DateOffset);
  v7 = a3 + *(int *)(a2 + 36);
  v8 = type metadata accessor for Locale();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 24))(v7, a1, v8);
}

uint64_t protocol witness for Decodable.init(from:) in conformance SystemFormatStyle.DateOffset@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return SystemFormatStyle.DateOffset.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance SystemFormatStyle.DateOffset(_QWORD *a1)
{
  return SystemFormatStyle.DateOffset.encode(to:)(a1);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance SystemFormatStyle.DateOffset()
{
  __int128 v1[4];

  Hasher.init(_seed:)();
  SystemFormatStyle.DateOffset.hash(into:)(v1);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance SystemFormatStyle.DateOffset()
{
  __int128 v1[4];

  Hasher.init(_seed:)();
  SystemFormatStyle.DateOffset.hash(into:)(v1);
  return Hasher._finalize()();
}

uint64_t SystemFormatStyle.DateOffset.discreteInput(before:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  char *v2;
  uint64_t v4;
  uint64_t (*v5)(uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t (*v40)(void);
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  char *v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  void (*v70)(uint64_t);
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  char *v80;
  void (*v81)(char *, char *, uint64_t);
  void (*v82)(char *, char *, uint64_t);
  char *v83;
  uint64_t v84;
  uint64_t v85;
  int v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  char *v94;
  char *v95;
  void (*v96)(char *, uint64_t, uint64_t);
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  void (*v100)(char *, uint64_t, uint64_t);
  char *v101;
  uint64_t v102;
  char *v103;
  char *v104;
  void (*v105)(char *, uint64_t);
  uint64_t v106;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  void (*v112)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v113;
  char *v114;
  char *v115;
  char *v116;
  uint64_t v117;
  void (*v118)(char *, uint64_t);
  char *v119;
  uint64_t v120;
  char v121;
  char v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  char v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v133;
  char *v134;
  uint64_t v135;
  uint64_t v136;
  char *v137;
  char v138;
  char v139;
  uint64_t v140;
  void (*v141)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  void (*v148)(uint64_t, uint64_t);
  uint64_t v149;
  char *v150;
  uint64_t v151;
  uint64_t v152;
  void (*v153)(char *, char *, uint64_t);
  char *v154;
  char *v155;
  char *v156;
  char *v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  char *v164;
  uint64_t v165;
  char *v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  char *v172;
  uint64_t v173;
  char *v174;
  char *v175;
  char *v176;
  char *v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  char *v182;
  void (*v183)(char *, uint64_t, uint64_t);
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  char *v189;

  v184 = a2;
  v161 = type metadata accessor for Calendar.Component();
  v160 = *(_QWORD *)(v161 - 8);
  MEMORY[0x24BDAC7A8](v161);
  v159 = (uint64_t)&v152 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
  type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for Date.ComponentsFormatStyle.Field?, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE6C8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v6);
  v163 = (uint64_t)&v152 - v7;
  v158 = type metadata accessor for SystemFormatStyle.DateOffset();
  MEMORY[0x24BDAC7A8](v158);
  v173 = (uint64_t)&v152 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Range<Date>();
  v170 = *(_QWORD *)(v9 - 8);
  v171 = v9;
  MEMORY[0x24BDAC7A8](v9);
  v162 = (uint64_t)&v152 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v11);
  v168 = (uint64_t)&v152 - v12;
  type metadata accessor for Range<Date>?(0);
  MEMORY[0x24BDAC7A8](v13);
  v169 = (uint64_t)&v152 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v15);
  v172 = (char *)&v152 - v16;
  v17 = (void (*)(uint64_t))MEMORY[0x24BDCE760];
  type metadata accessor for (style: Date.ComponentsFormatStyle, largestField: Date.ComponentsFormatStyle.Field, smallestField: Date.ComponentsFormatStyle.Field)?(0, &lazy cache variable for type metadata for (style: Date.ComponentsFormatStyle, largestField: Date.ComponentsFormatStyle.Field, smallestField: Date.ComponentsFormatStyle.Field)?, (uint64_t)&lazy cache variable for type metadata for (style: Date.ComponentsFormatStyle, largestField: Date.ComponentsFormatStyle.Field, smallestField: Date.ComponentsFormatStyle.Field), (uint64_t)MEMORY[0x24BDCE760], (void (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for (style: Date.ComponentsFormatStyle, largestField: Date.ComponentsFormatStyle.Field, smallestField: Date.ComponentsFormatStyle.Field));
  MEMORY[0x24BDAC7A8](v18);
  v183 = (void (*)(char *, uint64_t, uint64_t))((char *)&v152 - v19);
  type metadata accessor for (Date.ComponentsFormatStyle, Date.ComponentsFormatStyle.Field, Date.ComponentsFormatStyle.Field)(0, &lazy cache variable for type metadata for (Date.ComponentsFormatStyle, Date.ComponentsFormatStyle.Field, Date.ComponentsFormatStyle.Field), v17);
  v167 = v20;
  MEMORY[0x24BDAC7A8](v20);
  v166 = (char *)&v152 - v21;
  v22 = type metadata accessor for Date.ComponentsFormatStyle.Field();
  v186 = *(_QWORD *)(v22 - 8);
  v187 = v22;
  MEMORY[0x24BDAC7A8](v22);
  v157 = (char *)&v152 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v24);
  v182 = (char *)&v152 - v25;
  v26 = type metadata accessor for Date.ComponentsFormatStyle();
  v178 = *(_QWORD *)(v26 - 8);
  v179 = v26;
  MEMORY[0x24BDAC7A8](v26);
  v177 = (char *)&v152 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v188 = type metadata accessor for Date();
  v185 = *(_QWORD *)(v188 - 8);
  MEMORY[0x24BDAC7A8](v188);
  v155 = (char *)&v152 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v29);
  v31 = (char *)&v152 - v30;
  type metadata accessor for Date?(0);
  MEMORY[0x24BDAC7A8](v32);
  v165 = (uint64_t)&v152 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v34);
  v156 = (char *)&v152 - v35;
  MEMORY[0x24BDAC7A8](v36);
  v174 = (char *)&v152 - v37;
  MEMORY[0x24BDAC7A8](v38);
  v175 = (char *)&v152 - v39;
  v40 = MEMORY[0x24BDD0960];
  type metadata accessor for (style: Date.ComponentsFormatStyle, largestField: Date.ComponentsFormatStyle.Field, smallestField: Date.ComponentsFormatStyle.Field)?(0, &lazy cache variable for type metadata for (style: Duration.UnitsFormatStyle.Attributed, largestField: Date.ComponentsFormatStyle.Field, smallestField: Date.ComponentsFormatStyle.Field)?, (uint64_t)&lazy cache variable for type metadata for (style: Duration.UnitsFormatStyle.Attributed, largestField: Date.ComponentsFormatStyle.Field, smallestField: Date.ComponentsFormatStyle.Field), (uint64_t)MEMORY[0x24BDD0960], (void (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for (style: Date.ComponentsFormatStyle, largestField: Date.ComponentsFormatStyle.Field, smallestField: Date.ComponentsFormatStyle.Field));
  MEMORY[0x24BDAC7A8](v41);
  v43 = (char *)&v152 - v42;
  type metadata accessor for (style: Date.ComponentsFormatStyle, largestField: Date.ComponentsFormatStyle.Field, smallestField: Date.ComponentsFormatStyle.Field)?(0, &lazy cache variable for type metadata for (Duration.UnitsFormatStyle.Attributed, Date.ComponentsFormatStyle.Field, Date.ComponentsFormatStyle.Field)?, (uint64_t)&lazy cache variable for type metadata for (Duration.UnitsFormatStyle.Attributed, Date.ComponentsFormatStyle.Field, Date.ComponentsFormatStyle.Field), (uint64_t)v40, (void (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for (Date.ComponentsFormatStyle, Date.ComponentsFormatStyle.Field, Date.ComponentsFormatStyle.Field));
  MEMORY[0x24BDAC7A8](v44);
  v46 = (char *)&v152 - v45;
  v47 = type metadata accessor for Duration.UnitsFormatStyle.Attributed();
  v180 = *(_QWORD *)(v47 - 8);
  v181 = v47;
  MEMORY[0x24BDAC7A8](v47);
  v164 = (char *)&v152 - ((v48 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for (style: Duration.TimeFormatStyle.Attributed, smallestField: Date.ComponentsFormatStyle.Field)?, (uint64_t (*)(uint64_t))type metadata accessor for (style: Duration.TimeFormatStyle.Attributed, smallestField: Date.ComponentsFormatStyle.Field), v5);
  MEMORY[0x24BDAC7A8](v49);
  v51 = (char *)&v152 - v50;
  type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for (Duration.TimeFormatStyle.Attributed, Date.ComponentsFormatStyle.Field)?, (uint64_t (*)(uint64_t))type metadata accessor for (Duration.TimeFormatStyle.Attributed, Date.ComponentsFormatStyle.Field), v5);
  MEMORY[0x24BDAC7A8](v52);
  v54 = (char *)&v152 - v53;
  v55 = type metadata accessor for Duration.TimeFormatStyle.Attributed();
  v56 = *(_QWORD *)(v55 - 8);
  MEMORY[0x24BDAC7A8](v55);
  v58 = (char *)&v152 - ((v57 + 15) & 0xFFFFFFFFFFFFFFF0);
  v189 = v2;
  if (SystemFormatStyle.DateOffset.canUseTimeStyle.getter())
  {
    v176 = (char *)a1;
    SystemFormatStyle.DateOffset.timeStyle(for:)(a1, (uint64_t)v51);
    type metadata accessor for (style: Duration.TimeFormatStyle.Attributed, smallestField: Date.ComponentsFormatStyle.Field)();
    v60 = v59;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v59 - 8) + 48))(v51, 1, v59) == 1)
    {
      outlined destroy of (style: Duration.TimeFormatStyle.Attributed, smallestField: Date.ComponentsFormatStyle.Field)?((uint64_t)v51, &lazy cache variable for type metadata for (style: Duration.TimeFormatStyle.Attributed, smallestField: Date.ComponentsFormatStyle.Field)?, (uint64_t (*)(uint64_t))type metadata accessor for (style: Duration.TimeFormatStyle.Attributed, smallestField: Date.ComponentsFormatStyle.Field));
      type metadata accessor for (Duration.TimeFormatStyle.Attributed, Date.ComponentsFormatStyle.Field)();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v61 - 8) + 56))(v54, 1, 1, v61);
    }
    else
    {
      v154 = &v51[*(int *)(v60 + 48)];
      type metadata accessor for (Duration.TimeFormatStyle.Attributed, Date.ComponentsFormatStyle.Field)();
      v63 = v62;
      v64 = v31;
      v65 = &v54[*(int *)(v62 + 48)];
      v153 = *(void (**)(char *, char *, uint64_t))(v56 + 32);
      v153(v54, v51, v55);
      v66 = v65;
      v31 = v64;
      (*(void (**)(char *, char *, uint64_t))(v186 + 32))(v66, v154, v187);
      v67 = *(_QWORD *)(v63 - 8);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v67 + 56))(v54, 0, 1, v63);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v67 + 48))(v54, 1, v63) != 1)
      {
        v137 = &v54[*(int *)(v63 + 48)];
        v153(v58, v54, v55);
        (*(void (**)(char *, uint64_t))(v186 + 8))(v137, v187);
        Date.timeIntervalSince(_:)();
        static Duration.seconds(_:)();
        Duration.TimeFormatStyle.Attributed.discreteInput(before:)();
        v122 = v138;
        (*(void (**)(char *, uint64_t))(v56 + 8))(v58, v55);
        v72 = v188;
        v73 = v185;
        goto LABEL_27;
      }
    }
    outlined destroy of (style: Duration.TimeFormatStyle.Attributed, smallestField: Date.ComponentsFormatStyle.Field)?((uint64_t)v54, &lazy cache variable for type metadata for (Duration.TimeFormatStyle.Attributed, Date.ComponentsFormatStyle.Field)?, (uint64_t (*)(uint64_t))type metadata accessor for (Duration.TimeFormatStyle.Attributed, Date.ComponentsFormatStyle.Field));
    a1 = (uint64_t)v176;
  }
  SystemFormatStyle.DateOffset.unitsStyle(for:)(a1, (uint64_t)v43);
  type metadata accessor for (style: Date.ComponentsFormatStyle, largestField: Date.ComponentsFormatStyle.Field, smallestField: Date.ComponentsFormatStyle.Field)(0, &lazy cache variable for type metadata for (style: Duration.UnitsFormatStyle.Attributed, largestField: Date.ComponentsFormatStyle.Field, smallestField: Date.ComponentsFormatStyle.Field), (void (*)(uint64_t))MEMORY[0x24BDD0960]);
  v69 = v68;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v68 - 8) + 48))(v43, 1, v68) == 1)
  {
    v70 = (void (*)(uint64_t))MEMORY[0x24BDD0960];
    outlined destroy of (style: Duration.UnitsFormatStyle.Attributed, largestField: Date.ComponentsFormatStyle.Field, smallestField: Date.ComponentsFormatStyle.Field)?((uint64_t)v43, &lazy cache variable for type metadata for (style: Duration.UnitsFormatStyle.Attributed, largestField: Date.ComponentsFormatStyle.Field, smallestField: Date.ComponentsFormatStyle.Field)?, (uint64_t)&lazy cache variable for type metadata for (style: Duration.UnitsFormatStyle.Attributed, largestField: Date.ComponentsFormatStyle.Field, smallestField: Date.ComponentsFormatStyle.Field), (uint64_t)MEMORY[0x24BDD0960], (void (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for (style: Date.ComponentsFormatStyle, largestField: Date.ComponentsFormatStyle.Field, smallestField: Date.ComponentsFormatStyle.Field));
    type metadata accessor for (Date.ComponentsFormatStyle, Date.ComponentsFormatStyle.Field, Date.ComponentsFormatStyle.Field)(0, &lazy cache variable for type metadata for (Duration.UnitsFormatStyle.Attributed, Date.ComponentsFormatStyle.Field, Date.ComponentsFormatStyle.Field), v70);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v71 - 8) + 56))(v46, 1, 1, v71);
    v72 = v188;
    v73 = v185;
    v74 = (uint64_t)v183;
    goto LABEL_9;
  }
  v176 = v31;
  v75 = &v43[*(int *)(v69 + 48)];
  v76 = &v43[*(int *)(v69 + 64)];
  type metadata accessor for (Date.ComponentsFormatStyle, Date.ComponentsFormatStyle.Field, Date.ComponentsFormatStyle.Field)(0, &lazy cache variable for type metadata for (Duration.UnitsFormatStyle.Attributed, Date.ComponentsFormatStyle.Field, Date.ComponentsFormatStyle.Field), (void (*)(uint64_t))MEMORY[0x24BDD0960]);
  v78 = v77;
  v79 = &v46[*(int *)(v77 + 48)];
  v80 = &v46[*(int *)(v77 + 64)];
  v81 = *(void (**)(char *, char *, uint64_t))(v180 + 32);
  v81(v46, v43, v181);
  v82 = *(void (**)(char *, char *, uint64_t))(v186 + 32);
  v83 = v75;
  v84 = v187;
  v82(v79, v83, v187);
  v82(v80, v76, v84);
  v85 = *(_QWORD *)(v78 - 8);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v85 + 56))(v46, 0, 1, v78);
  v86 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v85 + 48))(v46, 1, v78);
  v72 = v188;
  v73 = v185;
  v74 = (uint64_t)v183;
  if (v86 != 1)
  {
    v114 = &v46[*(int *)(v78 + 48)];
    v115 = &v46[*(int *)(v78 + 64)];
    v116 = v164;
    v117 = v181;
    v81(v164, v46, v181);
    v118 = *(void (**)(char *, uint64_t))(v186 + 8);
    v119 = v115;
    v120 = v187;
    v118(v119, v187);
    v118(v114, v120);
    Date.timeIntervalSince(_:)();
    static Duration.seconds(_:)();
    Duration.UnitsFormatStyle.Attributed.discreteInput(before:)();
    v122 = v121;
    (*(void (**)(char *, uint64_t))(v180 + 8))(v116, v117);
    v31 = v176;
LABEL_27:
    v139 = static Date.> infix(_:_:)();
    v140 = (uint64_t)v175;
    if ((v139 & 1) != 0)
    {
      (*(void (**)(char *, char *, uint64_t))(v73 + 16))(v175, v189, v72);
      v141 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v73 + 56);
      v141(v140, 0, 1, v72);
    }
    else
    {
      v141 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v73 + 56);
      v141((uint64_t)v175, 1, 1, v72);
    }
    if ((v122 & 1) == 0)
    {
      SystemFormatStyle.DateOffset.nextInputRoundingHigher(for:)((uint64_t)v31);
      v142 = v184;
      specialized max<A>(_:ifPresent:)(v31, v140, v184);
      (*(void (**)(char *, uint64_t))(v73 + 8))(v31, v72);
      outlined destroy of TypesettingConfiguration(v140, (uint64_t (*)(_QWORD))type metadata accessor for Date?);
      return ((uint64_t (*)(uint64_t, _QWORD, uint64_t, uint64_t))v141)(v142, 0, 1, v72);
    }
    v123 = v140;
    return outlined init with take of LocalizedStringKey.FormatArgument(v123, v184, (uint64_t (*)(_QWORD))type metadata accessor for Date?);
  }
LABEL_9:
  outlined destroy of (style: Duration.UnitsFormatStyle.Attributed, largestField: Date.ComponentsFormatStyle.Field, smallestField: Date.ComponentsFormatStyle.Field)?((uint64_t)v46, &lazy cache variable for type metadata for (Duration.UnitsFormatStyle.Attributed, Date.ComponentsFormatStyle.Field, Date.ComponentsFormatStyle.Field)?, (uint64_t)&lazy cache variable for type metadata for (Duration.UnitsFormatStyle.Attributed, Date.ComponentsFormatStyle.Field, Date.ComponentsFormatStyle.Field), (uint64_t)MEMORY[0x24BDD0960], (void (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for (Date.ComponentsFormatStyle, Date.ComponentsFormatStyle.Field, Date.ComponentsFormatStyle.Field));
  SystemFormatStyle.DateOffset.componentsStyle(for:)(a1, v74);
  type metadata accessor for (style: Date.ComponentsFormatStyle, largestField: Date.ComponentsFormatStyle.Field, smallestField: Date.ComponentsFormatStyle.Field)(0, &lazy cache variable for type metadata for (style: Date.ComponentsFormatStyle, largestField: Date.ComponentsFormatStyle.Field, smallestField: Date.ComponentsFormatStyle.Field), (void (*)(uint64_t))MEMORY[0x24BDCE760]);
  v88 = v87;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v87 - 8) + 48))(v74, 1, v87) == 1)
  {
    outlined destroy of (style: Duration.UnitsFormatStyle.Attributed, largestField: Date.ComponentsFormatStyle.Field, smallestField: Date.ComponentsFormatStyle.Field)?(v74, &lazy cache variable for type metadata for (style: Date.ComponentsFormatStyle, largestField: Date.ComponentsFormatStyle.Field, smallestField: Date.ComponentsFormatStyle.Field)?, (uint64_t)&lazy cache variable for type metadata for (style: Date.ComponentsFormatStyle, largestField: Date.ComponentsFormatStyle.Field, smallestField: Date.ComponentsFormatStyle.Field), (uint64_t)MEMORY[0x24BDCE760], (void (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for (style: Date.ComponentsFormatStyle, largestField: Date.ComponentsFormatStyle.Field, smallestField: Date.ComponentsFormatStyle.Field));
    if ((static Date.< infix(_:_:)() & 1) != 0)
    {
      v89 = v165;
      SystemFormatStyle.DateOffset.nextInputRoundingLower(for:)(v165);
    }
    else
    {
      Date.timeIntervalSinceReferenceDate.getter();
      v89 = v165;
      Date.init(timeIntervalSinceReferenceDate:)();
    }
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v73 + 56))(v89, 0, 1, v72);
    v123 = v89;
    return outlined init with take of LocalizedStringKey.FormatArgument(v123, v184, (uint64_t (*)(_QWORD))type metadata accessor for Date?);
  }
  v90 = v74 + *(int *)(v88 + 48);
  v91 = v74 + *(int *)(v88 + 64);
  v92 = v167;
  v93 = v166;
  v94 = &v166[*(int *)(v167 + 48)];
  v95 = &v166[*(int *)(v167 + 64)];
  v96 = *(void (**)(char *, uint64_t, uint64_t))(v178 + 32);
  v97 = v74;
  v98 = v179;
  v96(v166, v97, v179);
  v176 = (char *)a1;
  v99 = v186;
  v100 = *(void (**)(char *, uint64_t, uint64_t))(v186 + 32);
  v101 = v94;
  v102 = v187;
  v100(v101, v90, v187);
  v100(v95, v91, v102);
  v103 = &v93[*(int *)(v92 + 48)];
  v104 = &v93[*(int *)(v92 + 64)];
  v96(v177, (uint64_t)v93, v98);
  v183 = v100;
  v100(v182, (uint64_t)v103, v102);
  v105 = *(void (**)(char *, uint64_t))(v99 + 8);
  v105(v104, v102);
  v106 = v168;
  v107 = v189;
  SystemFormatStyle.DateOffset.dateRange(for:)((uint64_t)v176, v168);
  v108 = (uint64_t)v172;
  Date.ComponentsFormatStyle.discreteInput(before:)();
  outlined destroy of TypesettingConfiguration(v106, (uint64_t (*)(_QWORD))type metadata accessor for Range<Date>);
  v109 = v173;
  outlined init with copy of TypesettingLanguage((uint64_t)v107, v173, (uint64_t (*)(_QWORD))type metadata accessor for SystemFormatStyle.DateOffset);
  v110 = v169;
  outlined init with copy of TypesettingLanguage(v108, v169, (uint64_t (*)(_QWORD))type metadata accessor for Range<Date>?);
  v111 = v171;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v170 + 48))(v110, 1, v171) == 1)
  {
    v112 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v185 + 56);
    v113 = (uint64_t)v174;
    v112(v174, 1, 1, v188);
  }
  else
  {
    v124 = v110;
    v125 = v162;
    outlined init with take of LocalizedStringKey.FormatArgument(v124, v162, (uint64_t (*)(_QWORD))type metadata accessor for Range<Date>);
    v126 = static Date.== infix(_:_:)();
    v127 = v125;
    v113 = (uint64_t)v174;
    v128 = v185;
    if ((v126 & 1) != 0)
      v127 = v125 + *(int *)(v111 + 36);
    v129 = v188;
    (*(void (**)(char *, uint64_t, uint64_t))(v185 + 16))(v174, v127, v188);
    outlined destroy of TypesettingConfiguration(v125, (uint64_t (*)(_QWORD))type metadata accessor for Range<Date>);
    v112 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v128 + 56);
    v112((char *)v113, 0, 1, v129);
  }
  outlined destroy of TypesettingConfiguration(v108, (uint64_t (*)(_QWORD))type metadata accessor for Range<Date>?);
  outlined destroy of TypesettingConfiguration(v109, (uint64_t (*)(_QWORD))type metadata accessor for SystemFormatStyle.DateOffset);
  v130 = static Date.> infix(_:_:)();
  if ((v130 & 1) != 0)
  {
    v131 = v184;
    specialized max<A>(_:ifPresent:)(v189, v113, v184);
    outlined destroy of TypesettingConfiguration(v113, (uint64_t (*)(_QWORD))type metadata accessor for Date?);
    (*(void (**)(char *, uint64_t))(v178 + 8))(v177, v179);
    v105(v182, v102);
    return ((uint64_t (*)(uint64_t, _QWORD, uint64_t, uint64_t))v112)(v131, 0, 1, v188);
  }
  if (one-time initialization token for orderedFields != -1)
    v130 = swift_once();
  v133 = static Date.ComponentsFormatStyle.Field.orderedFields;
  MEMORY[0x24BDAC7A8](v130);
  v134 = v182;
  *(&v152 - 2) = (uint64_t)v189;
  *(&v152 - 1) = (uint64_t)v134;
  swift_bridgeObjectRetain();
  v135 = v163;
  specialized BidirectionalCollection.last(where:)((uint64_t (*)(uint64_t))partial apply for closure #1 in SystemFormatStyle.DateOffset.discreteInput(before:), v133, v163);
  swift_bridgeObjectRelease();
  v136 = v187;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v186 + 48))(v135, 1, v187) == 1)
  {
    (*(void (**)(char *, uint64_t))(v178 + 8))(v177, v179);
    v105(v134, v136);
    outlined destroy of (style: Duration.TimeFormatStyle.Attributed, smallestField: Date.ComponentsFormatStyle.Field)?(v135, &lazy cache variable for type metadata for Date.ComponentsFormatStyle.Field?, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE6C8]);
LABEL_35:
    v123 = v113;
    return outlined init with take of LocalizedStringKey.FormatArgument(v123, v184, (uint64_t (*)(_QWORD))type metadata accessor for Date?);
  }
  v143 = (uint64_t)v157;
  v183(v157, v135, v136);
  v144 = v159;
  SystemFormatStyle.DateOffset.component(for:)(v143, v159);
  v145 = (uint64_t)v156;
  Calendar.date(byAdding:value:to:wrappingComponents:)();
  (*(void (**)(uint64_t, uint64_t))(v160 + 8))(v144, v161);
  v146 = v185;
  v147 = v188;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v185 + 48))(v145, 1, v188) == 1)
  {
    v105((char *)v143, v136);
    (*(void (**)(char *, uint64_t))(v178 + 8))(v177, v179);
    v105(v182, v136);
    outlined destroy of TypesettingConfiguration(v145, (uint64_t (*)(_QWORD))type metadata accessor for Date?);
    goto LABEL_35;
  }
  v148 = (void (*)(uint64_t, uint64_t))v105;
  v149 = v147;
  v150 = v155;
  (*(void (**)(char *, uint64_t, uint64_t))(v146 + 32))(v155, v145, v147);
  v151 = v184;
  specialized max<A>(_:ifPresent:)(v150, v113, v184);
  (*(void (**)(char *, uint64_t))(v146 + 8))(v150, v149);
  v148(v143, v136);
  outlined destroy of TypesettingConfiguration(v113, (uint64_t (*)(_QWORD))type metadata accessor for Date?);
  (*(void (**)(char *, uint64_t))(v178 + 8))(v177, v179);
  v148((uint64_t)v182, v136);
  return ((uint64_t (*)(uint64_t, _QWORD, uint64_t, uint64_t))v112)(v151, 0, 1, v149);
}

uint64_t SystemFormatStyle.DateOffset.nextInputRoundingHigher(for:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  void (*v13)(char *, uint64_t);
  uint64_t v15;

  v2 = type metadata accessor for Date();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v15 - v7;
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v15 - v10;
  Duration.components.getter();
  Date.addingTimeInterval(_:)();
  Date.timeIntervalSince(_:)();
  static Duration.seconds(_:)();
  if ((static Duration.< infix(_:_:)() & 1) == 0)
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v3 + 32))(a1, v11, v2);
  Date.timeIntervalSinceReferenceDate.getter();
  Date.init(timeIntervalSinceReferenceDate:)();
  Date.timeIntervalSince(_:)();
  static Date.+ infix(_:_:)();
  lazy protocol witness table accessor for type Date and conformance Date();
  if ((dispatch thunk of static Comparable.>= infix(_:_:)() & 1) != 0)
    v12 = v5;
  else
    v12 = v8;
  (*(void (**)(uint64_t, char *, uint64_t))(v3 + 16))(a1, v12, v2);
  v13 = *(void (**)(char *, uint64_t))(v3 + 8);
  v13(v5, v2);
  v13(v8, v2);
  return ((uint64_t (*)(char *, uint64_t))v13)(v11, v2);
}

uint64_t SystemFormatStyle.DateOffset.nextInputRoundingLower(for:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  void (*v13)(char *, uint64_t);
  uint64_t v15;

  v2 = type metadata accessor for Date();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v15 - v7;
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v15 - v10;
  Duration.components.getter();
  Date.addingTimeInterval(_:)();
  Date.timeIntervalSince(_:)();
  static Duration.seconds(_:)();
  if ((static Duration.< infix(_:_:)() & 1) == 0)
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v3 + 32))(a1, v11, v2);
  Date.timeIntervalSinceReferenceDate.getter();
  Date.init(timeIntervalSinceReferenceDate:)();
  Date.timeIntervalSince(_:)();
  static Date.+ infix(_:_:)();
  lazy protocol witness table accessor for type Date and conformance Date();
  if ((dispatch thunk of static Comparable.< infix(_:_:)() & 1) != 0)
    v12 = v5;
  else
    v12 = v8;
  (*(void (**)(uint64_t, char *, uint64_t))(v3 + 16))(a1, v12, v2);
  v13 = *(void (**)(char *, uint64_t))(v3 + 8);
  v13(v5, v2);
  v13(v8, v2);
  return ((uint64_t (*)(char *, uint64_t))v13)(v11, v2);
}

uint64_t SystemFormatStyle.DateOffset.discreteInput(after:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  char *v2;
  uint64_t v4;
  uint64_t (*v5)(uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t (*v40)(void);
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  BOOL v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  void (*v68)(uint64_t);
  uint64_t v69;
  uint64_t v70;
  char *v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  char *v76;
  void (*v77)(char *, char *, uint64_t);
  uint64_t v78;
  void (*v79)(char *, char *, uint64_t);
  char *v80;
  uint64_t v81;
  uint64_t v82;
  int v83;
  char *v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  int v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  char *v93;
  char *v94;
  char *v95;
  uint64_t v96;
  void (*v97)(char *, char *, uint64_t);
  uint64_t v98;
  uint64_t v99;
  void (*v100)(char *, uint64_t, uint64_t);
  char *v101;
  char *v102;
  char *v103;
  void (*v104)(char *, uint64_t);
  char *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  void (*v112)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v113;
  char *v114;
  char *v115;
  char *v116;
  void (*v117)(char *, uint64_t);
  char *v118;
  uint64_t v119;
  char *v120;
  char v121;
  char v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  char v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v133;
  uint64_t v134;
  char *v135;
  uint64_t v136;
  char *v137;
  char v138;
  char v139;
  uint64_t v140;
  void (*v141)(uint64_t, uint64_t, uint64_t, uint64_t);
  char *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  char *v149;
  uint64_t v150;
  uint64_t v151;
  void (*v152)(char *, char *, uint64_t);
  char *v153;
  char *v154;
  char *v155;
  char *v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  char *v163;
  char *v164;
  uint64_t v165;
  char *v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  char *v172;
  uint64_t v173;
  char *v174;
  char *v175;
  char *v176;
  uint64_t v177;
  char *v178;
  char *v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  char *v188;

  v183 = a2;
  v160 = type metadata accessor for Calendar.Component();
  v159 = *(_QWORD *)(v160 - 8);
  MEMORY[0x24BDAC7A8](v160);
  v158 = (uint64_t)&v151 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
  type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for Date.ComponentsFormatStyle.Field?, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE6C8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v6);
  v162 = (uint64_t)&v151 - v7;
  v157 = type metadata accessor for SystemFormatStyle.DateOffset();
  MEMORY[0x24BDAC7A8](v157);
  v173 = (uint64_t)&v151 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Range<Date>();
  v170 = *(_QWORD *)(v9 - 8);
  v171 = v9;
  MEMORY[0x24BDAC7A8](v9);
  v161 = (uint64_t)&v151 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v11);
  v168 = (uint64_t)&v151 - v12;
  type metadata accessor for Range<Date>?(0);
  MEMORY[0x24BDAC7A8](v13);
  v169 = (uint64_t)&v151 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v15);
  v172 = (char *)&v151 - v16;
  v17 = (void (*)(uint64_t))MEMORY[0x24BDCE760];
  type metadata accessor for (style: Date.ComponentsFormatStyle, largestField: Date.ComponentsFormatStyle.Field, smallestField: Date.ComponentsFormatStyle.Field)?(0, &lazy cache variable for type metadata for (style: Date.ComponentsFormatStyle, largestField: Date.ComponentsFormatStyle.Field, smallestField: Date.ComponentsFormatStyle.Field)?, (uint64_t)&lazy cache variable for type metadata for (style: Date.ComponentsFormatStyle, largestField: Date.ComponentsFormatStyle.Field, smallestField: Date.ComponentsFormatStyle.Field), (uint64_t)MEMORY[0x24BDCE760], (void (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for (style: Date.ComponentsFormatStyle, largestField: Date.ComponentsFormatStyle.Field, smallestField: Date.ComponentsFormatStyle.Field));
  MEMORY[0x24BDAC7A8](v18);
  v178 = (char *)&v151 - v19;
  type metadata accessor for (Date.ComponentsFormatStyle, Date.ComponentsFormatStyle.Field, Date.ComponentsFormatStyle.Field)(0, &lazy cache variable for type metadata for (Date.ComponentsFormatStyle, Date.ComponentsFormatStyle.Field, Date.ComponentsFormatStyle.Field), v17);
  v167 = v20;
  MEMORY[0x24BDAC7A8](v20);
  v166 = (char *)&v151 - v21;
  v22 = type metadata accessor for Date.ComponentsFormatStyle.Field();
  v186 = *(_QWORD *)(v22 - 8);
  v187 = v22;
  MEMORY[0x24BDAC7A8](v22);
  v156 = (char *)&v151 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v24);
  v176 = (char *)&v151 - v25;
  v26 = type metadata accessor for Date.ComponentsFormatStyle();
  v180 = *(_QWORD *)(v26 - 8);
  v181 = v26;
  MEMORY[0x24BDAC7A8](v26);
  v179 = (char *)&v151 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = type metadata accessor for Date();
  v184 = *(_QWORD *)(v28 - 8);
  v185 = v28;
  MEMORY[0x24BDAC7A8](v28);
  v154 = (char *)&v151 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v30);
  v163 = (char *)&v151 - v31;
  type metadata accessor for Date?(0);
  MEMORY[0x24BDAC7A8](v32);
  v165 = (uint64_t)&v151 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v34);
  v155 = (char *)&v151 - v35;
  MEMORY[0x24BDAC7A8](v36);
  v174 = (char *)&v151 - v37;
  MEMORY[0x24BDAC7A8](v38);
  v175 = (char *)&v151 - v39;
  v40 = MEMORY[0x24BDD0960];
  type metadata accessor for (style: Date.ComponentsFormatStyle, largestField: Date.ComponentsFormatStyle.Field, smallestField: Date.ComponentsFormatStyle.Field)?(0, &lazy cache variable for type metadata for (style: Duration.UnitsFormatStyle.Attributed, largestField: Date.ComponentsFormatStyle.Field, smallestField: Date.ComponentsFormatStyle.Field)?, (uint64_t)&lazy cache variable for type metadata for (style: Duration.UnitsFormatStyle.Attributed, largestField: Date.ComponentsFormatStyle.Field, smallestField: Date.ComponentsFormatStyle.Field), (uint64_t)MEMORY[0x24BDD0960], (void (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for (style: Date.ComponentsFormatStyle, largestField: Date.ComponentsFormatStyle.Field, smallestField: Date.ComponentsFormatStyle.Field));
  MEMORY[0x24BDAC7A8](v41);
  v43 = (char *)&v151 - v42;
  type metadata accessor for (style: Date.ComponentsFormatStyle, largestField: Date.ComponentsFormatStyle.Field, smallestField: Date.ComponentsFormatStyle.Field)?(0, &lazy cache variable for type metadata for (Duration.UnitsFormatStyle.Attributed, Date.ComponentsFormatStyle.Field, Date.ComponentsFormatStyle.Field)?, (uint64_t)&lazy cache variable for type metadata for (Duration.UnitsFormatStyle.Attributed, Date.ComponentsFormatStyle.Field, Date.ComponentsFormatStyle.Field), (uint64_t)v40, (void (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for (Date.ComponentsFormatStyle, Date.ComponentsFormatStyle.Field, Date.ComponentsFormatStyle.Field));
  MEMORY[0x24BDAC7A8](v44);
  v46 = (char *)&v151 - v45;
  v177 = type metadata accessor for Duration.UnitsFormatStyle.Attributed();
  v182 = *(_QWORD *)(v177 - 8);
  MEMORY[0x24BDAC7A8](v177);
  v164 = (char *)&v151 - ((v47 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for (style: Duration.TimeFormatStyle.Attributed, smallestField: Date.ComponentsFormatStyle.Field)?, (uint64_t (*)(uint64_t))type metadata accessor for (style: Duration.TimeFormatStyle.Attributed, smallestField: Date.ComponentsFormatStyle.Field), v5);
  MEMORY[0x24BDAC7A8](v48);
  v50 = (char *)&v151 - v49;
  type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for (Duration.TimeFormatStyle.Attributed, Date.ComponentsFormatStyle.Field)?, (uint64_t (*)(uint64_t))type metadata accessor for (Duration.TimeFormatStyle.Attributed, Date.ComponentsFormatStyle.Field), v5);
  MEMORY[0x24BDAC7A8](v51);
  v53 = (char *)&v151 - v52;
  v54 = type metadata accessor for Duration.TimeFormatStyle.Attributed();
  v55 = *(_QWORD *)(v54 - 8);
  MEMORY[0x24BDAC7A8](v54);
  v57 = (char *)&v151 - ((v56 + 15) & 0xFFFFFFFFFFFFFFF0);
  v58 = SystemFormatStyle.DateOffset.canUseTimeStyle.getter();
  v188 = v2;
  if (v58)
  {
    SystemFormatStyle.DateOffset.timeStyle(for:)(a1, (uint64_t)v50);
    type metadata accessor for (style: Duration.TimeFormatStyle.Attributed, smallestField: Date.ComponentsFormatStyle.Field)();
    v60 = v59;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v59 - 8) + 48))(v50, 1, v59) == 1)
    {
      outlined destroy of (style: Duration.TimeFormatStyle.Attributed, smallestField: Date.ComponentsFormatStyle.Field)?((uint64_t)v50, &lazy cache variable for type metadata for (style: Duration.TimeFormatStyle.Attributed, smallestField: Date.ComponentsFormatStyle.Field)?, (uint64_t (*)(uint64_t))type metadata accessor for (style: Duration.TimeFormatStyle.Attributed, smallestField: Date.ComponentsFormatStyle.Field));
      type metadata accessor for (Duration.TimeFormatStyle.Attributed, Date.ComponentsFormatStyle.Field)();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v61 - 8) + 56))(v53, 1, 1, v61);
    }
    else
    {
      v153 = &v50[*(int *)(v60 + 48)];
      type metadata accessor for (Duration.TimeFormatStyle.Attributed, Date.ComponentsFormatStyle.Field)();
      v63 = v62;
      v64 = &v53[*(int *)(v62 + 48)];
      v152 = *(void (**)(char *, char *, uint64_t))(v55 + 32);
      v152(v53, v50, v54);
      (*(void (**)(char *, char *, uint64_t))(v186 + 32))(v64, v153, v187);
      v65 = *(_QWORD *)(v63 - 8);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v65 + 56))(v53, 0, 1, v63);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v65 + 48))(v53, 1, v63) != 1)
      {
        v137 = &v53[*(int *)(v63 + 48)];
        v152(v57, v53, v54);
        (*(void (**)(char *, uint64_t))(v186 + 8))(v137, v187);
        v120 = v188;
        Date.timeIntervalSince(_:)();
        static Duration.seconds(_:)();
        Duration.TimeFormatStyle.Attributed.discreteInput(after:)();
        v122 = v138;
        (*(void (**)(char *, uint64_t))(v55 + 8))(v57, v54);
        v70 = v184;
        v123 = v185;
        goto LABEL_27;
      }
    }
    outlined destroy of (style: Duration.TimeFormatStyle.Attributed, smallestField: Date.ComponentsFormatStyle.Field)?((uint64_t)v53, &lazy cache variable for type metadata for (Duration.TimeFormatStyle.Attributed, Date.ComponentsFormatStyle.Field)?, (uint64_t (*)(uint64_t))type metadata accessor for (Duration.TimeFormatStyle.Attributed, Date.ComponentsFormatStyle.Field));
  }
  SystemFormatStyle.DateOffset.unitsStyle(for:)(a1, (uint64_t)v43);
  type metadata accessor for (style: Date.ComponentsFormatStyle, largestField: Date.ComponentsFormatStyle.Field, smallestField: Date.ComponentsFormatStyle.Field)(0, &lazy cache variable for type metadata for (style: Duration.UnitsFormatStyle.Attributed, largestField: Date.ComponentsFormatStyle.Field, smallestField: Date.ComponentsFormatStyle.Field), (void (*)(uint64_t))MEMORY[0x24BDD0960]);
  v67 = v66;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v66 - 8) + 48))(v43, 1, v66) == 1)
  {
    v68 = (void (*)(uint64_t))MEMORY[0x24BDD0960];
    outlined destroy of (style: Duration.UnitsFormatStyle.Attributed, largestField: Date.ComponentsFormatStyle.Field, smallestField: Date.ComponentsFormatStyle.Field)?((uint64_t)v43, &lazy cache variable for type metadata for (style: Duration.UnitsFormatStyle.Attributed, largestField: Date.ComponentsFormatStyle.Field, smallestField: Date.ComponentsFormatStyle.Field)?, (uint64_t)&lazy cache variable for type metadata for (style: Duration.UnitsFormatStyle.Attributed, largestField: Date.ComponentsFormatStyle.Field, smallestField: Date.ComponentsFormatStyle.Field), (uint64_t)MEMORY[0x24BDD0960], (void (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for (style: Date.ComponentsFormatStyle, largestField: Date.ComponentsFormatStyle.Field, smallestField: Date.ComponentsFormatStyle.Field));
    type metadata accessor for (Date.ComponentsFormatStyle, Date.ComponentsFormatStyle.Field, Date.ComponentsFormatStyle.Field)(0, &lazy cache variable for type metadata for (Duration.UnitsFormatStyle.Attributed, Date.ComponentsFormatStyle.Field, Date.ComponentsFormatStyle.Field), v68);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v69 - 8) + 56))(v46, 1, 1, v69);
    v70 = v184;
    goto LABEL_9;
  }
  v71 = &v43[*(int *)(v67 + 48)];
  v72 = &v43[*(int *)(v67 + 64)];
  type metadata accessor for (Date.ComponentsFormatStyle, Date.ComponentsFormatStyle.Field, Date.ComponentsFormatStyle.Field)(0, &lazy cache variable for type metadata for (Duration.UnitsFormatStyle.Attributed, Date.ComponentsFormatStyle.Field, Date.ComponentsFormatStyle.Field), (void (*)(uint64_t))MEMORY[0x24BDD0960]);
  v74 = v73;
  v75 = &v46[*(int *)(v73 + 48)];
  v76 = &v46[*(int *)(v73 + 64)];
  v77 = *(void (**)(char *, char *, uint64_t))(v182 + 32);
  v78 = v177;
  v77(v46, v43, v177);
  v79 = *(void (**)(char *, char *, uint64_t))(v186 + 32);
  v80 = v75;
  v81 = v187;
  v79(v80, v71, v187);
  v79(v76, v72, v81);
  v82 = *(_QWORD *)(v74 - 8);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v82 + 56))(v46, 0, 1, v74);
  v83 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v82 + 48))(v46, 1, v74);
  v70 = v184;
  if (v83 != 1)
  {
    v114 = &v46[*(int *)(v74 + 48)];
    v115 = &v46[*(int *)(v74 + 64)];
    v116 = v164;
    v77(v164, v46, v78);
    v117 = *(void (**)(char *, uint64_t))(v186 + 8);
    v118 = v115;
    v119 = v187;
    v117(v118, v187);
    v117(v114, v119);
    v120 = v188;
    Date.timeIntervalSince(_:)();
    static Duration.seconds(_:)();
    Duration.UnitsFormatStyle.Attributed.discreteInput(after:)();
    v122 = v121;
    (*(void (**)(char *, uint64_t))(v182 + 8))(v116, v78);
    v123 = v185;
LABEL_27:
    v139 = static Date.< infix(_:_:)();
    v140 = (uint64_t)v175;
    if ((v139 & 1) != 0)
    {
      (*(void (**)(char *, char *, uint64_t))(v70 + 16))(v175, v120, v123);
      v141 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v70 + 56);
      v141(v140, 0, 1, v123);
    }
    else
    {
      v141 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v70 + 56);
      v141((uint64_t)v175, 1, 1, v123);
    }
    if ((v122 & 1) == 0)
    {
      v142 = v163;
      SystemFormatStyle.DateOffset.nextInputRoundingHigher(for:)((uint64_t)v163);
      v143 = v183;
      specialized min<A>(_:ifPresent:)(v142, v140, v183);
      (*(void (**)(char *, uint64_t))(v70 + 8))(v142, v123);
      outlined destroy of TypesettingConfiguration(v140, (uint64_t (*)(_QWORD))type metadata accessor for Date?);
      return ((uint64_t (*)(uint64_t, _QWORD, uint64_t, uint64_t))v141)(v143, 0, 1, v123);
    }
    v124 = v140;
    return outlined init with take of LocalizedStringKey.FormatArgument(v124, v183, (uint64_t (*)(_QWORD))type metadata accessor for Date?);
  }
LABEL_9:
  outlined destroy of (style: Duration.UnitsFormatStyle.Attributed, largestField: Date.ComponentsFormatStyle.Field, smallestField: Date.ComponentsFormatStyle.Field)?((uint64_t)v46, &lazy cache variable for type metadata for (Duration.UnitsFormatStyle.Attributed, Date.ComponentsFormatStyle.Field, Date.ComponentsFormatStyle.Field)?, (uint64_t)&lazy cache variable for type metadata for (Duration.UnitsFormatStyle.Attributed, Date.ComponentsFormatStyle.Field, Date.ComponentsFormatStyle.Field), (uint64_t)MEMORY[0x24BDD0960], (void (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for (Date.ComponentsFormatStyle, Date.ComponentsFormatStyle.Field, Date.ComponentsFormatStyle.Field));
  v84 = v178;
  v85 = v188;
  SystemFormatStyle.DateOffset.componentsStyle(for:)(a1, (uint64_t)v178);
  type metadata accessor for (style: Date.ComponentsFormatStyle, largestField: Date.ComponentsFormatStyle.Field, smallestField: Date.ComponentsFormatStyle.Field)(0, &lazy cache variable for type metadata for (style: Date.ComponentsFormatStyle, largestField: Date.ComponentsFormatStyle.Field, smallestField: Date.ComponentsFormatStyle.Field), (void (*)(uint64_t))MEMORY[0x24BDCE760]);
  v87 = v86;
  v88 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v86 - 8) + 48))(v84, 1, v86);
  v89 = v185;
  if (v88 == 1)
  {
    outlined destroy of (style: Duration.UnitsFormatStyle.Attributed, largestField: Date.ComponentsFormatStyle.Field, smallestField: Date.ComponentsFormatStyle.Field)?((uint64_t)v84, &lazy cache variable for type metadata for (style: Date.ComponentsFormatStyle, largestField: Date.ComponentsFormatStyle.Field, smallestField: Date.ComponentsFormatStyle.Field)?, (uint64_t)&lazy cache variable for type metadata for (style: Date.ComponentsFormatStyle, largestField: Date.ComponentsFormatStyle.Field, smallestField: Date.ComponentsFormatStyle.Field), (uint64_t)MEMORY[0x24BDCE760], (void (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for (style: Date.ComponentsFormatStyle, largestField: Date.ComponentsFormatStyle.Field, smallestField: Date.ComponentsFormatStyle.Field));
    if ((static Date.< infix(_:_:)() & 1) != 0)
    {
      v90 = v165;
      (*(void (**)(uint64_t, char *, uint64_t))(v70 + 16))(v165, v85, v89);
    }
    else
    {
      v90 = v165;
      SystemFormatStyle.DateOffset.nextInputRoundingHigher(for:)(v165);
    }
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v70 + 56))(v90, 0, 1, v89);
    v124 = v90;
    return outlined init with take of LocalizedStringKey.FormatArgument(v124, v183, (uint64_t (*)(_QWORD))type metadata accessor for Date?);
  }
  v177 = (uint64_t)&v84[*(int *)(v87 + 48)];
  v91 = &v84[*(int *)(v87 + 64)];
  v92 = v167;
  v93 = v166;
  v94 = &v166[*(int *)(v167 + 48)];
  v95 = &v166[*(int *)(v167 + 64)];
  v96 = v181;
  v97 = *(void (**)(char *, char *, uint64_t))(v180 + 32);
  v97(v166, v84, v181);
  v182 = a1;
  v98 = v186;
  v99 = v187;
  v100 = *(void (**)(char *, uint64_t, uint64_t))(v186 + 32);
  v100(v94, v177, v187);
  v100(v95, (uint64_t)v91, v99);
  v101 = &v93[*(int *)(v92 + 48)];
  v102 = &v93[*(int *)(v92 + 64)];
  v97(v179, v93, v96);
  v103 = v176;
  v178 = (char *)v100;
  v100(v176, (uint64_t)v101, v99);
  v104 = *(void (**)(char *, uint64_t))(v98 + 8);
  v105 = v188;
  v104(v102, v99);
  v106 = v168;
  SystemFormatStyle.DateOffset.dateRange(for:)(v182, v168);
  v107 = (uint64_t)v172;
  Date.ComponentsFormatStyle.discreteInput(after:)();
  outlined destroy of TypesettingConfiguration(v106, (uint64_t (*)(_QWORD))type metadata accessor for Range<Date>);
  v108 = v173;
  outlined init with copy of TypesettingLanguage((uint64_t)v105, v173, (uint64_t (*)(_QWORD))type metadata accessor for SystemFormatStyle.DateOffset);
  v109 = v169;
  outlined init with copy of TypesettingLanguage(v107, v169, (uint64_t (*)(_QWORD))type metadata accessor for Range<Date>?);
  v110 = v171;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v170 + 48))(v109, 1, v171) == 1)
  {
    v111 = v185;
    v112 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v184 + 56);
    v113 = (uint64_t)v174;
    v112(v174, 1, 1, v185);
  }
  else
  {
    v125 = v109;
    v126 = v161;
    outlined init with take of LocalizedStringKey.FormatArgument(v125, v161, (uint64_t (*)(_QWORD))type metadata accessor for Range<Date>);
    v127 = static Date.== infix(_:_:)();
    v128 = v126;
    v113 = (uint64_t)v174;
    v111 = v185;
    if ((v127 & 1) != 0)
      v128 = v126 + *(int *)(v110 + 36);
    v129 = v184;
    (*(void (**)(char *, uint64_t, uint64_t))(v184 + 16))(v174, v128, v185);
    outlined destroy of TypesettingConfiguration(v126, (uint64_t (*)(_QWORD))type metadata accessor for Range<Date>);
    v112 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v129 + 56);
    v112((char *)v113, 0, 1, v111);
  }
  outlined destroy of TypesettingConfiguration(v107, (uint64_t (*)(_QWORD))type metadata accessor for Range<Date>?);
  outlined destroy of TypesettingConfiguration(v108, (uint64_t (*)(_QWORD))type metadata accessor for SystemFormatStyle.DateOffset);
  v130 = static Date.< infix(_:_:)();
  if ((v130 & 1) != 0)
  {
    v131 = v183;
    specialized min<A>(_:ifPresent:)(v105, v113, v183);
    outlined destroy of TypesettingConfiguration(v113, (uint64_t (*)(_QWORD))type metadata accessor for Date?);
    (*(void (**)(char *, uint64_t))(v180 + 8))(v179, v181);
    v104(v103, v187);
    return ((uint64_t (*)(uint64_t, _QWORD, uint64_t, uint64_t))v112)(v131, 0, 1, v111);
  }
  if (one-time initialization token for orderedFields != -1)
    v130 = swift_once();
  v133 = static Date.ComponentsFormatStyle.Field.orderedFields;
  MEMORY[0x24BDAC7A8](v130);
  *(&v151 - 2) = (uint64_t)v105;
  *(&v151 - 1) = (uint64_t)v103;
  swift_bridgeObjectRetain();
  v134 = v162;
  v135 = v103;
  specialized BidirectionalCollection.last(where:)((uint64_t (*)(uint64_t))partial apply for closure #1 in SystemFormatStyle.DateOffset.discreteInput(after:), v133, v162);
  swift_bridgeObjectRelease();
  v136 = v187;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v186 + 48))(v134, 1, v187) == 1)
  {
    (*(void (**)(char *, uint64_t))(v180 + 8))(v179, v181);
    v104(v135, v136);
    outlined destroy of (style: Duration.TimeFormatStyle.Attributed, smallestField: Date.ComponentsFormatStyle.Field)?(v134, &lazy cache variable for type metadata for Date.ComponentsFormatStyle.Field?, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE6C8]);
LABEL_35:
    v124 = v113;
    return outlined init with take of LocalizedStringKey.FormatArgument(v124, v183, (uint64_t (*)(_QWORD))type metadata accessor for Date?);
  }
  v144 = (uint64_t)v156;
  ((void (*)(char *, uint64_t, uint64_t))v178)(v156, v134, v136);
  v145 = v158;
  SystemFormatStyle.DateOffset.component(for:)(v144, v158);
  v146 = (uint64_t)v155;
  Calendar.date(byAdding:value:to:wrappingComponents:)();
  (*(void (**)(uint64_t, uint64_t))(v159 + 8))(v145, v160);
  v147 = v184;
  v148 = v185;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v184 + 48))(v146, 1, v185) == 1)
  {
    v104((char *)v144, v136);
    (*(void (**)(char *, uint64_t))(v180 + 8))(v179, v181);
    v104(v176, v136);
    outlined destroy of TypesettingConfiguration(v146, (uint64_t (*)(_QWORD))type metadata accessor for Date?);
    goto LABEL_35;
  }
  v149 = v154;
  (*(void (**)(char *, uint64_t, uint64_t))(v147 + 32))(v154, v146, v148);
  v150 = v183;
  specialized min<A>(_:ifPresent:)(v149, v113, v183);
  (*(void (**)(char *, uint64_t))(v147 + 8))(v149, v148);
  v104((char *)v144, v136);
  outlined destroy of TypesettingConfiguration(v113, (uint64_t (*)(_QWORD))type metadata accessor for Date?);
  (*(void (**)(char *, uint64_t))(v180 + 8))(v179, v181);
  v104(v176, v136);
  return ((uint64_t (*)(uint64_t, _QWORD, uint64_t, uint64_t))v112)(v150, 0, 1, v148);
}

BOOL closure #1 in SystemFormatStyle.DateOffset.discreteInput(before:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  void (*v14)(char *, uint64_t, uint64_t);
  double v15;
  __n128 v16;
  _BOOL8 v17;
  void (*v18)(char *, uint64_t, __n128);
  void (*v19)(char *, uint64_t);
  double v21;
  double v22;

  v6 = type metadata accessor for Date.ComponentsFormatStyle.Field();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v21 - v11;
  v13 = type metadata accessor for SystemFormatStyle.DateOffset();
  LOBYTE(a2) = specialized Set.contains(_:)(a1, *(_QWORD *)(a2 + *(int *)(v13 + 20)));
  v14 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 16);
  v14(v12, a1, v6);
  v14(v9, a3, v6);
  if ((a2 & 1) != 0)
  {
    Date.ComponentsFormatStyle.Field.magnitude.getter(&v22);
    v15 = v22;
    Date.ComponentsFormatStyle.Field.magnitude.getter(&v21);
    v16.n128_f64[0] = v21;
    v17 = v21 < v15;
    v18 = *(void (**)(char *, uint64_t, __n128))(v7 + 8);
    v18(v9, v6, v16);
    ((void (*)(char *, uint64_t))v18)(v12, v6);
  }
  else
  {
    v19 = *(void (**)(char *, uint64_t))(v7 + 8);
    v19(v9, v6);
    v19(v12, v6);
    return 0;
  }
  return v17;
}

uint64_t SystemFormatStyle.DateOffset.input(before:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(void);
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t (*v26)(uint64_t, uint64_t);
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  unsigned int (*v48)(char *, uint64_t, uint64_t);
  uint64_t v49;
  uint64_t v50;
  void (*v51)(uint64_t);
  uint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  void (*v62)(char *, char *, uint64_t);
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t (*v70)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  char *v75;
  char *v76;
  void (*v77)(char *, uint64_t, uint64_t);
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  void (*v82)(char *, uint64_t, uint64_t);
  char *v83;
  char *v84;
  char *v85;
  char *v86;
  uint64_t v87;
  void (*v88)(char *, uint64_t);
  uint64_t v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  char v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  char *v100;
  char *v101;
  char *v102;
  uint64_t v103;
  void (*v104)(char *, uint64_t);
  char v105;
  char v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  char *v110;
  char v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  void (*v119)(char *, char *, uint64_t);
  char *v120;
  void (*v121)(char *, char *, uint64_t);
  uint64_t v122;
  char *v123;
  char *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  char *v128;
  char *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;

  v3 = v2;
  v136 = a2;
  type metadata accessor for Range<Date>?(0);
  MEMORY[0x24BDAC7A8](v5);
  v129 = (char *)&v118 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Range<Date>();
  v130 = v7;
  v127 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v126 = (uint64_t)&v118 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9);
  v122 = (uint64_t)&v118 - v10;
  v11 = (void (*)(uint64_t))MEMORY[0x24BDCE760];
  type metadata accessor for (style: Date.ComponentsFormatStyle, largestField: Date.ComponentsFormatStyle.Field, smallestField: Date.ComponentsFormatStyle.Field)?(0, &lazy cache variable for type metadata for (style: Date.ComponentsFormatStyle, largestField: Date.ComponentsFormatStyle.Field, smallestField: Date.ComponentsFormatStyle.Field)?, (uint64_t)&lazy cache variable for type metadata for (style: Date.ComponentsFormatStyle, largestField: Date.ComponentsFormatStyle.Field, smallestField: Date.ComponentsFormatStyle.Field), (uint64_t)MEMORY[0x24BDCE760], (void (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for (style: Date.ComponentsFormatStyle, largestField: Date.ComponentsFormatStyle.Field, smallestField: Date.ComponentsFormatStyle.Field));
  MEMORY[0x24BDAC7A8](v12);
  v132 = (uint64_t)&v118 - v13;
  type metadata accessor for (Date.ComponentsFormatStyle, Date.ComponentsFormatStyle.Field, Date.ComponentsFormatStyle.Field)(0, &lazy cache variable for type metadata for (Date.ComponentsFormatStyle, Date.ComponentsFormatStyle.Field, Date.ComponentsFormatStyle.Field), v11);
  v125 = v14;
  MEMORY[0x24BDAC7A8](v14);
  v124 = (char *)&v118 - v15;
  v131 = type metadata accessor for Date.ComponentsFormatStyle();
  v133 = *(_QWORD *)(v131 - 8);
  MEMORY[0x24BDAC7A8](v131);
  v128 = (char *)&v118 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = MEMORY[0x24BDD0960];
  type metadata accessor for (style: Date.ComponentsFormatStyle, largestField: Date.ComponentsFormatStyle.Field, smallestField: Date.ComponentsFormatStyle.Field)?(0, &lazy cache variable for type metadata for (style: Duration.UnitsFormatStyle.Attributed, largestField: Date.ComponentsFormatStyle.Field, smallestField: Date.ComponentsFormatStyle.Field)?, (uint64_t)&lazy cache variable for type metadata for (style: Duration.UnitsFormatStyle.Attributed, largestField: Date.ComponentsFormatStyle.Field, smallestField: Date.ComponentsFormatStyle.Field), (uint64_t)MEMORY[0x24BDD0960], (void (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for (style: Date.ComponentsFormatStyle, largestField: Date.ComponentsFormatStyle.Field, smallestField: Date.ComponentsFormatStyle.Field));
  MEMORY[0x24BDAC7A8](v18);
  v20 = (char *)&v118 - v19;
  type metadata accessor for (style: Date.ComponentsFormatStyle, largestField: Date.ComponentsFormatStyle.Field, smallestField: Date.ComponentsFormatStyle.Field)?(0, &lazy cache variable for type metadata for (Duration.UnitsFormatStyle.Attributed, Date.ComponentsFormatStyle.Field, Date.ComponentsFormatStyle.Field)?, (uint64_t)&lazy cache variable for type metadata for (Duration.UnitsFormatStyle.Attributed, Date.ComponentsFormatStyle.Field, Date.ComponentsFormatStyle.Field), (uint64_t)v17, (void (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for (Date.ComponentsFormatStyle, Date.ComponentsFormatStyle.Field, Date.ComponentsFormatStyle.Field));
  MEMORY[0x24BDAC7A8](v21);
  v23 = (char *)&v118 - v22;
  v24 = type metadata accessor for Duration.UnitsFormatStyle.Attributed();
  v134 = *(_QWORD *)(v24 - 8);
  v135 = v24;
  MEMORY[0x24BDAC7A8](v24);
  v123 = (char *)&v118 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
  type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for (style: Duration.TimeFormatStyle.Attributed, smallestField: Date.ComponentsFormatStyle.Field)?, (uint64_t (*)(uint64_t))type metadata accessor for (style: Duration.TimeFormatStyle.Attributed, smallestField: Date.ComponentsFormatStyle.Field), (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v27);
  v29 = (char *)&v118 - v28;
  type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for (Duration.TimeFormatStyle.Attributed, Date.ComponentsFormatStyle.Field)?, (uint64_t (*)(uint64_t))type metadata accessor for (Duration.TimeFormatStyle.Attributed, Date.ComponentsFormatStyle.Field), v26);
  MEMORY[0x24BDAC7A8](v30);
  v32 = (char *)&v118 - v31;
  v33 = type metadata accessor for Duration.TimeFormatStyle.Attributed();
  v34 = *(_QWORD *)(v33 - 8);
  MEMORY[0x24BDAC7A8](v33);
  v36 = (char *)&v118 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (SystemFormatStyle.DateOffset.canUseTimeStyle.getter())
  {
    SystemFormatStyle.DateOffset.timeStyle(for:)(a1, (uint64_t)v29);
    type metadata accessor for (style: Duration.TimeFormatStyle.Attributed, smallestField: Date.ComponentsFormatStyle.Field)();
    v38 = v37;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v37 - 8) + 48))(v29, 1, v37) == 1)
    {
      outlined destroy of (style: Duration.TimeFormatStyle.Attributed, smallestField: Date.ComponentsFormatStyle.Field)?((uint64_t)v29, &lazy cache variable for type metadata for (style: Duration.TimeFormatStyle.Attributed, smallestField: Date.ComponentsFormatStyle.Field)?, (uint64_t (*)(uint64_t))type metadata accessor for (style: Duration.TimeFormatStyle.Attributed, smallestField: Date.ComponentsFormatStyle.Field));
      type metadata accessor for (Duration.TimeFormatStyle.Attributed, Date.ComponentsFormatStyle.Field)();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v39 - 8) + 56))(v32, 1, 1, v39);
    }
    else
    {
      v120 = &v29[*(int *)(v38 + 48)];
      type metadata accessor for (Duration.TimeFormatStyle.Attributed, Date.ComponentsFormatStyle.Field)();
      v41 = v40;
      v42 = *(int *)(v40 + 48);
      v121 = (void (*)(char *, char *, uint64_t))a1;
      v43 = v3;
      v44 = &v32[v42];
      v119 = *(void (**)(char *, char *, uint64_t))(v34 + 32);
      v119(v32, v29, v33);
      v45 = type metadata accessor for Date.ComponentsFormatStyle.Field();
      v118 = *(_QWORD *)(v45 - 8);
      v46 = v44;
      v3 = v43;
      (*(void (**)(char *, char *, uint64_t))(v118 + 32))(v46, v120, v45);
      v47 = *(_QWORD *)(v41 - 8);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v47 + 56))(v32, 0, 1, v41);
      v48 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v47 + 48);
      a1 = (uint64_t)v121;
      if (v48(v32, 1, v41) != 1)
      {
        v110 = &v32[*(int *)(v41 + 48)];
        v119(v36, v32, v33);
        (*(void (**)(char *, uint64_t))(v118 + 8))(v110, v45);
        Date.timeIntervalSince(_:)();
        static Duration.seconds(_:)();
        lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type Duration.TimeFormatStyle.Attributed and conformance Duration.TimeFormatStyle.Attributed, (uint64_t (*)(uint64_t))MEMORY[0x24BDD0850], MEMORY[0x24BDD0848]);
        DiscreteFormatStyle<>.input(before:)();
        v106 = v111;
        (*(void (**)(char *, uint64_t))(v34 + 8))(v36, v33);
        goto LABEL_18;
      }
    }
    outlined destroy of (style: Duration.TimeFormatStyle.Attributed, smallestField: Date.ComponentsFormatStyle.Field)?((uint64_t)v32, &lazy cache variable for type metadata for (Duration.TimeFormatStyle.Attributed, Date.ComponentsFormatStyle.Field)?, (uint64_t (*)(uint64_t))type metadata accessor for (Duration.TimeFormatStyle.Attributed, Date.ComponentsFormatStyle.Field));
  }
  SystemFormatStyle.DateOffset.unitsStyle(for:)(a1, (uint64_t)v20);
  type metadata accessor for (style: Date.ComponentsFormatStyle, largestField: Date.ComponentsFormatStyle.Field, smallestField: Date.ComponentsFormatStyle.Field)(0, &lazy cache variable for type metadata for (style: Duration.UnitsFormatStyle.Attributed, largestField: Date.ComponentsFormatStyle.Field, smallestField: Date.ComponentsFormatStyle.Field), (void (*)(uint64_t))MEMORY[0x24BDD0960]);
  v50 = v49;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v49 - 8) + 48))(v20, 1, v49) == 1)
  {
    v51 = (void (*)(uint64_t))MEMORY[0x24BDD0960];
    outlined destroy of (style: Duration.UnitsFormatStyle.Attributed, largestField: Date.ComponentsFormatStyle.Field, smallestField: Date.ComponentsFormatStyle.Field)?((uint64_t)v20, &lazy cache variable for type metadata for (style: Duration.UnitsFormatStyle.Attributed, largestField: Date.ComponentsFormatStyle.Field, smallestField: Date.ComponentsFormatStyle.Field)?, (uint64_t)&lazy cache variable for type metadata for (style: Duration.UnitsFormatStyle.Attributed, largestField: Date.ComponentsFormatStyle.Field, smallestField: Date.ComponentsFormatStyle.Field), (uint64_t)MEMORY[0x24BDD0960], (void (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for (style: Date.ComponentsFormatStyle, largestField: Date.ComponentsFormatStyle.Field, smallestField: Date.ComponentsFormatStyle.Field));
    type metadata accessor for (Date.ComponentsFormatStyle, Date.ComponentsFormatStyle.Field, Date.ComponentsFormatStyle.Field)(0, &lazy cache variable for type metadata for (Duration.UnitsFormatStyle.Attributed, Date.ComponentsFormatStyle.Field, Date.ComponentsFormatStyle.Field), v51);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v52 - 8) + 56))(v23, 1, 1, v52);
    goto LABEL_9;
  }
  v53 = &v20[*(int *)(v50 + 48)];
  v54 = &v20[*(int *)(v50 + 64)];
  type metadata accessor for (Date.ComponentsFormatStyle, Date.ComponentsFormatStyle.Field, Date.ComponentsFormatStyle.Field)(0, &lazy cache variable for type metadata for (Duration.UnitsFormatStyle.Attributed, Date.ComponentsFormatStyle.Field, Date.ComponentsFormatStyle.Field), (void (*)(uint64_t))MEMORY[0x24BDD0960]);
  v56 = v55;
  v57 = &v23[*(int *)(v55 + 48)];
  v58 = a1;
  v59 = v3;
  v60 = &v23[*(int *)(v55 + 64)];
  v121 = *(void (**)(char *, char *, uint64_t))(v134 + 32);
  v121(v23, v20, v135);
  v61 = type metadata accessor for Date.ComponentsFormatStyle.Field();
  v120 = *(char **)(v61 - 8);
  v62 = (void (*)(char *, char *, uint64_t))*((_QWORD *)v120 + 4);
  v62(v57, v53, v61);
  v63 = v60;
  v3 = v59;
  a1 = v58;
  v62(v63, v54, v61);
  v64 = *(_QWORD *)(v56 - 8);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v64 + 56))(v23, 0, 1, v56);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v64 + 48))(v23, 1, v56) != 1)
  {
    v99 = &v23[*(int *)(v56 + 48)];
    v100 = &v23[*(int *)(v56 + 64)];
    v101 = v123;
    v102 = v23;
    v103 = v135;
    v121(v123, v102, v135);
    v104 = (void (*)(char *, uint64_t))*((_QWORD *)v120 + 1);
    v104(v100, v61);
    v104(v99, v61);
    Date.timeIntervalSince(_:)();
    static Duration.seconds(_:)();
    lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.Attributed and conformance Duration.UnitsFormatStyle.Attributed, (uint64_t (*)(uint64_t))MEMORY[0x24BDD0960], MEMORY[0x24BDD0950]);
    DiscreteFormatStyle<>.input(before:)();
    v106 = v105;
    (*(void (**)(char *, uint64_t))(v134 + 8))(v101, v103);
LABEL_18:
    v112 = v136;
    if ((v106 & 1) != 0)
    {
      v114 = type metadata accessor for Date();
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v114 - 8) + 56))(v112, 1, 1, v114);
    }
    SystemFormatStyle.DateOffset.nextInputRoundingLower(for:)(v136);
    v69 = type metadata accessor for Date();
    v70 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v69 - 8) + 56);
    v71 = v112;
    goto LABEL_20;
  }
LABEL_9:
  outlined destroy of (style: Duration.UnitsFormatStyle.Attributed, largestField: Date.ComponentsFormatStyle.Field, smallestField: Date.ComponentsFormatStyle.Field)?((uint64_t)v23, &lazy cache variable for type metadata for (Duration.UnitsFormatStyle.Attributed, Date.ComponentsFormatStyle.Field, Date.ComponentsFormatStyle.Field)?, (uint64_t)&lazy cache variable for type metadata for (Duration.UnitsFormatStyle.Attributed, Date.ComponentsFormatStyle.Field, Date.ComponentsFormatStyle.Field), (uint64_t)MEMORY[0x24BDD0960], (void (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for (Date.ComponentsFormatStyle, Date.ComponentsFormatStyle.Field, Date.ComponentsFormatStyle.Field));
  v65 = v132;
  SystemFormatStyle.DateOffset.componentsStyle(for:)(a1, v132);
  type metadata accessor for (style: Date.ComponentsFormatStyle, largestField: Date.ComponentsFormatStyle.Field, smallestField: Date.ComponentsFormatStyle.Field)(0, &lazy cache variable for type metadata for (style: Date.ComponentsFormatStyle, largestField: Date.ComponentsFormatStyle.Field, smallestField: Date.ComponentsFormatStyle.Field), (void (*)(uint64_t))MEMORY[0x24BDCE760]);
  v67 = v66;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v66 - 8) + 48))(v65, 1, v66) != 1)
  {
    v72 = v65 + *(int *)(v67 + 48);
    v134 = v65 + *(int *)(v67 + 64);
    v73 = v124;
    v74 = v125;
    v75 = &v124[*(int *)(v125 + 48)];
    v76 = &v124[*(int *)(v125 + 64)];
    v77 = *(void (**)(char *, uint64_t, uint64_t))(v133 + 32);
    v78 = v131;
    v77(v124, v65, v131);
    v79 = type metadata accessor for Date.ComponentsFormatStyle.Field();
    v121 = (void (*)(char *, char *, uint64_t))a1;
    v80 = v79;
    v135 = v3;
    v81 = *(_QWORD *)(v79 - 8);
    v82 = *(void (**)(char *, uint64_t, uint64_t))(v81 + 32);
    v82(v75, v72, v79);
    v82(v76, v134, v80);
    v83 = &v73[*(int *)(v74 + 48)];
    v84 = &v73[*(int *)(v74 + 64)];
    v85 = v128;
    v86 = v73;
    v87 = v78;
    v77(v128, (uint64_t)v86, v78);
    v88 = *(void (**)(char *, uint64_t))(v81 + 8);
    v89 = v135;
    v88(v84, v80);
    v90 = v83;
    v91 = (uint64_t)v121;
    v88(v90, v80);
    v92 = v126;
    SystemFormatStyle.DateOffset.dateRange(for:)(v91, v126);
    v93 = (uint64_t)v129;
    Date.ComponentsFormatStyle.input(before:)();
    outlined destroy of TypesettingConfiguration(v92, (uint64_t (*)(_QWORD))type metadata accessor for Range<Date>);
    v94 = v130;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v127 + 48))(v93, 1, v130) == 1)
    {
      outlined destroy of TypesettingConfiguration(v93, (uint64_t (*)(_QWORD))type metadata accessor for Range<Date>?);
      v95 = static Date.< infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v133 + 8))(v85, v87);
      v96 = type metadata accessor for Date();
      v97 = *(_QWORD *)(v96 - 8);
      if ((v95 & 1) == 0)
      {
        v70 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v97 + 56);
        v71 = v136;
        v113 = 1;
LABEL_26:
        v69 = v96;
        return v70(v71, v113, 1, v69);
      }
      v98 = v136;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v97 + 16))(v136, v89, v96);
      v70 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v97 + 56);
      v71 = v98;
    }
    else
    {
      v107 = v122;
      outlined init with take of LocalizedStringKey.FormatArgument(v93, v122, (uint64_t (*)(_QWORD))type metadata accessor for Range<Date>);
      if ((static Date.== infix(_:_:)() & 1) != 0)
      {
        v108 = v107 + *(int *)(v94 + 36);
        v96 = type metadata accessor for Date();
        v109 = v136;
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v96 - 8) + 16))(v136, v108, v96);
      }
      else
      {
        v96 = type metadata accessor for Date();
        v109 = v136;
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v96 - 8) + 16))(v136, v107, v96);
      }
      v116 = v131;
      v117 = v133;
      outlined destroy of TypesettingConfiguration(v107, (uint64_t (*)(_QWORD))type metadata accessor for Range<Date>);
      (*(void (**)(char *, uint64_t))(v117 + 8))(v85, v116);
      type metadata accessor for Date();
      v70 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v96 - 8) + 56);
      v71 = v109;
    }
    v113 = 0;
    goto LABEL_26;
  }
  outlined destroy of (style: Duration.UnitsFormatStyle.Attributed, largestField: Date.ComponentsFormatStyle.Field, smallestField: Date.ComponentsFormatStyle.Field)?(v65, &lazy cache variable for type metadata for (style: Date.ComponentsFormatStyle, largestField: Date.ComponentsFormatStyle.Field, smallestField: Date.ComponentsFormatStyle.Field)?, (uint64_t)&lazy cache variable for type metadata for (style: Date.ComponentsFormatStyle, largestField: Date.ComponentsFormatStyle.Field, smallestField: Date.ComponentsFormatStyle.Field), (uint64_t)MEMORY[0x24BDCE760], (void (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for (style: Date.ComponentsFormatStyle, largestField: Date.ComponentsFormatStyle.Field, smallestField: Date.ComponentsFormatStyle.Field));
  Date.timeIntervalSinceReferenceDate.getter();
  v68 = v136;
  Date.init(timeIntervalSinceReferenceDate:)();
  v69 = type metadata accessor for Date();
  v70 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v69 - 8) + 56);
  v71 = v68;
LABEL_20:
  v113 = 0;
  return v70(v71, v113, 1, v69);
}

uint64_t SystemFormatStyle.DateOffset.input(after:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(void);
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t (*v26)(uint64_t, uint64_t);
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  unsigned int (*v48)(char *, uint64_t, uint64_t);
  uint64_t v49;
  uint64_t v50;
  void (*v51)(uint64_t);
  uint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  void (*v62)(char *, char *, uint64_t);
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t (*v70)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  char *v75;
  char *v76;
  void (*v77)(char *, uint64_t, uint64_t);
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  void (*v82)(char *, uint64_t, uint64_t);
  char *v83;
  char *v84;
  char *v85;
  char *v86;
  uint64_t v87;
  void (*v88)(char *, uint64_t);
  uint64_t v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  char v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  char *v100;
  char *v101;
  char *v102;
  uint64_t v103;
  void (*v104)(char *, uint64_t);
  char v105;
  char v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  char *v110;
  char v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  void (*v119)(char *, char *, uint64_t);
  char *v120;
  void (*v121)(char *, char *, uint64_t);
  uint64_t v122;
  char *v123;
  char *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  char *v128;
  char *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;

  v3 = v2;
  v136 = a2;
  type metadata accessor for Range<Date>?(0);
  MEMORY[0x24BDAC7A8](v5);
  v129 = (char *)&v118 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Range<Date>();
  v130 = v7;
  v127 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v126 = (uint64_t)&v118 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9);
  v122 = (uint64_t)&v118 - v10;
  v11 = (void (*)(uint64_t))MEMORY[0x24BDCE760];
  type metadata accessor for (style: Date.ComponentsFormatStyle, largestField: Date.ComponentsFormatStyle.Field, smallestField: Date.ComponentsFormatStyle.Field)?(0, &lazy cache variable for type metadata for (style: Date.ComponentsFormatStyle, largestField: Date.ComponentsFormatStyle.Field, smallestField: Date.ComponentsFormatStyle.Field)?, (uint64_t)&lazy cache variable for type metadata for (style: Date.ComponentsFormatStyle, largestField: Date.ComponentsFormatStyle.Field, smallestField: Date.ComponentsFormatStyle.Field), (uint64_t)MEMORY[0x24BDCE760], (void (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for (style: Date.ComponentsFormatStyle, largestField: Date.ComponentsFormatStyle.Field, smallestField: Date.ComponentsFormatStyle.Field));
  MEMORY[0x24BDAC7A8](v12);
  v132 = (uint64_t)&v118 - v13;
  type metadata accessor for (Date.ComponentsFormatStyle, Date.ComponentsFormatStyle.Field, Date.ComponentsFormatStyle.Field)(0, &lazy cache variable for type metadata for (Date.ComponentsFormatStyle, Date.ComponentsFormatStyle.Field, Date.ComponentsFormatStyle.Field), v11);
  v125 = v14;
  MEMORY[0x24BDAC7A8](v14);
  v124 = (char *)&v118 - v15;
  v131 = type metadata accessor for Date.ComponentsFormatStyle();
  v133 = *(_QWORD *)(v131 - 8);
  MEMORY[0x24BDAC7A8](v131);
  v128 = (char *)&v118 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = MEMORY[0x24BDD0960];
  type metadata accessor for (style: Date.ComponentsFormatStyle, largestField: Date.ComponentsFormatStyle.Field, smallestField: Date.ComponentsFormatStyle.Field)?(0, &lazy cache variable for type metadata for (style: Duration.UnitsFormatStyle.Attributed, largestField: Date.ComponentsFormatStyle.Field, smallestField: Date.ComponentsFormatStyle.Field)?, (uint64_t)&lazy cache variable for type metadata for (style: Duration.UnitsFormatStyle.Attributed, largestField: Date.ComponentsFormatStyle.Field, smallestField: Date.ComponentsFormatStyle.Field), (uint64_t)MEMORY[0x24BDD0960], (void (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for (style: Date.ComponentsFormatStyle, largestField: Date.ComponentsFormatStyle.Field, smallestField: Date.ComponentsFormatStyle.Field));
  MEMORY[0x24BDAC7A8](v18);
  v20 = (char *)&v118 - v19;
  type metadata accessor for (style: Date.ComponentsFormatStyle, largestField: Date.ComponentsFormatStyle.Field, smallestField: Date.ComponentsFormatStyle.Field)?(0, &lazy cache variable for type metadata for (Duration.UnitsFormatStyle.Attributed, Date.ComponentsFormatStyle.Field, Date.ComponentsFormatStyle.Field)?, (uint64_t)&lazy cache variable for type metadata for (Duration.UnitsFormatStyle.Attributed, Date.ComponentsFormatStyle.Field, Date.ComponentsFormatStyle.Field), (uint64_t)v17, (void (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for (Date.ComponentsFormatStyle, Date.ComponentsFormatStyle.Field, Date.ComponentsFormatStyle.Field));
  MEMORY[0x24BDAC7A8](v21);
  v23 = (char *)&v118 - v22;
  v24 = type metadata accessor for Duration.UnitsFormatStyle.Attributed();
  v134 = *(_QWORD *)(v24 - 8);
  v135 = v24;
  MEMORY[0x24BDAC7A8](v24);
  v123 = (char *)&v118 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
  type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for (style: Duration.TimeFormatStyle.Attributed, smallestField: Date.ComponentsFormatStyle.Field)?, (uint64_t (*)(uint64_t))type metadata accessor for (style: Duration.TimeFormatStyle.Attributed, smallestField: Date.ComponentsFormatStyle.Field), (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v27);
  v29 = (char *)&v118 - v28;
  type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for (Duration.TimeFormatStyle.Attributed, Date.ComponentsFormatStyle.Field)?, (uint64_t (*)(uint64_t))type metadata accessor for (Duration.TimeFormatStyle.Attributed, Date.ComponentsFormatStyle.Field), v26);
  MEMORY[0x24BDAC7A8](v30);
  v32 = (char *)&v118 - v31;
  v33 = type metadata accessor for Duration.TimeFormatStyle.Attributed();
  v34 = *(_QWORD *)(v33 - 8);
  MEMORY[0x24BDAC7A8](v33);
  v36 = (char *)&v118 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (SystemFormatStyle.DateOffset.canUseTimeStyle.getter())
  {
    SystemFormatStyle.DateOffset.timeStyle(for:)(a1, (uint64_t)v29);
    type metadata accessor for (style: Duration.TimeFormatStyle.Attributed, smallestField: Date.ComponentsFormatStyle.Field)();
    v38 = v37;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v37 - 8) + 48))(v29, 1, v37) == 1)
    {
      outlined destroy of (style: Duration.TimeFormatStyle.Attributed, smallestField: Date.ComponentsFormatStyle.Field)?((uint64_t)v29, &lazy cache variable for type metadata for (style: Duration.TimeFormatStyle.Attributed, smallestField: Date.ComponentsFormatStyle.Field)?, (uint64_t (*)(uint64_t))type metadata accessor for (style: Duration.TimeFormatStyle.Attributed, smallestField: Date.ComponentsFormatStyle.Field));
      type metadata accessor for (Duration.TimeFormatStyle.Attributed, Date.ComponentsFormatStyle.Field)();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v39 - 8) + 56))(v32, 1, 1, v39);
    }
    else
    {
      v120 = &v29[*(int *)(v38 + 48)];
      type metadata accessor for (Duration.TimeFormatStyle.Attributed, Date.ComponentsFormatStyle.Field)();
      v41 = v40;
      v42 = *(int *)(v40 + 48);
      v121 = (void (*)(char *, char *, uint64_t))a1;
      v43 = v3;
      v44 = &v32[v42];
      v119 = *(void (**)(char *, char *, uint64_t))(v34 + 32);
      v119(v32, v29, v33);
      v45 = type metadata accessor for Date.ComponentsFormatStyle.Field();
      v118 = *(_QWORD *)(v45 - 8);
      v46 = v44;
      v3 = v43;
      (*(void (**)(char *, char *, uint64_t))(v118 + 32))(v46, v120, v45);
      v47 = *(_QWORD *)(v41 - 8);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v47 + 56))(v32, 0, 1, v41);
      v48 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v47 + 48);
      a1 = (uint64_t)v121;
      if (v48(v32, 1, v41) != 1)
      {
        v110 = &v32[*(int *)(v41 + 48)];
        v119(v36, v32, v33);
        (*(void (**)(char *, uint64_t))(v118 + 8))(v110, v45);
        Date.timeIntervalSince(_:)();
        static Duration.seconds(_:)();
        lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type Duration.TimeFormatStyle.Attributed and conformance Duration.TimeFormatStyle.Attributed, (uint64_t (*)(uint64_t))MEMORY[0x24BDD0850], MEMORY[0x24BDD0848]);
        DiscreteFormatStyle<>.input(after:)();
        v106 = v111;
        (*(void (**)(char *, uint64_t))(v34 + 8))(v36, v33);
        goto LABEL_18;
      }
    }
    outlined destroy of (style: Duration.TimeFormatStyle.Attributed, smallestField: Date.ComponentsFormatStyle.Field)?((uint64_t)v32, &lazy cache variable for type metadata for (Duration.TimeFormatStyle.Attributed, Date.ComponentsFormatStyle.Field)?, (uint64_t (*)(uint64_t))type metadata accessor for (Duration.TimeFormatStyle.Attributed, Date.ComponentsFormatStyle.Field));
  }
  SystemFormatStyle.DateOffset.unitsStyle(for:)(a1, (uint64_t)v20);
  type metadata accessor for (style: Date.ComponentsFormatStyle, largestField: Date.ComponentsFormatStyle.Field, smallestField: Date.ComponentsFormatStyle.Field)(0, &lazy cache variable for type metadata for (style: Duration.UnitsFormatStyle.Attributed, largestField: Date.ComponentsFormatStyle.Field, smallestField: Date.ComponentsFormatStyle.Field), (void (*)(uint64_t))MEMORY[0x24BDD0960]);
  v50 = v49;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v49 - 8) + 48))(v20, 1, v49) == 1)
  {
    v51 = (void (*)(uint64_t))MEMORY[0x24BDD0960];
    outlined destroy of (style: Duration.UnitsFormatStyle.Attributed, largestField: Date.ComponentsFormatStyle.Field, smallestField: Date.ComponentsFormatStyle.Field)?((uint64_t)v20, &lazy cache variable for type metadata for (style: Duration.UnitsFormatStyle.Attributed, largestField: Date.ComponentsFormatStyle.Field, smallestField: Date.ComponentsFormatStyle.Field)?, (uint64_t)&lazy cache variable for type metadata for (style: Duration.UnitsFormatStyle.Attributed, largestField: Date.ComponentsFormatStyle.Field, smallestField: Date.ComponentsFormatStyle.Field), (uint64_t)MEMORY[0x24BDD0960], (void (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for (style: Date.ComponentsFormatStyle, largestField: Date.ComponentsFormatStyle.Field, smallestField: Date.ComponentsFormatStyle.Field));
    type metadata accessor for (Date.ComponentsFormatStyle, Date.ComponentsFormatStyle.Field, Date.ComponentsFormatStyle.Field)(0, &lazy cache variable for type metadata for (Duration.UnitsFormatStyle.Attributed, Date.ComponentsFormatStyle.Field, Date.ComponentsFormatStyle.Field), v51);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v52 - 8) + 56))(v23, 1, 1, v52);
    goto LABEL_9;
  }
  v53 = &v20[*(int *)(v50 + 48)];
  v54 = &v20[*(int *)(v50 + 64)];
  type metadata accessor for (Date.ComponentsFormatStyle, Date.ComponentsFormatStyle.Field, Date.ComponentsFormatStyle.Field)(0, &lazy cache variable for type metadata for (Duration.UnitsFormatStyle.Attributed, Date.ComponentsFormatStyle.Field, Date.ComponentsFormatStyle.Field), (void (*)(uint64_t))MEMORY[0x24BDD0960]);
  v56 = v55;
  v57 = &v23[*(int *)(v55 + 48)];
  v58 = a1;
  v59 = v3;
  v60 = &v23[*(int *)(v55 + 64)];
  v121 = *(void (**)(char *, char *, uint64_t))(v134 + 32);
  v121(v23, v20, v135);
  v61 = type metadata accessor for Date.ComponentsFormatStyle.Field();
  v120 = *(char **)(v61 - 8);
  v62 = (void (*)(char *, char *, uint64_t))*((_QWORD *)v120 + 4);
  v62(v57, v53, v61);
  v63 = v60;
  v3 = v59;
  a1 = v58;
  v62(v63, v54, v61);
  v64 = *(_QWORD *)(v56 - 8);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v64 + 56))(v23, 0, 1, v56);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v64 + 48))(v23, 1, v56) != 1)
  {
    v99 = &v23[*(int *)(v56 + 48)];
    v100 = &v23[*(int *)(v56 + 64)];
    v101 = v123;
    v102 = v23;
    v103 = v135;
    v121(v123, v102, v135);
    v104 = (void (*)(char *, uint64_t))*((_QWORD *)v120 + 1);
    v104(v100, v61);
    v104(v99, v61);
    Date.timeIntervalSince(_:)();
    static Duration.seconds(_:)();
    lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.Attributed and conformance Duration.UnitsFormatStyle.Attributed, (uint64_t (*)(uint64_t))MEMORY[0x24BDD0960], MEMORY[0x24BDD0950]);
    DiscreteFormatStyle<>.input(after:)();
    v106 = v105;
    (*(void (**)(char *, uint64_t))(v134 + 8))(v101, v103);
LABEL_18:
    v112 = v136;
    if ((v106 & 1) != 0)
    {
      v114 = type metadata accessor for Date();
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v114 - 8) + 56))(v112, 1, 1, v114);
    }
    SystemFormatStyle.DateOffset.nextInputRoundingHigher(for:)(v136);
    v69 = type metadata accessor for Date();
    v70 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v69 - 8) + 56);
    v71 = v112;
    goto LABEL_20;
  }
LABEL_9:
  outlined destroy of (style: Duration.UnitsFormatStyle.Attributed, largestField: Date.ComponentsFormatStyle.Field, smallestField: Date.ComponentsFormatStyle.Field)?((uint64_t)v23, &lazy cache variable for type metadata for (Duration.UnitsFormatStyle.Attributed, Date.ComponentsFormatStyle.Field, Date.ComponentsFormatStyle.Field)?, (uint64_t)&lazy cache variable for type metadata for (Duration.UnitsFormatStyle.Attributed, Date.ComponentsFormatStyle.Field, Date.ComponentsFormatStyle.Field), (uint64_t)MEMORY[0x24BDD0960], (void (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for (Date.ComponentsFormatStyle, Date.ComponentsFormatStyle.Field, Date.ComponentsFormatStyle.Field));
  v65 = v132;
  SystemFormatStyle.DateOffset.componentsStyle(for:)(a1, v132);
  type metadata accessor for (style: Date.ComponentsFormatStyle, largestField: Date.ComponentsFormatStyle.Field, smallestField: Date.ComponentsFormatStyle.Field)(0, &lazy cache variable for type metadata for (style: Date.ComponentsFormatStyle, largestField: Date.ComponentsFormatStyle.Field, smallestField: Date.ComponentsFormatStyle.Field), (void (*)(uint64_t))MEMORY[0x24BDCE760]);
  v67 = v66;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v66 - 8) + 48))(v65, 1, v66) != 1)
  {
    v72 = v65 + *(int *)(v67 + 48);
    v134 = v65 + *(int *)(v67 + 64);
    v73 = v124;
    v74 = v125;
    v75 = &v124[*(int *)(v125 + 48)];
    v76 = &v124[*(int *)(v125 + 64)];
    v77 = *(void (**)(char *, uint64_t, uint64_t))(v133 + 32);
    v78 = v131;
    v77(v124, v65, v131);
    v79 = type metadata accessor for Date.ComponentsFormatStyle.Field();
    v121 = (void (*)(char *, char *, uint64_t))a1;
    v80 = v79;
    v135 = v3;
    v81 = *(_QWORD *)(v79 - 8);
    v82 = *(void (**)(char *, uint64_t, uint64_t))(v81 + 32);
    v82(v75, v72, v79);
    v82(v76, v134, v80);
    v83 = &v73[*(int *)(v74 + 48)];
    v84 = &v73[*(int *)(v74 + 64)];
    v85 = v128;
    v86 = v73;
    v87 = v78;
    v77(v128, (uint64_t)v86, v78);
    v88 = *(void (**)(char *, uint64_t))(v81 + 8);
    v89 = v135;
    v88(v84, v80);
    v90 = v83;
    v91 = (uint64_t)v121;
    v88(v90, v80);
    v92 = v126;
    SystemFormatStyle.DateOffset.dateRange(for:)(v91, v126);
    v93 = (uint64_t)v129;
    Date.ComponentsFormatStyle.input(after:)();
    outlined destroy of TypesettingConfiguration(v92, (uint64_t (*)(_QWORD))type metadata accessor for Range<Date>);
    v94 = v130;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v127 + 48))(v93, 1, v130) == 1)
    {
      outlined destroy of TypesettingConfiguration(v93, (uint64_t (*)(_QWORD))type metadata accessor for Range<Date>?);
      v95 = static Date.< infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v133 + 8))(v85, v87);
      v96 = type metadata accessor for Date();
      v97 = *(_QWORD *)(v96 - 8);
      if ((v95 & 1) == 0)
      {
        v70 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v97 + 56);
        v71 = v136;
        v113 = 1;
LABEL_26:
        v69 = v96;
        return v70(v71, v113, 1, v69);
      }
      v98 = v136;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v97 + 16))(v136, v89, v96);
      v70 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v97 + 56);
      v71 = v98;
    }
    else
    {
      v107 = v122;
      outlined init with take of LocalizedStringKey.FormatArgument(v93, v122, (uint64_t (*)(_QWORD))type metadata accessor for Range<Date>);
      if ((static Date.== infix(_:_:)() & 1) != 0)
      {
        v108 = v107 + *(int *)(v94 + 36);
        v96 = type metadata accessor for Date();
        v109 = v136;
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v96 - 8) + 16))(v136, v108, v96);
      }
      else
      {
        v96 = type metadata accessor for Date();
        v109 = v136;
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v96 - 8) + 16))(v136, v107, v96);
      }
      v116 = v131;
      v117 = v133;
      outlined destroy of TypesettingConfiguration(v107, (uint64_t (*)(_QWORD))type metadata accessor for Range<Date>);
      (*(void (**)(char *, uint64_t))(v117 + 8))(v85, v116);
      type metadata accessor for Date();
      v70 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v96 - 8) + 56);
      v71 = v109;
    }
    v113 = 0;
    goto LABEL_26;
  }
  outlined destroy of (style: Duration.UnitsFormatStyle.Attributed, largestField: Date.ComponentsFormatStyle.Field, smallestField: Date.ComponentsFormatStyle.Field)?(v65, &lazy cache variable for type metadata for (style: Date.ComponentsFormatStyle, largestField: Date.ComponentsFormatStyle.Field, smallestField: Date.ComponentsFormatStyle.Field)?, (uint64_t)&lazy cache variable for type metadata for (style: Date.ComponentsFormatStyle, largestField: Date.ComponentsFormatStyle.Field, smallestField: Date.ComponentsFormatStyle.Field), (uint64_t)MEMORY[0x24BDCE760], (void (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for (style: Date.ComponentsFormatStyle, largestField: Date.ComponentsFormatStyle.Field, smallestField: Date.ComponentsFormatStyle.Field));
  Date.timeIntervalSinceReferenceDate.getter();
  v68 = v136;
  Date.init(timeIntervalSinceReferenceDate:)();
  v69 = type metadata accessor for Date();
  v70 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v69 - 8) + 56);
  v71 = v68;
LABEL_20:
  v113 = 0;
  return v70(v71, v113, 1, v69);
}

void SystemFormatStyle.DateOffset.unitsConfigurationAllowsTimeStyle.getter()
{
  uint64_t v0;
  uint64_t v1;
  int *v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v1 = v0;
  v2 = (int *)type metadata accessor for SystemFormatStyle.DateOffset();
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)&v28 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v28 - v6;
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v28 - v9;
  v12 = *(_QWORD *)(v1 + *(int *)(v11 + 32));
  v13 = *(_QWORD *)(v1 + *(int *)(v11 + 24));
  if (v12 >= 3)
  {
    v14 = v13 + 2;
    if (__OFADD__(v13, 2))
    {
      __break(1u);
    }
    else
    {
      v15 = __OFSUB__(v14, v12);
      v16 = v14 - v12;
      if (!v15)
      {
        if (v16 <= 1)
          v13 = 1;
        else
          v13 = v16;
        goto LABEL_7;
      }
    }
    __break(1u);
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
LABEL_7:
  outlined init with copy of TypesettingLanguage(v1, (uint64_t)&v28 - v9, (uint64_t (*)(_QWORD))type metadata accessor for SystemFormatStyle.DateOffset);
  if (v13 == 2)
  {
    v17 = *(_QWORD *)&v10[v2[5]];
    type metadata accessor for [(_:)](0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Date.ComponentsFormatStyle.Field>, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE6C8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
    type metadata accessor for Date.ComponentsFormatStyle.Field();
    v18 = swift_allocObject();
    *(_OWORD *)(v18 + 16) = xmmword_2352828C0;
    static Date.ComponentsFormatStyle.Field.minute.getter();
    static Date.ComponentsFormatStyle.Field.second.getter();
    v19 = specialized Set.init(_nonEmptyArrayLiteral:)(v18);
    swift_setDeallocating();
    swift_arrayDestroy();
    swift_deallocClassInstance();
    specialized static Set.== infix(_:_:)(v17, v19);
    LOBYTE(v17) = v20;
    swift_bridgeObjectRelease();
    outlined destroy of TypesettingConfiguration((uint64_t)v10, (uint64_t (*)(_QWORD))type metadata accessor for SystemFormatStyle.DateOffset);
    outlined init with copy of TypesettingLanguage(v1, (uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for SystemFormatStyle.DateOffset);
    if ((v17 & 1) != 0)
    {
      v4 = v7;
LABEL_20:
      outlined destroy of TypesettingConfiguration((uint64_t)v4, (uint64_t (*)(_QWORD))type metadata accessor for SystemFormatStyle.DateOffset);
      return;
    }
  }
  else
  {
    outlined destroy of TypesettingConfiguration((uint64_t)v10, (uint64_t (*)(_QWORD))type metadata accessor for SystemFormatStyle.DateOffset);
    outlined init with copy of TypesettingLanguage(v1, (uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for SystemFormatStyle.DateOffset);
  }
  v21 = *(_QWORD *)&v7[v2[8]];
  v22 = *(_QWORD *)&v7[v2[6]];
  if (v21 < 3)
  {
LABEL_17:
    outlined init with copy of TypesettingLanguage((uint64_t)v7, (uint64_t)v4, (uint64_t (*)(_QWORD))type metadata accessor for SystemFormatStyle.DateOffset);
    if (v22 == 3)
    {
      v25 = *(_QWORD *)&v4[v2[5]];
      type metadata accessor for [(_:)](0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Date.ComponentsFormatStyle.Field>, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE6C8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
      type metadata accessor for Date.ComponentsFormatStyle.Field();
      v26 = swift_allocObject();
      *(_OWORD *)(v26 + 16) = xmmword_235283260;
      static Date.ComponentsFormatStyle.Style.spellOut.getter();
      static Date.ComponentsFormatStyle.Field.minute.getter();
      static Date.ComponentsFormatStyle.Field.second.getter();
      v27 = specialized Set.init(_nonEmptyArrayLiteral:)(v26);
      swift_setDeallocating();
      swift_arrayDestroy();
      swift_deallocClassInstance();
      specialized static Set.== infix(_:_:)(v25, v27);
      swift_bridgeObjectRelease();
    }
    outlined destroy of TypesettingConfiguration((uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for SystemFormatStyle.DateOffset);
    goto LABEL_20;
  }
  v23 = v22 + 2;
  if (__OFADD__(v22, 2))
    goto LABEL_23;
  v15 = __OFSUB__(v23, v21);
  v24 = v23 - v21;
  if (!v15)
  {
    if (v24 <= 1)
      v22 = 1;
    else
      v22 = v24;
    goto LABEL_17;
  }
LABEL_24:
  __break(1u);
}

uint64_t getter of fieldsToDisplay #1 in SystemFormatStyle.DateOffset.componentsStyle(for:)(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  int64_t v10;
  int64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v4 = a1[2];
  if (v4)
  {
    v5 = v4;
LABEL_10:
    swift_unknownObjectRetain();
    return v5;
  }
  v7 = SystemFormatStyle.DateOffset.applicableFields(for:)(a3);
  v9 = v8;
  v11 = v10;
  v13 = v12;
  v14 = type metadata accessor for SystemFormatStyle.DateOffset();
  v15 = *(_QWORD *)(a2 + *(int *)(v14 + 32));
  result = *(_QWORD *)(a2 + *(int *)(v14 + 24));
  if (v15 < 3)
  {
LABEL_9:
    v5 = specialized Collection.prefix(_:)(result, (uint64_t)v7, v9, v11, v13);
    v21 = v20;
    v23 = v22;
    v25 = v24;
    swift_beginAccess();
    a1[2] = v5;
    a1[3] = v21;
    a1[4] = v23;
    a1[5] = v25;
    swift_unknownObjectRetain();
    swift_unknownObjectRelease();
    goto LABEL_10;
  }
  v17 = result + 2;
  if (__OFADD__(result, 2))
  {
    __break(1u);
  }
  else
  {
    v18 = __OFSUB__(v17, v15);
    v19 = v17 - v15;
    if (!v18)
    {
      if (v19 <= 1)
        result = 1;
      else
        result = v19;
      goto LABEL_9;
    }
  }
  __break(1u);
  return result;
}

_QWORD *SystemFormatStyle.DateOffset.applicableFields(for:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _BYTE v34[16];
  uint64_t v35;
  _QWORD *v36;

  v32 = a1;
  v2 = type metadata accessor for DateComponents();
  v30 = *(_QWORD *)(v2 - 8);
  v31 = v2;
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)&v23 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for Calendar.Component();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for SystemFormatStyle.DateOffset();
  v10 = *(_QWORD *)(v1 + *(int *)(v9 + 20));
  v33 = v1;
  v35 = v1;
  swift_bridgeObjectRetain();
  specialized _NativeSet.filter(_:)((uint64_t)partial apply for closure #1 in SystemFormatStyle.DateOffset.applicableFields(for:), (uint64_t)v34, v10);
  v11 = swift_bridgeObjectRetain();
  v12 = (_QWORD *)specialized _copyCollectionToContiguousArray<A>(_:)(v11);
  swift_release();
  v36 = v12;
  specialized MutableCollection<>.sort(by:)(&v36);
  swift_release();
  v13 = v36;
  v29 = v36[2];
  if (!v29)
    goto LABEL_10;
  v14 = 0;
  v15 = *(_QWORD *)(type metadata accessor for Date.ComponentsFormatStyle.Field() - 8);
  v24 = (*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80);
  v25 = v13;
  v16 = (uint64_t)v13 + v24;
  v28 = v33 + *(int *)(v9 + 40);
  v26 = *(_QWORD *)(v15 + 72);
  v27 = xmmword_23527E860;
  do
  {
    SystemFormatStyle.DateOffset.component(for:)(v16, (uint64_t)v8);
    type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for _ContiguousArrayStorage<Calendar.Component>, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF290], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
    v17 = (*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
    v18 = swift_allocObject();
    *(_OWORD *)(v18 + 16) = v27;
    (*(void (**)(unint64_t, char *, uint64_t))(v6 + 16))(v18 + v17, v8, v5);
    specialized Set.init(_nonEmptyArrayLiteral:)(v18);
    swift_setDeallocating();
    swift_arrayDestroy();
    swift_deallocClassInstance();
    Calendar.dateComponents(_:from:to:)();
    swift_bridgeObjectRelease();
    v19 = DateComponents.value(for:)();
    LOBYTE(v17) = v20;
    (*(void (**)(char *, uint64_t))(v30 + 8))(v4, v31);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    if ((v17 & 1) == 0 && v19)
    {
      v13 = v25;
      goto LABEL_9;
    }
    ++v14;
    v16 += v26;
  }
  while (v29 != v14);
  v13 = v25;
  v21 = v25[2];
  if (!v21)
    goto LABEL_10;
  v14 = v21 - 1;
LABEL_9:
  if (v14 >= v13[2])
LABEL_10:
    type metadata accessor for Date.ComponentsFormatStyle.Field();
  return v13;
}

BOOL closure #1 in SystemFormatStyle.DateOffset.applicableFields(for:)(uint64_t a1, uint64_t a2)
{
  double v3;
  double v5;

  Date.ComponentsFormatStyle.Field.magnitude.getter(&v5);
  v3 = v5;
  return v3 >= 1.0
             / dbl_23529DBE8[*(char *)(a2 + *(int *)(type metadata accessor for SystemFormatStyle.DateOffset() + 44))];
}

uint64_t protocol witness for UpdateFrequencyDependentFormatStyle.updateFrequency(_:) in conformance SystemFormatStyle.DateOffset@<X0>(char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  char v6;
  uint64_t result;

  v6 = *a1;
  result = outlined init with copy of TypesettingLanguage(v3, a3, (uint64_t (*)(_QWORD))type metadata accessor for SystemFormatStyle.DateOffset);
  *(_BYTE *)(a3 + *(int *)(a2 + 44)) = v6;
  return result;
}

void static SystemFormatStyle.DateOffset.representation<A>(of:for:)(uint64_t a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t (*v35)(uint64_t);
  uint64_t v36;
  _QWORD v37[8];
  uint64_t v38;
  char *v39;
  char *v40;
  char *v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  char *v46;
  char *v47;
  char *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _UNKNOWN **v60;

  v53 = a4;
  v55 = a1;
  v8 = type metadata accessor for Date();
  v51 = *(_QWORD *)(v8 - 8);
  v52 = v8;
  MEMORY[0x24BDAC7A8](v8);
  v37[3] = (char *)v37 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v10);
  v39 = (char *)v37 - v11;
  v38 = type metadata accessor for NumberFormatStyleConfiguration.SignDisplayStrategy();
  v37[6] = *(_QWORD *)(v38 - 8);
  MEMORY[0x24BDAC7A8](v38);
  v37[7] = (char *)v37 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v50 = type metadata accessor for Duration.UnitsFormatStyle.UnitWidth();
  v37[4] = *(_QWORD *)(v50 - 8);
  MEMORY[0x24BDAC7A8](v50);
  v48 = (char *)v37 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v14);
  v49 = (char *)v37 - v15;
  v45 = type metadata accessor for Calendar();
  v42 = *(_QWORD *)(v45 - 8);
  MEMORY[0x24BDAC7A8](v45);
  v41 = (char *)v37 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v17);
  v44 = (char *)v37 - v18;
  MEMORY[0x24BDAC7A8](v19);
  v54 = (char *)v37 - v20;
  v21 = type metadata accessor for Locale();
  MEMORY[0x24BDAC7A8](v21);
  MEMORY[0x24BDAC7A8](v22);
  MEMORY[0x24BDAC7A8](v23);
  v24 = type metadata accessor for SystemFormatStyle.DateOffset();
  MEMORY[0x24BDAC7A8](v24);
  v37[5] = (char *)v37 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v26);
  v47 = (char *)v37 - v27;
  MEMORY[0x24BDAC7A8](v28);
  v46 = (char *)v37 - v29;
  MEMORY[0x24BDAC7A8](v30);
  v43 = (char *)v37 - v31;
  MEMORY[0x24BDAC7A8](v32);
  v40 = (char *)v37 - v33;
  MEMORY[0x24BDAC7A8](v34);
  LODWORD(a2) = *a2;
  v36 = lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type SystemFormatStyle.DateOffset and conformance SystemFormatStyle.DateOffset, v35, (uint64_t)&protocol conformance descriptor for SystemFormatStyle.DateOffset);
  if ((int)a2 <= 1)
  {
    v37[2] = a5;
    v56 = a3;
    v57 = v24;
    v58 = v53;
    v59 = v36;
    v60 = &protocol witness table for AttributedString;
    type metadata accessor for TimeDataFormatting.Resolvable();
  }
  v56 = a3;
  v57 = v24;
  v58 = v53;
  v59 = v36;
  v60 = &protocol witness table for AttributedString;
  type metadata accessor for TimeDataFormatting.Resolvable();
}

uint64_t one-time initialization function for orderedFields()
{
  uint64_t v0;
  uint64_t result;

  type metadata accessor for [(_:)](0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Date.ComponentsFormatStyle.Field>, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE6C8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
  type metadata accessor for Date.ComponentsFormatStyle.Field();
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_23529BF50;
  static Date.ComponentsFormatStyle.Style.wide.getter();
  static Date.ComponentsFormatStyle.Style.narrow.getter();
  static Date.ComponentsFormatStyle.Style.abbreviated.getter();
  static Date.ComponentsFormatStyle.Style.condensedAbbreviated.getter();
  static Date.ComponentsFormatStyle.Style.spellOut.getter();
  static Date.ComponentsFormatStyle.Field.minute.getter();
  result = static Date.ComponentsFormatStyle.Field.second.getter();
  static Date.ComponentsFormatStyle.Field.orderedFields = v0;
  return result;
}

uint64_t SystemFormatStyle.DateOffset.interfaceIdiom(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t (*v5)(void);
  char v6;
  uint64_t result;

  v4 = *(_QWORD *)(a1 + 8);
  outlined init with copy of TypesettingLanguage(v2, a2, (uint64_t (*)(_QWORD))type metadata accessor for SystemFormatStyle.DateOffset);
  type metadata accessor for InterfaceIdiomBox<ComplicationInterfaceIdiom>(0, (unint64_t *)&lazy cache variable for type metadata for InterfaceIdiomBox<ComplicationInterfaceIdiom>, (uint64_t)&type metadata for ComplicationInterfaceIdiom, (uint64_t)&protocol witness table for ComplicationInterfaceIdiom);
  v5 = *(uint64_t (**)(void))(v4 + 8);
  if ((v5() & 1) != 0)
  {
    v6 = 1;
  }
  else
  {
    type metadata accessor for InterfaceIdiomBox<ComplicationInterfaceIdiom>(0, &lazy cache variable for type metadata for InterfaceIdiomBox<WatchInterfaceIdiom>, (uint64_t)&type metadata for WatchInterfaceIdiom, (uint64_t)&protocol witness table for WatchInterfaceIdiom);
    v6 = v5() & 1;
  }
  result = type metadata accessor for SystemFormatStyle.DateOffset();
  *(_BYTE *)(a2 + *(int *)(result + 48)) = v6;
  return result;
}

uint64_t protocol witness for InterfaceIdiomDependentFormatStyle.interfaceIdiom(_:) in conformance SystemFormatStyle.DateOffset@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t (*v7)(void);
  uint64_t result;
  BOOL v9;

  v6 = *(_QWORD *)(a1 + 8);
  outlined init with copy of TypesettingLanguage(v3, a3, (uint64_t (*)(_QWORD))type metadata accessor for SystemFormatStyle.DateOffset);
  type metadata accessor for InterfaceIdiomBox<ComplicationInterfaceIdiom>(0, (unint64_t *)&lazy cache variable for type metadata for InterfaceIdiomBox<ComplicationInterfaceIdiom>, (uint64_t)&type metadata for ComplicationInterfaceIdiom, (uint64_t)&protocol witness table for ComplicationInterfaceIdiom);
  v7 = *(uint64_t (**)(void))(v6 + 8);
  result = v7();
  v9 = 1;
  if ((result & 1) == 0)
  {
    type metadata accessor for InterfaceIdiomBox<ComplicationInterfaceIdiom>(0, &lazy cache variable for type metadata for InterfaceIdiomBox<WatchInterfaceIdiom>, (uint64_t)&type metadata for WatchInterfaceIdiom, (uint64_t)&protocol witness table for WatchInterfaceIdiom);
    result = v7();
    if ((result & 1) == 0)
      v9 = 0;
  }
  *(_BYTE *)(a3 + *(int *)(a2 + 48)) = v9;
  return result;
}

void specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  Swift::Int v31;
  Swift::Int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  Swift::Int v38;
  char *v39;
  unint64_t v40;
  Swift::Int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void (*v45)(char *, uint64_t, uint64_t);
  uint64_t v46;
  char *v47;
  double v48;
  double v49;
  void (*v50)(char *, uint64_t);
  char *v51;
  Swift::Int v52;
  uint64_t v53;
  Swift::Int v54;
  char *v55;
  char *v56;
  uint64_t v57;
  char v58;
  char v59;
  char v60;
  char v61;
  char v62;
  double v63;
  char *v64;
  char v65;
  uint64_t v66;
  char v67;
  char v68;
  char v69;
  char v70;
  char v71;
  double v72;
  _BOOL4 v73;
  char v74;
  char v75;
  uint64_t v76;
  uint64_t v77;
  Swift::Int v78;
  Swift::Int v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  Swift::Int v83;
  void (*v84)(char *, Swift::Int, uint64_t);
  Swift::Int v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  void (*v89)(char *, uint64_t);
  double v90;
  char v91;
  char v92;
  char v93;
  char v94;
  char v95;
  char v96;
  char *v97;
  char v98;
  uint64_t v99;
  char v100;
  char v101;
  char v102;
  char v103;
  char v104;
  double v105;
  uint64_t v106;
  char *v107;
  void (*v108)(char *, uint64_t, uint64_t);
  char v109;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v111;
  unint64_t v112;
  char *v113;
  char *v114;
  Swift::Int v115;
  unint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  char v120;
  char *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  BOOL v127;
  unint64_t v128;
  char *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  char *v134;
  uint64_t v135;
  uint64_t v136;
  BOOL v137;
  uint64_t v138;
  char v139;
  char *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  BOOL v144;
  uint64_t v145;
  uint64_t v146;
  char *v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  char *v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  unint64_t v155;
  char *v156;
  char *v157;
  uint64_t v158;
  char *v159;
  unint64_t v160;
  char *v161;
  uint64_t v162;
  uint64_t v163;
  unint64_t v164;
  uint64_t v165;
  uint64_t v166;
  unint64_t v167;
  char *v168;
  char *v169;
  uint64_t v170;
  uint64_t v171;
  char *v172;
  unint64_t v173;
  uint64_t v174;
  Swift::Int v175;
  char *v176;
  char *v177;
  Swift::Int v178;
  char *v179;
  char *v180;
  char *v181;
  Swift::Int v182;
  char *v183;
  char *v184;
  unint64_t v185;
  char *v186;
  uint64_t v187;
  char *v188;
  char *v189;
  uint64_t v190;
  Swift::Int v191;
  char *v192;
  uint64_t v193;
  uint64_t v194;
  char *v195;
  Swift::Int v196;
  uint64_t v197;
  uint64_t *v198;
  uint64_t v199;
  char *v200;
  double v201;
  double v202[2];

  v2 = type metadata accessor for Date.ComponentsFormatStyle.Field();
  v199 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v181 = (char *)&v174 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v4);
  v192 = (char *)&v174 - v5;
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v174 - v7;
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v174 - v10;
  MEMORY[0x24BDAC7A8](v12);
  v200 = (char *)&v174 - v13;
  MEMORY[0x24BDAC7A8](v14);
  v195 = (char *)&v174 - v15;
  MEMORY[0x24BDAC7A8](v16);
  v18 = (char *)&v174 - v17;
  MEMORY[0x24BDAC7A8](v19);
  v21 = (char *)&v174 - v20;
  MEMORY[0x24BDAC7A8](v22);
  v186 = (char *)&v174 - v23;
  MEMORY[0x24BDAC7A8](v24);
  v184 = (char *)&v174 - v25;
  MEMORY[0x24BDAC7A8](v26);
  v177 = (char *)&v174 - v27;
  MEMORY[0x24BDAC7A8](v28);
  v30 = (char *)&v174 - v29;
  v198 = a1;
  v31 = a1[1];
  v32 = _minimumMergeRunLength(_:)(v31);
  if (v32 >= v31)
  {
    if (v31 < 0)
      goto LABEL_209;
    if (v31)
      specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(0, v31, 1, v198);
    return;
  }
  v175 = v32;
  if (v31 >= 0)
    v33 = v31;
  else
    v33 = v31 + 1;
  if (v31 < -1)
    goto LABEL_217;
  v188 = v8;
  v180 = v18;
  v179 = v21;
  if (v31 < 2)
  {
    v37 = MEMORY[0x24BEE4AF8];
    v185 = MEMORY[0x24BEE4AF8]
         + ((*(unsigned __int8 *)(v199 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v199 + 80));
    if (v31 != 1)
    {
      v40 = *(_QWORD *)(MEMORY[0x24BEE4AF8] + 16);
      v39 = (char *)MEMORY[0x24BEE4AF8];
LABEL_175:
      v165 = v187;
      if (v40 >= 2)
      {
        v166 = *v198;
        do
        {
          v167 = v40 - 2;
          if (v40 < 2)
            goto LABEL_204;
          if (!v166)
            goto LABEL_216;
          v168 = v39;
          v169 = v39 + 32;
          v170 = *(_QWORD *)&v39[16 * v167 + 32];
          v171 = *(_QWORD *)&v39[16 * v40 + 24];
          specialized _merge<A>(low:mid:high:buffer:by:)(v166 + *(_QWORD *)(v199 + 72) * v170, v166 + *(_QWORD *)(v199 + 72) * *(_QWORD *)&v169[16 * v40 - 16], v166 + *(_QWORD *)(v199 + 72) * v171, v185);
          if (v165)
            break;
          if (v171 < v170)
            goto LABEL_205;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v168 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v168);
          if (v167 >= *((_QWORD *)v168 + 2))
            goto LABEL_206;
          v172 = &v168[16 * v167 + 32];
          *(_QWORD *)v172 = v170;
          *((_QWORD *)v172 + 1) = v171;
          v173 = *((_QWORD *)v168 + 2);
          if (v40 > v173)
            goto LABEL_207;
          v39 = v168;
          memmove(&v168[16 * v40 + 16], &v168[16 * v40 + 32], 16 * (v173 - v40));
          *((_QWORD *)v168 + 2) = v173 - 1;
          v40 = v173 - 1;
        }
        while (v173 > 2);
      }
LABEL_186:
      swift_bridgeObjectRelease();
      *(_QWORD *)(v37 + 16) = 0;
      swift_bridgeObjectRelease();
      return;
    }
    v174 = MEMORY[0x24BEE4AF8];
  }
  else
  {
    v34 = v33 >> 1;
    v35 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(_QWORD *)(v35 + 16) = v34;
    v36 = *(unsigned __int8 *)(v199 + 80);
    v174 = v35;
    v185 = v35 + ((v36 + 32) & ~v36);
  }
  v38 = 0;
  v39 = (char *)MEMORY[0x24BEE4AF8];
  v189 = v11;
  v183 = v30;
  while (2)
  {
    v41 = v38 + 1;
    v182 = v38;
    if (v38 + 1 >= v31)
    {
      v52 = v38 + 1;
      goto LABEL_73;
    }
    v42 = v199;
    v43 = *v198;
    v194 = v43;
    v44 = *(_QWORD *)(v199 + 72);
    v196 = v31;
    v45 = *(void (**)(char *, uint64_t, uint64_t))(v199 + 16);
    v45(v30, v43 + v44 * v41, v2);
    v46 = v43 + v44 * v38;
    v47 = v177;
    v45(v177, v46, v2);
    Date.ComponentsFormatStyle.Field.magnitude.getter(v202);
    v48 = v202[0];
    Date.ComponentsFormatStyle.Field.magnitude.getter(&v201);
    v49 = v201;
    v50 = *(void (**)(char *, uint64_t))(v42 + 8);
    v51 = v47;
    v38 = v182;
    v50(v51, v2);
    v50(v30, v2);
    v52 = v38 + 2;
    v197 = v44;
    if (v38 + 2 >= v196)
    {
      v31 = v196;
      goto LABEL_59;
    }
    v176 = v39;
    v193 = v44 * v41;
    v53 = v194;
    v191 = v44 * v52;
    while (1)
    {
      v54 = v52;
      v55 = v184;
      v45(v184, v53 + v191, v2);
      v45(v186, v53 + v193, v2);
      v56 = v179;
      v45(v179, (uint64_t)v55, v2);
      static Date.ComponentsFormatStyle.Style.wide.getter();
      lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type Date.ComponentsFormatStyle.Field and conformance Date.ComponentsFormatStyle.Field, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE6C8], MEMORY[0x24BDCE6E8]);
      LOBYTE(v55) = dispatch thunk of static Equatable.== infix(_:_:)();
      v50(v30, v2);
      if ((v55 & 1) != 0)
      {
        v50(v56, v2);
        *(double *)&v57 = 31536000.0;
LABEL_31:
        v63 = *(double *)&v57;
        goto LABEL_32;
      }
      static Date.ComponentsFormatStyle.Style.narrow.getter();
      v58 = dispatch thunk of static Equatable.== infix(_:_:)();
      v50(v30, v2);
      if ((v58 & 1) != 0)
      {
        v50(v56, v2);
        *(double *)&v57 = 2592000.0;
        goto LABEL_31;
      }
      static Date.ComponentsFormatStyle.Style.abbreviated.getter();
      v59 = dispatch thunk of static Equatable.== infix(_:_:)();
      v50(v30, v2);
      if ((v59 & 1) != 0)
      {
        v50(v56, v2);
        *(double *)&v57 = 604800.0;
        goto LABEL_31;
      }
      static Date.ComponentsFormatStyle.Style.condensedAbbreviated.getter();
      v60 = dispatch thunk of static Equatable.== infix(_:_:)();
      v50(v30, v2);
      if ((v60 & 1) != 0)
      {
        v50(v56, v2);
        *(double *)&v57 = 86400.0;
        goto LABEL_31;
      }
      static Date.ComponentsFormatStyle.Style.spellOut.getter();
      v61 = dispatch thunk of static Equatable.== infix(_:_:)();
      v50(v30, v2);
      if ((v61 & 1) != 0)
      {
        v50(v56, v2);
        *(double *)&v57 = 3600.0;
        goto LABEL_31;
      }
      static Date.ComponentsFormatStyle.Field.minute.getter();
      v62 = dispatch thunk of static Equatable.== infix(_:_:)();
      v50(v30, v2);
      if ((v62 & 1) != 0)
      {
        v50(v56, v2);
        *(double *)&v57 = 60.0;
        goto LABEL_31;
      }
      static Date.ComponentsFormatStyle.Field.second.getter();
      v74 = dispatch thunk of static Equatable.== infix(_:_:)();
      v50(v30, v2);
      v50(v56, v2);
      v63 = 1.0;
      if ((v74 & 1) == 0)
      {
        if (one-time initialization token for max != -1)
          swift_once();
        v63 = *(double *)&static Calendar.Component.Magnitude.max;
      }
LABEL_32:
      v64 = v180;
      v45(v180, (uint64_t)v186, v2);
      static Date.ComponentsFormatStyle.Style.wide.getter();
      v65 = dispatch thunk of static Equatable.== infix(_:_:)();
      v50(v30, v2);
      if ((v65 & 1) != 0)
      {
        v50(v64, v2);
        *(double *)&v66 = 31536000.0;
LABEL_44:
        v72 = *(double *)&v66;
        goto LABEL_45;
      }
      static Date.ComponentsFormatStyle.Style.narrow.getter();
      v67 = dispatch thunk of static Equatable.== infix(_:_:)();
      v50(v30, v2);
      if ((v67 & 1) != 0)
      {
        v50(v64, v2);
        *(double *)&v66 = 2592000.0;
        goto LABEL_44;
      }
      static Date.ComponentsFormatStyle.Style.abbreviated.getter();
      v68 = dispatch thunk of static Equatable.== infix(_:_:)();
      v50(v30, v2);
      if ((v68 & 1) != 0)
      {
        v50(v64, v2);
        *(double *)&v66 = 604800.0;
        goto LABEL_44;
      }
      static Date.ComponentsFormatStyle.Style.condensedAbbreviated.getter();
      v69 = dispatch thunk of static Equatable.== infix(_:_:)();
      v50(v30, v2);
      if ((v69 & 1) != 0)
      {
        v50(v64, v2);
        *(double *)&v66 = 86400.0;
        goto LABEL_44;
      }
      static Date.ComponentsFormatStyle.Style.spellOut.getter();
      v70 = dispatch thunk of static Equatable.== infix(_:_:)();
      v50(v30, v2);
      if ((v70 & 1) != 0)
      {
        v50(v64, v2);
        *(double *)&v66 = 3600.0;
        goto LABEL_44;
      }
      static Date.ComponentsFormatStyle.Field.minute.getter();
      v71 = dispatch thunk of static Equatable.== infix(_:_:)();
      v50(v30, v2);
      if ((v71 & 1) != 0)
      {
        v50(v64, v2);
        *(double *)&v66 = 60.0;
        goto LABEL_44;
      }
      static Date.ComponentsFormatStyle.Field.second.getter();
      v75 = dispatch thunk of static Equatable.== infix(_:_:)();
      v50(v30, v2);
      v50(v64, v2);
      v72 = 1.0;
      if ((v75 & 1) == 0)
      {
        if (one-time initialization token for max != -1)
          swift_once();
        v72 = *(double *)&static Calendar.Component.Magnitude.max;
      }
LABEL_45:
      v73 = v72 >= v63;
      v50(v186, v2);
      v50(v184, v2);
      if ((((v49 < v48) ^ v73) & 1) == 0)
        break;
      v52 = v54 + 1;
      v44 = v197;
      v53 += v197;
      if (v196 == v54 + 1)
      {
        v31 = v196;
        v52 = v196;
        v39 = v176;
        v38 = v182;
        goto LABEL_59;
      }
    }
    v39 = v176;
    v52 = v54;
    v38 = v182;
    v31 = v196;
    v44 = v197;
LABEL_59:
    v11 = v189;
    if (v49 < v48)
    {
      if (v52 < v38)
        goto LABEL_210;
      if (v38 < v52)
      {
        v176 = v39;
        v76 = 0;
        v77 = v44 * (v52 - 1);
        v78 = v52 * v44;
        v79 = v38;
        v80 = v38 * v44;
        v191 = v52;
        do
        {
          if (v79 != v52 + v76 - 1)
          {
            if (!v194)
              goto LABEL_215;
            v81 = v194 + v80;
            v82 = v194 + v77;
            v193 = *(_QWORD *)(v199 + 32);
            ((void (*)(char *, uint64_t, uint64_t))v193)(v181, v194 + v80, v2);
            if (v80 < v77 || v81 >= v194 + v78)
            {
              swift_arrayInitWithTakeFrontToBack();
            }
            else if (v80 != v77)
            {
              swift_arrayInitWithTakeBackToFront();
            }
            ((void (*)(uint64_t, char *, uint64_t))v193)(v82, v181, v2);
            v52 = v191;
            v44 = v197;
          }
          ++v79;
          --v76;
          v77 -= v44;
          v78 -= v44;
          v80 += v44;
        }
        while (v79 < v52 + v76);
        v39 = v176;
        v11 = v189;
        v38 = v182;
        v31 = v196;
      }
    }
LABEL_73:
    if (v52 >= v31)
      goto LABEL_124;
    if (__OFSUB__(v52, v38))
      goto LABEL_208;
    if (v52 - v38 >= v175)
      goto LABEL_124;
    if (__OFADD__(v38, v175))
      goto LABEL_211;
    if (v38 + v175 >= v31)
      v83 = v31;
    else
      v83 = v38 + v175;
    if (v83 >= v38)
    {
      if (v52 == v83)
        goto LABEL_124;
      v176 = v39;
      v84 = *(void (**)(char *, Swift::Int, uint64_t))(v199 + 16);
      v190 = *(_QWORD *)(v199 + 72);
      v196 = v52 * v190;
      v197 = v190 * (v52 - 1);
      v178 = v83;
      while (2)
      {
        v86 = 0;
        v191 = v52;
        while (2)
        {
          v87 = *v198;
          v88 = v195;
          v194 = v196 + v86;
          v84(v195, v196 + v86 + v87, v2);
          v193 = v197 + v86;
          v84(v200, v197 + v86 + v87, v2);
          v84(v11, (Swift::Int)v88, v2);
          static Date.ComponentsFormatStyle.Style.wide.getter();
          lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type Date.ComponentsFormatStyle.Field and conformance Date.ComponentsFormatStyle.Field, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE6C8], MEMORY[0x24BDCE6E8]);
          LOBYTE(v88) = dispatch thunk of static Equatable.== infix(_:_:)();
          v89 = *(void (**)(char *, uint64_t))(v199 + 8);
          v89(v30, v2);
          if ((v88 & 1) != 0)
          {
            v89(v11, v2);
            v90 = 31536000.0;
          }
          else
          {
            static Date.ComponentsFormatStyle.Style.narrow.getter();
            v91 = dispatch thunk of static Equatable.== infix(_:_:)();
            v89(v30, v2);
            if ((v91 & 1) != 0)
            {
              v89(v11, v2);
              v90 = 2592000.0;
            }
            else
            {
              static Date.ComponentsFormatStyle.Style.abbreviated.getter();
              v92 = dispatch thunk of static Equatable.== infix(_:_:)();
              v89(v30, v2);
              if ((v92 & 1) != 0)
              {
                v89(v11, v2);
                v90 = 604800.0;
              }
              else
              {
                static Date.ComponentsFormatStyle.Style.condensedAbbreviated.getter();
                v93 = dispatch thunk of static Equatable.== infix(_:_:)();
                v89(v30, v2);
                if ((v93 & 1) != 0)
                {
                  v89(v11, v2);
                  v90 = 86400.0;
                }
                else
                {
                  static Date.ComponentsFormatStyle.Style.spellOut.getter();
                  v94 = dispatch thunk of static Equatable.== infix(_:_:)();
                  v89(v30, v2);
                  if ((v94 & 1) != 0)
                  {
                    v89(v11, v2);
                    v90 = 3600.0;
                  }
                  else
                  {
                    static Date.ComponentsFormatStyle.Field.minute.getter();
                    v95 = dispatch thunk of static Equatable.== infix(_:_:)();
                    v89(v30, v2);
                    if ((v95 & 1) != 0)
                    {
                      v89(v11, v2);
                      v90 = 60.0;
                    }
                    else
                    {
                      static Date.ComponentsFormatStyle.Field.second.getter();
                      v96 = dispatch thunk of static Equatable.== infix(_:_:)();
                      v89(v30, v2);
                      v89(v11, v2);
                      v90 = 1.0;
                      if ((v96 & 1) == 0)
                      {
                        if (one-time initialization token for max != -1)
                          swift_once();
                        v90 = *(double *)&static Calendar.Component.Magnitude.max;
                      }
                    }
                  }
                }
              }
            }
          }
          v97 = v188;
          v84(v188, (Swift::Int)v200, v2);
          static Date.ComponentsFormatStyle.Style.wide.getter();
          v98 = dispatch thunk of static Equatable.== infix(_:_:)();
          v89(v30, v2);
          if ((v98 & 1) != 0)
          {
            v89(v97, v2);
            *(double *)&v99 = 31536000.0;
            goto LABEL_115;
          }
          static Date.ComponentsFormatStyle.Style.narrow.getter();
          v100 = dispatch thunk of static Equatable.== infix(_:_:)();
          v89(v30, v2);
          if ((v100 & 1) != 0)
          {
            v89(v97, v2);
            *(double *)&v99 = 2592000.0;
            goto LABEL_115;
          }
          static Date.ComponentsFormatStyle.Style.abbreviated.getter();
          v101 = dispatch thunk of static Equatable.== infix(_:_:)();
          v89(v30, v2);
          if ((v101 & 1) != 0)
          {
            v89(v97, v2);
            *(double *)&v99 = 604800.0;
            goto LABEL_115;
          }
          static Date.ComponentsFormatStyle.Style.condensedAbbreviated.getter();
          v102 = dispatch thunk of static Equatable.== infix(_:_:)();
          v89(v30, v2);
          if ((v102 & 1) != 0)
          {
            v89(v97, v2);
            *(double *)&v99 = 86400.0;
            goto LABEL_115;
          }
          static Date.ComponentsFormatStyle.Style.spellOut.getter();
          v103 = dispatch thunk of static Equatable.== infix(_:_:)();
          v89(v30, v2);
          if ((v103 & 1) != 0)
          {
            v89(v97, v2);
            *(double *)&v99 = 3600.0;
            goto LABEL_115;
          }
          static Date.ComponentsFormatStyle.Field.minute.getter();
          v104 = dispatch thunk of static Equatable.== infix(_:_:)();
          v89(v30, v2);
          if ((v104 & 1) != 0)
          {
            v89(v97, v2);
            *(double *)&v99 = 60.0;
LABEL_115:
            v105 = *(double *)&v99;
            v11 = v189;
          }
          else
          {
            static Date.ComponentsFormatStyle.Field.second.getter();
            v109 = dispatch thunk of static Equatable.== infix(_:_:)();
            v89(v30, v2);
            v89(v97, v2);
            v105 = 1.0;
            v11 = v189;
            if ((v109 & 1) == 0)
            {
              if (one-time initialization token for max != -1)
                swift_once();
              v105 = *(double *)&static Calendar.Component.Magnitude.max;
            }
          }
          v89(v200, v2);
          v89(v195, v2);
          if (v105 < v90)
          {
            v106 = *v198;
            if (!*v198)
              goto LABEL_213;
            v107 = (char *)(v106 + v197 + v86);
            v108 = *(void (**)(char *, uint64_t, uint64_t))(v199 + 32);
            v108(v192, v106 + v196 + v86, v2);
            swift_arrayInitWithTakeFrontToBack();
            v108(v107, (uint64_t)v192, v2);
            v85 = v191;
            v86 -= v190;
            if (v191 == ++v38)
              goto LABEL_84;
            continue;
          }
          break;
        }
        v85 = v191;
LABEL_84:
        v52 = v85 + 1;
        v197 += v190;
        v196 += v190;
        v38 = v182;
        if (v52 != v178)
          continue;
        break;
      }
      v52 = v178;
      v39 = v176;
LABEL_124:
      if (v52 < v38)
        goto LABEL_203;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v191 = v52;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        v39 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v39 + 2) + 1, 1, v39);
      v112 = *((_QWORD *)v39 + 2);
      v111 = *((_QWORD *)v39 + 3);
      v40 = v112 + 1;
      if (v112 >= v111 >> 1)
        v39 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v111 > 1), v112 + 1, 1, v39);
      *((_QWORD *)v39 + 2) = v40;
      v113 = v39 + 32;
      v114 = &v39[16 * v112 + 32];
      v115 = v191;
      *(_QWORD *)v114 = v38;
      *((_QWORD *)v114 + 1) = v115;
      if (v112)
      {
        while (2)
        {
          v116 = v40 - 1;
          if (v40 >= 4)
          {
            v121 = &v113[16 * v40];
            v122 = *((_QWORD *)v121 - 8);
            v123 = *((_QWORD *)v121 - 7);
            v127 = __OFSUB__(v123, v122);
            v124 = v123 - v122;
            if (v127)
              goto LABEL_192;
            v126 = *((_QWORD *)v121 - 6);
            v125 = *((_QWORD *)v121 - 5);
            v127 = __OFSUB__(v125, v126);
            v119 = v125 - v126;
            v120 = v127;
            if (v127)
              goto LABEL_193;
            v128 = v40 - 2;
            v129 = &v113[16 * v40 - 32];
            v131 = *(_QWORD *)v129;
            v130 = *((_QWORD *)v129 + 1);
            v127 = __OFSUB__(v130, v131);
            v132 = v130 - v131;
            if (v127)
              goto LABEL_195;
            v127 = __OFADD__(v119, v132);
            v133 = v119 + v132;
            if (v127)
              goto LABEL_198;
            if (v133 >= v124)
            {
              v151 = &v113[16 * v116];
              v153 = *(_QWORD *)v151;
              v152 = *((_QWORD *)v151 + 1);
              v127 = __OFSUB__(v152, v153);
              v154 = v152 - v153;
              if (v127)
                goto LABEL_202;
              v144 = v119 < v154;
            }
            else
            {
LABEL_143:
              if ((v120 & 1) != 0)
                goto LABEL_194;
              v128 = v40 - 2;
              v134 = &v113[16 * v40 - 32];
              v136 = *(_QWORD *)v134;
              v135 = *((_QWORD *)v134 + 1);
              v137 = __OFSUB__(v135, v136);
              v138 = v135 - v136;
              v139 = v137;
              if (v137)
                goto LABEL_197;
              v140 = &v113[16 * v116];
              v142 = *(_QWORD *)v140;
              v141 = *((_QWORD *)v140 + 1);
              v127 = __OFSUB__(v141, v142);
              v143 = v141 - v142;
              if (v127)
                goto LABEL_200;
              if (__OFADD__(v138, v143))
                goto LABEL_201;
              if (v138 + v143 < v119)
                goto LABEL_155;
              v144 = v119 < v143;
            }
            if (v144)
              v116 = v128;
          }
          else
          {
            if (v40 == 3)
            {
              v118 = *((_QWORD *)v39 + 4);
              v117 = *((_QWORD *)v39 + 5);
              v127 = __OFSUB__(v117, v118);
              v119 = v117 - v118;
              v120 = v127;
              goto LABEL_143;
            }
            v145 = *((_QWORD *)v39 + 4);
            v146 = *((_QWORD *)v39 + 5);
            v127 = __OFSUB__(v146, v145);
            v138 = v146 - v145;
            v139 = v127;
LABEL_155:
            if ((v139 & 1) != 0)
              goto LABEL_196;
            v147 = &v113[16 * v116];
            v149 = *(_QWORD *)v147;
            v148 = *((_QWORD *)v147 + 1);
            v127 = __OFSUB__(v148, v149);
            v150 = v148 - v149;
            if (v127)
              goto LABEL_199;
            if (v150 < v138)
              goto LABEL_15;
          }
          v155 = v116 - 1;
          if (v116 - 1 >= v40)
          {
            __break(1u);
LABEL_189:
            __break(1u);
LABEL_190:
            __break(1u);
LABEL_191:
            __break(1u);
LABEL_192:
            __break(1u);
LABEL_193:
            __break(1u);
LABEL_194:
            __break(1u);
LABEL_195:
            __break(1u);
LABEL_196:
            __break(1u);
LABEL_197:
            __break(1u);
LABEL_198:
            __break(1u);
LABEL_199:
            __break(1u);
LABEL_200:
            __break(1u);
LABEL_201:
            __break(1u);
LABEL_202:
            __break(1u);
LABEL_203:
            __break(1u);
LABEL_204:
            __break(1u);
LABEL_205:
            __break(1u);
LABEL_206:
            __break(1u);
LABEL_207:
            __break(1u);
LABEL_208:
            __break(1u);
LABEL_209:
            __break(1u);
LABEL_210:
            __break(1u);
LABEL_211:
            __break(1u);
            goto LABEL_212;
          }
          if (!*v198)
            goto LABEL_214;
          v156 = v39;
          v157 = &v113[16 * v155];
          v158 = *(_QWORD *)v157;
          v159 = v113;
          v160 = v116;
          v161 = &v113[16 * v116];
          v162 = *((_QWORD *)v161 + 1);
          v163 = v187;
          specialized _merge<A>(low:mid:high:buffer:by:)(*v198 + *(_QWORD *)(v199 + 72) * *(_QWORD *)v157, *v198 + *(_QWORD *)(v199 + 72) * *(_QWORD *)v161, *v198 + *(_QWORD *)(v199 + 72) * v162, v185);
          v187 = v163;
          if (v163)
          {
            v37 = v174;
            goto LABEL_186;
          }
          if (v162 < v158)
            goto LABEL_189;
          if (v160 > *((_QWORD *)v156 + 2))
            goto LABEL_190;
          *(_QWORD *)v157 = v158;
          *(_QWORD *)&v159[16 * v155 + 8] = v162;
          v164 = *((_QWORD *)v156 + 2);
          if (v160 >= v164)
            goto LABEL_191;
          v39 = v156;
          v40 = v164 - 1;
          memmove(v161, v161 + 16, 16 * (v164 - 1 - v160));
          v113 = v159;
          *((_QWORD *)v156 + 2) = v164 - 1;
          v30 = v183;
          if (v164 <= 2)
            goto LABEL_15;
          continue;
        }
      }
      v40 = 1;
LABEL_15:
      v31 = v198[1];
      v38 = v191;
      v11 = v189;
      if (v191 >= v31)
      {
        v37 = v174;
        goto LABEL_175;
      }
      continue;
    }
    break;
  }
LABEL_212:
  __break(1u);
LABEL_213:
  __break(1u);
LABEL_214:
  __break(1u);
LABEL_215:
  __break(1u);
LABEL_216:
  __break(1u);
LABEL_217:
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __n128 v19;
  uint64_t v20;
  void (*v21)(char *, uint64_t, uint64_t, __n128);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  void (*v26)(char *, uint64_t);
  uint64_t v27;
  char v28;
  char v29;
  char v30;
  char v31;
  char v32;
  double v33;
  char *v34;
  char v35;
  uint64_t v36;
  char v37;
  char v38;
  char v39;
  char v40;
  char v41;
  double v42;
  uint64_t v43;
  char *v44;
  void (*v45)(char *, uint64_t, uint64_t);
  char v46;
  char v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t *v58;
  _QWORD *v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;

  v58 = a4;
  v50 = a1;
  v6 = type metadata accessor for Date.ComponentsFormatStyle.Field();
  v59 = *(_QWORD **)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v55 = (char *)&v48 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8);
  v52 = (char *)&v48 - v9;
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v48 - v11;
  MEMORY[0x24BDAC7A8](v13);
  v15 = (char *)&v48 - v14;
  MEMORY[0x24BDAC7A8](v16);
  v63 = (char *)&v48 - v17;
  v19.n128_f64[0] = MEMORY[0x24BDAC7A8](v18);
  v60 = (char *)&v48 - v20;
  v54 = a3;
  v49 = a2;
  if (a3 != a2)
  {
    v21 = (void (*)(char *, uint64_t, uint64_t, __n128))v59[2];
    v53 = v59[9];
    v61 = v53 * v54;
    v62 = v53 * (v54 - 1);
    v51 = v15;
LABEL_5:
    v22 = 0;
    v23 = v50;
    while (1)
    {
      v24 = *v58;
      v25 = v60;
      v57 = v61 + v22;
      v21(v60, v61 + v22 + v24, v6, v19);
      v56 = v62 + v22;
      ((void (*)(char *, uint64_t, uint64_t))v21)(v63, v62 + v22 + v24, v6);
      ((void (*)(char *, char *, uint64_t))v21)(v15, v25, v6);
      static Date.ComponentsFormatStyle.Style.wide.getter();
      lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type Date.ComponentsFormatStyle.Field and conformance Date.ComponentsFormatStyle.Field, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE6C8], MEMORY[0x24BDCE6E8]);
      LOBYTE(v24) = dispatch thunk of static Equatable.== infix(_:_:)();
      v26 = (void (*)(char *, uint64_t))v59[1];
      v26(v12, v6);
      if ((v24 & 1) != 0)
        break;
      static Date.ComponentsFormatStyle.Style.narrow.getter();
      v28 = dispatch thunk of static Equatable.== infix(_:_:)();
      v26(v12, v6);
      if ((v28 & 1) != 0)
      {
        v26(v15, v6);
        v27 = 0x4143C68000000000;
        goto LABEL_19;
      }
      static Date.ComponentsFormatStyle.Style.abbreviated.getter();
      v29 = dispatch thunk of static Equatable.== infix(_:_:)();
      v26(v12, v6);
      if ((v29 & 1) != 0)
      {
        v26(v15, v6);
        v27 = 0x4122750000000000;
        goto LABEL_19;
      }
      static Date.ComponentsFormatStyle.Style.condensedAbbreviated.getter();
      v30 = dispatch thunk of static Equatable.== infix(_:_:)();
      v26(v12, v6);
      if ((v30 & 1) != 0)
      {
        v26(v15, v6);
        v27 = 0x40F5180000000000;
        goto LABEL_19;
      }
      static Date.ComponentsFormatStyle.Style.spellOut.getter();
      v31 = dispatch thunk of static Equatable.== infix(_:_:)();
      v26(v12, v6);
      if ((v31 & 1) != 0)
      {
        v26(v15, v6);
        v27 = 0x40AC200000000000;
        goto LABEL_19;
      }
      static Date.ComponentsFormatStyle.Field.minute.getter();
      v32 = dispatch thunk of static Equatable.== infix(_:_:)();
      v26(v12, v6);
      if ((v32 & 1) != 0)
      {
        v26(v15, v6);
        v27 = 0x404E000000000000;
        goto LABEL_19;
      }
      static Date.ComponentsFormatStyle.Field.second.getter();
      v46 = dispatch thunk of static Equatable.== infix(_:_:)();
      v26(v12, v6);
      v26(v15, v6);
      v33 = 1.0;
      v34 = v52;
      if ((v46 & 1) == 0)
      {
        if (one-time initialization token for max != -1)
        {
          swift_once();
          v34 = v52;
        }
        v33 = *(double *)&static Calendar.Component.Magnitude.max;
      }
LABEL_20:
      ((void (*)(char *, char *, uint64_t))v21)(v34, v63, v6);
      static Date.ComponentsFormatStyle.Style.wide.getter();
      v35 = dispatch thunk of static Equatable.== infix(_:_:)();
      v26(v12, v6);
      if ((v35 & 1) != 0)
      {
        v26(v34, v6);
        v36 = 0x417E133800000000;
LABEL_32:
        v42 = *(double *)&v36;
        v15 = v51;
        goto LABEL_33;
      }
      static Date.ComponentsFormatStyle.Style.narrow.getter();
      v37 = dispatch thunk of static Equatable.== infix(_:_:)();
      v26(v12, v6);
      if ((v37 & 1) != 0)
      {
        v26(v34, v6);
        v36 = 0x4143C68000000000;
        goto LABEL_32;
      }
      static Date.ComponentsFormatStyle.Style.abbreviated.getter();
      v38 = dispatch thunk of static Equatable.== infix(_:_:)();
      v26(v12, v6);
      if ((v38 & 1) != 0)
      {
        v26(v34, v6);
        v36 = 0x4122750000000000;
        goto LABEL_32;
      }
      static Date.ComponentsFormatStyle.Style.condensedAbbreviated.getter();
      v39 = dispatch thunk of static Equatable.== infix(_:_:)();
      v26(v12, v6);
      if ((v39 & 1) != 0)
      {
        v26(v34, v6);
        v36 = 0x40F5180000000000;
        goto LABEL_32;
      }
      static Date.ComponentsFormatStyle.Style.spellOut.getter();
      v40 = dispatch thunk of static Equatable.== infix(_:_:)();
      v26(v12, v6);
      if ((v40 & 1) != 0)
      {
        v26(v34, v6);
        v36 = 0x40AC200000000000;
        goto LABEL_32;
      }
      static Date.ComponentsFormatStyle.Field.minute.getter();
      v41 = dispatch thunk of static Equatable.== infix(_:_:)();
      v26(v12, v6);
      if ((v41 & 1) != 0)
      {
        v26(v34, v6);
        v36 = 0x404E000000000000;
        goto LABEL_32;
      }
      static Date.ComponentsFormatStyle.Field.second.getter();
      v47 = dispatch thunk of static Equatable.== infix(_:_:)();
      v26(v12, v6);
      v26(v34, v6);
      v42 = 1.0;
      v15 = v51;
      if ((v47 & 1) == 0)
      {
        if (one-time initialization token for max != -1)
          swift_once();
        v42 = *(double *)&static Calendar.Component.Magnitude.max;
      }
LABEL_33:
      v26(v63, v6);
      v26(v60, v6);
      if (v42 >= v33)
        goto LABEL_4;
      v43 = *v58;
      if (!*v58)
      {
        __break(1u);
        return;
      }
      v44 = (char *)(v43 + v62 + v22);
      v45 = (void (*)(char *, uint64_t, uint64_t))v59[4];
      v45(v55, v43 + v61 + v22, v6);
      swift_arrayInitWithTakeFrontToBack();
      v45(v44, (uint64_t)v55, v6);
      v22 -= v53;
      if (v54 == ++v23)
      {
LABEL_4:
        v62 += v53;
        v61 += v53;
        if (++v54 == v49)
          return;
        goto LABEL_5;
      }
    }
    v26(v15, v6);
    v27 = 0x417E133800000000;
LABEL_19:
    v33 = *(double *)&v27;
    v34 = v52;
    goto LABEL_20;
  }
}

uint64_t specialized _merge<A>(low:mid:high:buffer:by:)(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  int64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v21)(char *, unint64_t, uint64_t);
  char *v22;
  double v23;
  double v24;
  void (*v25)(char *, uint64_t);
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v31;
  void (*v32)(char *, unint64_t, uint64_t);
  unint64_t v33;
  void (*v34)(char *, unint64_t, uint64_t);
  unint64_t v35;
  unint64_t v36;
  char *v37;
  char *v38;
  double v39;
  double v40;
  void (*v41)(char *, uint64_t);
  char *v42;
  BOOL v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t result;
  uint64_t v47;
  unint64_t v48;
  void (*v49)(char *, unint64_t, uint64_t);
  unint64_t v50;
  char *v51;
  uint64_t v52;
  double v53;
  double v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;

  v8 = type metadata accessor for Date.ComponentsFormatStyle.Field();
  MEMORY[0x24BDAC7A8](v8);
  v51 = (char *)&v47 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v47 - v11;
  v52 = v13;
  v14 = *(_QWORD *)(v13 + 72);
  if (!v14)
  {
    __break(1u);
LABEL_62:
    __break(1u);
LABEL_63:
    __break(1u);
    goto LABEL_64;
  }
  if (a2 - a1 == 0x8000000000000000 && v14 == -1)
    goto LABEL_62;
  v15 = a3 - a2;
  if (a3 - a2 == 0x8000000000000000 && v14 == -1)
    goto LABEL_63;
  v16 = (uint64_t)(a2 - a1) / v14;
  v57 = a1;
  v56 = a4;
  v17 = v15 / v14;
  if (v16 >= v15 / v14)
  {
    if ((v17 & 0x8000000000000000) == 0)
    {
      v19 = v17 * v14;
      if (a4 < a2 || a2 + v19 <= a4)
      {
        swift_arrayInitWithTakeFrontToBack();
      }
      else if (a4 != a2)
      {
        swift_arrayInitWithTakeBackToFront();
      }
      v29 = a4 + v19;
      v55 = a4 + v19;
      v57 = a2;
      v50 = a1;
      if (v19 >= 1 && a1 < a2)
      {
        v31 = -v14;
        v32 = *(void (**)(char *, unint64_t, uint64_t))(v52 + 16);
        v48 = a4;
        v49 = v32;
        do
        {
          v33 = a3 + v31;
          v34 = v49;
          v49(v12, v29 + v31, v8);
          v35 = a2 + v31;
          v36 = a3;
          v37 = v12;
          v38 = v51;
          v34(v51, a2 + v31, v8);
          Date.ComponentsFormatStyle.Field.magnitude.getter(&v54);
          v39 = v54;
          Date.ComponentsFormatStyle.Field.magnitude.getter(&v53);
          v40 = v53;
          v41 = *(void (**)(char *, uint64_t))(v52 + 8);
          v42 = v38;
          v12 = v37;
          v41(v42, v8);
          v41(v37, v8);
          if (v40 >= v39)
          {
            v45 = v55;
            v55 += v31;
            if (v36 < v45 || v33 >= v45)
            {
              swift_arrayInitWithTakeFrontToBack();
            }
            else if (v36 != v45)
            {
              swift_arrayInitWithTakeBackToFront();
            }
            v35 = a2;
            v44 = v48;
          }
          else
          {
            if (v36 < a2 || v33 >= a2)
            {
              swift_arrayInitWithTakeFrontToBack();
              v44 = v48;
            }
            else
            {
              v43 = v36 == a2;
              v44 = v48;
              if (!v43)
                swift_arrayInitWithTakeBackToFront();
            }
            v57 += v31;
          }
          v29 = v55;
          if (v55 <= v44)
            break;
          a2 = v35;
          a3 = v33;
        }
        while (v35 > v50);
      }
      goto LABEL_60;
    }
  }
  else if ((v16 & 0x8000000000000000) == 0)
  {
    v18 = v16 * v14;
    if (a4 < a1 || a1 + v18 <= a4)
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (a4 != a1)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    v50 = a4 + v18;
    v55 = a4 + v18;
    if (v18 >= 1 && a2 < a3)
    {
      v21 = *(void (**)(char *, unint64_t, uint64_t))(v52 + 16);
      do
      {
        v21(v12, a2, v8);
        v22 = v51;
        v21(v51, a4, v8);
        Date.ComponentsFormatStyle.Field.magnitude.getter(&v54);
        v23 = v54;
        Date.ComponentsFormatStyle.Field.magnitude.getter(&v53);
        v24 = v53;
        v25 = *(void (**)(char *, uint64_t))(v52 + 8);
        v25(v22, v8);
        v25(v12, v8);
        v26 = v57;
        if (v24 >= v23)
        {
          v28 = v56 + v14;
          if (v57 < v56 || v57 >= v28)
          {
            swift_arrayInitWithTakeFrontToBack();
          }
          else if (v57 != v56)
          {
            swift_arrayInitWithTakeBackToFront();
          }
          v56 = v28;
          v27 = a2;
        }
        else
        {
          v27 = a2 + v14;
          if (v57 < a2 || v57 >= v27)
          {
            swift_arrayInitWithTakeFrontToBack();
          }
          else if (v57 == a2)
          {
            v26 = a2;
          }
          else
          {
            swift_arrayInitWithTakeBackToFront();
          }
        }
        v57 = v26 + v14;
        a4 = v56;
        if (v56 >= v50)
          break;
        a2 = v27;
      }
      while (v27 < a3);
    }
LABEL_60:
    specialized $defer #1 <A>() in _merge<A>(low:mid:high:buffer:by:)(&v57, &v56, (uint64_t *)&v55);
    return 1;
  }
LABEL_64:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized _NativeSet.filter(_:)(uint64_t isStackAllocationSafe, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t (*v5)(char *);
  char v6;
  unint64_t v7;
  size_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  _QWORD v14[2];

  v5 = (uint64_t (*)(char *))isStackAllocationSafe;
  v14[1] = *MEMORY[0x24BDAC8D0];
  v6 = *(_BYTE *)(a3 + 32);
  v7 = (unint64_t)((1 << v6) + 63) >> 6;
  v8 = 8 * v7;
  if ((v6 & 0x3Fu) <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x24BDAC7A8](isStackAllocationSafe);
    bzero((char *)v14 - ((v8 + 15) & 0x3FFFFFFFFFFFFFF0), v8);
    specialized closure #1 in _NativeSet.filter(_:)((_QWORD *)((char *)v14 - ((v8 + 15) & 0x3FFFFFFFFFFFFFF0)), v7, a3, v5);
    v10 = v9;
    swift_release();
    if (v3)
      swift_willThrow();
  }
  else
  {
    v11 = (void *)swift_slowAlloc();
    bzero(v11, v8);
    specialized closure #1 in _NativeSet.filter(_:)((unint64_t *)v11, v7, a3, v5);
    v10 = v12;
    swift_release();
    MEMORY[0x23B7C9D54](v11, -1, -1);
  }
  return v10;
}

void specialized closure #1 in _NativeSet.filter(_:)(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(char *))
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  __n128 v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  BOOL v18;
  unint64_t v19;
  int64_t v20;
  char v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  int64_t v30;
  uint64_t (*v31)(char *);
  uint64_t v32;

  v31 = a4;
  v26 = a2;
  v27 = a1;
  v6 = type metadata accessor for Date.ComponentsFormatStyle.Field();
  v7 = *(_QWORD *)(v6 - 8);
  v8.n128_f64[0] = MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)&v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = 0;
  v32 = a3;
  v12 = *(_QWORD *)(a3 + 56);
  v28 = 0;
  v29 = a3 + 56;
  v13 = 1 << *(_BYTE *)(a3 + 32);
  v14 = -1;
  if (v13 < 64)
    v14 = ~(-1 << v13);
  v15 = v14 & v12;
  v30 = (unint64_t)(v13 + 63) >> 6;
  while (v15)
  {
    v16 = __clz(__rbit64(v15));
    v15 &= v15 - 1;
    v17 = v16 | (v11 << 6);
LABEL_17:
    (*(void (**)(char *, unint64_t, uint64_t, __n128))(v7 + 16))(v10, *(_QWORD *)(v32 + 48) + *(_QWORD *)(v7 + 72) * v17, v6, v8);
    v21 = v31(v10);
    if (v4)
    {
      (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
      return;
    }
    v22 = v21;
    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
    if ((v22 & 1) != 0)
    {
      *(unint64_t *)((char *)v27 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
      v18 = __OFADD__(v28++, 1);
      if (v18)
        goto LABEL_30;
    }
  }
  v18 = __OFADD__(v11++, 1);
  if (v18)
  {
    __break(1u);
    goto LABEL_29;
  }
  if (v11 >= v30)
    goto LABEL_27;
  v19 = *(_QWORD *)(v29 + 8 * v11);
  if (v19)
  {
LABEL_16:
    v15 = (v19 - 1) & v19;
    v17 = __clz(__rbit64(v19)) + (v11 << 6);
    goto LABEL_17;
  }
  v20 = v11 + 1;
  if (v11 + 1 >= v30)
    goto LABEL_27;
  v19 = *(_QWORD *)(v29 + 8 * v20);
  if (v19)
    goto LABEL_15;
  v20 = v11 + 2;
  if (v11 + 2 >= v30)
    goto LABEL_27;
  v19 = *(_QWORD *)(v29 + 8 * v20);
  if (v19)
    goto LABEL_15;
  v20 = v11 + 3;
  if (v11 + 3 >= v30)
  {
LABEL_27:
    v23 = v26;
    v24 = v28;
    v25 = v32;
    swift_retain();
    specialized _NativeSet.extractSubset(using:count:)(v27, v23, v24, v25);
    return;
  }
  v19 = *(_QWORD *)(v29 + 8 * v20);
  if (v19)
  {
LABEL_15:
    v11 = v20;
    goto LABEL_16;
  }
  while (1)
  {
    v11 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v11 >= v30)
      goto LABEL_27;
    v19 = *(_QWORD *)(v29 + 8 * v11);
    ++v20;
    if (v19)
      goto LABEL_16;
  }
LABEL_29:
  __break(1u);
LABEL_30:
  __break(1u);
}

void specialized Set.hash(into:)(__int128 *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t (*v8)(uint64_t);
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  int64_t v20;
  Swift::UInt v21;
  int64_t v22;
  unint64_t v23;
  unint64_t i;
  unint64_t v26;
  int64_t v27;
  uint64_t v28;
  _QWORD v29[3];
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;

  v4 = type metadata accessor for Date.ComponentsFormatStyle.Field();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for Date.ComponentsFormatStyle.Field?, v8, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)v29 - v10;
  v12 = *((_QWORD *)a1 + 8);
  v13 = a1[1];
  v31 = *a1;
  v32 = v13;
  v14 = a1[2];
  v15 = a1[3];
  v29[1] = a1;
  v33 = v14;
  v34 = v15;
  v35 = v12;
  v29[2] = Hasher._finalize()();
  v30 = a2;
  v16 = a2 + 56;
  v17 = 1 << *(_BYTE *)(a2 + 32);
  v18 = -1;
  if (v17 < 64)
    v18 = ~(-1 << v17);
  v19 = v18 & *(_QWORD *)(a2 + 56);
  v20 = (unint64_t)(v17 + 63) >> 6;
  swift_bridgeObjectRetain();
  v21 = 0;
  v22 = 0;
  if (!v19)
    goto LABEL_5;
LABEL_4:
  v23 = __clz(__rbit64(v19));
  v19 &= v19 - 1;
  for (i = v23 | (v22 << 6); ; i = __clz(__rbit64(v26)) + (v22 << 6))
  {
    (*(void (**)(char *, unint64_t, uint64_t))(v5 + 16))(v11, *(_QWORD *)(v30 + 48) + *(_QWORD *)(v5 + 72) * i, v4);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v5 + 56))(v11, 0, 1, v4);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v11, 1, v4) == 1)
      goto LABEL_19;
    (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v7, v11, v4);
    lazy protocol witness table accessor for type Date.ComponentsFormatStyle.Field and conformance Date.ComponentsFormatStyle.Field();
    v28 = dispatch thunk of Hashable._rawHashValue(seed:)();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    v21 ^= v28;
    if (v19)
      goto LABEL_4;
LABEL_5:
    if (__OFADD__(v22++, 1))
      goto LABEL_21;
    if (v22 >= v20)
      goto LABEL_18;
    v26 = *(_QWORD *)(v16 + 8 * v22);
    if (!v26)
      break;
LABEL_14:
    v19 = (v26 - 1) & v26;
  }
  v27 = v22 + 1;
  if (v22 + 1 >= v20)
  {
LABEL_18:
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56))(v11, 1, 1, v4);
LABEL_19:
    swift_release();
    Hasher._combine(_:)(v21);
    return;
  }
  v26 = *(_QWORD *)(v16 + 8 * v27);
  if (v26)
  {
    ++v22;
    goto LABEL_14;
  }
  while (1)
  {
    v22 = v27 + 1;
    if (__OFADD__(v27, 1))
      break;
    if (v22 >= v20)
      goto LABEL_18;
    v26 = *(_QWORD *)(v16 + 8 * v22);
    ++v27;
    if (v26)
      goto LABEL_14;
  }
  __break(1u);
LABEL_21:
  __break(1u);
}

uint64_t outlined destroy of (style: Duration.UnitsFormatStyle.Attributed, largestField: Date.ComponentsFormatStyle.Field, smallestField: Date.ComponentsFormatStyle.Field)(uint64_t a1)
{
  uint64_t v2;

  type metadata accessor for (style: Date.ComponentsFormatStyle, largestField: Date.ComponentsFormatStyle.Field, smallestField: Date.ComponentsFormatStyle.Field)(0, &lazy cache variable for type metadata for (style: Duration.UnitsFormatStyle.Attributed, largestField: Date.ComponentsFormatStyle.Field, smallestField: Date.ComponentsFormatStyle.Field), (void (*)(uint64_t))MEMORY[0x24BDD0960]);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t specialized static SystemFormatStyle.DateOffset.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  int *v4;
  char v5;
  char v6;

  if ((static Date.== infix(_:_:)() & 1) != 0
    && (v4 = (int *)type metadata accessor for SystemFormatStyle.DateOffset(),
        specialized static Set.== infix(_:_:)(*(_QWORD *)(a1 + v4[5]), *(_QWORD *)(a2 + v4[5])),
        (v5 & 1) != 0)
    && *(_QWORD *)(a1 + v4[6]) == *(_QWORD *)(a2 + v4[6])
    && (MEMORY[0x23B7C47D4](a1 + v4[7], a2 + v4[7]) & 1) != 0
    && *(_QWORD *)(a1 + v4[8]) == *(_QWORD *)(a2 + v4[8])
    && (MEMORY[0x23B7C526C](a1 + v4[9], a2 + v4[9]) & 1) != 0
    && (MEMORY[0x23B7C5374](a1 + v4[10], a2 + v4[10]) & 1) != 0
    && *(unsigned __int8 *)(a1 + v4[11]) == *(unsigned __int8 *)(a2 + v4[11])
    && *(unsigned __int8 *)(a1 + v4[12]) == *(unsigned __int8 *)(a2 + v4[12]))
  {
    v6 = *(_BYTE *)(a1 + v4[13]) ^ *(_BYTE *)(a2 + v4[13]) ^ 1;
  }
  else
  {
    v6 = 0;
  }
  return v6 & 1;
}

unint64_t lazy protocol witness table accessor for type SystemFormatStyle.DateOffset.CodingKeys and conformance SystemFormatStyle.DateOffset.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SystemFormatStyle.DateOffset.CodingKeys and conformance SystemFormatStyle.DateOffset.CodingKeys;
  if (!lazy protocol witness table cache variable for type SystemFormatStyle.DateOffset.CodingKeys and conformance SystemFormatStyle.DateOffset.CodingKeys)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for SystemFormatStyle.DateOffset.CodingKeys, &unk_250626850);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SystemFormatStyle.DateOffset.CodingKeys and conformance SystemFormatStyle.DateOffset.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SystemFormatStyle.DateOffset.CodingKeys and conformance SystemFormatStyle.DateOffset.CodingKeys;
  if (!lazy protocol witness table cache variable for type SystemFormatStyle.DateOffset.CodingKeys and conformance SystemFormatStyle.DateOffset.CodingKeys)
  {
    result = MEMORY[0x23B7C9C04]("}J<\x1B$\r\v", &unk_250626850);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SystemFormatStyle.DateOffset.CodingKeys and conformance SystemFormatStyle.DateOffset.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SystemFormatStyle.DateOffset.CodingKeys and conformance SystemFormatStyle.DateOffset.CodingKeys;
  if (!lazy protocol witness table cache variable for type SystemFormatStyle.DateOffset.CodingKeys and conformance SystemFormatStyle.DateOffset.CodingKeys)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for SystemFormatStyle.DateOffset.CodingKeys, &unk_250626850);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SystemFormatStyle.DateOffset.CodingKeys and conformance SystemFormatStyle.DateOffset.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SystemFormatStyle.DateOffset.CodingKeys and conformance SystemFormatStyle.DateOffset.CodingKeys;
  if (!lazy protocol witness table cache variable for type SystemFormatStyle.DateOffset.CodingKeys and conformance SystemFormatStyle.DateOffset.CodingKeys)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for SystemFormatStyle.DateOffset.CodingKeys, &unk_250626850);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SystemFormatStyle.DateOffset.CodingKeys and conformance SystemFormatStyle.DateOffset.CodingKeys);
  }
  return result;
}

void type metadata accessor for Set<Date.ComponentsFormatStyle.Field>(uint64_t a1)
{
  type metadata accessor for CombinedAnimationState<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>>.Entry(a1, &lazy cache variable for type metadata for Set<Date.ComponentsFormatStyle.Field>, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE6C8], lazy protocol witness table accessor for type Date.ComponentsFormatStyle.Field and conformance Date.ComponentsFormatStyle.Field, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE16D8]);
}

uint64_t lazy protocol witness table accessor for type Date.ComponentsFormatStyle.Field and conformance Date.ComponentsFormatStyle.Field()
{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type Date.ComponentsFormatStyle.Field and conformance Date.ComponentsFormatStyle.Field, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE6C8], MEMORY[0x24BDCE6E0]);
}

{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type Date.ComponentsFormatStyle.Field and conformance Date.ComponentsFormatStyle.Field, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE6C8], MEMORY[0x24BDCE6D8]);
}

{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type Date.ComponentsFormatStyle.Field and conformance Date.ComponentsFormatStyle.Field, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE6C8], MEMORY[0x24BDCE6F0]);
}

unint64_t lazy protocol witness table accessor for type TimeDataFormatting.UpdateFrequency and conformance TimeDataFormatting.UpdateFrequency()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TimeDataFormatting.UpdateFrequency and conformance TimeDataFormatting.UpdateFrequency;
  if (!lazy protocol witness table cache variable for type TimeDataFormatting.UpdateFrequency and conformance TimeDataFormatting.UpdateFrequency)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for TimeDataFormatting.UpdateFrequency, &type metadata for TimeDataFormatting.UpdateFrequency);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TimeDataFormatting.UpdateFrequency and conformance TimeDataFormatting.UpdateFrequency);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TimeDataFormatting.UpdateFrequency and conformance TimeDataFormatting.UpdateFrequency;
  if (!lazy protocol witness table cache variable for type TimeDataFormatting.UpdateFrequency and conformance TimeDataFormatting.UpdateFrequency)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for TimeDataFormatting.UpdateFrequency, &type metadata for TimeDataFormatting.UpdateFrequency);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TimeDataFormatting.UpdateFrequency and conformance TimeDataFormatting.UpdateFrequency);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TimeDataFormatting.UpdateFrequency and conformance TimeDataFormatting.UpdateFrequency;
  if (!lazy protocol witness table cache variable for type TimeDataFormatting.UpdateFrequency and conformance TimeDataFormatting.UpdateFrequency)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for TimeDataFormatting.UpdateFrequency, &type metadata for TimeDataFormatting.UpdateFrequency);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TimeDataFormatting.UpdateFrequency and conformance TimeDataFormatting.UpdateFrequency);
  }
  return result;
}

void type metadata accessor for KeyedEncodingContainer<SystemFormatStyle.DateOffset.CodingKeys>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, void *, unint64_t))
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    v6 = lazy protocol witness table accessor for type SystemFormatStyle.DateOffset.CodingKeys and conformance SystemFormatStyle.DateOffset.CodingKeys();
    v7 = a3(a1, &unk_250626850, v6);
    if (!v8)
      atomic_store(v7, a2);
  }
}

uint64_t lazy protocol witness table accessor for type Set<Date.ComponentsFormatStyle.Field> and conformance <> Set<A>(unint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t (*a3)(void), uint64_t a4)
{
  uint64_t result;
  uint64_t v8;
  uint64_t v9;

  result = *a1;
  if (!result)
  {
    v8 = a2(255);
    v9 = a3();
    result = MEMORY[0x23B7C9C04](a4, v8, &v9);
    atomic_store(result, a1);
  }
  return result;
}

void type metadata accessor for Range<Date>?(uint64_t a1)
{
  type metadata accessor for [(_:)](a1, &lazy cache variable for type metadata for Range<Date>?, (uint64_t (*)(uint64_t))type metadata accessor for Range<Date>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
}

void type metadata accessor for (Date.ComponentsFormatStyle, Date.ComponentsFormatStyle.Field, Date.ComponentsFormatStyle.Field)(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  unint64_t TupleTypeMetadata3;
  uint64_t v5;

  if (!*a2)
  {
    a3(255);
    type metadata accessor for Date.ComponentsFormatStyle.Field();
    TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
    if (!v5)
      atomic_store(TupleTypeMetadata3, a2);
  }
}

void type metadata accessor for (Duration.TimeFormatStyle.Attributed, Date.ComponentsFormatStyle.Field)()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!lazy cache variable for type metadata for (Duration.TimeFormatStyle.Attributed, Date.ComponentsFormatStyle.Field))
  {
    type metadata accessor for Duration.TimeFormatStyle.Attributed();
    type metadata accessor for Date.ComponentsFormatStyle.Field();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (Duration.TimeFormatStyle.Attributed, Date.ComponentsFormatStyle.Field));
  }
}

uint64_t outlined destroy of (style: Duration.UnitsFormatStyle.Attributed, largestField: Date.ComponentsFormatStyle.Field, smallestField: Date.ComponentsFormatStyle.Field)?(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v6;

  type metadata accessor for (style: Date.ComponentsFormatStyle, largestField: Date.ComponentsFormatStyle.Field, smallestField: Date.ComponentsFormatStyle.Field)?(0, a2, a3, a4, a5);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(a1, v6);
  return a1;
}

BOOL partial apply for closure #1 in SystemFormatStyle.DateOffset.discreteInput(after:)(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in SystemFormatStyle.DateOffset.discreteInput(before:)(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

void type metadata accessor for InterfaceIdiomBox<ComplicationInterfaceIdiom>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4)
{
  unint64_t v5;
  uint64_t v6;

  if (!*a2)
  {
    v5 = type metadata accessor for InterfaceIdiomBox(0, a3, a4, a4);
    if (!v6)
      atomic_store(v5, a2);
  }
}

uint64_t base witness table accessor for Decodable in SystemFormatStyle.DateOffset()
{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type SystemFormatStyle.DateOffset and conformance SystemFormatStyle.DateOffset, (uint64_t (*)(uint64_t))type metadata accessor for SystemFormatStyle.DateOffset, (uint64_t)&protocol conformance descriptor for SystemFormatStyle.DateOffset);
}

uint64_t base witness table accessor for Encodable in SystemFormatStyle.DateOffset()
{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type SystemFormatStyle.DateOffset and conformance SystemFormatStyle.DateOffset, (uint64_t (*)(uint64_t))type metadata accessor for SystemFormatStyle.DateOffset, (uint64_t)&protocol conformance descriptor for SystemFormatStyle.DateOffset);
}

uint64_t base witness table accessor for Hashable in SystemFormatStyle.DateOffset()
{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type SystemFormatStyle.DateOffset and conformance SystemFormatStyle.DateOffset, (uint64_t (*)(uint64_t))type metadata accessor for SystemFormatStyle.DateOffset, (uint64_t)&protocol conformance descriptor for SystemFormatStyle.DateOffset);
}

uint64_t base witness table accessor for Equatable in SystemFormatStyle.DateOffset()
{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type SystemFormatStyle.DateOffset and conformance SystemFormatStyle.DateOffset, (uint64_t (*)(uint64_t))type metadata accessor for SystemFormatStyle.DateOffset, (uint64_t)&protocol conformance descriptor for SystemFormatStyle.DateOffset);
}

uint64_t base witness table accessor for FormatStyle in SystemFormatStyle.DateOffset()
{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type SystemFormatStyle.DateOffset and conformance SystemFormatStyle.DateOffset, (uint64_t (*)(uint64_t))type metadata accessor for SystemFormatStyle.DateOffset, (uint64_t)&protocol conformance descriptor for SystemFormatStyle.DateOffset);
}

_UNKNOWN **associated type witness table accessor for FormatStyle.FormatOutput : AttributedStringConvertible in SystemFormatStyle.DateOffset()
{
  return &protocol witness table for AttributedString;
}

uint64_t instantiation function for generic protocol witness table for SystemFormatStyle.DateOffset(uint64_t a1)
{
  uint64_t result;

  result = lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type SystemFormatStyle.DateOffset and conformance SystemFormatStyle.DateOffset, (uint64_t (*)(uint64_t))type metadata accessor for SystemFormatStyle.DateOffset, (uint64_t)&protocol conformance descriptor for SystemFormatStyle.DateOffset);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

{
  uint64_t result;

  result = lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type SystemFormatStyle.DateOffset and conformance SystemFormatStyle.DateOffset, (uint64_t (*)(uint64_t))type metadata accessor for SystemFormatStyle.DateOffset, (uint64_t)&protocol conformance descriptor for SystemFormatStyle.DateOffset);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

{
  uint64_t result;

  result = lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type SystemFormatStyle.DateOffset and conformance SystemFormatStyle.DateOffset, (uint64_t (*)(uint64_t))type metadata accessor for SystemFormatStyle.DateOffset, (uint64_t)&protocol conformance descriptor for SystemFormatStyle.DateOffset);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

_QWORD *initializeBufferWithCopyOfBuffer for SystemFormatStyle.DateOffset(_QWORD *a1, _QWORD *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  void (*v13)(char *, char *, uint64_t);
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v23 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v23 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for Date();
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[6];
    *(_QWORD *)((char *)a1 + a3[5]) = *(_QWORD *)((char *)a2 + a3[5]);
    *(_QWORD *)((char *)a1 + v8) = *(_QWORD *)((char *)a2 + v8);
    v9 = a3[7];
    v10 = (char *)a1 + v9;
    v11 = (char *)a2 + v9;
    v12 = type metadata accessor for NumberFormatStyleConfiguration.SignDisplayStrategy();
    v13 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 16);
    swift_bridgeObjectRetain();
    v13(v10, v11, v12);
    v14 = a3[9];
    *(_QWORD *)((char *)a1 + a3[8]) = *(_QWORD *)((char *)a2 + a3[8]);
    v15 = (char *)a1 + v14;
    v16 = (char *)a2 + v14;
    v17 = type metadata accessor for Locale();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v17 - 8) + 16))(v15, v16, v17);
    v18 = a3[10];
    v19 = (char *)a1 + v18;
    v20 = (char *)a2 + v18;
    v21 = type metadata accessor for Calendar();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v21 - 8) + 16))(v19, v20, v21);
    v22 = a3[12];
    *((_BYTE *)a1 + a3[11]) = *((_BYTE *)a2 + a3[11]);
    *((_BYTE *)a1 + v22) = *((_BYTE *)a2 + v22);
    *((_BYTE *)a1 + a3[13]) = *((_BYTE *)a2 + a3[13]);
  }
  return a1;
}

uint64_t destroy for SystemFormatStyle.DateOffset(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  swift_bridgeObjectRelease();
  v5 = a1 + a2[7];
  v6 = type metadata accessor for NumberFormatStyleConfiguration.SignDisplayStrategy();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  v7 = a1 + a2[9];
  v8 = type metadata accessor for Locale();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
  v9 = a1 + a2[10];
  v10 = type metadata accessor for Calendar();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v9, v10);
}

uint64_t initializeWithCopy for SystemFormatStyle.DateOffset(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v6 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[6];
  *(_QWORD *)(a1 + a3[5]) = *(_QWORD *)(a2 + a3[5]);
  *(_QWORD *)(a1 + v7) = *(_QWORD *)(a2 + v7);
  v8 = a3[7];
  v9 = a1 + v8;
  v10 = a2 + v8;
  v11 = type metadata accessor for NumberFormatStyleConfiguration.SignDisplayStrategy();
  v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
  swift_bridgeObjectRetain();
  v12(v9, v10, v11);
  v13 = a3[9];
  *(_QWORD *)(a1 + a3[8]) = *(_QWORD *)(a2 + a3[8]);
  v14 = a1 + v13;
  v15 = a2 + v13;
  v16 = type metadata accessor for Locale();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(v14, v15, v16);
  v17 = a3[10];
  v18 = a1 + v17;
  v19 = a2 + v17;
  v20 = type metadata accessor for Calendar();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 16))(v18, v19, v20);
  v21 = a3[12];
  *(_BYTE *)(a1 + a3[11]) = *(_BYTE *)(a2 + a3[11]);
  *(_BYTE *)(a1 + v21) = *(_BYTE *)(a2 + v21);
  *(_BYTE *)(a1 + a3[13]) = *(_BYTE *)(a2 + a3[13]);
  return a1;
}

uint64_t assignWithCopy for SystemFormatStyle.DateOffset(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v6 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  *(_QWORD *)(a1 + a3[5]) = *(_QWORD *)(a2 + a3[5]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + a3[6]) = *(_QWORD *)(a2 + a3[6]);
  v7 = a3[7];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for NumberFormatStyleConfiguration.SignDisplayStrategy();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 24))(v8, v9, v10);
  *(_QWORD *)(a1 + a3[8]) = *(_QWORD *)(a2 + a3[8]);
  v11 = a3[9];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = type metadata accessor for Locale();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 24))(v12, v13, v14);
  v15 = a3[10];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = type metadata accessor for Calendar();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 24))(v16, v17, v18);
  *(_BYTE *)(a1 + a3[11]) = *(_BYTE *)(a2 + a3[11]);
  *(_BYTE *)(a1 + a3[12]) = *(_BYTE *)(a2 + a3[12]);
  *(_BYTE *)(a1 + a3[13]) = *(_BYTE *)(a2 + a3[13]);
  return a1;
}

uint64_t initializeWithTake for SystemFormatStyle.DateOffset(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v6 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[6];
  *(_QWORD *)(a1 + a3[5]) = *(_QWORD *)(a2 + a3[5]);
  *(_QWORD *)(a1 + v7) = *(_QWORD *)(a2 + v7);
  v8 = a3[7];
  v9 = a1 + v8;
  v10 = a2 + v8;
  v11 = type metadata accessor for NumberFormatStyleConfiguration.SignDisplayStrategy();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v9, v10, v11);
  v12 = a3[9];
  *(_QWORD *)(a1 + a3[8]) = *(_QWORD *)(a2 + a3[8]);
  v13 = a1 + v12;
  v14 = a2 + v12;
  v15 = type metadata accessor for Locale();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 32))(v13, v14, v15);
  v16 = a3[10];
  v17 = a1 + v16;
  v18 = a2 + v16;
  v19 = type metadata accessor for Calendar();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 32))(v17, v18, v19);
  v20 = a3[12];
  *(_BYTE *)(a1 + a3[11]) = *(_BYTE *)(a2 + a3[11]);
  *(_BYTE *)(a1 + v20) = *(_BYTE *)(a2 + v20);
  *(_BYTE *)(a1 + a3[13]) = *(_BYTE *)(a2 + a3[13]);
  return a1;
}

uint64_t assignWithTake for SystemFormatStyle.DateOffset(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v6 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  *(_QWORD *)(a1 + a3[5]) = *(_QWORD *)(a2 + a3[5]);
  swift_bridgeObjectRelease();
  v7 = a3[7];
  *(_QWORD *)(a1 + a3[6]) = *(_QWORD *)(a2 + a3[6]);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for NumberFormatStyleConfiguration.SignDisplayStrategy();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  v11 = a3[9];
  *(_QWORD *)(a1 + a3[8]) = *(_QWORD *)(a2 + a3[8]);
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = type metadata accessor for Locale();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 40))(v12, v13, v14);
  v15 = a3[10];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = type metadata accessor for Calendar();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 40))(v16, v17, v18);
  v19 = a3[12];
  *(_BYTE *)(a1 + a3[11]) = *(_BYTE *)(a2 + a3[11]);
  *(_BYTE *)(a1 + v19) = *(_BYTE *)(a2 + v19);
  *(_BYTE *)(a1 + a3[13]) = *(_BYTE *)(a2 + a3[13]);
  return a1;
}

uint64_t getEnumTagSinglePayload for SystemFormatStyle.DateOffset()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_234D59358(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  unint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v6 = type metadata accessor for Date();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
    return v9(v10, a2, v8);
  }
  if ((_DWORD)a2 != 0x7FFFFFFF)
  {
    v13 = type metadata accessor for NumberFormatStyleConfiguration.SignDisplayStrategy();
    v14 = *(_QWORD *)(v13 - 8);
    if (*(_DWORD *)(v14 + 84) == (_DWORD)a2)
    {
      v8 = v13;
      v15 = a3[7];
    }
    else
    {
      v16 = type metadata accessor for Locale();
      v14 = *(_QWORD *)(v16 - 8);
      if (*(_DWORD *)(v14 + 84) == (_DWORD)a2)
      {
        v8 = v16;
        v15 = a3[9];
      }
      else
      {
        v8 = type metadata accessor for Calendar();
        v14 = *(_QWORD *)(v8 - 8);
        v15 = a3[10];
      }
    }
    v10 = a1 + v15;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v14 + 48);
    return v9(v10, a2, v8);
  }
  v11 = *(_QWORD *)(a1 + a3[5]);
  if (v11 >= 0xFFFFFFFF)
    LODWORD(v11) = -1;
  return (v11 + 1);
}

uint64_t storeEnumTagSinglePayload for SystemFormatStyle.DateOffset()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_234D59454(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  result = type metadata accessor for Date();
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = result;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    if (a3 == 0x7FFFFFFF)
    {
      *(_QWORD *)(a1 + a4[5]) = (a2 - 1);
      return result;
    }
    v13 = type metadata accessor for NumberFormatStyleConfiguration.SignDisplayStrategy();
    v14 = *(_QWORD *)(v13 - 8);
    if (*(_DWORD *)(v14 + 84) == a3)
    {
      v10 = v13;
      v15 = a4[7];
    }
    else
    {
      v16 = type metadata accessor for Locale();
      v14 = *(_QWORD *)(v16 - 8);
      if (*(_DWORD *)(v14 + 84) == a3)
      {
        v10 = v16;
        v15 = a4[9];
      }
      else
      {
        v10 = type metadata accessor for Calendar();
        v14 = *(_QWORD *)(v10 - 8);
        v15 = a4[10];
      }
    }
    v12 = a1 + v15;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }
  return v11(v12, a2, a2, v10);
}

uint64_t type metadata completion function for SystemFormatStyle.DateOffset()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;

  result = type metadata accessor for Date();
  if (v1 <= 0x3F)
  {
    result = type metadata accessor for NumberFormatStyleConfiguration.SignDisplayStrategy();
    if (v2 <= 0x3F)
    {
      result = type metadata accessor for Locale();
      if (v3 <= 0x3F)
      {
        result = type metadata accessor for Calendar();
        if (v4 <= 0x3F)
        {
          swift_initStructMetadata();
          return 0;
        }
      }
    }
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for SystemFormatStyle.DateOffset.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 9 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 9) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF7)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF6)
    return ((uint64_t (*)(void))((char *)&loc_234D59678 + 4 * byte_23529D83F[v4]))();
  *a1 = a2 + 9;
  return ((uint64_t (*)(void))((char *)sub_234D596AC + 4 * byte_23529D83A[v4]))();
}

uint64_t sub_234D596AC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_234D596B4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x234D596BCLL);
  return result;
}

uint64_t sub_234D596C8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x234D596D0);
  *(_BYTE *)result = a2 + 9;
  return result;
}

uint64_t sub_234D596D4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_234D596DC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for SystemFormatStyle.DateOffset.CodingKeys()
{
  return &unk_250626850;
}

uint64_t specialized SystemFormatStyle.DateOffset.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x726F68636E61 && a2 == 0xE600000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x466465776F6C6C61 && a2 == 0xED000073646C6569
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x646C65694678616DLL && a2 == 0xED0000746E756F43
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 1852270963 && a2 == 0xE400000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x69726156657A6973 && a2 == 0xEB00000000746E61
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x656C61636F6CLL && a2 == 0xE600000000000000
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0x7261646E656C6163 && a2 == 0xE800000000000000
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0x7246657461647075 && a2 == 0xEF79636E65757165
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else if (a1 == 0x6964496863746177 && a2 == 0xEA00000000006D6FLL
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 8;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x80000002352E27D0)
  {
    swift_bridgeObjectRelease();
    return 9;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 9;
    else
      return 10;
  }
}

void type metadata accessor for ClosedRange<AttributedString.Index>(uint64_t a1)
{
  type metadata accessor for CombinedAnimationState<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>>.Entry(a1, &lazy cache variable for type metadata for ClosedRange<AttributedString.Index>, (uint64_t (*)(uint64_t))MEMORY[0x24BDCC4F0], lazy protocol witness table accessor for type AttributedString.Index and conformance AttributedString.Index, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE08B8]);
}

void type metadata accessor for ReversedCollection<DefaultIndices<AttributedString.CharacterView>>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;

  if (!*a2)
  {
    type metadata accessor for DefaultIndices<AttributedString.CharacterView>(255);
    v7 = v6;
    v8 = lazy protocol witness table accessor for type Set<Date.ComponentsFormatStyle.Field> and conformance <> Set<A>((unint64_t *)&lazy protocol witness table cache variable for type DefaultIndices<AttributedString.CharacterView> and conformance <> DefaultIndices<A>, (uint64_t (*)(uint64_t))type metadata accessor for DefaultIndices<AttributedString.CharacterView>, lazy protocol witness table accessor for type AttributedString.CharacterView and conformance AttributedString.CharacterView, MEMORY[0x24BEE0658]);
    v9 = a3(a1, v7, v8);
    if (!v10)
      atomic_store(v9, a2);
  }
}

void type metadata accessor for (lower: AttributedString.Index, upper: AttributedString.Index)(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  unint64_t TupleTypeMetadata2;
  uint64_t v5;

  if (!*a2)
  {
    a3(255);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v5)
      atomic_store(TupleTypeMetadata2, a2);
  }
}

uint64_t sub_234D59D74()
{
  return MEMORY[0x24BDCC060];
}

uint64_t sub_234D59D84()
{
  return 8;
}

uint64_t sub_234D59D90()
{
  return swift_release();
}

uint64_t sub_234D59D98(_QWORD *a1, _QWORD *a2)
{
  *a2 = *a1;
  return swift_retain();
}

_QWORD *sub_234D59DAC(_QWORD *result, _QWORD *a2)
{
  *a2 = *result;
  return result;
}

uint64_t sub_234D59DB8()
{
  swift_unknownObjectRelease();
  return swift_deallocObject();
}

BOOL partial apply for closure #1 in SystemFormatStyle.DateOffset.applicableFields(for:)(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in SystemFormatStyle.DateOffset.applicableFields(for:)(a1, *(_QWORD *)(v1 + 16));
}

uint64_t lazy protocol witness table accessor for type [AttributedString.InterpolationOptions] and conformance [A](unint64_t *a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t a4)
{
  uint64_t result;
  uint64_t v7;

  result = *a1;
  if (!result)
  {
    type metadata accessor for [(_:)](255, a2, a3, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1250]);
    result = MEMORY[0x23B7C9C04](a4, v7);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ArraySlice<Date.ComponentsFormatStyle.Field> and conformance ArraySlice<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type ArraySlice<Date.ComponentsFormatStyle.Field> and conformance ArraySlice<A>;
  if (!lazy protocol witness table cache variable for type ArraySlice<Date.ComponentsFormatStyle.Field> and conformance ArraySlice<A>)
  {
    type metadata accessor for [(_:)](255, &lazy cache variable for type metadata for ArraySlice<Date.ComponentsFormatStyle.Field>, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE6C8], MEMORY[0x24BEE2150]);
    result = MEMORY[0x23B7C9C04](MEMORY[0x24BEE2190], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ArraySlice<Date.ComponentsFormatStyle.Field> and conformance ArraySlice<A>);
  }
  return result;
}

uint64_t outlined destroy of (style: Duration.TimeFormatStyle.Attributed, smallestField: Date.ComponentsFormatStyle.Field)?(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v4;

  type metadata accessor for [(_:)](0, a2, a3, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  return a1;
}

BOOL partial apply for closure #1 in SystemFormatStyle.DateOffset.discreteInput(before:)(uint64_t a1)
{
  return partial apply for closure #1 in SystemFormatStyle.DateOffset.discreteInput(after:)(a1);
}

__n128 VariableBlurStyle.init(radius:isOpaque:dither:mask:)@<Q0>(char a1@<W0>, char a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X8>, double a5@<D0>)
{
  int v5;
  __int128 v6;
  __int128 v7;
  __n128 result;
  __int128 v9;

  v5 = *(_DWORD *)(a3 + 96);
  *(double *)a4 = a5;
  *(_BYTE *)(a4 + 8) = a1;
  *(_BYTE *)(a4 + 9) = a2;
  v6 = *(_OWORD *)(a3 + 16);
  *(_OWORD *)(a4 + 16) = *(_OWORD *)a3;
  *(_OWORD *)(a4 + 32) = v6;
  v7 = *(_OWORD *)(a3 + 48);
  *(_OWORD *)(a4 + 48) = *(_OWORD *)(a3 + 32);
  *(_OWORD *)(a4 + 64) = v7;
  result = *(__n128 *)(a3 + 64);
  v9 = *(_OWORD *)(a3 + 80);
  *(__n128 *)(a4 + 80) = result;
  *(_OWORD *)(a4 + 96) = v9;
  *(_DWORD *)(a4 + 112) = v5;
  return result;
}

double VariableBlurStyle.caFilterRadius.setter(double a1)
{
  double *v1;
  double result;

  result = a1 + a1;
  *v1 = result;
  return result;
}

BOOL VariableBlurStyle.isIdentity.getter()
{
  uint64_t v0;

  return *(double *)v0 <= 0.0 || *(unsigned __int8 *)(v0 + 113) << 8 == 512;
}

double VariableBlurStyle.radius.getter()
{
  uint64_t v0;

  return *(double *)v0;
}

uint64_t (*VariableBlurStyle.radius.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t VariableBlurStyle.isOpaque.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 8);
}

uint64_t VariableBlurStyle.isOpaque.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 8) = result;
  return result;
}

uint64_t (*VariableBlurStyle.isOpaque.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t VariableBlurStyle.dither.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 9);
}

uint64_t VariableBlurStyle.dither.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 9) = result;
  return result;
}

uint64_t (*VariableBlurStyle.dither.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

id VariableBlurStyle.mask.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;

  v2 = *(void **)(v1 + 16);
  v3 = *(_QWORD *)(v1 + 24);
  v4 = *(_QWORD *)(v1 + 32);
  v5 = *(_QWORD *)(v1 + 40);
  v6 = *(_QWORD *)(v1 + 48);
  v7 = *(_QWORD *)(v1 + 56);
  v8 = *(_QWORD *)(v1 + 64);
  v9 = *(_QWORD *)(v1 + 72);
  v10 = *(_QWORD *)(v1 + 80);
  v11 = *(_QWORD *)(v1 + 88);
  v12 = *(_QWORD *)(v1 + 96);
  v13 = *(_QWORD *)(v1 + 104);
  v14 = *(_DWORD *)(v1 + 112);
  *(_QWORD *)a1 = v2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 24) = v5;
  *(_QWORD *)(a1 + 32) = v6;
  *(_QWORD *)(a1 + 40) = v7;
  *(_QWORD *)(a1 + 48) = v8;
  *(_QWORD *)(a1 + 56) = v9;
  *(_QWORD *)(a1 + 64) = v10;
  *(_QWORD *)(a1 + 72) = v11;
  *(_QWORD *)(a1 + 80) = v12;
  *(_QWORD *)(a1 + 88) = v13;
  *(_DWORD *)(a1 + 96) = v14;
  return outlined copy of VariableBlurStyle.Mask(v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, BYTE1(v14));
}

__n128 VariableBlurStyle.mask.setter(__int128 *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  __n128 result;
  __n128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;

  v9 = a1[1];
  v10 = *a1;
  v7 = a1[3];
  v8 = a1[2];
  v6 = (__n128)a1[4];
  v2 = *((_QWORD *)a1 + 10);
  v3 = *((_QWORD *)a1 + 11);
  v4 = *((_DWORD *)a1 + 24);
  outlined consume of VariableBlurStyle.Mask(*(void **)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), *(_QWORD *)(v1 + 48), *(_QWORD *)(v1 + 56), *(_QWORD *)(v1 + 64), *(_QWORD *)(v1 + 72), *(_QWORD *)(v1 + 80), *(_QWORD *)(v1 + 88), *(_QWORD *)(v1 + 96), *(_QWORD *)(v1 + 104), *(_DWORD *)(v1 + 112), BYTE1(*(_DWORD *)(v1 + 112)));
  *(_OWORD *)(v1 + 16) = v10;
  *(_OWORD *)(v1 + 32) = v9;
  *(_OWORD *)(v1 + 48) = v8;
  *(_OWORD *)(v1 + 64) = v7;
  result = v6;
  *(__n128 *)(v1 + 80) = v6;
  *(_QWORD *)(v1 + 96) = v2;
  *(_QWORD *)(v1 + 104) = v3;
  *(_DWORD *)(v1 + 112) = v4;
  return result;
}

uint64_t (*VariableBlurStyle.mask.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

double VariableBlurStyle.caFilterRadius.getter()
{
  double *v0;

  return *v0 * 0.5;
}

double (*VariableBlurStyle.caFilterRadius.modify(uint64_t a1))(uint64_t a1)
{
  double *v1;

  *(_QWORD *)(a1 + 8) = v1;
  *(double *)a1 = *v1 * 0.5;
  return VariableBlurStyle.caFilterRadius.modify;
}

double VariableBlurStyle.caFilterRadius.modify(uint64_t a1)
{
  double result;

  result = *(double *)a1 + *(double *)a1;
  **(double **)(a1 + 8) = result;
  return result;
}

id VariableBlurStyle.effectValue(size:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;

  v20 = *((unsigned __int8 *)v1 + 8);
  v21 = *v1;
  v3 = *((unsigned __int8 *)v1 + 9);
  v4 = v1[3];
  v18 = v1[4];
  v19 = (void *)v1[2];
  v16 = v1[6];
  v17 = v1[5];
  v5 = v1[8];
  v15 = v1[7];
  v7 = v1[9];
  v6 = v1[10];
  v8 = v1[11];
  v9 = v1[12];
  v10 = v1[13];
  v11 = *((_DWORD *)v1 + 28);
  v12 = swift_allocObject();
  v13 = 256;
  if (!v3)
    v13 = 0;
  *(_QWORD *)(v12 + 16) = v21;
  *(_QWORD *)(v12 + 24) = v13 | v20;
  *(_QWORD *)(v12 + 32) = v19;
  *(_QWORD *)(v12 + 40) = v4;
  *(_QWORD *)(v12 + 48) = v18;
  *(_QWORD *)(v12 + 56) = v17;
  *(_QWORD *)(v12 + 64) = v16;
  *(_QWORD *)(v12 + 72) = v15;
  *(_QWORD *)(v12 + 80) = v5;
  *(_QWORD *)(v12 + 88) = v7;
  *(_QWORD *)(v12 + 96) = v6;
  *(_QWORD *)(v12 + 104) = v8;
  *(_QWORD *)(v12 + 112) = v9;
  *(_QWORD *)(v12 + 120) = v10;
  *(_DWORD *)(v12 + 128) = v11;
  *(_BYTE *)(v12 + 132) = 1;
  *(_QWORD *)a1 = v12;
  *(_DWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 12) = 9;
  return outlined copy of VariableBlurStyle.Mask(v19, v4, v18, v17, v16, v15, v5, v7, v6, v8, v9, v10, v11, BYTE1(v11));
}

id protocol witness for _RendererEffect.effectValue(size:) in conformance VariableBlurStyle@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;

  v20 = *((unsigned __int8 *)v1 + 8);
  v21 = *v1;
  v3 = *((unsigned __int8 *)v1 + 9);
  v4 = v1[3];
  v18 = v1[4];
  v19 = (void *)v1[2];
  v16 = v1[6];
  v17 = v1[5];
  v5 = v1[8];
  v15 = v1[7];
  v7 = v1[9];
  v6 = v1[10];
  v8 = v1[11];
  v9 = v1[12];
  v10 = v1[13];
  v11 = *((_DWORD *)v1 + 28);
  v12 = swift_allocObject();
  v13 = 256;
  if (!v3)
    v13 = 0;
  *(_QWORD *)(v12 + 16) = v21;
  *(_QWORD *)(v12 + 24) = v13 | v20;
  *(_QWORD *)(v12 + 32) = v19;
  *(_QWORD *)(v12 + 40) = v4;
  *(_QWORD *)(v12 + 48) = v18;
  *(_QWORD *)(v12 + 56) = v17;
  *(_QWORD *)(v12 + 64) = v16;
  *(_QWORD *)(v12 + 72) = v15;
  *(_QWORD *)(v12 + 80) = v5;
  *(_QWORD *)(v12 + 88) = v7;
  *(_QWORD *)(v12 + 96) = v6;
  *(_QWORD *)(v12 + 104) = v8;
  *(_QWORD *)(v12 + 112) = v9;
  *(_QWORD *)(v12 + 120) = v10;
  *(_DWORD *)(v12 + 128) = v11;
  *(_BYTE *)(v12 + 132) = 1;
  *(_QWORD *)a1 = v12;
  *(_DWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 12) = 9;
  return outlined copy of VariableBlurStyle.Mask(v19, v4, v18, v17, v16, v15, v5, v7, v6, v8, v9, v10, v11, BYTE1(v11));
}

double VariableBlurStyle.animatableData.getter()
{
  uint64_t v0;

  return *(double *)v0;
}

void VariableBlurStyle.animatableData.setter(double a1)
{
  double *v1;

  *v1 = a1;
}

double (*VariableBlurStyle.animatableData.modify(_QWORD *a1))(uint64_t a1)
{
  _QWORD *v1;

  a1[1] = v1;
  *a1 = *v1;
  return ViewOrigin.x.modify;
}

void VariableBlurStyle.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  double v6;
  unint64_t v7;
  _QWORD *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  double v14;
  Swift::UInt v15;
  uint64_t v16;
  int64_t isUniquelyReferenced_nonNull_native;
  uint64_t v18;
  int64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;

  v3 = v2;
  v4 = v1;
  v6 = *(double *)v4;
  LOBYTE(v7) = *(_BYTE *)(v4 + 8);
  LOBYTE(v8) = *(_BYTE *)(v4 + 9);
  v9 = *(void **)(v4 + 16);
  v38 = *(_QWORD *)(v4 + 24);
  v39 = *(_QWORD *)(v4 + 32);
  v10 = *(_QWORD *)(v4 + 48);
  v40 = *(_QWORD *)(v4 + 40);
  v12 = *(_QWORD *)(v4 + 56);
  v11 = *(_QWORD *)(v4 + 64);
  v13 = *(_QWORD *)(v4 + 72);
  v36 = *(_QWORD *)(v4 + 88);
  v37 = *(_QWORD *)(v4 + 80);
  v34 = *(_QWORD *)(v4 + 104);
  v35 = *(_QWORD *)(v4 + 96);
  v41 = *(_DWORD *)(v4 + 112);
  if (*(double *)v4 != 0.0)
  {
    v14 = fabs(v6);
    if (v14 >= 65536.0)
      v15 = 9;
    else
      v15 = 13;
    ProtobufEncoder.encodeVarint(_:)(v15);
    if (v14 < 65536.0)
    {
      v16 = a1[1];
      isUniquelyReferenced_nonNull_native = v16 + 4;
      if (__OFADD__(v16, 4))
        goto LABEL_28;
      *(float *)&v6 = v6;
      if (a1[2] < isUniquelyReferenced_nonNull_native)
        goto LABEL_29;
      a1[1] = isUniquelyReferenced_nonNull_native;
      *(_DWORD *)(*a1 + v16) = LODWORD(v6);
      goto LABEL_12;
    }
    v18 = a1[1];
    v19 = v18 + 8;
    if (__OFADD__(v18, 8))
    {
      __break(1u);
    }
    else if (a1[2] >= v19)
    {
      a1[1] = v19;
      *(double *)(*a1 + v18) = v6;
      goto LABEL_12;
    }
    *(double *)ProtobufEncoder.growBufferSlow(to:)(v19) = v6;
  }
  while (1)
  {
LABEL_12:
    if ((v7 & 1) != 0)
    {
      ProtobufEncoder.encodeVarint(_:)(0x10uLL);
      ProtobufEncoder.encodeVarint(_:)(1uLL);
    }
    v31 = v3;
    if ((v8 & 1) != 0)
    {
      ProtobufEncoder.encodeVarint(_:)(0x18uLL);
      ProtobufEncoder.encodeVarint(_:)(1uLL);
    }
    v32 = v9;
    v33 = v10;
    v20 = v10;
    v10 = v12;
    v21 = v12;
    v12 = v11;
    outlined copy of VariableBlurStyle.Mask(v9, v38, v39, v40, v20, v21, v11, v13, v37, v36, v35, v34, v41, BYTE1(v41));
    ProtobufEncoder.encodeVarint(_:)(0x22uLL);
    v3 = a1[1];
    v8 = (_QWORD *)a1[3];
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v9 = (void *)v13;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      isUniquelyReferenced_nonNull_native = (int64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v8[2] + 1, 1, v8);
      v8 = (_QWORD *)isUniquelyReferenced_nonNull_native;
    }
    v13 = v8[2];
    v22 = v8[3];
    v7 = v13 + 1;
    if (v13 >= v22 >> 1)
    {
      isUniquelyReferenced_nonNull_native = (int64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v22 > 1), v13 + 1, 1, v8);
      v8 = (_QWORD *)isUniquelyReferenced_nonNull_native;
    }
    v8[2] = v7;
    v8[v13 + 4] = v3;
    a1[3] = v8;
    if (!__OFADD__(v3, 1))
      break;
    __break(1u);
LABEL_28:
    __break(1u);
LABEL_29:
    *(_DWORD *)ProtobufEncoder.growBufferSlow(to:)(isUniquelyReferenced_nonNull_native) = LODWORD(v6);
  }
  a1[1] = v3 + 1;
  if ((v41 & 0xFF00) == 0x200)
  {
    v23 = v32;
    v24 = (uint64_t)v9;
    v25 = v11;
    v26 = v10;
    v27 = v33;
    v29 = v39;
    v28 = v40;
  }
  else
  {
    v24 = (uint64_t)v9;
    v30 = v10;
    outlined copy of GraphicsImage.Contents?(v32, v38);
    specialized ProtobufEncoder.messageField<A>(_:_:)(1);
    v29 = v39;
    v28 = v40;
    v27 = v33;
    v26 = v30;
    outlined consume of VariableBlurStyle.Mask(v32, v38, v39, v40, v33, v30, v11, (uint64_t)v9, v37, v36, v35, v34, v41, BYTE1(v41));
    if (v31)
    {
      outlined consume of VariableBlurStyle.Mask(v32, v38, v39, v40, v33, v30, v11, (uint64_t)v9, v37, v36, v35, v34, v41, BYTE1(v41));
      return;
    }
    v23 = v32;
    v25 = v11;
  }
  ProtobufEncoder.endLengthDelimited()();
  outlined consume of VariableBlurStyle.Mask(v23, v38, v29, v28, v27, v26, v25, v24, v37, v36, v35, v34, v41, BYTE1(v41));
}

void VariableBlurStyle.init(from:)(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  double v12;
  BOOL v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  int v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  double *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  float *v45;
  float v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  void *v59;
  BOOL v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v64;
  int v65;
  void *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  _QWORD v72[12];
  int v73;
  BOOL v74;

  v74 = 0;
  v4 = a1[1];
  v5 = a1[2];
  if (v4 >= v5)
  {
    v13 = 0;
    v14 = 0;
    v15 = 0;
    v6 = 0;
    v7 = 0;
    v8 = 0;
    v70 = 0;
    v71 = 0;
    v9 = 0;
    v10 = 0;
    v11 = 0;
    v16 = 0;
    v17 = 0;
    v18 = 0;
    v12 = 0.0;
    v19 = 512;
    goto LABEL_4;
  }
  v60 = 0;
  v69 = 0;
  v70 = 0;
  v6 = 0;
  v7 = 0;
  v8 = 0;
  v71 = 0;
  v9 = 0;
  v10 = 0;
  v11 = 0;
  v67 = 0;
  v68 = 0;
  v66 = 0;
  v12 = 0.0;
  v65 = 512;
  while (2)
  {
    v21 = a1[3];
    if (!v21)
      goto LABEL_12;
    v22 = a1[4];
    if (v4 >= v22)
    {
      if (v22 < v4)
        goto LABEL_66;
      a1[3] = 0;
LABEL_12:
      v21 = ProtobufDecoder.decodeVarint()();
      if (v2)
        goto LABEL_67;
      if (v21 <= 7)
        goto LABEL_66;
    }
    switch(v21 >> 3)
    {
      case 1uLL:
        v23 = v21 & 7;
        switch(v23)
        {
          case 5uLL:
            v45 = (float *)a1[1];
            if (v5 < (unint64_t)(v45 + 1))
              goto LABEL_66;
            v46 = *v45;
            a1[1] = v45 + 1;
            v12 = v46;
            goto LABEL_7;
          case 2uLL:
            v47 = ProtobufDecoder.decodeVarint()();
            if (v2)
              goto LABEL_67;
            if (v47 < 0)
              goto LABEL_77;
            v24 = (double *)a1[1];
            if (v5 < (unint64_t)v24 + v47)
              goto LABEL_66;
            a1[3] = 9;
            a1[4] = (char *)v24 + v47;
            break;
          case 1uLL:
            v24 = (double *)a1[1];
            break;
          default:
            goto LABEL_66;
        }
        if (v5 < (unint64_t)(v24 + 1))
          goto LABEL_66;
        v12 = *v24;
        a1[1] = v24 + 1;
        goto LABEL_7;
      case 2uLL:
        if ((v21 & 7) == 0)
          goto LABEL_28;
        if ((v21 & 7) != 2)
          goto LABEL_66;
        v25 = ProtobufDecoder.decodeVarint()();
        if (v2)
          goto LABEL_67;
        if (v25 < 0)
          goto LABEL_75;
        v26 = a1[1] + v25;
        if (v5 < v26)
          goto LABEL_66;
        a1[3] = 16;
        a1[4] = v26;
LABEL_28:
        v27 = ProtobufDecoder.decodeVarint()();
        if (v2)
          goto LABEL_67;
        v74 = v27 != 0;
        goto LABEL_7;
      case 3uLL:
        if ((v21 & 7) == 0)
          goto LABEL_36;
        if ((v21 & 7) != 2)
          goto LABEL_66;
        v28 = ProtobufDecoder.decodeVarint()();
        if (v2)
          goto LABEL_67;
        if (v28 < 0)
          goto LABEL_76;
        v29 = a1[1] + v28;
        if (v5 < v29)
          goto LABEL_66;
        a1[3] = 24;
        a1[4] = v29;
LABEL_36:
        v30 = ProtobufDecoder.decodeVarint()();
        if (v2)
          goto LABEL_67;
        v60 = v30 != 0;
        goto LABEL_7;
      case 4uLL:
        if ((v21 & 7) != 2)
          goto LABEL_66;
        v64 = (uint64_t)v11;
        v61 = v10;
        v62 = v8;
        v10 = v7;
        v31 = (_QWORD *)a1[5];
        v7 = v6;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v31 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v31[2] + 1, 1, v31);
        v6 = v31[2];
        v32 = v31[3];
        v8 = v6 + 1;
        if (v6 >= v32 >> 1)
          v31 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v32 > 1), v6 + 1, 1, v31);
        v31[2] = v8;
        v31[v6 + 4] = v5;
        a1[5] = v31;
        v33 = ProtobufDecoder.decodeVarint()();
        if (v2)
        {
          v49 = v69;
          v6 = v7;
          v7 = v10;
          v10 = v61;
          v8 = v62;
          v11 = (_QWORD *)v64;
          goto LABEL_68;
        }
        v11 = (_QWORD *)v64;
        if (v33 < 0)
        {
          __break(1u);
LABEL_74:
          __break(1u);
LABEL_75:
          __break(1u);
LABEL_76:
          __break(1u);
LABEL_77:
          __break(1u);
LABEL_78:
          __break(1u);
          __break(1u);
          v52 = specialized _ArrayBuffer._consumeAndCreateNew()(v9);
          v53 = v52[2];
          if (!v53)
          {
            __break(1u);
            JUMPOUT(0x234D5AD9CLL);
          }
          v50 = v53 - 1;
          v51 = v52[v50 + 4];
          v52[2] = v50;
          a1[5] = v52;
          a1[2] = v51;
          v9 = v11;
          v49 = v69;
          v11 = (_QWORD *)v64;
          goto LABEL_68;
        }
        v6 = v7;
        v34 = a1[1] + v33;
        if (v5 < v34)
        {
          lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
          swift_allocError();
          swift_willThrow();
          v49 = v69;
          v7 = v10;
          v10 = v61;
          v8 = v62;
          goto LABEL_68;
        }
        a1[2] = v34;
        VariableBlurStyle.Mask.init(from:)((uint64_t)a1, (uint64_t)v72);
        v7 = v10;
        v11 = (_QWORD *)a1[5];
        if (!v11[2])
          goto LABEL_74;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          v11 = specialized _ArrayBuffer._consumeAndCreateNew()(v11);
          v35 = v11[2];
          if (v35)
            goto LABEL_49;
LABEL_65:
          __break(1u);
LABEL_66:
          lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
          swift_allocError();
          swift_willThrow();
LABEL_67:
          v49 = v69;
LABEL_68:
          outlined consume of VariableBlurStyle.Mask(v66, v67, v68, (uint64_t)v11, v10, v70, (uint64_t)v9, v71, v8, v7, v6, v49, v65, BYTE1(v65));
          return;
        }
        v35 = v11[2];
        if (!v35)
          goto LABEL_65;
LABEL_49:
        v36 = v35 - 1;
        v37 = v11[v36 + 4];
        v11[2] = v36;
        a1[5] = v11;
        a1[2] = v37;
        v58 = v72[1];
        v59 = (void *)v72[0];
        v56 = (_QWORD *)v72[3];
        v57 = v72[2];
        v54 = v72[5];
        v55 = v72[4];
        v38 = (uint64_t)v9;
        v9 = (_QWORD *)v72[6];
        v39 = v72[7];
        v8 = v72[8];
        v40 = v72[9];
        v41 = v6;
        v42 = v10;
        v6 = v72[10];
        v43 = v72[11];
        v44 = v73;
        outlined consume of VariableBlurStyle.Mask(v66, v67, v68, v64, v61, v70, v38, v71, v62, v42, v41, v69, v65, BYTE1(v65));
        v69 = v43;
        v7 = v40;
        v70 = v54;
        v71 = v39;
        v11 = v56;
        v67 = v58;
        v68 = v57;
        v66 = v59;
        v65 = v44;
        v10 = v55;
LABEL_7:
        v4 = a1[1];
        v5 = a1[2];
        if (v4 < v5)
          continue;
        v14 = v74;
        v16 = v68;
        v15 = v69;
        v18 = v66;
        v17 = v67;
        v19 = v65;
        v13 = v60;
LABEL_4:
        a1[3] = 0;
        *(double *)a2 = v12;
        *(_BYTE *)(a2 + 8) = v14;
        *(_BYTE *)(a2 + 9) = v13;
        *(_QWORD *)(a2 + 16) = v18;
        *(_QWORD *)(a2 + 24) = v17;
        *(_QWORD *)(a2 + 32) = v16;
        *(_QWORD *)(a2 + 40) = v11;
        *(_QWORD *)(a2 + 48) = v10;
        *(_QWORD *)(a2 + 56) = v70;
        *(_QWORD *)(a2 + 64) = v9;
        *(_QWORD *)(a2 + 72) = v71;
        *(_QWORD *)(a2 + 80) = v8;
        *(_QWORD *)(a2 + 88) = v7;
        *(_QWORD *)(a2 + 96) = v6;
        *(_QWORD *)(a2 + 104) = v15;
        *(_DWORD *)(a2 + 112) = v19;
        return;
      default:
        switch(v21 & 7)
        {
          case 0uLL:
            ProtobufDecoder.decodeVarint()();
            if (v2)
              goto LABEL_67;
            goto LABEL_7;
          case 1uLL:
            v20 = a1[1] + 8;
            if (v5 < v20)
              goto LABEL_66;
            goto LABEL_6;
          case 2uLL:
            v48 = ProtobufDecoder.decodeVarint()();
            if (v2)
              goto LABEL_67;
            if (v48 < 0)
              goto LABEL_78;
            v20 = a1[1] + v48;
            if (v5 < v20)
              goto LABEL_66;
LABEL_6:
            a1[1] = v20;
            break;
          case 5uLL:
            v20 = a1[1] + 4;
            if (v5 < v20)
              goto LABEL_66;
            goto LABEL_6;
          default:
            goto LABEL_66;
        }
        goto LABEL_7;
    }
  }
}

void protocol witness for ProtobufEncodableMessage.encode(to:) in conformance VariableBlurStyle(_QWORD *a1)
{
  VariableBlurStyle.encode(to:)(a1);
}

void protocol witness for ProtobufDecodableMessage.init(from:) in conformance VariableBlurStyle(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  VariableBlurStyle.init(from:)(a1, a2);
}

void VariableBlurStyle.Mask.encode(to:)()
{
  uint64_t v0;
  int v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;

  v1 = *(_DWORD *)(v0 + 96);
  if ((v1 & 0xFF00) != 0x200)
  {
    v2 = *(_QWORD *)(v0 + 88);
    v7 = *(_QWORD *)(v0 + 80);
    v8 = *(_QWORD *)(v0 + 72);
    v9 = *(_QWORD *)(v0 + 64);
    v3 = *(_QWORD *)(v0 + 48);
    v4 = *(_QWORD *)(v0 + 40);
    v13 = *(_QWORD *)(v0 + 32);
    v10 = *(_QWORD *)(v0 + 16);
    v11 = *(_QWORD *)(v0 + 24);
    v5 = *(id *)v0;
    v6 = *(_QWORD *)(v0 + 56);
    v12 = *(_QWORD *)(v0 + 8);
    outlined copy of GraphicsImage.Contents?(*(id *)v0, v12);
    specialized ProtobufEncoder.messageField<A>(_:_:)(1);
    outlined consume of VariableBlurStyle.Mask(v5, v12, v10, v11, v13, v4, v3, v6, v9, v8, v7, v2, v1, BYTE1(v1));
  }
}

void VariableBlurStyle.Mask.init(from:)(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  void *v41;
  unsigned __int8 v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unsigned __int8 v46;
  __int128 v47;
  char v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unsigned __int8 v53;
  char v54;
  unsigned __int8 v55;
  unsigned __int8 v56;
  uint64_t v57;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  if (v4 >= v5)
  {
    v40 = 0;
    v6 = 0;
    v7 = 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    v57 = 0;
    v11 = 0;
    v38 = 0;
    v39 = 0;
    v36 = 0;
    v37 = 0;
    v35 = 512;
LABEL_4:
    *(_QWORD *)(a1 + 24) = 0;
    *(_QWORD *)a2 = v40;
    *(_QWORD *)(a2 + 8) = v6;
    *(_QWORD *)(a2 + 16) = v7;
    *(_QWORD *)(a2 + 24) = v8;
    *(_QWORD *)(a2 + 32) = v9;
    *(_QWORD *)(a2 + 40) = v10;
    *(_QWORD *)(a2 + 48) = v57;
    *(_QWORD *)(a2 + 56) = v11;
    *(_QWORD *)(a2 + 64) = v39;
    *(_QWORD *)(a2 + 72) = v38;
    *(_QWORD *)(a2 + 80) = v37;
    *(_QWORD *)(a2 + 88) = v36;
    *(_DWORD *)(a2 + 96) = v35;
    return;
  }
  v40 = 0;
  v6 = 0;
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v57 = 0;
  v11 = 0;
  v38 = 0;
  v39 = 0;
  v36 = 0;
  v37 = 0;
  v35 = 512;
  while (1)
  {
    v12 = *(_QWORD *)(a1 + 24);
    if (v12)
    {
      v13 = *(_QWORD *)(a1 + 32);
      if (v4 < v13)
        goto LABEL_13;
      if (v13 < v4)
        goto LABEL_42;
      *(_QWORD *)(a1 + 24) = 0;
    }
    v12 = ProtobufDecoder.decodeVarint()();
    if (v2)
      goto LABEL_43;
    if (v12 < 8)
    {
LABEL_42:
      lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
      swift_allocError();
      swift_willThrow();
LABEL_43:
      outlined consume of VariableBlurStyle.Mask(v40, v6, v7, v8, v9, v10, v57, v11, v39, v38, v37, v36, v35, BYTE1(v35));
      return;
    }
LABEL_13:
    if ((v12 & 0xFFFFFFFFFFFFFFF8) != 8)
    {
      switch(v12 & 7)
      {
        case 0uLL:
          ProtobufDecoder.decodeVarint()();
          if (!v2)
            goto LABEL_6;
          goto LABEL_43;
        case 1uLL:
          v24 = *(_QWORD *)(a1 + 8) + 8;
          goto LABEL_39;
        case 2uLL:
          v25 = ProtobufDecoder.decodeVarint()();
          if (v2)
            goto LABEL_43;
          if (v25 < 0)
            goto LABEL_50;
          v24 = *(_QWORD *)(a1 + 8) + v25;
LABEL_39:
          if (v5 < v24)
            goto LABEL_42;
          *(_QWORD *)(a1 + 8) = v24;
          break;
        case 5uLL:
          v24 = *(_QWORD *)(a1 + 8) + 4;
          goto LABEL_39;
        default:
          goto LABEL_42;
      }
      goto LABEL_6;
    }
    if ((v12 & 7) != 2)
      goto LABEL_42;
    v32 = v6;
    v33 = v8;
    v6 = v7;
    v34 = v10;
    v31 = v11;
    v11 = v9;
    v14 = *(_QWORD **)(a1 + 40);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
    {
      v7 = v57;
    }
    else
    {
      v7 = v57;
      v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v14[2] + 1, 1, v14);
    }
    v10 = v14[2];
    v15 = v14[3];
    v8 = v10 + 1;
    if (v10 >= v15 >> 1)
      v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v15 > 1), v10 + 1, 1, v14);
    v14[2] = v8;
    v14[v10 + 4] = v5;
    *(_QWORD *)(a1 + 40) = v14;
    v16 = ProtobufDecoder.decodeVarint()();
    if (v2)
    {
      outlined consume of VariableBlurStyle.Mask(v40, v32, v6, v33, v11, v34, v7, v31, v39, v38, v37, v36, v35, BYTE1(v35));
      return;
    }
    if (v16 < 0)
      break;
    v8 = v7;
    v17 = *(_QWORD *)(a1 + 8) + v16;
    if (v5 < v17)
    {
      lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
      swift_allocError();
      swift_willThrow();
      outlined consume of VariableBlurStyle.Mask(v40, v32, v6, v33, v11, v34, v7, v31, v39, v38, v37, v36, v35, BYTE1(v35));
      return;
    }
    *(_QWORD *)(a1 + 16) = v17;
    GraphicsImage.init(from:)((id *)a1, (uint64_t)&v41);
    v10 = v34;
    v7 = v6;
    v18 = *(_QWORD **)(a1 + 40);
    if (!v18[2])
      goto LABEL_48;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v18 = specialized _ArrayBuffer._consumeAndCreateNew()(v18);
    v19 = v18[2];
    if (!v19)
      goto LABEL_49;
    v20 = v19 - 1;
    v21 = v18[v20 + 4];
    v18[2] = v20;
    outlined consume of VariableBlurStyle.Mask(v40, v32, v6, v33, v11, v34, v8, v31, v39, v38, v37, v36, v35, BYTE1(v35));
    *(_QWORD *)(a1 + 40) = v18;
    *(_QWORD *)(a1 + 16) = v21;
    v40 = v41;
    v6 = v42;
    v7 = v43;
    v8 = v44;
    v9 = v45;
    v38 = v50;
    v39 = v49;
    v36 = v52;
    v37 = v51;
    v10 = v46 | ((_QWORD)v47 << 32);
    v57 = v47 >> 32;
    if (v48)
      v22 = 0x100000000;
    else
      v22 = 0;
    v11 = v22 & 0xFFFFFFFF00000000 | HIDWORD(v47);
    if (v54)
      v23 = 256;
    else
      v23 = 0;
    v35 = v23 | v53 | (v55 << 16) | (v56 << 24);
LABEL_6:
    v4 = *(_QWORD *)(a1 + 8);
    v5 = *(_QWORD *)(a1 + 16);
    if (v4 >= v5)
      goto LABEL_4;
  }
  __break(1u);
LABEL_48:
  __break(1u);
LABEL_49:
  __break(1u);
LABEL_50:
  __break(1u);
  __break(1u);
  v28 = specialized _ArrayBuffer._consumeAndCreateNew()((_QWORD *)v6);
  v29 = v28[2];
  if (!v29)
  {
    __break(1u);
    JUMPOUT(0x234D5B480);
  }
  v26 = v29 - 1;
  v27 = v28[v26 + 4];
  v28[2] = v26;
  outlined consume of VariableBlurStyle.Mask(v40, v32, v7, v33, v11, v10, v8, v31, v39, v38, v37, v36, v35, BYTE1(v35));
  *(_QWORD *)(a1 + 40) = v28;
  *(_QWORD *)(a1 + 16) = v27;
}

void protocol witness for ProtobufEncodableMessage.encode(to:) in conformance VariableBlurStyle.Mask()
{
  uint64_t v0;
  int v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;

  v1 = *(_DWORD *)(v0 + 96);
  if ((v1 & 0xFF00) != 0x200)
  {
    v2 = *(_QWORD *)(v0 + 88);
    v7 = *(_QWORD *)(v0 + 80);
    v8 = *(_QWORD *)(v0 + 72);
    v9 = *(_QWORD *)(v0 + 64);
    v3 = *(_QWORD *)(v0 + 48);
    v4 = *(_QWORD *)(v0 + 40);
    v13 = *(_QWORD *)(v0 + 32);
    v10 = *(_QWORD *)(v0 + 16);
    v11 = *(_QWORD *)(v0 + 24);
    v5 = *(id *)v0;
    v6 = *(_QWORD *)(v0 + 56);
    v12 = *(_QWORD *)(v0 + 8);
    outlined copy of GraphicsImage.Contents?(*(id *)v0, v12);
    specialized ProtobufEncoder.messageField<A>(_:_:)(1);
    outlined consume of VariableBlurStyle.Mask(v5, v12, v10, v11, v13, v4, v3, v6, v9, v8, v7, v2, v1, BYTE1(v1));
  }
}

void protocol witness for ProtobufDecodableMessage.init(from:) in conformance VariableBlurStyle.Mask(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  VariableBlurStyle.Mask.init(from:)(a1, a2);
}

uint64_t specialized static VariableBlurStyle.Mask.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  int v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  __int128 v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  __int16 v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char v70;
  void *v71;
  void *v72;
  char v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char v77;
  uint64_t v78;
  uint64_t v79;
  char v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  __int16 v85;
  char v86;
  char v87;
  void *v88;
  char v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char v93;
  uint64_t v94;
  uint64_t v95;
  char v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  __int16 v101;
  char v102;
  char v103;
  _QWORD v104[12];
  int v105;
  void *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  int v118;

  v2 = *(void **)a1;
  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  v5 = *(_QWORD *)(a1 + 24);
  v6 = *(_QWORD *)(a1 + 32);
  v7 = *(_QWORD *)(a1 + 40);
  v8 = *(_QWORD *)(a1 + 48);
  v9 = *(_QWORD *)(a1 + 56);
  v10 = *(_QWORD *)(a1 + 64);
  v11 = *(_QWORD *)(a1 + 72);
  v13 = *(_QWORD *)(a1 + 80);
  v12 = *(_QWORD *)(a1 + 88);
  v14 = *(_DWORD *)(a1 + 96);
  v15 = *(void **)a2;
  v16 = *(_QWORD *)(a2 + 8);
  v17 = *(_QWORD *)(a2 + 16);
  v18 = *(_QWORD *)(a2 + 24);
  v19 = *(_QWORD *)(a2 + 32);
  v20 = *(_QWORD *)(a2 + 40);
  v21 = *(_QWORD *)(a2 + 48);
  v22 = *(_QWORD *)(a2 + 56);
  v24 = *(_QWORD *)(a2 + 64);
  v23 = *(_QWORD *)(a2 + 72);
  v25 = *(_QWORD *)(a2 + 80);
  v26 = *(_QWORD *)(a2 + 88);
  v27 = *(_DWORD *)(a2 + 96);
  v70 = v3;
  v71 = v2;
  v104[0] = v2;
  v104[1] = v3;
  v104[2] = v4;
  v104[3] = v5;
  v104[4] = v6;
  v104[5] = v7;
  v104[6] = v8;
  v104[7] = v9;
  v104[8] = v10;
  v104[9] = v11;
  v104[10] = v13;
  v104[11] = v12;
  v28 = v12;
  v105 = v14;
  v106 = v15;
  v107 = v16;
  v108 = v17;
  v109 = v18;
  v110 = v19;
  v111 = v20;
  v112 = v21;
  v113 = v22;
  v114 = v24;
  v115 = v23;
  v116 = v25;
  v117 = v26;
  v29 = v27 & 0xFF00;
  v118 = v27;
  if ((v14 & 0xFF00) != 0x200)
  {
    if (v29 != 512)
    {
      *((_QWORD *)&v38 + 1) = v8;
      *(_QWORD *)&v38 = v7;
      v94 = v38 >> 32;
      *((_QWORD *)&v38 + 1) = v9;
      *(_QWORD *)&v38 = v8;
      v95 = v38 >> 32;
      v96 = BYTE4(v9) & 1;
      v101 = v14 & 0x1FF;
      v102 = BYTE2(v14);
      v103 = HIBYTE(v14);
      *((_QWORD *)&v38 + 1) = v21;
      *(_QWORD *)&v38 = v20;
      v78 = v38 >> 32;
      *((_QWORD *)&v38 + 1) = v22;
      *(_QWORD *)&v38 = v21;
      v79 = v38 >> 32;
      v80 = BYTE4(v22) & 1;
      v85 = v27 & 0x1FF;
      v86 = BYTE2(v27);
      v87 = HIBYTE(v27);
      v88 = v71;
      v89 = v3;
      v90 = v4;
      v91 = v5;
      v92 = v6;
      v93 = v7;
      v97 = v10;
      v98 = v11;
      v99 = v13;
      v100 = v12;
      v39 = v12;
      v53 = v12;
      v72 = v15;
      v73 = v16;
      v74 = v17;
      v75 = v18;
      v76 = v19;
      v77 = v20;
      v81 = v24;
      v82 = v23;
      v83 = v25;
      v84 = v26;
      v50 = v26;
      v47 = v24;
      v67 = v11;
      v69 = v4;
      v62 = v15;
      v63 = v20;
      v40 = v5;
      v54 = v6;
      v41 = v7;
      v60 = v17;
      v61 = v16;
      v42 = v8;
      v55 = v26;
      v56 = v24;
      v43 = v9;
      v58 = v19;
      v59 = v18;
      v64 = v22;
      v66 = v21;
      v44 = v10;
      v57 = v10;
      outlined copy of VariableBlurStyle.Mask(v15, v16, v17, v18, v19, v20, v21, v22, v47, v23, v25, v50, v27, BYTE1(v27));
      v52 = v43;
      outlined copy of VariableBlurStyle.Mask(v71, v70, v69, v40, v54, v41, v42, v43, v44, v67, v13, v39, v14, BYTE1(v14));
      outlined copy of VariableBlurStyle.Mask(v62, v61, v60, v59, v58, v63, v66, v64, v56, v23, v25, v55, v27, BYTE1(v27));
      outlined copy of VariableBlurStyle.Mask(v71, v70, v69, v40, v54, v41, v42, v43, v57, v67, v13, v53, v14, BYTE1(v14));
      v30 = specialized static GraphicsImage.== infix(_:_:)((uint64_t)&v88, (uint64_t)&v72);
      outlined release of (VariableBlurStyle.Mask, VariableBlurStyle.Mask)((uint64_t)v104);
      outlined consume of VariableBlurStyle.Mask(v62, v61, v60, v59, v58, v63, v66, v64, v56, v23, v25, v55, v27, BYTE1(v27));
      outlined consume of VariableBlurStyle.Mask(v71, v70, v69, v40, v54, v41, v42, v52, v57, v67, v13, v53, v14, BYTE1(v14));
      return v30 & 1;
    }
    goto LABEL_5;
  }
  if (v29 != 512)
  {
LABEL_5:
    v51 = v27;
    v49 = v26;
    v46 = v24;
    v48 = v23;
    v68 = v4;
    v31 = v11;
    v65 = v5;
    v32 = v13;
    v33 = v6;
    v34 = v7;
    v35 = v8;
    v36 = v9;
    v37 = v10;
    outlined copy of VariableBlurStyle.Mask(v15, v16, v17, v18, v19, v20, v21, v22, v46, v48, v25, v49, v51, HIBYTE(v51));
    outlined copy of VariableBlurStyle.Mask(v71, v3, v68, v65, v33, v34, v35, v36, v37, v31, v32, v28, v14, BYTE1(v14));
    outlined release of (VariableBlurStyle.Mask, VariableBlurStyle.Mask)((uint64_t)v104);
    v30 = 0;
    return v30 & 1;
  }
  outlined release of (VariableBlurStyle.Mask, VariableBlurStyle.Mask)((uint64_t)v104);
  v30 = 1;
  return v30 & 1;
}

uint64_t specialized static VariableBlurStyle.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  char v2;
  int v3;
  int v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  _OWORD v12[6];
  int v13;
  _OWORD v14[6];
  int v15;

  v2 = 0;
  if (*(double *)a1 == *(double *)a2
    && ((*(unsigned __int8 *)(a1 + 8) ^ *(unsigned __int8 *)(a2 + 8)) & 1) == 0
    && ((*(unsigned __int8 *)(a1 + 9) ^ *(unsigned __int8 *)(a2 + 9)) & 1) == 0)
  {
    v3 = *(_DWORD *)(a2 + 112);
    v4 = *(_DWORD *)(a1 + 112);
    v5 = *(_OWORD *)(a1 + 32);
    v14[0] = *(_OWORD *)(a1 + 16);
    v14[1] = v5;
    v6 = *(_OWORD *)(a1 + 64);
    v14[2] = *(_OWORD *)(a1 + 48);
    v14[3] = v6;
    v7 = *(_OWORD *)(a1 + 96);
    v14[4] = *(_OWORD *)(a1 + 80);
    v14[5] = v7;
    v15 = v4;
    v8 = *(_OWORD *)(a2 + 32);
    v12[0] = *(_OWORD *)(a2 + 16);
    v12[1] = v8;
    v9 = *(_OWORD *)(a2 + 64);
    v12[2] = *(_OWORD *)(a2 + 48);
    v12[3] = v9;
    v10 = *(_OWORD *)(a2 + 96);
    v12[4] = *(_OWORD *)(a2 + 80);
    v12[5] = v10;
    v13 = v3;
    v2 = specialized static VariableBlurStyle.Mask.== infix(_:_:)((uint64_t)v14, (uint64_t)v12);
  }
  return v2 & 1;
}

uint64_t sub_234D5BA50()
{
  uint64_t v0;

  outlined consume of GraphicsFilter(*(void **)(v0 + 16), *(_QWORD *)(v0 + 24), *(id *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 88), *(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 104), *(_QWORD *)(v0 + 112), *(_QWORD *)(v0 + 120), *(_DWORD *)(v0 + 128), BYTE2(*(_DWORD *)(v0 + 128)));
  return swift_deallocObject();
}

unint64_t instantiation function for generic protocol witness table for VariableBlurStyle(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type VariableBlurStyle and conformance VariableBlurStyle();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

double sub_234D5BACC@<D0>(double *a1@<X0>, double *a2@<X8>)
{
  double result;

  result = *a1 * 0.5;
  *a2 = result;
  return result;
}

double sub_234D5BAE0(double *a1, double *a2)
{
  double result;

  result = *a1 + *a1;
  *a2 = result;
  return result;
}

double sub_234D5BAF0@<D0>(double *a1@<X0>, _QWORD *a2@<X8>)
{
  double result;

  result = *a1;
  *a2 = *(_QWORD *)a1;
  return result;
}

double sub_234D5BAFC(double *a1, _QWORD *a2)
{
  double result;

  result = *a1;
  *a2 = *(_QWORD *)a1;
  return result;
}

void destroy for VariableBlurStyle(uint64_t a1)
{
  int v1;

  if (*(unsigned __int8 *)(a1 + 113) << 8 != 512)
  {
    v1 = *(unsigned __int8 *)(a1 + 24);
    if (v1 != 255)
      outlined consume of GraphicsImage.Contents(*(void **)(a1 + 16), v1);
  }
}

uint64_t initializeWithCopy for VariableBlurStyle(uint64_t a1, uint64_t a2)
{
  _OWORD *v3;
  id *v4;
  int v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  int v10;
  id v11;
  __int128 v12;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_WORD *)(a1 + 8) = *(_WORD *)(a2 + 8);
  v3 = (_OWORD *)(a1 + 16);
  v4 = (id *)(a2 + 16);
  v5 = *(_DWORD *)(a2 + 112);
  if ((v5 & 0xFF00) == 0x200)
  {
    v6 = *(_OWORD *)(a2 + 96);
    *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 96) = v6;
    *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 112);
    v7 = *(_OWORD *)(a2 + 32);
    *v3 = *(_OWORD *)v4;
    *(_OWORD *)(a1 + 32) = v7;
    v8 = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 64) = v8;
  }
  else
  {
    v10 = *(unsigned __int8 *)(a2 + 24);
    if (v10 == 255)
    {
      *(_QWORD *)v3 = *v4;
      *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
    }
    else
    {
      v11 = *v4;
      outlined copy of GraphicsImage.Contents(*v4, *(_BYTE *)(a2 + 24));
      *(_QWORD *)(a1 + 16) = v11;
      *(_BYTE *)(a1 + 24) = v10;
    }
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
    *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
    *(_OWORD *)(a1 + 60) = *(_OWORD *)(a2 + 60);
    *(_BYTE *)(a1 + 76) = *(_BYTE *)(a2 + 76);
    v12 = *(_OWORD *)(a2 + 96);
    *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 96) = v12;
    *(_BYTE *)(a1 + 112) = *(_BYTE *)(a2 + 112);
    *(_BYTE *)(a1 + 113) = BYTE1(v5);
    *(_BYTE *)(a1 + 114) = BYTE2(v5);
    *(_BYTE *)(a1 + 115) = HIBYTE(v5);
  }
  return a1;
}

uint64_t assignWithCopy for VariableBlurStyle(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t *v5;
  int v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  int v17;
  id v18;
  int v19;
  id v20;
  void *v21;
  char v22;
  id v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_BYTE *)(a1 + 9) = *(_BYTE *)(a2 + 9);
  v4 = a1 + 16;
  v5 = (uint64_t *)(a2 + 16);
  v6 = *(unsigned __int8 *)(a2 + 113) << 8;
  if (*(unsigned __int8 *)(a1 + 113) << 8 != 512)
  {
    if (v6 == 512)
    {
      outlined destroy of GraphicsImage(a1 + 16);
      v13 = *((_OWORD *)v5 + 1);
      v12 = *((_OWORD *)v5 + 2);
      *(_OWORD *)v4 = *(_OWORD *)v5;
      *(_OWORD *)(v4 + 16) = v13;
      *(_OWORD *)(v4 + 32) = v12;
      v15 = *((_OWORD *)v5 + 4);
      v14 = *((_OWORD *)v5 + 5);
      v16 = *((_OWORD *)v5 + 3);
      *(_DWORD *)(v4 + 96) = *((_DWORD *)v5 + 24);
      *(_OWORD *)(v4 + 64) = v15;
      *(_OWORD *)(v4 + 80) = v14;
      *(_OWORD *)(v4 + 48) = v16;
      return a1;
    }
    v19 = *(unsigned __int8 *)(a2 + 24);
    if (*(unsigned __int8 *)(a1 + 24) == 255)
    {
      if (v19 == 255)
      {
        v26 = *v5;
        *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
        *(_QWORD *)v4 = v26;
      }
      else
      {
        v24 = *v5;
        outlined copy of GraphicsImage.Contents((id)*v5, *(_BYTE *)(a2 + 24));
        *(_QWORD *)(a1 + 16) = v24;
        *(_BYTE *)(a1 + 24) = v19;
      }
    }
    else if (v19 == 255)
    {
      outlined destroy of GraphicsImage.Contents(a1 + 16);
      v25 = *((_BYTE *)v5 + 8);
      *(_QWORD *)v4 = *v5;
      *(_BYTE *)(v4 + 8) = v25;
    }
    else
    {
      v20 = (id)*v5;
      outlined copy of GraphicsImage.Contents((id)*v5, *(_BYTE *)(a2 + 24));
      v21 = *(void **)(a1 + 16);
      *(_QWORD *)(a1 + 16) = v20;
      v22 = *(_BYTE *)(a1 + 24);
      *(_BYTE *)(a1 + 24) = v19;
      outlined consume of GraphicsImage.Contents(v21, v22);
    }
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
    *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
    *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
LABEL_18:
    *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
    v27 = *(_OWORD *)(a2 + 60);
    *(_BYTE *)(a1 + 76) = *(_BYTE *)(a2 + 76);
    *(_OWORD *)(a1 + 60) = v27;
    v28 = *(_OWORD *)(a2 + 80);
    v29 = *(_OWORD *)(a2 + 96);
    *(_BYTE *)(a1 + 112) = *(_BYTE *)(a2 + 112);
    *(_OWORD *)(a1 + 80) = v28;
    *(_OWORD *)(a1 + 96) = v29;
    *(_BYTE *)(a1 + 113) = *(_BYTE *)(a2 + 113);
    *(_BYTE *)(a1 + 114) = *(_BYTE *)(a2 + 114);
    *(_BYTE *)(a1 + 115) = *(_BYTE *)(a2 + 115);
    return a1;
  }
  if (v6 != 512)
  {
    v17 = *(unsigned __int8 *)(a2 + 24);
    if (v17 == 255)
    {
      v23 = (id)*v5;
      *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
      *(_QWORD *)v4 = v23;
    }
    else
    {
      v18 = (id)*v5;
      outlined copy of GraphicsImage.Contents((id)*v5, *(_BYTE *)(a2 + 24));
      *(_QWORD *)(a1 + 16) = v18;
      *(_BYTE *)(a1 + 24) = v17;
    }
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
    goto LABEL_18;
  }
  v7 = *(_OWORD *)v5;
  v8 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v8;
  *(_OWORD *)v4 = v7;
  v9 = *(_OWORD *)(a2 + 64);
  v10 = *(_OWORD *)(a2 + 80);
  v11 = *(_OWORD *)(a2 + 96);
  *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 80) = v10;
  *(_OWORD *)(a1 + 96) = v11;
  *(_OWORD *)(a1 + 64) = v9;
  return a1;
}

uint64_t outlined destroy of GraphicsImage(uint64_t a1)
{
  destroy for ImagePaint._Paint(a1);
  return a1;
}

uint64_t assignWithTake for VariableBlurStyle(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  int v10;
  int v11;
  void *v12;
  __int128 v13;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_BYTE *)(a1 + 9) = *(_BYTE *)(a2 + 9);
  v3 = a1 + 16;
  v4 = a2 + 16;
  if (*(unsigned __int8 *)(a1 + 113) << 8 == 512)
    goto LABEL_4;
  v6 = *(_DWORD *)(a2 + 112);
  if ((v6 & 0xFF00) != 0x200)
  {
    v10 = *(unsigned __int8 *)(a1 + 24);
    if (v10 != 255)
    {
      v11 = *(unsigned __int8 *)(a2 + 24);
      if (v11 != 255)
      {
        v12 = *(void **)(a1 + 16);
        *(_QWORD *)(a1 + 16) = *(_QWORD *)v4;
        *(_BYTE *)(a1 + 24) = v11;
        outlined consume of GraphicsImage.Contents(v12, v10);
LABEL_10:
        *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
        *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
        *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
        *(_OWORD *)(a1 + 60) = *(_OWORD *)(a2 + 60);
        *(_BYTE *)(a1 + 76) = *(_BYTE *)(a2 + 76);
        v13 = *(_OWORD *)(a2 + 96);
        *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
        *(_OWORD *)(a1 + 96) = v13;
        *(_BYTE *)(a1 + 112) = *(_BYTE *)(a2 + 112);
        *(_BYTE *)(a1 + 113) = BYTE1(v6) & 1;
        *(_BYTE *)(a1 + 114) = BYTE2(v6);
        *(_BYTE *)(a1 + 115) = HIBYTE(v6);
        return a1;
      }
      outlined destroy of GraphicsImage.Contents(a1 + 16);
    }
    *(_QWORD *)v3 = *(_QWORD *)v4;
    *(_BYTE *)(v3 + 8) = *(_BYTE *)(v4 + 8);
    goto LABEL_10;
  }
  outlined destroy of GraphicsImage(a1 + 16);
LABEL_4:
  v7 = *(_OWORD *)(v4 + 80);
  *(_OWORD *)(v3 + 64) = *(_OWORD *)(v4 + 64);
  *(_OWORD *)(v3 + 80) = v7;
  *(_DWORD *)(v3 + 96) = *(_DWORD *)(v4 + 96);
  v8 = *(_OWORD *)(v4 + 16);
  *(_OWORD *)v3 = *(_OWORD *)v4;
  *(_OWORD *)(v3 + 16) = v8;
  v9 = *(_OWORD *)(v4 + 48);
  *(_OWORD *)(v3 + 32) = *(_OWORD *)(v4 + 32);
  *(_OWORD *)(v3 + 48) = v9;
  return a1;
}

uint64_t getEnumTagSinglePayload for VariableBlurStyle(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 116))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 8);
  v4 = v3 >= 2;
  v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for VariableBlurStyle(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_QWORD *)(result + 104) = 0;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_DWORD *)(result + 112) = 0;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 116) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 116) = 0;
    if (a2)
      *(_BYTE *)(result + 8) = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for VariableBlurStyle()
{
  return &type metadata for VariableBlurStyle;
}

void destroy for VariableBlurStyle.Mask(uint64_t a1)
{
  int v1;

  if (*(unsigned __int8 *)(a1 + 97) <= 1u)
  {
    v1 = *(unsigned __int8 *)(a1 + 8);
    if (v1 != 255)
      outlined consume of GraphicsImage.Contents(*(void **)a1, v1);
  }
}

uint64_t initializeWithCopy for VariableBlurStyle.Mask(uint64_t a1, uint64_t *a2)
{
  unsigned int v4;
  int v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;

  v4 = *((unsigned __int8 *)a2 + 97);
  if (v4 > 1)
  {
    v7 = *((_OWORD *)a2 + 5);
    *(_OWORD *)(a1 + 64) = *((_OWORD *)a2 + 4);
    *(_OWORD *)(a1 + 80) = v7;
    *(_DWORD *)(a1 + 96) = *((_DWORD *)a2 + 24);
    v8 = *((_OWORD *)a2 + 1);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v8;
    v9 = *((_OWORD *)a2 + 3);
    *(_OWORD *)(a1 + 32) = *((_OWORD *)a2 + 2);
    *(_OWORD *)(a1 + 48) = v9;
  }
  else
  {
    v5 = *((unsigned __int8 *)a2 + 8);
    if (v5 == 255)
    {
      *(_QWORD *)a1 = *a2;
      *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
    }
    else
    {
      v6 = *a2;
      outlined copy of GraphicsImage.Contents((id)*a2, *((_BYTE *)a2 + 8));
      *(_QWORD *)a1 = v6;
      *(_BYTE *)(a1 + 8) = v5;
    }
    *(_QWORD *)(a1 + 16) = a2[2];
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 3);
    *(_BYTE *)(a1 + 40) = *((_BYTE *)a2 + 40);
    *(_OWORD *)(a1 + 44) = *(_OWORD *)((char *)a2 + 44);
    *(_BYTE *)(a1 + 60) = *((_BYTE *)a2 + 60);
    v10 = *((_OWORD *)a2 + 5);
    *(_OWORD *)(a1 + 64) = *((_OWORD *)a2 + 4);
    *(_OWORD *)(a1 + 80) = v10;
    *(_BYTE *)(a1 + 96) = *((_BYTE *)a2 + 96);
    *(_BYTE *)(a1 + 97) = v4;
    *(_BYTE *)(a1 + 98) = *((_BYTE *)a2 + 98);
    *(_BYTE *)(a1 + 99) = *((_BYTE *)a2 + 99);
  }
  return a1;
}

uint64_t assignWithCopy for VariableBlurStyle.Mask(uint64_t a1, __int128 *a2)
{
  unsigned int v4;
  int v5;
  int v6;
  id v7;
  void *v8;
  char v9;
  int v10;
  id v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  id v17;
  id v18;
  char v19;
  id v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;

  v4 = *((unsigned __int8 *)a2 + 97);
  if (*(unsigned __int8 *)(a1 + 97) > 1u)
  {
    if (v4 <= 1)
    {
      v10 = *((unsigned __int8 *)a2 + 8);
      if (v10 == 255)
      {
        v18 = *(id *)a2;
        *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
        *(_QWORD *)a1 = v18;
      }
      else
      {
        v11 = *(id *)a2;
        outlined copy of GraphicsImage.Contents(*(id *)a2, *((_BYTE *)a2 + 8));
        *(_QWORD *)a1 = v11;
        *(_BYTE *)(a1 + 8) = v10;
      }
      *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
      *(_OWORD *)(a1 + 24) = *(__int128 *)((char *)a2 + 24);
      goto LABEL_19;
    }
  }
  else
  {
    v5 = *(unsigned __int8 *)(a1 + 8);
    if (v4 <= 1)
    {
      v6 = *((unsigned __int8 *)a2 + 8);
      if (v5 == 255)
      {
        if (v6 == 255)
        {
          v20 = *(id *)a2;
          *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
          *(_QWORD *)a1 = v20;
        }
        else
        {
          v17 = *(id *)a2;
          outlined copy of GraphicsImage.Contents(*(id *)a2, *((_BYTE *)a2 + 8));
          *(_QWORD *)a1 = v17;
          *(_BYTE *)(a1 + 8) = v6;
        }
      }
      else if (v6 == 255)
      {
        outlined destroy of GraphicsImage.Contents(a1);
        v19 = *((_BYTE *)a2 + 8);
        *(_QWORD *)a1 = *(_QWORD *)a2;
        *(_BYTE *)(a1 + 8) = v19;
      }
      else
      {
        v7 = *(id *)a2;
        outlined copy of GraphicsImage.Contents(*(id *)a2, *((_BYTE *)a2 + 8));
        v8 = *(void **)a1;
        *(_QWORD *)a1 = v7;
        v9 = *(_BYTE *)(a1 + 8);
        *(_BYTE *)(a1 + 8) = v6;
        outlined consume of GraphicsImage.Contents(v8, v9);
      }
      *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
      *(_QWORD *)(a1 + 24) = *((_QWORD *)a2 + 3);
      *(_QWORD *)(a1 + 32) = *((_QWORD *)a2 + 4);
LABEL_19:
      *(_BYTE *)(a1 + 40) = *((_BYTE *)a2 + 40);
      v21 = *(__int128 *)((char *)a2 + 44);
      *(_BYTE *)(a1 + 60) = *((_BYTE *)a2 + 60);
      *(_OWORD *)(a1 + 44) = v21;
      v22 = a2[4];
      v23 = a2[5];
      *(_BYTE *)(a1 + 96) = *((_BYTE *)a2 + 96);
      *(_OWORD *)(a1 + 64) = v22;
      *(_OWORD *)(a1 + 80) = v23;
      *(_BYTE *)(a1 + 97) = *((_BYTE *)a2 + 97);
      *(_BYTE *)(a1 + 98) = *((_BYTE *)a2 + 98);
      *(_BYTE *)(a1 + 99) = *((_BYTE *)a2 + 99);
      return a1;
    }
    if (v5 != 255)
      outlined consume of GraphicsImage.Contents(*(void **)a1, v5);
  }
  v12 = *a2;
  v13 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v13;
  *(_OWORD *)a1 = v12;
  v14 = a2[3];
  v15 = a2[4];
  v16 = a2[5];
  *(_DWORD *)(a1 + 96) = *((_DWORD *)a2 + 24);
  *(_OWORD *)(a1 + 64) = v15;
  *(_OWORD *)(a1 + 80) = v16;
  *(_OWORD *)(a1 + 48) = v14;
  return a1;
}

__n128 __swift_memcpy100_8(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __n128 result;
  __int128 v5;
  __int128 v6;

  v2 = *a2;
  v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  result = (__n128)a2[3];
  v5 = a2[4];
  v6 = a2[5];
  *(_DWORD *)(a1 + 96) = *((_DWORD *)a2 + 24);
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  *(__n128 *)(a1 + 48) = result;
  return result;
}

uint64_t assignWithTake for VariableBlurStyle.Mask(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  int v5;
  char v6;
  int v7;
  void *v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;

  if (*(unsigned __int8 *)(a1 + 97) <= 1u)
  {
    v4 = *(unsigned __int8 *)(a2 + 97);
    v5 = *(unsigned __int8 *)(a1 + 8);
    if (v4 <= 1)
    {
      v6 = v4;
      if (v5 != 255)
      {
        v7 = *(unsigned __int8 *)(a2 + 8);
        if (v7 != 255)
        {
          v8 = *(void **)a1;
          *(_QWORD *)a1 = *(_QWORD *)a2;
          *(_BYTE *)(a1 + 8) = v7;
          outlined consume of GraphicsImage.Contents(v8, v5);
LABEL_11:
          *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
          *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
          *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
          *(_OWORD *)(a1 + 44) = *(_OWORD *)(a2 + 44);
          *(_BYTE *)(a1 + 60) = *(_BYTE *)(a2 + 60);
          v12 = *(_OWORD *)(a2 + 80);
          *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
          *(_OWORD *)(a1 + 80) = v12;
          *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
          *(_BYTE *)(a1 + 97) = v6;
          *(_BYTE *)(a1 + 98) = *(_BYTE *)(a2 + 98);
          *(_BYTE *)(a1 + 99) = *(_BYTE *)(a2 + 99);
          return a1;
        }
        outlined destroy of GraphicsImage.Contents(a1);
      }
      *(_QWORD *)a1 = *(_QWORD *)a2;
      *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
      goto LABEL_11;
    }
    if (v5 != 255)
      outlined consume of GraphicsImage.Contents(*(void **)a1, v5);
  }
  v9 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v9;
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  v10 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v10;
  v11 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v11;
  return a1;
}

uint64_t getEnumTagSinglePayload for VariableBlurStyle.Mask(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  unsigned int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFE && *(_BYTE *)(a1 + 100))
    return (*(_DWORD *)a1 + 254);
  v3 = *(unsigned __int8 *)(a1 + 97);
  v4 = v3 >= 2;
  v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4)
    v5 = -1;
  if (v5 + 1 >= 2)
    return v5;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for VariableBlurStyle.Mask(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_DWORD *)(result + 96) = 0;
    *(_OWORD *)(result + 64) = 0u;
    *(_OWORD *)(result + 80) = 0u;
    *(_OWORD *)(result + 32) = 0u;
    *(_OWORD *)(result + 48) = 0u;
    *(_OWORD *)result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_DWORD *)result = a2 - 254;
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 100) = 1;
  }
  else
  {
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 100) = 0;
    if (a2)
      *(_BYTE *)(result + 97) = a2 + 2;
  }
  return result;
}

uint64_t getEnumTag for VariableBlurStyle.Mask(uint64_t a1)
{
  unsigned int v1;
  BOOL v2;
  int v3;

  v1 = *(unsigned __int8 *)(a1 + 97);
  v2 = v1 >= 2;
  v3 = (v1 + 2147483646) & 0x7FFFFFFF;
  if (v2)
    return (v3 + 1);
  else
    return 0;
}

double destructiveInjectEnumTag for VariableBlurStyle.Mask(uint64_t a1, unsigned int a2)
{
  double result;

  if (a2 > 0xFE)
  {
    *(_QWORD *)(a1 + 88) = 0;
    result = 0.0;
    *(_OWORD *)(a1 + 72) = 0u;
    *(_OWORD *)(a1 + 56) = 0u;
    *(_OWORD *)(a1 + 40) = 0u;
    *(_OWORD *)(a1 + 24) = 0u;
    *(_OWORD *)(a1 + 8) = 0u;
    *(_DWORD *)(a1 + 96) = 0;
    *(_QWORD *)a1 = a2 - 255;
  }
  else if (a2)
  {
    *(_BYTE *)(a1 + 97) = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for VariableBlurStyle.Mask()
{
  return &type metadata for VariableBlurStyle.Mask;
}

uint64_t outlined release of (VariableBlurStyle.Mask, VariableBlurStyle.Mask)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  __int128 v12;
  uint64_t v13;
  void *v14;

  v14 = *(void **)(a1 + 104);
  v2 = *(_QWORD *)(a1 + 120);
  v13 = *(_QWORD *)(a1 + 112);
  v3 = *(_QWORD *)(a1 + 128);
  v4 = *(_QWORD *)(a1 + 136);
  v5 = *(_QWORD *)(a1 + 144);
  v6 = *(_QWORD *)(a1 + 152);
  v7 = *(_QWORD *)(a1 + 160);
  v12 = *(_OWORD *)(a1 + 168);
  v9 = *(_QWORD *)(a1 + 184);
  v8 = *(_QWORD *)(a1 + 192);
  v10 = *(_DWORD *)(a1 + 200);
  outlined consume of VariableBlurStyle.Mask(*(void **)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_DWORD *)(a1 + 96), BYTE1(*(_DWORD *)(a1 + 96)));
  outlined consume of VariableBlurStyle.Mask(v14, v13, v2, v3, v4, v5, v6, v7, v12, *((uint64_t *)&v12 + 1), v9, v8, v10, BYTE1(v10));
  return a1;
}

SwiftUI::FillStyle __swiftcall FillStyle.init(eoFill:antialiased:)(Swift::Bool eoFill, Swift::Bool antialiased)
{
  __int16 v2;

  if (antialiased)
    v2 = 256;
  else
    v2 = 0;
  return (SwiftUI::FillStyle)(v2 & 0xFFFE | eoFill);
}

BOOL static FillStyle.== infix(_:_:)(int a1, unsigned int a2)
{
  return ((a1 ^ a2 | ((a1 ^ a2) >> 8)) & 1) == 0;
}

uint64_t FillStyle.isEOFilled.getter(char a1)
{
  return a1 & 1;
}

uint64_t FillStyle.isEOFilled.setter(uint64_t result)
{
  _BYTE *v1;

  *v1 = result;
  return result;
}

uint64_t (*FillStyle.isEOFilled.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t FillStyle.isAntialiased.getter(unsigned int a1)
{
  return (a1 >> 8) & 1;
}

uint64_t FillStyle.isAntialiased.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 1) = result;
  return result;
}

uint64_t (*FillStyle.isAntialiased.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

void FillStyle.encode(to:)(uint64_t a1, __int16 a2)
{
  if ((a2 & 1) != 0)
  {
    ProtobufEncoder.encodeVarint(_:)(8uLL);
    ProtobufEncoder.encodeVarint(_:)(1uLL);
  }
  if ((a2 & 0x100) == 0)
  {
    ProtobufEncoder.encodeVarint(_:)(0x10uLL);
    ProtobufEncoder.encodeVarint(_:)(0);
  }
}

unint64_t FillStyle.init(from:)(_QWORD *a1)
{
  return specialized FillStyle.init(from:)(a1) & 0x101;
}

void protocol witness for ProtobufEncodableMessage.encode(to:) in conformance FillStyle()
{
  _BYTE *v0;
  char v1;

  v1 = v0[1];
  if (*v0 == 1)
  {
    ProtobufEncoder.encodeVarint(_:)(8uLL);
    ProtobufEncoder.encodeVarint(_:)(1uLL);
  }
  if ((v1 & 1) == 0)
  {
    ProtobufEncoder.encodeVarint(_:)(0x10uLL);
    ProtobufEncoder.encodeVarint(_:)(0);
  }
}

unint64_t protocol witness for ProtobufDecodableMessage.init(from:) in conformance FillStyle@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  unint64_t result;

  result = specialized FillStyle.init(from:)(a1);
  if (!v2)
  {
    *a2 = result & 1;
    a2[1] = BYTE1(result) & 1;
  }
  return result;
}

unint64_t specialized FillStyle.init(from:)(_QWORD *a1)
{
  uint64_t v1;
  unint64_t v3;
  unint64_t v4;
  BOOL v5;
  BOOL v6;
  int v7;
  unint64_t result;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;

  v3 = a1[1];
  v4 = a1[2];
  if (v3 >= v4)
  {
    v5 = 0;
    a1[3] = 0;
    goto LABEL_4;
  }
  v5 = 0;
  v6 = 1;
  do
  {
    result = a1[3];
    if (result)
    {
      v10 = a1[4];
      if (v3 < v10)
        goto LABEL_15;
      if (v10 < v3)
        goto LABEL_41;
      a1[3] = 0;
    }
    result = ProtobufDecoder.decodeVarint()();
    if (v1)
      return result;
    if (result <= 7)
      goto LABEL_41;
LABEL_15:
    if (result >> 3 == 2)
    {
      if ((result & 7) != 0)
      {
        if ((result & 7) != 2)
          goto LABEL_41;
        result = ProtobufDecoder.decodeVarint()();
        if (v1)
          return result;
        if ((result & 0x8000000000000000) != 0)
          goto LABEL_46;
        v12 = a1[1] + result;
        if (v4 < v12)
        {
LABEL_41:
          lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
          swift_allocError();
          return swift_willThrow();
        }
        a1[3] = 16;
        a1[4] = v12;
      }
      result = ProtobufDecoder.decodeVarint()();
      if (v1)
        return result;
      v6 = result != 0;
    }
    else if (result >> 3 == 1)
    {
      if ((result & 7) != 0)
      {
        if ((result & 7) != 2)
          goto LABEL_41;
        result = ProtobufDecoder.decodeVarint()();
        if (v1)
          return result;
        if ((result & 0x8000000000000000) != 0)
        {
          __break(1u);
LABEL_46:
          __break(1u);
LABEL_47:
          __break(1u);
          JUMPOUT(0x234D5CA14);
        }
        v11 = a1[1] + result;
        if (v4 < v11)
          goto LABEL_41;
        a1[3] = 8;
        a1[4] = v11;
      }
      result = ProtobufDecoder.decodeVarint()();
      if (v1)
        return result;
      v5 = result != 0;
    }
    else
    {
      switch(result & 7)
      {
        case 0uLL:
          result = ProtobufDecoder.decodeVarint()();
          if (v1)
            return result;
          break;
        case 1uLL:
          v9 = a1[1] + 8;
          if (v4 >= v9)
            goto LABEL_7;
          goto LABEL_41;
        case 2uLL:
          result = ProtobufDecoder.decodeVarint()();
          if (v1)
            return result;
          if ((result & 0x8000000000000000) != 0)
            goto LABEL_47;
          v9 = a1[1] + result;
          if (v4 < v9)
            goto LABEL_41;
LABEL_7:
          a1[1] = v9;
          break;
        case 5uLL:
          v9 = a1[1] + 4;
          if (v4 < v9)
            goto LABEL_41;
          goto LABEL_7;
        default:
          goto LABEL_41;
      }
    }
    v3 = a1[1];
    v4 = a1[2];
  }
  while (v3 < v4);
  a1[3] = 0;
  if (!v6)
  {
    v7 = 0;
    return v7 | v5;
  }
LABEL_4:
  v7 = 256;
  return v7 | v5;
}

uint64_t storeEnumTagSinglePayload for FillStyle(_WORD *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 65281 <= 0xFFFEFFFF)
    v3 = 2;
  else
    v3 = 4;
  if (a3 + 65281 < 0xFF0000)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_234D5CA78 + 4 * byte_23529DD65[v4]))();
  *a1 = a2 - 255;
  return ((uint64_t (*)(void))((char *)sub_234D5CAAC + 4 * byte_23529DD60[v4]))();
}

uint64_t sub_234D5CAAC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 2) = v1;
  return result;
}

uint64_t sub_234D5CAB4(uint64_t result, int a2)
{
  *(_WORD *)(result + 2) = 0;
  if (a2)
    JUMPOUT(0x234D5CABCLL);
  return result;
}

uint64_t sub_234D5CAC8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 2) = 0;
  if (!a2)
    JUMPOUT(0x234D5CAD0);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_234D5CAD4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 2) = v1;
  return result;
}

uint64_t sub_234D5CADC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 2) = v1;
  return result;
}

ValueMetadata *type metadata accessor for FillStyle()
{
  return &type metadata for FillStyle;
}

BOOL static BlendMode.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

void BlendMode.hash(into:)()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0);
}

Swift::Int BlendMode.hashValue.getter()
{
  unsigned __int8 *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t ShapeStyle.blendMode(_:)@<X0>(char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v9;
  double v10;
  uint64_t v11;
  char *v12;
  char v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;

  v9 = *(_QWORD *)(a2 - 8);
  v10 = MEMORY[0x24BDAC7A8](a1);
  v12 = (char *)&v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v9 + 16))(v12, v4, a2, v10);
  v13 = *a1;
  (*(void (**)(uint64_t, char *, uint64_t))(v9 + 32))(a4, v12, a2);
  result = type metadata accessor for _BlendModeShapeStyle(0, a2, a3, v14);
  *(_BYTE *)(a4 + *(int *)(result + 36)) = v13;
  return result;
}

uint64_t _BlendModeShapeStyle.init(style:blendMode:)@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9;
  uint64_t result;

  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 32))(a5, a1);
  result = type metadata accessor for _BlendModeShapeStyle(0, a3, a4, v9);
  *(_BYTE *)(a5 + *(int *)(result + 36)) = *a2;
  return result;
}

uint64_t type metadata accessor for _BlendModeShapeStyle(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for _BlendModeShapeStyle);
}

uint64_t _BlendModeShapeStyle.style.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8) + 16))(a2, v2);
}

uint64_t _BlendModeShapeStyle.style.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 40))(v2, a1);
}

uint64_t (*_BlendModeShapeStyle.style.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t _BlendModeShapeStyle.blendMode.getter@<X0>(uint64_t result@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;

  *a2 = *(_BYTE *)(v2 + *(int *)(result + 36));
  return result;
}

_BYTE *_BlendModeShapeStyle.blendMode.setter(_BYTE *result, uint64_t a2)
{
  uint64_t v2;

  *(_BYTE *)(v2 + *(int *)(a2 + 36)) = *result;
  return result;
}

uint64_t (*_BlendModeShapeStyle.blendMode.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

void _BlendModeShapeStyle._apply(to:)(uint64_t a1)
{
  char *v1;

  v1 = (char *)&loc_234D5CD7C + *((int *)qword_234D5D1B0 + *(unsigned __int8 *)(MEMORY[0x24BDAC7A8](a1) + 24));
  __asm { BR              X10 }
}

uint64_t sub_234D5CD8C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 + 24) + 32))(a1, v1);
}

uint64_t sub_234D5CDB8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;

  if (!*(_BYTE *)(v1 + *(int *)(v2 + 36)))
    return sub_234D5CD8C(a1);
  result = outlined consume of _ShapeStyle_Shape.Result(*(_QWORD *)(a1 + 32), *(_BYTE *)(a1 + 40));
  *(_QWORD *)(a1 + 32) = 0;
  *(_BYTE *)(a1 + 40) = 0;
  return result;
}

uint64_t static _BlendModeShapeStyle._apply(to:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 40))();
}

uint64_t protocol witness for static ShapeStyle._apply(to:) in conformance _BlendModeShapeStyle<A>(uint64_t a1, uint64_t a2)
{
  return static _BlendModeShapeStyle._apply(to:)(a1, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24));
}

uint64_t partial apply for closure #2 in _BlendModeShapeStyle._apply(to:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;

  v6 = v3[2];
  v7 = v3[3];
  v8 = v3[4];
  v9 = *(_BYTE *)(v8 + *(int *)(type metadata accessor for _BlendModeShapeStyle(0, v6, v7, a2) + 36));
  *(_QWORD *)a3 = a1;
  *(_BYTE *)(a3 + 8) = v9;
  return swift_retain();
}

void type metadata accessor for _BlendModeShapeStyle<AnyShapeStyle>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  uint64_t v5;

  if (!lazy cache variable for type metadata for _BlendModeShapeStyle<AnyShapeStyle>)
  {
    v4 = type metadata accessor for _BlendModeShapeStyle(0, (uint64_t)&type metadata for AnyShapeStyle, (uint64_t)&protocol witness table for AnyShapeStyle, a4);
    if (!v5)
      atomic_store(v4, (unint64_t *)&lazy cache variable for type metadata for _BlendModeShapeStyle<AnyShapeStyle>);
  }
}

unint64_t lazy protocol witness table accessor for type BlendMode and conformance BlendMode()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type BlendMode and conformance BlendMode;
  if (!lazy protocol witness table cache variable for type BlendMode and conformance BlendMode)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for BlendMode, &type metadata for BlendMode);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BlendMode and conformance BlendMode);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for BlendMode(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 20 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 20) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xEC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xEB)
    return ((uint64_t (*)(void))((char *)&loc_234D5D338 + 4 * byte_23529DDD9[v4]))();
  *a1 = a2 + 20;
  return ((uint64_t (*)(void))((char *)sub_234D5D36C + 4 * asc_23529DDD4[v4]))();
}

uint64_t sub_234D5D36C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_234D5D374(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x234D5D37CLL);
  return result;
}

uint64_t sub_234D5D388(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x234D5D390);
  *(_BYTE *)result = a2 + 20;
  return result;
}

uint64_t sub_234D5D394(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_234D5D39C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for BlendMode()
{
  return &type metadata for BlendMode;
}

uint64_t type metadata completion function for _BlendModeShapeStyle()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for _BlendModeShapeStyle(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  char v10;
  int v11;
  unsigned int v13;
  int v14;
  unsigned int v15;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0xEB)
    v6 = 235;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(_QWORD *)(v4 + 64);
  v8 = a2 - v6;
  if (a2 <= v6)
    goto LABEL_22;
  v9 = v7 + 1;
  v10 = 8 * (v7 + 1);
  if ((v7 + 1) <= 3)
  {
    v13 = ((v8 + ~(-1 << v10)) >> v10) + 1;
    if (HIWORD(v13))
    {
      v11 = *(_DWORD *)(a1 + v9);
      if (!v11)
        goto LABEL_22;
      goto LABEL_15;
    }
    if (v13 > 0xFF)
    {
      v11 = *(unsigned __int16 *)(a1 + v9);
      if (!*(_WORD *)(a1 + v9))
        goto LABEL_22;
      goto LABEL_15;
    }
    if (v13 < 2)
    {
LABEL_22:
      if (v5 >= 0xEB)
        return (*(uint64_t (**)(void))(v4 + 48))();
      v15 = *(unsigned __int8 *)(v7 + a1);
      if (v15 >= 0x15)
        return v15 - 20;
      else
        return 0;
    }
  }
  v11 = *(unsigned __int8 *)(a1 + v9);
  if (!*(_BYTE *)(a1 + v9))
    goto LABEL_22;
LABEL_15:
  v14 = (v11 - 1) << v10;
  if (v9 > 3)
    v14 = 0;
  if ((_DWORD)v7 == -1)
    return v6 + v14 + 1;
  if (v9 > 3)
    LODWORD(v9) = 4;
  return ((uint64_t (*)(void))((char *)&loc_234D5D4F4 + 4 * byte_23529DDDE[(v9 - 1)]))();
}

void storeEnumTagSinglePayload for _BlendModeShapeStyle(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  unsigned int v11;
  int v12;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0xEBu)
    v6 = 235;
  else
    v6 = *(_DWORD *)(v5 + 84);
  v7 = *(_QWORD *)(v5 + 64);
  v8 = v7 + 1;
  if (a3 > v6)
  {
    if (v8 <= 3)
    {
      v11 = ((a3 - v6 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v11))
      {
        v9 = 4u;
      }
      else if (v11 >= 0x100)
      {
        v9 = 2;
      }
      else
      {
        v9 = v11 > 1;
      }
    }
    else
    {
      v9 = 1u;
    }
  }
  else
  {
    v9 = 0;
  }
  if (v6 < a2)
  {
    v10 = ~v6 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v7 != -1)
      {
        v12 = v10 & ~(-1 << (8 * v8));
        bzero(a1, v7 + 1);
        if (v8 == 3)
        {
          *a1 = v12;
          *((_BYTE *)a1 + 2) = BYTE2(v12);
        }
        else if (v8 == 2)
        {
          *a1 = v12;
        }
        else
        {
          *(_BYTE *)a1 = v12;
        }
      }
    }
    else
    {
      bzero(a1, v7 + 1);
      *(_DWORD *)a1 = v10;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X12 }
}

_UNKNOWN **sub_234D5D728()
{
  return &protocol witness table for _BlendModeShapeStyle<A>;
}

unint64_t EnvironmentValues.backgroundMaterial.setter(uint64_t a1)
{
  uint64_t *v1;
  unint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_QWORD *)a1;
  v3 = *(_DWORD *)(a1 + 8);
  v4 = *v1;
  swift_retain_n();
  outlined copy of Material?(v2);
  specialized closure #1 in PropertyList.subscript.setter(v1, v2, v3);
  swift_release();
  outlined consume of Material?(v2);
  if (v1[1])
  {
    v5 = *v1;
    swift_retain();
    swift_retain();
    specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v4, v5);
    swift_release();
    swift_release();
  }
  swift_release();
  return outlined consume of Material?(v2);
}

void Material.ResolvedMaterial.colorScheme.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 8) & 1;
}

uint64_t *AnyMaterialLayer.init(content:opacity:blendMode:)@<X0>(uint64_t *result@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>, float a4@<S0>)
{
  uint64_t v6;
  uint64_t v7;
  char v8;

  v6 = *result;
  v7 = *a2;
  v8 = *((_BYTE *)a2 + 8);
  if (one-time initialization token for normal != -1)
    result = (uint64_t *)swift_once();
  *(_QWORD *)a3 = v6;
  *(float *)(a3 + 8) = a4;
  *(_QWORD *)(a3 + 16) = v7;
  *(_BYTE *)(a3 + 24) = v8;
  return result;
}

void Material.ID.hash(into:)()
{
  uint64_t v0;
  Swift::UInt v1;
  void *v2;
  id v3;
  id v4;

  switch(*(_QWORD *)v0)
  {
    case 0:
      v1 = 0;
      goto LABEL_12;
    case 1:
      v1 = 1;
      goto LABEL_12;
    case 2:
      v1 = 2;
      goto LABEL_12;
    case 3:
      v1 = 3;
      goto LABEL_12;
    case 4:
      v1 = 4;
      goto LABEL_12;
    case 5:
      v1 = 5;
      goto LABEL_12;
    case 6:
      v1 = 6;
      goto LABEL_12;
    case 7:
      v1 = 7;
LABEL_12:
      Hasher._combine(_:)(v1);
      break;
    default:
      v2 = *(void **)(*(_QWORD *)v0 + 48);
      Hasher._combine(_:)(8uLL);
      v3 = v2;
      String.hash(into:)();
      String.hash(into:)();
      if (v2)
      {
        Hasher._combine(_:)(1u);
        v4 = v3;
        NSObject.hash(into:)();

      }
      else
      {
        Hasher._combine(_:)(0);
      }
      break;
  }
}

Swift::Int Material.ID.hashValue.getter()
{
  Hasher.init(_seed:)();
  Material.ID.hash(into:)();
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Material.ID()
{
  Hasher.init(_seed:)();
  Material.ID.hash(into:)();
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Material.ID()
{
  Hasher.init(_seed:)();
  Material.ID.hash(into:)();
  return Hasher._finalize()();
}

uint64_t Material.ResolvedMaterial.Flags.rawValue.getter()
{
  unsigned int *v0;

  return *v0;
}

uint64_t Material.ResolvedMaterial.Flags.init(rawValue:)@<X0>(uint64_t result@<X0>, _DWORD *a2@<X8>)
{
  *a2 = result;
  return result;
}

void static Material.ResolvedMaterial.Flags.darkColorScheme.getter(_DWORD *a1@<X8>)
{
  *a1 = 1;
}

void static Material.ResolvedMaterial.Flags.reduceTransparency.getter(_DWORD *a1@<X8>)
{
  *a1 = 2;
}

void static Material.ResolvedMaterial.Flags.increasedContrast.getter(_DWORD *a1@<X8>)
{
  *a1 = 4;
}

void static Material.ResolvedMaterial.Flags.disableChameleon.getter(_DWORD *a1@<X8>)
{
  *a1 = 8;
}

void static Material.ResolvedMaterial.Flags.isActive.getter(_DWORD *a1@<X8>)
{
  *a1 = 16;
}

void static Material.ResolvedMaterial.Flags.noBlur.getter(_DWORD *a1@<X8>)
{
  *a1 = 32;
}

void static Material.ResolvedMaterial.Flags.isEmphasized.getter(_DWORD *a1@<X8>)
{
  *a1 = 64;
}

void static Material.ResolvedMaterial.Flags.filtersInPlace.getter(_DWORD *a1@<X8>)
{
  *a1 = 128;
}

void static Material.ResolvedMaterial.Flags.noTransparentBlur.getter(_DWORD *a1@<X8>)
{
  *a1 = 256;
}

void static Material.ResolvedMaterial.Flags.isVisionEnabled.getter(_DWORD *a1@<X8>)
{
  *a1 = 512;
}

void static Material.ResolvedMaterial.Flags.noNormalizedEdgesBlur.getter(_DWORD *a1@<X8>)
{
  *a1 = 1024;
}

void static Material.ResolvedMaterial.Flags.applyHardEdgesBlur.getter(_DWORD *a1@<X8>)
{
  *a1 = 2048;
}

uint64_t Material.ResolvedMaterial.Flags.init(environment:)@<X0>(uint64_t *a1@<X0>, int *a2@<X8>)
{
  uint64_t v3;
  int v4;
  char v5;
  int v6;
  Swift::Int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  Swift::Int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  int v15;
  uint64_t v16;
  unsigned __int8 v17;

  v3 = *a1;
  if (a1[1])
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v3, (char *)&v17);
    swift_release_n();
    swift_release_n();
    v4 = v17;
    swift_retain_n();
    swift_retain_n();
    v5 = specialized PropertyList.Tracker.value<A>(_:for:)(v3);
    swift_release_n();
    swift_release_n();
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v3, (char *)&v17);
    swift_release_n();
    swift_release_n();
    v6 = v17;
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<ColorSchemeKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ColorSchemeKey>, (uint64_t)&type metadata for ColorSchemeKey, (uint64_t)&protocol witness table for ColorSchemeKey);
    BloomFilter.init(hashValue:)(v7);
    v8 = swift_retain_n();
    v9 = specialized find1<A>(_:key:filter:)(v8, v16);
    if (v9)
      v4 = *(unsigned __int8 *)(v9 + 72);
    else
      v4 = 0;
    swift_release_n();
    v10 = swift_retain_n();
    v5 = specialized closure #1 in PropertyList.subscript.getter(v10);
    swift_release_n();
    type metadata accessor for EnvironmentPropertyKey<ColorSchemeKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<ColorSchemeContrastKey>, (uint64_t)&type metadata for ColorSchemeContrastKey, (uint64_t)&protocol witness table for ColorSchemeContrastKey);
    BloomFilter.init(hashValue:)(v11);
    v12 = swift_retain_n();
    v13 = specialized find1<A>(_:key:filter:)(v12, v16);
    if (v13)
      v6 = *(unsigned __int8 *)(v13 + 72);
    else
      v6 = 0;
    swift_release_n();
  }
  swift_release();
  result = swift_release();
  v15 = v4 | 2;
  if ((v5 & 1) == 0)
    v15 = v4;
  if (v6)
    v15 |= 4u;
  *a2 = v15;
  return result;
}

unint64_t Material.ResolvedMaterial.id.getter@<X0>(unint64_t *a1@<X8>)
{
  unint64_t *v1;
  unint64_t v2;

  v2 = *v1;
  *a1 = *v1;
  return outlined copy of Material.ID(v2);
}

unint64_t Material.ResolvedMaterial.id.setter(unint64_t *a1)
{
  unint64_t *v1;
  unint64_t v2;
  unint64_t result;

  v2 = *a1;
  result = outlined consume of Material.ID(*v1);
  *v1 = v2;
  return result;
}

uint64_t (*Material.ResolvedMaterial.id.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

void Material.ResolvedMaterial.flags.getter(_DWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_DWORD *)(v1 + 8);
}

_DWORD *Material.ResolvedMaterial.flags.setter(_DWORD *result)
{
  uint64_t v1;

  *(_DWORD *)(v1 + 8) = *result;
  return result;
}

uint64_t (*Material.ResolvedMaterial.flags.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

void Material.ResolvedMaterial.colorSchemeContrast.getter(BOOL *a1@<X8>)
{
  uint64_t v1;

  *a1 = (*(_BYTE *)(v1 + 8) & 4) != 0;
}

uint64_t Material.ResolvedMaterial.isEmphasized.getter()
{
  uint64_t v0;

  return (*(unsigned __int8 *)(v0 + 8) >> 6) & 1;
}

void Material.ResolvedMaterial.hash(into:)()
{
  uint64_t v0;
  unint64_t v1;
  Swift::UInt32 v2;
  Swift::UInt v3;
  void *v4;
  id v5;
  id v6;

  v1 = *(_QWORD *)v0;
  v2 = *(_DWORD *)(v0 + 8);
  switch(*(_QWORD *)v0)
  {
    case 0:
      v3 = 0;
      goto LABEL_12;
    case 1:
      v3 = 1;
      goto LABEL_12;
    case 2:
      v3 = 2;
      goto LABEL_12;
    case 3:
      v3 = 3;
      goto LABEL_12;
    case 4:
      v3 = 4;
      goto LABEL_12;
    case 5:
      v3 = 5;
      goto LABEL_12;
    case 6:
      v3 = 6;
      goto LABEL_12;
    case 7:
      v3 = 7;
LABEL_12:
      Hasher._combine(_:)(v3);
      break;
    default:
      v4 = *(void **)(v1 + 48);
      Hasher._combine(_:)(8uLL);
      outlined copy of Material.ID(v1);
      v5 = v4;
      String.hash(into:)();
      String.hash(into:)();
      if (v4)
      {
        Hasher._combine(_:)(1u);
        v6 = v5;
        NSObject.hash(into:)();

      }
      else
      {
        Hasher._combine(_:)(0);
      }
      outlined consume of Material.ID(v1);
      break;
  }
  Hasher._combine(_:)(v2);
}

uint64_t static Material.ResolvedMaterial.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  int v3;
  int v4;
  _QWORD *v6;
  _QWORD *v7;

  v2 = *(_QWORD **)a1;
  v3 = *(_DWORD *)(a1 + 8);
  v4 = *(_DWORD *)(a2 + 8);
  v6 = *(_QWORD **)a2;
  v7 = v2;
  return specialized static Material.ID.== infix(_:_:)(&v7, &v6) & (v3 == v4);
}

Swift::Int Material.ResolvedMaterial.hashValue.getter()
{
  Hasher.init(_seed:)();
  Material.ResolvedMaterial.hash(into:)();
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Material.ResolvedMaterial()
{
  Hasher.init(_seed:)();
  Material.ResolvedMaterial.hash(into:)();
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Material.ResolvedMaterial()
{
  Hasher.init(_seed:)();
  Material.ResolvedMaterial.hash(into:)();
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance Material.ResolvedMaterial(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  int v3;
  int v4;
  _QWORD *v6;
  _QWORD *v7;

  v2 = *(_QWORD **)a1;
  v3 = *(_DWORD *)(a1 + 8);
  v4 = *(_DWORD *)(a2 + 8);
  v6 = *(_QWORD **)a2;
  v7 = v2;
  return specialized static Material.ID.== infix(_:_:)(&v7, &v6) & (v3 == v4);
}

uint64_t (*Material.id.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t (*Material.flags.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t *Material.init(_:)@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  v2 = *result;
  *(_DWORD *)(a2 + 8) = 0;
  *(_QWORD *)a2 = v2;
  return result;
}

unint64_t Material.resolve(in:role:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  int v8;
  uint64_t v10[2];
  int v11;

  v5 = *a1;
  v4 = a1[1];
  v6 = *(_QWORD *)v2;
  v7 = *(_DWORD *)(v2 + 8);
  v10[0] = v5;
  v10[1] = v4;
  swift_retain();
  swift_retain();
  Material.ResolvedMaterial.Flags.init(environment:)(v10, &v11);
  v8 = v11 | v7;
  *(_QWORD *)a2 = v6;
  *(_DWORD *)(a2 + 8) = v8;
  return outlined copy of Material.ID(v6);
}

unint64_t Material.disablingBlur(_:)@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  unint64_t v3;
  int v4;
  unsigned int v5;
  int v6;

  v3 = *(_QWORD *)v2;
  v4 = *(_DWORD *)(v2 + 8);
  *(_QWORD *)a2 = *(_QWORD *)v2;
  v5 = v4 & 0xFFFFFFDF;
  if ((a1 & 1) != 0)
    v6 = 32;
  else
    v6 = 0;
  *(_DWORD *)(a2 + 8) = v5 | v6;
  return outlined copy of Material.ID(v3);
}

unint64_t Material.applyingFiltersInPlace(_:)@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  unint64_t v3;
  int v4;
  unsigned int v5;
  int v6;

  v3 = *(_QWORD *)v2;
  v4 = *(_DWORD *)(v2 + 8);
  *(_QWORD *)a2 = *(_QWORD *)v2;
  v5 = v4 & 0xFFFFFF7F;
  if ((a1 & 1) != 0)
    v6 = 128;
  else
    v6 = 0;
  *(_DWORD *)(a2 + 8) = v5 | v6;
  return outlined copy of Material.ID(v3);
}

unint64_t static Material.regular.getter@<X0>(uint64_t a1@<X8>)
{
  return static Material.regular.getter(&one-time initialization token for regular, (unint64_t *)&static Material.regular, &dword_2561A30A0, a1);
}

unint64_t static Material.thick.getter@<X0>(uint64_t a1@<X8>)
{
  return static Material.regular.getter(&one-time initialization token for thick, (unint64_t *)&static Material.thick, &dword_2561ABF88, a1);
}

unint64_t static Material.thin.getter@<X0>(uint64_t a1@<X8>)
{
  return static Material.regular.getter(&one-time initialization token for thin, (unint64_t *)&static Material.thin, &dword_2561AAF80, a1);
}

unint64_t static Material.ultraThin.getter@<X0>(uint64_t a1@<X8>)
{
  return static Material.regular.getter(one-time initialization token for ultraThin, (unint64_t *)&static Material.ultraThin, &dword_2561B4F68, a1);
}

unint64_t static Material.ultraThick.getter@<X0>(uint64_t a1@<X8>)
{
  return static Material.regular.getter(one-time initialization token for ultraThick, (unint64_t *)&static Material.ultraThick, &dword_2561B4F78, a1);
}

unint64_t static Material.bar.getter@<X0>(uint64_t a1@<X8>)
{
  return static Material.regular.getter(&one-time initialization token for bar, (unint64_t *)&static Material.bar, &dword_2561A3088, a1);
}

void one-time initialization function for regular()
{
  dword_2561A30A0 = 0;
  static Material.regular = 2;
}

void one-time initialization function for thick()
{
  dword_2561ABF88 = 0;
  static Material.thick = 3;
}

void one-time initialization function for thin()
{
  dword_2561AAF80 = 0;
  static Material.thin = 1;
}

void one-time initialization function for ultraThin()
{
  dword_2561B4F68 = 0;
  static Material.ultraThin = 0;
}

void one-time initialization function for ultraThick()
{
  dword_2561B4F78 = 0;
  static Material.ultraThick = 4;
}

void static Material.pinched.getter(uint64_t a1@<X8>)
{
  *(_DWORD *)(a1 + 8) = 0;
  *(_QWORD *)a1 = 2;
}

id static Material.coreMaterial(bundle:provider:)@<X0>(void *a1@<X0>, uint64_t (*a2)(char *)@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  char v14;
  char v15;

  v15 = 0;
  v5 = a2(&v15);
  v7 = v6;
  v14 = 1;
  v8 = a2(&v14);
  v10 = v9;
  v11 = (_QWORD *)swift_allocObject();
  v11[2] = v5;
  v11[3] = v7;
  v11[4] = v8;
  v11[5] = v10;
  v11[6] = a1;
  *(_DWORD *)(a3 + 8) = 0;
  *(_QWORD *)a3 = v11;
  return a1;
}

void one-time initialization function for bar()
{
  dword_2561A3088 = 0;
  static Material.bar = 5;
}

void one-time initialization function for chrome()
{
  dword_2561B4F88 = 0;
  static Material.chrome = 5;
}

unint64_t static Material.chrome.getter@<X0>(uint64_t a1@<X8>)
{
  return static Material.regular.getter(one-time initialization token for chrome, (unint64_t *)&static Material.chrome, &dword_2561B4F88, a1);
}

unint64_t static Material.regular.getter@<X0>(_QWORD *a1@<X0>, unint64_t *a2@<X1>, int *a3@<X2>, uint64_t a4@<X8>)
{
  unint64_t v7;
  int v8;

  if (*a1 != -1)
    swift_once();
  v7 = *a2;
  v8 = *a3;
  *(_QWORD *)a4 = *a2;
  *(_DWORD *)(a4 + 8) = v8;
  return outlined copy of Material.ID(v7);
}

void static Material.toolbarButton.getter()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

uint64_t static Material._intelligenceLightSource(prefersAudioReactivity:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  v2 = 6;
  if ((result & 1) != 0)
    v2 = 7;
  *(_DWORD *)(a2 + 8) = 0;
  *(_QWORD *)a2 = v2;
  return result;
}

uint64_t View.backgroundMaterial(_:)(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  int v5;
  uint64_t v6;
  uint64_t v8;
  int v9;
  char v10;

  v5 = *((_DWORD *)a1 + 2);
  v8 = *a1;
  v9 = v5;
  v10 = 15;
  type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for MaterialView<Rectangle>, (uint64_t (*)(void))lazy protocol witness table accessor for type Rectangle and conformance Rectangle, (uint64_t)&type metadata for Rectangle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for MaterialView);
  return View.modifier<A>(_:)(&v8, a2, v6, a3);
}

uint64_t MaterialView.init(material:shape:ignoredSafeAreaEdges:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;

  v10 = *a1;
  v11 = *((_DWORD *)a1 + 2);
  v12 = type metadata accessor for MaterialView(0, a4, a5, a4);
  v13 = *(int *)(v12 + 40);
  *(_QWORD *)a6 = v10;
  *(_DWORD *)(a6 + 8) = v11;
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a4 - 8) + 32))(a6 + *(int *)(v12 + 36), a2, a4);
  *(_BYTE *)(a6 + v13) = a3;
  return result;
}

uint64_t View.backgroundMaterial<A>(_:in:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  uint64_t v16;
  char *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v23 = a5;
  v22 = a3;
  v7 = a1;
  v8 = *(_QWORD *)(a4 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v10 = (char *)&v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for MaterialView(0, v11, v12, v11);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x24BDAC7A8](v13);
  v17 = (char *)&v21 - v16;
  v18 = *(_QWORD *)v7;
  LODWORD(v7) = *(_DWORD *)(v7 + 8);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v8 + 16))(v10, a2, a4, v15);
  *(_QWORD *)v17 = v18;
  *((_DWORD *)v17 + 2) = v7;
  v19 = *(int *)(v13 + 40);
  (*(void (**)(char *, char *, uint64_t))(v8 + 32))(&v17[*(int *)(v13 + 36)], v10, a4);
  v17[v19] = 0;
  View.modifier<A>(_:)(v17, v22, v13, v23);
  outlined copy of Material.ID(v18);
  return (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v17, v13);
}

uint64_t EnvironmentValues.backgroundMaterial.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int v7;

  v3 = *v1;
  if (v1[1])
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v3, a1);
    swift_release_n();
  }
  else
  {
    v4 = swift_retain_n();
    v5 = specialized find<A>(_:key:)(v4);
    if (v5)
    {
      v6 = *(_QWORD *)(v5 + 72);
      v7 = *(_DWORD *)(v5 + 80);
      outlined copy of Material?(v6);
    }
    else
    {
      v7 = 0;
      v6 = 8;
    }
    *(_QWORD *)a1 = v6;
    *(_DWORD *)(a1 + 8) = v7;
    swift_release();
  }
  return swift_release_n();
}

uint64_t key path getter for EnvironmentValues.backgroundMaterial : EnvironmentValues@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  int v6;
  uint64_t v7;
  int v8;

  v3 = *(_QWORD *)(a1 + 8);
  swift_retain();
  v4 = swift_retain();
  specialized EnvironmentValues.subscript.getter(v4, v3, (uint64_t)&v7);
  swift_release();
  result = swift_release();
  v6 = v8;
  *(_QWORD *)a2 = v7;
  *(_DWORD *)(a2 + 8) = v6;
  return result;
}

unint64_t key path setter for EnvironmentValues.backgroundMaterial : EnvironmentValues(uint64_t a1)
{
  unint64_t v1;
  int v2;

  v1 = *(_QWORD *)a1;
  v2 = *(_DWORD *)(a1 + 8);
  outlined copy of Material?(*(_QWORD *)a1);
  specialized EnvironmentValues.subscript.setter(v1, v2);
  return outlined consume of Material?(v1);
}

void (*EnvironmentValues.backgroundMaterial.modify(_QWORD *a1))(unint64_t **a1, char a2)
{
  uint64_t *v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int v8;

  v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = v1;
  v4 = *v1;
  if (v1[1])
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v4, (uint64_t)v3);
    swift_release_n();
  }
  else
  {
    v5 = swift_retain_n();
    v6 = specialized find<A>(_:key:)(v5);
    if (v6)
    {
      v7 = *(_QWORD *)(v6 + 72);
      v8 = *(_DWORD *)(v6 + 80);
      outlined copy of Material?(v7);
    }
    else
    {
      v8 = 0;
      v7 = 8;
    }
    *v3 = v7;
    *((_DWORD *)v3 + 2) = v8;
    swift_release();
  }
  swift_release_n();
  return EnvironmentValues.backgroundMaterial.modify;
}

void EnvironmentValues.backgroundMaterial.modify(unint64_t **a1, char a2)
{
  unint64_t *v2;
  uint64_t *v3;
  unint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;

  v2 = *a1;
  v3 = (uint64_t *)(*a1)[4];
  v4 = **a1;
  v5 = *((_DWORD *)*a1 + 2);
  v6 = *v3;
  if ((a2 & 1) != 0)
  {
    outlined copy of Material?(**a1);
    swift_retain_n();
    outlined copy of Material?(v4);
    specialized closure #1 in PropertyList.subscript.setter(v3, v4, v5);
    swift_release();
    outlined consume of Material?(v4);
    if (v3[1])
    {
      v7 = *(_QWORD *)v2[4];
      swift_retain();
      swift_retain();
      specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v6, v7);
      swift_release();
      swift_release();
    }
    swift_release();
    outlined consume of Material?(v4);
    v8 = *v2;
  }
  else
  {
    swift_retain_n();
    outlined copy of Material?(v4);
    specialized closure #1 in PropertyList.subscript.setter(v3, v4, v5);
    swift_release();
    outlined consume of Material?(v4);
    if (v3[1])
    {
      v9 = *(_QWORD *)v2[4];
      swift_retain();
      swift_retain();
      specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v6, v9);
      swift_release();
      swift_release();
    }
    swift_release();
    v8 = v4;
  }
  outlined consume of Material?(v8);
  free(v2);
}

void protocol witness for static EnvironmentKey.defaultValue.getter in conformance BackgroundMaterialKey(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 8;
  *(_DWORD *)(a1 + 8) = 0;
}

unint64_t MaterialView.material.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  unint64_t v2;
  int v3;

  v2 = *(_QWORD *)v1;
  v3 = *(_DWORD *)(v1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)v1;
  *(_DWORD *)(a1 + 8) = v3;
  return outlined copy of Material.ID(v2);
}

unint64_t MaterialView.material.setter(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  unint64_t result;

  v2 = *a1;
  v3 = *((_DWORD *)a1 + 2);
  result = outlined consume of Material.ID(*(_QWORD *)v1);
  *(_QWORD *)v1 = v2;
  *(_DWORD *)(v1 + 8) = v3;
  return result;
}

uint64_t (*MaterialView.material.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t MaterialView.shape.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8) + 16))(a2, v2 + *(int *)(a1 + 36));
}

uint64_t MaterialView.shape.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 40))(v2 + *(int *)(a2 + 36), a1);
}

uint64_t (*MaterialView.shape.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t MaterialView.ignoredSafeAreaEdges.getter(uint64_t a1)
{
  uint64_t v1;

  return *(unsigned __int8 *)(v1 + *(int *)(a1 + 40));
}

uint64_t MaterialView.ignoredSafeAreaEdges.setter(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  *(_BYTE *)(v2 + *(int *)(a2 + 40)) = result;
  return result;
}

uint64_t (*MaterialView.ignoredSafeAreaEdges.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

void MaterialView.Background.value.getter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  MEMORY[0x24BDAC7A8](a1);
  v4 = type metadata accessor for MaterialView(0, v1, v2, v3);
  MEMORY[0x24BDAC7A8](v4);
  MEMORY[0x24BDAC7A8](v5);
  type metadata accessor for _ShapeView();
}

void sub_234D5EC08(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t Value;
  void (*v22)(uint64_t, uint64_t, uint64_t);
  void (*v23)(uint64_t, uint64_t);
  uint64_t v24;
  unint64_t v25;
  int v26;

  v18 = *(_QWORD *)(a1 - 8);
  *(_QWORD *)(v17 - 136) = a1;
  *(_QWORD *)(v17 - 128) = v18;
  MEMORY[0x24BDAC7A8](a1);
  v20 = (char *)&a9 - v19;
  *(_DWORD *)(v17 - 156) = v10;
  Value = AGGraphGetValue();
  v22 = *(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16);
  v22(v15, Value, v12);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 16))(v13, v15 + *(int *)(v12 + 36), v11);
  v23 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
  v23(v15, v12);
  v24 = AGGraphGetValue();
  v22(v16, v24, v12);
  v25 = *(_QWORD *)v16;
  v26 = *(_DWORD *)(v16 + 8);
  outlined copy of Material.ID(*(_QWORD *)v16);
  v23(v16, v12);
  *(_QWORD *)(v17 - 112) = v25;
  *(_DWORD *)(v17 - 104) = v26;
  Shape.fill<A>(_:style:)(v17 - 112, v11, (uint64_t)&type metadata for Material, (uint64_t)&protocol witness table for Material, (uint64_t)v20);
}

uint64_t sub_234D5ECF4()
{
  unint64_t v0;
  void (*v1)(uint64_t, uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t Value;
  char v10;
  char v11;
  uint64_t v12;

  outlined consume of Material.ID(v0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 152) + 8))(v4, v2);
  Value = AGGraphGetValue();
  v1(v6, Value, v3);
  v10 = *(_BYTE *)(v6 + *(int *)(v3 + 40));
  v5(v6, v3);
  v11 = v10;
  v12 = *(_QWORD *)(v8 - 136);
  View.ignoresSafeArea(_:edges:)(1, v11, v12, (uint64_t)&protocol witness table for _ShapeView<A, B>);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 128) + 8))(v7, v12);
}

void protocol witness for static Rule.initialValue.getter in conformance MaterialView<A>.Background()
{
  type metadata accessor for _ShapeView();
}

uint64_t sub_234D5EDD8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;

  v5 = type metadata accessor for ModifiedContent(0, a1, (uint64_t)&type metadata for _SafeAreaRegionsIgnoringLayout, a4);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(v4, 1, 1, v5);
}

void protocol witness for Rule.value.getter in conformance MaterialView<A>.Background()
{
  unsigned int *v0;

  MaterialView.Background.value.getter(*v0);
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance MaterialView<A>.Background(uint64_t a1)
{
  MEMORY[0x23B7C9C04](&protocol conformance descriptor for MaterialView<A>.Background, a1);
  return static AsyncAttribute.flags.getter();
}

void static MaterialView._makeView(view:inputs:)()
{
  type metadata accessor for _ShapeView();
}

uint64_t sub_234D5EF18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int ShouldRecordTree;
  uint64_t result;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v30;
  _QWORD *v31;
  int v32;
  _QWORD v33[2];
  int v34;
  _QWORD v35[3];
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  int v41;
  int v42;
  int v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  int v53;

  v35[2] = type metadata accessor for ModifiedContent(0, a1, (uint64_t)&type metadata for _SafeAreaRegionsIgnoringLayout, a4);
  v36 = type metadata accessor for MaterialView.Background(0, v11, v6, v14);
  v37 = MEMORY[0x23B7C9C04](&protocol conformance descriptor for MaterialView<A>.Background, v36);
  v15 = type metadata accessor for Attribute();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v38, (uint64_t)partial apply for closure #1 in Attribute.init<A>(_:), (uint64_t)v35, v36, MEMORY[0x24BEE4078], v15, MEMORY[0x24BEE40A8], v16);
  _GraphValue.init(_:)(*(unsigned int *)(v13 - 192), &v34);
  v17 = v34;
  ShouldRecordTree = AGSubgraphShouldRecordTree();
  if (ShouldRecordTree)
    AGSubgraphBeginTreeElement();
  *v12 = v5;
  v12[2] = v7;
  *(_DWORD *)(v13 - 184) = v4;
  v12[5] = v8;
  v12[6] = v9;
  *(_DWORD *)(v13 - 160) = 0;
  *(_DWORD *)(v13 - 156) = v27;
  *(_DWORD *)(v13 - 136) = v26;
  *(_DWORD *)(v13 - 132) = v25;
  *(_DWORD *)(v13 - 128) = v24;
  *(_DWORD *)(v13 - 124) = v23;
  *(_DWORD *)(v13 - 120) = v22;
  *(_DWORD *)(v13 - 116) = v21;
  *(_DWORD *)(v13 - 112) = v20;
  *(_DWORD *)(v13 - 168) = v10;
  *(_DWORD *)(v13 - 164) = v28;
  v32 = v17;
  v38 = v5;
  v39 = v4;
  v40 = v7;
  v41 = v10;
  v42 = v28;
  v43 = 0;
  v44 = v27;
  v45 = v8;
  v46 = v9;
  v47 = v26;
  v48 = v25;
  v49 = v24;
  v50 = v23;
  v51 = v22;
  v52 = v21;
  v53 = v20;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  static ModifiedContent<>._makeView(view:inputs:)(&v32, &v38, a1, (uint64_t)&type metadata for _SafeAreaRegionsIgnoringLayout, (uint64_t)&protocol witness table for _ShapeView<A, B>, (uint64_t)&protocol witness table for _SafeAreaRegionsIgnoringLayout, (uint64_t)v33);
  *(_DWORD *)(v13 - 160) = v30;
  if (ShouldRecordTree)
  {
    specialized static _ViewDebug.reallyWrap<A>(_:value:inputs:)((uint64_t)v33, v13 - 192);
    AGSubgraphEndTreeElement();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  result = swift_release();
  *v31 = v33[0];
  v31[1] = v33[1];
  return result;
}

void protocol witness for static View._makeView(view:inputs:) in conformance MaterialView<A>()
{
  static MaterialView._makeView(view:inputs:)();
}

void static MaterialView._makeView(modifier:inputs:body:)()
{
  type metadata accessor for _ShapeView();
}

uint64_t sub_234D5F1C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int OffsetAttribute2;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  unint64_t v27;
  __int128 v28;
  unsigned int v29;
  uint64_t v30;
  int v31;
  int v32;
  int v33;
  uint64_t v34;
  void (*v35)(unint64_t *__return_ptr, uint64_t, unint64_t *);
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD v44[2];
  unint64_t v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  __int128 v53;
  uint64_t v54;
  int v55;

  v41 = type metadata accessor for ModifiedContent(0, a1, (uint64_t)&type metadata for _SafeAreaRegionsIgnoringLayout, a4);
  v30 = v41;
  v42 = type metadata accessor for MaterialView.Background(0, v6, v4, v11);
  v43 = MEMORY[0x23B7C9C04](&protocol conformance descriptor for MaterialView<A>.Background, v42);
  v12 = type metadata accessor for Attribute();
  v13 = *(_QWORD *)(v5 + 24);
  v28 = *(_OWORD *)(v5 + 56);
  v14 = *(_QWORD *)(v5 + 72);
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v10 - 144, (uint64_t)closure #1 in Attribute.init<A>(_:)partial apply, (uint64_t)&v40, v42, MEMORY[0x24BEE4078], v12, MEMORY[0x24BEE40A8], v15);
  v29 = v45;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  closure #1 in static MaterialView._makeView(modifier:inputs:body:)(1, v6, v4, v16);
  OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
  swift_beginAccess();
  v45 = __PAIR64__(*(_DWORD *)(v9 + 16), OffsetAttribute2);
  v38 = type metadata accessor for MaterialView.ChildEnvironment(0, v6, v4, v18);
  v39 = MEMORY[0x23B7C9C04](&protocol conformance descriptor for MaterialView<A>.ChildEnvironment, v38);
  type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for Attribute<EnvironmentValues>, (uint64_t)&type metadata for EnvironmentValues, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BE095F0]);
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v45, (uint64_t)closure #1 in Attribute.init<A>(_:)partial apply, (uint64_t)&v37, v38, MEMORY[0x24BEE4078], v19, MEMORY[0x24BEE40A8], v20);
  v21 = MEMORY[0x24BEE4AF8];
  v22 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for MutableBox<CachedEnvironment>, (uint64_t)&type metadata for CachedEnvironment, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for MutableBox);
  v23 = swift_allocObject();
  *(_DWORD *)(v23 + 16) = v36;
  *(_QWORD *)(v23 + 24) = v21;
  *(_OWORD *)(v23 + 32) = 0u;
  *(_OWORD *)(v23 + 48) = 0u;
  *(_OWORD *)(v23 + 64) = 0u;
  *(_WORD *)(v23 + 80) = 256;
  *(_QWORD *)(v23 + 88) = v22;
  swift_release();
  v45 = v27;
  v46 = v31;
  v47 = v23;
  v48 = v13;
  v49 = v8 | 0x20;
  v50 = v32;
  v51 = v7;
  v52 = v26;
  v53 = v28;
  v54 = v14;
  v55 = v33;
  v44[0] = &protocol witness table for _ShapeView<A, B>;
  v44[1] = &protocol witness table for _SafeAreaRegionsIgnoringLayout;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v24 = MEMORY[0x23B7C9C04]("I{:\x1B̧\t", v30, v44);
  makeSecondaryLayerView<A>(secondaryLayer:alignment:inputs:body:flipOrder:)(v29, 0x100000000, (uint64_t)&v45, v35, 1, v24, v34);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  return swift_release_n();
}

uint64_t closure #1 in static MaterialView._makeView(modifier:inputs:body:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[6];

  v8[2] = type metadata accessor for MaterialView(0, a2, a3, a4);
  v5 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(a1, (uint64_t)_s14AttributeGraph13PointerOffsetV2ofyACyxq_Gq_zFZAESPyq_GXEfU_TA_2, (uint64_t)v8, (uint64_t)&type metadata for Material, MEMORY[0x24BEE4078], v5, MEMORY[0x24BEE40A8], v6);
  return v8[5];
}

uint64_t MaterialView.ChildEnvironment.environment.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t *Value;
  uint64_t v3;
  uint64_t v4;

  Value = (uint64_t *)AGGraphGetValue();
  v4 = *Value;
  v3 = Value[1];
  *a1 = v4;
  a1[1] = v3;
  swift_retain();
  return swift_retain();
}

uint64_t MaterialView.ChildEnvironment.value.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t Value;
  unint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  __int128 v9;
  _QWORD v10[3];
  char v11;
  uint64_t v12;
  char v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  char v18;
  __int16 v19;

  MaterialView.ChildEnvironment.environment.getter(&v9);
  memset(v10, 0, sizeof(v10));
  v11 = 4;
  v12 = 0;
  v13 = 5;
  v14 = v9;
  v15 = 0u;
  v16 = 0u;
  v17 = 0;
  v18 = 1;
  v19 = 0;
  Value = AGGraphGetValue();
  v3 = *(_QWORD *)Value;
  v4 = *(_DWORD *)(Value + 8);
  outlined copy of Material.ID(*(_QWORD *)Value);
  *(_QWORD *)&v9 = v3;
  DWORD2(v9) = v4;
  Material._apply(to:)((uint64_t)v10);
  outlined consume of Material.ID(v3);
  v5 = *((_QWORD *)&v14 + 1);
  *a1 = v14;
  a1[1] = v5;
  v6 = v12;
  v7 = v13;
  swift_retain();
  swift_retain();
  outlined consume of _ShapeStyle_Shape.Result(v6, v7);
  swift_release();
  swift_release();
  return swift_release();
}

void Material._apply(to:)(uint64_t a1)
{
  __asm { BR              X11 }
}

uint64_t sub_234D5F708()
{
  uint64_t v0;
  uint64_t result;

  result = outlined consume of _ShapeStyle_Shape.Result(*(_QWORD *)(v0 + 32), *(_BYTE *)(v0 + 40));
  *(_QWORD *)(v0 + 32) = 0;
  *(_BYTE *)(v0 + 40) = 0;
  return result;
}

uint64_t protocol witness for Rule.value.getter in conformance MaterialView<A>.ChildEnvironment@<X0>(_QWORD *a1@<X8>)
{
  return MaterialView.ChildEnvironment.value.getter(a1);
}

void protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance MaterialView<A>()
{
  static MaterialView._makeView(modifier:inputs:body:)();
}

float MaterialLayer.opacity.getter()
{
  return 1.0;
}

{
  return 1.0;
}

uint64_t MaterialLayer.blendMode.getter@<X0>(uint64_t a1@<X8>)
{
  return MaterialLayer.blendMode.getter(a1);
}

{
  uint64_t v2;
  char v3;

  if (one-time initialization token for normal != -1)
    swift_once();
  v2 = static GraphicsBlendMode.normal;
  v3 = byte_254266040;
  *(_QWORD *)a1 = static GraphicsBlendMode.normal;
  *(_BYTE *)(a1 + 8) = v3;
  return outlined copy of GraphicsBlendMode(v2, v3);
}

unint64_t AnyMaterialLayer.content.getter@<X0>(unint64_t *a1@<X8>)
{
  unint64_t *v1;
  unint64_t v2;

  v2 = *v1;
  *a1 = *v1;
  return outlined copy of DisplayList.Content.Value(v2);
}

unint64_t AnyMaterialLayer.content.setter(unint64_t *a1)
{
  unint64_t *v1;
  unint64_t v2;
  unint64_t result;

  v2 = *a1;
  result = outlined consume of DisplayList.Content.Value(*v1);
  *v1 = v2;
  return result;
}

uint64_t (*AnyMaterialLayer.content.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

float AnyMaterialLayer.opacity.getter()
{
  uint64_t v0;

  return *(float *)(v0 + 8);
}

void AnyMaterialLayer.opacity.setter(float a1)
{
  uint64_t v1;

  *(float *)(v1 + 8) = a1;
}

uint64_t (*AnyMaterialLayer.opacity.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t AnyMaterialLayer.blendMode.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  char v3;

  v2 = *(_QWORD *)(v1 + 16);
  v3 = *(_BYTE *)(v1 + 24);
  *(_QWORD *)a1 = v2;
  *(_BYTE *)(a1 + 8) = v3;
  return outlined copy of GraphicsBlendMode(v2, v3);
}

uint64_t AnyMaterialLayer.blendMode.setter(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t result;

  v2 = *a1;
  v3 = *((_BYTE *)a1 + 8);
  result = outlined consume of GraphicsBlendMode(*(_QWORD *)(v1 + 16), *(_BYTE *)(v1 + 24));
  *(_QWORD *)(v1 + 16) = v2;
  *(_BYTE *)(v1 + 24) = v3;
  return result;
}

uint64_t (*AnyMaterialLayer.blendMode.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

unint64_t protocol witness for MaterialLayer.content.getter in conformance AnyMaterialLayer@<X0>(unint64_t *a1@<X8>)
{
  unint64_t *v1;
  unint64_t v2;

  v2 = *v1;
  *a1 = *v1;
  return outlined copy of DisplayList.Content.Value(v2);
}

float protocol witness for MaterialLayer.opacity.getter in conformance AnyMaterialLayer()
{
  uint64_t v0;

  return *(float *)(v0 + 8);
}

uint64_t protocol witness for MaterialLayer.blendMode.getter in conformance AnyMaterialLayer@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  char v3;

  v2 = *(_QWORD *)(v1 + 16);
  v3 = *(_BYTE *)(v1 + 24);
  *(_QWORD *)a1 = v2;
  *(_BYTE *)(a1 + 8) = v3;
  return outlined copy of GraphicsBlendMode(v2, v3);
}

double static Material._makeView<A>(view:inputs:)@<D0>(int *a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  int v8;
  __int128 v9;
  double result;
  uint64_t v11;
  int v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  int v18;
  int v19;

  v5 = *(_QWORD *)a2;
  v6 = *(_DWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a2 + 16);
  v8 = *(_DWORD *)(a2 + 80);
  v19 = *a1;
  v11 = v5;
  v12 = v6;
  v13 = v7;
  v9 = *(_OWORD *)(a2 + 40);
  v14 = *(_OWORD *)(a2 + 24);
  v15 = v9;
  v16 = *(_OWORD *)(a2 + 56);
  v17 = *(_QWORD *)(a2 + 72);
  v18 = v8;
  *(_QWORD *)&result = static ShapeStyle.legacyMakeShapeView<A>(view:inputs:)(&v19, &v11, &type metadata for Material, a3, (uint64_t)&protocol witness table for Material, a4, a5).n128_u64[0];
  return result;
}

_BYTE *static Material._apply(to:)(_BYTE *result)
{
  *result = 1;
  return result;
}

unint64_t ForegroundMaterialStyle.material.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  unint64_t v2;
  int v3;

  v2 = *(_QWORD *)v1;
  v3 = *(_DWORD *)(v1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)v1;
  *(_DWORD *)(a1 + 8) = v3;
  return outlined copy of Material.ID(v2);
}

unint64_t ForegroundMaterialStyle.material.setter(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  unint64_t result;

  v2 = *a1;
  v3 = *((_DWORD *)a1 + 2);
  result = outlined consume of Material.ID(*(_QWORD *)v1);
  *(_QWORD *)v1 = v2;
  *(_DWORD *)(v1 + 8) = v3;
  return result;
}

uint64_t (*ForegroundMaterialStyle.material.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t ForegroundMaterialStyle.init(material:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  int v2;

  v2 = *(_DWORD *)(result + 8);
  *(_QWORD *)a2 = *(_QWORD *)result;
  *(_DWORD *)(a2 + 8) = v2;
  return result;
}

void ForegroundMaterialStyle._apply(to:)(uint64_t a1)
{
  __asm { BR              X13 }
}

uint64_t sub_234D5FC00()
{
  uint64_t v0;
  uint64_t result;

  result = outlined consume of _ShapeStyle_Shape.Result(*(_QWORD *)(v0 + 32), *(_BYTE *)(v0 + 40));
  *(_QWORD *)(v0 + 32) = 0;
  *(_BYTE *)(v0 + 40) = 0;
  return result;
}

double _ShapeStyle_Shape.resolveStyle(id:material:)@<D0>(unsigned __int8 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v5;
  unint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  double result;
  uint64_t v14[2];
  unsigned int v15;

  v5 = *a1;
  v6 = *(_QWORD *)a2;
  v7 = *(_DWORD *)(a2 + 8);
  v8 = *(_QWORD *)(v3 + 48);
  v9 = *(_QWORD *)(v3 + 56);
  v10 = *(unsigned __int8 *)(v3 + 105);
  v14[0] = v8;
  v14[1] = v9;
  swift_retain_n();
  swift_retain_n();
  Material.ResolvedMaterial.Flags.init(environment:)(v14, (int *)&v15);
  v11 = v15 | v7;
  outlined copy of Material.ID(v6);
  swift_release();
  swift_release();
  if ((v11 & 1) != 0)
    v12 = 1065353216;
  else
    v12 = 0;
  *(_QWORD *)a3 = v12 & 0xC07FFFFFFFFFFFFFLL | (((v12 >> 23) & 0x7F) << 55);
  *(_QWORD *)(a3 + 8) = v12 | 0x3F80000000000000;
  *(_QWORD *)(a3 + 16) = v6;
  *(_QWORD *)(a3 + 24) = (v5 << 32) | (v10 << 40) | v11;
  result = 0.0;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)(a3 + 64) = 0u;
  *(_BYTE *)(a3 + 80) = 2;
  *(_DWORD *)(a3 + 84) = 1065353216;
  *(_QWORD *)(a3 + 88) = 0;
  *(_BYTE *)(a3 + 96) = -1;
  *(_QWORD *)(a3 + 104) = MEMORY[0x24BEE4AF8];
  return result;
}

void static MaterialActiveAppearance.automatic.getter(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

void static MaterialActiveAppearance.active.getter(_BYTE *a1@<X8>)
{
  *a1 = 1;
}

void static MaterialActiveAppearance.inactive.getter()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void static MaterialActiveAppearance.matchWindow.getter(_BYTE *a1@<X8>)
{
  *a1 = 3;
}

BOOL static MaterialActiveAppearance.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t EnvironmentValues.materialActiveAppearance.getter@<X0>(char *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;

  v3 = *v1;
  if (v1[1])
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v3, a1);
    swift_release_n();
  }
  else
  {
    v4 = swift_retain_n();
    specialized closure #1 in PropertyList.subscript.getter(v4, a1);
  }
  return swift_release_n();
}

uint64_t key path getter for EnvironmentValues.materialActiveAppearance : EnvironmentValues@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  char v6;

  v3 = *a1;
  if (a1[1])
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v3, &v6);
    swift_release_n();
  }
  else
  {
    v4 = swift_retain_n();
    specialized closure #1 in PropertyList.subscript.getter(v4, &v6);
  }
  result = swift_release_n();
  *a2 = v6;
  return result;
}

uint64_t key path setter for EnvironmentValues.materialActiveAppearance : EnvironmentValues(unsigned __int8 *a1)
{
  unsigned __int8 v2;

  v2 = *a1;
  return EnvironmentValues.materialActiveAppearance.setter(&v2);
}

uint64_t EnvironmentValues.materialActiveAppearance.setter(unsigned __int8 *a1)
{
  uint64_t *v1;
  uint64_t v2;
  unsigned __int8 v3;
  uint64_t v4;

  v2 = *v1;
  v3 = *a1;
  swift_retain_n();
  specialized closure #1 in PropertyList.subscript.setter(v1, v3);
  swift_release();
  if (v1[1])
  {
    v4 = *v1;
    swift_retain();
    swift_retain();
    specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v2, v4);
    swift_release();
    swift_release();
  }
  return swift_release();
}

uint64_t (*EnvironmentValues.materialActiveAppearance.modify(uint64_t a1))(uint64_t a1)
{
  uint64_t *v1;
  char *v2;
  uint64_t v3;
  Swift::Int v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v9;

  v2 = (char *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = v1;
  v3 = *v1;
  if (v1[1])
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v3, v2);
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<ColorSchemeKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<MaterialActiveAppearance.Key>, (uint64_t)&type metadata for MaterialActiveAppearance.Key, (uint64_t)&protocol witness table for MaterialActiveAppearance.Key);
    BloomFilter.init(hashValue:)(v4);
    v5 = swift_retain_n();
    v6 = specialized find1<A>(_:key:filter:)(v5, v9);
    if (v6)
      v7 = *(_BYTE *)(v6 + 72);
    else
      v7 = 0;
    *v2 = v7;
  }
  swift_release_n();
  return EnvironmentValues.materialActiveAppearance.modify;
}

uint64_t EnvironmentValues.materialActiveAppearance.modify(uint64_t a1)
{
  unsigned __int8 v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_BYTE *)(a1 + 24);
  v3 = *(uint64_t **)(a1 + 16);
  v4 = *v3;
  swift_retain_n();
  specialized closure #1 in PropertyList.subscript.setter(v3, v2);
  swift_release();
  if (v3[1])
  {
    v5 = **(_QWORD **)(a1 + 16);
    swift_retain();
    swift_retain();
    specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v4, v5);
    swift_release();
    swift_release();
  }
  return swift_release();
}

unint64_t Material.materialActiveAppearance(_:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  unint64_t v2;
  int v3;

  v2 = *(_QWORD *)v1;
  v3 = *(_DWORD *)(v1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)v1;
  *(_DWORD *)(a1 + 8) = v3;
  return outlined copy of Material.ID(v2);
}

uint64_t MaterialActiveAppearanceShapeStyle._apply(to:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v6;
  uint64_t v7;
  unsigned __int8 v8;
  uint64_t v9;

  v3 = v2;
  v6 = (uint64_t *)(a1 + 48);
  v7 = *(_QWORD *)(a1 + 48);
  v8 = *(_BYTE *)(v3 + *(int *)(a2 + 36));
  swift_retain_n();
  specialized closure #1 in PropertyList.subscript.setter(v6, v8);
  swift_release();
  if (v6[1])
  {
    v9 = *v6;
    swift_retain();
    swift_retain();
    specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v7, v9);
    swift_release();
    swift_release();
  }
  swift_release();
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(a2 + 24) + 32))(a1, *(_QWORD *)(a2 + 16));
}

uint64_t static MaterialActiveAppearanceShapeStyle._apply(to:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 40))();
}

uint64_t protocol witness for static ShapeStyle._apply(to:) in conformance MaterialActiveAppearanceShapeStyle<A>(uint64_t a1, uint64_t a2)
{
  return static MaterialActiveAppearanceShapeStyle._apply(to:)(a1, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24));
}

uint64_t ShapeStyle.materialActiveAppearance(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v8;
  double v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;

  v8 = *(_QWORD *)(a2 - 8);
  v9 = MEMORY[0x24BDAC7A8](a1);
  v11 = (char *)&v16 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = *v12;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v8 + 16))(v11, v4, a2, v9);
  (*(void (**)(uint64_t, char *, uint64_t))(v8 + 32))(a4, v11, a2);
  result = type metadata accessor for MaterialActiveAppearanceShapeStyle(0, a2, a3, v14);
  *(_BYTE *)(a4 + *(int *)(result + 36)) = v13;
  return result;
}

uint64_t View.materialActiveAppearance(_:)(char *a1, uint64_t a2, uint64_t a3)
{
  char v5;
  uint64_t *KeyPath;
  char v8;

  v5 = *a1;
  KeyPath = (uint64_t *)swift_getKeyPath();
  v8 = v5;
  View.environment<A>(_:_:)(KeyPath, (uint64_t)&v8, a2, a3);
  return swift_release();
}

BOOL specialized static Material.ID.== infix(_:_:)(_QWORD **a1, _QWORD **a2)
{
  _QWORD *v2;
  _QWORD *v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  BOOL v11;
  BOOL v12;
  id v13;
  id v14;
  id v15;
  char v16;

  v2 = *a1;
  v3 = *a2;
  switch((unint64_t)*a1)
  {
    case 0uLL:
      if (v3)
        goto LABEL_34;
      outlined consume of Material.ID(0);
      v4 = 0;
      goto LABEL_33;
    case 1uLL:
      if (v3 != (_QWORD *)1)
        goto LABEL_34;
      outlined consume of Material.ID(1uLL);
      outlined consume of Material.ID(1uLL);
      return (BOOL)v3;
    case 2uLL:
      if (v3 != (_QWORD *)2)
        goto LABEL_34;
      outlined consume of Material.ID(2uLL);
      v4 = 2;
      goto LABEL_33;
    case 3uLL:
      if (v3 != (_QWORD *)3)
        goto LABEL_34;
      outlined consume of Material.ID(3uLL);
      v4 = 3;
      goto LABEL_33;
    case 4uLL:
      if (v3 != (_QWORD *)4)
        goto LABEL_34;
      outlined consume of Material.ID(4uLL);
      v4 = 4;
      goto LABEL_33;
    case 5uLL:
      if (v3 != (_QWORD *)5)
        goto LABEL_34;
      outlined consume of Material.ID(5uLL);
      v4 = 5;
      goto LABEL_33;
    case 6uLL:
      if (v3 != (_QWORD *)6)
        goto LABEL_34;
      outlined consume of Material.ID(6uLL);
      v4 = 6;
      goto LABEL_33;
    case 7uLL:
      if (v3 != (_QWORD *)7)
        goto LABEL_34;
      outlined consume of Material.ID(7uLL);
      v4 = 7;
LABEL_33:
      outlined consume of Material.ID(v4);
      return 1;
    default:
      if ((unint64_t)v3 < 8)
        goto LABEL_34;
      v5 = v2[4];
      v6 = v2[5];
      v7 = (void *)v2[6];
      v8 = v3[4];
      v9 = v3[5];
      v10 = (void *)v3[6];
      v11 = v2[2] == v3[2] && v2[3] == v3[3];
      if (!v11 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
        goto LABEL_34;
      v12 = v5 == v8 && v6 == v9;
      if (!v12 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
        goto LABEL_34;
      if (v7)
      {
        if (v10)
        {
          type metadata accessor for NSBundle();
          v13 = v7;
          v14 = v10;
          v15 = v13;
          outlined copy of Material.ID((unint64_t)v3);
          outlined copy of Material.ID((unint64_t)v2);
          v16 = static NSObject.== infix(_:_:)();

          outlined consume of Material.ID((unint64_t)v2);
          outlined consume of Material.ID((unint64_t)v3);
          if ((v16 & 1) != 0)
            return 1;
        }
        else
        {
LABEL_34:
          outlined copy of Material.ID((unint64_t)v3);
          outlined copy of Material.ID((unint64_t)v2);
          outlined consume of Material.ID((unint64_t)v2);
          outlined consume of Material.ID((unint64_t)v3);
        }
        return 0;
      }
      outlined copy of Material.ID((unint64_t)v3);
      outlined copy of Material.ID((unint64_t)v2);
      outlined consume of Material.ID((unint64_t)v2);
      outlined consume of Material.ID((unint64_t)v3);
      return !v10;
  }
}

unint64_t outlined consume of Material?(unint64_t result)
{
  if (result != 8)
    return outlined consume of Material.ID(result);
  return result;
}

uint64_t sub_234D607B8()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

uint64_t type metadata accessor for MaterialView(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for MaterialView);
}

uint64_t type metadata accessor for MaterialView.Background(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for MaterialView.Background);
}

uint64_t type metadata accessor for MaterialView.ChildEnvironment(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for MaterialView.ChildEnvironment);
}

unint64_t lazy protocol witness table accessor for type Color.BackgroundColorProvider and conformance Color.BackgroundColorProvider()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Color.BackgroundColorProvider and conformance Color.BackgroundColorProvider;
  if (!lazy protocol witness table cache variable for type Color.BackgroundColorProvider and conformance Color.BackgroundColorProvider)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Color.BackgroundColorProvider, &type metadata for Color.BackgroundColorProvider);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Color.BackgroundColorProvider and conformance Color.BackgroundColorProvider);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Color.BackgroundColorProvider and conformance Color.BackgroundColorProvider;
  if (!lazy protocol witness table cache variable for type Color.BackgroundColorProvider and conformance Color.BackgroundColorProvider)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Color.BackgroundColorProvider, &type metadata for Color.BackgroundColorProvider);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Color.BackgroundColorProvider and conformance Color.BackgroundColorProvider);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Color.BackgroundColorProvider and conformance Color.BackgroundColorProvider;
  if (!lazy protocol witness table cache variable for type Color.BackgroundColorProvider and conformance Color.BackgroundColorProvider)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Color.BackgroundColorProvider, &type metadata for Color.BackgroundColorProvider);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Color.BackgroundColorProvider and conformance Color.BackgroundColorProvider);
  }
  return result;
}

uint64_t sub_234D6087C(unsigned __int8 *a1)
{
  unsigned __int8 v2;

  v2 = *a1;
  return EnvironmentValues.materialActiveAppearance.setter(&v2);
}

unint64_t lazy protocol witness table accessor for type Material.ID and conformance Material.ID()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Material.ID and conformance Material.ID;
  if (!lazy protocol witness table cache variable for type Material.ID and conformance Material.ID)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Material.ID, &type metadata for Material.ID);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Material.ID and conformance Material.ID);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Material.ResolvedMaterial.Flags and conformance Material.ResolvedMaterial.Flags()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Material.ResolvedMaterial.Flags and conformance Material.ResolvedMaterial.Flags;
  if (!lazy protocol witness table cache variable for type Material.ResolvedMaterial.Flags and conformance Material.ResolvedMaterial.Flags)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Material.ResolvedMaterial.Flags, &type metadata for Material.ResolvedMaterial.Flags);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Material.ResolvedMaterial.Flags and conformance Material.ResolvedMaterial.Flags);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Material.ResolvedMaterial.Flags and conformance Material.ResolvedMaterial.Flags;
  if (!lazy protocol witness table cache variable for type Material.ResolvedMaterial.Flags and conformance Material.ResolvedMaterial.Flags)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Material.ResolvedMaterial.Flags, &type metadata for Material.ResolvedMaterial.Flags);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Material.ResolvedMaterial.Flags and conformance Material.ResolvedMaterial.Flags);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Material.ResolvedMaterial.Flags and conformance Material.ResolvedMaterial.Flags;
  if (!lazy protocol witness table cache variable for type Material.ResolvedMaterial.Flags and conformance Material.ResolvedMaterial.Flags)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Material.ResolvedMaterial.Flags, &type metadata for Material.ResolvedMaterial.Flags);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Material.ResolvedMaterial.Flags and conformance Material.ResolvedMaterial.Flags);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Material.ResolvedMaterial.Flags and conformance Material.ResolvedMaterial.Flags;
  if (!lazy protocol witness table cache variable for type Material.ResolvedMaterial.Flags and conformance Material.ResolvedMaterial.Flags)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Material.ResolvedMaterial.Flags, &type metadata for Material.ResolvedMaterial.Flags);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Material.ResolvedMaterial.Flags and conformance Material.ResolvedMaterial.Flags);
  }
  return result;
}

ValueMetadata *type metadata accessor for Material()
{
  return &type metadata for Material;
}

uint64_t getEnumTagSinglePayload for Material.ID(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFF8 && *((_BYTE *)a1 + 8))
    return (*(_DWORD *)a1 + 2147483640);
  v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 + 1;
  v5 = v3 - 7;
  if (v4 >= 9)
    return v5;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for Material.ID(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFF7)
  {
    *(_QWORD *)result = 0;
    *(_DWORD *)result = a2 - 2147483640;
    if (a3 >= 0x7FFFFFF8)
      *(_BYTE *)(result + 8) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFF8)
      *(_BYTE *)(result + 8) = 0;
    if (a2)
      *(_QWORD *)result = a2 + 7;
  }
  return result;
}

ValueMetadata *type metadata accessor for Material.ID()
{
  return &type metadata for Material.ID;
}

ValueMetadata *type metadata accessor for Material.ResolvedMaterial()
{
  return &type metadata for Material.ResolvedMaterial;
}

ValueMetadata *type metadata accessor for Material.ResolvedMaterial.Flags()
{
  return &type metadata for Material.ResolvedMaterial.Flags;
}

uint64_t type metadata completion function for MaterialView()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for MaterialView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_DWORD *)(v6 + 80);
  v8 = *(_QWORD *)(v6 + 64);
  if (v7 > 7
    || (*(_DWORD *)(v6 + 80) & 0x100000) != 0
    || v8 + ((v7 + 12) & (unint64_t)~v7) + 1 > 0x18)
  {
    v11 = *(_QWORD *)a2;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    a1 = v11 + ((v7 & 0xF8 ^ 0x1F8) & (v7 + 16));
    swift_retain();
  }
  else
  {
    v12 = ~v7;
    v13 = *(_QWORD *)a2;
    if (*(_QWORD *)a2 >= 8uLL)
      v13 = swift_retain();
    *(_QWORD *)a1 = v13;
    *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
    v14 = a2 + v7;
    v15 = (a1 + v7 + 12) & v12;
    v16 = (v14 + 12) & v12;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v15, v16, v5);
    *(_BYTE *)(v15 + v8) = *(_BYTE *)(v16 + v8);
  }
  return a1;
}

uint64_t destroy for MaterialView(_QWORD *a1, uint64_t a2)
{
  if (*a1 >= 8uLL)
    swift_release();
  return (*(uint64_t (**)(unint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 8))(((unint64_t)a1 + *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80) + 12) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80));
}

uint64_t initializeWithCopy for MaterialView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = *(_QWORD *)a2;
  if (*(_QWORD *)a2 >= 8uLL)
    v6 = swift_retain();
  *(_QWORD *)a1 = v6;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  v7 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = (v8 + 12 + a1) & ~v8;
  v10 = (v8 + 12 + a2) & ~v8;
  (*(void (**)(uint64_t, uint64_t))(v7 + 16))(v9, v10);
  *(_BYTE *)(v9 + *(_QWORD *)(v7 + 64)) = *(_BYTE *)(v10 + *(_QWORD *)(v7 + 64));
  return a1;
}

uint64_t assignWithCopy for MaterialView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)a2;
  if (v6 >= 8)
  {
    if (v7 >= 8)
    {
      *(_QWORD *)a1 = v7;
      swift_retain();
      swift_release();
    }
    else
    {
      swift_release();
      *(_QWORD *)a1 = *(_QWORD *)a2;
    }
  }
  else
  {
    *(_QWORD *)a1 = v7;
    if (v7 >= 8)
      swift_retain();
  }
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  v8 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = (v9 + 12 + a1) & ~v9;
  v11 = (v9 + 12 + a2) & ~v9;
  (*(void (**)(uint64_t, uint64_t))(v8 + 24))(v10, v11);
  *(_BYTE *)(v10 + *(_QWORD *)(v8 + 64)) = *(_BYTE *)(v11 + *(_QWORD *)(v8 + 64));
  return a1;
}

uint64_t initializeWithTake for MaterialView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(unsigned __int8 *)(v4 + 80);
  v6 = (v5 + 12 + a1) & ~v5;
  v7 = (v5 + 12 + a2) & ~v5;
  (*(void (**)(uint64_t, uint64_t))(v4 + 32))(v6, v7);
  *(_BYTE *)(v6 + *(_QWORD *)(v4 + 64)) = *(_BYTE *)(v7 + *(_QWORD *)(v4 + 64));
  return a1;
}

uint64_t assignWithTake for MaterialView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = *(_QWORD *)a2;
  if (*(_QWORD *)a1 >= 8uLL)
  {
    if (v6 >= 8)
    {
      *(_QWORD *)a1 = v6;
      swift_release();
      goto LABEL_6;
    }
    swift_release();
  }
  *(_QWORD *)a1 = v6;
LABEL_6:
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  v7 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = (v8 + 12 + a1) & ~v8;
  v10 = (v8 + 12 + a2) & ~v8;
  (*(void (**)(uint64_t, uint64_t))(v7 + 40))(v9, v10);
  *(_BYTE *)(v9 + *(_QWORD *)(v7 + 64)) = *(_BYTE *)(v10 + *(_QWORD *)(v7 + 64));
  return a1;
}

uint64_t getEnumTagSinglePayload for MaterialView(_QWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  char v10;
  int v11;
  unsigned int v13;
  int v14;
  uint64_t v15;
  int v16;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFF7)
    v6 = 2147483639;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(unsigned __int8 *)(v4 + 80);
  v8 = a2 - v6;
  if (a2 <= v6)
    goto LABEL_22;
  v9 = *(_QWORD *)(v4 + 64) + ((v7 + 12) & ~v7) + 1;
  v10 = 8 * v9;
  if (v9 <= 3)
  {
    v13 = ((v8 + ~(-1 << v10)) >> v10) + 1;
    if (HIWORD(v13))
    {
      v11 = *(_DWORD *)((char *)a1 + v9);
      if (!v11)
        goto LABEL_22;
      goto LABEL_15;
    }
    if (v13 > 0xFF)
    {
      v11 = *(unsigned __int16 *)((char *)a1 + v9);
      if (!*(_WORD *)((char *)a1 + v9))
        goto LABEL_22;
      goto LABEL_15;
    }
    if (v13 < 2)
    {
LABEL_22:
      if (v5 > 0x7FFFFFF7)
        return (*(uint64_t (**)(unint64_t))(v4 + 48))(((unint64_t)a1 + v7 + 12) & ~v7);
      v15 = *a1;
      if (*a1 >= 0xFFFFFFFFuLL)
        LODWORD(v15) = -1;
      v16 = v15 - 8;
      if (v16 < 0)
        v16 = -1;
      return (v16 + 1);
    }
  }
  v11 = *((unsigned __int8 *)a1 + v9);
  if (!*((_BYTE *)a1 + v9))
    goto LABEL_22;
LABEL_15:
  v14 = (v11 - 1) << v10;
  if (v9 > 3)
    v14 = 0;
  if (!(_DWORD)v9)
    return v6 + v14 + 1;
  if (v9 > 3)
    LODWORD(v9) = 4;
  return ((uint64_t (*)(void))((char *)&loc_234D61074 + 4 * byte_23529DF56[(v9 - 1)]))();
}

void storeEnumTagSinglePayload for MaterialView(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  size_t v7;
  unsigned int v8;
  int v9;
  unsigned int v10;
  int v11;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFF7u)
    v6 = 2147483639;
  else
    v6 = *(_DWORD *)(v5 + 84);
  v7 = *(_QWORD *)(v5 + 64)
     + ((*(unsigned __int8 *)(v5 + 80) + 12) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))
     + 1;
  if (a3 > v6)
  {
    if (v7 <= 3)
    {
      v10 = ((a3 - v6 + ~(-1 << (8 * v7))) >> (8 * v7)) + 1;
      if (HIWORD(v10))
      {
        v8 = 4u;
      }
      else if (v10 >= 0x100)
      {
        v8 = 2;
      }
      else
      {
        v8 = v10 > 1;
      }
    }
    else
    {
      v8 = 1u;
    }
  }
  else
  {
    v8 = 0;
  }
  if (v6 < a2)
  {
    v9 = ~v6 + a2;
    if (v7 < 4)
    {
      if (*(_DWORD *)(v5 + 64) + ((*(unsigned __int8 *)(v5 + 80) + 12) & ~*(unsigned __int8 *)(v5 + 80)) != -1)
      {
        v11 = v9 & ~(-1 << (8 * v7));
        bzero(a1, v7);
        if ((_DWORD)v7 == 3)
        {
          *a1 = v11;
          *((_BYTE *)a1 + 2) = BYTE2(v11);
        }
        else if ((_DWORD)v7 == 2)
        {
          *a1 = v11;
        }
        else
        {
          *(_BYTE *)a1 = v11;
        }
      }
    }
    else
    {
      bzero(a1, v7);
      *(_DWORD *)a1 = v9;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X13 }
}

uint64_t dispatch thunk of MaterialLayer.content.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of MaterialLayer.opacity.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of MaterialLayer.blendMode.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t destroy for AnyMaterialLayer(uint64_t a1)
{
  outlined consume of DisplayList.Content.Value(*(_QWORD *)a1);
  return outlined consume of GraphicsBlendMode(*(_QWORD *)(a1 + 16), *(_BYTE *)(a1 + 24));
}

uint64_t initializeWithCopy for AnyMaterialLayer(uint64_t a1, unint64_t *a2)
{
  unint64_t *v2;
  unint64_t v4;
  uint64_t v5;

  v2 = a2;
  v4 = *a2;
  outlined copy of DisplayList.Content.Value(*a2);
  *(_QWORD *)a1 = v4;
  *(_DWORD *)(a1 + 8) = *((_DWORD *)v2 + 2);
  v5 = v2[2];
  LOBYTE(v2) = *((_BYTE *)v2 + 24);
  outlined copy of GraphicsBlendMode(v5, (char)v2);
  *(_QWORD *)(a1 + 16) = v5;
  *(_BYTE *)(a1 + 24) = (_BYTE)v2;
  return a1;
}

uint64_t assignWithCopy for AnyMaterialLayer(uint64_t a1, unint64_t *a2)
{
  unint64_t *v2;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  v2 = a2;
  v4 = *a2;
  outlined copy of DisplayList.Content.Value(*a2);
  v5 = *(_QWORD *)a1;
  *(_QWORD *)a1 = v4;
  outlined consume of DisplayList.Content.Value(v5);
  *(_DWORD *)(a1 + 8) = *((_DWORD *)v2 + 2);
  v6 = v2[2];
  LOBYTE(v2) = *((_BYTE *)v2 + 24);
  outlined copy of GraphicsBlendMode(v6, (char)v2);
  v7 = *(_QWORD *)(a1 + 16);
  v8 = *(_BYTE *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = v6;
  *(_BYTE *)(a1 + 24) = (_BYTE)v2;
  outlined consume of GraphicsBlendMode(v7, v8);
  return a1;
}

uint64_t assignWithTake for AnyMaterialLayer(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  char v5;
  uint64_t v6;
  char v7;

  v4 = *(_QWORD *)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  outlined consume of DisplayList.Content.Value(v4);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 24);
  v6 = *(_QWORD *)(a1 + 16);
  v7 = *(_BYTE *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = v5;
  outlined consume of GraphicsBlendMode(v6, v7);
  return a1;
}

ValueMetadata *type metadata accessor for AnyMaterialLayer()
{
  return &type metadata for AnyMaterialLayer;
}

uint64_t dispatch thunk of MaterialLayerVisitor.visit<A>(layer:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 8))();
}

unint64_t destroy for ForegroundMaterialStyle(unint64_t *a1)
{
  unint64_t result;

  result = *a1;
  if (result >= 8)
    return swift_release();
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for Material(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = *(_QWORD *)a2;
  if (*(_QWORD *)a2 >= 8uLL)
    v4 = swift_retain();
  *(_QWORD *)a1 = v4;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  return a1;
}

uint64_t assignWithCopy for Material(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;

  v4 = *(_QWORD *)a1;
  v5 = *(_QWORD *)a2;
  if (v4 >= 8)
  {
    if (v5 >= 8)
    {
      *(_QWORD *)a1 = v5;
      swift_retain();
      swift_release();
    }
    else
    {
      swift_release();
      *(_QWORD *)a1 = *(_QWORD *)a2;
    }
  }
  else
  {
    *(_QWORD *)a1 = v5;
    if (v5 >= 8)
      swift_retain();
  }
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  return a1;
}

uint64_t assignWithTake for Material(uint64_t a1, uint64_t a2)
{
  unint64_t v4;

  v4 = *(_QWORD *)a2;
  if (*(_QWORD *)a1 >= 8uLL)
  {
    if (v4 >= 8)
    {
      *(_QWORD *)a1 = v4;
      swift_release();
      goto LABEL_6;
    }
    swift_release();
  }
  *(_QWORD *)a1 = v4;
LABEL_6:
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  return a1;
}

uint64_t getEnumTagSinglePayload for Material(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 > 0x7FFFFFF7 && *((_BYTE *)a1 + 12))
    return (*(_DWORD *)a1 + 2147483640);
  v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 8;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for Material(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFF7)
  {
    *(_DWORD *)(result + 8) = 0;
    *(_QWORD *)result = a2 - 2147483640;
    if (a3 > 0x7FFFFFF7)
      *(_BYTE *)(result + 12) = 1;
  }
  else
  {
    if (a3 > 0x7FFFFFF7)
      *(_BYTE *)(result + 12) = 0;
    if (a2)
      *(_QWORD *)result = a2 + 7;
  }
  return result;
}

ValueMetadata *type metadata accessor for ForegroundMaterialStyle()
{
  return &type metadata for ForegroundMaterialStyle;
}

ValueMetadata *type metadata accessor for MaterialActiveAppearance()
{
  return &type metadata for MaterialActiveAppearance;
}

uint64_t sub_234D616B8(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[2];

  v1 = *a1;
  v2 = a1[1];
  type metadata accessor for FontBox<Font.SystemProvider>(255, &lazy cache variable for type metadata for MaterialView<Rectangle>, (uint64_t (*)(void))lazy protocol witness table accessor for type Rectangle and conformance Rectangle, (uint64_t)&type metadata for Rectangle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for MaterialView);
  v5 = type metadata accessor for ModifiedContent(255, v1, v3, v4);
  v7[0] = v2;
  v7[1] = &protocol witness table for MaterialView<A>;
  return MEMORY[0x23B7C9C04]("I{:\x1B̧\t", v5, v7);
}

uint64_t sub_234D61734(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[2];

  v4 = *a1;
  v5 = a1[2];
  v6 = type metadata accessor for MaterialView(255, a1[1], a1[3], a4);
  v8 = type metadata accessor for ModifiedContent(255, v4, v6, v7);
  v10[0] = v5;
  v10[1] = &protocol witness table for MaterialView<A>;
  return MEMORY[0x23B7C9C04]("I{:\x1B̧\t", v8, v10);
}

_UNKNOWN **sub_234D61794()
{
  return &protocol witness table for MaterialActiveAppearanceShapeStyle<A>;
}

uint64_t sub_234D617A0(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[2];

  v1 = *a1;
  v2 = a1[1];
  type metadata accessor for MutableBox<CachedEnvironment>(255, &lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<MaterialActiveAppearance>, (uint64_t)&type metadata for MaterialActiveAppearance, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for _EnvironmentKeyWritingModifier);
  v5 = type metadata accessor for ModifiedContent(255, v1, v3, v4);
  v7[0] = v2;
  v7[1] = &protocol witness table for _EnvironmentKeyWritingModifier<A>;
  return MEMORY[0x23B7C9C04]("I{:\x1B̧\t", v5, v7);
}

uint64_t type metadata completion function for MaterialActiveAppearanceShapeStyle()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for MaterialActiveAppearanceShapeStyle(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  char v10;
  int v11;
  unsigned int v13;
  int v14;
  unsigned int v15;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0xFC)
    v6 = 252;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(_QWORD *)(v4 + 64);
  v8 = a2 - v6;
  if (a2 <= v6)
    goto LABEL_22;
  v9 = v7 + 1;
  v10 = 8 * (v7 + 1);
  if ((v7 + 1) <= 3)
  {
    v13 = ((v8 + ~(-1 << v10)) >> v10) + 1;
    if (HIWORD(v13))
    {
      v11 = *(_DWORD *)(a1 + v9);
      if (!v11)
        goto LABEL_22;
      goto LABEL_15;
    }
    if (v13 > 0xFF)
    {
      v11 = *(unsigned __int16 *)(a1 + v9);
      if (!*(_WORD *)(a1 + v9))
        goto LABEL_22;
      goto LABEL_15;
    }
    if (v13 < 2)
    {
LABEL_22:
      if (v5 >= 0xFC)
        return (*(uint64_t (**)(void))(v4 + 48))();
      v15 = *(unsigned __int8 *)(v7 + a1);
      if (v15 >= 4)
        return v15 - 3;
      else
        return 0;
    }
  }
  v11 = *(unsigned __int8 *)(a1 + v9);
  if (!*(_BYTE *)(a1 + v9))
    goto LABEL_22;
LABEL_15:
  v14 = (v11 - 1) << v10;
  if (v9 > 3)
    v14 = 0;
  if ((_DWORD)v7 == -1)
    return v6 + v14 + 1;
  if (v9 > 3)
    LODWORD(v9) = 4;
  return ((uint64_t (*)(void))((char *)&loc_234D61950 + 4 * byte_23529DF64[(v9 - 1)]))();
}

void storeEnumTagSinglePayload for MaterialActiveAppearanceShapeStyle(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  unsigned int v11;
  int v12;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0xFCu)
    v6 = 252;
  else
    v6 = *(_DWORD *)(v5 + 84);
  v7 = *(_QWORD *)(v5 + 64);
  v8 = v7 + 1;
  if (a3 > v6)
  {
    if (v8 <= 3)
    {
      v11 = ((a3 - v6 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v11))
      {
        v9 = 4u;
      }
      else if (v11 >= 0x100)
      {
        v9 = 2;
      }
      else
      {
        v9 = v11 > 1;
      }
    }
    else
    {
      v9 = 1u;
    }
  }
  else
  {
    v9 = 0;
  }
  if (v6 < a2)
  {
    v10 = ~v6 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v7 != -1)
      {
        v12 = v10 & ~(-1 << (8 * v8));
        bzero(a1, v7 + 1);
        if (v8 == 3)
        {
          *a1 = v12;
          *((_BYTE *)a1 + 2) = BYTE2(v12);
        }
        else if (v8 == 2)
        {
          *a1 = v12;
        }
        else
        {
          *(_BYTE *)a1 = v12;
        }
      }
    }
    else
    {
      bzero(a1, v7 + 1);
      *(_DWORD *)a1 = v10;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X12 }
}

uint64_t type metadata accessor for MaterialActiveAppearanceShapeStyle(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for MaterialActiveAppearanceShapeStyle);
}

uint64_t storeEnumTagSinglePayload for MaterialActiveAppearance(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_234D61BDC + 4 * byte_23529DF77[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_234D61C10 + 4 * byte_23529DF72[v4]))();
}

uint64_t sub_234D61C10(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_234D61C18(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x234D61C20);
  return result;
}

uint64_t sub_234D61C2C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x234D61C34);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_234D61C38(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_234D61C40(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for MaterialActiveAppearance.Storage()
{
  return &unk_250639660;
}

ValueMetadata *type metadata accessor for MaterialActiveAppearance.Key()
{
  return &type metadata for MaterialActiveAppearance.Key;
}

uint64_t instantiation function for generic protocol witness table for MaterialView<A>.Background(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for MaterialView<A>.Background);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type MaterialActiveAppearance.Storage and conformance MaterialActiveAppearance.Storage()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type MaterialActiveAppearance.Storage and conformance MaterialActiveAppearance.Storage;
  if (!lazy protocol witness table cache variable for type MaterialActiveAppearance.Storage and conformance MaterialActiveAppearance.Storage)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for MaterialActiveAppearance.Storage, &unk_250639660);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MaterialActiveAppearance.Storage and conformance MaterialActiveAppearance.Storage);
  }
  return result;
}

void base witness table accessor for _AttributeBody in MaterialView<A>.ChildEnvironment()
{
  JUMPOUT(0x23B7C9C04);
}

void base witness table accessor for _AttributeBody in MaterialView<A>.Background()
{
  JUMPOUT(0x23B7C9C04);
}

uint64_t _s14AttributeGraph13PointerOffsetV2ofyACyxq_Gq_zFZAESPyq_GXEfU_TA_2@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  return closure #1 in static PointerOffset.of(_:)(a1, a2);
}

unint64_t type metadata accessor for NSBundle()
{
  unint64_t result;

  result = lazy cache variable for type metadata for NSBundle;
  if (!lazy cache variable for type metadata for NSBundle)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for NSBundle);
  }
  return result;
}

ValueMetadata *type metadata accessor for BackgroundMaterialKey()
{
  return &type metadata for BackgroundMaterialKey;
}

void static Material.modal.getter()
{
  static Material.toolbarButton.getter();
}

Swift::Bool __swiftcall _ShapeStyle_Pack.isClear(name:)(SwiftUI::_ShapeStyle_Name name)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  Swift::Bool v6;
  __int128 *v7;
  __int128 v9;
  __int128 v10;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 16);
  if (!v3)
    return 1;
  v4 = *(unsigned __int8 *)name;
  swift_bridgeObjectRetain();
  v10 = *(_OWORD *)(v2 + 112);
  v9 = *(_OWORD *)(v2 + 32);
  v5 = 1;
LABEL_3:
  if (v9 == v4 && *((float *)&v10 + 3) != 0.0)
    __asm { BR              X9 }
  v6 = 1;
  while (v5 != v3)
  {
    v7 = (__int128 *)(v2 + 32 + 120 * v5);
    v9 = *v7;
    v10 = v7[5];
    ++v5;
    if (v6)
      goto LABEL_3;
    v6 = 0;
  }
  swift_bridgeObjectRelease();
  return v6;
}

__n128 _ShapeStyle_Pack.Style.init(_:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  char v2;
  __int128 v3;
  __int128 v4;
  __n128 result;

  v2 = *(_BYTE *)(a1 + 80);
  v3 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)a2 = *(_OWORD *)a1;
  *(_OWORD *)(a2 + 16) = v3;
  v4 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(a2 + 32) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(a2 + 48) = v4;
  result = *(__n128 *)(a1 + 64);
  *(__n128 *)(a2 + 64) = result;
  *(_BYTE *)(a2 + 80) = v2;
  *(_DWORD *)(a2 + 84) = 1065353216;
  *(_QWORD *)(a2 + 88) = 0;
  *(_BYTE *)(a2 + 96) = -1;
  *(_QWORD *)(a2 + 104) = MEMORY[0x24BEE4AF8];
  return result;
}

uint64_t (*_ShapeStyle_Shape.stylePack.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  uint64_t v2;

  a1[1] = v1;
  if (*(_BYTE *)(v1 + 40) == 1)
  {
    v2 = *(_QWORD *)(v1 + 32);
    *(_QWORD *)(v1 + 32) = 0;
    *(_BYTE *)(v1 + 40) = 5;
  }
  else
  {
    v2 = MEMORY[0x24BEE4AF8];
  }
  *a1 = v2;
  return _ShapeStyle_Shape.stylePack.modify;
}

uint64_t _ShapeStyle_Shape.stylePack.modify(uint64_t *a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;

  v2 = *a1;
  if ((a2 & 1) == 0)
  {
    v3 = a1[1];
    v4 = *(_QWORD *)(v3 + 32);
    v5 = *(_BYTE *)(v3 + 40);
    swift_bridgeObjectRetain();
    outlined consume of _ShapeStyle_Shape.Result(v4, v5);
    *(_QWORD *)(v3 + 32) = v2;
    *(_BYTE *)(v3 + 40) = 1;
  }
  return swift_bridgeObjectRelease();
}

uint64_t _ShapeStyle_Pack.subscript.setter(uint64_t *a1, unsigned __int8 *a2, unsigned __int8 a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  int v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  unsigned int v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t v22;
  char *v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26;
  BOOL v28;
  uint64_t result;
  _QWORD *v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  unsigned __int8 v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  _BYTE v52[7];
  __int16 v53;
  char v54;
  int v55;
  __int16 v56;
  _BYTE v57[2];
  int v58;
  __int16 v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char v70;
  __int16 v71;
  char v72;
  int v73;
  uint64_t v74;
  char v75;
  _BYTE v76[7];
  uint64_t v77;

  v4 = *a1;
  v5 = a1[1];
  v7 = a1[2];
  v6 = a1[3];
  v8 = a1[4];
  v9 = a1[5];
  v11 = a1[6];
  v10 = a1[7];
  v13 = a1[8];
  v12 = a1[9];
  v14 = *((_BYTE *)a1 + 80);
  v15 = *((_DWORD *)a1 + 21);
  v16 = a1[11];
  v17 = *((_BYTE *)a1 + 96);
  v18 = a1[13];
  v19 = *a2;
  v20 = *(_QWORD **)v3;
  v21 = *(_QWORD *)(*(_QWORD *)v3 + 16);
  if (v21)
  {
    v22 = 0;
    v23 = (char *)v20 + 33;
    v24 = 18;
    while (1)
    {
      v25 = v23[v24 * 8 - 145];
      v26 = v23[v24 * 8 - 144];
      if (v19 == v25 && v26 == a3)
        break;
      v28 = v26 > a3 && v19 == v25;
      if (v19 < v25 || v28)
      {
        if (v21 >= v22)
          goto LABEL_19;
        __break(1u);
        goto LABEL_21;
      }
      ++v22;
      v24 += 15;
      if (v21 == v22)
      {
        v22 = *(_QWORD *)(*(_QWORD *)v3 + 16);
        goto LABEL_19;
      }
    }
    v44 = a1[6];
    v45 = a1[7];
    v46 = a1[8];
    v47 = a1[9];
    v48 = *((_BYTE *)a1 + 80);
    v49 = a1[11];
    v50 = *((_BYTE *)a1 + 96);
    v51 = a1[13];
    result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) != 0)
      goto LABEL_16;
LABEL_21:
    result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v20);
    v20 = (_QWORD *)result;
LABEL_16:
    if (v22 >= v20[2])
    {
      __break(1u);
    }
    else
    {
      v30 = &v20[v24];
      v31 = v20[v24 - 13];
      v32 = v20[v24 - 12];
      v33 = v20[v24 - 11];
      v34 = (void *)v20[v24 - 10];
      v35 = v20[v24 - 9];
      v36 = v20[v24 - 8];
      v37 = v20[v24 - 7];
      v38 = v20[v24 - 6];
      v39 = v20[v24 - 5];
      v40 = v20[v24 - 4];
      v41 = v20[v24 - 3];
      v42 = v20[v24 - 2];
      *(v30 - 13) = v4;
      *(v30 - 12) = v5;
      *(v30 - 11) = v7;
      *(v30 - 10) = v6;
      *(v30 - 9) = v8;
      *(v30 - 8) = v9;
      *(v30 - 7) = v44;
      *(v30 - 6) = v45;
      *(v30 - 5) = v46;
      *(v30 - 4) = v47;
      *((_BYTE *)v30 - 24) = v48;
      *((_DWORD *)v30 - 5) = v15;
      *(v30 - 2) = v49;
      v43 = v20[v24 - 1];
      *((_BYTE *)v30 - 8) = v50;
      *v30 = v51;
      outlined consume of _ShapeStyle_Pack.Fill(v31, v32, v33, v34, v35, v36, v37, v38, v39, v40, v41);
      outlined consume of GraphicsBlendMode?(v42, v43);
      result = swift_bridgeObjectRelease();
      *(_QWORD *)v3 = v20;
    }
  }
  else
  {
    v22 = 0;
LABEL_19:
    v58 = v55;
    v59 = v56;
    v71 = v53;
    v72 = v54;
    *(_DWORD *)v76 = *(_DWORD *)v52;
    *(_DWORD *)&v76[3] = *(_DWORD *)&v52[3];
    v57[0] = v19;
    v57[1] = a3;
    v60 = v4;
    v61 = v5;
    v62 = v7;
    v63 = v6;
    v64 = v8;
    v65 = v9;
    v66 = v11;
    v67 = v10;
    v68 = v13;
    v69 = v12;
    v70 = v14;
    v73 = v15;
    v74 = v16;
    v75 = v17;
    v77 = v18;
    return (uint64_t)specialized Array.replaceSubrange<A>(_:with:)(v22, v22, (uint64_t)v57);
  }
  return result;
}

Swift::Void __swiftcall _ShapeStyle_Pack.Style.applyOpacity(_:)(Swift::Float a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  float *v10;
  unint64_t v11;
  float v12;
  uint64_t v13;

  *(float *)(v1 + 84) = *(float *)(v1 + 84) * a1;
  v3 = *(_QWORD **)(v1 + 104);
  v4 = v3[2];
  if (v4)
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
LABEL_17:
      v3 = specialized _ArrayBuffer._consumeAndCreateNew()(v3);
    v5 = v3[2];
    v6 = v4 - 1;
    if (v5 < v4 - 1)
      v6 = v3[2];
    if (v6 >= 2)
    {
      v8 = v6 + 1;
      v9 = v8 & 1;
      if ((v8 & 1) == 0)
        v9 = 2;
      v7 = v8 - v9;
      v10 = (float *)(v3 + 19);
      v11 = v7;
      do
      {
        v12 = *v10 * a1;
        *(v10 - 18) = *(v10 - 18) * a1;
        *v10 = v12;
        v10 += 36;
        v11 -= 2;
      }
      while (v11);
    }
    else
    {
      v7 = 0;
    }
    v13 = 72 * v7 + 80;
    do
    {
      if (v7 >= v5)
      {
        __break(1u);
        goto LABEL_17;
      }
      ++v7;
      *(float *)((char *)v3 + v13) = *(float *)((char *)v3 + v13) * a1;
      v13 += 72;
    }
    while (v4 != v7);
    *(_QWORD *)(v1 + 104) = v3;
  }
}

uint64_t _ShapeStyle_Pack.modify(name:levels:_:)(unsigned __int8 *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t))
{
  _QWORD **v4;
  unsigned __int8 v8;
  _QWORD *v9;
  uint64_t result;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 v17;
  _QWORD *v18;

  v8 = *a1;
  v9 = *v4;
  v18 = *v4;
  v17 = v8;
  result = _ShapeStyle_Pack.indices(of:)(&v17);
  if (result == v11)
    return result;
  v12 = result;
  v13 = v11;
  if (v11 < result)
  {
LABEL_19:
    __break(1u);
  }
  else if (result < v11)
  {
    result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) != 0)
      goto LABEL_5;
    goto LABEL_21;
  }
  __break(1u);
LABEL_21:
  result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v9);
  v9 = (_QWORD *)result;
LABEL_5:
  v14 = (uint64_t)&v9[15 * v12 + 5];
  do
  {
    if ((v12 & 0x8000000000000000) != 0)
    {
      __break(1u);
LABEL_18:
      __break(1u);
      goto LABEL_19;
    }
    if (v12 >= v9[2])
      goto LABEL_18;
    v15 = *(unsigned __int8 *)(v14 - 7);
    if (v15 >= a2 && v15 < a3)
      result = a4(v14);
    ++v12;
    v14 += 120;
  }
  while (v13 != v12);
  *v4 = v9;
  return result;
}

uint64_t _ShapeStyle_Shape.stylePack.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;

  if (*(_BYTE *)(v1 + 40) == 1)
    result = swift_bridgeObjectRetain();
  else
    result = MEMORY[0x24BEE4AF8];
  *a1 = result;
  return result;
}

uint64_t _ShapeStyle_Pack.subscript.getter@<X0>(unsigned __int8 *a1@<X0>, unsigned __int8 a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unsigned __int8 *v8;
  unsigned int v9;
  unsigned int v10;
  BOOL v12;
  __int128 v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  unsigned __int8 *v19;
  int v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  char v26;
  int v27;
  uint64_t v28;
  char v29;
  __int128 v30;
  __int128 v31;
  void *v33;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;
  uint64_t v37;
  __int128 v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  unsigned __int8 v45;
  _BYTE v46[96];
  __int128 v47;
  uint64_t v48;

  v5 = *(_QWORD *)(*(_QWORD *)v3 + 16);
  if (v5)
  {
    v6 = 0;
    v7 = *a1;
    v8 = (unsigned __int8 *)(*(_QWORD *)v3 + 33);
    while (1)
    {
      v9 = *(v8 - 1);
      v10 = *v8;
      if (v7 == v9 && v10 == a2)
      {
        v13 = *(_OWORD *)(v8 + 63);
        v14 = *(_QWORD *)(v8 + 111);
        v15 = *(_OWORD *)(v8 + 95);
        *(_OWORD *)&v46[80] = *(_OWORD *)(v8 + 79);
        v47 = v15;
        v16 = *(_OWORD *)(v8 + 31);
        v17 = *(_OWORD *)(v8 + 47);
        v18 = *(_OWORD *)(v8 + 15);
        *(_OWORD *)v46 = *(_OWORD *)(v8 - 1);
        *(_OWORD *)&v46[16] = v18;
        *(_OWORD *)&v46[32] = v16;
        *(_OWORD *)&v46[48] = v17;
        v48 = v14;
        *(_OWORD *)&v46[64] = v13;
LABEL_18:
        v26 = v46[88];
        v27 = *(_DWORD *)&v46[92];
        v28 = v47;
        v29 = BYTE8(v47);
        v30 = *(_OWORD *)&v46[24];
        *(_OWORD *)a3 = *(_OWORD *)&v46[8];
        *(_OWORD *)(a3 + 16) = v30;
        v31 = *(_OWORD *)&v46[56];
        *(_OWORD *)(a3 + 32) = *(_OWORD *)&v46[40];
        *(_OWORD *)(a3 + 48) = v31;
        *(_OWORD *)(a3 + 64) = *(_OWORD *)&v46[72];
        *(_BYTE *)(a3 + 80) = v26;
        *(_DWORD *)(a3 + 84) = v27;
        *(_QWORD *)(a3 + 88) = v28;
        *(_BYTE *)(a3 + 96) = v29;
        *(_QWORD *)(a3 + 104) = v14;
        return outlined retain of (key: _ShapeStyle_Pack.Key, style: _ShapeStyle_Pack.Style)((uint64_t)v46);
      }
      v12 = v10 > a2 && v7 == v9;
      if (v7 < v9 || v12)
        break;
      ++v6;
      v8 += 120;
      if (v5 == v6)
        goto LABEL_19;
    }
    if (v6)
    {
      v20 = *(v8 - 121);
      v19 = v8 - 121;
      if (v20 == v7)
      {
        v14 = *((_QWORD *)v19 + 14);
        v21 = *((_OWORD *)v19 + 6);
        v22 = *((_OWORD *)v19 + 4);
        *(_OWORD *)&v46[80] = *((_OWORD *)v19 + 5);
        v47 = v21;
        v23 = *((_OWORD *)v19 + 2);
        v24 = *((_OWORD *)v19 + 3);
        v25 = *((_OWORD *)v19 + 1);
        *(_OWORD *)v46 = *(_OWORD *)v19;
        *(_OWORD *)&v46[16] = v25;
        *(_OWORD *)&v46[32] = v23;
        *(_OWORD *)&v46[48] = v24;
        v48 = v14;
        *(_OWORD *)&v46[64] = v22;
        goto LABEL_18;
      }
    }
  }
LABEL_19:
  if (one-time initialization token for clear != -1)
    swift_once();
  v34 = *((_QWORD *)&static _ShapeStyle_Pack.Style.clear + 1);
  v33 = (void *)static _ShapeStyle_Pack.Style.clear;
  v35 = xmmword_256193150;
  v36 = qword_256193160;
  v37 = unk_256193168;
  v38 = xmmword_256193170;
  v39 = qword_256193180;
  v40 = unk_256193188;
  v41 = byte_256193190;
  v42 = dword_256193194;
  v43 = qword_256193198;
  v44 = qword_2561931A8;
  *(_QWORD *)a3 = static _ShapeStyle_Pack.Style.clear;
  *(_QWORD *)(a3 + 8) = v34;
  *(_OWORD *)(a3 + 16) = v35;
  *(_QWORD *)(a3 + 32) = v36;
  *(_QWORD *)(a3 + 40) = v37;
  *(_OWORD *)(a3 + 48) = v38;
  *(_QWORD *)(a3 + 64) = v39;
  *(_QWORD *)(a3 + 72) = v40;
  *(_BYTE *)(a3 + 80) = v41;
  *(_DWORD *)(a3 + 84) = v42;
  *(_QWORD *)(a3 + 88) = v43;
  v45 = byte_2561931A0;
  *(_BYTE *)(a3 + 96) = byte_2561931A0;
  *(_QWORD *)(a3 + 104) = v44;
  outlined copy of _ShapeStyle_Pack.Fill(v33, v34, (void *)v35, *((void **)&v35 + 1), v36, v37, v38, *((uint64_t *)&v38 + 1), v39, v40, v41);
  outlined copy of GraphicsBlendMode?(v43, v45);
  return swift_bridgeObjectRetain();
}

uint64_t _ShapeStyle_Pack.Style.applyingOpacity(_:)@<X0>(uint64_t a1@<X8>, float a2@<S0>)
{
  uint64_t v2;
  void *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  float v16;
  uint64_t v17;
  _QWORD *v18;
  unsigned __int8 v19;
  uint64_t v20;
  uint64_t result;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  float *v27;
  unint64_t v28;
  float v29;
  uint64_t v30;

  v5 = *(void **)v2;
  v6 = *(_QWORD *)(v2 + 8);
  v7 = *(void **)(v2 + 16);
  v8 = *(void **)(v2 + 24);
  v9 = *(_QWORD *)(v2 + 32);
  v10 = *(_QWORD *)(v2 + 40);
  v11 = *(_QWORD *)(v2 + 48);
  v12 = *(_QWORD *)(v2 + 56);
  v13 = *(_QWORD *)(v2 + 64);
  v14 = *(_QWORD *)(v2 + 72);
  v15 = *(_BYTE *)(v2 + 80);
  v16 = *(float *)(v2 + 84);
  v17 = *(_QWORD *)(v2 + 88);
  v18 = *(_QWORD **)(v2 + 104);
  *(_QWORD *)a1 = *(_QWORD *)v2;
  *(_QWORD *)(a1 + 8) = v6;
  *(_QWORD *)(a1 + 16) = v7;
  *(_QWORD *)(a1 + 24) = v8;
  *(_QWORD *)(a1 + 32) = v9;
  *(_QWORD *)(a1 + 40) = v10;
  *(_QWORD *)(a1 + 48) = v11;
  *(_QWORD *)(a1 + 56) = v12;
  *(_QWORD *)(a1 + 64) = v13;
  *(_QWORD *)(a1 + 72) = v14;
  *(_BYTE *)(a1 + 80) = v15;
  *(_QWORD *)(a1 + 88) = v17;
  v19 = *(_BYTE *)(v2 + 96);
  *(_BYTE *)(a1 + 96) = v19;
  *(_QWORD *)(a1 + 104) = v18;
  *(float *)(a1 + 84) = v16 * a2;
  v20 = v18[2];
  outlined copy of _ShapeStyle_Pack.Fill(v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15);
  outlined copy of GraphicsBlendMode?(v17, v19);
  result = swift_bridgeObjectRetain();
  if (v20)
  {
    result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
LABEL_17:
      result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v18);
      v18 = (_QWORD *)result;
    }
    v22 = v18[2];
    v23 = v20 - 1;
    if (v20 - 1 >= v22)
      v23 = v18[2];
    if (v23 >= 2)
    {
      v25 = v23 + 1;
      v26 = v25 & 1;
      if ((v25 & 1) == 0)
        v26 = 2;
      v24 = v25 - v26;
      v27 = (float *)(v18 + 19);
      v28 = v24;
      do
      {
        v29 = *v27 * a2;
        *(v27 - 18) = *(v27 - 18) * a2;
        *v27 = v29;
        v27 += 36;
        v28 -= 2;
      }
      while (v28);
    }
    else
    {
      v24 = 0;
    }
    v30 = 72 * v24 + 80;
    do
    {
      if (v24 >= v22)
      {
        __break(1u);
        goto LABEL_17;
      }
      ++v24;
      *(float *)((char *)v18 + v30) = *(float *)((char *)v18 + v30) * a2;
      v30 += 72;
    }
    while (v20 != v24);
    *(_QWORD *)(a1 + 104) = v18;
  }
  return result;
}

uint64_t _ShapeStyle_Pack.Style.applyBlend(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  char v3;
  unsigned int v4;
  uint64_t result;
  int v6;
  uint64_t v7;
  unsigned __int8 v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  unsigned __int8 *v12;
  uint64_t v13;
  unsigned __int8 v14;

  v2 = *(_QWORD *)a1;
  v3 = *(_BYTE *)(a1 + 8);
  if (one-time initialization token for introduced != -1)
    goto LABEL_24;
  while (1)
  {
    v4 = static _SemanticFeature_v6.introduced;
    if (one-time initialization token for forced != -1)
      swift_once();
    result = swift_beginAccess();
    if (byte_25426FAB4 == 1)
    {
      result = dyld_program_sdk_at_least();
      if ((result & 1) != 0)
        goto LABEL_8;
    }
    else if (static Semantics.forced >= v4)
    {
LABEL_8:
      v6 = 1;
      if (*(unsigned __int8 *)(v1 + 96) != 255)
        goto LABEL_10;
      goto LABEL_9;
    }
    v6 = 0;
LABEL_9:
    v7 = *(_QWORD *)(v1 + 88);
    v8 = *(_BYTE *)(v1 + 96);
    outlined copy of GraphicsBlendMode(v2, v3);
    result = outlined consume of GraphicsBlendMode?(v7, v8);
    *(_QWORD *)(v1 + 88) = v2;
    *(_BYTE *)(v1 + 96) = v3;
LABEL_10:
    v9 = *(_QWORD **)(v1 + 104);
    v10 = v9[2];
    if (!v10)
      return result;
    result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v9);
      v9 = (_QWORD *)result;
    }
    v11 = 0;
    v12 = (unsigned __int8 *)(v9 + 12);
    while (v6)
    {
      if (v11 >= v9[2])
        goto LABEL_23;
      if (*v12 == 255)
        break;
LABEL_14:
      ++v11;
      v12 += 72;
      if (v10 == v11)
      {
        *(_QWORD *)(v1 + 104) = v9;
        return result;
      }
    }
    outlined copy of GraphicsBlendMode(v2, v3);
    if (v11 < v9[2])
    {
      v13 = *((_QWORD *)v12 - 1);
      *((_QWORD *)v12 - 1) = v2;
      v14 = *v12;
      *v12 = v3;
      result = outlined consume of GraphicsBlendMode?(v13, v14);
      goto LABEL_14;
    }
    __break(1u);
LABEL_23:
    __break(1u);
LABEL_24:
    swift_once();
  }
}

id _ShapeStyle_Pack.Style.fill.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  void *v2;
  uint64_t v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;

  v2 = *(void **)v1;
  v3 = *(_QWORD *)(v1 + 8);
  v4 = *(void **)(v1 + 16);
  v5 = *(void **)(v1 + 24);
  v6 = *(_QWORD *)(v1 + 32);
  v7 = *(_QWORD *)(v1 + 40);
  v8 = *(_QWORD *)(v1 + 48);
  v9 = *(_QWORD *)(v1 + 56);
  v10 = *(_QWORD *)(v1 + 64);
  v11 = *(_QWORD *)(v1 + 72);
  v12 = *(_BYTE *)(v1 + 80);
  *(_QWORD *)a1 = *(_QWORD *)v1;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 24) = v5;
  *(_QWORD *)(a1 + 32) = v6;
  *(_QWORD *)(a1 + 40) = v7;
  *(_QWORD *)(a1 + 48) = v8;
  *(_QWORD *)(a1 + 56) = v9;
  *(_QWORD *)(a1 + 64) = v10;
  *(_QWORD *)(a1 + 72) = v11;
  *(_BYTE *)(a1 + 80) = v12;
  return outlined copy of _ShapeStyle_Pack.Fill(v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12);
}

__n128 _ShapeStyle_Pack.Style.fill.setter(__int128 *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  __n128 result;
  __n128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;

  v9 = *a1;
  v7 = a1[2];
  v8 = a1[1];
  v6 = (__n128)a1[3];
  v2 = *((_QWORD *)a1 + 8);
  v3 = *((_QWORD *)a1 + 9);
  v4 = *((_BYTE *)a1 + 80);
  outlined consume of _ShapeStyle_Pack.Fill(*(_QWORD *)v1, *(_QWORD *)(v1 + 8), *(_QWORD *)(v1 + 16), *(void **)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), *(_QWORD *)(v1 + 48), *(_QWORD *)(v1 + 56), *(_QWORD *)(v1 + 64), *(_QWORD *)(v1 + 72), *(_BYTE *)(v1 + 80));
  *(_OWORD *)v1 = v9;
  *(_OWORD *)(v1 + 16) = v8;
  result = v6;
  *(_OWORD *)(v1 + 32) = v7;
  *(__n128 *)(v1 + 48) = v6;
  *(_QWORD *)(v1 + 64) = v2;
  *(_QWORD *)(v1 + 72) = v3;
  *(_BYTE *)(v1 + 80) = v4;
  return result;
}

uint64_t (*_ShapeStyle_Pack.Style.fill.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

float _ShapeStyle_Pack.Style.opacity.getter()
{
  uint64_t v0;

  return *(float *)(v0 + 84);
}

void _ShapeStyle_Pack.Style.opacity.setter(float a1)
{
  uint64_t v1;

  *(float *)(v1 + 84) = a1;
}

uint64_t (*_ShapeStyle_Pack.Style.opacity.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t _ShapeStyle_Pack.Style._blend.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  unsigned __int8 v3;

  v2 = *(_QWORD *)(v1 + 88);
  *(_QWORD *)a1 = v2;
  v3 = *(_BYTE *)(v1 + 96);
  *(_BYTE *)(a1 + 8) = v3;
  return outlined copy of GraphicsBlendMode?(v2, v3);
}

uint64_t _ShapeStyle_Pack.Style._blend.setter(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t result;

  v2 = *a1;
  v3 = *((_BYTE *)a1 + 8);
  result = outlined consume of GraphicsBlendMode?(*(_QWORD *)(v1 + 88), *(_BYTE *)(v1 + 96));
  *(_QWORD *)(v1 + 88) = v2;
  *(_BYTE *)(v1 + 96) = v3;
  return result;
}

uint64_t (*_ShapeStyle_Pack.Style._blend.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t _ShapeStyle_Pack.Style.blend.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  int v4;
  uint64_t v5;
  char v6;

  v3 = *(_QWORD *)(v1 + 88);
  v4 = *(unsigned __int8 *)(v1 + 96);
  if (v4 == 255)
  {
    if (one-time initialization token for normal != -1)
      swift_once();
    v5 = static GraphicsBlendMode.normal;
    v6 = byte_254266040;
    *(_QWORD *)a1 = static GraphicsBlendMode.normal;
    *(_BYTE *)(a1 + 8) = v6;
    outlined copy of GraphicsBlendMode(v5, v6);
  }
  else
  {
    *(_QWORD *)a1 = v3;
    *(_BYTE *)(a1 + 8) = v4 & 1;
  }
  return outlined copy of GraphicsBlendMode?(v3, v4);
}

uint64_t _ShapeStyle_Pack.Style.effects.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t _ShapeStyle_Pack.Style.effects.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 104) = a1;
  return result;
}

uint64_t (*_ShapeStyle_Pack.Style.effects.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

double one-time initialization function for clear()
{
  double result;

  byte_256193190 = 0;
  result = 0.0;
  xmmword_256193170 = 0u;
  *(_OWORD *)&qword_256193180 = 0u;
  xmmword_256193150 = 0u;
  *(_OWORD *)&qword_256193160 = 0u;
  static _ShapeStyle_Pack.Style.clear = 0u;
  dword_256193194 = 1065353216;
  qword_256193198 = 0;
  byte_2561931A0 = -1;
  qword_2561931A8 = MEMORY[0x24BEE4AF8];
  return result;
}

uint64_t static _ShapeStyle_Pack.Style.clear.getter@<X0>(uint64_t a1@<X8>)
{
  __int128 v2;
  __int128 v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  char v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 v12;

  if (one-time initialization token for clear != -1)
    swift_once();
  v2 = static _ShapeStyle_Pack.Style.clear;
  v3 = xmmword_256193150;
  v4 = qword_256193160;
  v5 = qword_256193168;
  v6 = xmmword_256193170;
  v7 = xmmword_256193180;
  v8 = byte_256193190;
  v9 = dword_256193194;
  v10 = qword_256193198;
  v11 = qword_2561931A8;
  *(_OWORD *)a1 = static _ShapeStyle_Pack.Style.clear;
  *(_OWORD *)(a1 + 16) = v3;
  *(_QWORD *)(a1 + 32) = v4;
  *(_QWORD *)(a1 + 40) = v5;
  *(_OWORD *)(a1 + 48) = v6;
  *(_OWORD *)(a1 + 64) = v7;
  *(_BYTE *)(a1 + 80) = v8;
  *(_DWORD *)(a1 + 84) = v9;
  *(_QWORD *)(a1 + 88) = v10;
  v12 = byte_2561931A0;
  *(_BYTE *)(a1 + 96) = byte_2561931A0;
  *(_QWORD *)(a1 + 104) = v11;
  outlined copy of _ShapeStyle_Pack.Fill((id)v2, *((uint64_t *)&v2 + 1), (void *)v3, *((void **)&v3 + 1), v4, v5, v6, *((uint64_t *)&v6 + 1), v7, *((uint64_t *)&v7 + 1), v8);
  outlined copy of GraphicsBlendMode?(v10, v12);
  return swift_bridgeObjectRetain();
}

uint64_t static _ShapeStyle_Pack.Effect.Kind.== infix(_:_:)(uint64_t a1, uint64_t *a2)
{
  char v2;
  char v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _DWORD v15[2];
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  int v19;
  char v20;
  _DWORD v21[2];
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  int v25;
  char v26;

  v2 = *(_BYTE *)(a1 + 45) & *((_BYTE *)a2 + 45);
  if ((*(_BYTE *)(a1 + 45) & 1) == 0 && (*((_BYTE *)a2 + 45) & 1) == 0)
  {
    v3 = *((_BYTE *)a2 + 44);
    v4 = *((_DWORD *)a2 + 10);
    v5 = a2[4];
    v7 = *a2;
    v6 = a2[1];
    v8 = *(_BYTE *)(a1 + 44);
    v9 = *(_DWORD *)(a1 + 40);
    v10 = *(_QWORD *)(a1 + 8);
    v11 = HIDWORD(*(_QWORD *)a1);
    v12 = *(_QWORD *)(a1 + 32);
    v13 = HIDWORD(*a2);
    v21[0] = *(_QWORD *)a1;
    v21[1] = v11;
    v22 = v10;
    v23 = *(_OWORD *)(a1 + 16);
    v24 = v12;
    v25 = v9;
    v26 = v8;
    v15[0] = v7;
    v15[1] = v13;
    v16 = v6;
    v17 = *((_OWORD *)a2 + 1);
    v18 = v5;
    v19 = v4;
    v20 = v3;
    v2 = specialized static ResolvedShadowStyle.== infix(_:_:)((uint64_t)v21, (uint64_t)v15);
  }
  return v2 & 1;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance _ShapeStyle_Pack.Effect.Kind(uint64_t a1, uint64_t *a2)
{
  char v2;
  char v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _DWORD v15[2];
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  int v19;
  char v20;
  _DWORD v21[2];
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  int v25;
  char v26;

  v2 = *(_BYTE *)(a1 + 45) & *((_BYTE *)a2 + 45);
  if ((*(_BYTE *)(a1 + 45) & 1) == 0 && (*((_BYTE *)a2 + 45) & 1) == 0)
  {
    v3 = *((_BYTE *)a2 + 44);
    v4 = *((_DWORD *)a2 + 10);
    v5 = a2[4];
    v7 = *a2;
    v6 = a2[1];
    v8 = *(_BYTE *)(a1 + 44);
    v9 = *(_DWORD *)(a1 + 40);
    v10 = *(_QWORD *)(a1 + 8);
    v11 = HIDWORD(*(_QWORD *)a1);
    v12 = *(_QWORD *)(a1 + 32);
    v13 = HIDWORD(*a2);
    v21[0] = *(_QWORD *)a1;
    v21[1] = v11;
    v22 = v10;
    v23 = *(_OWORD *)(a1 + 16);
    v24 = v12;
    v25 = v9;
    v26 = v8;
    v15[0] = v7;
    v15[1] = v13;
    v16 = v6;
    v17 = *((_OWORD *)a2 + 1);
    v18 = v5;
    v19 = v4;
    v20 = v3;
    v2 = specialized static ResolvedShadowStyle.== infix(_:_:)((uint64_t)v21, (uint64_t)v15);
  }
  return v2 & 1;
}

__n128 _ShapeStyle_Pack.Effect.kind.getter@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  char v4;
  char v5;
  __n128 result;
  __int128 v7;

  v2 = *(_QWORD *)(v1 + 32);
  v3 = *(_DWORD *)(v1 + 40);
  v4 = *(_BYTE *)(v1 + 44);
  v5 = *(_BYTE *)(v1 + 45);
  result = *(__n128 *)v1;
  v7 = *(_OWORD *)(v1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)v1;
  *(_OWORD *)(a1 + 16) = v7;
  *(_QWORD *)(a1 + 32) = v2;
  *(_BYTE *)(a1 + 44) = v4;
  *(_DWORD *)(a1 + 40) = v3;
  *(_BYTE *)(a1 + 45) = v5;
  return result;
}

__n128 _ShapeStyle_Pack.Effect.kind.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  char v4;
  char v5;
  __n128 result;
  __int128 v7;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(_DWORD *)(a1 + 40);
  v4 = *(_BYTE *)(a1 + 44);
  v5 = *(_BYTE *)(a1 + 45);
  result = *(__n128 *)a1;
  v7 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)v1 = *(_OWORD *)a1;
  *(_OWORD *)(v1 + 16) = v7;
  *(_QWORD *)(v1 + 32) = v2;
  *(_BYTE *)(v1 + 44) = v4;
  *(_DWORD *)(v1 + 40) = v3;
  *(_BYTE *)(v1 + 45) = v5;
  return result;
}

uint64_t (*_ShapeStyle_Pack.Effect.kind.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

float _ShapeStyle_Pack.Effect.opacity.getter()
{
  uint64_t v0;

  return *(float *)(v0 + 48);
}

void _ShapeStyle_Pack.Effect.opacity.setter(float a1)
{
  uint64_t v1;

  *(float *)(v1 + 48) = a1;
}

uint64_t (*_ShapeStyle_Pack.Effect.opacity.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t _ShapeStyle_Pack.Effect._blend.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  unsigned __int8 v3;

  v2 = *(_QWORD *)(v1 + 56);
  *(_QWORD *)a1 = v2;
  v3 = *(_BYTE *)(v1 + 64);
  *(_BYTE *)(a1 + 8) = v3;
  return outlined copy of GraphicsBlendMode?(v2, v3);
}

uint64_t _ShapeStyle_Pack.Effect._blend.setter(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t result;

  v2 = *a1;
  v3 = *((_BYTE *)a1 + 8);
  result = outlined consume of GraphicsBlendMode?(*(_QWORD *)(v1 + 56), *(_BYTE *)(v1 + 64));
  *(_QWORD *)(v1 + 56) = v2;
  *(_BYTE *)(v1 + 64) = v3;
  return result;
}

uint64_t (*_ShapeStyle_Pack.Effect._blend.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t _ShapeStyle_Pack.Effect.blend.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  int v4;
  uint64_t v5;
  char v6;

  v3 = *(_QWORD *)(v1 + 56);
  v4 = *(unsigned __int8 *)(v1 + 64);
  if (v4 == 255)
  {
    if (one-time initialization token for normal != -1)
      swift_once();
    v5 = static GraphicsBlendMode.normal;
    v6 = byte_254266040;
    *(_QWORD *)a1 = static GraphicsBlendMode.normal;
    *(_BYTE *)(a1 + 8) = v6;
    outlined copy of GraphicsBlendMode(v5, v6);
  }
  else
  {
    *(_QWORD *)a1 = v3;
    *(_BYTE *)(a1 + 8) = v4 & 1;
  }
  return outlined copy of GraphicsBlendMode?(v3, v4);
}

void _ShapeStyle_Pack.Key.name.getter(_BYTE *a1@<X8>)
{
  _BYTE *v1;

  *a1 = *v1;
}

_BYTE *_ShapeStyle_Pack.Key.name.setter(_BYTE *result)
{
  _BYTE *v1;

  *v1 = *result;
  return result;
}

uint64_t (*_ShapeStyle_Pack.Key.name.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

_BYTE *_ShapeStyle_Pack.Key.init(_:_:)@<X0>(_BYTE *result@<X0>, char a2@<W1>, _BYTE *a3@<X8>)
{
  *a3 = *result;
  a3[1] = a2;
  return result;
}

uint64_t _ShapeStyle_Pack.Key.level.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 1);
}

uint64_t _ShapeStyle_Pack.Key.level.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 1) = result;
  return result;
}

_QWORD *(*_ShapeStyle_Pack.Key.level.modify(_QWORD *a1))(_QWORD *result)
{
  uint64_t v1;

  *a1 = *(unsigned __int8 *)(v1 + 1);
  a1[1] = v1;
  return _ShapeStyle_Pack.Key.level.modify;
}

_QWORD *_ShapeStyle_Pack.Key.level.modify(_QWORD *result)
{
  *(_BYTE *)(result[1] + 1) = *result;
  return result;
}

BOOL static _ShapeStyle_Pack.Key.< infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  unsigned int v2;
  unsigned int v3;

  v2 = *a1;
  v3 = *a2;
  if (v2 < v3)
    return 1;
  return v2 == v3 && a1[1] < a2[1];
}

BOOL static _ShapeStyle_Pack.Key.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2 && a1[1] == a2[1];
}

BOOL protocol witness for static Comparable.< infix(_:_:) in conformance _ShapeStyle_Pack.Key(unsigned __int8 *a1, unsigned __int8 *a2)
{
  unsigned int v2;
  unsigned int v3;

  v2 = *a1;
  v3 = *a2;
  if (v2 < v3)
    return 1;
  return v2 == v3 && a1[1] < a2[1];
}

BOOL protocol witness for static Comparable.<= infix(_:_:) in conformance _ShapeStyle_Pack.Key(unsigned __int8 *a1, unsigned __int8 *a2)
{
  unsigned int v2;
  unsigned int v3;

  v2 = *a2;
  v3 = *a1;
  if (v2 < v3)
    return 0;
  return v2 != v3 || a2[1] >= a1[1];
}

BOOL protocol witness for static Comparable.>= infix(_:_:) in conformance _ShapeStyle_Pack.Key(unsigned __int8 *a1, unsigned __int8 *a2)
{
  unsigned int v2;
  unsigned int v3;

  v2 = *a1;
  v3 = *a2;
  if (v2 < v3)
    return 0;
  return v2 != v3 || a1[1] >= a2[1];
}

BOOL protocol witness for static Comparable.> infix(_:_:) in conformance _ShapeStyle_Pack.Key(unsigned __int8 *a1, unsigned __int8 *a2)
{
  unsigned int v2;
  unsigned int v3;

  v2 = *a2;
  v3 = *a1;
  if (v2 < v3)
    return 1;
  return v2 == v3 && a2[1] < a1[1];
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance _ShapeStyle_Pack.Key(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2 && a1[1] == a2[1];
}

void _ShapeStyle_Pack.init()(_QWORD *a1@<X8>)
{
  *a1 = MEMORY[0x24BEE4AF8];
}

uint64_t static _ShapeStyle_Pack.style(_:name:level:)@<X0>(uint64_t a1@<X0>, char *a2@<X1>, char a3@<W2>, uint64_t *a4@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  unsigned __int8 v14;
  uint64_t v15;
  uint64_t v17;
  void *v18;
  void *v19;
  uint64_t v20;
  void *v21;

  v20 = *(_QWORD *)(a1 + 8);
  v21 = *(void **)a1;
  v18 = *(void **)(a1 + 24);
  v19 = *(void **)(a1 + 16);
  v4 = *(_QWORD *)(a1 + 40);
  v17 = *(_QWORD *)(a1 + 32);
  v5 = *(_QWORD *)(a1 + 48);
  v6 = *(_QWORD *)(a1 + 56);
  v7 = *(_QWORD *)(a1 + 64);
  v8 = *(_QWORD *)(a1 + 72);
  v9 = *(_BYTE *)(a1 + 80);
  v10 = *(_DWORD *)(a1 + 84);
  v11 = *(_QWORD *)(a1 + 88);
  v12 = *(_QWORD *)(a1 + 104);
  v13 = *a2;
  v14 = *(_BYTE *)(a1 + 96);
  type metadata accessor for _ContiguousArrayStorage<(key: _ShapeStyle_Pack.Key, style: _ShapeStyle_Pack.Style)>();
  v15 = swift_allocObject();
  *(_OWORD *)(v15 + 16) = xmmword_23527E860;
  *(_BYTE *)(v15 + 32) = v13;
  *(_BYTE *)(v15 + 33) = a3;
  *(_QWORD *)(v15 + 40) = v21;
  *(_QWORD *)(v15 + 48) = v20;
  *(_QWORD *)(v15 + 56) = v19;
  *(_QWORD *)(v15 + 64) = v18;
  *(_QWORD *)(v15 + 72) = v17;
  *(_QWORD *)(v15 + 80) = v4;
  *(_QWORD *)(v15 + 88) = v5;
  *(_QWORD *)(v15 + 96) = v6;
  *(_QWORD *)(v15 + 104) = v7;
  *(_QWORD *)(v15 + 112) = v8;
  *(_BYTE *)(v15 + 120) = v9;
  *(_DWORD *)(v15 + 124) = v10;
  *(_QWORD *)(v15 + 128) = v11;
  *(_BYTE *)(v15 + 136) = v14;
  *(_QWORD *)(v15 + 144) = v12;
  *a4 = v15;
  outlined copy of _ShapeStyle_Pack.Fill(v21, v20, v19, v18, v17, v4, v5, v6, v7, v8, v9);
  outlined copy of GraphicsBlendMode?(v11, v14);
  return swift_bridgeObjectRetain();
}

id static _ShapeStyle_Pack.fill(_:name:level:)@<X0>(uint64_t a1@<X0>, char *a2@<X1>, char a3@<W2>, uint64_t *a4@<X8>)
{
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  char v13;
  uint64_t v14;
  uint64_t v16;
  void *v17;

  v4 = *(void **)(a1 + 16);
  v16 = *(_QWORD *)(a1 + 8);
  v17 = *(void **)a1;
  v5 = *(void **)(a1 + 24);
  v6 = *(_QWORD *)(a1 + 32);
  v7 = *(_QWORD *)(a1 + 40);
  v8 = *(_QWORD *)(a1 + 48);
  v9 = *(_QWORD *)(a1 + 56);
  v10 = *(_QWORD *)(a1 + 64);
  v11 = *(_QWORD *)(a1 + 72);
  v12 = *(_BYTE *)(a1 + 80);
  v13 = *a2;
  type metadata accessor for _ContiguousArrayStorage<(key: _ShapeStyle_Pack.Key, style: _ShapeStyle_Pack.Style)>();
  v14 = swift_allocObject();
  *(_OWORD *)(v14 + 16) = xmmword_23527E860;
  *(_BYTE *)(v14 + 32) = v13;
  *(_BYTE *)(v14 + 33) = a3;
  *(_QWORD *)(v14 + 40) = v17;
  *(_QWORD *)(v14 + 48) = v16;
  *(_QWORD *)(v14 + 56) = v4;
  *(_QWORD *)(v14 + 64) = v5;
  *(_QWORD *)(v14 + 72) = v6;
  *(_QWORD *)(v14 + 80) = v7;
  *(_QWORD *)(v14 + 88) = v8;
  *(_QWORD *)(v14 + 96) = v9;
  *(_QWORD *)(v14 + 104) = v10;
  *(_QWORD *)(v14 + 112) = v11;
  *(_BYTE *)(v14 + 120) = v12;
  *(_DWORD *)(v14 + 124) = 1065353216;
  *(_QWORD *)(v14 + 128) = 0;
  *(_BYTE *)(v14 + 136) = -1;
  *(_QWORD *)(v14 + 144) = MEMORY[0x24BEE4AF8];
  *a4 = v14;
  return outlined copy of _ShapeStyle_Pack.Fill(v17, v16, v4, v5, v6, v7, v8, v9, v10, v11, v12);
}

uint64_t static _ShapeStyle_Pack.defaultValue.getter@<X0>(_QWORD *a1@<X8>)
{
  if (one-time initialization token for defaultValue != -1)
    swift_once();
  *a1 = static _ShapeStyle_Pack.defaultValue;
  return swift_bridgeObjectRetain();
}

float key path getter for _ShapeStyle_Pack.subscript(_:_:) : _ShapeStyle_Pack@<S0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unsigned __int8 v4;
  uint64_t v5;
  char v6;
  float result;
  uint64_t v8;
  char v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  unsigned __int8 v13;
  uint64_t v14;
  _OWORD v15[5];
  char v16;
  float v17;
  uint64_t v18;
  char v19;
  uint64_t v20;

  v4 = *(_BYTE *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  v14 = *a1;
  v13 = v4;
  _ShapeStyle_Pack.subscript.getter(&v13, v5, (uint64_t)v15);
  v6 = v16;
  result = v17;
  v8 = v18;
  v9 = v19;
  v10 = v20;
  v11 = v15[1];
  *(_OWORD *)a3 = v15[0];
  *(_OWORD *)(a3 + 16) = v11;
  v12 = v15[3];
  *(_OWORD *)(a3 + 32) = v15[2];
  *(_OWORD *)(a3 + 48) = v12;
  *(_OWORD *)(a3 + 64) = v15[4];
  *(_BYTE *)(a3 + 80) = v6;
  *(float *)(a3 + 84) = result;
  *(_QWORD *)(a3 + 88) = v8;
  *(_BYTE *)(a3 + 96) = v9;
  *(_QWORD *)(a3 + 104) = v10;
  return result;
}

uint64_t key path setter for _ShapeStyle_Pack.subscript(_:_:) : _ShapeStyle_Pack(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned __int8 v3;
  uint64_t v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  char v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  unsigned __int8 v18;
  unsigned __int8 v20;
  id v21[10];
  char v22;
  int v23;
  uint64_t v24;
  unsigned __int8 v25;
  uint64_t v26;

  v3 = *(_BYTE *)a3;
  v4 = *(_QWORD *)(a3 + 8);
  v5 = *(void **)(a1 + 8);
  v6 = *(void **)(a1 + 16);
  v7 = *(void **)(a1 + 24);
  v8 = *(void **)(a1 + 32);
  v9 = *(void **)(a1 + 40);
  v10 = *(void **)(a1 + 48);
  v11 = *(void **)(a1 + 56);
  v12 = *(void **)(a1 + 64);
  v13 = *(void **)(a1 + 72);
  v14 = *(_BYTE *)(a1 + 80);
  v15 = *(_DWORD *)(a1 + 84);
  v16 = *(_QWORD *)(a1 + 88);
  v17 = *(_QWORD *)(a1 + 104);
  v18 = *(_BYTE *)(a1 + 96);
  v21[0] = *(id *)a1;
  v21[1] = v5;
  v21[2] = v6;
  v21[3] = v7;
  v21[4] = v8;
  v21[5] = v9;
  v21[6] = v10;
  v21[7] = v11;
  v21[8] = v12;
  v21[9] = v13;
  v22 = v14;
  v23 = v15;
  v24 = v16;
  v25 = v18;
  v26 = v17;
  v20 = v3;
  outlined copy of _ShapeStyle_Pack.Fill(v21[0], (uint64_t)v5, v6, v7, (uint64_t)v8, (uint64_t)v9, (uint64_t)v10, (uint64_t)v11, (uint64_t)v12, (uint64_t)v13, v14);
  outlined copy of GraphicsBlendMode?(v16, v18);
  swift_bridgeObjectRetain();
  return _ShapeStyle_Pack.subscript.setter((uint64_t *)v21, &v20, v4);
}

void (*_ShapeStyle_Pack.subscript.modify(_QWORD *a1, unsigned __int8 *a2, uint64_t a3))(void ***a1, char a2)
{
  uint64_t *v3;
  _QWORD *v7;
  unsigned __int8 v8;
  unsigned __int8 v10;
  uint64_t v11;

  v7 = malloc(0x88uLL);
  *a1 = v7;
  v7[14] = a3;
  v7[15] = v3;
  v8 = *a2;
  *((_BYTE *)v7 + 128) = *a2;
  v11 = *v3;
  v10 = v8;
  _ShapeStyle_Pack.subscript.getter(&v10, a3, (uint64_t)v7);
  return _ShapeStyle_Pack.subscript.modify;
}

void _ShapeStyle_Pack.subscript.modify(void ***a1, char a2)
{
  void **v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  int v15;
  uint64_t v16;
  unsigned __int8 v17;
  unsigned __int8 v18;
  void *v19;
  void *v20;
  uint64_t v21;
  unsigned __int8 v22;
  uint64_t v23[10];
  char v24;
  int v25;
  uint64_t v26;
  unsigned __int8 v27;
  void *v28;
  unsigned __int8 v29;

  v3 = *a1;
  v4 = **a1;
  v5 = (uint64_t)v3[1];
  v6 = v3[2];
  v7 = v3[3];
  v8 = (uint64_t)v3[4];
  v9 = (uint64_t)v3[5];
  v10 = (uint64_t)v3[6];
  v11 = (uint64_t)v3[7];
  v12 = (uint64_t)v3[8];
  v13 = (uint64_t)v3[9];
  v14 = *((_BYTE *)v3 + 80);
  v15 = *((_DWORD *)v3 + 21);
  v16 = (uint64_t)v3[11];
  v17 = *((_BYTE *)v3 + 96);
  v18 = *((_BYTE *)v3 + 128);
  v19 = v3[14];
  v20 = v3[13];
  v23[0] = (uint64_t)v4;
  v23[1] = v5;
  v23[2] = (uint64_t)v6;
  v23[3] = (uint64_t)v7;
  v23[4] = v8;
  v23[5] = v9;
  v23[6] = v10;
  v23[7] = v11;
  v23[8] = v12;
  v23[9] = v13;
  v24 = v14;
  v25 = v15;
  v26 = v16;
  v27 = v17;
  v28 = v20;
  v29 = v18;
  if ((a2 & 1) != 0)
  {
    outlined copy of _ShapeStyle_Pack.Fill(v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14);
    outlined copy of GraphicsBlendMode?(v16, v17);
    swift_bridgeObjectRetain();
    _ShapeStyle_Pack.subscript.setter(v23, &v29, v19);
    v21 = (uint64_t)v3[11];
    v22 = *((_BYTE *)v3 + 96);
    outlined consume of _ShapeStyle_Pack.Fill((unint64_t)*v3, (uint64_t)v3[1], (unint64_t)v3[2], v3[3], (uint64_t)v3[4], (uint64_t)v3[5], (uint64_t)v3[6], (uint64_t)v3[7], (uint64_t)v3[8], (uint64_t)v3[9], *((_BYTE *)v3 + 80));
    outlined consume of GraphicsBlendMode?(v21, v22);
    swift_bridgeObjectRelease();
  }
  else
  {
    _ShapeStyle_Pack.subscript.setter(v23, &v29, v19);
  }
  free(v3);
}

uint64_t _ShapeStyle_Pack.subscript.getter@<X0>(unsigned __int8 *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  unsigned __int8 v3;
  unsigned __int8 v5;
  uint64_t v6;

  v3 = *a1;
  v6 = *v2;
  v5 = v3;
  _ShapeStyle_Pack.Slice.init(pack:name:)(&v6, &v5, a2);
  return swift_bridgeObjectRetain();
}

unint64_t _ShapeStyle_Pack.Slice.init(pack:name:)@<X0>(uint64_t *a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  unsigned __int8 v5;
  unint64_t result;
  uint64_t v7;
  char v8;
  unint64_t v9;
  BOOL v10;
  BOOL v11;
  unsigned __int8 v12;
  uint64_t v13;

  v4 = *a1;
  v5 = *a2;
  v13 = *a1;
  v12 = v5;
  result = _ShapeStyle_Pack.indices(of:)(&v12);
  if (result == v7)
  {
    if ((result & 0x8000000000000000) != 0)
    {
      __break(1u);
      goto LABEL_14;
    }
    v8 = 0;
    v9 = *(_QWORD *)(v4 + 16);
LABEL_7:
    if (v9 >= result)
    {
      v11 = __OFSUB__(v9, v7);
      v10 = (uint64_t)(v9 - v7) < 0;
    }
    else
    {
      v11 = 0;
      v10 = 1;
    }
    if (v10 == v11)
    {
      if ((v7 & 0x8000000000000000) == 0)
      {
        *(_QWORD *)a3 = v4;
        *(_QWORD *)(a3 + 8) = v4 + 32;
        *(_QWORD *)(a3 + 16) = result;
        *(_QWORD *)(a3 + 24) = (2 * v7) | 1;
        *(_BYTE *)(a3 + 32) = v8;
        return result;
      }
      goto LABEL_15;
    }
LABEL_14:
    __break(1u);
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  if ((result & 0x8000000000000000) != 0)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v9 = *(_QWORD *)(v4 + 16);
  if (result < v9)
  {
    v8 = *(_BYTE *)(v4 + 120 * result + 33);
    goto LABEL_7;
  }
LABEL_17:
  __break(1u);
  return result;
}

unint64_t _ShapeStyle_Pack.indices(of:)(unsigned __int8 *a1)
{
  uint64_t v1;
  unint64_t v2;
  unint64_t result;
  int v5;
  unsigned __int8 *i;
  uint64_t v7;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 16);
  if (!v2)
    return 0;
  result = 0;
  v5 = *a1;
  for (i = (unsigned __int8 *)(*(_QWORD *)v1 + 32); *i != v5; i += 120)
  {
    if (v2 == ++result)
      return *(_QWORD *)(*(_QWORD *)v1 + 16);
  }
  if (result < v2)
  {
    v7 = result;
    while (1)
    {
      if (v2 == v7)
      {
        __break(1u);
        goto LABEL_17;
      }
      if (*i != v5)
        break;
      ++v7;
      i += 120;
      if (v2 == v7)
      {
        v7 = *(_QWORD *)(*(_QWORD *)v1 + 16);
        break;
      }
    }
    if (v7 >= (uint64_t)result)
      return result;
LABEL_17:
    __break(1u);
  }
  return result;
}

uint64_t _ShapeStyle_Pack.Slice.startIndex.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 32);
}

uint64_t _ShapeStyle_Pack.Slice.endIndex.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  BOOL v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(_QWORD *)(v0 + 24) >> 1;
  v3 = __OFSUB__(v2, v1);
  v4 = v2 - v1;
  if (v3)
  {
    __break(1u);
    goto LABEL_5;
  }
  v5 = *(unsigned __int8 *)(v0 + 32);
  result = v5 + v4;
  if (__OFADD__(v5, v4))
LABEL_5:
    __break(1u);
  return result;
}

uint64_t _ShapeStyle_Pack.Slice.subscript.getter@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  char v16;
  __int128 v17;
  __int128 v18;
  _BYTE v19[96];
  __int128 v20;
  uint64_t v21;

  v3 = *(unsigned __int8 *)(v2 + 32);
  v7 = __OFSUB__(result, v3);
  v4 = result - v3;
  if (v7)
  {
    __break(1u);
  }
  else
  {
    v5 = *(_QWORD *)(v2 + 24) >> 1;
    if (v4 >= *(_QWORD *)(v2 + 16))
    {
      v7 = __OFSUB__(v4, v5);
      v6 = v4 - v5 < 0;
    }
    else
    {
      v7 = 0;
      v6 = 0;
    }
    if (v6 != v7)
    {
      v8 = *(_QWORD *)(v2 + 8) + 120 * v4;
      v9 = *(_QWORD *)(v8 + 112);
      v10 = *(_OWORD *)(v8 + 96);
      v11 = *(_OWORD *)(v8 + 64);
      *(_OWORD *)&v19[80] = *(_OWORD *)(v8 + 80);
      v20 = v10;
      v12 = *(_OWORD *)(v8 + 32);
      v13 = *(_OWORD *)(v8 + 48);
      v14 = *(_OWORD *)(v8 + 16);
      *(_OWORD *)v19 = *(_OWORD *)v8;
      *(_OWORD *)&v19[16] = v14;
      *(_OWORD *)&v19[32] = v12;
      *(_OWORD *)&v19[48] = v13;
      v21 = v9;
      *(_OWORD *)&v19[64] = v11;
      LOBYTE(v8) = v19[88];
      LODWORD(v12) = *(_DWORD *)&v19[92];
      v15 = v20;
      v16 = BYTE8(v20);
      v17 = *(_OWORD *)&v19[24];
      *(_OWORD *)a2 = *(_OWORD *)&v19[8];
      *(_OWORD *)(a2 + 16) = v17;
      v18 = *(_OWORD *)&v19[56];
      *(_OWORD *)(a2 + 32) = *(_OWORD *)&v19[40];
      *(_OWORD *)(a2 + 48) = v18;
      *(_OWORD *)(a2 + 64) = *(_OWORD *)&v19[72];
      *(_BYTE *)(a2 + 80) = v8;
      *(_DWORD *)(a2 + 84) = v12;
      *(_QWORD *)(a2 + 88) = v15;
      *(_BYTE *)(a2 + 96) = v16;
      *(_QWORD *)(a2 + 104) = v9;
      return outlined retain of (key: _ShapeStyle_Pack.Key, style: _ShapeStyle_Pack.Style)((uint64_t)v19);
    }
  }
  __break(1u);
  return result;
}

_QWORD *protocol witness for BidirectionalCollection.index(before:) in conformance _ShapeStyle_Pack.Slice@<X0>(_QWORD *result@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = *result - 1;
  if (__OFSUB__(*result, 1))
  {
    __break(1u);
    goto LABEL_11;
  }
  v4 = *(_QWORD *)(v2 + 16);
  v5 = *(_QWORD *)(v2 + 24) >> 1;
  v6 = __OFSUB__(v5, v4);
  v7 = v5 - v4;
  if (v6)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  v8 = *(unsigned __int8 *)(v2 + 32);
  v6 = __OFADD__(v8, v7);
  v9 = v8 + v7;
  if (v6)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  if (v3 >= v8 && v3 < v9)
  {
    *a2 = v3;
    return result;
  }
LABEL_13:
  __break(1u);
  return result;
}

uint64_t *protocol witness for BidirectionalCollection.formIndex(before:) in conformance _ShapeStyle_Pack.Slice(uint64_t *result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *result - 1;
  if (__OFSUB__(*result, 1))
  {
    __break(1u);
    goto LABEL_11;
  }
  v3 = *(_QWORD *)(v1 + 16);
  v4 = *(_QWORD *)(v1 + 24) >> 1;
  v5 = __OFSUB__(v4, v3);
  v6 = v4 - v3;
  if (v5)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  v7 = *(unsigned __int8 *)(v1 + 32);
  v5 = __OFADD__(v7, v6);
  v8 = v7 + v6;
  if (v5)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  if (v2 >= v7 && v2 < v8)
  {
    *result = v2;
    return result;
  }
LABEL_13:
  __break(1u);
  return result;
}

uint64_t protocol witness for BidirectionalCollection.distance(from:to:) in conformance _ShapeStyle_Pack.Slice(uint64_t *a1, uint64_t *a2)
{
  return specialized RandomAccessCollection<>.distance(from:to:)(*a1, *a2);
}

void protocol witness for Collection.startIndex.getter in conformance _ShapeStyle_Pack.Slice(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(unsigned __int8 *)(v1 + 32);
}

void protocol witness for Collection.endIndex.getter in conformance _ShapeStyle_Pack.Slice(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  BOOL v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *(_QWORD *)(v1 + 16);
  v3 = *(_QWORD *)(v1 + 24) >> 1;
  v4 = __OFSUB__(v3, v2);
  v5 = v3 - v2;
  if (v4)
  {
    __break(1u);
  }
  else
  {
    v6 = *(unsigned __int8 *)(v1 + 32);
    v4 = __OFADD__(v6, v5);
    v7 = v6 + v5;
    if (!v4)
    {
      *a1 = v7;
      return;
    }
  }
  __break(1u);
}

void (*protocol witness for Collection.subscript.read in conformance _ShapeStyle_Pack.Slice(void (**a1)(uint64_t *a1), _QWORD *a2))(uint64_t *a1)
{
  uint64_t v2;
  void (*result)(uint64_t *);
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  char v17;

  result = (void (*)(uint64_t *))malloc(0xE8uLL);
  *a1 = result;
  v6 = *(unsigned __int8 *)(v2 + 32);
  v7 = *a2 - v6;
  if (__OFSUB__(*a2, v6))
  {
    __break(1u);
  }
  else if (v7 >= *(_QWORD *)(v2 + 16) && v7 < *(_QWORD *)(v2 + 24) >> 1)
  {
    v9 = *(_QWORD *)(v2 + 8) + 120 * v7;
    v10 = *(_QWORD *)(v9 + 112);
    v11 = *(_OWORD *)(v9 + 96);
    v12 = *(_OWORD *)(v9 + 64);
    *((_OWORD *)result + 5) = *(_OWORD *)(v9 + 80);
    *((_OWORD *)result + 6) = v11;
    v13 = *(_OWORD *)(v9 + 32);
    v14 = *(_OWORD *)(v9 + 48);
    v15 = *(_OWORD *)(v9 + 16);
    *(_OWORD *)result = *(_OWORD *)v9;
    *((_OWORD *)result + 1) = v15;
    *((_OWORD *)result + 2) = v13;
    *((_OWORD *)result + 3) = v14;
    *((_QWORD *)result + 14) = v10;
    *((_OWORD *)result + 4) = v12;
    LOBYTE(v9) = *((_BYTE *)result + 88);
    LODWORD(v13) = *((_DWORD *)result + 23);
    v16 = *((_QWORD *)result + 12);
    v17 = *((_BYTE *)result + 104);
    *(_OWORD *)((char *)result + 120) = *(_OWORD *)((char *)result + 8);
    *(_OWORD *)((char *)result + 136) = *(_OWORD *)((char *)result + 24);
    *(_OWORD *)((char *)result + 152) = *(_OWORD *)((char *)result + 40);
    *(_OWORD *)((char *)result + 168) = *(_OWORD *)((char *)result + 56);
    *(_OWORD *)((char *)result + 184) = *(_OWORD *)((char *)result + 72);
    *((_BYTE *)result + 200) = v9;
    *((_DWORD *)result + 51) = v13;
    *((_QWORD *)result + 26) = v16;
    *((_BYTE *)result + 216) = v17;
    *((_QWORD *)result + 28) = v10;
    outlined retain of (key: _ShapeStyle_Pack.Key, style: _ShapeStyle_Pack.Style)((uint64_t)result);
    return protocol witness for Collection.subscript.read in conformance _ShapeStyle_Pack.Slice;
  }
  __break(1u);
  return result;
}

void protocol witness for Collection.subscript.read in conformance _ShapeStyle_Pack.Slice(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  unsigned __int8 v3;

  v1 = *a1;
  v2 = *(_QWORD *)(*a1 + 208);
  v3 = *(_BYTE *)(*a1 + 216);
  outlined consume of _ShapeStyle_Pack.Fill(*(_QWORD *)(*a1 + 120), *(_QWORD *)(v1 + 128), *(_QWORD *)(v1 + 136), *(void **)(v1 + 144), *(_QWORD *)(v1 + 152), *(_QWORD *)(v1 + 160), *(_QWORD *)(v1 + 168), *(_QWORD *)(v1 + 176), *(_QWORD *)(v1 + 184), *(_QWORD *)(v1 + 192), *(_BYTE *)(v1 + 200));
  outlined consume of GraphicsBlendMode?(v2, v3);
  swift_bridgeObjectRelease();
  free((void *)v1);
}

uint64_t protocol witness for Collection.subscript.getter in conformance _ShapeStyle_Pack.Slice@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  return specialized Collection<>.subscript.getter(*a1, a1[1], a2);
}

void protocol witness for Collection.indices.getter in conformance _ShapeStyle_Pack.Slice(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  BOOL v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *(_QWORD *)(v1 + 16);
  v3 = *(_QWORD *)(v1 + 24) >> 1;
  v4 = __OFSUB__(v3, v2);
  v5 = v3 - v2;
  if (v4)
  {
    __break(1u);
    goto LABEL_6;
  }
  v6 = *(unsigned __int8 *)(v1 + 32);
  v4 = __OFADD__(v6, v5);
  v7 = v6 + v5;
  if (v4)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  if (v7 >= v6)
  {
    *a1 = v6;
    a1[1] = v7;
    return;
  }
LABEL_7:
  __break(1u);
}

BOOL protocol witness for Collection.isEmpty.getter in conformance _ShapeStyle_Pack.Slice()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  BOOL v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BOOL8 result;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(_QWORD *)(v0 + 24) >> 1;
  v3 = __OFSUB__(v2, v1);
  v4 = v2 - v1;
  if (v3)
  {
    __break(1u);
  }
  else
  {
    v5 = *(unsigned __int8 *)(v0 + 32);
    v3 = __OFADD__(v5, v4);
    v6 = v5 + v4;
    if (!v3)
      return v6 == v5;
  }
  __break(1u);
  return result;
}

_QWORD *protocol witness for RandomAccessCollection.index(_:offsetBy:) in conformance _ShapeStyle_Pack.Slice@<X0>(_QWORD *result@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *result + a2;
  if (__OFADD__(*result, a2))
  {
    __break(1u);
    goto LABEL_10;
  }
  v5 = *(_QWORD *)(v3 + 16);
  v6 = *(_QWORD *)(v3 + 24) >> 1;
  v7 = __OFSUB__(v6, v5);
  v8 = v6 - v5;
  if (v7)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  v9 = *(unsigned __int8 *)(v3 + 32);
  v7 = __OFADD__(v9, v8);
  v10 = v9 + v8;
  if (v7)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  if (v4 >= v9 && v10 >= v4)
  {
    *a3 = v4;
    return result;
  }
LABEL_12:
  __break(1u);
  return result;
}

uint64_t protocol witness for RandomAccessCollection.index(_:offsetBy:limitedBy:) in conformance _ShapeStyle_Pack.Slice@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t result;
  char v6;

  result = specialized RandomAccessCollection.index(_:offsetBy:limitedBy:)(*a1, a2, *a3);
  *(_QWORD *)a4 = result;
  *(_BYTE *)(a4 + 8) = v6 & 1;
  return result;
}

uint64_t *protocol witness for Collection.index(after:) in conformance _ShapeStyle_Pack.Slice@<X0>(uint64_t *result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = *(_QWORD *)(v2 + 16);
  v4 = *(_QWORD *)(v2 + 24) >> 1;
  v5 = __OFSUB__(v4, v3);
  v6 = v4 - v3;
  if (v5)
  {
    __break(1u);
    goto LABEL_10;
  }
  v7 = *(unsigned __int8 *)(v2 + 32);
  v8 = v7 + v6;
  if (__OFADD__(v7, v6))
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  v9 = *result;
  if (*result >= v7 && v9 < v8)
  {
    *a2 = v9 + 1;
    return result;
  }
LABEL_11:
  __break(1u);
  return result;
}

uint64_t *protocol witness for Collection.formIndex(after:) in conformance _ShapeStyle_Pack.Slice(uint64_t *result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  BOOL v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *(_QWORD *)(v1 + 16);
  v3 = *(_QWORD *)(v1 + 24) >> 1;
  v4 = __OFSUB__(v3, v2);
  v5 = v3 - v2;
  if (v4)
  {
    __break(1u);
    goto LABEL_10;
  }
  v6 = *(unsigned __int8 *)(v1 + 32);
  v7 = v6 + v5;
  if (__OFADD__(v6, v5))
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  v8 = *result;
  if (*result >= v6 && v8 < v7)
  {
    *result = v8 + 1;
    return result;
  }
LABEL_11:
  __break(1u);
  return result;
}

__n128 protocol witness for Sequence.makeIterator() in conformance _ShapeStyle_Pack.Slice@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  __n128 result;
  __int128 v4;

  v2 = *(unsigned __int8 *)(v1 + 32);
  result = *(__n128 *)v1;
  v4 = *(_OWORD *)(v1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)v1;
  *(_OWORD *)(a1 + 16) = v4;
  *(_BYTE *)(a1 + 32) = v2;
  *(_QWORD *)(a1 + 40) = v2;
  return result;
}

uint64_t protocol witness for Collection.count.getter in conformance _ShapeStyle_Pack.Slice()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  BOOL v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(_QWORD *)(v0 + 24) >> 1;
  v3 = __OFSUB__(v2, v1);
  v4 = v2 - v1;
  if (v3)
  {
    __break(1u);
    goto LABEL_6;
  }
  v5 = *(unsigned __int8 *)(v0 + 32);
  v3 = __OFADD__(v5, v4);
  v6 = v5 + v4;
  if (v3)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  result = v6 - v5;
  if (v6 < v5)
LABEL_7:
    __break(1u);
  return result;
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance _ShapeStyle_Pack.Slice()
{
  uint64_t v0;
  uint64_t v1;

  v1 = specialized _copyCollectionToContiguousArray<A>(_:)(v0);
  swift_unknownObjectRelease();
  return v1;
}

Swift::Void __swiftcall _ShapeStyle_Pack.adjustLevelIndices(of:by:)(SwiftUI::_ShapeStyle_Name of, Swift::Int by)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  unsigned int v6;
  unint64_t v7;
  _QWORD *v8;
  unint64_t v9;
  unsigned __int8 *v10;
  unsigned int v11;
  uint64_t v12;
  BOOL v13;
  Swift::Int v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  unsigned __int8 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v3 = (_QWORD *)*v2;
  v4 = *(_QWORD *)(*v2 + 16);
  if (v4)
  {
    v6 = *(unsigned __int8 *)of;
    v21 = v2;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
LABEL_17:
      v3 = specialized _ArrayBuffer._consumeAndCreateNew()(v3);
    v7 = 0;
    v8 = v3 + 4;
    while (1)
    {
      while (1)
      {
        v9 = v3[2];
        if (v7 >= v9)
        {
          __break(1u);
LABEL_16:
          __break(1u);
          goto LABEL_17;
        }
        v10 = (unsigned __int8 *)&v8[15 * v7];
        v11 = *v10;
        if (v11 >= v6)
          break;
LABEL_5:
        if ((uint64_t)++v7 >= v4)
          goto LABEL_13;
      }
      if (v6 < v11)
        goto LABEL_13;
      v12 = v10[1];
      v13 = __OFADD__(v12, by);
      v14 = v12 + by;
      if (v13)
        goto LABEL_16;
      if ((v14 & 0x8000000000000000) == 0)
      {
        v10[1] = v14;
        goto LABEL_5;
      }
      v15 = v9 - 1;
      v16 = v9 - 1 - v7;
      if (v16 < 0)
      {
        _fatalErrorMessage(_:_:file:line:flags:)();
        __break(1u);
        return;
      }
      v17 = &v8[15 * v7];
      v25 = *((_BYTE *)v17 + 88);
      v24 = v17[10];
      v23 = v17[9];
      v30 = v17[8];
      v31 = v17[12];
      v28 = v17[6];
      v29 = v17[7];
      v27 = v17[5];
      v18 = v17[3];
      v22 = (void *)v17[4];
      v20 = v17[1];
      v19 = v17[2];
      v26 = *((_BYTE *)v17 + 104);
      memmove(v10, v10 + 120, 120 * v16);
      v3[2] = v15;
      outlined consume of _ShapeStyle_Pack.Fill(v20, v19, v18, v22, v27, v28, v29, v30, v23, v24, v25);
      outlined consume of GraphicsBlendMode?(v31, v26);
      swift_bridgeObjectRelease();
      if ((uint64_t)v7 >= --v4)
      {
LABEL_13:
        *v21 = v3;
        return;
      }
    }
  }
}

uint64_t _ShapeStyle_Pack.createOpacities(count:name:environment:)(uint64_t a1, char *a2, uint64_t *a3)
{
  uint64_t *v3;
  char v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  float v23;
  uint64_t v24;
  unsigned __int8 v25;
  uint64_t v26;
  float v27;
  uint64_t v28;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  float *v35;
  unint64_t v36;
  float v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  float (*v45)(void);
  char v46;
  void *v47;
  uint64_t v48;
  _QWORD *v50;
  uint64_t v51;
  void *v52;
  void *v53;
  uint64_t v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  _QWORD *v65;
  uint64_t v66;
  void *v67;
  uint64_t v68;
  void *v69;
  void *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char v77;
  float v78;
  uint64_t v79;
  unsigned __int8 v80;
  uint64_t v81;

  v4 = *a2;
  v48 = *a3;
  v47 = (void *)a3[1];
  v5 = *v3;
  v66 = *v3;
  v46 = v4;
  LOBYTE(v58) = v4;
  result = _ShapeStyle_Pack.indices(of:)((unsigned __int8 *)&v58);
  v57 = result;
  if (__OFSUB__(v7, result))
    goto LABEL_31;
  if (v7 - result == 1 && a1 >= 2)
  {
    v66 = v48;
    v67 = v47;
    result = (uint64_t)EnvironmentValues.systemColorDefinition.getter();
    if (v57 < 0)
    {
LABEL_32:
      __break(1u);
      goto LABEL_33;
    }
    if ((unint64_t)v57 >= *(_QWORD *)(v5 + 16))
    {
LABEL_33:
      __break(1u);
      return result;
    }
    v10 = v5 + 120 * v57;
    v12 = *(_OWORD *)(v10 + 64);
    v11 = *(_OWORD *)(v10 + 80);
    v13 = *(_OWORD *)(v10 + 48);
    v58 = *(_OWORD *)(v10 + 32);
    v59 = v13;
    v60 = v12;
    v61 = v11;
    v14 = *(_OWORD *)(v10 + 96);
    v15 = *(_OWORD *)(v10 + 112);
    v16 = *(_OWORD *)(v10 + 128);
    v50 = *(_QWORD **)(v10 + 144);
    v65 = v50;
    v63 = v15;
    v64 = v16;
    v62 = v14;
    v54 = v59;
    v55 = (void *)*((_QWORD *)&v58 + 1);
    v17 = *((_QWORD *)&v60 + 1);
    v52 = (void *)v60;
    v53 = (void *)*((_QWORD *)&v59 + 1);
    v18 = v61;
    v20 = *((_QWORD *)&v14 + 1);
    v19 = v14;
    v21 = v15;
    v22 = BYTE8(v15);
    v23 = *((float *)&v15 + 3);
    v24 = v16;
    v25 = BYTE8(v16);
    v44 = *((_QWORD *)&v61 + 1);
    v45 = *(float (**)(void))(v9 + 16);
    outlined retain of (key: _ShapeStyle_Pack.Key, style: _ShapeStyle_Pack.Style)((uint64_t)&v58);
    v26 = 1;
    v42 = v19;
    v43 = v18;
    v40 = v21;
    v41 = v20;
    v39 = v22;
    while (1)
    {
      v51 = v26;
      v27 = v45();
      v28 = v50[2];
      outlined copy of _ShapeStyle_Pack.Fill(v55, v54, v53, v52, v17, v18, v44, v19, v20, v21, v22);
      outlined copy of GraphicsBlendMode?(v24, v25);
      result = swift_bridgeObjectRetain();
      if (v28)
        break;
LABEL_23:
      if (*(_QWORD *)(*(_QWORD *)v56 + 16) < v51 + v57)
        goto LABEL_29;
      if (v57 < -1)
        goto LABEL_30;
      LOBYTE(v66) = v46;
      BYTE1(v66) = v51;
      v67 = v55;
      v68 = v54;
      v69 = v53;
      v70 = v52;
      v19 = v42;
      v18 = v43;
      v71 = v17;
      v72 = v43;
      v73 = v44;
      v74 = v42;
      v21 = v40;
      v20 = v41;
      v75 = v41;
      v76 = v40;
      v22 = v39;
      v77 = v39;
      v78 = v23 * v27;
      v79 = v24;
      v80 = v25;
      v81 = result;
      specialized Array.replaceSubrange<A>(_:with:)(v51 + v57, v51 + v57, (uint64_t)&v66);
      v26 = v51 + 1;
      if (v51 + 1 == a1)
        return outlined release of (key: _ShapeStyle_Pack.Key, style: _ShapeStyle_Pack.Style)((uint64_t)&v58);
    }
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    result = (uint64_t)v50;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v50);
    v30 = *(_QWORD *)(result + 16);
    v31 = v28 - 1;
    if (v28 - 1 >= v30)
      v31 = *(_QWORD *)(result + 16);
    if (v31 > 1)
    {
      v33 = v31 + 1;
      v34 = v33 & 1;
      if ((v33 & 1) == 0)
        v34 = 2;
      v32 = v33 - v34;
      v35 = (float *)(result + 152);
      v36 = v32;
      do
      {
        v37 = v27 * *v35;
        *(v35 - 18) = v27 * *(v35 - 18);
        *v35 = v37;
        v35 += 36;
        v36 -= 2;
      }
      while (v36);
    }
    else
    {
      v32 = 0;
    }
    v38 = 72 * v32 + 80;
    while (v32 < v30)
    {
      ++v32;
      *(float *)(result + v38) = v27 * *(float *)(result + v38);
      v38 += 72;
      if (v28 == v32)
        goto LABEL_23;
    }
    __break(1u);
LABEL_29:
    __break(1u);
LABEL_30:
    __break(1u);
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }
  return result;
}

uint64_t _ShapeStyle_Pack.Style.isClear.getter()
{
  uint64_t v0;

  if (*(float *)(v0 + 84) != 0.0)
    __asm { BR              X11 }
  return 1;
}

#error "234D64518: call analysis failed (funcsize=22)"

unint64_t _ShapeStyle_Pack.subscript.getter(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  unint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  void *v13;
  uint64_t v14;
  unint64_t v15;
  id v19;
  unsigned __int8 v20;
  uint64_t v21;
  void *v22;
  unsigned __int8 v23;
  uint64_t v24;
  id v25;
  uint64_t v26;
  void *v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned __int8 v35;
  uint64_t v36;
  unsigned __int8 v37;

  v24 = *v2;
  v23 = 2;
  _ShapeStyle_Pack.subscript.getter(&v23, 0, (uint64_t)&v25);
  v3 = v26;
  v19 = v25;
  v4 = (unint64_t)v27;
  v5 = v28;
  v7 = v29;
  v6 = v30;
  v8 = v31;
  v9 = v32;
  v11 = v33;
  v10 = v34;
  v12 = v35;
  v21 = v36;
  v20 = v37;
  outlined copy of _ShapeStyle_Pack.Fill(v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35);
  v22 = v5;
  v13 = v5;
  v14 = v8;
  outlined consume of _ShapeStyle_Pack.Fill((unint64_t)v19, v3, v4, v13, v7, v6, v8, v9, v11, v10, v12);
  outlined consume of GraphicsBlendMode?(v21, v20);
  swift_bridgeObjectRelease();
  if (v12 == 6)
  {
    v25 = v19;
    v26 = v3;
    LOWORD(v27) = v4 & 0x101;
    BYTE2(v27) = BYTE2(v4) & 1;
    v28 = v22;
    v15 = ResolvedMulticolorStyle.resolve(name:)(a1, a2);
    outlined consume of _ShapeStyle_Pack.Fill((unint64_t)v19, v3, v4, v22, v7, v6, v14, v9, v11, v10, 6);
  }
  else
  {
    outlined consume of _ShapeStyle_Pack.Fill((unint64_t)v19, v3, v4, v22, v7, v6, v8, v9, v11, v10, v12);
    return 0;
  }
  return v15;
}

unint64_t ResolvedMulticolorStyle.resolve(name:)(uint64_t a1, uint64_t a2)
{
  unsigned int *v2;
  unsigned int v5;
  unsigned int v6;
  char v7;
  char v8;
  char v9;
  void *v10;
  unint64_t v11;
  uint64_t v13[2];
  char v14;
  char v15;
  char v16;
  void *v17;
  uint64_t v18[2];

  v6 = *v2;
  v5 = v2[1];
  v7 = *((_BYTE *)v2 + 16);
  v8 = *((_BYTE *)v2 + 17);
  v9 = *((_BYTE *)v2 + 18);
  v10 = (void *)*((_QWORD *)v2 + 3);
  if (a1 == 0xD000000000000012 && a2 == 0x80000002352E2950
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    return v6 | ((unint64_t)v5 << 32);
  }
  if (a1 == 0x6574696877 && a2 == 0xE500000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    return 0x3F8000003F800000;
  if (a1 == 0x6B63616C62 && a2 == 0xE500000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    return 0;
  v14 = v7;
  v15 = v8;
  v16 = v9;
  v17 = v10;
  ResolvedMulticolorStyle.environment.getter(v18);
  v13[0] = v18[0];
  v13[1] = v18[1];
  v11 = specialized static Color.Resolved.named(_:bundle:in:)(a1, a2, v10, v13);
  swift_release();
  swift_release();
  return v11;
}

uint64_t _ShapeStyle_Pack.Slice.allColors.getter()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  __int128 *v8;
  uint64_t v9;
  char v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  unsigned __int8 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  void *v44;
  uint64_t v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  uint64_t v53;

  v2 = *(_QWORD *)(v0 + 16);
  v1 = *(_QWORD *)(v0 + 24);
  v3 = v1 >> 1;
  v4 = (v1 >> 1) - v2;
  if (__OFSUB__(v1 >> 1, v2))
  {
LABEL_41:
    __break(1u);
    goto LABEL_42;
  }
  v5 = *(unsigned __int8 *)(v0 + 32);
  v6 = v5 + v4;
  if (!__OFADD__(v5, v4))
  {
    if (v6 == v5)
      return 1;
    v8 = *(__int128 **)(v0 + 8);
    result = swift_unknownObjectRetain();
    if (v2 <= 0 && v1 >= 2)
    {
      v9 = 1;
      v10 = 1;
      v34 = v1 >> 1;
      v35 = v2;
      v32 = v5;
      v33 = (v1 >> 1) - v2;
      v31 = v5 + v4;
      while (1)
      {
        v12 = v8[2];
        v11 = v8[3];
        v13 = v8[1];
        v46 = *v8;
        v47 = v13;
        v48 = v12;
        v49 = v11;
        v14 = v8[4];
        v15 = v8[5];
        v16 = v8[6];
        v17 = *((_QWORD *)v8 + 14);
        v53 = v17;
        v51 = v15;
        v52 = v16;
        v50 = v14;
        if (v5 + v9 - 1 >= v6)
        {
          __break(1u);
          break;
        }
        if ((v10 & 1) == 0)
          goto LABEL_31;
        if (BYTE8(v51) != 6)
        {
          if (BYTE8(v51))
            goto LABEL_31;
          v19 = (void *)*((_QWORD *)&v46 + 1);
          v18 = v47;
          v20 = *((_QWORD *)&v48 + 1);
          v44 = (void *)v48;
          v21 = v49;
          v40 = (void *)*((_QWORD *)&v47 + 1);
          v22 = *((_QWORD *)&v50 + 1);
          v23 = v51;
          v41 = v50;
          v42 = v52;
          v24 = BYTE8(v52);
          v38 = (void *)*((_QWORD *)&v46 + 1);
          v39 = v47;
          v36 = v51;
          v37 = *((_QWORD *)&v50 + 1);
          if (BYTE8(v52) == 255)
          {
            outlined retain of (key: _ShapeStyle_Pack.Key, style: _ShapeStyle_Pack.Style)((uint64_t)&v46);
            outlined copy of _ShapeStyle_Pack.Fill(v19, v18, v40, v44, v20, v21, *((uint64_t *)&v21 + 1), v41, v22, v23, 0);
            outlined copy of GraphicsBlendMode?(v42, 0xFFu);
            swift_bridgeObjectRetain();
            outlined copy of _ShapeStyle_Pack.Fill(v38, v39, v40, v44, v20, v21, *((uint64_t *)&v21 + 1), v41, v37, v36, 0);
            outlined copy of GraphicsBlendMode?(v42, 0xFFu);
            v26 = one-time initialization token for normal;
            swift_bridgeObjectRetain();
            v25 = v42;
            if (v26 != -1)
              swift_once();
            v45 = static GraphicsBlendMode.normal;
            v43 = byte_254266040;
            outlined copy of GraphicsBlendMode(static GraphicsBlendMode.normal, byte_254266040);
            v6 = v31;
            v5 = v32;
            v24 = -1;
          }
          else
          {
            v43 = BYTE8(v52) & 1;
            outlined retain of (key: _ShapeStyle_Pack.Key, style: _ShapeStyle_Pack.Style)((uint64_t)&v46);
            outlined copy of _ShapeStyle_Pack.Fill(v19, v18, v40, v44, v20, v21, *((uint64_t *)&v21 + 1), v41, v22, v23, 0);
            v25 = v42;
            outlined copy of GraphicsBlendMode?(v42, v24);
            swift_bridgeObjectRetain();
            outlined copy of _ShapeStyle_Pack.Fill(v38, v39, v40, v44, v20, v21, *((uint64_t *)&v21 + 1), v41, v37, v36, 0);
            outlined copy of GraphicsBlendMode?(v42, v24);
            swift_bridgeObjectRetain();
            v45 = v42;
            v6 = v31;
            v5 = v32;
          }
          outlined copy of GraphicsBlendMode?(v25, v24);
          outlined release of (key: _ShapeStyle_Pack.Key, style: _ShapeStyle_Pack.Style)((uint64_t)&v46);
          if (one-time initialization token for normal != -1)
            swift_once();
          v27 = static GraphicsBlendMode.normal;
          v28 = byte_254266040;
          v3 = v34;
          v2 = v35;
          if ((v43 & 1) != 0)
          {
            if (!byte_254266040)
            {
              swift_unknownObjectRetain();
LABEL_29:
              outlined copy of GraphicsBlendMode(v27, v28);
              outlined consume of GraphicsBlendMode(v45, v43);
              outlined consume of GraphicsBlendMode(v27, v28);
              outlined consume of GraphicsBlendMode(v45, v43);
LABEL_30:
              outlined release of (key: _ShapeStyle_Pack.Key, style: _ShapeStyle_Pack.Style)((uint64_t)&v46);
              result = outlined release of (key: _ShapeStyle_Pack.Key, style: _ShapeStyle_Pack.Style)((uint64_t)&v46);
              v4 = v33;
LABEL_31:
              if (v4 == v9)
              {
                swift_unknownObjectRelease();
                return 0;
              }
              v10 = 0;
              goto LABEL_33;
            }
            swift_unknownObjectRetain();
            outlined consume of GraphicsBlendMode(v45, 1);
            outlined consume of GraphicsBlendMode(v27, 1);
            if (v45 != v27)
              goto LABEL_30;
          }
          else
          {
            if ((byte_254266040 & 1) != 0)
              goto LABEL_29;
            outlined consume of GraphicsBlendMode(v45, 0);
            outlined consume of GraphicsBlendMode(v27, 0);
            if ((_DWORD)v45 != (_DWORD)v27)
              goto LABEL_30;
          }
          v29 = *(_QWORD *)(v17 + 16);
          outlined release of (key: _ShapeStyle_Pack.Key, style: _ShapeStyle_Pack.Style)((uint64_t)&v46);
          result = outlined release of (key: _ShapeStyle_Pack.Key, style: _ShapeStyle_Pack.Style)((uint64_t)&v46);
          v4 = v33;
          if (v29)
            goto LABEL_31;
        }
        if (v4 == v9)
        {
          swift_unknownObjectRelease();
          return 1;
        }
        v10 = 1;
LABEL_33:
        if (v9 >= v2)
        {
          v8 = (__int128 *)((char *)v8 + 120);
          if (v9++ < v3)
            continue;
        }
        break;
      }
    }
    __break(1u);
    goto LABEL_41;
  }
LABEL_42:
  __break(1u);
  return result;
}

void *_ShapeStyle_Pack.Style.color.getter()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  unsigned __int8 v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  unsigned __int8 v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;

  if (*(_BYTE *)(v0 + 80))
    return 0;
  v2 = *(void **)v0;
  v1 = *(_QWORD *)(v0 + 8);
  v3 = *(void **)(v0 + 16);
  v4 = *(void **)(v0 + 24);
  v6 = *(_QWORD *)(v0 + 32);
  v5 = *(_QWORD *)(v0 + 40);
  v8 = *(_QWORD *)(v0 + 48);
  v7 = *(_QWORD *)(v0 + 56);
  v9 = *(_QWORD *)(v0 + 64);
  v10 = *(_QWORD *)(v0 + 72);
  v11 = *(_QWORD *)(v0 + 88);
  v12 = *(unsigned __int8 *)(v0 + 96);
  v30 = *(_QWORD *)(v0 + 104);
  v24 = *(void **)v0;
  v29 = (unint64_t)v3;
  v25 = v10;
  v26 = v9;
  if (v12 == 255)
  {
    v23 = *(_QWORD *)(v0 + 40);
    outlined copy of _ShapeStyle_Pack.Fill(v2, v1, v3, v4, v6, v5, v8, v7, v9, v10, 0);
    v22 = v11;
    outlined copy of GraphicsBlendMode?(v11, 0xFFu);
    v17 = one-time initialization token for normal;
    swift_bridgeObjectRetain();
    if (v17 != -1)
      swift_once();
    v28 = static GraphicsBlendMode.normal;
    v27 = byte_254266040;
    outlined copy of GraphicsBlendMode(static GraphicsBlendMode.normal, byte_254266040);
    v16 = v29;
    v15 = v23;
    v14 = v22;
    v2 = v24;
    v13 = v21;
  }
  else
  {
    v27 = v12 & 1;
    v13 = *(_BYTE *)(v0 + 96);
    v14 = v11;
    v15 = v5;
    outlined copy of _ShapeStyle_Pack.Fill(v2, v1, v3, v4, v6, v5, v8, v7, v9, v10, 0);
    outlined copy of GraphicsBlendMode?(v14, v13);
    swift_bridgeObjectRetain();
    v28 = v14;
    v16 = v29;
  }
  outlined copy of GraphicsBlendMode?(v14, v13);
  outlined consume of _ShapeStyle_Pack.Fill((unint64_t)v2, v1, v16, v4, v6, v15, v8, v7, v26, v25, 0);
  outlined consume of GraphicsBlendMode?(v14, v13);
  swift_bridgeObjectRelease();
  if (one-time initialization token for normal != -1)
    swift_once();
  v18 = static GraphicsBlendMode.normal;
  v19 = byte_254266040;
  if ((v27 & 1) == 0)
  {
    if ((byte_254266040 & 1) == 0)
    {
      outlined consume of GraphicsBlendMode(v28, 0);
      outlined consume of GraphicsBlendMode(v18, 0);
      if ((_DWORD)v28 != (_DWORD)v18)
        return 0;
      goto LABEL_15;
    }
LABEL_18:
    outlined copy of GraphicsBlendMode(v18, v19);
    outlined consume of GraphicsBlendMode(v28, v27);
    outlined consume of GraphicsBlendMode(v18, v19);
    outlined consume of GraphicsBlendMode(v28, v27);
    return 0;
  }
  if (!byte_254266040)
  {
    swift_unknownObjectRetain();
    goto LABEL_18;
  }
  swift_unknownObjectRetain();
  outlined consume of GraphicsBlendMode(v28, 1);
  outlined consume of GraphicsBlendMode(v18, 1);
  if (v28 != v18)
    return 0;
LABEL_15:
  if (!*(_QWORD *)(v30 + 16))
    return v24;
  return 0;
}

uint64_t _ShapeStyle_Pack.Style.ignoresBackdrop.getter()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 v11;
  uint64_t v12;
  int v13;
  unsigned __int8 v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t result;
  unsigned __int8 v20;
  void *v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  if (*(float *)(v0 + 84) != 1.0)
    return 0;
  v2 = *(void **)v0;
  v1 = *(_QWORD *)(v0 + 8);
  v3 = *(void **)(v0 + 16);
  v4 = *(void **)(v0 + 24);
  v6 = *(_QWORD *)(v0 + 32);
  v5 = *(_QWORD *)(v0 + 40);
  v8 = *(_QWORD *)(v0 + 48);
  v7 = *(_QWORD *)(v0 + 56);
  v9 = *(_QWORD *)(v0 + 64);
  v10 = *(_QWORD *)(v0 + 72);
  v11 = *(_BYTE *)(v0 + 80);
  v12 = *(_QWORD *)(v0 + 88);
  v13 = *(unsigned __int8 *)(v0 + 96);
  v27 = v1;
  v21 = *(void **)v0;
  v26 = v9;
  v25 = v10;
  v22 = v11;
  if (v13 == 255)
  {
    outlined copy of _ShapeStyle_Pack.Fill(v2, v1, v3, v4, v6, v5, v8, v7, v9, v10, v11);
    outlined copy of GraphicsBlendMode?(v12, 0xFFu);
    v16 = one-time initialization token for normal;
    swift_bridgeObjectRetain();
    if (v16 != -1)
      swift_once();
    v24 = static GraphicsBlendMode.normal;
    v23 = byte_254266040;
    outlined copy of GraphicsBlendMode(static GraphicsBlendMode.normal, byte_254266040);
    v2 = v21;
    v15 = v22;
    v14 = v20;
  }
  else
  {
    v23 = v13 & 1;
    v14 = *(_BYTE *)(v0 + 96);
    v15 = v11;
    outlined copy of _ShapeStyle_Pack.Fill(v2, v1, v3, v4, v6, v5, v8, v7, v9, v10, v11);
    outlined copy of GraphicsBlendMode?(v12, v14);
    swift_bridgeObjectRetain();
    v24 = v12;
  }
  outlined copy of GraphicsBlendMode?(v12, v14);
  outlined consume of _ShapeStyle_Pack.Fill((unint64_t)v2, v27, (unint64_t)v3, v4, v6, v5, v8, v7, v26, v25, v15);
  outlined consume of GraphicsBlendMode?(v12, v14);
  swift_bridgeObjectRelease();
  if (one-time initialization token for normal != -1)
    swift_once();
  v17 = static GraphicsBlendMode.normal;
  v18 = byte_254266040;
  if ((v23 & 1) != 0)
  {
    if (byte_254266040)
    {
      swift_unknownObjectRetain();
      outlined consume of GraphicsBlendMode(v24, 1);
      outlined consume of GraphicsBlendMode(v17, 1);
      if (v24 == v17)
LABEL_15:
        __asm { BR              X9 }
      return 0;
    }
    swift_unknownObjectRetain();
    goto LABEL_17;
  }
  if ((byte_254266040 & 1) != 0)
  {
LABEL_17:
    outlined copy of GraphicsBlendMode(v17, v18);
    outlined consume of GraphicsBlendMode(v24, v23);
    outlined consume of GraphicsBlendMode(v17, v18);
    outlined consume of GraphicsBlendMode(v24, v23);
    return 0;
  }
  outlined consume of GraphicsBlendMode(v24, 0);
  outlined consume of GraphicsBlendMode(v17, 0);
  result = 0;
  if ((_DWORD)v24 == (_DWORD)v17)
    goto LABEL_15;
  return result;
}

uint64_t _ShapeStyle_Pack.AnimatableData.elements.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t _ShapeStyle_Pack.AnimatableData.elements.setter(uint64_t a1)
{
  _QWORD *v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v1 = a1;
  return result;
}

uint64_t (*_ShapeStyle_Pack.AnimatableData.elements.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

void static _ShapeStyle_Pack.AnimatableData.zero.getter(_QWORD *a1@<X8>)
{
  *a1 = MEMORY[0x24BEE4AF8];
}

Swift::Void __swiftcall _ShapeStyle_Pack.AnimatableData.scale(by:)(Swift::Double by)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  unint64_t v4;
  float v5;
  uint64_t v6;
  _QWORD *v7;
  float *v8;
  _QWORD *v9;
  uint64_t v10;
  char isUniquelyReferenced_nonNull_native;
  char v12;
  uint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  char v16;
  _QWORD *v17;
  _QWORD *v18;
  double v19;
  int64x2_t v20;
  float32x2_t v21;
  int8x16_t v22;
  _QWORD *v23;
  float v24;

  v2 = (_QWORD *)*v1;
  v3 = *(_QWORD *)(*v1 + 16);
  if (v3)
  {
    v23 = v1;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
LABEL_25:
      v2 = specialized _ArrayBuffer._consumeAndCreateNew()(v2);
    v4 = 0;
    v5 = by;
    v24 = v5;
    do
    {
      if (v4 == v3)
        goto LABEL_23;
      if (v4 >= v2[2])
        goto LABEL_24;
      v6 = (uint64_t)&v2[14 * v4 + 4];
      _ShapeStyle_Pack.Fill.AnimatableData.scale(by:)(by);
      v9 = *(_QWORD **)(v6 + 104);
      v8 = (float *)(v6 + 104);
      v7 = v9;
      *(v8 - 2) = *(v8 - 2) * v24;
      v10 = v9[2];
      if (v10)
      {
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        *(_QWORD *)v8 = v7;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          v7 = specialized _ArrayBuffer._consumeAndCreateNew()(v7);
          *(_QWORD *)v8 = v7;
        }
        v12 = swift_isUniquelyReferenced_nonNull_native();
        *(_QWORD *)v8 = v7;
        if ((v12 & 1) == 0)
          *(_QWORD *)v8 = specialized _ArrayBuffer._consumeAndCreateNew()(v7);
        v13 = 0;
        v14 = 0;
        while (1)
        {
          v15 = *(_QWORD **)v8;
          v16 = swift_isUniquelyReferenced_nonNull_native();
          *(_QWORD *)v8 = v15;
          if ((v16 & 1) == 0)
          {
            v15 = specialized _ArrayBuffer._consumeAndCreateNew()(v15);
            *(_QWORD *)v8 = v15;
          }
          if (v14 >= v15[2])
            break;
          v17 = &v15[v13];
          *(float *)&v15[v13 + 4] = *(float *)&v15[v13 + 4] * v24;
          if (by != 1.0 && (v17[10] & 1) == 0)
          {
            v18 = &v15[v13];
            v19 = *(double *)&v15[v13 + 9];
            v20 = *(int64x2_t *)(v17 + 5);
            v21 = vmul_n_f32((float32x2_t)vmovn_s64(v20), v24);
            v22.i64[0] = v21.u32[0];
            v22.i64[1] = v21.u32[1];
            *(int8x16_t *)(v17 + 5) = vorrq_s8((int8x16_t)vshll_n_s32((int32x2_t)vmul_n_f32((float32x2_t)vshrn_n_s64(v20, 0x20uLL), v24), 0x20uLL), v22);
            *(float64x2_t *)(v18 + 7) = vmulq_n_f64(*(float64x2_t *)&v15[v13 + 7], by);
            *((double *)v18 + 9) = v19 * by;
            *((_BYTE *)v17 + 80) = 0;
          }
          ++v14;
          v13 += 7;
          if (v10 == v14)
            goto LABEL_4;
        }
        __break(1u);
LABEL_23:
        __break(1u);
LABEL_24:
        __break(1u);
        goto LABEL_25;
      }
LABEL_4:
      ++v4;
    }
    while (v4 != v3);
    *v23 = v2;
  }
}

uint64_t static _ShapeStyle_Pack.AnimatableData.+ infix(_:_:)@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X8>)
{
  return static _ShapeStyle_Pack.AnimatableData.+ infix(_:_:)(a1, a2, (uint64_t (*)(_QWORD *, uint64_t *))specialized static _ShapeStyle_Pack.AnimatableData.+= infix(_:_:), a3);
}

uint64_t static _ShapeStyle_Pack.AnimatableData.- infix(_:_:)@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X8>)
{
  return static _ShapeStyle_Pack.AnimatableData.+ infix(_:_:)(a1, a2, (uint64_t (*)(_QWORD *, uint64_t *))specialized static _ShapeStyle_Pack.AnimatableData.-= infix(_:_:), a3);
}

uint64_t static _ShapeStyle_Pack.AnimatableData.+ infix(_:_:)@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X1>, uint64_t (*a3)(_QWORD *, uint64_t *)@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v6;
  uint64_t v8;

  v6 = *a2;
  *a4 = *a1;
  v8 = v6;
  swift_bridgeObjectRetain();
  return a3(a4, &v8);
}

double _ShapeStyle_Pack.AnimatableData.magnitudeSquared.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  double v4;
  uint64_t v5;
  float v6;
  uint64_t v7;
  double v8;
  uint64_t v9;
  double v10;
  double *v11;
  double v12;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 16);
  if (!v1)
    return 0.0;
  v2 = 0;
  v3 = *(_QWORD *)v0 + 32;
  v4 = 0.0;
  do
  {
    v5 = v3 + 112 * v2;
    v6 = *(float *)(v5 + 96);
    v7 = *(_QWORD *)(v5 + 104);
    _ShapeStyle_Pack.Fill.AnimatableData.magnitudeSquared.getter();
    v9 = *(_QWORD *)(v7 + 16);
    v10 = 0.0;
    if (v9)
    {
      v11 = (double *)(v7 + 80);
      do
      {
        v12 = 0.0;
        if ((*(_BYTE *)v11 & 1) == 0)
          v12 = *(v11 - 3) * *(v11 - 3)
              + *(v11 - 1) * *(v11 - 1)
              + *(v11 - 2) * *(v11 - 2)
              + (float)(*((float *)v11 - 8) * *((float *)v11 - 8))
              + (float)(*((float *)v11 - 7) * *((float *)v11 - 7))
              + (float)(*((float *)v11 - 9) * *((float *)v11 - 9))
              + (float)(*((float *)v11 - 10) * *((float *)v11 - 10));
        v10 = v10 + v12 + (float)(*((float *)v11 - 12) * *((float *)v11 - 12));
        v11 += 7;
        --v9;
      }
      while (v9);
    }
    ++v2;
    v4 = v4 + v8 + v10 + (float)(v6 * v6);
  }
  while (v2 != v1);
  return v4;
}

void protocol witness for static AdditiveArithmetic.zero.getter in conformance _ShapeStyle_Pack.AnimatableData(_QWORD *a1@<X8>)
{
  *a1 = MEMORY[0x24BEE4AF8];
}

uint64_t protocol witness for static AdditiveArithmetic.+ infix(_:_:) in conformance _ShapeStyle_Pack.AnimatableData@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X8>)
{
  return protocol witness for static AdditiveArithmetic.+ infix(_:_:) in conformance _ShapeStyle_Pack.AnimatableData(a1, a2, (uint64_t (*)(_QWORD *, uint64_t *))specialized static _ShapeStyle_Pack.AnimatableData.+= infix(_:_:), a3);
}

uint64_t protocol witness for static AdditiveArithmetic.- infix(_:_:) in conformance _ShapeStyle_Pack.AnimatableData@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X8>)
{
  return protocol witness for static AdditiveArithmetic.+ infix(_:_:) in conformance _ShapeStyle_Pack.AnimatableData(a1, a2, (uint64_t (*)(_QWORD *, uint64_t *))specialized static _ShapeStyle_Pack.AnimatableData.-= infix(_:_:), a3);
}

uint64_t protocol witness for static AdditiveArithmetic.+ infix(_:_:) in conformance _ShapeStyle_Pack.AnimatableData@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X1>, uint64_t (*a3)(_QWORD *, uint64_t *)@<X4>, _QWORD *a4@<X8>)
{
  uint64_t v6;
  uint64_t v8;

  v6 = *a2;
  *a4 = *a1;
  v8 = v6;
  swift_bridgeObjectRetain();
  return a3(a4, &v8);
}

void _ShapeStyle_Pack.animatableData.getter(_QWORD *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v2;
  int64_t v3;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 16);
  if (v3)
  {
    swift_bridgeObjectRetain();
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3, 0);
    __asm { BR              X9 }
  }
  *a1 = MEMORY[0x24BEE4AF8];
}

uint64_t _ShapeStyle_Pack.animatableData.setter(uint64_t *a1)
{
  uint64_t v1;
  _QWORD *v2;
  int64_t v3;
  int8x16_t *v4;
  uint64_t v5;
  int64_t v6;
  uint64_t v7;
  _QWORD *v8;
  unsigned __int8 *v9;
  unsigned int v10;
  unsigned int v11;
  unsigned __int8 *v12;
  unsigned int v13;
  unsigned int v14;
  _BOOL4 v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;
  unint64_t v32;
  unint64_t v33;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  int8x16_t v39;
  int64x2_t v40;
  int8x16_t v41;
  char v42;
  int8x16_t v43;
  uint64_t v44;
  uint64_t v45;
  float32x2_t v46;
  int32x2_t v47;
  float v48;
  float v49;
  float32x2_t v50;
  float v51;
  float32x2_t v52;
  float32x2_t v53;
  int8x16_t v54;
  uint64_t result;
  _QWORD *v56;
  _QWORD *v57;
  uint64_t v58;
  int8x16_t *v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  float v76;
  float v77;
  float32x2_t v78;
  int64x2_t v79;
  int8x16_t v80;

  v74 = *a1;
  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 16);
  if (!v3)
    return swift_bridgeObjectRelease();
  v4 = *(int8x16_t **)(v74 + 16);
  if (!v4)
    return swift_bridgeObjectRelease();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
LABEL_57:
    v2 = specialized _ArrayBuffer._consumeAndCreateNew()(v2);
  v5 = 0;
  v6 = 0;
  v7 = v74 + 32;
  v8 = v2 + 4;
  v60 = v3;
  v61 = v2;
  v59 = v4;
  v57 = v2 + 4;
  do
  {
    if (v6 < 0)
      goto LABEL_53;
    if ((unint64_t)v6 >= v2[2])
      goto LABEL_54;
    if (v5 < 0)
      goto LABEL_55;
    if ((unint64_t)v5 >= *(_QWORD *)(v74 + 16))
      goto LABEL_56;
    v9 = (unsigned __int8 *)&v8[15 * v6];
    v10 = *v9;
    v11 = v9[1];
    v12 = (unsigned __int8 *)(v7 + 112 * v5);
    v13 = *v12;
    v14 = v12[1];
    if (v10 == v13 && v11 == v14)
    {
      v18 = v7 + 112 * v5;
      v20 = *(_QWORD *)(v18 + 8);
      v19 = *(_QWORD *)(v18 + 16);
      v72 = *(_QWORD *)(v18 + 32);
      v73 = *(_QWORD *)(v18 + 24);
      v22 = *(_QWORD *)(v18 + 40);
      v21 = *(_QWORD *)(v18 + 48);
      v23 = *(_QWORD *)(v18 + 64);
      v68 = v5;
      v24 = *(_QWORD *)(v18 + 72);
      v70 = *(_QWORD *)(v18 + 80);
      v71 = *(_QWORD *)(v18 + 56);
      v69 = *(_BYTE *)(v18 + 88);
      v25 = *(_DWORD *)(v18 + 96);
      v26 = *(_QWORD *)(v18 + 104);
      outlined copy of _ShapeStyle_Pack.Fill.AnimatableData(v20, v19, v73, v72, v22, v21, v71, v23, v24, v70, v69);
      v27 = &v8[15 * v6];
      swift_bridgeObjectRetain();
      v66 = v19;
      v67 = v20;
      v3 = v60;
      v2 = v61;
      v64 = v21;
      v65 = v22;
      v62 = v24;
      v63 = v23;
      v7 = v74 + 32;
      v4 = v59;
      v28 = v68;
      _ShapeStyle_Pack.Fill.AnimatableData.set(fill:)((uint64_t)(v27 + 1));
      v31 = (_QWORD *)v27[14];
      v30 = v27 + 14;
      v29 = v31;
      *((_DWORD *)v30 - 5) = v25;
      v32 = v31[2];
      if (*(_QWORD *)(v26 + 16) >= v32)
        v33 = v32;
      else
        v33 = *(_QWORD *)(v26 + 16);
      if (v33)
      {
        swift_bridgeObjectRetain();
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        *v30 = v29;
        v58 = v6;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          v29 = specialized _ArrayBuffer._consumeAndCreateNew()(v29);
        v35 = 0;
        v2 = 0;
        v3 = 0;
        *v30 = v29;
        v75 = v33;
        while ((unint64_t)v3 < *(_QWORD *)(v26 + 16))
        {
          if ((unint64_t)v3 >= v29[2])
            goto LABEL_52;
          v40 = *(int64x2_t *)((char *)v2 + v26 + 40);
          v41 = *(int8x16_t *)((char *)v2 + v26 + 56);
          v36 = *(_QWORD *)((char *)v2 + v26 + 72);
          v42 = *((_BYTE *)v2 + v26 + 80);
          v4 = (int8x16_t *)&v29[v35];
          LODWORD(v29[v35 + 10]) = *(_DWORD *)((char *)v2 + v26 + 32);
          v43 = 0uLL;
          if ((v29[v35 + 9] & 0x10000000000) != 0 || (v42 & 1) != 0)
          {
            v36 = 0;
            v37 = 0;
            v38 = 1;
            v39 = 0uLL;
          }
          else
          {
            v80 = v41;
            v44 = v4[4].u8[12];
            v45 = v4[4].u32[2];
            if (one-time initialization token for legacyInterpolation != -1)
            {
              v79 = v40;
              swift_once();
              v40 = v79;
            }
            v78 = vmul_f32((float32x2_t)vmovn_s64(v40), (float32x2_t)0x3C0000003C000000);
            v76 = *(float *)&v40.i32[1] * 0.0078125;
            v77 = *(float *)&v40.i32[3] * 0.0078125;
            swift_beginAccess();
            if ((static Color.Resolved.legacyInterpolation & 1) != 0)
            {
              v46 = v78;
              v39 = v80;
              *(float *)v47.i32 = v76;
              v48 = v77;
            }
            else
            {
              v48 = v77;
              v49 = v78.f32[0];
              v50 = (float32x2_t)__PAIR64__(v78.u32[1], LODWORD(v76));
              if (v77 != 0.0)
              {
                v49 = v78.f32[0] * (float)(1.0 / v77);
                v50 = vmul_n_f32((float32x2_t)__PAIR64__(v78.u32[1], LODWORD(v76)), 1.0 / v77);
              }
              v51 = v49 * (float)(v49 * v49);
              v52 = vmul_f32(v50, vmul_f32(v50, v50));
              v53 = vmul_f32(v52, (float32x2_t)0x3EAEC16A40270644);
              *(float *)v47.i32 = (float)(v53.f32[0] + (float)(v51 * -1.2684)) - v53.f32[1];
              v46 = vadd_f32(vmul_lane_f32((float32x2_t)0x3FDA931E3E6C8362, v52, 1), vadd_f32(vmul_n_f32((float32x2_t)0xBB897F53408274ABLL, v51), vmul_n_f32((float32x2_t)0xBF34133EC053B18CLL, v52.f32[0])));
              v39 = v80;
            }
            v38 = 0;
            v37 = v45 | (v44 << 32);
            *(float *)&v47.i32[1] = v48;
            v54.i64[0] = v46.u32[0];
            v54.i64[1] = v46.u32[1];
            v43 = vorrq_s8((int8x16_t)vshll_n_s32(v47, 0x20uLL), v54);
            v33 = v75;
          }
          ++v3;
          v4[2] = v43;
          v4[3] = v39;
          v4[4].i64[0] = v36;
          v4[4].i32[2] = v37;
          v4[4].i8[12] = BYTE4(v37);
          v2 += 7;
          v35 += 9;
          v4[4].i8[13] = v38;
          if (v33 == v3)
          {
            *v30 = v29;
            swift_bridgeObjectRelease();
            v3 = v60;
            v2 = v61;
            v7 = v74 + 32;
            v4 = v59;
            v28 = v68;
            v6 = v58;
            goto LABEL_44;
          }
        }
        __break(1u);
LABEL_52:
        __break(1u);
LABEL_53:
        __break(1u);
LABEL_54:
        __break(1u);
LABEL_55:
        __break(1u);
LABEL_56:
        __break(1u);
        goto LABEL_57;
      }
LABEL_44:
      outlined consume of _ShapeStyle_Pack.Fill.AnimatableData(v67, v66, v73, v72, v65, v64, v71, v63, v62, v70, v69);
      swift_bridgeObjectRelease();
      ++v6;
      v5 = v28 + 1;
      v8 = v57;
      if (v6 >= v3)
        break;
    }
    else
    {
      v16 = v11 < v14 && v10 == v13;
      if (v10 >= v13 && !v16)
      {
        ++v5;
        if (v6 >= v3)
          break;
      }
      else if (++v6 >= v3)
      {
        break;
      }
    }
  }
  while (v5 < (uint64_t)v4);
  result = swift_bridgeObjectRelease();
  *v56 = v2;
  return result;
}

void _ShapeStyle_Pack.Style.animatableData.getter(uint64_t a1@<X8>)
{
  uint64_t v1;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  char v12;
  int v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  char v20;
  int64_t v21;
  uint64_t v22;
  unsigned __int8 *v23;
  char v24;
  int v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  unsigned __int8 v31;
  float v32;
  float v33;
  float v34;
  float v35;
  int8x16_t v36;
  int8x16_t v37;
  int8x16_t v38;
  int8x16_t v39;
  int8x16_t v40;
  int8x16_t v41;
  int8x16_t v42;
  int8x16_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  char v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  uint64_t v53;
  int8x16_t v54;
  int8x16_t v55;
  int8x16_t v56;
  __int128 v57;
  __int128 v58;
  uint64_t v59;
  id v60[10];
  char v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  char v67;

  v3 = *(void **)(v1 + 8);
  v4 = *(void **)(v1 + 16);
  v5 = *(void **)(v1 + 24);
  v6 = *(void **)(v1 + 32);
  v7 = *(void **)(v1 + 40);
  v8 = *(void **)(v1 + 48);
  v9 = *(void **)(v1 + 56);
  v10 = *(void **)(v1 + 64);
  v11 = *(void **)(v1 + 72);
  v12 = *(_BYTE *)(v1 + 80);
  v13 = *(_DWORD *)(v1 + 84);
  v14 = *(_QWORD *)(v1 + 104);
  v60[0] = *(id *)v1;
  v60[1] = v3;
  v60[2] = v4;
  v60[3] = v5;
  v60[4] = v6;
  v60[5] = v7;
  v60[6] = v8;
  v60[7] = v9;
  v60[8] = v10;
  v60[9] = v11;
  v61 = v12;
  outlined copy of _ShapeStyle_Pack.Fill(v60[0], (uint64_t)v3, v4, v5, (uint64_t)v6, (uint64_t)v7, (uint64_t)v8, (uint64_t)v9, (uint64_t)v10, (uint64_t)v11, v12);
  _ShapeStyle_Pack.Fill.AnimatableData.init(_:)((uint64_t)v60);
  v15 = v62;
  v16 = v63;
  v17 = v64;
  v18 = v65;
  v19 = v66;
  v20 = v67;
  v21 = *(_QWORD *)(v14 + 16);
  v22 = MEMORY[0x24BEE4AF8];
  if (v21)
  {
    v47 = v67;
    v48 = v66;
    v49 = v65;
    v50 = v64;
    v51 = v63;
    v52 = v62;
    v53 = a1;
    v59 = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v21, 0);
    v23 = (unsigned __int8 *)(v14 + 96);
    v22 = v59;
    do
    {
      v24 = *(v23 - 19);
      v25 = *((_DWORD *)v23 - 4);
      if ((v24 & 1) != 0)
      {
        v26 = 0;
        v27 = 0;
        v28 = 0;
        v29 = 0uLL;
      }
      else
      {
        v57 = *((_OWORD *)v23 - 3);
        v28 = *((_QWORD *)v23 - 4);
        v30 = *((_QWORD *)v23 - 1);
        v31 = *v23;
        v33 = *((float *)v23 - 16);
        v32 = *((float *)v23 - 15);
        v34 = *((float *)v23 - 14);
        v35 = *((float *)v23 - 13);
        outlined copy of GraphicsBlendMode?(v30, *v23);
        if (one-time initialization token for legacyInterpolation != -1)
          swift_once();
        swift_beginAccess();
        if ((static Color.Resolved.legacyInterpolation & 1) != 0)
        {
          outlined consume of GraphicsBlendMode?(v30, v31);
        }
        else
        {
          *(float *)v37.i32 = (float)(v34 * 0.051446) + (float)((float)(v33 * 0.41222) + (float)(v32 * 0.53633));
          *(float *)v36.i32 = (float)(v34 * 0.1074) + (float)((float)(v33 * 0.2119) + (float)(v32 * 0.6807));
          v54 = v37;
          v55 = v36;
          *(float *)v36.i32 = (float)(v34 * 0.62998) + (float)((float)(v33 * 0.088302) + (float)(v32 * 0.28172));
          v56 = v36;
          *(float *)v38.i32 = powf(fabsf(*(float *)v37.i32), 0.33333);
          v39.i64[0] = 0x8000000080000000;
          v39.i64[1] = 0x8000000080000000;
          v54.i32[0] = vbslq_s8(v39, v38, v54).i32[0];
          *(float *)v40.i32 = powf(fabsf(*(float *)v55.i32), 0.33333);
          v41.i64[0] = 0x8000000080000000;
          v41.i64[1] = 0x8000000080000000;
          v55.i32[0] = vbslq_s8(v41, v40, v55).i32[0];
          *(float *)v42.i32 = powf(fabsf(*(float *)v56.i32), 0.33333);
          v43.i64[0] = 0x8000000080000000;
          v43.i64[1] = 0x8000000080000000;
          v56.i32[0] = vbslq_s8(v43, v42, v56).i32[0];
          outlined consume of GraphicsBlendMode?(v30, v31);
          v33 = *(float *)v54.i32 * v35;
          v32 = *(float *)v55.i32 * v35;
          v34 = *(float *)v56.i32 * v35;
        }
        v26 = COERCE_UNSIGNED_INT(v33 * 128.0) | ((unint64_t)COERCE_UNSIGNED_INT(v32 * 128.0) << 32);
        v27 = COERCE_UNSIGNED_INT(v34 * 128.0) | ((unint64_t)COERCE_UNSIGNED_INT(v35 * 128.0) << 32);
        v29 = v57;
      }
      v45 = *(_QWORD *)(v59 + 16);
      v44 = *(_QWORD *)(v59 + 24);
      if (v45 >= v44 >> 1)
      {
        v58 = v29;
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v44 > 1, v45 + 1, 1);
        v29 = v58;
      }
      *(_QWORD *)(v59 + 16) = v45 + 1;
      v46 = v59 + 56 * v45;
      *(_DWORD *)(v46 + 32) = v25;
      v23 += 72;
      *(_QWORD *)(v46 + 40) = v26;
      *(_QWORD *)(v46 + 48) = v27;
      *(_OWORD *)(v46 + 56) = v29;
      *(_QWORD *)(v46 + 72) = v28;
      *(_BYTE *)(v46 + 80) = v24;
      --v21;
    }
    while (v21);
    a1 = v53;
    v16 = v51;
    v15 = v52;
    v18 = v49;
    v17 = v50;
    v19 = v48;
    v20 = v47;
  }
  *(_OWORD *)a1 = v15;
  *(_OWORD *)(a1 + 16) = v16;
  *(_OWORD *)(a1 + 32) = v17;
  *(_OWORD *)(a1 + 48) = v18;
  *(_OWORD *)(a1 + 64) = v19;
  *(_BYTE *)(a1 + 80) = v20;
  *(_DWORD *)(a1 + 88) = v13;
  *(_QWORD *)(a1 + 96) = v22;
}

uint64_t _ShapeStyle_Pack.Style.animatableData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  int8x16_t v24;
  int64x2_t v25;
  int8x16_t v26;
  char v27;
  int8x16_t *v28;
  int8x16_t v29;
  uint64_t v30;
  uint64_t v31;
  float32x2_t v32;
  float v33;
  int32x2_t v34;
  float v35;
  float32x2_t v36;
  float v37;
  float32x2_t v38;
  float32x2_t v39;
  int8x16_t v40;
  uint64_t result;
  char v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  float v55;
  float v56;
  float32x2_t v57;
  int64x2_t v58;
  int8x16_t v59;
  uint64_t v60;

  v2 = v1;
  v3 = *(_QWORD *)(a1 + 40);
  v4 = *(_QWORD *)(a1 + 48);
  v5 = *(_QWORD *)(a1 + 56);
  v6 = *(_QWORD *)(a1 + 64);
  v7 = *(_QWORD *)(a1 + 72);
  v8 = *(_BYTE *)(a1 + 80);
  v9 = *(_DWORD *)(a1 + 88);
  v10 = *(_QWORD *)(a1 + 96);
  v49 = *(_QWORD *)(a1 + 8);
  v50 = *(_QWORD *)a1;
  v47 = *(_QWORD *)(a1 + 24);
  v48 = *(_QWORD *)(a1 + 16);
  v46 = *(_QWORD *)(a1 + 32);
  _ShapeStyle_Pack.Fill.AnimatableData.set(fill:)(v1);
  v11 = v10;
  *(_DWORD *)(v1 + 84) = v9;
  v12 = *(_QWORD **)(v1 + 104);
  v13 = *(_QWORD *)(v10 + 16);
  if (v13 >= v12[2])
    v14 = v12[2];
  else
    v14 = v13;
  if (v14)
  {
    v42 = v8;
    v43 = v7;
    v60 = v6;
    v53 = v5;
    v54 = v4;
    v52 = v11;
    swift_bridgeObjectRetain();
    v44 = v3;
    v45 = v2;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
LABEL_25:
      v12 = specialized _ArrayBuffer._consumeAndCreateNew()(v12);
    v15 = 0;
    v16 = 0;
    v17 = 0;
    v19 = v53;
    v18 = v54;
    v20 = v52;
    v51 = v13;
    do
    {
      if (v13 == v17)
      {
        __break(1u);
LABEL_24:
        __break(1u);
        goto LABEL_25;
      }
      if (v17 >= v12[2])
        goto LABEL_24;
      v25 = *(int64x2_t *)(v20 + v16 + 40);
      v26 = *(int8x16_t *)(v20 + v16 + 56);
      v21 = *(_QWORD *)(v20 + v16 + 72);
      v27 = *(_BYTE *)(v20 + v16 + 80);
      v28 = (int8x16_t *)&v12[v15];
      LODWORD(v12[v15 + 10]) = *(_DWORD *)(v20 + v16 + 32);
      v29 = 0uLL;
      if ((v12[v15 + 9] & 0x10000000000) != 0 || (v27 & 1) != 0)
      {
        v21 = 0;
        v22 = 0;
        v23 = 1;
        v24 = 0uLL;
      }
      else
      {
        v59 = v26;
        v30 = v28[4].u8[12];
        v31 = v28[4].u32[2];
        if (one-time initialization token for legacyInterpolation != -1)
        {
          v58 = v25;
          swift_once();
          v25 = v58;
        }
        v57 = vmul_f32((float32x2_t)vmovn_s64(v25), (float32x2_t)0x3C0000003C000000);
        v55 = *(float *)&v25.i32[1] * 0.0078125;
        v56 = *(float *)&v25.i32[3] * 0.0078125;
        swift_beginAccess();
        if ((static Color.Resolved.legacyInterpolation & 1) != 0)
        {
          v20 = v52;
          v33 = v56;
          v32 = v57;
          *(float *)v34.i32 = v55;
        }
        else
        {
          v33 = v56;
          v35 = v57.f32[0];
          v36 = (float32x2_t)__PAIR64__(v57.u32[1], LODWORD(v55));
          if (v56 != 0.0)
          {
            v35 = v57.f32[0] * (float)(1.0 / v56);
            v36 = vmul_n_f32((float32x2_t)__PAIR64__(v57.u32[1], LODWORD(v55)), 1.0 / v56);
          }
          v20 = v52;
          v37 = v35 * (float)(v35 * v35);
          v38 = vmul_f32(v36, vmul_f32(v36, v36));
          v39 = vmul_f32(v38, (float32x2_t)0x3EAEC16A40270644);
          *(float *)v34.i32 = (float)(v39.f32[0] + (float)(v37 * -1.2684)) - v39.f32[1];
          v32 = vadd_f32(vmul_lane_f32((float32x2_t)0x3FDA931E3E6C8362, v38, 1), vadd_f32(vmul_n_f32((float32x2_t)0xBB897F53408274ABLL, v37), vmul_n_f32((float32x2_t)0xBF34133EC053B18CLL, v38.f32[0])));
        }
        v23 = 0;
        v22 = v31 | (v30 << 32);
        *(float *)&v34.i32[1] = v33;
        v40.i64[0] = v32.u32[0];
        v40.i64[1] = v32.u32[1];
        v29 = vorrq_s8((int8x16_t)vshll_n_s32(v34, 0x20uLL), v40);
        v19 = v53;
        v18 = v54;
        v24 = v59;
        v13 = v51;
      }
      ++v17;
      v28[2] = v29;
      v28[3] = v24;
      v28[4].i64[0] = v21;
      v28[4].i32[2] = v22;
      v28[4].i8[12] = BYTE4(v22);
      v16 += 56;
      v15 += 9;
      v28[4].i8[13] = v23;
    }
    while (v14 != v17);
    swift_bridgeObjectRelease();
    outlined consume of _ShapeStyle_Pack.Fill.AnimatableData(v50, v49, v48, v47, v46, v44, v18, v19, v60, v43, v42);
    result = swift_bridgeObjectRelease();
    *(_QWORD *)(v45 + 104) = v12;
  }
  else
  {
    outlined consume of _ShapeStyle_Pack.Fill.AnimatableData(v50, v49, v48, v47, v46, v3, v4, v5, v6, v7, v8);
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t (*_ShapeStyle_Pack.animatableData.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;

  a1[1] = v1;
  _ShapeStyle_Pack.animatableData.getter(a1);
  return _ShapeStyle_Pack.animatableData.modify;
}

uint64_t _ShapeStyle_Pack.animatableData.modify(uint64_t *a1, char a2)
{
  uint64_t v3;

  v3 = *a1;
  if ((a2 & 1) == 0)
    return _ShapeStyle_Pack.animatableData.setter(&v3);
  swift_bridgeObjectRetain();
  _ShapeStyle_Pack.animatableData.setter(&v3);
  return swift_bridgeObjectRelease();
}

uint64_t (*protocol witness for Animatable.animatableData.modify in conformance _ShapeStyle_Pack(_QWORD *a1))()
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = _ShapeStyle_Pack.animatableData.modify(v2);
  return protocol witness for Animatable.animatableData.modify in conformance LinearGradient._Paint;
}

float key path getter for _ShapeStyle_Pack.Style.animatableData : _ShapeStyle_Pack.Style@<S0>(uint64_t a1@<X8>)
{
  char v2;
  float result;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  _OWORD v7[5];
  char v8;
  float v9;
  uint64_t v10;

  _ShapeStyle_Pack.Style.animatableData.getter((uint64_t)v7);
  v2 = v8;
  result = v9;
  v4 = v10;
  v5 = v7[1];
  *(_OWORD *)a1 = v7[0];
  *(_OWORD *)(a1 + 16) = v5;
  v6 = v7[3];
  *(_OWORD *)(a1 + 32) = v7[2];
  *(_OWORD *)(a1 + 48) = v6;
  *(_OWORD *)(a1 + 64) = v7[4];
  *(_BYTE *)(a1 + 80) = v2;
  *(float *)(a1 + 88) = result;
  *(_QWORD *)(a1 + 96) = v4;
  return result;
}

uint64_t key path setter for _ShapeStyle_Pack.Style.animatableData : _ShapeStyle_Pack.Style(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;

  v3 = *(_DWORD *)(a1 + 88);
  v6 = *(_QWORD *)a1;
  v8 = *(_QWORD *)(a1 + 8);
  v7 = *(_QWORD *)(a1 + 16);
  v9 = *(_QWORD *)(a1 + 24);
  v10 = *(_QWORD *)(a1 + 32);
  v11 = *(_QWORD *)(a1 + 40);
  v12 = *(_QWORD *)(a1 + 48);
  v13 = *(_QWORD *)(a1 + 56);
  v14 = *(_QWORD *)(a1 + 64);
  v15 = *(_QWORD *)(a1 + 72);
  v16 = *(_BYTE *)(a1 + 80);
  outlined copy of _ShapeStyle_Pack.Fill.AnimatableData(*(_QWORD *)a1, v8, v7, v9, v10, v11, v12, v13, v14, v15, v16);
  swift_bridgeObjectRetain();
  _ShapeStyle_Pack.Fill.AnimatableData.set(fill:)(a2);
  *(_DWORD *)(a2 + 84) = v3;
  v4 = swift_bridgeObjectRetain();
  specialized Array<A>.animatableData.setter(v4);
  swift_bridgeObjectRelease();
  outlined consume of _ShapeStyle_Pack.Fill.AnimatableData(v6, v8, v7, v9, v10, v11, v12, v13, v14, v15, v16);
  return swift_bridgeObjectRelease();
}

void _ShapeStyle_Pack.Fill.animatableData.getter()
{
  uint64_t v0;
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  char v10;
  id v11[10];
  char v12;

  v1 = *(void **)(v0 + 8);
  v2 = *(void **)(v0 + 16);
  v3 = *(void **)(v0 + 24);
  v4 = *(void **)(v0 + 32);
  v5 = *(void **)(v0 + 40);
  v6 = *(void **)(v0 + 48);
  v7 = *(void **)(v0 + 56);
  v8 = *(void **)(v0 + 64);
  v9 = *(void **)(v0 + 72);
  v10 = *(_BYTE *)(v0 + 80);
  v11[0] = *(id *)v0;
  v11[1] = v1;
  v11[2] = v2;
  v11[3] = v3;
  v11[4] = v4;
  v11[5] = v5;
  v11[6] = v6;
  v11[7] = v7;
  v11[8] = v8;
  v11[9] = v9;
  v12 = v10;
  outlined copy of _ShapeStyle_Pack.Fill(v11[0], (uint64_t)v1, v2, v3, (uint64_t)v4, (uint64_t)v5, (uint64_t)v6, (uint64_t)v7, (uint64_t)v8, (uint64_t)v9, v10);
  _ShapeStyle_Pack.Fill.AnimatableData.init(_:)((uint64_t)v11);
}

uint64_t _ShapeStyle_Pack.Fill.animatableData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v12;
  uint64_t v13;

  v12 = *(_QWORD *)(a1 + 8);
  v13 = *(_QWORD *)a1;
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD *)(a1 + 24);
  v4 = *(_QWORD *)(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  v6 = *(_QWORD *)(a1 + 48);
  v7 = *(_QWORD *)(a1 + 56);
  v9 = *(_QWORD *)(a1 + 64);
  v8 = *(_QWORD *)(a1 + 72);
  v10 = *(_BYTE *)(a1 + 80);
  _ShapeStyle_Pack.Fill.AnimatableData.set(fill:)(v1);
  return outlined consume of _ShapeStyle_Pack.Fill.AnimatableData(v13, v12, v2, v3, v4, v5, v6, v7, v9, v8, v10);
}

void (*_ShapeStyle_Pack.Style.animatableData.modify(_QWORD *a1))(uint64_t **a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  char v13;
  int v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  char v21;
  int64_t v22;
  _QWORD *v23;
  unsigned __int8 *v24;
  char v25;
  int v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  unsigned __int8 v32;
  float v33;
  float v34;
  float v35;
  float v36;
  int8x16_t v37;
  int8x16_t v38;
  int8x16_t v39;
  int8x16_t v40;
  int8x16_t v41;
  int8x16_t v42;
  int8x16_t v43;
  int8x16_t v44;
  unint64_t v45;
  unint64_t v46;
  _QWORD *v47;
  void (*result)(uint64_t **, char);
  char v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  _QWORD *v55;
  int8x16_t v56;
  int8x16_t v57;
  int8x16_t v58;
  __int128 v59;
  __int128 v60;
  id v61[10];
  char v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  char v68;

  v3 = malloc(0xB8uLL);
  *a1 = v3;
  v3[22] = v1;
  v4 = *(void **)(v1 + 8);
  v5 = *(void **)(v1 + 16);
  v6 = *(void **)(v1 + 24);
  v7 = *(void **)(v1 + 32);
  v8 = *(void **)(v1 + 40);
  v9 = *(void **)(v1 + 48);
  v10 = *(void **)(v1 + 56);
  v11 = *(void **)(v1 + 64);
  v12 = *(void **)(v1 + 72);
  v13 = *(_BYTE *)(v1 + 80);
  v14 = *(_DWORD *)(v1 + 84);
  v15 = *(_QWORD *)(v1 + 104);
  v61[0] = *(id *)v1;
  v61[1] = v4;
  v61[2] = v5;
  v61[3] = v6;
  v61[4] = v7;
  v61[5] = v8;
  v61[6] = v9;
  v61[7] = v10;
  v61[8] = v11;
  v61[9] = v12;
  v62 = v13;
  outlined copy of _ShapeStyle_Pack.Fill(v61[0], (uint64_t)v4, v5, v6, (uint64_t)v7, (uint64_t)v8, (uint64_t)v9, (uint64_t)v10, (uint64_t)v11, (uint64_t)v12, v13);
  _ShapeStyle_Pack.Fill.AnimatableData.init(_:)((uint64_t)v61);
  v16 = v63;
  v17 = v64;
  v18 = v65;
  v19 = v66;
  v20 = v67;
  v21 = v68;
  v22 = *(_QWORD *)(v15 + 16);
  v23 = (_QWORD *)MEMORY[0x24BEE4AF8];
  if (v22)
  {
    v49 = v68;
    v50 = v67;
    v51 = v66;
    v52 = v65;
    v53 = v64;
    v54 = v63;
    v55 = v3;
    v61[0] = (id)MEMORY[0x24BEE4AF8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v22, 0);
    v24 = (unsigned __int8 *)(v15 + 96);
    v23 = v61[0];
    do
    {
      v25 = *(v24 - 19);
      v26 = *((_DWORD *)v24 - 4);
      if ((v25 & 1) != 0)
      {
        v27 = 0;
        v28 = 0;
        v29 = 0;
        v30 = 0uLL;
      }
      else
      {
        v59 = *((_OWORD *)v24 - 3);
        v29 = *((_QWORD *)v24 - 4);
        v31 = *((_QWORD *)v24 - 1);
        v32 = *v24;
        v34 = *((float *)v24 - 16);
        v33 = *((float *)v24 - 15);
        v35 = *((float *)v24 - 14);
        v36 = *((float *)v24 - 13);
        outlined copy of GraphicsBlendMode?(v31, *v24);
        if (one-time initialization token for legacyInterpolation != -1)
          swift_once();
        swift_beginAccess();
        if ((static Color.Resolved.legacyInterpolation & 1) != 0)
        {
          outlined consume of GraphicsBlendMode?(v31, v32);
        }
        else
        {
          *(float *)v38.i32 = (float)(v35 * 0.051446) + (float)((float)(v34 * 0.41222) + (float)(v33 * 0.53633));
          v56 = v38;
          *(float *)v37.i32 = (float)(v35 * 0.1074) + (float)((float)(v34 * 0.2119) + (float)(v33 * 0.6807));
          v57 = v37;
          *(float *)v37.i32 = (float)(v35 * 0.62998) + (float)((float)(v34 * 0.088302) + (float)(v33 * 0.28172));
          v58 = v37;
          *(float *)v39.i32 = powf(fabsf(*(float *)v38.i32), 0.33333);
          v40.i64[0] = 0x8000000080000000;
          v40.i64[1] = 0x8000000080000000;
          v56.i32[0] = vbslq_s8(v40, v39, v56).i32[0];
          *(float *)v41.i32 = powf(fabsf(*(float *)v57.i32), 0.33333);
          v42.i64[0] = 0x8000000080000000;
          v42.i64[1] = 0x8000000080000000;
          v57.i32[0] = vbslq_s8(v42, v41, v57).i32[0];
          *(float *)v43.i32 = powf(fabsf(*(float *)v58.i32), 0.33333);
          v44.i64[0] = 0x8000000080000000;
          v44.i64[1] = 0x8000000080000000;
          v58.i32[0] = vbslq_s8(v44, v43, v58).i32[0];
          outlined consume of GraphicsBlendMode?(v31, v32);
          v34 = *(float *)v56.i32 * v36;
          v33 = *(float *)v57.i32 * v36;
          v35 = *(float *)v58.i32 * v36;
        }
        v27 = COERCE_UNSIGNED_INT(v34 * 128.0) | ((unint64_t)COERCE_UNSIGNED_INT(v33 * 128.0) << 32);
        v28 = COERCE_UNSIGNED_INT(v35 * 128.0) | ((unint64_t)COERCE_UNSIGNED_INT(v36 * 128.0) << 32);
        v30 = v59;
      }
      v61[0] = v23;
      v46 = v23[2];
      v45 = v23[3];
      if (v46 >= v45 >> 1)
      {
        v60 = v30;
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v45 > 1, v46 + 1, 1);
        v30 = v60;
        v23 = v61[0];
      }
      v23[2] = v46 + 1;
      v47 = &v23[7 * v46];
      *((_DWORD *)v47 + 8) = v26;
      v24 += 72;
      v47[5] = v27;
      v47[6] = v28;
      *(_OWORD *)(v47 + 7) = v30;
      v47[9] = v29;
      *((_BYTE *)v47 + 80) = v25;
      --v22;
    }
    while (v22);
    v3 = v55;
    v17 = v53;
    v16 = v54;
    v19 = v51;
    v18 = v52;
    v20 = v50;
    v21 = v49;
  }
  *(_OWORD *)v3 = v16;
  *((_OWORD *)v3 + 1) = v17;
  *((_OWORD *)v3 + 2) = v18;
  *((_OWORD *)v3 + 3) = v19;
  *((_OWORD *)v3 + 4) = v20;
  *((_BYTE *)v3 + 80) = v21;
  result = _ShapeStyle_Pack.Style.animatableData.modify;
  *((_DWORD *)v3 + 22) = v14;
  v3[12] = v23;
  return result;
}

void _ShapeStyle_Pack.Style.animatableData.modify(uint64_t **a1, char a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  int8x16_t v20;
  int64x2_t v21;
  int8x16_t v22;
  char v23;
  int8x16_t *v24;
  int8x16_t v25;
  uint64_t v26;
  uint64_t v27;
  float32x2_t v28;
  float v29;
  int32x2_t v30;
  float v31;
  float32x2_t v32;
  float v33;
  float32x2_t v34;
  float32x2_t v35;
  int8x16_t v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  int8x16_t v46;
  int64x2_t v47;
  int8x16_t v48;
  char v49;
  int8x16_t *v50;
  int8x16_t v51;
  uint64_t v52;
  uint64_t v53;
  float32x2_t v54;
  float v55;
  int32x2_t v56;
  float v57;
  float32x2_t v58;
  float v59;
  float32x2_t v60;
  float32x2_t v61;
  int8x16_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t *v67;
  char v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  unint64_t v78;
  float v79;
  float v80;
  float v81;
  float v82;
  float32x2_t v83;
  int64x2_t v84;
  float32x2_t v85;
  int64x2_t v86;
  int8x16_t v87;
  int8x16_t v88;

  v2 = *a1;
  v3 = **a1;
  v4 = (*a1)[2];
  v5 = (*a1)[8];
  v6 = *((_DWORD *)*a1 + 22);
  v7 = (*a1)[12];
  v8 = (*a1)[22];
  v75 = (*a1)[5];
  v76 = (*a1)[6];
  v73 = (*a1)[3];
  v74 = (*a1)[4];
  v72 = (*a1)[1];
  if ((a2 & 1) == 0)
  {
    v70 = (*a1)[2];
    v71 = (*a1)[7];
    v37 = (*a1)[9];
    v38 = *((_BYTE *)*a1 + 80);
    _ShapeStyle_Pack.Fill.AnimatableData.set(fill:)(v8);
    *(_DWORD *)(v8 + 84) = v6;
    v10 = *(_QWORD **)(v8 + 104);
    v11 = *(_QWORD *)(v7 + 16);
    if (v11 >= v10[2])
      v12 = v10[2];
    else
      v12 = *(_QWORD *)(v7 + 16);
    if (!v12)
    {
      outlined consume of _ShapeStyle_Pack.Fill.AnimatableData(v3, v72, v70, v73, v74, v75, v76, v71, v5, v37, v38);
      goto LABEL_48;
    }
    v68 = v38;
    v69 = v37;
    v65 = v5;
    v66 = v3;
    swift_bridgeObjectRetain();
    v67 = v2;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v10 = specialized _ArrayBuffer._consumeAndCreateNew()(v10);
    v39 = 0;
    v40 = 0;
    v41 = 0;
    v42 = v7;
    v78 = v11;
    while (v11 != v41)
    {
      if (v41 >= v10[2])
        goto LABEL_53;
      v47 = *(int64x2_t *)(v42 + v39 + 40);
      v48 = *(int8x16_t *)(v42 + v39 + 56);
      v43 = *(_QWORD *)(v42 + v39 + 72);
      v49 = *(_BYTE *)(v42 + v39 + 80);
      v50 = (int8x16_t *)&v10[v40];
      LODWORD(v10[v40 + 10]) = *(_DWORD *)(v42 + v39 + 32);
      v51 = 0uLL;
      if ((v10[v40 + 9] & 0x10000000000) != 0 || (v49 & 1) != 0)
      {
        v43 = 0;
        v44 = 0;
        v45 = 1;
        v46 = 0uLL;
      }
      else
      {
        v88 = v48;
        v52 = v50[4].u8[12];
        v53 = v50[4].u32[2];
        if (one-time initialization token for legacyInterpolation != -1)
        {
          v86 = v47;
          swift_once();
          v47 = v86;
        }
        v85 = vmul_f32((float32x2_t)vmovn_s64(v47), (float32x2_t)0x3C0000003C000000);
        v80 = *(float *)&v47.i32[1] * 0.0078125;
        v82 = *(float *)&v47.i32[3] * 0.0078125;
        swift_beginAccess();
        if ((static Color.Resolved.legacyInterpolation & 1) != 0)
        {
          v42 = v7;
          v55 = v82;
          v54 = v85;
          *(float *)v56.i32 = v80;
        }
        else
        {
          v55 = v82;
          v57 = v85.f32[0];
          v58 = (float32x2_t)__PAIR64__(v85.u32[1], LODWORD(v80));
          if (v82 != 0.0)
          {
            v57 = v85.f32[0] * (float)(1.0 / v82);
            v58 = vmul_n_f32((float32x2_t)__PAIR64__(v85.u32[1], LODWORD(v80)), 1.0 / v82);
          }
          v42 = v7;
          v59 = v57 * (float)(v57 * v57);
          v60 = vmul_f32(v58, vmul_f32(v58, v58));
          v61 = vmul_f32(v60, (float32x2_t)0x3EAEC16A40270644);
          *(float *)v56.i32 = (float)(v61.f32[0] + (float)(v59 * -1.2684)) - v61.f32[1];
          v54 = vadd_f32(vmul_lane_f32((float32x2_t)0x3FDA931E3E6C8362, v60, 1), vadd_f32(vmul_n_f32((float32x2_t)0xBB897F53408274ABLL, v59), vmul_n_f32((float32x2_t)0xBF34133EC053B18CLL, v60.f32[0])));
        }
        v45 = 0;
        v44 = v53 | (v52 << 32);
        *(float *)&v56.i32[1] = v55;
        v62.i64[0] = v54.u32[0];
        v62.i64[1] = v54.u32[1];
        v51 = vorrq_s8((int8x16_t)vshll_n_s32(v56, 0x20uLL), v62);
        v46 = v88;
        v11 = v78;
      }
      ++v41;
      v50[2] = v51;
      v50[3] = v46;
      v50[4].i64[0] = v43;
      v50[4].i32[2] = v44;
      v50[4].i8[12] = BYTE4(v44);
      v40 += 9;
      v39 += 56;
      v50[4].i8[13] = v45;
      if (v12 == v41)
      {
        v2 = v67;
        v64 = v67[22];
        swift_bridgeObjectRelease();
        outlined consume of _ShapeStyle_Pack.Fill.AnimatableData(v66, v72, v70, v73, v74, v75, v76, v71, v65, v69, v68);
        swift_bridgeObjectRelease();
        *(_QWORD *)(v64 + 104) = v10;
        goto LABEL_49;
      }
    }
LABEL_52:
    __break(1u);
LABEL_53:
    __break(1u);
LABEL_54:
    v10 = specialized _ArrayBuffer._consumeAndCreateNew()(v10);
LABEL_7:
    v13 = 0;
    v14 = 0;
    v15 = 0;
    v16 = v7;
    v77 = v11;
    do
    {
      if (v11 == v15)
      {
        __break(1u);
LABEL_51:
        __break(1u);
        goto LABEL_52;
      }
      if (v15 >= v10[2])
        goto LABEL_51;
      v21 = *(int64x2_t *)(v16 + v13 + 40);
      v22 = *(int8x16_t *)(v16 + v13 + 56);
      v17 = *(_QWORD *)(v16 + v13 + 72);
      v23 = *(_BYTE *)(v16 + v13 + 80);
      v24 = (int8x16_t *)&v10[v14];
      LODWORD(v10[v14 + 10]) = *(_DWORD *)(v16 + v13 + 32);
      v25 = 0uLL;
      if ((v10[v14 + 9] & 0x10000000000) != 0 || (v23 & 1) != 0)
      {
        v17 = 0;
        v18 = 0;
        v19 = 1;
        v20 = 0uLL;
      }
      else
      {
        v87 = v22;
        v26 = v24[4].u8[12];
        v27 = v24[4].u32[2];
        if (one-time initialization token for legacyInterpolation != -1)
        {
          v84 = v21;
          swift_once();
          v21 = v84;
        }
        v83 = vmul_f32((float32x2_t)vmovn_s64(v21), (float32x2_t)0x3C0000003C000000);
        v79 = *(float *)&v21.i32[1] * 0.0078125;
        v81 = *(float *)&v21.i32[3] * 0.0078125;
        swift_beginAccess();
        if ((static Color.Resolved.legacyInterpolation & 1) != 0)
        {
          v16 = v7;
          v29 = v81;
          v28 = v83;
          *(float *)v30.i32 = v79;
        }
        else
        {
          v29 = v81;
          v31 = v83.f32[0];
          v32 = (float32x2_t)__PAIR64__(v83.u32[1], LODWORD(v79));
          if (v81 != 0.0)
          {
            v31 = v83.f32[0] * (float)(1.0 / v81);
            v32 = vmul_n_f32((float32x2_t)__PAIR64__(v83.u32[1], LODWORD(v79)), 1.0 / v81);
          }
          v16 = v7;
          v33 = v31 * (float)(v31 * v31);
          v34 = vmul_f32(v32, vmul_f32(v32, v32));
          v35 = vmul_f32(v34, (float32x2_t)0x3EAEC16A40270644);
          *(float *)v30.i32 = (float)(v35.f32[0] + (float)(v33 * -1.2684)) - v35.f32[1];
          v28 = vadd_f32(vmul_lane_f32((float32x2_t)0x3FDA931E3E6C8362, v34, 1), vadd_f32(vmul_n_f32((float32x2_t)0xBB897F53408274ABLL, v33), vmul_n_f32((float32x2_t)0xBF34133EC053B18CLL, v34.f32[0])));
        }
        v19 = 0;
        v18 = v27 | (v26 << 32);
        *(float *)&v30.i32[1] = v29;
        v36.i64[0] = v28.u32[0];
        v36.i64[1] = v28.u32[1];
        v25 = vorrq_s8((int8x16_t)vshll_n_s32(v30, 0x20uLL), v36);
        v20 = v87;
        v11 = v77;
      }
      ++v15;
      v24[2] = v25;
      v24[3] = v20;
      v24[4].i64[0] = v17;
      v24[4].i32[2] = v18;
      v24[4].i8[12] = BYTE4(v18);
      v14 += 9;
      v13 += 56;
      v24[4].i8[13] = v19;
    }
    while (v12 != v15);
    v2 = v67;
    v63 = v67[22];
    swift_bridgeObjectRelease();
    outlined consume of _ShapeStyle_Pack.Fill.AnimatableData(v66, v72, v70, v73, v74, v75, v76, v71, v65, v69, v68);
    swift_bridgeObjectRelease();
    *(_QWORD *)(v63 + 104) = v10;
    goto LABEL_46;
  }
  v9 = (*a1)[7];
  v69 = (*a1)[9];
  v68 = *((_BYTE *)*a1 + 80);
  outlined copy of _ShapeStyle_Pack.Fill.AnimatableData(v3, (*a1)[1], v4, (*a1)[3], (*a1)[4], (*a1)[5], (*a1)[6], v9, v5, v69, v68);
  swift_bridgeObjectRetain();
  _ShapeStyle_Pack.Fill.AnimatableData.set(fill:)(v8);
  *(_DWORD *)(v8 + 84) = v6;
  v10 = *(_QWORD **)(v8 + 104);
  v11 = *(_QWORD *)(v7 + 16);
  if (v11 >= v10[2])
    v12 = v10[2];
  else
    v12 = *(_QWORD *)(v7 + 16);
  if (v12)
  {
    v70 = v4;
    swift_bridgeObjectRetain();
    v66 = v3;
    v67 = v2;
    v71 = v9;
    v65 = v5;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
      goto LABEL_7;
    goto LABEL_54;
  }
  outlined consume of _ShapeStyle_Pack.Fill.AnimatableData(v3, v72, v4, v73, v74, v75, v76, v9, v5, v69, v68);
  swift_bridgeObjectRelease();
LABEL_46:
  outlined consume of _ShapeStyle_Pack.Fill.AnimatableData(*v2, v2[1], v2[2], v2[3], v2[4], v2[5], v2[6], v2[7], v2[8], v2[9], *((_BYTE *)v2 + 80));
LABEL_48:
  swift_bridgeObjectRelease();
LABEL_49:
  free(v2);
}

uint64_t protocol witness for Animatable.animatableData.setter in conformance _ShapeStyle_Pack.Style(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  int v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v14 = *(_QWORD *)(a1 + 8);
  v15 = *(_QWORD *)a1;
  v12 = *(_QWORD *)(a1 + 24);
  v13 = *(_QWORD *)(a1 + 16);
  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  v4 = *(_QWORD *)(a1 + 48);
  v5 = *(_QWORD *)(a1 + 56);
  v6 = *(_QWORD *)(a1 + 64);
  v7 = *(_QWORD *)(a1 + 72);
  v8 = *(_BYTE *)(a1 + 80);
  v9 = *(_DWORD *)(a1 + 88);
  _ShapeStyle_Pack.Fill.AnimatableData.set(fill:)(v1);
  *(_DWORD *)(v1 + 84) = v9;
  v10 = swift_bridgeObjectRetain();
  specialized Array<A>.animatableData.setter(v10);
  swift_bridgeObjectRelease();
  outlined consume of _ShapeStyle_Pack.Fill.AnimatableData(v15, v14, v13, v12, v2, v3, v4, v5, v6, v7, v8);
  return swift_bridgeObjectRelease();
}

uint64_t (*protocol witness for Animatable.animatableData.modify in conformance _ShapeStyle_Pack.Style(_QWORD *a1))()
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = _ShapeStyle_Pack.Style.animatableData.modify(v2);
  return protocol witness for Animatable.animatableData.modify in conformance LinearGradient._Paint;
}

void _ShapeStyle_Pack.Fill.AnimatableData.init(_:)(uint64_t a1)
{
  __asm { BR              X10 }
}

void sub_234D67E28(uint64_t a1@<X7>, char a2@<W8>, __n128 a3@<Q1>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  unint64_t v9;
  uint64_t v10;

  outlined consume of _ShapeStyle_Pack.Fill(a3.n128_u64[0], a3.n128_i64[1], v9, v8, v7, v6, v5, a1, v4, v10, a2);
  *(_OWORD *)v3 = 0u;
  *(_OWORD *)(v3 + 16) = 0u;
  *(_OWORD *)(v3 + 32) = 0u;
  *(_OWORD *)(v3 + 48) = 0u;
  *(_OWORD *)(v3 + 64) = 0u;
  *(_BYTE *)(v3 + 80) = 9;
}

void _ShapeStyle_Pack.Fill.AnimatableData.set(fill:)(uint64_t a1)
{
  int64x2_t *v1;
  int64x2_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  void *v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  _OWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  float32x2_t v55;
  float32x2_t v56;
  int8x16_t v57;
  char v58;
  __int32 v59;
  unint64_t v60;
  __int32 v61;
  int v62;
  int v63;
  int64x2_t v64;
  float v65;
  float v66;
  float v67;
  float v68;
  float v69;
  float v70;
  float v71;
  unint64_t v72;
  int64x2_t v73;
  unint64_t v74;
  float v75;
  float v76;
  float v77;
  float v78;
  float v79;
  float v80;
  float v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  void *v85;
  void *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  void *v97;
  unint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t *v103;
  unint64_t (*v104)();
  ValueMetadata *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  unint64_t v128;
  uint64_t v129;
  unint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  void (*v152)(int64x2_t *, uint64_t, _UNKNOWN **);
  unint64_t v153;
  void (*v154)(int64x2_t *, uint64_t, _UNKNOWN **);
  void (*v155)(int64x2_t *, uint64_t, _UNKNOWN **);
  void (*v156)(_BYTE *, uint64_t, _UNKNOWN **);
  uint64_t v157;
  int v158;
  uint64_t v159;
  uint64_t v160;
  void *v161;
  int v162;
  unint64_t v163;
  uint64_t v164;
  unint64_t v165;
  uint64_t v166;
  uint64_t v167;
  unint64_t v168;
  uint64_t v169;
  unint64_t v170;
  __int128 v171;
  void *v172;
  uint64_t v173;
  unint64_t v174;
  void *v175;
  char v176;
  void *v177;
  int64x2_t v178;
  int64x2_t v179;
  __int128 v180;
  __int128 v181;
  __int128 v182;
  __int128 v183;
  __int128 v184;
  __int128 v185;
  __int128 v186;
  char v187;
  _BYTE v188[96];
  __int128 v189;
  __int128 v190;
  char v191;
  char v192;
  _QWORD v193[10];
  char v194;
  int64x2_t v195;
  uint64_t v196;
  uint64_t v197;
  unint64_t v198;
  unint64_t v199;
  unint64_t v200;
  unint64_t v201;
  uint64_t v202;
  uint64_t v203;
  char v204;

  v3 = *v1;
  v5 = v1[1].i64[0];
  v4 = v1[1].i64[1];
  v6 = v1[2].u64[0];
  v7 = v1[2].u64[1];
  v8 = v1[3].u64[0];
  v9 = v1[3].u64[1];
  v10 = v1[4].i64[0];
  v11 = v1[4].i64[1];
  v12 = v1[5].u8[0];
  v14 = *(void **)a1;
  v13 = *(_QWORD *)(a1 + 8);
  v16 = a1 + 16;
  v15 = *(_QWORD *)(a1 + 16);
  v17 = *(void **)(a1 + 24);
  v18 = (_OWORD *)(a1 + 32);
  v19 = *(_QWORD *)(a1 + 32);
  v21 = *(_QWORD *)(a1 + 40);
  v20 = *(_QWORD *)(a1 + 48);
  v23 = *(_QWORD *)(a1 + 56);
  v22 = *(_QWORD *)(a1 + 64);
  v24 = *(_QWORD *)(a1 + 72);
  v25 = *(unsigned __int8 *)(a1 + 80);
  v193[0] = v14;
  v193[1] = v13;
  v193[2] = v15;
  v193[3] = v17;
  v193[4] = v19;
  v193[5] = v21;
  v193[6] = v20;
  v193[7] = v23;
  v193[8] = v22;
  v193[9] = v24;
  v194 = v25;
  v195 = v3;
  v196 = v5;
  v197 = v4;
  v198 = v6;
  v199 = v7;
  v200 = v8;
  v201 = v9;
  v202 = v10;
  v203 = v11;
  v204 = v12;
  switch(v25)
  {
    case 0:
      if (v12)
      {
        if (v12 != 9
          || vorrq_s8((int8x16_t)vdupq_laneq_s64(v3, 1), (int8x16_t)v3).u64[0] | v5 | v4 | v6 | v7 | v8 | v9 | v10 | v11)
        {
          goto LABEL_18;
        }
        outlined release of (_ShapeStyle_Pack.Fill, _ShapeStyle_Pack.Fill.AnimatableData)((uint64_t)v193, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))outlined consume of _ShapeStyle_Pack.Fill, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))outlined consume of _ShapeStyle_Pack.Fill.AnimatableData);
        *(_OWORD *)a1 = 0u;
        *(_OWORD *)(a1 + 16) = 0u;
        *(_OWORD *)(a1 + 32) = 0u;
        *(_OWORD *)(a1 + 48) = 0u;
        *(_OWORD *)(a1 + 64) = 0u;
        *(_BYTE *)(a1 + 80) = 0;
      }
      else
      {
        v64 = v3;
        if (one-time initialization token for legacyInterpolation != -1)
          swift_once();
        v65 = *(float *)v64.i32 * 0.0078125;
        v66 = *(float *)&v64.i32[1] * 0.0078125;
        v67 = *(float *)&v64.i32[2] * 0.0078125;
        v68 = *(float *)&v64.i32[3] * 0.0078125;
        swift_beginAccess();
        if (static Color.Resolved.legacyInterpolation != 1)
        {
          v192 = 2;
          v179.i64[0] = __PAIR64__(LODWORD(v66), LODWORD(v65));
          *(float *)&v179.i32[2] = *(float *)&v64.i32[2] * 0.0078125;
          *(float *)&v179.i32[3] = *(float *)&v64.i32[3] * 0.0078125;
          v65 = ResolvedGradient.ColorSpace.convertOut(_:)((float *)v179.i32);
          v66 = v69;
          v67 = v70;
          v68 = v71;
        }
        outlined release of (_ShapeStyle_Pack.Fill, _ShapeStyle_Pack.Fill.AnimatableData)((uint64_t)v193, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))outlined consume of _ShapeStyle_Pack.Fill, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))outlined consume of _ShapeStyle_Pack.Fill.AnimatableData);
        *(_QWORD *)a1 = LODWORD(v65) | ((unint64_t)LODWORD(v66) << 32);
        *(_QWORD *)(a1 + 8) = LODWORD(v67) | ((unint64_t)LODWORD(v68) << 32);
        *(_OWORD *)v16 = 0u;
        *(_OWORD *)(v16 + 16) = 0u;
        *(_OWORD *)(v16 + 32) = 0u;
        *(_OWORD *)(v16 + 48) = 0u;
        *(_BYTE *)(v16 + 64) = 0;
      }
      return;
    case 1:
      v175 = v14;
      v159 = v22;
      v160 = v13;
      v164 = v21;
      v167 = v20;
      v169 = v23;
      v161 = (void *)v15;
      v172 = v17;
      v157 = v24;
      switch(v12)
      {
        case 2:
          v179 = v3;
          v140 = v3.i64[1];
          v146 = v3.i64[0];
          *(_QWORD *)&v180 = v5;
          *((_QWORD *)&v180 + 1) = v4;
          *(_QWORD *)&v181 = v6;
          BYTE8(v181) = v7;
          v182 = 0u;
          v183 = 0u;
          v184 = 0u;
          v185 = 0u;
          v186 = 0u;
          v187 = 0;
          v152 = *(void (**)(int64x2_t *, uint64_t, _UNKNOWN **))(*(_QWORD *)v14 + 136);
          v26 = v7;
          v27 = v8;
          v28 = v9;
          v29 = v6;
          outlined copy of _ShapeStyle_Pack.Fill.AnimatableData(v3.i64[0], v3.i64[1], v5, v4, v6, v7, v8, v9, v10, v11, 2);
          outlined copy of _ShapeStyle_Pack.Fill.AnimatableData(v146, v140, v5, v4, v29, v26, v27, v28, v10, v11, 2);
          outlined copy of _ShapeStyle_Pack.Fill(v175, v160, v161, v172, v19, v164, v167, v169, v159, v24, 1);
          type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for _ShapeStyle_Pack.Fill.AnimatableData.PaintSetVisitor<LinearGradient._Paint>, (uint64_t (*)(void))lazy protocol witness table accessor for type LinearGradient._Paint and conformance LinearGradient._Paint, (uint64_t)&type metadata for LinearGradient._Paint, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _ShapeStyle_Pack.Fill.AnimatableData.PaintSetVisitor);
          v152(&v179, v30, &protocol witness table for _ShapeStyle_Pack.Fill.AnimatableData.PaintSetVisitor<A>);
          outlined consume of _ShapeStyle_Pack.Fill((unint64_t)v175, v160, (unint64_t)v161, v172, v19, v164, v167, v169, v159, v24, 1);
          outlined release of (_ShapeStyle_Pack.Fill, _ShapeStyle_Pack.Fill.AnimatableData)((uint64_t)v193, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))outlined consume of _ShapeStyle_Pack.Fill, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))outlined consume of _ShapeStyle_Pack.Fill.AnimatableData);
          v31 = *((_QWORD *)&v182 + 1);
          v32 = v182;
          v34 = *((_QWORD *)&v183 + 1);
          v33 = v183;
          v36 = *((_QWORD *)&v184 + 1);
          v35 = v184;
          v38 = *((_QWORD *)&v185 + 1);
          v37 = v185;
          v173 = *((_QWORD *)&v186 + 1);
          v39 = v186;
          v176 = v187;
          *(int64x2_t *)v188 = v179;
          *(_OWORD *)&v188[16] = v180;
          *(_QWORD *)&v188[32] = v181;
          v188[40] = BYTE8(v181);
          *(_OWORD *)&v188[48] = v182;
          *(_OWORD *)&v188[64] = v183;
          *(_OWORD *)&v188[80] = v184;
          v189 = v185;
          v190 = v186;
          v191 = v187;
          outlined copy of _ShapeStyle_Pack.Fill((id)v182, *((uint64_t *)&v182 + 1), (void *)v183, *((void **)&v183 + 1), v184, *((uint64_t *)&v184 + 1), v185, *((uint64_t *)&v185 + 1), v186, *((uint64_t *)&v186 + 1), v187);
          outlined release of _ShapeStyle_Pack.Fill.AnimatableData.PaintSetVisitor<LinearGradient._Paint>((uint64_t)v188);
          goto LABEL_36;
        case 3:
          v179 = v3;
          v141 = v3.i64[1];
          v147 = v3.i64[0];
          *(_QWORD *)&v180 = v5;
          BYTE8(v180) = v4;
          *(_QWORD *)&v181 = v6;
          *((_QWORD *)&v181 + 1) = v7;
          v182 = 0u;
          v183 = 0u;
          v184 = 0u;
          v185 = 0u;
          v186 = 0u;
          v187 = 0;
          v154 = *(void (**)(int64x2_t *, uint64_t, _UNKNOWN **))(*(_QWORD *)v14 + 136);
          v90 = v7;
          v91 = v8;
          v92 = v9;
          v93 = v6;
          outlined copy of _ShapeStyle_Pack.Fill.AnimatableData(v3.i64[0], v3.i64[1], v5, v4, v6, v7, v8, v9, v10, v11, 3);
          outlined copy of _ShapeStyle_Pack.Fill.AnimatableData(v147, v141, v5, v4, v93, v90, v91, v92, v10, v11, 3);
          v95 = v159;
          v94 = v160;
          v137 = v24;
          v97 = v172;
          v96 = (unint64_t)v175;
          v98 = (unint64_t)v161;
          v99 = v19;
          v101 = v164;
          v100 = v167;
          v102 = v169;
          outlined copy of _ShapeStyle_Pack.Fill(v175, v160, v161, v172, v19, v164, v167, v169, v159, v137, 1);
          v103 = (unint64_t *)&lazy cache variable for type metadata for _ShapeStyle_Pack.Fill.AnimatableData.PaintSetVisitor<RadialGradient._Paint>;
          v104 = lazy protocol witness table accessor for type RadialGradient._Paint and conformance RadialGradient._Paint;
          v105 = &type metadata for RadialGradient._Paint;
          goto LABEL_34;
        case 4:
          v179 = v3;
          v142 = v3.i64[1];
          v148 = v3.i64[0];
          *(_QWORD *)&v180 = v5;
          BYTE8(v180) = v4;
          *(_QWORD *)&v181 = v6;
          *((_QWORD *)&v181 + 1) = v7;
          v182 = 0u;
          v183 = 0u;
          v184 = 0u;
          v185 = 0u;
          v186 = 0u;
          v187 = 0;
          v154 = *(void (**)(int64x2_t *, uint64_t, _UNKNOWN **))(*(_QWORD *)v14 + 136);
          v106 = v7;
          v107 = v8;
          v108 = v9;
          v109 = v6;
          outlined copy of _ShapeStyle_Pack.Fill.AnimatableData(v3.i64[0], v3.i64[1], v5, v4, v6, v7, v8, v9, v10, v11, 4);
          outlined copy of _ShapeStyle_Pack.Fill.AnimatableData(v148, v142, v5, v4, v109, v106, v107, v108, v10, v11, 4);
          v95 = v159;
          v94 = v160;
          v138 = v24;
          v97 = v172;
          v96 = (unint64_t)v175;
          v98 = (unint64_t)v161;
          v99 = v19;
          v101 = v164;
          v100 = v167;
          v102 = v169;
          outlined copy of _ShapeStyle_Pack.Fill(v175, v160, v161, v172, v19, v164, v167, v169, v159, v138, 1);
          v103 = (unint64_t *)&lazy cache variable for type metadata for _ShapeStyle_Pack.Fill.AnimatableData.PaintSetVisitor<EllipticalGradient._Paint>;
          v104 = lazy protocol witness table accessor for type EllipticalGradient._Paint and conformance EllipticalGradient._Paint;
          v105 = &type metadata for EllipticalGradient._Paint;
          goto LABEL_34;
        case 5:
          v179 = v3;
          v143 = v3.i64[1];
          v149 = v3.i64[0];
          *(_QWORD *)&v180 = v5;
          BYTE8(v180) = v4;
          *(_QWORD *)&v181 = v6;
          *((_QWORD *)&v181 + 1) = v7;
          v182 = 0u;
          v183 = 0u;
          v184 = 0u;
          v185 = 0u;
          v186 = 0u;
          v187 = 0;
          v154 = *(void (**)(int64x2_t *, uint64_t, _UNKNOWN **))(*(_QWORD *)v14 + 136);
          v110 = v7;
          v111 = v8;
          v112 = v9;
          v113 = v6;
          outlined copy of _ShapeStyle_Pack.Fill.AnimatableData(v3.i64[0], v3.i64[1], v5, v4, v6, v7, v8, v9, v10, v11, 5);
          outlined copy of _ShapeStyle_Pack.Fill.AnimatableData(v149, v143, v5, v4, v113, v110, v111, v112, v10, v11, 5);
          v95 = v159;
          v94 = v160;
          v139 = v24;
          v97 = v172;
          v96 = (unint64_t)v175;
          v98 = (unint64_t)v161;
          v99 = v19;
          v101 = v164;
          v100 = v167;
          v102 = v169;
          outlined copy of _ShapeStyle_Pack.Fill(v175, v160, v161, v172, v19, v164, v167, v169, v159, v139, 1);
          v103 = (unint64_t *)&lazy cache variable for type metadata for _ShapeStyle_Pack.Fill.AnimatableData.PaintSetVisitor<AngularGradient._Paint>;
          v104 = lazy protocol witness table accessor for type AngularGradient._Paint and conformance AngularGradient._Paint;
          v105 = &type metadata for AngularGradient._Paint;
LABEL_34:
          type metadata accessor for FontBox<Font.SystemProvider>(0, v103, (uint64_t (*)(void))v104, (uint64_t)v105, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _ShapeStyle_Pack.Fill.AnimatableData.PaintSetVisitor);
          v154(&v179, v114, &protocol witness table for _ShapeStyle_Pack.Fill.AnimatableData.PaintSetVisitor<A>);
          outlined consume of _ShapeStyle_Pack.Fill(v96, v94, v98, v97, v99, v101, v100, v102, v95, v157, 1);
          outlined release of (_ShapeStyle_Pack.Fill, _ShapeStyle_Pack.Fill.AnimatableData)((uint64_t)v193, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))outlined consume of _ShapeStyle_Pack.Fill, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))outlined consume of _ShapeStyle_Pack.Fill.AnimatableData);
          v31 = *((_QWORD *)&v182 + 1);
          v32 = v182;
          v34 = *((_QWORD *)&v183 + 1);
          v33 = v183;
          v36 = *((_QWORD *)&v184 + 1);
          v35 = v184;
          v38 = *((_QWORD *)&v185 + 1);
          v37 = v185;
          v39 = v186;
          *(int64x2_t *)v188 = v179;
          *(_QWORD *)&v188[16] = v180;
          v188[24] = BYTE8(v180);
          *(_OWORD *)&v188[32] = v181;
          *(_OWORD *)&v188[48] = v182;
          *(_OWORD *)&v188[64] = v183;
          *(_OWORD *)&v188[80] = v184;
          v189 = v185;
          v190 = v186;
          v173 = *((_QWORD *)&v186 + 1);
          v176 = v187;
          v191 = v187;
          outlined copy of _ShapeStyle_Pack.Fill((id)v182, *((uint64_t *)&v182 + 1), (void *)v183, *((void **)&v183 + 1), v184, *((uint64_t *)&v184 + 1), v185, *((uint64_t *)&v185 + 1), v186, *((uint64_t *)&v186 + 1), v187);
          outlined release of _ShapeStyle_Pack.Fill.AnimatableData.PaintSetVisitor<AngularGradient._Paint>((uint64_t)v188);
          goto LABEL_36;
        case 6:
          v144 = v3.i64[1];
          v150 = v3.i64[0];
          v179 = v3;
          *(_QWORD *)&v180 = v5;
          *((_QWORD *)&v180 + 1) = v4;
          v181 = 0u;
          v182 = 0u;
          v183 = 0u;
          v184 = 0u;
          v185 = 0u;
          LOBYTE(v186) = 0;
          v155 = *(void (**)(int64x2_t *, uint64_t, _UNKNOWN **))(*(_QWORD *)v14 + 136);
          v115 = v7;
          v116 = v8;
          v117 = v9;
          v118 = v6;
          outlined copy of _ShapeStyle_Pack.Fill.AnimatableData(v3.i64[0], v3.i64[1], v5, v4, v6, v7, v8, v9, v10, v11, 6);
          outlined copy of _ShapeStyle_Pack.Fill.AnimatableData(v150, v144, v5, v4, v118, v115, v116, v117, v10, v11, 6);
          outlined copy of _ShapeStyle_Pack.Fill(v175, v160, v161, v172, v19, v164, v167, v169, v159, v24, 1);
          type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for _ShapeStyle_Pack.Fill.AnimatableData.PaintSetVisitor<MeshGradient._Paint>, (uint64_t (*)(void))lazy protocol witness table accessor for type MeshGradient._Paint and conformance MeshGradient._Paint, (uint64_t)&type metadata for MeshGradient._Paint, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _ShapeStyle_Pack.Fill.AnimatableData.PaintSetVisitor);
          v155(&v179, v119, &protocol witness table for _ShapeStyle_Pack.Fill.AnimatableData.PaintSetVisitor<A>);
          outlined consume of _ShapeStyle_Pack.Fill((unint64_t)v175, v160, (unint64_t)v161, v172, v19, v164, v167, v169, v159, v24, 1);
          outlined release of (_ShapeStyle_Pack.Fill, _ShapeStyle_Pack.Fill.AnimatableData)((uint64_t)v193, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))outlined consume of _ShapeStyle_Pack.Fill, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))outlined consume of _ShapeStyle_Pack.Fill.AnimatableData);
          v31 = *((_QWORD *)&v181 + 1);
          v32 = v181;
          v34 = *((_QWORD *)&v182 + 1);
          v33 = v182;
          v36 = *((_QWORD *)&v183 + 1);
          v35 = v183;
          v38 = *((_QWORD *)&v184 + 1);
          v37 = v184;
          v173 = *((_QWORD *)&v185 + 1);
          v39 = v185;
          v176 = v186;
          *(int64x2_t *)v188 = v179;
          *(_OWORD *)&v188[16] = v180;
          *(_OWORD *)&v188[32] = v181;
          *(_OWORD *)&v188[48] = v182;
          *(_OWORD *)&v188[64] = v183;
          *(_OWORD *)&v188[80] = v184;
          v189 = v185;
          LOBYTE(v190) = v186;
          outlined copy of _ShapeStyle_Pack.Fill((id)v181, *((uint64_t *)&v181 + 1), (void *)v182, *((void **)&v182 + 1), v183, *((uint64_t *)&v183 + 1), v184, *((uint64_t *)&v184 + 1), v185, *((uint64_t *)&v185 + 1), v186);
          outlined release of _ShapeStyle_Pack.Fill.AnimatableData.PaintSetVisitor<MeshGradient._Paint>((uint64_t)v188);
LABEL_36:
          *(_QWORD *)a1 = v32;
          *(_QWORD *)(a1 + 8) = v31;
          *(_QWORD *)(a1 + 16) = v33;
          *(_QWORD *)(a1 + 24) = v34;
          *(_QWORD *)(a1 + 32) = v35;
          *(_QWORD *)(a1 + 40) = v36;
          *(_QWORD *)(a1 + 48) = v37;
          *(_QWORD *)(a1 + 56) = v38;
          *(_QWORD *)(a1 + 64) = v39;
          *(_QWORD *)(a1 + 72) = v173;
          break;
        case 7:
          *(_QWORD *)v188 = v3.i64[0];
          memset(&v188[8], 0, 81);
          v151 = v3.i64[0];
          v156 = *(void (**)(_BYTE *, uint64_t, _UNKNOWN **))(*(_QWORD *)v14 + 136);
          v145 = v3.i64[1];
          v120 = v7;
          v121 = v8;
          v122 = v9;
          v123 = v6;
          outlined copy of _ShapeStyle_Pack.Fill.AnimatableData(v3.i64[0], v3.i64[1], v5, v4, v6, v7, v8, v9, v10, v11, 7);
          outlined copy of _ShapeStyle_Pack.Fill.AnimatableData(v151, v145, v5, v4, v123, v120, v121, v122, v10, v11, 7);
          outlined copy of _ShapeStyle_Pack.Fill(v175, v160, v161, v172, v19, v164, v167, v169, v159, v24, 1);
          type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for _ShapeStyle_Pack.Fill.AnimatableData.PaintSetVisitor<Shader.ResolvedShader>, (uint64_t (*)(void))lazy protocol witness table accessor for type Shader.ResolvedShader and conformance Shader.ResolvedShader, (uint64_t)&type metadata for Shader.ResolvedShader, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _ShapeStyle_Pack.Fill.AnimatableData.PaintSetVisitor);
          v156(v188, v124, &protocol witness table for _ShapeStyle_Pack.Fill.AnimatableData.PaintSetVisitor<A>);
          outlined consume of _ShapeStyle_Pack.Fill((unint64_t)v175, v160, (unint64_t)v161, v172, v19, v164, v167, v169, v159, v24, 1);
          outlined release of (_ShapeStyle_Pack.Fill, _ShapeStyle_Pack.Fill.AnimatableData)((uint64_t)v193, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))outlined consume of _ShapeStyle_Pack.Fill, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))outlined consume of _ShapeStyle_Pack.Fill.AnimatableData);
          v125 = *(_OWORD *)&v188[16];
          v126 = *(_OWORD *)&v188[32];
          v127 = *(_OWORD *)&v188[48];
          v171 = *(_OWORD *)&v188[64];
          LOBYTE(v120) = v188[88];
          v128 = *(_QWORD *)&v188[8];
          v166 = *(_QWORD *)&v188[24];
          v176 = v188[88];
          v129 = *(_QWORD *)&v188[80];
          outlined copy of _ShapeStyle_Pack.Fill(*(id *)&v188[8], *(uint64_t *)&v188[16], *(void **)&v188[24], *(void **)&v188[32], *(uint64_t *)&v188[40], *(uint64_t *)&v188[48], *(uint64_t *)&v188[56], *(uint64_t *)&v188[64], *(uint64_t *)&v188[72], *(uint64_t *)&v188[80], v188[88]);
          swift_bridgeObjectRelease();
          outlined consume of _ShapeStyle_Pack.Fill(v128, v125, *((unint64_t *)&v125 + 1), (void *)v126, *((uint64_t *)&v126 + 1), v127, *((uint64_t *)&v127 + 1), v171, *((uint64_t *)&v171 + 1), v129, v120);
          *(_QWORD *)a1 = v128;
          *(_QWORD *)(a1 + 8) = v125;
          *(_QWORD *)(a1 + 16) = v166;
          *(_OWORD *)(a1 + 24) = v126;
          *(_OWORD *)(a1 + 40) = v127;
          *(_OWORD *)(a1 + 56) = v171;
          *(_QWORD *)(a1 + 72) = v129;
          break;
        default:
          v83 = v22;
          v84 = v13;
          v133 = v10;
          v136 = v11;
          v85 = (void *)v15;
          v86 = v17;
          v87 = v21;
          v88 = v20;
          v89 = v23;
          outlined copy of _ShapeStyle_Pack.Fill.AnimatableData(v3.i64[0], v3.i64[1], v5, v4, v6, v7, v8, v9, v133, v136, v12);
          outlined copy of _ShapeStyle_Pack.Fill(v175, v84, v85, v86, v19, v87, v88, v89, v83, v24, 1);
          goto LABEL_30;
      }
      v58 = v176;
      goto LABEL_41;
    case 2:
      if (v12)
      {
        v174 = (unint64_t)v17;
        if (v12 != 9
          || vorrq_s8((int8x16_t)vdupq_laneq_s64(v3, 1), (int8x16_t)v3).u64[0] | v5 | v4 | v6 | v7 | v8 | v9 | v10 | v11)
        {
          v40 = v14;
          v41 = v22;
          v42 = v13;
          v131 = v10;
          v134 = v11;
          v43 = (void *)v15;
          v44 = v21;
          v45 = v20;
          v46 = v23;
          outlined copy of _ShapeStyle_Pack.Fill.AnimatableData(v3.i64[0], v3.i64[1], v5, v4, v6, v7, v8, v9, v131, v134, v12);
          outlined copy of _ShapeStyle_Pack.Fill(v40, v42, v43, (void *)v174, v19, v44, v45, v46, v41, v24, 2);
          goto LABEL_30;
        }
        v130 = v15;
        outlined copy of Material.ID(v15);
        outlined release of (_ShapeStyle_Pack.Fill, _ShapeStyle_Pack.Fill.AnimatableData)((uint64_t)v193, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))outlined consume of _ShapeStyle_Pack.Fill, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))outlined consume of _ShapeStyle_Pack.Fill.AnimatableData);
        v82 = v174 & 0xFFFFFFFFFFFFLL;
        *(_QWORD *)a1 = 0;
        *(_QWORD *)(a1 + 8) = 0;
        *(_QWORD *)(a1 + 16) = v130;
      }
      else
      {
        v72 = (unint64_t)v17;
        v73 = v3;
        v74 = v15;
        outlined copy of Material.ID(v15);
        if (one-time initialization token for legacyInterpolation != -1)
          swift_once();
        v75 = *(float *)v73.i32 * 0.0078125;
        v76 = *(float *)&v73.i32[1] * 0.0078125;
        v77 = *(float *)&v73.i32[2] * 0.0078125;
        v78 = *(float *)&v73.i32[3] * 0.0078125;
        swift_beginAccess();
        if (static Color.Resolved.legacyInterpolation != 1)
        {
          v192 = 2;
          v179.i64[0] = __PAIR64__(LODWORD(v76), LODWORD(v75));
          *(float *)&v179.i32[2] = *(float *)&v73.i32[2] * 0.0078125;
          *(float *)&v179.i32[3] = *(float *)&v73.i32[3] * 0.0078125;
          v75 = ResolvedGradient.ColorSpace.convertOut(_:)((float *)v179.i32);
          v76 = v79;
          v77 = v80;
          v78 = v81;
        }
        outlined release of (_ShapeStyle_Pack.Fill, _ShapeStyle_Pack.Fill.AnimatableData)((uint64_t)v193, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))outlined consume of _ShapeStyle_Pack.Fill, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))outlined consume of _ShapeStyle_Pack.Fill.AnimatableData);
        *(_QWORD *)a1 = LODWORD(v75) | ((unint64_t)LODWORD(v76) << 32);
        *(_QWORD *)(a1 + 8) = LODWORD(v77) | ((unint64_t)LODWORD(v78) << 32);
        v82 = v72 & 0xFFFFFFFFFFFFLL;
        *(_QWORD *)(a1 + 16) = v74;
      }
      *(_QWORD *)(a1 + 24) = v82;
      *v18 = 0u;
      v18[1] = 0u;
      v18[2] = 0u;
      v58 = 2;
      goto LABEL_41;
    case 4:
      if (v12 != 1)
        goto LABEL_18;
      v55 = (float32x2_t)vmovn_s64(v3);
      v178 = v3;
      outlined release of (_ShapeStyle_Pack.Fill, _ShapeStyle_Pack.Fill.AnimatableData)((uint64_t)v193, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))outlined consume of _ShapeStyle_Pack.Fill, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))outlined consume of _ShapeStyle_Pack.Fill.AnimatableData);
      v56 = vmul_f32(v55, (float32x2_t)0x3C0000003C000000);
      v57.i64[0] = v56.u32[0];
      v57.i64[1] = v56.u32[1];
      *(int8x16_t *)a1 = vorrq_s8((int8x16_t)vshll_n_s32((int32x2_t)vmul_f32((float32x2_t)vshrn_n_s64(v178, 0x20uLL), (float32x2_t)0x3C0000003C000000), 0x20uLL), v57);
      *(_OWORD *)v16 = 0u;
      *(_OWORD *)(v16 + 16) = 0u;
      *(_OWORD *)(v16 + 32) = 0u;
      *(_OWORD *)(v16 + 48) = 0u;
      v58 = 4;
      goto LABEL_41;
    case 5:
      v59 = v3.i32[0];
      if (v12 == 8)
      {
        v60 = HIDWORD(v3.i64[0]);
        v61 = v3.i32[2];
        v153 = HIDWORD(v3.i64[1]);
        v163 = HIDWORD(v6);
        v165 = HIDWORD(v7);
        v168 = HIDWORD(v8);
        v170 = HIDWORD(v9);
        v162 = v9;
        v158 = v8;
        v62 = v7;
        v63 = v6;
        outlined release of (_ShapeStyle_Pack.Fill, _ShapeStyle_Pack.Fill.AnimatableData)((uint64_t)v193, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))outlined consume of _ShapeStyle_Pack.Fill, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))outlined consume of _ShapeStyle_Pack.Fill.AnimatableData);
        *(_DWORD *)a1 = v59;
        *(_DWORD *)(a1 + 4) = v60;
        *(_DWORD *)(a1 + 8) = v61;
        *(_DWORD *)(a1 + 12) = v153;
        *(_QWORD *)(a1 + 16) = v5;
        *(_QWORD *)(a1 + 24) = v4;
        *(_DWORD *)(a1 + 32) = v63;
        *(_DWORD *)(a1 + 36) = v163;
        *(_DWORD *)(a1 + 40) = v62;
        *(_DWORD *)(a1 + 44) = v165;
        *(_DWORD *)(a1 + 48) = v158;
        *(_DWORD *)(a1 + 52) = v168;
        *(_DWORD *)(a1 + 56) = v162;
        *(_DWORD *)(a1 + 60) = v170;
        *(_QWORD *)(a1 + 64) = v10;
        *(_QWORD *)(a1 + 72) = v11;
        v58 = 5;
LABEL_41:
        *(_BYTE *)(a1 + 80) = v58;
      }
      else
      {
LABEL_18:
        outlined copy of _ShapeStyle_Pack.Fill.AnimatableData(v3.i64[0], v3.i64[1], v5, v4, v6, v7, v8, v9, v10, v11, v12);
LABEL_30:
        outlined release of (_ShapeStyle_Pack.Fill, _ShapeStyle_Pack.Fill.AnimatableData)((uint64_t)v193, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))outlined consume of _ShapeStyle_Pack.Fill, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))outlined consume of _ShapeStyle_Pack.Fill.AnimatableData);
      }
      return;
    default:
      v177 = v14;
      v47 = v22;
      v48 = v13;
      v132 = v10;
      v135 = v11;
      v49 = (void *)v15;
      v50 = v17;
      v51 = v4;
      v52 = v21;
      v53 = v20;
      v54 = v23;
      outlined copy of _ShapeStyle_Pack.Fill.AnimatableData(v3.i64[0], v3.i64[1], v5, v51, v6, v7, v8, v9, v132, v135, v12);
      outlined copy of _ShapeStyle_Pack.Fill(v177, v48, v49, v50, v19, v52, v53, v54, v47, v24, v25);
      goto LABEL_30;
  }
}

void _ShapeStyle_Pack.Fill.AnimatableData.PaintInitVisitor.visitPaint<A>(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  double v22;
  uint64_t v23;
  void (*v24)(char *, uint64_t, uint64_t, double);
  uint64_t v25;
  float v26;
  float v27;
  float v28;
  float v29;
  uint64_t v30;
  int8x16_t v31;
  int8x16_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  id v44;
  char v45;
  float64x2_t v46;
  float64x2_t v47;
  uint64_t v48;
  float64x2_t v49;
  unsigned int v50;
  SwiftUI::ResolvedGradient v51;
  uint64_t v52;
  uint64_t v53;
  id v54;
  char v55;
  float64x2_t v56;
  float64x2_t v57;
  unsigned int v58;
  SwiftUI::ResolvedGradient v59;
  uint64_t v60;
  uint64_t v61;
  float64x2_t v62;
  char v63;
  id v64;
  char v65;
  float64x2_t v66;
  float64x2_t v67;
  unsigned int v68;
  SwiftUI::ResolvedGradient v69;
  uint64_t v70;
  uint64_t v71;
  id v72;
  char v73;
  float64x2_t v74;
  float64x2_t v75;
  unsigned int v76;
  SwiftUI::ResolvedGradient v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char v91;
  float32x4_t v92;
  float64x2_t v93;
  id v94;
  uint64_t v95;
  id v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  char v107;
  float64x2_t v108;
  float64x2_t v109;
  float64x2_t v110;
  id v111;
  char v112;
  float32x4_t v113[2];
  id v114;
  float v115;
  float v116;
  float64x2_t v117;
  float64x2_t v118;

  MEMORY[0x24BDAC7A8](a1);
  *(_QWORD *)&v110.f64[0] = (char *)v108.f64 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v108 - v7;
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v108 - v10;
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)&v108 - v13;
  MEMORY[0x24BDAC7A8](v15);
  v17 = (char *)&v108 - v16;
  MEMORY[0x24BDAC7A8](v18);
  v20 = (char *)&v108 - v19;
  v22 = MEMORY[0x24BDAC7A8](v21);
  v24 = *(void (**)(char *, uint64_t, uint64_t, double))(v23 + 16);
  v24((char *)&v108 - v25, a1, a2, v22);
  if (swift_dynamicCast())
  {
    v26 = *((float *)&v114 + 1);
    v27 = *(float *)&v114;
    v29 = v115;
    v28 = v116;
    v30 = *v2;
    if (one-time initialization token for legacyInterpolation != -1)
      swift_once();
    swift_beginAccess();
    if ((static Color.Resolved.legacyInterpolation & 1) == 0)
    {
      LOBYTE(v111) = 2;
      *(float *)v31.i32 = v27;
      ResolvedGradient.ColorSpace.convertIn(_:)(v113[0].f32, v31, v26, LODWORD(v29), v28, v32);
      v26 = v113[0].f32[1];
      v27 = v113[0].f32[0];
      v28 = v113[0].f32[3];
      v29 = v113[0].f32[2];
    }
    v33 = *(_QWORD *)v30;
    v34 = *(_QWORD *)(v30 + 8);
    v35 = *(_QWORD *)(v30 + 16);
    v36 = *(_QWORD *)(v30 + 24);
    v37 = *(_QWORD *)(v30 + 32);
    v38 = *(_QWORD *)(v30 + 40);
    v39 = *(_QWORD *)(v30 + 48);
    v40 = *(_QWORD *)(v30 + 56);
    v41 = *(_QWORD *)(v30 + 64);
    v42 = *(_QWORD *)(v30 + 72);
    v43 = *(_BYTE *)(v30 + 80);
    *(_QWORD *)v30 = COERCE_UNSIGNED_INT(v27 * 128.0) | ((unint64_t)COERCE_UNSIGNED_INT(v26 * 128.0) << 32);
    *(_QWORD *)(v30 + 8) = COERCE_UNSIGNED_INT(v29 * 128.0) | ((unint64_t)COERCE_UNSIGNED_INT(v28 * 128.0) << 32);
    *(_OWORD *)(v30 + 16) = 0u;
    *(_OWORD *)(v30 + 32) = 0u;
    *(_OWORD *)(v30 + 48) = 0u;
    *(_OWORD *)(v30 + 64) = 0u;
    *(_BYTE *)(v30 + 80) = 0;
    goto LABEL_54;
  }
  ((void (*)(char *, uint64_t, uint64_t))v24)(v20, a1, a2);
  if (swift_dynamicCast())
  {
    v44 = v114;
    v45 = LOBYTE(v115);
    v46 = v117;
    v47 = v118;
    v48 = *v2;
    if (one-time initialization token for v5 != -1)
    {
      v110 = v117;
      v109 = v118;
      swift_once();
      v47 = v109;
      v46 = v110;
    }
    v49 = (float64x2_t)vdupq_n_s64(0x4060000000000000uLL);
    v50 = static Semantics.v5;
    if (one-time initialization token for forced != -1)
    {
      v110 = v46;
      v109 = v47;
      v108 = v49;
      swift_once();
      v49 = v108;
      v47 = v109;
      v46 = v110;
    }
    v110 = vmulq_f64(v46, v49);
    v109 = vmulq_f64(v47, v49);
    swift_beginAccess();
    if (byte_25426FAB4 == 1)
    {
      if ((dyld_program_sdk_at_least() & 1) == 0)
      {
LABEL_14:
        swift_bridgeObjectRelease();
        v52 = 0;
        v53 = MEMORY[0x24BEE4AF8];
LABEL_25:
        v33 = *(_QWORD *)v48;
        v34 = *(_QWORD *)(v48 + 8);
        v35 = *(_QWORD *)(v48 + 16);
        v36 = *(_QWORD *)(v48 + 24);
        v37 = *(_QWORD *)(v48 + 32);
        v38 = *(_QWORD *)(v48 + 40);
        v39 = *(_QWORD *)(v48 + 48);
        v40 = *(_QWORD *)(v48 + 56);
        v41 = *(_QWORD *)(v48 + 64);
        v42 = *(_QWORD *)(v48 + 72);
        v43 = *(_BYTE *)(v48 + 80);
        v62 = v109;
        *(float64x2_t *)v48 = v110;
        *(float64x2_t *)(v48 + 16) = v62;
        *(_QWORD *)(v48 + 32) = v53;
        *(_QWORD *)(v48 + 40) = v52;
        *(_OWORD *)(v48 + 48) = 0u;
        *(_OWORD *)(v48 + 64) = 0u;
        v63 = 2;
LABEL_53:
        *(_BYTE *)(v48 + 80) = v63;
LABEL_54:
        outlined consume of _ShapeStyle_Pack.Fill.AnimatableData(v33, v34, v35, v36, v37, v38, v39, v40, v41, v42, v43);
        return;
      }
    }
    else if (static Semantics.forced < v50)
    {
      goto LABEL_14;
    }
    v111 = v44;
    v112 = v45;
    v51.stops._rawValue = &v111;
    ResolvedGradientVector.init(_:)(v51);
    v53 = v113[0].i64[0];
    v52 = v113[0].u8[8];
    goto LABEL_25;
  }
  ((void (*)(char *, uint64_t, uint64_t))v24)(v17, a1, a2);
  if (swift_dynamicCast())
  {
    v54 = v114;
    v55 = LOBYTE(v115);
    v56 = v117;
    v110 = v118;
    v48 = *v2;
    if (one-time initialization token for v5 != -1)
    {
      v109 = v117;
      swift_once();
      v56 = v109;
    }
    v57 = (float64x2_t)vdupq_n_s64(0x4060000000000000uLL);
    v58 = static Semantics.v5;
    if (one-time initialization token for forced != -1)
    {
      v109 = v56;
      v108 = v57;
      swift_once();
      v57 = v108;
      v56 = v109;
    }
    v109 = vmulq_f64(v56, v57);
    swift_beginAccess();
    if (byte_25426FAB4 == 1)
    {
      if ((dyld_program_sdk_at_least() & 1) == 0)
      {
LABEL_22:
        swift_bridgeObjectRelease();
        v60 = 0;
        v61 = MEMORY[0x24BEE4AF8];
LABEL_36:
        v33 = *(_QWORD *)v48;
        v34 = *(_QWORD *)(v48 + 8);
        v35 = *(_QWORD *)(v48 + 16);
        v36 = *(_QWORD *)(v48 + 24);
        v37 = *(_QWORD *)(v48 + 32);
        v38 = *(_QWORD *)(v48 + 40);
        v39 = *(_QWORD *)(v48 + 48);
        v40 = *(_QWORD *)(v48 + 56);
        v41 = *(_QWORD *)(v48 + 64);
        v42 = *(_QWORD *)(v48 + 72);
        v43 = *(_BYTE *)(v48 + 80);
        *(float64x2_t *)v48 = v109;
        *(_QWORD *)(v48 + 16) = v61;
        *(_QWORD *)(v48 + 24) = v60;
        *(float64x2_t *)(v48 + 32) = v110;
        *(_OWORD *)(v48 + 48) = 0u;
        *(_OWORD *)(v48 + 64) = 0u;
        v63 = 3;
        goto LABEL_53;
      }
    }
    else if (static Semantics.forced < v58)
    {
      goto LABEL_22;
    }
    v111 = v54;
    v112 = v55;
    v59.stops._rawValue = &v111;
    ResolvedGradientVector.init(_:)(v59);
    v61 = v113[0].i64[0];
    v60 = v113[0].u8[8];
    goto LABEL_36;
  }
  ((void (*)(char *, uint64_t, uint64_t))v24)(v14, a1, a2);
  if (swift_dynamicCast())
  {
    v64 = v114;
    v65 = LOBYTE(v115);
    v66 = v117;
    v110 = v118;
    v48 = *v2;
    if (one-time initialization token for v5 != -1)
    {
      v109 = v117;
      swift_once();
      v66 = v109;
    }
    v67 = (float64x2_t)vdupq_n_s64(0x4060000000000000uLL);
    v68 = static Semantics.v5;
    if (one-time initialization token for forced != -1)
    {
      v109 = v66;
      v108 = v67;
      swift_once();
      v67 = v108;
      v66 = v109;
    }
    v109 = vmulq_f64(v66, v67);
    swift_beginAccess();
    if (byte_25426FAB4 == 1)
    {
      if ((dyld_program_sdk_at_least() & 1) == 0)
      {
LABEL_33:
        swift_bridgeObjectRelease();
        v70 = 0;
        v71 = MEMORY[0x24BEE4AF8];
LABEL_47:
        v33 = *(_QWORD *)v48;
        v34 = *(_QWORD *)(v48 + 8);
        v35 = *(_QWORD *)(v48 + 16);
        v36 = *(_QWORD *)(v48 + 24);
        v37 = *(_QWORD *)(v48 + 32);
        v38 = *(_QWORD *)(v48 + 40);
        v39 = *(_QWORD *)(v48 + 48);
        v40 = *(_QWORD *)(v48 + 56);
        v41 = *(_QWORD *)(v48 + 64);
        v42 = *(_QWORD *)(v48 + 72);
        v43 = *(_BYTE *)(v48 + 80);
        *(float64x2_t *)v48 = v109;
        *(_QWORD *)(v48 + 16) = v71;
        *(_QWORD *)(v48 + 24) = v70;
        *(float64x2_t *)(v48 + 32) = v110;
        *(_OWORD *)(v48 + 48) = 0u;
        *(_OWORD *)(v48 + 64) = 0u;
        v63 = 4;
        goto LABEL_53;
      }
    }
    else if (static Semantics.forced < v68)
    {
      goto LABEL_33;
    }
    v111 = v64;
    v112 = v65;
    v69.stops._rawValue = &v111;
    ResolvedGradientVector.init(_:)(v69);
    v71 = v113[0].i64[0];
    v70 = v113[0].u8[8];
    goto LABEL_47;
  }
  ((void (*)(char *, uint64_t, uint64_t))v24)(v11, a1, a2);
  if (swift_dynamicCast())
  {
    v72 = v114;
    v73 = LOBYTE(v115);
    v74 = v117;
    v110 = v118;
    v48 = *v2;
    if (one-time initialization token for v5 != -1)
    {
      v109 = v117;
      swift_once();
      v74 = v109;
    }
    v75 = (float64x2_t)vdupq_n_s64(0x4060000000000000uLL);
    v76 = static Semantics.v5;
    if (one-time initialization token for forced != -1)
    {
      v109 = v74;
      v108 = v75;
      swift_once();
      v75 = v108;
      v74 = v109;
    }
    v109 = vmulq_f64(v74, v75);
    swift_beginAccess();
    if (byte_25426FAB4 == 1)
    {
      if ((dyld_program_sdk_at_least() & 1) == 0)
      {
LABEL_44:
        swift_bridgeObjectRelease();
        v78 = 0;
        v79 = MEMORY[0x24BEE4AF8];
LABEL_52:
        v93 = vmulq_f64(v110, (float64x2_t)vdupq_n_s64(0x4060000000000000uLL));
        v33 = *(_QWORD *)v48;
        v34 = *(_QWORD *)(v48 + 8);
        v35 = *(_QWORD *)(v48 + 16);
        v36 = *(_QWORD *)(v48 + 24);
        v37 = *(_QWORD *)(v48 + 32);
        v38 = *(_QWORD *)(v48 + 40);
        v39 = *(_QWORD *)(v48 + 48);
        v40 = *(_QWORD *)(v48 + 56);
        v41 = *(_QWORD *)(v48 + 64);
        v42 = *(_QWORD *)(v48 + 72);
        v43 = *(_BYTE *)(v48 + 80);
        *(float64x2_t *)v48 = v109;
        *(_QWORD *)(v48 + 16) = v79;
        *(_QWORD *)(v48 + 24) = v78;
        *(float64x2_t *)(v48 + 32) = v93;
        *(_OWORD *)(v48 + 48) = 0u;
        *(_OWORD *)(v48 + 64) = 0u;
        v63 = 5;
        goto LABEL_53;
      }
    }
    else if (static Semantics.forced < v76)
    {
      goto LABEL_44;
    }
    v111 = v72;
    v112 = v73;
    v77.stops._rawValue = &v111;
    ResolvedGradientVector.init(_:)(v77);
    v79 = v113[0].i64[0];
    v78 = v113[0].u8[8];
    goto LABEL_52;
  }
  ((void (*)(char *, uint64_t, uint64_t))v24)(v8, a1, a2);
  if (swift_dynamicCast())
  {
    v80 = *v2;
    MeshGradient._Paint.animatableData.getter(v113);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v81 = *(_QWORD *)v80;
    v82 = *(_QWORD *)(v80 + 8);
    v83 = *(_QWORD *)(v80 + 16);
    v84 = *(_QWORD *)(v80 + 24);
    v85 = *(_QWORD *)(v80 + 32);
    v86 = *(_QWORD *)(v80 + 40);
    v87 = *(_QWORD *)(v80 + 48);
    v88 = *(_QWORD *)(v80 + 56);
    v89 = *(_QWORD *)(v80 + 64);
    v90 = *(_QWORD *)(v80 + 72);
    v91 = *(_BYTE *)(v80 + 80);
    v92 = v113[1];
    *(float32x4_t *)v80 = v113[0];
    *(float32x4_t *)(v80 + 16) = v92;
    *(_OWORD *)(v80 + 32) = 0u;
    *(_OWORD *)(v80 + 48) = 0u;
    *(_OWORD *)(v80 + 64) = 0u;
    *(_BYTE *)(v80 + 80) = 6;
    outlined consume of _ShapeStyle_Pack.Fill.AnimatableData(v81, v82, v83, v84, v85, v86, v87, v88, v89, v90, v91);
  }
  else
  {
    ((void (*)(_QWORD, uint64_t, uint64_t))v24)(*(_QWORD *)&v110.f64[0], a1, a2);
    if ((swift_dynamicCast() & 1) != 0)
    {
      v94 = v114;
      v95 = *v2;
      v96 = v114;
      ShaderVectorData.init(rbShader:)(v94, &v114);
      v97 = *(_QWORD *)v95;
      v98 = *(_QWORD *)(v95 + 8);
      v99 = *(_QWORD *)(v95 + 16);
      v100 = *(_QWORD *)(v95 + 24);
      v101 = *(_QWORD *)(v95 + 32);
      v102 = *(_QWORD *)(v95 + 40);
      v103 = *(_QWORD *)(v95 + 48);
      v104 = *(_QWORD *)(v95 + 56);
      v105 = *(_QWORD *)(v95 + 64);
      v106 = *(_QWORD *)(v95 + 72);
      v107 = *(_BYTE *)(v95 + 80);
      *(_QWORD *)v95 = v114;
      *(_OWORD *)(v95 + 8) = 0u;
      *(_OWORD *)(v95 + 24) = 0u;
      *(_OWORD *)(v95 + 40) = 0u;
      *(_OWORD *)(v95 + 56) = 0u;
      *(_QWORD *)(v95 + 72) = 0;
      *(_BYTE *)(v95 + 80) = 7;
      outlined consume of _ShapeStyle_Pack.Fill.AnimatableData(v97, v98, v99, v100, v101, v102, v103, v104, v105, v106, v107);

    }
  }
}

void _ShapeStyle_Pack.Fill.AnimatableData.PaintSetVisitor.visitPaint<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t AssociatedTypeWitness;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  double v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  char v24;
  void (*v25)(char *, uint64_t, uint64_t, uint64_t);
  void (*v26)(char *, char *, uint64_t);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v38 = a1;
  v4 = *(_QWORD *)(a2 + 16);
  v35 = *(_QWORD *)(a2 + 24);
  v36 = a2;
  v34 = *(_QWORD *)(v35 + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v32 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v33 = AssociatedTypeWitness;
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v7 = (char *)&v31 - v6;
  v8 = type metadata accessor for Optional();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v31 - v10;
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)&v31 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v16);
  v18 = (char *)&v31 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = MEMORY[0x24BDAC7A8](v19);
  v22 = (char *)&v31 - v21;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v23 + 16))(v14, v38, a3, v20);
  v24 = swift_dynamicCast();
  v25 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v15 + 56);
  if ((v24 & 1) != 0)
  {
    v25(v11, 0, 1, v4);
    v26 = *(void (**)(char *, char *, uint64_t))(v15 + 32);
    v26(v22, v11, v4);
    v27 = v37;
    (*(void (**)(char *, uint64_t, uint64_t))(v32 + 16))(v7, v37, v33);
    (*(void (**)(char *, uint64_t))(v34 + 32))(v7, v4);
    type metadata accessor for _AnyResolvedPaint(0, v4, v35, v28);
    v26(v18, v22, v4);
    v29 = _AnyResolvedPaint.__allocating_init(_:)((uint64_t)v18);
    v30 = v27 + *(int *)(v36 + 36);
    outlined consume of _ShapeStyle_Pack.Fill(*(_QWORD *)v30, *(_QWORD *)(v30 + 8), *(_QWORD *)(v30 + 16), *(void **)(v30 + 24), *(_QWORD *)(v30 + 32), *(_QWORD *)(v30 + 40), *(_QWORD *)(v30 + 48), *(_QWORD *)(v30 + 56), *(_QWORD *)(v30 + 64), *(_QWORD *)(v30 + 72), *(_BYTE *)(v30 + 80));
    *(_QWORD *)v30 = v29;
    *(_OWORD *)(v30 + 8) = 0u;
    *(_OWORD *)(v30 + 24) = 0u;
    *(_OWORD *)(v30 + 40) = 0u;
    *(_OWORD *)(v30 + 56) = 0u;
    *(_QWORD *)(v30 + 72) = 0;
    *(_BYTE *)(v30 + 80) = 1;
  }
  else
  {
    v25(v11, 1, 1, v4);
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  }
}

void protocol witness for ResolvedPaintVisitor.visitPaint<A>(_:) in conformance _ShapeStyle_Pack.Fill.AnimatableData.PaintSetVisitor<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _ShapeStyle_Pack.Fill.AnimatableData.PaintSetVisitor.visitPaint<A>(_:)(a1, a4, a2);
}

void _ShapeStyle_Pack.Fill.AnimatableData.negate()()
{
  __asm { BR              X10 }
}

uint64_t sub_234D6A038(double a1, double a2, double a3, double a4, __n128 a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double v12;
  _OWORD *v13;
  uint64_t v14;
  double v15;
  double v16;
  double v17;
  double v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t result;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  unsigned __int8 v31;

  v26 = a5.n128_i64[1];
  v27 = *(_QWORD *)&v12;
  v25 = a5.n128_u64[0];
  v15 = 0.0 - v8;
  v16 = 0.0 - v12;
  v17 = 0.0 - a5.n128_f64[0];
  v30 = MEMORY[0x24BEE4AF8];
  v31 = 0;
  v18 = 0.0 - a5.n128_f64[1];
  v28 = v10;
  v29 = v11;
  v19 = v5;
  v20 = *(_QWORD *)&v8;
  v21 = v6;
  swift_bridgeObjectRetain();
  ResolvedGradientVector.add(_:scaledBy:)((uint64_t)&v28, -1.0);
  result = outlined consume of _ShapeStyle_Pack.Fill.AnimatableData(v20, v27, v25, v26, v10, v11, v14, v9, v19, v21, 2);
  v23 = v30;
  v24 = v31;
  *(double *)v7 = v15;
  *(double *)(v7 + 8) = v16;
  *(double *)(v7 + 16) = v17;
  *(double *)(v7 + 24) = v18;
  *(_QWORD *)(v7 + 32) = v23;
  *(_QWORD *)(v7 + 40) = v24;
  *v13 = 0u;
  v13[1] = 0u;
  *(_BYTE *)(v7 + 80) = 2;
  return result;
}

uint64_t static _ShapeStyle_Pack.Fill.AnimatableData.+ infix(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return static _ShapeStyle_Pack.Fill.AnimatableData.+ infix(_:_:)(a1, a2, (uint64_t (*)(uint64_t, _OWORD *))specialized static _ShapeStyle_Pack.Fill.AnimatableData.+= infix(_:_:), a3);
}

uint64_t static _ShapeStyle_Pack.Fill.AnimatableData.- infix(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return static _ShapeStyle_Pack.Fill.AnimatableData.+ infix(_:_:)(a1, a2, (uint64_t (*)(uint64_t, _OWORD *))specialized static _ShapeStyle_Pack.Fill.AnimatableData.-= infix(_:_:), a3);
}

uint64_t static _ShapeStyle_Pack.Fill.AnimatableData.+ infix(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, _OWORD *)@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  char v17;
  __int128 v18;
  __int128 v19;
  _OWORD v21[5];
  char v22;

  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  v8 = *(_QWORD *)(a1 + 16);
  v9 = *(_QWORD *)(a1 + 24);
  v10 = *(_QWORD *)(a1 + 32);
  v11 = *(_QWORD *)(a1 + 40);
  v12 = *(_QWORD *)(a1 + 48);
  v13 = *(_QWORD *)(a1 + 56);
  v14 = *(_QWORD *)(a1 + 64);
  v15 = *(_QWORD *)(a1 + 72);
  v16 = *(_BYTE *)(a1 + 80);
  v17 = *(_BYTE *)(a2 + 80);
  *(_QWORD *)a4 = *(_QWORD *)a1;
  *(_QWORD *)(a4 + 8) = v7;
  *(_QWORD *)(a4 + 16) = v8;
  *(_QWORD *)(a4 + 24) = v9;
  *(_QWORD *)(a4 + 32) = v10;
  *(_QWORD *)(a4 + 40) = v11;
  *(_QWORD *)(a4 + 48) = v12;
  *(_QWORD *)(a4 + 56) = v13;
  *(_QWORD *)(a4 + 64) = v14;
  *(_QWORD *)(a4 + 72) = v15;
  *(_BYTE *)(a4 + 80) = v16;
  v18 = *(_OWORD *)(a2 + 16);
  v21[0] = *(_OWORD *)a2;
  v21[1] = v18;
  v19 = *(_OWORD *)(a2 + 48);
  v21[2] = *(_OWORD *)(a2 + 32);
  v21[3] = v19;
  v21[4] = *(_OWORD *)(a2 + 64);
  v22 = v17;
  outlined copy of _ShapeStyle_Pack.Fill.AnimatableData(v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16);
  return a3(a4, v21);
}

Swift::Void __swiftcall _ShapeStyle_Pack.Fill.AnimatableData.scale(by:)(Swift::Double by)
{
  if (by != 1.0)
    __asm { BR              X11 }
}

void sub_234D6A7FC(uint64_t a1@<X8>, int64x2_t a2@<Q2>, double a3@<D3>)
{
  int8x16_t *v3;
  float v4;
  float32x2_t v5;
  int8x16_t v6;

  v4 = a3;
  v5 = vmul_n_f32((float32x2_t)vmovn_s64(a2), v4);
  v6.i64[0] = v5.u32[0];
  v6.i64[1] = v5.u32[1];
  *v3 = vorrq_s8((int8x16_t)vshll_n_s32((int32x2_t)vmul_n_f32((float32x2_t)vshrn_n_s64(a2, 0x20uLL), v4), 0x20uLL), v6);
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_BYTE *)(a1 + 64) = 0;
  JUMPOUT(0x234D6A79CLL);
}

void sub_234D6A834(_OWORD *a1@<X8>, int64x2_t a2@<Q2>, double a3@<D3>)
{
  int8x16_t *v3;
  float v4;
  float32x2_t v5;
  int8x16_t v6;

  v4 = a3;
  v5 = vmul_n_f32((float32x2_t)vmovn_s64(a2), v4);
  v6.i64[0] = v5.u32[0];
  v6.i64[1] = v5.u32[1];
  *v3 = vorrq_s8((int8x16_t)vshll_n_s32((int32x2_t)vmul_n_f32((float32x2_t)vshrn_n_s64(a2, 0x20uLL), v4), 0x20uLL), v6);
  *a1 = 0u;
  a1[1] = 0u;
  a1[2] = 0u;
  a1[3] = 0u;
  v3[5].i8[0] = 1;
  JUMPOUT(0x234D6A79CLL);
}

void sub_234D6A870(double a1, float64x2_t a2, float64x2_t a3, double a4, __n128 a5)
{
  uint64_t v5;
  _OWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  float v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  float v13;
  unsigned __int8 v14;
  float64x2_t v15;
  float64x2_t v16;
  double v17;

  v7 = (_QWORD *)a5.n128_u64[0];
  v8 = *(_QWORD *)(a5.n128_u64[0] + 16);
  if (v8)
  {
    v14 = a5.n128_u8[8];
    v15 = a3;
    v16 = a2;
    v17 = a4;
    v9 = a4;
    v13 = v9;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v7 = specialized _ArrayBuffer._consumeAndCreateNew()(v7);
    v10 = 0;
    v11 = v7[2];
    v12 = 4;
    a2 = v16;
    a4 = v17;
    a5.n128_u8[8] = v14;
    a3 = v15;
    do
    {
      if (v10 >= v11)
      {
        __break(1u);
        JUMPOUT(0x234D6AF8CLL);
      }
      ++v10;
      *(float32x4_t *)&v7[v12] = vmulq_n_f32(*(float32x4_t *)&v7[v12], v13);
      v12 += 6;
    }
    while (v8 != v10);
  }
  *(float64x2_t *)v5 = vmulq_n_f64(a3, a4);
  *(float64x2_t *)(v5 + 16) = vmulq_n_f64(a2, a4);
  *(_QWORD *)(v5 + 32) = v7;
  *(_QWORD *)(v5 + 40) = a5.n128_u8[8];
  *v6 = 0u;
  v6[1] = 0u;
  *(_BYTE *)(v5 + 80) = 2;
  JUMPOUT(0x234D6A79CLL);
}

void _ShapeStyle_Pack.Fill.AnimatableData.magnitudeSquared.getter()
{
  __asm { BR              X16 }
}

double protocol witness for static AdditiveArithmetic.zero.getter in conformance _ShapeStyle_Pack.Fill.AnimatableData@<D0>(uint64_t a1@<X8>)
{
  double result;

  result = 0.0;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_BYTE *)(a1 + 80) = 9;
  return result;
}

uint64_t protocol witness for static AdditiveArithmetic.+ infix(_:_:) in conformance _ShapeStyle_Pack.Fill.AnimatableData@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return protocol witness for static AdditiveArithmetic.+ infix(_:_:) in conformance _ShapeStyle_Pack.Fill.AnimatableData(a1, a2, (uint64_t (*)(uint64_t, _OWORD *))specialized static _ShapeStyle_Pack.Fill.AnimatableData.+= infix(_:_:), a3);
}

uint64_t protocol witness for static AdditiveArithmetic.- infix(_:_:) in conformance _ShapeStyle_Pack.Fill.AnimatableData@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return protocol witness for static AdditiveArithmetic.+ infix(_:_:) in conformance _ShapeStyle_Pack.Fill.AnimatableData(a1, a2, (uint64_t (*)(uint64_t, _OWORD *))specialized static _ShapeStyle_Pack.Fill.AnimatableData.-= infix(_:_:), a3);
}

uint64_t protocol witness for static AdditiveArithmetic.+ infix(_:_:) in conformance _ShapeStyle_Pack.Fill.AnimatableData@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, _OWORD *)@<X4>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  char v17;
  __int128 v18;
  __int128 v19;
  _OWORD v21[5];
  char v22;

  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  v8 = *(_QWORD *)(a1 + 16);
  v9 = *(_QWORD *)(a1 + 24);
  v10 = *(_QWORD *)(a1 + 32);
  v11 = *(_QWORD *)(a1 + 40);
  v12 = *(_QWORD *)(a1 + 48);
  v13 = *(_QWORD *)(a1 + 56);
  v14 = *(_QWORD *)(a1 + 64);
  v15 = *(_QWORD *)(a1 + 72);
  v16 = *(_BYTE *)(a1 + 80);
  v17 = *(_BYTE *)(a2 + 80);
  *(_QWORD *)a4 = *(_QWORD *)a1;
  *(_QWORD *)(a4 + 8) = v7;
  *(_QWORD *)(a4 + 16) = v8;
  *(_QWORD *)(a4 + 24) = v9;
  *(_QWORD *)(a4 + 32) = v10;
  *(_QWORD *)(a4 + 40) = v11;
  *(_QWORD *)(a4 + 48) = v12;
  *(_QWORD *)(a4 + 56) = v13;
  *(_QWORD *)(a4 + 64) = v14;
  *(_QWORD *)(a4 + 72) = v15;
  *(_BYTE *)(a4 + 80) = v16;
  v18 = *(_OWORD *)(a2 + 16);
  v21[0] = *(_OWORD *)a2;
  v21[1] = v18;
  v19 = *(_OWORD *)(a2 + 48);
  v21[2] = *(_OWORD *)(a2 + 32);
  v21[3] = v19;
  v21[4] = *(_OWORD *)(a2 + 64);
  v22 = v17;
  outlined copy of _ShapeStyle_Pack.Fill.AnimatableData(v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16);
  return a3(a4, v21);
}

double key path getter for _ShapeStyle_Pack.Fill.animatableData : _ShapeStyle_Pack.Fill@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  char v12;
  char v13;
  __int128 v14;
  double result;
  __int128 v16;
  __int128 v17;
  id v18[10];
  char v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  char v25;

  v3 = *(void **)(a1 + 8);
  v4 = *(void **)(a1 + 16);
  v5 = *(void **)(a1 + 24);
  v6 = *(void **)(a1 + 32);
  v7 = *(void **)(a1 + 40);
  v8 = *(void **)(a1 + 48);
  v9 = *(void **)(a1 + 56);
  v10 = *(void **)(a1 + 64);
  v11 = *(void **)(a1 + 72);
  v12 = *(_BYTE *)(a1 + 80);
  v18[0] = *(id *)a1;
  v18[1] = v3;
  v18[2] = v4;
  v18[3] = v5;
  v18[4] = v6;
  v18[5] = v7;
  v18[6] = v8;
  v18[7] = v9;
  v18[8] = v10;
  v18[9] = v11;
  v19 = v12;
  outlined copy of _ShapeStyle_Pack.Fill(v18[0], (uint64_t)v3, v4, v5, (uint64_t)v6, (uint64_t)v7, (uint64_t)v8, (uint64_t)v9, (uint64_t)v10, (uint64_t)v11, v12);
  _ShapeStyle_Pack.Fill.AnimatableData.init(_:)((uint64_t)v18);
  v13 = v25;
  v14 = v21;
  *(_OWORD *)a2 = v20;
  *(_OWORD *)(a2 + 16) = v14;
  result = *(double *)&v22;
  v16 = v23;
  v17 = v24;
  *(_OWORD *)(a2 + 32) = v22;
  *(_OWORD *)(a2 + 48) = v16;
  *(_OWORD *)(a2 + 64) = v17;
  *(_BYTE *)(a2 + 80) = v13;
  return result;
}

void key path setter for _ShapeStyle_Pack.Fill.animatableData : _ShapeStyle_Pack.Fill(uint64_t a1, uint64_t a2)
{
  _ShapeStyle_Pack.Fill.AnimatableData.set(fill:)(a2);
}

void (*_ShapeStyle_Pack.Fill.animatableData.modify(_QWORD *a1))(uint64_t **a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  char v13;
  id v15[10];
  char v16;

  v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[11] = v1;
  v4 = *(void **)(v1 + 8);
  v5 = *(void **)(v1 + 16);
  v6 = *(void **)(v1 + 24);
  v7 = *(void **)(v1 + 32);
  v8 = *(void **)(v1 + 40);
  v9 = *(void **)(v1 + 48);
  v10 = *(void **)(v1 + 56);
  v11 = *(void **)(v1 + 64);
  v12 = *(void **)(v1 + 72);
  v13 = *(_BYTE *)(v1 + 80);
  v15[0] = *(id *)v1;
  v15[1] = v4;
  v15[2] = v5;
  v15[3] = v6;
  v15[4] = v7;
  v15[5] = v8;
  v15[6] = v9;
  v15[7] = v10;
  v15[8] = v11;
  v15[9] = v12;
  v16 = v13;
  outlined copy of _ShapeStyle_Pack.Fill(v15[0], (uint64_t)v4, v5, v6, (uint64_t)v7, (uint64_t)v8, (uint64_t)v9, (uint64_t)v10, (uint64_t)v11, (uint64_t)v12, v13);
  _ShapeStyle_Pack.Fill.AnimatableData.init(_:)((uint64_t)v15);
  return _ShapeStyle_Pack.Fill.animatableData.modify;
}

void _ShapeStyle_Pack.Fill.animatableData.modify(uint64_t **a1, char a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v2 = *a1;
  v4 = **a1;
  v3 = (*a1)[1];
  v6 = (*a1)[2];
  v5 = (*a1)[3];
  v8 = (*a1)[4];
  v7 = (*a1)[5];
  v10 = (*a1)[6];
  v9 = (*a1)[7];
  v11 = (*a1)[8];
  v12 = (*a1)[9];
  v13 = *((_BYTE *)*a1 + 80);
  v14 = (*a1)[11];
  if ((a2 & 1) != 0)
  {
    _ShapeStyle_Pack.Fill.AnimatableData.set(fill:)(v14);
    outlined consume of _ShapeStyle_Pack.Fill.AnimatableData(*v2, v2[1], v2[2], v2[3], v2[4], v2[5], v2[6], v2[7], v2[8], v2[9], *((_BYTE *)v2 + 80));
  }
  else
  {
    v16 = v10;
    v17 = v9;
    v15 = v7;
    _ShapeStyle_Pack.Fill.AnimatableData.set(fill:)(v14);
    outlined consume of _ShapeStyle_Pack.Fill.AnimatableData(v4, v3, v6, v5, v8, v15, v16, v17, v11, v12, v13);
  }
  free(v2);
}

void protocol witness for Animatable.animatableData.getter in conformance _ShapeStyle_Pack.Fill()
{
  uint64_t v0;
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  char v10;
  id v11[10];
  char v12;

  v1 = *(void **)(v0 + 8);
  v2 = *(void **)(v0 + 16);
  v3 = *(void **)(v0 + 24);
  v4 = *(void **)(v0 + 32);
  v5 = *(void **)(v0 + 40);
  v6 = *(void **)(v0 + 48);
  v7 = *(void **)(v0 + 56);
  v8 = *(void **)(v0 + 64);
  v9 = *(void **)(v0 + 72);
  v10 = *(_BYTE *)(v0 + 80);
  v11[0] = *(id *)v0;
  v11[1] = v1;
  v11[2] = v2;
  v11[3] = v3;
  v11[4] = v4;
  v11[5] = v5;
  v11[6] = v6;
  v11[7] = v7;
  v11[8] = v8;
  v11[9] = v9;
  v12 = v10;
  outlined copy of _ShapeStyle_Pack.Fill(v11[0], (uint64_t)v1, v2, v3, (uint64_t)v4, (uint64_t)v5, (uint64_t)v6, (uint64_t)v7, (uint64_t)v8, (uint64_t)v9, v10);
  _ShapeStyle_Pack.Fill.AnimatableData.init(_:)((uint64_t)v11);
}

uint64_t protocol witness for Animatable.animatableData.setter in conformance _ShapeStyle_Pack.Fill(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v12;
  uint64_t v13;

  v12 = *(_QWORD *)(a1 + 8);
  v13 = *(_QWORD *)a1;
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD *)(a1 + 24);
  v4 = *(_QWORD *)(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  v6 = *(_QWORD *)(a1 + 48);
  v7 = *(_QWORD *)(a1 + 56);
  v9 = *(_QWORD *)(a1 + 64);
  v8 = *(_QWORD *)(a1 + 72);
  v10 = *(_BYTE *)(a1 + 80);
  _ShapeStyle_Pack.Fill.AnimatableData.set(fill:)(v1);
  return outlined consume of _ShapeStyle_Pack.Fill.AnimatableData(v13, v12, v2, v3, v4, v5, v6, v7, v9, v8, v10);
}

uint64_t (*protocol witness for Animatable.animatableData.modify in conformance _ShapeStyle_Pack.Fill(_QWORD *a1))()
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = _ShapeStyle_Pack.Fill.animatableData.modify(v2);
  return protocol witness for Animatable.animatableData.modify in conformance LinearGradient._Paint;
}

void _ShapeStyle_Pack.Effect.animatableData.getter(uint64_t a1@<X8>)
{
  uint64_t v1;
  char v3;
  int v4;
  uint64_t v5;
  int8x16_t v6;
  int8x16_t v7;
  int8x16_t v8;
  int64x2_t v9;
  int8x16_t v10;
  float32x2_t v11;
  float32x2_t v12;
  float32x2_t v13;
  int8x16_t v14;
  int32x2_t v15;
  int8x16_t v16;
  int64x2_t v17;
  int8x16_t v18;
  float v19[4];

  v3 = *(_BYTE *)(v1 + 45);
  v4 = *(_DWORD *)(v1 + 48);
  if ((v3 & 1) != 0)
  {
    v5 = 0;
    v6 = 0uLL;
    v7 = 0uLL;
  }
  else
  {
    v5 = *(_QWORD *)(v1 + 32);
    v9 = *(int64x2_t *)v1;
    v8 = *(int8x16_t *)(v1 + 16);
    v18 = v8;
    if (one-time initialization token for legacyInterpolation != -1)
    {
      v17 = *(int64x2_t *)v1;
      swift_once();
      v9 = v17;
    }
    *(int32x2_t *)v8.i8 = vmovn_s64(v9);
    v16 = v8;
    v15 = vshrn_n_s64(v9, 0x20uLL);
    swift_beginAccess();
    if ((static Color.Resolved.legacyInterpolation & 1) != 0)
    {
      v12 = (float32x2_t)v15;
      v11 = *(float32x2_t *)v16.i8;
    }
    else
    {
      ResolvedGradient.ColorSpace.convertIn(_:)(v19, v16, *(float *)v15.i32, v16.u32[1], *(float *)&v15.i32[1], v10);
      v12 = (float32x2_t)__PAIR64__(LODWORD(v19[3]), LODWORD(v19[1]));
      v11 = (float32x2_t)__PAIR64__(LODWORD(v19[2]), LODWORD(v19[0]));
    }
    v13 = vmul_f32(v11, (float32x2_t)0x4300000043000000);
    v14.i64[0] = v13.u32[0];
    v14.i64[1] = v13.u32[1];
    v6 = vorrq_s8((int8x16_t)vshll_n_s32((int32x2_t)vmul_f32(v12, (float32x2_t)0x4300000043000000), 0x20uLL), v14);
    v7 = v18;
  }
  *(_DWORD *)a1 = v4;
  *(int8x16_t *)(a1 + 8) = v6;
  *(int8x16_t *)(a1 + 24) = v7;
  *(_QWORD *)(a1 + 40) = v5;
  *(_BYTE *)(a1 + 48) = v3;
}

double key path getter for _ShapeStyle_Pack.Effect.animatableData : _ShapeStyle_Pack.Effect@<D0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  char v3;
  double result;
  int v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  char v9;

  _ShapeStyle_Pack.Effect.animatableData.getter((uint64_t)&v5);
  v2 = v8;
  v3 = v9;
  *(_DWORD *)a1 = v5;
  *(_OWORD *)(a1 + 8) = v6;
  result = *(double *)&v7;
  *(_OWORD *)(a1 + 24) = v7;
  *(_QWORD *)(a1 + 40) = v2;
  *(_BYTE *)(a1 + 48) = v3;
  return result;
}

void key path setter for _ShapeStyle_Pack.Effect.animatableData : _ShapeStyle_Pack.Effect(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  char v7;
  char v8;
  uint64_t v9;
  unint64_t v10;
  unsigned __int8 v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  unsigned int v20;
  unsigned __int8 v21;
  _QWORD v22[2];
  __int128 v23;
  uint64_t v24;

  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  v5 = *(_OWORD *)(a1 + 24);
  v6 = *(_QWORD *)(a1 + 40);
  v7 = *(_BYTE *)(a1 + 48);
  *((_DWORD *)a2 + 12) = *(_DWORD *)a1;
  v8 = *((_BYTE *)a2 + 45) | v7;
  if ((v8 & 1) != 0)
  {
    v9 = 0;
    v10 = 0;
    *(_OWORD *)a2 = 0u;
    *((_OWORD *)a2 + 1) = 0u;
  }
  else
  {
    v11 = *((_BYTE *)a2 + 44);
    v12 = *((_DWORD *)a2 + 10);
    v14 = *a2;
    v13 = a2[1];
    v15 = HIDWORD(*a2);
    v16 = a2[4];
    v22[0] = v4;
    v22[1] = v3;
    v23 = v5;
    v24 = v6;
    *(_QWORD *)&v17 = __PAIR64__(v15, v14);
    *((_QWORD *)&v17 + 1) = v13;
    v18 = *((_OWORD *)a2 + 1);
    v19 = v16;
    v20 = v12;
    v21 = v11;
    ResolvedShadowStyle.animatableData.setter((uint64_t)v22);
    v9 = v19;
    v10 = v20 | ((unint64_t)v21 << 32);
    *(_OWORD *)a2 = v17;
    *((_OWORD *)a2 + 1) = v18;
  }
  a2[4] = v9;
  *((_DWORD *)a2 + 10) = v10;
  *((_BYTE *)a2 + 44) = BYTE4(v10);
  *((_BYTE *)a2 + 45) = v8 & 1;
}

void _ShapeStyle_Pack.Effect.animatableData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int64x2_t v3;
  __int128 v4;
  uint64_t v5;
  char v6;
  int8x16_t v7;
  uint64_t v8;
  char v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  float32x2_t v13;
  float32x2_t v14;
  float32x2_t v15;
  int32x2_t v16;
  float *v17;
  __int32 v18;
  __int32 v19;
  int8x16_t v20;
  float32x2_t v21;
  float32x2_t v22;
  float32x2_t v23;
  float32x2_t v24;
  __int128 v25;
  float v26[5];
  char v27;
  float32x2x2_t v28;

  v2 = v1;
  v3 = *(int64x2_t *)(a1 + 8);
  v4 = *(_OWORD *)(a1 + 24);
  v5 = *(_QWORD *)(a1 + 40);
  v6 = *(_BYTE *)(a1 + 48);
  *(_DWORD *)(v1 + 48) = *(_DWORD *)a1;
  v7 = 0uLL;
  if ((*(_BYTE *)(v1 + 45) & 1) != 0 || (v6 & 1) != 0)
  {
    v5 = 0;
    v8 = 0;
    v9 = 1;
    v10 = 0uLL;
  }
  else
  {
    v25 = v4;
    v11 = *(unsigned __int8 *)(v1 + 44);
    v12 = *(unsigned int *)(v2 + 40);
    v13 = (float32x2_t)vmovn_s64(v3);
    v14 = (float32x2_t)vshrn_n_s64(v3, 0x20uLL);
    if (one-time initialization token for legacyInterpolation != -1)
    {
      v21 = v14;
      v23 = v13;
      swift_once();
      v14 = v21;
      v13 = v23;
    }
    v8 = v12 | (v11 << 32);
    v22 = vmul_f32(v13, (float32x2_t)0x3C0000003C000000);
    v24 = vmul_f32(v14, (float32x2_t)0x3C0000003C000000);
    swift_beginAccess();
    if ((static Color.Resolved.legacyInterpolation & 1) != 0)
    {
      v15 = v22;
      v16 = (int32x2_t)v24;
    }
    else
    {
      v27 = 2;
      v17 = v26;
      v28.val[0] = v22;
      v28.val[1] = v24;
      vst2_f32(v17, v28);
      v15.f32[0] = ResolvedGradient.ColorSpace.convertOut(_:)(v26);
      v16.i32[1] = v18;
      v15.i32[1] = v19;
    }
    v9 = 0;
    v20.i64[0] = v15.u32[0];
    v20.i64[1] = v15.u32[1];
    v7 = vorrq_s8((int8x16_t)vshll_n_s32(v16, 0x20uLL), v20);
    v10 = v25;
  }
  *(int8x16_t *)v2 = v7;
  *(_OWORD *)(v2 + 16) = v10;
  *(_QWORD *)(v2 + 32) = v5;
  *(_DWORD *)(v2 + 40) = v8;
  *(_BYTE *)(v2 + 44) = BYTE4(v8);
  *(_BYTE *)(v2 + 45) = v9;
}

void _ShapeStyle_Pack.Effect.Kind.animatableData.getter(int8x16_t *a1@<X8>)
{
  uint64_t v1;
  char v3;
  uint64_t v4;
  int8x16_t v5;
  int8x16_t v6;
  int8x16_t v7;
  int64x2_t v8;
  int8x16_t v9;
  float32x2_t v10;
  float32x2_t v11;
  float32x2_t v12;
  int8x16_t v13;
  int32x2_t v14;
  int8x16_t v15;
  int64x2_t v16;
  int8x16_t v17;
  float v18[4];

  v3 = *(_BYTE *)(v1 + 45);
  if ((v3 & 1) != 0)
  {
    v4 = 0;
    v5 = 0uLL;
    v6 = 0uLL;
  }
  else
  {
    v4 = *(_QWORD *)(v1 + 32);
    v8 = *(int64x2_t *)v1;
    v7 = *(int8x16_t *)(v1 + 16);
    v17 = v7;
    if (one-time initialization token for legacyInterpolation != -1)
    {
      v16 = *(int64x2_t *)v1;
      swift_once();
      v8 = v16;
    }
    *(int32x2_t *)v7.i8 = vmovn_s64(v8);
    v15 = v7;
    v14 = vshrn_n_s64(v8, 0x20uLL);
    swift_beginAccess();
    if ((static Color.Resolved.legacyInterpolation & 1) != 0)
    {
      v11 = (float32x2_t)v14;
      v10 = *(float32x2_t *)v15.i8;
    }
    else
    {
      ResolvedGradient.ColorSpace.convertIn(_:)(v18, v15, *(float *)v14.i32, v15.u32[1], *(float *)&v14.i32[1], v9);
      v11 = (float32x2_t)__PAIR64__(LODWORD(v18[3]), LODWORD(v18[1]));
      v10 = (float32x2_t)__PAIR64__(LODWORD(v18[2]), LODWORD(v18[0]));
    }
    v12 = vmul_f32(v10, (float32x2_t)0x4300000043000000);
    v13.i64[0] = v12.u32[0];
    v13.i64[1] = v12.u32[1];
    v5 = vorrq_s8((int8x16_t)vshll_n_s32((int32x2_t)vmul_f32(v11, (float32x2_t)0x4300000043000000), 0x20uLL), v13);
    v6 = v17;
  }
  *a1 = v5;
  a1[1] = v6;
  a1[2].i64[0] = v4;
  a1[2].i8[8] = v3;
}

void _ShapeStyle_Pack.Effect.Kind.animatableData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int8x16_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  float32x2_t v10;
  float32x2_t v11;
  float32x2_t v12;
  int32x2_t v13;
  float *v14;
  __int32 v15;
  __int32 v16;
  int8x16_t v17;
  float32x2_t v18;
  float32x2_t v19;
  float32x2_t v20;
  float32x2_t v21;
  __int128 v22;
  float v23[5];
  char v24;
  float32x2x2_t v25;

  v2 = v1;
  v3 = 0uLL;
  if ((*(_BYTE *)(v1 + 45) & 1) != 0 || (*(_BYTE *)(a1 + 40) & 1) != 0)
  {
    v4 = 0;
    v5 = 0;
    v6 = 1;
    v7 = 0uLL;
  }
  else
  {
    v22 = *(_OWORD *)(a1 + 16);
    v4 = *(_QWORD *)(a1 + 32);
    v8 = *(unsigned __int8 *)(v1 + 44);
    v9 = *(unsigned int *)(v2 + 40);
    v10 = (float32x2_t)vmovn_s64(*(int64x2_t *)a1);
    v11 = (float32x2_t)vshrn_n_s64(*(int64x2_t *)a1, 0x20uLL);
    if (one-time initialization token for legacyInterpolation != -1)
    {
      v18 = v11;
      v20 = v10;
      swift_once();
      v11 = v18;
      v10 = v20;
    }
    v5 = v9 | (v8 << 32);
    v19 = vmul_f32(v10, (float32x2_t)0x3C0000003C000000);
    v21 = vmul_f32(v11, (float32x2_t)0x3C0000003C000000);
    swift_beginAccess();
    if ((static Color.Resolved.legacyInterpolation & 1) != 0)
    {
      v12 = v19;
      v13 = (int32x2_t)v21;
    }
    else
    {
      v24 = 2;
      v14 = v23;
      v25.val[0] = v19;
      v25.val[1] = v21;
      vst2_f32(v14, v25);
      v12.f32[0] = ResolvedGradient.ColorSpace.convertOut(_:)(v23);
      v13.i32[1] = v15;
      v12.i32[1] = v16;
    }
    v6 = 0;
    v17.i64[0] = v12.u32[0];
    v17.i64[1] = v12.u32[1];
    v3 = vorrq_s8((int8x16_t)vshll_n_s32(v13, 0x20uLL), v17);
    v7 = v22;
  }
  *(int8x16_t *)v2 = v3;
  *(_OWORD *)(v2 + 16) = v7;
  *(_QWORD *)(v2 + 32) = v4;
  *(_DWORD *)(v2 + 40) = v5;
  *(_BYTE *)(v2 + 44) = BYTE4(v5);
  *(_BYTE *)(v2 + 45) = v6;
}

void (*_ShapeStyle_Pack.Effect.animatableData.modify(_QWORD *a1))(_DWORD **a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = malloc(0x70uLL);
  *a1 = v3;
  v3[13] = v1;
  _ShapeStyle_Pack.Effect.animatableData.getter((uint64_t)v3);
  return _ShapeStyle_Pack.Effect.animatableData.modify;
}

void _ShapeStyle_Pack.Effect.animatableData.modify(_DWORD **a1, char a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  char v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  uint64_t v28;
  float v29[4];

  v2 = *a1;
  v3 = *((_QWORD *)*a1 + 13);
  v5 = *((_QWORD *)*a1 + 1);
  v4 = *((_QWORD *)*a1 + 2);
  v6 = *((_QWORD *)*a1 + 3);
  v7 = *((_QWORD *)*a1 + 4);
  v8 = *((_QWORD *)*a1 + 5);
  v9 = *((_BYTE *)*a1 + 48);
  *(_DWORD *)(v3 + 48) = **a1;
  v10 = *(_BYTE *)(v3 + 45);
  v11 = v2[13];
  if ((a2 & 1) == 0)
  {
    if ((v10 & 1) == 0 && (v9 & 1) == 0)
      goto LABEL_8;
LABEL_7:
    v12 = 0;
    v13 = 0;
    v6 = 0;
    v7 = 0;
    v8 = 0;
    v14 = 0;
    v15 = 1;
    goto LABEL_13;
  }
  if ((v10 & 1) != 0 || (v9 & 1) != 0)
    goto LABEL_7;
LABEL_8:
  v16 = *(unsigned __int8 *)(v11 + 44);
  v17 = *(unsigned int *)(v11 + 40);
  v18 = v5;
  v20 = *((float *)&v4 + 1);
  v19 = *(float *)&v4;
  if (one-time initialization token for legacyInterpolation != -1)
  {
    v28 = v4;
    swift_once();
    v20 = *((float *)&v28 + 1);
    v19 = *(float *)&v28;
  }
  v14 = v17 | (v16 << 32);
  v21 = *(float *)&v18 * 0.0078125;
  v22 = *((float *)&v18 + 1) * 0.0078125;
  v23 = v19 * 0.0078125;
  v24 = v20 * 0.0078125;
  swift_beginAccess();
  if ((static Color.Resolved.legacyInterpolation & 1) == 0)
  {
    v29[0] = *(float *)&v18 * 0.0078125;
    v29[1] = *((float *)&v18 + 1) * 0.0078125;
    v29[2] = v23;
    v29[3] = v24;
    v21 = ResolvedGradient.ColorSpace.convertOut(_:)(v29);
    v22 = v25;
    v23 = v26;
    v24 = v27;
  }
  v15 = 0;
  v12 = LODWORD(v21) | ((unint64_t)LODWORD(v22) << 32);
  v13 = LODWORD(v23) | ((unint64_t)LODWORD(v24) << 32);
  v11 = v2[13];
LABEL_13:
  *(_QWORD *)v11 = v12;
  *(_QWORD *)(v11 + 8) = v13;
  *(_QWORD *)(v11 + 16) = v6;
  *(_QWORD *)(v11 + 24) = v7;
  *(_QWORD *)(v11 + 32) = v8;
  *(_DWORD *)(v11 + 40) = v14;
  *(_BYTE *)(v11 + 44) = BYTE4(v14);
  *(_BYTE *)(v11 + 45) = v15;
  free(v2);
}

void protocol witness for Animatable.animatableData.setter in conformance _ShapeStyle_Pack.Effect(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  __int128 v4;
  uint64_t v5;
  char v6;
  char v7;
  uint64_t v8;
  unint64_t v9;
  unsigned __int8 v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  unsigned int v19;
  unsigned __int8 v20;
  _QWORD v21[2];
  __int128 v22;
  uint64_t v23;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  v4 = *(_OWORD *)(a1 + 24);
  v5 = *(_QWORD *)(a1 + 40);
  v6 = *(_BYTE *)(a1 + 48);
  *((_DWORD *)v1 + 12) = *(_DWORD *)a1;
  v7 = *((_BYTE *)v1 + 45) | v6;
  if ((v7 & 1) != 0)
  {
    v8 = 0;
    v9 = 0;
    *(_OWORD *)v1 = 0u;
    *((_OWORD *)v1 + 1) = 0u;
  }
  else
  {
    v10 = *((_BYTE *)v1 + 44);
    v11 = *((_DWORD *)v1 + 10);
    v13 = *v1;
    v12 = v1[1];
    v14 = HIDWORD(*v1);
    v15 = v1[4];
    v21[0] = v3;
    v21[1] = v2;
    v22 = v4;
    v23 = v5;
    *(_QWORD *)&v16 = __PAIR64__(v14, v13);
    *((_QWORD *)&v16 + 1) = v12;
    v17 = *((_OWORD *)v1 + 1);
    v18 = v15;
    v19 = v11;
    v20 = v10;
    ResolvedShadowStyle.animatableData.setter((uint64_t)v21);
    v8 = v18;
    v9 = v19 | ((unint64_t)v20 << 32);
    *(_OWORD *)v1 = v16;
    *((_OWORD *)v1 + 1) = v17;
  }
  v1[4] = v8;
  *((_DWORD *)v1 + 10) = v9;
  *((_BYTE *)v1 + 44) = BYTE4(v9);
  *((_BYTE *)v1 + 45) = v7 & 1;
}

uint64_t (*protocol witness for Animatable.animatableData.modify in conformance _ShapeStyle_Pack.Effect(_QWORD *a1))()
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = _ShapeStyle_Pack.Effect.animatableData.modify(v2);
  return protocol witness for Animatable.animatableData.modify in conformance LinearGradient._Paint;
}

void _ShapeStyle_Pack.Effect.Kind.AnimatableData.init(_:)(uint64_t a1@<X0>, int8x16_t *a2@<X8>)
{
  char v3;
  uint64_t v4;
  int8x16_t v5;
  int8x16_t v6;
  int8x16_t v7;
  int64x2_t v8;
  int8x16_t v9;
  float32x2_t v10;
  float32x2_t v11;
  float32x2_t v12;
  int8x16_t v13;
  int32x2_t v14;
  int8x16_t v15;
  int64x2_t v16;
  int8x16_t v17;
  float v18[4];

  v3 = *(_BYTE *)(a1 + 45);
  if ((v3 & 1) != 0)
  {
    v4 = 0;
    v5 = 0uLL;
    v6 = 0uLL;
  }
  else
  {
    v4 = *(_QWORD *)(a1 + 32);
    v8 = *(int64x2_t *)a1;
    v7 = *(int8x16_t *)(a1 + 16);
    v17 = v7;
    if (one-time initialization token for legacyInterpolation != -1)
    {
      v16 = *(int64x2_t *)a1;
      swift_once();
      v8 = v16;
    }
    *(int32x2_t *)v7.i8 = vmovn_s64(v8);
    v15 = v7;
    v14 = vshrn_n_s64(v8, 0x20uLL);
    swift_beginAccess();
    if ((static Color.Resolved.legacyInterpolation & 1) != 0)
    {
      v11 = (float32x2_t)v14;
      v10 = *(float32x2_t *)v15.i8;
    }
    else
    {
      ResolvedGradient.ColorSpace.convertIn(_:)(v18, v15, *(float *)v14.i32, v15.u32[1], *(float *)&v14.i32[1], v9);
      v11 = (float32x2_t)__PAIR64__(LODWORD(v18[3]), LODWORD(v18[1]));
      v10 = (float32x2_t)__PAIR64__(LODWORD(v18[2]), LODWORD(v18[0]));
    }
    v12 = vmul_f32(v10, (float32x2_t)0x4300000043000000);
    v13.i64[0] = v12.u32[0];
    v13.i64[1] = v12.u32[1];
    v5 = vorrq_s8((int8x16_t)vshll_n_s32((int32x2_t)vmul_f32(v11, (float32x2_t)0x4300000043000000), 0x20uLL), v13);
    v6 = v17;
  }
  *a2 = v5;
  a2[1] = v6;
  a2[2].i64[0] = v4;
  a2[2].i8[8] = v3;
}

void _ShapeStyle_Pack.Effect.Kind.AnimatableData.set(effect:)(uint64_t a1)
{
  uint64_t v1;
  int8x16_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  __int128 v7;
  int64x2_t v8;
  uint64_t v9;
  uint64_t v10;
  float32x2_t v11;
  float32x2_t v12;
  float32x2_t v13;
  int32x2_t v14;
  float *v15;
  __int32 v16;
  __int32 v17;
  int8x16_t v18;
  float32x2_t v19;
  float32x2_t v20;
  float32x2_t v21;
  float32x2_t v22;
  __int128 v23;
  float v24[5];
  char v25;
  float32x2x2_t v26;

  v3 = 0uLL;
  if ((*(_BYTE *)(a1 + 45) & 1) != 0 || (*(_BYTE *)(v1 + 40) & 1) != 0)
  {
    v4 = 0;
    v5 = 0;
    v6 = 1;
    v7 = 0uLL;
  }
  else
  {
    v8 = *(int64x2_t *)v1;
    v23 = *(_OWORD *)(v1 + 16);
    v4 = *(_QWORD *)(v1 + 32);
    v9 = *(unsigned __int8 *)(a1 + 44);
    v10 = *(unsigned int *)(a1 + 40);
    v11 = (float32x2_t)vmovn_s64(v8);
    v12 = (float32x2_t)vshrn_n_s64(v8, 0x20uLL);
    if (one-time initialization token for legacyInterpolation != -1)
    {
      v19 = v12;
      v21 = v11;
      swift_once();
      v12 = v19;
      v11 = v21;
    }
    v5 = v10 | (v9 << 32);
    v20 = vmul_f32(v11, (float32x2_t)0x3C0000003C000000);
    v22 = vmul_f32(v12, (float32x2_t)0x3C0000003C000000);
    swift_beginAccess();
    if ((static Color.Resolved.legacyInterpolation & 1) != 0)
    {
      v13 = v20;
      v14 = (int32x2_t)v22;
    }
    else
    {
      v25 = 2;
      v15 = v24;
      v26.val[0] = v20;
      v26.val[1] = v22;
      vst2_f32(v15, v26);
      v13.f32[0] = ResolvedGradient.ColorSpace.convertOut(_:)(v24);
      v14.i32[1] = v16;
      v13.i32[1] = v17;
    }
    v6 = 0;
    v18.i64[0] = v13.u32[0];
    v18.i64[1] = v13.u32[1];
    v3 = vorrq_s8((int8x16_t)vshll_n_s32(v14, 0x20uLL), v18);
    v7 = v23;
  }
  *(int8x16_t *)a1 = v3;
  *(_OWORD *)(a1 + 16) = v7;
  *(_QWORD *)(a1 + 32) = v4;
  *(_DWORD *)(a1 + 40) = v5;
  *(_BYTE *)(a1 + 44) = BYTE4(v5);
  *(_BYTE *)(a1 + 45) = v6;
}

uint64_t static _ShapeStyle_Pack.Effect.Kind.AnimatableData.+= infix(_:_:)(uint64_t result, uint64_t a2)
{
  double v2;
  float64x2_t v3;
  int64x2_t v4;
  double v5;
  float32x2_t v6;
  int8x16_t v7;
  float64x2_t v8;

  if ((*(_BYTE *)(a2 + 40) & 1) == 0)
  {
    v2 = *(double *)(a2 + 32);
    v4 = *(int64x2_t *)a2;
    v3 = *(float64x2_t *)(a2 + 16);
    if ((*(_BYTE *)(result + 40) & 1) != 0)
    {
      *(int64x2_t *)result = v4;
      *(float64x2_t *)(result + 16) = v3;
      v5 = v2;
    }
    else
    {
      v5 = *(double *)(result + 32) + v2;
      v6 = vadd_f32((float32x2_t)vmovn_s64(v4), (float32x2_t)vmovn_s64(*(int64x2_t *)result));
      v7.i64[0] = v6.u32[0];
      v7.i64[1] = v6.u32[1];
      v8 = vaddq_f64(*(float64x2_t *)(result + 16), v3);
      *(int8x16_t *)result = vorrq_s8((int8x16_t)vshll_n_s32((int32x2_t)vadd_f32((float32x2_t)vshrn_n_s64(v4, 0x20uLL), (float32x2_t)vshrn_n_s64(*(int64x2_t *)result, 0x20uLL)), 0x20uLL), v7);
      *(float64x2_t *)(result + 16) = v8;
    }
    *(double *)(result + 32) = v5;
    *(_BYTE *)(result + 40) = 0;
  }
  return result;
}

uint64_t static _ShapeStyle_Pack.Effect.Kind.AnimatableData.-= infix(_:_:)(uint64_t result, uint64_t a2)
{
  double v2;
  float64x2_t v3;
  int64x2_t v4;
  double v5;
  float32x2_t v6;
  int8x16_t v7;
  float64x2_t v8;

  if ((*(_BYTE *)(a2 + 40) & 1) == 0)
  {
    v2 = *(double *)(a2 + 32);
    v4 = *(int64x2_t *)a2;
    v3 = *(float64x2_t *)(a2 + 16);
    if ((*(_BYTE *)(result + 40) & 1) != 0)
    {
      *(int64x2_t *)result = v4;
      *(float64x2_t *)(result + 16) = v3;
      v5 = v2;
    }
    else
    {
      v5 = *(double *)(result + 32) - v2;
      v6 = vsub_f32((float32x2_t)vmovn_s64(*(int64x2_t *)result), (float32x2_t)vmovn_s64(v4));
      v7.i64[0] = v6.u32[0];
      v7.i64[1] = v6.u32[1];
      v8 = vsubq_f64(*(float64x2_t *)(result + 16), v3);
      *(int8x16_t *)result = vorrq_s8((int8x16_t)vshll_n_s32((int32x2_t)vsub_f32((float32x2_t)vshrn_n_s64(*(int64x2_t *)result, 0x20uLL), (float32x2_t)vshrn_n_s64(v4, 0x20uLL)), 0x20uLL), v7);
      *(float64x2_t *)(result + 16) = v8;
    }
    *(double *)(result + 32) = v5;
    *(_BYTE *)(result + 40) = 0;
  }
  return result;
}

uint64_t static _ShapeStyle_Pack.Effect.Kind.AnimatableData.+ infix(_:_:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  char v3;
  int64x2_t v4;
  double v5;
  int64x2_t v6;
  float64x2_t v7;
  float32x2_t v8;
  int8x16_t v9;

  v3 = *(_BYTE *)(result + 40);
  v4 = *(int64x2_t *)result;
  if ((*(_BYTE *)(a2 + 40) & 1) != 0)
  {
    v5 = *(double *)(result + 32);
    v6 = *(int64x2_t *)result;
    v7 = *(float64x2_t *)(result + 16);
  }
  else
  {
    v5 = *(double *)(a2 + 32);
    v6 = *(int64x2_t *)a2;
    v7 = *(float64x2_t *)(a2 + 16);
    v3 = 0;
    if ((*(_BYTE *)(result + 40) & 1) == 0)
    {
      v7 = vaddq_f64(*(float64x2_t *)(result + 16), v7);
      v5 = *(double *)(result + 32) + v5;
      v8 = vadd_f32((float32x2_t)vmovn_s64(v4), (float32x2_t)vmovn_s64(v6));
      v9.i64[0] = v8.u32[0];
      v9.i64[1] = v8.u32[1];
      v6 = (int64x2_t)vorrq_s8((int8x16_t)vshll_n_s32((int32x2_t)vadd_f32((float32x2_t)vshrn_n_s64(v4, 0x20uLL), (float32x2_t)vshrn_n_s64(v6, 0x20uLL)), 0x20uLL), v9);
    }
  }
  *(int64x2_t *)a3 = v6;
  *(float64x2_t *)(a3 + 16) = v7;
  *(double *)(a3 + 32) = v5;
  *(_BYTE *)(a3 + 40) = v3;
  return result;
}

uint64_t static _ShapeStyle_Pack.Effect.Kind.AnimatableData.- infix(_:_:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  char v3;
  int64x2_t v4;
  double v5;
  int64x2_t v6;
  float64x2_t v7;
  float32x2_t v8;
  int8x16_t v9;

  v3 = *(_BYTE *)(result + 40);
  v4 = *(int64x2_t *)result;
  if ((*(_BYTE *)(a2 + 40) & 1) != 0)
  {
    v5 = *(double *)(result + 32);
    v6 = *(int64x2_t *)result;
    v7 = *(float64x2_t *)(result + 16);
  }
  else
  {
    v5 = *(double *)(a2 + 32);
    v6 = *(int64x2_t *)a2;
    v7 = *(float64x2_t *)(a2 + 16);
    v3 = 0;
    if ((*(_BYTE *)(result + 40) & 1) == 0)
    {
      v7 = vsubq_f64(*(float64x2_t *)(result + 16), v7);
      v5 = *(double *)(result + 32) - v5;
      v8 = vsub_f32((float32x2_t)vmovn_s64(v4), (float32x2_t)vmovn_s64(v6));
      v9.i64[0] = v8.u32[0];
      v9.i64[1] = v8.u32[1];
      v6 = (int64x2_t)vorrq_s8((int8x16_t)vshll_n_s32((int32x2_t)vsub_f32((float32x2_t)vshrn_n_s64(v4, 0x20uLL), (float32x2_t)vshrn_n_s64(v6, 0x20uLL)), 0x20uLL), v9);
    }
  }
  *(int64x2_t *)a3 = v6;
  *(float64x2_t *)(a3 + 16) = v7;
  *(double *)(a3 + 32) = v5;
  *(_BYTE *)(a3 + 40) = v3;
  return result;
}

Swift::Void __swiftcall _ShapeStyle_Pack.Effect.Kind.AnimatableData.scale(by:)(Swift::Double by)
{
  uint64_t v1;
  float v2;
  float32x2_t v3;
  double v4;
  int8x16_t v5;
  float64x2_t v6;

  if (by != 1.0 && (*(_BYTE *)(v1 + 40) & 1) == 0)
  {
    v2 = by;
    v3 = vmul_n_f32((float32x2_t)vmovn_s64(*(int64x2_t *)v1), v2);
    v4 = *(double *)(v1 + 32);
    v5.i64[0] = v3.u32[0];
    v5.i64[1] = v3.u32[1];
    v6 = vmulq_n_f64(*(float64x2_t *)(v1 + 16), by);
    *(int8x16_t *)v1 = vorrq_s8((int8x16_t)vshll_n_s32((int32x2_t)vmul_n_f32((float32x2_t)vshrn_n_s64(*(int64x2_t *)v1, 0x20uLL), v2), 0x20uLL), v5);
    *(float64x2_t *)(v1 + 16) = v6;
    *(double *)(v1 + 32) = v4 * by;
    *(_BYTE *)(v1 + 40) = 0;
  }
}

double _ShapeStyle_Pack.Effect.Kind.AnimatableData.magnitudeSquared.getter()
{
  uint64_t v0;
  double result;

  result = 0.0;
  if ((*(_BYTE *)(v0 + 40) & 1) == 0)
    return *(double *)(v0 + 16) * *(double *)(v0 + 16)
         + *(double *)(v0 + 32) * *(double *)(v0 + 32)
         + *(double *)(v0 + 24) * *(double *)(v0 + 24)
         + (float)(*(float *)(v0 + 8) * *(float *)(v0 + 8))
         + (float)(*(float *)(v0 + 12) * *(float *)(v0 + 12))
         + (float)(*(float *)(v0 + 4) * *(float *)(v0 + 4))
         + (float)(*(float *)v0 * *(float *)v0);
  return result;
}

double protocol witness for VectorArithmetic.scale(by:) in conformance _ShapeStyle_Pack.Effect.Kind.AnimatableData(double result)
{
  uint64_t v1;
  float v2;
  float32x2_t v3;
  double v4;
  int8x16_t v5;
  float64x2_t v6;

  if (result != 1.0 && (*(_BYTE *)(v1 + 40) & 1) == 0)
  {
    v2 = result;
    v3 = vmul_n_f32((float32x2_t)vmovn_s64(*(int64x2_t *)v1), v2);
    v4 = *(double *)(v1 + 32);
    v5.i64[0] = v3.u32[0];
    v5.i64[1] = v3.u32[1];
    v6 = vmulq_n_f64(*(float64x2_t *)(v1 + 16), result);
    *(int8x16_t *)v1 = vorrq_s8((int8x16_t)vshll_n_s32((int32x2_t)vmul_n_f32((float32x2_t)vshrn_n_s64(*(int64x2_t *)v1, 0x20uLL), v2), 0x20uLL), v5);
    *(float64x2_t *)(v1 + 16) = v6;
    result = v4 * result;
    *(double *)(v1 + 32) = result;
    *(_BYTE *)(v1 + 40) = 0;
  }
  return result;
}

double protocol witness for static AdditiveArithmetic.zero.getter in conformance _ShapeStyle_Pack.Effect.Kind.AnimatableData@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_QWORD *)(a1 + 32) = 0;
  result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_BYTE *)(a1 + 40) = 1;
  return result;
}

uint64_t protocol witness for static AdditiveArithmetic.+ infix(_:_:) in conformance _ShapeStyle_Pack.Effect.Kind.AnimatableData@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  char v3;
  int64x2_t v4;
  double v5;
  int64x2_t v6;
  float64x2_t v7;
  float32x2_t v8;
  int8x16_t v9;

  v3 = *(_BYTE *)(result + 40);
  v4 = *(int64x2_t *)result;
  if ((*(_BYTE *)(a2 + 40) & 1) != 0)
  {
    v5 = *(double *)(result + 32);
    v6 = *(int64x2_t *)result;
    v7 = *(float64x2_t *)(result + 16);
  }
  else
  {
    v5 = *(double *)(a2 + 32);
    v6 = *(int64x2_t *)a2;
    v7 = *(float64x2_t *)(a2 + 16);
    v3 = 0;
    if ((*(_BYTE *)(result + 40) & 1) == 0)
    {
      v7 = vaddq_f64(*(float64x2_t *)(result + 16), v7);
      v5 = *(double *)(result + 32) + v5;
      v8 = vadd_f32((float32x2_t)vmovn_s64(v4), (float32x2_t)vmovn_s64(v6));
      v9.i64[0] = v8.u32[0];
      v9.i64[1] = v8.u32[1];
      v6 = (int64x2_t)vorrq_s8((int8x16_t)vshll_n_s32((int32x2_t)vadd_f32((float32x2_t)vshrn_n_s64(v4, 0x20uLL), (float32x2_t)vshrn_n_s64(v6, 0x20uLL)), 0x20uLL), v9);
    }
  }
  *(int64x2_t *)a3 = v6;
  *(float64x2_t *)(a3 + 16) = v7;
  *(double *)(a3 + 32) = v5;
  *(_BYTE *)(a3 + 40) = v3;
  return result;
}

uint64_t protocol witness for static AdditiveArithmetic.+= infix(_:_:) in conformance _ShapeStyle_Pack.Effect.Kind.AnimatableData(uint64_t result, uint64_t a2)
{
  double v2;
  float64x2_t v3;
  int64x2_t v4;
  double v5;
  float32x2_t v6;
  int8x16_t v7;
  float64x2_t v8;

  if ((*(_BYTE *)(a2 + 40) & 1) == 0)
  {
    v2 = *(double *)(a2 + 32);
    v4 = *(int64x2_t *)a2;
    v3 = *(float64x2_t *)(a2 + 16);
    if ((*(_BYTE *)(result + 40) & 1) != 0)
    {
      *(int64x2_t *)result = v4;
      *(float64x2_t *)(result + 16) = v3;
      v5 = v2;
    }
    else
    {
      v5 = *(double *)(result + 32) + v2;
      v6 = vadd_f32((float32x2_t)vmovn_s64(v4), (float32x2_t)vmovn_s64(*(int64x2_t *)result));
      v7.i64[0] = v6.u32[0];
      v7.i64[1] = v6.u32[1];
      v8 = vaddq_f64(*(float64x2_t *)(result + 16), v3);
      *(int8x16_t *)result = vorrq_s8((int8x16_t)vshll_n_s32((int32x2_t)vadd_f32((float32x2_t)vshrn_n_s64(v4, 0x20uLL), (float32x2_t)vshrn_n_s64(*(int64x2_t *)result, 0x20uLL)), 0x20uLL), v7);
      *(float64x2_t *)(result + 16) = v8;
    }
    *(double *)(result + 32) = v5;
    *(_BYTE *)(result + 40) = 0;
  }
  return result;
}

uint64_t protocol witness for static AdditiveArithmetic.- infix(_:_:) in conformance _ShapeStyle_Pack.Effect.Kind.AnimatableData@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  char v3;
  int64x2_t v4;
  double v5;
  int64x2_t v6;
  float64x2_t v7;
  float32x2_t v8;
  int8x16_t v9;

  v3 = *(_BYTE *)(result + 40);
  v4 = *(int64x2_t *)result;
  if ((*(_BYTE *)(a2 + 40) & 1) != 0)
  {
    v5 = *(double *)(result + 32);
    v6 = *(int64x2_t *)result;
    v7 = *(float64x2_t *)(result + 16);
  }
  else
  {
    v5 = *(double *)(a2 + 32);
    v6 = *(int64x2_t *)a2;
    v7 = *(float64x2_t *)(a2 + 16);
    v3 = 0;
    if ((*(_BYTE *)(result + 40) & 1) == 0)
    {
      v7 = vsubq_f64(*(float64x2_t *)(result + 16), v7);
      v5 = *(double *)(result + 32) - v5;
      v8 = vsub_f32((float32x2_t)vmovn_s64(v4), (float32x2_t)vmovn_s64(v6));
      v9.i64[0] = v8.u32[0];
      v9.i64[1] = v8.u32[1];
      v6 = (int64x2_t)vorrq_s8((int8x16_t)vshll_n_s32((int32x2_t)vsub_f32((float32x2_t)vshrn_n_s64(v4, 0x20uLL), (float32x2_t)vshrn_n_s64(v6, 0x20uLL)), 0x20uLL), v9);
    }
  }
  *(int64x2_t *)a3 = v6;
  *(float64x2_t *)(a3 + 16) = v7;
  *(double *)(a3 + 32) = v5;
  *(_BYTE *)(a3 + 40) = v3;
  return result;
}

uint64_t protocol witness for static AdditiveArithmetic.-= infix(_:_:) in conformance _ShapeStyle_Pack.Effect.Kind.AnimatableData(uint64_t result, uint64_t a2)
{
  double v2;
  float64x2_t v3;
  int64x2_t v4;
  double v5;
  float32x2_t v6;
  int8x16_t v7;
  float64x2_t v8;

  if ((*(_BYTE *)(a2 + 40) & 1) == 0)
  {
    v2 = *(double *)(a2 + 32);
    v4 = *(int64x2_t *)a2;
    v3 = *(float64x2_t *)(a2 + 16);
    if ((*(_BYTE *)(result + 40) & 1) != 0)
    {
      *(int64x2_t *)result = v4;
      *(float64x2_t *)(result + 16) = v3;
      v5 = v2;
    }
    else
    {
      v5 = *(double *)(result + 32) - v2;
      v6 = vsub_f32((float32x2_t)vmovn_s64(*(int64x2_t *)result), (float32x2_t)vmovn_s64(v4));
      v7.i64[0] = v6.u32[0];
      v7.i64[1] = v6.u32[1];
      v8 = vsubq_f64(*(float64x2_t *)(result + 16), v3);
      *(int8x16_t *)result = vorrq_s8((int8x16_t)vshll_n_s32((int32x2_t)vsub_f32((float32x2_t)vshrn_n_s64(*(int64x2_t *)result, 0x20uLL), (float32x2_t)vshrn_n_s64(v4, 0x20uLL)), 0x20uLL), v7);
      *(float64x2_t *)(result + 16) = v8;
    }
    *(double *)(result + 32) = v5;
    *(_BYTE *)(result + 40) = 0;
  }
  return result;
}

double key path getter for _ShapeStyle_Pack.Effect.Kind.animatableData : _ShapeStyle_Pack.Effect.Kind@<D0>(int8x16_t *a1@<X8>)
{
  uint64_t v2;
  __int8 v3;
  double result;
  int8x16_t v5;
  int8x16_t v6[2];
  uint64_t v7;
  __int8 v8;

  _ShapeStyle_Pack.Effect.Kind.animatableData.getter(v6);
  v2 = v7;
  v3 = v8;
  result = *(double *)v6[0].i64;
  v5 = v6[1];
  *a1 = v6[0];
  a1[1] = v5;
  a1[2].i64[0] = v2;
  a1[2].i8[8] = v3;
  return result;
}

double key path setter for _ShapeStyle_Pack.Effect.Kind.animatableData : _ShapeStyle_Pack.Effect.Kind(uint64_t a1, uint64_t *a2)
{
  double result;
  uint64_t v4;
  __int128 v5;
  int v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  int v17;
  char v18;
  _DWORD v19[2];
  uint64_t v20;
  __int128 v21;
  uint64_t v22;

  if ((*((_BYTE *)a2 + 45) & 1) != 0 || (*(_BYTE *)(a1 + 40) & 1) != 0)
  {
    result = 0.0;
    *(_OWORD *)((char *)a2 + 29) = 0u;
    *(_OWORD *)a2 = 0u;
    *((_OWORD *)a2 + 1) = 0u;
    *((_BYTE *)a2 + 45) = 1;
  }
  else
  {
    v4 = *(_QWORD *)(a1 + 8);
    v5 = *(_OWORD *)(a1 + 16);
    v6 = *((_DWORD *)a2 + 10);
    v7 = *(_QWORD *)(a1 + 32);
    v8 = *((_BYTE *)a2 + 44);
    v10 = *a2;
    v9 = a2[1];
    v11 = HIDWORD(*a2);
    v12 = a2[4];
    v13 = HIDWORD(*(_QWORD *)a1);
    v19[0] = *(_QWORD *)a1;
    v19[1] = v13;
    v20 = v4;
    v21 = v5;
    v22 = v7;
    *(_QWORD *)&v14 = __PAIR64__(v11, v10);
    *((_QWORD *)&v14 + 1) = v9;
    v15 = *((_OWORD *)a2 + 1);
    v16 = v12;
    v17 = v6;
    v18 = v8;
    ResolvedShadowStyle.animatableData.setter((uint64_t)v19);
    result = *(double *)&v14;
    *(_OWORD *)a2 = v14;
    *((_OWORD *)a2 + 1) = v15;
    a2[4] = v16;
    *((_BYTE *)a2 + 44) = v18;
    *((_DWORD *)a2 + 10) = v17;
    *((_BYTE *)a2 + 45) = 0;
  }
  return result;
}

void (*_ShapeStyle_Pack.Effect.Kind.animatableData.modify(int8x16_t **a1))(uint64_t **a1, char a2)
{
  uint64_t v1;
  int8x16_t *v3;
  char v4;
  uint64_t v5;
  int8x16_t v6;
  int8x16_t v7;
  int8x16_t v8;
  int64x2_t v9;
  int8x16_t v10;
  float32x2_t v11;
  float32x2_t v12;
  float32x2_t v13;
  int8x16_t v14;
  int32x2_t v16;
  int8x16_t v17;
  int64x2_t v18;
  int8x16_t v19;
  float v20[4];

  v3 = (int8x16_t *)malloc(0x80uLL);
  *a1 = v3;
  v3[7].i64[1] = v1;
  v4 = *(_BYTE *)(v1 + 45);
  if ((v4 & 1) != 0)
  {
    v5 = 0;
    v6 = 0uLL;
    v7 = 0uLL;
  }
  else
  {
    v5 = *(_QWORD *)(v1 + 32);
    v9 = *(int64x2_t *)v1;
    v8 = *(int8x16_t *)(v1 + 16);
    v19 = v8;
    if (one-time initialization token for legacyInterpolation != -1)
    {
      v18 = *(int64x2_t *)v1;
      swift_once();
      v9 = v18;
    }
    *(int32x2_t *)v8.i8 = vmovn_s64(v9);
    v17 = v8;
    v16 = vshrn_n_s64(v9, 0x20uLL);
    swift_beginAccess();
    if ((static Color.Resolved.legacyInterpolation & 1) != 0)
    {
      v12 = (float32x2_t)v16;
      v11 = *(float32x2_t *)v17.i8;
    }
    else
    {
      ResolvedGradient.ColorSpace.convertIn(_:)(v20, v17, *(float *)v16.i32, v17.u32[1], *(float *)&v16.i32[1], v10);
      v12 = (float32x2_t)__PAIR64__(LODWORD(v20[3]), LODWORD(v20[1]));
      v11 = (float32x2_t)__PAIR64__(LODWORD(v20[2]), LODWORD(v20[0]));
    }
    v13 = vmul_f32(v11, (float32x2_t)0x4300000043000000);
    v14.i64[0] = v13.u32[0];
    v14.i64[1] = v13.u32[1];
    v6 = vorrq_s8((int8x16_t)vshll_n_s32((int32x2_t)vmul_f32(v12, (float32x2_t)0x4300000043000000), 0x20uLL), v14);
    v7 = v19;
  }
  *v3 = v6;
  v3[1] = v7;
  v3[2].i64[0] = v5;
  v3[2].i8[8] = v4;
  return _ShapeStyle_Pack.Effect.Kind.animatableData.modify;
}

void _ShapeStyle_Pack.Effect.Kind.animatableData.modify(uint64_t **a1, char a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  uint64_t v23;
  float v24[4];

  v2 = *a1;
  v3 = (*a1)[15];
  v4 = (*a1)[2];
  v5 = (*a1)[3];
  v6 = (*a1)[4];
  if ((a2 & 1) == 0)
  {
    if ((*(_BYTE *)(v3 + 45) & 1) == 0 && (v2[5] & 1) == 0)
      goto LABEL_8;
LABEL_7:
    v7 = 0;
    v8 = 0;
    v4 = 0;
    v5 = 0;
    v6 = 0;
    v9 = 0;
    v10 = 1;
    goto LABEL_13;
  }
  if ((*(_BYTE *)(v3 + 45) & 1) != 0 || (v2[5] & 1) != 0)
    goto LABEL_7;
LABEL_8:
  v11 = *(unsigned __int8 *)(v3 + 44);
  v12 = *(unsigned int *)(v3 + 40);
  v13 = **a1;
  LODWORD(v15) = HIDWORD((*a1)[1]);
  LODWORD(v14) = (*a1)[1];
  if (one-time initialization token for legacyInterpolation != -1)
  {
    v23 = (*a1)[1];
    swift_once();
    v15 = *((float *)&v23 + 1);
    v14 = *(float *)&v23;
  }
  v9 = v12 | (v11 << 32);
  v16 = *(float *)&v13 * 0.0078125;
  v17 = *((float *)&v13 + 1) * 0.0078125;
  v18 = v14 * 0.0078125;
  v19 = v15 * 0.0078125;
  swift_beginAccess();
  if ((static Color.Resolved.legacyInterpolation & 1) == 0)
  {
    v24[0] = *(float *)&v13 * 0.0078125;
    v24[1] = *((float *)&v13 + 1) * 0.0078125;
    v24[2] = v18;
    v24[3] = v19;
    v16 = ResolvedGradient.ColorSpace.convertOut(_:)(v24);
    v17 = v20;
    v18 = v21;
    v19 = v22;
  }
  v10 = 0;
  v7 = LODWORD(v16) | ((unint64_t)LODWORD(v17) << 32);
  v8 = LODWORD(v18) | ((unint64_t)LODWORD(v19) << 32);
  v3 = v2[15];
LABEL_13:
  *(_QWORD *)v3 = v7;
  *(_QWORD *)(v3 + 8) = v8;
  *(_QWORD *)(v3 + 16) = v4;
  *(_QWORD *)(v3 + 24) = v5;
  *(_QWORD *)(v3 + 32) = v6;
  *(_DWORD *)(v3 + 40) = v9;
  *(_BYTE *)(v3 + 44) = BYTE4(v9);
  *(_BYTE *)(v3 + 45) = v10;
  free(v2);
}

double protocol witness for Animatable.animatableData.setter in conformance _ShapeStyle_Pack.Effect.Kind(uint64_t a1)
{
  uint64_t *v1;
  double result;
  uint64_t v3;
  __int128 v4;
  int v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  int v16;
  char v17;
  _DWORD v18[2];
  uint64_t v19;
  __int128 v20;
  uint64_t v21;

  if ((*((_BYTE *)v1 + 45) & 1) != 0 || (*(_BYTE *)(a1 + 40) & 1) != 0)
  {
    result = 0.0;
    *(_OWORD *)((char *)v1 + 29) = 0u;
    *(_OWORD *)v1 = 0u;
    *((_OWORD *)v1 + 1) = 0u;
    *((_BYTE *)v1 + 45) = 1;
  }
  else
  {
    v3 = *(_QWORD *)(a1 + 8);
    v4 = *(_OWORD *)(a1 + 16);
    v5 = *((_DWORD *)v1 + 10);
    v6 = *(_QWORD *)(a1 + 32);
    v7 = *((_BYTE *)v1 + 44);
    v9 = *v1;
    v8 = v1[1];
    v10 = HIDWORD(*v1);
    v11 = v1[4];
    v12 = HIDWORD(*(_QWORD *)a1);
    v18[0] = *(_QWORD *)a1;
    v18[1] = v12;
    v19 = v3;
    v20 = v4;
    v21 = v6;
    *(_QWORD *)&v13 = __PAIR64__(v10, v9);
    *((_QWORD *)&v13 + 1) = v8;
    v14 = *((_OWORD *)v1 + 1);
    v15 = v11;
    v16 = v5;
    v17 = v7;
    ResolvedShadowStyle.animatableData.setter((uint64_t)v18);
    result = *(double *)&v13;
    *(_OWORD *)v1 = v13;
    *((_OWORD *)v1 + 1) = v14;
    v1[4] = v15;
    *((_BYTE *)v1 + 44) = v17;
    *((_DWORD *)v1 + 10) = v16;
    *((_BYTE *)v1 + 45) = 0;
  }
  return result;
}

uint64_t (*protocol witness for Animatable.animatableData.modify in conformance _ShapeStyle_Pack.Effect.Kind(int8x16_t ***a1))()
{
  int8x16_t **v2;

  v2 = (int8x16_t **)malloc(0x28uLL);
  *a1 = v2;
  v2[4] = (int8x16_t *)_ShapeStyle_Pack.Effect.Kind.animatableData.modify(v2);
  return protocol witness for Animatable.animatableData.modify in conformance LinearGradient._Paint;
}

uint64_t key path setter for _ShapeStyle_Shape.stylePack : _ShapeStyle_Shape(uint64_t *a1)
{
  uint64_t v1;
  uint64_t (*v2)(uint64_t *, char);
  _QWORD *v3;
  _QWORD v5[4];

  v1 = *a1;
  swift_bridgeObjectRetain();
  v2 = _ShapeStyle_Shape.stylePack.modify(v5);
  *v3 = v1;
  swift_bridgeObjectRelease();
  return v2(v5, 0);
}

uint64_t _ShapeStyle_Shape.stylePack.setter(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;

  v2 = *a1;
  result = outlined consume of _ShapeStyle_Shape.Result(*(_QWORD *)(v1 + 32), *(_BYTE *)(v1 + 40));
  *(_QWORD *)(v1 + 32) = v2;
  *(_BYTE *)(v1 + 40) = 1;
  return result;
}

float ResolvedMulticolorStyle.accentColor.getter()
{
  uint64_t v0;

  return *(float *)v0;
}

void ResolvedMulticolorStyle.accentColor.setter(float a1, float a2, float a3, float a4)
{
  float *v4;

  *v4 = a1;
  v4[1] = a2;
  v4[2] = a3;
  v4[3] = a4;
}

uint64_t (*ResolvedMulticolorStyle.accentColor.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

void ResolvedMulticolorStyle.colorScheme.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 16);
}

_BYTE *ResolvedMulticolorStyle.colorScheme.setter(_BYTE *result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 16) = *result;
  return result;
}

uint64_t (*ResolvedMulticolorStyle.colorScheme.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

void ResolvedMulticolorStyle.colorSchemeContrast.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 17);
}

_BYTE *ResolvedMulticolorStyle.colorSchemeContrast.setter(_BYTE *result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 17) = *result;
  return result;
}

uint64_t (*ResolvedMulticolorStyle.colorSchemeContrast.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

void ResolvedMulticolorStyle.displayGamut.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 18);
}

_BYTE *ResolvedMulticolorStyle.displayGamut.setter(_BYTE *result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 18) = *result;
  return result;
}

uint64_t (*ResolvedMulticolorStyle.displayGamut.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

void *ResolvedMulticolorStyle.bundle.getter()
{
  uint64_t v0;
  void *v1;
  id v2;

  v1 = *(void **)(v0 + 24);
  v2 = v1;
  return v1;
}

void ResolvedMulticolorStyle.bundle.setter(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 24) = a1;
}

uint64_t (*ResolvedMulticolorStyle.bundle.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t ResolvedMulticolorStyle.init(in:bundle:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  float v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  char v14;
  char v15;
  uint64_t result;
  char v17;
  Swift::Int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  Swift::Int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  Swift::Int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31[2];

  v6 = *a1;
  v5 = a1[1];
  v31[0] = *a1;
  v31[1] = v5;
  v7 = specialized Color.AccentColorProvider.resolve(in:)(v31);
  v9 = v8;
  v11 = v10;
  v13 = v12;
  if (v5)
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v6, &v30);
    swift_release_n();
    swift_release_n();
    v14 = v30;
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v6, &v30);
    swift_release_n();
    swift_release_n();
    v15 = v30;
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v6, &v30);
    swift_release_n();
    result = swift_release_n();
    v17 = v30;
  }
  else
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ColorSchemeKey>, (uint64_t)&type metadata for ColorSchemeKey, (uint64_t)&protocol witness table for ColorSchemeKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    BloomFilter.init(hashValue:)(v18);
    v19 = v31[0];
    v20 = swift_retain_n();
    v21 = specialized find1<A>(_:key:filter:)(v20, v19);
    if (v21)
      v14 = *(_BYTE *)(v21 + 72);
    else
      v14 = 0;
    swift_release_n();
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<ColorSchemeContrastKey>, (uint64_t)&type metadata for ColorSchemeContrastKey, (uint64_t)&protocol witness table for ColorSchemeContrastKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    BloomFilter.init(hashValue:)(v22);
    v23 = v31[0];
    v24 = swift_retain_n();
    v25 = specialized find1<A>(_:key:filter:)(v24, v23);
    if (v25)
      v15 = *(_BYTE *)(v25 + 72);
    else
      v15 = 0;
    swift_release_n();
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<DisplayGamutKey>, (uint64_t)&type metadata for DisplayGamutKey, (uint64_t)&protocol witness table for DisplayGamutKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    BloomFilter.init(hashValue:)(v26);
    v27 = v31[0];
    v28 = swift_retain_n();
    v29 = specialized find1<A>(_:key:filter:)(v28, v27);
    if (v29)
      v17 = *(_BYTE *)(v29 + 72);
    else
      v17 = 0;
    result = swift_release_n();
  }
  *(float *)a3 = v7;
  *(_DWORD *)(a3 + 4) = v9;
  *(_DWORD *)(a3 + 8) = v11;
  *(_DWORD *)(a3 + 12) = v13;
  *(_BYTE *)(a3 + 16) = v14;
  *(_BYTE *)(a3 + 17) = v15;
  *(_BYTE *)(a3 + 18) = v17;
  *(_QWORD *)(a3 + 24) = a2;
  return result;
}

uint64_t ResolvedMulticolorStyle.environment.getter@<X0>(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  char v3;
  char v4;
  char v5;
  void (*v6)(uint64_t *);
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v3 = v1[16];
  v4 = v1[17];
  v5 = v1[18];
  *a1 = 0;
  a1[1] = 0;
  if (one-time initialization token for shared != -1)
    swift_once();
  swift_beginAccess();
  v6 = *(void (**)(uint64_t *))((*MEMORY[0x24BEE4EA0] & *(_QWORD *)static CoreGlue2.shared) + 0x68);
  v7 = static CoreGlue2.shared;
  v6(a1);

  v8 = *a1;
  swift_retain_n();
  specialized closure #1 in PropertyList.subscript.setter(a1, v3);
  swift_release();
  v9 = a1[1];
  if (v9)
  {
    v10 = *a1;
    swift_retain();
    swift_retain();
    specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v8, v10);
    swift_release();
    swift_release();
    swift_release();
  }
  else
  {
    swift_release();
    v10 = *a1;
  }
  swift_retain_n();
  specialized closure #1 in PropertyList.subscript.setter(a1, v4);
  swift_release();
  if (v9)
  {
    v11 = *a1;
    swift_retain();
    swift_retain();
    specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v10, v11);
    swift_release();
    swift_release();
    swift_release();
  }
  else
  {
    swift_release();
    v11 = *a1;
  }
  swift_retain_n();
  specialized closure #1 in PropertyList.subscript.setter(a1, v5);
  swift_release();
  if (v9)
  {
    v12 = *a1;
    swift_retain();
    swift_retain();
    specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v11, v12);
    swift_release();
    swift_release();
  }
  return swift_release();
}

unint64_t ResolvedMulticolorStyle.resolve(name:proposed:)(uint64_t a1, uint64_t a2, float a3, float a4)
{
  if (a2)
    return ResolvedMulticolorStyle.resolve(name:)(a1, a2);
  else
    return LODWORD(a3) | ((unint64_t)LODWORD(a4) << 32);
}

uint64_t outlined release of (key: _ShapeStyle_Pack.Key, style: _ShapeStyle_Pack.Style)(uint64_t a1)
{
  uint64_t v2;
  unsigned __int8 v3;

  v2 = *(_QWORD *)(a1 + 96);
  v3 = *(_BYTE *)(a1 + 104);
  outlined consume of _ShapeStyle_Pack.Fill(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(void **)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_BYTE *)(a1 + 88));
  outlined consume of GraphicsBlendMode?(v2, v3);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t specialized static ResolvedMulticolorStyle.== infix(_:_:)(float32x4_t *a1, float32x4_t *a2)
{
  uint64_t result;
  void *v4;
  void *v5;
  id v6;
  id v7;
  char v8;

  result = 0;
  if ((vmaxv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vceqq_f32(*a1, *a2))), 0xFuLL))) & 1) == 0
    && ((a1[1].u8[0] ^ a2[1].u8[0]) & 1) == 0
    && ((a1[1].u8[1] ^ a2[1].u8[1]) & 1) == 0
    && ((a1[1].u8[2] ^ a2[1].u8[2]) & 1) == 0)
  {
    v4 = (void *)a1[1].i64[1];
    v5 = (void *)a2[1].i64[1];
    if (v4)
    {
      if (v5)
      {
        type metadata accessor for NSBundle();
        v6 = v5;
        v7 = v4;
        v8 = static NSObject.== infix(_:_:)();

        if ((v8 & 1) != 0)
          return 1;
      }
    }
    else if (!v5)
    {
      return 1;
    }
    return 0;
  }
  return result;
}

void specialized static _ShapeStyle_Pack.Fill.AnimatableData.== infix(_:_:)(uint64_t a1)
{
  __asm { BR              X10 }
}

BOOL sub_234D6D940(__n128 a1, double a2, __n128 a3, __n128 a4)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  float v11;
  float v12;
  float v13;
  float v14;
  unint64_t v15;
  float v16;
  float v17;
  BOOL v18;
  _BYTE v21[352];

  if (v5)
  {
    outlined copy of _ShapeStyle_Pack.Fill.AnimatableData(a3.n128_i64[0], a3.n128_i64[1], a4.n128_i64[0], a4.n128_i64[1], v6, v4, v9, v8, v10, v7, v5);
    outlined release of (_ShapeStyle_Pack.Fill, _ShapeStyle_Pack.Fill.AnimatableData)((uint64_t)v21, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))outlined consume of _ShapeStyle_Pack.Fill.AnimatableData, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))outlined consume of _ShapeStyle_Pack.Fill.AnimatableData);
    return 0;
  }
  else
  {
    v11 = a1.n128_f32[3];
    v12 = a1.n128_f32[2];
    v13 = a1.n128_f32[1];
    v14 = a1.n128_f32[0];
    v15 = a3.n128_u64[0];
    v16 = a3.n128_f32[2];
    v17 = a3.n128_f32[3];
    outlined release of (_ShapeStyle_Pack.Fill, _ShapeStyle_Pack.Fill.AnimatableData)((uint64_t)v21, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))outlined consume of _ShapeStyle_Pack.Fill.AnimatableData, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))outlined consume of _ShapeStyle_Pack.Fill.AnimatableData);
    v18 = v14 == *(float *)&v15;
    if (v13 != *((float *)&v15 + 1))
      v18 = 0;
    if (v12 != v16)
      v18 = 0;
    return v11 == v17 && v18;
  }
}

uint64_t specialized static _ShapeStyle_Pack.AnimatableData.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  unint64_t v6;
  char v7;
  unsigned __int8 *v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  float v22;
  uint64_t v23;
  unsigned __int8 *v24;
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  float v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  double v60;
  double v61;
  double v62;
  uint64_t v63;
  uint64_t v64;
  BOOL v65;
  BOOL v66;
  BOOL v67;
  BOOL v68;
  BOOL v69;
  uint64_t v71;
  char v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;
  char v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  _QWORD v109[10];
  char v110;
  float v111;
  uint64_t v112;
  _BYTE v113[8];
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  char v124;
  float v125;
  uint64_t v126;
  char v127;
  char v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  char v139;
  float v140;
  uint64_t v141;

  v2 = *a1;
  v3 = *a2;
  v4 = *(_QWORD *)(v2 + 16);
  if (v4 != *(_QWORD *)(*a2 + 16))
    return 0;
  if (!v4)
    return 1;
  v90 = v3 + 32;
  v91 = v2 + 32;
  swift_bridgeObjectRetain_n();
  result = swift_bridgeObjectRetain_n();
  v6 = 0;
  v7 = 1;
  v88 = v4;
  v89 = v3;
  while (v6 < *(_QWORD *)(v3 + 16))
  {
    v8 = (unsigned __int8 *)(v91 + 112 * v6);
    v9 = *v8;
    v10 = v8[1];
    v11 = *((_QWORD *)v8 + 1);
    v12 = *((_QWORD *)v8 + 2);
    v13 = *((_QWORD *)v8 + 3);
    v14 = *((_QWORD *)v8 + 4);
    v16 = *((_QWORD *)v8 + 5);
    v15 = *((_QWORD *)v8 + 6);
    v17 = *((_QWORD *)v8 + 7);
    v18 = *((_QWORD *)v8 + 8);
    v20 = *((_QWORD *)v8 + 9);
    v19 = *((_QWORD *)v8 + 10);
    v21 = v8[88];
    v22 = *((float *)v8 + 24);
    v23 = *((_QWORD *)v8 + 13);
    v100 = v6 + 1;
    v24 = (unsigned __int8 *)(v90 + 112 * v6);
    v25 = *v24;
    v26 = v24[1];
    v28 = *((_QWORD *)v24 + 1);
    v27 = *((_QWORD *)v24 + 2);
    v29 = *((_QWORD *)v24 + 3);
    v30 = *((_QWORD *)v24 + 4);
    v32 = *((_QWORD *)v24 + 5);
    v31 = *((_QWORD *)v24 + 6);
    v34 = *((_QWORD *)v24 + 7);
    v33 = *((_QWORD *)v24 + 8);
    v35 = *((_QWORD *)v24 + 9);
    v36 = *((_QWORD *)v24 + 10);
    v37 = v24[88];
    v38 = *((float *)v24 + 24);
    v39 = *((_QWORD *)v24 + 13);
    v113[0] = v9;
    v113[1] = v10;
    v103 = v11;
    v104 = v14;
    v114 = v11;
    v115 = v12;
    v105 = v12;
    v106 = v16;
    v107 = v19;
    v108 = v13;
    v116 = v13;
    v117 = v14;
    v118 = v16;
    v119 = v15;
    v120 = v17;
    v121 = v18;
    v122 = v20;
    v123 = v19;
    v102 = v21;
    v124 = v21;
    v125 = v22;
    v126 = v23;
    v127 = v25;
    v128 = v26;
    v129 = v28;
    v130 = v27;
    v131 = v29;
    v132 = v30;
    v133 = v32;
    v134 = v31;
    v135 = v34;
    v136 = v33;
    v137 = v35;
    v138 = v36;
    v139 = v37;
    v140 = v38;
    v141 = v39;
    v101 = v39;
    if ((v7 & 1) != 0)
    {
      v94 = v23;
      v95 = v29;
      v85 = v17;
      v86 = v18;
      v93 = v20;
      v87 = v15;
      if (v9 == v25 && v10 == v26)
      {
        v109[0] = v11;
        v109[1] = v12;
        v92 = v30;
        v109[2] = v13;
        v109[3] = v14;
        v109[4] = v16;
        v109[5] = v15;
        v109[6] = v17;
        v109[7] = v18;
        v83 = v28;
        v84 = v27;
        v109[8] = v20;
        v109[9] = v19;
        v110 = v21;
        v111 = v22;
        v112 = v23;
        v96 = v34;
        v98 = v33;
        v82 = v31;
        v40 = v18;
        v41 = v17;
        v42 = v15;
        v43 = v20;
        outlined retain of ((key: _ShapeStyle_Pack.Key, data: AnimatablePair<_ShapeStyle_Pack.Fill.AnimatableData, AnimatablePair<Float, AnimatableArray<AnimatablePair<Float, _ShapeStyle_Pack.Effect.Kind.AnimatableData>>>>), (key: _ShapeStyle_Pack.Key, data: AnimatablePair<_ShapeStyle_Pack.Fill.AnimatableData, AnimatablePair<Float, AnimatableArray<AnimatablePair<Float, _ShapeStyle_Pack.Effect.Kind.AnimatableData>>>>))((uint64_t)v113);
        outlined retain of ((key: _ShapeStyle_Pack.Key, data: AnimatablePair<_ShapeStyle_Pack.Fill.AnimatableData, AnimatablePair<Float, AnimatableArray<AnimatablePair<Float, _ShapeStyle_Pack.Effect.Kind.AnimatableData>>>>), (key: _ShapeStyle_Pack.Key, data: AnimatablePair<_ShapeStyle_Pack.Fill.AnimatableData, AnimatablePair<Float, AnimatableArray<AnimatablePair<Float, _ShapeStyle_Pack.Effect.Kind.AnimatableData>>>>))((uint64_t)v113);
        v44 = v36;
        v45 = v32;
        v46 = v42;
        v47 = v44;
        outlined copy of _ShapeStyle_Pack.Fill.AnimatableData(v103, v105, v108, v104, v106, v46, v41, v40, v43, v107, v102);
        swift_bridgeObjectRetain();
        v81 = v47;
        outlined copy of _ShapeStyle_Pack.Fill.AnimatableData(v28, v84, v29, v92, v32, v82, v96, v98, v35, v47, v37);
        swift_bridgeObjectRetain();
        specialized static _ShapeStyle_Pack.Fill.AnimatableData.== infix(_:_:)((uint64_t)v109);
        v80 = v32;
        if ((v48 & 1) == 0)
        {
          outlined consume of _ShapeStyle_Pack.Fill.AnimatableData(v28, v84, v29, v92, v32, v82, v96, v98, v35, v47, v37);
          swift_bridgeObjectRelease();
          outlined consume of _ShapeStyle_Pack.Fill.AnimatableData(v103, v105, v108, v104, v106, v87, v85, v86, v93, v107, v102);
          swift_bridgeObjectRelease();
          outlined consume of _ShapeStyle_Pack.Fill.AnimatableData(v28, v84, v29, v92, v32, v82, v96, v98, v35, v47, v37);
          swift_bridgeObjectRelease();
          outlined consume of _ShapeStyle_Pack.Fill.AnimatableData(v103, v105, v108, v104, v106, v87, v85, v86, v93, v107, v102);
          goto LABEL_46;
        }
        if (v22 != v38)
        {
          v71 = v29;
          outlined consume of _ShapeStyle_Pack.Fill.AnimatableData(v28, v84, v29, v92, v32, v82, v96, v98, v35, v81, v37);
          swift_bridgeObjectRelease();
          v72 = v102;
          v79 = v102;
          v77 = v93;
          v78 = v107;
          v73 = v103;
          v74 = v103;
          v75 = v105;
          v50 = v37;
          goto LABEL_45;
        }
        v49 = *(_QWORD *)(v94 + 16);
        v50 = v37;
        if (v49 != *(_QWORD *)(v101 + 16))
          goto LABEL_43;
        if (v49 && v94 != v101)
        {
          v51 = 0;
          while (1)
          {
            v56 = v94 + v51;
            v57 = v101 + v51;
            if (*(float *)(v94 + v51 + 32) != *(float *)(v101 + v51 + 32))
              break;
            if ((*(_BYTE *)(v56 + 80) & 1) != 0)
            {
              if ((*(_BYTE *)(v57 + 80) & 1) == 0)
                break;
            }
            else
            {
              if ((*(_BYTE *)(v57 + 80) & 1) != 0)
                break;
              v58 = *(_QWORD *)(v56 + 40);
              v59 = *(_QWORD *)(v56 + 48);
              v60 = *(double *)(v56 + 56);
              v61 = *(double *)(v56 + 64);
              v62 = *(double *)(v56 + 72);
              v63 = *(_QWORD *)(v57 + 40);
              v64 = *(_QWORD *)(v57 + 48);
              v65 = *(float *)&v58 == *(float *)&v63 && *((float *)&v58 + 1) == *((float *)&v63 + 1);
              v66 = v65 && *(float *)&v59 == *(float *)&v64;
              v67 = v66 && *((float *)&v59 + 1) == *((float *)&v64 + 1);
              v68 = v67 && v60 == *(double *)(v57 + 56);
              v69 = v68 && v61 == *(double *)(v57 + 64);
              if (!v69 || v62 != *(double *)(v57 + 72))
                break;
            }
            v51 += 56;
            if (!--v49)
              goto LABEL_49;
          }
LABEL_43:
          v71 = v29;
          outlined consume of _ShapeStyle_Pack.Fill.AnimatableData(v28, v84, v29, v92, v45, v82, v96, v98, v35, v81, v37);
          swift_bridgeObjectRelease();
          v72 = v102;
          v79 = v102;
          v77 = v93;
          v78 = v107;
          v73 = v103;
          v74 = v103;
          v75 = v105;
LABEL_45:
          outlined consume of _ShapeStyle_Pack.Fill.AnimatableData(v74, v75, v108, v104, v106, v87, v85, v86, v77, v78, v79);
          swift_bridgeObjectRelease();
          outlined consume of _ShapeStyle_Pack.Fill.AnimatableData(v83, v84, v71, v92, v80, v82, v96, v98, v35, v81, v50);
          swift_bridgeObjectRelease();
          outlined consume of _ShapeStyle_Pack.Fill.AnimatableData(v73, v105, v108, v104, v106, v87, v85, v86, v93, v107, v72);
LABEL_46:
          swift_bridgeObjectRelease();
          v76 = 0;
          goto LABEL_47;
        }
LABEL_49:
        outlined consume of _ShapeStyle_Pack.Fill.AnimatableData(v28, v84, v29, v92, v45, v82, v96, v98, v35, v47, v37);
        swift_bridgeObjectRelease();
        outlined consume of _ShapeStyle_Pack.Fill.AnimatableData(v103, v105, v108, v104, v106, v87, v85, v86, v93, v107, v102);
        swift_bridgeObjectRelease();
        outlined consume of _ShapeStyle_Pack.Fill.AnimatableData(v28, v84, v29, v92, v80, v82, v96, v98, v35, v47, v37);
        swift_bridgeObjectRelease();
        outlined consume of _ShapeStyle_Pack.Fill.AnimatableData(v103, v105, v108, v104, v106, v87, v85, v86, v93, v107, v102);
        swift_bridgeObjectRelease();
        v76 = 1;
LABEL_47:
        v3 = v89;
        result = outlined release of ((key: _ShapeStyle_Pack.Key, data: AnimatablePair<_ShapeStyle_Pack.Fill.AnimatableData, AnimatablePair<Float, AnimatableArray<AnimatablePair<Float, _ShapeStyle_Pack.Effect.Kind.AnimatableData>>>>), (key: _ShapeStyle_Pack.Key, data: AnimatablePair<_ShapeStyle_Pack.Fill.AnimatableData, AnimatablePair<Float, AnimatableArray<AnimatablePair<Float, _ShapeStyle_Pack.Effect.Kind.AnimatableData>>>>))((uint64_t)v113);
        if (v100 == v88)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          goto LABEL_55;
        }
        v6 = v100;
        v7 = v76;
      }
      else
      {
        v53 = v33;
        v54 = v34;
        v55 = v31;
        outlined retain of ((key: _ShapeStyle_Pack.Key, data: AnimatablePair<_ShapeStyle_Pack.Fill.AnimatableData, AnimatablePair<Float, AnimatableArray<AnimatablePair<Float, _ShapeStyle_Pack.Effect.Kind.AnimatableData>>>>), (key: _ShapeStyle_Pack.Key, data: AnimatablePair<_ShapeStyle_Pack.Fill.AnimatableData, AnimatablePair<Float, AnimatableArray<AnimatablePair<Float, _ShapeStyle_Pack.Effect.Kind.AnimatableData>>>>))((uint64_t)v113);
        outlined retain of ((key: _ShapeStyle_Pack.Key, data: AnimatablePair<_ShapeStyle_Pack.Fill.AnimatableData, AnimatablePair<Float, AnimatableArray<AnimatablePair<Float, _ShapeStyle_Pack.Effect.Kind.AnimatableData>>>>), (key: _ShapeStyle_Pack.Key, data: AnimatablePair<_ShapeStyle_Pack.Fill.AnimatableData, AnimatablePair<Float, AnimatableArray<AnimatablePair<Float, _ShapeStyle_Pack.Effect.Kind.AnimatableData>>>>))((uint64_t)v113);
        outlined consume of _ShapeStyle_Pack.Fill.AnimatableData(v28, v27, v95, v30, v32, v55, v54, v53, v35, v36, v37);
        swift_bridgeObjectRelease();
        outlined consume of _ShapeStyle_Pack.Fill.AnimatableData(v103, v105, v108, v104, v106, v87, v85, v86, v93, v107, v102);
        swift_bridgeObjectRelease();
        result = outlined release of ((key: _ShapeStyle_Pack.Key, data: AnimatablePair<_ShapeStyle_Pack.Fill.AnimatableData, AnimatablePair<Float, AnimatableArray<AnimatablePair<Float, _ShapeStyle_Pack.Effect.Kind.AnimatableData>>>>), (key: _ShapeStyle_Pack.Key, data: AnimatablePair<_ShapeStyle_Pack.Fill.AnimatableData, AnimatablePair<Float, AnimatableArray<AnimatablePair<Float, _ShapeStyle_Pack.Effect.Kind.AnimatableData>>>>))((uint64_t)v113);
        v6 = v100;
        if (v100 == v88)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v76 = 0;
LABEL_55:
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          return v76;
        }
        v7 = 0;
        v3 = v89;
      }
    }
    else
    {
      v97 = v34;
      v99 = v33;
      v52 = v31;
      outlined copy of _ShapeStyle_Pack.Fill.AnimatableData(v11, v12, v13, v14, v16, v15, v17, v18, v20, v19, v102);
      swift_bridgeObjectRetain();
      outlined copy of _ShapeStyle_Pack.Fill.AnimatableData(v28, v27, v29, v30, v32, v52, v97, v99, v35, v36, v37);
      swift_bridgeObjectRetain();
      result = outlined release of ((key: _ShapeStyle_Pack.Key, data: AnimatablePair<_ShapeStyle_Pack.Fill.AnimatableData, AnimatablePair<Float, AnimatableArray<AnimatablePair<Float, _ShapeStyle_Pack.Effect.Kind.AnimatableData>>>>), (key: _ShapeStyle_Pack.Key, data: AnimatablePair<_ShapeStyle_Pack.Fill.AnimatableData, AnimatablePair<Float, AnimatableArray<AnimatablePair<Float, _ShapeStyle_Pack.Effect.Kind.AnimatableData>>>>))((uint64_t)v113);
      if (v100 == v88)
      {
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease_n();
        return 0;
      }
      v7 = 0;
      v6 = v100;
      v3 = v89;
    }
  }
  __break(1u);
  return result;
}

uint64_t specialized static _ShapeStyle_Pack.Effect.Kind.AnimatableData.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  int v2;
  unsigned int v3;
  uint64_t v4;

  v2 = *(unsigned __int8 *)(a1 + 40);
  v3 = *(unsigned __int8 *)(a2 + 40);
  v4 = v2 & v3;
  if ((v2 & 1) == 0 && (v3 & 1) == 0)
  {
    LODWORD(v4) = *(float *)a1 == *(float *)a2;
    if (*(float *)(a1 + 4) != *(float *)(a2 + 4))
      LODWORD(v4) = 0;
    if (*(float *)(a1 + 8) != *(float *)(a2 + 8))
      LODWORD(v4) = 0;
    if (*(float *)(a1 + 12) != *(float *)(a2 + 12))
      LODWORD(v4) = 0;
    if (*(double *)(a1 + 16) != *(double *)(a2 + 16))
      LODWORD(v4) = 0;
    if (*(double *)(a1 + 24) != *(double *)(a2 + 24))
      LODWORD(v4) = 0;
    if (*(double *)(a1 + 32) == *(double *)(a2 + 32))
      return v4;
    else
      return 0;
  }
  return v4;
}

BOOL specialized static _ShapeStyle_Pack.Effect.== infix(_:_:)(uint64_t a1, uint64_t *a2)
{
  float v2;
  uint64_t v3;
  int v4;
  char v5;
  float v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  char v21;
  _DWORD v23[2];
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  int v27;
  char v28;
  _DWORD v29[2];
  uint64_t v30;
  __int128 v31;
  uint64_t v32;
  int v33;
  char v34;

  v2 = *(float *)(a1 + 48);
  v3 = *(_QWORD *)(a1 + 56);
  v4 = *(unsigned __int8 *)(a1 + 64);
  v5 = *((_BYTE *)a2 + 45);
  v6 = *((float *)a2 + 12);
  v7 = a2[7];
  v8 = *((unsigned __int8 *)a2 + 64);
  if ((*(_BYTE *)(a1 + 45) & 1) != 0)
  {
    if (v2 != v6)
      v5 = 0;
    if ((v5 & 1) == 0)
      return 0;
LABEL_9:
    if (v4 == 255)
    {
      if (v8 == 255)
        return 1;
    }
    else if (v8 != 255)
    {
      if ((v4 & 1) != 0)
      {
        if ((v8 & 1) != 0)
        {
          outlined copy of GraphicsBlendMode?(v7, v8);
          outlined copy of GraphicsBlendMode?(v3, v4);
          v20 = 1;
          outlined consume of GraphicsBlendMode(v3, 1);
          outlined consume of GraphicsBlendMode(v7, 1);
          if (v3 == v7)
            return v20;
          return 0;
        }
        swift_unknownObjectRetain();
        goto LABEL_21;
      }
      if ((v8 & 1) != 0)
      {
LABEL_21:
        v21 = v8 & 1;
        outlined copy of GraphicsBlendMode(v7, v21);
        outlined consume of GraphicsBlendMode(v3, v4 & 1);
        outlined consume of GraphicsBlendMode(v7, v21);
        return 0;
      }
      outlined consume of GraphicsBlendMode(v3, 0);
      outlined consume of GraphicsBlendMode(v7, 0);
      return (_DWORD)v3 == (_DWORD)v7;
    }
    outlined copy of GraphicsBlendMode?(v7, v8);
    outlined copy of GraphicsBlendMode?(v3, v4);
    outlined consume of GraphicsBlendMode?(v3, v4);
    outlined consume of GraphicsBlendMode?(v7, v8);
    return 0;
  }
  if ((*((_BYTE *)a2 + 45) & 1) != 0)
    return 0;
  v9 = *a2;
  v10 = a2[1];
  v11 = *((_OWORD *)a2 + 1);
  v12 = a2[4];
  v13 = *((unsigned int *)a2 + 10) | ((unint64_t)*((unsigned __int8 *)a2 + 44) << 32);
  v14 = *(_BYTE *)(a1 + 44);
  v15 = *(_DWORD *)(a1 + 40);
  v16 = *(_QWORD *)(a1 + 8);
  v17 = HIDWORD(*(_QWORD *)a1);
  v18 = *(_QWORD *)(a1 + 32);
  v19 = HIDWORD(*a2);
  v29[0] = *(_QWORD *)a1;
  v29[1] = v17;
  v30 = v16;
  v31 = *(_OWORD *)(a1 + 16);
  v32 = v18;
  v33 = v15;
  v34 = v14;
  v23[0] = v9;
  v23[1] = v19;
  v24 = v10;
  v25 = v11;
  v26 = v12;
  v27 = v13;
  v28 = BYTE4(v13);
  v20 = 0;
  if (specialized static ResolvedShadowStyle.== infix(_:_:)((uint64_t)v29, (uint64_t)v23) && v2 == v6)
    goto LABEL_9;
  return v20;
}

uint64_t specialized static _ShapeStyle_Pack.Fill.AnimatableData.+= infix(_:_:)(__int128 *a1, int8x16_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  __int128 v9;
  __int128 v10;
  int8x16_t v11;
  int8x16_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int8x16_t v20;
  _OWORD v22[2];
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  int8x16_t v30;
  int8x16_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;

  v2 = a2[2].i64[0];
  v3 = a2[2].i64[1];
  v4 = a2[3].i64[0];
  v5 = a2[3].i64[1];
  v6 = a2[4].i64[0];
  v7 = a2[4].i64[1];
  v8 = a2[5].u8[0];
  v9 = *a1;
  v10 = a1[1];
  v12 = *a2;
  v11 = a2[1];
  v13 = *((_QWORD *)a1 + 4);
  v14 = *((_QWORD *)a1 + 6);
  v15 = *((_QWORD *)a1 + 5);
  v16 = *((_QWORD *)a1 + 7);
  v17 = *((_QWORD *)a1 + 8);
  v18 = *((_QWORD *)a1 + 9);
  v19 = *((unsigned __int8 *)a1 + 80);
  v22[0] = *a1;
  v22[1] = v10;
  v23 = v13;
  v24 = v15;
  v25 = v14;
  v26 = v16;
  v27 = v17;
  v28 = v18;
  v29 = v19;
  v30 = v12;
  v31 = v11;
  v32 = v2;
  v33 = v3;
  v34 = v4;
  v35 = v5;
  v36 = v6;
  v37 = v7;
  v38 = v8;
  if (v8 != 9
    || (v20 = vorrq_s8(v11, v12),
        v3 | *(_QWORD *)&vorr_s8(*(int8x8_t *)v20.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v20, v20, 8uLL)) | v4 | v2 | v5 | v6 | v7))
  {
    __asm { BR              X10 }
  }
  outlined copy of _ShapeStyle_Pack.Fill.AnimatableData(v9, *((uint64_t *)&v9 + 1), v10, *((uint64_t *)&v10 + 1), v13, v15, v14, v16, v17, v18, v19);
  return outlined release of (_ShapeStyle_Pack.Fill, _ShapeStyle_Pack.Fill.AnimatableData)((uint64_t)v22, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))outlined consume of _ShapeStyle_Pack.Fill.AnimatableData, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))outlined consume of _ShapeStyle_Pack.Fill.AnimatableData);
}

uint64_t specialized static _ShapeStyle_Pack.AnimatableData.+= infix(_:_:)(uint64_t result, uint64_t *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  int64_t v4;
  unint64_t v5;
  uint64_t v6;
  unsigned __int8 *v7;
  unsigned int v8;
  unsigned int v9;
  unsigned __int8 *v10;
  unsigned int v11;
  unsigned int v12;
  _BOOL4 v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  float v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  int64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  int8x16_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char v48;

  v36 = *a2;
  v35 = *(_QWORD *)(*a2 + 16);
  if (v35)
  {
    v2 = (_QWORD *)result;
    v3 = *(_QWORD **)result;
    v4 = *(_QWORD *)(*(_QWORD *)result + 16);
    if (!v4)
    {
      swift_bridgeObjectRelease();
      *v2 = v36;
      return swift_bridgeObjectRetain();
    }
    v27 = (_QWORD *)result;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
LABEL_29:
      v3 = specialized _ArrayBuffer._consumeAndCreateNew()(v3);
    v5 = 0;
    result = 0;
    v6 = v36 + 32;
    v38 = v3 + 4;
    v28 = v3;
    v29 = v4;
    while (1)
    {
      if ((unint64_t)result >= v3[2])
      {
        __break(1u);
LABEL_28:
        __break(1u);
        goto LABEL_29;
      }
      if (v5 >= *(_QWORD *)(v36 + 16))
        goto LABEL_28;
      v7 = (unsigned __int8 *)&v38[14 * result];
      v8 = *v7;
      v9 = v7[1];
      v10 = (unsigned __int8 *)(v6 + 112 * v5);
      v11 = *v10;
      v12 = v10[1];
      if (v8 == v11 && v9 == v12)
        break;
      v14 = v9 < v12 && v8 == v11;
      if (v8 >= v11 && !v14)
        goto LABEL_21;
      if (++result >= v4)
        goto LABEL_23;
LABEL_22:
      if ((uint64_t)v5 >= v35)
      {
LABEL_23:
        *v27 = v3;
        if (v4 >= result)
          return specialized Array.replaceSubrange<A>(_:with:)(result, v4);
        __break(1u);
        return result;
      }
    }
    v16 = v6 + 112 * v5;
    v37 = result;
    v18 = *(_QWORD *)(v16 + 8);
    v17 = *(_QWORD *)(v16 + 16);
    v19 = *(_QWORD *)(v16 + 32);
    v20 = *(_QWORD *)(v16 + 40);
    v21 = *(_QWORD *)(v16 + 48);
    v22 = *(_QWORD *)(v16 + 56);
    v23 = *(_QWORD *)(v16 + 64);
    v30 = *(_QWORD *)(v16 + 72);
    v31 = *(_QWORD *)(v16 + 80);
    v32 = *(_BYTE *)(v16 + 88);
    v24 = *(float *)(v16 + 96);
    v25 = *(_QWORD *)(v16 + 104);
    v33 = *(_QWORD *)(v16 + 24);
    v34 = v5;
    outlined copy of _ShapeStyle_Pack.Fill.AnimatableData(v18, v17, v33, v19, v20, v21, v22, v23, v30, v31, v32);
    v26 = &v38[14 * v37];
    swift_bridgeObjectRetain();
    v39.i64[0] = v18;
    v39.i64[1] = v17;
    v40 = v33;
    v41 = v19;
    v42 = v20;
    v43 = v21;
    v44 = v22;
    v45 = v23;
    v46 = v30;
    v47 = v31;
    v48 = v32;
    specialized static _ShapeStyle_Pack.Fill.AnimatableData.+= infix(_:_:)((__int128 *)(v26 + 1), &v39);
    *((float *)v26 + 24) = v24 + *((float *)v26 + 24);
    swift_bridgeObjectRetain();
    specialized static AnimatableArray.+= infix(_:_:)((uint64_t)(v26 + 13), v25);
    swift_bridgeObjectRelease();
    v3 = v28;
    outlined consume of _ShapeStyle_Pack.Fill.AnimatableData(v18, v17, v33, v19, v20, v21, v22, v23, v30, v31, v32);
    v4 = v29;
    swift_bridgeObjectRelease();
    v5 = v34;
    v6 = v36 + 32;
    result = v37 + 1;
LABEL_21:
    ++v5;
    if (result >= v4)
      goto LABEL_23;
    goto LABEL_22;
  }
  return result;
}

uint64_t specialized static _ShapeStyle_Pack.Fill.AnimatableData.-= infix(_:_:)(__int128 *a1, int8x16_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  __int128 v9;
  __int128 v10;
  int8x16_t v11;
  int8x16_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int8x16_t v20;
  _OWORD v22[2];
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  int8x16_t v30;
  int8x16_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;

  v2 = a2[2].i64[0];
  v3 = a2[2].i64[1];
  v4 = a2[3].i64[0];
  v5 = a2[3].i64[1];
  v6 = a2[4].i64[0];
  v7 = a2[4].i64[1];
  v8 = a2[5].u8[0];
  v9 = *a1;
  v10 = a1[1];
  v12 = *a2;
  v11 = a2[1];
  v13 = *((_QWORD *)a1 + 4);
  v14 = *((_QWORD *)a1 + 6);
  v15 = *((_QWORD *)a1 + 5);
  v16 = *((_QWORD *)a1 + 7);
  v17 = *((_QWORD *)a1 + 8);
  v18 = *((_QWORD *)a1 + 9);
  v19 = *((unsigned __int8 *)a1 + 80);
  v22[0] = *a1;
  v22[1] = v10;
  v23 = v13;
  v24 = v15;
  v25 = v14;
  v26 = v16;
  v27 = v17;
  v28 = v18;
  v29 = v19;
  v30 = v12;
  v31 = v11;
  v32 = v2;
  v33 = v3;
  v34 = v4;
  v35 = v5;
  v36 = v6;
  v37 = v7;
  v38 = v8;
  if (v8 != 9
    || (v20 = vorrq_s8(v11, v12),
        v3 | *(_QWORD *)&vorr_s8(*(int8x8_t *)v20.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v20, v20, 8uLL)) | v4 | v2 | v5 | v6 | v7))
  {
    __asm { BR              X10 }
  }
  outlined copy of _ShapeStyle_Pack.Fill.AnimatableData(v9, *((uint64_t *)&v9 + 1), v10, *((uint64_t *)&v10 + 1), v13, v15, v14, v16, v17, v18, v19);
  return outlined release of (_ShapeStyle_Pack.Fill, _ShapeStyle_Pack.Fill.AnimatableData)((uint64_t)v22, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))outlined consume of _ShapeStyle_Pack.Fill.AnimatableData, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))outlined consume of _ShapeStyle_Pack.Fill.AnimatableData);
}

void sub_234D71490(double a1, float a2)
{
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_OWORD *)v4 = LODWORD(a2) ^ 0x80000000;
  *(_BYTE *)(v4 + 16) = v2;
  if (v5 != v3)
    JUMPOUT(0x234D714B8);
  JUMPOUT(0x234D718A0);
}

void sub_234D714E8()
{
  JUMPOUT(0x234D714A0);
}

void sub_234D71508()
{
  JUMPOUT(0x234D714A0);
}

void sub_234D71534()
{
  JUMPOUT(0x234D714A0);
}

void sub_234D71554(double a1, __n128 a2)
{
  uint64_t v2;
  int64_t v3;
  float *v4;
  unint64_t v5;
  float v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = a2.n128_u64[0];
  v3 = *(_QWORD *)(a2.n128_u64[0] + 16);
  if (v3)
  {
    v8 = a2.n128_i64[1];
    v9 = MEMORY[0x24BEE4AF8];
    swift_bridgeObjectRetain();
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3, 0);
    v4 = (float *)(v2 + 32);
    v5 = *(_QWORD *)(v9 + 16);
    do
    {
      v6 = *v4;
      v7 = *(_QWORD *)(v9 + 24);
      if (v5 >= v7 >> 1)
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v7 > 1, v5 + 1, 1);
      *(_QWORD *)(v9 + 16) = v5 + 1;
      *(float *)(v9 + 4 * v5 + 32) = -v6;
      ++v4;
      ++v5;
      --v3;
    }
    while (v3);
    outlined consume of ShaderVectorData.Element(v2, v8, 4);
    outlined consume of ShaderVectorData.Element(v2, v8, 4);
  }
  else
  {
    outlined consume of ShaderVectorData.Element(a2.n128_i64[0], a2.n128_i64[1], 4);
  }
  JUMPOUT(0x234D714A0);
}

void specialized static _ShapeStyle_Pack.AnimatableData.-= infix(_:_:)(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  _QWORD *v4;
  int64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  unsigned __int8 *v10;
  unsigned int v11;
  unsigned int v12;
  unsigned __int8 *v13;
  unsigned int v14;
  unsigned int v15;
  _BOOL4 v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  float v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v30;
  uint64_t v31;
  int64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int8x16_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char v50;

  v39 = *a2;
  v2 = *(_QWORD *)(*a2 + 16);
  if (v2)
  {
    v4 = *(_QWORD **)a1;
    v5 = *(_QWORD *)(*(_QWORD *)a1 + 16);
    if (!v5)
    {
      swift_bridgeObjectRelease();
      *(_QWORD *)a1 = v39;
      swift_bridgeObjectRetain();
      _ShapeStyle_Pack.AnimatableData.scale(by:)(-1.0);
      return;
    }
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
LABEL_29:
      v4 = specialized _ArrayBuffer._consumeAndCreateNew()(v4);
    v6 = 0;
    v7 = 0;
    v8 = v39 + 32;
    v9 = v4 + 4;
    v31 = v2;
    v32 = v5;
    v30 = v4;
    while (1)
    {
      if ((unint64_t)v7 >= v4[2])
      {
        __break(1u);
LABEL_28:
        __break(1u);
        goto LABEL_29;
      }
      if (v6 >= *(_QWORD *)(v39 + 16))
        goto LABEL_28;
      v10 = (unsigned __int8 *)&v9[14 * v7];
      v11 = *v10;
      v12 = v10[1];
      v13 = (unsigned __int8 *)(v8 + 112 * v6);
      v14 = *v13;
      v15 = v13[1];
      if (v11 == v14 && v12 == v15)
        break;
      v17 = v12 < v15 && v11 == v14;
      if (v11 >= v14 && !v17)
        goto LABEL_21;
      if (++v7 >= v5)
        goto LABEL_23;
LABEL_22:
      if ((uint64_t)v6 >= v2)
      {
LABEL_23:
        *(_QWORD *)a1 = v4;
        if (v5 < v7)
          __break(1u);
        else
          specialized Array.replaceSubrange<A>(_:with:)(v7, v5);
        return;
      }
    }
    v19 = v8 + 112 * v6;
    v40 = v7;
    v20 = *(_QWORD *)(v19 + 8);
    v21 = *(_QWORD *)(v19 + 24);
    v22 = *(_QWORD *)(v19 + 32);
    v23 = *(_QWORD *)(v19 + 48);
    v33 = *(_QWORD *)(v19 + 40);
    v24 = *(_QWORD *)(v19 + 56);
    v25 = *(_QWORD *)(v19 + 64);
    v34 = *(_QWORD *)(v19 + 72);
    v35 = *(_QWORD *)(v19 + 80);
    v36 = *(_BYTE *)(v19 + 88);
    v26 = *(float *)(v19 + 96);
    v27 = *(_QWORD *)(v19 + 104);
    v37 = *(_QWORD *)(v19 + 16);
    v38 = v6;
    outlined copy of _ShapeStyle_Pack.Fill.AnimatableData(v20, v37, v21, v22, v33, v23, v24, v25, v34, v35, v36);
    v28 = &v9[14 * v40];
    swift_bridgeObjectRetain();
    v41.i64[0] = v20;
    v41.i64[1] = v37;
    v42 = v21;
    v43 = v22;
    v44 = v33;
    v45 = v23;
    v46 = v24;
    v47 = v25;
    v48 = v34;
    v49 = v35;
    v50 = v36;
    specialized static _ShapeStyle_Pack.Fill.AnimatableData.-= infix(_:_:)((__int128 *)(v28 + 1), &v41);
    *((float *)v28 + 24) = *((float *)v28 + 24) - v26;
    swift_bridgeObjectRetain();
    specialized static AnimatableArray.-= infix(_:_:)((uint64_t)(v28 + 13), v27);
    swift_bridgeObjectRelease();
    v4 = v30;
    v5 = v32;
    outlined consume of _ShapeStyle_Pack.Fill.AnimatableData(v20, v37, v21, v22, v33, v23, v24, v25, v34, v35, v36);
    v2 = v31;
    swift_bridgeObjectRelease();
    v6 = v38;
    v8 = v39 + 32;
    v7 = v40 + 1;
LABEL_21:
    ++v6;
    if (v7 >= v5)
      goto LABEL_23;
    goto LABEL_22;
  }
}

uint64_t specialized static _ShapeStyle_Pack.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  float v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  float v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  char v37;
  char v38;
  char v39;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _OWORD v46[5];
  char v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  uint64_t v55;
  _OWORD v56[7];
  uint64_t v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  uint64_t v65;
  _BYTE v66[96];
  __int128 v67;
  uint64_t v68;

  v2 = *a1;
  v3 = *a2;
  v4 = *(_QWORD *)(*a1 + 16);
  if (v4 != *(_QWORD *)(*a2 + 16))
  {
    v13 = 0;
    return v13 & 1;
  }
  if (!v4)
  {
    v13 = 1;
    return v13 & 1;
  }
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  v5 = 0;
  v6 = 0;
  v7 = *(_OWORD *)(v2 + 112);
  *(_OWORD *)&v66[64] = *(_OWORD *)(v2 + 96);
  *(_OWORD *)&v66[80] = v7;
  v67 = *(_OWORD *)(v2 + 128);
  v68 = *(_QWORD *)(v2 + 144);
  v8 = *(_OWORD *)(v2 + 48);
  *(_OWORD *)v66 = *(_OWORD *)(v2 + 32);
  *(_OWORD *)&v66[16] = v8;
  v9 = *(_OWORD *)(v2 + 80);
  v10 = v3 + 32;
  *(_OWORD *)&v66[32] = *(_OWORD *)(v2 + 64);
  *(_OWORD *)&v66[48] = v9;
  v11 = v2 + 152;
  v12 = v4 - 1;
  v13 = 1;
  v43 = v11;
  v44 = v3 + 32;
  v45 = v3;
  v42 = v4;
  while (1)
  {
    if (v4 == v5)
    {
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      return v13 & 1;
    }
    if (v5 >= *(_QWORD *)(v3 + 16))
      break;
    v22 = *(_OWORD *)(v10 + v6);
    v23 = *(_OWORD *)(v10 + v6 + 16);
    v24 = *(_OWORD *)(v10 + v6 + 48);
    v50 = *(_OWORD *)(v10 + v6 + 32);
    v51 = v24;
    v48 = v22;
    v49 = v23;
    v25 = *(_OWORD *)(v10 + v6 + 64);
    v26 = *(_OWORD *)(v10 + v6 + 80);
    v27 = *(_OWORD *)(v10 + v6 + 96);
    v55 = *(_QWORD *)(v10 + v6 + 112);
    v53 = v26;
    v54 = v27;
    v52 = v25;
    v56[4] = *(_OWORD *)&v66[64];
    v56[5] = *(_OWORD *)&v66[80];
    v56[6] = v67;
    v57 = v68;
    v56[0] = *(_OWORD *)v66;
    v56[1] = *(_OWORD *)&v66[16];
    v56[2] = *(_OWORD *)&v66[32];
    v56[3] = *(_OWORD *)&v66[48];
    v60 = v50;
    v61 = v24;
    v58 = v48;
    v59 = v49;
    v65 = v55;
    v63 = v26;
    v64 = v27;
    v62 = v25;
    if ((v13 & 1) == 0)
    {
      outlined retain of (key: _ShapeStyle_Pack.Key, style: _ShapeStyle_Pack.Style)((uint64_t)v66);
      outlined retain of (key: _ShapeStyle_Pack.Key, style: _ShapeStyle_Pack.Style)((uint64_t)&v48);
LABEL_26:
      outlined release of ((key: _ShapeStyle_Pack.Key, style: _ShapeStyle_Pack.Style), (key: _ShapeStyle_Pack.Key, style: _ShapeStyle_Pack.Style))((uint64_t)v56);
      if (v12 == v5)
        goto LABEL_40;
LABEL_27:
      v13 = 0;
      goto LABEL_10;
    }
    if (v66[0] != v48 || v66[1] != BYTE1(v48))
    {
      outlined retain of ((key: _ShapeStyle_Pack.Key, style: _ShapeStyle_Pack.Style), (key: _ShapeStyle_Pack.Key, style: _ShapeStyle_Pack.Style))((uint64_t)v56);
      outlined retain of ((key: _ShapeStyle_Pack.Key, style: _ShapeStyle_Pack.Style), (key: _ShapeStyle_Pack.Key, style: _ShapeStyle_Pack.Style))((uint64_t)v56);
      outlined release of (key: _ShapeStyle_Pack.Key, style: _ShapeStyle_Pack.Style)((uint64_t)&v48);
      outlined release of (key: _ShapeStyle_Pack.Key, style: _ShapeStyle_Pack.Style)((uint64_t)v66);
      goto LABEL_26;
    }
    v28 = v12;
    v29 = *(float *)&v66[92];
    v30 = v67;
    v31 = BYTE8(v67);
    v32 = v68;
    v33 = *((float *)&v53 + 3);
    v34 = v54;
    v35 = BYTE8(v54);
    v36 = v55;
    v46[0] = *(_OWORD *)&v66[8];
    v46[1] = *(_OWORD *)&v66[24];
    v46[2] = *(_OWORD *)&v66[40];
    v46[3] = *(_OWORD *)&v66[56];
    v46[4] = *(_OWORD *)&v66[72];
    v47 = v66[88];
    outlined retain of ((key: _ShapeStyle_Pack.Key, style: _ShapeStyle_Pack.Style), (key: _ShapeStyle_Pack.Key, style: _ShapeStyle_Pack.Style))((uint64_t)v56);
    outlined retain of ((key: _ShapeStyle_Pack.Key, style: _ShapeStyle_Pack.Style), (key: _ShapeStyle_Pack.Key, style: _ShapeStyle_Pack.Style))((uint64_t)v56);
    specialized static _ShapeStyle_Pack.Fill.== infix(_:_:)((uint64_t)v46);
    if ((v37 & 1) == 0 || (v41 = v32, v29 != v33))
    {
      outlined release of (key: _ShapeStyle_Pack.Key, style: _ShapeStyle_Pack.Style)((uint64_t)&v48);
      outlined release of (key: _ShapeStyle_Pack.Key, style: _ShapeStyle_Pack.Style)((uint64_t)v66);
      outlined release of ((key: _ShapeStyle_Pack.Key, style: _ShapeStyle_Pack.Style), (key: _ShapeStyle_Pack.Key, style: _ShapeStyle_Pack.Style))((uint64_t)v56);
      if (v28 == v5)
        goto LABEL_40;
      v12 = v28;
      goto LABEL_9;
    }
    if (v31 == 255)
    {
      v15 = v36;
      v14 = v32;
      v12 = v28;
      if (v35 == 255)
        goto LABEL_32;
LABEL_7:
      outlined copy of GraphicsBlendMode?(v34, v35);
      outlined copy of GraphicsBlendMode?(v30, v31);
      outlined consume of GraphicsBlendMode?(v30, v31);
      outlined consume of GraphicsBlendMode?(v34, v35);
      goto LABEL_8;
    }
    v12 = v28;
    if (v35 == 255)
      goto LABEL_7;
    if ((v31 & 1) != 0)
    {
      if ((v35 & 1) != 0)
      {
        outlined copy of GraphicsBlendMode?(v34, v35);
        outlined copy of GraphicsBlendMode?(v30, v31);
        outlined consume of GraphicsBlendMode(v30, 1);
        outlined consume of GraphicsBlendMode(v34, 1);
        v15 = v36;
        v14 = v41;
        if (v30 == v34)
          goto LABEL_32;
        goto LABEL_8;
      }
      swift_unknownObjectRetain();
    }
    else if ((v35 & 1) == 0)
    {
      outlined consume of GraphicsBlendMode(v30, 0);
      outlined consume of GraphicsBlendMode(v34, 0);
      v15 = v36;
      v14 = v41;
      if ((_DWORD)v30 == (_DWORD)v34)
      {
LABEL_32:
        v38 = specialized static Array<A>.== infix(_:_:)(v14, v15);
        outlined release of (key: _ShapeStyle_Pack.Key, style: _ShapeStyle_Pack.Style)((uint64_t)&v48);
        outlined release of (key: _ShapeStyle_Pack.Key, style: _ShapeStyle_Pack.Style)((uint64_t)v66);
        outlined release of ((key: _ShapeStyle_Pack.Key, style: _ShapeStyle_Pack.Style), (key: _ShapeStyle_Pack.Key, style: _ShapeStyle_Pack.Style))((uint64_t)v56);
        if ((v38 & 1) != 0)
        {
          v11 = v43;
          v10 = v44;
          v3 = v45;
          v4 = v42;
          if (v12 == v5)
            goto LABEL_45;
          v13 = 1;
          goto LABEL_10;
        }
        v11 = v43;
        v10 = v44;
        v3 = v45;
        v4 = v42;
        if (v12 == v5)
        {
LABEL_40:
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v13 = 0;
          goto LABEL_41;
        }
        goto LABEL_27;
      }
      goto LABEL_8;
    }
    v39 = v35 & 1;
    outlined copy of GraphicsBlendMode(v34, v39);
    outlined consume of GraphicsBlendMode(v30, v31 & 1);
    outlined consume of GraphicsBlendMode(v34, v39);
LABEL_8:
    outlined release of (key: _ShapeStyle_Pack.Key, style: _ShapeStyle_Pack.Style)((uint64_t)&v48);
    outlined release of (key: _ShapeStyle_Pack.Key, style: _ShapeStyle_Pack.Style)((uint64_t)v66);
    outlined release of ((key: _ShapeStyle_Pack.Key, style: _ShapeStyle_Pack.Style), (key: _ShapeStyle_Pack.Key, style: _ShapeStyle_Pack.Style))((uint64_t)v56);
    if (v12 == v5)
      goto LABEL_40;
LABEL_9:
    v13 = 0;
    v11 = v43;
    v10 = v44;
    v3 = v45;
    v4 = v42;
LABEL_10:
    v16 = *(_OWORD *)(v11 + v6);
    v17 = *(_OWORD *)(v11 + v6 + 16);
    v18 = *(_OWORD *)(v11 + v6 + 48);
    *(_OWORD *)&v66[32] = *(_OWORD *)(v11 + v6 + 32);
    *(_OWORD *)&v66[48] = v18;
    *(_OWORD *)v66 = v16;
    *(_OWORD *)&v66[16] = v17;
    v19 = *(_OWORD *)(v11 + v6 + 64);
    v20 = *(_OWORD *)(v11 + v6 + 80);
    v21 = *(_OWORD *)(v11 + v6 + 96);
    v68 = *(_QWORD *)(v11 + v6 + 112);
    *(_OWORD *)&v66[80] = v20;
    v67 = v21;
    *(_OWORD *)&v66[64] = v19;
    v6 += 120;
    if (__OFADD__(++v5, 1))
    {
      __break(1u);
      break;
    }
  }
  __break(1u);
LABEL_45:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v13 = 1;
LABEL_41:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v13 & 1;
}

void specialized static _ShapeStyle_Pack.Fill.== infix(_:_:)(uint64_t a1)
{
  __asm { BR              X10 }
}

BOOL sub_234D721C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  _BYTE v21[344];

  if (v14)
  {
    outlined copy of _ShapeStyle_Pack.Fill(v11, v8, v15, v10, v13, a6, a7, a8, v17, v9, v14);
    outlined release of (_ShapeStyle_Pack.Fill, _ShapeStyle_Pack.Fill.AnimatableData)((uint64_t)v21, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))outlined consume of _ShapeStyle_Pack.Fill, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))outlined consume of _ShapeStyle_Pack.Fill);
    return 0;
  }
  else
  {
    outlined release of (_ShapeStyle_Pack.Fill, _ShapeStyle_Pack.Fill.AnimatableData)((uint64_t)v21, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))outlined consume of _ShapeStyle_Pack.Fill, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))outlined consume of _ShapeStyle_Pack.Fill);
    v18 = *(float *)&v12 == *(float *)&v11;
    if (*((float *)&v12 + 1) != *((float *)&v11 + 1))
      v18 = 0;
    if (*(float *)&v16 != *(float *)&v8)
      v18 = 0;
    return *((float *)&v16 + 1) == *((float *)&v8 + 1) && v18;
  }
}

uint64_t specialized static _ShapeStyle_Pack.Style.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  char v2;
  float v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  float v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  char v13;
  _OWORD v15[5];
  char v16;

  v2 = *(_BYTE *)(a1 + 80);
  v3 = *(float *)(a1 + 84);
  v4 = *(_QWORD *)(a1 + 88);
  v5 = *(unsigned __int8 *)(a1 + 96);
  v6 = *(_QWORD *)(a1 + 104);
  v7 = *(float *)(a2 + 84);
  v8 = *(_QWORD *)(a2 + 88);
  v9 = *(unsigned __int8 *)(a2 + 96);
  v10 = *(_QWORD *)(a2 + 104);
  v11 = *(_OWORD *)(a1 + 16);
  v15[0] = *(_OWORD *)a1;
  v15[1] = v11;
  v12 = *(_OWORD *)(a1 + 48);
  v15[2] = *(_OWORD *)(a1 + 32);
  v15[3] = v12;
  v15[4] = *(_OWORD *)(a1 + 64);
  v16 = v2;
  specialized static _ShapeStyle_Pack.Fill.== infix(_:_:)((uint64_t)v15);
  if ((v13 & 1) == 0 || v3 != v7)
    return 0;
  if (v5 == 255)
  {
    if (v9 == 255)
      return specialized static Array<A>.== infix(_:_:)(v6, v10);
LABEL_10:
    outlined copy of GraphicsBlendMode?(v8, v9);
    outlined copy of GraphicsBlendMode?(v4, v5);
    outlined consume of GraphicsBlendMode?(v4, v5);
    outlined consume of GraphicsBlendMode?(v8, v9);
    return 0;
  }
  if (v9 == 255)
    goto LABEL_10;
  if ((v5 & 1) == 0)
  {
    if ((v9 & 1) != 0)
    {
LABEL_15:
      outlined copy of GraphicsBlendMode(v8, v9 & 1);
      outlined consume of GraphicsBlendMode(v4, v5 & 1);
      outlined consume of GraphicsBlendMode(v8, v9 & 1);
      return 0;
    }
    outlined consume of GraphicsBlendMode(v4, 0);
    outlined consume of GraphicsBlendMode(v8, 0);
    if ((_DWORD)v4 != (_DWORD)v8)
      return 0;
    return specialized static Array<A>.== infix(_:_:)(v6, v10);
  }
  if ((v9 & 1) == 0)
  {
    swift_unknownObjectRetain();
    goto LABEL_15;
  }
  outlined copy of GraphicsBlendMode?(v8, v9);
  outlined copy of GraphicsBlendMode?(v4, v5);
  outlined consume of GraphicsBlendMode(v4, 1);
  outlined consume of GraphicsBlendMode(v8, 1);
  if (v4 == v8)
    return specialized static Array<A>.== infix(_:_:)(v6, v10);
  return 0;
}

uint64_t specialized Array<A>.animatableData.setter(uint64_t result)
{
  uint64_t v1;
  _QWORD *v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  int8x16_t v12;
  int64x2_t v13;
  int8x16_t v14;
  char v15;
  int8x16_t *v16;
  int8x16_t v17;
  uint64_t v18;
  float32x2_t v19;
  float v20;
  int32x2_t v21;
  float v22;
  float32x2_t v23;
  float v24;
  float32x2_t v25;
  float32x2_t v26;
  int8x16_t v27;
  unint64_t v28;
  float v29;
  float v30;
  float32x2_t v31;
  int64x2_t v32;
  int8x16_t v33;

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(result + 16);
  if (v3 >= *(_QWORD *)(*(_QWORD *)v1 + 16))
    v4 = *(_QWORD *)(*(_QWORD *)v1 + 16);
  else
    v4 = *(_QWORD *)(result + 16);
  if (v4)
  {
    v5 = result;
    result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
LABEL_25:
      result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v2);
      v2 = (_QWORD *)result;
    }
    v6 = 0;
    v7 = 0;
    v8 = (_BYTE *)(v5 + 80);
    v28 = v3;
    do
    {
      if (v3 == v7)
      {
        __break(1u);
LABEL_24:
        __break(1u);
        goto LABEL_25;
      }
      if (v7 >= v2[2])
        goto LABEL_24;
      v13 = *(int64x2_t *)(v8 - 40);
      v14 = *(int8x16_t *)(v8 - 24);
      v9 = *((_QWORD *)v8 - 1);
      v15 = *v8;
      v16 = (int8x16_t *)&v2[v6];
      LODWORD(v2[v6 + 10]) = *((_DWORD *)v8 - 12);
      v17 = 0uLL;
      if ((v2[v6 + 9] & 0x10000000000) != 0 || (v15 & 1) != 0)
      {
        v9 = 0;
        v10 = 0;
        v11 = 1;
        v12 = 0uLL;
      }
      else
      {
        v33 = v14;
        v5 = v16[4].u8[12];
        v18 = v16[4].u32[2];
        if (one-time initialization token for legacyInterpolation != -1)
        {
          v32 = v13;
          swift_once();
          v13 = v32;
        }
        v31 = vmul_f32((float32x2_t)vmovn_s64(v13), (float32x2_t)0x3C0000003C000000);
        v29 = *(float *)&v13.i32[1] * 0.0078125;
        v30 = *(float *)&v13.i32[3] * 0.0078125;
        result = swift_beginAccess();
        if ((static Color.Resolved.legacyInterpolation & 1) != 0)
        {
          v20 = v30;
          v19 = v31;
          *(float *)v21.i32 = v29;
        }
        else
        {
          v20 = v30;
          v22 = v31.f32[0];
          v23 = (float32x2_t)__PAIR64__(v31.u32[1], LODWORD(v29));
          if (v30 != 0.0)
          {
            v22 = v31.f32[0] * (float)(1.0 / v30);
            v23 = vmul_n_f32((float32x2_t)__PAIR64__(v31.u32[1], LODWORD(v29)), 1.0 / v30);
          }
          v24 = v22 * (float)(v22 * v22);
          v25 = vmul_f32(v23, vmul_f32(v23, v23));
          v26 = vmul_f32(v25, (float32x2_t)0x3EAEC16A40270644);
          *(float *)v21.i32 = (float)(v26.f32[0] + (float)(v24 * -1.2684)) - v26.f32[1];
          v19 = vadd_f32(vmul_lane_f32((float32x2_t)0x3FDA931E3E6C8362, v25, 1), vadd_f32(vmul_n_f32((float32x2_t)0xBB897F53408274ABLL, v24), vmul_n_f32((float32x2_t)0xBF34133EC053B18CLL, v25.f32[0])));
        }
        v11 = 0;
        v10 = v18 | (v5 << 32);
        *(float *)&v21.i32[1] = v20;
        v27.i64[0] = v19.u32[0];
        v27.i64[1] = v19.u32[1];
        v17 = vorrq_s8((int8x16_t)vshll_n_s32(v21, 0x20uLL), v27);
        v12 = v33;
        v3 = v28;
      }
      ++v7;
      v16[2] = v17;
      v16[3] = v12;
      v16[4].i64[0] = v9;
      v16[4].i32[2] = v10;
      v16[4].i8[12] = BYTE4(v10);
      v8 += 56;
      v6 += 9;
      v16[4].i8[13] = v11;
    }
    while (v4 != v7);
    *(_QWORD *)v1 = v2;
  }
  return result;
}

uint64_t outlined copy of _ShapeStyle_Pack.Fill.AnimatableData(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  uint64_t result;

  switch(a11)
  {
    case 2:
    case 3:
    case 4:
    case 5:
    case 7:
      goto LABEL_3;
    case 6:
      swift_bridgeObjectRetain();
LABEL_3:
      result = swift_bridgeObjectRetain();
      break;
    default:
      return result;
  }
  return result;
}

uint64_t outlined consume of _ShapeStyle_Pack.Fill.AnimatableData(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  uint64_t result;

  switch(a11)
  {
    case 2:
    case 3:
    case 4:
    case 5:
    case 7:
      goto LABEL_3;
    case 6:
      swift_bridgeObjectRelease();
LABEL_3:
      result = swift_bridgeObjectRelease();
      break;
    default:
      return result;
  }
  return result;
}

uint64_t type metadata accessor for _ShapeStyle_Pack.Fill.AnimatableData.PaintSetVisitor(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for _ShapeStyle_Pack.Fill.AnimatableData.PaintSetVisitor);
}

uint64_t outlined release of _ShapeStyle_Pack.Fill.AnimatableData.PaintSetVisitor<MeshGradient._Paint>(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;

  v12 = *(_QWORD *)(a1 + 40);
  v13 = *(_QWORD *)(a1 + 32);
  v2 = *(void **)(a1 + 56);
  v11 = *(_QWORD *)(a1 + 48);
  v3 = *(_QWORD *)(a1 + 64);
  v4 = *(_QWORD *)(a1 + 72);
  v5 = *(_QWORD *)(a1 + 80);
  v6 = *(_QWORD *)(a1 + 88);
  v7 = *(_QWORD *)(a1 + 96);
  v8 = *(_QWORD *)(a1 + 104);
  v9 = *(_BYTE *)(a1 + 112);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined consume of _ShapeStyle_Pack.Fill(v13, v12, v11, v2, v3, v4, v5, v6, v7, v8, v9);
  return a1;
}

uint64_t outlined release of _ShapeStyle_Pack.Fill.AnimatableData.PaintSetVisitor<AngularGradient._Paint>(uint64_t a1)
{
  unint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v12;
  unint64_t v13;

  v2 = *(_QWORD *)(a1 + 64);
  v12 = *(_QWORD *)(a1 + 56);
  v13 = *(_QWORD *)(a1 + 48);
  v3 = *(void **)(a1 + 72);
  v4 = *(_QWORD *)(a1 + 80);
  v5 = *(_QWORD *)(a1 + 88);
  v6 = *(_QWORD *)(a1 + 96);
  v7 = *(_QWORD *)(a1 + 104);
  v8 = *(_QWORD *)(a1 + 112);
  v9 = *(_QWORD *)(a1 + 120);
  v10 = *(_BYTE *)(a1 + 128);
  swift_bridgeObjectRelease();
  outlined consume of _ShapeStyle_Pack.Fill(v13, v12, v2, v3, v4, v5, v6, v7, v8, v9, v10);
  return a1;
}

uint64_t outlined release of _ShapeStyle_Pack.Fill.AnimatableData.PaintSetVisitor<LinearGradient._Paint>(uint64_t a1)
{
  unint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v12;
  unint64_t v13;

  v2 = *(_QWORD *)(a1 + 64);
  v12 = *(_QWORD *)(a1 + 56);
  v13 = *(_QWORD *)(a1 + 48);
  v3 = *(void **)(a1 + 72);
  v4 = *(_QWORD *)(a1 + 80);
  v5 = *(_QWORD *)(a1 + 88);
  v6 = *(_QWORD *)(a1 + 96);
  v7 = *(_QWORD *)(a1 + 104);
  v8 = *(_QWORD *)(a1 + 112);
  v9 = *(_QWORD *)(a1 + 120);
  v10 = *(_BYTE *)(a1 + 128);
  swift_bridgeObjectRelease();
  outlined consume of _ShapeStyle_Pack.Fill(v13, v12, v2, v3, v4, v5, v6, v7, v8, v9, v10);
  return a1;
}

uint64_t outlined consume of ShaderVectorData.Element(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result;

  if (a3 == 4)
    return swift_bridgeObjectRelease();
  return result;
}

unint64_t lazy protocol witness table accessor for type _ShapeStyle_Pack.Key and conformance _ShapeStyle_Pack.Key()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _ShapeStyle_Pack.Key and conformance _ShapeStyle_Pack.Key;
  if (!lazy protocol witness table cache variable for type _ShapeStyle_Pack.Key and conformance _ShapeStyle_Pack.Key)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for _ShapeStyle_Pack.Key, &type metadata for _ShapeStyle_Pack.Key);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ShapeStyle_Pack.Key and conformance _ShapeStyle_Pack.Key);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _ShapeStyle_Pack.Slice and conformance _ShapeStyle_Pack.Slice()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _ShapeStyle_Pack.Slice and conformance _ShapeStyle_Pack.Slice;
  if (!lazy protocol witness table cache variable for type _ShapeStyle_Pack.Slice and conformance _ShapeStyle_Pack.Slice)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for _ShapeStyle_Pack.Slice, &type metadata for _ShapeStyle_Pack.Slice);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ShapeStyle_Pack.Slice and conformance _ShapeStyle_Pack.Slice);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _ShapeStyle_Pack.Slice and conformance _ShapeStyle_Pack.Slice;
  if (!lazy protocol witness table cache variable for type _ShapeStyle_Pack.Slice and conformance _ShapeStyle_Pack.Slice)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for _ShapeStyle_Pack.Slice, &type metadata for _ShapeStyle_Pack.Slice);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ShapeStyle_Pack.Slice and conformance _ShapeStyle_Pack.Slice);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _ShapeStyle_Pack.Slice and conformance _ShapeStyle_Pack.Slice;
  if (!lazy protocol witness table cache variable for type _ShapeStyle_Pack.Slice and conformance _ShapeStyle_Pack.Slice)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for _ShapeStyle_Pack.Slice, &type metadata for _ShapeStyle_Pack.Slice);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ShapeStyle_Pack.Slice and conformance _ShapeStyle_Pack.Slice);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _ShapeStyle_Pack.Slice and conformance _ShapeStyle_Pack.Slice;
  if (!lazy protocol witness table cache variable for type _ShapeStyle_Pack.Slice and conformance _ShapeStyle_Pack.Slice)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for _ShapeStyle_Pack.Slice, &type metadata for _ShapeStyle_Pack.Slice);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ShapeStyle_Pack.Slice and conformance _ShapeStyle_Pack.Slice);
  }
  return result;
}

uint64_t associated type witness table accessor for Collection.Indices : RandomAccessCollection in _ShapeStyle_Pack.Slice()
{
  return _sSnySiGSnyxGSksSxRzSZ6StrideRpzrlWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type Range<Int> and conformance <> Range<A>, MEMORY[0x24BEE1BD0]);
}

uint64_t associated type witness table accessor for Collection.SubSequence : RandomAccessCollection in _ShapeStyle_Pack.Slice()
{
  return lazy protocol witness table accessor for type Slice<_ShapeStyle_Pack.Slice> and conformance <> Slice<A>(&lazy protocol witness table cache variable for type Slice<_ShapeStyle_Pack.Slice> and conformance <> Slice<A>, (uint64_t (*)(void))lazy protocol witness table accessor for type _ShapeStyle_Pack.Slice and conformance _ShapeStyle_Pack.Slice, MEMORY[0x24BEE4230]);
}

uint64_t associated type witness table accessor for Collection.Indices : BidirectionalCollection in _ShapeStyle_Pack.Slice()
{
  return _sSnySiGSnyxGSksSxRzSZ6StrideRpzrlWlTm_1(&lazy protocol witness table cache variable for type Range<Int> and conformance <> Range<A>, MEMORY[0x24BEE1BA8]);
}

uint64_t _sSnySiGSnyxGSksSxRzSZ6StrideRpzrlWlTm_1(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD v8[2];

  result = *a1;
  if (!result)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, (unint64_t *)&lazy cache variable for type metadata for Range<Int>, MEMORY[0x24BEE1768], MEMORY[0x24BEE1780], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x24BEE1B68]);
    v6 = v5;
    v7 = lazy protocol witness table accessor for type Int and conformance Int();
    v8[0] = MEMORY[0x24BEE17A8];
    v8[1] = v7;
    result = MEMORY[0x23B7C9C04](a2, v6, v8);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t associated type witness table accessor for Collection.SubSequence : BidirectionalCollection in _ShapeStyle_Pack.Slice()
{
  return lazy protocol witness table accessor for type Slice<_ShapeStyle_Pack.Slice> and conformance <> Slice<A>(&lazy protocol witness table cache variable for type Slice<_ShapeStyle_Pack.Slice> and conformance <> Slice<A>, (uint64_t (*)(void))lazy protocol witness table accessor for type _ShapeStyle_Pack.Slice and conformance _ShapeStyle_Pack.Slice, MEMORY[0x24BEE4218]);
}

uint64_t lazy protocol witness table accessor for type Slice<_ShapeStyle_Pack.Slice> and conformance <> Slice<A>(unint64_t *a1, uint64_t (*a2)(void), uint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  result = *a1;
  if (!result)
  {
    type metadata accessor for FontBox<Font.SystemProvider>(255, &lazy cache variable for type metadata for Slice<_ShapeStyle_Pack.Slice>, (uint64_t (*)(void))lazy protocol witness table accessor for type _ShapeStyle_Pack.Slice and conformance _ShapeStyle_Pack.Slice, (uint64_t)&type metadata for _ShapeStyle_Pack.Slice, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE41D8]);
    v8 = v7;
    v9 = a2();
    result = MEMORY[0x23B7C9C04](a3, v8, &v9);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t associated type witness table accessor for Collection.Indices : Collection in _ShapeStyle_Pack.Slice()
{
  return _sSnySiGSnyxGSksSxRzSZ6StrideRpzrlWlTm_1(&lazy protocol witness table cache variable for type Range<Int> and conformance <> Range<A>, MEMORY[0x24BEE1BD8]);
}

uint64_t associated type witness table accessor for Collection.SubSequence : Collection in _ShapeStyle_Pack.Slice()
{
  return lazy protocol witness table accessor for type Slice<_ShapeStyle_Pack.Slice> and conformance Slice<A>(&lazy protocol witness table cache variable for type Slice<_ShapeStyle_Pack.Slice> and conformance Slice<A>, &lazy cache variable for type metadata for Slice<_ShapeStyle_Pack.Slice>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE41D8], MEMORY[0x24BEE4238]);
}

uint64_t associated type witness table accessor for Sequence.Iterator : IteratorProtocol in _ShapeStyle_Pack.Slice()
{
  return lazy protocol witness table accessor for type Slice<_ShapeStyle_Pack.Slice> and conformance Slice<A>(&lazy protocol witness table cache variable for type IndexingIterator<_ShapeStyle_Pack.Slice> and conformance IndexingIterator<A>, &lazy cache variable for type metadata for IndexingIterator<_ShapeStyle_Pack.Slice>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE2C00], MEMORY[0x24BEE2C18]);
}

uint64_t lazy protocol witness table accessor for type Slice<_ShapeStyle_Pack.Slice> and conformance Slice<A>(unint64_t *a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t), uint64_t a4)
{
  uint64_t result;
  uint64_t v7;

  result = *a1;
  if (!result)
  {
    type metadata accessor for FontBox<Font.SystemProvider>(255, a2, (uint64_t (*)(void))lazy protocol witness table accessor for type _ShapeStyle_Pack.Slice and conformance _ShapeStyle_Pack.Slice, (uint64_t)&type metadata for _ShapeStyle_Pack.Slice, a3);
    result = MEMORY[0x23B7C9C04](a4, v7);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t instantiation function for generic protocol witness table for _ShapeStyle_Pack.AnimatableData(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type _ShapeStyle_Pack.AnimatableData and conformance _ShapeStyle_Pack.AnimatableData();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t associated type witness table accessor for Animatable.AnimatableData : VectorArithmetic in _ShapeStyle_Pack.Style()
{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type AnimatablePair<_ShapeStyle_Pack.Fill.AnimatableData, AnimatablePair<Float, AnimatableArray<AnimatablePair<Float, _ShapeStyle_Pack.Effect.Kind.AnimatableData>>>> and conformance AnimatablePair<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for AnimatablePair<_ShapeStyle_Pack.Fill.AnimatableData, AnimatablePair<Float, AnimatableArray<AnimatablePair<Float, _ShapeStyle_Pack.Effect.Kind.AnimatableData>>>>, (uint64_t)&protocol conformance descriptor for AnimatablePair<A, B>);
}

unint64_t instantiation function for generic protocol witness table for _ShapeStyle_Pack.Fill.AnimatableData(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type _ShapeStyle_Pack.Fill.AnimatableData and conformance _ShapeStyle_Pack.Fill.AnimatableData();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t associated type witness table accessor for Animatable.AnimatableData : VectorArithmetic in _ShapeStyle_Pack.Effect()
{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type AnimatablePair<Float, _ShapeStyle_Pack.Effect.Kind.AnimatableData> and conformance AnimatablePair<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for AnimatablePair<Float, _ShapeStyle_Pack.Effect.Kind.AnimatableData>, (uint64_t)&protocol conformance descriptor for AnimatablePair<A, B>);
}

unint64_t instantiation function for generic protocol witness table for _ShapeStyle_Pack.Effect.Kind.AnimatableData(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type _ShapeStyle_Pack.Effect.Kind.AnimatableData and conformance _ShapeStyle_Pack.Effect.Kind.AnimatableData();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_234D73750@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *(unsigned __int8 *)(result + 1);
  return result;
}

_QWORD *sub_234D7375C(_QWORD *result, uint64_t a2)
{
  *(_BYTE *)(a2 + 1) = *result;
  return result;
}

uint64_t sub_234D73770()
{
  return 0;
}

void sub_234D73780(_QWORD *a1@<X8>)
{
  uint64_t v2;

  _ShapeStyle_Pack.animatableData.getter(&v2);
  *a1 = v2;
}

uint64_t sub_234D737C0(uint64_t *a1)
{
  uint64_t v2;

  v2 = *a1;
  swift_bridgeObjectRetain();
  return _ShapeStyle_Pack.animatableData.setter(&v2);
}

uint64_t sub_234D73818@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  if (*(_BYTE *)(a1 + 40) == 1)
    result = swift_bridgeObjectRetain();
  else
    result = MEMORY[0x24BEE4AF8];
  *a2 = result;
  return result;
}

ValueMetadata *type metadata accessor for _ShapeStyle_Pack()
{
  return &type metadata for _ShapeStyle_Pack;
}

uint64_t destroy for _ShapeStyle_Pack.Style(uint64_t a1)
{
  int v2;

  outlined consume of _ShapeStyle_Pack.Fill(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(void **)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_BYTE *)(a1 + 80));
  v2 = *(unsigned __int8 *)(a1 + 96);
  if (v2 != 255)
    outlined consume of GraphicsBlendMode(*(_QWORD *)(a1 + 88), v2 & 1);
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for _ShapeStyle_Pack.Style(uint64_t a1, uint64_t a2)
{
  id v4;
  uint64_t v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  int v13;
  char v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  char v19;

  v4 = *(id *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  v6 = *(void **)(a2 + 16);
  v7 = *(void **)(a2 + 24);
  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a2 + 40);
  v10 = *(_QWORD *)(a2 + 48);
  v11 = *(_QWORD *)(a2 + 56);
  v17 = *(_QWORD *)(a2 + 64);
  v18 = *(_QWORD *)(a2 + 72);
  v19 = *(_BYTE *)(a2 + 80);
  outlined copy of _ShapeStyle_Pack.Fill(*(id *)a2, v5, v6, v7, v8, v9, v10, v11, v17, v18, v19);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  *(_QWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 24) = v7;
  *(_QWORD *)(a1 + 32) = v8;
  *(_QWORD *)(a1 + 40) = v9;
  *(_QWORD *)(a1 + 48) = v10;
  *(_QWORD *)(a1 + 56) = v11;
  *(_QWORD *)(a1 + 64) = v17;
  *(_QWORD *)(a1 + 72) = v18;
  *(_BYTE *)(a1 + 80) = v19;
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 84);
  v12 = (uint64_t *)(a2 + 88);
  v13 = *(unsigned __int8 *)(a2 + 96);
  if (v13 == 255)
  {
    *(_QWORD *)(a1 + 88) = *v12;
    *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  }
  else
  {
    v14 = v13 & 1;
    v15 = *v12;
    outlined copy of GraphicsBlendMode(*v12, v13 & 1);
    *(_QWORD *)(a1 + 88) = v15;
    *(_BYTE *)(a1 + 96) = v14;
  }
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for _ShapeStyle_Pack.Style(uint64_t a1, uint64_t a2)
{
  id v4;
  uint64_t v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t *v23;
  uint64_t *v24;
  int v25;
  char v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  char v32;
  uint64_t v33;
  uint64_t v35;
  uint64_t v36;
  char v37;

  v4 = *(id *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  v6 = *(void **)(a2 + 16);
  v7 = *(void **)(a2 + 24);
  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a2 + 40);
  v10 = *(_QWORD *)(a2 + 48);
  v11 = *(_QWORD *)(a2 + 56);
  v35 = *(_QWORD *)(a2 + 64);
  v36 = *(_QWORD *)(a2 + 72);
  v37 = *(_BYTE *)(a2 + 80);
  outlined copy of _ShapeStyle_Pack.Fill(*(id *)a2, v5, v6, v7, v8, v9, v10, v11, v35, v36, v37);
  v12 = *(_QWORD *)a1;
  v13 = *(_QWORD *)(a1 + 8);
  v14 = *(_QWORD *)(a1 + 16);
  v15 = *(void **)(a1 + 24);
  v16 = *(_QWORD *)(a1 + 32);
  v17 = *(_QWORD *)(a1 + 40);
  v18 = *(_QWORD *)(a1 + 48);
  v19 = *(_QWORD *)(a1 + 56);
  v20 = *(_QWORD *)(a1 + 64);
  v21 = *(_QWORD *)(a1 + 72);
  v22 = *(_BYTE *)(a1 + 80);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  *(_QWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 24) = v7;
  *(_QWORD *)(a1 + 32) = v8;
  *(_QWORD *)(a1 + 40) = v9;
  *(_QWORD *)(a1 + 48) = v10;
  *(_QWORD *)(a1 + 56) = v11;
  *(_QWORD *)(a1 + 64) = v35;
  *(_QWORD *)(a1 + 72) = v36;
  *(_BYTE *)(a1 + 80) = v37;
  outlined consume of _ShapeStyle_Pack.Fill(v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22);
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 84);
  v23 = (uint64_t *)(a1 + 88);
  v24 = (uint64_t *)(a2 + 88);
  v25 = *(unsigned __int8 *)(a2 + 96);
  if (*(unsigned __int8 *)(a1 + 96) == 255)
  {
    if (v25 == 255)
    {
      v27 = *v24;
      *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
      *v23 = v27;
    }
    else
    {
      v32 = v25 & 1;
      v33 = *v24;
      outlined copy of GraphicsBlendMode(v33, v25 & 1);
      *(_QWORD *)(a1 + 88) = v33;
      *(_BYTE *)(a1 + 96) = v32;
    }
  }
  else if (v25 == 255)
  {
    outlined destroy of GraphicsBlendMode(a1 + 88);
    v26 = *(_BYTE *)(a2 + 96);
    *v23 = *v24;
    *(_BYTE *)(a1 + 96) = v26;
  }
  else
  {
    v28 = v25 & 1;
    v29 = *v24;
    outlined copy of GraphicsBlendMode(v29, v25 & 1);
    v30 = *(_QWORD *)(a1 + 88);
    v31 = *(_BYTE *)(a1 + 96);
    *(_QWORD *)(a1 + 88) = v29;
    *(_BYTE *)(a1 + 96) = v28;
    outlined consume of GraphicsBlendMode(v30, v31);
  }
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t outlined destroy of GraphicsBlendMode(uint64_t a1)
{
  destroy for GraphicsBlendModeEffect(a1);
  return a1;
}

uint64_t assignWithTake for _ShapeStyle_Pack.Style(uint64_t a1, uint64_t a2)
{
  char v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  __int128 v16;
  __int128 v17;
  _QWORD *v18;
  int v19;
  int v20;
  uint64_t v21;

  v4 = *(_BYTE *)(a2 + 80);
  v5 = *(_QWORD *)a1;
  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(_QWORD *)(a1 + 16);
  v8 = *(void **)(a1 + 24);
  v9 = *(_QWORD *)(a1 + 32);
  v10 = *(_QWORD *)(a1 + 40);
  v11 = *(_QWORD *)(a1 + 48);
  v12 = *(_QWORD *)(a1 + 56);
  v13 = *(_QWORD *)(a1 + 64);
  v14 = *(_QWORD *)(a1 + 72);
  v15 = *(_BYTE *)(a1 + 80);
  v16 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v16;
  v17 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v17;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 80) = v4;
  outlined consume of _ShapeStyle_Pack.Fill(v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15);
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 84);
  v18 = (_QWORD *)(a2 + 88);
  v19 = *(unsigned __int8 *)(a1 + 96);
  if (v19 != 255)
  {
    v20 = *(unsigned __int8 *)(a2 + 96);
    if (v20 != 255)
    {
      v21 = *(_QWORD *)(a1 + 88);
      *(_QWORD *)(a1 + 88) = *v18;
      *(_BYTE *)(a1 + 96) = v20 & 1;
      outlined consume of GraphicsBlendMode(v21, v19 & 1);
      goto LABEL_6;
    }
    outlined destroy of GraphicsBlendMode(a1 + 88);
  }
  *(_QWORD *)(a1 + 88) = *v18;
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
LABEL_6:
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for _ShapeStyle_Pack.Style()
{
  return &type metadata for _ShapeStyle_Pack.Style;
}

uint64_t destroy for _ShapeStyle_Pack.Fill(uint64_t a1, uint64_t a2)
{
  return destroy for _ShapeStyle_Pack.Fill(a1, a2, (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))outlined consume of _ShapeStyle_Pack.Fill);
}

uint64_t initializeWithCopy for _ShapeStyle_Pack.Fill(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  return initializeWithCopy for _ShapeStyle_Pack.Fill(a1, a2, a3, (void (*)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char))outlined copy of _ShapeStyle_Pack.Fill);
}

uint64_t *assignWithCopy for _ShapeStyle_Pack.Fill(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  return assignWithCopy for _ShapeStyle_Pack.Fill(a1, a2, a3, (void (*)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char))outlined copy of _ShapeStyle_Pack.Fill, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))outlined consume of _ShapeStyle_Pack.Fill);
}

uint64_t *assignWithTake for _ShapeStyle_Pack.Fill(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  return assignWithTake for _ShapeStyle_Pack.Fill(a1, a2, a3, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char))outlined consume of _ShapeStyle_Pack.Fill);
}

uint64_t getEnumTagSinglePayload for _ShapeStyle_Pack.Fill(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFA && *(_BYTE *)(a1 + 81))
    return (*(_DWORD *)a1 + 250);
  v3 = *(unsigned __int8 *)(a1 + 80);
  if (v3 <= 6)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for _ShapeStyle_Pack.Fill(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xF9)
  {
    *(_QWORD *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 80) = 0;
    *(_QWORD *)result = a2 - 250;
    if (a3 >= 0xFA)
      *(_BYTE *)(result + 81) = 1;
  }
  else
  {
    if (a3 >= 0xFA)
      *(_BYTE *)(result + 81) = 0;
    if (a2)
      *(_BYTE *)(result + 80) = -(char)a2;
  }
  return result;
}

uint64_t getEnumTag for _ShapeStyle_Pack.Fill(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 80);
}

uint64_t destructiveInjectEnumTag for _ShapeStyle_Pack.Fill(uint64_t result, char a2)
{
  *(_BYTE *)(result + 80) = a2;
  return result;
}

ValueMetadata *type metadata accessor for _ShapeStyle_Pack.Fill()
{
  return &type metadata for _ShapeStyle_Pack.Fill;
}

uint64_t destroy for _ShapeStyle_Pack.Effect(uint64_t result)
{
  int v1;

  v1 = *(unsigned __int8 *)(result + 64);
  if (v1 != 255)
    return outlined consume of GraphicsBlendMode(*(_QWORD *)(result + 56), v1 & 1);
  return result;
}

uint64_t initializeWithCopy for _ShapeStyle_Pack.Effect(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  uint64_t *v4;
  int v5;
  char v6;
  uint64_t v7;

  v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 30) = *(_OWORD *)(a2 + 30);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  v4 = (uint64_t *)(a2 + 56);
  v5 = *(unsigned __int8 *)(a2 + 64);
  if (v5 == 255)
  {
    *(_QWORD *)(a1 + 56) = *v4;
    *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  }
  else
  {
    v6 = v5 & 1;
    v7 = *v4;
    outlined copy of GraphicsBlendMode(*v4, v5 & 1);
    *(_QWORD *)(a1 + 56) = v7;
    *(_BYTE *)(a1 + 64) = v6;
  }
  return a1;
}

uint64_t assignWithCopy for _ShapeStyle_Pack.Effect(uint64_t a1, __int128 *a2)
{
  __int128 v3;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  char v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  char v14;
  uint64_t v15;

  v3 = *a2;
  v4 = a2[1];
  *(_OWORD *)(a1 + 30) = *(__int128 *)((char *)a2 + 30);
  *(_OWORD *)a1 = v3;
  *(_OWORD *)(a1 + 16) = v4;
  *(_DWORD *)(a1 + 48) = *((_DWORD *)a2 + 12);
  v5 = a1 + 56;
  v6 = (uint64_t)a2 + 56;
  v7 = *((unsigned __int8 *)a2 + 64);
  if (*(unsigned __int8 *)(a1 + 64) == 255)
  {
    if (v7 == 255)
    {
      v9 = *(_QWORD *)v6;
      *(_BYTE *)(a1 + 64) = *((_BYTE *)a2 + 64);
      *(_QWORD *)v5 = v9;
    }
    else
    {
      v14 = v7 & 1;
      v15 = *(_QWORD *)v6;
      outlined copy of GraphicsBlendMode(v15, v7 & 1);
      *(_QWORD *)(a1 + 56) = v15;
      *(_BYTE *)(a1 + 64) = v14;
    }
  }
  else if (v7 == 255)
  {
    outlined destroy of GraphicsBlendMode(a1 + 56);
    v8 = *(_BYTE *)(v6 + 8);
    *(_QWORD *)v5 = *(_QWORD *)v6;
    *(_BYTE *)(v5 + 8) = v8;
  }
  else
  {
    v10 = v7 & 1;
    v11 = *(_QWORD *)v6;
    outlined copy of GraphicsBlendMode(v11, v7 & 1);
    v12 = *(_QWORD *)(a1 + 56);
    v13 = *(_BYTE *)(a1 + 64);
    *(_QWORD *)(a1 + 56) = v11;
    *(_BYTE *)(a1 + 64) = v10;
    outlined consume of GraphicsBlendMode(v12, v13);
  }
  return a1;
}

uint64_t assignWithTake for _ShapeStyle_Pack.Effect(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;

  v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 30) = *(_OWORD *)(a2 + 30);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  v4 = a1 + 56;
  v5 = a2 + 56;
  v6 = *(unsigned __int8 *)(a1 + 64);
  if (v6 != 255)
  {
    v7 = *(unsigned __int8 *)(a2 + 64);
    if (v7 != 255)
    {
      v8 = *(_QWORD *)(a1 + 56);
      *(_QWORD *)(a1 + 56) = *(_QWORD *)v5;
      *(_BYTE *)(a1 + 64) = v7 & 1;
      outlined consume of GraphicsBlendMode(v8, v6 & 1);
      return a1;
    }
    outlined destroy of GraphicsBlendMode(a1 + 56);
  }
  *(_QWORD *)v4 = *(_QWORD *)v5;
  *(_BYTE *)(v4 + 8) = *(_BYTE *)(v5 + 8);
  return a1;
}

uint64_t getEnumTagSinglePayload for _ShapeStyle_Pack.Effect(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFE && *(_BYTE *)(a1 + 65))
    return (*(_DWORD *)a1 + 254);
  v3 = *(unsigned __int8 *)(a1 + 64);
  if (v3 <= 1)
    v4 = -1;
  else
    v4 = (v3 ^ 0xFF) - 1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for _ShapeStyle_Pack.Effect(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_QWORD *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 64) = 0;
    *(_QWORD *)result = a2 - 254;
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 65) = 1;
  }
  else
  {
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 65) = 0;
    if (a2)
      *(_BYTE *)(result + 64) = ~(_BYTE)a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for _ShapeStyle_Pack.Effect()
{
  return &type metadata for _ShapeStyle_Pack.Effect;
}

__n128 __swift_memcpy46_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 30) = *(_OWORD *)(a2 + 30);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t getEnumTagSinglePayload for _ShapeStyle_Pack.Effect.Kind(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 46))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for _ShapeStyle_Pack.Effect.Kind(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_OWORD *)(result + 30) = 0u;
    *(_OWORD *)result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_DWORD *)result = a2 - 1;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 46) = v3;
  return result;
}

uint64_t getEnumTag for _ShapeStyle_Pack.Effect.Kind(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 45))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t destructiveInjectEnumTag for _ShapeStyle_Pack.Effect.Kind(uint64_t result, int a2)
{
  if (a2)
  {
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 44) = 0;
    *(_DWORD *)(result + 40) = 0;
    *(_QWORD *)result = (a2 - 1);
    *(_BYTE *)(result + 45) = 1;
  }
  else
  {
    *(_BYTE *)(result + 45) = 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for _ShapeStyle_Pack.Effect.Kind()
{
  return &type metadata for _ShapeStyle_Pack.Effect.Kind;
}

uint64_t getEnumTagSinglePayload for _ShapeStyle_Pack.Key(unsigned __int16 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFE)
    goto LABEL_17;
  if (a2 + 65282 <= 0xFFFEFFFF)
    v2 = 2;
  else
    v2 = 4;
  if (a2 + 65282 < 0xFF0000)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 16)) - 65282;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = a1[1];
      if (!a1[1])
        goto LABEL_17;
      return (*a1 | (v4 << 16)) - 65282;
    }
    v4 = *((unsigned __int8 *)a1 + 2);
    if (*((_BYTE *)a1 + 2))
      return (*a1 | (v4 << 16)) - 65282;
  }
LABEL_17:
  v6 = *(unsigned __int8 *)a1;
  v7 = v6 >= 3;
  v8 = v6 - 3;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for _ShapeStyle_Pack.Key(_WORD *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 65282 <= 0xFFFEFFFF)
    v3 = 2;
  else
    v3 = 4;
  if (a3 + 65282 < 0xFF0000)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_234D7422C + 4 * byte_23529E7C3[v4]))();
  *a1 = a2 - 254;
  return ((uint64_t (*)(void))((char *)sub_234D74260 + 4 * byte_23529E7BE[v4]))();
}

uint64_t sub_234D74260(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 2) = v1;
  return result;
}

uint64_t sub_234D74268(uint64_t result, int a2)
{
  *(_WORD *)(result + 2) = 0;
  if (a2)
    JUMPOUT(0x234D74270);
  return result;
}

uint64_t sub_234D7427C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 2) = 0;
  if (!a2)
    JUMPOUT(0x234D74284);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_234D74288(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 2) = v1;
  return result;
}

uint64_t sub_234D74290(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 2) = v1;
  return result;
}

ValueMetadata *type metadata accessor for _ShapeStyle_Pack.Key()
{
  return &type metadata for _ShapeStyle_Pack.Key;
}

uint64_t initializeWithCopy for _ShapeStyle_Pack.Slice(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  swift_unknownObjectRetain();
  return a1;
}

uint64_t assignWithCopy for _ShapeStyle_Pack.Slice(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  return a1;
}

uint64_t assignWithTake for _ShapeStyle_Pack.Slice(uint64_t a1, uint64_t a2)
{
  __int128 v4;

  swift_unknownObjectRelease();
  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  return a1;
}

uint64_t getEnumTagSinglePayload for _ShapeStyle_Pack.Slice(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 33))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for _ShapeStyle_Pack.Slice(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_BYTE *)(result + 32) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 33) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 33) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for _ShapeStyle_Pack.Slice()
{
  return &type metadata for _ShapeStyle_Pack.Slice;
}

ValueMetadata *type metadata accessor for _ShapeStyle_Pack.AnimatableData()
{
  return &type metadata for _ShapeStyle_Pack.AnimatableData;
}

uint64_t destroy for _ShapeStyle_Pack.Fill.AnimatableData(uint64_t a1, uint64_t a2)
{
  return destroy for _ShapeStyle_Pack.Fill(a1, a2, outlined consume of _ShapeStyle_Pack.Fill.AnimatableData);
}

uint64_t destroy for _ShapeStyle_Pack.Fill(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))
{
  char v4;

  v4 = *(_BYTE *)(a1 + 80);
  return a3(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), v4);
}

uint64_t initializeWithCopy for _ShapeStyle_Pack.Fill.AnimatableData(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  return initializeWithCopy for _ShapeStyle_Pack.Fill(a1, a2, a3, (void (*)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char))outlined copy of _ShapeStyle_Pack.Fill.AnimatableData);
}

uint64_t initializeWithCopy for _ShapeStyle_Pack.Fill(uint64_t a1, uint64_t *a2, uint64_t a3, void (*a4)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char))
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  char v16;

  v5 = *a2;
  v6 = a2[1];
  v7 = a2[2];
  v8 = a2[3];
  v9 = a2[4];
  v10 = a2[5];
  v11 = a2[6];
  v12 = a2[7];
  v13 = a2[8];
  v15 = a2[9];
  v16 = *((_BYTE *)a2 + 80);
  a4(*a2, v6, v7, v8, v9, v10, v11, v12, v13, v15, v16);
  *(_QWORD *)a1 = v5;
  *(_QWORD *)(a1 + 8) = v6;
  *(_QWORD *)(a1 + 16) = v7;
  *(_QWORD *)(a1 + 24) = v8;
  *(_QWORD *)(a1 + 32) = v9;
  *(_QWORD *)(a1 + 40) = v10;
  *(_QWORD *)(a1 + 48) = v11;
  *(_QWORD *)(a1 + 56) = v12;
  *(_QWORD *)(a1 + 64) = v13;
  *(_QWORD *)(a1 + 72) = v15;
  *(_BYTE *)(a1 + 80) = v16;
  return a1;
}

uint64_t *assignWithCopy for _ShapeStyle_Pack.Fill.AnimatableData(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  return assignWithCopy for _ShapeStyle_Pack.Fill(a1, a2, a3, (void (*)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char))outlined copy of _ShapeStyle_Pack.Fill.AnimatableData, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))outlined consume of _ShapeStyle_Pack.Fill.AnimatableData);
}

uint64_t *assignWithCopy for _ShapeStyle_Pack.Fill(uint64_t *a1, uint64_t *a2, uint64_t a3, void (*a4)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char), void (*a5)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  int v27;
  uint64_t v28;
  char v29;

  v6 = *a2;
  v7 = a2[1];
  v8 = a2[2];
  v9 = a2[3];
  v10 = a2[4];
  v11 = a2[5];
  v12 = a2[6];
  v13 = a2[7];
  v14 = a2[8];
  v28 = a2[9];
  v29 = *((_BYTE *)a2 + 80);
  a4(*a2, v7, v8, v9, v10, v11, v12, v13, v14, v28, v29);
  v15 = *a1;
  v16 = a1[1];
  v17 = a1[2];
  v18 = a1[3];
  v19 = a1[4];
  v20 = a1[5];
  v21 = a1[6];
  v22 = a1[7];
  v23 = a1[8];
  v24 = a1[9];
  v25 = *((_BYTE *)a1 + 80);
  *a1 = v6;
  a1[1] = v7;
  a1[2] = v8;
  a1[3] = v9;
  a1[4] = v10;
  a1[5] = v11;
  a1[6] = v12;
  a1[7] = v13;
  a1[8] = v14;
  a1[9] = v28;
  *((_BYTE *)a1 + 80) = v29;
  LOBYTE(v27) = v25;
  a5(v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v27);
  return a1;
}

uint64_t *assignWithTake for _ShapeStyle_Pack.Fill.AnimatableData(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  return assignWithTake for _ShapeStyle_Pack.Fill(a1, a2, a3, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char))outlined consume of _ShapeStyle_Pack.Fill.AnimatableData);
}

uint64_t *assignWithTake for _ShapeStyle_Pack.Fill(uint64_t *a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char))
{
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  __int128 v18;
  __int128 v19;
  char v21;

  v6 = *(_BYTE *)(a2 + 80);
  v7 = *a1;
  v9 = a1[1];
  v8 = a1[2];
  v10 = a1[3];
  v11 = a1[4];
  v12 = a1[5];
  v13 = a1[6];
  v14 = a1[7];
  v15 = a1[8];
  v16 = a1[9];
  v17 = *((_BYTE *)a1 + 80);
  v18 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *((_OWORD *)a1 + 1) = v18;
  v19 = *(_OWORD *)(a2 + 48);
  *((_OWORD *)a1 + 2) = *(_OWORD *)(a2 + 32);
  *((_OWORD *)a1 + 3) = v19;
  *((_OWORD *)a1 + 4) = *(_OWORD *)(a2 + 64);
  *((_BYTE *)a1 + 80) = v6;
  v21 = v17;
  a4(v7, v9, v8, v10, v11, v12, v13, v14, v15, v16, v21);
  return a1;
}

uint64_t getEnumTagSinglePayload for _ShapeStyle_Pack.Fill.AnimatableData(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xF7 && *(_BYTE *)(a1 + 81))
    return (*(_DWORD *)a1 + 247);
  v3 = *(unsigned __int8 *)(a1 + 80);
  if (v3 <= 9)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for _ShapeStyle_Pack.Fill.AnimatableData(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xF6)
  {
    *(_QWORD *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 80) = 0;
    *(_QWORD *)result = a2 - 247;
    if (a3 >= 0xF7)
      *(_BYTE *)(result + 81) = 1;
  }
  else
  {
    if (a3 >= 0xF7)
      *(_BYTE *)(result + 81) = 0;
    if (a2)
      *(_BYTE *)(result + 80) = -(char)a2;
  }
  return result;
}

uint64_t getEnumTag for _ShapeStyle_Pack.Fill.AnimatableData(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 80) <= 8u)
    return *(unsigned __int8 *)(a1 + 80);
  else
    return (*(_DWORD *)a1 + 9);
}

uint64_t destructiveInjectEnumTag for _ShapeStyle_Pack.Fill.AnimatableData(uint64_t result, unsigned int a2)
{
  if (a2 >= 9)
  {
    *(_QWORD *)result = a2 - 9;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_QWORD *)(result + 72) = 0;
    LOBYTE(a2) = 9;
  }
  *(_BYTE *)(result + 80) = a2;
  return result;
}

ValueMetadata *type metadata accessor for _ShapeStyle_Pack.Fill.AnimatableData()
{
  return &type metadata for _ShapeStyle_Pack.Fill.AnimatableData;
}

uint64_t storeEnumTagSinglePayload for _ShapeStyle_Pack.Effect.Kind.AnimatableData(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_OWORD *)(result + 25) = 0u;
    *(_OWORD *)result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_DWORD *)result = a2 - 1;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 41) = v3;
  return result;
}

uint64_t getEnumTag for _ShapeStyle_Pack.Effect.Kind.AnimatableData(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 40))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t destructiveInjectEnumTag for _ShapeStyle_Pack.Effect.Kind.AnimatableData(uint64_t result, int a2)
{
  if (a2)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)result = (a2 - 1);
    *(_BYTE *)(result + 40) = 1;
  }
  else
  {
    *(_BYTE *)(result + 40) = 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for _ShapeStyle_Pack.Effect.Kind.AnimatableData()
{
  return &type metadata for _ShapeStyle_Pack.Effect.Kind.AnimatableData;
}

void destroy for ResolvedMulticolorStyle(uint64_t a1)
{

}

uint64_t initializeWithCopy for ResolvedMulticolorStyle(uint64_t a1, uint64_t a2)
{
  void *v3;
  id v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_BYTE *)(a1 + 17) = *(_BYTE *)(a2 + 17);
  *(_BYTE *)(a1 + 18) = *(_BYTE *)(a2 + 18);
  v3 = *(void **)(a2 + 24);
  *(_QWORD *)(a1 + 24) = v3;
  v4 = v3;
  return a1;
}

uint64_t assignWithCopy for ResolvedMulticolorStyle(uint64_t a1, uint64_t a2)
{
  void *v3;
  void *v4;
  id v5;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_BYTE *)(a1 + 17) = *(_BYTE *)(a2 + 17);
  *(_BYTE *)(a1 + 18) = *(_BYTE *)(a2 + 18);
  v3 = *(void **)(a1 + 24);
  v4 = *(void **)(a2 + 24);
  *(_QWORD *)(a1 + 24) = v4;
  v5 = v4;

  return a1;
}

uint64_t assignWithTake for ResolvedMulticolorStyle(uint64_t a1, uint64_t a2)
{
  void *v3;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_BYTE *)(a1 + 17) = *(_BYTE *)(a2 + 17);
  *(_BYTE *)(a1 + 18) = *(_BYTE *)(a2 + 18);
  v3 = *(void **)(a1 + 24);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);

  return a1;
}

ValueMetadata *type metadata accessor for ResolvedMulticolorStyle()
{
  return &type metadata for ResolvedMulticolorStyle;
}

uint64_t type metadata completion function for _ShapeStyle_Pack.Fill.AnimatableData.PaintSetVisitor()
{
  uint64_t result;
  unint64_t v1;

  result = swift_getAssociatedTypeWitness();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for _ShapeStyle_Pack.Fill.AnimatableData.PaintSetVisitor(uint64_t *a1, uint64_t *a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v9;
  unint64_t v10;
  id v11;
  uint64_t v12;
  unint64_t v13;
  void *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  char v23;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0 || ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 81 > 0x18)
  {
    v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
    swift_retain();
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
    v10 = ((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
    v11 = *(id *)v10;
    v12 = *(_QWORD *)(v10 + 8);
    v13 = ((unint64_t)a1 + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
    v14 = *(void **)(v10 + 16);
    v15 = *(void **)(v10 + 24);
    v16 = *(_QWORD *)(v10 + 32);
    v17 = *(_QWORD *)(v10 + 40);
    v18 = *(_QWORD *)(v10 + 48);
    v19 = *(_QWORD *)(v10 + 56);
    v21 = *(_QWORD *)(v10 + 64);
    v22 = *(_QWORD *)(v10 + 72);
    v23 = *(_BYTE *)(v10 + 80);
    outlined copy of _ShapeStyle_Pack.Fill(*(id *)v10, v12, v14, v15, v16, v17, v18, v19, v21, v22, v23);
    *(_QWORD *)v13 = v11;
    *(_QWORD *)(v13 + 8) = v12;
    *(_QWORD *)(v13 + 16) = v14;
    *(_QWORD *)(v13 + 24) = v15;
    *(_QWORD *)(v13 + 32) = v16;
    *(_QWORD *)(v13 + 40) = v17;
    *(_QWORD *)(v13 + 48) = v18;
    *(_QWORD *)(v13 + 56) = v19;
    *(_QWORD *)(v13 + 64) = v21;
    *(_QWORD *)(v13 + 72) = v22;
    *(_BYTE *)(v13 + 80) = v23;
  }
  return a1;
}

void destroy for _ShapeStyle_Pack.Fill.AnimatableData.PaintSetVisitor(uint64_t a1)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v3;
  unint64_t v4;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v3 = *(_QWORD *)(AssociatedTypeWitness - 8);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(a1, AssociatedTypeWitness);
  v4 = (a1 + *(_QWORD *)(v3 + 64) + 7) & 0xFFFFFFFFFFFFFFF8;
  outlined consume of _ShapeStyle_Pack.Fill(*(_QWORD *)v4, *(_QWORD *)(v4 + 8), *(_QWORD *)(v4 + 16), *(void **)(v4 + 24), *(_QWORD *)(v4 + 32), *(_QWORD *)(v4 + 40), *(_QWORD *)(v4 + 48), *(_QWORD *)(v4 + 56), *(_QWORD *)(v4 + 64), *(_QWORD *)(v4 + 72), *(_BYTE *)(v4 + 80));
}

uint64_t initializeWithCopy for _ShapeStyle_Pack.Fill.AnimatableData.PaintSetVisitor(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  id v9;
  uint64_t v10;
  void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  char v20;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  v9 = *(id *)v8;
  v10 = *(_QWORD *)(v8 + 8);
  v11 = *(void **)(v8 + 16);
  v12 = *(void **)(v8 + 24);
  v13 = *(_QWORD *)(v8 + 32);
  v14 = *(_QWORD *)(v8 + 40);
  v15 = *(_QWORD *)(v8 + 48);
  v16 = *(_QWORD *)(v8 + 56);
  v17 = *(_QWORD *)(v8 + 64);
  v19 = *(_QWORD *)(v8 + 72);
  v20 = *(_BYTE *)(v8 + 80);
  outlined copy of _ShapeStyle_Pack.Fill(*(id *)v8, v10, v11, v12, v13, v14, v15, v16, v17, v19, v20);
  *(_QWORD *)v7 = v9;
  *(_QWORD *)(v7 + 8) = v10;
  *(_QWORD *)(v7 + 16) = v11;
  *(_QWORD *)(v7 + 24) = v12;
  *(_QWORD *)(v7 + 32) = v13;
  *(_QWORD *)(v7 + 40) = v14;
  *(_QWORD *)(v7 + 48) = v15;
  *(_QWORD *)(v7 + 56) = v16;
  *(_QWORD *)(v7 + 64) = v17;
  *(_QWORD *)(v7 + 72) = v19;
  *(_BYTE *)(v7 + 80) = v20;
  return a1;
}

uint64_t assignWithCopy for _ShapeStyle_Pack.Fill.AnimatableData.PaintSetVisitor(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  id v9;
  uint64_t v10;
  void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v30;
  char v31;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 24))(a1, a2, AssociatedTypeWitness);
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  v9 = *(id *)v8;
  v10 = *(_QWORD *)(v8 + 8);
  v11 = *(void **)(v8 + 16);
  v12 = *(void **)(v8 + 24);
  v13 = *(_QWORD *)(v8 + 32);
  v14 = *(_QWORD *)(v8 + 40);
  v15 = *(_QWORD *)(v8 + 48);
  v16 = *(_QWORD *)(v8 + 56);
  v17 = *(_QWORD *)(v8 + 64);
  v30 = *(_QWORD *)(v8 + 72);
  v31 = *(_BYTE *)(v8 + 80);
  outlined copy of _ShapeStyle_Pack.Fill(*(id *)v8, v10, v11, v12, v13, v14, v15, v16, v17, v30, v31);
  v18 = *(_QWORD *)v7;
  v19 = *(_QWORD *)(v7 + 8);
  v20 = *(_QWORD *)(v7 + 16);
  v21 = *(void **)(v7 + 24);
  v22 = *(_QWORD *)(v7 + 32);
  v23 = *(_QWORD *)(v7 + 40);
  v24 = *(_QWORD *)(v7 + 48);
  v25 = *(_QWORD *)(v7 + 56);
  v26 = *(_QWORD *)(v7 + 64);
  v27 = *(_QWORD *)(v7 + 72);
  v28 = *(_BYTE *)(v7 + 80);
  *(_QWORD *)v7 = v9;
  *(_QWORD *)(v7 + 8) = v10;
  *(_QWORD *)(v7 + 16) = v11;
  *(_QWORD *)(v7 + 24) = v12;
  *(_QWORD *)(v7 + 32) = v13;
  *(_QWORD *)(v7 + 40) = v14;
  *(_QWORD *)(v7 + 48) = v15;
  *(_QWORD *)(v7 + 56) = v16;
  *(_QWORD *)(v7 + 64) = v17;
  *(_QWORD *)(v7 + 72) = v30;
  *(_BYTE *)(v7 + 80) = v31;
  outlined consume of _ShapeStyle_Pack.Fill(v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28);
  return a1;
}

uint64_t initializeWithTake for _ShapeStyle_Pack.Fill.AnimatableData.PaintSetVisitor(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 32))(a1, a2, AssociatedTypeWitness);
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  v9 = *(_OWORD *)(v8 + 16);
  *(_OWORD *)v7 = *(_OWORD *)v8;
  *(_OWORD *)(v7 + 16) = v9;
  v11 = *(_OWORD *)(v8 + 48);
  v10 = *(_OWORD *)(v8 + 64);
  v12 = *(_OWORD *)(v8 + 32);
  *(_BYTE *)(v7 + 80) = *(_BYTE *)(v8 + 80);
  *(_OWORD *)(v7 + 48) = v11;
  *(_OWORD *)(v7 + 64) = v10;
  *(_OWORD *)(v7 + 32) = v12;
  return a1;
}

uint64_t assignWithTake for _ShapeStyle_Pack.Fill.AnimatableData.PaintSetVisitor(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  char v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 40))(a1, a2, AssociatedTypeWitness);
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  v8 = *(_BYTE *)(v7 + 80);
  v9 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  v10 = *(_QWORD *)v9;
  v11 = *(_QWORD *)(v9 + 8);
  v12 = *(_QWORD *)(v9 + 16);
  v13 = *(void **)(v9 + 24);
  v14 = *(_QWORD *)(v9 + 32);
  v15 = *(_QWORD *)(v9 + 40);
  v16 = *(_QWORD *)(v9 + 48);
  v17 = *(_QWORD *)(v9 + 56);
  v18 = *(_QWORD *)(v9 + 64);
  v19 = *(_QWORD *)(v9 + 72);
  v20 = *(_BYTE *)(v9 + 80);
  v21 = *(_OWORD *)(v7 + 16);
  v22 = *(_OWORD *)(v7 + 32);
  v23 = *(_OWORD *)(v7 + 48);
  v24 = *(_OWORD *)(v7 + 64);
  *(_OWORD *)v9 = *(_OWORD *)v7;
  *(_OWORD *)(v9 + 16) = v21;
  *(_OWORD *)(v9 + 32) = v22;
  *(_OWORD *)(v9 + 48) = v23;
  *(_OWORD *)(v9 + 64) = v24;
  *(_BYTE *)(v9 + 80) = v8;
  outlined consume of _ShapeStyle_Pack.Fill(v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20);
  return a1;
}

uint64_t getEnumTagSinglePayload for _ShapeStyle_Pack.Fill.AnimatableData.PaintSetVisitor(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int v13;

  v4 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0xF9)
    v6 = 249;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(_QWORD *)(v4 + 64);
  if (v6 < a2)
  {
    v8 = ((v7 + 7) & 0xFFFFFFF8) + 81;
    if (v8 < 4)
      v9 = ((a2 - v6 + 255) >> (8 * v8)) + 1;
    else
      v9 = 2;
    if (v9 >= 0x10000)
      v10 = 4;
    else
      v10 = 2;
    if (v9 < 0x100)
      v10 = 1;
    if (v9 >= 2)
      v11 = v10;
    else
      v11 = 0;
    __asm { BR              X15 }
  }
  if (v5 >= 0xF9)
    return (*(uint64_t (**)(uint64_t))(v4 + 48))(a1);
  v13 = *(unsigned __int8 *)(((a1 + v7 + 7) & 0xFFFFFFFFFFFFF8) + 0x50);
  if (v13 > 6)
    return (v13 ^ 0xFF) + 1;
  else
    return 0;
}

void storeEnumTagSinglePayload for _ShapeStyle_Pack.Fill.AnimatableData.PaintSetVisitor(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  unsigned int v9;
  int v10;
  int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;

  v6 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  if (*(_DWORD *)(v6 + 84) <= 0xF9u)
    v7 = 249;
  else
    v7 = *(_DWORD *)(v6 + 84);
  v8 = ((*(_QWORD *)(v6 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 81;
  if (v7 >= a3)
  {
    v11 = 0;
    if (v7 >= a2)
      goto LABEL_17;
  }
  else
  {
    if (v8 <= 3)
      v9 = ((a3 - v7 + 255) >> (8 * v8)) + 1;
    else
      v9 = 2;
    if (v9 >= 0x10000)
      v10 = 4;
    else
      v10 = 2;
    if (v9 < 0x100)
      v10 = 1;
    if (v9 >= 2)
      v11 = v10;
    else
      v11 = 0;
    if (v7 >= a2)
LABEL_17:
      __asm { BR              X12 }
  }
  v12 = ~v7 + a2;
  v13 = (~(_BYTE)v7 + a2);
  if (v8 >= 4)
    v14 = v12;
  else
    v14 = v13;
  bzero(a1, v8);
  if ((_DWORD)v8 == 1)
    *a1 = v14;
  else
    *(_DWORD *)a1 = v14;
  __asm { BR              X10 }
}

void sub_234D75218()
{
  uint64_t v0;
  char v1;
  uint64_t v2;

  *(_BYTE *)(v0 + v2) = v1;
  JUMPOUT(0x234D752B0);
}

void sub_234D75220()
{
  uint64_t v0;
  int v1;
  uint64_t v2;

  *(_DWORD *)(v0 + v2) = 0;
  if (v1)
    JUMPOUT(0x234D75228);
  JUMPOUT(0x234D752B0);
}

void sub_234D75270()
{
  uint64_t v0;
  __int16 v1;
  uint64_t v2;

  *(_WORD *)(v0 + v2) = v1;
  JUMPOUT(0x234D752B0);
}

void sub_234D75278()
{
  uint64_t v0;
  int v1;
  uint64_t v2;

  *(_DWORD *)(v0 + v2) = v1;
  JUMPOUT(0x234D752B0);
}

uint64_t sub_234D75280@<X0>(unsigned int a1@<W2>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_WORD *)(v4 + v6) = 0;
  if (!(_DWORD)v5)
    goto LABEL_6;
  if (a1 < 0xF9)
  {
    if (v5 > 0xF9)
      JUMPOUT(0x234D7528CLL);
    *(_BYTE *)(((v4 + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 80) = -(char)v5;
LABEL_6:
    JUMPOUT(0x234D752B0);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 56))(v4, v5);
}

ValueMetadata *type metadata accessor for _ShapeStyle_Pack.Fill.AnimatableData.PaintInitVisitor()
{
  return &type metadata for _ShapeStyle_Pack.Fill.AnimatableData.PaintInitVisitor;
}

uint64_t outlined copy of ShaderVectorData.Element(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result;

  if (a3 == 4)
    return swift_bridgeObjectRetain();
  return result;
}

uint64_t outlined release of ((key: _ShapeStyle_Pack.Key, data: AnimatablePair<_ShapeStyle_Pack.Fill.AnimatableData, AnimatablePair<Float, AnimatableArray<AnimatablePair<Float, _ShapeStyle_Pack.Effect.Kind.AnimatableData>>>>), (key: _ShapeStyle_Pack.Key, data: AnimatablePair<_ShapeStyle_Pack.Fill.AnimatableData, AnimatablePair<Float, AnimatableArray<AnimatablePair<Float, _ShapeStyle_Pack.Effect.Kind.AnimatableData>>>>))(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v13 = *(_QWORD *)(a1 + 120);
  v12 = *(_QWORD *)(a1 + 128);
  v2 = *(_QWORD *)(a1 + 144);
  v11 = *(_QWORD *)(a1 + 136);
  v3 = *(_QWORD *)(a1 + 152);
  v4 = *(_QWORD *)(a1 + 160);
  v5 = *(_QWORD *)(a1 + 168);
  v6 = *(_QWORD *)(a1 + 176);
  v7 = *(_QWORD *)(a1 + 184);
  v8 = *(_QWORD *)(a1 + 192);
  v9 = *(_BYTE *)(a1 + 200);
  outlined consume of _ShapeStyle_Pack.Fill.AnimatableData(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_BYTE *)(a1 + 88));
  swift_bridgeObjectRelease();
  outlined consume of _ShapeStyle_Pack.Fill.AnimatableData(v13, v12, v11, v2, v3, v4, v5, v6, v7, v8, v9);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t outlined retain of ((key: _ShapeStyle_Pack.Key, data: AnimatablePair<_ShapeStyle_Pack.Fill.AnimatableData, AnimatablePair<Float, AnimatableArray<AnimatablePair<Float, _ShapeStyle_Pack.Effect.Kind.AnimatableData>>>>), (key: _ShapeStyle_Pack.Key, data: AnimatablePair<_ShapeStyle_Pack.Fill.AnimatableData, AnimatablePair<Float, AnimatableArray<AnimatablePair<Float, _ShapeStyle_Pack.Effect.Kind.AnimatableData>>>>))(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v13 = *(_QWORD *)(a1 + 120);
  v12 = *(_QWORD *)(a1 + 128);
  v2 = *(_QWORD *)(a1 + 144);
  v11 = *(_QWORD *)(a1 + 136);
  v3 = *(_QWORD *)(a1 + 152);
  v4 = *(_QWORD *)(a1 + 160);
  v5 = *(_QWORD *)(a1 + 168);
  v6 = *(_QWORD *)(a1 + 176);
  v7 = *(_QWORD *)(a1 + 184);
  v8 = *(_QWORD *)(a1 + 192);
  v9 = *(_BYTE *)(a1 + 200);
  outlined copy of _ShapeStyle_Pack.Fill.AnimatableData(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_BYTE *)(a1 + 88));
  swift_bridgeObjectRetain();
  outlined copy of _ShapeStyle_Pack.Fill.AnimatableData(v13, v12, v11, v2, v3, v4, v5, v6, v7, v8, v9);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t outlined release of ((key: _ShapeStyle_Pack.Key, style: _ShapeStyle_Pack.Style), (key: _ShapeStyle_Pack.Key, style: _ShapeStyle_Pack.Style))(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  unsigned __int8 v8;
  unsigned __int8 v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;

  v2 = *(_QWORD *)(a1 + 96);
  v17 = *(_QWORD *)(a1 + 128);
  v16 = *(_QWORD *)(a1 + 136);
  v15 = *(_QWORD *)(a1 + 144);
  v14 = *(void **)(a1 + 152);
  v3 = *(_QWORD *)(a1 + 168);
  v13 = *(_QWORD *)(a1 + 160);
  v4 = *(_QWORD *)(a1 + 176);
  v12 = *(_QWORD *)(a1 + 184);
  v5 = *(_QWORD *)(a1 + 192);
  v6 = *(_QWORD *)(a1 + 200);
  v7 = *(_BYTE *)(a1 + 208);
  v11 = *(_QWORD *)(a1 + 216);
  v8 = *(_BYTE *)(a1 + 104);
  v9 = *(_BYTE *)(a1 + 224);
  outlined consume of _ShapeStyle_Pack.Fill(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(void **)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_BYTE *)(a1 + 88));
  outlined consume of GraphicsBlendMode?(v2, v8);
  swift_bridgeObjectRelease();
  outlined consume of _ShapeStyle_Pack.Fill(v17, v16, v15, v14, v13, v3, v4, v12, v5, v6, v7);
  outlined consume of GraphicsBlendMode?(v11, v9);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t outlined retain of ((key: _ShapeStyle_Pack.Key, style: _ShapeStyle_Pack.Style), (key: _ShapeStyle_Pack.Key, style: _ShapeStyle_Pack.Style))(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  unsigned __int8 v8;
  unsigned __int8 v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  uint64_t v16;
  void *v17;

  v2 = *(_QWORD *)(a1 + 96);
  v17 = *(void **)(a1 + 128);
  v16 = *(_QWORD *)(a1 + 136);
  v15 = *(void **)(a1 + 144);
  v14 = *(void **)(a1 + 152);
  v3 = *(_QWORD *)(a1 + 168);
  v13 = *(_QWORD *)(a1 + 160);
  v4 = *(_QWORD *)(a1 + 176);
  v12 = *(_QWORD *)(a1 + 184);
  v5 = *(_QWORD *)(a1 + 192);
  v6 = *(_QWORD *)(a1 + 200);
  v7 = *(_BYTE *)(a1 + 208);
  v11 = *(_QWORD *)(a1 + 216);
  v8 = *(_BYTE *)(a1 + 104);
  v9 = *(_BYTE *)(a1 + 224);
  outlined copy of _ShapeStyle_Pack.Fill(*(id *)(a1 + 8), *(_QWORD *)(a1 + 16), *(void **)(a1 + 24), *(void **)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_BYTE *)(a1 + 88));
  outlined copy of GraphicsBlendMode?(v2, v8);
  swift_bridgeObjectRetain();
  outlined copy of _ShapeStyle_Pack.Fill(v17, v16, v15, v14, v13, v3, v4, v12, v5, v6, v7);
  outlined copy of GraphicsBlendMode?(v11, v9);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t outlined release of (_ShapeStyle_Pack.Fill, _ShapeStyle_Pack.Fill.AnimatableData)(uint64_t a1, void (*a2)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char), void (*a3)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  char v14;
  int v15;
  uint64_t v16;
  uint64_t v17;

  v4 = *(_QWORD *)(a1 + 104);
  v16 = *(_QWORD *)(a1 + 96);
  v17 = *(_QWORD *)(a1 + 88);
  v5 = *(_QWORD *)(a1 + 112);
  v6 = *(_QWORD *)(a1 + 120);
  v7 = *(_QWORD *)(a1 + 128);
  v8 = *(_QWORD *)(a1 + 136);
  v10 = *(_QWORD *)(a1 + 144);
  v9 = *(_QWORD *)(a1 + 152);
  v11 = *(_QWORD *)(a1 + 160);
  v12 = *(_BYTE *)(a1 + 168);
  v14 = *(_BYTE *)(a1 + 80);
  a2(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), v14);
  LOBYTE(v15) = v12;
  a3(v17, v16, v4, v5, v6, v7, v8, v10, v9, v11, v15);
  return a1;
}

uint64_t specialized Material.ResolvedMaterial.visitLayers<A>(_:)(uint64_t a1, unint64_t a2, int a3)
{
  __int16 v5;
  os_unfair_lock_s *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  float v11;
  uint64_t v12;
  char v13;
  unint64_t v15;
  int v16;

  if ((a2 & 0xFFFFFFFFFFFFFFFELL) == 6)
  {
    if (a2 == 7)
    {
      v5 = 256;
    }
    else
    {
      outlined copy of Material.ID(a2);
      v5 = 0;
    }
    outlined consume of Material.ID(a2);
    outlined consume of Material.ID(7uLL);
    return specialized MaterialLayers.visit<A>(layer:)(v5 | a3 & 1u);
  }
  else
  {
    outlined copy of Material.ID(a2);
    if (one-time initialization token for _shared != -1)
      swift_once();
    v6 = (os_unfair_lock_s *)(static CoreMaterialCache._shared + 16);
    swift_retain();
    os_unfair_lock_lock(v6);
    v15 = a2;
    v16 = a3;
    v7 = CoreMaterialCache.subscript.getter((uint64_t)&v15);
    outlined consume of Material.ID(a2);
    os_unfair_lock_unlock(v6);
    swift_release();
    v8 = *(_QWORD *)(v7 + 16);
    if (v8)
    {
      v9 = (char *)(v7 + 56);
      do
      {
        v10 = *((_QWORD *)v9 - 3);
        v11 = *((float *)v9 - 4);
        v12 = *((_QWORD *)v9 - 1);
        v13 = *v9;
        v9 += 32;
        outlined copy of DisplayList.Content.Value(v10);
        outlined copy of GraphicsBlendMode(v12, v13);
        specialized MaterialLayers.visit<A>(layer:)(v10, v12, v13, v11);
        outlined consume of DisplayList.Content.Value(v10);
        outlined consume of GraphicsBlendMode(v12, v13);
        --v8;
      }
      while (v8);
    }
    return swift_bridgeObjectRelease();
  }
}

uint64_t specialized Material.ResolvedMaterial.visitCoreMaterialLayers<A>(_:)(double *a1, unint64_t a2, int a3)
{
  os_unfair_lock_s *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  void *v15;
  unint64_t v16;
  float v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  id v24;
  unint64_t v25;
  char v27;
  uint64_t v28;
  unint64_t v29;
  int v30;

  outlined copy of Material.ID(a2);
  if (one-time initialization token for _shared != -1)
    swift_once();
  v5 = (os_unfair_lock_s *)(static CoreMaterialCache._shared + 16);
  swift_retain();
  os_unfair_lock_lock(v5);
  v29 = a2;
  v30 = a3;
  v6 = CoreMaterialCache.subscript.getter((uint64_t)&v29);
  outlined consume of Material.ID(a2);
  os_unfair_lock_unlock(v5);
  swift_release();
  v7 = *(_QWORD *)(v6 + 16);
  if (v7)
  {
    v8 = 0;
    v9 = *a1;
    v10 = (char *)(v6 + 56);
    do
    {
      v16 = *((_QWORD *)v10 - 3);
      v17 = *((float *)v10 - 4);
      v18 = *((_QWORD *)v10 - 1);
      v19 = *v10;
      outlined copy of DisplayList.Content.Value(v16);
      v28 = v18;
      v27 = v19;
      outlined copy of GraphicsBlendMode(v18, v19);
      swift_retain();
      v20 = RBDrawingStateBeginLayer();
      type metadata accessor for GraphicsContext.Storage();
      v21 = swift_allocObject();
      *(_QWORD *)(v21 + 32) = 1065353216;
      *(_QWORD *)(v21 + 40) = 0x7FF8000000000000;
      v12 = *(_QWORD *)(*(_QWORD *)&v9 + 16);
      LODWORD(v18) = *(_DWORD *)(v12 + 64);
      if ((_DWORD)v18 == RBDrawingStateGetDefaultColorSpace())
      {
        swift_retain();
        swift_retain();
      }
      else
      {
        v24 = (id)RBDrawingStateGetDisplayList();
        v25 = v16;
        v11 = *(_QWORD *)(v12 + 48);
        v23 = *(_QWORD *)(v12 + 56);
        type metadata accessor for GraphicsContext.Storage.Shared();
        v12 = swift_allocObject();
        *(_QWORD *)(v12 + 24) = 0;
        v13 = v8;
        v14 = objc_allocWithZone(MEMORY[0x24BE7EF48]);
        swift_retain();
        swift_retain();
        swift_retain();
        v15 = v14;
        v8 = v13;
        *(_QWORD *)(v12 + 32) = objc_msgSend(v15, sel_init);
        *(_QWORD *)(v12 + 40) = objc_msgSend(objc_allocWithZone(MEMORY[0x24BE7EF20]), sel_init);
        *(_QWORD *)(v12 + 72) = 0;
        _s7SwiftUI15GraphicsContextV15ResolvedShadingOSgWOi0_((uint64_t)&v29);
        outlined init with take of GraphicsContext.ResolvedShading?((uint64_t)&v29, v12 + 80);
        *(_BYTE *)(v12 + 240) = 2;
        *(_QWORD *)(v12 + 256) = 0;
        *(_QWORD *)(v12 + 264) = 0;
        *(_QWORD *)(v12 + 248) = 0;
        *(_QWORD *)(v12 + 16) = v24;
        *(_QWORD *)(v12 + 48) = v11;
        *(_QWORD *)(v12 + 56) = v23;
        v16 = v25;
        *(_DWORD *)(v12 + 64) = objc_msgSend(v24, sel_defaultColorSpace);
      }
      *(_QWORD *)(v21 + 16) = v12;
      *(_QWORD *)(v21 + 24) = v20;
      *(_BYTE *)(v21 + 48) = 0;
      swift_release();
      v29 = v21;
      swift_retain();
      specialized closure #1 in MaterialRenderer.visit<A>(layer:)(&v29, v16, v28, v27, a1, v17);
      swift_release();
      RBDrawingStateDrawLayer();
      swift_release();
      swift_release();
      outlined consume of DisplayList.Content.Value(v16);
      outlined consume of GraphicsBlendMode(v28, v27);
      v10 += 32;
      --v7;
    }
    while (v7);
  }
  return swift_bridgeObjectRelease();
}

uint64_t _ShapeStyle_RenderedShape.init(_:frame:identity:version:contentSeed:options:environment:)@<X0>(__int128 *a1@<X0>, int *a2@<X1>, uint64_t *a3@<X2>, __int16 *a4@<X3>, char *a5@<X4>, int a6@<W5>, uint64_t a7@<X8>, double a8@<D0>, double a9@<D1>, double a10@<D2>, double a11@<D3>)
{
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  int v23;
  int v24;
  uint64_t v25;
  __int16 v26;
  char v27;
  uint64_t v28;
  char v29;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  char v37;

  v17 = *a1;
  v18 = a1[1];
  v19 = a1[2];
  v20 = a1[3];
  v21 = a1[4];
  v22 = a1[5];
  v23 = *((_DWORD *)a1 + 24);
  v24 = *a2;
  v25 = *a3;
  v26 = *a4;
  v27 = *a5;
  if (one-time initialization token for normal != -1)
  {
    v35 = a1[1];
    v36 = *a1;
    v33 = a1[3];
    v34 = a1[2];
    v31 = a1[5];
    v32 = a1[4];
    swift_once();
    v22 = v31;
    v21 = v32;
    v20 = v33;
    v19 = v34;
    v18 = v35;
    v17 = v36;
  }
  v28 = static GraphicsBlendMode.normal;
  v29 = byte_254266040;
  v37 = byte_254266040;
  *(_OWORD *)a7 = v17;
  *(_OWORD *)(a7 + 16) = v18;
  *(_OWORD *)(a7 + 32) = v19;
  *(_OWORD *)(a7 + 48) = v20;
  *(_OWORD *)(a7 + 64) = v21;
  *(_OWORD *)(a7 + 80) = v22;
  *(_DWORD *)(a7 + 96) = v23;
  *(_WORD *)(a7 + 100) = v26;
  *(double *)(a7 + 104) = a8;
  *(double *)(a7 + 112) = a9;
  *(double *)(a7 + 120) = a10;
  *(double *)(a7 + 128) = a11;
  *(_QWORD *)(a7 + 136) = 0;
  *(_DWORD *)(a7 + 144) = 0;
  *(double *)(a7 + 152) = a8;
  *(double *)(a7 + 160) = a9;
  *(double *)(a7 + 168) = a10;
  *(double *)(a7 + 176) = a11;
  *(_QWORD *)(a7 + 184) = v25;
  *(_OWORD *)(a7 + 192) = xmmword_23527E880;
  *(_QWORD *)(a7 + 208) = 0;
  *(_BYTE *)(a7 + 218) = 0;
  *(_WORD *)(a7 + 216) = 0;
  *(_DWORD *)(a7 + 220) = v24;
  *(_BYTE *)(a7 + 224) = v27;
  *(_DWORD *)(a7 + 228) = a6;
  *(_QWORD *)(a7 + 232) = v28;
  *(_BYTE *)(a7 + 240) = v37;
  *(_DWORD *)(a7 + 244) = 1065353216;
  *(_BYTE *)(a7 + 248) = 0;
  return outlined copy of GraphicsBlendMode(v28, v29);
}

void _ShapeStyle_RenderedShape.renderItem(name:styles:layers:)(unsigned __int8 *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  int v20;
  __int128 v21;
  char v22;
  unsigned __int8 v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  int v39;
  char v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unsigned __int8 v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char v78;
  uint64_t v79;
  uint64_t v80;
  unsigned __int8 v81;
  uint64_t v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  char v88;
  int v89;
  uint64_t v90;
  char v91;
  uint64_t v92;
  unsigned __int8 v93;
  uint64_t v94[2];
  char v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;

  v4 = v3;
  v6 = *a1;
  v8 = *(_QWORD *)v4;
  v7 = *(_QWORD *)(v4 + 8);
  v10 = *(_QWORD *)(v4 + 16);
  v9 = *(_QWORD *)(v4 + 24);
  v11 = *(_QWORD *)(v4 + 32);
  v12 = *(_QWORD *)(v4 + 40);
  v13 = *(_QWORD *)(v4 + 48);
  v14 = *(_QWORD *)(v4 + 56);
  v15 = *(_QWORD *)(v4 + 64);
  v16 = *(_QWORD *)(v4 + 72);
  v17 = *(_QWORD *)(v4 + 80);
  v18 = *(_QWORD *)(v4 + 88);
  v19 = *(_DWORD *)(v4 + 96);
  v20 = (v19 >> 21) & 7;
  if (v20 == 1)
  {
    v54 = *a1;
    v71 = *(_QWORD *)(v4 + 88);
    v74 = *(_QWORD *)(v4 + 72);
    v77 = *(_QWORD *)(v4 + 64);
    v80 = *(_QWORD *)(v4 + 80);
    v64 = *(_QWORD *)(v4 + 24);
    v67 = *(_QWORD *)(v4 + 32);
    v69 = *(_QWORD *)(v4 + 48);
    swift_retain();
    swift_retain();
    if (ResolvedStyledText.needsStyledRendering.getter())
    {
      v94[0] = v8;
      v94[1] = v7;
      v95 = v10 & 1;
      AGGraphGetValue();
      v93 = v54;
      _ShapeStyle_Pack.subscript.getter(&v93, 0, (uint64_t)&v96);
      v49 = *((_QWORD *)&v96 + 1);
      v50 = v96;
      v47 = (void *)*((_QWORD *)&v97 + 1);
      v48 = v97;
      v45 = *((_QWORD *)&v98 + 1);
      v46 = v98;
      v43 = *((_QWORD *)&v99 + 1);
      v44 = v99;
      v21 = v100;
      v61 = v12;
      v22 = v101;
      v42 = *((_QWORD *)&v101 + 1);
      v23 = v102;
      v83 = v96;
      v84 = v97;
      v85 = v98;
      v86 = v99;
      v87 = v100;
      v88 = v101;
      v89 = DWORD1(v101);
      v90 = *((_QWORD *)&v101 + 1);
      v91 = v102;
      v92 = *((_QWORD *)&v102 + 1);
      v93 = v54;
      _ShapeStyle_RenderedShape.renderKeyedText(_:style:name:layers:)(v94, (uint64_t *)&v83, &v93, a3);
      outlined consume of _ShapeStyle_Pack.Fill(v50, v49, v48, v47, v46, v45, v44, v43, v21, *((uint64_t *)&v21 + 1), v22);
      outlined consume of GraphicsBlendMode?(v42, v23);
      swift_bridgeObjectRelease();
      outlined consume of _ShapeStyle_RenderedShape.Shape(v8, v7, v10, v64, v67, v61, v69, v14, v77, v74, v80, v71, v19);
    }
    else
    {
      *(_QWORD *)&v96 = v8;
      *((_QWORD *)&v96 + 1) = v7;
      LOBYTE(v97) = v10 & 1;
      _ShapeStyle_RenderedShape.renderUnstyledText(_:layers:)((uint64_t *)&v96);
      outlined consume of _ShapeStyle_RenderedShape.Shape(v8, v7, v10, v64, v67, v12, v69, v14, v77, v74, v80, v71, v19);
    }
  }
  else if (v20 == 2)
  {
    if ((v14 & 0x100000000) != 0)
    {
      v83 = 0uLL;
      LOBYTE(v84) = 3;
      v101 = 0u;
      v102 = 0u;
      v58 = v14;
      *((_QWORD *)&v31 + 1) = v14;
      *(_QWORD *)&v31 = v13;
      v52 = v31 >> 32;
      v99 = 0u;
      v100 = 0u;
      v63 = v12;
      v66 = v9;
      *((_QWORD *)&v31 + 1) = v13;
      *(_QWORD *)&v31 = v12;
      v97 = 0u;
      v98 = 0u;
      v96 = 0u;
      v68 = v11;
      v70 = v13;
      v32 = v11;
      v33 = v9;
      v76 = v16;
      v79 = v15;
      v34 = v16;
      v82 = v17;
      v73 = v18;
      outlined copy of GraphicsImage.Contents?((id)v8, v7);
      outlined copy of GraphicsImage.Contents?((id)v8, v7);
      _ShapeStyle_RenderedLayers.beginLayer(id:style:shape:)((uint64_t)&v83, &v96, v4);
      v35 = swift_allocObject();
      *(_QWORD *)(v35 + 16) = v8;
      *(_BYTE *)(v35 + 24) = v7;
      *(_QWORD *)(v35 + 32) = v10;
      *(_QWORD *)(v35 + 40) = v33;
      *(_QWORD *)(v35 + 48) = v32;
      *(_BYTE *)(v35 + 56) = v63;
      *(_QWORD *)(v35 + 60) = v31 >> 32;
      *(_QWORD *)(v35 + 68) = v52;
      *(_BYTE *)(v35 + 76) = 1;
      *(_QWORD *)(v35 + 80) = v79;
      *(_QWORD *)(v35 + 88) = v34;
      *(_QWORD *)(v35 + 96) = v82;
      *(_QWORD *)(v35 + 104) = v73;
      *(_BYTE *)(v35 + 112) = v19;
      *(_BYTE *)(v35 + 113) = BYTE1(v19) & 1;
      *(_BYTE *)(v35 + 114) = BYTE2(v19) & 0x1F;
      *(_BYTE *)(v35 + 115) = HIBYTE(v19);
      v60 = v35 | 0x3000000000000000;
      v56 = *(unsigned __int16 *)(v4 + 100);
      v36 = *(_QWORD *)(v4 + 192);
      v53 = *(_QWORD *)(v4 + 200);
      outlined copy of GraphicsImage.Contents?((id)v8, v7);
      outlined consume of DisplayList.Item.Value(v36, v53);
      *(_QWORD *)(v4 + 192) = v60;
      *(_QWORD *)(v4 + 200) = v56;
      *(_QWORD *)(v4 + 208) = 0;
      *(_BYTE *)(v4 + 218) = 0;
      *(_WORD *)(v4 + 216) = 0;
      _ShapeStyle_RenderedLayers.endLayer(shape:)(v4);
      outlined consume of _ShapeStyle_RenderedShape.Shape(v8, v7, v10, v66, v68, v63, v70, v58, v79, v76, v82, v73, v19);
      outlined consume of _ShapeStyle_RenderedShape.Shape(v8, v7, v10, v66, v68, v63, v70, v58, v79, v76, v82, v73, v19);
    }
    else
    {
      if (*(_QWORD *)(v4 + 8) != 2)
      {
        if (*(_QWORD *)(v4 + 8) == 255)
          outlined copy of GraphicsImage.Contents?(*(id *)v4, 255);
        goto LABEL_13;
      }
      v37 = *(_BYTE *)(v8 + 24);
      v38 = *(_QWORD *)(v8 + 32);
      v39 = *(_DWORD *)(v8 + 40);
      v40 = *(_BYTE *)(v8 + 44);
      v41 = *(_BYTE *)(v8 + 45);
      *(_QWORD *)&v96 = *(_QWORD *)(v8 + 16);
      BYTE8(v96) = v37;
      *(_QWORD *)&v97 = v38;
      DWORD2(v97) = v39;
      BYTE12(v97) = v40;
      BYTE13(v97) = v41;
      LOBYTE(v94[0]) = v6;
      *(_QWORD *)&v83 = *(_QWORD *)AGGraphGetValue();
      specialized _ShapeStyle_RenderedShape.renderVectorGlyph(_:size:orientation:name:styles:layers:)((uint64_t)&v96, v12, (unsigned __int8 *)v94, (uint64_t *)&v83, a3);
    }
  }
  else if (v20 != 4 || v7 | v8 | v10 | v9 | v11 | v12 | v13 | v14 | v15 | v16 | v17 | v18 || v19 != 0x800000)
  {
LABEL_13:
    AGGraphGetValue();
    LOBYTE(v94[0]) = v6;
    _ShapeStyle_Pack.subscript.getter((unsigned __int8 *)v94, 0, (uint64_t)&v96);
    v24 = v96;
    v25 = *((_QWORD *)&v97 + 1);
    v26 = *((_QWORD *)&v99 + 1);
    v55 = v100;
    v57 = v99;
    v51 = *((_QWORD *)&v100 + 1);
    v75 = *((_QWORD *)&v96 + 1);
    v78 = v101;
    v27 = DWORD1(v101);
    v59 = *((_QWORD *)&v101 + 1);
    v28 = *((_QWORD *)&v102 + 1);
    v81 = v102;
    v83 = v6;
    LOBYTE(v84) = 0;
    v29 = v97;
    v72 = v97;
    v65 = *((_QWORD *)&v99 + 1);
    v30 = v98;
    v62 = *((_QWORD *)&v98 + 1);
    *(_QWORD *)&v101 = v101 | ((unint64_t)DWORD1(v101) << 32);
    *(_QWORD *)&v102 = v102;
    _ShapeStyle_RenderedLayers.beginLayer(id:style:shape:)((uint64_t)&v83, &v96, v4);
    v96 = v24;
    *(_QWORD *)&v97 = v29;
    *((_QWORD *)&v97 + 1) = v25;
    v98 = v30;
    *(_QWORD *)&v99 = v57;
    *((_QWORD *)&v99 + 1) = v26;
    *(_QWORD *)&v100 = v55;
    *((_QWORD *)&v100 + 1) = v51;
    LOBYTE(v101) = v78;
    DWORD1(v101) = v27;
    *((_QWORD *)&v101 + 1) = v59;
    LOBYTE(v102) = v81;
    *((_QWORD *)&v102 + 1) = v28;
    _ShapeStyle_RenderedShape.render(style:)((uint64_t)&v96);
    _ShapeStyle_RenderedLayers.endLayer(shape:)(v4);
    outlined consume of _ShapeStyle_Pack.Fill(v24, v75, v72, *((void **)&v29 + 1), v30, v62, v57, v65, v55, v51, v78);
    outlined consume of GraphicsBlendMode?(v59, v81);
    swift_bridgeObjectRelease();
  }
}

uint64_t _ShapeStyle_RenderedLayers.commit(shape:options:)@<X0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v3;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t *v8;
  int v9;
  uint64_t v10;
  _QWORD *v11;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  int v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t result;
  uint64_t v27;
  _QWORD *v28;
  int v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  uint64_t v35;
  __int128 v36;
  int v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  __int128 v41;
  uint64_t v42;
  _QWORD *v43;
  char v44;
  uint64_t v46;
  uint64_t *v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  void *v68;
  _BYTE v69[40];
  __int128 v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char v74;
  int v75;
  uint64_t v76;
  char v77;
  uint64_t v78;
  uint64_t v79;
  __int16 v80;
  char v81;

  v5 = a3;
  v6 = *a2;
  v7 = *v3;
  if (!*v3)
    goto LABEL_14;
  v44 = *a2;
  v8 = (uint64_t *)(v7 + 24);
  v9 = *(_DWORD *)(v7 + 60);
  v10 = v9;
  swift_beginAccess();
  if (*(_QWORD *)(*(_QWORD *)(v7 + 24) + 16) <= v9)
    goto LABEL_13;
  v46 = v7;
  v47 = (uint64_t *)(v7 + 24);
  while (1)
  {
    ++*(_DWORD *)(v7 + 60);
    swift_beginAccess();
    v11 = *(_QWORD **)(v7 + 24);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(_QWORD *)(v7 + 24) = v11;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
    {
      if (v9 < 0)
        break;
      goto LABEL_7;
    }
    v11 = specialized _ArrayBuffer._consumeAndCreateNew()(v11);
    *v8 = (uint64_t)v11;
    if (v9 < 0)
      break;
LABEL_7:
    if (v11[2] <= v10)
    {
      __break(1u);
LABEL_26:
      __break(1u);
      JUMPOUT(0x234D7713CLL);
    }
    v13 = 224 * v10;
    BYTE4(v11[28 * v10 + 31]) = 1;
    v14 = *v8;
    swift_endAccess();
    if (*(_QWORD *)(v14 + 16) <= v10)
      goto LABEL_26;
    v15 = (_QWORD *)(v14 + v13);
    v16 = *(_DWORD *)(v14 + v13 + 52);
    v17 = *(void **)(v14 + v13 + 56);
    v52 = (void *)v15[9];
    v53 = v15[8];
    v68 = (void *)v15[10];
    v18 = v15[13];
    v50 = v15[12];
    v51 = v15[11];
    v49 = v15[14];
    v19 = v7;
    v20 = v15[15];
    v21 = v15[16];
    v22 = v15[17];
    v23 = v15[18];
    v24 = v15[19];
    v25 = v15[20];
    v65 = *(_QWORD *)(a1 + 8);
    v66 = *(_QWORD *)a1;
    v63 = *(_QWORD *)(a1 + 24);
    v64 = *(_QWORD *)(a1 + 16);
    v61 = *(_QWORD *)(a1 + 40);
    v62 = *(_QWORD *)(a1 + 32);
    v59 = *(_QWORD *)(a1 + 56);
    v60 = *(_QWORD *)(a1 + 48);
    v57 = *(_QWORD *)(a1 + 72);
    v58 = *(_QWORD *)(a1 + 64);
    v55 = *(_QWORD *)(a1 + 88);
    v56 = *(_QWORD *)(a1 + 80);
    v54 = *(_DWORD *)(a1 + 96);
    *(_OWORD *)(a1 + 64) = 0u;
    *(_OWORD *)(a1 + 80) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    *(_DWORD *)(a1 + 96) = 0x800000;
    *(_DWORD *)(a1 + 144) = v16;
    *(_QWORD *)(a1 + 136) = v19;
    swift_retain_n();
    v67 = v20;
    outlined copy of _ShapeStyle_Pack.Style?(v17, v53, v52, v68, v51, v50, v18, v49, v20, v21, v22, v23, v24, v25);
    swift_release();
    if (v25)
    {
      *(_QWORD *)v69 = v17;
      *(_QWORD *)&v69[8] = v53;
      *(_QWORD *)&v69[16] = v52;
      *(_QWORD *)&v69[24] = v68;
      *(_QWORD *)&v69[32] = v51;
      *(_QWORD *)&v70 = v50;
      *((_QWORD *)&v70 + 1) = v18;
      v71 = v49;
      v72 = v20;
      v73 = v21;
      v74 = v22;
      v75 = HIDWORD(v22);
      v76 = v23;
      v77 = v24;
      v78 = v25;
      _ShapeStyle_RenderedShape.render(style:)((uint64_t)v69);
    }
    _ShapeStyle_RenderedLayers.endLayer(shape:)(a1);
    outlined consume of _ShapeStyle_RenderedShape.Shape(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_DWORD *)(a1 + 96));
    v7 = v46;
    swift_release_n();
    outlined consume of _ShapeStyle_Pack.Style?((unint64_t)v17, v53, (unint64_t)v52, v68, v51, v50, v18, v49, v67, v21, v22, v23, v24, v25);
    *(_QWORD *)a1 = v66;
    *(_QWORD *)(a1 + 8) = v65;
    *(_QWORD *)(a1 + 16) = v64;
    *(_QWORD *)(a1 + 24) = v63;
    *(_QWORD *)(a1 + 32) = v62;
    *(_QWORD *)(a1 + 40) = v61;
    *(_QWORD *)(a1 + 48) = v60;
    *(_QWORD *)(a1 + 56) = v59;
    *(_QWORD *)(a1 + 64) = v58;
    *(_QWORD *)(a1 + 72) = v57;
    *(_QWORD *)(a1 + 80) = v56;
    *(_QWORD *)(a1 + 88) = v55;
    *(_DWORD *)(a1 + 96) = v54;
    v9 = *(_DWORD *)(v46 + 60);
    v10 = v9;
    v8 = v47;
    swift_beginAccess();
    if (*(_QWORD *)(*(_QWORD *)(v46 + 24) + 16) <= v9)
      goto LABEL_13;
  }
  __break(1u);
LABEL_13:
  *(_DWORD *)(v7 + 60) = 0;
  v5 = a3;
  v6 = v44;
LABEL_14:
  result = v48[1];
  v27 = v48[9];
  if (!(v27 >> 30))
  {
    v43 = v48;
    v40 = v48[8];
    *(_QWORD *)v69 = v48[1];
    v41 = *((_OWORD *)v48 + 2);
    *(_OWORD *)&v69[8] = *((_OWORD *)v48 + 1);
    *(_OWORD *)&v69[24] = v41;
    v70 = *((_OWORD *)v48 + 3);
    v71 = v40;
    BYTE2(v72) = BYTE2(v27);
    LOWORD(v72) = v27;
    HIDWORD(v72) = HIDWORD(v27);
    result = DisplayList.init(_:)((uint64_t *)v69, v5);
    goto LABEL_24;
  }
  if (v27 >> 30 == 1)
  {
    v28 = (_QWORD *)swift_bridgeObjectRetain();
    DisplayList.init(_:)(v28, (uint64_t)&v79);
    v29 = *(_DWORD *)(a1 + 220);
    v30 = *(_QWORD *)(a1 + 184);
    v31 = *(_OWORD *)(a1 + 120);
    *(_OWORD *)v69 = *(_OWORD *)(a1 + 104);
    *(_OWORD *)&v69[16] = v31;
    *(_QWORD *)&v69[32] = v30;
    v70 = xmmword_23527E870;
    v71 = v79;
    BYTE2(v72) = v81;
    LOWORD(v72) = v80;
    HIDWORD(v72) = v29;
    LOBYTE(v79) = v6;
    DisplayList.Item.canonicalize(options:)((char *)&v79);
    v32 = *(_OWORD *)v69;
    v33 = *(_OWORD *)&v69[16];
    v34 = *(_QWORD *)&v69[32];
    v36 = v70;
    v35 = v71;
    v37 = (unsigned __int16)v72 | (BYTE2(v72) << 16);
    v38 = HIDWORD(v72);
    v39 = *((_QWORD *)&v70 + 1) >> 62;
    if (*((_QWORD *)&v70 + 1) >> 62 != 3
      || (v37 & 0xFFFFFF) != 0
      || *((_QWORD *)&v70 + 1) != 0xC000000000000000
      || v71 | (unint64_t)v70)
    {
      type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<DisplayList.Item>, (uint64_t)&type metadata for DisplayList.Item, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
      v42 = swift_allocObject();
      *(_OWORD *)(v42 + 16) = xmmword_23527E860;
      *(_OWORD *)(v42 + 32) = v32;
      *(_OWORD *)(v42 + 48) = v33;
      *(_QWORD *)(v42 + 64) = v34;
      *(_OWORD *)(v42 + 72) = v36;
      *(_QWORD *)(v42 + 88) = v35;
      *(_BYTE *)(v42 + 98) = BYTE2(v37);
      *(_WORD *)(v42 + 96) = v37;
      *(_DWORD *)(v42 + 100) = v38;
      __asm { BR              X10 }
    }
    *(_QWORD *)a3 = MEMORY[0x24BEE4AF8];
    *(_WORD *)(a3 + 8) = 0;
    *(_BYTE *)(a3 + 10) = 0;
    outlined consume of DisplayList.Item.Value(v36, 0xC000000000000000);
    v43 = v48;
    result = outlined consume of _ShapeStyle_RenderedLayers.Layers(v48[1], v48[2], v48[3], v48[4], v48[5], v48[6], v48[7], v48[8], v48[9]);
LABEL_24:
    *(_OWORD *)(v48 + 5) = 0u;
    *(_OWORD *)(v48 + 7) = 0u;
    *(_OWORD *)(v48 + 1) = 0u;
    *(_OWORD *)(v48 + 3) = 0u;
    v43[9] = 0x80000000;
  }
  else
  {
    *(_QWORD *)v5 = MEMORY[0x24BEE4AF8];
    *(_WORD *)(v5 + 8) = 0;
    *(_BYTE *)(v5 + 10) = 0;
  }
  return result;
}

uint64_t _ShapeStyle_RenderedShape.renderUnstyledText(_:layers:)(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  double v6;
  double v7;
  uint64_t v8;
  uint64_t v9;
  CGFloat x;
  double y;
  CGFloat width;
  CGFloat height;
  int v14;
  uint64_t *Value;
  uint64_t v16;
  double v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  id v24;
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  __int16 v34;
  char v35;
  int v36;
  char v37;
  uint64_t v38;
  char v39;
  int v40;
  char v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  double v45;
  double v46;
  double v47;
  double v48;
  _BOOL4 IsNull;
  double v50;
  double v51;
  double v52;
  double v53;
  double v54;
  double v55;
  CGFloat v56;
  CGFloat v57;
  uint64_t v58;
  int v60;
  double v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  uint64_t v69;
  double v70;
  double v71;
  uint64_t v72;
  int v73;
  double v74;
  double v75;
  CGFloat v76;
  CGFloat v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  __int16 v82;
  char v83;
  int v84;
  char v85;
  int v86;
  uint64_t v87;
  char v88;
  int v89;
  char v90;
  _QWORD v91[2];
  char v92;
  __C::CGRect v93;
  CGRect v94;
  CGRect v95;
  CGRect v96;

  v2 = v1;
  v4 = *a1;
  v3 = a1[1];
  v5 = *((unsigned __int8 *)a1 + 16);
  v91[0] = 0;
  v91[1] = 0;
  v92 = 3;
  v67 = 0u;
  v68 = 0u;
  v65 = 0u;
  v66 = 0u;
  v63 = 0u;
  v64 = 0u;
  v62 = 0u;
  _ShapeStyle_RenderedLayers.beginLayer(id:style:shape:)((uint64_t)v91, &v62, v1);
  v7 = *(double *)(v1 + 120);
  v6 = *(double *)(v1 + 128);
  v93 = ResolvedStyledText.frame(in:)(*(CGSize *)(v1 + 120));
  v8 = *(_QWORD *)(v1 + 104);
  v9 = *(_QWORD *)(v1 + 112);
  v94 = CGRectOffset((CGRect)v93, *(CGFloat *)(v2 + 104), *(CGFloat *)(v2 + 112));
  x = v94.origin.x;
  y = v94.origin.y;
  width = v94.size.width;
  height = v94.size.height;
  *(CGRect *)(v1 + 152) = v94;
  if ((ResolvedStyledText.needsRBDisplayList.getter() & 1) != 0)
  {
    v61 = x;
    v14 = *(_DWORD *)(v1 + 228);
    Value = (uint64_t *)AGGraphGetValue();
    v16 = *Value;
    if (Value[1])
    {
      swift_retain_n();
      swift_retain_n();
      v17 = specialized PropertyList.Tracker.value<A>(_:for:)(v16);
      swift_release_n();
    }
    else
    {
      v23 = swift_retain_n();
      v17 = specialized closure #1 in PropertyList.subscript.getter(v23);
    }
    swift_release_n();
    v24 = ResolvedStyledText.makeRBDisplayList(for:renderer:deviceScale:)(v3, v7, v6, v17);
    v25 = *(_DWORD *)(v1 + 96);
    v26 = v5 | 0x200;
    v27 = *(unsigned __int16 *)(v1 + 100);
    if (!v3)
      v26 = v5;
    v60 = v26;
    v28 = *(_QWORD *)(v1 + 136);
    v29 = *(_DWORD *)(v1 + 144);
    v31 = *(_QWORD *)(v1 + 184);
    v30 = *(_QWORD *)(v1 + 192);
    v32 = *(_QWORD *)(v2 + 200);
    v33 = *(_QWORD *)(v2 + 208);
    v34 = *(_WORD *)(v2 + 216);
    v35 = *(_BYTE *)(v2 + 218);
    v36 = *(_DWORD *)(v2 + 220);
    v37 = *(_BYTE *)(v2 + 224);
    v38 = *(_QWORD *)(v2 + 232);
    v39 = *(_BYTE *)(v2 + 240);
    v40 = *(_DWORD *)(v2 + 244);
    v41 = *(_BYTE *)(v2 + 248);
    v42 = *(_OWORD *)(v2 + 16);
    v62 = *(_OWORD *)v2;
    v63 = v42;
    v43 = *(_OWORD *)(v2 + 48);
    v64 = *(_OWORD *)(v2 + 32);
    v65 = v43;
    v44 = *(_OWORD *)(v2 + 80);
    v66 = *(_OWORD *)(v2 + 64);
    v67 = v44;
    LODWORD(v68) = v25;
    WORD2(v68) = v27;
    *((_QWORD *)&v68 + 1) = v8;
    v69 = v9;
    v70 = v7;
    v71 = v6;
    v72 = v28;
    v73 = v29;
    v74 = v61;
    v75 = y;
    v76 = width;
    v77 = height;
    v78 = v31;
    v79 = v30;
    v80 = v32;
    v81 = v33;
    v83 = v35;
    v82 = v34;
    v84 = v36;
    v85 = v37;
    v86 = v14;
    v87 = v38;
    v88 = v39;
    v89 = v40;
    v90 = v41;
    outlined retain of _ShapeStyle_RenderedShape((uint64_t)&v62);
    objc_msgSend(v24, sel_boundingRect);
    v45 = v95.origin.x;
    v46 = v95.origin.y;
    v47 = v95.size.width;
    v48 = v95.size.height;
    IsNull = CGRectIsNull(v95);
    v50 = 0.0;
    if (IsNull)
      v51 = 0.0;
    else
      v51 = v45;
    if (IsNull)
      v52 = 0.0;
    else
      v52 = v46;
    if (IsNull)
      v53 = 0.0;
    else
      v53 = v47;
    if (!IsNull)
      v50 = v48;
    v96 = CGRectIntegral(*(CGRect *)(&v50 - 3));
    v54 = v96.origin.x;
    v55 = v96.origin.y;
    v56 = v96.size.width;
    v57 = v96.size.height;
    v58 = swift_allocObject();
    *(_QWORD *)(v58 + 16) = v24;
    *(double *)(v58 + 24) = v54;
    *(double *)(v58 + 32) = v55;
    *(_BYTE *)(v58 + 40) = 0;
    *(_DWORD *)(v58 + 44) = 0;
    *(_BYTE *)(v58 + 48) = 1;
    *(_DWORD *)(v58 + 52) = v60 | 0xA0;
    *(_BYTE *)(v58 + 56) = 3;
    outlined release of _ShapeStyle_RenderedShape((uint64_t)&v62);
    outlined consume of DisplayList.Item.Value(v30, v32);
    *(double *)(v2 + 152) = v61 + v54;
    *(double *)(v2 + 160) = y + v55;
    *(CGFloat *)(v2 + 168) = v56;
    *(CGFloat *)(v2 + 176) = v57;
    *(_QWORD *)(v2 + 184) = v31;
    *(_QWORD *)(v2 + 192) = v58 | 0xA000000000000000;
    *(_QWORD *)(v2 + 200) = v27;
    *(_QWORD *)(v2 + 208) = 0;
    *(_BYTE *)(v2 + 218) = 0;
    *(_WORD *)(v2 + 216) = 0;
    *(_DWORD *)(v2 + 220) = 0;
  }
  else
  {
    v18 = swift_allocObject();
    *(_QWORD *)(v18 + 16) = v4;
    *(_QWORD *)(v18 + 24) = v3;
    *(_BYTE *)(v18 + 32) = v5;
    *(double *)(v18 + 40) = v7;
    *(double *)(v18 + 48) = v6;
    v19 = v18 | 0x8000000000000000;
    v20 = *(unsigned __int16 *)(v1 + 100);
    v21 = *(_QWORD *)(v1 + 192);
    v22 = *(_QWORD *)(v2 + 200);
    swift_retain();
    swift_retain();
    outlined consume of DisplayList.Item.Value(v21, v22);
    *(_QWORD *)(v2 + 192) = v19;
    *(_QWORD *)(v2 + 200) = v20;
    *(_QWORD *)(v2 + 208) = 0;
    *(_BYTE *)(v2 + 218) = 0;
    *(_WORD *)(v2 + 216) = 0;
  }
  return _ShapeStyle_RenderedLayers.endLayer(shape:)(v2);
}

uint64_t _ShapeStyle_RenderedShape.renderKeyedText(_:style:name:layers:)(uint64_t *a1, uint64_t *a2, unsigned __int8 *a3, int a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  double v11;
  int v12;
  uint64_t *Value;
  uint64_t v14;
  double v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  float *v25;
  int v26;
  int v27;
  unint64_t v28;
  uint64_t v29;
  int v30;
  __int16 v31;
  char v32;
  int v33;
  char v34;
  uint64_t v35;
  char v36;
  int v37;
  char v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  unint64_t v42;
  CGFloat x;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  BOOL IsNull;
  CGFloat v48;
  CGFloat v49;
  CGFloat v50;
  CGFloat v51;
  double v52;
  double v53;
  CGFloat v54;
  CGFloat v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  double v59;
  float v60;
  uint64_t v61;
  int v62;
  uint64_t *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  void *v68;
  void *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unsigned __int8 v75;
  unsigned int v76;
  float v77;
  double v78;
  double v79;
  double v80;
  double v81;
  double v82;
  double v83;
  double v84;
  double v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  id v93;
  double v94;
  double v95;
  double v96;
  double v97;
  _BOOL4 v98;
  double v99;
  double v100;
  double v101;
  double v102;
  double v103;
  double v104;
  CGFloat v105;
  CGFloat v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  unsigned int v112;
  uint64_t v113;
  int v114;
  unint64_t v116;
  uint64_t v117;
  char v118;
  uint64_t v119;
  char v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  int v131;
  id v132;
  void *v133;
  int v134;
  float v135;
  float v136;
  float v137;
  id v138;
  uint64_t v139;
  uint64_t v140;
  double v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t *v144;
  __int128 v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  unint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  unint64_t v161;
  __int128 v162;
  char v163;
  uint64_t v164;
  void *v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  __int128 v169;
  __int128 v170;
  __int128 v171;
  __int128 v172;
  __int128 v173;
  __int128 v174;
  __int128 v175;
  uint64_t v176;
  uint64_t v177;
  char v178;
  __int128 v179;
  __int128 v180;
  __int128 v181;
  __int128 v182;
  __int128 v183;
  __int128 v184;
  _BYTE v185[32];
  __int128 v186;
  _BYTE v187[80];
  _BYTE v188[25];
  int v189;
  CGRect v190;
  CGRect v191;
  CGRect v192;
  CGRect v193;

  v6 = *a1;
  v5 = a1[1];
  v7 = *((unsigned __int8 *)a1 + 16);
  v8 = *a2;
  v9 = a2[1];
  v127 = a2[3];
  v128 = a2[2];
  v125 = a2[5];
  v126 = a2[4];
  v123 = a2[7];
  v124 = a2[6];
  v121 = a2[9];
  v122 = a2[8];
  v120 = *((_BYTE *)a2 + 80);
  v131 = *((_DWORD *)a2 + 21);
  v119 = a2[11];
  v118 = *((_BYTE *)a2 + 96);
  v116 = *a3;
  v117 = a2[13];
  v10 = *(double *)(v4 + 120);
  v11 = *(double *)(v4 + 128);
  v12 = *(_DWORD *)(v4 + 228);
  Value = (uint64_t *)AGGraphGetValue();
  v14 = *Value;
  if (Value[1])
  {
    swift_retain_n();
    swift_retain_n();
    v15 = specialized PropertyList.Tracker.value<A>(_:for:)(v14);
    swift_release_n();
  }
  else
  {
    v16 = swift_retain_n();
    v15 = specialized closure #1 in PropertyList.subscript.getter(v16);
  }
  swift_release_n();
  v132 = ResolvedStyledText.layers(for:renderer:deviceScale:)(v5, v10, v11, v15);
  v133 = v17;
  v19 = v18;
  v20 = (*(double (**)(void))(*(_QWORD *)v6 + 176))();
  v22 = v21;
  swift_beginAccess();
  v23 = *(double *)(v6 + 144);
  v24 = -(v22 - *(double *)(v6 + 152));
  swift_beginAccess();
  v129 = v9;
  v130 = v8;
  if ((*(_BYTE *)(v6 + 43) & 1) == 0)
    v24 = v24 - *(double *)(v6 + 104);
  *(double *)&v142 = v24;
  v25 = (float *)MEMORY[0x24BE7EFA0];
  v141 = v20 - v23;
  if (v5)
    v26 = v7 | 0x200;
  else
    v26 = v7;
  v189 = v26;
  v139 = v6;
  v140 = v19;
  if (v133)
  {
    v27 = *(_DWORD *)(v143 + 96);
    v28 = *(unsigned __int16 *)(v143 + 100);
    v29 = *(_QWORD *)(v143 + 136);
    v30 = *(_DWORD *)(v143 + 144);
    v31 = *(_WORD *)(v143 + 216);
    v32 = *(_BYTE *)(v143 + 218);
    v33 = *(_DWORD *)(v143 + 220);
    v34 = *(_BYTE *)(v143 + 224);
    v35 = *(_QWORD *)(v143 + 232);
    v36 = *(_BYTE *)(v143 + 240);
    v37 = *(_DWORD *)(v143 + 244);
    v38 = *(_BYTE *)(v143 + 248);
    v39 = *(_OWORD *)(v143 + 16);
    v179 = *(_OWORD *)v143;
    v180 = v39;
    v40 = *(_OWORD *)(v143 + 48);
    v181 = *(_OWORD *)(v143 + 32);
    v182 = v40;
    v41 = *(_OWORD *)(v143 + 80);
    v183 = *(_OWORD *)(v143 + 64);
    v184 = v41;
    *(_DWORD *)v185 = v27;
    v42 = v28;
    *(_WORD *)&v185[4] = v28;
    *(_OWORD *)&v185[8] = *(_OWORD *)(v143 + 104);
    *(double *)&v185[24] = v10;
    *(double *)&v186 = v11;
    *((_QWORD *)&v186 + 1) = v29;
    *(_DWORD *)v187 = v30;
    *(_OWORD *)&v187[8] = *(_OWORD *)(v143 + 152);
    *(_OWORD *)&v187[24] = *(_OWORD *)(v143 + 168);
    *(_OWORD *)&v187[40] = *(_OWORD *)(v143 + 184);
    *(_OWORD *)&v187[56] = *(_OWORD *)(v143 + 200);
    v187[74] = v32;
    *(_WORD *)&v187[72] = v31;
    *(_DWORD *)&v187[76] = v33;
    v188[0] = v34;
    *(_DWORD *)&v188[4] = v12;
    *(_QWORD *)&v188[8] = v35;
    v188[16] = v36;
    *(_DWORD *)&v188[20] = v37;
    v188[24] = v38;
    swift_unknownObjectRetain();
    outlined retain of _ShapeStyle_RenderedShape((uint64_t)&v179);
    objc_msgSend(v133, sel_boundingRect);
    x = v190.origin.x;
    y = v190.origin.y;
    width = v190.size.width;
    height = v190.size.height;
    IsNull = CGRectIsNull(v190);
    v48 = 0.0;
    v49 = 0.0;
    v50 = 0.0;
    v51 = 0.0;
    if (!IsNull)
    {
      v48 = x;
      v49 = y;
      v50 = width;
      v51 = height;
    }
    v191 = CGRectIntegral(*(CGRect *)&v48);
    v52 = v191.origin.x;
    v53 = v191.origin.y;
    v54 = v191.size.width;
    v55 = v191.size.height;
    v56 = swift_allocObject();
    *(_QWORD *)(v56 + 16) = v133;
    *(double *)(v56 + 24) = v52;
    *(double *)(v56 + 32) = v53;
    *(_BYTE *)(v56 + 40) = 0;
    *(_BYTE *)(v56 + 48) = 1;
    *(_DWORD *)(v56 + 52) = v26 | 0xA0;
    *(_DWORD *)(v56 + 44) = 0;
    *(_BYTE *)(v56 + 56) = 3;
    swift_unknownObjectRetain();
    outlined release of _ShapeStyle_RenderedShape((uint64_t)&v179);
    v177 = 0;
    v176 = 0;
    v178 = 3;
    v174 = 0u;
    v175 = 0u;
    v172 = 0u;
    v173 = 0u;
    v170 = 0u;
    v171 = 0u;
    v169 = 0u;
    _ShapeStyle_RenderedLayers.beginLayer(id:style:shape:)((uint64_t)&v176, &v169, v143);
    v57 = *(_QWORD *)(v143 + 192);
    v58 = *(_QWORD *)(v143 + 200);
    outlined copy of DisplayList.Item.Value(v56 | 0xA000000000000000, v42);
    outlined consume of DisplayList.Item.Value(v57, v58);
    *(_QWORD *)(v143 + 192) = v56 | 0xA000000000000000;
    *(_QWORD *)(v143 + 200) = v42;
    *(_QWORD *)(v143 + 208) = 0;
    *(_BYTE *)(v143 + 218) = 0;
    *(_WORD *)(v143 + 216) = 0;
    v59 = v53 - v141 + *(double *)(v143 + 160);
    *(double *)(v143 + 152) = *(double *)&v142 + v52 + *(double *)(v143 + 152);
    *(double *)(v143 + 160) = v59;
    *(CGFloat *)(v143 + 168) = v54;
    *(CGFloat *)(v143 + 176) = v55;
    _ShapeStyle_RenderedLayers.endLayer(shape:)(v143);
    swift_unknownObjectRelease();
    swift_release();
    v19 = v140;
    v25 = (float *)MEMORY[0x24BE7EFA0];
  }
  v136 = v25[1];
  v137 = *v25;
  v60 = v25[3];
  v135 = v25[2];
  v138 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BE7EF10]), sel_init);
  v61 = *(_QWORD *)(v19 + 16);
  if (v61)
  {
    v134 = v26 | 0xE0;
    swift_bridgeObjectRetain();
    v62 = *MEMORY[0x24BE7EF80];
    v63 = (uint64_t *)(v19 + 16 * v61 + 24);
    while (1)
    {
      v64 = *(v63 - 1);
      if (v64 < 0)
        break;
      v65 = *(_QWORD *)(v6 + 240);
      if ((unint64_t)v64 >= *(_QWORD *)(v65 + 16))
        goto LABEL_33;
      v153 = *(v63 - 1);
      v66 = v65 + 112 * v64;
      v67 = *(_QWORD *)(v66 + 40);
      v164 = *v63;
      v165 = *(void **)(v66 + 32);
      v68 = *(void **)(v66 + 48);
      v69 = *(void **)(v66 + 56);
      v70 = *(_QWORD *)(v66 + 64);
      v71 = *(_QWORD *)(v66 + 72);
      v161 = (unint64_t)v68;
      v166 = v71;
      v167 = v67;
      v72 = *(_QWORD *)(v66 + 80);
      v168 = *(_QWORD *)(v66 + 88);
      v73 = *(_QWORD *)(v66 + 96);
      v74 = *(_QWORD *)(v66 + 104);
      *(_QWORD *)&v162 = v73;
      *((_QWORD *)&v162 + 1) = v74;
      v75 = *(_BYTE *)(v66 + 112);
      v163 = v75;
      v76 = *(_DWORD *)(v66 + 116);
      v159 = *(_QWORD *)(v66 + 120);
      v157 = *(_QWORD *)(v66 + 136);
      v158 = *(unsigned __int8 *)(v66 + 128);
      v77 = (float)v64 * 0.00097656;
      v144 = v63;
      swift_unknownObjectRetain();
      v160 = v72;
      outlined copy of _ShapeStyle_Pack.Fill(v165, v67, v68, v69, v70, v71, v72, v168, v73, v74, v75);
      outlined copy of GraphicsBlendMode?(v159, v158);
      swift_bridgeObjectRetain();
      v155 = v61;
      objc_msgSend(v138, sel_removeAll);
      LODWORD(v78) = -1.0;
      LODWORD(v79) = -1.0;
      *(float *)&v80 = v77;
      LODWORD(v81) = v62;
      *(float *)&v83 = v136;
      *(float *)&v82 = v137;
      *(float *)&v84 = v135;
      *(float *)&v85 = v60;
      objc_msgSend(v138, sel_addColorReplacementFrom_to_colorSpace_, 2, v78, v79, v80, v81, v82, v83, v84, v85);
      v86 = *(_OWORD *)(v143 + 208);
      *(_OWORD *)&v187[48] = *(_OWORD *)(v143 + 192);
      *(_OWORD *)&v187[64] = v86;
      *(_OWORD *)v188 = *(_OWORD *)(v143 + 224);
      *(_OWORD *)&v188[9] = *(_OWORD *)(v143 + 233);
      v87 = *(_OWORD *)(v143 + 144);
      v186 = *(_OWORD *)(v143 + 128);
      *(_OWORD *)v187 = v87;
      v88 = *(_OWORD *)(v143 + 176);
      *(_OWORD *)&v187[16] = *(_OWORD *)(v143 + 160);
      *(_OWORD *)&v187[32] = v88;
      v89 = *(_OWORD *)(v143 + 80);
      v183 = *(_OWORD *)(v143 + 64);
      v184 = v89;
      v90 = *(_OWORD *)(v143 + 112);
      *(_OWORD *)v185 = *(_OWORD *)(v143 + 96);
      *(_OWORD *)&v185[16] = v90;
      v91 = *(_OWORD *)(v143 + 16);
      v179 = *(_OWORD *)v143;
      v180 = v91;
      v92 = *(_OWORD *)(v143 + 48);
      v181 = *(_OWORD *)(v143 + 32);
      v182 = v92;
      outlined retain of _ShapeStyle_RenderedShape((uint64_t)&v179);
      v93 = objc_msgSend(v138, sel_copyApplyingToDisplayList_, v164);
      objc_msgSend(v93, sel_boundingRect);
      v94 = v192.origin.x;
      v95 = v192.origin.y;
      v96 = v192.size.width;
      v97 = v192.size.height;
      v98 = CGRectIsNull(v192);
      if (v98)
        v99 = 0.0;
      else
        v99 = v94;
      if (v98)
        v100 = 0.0;
      else
        v100 = v95;
      if (v98)
        v101 = 0.0;
      else
        v101 = v96;
      if (v98)
        v102 = 0.0;
      else
        v102 = v97;
      v152 = *(unsigned __int16 *)&v185[4];
      v151 = *(_QWORD *)&v187[40];
      v193 = CGRectIntegral(*(CGRect *)&v99);
      v103 = v193.origin.x;
      v104 = v193.origin.y;
      v105 = v193.size.width;
      v106 = v193.size.height;
      v107 = swift_allocObject();
      *(_QWORD *)(v107 + 16) = v93;
      *(double *)(v107 + 24) = v103;
      *(double *)(v107 + 32) = v104;
      *(_BYTE *)(v107 + 40) = 0;
      *(_DWORD *)(v107 + 44) = 0;
      *(_BYTE *)(v107 + 48) = 1;
      *(_DWORD *)(v107 + 52) = v134;
      *(_BYTE *)(v107 + 56) = 3;
      outlined release of _ShapeStyle_RenderedShape((uint64_t)&v179);
      v176 = v153;
      v177 = 0;
      v178 = 1;
      *(_QWORD *)&v169 = v165;
      *((_QWORD *)&v169 + 1) = v67;
      *(_QWORD *)&v170 = v161;
      *((_QWORD *)&v170 + 1) = v69;
      *(_QWORD *)&v171 = v70;
      *((_QWORD *)&v171 + 1) = v71;
      *(_QWORD *)&v172 = v72;
      *((_QWORD *)&v172 + 1) = v168;
      v173 = v162;
      *(_QWORD *)&v174 = v75 | ((unint64_t)v76 << 32);
      *((_QWORD *)&v174 + 1) = v159;
      *(_QWORD *)&v175 = v158;
      *((_QWORD *)&v175 + 1) = v157;
      _ShapeStyle_RenderedLayers.beginLayer(id:style:shape:)((uint64_t)&v176, &v169, v143);
      v108 = *(_QWORD *)(v143 + 8);
      v154 = *(_QWORD *)v143;
      v109 = *(_QWORD *)(v143 + 16);
      v149 = *(_QWORD *)(v143 + 32);
      v150 = *(_QWORD *)(v143 + 24);
      v147 = *(_QWORD *)(v143 + 48);
      v148 = *(_QWORD *)(v143 + 40);
      v146 = *(_QWORD *)(v143 + 56);
      v145 = *(_OWORD *)(v143 + 64);
      v110 = *(_QWORD *)(v143 + 80);
      v111 = *(_QWORD *)(v143 + 88);
      v112 = *(_DWORD *)(v143 + 96);
      *(double *)v143 = *(double *)&v142 + v103;
      *(double *)(v143 + 8) = v104 - v141;
      *(CGFloat *)(v143 + 16) = v105;
      *(CGFloat *)(v143 + 24) = v106;
      *(_QWORD *)(v143 + 32) = v151;
      *(_QWORD *)(v143 + 40) = v107 | 0xA000000000000000;
      *(_QWORD *)(v143 + 48) = v152;
      *(_OWORD *)(v143 + 56) = 0u;
      *(_OWORD *)(v143 + 72) = 0u;
      *(_QWORD *)(v143 + 88) = 0;
      *(_DWORD *)(v143 + 96) = 6291456;
      outlined copy of DisplayList.Item.Value(v107 | 0xA000000000000000, v152);
      outlined consume of _ShapeStyle_RenderedShape.Shape(v154, v108, v109, v150, v149, v148, v147, v146, v145, *((uint64_t *)&v145 + 1), v110, v111, v112);
      *(_QWORD *)&v169 = v165;
      *((_QWORD *)&v169 + 1) = v167;
      *(_QWORD *)&v170 = v161;
      *((_QWORD *)&v170 + 1) = v69;
      *(_QWORD *)&v171 = v70;
      *((_QWORD *)&v171 + 1) = v166;
      *(_QWORD *)&v172 = v160;
      *((_QWORD *)&v172 + 1) = v168;
      v173 = v162;
      LOBYTE(v174) = v163;
      DWORD1(v174) = v76;
      *((_QWORD *)&v174 + 1) = v159;
      LOBYTE(v175) = v158;
      *((_QWORD *)&v175 + 1) = v157;
      _ShapeStyle_RenderedShape.render(style:)((uint64_t)&v169);
      _ShapeStyle_RenderedLayers.endLayer(shape:)(v143);
      swift_unknownObjectRelease();
      swift_release();
      outlined consume of _ShapeStyle_Pack.Fill((unint64_t)v165, v167, v161, v69, v70, v166, v160, v168, v162, v74, v163);
      outlined consume of GraphicsBlendMode?(v159, v158);
      swift_bridgeObjectRelease();
      if (v155 == 1)
        goto LABEL_34;
      v61 = v155 - 1;
      v6 = v139;
      v63 = v144 - 2;
      if (v155 - 1 > *(_QWORD *)(v140 + 16))
      {
        __break(1u);
        break;
      }
    }
    __break(1u);
LABEL_33:
    __break(1u);
LABEL_34:
    swift_bridgeObjectRelease();
  }
  if (v132)
  {
    v169 = v116;
    LOBYTE(v170) = 0;
    *(_QWORD *)&v179 = v130;
    *((_QWORD *)&v179 + 1) = v129;
    *(_QWORD *)&v180 = v128;
    *((_QWORD *)&v180 + 1) = v127;
    *(_QWORD *)&v181 = v126;
    *((_QWORD *)&v181 + 1) = v125;
    *(_QWORD *)&v182 = v124;
    *((_QWORD *)&v182 + 1) = v123;
    *(_QWORD *)&v183 = v122;
    *((_QWORD *)&v183 + 1) = v121;
    LOBYTE(v184) = v120;
    DWORD1(v184) = v131;
    *((_QWORD *)&v184 + 1) = v119;
    v185[0] = v118;
    *(_QWORD *)&v185[8] = v117;
    v113 = one-time initialization token for foregroundKeyColorAnyAlpha;
    swift_unknownObjectRetain();
    if (v113 != -1)
      swift_once();
    specialized drawStyled #1 (list:id:style:keyColor:) in _ShapeStyle_RenderedShape.renderKeyedText(_:style:name:layers:)((uint64_t)v132, (uint64_t *)&v169, (uint64_t *)&v179, v138, v143, &v189, a4, v114, *(float *)&static RBColor.foregroundKeyColorAnyAlpha, *((float *)&static RBColor.foregroundKeyColorAnyAlpha + 1), *(float *)&dword_254287BD0, *(float *)&dword_254287BD4, v137, v136, v135, v60, v142, COERCE__INT64(-v141));
    swift_bridgeObjectRelease();

    swift_unknownObjectRelease_n();
  }
  else
  {
    swift_bridgeObjectRelease();

  }
  return swift_unknownObjectRelease();
}

uint64_t _ShapeStyle_RenderedLayers.beginLayer(id:style:shape:)(uint64_t result, __int128 *a2, uint64_t a3)
{
  _QWORD *v3;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  unint64_t v16;
  int v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  char v25;
  __int128 v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  char v55;
  __int128 v56[8];
  __int128 v57[8];
  _OWORD v58[8];

  if (*v3)
  {
    v26 = *(_OWORD *)result;
    v25 = *(_BYTE *)(result + 16);
    v23 = a2[1];
    v24 = *a2;
    v21 = a2[3];
    v22 = a2[2];
    v19 = a2[5];
    v20 = a2[4];
    v18 = a2[6];
    swift_retain();
    while (1)
    {
      v55 = v25;
      v47 = v24;
      v48 = v23;
      v49 = v22;
      v50 = v21;
      v51 = v20;
      v52 = v19;
      v53 = v18;
      v54 = v26;
      _ShapeStyle_InterpolatorGroup.addLayer(id:style:)((uint64_t)&v54, (uint64_t)&v47, v56);
      outlined init with take of _ShapeStyle_InterpolatorGroup.AddLayerResult(v56, v57);
      outlined init with take of _ShapeStyle_InterpolatorGroup.AddLayerResult(v57, v58);
      v5 = _s7SwiftUI29_ShapeStyle_InterpolatorGroupC14AddLayerResult33_3890C65F12EA82A4BC5FBD33046B67FALLOWOg((uint64_t)v58);
      v6 = _s7SwiftUI29_ShapeStyle_InterpolatorGroupC14AddLayerResult33_3890C65F12EA82A4BC5FBD33046B67FALLOWOj0_((uint64_t)v58);
      if (v5 != 1)
        break;
      v45 = *(_QWORD *)(v6 + 8);
      v46 = *(_QWORD *)v6;
      v43 = *(void **)(v6 + 24);
      v44 = *(_QWORD *)(v6 + 16);
      v7 = *(_QWORD *)(v6 + 40);
      v41 = *(_QWORD *)(v6 + 48);
      v42 = *(_QWORD *)(v6 + 32);
      v8 = *(_QWORD *)(v6 + 64);
      v9 = *(_QWORD *)(v6 + 72);
      v10 = *(_QWORD *)(v6 + 80);
      v11 = *(_QWORD *)(v6 + 88);
      v12 = *(_QWORD *)(v6 + 96);
      v14 = *(_QWORD *)(v6 + 104);
      v13 = *(_QWORD *)(v6 + 112);
      v15 = *(_DWORD *)(v6 + 120);
      v39 = *(_QWORD *)a3;
      v40 = *(_QWORD *)(v6 + 56);
      v37 = *(_QWORD *)(a3 + 16);
      v38 = *(_QWORD *)(a3 + 8);
      v35 = *(_QWORD *)(a3 + 32);
      v36 = *(_QWORD *)(a3 + 24);
      v33 = *(_QWORD *)(a3 + 48);
      v34 = *(_QWORD *)(a3 + 40);
      v31 = *(_QWORD *)(a3 + 64);
      v32 = *(_QWORD *)(a3 + 56);
      v29 = *(_QWORD *)(a3 + 80);
      v30 = *(_QWORD *)(a3 + 72);
      v28 = *(_QWORD *)(a3 + 88);
      v27 = *(_DWORD *)(a3 + 96);
      *(_OWORD *)(a3 + 64) = 0u;
      *(_OWORD *)(a3 + 80) = 0u;
      *(_OWORD *)(a3 + 32) = 0u;
      *(_OWORD *)(a3 + 48) = 0u;
      *(_OWORD *)a3 = 0u;
      *(_OWORD *)(a3 + 16) = 0u;
      *(_DWORD *)(a3 + 96) = 0x800000;
      *(_DWORD *)(a3 + 144) = v15;
      *(_QWORD *)(a3 + 136) = v13;
      swift_retain_n();
      swift_release();
      if (v14)
      {
        *(_QWORD *)&v47 = v46;
        *((_QWORD *)&v47 + 1) = v45;
        *(_QWORD *)&v48 = v44;
        *((_QWORD *)&v48 + 1) = v43;
        *(_QWORD *)&v49 = v42;
        *((_QWORD *)&v49 + 1) = v7;
        *(_QWORD *)&v50 = v41;
        *((_QWORD *)&v50 + 1) = v40;
        *(_QWORD *)&v51 = v8;
        *((_QWORD *)&v51 + 1) = v9;
        LOBYTE(v52) = v10;
        DWORD1(v52) = HIDWORD(v10);
        *((_QWORD *)&v52 + 1) = v11;
        LOBYTE(v53) = v12;
        *((_QWORD *)&v53 + 1) = v14;
        _ShapeStyle_RenderedShape.render(style:)((uint64_t)&v47);
      }
      _ShapeStyle_RenderedLayers.endLayer(shape:)(a3);
      outlined consume of _ShapeStyle_RenderedShape.Shape(*(_QWORD *)a3, *(_QWORD *)(a3 + 8), *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24), *(_QWORD *)(a3 + 32), *(_QWORD *)(a3 + 40), *(_QWORD *)(a3 + 48), *(_QWORD *)(a3 + 56), *(_QWORD *)(a3 + 64), *(_QWORD *)(a3 + 72), *(_QWORD *)(a3 + 80), *(_QWORD *)(a3 + 88), *(_DWORD *)(a3 + 96));
      swift_release_n();
      outlined consume of _ShapeStyle_Pack.Style?(v46, v45, v44, v43, v42, v7, v41, v40, v8, v9, v10, v11, v12, v14);
      *(_QWORD *)a3 = v39;
      *(_QWORD *)(a3 + 8) = v38;
      *(_QWORD *)(a3 + 16) = v37;
      *(_QWORD *)(a3 + 24) = v36;
      *(_QWORD *)(a3 + 32) = v35;
      *(_QWORD *)(a3 + 40) = v34;
      *(_QWORD *)(a3 + 48) = v33;
      *(_QWORD *)(a3 + 56) = v32;
      *(_QWORD *)(a3 + 64) = v31;
      *(_QWORD *)(a3 + 72) = v30;
      *(_QWORD *)(a3 + 80) = v29;
      *(_QWORD *)(a3 + 88) = v28;
      *(_DWORD *)(a3 + 96) = v27;
    }
    v16 = *(_QWORD *)v6;
    v17 = *(_DWORD *)(v6 + 8);
    swift_release();
    result = swift_release();
    *(_QWORD *)(a3 + 136) = v16;
    *(_DWORD *)(a3 + 144) = v17;
  }
  return result;
}

void _ShapeStyle_RenderedShape.render(style:)(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  float v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  void *v25;

  v2 = *(void **)a1;
  v1 = *(_QWORD *)(a1 + 8);
  v4 = *(void **)(a1 + 16);
  v3 = *(void **)(a1 + 24);
  v6 = *(_QWORD *)(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  v7 = *(_QWORD *)(a1 + 48);
  v8 = *(_QWORD *)(a1 + 56);
  v9 = *(_QWORD *)(a1 + 64);
  v10 = *(unsigned __int8 *)(a1 + 80);
  v11 = *(float *)(a1 + 84);
  v12 = *(_QWORD *)(a1 + 88);
  v13 = *(unsigned __int8 *)(a1 + 96);
  v22 = v1;
  v21 = v5;
  v17 = v7;
  v18 = v8;
  v23 = *(_QWORD *)(a1 + 72);
  v19 = v3;
  v25 = *(void **)a1;
  if (v13 == 255)
  {
    outlined copy of _ShapeStyle_Pack.Fill(v2, v1, v4, v3, v6, v5, v7, v8, v9, *(_QWORD *)(a1 + 72), v10);
    outlined copy of GraphicsBlendMode?(v12, 0xFFu);
    v15 = one-time initialization token for normal;
    swift_bridgeObjectRetain();
    if (v15 != -1)
      swift_once();
    v20 = static GraphicsBlendMode.normal;
    v24 = byte_254266040;
    outlined copy of GraphicsBlendMode(static GraphicsBlendMode.normal, byte_254266040);
    v14 = v18;
    v3 = v19;
    LOBYTE(v13) = -1;
    v2 = v25;
  }
  else
  {
    v24 = v13 & 1;
    v14 = *(_QWORD *)(a1 + 56);
    outlined copy of _ShapeStyle_Pack.Fill(v2, v1, v4, v3, v6, v5, v7, v8, v9, *(_QWORD *)(a1 + 72), v10);
    outlined copy of GraphicsBlendMode?(v12, v13);
    swift_bridgeObjectRetain();
    v20 = v12;
  }
  outlined copy of GraphicsBlendMode?(v12, v13);
  outlined consume of _ShapeStyle_Pack.Fill((unint64_t)v2, v22, (unint64_t)v4, v3, v6, v21, v17, v14, v9, v23, v10);
  outlined consume of GraphicsBlendMode?(v12, v13);
  swift_bridgeObjectRelease();
  outlined consume of GraphicsBlendMode(*(_QWORD *)(v16 + 232), *(_BYTE *)(v16 + 240));
  *(_QWORD *)(v16 + 232) = v20;
  *(_BYTE *)(v16 + 240) = v24;
  *(float *)(v16 + 244) = v11 * *(float *)(v16 + 244);
  __asm { BR              X9 }
}

uint64_t _ShapeStyle_RenderedLayers.endLayer(shape:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v5;
  _OWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  double v12;
  double v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  __int128 v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  double *v21;
  unint64_t v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned __int16 v32;
  unsigned __int8 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  unsigned __int16 v49;
  unsigned __int8 v50;
  unsigned int v51;

  v2 = v1;
  result = _ShapeStyle_RenderedShape.commitItem()((uint64_t)&v45);
  v6 = (_OWORD *)(v2 + 16);
  v5 = *(uint64_t *)(v2 + 16);
  v7 = *(uint64_t *)(v2 + 8);
  v8 = *(_QWORD *)(v2 + 48);
  v10 = *(_QWORD *)(v2 + 56);
  v9 = *(_QWORD *)(v2 + 64);
  v11 = *(_QWORD *)(v2 + 72);
  if (v11 >> 30)
  {
    if (v11 >> 30 == 1)
    {
      v12 = *(double *)(a1 + 104);
      v13 = *(double *)(a1 + 112);
      v14 = v45;
      v15 = v46;
      v16 = *((_QWORD *)&v47 + 1);
      v38 = v47;
      v39 = *(_QWORD *)(v2 + 16);
      v37 = v49 | (v50 << 16);
      v17 = v48;
      v40 = *(_QWORD *)(v2 + 24);
      v41 = *(_QWORD *)(v2 + 32);
      v42 = *(_QWORD *)(v2 + 40);
      v43 = *(_QWORD *)(v2 + 48);
      v44 = *(_QWORD *)(v2 + 64);
      outlined copy of _ShapeStyle_RenderedLayers.Layers(v7, v5, v40, v41, v42, v8, v10, v9, v11);
      outlined copy of DisplayList.Item.Value(v16, v17);
      v18 = (_QWORD *)v7;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v18 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v7 + 16) + 1, 1, (_QWORD *)v7);
      v20 = v18[2];
      v19 = v18[3];
      if (v20 >= v19 >> 1)
        v18 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v19 > 1), v20 + 1, 1, v18);
      v18[2] = v20 + 1;
      v21 = (double *)&v18[9 * v20];
      v21[4] = *(double *)&v14 - v12;
      v21[5] = *((double *)&v14 + 1) - v13;
      *((_OWORD *)v21 + 3) = v15;
      *((_QWORD *)v21 + 8) = v38;
      *((_QWORD *)v21 + 9) = v16;
      *((_OWORD *)v21 + 5) = v17;
      *((_BYTE *)v21 + 98) = BYTE2(v37);
      *((_WORD *)v21 + 48) = v37;
      *((_DWORD *)v21 + 25) = 0;
      outlined consume of DisplayList.Item.Value(v16, v17);
      result = outlined consume of _ShapeStyle_RenderedLayers.Layers(v7, v39, v40, v41, v42, v43, v10, v44, v11);
      *(_QWORD *)(v2 + 8) = v18;
      *v6 = 0u;
      *(_OWORD *)(v2 + 32) = 0u;
      *(_OWORD *)(v2 + 48) = 0u;
      *(_QWORD *)(v2 + 64) = 0;
      v22 = 0x40000000;
    }
    else
    {
      v22 = v49 | ((unint64_t)v50 << 16) | ((unint64_t)v51 << 32);
      v35 = v46;
      *(_OWORD *)(v2 + 8) = v45;
      *(_OWORD *)(v2 + 24) = v35;
      v36 = v48;
      *(_OWORD *)(v2 + 40) = v47;
      *(_OWORD *)(v2 + 56) = v36;
    }
  }
  else
  {
    v23 = *(double *)(a1 + 104);
    v24 = *(double *)(a1 + 112);
    v25 = *(double *)&v7 - v23;
    v26 = *(double *)&v5 - v24;
    v27 = *(double *)&v45 - v23;
    v28 = *((double *)&v45 + 1) - v24;
    v29 = *(_QWORD *)(v2 + 24);
    v30 = *(_QWORD *)(v2 + 32);
    v31 = *(_QWORD *)(v2 + 40);
    type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<DisplayList.Item>, (uint64_t)&type metadata for DisplayList.Item, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
    result = swift_allocObject();
    *(_OWORD *)(result + 16) = xmmword_2352828C0;
    *(double *)(result + 32) = v25;
    *(double *)(result + 40) = v26;
    *(_QWORD *)(result + 48) = v29;
    *(_QWORD *)(result + 56) = v30;
    *(_QWORD *)(result + 64) = v31;
    *(_QWORD *)(result + 72) = v8;
    *(_QWORD *)(result + 80) = v10;
    *(_QWORD *)(result + 88) = v9;
    *(_BYTE *)(result + 98) = BYTE2(v11);
    *(_WORD *)(result + 96) = v11;
    *(_DWORD *)(result + 100) = 0;
    v32 = v49;
    v33 = v50;
    *(double *)(result + 104) = v27;
    *(double *)(result + 112) = v28;
    v34 = v47;
    *(_OWORD *)(result + 120) = v46;
    *(_OWORD *)(result + 136) = v34;
    *(_OWORD *)(result + 152) = v48;
    *(_BYTE *)(result + 170) = v33;
    *(_WORD *)(result + 168) = v32;
    *(_DWORD *)(result + 172) = 0;
    *(_QWORD *)(v2 + 8) = result;
    *v6 = 0u;
    *(_OWORD *)(v2 + 32) = 0u;
    *(_OWORD *)(v2 + 48) = 0u;
    v22 = 0x40000000;
    *(_QWORD *)(v2 + 64) = 0;
  }
  *(_QWORD *)(v2 + 72) = v22;
  return result;
}

uint64_t _ShapeStyle_RenderedShape.commitItem()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  float v4;
  CGFloat v5;
  CGFloat v6;
  CGFloat v7;
  CGFloat v8;
  _WORD *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  unint64_t v13;
  int v14;
  uint64_t v15;
  int v16;
  __int128 v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  char v21;
  uint64_t result;
  int v23;
  char v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  char v31;
  __int16 v32;
  int v33;
  __int128 v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  int v38;
  char v39;
  CGRect v40;

  v2 = v1;
  v4 = *(float *)(v1 + 244);
  if (v4 == 0.0)
    goto LABEL_3;
  v5 = *(double *)(v1 + 104);
  v6 = *(double *)(v1 + 112);
  v7 = *(double *)(v1 + 120);
  v8 = *(double *)(v1 + 128);
  v40.origin.x = v5;
  v40.origin.y = v6;
  v40.size.width = v7;
  v40.size.height = v8;
  if (CGRectIsEmpty(v40))
  {
LABEL_3:
    v9 = (_WORD *)(v1 + 216);
    outlined consume of DisplayList.Item.Value(*(_QWORD *)(v2 + 192), *(_QWORD *)(v2 + 200));
    *(_OWORD *)(v2 + 192) = xmmword_23527E880;
    *(_QWORD *)(v2 + 208) = 0;
    *(_BYTE *)(v2 + 218) = 0;
    *v9 = 0;
    v10 = *(_QWORD *)(v2 + 136);
    if (v10)
    {
      v11 = *(_DWORD *)(v2 + 144);
      v37 = *((_QWORD *)v9 - 10);
      v38 = v11;
      v39 = 17;
      _ShapeStyle_RenderedShape.addEffect(_:)((uint64_t)&v37);
      swift_release();
      *(_QWORD *)(v2 + 136) = 0;
      *(_DWORD *)(v2 + 144) = 0;
      v12 = *(_QWORD *)(v2 + 192);
      v13 = *(_QWORD *)(v2 + 200);
      v10 = *(_QWORD *)(v2 + 208);
      v14 = *(unsigned __int16 *)(v2 + 216) | (*(unsigned __int8 *)(v2 + 218) << 16);
    }
    else
    {
      v14 = 0;
      v12 = 0;
      v13 = 0xC000000000000000;
    }
    v15 = *(_QWORD *)(v2 + 184);
    v16 = *(_DWORD *)(v2 + 220);
    v17 = *(_OWORD *)(v2 + 168);
    *(_OWORD *)a1 = *(_OWORD *)(v2 + 152);
    *(_OWORD *)(a1 + 16) = v17;
    *(_QWORD *)(a1 + 32) = v15;
    *(_QWORD *)(a1 + 40) = v12;
    *(_QWORD *)(a1 + 48) = v13;
    *(_QWORD *)(a1 + 56) = v10;
    *(_WORD *)(a1 + 64) = v14;
    *(_BYTE *)(a1 + 66) = BYTE2(v14);
    *(_DWORD *)(a1 + 68) = v16;
    outlined copy of DisplayList.Item.Value(v12, v13);
    if (one-time initialization token for normal != -1)
      swift_once();
    v18 = static GraphicsBlendMode.normal;
    v19 = byte_254266040;
    v20 = *(_QWORD *)(v2 + 232);
    v21 = *(_BYTE *)(v2 + 240);
    *(_QWORD *)(v2 + 232) = static GraphicsBlendMode.normal;
    *(_BYTE *)(v2 + 240) = v19;
    outlined copy of GraphicsBlendMode(v18, v19);
    outlined consume of GraphicsBlendMode(v20, v21);
    result = outlined consume of DisplayList.Item.Value(v12, v13);
    *(_DWORD *)(v2 + 244) = 1065353216;
    *(_BYTE *)(v2 + 248) = 0;
    *(_OWORD *)(v2 + 192) = xmmword_23527E880;
    *(_QWORD *)(v2 + 208) = 0;
    *(_BYTE *)(v2 + 218) = 0;
    *(_WORD *)(v2 + 216) = 0;
    *(_OWORD *)(v2 + 152) = *(_OWORD *)(v2 + 104);
    *(_OWORD *)(v2 + 168) = *(_OWORD *)(v2 + 120);
  }
  else
  {
    LOBYTE(v37) = *(_BYTE *)(v1 + 224);
    DisplayList.Item.canonicalize(options:)((char *)&v37);
    if (*(_QWORD *)(v1 + 136))
    {
      v23 = *(_DWORD *)(v1 + 144);
      v37 = *(_QWORD *)(v1 + 136);
      v38 = v23;
      v39 = 17;
      _ShapeStyle_RenderedShape.addEffect(_:)((uint64_t)&v37);
      swift_release();
      *(_QWORD *)(v1 + 136) = 0;
      *(_DWORD *)(v1 + 144) = 0;
    }
    v24 = *(_BYTE *)(v1 + 248);
    if ((v24 & 1) != 0)
    {
      LOWORD(v37) = *(_WORD *)(v1 + 100);
      DisplayList.Item.addDrawingGroup(contentSeed:)((unsigned __int16 *)&v37);
      *(_BYTE *)(v1 + 248) = v24 & 0xFE;
    }
    v25 = *(_QWORD *)(v1 + 232);
    v26 = *(unsigned __int8 *)(v1 + 240);
    if ((v26 & 1) != 0 || *(_QWORD *)(v1 + 232))
    {
      v37 = *(_QWORD *)(v1 + 232);
      v38 = v26;
      v39 = 5;
      _ShapeStyle_RenderedShape.addEffect(_:)((uint64_t)&v37);
    }
    if (v4 != 1.0)
    {
      v37 = LODWORD(v4);
      v38 = 0;
      v39 = 4;
      _ShapeStyle_RenderedShape.addEffect(_:)((uint64_t)&v37);
    }
    v27 = *(_QWORD *)(v1 + 184);
    v28 = *(_QWORD *)(v1 + 192);
    v29 = *(_QWORD *)(v2 + 200);
    v30 = *(_QWORD *)(v2 + 208);
    v31 = *(_BYTE *)(v2 + 218);
    v32 = *(_WORD *)(v2 + 216);
    v33 = *(_DWORD *)(v2 + 220);
    v34 = *(_OWORD *)(v2 + 168);
    *(_OWORD *)a1 = *(_OWORD *)(v2 + 152);
    *(_OWORD *)(a1 + 16) = v34;
    *(_QWORD *)(a1 + 32) = v27;
    *(_QWORD *)(a1 + 40) = v28;
    *(_QWORD *)(a1 + 48) = v29;
    *(_QWORD *)(a1 + 56) = v30;
    *(_BYTE *)(a1 + 66) = v31;
    *(_WORD *)(a1 + 64) = v32;
    *(_DWORD *)(a1 + 68) = v33;
    outlined copy of DisplayList.Item.Value(v28, v29);
    if (one-time initialization token for normal != -1)
      swift_once();
    v35 = static GraphicsBlendMode.normal;
    v36 = byte_254266040;
    *(_QWORD *)(v2 + 232) = static GraphicsBlendMode.normal;
    *(_BYTE *)(v2 + 240) = v36;
    outlined copy of GraphicsBlendMode(v35, v36);
    outlined consume of GraphicsBlendMode(v25, v26);
    result = outlined consume of DisplayList.Item.Value(v28, v29);
    *(_DWORD *)(v2 + 244) = 1065353216;
    *(_BYTE *)(v2 + 248) = 0;
    *(_OWORD *)(v2 + 192) = xmmword_23527E880;
    *(_QWORD *)(v2 + 208) = 0;
    *(_BYTE *)(v2 + 218) = 0;
    *(_WORD *)(v2 + 216) = 0;
    *(CGFloat *)(v2 + 152) = v5;
    *(CGFloat *)(v2 + 160) = v6;
    *(CGFloat *)(v2 + 168) = v7;
    *(CGFloat *)(v2 + 176) = v8;
  }
  return result;
}

uint64_t _ShapeStyle_RenderedShape.addEffect(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  int v8;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int16 v16;
  char v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD v22[8];
  __int16 v23;
  char v24;
  int v25;
  __int16 v26;

  v2 = v1;
  v3 = *(_QWORD *)a1;
  v4 = *(_DWORD *)(a1 + 8);
  v20 = *(_QWORD *)a1;
  v21 = *(unsigned __int8 *)(a1 + 12);
  v5 = *(_QWORD *)(v2 + 192);
  v6 = *(_QWORD *)(v2 + 200);
  v7 = *(_QWORD *)(v2 + 208);
  v8 = *(unsigned __int16 *)(v2 + 216) | (*(unsigned __int8 *)(v2 + 218) << 16);
  v11 = v6 >> 62 == 3 && (v8 & 0xFFFFFF) == 0 && v6 == 0xC000000000000000 && (v7 | v5) == 0;
  v19 = *(unsigned int *)(a1 + 8);
  if (v11)
  {
    outlined copy of DisplayList.Item.Value(0, 0xC000000000000000);
    outlined copy of DisplayList.Effect(v3, v4, v21);
    v17 = 0;
    v16 = 0;
    v15 = MEMORY[0x24BEE4AF8];
  }
  else
  {
    v12 = *(_QWORD *)(v2 + 168);
    v13 = *(_QWORD *)(v2 + 176);
    v14 = *(_QWORD *)(v2 + 184);
    type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<DisplayList.Item>, (uint64_t)&type metadata for DisplayList.Item, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
    v15 = swift_allocObject();
    *(_OWORD *)(v15 + 16) = xmmword_23527E860;
    *(_QWORD *)(v15 + 32) = 0;
    *(_QWORD *)(v15 + 40) = 0;
    *(_QWORD *)(v15 + 48) = v12;
    *(_QWORD *)(v15 + 56) = v13;
    *(_QWORD *)(v15 + 64) = v14;
    *(_QWORD *)(v15 + 72) = v5;
    *(_QWORD *)(v15 + 80) = v6;
    *(_QWORD *)(v15 + 88) = v7;
    *(_BYTE *)(v15 + 98) = BYTE2(v8);
    *(_WORD *)(v15 + 96) = v8;
    *(_DWORD *)(v15 + 100) = 0;
    outlined copy of DisplayList.Item.Value(v5, v6);
    outlined copy of DisplayList.Effect(v3, v4, v21);
    DisplayList.Item.features.getter();
    v16 = v26;
    v22[0] = 0;
    v22[1] = 0;
    v22[2] = v12;
    v22[3] = v13;
    v22[4] = v14;
    v22[5] = v5;
    v22[6] = v6;
    v22[7] = v7;
    v24 = BYTE2(v8);
    v23 = v8;
    v25 = 0;
    DisplayList.Item.properties.getter();
    v17 = v26;
  }
  *(_QWORD *)(v2 + 192) = v20;
  *(_QWORD *)(v2 + 200) = v19 | (v21 << 32) | 0x4000000000000000;
  *(_QWORD *)(v2 + 208) = v15;
  *(_BYTE *)(v2 + 218) = v17;
  *(_WORD *)(v2 + 216) = v16;
  LOBYTE(v22[0]) = *(_BYTE *)(v2 + 224);
  DisplayList.Item.canonicalize(options:)((char *)v22);
  return outlined consume of DisplayList.Item.Value(v5, v6);
}

uint64_t _ShapeStyle_RenderedShape.background(_:)(_OWORD *a1)
{
  uint64_t v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  char v17;
  int v18;
  __int128 v19;
  __int128 v20;
  __int16 v21;
  char v22;
  int v23;
  uint64_t v24;
  unint64_t v25;
  char v26;
  __int128 v28;
  __int128 v29;
  _OWORD v30[4];
  __int16 v31;
  char v32;
  int v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  int v40;
  __int16 v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;
  int v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int16 v50;
  char v51;
  int v52;
  char v53;
  int v54;
  uint64_t v55;
  char v56;
  int v57;
  char v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  _BYTE v65[48];
  _BYTE v66[80];
  _BYTE v67[25];
  _OWORD v68[2];
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  _BYTE v81[25];

  v2 = a1[13];
  v3 = a1[11];
  v79 = a1[12];
  v80 = v2;
  v4 = a1[13];
  *(_OWORD *)v81 = a1[14];
  *(_OWORD *)&v81[9] = *(_OWORD *)((char *)a1 + 233);
  v5 = a1[9];
  v6 = a1[7];
  v75 = a1[8];
  v76 = v5;
  v7 = a1[9];
  v8 = a1[11];
  v77 = a1[10];
  v78 = v8;
  v9 = a1[5];
  v10 = a1[3];
  v71 = a1[4];
  v72 = v9;
  v11 = a1[5];
  v12 = a1[7];
  v73 = a1[6];
  v74 = v12;
  v13 = a1[1];
  v68[0] = *a1;
  v68[1] = v13;
  v14 = a1[3];
  v16 = *a1;
  v15 = a1[1];
  v69 = a1[2];
  v70 = v14;
  *(_OWORD *)&v66[48] = v79;
  *(_OWORD *)&v66[64] = v4;
  *(_OWORD *)v67 = a1[14];
  *(_OWORD *)&v67[9] = *(_OWORD *)((char *)a1 + 233);
  *(_OWORD *)&v65[32] = v75;
  *(_OWORD *)v66 = v7;
  *(_OWORD *)&v66[16] = v77;
  *(_OWORD *)&v66[32] = v3;
  v63 = v71;
  v64 = v11;
  *(_OWORD *)v65 = v73;
  *(_OWORD *)&v65[16] = v6;
  v59 = v16;
  v60 = v15;
  v17 = v81[24];
  v18 = *(unsigned __int8 *)(v1 + 248);
  v61 = v69;
  v62 = v10;
  if (((v18 | v81[24]) & 2) != 0)
  {
    if ((v18 & 1) != 0)
    {
      LOWORD(v34) = *(_WORD *)(v1 + 100);
      outlined retain of _ShapeStyle_RenderedShape((uint64_t)v68);
      DisplayList.Item.addDrawingGroup(contentSeed:)((unsigned __int16 *)&v34);
      *(_BYTE *)(v1 + 248) = v18 & 0xFE;
      if ((v17 & 1) == 0)
        goto LABEL_8;
    }
    else
    {
      outlined retain of _ShapeStyle_RenderedShape((uint64_t)v68);
      if ((v17 & 1) == 0)
        goto LABEL_8;
    }
    LOWORD(v34) = WORD2(v73);
    DisplayList.Item.addDrawingGroup(contentSeed:)((unsigned __int16 *)&v34);
    v67[24] = v17 & 0xFE;
    goto LABEL_8;
  }
  outlined retain of _ShapeStyle_RenderedShape((uint64_t)v68);
LABEL_8:
  _ShapeStyle_RenderedShape.commitItem()((uint64_t)&v34);
  v19 = v35;
  v28 = v36;
  v29 = v34;
  v20 = v37;
  v21 = v38;
  v22 = BYTE2(v38);
  v23 = DWORD1(v38);
  outlined consume of DisplayList.Item.Value(*(_QWORD *)(v1 + 192), *(_QWORD *)(v1 + 200));
  *(_OWORD *)(v1 + 152) = v29;
  *(_OWORD *)(v1 + 168) = v19;
  *(_OWORD *)(v1 + 184) = v28;
  *(_OWORD *)(v1 + 200) = v20;
  *(_BYTE *)(v1 + 218) = v22;
  *(_WORD *)(v1 + 216) = v21;
  *(_DWORD *)(v1 + 220) = v23;
  _ShapeStyle_RenderedShape.commitItem()((uint64_t)&v34);
  v24 = *((_QWORD *)&v36 + 1);
  v25 = v37;
  v30[0] = v34;
  v30[1] = v35;
  v30[2] = v36;
  v30[3] = v37;
  v32 = BYTE2(v38);
  v31 = v38;
  v33 = DWORD1(v38);
  DisplayList.Item.composite(_:above:)((uint64_t)v30, 0);
  outlined consume of DisplayList.Item.Value(v24, v25);
  v26 = v67[24];
  *(_BYTE *)(v1 + 248) |= v67[24];
  v34 = v59;
  v35 = v60;
  v36 = v61;
  v37 = v62;
  v38 = v63;
  v39 = v64;
  v40 = *(_DWORD *)v65;
  v41 = *(_WORD *)&v65[4];
  v42 = *(_OWORD *)&v65[8];
  v43 = *(_OWORD *)&v65[24];
  v44 = *(_QWORD *)&v65[40];
  v45 = *(_DWORD *)v66;
  v46 = *(_OWORD *)&v66[8];
  v47 = *(_OWORD *)&v66[24];
  v48 = *(_OWORD *)&v66[40];
  v49 = *(_OWORD *)&v66[56];
  v51 = v66[74];
  v50 = *(_WORD *)&v66[72];
  v52 = *(_DWORD *)&v66[76];
  v53 = v67[0];
  v54 = *(_DWORD *)&v67[4];
  v55 = *(_QWORD *)&v67[8];
  v56 = v67[16];
  v57 = *(_DWORD *)&v67[20];
  v58 = v26;
  return outlined release of _ShapeStyle_RenderedShape((uint64_t)&v34);
}

uint64_t _ShapeStyle_RenderedShape.render(color:)(double a1, double a2, double a3, float a4)
{
  uint64_t v4;
  int v5;
  uint64_t result;
  uint64_t v7;
  int v8;
  char v9;

  if (a4 != 0.0)
    __asm { BR              X10 }
  if (*(_QWORD *)(v4 + 136))
  {
    v5 = *(_DWORD *)(v4 + 144);
    v7 = *(_QWORD *)(v4 + 136);
    v8 = v5;
    v9 = 17;
    _ShapeStyle_RenderedShape.addEffect(_:)((uint64_t)&v7);
    result = swift_release();
    *(_QWORD *)(v4 + 136) = 0;
    *(_DWORD *)(v4 + 144) = 0;
  }
  return result;
}

void sub_234D7A93C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, float a9, float a10, float a11, float a12, __n128 a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, int a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,__int128 rect,uint64_t a27,uint64_t a28,__int128 a29,__int128 a30,__int128 a31,__int128 a32)
{
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  float *v37;
  uint64_t v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unsigned __int8 v45;
  uint64_t v46;
  float64x2_t v47;
  uint64_t v48;

  *(__n128 *)(v36 - 160) = a13;
  if ((_BYTE)v33)
  {
    type metadata accessor for _AnyResolvedPaint<Color.Resolved>(0);
    v37 = (float *)swift_allocObject();
    v37[4] = a9;
    v37[5] = a10;
    v37[6] = a11;
    v37[7] = a12;
    v38 = swift_allocObject();
    v39 = *(_OWORD *)(v36 - 160);
    *(_OWORD *)(v38 + 16) = v39;
    *(_QWORD *)(v38 + 32) = v35;
    *(_QWORD *)(v38 + 40) = v32;
    *(_BYTE *)(v38 + 48) = v33;
    *(_QWORD *)(v38 + 56) = v37;
    *(_BYTE *)(v38 + 64) = BYTE1(v33) & 1;
    *(_BYTE *)(v38 + 65) = BYTE2(v33) & 1;
    v40 = v38 | 0x4000000000000000;
    v42 = *((_QWORD *)&v39 + 1);
    v41 = v39;
    v43 = v35;
    v44 = v32;
    v45 = v33;
  }
  else
  {
    v46 = swift_allocObject();
    *(float *)(v46 + 16) = a9;
    *(float *)(v46 + 20) = a10;
    *(float *)(v46 + 24) = a11;
    *(float *)(v46 + 28) = a12;
    v40 = v46 | 0x1000000000000000;
    v47 = *(float64x2_t *)(v36 - 160);
    *(float64x2_t *)(v34 + 152) = vaddq_f64(*(float64x2_t *)(v34 + 152), v47);
    *(_QWORD *)(v34 + 168) = v35;
    *(_QWORD *)(v34 + 176) = v32;
    v42 = *(_QWORD *)&v47.f64[1];
    v41 = *(_QWORD *)&v47.f64[0];
    v43 = v35;
    v44 = v32;
    v45 = 0;
  }
  outlined copy of Path.Storage(v41, v42, v43, v44, v45);
  v48 = *(unsigned __int16 *)(v34 + 100);
  outlined consume of DisplayList.Item.Value(*(_QWORD *)(v34 + 192), *(_QWORD *)(v34 + 200));
  *(_QWORD *)(v34 + 192) = v40;
  *(_QWORD *)(v34 + 200) = v48;
  *(_QWORD *)(v34 + 208) = 0;
  *(_BYTE *)(v34 + 218) = 0;
  *(_WORD *)(v34 + 216) = 0;
  if (!*(_QWORD *)(v34 + 136))
    JUMPOUT(0x234D7A8DCLL);
  JUMPOUT(0x234D7A8A8);
}

void _ShapeStyle_RenderedShape.render(paint:)(uint64_t a1, double a2, double a3, double a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  CGFloat v7;
  CGFloat v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _BOOL4 IsNull;
  CGFloat v13;
  CGFloat v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int v35;
  unint64_t v36;
  char v37;
  __int16 v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  __int16 v43;
  uint64_t v44;
  uint64_t v45;
  CGFloat v46;
  CGFloat v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  __int16 v52;
  char v53;
  int v54;
  CGRect v55;

  v5 = v4;
  if ((*(_DWORD *)(v4 + 96) & 0xE00000) != 0)
  {
    LODWORD(a2) = 1.0;
    LODWORD(a3) = 1.0;
    LODWORD(a4) = 1.0;
    _ShapeStyle_RenderedShape.render(color:)(a2, a3, a4, 1.0);
    v6 = v4 + 216;
    v38 = *(_WORD *)(v4 + 216);
    v7 = *(double *)(v4 + 168);
    v8 = *(double *)(v4 + 176);
    v9 = *(_QWORD *)(v4 + 192);
    v40 = *(_QWORD *)(v4 + 184);
    v10 = *(_QWORD *)(v4 + 200);
    v11 = *(_QWORD *)(v4 + 208);
    v37 = *(_BYTE *)(v4 + 218);
    outlined copy of DisplayList.Item.Value(v9, v10);
    outlined copy of DisplayList.Item.Value(v9, v10);
    outlined copy of DisplayList.Item.Value(v9, v10);
    v55.origin.x = 0.0;
    v55.origin.y = 0.0;
    v55.size.width = v7;
    v55.size.height = v8;
    IsNull = CGRectIsNull(v55);
    if (IsNull)
      v13 = 0.0;
    else
      v13 = v7;
    if (IsNull)
      v14 = 0.0;
    else
      v14 = v8;
    if (IsNull)
      v15 = 6;
    else
      v15 = 0;
    v16 = swift_allocObject();
    *(_QWORD *)(v16 + 16) = 0;
    *(_QWORD *)(v16 + 24) = 0;
    *(CGFloat *)(v16 + 32) = v13;
    *(CGFloat *)(v16 + 40) = v14;
    *(_BYTE *)(v16 + 48) = v15;
    *(_QWORD *)(v16 + 56) = a1;
    *(_WORD *)(v16 + 64) = 256;
    v17 = v16 | 0x4000000000000000;
    v36 = *(unsigned __int16 *)(v6 - 116);
    swift_retain();
    swift_retain();
    outlined consume of DisplayList.Item.Value(v9, v10);
    v18 = swift_allocObject();
    v44 = 0;
    v45 = 0;
    v46 = v7;
    v47 = v8;
    v48 = v40;
    v49 = v9;
    v50 = v10;
    v51 = v11;
    v53 = v37;
    v52 = v38;
    v54 = 0;
    DisplayList.init(_:)(&v44, v18 + 16);
    *(_DWORD *)(v18 + 28) = 0;
    type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<DisplayList.Item>, (uint64_t)&type metadata for DisplayList.Item, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
    v19 = swift_allocObject();
    *(_OWORD *)(v19 + 16) = xmmword_23527E860;
    *(_QWORD *)(v19 + 32) = 0;
    *(_QWORD *)(v19 + 40) = 0;
    *(CGFloat *)(v19 + 48) = v7;
    *(CGFloat *)(v19 + 56) = v8;
    *(_QWORD *)(v19 + 64) = v40;
    *(_QWORD *)(v19 + 72) = v17;
    *(_QWORD *)(v19 + 80) = v36;
    *(_QWORD *)(v19 + 88) = 0;
    *(_BYTE *)(v19 + 98) = 0;
    *(_WORD *)(v19 + 96) = 0;
    *(_DWORD *)(v19 + 100) = 0;
    v44 = 0;
    v45 = 0;
    v46 = v7;
    v47 = v8;
    v48 = v40;
    v49 = v17;
    v50 = v36;
    v51 = 0;
    v53 = 0;
    v52 = 0;
    v54 = 0;
    DisplayList.Item.features.getter();
    outlined consume of DisplayList.Item.Value(v9, v10);
    outlined consume of DisplayList.Item.Value(v9, v10);
    swift_release();
    *(_QWORD *)(v6 - 24) = v18;
    *(_QWORD *)(v6 - 16) = 0x4000000700000000;
    *(_QWORD *)(v6 - 8) = v19;
    *(_BYTE *)(v6 + 2) = 0;
    *(_WORD *)v6 = v43;
  }
  else
  {
    v21 = *(_QWORD *)v4;
    v20 = *(_QWORD *)(v4 + 8);
    v22 = *(_QWORD *)(v4 + 16);
    v23 = *(_QWORD *)(v4 + 24);
    v35 = *(_DWORD *)(v4 + 96);
    v24 = *(_QWORD *)(v4 + 32);
    v39 = *(_QWORD *)(v5 + 48);
    v41 = *(_QWORD *)(v5 + 40);
    v25 = *(_QWORD *)(v5 + 64);
    v34 = *(_QWORD *)(v5 + 56);
    v27 = *(_QWORD *)(v5 + 72);
    v26 = *(_QWORD *)(v5 + 80);
    v28 = *(_QWORD *)(v5 + 88);
    v29 = swift_allocObject();
    *(_QWORD *)(v29 + 16) = v21;
    *(_QWORD *)(v29 + 24) = v20;
    *(_QWORD *)(v29 + 32) = v22;
    *(_QWORD *)(v29 + 40) = v23;
    *(_BYTE *)(v29 + 48) = v24;
    *(_QWORD *)(v29 + 56) = a1;
    *(_BYTE *)(v29 + 64) = BYTE1(v24) & 1;
    *(_BYTE *)(v29 + 65) = BYTE2(v24) & 1;
    v30 = *(unsigned __int16 *)(v5 + 100);
    v33 = *(_QWORD *)(v5 + 192);
    v32 = *(_QWORD *)(v5 + 200);
    *(_QWORD *)(v5 + 192) = v29 | 0x4000000000000000;
    *(_QWORD *)(v5 + 200) = v30;
    *(_QWORD *)(v5 + 208) = 0;
    *(_WORD *)(v5 + 216) = 0;
    *(_BYTE *)(v5 + 218) = 0;
    outlined copy of _ShapeStyle_RenderedShape.Shape(v21, v20, v22, v23, v24, v41, v39, v34, v25, v27, v26, v28, v35);
    outlined copy of _ShapeStyle_RenderedShape.Shape(v21, v20, v22, v23, v24, v41, v39, v34, v25, v27, v26, v28, v35);
    swift_retain();
    outlined consume of DisplayList.Item.Value(v33, v32);
    if (*(_QWORD *)(v5 + 136))
    {
      v31 = *(_DWORD *)(v5 + 144);
      v44 = *(_QWORD *)(v5 + 136);
      LODWORD(v45) = v31;
      BYTE4(v45) = 17;
      _ShapeStyle_RenderedShape.addEffect(_:)((uint64_t)&v44);
      swift_release();
      outlined consume of _ShapeStyle_RenderedShape.Shape(v21, v20, v22, v23, v24, v41, v39, v34, v25, v27, v26, v28, v35);
      *(_QWORD *)(v5 + 136) = 0;
      *(_DWORD *)(v5 + 144) = 0;
    }
    else
    {
      outlined consume of _ShapeStyle_RenderedShape.Shape(v21, v20, v22, v23, v24, v41, v39, v34, v25, v27, v26, v28, v35);
    }
  }
}

uint64_t _ShapeStyle_RenderedShape.render(effect:)(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  char v5;
  char v6;
  uint64_t v7;
  char v8;
  char v9;
  BOOL v10;
  unsigned __int16 v11;
  uint64_t v12;
  int v13;
  char v14;

  v2 = v1;
  v3 = *(_QWORD *)result;
  v4 = *(_DWORD *)(result + 8);
  v5 = *(_BYTE *)(result + 12);
  switch(v5)
  {
    case 4:
      *(float *)(v1 + 244) = *(float *)(v1 + 244) * *(float *)&v3;
      return result;
    case 5:
      v6 = v4 & 1;
      v7 = *(_QWORD *)(v2 + 232);
      v8 = *(_BYTE *)(v2 + 240);
      outlined copy of GraphicsBlendMode(*(_QWORD *)result, v6);
      result = outlined consume of GraphicsBlendMode(v7, v8);
      *(_QWORD *)(v2 + 232) = v3;
      *(_BYTE *)(v2 + 240) = v6;
      return result;
    case 9:
      if (*(_BYTE *)(v3 + 132) == 12)
      {
        v9 = *(_BYTE *)(v1 + 248);
        if ((v9 & 1) != 0)
        {
          v11 = *(_WORD *)(v1 + 100);
          DisplayList.Item.addDrawingGroup(contentSeed:)(&v11);
          v9 &= ~1u;
          *(_BYTE *)(v1 + 248) = v9;
        }
        if ((v9 & 2) == 0)
          *(_BYTE *)(v1 + 248) = v9 | 2;
      }
      goto LABEL_13;
    case 19:
      if (v3)
        v10 = 0;
      else
        v10 = v4 == 0;
      if (!v10)
        goto LABEL_13;
      return result;
    default:
LABEL_13:
      v12 = v3;
      v13 = v4;
      v14 = v5;
      return _ShapeStyle_RenderedShape.addEffect(_:)((uint64_t)&v12);
  }
}

uint64_t _ShapeStyle_RenderedShape.render(material:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  __int16 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  __int16 v25;
  char v26;
  int v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  int v39;
  int v40;
  _QWORD *v41;
  uint64_t v42;
  __int16 v43;
  char v44;
  uint64_t v45;
  double v46;
  double v47;
  double v48;
  uint64_t v49;
  unint64_t v50;
  char v51;
  __int16 v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t result;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  int v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  __int16 v79;
  _QWORD v80[3];
  __int16 v81;
  char v82;
  uint64_t v83;
  char v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unsigned int v97;
  __int16 v98;
  __int128 v99;
  __int128 v100;
  __int16 v101;
  uint64_t v102;
  uint64_t v103;
  __int128 v104;
  __int128 v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  uint64_t v109;
  __int16 v110;
  char v111;
  char v112;
  int v113;
  char v114;
  __int128 v115;
  uint64_t v116;

  v2 = v1;
  v3 = *(_QWORD *)a1;
  v4 = *(_DWORD *)(a1 + 8);
  v6 = *(_QWORD *)v1;
  v5 = *(_QWORD *)(v1 + 8);
  v8 = *(_QWORD *)(v1 + 16);
  v7 = *(_QWORD *)(v1 + 24);
  v10 = *(_QWORD *)(v1 + 32);
  v9 = *(_QWORD *)(v1 + 40);
  v12 = *(_QWORD *)(v1 + 48);
  v11 = *(_QWORD *)(v1 + 56);
  v13 = *(_QWORD *)(v1 + 64);
  v14 = *(_QWORD *)(v1 + 72);
  v15 = *(_QWORD *)(v1 + 80);
  v16 = *(_QWORD *)(v1 + 88);
  v17 = *(_DWORD *)(v1 + 96);
  v18 = *(_WORD *)(v2 + 100);
  v99 = *(_OWORD *)(v2 + 102);
  v100 = *(_OWORD *)(v2 + 118);
  v101 = *(_WORD *)(v2 + 134);
  v19 = *(_QWORD *)(v2 + 136);
  v21 = *(_QWORD *)(v2 + 184);
  v20 = *(_QWORD *)(v2 + 192);
  v23 = *(_QWORD *)(v2 + 200);
  v22 = *(_QWORD *)(v2 + 208);
  v24 = *(_BYTE *)(v2 + 218);
  v25 = *(_WORD *)(v2 + 216);
  v26 = *(_BYTE *)(v2 + 219);
  v27 = *(_DWORD *)(v2 + 220);
  v28 = *(_BYTE *)(v2 + 224);
  v73 = v6;
  v74 = v5;
  v85 = v6;
  v86 = v5;
  v76 = v8;
  v77 = v7;
  v87 = v8;
  v88 = v7;
  v65 = v10;
  v66 = v9;
  v89 = v10;
  v90 = v9;
  v67 = v12;
  v68 = v11;
  v91 = v12;
  v92 = v11;
  v63 = v14;
  v64 = v13;
  v93 = v13;
  v94 = v14;
  v61 = v16;
  v62 = v15;
  v95 = v15;
  v96 = v16;
  v97 = v17;
  v98 = v18;
  v102 = v19;
  v103 = *(_QWORD *)(v2 + 144);
  v104 = *(_OWORD *)(v2 + 152);
  v105 = *(_OWORD *)(v2 + 168);
  v106 = v21;
  v107 = v20;
  v69 = v20;
  v71 = v23;
  v108 = v23;
  v109 = v22;
  v111 = v24;
  v110 = v25;
  v112 = v26;
  v113 = v27;
  v114 = v28;
  v115 = *(_OWORD *)(v2 + 225);
  v116 = *(_QWORD *)(v2 + 241);
  _ShapeStyle_RenderedShape.bounds.getter();
  v30 = v29;
  v32 = v31;
  v34 = v33;
  v36 = v35;
  v80[0] = v33;
  v80[1] = v35;
  v72 = v21;
  v80[2] = v21;
  v81 = v18;
  v82 = v28;
  v83 = MEMORY[0x24BEE4AF8];
  v84 = 0;
  specialized Material.ResolvedMaterial.visitLayers<A>(_:)((uint64_t)v80, v3, v4);
  v37 = *(_QWORD *)(v83 + 16);
  if (v37)
  {
    if (v37 == 1)
    {
      v37 = *(_QWORD *)(v83 + 72);
      v38 = *(_QWORD *)(v83 + 80);
      v39 = *(unsigned __int16 *)(v83 + 96) | (*(unsigned __int8 *)(v83 + 98) << 16);
      v40 = *(_DWORD *)(v83 + 100);
      v78 = *(_QWORD *)(v83 + 88);
      outlined copy of DisplayList.Item.Value(v37, v38);
    }
    else
    {
      v41 = (_QWORD *)swift_bridgeObjectRetain();
      DisplayList.init(_:)(v41, (uint64_t)&v85);
      v40 = 0;
      v37 = 0;
      v78 = v85;
      v39 = (unsigned __int16)v86 | (BYTE2(v86) << 16);
      v38 = 0x4000001300000000;
    }
  }
  else
  {
    v40 = 0;
    v39 = 0;
    v38 = 0xC000000000000000;
    v78 = 0;
  }
  if ((v17 & 0xE00000) != 0 || v19)
  {
    v70 = v40;
    outlined copy of DisplayList.Item.Value(v37, v38);
    LODWORD(v46) = 1.0;
    LODWORD(v47) = 1.0;
    LODWORD(v48) = 1.0;
    _ShapeStyle_RenderedShape.render(color:)(v46, v47, v48, 1.0);
    v75 = v39;
    v50 = *(_QWORD *)(v2 + 200);
    v49 = *(_QWORD *)(v2 + 208);
    v51 = *(_BYTE *)(v2 + 218);
    v52 = *(_WORD *)(v2 + 216);
    v53 = *(_QWORD *)(v2 + 168);
    v54 = *(_QWORD *)(v2 + 176);
    v56 = *(_QWORD *)(v2 + 184);
    v55 = *(_QWORD *)(v2 + 192);
    v42 = swift_allocObject();
    v85 = 0;
    v86 = 0;
    v87 = v53;
    v88 = v54;
    v89 = v56;
    v90 = v55;
    v91 = v50;
    v92 = v49;
    BYTE2(v93) = v51;
    LOWORD(v93) = v52;
    HIDWORD(v93) = 0;
    outlined copy of DisplayList.Item.Value(v55, v50);
    DisplayList.init(_:)(&v85, v42 + 16);
    *(_DWORD *)(v42 + 28) = 0;
    if (v38 >> 62 != 3 || (v75 & 0xFFFFFF) != 0 || v38 != 0xC000000000000000 || v78 | v37)
    {
      type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<DisplayList.Item>, (uint64_t)&type metadata for DisplayList.Item, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
      v45 = swift_allocObject();
      *(_OWORD *)(v45 + 16) = xmmword_23527E860;
      *(_QWORD *)(v45 + 32) = v30;
      *(_QWORD *)(v45 + 40) = v32;
      *(_QWORD *)(v45 + 48) = v34;
      *(_QWORD *)(v45 + 56) = v36;
      *(_QWORD *)(v45 + 64) = v72;
      *(_QWORD *)(v45 + 72) = v37;
      *(_QWORD *)(v45 + 80) = v38;
      *(_QWORD *)(v45 + 88) = v78;
      *(_BYTE *)(v45 + 98) = BYTE2(v75);
      *(_WORD *)(v45 + 96) = v75;
      *(_DWORD *)(v45 + 100) = v70;
      v85 = v30;
      v86 = v32;
      v87 = v34;
      v88 = v36;
      v89 = v72;
      v90 = v37;
      v91 = v38;
      v92 = v78;
      BYTE2(v93) = BYTE2(v75);
      LOWORD(v93) = v75;
      HIDWORD(v93) = v70;
      outlined copy of DisplayList.Item.Value(v37, v38);
      DisplayList.Item.features.getter();
      v85 = v30;
      v86 = v32;
      v87 = v34;
      v88 = v36;
      v89 = v72;
      v90 = v37;
      v91 = v38;
      v92 = v78;
      BYTE2(v93) = BYTE2(v75);
      LOWORD(v93) = v75;
      HIDWORD(v93) = v70;
      DisplayList.Item.properties.getter();
      outlined consume of DisplayList.Item.Value(v55, v50);
      outlined consume of DisplayList.Item.Value(v37, v38);
      v59 = v37;
      v43 = v79;
      outlined consume of DisplayList.Item.Value(v59, v38);
      v44 = v79;
    }
    else
    {
      outlined consume of DisplayList.Item.Value(v55, v50);
      outlined consume of DisplayList.Item.Value(0, 0xC000000000000000);
      v43 = 0;
      v44 = 0;
      v45 = MEMORY[0x24BEE4AF8];
    }
    v58 = 0x700000000;
  }
  else
  {
    v42 = swift_allocObject();
    *(_QWORD *)(v42 + 16) = v73;
    *(_QWORD *)(v42 + 24) = v74;
    *(_QWORD *)(v42 + 32) = v76;
    *(_QWORD *)(v42 + 40) = v77;
    *(_BYTE *)(v42 + 48) = v65;
    *(_BYTE *)(v42 + 49) = BYTE1(v65) & 1;
    *(_BYTE *)(v42 + 50) = BYTE2(v65) & 1;
    *(_DWORD *)(v42 + 52) = 0;
    if (v38 >> 62 != 3 || (v39 & 0xFFFFFF) != 0 || v38 != 0xC000000000000000 || v78 | v37)
    {
      type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<DisplayList.Item>, (uint64_t)&type metadata for DisplayList.Item, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
      v45 = swift_allocObject();
      *(_OWORD *)(v45 + 16) = xmmword_23527E860;
      *(_QWORD *)(v45 + 32) = v30;
      *(_QWORD *)(v45 + 40) = v32;
      *(_QWORD *)(v45 + 48) = v34;
      *(_QWORD *)(v45 + 56) = v36;
      *(_QWORD *)(v45 + 64) = v21;
      *(_QWORD *)(v45 + 72) = v37;
      *(_QWORD *)(v45 + 80) = v38;
      *(_QWORD *)(v45 + 88) = v78;
      *(_BYTE *)(v45 + 98) = BYTE2(v39);
      *(_WORD *)(v45 + 96) = v39;
      *(_DWORD *)(v45 + 100) = v40;
      v85 = v30;
      v86 = v32;
      v87 = v34;
      v88 = v36;
      v89 = v21;
      v90 = v37;
      v91 = v38;
      v92 = v78;
      BYTE2(v93) = BYTE2(v39);
      LOWORD(v93) = v39;
      HIDWORD(v93) = v40;
      outlined copy of DisplayList.Item.Value(v37, v38);
      outlined copy of DisplayList.Item.Value(v37, v38);
      outlined copy of _ShapeStyle_RenderedShape.Shape(v73, v74, v76, v77, v65, v66, v67, v68, v64, v63, v62, v61, v17);
      DisplayList.Item.features.getter();
      v85 = v30;
      v86 = v32;
      v87 = v34;
      v88 = v36;
      v89 = v21;
      v90 = v37;
      v91 = v38;
      v92 = v78;
      BYTE2(v93) = BYTE2(v39);
      LOWORD(v93) = v39;
      HIDWORD(v93) = v40;
      DisplayList.Item.properties.getter();
      outlined consume of DisplayList.Item.Value(v69, v71);
      outlined consume of DisplayList.Item.Value(v37, v38);
      v57 = v37;
      v43 = v79;
      outlined consume of DisplayList.Item.Value(v57, v38);
      v44 = v79;
    }
    else
    {
      outlined copy of DisplayList.Item.Value(0, 0xC000000000000000);
      outlined copy of _ShapeStyle_RenderedShape.Shape(v73, v74, v76, v77, v65, v66, v67, v68, v64, v63, v62, v61, v17);
      outlined consume of DisplayList.Item.Value(v69, v71);
      outlined consume of DisplayList.Item.Value(0, 0xC000000000000000);
      v43 = 0;
      v44 = 0;
      v45 = MEMORY[0x24BEE4AF8];
    }
    v58 = 0x600000000;
  }
  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 192) = v42;
  *(_QWORD *)(v2 + 200) = v58 & 0xFFFFFFFFFFFFLL | 0x4000000000000000;
  *(_QWORD *)(v2 + 208) = v45;
  *(_BYTE *)(v2 + 218) = v44;
  *(_WORD *)(v2 + 216) = v43;
  if (v84 == 1 && (*(_BYTE *)(v2 + 248) & 2) == 0)
    *(_BYTE *)(v2 + 248) |= 2u;
  return result;
}

uint64_t _ShapeStyle_RenderedShape.render(shadow:style:above:below:opaqueFill:mayAdjustItem:)(int *a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, _BYTE *a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  float v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  float v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int8x16_t v23;
  uint64_t result;
  char v25;
  uint64_t v26;
  unsigned __int8 v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  unsigned int v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int v43;
  double v44;
  double v45;
  double v46;
  double v47;
  double v48;
  double v49;
  unint64_t v50;
  uint64_t v51;
  void *v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  id v58;
  double v59;
  double v60;
  double v61;
  char v62;
  uint64_t v63;
  int8x16_t v64;
  unint64_t v65;
  uint64_t v66;
  int v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char v72;
  __int16 v73;
  uint64_t v74;
  char v75;
  uint64_t v76;
  int v77;
  uint64_t v78;
  __int16 v79;
  char v80;
  int v81;
  uint64_t v82;
  int v83;
  char v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char v91;
  CGFloat x;
  CGFloat y;
  CGFloat width;
  int64x2_t v95;
  int v96;
  uint64_t v97;
  double v98;
  double v99;
  double v100;
  double v101;
  double v102;
  double v103;
  unint64_t v104;
  uint64_t (*v105)(id);
  id v106;
  char v107;
  double v108;
  double v109;
  double v110;
  uint64_t v111;
  char v112;
  double v113;
  double v114;
  double v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  int v120;
  int v121;
  char v122;
  __int16 v123;
  uint64_t v124;
  uint64_t v125;
  unint64_t v126;
  uint64_t v127;
  int v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  char v133;
  __int16 v134;
  uint64_t v135;
  char v136;
  uint64_t v137;
  uint64_t v138;
  unsigned __int8 v139;
  uint64_t v140;
  unint64_t v141;
  uint64_t v142;
  int v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  unsigned __int8 v148;
  char v149;
  __int16 v150;
  uint64_t v151;
  unsigned __int8 v152;
  unint64_t v153;
  uint64_t v154;
  int v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  char v160;
  __int16 v161;
  uint64_t v162;
  uint64_t v163;
  unint64_t v164;
  int v165;
  char v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  char v170;
  unsigned int v171;
  int v172;
  int8x16_t v173;
  int8x8_t v174;
  BOOL v176;
  char v177;
  uint64_t v178;
  uint64_t (*v179)(id);
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  void *v190;
  uint64_t v191;
  void *v192;
  uint64_t v193;
  void *v194;
  unsigned int v195;
  uint64_t v196;
  int v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  int v202;
  uint64_t v203;
  int v204;
  unsigned int v205;
  unsigned int v206;
  unsigned int v207;
  char v208;
  unsigned __int8 v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  float v214;
  __int16 v215;
  uint64_t v216;
  char v217;
  uint64_t v218;
  uint64_t v219;
  int v220;
  uint64_t v221;
  int v222;
  uint64_t v223;
  char v224;
  unsigned int v225;
  CGFloat height;
  int v227;
  uint64_t v228;
  uint64_t v229;
  char v230;
  __int128 v231;
  __int128 v232;
  __int128 v233;
  __int128 v234;
  __int128 v235;
  __int128 v236;
  __int128 v237;
  __int128 v238;
  __int128 v239;
  __int128 v240;
  __int128 v241;
  __int128 v242;
  __int128 v243;
  __int128 v244;
  _OWORD v245[2];
  __int128 v246;
  __int128 v247;
  __int128 v248;
  __int128 v249;
  __int16 v250;
  char v251;
  int v252;
  __int128 v253;
  _BYTE v254[112];
  __int128 v255;
  _BYTE v256[48];
  __int128 v257;
  __int128 v258;
  _BYTE v259[25];
  __int128 v260;
  __int128 v261;
  __int128 v262;
  __int128 v263;
  __int128 v264;
  __int128 v265;
  __int128 v266;
  __int128 v267;
  __int128 v268;
  __int128 v269;
  __int128 v270;
  __int128 v271;
  __int128 v272;
  __int128 v273;
  _BYTE v274[25];
  char v275;
  _QWORD v276[4];
  unsigned __int8 v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  char v282;
  CGRect v283;

  v206 = *a1;
  v207 = a1[1];
  v205 = a1[2];
  LODWORD(v214) = a1[3];
  v8 = *((_QWORD *)a1 + 2);
  v7 = *((_QWORD *)a1 + 3);
  v9 = *((_QWORD *)a1 + 4);
  v10 = *((float *)a1 + 10);
  v11 = *((unsigned __int8 *)a1 + 44);
  v12 = *(_QWORD *)(a2 + 8);
  v193 = v12;
  v194 = *(void **)a2;
  v13 = *(void **)(a2 + 16);
  v192 = *(void **)(a2 + 24);
  v15 = *(_QWORD *)(a2 + 32);
  v14 = *(_QWORD *)(a2 + 40);
  v17 = *(_QWORD *)(a2 + 48);
  v16 = *(_QWORD *)(a2 + 56);
  v18 = *(_QWORD *)(a2 + 64);
  v201 = *(_QWORD *)(a2 + 72);
  v202 = *(unsigned __int8 *)(a2 + 80);
  v19 = *(float *)(a2 + 84);
  v20 = *(_QWORD *)(a2 + 88);
  v183 = v17;
  v184 = v16;
  v181 = v15;
  v182 = v14;
  v190 = v13;
  v199 = v18;
  v204 = *(unsigned __int8 *)(a2 + 96);
  v222 = *((unsigned __int8 *)a1 + 44);
  if (*a6 != 1)
  {
    if ((a5 & 1) != 0)
      goto LABEL_9;
LABEL_10:
    v200 = *(_QWORD *)(a2 + 88);
    v28 = (v11 >> 3) & 1;
LABEL_11:
    v225 = v28;
    v29 = *(_QWORD *)v6;
    v30 = *(_QWORD *)(v6 + 8);
    v31 = *(_QWORD *)(v6 + 16);
    v32 = *(_QWORD *)(v6 + 24);
    if (v28 | ((v11 & 4) >> 2))
      v33 = 2;
    else
      v33 = 6;
    v197 = v33;
    v34 = *(_QWORD *)(v6 + 56);
    v35 = *(_DWORD *)(v6 + 96);
    v36 = *(_QWORD *)(v6 + 120);
    v37 = *(_QWORD *)(v6 + 128);
    v218 = *(_QWORD *)(v6 + 184);
    v215 = *(_WORD *)(v6 + 100);
    v208 = *(_BYTE *)(v6 + 224);
    v220 = *(_DWORD *)(v6 + 228);
    v210 = *(_QWORD *)(v6 + 88);
    v211 = *(_QWORD *)(v6 + 80);
    v212 = *(_QWORD *)(v6 + 72);
    v213 = *(_QWORD *)(v6 + 64);
    v38 = *(_QWORD *)v6;
    v39 = *(_QWORD *)(v6 + 8);
    v40 = *(_QWORD *)(v6 + 32);
    v41 = *(_QWORD *)(v6 + 40);
    v42 = *(_QWORD *)(v6 + 48);
    v43 = v11;
    outlined copy of _ShapeStyle_RenderedShape.Shape(v29, v30, v31, v32, v40, v41, v42, v34, v213, v212, v211, v210, v35);
    if (one-time initialization token for normal != -1)
      swift_once();
    v275 = byte_254266040;
    *(_QWORD *)&v260 = v38;
    *((_QWORD *)&v260 + 1) = v39;
    v191 = v31;
    *(_QWORD *)&v261 = v31;
    v188 = v32;
    *((_QWORD *)&v261 + 1) = v32;
    *(_QWORD *)&v262 = v40;
    *((_QWORD *)&v262 + 1) = v41;
    *(_QWORD *)&v263 = v42;
    v185 = v34;
    *((_QWORD *)&v263 + 1) = v34;
    *(_QWORD *)&v264 = v213;
    *((_QWORD *)&v264 + 1) = v212;
    *(_QWORD *)&v265 = v211;
    *((_QWORD *)&v265 + 1) = v210;
    LODWORD(v266) = v35;
    WORD2(v266) = v215;
    *(_QWORD *)&v267 = 0;
    *((_QWORD *)&v266 + 1) = 0;
    *((_QWORD *)&v267 + 1) = v36;
    v268 = v37;
    LODWORD(v269) = 0;
    *(_QWORD *)&v270 = 0;
    *((_QWORD *)&v269 + 1) = 0;
    *((_QWORD *)&v270 + 1) = v36;
    *(_QWORD *)&v271 = v37;
    v272 = xmmword_23527E880;
    *((_QWORD *)&v271 + 1) = v218;
    *(_QWORD *)&v273 = 0;
    BYTE10(v273) = 0;
    WORD4(v273) = 0;
    HIDWORD(v273) = 0;
    v274[0] = v208;
    *(_DWORD *)&v274[4] = v220;
    *(_QWORD *)&v274[8] = static GraphicsBlendMode.normal;
    v274[16] = byte_254266040;
    *(_DWORD *)&v274[20] = 1065353216;
    v274[24] = 0;
    v189 = v38;
    v203 = v39;
    v186 = v41;
    v187 = v40;
    v196 = v42;
    v195 = v35;
    v198 = v197 | v43;
    if (((v225 | v43) & 1) != 0)
    {
      outlined copy of GraphicsBlendMode(static GraphicsBlendMode.normal, byte_254266040);
      LODWORD(v44) = 1.0;
      LODWORD(v45) = 1.0;
      LODWORD(v46) = 1.0;
      _ShapeStyle_RenderedShape.render(color:)(v44, v45, v46, 1.0);
LABEL_26:
      v63 = swift_allocObject();
      v64.i64[0] = v206;
      v64.i64[1] = v205;
      *(int8x16_t *)(v63 + 16) = vorrq_s8((int8x16_t)vshll_n_s32((int32x2_t)__PAIR64__(v214 * v19, v207), 0x20uLL), v64);
      *(_QWORD *)(v63 + 32) = v8;
      *(_QWORD *)(v63 + 40) = v7;
      *(_QWORD *)(v63 + 48) = v9;
      *(_QWORD *)(v63 + 56) = LODWORD(v10) | (unint64_t)(v198 << 32);
      *(_OWORD *)(v63 + 64) = 0u;
      *(_OWORD *)(v63 + 80) = 0u;
      *(_OWORD *)(v63 + 96) = 0u;
      *(_OWORD *)(v63 + 112) = 0u;
      *(_DWORD *)(v63 + 128) = 0;
      *(_BYTE *)(v63 + 132) = 2;
      v65 = *((_QWORD *)&v272 + 1);
      v66 = v273;
      v67 = WORD4(v273) | (BYTE10(v273) << 16);
      v68 = *((_QWORD *)&v270 + 1);
      v69 = v271;
      v70 = v272;
      v71 = *((_QWORD *)&v271 + 1);
      if (*((_QWORD *)&v272 + 1) >> 62 != 3
        || (v67 & 0xFFFFFF) != 0
        || *((_QWORD *)&v272 + 1) != 0xC000000000000000
        || (unint64_t)v273 | (unint64_t)v272)
      {
        type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<DisplayList.Item>, (uint64_t)&type metadata for DisplayList.Item, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
        v74 = swift_allocObject();
        *(_OWORD *)(v74 + 16) = xmmword_23527E860;
        *(_QWORD *)(v74 + 32) = 0;
        *(_QWORD *)(v74 + 40) = 0;
        *(_QWORD *)(v74 + 48) = v68;
        *(_QWORD *)(v74 + 56) = v69;
        *(_QWORD *)(v74 + 64) = v71;
        *(_QWORD *)(v74 + 72) = v70;
        *(_QWORD *)(v74 + 80) = v65;
        *(_QWORD *)(v74 + 88) = v66;
        *(_BYTE *)(v74 + 98) = BYTE2(v67);
        *(_WORD *)(v74 + 96) = v67;
        *(_DWORD *)(v74 + 100) = 0;
        outlined copy of DisplayList.Item.Value(v70, v65);
        swift_retain();
        DisplayList.Item.features.getter();
        v73 = v231;
        v253 = 0uLL;
        *(_QWORD *)v254 = v68;
        *(_QWORD *)&v254[8] = v69;
        *(_QWORD *)&v254[16] = v71;
        *(_QWORD *)&v254[24] = v70;
        *(_QWORD *)&v254[32] = v65;
        *(_QWORD *)&v254[40] = v66;
        v254[50] = BYTE2(v67);
        *(_WORD *)&v254[48] = v67;
        *(_DWORD *)&v254[52] = 0;
        DisplayList.Item.properties.getter();
        v72 = v231;
      }
      else
      {
        outlined copy of DisplayList.Item.Value(0, 0xC000000000000000);
        swift_retain();
        v72 = 0;
        v73 = 0;
        v74 = MEMORY[0x24BEE4AF8];
      }
      v75 = v222;
      *(_QWORD *)&v272 = v63;
      *((_QWORD *)&v272 + 1) = 0x4000000900000000;
      *(_QWORD *)&v273 = v74;
      BYTE10(v273) = v72;
      WORD4(v273) = v73;
      LOBYTE(v253) = v274[0];
      DisplayList.Item.canonicalize(options:)((char *)&v253);
      outlined consume of DisplayList.Item.Value(v70, v65);
      swift_release();
      if ((v225 & 1) != 0)
        goto LABEL_82;
      if ((v222 & 1) == 0)
      {
        v96 = 1;
        v86 = v188;
        v85 = v189;
        v89 = v186;
        v88 = v187;
        v97 = v196;
        v90 = v185;
        v87 = v191;
        v91 = v208;
LABEL_49:
        if ((v195 & 0xE00000) != 0)
        {
          v227 = v96;
          v111 = static GraphicsBlendMode.normal;
          v112 = byte_254266040;
          LOBYTE(v276[0]) = byte_254266040;
          *(_QWORD *)&v253 = v85;
          *((_QWORD *)&v253 + 1) = v203;
          *(_QWORD *)v254 = v87;
          *(_QWORD *)&v254[8] = v86;
          *(_QWORD *)&v254[16] = v88;
          *(_QWORD *)&v254[24] = v89;
          *(_QWORD *)&v254[32] = v97;
          *(_QWORD *)&v254[40] = v90;
          *(_QWORD *)&v254[48] = v213;
          *(_QWORD *)&v254[56] = v212;
          *(_QWORD *)&v254[64] = v211;
          *(_QWORD *)&v254[72] = v210;
          *(_DWORD *)&v254[80] = v195;
          *(_WORD *)&v254[84] = v215;
          *(double *)&v254[88] = -*((double *)&v269 + 1);
          *(double *)&v254[96] = -*(double *)&v270;
          *(_QWORD *)&v254[104] = v36;
          v255 = v37;
          *(_DWORD *)v256 = 0;
          *(double *)&v256[8] = -*((double *)&v269 + 1);
          *(double *)&v256[16] = -*(double *)&v270;
          *(_QWORD *)&v256[24] = v36;
          *(_QWORD *)&v256[32] = v37;
          *(_QWORD *)&v256[40] = v218;
          v257 = xmmword_23527E880;
          *(_QWORD *)&v258 = 0;
          BYTE10(v258) = 0;
          WORD4(v258) = 0;
          HIDWORD(v258) = 0;
          v259[0] = v91;
          *(_DWORD *)&v259[4] = v220;
          *(_QWORD *)&v259[8] = static GraphicsBlendMode.normal;
          v259[16] = byte_254266040;
          *(_DWORD *)&v259[20] = 1065353216;
          v259[24] = 0;
          outlined copy of _ShapeStyle_RenderedShape.Shape(v85, v203, v87, v86, v88, v89, v97, v90, v213, v212, v211, v210, v195);
          outlined copy of GraphicsBlendMode(v111, v112);
          LODWORD(v113) = 1.0;
          LODWORD(v114) = 1.0;
          LODWORD(v115) = 1.0;
          _ShapeStyle_RenderedShape.render(color:)(v113, v114, v115, 1.0);
          _ShapeStyle_RenderedShape.commitItem()((uint64_t)&v231);
          v116 = v231;
          v117 = v232;
          v118 = v233;
          v119 = v234;
          v120 = (unsigned __int16)v235 | (BYTE2(v235) << 16);
          v121 = DWORD1(v235);
          if ((unint64_t)v234 >> 62 != 3
            || (v120 & 0xFFFFFF) != 0
            || (_QWORD)v234 != 0xC000000000000000
            || *((_QWORD *)&v234 + 1) | *((_QWORD *)&v233 + 1))
          {
            type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<DisplayList.Item>, (uint64_t)&type metadata for DisplayList.Item, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
            v124 = swift_allocObject();
            *(_OWORD *)(v124 + 16) = xmmword_23527E860;
            *(_OWORD *)(v124 + 32) = v116;
            *(_OWORD *)(v124 + 48) = v117;
            *(_OWORD *)(v124 + 64) = v118;
            *(_OWORD *)(v124 + 80) = v119;
            *(_BYTE *)(v124 + 98) = BYTE2(v120);
            *(_WORD *)(v124 + 96) = v120;
            *(_DWORD *)(v124 + 100) = v121;
            v246 = v116;
            v247 = v117;
            v248 = v118;
            v249 = v119;
            v251 = BYTE2(v120);
            v250 = v120;
            v252 = v121;
            outlined copy of DisplayList.Item.Value(*((uint64_t *)&v118 + 1), v119);
            DisplayList.Item.features.getter();
            v123 = v278;
            v246 = v116;
            v247 = v117;
            v248 = v118;
            v249 = v119;
            v251 = BYTE2(v120);
            v250 = v120;
            v252 = v121;
            DisplayList.Item.properties.getter();
            outlined consume of DisplayList.Item.Value(*((uint64_t *)&v118 + 1), v119);
            v122 = v278;
          }
          else
          {
            outlined consume of DisplayList.Item.Value(0, 0xC000000000000000);
            v122 = 0;
            v123 = 0;
            v124 = MEMORY[0x24BEE4AF8];
          }
          v125 = swift_allocObject();
          *(_QWORD *)(v125 + 16) = v124;
          *(_WORD *)(v125 + 24) = v123;
          *(_BYTE *)(v125 + 26) = v122;
          *(_DWORD *)(v125 + 28) = v227;
          v126 = *((_QWORD *)&v272 + 1);
          v127 = v273;
          v128 = WORD4(v273) | (BYTE10(v273) << 16);
          v129 = *((_QWORD *)&v270 + 1);
          v130 = v271;
          v131 = v272;
          v132 = *((_QWORD *)&v271 + 1);
          if (*((_QWORD *)&v272 + 1) >> 62 != 3
            || (v128 & 0xFFFFFF) != 0
            || *((_QWORD *)&v272 + 1) != 0xC000000000000000
            || (unint64_t)v273 | (unint64_t)v272)
          {
            type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<DisplayList.Item>, (uint64_t)&type metadata for DisplayList.Item, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
            v135 = swift_allocObject();
            *(_OWORD *)(v135 + 16) = xmmword_23527E860;
            *(_QWORD *)(v135 + 32) = 0;
            *(_QWORD *)(v135 + 40) = 0;
            *(_QWORD *)(v135 + 48) = v129;
            *(_QWORD *)(v135 + 56) = v130;
            *(_QWORD *)(v135 + 64) = v132;
            *(_QWORD *)(v135 + 72) = v131;
            *(_QWORD *)(v135 + 80) = v126;
            *(_QWORD *)(v135 + 88) = v127;
            *(_BYTE *)(v135 + 98) = BYTE2(v128);
            *(_WORD *)(v135 + 96) = v128;
            *(_DWORD *)(v135 + 100) = 0;
            v231 = 0uLL;
            *(_QWORD *)&v232 = v129;
            *((_QWORD *)&v232 + 1) = v130;
            *(_QWORD *)&v233 = v132;
            *((_QWORD *)&v233 + 1) = v131;
            *(_QWORD *)&v234 = v126;
            *((_QWORD *)&v234 + 1) = v127;
            BYTE2(v235) = BYTE2(v128);
            LOWORD(v235) = v128;
            DWORD1(v235) = 0;
            outlined copy of DisplayList.Item.Value(v131, v126);
            swift_retain();
            DisplayList.Item.features.getter();
            v134 = v246;
            v231 = 0uLL;
            *(_QWORD *)&v232 = v129;
            *((_QWORD *)&v232 + 1) = v130;
            *(_QWORD *)&v233 = v132;
            *((_QWORD *)&v233 + 1) = v131;
            *(_QWORD *)&v234 = v126;
            *((_QWORD *)&v234 + 1) = v127;
            BYTE2(v235) = BYTE2(v128);
            LOWORD(v235) = v128;
            DWORD1(v235) = 0;
            DisplayList.Item.properties.getter();
            v133 = v246;
          }
          else
          {
            outlined copy of DisplayList.Item.Value(0, 0xC000000000000000);
            swift_retain();
            v133 = 0;
            v134 = 0;
            v135 = MEMORY[0x24BEE4AF8];
          }
          v75 = v222;
          *(_QWORD *)&v272 = v125;
          *((_QWORD *)&v272 + 1) = 0x4000000700000000;
          *(_QWORD *)&v273 = v135;
          BYTE10(v273) = v133;
          WORD4(v273) = v134;
          v136 = v274[0];
          LOBYTE(v231) = v274[0];
          DisplayList.Item.canonicalize(options:)((char *)&v231);
          outlined consume of DisplayList.Item.Value(v131, v126);
          swift_release();
          v243 = v257;
          v244 = v258;
          v245[0] = *(_OWORD *)v259;
          *(_OWORD *)((char *)v245 + 9) = *(_OWORD *)&v259[9];
          v239 = v255;
          v240 = *(_OWORD *)v256;
          v241 = *(_OWORD *)&v256[16];
          v242 = *(_OWORD *)&v256[32];
          v235 = *(_OWORD *)&v254[48];
          v236 = *(_OWORD *)&v254[64];
          v237 = *(_OWORD *)&v254[80];
          v238 = *(_OWORD *)&v254[96];
          v231 = v253;
          v232 = *(_OWORD *)v254;
          v233 = *(_OWORD *)&v254[16];
          v234 = *(_OWORD *)&v254[32];
          outlined release of _ShapeStyle_RenderedShape((uint64_t)&v231);
          if ((v222 & 1) == 0)
            goto LABEL_82;
LABEL_75:
          v153 = *((_QWORD *)&v272 + 1);
          v154 = v273;
          v155 = WORD4(v273) | (BYTE10(v273) << 16);
          v156 = *((_QWORD *)&v270 + 1);
          v157 = v271;
          v158 = v272;
          v159 = *((_QWORD *)&v271 + 1);
          if (*((_QWORD *)&v272 + 1) >> 62 != 3
            || (v155 & 0xFFFFFF) != 0
            || *((_QWORD *)&v272 + 1) != 0xC000000000000000
            || (unint64_t)v273 | (unint64_t)v272)
          {
            type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<DisplayList.Item>, (uint64_t)&type metadata for DisplayList.Item, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
            v162 = swift_allocObject();
            *(_OWORD *)(v162 + 16) = xmmword_23527E860;
            *(_QWORD *)(v162 + 32) = 0;
            *(_QWORD *)(v162 + 40) = 0;
            *(_QWORD *)(v162 + 48) = v156;
            *(_QWORD *)(v162 + 56) = v157;
            *(_QWORD *)(v162 + 64) = v159;
            *(_QWORD *)(v162 + 72) = v158;
            *(_QWORD *)(v162 + 80) = v153;
            *(_QWORD *)(v162 + 88) = v154;
            *(_BYTE *)(v162 + 98) = BYTE2(v155);
            *(_WORD *)(v162 + 96) = v155;
            *(_DWORD *)(v162 + 100) = 0;
            v253 = 0uLL;
            *(_QWORD *)v254 = v156;
            *(_QWORD *)&v254[8] = v157;
            *(_QWORD *)&v254[16] = v159;
            *(_QWORD *)&v254[24] = v158;
            *(_QWORD *)&v254[32] = v153;
            *(_QWORD *)&v254[40] = v154;
            v254[50] = BYTE2(v155);
            *(_WORD *)&v254[48] = v155;
            *(_DWORD *)&v254[52] = 0;
            outlined copy of DisplayList.Item.Value(v158, v153);
            DisplayList.Item.features.getter();
            v161 = v231;
            v253 = 0uLL;
            *(_QWORD *)v254 = v156;
            *(_QWORD *)&v254[8] = v157;
            *(_QWORD *)&v254[16] = v159;
            *(_QWORD *)&v254[24] = v158;
            *(_QWORD *)&v254[32] = v153;
            *(_QWORD *)&v254[40] = v154;
            v254[50] = BYTE2(v155);
            v75 = v222;
            *(_WORD *)&v254[48] = v155;
            *(_DWORD *)&v254[52] = 0;
            DisplayList.Item.properties.getter();
            v160 = v231;
          }
          else
          {
            outlined copy of DisplayList.Item.Value(0, 0xC000000000000000);
            v160 = 0;
            v161 = 0;
            v162 = MEMORY[0x24BEE4AF8];
          }
          v272 = xmmword_23529EF20;
          *(_QWORD *)&v273 = v162;
          BYTE10(v273) = v160;
          WORD4(v273) = v161;
          LOBYTE(v253) = v136;
          DisplayList.Item.canonicalize(options:)((char *)&v253);
          outlined consume of DisplayList.Item.Value(v158, v153);
          goto LABEL_82;
        }
        v278 = v85;
        v279 = v203;
        v280 = v87;
        v281 = v86;
        v282 = v88;
        if (*((double *)&v269 + 1) == 0.0 && *(double *)&v270 == 0.0)
        {
          outlined copy of Path.Storage(v85, v203, v87, v86, v88);
          outlined copy of Path.Storage(v85, v203, v87, v86, v88);
          v137 = v85;
          v138 = v203;
          v139 = v88;
        }
        else
        {
          CGAffineTransformMakeTranslation((CGAffineTransform *)&v253, -*((double *)&v269 + 1), -*(double *)&v270);
          v246 = v253;
          v247 = *(_OWORD *)v254;
          v248 = *(_OWORD *)&v254[16];
          outlined copy of Path.Storage(v85, v203, v87, v86, v88);
          Path.applying(_:)((double *)&v246, (uint64_t)v276);
          v137 = v276[0];
          v138 = v276[1];
          v87 = v276[2];
          v86 = v276[3];
          v139 = v277;
        }
        v140 = swift_allocObject();
        *(_QWORD *)(v140 + 16) = v137;
        *(_QWORD *)(v140 + 24) = v138;
        v228 = v138;
        v219 = v86;
        v221 = v87;
        *(_QWORD *)(v140 + 32) = v87;
        *(_QWORD *)(v140 + 40) = v86;
        *(_BYTE *)(v140 + 48) = v139;
        *(_BYTE *)(v140 + 49) = BYTE1(v88) & 1;
        *(_BYTE *)(v140 + 50) = BYTE2(v88) & 1;
        *(_DWORD *)(v140 + 52) = v96;
        v141 = *((_QWORD *)&v272 + 1);
        v142 = v273;
        v143 = WORD4(v273) | (BYTE10(v273) << 16);
        v144 = *((_QWORD *)&v270 + 1);
        v145 = v271;
        v146 = v272;
        v147 = *((_QWORD *)&v271 + 1);
        v216 = v137;
        if (*((_QWORD *)&v272 + 1) >> 62 != 3
          || (v143 & 0xFFFFFF) != 0
          || *((_QWORD *)&v272 + 1) != 0xC000000000000000
          || (unint64_t)v273 | (unint64_t)v272)
        {
          v152 = v139;
          v209 = v139;
          type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<DisplayList.Item>, (uint64_t)&type metadata for DisplayList.Item, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
          v151 = swift_allocObject();
          *(_OWORD *)(v151 + 16) = xmmword_23527E860;
          *(_QWORD *)(v151 + 32) = 0;
          *(_QWORD *)(v151 + 40) = 0;
          *(_QWORD *)(v151 + 48) = v144;
          *(_QWORD *)(v151 + 56) = v145;
          *(_QWORD *)(v151 + 64) = v147;
          *(_QWORD *)(v151 + 72) = v146;
          *(_QWORD *)(v151 + 80) = v141;
          *(_QWORD *)(v151 + 88) = v142;
          *(_BYTE *)(v151 + 98) = BYTE2(v143);
          *(_WORD *)(v151 + 96) = v143;
          *(_DWORD *)(v151 + 100) = 0;
          v253 = 0uLL;
          *(_QWORD *)v254 = v144;
          *(_QWORD *)&v254[8] = v145;
          *(_QWORD *)&v254[16] = v147;
          *(_QWORD *)&v254[24] = v146;
          *(_QWORD *)&v254[32] = v141;
          *(_QWORD *)&v254[40] = v142;
          v254[50] = BYTE2(v143);
          *(_WORD *)&v254[48] = v143;
          *(_DWORD *)&v254[52] = 0;
          outlined copy of Path.Storage(v137, v228, v221, v219, v152);
          outlined copy of DisplayList.Item.Value(v146, v141);
          swift_retain();
          DisplayList.Item.features.getter();
          v150 = v231;
          v253 = 0uLL;
          *(_QWORD *)v254 = v144;
          *(_QWORD *)&v254[8] = v145;
          *(_QWORD *)&v254[16] = v147;
          v148 = v209;
          *(_QWORD *)&v254[24] = v146;
          *(_QWORD *)&v254[32] = v141;
          *(_QWORD *)&v254[40] = v142;
          v254[50] = BYTE2(v143);
          v75 = v222;
          *(_WORD *)&v254[48] = v143;
          *(_DWORD *)&v254[52] = 0;
          DisplayList.Item.properties.getter();
          v149 = v231;
        }
        else
        {
          v148 = v139;
          outlined copy of Path.Storage(v137, v228, v221, v219, v139);
          outlined copy of DisplayList.Item.Value(0, 0xC000000000000000);
          swift_retain();
          v149 = 0;
          v150 = 0;
          v151 = MEMORY[0x24BEE4AF8];
        }
        *(_QWORD *)&v272 = v140;
        *((_QWORD *)&v272 + 1) = 0x4000000600000000;
        *(_QWORD *)&v273 = v151;
        BYTE10(v273) = v149;
        WORD4(v273) = v150;
        v136 = v274[0];
        LOBYTE(v253) = v274[0];
        DisplayList.Item.canonicalize(options:)((char *)&v253);
        outlined consume of DisplayList.Item.Value(v146, v141);
        outlined consume of _ShapeStyle_RenderedShape.Shape(v189, v203, v191, v188, v187, v186, v196, v185, v213, v212, v211, v210, v195);
        outlined consume of Path.Storage(v216, v228, v221, v219, v148);
        swift_release();
        if ((v75 & 1) != 0)
          goto LABEL_75;
LABEL_82:
        _ShapeStyle_RenderedShape.commitItem()((uint64_t)&v253);
        v163 = *(_QWORD *)&v254[24];
        v164 = *(_QWORD *)&v254[32];
        v165 = *(unsigned __int16 *)&v254[48] | (v254[50] << 16);
        if ((v75 & 1) != 0)
        {
          v231 = v253;
          v232 = *(_OWORD *)v254;
          v233 = *(_OWORD *)&v254[16];
          v234 = *(_OWORD *)&v254[32];
          LOWORD(v235) = *(_WORD *)&v254[48];
          BYTE2(v235) = BYTE2(v165);
          DWORD1(v235) = *(_DWORD *)&v254[52];
          if (v204 != 255)
          {
            v166 = v204 & 1;
            v167 = v200;
LABEL_88:
            v229 = v167;
            v230 = v166;
            outlined copy of GraphicsBlendMode?(v200, v204);
            CompositedItemAccumulator.add(item:blend:)(&v231, (uint64_t)&v229);
            outlined consume of GraphicsBlendMode(v167, v166);
            v257 = v272;
            v258 = v273;
            *(_OWORD *)v259 = *(_OWORD *)v274;
            *(_OWORD *)&v259[9] = *(_OWORD *)&v274[9];
            v255 = v268;
            *(_OWORD *)v256 = v269;
            *(_OWORD *)&v256[16] = v270;
            *(_OWORD *)&v256[32] = v271;
            *(_OWORD *)&v254[48] = v264;
            *(_OWORD *)&v254[64] = v265;
            *(_OWORD *)&v254[80] = v266;
            *(_OWORD *)&v254[96] = v267;
            v253 = v260;
            *(_OWORD *)v254 = v261;
            *(_OWORD *)&v254[16] = v262;
            *(_OWORD *)&v254[32] = v263;
            outlined release of _ShapeStyle_RenderedShape((uint64_t)&v253);
            return outlined consume of DisplayList.Item.Value(v163, v164);
          }
        }
        else
        {
          v231 = v253;
          v232 = *(_OWORD *)v254;
          v233 = *(_OWORD *)&v254[16];
          v234 = *(_OWORD *)&v254[32];
          LOWORD(v235) = *(_WORD *)&v254[48];
          BYTE2(v235) = BYTE2(v165);
          DWORD1(v235) = *(_DWORD *)&v254[52];
          if (v204 != 255)
          {
            v166 = v204 & 1;
            v167 = v200;
            goto LABEL_88;
          }
        }
        v167 = static GraphicsBlendMode.normal;
        v166 = byte_254266040;
        outlined copy of GraphicsBlendMode(static GraphicsBlendMode.normal, byte_254266040);
        goto LABEL_88;
      }
      v76 = *(_QWORD *)(v180 + 136);
      v77 = *(_DWORD *)(v180 + 144);
      v78 = *(_QWORD *)(v180 + 208);
      v79 = *(_WORD *)(v180 + 216);
      v80 = *(_BYTE *)(v180 + 218);
      v81 = *(_DWORD *)(v180 + 220);
      v82 = *(_QWORD *)(v180 + 232);
      v83 = *(_DWORD *)(v180 + 244);
      v84 = *(_BYTE *)(v180 + 248);
      LOBYTE(v246) = *(_BYTE *)(v180 + 240);
      v86 = v188;
      v85 = v189;
      *(_QWORD *)&v253 = v189;
      *((_QWORD *)&v253 + 1) = v203;
      v87 = v191;
      *(_QWORD *)v254 = v191;
      *(_QWORD *)&v254[8] = v188;
      v89 = v186;
      v88 = v187;
      *(_QWORD *)&v254[16] = v187;
      *(_QWORD *)&v254[24] = v186;
      *(_QWORD *)&v254[32] = v42;
      v90 = v185;
      *(_QWORD *)&v254[40] = v185;
      *(_QWORD *)&v254[48] = v213;
      *(_QWORD *)&v254[56] = v212;
      *(_QWORD *)&v254[64] = v211;
      *(_QWORD *)&v254[72] = v210;
      *(_DWORD *)&v254[80] = v195;
      *(_WORD *)&v254[84] = v215;
      *(_OWORD *)&v254[88] = *(_OWORD *)(v180 + 104);
      *(_QWORD *)&v254[104] = v36;
      *(_QWORD *)&v255 = v37;
      *((_QWORD *)&v255 + 1) = v76;
      *(_DWORD *)v256 = v77;
      *(_OWORD *)&v256[8] = *(_OWORD *)(v180 + 152);
      *(_OWORD *)&v256[24] = *(_OWORD *)(v180 + 168);
      *(_QWORD *)&v256[40] = v218;
      v257 = *(_OWORD *)(v180 + 192);
      *(_QWORD *)&v258 = v78;
      BYTE10(v258) = v80;
      WORD4(v258) = v79;
      HIDWORD(v258) = v81;
      v91 = v208;
      v259[0] = v208;
      *(_DWORD *)&v259[4] = v220;
      *(_QWORD *)&v259[8] = v82;
      v259[16] = v246;
      *(_DWORD *)&v259[20] = v83;
      v259[24] = v84;
      _ShapeStyle_RenderedShape.bounds.getter();
      x = v283.origin.x;
      y = v283.origin.y;
      width = v283.size.width;
      height = v283.size.height;
      if (CGRectIsNull(v283))
      {
        v95 = (int64x2_t)xmmword_23529EF10;
        x = 0.0;
        y = 0.0;
        width = 0.0;
      }
      else
      {
        v95 = vdupq_n_s64(0x10000uLL);
        *(CGFloat *)v95.i64 = height;
      }
      LOBYTE(v278) = byte_254266040;
      *(CGFloat *)&v253 = x;
      *((CGFloat *)&v253 + 1) = y;
      *(CGFloat *)v254 = width;
      *(int64x2_t *)&v254[8] = v95;
      memset(&v254[24], 0, 60);
      *(_WORD *)&v254[84] = v215;
      *(_QWORD *)&v254[96] = 0;
      *(_QWORD *)&v254[88] = 0;
      *(_QWORD *)&v254[104] = v36;
      v255 = v37;
      *(_DWORD *)v256 = 0;
      *(_QWORD *)&v256[16] = 0;
      *(_QWORD *)&v256[8] = 0;
      *(_QWORD *)&v256[24] = v36;
      *(_QWORD *)&v256[32] = v37;
      *(_QWORD *)&v256[40] = v218;
      v257 = xmmword_23527E880;
      *(_QWORD *)&v258 = 0;
      BYTE10(v258) = 0;
      WORD4(v258) = 0;
      HIDWORD(v258) = 0;
      v259[0] = v208;
      *(_DWORD *)&v259[4] = v220;
      *(_QWORD *)&v259[8] = static GraphicsBlendMode.normal;
      v259[16] = byte_254266040;
      *(_DWORD *)&v259[20] = 1065353216;
      v259[24] = 0;
      if ((v222 & 8) != 0)
      {
        outlined copy of GraphicsBlendMode(static GraphicsBlendMode.normal, byte_254266040);
        LODWORD(v101) = 1.0;
        LODWORD(v102) = 1.0;
        LODWORD(v103) = 1.0;
        _ShapeStyle_RenderedShape.render(color:)(v101, v102, v103, 1.0);
        goto LABEL_48;
      }
      if (v202 == 1)
      {
        v104 = (unint64_t)v194;
        v105 = *(uint64_t (**)(id))(*(_QWORD *)v194 + 104);
        outlined copy of GraphicsBlendMode(static GraphicsBlendMode.normal, byte_254266040);
        v106 = outlined copy of _ShapeStyle_Pack.Fill(v194, v193, v190, v192, v181, v182, v183, v184, v199, v201, 1);
        v107 = v105(v106);
        v87 = v191;
        if ((v107 & 1) == 0)
        {
          _ShapeStyle_RenderedShape.render(paint:)((uint64_t)v194, v108, v109, v110);
          outlined consume of _ShapeStyle_Pack.Fill((unint64_t)v194, v193, (unint64_t)v190, v192, v181, v182, v183, v184, v199, v201, 1);
LABEL_47:
          v91 = v208;
          goto LABEL_48;
        }
      }
      else
      {
        if (!v202)
        {
          outlined copy of GraphicsBlendMode(static GraphicsBlendMode.normal, byte_254266040);
          LODWORD(v99) = HIDWORD(v194);
          LODWORD(v98) = (_DWORD)v194;
          LODWORD(v100) = v193;
          _ShapeStyle_RenderedShape.render(color:)(v98, v99, v100, *((float *)&v193 + 1));
          v91 = v208;
LABEL_48:
          _ShapeStyle_RenderedShape.background(_:)(&v253);
          v243 = v257;
          v244 = v258;
          v245[0] = *(_OWORD *)v259;
          *(_OWORD *)((char *)v245 + 9) = *(_OWORD *)&v259[9];
          v239 = v255;
          v240 = *(_OWORD *)v256;
          v241 = *(_OWORD *)&v256[16];
          v242 = *(_OWORD *)&v256[32];
          v235 = *(_OWORD *)&v254[48];
          v236 = *(_OWORD *)&v254[64];
          v237 = *(_OWORD *)&v254[80];
          v238 = *(_OWORD *)&v254[96];
          v231 = v253;
          v232 = *(_OWORD *)v254;
          v233 = *(_OWORD *)&v254[16];
          v234 = *(_OWORD *)&v254[32];
          outlined release of _ShapeStyle_RenderedShape((uint64_t)&v231);
          v96 = 0;
          v97 = v196;
          goto LABEL_49;
        }
        outlined copy of GraphicsBlendMode(static GraphicsBlendMode.normal, byte_254266040);
        v104 = (unint64_t)v194;
        outlined copy of _ShapeStyle_Pack.Fill(v194, v193, v190, v192, v181, v182, v183, v184, v199, v201, v202);
      }
      LODWORD(v108) = 1.0;
      LODWORD(v109) = 1.0;
      LODWORD(v110) = 1.0;
      _ShapeStyle_RenderedShape.render(color:)(v108, v109, v110, 1.0);
      outlined consume of _ShapeStyle_Pack.Fill(v104, v193, (unint64_t)v190, v192, v181, v182, v183, v184, v199, v201, v202);
      goto LABEL_47;
    }
    if (v202 == 1)
    {
      v50 = (unint64_t)v194;
      v179 = *(uint64_t (**)(id))(*(_QWORD *)v194 + 104);
      outlined copy of GraphicsBlendMode(static GraphicsBlendMode.normal, byte_254266040);
      v52 = v192;
      v51 = v193;
      v53 = (unint64_t)v190;
      v55 = v181;
      v54 = v182;
      v57 = v183;
      v56 = v184;
      v58 = outlined copy of _ShapeStyle_Pack.Fill(v194, v193, v190, v192, v181, v182, v183, v184, v199, v201, 1);
      if ((v179(v58) & 1) == 0)
      {
        _ShapeStyle_RenderedShape.render(paint:)((uint64_t)v194, v59, v60, v61);
        v62 = 1;
LABEL_25:
        outlined consume of _ShapeStyle_Pack.Fill(v50, v51, v53, v52, v55, v54, v57, v56, v199, v201, v62);
        goto LABEL_26;
      }
    }
    else
    {
      if (!v202)
      {
        outlined copy of GraphicsBlendMode(static GraphicsBlendMode.normal, byte_254266040);
        LODWORD(v48) = HIDWORD(v194);
        LODWORD(v47) = (_DWORD)v194;
        LODWORD(v49) = v193;
        _ShapeStyle_RenderedShape.render(color:)(v47, v48, v49, *((float *)&v193 + 1));
        goto LABEL_26;
      }
      outlined copy of GraphicsBlendMode(static GraphicsBlendMode.normal, byte_254266040);
      v51 = v193;
      v50 = (unint64_t)v194;
      v53 = (unint64_t)v190;
      v52 = v192;
      v55 = v181;
      v54 = v182;
      v57 = v183;
      v56 = v184;
      outlined copy of _ShapeStyle_Pack.Fill(v194, v193, v190, v192, v181, v182, v183, v184, v199, v201, v202);
    }
    LODWORD(v59) = 1.0;
    LODWORD(v60) = 1.0;
    LODWORD(v61) = 1.0;
    _ShapeStyle_RenderedShape.render(color:)(v59, v60, v61, 1.0);
    v62 = v202;
    goto LABEL_25;
  }
  if ((a5 & 1) == 0)
    goto LABEL_10;
  if ((*(_BYTE *)(v6 + 248) & 2) != 0)
  {
LABEL_9:
    v200 = *(_QWORD *)(a2 + 88);
    v28 = 1;
    goto LABEL_11;
  }
  v224 = *(_BYTE *)(v6 + 248);
  *a6 = 0;
  v21 = v11;
  v22 = swift_allocObject();
  v23.i64[0] = v206;
  v23.i64[1] = v205;
  *(int8x16_t *)(v22 + 16) = vorrq_s8((int8x16_t)vshll_n_s32((int32x2_t)__PAIR64__(LODWORD(v214), v207), 0x20uLL), v23);
  *(_QWORD *)(v22 + 32) = v8;
  *(_QWORD *)(v22 + 40) = v7;
  *(_QWORD *)(v22 + 48) = v9;
  *(_QWORD *)(v22 + 56) = LODWORD(v10) | (unint64_t)(v21 << 32);
  *(_OWORD *)(v22 + 64) = 0u;
  *(_OWORD *)(v22 + 80) = 0u;
  *(_OWORD *)(v22 + 96) = 0u;
  *(_OWORD *)(v22 + 112) = 0u;
  *(_DWORD *)(v22 + 128) = 0;
  *(_BYTE *)(v22 + 132) = 2;
  *(_QWORD *)&v260 = v22;
  DWORD2(v260) = 0;
  BYTE12(v260) = 9;
  _ShapeStyle_RenderedShape.addEffect(_:)((uint64_t)&v260);
  result = swift_release();
  if (v222 || v10 != 0.5)
    goto LABEL_114;
  if (v204 == 255)
  {
    outlined copy of _ShapeStyle_Pack.Fill(v194, v12, v13, v192, v15, v14, v17, v16, v18, v201, v202);
    outlined copy of GraphicsBlendMode?(v20, 0xFFu);
    v168 = one-time initialization token for normal;
    swift_bridgeObjectRetain();
    if (v168 != -1)
      swift_once();
    v223 = static GraphicsBlendMode.normal;
    v217 = byte_254266040;
    outlined copy of GraphicsBlendMode(static GraphicsBlendMode.normal, byte_254266040);
    v26 = v201;
    v25 = v202;
    v27 = -1;
  }
  else
  {
    v217 = v204 & 1;
    v25 = v202;
    v26 = v201;
    v178 = v18;
    v27 = v204;
    outlined copy of _ShapeStyle_Pack.Fill(v194, v12, v13, v192, v15, v14, v17, v16, v178, v201, v202);
    outlined copy of GraphicsBlendMode?(v20, v204);
    swift_bridgeObjectRetain();
    v223 = v20;
  }
  outlined copy of GraphicsBlendMode?(v20, v27);
  outlined consume of _ShapeStyle_Pack.Fill((unint64_t)v194, v12, (unint64_t)v13, v192, v15, v14, v17, v16, v199, v26, v25);
  outlined consume of GraphicsBlendMode?(v20, v27);
  swift_bridgeObjectRelease();
  if (one-time initialization token for normal != -1)
    swift_once();
  v169 = static GraphicsBlendMode.normal;
  v170 = byte_254266040;
  if ((v217 & 1) != 0)
  {
    if (byte_254266040)
    {
      swift_unknownObjectRetain();
      outlined consume of GraphicsBlendMode(v223, 1);
      result = outlined consume of GraphicsBlendMode(v169, 1);
      if (v223 != v169)
        goto LABEL_114;
      goto LABEL_101;
    }
    swift_unknownObjectRetain();
LABEL_113:
    outlined copy of GraphicsBlendMode(v169, v170);
    outlined consume of GraphicsBlendMode(v223, v217);
    outlined consume of GraphicsBlendMode(v169, v170);
    result = outlined consume of GraphicsBlendMode(v223, v217);
    goto LABEL_114;
  }
  if ((byte_254266040 & 1) != 0)
    goto LABEL_113;
  outlined consume of GraphicsBlendMode(v223, 0);
  result = outlined consume of GraphicsBlendMode(v169, 0);
  if ((_DWORD)v223 != (_DWORD)v169)
    goto LABEL_114;
LABEL_101:
  v171 = *(_DWORD *)(v180 + 96);
  v172 = (v171 >> 21) & 7;
  if (!v172)
    return result;
  if (v172 != 4)
  {
LABEL_114:
    v177 = v224;
    if ((v224 & 1) != 0)
      return result;
LABEL_115:
    *(_BYTE *)(v180 + 248) = v177 | 1;
    return result;
  }
  v173 = vorrq_s8(vorrq_s8(vorrq_s8(*(int8x16_t *)(v180 + 32), *(int8x16_t *)(v180 + 64)), vorrq_s8(*(int8x16_t *)(v180 + 48), *(int8x16_t *)(v180 + 80))), vorrq_s8(*(int8x16_t *)v180, *(int8x16_t *)(v180 + 16)));
  v174 = vorr_s8(*(int8x8_t *)v173.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v173, v173, 8uLL));
  v176 = v171 == 0x800000 && *(_QWORD *)&v174 == 0;
  v177 = v224;
  if ((v224 & 1) == 0 && !v176)
    goto LABEL_115;
  return result;
}

uint64_t push #1 (layers:above:) in _ShapeStyle_RenderedShape.render(style:)(uint64_t *a1, char a2, uint64_t a3)
{
  uint64_t result;
  _QWORD *v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  _OWORD v10[2];
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  __int16 v14;
  char v15;
  int v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  __int16 v22;
  char v23;
  int v24;

  result = *a1;
  if (*(_QWORD *)(result + 16))
  {
    v6 = (_QWORD *)swift_bridgeObjectRetain();
    DisplayList.init(_:)(v6, (uint64_t)v10);
    v7 = *(_QWORD *)(a3 + 184);
    v8 = *(_OWORD *)(a3 + 120);
    v17 = *(_OWORD *)(a3 + 104);
    v18 = v8;
    v19 = v7;
    v20 = xmmword_23527E870;
    v21 = *(_QWORD *)&v10[0];
    v23 = BYTE10(v10[0]);
    v22 = WORD4(v10[0]);
    v24 = 0;
    LOBYTE(v10[0]) = *(_BYTE *)(a3 + 224);
    DisplayList.Item.canonicalize(options:)((char *)v10);
    v9 = v20;
    v10[0] = v17;
    v10[1] = v18;
    v11 = v19;
    v12 = v20;
    v13 = v21;
    v15 = v23;
    v14 = v22;
    v16 = v24;
    DisplayList.Item.composite(_:above:)((uint64_t)v10, a2 & 1);
    return outlined consume of DisplayList.Item.Value(v9, *((unint64_t *)&v9 + 1));
  }
  return result;
}

uint64_t CompositedItemAccumulator.commitPendingItems()()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t *v5;
  uint64_t *v6;
  _QWORD *v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  char v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  int v16;
  int v17;
  unsigned __int8 v18;
  uint64_t v19;
  unsigned __int16 v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  int v29;
  int v30;
  _QWORD *v31;
  unint64_t v32;
  unint64_t v33;
  _QWORD *v34;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v36;
  unsigned __int16 v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  __int128 v42;
  uint64_t v43;
  __int128 v44;
  uint64_t v45;
  __int16 v46;
  char v47;
  int v48;
  unsigned __int16 v49;
  __int128 v50;
  __int128 v51;
  uint64_t v52;
  __int128 v53;
  uint64_t v54;
  unsigned __int16 v55;
  unsigned __int8 v56;
  int v57;

  v5 = v0 + 3;
  result = v0[3];
  if (!*(_QWORD *)(result + 16))
    return result;
  v6 = v0;
  v7 = (_QWORD *)swift_bridgeObjectRetain();
  DisplayList.init(_:)(v7, (uint64_t)&v40);
  v8 = *v5;
  if (*(_QWORD *)(*v5 + 16))
  {
    v39 = v0 + 3;
    v2 = *v0;
    v9 = *(_OWORD *)(v8 + 48);
    v50 = *(_OWORD *)(v8 + 32);
    v51 = v9;
    v52 = v2;
    v53 = xmmword_23527E870;
    v54 = v40;
    v56 = BYTE2(v41);
    v55 = v41;
    v57 = 0;
    LOBYTE(v40) = *((_BYTE *)v0 + 10);
    DisplayList.Item.canonicalize(options:)((char *)&v40);
    LOWORD(v40) = *((_WORD *)v0 + 4);
    DisplayList.Item.addDrawingGroup(contentSeed:)((unsigned __int16 *)&v40);
    v1 = v0[4];
    v3 = *((unsigned __int8 *)v0 + 40);
    outlined copy of GraphicsBlendMode(v1, *((_BYTE *)v0 + 40));
    if (one-time initialization token for normal == -1)
      goto LABEL_4;
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_4:
  v10 = static GraphicsBlendMode.normal;
  v11 = byte_254266040;
  if ((v3 & 1) == 0)
  {
    if ((byte_254266040 & 1) == 0)
    {
      outlined consume of GraphicsBlendMode(v1, 0);
      outlined consume of GraphicsBlendMode(v10, 0);
      if ((_DWORD)v1 == (_DWORD)v10)
        goto LABEL_20;
LABEL_13:
      v12 = v51;
      v13 = v52;
      v15 = v53;
      v14 = v54;
      v16 = v55 | (v56 << 16);
      v17 = v57;
      if (*((_QWORD *)&v53 + 1) >> 62 != 3
        || (v16 & 0xFFFFFF) != 0
        || *((_QWORD *)&v53 + 1) != 0xC000000000000000
        || v54 | (unint64_t)v53)
      {
        type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<DisplayList.Item>, (uint64_t)&type metadata for DisplayList.Item, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
        v22 = swift_allocObject();
        v23 = v3;
        v38 = v3;
        v21 = v22;
        *(_OWORD *)(v22 + 16) = xmmword_23527E860;
        *(_QWORD *)(v22 + 32) = 0;
        *(_QWORD *)(v22 + 40) = 0;
        *(_OWORD *)(v22 + 48) = v12;
        *(_QWORD *)(v22 + 64) = v13;
        *(_OWORD *)(v22 + 72) = v15;
        *(_QWORD *)(v22 + 88) = v14;
        *(_BYTE *)(v22 + 98) = BYTE2(v16);
        *(_WORD *)(v22 + 96) = v16;
        *(_DWORD *)(v22 + 100) = v17;
        v40 = 0;
        v41 = 0;
        v42 = v12;
        v43 = v13;
        v44 = v15;
        v45 = v14;
        v47 = BYTE2(v16);
        v46 = v16;
        v48 = v17;
        outlined copy of GraphicsBlendMode(v1, v23);
        outlined copy of DisplayList.Item.Value(v15, *((unint64_t *)&v15 + 1));
        DisplayList.Item.features.getter();
        v37 = v49;
        v40 = 0;
        v41 = 0;
        v42 = v12;
        v43 = v13;
        v44 = v15;
        v45 = v14;
        v47 = BYTE2(v16);
        v46 = v16;
        v48 = v17;
        DisplayList.Item.properties.getter();
        outlined consume of DisplayList.Item.Value(v15, *((unint64_t *)&v15 + 1));
        v19 = v38;
        v20 = v37;
        v18 = v49;
      }
      else
      {
        outlined copy of GraphicsBlendMode(v1, v3);
        v18 = 0;
        v19 = v3;
        v20 = 0;
        v21 = MEMORY[0x24BEE4AF8];
      }
      v52 = v2;
      *(_QWORD *)&v53 = v1;
      *((_QWORD *)&v53 + 1) = v19 | 0x4000000500000000;
      v54 = v21;
      v56 = v18;
      v55 = v20;
      v57 = 0;
      goto LABEL_20;
    }
LABEL_12:
    outlined copy of GraphicsBlendMode(v10, v11);
    outlined consume of GraphicsBlendMode(v1, v3);
    outlined consume of GraphicsBlendMode(v10, v11);
    outlined consume of GraphicsBlendMode(v1, v3);
    goto LABEL_13;
  }
  if (!byte_254266040)
  {
    swift_unknownObjectRetain();
    goto LABEL_12;
  }
  swift_unknownObjectRetain();
  outlined consume of GraphicsBlendMode(v1, 1);
  outlined consume of GraphicsBlendMode(v10, 1);
  if (v1 != v10)
    goto LABEL_13;
LABEL_20:
  v24 = v50;
  v25 = v51;
  v26 = v52;
  v28 = v53;
  v27 = v54;
  v29 = v55 | (v56 << 16);
  v30 = v57;
  v31 = (_QWORD *)v6[2];
  outlined copy of DisplayList.Item.Value(v53, *((unint64_t *)&v53 + 1));
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v31 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v31[2] + 1, 1, v31);
  v33 = v31[2];
  v32 = v31[3];
  if (v33 >= v32 >> 1)
    v31 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v32 > 1), v33 + 1, 1, v31);
  v31[2] = v33 + 1;
  v34 = &v31[9 * v33];
  *((_OWORD *)v34 + 2) = v24;
  *((_OWORD *)v34 + 3) = v25;
  v34[8] = v26;
  *(_OWORD *)(v34 + 9) = v28;
  v34[11] = v27;
  *((_BYTE *)v34 + 98) = BYTE2(v29);
  *((_WORD *)v34 + 48) = v29;
  *((_DWORD *)v34 + 25) = v30;
  v6[2] = (uint64_t)v31;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v36 = v6[3];
  if (isUniquelyReferenced_nonNull_native)
  {
    specialized Array.replaceSubrange<A>(_:with:)(0, *(_QWORD *)(v36 + 16));
  }
  else
  {
    *v39 = specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(0, *(_QWORD *)(v36 + 24) >> 1);
    swift_bridgeObjectRelease();
  }
  return outlined consume of DisplayList.Item.Value(v53, *((unint64_t *)&v53 + 1));
}

void _ShapeStyle_RenderedShape.bounds.getter()
{
  uint64_t v0;

  if (((*(_DWORD *)(v0 + 96) >> 21) & 7) == 0)
    __asm { BR              X10 }
}

void sub_234D7DB94()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  JUMPOUT(0x234D7DBDCLL);
}

uint64_t CompositedItemAccumulator.add(item:blend:)(__int128 *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  char v12;
  _QWORD *v13;
  unint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  uint64_t result;
  char v18;
  uint64_t v19;
  char v20;
  BOOL v21;
  char v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;

  v24 = a1[1];
  v25 = *a1;
  v3 = *((_QWORD *)a1 + 5);
  v23 = *((_QWORD *)a1 + 4);
  v5 = *((_QWORD *)a1 + 6);
  v4 = *((_QWORD *)a1 + 7);
  v6 = *((unsigned __int16 *)a1 + 32) | (*((unsigned __int8 *)a1 + 66) << 16);
  v7 = *(_QWORD *)a2;
  v8 = *(_BYTE *)(a2 + 8);
  if (!*(_QWORD *)(*(_QWORD *)(v2 + 24) + 16))
    goto LABEL_11;
  v9 = *(_QWORD *)(v2 + 32);
  v10 = *(_BYTE *)(v2 + 40);
  if ((v10 & 1) != 0)
  {
    if (*(_BYTE *)(a2 + 8))
    {
      outlined copy of GraphicsBlendMode(*(_QWORD *)a2, 1);
      outlined copy of GraphicsBlendMode(v9, 1);
      outlined consume of GraphicsBlendMode(v9, 1);
      outlined consume of GraphicsBlendMode(v7, 1);
      if (v9 == v7)
        goto LABEL_12;
LABEL_11:
      CompositedItemAccumulator.commitPendingItems()();
      v11 = *(_QWORD *)(v2 + 32);
      v12 = *(_BYTE *)(v2 + 40);
      outlined copy of GraphicsBlendMode(v7, v8);
      outlined consume of GraphicsBlendMode(v11, v12);
      *(_QWORD *)(v2 + 32) = v7;
      *(_BYTE *)(v2 + 40) = v8;
      goto LABEL_12;
    }
    swift_unknownObjectRetain_n();
LABEL_10:
    outlined copy of GraphicsBlendMode(v7, v8);
    outlined consume of GraphicsBlendMode(v9, v10);
    outlined consume of GraphicsBlendMode(v7, v8);
    outlined consume of GraphicsBlendMode(v9, v10);
    goto LABEL_11;
  }
  if ((*(_BYTE *)(a2 + 8) & 1) != 0)
    goto LABEL_10;
  outlined consume of GraphicsBlendMode(*(_QWORD *)(v2 + 32), 0);
  outlined consume of GraphicsBlendMode(v7, 0);
  if ((_DWORD)v9 != (_DWORD)v7)
    goto LABEL_11;
LABEL_12:
  v13 = *(_QWORD **)(v2 + 24);
  outlined copy of DisplayList.Item.Value(v3, v5);
  outlined copy of DisplayList.Item.Value(v3, v5);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v13 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v13[2] + 1, 1, v13);
  v15 = v13[2];
  v14 = v13[3];
  if (v15 >= v14 >> 1)
    v13 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v14 > 1), v15 + 1, 1, v13);
  v13[2] = v15 + 1;
  v16 = &v13[9 * v15];
  *((_OWORD *)v16 + 2) = v25;
  *((_OWORD *)v16 + 3) = v24;
  v16[8] = v23;
  v16[9] = v3;
  v16[10] = v5;
  v16[11] = v4;
  *((_BYTE *)v16 + 98) = BYTE2(v6);
  *((_WORD *)v16 + 48) = v6;
  *((_DWORD *)v16 + 25) = 0;
  *(_QWORD *)(v2 + 24) = v13;
  if (*(_BYTE *)(v2 + 41) != 1)
  {
    if (one-time initialization token for normal != -1)
      swift_once();
    v19 = static GraphicsBlendMode.normal;
    v20 = byte_254266040;
    if ((v8 & 1) != 0)
    {
      if ((byte_254266040 & 1) != 0)
      {
        outlined copy of GraphicsBlendMode(v7, 1);
        outlined copy of GraphicsBlendMode(v19, 1);
        outlined consume of GraphicsBlendMode(v7, 1);
        outlined consume of GraphicsBlendMode(v19, 1);
        result = outlined consume of DisplayList.Item.Value(v3, v5);
        v21 = v7 == v19;
        goto LABEL_25;
      }
      swift_unknownObjectRetain();
    }
    else if ((byte_254266040 & 1) == 0)
    {
      outlined consume of GraphicsBlendMode(v7, 0);
      outlined consume of GraphicsBlendMode(v19, 0);
      result = outlined consume of DisplayList.Item.Value(v3, v5);
      v21 = (_DWORD)v7 == (_DWORD)v19;
LABEL_25:
      v22 = v21;
      goto LABEL_30;
    }
    outlined copy of GraphicsBlendMode(v19, v20);
    outlined consume of GraphicsBlendMode(v7, v8);
    outlined consume of GraphicsBlendMode(v19, v20);
    result = outlined consume of DisplayList.Item.Value(v3, v5);
    v22 = 0;
LABEL_30:
    v18 = v22 ^ 1;
    goto LABEL_31;
  }
  result = outlined consume of DisplayList.Item.Value(v3, v5);
  v18 = 1;
LABEL_31:
  *(_BYTE *)(v2 + 41) = v18;
  return result;
}

float closure #1 in _ShapeStyle_RenderedShape.renderVectorGlyph(_:size:orientation:name:styles:layers:)(unsigned int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  unsigned __int8 v16;
  int v17;
  uint64_t v18;
  unsigned __int8 v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  unint64_t v23;
  float v24;
  float v25;
  char v26;
  float v27;
  float v28;
  __int128 v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  __int128 v35;
  int v36;
  float v37;
  char v38;
  char v39;
  float v40;
  float v41;
  float v42;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unsigned __int8 v47;
  uint64_t v48;
  void *v49;
  unsigned __int8 v50;
  uint64_t v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  unsigned __int8 v57;
  int v58;
  uint64_t v59;
  unsigned __int8 v60;
  uint64_t v61;

  v5 = a1;
  switch(a1)
  {
    case 0u:
      goto LABEL_6;
    case 5u:
      v5 = 1;
      goto LABEL_6;
    case 6u:
      v5 = 2;
      goto LABEL_6;
    case 7u:
      v5 = 3;
      goto LABEL_6;
    case 8u:
      v5 = 4;
LABEL_6:
      v6 = *(_QWORD *)(a4 + 16);
      v7 = *(_QWORD *)(a4 + 24) >> 1;
      v8 = v7 - v6;
      if (__OFSUB__(v7, v6))
      {
        __break(1u);
        goto LABEL_46;
      }
      v9 = *(unsigned __int8 *)(a4 + 32);
      v10 = __OFADD__(v9, v8);
      v11 = v9 + v8;
      if (v10)
      {
LABEL_46:
        __break(1u);
        goto LABEL_47;
      }
      if (v11 == v9)
        return *MEMORY[0x24BE7EF90];
      if (v11 < v9)
      {
LABEL_47:
        __break(1u);
        goto LABEL_48;
      }
      v12 = v11 + ~v9;
      if (v12 < v5)
        v5 = v12;
      v13 = v5 - v9;
      if (v13 < v6 || v13 >= v7)
      {
LABEL_48:
        __break(1u);
        JUMPOUT(0x234D7E3F4);
      }
      v15 = *(_QWORD *)(a4 + 8) + 120 * v13;
      v16 = *(_BYTE *)(v15 + 88);
      v17 = *(_DWORD *)(v15 + 92);
      v18 = *(_QWORD *)(v15 + 96);
      v19 = *(_BYTE *)(v15 + 104);
      v20 = *(_QWORD *)(v15 + 112);
      v21 = *(_OWORD *)(v15 + 24);
      v52 = *(_OWORD *)(v15 + 8);
      v53 = v21;
      v22 = *(_OWORD *)(v15 + 56);
      v54 = *(_OWORD *)(v15 + 40);
      v55 = v22;
      v56 = *(_OWORD *)(v15 + 72);
      v57 = v16;
      v58 = v17;
      v59 = v18;
      v60 = v19;
      v61 = v20;
      v23 = (unint64_t)_ShapeStyle_Pack.Style.color.getter();
      v25 = v24;
      if ((v26 & 1) != 0)
        return *MEMORY[0x24BE7EF90];
LABEL_18:
      v27 = -*(float *)&v23;
      if (*(float *)&v23 > 0.0)
        v27 = *(float *)&v23;
      if (v27 <= 0.0031308)
      {
        v28 = v27 * 12.92;
      }
      else
      {
        v28 = 1.0;
        if (v27 != 1.0)
          v28 = (float)(powf(v27, 0.41667) * 1.055) + -0.055;
      }
      if (*(float *)&v23 <= 0.0)
        v40 = -v28;
      else
        v40 = v28;
      v41 = -*((float *)&v23 + 1);
      if (*((float *)&v23 + 1) > 0.0)
        v41 = *((float *)&v23 + 1);
      if (v41 > 0.0031308 && v41 != 1.0)
        powf(v41, 0.41667);
      v42 = -v25;
      if (v25 > 0.0)
        v42 = v25;
      if (v42 > 0.0031308 && v42 != 1.0)
        powf(v42, 0.41667);
      return v40;
    case 9u:
      if (!a3)
        return *MEMORY[0x24BE7EF90];
      v51 = a5;
      v50 = 2;
      swift_bridgeObjectRetain();
      _ShapeStyle_Pack.subscript.getter(&v50, 0, (uint64_t)&v52);
      v31 = v52;
      v32 = (void *)*((_QWORD *)&v53 + 1);
      v33 = v54;
      v45 = v53;
      v46 = *((_QWORD *)&v54 + 1);
      v34 = *((_QWORD *)&v55 + 1);
      v44 = v55;
      v35 = v56;
      v36 = v57;
      v48 = v59;
      v47 = v60;
      outlined copy of _ShapeStyle_Pack.Fill((id)v52, *((uint64_t *)&v52 + 1), (void *)v53, *((void **)&v53 + 1), v54, *((uint64_t *)&v54 + 1), v55, *((uint64_t *)&v55 + 1), v56, *((uint64_t *)&v56 + 1), v57);
      v49 = v32;
      outlined consume of _ShapeStyle_Pack.Fill(v31, *((uint64_t *)&v31 + 1), v45, v32, v33, v46, v44, v34, v35, *((uint64_t *)&v35 + 1), v36);
      outlined consume of GraphicsBlendMode?(v48, v47);
      swift_bridgeObjectRelease();
      if (v36 == 6)
      {
        v52 = v31;
        LOWORD(v53) = v45 & 0x101;
        BYTE2(v53) = BYTE2(v45) & 1;
        *((_QWORD *)&v53 + 1) = v32;
        v23 = ResolvedMulticolorStyle.resolve(name:)(a2, a3);
        v25 = v37;
        v39 = v38;
        outlined consume of _ShapeStyle_Pack.Fill(v31, *((uint64_t *)&v31 + 1), v45, v49, v33, v46, v44, v34, v35, *((uint64_t *)&v35 + 1), 6);
        swift_bridgeObjectRelease();
        if ((v39 & 1) == 0)
          goto LABEL_18;
      }
      else
      {
        outlined consume of _ShapeStyle_Pack.Fill(v31, *((uint64_t *)&v31 + 1), v45, v32, v33, v46, v44, v34, v35, *((uint64_t *)&v35 + 1), v36);
        swift_bridgeObjectRelease();
      }
      return *MEMORY[0x24BE7EF90];
    default:
      return *MEMORY[0x24BE7EF90];
  }
}

float thunk for @escaping @callee_guaranteed (@unowned RBSymbolStyle, @guaranteed String?) -> (@unowned RBColor)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  float (*v4)(uint64_t, uint64_t, uint64_t);
  uint64_t v5;
  uint64_t v6;
  float v7;

  v4 = *(float (**)(uint64_t, uint64_t, uint64_t))(a1 + 32);
  if (a3)
  {
    a3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v6 = v5;
  }
  else
  {
    v6 = 0;
  }
  v7 = v4(a2, a3, v6);
  swift_bridgeObjectRelease();
  return v7;
}

uint64_t specialized drawStyled #1 (list:id:style:keyColor:) in _ShapeStyle_RenderedShape.renderKeyedText(_:style:name:layers:)(uint64_t a1, uint64_t *a2, uint64_t *a3, id a4, uint64_t a5, int *a6, int a7, int a8, float a9, float a10, float a11, float a12, float a13, float a14, float a15, float a16, uint64_t a17, uint64_t a18)
{
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  id v50;
  int v51;
  double x;
  double y;
  double width;
  double height;
  _BOOL4 IsNull;
  double v57;
  double v58;
  double v59;
  double v60;
  double v61;
  double v62;
  CGFloat v63;
  CGFloat v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unsigned int v72;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char v77;
  char v78;
  uint64_t v79;
  unint64_t v80;
  unsigned int v81;
  __int128 v82;
  char v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  __int128 v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  _QWORD v112[2];
  char v113;
  _OWORD v114[6];
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  _OWORD v123[3];
  CGRect v124;
  CGRect v125;

  v85 = a2[1];
  v87 = *a2;
  v83 = *((_BYTE *)a2 + 16);
  v30 = *a3;
  v31 = a3[1];
  v75 = v31;
  v76 = *a3;
  v32 = a3[2];
  v74 = v32;
  v97 = a3[4];
  v98 = a3[3];
  v95 = a3[6];
  v96 = a3[5];
  v93 = a3[8];
  v94 = a3[7];
  v33 = *((unsigned __int8 *)a3 + 80);
  v81 = *((_DWORD *)a3 + 21);
  v91 = a3[11];
  v92 = a3[9];
  v34 = *((unsigned __int8 *)a3 + 96);
  v77 = *((_BYTE *)a3 + 96);
  v78 = *((_BYTE *)a3 + 80);
  v90 = a3[13];
  objc_msgSend(a4, sel_removeAll);
  *(float *)&v35 = a9;
  *(float *)&v36 = a10;
  *(float *)&v37 = a11;
  *(float *)&v38 = a12;
  *(float *)&v39 = a13;
  *(float *)&v40 = a14;
  *(float *)&v41 = a15;
  *(float *)&v42 = a16;
  objc_msgSend(a4, sel_addColorReplacementFrom_to_colorSpace_, 2, v35, v36, v37, v38, v39, v40, v41, v42);
  v43 = *(_OWORD *)(a5 + 208);
  v121 = *(_OWORD *)(a5 + 192);
  v122 = v43;
  v123[0] = *(_OWORD *)(a5 + 224);
  *(_OWORD *)((char *)v123 + 9) = *(_OWORD *)(a5 + 233);
  v44 = *(_OWORD *)(a5 + 144);
  v117 = *(_OWORD *)(a5 + 128);
  v118 = v44;
  v45 = *(_OWORD *)(a5 + 176);
  v119 = *(_OWORD *)(a5 + 160);
  v120 = v45;
  v46 = *(_OWORD *)(a5 + 80);
  v114[4] = *(_OWORD *)(a5 + 64);
  v114[5] = v46;
  v47 = *(_OWORD *)(a5 + 112);
  v115 = *(_OWORD *)(a5 + 96);
  v116 = v47;
  v48 = *(_OWORD *)(a5 + 16);
  v114[0] = *(_OWORD *)a5;
  v114[1] = v48;
  v49 = *(_OWORD *)(a5 + 48);
  v114[2] = *(_OWORD *)(a5 + 32);
  v114[3] = v49;
  outlined retain of _ShapeStyle_RenderedShape((uint64_t)v114);
  v50 = objc_msgSend(a4, sel_copyApplyingToDisplayList_, a1);
  swift_beginAccess();
  v51 = *a6;
  objc_msgSend(v50, sel_boundingRect);
  x = v124.origin.x;
  y = v124.origin.y;
  width = v124.size.width;
  height = v124.size.height;
  IsNull = CGRectIsNull(v124);
  v57 = 0.0;
  if (IsNull)
    v58 = 0.0;
  else
    v58 = x;
  if (IsNull)
    v59 = 0.0;
  else
    v59 = y;
  if (IsNull)
    v60 = 0.0;
  else
    v60 = width;
  if (!IsNull)
    v57 = height;
  v80 = WORD2(v115);
  v79 = *((_QWORD *)&v120 + 1);
  v125 = CGRectIntegral(*(CGRect *)(&v57 - 3));
  v61 = v125.origin.x;
  v62 = v125.origin.y;
  v63 = v125.size.width;
  v64 = v125.size.height;
  v65 = swift_allocObject();
  *(_QWORD *)(v65 + 16) = v50;
  *(double *)(v65 + 24) = v61;
  *(double *)(v65 + 32) = v62;
  *(_BYTE *)(v65 + 40) = 0;
  *(_DWORD *)(v65 + 44) = 0;
  *(_BYTE *)(v65 + 48) = 1;
  *(_DWORD *)(v65 + 52) = v51 | 0xE0;
  *(_BYTE *)(v65 + 56) = 3;
  outlined release of _ShapeStyle_RenderedShape((uint64_t)v114);
  v112[0] = v87;
  v112[1] = v85;
  v113 = v83;
  *(_QWORD *)&v99 = v30;
  *((_QWORD *)&v99 + 1) = v31;
  v100 = v32;
  v101 = v98;
  v102 = v97;
  v103 = v96;
  v104 = v95;
  v105 = v94;
  v106 = v93;
  v107 = v92;
  v108 = v33 | ((unint64_t)v81 << 32);
  v109 = v91;
  v110 = v34;
  v111 = v90;
  _ShapeStyle_RenderedLayers.beginLayer(id:style:shape:)((uint64_t)v112, &v99, a5);
  v66 = *(_QWORD *)(a5 + 8);
  v67 = *(_QWORD *)(a5 + 16);
  v68 = *(_QWORD *)(a5 + 24);
  v69 = *(_QWORD *)(a5 + 32);
  v88 = *(_QWORD *)(a5 + 40);
  v89 = *(_QWORD *)a5;
  v84 = *(_QWORD *)(a5 + 56);
  v86 = *(_QWORD *)(a5 + 48);
  v82 = *(_OWORD *)(a5 + 64);
  v70 = *(_QWORD *)(a5 + 80);
  v71 = *(_QWORD *)(a5 + 88);
  v72 = *(_DWORD *)(a5 + 96);
  *(double *)a5 = v61 + *(double *)&a17;
  *(double *)(a5 + 8) = v62 + *(double *)&a18;
  *(CGFloat *)(a5 + 16) = v63;
  *(CGFloat *)(a5 + 24) = v64;
  *(_QWORD *)(a5 + 32) = v79;
  *(_QWORD *)(a5 + 40) = v65 | 0xA000000000000000;
  *(_QWORD *)(a5 + 48) = v80;
  *(_OWORD *)(a5 + 56) = 0u;
  *(_OWORD *)(a5 + 72) = 0u;
  *(_QWORD *)(a5 + 88) = 0;
  *(_DWORD *)(a5 + 96) = 6291456;
  outlined copy of DisplayList.Item.Value(v65 | 0xA000000000000000, v80);
  outlined consume of _ShapeStyle_RenderedShape.Shape(v89, v66, v67, v68, v69, v88, v86, v84, v82, *((uint64_t *)&v82 + 1), v70, v71, v72);
  *(_QWORD *)&v99 = v76;
  *((_QWORD *)&v99 + 1) = v75;
  v100 = v74;
  v101 = v98;
  v102 = v97;
  v103 = v96;
  v104 = v95;
  v105 = v94;
  v106 = v93;
  v107 = v92;
  LOBYTE(v108) = v78;
  HIDWORD(v108) = v81;
  v109 = v91;
  LOBYTE(v110) = v77;
  v111 = v90;
  _ShapeStyle_RenderedShape.render(style:)((uint64_t)&v99);
  _ShapeStyle_RenderedLayers.endLayer(shape:)(a5);
  return swift_release();
}

uint64_t _ShapeStyle_InterpolatorGroup.addLayer(id:style:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v3;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  char v20;
  char v21;
  _QWORD *v22;
  char v23;
  _QWORD *v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t result;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void *v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  _OWORD *v69;
  void *v70;
  void *v71;
  uint64_t v72;
  uint64_t v73;
  char v74;
  uint64_t v75;
  int v76;
  void *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t *v81;
  void *v82;
  uint64_t v83;
  void *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  int v88;
  char v89;
  __int16 v90;
  char v91;
  __int16 v92;
  char v93;
  __int128 v94;
  void *v95;
  void *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  int v108;

  v85 = *(_QWORD *)a1;
  v74 = *(_BYTE *)(a1 + 16);
  v5 = *(void **)a2;
  v6 = *(_QWORD *)(a2 + 8);
  v75 = *(_QWORD *)(a1 + 8);
  v77 = *(void **)(a2 + 16);
  v71 = *(void **)(a2 + 24);
  v72 = *(_QWORD *)(a2 + 32);
  v7 = *(_QWORD *)(a2 + 56);
  v64 = *(_QWORD *)(a2 + 48);
  v8 = *(_QWORD *)(a2 + 64);
  v9 = *(_QWORD *)(a2 + 72);
  v10 = *(_QWORD *)(a2 + 88);
  v78 = *(_QWORD *)(a2 + 40);
  v79 = *(_QWORD *)(a2 + 80);
  v11 = *(_QWORD *)(a2 + 104);
  v12 = *(int *)(v3 + 60);
  v81 = (uint64_t *)(v3 + 24);
  v83 = *(_QWORD *)(a2 + 96);
  swift_beginAccess();
  v13 = *(_QWORD *)(v3 + 24);
  v14 = *(_QWORD *)(v13 + 16);
  ++*(_DWORD *)(v3 + 60);
  v68 = v3;
  v69 = a3;
  v73 = v10;
  v66 = v8;
  v67 = v9;
  v65 = v7;
  v70 = v5;
  if (v14 <= v12)
  {
    v62 = *(_DWORD *)(v3 + 56);
    *(_DWORD *)(v3 + 56) = v62 + 1;
    v63 = v6;
    v38 = v6;
    v6 = (uint64_t)v71;
    v12 = v72;
    outlined copy of _ShapeStyle_Pack.Style?(v5, v38, v77, v71, v72, v78, v64, v7, v8, v9, v79, v10, v83, v11);
    v9 = v75;
    LOBYTE(v5) = v74;
    outlined copy of _ShapeStyle_LayerID(v85, v75, v74);
    v16 = v64;
    v15 = v11;
    if (one-time initialization token for infinity == -1)
    {
LABEL_11:
      v39 = static Time.infinity;
      swift_beginAccess();
      v40 = (_QWORD *)*v81;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *v81 = (uint64_t)v40;
      v42 = v9;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        v40 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v40[2] + 1, 1, v40);
        *v81 = (uint64_t)v40;
      }
      v44 = v40[2];
      v43 = v40[3];
      v45 = v85;
      if (v44 >= v43 >> 1)
      {
        v40 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v43 > 1), v44 + 1, 1, v40);
        v45 = v85;
        *v81 = (uint64_t)v40;
      }
      v40[2] = v44 + 1;
      v46 = &v40[28 * v44];
      v46[4] = v45;
      v46[5] = v42;
      *((_BYTE *)v46 + 48) = (_BYTE)v5;
      *(_WORD *)((char *)v46 + 49) = v92;
      *((_BYTE *)v46 + 51) = v93;
      *((_DWORD *)v46 + 13) = v62;
      v46[7] = v70;
      v46[8] = v63;
      v46[9] = v77;
      v46[10] = v6;
      v46[11] = v12;
      v46[12] = v78;
      v46[13] = v16;
      v46[14] = v65;
      v46[15] = v8;
      v46[16] = v67;
      v46[17] = v79;
      v46[18] = v73;
      v46[19] = v83;
      v46[20] = v15;
      v47 = MEMORY[0x24BEE4AF8];
      v46[21] = MEMORY[0x24BEE4AF8];
      *((_WORD *)v46 + 88) = 0;
      *((_BYTE *)v46 + 178) = 0;
      *(_DWORD *)((char *)v46 + 179) = v88;
      *((_BYTE *)v46 + 183) = v89;
      v46[23] = 0;
      v46[24] = 0;
      v46[25] = 0;
      v46[26] = v39;
      *((_DWORD *)v46 + 54) = 0;
      *((_BYTE *)v46 + 220) = 1;
      *((_BYTE *)v46 + 223) = v91;
      *(_WORD *)((char *)v46 + 221) = v90;
      v46[29] = 0;
      v46[30] = 0;
      v46[28] = v47;
      *(_QWORD *)((char *)v46 + 245) = 0;
      swift_endAccess();
      *(_QWORD *)&v94 = v68;
      DWORD2(v94) = v62;
      _s7SwiftUI29_ShapeStyle_InterpolatorGroupC14AddLayerResult33_3890C65F12EA82A4BC5FBD33046B67FALLOWOi_((uint64_t)&v94);
      outlined init with take of _ShapeStyle_InterpolatorGroup.AddLayerResult(&v94, v69);
      return swift_retain();
    }
LABEL_22:
    swift_once();
    goto LABEL_11;
  }
  v15 = v83;
  v16 = v85;
  v63 = v11;
  if ((v12 & 0x80000000) != 0)
  {
    __break(1u);
    goto LABEL_21;
  }
  if (*(_QWORD *)(v13 + 16) <= v12)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  v17 = 28 * v12;
  v18 = v13 + 224 * v12;
  LODWORD(v19) = *(_DWORD *)(v18 + 52);
  v20 = *(_BYTE *)(v18 + 48);
  v94 = *(_OWORD *)(v18 + 32);
  LOBYTE(v95) = v20;
  swift_retain();
  specialized static _ShapeStyle_LayerID.== infix(_:_:)((uint64_t)&v94);
  if ((v21 & 1) != 0)
  {
    v86 = v12;
    v76 = (int)v19;
    swift_beginAccess();
    v19 = (_QWORD *)*v81;
    v12 = v9;
    v22 = (_QWORD *)v65;
    outlined copy of _ShapeStyle_Pack.Style?(v70, v6, v77, v71, v72, v78, v64, v65, v66, v9, v79, v73, v83, v11);
    v23 = swift_isUniquelyReferenced_nonNull_native();
    *v81 = (uint64_t)v19;
    if ((v23 & 1) == 0)
    {
      v19 = specialized _ArrayBuffer._consumeAndCreateNew()(v19);
      *v81 = (uint64_t)v19;
    }
    if (v19[2] <= v86)
    {
      __break(1u);
    }
    else
    {
      v24 = &v19[v17];
      v25 = v19[v17 + 7];
      v26 = v19[v17 + 8];
      v27 = v19[v17 + 9];
      v28 = (void *)v19[v17 + 10];
      v29 = v19[v17 + 11];
      v30 = v19[v17 + 12];
      v31 = v19[v17 + 13];
      v32 = v19[v17 + 14];
      v33 = *(_OWORD *)&v19[v17 + 15];
      v34 = *(_OWORD *)&v19[v17 + 17];
      v35 = v19[v17 + 19];
      v36 = v19[v17 + 20];
      v24[7] = v70;
      v24[8] = v6;
      v24[9] = v77;
      v24[10] = v71;
      v24[11] = v72;
      v24[12] = v78;
      v24[13] = v64;
      v24[14] = v65;
      v24[15] = v66;
      v24[16] = v9;
      v24[17] = v79;
      v24[18] = v73;
      v24[19] = v83;
      v24[20] = v11;
      outlined consume of _ShapeStyle_Pack.Style?(v25, v26, v27, v28, v29, v30, v31, v32, v33, *((uint64_t *)&v33 + 1), v34, *((uint64_t *)&v34 + 1), v35, v36);
      if (*(_QWORD *)(*v81 + 16) > v86)
      {
        *(_BYTE *)(*v81 + v17 * 8 + 252) = 0;
        swift_endAccess();
        *(_QWORD *)&v94 = v68;
        DWORD2(v94) = v76;
        _s7SwiftUI29_ShapeStyle_InterpolatorGroupC14AddLayerResult33_3890C65F12EA82A4BC5FBD33046B67FALLOWOi_((uint64_t)&v94);
        return (uint64_t)outlined init with take of _ShapeStyle_InterpolatorGroup.AddLayerResult(&v94, a3);
      }
    }
    __break(1u);
    goto LABEL_25;
  }
  swift_beginAccess();
  v22 = (_QWORD *)*v81;
  result = swift_isUniquelyReferenced_nonNull_native();
  *v81 = (uint64_t)v22;
  if ((result & 1) == 0)
  {
LABEL_25:
    result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v22);
    v22 = (_QWORD *)result;
    *v81 = result;
  }
  if (v22[2] <= v12)
  {
    __break(1u);
  }
  else
  {
    BYTE4(v22[v17 + 31]) = 1;
    v48 = *v81;
    result = swift_endAccess();
    if (*(_QWORD *)(v48 + 16) > v12)
    {
      v49 = (_QWORD *)(v48 + v17 * 8);
      v50 = *(void **)(v48 + v17 * 8 + 56);
      v84 = *(void **)(v48 + v17 * 8 + 72);
      v87 = *(_QWORD *)(v48 + v17 * 8 + 64);
      v51 = *(_QWORD *)(v48 + v17 * 8 + 96);
      v80 = *(_QWORD *)(v48 + v17 * 8 + 88);
      v82 = *(void **)(v48 + v17 * 8 + 80);
      v52 = *(_QWORD *)(v48 + v17 * 8 + 104);
      v53 = v49[14];
      v55 = v49[15];
      v54 = v49[16];
      v56 = (int)v19;
      v57 = v49[17];
      v58 = v49[18];
      v59 = v49[19];
      v60 = v49[20];
      *(_QWORD *)&v94 = v50;
      *((_QWORD *)&v94 + 1) = v87;
      v61 = v50;
      v95 = v84;
      v96 = v82;
      v97 = v80;
      v98 = v51;
      v99 = v52;
      v100 = v53;
      v101 = v55;
      v102 = v54;
      v103 = v57;
      v104 = v58;
      v105 = v59;
      v106 = v60;
      v107 = v68;
      v108 = v56;
      _s7SwiftUI29_ShapeStyle_InterpolatorGroupC14AddLayerResult33_3890C65F12EA82A4BC5FBD33046B67FALLOWOi0_((uint64_t)&v94);
      outlined init with take of _ShapeStyle_InterpolatorGroup.AddLayerResult(&v94, v69);
      return (uint64_t)outlined copy of _ShapeStyle_Pack.Style?(v61, v87, v84, v82, v80, v51, v52, v53, v55, v54, v57, v58, v59, v60);
    }
  }
  __break(1u);
  return result;
}

Swift::Void __swiftcall _ShapeStyle_InterpolatorGroup.reset()()
{
  uint64_t v0;
  unint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  char isUniquelyReferenced_nonNull_native;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  void (*v11)(void);
  id v12;
  id v13;
  id v14;
  uint64_t v15;
  _QWORD **v16;
  _QWORD *v17;

  v16 = (_QWORD **)(v0 + 24);
  swift_beginAccess();
  v15 = *(_QWORD *)(*(_QWORD *)(v0 + 24) + 16);
  if (v15)
  {
    v1 = 0;
    while (1)
    {
      swift_beginAccess();
      v3 = *v16;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *v16 = v3;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        v3 = specialized _ArrayBuffer._consumeAndCreateNew()(v3);
        *v16 = v3;
      }
      if (v1 >= v3[2])
        break;
      v5 = &v3[28 * v1];
      v2 = v5 + 4;
      v6 = v5[28];
      v7 = *(_QWORD *)(v6 + 16);
      if (v7)
      {
        v17 = v5 + 4;
        swift_bridgeObjectRetain();
        v8 = v6 + 112;
        do
        {
          if (*(_QWORD *)v8)
          {
            v9 = *(void **)(v8 - 8);
            v10 = *(void **)(v8 - 24);
            v11 = *(void (**)(void))(**(_QWORD **)v8 + 96);
            v12 = *(id *)(v8 - 16);
            v13 = v9;
            swift_retain_n();
            swift_bridgeObjectRetain();
            swift_unknownObjectRetain();
            v14 = v10;
            v11();
            swift_release_n();

            swift_unknownObjectRelease();
            swift_bridgeObjectRelease();
          }
          v8 += 112;
          --v7;
        }
        while (v7);
        swift_bridgeObjectRelease();
        v2 = v17;
      }
      ++v1;
      v2[24] = MEMORY[0x24BEE4AF8];
      v2[26] = 0;
      *((_BYTE *)v2 + 219) = 1;
      swift_endAccess();
      swift_bridgeObjectRelease();
      swift_release();
      if (v1 == v15)
        return;
    }
    __break(1u);
  }
}

SwiftUI::Time __swiftcall _ShapeStyle_InterpolatorGroup.nextUpdate(after:)(SwiftUI::Time after)
{
  double *v1;
  uint64_t v2;
  double *v3;
  double v4;
  SwiftUI::Time result;
  uint64_t v6;
  uint64_t v7;
  double *v8;
  double *v9;

  v3 = v1;
  if (one-time initialization token for infinity != -1)
    swift_once();
  v4 = *(double *)&static Time.infinity;
  swift_beginAccess();
  v6 = *(_QWORD *)(v2 + 24);
  v7 = *(_QWORD *)(v6 + 16);
  if (v7)
  {
    v8 = (double *)(v6 + 232);
    do
    {
      v9 = v8 - 3;
      if (*(_QWORD *)(*((_QWORD *)v8 - 1) + 16))
        v9 = v8;
      *(SwiftUI::Time *)&result.seconds = *(SwiftUI::Time *)v9;
      if (*v9 < v4)
        v4 = *v9;
      v8 += 28;
      --v7;
    }
    while (v7);
  }
  *v3 = v4;
  return result;
}

uint64_t _ShapeStyle_InterpolatorGroup.features.getter@<X0>(_WORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int16 v7;
  uint64_t v8;
  uint64_t v9;
  __int16 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int16 *v14;
  uint64_t v15;
  __int16 v16;
  int v17;
  uint64_t v18;
  __int16 *v19;
  __int16 v20;

  result = swift_beginAccess();
  v4 = *(_QWORD *)(v1 + 24);
  v5 = *(_QWORD *)(v4 + 16);
  if (v5)
  {
    v6 = 0;
    v7 = 0;
    v8 = v4 + 32;
    while (1)
    {
      v9 = v8 + 224 * v6;
      v10 = *(_WORD *)(v9 + 144);
      v11 = *(_QWORD *)(v9 + 192);
      v12 = *(_QWORD *)(v11 + 16);
      if (v12)
      {
        if (v12 == 1)
        {
          v13 = 0;
        }
        else
        {
          LODWORD(result) = 0;
          v13 = v12 & 0x7FFFFFFFFFFFFFFELL;
          v14 = (unsigned __int16 *)(v11 + 152);
          v15 = v12 & 0x7FFFFFFFFFFFFFFELL;
          do
          {
            v16 = *(v14 - 56);
            v17 = *v14;
            v14 += 112;
            v10 |= v16;
            result = v17 | result;
            v15 -= 2;
          }
          while (v15);
          v10 |= result;
          if (v12 == v13)
            goto LABEL_3;
        }
        v18 = v12 - v13;
        v19 = (__int16 *)(v11 + 112 * v13 + 40);
        do
        {
          v20 = *v19;
          v19 += 56;
          v10 |= v20;
          --v18;
        }
        while (v18);
      }
LABEL_3:
      ++v6;
      v7 |= v10;
      if (v6 == v5)
        goto LABEL_14;
    }
  }
  v7 = 0;
LABEL_14:
  *a1 = v7;
  return result;
}

uint64_t _ShapeStyle_InterpolatorGroup.properties.getter@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 *v14;
  uint64_t v15;
  char v16;
  int v17;
  uint64_t v18;
  char *v19;
  char v20;

  result = swift_beginAccess();
  v4 = *(_QWORD *)(v1 + 24);
  v5 = *(_QWORD *)(v4 + 16);
  if (v5)
  {
    v6 = 0;
    v7 = 0;
    v8 = v4 + 32;
    while (1)
    {
      v9 = v8 + 224 * v6;
      v10 = *(_BYTE *)(v9 + 146);
      v11 = *(_QWORD *)(v9 + 192);
      v12 = *(_QWORD *)(v11 + 16);
      if (v12)
      {
        if (v12 == 1)
        {
          v13 = 0;
        }
        else
        {
          LODWORD(result) = 0;
          v13 = v12 & 0x7FFFFFFFFFFFFFFELL;
          v14 = (unsigned __int8 *)(v11 + 154);
          v15 = v12 & 0x7FFFFFFFFFFFFFFELL;
          do
          {
            v16 = *(v14 - 112);
            v17 = *v14;
            v14 += 224;
            v10 |= v16;
            result = v17 | result;
            v15 -= 2;
          }
          while (v15);
          v10 |= result;
          if (v12 == v13)
            goto LABEL_3;
        }
        v18 = v12 - v13;
        v19 = (char *)(v11 + 112 * v13 + 42);
        do
        {
          v20 = *v19;
          v19 += 112;
          v10 |= v20;
          --v18;
        }
        while (v18);
      }
LABEL_3:
      ++v6;
      v7 |= v10;
      if (v6 == v5)
        goto LABEL_14;
    }
  }
  v7 = 0;
LABEL_14:
  *a1 = v7;
  return result;
}

uint64_t _ShapeStyle_InterpolatorGroup.update(contentSeed:transition:animation:listener:contentsScale:rasterizationOptions:supportsVFD:)(unsigned __int16 *a1, uint64_t *a2, uint64_t a3, uint64_t a4, char *a5, char a6, float a7)
{
  uint64_t v7;
  float v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD **v15;
  uint64_t result;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  char v26;
  unint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  unint64_t v35;
  _QWORD *v36;
  char v37;
  _QWORD *v38;
  char v39;
  void *v40;
  _QWORD *v41;
  char v42;
  unint64_t v43;
  unint64_t v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  char v55;
  int v56;
  char v57;
  int v58;
  char v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  char v63;
  char v64;
  char v65;
  uint64_t v66;
  unsigned __int16 v67;
  _OWORD v68[12];
  _OWORD v69[2];
  uint64_t v70;
  int v71;
  char v72;
  char v73;
  char v74;
  unsigned __int16 v75;

  v12 = *(float *)(v7 + 32);
  if (v12 != a7)
    *(float *)(v7 + 32) = a7;
  v13 = *((unsigned __int8 *)a2 + 12);
  v14 = *((unsigned int *)a2 + 2);
  v67 = *a1;
  v66 = *a2;
  v64 = *((_BYTE *)a2 + 14);
  v65 = *((_BYTE *)a2 + 13);
  v58 = *((_DWORD *)a5 + 1);
  v59 = *a5;
  v56 = *((_DWORD *)a5 + 3);
  v57 = a5[8];
  v15 = (_QWORD **)(v7 + 24);
  v55 = a5[16];
  result = swift_beginAccess();
  v60 = v7;
  v17 = *(_QWORD *)(*(_QWORD *)(v7 + 24) + 16);
  if (!v17)
  {
LABEL_37:
    *(_BYTE *)(v60 + 36) = v59;
    *(_DWORD *)(v60 + 40) = v58;
    *(_BYTE *)(v60 + 44) = v57;
    *(_DWORD *)(v60 + 48) = v56;
    *(_BYTE *)(v60 + 52) = v55;
    return result;
  }
  v18 = 0;
  v19 = v14 | (v13 << 32);
  v20 = HIDWORD(v19);
  v63 = a6 & 1;
  v61 = HIDWORD(v19);
  while (1)
  {
    while (1)
    {
      v75 = v67;
      v70 = v66;
      v72 = v20;
      v71 = v19;
      v73 = v65;
      v74 = v64;
      swift_beginAccess();
      v21 = *v15;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *v15 = v21;
      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      {
        if ((v18 & 0x8000000000000000) != 0)
          goto LABEL_40;
      }
      else
      {
        v21 = specialized _ArrayBuffer._consumeAndCreateNew()(v21);
        *v15 = v21;
        if ((v18 & 0x8000000000000000) != 0)
          goto LABEL_40;
      }
      if (v18 >= v21[2])
        goto LABEL_41;
      v23 = 28 * v18;
      DisplayList.InterpolatorLayer.update(contentSeed:transition:animation:listener:supportsVFD:)(&v75, (uint64_t)&v70, a3, a4, v63);
      v24 = *v15;
      result = swift_endAccess();
      if (v18 >= v24[2])
        goto LABEL_42;
      if (BYTE4(v24[v23 + 31]) != 1 || *(_QWORD *)(v24[v23 + 28] + 16))
        break;
      swift_beginAccess();
      v41 = *v15;
      v42 = swift_isUniquelyReferenced_nonNull_native();
      *v15 = v41;
      if ((v42 & 1) == 0)
      {
        v41 = specialized _ArrayBuffer._consumeAndCreateNew()(v41);
        *v15 = v41;
      }
      v43 = v41[2];
      if (v18 >= v43)
        goto LABEL_44;
      v44 = v43 - 1;
      v45 = *(_OWORD *)&v41[v23 + 6];
      v68[0] = *(_OWORD *)&v41[v23 + 4];
      v68[1] = v45;
      v46 = *(_OWORD *)&v41[v23 + 8];
      v47 = *(_OWORD *)&v41[v23 + 10];
      v48 = *(_OWORD *)&v41[v23 + 14];
      v68[4] = *(_OWORD *)&v41[v23 + 12];
      v68[5] = v48;
      v68[2] = v46;
      v68[3] = v47;
      v49 = *(_OWORD *)&v41[v23 + 16];
      v50 = *(_OWORD *)&v41[v23 + 18];
      v51 = *(_OWORD *)&v41[v23 + 22];
      v68[8] = *(_OWORD *)&v41[v23 + 20];
      v68[9] = v51;
      v68[6] = v49;
      v68[7] = v50;
      v52 = *(_OWORD *)&v41[v23 + 24];
      v53 = *(_OWORD *)&v41[v23 + 26];
      v54 = *(_OWORD *)&v41[v23 + 28];
      *(_OWORD *)((char *)v69 + 13) = *(_OWORD *)((char *)&v41[v23 + 29] + 5);
      v68[11] = v53;
      v69[0] = v54;
      v68[10] = v52;
      if ((uint64_t)(v43 - 1 - v18) < 0)
        goto LABEL_45;
      memmove(&v41[v23 + 4], &v41[v23 + 32], 224 * (v43 - 1 - v18));
      v41[2] = v44;
      *v15 = v41;
      swift_endAccess();
      result = outlined release of _ShapeStyle_InterpolatorGroup.Layer((uint64_t)v68);
      if ((uint64_t)v18 >= --v17)
        goto LABEL_37;
    }
    if (v12 != a7)
      break;
LABEL_6:
    if ((uint64_t)++v18 >= v17)
      goto LABEL_37;
  }
  swift_beginAccess();
  v25 = *v15;
  v26 = swift_isUniquelyReferenced_nonNull_native();
  *v15 = v25;
  if ((v26 & 1) == 0)
  {
    v25 = specialized _ArrayBuffer._consumeAndCreateNew()(v25);
    *v15 = v25;
  }
  if (v18 >= v25[2])
    goto LABEL_43;
  v62 = v17;
  v27 = v19;
  v28 = a3;
  v20 = a4;
  v29 = &v25[v23];
  v30 = v29 + 4;
  swift_unknownObjectRelease();
  v29[25] = 0;
  v31 = (_QWORD *)v29[28];
  v32 = v31[2];
  if (!v32)
  {
LABEL_5:
    *((_BYTE *)v30 + 219) = 1;
    result = swift_endAccess();
    a4 = v20;
    a3 = v28;
    v19 = v27;
    LOBYTE(v20) = v61;
    v17 = v62;
    goto LABEL_6;
  }
  v33 = swift_isUniquelyReferenced_nonNull_native();
  v30[24] = v31;
  if ((v33 & 1) == 0)
    v30[24] = specialized _ArrayBuffer._consumeAndCreateNew()(v31);
  v34 = 0;
  v35 = 0;
  while (1)
  {
    v36 = (_QWORD *)v30[24];
    v37 = swift_isUniquelyReferenced_nonNull_native();
    v30[24] = v36;
    if ((v37 & 1) == 0)
    {
      v36 = specialized _ArrayBuffer._consumeAndCreateNew()(v36);
      v30[24] = v36;
    }
    if (v35 >= v36[2])
      break;
    v36[v34 + 8] = 0;
    swift_unknownObjectRelease();
    v38 = (_QWORD *)v30[24];
    v39 = swift_isUniquelyReferenced_nonNull_native();
    v30[24] = v38;
    if ((v39 & 1) == 0)
    {
      v38 = specialized _ArrayBuffer._consumeAndCreateNew()(v38);
      v30[24] = v38;
    }
    if (v35 >= v38[2])
      goto LABEL_39;
    ++v35;
    v40 = (void *)v38[v34 + 11];
    v38[v34 + 11] = 0;

    v34 += 14;
    if (v32 == v35)
      goto LABEL_5;
  }
  __break(1u);
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
LABEL_42:
  __break(1u);
LABEL_43:
  __break(1u);
LABEL_44:
  __break(1u);
LABEL_45:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t _ShapeStyle_InterpolatorGroup.rewriteInterpolation(serial:list:time:frame:contentOrigin:contentOffset:version:)(int a1, uint64_t a2, double a3, double a4, double a5, double a6, double a7, double a8, double a9, double a10, uint64_t a11, uint64_t *a12)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  _QWORD *v32;
  uint64_t result;
  char *v34;
  __int16 v35;
  char v36;
  _QWORD *Value;
  uint64_t v38;
  double v39;
  double v40;
  Swift::Float v41;
  uint64_t v42;
  __int16 v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  char v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  __int16 v52;
  char v53;
  char v54;
  int v55;
  int v56;
  char v57[4];
  int v58;
  char v59;
  int v60;
  char v61;
  uint64_t v62;
  uint64_t v63;
  __int16 v64;
  char v65;
  __int128 v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  char v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  __int16 v74;
  char v75;
  char v76;

  v13 = v12;
  v24 = *a12;
  v25 = (uint64_t *)(v12 + 24);
  swift_beginAccess();
  v26 = *(_QWORD *)(v13 + 24);
  v27 = *(_QWORD *)(v26 + 16);
  if (!v27)
  {
LABEL_5:
    swift_bridgeObjectRelease();
    v31 = 0;
    *(_QWORD *)a2 = MEMORY[0x24BEE4AF8];
    *(_WORD *)(a2 + 8) = 0;
    *(_BYTE *)(a2 + 10) = 0;
    return v31 & 1;
  }
  v28 = 0;
  v29 = v26 + 52;
  v30 = 251;
  while (*(_DWORD *)(v29 + v30 - 251) != a1)
  {
    ++v28;
    v30 += 224;
    if (v27 == v28)
      goto LABEL_5;
  }
  swift_beginAccess();
  v32 = (_QWORD *)*v25;
  result = swift_isUniquelyReferenced_nonNull_native();
  *v25 = (uint64_t)v32;
  if ((result & 1) == 0)
  {
    result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v32);
    v32 = (_QWORD *)result;
    *v25 = result;
  }
  if (v28 < v32[2])
  {
    v34 = (char *)v32 + v30;
    v35 = *(_WORD *)(a2 + 8);
    v36 = *(_BYTE *)(a2 + 10);
    v63 = *(_QWORD *)a2;
    v64 = v35;
    v65 = v36;
    DisplayList.InterpolatorLayer.setDisplayList(_:origin:)((uint64_t)&v63, a7, a8);
    if (*(_QWORD *)(*(_QWORD *)((char *)v32 + v30 - 27) + 16))
    {
      Value = (_QWORD *)AGGraphGetValue();
      if (*(double *)(v34 - 19) != *(double *)Value)
      {
        *(_QWORD *)(v34 - 19) = *Value;
        *((_BYTE *)v32 + v30) = 1;
      }
      v38 = specialized static ViewGraph.current.getter();
      v39 = *(double *)AGGraphGetValue();
      swift_beginAccess();
      v40 = *(double *)(v38 + 376);
      if (v39 < v40)
        v40 = v39;
      *(double *)(v38 + 376) = v40;
      swift_release();
      v41 = *(float *)(v13 + 32);
      swift_beginAccess();
      DisplayList.InterpolatorLayer.updateInterpolators(contentsScale:maxDuration:)(v41, *(Swift::Double *)(v13 + 16));
      v42 = *(_QWORD *)((char *)v32 + v30 - 83);
      v43 = *(_WORD *)((char *)v32 + v30 - 75);
      v44 = *((_BYTE *)v32 + v30 - 73);
      v45 = *(_QWORD *)((char *)v32 + v30 - 51);
      v46 = *(_QWORD *)((char *)v32 + v30 - 43);
      v47 = *(_DWORD *)((char *)v32 + v30 - 35);
      v48 = *((_BYTE *)v32 + v30 - 31);
      v49 = *(_QWORD *)(v34 - 27);
      v50 = *(_QWORD *)(v34 - 19);
      v51 = *(_QWORD *)((char *)v32 + v30 - 11);
      v52 = *(_WORD *)((char *)v32 + v30 - 3);
      v53 = *((_BYTE *)v32 + v30 - 1);
      v54 = *((_BYTE *)v32 + v30);
      v62 = v24;
      v63 = v42;
      v64 = v43;
      v65 = v44;
      v66 = *(_OWORD *)((char *)v32 + v30 - 67);
      v67 = v45;
      v68 = v46;
      v69 = v47;
      v70 = v48;
      v71 = v49;
      v72 = v50;
      v73 = v51;
      v74 = v52;
      v75 = v53;
      v76 = v54;
      v55 = *(_DWORD *)(v13 + 40);
      LOBYTE(v43) = *(_BYTE *)(v13 + 44);
      v56 = *(_DWORD *)(v13 + 48);
      LOBYTE(v45) = *(_BYTE *)(v13 + 52);
      v57[0] = *(_BYTE *)(v13 + 36);
      v58 = v55;
      v59 = v43;
      v60 = v56;
      v61 = v45;
      v31 = DisplayList.InterpolatorLayer.updateOutput(list:frame:contentOffset:version:rasterizationOptions:)(a2, &v62, v57, a3, a4, a5, a6, a9, a10);
    }
    else
    {
      v31 = 0;
    }
    swift_endAccess();
    return v31 & 1;
  }
  __break(1u);
  return result;
}

uint64_t _ShapeStyle_InterpolatorGroup.__ivar_destroyer()
{
  return swift_bridgeObjectRelease();
}

uint64_t _ShapeStyle_InterpolatorGroup.deinit()
{
  uint64_t v0;

  _ShapeStyle_InterpolatorGroup.reset()();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t _ShapeStyle_InterpolatorGroup.__deallocating_deinit()
{
  _ShapeStyle_InterpolatorGroup.reset()();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t _ShapeStyle_Pack.Style.draw(_:style:in:bounds:)(uint64_t a1, __int128 *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  float v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  float v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  id v25;
  uint64_t v26;
  id v27;
  int v28;
  char v29;
  id v30;
  uint64_t v31;
  int v32;
  float v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  id v41;
  uint64_t v42;
  id v43;
  int v44;
  float v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char v54;
  unsigned __int8 v55;
  void *v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char v68;
  uint64_t v69;
  __int128 v70;
  __int128 v71;
  uint64_t v74;
  int v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  void *v81;
  char v82;
  uint64_t v83;
  uint64_t v84;
  void *v85;
  unint64_t v86;
  id v87;
  uint64_t v88;
  uint64_t v89;
  id v90;
  char v91;
  id v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  id v101;
  char v102;
  uint64_t v103;
  _OWORD v104[2];
  uint64_t v105;
  char v106;
  uint64_t v107;
  _QWORD v108[10];
  char v109;

  v5 = a3;
  v70 = a2[1];
  v71 = *a2;
  v69 = *((_QWORD *)a2 + 4);
  v6 = *(void **)v4;
  v80 = *(_QWORD *)(v4 + 32);
  v81 = *(void **)(v4 + 16);
  v78 = *(_QWORD *)(v4 + 48);
  v79 = *(_QWORD *)(v4 + 40);
  v76 = *(_QWORD *)(v4 + 8);
  v77 = *(_QWORD *)(v4 + 56);
  v84 = *(_QWORD *)(v4 + 64);
  v85 = *(void **)(v4 + 24);
  v83 = *(_QWORD *)(v4 + 72);
  v82 = *(_BYTE *)(v4 + 80);
  v7 = *(float *)(v4 + 84);
  v74 = *(_QWORD *)(v4 + 88);
  v75 = *(unsigned __int8 *)(v4 + 96);
  v8 = *(_QWORD *)(v4 + 104);
  v9 = *(_QWORD *)(v8 + 16);
  v93 = a3;
  v94 = v8;
  v86 = *(_QWORD *)v4;
  if (!v9)
    goto LABEL_42;
  swift_bridgeObjectRetain();
  v10 = 72 * v9;
  while (v9 <= *(_QWORD *)(v8 + 16))
  {
    v100 = *(unsigned __int8 *)(v8 + v10 + 4);
    v98 = *(unsigned int *)(v8 + v10);
    v11 = *(_BYTE *)(v8 + v10 + 5);
    v12 = *(_QWORD *)(v8 + v10 + 16);
    v13 = *(float *)(v5 + 32);
    v14 = *(unsigned __int8 *)(v8 + v10 + 24);
    outlined copy of GraphicsBlendMode?(v12, *(_BYTE *)(v8 + v10 + 24));
    swift_retain();
    v15 = v5;
    if (v13 == (float)(v7 * v13))
    {
      if (v14 != 255)
        goto LABEL_8;
    }
    else
    {
      v15 = v5;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        v96 = v12;
        v22 = RBDrawingStateInit();
        type metadata accessor for GraphicsContext.Storage();
        v15 = swift_allocObject();
        *(_QWORD *)(v15 + 32) = 1065353216;
        *(_QWORD *)(v15 + 40) = 0x7FF8000000000000;
        v23 = *(_QWORD *)(v5 + 16);
        v24 = *(_DWORD *)(v23 + 64);
        if (v24 == RBDrawingStateGetDefaultColorSpace())
        {
          swift_retain();
          swift_retain();
        }
        else
        {
          v25 = (id)RBDrawingStateGetDisplayList();
          v26 = *(_QWORD *)(v23 + 48);
          v89 = *(_QWORD *)(v23 + 56);
          v92 = v25;
          type metadata accessor for GraphicsContext.Storage.Shared();
          v23 = swift_allocObject();
          *(_QWORD *)(v23 + 24) = 0;
          v27 = objc_allocWithZone(MEMORY[0x24BE7EF48]);
          swift_retain();
          swift_retain();
          swift_retain();
          v8 = v94;
          *(_QWORD *)(v23 + 32) = objc_msgSend(v27, sel_init);
          *(_QWORD *)(v23 + 40) = objc_msgSend(objc_allocWithZone(MEMORY[0x24BE7EF20]), sel_init);
          *(_QWORD *)(v23 + 72) = 0;
          _s7SwiftUI15GraphicsContextV15ResolvedShadingOSgWOi0_((uint64_t)v108);
          outlined init with take of GraphicsContext.ResolvedShading?((uint64_t)v108, v23 + 80);
          *(_BYTE *)(v23 + 240) = 2;
          *(_QWORD *)(v23 + 256) = 0;
          *(_QWORD *)(v23 + 264) = 0;
          *(_QWORD *)(v23 + 248) = 0;
          *(_QWORD *)(v23 + 16) = v92;
          *(_QWORD *)(v23 + 48) = v26;
          *(_QWORD *)(v23 + 56) = v89;
          v5 = v93;
          *(_DWORD *)(v23 + 64) = objc_msgSend(v92, sel_defaultColorSpace);
        }
        *(_QWORD *)(v15 + 16) = v23;
        *(_QWORD *)(v15 + 24) = v22;
        *(_BYTE *)(v15 + 48) = 1;
        *(_DWORD *)(v15 + 32) = *(_DWORD *)(v5 + 32);
        v28 = *(_DWORD *)(v5 + 36);
        swift_release();
        *(_DWORD *)(v15 + 36) = v28;
        swift_release();
        v12 = v96;
      }
      *(float *)(v15 + 32) = v7 * v13;
      if (v14 != 255)
      {
LABEL_8:
        v16 = v12;
        if ((v14 & 1) != 0)
          goto LABEL_22;
        goto LABEL_9;
      }
    }
    if (one-time initialization token for normal != -1)
      swift_once();
    v16 = static GraphicsBlendMode.normal;
    v29 = byte_254266040;
    outlined copy of GraphicsBlendMode(static GraphicsBlendMode.normal, byte_254266040);
    if ((v29 & 1) != 0)
    {
LABEL_22:
      outlined copy of GraphicsBlendMode?(v12, v14);
      outlined consume of GraphicsBlendMode(v16, 1);
      goto LABEL_23;
    }
LABEL_9:
    v17 = *(_DWORD *)(v15 + 36);
    outlined copy of GraphicsBlendMode?(v12, v14);
    if (v17 != (_DWORD)v16)
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        v91 = v11;
        v18 = RBDrawingStateInit();
        type metadata accessor for GraphicsContext.Storage();
        v19 = swift_allocObject();
        *(_QWORD *)(v19 + 32) = 1065353216;
        *(_QWORD *)(v19 + 40) = 0x7FF8000000000000;
        v20 = *(_QWORD *)(v15 + 16);
        v21 = *(_DWORD *)(v20 + 64);
        v95 = v18;
        if (v21 == RBDrawingStateGetDefaultColorSpace())
        {
          swift_retain();
          swift_retain();
        }
        else
        {
          v30 = (id)RBDrawingStateGetDisplayList();
          v31 = *(_QWORD *)(v20 + 48);
          v88 = *(_QWORD *)(v20 + 56);
          v90 = v30;
          type metadata accessor for GraphicsContext.Storage.Shared();
          v20 = swift_allocObject();
          *(_QWORD *)(v20 + 24) = 0;
          v87 = objc_allocWithZone(MEMORY[0x24BE7EF48]);
          swift_retain();
          swift_retain();
          swift_retain();
          *(_QWORD *)(v20 + 32) = objc_msgSend(v87, sel_init);
          *(_QWORD *)(v20 + 40) = objc_msgSend(objc_allocWithZone(MEMORY[0x24BE7EF20]), sel_init);
          *(_QWORD *)(v20 + 72) = 0;
          _s7SwiftUI15GraphicsContextV15ResolvedShadingOSgWOi0_((uint64_t)v108);
          outlined init with take of GraphicsContext.ResolvedShading?((uint64_t)v108, v20 + 80);
          *(_BYTE *)(v20 + 240) = 2;
          *(_QWORD *)(v20 + 256) = 0;
          *(_QWORD *)(v20 + 264) = 0;
          *(_QWORD *)(v20 + 248) = 0;
          *(_QWORD *)(v20 + 16) = v90;
          *(_QWORD *)(v20 + 48) = v31;
          *(_QWORD *)(v20 + 56) = v88;
          *(_DWORD *)(v20 + 64) = objc_msgSend(v90, sel_defaultColorSpace);
        }
        v11 = v91;
        *(_QWORD *)(v19 + 16) = v20;
        *(_QWORD *)(v19 + 24) = v95;
        *(_BYTE *)(v19 + 48) = 1;
        *(_DWORD *)(v19 + 32) = *(_DWORD *)(v15 + 32);
        v32 = *(_DWORD *)(v15 + 36);
        swift_release();
        *(_DWORD *)(v19 + 36) = v32;
        swift_release();
        v15 = v19;
        v5 = v93;
        v8 = v94;
      }
      *(_DWORD *)(v15 + 36) = v16;
      if ((v11 & 1) != 0)
        goto LABEL_4;
LABEL_28:
      if (((v98 | (v100 << 32)) & 0x800000000) != 0)
      {
        v33 = *(float *)(v5 + 32);
        if (*(float *)(v15 + 32) != v33)
        {
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            v34 = RBDrawingStateInit();
            type metadata accessor for GraphicsContext.Storage();
            swift_allocObject();
            v35 = swift_retain();
            v36 = GraphicsContext.Storage.init(_:state:ownsState:resetBlending:)(v35, v34, 1, 0);
            swift_release();
            v15 = v36;
          }
          *(float *)(v15 + 32) = v33;
        }
      }
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        v97 = v12;
        v37 = RBDrawingStateInit();
        type metadata accessor for GraphicsContext.Storage();
        v38 = swift_allocObject();
        *(_QWORD *)(v38 + 32) = 1065353216;
        *(_QWORD *)(v38 + 40) = 0x7FF8000000000000;
        v39 = *(_QWORD *)(v15 + 16);
        v40 = *(_DWORD *)(v39 + 64);
        if (v40 == RBDrawingStateGetDefaultColorSpace())
        {
          swift_retain();
          swift_retain();
        }
        else
        {
          v41 = (id)RBDrawingStateGetDisplayList();
          v42 = *(_QWORD *)(v39 + 48);
          v99 = *(_QWORD *)(v39 + 56);
          v101 = v41;
          type metadata accessor for GraphicsContext.Storage.Shared();
          v39 = swift_allocObject();
          *(_QWORD *)(v39 + 24) = 0;
          v43 = objc_allocWithZone(MEMORY[0x24BE7EF48]);
          swift_retain();
          swift_retain();
          swift_retain();
          *(_QWORD *)(v39 + 32) = objc_msgSend(v43, sel_init);
          *(_QWORD *)(v39 + 40) = objc_msgSend(objc_allocWithZone(MEMORY[0x24BE7EF20]), sel_init);
          *(_QWORD *)(v39 + 72) = 0;
          _s7SwiftUI15GraphicsContextV15ResolvedShadingOSgWOi0_((uint64_t)v108);
          outlined init with take of GraphicsContext.ResolvedShading?((uint64_t)v108, v39 + 80);
          *(_BYTE *)(v39 + 240) = 2;
          *(_QWORD *)(v39 + 256) = 0;
          *(_QWORD *)(v39 + 264) = 0;
          *(_QWORD *)(v39 + 248) = 0;
          *(_QWORD *)(v39 + 16) = v101;
          *(_QWORD *)(v39 + 48) = v42;
          *(_QWORD *)(v39 + 56) = v99;
          v5 = v93;
          *(_DWORD *)(v39 + 64) = objc_msgSend(v101, sel_defaultColorSpace);
        }
        *(_QWORD *)(v38 + 16) = v39;
        *(_QWORD *)(v38 + 24) = v37;
        *(_BYTE *)(v38 + 48) = 1;
        *(_DWORD *)(v38 + 32) = *(_DWORD *)(v15 + 32);
        v44 = *(_DWORD *)(v15 + 36);
        swift_release();
        *(_DWORD *)(v38 + 36) = v44;
        swift_release();
        v15 = v38;
        v8 = v94;
        v12 = v97;
      }
      if (*(_DWORD *)(*(_QWORD *)(v15 + 16) + 64) != 2)
        RBColorFromLinear();
      RBDrawingStateAddShadowStyle3();
      goto LABEL_4;
    }
LABEL_23:
    if ((v11 & 1) == 0)
      goto LABEL_28;
LABEL_4:
    --v9;
    outlined consume of GraphicsBlendMode?(v12, v14);
    swift_release();
    v10 -= 72;
    if (!v9)
      goto LABEL_41;
  }
  __break(1u);
LABEL_41:
  swift_bridgeObjectRelease();
  v6 = (void *)v86;
LABEL_42:
  v107 = v5;
  v45 = *(float *)(v5 + 32);
  swift_retain();
  if (v45 == (float)(v7 * v45))
  {
    v47 = v76;
    v46 = v77;
    v49 = v84;
    v48 = v85;
    v51 = v79;
    v50 = v80;
    v52 = v78;
    v53 = v83;
    v54 = v82;
    v55 = v75;
    if (v75 != 255)
      goto LABEL_44;
LABEL_49:
    outlined copy of _ShapeStyle_Pack.Fill(v6, v47, v81, v48, v50, v51, v52, v46, v49, v53, v54);
    outlined copy of GraphicsBlendMode?(v74, 0xFFu);
    v62 = one-time initialization token for normal;
    swift_bridgeObjectRetain();
    if (v62 != -1)
      swift_once();
    v103 = static GraphicsBlendMode.normal;
    v102 = byte_254266040;
    outlined copy of GraphicsBlendMode(static GraphicsBlendMode.normal, byte_254266040);
    v51 = v79;
    v50 = v80;
    v46 = v77;
    v52 = v78;
    v58 = v74;
    v55 = v75;
    v57 = v86;
    v47 = v76;
    v56 = v81;
  }
  else
  {
    v47 = v76;
    v53 = v83;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
    {
      v48 = v85;
      v51 = v79;
      v50 = v80;
      v59 = v5;
    }
    else
    {
      v60 = RBDrawingStateInit();
      type metadata accessor for GraphicsContext.Storage();
      swift_allocObject();
      v61 = swift_retain();
      v59 = GraphicsContext.Storage.init(_:state:ownsState:resetBlending:)(v61, v60, 1, 0);
      v107 = v59;
      swift_release();
      v48 = v85;
      v51 = v79;
      v50 = v80;
    }
    v46 = v77;
    v52 = v78;
    v49 = v84;
    v54 = v82;
    v55 = v75;
    v93 = v59;
    *(float *)(v59 + 32) = v7 * v45;
    if (v75 == 255)
      goto LABEL_49;
LABEL_44:
    v102 = v55 & 1;
    v56 = v81;
    outlined copy of _ShapeStyle_Pack.Fill(v6, v47, v81, v48, v50, v51, v52, v46, v49, v53, v54);
    v57 = (unint64_t)v6;
    v58 = v74;
    outlined copy of GraphicsBlendMode?(v74, v55);
    swift_bridgeObjectRetain();
    v103 = v74;
  }
  outlined copy of GraphicsBlendMode?(v58, v55);
  outlined consume of _ShapeStyle_Pack.Fill(v57, v47, (unint64_t)v56, v85, v50, v51, v52, v46, v84, v83, v82);
  outlined consume of GraphicsBlendMode?(v58, v55);
  swift_bridgeObjectRelease();
  if ((v102 & 1) != 0)
  {
    outlined consume of GraphicsBlendMode(v103, 1);
    v63 = (void *)v86;
    v64 = v76;
  }
  else
  {
    v63 = (void *)v86;
    v64 = v76;
    if (*(_DWORD *)(v93 + 36) != (_DWORD)v103)
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        v65 = RBDrawingStateInit();
        type metadata accessor for GraphicsContext.Storage();
        swift_allocObject();
        v66 = swift_retain();
        v107 = GraphicsContext.Storage.init(_:state:ownsState:resetBlending:)(v66, v65, 1, 0);
        swift_release();
      }
      *(_DWORD *)(v107 + 36) = v103;
    }
  }
  v108[0] = v63;
  v108[1] = v64;
  v108[2] = v56;
  v108[3] = v85;
  v108[4] = v80;
  v108[5] = v79;
  v108[6] = v78;
  v108[7] = v77;
  v108[8] = v84;
  v108[9] = v83;
  v109 = v82;
  v104[0] = v71;
  v104[1] = v70;
  v105 = v69;
  v106 = v68;
  outlined copy of _ShapeStyle_Pack.Fill(v63, v64, v56, v85, v80, v79, v78, v77, v84, v83, v82);
  _ShapeStyle_Pack.Fill.draw(_:style:in:bounds:)(a1, (uint64_t)v104, (uint64_t)&v107, a4);
  outlined consume of _ShapeStyle_Pack.Fill(v86, v64, (unint64_t)v81, v85, v80, v79, v78, v77, v84, v83, v82);
  return swift_release();
}

void _ShapeStyle_Pack.Fill.draw(_:style:in:bounds:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  _BYTE v7[48];
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  outlined init with take of CGRect?(a4, (uint64_t)&v6);
  outlined init with take of PathDrawingStyle(a2, (uint64_t)v7);
  __asm { BR              X10 }
}

uint64_t sub_234D80730()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;

  v5 = *v3;
  v0[48] = v2;
  v0[49] = v1;
  _s7SwiftUI15GraphicsContextV15ResolvedShadingOWOi0_((uint64_t)(v0 + 48));
  outlined init with take of GraphicsContext.ResolvedShading((uint64_t)(v0 + 48), (uint64_t)(v0 + 28));
  outlined init with take of PathDrawingStyle(v4 - 216, (uint64_t)(v0 + 22));
  return GraphicsContext.draw(_:with:style:)(v0[19], v0 + 28, v0 + 22, v5);
}

uint64_t specialized MaterialLayers.visit<A>(layer:)(__int16 a1)
{
  __int128 *v1;
  __int128 *v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  int v16;
  int v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  uint64_t result;
  char v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unsigned __int16 v31;
  unsigned __int8 v32;
  int v33;

  v2 = v1;
  v4 = swift_allocObject();
  *(_QWORD *)(v4 + 40) = &type metadata for IntelligenceLightSourceLayer;
  *(_QWORD *)(v4 + 48) = &protocol witness table for IntelligenceLightSourceLayer;
  *(_BYTE *)(v4 + 16) = a1 & 1;
  *(_BYTE *)(v4 + 17) = HIBYTE(a1) & 1;
  v5 = *((unsigned __int16 *)v2 + 12);
  v6 = *((_QWORD *)v2 + 2);
  v24 = 0;
  v25 = 0;
  v26 = *v2;
  v27 = v6;
  v28 = v4 | 0x6000000000000000;
  v29 = v5;
  v30 = 0;
  v32 = 0;
  v31 = 0;
  v33 = 0;
  if (one-time initialization token for normal != -1)
    swift_once();
  v7 = static GraphicsBlendMode.normal;
  v8 = byte_254266040;
  if (byte_254266040 == 1)
    swift_unknownObjectRetain_n();
  outlined consume of GraphicsBlendMode(v7, v8);
  outlined consume of GraphicsBlendMode(v7, v8);
  v23 = *((_BYTE *)v2 + 26);
  DisplayList.Item.canonicalize(options:)(&v23);
  v9 = v24;
  v10 = v25;
  v11 = v26;
  v13 = v27;
  v12 = v28;
  v14 = v29;
  v15 = v30;
  v16 = v31 | (v32 << 16);
  v17 = v33;
  v18 = (_QWORD *)*((_QWORD *)v2 + 4);
  outlined copy of DisplayList.Item.Value(v28, v29);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v18 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v18[2] + 1, 1, v18);
  v20 = v18[2];
  v19 = v18[3];
  if (v20 >= v19 >> 1)
    v18 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v19 > 1), v20 + 1, 1, v18);
  v18[2] = v20 + 1;
  v21 = &v18[9 * v20];
  v21[4] = v9;
  v21[5] = v10;
  *((_OWORD *)v21 + 3) = v11;
  v21[8] = v13;
  v21[9] = v12;
  v21[10] = v14;
  v21[11] = v15;
  *((_BYTE *)v21 + 98) = BYTE2(v16);
  *((_WORD *)v21 + 48) = v16;
  *((_DWORD *)v21 + 25) = v17;
  result = outlined consume of DisplayList.Item.Value(v12, v14);
  *((_QWORD *)v2 + 4) = v18;
  return result;
}

uint64_t specialized MaterialLayers.visit<A>(layer:)(unint64_t a1, uint64_t a2, char a3, float a4)
{
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  int v27;
  int v28;
  _QWORD *v29;
  unint64_t v30;
  unint64_t v31;
  _QWORD *v32;
  uint64_t result;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  __int16 v43;
  char v44;
  int v45;
  unsigned __int16 v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  unsigned __int16 v55;
  unsigned __int8 v56;
  int v57;

  v6 = a1;
  v7 = a3 & 1;
  v8 = a1 >> 60;
  if (((a1 >> 60) | 2) == 2)
    *((_BYTE *)v34 + 40) = 1;
  v9 = *((unsigned __int16 *)v34 + 12);
  v10 = *v34;
  v11 = v34[1];
  v12 = v34[2];
  v47 = 0;
  v48 = 0;
  v49 = v10;
  v50 = v11;
  v51 = v12;
  v52 = a1;
  v53 = v9;
  v54 = 0;
  v56 = 0;
  v55 = 0;
  v57 = 0;
  if (a4 == 1.0)
  {
    outlined copy of DisplayList.Content.Value(a1);
    v13 = 0;
    v14 = 0;
  }
  else
  {
    type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<DisplayList.Item>, (uint64_t)&type metadata for DisplayList.Item, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
    v13 = swift_allocObject();
    *(_OWORD *)(v13 + 16) = xmmword_23527E860;
    *(_QWORD *)(v13 + 32) = 0;
    *(_QWORD *)(v13 + 40) = 0;
    *(_QWORD *)(v13 + 48) = v10;
    *(_QWORD *)(v13 + 56) = v11;
    *(_QWORD *)(v13 + 64) = v12;
    *(_QWORD *)(v13 + 72) = v6;
    *(_QWORD *)(v13 + 80) = v9;
    *(_QWORD *)(v13 + 88) = 0;
    *(_BYTE *)(v13 + 98) = 0;
    *(_WORD *)(v13 + 96) = 0;
    *(_DWORD *)(v13 + 100) = 0;
    v35 = 0;
    v36 = 0;
    v37 = v10;
    v38 = v11;
    v39 = v12;
    v40 = v6;
    v41 = v9;
    v42 = 0;
    v44 = 0;
    v43 = 0;
    v45 = 0;
    outlined copy of DisplayList.Content.Value(v6);
    outlined copy of DisplayList.Item.Value(v6, v9);
    DisplayList.Item.features.getter();
    v15 = 0;
    if ((_DWORD)v8 == 9)
      v15 = *(unsigned __int8 *)(v6 + 26);
    v9 = 0x4000000400000000;
    outlined consume of DisplayList.Content.Value(v6);
    v6 = LODWORD(a4);
    v14 = v46 | (v15 << 16);
    v47 = 0;
    v48 = 0;
    v49 = v10;
    v50 = v11;
    v51 = v12;
    v52 = LODWORD(a4);
    v53 = 0x4000000400000000;
    v54 = v13;
    v56 = v15;
    v55 = v46;
    v57 = 0;
  }
  outlined copy of GraphicsBlendMode(a2, v7);
  if (one-time initialization token for normal != -1)
    swift_once();
  v16 = static GraphicsBlendMode.normal;
  v17 = byte_254266040;
  if ((_DWORD)v7)
  {
    if (byte_254266040)
    {
      swift_unknownObjectRetain();
      outlined consume of GraphicsBlendMode(a2, 1);
      outlined consume of GraphicsBlendMode(v16, 1);
      if (a2 == v16)
        goto LABEL_20;
LABEL_19:
      type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<DisplayList.Item>, (uint64_t)&type metadata for DisplayList.Item, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
      v18 = swift_allocObject();
      *(_OWORD *)(v18 + 16) = xmmword_23527E860;
      *(_QWORD *)(v18 + 32) = 0;
      *(_QWORD *)(v18 + 40) = 0;
      *(_QWORD *)(v18 + 48) = v10;
      *(_QWORD *)(v18 + 56) = v11;
      *(_QWORD *)(v18 + 64) = v12;
      *(_QWORD *)(v18 + 72) = v6;
      *(_QWORD *)(v18 + 80) = v9;
      *(_QWORD *)(v18 + 88) = v13;
      *(_BYTE *)(v18 + 98) = BYTE2(v14);
      *(_WORD *)(v18 + 96) = v14;
      *(_DWORD *)(v18 + 100) = 0;
      outlined copy of GraphicsBlendMode(a2, v7);
      outlined copy of DisplayList.Item.Value(v6, v9);
      DisplayList.Item.features.getter();
      v35 = 0;
      v36 = 0;
      v37 = v10;
      v38 = v11;
      v39 = v12;
      v40 = v6;
      v41 = v9;
      v42 = v13;
      v44 = BYTE2(v14);
      v43 = v14;
      v45 = 0;
      DisplayList.Item.properties.getter();
      outlined consume of DisplayList.Item.Value(v6, v9);
      v47 = 0;
      v48 = 0;
      v49 = v10;
      v50 = v11;
      v51 = v12;
      v52 = a2;
      v53 = v7 | 0x4000000500000000;
      v54 = v18;
      v55 = v46;
      v56 = v46;
      v57 = 0;
      *((_BYTE *)v34 + 40) = 1;
      goto LABEL_20;
    }
    swift_unknownObjectRetain();
LABEL_18:
    outlined copy of GraphicsBlendMode(v16, v17);
    outlined consume of GraphicsBlendMode(a2, v7);
    outlined consume of GraphicsBlendMode(v16, v17);
    outlined consume of GraphicsBlendMode(a2, v7);
    goto LABEL_19;
  }
  if ((byte_254266040 & 1) != 0)
    goto LABEL_18;
  outlined consume of GraphicsBlendMode(a2, 0);
  outlined consume of GraphicsBlendMode(v16, 0);
  if ((_DWORD)a2 != (_DWORD)v16)
    goto LABEL_19;
LABEL_20:
  LOBYTE(v35) = *((_BYTE *)v34 + 26);
  DisplayList.Item.canonicalize(options:)((char *)&v35);
  v19 = v47;
  v20 = v48;
  v21 = v49;
  v22 = v50;
  v24 = v51;
  v23 = v52;
  v25 = v53;
  v26 = v54;
  v27 = v55 | (v56 << 16);
  v28 = v57;
  v29 = (_QWORD *)v34[4];
  outlined copy of DisplayList.Item.Value(v52, v53);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v29 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v29[2] + 1, 1, v29);
  v31 = v29[2];
  v30 = v29[3];
  if (v31 >= v30 >> 1)
    v29 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v30 > 1), v31 + 1, 1, v29);
  v29[2] = v31 + 1;
  v32 = &v29[9 * v31];
  v32[4] = v19;
  v32[5] = v20;
  v32[6] = v21;
  v32[7] = v22;
  v32[8] = v24;
  v32[9] = v23;
  v32[10] = v25;
  v32[11] = v26;
  *((_BYTE *)v32 + 98) = BYTE2(v27);
  *((_WORD *)v32 + 48) = v27;
  *((_DWORD *)v32 + 25) = v28;
  result = outlined consume of DisplayList.Item.Value(v23, v25);
  v34[4] = (uint64_t)v29;
  return result;
}

unint64_t specialized closure #1 in MaterialRenderer.visit<A>(layer:)(unint64_t *a1, unint64_t a2, uint64_t a3, char a4, double *a5, float a6)
{
  CGFloat v6;
  CGFloat v7;
  CGFloat v8;
  CGFloat v9;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  unint64_t result;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  CGFloat v26;
  CGFloat v27;
  CGFloat v28;
  CGFloat v29;
  BOOL IsNull;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unsigned __int8 v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  char v55;
  unint64_t v56;
  CGFloat v57;
  CGFloat v58;
  CGFloat v59;
  CGFloat v60;
  __int128 v61;
  __int128 v62;
  uint64_t v63;
  __int128 v64;
  __int128 v65;
  char v66;
  uint64_t v67;
  __int128 v68;
  __int128 v69;
  char v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  _BYTE v74[32];
  __int128 v75;
  __int128 v76;
  int v77;
  char v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char v83;
  CGRect v84;
  CGRect v85;
  CGRect v86;

  *(float *)&v6 = a6;
  if (a6 != 1.0 && *(float *)(*a1 + 32) != a6)
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      v15 = RBDrawingStateInit();
      type metadata accessor for GraphicsContext.Storage();
      swift_allocObject();
      v16 = swift_retain();
      *a1 = GraphicsContext.Storage.init(_:state:ownsState:resetBlending:)(v16, v15, 1, 0);
      swift_release();
    }
    *(_DWORD *)(*a1 + 32) = LODWORD(v6);
  }
  outlined copy of GraphicsBlendMode(a3, a4 & 1);
  if (one-time initialization token for normal != -1)
    swift_once();
  v17 = static GraphicsBlendMode.normal;
  v18 = byte_254266040;
  if ((a4 & 1) != 0)
  {
    if (byte_254266040)
    {
      swift_unknownObjectRetain();
      outlined consume of GraphicsBlendMode(a3, 1);
      result = outlined consume of GraphicsBlendMode(v17, 1);
      goto LABEL_20;
    }
    swift_unknownObjectRetain();
  }
  else if ((byte_254266040 & 1) == 0)
  {
    outlined consume of GraphicsBlendMode(a3, 0);
    result = outlined consume of GraphicsBlendMode(v17, 0);
    if ((_DWORD)a3 == (_DWORD)v17)
      goto LABEL_20;
    goto LABEL_16;
  }
  outlined copy of GraphicsBlendMode(v17, v18);
  outlined consume of GraphicsBlendMode(a3, a4 & 1);
  outlined consume of GraphicsBlendMode(v17, v18);
  result = outlined consume of GraphicsBlendMode(a3, a4 & 1);
  if ((a4 & 1) != 0)
    goto LABEL_20;
LABEL_16:
  result = *a1;
  if (*(_DWORD *)(*a1 + 36) != (_DWORD)a3)
  {
    result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      v20 = RBDrawingStateInit();
      type metadata accessor for GraphicsContext.Storage();
      v21 = swift_allocObject();
      v22 = swift_retain();
      v23 = v20;
      v17 = v21;
      *a1 = GraphicsContext.Storage.init(_:state:ownsState:resetBlending:)(v22, v23, 1, 0);
      result = swift_release();
    }
    *(_DWORD *)(*a1 + 36) = a3;
  }
LABEL_20:
  v24 = a2 >> 60;
  if (!(a2 >> 60))
  {
    v62 = *(_OWORD *)(a2 + 20);
    v41 = *(_QWORD *)(a2 + 40);
    v42 = *(_QWORD *)(v41 + 16);
    if (!v42)
    {
      swift_retain();
LABEL_44:
      v17 = *a1;
      v9 = a5[1];
      v8 = a5[2];
      v7 = a5[3];
      v6 = a5[4];
      v85.origin.x = v9;
      v85.origin.y = v8;
      v85.size.width = v7;
      v85.size.height = v6;
      if (CGRectIsNull(v85))
      {
        v46 = 0;
        v47 = 0;
        v48 = 0;
        v49 = 0;
        v50 = 6;
LABEL_56:
        v63 = v46;
        *(_QWORD *)&v64 = v47;
        *((_QWORD *)&v64 + 1) = v48;
        *(_QWORD *)&v65 = v49;
        BYTE8(v65) = v50;
        v71 = v62;
        v72 = 0u;
        v73 = 0u;
        memset(v74, 0, 25);
        v67 = 256;
        v68 = 0u;
        v69 = 0u;
        v70 = 0;
        GraphicsContext.draw(_:with:style:)((uint64_t)&v63, (unint64_t *)&v71, &v67, v17);
LABEL_59:
        v36 = v46;
        v37 = v47;
        v38 = v48;
        v39 = v49;
        v40 = v50;
        goto LABEL_60;
      }
LABEL_55:
      v50 = 0;
      v46 = *(_QWORD *)&v9;
      v47 = *(_QWORD *)&v8;
      v48 = *(_QWORD *)&v7;
      v49 = *(_QWORD *)&v6;
      goto LABEL_56;
    }
    outlined copy of DisplayList.Content.Value(a2);
    swift_bridgeObjectRetain();
    v43 = v41 + 120 * v42 - 24;
    while (v42 <= *(_QWORD *)(v41 + 16))
    {
      --v42;
      v44 = *(_DWORD *)(v43 + 48);
      v45 = *(_BYTE *)(v43 + 52);
      v71 = *(_OWORD *)(v43 - 64);
      v72 = *(_OWORD *)(v43 - 48);
      v73 = *(_OWORD *)(v43 - 32);
      *(_OWORD *)v74 = *(_OWORD *)(v43 - 16);
      *(_OWORD *)&v74[16] = *(_OWORD *)v43;
      v75 = *(_OWORD *)(v43 + 16);
      v76 = *(_OWORD *)(v43 + 32);
      v77 = v44;
      v78 = v45;
      v17 = (uint64_t)a1;
      GraphicsContext.addFilter(_:in:)((uint64_t)&v71);
      v43 -= 120;
      if (!v42)
      {
        swift_bridgeObjectRelease();
        goto LABEL_44;
      }
    }
    __break(1u);
LABEL_54:
    __break(1u);
    goto LABEL_55;
  }
  if ((_DWORD)v24 == 2)
  {
    v62 = *(_OWORD *)(a2 + 16);
    v51 = *(_QWORD *)(a2 + 32);
    v52 = *(_QWORD *)(v51 + 16);
    if (!v52)
    {
      swift_retain();
LABEL_51:
      v56 = *a1;
      v58 = a5[1];
      v57 = a5[2];
      v60 = a5[3];
      v59 = a5[4];
      v86.origin.x = v58;
      v86.origin.y = v57;
      v86.size.width = v60;
      v86.size.height = v59;
      if (CGRectIsNull(v86))
      {
        v46 = 0;
        v47 = 0;
        v48 = 0;
        v49 = 0;
        v50 = 6;
      }
      else
      {
        v50 = 0;
        v46 = *(_QWORD *)&v58;
        v47 = *(_QWORD *)&v57;
        v48 = *(_QWORD *)&v60;
        v49 = *(_QWORD *)&v59;
      }
      v79 = v46;
      v80 = v47;
      v81 = v48;
      v82 = v49;
      v83 = v50;
      v71 = v62;
      _s7SwiftUI15GraphicsContextV15ResolvedShadingOWOi0_((uint64_t)&v71);
      outlined init with take of GraphicsContext.ResolvedShading((uint64_t)&v71, (uint64_t)&v67);
      v63 = 256;
      v64 = 0u;
      v65 = 0u;
      v66 = 0;
      GraphicsContext.draw(_:with:style:)(&v79, &v67, &v63, v56);
      goto LABEL_59;
    }
    outlined copy of DisplayList.Content.Value(a2);
    swift_bridgeObjectRetain();
    v53 = v51 + 120 * v52 - 24;
    while (v52 <= *(_QWORD *)(v51 + 16))
    {
      --v52;
      v54 = *(_DWORD *)(v53 + 48);
      v55 = *(_BYTE *)(v53 + 52);
      v71 = *(_OWORD *)(v53 - 64);
      v72 = *(_OWORD *)(v53 - 48);
      v73 = *(_OWORD *)(v53 - 32);
      *(_OWORD *)v74 = *(_OWORD *)(v53 - 16);
      *(_OWORD *)&v74[16] = *(_OWORD *)v53;
      v75 = *(_OWORD *)(v53 + 16);
      v76 = *(_OWORD *)(v53 + 32);
      v77 = v54;
      v78 = v55;
      v17 = (uint64_t)a1;
      GraphicsContext.addFilter(_:in:)((uint64_t)&v71);
      v53 -= 120;
      if (!v52)
      {
        swift_bridgeObjectRelease();
        goto LABEL_51;
      }
    }
    goto LABEL_54;
  }
  if ((_DWORD)v24 != 1)
    return result;
  v61 = *(_OWORD *)(a2 + 16);
  v25 = *a1;
  v26 = a5[1];
  v27 = a5[2];
  v28 = a5[3];
  v29 = a5[4];
  swift_retain();
  v84.origin.x = v26;
  v84.origin.y = v27;
  v84.size.width = v28;
  v84.size.height = v29;
  IsNull = CGRectIsNull(v84);
  if (IsNull)
    v31 = 0;
  else
    v31 = *(_QWORD *)&v26;
  if (IsNull)
    v32 = 0;
  else
    v32 = *(_QWORD *)&v27;
  if (IsNull)
    v33 = 0;
  else
    v33 = *(_QWORD *)&v28;
  if (IsNull)
    v34 = 0;
  else
    v34 = *(_QWORD *)&v29;
  if (IsNull)
    v35 = 6;
  else
    v35 = 0;
  v79 = v31;
  v80 = v32;
  v81 = v33;
  v82 = v34;
  v83 = v35;
  v71 = v61;
  _s7SwiftUI15GraphicsContextV15ResolvedShadingOWOi0_((uint64_t)&v71);
  outlined init with take of GraphicsContext.ResolvedShading((uint64_t)&v71, (uint64_t)&v67);
  v63 = 256;
  v64 = 0u;
  v65 = 0u;
  v66 = 0;
  GraphicsContext.draw(_:with:style:)(&v79, &v67, &v63, v25);
  v36 = v31;
  v37 = v32;
  v38 = v33;
  v39 = v34;
  v40 = v35;
LABEL_60:
  outlined consume of Path.Storage(v36, v37, v38, v39, v40);
  return outlined consume of DisplayList.Content.Value(a2);
}

float one-time initialization function for foregroundKeyColorAnyAlpha()
{
  float result;

  result = *MEMORY[0x24BE7EF80];
  __asm { FMOV            V1.2S, #-1.0 }
  static RBColor.foregroundKeyColorAnyAlpha = _D1;
  dword_254287BD0 = -1082130432;
  dword_254287BD4 = LODWORD(result);
  return result;
}

float one-time initialization function for keyColorAnyAlpha()
{
  float result;

  result = *MEMORY[0x24BE7EF80];
  __asm { FMOV            V1.2S, #-1.0 }
  static RBColor.keyColorAnyAlpha = _D1;
  dword_25622D100 = LODWORD(result);
  unk_25622D104 = LODWORD(result);
  return result;
}

uint64_t sub_234D81DDC()
{
  uint64_t v0;
  int v1;

  v1 = *(unsigned __int8 *)(v0 + 24);
  if (v1 != 255)
    outlined consume of GraphicsImage.Contents(*(void **)(v0 + 16), v1);
  return swift_deallocObject();
}

void specialized static _ShapeStyle_LayerID.== infix(_:_:)(uint64_t a1)
{
  __asm { BR              X9 }
}

BOOL sub_234D81E48()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  int v5;

  if (v5)
  {
    outlined copy of _ShapeStyle_LayerID(v1, v2, v5);
    outlined consume of _ShapeStyle_LayerID(v0, v3, v4);
    outlined consume of _ShapeStyle_LayerID(v1, v2, v5);
    return 0;
  }
  else
  {
    outlined consume of _ShapeStyle_LayerID(v0, v3, 0);
    outlined consume of _ShapeStyle_LayerID(v1, v2, 0);
    return v0 == v1 && WORD1(v0) == WORD1(v1);
  }
}

uint64_t specialized GraphicsContext.drawMaterialEffects(_:in:body:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, double a5, double a6, double a7, double a8, float a9, float a10, float a11, float a12)
{
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned __int8 *v21;
  int v22;
  char v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  id v40;
  int v41;
  uint64_t v42;
  id v43;
  int v44;
  uint64_t v46;
  id v47;
  id v48;
  uint64_t v49;
  uint64_t v50;
  id v51;
  id v52;
  uint64_t v54;
  uint64_t v55;
  _BYTE v56[48];
  _BYTE v57[160];
  _OWORD v58[7];
  int v59;
  char v60;
  uint64_t v61;

  v17 = a3;
  v18 = a2;
  v61 = a2;
  v19 = *(_QWORD *)(a1 + 16);
  if (v19)
  {
    v20 = a1;
    swift_retain();
    swift_bridgeObjectRetain();
    v21 = (unsigned __int8 *)(v20 + 44);
    do
    {
      v27 = *(_QWORD *)(v21 - 12);
      v28 = *v21;
      switch(v28)
      {
        case 9:
          v22 = *(_DWORD *)(v27 + 128);
          v23 = *(_BYTE *)(v27 + 132);
          v24 = *(_OWORD *)(v27 + 32);
          v58[0] = *(_OWORD *)(v27 + 16);
          v58[1] = v24;
          v25 = *(_OWORD *)(v27 + 64);
          v58[2] = *(_OWORD *)(v27 + 48);
          v58[3] = v25;
          v26 = *(_OWORD *)(v27 + 96);
          v58[4] = *(_OWORD *)(v27 + 80);
          v58[5] = v26;
          v58[6] = *(_OWORD *)(v27 + 112);
          v59 = v22;
          v60 = v23;
          GraphicsContext.addFilter(_:in:)((uint64_t)v58);
          break;
        case 5:
          v34 = *((_DWORD *)v21 - 1);
          if ((v34 & 1) == 0)
          {
            v35 = v61;
            if (*(_DWORD *)(v61 + 36) != (_DWORD)v27)
            {
              outlined copy of GraphicsBlendMode(*(_QWORD *)(v21 - 12), 0);
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
              {
                v54 = v20;
                v36 = RBDrawingStateInit();
                type metadata accessor for GraphicsContext.Storage();
                v37 = swift_allocObject();
                *(_QWORD *)(v37 + 32) = 1065353216;
                *(_QWORD *)(v37 + 40) = 0x7FF8000000000000;
                v38 = *(_QWORD *)(v35 + 16);
                v39 = *(_DWORD *)(v38 + 64);
                if (v39 == RBDrawingStateGetDefaultColorSpace())
                {
                  swift_retain();
                  swift_retain();
                }
                else
                {
                  v48 = (id)RBDrawingStateGetDisplayList();
                  v50 = v36;
                  v42 = *(_QWORD *)(v38 + 48);
                  v46 = *(_QWORD *)(v38 + 56);
                  type metadata accessor for GraphicsContext.Storage.Shared();
                  v38 = swift_allocObject();
                  *(_QWORD *)(v38 + 24) = 0;
                  v52 = (id)a4;
                  v43 = objc_allocWithZone(MEMORY[0x24BE7EF48]);
                  swift_retain();
                  swift_retain();
                  swift_retain();
                  *(_QWORD *)(v38 + 32) = objc_msgSend(v43, sel_init);
                  *(_QWORD *)(v38 + 40) = objc_msgSend(objc_allocWithZone(MEMORY[0x24BE7EF20]), sel_init);
                  *(_QWORD *)(v38 + 72) = 0;
                  _s7SwiftUI15GraphicsContextV15ResolvedShadingOSgWOi0_((uint64_t)v58);
                  a4 = (uint64_t)v52;
                  outlined init with take of GraphicsContext.ResolvedShading?((uint64_t)v58, v38 + 80);
                  *(_BYTE *)(v38 + 240) = 2;
                  *(_QWORD *)(v38 + 256) = 0;
                  *(_QWORD *)(v38 + 264) = 0;
                  *(_QWORD *)(v38 + 248) = 0;
                  *(_QWORD *)(v38 + 16) = v48;
                  *(_QWORD *)(v38 + 48) = v42;
                  *(_QWORD *)(v38 + 56) = v46;
                  v36 = v50;
                  *(_DWORD *)(v38 + 64) = objc_msgSend(v48, sel_defaultColorSpace);
                }
                *(_QWORD *)(v37 + 16) = v38;
                *(_QWORD *)(v37 + 24) = v36;
                *(_BYTE *)(v37 + 48) = 1;
                *(_DWORD *)(v37 + 32) = *(_DWORD *)(v35 + 32);
                v44 = *(_DWORD *)(v35 + 36);
                swift_release();
                *(_DWORD *)(v37 + 36) = v44;
                v61 = v37;
                swift_release();
                v35 = v37;
                v20 = v54;
              }
              *(_DWORD *)(v35 + 36) = v27;
              outlined consume of DisplayList.Effect(v27, v34, 5);
            }
          }
          break;
        case 4:
          v29 = v61;
          if (*(float *)(v61 + 32) != *(float *)&v27)
          {
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            {
              v30 = RBDrawingStateInit();
              type metadata accessor for GraphicsContext.Storage();
              v31 = swift_allocObject();
              *(_QWORD *)(v31 + 32) = 1065353216;
              *(_QWORD *)(v31 + 40) = 0x7FF8000000000000;
              v32 = *(_QWORD *)(v29 + 16);
              v33 = *(_DWORD *)(v32 + 64);
              if (v33 == RBDrawingStateGetDefaultColorSpace())
              {
                swift_retain();
                swift_retain();
              }
              else
              {
                v40 = (id)RBDrawingStateGetDisplayList();
                v55 = *(_QWORD *)(v32 + 48);
                v49 = *(_QWORD *)(v32 + 56);
                v51 = v40;
                type metadata accessor for GraphicsContext.Storage.Shared();
                v32 = swift_allocObject();
                *(_QWORD *)(v32 + 24) = 0;
                v47 = objc_allocWithZone(MEMORY[0x24BE7EF48]);
                swift_retain();
                swift_retain();
                swift_retain();
                *(_QWORD *)(v32 + 32) = objc_msgSend(v47, sel_init);
                *(_QWORD *)(v32 + 40) = objc_msgSend(objc_allocWithZone(MEMORY[0x24BE7EF20]), sel_init);
                *(_QWORD *)(v32 + 72) = 0;
                _s7SwiftUI15GraphicsContextV15ResolvedShadingOSgWOi0_((uint64_t)v58);
                outlined init with take of GraphicsContext.ResolvedShading?((uint64_t)v58, v32 + 80);
                *(_BYTE *)(v32 + 240) = 2;
                *(_QWORD *)(v32 + 256) = 0;
                *(_QWORD *)(v32 + 264) = 0;
                *(_QWORD *)(v32 + 248) = 0;
                *(_QWORD *)(v32 + 16) = v51;
                *(_QWORD *)(v32 + 48) = v55;
                *(_QWORD *)(v32 + 56) = v49;
                *(_DWORD *)(v32 + 64) = objc_msgSend(v51, sel_defaultColorSpace);
              }
              *(_QWORD *)(v31 + 16) = v32;
              *(_QWORD *)(v31 + 24) = v30;
              *(_BYTE *)(v31 + 48) = 1;
              *(_DWORD *)(v31 + 32) = *(_DWORD *)(v29 + 32);
              v41 = *(_DWORD *)(v29 + 36);
              swift_release();
              *(_DWORD *)(v31 + 36) = v41;
              v61 = v31;
              swift_release();
              v29 = v31;
            }
            *(_DWORD *)(v29 + 32) = v27;
          }
          break;
      }
      v21 += 16;
      --v19;
    }
    while (v19);
    swift_bridgeObjectRelease();
    v18 = v61;
    v17 = a3;
  }
  else
  {
    swift_retain();
  }
  *(_QWORD *)&v58[0] = __PAIR64__(LODWORD(a10), LODWORD(a9));
  *((_QWORD *)&v58[0] + 1) = __PAIR64__(LODWORD(a12), LODWORD(a11));
  _s7SwiftUI15GraphicsContextV15ResolvedShadingOWOi0_((uint64_t)v58);
  outlined init with take of GraphicsContext.ResolvedShading((uint64_t)v58, (uint64_t)v57);
  outlined init with take of PathDrawingStyle(a4, (uint64_t)v56);
  swift_retain();
  GraphicsContext.draw(_:with:style:)(v17, v57, v56, v18);
  swift_release();
  return swift_release();
}

uint64_t specialized _ShapeStyle_RenderedShape.renderVectorGlyph(_:size:orientation:name:styles:layers:)(uint64_t a1, uint64_t a2, unsigned __int8 *a3, uint64_t *a4, uint64_t a5)
{
  uint64_t isEscapingClosureAtFileLocation;
  uint64_t v6;
  CGFloat Width;
  CGFloat Height;
  uint64_t v10;
  char v11;
  uint64_t v12;
  int v13;
  unint64_t v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  double v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  CGImage *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t State;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  double v46;
  double v47;
  uint64_t v48;
  __int128 v49;
  id v50;
  double x;
  double y;
  double v53;
  double v54;
  _BOOL4 IsNull;
  double v56;
  double v57;
  double v58;
  double v59;
  uint64_t v60;
  double v61;
  double v62;
  CGFloat v63;
  CGFloat v64;
  uint64_t v65;
  float (*v66)(unsigned int, uint64_t, uint64_t);
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  float v71;
  float v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  _QWORD *v84;
  unint64_t v85;
  unint64_t v86;
  unint64_t v87;
  id v88;
  void *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unsigned int v94;
  _BOOL4 v96;
  unint64_t v98;
  uint64_t v99;
  float *v100;
  unint64_t v101;
  float v102;
  uint64_t v103;
  double v104;
  double v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  int v111;
  uint64_t v112;
  void *v113;
  void *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  int v122;
  float v123;
  double v124;
  double v125;
  CGFloat v126;
  CGFloat v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  unint64_t v131;
  uint64_t v132;
  uint64_t v133;
  double v134;
  double v135;
  uint64_t v136;
  uint64_t v137;
  char v138;
  uint64_t v139;
  char v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  unint64_t v147;
  _QWORD *v148;
  unint64_t v149;
  unint64_t v150;
  double *v151;
  uint64_t v152;
  uint64_t v153;
  unint64_t v154;
  uint64_t v155;
  int v156;
  unint64_t v157;
  void *v158;
  unint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  char v163;
  unint64_t v164;
  unint64_t v165;
  uint64_t v166;
  unint64_t v167;
  double v168;
  unint64_t v169;
  void *v170;
  unint64_t v171;
  int v172;
  CGPoint origin;
  CGSize size;
  _BOOL4 v175;
  double v176;
  double v177;
  double v178;
  double v179;
  double v180;
  uint64_t v181;
  uint64_t v182;
  CGFloat v183;
  uint64_t v184;
  uint64_t v185;
  unint64_t v186;
  void *v187;
  unint64_t v188;
  unint64_t v189;
  uint64_t v190;
  unint64_t v191;
  uint64_t v192;
  uint64_t v193;
  unint64_t v194;
  void *v195;
  unint64_t v196;
  BOOL v197;
  BOOL v198;
  uint64_t v199;
  unint64_t v200;
  uint64_t v201;
  uint64_t v202;
  char v203;
  uint64_t v204;
  int v205;
  uint64_t v206;
  uint64_t v207;
  id v208;
  void *v209;
  uint64_t v210;
  id v211;
  id v212;
  __int128 v213;
  __int128 v214;
  __int128 v215;
  __int128 v216;
  __int128 v217;
  __int128 v218;
  __int128 v219;
  id v220;
  double v221;
  double v222;
  double v223;
  double v224;
  _BOOL4 v225;
  double v226;
  uint64_t v227;
  double v228;
  double v229;
  double v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  __int128 v234;
  unsigned int v235;
  CGFloat v236;
  CGFloat v237;
  uint64_t v238;
  uint64_t v239;
  float v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  __int128 v245;
  __int128 v246;
  __int128 v247;
  uint64_t v248;
  __int128 v249;
  __int128 v250;
  __int128 v251;
  uint64_t v252;
  int v253;
  __int128 v254;
  __int128 v255;
  __int128 v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  unsigned __int8 v263;
  uint64_t v264;
  uint64_t v265;
  float v266;
  float v267;
  id v268;
  unint64_t v269;
  uint64_t v270;
  char v271;
  unint64_t v272;
  uint64_t v273;
  unint64_t v274;
  char v275;
  char v276;
  uint64_t v277;
  int v278;
  float v279;
  float v280;
  id v281;
  id v282;
  uint64_t v283;
  char v284;
  unint64_t v285;
  unint64_t v286;
  uint64_t v287;
  float *v288;
  unint64_t v289;
  float v290;
  uint64_t v291;
  unsigned int v292;
  id v294;
  uint64_t v295;
  uint64_t updated;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  unint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  void *v304;
  char v305;
  CGSize v306;
  CGPoint v307;
  uint64_t v308;
  float v309;
  uint64_t v310;
  _QWORD *v311;
  double v312;
  unsigned int v313;
  unsigned int v314;
  uint64_t v315;
  __int128 v316;
  uint64_t v317;
  double v318;
  uint64_t v319;
  unint64_t v320;
  uint64_t v321;
  char v322;
  uint64_t v323;
  unint64_t v324;
  uint64_t v325;
  uint64_t v326;
  _QWORD *v327;
  CGFloat v328;
  char v329;
  CGFloat v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  __int128 v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  void *v339;
  void *v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  unsigned __int8 v344;
  uint64_t v345;
  char v346;
  uint64_t v347;
  int v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  unint64_t v361;
  void *v362;
  uint64_t v363;
  char v364;
  uint64_t v365;
  double v366;
  uint64_t v367;
  uint64_t v368;
  id v369;
  unint64_t v370;
  double v371;
  unint64_t v372;
  unsigned __int8 v373;
  uint64_t v374;
  uint64_t v375;
  __int128 v376;
  uint64_t v377;
  char v378;
  __int128 v379;
  unint64_t v380;
  unint64_t v381;
  _BYTE v382[24];
  uint64_t v383;
  __int128 v384;
  __int128 v385;
  unsigned __int8 v386;
  CGRect v387;
  __int128 v388;
  unint64_t v389;
  void *v390;
  unint64_t v391;
  unint64_t v392;
  unint64_t v393;
  uint64_t v394;
  uint64_t v395;
  uint64_t v396;
  unint64_t v397;
  uint64_t v398;
  uint64_t v399;
  _QWORD *v400;
  __int128 v401;
  char v402;
  _BYTE v403[32];
  __int128 v404;
  uint64_t v405;
  uint64_t v406;
  uint64_t v407;
  unint64_t v408;
  unint64_t v409;
  uint64_t v410;
  uint64_t v411;
  _QWORD *v412;
  __int128 aBlock[2];
  __int128 v414;
  __int128 v415;
  __int128 v416;
  __int128 v417;
  __int128 v418;
  __int128 v419;
  __int128 v420;
  __int128 v421;
  __int128 v422;
  __int128 v423;
  __int128 v424;
  __int128 v425;
  _BYTE v426[25];
  uint64_t v427;
  CGRect v428;
  CGRect v429;
  CGRect v430;
  CGRect v431;
  CGRect v432;
  CGRect v433;

  v10 = a2;
  v11 = a2;
  v427 = *MEMORY[0x24BDAC8D0];
  v12 = *(uint64_t *)a1;
  v13 = *(unsigned __int8 *)(a1 + 29);
  v14 = *a3;
  v15 = *a4;
  *(_QWORD *)&aBlock[0] = *a4;
  v300 = v14;
  v403[0] = v14;
  _ShapeStyle_Pack.Slice.init(pack:name:)((uint64_t *)aBlock, v403, (uint64_t)&v384);
  v16 = dword_23529F284[v11];
  v305 = v13;
  if (v13)
    v17 = v16;
  else
    v17 = v16 | 0x20;
  v18 = (_QWORD *)(isEscapingClosureAtFileLocation + 104);
  v325 = isEscapingClosureAtFileLocation;
  v19 = isEscapingClosureAtFileLocation + 120;
  v297 = v15;
  swift_bridgeObjectRetain();
  v294 = (id)v12;
  v311 = objc_msgSend((id)v12, sel_beginUpdateWithRenderingMode_position_size_flags_, 255, isEscapingClosureAtFileLocation + 104, isEscapingClosureAtFileLocation + 120, v17);
  RBSymbolUpdateNextTime();
  v302 = *((_QWORD *)&v385 + 1) >> 1;
  v303 = v385;
  v21 = (*((_QWORD *)&v385 + 1) >> 1) - v385;
  if (__OFSUB__(*((_QWORD *)&v385 + 1) >> 1, (_QWORD)v385))
    goto LABEL_264;
  v22 = v386 + v21;
  if (__OFADD__(v386, v21))
    goto LABEL_265;
  Width = v20;
  v301 = *((_QWORD *)&v384 + 1);
  v310 = v386;
  v308 = v386 + v21;
  v23 = v305;
  if (v22 == v386)
    v23 = 1;
  v298 = 80;
  v341 = a5;
  if ((v23 & 1) == 0)
  {
    v24 = (CGImage *)(id)RBSymbolUpdateTemplateImage();
    if (v24)
    {
      isEscapingClosureAtFileLocation = (uint64_t)v24;
      Width = (double)(uint64_t)CGImageGetWidth(v24);
      Height = (double)(uint64_t)CGImageGetHeight((CGImageRef)isEscapingClosureAtFileLocation);
      *(_QWORD *)&v382[16] = 0x3FF0000000000000;
      v18 = (_QWORD *)(v10 | 0x3F80000000000000);
      v17 = v325;
      *(_QWORD *)&v382[8] = *(_QWORD *)v325;
      *(_QWORD *)v382 = *(_QWORD *)(v325 + 8);
      v381 = *(_QWORD *)(v325 + 16);
      v15 = *(_QWORD *)(v325 + 32);
      v380 = *(_QWORD *)(v325 + 24);
      v25 = *(_QWORD *)(v325 + 40);
      v6 = *(_QWORD *)(v325 + 48);
      a5 = *(_QWORD *)(v325 + 56);
      v379 = *(_OWORD *)(v325 + 64);
      v10 = *(_QWORD *)(v325 + 80);
      v19 = *(_QWORD *)(v325 + 88);
      v12 = *(unsigned int *)(v325 + 96);
      v369 = (id)isEscapingClosureAtFileLocation;
      outlined consume of _ShapeStyle_RenderedShape.Shape(*(uint64_t *)&v382[8], *(uint64_t *)v382, v381, v380, v15, v25, v6, a5, v379, *((uint64_t *)&v379 + 1), v10, v19, v12);
      *(_QWORD *)v325 = isEscapingClosureAtFileLocation;
      *(_QWORD *)(v325 + 8) = 0;
      *(_QWORD *)(v325 + 16) = 0x3FF0000000000000;
      *(CGFloat *)(v325 + 24) = Width;
      *(CGFloat *)(v325 + 32) = Height;
      *(_QWORD *)(v325 + 40) = v18;
      *(_OWORD *)(v325 + 48) = xmmword_23529EF30;
      *(_OWORD *)(v325 + 64) = 0u;
      *(_OWORD *)(v325 + 80) = 0u;
      *(_DWORD *)(v325 + 96) = 54591746;
      v26 = -v310;
      if (v303 > -v310 || v302 <= v26)
        goto LABEL_267;
      v27 = v301 + 120 * (int)v26;
      v29 = *(_OWORD *)(v27 + 32);
      v28 = *(_OWORD *)(v27 + 48);
      v30 = *(_OWORD *)(v27 + 16);
      aBlock[0] = *(_OWORD *)v27;
      aBlock[1] = v30;
      v414 = v29;
      v415 = v28;
      v31 = *(_OWORD *)(v27 + 64);
      v32 = *(_OWORD *)(v27 + 80);
      v33 = *(_OWORD *)(v27 + 96);
      v18 = *(_QWORD **)(v27 + 112);
      *(_QWORD *)&v419 = v18;
      v417 = v32;
      v418 = v33;
      v416 = v31;
      v380 = *((_QWORD *)&aBlock[0] + 1);
      *(_OWORD *)v382 = aBlock[1];
      v19 = *((_QWORD *)&v414 + 1);
      *(_QWORD *)&v382[16] = v414;
      a5 = *((_QWORD *)&v415 + 1);
      v6 = v415;
      v17 = *((_QWORD *)&v31 + 1);
      v15 = v31;
      v381 = v32;
      v10 = BYTE8(v32);
      LODWORD(Width) = HIDWORD(v32);
      v12 = *(uint64_t *)&v33;
      *(_QWORD *)&v379 = BYTE8(v33);
      LODWORD(Height) = 1065353216;
      isEscapingClosureAtFileLocation = v18[2];
      outlined retain of (key: _ShapeStyle_Pack.Key, style: _ShapeStyle_Pack.Style)((uint64_t)aBlock);
      if (isEscapingClosureAtFileLocation)
      {
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          goto LABEL_269;
        while (1)
        {
          v34 = v18[2];
          v35 = isEscapingClosureAtFileLocation - 1;
          if (isEscapingClosureAtFileLocation - 1 >= v34)
            v35 = v18[2];
          if (v35 > 1)
          {
            v286 = v35 + 1;
            v287 = v286 & 1;
            if ((v286 & 1) == 0)
              v287 = 2;
            v36 = v286 - v287;
            v288 = (float *)(v18 + 19);
            v289 = v36;
            do
            {
              v290 = *(float *)&Height * *v288;
              *(v288 - 18) = *(float *)&Height * *(v288 - 18);
              *v288 = v290;
              v288 += 36;
              v289 -= 2;
            }
            while (v289);
          }
          else
          {
            v36 = 0;
          }
          v291 = v298 + 72 * v36;
          while (v36 < v34)
          {
            ++v36;
            *(float *)((char *)v18 + v291) = *(float *)&Height * *(float *)((char *)v18 + v291);
            v291 += 72;
            if (isEscapingClosureAtFileLocation == v36)
              goto LABEL_255;
          }
LABEL_261:
          __break(1u);
LABEL_262:
          __break(1u);
LABEL_263:
          __break(1u);
LABEL_264:
          __break(1u);
LABEL_265:
          __break(1u);
LABEL_266:
          __break(1u);
LABEL_267:
          __break(1u);
LABEL_268:
          __break(1u);
LABEL_269:
          v18 = specialized _ArrayBuffer._consumeAndCreateNew()(v18);
        }
      }
LABEL_255:
      *(float *)&v292 = *(float *)&Width * *(float *)&Height;
      v401 = v300;
      v402 = 0;
      *(_QWORD *)v403 = v380;
      *(_OWORD *)&v403[8] = *(_OWORD *)v382;
      *(_QWORD *)&v403[24] = *(_QWORD *)&v382[16];
      *(_QWORD *)&v404 = v19;
      *((_QWORD *)&v404 + 1) = v6;
      v405 = a5;
      v406 = v15;
      v407 = v17;
      v408 = v381;
      v409 = v10 | ((unint64_t)v292 << 32);
      v410 = v12;
      v411 = v379;
      v412 = v18;
      _ShapeStyle_RenderedLayers.beginLayer(id:style:shape:)((uint64_t)&v401, (__int128 *)v403, v325);
      *(_QWORD *)v403 = v380;
      *(_OWORD *)&v403[8] = *(_OWORD *)v382;
      *(_QWORD *)&v403[24] = *(_QWORD *)&v382[16];
      *(_QWORD *)&v404 = v19;
      *((_QWORD *)&v404 + 1) = v6;
      v405 = a5;
      v406 = v15;
      v407 = v17;
      v408 = v381;
      LOBYTE(v409) = v10;
      HIDWORD(v409) = v292;
      v410 = v12;
      LOBYTE(v411) = v379;
      v412 = v18;
      _ShapeStyle_RenderedShape.render(style:)((uint64_t)v403);
      _ShapeStyle_RenderedLayers.endLayer(shape:)(v325);

      outlined consume of _ShapeStyle_Pack.Fill(v380, *(uint64_t *)v382, *(unint64_t *)&v382[8], *(void **)&v382[16], v19, v6, a5, v15, v17, v381, v10);
      outlined consume of GraphicsBlendMode?(v12, v379);
      swift_bridgeObjectRelease();
      objc_msgSend(v294, sel_endUpdate_, v311);
      goto LABEL_256;
    }
  }
  isEscapingClosureAtFileLocation = (uint64_t)aBlock;
  v299 = *(_QWORD *)&Width & 0x7FF0000000000000;
  v10 = (uint64_t)v311;
  updated = RBSymbolUpdateGroupCount();
  if ((MEMORY[0x23B7C91A8](v311) & 0x1000) != 0 || updated != 1 || RBSymbolUpdateGroupSize() != 1)
  {
    aBlock[0] = v384;
    aBlock[1] = v385;
    LOBYTE(v414) = v386;
    isEscapingClosureAtFileLocation = (uint64_t)aBlock;
    if ((_ShapeStyle_Pack.Slice.allColors.getter() & 1) != 0)
    {
      v17 = (uint64_t)objc_msgSend(objc_allocWithZone(MEMORY[0x24BE7EEF8]), sel_init);
      State = RBDisplayListGetState();
      v18 = v311;
      v10 = swift_allocObject();
      v38 = v385;
      *(_OWORD *)(v10 + 16) = v384;
      *(_OWORD *)(v10 + 32) = v38;
      *(_BYTE *)(v10 + 48) = v386;
      v6 = v15;
      *(_QWORD *)(v10 + 56) = v15;
      v19 = swift_allocObject();
      *(_QWORD *)(v19 + 16) = partial apply for closure #1 in _ShapeStyle_RenderedShape.renderVectorGlyph(_:size:orientation:name:styles:layers:);
      *(_QWORD *)(v19 + 24) = v10;
      *(_QWORD *)&v414 = partial apply for thunk for @callee_guaranteed (@guaranteed RBDisplayList) -> ();
      *((_QWORD *)&v414 + 1) = v19;
      *(_QWORD *)&aBlock[0] = MEMORY[0x24BDAC760];
      *((_QWORD *)&aBlock[0] + 1) = 1107296256;
      *(_QWORD *)&aBlock[1] = thunk for @escaping @callee_guaranteed (@unowned RBSymbolStyle, @guaranteed String?) -> (@unowned RBColor);
      *((_QWORD *)&aBlock[1] + 1) = &block_descriptor_12;
      *(double *)&v12 = COERCE_DOUBLE(_Block_copy(aBlock));
      v15 = *((_QWORD *)&v414 + 1);
      swift_bridgeObjectRetain();
      outlined retain of _ShapeStyle_Pack.Slice((uint64_t)&v384);
      swift_retain();
      swift_release();
      MEMORY[0x23B7C9124](v311, State, v12);
      _Block_release((const void *)v12);
      isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
      swift_release();
      if ((isEscapingClosureAtFileLocation & 1) != 0)
        goto LABEL_268;
      *(_QWORD *)v403 = 0;
      *(_QWORD *)&v403[8] = 0;
      v403[16] = 3;
      v417 = 0u;
      v418 = 0u;
      v415 = 0u;
      v416 = 0u;
      v414 = 0u;
      memset(aBlock, 0, sizeof(aBlock));
      _ShapeStyle_RenderedLayers.beginLayer(id:style:shape:)((uint64_t)v403, aBlock, v325);
      v39 = *(_OWORD *)(v325 + 208);
      v424 = *(_OWORD *)(v325 + 192);
      v425 = v39;
      *(_OWORD *)v426 = *(_OWORD *)(v325 + 224);
      *(_OWORD *)&v426[9] = *(_OWORD *)(v325 + 233);
      v40 = *(_OWORD *)(v325 + 144);
      v420 = *(_OWORD *)(v325 + 128);
      v421 = v40;
      v41 = *(_OWORD *)(v325 + 176);
      v422 = *(_OWORD *)(v325 + 160);
      v423 = v41;
      v42 = *(_OWORD *)(v325 + 80);
      v416 = *(_OWORD *)(v325 + 64);
      v417 = v42;
      v43 = *(_OWORD *)(v325 + 112);
      v418 = *(_OWORD *)(v325 + 96);
      v419 = v43;
      v44 = *(_OWORD *)(v325 + 16);
      aBlock[0] = *(_OWORD *)v325;
      aBlock[1] = v44;
      v45 = *(_OWORD *)(v325 + 48);
      v414 = *(_OWORD *)(v325 + 32);
      v415 = v45;
      v46 = *((double *)&v421 + 1);
      v47 = *(double *)&v422;
      v48 = *((_QWORD *)&v423 + 1);
      v49 = v424;
      outlined retain of _ShapeStyle_RenderedShape((uint64_t)aBlock);
      v50 = objc_msgSend((id)v17, sel_moveContents);
      objc_msgSend(v50, sel_boundingRect);
      x = v428.origin.x;
      y = v428.origin.y;
      v53 = v428.size.width;
      v54 = v428.size.height;
      IsNull = CGRectIsNull(v428);
      v56 = 0.0;
      if (IsNull)
        v57 = 0.0;
      else
        v57 = x;
      if (IsNull)
        v58 = 0.0;
      else
        v58 = y;
      if (IsNull)
        v59 = 0.0;
      else
        v59 = v53;
      if (!IsNull)
        v56 = v54;
      v60 = WORD2(v418);
      v429 = CGRectIntegral(*(CGRect *)(&v56 - 3));
      v61 = v429.origin.x;
      v62 = v429.origin.y;
      v63 = v429.size.width;
      v64 = v429.size.height;
      v65 = swift_allocObject();
      *(_QWORD *)(v65 + 16) = v50;
      *(double *)(v65 + 24) = v61;
      *(double *)(v65 + 32) = v62;
      *(_BYTE *)(v65 + 40) = 0;
      *(_DWORD *)(v65 + 44) = 0;
      *(_BYTE *)(v65 + 48) = 1;
      *(_DWORD *)(v65 + 52) = 160;
      *(_BYTE *)(v65 + 56) = 3;
      outlined release of _ShapeStyle_RenderedShape((uint64_t)aBlock);
      outlined consume of DisplayList.Item.Value(v49, *((unint64_t *)&v49 + 1));
      *(double *)(v325 + 152) = v46 + v61;
      *(double *)(v325 + 160) = v47 + v62;
      *(CGFloat *)(v325 + 168) = v63;
      *(CGFloat *)(v325 + 176) = v64;
      *(_QWORD *)(v325 + 184) = v48;
      *(_QWORD *)(v325 + 192) = v65 | 0xA000000000000000;
      *(_QWORD *)(v325 + 200) = v60;
      *(_QWORD *)(v325 + 208) = 0;
      *(_BYTE *)(v325 + 218) = 0;
      *(_WORD *)(v325 + 216) = 0;
      *(_DWORD *)(v325 + 220) = 0;
      if (v299 != 0x7FF0000000000000 && (v426[24] & 1) == 0)
        *(_BYTE *)(v325 + 248) = v426[24] | 1;
      _ShapeStyle_RenderedLayers.endLayer(shape:)(v325);

      objc_msgSend(v294, sel_endUpdate_, v311);
      outlined release of _ShapeStyle_Pack.Slice((uint64_t)&v384);
      v66 = partial apply for closure #1 in _ShapeStyle_RenderedShape.renderVectorGlyph(_:size:orientation:name:styles:layers:);
      return outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed @escaping @callee_guaranteed (@unowned Bool) -> ()) -> ())?((uint64_t)v66);
    }
    if (updated < 0)
      goto LABEL_266;
    isEscapingClosureAtFileLocation = (uint64_t)aBlock;
    if (!updated)
      goto LABEL_247;
  }
  v304 = 0;
  v67 = 0;
  v306 = *(CGSize *)(MEMORY[0x24BDBF070] + 16);
  v307 = (CGPoint)*MEMORY[0x24BDBF070];
  v323 = a5 + 16;
  v295 = v15 + 33;
  v68 = updated;
  while (1)
  {
    if (v67 == v68)
      goto LABEL_262;
    *(_QWORD *)&v316 = v67;
    v69 = RBSymbolUpdateGroupSize();
    if (v69 < 0)
      goto LABEL_263;
    if (v69)
      break;
LABEL_41:
    v67 = v316 + 1;
    v68 = updated;
    if ((_QWORD)v316 + 1 == updated)
      goto LABEL_246;
  }
  v70 = 0;
  v315 = v69;
  while (2)
  {
    if (v70 == v69)
    {
      __break(1u);
LABEL_259:
      __break(1u);
LABEL_260:
      __break(1u);
      goto LABEL_261;
    }
    v18 = (_QWORD *)v316;
    *(_QWORD *)&aBlock[0] = v10;
    *((_QWORD *)&aBlock[0] + 1) = v316;
    *(_QWORD *)&aBlock[1] = v70;
    v12 = v70;
    RBSymbolUpdateLayerDrawingOpacity();
    v72 = v71;
    *(_QWORD *)&aBlock[0] = v10;
    *((_QWORD *)&aBlock[0] + 1) = v316;
    *((_QWORD *)&v316 + 1) = v12;
    *(_QWORD *)&aBlock[1] = v12;
    switch(RBSymbolUpdateLayerStyle())
    {
      case 0u:
        v73 = v308;
        if (v308 == v310)
          goto LABEL_47;
        v74 = 0;
        goto LABEL_60;
      case 5u:
        v73 = v308;
        if (v308 == v310)
          goto LABEL_47;
        v74 = 1;
        goto LABEL_60;
      case 6u:
        v73 = v308;
        if (v308 == v310)
          goto LABEL_47;
        v74 = 2;
        goto LABEL_60;
      case 7u:
        v73 = v308;
        if (v308 == v310)
          goto LABEL_47;
        v74 = 3;
        goto LABEL_60;
      case 8u:
        v73 = v308;
        if (v308 == v310)
          goto LABEL_47;
        v74 = 4;
LABEL_60:
        if (v73 < v310)
          goto LABEL_259;
        v75 = v308 + ~v310;
        if (v75 >= v74)
          v75 = v74;
        v76 = v75 - v310;
        if (v76 < v303 || v76 >= v302)
          goto LABEL_260;
        v77 = v301 + 120 * v76;
        v79 = *(_OWORD *)(v77 + 32);
        v78 = *(_OWORD *)(v77 + 48);
        v80 = *(_OWORD *)(v77 + 16);
        aBlock[0] = *(_OWORD *)v77;
        aBlock[1] = v80;
        v414 = v79;
        v415 = v78;
        v81 = *(_OWORD *)(v77 + 64);
        v82 = *(_OWORD *)(v77 + 80);
        v83 = *(_OWORD *)(v77 + 96);
        *(_QWORD *)&v419 = *(_QWORD *)(v77 + 112);
        v84 = (_QWORD *)v419;
        v417 = v82;
        v418 = v83;
        v416 = v81;
        v334 = *(__int128 *)((char *)aBlock + 8);
        v340 = (void *)*((_QWORD *)&aBlock[1] + 1);
        v338 = *((_QWORD *)&v414 + 1);
        v339 = (void *)v414;
        v337 = v415;
        v335 = v81;
        v336 = *((_QWORD *)&v415 + 1);
        v331 = v82;
        v332 = *((_QWORD *)&v81 + 1);
        v314 = BYTE8(v82);
        LODWORD(Width) = HIDWORD(v82);
        v333 = v83;
        v313 = BYTE8(v83);
        *(_QWORD *)&v330 = v300 | (v74 << 16);
        outlined retain of (key: _ShapeStyle_Pack.Key, style: _ShapeStyle_Pack.Style)((uint64_t)aBlock);
        v328 = 0.0;
        v329 = 0;
        v10 = v84[2];
        if (v10)
          goto LABEL_66;
        goto LABEL_96;
      case 9u:
        *(_QWORD *)&aBlock[0] = v10;
        *((_QWORD *)&aBlock[0] + 1) = v316;
        *(_QWORD *)&aBlock[1] = v12;
        v88 = (id)RBSymbolUpdateLayerColorName();
        if (!v88)
        {
          v10 = (uint64_t)v311;
LABEL_47:
          v70 = *((_QWORD *)&v316 + 1) + 1;
          v69 = v315;
          if (*((_QWORD *)&v316 + 1) + 1 == v315)
            goto LABEL_41;
          continue;
        }
        v89 = v88;
        v330 = COERCE_DOUBLE(static String._unconditionallyBridgeFromObjectiveC(_:)());
        v326 = v90;

        v91 = *(_QWORD *)(v297 + 16);
        if (v91)
        {
          v92 = 0;
          v93 = v295;
          while (1)
          {
            v94 = *(unsigned __int8 *)(v93 - 1);
            if (v94 == 2 && *(_BYTE *)v93 == 0)
            {
              v245 = *(_OWORD *)(v93 + 47);
              v246 = *(_OWORD *)(v93 + 31);
              v247 = *(_OWORD *)(v93 + 15);
              aBlock[0] = *(_OWORD *)(v93 - 1);
              aBlock[1] = v247;
              v414 = v246;
              v415 = v245;
              v248 = *(_QWORD *)(v93 + 111);
              v249 = *(_OWORD *)(v93 + 95);
              v250 = *(_OWORD *)(v93 + 79);
              v251 = *(_OWORD *)(v93 + 63);
LABEL_205:
              v416 = v251;
              v417 = v250;
              v418 = v249;
              *(_QWORD *)&v379 = v248;
              *(_QWORD *)&v419 = v248;
              *(_QWORD *)v382 = *((_QWORD *)&aBlock[0] + 1);
              *(_OWORD *)&v382[8] = aBlock[1];
              v257 = *((_QWORD *)&v414 + 1);
              v369 = (id)v414;
              v258 = *((_QWORD *)&v415 + 1);
              v15 = v415;
              v259 = *((_QWORD *)&v251 + 1);
              v17 = v251;
              v260 = v250;
              LODWORD(v380) = BYTE8(v250);
              v377 = v249;
              v373 = BYTE8(v249);
              swift_bridgeObjectRetain();
              outlined retain of (key: _ShapeStyle_Pack.Key, style: _ShapeStyle_Pack.Style)((uint64_t)aBlock);
              goto LABEL_209;
            }
            v96 = *(_BYTE *)v93 && v94 == 2;
            if (v94 > 2 || v96)
              break;
            ++v92;
            v93 += 120;
            if (v91 == v92)
              goto LABEL_206;
          }
          if (v92)
          {
            v253 = *(unsigned __int8 *)(v93 - 121);
            v252 = v93 - 121;
            if (v253 == 2)
            {
              v255 = *(_OWORD *)(v252 + 32);
              v254 = *(_OWORD *)(v252 + 48);
              v256 = *(_OWORD *)(v252 + 16);
              aBlock[0] = *(_OWORD *)v252;
              aBlock[1] = v256;
              v414 = v255;
              v415 = v254;
              v248 = *(_QWORD *)(v252 + 112);
              v250 = *(_OWORD *)(v252 + 80);
              v249 = *(_OWORD *)(v252 + 96);
              v251 = *(_OWORD *)(v252 + 64);
              goto LABEL_205;
            }
          }
        }
LABEL_206:
        v261 = one-time initialization token for clear;
        swift_bridgeObjectRetain_n();
        if (v261 != -1)
          swift_once();
        v262 = qword_256193198;
        v263 = byte_2561931A0;
        v264 = qword_2561931A8;
        LODWORD(v380) = byte_256193190;
        v260 = *((_QWORD *)&xmmword_256193180 + 1);
        v259 = xmmword_256193180;
        *(_OWORD *)v382 = static _ShapeStyle_Pack.Style.clear;
        v369 = (id)*((_QWORD *)&xmmword_256193150 + 1);
        *(_QWORD *)&v382[16] = xmmword_256193150;
        v257 = qword_256193160;
        v15 = qword_256193168;
        v17 = *((_QWORD *)&xmmword_256193170 + 1);
        v258 = xmmword_256193170;
        outlined copy of _ShapeStyle_Pack.Fill((id)static _ShapeStyle_Pack.Style.clear, *((uint64_t *)&static _ShapeStyle_Pack.Style.clear + 1), (void *)xmmword_256193150, *((void **)&xmmword_256193150 + 1), qword_256193160, qword_256193168, xmmword_256193170, *((uint64_t *)&xmmword_256193170 + 1), xmmword_256193180, *((uint64_t *)&xmmword_256193180 + 1), byte_256193190);
        v377 = v262;
        v373 = v263;
        outlined copy of GraphicsBlendMode?(v262, v263);
        *(_QWORD *)&v379 = v264;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
LABEL_209:
        v19 = v380;
        v381 = v260;
        v368 = v259;
        v18 = *(_QWORD **)v382;
        v6 = *(_QWORD *)&v382[8];
        outlined copy of _ShapeStyle_Pack.Fill(*(id *)v382, *(uint64_t *)&v382[8], *(void **)&v382[16], v369, v257, v15, v258, v17, v259, v260, v380);
        outlined consume of _ShapeStyle_Pack.Fill(*(unint64_t *)v382, *(uint64_t *)&v382[8], *(unint64_t *)&v382[16], v369, v257, v15, v258, v17, v259, v260, v380);
        outlined consume of GraphicsBlendMode?(v377, v373);
        swift_bridgeObjectRelease();
        if ((_DWORD)v380 != 6)
        {
          outlined consume of _ShapeStyle_Pack.Fill(*(unint64_t *)v382, *(uint64_t *)&v382[8], *(unint64_t *)&v382[16], v369, v257, v15, v258, v17, v259, v260, v380);
          swift_bridgeObjectRelease();
          isEscapingClosureAtFileLocation = (uint64_t)aBlock;
          v12 = v326;
          goto LABEL_214;
        }
        v19 = v259;
        v265 = v15;
        v15 = v258;
        LODWORD(Width) = *(_DWORD *)v382;
        LODWORD(Height) = *(_DWORD *)&v382[4];
        v266 = *(float *)&v382[8];
        v267 = *(float *)&v382[12];
        if (v330 == -2.31584178e77 && v326 == 0x80000002352E2950)
        {
          outlined consume of _ShapeStyle_Pack.Fill(*(unint64_t *)v382, *(uint64_t *)&v382[8], *(unint64_t *)&v382[16], v369, v257, v265, v258, v17, v259, v381, 6);
          swift_bridgeObjectRelease();
          a5 = v341;
          goto LABEL_225;
        }
        if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
        {
          if (*(_QWORD *)&v330 == 0x6574696877 && v326 == 0xE500000000000000
            || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
          {
            outlined consume of _ShapeStyle_Pack.Fill(*(unint64_t *)v382, *(uint64_t *)&v382[8], *(unint64_t *)&v382[16], v369, v257, v265, v258, v17, v259, v381, 6);
            swift_bridgeObjectRelease();
            LODWORD(Width) = 1.0;
            LODWORD(Height) = 1.0;
            v266 = 1.0;
            v267 = 1.0;
            goto LABEL_224;
          }
          if (*(_QWORD *)&v330 == 0x6B63616C62 && v326 == 0xE500000000000000
            || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
          {
            outlined consume of _ShapeStyle_Pack.Fill(*(unint64_t *)v382, *(uint64_t *)&v382[8], *(unint64_t *)&v382[16], v369, v257, v265, v258, v17, v259, v381, 6);
            swift_bridgeObjectRelease();
            v267 = 1.0;
            LODWORD(Width) = 0;
            LODWORD(Height) = 0;
            v266 = 0.0;
            goto LABEL_224;
          }
          aBlock[0] = *(_OWORD *)v382;
          LOWORD(aBlock[1]) = *(_WORD *)&v382[16] & 0x101;
          BYTE2(aBlock[1]) = v382[18] & 1;
          v18 = v369;
          *((_QWORD *)&aBlock[1] + 1) = v369;
          ResolvedMulticolorStyle.environment.getter((uint64_t *)v403);
          v272 = *(_QWORD *)v403;
          v6 = *(_QWORD *)&v403[8];
          if (one-time initialization token for namedTypes != -1)
          {
            v285 = *(_QWORD *)v403;
            swift_once();
            v272 = v285;
          }
          v273 = static SystemColorType.namedTypes;
          v12 = v326;
          v380 = v272;
          if (*(_QWORD *)(static SystemColorType.namedTypes + 16))
          {
            swift_bridgeObjectRetain();
            v274 = specialized __RawDictionaryStorage.find<A>(_:)(*(uint64_t *)&v330, v326);
            if ((v275 & 1) != 0)
            {
              *(_QWORD *)&v379 = v265;
              v276 = *(_BYTE *)(*(_QWORD *)(v273 + 56) + v274);
              swift_bridgeObjectRelease();
              *(_QWORD *)&aBlock[0] = v380;
              *((_QWORD *)&aBlock[0] + 1) = v6;
              EnvironmentValues.systemColorDefinition.getter();
              LOBYTE(v401) = v276;
              *(_QWORD *)&aBlock[0] = v380;
              *((_QWORD *)&aBlock[0] + 1) = v6;
              LODWORD(Width) = (*(float (**)(__int128 *, __int128 *))(v277 + 8))(&v401, aBlock);
              LODWORD(Height) = v278;
              v266 = v279;
              v267 = v280;
              swift_release();
              swift_release();
              outlined consume of _ShapeStyle_Pack.Fill(*(unint64_t *)v382, *(uint64_t *)&v382[8], *(unint64_t *)&v382[16], v369, v257, v265, v258, v17, v368, v381, 6);
              swift_bridgeObjectRelease();
              v12 = v326;
              a5 = v341;
              goto LABEL_226;
            }
            swift_bridgeObjectRelease();
            v272 = v380;
          }
          if (v369)
          {
            *(_QWORD *)&aBlock[0] = v272;
            *((_QWORD *)&aBlock[0] + 1) = v6;
            outlined copy of _ShapeStyle_Pack.Fill(*(id *)v382, *(uint64_t *)&v382[8], *(void **)&v382[16], v369, v257, v265, v258, v17, v368, v381, 6);
            *(_QWORD *)&v379 = v6;
            swift_bridgeObjectRetain();
            v281 = Color.NamedColor.resolveCGColor(in:)((uint64_t *)aBlock, *(uint64_t *)&v330, v326, v369);
            swift_bridgeObjectRelease();
            if (v281)
            {
              v282 = v281;
              v361 = specialized Color.Resolved.init(failableCGColor:)(v282);
              v374 = v283;
              v378 = v284;
              outlined consume of _ShapeStyle_Pack.Fill(*(unint64_t *)v382, *(uint64_t *)&v382[8], *(unint64_t *)&v382[16], v369, v257, v265, v258, v17, v368, v381, 6);

              swift_release();
              swift_release();
              outlined consume of _ShapeStyle_Pack.Fill(*(unint64_t *)v382, *(uint64_t *)&v382[8], *(unint64_t *)&v382[16], v369, v257, v265, v258, v17, v368, v381, 6);
              swift_bridgeObjectRelease();
              LODWORD(Width) = 0;
              LODWORD(Height) = 0;
              v266 = 0.0;
              v267 = 0.0;
              if ((v378 & 1) == 0)
              {
                LODWORD(Height) = HIDWORD(v361);
                LODWORD(Width) = v361;
                v267 = *((float *)&v374 + 1);
                v266 = *(float *)&v374;
              }
              goto LABEL_224;
            }
            outlined consume of _ShapeStyle_Pack.Fill(*(unint64_t *)v382, *(uint64_t *)&v382[8], *(unint64_t *)&v382[16], v369, v257, v265, v258, v17, v368, v381, 6);
            isEscapingClosureAtFileLocation = (uint64_t)aBlock;
          }
          else
          {
            isEscapingClosureAtFileLocation = (uint64_t)aBlock;
          }
          swift_release();
          swift_release();
          outlined consume of _ShapeStyle_Pack.Fill(*(unint64_t *)v382, *(uint64_t *)&v382[8], *(unint64_t *)&v382[16], v369, v257, v265, v258, v17, v368, v381, 6);
          swift_bridgeObjectRelease();
LABEL_214:
          v10 = (uint64_t)v311;
          *(_QWORD *)&aBlock[0] = v311;
          *(__int128 *)((char *)aBlock + 8) = v316;
          v268 = (id)RBSymbolUpdateLayerDefaultColor();
          a5 = v341;
          if (v268)
          {
            v269 = specialized Color.Resolved.init(failableCGColor:)(v268);
            LODWORD(Width) = 0;
            LODWORD(Height) = 0;
            v266 = 0.0;
            v267 = 0.0;
            if ((v271 & 1) == 0)
            {
              LODWORD(Height) = HIDWORD(v269);
              LODWORD(Width) = v269;
              v267 = *((float *)&v270 + 1);
              v266 = *(float *)&v270;
            }
            goto LABEL_226;
          }
          goto LABEL_200;
        }
        outlined consume of _ShapeStyle_Pack.Fill(*(unint64_t *)v382, *(uint64_t *)&v382[8], *(unint64_t *)&v382[16], v369, v257, v265, v258, v17, v259, v381, 6);
        swift_bridgeObjectRelease();
LABEL_224:
        a5 = v341;
LABEL_225:
        v12 = v326;
LABEL_226:
        v332 = 0;
        v333 = 0;
        v340 = 0;
        v339 = 0;
        v338 = 0;
        v337 = 0;
        v335 = 0;
        v336 = 0;
        v331 = 0;
        v314 = 0;
        *(_QWORD *)&v334 = LODWORD(Width) | ((unint64_t)LODWORD(Height) << 32);
        *((_QWORD *)&v334 + 1) = LODWORD(v266) | ((unint64_t)LODWORD(v267) << 32);
        v313 = 255;
        LODWORD(Width) = 1.0;
        v329 = 2;
        v328 = *(double *)&v12;
        v84 = (_QWORD *)MEMORY[0x24BEE4AF8];
        v10 = *(_QWORD *)(MEMORY[0x24BEE4AF8] + 16);
        if (!v10)
        {
LABEL_96:
          v327 = v84;
          v309 = v72 * *(float *)&Width;
          if (*(_QWORD *)a5)
          {
            v324 = v314 | ((unint64_t)COERCE_UNSIGNED_INT(v72 * *(float *)&Width) << 32);
            outlined copy of _ShapeStyle_Pack.Fill((id)v334, *((uint64_t *)&v334 + 1), v340, v339, v338, v337, v336, v335, v332, v331, v314);
            outlined copy of GraphicsBlendMode?(v333, v313);
            swift_bridgeObjectRetain();
            swift_retain();
            while (1)
            {
              v387.origin.x = v330;
              v387.origin.y = v328;
              LOBYTE(v387.size.width) = v329;
              v388 = v334;
              v389 = (unint64_t)v340;
              v390 = v339;
              v391 = v338;
              v392 = v337;
              v393 = v336;
              v394 = v335;
              v395 = v332;
              v396 = v331;
              v397 = v324;
              v398 = v333;
              v399 = v313;
              v400 = v84;
              _ShapeStyle_InterpolatorGroup.addLayer(id:style:)((uint64_t)&v387, (uint64_t)&v388, &v401);
              outlined init with take of _ShapeStyle_InterpolatorGroup.AddLayerResult(&v401, v403);
              outlined init with take of _ShapeStyle_InterpolatorGroup.AddLayerResult((__int128 *)v403, aBlock);
              v111 = _s7SwiftUI29_ShapeStyle_InterpolatorGroupC14AddLayerResult33_3890C65F12EA82A4BC5FBD33046B67FALLOWOg((uint64_t)aBlock);
              v112 = _s7SwiftUI29_ShapeStyle_InterpolatorGroupC14AddLayerResult33_3890C65F12EA82A4BC5FBD33046B67FALLOWOj0_((uint64_t)aBlock);
              if (v111 != 1)
                break;
              *(_OWORD *)v382 = *(_OWORD *)v112;
              v113 = *(void **)(v112 + 24);
              v381 = *(_QWORD *)(v112 + 16);
              v114 = *(void **)(v112 + 40);
              v380 = *(_QWORD *)(v112 + 32);
              v115 = *(_QWORD *)(v112 + 48);
              *(_QWORD *)&v379 = *(_QWORD *)(v112 + 56);
              v116 = *(_QWORD *)(v112 + 72);
              v375 = *(_QWORD *)(v112 + 64);
              v117 = *(_QWORD *)(v112 + 80);
              v118 = *(_QWORD *)(v112 + 88);
              v119 = *(_QWORD *)(v112 + 96);
              v120 = *(_QWORD *)(v112 + 104);
              v121 = *(_QWORD *)(v112 + 112);
              v122 = *(_DWORD *)(v112 + 120);
              v360 = *(_QWORD *)v325;
              v359 = *(_QWORD *)(v325 + 8);
              v358 = *(_QWORD *)(v325 + 16);
              v357 = *(_QWORD *)(v325 + 24);
              v356 = *(_QWORD *)(v325 + 32);
              v355 = *(_QWORD *)(v325 + 40);
              v354 = *(_QWORD *)(v325 + 48);
              v353 = *(_QWORD *)(v325 + 56);
              v352 = *(_QWORD *)(v325 + 64);
              v351 = *(_QWORD *)(v325 + 72);
              v350 = *(_QWORD *)(v325 + 80);
              v349 = *(_QWORD *)(v325 + 88);
              v348 = *(_DWORD *)(v325 + 96);
              *(_OWORD *)(v325 + 64) = 0u;
              *(_OWORD *)(v325 + 80) = 0u;
              *(_OWORD *)(v325 + 32) = 0u;
              *(_OWORD *)(v325 + 48) = 0u;
              *(_OWORD *)v325 = 0u;
              *(_OWORD *)(v325 + 16) = 0u;
              *(_DWORD *)(v325 + 96) = 0x800000;
              *(_DWORD *)(v325 + 144) = v122;
              *(_QWORD *)(v325 + 136) = v121;
              swift_retain_n();
              swift_release();
              v369 = v114;
              if (v120)
              {
                v388 = *(_OWORD *)v382;
                v389 = v381;
                v390 = v113;
                v391 = v380;
                v392 = (unint64_t)v114;
                v393 = v115;
                v394 = v379;
                v395 = v375;
                v396 = v116;
                LOBYTE(v397) = v117;
                HIDWORD(v397) = HIDWORD(v117);
                v398 = v118;
                LOBYTE(v399) = v119;
                v400 = (_QWORD *)v120;
                _ShapeStyle_RenderedShape.render(style:)((uint64_t)&v388);
              }
              v343 = v120;
              v344 = v119;
              v345 = v118;
              v346 = v117;
              v347 = v116;
              v123 = *(float *)(v325 + 244);
              v362 = v113;
              a5 = v341;
              if (v123 == 0.0)
                goto LABEL_105;
              v125 = *(double *)(v325 + 104);
              v124 = *(double *)(v325 + 112);
              v126 = *(double *)(v325 + 120);
              v127 = *(double *)(v325 + 128);
              v430.origin.x = v125;
              v430.origin.y = v124;
              v430.size.width = v126;
              v430.size.height = v127;
              if (CGRectIsEmpty(v430))
              {
LABEL_105:
                outlined consume of DisplayList.Item.Value(*(_QWORD *)(v325 + 192), *(_QWORD *)(v325 + 200));
                *(_OWORD *)(v325 + 192) = xmmword_23527E880;
                *(_QWORD *)(v325 + 208) = 0;
                *(_BYTE *)(v325 + 218) = 0;
                *(_WORD *)(v325 + 216) = 0;
                v128 = *(_QWORD *)(v325 + 136);
                if (v128)
                {
                  v129 = *(unsigned int *)(v325 + 144) | 0x4000001100000000;
                  *(_QWORD *)(v325 + 192) = v128;
                  *(_QWORD *)(v325 + 200) = v129;
                  *(_QWORD *)(v325 + 208) = MEMORY[0x24BEE4AF8];
                  LOBYTE(v388) = *(_BYTE *)(v325 + 224);
                  DisplayList.Item.canonicalize(options:)((char *)&v388);
                  *(_QWORD *)(v325 + 136) = 0;
                  *(_DWORD *)(v325 + 144) = 0;
                  v130 = *(_QWORD *)(v325 + 192);
                  v131 = *(_QWORD *)(v325 + 200);
                  v132 = *(_QWORD *)(v325 + 208);
                  v133 = *(unsigned __int16 *)(v325 + 216) | (*(unsigned __int8 *)(v325 + 218) << 16);
                }
                else
                {
                  v133 = 0;
                  v132 = 0;
                  v130 = 0;
                  v131 = 0xC000000000000000;
                }
                v135 = *(double *)(v325 + 152);
                v134 = *(double *)(v325 + 160);
                Height = *(double *)(v325 + 168);
                Width = *(double *)(v325 + 176);
                v342 = *(_QWORD *)(v325 + 184);
                v136 = *(unsigned int *)(v325 + 220);
                outlined copy of DisplayList.Item.Value(v130, v131);
                if (one-time initialization token for normal != -1)
                  swift_once();
                v137 = static GraphicsBlendMode.normal;
                v138 = byte_254266040;
                v139 = *(_QWORD *)(v325 + 232);
                v140 = *(_BYTE *)(v325 + 240);
                *(_QWORD *)(v325 + 232) = static GraphicsBlendMode.normal;
                *(_BYTE *)(v325 + 240) = v138;
                outlined copy of GraphicsBlendMode(v137, v138);
                outlined consume of GraphicsBlendMode(v139, v140);
                v365 = v130;
                v370 = v131;
                v363 = v132;
                *(_QWORD *)&v382[16] = v133;
                outlined consume of DisplayList.Item.Value(v130, v131);
                *(_DWORD *)(v325 + 244) = 1065353216;
                *(_BYTE *)(v325 + 248) = 0;
                *(_OWORD *)(v325 + 192) = xmmword_23527E880;
                *(_QWORD *)(v325 + 208) = 0;
                *(_BYTE *)(v325 + 218) = 0;
                *(_WORD *)(v325 + 216) = 0;
                v125 = *(double *)(v325 + 104);
                v124 = *(double *)(v325 + 112);
                v126 = *(double *)(v325 + 120);
                v127 = *(double *)(v325 + 128);
                v141 = (uint64_t)v369;
              }
              else
              {
                v364 = *(_BYTE *)(v325 + 224);
                LOBYTE(v388) = v364;
                DisplayList.Item.canonicalize(options:)((char *)&v388);
                v152 = *(_QWORD *)(v325 + 136);
                if (v152)
                {
                  v153 = *(unsigned int *)(v325 + 144);
                  v154 = *(_QWORD *)(v325 + 200);
                  v155 = *(_QWORD *)(v325 + 208);
                  v156 = *(unsigned __int16 *)(v325 + 216) | (*(unsigned __int8 *)(v325 + 218) << 16);
                  v157 = *(_QWORD *)(v325 + 168);
                  v158 = *(void **)(v325 + 176);
                  v159 = *(_QWORD *)(v325 + 184);
                  v160 = *(_QWORD *)(v325 + 192);
                  if (v154 >> 62 != 3 || (v156 & 0xFFFFFF) != 0 || v154 != 0xC000000000000000 || v155 | v160)
                  {
                    type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<DisplayList.Item>, (uint64_t)&type metadata for DisplayList.Item, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
                    v162 = swift_allocObject();
                    *(_OWORD *)(v162 + 16) = xmmword_23527E860;
                    *(_QWORD *)(v162 + 32) = 0;
                    *(_QWORD *)(v162 + 40) = 0;
                    *(_QWORD *)(v162 + 48) = v157;
                    *(_QWORD *)(v162 + 56) = v158;
                    *(_QWORD *)(v162 + 64) = v159;
                    *(_QWORD *)(v162 + 72) = v160;
                    *(_QWORD *)(v162 + 80) = v154;
                    *(_QWORD *)(v162 + 88) = v155;
                    *(_BYTE *)(v162 + 98) = BYTE2(v156);
                    *(_WORD *)(v162 + 96) = v156;
                    *(_DWORD *)(v162 + 100) = 0;
                    v388 = 0uLL;
                    v389 = v157;
                    v390 = v158;
                    v391 = v159;
                    v392 = v160;
                    v393 = v154;
                    v394 = v155;
                    BYTE2(v395) = BYTE2(v156);
                    LOWORD(v395) = v156;
                    HIDWORD(v395) = 0;
                    swift_retain();
                    outlined copy of DisplayList.Item.Value(v160, v154);
                    DisplayList.Item.features.getter();
                    __asm { BR              X10 }
                  }
                  swift_retain();
                  v161 = MEMORY[0x24BEE4AF8];
                  *(_QWORD *)(v325 + 192) = v152;
                  *(_QWORD *)(v325 + 200) = v153 | 0x4000001100000000;
                  *(_QWORD *)(v325 + 208) = v161;
                  *(_BYTE *)(v325 + 218) = 0;
                  *(_WORD *)(v325 + 216) = 0;
                  LOBYTE(v388) = v364;
                  DisplayList.Item.canonicalize(options:)((char *)&v388);
                  outlined consume of DisplayList.Item.Value(v160, 0xC000000000000000);
                  swift_release();
                  *(_QWORD *)(v325 + 136) = 0;
                  *(_DWORD *)(v325 + 144) = 0;
                  a5 = v341;
                }
                v163 = *(_BYTE *)(v325 + 248);
                v164 = *(_QWORD *)(v325 + 192);
                v165 = *(_QWORD *)(v325 + 200);
                v166 = *(_QWORD *)(v325 + 208);
                v383 = *(unsigned __int16 *)(v325 + 216) | (*(unsigned __int8 *)(v325 + 218) << 16);
                if ((v163 & 1) != 0)
                {
                  v167 = v165 >> 62;
                  if (v165 >> 62 != 3 || (v383 & 0xFFFFFF) != 0 || v165 != 0xC000000000000000 || v166 | v164)
                  {
                    v320 = *(unsigned __int16 *)(v325 + 100);
                    v322 = *(_BYTE *)(v325 + 248);
                    v366 = v127;
                    v371 = v126;
                    v387.origin = v307;
                    v387.size = v306;
                    v168 = *(double *)(v325 + 160);
                    v169 = *(_QWORD *)(v325 + 168);
                    v170 = *(void **)(v325 + 176);
                    v171 = *(_QWORD *)(v325 + 184);
                    v172 = *(_DWORD *)(v325 + 220);
                    v318 = *(double *)(v325 + 152);
                    *(double *)&v388 = v318;
                    v312 = v168;
                    *((double *)&v388 + 1) = v168;
                    v389 = v169;
                    v390 = v170;
                    v391 = v171;
                    v392 = v164;
                    v393 = v165;
                    v394 = v166;
                    BYTE2(v395) = BYTE2(v383);
                    LOWORD(v395) = v383;
                    HIDWORD(v395) = v172;
                    DisplayList.Item.addExtent(to:)();
                    origin = v387.origin;
                    size = v387.size;
                    v175 = CGRectIsNull(v387);
                    v176 = 0.0;
                    if (v175)
                      v177 = 0.0;
                    else
                      v177 = origin.x;
                    if (v175)
                      v178 = 0.0;
                    else
                      v178 = origin.y;
                    if (v175)
                      v179 = 0.0;
                    else
                      v179 = size.width;
                    if (!v175)
                      v176 = size.height;
                    v431 = CGRectIntegral(*(CGRect *)(&v176 - 3));
                    v180 = v431.origin.x;
                    *(CGRect *)(v325 + 152) = v431;
                    if ((_DWORD)v167 != 3 || (v383 & 0xFFFFFF) != 0 || v165 != 0xC000000000000000 || v166 | v164)
                    {
                      type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<DisplayList.Item>, (uint64_t)&type metadata for DisplayList.Item, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
                      v182 = swift_allocObject();
                      *(_OWORD *)(v182 + 16) = xmmword_23527E860;
                      *(_QWORD *)(v182 + 32) = 0;
                      *(_QWORD *)(v182 + 40) = 0;
                      *(_QWORD *)(v182 + 48) = v169;
                      *(_QWORD *)(v182 + 56) = v170;
                      *(_QWORD *)(v182 + 64) = v171;
                      *(_QWORD *)(v182 + 72) = v164;
                      *(_QWORD *)(v182 + 80) = v165;
                      *(_QWORD *)(v182 + 88) = v166;
                      *(_BYTE *)(v182 + 98) = BYTE2(v383);
                      *(_WORD *)(v182 + 96) = v383;
                      *(_DWORD *)(v182 + 100) = 0;
                      v388 = 0uLL;
                      v389 = v169;
                      v390 = v170;
                      v391 = v171;
                      v392 = v164;
                      v393 = v165;
                      v394 = v166;
                      BYTE2(v395) = BYTE2(v383);
                      LOWORD(v395) = v383;
                      HIDWORD(v395) = 0;
                      outlined copy of DisplayList.Item.Value(v164, v165);
                      DisplayList.Item.features.getter();
                      __asm { BR              X9 }
                    }
                    v181 = MEMORY[0x24BEE4AF8];
                    v126 = v371;
                    v127 = v366;
                    v183 = v431.origin.y - v312;
                    v184 = swift_allocObject();
                    *(_QWORD *)(v184 + 16) = v181;
                    *(_WORD *)(v184 + 24) = 0;
                    *(_BYTE *)(v184 + 26) = 0;
                    *(double *)(v184 + 32) = v180 - v318;
                    *(CGFloat *)(v184 + 40) = v183;
                    *(_BYTE *)(v184 + 48) = 0;
                    *(_DWORD *)(v184 + 52) = 0;
                    *(_BYTE *)(v184 + 56) = 1;
                    *(_DWORD *)(v184 + 60) = 161;
                    *(_BYTE *)(v184 + 64) = 3;
                    outlined consume of DisplayList.Item.Value(v164, 0xC000000000000000);
                    v166 = 0;
                    v164 = v184 | 0x9000000000000000;
                    v165 = v320;
                    *(_QWORD *)(v325 + 192) = v184 | 0x9000000000000000;
                    *(_QWORD *)(v325 + 200) = v320;
                    *(_QWORD *)(v325 + 208) = 0;
                    *(_BYTE *)(v325 + 218) = 0;
                    *(_WORD *)(v325 + 216) = 0;
                    v163 = v322;
                  }
                  else
                  {
                    v165 = 0xC000000000000000;
                  }
                  v383 = 0;
                  *(_BYTE *)(v325 + 248) = v163 & 0xFE;
                }
                v141 = (uint64_t)v369;
                v185 = *(_QWORD *)(v325 + 232);
                v367 = *(unsigned __int8 *)(v325 + 240);
                if ((v367 & 1) != 0 || *(_QWORD *)(v325 + 232))
                {
                  v186 = *(_QWORD *)(v325 + 168);
                  v187 = *(void **)(v325 + 176);
                  v188 = *(_QWORD *)(v325 + 184);
                  v189 = v165 >> 62;
                  v372 = v165;
                  if (v165 >> 62 != 3 || (v383 & 0xFFFFFF) != 0 || v165 != 0xC000000000000000 || v166 | v164)
                  {
                    type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<DisplayList.Item>, (uint64_t)&type metadata for DisplayList.Item, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
                    v191 = v165;
                    v192 = swift_allocObject();
                    *(_OWORD *)(v192 + 16) = xmmword_23527E860;
                    *(_QWORD *)(v192 + 32) = 0;
                    *(_QWORD *)(v192 + 40) = 0;
                    *(_QWORD *)(v192 + 48) = v186;
                    *(_QWORD *)(v192 + 56) = v187;
                    *(_QWORD *)(v192 + 64) = v188;
                    *(_QWORD *)(v192 + 72) = v164;
                    *(_QWORD *)(v192 + 80) = v191;
                    *(_QWORD *)(v192 + 88) = v166;
                    *(_BYTE *)(v192 + 98) = BYTE2(v383);
                    *(_WORD *)(v192 + 96) = v383;
                    *(_DWORD *)(v192 + 100) = 0;
                    v388 = 0uLL;
                    v389 = v186;
                    v390 = v187;
                    v391 = v188;
                    v392 = v164;
                    v393 = v191;
                    v394 = v166;
                    BYTE2(v395) = BYTE2(v383);
                    LOWORD(v395) = v383;
                    HIDWORD(v395) = 0;
                    outlined copy of GraphicsBlendMode(v185, v367);
                    outlined copy of DisplayList.Item.Value(v164, v191);
                    DisplayList.Item.features.getter();
                    __asm { BR              X10 }
                  }
                  outlined copy of GraphicsBlendMode(v185, v367);
                  v190 = MEMORY[0x24BEE4AF8];
                  *(_WORD *)(v325 + 216) = 0;
                  *(_QWORD *)(v325 + 192) = v185;
                  *(_QWORD *)(v325 + 200) = v367 | 0x4000000500000000;
                  *(_QWORD *)(v325 + 208) = v190;
                  *(_BYTE *)(v325 + 218) = 0;
                  LOBYTE(v388) = v364;
                  DisplayList.Item.canonicalize(options:)((char *)&v388);
                  outlined consume of DisplayList.Item.Value(v164, v372);
                  v164 = *(_QWORD *)(v325 + 192);
                  v165 = *(_QWORD *)(v325 + 200);
                  v166 = *(_QWORD *)(v325 + 208);
                  v383 = *(unsigned __int16 *)(v325 + 216) | (*(unsigned __int8 *)(v325 + 218) << 16);
                  v141 = (uint64_t)v369;
                }
                if (v123 == 1.0)
                {
                  v193 = v383;
                }
                else
                {
                  v194 = *(_QWORD *)(v325 + 168);
                  v195 = *(void **)(v325 + 176);
                  v196 = *(_QWORD *)(v325 + 184);
                  if (v165 >> 62 != 3
                    || ((v383 & 0xFFFFFF) == 0 ? (v197 = v165 == 0xC000000000000000) : (v197 = 0),
                        v197 ? (v198 = (v166 | v164) == 0) : (v198 = 0),
                        !v198))
                  {
                    type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<DisplayList.Item>, (uint64_t)&type metadata for DisplayList.Item, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
                    v199 = swift_allocObject();
                    *(_OWORD *)(v199 + 16) = xmmword_23527E860;
                    *(_QWORD *)(v199 + 32) = 0;
                    *(_QWORD *)(v199 + 40) = 0;
                    *(_QWORD *)(v199 + 48) = v194;
                    *(_QWORD *)(v199 + 56) = v195;
                    *(_QWORD *)(v199 + 64) = v196;
                    *(_QWORD *)(v199 + 72) = v164;
                    *(_QWORD *)(v199 + 80) = v165;
                    *(_QWORD *)(v199 + 88) = v166;
                    *(_BYTE *)(v199 + 98) = BYTE2(v383);
                    *(_WORD *)(v199 + 96) = v383;
                    *(_DWORD *)(v199 + 100) = 0;
                    v388 = 0uLL;
                    v389 = v194;
                    v390 = v195;
                    v391 = v196;
                    v392 = v164;
                    v393 = v165;
                    v394 = v166;
                    BYTE2(v395) = BYTE2(v383);
                    LOWORD(v395) = v383;
                    HIDWORD(v395) = 0;
                    outlined copy of DisplayList.Item.Value(v164, v165);
                    DisplayList.Item.features.getter();
                    __asm { BR              X10 }
                  }
                  v200 = v165;
                  v201 = MEMORY[0x24BEE4AF8];
                  *(_WORD *)(v325 + 216) = 0;
                  *(_QWORD *)(v325 + 192) = LODWORD(v123);
                  *(_QWORD *)(v325 + 200) = 0x4000000400000000;
                  *(_QWORD *)(v325 + 208) = v201;
                  *(_BYTE *)(v325 + 218) = 0;
                  LOBYTE(v388) = v364;
                  DisplayList.Item.canonicalize(options:)((char *)&v388);
                  outlined consume of DisplayList.Item.Value(v164, v200);
                  v164 = *(_QWORD *)(v325 + 192);
                  v165 = *(_QWORD *)(v325 + 200);
                  v166 = *(_QWORD *)(v325 + 208);
                  v193 = *(unsigned __int16 *)(v325 + 216) | (*(unsigned __int8 *)(v325 + 218) << 16);
                  v141 = (uint64_t)v369;
                }
                v135 = *(double *)(v325 + 152);
                v134 = *(double *)(v325 + 160);
                Height = *(double *)(v325 + 168);
                Width = *(double *)(v325 + 176);
                v342 = *(_QWORD *)(v325 + 184);
                v136 = *(unsigned int *)(v325 + 220);
                outlined copy of DisplayList.Item.Value(v164, v165);
                if (one-time initialization token for normal != -1)
                  swift_once();
                v202 = static GraphicsBlendMode.normal;
                v203 = byte_254266040;
                *(_QWORD *)(v325 + 232) = static GraphicsBlendMode.normal;
                *(_BYTE *)(v325 + 240) = v203;
                outlined copy of GraphicsBlendMode(v202, v203);
                outlined consume of GraphicsBlendMode(v185, v367);
                v365 = v164;
                v370 = v165;
                v363 = v166;
                *(_QWORD *)&v382[16] = v193;
                outlined consume of DisplayList.Item.Value(v164, v165);
                *(_DWORD *)(v325 + 244) = 1065353216;
                *(_BYTE *)(v325 + 248) = 0;
                *(_OWORD *)(v325 + 192) = xmmword_23527E880;
                *(_QWORD *)(v325 + 208) = 0;
                *(_BYTE *)(v325 + 218) = 0;
                *(_WORD *)(v325 + 216) = 0;
              }
              *(double *)(v325 + 152) = v125;
              *(double *)(v325 + 160) = v124;
              *(CGFloat *)(v325 + 168) = v126;
              *(CGFloat *)(v325 + 176) = v127;
              v143 = *(uint64_t *)(a5 + 8);
              v142 = *(uint64_t *)(a5 + 16);
              v145 = *(_QWORD *)(a5 + 24);
              v144 = *(_QWORD *)(a5 + 32);
              v146 = *(_QWORD *)(a5 + 72);
              v147 = *(_QWORD *)(a5 + 56);
              if (v146 >> 30)
              {
                if (v146 >> 30 == 1)
                {
                  v319 = *(_QWORD *)(a5 + 40);
                  v321 = *(_QWORD *)(a5 + 48);
                  v317 = *(_QWORD *)(a5 + 64);
                  outlined copy of _ShapeStyle_RenderedLayers.Layers(v143, v142, v145, v144, v319, v321, v147, v317, *(_QWORD *)(a5 + 72));
                  outlined copy of DisplayList.Item.Value(v365, v370);
                  v148 = (_QWORD *)v143;
                  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
                    v148 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v143 + 16) + 1, 1, (_QWORD *)v143);
                  v150 = v148[2];
                  v149 = v148[3];
                  if (v150 >= v149 >> 1)
                    v148 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v149 > 1), v150 + 1, 1, v148);
                  v148[2] = v150 + 1;
                  v151 = (double *)&v148[9 * v150];
                  v151[4] = v135 - v125;
                  v151[5] = v134 - v124;
                  v151[6] = Height;
                  v151[7] = Width;
                  *((_QWORD *)v151 + 8) = v342;
                  *((_QWORD *)v151 + 9) = v365;
                  *((_QWORD *)v151 + 10) = v370;
                  *((_QWORD *)v151 + 11) = v363;
                  *((_BYTE *)v151 + 98) = v382[18];
                  *((_WORD *)v151 + 48) = *(_WORD *)&v382[16];
                  *((_DWORD *)v151 + 25) = 0;
                  outlined consume of DisplayList.Item.Value(v365, v370);
                  outlined consume of _ShapeStyle_RenderedLayers.Layers(v143, v142, v145, v144, v319, v321, v147, v317, v146);
                  a5 = v341;
                  *(_QWORD *)(v341 + 8) = v148;
                  *(_OWORD *)v323 = 0u;
                  *(_OWORD *)(v323 + 16) = 0u;
                  *(_OWORD *)(v323 + 32) = 0u;
                  v110 = 0x40000000;
                  *(_QWORD *)(v323 + 48) = 0;
                  v141 = (uint64_t)v369;
                }
                else
                {
                  *(double *)(a5 + 8) = v135;
                  *(double *)(a5 + 16) = v134;
                  v110 = *(_DWORD *)&v382[16] & 0xFFFFFF | (unint64_t)(v136 << 32);
                  *(CGFloat *)(a5 + 24) = Height;
                  *(CGFloat *)(a5 + 32) = Width;
                  *(_QWORD *)(a5 + 40) = v342;
                  *(_QWORD *)(a5 + 48) = v365;
                  *(_QWORD *)(a5 + 56) = v370;
                  *(_QWORD *)(a5 + 64) = v363;
                }
              }
              else
              {
                v104 = *(double *)&v143 - v125;
                v105 = *(double *)&v142 - v124;
                v106 = *(_QWORD *)(a5 + 48);
                v107 = *(_QWORD *)(a5 + 40);
                v108 = *(_QWORD *)(a5 + 64);
                type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<DisplayList.Item>, (uint64_t)&type metadata for DisplayList.Item, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
                v109 = swift_allocObject();
                *(_OWORD *)(v109 + 16) = xmmword_2352828C0;
                *(double *)(v109 + 32) = v104;
                *(double *)(v109 + 40) = v105;
                *(_QWORD *)(v109 + 48) = v145;
                *(_QWORD *)(v109 + 56) = v144;
                *(_QWORD *)(v109 + 64) = v107;
                *(_QWORD *)(v109 + 72) = v106;
                *(_QWORD *)(v109 + 80) = v147;
                *(_QWORD *)(v109 + 88) = v108;
                *(_BYTE *)(v109 + 98) = BYTE2(v146);
                *(_WORD *)(v109 + 96) = v146;
                *(_DWORD *)(v109 + 100) = 0;
                *(double *)(v109 + 104) = v135 - v125;
                *(double *)(v109 + 112) = v134 - v124;
                *(CGFloat *)(v109 + 120) = Height;
                *(CGFloat *)(v109 + 128) = Width;
                *(_QWORD *)(v109 + 136) = v342;
                *(_QWORD *)(v109 + 144) = v365;
                *(_QWORD *)(v109 + 152) = v370;
                *(_QWORD *)(v109 + 160) = v363;
                *(_BYTE *)(v109 + 170) = v382[18];
                *(_WORD *)(v109 + 168) = *(_WORD *)&v382[16];
                *(_DWORD *)(v109 + 172) = 0;
                *(_QWORD *)(a5 + 8) = v109;
                *(_OWORD *)v323 = 0u;
                *(_OWORD *)(v323 + 16) = 0u;
                *(_OWORD *)(v323 + 32) = 0u;
                v110 = 0x40000000;
                *(_QWORD *)(v323 + 48) = 0;
              }
              *(_QWORD *)(a5 + 72) = v110;
              outlined consume of _ShapeStyle_RenderedShape.Shape(*(_QWORD *)v325, *(_QWORD *)(v325 + 8), *(_QWORD *)(v325 + 16), *(_QWORD *)(v325 + 24), *(_QWORD *)(v325 + 32), *(_QWORD *)(v325 + 40), *(_QWORD *)(v325 + 48), *(_QWORD *)(v325 + 56), *(_QWORD *)(v325 + 64), *(_QWORD *)(v325 + 72), *(_QWORD *)(v325 + 80), *(_QWORD *)(v325 + 88), *(_DWORD *)(v325 + 96));
              swift_release_n();
              outlined consume of _ShapeStyle_Pack.Style?(*(unint64_t *)v382, *(uint64_t *)&v382[8], v381, v362, v380, v141, v115, v379, v375, v347, v346, v345, v344, v343);
              *(_QWORD *)v325 = v360;
              *(_QWORD *)(v325 + 8) = v359;
              *(_QWORD *)(v325 + 16) = v358;
              *(_QWORD *)(v325 + 24) = v357;
              *(_QWORD *)(v325 + 32) = v356;
              *(_QWORD *)(v325 + 40) = v355;
              *(_QWORD *)(v325 + 48) = v354;
              *(_QWORD *)(v325 + 56) = v353;
              *(_QWORD *)(v325 + 64) = v352;
              *(_QWORD *)(v325 + 72) = v351;
              *(_QWORD *)(v325 + 80) = v350;
              *(_QWORD *)(v325 + 88) = v349;
              *(_DWORD *)(v325 + 96) = v348;
              v84 = v327;
            }
            v204 = *(_QWORD *)v112;
            v205 = *(_DWORD *)(v112 + 8);
            swift_release();
            swift_release();
            outlined consume of _ShapeStyle_Pack.Fill(v334, *((uint64_t *)&v334 + 1), (unint64_t)v340, v339, v338, v337, v336, v335, v332, v331, v314);
            outlined consume of GraphicsBlendMode?(v333, v313);
            swift_bridgeObjectRelease();
            outlined consume of _ShapeStyle_LayerID(*(uint64_t *)&v330, *(uint64_t *)&v328, v329);
            *(_QWORD *)(v325 + 136) = v204;
            *(_DWORD *)(v325 + 144) = v205;
            if ((v305 & 1) != 0)
            {
LABEL_177:
              v208 = v304;
              if (v304)
              {
                v209 = v304;
                v210 = v316;
              }
              else
              {
                v211 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BE7EEF8]), sel_init);
                v210 = v316;
                if (!v211)
                  __break(1u);
                v304 = v211;
                v208 = v211;
                v209 = 0;
              }
              RBDisplayListGetState();
              v212 = v209;

              *(_QWORD *)v403 = v311;
              *(_QWORD *)&v403[8] = v210;
              *(_QWORD *)&v403[16] = *((_QWORD *)&v316 + 1);
              RBSymbolUpdateLayerDraw();
              v213 = *(_OWORD *)(v325 + 208);
              v424 = *(_OWORD *)(v325 + 192);
              v425 = v213;
              *(_OWORD *)v426 = *(_OWORD *)(v325 + 224);
              *(_OWORD *)&v426[9] = *(_OWORD *)(v325 + 233);
              v214 = *(_OWORD *)(v325 + 144);
              v420 = *(_OWORD *)(v325 + 128);
              v421 = v214;
              v215 = *(_OWORD *)(v325 + 176);
              v422 = *(_OWORD *)(v325 + 160);
              v423 = v215;
              v216 = *(_OWORD *)(v325 + 80);
              v416 = *(_OWORD *)(v325 + 64);
              v417 = v216;
              v217 = *(_OWORD *)(v325 + 112);
              v418 = *(_OWORD *)(v325 + 96);
              v419 = v217;
              v218 = *(_OWORD *)(v325 + 16);
              aBlock[0] = *(_OWORD *)v325;
              aBlock[1] = v218;
              v219 = *(_OWORD *)(v325 + 48);
              v414 = *(_OWORD *)(v325 + 32);
              v415 = v219;
              outlined retain of _ShapeStyle_RenderedShape((uint64_t)aBlock);
              v220 = objc_msgSend(v208, sel_moveContents);
              objc_msgSend(v220, sel_boundingRect);
              v221 = v432.origin.x;
              v222 = v432.origin.y;
              v223 = v432.size.width;
              v224 = v432.size.height;
              v225 = CGRectIsNull(v432);
              if (v225)
                v226 = 0.0;
              else
                v226 = v221;
              *(_QWORD *)v382 = *(_QWORD *)&aBlock[0];
              v227 = *(_QWORD *)&aBlock[1];
              v381 = *((_QWORD *)&aBlock[0] + 1);
              if (v225)
                v228 = 0.0;
              else
                v228 = v222;
              if (v225)
                v229 = 0.0;
              else
                v229 = v223;
              if (v225)
                v230 = 0.0;
              else
                v230 = v224;
              v231 = *((_QWORD *)&aBlock[1] + 1);
              v380 = v414;
              v232 = v415;
              *(_QWORD *)&v379 = *((_QWORD *)&v414 + 1);
              v233 = *((_QWORD *)&v415 + 1);
              v376 = v416;
              v234 = v417;
              v235 = v418;
              *(_QWORD *)&v382[16] = WORD2(v418);
              *(_QWORD *)&v382[8] = *((_QWORD *)&v423 + 1);
              v433 = CGRectIntegral(*(CGRect *)&v226);
              Width = v433.origin.x;
              Height = v433.origin.y;
              v236 = v433.size.width;
              v237 = v433.size.height;
              v238 = swift_allocObject();
              *(_QWORD *)(v238 + 16) = v220;
              *(CGFloat *)(v238 + 24) = Width;
              *(CGFloat *)(v238 + 32) = Height;
              *(_BYTE *)(v238 + 40) = 0;
              *(_DWORD *)(v238 + 44) = 0;
              *(_BYTE *)(v238 + 48) = 1;
              *(_DWORD *)(v238 + 52) = 224;
              *(_BYTE *)(v238 + 56) = 3;
              outlined release of _ShapeStyle_RenderedShape((uint64_t)aBlock);
              outlined consume of _ShapeStyle_RenderedShape.Shape(*(uint64_t *)v382, v381, v227, v231, v380, v379, v232, v233, v376, *((uint64_t *)&v376 + 1), v234, *((uint64_t *)&v234 + 1), v235);
              *(CGFloat *)v325 = Width + 0.0;
              *(CGFloat *)(v325 + 8) = Height + 0.0;
              *(CGFloat *)(v325 + 16) = v236;
              *(CGFloat *)(v325 + 24) = v237;
              *(_QWORD *)(v325 + 32) = *(_QWORD *)&v382[8];
              *(_QWORD *)(v325 + 40) = v238 | 0xA000000000000000;
              *(_QWORD *)(v325 + 48) = *(_QWORD *)&v382[16];
              *(_OWORD *)(v325 + 56) = 0u;
              *(_OWORD *)(v325 + 72) = 0u;
              *(_QWORD *)(v325 + 88) = 0;
              *(_DWORD *)(v325 + 96) = 6291456;
              if (v299 == 0x7FF0000000000000)
              {
                v239 = v325;
                a5 = v341;
                goto LABEL_198;
              }
              a5 = v341;
              v17 = (uint64_t)v327;
              v240 = v309;
              v239 = v325;
              if ((v426[24] & 1) == 0)
                *(_BYTE *)(v325 + 248) = v426[24] | 1;
LABEL_199:
              aBlock[0] = v334;
              *(_QWORD *)&aBlock[1] = v340;
              *((_QWORD *)&aBlock[1] + 1) = v339;
              *(_QWORD *)&v414 = v338;
              *((_QWORD *)&v414 + 1) = v337;
              *(_QWORD *)&v415 = v336;
              *((_QWORD *)&v415 + 1) = v335;
              v15 = v331;
              v12 = v332;
              *(_QWORD *)&v416 = v332;
              *((_QWORD *)&v416 + 1) = v331;
              v6 = v314;
              LOBYTE(v417) = v314;
              *((float *)&v417 + 1) = v240;
              v18 = (_QWORD *)v333;
              *((_QWORD *)&v417 + 1) = v333;
              v19 = v313;
              LOBYTE(v418) = v313;
              *((_QWORD *)&v418 + 1) = v17;
              _ShapeStyle_RenderedShape.render(style:)((uint64_t)aBlock);
              _ShapeStyle_RenderedLayers.endLayer(shape:)(v239);
              isEscapingClosureAtFileLocation = (uint64_t)aBlock;
              outlined consume of _ShapeStyle_Pack.Fill(v334, *((uint64_t *)&v334 + 1), (unint64_t)v340, v339, v338, v337, v336, v335, v332, v331, v314);
              outlined consume of GraphicsBlendMode?(v333, v313);
              v10 = (uint64_t)v311;
LABEL_200:
              swift_bridgeObjectRelease();
              goto LABEL_47;
            }
          }
          else
          {
            outlined consume of _ShapeStyle_LayerID(*(uint64_t *)&v330, *(uint64_t *)&v328, v329);
            if ((v305 & 1) != 0)
              goto LABEL_177;
          }
          v414 = 0u;
          memset(aBlock, 0, sizeof(aBlock));
          *(_QWORD *)v403 = v311;
          *(_OWORD *)&v403[8] = v316;
          v206 = RBSymbolUpdateLayerPath();
          if (RBPathIsNull(v206, v207))
            goto LABEL_177;
          *(_OWORD *)v403 = aBlock[0];
          *(_OWORD *)&v403[16] = aBlock[1];
          v404 = v414;
          v241 = RBPathCopyTransformedPath();
          v243 = v242;
          type metadata accessor for Path.PathBox();
          v244 = swift_allocObject();
          *(_OWORD *)(v244 + 24) = 0u;
          *(_OWORD *)(v244 + 104) = 0u;
          *(_OWORD *)(v244 + 88) = 0u;
          *(_OWORD *)(v244 + 72) = 0u;
          *(_OWORD *)(v244 + 56) = 0u;
          *(_OWORD *)(v244 + 40) = 0u;
          *(_BYTE *)(v244 + 16) = 1;
          *(_QWORD *)(v244 + 24) = v241;
          *(_QWORD *)(v244 + 32) = v243;
          v239 = v325;
          outlined consume of _ShapeStyle_RenderedShape.Shape(*(_QWORD *)v325, *(_QWORD *)(v325 + 8), *(_QWORD *)(v325 + 16), *(_QWORD *)(v325 + 24), *(_QWORD *)(v325 + 32), *(_QWORD *)(v325 + 40), *(_QWORD *)(v325 + 48), *(_QWORD *)(v325 + 56), *(_QWORD *)(v325 + 64), *(_QWORD *)(v325 + 72), *(_QWORD *)(v325 + 80), *(_QWORD *)(v325 + 88), *(_DWORD *)(v325 + 96));
          *(_QWORD *)v325 = v244;
          *(_QWORD *)(v325 + 16) = 0;
          *(_QWORD *)(v325 + 24) = 0;
          *(_QWORD *)(v325 + 8) = 0;
          *(_QWORD *)(v325 + 32) = 65541;
          *(_OWORD *)(v325 + 40) = 0u;
          *(_OWORD *)(v325 + 56) = 0u;
          *(_OWORD *)(v325 + 72) = 0u;
          *(_OWORD *)(v325 + 84) = 0u;
LABEL_198:
          v17 = (uint64_t)v327;
          v240 = v309;
          goto LABEL_199;
        }
LABEL_66:
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v84 = specialized _ArrayBuffer._consumeAndCreateNew()(v84);
        v85 = v84[2];
        v86 = v10 - 1;
        if (v85 < v10 - 1)
          v86 = v84[2];
        if (v86 > 1)
        {
          v98 = v86 + 1;
          v99 = v98 & 1;
          if ((v98 & 1) == 0)
            v99 = 2;
          v87 = v98 - v99;
          v100 = (float *)(v84 + 19);
          v101 = v87;
          do
          {
            v102 = v72 * *v100;
            *(v100 - 18) = v72 * *(v100 - 18);
            *v100 = v102;
            v100 += 36;
            v101 -= 2;
          }
          while (v101);
        }
        else
        {
          v87 = 0;
        }
        v103 = 72 * v87 + 80;
        while (v87 < v85)
        {
          ++v87;
          *(float *)((char *)v84 + v103) = v72 * *(float *)((char *)v84 + v103);
          v103 += 72;
          if (v10 == v87)
            goto LABEL_96;
        }
        __break(1u);
LABEL_246:

LABEL_247:
        objc_msgSend(v294, sel_endUpdate_, v10);
LABEL_256:
        outlined release of _ShapeStyle_Pack.Slice((uint64_t)&v384);
        v66 = 0;
        return outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed @escaping @callee_guaranteed (@unowned Bool) -> ()) -> ())?((uint64_t)v66);
      default:
        goto LABEL_47;
    }
  }
}

uint64_t outlined retain of _ShapeStyle_RenderedShape(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  char v5;

  v2 = *(_QWORD *)(a1 + 192);
  v3 = *(_QWORD *)(a1 + 200);
  v4 = *(_QWORD *)(a1 + 232);
  v5 = *(_BYTE *)(a1 + 240);
  outlined copy of _ShapeStyle_RenderedShape.Shape(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_DWORD *)(a1 + 96));
  swift_retain();
  outlined copy of DisplayList.Item.Value(v2, v3);
  outlined copy of GraphicsBlendMode(v4, v5);
  return a1;
}

uint64_t destroy for _ShapeStyle_RenderedShape(uint64_t a1)
{
  outlined consume of _ShapeStyle_RenderedShape.Shape(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_DWORD *)(a1 + 96));
  swift_release();
  outlined consume of DisplayList.Item.Value(*(_QWORD *)(a1 + 192), *(_QWORD *)(a1 + 200));
  return outlined consume of GraphicsBlendMode(*(_QWORD *)(a1 + 232), *(_BYTE *)(a1 + 240));
}

uint64_t initializeWithCopy for _ShapeStyle_RenderedShape(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a2 + 24);
  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a2 + 40);
  v10 = *(_QWORD *)(a2 + 48);
  v11 = *(_QWORD *)(a2 + 56);
  v17 = *(_QWORD *)(a2 + 64);
  v18 = *(_QWORD *)(a2 + 72);
  v19 = *(_QWORD *)(a2 + 80);
  v20 = *(_QWORD *)(a2 + 88);
  v21 = *(_DWORD *)(a2 + 96);
  outlined copy of _ShapeStyle_RenderedShape.Shape(*(_QWORD *)a2, v5, v6, v7, v8, v9, v10, v11, v17, v18, v19, v20, v21);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  *(_QWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 24) = v7;
  *(_QWORD *)(a1 + 32) = v8;
  *(_QWORD *)(a1 + 40) = v9;
  *(_QWORD *)(a1 + 48) = v10;
  *(_QWORD *)(a1 + 56) = v11;
  *(_QWORD *)(a1 + 64) = v17;
  *(_QWORD *)(a1 + 72) = v18;
  *(_QWORD *)(a1 + 80) = v19;
  *(_QWORD *)(a1 + 88) = v20;
  *(_DWORD *)(a1 + 96) = v21;
  *(_WORD *)(a1 + 100) = *(_WORD *)(a2 + 100);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  *(_DWORD *)(a1 + 144) = *(_DWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
  v12 = *(_QWORD *)(a2 + 192);
  *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
  LOBYTE(v8) = *(_BYTE *)(a2 + 218);
  LOWORD(v9) = *(_WORD *)(a2 + 216);
  v13 = *(_QWORD *)(a2 + 200);
  v14 = *(_QWORD *)(a2 + 208);
  swift_retain();
  outlined copy of DisplayList.Item.Value(v12, v13);
  *(_QWORD *)(a1 + 192) = v12;
  *(_QWORD *)(a1 + 200) = v13;
  *(_QWORD *)(a1 + 208) = v14;
  *(_BYTE *)(a1 + 218) = v8;
  *(_WORD *)(a1 + 216) = v9;
  *(_DWORD *)(a1 + 220) = *(_DWORD *)(a2 + 220);
  *(_BYTE *)(a1 + 224) = *(_BYTE *)(a2 + 224);
  *(_DWORD *)(a1 + 228) = *(_DWORD *)(a2 + 228);
  v15 = *(_QWORD *)(a2 + 232);
  LOBYTE(v5) = *(_BYTE *)(a2 + 240);
  outlined copy of GraphicsBlendMode(v15, v5);
  *(_QWORD *)(a1 + 232) = v15;
  *(_BYTE *)(a1 + 240) = v5;
  *(_DWORD *)(a1 + 244) = *(_DWORD *)(a2 + 244);
  *(_BYTE *)(a1 + 248) = *(_BYTE *)(a2 + 248);
  return a1;
}

uint64_t assignWithCopy for _ShapeStyle_RenderedShape(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int v37;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a2 + 24);
  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a2 + 40);
  v10 = *(_QWORD *)(a2 + 48);
  v11 = *(_QWORD *)(a2 + 56);
  v33 = *(_QWORD *)(a2 + 64);
  v34 = *(_QWORD *)(a2 + 72);
  v35 = *(_QWORD *)(a2 + 80);
  v36 = *(_QWORD *)(a2 + 88);
  v37 = *(_DWORD *)(a2 + 96);
  outlined copy of _ShapeStyle_RenderedShape.Shape(*(_QWORD *)a2, v5, v6, v7, v8, v9, v10, v11, v33, v34, v35, v36, v37);
  v12 = *(_QWORD *)a1;
  v13 = *(_QWORD *)(a1 + 8);
  v14 = *(_QWORD *)(a1 + 16);
  v15 = *(_QWORD *)(a1 + 24);
  v16 = *(_QWORD *)(a1 + 32);
  v17 = *(_QWORD *)(a1 + 40);
  v18 = *(_QWORD *)(a1 + 48);
  v19 = *(_QWORD *)(a1 + 56);
  v20 = *(_OWORD *)(a1 + 64);
  v21 = *(_QWORD *)(a1 + 80);
  v22 = *(_QWORD *)(a1 + 88);
  v23 = *(_DWORD *)(a1 + 96);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  *(_QWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 24) = v7;
  *(_QWORD *)(a1 + 32) = v8;
  *(_QWORD *)(a1 + 40) = v9;
  *(_QWORD *)(a1 + 48) = v10;
  *(_QWORD *)(a1 + 56) = v11;
  *(_QWORD *)(a1 + 64) = v33;
  *(_QWORD *)(a1 + 72) = v34;
  *(_QWORD *)(a1 + 80) = v35;
  *(_QWORD *)(a1 + 88) = v36;
  *(_DWORD *)(a1 + 96) = v37;
  outlined consume of _ShapeStyle_RenderedShape.Shape(v12, v13, v14, v15, v16, v17, v18, v19, v20, *((uint64_t *)&v20 + 1), v21, v22, v23);
  *(_WORD *)(a1 + 100) = *(_WORD *)(a2 + 100);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 144) = *(_DWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
  *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
  *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
  v24 = *(_QWORD *)(a2 + 192);
  v25 = *(_QWORD *)(a2 + 200);
  v26 = *(_QWORD *)(a2 + 208);
  LOBYTE(v7) = *(_BYTE *)(a2 + 218);
  LOWORD(v8) = *(_WORD *)(a2 + 216);
  outlined copy of DisplayList.Item.Value(v24, v25);
  v27 = *(_QWORD *)(a1 + 192);
  v28 = *(_QWORD *)(a1 + 200);
  *(_QWORD *)(a1 + 192) = v24;
  *(_QWORD *)(a1 + 200) = v25;
  *(_QWORD *)(a1 + 208) = v26;
  *(_WORD *)(a1 + 216) = v8;
  *(_BYTE *)(a1 + 218) = v7;
  outlined consume of DisplayList.Item.Value(v27, v28);
  *(_DWORD *)(a1 + 220) = *(_DWORD *)(a2 + 220);
  *(_BYTE *)(a1 + 224) = *(_BYTE *)(a2 + 224);
  *(_DWORD *)(a1 + 228) = *(_DWORD *)(a2 + 228);
  v29 = *(_QWORD *)(a2 + 232);
  LOBYTE(v25) = *(_BYTE *)(a2 + 240);
  outlined copy of GraphicsBlendMode(v29, v25);
  v30 = *(_QWORD *)(a1 + 232);
  v31 = *(_BYTE *)(a1 + 240);
  *(_QWORD *)(a1 + 232) = v29;
  *(_BYTE *)(a1 + 240) = v25;
  outlined consume of GraphicsBlendMode(v30, v31);
  *(_DWORD *)(a1 + 244) = *(_DWORD *)(a2 + 244);
  *(_BYTE *)(a1 + 248) = *(_BYTE *)(a2 + 248);
  return a1;
}

__n128 __swift_memcpy249_8(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __n128 result;
  __int128 v12;
  __int128 v13;

  v2 = *a2;
  v3 = a2[1];
  v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  v5 = a2[4];
  v6 = a2[5];
  v7 = a2[7];
  *(_OWORD *)(a1 + 96) = a2[6];
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  v8 = a2[8];
  v9 = a2[9];
  v10 = a2[11];
  *(_OWORD *)(a1 + 160) = a2[10];
  *(_OWORD *)(a1 + 176) = v10;
  *(_OWORD *)(a1 + 128) = v8;
  *(_OWORD *)(a1 + 144) = v9;
  result = (__n128)a2[12];
  v12 = a2[13];
  v13 = a2[14];
  *(_OWORD *)(a1 + 233) = *(__int128 *)((char *)a2 + 233);
  *(_OWORD *)(a1 + 208) = v12;
  *(_OWORD *)(a1 + 224) = v13;
  *(__n128 *)(a1 + 192) = result;
  return result;
}

uint64_t assignWithTake for _ShapeStyle_RenderedShape(uint64_t a1, uint64_t a2)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  char v20;
  __int16 v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  uint64_t v25;
  char v26;

  v4 = *(_DWORD *)(a2 + 96);
  v5 = *(_QWORD *)a1;
  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(_QWORD *)(a1 + 16);
  v8 = *(_QWORD *)(a1 + 24);
  v9 = *(_QWORD *)(a1 + 32);
  v10 = *(_QWORD *)(a1 + 40);
  v11 = *(_QWORD *)(a1 + 48);
  v12 = *(_QWORD *)(a1 + 56);
  v13 = *(_OWORD *)(a1 + 64);
  v14 = *(_QWORD *)(a1 + 80);
  v15 = *(_QWORD *)(a1 + 88);
  v16 = *(_DWORD *)(a1 + 96);
  v17 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v17;
  v18 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v18;
  v19 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v19;
  *(_DWORD *)(a1 + 96) = v4;
  outlined consume of _ShapeStyle_RenderedShape.Shape(v5, v6, v7, v8, v9, v10, v11, v12, v13, *((uint64_t *)&v13 + 1), v14, v15, v16);
  *(_WORD *)(a1 + 100) = *(_WORD *)(a2 + 100);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  swift_release();
  *(_DWORD *)(a1 + 144) = *(_DWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
  v20 = *(_BYTE *)(a2 + 218);
  v21 = *(_WORD *)(a2 + 216);
  v22 = *(_QWORD *)(a1 + 192);
  v23 = *(_QWORD *)(a1 + 200);
  *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 + 184);
  *(_OWORD *)(a1 + 200) = *(_OWORD *)(a2 + 200);
  *(_WORD *)(a1 + 216) = v21;
  *(_BYTE *)(a1 + 218) = v20;
  outlined consume of DisplayList.Item.Value(v22, v23);
  *(_DWORD *)(a1 + 220) = *(_DWORD *)(a2 + 220);
  *(_BYTE *)(a1 + 224) = *(_BYTE *)(a2 + 224);
  *(_DWORD *)(a1 + 228) = *(_DWORD *)(a2 + 228);
  v24 = *(_BYTE *)(a2 + 240);
  v25 = *(_QWORD *)(a1 + 232);
  v26 = *(_BYTE *)(a1 + 240);
  *(_QWORD *)(a1 + 232) = *(_QWORD *)(a2 + 232);
  *(_BYTE *)(a1 + 240) = v24;
  outlined consume of GraphicsBlendMode(v25, v26);
  *(_DWORD *)(a1 + 244) = *(_DWORD *)(a2 + 244);
  *(_BYTE *)(a1 + 248) = *(_BYTE *)(a2 + 248);
  return a1;
}

uint64_t getEnumTagSinglePayload for _ShapeStyle_RenderedShape(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 249))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 136);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for _ShapeStyle_RenderedShape(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 248) = 0;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 249) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 249) = 0;
    if (a2)
      *(_QWORD *)(result + 136) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for _ShapeStyle_RenderedShape()
{
  return &type metadata for _ShapeStyle_RenderedShape;
}

void destroy for _ShapeStyle_RenderedShape.Shape(uint64_t a1)
{
  outlined consume of _ShapeStyle_RenderedShape.Shape(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_DWORD *)(a1 + 96));
}

uint64_t initializeWithCopy for _ShapeStyle_RenderedShape.Shape(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v9 = *(_QWORD *)(a2 + 48);
  v10 = *(_QWORD *)(a2 + 56);
  v11 = *(_QWORD *)(a2 + 64);
  v13 = *(_QWORD *)(a2 + 72);
  v14 = *(_QWORD *)(a2 + 80);
  v15 = *(_QWORD *)(a2 + 88);
  v16 = *(_DWORD *)(a2 + 96);
  outlined copy of _ShapeStyle_RenderedShape.Shape(*(_QWORD *)a2, v4, v5, v6, v7, v8, v9, v10, v11, v13, v14, v15, v16);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_QWORD *)(a1 + 32) = v7;
  *(_QWORD *)(a1 + 40) = v8;
  *(_QWORD *)(a1 + 48) = v9;
  *(_QWORD *)(a1 + 56) = v10;
  *(_QWORD *)(a1 + 64) = v11;
  *(_QWORD *)(a1 + 72) = v13;
  *(_QWORD *)(a1 + 80) = v14;
  *(_QWORD *)(a1 + 88) = v15;
  *(_DWORD *)(a1 + 96) = v16;
  return a1;
}

uint64_t assignWithCopy for _ShapeStyle_RenderedShape.Shape(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v9 = *(_QWORD *)(a2 + 48);
  v10 = *(_QWORD *)(a2 + 56);
  v11 = *(_QWORD *)(a2 + 64);
  v25 = *(_QWORD *)(a2 + 72);
  v26 = *(_QWORD *)(a2 + 80);
  v27 = *(_QWORD *)(a2 + 88);
  v28 = *(_DWORD *)(a2 + 96);
  outlined copy of _ShapeStyle_RenderedShape.Shape(*(_QWORD *)a2, v4, v5, v6, v7, v8, v9, v10, v11, v25, v26, v27, v28);
  v12 = *(_QWORD *)a1;
  v13 = *(_QWORD *)(a1 + 8);
  v14 = *(_QWORD *)(a1 + 16);
  v15 = *(_QWORD *)(a1 + 24);
  v16 = *(_QWORD *)(a1 + 32);
  v17 = *(_QWORD *)(a1 + 40);
  v18 = *(_QWORD *)(a1 + 48);
  v19 = *(_QWORD *)(a1 + 56);
  v20 = *(_OWORD *)(a1 + 64);
  v21 = *(_QWORD *)(a1 + 80);
  v22 = *(_QWORD *)(a1 + 88);
  v23 = *(_DWORD *)(a1 + 96);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_QWORD *)(a1 + 32) = v7;
  *(_QWORD *)(a1 + 40) = v8;
  *(_QWORD *)(a1 + 48) = v9;
  *(_QWORD *)(a1 + 56) = v10;
  *(_QWORD *)(a1 + 64) = v11;
  *(_QWORD *)(a1 + 72) = v25;
  *(_QWORD *)(a1 + 80) = v26;
  *(_QWORD *)(a1 + 88) = v27;
  *(_DWORD *)(a1 + 96) = v28;
  outlined consume of _ShapeStyle_RenderedShape.Shape(v12, v13, v14, v15, v16, v17, v18, v19, v20, *((uint64_t *)&v20 + 1), v21, v22, v23);
  return a1;
}

uint64_t assignWithTake for _ShapeStyle_RenderedShape.Shape(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;

  v3 = *(_DWORD *)(a2 + 96);
  v4 = *(_QWORD *)a1;
  v6 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  v7 = *(_QWORD *)(a1 + 24);
  v8 = *(_QWORD *)(a1 + 32);
  v9 = *(_QWORD *)(a1 + 40);
  v10 = *(_QWORD *)(a1 + 48);
  v11 = *(_QWORD *)(a1 + 56);
  v12 = *(_OWORD *)(a1 + 64);
  v13 = *(_QWORD *)(a1 + 80);
  v14 = *(_QWORD *)(a1 + 88);
  v15 = *(_DWORD *)(a1 + 96);
  v16 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v16;
  v17 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v17;
  v18 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v18;
  *(_DWORD *)(a1 + 96) = v3;
  outlined consume of _ShapeStyle_RenderedShape.Shape(v4, v6, v5, v7, v8, v9, v10, v11, v12, *((uint64_t *)&v12 + 1), v13, v14, v15);
  return a1;
}

uint64_t getEnumTagSinglePayload for _ShapeStyle_RenderedShape.Shape(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >> 2 >= 0x7FF && *(_BYTE *)(a1 + 100))
    return (*(_DWORD *)a1 + 8188);
  v3 = ((*(_DWORD *)(a1 + 96) >> 21) & 7 | (8
                                          * ((*(_DWORD *)(a1 + 96) >> 11) & 0x380 | ((unsigned __int16)*(_DWORD *)(a1 + 96) >> 9) & 0x3FF))) ^ 0x1FFF;
  if (v3 >= 0x1FFB)
    v3 = -1;
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for _ShapeStyle_RenderedShape.Shape(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 >> 2 > 0x7FE)
  {
    *(_QWORD *)(result + 88) = 0;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_DWORD *)(result + 96) = 0;
    *(_QWORD *)result = a2 - 8188;
    if (a3 >> 2 >= 0x7FF)
      *(_BYTE *)(result + 100) = 1;
  }
  else
  {
    if (a3 >> 2 >= 0x7FF)
      *(_BYTE *)(result + 100) = 0;
    if (a2)
    {
      *(_OWORD *)(result + 64) = 0u;
      *(_OWORD *)(result + 80) = 0u;
      *(_OWORD *)(result + 32) = 0u;
      *(_OWORD *)(result + 48) = 0u;
      *(_OWORD *)result = 0u;
      *(_OWORD *)(result + 16) = 0u;
      *(_DWORD *)(result + 96) = (((-256 * a2) & 0x1C0000) - (a2 << 21)) & 0xFC0000 | (((-a2 >> 3) & 0x7F) << 9);
    }
  }
  return result;
}

uint64_t getEnumTag for _ShapeStyle_RenderedShape.Shape(_DWORD *a1)
{
  unsigned int v1;

  v1 = a1[24];
  if (((v1 >> 21) & 4) != 0)
    return (*a1 + 4);
  else
    return (v1 >> 21) & 7;
}

uint64_t destructiveProjectEnumData for _ShapeStyle_RenderedShape.Shape(uint64_t result)
{
  *(_DWORD *)(result + 96) &= 0xFF1FFFFF;
  return result;
}

uint64_t destructiveInjectEnumTag for _ShapeStyle_RenderedShape.Shape(uint64_t result, unsigned int a2)
{
  if (a2 < 4)
  {
    *(_DWORD *)(result + 96) = *(_DWORD *)(result + 96) & 0xFF0301FF | ((a2 & 7) << 21);
  }
  else
  {
    *(_QWORD *)result = a2 - 4;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_QWORD *)(result + 88) = 0;
    *(_DWORD *)(result + 96) = 0x800000;
  }
  return result;
}

ValueMetadata *type metadata accessor for _ShapeStyle_RenderedShape.Shape()
{
  return &type metadata for _ShapeStyle_RenderedShape.Shape;
}

uint64_t destroy for _ShapeStyle_RenderedLayers(_QWORD *a1)
{
  swift_release();
  return outlined consume of _ShapeStyle_RenderedLayers.Layers(a1[1], a1[2], a1[3], a1[4], a1[5], a1[6], a1[7], a1[8], a1[9]);
}

_QWORD *initializeWithCopy for _ShapeStyle_RenderedLayers(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v3 = a2[1];
  *a1 = *a2;
  v4 = a2[2];
  v5 = a2[3];
  v6 = a2[4];
  v7 = a2[5];
  v8 = a2[6];
  v9 = a2[7];
  v10 = a2[8];
  v11 = a2[9];
  swift_retain();
  outlined copy of _ShapeStyle_RenderedLayers.Layers(v3, v4, v5, v6, v7, v8, v9, v10, v11);
  a1[1] = v3;
  a1[2] = v4;
  a1[3] = v5;
  a1[4] = v6;
  a1[5] = v7;
  a1[6] = v8;
  a1[7] = v9;
  a1[8] = v10;
  a1[9] = v11;
  return a1;
}

_QWORD *assignWithCopy for _ShapeStyle_RenderedLayers(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;

  *a1 = *a2;
  swift_retain();
  swift_release();
  v4 = a2[1];
  v5 = a2[2];
  v6 = a2[3];
  v7 = a2[4];
  v8 = a2[5];
  v9 = a2[6];
  v10 = a2[7];
  v11 = a2[8];
  v12 = a2[9];
  outlined copy of _ShapeStyle_RenderedLayers.Layers(v4, v5, v6, v7, v8, v9, v10, v11, v12);
  v13 = a1[1];
  v14 = a1[2];
  v15 = a1[3];
  v16 = a1[4];
  v17 = a1[5];
  v18 = a1[6];
  v19 = a1[7];
  v20 = a1[8];
  v21 = a1[9];
  a1[1] = v4;
  a1[2] = v5;
  a1[3] = v6;
  a1[4] = v7;
  a1[5] = v8;
  a1[6] = v9;
  a1[7] = v10;
  a1[8] = v11;
  a1[9] = v12;
  outlined consume of _ShapeStyle_RenderedLayers.Layers(v13, v14, v15, v16, v17, v18, v19, v20, v21);
  return a1;
}

_QWORD *assignWithTake for _ShapeStyle_RenderedLayers(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;

  *a1 = *(_QWORD *)a2;
  swift_release();
  v4 = *(_QWORD *)(a2 + 72);
  v5 = a1[1];
  v6 = a1[2];
  v7 = a1[3];
  v8 = a1[4];
  v9 = a1[5];
  v10 = a1[6];
  v11 = a1[7];
  v12 = a1[8];
  v13 = a1[9];
  *(_OWORD *)(a1 + 1) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 3) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 5) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 7) = *(_OWORD *)(a2 + 56);
  a1[9] = v4;
  outlined consume of _ShapeStyle_RenderedLayers.Layers(v5, v6, v7, v8, v9, v10, v11, v12, v13);
  return a1;
}

uint64_t getEnumTagSinglePayload for _ShapeStyle_RenderedLayers(uint64_t a1, int a2)
{
  unsigned int v2;
  unsigned int v3;
  unint64_t v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 80))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_DWORD *)(a1 + 72);
  HIDWORD(v4) = (*(_QWORD *)(a1 + 56) >> 37) & 0x1FFFFFF | ((HIBYTE(v2) & 0x3F) << 25);
  LODWORD(v4) = 2 * v2;
  v3 = v4 >> 31;
  if (v3 > 0x80000000)
    v5 = ~v3;
  else
    v5 = -1;
  return (v5 + 1);
}

double storeEnumTagSinglePayload for _ShapeStyle_RenderedLayers(uint64_t a1, int a2, int a3)
{
  double result;
  unint64_t v4;

  if (a2 < 0)
  {
    *(_QWORD *)(a1 + 72) = 0;
    result = 0.0;
    *(_OWORD *)(a1 + 56) = 0u;
    *(_OWORD *)(a1 + 40) = 0u;
    *(_OWORD *)(a1 + 24) = 0u;
    *(_OWORD *)(a1 + 8) = 0u;
    *(_QWORD *)a1 = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(a1 + 80) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      HIDWORD(v4) = -a2;
      LODWORD(v4) = -a2;
      result = 0.0;
      *(_OWORD *)(a1 + 40) = 0u;
      *(_OWORD *)(a1 + 24) = 0u;
      *(_OWORD *)(a1 + 8) = 0u;
      *(_QWORD *)(a1 + 56) = ((v4 >> 1) & 0x1FFFFFF) << 37;
      *(_QWORD *)(a1 + 64) = 0;
      *(_QWORD *)(a1 + 72) = ((unint64_t)(v4 >> 1) >> 1) & 0x7F000000;
      return result;
    }
    *(_BYTE *)(a1 + 80) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for _ShapeStyle_RenderedLayers()
{
  return &type metadata for _ShapeStyle_RenderedLayers;
}

uint64_t outlined copy of _ShapeStyle_LayerID(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result;

  if (a3 == 2)
    return swift_bridgeObjectRetain();
  return result;
}

uint64_t destroy for _ShapeStyle_LayerID(uint64_t a1)
{
  return outlined consume of _ShapeStyle_LayerID(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
}

uint64_t outlined consume of _ShapeStyle_LayerID(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result;

  if (a3 == 2)
    return swift_bridgeObjectRelease();
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for _ShapeStyle_LayerID(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  outlined copy of _ShapeStyle_LayerID(*(_QWORD *)a2, v4, v5);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for _ShapeStyle_LayerID(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  outlined copy of _ShapeStyle_LayerID(*(_QWORD *)a2, v4, v5);
  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  v8 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v5;
  outlined consume of _ShapeStyle_LayerID(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for _ShapeStyle_LayerID(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  char v6;

  v3 = *(_BYTE *)(a2 + 16);
  v4 = *(_QWORD *)a1;
  v5 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  v6 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v3;
  outlined consume of _ShapeStyle_LayerID(v4, v5, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for _ShapeStyle_LayerID(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFD && *(_BYTE *)(a1 + 17))
    return (*(_DWORD *)a1 + 253);
  v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 3)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for _ShapeStyle_LayerID(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFC)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 253;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFD)
      *(_BYTE *)(result + 17) = 1;
  }
  else
  {
    if (a3 >= 0xFD)
      *(_BYTE *)(result + 17) = 0;
    if (a2)
      *(_BYTE *)(result + 16) = -(char)a2;
  }
  return result;
}

uint64_t getEnumTag for _ShapeStyle_LayerID(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 16) <= 2u)
    return *(unsigned __int8 *)(a1 + 16);
  else
    return (*(_DWORD *)a1 + 3);
}

uint64_t destructiveInjectEnumTag for _ShapeStyle_LayerID(uint64_t result, unsigned int a2)
{
  if (a2 >= 3)
  {
    *(_QWORD *)result = a2 - 3;
    *(_QWORD *)(result + 8) = 0;
    LOBYTE(a2) = 3;
  }
  *(_BYTE *)(result + 16) = a2;
  return result;
}

ValueMetadata *type metadata accessor for _ShapeStyle_LayerID()
{
  return &type metadata for _ShapeStyle_LayerID;
}

uint64_t type metadata accessor for _ShapeStyle_InterpolatorGroup()
{
  return objc_opt_self();
}

uint64_t destroy for _ShapeStyle_InterpolatorGroup.Layer(uint64_t a1)
{
  int v2;

  outlined consume of _ShapeStyle_LayerID(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
  if (*(_QWORD *)(a1 + 128))
  {
    outlined consume of _ShapeStyle_Pack.Fill(*(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(void **)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_BYTE *)(a1 + 104));
    v2 = *(unsigned __int8 *)(a1 + 120);
    if (v2 != 255)
      outlined consume of GraphicsBlendMode(*(_QWORD *)(a1 + 112), v2 & 1);
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t initializeWithCopy for _ShapeStyle_InterpolatorGroup.Layer(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char v6;
  void *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  int v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  v6 = *(_BYTE *)(a2 + 16);
  outlined copy of _ShapeStyle_LayerID(*(_QWORD *)a2, v5, v6);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  *(_BYTE *)(a1 + 16) = v6;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  if (*(_QWORD *)(a2 + 128))
  {
    v28 = *(_QWORD *)(a2 + 128);
    v7 = *(void **)(a2 + 24);
    v8 = *(_QWORD *)(a2 + 32);
    v9 = *(void **)(a2 + 40);
    v10 = *(void **)(a2 + 48);
    v11 = *(_QWORD *)(a2 + 56);
    v12 = *(_QWORD *)(a2 + 64);
    v14 = *(_QWORD *)(a2 + 72);
    v13 = *(_QWORD *)(a2 + 80);
    v25 = *(_QWORD *)(a2 + 88);
    v26 = *(_QWORD *)(a2 + 96);
    v27 = *(_BYTE *)(a2 + 104);
    outlined copy of _ShapeStyle_Pack.Fill(v7, v8, v9, v10, v11, v12, v14, v13, v25, v26, v27);
    *(_QWORD *)(a1 + 24) = v7;
    *(_QWORD *)(a1 + 32) = v8;
    *(_QWORD *)(a1 + 40) = v9;
    *(_QWORD *)(a1 + 48) = v10;
    *(_QWORD *)(a1 + 56) = v11;
    *(_QWORD *)(a1 + 64) = v12;
    *(_QWORD *)(a1 + 72) = v14;
    *(_QWORD *)(a1 + 80) = v13;
    *(_QWORD *)(a1 + 88) = v25;
    *(_QWORD *)(a1 + 96) = v26;
    *(_BYTE *)(a1 + 104) = v27;
    *(_DWORD *)(a1 + 108) = *(_DWORD *)(a2 + 108);
    v15 = (uint64_t *)(a2 + 112);
    v16 = *(unsigned __int8 *)(a2 + 120);
    if (v16 == 255)
    {
      *(_QWORD *)(a1 + 112) = *v15;
      *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
    }
    else
    {
      v20 = v16 & 1;
      v21 = *v15;
      outlined copy of GraphicsBlendMode(*v15, v16 & 1);
      *(_QWORD *)(a1 + 112) = v21;
      *(_BYTE *)(a1 + 120) = v20;
    }
    *(_QWORD *)(a1 + 128) = v28;
    swift_bridgeObjectRetain();
  }
  else
  {
    v17 = *(_OWORD *)(a2 + 104);
    *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
    *(_OWORD *)(a1 + 104) = v17;
    *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
    v18 = *(_OWORD *)(a2 + 40);
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 40) = v18;
    v19 = *(_OWORD *)(a2 + 72);
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 72) = v19;
  }
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  *(_WORD *)(a1 + 144) = *(_WORD *)(a2 + 144);
  *(_BYTE *)(a1 + 146) = *(_BYTE *)(a2 + 146);
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  v22 = *(_QWORD *)(a2 + 176);
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
  *(_QWORD *)(a1 + 176) = v22;
  *(_DWORD *)(a1 + 184) = *(_DWORD *)(a2 + 184);
  *(_BYTE *)(a1 + 188) = *(_BYTE *)(a2 + 188);
  v23 = *(_QWORD *)(a2 + 200);
  *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
  *(_QWORD *)(a1 + 200) = v23;
  *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
  *(_WORD *)(a1 + 216) = *(_WORD *)(a2 + 216);
  *(_BYTE *)(a1 + 218) = *(_BYTE *)(a2 + 218);
  *(_WORD *)(a1 + 219) = *(_WORD *)(a2 + 219);
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for _ShapeStyle_InterpolatorGroup.Layer(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  _OWORD *v10;
  _OWORD *v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  void *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t *v32;
  uint64_t *v33;
  int v34;
  char v35;
  void *v36;
  uint64_t v37;
  void *v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  int v45;
  uint64_t v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  uint64_t v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  char v58;
  uint64_t v59;
  uint64_t v60;
  char v61;
  char v62;
  uint64_t v63;
  char v64;
  uint64_t v65;
  int v66;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char v72;
  char v73;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  v6 = *(_BYTE *)(a2 + 16);
  outlined copy of _ShapeStyle_LayerID(*(_QWORD *)a2, v5, v6);
  v7 = *(_QWORD *)a1;
  v8 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  v9 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v6;
  outlined consume of _ShapeStyle_LayerID(v7, v8, v9);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  v10 = (_OWORD *)(a1 + 24);
  v11 = (_OWORD *)(a2 + 24);
  v12 = *(_QWORD *)(a2 + 128);
  if (*(_QWORD *)(a1 + 128))
  {
    if (v12)
    {
      v13 = *(void **)(a2 + 24);
      v14 = *(_QWORD *)(a2 + 32);
      v15 = *(void **)(a2 + 40);
      v16 = *(void **)(a2 + 48);
      v17 = *(_QWORD *)(a2 + 56);
      v18 = *(_QWORD *)(a2 + 64);
      v19 = *(_QWORD *)(a2 + 72);
      v20 = *(_QWORD *)(a2 + 80);
      v68 = *(_QWORD *)(a2 + 88);
      v70 = *(_QWORD *)(a2 + 96);
      v72 = *(_BYTE *)(a2 + 104);
      outlined copy of _ShapeStyle_Pack.Fill(v13, v14, v15, v16, v17, v18, v19, v20, v68, v70, v72);
      v21 = *(_QWORD *)(a1 + 24);
      v22 = *(_QWORD *)(a1 + 32);
      v23 = *(_QWORD *)(a1 + 40);
      v24 = *(void **)(a1 + 48);
      v25 = *(_QWORD *)(a1 + 56);
      v26 = *(_QWORD *)(a1 + 64);
      v27 = *(_QWORD *)(a1 + 72);
      v28 = *(_QWORD *)(a1 + 80);
      v29 = *(_QWORD *)(a1 + 88);
      v30 = *(_QWORD *)(a1 + 96);
      v31 = *(_BYTE *)(a1 + 104);
      *(_QWORD *)(a1 + 24) = v13;
      *(_QWORD *)(a1 + 32) = v14;
      *(_QWORD *)(a1 + 40) = v15;
      *(_QWORD *)(a1 + 48) = v16;
      *(_QWORD *)(a1 + 56) = v17;
      *(_QWORD *)(a1 + 64) = v18;
      *(_QWORD *)(a1 + 72) = v19;
      *(_QWORD *)(a1 + 80) = v20;
      *(_QWORD *)(a1 + 88) = v68;
      *(_QWORD *)(a1 + 96) = v70;
      *(_BYTE *)(a1 + 104) = v72;
      outlined consume of _ShapeStyle_Pack.Fill(v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31);
      *(_DWORD *)(a1 + 108) = *(_DWORD *)(a2 + 108);
      v32 = (uint64_t *)(a1 + 112);
      v33 = (uint64_t *)(a2 + 112);
      v34 = *(unsigned __int8 *)(a2 + 120);
      if (*(unsigned __int8 *)(a1 + 120) == 255)
      {
        if (v34 == 255)
        {
          v52 = *v33;
          *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
          *v32 = v52;
        }
        else
        {
          v64 = v34 & 1;
          v65 = *v33;
          outlined copy of GraphicsBlendMode(v65, v34 & 1);
          *(_QWORD *)(a1 + 112) = v65;
          *(_BYTE *)(a1 + 120) = v64;
        }
      }
      else if (v34 == 255)
      {
        outlined destroy of GraphicsBlendMode(a1 + 112);
        v35 = *(_BYTE *)(a2 + 120);
        *v32 = *v33;
        *(_BYTE *)(a1 + 120) = v35;
      }
      else
      {
        v58 = v34 & 1;
        v59 = *v33;
        outlined copy of GraphicsBlendMode(v59, v34 & 1);
        v60 = *(_QWORD *)(a1 + 112);
        v61 = *(_BYTE *)(a1 + 120);
        *(_QWORD *)(a1 + 112) = v59;
        *(_BYTE *)(a1 + 120) = v58;
        outlined consume of GraphicsBlendMode(v60, v61);
      }
      *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      outlined destroy of _ShapeStyle_Pack.Style(a1 + 24);
      v48 = *(_OWORD *)(a2 + 40);
      v47 = *(_OWORD *)(a2 + 56);
      *v10 = *v11;
      *(_OWORD *)(a1 + 40) = v48;
      *(_OWORD *)(a1 + 56) = v47;
      v49 = *(_OWORD *)(a2 + 120);
      v51 = *(_OWORD *)(a2 + 72);
      v50 = *(_OWORD *)(a2 + 88);
      *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
      *(_OWORD *)(a1 + 120) = v49;
      *(_OWORD *)(a1 + 72) = v51;
      *(_OWORD *)(a1 + 88) = v50;
    }
  }
  else if (v12)
  {
    v36 = *(void **)(a2 + 24);
    v37 = *(_QWORD *)(a2 + 32);
    v38 = *(void **)(a2 + 40);
    v39 = *(void **)(a2 + 48);
    v40 = *(_QWORD *)(a2 + 56);
    v41 = *(_QWORD *)(a2 + 64);
    v42 = *(_QWORD *)(a2 + 72);
    v43 = *(_QWORD *)(a2 + 80);
    v69 = *(_QWORD *)(a2 + 88);
    v71 = *(_QWORD *)(a2 + 96);
    v73 = *(_BYTE *)(a2 + 104);
    outlined copy of _ShapeStyle_Pack.Fill(v36, v37, v38, v39, v40, v41, v42, v43, v69, v71, v73);
    *(_QWORD *)(a1 + 24) = v36;
    *(_QWORD *)(a1 + 32) = v37;
    *(_QWORD *)(a1 + 40) = v38;
    *(_QWORD *)(a1 + 48) = v39;
    *(_QWORD *)(a1 + 56) = v40;
    *(_QWORD *)(a1 + 64) = v41;
    *(_QWORD *)(a1 + 72) = v42;
    *(_QWORD *)(a1 + 80) = v43;
    *(_QWORD *)(a1 + 88) = v69;
    *(_QWORD *)(a1 + 96) = v71;
    *(_BYTE *)(a1 + 104) = v73;
    *(_DWORD *)(a1 + 108) = *(_DWORD *)(a2 + 108);
    v44 = (uint64_t *)(a2 + 112);
    v45 = *(unsigned __int8 *)(a2 + 120);
    if (v45 == 255)
    {
      v46 = *v44;
      *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
      *(_QWORD *)(a1 + 112) = v46;
    }
    else
    {
      v62 = v45 & 1;
      v63 = *v44;
      outlined copy of GraphicsBlendMode(*v44, v45 & 1);
      *(_QWORD *)(a1 + 112) = v63;
      *(_BYTE *)(a1 + 120) = v62;
    }
    *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
    swift_bridgeObjectRetain();
  }
  else
  {
    v53 = *v11;
    v54 = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
    *(_OWORD *)(a1 + 56) = v54;
    *v10 = v53;
    v55 = *(_OWORD *)(a2 + 72);
    v56 = *(_OWORD *)(a2 + 88);
    v57 = *(_OWORD *)(a2 + 120);
    *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
    *(_OWORD *)(a1 + 120) = v57;
    *(_OWORD *)(a1 + 72) = v55;
    *(_OWORD *)(a1 + 88) = v56;
  }
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_WORD *)(a1 + 144) = *(_WORD *)(a2 + 144);
  *(_BYTE *)(a1 + 146) = *(_BYTE *)(a2 + 146);
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
  v66 = *(_DWORD *)(a2 + 184);
  *(_BYTE *)(a1 + 188) = *(_BYTE *)(a2 + 188);
  *(_DWORD *)(a1 + 184) = v66;
  *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
  *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
  swift_retain();
  swift_release();
  *(_WORD *)(a1 + 216) = *(_WORD *)(a2 + 216);
  *(_BYTE *)(a1 + 218) = *(_BYTE *)(a2 + 218);
  *(_BYTE *)(a1 + 219) = *(_BYTE *)(a2 + 219);
  *(_BYTE *)(a1 + 220) = *(_BYTE *)(a2 + 220);
  return a1;
}

uint64_t outlined destroy of _ShapeStyle_Pack.Style(uint64_t a1)
{
  destroy for _ShapeStyle_Pack.Style(a1);
  return a1;
}

__n128 __swift_memcpy221_8(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __n128 result;
  __int128 v10;
  __int128 v11;

  v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  v6 = *(_OWORD *)(a2 + 96);
  v7 = *(_OWORD *)(a2 + 112);
  v8 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v8;
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 112) = v7;
  result = *(__n128 *)(a2 + 160);
  v10 = *(_OWORD *)(a2 + 176);
  v11 = *(_OWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 205) = *(_OWORD *)(a2 + 205);
  *(_OWORD *)(a1 + 176) = v10;
  *(_OWORD *)(a1 + 192) = v11;
  *(__n128 *)(a1 + 160) = result;
  return result;
}

uint64_t assignWithTake for _ShapeStyle_InterpolatorGroup.Layer(uint64_t a1, uint64_t a2)
{
  char v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  _QWORD *v21;
  int v22;
  int v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;

  v4 = *(_BYTE *)(a2 + 16);
  v5 = *(_QWORD *)a1;
  v6 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  v7 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v4;
  outlined consume of _ShapeStyle_LayerID(v5, v6, v7);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  if (*(_QWORD *)(a1 + 128))
  {
    v8 = *(_QWORD *)(a2 + 128);
    if (v8)
    {
      v9 = *(_BYTE *)(a2 + 104);
      v10 = *(_QWORD *)(a1 + 24);
      v11 = *(_QWORD *)(a1 + 32);
      v12 = *(_QWORD *)(a1 + 40);
      v13 = *(void **)(a1 + 48);
      v14 = *(_QWORD *)(a1 + 56);
      v15 = *(_QWORD *)(a1 + 64);
      v16 = *(_QWORD *)(a1 + 72);
      v17 = *(_QWORD *)(a1 + 80);
      v18 = *(_QWORD *)(a1 + 88);
      v19 = *(_QWORD *)(a1 + 96);
      v20 = *(_BYTE *)(a1 + 104);
      *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
      *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
      *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
      *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
      *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
      *(_BYTE *)(a1 + 104) = v9;
      outlined consume of _ShapeStyle_Pack.Fill(v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20);
      *(_DWORD *)(a1 + 108) = *(_DWORD *)(a2 + 108);
      v21 = (_QWORD *)(a2 + 112);
      v22 = *(unsigned __int8 *)(a1 + 120);
      if (v22 != 255)
      {
        v23 = *(unsigned __int8 *)(a2 + 120);
        if (v23 != 255)
        {
          v27 = *(_QWORD *)(a1 + 112);
          *(_QWORD *)(a1 + 112) = *v21;
          *(_BYTE *)(a1 + 120) = v23 & 1;
          outlined consume of GraphicsBlendMode(v27, v22 & 1);
          goto LABEL_10;
        }
        outlined destroy of GraphicsBlendMode(a1 + 112);
      }
      *(_QWORD *)(a1 + 112) = *v21;
      *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
LABEL_10:
      *(_QWORD *)(a1 + 128) = v8;
      swift_bridgeObjectRelease();
      goto LABEL_11;
    }
    outlined destroy of _ShapeStyle_Pack.Style(a1 + 24);
  }
  v24 = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 104) = v24;
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  v25 = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = v25;
  v26 = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = v26;
LABEL_11:
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  swift_bridgeObjectRelease();
  *(_WORD *)(a1 + 144) = *(_WORD *)(a2 + 144);
  *(_BYTE *)(a1 + 146) = *(_BYTE *)(a2 + 146);
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
  swift_unknownObjectRelease();
  *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
  *(_DWORD *)(a1 + 184) = *(_DWORD *)(a2 + 184);
  *(_BYTE *)(a1 + 188) = *(_BYTE *)(a2 + 188);
  *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
  *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
  swift_release();
  *(_WORD *)(a1 + 216) = *(_WORD *)(a2 + 216);
  *(_BYTE *)(a1 + 218) = *(_BYTE *)(a2 + 218);
  *(_BYTE *)(a1 + 219) = *(_BYTE *)(a2 + 219);
  *(_BYTE *)(a1 + 220) = *(_BYTE *)(a2 + 220);
  return a1;
}

uint64_t getEnumTagSinglePayload for _ShapeStyle_InterpolatorGroup.Layer(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 221))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 136);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for _ShapeStyle_InterpolatorGroup.Layer(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 220) = 0;
    *(_DWORD *)(result + 216) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 221) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 136) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 221) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for _ShapeStyle_InterpolatorGroup.Layer()
{
  return &type metadata for _ShapeStyle_InterpolatorGroup.Layer;
}

uint64_t destroy for _ShapeStyle_RenderedLayers.Layers(uint64_t *a1)
{
  return outlined consume of _ShapeStyle_RenderedLayers.Layers(*a1, a1[1], a1[2], a1[3], a1[4], a1[5], a1[6], a1[7], a1[8]);
}

uint64_t *initializeWithCopy for _ShapeStyle_RenderedLayers.Layers(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v3 = *a2;
  v4 = a2[1];
  v5 = a2[2];
  v6 = a2[3];
  v7 = a2[4];
  v8 = a2[5];
  v9 = a2[6];
  v10 = a2[7];
  v11 = a2[8];
  outlined copy of _ShapeStyle_RenderedLayers.Layers(*a2, v4, v5, v6, v7, v8, v9, v10, v11);
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v5;
  a1[3] = v6;
  a1[4] = v7;
  a1[5] = v8;
  a1[6] = v9;
  a1[7] = v10;
  a1[8] = v11;
  return a1;
}

uint64_t *assignWithCopy for _ShapeStyle_RenderedLayers.Layers(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v3 = *a2;
  v4 = a2[1];
  v5 = a2[2];
  v6 = a2[3];
  v7 = a2[4];
  v8 = a2[5];
  v9 = a2[6];
  v10 = a2[7];
  v11 = a2[8];
  outlined copy of _ShapeStyle_RenderedLayers.Layers(*a2, v4, v5, v6, v7, v8, v9, v10, v11);
  v12 = *a1;
  v13 = a1[1];
  v14 = a1[2];
  v15 = a1[3];
  v16 = a1[4];
  v17 = a1[5];
  v18 = a1[6];
  v19 = a1[7];
  v20 = a1[8];
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v5;
  a1[3] = v6;
  a1[4] = v7;
  a1[5] = v8;
  a1[6] = v9;
  a1[7] = v10;
  a1[8] = v11;
  outlined consume of _ShapeStyle_RenderedLayers.Layers(v12, v13, v14, v15, v16, v17, v18, v19, v20);
  return a1;
}

uint64_t *assignWithTake for _ShapeStyle_RenderedLayers.Layers(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;

  v3 = *(_QWORD *)(a2 + 64);
  v4 = *a1;
  v6 = a1[1];
  v5 = a1[2];
  v7 = a1[3];
  v8 = a1[4];
  v9 = a1[5];
  v10 = a1[6];
  v11 = a1[7];
  v12 = a1[8];
  v13 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *((_OWORD *)a1 + 1) = v13;
  v14 = *(_OWORD *)(a2 + 48);
  *((_OWORD *)a1 + 2) = *(_OWORD *)(a2 + 32);
  *((_OWORD *)a1 + 3) = v14;
  a1[8] = v3;
  outlined consume of _ShapeStyle_RenderedLayers.Layers(v4, v6, v5, v7, v8, v9, v10, v11, v12);
  return a1;
}

uint64_t getEnumTagSinglePayload for _ShapeStyle_RenderedLayers.Layers(uint64_t a1, int a2)
{
  unsigned int v2;
  unsigned int v3;
  unint64_t v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 72))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_DWORD *)(a1 + 64);
  HIDWORD(v4) = (*(_QWORD *)(a1 + 48) >> 37) & 0x1FFFFFF | ((HIBYTE(v2) & 0x3F) << 25);
  LODWORD(v4) = 2 * v2;
  v3 = v4 >> 31;
  if (v3 > 0x80000000)
    v5 = ~v3;
  else
    v5 = -1;
  return (v5 + 1);
}

double storeEnumTagSinglePayload for _ShapeStyle_RenderedLayers.Layers(uint64_t a1, int a2, int a3)
{
  double result;
  unint64_t v4;

  if (a2 < 0)
  {
    result = 0.0;
    *(_OWORD *)(a1 + 40) = 0u;
    *(_OWORD *)(a1 + 24) = 0u;
    *(_OWORD *)(a1 + 8) = 0u;
    *(_OWORD *)(a1 + 56) = 0u;
    *(_QWORD *)a1 = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(a1 + 72) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      HIDWORD(v4) = -a2;
      LODWORD(v4) = -a2;
      result = 0.0;
      *(_OWORD *)(a1 + 16) = 0u;
      *(_OWORD *)(a1 + 32) = 0u;
      *(_OWORD *)a1 = 0u;
      *(_QWORD *)(a1 + 48) = ((v4 >> 1) & 0x1FFFFFF) << 37;
      *(_QWORD *)(a1 + 56) = 0;
      *(_QWORD *)(a1 + 64) = ((unint64_t)(v4 >> 1) >> 1) & 0x7F000000;
      return result;
    }
    *(_BYTE *)(a1 + 72) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t getEnumTag for _ShapeStyle_RenderedLayers.Layers(_DWORD *a1)
{
  int v1;

  v1 = a1[16];
  if (v1 >= 0)
    return v1 >> 30;
  else
    return (*a1 + 2);
}

uint64_t destructiveProjectEnumData for _ShapeStyle_RenderedLayers.Layers(uint64_t result)
{
  *(_QWORD *)(result + 64) &= 0xFFFFFFFF3FFFFFFFLL;
  return result;
}

uint64_t destructiveInjectEnumTag for _ShapeStyle_RenderedLayers.Layers(uint64_t result, unsigned int a2)
{
  if (a2 < 2)
  {
    *(_QWORD *)(result + 48) &= 0xC000001FFFFFFFFFLL;
    *(_BYTE *)(result + 67) = (_BYTE)a2 << 6;
  }
  else
  {
    *(_QWORD *)result = a2 - 2;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_QWORD *)(result + 56) = 0;
    *(_QWORD *)(result + 64) = 0x80000000;
  }
  return result;
}

void *type metadata accessor for _ShapeStyle_RenderedLayers.Layers()
{
  return &unk_25063D098;
}

void *type metadata accessor for _ShapeStyle_RenderedShape.LayerNeeds()
{
  return &unk_25060D5C8;
}

unint64_t lazy protocol witness table accessor for type _ShapeStyle_RenderedShape.LayerNeeds and conformance _ShapeStyle_RenderedShape.LayerNeeds()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _ShapeStyle_RenderedShape.LayerNeeds and conformance _ShapeStyle_RenderedShape.LayerNeeds;
  if (!lazy protocol witness table cache variable for type _ShapeStyle_RenderedShape.LayerNeeds and conformance _ShapeStyle_RenderedShape.LayerNeeds)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for _ShapeStyle_RenderedShape.LayerNeeds, &unk_25060D5C8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ShapeStyle_RenderedShape.LayerNeeds and conformance _ShapeStyle_RenderedShape.LayerNeeds);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _ShapeStyle_RenderedShape.LayerNeeds and conformance _ShapeStyle_RenderedShape.LayerNeeds;
  if (!lazy protocol witness table cache variable for type _ShapeStyle_RenderedShape.LayerNeeds and conformance _ShapeStyle_RenderedShape.LayerNeeds)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for _ShapeStyle_RenderedShape.LayerNeeds, &unk_25060D5C8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ShapeStyle_RenderedShape.LayerNeeds and conformance _ShapeStyle_RenderedShape.LayerNeeds);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _ShapeStyle_RenderedShape.LayerNeeds and conformance _ShapeStyle_RenderedShape.LayerNeeds;
  if (!lazy protocol witness table cache variable for type _ShapeStyle_RenderedShape.LayerNeeds and conformance _ShapeStyle_RenderedShape.LayerNeeds)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for _ShapeStyle_RenderedShape.LayerNeeds, &unk_25060D5C8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ShapeStyle_RenderedShape.LayerNeeds and conformance _ShapeStyle_RenderedShape.LayerNeeds);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _ShapeStyle_RenderedShape.LayerNeeds and conformance _ShapeStyle_RenderedShape.LayerNeeds;
  if (!lazy protocol witness table cache variable for type _ShapeStyle_RenderedShape.LayerNeeds and conformance _ShapeStyle_RenderedShape.LayerNeeds)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for _ShapeStyle_RenderedShape.LayerNeeds, &unk_25060D5C8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ShapeStyle_RenderedShape.LayerNeeds and conformance _ShapeStyle_RenderedShape.LayerNeeds);
  }
  return result;
}

uint64_t outlined release of _ShapeStyle_InterpolatorGroup.Layer(uint64_t a1)
{
  unint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  unint64_t v14;

  v2 = *(_QWORD *)(a1 + 40);
  v13 = *(_QWORD *)(a1 + 32);
  v14 = *(_QWORD *)(a1 + 24);
  v3 = *(void **)(a1 + 48);
  v4 = *(_QWORD *)(a1 + 56);
  v5 = *(_QWORD *)(a1 + 64);
  v6 = *(_QWORD *)(a1 + 72);
  v7 = *(_QWORD *)(a1 + 80);
  v11 = *(_OWORD *)(a1 + 104);
  v12 = *(_OWORD *)(a1 + 88);
  v8 = *(_QWORD *)(a1 + 120);
  v9 = *(_QWORD *)(a1 + 128);
  outlined consume of _ShapeStyle_LayerID(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
  outlined consume of _ShapeStyle_Pack.Style?(v14, v13, v2, v3, v4, v5, v6, v7, v12, *((uint64_t *)&v12 + 1), v11, *((uint64_t *)&v11 + 1), v8, v9);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  swift_release();
  return a1;
}

uint64_t outlined init with take of PathDrawingStyle(uint64_t a1, uint64_t a2)
{
  __swift_memcpy41_8(a2, a1);
  return a2;
}

uint64_t partial apply for specialized closure #1 in MaterialRenderer.visit<A>(layer:)()
{
  return specialized closure #1 in MaterialRenderer.visit<A>(layer:)();
}

uint64_t outlined copy of PathDrawingStyle(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  uint64_t result;

  if ((a6 & 1) != 0)
    return swift_bridgeObjectRetain();
  return result;
}

uint64_t outlined retain of PathDrawingStyle(uint64_t a1, void (*a2)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  a2(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(unsigned __int8 *)(a1 + 40));
  return a1;
}

uint64_t outlined consume of PathDrawingStyle(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  uint64_t result;

  if ((a6 & 1) != 0)
    return swift_bridgeObjectRelease();
  return result;
}

uint64_t specialized closure #1 in MaterialRenderer.visit<A>(layer:)()
{
  uint64_t v0;
  char v1;

  if (one-time initialization token for normal != -1)
    swift_once();
  v0 = static GraphicsBlendMode.normal;
  v1 = byte_254266040;
  if (byte_254266040 == 1)
    swift_unknownObjectRetain_n();
  outlined consume of GraphicsBlendMode(v0, v1);
  return outlined consume of GraphicsBlendMode(v0, v1);
}

uint64_t outlined release of _ShapeStyle_Pack.Slice(uint64_t a1)
{
  swift_unknownObjectRelease();
  return a1;
}

BOOL RBPathIsNull(uint64_t a1, uint64_t a2)
{
  return *MEMORY[0x24BE7F290] == a1 && *(_QWORD *)(MEMORY[0x24BE7F290] + 8) == a2;
}

uint64_t sub_234D87920()
{
  swift_unknownObjectRelease();
  return swift_deallocObject();
}

_OWORD *outlined init with take of _ShapeStyle_InterpolatorGroup.AddLayerResult(__int128 *a1, _OWORD *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;

  v2 = *a1;
  v3 = a1[1];
  v4 = a1[3];
  a2[2] = a1[2];
  a2[3] = v4;
  *a2 = v2;
  a2[1] = v3;
  v5 = a1[4];
  v6 = a1[5];
  v7 = a1[6];
  *(_OWORD *)((char *)a2 + 108) = *(__int128 *)((char *)a1 + 108);
  a2[5] = v6;
  a2[6] = v7;
  a2[4] = v5;
  return a2;
}

uint64_t _s7SwiftUI29_ShapeStyle_InterpolatorGroupC14AddLayerResult33_3890C65F12EA82A4BC5FBD33046B67FALLOWOg(uint64_t a1)
{
  return *(_QWORD *)(a1 + 112) >> 63;
}

uint64_t _s7SwiftUI29_ShapeStyle_InterpolatorGroupC14AddLayerResult33_3890C65F12EA82A4BC5FBD33046B67FALLOWOj0_(uint64_t result)
{
  *(_QWORD *)(result + 112) &= ~0x8000000000000000;
  return result;
}

uint64_t sub_234D87990()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_234D879B4()
{
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

float partial apply for closure #1 in _ShapeStyle_RenderedShape.renderVectorGlyph(_:size:orientation:name:styles:layers:)(unsigned int a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return closure #1 in _ShapeStyle_RenderedShape.renderVectorGlyph(_:size:orientation:name:styles:layers:)(a1, a2, a3, v3 + 16, *(_QWORD *)(v3 + 56));
}

uint64_t sub_234D879EC()
{
  return swift_deallocObject();
}

uint64_t block_copy_helper_12(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_12()
{
  return swift_release();
}

uint64_t outlined retain of _ShapeStyle_Pack.Slice(uint64_t a1)
{
  swift_unknownObjectRetain();
  return a1;
}

uint64_t _s7SwiftUI29_ShapeStyle_InterpolatorGroupC14AddLayerResult33_3890C65F12EA82A4BC5FBD33046B67FALLOWOi_(uint64_t result)
{
  *(_QWORD *)(result + 112) &= 0xFFFFFFFFFFFFFF8uLL;
  return result;
}

uint64_t _s7SwiftUI29_ShapeStyle_InterpolatorGroupC14AddLayerResult33_3890C65F12EA82A4BC5FBD33046B67FALLOWOi0_(uint64_t result)
{
  *(_QWORD *)(result + 112) = *(_QWORD *)(result + 112) & 0xFFFFFFFFFFFFFF8 | 0x8000000000000000;
  return result;
}

uint64_t sub_234D87A60()
{
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_234D87A8C()
{
  uint64_t v0;

  outlined consume of GraphicsFilter(*(void **)(v0 + 16), *(_QWORD *)(v0 + 24), *(id *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 88), *(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 104), *(_QWORD *)(v0 + 112), *(_QWORD *)(v0 + 120), *(_DWORD *)(v0 + 128), BYTE2(*(_DWORD *)(v0 + 128)));
  return swift_deallocObject();
}

uint64_t sub_234D87AE4()
{
  uint64_t v0;

  outlined consume of Path.Storage(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_BYTE *)(v0 + 48));
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_234D87B18()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_234D87B3C()
{
  uint64_t v0;

  outlined consume of Path.Storage(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_BYTE *)(v0 + 48));
  return swift_deallocObject();
}

uint64_t sub_234D87B68()
{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  return swift_deallocObject();
}

uint64_t sub_234D87B8C()
{
  return swift_deallocObject();
}

void type metadata accessor for _AnyResolvedPaint<Color.Resolved>(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  if (!lazy cache variable for type metadata for _AnyResolvedPaint<Color.Resolved>)
  {
    v2 = lazy protocol witness table accessor for type Color.Resolved and conformance Color.Resolved();
    v4 = type metadata accessor for _AnyResolvedPaint(a1, (uint64_t)&type metadata for Color.Resolved, v2, v3);
    if (!v5)
      atomic_store(v4, (unint64_t *)&lazy cache variable for type metadata for _AnyResolvedPaint<Color.Resolved>);
  }
}

uint64_t outlined copy of _ShapeStyle_InterpolatorGroup.AddLayerResult(void *a1, uint64_t a2, void *a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, unsigned __int8 a13, uint64_t a14, uint64_t a15)
{
  if (a15 < 0)
    outlined copy of _ShapeStyle_Pack.Style?(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14);
  return swift_retain();
}

uint64_t destroy for _ShapeStyle_InterpolatorGroup.AddLayerResult(uint64_t a1)
{
  return outlined consume of _ShapeStyle_InterpolatorGroup.AddLayerResult(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(void **)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_OWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_OWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112));
}

uint64_t outlined consume of _ShapeStyle_InterpolatorGroup.AddLayerResult(unint64_t a1, uint64_t a2, unint64_t a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, unsigned __int8 a13, uint64_t a14, uint64_t a15)
{
  if (a15 < 0)
    outlined consume of _ShapeStyle_Pack.Style?(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14);
  return swift_release();
}

uint64_t initializeWithCopy for _ShapeStyle_InterpolatorGroup.AddLayerResult(uint64_t a1, uint64_t a2)
{
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;

  v3 = *(void **)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(void **)(a2 + 16);
  v6 = *(void **)(a2 + 24);
  v7 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v9 = *(_QWORD *)(a2 + 48);
  v10 = *(_QWORD *)(a2 + 56);
  v11 = *(_QWORD *)(a2 + 64);
  v13 = *(_QWORD *)(a2 + 72);
  v14 = *(_QWORD *)(a2 + 80);
  v15 = *(_QWORD *)(a2 + 88);
  v16 = *(_QWORD *)(a2 + 96);
  v17 = *(_QWORD *)(a2 + 104);
  v18 = *(_QWORD *)(a2 + 112);
  v19 = *(_DWORD *)(a2 + 120);
  outlined copy of _ShapeStyle_InterpolatorGroup.AddLayerResult(*(void **)a2, v4, v5, v6, v7, v8, v9, v10, v11, v13, v14, v15, v16, v17, v18);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_QWORD *)(a1 + 32) = v7;
  *(_QWORD *)(a1 + 40) = v8;
  *(_QWORD *)(a1 + 48) = v9;
  *(_QWORD *)(a1 + 56) = v10;
  *(_QWORD *)(a1 + 64) = v11;
  *(_QWORD *)(a1 + 72) = v13;
  *(_QWORD *)(a1 + 80) = v14;
  *(_QWORD *)(a1 + 88) = v15;
  *(_QWORD *)(a1 + 96) = v16;
  *(_QWORD *)(a1 + 104) = v17;
  *(_QWORD *)(a1 + 112) = v18;
  *(_DWORD *)(a1 + 120) = v19;
  return a1;
}

uint64_t assignWithCopy for _ShapeStyle_InterpolatorGroup.AddLayerResult(uint64_t a1, uint64_t a2)
{
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;

  v3 = *(void **)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(void **)(a2 + 16);
  v6 = *(void **)(a2 + 24);
  v7 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v9 = *(_QWORD *)(a2 + 48);
  v10 = *(_QWORD *)(a2 + 56);
  v11 = *(_QWORD *)(a2 + 64);
  v25 = *(_QWORD *)(a2 + 72);
  v26 = *(_QWORD *)(a2 + 80);
  v27 = *(_QWORD *)(a2 + 88);
  v28 = *(_QWORD *)(a2 + 96);
  v29 = *(_QWORD *)(a2 + 104);
  v30 = *(_QWORD *)(a2 + 112);
  v31 = *(_DWORD *)(a2 + 120);
  outlined copy of _ShapeStyle_InterpolatorGroup.AddLayerResult(*(void **)a2, v4, v5, v6, v7, v8, v9, v10, v11, v25, v26, v27, v28, v29, v30);
  v12 = *(_QWORD *)a1;
  v13 = *(_QWORD *)(a1 + 8);
  v14 = *(_QWORD *)(a1 + 16);
  v15 = *(void **)(a1 + 24);
  v16 = *(_QWORD *)(a1 + 32);
  v17 = *(_QWORD *)(a1 + 40);
  v18 = *(_QWORD *)(a1 + 48);
  v19 = *(_QWORD *)(a1 + 56);
  v20 = *(_OWORD *)(a1 + 64);
  v21 = *(_OWORD *)(a1 + 80);
  v22 = *(_OWORD *)(a1 + 96);
  v23 = *(_QWORD *)(a1 + 112);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_QWORD *)(a1 + 32) = v7;
  *(_QWORD *)(a1 + 40) = v8;
  *(_QWORD *)(a1 + 48) = v9;
  *(_QWORD *)(a1 + 56) = v10;
  *(_QWORD *)(a1 + 64) = v11;
  *(_QWORD *)(a1 + 72) = v25;
  *(_QWORD *)(a1 + 80) = v26;
  *(_QWORD *)(a1 + 88) = v27;
  *(_QWORD *)(a1 + 96) = v28;
  *(_QWORD *)(a1 + 104) = v29;
  *(_QWORD *)(a1 + 112) = v30;
  *(_DWORD *)(a1 + 120) = v31;
  outlined consume of _ShapeStyle_InterpolatorGroup.AddLayerResult(v12, v13, v14, v15, v16, v17, v18, v19, v20, *((uint64_t *)&v20 + 1), v21, *((uint64_t *)&v21 + 1), v22, *((uint64_t *)&v22 + 1), v23);
  return a1;
}

uint64_t assignWithTake for _ShapeStyle_InterpolatorGroup.AddLayerResult(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  int v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;

  v3 = *(_QWORD *)(a2 + 112);
  v4 = *(_DWORD *)(a2 + 120);
  v5 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  v6 = *(_QWORD *)(a1 + 16);
  v8 = *(void **)(a1 + 24);
  v9 = *(_QWORD *)(a1 + 32);
  v10 = *(_QWORD *)(a1 + 40);
  v11 = *(_QWORD *)(a1 + 48);
  v12 = *(_QWORD *)(a1 + 56);
  v13 = *(_OWORD *)(a1 + 64);
  v14 = *(_OWORD *)(a1 + 80);
  v15 = *(_OWORD *)(a1 + 96);
  v16 = *(_QWORD *)(a1 + 112);
  v17 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v17;
  v18 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v18;
  v19 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v19;
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 112) = v3;
  *(_DWORD *)(a1 + 120) = v4;
  outlined consume of _ShapeStyle_InterpolatorGroup.AddLayerResult(v5, v7, v6, v8, v9, v10, v11, v12, v13, *((uint64_t *)&v13 + 1), v14, *((uint64_t *)&v14 + 1), v15, *((uint64_t *)&v15 + 1), v16);
  return a1;
}

uint64_t getEnumTagSinglePayload for _ShapeStyle_InterpolatorGroup.AddLayerResult(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0x7F && *(_BYTE *)(a1 + 124))
    return (*(_DWORD *)a1 + 127);
  v3 = (((*(_QWORD *)(a1 + 112) >> 57) >> 6) | (2
                                                            * ((*(_QWORD *)(a1 + 112) >> 57) & 0x38 | *(_QWORD *)(a1 + 112) & 7))) ^ 0x7F;
  if (v3 >= 0x7E)
    v3 = -1;
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for _ShapeStyle_InterpolatorGroup.AddLayerResult(uint64_t result, unsigned int a2, unsigned int a3)
{
  uint64_t v3;

  if (a2 > 0x7E)
  {
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_DWORD *)(result + 120) = 0;
    *(_QWORD *)result = a2 - 127;
    if (a3 >= 0x7F)
      *(_BYTE *)(result + 124) = 1;
  }
  else
  {
    if (a3 >= 0x7F)
      *(_BYTE *)(result + 124) = 0;
    if (a2)
    {
      *(_OWORD *)(result + 80) = 0u;
      *(_OWORD *)(result + 96) = 0u;
      v3 = (-a2 >> 1) & 0x3F | ((-a2 & 0x7F) << 6);
      *(_OWORD *)(result + 48) = 0u;
      *(_OWORD *)(result + 64) = 0u;
      *(_OWORD *)(result + 16) = 0u;
      *(_OWORD *)(result + 32) = 0u;
      *(_OWORD *)result = 0u;
      *(_QWORD *)(result + 112) = (v3 | (v3 << 57)) & 0xF000000000000007;
      *(_DWORD *)(result + 120) = 0;
    }
  }
  return result;
}

uint64_t destructiveInjectEnumTag for _ShapeStyle_InterpolatorGroup.AddLayerResult(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 112) = *(_QWORD *)(result + 112) & 0xFFFFFFFFFFFFFF8 | (a2 << 63);
  return result;
}

void *type metadata accessor for _ShapeStyle_InterpolatorGroup.AddLayerResult()
{
  return &unk_2506402B8;
}

uint64_t specialized ContentResponderHelper.update(data:size:position:transform:parent:)(uint64_t a1, char a2, char a3, char a4, uint64_t a5, char a6, uint64_t a7, double a8, double a9, double a10, double a11, double a12, double a13)
{
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  char v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  double v28;
  double v29;
  uint64_t v30;
  double v31;
  double v32;
  double v33;
  double v34;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v43[5];
  uint64_t v44[5];
  char v45[9];

  v15 = *(_QWORD *)&a13;
  v16 = *(_QWORD *)&a12;
  v41 = *(_QWORD *)a1;
  v39 = *(_QWORD *)(a1 + 16);
  v40 = *(_QWORD *)(a1 + 8);
  v38 = *(_QWORD *)(a1 + 24);
  v19 = *(_BYTE *)(a1 + 32);
  v20 = *(_BYTE *)(a1 + 33);
  v21 = *(_QWORD *)(a1 + 40);
  v22 = *(_QWORD *)(v13 + 64);
  v23 = *(_QWORD *)(v13 + 72);
  v24 = *(_QWORD *)(v13 + 80);
  v25 = *(_QWORD *)(v13 + 88);
  v26 = *(_QWORD *)(v13 + 96);
  if ((a6 & 1) == 0 && (a4 & 1) == 0)
  {
    swift_retain();
    v27 = 0;
    v28 = *(double *)&v26;
    v29 = *(double *)&v25;
    v16 = v23;
    v15 = v24;
    v30 = v22;
    if ((a3 & 1) == 0)
      goto LABEL_7;
    goto LABEL_6;
  }
  v30 = *(_QWORD *)a5;
  v31 = *(double *)(a5 + 24);
  v32 = *(double *)(a5 + 32);
  v33 = *(double *)(a5 + 8);
  v34 = *(double *)(a5 + 16);
  *(_QWORD *)(v13 + 64) = *(_QWORD *)a5;
  v29 = v31 - (a12 - v33);
  v28 = v32 - (a13 - v34);
  *(double *)(v13 + 88) = v29;
  *(double *)(v13 + 96) = v28;
  *(double *)(v13 + 72) = a12;
  *(double *)(v13 + 80) = a13;
  outlined retain of ViewTransform(a5);
  v27 = 4;
  if ((a3 & 1) != 0)
  {
LABEL_6:
    *(double *)v13 = a8;
    *(double *)(v13 + 8) = a9;
    v27 |= 2u;
  }
LABEL_7:
  if ((a2 & 1) != 0 || !*(_QWORD *)(v13 + 56))
  {
    outlined retain of ShapeStyledResponderData<_ShapeView<Rectangle.AsymmetricalInset, ForegroundStyle>>(a1);
    swift_bridgeObjectRelease();
    *(_QWORD *)(v13 + 16) = v41;
    *(_QWORD *)(v13 + 24) = v40;
    *(_QWORD *)(v13 + 32) = v39;
    *(_QWORD *)(v13 + 40) = v38;
    *(_QWORD *)(v13 + 48) = v19 & 1 | ((unint64_t)(v20 & 1) << 8);
    *(_QWORD *)(v13 + 56) = v21;
    LOBYTE(v27) = v27 | 1;
  }
  else if (!v27)
  {
    return swift_release();
  }
  v45[0] = v27;
  v44[0] = v22;
  v44[1] = v23;
  v44[2] = v24;
  v44[3] = v25;
  v44[4] = v26;
  v43[0] = v30;
  v43[1] = v16;
  v43[2] = v15;
  *(double *)&v43[3] = v29;
  *(double *)&v43[4] = v28;
  outlined retain of ShapeStyledResponderData<_ShapeView<Rectangle.AsymmetricalInset, ForegroundStyle>>(a1);
  swift_retain();
  ContentPathObservers.notifyPathChanged(for:changes:transform:)(a7, v45, v44, v43);
  swift_release();
  outlined release of ShapeStyledResponderData<_ShapeView<Rectangle.AsymmetricalInset, ForegroundStyle>>(a1);
  return swift_release();
}

{
  uint64_t v13;
  uint64_t v16;
  uint64_t v17;
  char v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  double v28;
  double v29;
  uint64_t v30;
  double v31;
  double v32;
  double v33;
  double v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v43;
  uint64_t v44;
  uint64_t v46;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55[5];
  uint64_t v56[5];
  char v57[9];

  v16 = *(_QWORD *)&a13;
  v17 = *(_QWORD *)&a12;
  v53 = *(_QWORD *)(a1 + 8);
  v54 = *(_QWORD *)a1;
  v51 = *(_QWORD *)(a1 + 24);
  v52 = *(_QWORD *)(a1 + 16);
  v49 = *(unsigned __int8 *)(a1 + 32);
  v20 = *(_BYTE *)(a1 + 33);
  v21 = *(_BYTE *)(a1 + 34);
  v50 = *(_QWORD *)(a1 + 40);
  v22 = *(_QWORD *)(v13 + 64);
  v23 = *(_QWORD *)(v13 + 72);
  v24 = *(_QWORD *)(v13 + 80);
  v25 = *(_QWORD *)(v13 + 88);
  v26 = *(_QWORD *)(v13 + 96);
  if ((a6 & 1) == 0 && (a4 & 1) == 0)
  {
    swift_retain();
    v27 = 0;
    v28 = *(double *)&v26;
    v29 = *(double *)&v25;
    v17 = v23;
    v16 = v24;
    v30 = v22;
    if ((a3 & 1) == 0)
      goto LABEL_7;
    goto LABEL_6;
  }
  v31 = *(double *)(a5 + 24);
  v32 = *(double *)(a5 + 32);
  v33 = *(double *)(a5 + 8);
  v34 = *(double *)(a5 + 16);
  v30 = *(_QWORD *)a5;
  *(_QWORD *)(v13 + 64) = *(_QWORD *)a5;
  v29 = v31 - (a12 - v33);
  v28 = v32 - (a13 - v34);
  *(double *)(v13 + 88) = v29;
  *(double *)(v13 + 96) = v28;
  *(double *)(v13 + 72) = a12;
  *(double *)(v13 + 80) = a13;
  outlined retain of ViewTransform(a5);
  v27 = 4;
  if ((a3 & 1) != 0)
  {
LABEL_6:
    *(double *)v13 = a8;
    *(double *)(v13 + 8) = a9;
    v27 |= 2u;
  }
LABEL_7:
  v35 = *(_QWORD *)(v13 + 56);
  if ((a2 & 1) != 0 || !v35)
  {
    v44 = v30;
    v46 = v22;
    v48 = a7;
    v36 = v20 & 1;
    v43 = v21 & 1;
    v37 = *(_QWORD *)(v13 + 16);
    v38 = *(_QWORD *)(v13 + 24);
    v39 = *(_QWORD *)(v13 + 32);
    v40 = *(_QWORD *)(v13 + 40);
    v41 = *(_QWORD *)(v13 + 48);
    outlined retain of ShapeStyledResponderData<_ShapeView<Path, ForegroundStyle>>(a1);
    outlined consume of ShapeStyledResponderData<_ShapeView<Path, ForegroundStyle>>?(v37, v38, v39, v40, v41, v35);
    *(_QWORD *)(v13 + 16) = v54;
    *(_QWORD *)(v13 + 24) = v53;
    *(_QWORD *)(v13 + 32) = v52;
    *(_QWORD *)(v13 + 40) = v51;
    v30 = v44;
    *(_QWORD *)(v13 + 48) = v49 | (v36 << 8) | (v43 << 16);
    *(_QWORD *)(v13 + 56) = v50;
    LOBYTE(v27) = v27 | 1;
    v22 = v46;
    a7 = v48;
  }
  else if (!v27)
  {
    return swift_release();
  }
  v57[0] = v27;
  v56[0] = v22;
  v56[1] = v23;
  v56[2] = v24;
  v56[3] = v25;
  v56[4] = v26;
  v55[0] = v30;
  v55[1] = v17;
  v55[2] = v16;
  *(double *)&v55[3] = v29;
  *(double *)&v55[4] = v28;
  outlined retain of ShapeStyledResponderData<_ShapeView<Path, ForegroundStyle>>(a1);
  swift_retain();
  ContentPathObservers.notifyPathChanged(for:changes:transform:)(a7, v57, v56, v55);
  swift_release();
  outlined release of ShapeStyledResponderData<_ShapeView<Path, ForegroundStyle>>(a1);
  return swift_release();
}

{
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  char v19;
  char v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  double v28;
  double v29;
  uint64_t v30;
  double v31;
  double v32;
  double v33;
  double v34;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v44[5];
  uint64_t v45[5];
  char v46[9];

  v15 = *(_QWORD *)&a13;
  v16 = *(_QWORD *)&a12;
  v42 = *(_QWORD *)a1;
  v40 = *(_QWORD *)(a1 + 16);
  v41 = *(_QWORD *)(a1 + 8);
  v19 = *(_BYTE *)(a1 + 32);
  v20 = *(_BYTE *)(a1 + 33);
  v21 = *(_BYTE *)(a1 + 34);
  v38 = *(_QWORD *)(a1 + 40);
  v39 = *(_QWORD *)(a1 + 24);
  v22 = *(_QWORD *)(v13 + 64);
  v23 = *(_QWORD *)(v13 + 72);
  v24 = *(_QWORD *)(v13 + 80);
  v25 = *(_QWORD *)(v13 + 88);
  v26 = *(_QWORD *)(v13 + 96);
  if ((a6 & 1) == 0 && (a4 & 1) == 0)
  {
    swift_retain();
    v27 = 0;
    v28 = *(double *)&v26;
    v29 = *(double *)&v25;
    v16 = v23;
    v15 = v24;
    v30 = v22;
    if ((a3 & 1) == 0)
      goto LABEL_7;
    goto LABEL_6;
  }
  v31 = *(double *)(a5 + 24);
  v32 = *(double *)(a5 + 32);
  v33 = *(double *)(a5 + 8);
  v34 = *(double *)(a5 + 16);
  v30 = *(_QWORD *)a5;
  *(_QWORD *)(v13 + 64) = *(_QWORD *)a5;
  v29 = v31 - (a12 - v33);
  v28 = v32 - (a13 - v34);
  *(double *)(v13 + 88) = v29;
  *(double *)(v13 + 96) = v28;
  *(double *)(v13 + 72) = a12;
  *(double *)(v13 + 80) = a13;
  outlined retain of ViewTransform(a5);
  v27 = 4;
  if ((a3 & 1) != 0)
  {
LABEL_6:
    *(double *)v13 = a8;
    *(double *)(v13 + 8) = a9;
    v27 |= 2u;
  }
LABEL_7:
  if ((a2 & 1) != 0 || !*(_QWORD *)(v13 + 56))
  {
    outlined retain of ShapeStyledResponderData<_ShapeView<Rectangle.AsymmetricalInset, ForegroundStyle>>(a1);
    swift_bridgeObjectRelease();
    *(_QWORD *)(v13 + 16) = v42;
    *(_QWORD *)(v13 + 24) = v41;
    *(_QWORD *)(v13 + 32) = v40;
    *(_QWORD *)(v13 + 40) = v39;
    *(_QWORD *)(v13 + 48) = v19 & 1 | ((unint64_t)(v20 & 1) << 8) | ((unint64_t)(v21 & 1) << 16);
    *(_QWORD *)(v13 + 56) = v38;
    LOBYTE(v27) = v27 | 1;
  }
  else if (!v27)
  {
    return swift_release();
  }
  v46[0] = v27;
  v45[0] = v22;
  v45[1] = v23;
  v45[2] = v24;
  v45[3] = v25;
  v45[4] = v26;
  v44[0] = v30;
  v44[1] = v16;
  v44[2] = v15;
  *(double *)&v44[3] = v29;
  *(double *)&v44[4] = v28;
  outlined retain of ShapeStyledResponderData<_ShapeView<Rectangle.AsymmetricalInset, ForegroundStyle>>(a1);
  swift_retain();
  ContentPathObservers.notifyPathChanged(for:changes:transform:)(a7, v46, v45, v44);
  swift_release();
  outlined release of ShapeStyledResponderData<_ShapeView<Rectangle.AsymmetricalInset, ForegroundStyle>>(a1);
  return swift_release();
}

{
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  char v19;
  char v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  double v28;
  double v29;
  uint64_t v30;
  double v31;
  double v32;
  double v33;
  double v34;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v45[5];
  uint64_t v46[5];
  char v47[9];

  v15 = *(_QWORD *)&a13;
  v16 = *(_QWORD *)&a12;
  v41 = *(_QWORD *)(a1 + 8);
  v42 = *(_QWORD *)a1;
  v39 = *(_QWORD *)(a1 + 24);
  v40 = *(_QWORD *)(a1 + 16);
  v19 = *(_BYTE *)(a1 + 32);
  v38 = *(_QWORD *)(a1 + 40);
  v20 = *(_BYTE *)(a1 + 48);
  v21 = *(_BYTE *)(a1 + 49);
  v43 = *(_QWORD *)(a1 + 56);
  v22 = *(_QWORD *)(v13 + 80);
  v23 = *(_QWORD *)(v13 + 88);
  v24 = *(_QWORD *)(v13 + 96);
  v25 = *(_QWORD *)(v13 + 104);
  v26 = *(_QWORD *)(v13 + 112);
  if ((a6 & 1) == 0 && (a4 & 1) == 0)
  {
    swift_retain();
    v27 = 0;
    v28 = *(double *)&v26;
    v29 = *(double *)&v25;
    v16 = v23;
    v15 = v24;
    v30 = v22;
    if ((a3 & 1) == 0)
      goto LABEL_7;
    goto LABEL_6;
  }
  v31 = *(double *)(a5 + 24);
  v32 = *(double *)(a5 + 32);
  v33 = *(double *)(a5 + 8);
  v34 = *(double *)(a5 + 16);
  v30 = *(_QWORD *)a5;
  *(_QWORD *)(v13 + 80) = *(_QWORD *)a5;
  v29 = v31 - (a12 - v33);
  v28 = v32 - (a13 - v34);
  *(double *)(v13 + 104) = v29;
  *(double *)(v13 + 112) = v28;
  *(double *)(v13 + 88) = a12;
  *(double *)(v13 + 96) = a13;
  outlined retain of ViewTransform(a5);
  v27 = 4;
  if ((a3 & 1) != 0)
  {
LABEL_6:
    *(double *)v13 = a8;
    *(double *)(v13 + 8) = a9;
    v27 |= 2u;
  }
LABEL_7:
  if ((a2 & 1) != 0 || !*(_QWORD *)(v13 + 72))
  {
    outlined retain of ShapeStyledResponderData<AnimatedShape<UnevenRoundedRectangle._Inset>>(a1);
    swift_bridgeObjectRelease();
    *(_QWORD *)(v13 + 16) = v42;
    *(_QWORD *)(v13 + 24) = v41;
    *(_QWORD *)(v13 + 32) = v40;
    *(_QWORD *)(v13 + 40) = v39;
    *(_QWORD *)(v13 + 48) = v19 & 1;
    *(_QWORD *)(v13 + 56) = v38;
    LOBYTE(v27) = v27 | 1;
    *(_QWORD *)(v13 + 64) = v20 & 1 | ((unint64_t)(v21 & 1) << 8);
    *(_QWORD *)(v13 + 72) = v43;
  }
  else if (!v27)
  {
    return swift_release();
  }
  v47[0] = v27;
  v46[0] = v22;
  v46[1] = v23;
  v46[2] = v24;
  v46[3] = v25;
  v46[4] = v26;
  v45[0] = v30;
  v45[1] = v16;
  v45[2] = v15;
  *(double *)&v45[3] = v29;
  *(double *)&v45[4] = v28;
  outlined retain of ShapeStyledResponderData<AnimatedShape<UnevenRoundedRectangle._Inset>>(a1);
  swift_retain();
  ContentPathObservers.notifyPathChanged(for:changes:transform:)(a7, v47, v46, v45);
  swift_release();
  outlined release of ShapeStyledResponderData<AnimatedShape<UnevenRoundedRectangle._Inset>>(a1);
  return swift_release();
}

{
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  char v19;
  char v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  double v28;
  double v29;
  uint64_t v30;
  double v31;
  double v32;
  double v33;
  double v34;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v43[5];
  uint64_t v44[5];
  char v45[9];

  v15 = *(_QWORD *)&a13;
  v16 = *(_QWORD *)&a12;
  v41 = *(_QWORD *)a1;
  v19 = *(_BYTE *)(a1 + 16);
  v39 = *(_QWORD *)(a1 + 24);
  v40 = *(_QWORD *)(a1 + 8);
  v20 = *(_BYTE *)(a1 + 32);
  v21 = *(_BYTE *)(a1 + 33);
  v38 = *(_QWORD *)(a1 + 40);
  v22 = *(_QWORD *)(v13 + 64);
  v23 = *(_QWORD *)(v13 + 72);
  v24 = *(_QWORD *)(v13 + 80);
  v25 = *(_QWORD *)(v13 + 88);
  v26 = *(_QWORD *)(v13 + 96);
  if ((a6 & 1) == 0 && (a4 & 1) == 0)
  {
    swift_retain();
    v27 = 0;
    v28 = *(double *)&v26;
    v29 = *(double *)&v25;
    v16 = v23;
    v15 = v24;
    v30 = v22;
    if ((a3 & 1) == 0)
      goto LABEL_7;
    goto LABEL_6;
  }
  v31 = *(double *)(a5 + 24);
  v32 = *(double *)(a5 + 32);
  v33 = *(double *)(a5 + 8);
  v34 = *(double *)(a5 + 16);
  v30 = *(_QWORD *)a5;
  *(_QWORD *)(v13 + 64) = *(_QWORD *)a5;
  v29 = v31 - (a12 - v33);
  v28 = v32 - (a13 - v34);
  *(double *)(v13 + 88) = v29;
  *(double *)(v13 + 96) = v28;
  *(double *)(v13 + 72) = a12;
  *(double *)(v13 + 80) = a13;
  outlined retain of ViewTransform(a5);
  v27 = 4;
  if ((a3 & 1) != 0)
  {
LABEL_6:
    *(double *)v13 = a8;
    *(double *)(v13 + 8) = a9;
    v27 |= 2u;
  }
LABEL_7:
  if ((a2 & 1) != 0 || !*(_QWORD *)(v13 + 56))
  {
    outlined retain of ShapeStyledResponderData<_ShapeView<Rectangle.AsymmetricalInset, ForegroundStyle>>(a1);
    swift_bridgeObjectRelease();
    *(_QWORD *)(v13 + 16) = v41;
    *(_QWORD *)(v13 + 24) = v40;
    *(_QWORD *)(v13 + 32) = v19 & 1;
    *(_QWORD *)(v13 + 40) = v39;
    *(_QWORD *)(v13 + 48) = v20 & 1 | ((unint64_t)(v21 & 1) << 8);
    *(_QWORD *)(v13 + 56) = v38;
    LOBYTE(v27) = v27 | 1;
  }
  else if (!v27)
  {
    return swift_release();
  }
  v45[0] = v27;
  v44[0] = v22;
  v44[1] = v23;
  v44[2] = v24;
  v44[3] = v25;
  v44[4] = v26;
  v43[0] = v30;
  v43[1] = v16;
  v43[2] = v15;
  *(double *)&v43[3] = v29;
  *(double *)&v43[4] = v28;
  outlined retain of ShapeStyledResponderData<_ShapeView<Rectangle.AsymmetricalInset, ForegroundStyle>>(a1);
  swift_retain();
  ContentPathObservers.notifyPathChanged(for:changes:transform:)(a7, v45, v44, v43);
  swift_release();
  outlined release of ShapeStyledResponderData<_ShapeView<Rectangle.AsymmetricalInset, ForegroundStyle>>(a1);
  return swift_release();
}

{
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  char v21;
  char v22;
  char v23;
  char v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  double v28;
  double v29;
  int v30;
  double v31;
  double v32;
  double v33;
  double v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v58;
  uint64_t v59[5];
  uint64_t v60[5];
  char v61[9];

  v15 = *(_QWORD *)&a13;
  v16 = *(_QWORD *)&a12;
  v52 = *(_QWORD *)(a1 + 8);
  v53 = *(_QWORD *)a1;
  v21 = *(_BYTE *)(a1 + 24);
  v50 = *(_QWORD *)(a1 + 32);
  v51 = *(_QWORD *)(a1 + 16);
  v22 = *(_BYTE *)(a1 + 40);
  v23 = *(_BYTE *)(a1 + 56);
  v47 = *(unsigned __int8 *)(a1 + 57);
  v24 = *(_BYTE *)(a1 + 58);
  v25 = *(_BYTE *)(a1 + 59);
  v48 = *(_QWORD *)(a1 + 64);
  v49 = *(_QWORD *)(a1 + 48);
  v58 = *(_QWORD *)(v13 + 88);
  v26 = *(_QWORD *)(v13 + 96);
  v27 = *(_QWORD *)(v13 + 104);
  v28 = *(double *)(v13 + 112);
  v29 = *(double *)(v13 + 120);
  v54 = *(_QWORD *)&v29;
  v55 = *(_QWORD *)&v28;
  if ((a6 & 1) == 0 && (a4 & 1) == 0)
  {
    v30 = 0;
    v16 = *(_QWORD *)(v13 + 96);
    v15 = *(_QWORD *)(v13 + 104);
    v56 = swift_retain();
    if ((a3 & 1) == 0)
      goto LABEL_7;
    goto LABEL_6;
  }
  v31 = *(double *)(a5 + 24);
  v32 = *(double *)(a5 + 32);
  v33 = *(double *)(a5 + 8);
  v34 = *(double *)(a5 + 16);
  v56 = *(_QWORD *)a5;
  *(_QWORD *)(v13 + 88) = *(_QWORD *)a5;
  v28 = v31 - (a12 - v33);
  v29 = v32 - (a13 - v34);
  *(double *)(v13 + 112) = v28;
  *(double *)(v13 + 120) = v29;
  *(double *)(v13 + 96) = a12;
  *(double *)(v13 + 104) = a13;
  outlined retain of ViewTransform(a5);
  v30 = 4;
  if ((a3 & 1) != 0)
  {
LABEL_6:
    *(double *)v13 = a8;
    *(double *)(v13 + 8) = a9;
    v30 |= 2u;
  }
LABEL_7:
  v35 = *(_QWORD *)(v13 + 64);
  if ((a2 & 1) != 0 || !v35)
  {
    v45 = v21 & 1;
    v46 = v22 & 1;
    v43 = v23 & 1;
    v44 = v24 & 1;
    v36 = *(_QWORD *)(v13 + 16);
    v37 = *(_QWORD *)(v13 + 24);
    v38 = *(_QWORD *)(v13 + 32);
    v39 = *(_QWORD *)(v13 + 40);
    v40 = *(_QWORD *)(v13 + 56);
    v42 = *(_QWORD *)(v13 + 48);
    outlined retain of ShapeStyledResponderData<_ShapeView<Rectangle, MeshGradient>>(a1);
    outlined consume of ShapeStyledResponderData<_ShapeView<Rectangle, MeshGradient>>?(v36, v37, v38, v39, v42, v40, v35);
    *(_QWORD *)(v13 + 16) = v53;
    *(_QWORD *)(v13 + 24) = v52;
    *(_QWORD *)(v13 + 32) = v51;
    *(_QWORD *)(v13 + 40) = v45;
    *(_QWORD *)(v13 + 48) = v50;
    *(_QWORD *)(v13 + 56) = v46;
    *(_QWORD *)(v13 + 64) = v49;
    *(_QWORD *)(v13 + 72) = v43 | (v47 << 8) | (v44 << 16) | ((unint64_t)(v25 & 1) << 24);
    *(_QWORD *)(v13 + 80) = v48;
    LOBYTE(v30) = v30 | 1;
  }
  else if (!v30)
  {
    return swift_release();
  }
  v61[0] = v30;
  v60[0] = v58;
  v60[1] = v26;
  v60[2] = v27;
  v60[3] = v55;
  v60[4] = v54;
  v59[0] = v56;
  v59[1] = v16;
  v59[2] = v15;
  *(double *)&v59[3] = v28;
  *(double *)&v59[4] = v29;
  outlined retain of ShapeStyledResponderData<_ShapeView<Rectangle, MeshGradient>>(a1);
  swift_retain();
  ContentPathObservers.notifyPathChanged(for:changes:transform:)(a7, v61, v60, v59);
  swift_release();
  outlined release of ShapeStyledResponderData<_ShapeView<Rectangle, MeshGradient>>(a1);
  return swift_release();
}

uint64_t specialized ContentResponderHelper.update(data:size:position:transform:parent:)(char a1, char a2, char a3, uint64_t a4, char a5, uint64_t a6, float a7, float a8, float a9, float a10, double a11, double a12, double a13, double a14, double a15, double a16)
{
  uint64_t v16;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  double v25;
  double v26;
  double v27;
  double v28;
  int v29;
  uint64_t v30;
  double v31;
  double v32;
  double v33;
  double v34;
  int8x16_t v35;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43[5];
  uint64_t v44[5];
  char v45;

  v21 = *(_QWORD *)&a15;
  v20 = *(_QWORD *)&a16;
  v22 = *(_QWORD *)(v16 + 40);
  v23 = *(_QWORD *)(v16 + 48);
  v24 = *(_QWORD *)(v16 + 56);
  v25 = *(double *)(v16 + 64);
  v26 = *(double *)(v16 + 72);
  v41 = *(_QWORD *)&v26;
  v42 = *(_QWORD *)&v25;
  if ((a5 & 1) == 0 && (a3 & 1) == 0)
  {
    v27 = a11;
    v28 = a12;
    swift_retain();
    v29 = 0;
    v21 = v23;
    v20 = v24;
    v30 = v22;
    if ((a2 & 1) == 0)
      goto LABEL_7;
    goto LABEL_6;
  }
  v27 = a11;
  v28 = a12;
  v30 = *(_QWORD *)a4;
  v31 = *(double *)(a4 + 24);
  v32 = *(double *)(a4 + 32);
  v33 = *(double *)(a4 + 8);
  v34 = *(double *)(a4 + 16);
  *(_QWORD *)(v16 + 40) = *(_QWORD *)a4;
  v25 = v31 - (a15 - v33);
  v26 = v32 - (a16 - v34);
  *(double *)(v16 + 64) = v25;
  *(double *)(v16 + 72) = v26;
  *(double *)(v16 + 48) = a15;
  *(double *)(v16 + 56) = a16;
  outlined retain of ViewTransform(a4);
  v29 = 4;
  if ((a2 & 1) != 0)
  {
LABEL_6:
    *(double *)v16 = v27;
    *(double *)(v16 + 8) = v28;
    v29 |= 2u;
  }
LABEL_7:
  if ((a1 & 1) != 0 || *(_BYTE *)(v16 + 32) == 1)
  {
    v35.i64[0] = LODWORD(a7);
    v35.i64[1] = LODWORD(a9);
    *(int8x16_t *)(v16 + 16) = vorrq_s8((int8x16_t)vshll_n_s32((int32x2_t)__PAIR64__(LODWORD(a10), LODWORD(a8)), 0x20uLL), v35);
    *(_BYTE *)(v16 + 32) = 0;
    LOBYTE(v29) = v29 | 1;
  }
  else if (!v29)
  {
    return swift_release();
  }
  v45 = v29;
  v44[0] = v22;
  v44[1] = v23;
  v44[2] = v24;
  v44[3] = v42;
  v44[4] = v41;
  v43[0] = v30;
  v43[1] = v21;
  v43[2] = v20;
  *(double *)&v43[3] = v25;
  *(double *)&v43[4] = v26;
  swift_retain();
  ContentPathObservers.notifyPathChanged(for:changes:transform:)(a6, &v45, v44, v43);
  swift_release();
  return swift_release();
}

uint64_t specialized ContentResponderHelper.update(data:size:position:transform:parent:)(__int128 *a1, char a2, char a3, char a4, uint64_t a5, char a6, uint64_t a7, double a8, double a9, double a10, double a11, double a12, double a13)
{
  uint64_t v13;
  uint64_t v16;
  uint64_t v17;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  double v29;
  double v30;
  double v31;
  double v32;
  int v33;
  uint64_t v34;
  double v35;
  double v36;
  double v37;
  double v38;
  uint64_t v39;
  double v41;
  double v42;
  char v43;
  uint64_t v44[24];
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;

  v16 = *(_QWORD *)&a13;
  v17 = *(_QWORD *)&a12;
  v20 = a1[9];
  v65 = a1[8];
  v66 = v20;
  v21 = a1[11];
  v67 = a1[10];
  v68 = v21;
  v22 = a1[5];
  v61 = a1[4];
  v62 = v22;
  v23 = a1[7];
  v63 = a1[6];
  v64 = v23;
  v24 = a1[1];
  v57 = *a1;
  v58 = v24;
  v25 = a1[3];
  v59 = a1[2];
  v60 = v25;
  v26 = *(_QWORD *)(v13 + 208);
  v27 = *(_QWORD *)(v13 + 216);
  v28 = *(_QWORD *)(v13 + 224);
  v29 = *(double *)(v13 + 232);
  v30 = *(double *)(v13 + 240);
  v41 = v30;
  v42 = v29;
  if ((a6 & 1) == 0 && (a4 & 1) == 0)
  {
    v31 = a8;
    v32 = a9;
    swift_retain();
    v33 = 0;
    v17 = v27;
    v16 = v28;
    v34 = v26;
    if ((a3 & 1) == 0)
      goto LABEL_7;
    goto LABEL_6;
  }
  v31 = a8;
  v32 = a9;
  v34 = *(_QWORD *)a5;
  v35 = *(double *)(a5 + 24);
  v36 = *(double *)(a5 + 32);
  v37 = *(double *)(a5 + 8);
  v38 = *(double *)(a5 + 16);
  *(_QWORD *)(v13 + 208) = *(_QWORD *)a5;
  v29 = v35 - (a12 - v37);
  v30 = v36 - (a13 - v38);
  *(double *)(v13 + 232) = v29;
  *(double *)(v13 + 240) = v30;
  *(double *)(v13 + 216) = a12;
  *(double *)(v13 + 224) = a13;
  outlined retain of ViewTransform(a5);
  v33 = 4;
  if ((a3 & 1) != 0)
  {
LABEL_6:
    *(double *)v13 = v31;
    *(double *)(v13 + 8) = v32;
    v33 |= 2u;
  }
LABEL_7:
  if ((a2 & 1) != 0
    || (outlined init with take of ShapeStyledResponderData<Image.Resolved>?(v13 + 16, (uint64_t)v44),
        outlined init with take of ShapeStyledResponderData<Image.Resolved>?((uint64_t)v44, (uint64_t)&v45),
        _s7SwiftUI24ShapeStyledResponderDataVyAA5ImageVAAE8ResolvedVGSgWOg((uint64_t)&v45) == 1))
  {
    outlined init with take of ShapeStyledResponderData<Image.Resolved>?(v13 + 16, (uint64_t)v44);
    outlined retain of ShapeStyledResponderData<Image.Resolved>((uint64_t)a1);
    outlined release of ShapeStyledResponderData<Image.Resolved>?((uint64_t)v44);
    v53 = v65;
    v54 = v66;
    v55 = v67;
    v56 = v68;
    v49 = v61;
    v50 = v62;
    v51 = v63;
    v52 = v64;
    v45 = v57;
    v46 = v58;
    v47 = v59;
    v48 = v60;
    _ViewInputs.base.modify(&v45, v39);
    outlined init with take of ShapeStyledResponderData<Image.Resolved>?((uint64_t)&v45, v13 + 16);
    LOBYTE(v33) = v33 | 1;
  }
  else if (!v33)
  {
    return swift_release();
  }
  v43 = v33;
  *(_QWORD *)&v45 = v26;
  *((_QWORD *)&v45 + 1) = v27;
  *(_QWORD *)&v46 = v28;
  *((double *)&v46 + 1) = v42;
  *(double *)&v47 = v41;
  v44[0] = v34;
  v44[1] = v17;
  v44[2] = v16;
  *(double *)&v44[3] = v29;
  *(double *)&v44[4] = v30;
  outlined retain of ShapeStyledResponderData<Image.Resolved>((uint64_t)a1);
  swift_retain();
  ContentPathObservers.notifyPathChanged(for:changes:transform:)(a7, &v43, (uint64_t *)&v45, v44);
  swift_release();
  outlined release of ShapeStyledResponderData<Image.Resolved>((uint64_t)a1);
  return swift_release();
}

uint64_t specialized ContentResponderHelper.update(data:size:position:transform:parent:)(char a1, char a2, char a3, uint64_t a4, char a5, uint64_t a6, double a7, double a8, double a9, double a10, double a11, double a12)
{
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  double v24;
  double v25;
  uint64_t v26;
  double v27;
  double v28;
  double v29;
  double v30;
  uint64_t v34[5];
  uint64_t v35[5];
  char v36;

  v14 = *(_QWORD *)&a12;
  v15 = *(_QWORD *)&a11;
  v18 = *(_QWORD *)(v12 + 24);
  v19 = *(_QWORD *)(v12 + 32);
  v20 = *(_QWORD *)(v12 + 40);
  v21 = *(_QWORD *)(v12 + 48);
  v22 = *(_QWORD *)(v12 + 56);
  if ((a5 & 1) == 0 && (a3 & 1) == 0)
  {
    swift_retain();
    v23 = 0;
    v24 = *(double *)&v22;
    v25 = *(double *)&v21;
    v15 = v19;
    v14 = v20;
    v26 = v18;
    if ((a2 & 1) == 0)
      goto LABEL_7;
    goto LABEL_6;
  }
  v26 = *(_QWORD *)a4;
  v27 = *(double *)(a4 + 24);
  v28 = *(double *)(a4 + 32);
  v29 = *(double *)(a4 + 8);
  v30 = *(double *)(a4 + 16);
  *(_QWORD *)(v12 + 24) = *(_QWORD *)a4;
  v25 = v27 - (a11 - v29);
  v24 = v28 - (a12 - v30);
  *(double *)(v12 + 48) = v25;
  *(double *)(v12 + 56) = v24;
  *(double *)(v12 + 32) = a11;
  *(double *)(v12 + 40) = a12;
  outlined retain of ViewTransform(a4);
  v23 = 4;
  if ((a2 & 1) != 0)
  {
LABEL_6:
    *(double *)v12 = a7;
    *(double *)(v12 + 8) = a8;
    v23 |= 2u;
  }
LABEL_7:
  if ((a1 & 1) != 0 || *(_BYTE *)(v12 + 16) == 1)
  {
    *(_BYTE *)(v12 + 16) = 0;
    LOBYTE(v23) = v23 | 1;
  }
  else if (!v23)
  {
    return swift_release();
  }
  v36 = v23;
  v35[0] = v18;
  v35[1] = v19;
  v35[2] = v20;
  v35[3] = v21;
  v35[4] = v22;
  v34[0] = v26;
  v34[1] = v15;
  v34[2] = v14;
  *(double *)&v34[3] = v25;
  *(double *)&v34[4] = v24;
  swift_retain();
  ContentPathObservers.notifyPathChanged(for:changes:transform:)(a6, &v36, v35, v34);
  swift_release();
  return swift_release();
}

uint64_t specialized ContentResponderHelper.update(data:size:position:transform:parent:)(uint64_t a1, __int16 a2, uint64_t a3, char a4, char a5, char a6, uint64_t a7, char a8, double a9, double a10, double a11, double a12, double a13, double a14, uint64_t a15)
{
  uint64_t v15;
  uint64_t v18;
  uint64_t v19;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  double v29;
  double v30;
  uint64_t v31;
  double v32;
  double v33;
  double v34;
  double v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v43[5];
  uint64_t v44[5];
  char v45[9];

  v18 = *(_QWORD *)&a14;
  v19 = *(_QWORD *)&a13;
  v22 = a15;
  v23 = *(_QWORD *)(v15 + 40);
  v24 = *(_QWORD *)(v15 + 48);
  v25 = *(_QWORD *)(v15 + 56);
  v26 = *(_QWORD *)(v15 + 64);
  v27 = *(_QWORD *)(v15 + 72);
  if ((a8 & 1) == 0 && (a6 & 1) == 0)
  {
    swift_retain();
    v28 = 0;
    v29 = *(double *)&v27;
    v30 = *(double *)&v26;
    v19 = v24;
    v18 = v25;
    v31 = v23;
    if ((a5 & 1) == 0)
      goto LABEL_7;
    goto LABEL_6;
  }
  v31 = *(_QWORD *)a7;
  v32 = *(double *)(a7 + 24);
  v33 = *(double *)(a7 + 32);
  v34 = *(double *)(a7 + 8);
  v35 = *(double *)(a7 + 16);
  *(_QWORD *)(v15 + 40) = *(_QWORD *)a7;
  v30 = v32 - (a13 - v34);
  v29 = v33 - (a14 - v35);
  *(double *)(v15 + 64) = v30;
  *(double *)(v15 + 72) = v29;
  *(double *)(v15 + 48) = a13;
  *(double *)(v15 + 56) = a14;
  outlined retain of ViewTransform(a7);
  v28 = 4;
  if ((a5 & 1) != 0)
  {
LABEL_6:
    *(double *)v15 = a9;
    *(double *)(v15 + 8) = a10;
    v28 |= 2u;
  }
LABEL_7:
  v36 = *(_QWORD *)(v15 + 16);
  if ((a4 & 1) != 0 || !v36)
  {
    v37 = *(_QWORD *)(v15 + 24);
    v38 = *(_QWORD *)(v15 + 32);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    outlined consume of ShapeStyledResponderData<_ShapeView<CombinedContentShape, ForegroundStyle>>?(v36, v37, v38, (void (*)(void))MEMORY[0x24BEE4BC0]);
    *(_QWORD *)(v15 + 16) = a1;
    *(_QWORD *)(v15 + 24) = a2 & 0x101;
    *(_QWORD *)(v15 + 32) = a3;
    LOBYTE(v28) = v28 | 1;
    v22 = a15;
  }
  else if (!v28)
  {
    return swift_release();
  }
  v45[0] = v28;
  v44[0] = v23;
  v44[1] = v24;
  v44[2] = v25;
  v44[3] = v26;
  v44[4] = v27;
  v43[0] = v31;
  v43[1] = v19;
  v43[2] = v18;
  *(double *)&v43[3] = v30;
  *(double *)&v43[4] = v29;
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  ContentPathObservers.notifyPathChanged(for:changes:transform:)(v22, v45, v44, v43);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

{
  uint64_t v15;
  uint64_t v18;
  uint64_t v19;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  double v29;
  double v30;
  uint64_t v31;
  double v32;
  double v33;
  double v34;
  double v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v43[5];
  uint64_t v44[5];
  char v45[9];

  v18 = *(_QWORD *)&a14;
  v19 = *(_QWORD *)&a13;
  v22 = a15;
  v23 = *(_QWORD *)(v15 + 40);
  v24 = *(_QWORD *)(v15 + 48);
  v25 = *(_QWORD *)(v15 + 56);
  v26 = *(_QWORD *)(v15 + 64);
  v27 = *(_QWORD *)(v15 + 72);
  if ((a8 & 1) == 0 && (a6 & 1) == 0)
  {
    swift_retain();
    v28 = 0;
    v29 = *(double *)&v27;
    v30 = *(double *)&v26;
    v19 = v24;
    v18 = v25;
    v31 = v23;
    if ((a5 & 1) == 0)
      goto LABEL_7;
    goto LABEL_6;
  }
  v32 = *(double *)(a7 + 24);
  v33 = *(double *)(a7 + 32);
  v34 = *(double *)(a7 + 8);
  v35 = *(double *)(a7 + 16);
  v31 = *(_QWORD *)a7;
  *(_QWORD *)(v15 + 40) = *(_QWORD *)a7;
  v30 = v32 - (a13 - v34);
  v29 = v33 - (a14 - v35);
  *(double *)(v15 + 64) = v30;
  *(double *)(v15 + 72) = v29;
  *(double *)(v15 + 48) = a13;
  *(double *)(v15 + 56) = a14;
  outlined retain of ViewTransform(a7);
  v28 = 4;
  if ((a5 & 1) != 0)
  {
LABEL_6:
    *(double *)v15 = a9;
    *(double *)(v15 + 8) = a10;
    v28 |= 2u;
  }
LABEL_7:
  v36 = *(_QWORD *)(v15 + 16);
  if ((a4 & 1) != 0 || !v36)
  {
    v37 = *(_QWORD *)(v15 + 24);
    v38 = *(_QWORD *)(v15 + 32);
    swift_retain();
    swift_bridgeObjectRetain();
    outlined consume of ShapeStyledResponderData<_ShapeView<CombinedContentShape, ForegroundStyle>>?(v36, v37, v38, (void (*)(void))MEMORY[0x24BEE4EF8]);
    *(_QWORD *)(v15 + 16) = a1;
    *(_QWORD *)(v15 + 24) = a2 & 0x101;
    *(_QWORD *)(v15 + 32) = a3;
    LOBYTE(v28) = v28 | 1;
    v22 = a15;
  }
  else if (!v28)
  {
    return swift_release();
  }
  v45[0] = v28;
  v44[0] = v23;
  v44[1] = v24;
  v44[2] = v25;
  v44[3] = v26;
  v44[4] = v27;
  v43[0] = v31;
  v43[1] = v19;
  v43[2] = v18;
  *(double *)&v43[3] = v30;
  *(double *)&v43[4] = v29;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  ContentPathObservers.notifyPathChanged(for:changes:transform:)(v22, v45, v44, v43);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t specialized ContentResponderHelper.update(data:size:position:transform:parent:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, char a5, char a6, char a7, uint64_t a8, double a9, double a10, double a11, double a12, double a13, double a14, char a15, uint64_t a16)
{
  uint64_t v16;
  uint64_t v20;
  uint64_t v21;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  double v30;
  double v31;
  uint64_t v32;
  double v33;
  double v34;
  double v35;
  double v36;
  uint64_t v37;
  uint64_t v42[5];
  uint64_t v43[5];
  char v44[9];

  v20 = *(_QWORD *)&a14;
  v21 = *(_QWORD *)&a13;
  v24 = *(_QWORD *)(v16 + 48);
  v25 = *(_QWORD *)(v16 + 56);
  v26 = *(_QWORD *)(v16 + 64);
  v27 = *(_QWORD *)(v16 + 72);
  v28 = *(_QWORD *)(v16 + 80);
  if ((a15 & 1) == 0 && (a7 & 1) == 0)
  {
    swift_retain();
    v29 = 0;
    v30 = *(double *)&v28;
    v31 = *(double *)&v27;
    v21 = v25;
    v20 = v26;
    v32 = v24;
    if ((a6 & 1) == 0)
      goto LABEL_7;
    goto LABEL_6;
  }
  v32 = *(_QWORD *)a8;
  v33 = *(double *)(a8 + 24);
  v34 = *(double *)(a8 + 32);
  v35 = *(double *)(a8 + 8);
  v36 = *(double *)(a8 + 16);
  *(_QWORD *)(v16 + 48) = *(_QWORD *)a8;
  v31 = v33 - (a13 - v35);
  v30 = v34 - (a14 - v36);
  *(double *)(v16 + 72) = v31;
  *(double *)(v16 + 80) = v30;
  *(double *)(v16 + 56) = a13;
  *(double *)(v16 + 64) = a14;
  outlined retain of ViewTransform(a8);
  v29 = 4;
  if ((a6 & 1) != 0)
  {
LABEL_6:
    *(double *)v16 = a9;
    *(double *)(v16 + 8) = a10;
    v29 |= 2u;
  }
LABEL_7:
  v37 = *(_QWORD *)(v16 + 16);
  if ((a5 & 1) != 0 || !v37)
  {
    swift_retain();
    swift_bridgeObjectRetain();
    swift_retain();
    outlined consume of ShapeStyledResponderData<StyledTextContentView>?(v37);
    *(_QWORD *)(v16 + 16) = a1;
    *(_QWORD *)(v16 + 24) = a2;
    *(_QWORD *)(v16 + 32) = a3 & 1;
    *(_QWORD *)(v16 + 40) = a4;
    LOBYTE(v29) = v29 | 1;
  }
  else if (!v29)
  {
    return swift_release();
  }
  v44[0] = v29;
  v43[0] = v24;
  v43[1] = v25;
  v43[2] = v26;
  v43[3] = v27;
  v43[4] = v28;
  v42[0] = v32;
  v42[1] = v21;
  v42[2] = v20;
  *(double *)&v42[3] = v31;
  *(double *)&v42[4] = v30;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  ContentPathObservers.notifyPathChanged(for:changes:transform:)(a16, v44, v43, v42);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t specialized ContentResponderHelper.update(data:size:position:transform:parent:)(int a1, uint64_t a2, char a3, char a4, char a5, uint64_t a6, char a7, uint64_t a8, double a9, double a10, double a11, double a12, double a13, double a14)
{
  uint64_t v14;
  uint64_t v18;
  uint64_t v19;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  double v28;
  double v29;
  uint64_t v30;
  double v31;
  double v32;
  double v33;
  double v34;
  uint64_t v38[5];
  uint64_t v39[5];
  char v40;

  v18 = *(_QWORD *)&a14;
  v19 = *(_QWORD *)&a13;
  v22 = *(_QWORD *)(v14 + 32);
  v23 = *(_QWORD *)(v14 + 40);
  v24 = *(_QWORD *)(v14 + 48);
  v25 = *(_QWORD *)(v14 + 56);
  v26 = *(_QWORD *)(v14 + 64);
  if ((a7 & 1) == 0 && (a5 & 1) == 0)
  {
    swift_retain();
    v27 = 0;
    v28 = *(double *)&v26;
    v29 = *(double *)&v25;
    v19 = v23;
    v18 = v24;
    v30 = v22;
    if ((a4 & 1) == 0)
      goto LABEL_7;
    goto LABEL_6;
  }
  v31 = *(double *)(a6 + 24);
  v32 = *(double *)(a6 + 32);
  v33 = *(double *)(a6 + 8);
  v34 = *(double *)(a6 + 16);
  v30 = *(_QWORD *)a6;
  *(_QWORD *)(v14 + 32) = *(_QWORD *)a6;
  v29 = v31 - (a13 - v33);
  v28 = v32 - (a14 - v34);
  *(double *)(v14 + 56) = v29;
  *(double *)(v14 + 64) = v28;
  *(double *)(v14 + 40) = a13;
  *(double *)(v14 + 48) = a14;
  outlined retain of ViewTransform(a6);
  v27 = 4;
  if ((a4 & 1) != 0)
  {
LABEL_6:
    *(double *)v14 = a9;
    *(double *)(v14 + 8) = a10;
    v27 |= 2u;
  }
LABEL_7:
  if ((a3 & 1) != 0 || !*(_QWORD *)(v14 + 24))
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(_QWORD *)(v14 + 16) = a1 & 0x10101;
    *(_QWORD *)(v14 + 24) = a2;
    LOBYTE(v27) = v27 | 1;
  }
  else if (!v27)
  {
    return swift_release();
  }
  v40 = v27;
  v39[0] = v22;
  v39[1] = v23;
  v39[2] = v24;
  v39[3] = v25;
  v39[4] = v26;
  v38[0] = v30;
  v38[1] = v19;
  v38[2] = v18;
  *(double *)&v38[3] = v29;
  *(double *)&v38[4] = v28;
  swift_retain();
  swift_bridgeObjectRetain();
  ContentPathObservers.notifyPathChanged(for:changes:transform:)(a8, &v40, v39, v38);
  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

uint64_t specialized ContentResponderHelper.update(data:size:position:transform:parent:)(__int16 a1, uint64_t a2, char a3, char a4, char a5, uint64_t a6, char a7, uint64_t a8, double a9, double a10, double a11, double a12, double a13, double a14)
{
  uint64_t v14;
  uint64_t v18;
  uint64_t v19;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  double v28;
  double v29;
  uint64_t v30;
  double v31;
  double v32;
  double v33;
  double v34;
  uint64_t v38[5];
  uint64_t v39[5];
  char v40;

  v18 = *(_QWORD *)&a14;
  v19 = *(_QWORD *)&a13;
  v22 = *(_QWORD *)(v14 + 32);
  v23 = *(_QWORD *)(v14 + 40);
  v24 = *(_QWORD *)(v14 + 48);
  v25 = *(_QWORD *)(v14 + 56);
  v26 = *(_QWORD *)(v14 + 64);
  if ((a7 & 1) == 0 && (a5 & 1) == 0)
  {
    swift_retain();
    v27 = 0;
    v28 = *(double *)&v26;
    v29 = *(double *)&v25;
    v19 = v23;
    v18 = v24;
    v30 = v22;
    if ((a4 & 1) == 0)
      goto LABEL_7;
    goto LABEL_6;
  }
  v31 = *(double *)(a6 + 24);
  v32 = *(double *)(a6 + 32);
  v33 = *(double *)(a6 + 8);
  v34 = *(double *)(a6 + 16);
  v30 = *(_QWORD *)a6;
  *(_QWORD *)(v14 + 32) = *(_QWORD *)a6;
  v29 = v31 - (a13 - v33);
  v28 = v32 - (a14 - v34);
  *(double *)(v14 + 56) = v29;
  *(double *)(v14 + 64) = v28;
  *(double *)(v14 + 40) = a13;
  *(double *)(v14 + 48) = a14;
  outlined retain of ViewTransform(a6);
  v27 = 4;
  if ((a4 & 1) != 0)
  {
LABEL_6:
    *(double *)v14 = a9;
    *(double *)(v14 + 8) = a10;
    v27 |= 2u;
  }
LABEL_7:
  if ((a3 & 1) != 0 || !*(_QWORD *)(v14 + 24))
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(_QWORD *)(v14 + 16) = a1 & 0x101;
    *(_QWORD *)(v14 + 24) = a2;
    LOBYTE(v27) = v27 | 1;
  }
  else if (!v27)
  {
    return swift_release();
  }
  v40 = v27;
  v39[0] = v22;
  v39[1] = v23;
  v39[2] = v24;
  v39[3] = v25;
  v39[4] = v26;
  v38[0] = v30;
  v38[1] = v19;
  v38[2] = v18;
  *(double *)&v38[3] = v29;
  *(double *)&v38[4] = v28;
  swift_retain();
  swift_bridgeObjectRetain();
  ContentPathObservers.notifyPathChanged(for:changes:transform:)(a8, &v40, v39, v38);
  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

uint64_t specialized ContentResponderHelper.update(data:size:position:transform:parent:)(__int16 a1, uint64_t a2, char a3, char a4, char a5, uint64_t a6, char a7, uint64_t a8, double a9, double a10, double a11, double a12, double a13, double a14, double a15)
{
  uint64_t v15;
  uint64_t v19;
  uint64_t v20;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  double v29;
  double v30;
  uint64_t v31;
  double v32;
  double v33;
  double v34;
  double v35;
  uint64_t v40[5];
  uint64_t v41[5];
  char v42;

  v19 = *(_QWORD *)&a15;
  v20 = *(_QWORD *)&a14;
  v23 = *(_QWORD *)(v15 + 40);
  v24 = *(_QWORD *)(v15 + 48);
  v25 = *(_QWORD *)(v15 + 56);
  v26 = *(_QWORD *)(v15 + 64);
  v27 = *(_QWORD *)(v15 + 72);
  if ((a7 & 1) == 0 && (a5 & 1) == 0)
  {
    swift_retain();
    v28 = 0;
    v29 = *(double *)&v27;
    v30 = *(double *)&v26;
    v20 = v24;
    v19 = v25;
    v31 = v23;
    if ((a4 & 1) == 0)
      goto LABEL_7;
    goto LABEL_6;
  }
  v32 = *(double *)(a6 + 24);
  v33 = *(double *)(a6 + 32);
  v34 = *(double *)(a6 + 8);
  v35 = *(double *)(a6 + 16);
  v31 = *(_QWORD *)a6;
  *(_QWORD *)(v15 + 40) = *(_QWORD *)a6;
  v30 = v32 - (a14 - v34);
  v29 = v33 - (a15 - v35);
  *(double *)(v15 + 64) = v30;
  *(double *)(v15 + 72) = v29;
  *(double *)(v15 + 48) = a14;
  *(double *)(v15 + 56) = a15;
  outlined retain of ViewTransform(a6);
  v28 = 4;
  if ((a4 & 1) != 0)
  {
LABEL_6:
    *(double *)v15 = a10;
    *(double *)(v15 + 8) = a11;
    v28 |= 2u;
  }
LABEL_7:
  if ((a3 & 1) != 0 || !*(_QWORD *)(v15 + 32))
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(double *)(v15 + 16) = a9;
    *(_QWORD *)(v15 + 24) = a1 & 0x101;
    *(_QWORD *)(v15 + 32) = a2;
    LOBYTE(v28) = v28 | 1;
  }
  else if (!v28)
  {
    return swift_release();
  }
  v42 = v28;
  v41[0] = v23;
  v41[1] = v24;
  v41[2] = v25;
  v41[3] = v26;
  v41[4] = v27;
  v40[0] = v31;
  v40[1] = v20;
  v40[2] = v19;
  *(double *)&v40[3] = v30;
  *(double *)&v40[4] = v29;
  swift_retain();
  swift_bridgeObjectRetain();
  ContentPathObservers.notifyPathChanged(for:changes:transform:)(a8, &v42, v41, v40);
  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

uint64_t specialized ContentResponderHelper.update(data:size:position:transform:parent:)(uint64_t *a1, char a2, char a3, char a4, uint64_t a5, char a6, uint64_t a7, double a8, double a9, double a10, double a11, double a12, double a13)
{
  return specialized ContentResponderHelper.update(data:size:position:transform:parent:)(a1, a2, a3, a4, a5, a6, a7, (void (*)(uint64_t *))outlined retain of ShapeStyledResponderData<_ShapeView<Rectangle, EllipticalGradient>>, a8, a9, a10, a11, a12, a13, (void (*)(uint64_t *))outlined release of ShapeStyledResponderData<_ShapeView<Rectangle, EllipticalGradient>>);
}

{
  return specialized ContentResponderHelper.update(data:size:position:transform:parent:)(a1, a2, a3, a4, a5, a6, a7, (void (*)(uint64_t *))outlined retain of ShapeStyledResponderData<_ShapeView<Rectangle, LinearGradient>>, a8, a9, a10, a11, a12, a13, (void (*)(uint64_t *))outlined release of ShapeStyledResponderData<_ShapeView<Rectangle, LinearGradient>>);
}

uint64_t specialized ContentResponderHelper.update(data:size:position:transform:parent:)(int a1, uint64_t a2, char a3, char a4, char a5, uint64_t a6, char a7, uint64_t a8, double a9, double a10, double a11, double a12, double a13, double a14, double a15, double a16)
{
  uint64_t v16;
  uint64_t v20;
  uint64_t v21;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  double v30;
  double v31;
  uint64_t v32;
  double v33;
  double v34;
  double v35;
  double v36;
  uint64_t v42[5];
  uint64_t v43[5];
  char v44;

  v20 = *(_QWORD *)&a16;
  v21 = *(_QWORD *)&a15;
  v24 = *(_QWORD *)(v16 + 48);
  v25 = *(_QWORD *)(v16 + 56);
  v26 = *(_QWORD *)(v16 + 64);
  v27 = *(_QWORD *)(v16 + 72);
  v28 = *(_QWORD *)(v16 + 80);
  if ((a7 & 1) == 0 && (a5 & 1) == 0)
  {
    swift_retain();
    v29 = 0;
    v30 = *(double *)&v28;
    v31 = *(double *)&v27;
    v21 = v25;
    v20 = v26;
    v32 = v24;
    if ((a4 & 1) == 0)
      goto LABEL_7;
    goto LABEL_6;
  }
  v33 = *(double *)(a6 + 24);
  v34 = *(double *)(a6 + 32);
  v35 = *(double *)(a6 + 8);
  v36 = *(double *)(a6 + 16);
  v32 = *(_QWORD *)a6;
  *(_QWORD *)(v16 + 48) = *(_QWORD *)a6;
  v31 = v33 - (a15 - v35);
  v30 = v34 - (a16 - v36);
  *(double *)(v16 + 72) = v31;
  *(double *)(v16 + 80) = v30;
  *(double *)(v16 + 56) = a15;
  *(double *)(v16 + 64) = a16;
  outlined retain of ViewTransform(a6);
  v29 = 4;
  if ((a4 & 1) != 0)
  {
LABEL_6:
    *(double *)v16 = a11;
    *(double *)(v16 + 8) = a12;
    v29 |= 2u;
  }
LABEL_7:
  if ((a3 & 1) != 0 || !*(_QWORD *)(v16 + 40))
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(double *)(v16 + 16) = a9;
    *(double *)(v16 + 24) = a10;
    *(_QWORD *)(v16 + 32) = a1 & 0x10101;
    *(_QWORD *)(v16 + 40) = a2;
    LOBYTE(v29) = v29 | 1;
  }
  else if (!v29)
  {
    return swift_release();
  }
  v44 = v29;
  v43[0] = v24;
  v43[1] = v25;
  v43[2] = v26;
  v43[3] = v27;
  v43[4] = v28;
  v42[0] = v32;
  v42[1] = v21;
  v42[2] = v20;
  *(double *)&v42[3] = v31;
  *(double *)&v42[4] = v30;
  swift_retain();
  swift_bridgeObjectRetain();
  ContentPathObservers.notifyPathChanged(for:changes:transform:)(a8, &v44, v43, v42);
  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

uint64_t specialized ContentResponderHelper.update(data:size:position:transform:parent:)(uint64_t *a1, char a2, char a3, char a4, uint64_t a5, char a6, uint64_t a7, void (*a8)(uint64_t *), double a9, double a10, double a11, double a12, double a13, double a14, void (*a15)(uint64_t *))
{
  uint64_t v15;
  uint64_t v18;
  uint64_t v19;
  char v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  void (*v36)(uint64_t *);
  uint64_t v37;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v49[5];
  uint64_t v50[5];
  char v51[9];

  v18 = *(_QWORD *)&a14;
  v19 = *(_QWORD *)&a13;
  v44 = a1[1];
  v45 = *a1;
  v42 = a1[3];
  v43 = a1[2];
  v41 = a1[4];
  v22 = *((_BYTE *)a1 + 40);
  v23 = *((_BYTE *)a1 + 41);
  v46 = a1[6];
  v24 = *(_QWORD *)(v15 + 72);
  v25 = *(_QWORD *)(v15 + 80);
  v26 = *(_QWORD *)(v15 + 88);
  v27 = *(_QWORD *)(v15 + 96);
  v28 = *(_QWORD *)(v15 + 104);
  if ((a6 & 1) == 0 && (a4 & 1) == 0)
  {
    swift_retain();
    v29 = 0;
    v30 = *(double *)&v28;
    v31 = *(double *)&v27;
    v19 = v25;
    v18 = v26;
    v47 = v24;
    if ((a3 & 1) == 0)
      goto LABEL_7;
    goto LABEL_6;
  }
  v32 = *(double *)(a5 + 24);
  v33 = *(double *)(a5 + 32);
  v34 = *(double *)(a5 + 8);
  v35 = *(double *)(a5 + 16);
  v47 = *(_QWORD *)a5;
  *(_QWORD *)(v15 + 72) = *(_QWORD *)a5;
  v31 = v32 - (a13 - v34);
  v30 = v33 - (a14 - v35);
  *(double *)(v15 + 96) = v31;
  *(double *)(v15 + 104) = v30;
  *(double *)(v15 + 80) = a13;
  *(double *)(v15 + 88) = a14;
  outlined retain of ViewTransform(a5);
  v29 = 4;
  if ((a3 & 1) != 0)
  {
LABEL_6:
    *(double *)v15 = a9;
    *(double *)(v15 + 8) = a10;
    v29 |= 2u;
  }
LABEL_7:
  v36 = a8;
  v37 = *(_QWORD *)(v15 + 16);
  if ((a2 & 1) != 0 || !v37)
  {
    a8(a1);
    outlined consume of ShapeStyledResponderData<_ShapeView<Rectangle, AngularGradient>>?(v37);
    v36 = a8;
    *(_QWORD *)(v15 + 16) = v45;
    *(_QWORD *)(v15 + 24) = v44;
    *(_QWORD *)(v15 + 32) = v43;
    *(_QWORD *)(v15 + 40) = v42;
    *(_QWORD *)(v15 + 48) = v41;
    *(_QWORD *)(v15 + 56) = v22 & 1 | ((unint64_t)(v23 & 1) << 8);
    LOBYTE(v29) = v29 | 1;
    *(_QWORD *)(v15 + 64) = v46;
  }
  else if (!v29)
  {
    return swift_release();
  }
  v51[0] = v29;
  v50[0] = v24;
  v50[1] = v25;
  v50[2] = v26;
  v50[3] = v27;
  v50[4] = v28;
  v49[0] = v47;
  v49[1] = v19;
  v49[2] = v18;
  *(double *)&v49[3] = v31;
  *(double *)&v49[4] = v30;
  v36(a1);
  swift_retain();
  ContentPathObservers.notifyPathChanged(for:changes:transform:)(a7, v51, v50, v49);
  swift_release();
  a15(a1);
  return swift_release();
}

uint64_t specialized ShapeStyledResponderData.contains(points:size:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X4>, _QWORD *a4@<X8>, CGFloat a5@<D0>, CGFloat a6@<D1>)
{
  uint64_t result;
  char v13;
  uint64_t v14;

  v14 = a3;
  v13 = 0;
  if (!_ShapeStyle_Pack.isClear(name:)((SwiftUI::_ShapeStyle_Name)&v13))
    return specialized ShapeStyledLeafView.contains(points:size:)(a1, a2, a4, a5, a6);
  v14 = a3;
  v13 = 1;
  result = _ShapeStyle_Pack.isClear(name:)((SwiftUI::_ShapeStyle_Name)&v13);
  if ((result & 1) == 0)
    return specialized ShapeStyledLeafView.contains(points:size:)(a1, a2, a4, a5, a6);
  *a4 = 0;
  return result;
}

BOOL specialized ShapeStyledResponderData.contentPath(size:)@<W0>(uint64_t a1@<X1>, uint64_t a2@<X3>, uint64_t a3@<X8>, CGFloat a4@<D0>, CGFloat a5@<D1>)
{
  _BOOL8 result;
  char v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double (*v16)(uint64_t);
  uint64_t v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  char v27;
  uint64_t v28;
  CGRect v29;

  v28 = a2;
  v27 = 0;
  if (_ShapeStyle_Pack.isClear(name:)((SwiftUI::_ShapeStyle_Name)&v27)
    && (v28 = a2, v27 = 1, result = _ShapeStyle_Pack.isClear(name:)((SwiftUI::_ShapeStyle_Name)&v27)))
  {
    v11 = 6;
    v12 = 0.0;
    v13 = 0.0;
    v14 = 0.0;
    v15 = 0.0;
  }
  else
  {
    if (a1)
    {
      v16 = *(double (**)(uint64_t))(*(_QWORD *)a1 + 112);
      v17 = swift_retain();
      v18 = v16(v17);
      v22 = CGRect.outset(by:)(v18, v19, v20, v21, 0.0, 0.0, a4, a5);
      v24 = v23;
      a4 = v25;
      a5 = v26;
      swift_release();
    }
    else
    {
      v22 = 0.0;
      v24 = 0.0;
    }
    v29.origin.x = v22;
    v29.origin.y = v24;
    v29.size.width = a4;
    v29.size.height = a5;
    result = CGRectIsNull(v29);
    if (result)
      v12 = 0.0;
    else
      v12 = v22;
    if (result)
      v13 = 0.0;
    else
      v13 = v24;
    if (result)
      v14 = 0.0;
    else
      v14 = a4;
    if (result)
      v15 = 0.0;
    else
      v15 = a5;
    if (result)
      v11 = 6;
    else
      v11 = 0;
  }
  *(double *)a3 = v12;
  *(double *)(a3 + 8) = v13;
  *(double *)(a3 + 16) = v14;
  *(double *)(a3 + 24) = v15;
  *(_BYTE *)(a3 + 32) = v11;
  return result;
}

uint64_t specialized ContentResponderHelper.addContentPath(to:kind:in:observer:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  CGFloat v21;
  CGFloat v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned __int8 v29;
  uint64_t v30;
  __int128 v31;
  _QWORD v32[4];
  unsigned __int8 v33;
  _BYTE v34[40];
  _BYTE v35[40];
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unsigned __int8 v40;
  _OWORD v41[2];
  uint64_t v42;

  v6 = v5;
  if (a4)
  {
    v10 = *(_QWORD *)(v6 + 88);
    v11 = *(_QWORD *)(v10 + 16);
    if (v11)
    {
      v12 = v10 + 32;
      swift_bridgeObjectRetain();
      do
      {
        v13 = MEMORY[0x23B7C9E44](v12);
        if (v13)
        {
          v14 = v13;
          swift_unknownObjectRelease();
          if (v14 == a4)
          {
            result = swift_bridgeObjectRelease();
            goto LABEL_14;
          }
        }
        v12 += 16;
        --v11;
      }
      while (v11);
      swift_bridgeObjectRelease();
    }
    *((_QWORD *)&v41[0] + 1) = a5;
    swift_unknownObjectWeakInit();
    v15 = *(_QWORD **)(v6 + 88);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v15 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v15[2] + 1, 1, (unint64_t)v15);
    v17 = v15[2];
    v16 = v15[3];
    if (v17 >= v16 >> 1)
      v15 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v16 > 1), v17 + 1, 1, (unint64_t)v15);
    v15[2] = v17 + 1;
    result = outlined init with take of ContentPathObservers.Observer((uint64_t)v41, (uint64_t)&v15[2 * v17 + 4]);
    *(_QWORD *)(v6 + 88) = v15;
  }
LABEL_14:
  v18 = *(_QWORD *)(v6 + 16);
  if (v18)
  {
    v19 = *(_QWORD *)(v6 + 24);
    v20 = *(_QWORD *)(v6 + 40);
    v21 = *(double *)v6;
    v22 = *(double *)(v6 + 8);
    if (a2 == 1)
    {
      swift_retain();
      swift_bridgeObjectRetain();
      swift_retain();
LABEL_25:
      specialized ShapeStyledResponderData.contentPath(size:)(v19, v20, (uint64_t)v32, v21, v22);
      v25 = v32[0];
      v26 = v32[1];
      v27 = v32[2];
      v28 = v32[3];
      v29 = v33;
      goto LABEL_26;
    }
    v23 = one-time initialization token for v3;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    if (v23 != -1)
      swift_once();
    v24 = static Semantics.v3;
    if (one-time initialization token for forced != -1)
      swift_once();
    swift_beginAccess();
    if ((byte_25426FAB4 & 1) != 0)
    {
      if ((dyld_program_sdk_at_least() & 1) == 0)
        goto LABEL_25;
    }
    else if (static Semantics.forced < v24)
    {
      goto LABEL_25;
    }
    v25 = 0;
    v26 = 0;
    v27 = 0;
    v28 = 0;
    v29 = 6;
LABEL_26:
    v36 = v25;
    v37 = v26;
    v38 = v27;
    v39 = v28;
    v40 = v29;
    Path.isEmpty.getter();
    if ((v30 & 1) != 0)
    {
      outlined consume of Path.Storage(v25, v26, v27, v28, v29);
    }
    else
    {
      v31 = *(_OWORD *)(v6 + 64);
      v41[0] = *(_OWORD *)(v6 + 48);
      v41[1] = v31;
      v42 = *(_QWORD *)(v6 + 80);
      MEMORY[0x24BDAC7A8](v30);
      outlined retain of ViewTransform((uint64_t)v41);
      Path.mapPoints(_:)((void (*)(_QWORD **))partial apply for closure #1 in Path.convert(to:transform:), (uint64_t)v34);
      outlined consume of Path.Storage(v25, v26, v27, v28, v29);
      outlined release of ViewTransform((uint64_t)v41);
      outlined init with take of Path.Storage((uint64_t)v34, (uint64_t)v35);
      outlined retain of Path.Storage((uint64_t)v35, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of Path.Storage);
      Path.formTrivialUnion(_:)((uint64_t)v34);
      outlined retain of Path.Storage((uint64_t)v34, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of Path.Storage);
      outlined retain of Path.Storage((uint64_t)v34, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of Path.Storage);
    }
    return outlined consume of ShapeStyledResponderData<StyledTextContentView>?(v18);
  }
  return result;
}

double specialized ContentResponderHelper.globalPosition.getter()
{
  uint64_t v0;
  __int128 v1;
  double v2;
  _OWORD v4[2];
  double v5;
  double v6;
  uint64_t v7;
  _OWORD v8[2];
  uint64_t v9;
  char v10;
  char v11;
  __int128 v12;
  __int128 v13;
  double v14;
  _BYTE v15[8];
  uint64_t v16;

  v1 = *(_OWORD *)(v0 + 64);
  v12 = *(_OWORD *)(v0 + 48);
  v13 = v1;
  v14 = *(double *)(v0 + 80);
  v9 = 0;
  memset(v8, 0, sizeof(v8));
  v10 = 2;
  v11 = 2;
  outlined init with take of AnyElement?((uint64_t)&v12, (uint64_t)v15);
  outlined init with take of AnyElement?((uint64_t)v15, (uint64_t)&v16);
  if (v16 || *((double *)&v13 + 1) != 0.0 || (v2 = 0.0, v14 != 0.0))
  {
    v6 = 0.0;
    v7 = 0;
    v4[0] = v12;
    v4[1] = v13;
    v5 = v14;
    outlined retain of ViewTransform((uint64_t)&v12);
    specialized ViewTransform.convert(_:_:)((uint64_t)v8, (uint64_t)v4);
    v2 = v6;
  }
  outlined destroy of ViewTransform.Conversion((uint64_t)v8);
  outlined release of ViewTransform((uint64_t)&v12);
  return v2;
}

_QWORD *specialized closure #1 in ContentResponderHelper.containsGlobalPoints(_:cacheKey:options:)(_QWORD *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  double v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  char v20;
  _OWORD v21[2];
  uint64_t v22;
  char v23;
  _BYTE v24[56];
  uint64_t v25;

  v7 = result;
  v25 = a2;
  if (*(_QWORD *)(a2 + 16))
  {
    v11 = a2;
    v12 = *(_QWORD *)(a3 + 48);
    v13 = *(_QWORD *)(a3 + 56);
    v14 = *(_QWORD *)(a3 + 64);
    v15 = *(double *)(a3 + 72);
    v16 = *(double *)(a3 + 80);
    v17 = 1;
    v18 = 0u;
    v19 = 0u;
    v20 = 2;
    memset(v21, 0, sizeof(v21));
    v22 = 0;
    v23 = 2;
    outlined init with copy of CoordinateSpace((uint64_t)&v17, (uint64_t)v24);
    v24[41] = 4;
    swift_retain();
    swift_bridgeObjectRetain();
    outlined destroy of CoordinateSpace((uint64_t)&v17);
    if (v12 || v15 != 0.0 || v16 != 0.0)
    {
      v17 = v12;
      *(_QWORD *)&v18 = v13;
      *((_QWORD *)&v18 + 1) = v14;
      *(double *)&v19 = v15;
      *((double *)&v19 + 1) = v16;
      specialized ViewTransform.convert(_:_:)((uint64_t)v21, (uint64_t)&v17);
      v11 = v25;
    }
    outlined destroy of ViewTransform.Conversion((uint64_t)v21);
    swift_release();
    specialized ShapeStyledResponderData.contains(points:size:)(v11, a5, a7, v7, *(CGFloat *)a3, *(CGFloat *)(a3 + 8));
    return (_QWORD *)swift_bridgeObjectRelease();
  }
  else
  {
    *result = 0;
  }
  return result;
}

uint64_t StyledTextResponder.__allocating_init(view:styles:inputs:)(int a1, int a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = swift_allocObject();
  v7 = specialized StyledTextResponder.init(view:styles:inputs:)(a1, a2, a3, v6);
  swift_release();
  return v7;
}

Swift::Void __swiftcall StyledTextResponderFilter.updateValue()()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *v0;
  StyledTextResponder.update()();
  type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for [ViewResponder], (uint64_t (*)(uint64_t))type metadata accessor for ViewResponder, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1250]);
  if (!AGGraphGetOutputValue())
  {
    type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>, MEMORY[0x24BEE4AD0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
    v2 = swift_allocObject();
    *(_OWORD *)(v2 + 16) = xmmword_235283250;
    *(_QWORD *)(v2 + 32) = v1;
    specialized Array._endMutation()();
    swift_retain();
    AGGraphSetOutputValue();
    swift_bridgeObjectRelease();
  }
}

Swift::Void __swiftcall StyledTextResponder.update()()
{
  uint64_t v0;
  uint64_t Value;
  char v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t *v7;
  char v8;
  char v9;
  uint64_t v10;
  double *v11;
  double v12;
  double v13;
  double v14;
  double v15;
  char v16;
  char v17;
  double *v18;
  double v19;
  double v20;
  char v21;
  char v22;
  uint64_t v23;
  char v24;
  char v25;
  uint64_t v26;
  __int128 v27;
  _OWORD v28[2];
  uint64_t v29;

  Value = AGGraphGetValue();
  v3 = v2;
  v4 = *(_QWORD *)Value;
  v5 = *(_QWORD *)(Value + 8);
  v6 = *(_BYTE *)(Value + 16);
  v7 = (uint64_t *)AGGraphGetValue();
  v9 = v3 | v8;
  v10 = *v7;
  v11 = (double *)AGGraphGetValue();
  v12 = *v11;
  v13 = v11[1];
  v14 = v11[2];
  v15 = v11[3];
  v17 = v16 & 1;
  v18 = (double *)AGGraphGetValue();
  v19 = *v18;
  v20 = v18[1];
  v22 = v21 & 1;
  v23 = AGGraphGetValue();
  v25 = v24;
  v26 = *(_QWORD *)(v23 + 32);
  v27 = *(_OWORD *)(v23 + 16);
  v28[0] = *(_OWORD *)v23;
  v28[1] = v27;
  v29 = v26;
  swift_beginAccess();
  swift_retain_n();
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  outlined retain of ViewTransform((uint64_t)v28);
  specialized ContentResponderHelper.update(data:size:position:transform:parent:)(v4, v5, v6, v10, v9 & 1, v17, v22, (uint64_t)v28, v12, v13, v14, v15, v19, v20, v25 & 1, v0);
  swift_endAccess();
  swift_bridgeObjectRelease();
  swift_release_n();
  swift_release_n();
  outlined release of ViewTransform((uint64_t)v28);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
}

uint64_t StyledTextResponder.view.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t Value;
  uint64_t v3;
  char v4;

  Value = AGGraphGetValue();
  v3 = *(_QWORD *)(Value + 8);
  v4 = *(_BYTE *)(Value + 16);
  *(_QWORD *)a1 = *(_QWORD *)Value;
  *(_QWORD *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 16) = v4;
  swift_retain();
  return swift_retain();
}

uint64_t key path getter for StyledTextResponder.view : StyledTextResponder@<X0>(uint64_t a1@<X8>)
{
  uint64_t Value;
  uint64_t v3;
  char v4;

  Value = AGGraphGetValue();
  v3 = *(_QWORD *)(Value + 8);
  v4 = *(_BYTE *)(Value + 16);
  *(_QWORD *)a1 = *(_QWORD *)Value;
  *(_QWORD *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 16) = v4;
  swift_retain();
  return swift_retain();
}

uint64_t StyledTextResponder.view.setter()
{
  AGGraphSetValue();
  swift_release();
  return swift_release();
}

void (*StyledTextResponder.view.modify(_QWORD *a1))(_QWORD **a1)
{
  uint64_t v1;
  _DWORD *v3;
  uint64_t Value;
  uint64_t v5;
  char v6;

  v3 = malloc(0x2CuLL);
  *a1 = v3;
  v3[5] = *(_DWORD *)(v1 + 40);
  Value = AGGraphGetValue();
  v5 = *(_QWORD *)(Value + 8);
  v6 = *(_BYTE *)(Value + 16);
  *(_QWORD *)v3 = *(_QWORD *)Value;
  *((_QWORD *)v3 + 1) = v5;
  *((_BYTE *)v3 + 16) = v6;
  swift_retain();
  swift_retain();
  return StyledTextResponder.view.modify;
}

void StyledTextResponder.view.modify(_QWORD **a1)
{
  _QWORD *v1;
  uint64_t v2;
  char v3;

  v1 = *a1;
  v2 = (*a1)[1];
  v1[3] = **a1;
  v3 = *((_BYTE *)v1 + 16);
  v1[4] = v2;
  *((_BYTE *)v1 + 40) = v3;
  AGGraphSetValue();
  swift_release();
  swift_release();
  free(v1);
}

uint64_t StyledTextResponder.$view.getter()
{
  uint64_t v0;

  return *(unsigned int *)(v0 + 40);
}

uint64_t StyledTextResponder.$view.setter(uint64_t result)
{
  uint64_t v1;

  *(_DWORD *)(v1 + 40) = result;
  return result;
}

_DWORD *(*StyledTextResponder.$view.modify(uint64_t a1))(_DWORD *result)
{
  uint64_t v1;

  *(_QWORD *)a1 = v1;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(v1 + 40);
  return StyledTextResponder.$view.modify;
}

_DWORD *StyledTextResponder.$view.modify(_DWORD *result)
{
  *(_DWORD *)(*(_QWORD *)result + 40) = result[2];
  return result;
}

uint64_t StyledTextResponder.styles.getter@<X0>(_QWORD *a1@<X8>)
{
  *a1 = *(_QWORD *)AGGraphGetValue();
  return swift_bridgeObjectRetain();
}

uint64_t StyledTextResponder.styles.setter()
{
  AGGraphSetValue();
  return swift_bridgeObjectRelease();
}

uint64_t (*StyledTextResponder.styles.modify(uint64_t a1))(_QWORD *a1)
{
  uint64_t v1;

  *(_DWORD *)(a1 + 16) = *(_DWORD *)(v1 + 44);
  *(_QWORD *)a1 = *(_QWORD *)AGGraphGetValue();
  swift_bridgeObjectRetain();
  return StyledTextResponder.styles.modify;
}

uint64_t StyledTextResponder.styles.modify(_QWORD *a1)
{
  a1[1] = *a1;
  AGGraphSetValue();
  return swift_bridgeObjectRelease();
}

uint64_t StyledTextResponder.$styles.getter()
{
  uint64_t v0;

  return *(unsigned int *)(v0 + 44);
}

uint64_t StyledTextResponder.$styles.setter(uint64_t result)
{
  uint64_t v1;

  *(_DWORD *)(v1 + 44) = result;
  return result;
}

_DWORD *(*StyledTextResponder.$styles.modify(uint64_t a1))(_DWORD *result)
{
  uint64_t v1;

  *(_QWORD *)a1 = v1;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(v1 + 44);
  return StyledTextResponder.$styles.modify;
}

_DWORD *StyledTextResponder.$styles.modify(_DWORD *result)
{
  *(_DWORD *)(*(_QWORD *)result + 44) = result[2];
  return result;
}

uint64_t StyledTextResponder.inputs.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;

  v2 = *(_DWORD *)(v1 + 56);
  v3 = *(_QWORD *)(v1 + 64);
  v4 = *(_QWORD *)(v1 + 88);
  v5 = *(_QWORD *)(v1 + 96);
  v6 = *(_DWORD *)(v1 + 128);
  *(_QWORD *)a1 = *(_QWORD *)(v1 + 48);
  *(_DWORD *)(a1 + 8) = v2;
  *(_QWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(v1 + 72);
  *(_QWORD *)(a1 + 40) = v4;
  *(_QWORD *)(a1 + 48) = v5;
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(v1 + 104);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(v1 + 120);
  *(_DWORD *)(a1 + 80) = v6;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

id StyledTextResponder.viewSubgraph.getter()
{
  uint64_t v0;

  return *(id *)(v0 + 136);
}

uint64_t StyledTextResponder.helper.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  char v10;
  uint64_t v11;
  uint64_t v12;

  swift_beginAccess();
  v3 = *(_QWORD *)(v1 + 160);
  v4 = *(_QWORD *)(v1 + 168);
  v5 = *(_QWORD *)(v1 + 176);
  v6 = *(_QWORD *)(v1 + 184);
  v7 = *(_QWORD *)(v1 + 192);
  v8 = *(_QWORD *)(v1 + 232);
  v9 = *(_DWORD *)(v1 + 240);
  v10 = *(_BYTE *)(v1 + 244);
  v11 = *(_QWORD *)(v1 + 248);
  v12 = *(_QWORD *)(v1 + 256);
  *(_OWORD *)a1 = *(_OWORD *)(v1 + 144);
  *(_QWORD *)(a1 + 16) = v3;
  *(_QWORD *)(a1 + 24) = v4;
  *(_QWORD *)(a1 + 32) = v5;
  *(_QWORD *)(a1 + 40) = v6;
  *(_QWORD *)(a1 + 48) = v7;
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(v1 + 200);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(v1 + 216);
  *(_QWORD *)(a1 + 88) = v8;
  *(_DWORD *)(a1 + 96) = v9;
  *(_BYTE *)(a1 + 100) = v10;
  *(_QWORD *)(a1 + 104) = v11;
  *(_QWORD *)(a1 + 112) = v12;
  outlined copy of ShapeStyledResponderData<StyledTextContentView>?(v3);
  swift_retain();
  return swift_bridgeObjectRetain();
}

uint64_t StyledTextResponder.helper.setter(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v16;
  __int128 v17;

  v2 = *a1;
  v3 = a1[1];
  v4 = a1[2];
  v5 = a1[3];
  v6 = a1[6];
  v16 = *(_OWORD *)(a1 + 7);
  v17 = *((_OWORD *)a1 + 2);
  v7 = a1[9];
  v8 = a1[10];
  v9 = a1[11];
  v10 = *((_DWORD *)a1 + 24);
  v11 = *((_BYTE *)a1 + 100);
  v12 = a1[14];
  v13 = a1[13];
  swift_beginAccess();
  v14 = *(_QWORD *)(v1 + 160);
  *(_QWORD *)(v1 + 144) = v2;
  *(_QWORD *)(v1 + 152) = v3;
  *(_QWORD *)(v1 + 160) = v4;
  *(_QWORD *)(v1 + 168) = v5;
  *(_OWORD *)(v1 + 176) = v17;
  *(_QWORD *)(v1 + 192) = v6;
  *(_OWORD *)(v1 + 200) = v16;
  *(_QWORD *)(v1 + 216) = v7;
  *(_QWORD *)(v1 + 224) = v8;
  *(_QWORD *)(v1 + 232) = v9;
  *(_DWORD *)(v1 + 240) = v10;
  *(_BYTE *)(v1 + 244) = v11;
  *(_QWORD *)(v1 + 248) = v13;
  *(_QWORD *)(v1 + 256) = v12;
  outlined consume of ShapeStyledResponderData<StyledTextContentView>?(v14);
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t (*StyledTextResponder.helper.modify())()
{
  swift_beginAccess();
  return CAHostingLayer.propertiesNeedingUpdate.modify;
}

void *StyledTextResponder.childSubgraph.getter()
{
  uint64_t v0;
  void *v1;
  id v2;

  swift_beginAccess();
  v1 = *(void **)(v0 + 264);
  v2 = v1;
  return v1;
}

void StyledTextResponder.childSubgraph.setter(uint64_t a1)
{
  uint64_t v1;
  void *v3;

  swift_beginAccess();
  v3 = *(void **)(v1 + 264);
  *(_QWORD *)(v1 + 264) = a1;

}

uint64_t (*StyledTextResponder.childSubgraph.modify())()
{
  swift_beginAccess();
  return DisplayList.GraphicsRenderer.platformViewMode.modify;
}

void *StyledTextResponder.childViewSubgraph.getter()
{
  uint64_t v0;
  void *v1;
  id v2;

  swift_beginAccess();
  v1 = *(void **)(v0 + 272);
  v2 = v1;
  return v1;
}

void StyledTextResponder.childViewSubgraph.setter(uint64_t a1)
{
  uint64_t v1;
  void *v3;

  swift_beginAccess();
  v3 = *(void **)(v1 + 272);
  *(_QWORD *)(v1 + 272) = a1;

}

uint64_t (*StyledTextResponder.childViewSubgraph.modify())()
{
  swift_beginAccess();
  return CAHostingLayer.propertiesNeedingUpdate.modify;
}

uint64_t StyledTextResponder.gestureGraph.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  if (*(_QWORD *)(v0 + 280))
  {
    v1 = *(_QWORD *)(v0 + 280);
  }
  else
  {
    type metadata accessor for GestureGraph();
    v2 = swift_allocObject();
    v3 = swift_retain();
    v1 = specialized GestureGraph.init(rootResponder:)(v3, v2);
    *(_QWORD *)(v0 + 280) = v1;
    swift_retain();
    swift_release();
  }
  swift_retain();
  return v1;
}

uint64_t StyledTextResponder.gestureGraph.setter(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 280) = a1;
  return swift_release();
}

uint64_t (*StyledTextResponder.gestureGraph.modify(uint64_t *a1))(_QWORD *a1)
{
  uint64_t v1;

  a1[1] = v1;
  *a1 = StyledTextResponder.gestureGraph.getter();
  return StyledTextResponder.gestureGraph.modify;
}

uint64_t StyledTextResponder.gestureGraph.modify(_QWORD *a1)
{
  *(_QWORD *)(a1[1] + 280) = *a1;
  return swift_release();
}

uint64_t StyledTextResponder.bindingBridge.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  if (*(_QWORD *)(v0 + 288))
  {
    v1 = *(_QWORD *)(v0 + 288);
  }
  else
  {
    v1 = closure #1 in StyledTextResponder.bindingBridge.getter(v0);
    *(_QWORD *)(v0 + 288) = v1;
    *(_QWORD *)(v0 + 296) = v2;
    swift_retain();
    swift_release();
  }
  swift_retain();
  return v1;
}

uint64_t StyledTextResponder.bindingBridge.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 288) = a1;
  *(_QWORD *)(v2 + 296) = a2;
  return swift_release();
}

uint64_t closure #1 in StyledTextResponder.bindingBridge.getter(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 48);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v3 = *(_QWORD *)(StyledTextResponder.gestureGraph.getter() + 208);
  swift_retain();
  swift_release();
  swift_retain_n();
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  v4 = specialized closure #1 in PropertyList.subscript.getter(v2);
  v6 = v5;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  swift_release_n();
  if (v4)
  {
    v7 = (*(uint64_t (**)(uint64_t, uint64_t, _UNKNOWN **, uint64_t, uint64_t))(v6 + 8))(v3, a1, &protocol witness table for StyledTextResponder, v4, v6);
    v9 = v8;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    swift_release();
    *(_QWORD *)(StyledTextResponder.gestureGraph.getter() + 200) = v9;
    swift_unknownObjectWeakAssign();
    swift_release();
    return v7;
  }
  else
  {
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

uint64_t (*StyledTextResponder.bindingBridge.modify(uint64_t *a1))(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  a1[2] = v1;
  *a1 = StyledTextResponder.bindingBridge.getter();
  a1[1] = v3;
  return StyledTextResponder.bindingBridge.modify;
}

uint64_t StyledTextResponder.bindingBridge.modify(uint64_t a1)
{
  *(_OWORD *)(*(_QWORD *)(a1 + 16) + 288) = *(_OWORD *)a1;
  return swift_release();
}

uint64_t StyledTextResponder._gestureContainer.getter()
{
  swift_beginAccess();
  return swift_unknownObjectRetain();
}

uint64_t StyledTextResponder._gestureContainer.setter(uint64_t a1)
{
  uint64_t v1;

  swift_beginAccess();
  *(_QWORD *)(v1 + 304) = a1;
  return swift_unknownObjectRelease();
}

uint64_t (*StyledTextResponder._gestureContainer.modify())()
{
  swift_beginAccess();
  return CAHostingLayer.propertiesNeedingUpdate.modify;
}

uint64_t StyledTextResponder.init(view:styles:inputs:)(int a1, int a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;

  v4 = specialized StyledTextResponder.init(view:styles:inputs:)(a1, a2, a3, v3);
  swift_release();
  return v4;
}

uint64_t StyledTextResponder.gestureContainer.getter()
{
  _QWORD *v0;
  _QWORD *v1;
  int IsValid;
  uint64_t result;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD aBlock[6];
  unsigned __int8 v20;

  v1 = v0;
  IsValid = AGSubgraphIsValid();
  result = 0;
  if (IsValid)
  {
    swift_beginAccess();
    v4 = v0[20];
    if (v4)
    {
      v5 = *(void **)(v4 + 192);
      if (v5)
      {
        v20 = 0;
        v6 = one-time initialization token for kitLink;
        v7 = v5;
        if (v6 != -1)
          swift_once();
        v8 = static NSAttributedStringKey.kitLink;
        v9 = objc_msgSend(v7, sel_length);
        v10 = swift_allocObject();
        *(_QWORD *)(v10 + 16) = &v20;
        v11 = swift_allocObject();
        *(_QWORD *)(v11 + 16) = partial apply for closure #1 in NSAttributedString.hasLinkAttributes.getter;
        *(_QWORD *)(v11 + 24) = v10;
        aBlock[4] = partial apply for thunk for @callee_guaranteed (@guaranteed [NSAttributedStringKey : Any], @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ();
        aBlock[5] = v11;
        aBlock[0] = MEMORY[0x24BDAC760];
        aBlock[1] = 1107296256;
        aBlock[2] = thunk for @escaping @callee_guaranteed (@in_guaranteed Any?, @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ();
        aBlock[3] = &block_descriptor_13;
        v12 = _Block_copy(aBlock);
        swift_retain();
        swift_release();
        objc_msgSend(v7, sel_enumerateAttribute_inRange_options_usingBlock_, v8, 0, v9, 0, v12);
        _Block_release(v12);
        LOBYTE(v8) = swift_isEscapingClosureAtFileLocation();
        swift_release();
        if ((v8 & 1) != 0)
        {
          __break(1u);
          goto LABEL_16;
        }
        v13 = v20;

        swift_release();
        if (v13 == 1)
        {
          swift_beginAccess();
          if (v0[38])
            return swift_unknownObjectRetain();
          if (AGSubgraphIsValid())
          {
            v14 = v0[6];
            swift_retain_n();
            swift_retain_n();
            swift_bridgeObjectRetain_n();
            swift_bridgeObjectRetain_n();
            v15 = specialized closure #1 in PropertyList.subscript.getter(v14);
            v17 = v16;
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease_n();
            swift_release_n();
            swift_release_n();
            if (!v15)
            {
LABEL_17:
              result = _assertionFailure(_:_:file:line:flags:)();
              __break(1u);
              return result;
            }
            v18 = (*(uint64_t (**)(_QWORD *, _UNKNOWN **, uint64_t, uint64_t))(v17 + 8))(v1, &protocol witness table for StyledTextResponder, v15, v17);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_release();
            swift_release();
            v1[38] = v18;
            swift_unknownObjectRelease();
            if (v1[38])
              return swift_unknownObjectRetain();
LABEL_16:
            __break(1u);
            goto LABEL_17;
          }
        }
      }
    }
    return 0;
  }
  return result;
}

uint64_t StyledTextResponder.eventSources.getter()
{
  uint64_t v0;
  uint64_t v1;

  v0 = StyledTextResponder.bindingBridge.getter();
  v1 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v0 + 192))(v0);
  swift_release();
  return v1;
}

void StyledTextResponder.gestureType.getter()
{
  type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for AnyGesture<()>, MEMORY[0x24BEE4AE0] + 8, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for AnyGesture);
}

uint64_t StyledTextResponder.isValid.getter()
{
  uint64_t v0;

  swift_beginAccess();
  if (*(_QWORD *)(v0 + 304))
    return AGSubgraphIsValid();
  else
    return 0;
}

Swift::Void __swiftcall StyledTextResponder.detachContainer()()
{
  uint64_t v0;

  swift_beginAccess();
  *(_QWORD *)(v0 + 304) = 0;
  swift_unknownObjectRelease();
}

uint64_t StyledTextResponder.containsGlobalPoints(_:cacheKey:options:)(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  void *v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD aBlock[6];

  swift_beginAccess();
  v7 = *(_QWORD *)(v3 + 160);
  if (v7)
  {
    v8 = *(_QWORD *)(v3 + 168);
    v9 = *(_QWORD *)(v3 + 176);
    v10 = *(_QWORD *)(v3 + 184);
    if ((*(_BYTE *)(v3 + 244) & 1) != 0 || (a3 & 0x100000000) != 0 || *(_DWORD *)(v3 + 240) != (_DWORD)a3)
    {
      v23 = a1;
      swift_retain();
      swift_bridgeObjectRetain();
      swift_retain();
      specialized closure #1 in ContentResponderHelper.containsGlobalPoints(_:cacheKey:options:)(&v24, a2, v3 + 144, v7, v8, v9 & 1, v10);
      v13 = v12;
      outlined consume of ShapeStyledResponderData<StyledTextContentView>?(v7);
      v11 = v24;
      *(_QWORD *)(v3 + 248) = v24;
      *(_QWORD *)(v3 + 256) = v13;
      *(_DWORD *)(v3 + 240) = a3;
      *(_BYTE *)(v3 + 244) = BYTE4(a3) & 1;
    }
    else
    {
      v11 = *(_QWORD *)(v3 + 248);
    }
  }
  else
  {
    v11 = 0;
  }
  swift_endAccess();
  result = AGSubgraphIsValid();
  if ((result & 1) == 0)
    goto LABEL_14;
  result = AGGraphGetValue();
  v15 = *(void **)(*(_QWORD *)result + 192);
  if (!v15)
    goto LABEL_14;
  LOBYTE(v24) = 0;
  v16 = one-time initialization token for kitLink;
  v17 = v15;
  if (v16 != -1)
    swift_once();
  v18 = static NSAttributedStringKey.kitLink;
  v19 = objc_msgSend(v17, sel_length, v23);
  v20 = swift_allocObject();
  *(_QWORD *)(v20 + 16) = &v24;
  v21 = swift_allocObject();
  *(_QWORD *)(v21 + 16) = closure #1 in NSAttributedString.hasLinkAttributes.getterpartial apply;
  *(_QWORD *)(v21 + 24) = v20;
  aBlock[4] = thunk for @callee_guaranteed (@in_guaranteed Any?, @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ()partial apply;
  aBlock[5] = v21;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed (@in_guaranteed Any?, @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ();
  aBlock[3] = &block_descriptor_14;
  v22 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  objc_msgSend(v17, sel_enumerateAttribute_inRange_options_usingBlock_, v18, 0, v19, 0, v22);
  _Block_release(v22);
  LOBYTE(v18) = swift_isEscapingClosureAtFileLocation();
  result = swift_release();
  if ((v18 & 1) == 0)
  {

    result = swift_release();
LABEL_14:
    *a1 = v11;
    return result;
  }
  __break(1u);
  return result;
}

uint64_t StyledTextResponder.addContentPath(to:kind:in:observer:)(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;

  v9 = *a2;
  swift_beginAccess();
  specialized ContentResponderHelper.addContentPath(to:kind:in:observer:)(a1, v9, a3, a4, a5);
  return swift_endAccess();
}

Swift::Void __swiftcall StyledTextResponder.extendPrintTree(string:)(Swift::String *string)
{
  uint64_t v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  Swift::String v6;
  Swift::String v7;
  Swift::String v8;
  Swift::String v9;
  Swift::String v10;
  Swift::String v11;
  _OWORD v12[7];
  uint64_t v13;

  swift_beginAccess();
  v2 = *(_OWORD *)(v1 + 208);
  v3 = *(_OWORD *)(v1 + 240);
  v12[5] = *(_OWORD *)(v1 + 224);
  v12[6] = v3;
  v13 = *(_QWORD *)(v1 + 256);
  v4 = *(_OWORD *)(v1 + 160);
  v12[0] = *(_OWORD *)(v1 + 144);
  v12[1] = v4;
  v5 = *(_OWORD *)(v1 + 192);
  v12[2] = *(_OWORD *)(v1 + 176);
  v12[3] = v5;
  v12[4] = v2;
  outlined retain of ContentResponderHelper<ShapeStyledResponderData<StyledTextContentView>>((uint64_t)v12);
  specialized ContentResponderHelper.globalPosition.getter();
  outlined release of ContentResponderHelper<ShapeStyledResponderData<StyledTextContentView>>((uint64_t)v12);
  v6._countAndFlagsBits = 91;
  v6._object = (void *)0xE100000000000000;
  String.append(_:)(v6);
  v7._countAndFlagsBits = Double.description.getter();
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  v8._countAndFlagsBits = 8236;
  v8._object = (void *)0xE200000000000000;
  String.append(_:)(v8);
  v9._countAndFlagsBits = Double.description.getter();
  String.append(_:)(v9);
  swift_bridgeObjectRelease();
  v10._countAndFlagsBits = 4202589;
  v10._object = (void *)0xE300000000000000;
  String.append(_:)(v10);
  type metadata accessor for (CGFloat, CGFloat)();
  _print_unlocked<A, B>(_:_:)();
  v11._countAndFlagsBits = 0;
  v11._object = (void *)0xE000000000000000;
  String.append(_:)(v11);
  swift_bridgeObjectRelease();
}

uint64_t StyledTextResponder.bindEvent(_:)(uint64_t a1)
{
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  unsigned int v8;
  _BYTE v10[40];
  uint64_t v11[2];
  uint64_t v12;
  ValueMetadata *v13;
  double v14;
  double v15;

  swift_beginAccess();
  if (static CoreTesting.isRunning == 1)
  {
    swift_beginAccess();
    v2 = 0;
    if ((static GestureContainerFeature.isEnabledOverride & 1) == 0)
      return v2;
  }
  else
  {
    v3 = getenv("SWIFTUI_GESTURE_CONTAINER");
    if (v3)
    {
      if (!atoi(v3))
        return 0;
    }
    else
    {
      v13 = &type metadata for GestureContainerFeature;
      v14 = COERCE_DOUBLE(lazy protocol witness table accessor for type GestureContainerFeature and conformance GestureContainerFeature());
      v7 = isFeatureEnabled(_:)();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v11);
      if ((v7 & 1) == 0)
        return 0;
      if (one-time initialization token for v6 != -1)
        swift_once();
      v8 = static Semantics.v6;
      if (one-time initialization token for forced != -1)
        swift_once();
      swift_beginAccess();
      if ((byte_25426FAB4 & 1) != 0)
      {
        if (!dyld_program_sdk_at_least())
          return 0;
      }
      else if (static Semantics.forced < v8)
      {
        return 0;
      }
    }
  }
  outlined init with copy of AnyTrackedValue(a1, (uint64_t)v10);
  HitTestableEvent.init(_:)((uint64_t)v10, (uint64_t)v11);
  v4 = v12;
  if (v12 == 1)
    return 0;
  v6 = v11[0];
  v5 = v11[1];
  v11[0] = 0;
  v2 = ViewResponder.hitTest(globalPoint:radius:options:)(v11, *(double *)&v13, v14, v15);
  outlined consume of HitTestableEvent?(v6, v5, v4);
  return v2;
}

void StyledTextResponder.makeGesture(inputs:)(_OWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  _OWORD v7[6];
  _OWORD v8[2];

  v4 = a1[5];
  v7[4] = a1[4];
  v7[5] = v4;
  v8[0] = a1[6];
  *(_OWORD *)((char *)v8 + 12) = *(_OWORD *)((char *)a1 + 108);
  v5 = a1[1];
  v7[0] = *a1;
  v7[1] = v5;
  v6 = a1[3];
  v7[2] = a1[2];
  v7[3] = v6;
  swift_retain();
  specialized AnyGestureResponder.makeWrappedGesture(inputs:makeChild:)((uint64_t)v7, v2, a2);
}

uint64_t ResolvedStyledText.gesture.getter()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  id v3;
  uint64_t v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t result;
  int v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD aBlock[6];
  unsigned __int8 v14;

  v1 = *(void **)(v0 + 192);
  if (!v1)
    goto LABEL_7;
  v14 = 0;
  v2 = one-time initialization token for kitLink;
  v3 = v1;
  if (v2 != -1)
    swift_once();
  v4 = static NSAttributedStringKey.kitLink;
  v5 = objc_msgSend(v3, sel_length);
  v6 = swift_allocObject();
  *(_QWORD *)(v6 + 16) = &v14;
  v7 = swift_allocObject();
  *(_QWORD *)(v7 + 16) = closure #1 in NSAttributedString.hasLinkAttributes.getterpartial apply;
  *(_QWORD *)(v7 + 24) = v6;
  aBlock[4] = thunk for @callee_guaranteed (@in_guaranteed Any?, @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ()partial apply;
  aBlock[5] = v7;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed (@in_guaranteed Any?, @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ();
  aBlock[3] = &block_descriptor_35;
  v8 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  objc_msgSend(v3, sel_enumerateAttribute_inRange_options_usingBlock_, v4, 0, v5, 0, v8);
  _Block_release(v8);
  LOBYTE(v4) = swift_isEscapingClosureAtFileLocation();
  result = swift_release();
  if ((v4 & 1) == 0)
  {
    v10 = v14;

    swift_release();
    if (v10 == 1)
    {
      v11 = swift_allocObject();
      *(_QWORD *)(v11 + 16) = v0;
      *(_QWORD *)(v11 + 24) = v0;
      type metadata accessor for AnyGestureStorage<SizeGesture<_MapGesture<OpenURLGesture<ModifierGesture<StateContainerGesture<State #1 in ResolvedStyledText.gesture.getter, TappableSpatialEvent, URL>, SingleTapGesture<TappableSpatialEvent>>>, ()>>>(0);
      v12 = swift_allocObject();
      *(_QWORD *)(v12 + 16) = partial apply for closure #1 in ResolvedStyledText.gesture.getter;
      *(_QWORD *)(v12 + 24) = v11;
      swift_retain_n();
      return v12;
    }
LABEL_7:
    type metadata accessor for AnyGestureStorage<EmptyGesture<()>>(0);
    return swift_allocObject();
  }
  __break(1u);
  return result;
}

Swift::Void __swiftcall StyledTextResponder.resetGesture()()
{
  uint64_t v0;
  void *v1;
  void *v2;

  swift_beginAccess();
  v1 = *(void **)(v0 + 264);
  *(_QWORD *)(v0 + 264) = 0;

  swift_beginAccess();
  v2 = *(void **)(v0 + 272);
  *(_QWORD *)(v0 + 272) = 0;

}

void StyledTextResponder.__allocating_init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

void StyledTextResponder.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

uint64_t StyledTextResponder.__ivar_destroyer()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();

  outlined consume of ShapeStyledResponderData<StyledTextContentView>?(*(_QWORD *)(v0 + 160));
  swift_bridgeObjectRelease();
  swift_release();

  swift_release();
  swift_release();
  return swift_unknownObjectRelease();
}

uint64_t StyledTextResponder.deinit()
{
  uint64_t v0;

  outlined destroy of weak GestureGraphDelegate?(v0 + 16);
  swift_weakDestroy();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();

  outlined consume of ShapeStyledResponderData<StyledTextContentView>?(*(_QWORD *)(v0 + 160));
  swift_bridgeObjectRelease();
  swift_release();

  swift_release();
  swift_release();
  swift_unknownObjectRelease();
  return v0;
}

uint64_t StyledTextResponder.__deallocating_deinit()
{
  StyledTextResponder.deinit();
  return swift_deallocClassInstance();
}

uint64_t protocol witness for AnyGestureResponder.inputs.getter in conformance StyledTextResponder@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;

  v2 = *(_DWORD *)(v1 + 56);
  v3 = *(_QWORD *)(v1 + 64);
  v4 = *(_QWORD *)(v1 + 88);
  v5 = *(_QWORD *)(v1 + 96);
  v6 = *(_DWORD *)(v1 + 128);
  *(_QWORD *)a1 = *(_QWORD *)(v1 + 48);
  *(_DWORD *)(a1 + 8) = v2;
  *(_QWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(v1 + 72);
  *(_QWORD *)(a1 + 40) = v4;
  *(_QWORD *)(a1 + 48) = v5;
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(v1 + 104);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(v1 + 120);
  *(_DWORD *)(a1 + 80) = v6;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

void *protocol witness for AnyGestureResponder.childSubgraph.getter in conformance StyledTextResponder()
{
  uint64_t v0;
  void *v1;
  id v2;

  swift_beginAccess();
  v1 = *(void **)(v0 + 264);
  v2 = v1;
  return v1;
}

void protocol witness for AnyGestureResponder.childSubgraph.setter in conformance StyledTextResponder(uint64_t a1)
{
  uint64_t v1;
  void *v3;

  swift_beginAccess();
  v3 = *(void **)(v1 + 264);
  *(_QWORD *)(v1 + 264) = a1;

}

uint64_t (*protocol witness for AnyGestureResponder.childSubgraph.modify in conformance StyledTextResponder())()
{
  swift_beginAccess();
  return CAHostingLayer.propertiesNeedingUpdate.modify;
}

void *protocol witness for AnyGestureResponder.childViewSubgraph.getter in conformance StyledTextResponder()
{
  uint64_t v0;
  void *v1;
  id v2;

  swift_beginAccess();
  v1 = *(void **)(v0 + 272);
  v2 = v1;
  return v1;
}

void protocol witness for AnyGestureResponder.childViewSubgraph.setter in conformance StyledTextResponder(uint64_t a1)
{
  uint64_t v1;
  void *v3;

  swift_beginAccess();
  v3 = *(void **)(v1 + 272);
  *(_QWORD *)(v1 + 272) = a1;

}

uint64_t (*protocol witness for AnyGestureResponder.childViewSubgraph.modify in conformance StyledTextResponder())()
{
  swift_beginAccess();
  return CAHostingLayer.propertiesNeedingUpdate.modify;
}

id protocol witness for AnyGestureContainingResponder.viewSubgraph.getter in conformance StyledTextResponder()
{
  uint64_t v0;

  return *(id *)(v0 + 136);
}

uint64_t protocol witness for AnyGestureContainingResponder.eventSources.getter in conformance StyledTextResponder()
{
  uint64_t v0;
  uint64_t v1;

  v0 = StyledTextResponder.bindingBridge.getter();
  v1 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v0 + 192))(v0);
  swift_release();
  return v1;
}

uint64_t protocol witness for AnyGestureContainingResponder.detachContainer() in conformance StyledTextResponder()
{
  uint64_t v0;

  swift_beginAccess();
  *(_QWORD *)(v0 + 304) = 0;
  return swift_unknownObjectRelease();
}

void protocol witness for AnyGestureContainingResponder.gestureType.getter in conformance StyledTextResponder()
{
  type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for AnyGesture<()>, MEMORY[0x24BEE4AE0] + 8, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for AnyGesture);
}

uint64_t protocol witness for AnyGestureContainingResponder.isValid.getter in conformance StyledTextResponder()
{
  uint64_t v0;

  swift_beginAccess();
  if (*(_QWORD *)(v0 + 304))
    return AGSubgraphIsValid();
  else
    return 0;
}

uint64_t closure #1 in ResolvedStyledText.gesture.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, double a4@<D0>, double a5@<D1>)
{
  uint64_t v10;
  uint64_t KeyPath;
  uint64_t v12;

  v10 = swift_allocObject();
  *(_QWORD *)(v10 + 16) = a1;
  *(_QWORD *)(v10 + 24) = a2;
  *(double *)(v10 + 32) = a4;
  *(double *)(v10 + 40) = a5;
  KeyPath = swift_getKeyPath();
  v12 = swift_allocObject();
  *(_QWORD *)(v12 + 16) = _ViewInputs.base.modify;
  *(_QWORD *)(v12 + 24) = 0;
  *(_QWORD *)a3 = partial apply for closure #1 in closure #1 in ResolvedStyledText.gesture.getter;
  *(_QWORD *)(a3 + 8) = v10;
  *(_QWORD *)(a3 + 16) = KeyPath;
  *(_QWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 32) = 0;
  *(_QWORD *)(a3 + 40) = 0;
  *(_DWORD *)(a3 + 47) = 0;
  *(_QWORD *)(a3 + 56) = partial apply for specialized closure #1 in MapGesture.init(_:);
  *(_QWORD *)(a3 + 64) = v12;
  swift_retain();
  return swift_retain();
}

uint64_t closure #1 in closure #1 in ResolvedStyledText.gesture.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, unsigned int (*a4)(uint64_t, uint64_t, uint64_t)@<X3>, uint64_t a5@<X8>, double a6@<D0>, double a7@<D1>)
{
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int (*v31)(uint64_t, uint64_t, uint64_t);
  uint64_t v32;
  unsigned int (*v33)(uint64_t, uint64_t, uint64_t);
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t (*v43)(void);
  uint64_t (*v44)(uint64_t);
  void *v45;
  void *v46;
  id v47;
  id v48;
  char v49;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  void (*v56)(uint64_t, char *, uint64_t);
  void (*v57)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  void (*v63)(uint64_t, double, double, double, double);
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unsigned int (*v73)(uint64_t, uint64_t, uint64_t);
  uint64_t v74;
  uint64_t v75;
  _QWORD *v76;
  uint64_t v77;

  v73 = a4;
  v75 = a5;
  v76 = a3;
  type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for URL?, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)&v63 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v14);
  v16 = (char *)&v63 - v15;
  v17 = type metadata accessor for URL();
  v18 = *(_QWORD *)(v17 - 8);
  MEMORY[0x24BDAC7A8](v17);
  v20 = (char *)&v63 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v21);
  v23 = (char *)&v63 - v22;
  v24 = *(_QWORD *)a2;
  v71 = *(_QWORD *)(a2 + 8);
  v72 = v24;
  v74 = *(_QWORD *)(a2 + 16);
  v25 = *(_QWORD *)(a2 + 24);
  v69 = *(_QWORD *)(a2 + 32);
  v70 = v25;
  v26 = *(_QWORD *)(a2 + 40);
  v27 = *(_QWORD *)(a2 + 56);
  v67 = *(_QWORD *)(a2 + 48);
  v68 = v26;
  v28 = (_QWORD *)*(unsigned __int8 *)(a2 + 64);
  v30 = v29;
  outlined init with copy of Any?(a1, (uint64_t)v16, (uint64_t)&lazy cache variable for type metadata for URL?, (uint64_t)MEMORY[0x24BDCDAC0], (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))type metadata accessor for [(_:)]);
  v31 = *(_QWORD **)(v18 + 48);
  v77 = v30;
  v32 = v30;
  v33 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v31;
  if (((unsigned int (*)(char *, uint64_t, uint64_t))v31)(v16, 1, v32) != 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v18 + 32))(v23, v16, v77);
    v45 = (void *)v76[24];
    v46 = (void *)*((_QWORD *)v73 + 24);
    if (v45)
    {
      if (v46)
      {
        type metadata accessor for NSAttributedString();
        v47 = v46;
        v48 = v45;
        v49 = static NSObject.== infix(_:_:)();

        if ((v49 & 1) != 0)
LABEL_8:
          __asm { BR              X9 }
      }
    }
    else if (!v46)
    {
      goto LABEL_8;
    }
    (*(void (**)(char *, uint64_t))(v18 + 8))(v23, v77);
    goto LABEL_14;
  }
  v73 = v33;
  v34 = (uint64_t)v13;
  v64 = a1;
  v65 = v20;
  v66 = v18;
  outlined destroy of Any?((uint64_t)v16, (uint64_t)&lazy cache variable for type metadata for URL?, (uint64_t)MEMORY[0x24BDCDAC0], (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))type metadata accessor for [(_:)]);
  v36 = v71;
  v35 = v72;
  v37 = v70;
  v38 = v67;
  v39 = v68;
  v40 = v27;
  if (((_DWORD)v28 - 1) < 2)
    goto LABEL_3;
  if ((_DWORD)v28)
  {
LABEL_14:
    v44 = (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0];
    goto LABEL_15;
  }
  if (v74 == 1)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v66 + 56))(v75, 1, 1, v77);
    type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for GesturePhase<URL>, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for GesturePhase);
    return swift_storeEnumTagMultiPayload();
  }
LABEL_3:
  v63 = *(void (**)(uint64_t, double, double, double, double))(*v76 + 280);
  v41 = v69;
  v42 = outlined copy of GesturePhase<TappableSpatialEvent>(v72, v71, v74, v70, v69, v68, v67, v40, (char)v28);
  v63(v42, *(double *)&v39, *(double *)&v38, a6, a7);
  v76 = v28;
  outlined consume of GesturePhase<TappableSpatialEvent>(v35, v36, v74, v37, v41, v39, v38, v40, (char)v28);
  if (v73(v34, 1, v77) == 1)
  {
    v43 = MEMORY[0x24BDCDAC0];
    outlined destroy of Any?(v34, (uint64_t)&lazy cache variable for type metadata for URL?, (uint64_t)MEMORY[0x24BDCDAC0], (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))type metadata accessor for [(_:)]);
    v44 = (uint64_t (*)(uint64_t))v43;
LABEL_15:
    type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for GesturePhase<URL>, v44, (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for GesturePhase);
    return swift_storeEnumTagMultiPayload();
  }
  v51 = v65;
  v52 = v66;
  v53 = v34;
  v54 = v77;
  (*(void (**)(char *, uint64_t, uint64_t))(v66 + 32))(v65, v53, v77);
  v55 = v64;
  outlined destroy of Any?(v64, (uint64_t)&lazy cache variable for type metadata for URL?, (uint64_t)MEMORY[0x24BDCDAC0], (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))type metadata accessor for [(_:)]);
  v56 = *(void (**)(uint64_t, char *, uint64_t))(v52 + 16);
  v56(v55, v51, v54);
  v57 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v52 + 56);
  v57(v55, 0, 1, v54);
  if ((_DWORD)v76)
  {
    v56(v75, v51, v77);
  }
  else
  {
    if (v74 == 1)
    {
      v58 = v75;
      v59 = 1;
      v60 = v77;
    }
    else
    {
      v61 = v75;
      v62 = v77;
      v56(v75, v51, v77);
      v58 = v61;
      v59 = 0;
      v60 = v62;
    }
    v57(v58, v59, 1, v60);
  }
  type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for GesturePhase<URL>, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for GesturePhase);
  swift_storeEnumTagMultiPayload();
  return (*(uint64_t (**)(char *, uint64_t))(v52 + 8))(v51, v77);
}

uint64_t OpenURLGesture.openURL.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  __int128 *v4;
  __int128 v5;
  __int128 v7;
  _OWORD v8[2];

  v4 = (__int128 *)(v2 + *(int *)(a1 + 36));
  v5 = v4[1];
  v7 = *v4;
  v8[0] = v5;
  *(_DWORD *)((char *)v8 + 15) = *(_DWORD *)((char *)v4 + 31);
  outlined retain of Environment<OpenURLAction>((uint64_t)&v7, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of Environment<OpenURLAction>.Content);
  specialized Environment.wrappedValue.getter(a2);
  return outlined retain of Environment<OpenURLAction>((uint64_t)&v7, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of Environment<OpenURLAction>.Content);
}

void OpenURLGesture.body.getter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v3 = *(_QWORD *)(a1 - 8);
  v4 = *(_QWORD *)(v3 + 64);
  MEMORY[0x24BDAC7A8](a1);
  v5 = (char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *(_QWORD *)(v6 + 16);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = MEMORY[0x24BDAC7A8](v6);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v8 + 16))((char *)&v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), v1, v7, v9);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v1, a1);
  v11 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v12 = swift_allocObject();
  v13 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(v12 + 16) = v7;
  *(_QWORD *)(v12 + 24) = v13;
  (*(void (**)(unint64_t, char *, uint64_t))(v3 + 32))(v12 + v11, v5, a1);
  Gesture.onEnded(_:)();
}

uint64_t sub_234D8D280()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_release();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
}

uint64_t closure #1 in OpenURLGesture.body.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  _QWORD v12[4];
  char v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  char v20;

  v5 = type metadata accessor for OpenURLGesture(0, a3, a4, a4);
  OpenURLGesture.openURL.getter(v5, (uint64_t)&v15);
  v6 = v15;
  v7 = v16;
  v8 = v17;
  v9 = v18;
  v10 = v19;
  v12[0] = v15;
  v12[1] = v16;
  v12[2] = v17;
  v12[3] = v18;
  v13 = v19;
  v14 = v20;
  specialized OpenURLAction._open(_:completion:)(a1, (uint64_t)v12);
  return outlined consume of OpenURLAction.Handler(v6, v7, v8, v9, v10);
}

uint64_t closure #1 in NSAttributedString.hasLinkAttributes.getter(uint64_t a1, uint64_t a2, uint64_t a3, _BYTE *a4, _BYTE *a5)
{
  uint64_t (*v8)(void);
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t result;
  _BYTE v14[32];

  v8 = MEMORY[0x24BDCDAC0];
  type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for URL?, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v9);
  v11 = &v14[-v10];
  outlined init with copy of Any?(a1, (uint64_t)v14, (uint64_t)&lazy cache variable for type metadata for Any?, MEMORY[0x24BEE4AD8] + 8, (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))type metadata accessor for MutableBox<CachedEnvironment>);
  URL.init(urlValue:)((uint64_t)v14, v11);
  v12 = type metadata accessor for URL();
  LODWORD(a1) = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 48))(v11, 1, v12);
  result = outlined destroy of Any?((uint64_t)v11, (uint64_t)&lazy cache variable for type metadata for URL?, (uint64_t)v8, (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))type metadata accessor for [(_:)]);
  if ((_DWORD)a1 != 1)
  {
    *a5 = 1;
    *a4 = 1;
  }
  return result;
}

uint64_t URL.init(urlValue:)@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t (*v17)(_BYTE *, uint64_t, uint64_t, uint64_t);
  void (*v18)(_BYTE *, _BYTE *, uint64_t);
  _BYTE *v19;
  uint64_t v20;
  _BYTE v23[24];
  uint64_t v24;

  type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for URL?, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v4);
  v6 = &v23[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v7);
  v9 = &v23[-v8];
  v10 = type metadata accessor for URL();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v13 = &v23[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v14 = MEMORY[0x24BEE4AD8];
  v15 = MEMORY[0x24BEE4AD8] + 8;
  outlined init with copy of Any?(a1, (uint64_t)v23, (uint64_t)&lazy cache variable for type metadata for Any?, MEMORY[0x24BEE4AD8] + 8, (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))type metadata accessor for MutableBox<CachedEnvironment>);
  if (v24)
  {
    v16 = swift_dynamicCast();
    v17 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v11 + 56);
    v17(v9, v16 ^ 1u, 1, v10);
    if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10) != 1)
    {
      outlined destroy of Any?(a1, (uint64_t)&lazy cache variable for type metadata for Any?, v14 + 8, (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))type metadata accessor for MutableBox<CachedEnvironment>);
      v18 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(v11 + 32);
      v18(v13, v9, v10);
LABEL_13:
      v18(a2, v13, v10);
      v19 = a2;
      v20 = 0;
      return v17(v19, v20, 1, v10);
    }
  }
  else
  {
    outlined destroy of Any?((uint64_t)v23, (uint64_t)&lazy cache variable for type metadata for Any?, v15, (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))type metadata accessor for MutableBox<CachedEnvironment>);
    v17 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v11 + 56);
    v17(v9, 1, 1, v10);
  }
  outlined destroy of Any?((uint64_t)v9, (uint64_t)&lazy cache variable for type metadata for URL?, (uint64_t)MEMORY[0x24BDCDAC0], (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))type metadata accessor for [(_:)]);
  outlined init with copy of Any?(a1, (uint64_t)v23, (uint64_t)&lazy cache variable for type metadata for Any?, v14 + 8, (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))type metadata accessor for MutableBox<CachedEnvironment>);
  if (v24)
  {
    if ((swift_dynamicCast() & 1) != 0)
    {
      URL.init(string:)();
      outlined destroy of Any?(a1, (uint64_t)&lazy cache variable for type metadata for Any?, v14 + 8, (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))type metadata accessor for MutableBox<CachedEnvironment>);
      swift_bridgeObjectRelease();
      goto LABEL_10;
    }
  }
  else
  {
    outlined destroy of Any?((uint64_t)v23, (uint64_t)&lazy cache variable for type metadata for Any?, v14 + 8, (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))type metadata accessor for MutableBox<CachedEnvironment>);
  }
  v17(v6, 1, 1, v10);
  outlined destroy of Any?(a1, (uint64_t)&lazy cache variable for type metadata for Any?, v14 + 8, (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))type metadata accessor for MutableBox<CachedEnvironment>);
LABEL_10:
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v11 + 48))(v6, 1, v10) != 1)
  {
    v18 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(v11 + 32);
    v18(v13, v6, v10);
    goto LABEL_13;
  }
  outlined destroy of Any?((uint64_t)v6, (uint64_t)&lazy cache variable for type metadata for URL?, (uint64_t)MEMORY[0x24BDCDAC0], (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))type metadata accessor for [(_:)]);
  v19 = a2;
  v20 = 1;
  return v17(v19, v20, 1, v10);
}

uint64_t protocol witness for GestureStateProtocol.init() in conformance State #1 in ResolvedStyledText.gesture.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;

  v2 = type metadata accessor for URL();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(a1, 1, 1, v2);
}

uint64_t specialized GestureGraph.init(rootResponder:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(uint64_t, uint64_t);
  int v15;
  id v16;
  id v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  __int128 v22;
  void *v23;
  void *v24;
  char v25;
  char v26;
  int v27;
  int v28;
  unint64_t v29;
  void *v30;
  void *v31;
  char v32;
  char v33;
  __int128 v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;

  v43 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)(a2 + 184) = 0;
  swift_weakInit();
  *(_QWORD *)(a2 + 200) = 0;
  swift_unknownObjectWeakInit();
  type metadata accessor for EventBindingManager();
  v3 = swift_allocObject();
  *(_QWORD *)(v3 + 24) = 0;
  swift_unknownObjectWeakInit();
  *(_QWORD *)(v3 + 40) = 0;
  swift_unknownObjectWeakInit();
  *(_QWORD *)(v3 + 48) = MEMORY[0x24BEE4B00];
  v4 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v3 + 56) = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  *(_BYTE *)(v3 + 64) = 0;
  *(_QWORD *)(v3 + 72) = 0;
  *(_QWORD *)(a2 + 208) = v3;
  v5 = *MEMORY[0x24BE096C0];
  *(int32x4_t *)(a2 + 232) = vdupq_n_s32(*MEMORY[0x24BE096C0]);
  *(_DWORD *)(a2 + 248) = v5;
  *(_DWORD *)(a2 + 252) = v5;
  *(_DWORD *)(a2 + 256) = v5;
  v6 = one-time initialization token for infinity;
  swift_retain();
  if (v6 != -1)
    swift_once();
  *(_QWORD *)(a2 + 264) = static Time.infinity;
  if ((specialized static GestureContainerFeature.isEnabled.getter() & 1) != 0)
  {
    *(_QWORD *)(a2 + 184) = &protocol witness table for StyledTextResponder;
    swift_weakAssign();
    GraphHost.Data.init()((uint64_t)&v29);
    v7 = v30;
    v23 = (void *)v29;
    v24 = v31;
    v25 = v33;
    v26 = v32;
    v8 = v37;
    v27 = v38;
    v28 = v36;
    v9 = v39;
    v10 = v42;
    v22 = v34;
    v11 = v35;
    v12 = v40;
    v13 = v41;
    AGSubgraphSetCurrent();
    v29 = 0;
    v14 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BE09670];
    type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for External<Time>, (uint64_t)&type metadata for Time, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BE09670]);
    lazy protocol witness table accessor for type External<Time> and conformance External<A>();
    *(_DWORD *)(a2 + 216) = Attribute.init<A>(body:value:flags:update:)();
    v29 = specialized Dictionary.init(dictionaryLiteral:)(v4);
    type metadata accessor for [EventID : EventType]();
    type metadata accessor for [(_:)](0, (unint64_t *)&lazy cache variable for type metadata for External<[EventID : EventType]>, (uint64_t (*)(uint64_t))type metadata accessor for [EventID : EventType], v14);
    lazy protocol witness table accessor for type External<[EventID : EventType]> and conformance External<A>();
    v15 = Attribute.init<A>(body:value:flags:update:)();
    swift_bridgeObjectRelease();
    *(_DWORD *)(a2 + 220) = v15;
    v29 = 1;
    type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for External<_GestureInputs.InheritedPhase>, (uint64_t)&type metadata for _GestureInputs.InheritedPhase, v14);
    lazy protocol witness table accessor for type External<_GestureInputs.InheritedPhase> and conformance External<A>();
    *(_DWORD *)(a2 + 224) = Attribute.init<A>(body:value:flags:update:)();
    LODWORD(v29) = 0;
    type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for External<UInt32>, MEMORY[0x24BEE44F0], v14);
    lazy protocol witness table accessor for type External<UInt32> and conformance External<A>();
    *(_DWORD *)(a2 + 228) = Attribute.init<A>(body:value:flags:update:)();
    v29 = v4;
    type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for External<PreferenceKeys>, (uint64_t)&type metadata for PreferenceKeys, v14);
    lazy protocol witness table accessor for type External<PreferenceKeys> and conformance External<A>();
    *(_DWORD *)(a2 + 260) = Attribute.init<A>(body:value:flags:update:)();
    swift_release();
    v29 = (unint64_t)v23;
    v30 = v7;
    v31 = v24;
    v32 = v26;
    v33 = v25;
    v34 = v22;
    v35 = v11;
    v36 = v28;
    v37 = v8;
    v38 = v27;
    v39 = v9;
    v40 = v12;
    v41 = v13;
    v42 = v10;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    v16 = v23;
    v17 = v7;
    v18 = v24;
    v19 = GraphHost.init(data:)((uint64_t)&v29);
    v20 = *(_QWORD *)(v19 + 208);
    swift_beginAccess();
    *(_QWORD *)(v20 + 24) = &protocol witness table for GestureGraph;
    swift_unknownObjectWeakAssign();
    swift_retain();
    AGSubgraphSetCurrent();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();

    swift_release();
    swift_release();
    return v19;
  }
  else
  {
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

uint64_t specialized StyledTextResponder.init(view:styles:inputs:)(int a1, int a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = *a3;
  v6 = *((_DWORD *)a3 + 2);
  v7 = a3[2];
  v8 = *((_DWORD *)a3 + 20);
  *(_OWORD *)(a4 + 160) = 0u;
  *(_OWORD *)(a4 + 176) = 0u;
  *(_OWORD *)(a4 + 144) = 0u;
  v9 = MEMORY[0x24BEE4AF8];
  *(_OWORD *)(a4 + 192) = 0u;
  *(_OWORD *)(a4 + 208) = 0u;
  *(_QWORD *)(a4 + 224) = 0;
  *(_QWORD *)(a4 + 232) = v9;
  *(_DWORD *)(a4 + 240) = 0;
  *(_BYTE *)(a4 + 244) = 1;
  *(_OWORD *)(a4 + 248) = 0u;
  *(_OWORD *)(a4 + 264) = 0u;
  *(_OWORD *)(a4 + 280) = 0u;
  *(_OWORD *)(a4 + 296) = 0u;
  *(_DWORD *)(a4 + 40) = a1;
  *(_DWORD *)(a4 + 44) = a2;
  *(_QWORD *)(a4 + 48) = v5;
  *(_DWORD *)(a4 + 56) = v6;
  *(_QWORD *)(a4 + 64) = v7;
  *(_OWORD *)(a4 + 72) = *(_OWORD *)(a3 + 3);
  *(_OWORD *)(a4 + 88) = *(_OWORD *)(a3 + 5);
  *(_OWORD *)(a4 + 104) = *(_OWORD *)(a3 + 7);
  *(_QWORD *)(a4 + 120) = a3[9];
  *(_DWORD *)(a4 + 128) = v8;
  *(_QWORD *)(a4 + 136) = (id)AGGraphGetAttributeSubgraph();
  *(_QWORD *)(a4 + 24) = 0;
  swift_unknownObjectWeakInit();
  swift_weakInit();
  swift_retain();
  v10 = specialized static ViewGraph.current.getter();
  swift_beginAccess();
  MEMORY[0x23B7C9E44](v10 + 200);
  v11 = *(_QWORD *)(v10 + 208);
  swift_release();
  swift_beginAccess();
  *(_QWORD *)(a4 + 24) = v11;
  swift_unknownObjectWeakAssign();
  swift_unknownObjectRelease();
  return a4;
}

uint64_t outlined copy of ShapeStyledResponderData<StyledTextContentView>?(uint64_t result)
{
  if (result)
  {
    swift_retain();
    swift_bridgeObjectRetain();
    return swift_retain();
  }
  return result;
}

uint64_t outlined consume of ShapeStyledResponderData<StyledTextContentView>?(uint64_t result)
{
  if (result)
  {
    swift_release();
    swift_bridgeObjectRelease();
    return swift_release();
  }
  return result;
}

uint64_t sub_234D8DEA0()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in NSAttributedString.hasLinkAttributes.getter(uint64_t a1, uint64_t a2, uint64_t a3, _BYTE *a4)
{
  uint64_t v4;

  return closure #1 in NSAttributedString.hasLinkAttributes.getter(a1, a2, a3, a4, *(_BYTE **)(v4 + 16));
}

uint64_t sub_234D8DEB8()
{
  return swift_deallocObject();
}

uint64_t block_copy_helper_13(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_13()
{
  return swift_release();
}

uint64_t sub_234D8DEE0()
{
  return swift_deallocObject();
}

uint64_t sub_234D8DEF0()
{
  return swift_deallocObject();
}

uint64_t outlined retain of ContentResponderHelper<ShapeStyledResponderData<StyledTextContentView>>(uint64_t a1)
{
  outlined copy of ShapeStyledResponderData<StyledTextContentView>?(*(_QWORD *)(a1 + 16));
  swift_retain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t outlined release of ContentResponderHelper<ShapeStyledResponderData<StyledTextContentView>>(uint64_t a1)
{
  outlined consume of ShapeStyledResponderData<StyledTextContentView>?(*(_QWORD *)(a1 + 16));
  swift_bridgeObjectRelease();
  swift_release();
  return a1;
}

uint64_t sub_234D8DF9C()
{
  return AGGraphSetValue();
}

uint64_t sub_234D8E008@<X0>(uint64_t result@<X0>, _DWORD *a2@<X8>)
{
  *a2 = *(_DWORD *)(*(_QWORD *)result + 40);
  return result;
}

_DWORD *sub_234D8E018(_DWORD *result, uint64_t a2)
{
  *(_DWORD *)(*(_QWORD *)a2 + 40) = *result;
  return result;
}

uint64_t sub_234D8E028@<X0>(_QWORD *a1@<X8>)
{
  *a1 = *(_QWORD *)AGGraphGetValue();
  return swift_bridgeObjectRetain();
}

uint64_t sub_234D8E064()
{
  return AGGraphSetValue();
}

uint64_t sub_234D8E0C8@<X0>(uint64_t result@<X0>, _DWORD *a2@<X8>)
{
  *a2 = *(_DWORD *)(*(_QWORD *)result + 44);
  return result;
}

_DWORD *sub_234D8E0D8(_DWORD *result, uint64_t a2)
{
  *(_DWORD *)(*(_QWORD *)a2 + 44) = *result;
  return result;
}

uint64_t sub_234D8E0E8@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = StyledTextResponder.gestureGraph.getter();
  *a1 = result;
  return result;
}

uint64_t sub_234D8E110(_QWORD *a1, uint64_t a2)
{
  *(_QWORD *)(*(_QWORD *)a2 + 280) = *a1;
  swift_retain();
  return swift_release();
}

uint64_t sub_234D8E140@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = StyledTextResponder.bindingBridge.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_234D8E168(_OWORD *a1, uint64_t a2)
{
  *(_OWORD *)(*(_QWORD *)a2 + 288) = *a1;
  swift_retain();
  return swift_release();
}

uint64_t type metadata accessor for StyledTextResponder()
{
  return objc_opt_self();
}

uint64_t method lookup function for StyledTextResponder()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of StyledTextResponder.__allocating_init(view:styles:inputs:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 312))();
}

ValueMetadata *type metadata accessor for StyledTextResponderFilter()
{
  return &type metadata for StyledTextResponderFilter;
}

uint64_t outlined retain of ShapeStyledResponderData<_ShapeView<Rectangle.AsymmetricalInset, ForegroundStyle>>(uint64_t a1)
{
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t outlined release of ShapeStyledResponderData<_ShapeView<Rectangle.AsymmetricalInset, ForegroundStyle>>(uint64_t a1)
{
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t outlined retain of ShapeStyledResponderData<_ShapeView<Rectangle, MeshGradient>>(uint64_t a1)
{
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t outlined consume of ShapeStyledResponderData<_ShapeView<Rectangle, MeshGradient>>?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t result;

  if (a7)
  {
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t outlined release of ShapeStyledResponderData<_ShapeView<Rectangle, MeshGradient>>(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t outlined retain of ShapeStyledResponderData<AnimatedShape<UnevenRoundedRectangle._Inset>>(uint64_t a1)
{
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t outlined release of ShapeStyledResponderData<AnimatedShape<UnevenRoundedRectangle._Inset>>(uint64_t a1)
{
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t outlined retain of ShapeStyledResponderData<_ShapeView<Path, ForegroundStyle>>(uint64_t a1)
{
  outlined copy of Path.Storage(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_BYTE *)(a1 + 32));
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t outlined consume of ShapeStyledResponderData<_ShapeView<Path, ForegroundStyle>>?(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int8 a5, uint64_t a6)
{
  if (a6)
  {
    outlined consume of Path.Storage(result, a2, a3, a4, a5);
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t outlined release of ShapeStyledResponderData<_ShapeView<Path, ForegroundStyle>>(uint64_t a1)
{
  outlined consume of Path.Storage(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_BYTE *)(a1 + 32));
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t outlined consume of ShapeStyledResponderData<_ShapeView<CombinedContentShape, ForegroundStyle>>?(uint64_t result, uint64_t a2, uint64_t a3, void (*a4)(void))
{
  if (result)
  {
    a4();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t outlined retain of ShapeStyledResponderData<_ShapeView<Rectangle, LinearGradient>>(uint64_t a1)
{
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t outlined consume of ShapeStyledResponderData<_ShapeView<Rectangle, AngularGradient>>?(uint64_t result)
{
  if (result)
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t outlined release of ShapeStyledResponderData<_ShapeView<Rectangle, LinearGradient>>(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

void type metadata accessor for AnyGestureStorage<EmptyGesture<()>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for AnyGestureStorage<EmptyGesture<()>>)
  {
    type metadata accessor for MutableBox<CachedEnvironment>(255, &lazy cache variable for type metadata for EmptyGesture<()>, MEMORY[0x24BEE4AE0] + 8, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EmptyGesture);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type EmptyGesture<()> and conformance EmptyGesture<A>();
    v6 = type metadata accessor for AnyGestureStorage(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for AnyGestureStorage<EmptyGesture<()>>);
  }
}

unint64_t lazy protocol witness table accessor for type EmptyGesture<()> and conformance EmptyGesture<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type EmptyGesture<()> and conformance EmptyGesture<A>;
  if (!lazy protocol witness table cache variable for type EmptyGesture<()> and conformance EmptyGesture<A>)
  {
    type metadata accessor for MutableBox<CachedEnvironment>(255, &lazy cache variable for type metadata for EmptyGesture<()>, MEMORY[0x24BEE4AE0] + 8, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EmptyGesture);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for EmptyGesture<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EmptyGesture<()> and conformance EmptyGesture<A>);
  }
  return result;
}

uint64_t sub_234D8E5C8()
{
  return swift_deallocObject();
}

uint64_t sub_234D8E5D8()
{
  return swift_deallocObject();
}

uint64_t sub_234D8E5E8()
{
  return objectdestroy_37Tm();
}

uint64_t partial apply for closure #1 in ResolvedStyledText.gesture.getter@<X0>(uint64_t a1@<X8>, double a2@<D0>, double a3@<D1>)
{
  uint64_t v3;

  return closure #1 in ResolvedStyledText.gesture.getter(*(_QWORD *)(v3 + 16), *(_QWORD *)(v3 + 24), a1, a2, a3);
}

void type metadata accessor for AnyGestureStorage<SizeGesture<_MapGesture<OpenURLGesture<ModifierGesture<StateContainerGesture<State #1 in ResolvedStyledText.gesture.getter, TappableSpatialEvent, URL>, SingleTapGesture<TappableSpatialEvent>>>, ()>>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for AnyGestureStorage<SizeGesture<_MapGesture<OpenURLGesture<ModifierGesture<StateContainerGesture<State #1 in ResolvedStyledText.gesture.getter, TappableSpatialEvent, URL>, SingleTapGesture<TappableSpatialEvent>>>, ()>>>)
  {
    type metadata accessor for SizeGesture<_MapGesture<OpenURLGesture<ModifierGesture<StateContainerGesture<State #1 in ResolvedStyledText.gesture.getter, TappableSpatialEvent, URL>, SingleTapGesture<TappableSpatialEvent>>>, ()>>(255);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type SizeGesture<_MapGesture<OpenURLGesture<ModifierGesture<StateContainerGesture<State #1 in ResolvedStyledText.gesture.getter, TappableSpatialEvent, URL>, SingleTapGesture<TappableSpatialEvent>>>, ()>> and conformance SizeGesture<A>, (uint64_t (*)(uint64_t))type metadata accessor for SizeGesture<_MapGesture<OpenURLGesture<ModifierGesture<StateContainerGesture<State #1 in ResolvedStyledText.gesture.getter, TappableSpatialEvent, URL>, SingleTapGesture<TappableSpatialEvent>>>, ()>>, (uint64_t)&protocol conformance descriptor for SizeGesture<A>);
    v6 = type metadata accessor for AnyGestureStorage(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for AnyGestureStorage<SizeGesture<_MapGesture<OpenURLGesture<ModifierGesture<StateContainerGesture<State #1 in ResolvedStyledText.gesture.getter, TappableSpatialEvent, URL>, SingleTapGesture<TappableSpatialEvent>>>, ()>>>);
  }
}

void type metadata accessor for SizeGesture<_MapGesture<OpenURLGesture<ModifierGesture<StateContainerGesture<State #1 in ResolvedStyledText.gesture.getter, TappableSpatialEvent, URL>, SingleTapGesture<TappableSpatialEvent>>>, ()>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for SizeGesture<_MapGesture<OpenURLGesture<ModifierGesture<StateContainerGesture<State #1 in ResolvedStyledText.gesture.getter, TappableSpatialEvent, URL>, SingleTapGesture<TappableSpatialEvent>>>, ()>>)
  {
    type metadata accessor for _MapGesture<OpenURLGesture<ModifierGesture<StateContainerGesture<State #1 in ResolvedStyledText.gesture.getter, TappableSpatialEvent, URL>, SingleTapGesture<TappableSpatialEvent>>>, ()>(255);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type _MapGesture<OpenURLGesture<ModifierGesture<StateContainerGesture<State #1 in ResolvedStyledText.gesture.getter, TappableSpatialEvent, URL>, SingleTapGesture<TappableSpatialEvent>>>, ()> and conformance _MapGesture<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for _MapGesture<OpenURLGesture<ModifierGesture<StateContainerGesture<State #1 in ResolvedStyledText.gesture.getter, TappableSpatialEvent, URL>, SingleTapGesture<TappableSpatialEvent>>>, ()>, (uint64_t)&protocol conformance descriptor for _MapGesture<A, B>);
    v6 = type metadata accessor for SizeGesture(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for SizeGesture<_MapGesture<OpenURLGesture<ModifierGesture<StateContainerGesture<State #1 in ResolvedStyledText.gesture.getter, TappableSpatialEvent, URL>, SingleTapGesture<TappableSpatialEvent>>>, ()>>);
  }
}

void type metadata accessor for _MapGesture<OpenURLGesture<ModifierGesture<StateContainerGesture<State #1 in ResolvedStyledText.gesture.getter, TappableSpatialEvent, URL>, SingleTapGesture<TappableSpatialEvent>>>, ()>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  if (!lazy cache variable for type metadata for _MapGesture<OpenURLGesture<ModifierGesture<StateContainerGesture<State #1 in ResolvedStyledText.gesture.getter, TappableSpatialEvent, URL>, SingleTapGesture<TappableSpatialEvent>>>, ()>)
  {
    type metadata accessor for OpenURLGesture<ModifierGesture<StateContainerGesture<State #1 in ResolvedStyledText.gesture.getter, TappableSpatialEvent, URL>, SingleTapGesture<TappableSpatialEvent>>>(255);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type OpenURLGesture<ModifierGesture<StateContainerGesture<State #1 in ResolvedStyledText.gesture.getter, TappableSpatialEvent, URL>, SingleTapGesture<TappableSpatialEvent>>> and conformance OpenURLGesture<A>, (uint64_t (*)(uint64_t))type metadata accessor for OpenURLGesture<ModifierGesture<StateContainerGesture<State #1 in ResolvedStyledText.gesture.getter, TappableSpatialEvent, URL>, SingleTapGesture<TappableSpatialEvent>>>, (uint64_t)&protocol conformance descriptor for OpenURLGesture<A>);
    v5 = type metadata accessor for _MapGesture(a1, v3, MEMORY[0x24BEE4AE0] + 8, v4);
    if (!v6)
      atomic_store(v5, (unint64_t *)&lazy cache variable for type metadata for _MapGesture<OpenURLGesture<ModifierGesture<StateContainerGesture<State #1 in ResolvedStyledText.gesture.getter, TappableSpatialEvent, URL>, SingleTapGesture<TappableSpatialEvent>>>, ()>);
  }
}

void type metadata accessor for OpenURLGesture<ModifierGesture<StateContainerGesture<State #1 in ResolvedStyledText.gesture.getter, TappableSpatialEvent, URL>, SingleTapGesture<TappableSpatialEvent>>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  if (!lazy cache variable for type metadata for OpenURLGesture<ModifierGesture<StateContainerGesture<State #1 in ResolvedStyledText.gesture.getter, TappableSpatialEvent, URL>, SingleTapGesture<TappableSpatialEvent>>>)
  {
    v2 = type metadata accessor for ModifierGesture<StateContainerGesture<State #1 in ResolvedStyledText.gesture.getter, TappableSpatialEvent, URL>, SingleTapGesture<TappableSpatialEvent>>();
    v3 = lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type ModifierGesture<StateContainerGesture<State #1 in ResolvedStyledText.gesture.getter, TappableSpatialEvent, URL>, SingleTapGesture<TappableSpatialEvent>> and conformance ModifierGesture<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifierGesture<StateContainerGesture<State #1 in ResolvedStyledText.gesture.getter, TappableSpatialEvent, URL>, SingleTapGesture<TappableSpatialEvent>>, (uint64_t)&protocol conformance descriptor for ModifierGesture<A, B>);
    v5 = type metadata accessor for OpenURLGesture(a1, v2, v3, v4);
    if (!v6)
      atomic_store(v5, (unint64_t *)&lazy cache variable for type metadata for OpenURLGesture<ModifierGesture<StateContainerGesture<State #1 in ResolvedStyledText.gesture.getter, TappableSpatialEvent, URL>, SingleTapGesture<TappableSpatialEvent>>>);
  }
}

uint64_t type metadata accessor for ModifierGesture<StateContainerGesture<State #1 in ResolvedStyledText.gesture.getter, TappableSpatialEvent, URL>, SingleTapGesture<TappableSpatialEvent>>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for ModifierGesture<StateContainerGesture<State #1 in ResolvedStyledText.gesture.getter, TappableSpatialEvent, URL>, SingleTapGesture<TappableSpatialEvent>>;
  if (!lazy cache variable for type metadata for ModifierGesture<StateContainerGesture<State #1 in ResolvedStyledText.gesture.getter, TappableSpatialEvent, URL>, SingleTapGesture<TappableSpatialEvent>>)
  {
    type metadata accessor for StateContainerGesture<State #1 in ResolvedStyledText.gesture.getter, TappableSpatialEvent, URL>();
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for SingleTapGesture<TappableSpatialEvent>, (uint64_t)&type metadata for TappableSpatialEvent, (uint64_t)&protocol witness table for TappableSpatialEvent, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for SingleTapGesture);
    lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type StateContainerGesture<State #1 in ResolvedStyledText.gesture.getter, TappableSpatialEvent, URL> and conformance StateContainerGesture<A, B, C>, (uint64_t (*)(uint64_t))type metadata accessor for StateContainerGesture<State #1 in ResolvedStyledText.gesture.getter, TappableSpatialEvent, URL>, (uint64_t)&protocol conformance descriptor for StateContainerGesture<A, B, C>);
    lazy protocol witness table accessor for type SingleTapGesture<TappableSpatialEvent> and conformance SingleTapGesture<A>();
    type metadata accessor for ModifierGesture();
  }
  return result;
}

uint64_t type metadata accessor for StateContainerGesture<State #1 in ResolvedStyledText.gesture.getter, TappableSpatialEvent, URL>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for StateContainerGesture<State #1 in ResolvedStyledText.gesture.getter, TappableSpatialEvent, URL>;
  if (!lazy cache variable for type metadata for StateContainerGesture<State #1 in ResolvedStyledText.gesture.getter, TappableSpatialEvent, URL>)
  {
    type metadata accessor for State #1 in ResolvedStyledText.gesture.getter();
    type metadata accessor for URL();
    type metadata accessor for StateContainerGesture();
  }
  return result;
}

uint64_t type metadata accessor for State #1 in ResolvedStyledText.gesture.getter()
{
  uint64_t result;

  result = type metadata singleton initialization cache for State #1 in ResolvedStyledText.gesture.getter;
  if (!type metadata singleton initialization cache for State #1 in ResolvedStyledText.gesture.getter)
    return swift_getSingletonMetadata();
  return result;
}

unint64_t lazy protocol witness table accessor for type SingleTapGesture<TappableSpatialEvent> and conformance SingleTapGesture<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type SingleTapGesture<TappableSpatialEvent> and conformance SingleTapGesture<A>;
  if (!lazy protocol witness table cache variable for type SingleTapGesture<TappableSpatialEvent> and conformance SingleTapGesture<A>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for SingleTapGesture<TappableSpatialEvent>, (uint64_t)&type metadata for TappableSpatialEvent, (uint64_t)&protocol witness table for TappableSpatialEvent, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for SingleTapGesture);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for SingleTapGesture<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SingleTapGesture<TappableSpatialEvent> and conformance SingleTapGesture<A>);
  }
  return result;
}

uint64_t type metadata accessor for OpenURLGesture(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for OpenURLGesture);
}

uint64_t sub_234D8E9D8()
{
  return objectdestroy_37Tm();
}

uint64_t objectdestroy_37Tm()
{
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in ResolvedStyledText.gesture.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;

  return closure #1 in closure #1 in ResolvedStyledText.gesture.getter(a1, a2, *(_QWORD **)(v3 + 16), *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 24), a3, *(double *)(v3 + 32), *(double *)(v3 + 40));
}

uint64_t sub_234D8EA2C()
{
  swift_release();
  return swift_deallocObject();
}

void partial apply for specialized closure #1 in MapGesture.init(_:)()
{
  specialized closure #1 in MapGesture.init(_:)();
}

uint64_t outlined init with copy of Any?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD, uint64_t, uint64_t, _QWORD))
{
  uint64_t v7;

  v7 = a5(0, a3, a4, MEMORY[0x24BEE1C68]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a2, a1, v7);
  return a2;
}

uint64_t outlined copy of GesturePhase<TappableSpatialEvent>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  if (a9 == 2 || a9 == 1)
    return swift_retain();
  if (!a9)
    return outlined copy of SpatialEvent?(result, a2, a3);
  return result;
}

uint64_t outlined consume of GesturePhase<TappableSpatialEvent>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  if (a9 == 2 || a9 == 1)
    return swift_release();
  if (!a9)
    return outlined consume of HitTestableEvent?(result, a2, a3);
  return result;
}

uint64_t outlined init with take of AnyElement?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for AnyElement?, (uint64_t (*)(uint64_t))type metadata accessor for AnyElement, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t lazy protocol witness table accessor for type External<Time> and conformance External<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type External<Time> and conformance External<A>;
  if (!lazy protocol witness table cache variable for type External<Time> and conformance External<A>)
  {
    type metadata accessor for MutableBox<CachedEnvironment>(255, &lazy cache variable for type metadata for External<Time>, (uint64_t)&type metadata for Time, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BE09670]);
    result = MEMORY[0x23B7C9C04](MEMORY[0x24BE09678], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type External<Time> and conformance External<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type External<_GestureInputs.InheritedPhase> and conformance External<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type External<_GestureInputs.InheritedPhase> and conformance External<A>;
  if (!lazy protocol witness table cache variable for type External<_GestureInputs.InheritedPhase> and conformance External<A>)
  {
    type metadata accessor for MutableBox<CachedEnvironment>(255, &lazy cache variable for type metadata for External<_GestureInputs.InheritedPhase>, (uint64_t)&type metadata for _GestureInputs.InheritedPhase, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BE09670]);
    result = MEMORY[0x23B7C9C04](MEMORY[0x24BE09678], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type External<_GestureInputs.InheritedPhase> and conformance External<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type External<UInt32> and conformance External<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type External<UInt32> and conformance External<A>;
  if (!lazy protocol witness table cache variable for type External<UInt32> and conformance External<A>)
  {
    type metadata accessor for MutableBox<CachedEnvironment>(255, (unint64_t *)&lazy cache variable for type metadata for External<UInt32>, MEMORY[0x24BEE44F0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BE09670]);
    result = MEMORY[0x23B7C9C04](MEMORY[0x24BE09678], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type External<UInt32> and conformance External<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type External<PreferenceKeys> and conformance External<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type External<PreferenceKeys> and conformance External<A>;
  if (!lazy protocol witness table cache variable for type External<PreferenceKeys> and conformance External<A>)
  {
    type metadata accessor for MutableBox<CachedEnvironment>(255, (unint64_t *)&lazy cache variable for type metadata for External<PreferenceKeys>, (uint64_t)&type metadata for PreferenceKeys, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BE09670]);
    result = MEMORY[0x23B7C9C04](MEMORY[0x24BE09678], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type External<PreferenceKeys> and conformance External<A>);
  }
  return result;
}

uint64_t _s7SwiftUI24ShapeStyledResponderDataVyAA5ImageVAAE8ResolvedVGSgWOg(uint64_t a1)
{
  unint64_t v1;

  v1 = *(_QWORD *)(a1 + 184);
  if (v1 >= 0xFFFFFFFF)
    LODWORD(v1) = -1;
  return (v1 + 1);
}

uint64_t outlined release of ShapeStyledResponderData<Image.Resolved>?(uint64_t a1)
{
  outlined consume of ShapeStyledResponderData<Image.Resolved>?(*(void **)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 128), *(_QWORD *)(a1 + 136), *(_QWORD *)(a1 + 144),
    *(_QWORD *)(a1 + 152),
    *(_QWORD *)(a1 + 160),
    *(void **)(a1 + 168),
    *(_QWORD *)(a1 + 176),
    *(_QWORD *)(a1 + 184));
  return a1;
}

void outlined consume of ShapeStyledResponderData<Image.Resolved>?(void *a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24)
{
  if (a24)
  {
    outlined consume of GraphicsImage.Contents?(a1, a2);
    outlined consume of AccessibilityImageLabel?(a14, a15, a16);
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    swift_release();

  }
}

uint64_t *initializeBufferWithCopyOfBuffer for State #1 in ResolvedStyledText.gesture.getter(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for URL?, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v6 + 16) & ~(unint64_t)v6));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for URL();
    v8 = *(_QWORD *)(v7 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
    {
      memcpy(a1, a2, *(_QWORD *)(v5 + 64));
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(a1, a2, v7);
      (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
    }
  }
  return a1;
}

uint64_t destroy for State #1 in ResolvedStyledText.gesture.getter(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  v2 = type metadata accessor for URL();
  v3 = *(_QWORD *)(v2 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(a1, 1, v2);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
  return result;
}

void *initializeWithCopy for State #1 in ResolvedStyledText.gesture.getter(void *a1, const void *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = type metadata accessor for URL();
  v5 = *(_QWORD *)(v4 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v5 + 48))(a2, 1, v4))
  {
    type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for URL?, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v5 + 16))(a1, a2, v4);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v5 + 56))(a1, 0, 1, v4);
  }
  return a1;
}

void *assignWithCopy for State #1 in ResolvedStyledText.gesture.getter(void *a1, void *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(void *, uint64_t, uint64_t);
  int v7;
  int v8;
  uint64_t v9;

  v4 = type metadata accessor for URL();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v5 + 48);
  v7 = v6(a1, 1, v4);
  v8 = v6(a2, 1, v4);
  if (!v7)
  {
    if (!v8)
    {
      (*(void (**)(void *, void *, uint64_t))(v5 + 24))(a1, a2, v4);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v5 + 8))(a1, v4);
    goto LABEL_6;
  }
  if (v8)
  {
LABEL_6:
    type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for URL?, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v5 + 16))(a1, a2, v4);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v5 + 56))(a1, 0, 1, v4);
  return a1;
}

void *initializeWithTake for State #1 in ResolvedStyledText.gesture.getter(void *a1, const void *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = type metadata accessor for URL();
  v5 = *(_QWORD *)(v4 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v5 + 48))(a2, 1, v4))
  {
    type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for URL?, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v5 + 32))(a1, a2, v4);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v5 + 56))(a1, 0, 1, v4);
  }
  return a1;
}

void *assignWithTake for State #1 in ResolvedStyledText.gesture.getter(void *a1, void *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(void *, uint64_t, uint64_t);
  int v7;
  int v8;
  uint64_t v9;

  v4 = type metadata accessor for URL();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v5 + 48);
  v7 = v6(a1, 1, v4);
  v8 = v6(a2, 1, v4);
  if (!v7)
  {
    if (!v8)
    {
      (*(void (**)(void *, void *, uint64_t))(v5 + 40))(a1, a2, v4);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v5 + 8))(a1, v4);
    goto LABEL_6;
  }
  if (v8)
  {
LABEL_6:
    type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for URL?, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v5 + 32))(a1, a2, v4);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v5 + 56))(a1, 0, 1, v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for State #1 in ResolvedStyledText.gesture.getter()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_234D8F2D4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for URL?, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for State #1 in ResolvedStyledText.gesture.getter()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_234D8F334(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for URL?, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

void type metadata completion function for State #1 in ResolvedStyledText.gesture.getter()
{
  unint64_t v0;

  type metadata accessor for [(_:)](319, &lazy cache variable for type metadata for URL?, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  if (v0 <= 0x3F)
    swift_initStructMetadata();
}

uint64_t type metadata completion function for OpenURLGesture()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for OpenURLGesture(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  __int16 v17;

  v4 = a1;
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0 || ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 35 > 0x18)
  {
    v9 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
    swift_retain();
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    v10 = ((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
    v11 = ((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
    v12 = *(_QWORD *)v11;
    v13 = *(_QWORD *)(v11 + 8);
    v14 = *(_QWORD *)(v11 + 16);
    v15 = *(_QWORD *)(v11 + 24);
    v16 = *(_BYTE *)(v11 + 34);
    v17 = *(_WORD *)(v11 + 32);
    outlined copy of Environment<OpenURLAction>.Content(*(_QWORD *)v11, v13, v14, v15, v17, v16);
    *(_QWORD *)v10 = v12;
    *(_QWORD *)(v10 + 8) = v13;
    *(_QWORD *)(v10 + 16) = v14;
    *(_QWORD *)(v10 + 24) = v15;
    *(_WORD *)(v10 + 32) = v17;
    *(_BYTE *)(v10 + 34) = v16;
  }
  return v4;
}

uint64_t destroy for OpenURLGesture(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;

  v3 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  (*(void (**)(void))(v3 + 8))();
  v4 = (a1 + *(_QWORD *)(v3 + 64) + 7) & 0xFFFFFFFFFFFFFFF8;
  return outlined consume of Environment<OpenURLAction>.Content(*(_QWORD *)v4, *(_QWORD *)(v4 + 8), *(_QWORD *)(v4 + 16), *(_QWORD *)(v4 + 24), *(_WORD *)(v4 + 32), *(_BYTE *)(v4 + 34));
}

uint64_t initializeWithCopy for OpenURLGesture(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  __int16 v14;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 16))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  v9 = *(_QWORD *)v8;
  v10 = *(_QWORD *)(v8 + 8);
  v11 = *(_QWORD *)(v8 + 16);
  v12 = *(_QWORD *)(v8 + 24);
  v13 = *(_BYTE *)(v8 + 34);
  v14 = *(_WORD *)(v8 + 32);
  outlined copy of Environment<OpenURLAction>.Content(*(_QWORD *)v8, v10, v11, v12, v14, v13);
  *(_QWORD *)v7 = v9;
  *(_QWORD *)(v7 + 8) = v10;
  *(_QWORD *)(v7 + 16) = v11;
  *(_QWORD *)(v7 + 24) = v12;
  *(_WORD *)(v7 + 32) = v14;
  *(_BYTE *)(v7 + 34) = v13;
  return a1;
}

uint64_t assignWithCopy for OpenURLGesture(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  __int16 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  __int16 v20;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 24))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  v9 = *(_QWORD *)v8;
  v10 = *(_QWORD *)(v8 + 8);
  v11 = *(_QWORD *)(v8 + 16);
  v12 = *(_QWORD *)(v8 + 24);
  v13 = *(_BYTE *)(v8 + 34);
  v14 = *(_WORD *)(v8 + 32);
  outlined copy of Environment<OpenURLAction>.Content(*(_QWORD *)v8, v10, v11, v12, v14, v13);
  v15 = *(_QWORD *)v7;
  v16 = *(_QWORD *)(v7 + 8);
  v17 = *(_QWORD *)(v7 + 16);
  v18 = *(_QWORD *)(v7 + 24);
  v19 = *(_BYTE *)(v7 + 34);
  *(_QWORD *)v7 = v9;
  *(_QWORD *)(v7 + 8) = v10;
  *(_QWORD *)(v7 + 16) = v11;
  *(_QWORD *)(v7 + 24) = v12;
  v20 = *(_WORD *)(v7 + 32);
  *(_WORD *)(v7 + 32) = v14;
  *(_BYTE *)(v7 + 34) = v13;
  outlined consume of Environment<OpenURLAction>.Content(v15, v16, v17, v18, v20, v19);
  return a1;
}

uint64_t initializeWithTake for OpenURLGesture(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  int v9;
  __int128 v10;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 32))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  v9 = *(_DWORD *)(v8 + 31);
  v10 = *(_OWORD *)(v8 + 16);
  *(_OWORD *)v7 = *(_OWORD *)v8;
  *(_OWORD *)(v7 + 16) = v10;
  *(_DWORD *)(v7 + 31) = v9;
  return a1;
}

uint64_t assignWithTake for OpenURLGesture(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  __int16 v8;
  unint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  __int128 v16;
  __int16 v17;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 40))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  v8 = *(_WORD *)(v7 + 32);
  v9 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  v10 = *(_BYTE *)(v7 + 34);
  v11 = *(_QWORD *)v9;
  v12 = *(_QWORD *)(v9 + 8);
  v13 = *(_QWORD *)(v9 + 16);
  v14 = *(_QWORD *)(v9 + 24);
  v15 = *(_BYTE *)(v9 + 34);
  v16 = *(_OWORD *)(v7 + 16);
  *(_OWORD *)v9 = *(_OWORD *)v7;
  *(_OWORD *)(v9 + 16) = v16;
  v17 = *(_WORD *)(v9 + 32);
  *(_WORD *)(v9 + 32) = v8;
  *(_BYTE *)(v9 + 34) = v10;
  outlined consume of Environment<OpenURLAction>.Content(v11, v12, v13, v14, v17, v15);
  return a1;
}

uint64_t getEnumTagSinglePayload for OpenURLGesture(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int v13;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0xFE)
    v6 = 254;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(_QWORD *)(v4 + 64);
  if (v6 >= a2)
  {
    if (v5 < 0xFE)
    {
      v13 = *(unsigned __int8 *)(((a1 + v7 + 7) & 0xFFFFFFFFFFFFF8) + 0x22);
      if (v13 > 1)
        return (v13 ^ 0xFF) + 1;
      else
        return 0;
    }
    else
    {
      return (*(uint64_t (**)(void))(v4 + 48))();
    }
  }
  else
  {
    v8 = (a2 - v6 + 0xFFFFFF) >> (8 * (((v7 + 7) & 0xF8) + 35));
    if ((((_DWORD)v7 + 7) & 0xFFFFFFF8) == 0xFFFFFFE0)
      v9 = v8 + 1;
    else
      v9 = 2;
    if (v9 >= 0x10000)
      v10 = 4;
    else
      v10 = 2;
    if (v9 < 0x100)
      v10 = 1;
    if (v9 >= 2)
      v11 = v10;
    else
      v11 = 0;
    return ((uint64_t (*)(void))((char *)&loc_234D8F884 + 4 * byte_23529F2C0[v11]))();
  }
}

void storeEnumTagSinglePayload for OpenURLGesture(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unsigned int v8;
  int v9;
  int v10;
  unsigned int v11;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0xFEu)
    v6 = 254;
  else
    v6 = *(_DWORD *)(v5 + 84);
  v7 = ((*(_QWORD *)(v5 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 35;
  if (v6 >= a3)
  {
    v10 = 0;
    if (v6 >= a2)
      goto LABEL_17;
  }
  else
  {
    if (((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) == 0xFFFFFFE0)
      v8 = ((a3 - v6 + 0xFFFFFF) >> 24) + 1;
    else
      v8 = 2;
    if (v8 >= 0x10000)
      v9 = 4;
    else
      v9 = 2;
    if (v8 < 0x100)
      v9 = 1;
    if (v8 >= 2)
      v10 = v9;
    else
      v10 = 0;
    if (v6 >= a2)
LABEL_17:
      __asm { BR              X12 }
  }
  v11 = ~v6 + a2;
  bzero(a1, ((*(_QWORD *)(v5 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 35);
  if ((_DWORD)v7 == 3)
  {
    *a1 = v11;
    *((_BYTE *)a1 + 2) = BYTE2(v11);
  }
  else
  {
    *(_DWORD *)a1 = v11;
  }
  __asm { BR              X11 }
}

void sub_234D8FA30(char a1@<W8>)
{
  uint64_t v1;
  uint64_t v2;

  *(_BYTE *)(v1 + v2) = a1;
  JUMPOUT(0x234D8FAB4);
}

void sub_234D8FA38(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x234D8FA40);
  JUMPOUT(0x234D8FAB4);
}

void sub_234D8FA84(__int16 a1@<W8>)
{
  uint64_t v1;
  uint64_t v2;

  *(_WORD *)(v1 + v2) = a1;
  JUMPOUT(0x234D8FAB4);
}

void sub_234D8FA8C(int a1@<W8>)
{
  uint64_t v1;
  uint64_t v2;

  *(_DWORD *)(v1 + v2) = a1;
  JUMPOUT(0x234D8FAB4);
}

uint64_t sub_234D8FA94(uint64_t a1, unsigned int a2, unsigned int a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_WORD *)(v6 + v7) = 0;
  if (!a2)
    goto LABEL_6;
  if (a3 < 0xFE)
  {
    if (a2 > 0xFE)
      JUMPOUT(0x234D8FAA0);
    *(_BYTE *)(((v6 + v5 + 7) & 0xFFFFFFFFFFFFFFF8) + 34) = -(char)a2;
LABEL_6:
    JUMPOUT(0x234D8FAB4);
  }
  return (*(uint64_t (**)(uint64_t))(v4 + 56))(v6);
}

uint64_t associated type witness table accessor for Gesture.Body : Gesture in OpenURLGesture<A>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_234D8FB00(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v5 = *(_QWORD *)(v4 + 16);
  v6 = type metadata accessor for OpenURLGesture(0, v5, *(_QWORD *)(v4 + 24), a4);
  v7 = *(unsigned __int8 *)(*(_QWORD *)(v6 - 8) + 80);
  v8 = v4 + ((v7 + 32) & ~v7);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v8, v5);
  v9 = v8 + *(int *)(v6 + 36);
  outlined consume of Environment<OpenURLAction>.Content(*(_QWORD *)v9, *(_QWORD *)(v9 + 8), *(_QWORD *)(v9 + 16), *(_QWORD *)(v9 + 24), *(_WORD *)(v9 + 32), *(_BYTE *)(v9 + 34));
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in OpenURLGesture.body.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = *(_QWORD *)(v4 + 16);
  v7 = *(_QWORD *)(v4 + 24);
  v8 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for OpenURLGesture(0, v6, v7, a4) - 8) + 80);
  return closure #1 in OpenURLGesture.body.getter(a1, v4 + ((v8 + 32) & ~v8), v6, v7);
}

void sub_234D8FBF0(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  type metadata accessor for _EndedGesture(255, *a1, a1[1], a4);
  JUMPOUT(0x23B7C9C04);
}

unint64_t specialized MutableCollection.swapAt(_:_:)(unint64_t result, unint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  unint64_t v5;
  unint64_t v6;
  __int128 v7;
  __int128 v8;

  if (result != a2)
  {
    v5 = result;
    if ((result & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else
    {
      v4 = *(_QWORD **)v3;
      v6 = *(_QWORD *)(*(_QWORD *)v3 + 16);
      if (v6 > result)
      {
        v2 = a2;
        if (v6 > a2)
        {
          v7 = *(_OWORD *)&v4[2 * result + 4];
          v8 = *(_OWORD *)&v4[2 * a2 + 4];
          result = swift_isUniquelyReferenced_nonNull_native();
          if ((result & 1) != 0)
            goto LABEL_6;
          goto LABEL_13;
        }
LABEL_12:
        __break(1u);
LABEL_13:
        result = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v4);
        v4 = (_QWORD *)result;
LABEL_6:
        if (v4[2] <= v5)
        {
          __break(1u);
        }
        else
        {
          *(_OWORD *)&v4[2 * v5 + 4] = v8;
          *(_QWORD *)v3 = v4;
          if (v4[2] > v2)
          {
            *(_OWORD *)&v4[2 * v2 + 4] = v7;
            *(_QWORD *)v3 = v4;
            return result;
          }
        }
        __break(1u);
        return result;
      }
    }
    __break(1u);
    goto LABEL_12;
  }
  return result;
}

{
  unint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  char v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  char v19;
  uint64_t v20;

  if (result != a2)
  {
    v11 = result;
    if ((result & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else
    {
      v4 = *(_QWORD **)v3;
      v12 = *(_QWORD *)(*(_QWORD *)v3 + 16);
      if (v12 > result)
      {
        v2 = a2;
        if (v12 > a2)
        {
          v13 = (uint64_t)&v4[5 * result + 4];
          v20 = *(_QWORD *)v13;
          v19 = *(_BYTE *)(v13 + 8);
          v18 = *(_QWORD *)(v13 + 16);
          v17 = *(_BYTE *)(v13 + 24);
          v9 = *(_QWORD *)(v13 + 32);
          v14 = (uint64_t)&v4[5 * a2 + 4];
          v10 = *(_QWORD *)v14;
          v5 = *(_BYTE *)(v14 + 8);
          v6 = *(_QWORD *)(v14 + 16);
          v7 = *(_BYTE *)(v14 + 24);
          v8 = *(_QWORD *)(v14 + 32);
          result = swift_isUniquelyReferenced_nonNull_native();
          if ((result & 1) != 0)
          {
LABEL_6:
            v15 = (uint64_t)&v4[5 * v11 + 4];
            *(_QWORD *)v15 = v10;
            *(_BYTE *)(v15 + 8) = v5;
            *(_QWORD *)(v15 + 16) = v6;
            *(_BYTE *)(v15 + 24) = v7;
            *(_QWORD *)(v15 + 32) = v8;
            v16 = (uint64_t)&v4[5 * v2 + 4];
            *(_QWORD *)v16 = v20;
            *(_BYTE *)(v16 + 8) = v19;
            *(_QWORD *)(v16 + 16) = v18;
            *(_BYTE *)(v16 + 24) = v17;
            *(_QWORD *)(v16 + 32) = v9;
            *(_QWORD *)v3 = v4;
            return result;
          }
LABEL_11:
          result = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v4);
          v4 = (_QWORD *)result;
          goto LABEL_6;
        }
LABEL_10:
        __break(1u);
        goto LABEL_11;
      }
    }
    __break(1u);
    goto LABEL_10;
  }
  return result;
}

{
  unint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;

  if (result != a2)
  {
    v7 = result;
    if ((result & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else
    {
      v4 = *(_QWORD **)v3;
      v8 = *(_QWORD *)(*(_QWORD *)v3 + 16);
      if (v8 > result)
      {
        v2 = a2;
        if (v8 > a2)
        {
          v5 = v4[result + 4];
          v6 = v4[a2 + 4];
          result = swift_isUniquelyReferenced_nonNull_native();
          if ((result & 1) != 0)
          {
LABEL_6:
            v4[v7 + 4] = v6;
            v4[v2 + 4] = v5;
            *(_QWORD *)v3 = v4;
            return result;
          }
LABEL_11:
          result = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v4);
          v4 = (_QWORD *)result;
          goto LABEL_6;
        }
LABEL_10:
        __break(1u);
        goto LABEL_11;
      }
    }
    __break(1u);
    goto LABEL_10;
  }
  return result;
}

{
  _QWORD *v2;
  uint64_t v3;
  unint64_t v4;
  __int128 *v5;
  uint64_t v6;
  __int128 *v7;
  uint64_t v8;
  unint64_t v9;
  __int128 *v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 *v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  _QWORD *v30;
  _OWORD *v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  _OWORD *v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  _OWORD v69[11];
  _BYTE v70[28];
  _OWORD v71[11];
  _OWORD v72[2];
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  _OWORD v84[2];
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  _OWORD v96[3];

  if (result != a2)
  {
    if ((result & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else
    {
      v2 = *(_QWORD **)v3;
      v9 = *(_QWORD *)(*(_QWORD *)v3 + 16);
      if (v9 > result)
      {
        v4 = a2;
        v5 = &v73;
        v8 = 26 * result;
        v10 = (__int128 *)&v2[26 * result + 4];
        v73 = *v10;
        v11 = v10[1];
        v12 = v10[2];
        v13 = v10[4];
        v76 = v10[3];
        v77 = v13;
        v74 = v11;
        v75 = v12;
        v14 = v10[5];
        v15 = v10[6];
        v16 = v10[8];
        v80 = v10[7];
        v81 = v16;
        v78 = v14;
        v79 = v15;
        v17 = v10[9];
        v18 = v10[10];
        v19 = v10[11];
        *(_OWORD *)((char *)v84 + 12) = *(__int128 *)((char *)v10 + 188);
        v83 = v18;
        v84[0] = v19;
        v82 = v17;
        if (v9 > a2)
        {
          v7 = &v85;
          v6 = 26 * a2;
          v20 = (__int128 *)&v2[26 * a2 + 4];
          v85 = *v20;
          v21 = v20[1];
          v22 = v20[2];
          v23 = v20[4];
          v88 = v20[3];
          v89 = v23;
          v86 = v21;
          v87 = v22;
          v24 = v20[5];
          v25 = v20[6];
          v26 = v20[8];
          v92 = v20[7];
          v93 = v26;
          v90 = v24;
          v91 = v25;
          v27 = v20[9];
          v28 = v20[10];
          v29 = v20[11];
          *(_OWORD *)((char *)v96 + 12) = *(__int128 *)((char *)v20 + 188);
          v95 = v28;
          v96[0] = v29;
          v94 = v27;
          outlined retain of LayoutGestureBox.Child((uint64_t)&v73);
          outlined retain of LayoutGestureBox.Child((uint64_t)&v85);
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
            goto LABEL_6;
          goto LABEL_12;
        }
LABEL_11:
        __break(1u);
LABEL_12:
        v2 = specialized _ArrayBuffer._consumeAndCreateNew()(v2);
LABEL_6:
        v30 = v2 + 4;
        v31 = &v2[v8 + 4];
        v69[0] = *v31;
        v32 = v31[1];
        v33 = v31[2];
        v34 = v31[4];
        v69[3] = v31[3];
        v69[4] = v34;
        v69[1] = v32;
        v69[2] = v33;
        v35 = v31[5];
        v36 = v31[6];
        v37 = v31[8];
        v69[7] = v31[7];
        v69[8] = v37;
        v69[5] = v35;
        v69[6] = v36;
        v38 = v31[9];
        v39 = v31[10];
        v40 = v31[11];
        *(_OWORD *)&v70[12] = *(_OWORD *)((char *)v31 + 188);
        v69[10] = v39;
        *(_OWORD *)v70 = v40;
        v69[9] = v38;
        *v31 = v85;
        v41 = v86;
        v42 = v87;
        v43 = v89;
        v31[3] = v88;
        v31[4] = v43;
        v31[1] = v41;
        v31[2] = v42;
        v44 = v90;
        v45 = v91;
        v46 = v93;
        v31[7] = v92;
        v31[8] = v46;
        v31[5] = v44;
        v31[6] = v45;
        v47 = v94;
        v48 = v95;
        v49 = v96[0];
        *(_OWORD *)((char *)v31 + 188) = *(__int128 *)((char *)v7 + 188);
        v31[10] = v48;
        v31[11] = v49;
        v31[9] = v47;
        result = outlined release of LayoutGestureBox.Child((uint64_t)v69);
        if (v2[2] <= v4)
        {
          __break(1u);
        }
        else
        {
          v50 = &v30[v6];
          v71[0] = *(_OWORD *)&v30[v6];
          v51 = *(_OWORD *)&v30[v6 + 2];
          v52 = *(_OWORD *)&v30[v6 + 4];
          v53 = *(_OWORD *)&v30[v6 + 8];
          v71[3] = *(_OWORD *)&v30[v6 + 6];
          v71[4] = v53;
          v71[1] = v51;
          v71[2] = v52;
          v54 = *(_OWORD *)&v30[v6 + 10];
          v55 = *(_OWORD *)&v30[v6 + 12];
          v56 = *(_OWORD *)&v30[v6 + 16];
          v71[7] = *(_OWORD *)&v30[v6 + 14];
          v71[8] = v56;
          v71[5] = v54;
          v71[6] = v55;
          v57 = *(_OWORD *)&v30[v6 + 18];
          v58 = *(_OWORD *)&v30[v6 + 20];
          v59 = *(_OWORD *)&v30[v6 + 22];
          *(_OWORD *)((char *)v72 + 12) = *(_OWORD *)((char *)&v30[v6 + 23] + 4);
          v71[10] = v58;
          v72[0] = v59;
          v71[9] = v57;
          *v50 = v73;
          v60 = v74;
          v61 = v75;
          v62 = v77;
          v50[3] = v76;
          v50[4] = v62;
          v50[1] = v60;
          v50[2] = v61;
          v63 = v78;
          v64 = v79;
          v65 = v81;
          v50[7] = v80;
          v50[8] = v65;
          v50[5] = v63;
          v50[6] = v64;
          v66 = v82;
          v67 = v83;
          v68 = v84[0];
          *(_OWORD *)((char *)v50 + 188) = *(__int128 *)((char *)v5 + 188);
          v50[10] = v67;
          v50[11] = v68;
          v50[9] = v66;
          result = outlined release of LayoutGestureBox.Child((uint64_t)v71);
          *(_QWORD *)v3 = v2;
        }
        return result;
      }
    }
    __break(1u);
    goto LABEL_11;
  }
  return result;
}

unint64_t specialized MutableCollection.swapAt(_:_:)(unint64_t a1, unint64_t a2)
{
  return specialized MutableCollection.swapAt(_:_:)(a1, a2, (uint64_t (*)(uint64_t))specialized _ArrayBuffer._consumeAndCreateNew());
}

unint64_t specialized MutableCollection.swapAt(_:_:)(unint64_t result, unint64_t a2, uint64_t (*a3)(uint64_t))
{
  uint64_t *v3;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  int isUniquelyReferenced_nonNull_bridgeObject;
  unint64_t v11;

  if (result != a2)
  {
    v6 = result;
    v7 = *v3;
    if ((*v3 & 0xC000000000000001) == 0)
    {
      if ((result & 0x8000000000000000) != 0)
      {
        __break(1u);
      }
      else if (*(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10) > result)
      {
        v8 = *(_QWORD *)(v7 + 8 * result + 32);
        result = swift_retain();
        if ((v7 & 0xC000000000000001) == 0)
          goto LABEL_6;
        goto LABEL_21;
      }
      __break(1u);
      goto LABEL_24;
    }
    result = MEMORY[0x23B7C6D9C](result, *v3);
    v8 = result;
    v7 = *v3;
    if ((*v3 & 0xC000000000000001) == 0)
    {
LABEL_6:
      if ((a2 & 0x8000000000000000) == 0)
      {
        if (*(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10) > a2)
        {
          v9 = *(_QWORD *)(v7 + 8 * a2 + 32);
          swift_retain();
LABEL_9:
          isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
          *v3 = v7;
          if (!isUniquelyReferenced_nonNull_bridgeObject || v7 < 0 || (v7 & 0x4000000000000000) != 0)
          {
            v7 = a3(v7);
            *v3 = v7;
          }
          *(_QWORD *)((v7 & 0xFFFFFFFFFFFFFF8) + 8 * v6 + 0x20) = v9;
          swift_release();
          specialized Array._endMutation()();
          v11 = *v3;
          result = swift_isUniquelyReferenced_nonNull_bridgeObject();
          *v3 = v11;
          if (!(_DWORD)result || (v11 & 0x8000000000000000) != 0 || (v11 & 0x4000000000000000) != 0)
          {
            result = a3(v11);
            v11 = result;
            *v3 = result;
          }
          if ((a2 & 0x8000000000000000) == 0)
          {
            if (*(_QWORD *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x10) > a2)
            {
              *(_QWORD *)((v11 & 0xFFFFFFFFFFFFFF8) + 8 * a2 + 0x20) = v8;
              swift_release();
              return specialized Array._endMutation()();
            }
            goto LABEL_27;
          }
LABEL_26:
          __break(1u);
LABEL_27:
          __break(1u);
          return result;
        }
LABEL_25:
        __break(1u);
        goto LABEL_26;
      }
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }
LABEL_21:
    v9 = MEMORY[0x23B7C6D9C](a2, v7);
    v7 = *v3;
    goto LABEL_9;
  }
  return result;
}

Swift::Void __swiftcall MultiViewResponder.updateChildren(_:)(Swift::tuple_value_OpaquePointer_changed_Bool a1)
{
  int64_t v1;

  if (a1.changed)
  {
    v1 = swift_bridgeObjectRetain();
    MultiViewResponder.children.setter(v1);
  }
}

uint64_t MultiViewResponder.containsGlobalPoints(_:cacheKey:options:)(_QWORD *a1, uint64_t a2, unint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  double v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  uint64_t v19;
  int v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;

  v5 = v4;
  v9 = *a4;
  swift_beginAccess();
  if ((*(_BYTE *)(v4 + 52) & 1) == 0 && (a3 & 0x100000000) == 0 && *(_DWORD *)(v4 + 48) == (_DWORD)a3)
  {
    *a1 = *(_QWORD *)(v4 + 56);
    return swift_endAccess();
  }
  swift_beginAccess();
  v10 = *(_QWORD *)(v4 + 40);
  if (v10 >> 62)
  {
    swift_bridgeObjectRetain();
    result = _CocoaArrayWrapper.endIndex.getter();
    v11 = result;
  }
  else
  {
    v11 = *(_QWORD *)((v10 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = swift_bridgeObjectRetain();
  }
  v20 = a3;
  v21 = a1;
  v19 = HIDWORD(a3) & 1;
  if (!v11)
  {
    v14 = 0;
    v15 = 0.0;
LABEL_17:
    swift_bridgeObjectRelease();
    *(_QWORD *)(v5 + 56) = v14;
    *(double *)(v5 + 64) = v15;
    *(_DWORD *)(v5 + 48) = v20;
    *(_BYTE *)(v5 + 52) = v19;
    *v21 = v14;
    return swift_endAccess();
  }
  if (v11 >= 1)
  {
    v13 = 0;
    v14 = 0;
    v15 = 0.0;
    v16 = a3 | ((HIDWORD(a3) & 1) << 32);
    do
    {
      if ((v10 & 0xC000000000000001) != 0)
      {
        v17 = MEMORY[0x23B7C6D9C](v13, v10);
      }
      else
      {
        v17 = *(_QWORD *)(v10 + 8 * v13 + 32);
        swift_retain();
      }
      ++v13;
      v22 = v9;
      v18 = (*(double (**)(uint64_t *, uint64_t, uint64_t, uint64_t *))(*(_QWORD *)v17 + 168))(&v23, a2, v16, &v22);
      swift_release();
      v14 |= v23;
      if (v15 <= v18)
        v15 = v18;
    }
    while (v11 != v13);
    goto LABEL_17;
  }
  __break(1u);
  return result;
}

uint64_t MultiViewResponder.bindEvent(_:)(uint64_t a1)
{
  uint64_t v1;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  swift_beginAccess();
  v3 = *(_QWORD *)(v1 + 40);
  if (v3 >> 62)
  {
LABEL_14:
    swift_bridgeObjectRetain();
    v4 = _CocoaArrayWrapper.endIndex.getter();
    if (v4)
      goto LABEL_3;
  }
  else
  {
    v4 = *(_QWORD *)((v3 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v4)
    {
LABEL_3:
      v5 = 4;
      do
      {
        v6 = v5 - 4;
        if ((v3 & 0xC000000000000001) != 0)
        {
          v7 = MEMORY[0x23B7C6D9C](v5 - 4, v3);
          v8 = v5 - 3;
          if (__OFADD__(v6, 1))
            goto LABEL_13;
        }
        else
        {
          v7 = *(_QWORD *)(v3 + 8 * v5);
          swift_retain();
          v8 = v5 - 3;
          if (__OFADD__(v6, 1))
          {
LABEL_13:
            __break(1u);
            goto LABEL_14;
          }
        }
        v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 96))(a1);
        swift_release();
        if (v9)
          goto LABEL_12;
        ++v5;
      }
      while (v8 != v4);
    }
  }
  v9 = 0;
LABEL_12:
  swift_bridgeObjectRelease();
  return v9;
}

_QWORD *MultiViewResponder.visit(applying:)@<X0>(_QWORD *(*a1)(_QWORD *__return_ptr, uint64_t)@<X0>, uint64_t a2@<X1>, char *a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *result;
  char v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  _QWORD v17[3];

  v4 = v3;
  result = a1((_QWORD *)((char *)v17 + 1), v3);
  v9 = BYTE1(v17[0]);
  if (!BYTE1(v17[0]))
  {
    swift_beginAccess();
    v10 = *(_QWORD *)(v4 + 40);
    if (v10 >> 62)
      goto LABEL_17;
    v11 = *(_QWORD *)((v10 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    for (; v11; v11 = _CocoaArrayWrapper.endIndex.getter())
    {
      v12 = 4;
      while (1)
      {
        v13 = v12 - 4;
        if ((v10 & 0xC000000000000001) == 0)
          break;
        v14 = MEMORY[0x23B7C6D9C](v12 - 4, v10);
        v15 = __OFADD__(v13, 1);
        v16 = v12 - 3;
        if (v15)
          goto LABEL_16;
LABEL_10:
        (*(void (**)(_QWORD *__return_ptr, _QWORD *(*)(_QWORD *__return_ptr, uint64_t), uint64_t))(*(_QWORD *)v14 + 104))(v17, a1, a2);
        swift_release();
        if (LOBYTE(v17[0]) == 2)
        {
          v9 = 2;
          goto LABEL_14;
        }
        ++v12;
        if (v16 == v11)
          goto LABEL_12;
      }
      v14 = *(_QWORD *)(v10 + 8 * v12);
      swift_retain();
      v15 = __OFADD__(v13, 1);
      v16 = v12 - 3;
      if (!v15)
        goto LABEL_10;
LABEL_16:
      __break(1u);
LABEL_17:
      swift_bridgeObjectRetain();
    }
LABEL_12:
    v9 = 0;
LABEL_14:
    result = (_QWORD *)swift_bridgeObjectRelease();
  }
  *a3 = v9;
  return result;
}

uint64_t MultiViewResponder.addContentPath(to:kind:in:observer:)(uint64_t a1, uint64_t *a2, uint64_t a3, int64_t *a4, uint64_t a5)
{
  uint64_t v5;
  int64_t *v6;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int64_t v16;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD v24[2];

  v11 = *a2;
  if (!a4)
    goto LABEL_15;
  v6 = (int64_t *)(v5 + 72);
  swift_beginAccess();
  v12 = *(_QWORD *)(v5 + 72);
  v13 = *(_QWORD *)(v12 + 16);
  if (!v13)
  {
    swift_unknownObjectRetain();
LABEL_10:
    v24[1] = a5;
    swift_unknownObjectWeakInit();
    v16 = *v6;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *v6 = v16;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      goto LABEL_11;
    goto LABEL_29;
  }
  v14 = v12 + 32;
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  while (1)
  {
    v15 = MEMORY[0x23B7C9E44](v14);
    if (v15)
    {
      v6 = (int64_t *)v15;
      swift_unknownObjectRelease();
      if (v6 == a4)
        break;
    }
    v14 += 16;
    if (!--v13)
    {
      swift_bridgeObjectRelease();
      v6 = (int64_t *)(v5 + 72);
      goto LABEL_10;
    }
  }
  swift_bridgeObjectRelease();
  while (1)
  {
    swift_endAccess();
    swift_unknownObjectRelease();
LABEL_15:
    swift_beginAccess();
    v20 = *(_QWORD *)(v5 + 40);
    if ((unint64_t)v20 >> 62)
    {
      if (v20 < 0)
        v5 = *(_QWORD *)(v5 + 40);
      else
        v5 = v20 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain();
      v16 = _CocoaArrayWrapper.endIndex.getter();
      if (!v16)
        return swift_bridgeObjectRelease();
    }
    else
    {
      v16 = *(_QWORD *)((v20 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      if (!v16)
        return swift_bridgeObjectRelease();
    }
    if (v16 >= 1)
      break;
    __break(1u);
LABEL_29:
    v16 = (int64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v16 + 16) + 1, 1, v16);
    *v6 = v16;
LABEL_11:
    v19 = *(_QWORD *)(v16 + 16);
    v18 = *(_QWORD *)(v16 + 24);
    if (v19 >= v18 >> 1)
    {
      v16 = (int64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v18 > 1), v19 + 1, 1, v16);
      *v6 = v16;
    }
    *(_QWORD *)(v16 + 16) = v19 + 1;
    outlined init with take of ContentPathObservers.Observer((uint64_t)v24, v16 + 16 * v19 + 32);
  }
  v21 = 0;
  do
  {
    if ((v20 & 0xC000000000000001) != 0)
    {
      v22 = MEMORY[0x23B7C6D9C](v21, v20);
    }
    else
    {
      v22 = *(_QWORD *)(v20 + 8 * v21 + 32);
      swift_retain();
    }
    ++v21;
    v24[0] = v11;
    (*(void (**)(uint64_t, _QWORD *, uint64_t, int64_t *, uint64_t))(*(_QWORD *)v22 + 176))(a1, v24, a3, a4, a5);
    swift_release();
  }
  while (v16 != v21);
  return swift_bridgeObjectRelease();
}

uint64_t MultiViewResponder.addObserver(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD **v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v13;
  unint64_t v14;
  _BYTE v16[8];
  uint64_t v17;

  v5 = (_QWORD **)(v2 + 72);
  swift_beginAccess();
  v6 = *(_QWORD *)(v2 + 72);
  v7 = *(_QWORD *)(v6 + 16);
  if (v7)
  {
    v8 = v6 + 32;
    swift_bridgeObjectRetain();
    do
    {
      v9 = MEMORY[0x23B7C9E44](v8);
      if (v9)
      {
        v10 = v9;
        swift_unknownObjectRelease();
        if (v10 == a1)
        {
          swift_bridgeObjectRelease();
          return swift_endAccess();
        }
      }
      v8 += 16;
      --v7;
    }
    while (v7);
    swift_bridgeObjectRelease();
  }
  v17 = a2;
  swift_unknownObjectWeakInit();
  v11 = *v5;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *v5 = v11;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v11[2] + 1, 1, (unint64_t)v11);
    *v5 = v11;
  }
  v14 = v11[2];
  v13 = v11[3];
  if (v14 >= v13 >> 1)
  {
    v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v13 > 1), v14 + 1, 1, (unint64_t)v11);
    *v5 = v11;
  }
  v11[2] = v14 + 1;
  outlined init with take of ContentPathObservers.Observer((uint64_t)v16, (uint64_t)&v11[2 * v14 + 4]);
  return swift_endAccess();
}

uint64_t MultiViewResponder.childCount.getter()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;

  swift_beginAccess();
  v1 = *(_QWORD *)(v0 + 40);
  if (!(v1 >> 62))
    return *(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  v2 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  return v2;
}

uint64_t MultiViewResponder.child(at:)(unint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;

  result = swift_beginAccess();
  v4 = *(_QWORD *)(v1 + 40);
  if ((v4 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    v5 = MEMORY[0x23B7C6D9C](a1, v4);
    swift_bridgeObjectRelease();
    return v5;
  }
  if ((a1 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10) > a1)
  {
    v5 = *(_QWORD *)(v4 + 8 * a1 + 32);
    swift_retain();
    return v5;
  }
  __break(1u);
  return result;
}

uint64_t MultiViewResponder.__allocating_init()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v0 = swift_allocObject();
  v1 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v0 + 40) = MEMORY[0x24BEE4AF8];
  *(_DWORD *)(v0 + 48) = 0;
  *(_BYTE *)(v0 + 52) = 1;
  *(_QWORD *)(v0 + 56) = 0;
  *(_QWORD *)(v0 + 64) = 0;
  *(_QWORD *)(v0 + 72) = v1;
  *(_QWORD *)(v0 + 24) = 0;
  swift_unknownObjectWeakInit();
  swift_weakInit();
  v2 = specialized static ViewGraph.current.getter();
  swift_beginAccess();
  MEMORY[0x23B7C9E44](v2 + 200);
  v3 = *(_QWORD *)(v2 + 208);
  swift_retain();
  swift_release();
  swift_beginAccess();
  *(_QWORD *)(v0 + 24) = v3;
  swift_unknownObjectWeakAssign();
  swift_release();
  swift_unknownObjectRelease();
  return v0;
}

uint64_t MultiViewResponder.init()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v0 + 40) = MEMORY[0x24BEE4AF8];
  *(_DWORD *)(v0 + 48) = 0;
  *(_BYTE *)(v0 + 52) = 1;
  *(_QWORD *)(v0 + 56) = 0;
  *(_QWORD *)(v0 + 64) = 0;
  *(_QWORD *)(v0 + 72) = v1;
  *(_QWORD *)(v0 + 24) = 0;
  swift_unknownObjectWeakInit();
  swift_weakInit();
  swift_retain();
  v2 = specialized static ViewGraph.current.getter();
  swift_beginAccess();
  MEMORY[0x23B7C9E44](v2 + 200);
  v3 = *(_QWORD *)(v2 + 208);
  swift_release();
  swift_beginAccess();
  *(_QWORD *)(v0 + 24) = v3;
  swift_unknownObjectWeakAssign();
  swift_release();
  swift_unknownObjectRelease();
  return v0;
}

uint64_t MultiViewResponder.children.getter()
{
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t MultiViewResponder.children.setter(int64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  int64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t Strong;
  _QWORD *v15;
  uint64_t result;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int isUniquelyReferenced_nonNull_bridgeObject;
  uint64_t v27;
  int v28;
  BOOL v29;
  unint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t ObjectType;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int64_t v41;
  uint64_t v42;
  char v43;
  int64_t v44;
  uint64_t v45;
  _QWORD *v46;
  int64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  _QWORD v51[3];

  v2 = v1;
  v4 = v1 + 5;
  swift_beginAccess();
  v5 = v1[5];
  if (v5 >> 62)
  {
LABEL_75:
    swift_bridgeObjectRetain();
    v6 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!((unint64_t)a1 >> 62))
    {
LABEL_3:
      v7 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
      if (v7)
      {
LABEL_4:
        v8 = 0;
        v9 = a1;
        a1 = 0;
        v10 = 0;
        v48 = v9 & 0xC000000000000001;
        v44 = v9;
        v45 = v7;
        v41 = v9 + 32;
        v42 = v9 & 0xFFFFFFFFFFFFFF8;
        v50 = -v6;
        v46 = v2;
        while (1)
        {
          while (1)
          {
            v43 = v8;
            v11 = a1 - v10 + 0x7FFFFFFFFFFFFFFFLL;
            v47 = v7 + a1 - v10;
            v12 = 8 * a1 + 32;
LABEL_8:
            if (v48)
            {
              v13 = MEMORY[0x23B7C6D9C](v10, v44);
              if (a1 == v11)
                goto LABEL_66;
            }
            else
            {
              if (v10 >= *(_QWORD *)(v42 + 16))
                goto LABEL_68;
              v13 = *(_QWORD *)(v41 + 8 * v10);
              swift_retain();
              if (a1 == v11)
              {
LABEL_66:
                __break(1u);
LABEL_67:
                __break(1u);
LABEL_68:
                __break(1u);
LABEL_69:
                __break(1u);
LABEL_70:
                __break(1u);
                goto LABEL_71;
              }
            }
            v49 = v10 + 1;
            swift_beginAccess();
            Strong = swift_weakLoadStrong();
            if (!Strong)
              goto LABEL_29;
            v15 = (_QWORD *)Strong;
            result = swift_release();
            if (v15 != v2)
              goto LABEL_29;
            if (v6 < a1)
              goto LABEL_67;
            if (a1 != v6)
              break;
            a1 = v6;
LABEL_29:
            swift_weakLoadStrong();
            swift_retain();
            swift_release();
            swift_weakAssign();
            swift_release();
            swift_beginAccess();
            v22 = swift_retain();
            MEMORY[0x23B7C61A8](v22);
            v7 = v45;
            if (*(_QWORD *)((v2[5] & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v2[5] & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
              specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
            specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
            specialized Array._endMutation()();
            swift_endAccess();
            if (a1 >= v6)
              goto LABEL_6;
            swift_beginAccess();
            v23 = *v4;
            if ((*v4 & 0xC000000000000001) != 0)
            {
              v24 = MEMORY[0x23B7C6D9C](a1, *v4);
              v23 = *v4;
              if ((*v4 & 0xC000000000000001) != 0)
                goto LABEL_54;
LABEL_36:
              if ((v6 & 0x8000000000000000) == 0)
              {
                if ((unint64_t)v6 < *(_QWORD *)((v23 & 0xFFFFFFFFFFFFF8) + 0x10))
                {
                  v25 = *(_QWORD *)(v23 + 8 * v6 + 32);
                  swift_retain();
                  goto LABEL_39;
                }
                goto LABEL_72;
              }
LABEL_71:
              __break(1u);
LABEL_72:
              __break(1u);
LABEL_73:
              __break(1u);
              goto LABEL_74;
            }
            if (a1 < 0)
              goto LABEL_69;
            if ((unint64_t)a1 >= *(_QWORD *)((v23 & 0xFFFFFFFFFFFFF8) + 0x10))
              goto LABEL_70;
            v24 = *(_QWORD *)(v23 + 8 * a1 + 32);
            swift_retain();
            if ((v23 & 0xC000000000000001) == 0)
              goto LABEL_36;
LABEL_54:
            v25 = MEMORY[0x23B7C6D9C](v6, v23);
            v23 = *v4;
LABEL_39:
            isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
            *v4 = v23;
            if (!isUniquelyReferenced_nonNull_bridgeObject || v23 < 0 || (v23 & 0x4000000000000000) != 0)
              specialized _ArrayBuffer._consumeAndCreateNew()(v23);
            *(_QWORD *)((v23 & 0xFFFFFFFFFFFFFF8) + 8 * a1 + 0x20) = v25;
            swift_release();
            specialized Array._endMutation()();
            v27 = *v4;
            v28 = swift_isUniquelyReferenced_nonNull_bridgeObject();
            *v4 = v27;
            if (!v28 || v27 < 0 || (v27 & 0x4000000000000000) != 0)
              specialized _ArrayBuffer._consumeAndCreateNew()(v27);
            if (v6 < 0)
              goto LABEL_73;
            if ((unint64_t)v6 >= *(_QWORD *)((v27 & 0xFFFFFFFFFFFFFF8) + 0x10))
            {
LABEL_74:
              __break(1u);
              goto LABEL_75;
            }
            *(_QWORD *)((v27 & 0xFFFFFFFFFFFFFF8) + 8 * v6 + 0x20) = v24;
            swift_release();
            specialized Array._endMutation()();
            swift_endAccess();
            v7 = v45;
LABEL_6:
            swift_release();
            ++v6;
            ++a1;
            v10 = v49;
            --v50;
            v8 = 1;
            if (v49 == v7)
            {
LABEL_55:
              result = swift_bridgeObjectRelease();
              if (a1 < v6)
                goto LABEL_58;
              return (*(uint64_t (**)(uint64_t))(*v2 + 304))(result);
            }
          }
          v17 = 0;
          v2 = (_QWORD *)(v50 + a1);
          while (1)
          {
            v18 = a1 + v17;
            if (a1 + v17 >= v6)
            {
              __break(1u);
LABEL_62:
              __break(1u);
LABEL_63:
              __break(1u);
              goto LABEL_64;
            }
            result = swift_beginAccess();
            v19 = *v4;
            if ((*v4 & 0xC000000000000001) == 0)
            {
              if ((v18 & 0x8000000000000000) != 0)
                goto LABEL_62;
              if (v18 >= *(_QWORD *)((v19 & 0xFFFFFFFFFFFFF8) + 0x10))
                goto LABEL_63;
              v20 = *(_QWORD *)(v19 + v12 + 8 * v17);
              result = swift_endAccess();
              if (v20 == v13)
                break;
              goto LABEL_23;
            }
            v21 = MEMORY[0x23B7C6D9C](a1 + v17);
            swift_endAccess();
            result = swift_unknownObjectRelease();
            if (v21 == v13)
              break;
LABEL_23:
            ++v17;
            if (!(_QWORD *)((char *)v2 + v17))
            {
              v2 = v46;
              goto LABEL_29;
            }
          }
          if (!v17)
          {
            swift_release();
            ++a1;
            v12 += 8;
            v2 = v46;
            ++v10;
            if (a1 == v47)
            {
              result = swift_bridgeObjectRelease();
              a1 = v47;
              if (v47 < v6)
              {
LABEL_58:
                if (v6 < a1)
                  goto LABEL_100;
                v29 = a1 < v6;
                if (a1 != v6)
                  goto LABEL_82;
LABEL_79:
                swift_beginAccess();
                specialized Array.replaceSubrange<A>(_:with:)(a1, v6);
                result = swift_endAccess();
                return (*(uint64_t (**)(uint64_t))(*v2 + 304))(result);
              }
LABEL_64:
              if ((v43 & 1) == 0)
                return result;
              return (*(uint64_t (**)(uint64_t))(*v2 + 304))(result);
            }
            goto LABEL_8;
          }
          swift_beginAccess();
          specialized MutableCollection.swapAt(_:_:)(a1, a1 + v17, (uint64_t (*)(uint64_t))specialized _ArrayBuffer._consumeAndCreateNew());
          swift_endAccess();
          swift_release();
          ++a1;
          v8 = 1;
          v7 = v45;
          v2 = v46;
          ++v10;
          if (v49 == v45)
            goto LABEL_55;
        }
      }
      goto LABEL_77;
    }
  }
  else
  {
    v6 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!((unint64_t)a1 >> 62))
      goto LABEL_3;
  }
  swift_bridgeObjectRetain();
  v7 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (v7)
    goto LABEL_4;
LABEL_77:
  result = swift_bridgeObjectRelease();
  if (v6 <= 0)
    return result;
  a1 = 0;
  v29 = v6 > 0;
LABEL_82:
  if (!v29)
    goto LABEL_101;
  v30 = a1;
  while (1)
  {
    result = swift_beginAccess();
    v31 = *v4;
    if ((*v4 & 0xC000000000000001) != 0)
    {
      v32 = (_QWORD *)MEMORY[0x23B7C6D9C](v30);
      goto LABEL_91;
    }
    if ((v30 & 0x8000000000000000) != 0)
      break;
    if (v30 >= *(_QWORD *)((v31 & 0xFFFFFFFFFFFFF8) + 0x10))
      goto LABEL_99;
    v32 = *(_QWORD **)(v31 + 8 * v30 + 32);
    swift_retain();
LABEL_91:
    swift_endAccess();
    swift_beginAccess();
    v33 = swift_weakLoadStrong();
    if (v33)
    {
      v34 = (_QWORD *)v33;
      swift_release();
      if (v34 == v2)
      {
        if (swift_weakLoadStrong())
        {
          swift_release();
          swift_beginAccess();
          if (MEMORY[0x23B7C9E44](v32 + 2))
          {
            v35 = v32[3];
            ObjectType = swift_getObjectType();
            v37 = type metadata accessor for EventGraphHost();
            (*(void (**)(_QWORD *__return_ptr, unint64_t, unint64_t, uint64_t, uint64_t))(v35 + 16))(v51, v37, v37, ObjectType, v35);
            swift_unknownObjectRelease();
            if (v51[0])
            {
              v38 = v51[1];
              v39 = swift_getObjectType();
              (*(void (**)(uint64_t, uint64_t))(v38 + 8))(v39, v38);
              swift_unknownObjectRelease();
              v40 = EventBindingManager.willRemoveResponder(_:)((uint64_t)v32);
              (*(void (**)(uint64_t))(*v32 + 120))(v40);
              swift_release();
            }
          }
        }
        swift_weakAssign();
      }
    }
    ++v30;
    swift_release();
    if (v6 == v30)
      goto LABEL_79;
  }
  __break(1u);
LABEL_99:
  __break(1u);
LABEL_100:
  __break(1u);
LABEL_101:
  __break(1u);
  return result;
}

void (*MultiViewResponder.children.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = v1;
  swift_beginAccess();
  v3[3] = *(_QWORD *)(v1 + 40);
  swift_bridgeObjectRetain();
  return MultiViewResponder.children.modify;
}

void MultiViewResponder.children.modify(uint64_t a1, char a2)
{
  void *v2;
  int64_t v3;
  int64_t v4;

  v2 = *(void **)a1;
  v3 = *(_QWORD *)(*(_QWORD *)a1 + 24);
  if ((a2 & 1) != 0)
  {
    v4 = swift_bridgeObjectRetain();
    MultiViewResponder.children.setter(v4);
    swift_bridgeObjectRelease();
  }
  else
  {
    MultiViewResponder.children.setter(v3);
  }
  free(v2);
}

Swift::Void __swiftcall MultiViewResponder.childrenDidChange()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t ObjectType;
  _BYTE v6[8];
  uint64_t v7;

  swift_beginAccess();
  v1 = *(_QWORD *)(v0 + 72);
  *(_QWORD *)(v0 + 72) = MEMORY[0x24BEE4AF8];
  v2 = *(_QWORD *)(v1 + 16);
  if (v2)
  {
    v3 = v1 + 32;
    do
    {
      outlined init with copy of ContentPathObservers.Observer(v3, (uint64_t)v6);
      if (MEMORY[0x23B7C9E44](v6))
      {
        v4 = v7;
        ObjectType = swift_getObjectType();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 8))(v0, ObjectType, v4);
        swift_unknownObjectRelease();
      }
      outlined destroy of ContentPathObservers.Observer((uint64_t)v6);
      v3 += 16;
      --v2;
    }
    while (v2);
  }
  swift_bridgeObjectRelease();
  swift_endAccess();
}

Swift::Void __swiftcall MultiViewResponder.resetGesture()()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t i;
  uint64_t v4;

  swift_beginAccess();
  v1 = *(_QWORD *)(v0 + 40);
  if (!(v1 >> 62))
  {
    v2 = *(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v2)
      goto LABEL_3;
LABEL_10:
    swift_bridgeObjectRelease();
    return;
  }
  swift_bridgeObjectRetain();
  v2 = _CocoaArrayWrapper.endIndex.getter();
  if (!v2)
    goto LABEL_10;
LABEL_3:
  if (v2 >= 1)
  {
    for (i = 0; i != v2; ++i)
    {
      if ((v1 & 0xC000000000000001) != 0)
      {
        v4 = MEMORY[0x23B7C6D9C](i, v1);
      }
      else
      {
        v4 = *(_QWORD *)(v1 + 8 * i + 32);
        swift_retain();
      }
      (*(void (**)(void))(*(_QWORD *)v4 + 120))();
      swift_release();
    }
    goto LABEL_10;
  }
  __break(1u);
}

uint64_t closure #1 in MultiViewResponder.containsGlobalPoints(_:cacheKey:options:)(_QWORD *a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  double v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  uint64_t v19;
  uint64_t v20;

  swift_beginAccess();
  v10 = *(_QWORD *)(a2 + 40);
  if (!(v10 >> 62))
  {
    v11 = *(_QWORD *)((v10 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = swift_bridgeObjectRetain();
    if (v11)
      goto LABEL_3;
LABEL_12:
    v14 = 0;
LABEL_13:
    result = swift_bridgeObjectRelease();
    *a1 = v14;
    return result;
  }
  swift_bridgeObjectRetain();
  result = _CocoaArrayWrapper.endIndex.getter();
  v11 = result;
  if (!result)
    goto LABEL_12;
LABEL_3:
  if (v11 >= 1)
  {
    v13 = 0;
    v14 = 0;
    v15 = 0.0;
    v16 = a4 | ((HIDWORD(a4) & 1) << 32);
    do
    {
      if ((v10 & 0xC000000000000001) != 0)
      {
        v17 = MEMORY[0x23B7C6D9C](v13, v10);
      }
      else
      {
        v17 = *(_QWORD *)(v10 + 8 * v13 + 32);
        swift_retain();
      }
      ++v13;
      v19 = a5;
      v18 = (*(double (**)(uint64_t *, uint64_t, uint64_t, uint64_t *))(*(_QWORD *)v17 + 168))(&v20, a3, v16, &v19);
      swift_release();
      v14 |= v20;
      if (v15 <= v18)
        v15 = v18;
    }
    while (v11 != v13);
    goto LABEL_13;
  }
  __break(1u);
  return result;
}

uint64_t MultiViewResponder.__ivar_destroyer()
{
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t MultiViewResponder.deinit()
{
  uint64_t v0;

  outlined destroy of weak GestureGraphDelegate?(v0 + 16);
  swift_weakDestroy();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t MultiViewResponder.__deallocating_deinit()
{
  uint64_t v0;

  outlined destroy of weak GestureGraphDelegate?(v0 + 16);
  swift_weakDestroy();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t (*specialized protocol witness for Collection.subscript.read in conformance [A](uint64_t (**a1)(), unint64_t a2, uint64_t a3))()
{
  uint64_t (*v6)();

  v6 = (uint64_t (*)())malloc(0x28uLL);
  *a1 = v6;
  *((_QWORD *)v6 + 4) = specialized Array.subscript.read(v6, a2, a3);
  return protocol witness for Animatable.animatableData.modify in conformance LinearGradient._Paint;
}

{
  uint64_t (*v6)();

  v6 = (uint64_t (*)())malloc(0x28uLL);
  *a1 = v6;
  *((_QWORD *)v6 + 4) = specialized Array.subscript.read(v6, a2, a3);
  return protocol witness for Animatable.animatableData.modify in conformance LinearGradient._Paint;
}

unint64_t type metadata accessor for EventGraphHost()
{
  unint64_t result;

  result = lazy cache variable for type metadata for EventGraphHost;
  if (!lazy cache variable for type metadata for EventGraphHost)
  {
    result = swift_getExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for EventGraphHost);
  }
  return result;
}

uint64_t outlined destroy of ContentPathObservers.Observer(uint64_t a1)
{
  destroy for ContentPathObservers.Observer();
  return a1;
}

uint64_t sub_234D91B14@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;

  v3 = *a1;
  swift_beginAccess();
  *a2 = *(_QWORD *)(v3 + 40);
  return swift_bridgeObjectRetain();
}

uint64_t sub_234D91B5C()
{
  int64_t v0;

  v0 = swift_bridgeObjectRetain();
  return MultiViewResponder.children.setter(v0);
}

uint64_t type metadata accessor for MultiViewResponder()
{
  return objc_opt_self();
}

uint64_t method lookup function for MultiViewResponder()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of MultiViewResponder.childrenDidChange()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 304))();
}

uint64_t ViewResponder.hitTest(globalPoint:radius:options:)(uint64_t *a1, double a2, double a3, double a4)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11[3];

  v4 = *a1;
  v5 = ++static ViewResponder.hitTestKey;
  if ((v4 & 4) != 0)
  {
    v11[0] = v4;
    return ViewResponder.singlePointHitTest(globalPoint:cacheKey:options:)(v5, v11, a2, a3);
  }
  else
  {
    hitPoints(point:radius:)(a2, a3, a4);
    v9 = v4;
    v10 = 0;
    LOBYTE(v11[0]) = 0;
    ViewResponder.hitTest(globalPoints:weights:mask:cacheKey:options:)(v6, v7, &v10, static ViewResponder.hitTestKey, &v9, (double *)v11);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return v11[0];
  }
}

double static HitTestBindingModifier._makeView(modifier:inputs:body:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void (*a3)(uint64_t *__return_ptr, uint64_t, uint64_t *)@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  int v7;
  int v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  id v30;
  unsigned int v31;
  uint64_t v32;
  double result;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  uint64_t v44;
  double v45;
  uint64_t v46;
  double v47;
  uint64_t v48;
  int v49;
  int v50;
  int v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  int v56;
  int v57;
  int v58;
  int v59;
  int v60;
  int v61;
  uint64_t v62;

  v62 = *MEMORY[0x24BDAC8D0];
  v4 = *(_QWORD *)a2;
  v5 = *(_DWORD *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 16);
  v8 = *(_DWORD *)(a2 + 24);
  v7 = *(_DWORD *)(a2 + 28);
  v10 = *(_DWORD *)(a2 + 32);
  v9 = *(_DWORD *)(a2 + 36);
  v12 = *(_QWORD *)(a2 + 40);
  v11 = *(_QWORD *)(a2 + 48);
  v13 = *(_DWORD *)(a2 + 56);
  v14 = *(_DWORD *)(a2 + 60);
  v15 = *(_DWORD *)(a2 + 64);
  v16 = *(_DWORD *)(a2 + 68);
  v17 = *(_DWORD *)(a2 + 72);
  v18 = *(_DWORD *)(a2 + 76);
  v19 = *(_DWORD *)(a2 + 80);
  v46 = *(_QWORD *)a2;
  LODWORD(v47) = v5;
  v48 = v6;
  v49 = v8;
  v50 = v7;
  v51 = v10;
  v52 = v9;
  v41 = v13;
  v42 = v9;
  v53 = v12;
  v54 = v11;
  v55 = v13;
  v56 = v14;
  v39 = v15;
  v40 = v14;
  v57 = v15;
  v58 = v16;
  v37 = v17;
  v38 = v16;
  v59 = v17;
  v60 = v18;
  v35 = v19;
  v36 = v18;
  v61 = v19;
  a3(&v44, a1, &v46);
  type metadata accessor for _AnyPreferenceKey<ViewRespondersKey>(0, v20, v21, v22);
  v27 = *(_QWORD *)(v11 + 16);
  if (v27)
  {
    v28 = v23;
    v29 = 32;
    while (*(_QWORD *)(v11 + v29) != v23)
    {
      v29 += 16;
      if (!--v27)
        goto LABEL_7;
    }
    v46 = v44;
    v47 = v45;
    v34 = _ViewOutputs.viewResponders()(v23, v24, v25, v26);
    type metadata accessor for HitTestBindingResponder();
    swift_allocObject();
    v46 = v4;
    LODWORD(v47) = v5;
    v48 = v6;
    v49 = v8;
    v50 = v7;
    v51 = v10;
    v52 = v42;
    v53 = v12;
    v54 = v11;
    v55 = v41;
    v56 = v40;
    v57 = v39;
    v58 = v38;
    v59 = v37;
    v60 = v36;
    v61 = v35;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v30 = DefaultLayoutViewResponder.init(inputs:)(&v46);
    LODWORD(v46) = v34;
    v47 = *(double *)&v30;
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for [ViewResponder], (uint64_t (*)(uint64_t))type metadata accessor for ViewResponder, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1250]);
    lazy protocol witness table accessor for type HitTestBindingFilter and conformance HitTestBindingFilter();
    v31 = Attribute.init<A>(body:value:flags:update:)();
    swift_release();
    LOBYTE(v46) = 0;
    PreferencesOutputs.subscript.setter(v31, v28, (uint64_t)&protocol witness table for _AnyPreferenceKey<A>, v32);
  }
LABEL_7:
  *a4 = v44;
  result = v45;
  *((double *)a4 + 1) = v45;
  return result;
}

id HitTestBindingResponder.__allocating_init(inputs:)(uint64_t a1)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  int v5;
  __int128 v6;
  id v7;
  uint64_t v9;
  int v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  int v16;

  v2 = swift_allocObject();
  v3 = *(_DWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  v5 = *(_DWORD *)(a1 + 80);
  v9 = *(_QWORD *)a1;
  v10 = v3;
  v11 = v4;
  v6 = *(_OWORD *)(a1 + 40);
  v12 = *(_OWORD *)(a1 + 24);
  v13 = v6;
  v14 = *(_OWORD *)(a1 + 56);
  v15 = *(_QWORD *)(a1 + 72);
  v16 = v5;
  v7 = specialized DefaultLayoutViewResponder.init(inputs:)(&v9, v2);
  swift_release();
  return v7;
}

uint64_t HitTestBindingFilter.updateValue()()
{
  uint64_t v0;
  uint64_t v1;
  int64_t *Value;
  char v3;
  int64_t v4;
  uint64_t result;
  uint64_t v6;

  v1 = *(_QWORD *)(v0 + 8);
  type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for [ViewResponder], (uint64_t (*)(uint64_t))type metadata accessor for ViewResponder, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1250]);
  Value = (int64_t *)AGGraphGetValue();
  if ((v3 & 1) != 0)
  {
    v4 = *Value;
    swift_bridgeObjectRetain_n();
    MultiViewResponder.children.setter(v4);
    swift_bridgeObjectRelease();
  }
  result = AGGraphGetOutputValue();
  if (!result)
  {
    type metadata accessor for _ContiguousArrayStorage<Text.Effect.Drawable.Fragment>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    v6 = swift_allocObject();
    *(_OWORD *)(v6 + 16) = xmmword_235283250;
    *(_QWORD *)(v6 + 32) = v1;
    specialized Array._endMutation()();
    swift_retain();
    AGGraphSetOutputValue();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t HitTestBindingResponder.bindEvent(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE v14[40];
  uint64_t v15[2];
  uint64_t v16;
  double v17;
  double v18;
  double v19;

  outlined init with copy of AnyTrackedValue(a1, (uint64_t)v14);
  HitTestableEvent.init(_:)((uint64_t)v14, (uint64_t)v15);
  v3 = v16;
  if (v16 == 1
    || (v5 = v15[0],
        v4 = v15[1],
        v15[0] = 0,
        v6 = ViewResponder.hitTest(globalPoint:radius:options:)(v15, v17, v18, v19),
        outlined consume of HitTestableEvent?(v5, v4, v3),
        !v6))
  {
    swift_beginAccess();
    v7 = *(_QWORD *)(v1 + 40);
    if (v7 >> 62)
      goto LABEL_17;
    v8 = *(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    for (; v8; v8 = _CocoaArrayWrapper.endIndex.getter())
    {
      v9 = 4;
      while (1)
      {
        v10 = v9 - 4;
        if ((v7 & 0xC000000000000001) == 0)
          break;
        v11 = MEMORY[0x23B7C6D9C](v9 - 4, v7);
        v12 = v9 - 3;
        if (__OFADD__(v10, 1))
          goto LABEL_16;
LABEL_11:
        v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 96))(a1);
        swift_release();
        if (v6)
          goto LABEL_14;
        ++v9;
        if (v12 == v8)
          goto LABEL_13;
      }
      v11 = *(_QWORD *)(v7 + 8 * v9);
      swift_retain();
      v12 = v9 - 3;
      if (!__OFADD__(v10, 1))
        goto LABEL_11;
LABEL_16:
      __break(1u);
LABEL_17:
      swift_bridgeObjectRetain();
    }
LABEL_13:
    v6 = 0;
LABEL_14:
    swift_bridgeObjectRelease();
  }
  return v6;
}

uint64_t HitTestBindingResponder.__allocating_init(inputs:viewSubgraph:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  int v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v11;
  int v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  int v18;

  v4 = swift_allocObject();
  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(_QWORD *)(a1 + 16);
  v7 = *(_DWORD *)(a1 + 80);
  v11 = *(_QWORD *)a1;
  v12 = v5;
  v13 = v6;
  v8 = *(_OWORD *)(a1 + 40);
  v14 = *(_OWORD *)(a1 + 24);
  v15 = v8;
  v16 = *(_OWORD *)(a1 + 56);
  v17 = *(_QWORD *)(a1 + 72);
  v18 = v7;
  v9 = specialized DefaultLayoutViewResponder.init(inputs:viewSubgraph:)(&v11, a2, v4);
  swift_release();
  return v9;
}

uint64_t HitTestBindingResponder.__deallocating_deinit()
{
  DefaultLayoutViewResponder.deinit();
  return swift_deallocClassInstance();
}

uint64_t static ViewResponder.hitTestKey.getter()
{
  return static ViewResponder.hitTestKey;
}

double static ViewResponder.minOpacityForHitTest.getter()
{
  return 0.001;
}

uint64_t ViewResponder.singlePointHitTest(globalPoint:cacheKey:options:)(unint64_t a1, uint64_t *a2, double a3, double a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  uint64_t (*v17)(uint64_t);
  double v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  double v23;
  uint64_t v24;
  double v25;
  char v26;
  uint64_t v27;
  uint64_t v28;

  v5 = v4;
  v9 = *a2;
  if ((*(double (**)(void))(*(_QWORD *)v4 + 152))() < 0.001)
    return 0;
  type metadata accessor for [(_:)](0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<CGPoint>, (uint64_t (*)(uint64_t))type metadata accessor for CGPoint, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
  v11 = swift_allocObject();
  *(_OWORD *)(v11 + 16) = xmmword_23527E860;
  *(double *)(v11 + 32) = a3;
  *(double *)(v11 + 40) = a4;
  v27 = v9;
  v12 = HIDWORD(a1) & 1;
  v13 = a1;
  (*(void (**)(uint64_t *, uint64_t, unint64_t, uint64_t *))(*(_QWORD *)v4 + 168))(&v28, v11, a1 | (unint64_t)(v12 << 32), &v27);
  v14 = swift_bridgeObjectRelease();
  v10 = 0;
  if ((v28 & 1) == 0)
    return v10;
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 192))(v14);
  if ((result & 0x8000000000000000) == 0)
  {
    v10 = 0;
    v16 = result;
    if (result)
    {
      v17 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 200);
      v18 = 0.0;
      v19 = v13 | (v12 << 32);
      v20 = result;
      while (v16 >= v20)
      {
        v21 = v17(--v20);
        if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v21 + 160))(v21) & 1) != 0)
        {
          v28 = v9;
          v22 = ViewResponder.singlePointHitTest(globalPoint:cacheKey:options:)(v19, &v28, a3, a4);
          if (v22)
          {
            v24 = v22;
            v25 = v23;
            if (v18 >= v23)
            {
              swift_release();
            }
            else if (v10)
            {
              swift_release();
              if (v24 != v10)
              {
                v18 = v25;
                v10 = v24;
              }
            }
            else
            {
              v18 = v23;
              v10 = v22;
            }
          }
        }
        swift_release();
        if (!v20)
          goto LABEL_20;
      }
      __break(1u);
LABEL_20:
      if (v10 && v18 > 0.0)
        return v10;
    }
    v26 = (*(uint64_t (**)(void))(*(_QWORD *)v4 + 160))();
    swift_release();
    if ((v26 & 1) != 0)
    {
      swift_retain();
      return v5;
    }
    return 0;
  }
  __break(1u);
  return result;
}

void hitPoints(point:radius:)(double a1, double a2, double a3)
{
  double v3;
  double v4;
  double v5;
  double v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  _QWORD *v11;
  float64x2_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __double2 v17;
  float64x2_t v18;
  uint64_t v19;
  float64x2_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  float64x2_t v25;
  float64x2_t v26;
  _QWORD *v27;
  _QWORD *v28;
  float64x2_t v29;
  float64x2_t v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  float64x2_t v36;
  __int128 v38;

  v3 = fabs(a3);
  if (v3 > 1.0)
    v4 = v3;
  else
    v4 = 1.0;
  if (v4 <= 60.0)
  {
    v5 = fmax(v4 / 6.0, 4.0);
  }
  else
  {
    v5 = 10.0;
    v4 = 60.0;
  }
  v6 = ceil(v4 / v5);
  if ((~*(_QWORD *)&v6 & 0x7FF0000000000000) == 0)
  {
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  if (v6 <= -9.22337204e18)
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  if (v6 >= 9.22337204e18)
  {
LABEL_29:
    __break(1u);
LABEL_30:
    __break(1u);
    return;
  }
  if ((uint64_t)v6 >= 6)
    v7 = 6;
  else
    v7 = (uint64_t)v6;
  type metadata accessor for [(_:)](0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<CGPoint>, (uint64_t (*)(uint64_t))type metadata accessor for CGPoint, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
  v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16) = xmmword_23527E860;
  *(double *)(v8 + 32) = a1;
  *(double *)(v8 + 40) = a2;
  type metadata accessor for _ContiguousArrayStorage<Text.Effect.Drawable.Fragment>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<Double>);
  v9 = swift_allocObject();
  *(_OWORD *)(v9 + 16) = xmmword_23527E860;
  *(_QWORD *)(v9 + 32) = 0x4038000000000000;
  if (v7 < 1)
    goto LABEL_30;
  v11 = (_QWORD *)v9;
  if (v7 != 1)
  {
    v12.f64[0] = a1;
    v12.f64[1] = a2;
    v13 = 1;
    v14 = 4;
    v36 = v12;
    *(double *)&v10 = v5;
    while (v13 != v7)
    {
      ++v13;
      v38 = v10;
      v17 = __sincos_stret(6.28318531 / (double)v14);
      *(double *)&v16 = v17.__cosval;
      *(double *)&v15 = v17.__sinval;
      v18 = v36;
      v10 = v38;
      v19 = v14;
      v20 = (float64x2_t)xmmword_235281560;
      do
      {
        v22 = *(_QWORD *)(v8 + 16);
        v21 = *(_QWORD *)(v8 + 24);
        if (v22 >= v21 >> 1)
        {
          v31 = v16;
          v33 = v15;
          v29 = v20;
          v27 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v21 > 1), v22 + 1, 1, (_QWORD *)v8);
          v20 = v29;
          v16 = v31;
          v15 = v33;
          v18 = v36;
          v10 = v38;
          v8 = (uint64_t)v27;
        }
        *(_QWORD *)(v8 + 16) = v22 + 1;
        *(float64x2_t *)(v8 + 16 * v22 + 32) = vaddq_f64(vmulq_n_f64(v20, *(double *)&v10), v18);
        v24 = v11[2];
        v23 = v11[3];
        if (v24 >= v23 >> 1)
        {
          v32 = v16;
          v34 = v15;
          v30 = v20;
          v28 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v23 > 1), v24 + 1, 1, v11);
          v20 = v30;
          v16 = v32;
          v15 = v34;
          v18 = v36;
          v10 = v38;
          v11 = v28;
        }
        v11[2] = v24 + 1;
        *(double *)&v11[v24 + 4] = 24.0 / (double)v14;
        v25 = vmulq_n_f64(v20, *(double *)&v16);
        v26 = vmulq_n_f64((float64x2_t)vextq_s8((int8x16_t)v20, (int8x16_t)v20, 8uLL), *(double *)&v15);
        *(_QWORD *)&v20.f64[0] = *(_OWORD *)&vsubq_f64(v25, v26);
        v20.f64[1] = vaddq_f64(v25, v26).f64[1];
        --v19;
      }
      while (v19);
      v14 += 4;
      *(double *)&v10 = v5 + *(double *)&v10;
      if (v13 == v7)
        return;
    }
    __break(1u);
    goto LABEL_27;
  }
}

void ViewResponder.hitTest(globalPoints:weights:mask:cacheKey:options:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, unint64_t a4@<X3>, uint64_t *a5@<X4>, double *a6@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v11;
  uint64_t v12;
  double v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  double v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  double v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t (*v29)(uint64_t);
  double v30;
  uint64_t v31;
  double v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  double v37;
  double *v38;
  char v39;
  double *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v44;
  uint64_t v45;
  double v46;
  uint64_t v47;
  uint64_t v48;

  v7 = v6;
  v11 = *a3;
  v12 = *a5;
  v13 = (*(double (**)(void))(*(_QWORD *)v6 + 152))();
  if (v13 < 0.001)
    goto LABEL_19;
  v48 = v12;
  v14 = HIDWORD(a4) & 1;
  v15 = a4;
  v16 = (*(uint64_t (**)(uint64_t *, uint64_t, unint64_t, uint64_t *))(*(_QWORD *)v6 + 168))(&v45, a1, a4 | (unint64_t)(v14 << 32), &v48);
  v18 = a1;
  v19 = *(_QWORD *)(a1 + 16);
  if (v19)
  {
    v20 = 0;
    v21 = 0.0;
    v22 = v11;
    v41 = v11;
    while (v20 <= 0x3F)
    {
      v23 = 1 << v20;
      if (((1 << v20) & v11) != 0 || ((1 << v20) & v45) == 0)
        goto LABEL_5;
      if (v20 >= *(_QWORD *)(a2 + 16))
      {
        __break(1u);
        goto LABEL_52;
      }
      v21 = v21 + *(double *)(a2 + 32 + 8 * v20);
      if (v13 <= 0.5)
        v25 = v41 & ~v23;
      else
        v25 = v41 | v23;
      v41 = v25;
LABEL_6:
      if (v19 == ++v20)
        goto LABEL_18;
    }
    v23 = 0;
LABEL_5:
    v22 |= v23;
    goto LABEL_6;
  }
  v21 = 0.0;
  v22 = v11;
  v41 = v11;
LABEL_18:
  v26 = v17 * (v13 * v21);
  if (v26 == 0.0)
  {
LABEL_19:
    *a6 = 0.0;
    a6[1] = 0.0;
    a6[2] = 0.0;
    return;
  }
  v40 = a6;
  v27 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 192))(v16);
  if (v27 < 0)
  {
LABEL_52:
    __break(1u);
    return;
  }
  v28 = v27;
  if (!v27)
    goto LABEL_46;
  v42 = 0;
  v29 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 200);
  v30 = 0.0;
  v31 = v15 | (v14 << 32);
  v32 = 0.0;
  v33 = v27;
  while (v28 >= v33)
  {
    v34 = v29(--v33);
    if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v34 + 160))(v34) & 1) != 0)
    {
      v48 = v22;
      v35 = v12;
      v44 = v12;
      ViewResponder.hitTest(globalPoints:weights:mask:cacheKey:options:)(&v45, v18, a2, &v48, v31, &v44);
      v36 = v45;
      if (v45)
      {
        v22 = v47;
        v37 = v46;
        if (v30 < v46)
        {
          if (v32 >= v46)
          {
            swift_release();
            swift_release();
            v30 = v37;
          }
          else
          {
            swift_release();
            if (v42)
            {
              swift_release();
              if (v36 != v42)
                v30 = v32;
            }
            else
            {
              v30 = v32;
            }
            v32 = v37;
            v42 = v36;
          }
          goto LABEL_36;
        }
        swift_release();
      }
      swift_release();
LABEL_36:
      v12 = v35;
      if (!v33)
        goto LABEL_42;
    }
    else
    {
      swift_release();
      if (!v33)
        goto LABEL_42;
    }
  }
  __break(1u);
LABEL_42:
  if (!v42)
  {
LABEL_46:
    v38 = v40;
    goto LABEL_48;
  }
  v38 = v40;
  if (v30 * 1.2 >= 8.0)
  {
    if (v30 * 1.2 > v32)
      goto LABEL_48;
LABEL_45:
    *(_QWORD *)v40 = v42;
    v40[1] = v26;
    *((_QWORD *)v40 + 2) = v41;
  }
  else
  {
    if (v32 >= 8.0)
      goto LABEL_45;
LABEL_48:
    v39 = (*(uint64_t (**)(void))(*(_QWORD *)v7 + 160))();
    swift_release();
    if ((v39 & 1) != 0)
    {
      *(_QWORD *)v38 = v7;
      v38[1] = v26;
      *((_QWORD *)v38 + 2) = v41;
      swift_retain();
    }
    else
    {
      *v38 = 0.0;
      v38[1] = 0.0;
      v38[2] = 0.0;
    }
  }
}

void type metadata accessor for _AnyPreferenceKey<ViewRespondersKey>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  uint64_t v5;

  if (!lazy cache variable for type metadata for _AnyPreferenceKey<ViewRespondersKey>)
  {
    v4 = type metadata accessor for _AnyPreferenceKey(0, (uint64_t)&type metadata for ViewRespondersKey, (uint64_t)&protocol witness table for ViewRespondersKey, a4);
    if (!v5)
      atomic_store(v4, (unint64_t *)&lazy cache variable for type metadata for _AnyPreferenceKey<ViewRespondersKey>);
  }
}

uint64_t type metadata accessor for HitTestBindingResponder()
{
  return objc_opt_self();
}

unint64_t lazy protocol witness table accessor for type HitTestBindingFilter and conformance HitTestBindingFilter()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type HitTestBindingFilter and conformance HitTestBindingFilter;
  if (!lazy protocol witness table cache variable for type HitTestBindingFilter and conformance HitTestBindingFilter)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for HitTestBindingFilter, &unk_25062F9F8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HitTestBindingFilter and conformance HitTestBindingFilter);
  }
  return result;
}

ValueMetadata *type metadata accessor for HitTestBindingModifier()
{
  return &type metadata for HitTestBindingModifier;
}

void *type metadata accessor for HitTestBindingFilter()
{
  return &unk_25062F9F8;
}

id DefaultLayoutViewResponder.init(inputs:)(uint64_t *a1)
{
  uint64_t v1;
  id v2;

  v2 = specialized DefaultLayoutViewResponder.init(inputs:)(a1, v1);
  swift_release();
  return v2;
}

uint64_t DefaultLayoutViewResponder.deinit()
{
  uint64_t v0;

  outlined destroy of weak GestureGraphDelegate?(v0 + 16);
  swift_weakDestroy();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();

  outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed @escaping @callee_guaranteed (@unowned Bool) -> ()) -> ())?(*(_QWORD *)(v0 + 192));
  return v0;
}

void DefaultLayoutViewResponder.__allocating_init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

void DefaultLayoutViewResponder.makeGesture(inputs:)(__int128 *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  id v12;
  void *v13;
  char v14;
  id v15;
  uint64_t v16;
  void *v17;
  id v18;
  uint64_t v19;
  void *v20;
  void *v21;
  id v22;
  id v23;
  uint64_t v24;
  _DWORD v25[2];
  uint64_t v26;
  int v27;
  __int128 v28[6];
  _BYTE v29[28];

  v3 = v2;
  v5 = a1[5];
  v28[4] = a1[4];
  v28[5] = v5;
  *(_OWORD *)v29 = a1[6];
  *(_OWORD *)&v29[12] = *(__int128 *)((char *)a1 + 108);
  v6 = a1[1];
  v28[0] = *a1;
  v28[1] = v6;
  v7 = a1[3];
  v28[2] = a1[2];
  v28[3] = v7;
  specialized _GestureInputs.makeDefaultOutputs<A>()((uint64_t)v25);
  v8 = v25[0];
  v9 = v25[1];
  v10 = v26;
  v11 = v27;
  if (!AGSubgraphIsValid())
    goto LABEL_11;
  v24 = v8;
  v12 = (id)AGSubgraphGetCurrent();
  if (!v12)
  {
    __break(1u);
    goto LABEL_13;
  }
  v13 = v12;
  v14 = v29[24];
  v15 = (id)AGSubgraphGetGraph();
  v16 = AGSubgraphCreate();

  v17 = *(void **)(v3 + 176);
  *(_QWORD *)(v3 + 176) = v16;

  if (!*(_QWORD *)(v3 + 176))
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  AGSubgraphAddChild2();
  if (!*(_QWORD *)(v3 + 176))
  {
LABEL_14:
    __break(1u);
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  AGSubgraphAddChild();
  if ((v14 & 0x10) == 0)
    goto LABEL_9;
  v18 = (id)AGSubgraphGetGraph();
  v19 = AGSubgraphCreate();

  v20 = *(void **)(v3 + 184);
  *(_QWORD *)(v3 + 184) = v19;

  if (!*(_QWORD *)(v3 + 176))
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  if (*(_QWORD *)(v3 + 184))
  {
    AGSubgraphAddChild2();
LABEL_9:
    v21 = *(void **)(v3 + 176);
    if (v21)
    {
      v22 = v21;
      AGGraphClearUpdate();
      v23 = (id)AGSubgraphGetCurrent();
      AGSubgraphSetCurrent();
      LODWORD(v8) = v24;
      closure #1 in DefaultLayoutViewResponder.makeGesture(inputs:)(v3, v28, v24 | (v9 << 32), v10);
      AGSubgraphSetCurrent();

      AGGraphSetUpdate();
LABEL_11:
      *(_DWORD *)a2 = v8;
      *(_DWORD *)(a2 + 4) = v9;
      *(_QWORD *)(a2 + 8) = v10;
      *(_DWORD *)(a2 + 16) = v11;
      return;
    }
    goto LABEL_15;
  }
LABEL_17:
  __break(1u);
}

Swift::Void __swiftcall DefaultLayoutViewResponder.resetGesture()()
{
  _QWORD *v0;
  uint64_t v1;
  void *v2;
  void *v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t i;
  uint64_t v7;

  v1 = v0[24];
  v0[24] = 0;
  v0[25] = 0;
  outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed @escaping @callee_guaranteed (@unowned Bool) -> ()) -> ())?(v1);
  v2 = (void *)v0[22];
  v0[22] = 0;

  v3 = (void *)v0[23];
  v0[23] = 0;

  swift_beginAccess();
  v4 = v0[5];
  if (!(v4 >> 62))
  {
    v5 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v5)
      goto LABEL_3;
LABEL_10:
    swift_bridgeObjectRelease();
    return;
  }
  swift_bridgeObjectRetain();
  v5 = _CocoaArrayWrapper.endIndex.getter();
  if (!v5)
    goto LABEL_10;
LABEL_3:
  if (v5 >= 1)
  {
    for (i = 0; i != v5; ++i)
    {
      if ((v4 & 0xC000000000000001) != 0)
      {
        v7 = MEMORY[0x23B7C6D9C](i, v4);
      }
      else
      {
        v7 = *(_QWORD *)(v4 + 8 * i + 32);
        swift_retain();
      }
      (*(void (**)(void))(*(_QWORD *)v7 + 120))();
      swift_release();
    }
    goto LABEL_10;
  }
  __break(1u);
}

Swift::Void __swiftcall DefaultLayoutViewResponder.childrenDidChange()()
{
  uint64_t v0;
  void (*v1)(uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t ObjectType;
  _BYTE v8[8];
  uint64_t v9;

  v1 = *(void (**)(uint64_t))(v0 + 192);
  if (v1)
  {
    v2 = swift_retain();
    v1(v2);
    outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed @escaping @callee_guaranteed (@unowned Bool) -> ()) -> ())?((uint64_t)v1);
  }
  swift_beginAccess();
  v3 = *(_QWORD *)(v0 + 72);
  *(_QWORD *)(v0 + 72) = MEMORY[0x24BEE4AF8];
  v4 = *(_QWORD *)(v3 + 16);
  if (v4)
  {
    v5 = v3 + 32;
    do
    {
      outlined init with copy of ContentPathObservers.Observer(v5, (uint64_t)v8);
      if (MEMORY[0x23B7C9E44](v8))
      {
        v6 = v9;
        ObjectType = swift_getObjectType();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 8))(v0, ObjectType, v6);
        swift_unknownObjectRelease();
      }
      outlined destroy of ContentPathObservers.Observer((uint64_t)v8);
      v5 += 16;
      --v4;
    }
    while (v4);
  }
  swift_bridgeObjectRelease();
  swift_endAccess();
}

uint64_t DefaultLayoutResponderFilter.children.getter()
{
  type metadata accessor for [ViewResponder](0);
  AGGraphGetValue();
  return swift_bridgeObjectRetain();
}

uint64_t key path getter for DefaultLayoutResponderFilter.children : DefaultLayoutResponderFilter@<X0>(_QWORD *a1@<X8>)
{
  type metadata accessor for [ViewResponder](0);
  *a1 = *(_QWORD *)AGGraphGetValue();
  return swift_bridgeObjectRetain();
}

uint64_t DefaultLayoutResponderFilter.children.setter()
{
  type metadata accessor for [ViewResponder](0);
  AGGraphSetValue();
  return swift_bridgeObjectRelease();
}

uint64_t (*DefaultLayoutResponderFilter.children.modify(uint64_t a1))(_QWORD *a1)
{
  _DWORD *v1;
  uint64_t v3;

  *(_DWORD *)(a1 + 24) = *v1;
  type metadata accessor for [ViewResponder](0);
  *(_QWORD *)(a1 + 16) = v3;
  *(_QWORD *)a1 = *(_QWORD *)AGGraphGetValue();
  swift_bridgeObjectRetain();
  return DefaultLayoutResponderFilter.children.modify;
}

uint64_t DefaultLayoutResponderFilter.children.modify(_QWORD *a1)
{
  a1[1] = *a1;
  AGGraphSetValue();
  return swift_bridgeObjectRelease();
}

uint64_t DefaultLayoutResponderFilter.$children.getter()
{
  unsigned int *v0;

  return *v0;
}

uint64_t DefaultLayoutResponderFilter.$children.setter(uint64_t result)
{
  _DWORD *v1;

  *v1 = result;
  return result;
}

uint64_t (*DefaultLayoutResponderFilter.$children.modify(uint64_t a1))(uint64_t result)
{
  _DWORD *v1;

  *(_QWORD *)a1 = v1;
  *(_DWORD *)(a1 + 8) = *v1;
  return DefaultLayoutResponderFilter.$children.modify;
}

uint64_t DefaultLayoutResponderFilter.$children.modify(uint64_t result)
{
  **(_DWORD **)result = *(_DWORD *)(result + 8);
  return result;
}

uint64_t DefaultLayoutResponderFilter.responder.getter()
{
  return swift_retain();
}

uint64_t DefaultLayoutResponderFilter.init(children:responder:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(_DWORD *)a3 = result;
  *(_QWORD *)(a3 + 8) = a2;
  return result;
}

Swift::Void __swiftcall DefaultLayoutResponderFilter.updateValue()()
{
  uint64_t v0;
  uint64_t v1;
  int64_t *Value;
  char v3;
  int64_t v4;
  uint64_t v5;

  v1 = *(_QWORD *)(v0 + 8);
  type metadata accessor for [ViewResponder](0);
  Value = (int64_t *)AGGraphGetValue();
  if ((v3 & 1) != 0)
  {
    v4 = *Value;
    swift_bridgeObjectRetain_n();
    MultiViewResponder.children.setter(v4);
    swift_bridgeObjectRelease();
  }
  if (!AGGraphGetOutputValue())
  {
    type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>, MEMORY[0x24BEE4AD0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
    v5 = swift_allocObject();
    *(_OWORD *)(v5 + 16) = xmmword_235283250;
    *(_QWORD *)(v5 + 32) = v1;
    specialized Array._endMutation()();
    swift_retain();
    AGGraphSetOutputValue();
    swift_bridgeObjectRelease();
  }
}

uint64_t DefaultLayoutViewResponder.inputs.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;

  v2 = *(_DWORD *)(v1 + 88);
  v3 = *(_QWORD *)(v1 + 96);
  v4 = *(_QWORD *)(v1 + 120);
  v5 = *(_QWORD *)(v1 + 128);
  v6 = *(_DWORD *)(v1 + 160);
  *(_QWORD *)a1 = *(_QWORD *)(v1 + 80);
  *(_DWORD *)(a1 + 8) = v2;
  *(_QWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(v1 + 104);
  *(_QWORD *)(a1 + 40) = v4;
  *(_QWORD *)(a1 + 48) = v5;
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(v1 + 136);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(v1 + 152);
  *(_DWORD *)(a1 + 80) = v6;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

id DefaultLayoutViewResponder.viewSubgraph.getter()
{
  uint64_t v0;

  return *(id *)(v0 + 168);
}

id DefaultLayoutViewResponder.__allocating_init(inputs:)(uint64_t *a1)
{
  uint64_t v2;
  id v3;

  v2 = swift_allocObject();
  v3 = specialized DefaultLayoutViewResponder.init(inputs:)(a1, v2);
  swift_release();
  return v3;
}

uint64_t DefaultLayoutViewResponder.__allocating_init(inputs:viewSubgraph:)(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = swift_allocObject();
  v5 = specialized DefaultLayoutViewResponder.init(inputs:viewSubgraph:)(a1, a2, v4);
  swift_release();
  return v5;
}

uint64_t DefaultLayoutViewResponder.init(inputs:viewSubgraph:)(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v3 = specialized DefaultLayoutViewResponder.init(inputs:viewSubgraph:)(a1, a2, v2);
  swift_release();
  return v3;
}

uint64_t specialized _GestureInputs.makeDefaultOutputs<A>()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  int v3;
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  v3 = *(_DWORD *)(v1 + 120);
  v12 = 0;
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for GesturePhase<()>, MEMORY[0x24BEE4AE0] + 8, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for GesturePhase);
  type metadata accessor for DefaultRule<GesturePhase<()>>(0);
  lazy protocol witness table accessor for type DefaultRule<GestureDebug.Data> and conformance DefaultRule<A>(&lazy protocol witness table cache variable for type DefaultRule<GesturePhase<()>> and conformance DefaultRule<A>, (uint64_t (*)(uint64_t))type metadata accessor for DefaultRule<GesturePhase<()>>);
  v4 = Attribute.init<A>(body:value:flags:update:)();
  if ((v3 & 8) != 0)
  {
    v12 = 0;
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for DefaultRule<GestureDebug.Data>(0, v6, v7, v8);
    lazy protocol witness table accessor for type DefaultRule<GestureDebug.Data> and conformance DefaultRule<A>((unint64_t *)&lazy protocol witness table cache variable for type DefaultRule<GestureDebug.Data> and conformance DefaultRule<A>, (uint64_t (*)(uint64_t))type metadata accessor for DefaultRule<GestureDebug.Data>);
    v5 = Attribute.init<A>(body:value:flags:update:)();
  }
  else
  {
    v5 = *MEMORY[0x24BE096C0];
  }
  result = PreferencesInputs.makeIndirectOutputs()((uint64_t)&v12);
  v10 = v12;
  v11 = v13;
  *(_DWORD *)a1 = v4;
  *(_DWORD *)(a1 + 4) = v5;
  *(_QWORD *)(a1 + 8) = v10;
  *(_DWORD *)(a1 + 16) = v11;
  return result;
}

uint64_t closure #1 in DefaultLayoutViewResponder.makeGesture(inputs:)(uint64_t a1, __int128 *a2, unint64_t a3, uint64_t a4)
{
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  void *v20;
  id v21;
  void *v22;
  id v23;
  unint64_t v25[2];
  unsigned int v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  _OWORD v33[2];
  __int128 v34;
  _BYTE v35[32];
  _BYTE v36[32];
  __int128 v37;
  _OWORD v38[2];
  uint64_t v39;

  v39 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)&v34 = a1;
  type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for External<DefaultLayoutGesture>, (uint64_t)&type metadata for DefaultLayoutGesture, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BE09670]);
  lazy protocol witness table accessor for type External<DefaultLayoutGesture> and conformance External<A>();
  swift_retain();
  v7 = Attribute.init<A>(body:value:flags:update:)();
  swift_release();
  v8 = AGCreateWeakAttribute();
  v9 = swift_allocObject();
  *(_QWORD *)(v9 + 16) = v8;
  v10 = *(_QWORD *)(a1 + 192);
  *(_QWORD *)(a1 + 192) = partial apply for closure #1 in closure #1 in DefaultLayoutViewResponder.makeGesture(inputs:);
  *(_QWORD *)(a1 + 200) = v9;
  result = outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed @escaping @callee_guaranteed (@unowned Bool) -> ()) -> ())?(v10);
  v12 = a2[5];
  v31 = a2[4];
  v32 = v12;
  v33[0] = a2[6];
  *(_OWORD *)((char *)v33 + 12) = *(__int128 *)((char *)a2 + 108);
  v13 = a2[1];
  v27 = *a2;
  v28 = v13;
  v14 = a2[3];
  v29 = a2[2];
  v30 = v14;
  v15 = *(_DWORD *)(a1 + 88);
  v16 = *(_QWORD *)(a1 + 96);
  v17 = *(_QWORD *)(a1 + 120);
  v18 = *(_QWORD *)(a1 + 128);
  v19 = *(_DWORD *)(a1 + 160);
  *(_QWORD *)&v34 = *(_QWORD *)(a1 + 80);
  DWORD2(v34) = v15;
  *(_OWORD *)&v35[8] = *(_OWORD *)(a1 + 104);
  *(_QWORD *)v35 = v16;
  *(_QWORD *)&v35[24] = v17;
  *(_QWORD *)v36 = v18;
  *(_OWORD *)&v36[8] = *(_OWORD *)(a1 + 136);
  *(_QWORD *)&v36[24] = *(_QWORD *)(a1 + 152);
  LODWORD(v37) = v19;
  v20 = *(void **)(a1 + 184);
  if (v20)
  {
    v21 = *(id *)(a1 + 184);
LABEL_5:
    outlined retain of _GestureInputs((uint64_t)a2);
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v23 = v20;
    _GestureInputs.mergeViewInputs(_:viewSubgraph:)((uint64_t *)&v34, v21);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();

    *(_OWORD *)&v36[16] = v31;
    v37 = v32;
    v38[0] = v33[0];
    *(_OWORD *)((char *)v38 + 12) = *(_OWORD *)((char *)v33 + 12);
    v34 = v27;
    *(_OWORD *)v35 = v28;
    *(_OWORD *)&v35[16] = v29;
    *(_OWORD *)v36 = v30;
    outlined retain of _GestureInputs((uint64_t)&v34);
    specialized static LayoutGesture._makeGesture(gesture:inputs:)(v7, (uint64_t)&v34, (uint64_t)v25);
    outlined release of _GestureInputs((uint64_t)&v34);
    specialized _GestureOutputs.overrideDefaultValues(_:)(v25[0], v25[1], v26, a3, a4);
    outlined release of _GestureInputs((uint64_t)&v34);
    return swift_bridgeObjectRelease();
  }
  v22 = *(void **)(a1 + 176);
  if (v22)
  {
    v21 = v22;
    v20 = 0;
    goto LABEL_5;
  }
  __break(1u);
  return result;
}

uint64_t closure #1 in closure #1 in DefaultLayoutViewResponder.makeGesture(inputs:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  _QWORD *v8;

  v2 = swift_allocObject();
  *(_QWORD *)(v2 + 16) = a1;
  specialized static Update.begin()();
  v3 = swift_allocObject();
  *(_QWORD *)(v3 + 16) = partial apply for closure #4 in MatchedGeometryScope.frame<A>(index:for:view:);
  *(_QWORD *)(v3 + 24) = v2;
  v4 = one-time initialization token for actions;
  swift_retain();
  if (v4 != -1)
    swift_once();
  v5 = static Update.actions;
  swift_bridgeObjectRetain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5[2] + 1, 1, v5);
  v7 = v5[2];
  v6 = v5[3];
  if (v7 >= v6 >> 1)
    v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v6 > 1), v7 + 1, 1, v5);
  v5[2] = v7 + 1;
  v8 = &v5[2 * v7];
  v8[4] = partial apply for thunk for @escaping @callee_guaranteed () -> ();
  v8[5] = v3;
  static Update.actions = v5;
  swift_bridgeObjectRelease();
  static Update.end()();
  return swift_release();
}

void DefaultLayoutViewResponder.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

uint64_t DefaultLayoutViewResponder.__ivar_destroyer()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();

  return outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed @escaping @callee_guaranteed (@unowned Bool) -> ()) -> ())?(*(_QWORD *)(v0 + 192));
}

uint64_t DefaultLayoutViewResponder.__deallocating_deinit()
{
  DefaultLayoutViewResponder.deinit();
  return swift_deallocClassInstance();
}

uint64_t protocol witness for AnyGestureResponder.inputs.getter in conformance GestureResponder<A>@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;

  v2 = *(_DWORD *)(v1 + 88);
  v3 = *(_QWORD *)(v1 + 96);
  v4 = *(_QWORD *)(v1 + 120);
  v5 = *(_QWORD *)(v1 + 128);
  v6 = *(_DWORD *)(v1 + 160);
  *(_QWORD *)a1 = *(_QWORD *)(v1 + 80);
  *(_DWORD *)(a1 + 8) = v2;
  *(_QWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(v1 + 104);
  *(_QWORD *)(a1 + 40) = v4;
  *(_QWORD *)(a1 + 48) = v5;
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(v1 + 136);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(v1 + 152);
  *(_DWORD *)(a1 + 80) = v6;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

id protocol witness for AnyGestureContainingResponder.viewSubgraph.getter in conformance GestureResponder<A>()
{
  uint64_t v0;

  return *(id *)(v0 + 168);
}

id specialized DefaultLayoutViewResponder.init(inputs:)(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  int v6;
  id result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *a1;
  v4 = *((_DWORD *)a1 + 2);
  v5 = a1[2];
  v6 = *((_DWORD *)a1 + 20);
  *(_OWORD *)(a2 + 176) = 0u;
  *(_OWORD *)(a2 + 192) = 0u;
  *(_QWORD *)(a2 + 80) = v3;
  *(_DWORD *)(a2 + 88) = v4;
  *(_QWORD *)(a2 + 96) = v5;
  *(_OWORD *)(a2 + 104) = *(_OWORD *)(a1 + 3);
  *(_OWORD *)(a2 + 120) = *(_OWORD *)(a1 + 5);
  *(_OWORD *)(a2 + 136) = *(_OWORD *)(a1 + 7);
  *(_QWORD *)(a2 + 152) = a1[9];
  *(_DWORD *)(a2 + 160) = v6;
  result = (id)AGSubgraphGetCurrent();
  if (result)
  {
    *(_QWORD *)(a2 + 168) = result;
    v8 = MEMORY[0x24BEE4AF8];
    *(_QWORD *)(a2 + 40) = MEMORY[0x24BEE4AF8];
    *(_DWORD *)(a2 + 48) = 0;
    *(_BYTE *)(a2 + 52) = 1;
    *(_QWORD *)(a2 + 56) = 0;
    *(_QWORD *)(a2 + 64) = 0;
    *(_QWORD *)(a2 + 72) = v8;
    *(_QWORD *)(a2 + 24) = 0;
    swift_unknownObjectWeakInit();
    swift_weakInit();
    swift_retain();
    v9 = specialized static ViewGraph.current.getter();
    swift_beginAccess();
    MEMORY[0x23B7C9E44](v9 + 200);
    v10 = *(_QWORD *)(v9 + 208);
    swift_release();
    swift_beginAccess();
    *(_QWORD *)(a2 + 24) = v10;
    swift_unknownObjectWeakAssign();
    swift_unknownObjectRelease();
    return (id)a2;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t specialized DefaultLayoutViewResponder.init(inputs:viewSubgraph:)(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *a1;
  v5 = *((_DWORD *)a1 + 2);
  v6 = a1[2];
  v7 = *((_DWORD *)a1 + 20);
  *(_OWORD *)(a3 + 176) = 0u;
  *(_OWORD *)(a3 + 192) = 0u;
  *(_DWORD *)(a3 + 88) = v5;
  *(_QWORD *)(a3 + 96) = v6;
  *(_OWORD *)(a3 + 104) = *(_OWORD *)(a1 + 3);
  *(_OWORD *)(a3 + 120) = *(_OWORD *)(a1 + 5);
  *(_OWORD *)(a3 + 136) = *(_OWORD *)(a1 + 7);
  *(_QWORD *)(a3 + 152) = a1[9];
  *(_DWORD *)(a3 + 160) = v7;
  *(_QWORD *)(a3 + 168) = a2;
  v8 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(a3 + 40) = MEMORY[0x24BEE4AF8];
  *(_DWORD *)(a3 + 48) = 0;
  *(_BYTE *)(a3 + 52) = 1;
  *(_QWORD *)(a3 + 56) = 0;
  *(_QWORD *)(a3 + 64) = 0;
  *(_QWORD *)(a3 + 72) = v8;
  *(_QWORD *)(a3 + 80) = v4;
  *(_QWORD *)(a3 + 24) = 0;
  swift_unknownObjectWeakInit();
  swift_weakInit();
  swift_retain();
  v9 = specialized static ViewGraph.current.getter();
  swift_beginAccess();
  MEMORY[0x23B7C9E44](v9 + 200);
  v10 = *(_QWORD *)(v9 + 208);
  swift_release();
  swift_beginAccess();
  *(_QWORD *)(a3 + 24) = v10;
  swift_unknownObjectWeakAssign();
  swift_unknownObjectRelease();
  return a3;
}

unint64_t lazy protocol witness table accessor for type DefaultLayoutResponderFilter and conformance DefaultLayoutResponderFilter()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type DefaultLayoutResponderFilter and conformance DefaultLayoutResponderFilter;
  if (!lazy protocol witness table cache variable for type DefaultLayoutResponderFilter and conformance DefaultLayoutResponderFilter)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for DefaultLayoutResponderFilter, &type metadata for DefaultLayoutResponderFilter);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DefaultLayoutResponderFilter and conformance DefaultLayoutResponderFilter);
  }
  return result;
}

uint64_t sub_234D93EE0()
{
  type metadata accessor for [ViewResponder](0);
  return AGGraphSetValue();
}

_DWORD *sub_234D93F50@<X0>(_DWORD *result@<X0>, _DWORD *a2@<X8>)
{
  *a2 = *result;
  return result;
}

_DWORD *sub_234D93F5C(_DWORD *result, _DWORD *a2)
{
  *a2 = *result;
  return result;
}

ValueMetadata *type metadata accessor for DefaultLayoutResponderFilter()
{
  return &type metadata for DefaultLayoutResponderFilter;
}

uint64_t type metadata accessor for DefaultLayoutViewResponder()
{
  return objc_opt_self();
}

uint64_t method lookup function for DefaultLayoutViewResponder()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of DefaultLayoutViewResponder.__allocating_init(inputs:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 352))();
}

uint64_t dispatch thunk of DefaultLayoutViewResponder.__allocating_init(inputs:viewSubgraph:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 360))();
}

unint64_t lazy protocol witness table accessor for type External<DefaultLayoutGesture> and conformance External<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type External<DefaultLayoutGesture> and conformance External<A>;
  if (!lazy protocol witness table cache variable for type External<DefaultLayoutGesture> and conformance External<A>)
  {
    type metadata accessor for MutableBox<CachedEnvironment>(255, &lazy cache variable for type metadata for External<DefaultLayoutGesture>, (uint64_t)&type metadata for DefaultLayoutGesture, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BE09670]);
    result = MEMORY[0x23B7C9C04](MEMORY[0x24BE09678], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type External<DefaultLayoutGesture> and conformance External<A>);
  }
  return result;
}

uint64_t sub_234D94014()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in DefaultLayoutViewResponder.makeGesture(inputs:)()
{
  uint64_t v0;

  return closure #1 in closure #1 in DefaultLayoutViewResponder.makeGesture(inputs:)(*(_QWORD *)(v0 + 16));
}

uint64_t sub_234D9402C()
{
  return swift_deallocObject();
}

uint64_t sub_234D9403C()
{
  swift_release();
  return swift_deallocObject();
}

void type metadata accessor for DefaultRule<GesturePhase<()>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for DefaultRule<GesturePhase<()>>)
  {
    type metadata accessor for MutableBox<CachedEnvironment>(255, (unint64_t *)&lazy cache variable for type metadata for GesturePhase<()>, MEMORY[0x24BEE4AE0] + 8, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for GesturePhase);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type GesturePhase<()> and conformance GesturePhase<A>();
    v6 = type metadata accessor for DefaultRule(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for DefaultRule<GesturePhase<()>>);
  }
}

unint64_t lazy protocol witness table accessor for type GesturePhase<()> and conformance GesturePhase<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type GesturePhase<()> and conformance GesturePhase<A>;
  if (!lazy protocol witness table cache variable for type GesturePhase<()> and conformance GesturePhase<A>)
  {
    type metadata accessor for MutableBox<CachedEnvironment>(255, (unint64_t *)&lazy cache variable for type metadata for GesturePhase<()>, MEMORY[0x24BEE4AE0] + 8, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for GesturePhase);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for GesturePhase<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GesturePhase<()> and conformance GesturePhase<A>);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type DefaultRule<GestureDebug.Data> and conformance DefaultRule<A>(unint64_t *a1, uint64_t (*a2)(uint64_t))
{
  uint64_t result;
  uint64_t v4;

  result = *a1;
  if (!result)
  {
    v4 = a2(255);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for DefaultRule<A>, v4);
    atomic_store(result, a1);
  }
  return result;
}

void type metadata accessor for DefaultRule<GestureDebug.Data>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  uint64_t v5;

  if (!lazy cache variable for type metadata for DefaultRule<GestureDebug.Data>)
  {
    v4 = type metadata accessor for DefaultRule(0, (uint64_t)&type metadata for GestureDebug.Data, (uint64_t)&protocol witness table for GestureDebug.Data, a4);
    if (!v5)
      atomic_store(v4, (unint64_t *)&lazy cache variable for type metadata for DefaultRule<GestureDebug.Data>);
  }
}

uint64_t ViewResponder.init()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v0 + 24) = 0;
  swift_unknownObjectWeakInit();
  swift_weakInit();
  swift_retain();
  v1 = specialized static ViewGraph.current.getter();
  swift_beginAccess();
  MEMORY[0x23B7C9E44](v1 + 200);
  v2 = *(_QWORD *)(v1 + 208);
  swift_release();
  swift_beginAccess();
  *(_QWORD *)(v0 + 24) = v2;
  swift_unknownObjectWeakAssign();
  swift_release();
  swift_unknownObjectRelease();
  return v0;
}

uint64_t ViewResponder.deinit()
{
  uint64_t v0;

  outlined destroy of weak GestureGraphDelegate?(v0 + 16);
  swift_weakDestroy();
  return v0;
}

uint64_t ViewResponder.gestureContainer.getter()
{
  return 0;
}

double ViewResponder.opacity.getter()
{
  return 1.0;
}

uint64_t ViewResponder.allowsHitTesting.getter()
{
  return 1;
}

uint64_t ViewResponder.childCount.getter()
{
  return 0;
}

void ViewResponder.child(at:)()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t ViewResponder.description.getter()
{
  uint64_t v0;
  Swift::String v1;
  Swift::String v2;
  Swift::String v3;
  Swift::String v4;

  v1._countAndFlagsBits = 0x2865646F6ELL;
  v1._object = (void *)0xE500000000000000;
  String.append(_:)(v1);
  _print_unlocked<A, B>(_:_:)();
  v2._countAndFlagsBits = 32;
  v2._object = (void *)0xE100000000000000;
  String.append(_:)(v2);
  v3._countAndFlagsBits = (*(uint64_t (**)(void))(*(_QWORD *)v0 + 208))();
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  v4._countAndFlagsBits = 41;
  v4._object = (void *)0xE100000000000000;
  String.append(_:)(v4);
  return 0;
}

uint64_t ViewResponder.ContainsPointsCache.init(key:mask:priority:)@<X0>(uint64_t result@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>, double a4@<D0>)
{
  uint64_t v4;

  v4 = *a2;
  *(_DWORD *)a3 = result;
  *(_BYTE *)(a3 + 4) = BYTE4(result) & 1;
  *(_QWORD *)(a3 + 8) = v4;
  *(double *)(a3 + 16) = a4;
  return result;
}

void ViewResponder.ContainsPointsCache.fetch(key:_:)(_QWORD *a1, uint64_t a2, double (*a3)(uint64_t *))
{
  uint64_t v3;
  uint64_t v6;
  double v7;
  uint64_t v8;

  if ((*(_BYTE *)(v3 + 4) & 1) != 0 || (a2 & 0x100000000) != 0 || *(_DWORD *)v3 != (_DWORD)a2)
  {
    v7 = a3(&v8);
    v6 = v8;
    *(_QWORD *)(v3 + 8) = v8;
    *(double *)(v3 + 16) = v7;
    *(_DWORD *)v3 = a2;
    *(_BYTE *)(v3 + 4) = BYTE4(a2) & 1;
  }
  else
  {
    v6 = *(_QWORD *)(v3 + 8);
  }
  *a1 = v6;
}

uint64_t ViewResponder.descriptionName.getter()
{
  return recursiveDescriptionName(_:)();
}

uint64_t ViewResponder.parent.setter(uint64_t a1)
{
  specialized ViewResponder.parent.setter(a1);
  return swift_release();
}

void static ViewResponder.ContainsPointsOptions.platformDefault.getter(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t static ViewRespondersKey.defaultValue.getter()
{
  return MEMORY[0x24BEE4AF8];
}

uint64_t static ViewRespondersKey._includesRemovedValues.getter()
{
  return 1;
}

uint64_t static ViewRespondersKey.reduce(value:nextValue:)(uint64_t a1, uint64_t (*a2)(void))
{
  unint64_t v2;

  v2 = a2();
  return specialized Array.append<A>(contentsOf:)(v2);
}

uint64_t protocol witness for static PreferenceKey.reduce(value:nextValue:) in conformance ViewRespondersKey(uint64_t a1, void (*a2)(unint64_t *__return_ptr))
{
  unint64_t v3;

  a2(&v3);
  return specialized Array.append<A>(contentsOf:)(v3);
}

uint64_t ViewResponder.host.getter()
{
  uint64_t v0;

  swift_beginAccess();
  return MEMORY[0x23B7C9E44](v0 + 16);
}

uint64_t ViewResponder.__allocating_init()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = swift_allocObject();
  *(_QWORD *)(v0 + 24) = 0;
  swift_unknownObjectWeakInit();
  swift_weakInit();
  v1 = specialized static ViewGraph.current.getter();
  swift_beginAccess();
  MEMORY[0x23B7C9E44](v1 + 200);
  v2 = *(_QWORD *)(v1 + 208);
  swift_retain();
  swift_release();
  swift_beginAccess();
  *(_QWORD *)(v0 + 24) = v2;
  swift_unknownObjectWeakAssign();
  swift_release();
  swift_unknownObjectRelease();
  return v0;
}

uint64_t ViewResponder.nextResponder.getter()
{
  swift_beginAccess();
  return swift_weakLoadStrong();
}

void (*ViewResponder.parent.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = malloc(0x50uLL);
  *a1 = v3;
  v3[9] = v1;
  swift_beginAccess();
  v3[8] = swift_weakLoadStrong();
  return ViewResponder.parent.modify;
}

void ViewResponder.parent.modify(uint64_t a1, char a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t ObjectType;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v2 = *(_QWORD **)a1;
  v3 = *(_QWORD *)(*(_QWORD *)a1 + 64);
  if ((a2 & 1) != 0)
  {
    v4 = swift_retain();
    specialized ViewResponder.parent.setter(v4);
    swift_release();
  }
  else
  {
    if (swift_weakLoadStrong())
    {
      swift_release();
      if (!v3)
      {
        v5 = v2[9] + 16;
        swift_beginAccess();
        if (MEMORY[0x23B7C9E44](v5))
        {
          v6 = *(_QWORD *)(v2[9] + 24);
          ObjectType = swift_getObjectType();
          v8 = type metadata accessor for EventGraphHost();
          (*(void (**)(unint64_t, unint64_t, uint64_t, uint64_t))(v6 + 16))(v8, v8, ObjectType, v6);
          swift_unknownObjectRelease();
          if (v2[6])
          {
            v9 = v2[9];
            v10 = v2[7];
            v11 = swift_getObjectType();
            (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v11, v10);
            swift_unknownObjectRelease();
            v12 = EventBindingManager.willRemoveResponder(_:)(v9);
            (*(void (**)(uint64_t))(*(_QWORD *)v9 + 120))(v12);
            swift_release();
          }
        }
      }
    }
    swift_weakAssign();
  }
  swift_release();
  free(v2);
}

double static ViewResponder.gestureContainmentPriority.getter()
{
  return 16.0;
}

uint64_t ViewResponder.ContainsPointsOptions.rawValue.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

SwiftUI::ViewResponder::ContainsPointsOptions __swiftcall ViewResponder.ContainsPointsOptions.init(rawValue:)(SwiftUI::ViewResponder::ContainsPointsOptions rawValue)
{
  SwiftUI::ViewResponder::ContainsPointsOptions *v1;

  v1->rawValue = rawValue.rawValue;
  return rawValue;
}

void static ViewResponder.ContainsPointsOptions.allowDisabledViews.getter(_QWORD *a1@<X8>)
{
  *a1 = 1;
}

void static ViewResponder.ContainsPointsOptions.useZDistanceAsPriority.getter(_QWORD *a1@<X8>)
{
  *a1 = 2;
}

void static ViewResponder.ContainsPointsOptions.disablePointCloudHitTesting.getter(_QWORD *a1@<X8>)
{
  *a1 = 4;
}

void static ViewResponder.ContainsPointsOptions.allow3DResponders.getter(_QWORD *a1@<X8>)
{
  *a1 = 8;
}

void static ViewResponder.ContainsPointsOptions.crossingServerIDBoundary.getter(_QWORD *a1@<X8>)
{
  *a1 = 16;
}

double ViewResponder.containsGlobalPoints(_:cacheKey:options:)(_QWORD *a1)
{
  *a1 = 0;
  return 0.0;
}

uint64_t ViewResponder.descriptionChildren.getter()
{
  uint64_t v0;
  uint64_t result;
  uint64_t v2;
  uint64_t v3;

  result = (*(uint64_t (**)(void))(*(_QWORD *)v0 + 192))();
  if (result < 0)
  {
    __break(1u);
  }
  else
  {
    v2 = result;
    swift_retain();
    v3 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSnySiG_7SwiftUI32CustomRecursiveStringConvertible_ps5NeverOTg503_s7d46UI13ViewResponderC19descriptionChildrenSayAA32fghI17_pGvgAaE_pSiXEfU_AG0mN0CTf1cn_nTf4ng_n(0, v2, v0);
    swift_release();
    return v3;
  }
  return result;
}

Swift::Void __swiftcall ViewResponder.printTree(depth:)(Swift::Int depth)
{
  uint64_t v1;
  unint64_t v3;
  Swift::String v4;
  Swift::String v5;
  Swift::String v6;
  Swift::String v7;
  Swift::String v8;
  Swift::String v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  Swift::Int v14;
  uint64_t v15;
  void (*v16)(void);
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;

  v18 = indentString(_:)(depth);
  v19 = v3;
  v4._countAndFlagsBits = 43;
  v4._object = (void *)0xE100000000000000;
  String.append(_:)(v4);
  v5._countAndFlagsBits = 32;
  v5._object = (void *)0xE100000000000000;
  String.append(_:)(v5);
  v6._countAndFlagsBits = (*(uint64_t (**)(void))(*(_QWORD *)v1 + 208))();
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  v7._countAndFlagsBits = 32;
  v7._object = (void *)0xE100000000000000;
  String.append(_:)(v7);
  _print_unlocked<A, B>(_:_:)();
  v8._countAndFlagsBits = 32;
  v8._object = (void *)0xE100000000000000;
  String.append(_:)(v8);
  v9._countAndFlagsBits = 0;
  v9._object = (void *)0xE000000000000000;
  String.append(_:)(v9);
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t *))(*(_QWORD *)v1 + 224))(&v18);
  specialized static Log.eventDebug(_:)(v18, v19);
  v10 = swift_bridgeObjectRelease();
  v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 192))(v10);
  if (v11 < 0)
  {
    __break(1u);
    goto LABEL_8;
  }
  v12 = v11;
  if (!v11)
    return;
  v13 = __OFADD__(depth, 1);
  v14 = depth + 1;
  if (v13)
  {
LABEL_8:
    __break(1u);
    return;
  }
  v15 = 0;
  v16 = *(void (**)(void))(*(_QWORD *)v1 + 200);
  do
  {
    v17 = v15 + 1;
    v16();
    ViewResponder.printTree(depth:)(v14);
    swift_release();
    v15 = v17;
  }
  while (v12 != v17);
}

uint64_t indentString(_:)(uint64_t result)
{
  uint64_t v1;
  Swift::String v2;

  if (result < 0)
  {
    __break(1u);
  }
  else
  {
    v1 = result;
    if (result)
    {
      do
      {
        v2._countAndFlagsBits = 8316;
        v2._object = (void *)0xE200000000000000;
        String.append(_:)(v2);
        --v1;
      }
      while (v1);
      return 0;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t ViewResponder.__ivar_destroyer()
{
  uint64_t v0;

  outlined destroy of weak GestureGraphDelegate?(v0 + 16);
  return swift_weakDestroy();
}

uint64_t ViewResponder.__deallocating_deinit()
{
  uint64_t v0;

  outlined destroy of weak GestureGraphDelegate?(v0 + 16);
  swift_weakDestroy();
  return swift_deallocClassInstance();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ViewResponder()
{
  return ViewResponder.description.getter();
}

uint64_t protocol witness for CustomRecursiveStringConvertible.descriptionName.getter in conformance ViewResponder()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 208))();
}

uint64_t protocol witness for CustomRecursiveStringConvertible.descriptionChildren.getter in conformance ViewResponder()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t result;
  uint64_t v3;
  uint64_t v4;

  v1 = *v0;
  result = (*(uint64_t (**)(void))(*(_QWORD *)v1 + 192))();
  if (result < 0)
  {
    __break(1u);
  }
  else
  {
    v3 = result;
    swift_retain();
    v4 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSnySiG_7SwiftUI32CustomRecursiveStringConvertible_ps5NeverOTg503_s7d46UI13ViewResponderC19descriptionChildrenSayAA32fghI17_pGvgAaE_pSiXEfU_AG0mN0CTf1cn_nTf4ng_n(0, v3, v1);
    swift_release();
    return v4;
  }
  return result;
}

uint64_t static ViewGraph.eventGraphHost.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t ObjectType;
  unint64_t v3;
  uint64_t v5;

  v0 = specialized static ViewGraph.current.getter();
  swift_beginAccess();
  if (MEMORY[0x23B7C9E44](v0 + 200))
  {
    v1 = *(_QWORD *)(v0 + 208);
    swift_release();
    ObjectType = swift_getObjectType();
    v3 = type metadata accessor for EventGraphHost();
    (*(void (**)(uint64_t *__return_ptr, unint64_t, unint64_t, uint64_t, uint64_t))(v1 + 16))(&v5, v3, v3, ObjectType, v1);
    swift_unknownObjectRelease();
    return v5;
  }
  else
  {
    swift_release();
    return 0;
  }
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSnySiG_7SwiftUI32CustomRecursiveStringConvertible_ps5NeverOTg503_s7d46UI13ViewResponderC19descriptionChildrenSayAA32fghI17_pGvgAaE_pSiXEfU_AG0mN0CTf1cn_nTf4ng_n(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t (*v8)(uint64_t);
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  __int128 v12;
  uint64_t v13;
  _UNKNOWN **v14;
  uint64_t v15;

  v3 = a2 - result;
  if (__OFSUB__(a2, result))
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  v4 = MEMORY[0x24BEE4AF8];
  if (!v3)
    return v4;
  v7 = result;
  v15 = MEMORY[0x24BEE4AF8];
  result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3 & ~(v3 >> 63), 0);
  if (a2 >= v7 && (v3 & 0x8000000000000000) == 0)
  {
    v8 = *(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 200);
    v4 = v15;
    while (a2 != v7)
    {
      v9 = v8(v7);
      v13 = type metadata accessor for ViewResponder();
      v14 = &protocol witness table for ViewResponder;
      *(_QWORD *)&v12 = v9;
      v15 = v4;
      v11 = *(_QWORD *)(v4 + 16);
      v10 = *(_QWORD *)(v4 + 24);
      if (v11 >= v10 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v10 > 1, v11 + 1, 1);
        v4 = v15;
      }
      *(_QWORD *)(v4 + 16) = v11 + 1;
      result = outlined init with take of ScrollStateRequest(&v12, v4 + 40 * v11 + 32);
      if (a2 == ++v7)
        return v4;
    }
    __break(1u);
    goto LABEL_12;
  }
LABEL_13:
  __break(1u);
  return result;
}

uint64_t specialized ViewResponder.parent.setter(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t ObjectType;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[2];

  swift_beginAccess();
  if (swift_weakLoadStrong())
  {
    swift_release();
    if (!a1)
    {
      swift_beginAccess();
      if (MEMORY[0x23B7C9E44](v1 + 2))
      {
        v3 = v1[3];
        ObjectType = swift_getObjectType();
        v5 = type metadata accessor for EventGraphHost();
        (*(void (**)(_QWORD *__return_ptr, unint64_t, unint64_t, uint64_t, uint64_t))(v3 + 16))(v10, v5, v5, ObjectType, v3);
        swift_unknownObjectRelease();
        if (v10[0])
        {
          v6 = v10[1];
          v7 = swift_getObjectType();
          (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v7, v6);
          swift_unknownObjectRelease();
          v8 = EventBindingManager.willRemoveResponder(_:)((uint64_t)v1);
          (*(void (**)(uint64_t))(*v1 + 120))(v8);
          swift_release();
        }
      }
    }
  }
  return swift_weakAssign();
}

unint64_t lazy protocol witness table accessor for type ViewResponder.ContainsPointsOptions and conformance ViewResponder.ContainsPointsOptions()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ViewResponder.ContainsPointsOptions and conformance ViewResponder.ContainsPointsOptions;
  if (!lazy protocol witness table cache variable for type ViewResponder.ContainsPointsOptions and conformance ViewResponder.ContainsPointsOptions)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ViewResponder.ContainsPointsOptions, &type metadata for ViewResponder.ContainsPointsOptions);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ViewResponder.ContainsPointsOptions and conformance ViewResponder.ContainsPointsOptions);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ViewResponder.ContainsPointsOptions and conformance ViewResponder.ContainsPointsOptions;
  if (!lazy protocol witness table cache variable for type ViewResponder.ContainsPointsOptions and conformance ViewResponder.ContainsPointsOptions)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ViewResponder.ContainsPointsOptions, &type metadata for ViewResponder.ContainsPointsOptions);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ViewResponder.ContainsPointsOptions and conformance ViewResponder.ContainsPointsOptions);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ViewResponder.ContainsPointsOptions and conformance ViewResponder.ContainsPointsOptions;
  if (!lazy protocol witness table cache variable for type ViewResponder.ContainsPointsOptions and conformance ViewResponder.ContainsPointsOptions)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ViewResponder.ContainsPointsOptions, &type metadata for ViewResponder.ContainsPointsOptions);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ViewResponder.ContainsPointsOptions and conformance ViewResponder.ContainsPointsOptions);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ViewResponder.ContainsPointsOptions and conformance ViewResponder.ContainsPointsOptions;
  if (!lazy protocol witness table cache variable for type ViewResponder.ContainsPointsOptions and conformance ViewResponder.ContainsPointsOptions)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ViewResponder.ContainsPointsOptions, &type metadata for ViewResponder.ContainsPointsOptions);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ViewResponder.ContainsPointsOptions and conformance ViewResponder.ContainsPointsOptions);
  }
  return result;
}

uint64_t sub_234D95034@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;

  v3 = *a1;
  v4 = *a1 + 16;
  swift_beginAccess();
  result = MEMORY[0x23B7C9E44](v4);
  v6 = *(_QWORD *)(v3 + 24);
  *a2 = result;
  a2[1] = v6;
  return result;
}

uint64_t sub_234D9508C(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *a2;
  swift_beginAccess();
  *(_QWORD *)(v3 + 24) = v2;
  return swift_unknownObjectWeakAssign();
}

uint64_t sub_234D950E4@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  swift_beginAccess();
  result = swift_weakLoadStrong();
  *a1 = result;
  return result;
}

uint64_t sub_234D95130()
{
  uint64_t v0;

  v0 = swift_retain();
  specialized ViewResponder.parent.setter(v0);
  return swift_release();
}

ValueMetadata *type metadata accessor for ViewRespondersKey()
{
  return &type metadata for ViewRespondersKey;
}

uint64_t type metadata accessor for ViewResponder()
{
  return objc_opt_self();
}

uint64_t method lookup function for ViewResponder()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of ViewResponder.gestureContainer.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 144))();
}

uint64_t dispatch thunk of ViewResponder.opacity.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 152))();
}

uint64_t dispatch thunk of ViewResponder.allowsHitTesting.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 160))();
}

uint64_t dispatch thunk of ViewResponder.containsGlobalPoints(_:cacheKey:options:)(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v3;

  return (*(uint64_t (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v3 + 168))(a1, a2, a3 | ((HIDWORD(a3) & 1) << 32));
}

uint64_t dispatch thunk of ViewResponder.addContentPath(to:kind:in:observer:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 176))();
}

uint64_t dispatch thunk of ViewResponder.addObserver(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 184))();
}

uint64_t dispatch thunk of ViewResponder.childCount.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 192))();
}

uint64_t dispatch thunk of ViewResponder.child(at:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 200))();
}

uint64_t dispatch thunk of ViewResponder.descriptionName.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 208))();
}

uint64_t dispatch thunk of ViewResponder.description.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 216))();
}

uint64_t dispatch thunk of ViewResponder.extendPrintTree(string:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 224))();
}

ValueMetadata *type metadata accessor for ViewResponder.ContainsPointsCache()
{
  return &type metadata for ViewResponder.ContainsPointsCache;
}

ValueMetadata *type metadata accessor for ViewResponder.ContainsPointsOptions()
{
  return &type metadata for ViewResponder.ContainsPointsOptions;
}

uint64_t ContentPathChanges.rawValue.getter()
{
  unsigned __int8 *v0;

  return *v0;
}

uint64_t ContentPathChanges.rawValue.setter(uint64_t result)
{
  _BYTE *v1;

  *v1 = result;
  return result;
}

uint64_t (*ContentPathChanges.rawValue.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t ContentPathChanges.init(rawValue:)@<X0>(uint64_t result@<X0>, _BYTE *a2@<X8>)
{
  *a2 = result;
  return result;
}

void static ContentPathChanges.data.getter(_BYTE *a1@<X8>)
{
  *a1 = 1;
}

void static ContentPathChanges.size.getter(_BYTE *a1@<X8>)
{
  *a1 = 2;
}

void static ContentPathChanges.transform.getter(_BYTE *a1@<X8>)
{
  *a1 = 4;
}

uint64_t TrivialContentPathObserver.contentPathDidChange(for:changes:transform:finished:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _BYTE *a5, uint64_t a6, uint64_t a7)
{
  uint64_t result;

  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a7 + 16))(a1, a6, a7);
  *a5 = 1;
  return result;
}

uint64_t TrivialContentPathObserver.respondersDidChange(for:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 16))();
}

unint64_t lazy protocol witness table accessor for type ContentPathChanges and conformance ContentPathChanges()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ContentPathChanges and conformance ContentPathChanges;
  if (!lazy protocol witness table cache variable for type ContentPathChanges and conformance ContentPathChanges)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ContentPathChanges, &type metadata for ContentPathChanges);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ContentPathChanges and conformance ContentPathChanges);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ContentPathChanges and conformance ContentPathChanges;
  if (!lazy protocol witness table cache variable for type ContentPathChanges and conformance ContentPathChanges)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ContentPathChanges, &type metadata for ContentPathChanges);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ContentPathChanges and conformance ContentPathChanges);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ContentPathChanges and conformance ContentPathChanges;
  if (!lazy protocol witness table cache variable for type ContentPathChanges and conformance ContentPathChanges)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ContentPathChanges, &type metadata for ContentPathChanges);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ContentPathChanges and conformance ContentPathChanges);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ContentPathChanges and conformance ContentPathChanges;
  if (!lazy protocol witness table cache variable for type ContentPathChanges and conformance ContentPathChanges)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ContentPathChanges, &type metadata for ContentPathChanges);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ContentPathChanges and conformance ContentPathChanges);
  }
  return result;
}

ValueMetadata *type metadata accessor for ContentPathChanges()
{
  return &type metadata for ContentPathChanges;
}

uint64_t dispatch thunk of ContentPathObserver.respondersDidChange(for:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 8))();
}

uint64_t dispatch thunk of ContentPathObserver.contentPathDidChange(for:changes:transform:finished:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return (*(uint64_t (**)(void))(a7 + 16))();
}

uint64_t dispatch thunk of TrivialContentPathObserver.contentPathDidChange(for:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 16))();
}

uint64_t BlurStyle.init(radius:isOpaque:dither:hardEdges:)@<X0>(uint64_t result@<X0>, char a2@<W1>, uint64_t a3@<X8>, double a4@<D0>)
{
  *(double *)a3 = a4;
  *(_BYTE *)(a3 + 8) = result;
  *(_BYTE *)(a3 + 9) = a2;
  return result;
}

BOOL BlurStyle.isIdentity.getter()
{
  double *v0;

  return *v0 <= 0.0;
}

double BlurStyle.radius.getter()
{
  uint64_t v0;

  return *(double *)v0;
}

uint64_t (*BlurStyle.radius.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t BlurStyle.isOpaque.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 8);
}

uint64_t BlurStyle.isOpaque.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 8) = result;
  return result;
}

uint64_t (*BlurStyle.isOpaque.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t BlurStyle.dither.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 9);
}

uint64_t BlurStyle.dither.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 9) = result;
  return result;
}

uint64_t (*BlurStyle.dither.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

BOOL static BlurStyle.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return ((*(double *)a1 != *(double *)a2) | ((*(_BYTE *)(a1 + 8) ^ *(_BYTE *)(a2 + 8)) | (*(_BYTE *)(a2 + 9) ^ *(_BYTE *)(a1 + 9))) & 1) == 0;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance BlurStyle(uint64_t a1, uint64_t a2)
{
  return ((*(double *)a1 != *(double *)a2) | ((*(_BYTE *)(a1 + 8) ^ *(_BYTE *)(a2 + 8)) | (*(_BYTE *)(a2 + 9) ^ *(_BYTE *)(a1 + 9))) & 1) == 0;
}

double BlurStyle.animatableData.getter()
{
  uint64_t v0;

  return *(double *)v0;
}

void BlurStyle.animatableData.setter(double a1)
{
  double *v1;

  *v1 = a1;
}

double (*BlurStyle.animatableData.modify(_QWORD *a1))(uint64_t a1)
{
  _QWORD *v1;

  a1[1] = v1;
  *a1 = *v1;
  return ViewOrigin.x.modify;
}

void BlurStyle.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  double v4;
  char v5;
  char v6;
  double v7;
  Swift::UInt v8;
  uint64_t v9;
  int64_t v10;
  uint64_t v11;
  int64_t v12;

  v2 = v1;
  v4 = *(double *)v2;
  v5 = *(_BYTE *)(v2 + 8);
  v6 = *(_BYTE *)(v2 + 9);
  if (*(double *)v2 != 0.0)
  {
    v7 = fabs(v4);
    if (v7 >= 65536.0)
      v8 = 9;
    else
      v8 = 13;
    ProtobufEncoder.encodeVarint(_:)(v8);
    if (v7 >= 65536.0)
    {
      v11 = a1[1];
      v12 = v11 + 8;
      if (__OFADD__(v11, 8))
      {
        __break(1u);
      }
      else if (a1[2] >= v12)
      {
        a1[1] = v12;
        *(double *)(*a1 + v11) = v4;
        goto LABEL_12;
      }
      *(double *)ProtobufEncoder.growBufferSlow(to:)(v12) = v4;
    }
    else
    {
      v9 = a1[1];
      v10 = v9 + 4;
      if (__OFADD__(v9, 4))
      {
        __break(1u);
      }
      else
      {
        *(float *)&v4 = v4;
        if (a1[2] >= v10)
        {
          a1[1] = v10;
          *(_DWORD *)(*a1 + v9) = LODWORD(v4);
          goto LABEL_12;
        }
      }
      *(_DWORD *)ProtobufEncoder.growBufferSlow(to:)(v10) = LODWORD(v4);
    }
  }
LABEL_12:
  if ((v5 & 1) != 0)
  {
    ProtobufEncoder.encodeVarint(_:)(0x10uLL);
    ProtobufEncoder.encodeVarint(_:)(1uLL);
  }
  if ((v6 & 1) != 0)
  {
    ProtobufEncoder.encodeVarint(_:)(0x18uLL);
    ProtobufEncoder.encodeVarint(_:)(1uLL);
  }
}

unint64_t BlurStyle.init(from:)@<X0>(unint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  _QWORD *v3;
  unint64_t v5;
  unint64_t v6;
  BOOL v7;
  BOOL v8;
  double v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  double *v14;
  unint64_t v15;
  unint64_t v16;
  float *v17;
  float v18;

  v3 = (_QWORD *)result;
  v5 = *(_QWORD *)(result + 8);
  v6 = *(_QWORD *)(result + 16);
  if (v5 < v6)
  {
    v7 = 0;
    v8 = 0;
    v9 = 0.0;
    while (1)
    {
      result = v3[3];
      if (result)
      {
        v11 = v3[4];
        if (v5 < v11)
          goto LABEL_14;
        if (v11 < v5)
          goto LABEL_53;
        v3[3] = 0;
      }
      result = ProtobufDecoder.decodeVarint()();
      if (v2)
        return result;
      if (result <= 7)
        goto LABEL_53;
LABEL_14:
      v12 = result >> 3;
      if (result >> 3 == 3)
      {
        if ((result & 7) != 0)
        {
          if ((result & 7) != 2)
            goto LABEL_53;
          result = ProtobufDecoder.decodeVarint()();
          if (v2)
            return result;
          if ((result & 0x8000000000000000) != 0)
          {
            __break(1u);
LABEL_56:
            __break(1u);
LABEL_57:
            __break(1u);
LABEL_58:
            __break(1u);
            JUMPOUT(0x234D9593CLL);
          }
          v15 = v3[1] + result;
          if (v6 < v15)
            goto LABEL_53;
          v3[3] = 24;
          v3[4] = v15;
        }
        result = ProtobufDecoder.decodeVarint()();
        if (v2)
          return result;
        v8 = result != 0;
      }
      else if (v12 == 2)
      {
        if ((result & 7) != 0)
        {
          if ((result & 7) != 2)
            goto LABEL_53;
          result = ProtobufDecoder.decodeVarint()();
          if (v2)
            return result;
          if ((result & 0x8000000000000000) != 0)
            goto LABEL_56;
          v16 = v3[1] + result;
          if (v6 < v16)
          {
LABEL_53:
            lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
            swift_allocError();
            return swift_willThrow();
          }
          v3[3] = 16;
          v3[4] = v16;
        }
        result = ProtobufDecoder.decodeVarint()();
        if (v2)
          return result;
        v7 = result != 0;
      }
      else if (v12 == 1)
      {
        v13 = result & 7;
        if (v13 == 5)
        {
          v17 = (float *)v3[1];
          if (v6 < (unint64_t)(v17 + 1))
            goto LABEL_53;
          v18 = *v17;
          v3[1] = v17 + 1;
          v9 = v18;
        }
        else
        {
          if (v13 == 2)
          {
            result = ProtobufDecoder.decodeVarint()();
            if (v2)
              return result;
            if ((result & 0x8000000000000000) != 0)
              goto LABEL_57;
            v14 = (double *)v3[1];
            if (v6 < (unint64_t)v14 + result)
              goto LABEL_53;
            v3[3] = 9;
            v3[4] = (char *)v14 + result;
          }
          else
          {
            if (v13 != 1)
              goto LABEL_53;
            v14 = (double *)v3[1];
          }
          if (v6 < (unint64_t)(v14 + 1))
            goto LABEL_53;
          v9 = *v14;
          v3[1] = v14 + 1;
        }
      }
      else
      {
        switch(result & 7)
        {
          case 0uLL:
            result = ProtobufDecoder.decodeVarint()();
            if (v2)
              return result;
            break;
          case 1uLL:
            v10 = v3[1] + 8;
            if (v6 >= v10)
              goto LABEL_6;
            goto LABEL_53;
          case 2uLL:
            result = ProtobufDecoder.decodeVarint()();
            if (v2)
              return result;
            if ((result & 0x8000000000000000) != 0)
              goto LABEL_58;
            v10 = v3[1] + result;
            if (v6 < v10)
              goto LABEL_53;
LABEL_6:
            v3[1] = v10;
            break;
          case 5uLL:
            v10 = v3[1] + 4;
            if (v6 < v10)
              goto LABEL_53;
            goto LABEL_6;
          default:
            goto LABEL_53;
        }
      }
      v5 = v3[1];
      v6 = v3[2];
      if (v5 >= v6)
        goto LABEL_4;
    }
  }
  v8 = 0;
  v7 = 0;
  v9 = 0.0;
LABEL_4:
  v3[3] = 0;
  *(double *)a2 = v9;
  *(_BYTE *)(a2 + 8) = v7;
  *(_BYTE *)(a2 + 9) = v8;
  return result;
}

void protocol witness for ProtobufEncodableMessage.encode(to:) in conformance BlurStyle(_QWORD *a1)
{
  BlurStyle.encode(to:)(a1);
}

unint64_t protocol witness for ProtobufDecodableMessage.init(from:) in conformance BlurStyle@<X0>(unint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return BlurStyle.init(from:)(a1, a2);
}

double sub_234D9598C@<D0>(double *a1@<X0>, _QWORD *a2@<X8>)
{
  double result;

  result = *a1;
  *a2 = *(_QWORD *)a1;
  return result;
}

double sub_234D95998(double *a1, _QWORD *a2)
{
  double result;

  result = *a1;
  *a2 = *(_QWORD *)a1;
  return result;
}

