char *assignWithCopy for VelocitySampler(char *a1, int *a2, uint64_t a3)
{
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(char *, uint64_t, uint64_t);
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  size_t v21;
  unint64_t v22;
  size_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _DWORD *v27;
  _DWORD *v28;
  uint64_t (*v29)(_DWORD *, uint64_t, uint64_t);
  _DWORD *v30;
  int v31;
  uint64_t v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  _DWORD *v39;
  _DWORD *v40;
  int v41;
  int v42;
  int v43;
  int v44;
  int v45;
  uint64_t (*v46)(_DWORD *, uint64_t, uint64_t);
  int v47;
  int v48;
  int v49;
  int v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  int v58;
  size_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;

  v4 = a1;
  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned int *)(v6 + 84);
  v8 = *(_QWORD *)(v6 + 64);
  v61 = v8 + 7;
  v62 = v5;
  v9 = (v8 + 7) & 0xFFFFFFFFFFFFFFF8;
  v10 = v9 + 8;
  if ((_DWORD)v7)
  {
    v11 = *(_QWORD *)(v5 - 8);
    v12 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v6 + 48);
    v13 = v12(a1, v7, v5);
    v14 = v12((char *)a2, v7, v5);
    if (v13)
    {
      v6 = v11;
      if (!v14)
        goto LABEL_29;
LABEL_25:
      if ((_DWORD)v7)
        v21 = v9 + 8;
      else
        v21 = v9 + 9;
      memcpy(v4, a2, v21);
      goto LABEL_31;
    }
    goto LABEL_20;
  }
  if (!a1[v10]
    || ((v15 = a1[v10] - 1, (_DWORD)v9 == -8) ? (v16 = 0) : (v15 = 0, v16 = *(_DWORD *)a1),
        (v16 | v15) == 0xFFFFFFFF))
  {
    if (!*((_BYTE *)a2 + v10))
      goto LABEL_22;
    v19 = *((unsigned __int8 *)a2 + v10) - 1;
    if ((_DWORD)v9 != -8)
      v19 = 0;
    v11 = *(_QWORD *)(v5 - 8);
    if ((_DWORD)v9 == -8)
      v20 = 0;
    else
      v20 = *a2;
    v14 = (v20 | v19) + 1;
LABEL_20:
    v6 = v11;
    if (v14)
    {
      (*(void (**)(char *, uint64_t))(v11 + 8))(v4, v5);
      goto LABEL_25;
    }
LABEL_22:
    (*(void (**)(char *, int *, uint64_t))(v6 + 24))(v4, a2, v5);
    *(_QWORD *)((unint64_t)&v4[v8 + 7] & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)a2 + v8 + 7) & 0xFFFFFFFFFFFFF8);
    goto LABEL_31;
  }
  if (*((_BYTE *)a2 + v10))
  {
    v17 = *((unsigned __int8 *)a2 + v10) - 1;
    if ((_DWORD)v9 == -8)
    {
      v18 = 0;
    }
    else
    {
      v17 = 0;
      v18 = *a2;
    }
    if ((v18 | v17) != 0xFFFFFFFF)
      goto LABEL_25;
  }
LABEL_29:
  (*(void (**)(char *, int *, uint64_t))(v6 + 16))(v4, a2, v5);
  *(_QWORD *)((unint64_t)&v4[v8 + 7] & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)a2 + v8 + 7) & 0xFFFFFFFFFFFFF8);
  if (!(_DWORD)v7)
    v4[v10] = 0;
LABEL_31:
  v22 = v9 + 9;
  if ((_DWORD)v7)
    v23 = v9 + 8;
  else
    v23 = v9 + 9;
  v24 = *(_DWORD *)(v6 + 80) & 0xF8 | 7;
  v25 = (unint64_t)&v4[v23 + v24];
  v26 = ~v24;
  v27 = (_DWORD *)(v25 & ~v24);
  v28 = (_DWORD *)(((unint64_t)a2 + v23 + v24) & ~v24);
  v59 = v23 + v24;
  v60 = v4;
  if (!(_DWORD)v7)
  {
    if (*((_BYTE *)v27 + v10))
    {
      v33 = *((unsigned __int8 *)v27 + v10) - 1;
      if ((_DWORD)v10)
      {
        v33 = 0;
        v34 = *v27;
      }
      else
      {
        v34 = 0;
      }
      if ((v34 | v33) != 0xFFFFFFFF)
      {
        v56 = (unint64_t)&v4[v23 + v24];
        v57 = (unint64_t)a2 + v23 + v24;
        v55 = v22;
        if (*((_BYTE *)v28 + v10))
        {
          v35 = *((unsigned __int8 *)v28 + v10) - 1;
          if ((_DWORD)v10)
          {
            v35 = 0;
            v36 = *v28;
          }
          else
          {
            v36 = 0;
          }
          if ((v36 | v35) != 0xFFFFFFFF)
            goto LABEL_37;
        }
        goto LABEL_65;
      }
    }
    if (!*((_BYTE *)v28 + v10))
      goto LABEL_53;
    v37 = *((unsigned __int8 *)v28 + v10) - 1;
    if ((_DWORD)v10)
    {
      v37 = 0;
      v38 = *v28;
    }
    else
    {
      v38 = 0;
    }
    v31 = (v38 | v37) + 1;
LABEL_51:
    v4 = v60;
    if (v31)
    {
      v32 = v62;
      (*(void (**)(_DWORD *, uint64_t))(v6 + 8))(v27, v62);
      memcpy(v27, v28, v23);
      goto LABEL_54;
    }
LABEL_53:
    v32 = v62;
    (*(void (**)(_DWORD *, _DWORD *, uint64_t))(v6 + 24))(v27, v28, v62);
    *(_QWORD *)(((unint64_t)v27 + v61) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v28 + v61) & 0xFFFFFFFFFFFFF8);
LABEL_54:
    v39 = (_DWORD *)(((unint64_t)v27 + v59) & v26);
    v40 = (_DWORD *)(((unint64_t)v28 + v59) & v26);
    if (!(_DWORD)v7)
    {
      v41 = *((unsigned __int8 *)v39 + v10);
      if (*((_BYTE *)v39 + v10))
        goto LABEL_56;
      goto LABEL_72;
    }
    goto LABEL_67;
  }
  v56 = (unint64_t)&v4[v23 + v24];
  v57 = (unint64_t)a2 + v23 + v24;
  v55 = v22;
  v29 = *(uint64_t (**)(_DWORD *, uint64_t, uint64_t))(v6 + 48);
  v30 = (_DWORD *)(v25 & ~v24);
  v58 = v29(v30, v7, v62);
  v26 = ~v24;
  v27 = v30;
  v31 = v29(v28, v7, v62);
  if (!v58)
    goto LABEL_51;
  if (v31)
  {
LABEL_37:
    memcpy(v27, v28, v23);
    v4 = v60;
    v32 = v62;
    goto LABEL_54;
  }
LABEL_65:
  (*(void (**)(_DWORD *, _DWORD *, uint64_t))(v6 + 16))(v27, v28, v62);
  *(_QWORD *)(((unint64_t)v27 + v61) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v28 + v61) & 0xFFFFFFFFFFFFF8);
  if (!(_DWORD)v7)
  {
    *((_BYTE *)v27 + v10) = 0;
    v39 = (_DWORD *)(((v56 | v24) + v55) & v26);
    v40 = (_DWORD *)(((v57 | v24) + v55) & v26);
    v4 = v60;
    v32 = v62;
    v41 = *((unsigned __int8 *)v39 + v10);
    if (*((_BYTE *)v39 + v10))
    {
LABEL_56:
      v42 = v41 - 1;
      if ((_DWORD)v10)
      {
        v42 = 0;
        v43 = *v39;
      }
      else
      {
        v43 = 0;
      }
      if ((v43 | v42) != 0xFFFFFFFF)
      {
        if (*((_BYTE *)v40 + v10))
        {
          v44 = *((unsigned __int8 *)v40 + v10) - 1;
          if ((_DWORD)v10)
          {
            v44 = 0;
            v45 = *v40;
          }
          else
          {
            v45 = 0;
          }
          if ((v45 | v44) != 0xFFFFFFFF)
            goto LABEL_82;
        }
        goto LABEL_69;
      }
    }
LABEL_72:
    if (!*((_BYTE *)v40 + v10))
      goto LABEL_79;
    v49 = *((unsigned __int8 *)v40 + v10) - 1;
    if ((_DWORD)v10)
    {
      v49 = 0;
      v50 = *v40;
    }
    else
    {
      v50 = 0;
    }
    v48 = (v50 | v49) + 1;
LABEL_77:
    if (v48)
    {
      (*(void (**)(_DWORD *, uint64_t))(v6 + 8))(v39, v32);
      goto LABEL_82;
    }
LABEL_79:
    (*(void (**)(_DWORD *, _DWORD *, uint64_t))(v6 + 24))(v39, v40, v32);
    *(_QWORD *)(((unint64_t)v39 + v61) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v40 + v61) & 0xFFFFFFFFFFFFF8);
    goto LABEL_83;
  }
  v39 = (_DWORD *)(((v56 | v24) + v10) & v26);
  v40 = (_DWORD *)(((v57 | v24) + v10) & v26);
  v4 = v60;
  v32 = v62;
LABEL_67:
  v46 = *(uint64_t (**)(_DWORD *, uint64_t, uint64_t))(v6 + 48);
  v47 = v46(v39, v7, v32);
  v48 = v46(v40, v7, v32);
  if (!v47)
    goto LABEL_77;
  if (v48)
  {
LABEL_82:
    memcpy(v39, v40, v23);
    goto LABEL_83;
  }
LABEL_69:
  (*(void (**)(_DWORD *, _DWORD *, uint64_t))(v6 + 16))(v39, v40, v32);
  *(_QWORD *)(((unint64_t)v39 + v61) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v40 + v61) & 0xFFFFFFFFFFFFF8);
  if (!(_DWORD)v7)
    *((_BYTE *)v39 + v10) = 0;
LABEL_83:
  v51 = ((unint64_t)v39 + v23 + 7) & 0xFFFFFFFFFFFFFFF8;
  v52 = ((unint64_t)v40 + v23 + 7) & 0xFFFFFFFFFFFFFFF8;
  v53 = *(_QWORD *)v52;
  *(_BYTE *)(v51 + 8) = *(_BYTE *)(v52 + 8);
  *(_QWORD *)v51 = v53;
  *(_QWORD *)(((unint64_t)v39 + v23 + 23) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v40 + v23 + 23) & 0xFFFFFFFFFFFFF8);
  return v4;
}

char *initializeWithTake for VelocitySampler(char *a1, int *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  int v11;
  int v12;
  size_t v13;
  unint64_t v14;
  size_t v15;
  uint64_t v16;
  size_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  int *v23;
  unint64_t v24;
  int v25;
  int v26;
  int v27;
  const void *v28;
  size_t v29;
  void *v30;
  _DWORD *v31;
  char *v32;
  uint64_t v33;
  int v34;
  int v35;
  int v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v41;
  uint64_t v42;
  size_t __n;
  char *v44;
  uint64_t v45;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned int *)(v6 + 84);
  v8 = *(_QWORD *)(v6 + 64);
  v42 = v8 + 7;
  v9 = (v8 + 7) & 0xFFFFFFFFFFFFFFF8;
  v10 = v9 + 8;
  v45 = v5;
  if ((_DWORD)v7)
  {
    if (!(*(unsigned int (**)(int *, uint64_t, uint64_t))(v6 + 48))(a2, v7, v5))
      goto LABEL_13;
LABEL_9:
    if ((_DWORD)v7)
      v13 = v9 + 8;
    else
      v13 = v9 + 9;
    memcpy(a1, a2, v13);
    goto LABEL_15;
  }
  if (*((_BYTE *)a2 + v10))
  {
    v11 = *((unsigned __int8 *)a2 + v10) - 1;
    if ((_DWORD)v9 == -8)
    {
      v12 = 0;
    }
    else
    {
      v11 = 0;
      v12 = *a2;
    }
    if ((v12 | v11) != 0xFFFFFFFF)
      goto LABEL_9;
  }
LABEL_13:
  (*(void (**)(char *, int *, uint64_t))(v6 + 32))(a1, a2, v5);
  *(_QWORD *)((unint64_t)&a1[v8 + 7] & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)a2 + v8 + 7) & 0xFFFFFFFFFFFFF8);
  if (!(_DWORD)v7)
    a1[v10] = 0;
LABEL_15:
  v14 = v9 + 9;
  if ((_DWORD)v7)
    v15 = v9 + 8;
  else
    v15 = v9 + 9;
  v16 = *(_DWORD *)(v6 + 80) & 0xF8 | 7;
  __n = v15;
  v44 = a1;
  v17 = v15 + v16;
  v18 = (unint64_t)&a1[v15 + v16];
  v19 = ~v16;
  v20 = v18 & ~v16;
  v21 = (unint64_t)a2 + v15 + v16;
  v22 = v10;
  v23 = (int *)(v21 & ~v16);
  v41 = v14;
  if ((_DWORD)v7)
  {
    v24 = v22;
    if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v6 + 48))(v21 & ~v16, v7, v45))
      goto LABEL_28;
LABEL_25:
    v28 = (const void *)(v21 & ~v16);
    v29 = __n;
    memcpy((void *)(v18 & ~v16), v28, __n);
    v30 = (void *)((v17 + v20) & v19);
    v31 = (_DWORD *)(((unint64_t)v23 + v17) & v19);
    v32 = v44;
    v33 = v45;
    if ((_DWORD)v7)
      goto LABEL_30;
    v34 = *((unsigned __int8 *)v31 + v24);
    if (!*((_BYTE *)v31 + v24))
      goto LABEL_38;
LABEL_33:
    v35 = v34 - 1;
    if ((_DWORD)v24)
    {
      v35 = 0;
      v36 = *v31;
    }
    else
    {
      v36 = 0;
    }
    if ((v36 | v35) == 0xFFFFFFFF)
      goto LABEL_38;
LABEL_37:
    memcpy(v30, v31, v29);
    goto LABEL_40;
  }
  v24 = v22;
  v25 = *((unsigned __int8 *)v23 + v22);
  if (v25)
  {
    v26 = v25 - 1;
    v27 = v24;
    if ((_DWORD)v24)
    {
      v26 = 0;
      v27 = *v23;
    }
    if ((v27 | v26) != 0xFFFFFFFF)
      goto LABEL_25;
  }
LABEL_28:
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v6 + 32))(v18 & ~v16, v21 & ~v16, v45);
  *(_QWORD *)((v42 + v20) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v23 + v42) & 0xFFFFFFFFFFFFF8);
  if (!(_DWORD)v7)
  {
    *(_BYTE *)(v20 + v24) = 0;
    v30 = (void *)(((v18 | v16) + v41) & v19);
    v31 = (_DWORD *)(((v21 | v16) + v41) & v19);
    v32 = v44;
    v33 = v45;
    v29 = __n;
    v34 = *((unsigned __int8 *)v31 + v24);
    if (!*((_BYTE *)v31 + v24))
      goto LABEL_38;
    goto LABEL_33;
  }
  v30 = (void *)(((v18 | v16) + v24) & v19);
  v31 = (_DWORD *)(((v21 | v16) + v24) & v19);
  v32 = v44;
  v33 = v45;
  v29 = __n;
LABEL_30:
  if ((*(unsigned int (**)(_DWORD *, uint64_t, uint64_t))(v6 + 48))(v31, v7, v33))
    goto LABEL_37;
LABEL_38:
  (*(void (**)(void *, _DWORD *, uint64_t))(v6 + 32))(v30, v31, v33);
  *(_QWORD *)(((unint64_t)v30 + v42) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v31 + v42) & 0xFFFFFFFFFFFFF8);
  if (!(_DWORD)v7)
    *((_BYTE *)v30 + v24) = 0;
LABEL_40:
  v37 = ((unint64_t)v30 + v29 + 7) & 0xFFFFFFFFFFFFFFF8;
  v38 = ((unint64_t)v31 + v29 + 7) & 0xFFFFFFFFFFFFFFF8;
  v39 = *(_QWORD *)v38;
  *(_BYTE *)(v37 + 8) = *(_BYTE *)(v38 + 8);
  *(_QWORD *)v37 = v39;
  *(_QWORD *)(((unint64_t)v30 + v29 + 23) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v31 + v29 + 23) & 0xFFFFFFFFFFFFF8);
  return v32;
}

char *assignWithTake for VelocitySampler(char *a1, int *a2, uint64_t a3)
{
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(char *, uint64_t, uint64_t);
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  size_t v21;
  unint64_t v22;
  size_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _DWORD *v27;
  _DWORD *v28;
  uint64_t (*v29)(_DWORD *, uint64_t, uint64_t);
  _DWORD *v30;
  int v31;
  uint64_t v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  _DWORD *v39;
  _DWORD *v40;
  int v41;
  int v42;
  int v43;
  int v44;
  int v45;
  uint64_t (*v46)(_DWORD *, uint64_t, uint64_t);
  int v47;
  int v48;
  int v49;
  int v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  int v58;
  size_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;

  v4 = a1;
  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned int *)(v6 + 84);
  v8 = *(_QWORD *)(v6 + 64);
  v61 = v8 + 7;
  v62 = v5;
  v9 = (v8 + 7) & 0xFFFFFFFFFFFFFFF8;
  v10 = v9 + 8;
  if ((_DWORD)v7)
  {
    v11 = *(_QWORD *)(v5 - 8);
    v12 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v6 + 48);
    v13 = v12(a1, v7, v5);
    v14 = v12((char *)a2, v7, v5);
    if (v13)
    {
      v6 = v11;
      if (!v14)
        goto LABEL_29;
LABEL_25:
      if ((_DWORD)v7)
        v21 = v9 + 8;
      else
        v21 = v9 + 9;
      memcpy(v4, a2, v21);
      goto LABEL_31;
    }
    goto LABEL_20;
  }
  if (!a1[v10]
    || ((v15 = a1[v10] - 1, (_DWORD)v9 == -8) ? (v16 = 0) : (v15 = 0, v16 = *(_DWORD *)a1),
        (v16 | v15) == 0xFFFFFFFF))
  {
    if (!*((_BYTE *)a2 + v10))
      goto LABEL_22;
    v19 = *((unsigned __int8 *)a2 + v10) - 1;
    if ((_DWORD)v9 != -8)
      v19 = 0;
    v11 = *(_QWORD *)(v5 - 8);
    if ((_DWORD)v9 == -8)
      v20 = 0;
    else
      v20 = *a2;
    v14 = (v20 | v19) + 1;
LABEL_20:
    v6 = v11;
    if (v14)
    {
      (*(void (**)(char *, uint64_t))(v11 + 8))(v4, v5);
      goto LABEL_25;
    }
LABEL_22:
    (*(void (**)(char *, int *, uint64_t))(v6 + 40))(v4, a2, v5);
    *(_QWORD *)((unint64_t)&v4[v8 + 7] & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)a2 + v8 + 7) & 0xFFFFFFFFFFFFF8);
    goto LABEL_31;
  }
  if (*((_BYTE *)a2 + v10))
  {
    v17 = *((unsigned __int8 *)a2 + v10) - 1;
    if ((_DWORD)v9 == -8)
    {
      v18 = 0;
    }
    else
    {
      v17 = 0;
      v18 = *a2;
    }
    if ((v18 | v17) != 0xFFFFFFFF)
      goto LABEL_25;
  }
LABEL_29:
  (*(void (**)(char *, int *, uint64_t))(v6 + 32))(v4, a2, v5);
  *(_QWORD *)((unint64_t)&v4[v8 + 7] & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)a2 + v8 + 7) & 0xFFFFFFFFFFFFF8);
  if (!(_DWORD)v7)
    v4[v10] = 0;
LABEL_31:
  v22 = v9 + 9;
  if ((_DWORD)v7)
    v23 = v9 + 8;
  else
    v23 = v9 + 9;
  v24 = *(_DWORD *)(v6 + 80) & 0xF8 | 7;
  v25 = (unint64_t)&v4[v23 + v24];
  v26 = ~v24;
  v27 = (_DWORD *)(v25 & ~v24);
  v28 = (_DWORD *)(((unint64_t)a2 + v23 + v24) & ~v24);
  v59 = v23 + v24;
  v60 = v4;
  if (!(_DWORD)v7)
  {
    if (*((_BYTE *)v27 + v10))
    {
      v33 = *((unsigned __int8 *)v27 + v10) - 1;
      if ((_DWORD)v10)
      {
        v33 = 0;
        v34 = *v27;
      }
      else
      {
        v34 = 0;
      }
      if ((v34 | v33) != 0xFFFFFFFF)
      {
        v56 = (unint64_t)&v4[v23 + v24];
        v57 = (unint64_t)a2 + v23 + v24;
        v55 = v22;
        if (*((_BYTE *)v28 + v10))
        {
          v35 = *((unsigned __int8 *)v28 + v10) - 1;
          if ((_DWORD)v10)
          {
            v35 = 0;
            v36 = *v28;
          }
          else
          {
            v36 = 0;
          }
          if ((v36 | v35) != 0xFFFFFFFF)
            goto LABEL_37;
        }
        goto LABEL_65;
      }
    }
    if (!*((_BYTE *)v28 + v10))
      goto LABEL_53;
    v37 = *((unsigned __int8 *)v28 + v10) - 1;
    if ((_DWORD)v10)
    {
      v37 = 0;
      v38 = *v28;
    }
    else
    {
      v38 = 0;
    }
    v31 = (v38 | v37) + 1;
LABEL_51:
    v4 = v60;
    if (v31)
    {
      v32 = v62;
      (*(void (**)(_DWORD *, uint64_t))(v6 + 8))(v27, v62);
      memcpy(v27, v28, v23);
      goto LABEL_54;
    }
LABEL_53:
    v32 = v62;
    (*(void (**)(_DWORD *, _DWORD *, uint64_t))(v6 + 40))(v27, v28, v62);
    *(_QWORD *)(((unint64_t)v27 + v61) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v28 + v61) & 0xFFFFFFFFFFFFF8);
LABEL_54:
    v39 = (_DWORD *)(((unint64_t)v27 + v59) & v26);
    v40 = (_DWORD *)(((unint64_t)v28 + v59) & v26);
    if (!(_DWORD)v7)
    {
      v41 = *((unsigned __int8 *)v39 + v10);
      if (*((_BYTE *)v39 + v10))
        goto LABEL_56;
      goto LABEL_72;
    }
    goto LABEL_67;
  }
  v56 = (unint64_t)&v4[v23 + v24];
  v57 = (unint64_t)a2 + v23 + v24;
  v55 = v22;
  v29 = *(uint64_t (**)(_DWORD *, uint64_t, uint64_t))(v6 + 48);
  v30 = (_DWORD *)(v25 & ~v24);
  v58 = v29(v30, v7, v62);
  v26 = ~v24;
  v27 = v30;
  v31 = v29(v28, v7, v62);
  if (!v58)
    goto LABEL_51;
  if (v31)
  {
LABEL_37:
    memcpy(v27, v28, v23);
    v4 = v60;
    v32 = v62;
    goto LABEL_54;
  }
LABEL_65:
  (*(void (**)(_DWORD *, _DWORD *, uint64_t))(v6 + 32))(v27, v28, v62);
  *(_QWORD *)(((unint64_t)v27 + v61) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v28 + v61) & 0xFFFFFFFFFFFFF8);
  if (!(_DWORD)v7)
  {
    *((_BYTE *)v27 + v10) = 0;
    v39 = (_DWORD *)(((v56 | v24) + v55) & v26);
    v40 = (_DWORD *)(((v57 | v24) + v55) & v26);
    v4 = v60;
    v32 = v62;
    v41 = *((unsigned __int8 *)v39 + v10);
    if (*((_BYTE *)v39 + v10))
    {
LABEL_56:
      v42 = v41 - 1;
      if ((_DWORD)v10)
      {
        v42 = 0;
        v43 = *v39;
      }
      else
      {
        v43 = 0;
      }
      if ((v43 | v42) != 0xFFFFFFFF)
      {
        if (*((_BYTE *)v40 + v10))
        {
          v44 = *((unsigned __int8 *)v40 + v10) - 1;
          if ((_DWORD)v10)
          {
            v44 = 0;
            v45 = *v40;
          }
          else
          {
            v45 = 0;
          }
          if ((v45 | v44) != 0xFFFFFFFF)
            goto LABEL_82;
        }
        goto LABEL_69;
      }
    }
LABEL_72:
    if (!*((_BYTE *)v40 + v10))
      goto LABEL_79;
    v49 = *((unsigned __int8 *)v40 + v10) - 1;
    if ((_DWORD)v10)
    {
      v49 = 0;
      v50 = *v40;
    }
    else
    {
      v50 = 0;
    }
    v48 = (v50 | v49) + 1;
LABEL_77:
    if (v48)
    {
      (*(void (**)(_DWORD *, uint64_t))(v6 + 8))(v39, v32);
      goto LABEL_82;
    }
LABEL_79:
    (*(void (**)(_DWORD *, _DWORD *, uint64_t))(v6 + 40))(v39, v40, v32);
    *(_QWORD *)(((unint64_t)v39 + v61) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v40 + v61) & 0xFFFFFFFFFFFFF8);
    goto LABEL_83;
  }
  v39 = (_DWORD *)(((v56 | v24) + v10) & v26);
  v40 = (_DWORD *)(((v57 | v24) + v10) & v26);
  v4 = v60;
  v32 = v62;
LABEL_67:
  v46 = *(uint64_t (**)(_DWORD *, uint64_t, uint64_t))(v6 + 48);
  v47 = v46(v39, v7, v32);
  v48 = v46(v40, v7, v32);
  if (!v47)
    goto LABEL_77;
  if (v48)
  {
LABEL_82:
    memcpy(v39, v40, v23);
    goto LABEL_83;
  }
LABEL_69:
  (*(void (**)(_DWORD *, _DWORD *, uint64_t))(v6 + 32))(v39, v40, v32);
  *(_QWORD *)(((unint64_t)v39 + v61) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v40 + v61) & 0xFFFFFFFFFFFFF8);
  if (!(_DWORD)v7)
    *((_BYTE *)v39 + v10) = 0;
LABEL_83:
  v51 = ((unint64_t)v39 + v23 + 7) & 0xFFFFFFFFFFFFFFF8;
  v52 = ((unint64_t)v40 + v23 + 7) & 0xFFFFFFFFFFFFFFF8;
  v53 = *(_QWORD *)v52;
  *(_BYTE *)(v51 + 8) = *(_BYTE *)(v52 + 8);
  *(_QWORD *)v51 = v53;
  *(_QWORD *)(((unint64_t)v39 + v23 + 23) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v40 + v23 + 23) & 0xFFFFFFFFFFFFF8);
  return v4;
}

uint64_t getEnumTagSinglePayload for VelocitySampler(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unint64_t v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int v13;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = v5 - 1;
  if (!v5)
    v6 = 0;
  v7 = 8;
  if (!v5)
    v7 = 9;
  if (!a2)
    return 0;
  if (v6 < a2)
  {
    v8 = ((*(_QWORD *)(v4 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + v7;
    if ((((((_DWORD)v8
           + (((_DWORD)v8
             + (*(_DWORD *)(v4 + 80) & 0xF8 | 7)
             + (((_DWORD)v8 + (*(_DWORD *)(v4 + 80) & 0xF8 | 7)) & ~(*(_DWORD *)(v4 + 80) & 0xF8 | 7))) & ~(*(_DWORD *)(v4 + 80) & 0xF8 | 7))
           + 23) & 0xFFFFFFF8)
         + 8) & 0xFFFFFFF8) != 0)
      v9 = 2;
    else
      v9 = a2 - v6 + 1;
    if (v9 >= 0x10000)
      v10 = 4;
    else
      v10 = 2;
    if (v9 < 0x100)
      v10 = 1;
    if (v9 >= 2)
      v11 = v10;
    else
      v11 = 0;
    __asm { BR              X14 }
  }
  if (v5 < 2)
    return 0;
  v13 = (*(uint64_t (**)(void))(v4 + 48))();
  if (v13 >= 2)
    return v13 - 1;
  else
    return 0;
}

void storeEnumTagSinglePayload for VelocitySampler(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  int v6;
  uint64_t v7;
  int v8;
  int v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  size_t v14;
  unsigned int v15;
  unsigned int v16;
  int v17;
  unsigned int v18;

  v6 = 0;
  v7 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v8 = *(_DWORD *)(v7 + 84);
  if (v8)
    v10 = v8 - 1;
  else
    v10 = 0;
  v11 = (*(_QWORD *)(v7 + 64) + 7) & 0xFFFFFFFFFFFFFFF8;
  v12 = v11 + 8;
  v13 = v11 + 9;
  if (v8)
    v13 = v12;
  v9 = *(_DWORD *)(v7 + 80);
  v14 = ((v13
        + ((v13
          + (v9 & 0xF8 | 7)
          + ((v13 + (v9 & 0xF8 | 7)) & ~(v9 & 0xF8 | 7))) & ~(v9 & 0xF8 | 7))
        + 23) & 0xFFFFFFFFFFFFFFF8)
      + 8;
  if (v10 < a3)
  {
    v15 = a3 - v10;
    if ((((_DWORD)v13
         + (((_DWORD)v13 + (v9 & 0xF8 | 7) + (((_DWORD)v13 + (v9 & 0xF8 | 7)) & ~(v9 & 0xF8 | 7))) & ~(v9 & 0xF8 | 7))
         + 23) & 0xFFFFFFF8) == 0xFFFFFFF8)
      v16 = v15 + 1;
    else
      v16 = 2;
    if (v16 >= 0x10000)
      v17 = 4;
    else
      v17 = 2;
    if (v16 < 0x100)
      v17 = 1;
    if (v16 >= 2)
      v6 = v17;
    else
      v6 = 0;
  }
  if (a2 > v10)
  {
    if ((_DWORD)v14)
    {
      v18 = ~v10 + a2;
      bzero(a1, v14);
      *a1 = v18;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X12 }
}

void sub_234F96BDC(int a1@<W1>, unsigned int a2@<W2>, size_t a3@<X8>, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v11;
  _DWORD *v12;
  uint64_t v13;
  int v14;

  *((_BYTE *)v12 + v13) = 0;
  if (a1 && a2 >= 2)
  {
    if (a1 + 1 <= a2)
    {
      if (a1 != -1)
        (*(void (**)(_DWORD *, _QWORD))(v11 + 56))(v12, (a1 + 1));
    }
    else if ((_DWORD)a3)
    {
      v14 = a1 - a2;
      bzero(v12, a3);
      *v12 = v14;
    }
  }
}

uint64_t type metadata completion function for AnimatableVelocitySampler()
{
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v2;
  uint64_t result;
  unint64_t v4;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  result = type metadata accessor for VelocitySampler(319, AssociatedTypeWitness, AssociatedConformanceWitness, v2);
  if (v4 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

_QWORD *initializeBufferWithCopyOfBuffer for AnimatableVelocitySampler(_QWORD *a1, _DWORD *a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  int v10;
  uint64_t v11;
  size_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  int v19;
  int v20;
  _BYTE *v21;
  int *v22;
  char *v23;
  char *v24;
  int v25;
  int v26;
  _BYTE *v27;
  int *v28;
  int v29;
  int v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v35;
  unint64_t v36;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = (v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  v8 = v7 + 8;
  v9 = v7 + 9;
  v10 = *(_DWORD *)(v5 + 80);
  v11 = *(unsigned int *)(v5 + 84);
  if ((_DWORD)v11)
    v12 = v7 + 8;
  else
    v12 = v7 + 9;
  v13 = v10 & 0xF8 | 7;
  v14 = ~v13;
  if ((v10 & 0x1000F8) == 0
    && ((v12 + ((v12 + v13 + ((v12 + v13) & ~v13)) & ~v13) + 23) & 0xFFFFFFFFFFFFFFF8) + 8 <= 0x18)
  {
    v18 = AssociatedTypeWitness;
    v35 = v6 + 7;
    v36 = v7 + 8;
    if ((_DWORD)v11)
    {
      if (!(*(unsigned int (**)(_DWORD *, uint64_t, uint64_t))(v5 + 48))(a2, v11, AssociatedTypeWitness))
      {
LABEL_19:
        (*(void (**)(_QWORD *, _DWORD *, uint64_t))(v5 + 16))(a1, a2, v18);
        v23 = (char *)a1 + 7;
        v24 = (char *)a2 + 7;
        *(_QWORD *)(((unint64_t)a1 + v6 + 7) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFF8);
        if ((_DWORD)v11)
        {
          v21 = (_BYTE *)((unint64_t)&v23[v36] & v14);
          v22 = (int *)((unint64_t)&v24[v36] & v14);
          v17 = a1;
LABEL_21:
          if (!(*(unsigned int (**)(int *, uint64_t, uint64_t))(v5 + 48))(v22, v11, v18))
          {
LABEL_30:
            (*(void (**)(_BYTE *, int *, uint64_t))(v5 + 16))(v21, v22, v18);
            *(_QWORD *)((unint64_t)&v21[v35] & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v22 + v35) & 0xFFFFFFFFFFFFF8);
            if ((_DWORD)v11)
            {
              v27 = (_BYTE *)((unint64_t)&v21[v7 + 15] & v14);
              v28 = (int *)(((unint64_t)v22 + v7 + 15) & v14);
LABEL_32:
              if (!(*(unsigned int (**)(int *, uint64_t, uint64_t))(v5 + 48))(v28, v11, v18))
              {
LABEL_40:
                (*(void (**)(_BYTE *, int *, uint64_t))(v5 + 16))(v27, v28, v18);
                *(_QWORD *)((unint64_t)&v27[v35] & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v28 + v35) & 0xFFFFFFFFFFFFF8);
                if (!(_DWORD)v11)
                  v27[v36] = 0;
                goto LABEL_42;
              }
LABEL_39:
              memcpy(v27, v28, v12);
LABEL_42:
              v31 = (unint64_t)&v27[v12 + 7] & 0xFFFFFFFFFFFFFFF8;
              v32 = ((unint64_t)v28 + v12 + 7) & 0xFFFFFFFFFFFFFFF8;
              v33 = *(_QWORD *)v32;
              *(_BYTE *)(v31 + 8) = *(_BYTE *)(v32 + 8);
              *(_QWORD *)v31 = v33;
              *(_QWORD *)((unint64_t)&v27[v12 + 23] & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v28
                                                                                              + v12
                                                                                              + 23) & 0xFFFFFFFFFFFFF8);
              return v17;
            }
            v21[v36] = 0;
            v27 = (_BYTE *)((unint64_t)&v21[v7 + 16] & v14);
            v28 = (int *)(((unint64_t)v22 + v7 + 16) & v14);
LABEL_35:
            v29 = v7 + 8;
            if (!*((_BYTE *)v28 + v36))
              goto LABEL_40;
            v30 = *((unsigned __int8 *)v28 + v36) - 1;
            if ((_DWORD)v7 != -8)
            {
              v30 = 0;
              v29 = *v28;
            }
            if ((v29 | v30) == 0xFFFFFFFF)
              goto LABEL_40;
            goto LABEL_39;
          }
LABEL_28:
          memcpy(v21, v22, v12);
          v27 = (_BYTE *)((unint64_t)&v21[v12 + 7] & v14);
          v28 = (int *)(((unint64_t)v22 + v12 + 7) & v14);
          if ((_DWORD)v11)
            goto LABEL_32;
          goto LABEL_35;
        }
        *((_BYTE *)a1 + v36) = 0;
        v21 = (_BYTE *)((unint64_t)&v23[v9] & v14);
        v22 = (int *)((unint64_t)&v24[v9] & v14);
        v17 = a1;
LABEL_24:
        v25 = v7 + 8;
        if (!*((_BYTE *)v22 + v36))
          goto LABEL_30;
        v26 = *((unsigned __int8 *)v22 + v36) - 1;
        if ((_DWORD)v7 != -8)
        {
          v26 = 0;
          v25 = *v22;
        }
        if ((v25 | v26) == 0xFFFFFFFF)
          goto LABEL_30;
        goto LABEL_28;
      }
    }
    else
    {
      if (!*((_BYTE *)a2 + v8))
        goto LABEL_19;
      v19 = *((unsigned __int8 *)a2 + v8) - 1;
      v20 = v7 + 8;
      if ((_DWORD)v7 != -8)
      {
        v19 = 0;
        v20 = *a2;
      }
      if ((v20 | v19) == 0xFFFFFFFF)
        goto LABEL_19;
    }
    v17 = a1;
    memcpy(a1, a2, v12);
    v21 = (_BYTE *)(((unint64_t)a1 + v12 + 7) & v14);
    v22 = (int *)(((unint64_t)a2 + v12 + 7) & v14);
    if ((_DWORD)v11)
      goto LABEL_21;
    goto LABEL_24;
  }
  v16 = *(_QWORD *)a2;
  *a1 = *(_QWORD *)a2;
  v17 = (_QWORD *)(v16 + ((v13 + 16) & v14));
  swift_retain();
  return v17;
}

uint64_t destroy for AnimatableVelocitySampler(_DWORD *a1)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  int v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  int v14;
  int v15;
  _DWORD *v16;
  uint64_t result;
  int v18;
  int v19;
  int v20;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v3 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v4 = *(unsigned int *)(v3 + 84);
  v5 = (*(_QWORD *)(v3 + 64) + 7) & 0xFFFFFFFFFFFFFFF8;
  v6 = v5 + 8;
  if ((_DWORD)v4)
  {
    if ((*(unsigned int (**)(_DWORD *, _QWORD, uint64_t))(v3 + 48))(a1, *(unsigned int *)(v3 + 84), AssociatedTypeWitness))
    {
      goto LABEL_10;
    }
    goto LABEL_9;
  }
  if (!*((_BYTE *)a1 + v6)
    || ((v7 = *((unsigned __int8 *)a1 + v6) - 1, (_DWORD)v5 == -8) ? (v8 = 0) : (v7 = 0, v8 = *a1),
        (v8 | v7) == 0xFFFFFFFF))
  {
LABEL_9:
    (*(void (**)(_DWORD *, uint64_t))(v3 + 8))(a1, AssociatedTypeWitness);
  }
LABEL_10:
  v9 = v5 + 9;
  if ((_DWORD)v4)
    v9 = v5 + 8;
  v10 = *(_DWORD *)(v3 + 80) & 0xF8 | 7;
  v11 = v9 + v10;
  v12 = ~v10;
  v13 = (_DWORD *)(((unint64_t)a1 + v9 + v10) & ~v10);
  if ((_DWORD)v4)
  {
    if ((*(unsigned int (**)(_DWORD *, uint64_t, uint64_t))(v3 + 48))(v13, v4, AssociatedTypeWitness))
      goto LABEL_21;
    goto LABEL_20;
  }
  if (!*((_BYTE *)v13 + v6)
    || ((v14 = *((unsigned __int8 *)v13 + v6) - 1, !(_DWORD)v6) ? (v15 = 0) : (v14 = 0, v15 = *v13),
        (v15 | v14) == 0xFFFFFFFF))
  {
LABEL_20:
    (*(void (**)(_DWORD *, uint64_t))(v3 + 8))(v13, AssociatedTypeWitness);
  }
LABEL_21:
  v16 = (_DWORD *)(((unint64_t)v13 + v11) & v12);
  if ((_DWORD)v4)
  {
    result = (*(uint64_t (**)(_DWORD *, uint64_t, uint64_t))(v3 + 48))(v16, v4, AssociatedTypeWitness);
    if (!(_DWORD)result)
      return (*(uint64_t (**)(_DWORD *, uint64_t))(v3 + 8))(v16, AssociatedTypeWitness);
  }
  else
  {
    if (!*((_BYTE *)v16 + v6))
      return (*(uint64_t (**)(_DWORD *, uint64_t))(v3 + 8))(v16, AssociatedTypeWitness);
    v18 = *((unsigned __int8 *)v16 + v6) - 1;
    if ((_DWORD)v6)
    {
      v18 = 0;
      v19 = *v16;
    }
    else
    {
      v19 = 0;
    }
    v20 = v19 | v18;
    result = (v20 + 1);
    if (v20 == -1)
      return (*(uint64_t (**)(_DWORD *, uint64_t))(v3 + 8))(v16, AssociatedTypeWitness);
  }
  return result;
}

char *initializeWithCopy for AnimatableVelocitySampler(char *a1, int *a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  int v10;
  int v11;
  size_t v12;
  unint64_t v13;
  size_t v14;
  uint64_t v15;
  size_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int *v22;
  unint64_t v23;
  int v24;
  int v25;
  int v26;
  const void *v27;
  size_t v28;
  void *v29;
  _DWORD *v30;
  char *v31;
  uint64_t v32;
  int v33;
  int v34;
  int v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v40;
  uint64_t v41;
  size_t __n;
  char *v43;
  uint64_t v44;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = *(unsigned int *)(v5 + 84);
  v7 = *(_QWORD *)(v5 + 64);
  v41 = v7 + 7;
  v8 = (v7 + 7) & 0xFFFFFFFFFFFFFFF8;
  v9 = v8 + 8;
  v44 = AssociatedTypeWitness;
  if ((_DWORD)v6)
  {
    if (!(*(unsigned int (**)(int *, uint64_t, uint64_t))(v5 + 48))(a2, v6, AssociatedTypeWitness))
      goto LABEL_13;
LABEL_9:
    if ((_DWORD)v6)
      v12 = v8 + 8;
    else
      v12 = v8 + 9;
    memcpy(a1, a2, v12);
    goto LABEL_15;
  }
  if (*((_BYTE *)a2 + v9))
  {
    v10 = *((unsigned __int8 *)a2 + v9) - 1;
    if ((_DWORD)v8 == -8)
    {
      v11 = 0;
    }
    else
    {
      v10 = 0;
      v11 = *a2;
    }
    if ((v11 | v10) != 0xFFFFFFFF)
      goto LABEL_9;
  }
LABEL_13:
  (*(void (**)(char *, int *, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
  *(_QWORD *)((unint64_t)&a1[v7 + 7] & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)a2 + v7 + 7) & 0xFFFFFFFFFFFFF8);
  if (!(_DWORD)v6)
    a1[v9] = 0;
LABEL_15:
  v13 = v8 + 9;
  if ((_DWORD)v6)
    v14 = v8 + 8;
  else
    v14 = v8 + 9;
  v15 = *(_DWORD *)(v5 + 80) & 0xF8 | 7;
  __n = v14;
  v43 = a1;
  v16 = v14 + v15;
  v17 = (unint64_t)&a1[v14 + v15];
  v18 = ~v15;
  v19 = v17 & ~v15;
  v20 = (unint64_t)a2 + v14 + v15;
  v21 = v9;
  v22 = (int *)(v20 & ~v15);
  v40 = v13;
  if ((_DWORD)v6)
  {
    v23 = v21;
    if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v5 + 48))(v20 & ~v15, v6, v44))
      goto LABEL_28;
LABEL_25:
    v27 = (const void *)(v20 & ~v15);
    v28 = __n;
    memcpy((void *)(v17 & ~v15), v27, __n);
    v29 = (void *)((v16 + v19) & v18);
    v30 = (_DWORD *)(((unint64_t)v22 + v16) & v18);
    v31 = v43;
    v32 = v44;
    if ((_DWORD)v6)
      goto LABEL_30;
    v33 = *((unsigned __int8 *)v30 + v23);
    if (!*((_BYTE *)v30 + v23))
      goto LABEL_38;
LABEL_33:
    v34 = v33 - 1;
    if ((_DWORD)v23)
    {
      v34 = 0;
      v35 = *v30;
    }
    else
    {
      v35 = 0;
    }
    if ((v35 | v34) == 0xFFFFFFFF)
      goto LABEL_38;
LABEL_37:
    memcpy(v29, v30, v28);
    goto LABEL_40;
  }
  v23 = v21;
  v24 = *((unsigned __int8 *)v22 + v21);
  if (v24)
  {
    v25 = v24 - 1;
    v26 = v23;
    if ((_DWORD)v23)
    {
      v25 = 0;
      v26 = *v22;
    }
    if ((v26 | v25) != 0xFFFFFFFF)
      goto LABEL_25;
  }
LABEL_28:
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v5 + 16))(v17 & ~v15, v20 & ~v15, v44);
  *(_QWORD *)((v41 + v19) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v22 + v41) & 0xFFFFFFFFFFFFF8);
  if (!(_DWORD)v6)
  {
    *(_BYTE *)(v19 + v23) = 0;
    v29 = (void *)(((v17 | v15) + v40) & v18);
    v30 = (_DWORD *)(((v20 | v15) + v40) & v18);
    v31 = v43;
    v32 = v44;
    v28 = __n;
    v33 = *((unsigned __int8 *)v30 + v23);
    if (!*((_BYTE *)v30 + v23))
      goto LABEL_38;
    goto LABEL_33;
  }
  v29 = (void *)(((v17 | v15) + v23) & v18);
  v30 = (_DWORD *)(((v20 | v15) + v23) & v18);
  v31 = v43;
  v32 = v44;
  v28 = __n;
LABEL_30:
  if ((*(unsigned int (**)(_DWORD *, uint64_t, uint64_t))(v5 + 48))(v30, v6, v32))
    goto LABEL_37;
LABEL_38:
  (*(void (**)(void *, _DWORD *, uint64_t))(v5 + 16))(v29, v30, v32);
  *(_QWORD *)(((unint64_t)v29 + v41) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v30 + v41) & 0xFFFFFFFFFFFFF8);
  if (!(_DWORD)v6)
    *((_BYTE *)v29 + v23) = 0;
LABEL_40:
  v36 = ((unint64_t)v29 + v28 + 7) & 0xFFFFFFFFFFFFFFF8;
  v37 = ((unint64_t)v30 + v28 + 7) & 0xFFFFFFFFFFFFFFF8;
  v38 = *(_QWORD *)v37;
  *(_BYTE *)(v36 + 8) = *(_BYTE *)(v37 + 8);
  *(_QWORD *)v36 = v38;
  *(_QWORD *)(((unint64_t)v29 + v28 + 23) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v30 + v28 + 23) & 0xFFFFFFFFFFFFF8);
  return v31;
}

int *assignWithCopy for AnimatableVelocitySampler(int *a1, int *a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(int *, uint64_t, uint64_t);
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  size_t v20;
  unint64_t v21;
  size_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  _DWORD *v26;
  _DWORD *v27;
  uint64_t (*v28)(_DWORD *, uint64_t, uint64_t);
  _DWORD *v29;
  int v30;
  uint64_t v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  _DWORD *v38;
  _DWORD *v39;
  int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  uint64_t (*v45)(_DWORD *, uint64_t, uint64_t);
  int v46;
  int v47;
  int v48;
  int v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  int v57;
  size_t v58;
  int *v59;
  uint64_t v60;
  uint64_t v61;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = *(unsigned int *)(v5 + 84);
  v7 = *(_QWORD *)(v5 + 64);
  v60 = v7 + 7;
  v61 = AssociatedTypeWitness;
  v8 = (v7 + 7) & 0xFFFFFFFFFFFFFFF8;
  v9 = v8 + 8;
  if ((_DWORD)v6)
  {
    v10 = *(_QWORD *)(AssociatedTypeWitness - 8);
    v11 = *(uint64_t (**)(int *, uint64_t, uint64_t))(v5 + 48);
    v12 = v11(a1, v6, AssociatedTypeWitness);
    v13 = v11(a2, v6, AssociatedTypeWitness);
    if (v12)
    {
      v5 = v10;
      if (!v13)
        goto LABEL_29;
LABEL_25:
      if ((_DWORD)v6)
        v20 = v8 + 8;
      else
        v20 = v8 + 9;
      memcpy(a1, a2, v20);
      goto LABEL_31;
    }
    goto LABEL_20;
  }
  if (!*((_BYTE *)a1 + v9)
    || ((v14 = *((unsigned __int8 *)a1 + v9) - 1, (_DWORD)v8 == -8) ? (v15 = 0) : (v14 = 0, v15 = *a1),
        (v15 | v14) == 0xFFFFFFFF))
  {
    if (!*((_BYTE *)a2 + v9))
      goto LABEL_22;
    v18 = *((unsigned __int8 *)a2 + v9) - 1;
    if ((_DWORD)v8 != -8)
      v18 = 0;
    v10 = *(_QWORD *)(AssociatedTypeWitness - 8);
    if ((_DWORD)v8 == -8)
      v19 = 0;
    else
      v19 = *a2;
    v13 = (v19 | v18) + 1;
LABEL_20:
    v5 = v10;
    if (v13)
    {
      (*(void (**)(int *, uint64_t))(v10 + 8))(a1, AssociatedTypeWitness);
      goto LABEL_25;
    }
LABEL_22:
    (*(void (**)(int *, int *, uint64_t))(v5 + 24))(a1, a2, AssociatedTypeWitness);
    *(_QWORD *)(((unint64_t)a1 + v7 + 7) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)a2 + v7 + 7) & 0xFFFFFFFFFFFFF8);
    goto LABEL_31;
  }
  if (*((_BYTE *)a2 + v9))
  {
    v16 = *((unsigned __int8 *)a2 + v9) - 1;
    if ((_DWORD)v8 == -8)
    {
      v17 = 0;
    }
    else
    {
      v16 = 0;
      v17 = *a2;
    }
    if ((v17 | v16) != 0xFFFFFFFF)
      goto LABEL_25;
  }
LABEL_29:
  (*(void (**)(int *, int *, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
  *(_QWORD *)(((unint64_t)a1 + v7 + 7) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)a2 + v7 + 7) & 0xFFFFFFFFFFFFF8);
  if (!(_DWORD)v6)
    *((_BYTE *)a1 + v9) = 0;
LABEL_31:
  v21 = v8 + 9;
  if ((_DWORD)v6)
    v22 = v8 + 8;
  else
    v22 = v8 + 9;
  v23 = *(_DWORD *)(v5 + 80) & 0xF8 | 7;
  v24 = (unint64_t)a1 + v22 + v23;
  v25 = ~v23;
  v26 = (_DWORD *)(v24 & ~v23);
  v27 = (_DWORD *)(((unint64_t)a2 + v22 + v23) & ~v23);
  v58 = v22 + v23;
  v59 = a1;
  if (!(_DWORD)v6)
  {
    if (*((_BYTE *)v26 + v9))
    {
      v32 = *((unsigned __int8 *)v26 + v9) - 1;
      if ((_DWORD)v9)
      {
        v32 = 0;
        v33 = *v26;
      }
      else
      {
        v33 = 0;
      }
      if ((v33 | v32) != 0xFFFFFFFF)
      {
        v55 = (unint64_t)a1 + v22 + v23;
        v56 = (unint64_t)a2 + v22 + v23;
        v54 = v21;
        if (*((_BYTE *)v27 + v9))
        {
          v34 = *((unsigned __int8 *)v27 + v9) - 1;
          if ((_DWORD)v9)
          {
            v34 = 0;
            v35 = *v27;
          }
          else
          {
            v35 = 0;
          }
          if ((v35 | v34) != 0xFFFFFFFF)
            goto LABEL_37;
        }
        goto LABEL_65;
      }
    }
    if (!*((_BYTE *)v27 + v9))
      goto LABEL_53;
    v36 = *((unsigned __int8 *)v27 + v9) - 1;
    if ((_DWORD)v9)
    {
      v36 = 0;
      v37 = *v27;
    }
    else
    {
      v37 = 0;
    }
    v30 = (v37 | v36) + 1;
LABEL_51:
    a1 = v59;
    if (v30)
    {
      v31 = v61;
      (*(void (**)(_DWORD *, uint64_t))(v5 + 8))(v26, v61);
      memcpy(v26, v27, v22);
      goto LABEL_54;
    }
LABEL_53:
    v31 = v61;
    (*(void (**)(_DWORD *, _DWORD *, uint64_t))(v5 + 24))(v26, v27, v61);
    *(_QWORD *)(((unint64_t)v26 + v60) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v27 + v60) & 0xFFFFFFFFFFFFF8);
LABEL_54:
    v38 = (_DWORD *)(((unint64_t)v26 + v58) & v25);
    v39 = (_DWORD *)(((unint64_t)v27 + v58) & v25);
    if (!(_DWORD)v6)
    {
      v40 = *((unsigned __int8 *)v38 + v9);
      if (*((_BYTE *)v38 + v9))
        goto LABEL_56;
      goto LABEL_72;
    }
    goto LABEL_67;
  }
  v55 = (unint64_t)a1 + v22 + v23;
  v56 = (unint64_t)a2 + v22 + v23;
  v54 = v21;
  v28 = *(uint64_t (**)(_DWORD *, uint64_t, uint64_t))(v5 + 48);
  v29 = (_DWORD *)(v24 & ~v23);
  v57 = v28(v29, v6, v61);
  v25 = ~v23;
  v26 = v29;
  v30 = v28(v27, v6, v61);
  if (!v57)
    goto LABEL_51;
  if (v30)
  {
LABEL_37:
    memcpy(v26, v27, v22);
    a1 = v59;
    v31 = v61;
    goto LABEL_54;
  }
LABEL_65:
  (*(void (**)(_DWORD *, _DWORD *, uint64_t))(v5 + 16))(v26, v27, v61);
  *(_QWORD *)(((unint64_t)v26 + v60) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v27 + v60) & 0xFFFFFFFFFFFFF8);
  if (!(_DWORD)v6)
  {
    *((_BYTE *)v26 + v9) = 0;
    v38 = (_DWORD *)(((v55 | v23) + v54) & v25);
    v39 = (_DWORD *)(((v56 | v23) + v54) & v25);
    a1 = v59;
    v31 = v61;
    v40 = *((unsigned __int8 *)v38 + v9);
    if (*((_BYTE *)v38 + v9))
    {
LABEL_56:
      v41 = v40 - 1;
      if ((_DWORD)v9)
      {
        v41 = 0;
        v42 = *v38;
      }
      else
      {
        v42 = 0;
      }
      if ((v42 | v41) != 0xFFFFFFFF)
      {
        if (*((_BYTE *)v39 + v9))
        {
          v43 = *((unsigned __int8 *)v39 + v9) - 1;
          if ((_DWORD)v9)
          {
            v43 = 0;
            v44 = *v39;
          }
          else
          {
            v44 = 0;
          }
          if ((v44 | v43) != 0xFFFFFFFF)
            goto LABEL_82;
        }
        goto LABEL_69;
      }
    }
LABEL_72:
    if (!*((_BYTE *)v39 + v9))
      goto LABEL_79;
    v48 = *((unsigned __int8 *)v39 + v9) - 1;
    if ((_DWORD)v9)
    {
      v48 = 0;
      v49 = *v39;
    }
    else
    {
      v49 = 0;
    }
    v47 = (v49 | v48) + 1;
LABEL_77:
    if (v47)
    {
      (*(void (**)(_DWORD *, uint64_t))(v5 + 8))(v38, v31);
      goto LABEL_82;
    }
LABEL_79:
    (*(void (**)(_DWORD *, _DWORD *, uint64_t))(v5 + 24))(v38, v39, v31);
    *(_QWORD *)(((unint64_t)v38 + v60) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v39 + v60) & 0xFFFFFFFFFFFFF8);
    goto LABEL_83;
  }
  v38 = (_DWORD *)(((v55 | v23) + v9) & v25);
  v39 = (_DWORD *)(((v56 | v23) + v9) & v25);
  a1 = v59;
  v31 = v61;
LABEL_67:
  v45 = *(uint64_t (**)(_DWORD *, uint64_t, uint64_t))(v5 + 48);
  v46 = v45(v38, v6, v31);
  v47 = v45(v39, v6, v31);
  if (!v46)
    goto LABEL_77;
  if (v47)
  {
LABEL_82:
    memcpy(v38, v39, v22);
    goto LABEL_83;
  }
LABEL_69:
  (*(void (**)(_DWORD *, _DWORD *, uint64_t))(v5 + 16))(v38, v39, v31);
  *(_QWORD *)(((unint64_t)v38 + v60) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v39 + v60) & 0xFFFFFFFFFFFFF8);
  if (!(_DWORD)v6)
    *((_BYTE *)v38 + v9) = 0;
LABEL_83:
  v50 = ((unint64_t)v38 + v22 + 7) & 0xFFFFFFFFFFFFFFF8;
  v51 = ((unint64_t)v39 + v22 + 7) & 0xFFFFFFFFFFFFFFF8;
  v52 = *(_QWORD *)v51;
  *(_BYTE *)(v50 + 8) = *(_BYTE *)(v51 + 8);
  *(_QWORD *)v50 = v52;
  *(_QWORD *)(((unint64_t)v38 + v22 + 23) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v39 + v22 + 23) & 0xFFFFFFFFFFFFF8);
  return a1;
}

char *initializeWithTake for AnimatableVelocitySampler(char *a1, int *a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  int v10;
  int v11;
  size_t v12;
  unint64_t v13;
  size_t v14;
  uint64_t v15;
  size_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int *v22;
  unint64_t v23;
  int v24;
  int v25;
  int v26;
  const void *v27;
  size_t v28;
  void *v29;
  _DWORD *v30;
  char *v31;
  uint64_t v32;
  int v33;
  int v34;
  int v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v40;
  uint64_t v41;
  size_t __n;
  char *v43;
  uint64_t v44;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = *(unsigned int *)(v5 + 84);
  v7 = *(_QWORD *)(v5 + 64);
  v41 = v7 + 7;
  v8 = (v7 + 7) & 0xFFFFFFFFFFFFFFF8;
  v9 = v8 + 8;
  v44 = AssociatedTypeWitness;
  if ((_DWORD)v6)
  {
    if (!(*(unsigned int (**)(int *, uint64_t, uint64_t))(v5 + 48))(a2, v6, AssociatedTypeWitness))
      goto LABEL_13;
LABEL_9:
    if ((_DWORD)v6)
      v12 = v8 + 8;
    else
      v12 = v8 + 9;
    memcpy(a1, a2, v12);
    goto LABEL_15;
  }
  if (*((_BYTE *)a2 + v9))
  {
    v10 = *((unsigned __int8 *)a2 + v9) - 1;
    if ((_DWORD)v8 == -8)
    {
      v11 = 0;
    }
    else
    {
      v10 = 0;
      v11 = *a2;
    }
    if ((v11 | v10) != 0xFFFFFFFF)
      goto LABEL_9;
  }
LABEL_13:
  (*(void (**)(char *, int *, uint64_t))(v5 + 32))(a1, a2, AssociatedTypeWitness);
  *(_QWORD *)((unint64_t)&a1[v7 + 7] & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)a2 + v7 + 7) & 0xFFFFFFFFFFFFF8);
  if (!(_DWORD)v6)
    a1[v9] = 0;
LABEL_15:
  v13 = v8 + 9;
  if ((_DWORD)v6)
    v14 = v8 + 8;
  else
    v14 = v8 + 9;
  v15 = *(_DWORD *)(v5 + 80) & 0xF8 | 7;
  __n = v14;
  v43 = a1;
  v16 = v14 + v15;
  v17 = (unint64_t)&a1[v14 + v15];
  v18 = ~v15;
  v19 = v17 & ~v15;
  v20 = (unint64_t)a2 + v14 + v15;
  v21 = v9;
  v22 = (int *)(v20 & ~v15);
  v40 = v13;
  if ((_DWORD)v6)
  {
    v23 = v21;
    if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v5 + 48))(v20 & ~v15, v6, v44))
      goto LABEL_28;
LABEL_25:
    v27 = (const void *)(v20 & ~v15);
    v28 = __n;
    memcpy((void *)(v17 & ~v15), v27, __n);
    v29 = (void *)((v16 + v19) & v18);
    v30 = (_DWORD *)(((unint64_t)v22 + v16) & v18);
    v31 = v43;
    v32 = v44;
    if ((_DWORD)v6)
      goto LABEL_30;
    v33 = *((unsigned __int8 *)v30 + v23);
    if (!*((_BYTE *)v30 + v23))
      goto LABEL_38;
LABEL_33:
    v34 = v33 - 1;
    if ((_DWORD)v23)
    {
      v34 = 0;
      v35 = *v30;
    }
    else
    {
      v35 = 0;
    }
    if ((v35 | v34) == 0xFFFFFFFF)
      goto LABEL_38;
LABEL_37:
    memcpy(v29, v30, v28);
    goto LABEL_40;
  }
  v23 = v21;
  v24 = *((unsigned __int8 *)v22 + v21);
  if (v24)
  {
    v25 = v24 - 1;
    v26 = v23;
    if ((_DWORD)v23)
    {
      v25 = 0;
      v26 = *v22;
    }
    if ((v26 | v25) != 0xFFFFFFFF)
      goto LABEL_25;
  }
LABEL_28:
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v5 + 32))(v17 & ~v15, v20 & ~v15, v44);
  *(_QWORD *)((v41 + v19) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v22 + v41) & 0xFFFFFFFFFFFFF8);
  if (!(_DWORD)v6)
  {
    *(_BYTE *)(v19 + v23) = 0;
    v29 = (void *)(((v17 | v15) + v40) & v18);
    v30 = (_DWORD *)(((v20 | v15) + v40) & v18);
    v31 = v43;
    v32 = v44;
    v28 = __n;
    v33 = *((unsigned __int8 *)v30 + v23);
    if (!*((_BYTE *)v30 + v23))
      goto LABEL_38;
    goto LABEL_33;
  }
  v29 = (void *)(((v17 | v15) + v23) & v18);
  v30 = (_DWORD *)(((v20 | v15) + v23) & v18);
  v31 = v43;
  v32 = v44;
  v28 = __n;
LABEL_30:
  if ((*(unsigned int (**)(_DWORD *, uint64_t, uint64_t))(v5 + 48))(v30, v6, v32))
    goto LABEL_37;
LABEL_38:
  (*(void (**)(void *, _DWORD *, uint64_t))(v5 + 32))(v29, v30, v32);
  *(_QWORD *)(((unint64_t)v29 + v41) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v30 + v41) & 0xFFFFFFFFFFFFF8);
  if (!(_DWORD)v6)
    *((_BYTE *)v29 + v23) = 0;
LABEL_40:
  v36 = ((unint64_t)v29 + v28 + 7) & 0xFFFFFFFFFFFFFFF8;
  v37 = ((unint64_t)v30 + v28 + 7) & 0xFFFFFFFFFFFFFFF8;
  v38 = *(_QWORD *)v37;
  *(_BYTE *)(v36 + 8) = *(_BYTE *)(v37 + 8);
  *(_QWORD *)v36 = v38;
  *(_QWORD *)(((unint64_t)v29 + v28 + 23) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v30 + v28 + 23) & 0xFFFFFFFFFFFFF8);
  return v31;
}

int *assignWithTake for AnimatableVelocitySampler(int *a1, int *a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(int *, uint64_t, uint64_t);
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  size_t v20;
  unint64_t v21;
  size_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  _DWORD *v26;
  _DWORD *v27;
  uint64_t (*v28)(_DWORD *, uint64_t, uint64_t);
  _DWORD *v29;
  int v30;
  uint64_t v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  _DWORD *v38;
  _DWORD *v39;
  int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  uint64_t (*v45)(_DWORD *, uint64_t, uint64_t);
  int v46;
  int v47;
  int v48;
  int v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  int v57;
  size_t v58;
  int *v59;
  uint64_t v60;
  uint64_t v61;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = *(unsigned int *)(v5 + 84);
  v7 = *(_QWORD *)(v5 + 64);
  v60 = v7 + 7;
  v61 = AssociatedTypeWitness;
  v8 = (v7 + 7) & 0xFFFFFFFFFFFFFFF8;
  v9 = v8 + 8;
  if ((_DWORD)v6)
  {
    v10 = *(_QWORD *)(AssociatedTypeWitness - 8);
    v11 = *(uint64_t (**)(int *, uint64_t, uint64_t))(v5 + 48);
    v12 = v11(a1, v6, AssociatedTypeWitness);
    v13 = v11(a2, v6, AssociatedTypeWitness);
    if (v12)
    {
      v5 = v10;
      if (!v13)
        goto LABEL_29;
LABEL_25:
      if ((_DWORD)v6)
        v20 = v8 + 8;
      else
        v20 = v8 + 9;
      memcpy(a1, a2, v20);
      goto LABEL_31;
    }
    goto LABEL_20;
  }
  if (!*((_BYTE *)a1 + v9)
    || ((v14 = *((unsigned __int8 *)a1 + v9) - 1, (_DWORD)v8 == -8) ? (v15 = 0) : (v14 = 0, v15 = *a1),
        (v15 | v14) == 0xFFFFFFFF))
  {
    if (!*((_BYTE *)a2 + v9))
      goto LABEL_22;
    v18 = *((unsigned __int8 *)a2 + v9) - 1;
    if ((_DWORD)v8 != -8)
      v18 = 0;
    v10 = *(_QWORD *)(AssociatedTypeWitness - 8);
    if ((_DWORD)v8 == -8)
      v19 = 0;
    else
      v19 = *a2;
    v13 = (v19 | v18) + 1;
LABEL_20:
    v5 = v10;
    if (v13)
    {
      (*(void (**)(int *, uint64_t))(v10 + 8))(a1, AssociatedTypeWitness);
      goto LABEL_25;
    }
LABEL_22:
    (*(void (**)(int *, int *, uint64_t))(v5 + 40))(a1, a2, AssociatedTypeWitness);
    *(_QWORD *)(((unint64_t)a1 + v7 + 7) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)a2 + v7 + 7) & 0xFFFFFFFFFFFFF8);
    goto LABEL_31;
  }
  if (*((_BYTE *)a2 + v9))
  {
    v16 = *((unsigned __int8 *)a2 + v9) - 1;
    if ((_DWORD)v8 == -8)
    {
      v17 = 0;
    }
    else
    {
      v16 = 0;
      v17 = *a2;
    }
    if ((v17 | v16) != 0xFFFFFFFF)
      goto LABEL_25;
  }
LABEL_29:
  (*(void (**)(int *, int *, uint64_t))(v5 + 32))(a1, a2, AssociatedTypeWitness);
  *(_QWORD *)(((unint64_t)a1 + v7 + 7) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)a2 + v7 + 7) & 0xFFFFFFFFFFFFF8);
  if (!(_DWORD)v6)
    *((_BYTE *)a1 + v9) = 0;
LABEL_31:
  v21 = v8 + 9;
  if ((_DWORD)v6)
    v22 = v8 + 8;
  else
    v22 = v8 + 9;
  v23 = *(_DWORD *)(v5 + 80) & 0xF8 | 7;
  v24 = (unint64_t)a1 + v22 + v23;
  v25 = ~v23;
  v26 = (_DWORD *)(v24 & ~v23);
  v27 = (_DWORD *)(((unint64_t)a2 + v22 + v23) & ~v23);
  v58 = v22 + v23;
  v59 = a1;
  if (!(_DWORD)v6)
  {
    if (*((_BYTE *)v26 + v9))
    {
      v32 = *((unsigned __int8 *)v26 + v9) - 1;
      if ((_DWORD)v9)
      {
        v32 = 0;
        v33 = *v26;
      }
      else
      {
        v33 = 0;
      }
      if ((v33 | v32) != 0xFFFFFFFF)
      {
        v55 = (unint64_t)a1 + v22 + v23;
        v56 = (unint64_t)a2 + v22 + v23;
        v54 = v21;
        if (*((_BYTE *)v27 + v9))
        {
          v34 = *((unsigned __int8 *)v27 + v9) - 1;
          if ((_DWORD)v9)
          {
            v34 = 0;
            v35 = *v27;
          }
          else
          {
            v35 = 0;
          }
          if ((v35 | v34) != 0xFFFFFFFF)
            goto LABEL_37;
        }
        goto LABEL_65;
      }
    }
    if (!*((_BYTE *)v27 + v9))
      goto LABEL_53;
    v36 = *((unsigned __int8 *)v27 + v9) - 1;
    if ((_DWORD)v9)
    {
      v36 = 0;
      v37 = *v27;
    }
    else
    {
      v37 = 0;
    }
    v30 = (v37 | v36) + 1;
LABEL_51:
    a1 = v59;
    if (v30)
    {
      v31 = v61;
      (*(void (**)(_DWORD *, uint64_t))(v5 + 8))(v26, v61);
      memcpy(v26, v27, v22);
      goto LABEL_54;
    }
LABEL_53:
    v31 = v61;
    (*(void (**)(_DWORD *, _DWORD *, uint64_t))(v5 + 40))(v26, v27, v61);
    *(_QWORD *)(((unint64_t)v26 + v60) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v27 + v60) & 0xFFFFFFFFFFFFF8);
LABEL_54:
    v38 = (_DWORD *)(((unint64_t)v26 + v58) & v25);
    v39 = (_DWORD *)(((unint64_t)v27 + v58) & v25);
    if (!(_DWORD)v6)
    {
      v40 = *((unsigned __int8 *)v38 + v9);
      if (*((_BYTE *)v38 + v9))
        goto LABEL_56;
      goto LABEL_72;
    }
    goto LABEL_67;
  }
  v55 = (unint64_t)a1 + v22 + v23;
  v56 = (unint64_t)a2 + v22 + v23;
  v54 = v21;
  v28 = *(uint64_t (**)(_DWORD *, uint64_t, uint64_t))(v5 + 48);
  v29 = (_DWORD *)(v24 & ~v23);
  v57 = v28(v29, v6, v61);
  v25 = ~v23;
  v26 = v29;
  v30 = v28(v27, v6, v61);
  if (!v57)
    goto LABEL_51;
  if (v30)
  {
LABEL_37:
    memcpy(v26, v27, v22);
    a1 = v59;
    v31 = v61;
    goto LABEL_54;
  }
LABEL_65:
  (*(void (**)(_DWORD *, _DWORD *, uint64_t))(v5 + 32))(v26, v27, v61);
  *(_QWORD *)(((unint64_t)v26 + v60) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v27 + v60) & 0xFFFFFFFFFFFFF8);
  if (!(_DWORD)v6)
  {
    *((_BYTE *)v26 + v9) = 0;
    v38 = (_DWORD *)(((v55 | v23) + v54) & v25);
    v39 = (_DWORD *)(((v56 | v23) + v54) & v25);
    a1 = v59;
    v31 = v61;
    v40 = *((unsigned __int8 *)v38 + v9);
    if (*((_BYTE *)v38 + v9))
    {
LABEL_56:
      v41 = v40 - 1;
      if ((_DWORD)v9)
      {
        v41 = 0;
        v42 = *v38;
      }
      else
      {
        v42 = 0;
      }
      if ((v42 | v41) != 0xFFFFFFFF)
      {
        if (*((_BYTE *)v39 + v9))
        {
          v43 = *((unsigned __int8 *)v39 + v9) - 1;
          if ((_DWORD)v9)
          {
            v43 = 0;
            v44 = *v39;
          }
          else
          {
            v44 = 0;
          }
          if ((v44 | v43) != 0xFFFFFFFF)
            goto LABEL_82;
        }
        goto LABEL_69;
      }
    }
LABEL_72:
    if (!*((_BYTE *)v39 + v9))
      goto LABEL_79;
    v48 = *((unsigned __int8 *)v39 + v9) - 1;
    if ((_DWORD)v9)
    {
      v48 = 0;
      v49 = *v39;
    }
    else
    {
      v49 = 0;
    }
    v47 = (v49 | v48) + 1;
LABEL_77:
    if (v47)
    {
      (*(void (**)(_DWORD *, uint64_t))(v5 + 8))(v38, v31);
      goto LABEL_82;
    }
LABEL_79:
    (*(void (**)(_DWORD *, _DWORD *, uint64_t))(v5 + 40))(v38, v39, v31);
    *(_QWORD *)(((unint64_t)v38 + v60) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v39 + v60) & 0xFFFFFFFFFFFFF8);
    goto LABEL_83;
  }
  v38 = (_DWORD *)(((v55 | v23) + v9) & v25);
  v39 = (_DWORD *)(((v56 | v23) + v9) & v25);
  a1 = v59;
  v31 = v61;
LABEL_67:
  v45 = *(uint64_t (**)(_DWORD *, uint64_t, uint64_t))(v5 + 48);
  v46 = v45(v38, v6, v31);
  v47 = v45(v39, v6, v31);
  if (!v46)
    goto LABEL_77;
  if (v47)
  {
LABEL_82:
    memcpy(v38, v39, v22);
    goto LABEL_83;
  }
LABEL_69:
  (*(void (**)(_DWORD *, _DWORD *, uint64_t))(v5 + 32))(v38, v39, v31);
  *(_QWORD *)(((unint64_t)v38 + v60) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v39 + v60) & 0xFFFFFFFFFFFFF8);
  if (!(_DWORD)v6)
    *((_BYTE *)v38 + v9) = 0;
LABEL_83:
  v50 = ((unint64_t)v38 + v22 + 7) & 0xFFFFFFFFFFFFFFF8;
  v51 = ((unint64_t)v39 + v22 + 7) & 0xFFFFFFFFFFFFFFF8;
  v52 = *(_QWORD *)v51;
  *(_BYTE *)(v50 + 8) = *(_BYTE *)(v51 + 8);
  *(_QWORD *)v50 = v52;
  *(_QWORD *)(((unint64_t)v38 + v22 + 23) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v39 + v22 + 23) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t getEnumTagSinglePayload for AnimatableVelocitySampler(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int v14;

  v4 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = v5 - 1;
  if (!v5)
    v6 = 0;
  v7 = 8;
  if (!v5)
    v7 = 9;
  if (!a2)
    return 0;
  if (v6 < a2)
  {
    v8 = ((*(_QWORD *)(v4 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + v7;
    v9 = *(_DWORD *)(v4 + 80) & 0xF8 | 7;
    if (((((v8 + ((v8 + v9 + ((v8 + v9) & ~v9)) & ~v9) + 23) & 0xFFFFFFFFFFFFFFF8) + 8) & 0xFFFFFFF8) != 0)
      v10 = 2;
    else
      v10 = a2 - v6 + 1;
    if (v10 >= 0x10000)
      v11 = 4;
    else
      v11 = 2;
    if (v10 < 0x100)
      v11 = 1;
    if (v10 >= 2)
      v12 = v11;
    else
      v12 = 0;
    __asm { BR              X14 }
  }
  if (v5 < 2)
    return 0;
  v14 = (*(uint64_t (**)(uint64_t))(v4 + 48))(a1);
  if (v14 >= 2)
    return v14 - 1;
  else
    return 0;
}

void storeEnumTagSinglePayload for AnimatableVelocitySampler(unsigned int *a1, unsigned int a2, unsigned int a3)
{
  int v6;
  uint64_t v7;
  int v8;
  int v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  size_t v14;
  unsigned int v15;
  int v16;
  unsigned int v17;

  v6 = 0;
  v7 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v8 = *(_DWORD *)(v7 + 84);
  v10 = v8 - 1;
  if (!v8)
    v10 = 0;
  v11 = (*(_QWORD *)(v7 + 64) + 7) & 0xFFFFFFFFFFFFFFF8;
  v12 = v11 + 8;
  v13 = v11 + 9;
  if (v8)
    v13 = v12;
  v9 = *(_DWORD *)(v7 + 80);
  v14 = ((v13
        + ((v13
          + (v9 & 0xF8 | 7)
          + ((v13 + (v9 & 0xF8 | 7)) & ~(v9 & 0xF8 | 7))) & ~(v9 & 0xF8 | 7))
        + 23) & 0xFFFFFFFFFFFFFFF8)
      + 8;
  if (v10 < a3)
  {
    if ((((_DWORD)v13
         + (((_DWORD)v13 + (v9 & 0xF8 | 7) + (((_DWORD)v13 + (v9 & 0xF8 | 7)) & ~(v9 & 0xF8 | 7))) & ~(v9 & 0xF8 | 7))
         + 23) & 0xFFFFFFF8) == 0xFFFFFFF8)
      v15 = a3 - v10 + 1;
    else
      v15 = 2;
    if (v15 >= 0x10000)
      v16 = 4;
    else
      v16 = 2;
    if (v15 < 0x100)
      v16 = 1;
    if (v15 >= 2)
      v6 = v16;
    else
      v6 = 0;
  }
  if (a2 > v10)
  {
    if ((_DWORD)v14)
    {
      v17 = ~v10 + a2;
      bzero(a1, v14);
      *a1 = v17;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X11 }
}

void sub_234F987C4(int a1, size_t a2, unsigned int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  uint64_t v16;
  _DWORD *v17;
  int v18;
  uint64_t v19;
  int v20;

  *((_BYTE *)v17 + v19) = 0;
  if (v18 && a3 >= 2)
  {
    if (v18 + 1 <= a3)
    {
      if (v18 != -1)
        (*(void (**)(_DWORD *, _QWORD))(v16 + 56))(v17, (v18 + 1));
    }
    else if ((_DWORD)a2)
    {
      v20 = v18 - a3;
      bzero(v17, a2);
      *v17 = v20;
    }
  }
}

uint64_t type metadata accessor for AnimatableVelocitySampler(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AnimatableVelocitySampler);
}

uint64_t specialized _GestureOutputs.reallyWrap<A>(_:kind:properties:inputs:data:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return specialized _GestureOutputs.reallyWrap<A>(_:kind:properties:inputs:data:)(a1, a2, a3, a4, a5, &lazy cache variable for type metadata for RequiredTapCountWriter<TappableEvent>, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for RequiredTapCountWriter);
}

{
  return specialized _GestureOutputs.reallyWrap<A>(_:kind:properties:inputs:data:)(a1, a2, a3, a4, a5, &lazy cache variable for type metadata for CategoryGesture<TappableEvent>, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for CategoryGesture);
}

{
  return specialized _GestureOutputs.reallyWrap<A>(_:kind:properties:inputs:data:)(a1, a2, a3, a4, a5, &lazy cache variable for type metadata for RepeatGesture<TappableEvent>, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for RepeatGesture);
}

{
  return specialized _GestureOutputs.reallyWrap<A>(_:kind:properties:inputs:data:)(a1, a2, a3, a4, a5, &lazy cache variable for type metadata for SingleTapGesture<TappableEvent>, (uint64_t)&protocol witness table for TappableEvent, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for SingleTapGesture);
}

{
  return specialized _GestureOutputs.reallyWrap<A>(_:kind:properties:inputs:data:)(a1, a2, a3, a4, a5, (unint64_t *)&lazy cache variable for type metadata for EventFilter<TappableEvent>, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EventFilter);
}

{
  return specialized _GestureOutputs.reallyWrap<A>(_:kind:properties:inputs:data:)(a1, a2, a3, a4, a5, &lazy cache variable for type metadata for Map2Gesture<TappableEvent, ModifierGesture<CoordinateSpaceGesture<CGFloat>, DistanceGesture>, TappableEvent>, (uint64_t (*)(uint64_t))type metadata accessor for ModifierGesture<CoordinateSpaceGesture<CGFloat>, DistanceGesture>, &lazy protocol witness table cache variable for type ModifierGesture<CoordinateSpaceGesture<CGFloat>, DistanceGesture> and conformance ModifierGesture<A, B>);
}

{
  return specialized _GestureOutputs.reallyWrap<A>(_:kind:properties:inputs:data:)(a1, a2, a3, a4, a5, &lazy cache variable for type metadata for Map2Gesture<TappableEvent, ModifierGesture<DurationGesture<TappableEvent>, EventListener<TappableEvent>>, TappableEvent>, (uint64_t (*)(uint64_t))type metadata accessor for ModifierGesture<DurationGesture<TappableEvent>, EventListener<TappableEvent>>, &lazy protocol witness table cache variable for type ModifierGesture<DurationGesture<TappableEvent>, EventListener<TappableEvent>> and conformance ModifierGesture<A, B>);
}

{
  return specialized _GestureOutputs.reallyWrap<A>(_:kind:properties:inputs:data:)(a1, a2, a3, a4, a5, &lazy cache variable for type metadata for EventListener<TappableEvent>, (uint64_t)&protocol witness table for TappableEvent, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EventListener);
}

{
  return specialized _GestureOutputs.reallyWrap<A>(_:kind:properties:inputs:data:)(a1, a2, a3, a4, a5, &lazy cache variable for type metadata for DependentGesture<TappableEvent>, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for DependentGesture);
}

{
  return specialized _GestureOutputs.reallyWrap<A>(_:kind:properties:inputs:data:)(a1, a2, a3, a4, a5, &lazy cache variable for type metadata for MapGesture<TappableEvent, TappableEvent>, (uint64_t)&type metadata for TappableEvent, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for MapGesture);
}

uint64_t specialized _GestureOutputs.reallyWrap<A>(_:kind:properties:inputs:data:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t (*a7)(uint64_t), unint64_t *a8)
{
  id v9;
  id v10;
  id v11;
  uint64_t result;
  uint64_t v13;
  _OWORD v14[2];
  uint64_t v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  _s7SwiftUI11Map2GestureVyAA13TappableEventVAA08ModifierD0VyAA015CoordinateSpaceD0Vy12CoreGraphics7CGFloatVGAA08DistanceD0VGAEGMaTm_1(0, a6, a7, a8);
  outlined retain of _GestureInputs(a3);
  specialized _GestureInputs.intern<A>(_:id:)(0);
  AGGraphClearUpdate();
  v9 = (id)AGSubgraphGetCurrent();
  AGSubgraphSetCurrent();
  AGGraphCreateIndirectAttribute2();
  AGGraphSetIndirectAttribute();
  AGSubgraphSetCurrent();

  AGGraphSetUpdate();
  specialized _GestureInputs.intern<A>(_:id:)(0);
  AGGraphClearUpdate();
  v10 = (id)AGSubgraphGetCurrent();
  AGSubgraphSetCurrent();
  AGGraphCreateIndirectAttribute2();
  AGGraphSetIndirectAttribute();
  AGSubgraphSetCurrent();

  AGGraphSetUpdate();
  v15 = 0;
  memset(v14, 0, sizeof(v14));
  specialized _GestureInputs.intern<A>(_:id:)((uint64_t)v14, 0);
  AGGraphClearUpdate();
  v11 = (id)AGSubgraphGetCurrent();
  AGSubgraphSetCurrent();
  AGGraphCreateIndirectAttribute2();
  AGGraphSetIndirectAttribute();
  AGSubgraphSetCurrent();

  AGGraphSetUpdate();
  outlined release of _GestureInputs(a3);
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for GestureDebug.Value<TappableEvent>, (uint64_t)&type metadata for TappableEvent, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for GestureDebug.Value);
  lazy protocol witness table accessor for type GestureDebug.Value<TappableEvent> and conformance GestureDebug.Value<A>();
  result = Attribute.init<A>(body:value:flags:update:)();
  *(_DWORD *)(v13 + 4) = result;
  return result;
}

uint64_t specialized _GestureOutputs.reallyWrap<A>(_:kind:properties:inputs:data:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v4;
  id v5;
  id v6;
  uint64_t result;
  uint64_t v8;
  _OWORD v9[2];
  uint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for CoordinateSpaceGesture<CGFloat>, MEMORY[0x24BEE50B0], (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for CoordinateSpaceGesture);
  outlined retain of _GestureInputs(a3);
  specialized _GestureInputs.intern<A>(_:id:)(0);
  AGGraphClearUpdate();
  v4 = (id)AGSubgraphGetCurrent();
  AGSubgraphSetCurrent();
  AGGraphCreateIndirectAttribute2();
  AGGraphSetIndirectAttribute();
  AGSubgraphSetCurrent();

  AGGraphSetUpdate();
  specialized _GestureInputs.intern<A>(_:id:)(0);
  AGGraphClearUpdate();
  v5 = (id)AGSubgraphGetCurrent();
  AGSubgraphSetCurrent();
  AGGraphCreateIndirectAttribute2();
  AGGraphSetIndirectAttribute();
  AGSubgraphSetCurrent();

  AGGraphSetUpdate();
  v10 = 0;
  memset(v9, 0, sizeof(v9));
  specialized _GestureInputs.intern<A>(_:id:)((uint64_t)v9, 0);
  AGGraphClearUpdate();
  v6 = (id)AGSubgraphGetCurrent();
  AGSubgraphSetCurrent();
  AGGraphCreateIndirectAttribute2();
  AGGraphSetIndirectAttribute();
  AGSubgraphSetCurrent();

  AGGraphSetUpdate();
  outlined release of _GestureInputs(a3);
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for GestureDebug.Value<CGFloat>, MEMORY[0x24BEE50B0], (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for GestureDebug.Value);
  lazy protocol witness table accessor for type GestureDebug.Value<CGFloat> and conformance GestureDebug.Value<A>();
  result = Attribute.init<A>(body:value:flags:update:)();
  *(_DWORD *)(v8 + 4) = result;
  return result;
}

{
  id v4;
  id v5;
  id v6;
  uint64_t result;
  uint64_t v8;
  _OWORD v9[2];
  uint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  outlined retain of _GestureInputs(a3);
  specialized _GestureInputs.intern<A>(_:id:)(0);
  AGGraphClearUpdate();
  v4 = (id)AGSubgraphGetCurrent();
  AGSubgraphSetCurrent();
  AGGraphCreateIndirectAttribute2();
  AGGraphSetIndirectAttribute();
  AGSubgraphSetCurrent();

  AGGraphSetUpdate();
  specialized _GestureInputs.intern<A>(_:id:)(0);
  AGGraphClearUpdate();
  v5 = (id)AGSubgraphGetCurrent();
  AGSubgraphSetCurrent();
  AGGraphCreateIndirectAttribute2();
  AGGraphSetIndirectAttribute();
  AGSubgraphSetCurrent();

  AGGraphSetUpdate();
  v10 = 0;
  memset(v9, 0, sizeof(v9));
  specialized _GestureInputs.intern<A>(_:id:)((uint64_t)v9, 0);
  AGGraphClearUpdate();
  v6 = (id)AGSubgraphGetCurrent();
  AGSubgraphSetCurrent();
  AGGraphCreateIndirectAttribute2();
  AGGraphSetIndirectAttribute();
  AGSubgraphSetCurrent();

  AGGraphSetUpdate();
  outlined release of _GestureInputs(a3);
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for GestureDebug.Value<CGFloat>, MEMORY[0x24BEE50B0], (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for GestureDebug.Value);
  lazy protocol witness table accessor for type GestureDebug.Value<CGFloat> and conformance GestureDebug.Value<A>();
  result = Attribute.init<A>(body:value:flags:update:)();
  *(_DWORD *)(v8 + 4) = result;
  return result;
}

{
  id v4;
  id v5;
  id v6;
  uint64_t result;
  uint64_t v8;
  _OWORD v9[2];
  uint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  type metadata accessor for StateContainerGesture<DistanceGesture.StateType, SpatialEvent, CGFloat>();
  outlined retain of _GestureInputs(a3);
  specialized _GestureInputs.intern<A>(_:id:)(0);
  AGGraphClearUpdate();
  v4 = (id)AGSubgraphGetCurrent();
  AGSubgraphSetCurrent();
  AGGraphCreateIndirectAttribute2();
  AGGraphSetIndirectAttribute();
  AGSubgraphSetCurrent();

  AGGraphSetUpdate();
  specialized _GestureInputs.intern<A>(_:id:)(0);
  AGGraphClearUpdate();
  v5 = (id)AGSubgraphGetCurrent();
  AGSubgraphSetCurrent();
  AGGraphCreateIndirectAttribute2();
  AGGraphSetIndirectAttribute();
  AGSubgraphSetCurrent();

  AGGraphSetUpdate();
  v10 = 0;
  memset(v9, 0, sizeof(v9));
  specialized _GestureInputs.intern<A>(_:id:)((uint64_t)v9, 0);
  AGGraphClearUpdate();
  v6 = (id)AGSubgraphGetCurrent();
  AGSubgraphSetCurrent();
  AGGraphCreateIndirectAttribute2();
  AGGraphSetIndirectAttribute();
  AGSubgraphSetCurrent();

  AGGraphSetUpdate();
  outlined release of _GestureInputs(a3);
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for GestureDebug.Value<CGFloat>, MEMORY[0x24BEE50B0], (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for GestureDebug.Value);
  lazy protocol witness table accessor for type GestureDebug.Value<CGFloat> and conformance GestureDebug.Value<A>();
  result = Attribute.init<A>(body:value:flags:update:)();
  *(_DWORD *)(v8 + 4) = result;
  return result;
}

{
  id v4;
  id v5;
  id v6;
  uint64_t result;
  uint64_t v8;
  _OWORD v9[2];
  uint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EventListener<SpatialEvent>, (uint64_t)&type metadata for SpatialEvent, (uint64_t)&protocol witness table for SpatialEvent, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EventListener);
  outlined retain of _GestureInputs(a3);
  specialized _GestureInputs.intern<A>(_:id:)(0);
  AGGraphClearUpdate();
  v4 = (id)AGSubgraphGetCurrent();
  AGSubgraphSetCurrent();
  AGGraphCreateIndirectAttribute2();
  AGGraphSetIndirectAttribute();
  AGSubgraphSetCurrent();

  AGGraphSetUpdate();
  specialized _GestureInputs.intern<A>(_:id:)(0);
  AGGraphClearUpdate();
  v5 = (id)AGSubgraphGetCurrent();
  AGSubgraphSetCurrent();
  AGGraphCreateIndirectAttribute2();
  AGGraphSetIndirectAttribute();
  AGSubgraphSetCurrent();

  AGGraphSetUpdate();
  v10 = 0;
  memset(v9, 0, sizeof(v9));
  specialized _GestureInputs.intern<A>(_:id:)((uint64_t)v9, 0);
  AGGraphClearUpdate();
  v6 = (id)AGSubgraphGetCurrent();
  AGSubgraphSetCurrent();
  AGGraphCreateIndirectAttribute2();
  AGGraphSetIndirectAttribute();
  AGSubgraphSetCurrent();

  AGGraphSetUpdate();
  outlined release of _GestureInputs(a3);
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for GestureDebug.Value<SpatialEvent>, (uint64_t)&type metadata for SpatialEvent, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for GestureDebug.Value);
  lazy protocol witness table accessor for type GestureDebug.Value<SpatialEvent> and conformance GestureDebug.Value<A>();
  result = Attribute.init<A>(body:value:flags:update:)();
  *(_DWORD *)(v8 + 4) = result;
  return result;
}

{
  id v4;
  id v5;
  id v6;
  uint64_t result;
  uint64_t v8;
  _OWORD v9[2];
  uint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for DurationGesture<TappableEvent>, (uint64_t)&type metadata for TappableEvent, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for DurationGesture);
  outlined retain of _GestureInputs(a3);
  specialized _GestureInputs.intern<A>(_:id:)(0);
  AGGraphClearUpdate();
  v4 = (id)AGSubgraphGetCurrent();
  AGSubgraphSetCurrent();
  AGGraphCreateIndirectAttribute2();
  AGGraphSetIndirectAttribute();
  AGSubgraphSetCurrent();

  AGGraphSetUpdate();
  specialized _GestureInputs.intern<A>(_:id:)(0);
  AGGraphClearUpdate();
  v5 = (id)AGSubgraphGetCurrent();
  AGSubgraphSetCurrent();
  AGGraphCreateIndirectAttribute2();
  AGGraphSetIndirectAttribute();
  AGSubgraphSetCurrent();

  AGGraphSetUpdate();
  v10 = 0;
  memset(v9, 0, sizeof(v9));
  specialized _GestureInputs.intern<A>(_:id:)((uint64_t)v9, 0);
  AGGraphClearUpdate();
  v6 = (id)AGSubgraphGetCurrent();
  AGSubgraphSetCurrent();
  AGGraphCreateIndirectAttribute2();
  AGGraphSetIndirectAttribute();
  AGSubgraphSetCurrent();

  AGGraphSetUpdate();
  outlined release of _GestureInputs(a3);
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for GestureDebug.Value<Double>, MEMORY[0x24BEE13C8], (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for GestureDebug.Value);
  lazy protocol witness table accessor for type GestureDebug.Value<Double> and conformance GestureDebug.Value<A>();
  result = Attribute.init<A>(body:value:flags:update:)();
  *(_DWORD *)(v8 + 4) = result;
  return result;
}

{
  id v4;
  id v5;
  id v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  _OWORD v10[2];
  uint64_t v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v8 = MEMORY[0x24BEE4AE0] + 8;
  type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for AnyGesture<()>, MEMORY[0x24BEE4AE0] + 8, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for AnyGesture);
  outlined retain of _GestureInputs(a3);
  specialized _GestureInputs.intern<A>(_:id:)(0);
  AGGraphClearUpdate();
  v4 = (id)AGSubgraphGetCurrent();
  AGSubgraphSetCurrent();
  AGGraphCreateIndirectAttribute2();
  AGGraphSetIndirectAttribute();
  AGSubgraphSetCurrent();

  AGGraphSetUpdate();
  specialized _GestureInputs.intern<A>(_:id:)(0);
  AGGraphClearUpdate();
  v5 = (id)AGSubgraphGetCurrent();
  AGSubgraphSetCurrent();
  AGGraphCreateIndirectAttribute2();
  AGGraphSetIndirectAttribute();
  AGSubgraphSetCurrent();

  AGGraphSetUpdate();
  v11 = 0;
  memset(v10, 0, sizeof(v10));
  specialized _GestureInputs.intern<A>(_:id:)((uint64_t)v10, 0);
  AGGraphClearUpdate();
  v6 = (id)AGSubgraphGetCurrent();
  AGSubgraphSetCurrent();
  AGGraphCreateIndirectAttribute2();
  AGGraphSetIndirectAttribute();
  AGSubgraphSetCurrent();

  AGGraphSetUpdate();
  outlined release of _GestureInputs(a3);
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for GestureDebug.Value<()>, v8, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for GestureDebug.Value);
  lazy protocol witness table accessor for type GestureDebug.Value<()> and conformance GestureDebug.Value<A>();
  result = Attribute.init<A>(body:value:flags:update:)();
  *(_DWORD *)(v9 + 4) = result;
  return result;
}

{
  id v4;
  id v5;
  id v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  _OWORD v10[2];
  uint64_t v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  outlined retain of _GestureInputs(a3);
  specialized _GestureInputs.intern<A>(_:id:)(0);
  AGGraphClearUpdate();
  v4 = (id)AGSubgraphGetCurrent();
  AGSubgraphSetCurrent();
  AGGraphCreateIndirectAttribute2();
  AGGraphSetIndirectAttribute();
  AGSubgraphSetCurrent();

  AGGraphSetUpdate();
  specialized _GestureInputs.intern<A>(_:id:)(0);
  AGGraphClearUpdate();
  v5 = (id)AGSubgraphGetCurrent();
  AGSubgraphSetCurrent();
  AGGraphCreateIndirectAttribute2();
  AGGraphSetIndirectAttribute();
  AGSubgraphSetCurrent();

  AGGraphSetUpdate();
  v11 = 0;
  memset(v10, 0, sizeof(v10));
  specialized _GestureInputs.intern<A>(_:id:)((uint64_t)v10, 0);
  AGGraphClearUpdate();
  v6 = (id)AGSubgraphGetCurrent();
  AGSubgraphSetCurrent();
  AGGraphCreateIndirectAttribute2();
  AGGraphSetIndirectAttribute();
  AGSubgraphSetCurrent();

  AGGraphSetUpdate();
  outlined release of _GestureInputs(a3);
  v7 = MEMORY[0x24BEE4078];
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for GestureDebug.Value<Never>, v7, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for GestureDebug.Value);
  lazy protocol witness table accessor for type GestureDebug.Value<Never> and conformance GestureDebug.Value<A>();
  result = Attribute.init<A>(body:value:flags:update:)();
  *(_DWORD *)(v9 + 4) = result;
  return result;
}

uint64_t specialized _GestureOutputs.reallyWrap<A>(_:kind:properties:inputs:data:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t *a6, uint64_t a7, uint64_t (*a8)(_QWORD, uint64_t, uint64_t))
{
  id v9;
  id v10;
  id v11;
  uint64_t result;
  uint64_t v13;
  _OWORD v14[2];
  uint64_t v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, a6, (uint64_t)&type metadata for TappableEvent, a7, a8);
  outlined retain of _GestureInputs(a3);
  specialized _GestureInputs.intern<A>(_:id:)(0);
  AGGraphClearUpdate();
  v9 = (id)AGSubgraphGetCurrent();
  AGSubgraphSetCurrent();
  AGGraphCreateIndirectAttribute2();
  AGGraphSetIndirectAttribute();
  AGSubgraphSetCurrent();

  AGGraphSetUpdate();
  specialized _GestureInputs.intern<A>(_:id:)(0);
  AGGraphClearUpdate();
  v10 = (id)AGSubgraphGetCurrent();
  AGSubgraphSetCurrent();
  AGGraphCreateIndirectAttribute2();
  AGGraphSetIndirectAttribute();
  AGSubgraphSetCurrent();

  AGGraphSetUpdate();
  v15 = 0;
  memset(v14, 0, sizeof(v14));
  specialized _GestureInputs.intern<A>(_:id:)((uint64_t)v14, 0);
  AGGraphClearUpdate();
  v11 = (id)AGSubgraphGetCurrent();
  AGSubgraphSetCurrent();
  AGGraphCreateIndirectAttribute2();
  AGGraphSetIndirectAttribute();
  AGSubgraphSetCurrent();

  AGGraphSetUpdate();
  outlined release of _GestureInputs(a3);
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for GestureDebug.Value<TappableEvent>, (uint64_t)&type metadata for TappableEvent, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for GestureDebug.Value);
  lazy protocol witness table accessor for type GestureDebug.Value<TappableEvent> and conformance GestureDebug.Value<A>();
  result = Attribute.init<A>(body:value:flags:update:)();
  *(_DWORD *)(v13 + 4) = result;
  return result;
}

uint64_t specialized _GestureOutputs.reallyWrap<A>(_:kind:properties:inputs:data:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t *a6, uint64_t (*a7)(_QWORD, uint64_t))
{
  id v8;
  id v9;
  id v10;
  uint64_t result;
  uint64_t v12;
  _OWORD v13[2];
  uint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  type metadata accessor for MutableBox<CachedEnvironment>(0, a6, (uint64_t)&type metadata for TappableEvent, a7);
  outlined retain of _GestureInputs(a3);
  specialized _GestureInputs.intern<A>(_:id:)(0);
  AGGraphClearUpdate();
  v8 = (id)AGSubgraphGetCurrent();
  AGSubgraphSetCurrent();
  AGGraphCreateIndirectAttribute2();
  AGGraphSetIndirectAttribute();
  AGSubgraphSetCurrent();

  AGGraphSetUpdate();
  specialized _GestureInputs.intern<A>(_:id:)(0);
  AGGraphClearUpdate();
  v9 = (id)AGSubgraphGetCurrent();
  AGSubgraphSetCurrent();
  AGGraphCreateIndirectAttribute2();
  AGGraphSetIndirectAttribute();
  AGSubgraphSetCurrent();

  AGGraphSetUpdate();
  v14 = 0;
  memset(v13, 0, sizeof(v13));
  specialized _GestureInputs.intern<A>(_:id:)((uint64_t)v13, 0);
  AGGraphClearUpdate();
  v10 = (id)AGSubgraphGetCurrent();
  AGSubgraphSetCurrent();
  AGGraphCreateIndirectAttribute2();
  AGGraphSetIndirectAttribute();
  AGSubgraphSetCurrent();

  AGGraphSetUpdate();
  outlined release of _GestureInputs(a3);
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for GestureDebug.Value<TappableEvent>, (uint64_t)&type metadata for TappableEvent, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for GestureDebug.Value);
  lazy protocol witness table accessor for type GestureDebug.Value<TappableEvent> and conformance GestureDebug.Value<A>();
  result = Attribute.init<A>(body:value:flags:update:)();
  *(_DWORD *)(v12 + 4) = result;
  return result;
}

uint64_t specialized static AnyGesture._makeGesture(gesture:inputs:)@<X0>(int a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  __int128 v6;
  __int128 v7;
  __int128 v8;
  int IndirectAttribute2;
  int v10;
  int v11;
  uint64_t v12;
  int v13;
  id v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  _BYTE v26[28];
  int v27;
  int v28;
  uint64_t v29;
  int v30;
  __int128 v31;
  uint64_t v32;
  int v33;
  _OWORD v34[9];
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  _OWORD v41[2];
  uint64_t v42;

  v42 = *MEMORY[0x24BDAC8D0];
  v6 = *(_OWORD *)(a2 + 80);
  v39 = *(_OWORD *)(a2 + 64);
  v40 = v6;
  v41[0] = *(_OWORD *)(a2 + 96);
  *(_OWORD *)((char *)v41 + 12) = *(_OWORD *)(a2 + 108);
  v7 = *(_OWORD *)(a2 + 16);
  v35 = *(_OWORD *)a2;
  v36 = v7;
  v8 = *(_OWORD *)(a2 + 48);
  v37 = *(_OWORD *)(a2 + 32);
  v38 = v8;
  specialized _GestureInputs.intern<A>(_:id:)(768, 0);
  IndirectAttribute2 = AGGraphCreateIndirectAttribute2();
  v10 = *MEMORY[0x24BE096C0];
  v11 = *MEMORY[0x24BE096C0];
  if ((*(_BYTE *)(a2 + 120) & 8) != 0)
  {
    if (one-time initialization token for defaultValue != -1)
      swift_once();
    v34[6] = xmmword_2561B4810;
    v34[7] = xmmword_2561B4820;
    v34[8] = xmmword_2561B4830;
    v34[2] = xmmword_2561B47D0;
    v34[3] = xmmword_2561B47E0;
    v34[4] = xmmword_2561B47F0;
    v34[5] = xmmword_2561B4800;
    v34[0] = static GestureDebug.Data.defaultValue;
    v34[1] = xmmword_2561B47C0;
    outlined retain of GestureDebug.Data((uint64_t)v34);
    specialized _GestureInputs.intern<A>(_:id:)((uint64_t)v34, 0);
    outlined release of GestureDebug.Data((uint64_t)v34);
    v11 = AGGraphCreateIndirectAttribute2();
  }
  PreferencesInputs.makeIndirectOutputs()((uint64_t)&v19);
  v12 = v19;
  v13 = v20;
  v14 = (id)AGSubgraphGetCurrent();
  if (!v14)
    __break(1u);
  *(_OWORD *)&v26[12] = *(_OWORD *)((char *)v41 + 12);
  v24 = v39;
  v25 = v40;
  *(_OWORD *)v26 = v41[0];
  v20 = v35;
  v21 = v36;
  v22 = v37;
  v23 = v38;
  LODWORD(v19) = a1;
  v27 = IndirectAttribute2;
  v28 = v11;
  v29 = v12;
  v30 = v13;
  v32 = 0;
  v31 = (unint64_t)v14;
  v33 = 0;
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  outlined retain of _GestureInputs(a2);
  v15 = MEMORY[0x24BEE4AE0] + 8;
  type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for AnyGestureInfo<()>.Value, MEMORY[0x24BEE4AE0] + 8, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for AnyGestureInfo.Value);
  type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for AnyGestureInfo<()>, v15, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for AnyGestureInfo);
  lazy protocol witness table accessor for type AnyGestureInfo<()> and conformance AnyGestureInfo<A>();
  swift_bridgeObjectRetain();
  Attribute.init<A>(body:value:flags:update:)();
  outlined release of AnyGestureInfo<A>((uint64_t)&v19);
  AGGraphGetFlags();
  AGGraphSetFlags();
  result = AGGraphSetIndirectDependency();
  if (v11 != v10)
    result = AGGraphSetIndirectDependency();
  v17 = *(_QWORD *)(v12 + 16);
  if (v17)
  {
    swift_bridgeObjectRetain();
    v18 = 48;
    do
    {
      AGGraphSetIndirectDependency();
      v18 += 24;
      --v17;
    }
    while (v17);
    result = swift_bridgeObjectRelease();
  }
  *(_DWORD *)a3 = IndirectAttribute2;
  *(_DWORD *)(a3 + 4) = v11;
  *(_QWORD *)(a3 + 8) = v12;
  *(_DWORD *)(a3 + 16) = v13;
  return result;
}

void specialized AnyGestureResponder.makeWrappedGesture(inputs:makeChild:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  id *v7;
  uint64_t v8;
  int v9;
  int v10;
  id v11;
  uint64_t v12;
  void *v13;
  id v14;
  uint64_t v15;
  void *v16;
  id v17;
  id v18;
  uint64_t v19;
  unint64_t v20;
  id v21;
  _DWORD v22[2];
  uint64_t v23;
  int v24;

  swift_retain();
  specialized _GestureInputs.makeDefaultOutputs<A>()((uint64_t)v22);
  v7 = (id *)v22[0];
  v6 = v22[1];
  v8 = v23;
  v9 = v24;
  if (!AGSubgraphIsValid())
  {
    swift_release_n();
LABEL_13:
    *(_DWORD *)a3 = (_DWORD)v7;
    *(_DWORD *)(a3 + 4) = v6;
    *(_QWORD *)(a3 + 8) = v8;
    *(_DWORD *)(a3 + 16) = v9;
    return;
  }
  v10 = *(_DWORD *)(a1 + 120);
  v21 = (id)AGSubgraphGetCurrent();
  if (!v21)
  {
    swift_release();
    __break(1u);
LABEL_15:
    swift_release();
    __break(1u);
    goto LABEL_16;
  }
  v19 = a1;
  v20 = (unint64_t)v7;
  v11 = (id)AGSubgraphGetGraph();
  v12 = AGSubgraphCreate();

  v7 = (id *)(a2 + 264);
  swift_beginAccess();
  v13 = *(void **)(a2 + 264);
  *(_QWORD *)(a2 + 264) = v12;

  if (!*(_QWORD *)(a2 + 264))
    goto LABEL_15;
  AGSubgraphAddChild2();
  if (!*v7)
  {
LABEL_16:
    swift_release();
    __break(1u);
LABEL_17:
    swift_release();
    __break(1u);
    goto LABEL_18;
  }
  AGSubgraphAddChild();
  if ((v10 & 0x10) == 0)
    goto LABEL_11;
  v14 = (id)AGSubgraphGetGraph();
  v15 = AGSubgraphCreate();

  swift_beginAccess();
  v16 = *(void **)(a2 + 272);
  *(_QWORD *)(a2 + 272) = v15;

  if (!*(_QWORD *)(a2 + 264))
  {
LABEL_18:
    swift_release();
    __break(1u);
    goto LABEL_19;
  }
  if (*(_QWORD *)(a2 + 272))
  {
    AGSubgraphAddChild2();
LABEL_11:
    if (*v7)
    {
      v17 = *v7;
      AGGraphClearUpdate();
      v18 = (id)AGSubgraphGetCurrent();
      AGSubgraphSetCurrent();
      LODWORD(v7) = v20;
      swift_retain();
      specialized closure #1 in AnyGestureResponder.makeWrappedGesture(inputs:makeChild:)(v19, a2, v20 | (v6 << 32), v8);
      AGSubgraphSetCurrent();

      AGGraphSetUpdate();
      swift_release_n();

      goto LABEL_13;
    }
    goto LABEL_17;
  }
LABEL_19:
  swift_release();
  __break(1u);
}

void AnyGestureResponder.makeWrappedGesture(inputs:makeChild:)(__int128 *a1@<X0>, void (*a2)(unint64_t *__return_ptr, __int128 *)@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  int IsValid;
  char v20;
  uint64_t (*v21)(uint64_t, uint64_t);
  void *v22;
  id v23;
  uint64_t v24;
  void *v25;
  uint64_t (*v26)(uint64_t, uint64_t);
  uint64_t v27;
  void *v28;
  uint64_t v29;
  void *v30;
  void *v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  void *v39;
  id v40;
  uint64_t v41;
  uint64_t v42;
  id v45;
  uint64_t (*v46)(uint64_t, uint64_t);
  _DWORD v48[2];
  uint64_t v49;
  unsigned int v50;
  __int128 v51[6];
  _BYTE v52[28];

  v7 = v6;
  v10 = a1[5];
  v51[4] = a1[4];
  v51[5] = v10;
  *(_OWORD *)v52 = a1[6];
  *(_OWORD *)&v52[12] = *(__int128 *)((char *)a1 + 108);
  v11 = a1[1];
  v51[0] = *a1;
  v51[1] = v11;
  v12 = a1[3];
  v51[2] = a1[2];
  v51[3] = v12;
  specialized _GestureInputs.makeDefaultOutputs<A>()((uint64_t)v48);
  v13 = v48[0];
  v14 = v48[1];
  v15 = v49;
  v16 = v50;
  v17 = *(_QWORD *)(a5 + 8);
  v46 = *(uint64_t (**)(uint64_t, uint64_t))(v17 + 8);
  v18 = (void *)v46(a4, v17);
  IsValid = AGSubgraphIsValid();

  if (!IsValid)
    goto LABEL_14;
  v42 = v14;
  v20 = v52[24];
  v45 = (id)AGSubgraphGetCurrent();
  if (!v45)
  {
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v41 = v13;
  if ((v20 & 0x10) != 0)
  {
    v23 = (id)AGSubgraphGetGraph();
    v21 = v46;
  }
  else
  {
    v21 = v46;
    v22 = (void *)v46(a4, v17);
    v23 = (id)AGSubgraphGetGraph();

  }
  v24 = AGSubgraphCreate();

  (*(void (**)(uint64_t, uint64_t, uint64_t))(a5 + 32))(v24, a4, a5);
  v25 = (void *)v21(a4, v17);
  v26 = *(uint64_t (**)(uint64_t, uint64_t))(a5 + 24);
  v27 = v26(a4, a5);
  if (!v27)
    goto LABEL_16;
  v28 = (void *)v27;
  AGSubgraphAddChild2();

  v29 = v26(a4, a5);
  if (!v29)
  {
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  v30 = (void *)v29;
  AGSubgraphAddChild();

  if ((v20 & 0x10) == 0)
    goto LABEL_12;
  v31 = (void *)v46(a4, v17);
  v32 = (id)AGSubgraphGetGraph();

  v33 = AGSubgraphCreate();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(a5 + 56))(v33, a4, a5);
  v34 = v26(a4, a5);
  if (!v34)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  v35 = (void *)v34;
  v36 = (*(uint64_t (**)(uint64_t, uint64_t))(a5 + 48))(a4, a5);
  if (v36)
  {
    v37 = (void *)v36;
    AGSubgraphAddChild2();

LABEL_12:
    v38 = v26(a4, a5);
    if (v38)
    {
      v39 = (void *)v38;
      AGGraphClearUpdate();
      v40 = (id)AGSubgraphGetCurrent();
      AGSubgraphSetCurrent();
      LODWORD(v13) = v41;
      LODWORD(v14) = v42;
      closure #1 in AnyGestureResponder.makeWrappedGesture(inputs:makeChild:)(v51, v7, a2, a3, v41 | (v42 << 32), v15, v16, a4, a5);
      AGSubgraphSetCurrent();

      AGGraphSetUpdate();
LABEL_14:
      *(_DWORD *)a6 = v13;
      *(_DWORD *)(a6 + 4) = v14;
      *(_QWORD *)(a6 + 8) = v15;
      *(_DWORD *)(a6 + 16) = v16;
      return;
    }
    goto LABEL_18;
  }
LABEL_20:
  __break(1u);
}

void AnyGestureResponder.exclusionPolicy.getter(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

{
  AnyGestureResponder.exclusionPolicy.getter(a1);
}

uint64_t AnyGestureResponder.label.getter()
{
  return 0;
}

uint64_t protocol witness for AnyGestureResponder.makeSubviewsGesture(inputs:) in conformance StyledTextResponder@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;
  int v3;

  result = specialized _GestureInputs.intern<A>(_:id:)(768, 4);
  v3 = *MEMORY[0x24BE096C0];
  *(_QWORD *)(a1 + 8) = MEMORY[0x24BEE4AF8];
  *(_DWORD *)(a1 + 16) = 0;
  *(_DWORD *)a1 = result;
  *(_DWORD *)(a1 + 4) = v3;
  return result;
}

uint64_t AnyGestureResponder.makeSubviewsGesture(inputs:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;
  int v3;

  result = specialized _GestureInputs.intern<A>(_:id:)(768, 4);
  v3 = *MEMORY[0x24BE096C0];
  *(_QWORD *)(a1 + 8) = MEMORY[0x24BEE4AF8];
  *(_DWORD *)(a1 + 16) = 0;
  *(_DWORD *)a1 = result;
  *(_DWORD *)(a1 + 4) = v3;
  return result;
}

{
  return AnyGestureResponder.makeSubviewsGesture(inputs:)(a1);
}

uint64_t specialized _GestureOutputs.overrideDefaultValues(_:)(unint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  unint64_t v7;
  unint64_t v8;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t i;
  uint64_t v15;
  uint64_t v16;

  v7 = HIDWORD(a1);
  v8 = HIDWORD(a4);
  type metadata accessor for DefaultRule<GesturePhase<()>>(0);
  result = AGGraphMutateAttribute();
  if (*MEMORY[0x24BE096C0] != (_DWORD)v8 && *MEMORY[0x24BE096C0] != (_DWORD)v7)
  {
    MEMORY[0x24BDAC7A8](result);
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, (unint64_t *)&lazy cache variable for type metadata for DefaultRule<GestureDebug.Data>, (uint64_t)&type metadata for GestureDebug.Data, (uint64_t)&protocol witness table for GestureDebug.Data, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for DefaultRule);
    MEMORY[0x24BDAC7A8](v11);
    result = AGGraphMutateAttribute();
  }
  v12 = *(_QWORD *)(a5 + 16);
  if (v12)
  {
    v13 = *(_QWORD *)(a2 + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    for (i = 0; i != v12; ++i)
    {
      if (v13)
      {
        v15 = a2 + 48;
        v16 = v13;
        while (*(_QWORD *)(v15 - 16) != *(_QWORD *)(a5 + 32 + 24 * i))
        {
          v15 += 24;
          if (!--v16)
            goto LABEL_9;
        }
        AGGraphSetIndirectAttribute();
      }
LABEL_9:
      ;
    }
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

void specialized GesturePhase.map<A>(_:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t);
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;

  v1 = type metadata accessor for URL();
  MEMORY[0x24BDAC7A8](v1);
  type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for GesturePhase<URL>, v2, (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for GesturePhase);
  MEMORY[0x24BDAC7A8](v3);
  outlined init with copy of GesturePhase<URL>(v0, (uint64_t)&v6 - v4);
  v5 = (char *)sub_234F9B250 + 4 * byte_2352B9580[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

uint64_t sub_234F9B250()
{
  _WORD *v0;
  uint64_t v1;
  void (*v2)(uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(v4, 1, v1) == 1)
  {
    *v0 = 1;
    return outlined destroy of URL?(v4);
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 32))(v3, v4, v1);
    v2(v3);
    result = (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8))(v3, v1);
    *v0 = 0;
  }
  return result;
}

void specialized closure #1 in MapGesture.init(_:)()
{
  specialized GesturePhase.map<A>(_:)();
}

void specialized closure #1 in MapGesture.init(_:)(__int16 a1)
{
  __asm { BR              X10 }
}

uint64_t sub_234F9B3B0(uint64_t result, uint64_t (*a2)(char *))
{
  _WORD *v2;
  char v3;

  if ((_BYTE)result == 0xFF)
  {
    *v2 = 1;
  }
  else
  {
    v3 = result & 1;
    result = a2(&v3);
    *v2 = 0;
  }
  return result;
}

void specialized closure #1 in MapGesture.init(_:)(int a1)
{
  __asm { BR              X11 }
}

uint64_t sub_234F9B478@<X0>(uint64_t result@<X0>, uint64_t (*a2)(__int16 *)@<X1>, int a3@<W8>)
{
  _WORD *v3;
  __int16 v4;

  if ((a3 & 0x10000) != 0)
  {
    *v3 = 1;
  }
  else
  {
    v4 = result & 0x101;
    result = a2(&v4);
    *v3 = 0;
  }
  return result;
}

uint64_t GestureViewModifier.name.getter()
{
  return 0;
}

uint64_t GestureViewModifier.gestureMask.getter()
{
  return 3;
}

BOOL static GestureResponderExclusionPolicy.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

void GestureResponderExclusionPolicy.hash(into:)()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0);
}

Swift::Int GestureResponderExclusionPolicy.hashValue.getter()
{
  unsigned __int8 *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

id static GestureViewModifier.makeView(modifier:inputs:body:)@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(unint64_t *__return_ptr)@<X2>, uint64_t a4@<X4>, uint64_t a5@<X5>, unint64_t *a6@<X8>)
{
  uint64_t v8;
  int v9;
  unint64_t v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unint64_t v15;
  unint64_t v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  int v21;
  int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unsigned int v29;
  Swift::UInt v30;
  id result;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  double v42;
  uint64_t v43;
  _BYTE v44[16];
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int v48;
  uint64_t *v49;
  unint64_t *v50;
  int v51;
  int v52;
  int v53;
  int v54;
  int v55;
  unsigned int v56;
  unsigned int v57;
  unsigned int v58;
  unsigned int v59;
  unsigned int v60;
  unint64_t v61;
  uint64_t v62;
  int v63;
  unsigned int v64;
  unsigned int v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  uint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unsigned int v72;
  unsigned int v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  unsigned int v77;
  unsigned int v78;
  int v79;
  int v80;
  int v81;
  int v82;
  int v83;
  id v84;
  uint64_t v85;
  uint64_t v86;

  v62 = a5;
  v86 = *MEMORY[0x24BDAC8D0];
  v64 = *a1;
  v8 = *(_QWORD *)a2;
  v9 = *(_DWORD *)(a2 + 8);
  v10 = *(_QWORD *)(a2 + 16);
  v12 = *(_DWORD *)(a2 + 24);
  v11 = *(_DWORD *)(a2 + 28);
  v13 = *(_DWORD *)(a2 + 32);
  v14 = *(_DWORD *)(a2 + 36);
  v15 = *(_QWORD *)(a2 + 40);
  v16 = *(_QWORD *)(a2 + 48);
  v17 = *(_DWORD *)(a2 + 56);
  v18 = *(_DWORD *)(a2 + 60);
  v19 = *(_DWORD *)(a2 + 64);
  v20 = *(_DWORD *)(a2 + 68);
  v22 = *(_DWORD *)(a2 + 72);
  v21 = *(_DWORD *)(a2 + 76);
  v23 = *(_DWORD *)(a2 + 80);
  v68 = v8;
  v63 = v9;
  LODWORD(v69) = v9;
  v61 = v10;
  v70 = v10;
  v71 = __PAIR64__(v11, v12);
  v60 = v11;
  v59 = v13;
  v72 = v13;
  v73 = v14;
  v58 = v14;
  v74 = v15;
  v75 = v16;
  v57 = v17;
  v76 = __PAIR64__(v18, v17);
  v56 = v18;
  v55 = v19;
  v77 = v19;
  v78 = v20;
  v54 = v20;
  v53 = v22;
  v79 = v22;
  v80 = v21;
  v52 = v21;
  v51 = v23;
  v81 = v23;
  a3(&v66);
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, (unint64_t *)&lazy cache variable for type metadata for _AnyPreferenceKey<ViewRespondersKey>, (uint64_t)&type metadata for ViewRespondersKey, (uint64_t)&protocol witness table for ViewRespondersKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for _AnyPreferenceKey);
  v25 = *(_QWORD *)(v16 + 16);
  if (v25)
  {
    v26 = v24;
    v27 = 32;
    while (*(_QWORD *)(v16 + v27) != v24)
    {
      v27 += 16;
      if (!--v25)
        goto LABEL_10;
    }
    v50 = a6;
    v68 = v66;
    LODWORD(v69) = v67;
    v28 = PreferencesOutputs.subscript.getter(v24);
    v29 = v28;
    if ((v28 & 0x100000000) != 0)
    {
      swift_bridgeObjectRetain();
      specialized static ViewGraph.current.getter();
      type metadata accessor for [ViewResponder](0);
      v29 = specialized GraphHost.intern<A>(_:for:id:)(MEMORY[0x24BEE4AF8], v30, 0);
      swift_bridgeObjectRelease();
      swift_release();
    }
    result = (id)AGSubgraphGetCurrent();
    if (!result)
    {
      __break(1u);
      return result;
    }
    v49 = &v47;
    v68 = __PAIR64__(v64, v29);
    v69 = v8;
    LODWORD(v70) = v63;
    v71 = v61;
    v48 = v12;
    v72 = v12;
    v73 = v60;
    v74 = __PAIR64__(v58, v59);
    v75 = v15;
    v76 = v16;
    v77 = v57;
    v78 = v56;
    v79 = v55;
    v80 = v54;
    v81 = v53;
    v82 = v52;
    v83 = v51;
    v84 = result;
    v85 = 0;
    MEMORY[0x24BDAC7A8](result);
    v45 = type metadata accessor for GestureFilter(0, a4, v62, v32);
    v46 = MEMORY[0x23B7C9C04](&protocol conformance descriptor for GestureFilter<A>, v45);
    type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for Attribute<[ViewResponder]>, (uint64_t (*)(uint64_t))type metadata accessor for [ViewResponder], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BE095F0]);
    v34 = v33;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v68, (uint64_t)closure #1 in Attribute.init<A>(_:)partial apply, (uint64_t)v44, v45, MEMORY[0x24BEE4078], v34, MEMORY[0x24BEE40A8], v35);
    v47 = v69;

    v12 = v48;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    swift_release();
    LOBYTE(v68) = 0;
    PreferencesOutputs.subscript.setter(v65, v26, (uint64_t)&protocol witness table for _AnyPreferenceKey<A>, v36);
    a6 = v50;
  }
LABEL_10:
  swift_retain_n();
  v37 = v61;
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  v38 = specialized find<A>(_:key:)(v8);
  if (v38)
  {
    v39 = (uint64_t *)(v38 + 80);
  }
  else
  {
    v39 = (uint64_t *)&off_2561B8430;
    if (one-time initialization token for defaultValue != -1)
      swift_once();
  }
  v40 = *v39;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  v41 = swift_release_n();
  v42 = MEMORY[0x24BDAC7A8](v41);
  v43 = v62;
  *(_QWORD *)&v44[-32] = a4;
  *(_QWORD *)&v44[-24] = v43;
  *(_DWORD *)&v44[-16] = v64;
  v68 = v8;
  LODWORD(v69) = v63;
  v70 = v37;
  v71 = __PAIR64__(v60, v12);
  v72 = v59;
  v73 = v58;
  v74 = v15;
  v75 = v16;
  v76 = __PAIR64__(v56, v57);
  v77 = v55;
  v78 = v54;
  v79 = v53;
  v80 = v52;
  v81 = v51;
  result = (id)(*(uint64_t (**)(uint64_t (*)(), double))(v40 + 8))(partial apply for implicit closure #1 in static GestureViewModifier.makeView(modifier:inputs:body:), v42);
  *a6 = v66;
  a6[1] = v67;
  return result;
}

uint64_t _ViewInputs.gestureAccessibilityProvider.getter()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;

  v1 = *v0;
  swift_retain_n();
  swift_retain();
  swift_bridgeObjectRetain();
  v2 = specialized find<A>(_:key:)(v1);
  if (v2)
  {
    v3 = (uint64_t *)(v2 + 72);
  }
  else
  {
    v3 = &static _GraphInputs.GestureAccessibilityProviderKey.defaultValue;
    if (one-time initialization token for defaultValue != -1)
      swift_once();
  }
  v4 = *v3;
  swift_bridgeObjectRelease();
  swift_release();
  swift_release_n();
  return v4;
}

uint64_t implicit closure #1 in static GestureViewModifier.makeView(modifier:inputs:body:)(int a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v7;
  int v8;
  uint64_t KeyPath;
  _BYTE v10[16];
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v13 = a2;
  v14 = a3;
  v8 = a1;
  KeyPath = swift_getKeyPath();
  v11 = type metadata accessor for Focus();
  v12 = MEMORY[0x23B7C9C04](MEMORY[0x24BE09660], v11);
  type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for Attribute<GestureMask>, (uint64_t)&type metadata for GestureMask, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BE095F0]);
  v4 = v3;
  swift_retain();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v8, (uint64_t)closure #1 in Attribute.init<A>(_:)partial apply, (uint64_t)v10, v11, MEMORY[0x24BEE4078], v4, MEMORY[0x24BEE40A8], v5);
  swift_release();
  swift_release();
  return v7;
}

id static GestureViewModifier._makeView(modifier:inputs:body:)@<X0>(unsigned int *a1@<X0>, uint64_t *a2@<X1>, void (*a3)(unint64_t *__return_ptr)@<X2>, uint64_t a4@<X4>, uint64_t a5@<X5>, unint64_t *a6@<X8>)
{
  uint64_t v6;
  int v7;
  uint64_t v8;
  int v9;
  __int128 v10;
  uint64_t v12;
  int v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  int v19;
  unsigned int v20;

  v6 = *a2;
  v7 = *((_DWORD *)a2 + 2);
  v8 = a2[2];
  v9 = *((_DWORD *)a2 + 20);
  v20 = *a1;
  v12 = v6;
  v13 = v7;
  v14 = v8;
  v10 = *(_OWORD *)(a2 + 5);
  v15 = *(_OWORD *)(a2 + 3);
  v16 = v10;
  v17 = *(_OWORD *)(a2 + 7);
  v18 = a2[9];
  v19 = v9;
  return static GestureViewModifier.makeView(modifier:inputs:body:)(&v20, (uint64_t)&v12, a3, a4, a5, a6);
}

uint64_t AddGestureModifier.gesture.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8) + 16))(a2, v2);
}

uint64_t AddGestureModifier.gesture.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 40))(v2, a1);
}

uint64_t (*AddGestureModifier.gesture.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t AddGestureModifier.name.getter(uint64_t a1)
{
  uint64_t v1;

  v1 = specialized AddGestureModifier.name.getter(a1);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t AddGestureModifier.name.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v6;
  uint64_t result;

  v6 = (_QWORD *)(v3 + *(int *)(a3 + 36));
  result = swift_bridgeObjectRelease();
  *v6 = a1;
  v6[1] = a2;
  return result;
}

uint64_t (*AddGestureModifier.name.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t AddGestureModifier.gestureMask.getter(uint64_t a1)
{
  uint64_t v1;

  return *(unsigned int *)(v1 + *(int *)(a1 + 40));
}

uint64_t AddGestureModifier.gestureMask.setter(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  *(_DWORD *)(v2 + *(int *)(a2 + 40)) = result;
  return result;
}

uint64_t (*AddGestureModifier.gestureMask.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t AddGestureModifier.init(_:name:gestureMask:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  return AddGestureModifier.init(_:name:gestureMask:)(a1, a2, a3, a4, a5, a6, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for AddGestureModifier, a7);
}

uint64_t protocol witness for GestureViewModifier.name.getter in conformance AddGestureModifier<A>(uint64_t a1)
{
  uint64_t v1;

  v1 = specialized AddGestureModifier.name.getter(a1);
  swift_bridgeObjectRetain();
  return v1;
}

id protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance AddGestureModifier<A>@<X0>(unsigned int *a1@<X0>, uint64_t *a2@<X1>, void (*a3)(unint64_t *__return_ptr)@<X2>, uint64_t a4@<X4>, unint64_t *a5@<X8>)
{
  uint64_t v10;

  v10 = MEMORY[0x23B7C9C04](&protocol conformance descriptor for AddGestureModifier<A>, a4);
  return static GestureViewModifier._makeView(modifier:inputs:body:)(a1, a2, a3, a4, v10, a5);
}

void static DefaultGestureCombiner.exclusionPolicy.getter(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

uint64_t static DefaultGestureCombiner.combine(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v6;

  v6 = swift_allocObject();
  *(_QWORD *)(v6 + 16) = _ViewInputs.base.modify;
  *(_QWORD *)(v6 + 24) = 0;
  *a3 = a1;
  a3[1] = a2;
  a3[2] = partial apply for specialized closure #1 in MapGesture.init(_:);
  a3[3] = v6;
  swift_retain();
  return swift_retain();
}

uint64_t protocol witness for static GestureCombiner.combine(_:_:) in conformance DefaultGestureCombiner@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v6;

  v6 = swift_allocObject();
  *(_QWORD *)(v6 + 16) = _ViewInputs.base.modify;
  *(_QWORD *)(v6 + 24) = 0;
  *a3 = a1;
  a3[1] = a2;
  a3[2] = closure #1 in MapGesture.init(_:)specialized partial apply;
  a3[3] = v6;
  swift_retain();
  return swift_retain();
}

uint64_t SimultaneousGestureModifier.init(_:name:gestureMask:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  return AddGestureModifier.init(_:name:gestureMask:)(a1, a2, a3, a4, a5, a6, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for SimultaneousGestureModifier, a7);
}

id protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance SimultaneousGestureModifier<A>@<X0>(unsigned int *a1@<X0>, uint64_t *a2@<X1>, void (*a3)(unint64_t *__return_ptr)@<X2>, uint64_t a4@<X4>, unint64_t *a5@<X8>)
{
  uint64_t v10;

  v10 = MEMORY[0x23B7C9C04](&protocol conformance descriptor for SimultaneousGestureModifier<A>, a4);
  return static GestureViewModifier._makeView(modifier:inputs:body:)(a1, a2, a3, a4, v10, a5);
}

uint64_t protocol witness for static GestureCombiner.combine(_:_:) in conformance SimultaneousGestureCombiner@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v6;

  v6 = swift_allocObject();
  *(_QWORD *)(v6 + 16) = _ViewInputs.base.modify;
  *(_QWORD *)(v6 + 24) = 0;
  *a3 = a1;
  a3[1] = a2;
  a3[2] = partial apply for specialized closure #1 in MapGesture.init(_:);
  a3[3] = v6;
  swift_retain();
  return swift_retain();
}

uint64_t HighPriorityGestureModifier.init(_:name:gestureMask:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  return AddGestureModifier.init(_:name:gestureMask:)(a1, a2, a3, a4, a5, a6, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for HighPriorityGestureModifier, a7);
}

uint64_t AddGestureModifier.init(_:name:gestureMask:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t (*a7)(_QWORD, uint64_t, uint64_t)@<X6>, uint64_t a8@<X8>)
{
  uint64_t v14;
  _QWORD *v15;
  uint64_t result;

  v14 = a7(0, a5, a6);
  v15 = (_QWORD *)(a8 + *(int *)(v14 + 36));
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a5 - 8) + 32))(a8, a1, a5);
  *v15 = a2;
  v15[1] = a3;
  *(_DWORD *)(a8 + *(int *)(v14 + 40)) = a4;
  return result;
}

uint64_t protocol witness for GestureViewModifier.name.getter in conformance SimultaneousGestureModifier<A>(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 + *(int *)(a1 + 36));
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t protocol witness for GestureViewModifier.gestureMask.getter in conformance HighPriorityGestureModifier<A>(uint64_t a1)
{
  uint64_t v1;

  return *(unsigned int *)(v1 + *(int *)(a1 + 40));
}

id protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance HighPriorityGestureModifier<A>@<X0>(unsigned int *a1@<X0>, uint64_t *a2@<X1>, void (*a3)(unint64_t *__return_ptr)@<X2>, uint64_t a4@<X4>, unint64_t *a5@<X8>)
{
  uint64_t v10;

  v10 = MEMORY[0x23B7C9C04](&protocol conformance descriptor for HighPriorityGestureModifier<A>, a4);
  return static GestureViewModifier._makeView(modifier:inputs:body:)(a1, a2, a3, a4, v10, a5);
}

uint64_t protocol witness for static GestureCombiner.combine(_:_:) in conformance HighPriorityGestureCombiner@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v6;

  v6 = swift_allocObject();
  *(_QWORD *)(v6 + 16) = _ViewInputs.base.modify;
  *(_QWORD *)(v6 + 24) = 0;
  *a3 = a2;
  a3[1] = a1;
  a3[2] = closure #1 in MapGesture.init(_:)specialized partial apply;
  a3[3] = v6;
  swift_retain();
  return swift_retain();
}

uint64_t GestureFilter.responder.getter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  if (*(_QWORD *)(v1 + 104))
  {
    v2 = *(_QWORD *)(v1 + 104);
  }
  else
  {
    v2 = closure #1 in GestureFilter.responder.getter(v1, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24));
    *(_QWORD *)(v1 + 104) = v2;
    swift_retain();
  }
  swift_retain();
  return v2;
}

uint64_t closure #1 in GestureFilter.responder.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v6;
  id v7;
  uint64_t v8;
  uint64_t v10;

  v6 = *(id *)(a1 + 96);
  AGGraphClearUpdate();
  v7 = (id)AGSubgraphGetCurrent();
  AGSubgraphSetCurrent();
  closure #1 in closure #1 in GestureFilter.responder.getter(a1, a2, a3, v8, &v10);
  AGSubgraphSetCurrent();

  AGGraphSetUpdate();
  return v10;
}

id closure #1 in closure #1 in GestureFilter.responder.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  int v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  id result;
  uint64_t v18;
  int v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  int v26;

  type metadata accessor for GestureResponder(0, a2, a3, a4);
  v8 = *(_DWORD *)(a1 + 4);
  v9 = *(_QWORD *)(a1 + 8);
  v10 = *(_DWORD *)(a1 + 16);
  v11 = *(_QWORD *)(a1 + 24);
  v12 = *(_QWORD *)(a1 + 48);
  v13 = *(_QWORD *)(a1 + 56);
  v14 = *(_DWORD *)(a1 + 88);
  type metadata accessor for GestureFilter(0, a2, a3, v15);
  v18 = v9;
  v19 = v10;
  v20 = v11;
  v21 = *(_OWORD *)(a1 + 32);
  v22 = v12;
  v23 = v13;
  v24 = *(_OWORD *)(a1 + 64);
  v25 = *(_QWORD *)(a1 + 80);
  v26 = v14;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  result = GestureResponder.__allocating_init(modifier:inputs:)(v8, (uint64_t)&v18);
  *a5 = result;
  return result;
}

id GestureResponder.__allocating_init(modifier:inputs:)(int a1, uint64_t a2)
{
  uint64_t v4;
  id v5;

  v4 = swift_allocObject();
  v5 = specialized GestureResponder.init(modifier:inputs:)(a1, a2, v4);
  swift_release();
  return v5;
}

uint64_t GestureFilter.updateValue()(uint64_t a1)
{
  int64_t *Value;
  char v3;
  int64_t v4;
  uint64_t result;
  uint64_t v6;

  GestureFilter.responder.getter(a1);
  type metadata accessor for [ViewResponder](0);
  Value = (int64_t *)AGGraphGetValue();
  if ((v3 & 1) != 0)
  {
    v4 = *Value;
    swift_bridgeObjectRetain_n();
    MultiViewResponder.children.setter(v4);
    swift_bridgeObjectRelease();
  }
  swift_release();
  result = AGGraphGetOutputValue();
  if (!result)
  {
    type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>, MEMORY[0x24BEE4AD0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
    v6 = swift_allocObject();
    *(_OWORD *)(v6 + 16) = xmmword_235283250;
    *(_QWORD *)(v6 + 32) = GestureFilter.responder.getter(a1);
    specialized Array._endMutation()();
    AGGraphSetOutputValue();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t specialized closure #1 in AnyGestureResponder.makeWrappedGesture(inputs:makeChild:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t result;
  void *v18;
  __int128 v19;
  __int128 v20;
  id v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  void *v36;
  int v37;
  id v38;
  int v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t KeyPath;
  unsigned int v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  _BYTE v52[28];
  _OWORD v53[5];
  int v54;
  _OWORD v55[6];
  _OWORD v56[2];
  uint64_t v57;

  v57 = *MEMORY[0x24BDAC8D0];
  v42 = *(_QWORD *)(a2 + 48);
  v8 = *(_QWORD *)(a2 + 64);
  v9 = *(_QWORD *)(a2 + 72);
  v10 = *(_QWORD *)(a2 + 80);
  v11 = *(_QWORD *)(a2 + 88);
  v12 = *(_QWORD *)(a2 + 96);
  v13 = *(_QWORD *)(a2 + 104);
  v14 = *(_QWORD *)(a2 + 112);
  v15 = *(_QWORD *)(a2 + 120);
  v39 = *(_DWORD *)(a2 + 128);
  swift_beginAccess();
  v16 = *(void **)(a2 + 272);
  v40 = a3;
  v41 = a4;
  if (v16)
  {
    v38 = *(id *)(a2 + 272);
LABEL_5:
    v37 = *(_DWORD *)(a1 + 120);
    v36 = *(void **)(a1 + 88);
    v19 = *(_OWORD *)(a1 + 48);
    v53[2] = *(_OWORD *)(a1 + 32);
    v53[3] = v19;
    v53[4] = *(_OWORD *)(a1 + 64);
    v54 = *(_DWORD *)(a1 + 80);
    v20 = *(_OWORD *)(a1 + 16);
    v53[0] = *(_OWORD *)a1;
    v53[1] = v20;
    v35 = DWORD2(v53[0]);
    swift_retain_n();
    swift_retain_n();
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    outlined retain of _GestureInputs(a1);
    v21 = v16;
    outlined release of _ViewInputs((uint64_t)v53);
    swift_beginAccess();
    v22 = *(_DWORD *)(v8 + 16);
    v23 = *(_QWORD *)(v8 + 24);
    v31 = *(_OWORD *)(v8 + 48);
    v32 = *(_OWORD *)(v8 + 32);
    v24 = *(_QWORD *)(v8 + 64);
    v25 = *(_QWORD *)(v8 + 72);
    v33 = v12;
    v34 = v11;
    v26 = *(_BYTE *)(v8 + 80);
    v27 = *(_BYTE *)(v8 + 81);
    v28 = *(_QWORD *)(v8 + 88);
    type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for MutableBox<CachedEnvironment>, (uint64_t)&type metadata for CachedEnvironment, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for MutableBox);
    v29 = swift_allocObject();
    *(_DWORD *)(v29 + 16) = v22;
    *(_QWORD *)(v29 + 24) = v23;
    *(_OWORD *)(v29 + 32) = v32;
    *(_OWORD *)(v29 + 48) = v31;
    *(_QWORD *)(v29 + 64) = v24;
    *(_QWORD *)(v29 + 72) = v25;
    *(_BYTE *)(v29 + 80) = v26;
    *(_BYTE *)(v29 + 81) = v27;
    *(_QWORD *)(v29 + 88) = v28;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();

    swift_release_n();
    v30 = *(_QWORD *)(a1 + 96);
    *(_QWORD *)&v46 = v42;
    DWORD2(v46) = v35;
    *(_QWORD *)&v47 = v29;
    *((_QWORD *)&v47 + 1) = v9;
    *(_QWORD *)&v48 = v10;
    *((_QWORD *)&v48 + 1) = v34;
    *(_QWORD *)&v49 = v33;
    *((_QWORD *)&v49 + 1) = v13;
    *(_QWORD *)&v50 = v14;
    *((_QWORD *)&v50 + 1) = v15;
    LODWORD(v51) = v39;
    *((_QWORD *)&v51 + 1) = v38;
    *(_QWORD *)v52 = v30;
    *(_OWORD *)&v52[8] = *(_OWORD *)(a1 + 104);
    *(_DWORD *)&v52[24] = v37 & 0xFFFFFFFB;
    v55[2] = v48;
    v55[3] = v49;
    v55[0] = v46;
    v55[1] = v47;
    *(_OWORD *)((char *)v56 + 12) = *(_OWORD *)&v52[12];
    v55[5] = v51;
    v56[0] = *(_OWORD *)v52;
    v55[4] = v50;
    outlined retain of _GestureInputs((uint64_t)&v46);
    LODWORD(v43) = AGGraphCreateOffsetAttribute2();
    KeyPath = swift_getKeyPath();
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for AnyGesture<()>, MEMORY[0x24BEE4AE0] + 8, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for AnyGesture);
    type metadata accessor for Focus<ResolvedStyledText, AnyGesture<()>>();
    lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type Focus<ResolvedStyledText, AnyGesture<()>> and conformance Focus<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for Focus<ResolvedStyledText, AnyGesture<()>>, MEMORY[0x24BE09658]);
    LODWORD(v23) = Attribute.init<A>(body:value:flags:update:)();
    swift_release();
    specialized static AnyGesture._makeGesture(gesture:inputs:)(v23, (uint64_t)v55, (uint64_t)&v43);
    outlined release of _GestureInputs((uint64_t)&v46);
    specialized _GestureOutputs.overrideDefaultValues(_:)(v43, KeyPath, v45, v40, v41);
    outlined release of _GestureInputs((uint64_t)&v46);
    swift_release();
    return swift_bridgeObjectRelease();
  }
  result = swift_beginAccess();
  v18 = *(void **)(a2 + 264);
  if (v18)
  {
    v38 = v18;
    v16 = 0;
    goto LABEL_5;
  }
  __break(1u);
  return result;
}

uint64_t closure #1 in AnyGestureResponder.makeWrappedGesture(inputs:makeChild:)(__int128 *a1, uint64_t a2, void (*a3)(unint64_t *__return_ptr, __int128 *), uint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  __int128 v10;
  __int128 v11;
  __int128 v12;
  void (*v13)(__int128 *__return_ptr, uint64_t, uint64_t);
  void *v14;
  uint64_t result;
  __int128 v19;
  _BYTE v20[32];
  _BYTE v21[32];
  __int128 v22;
  _OWORD v23[2];
  unint64_t v24[2];
  unsigned int v25;
  __int128 v26;
  _BYTE v27[64];
  _BYTE v28[44];
  __int128 v29;
  _BYTE v30[64];
  _BYTE v31[44];

  v10 = a1[5];
  *(_OWORD *)&v30[48] = a1[4];
  *(_OWORD *)v31 = v10;
  *(_OWORD *)&v31[16] = a1[6];
  *(_OWORD *)&v31[28] = *(__int128 *)((char *)a1 + 108);
  v11 = a1[1];
  v29 = *a1;
  *(_OWORD *)v30 = v11;
  v12 = a1[3];
  *(_OWORD *)&v30[16] = a1[2];
  *(_OWORD *)&v30[32] = v12;
  v13 = *(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(a9 + 16);
  outlined retain of _GestureInputs((uint64_t)a1);
  v13(&v26, a8, a9);
  *(_QWORD *)&v19 = v26;
  DWORD2(v19) = DWORD2(v26);
  *(_QWORD *)v20 = *(_QWORD *)v27;
  *(_OWORD *)&v20[8] = *(_OWORD *)&v27[8];
  *(_QWORD *)&v20[24] = *(_QWORD *)&v27[24];
  *(_QWORD *)v21 = *(_QWORD *)&v27[32];
  *(_OWORD *)&v21[8] = *(_OWORD *)&v27[40];
  *(_QWORD *)&v21[24] = *(_QWORD *)&v27[56];
  LODWORD(v22) = *(_DWORD *)v28;
  v14 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(a9 + 48))(a8, a9);
  if (v14 || (result = (*(uint64_t (**)(uint64_t, uint64_t))(a9 + 24))(a8, a9), (v14 = (void *)result) != 0))
  {
    _GestureInputs.mergeViewInputs(_:viewSubgraph:)((uint64_t *)&v19, v14);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();

    swift_release();
    *(_QWORD *)&v26 = v29;
    DWORD2(v26) = DWORD2(v29);
    *(_QWORD *)v27 = *(_QWORD *)v30;
    *(_OWORD *)&v27[8] = *(_OWORD *)&v30[8];
    *(_OWORD *)&v27[24] = *(_OWORD *)&v30[24];
    *(_OWORD *)&v27[40] = *(_OWORD *)&v30[40];
    *(_QWORD *)&v27[56] = *(_QWORD *)&v30[56];
    *(_OWORD *)&v28[8] = *(_OWORD *)&v31[8];
    *(_OWORD *)&v28[24] = *(_OWORD *)&v31[24];
    *(_DWORD *)v28 = *(_DWORD *)v31;
    *(_DWORD *)&v28[40] = *(_DWORD *)&v31[40] & 0xFFFFFFFB;
    *(_OWORD *)&v21[16] = *(_OWORD *)&v27[48];
    v22 = *(_OWORD *)v28;
    v23[0] = *(_OWORD *)&v28[16];
    *(_OWORD *)((char *)v23 + 12) = *(_OWORD *)&v28[28];
    v19 = v26;
    *(_OWORD *)v20 = *(_OWORD *)v27;
    *(_OWORD *)&v20[16] = *(_OWORD *)&v27[16];
    *(_OWORD *)v21 = *(_OWORD *)&v27[32];
    outlined retain of _GestureInputs((uint64_t)&v26);
    a3(v24, &v19);
    outlined release of _GestureInputs((uint64_t)&v26);
    specialized _GestureOutputs.overrideDefaultValues(_:)(v24[0], v24[1], v25, a5, a6);
    outlined release of _GestureInputs((uint64_t)&v26);
    return swift_bridgeObjectRelease();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t AnyGestureResponder.isCancellable.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = (*(uint64_t (**)(void))(a2 + 88))();
  specialized static Update.begin()();
  GraphHost.instantiateIfNeeded()();
  if (*(_DWORD *)(v2 + 248) == *MEMORY[0x24BE096C0])
    v3 = 0;
  else
    v3 = *(unsigned __int8 *)AGGraphGetValue();
  static Update.end()();
  swift_release();
  return v3;
}

uint64_t AnyGestureResponder.requiredTapCount.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = (*(uint64_t (**)(void))(a2 + 88))();
  specialized static Update.begin()();
  GraphHost.instantiateIfNeeded()();
  if (*(_DWORD *)(v2 + 252) == *MEMORY[0x24BE096C0])
  {
    v3 = 0;
  }
  else
  {
    type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for Int?, MEMORY[0x24BEE1768], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1C68]);
    v3 = *(_QWORD *)AGGraphGetValue();
  }
  static Update.end()();
  swift_release();
  return v3;
}

uint64_t AnyGestureResponder.dependency.getter@<X0>(uint64_t a1@<X1>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  char v4;

  v3 = (*(uint64_t (**)(void))(a1 + 88))();
  specialized static Update.begin()();
  GraphHost.instantiateIfNeeded()();
  if (*(_DWORD *)(v3 + 256) == *MEMORY[0x24BE096C0])
    v4 = 0;
  else
    v4 = *(_BYTE *)AGGraphGetValue();
  *a2 = v4;
  static Update.end()();
  return swift_release();
}

BOOL AnyGestureResponder.canPrevent(_:otherExclusionPolicy:)(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 v9;
  unsigned __int8 v10;

  v10 = *a2;
  if (!AnyGestureResponder.isPrioritized(over:otherExclusionPolicy:)(a1, &v10, a3, a4))
    return 0;
  v5 = swift_conformsToProtocol2();
  if (v5)
    v6 = v5;
  else
    v6 = 0;
  if (v5)
    v7 = a1;
  else
    v7 = 0;
  if (!v7)
    return 1;
  swift_retain();
  AnyGestureResponder.dependency.getter(v6, &v9);
  swift_release();
  return v9 - 3 < 0xFFFFFFFE;
}

BOOL AnyGestureResponder.isPrioritized(over:otherExclusionPolicy:)(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t (*v15)(uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v5 = v4;
  v7 = *a2;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(a4 + 72))(&v18, a3, a4);
  v8 = v18;
  type metadata accessor for (GestureResponderExclusionPolicy, GestureResponderExclusionPolicy)();
  if (v7)
  {
    if (v7 == 1 && v8 && v8 != 2)
    {
      swift_retain_n();
      if (a1 == v5)
      {
        swift_release_n();
        return 1;
      }
      v9 = a1;
      while (1)
      {
        v10 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 88);
        v11 = swift_retain();
        v12 = v10(v11);
        swift_retain();
        swift_release_n();
        if (!v12)
          break;
        swift_release();
        v9 = v12;
        if (v12 == v5)
        {
          swift_release();
          goto LABEL_22;
        }
      }
LABEL_20:
      swift_release();
    }
    return 0;
  }
  if (v8)
    return v8 == 1;
  swift_retain_n();
  if (a1 == v5)
  {
    swift_release_n();
    return 0;
  }
  v14 = a1;
  while (1)
  {
    v15 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 88);
    v16 = swift_retain();
    v17 = v15(v16);
    swift_retain();
    swift_release_n();
    if (!v17)
      break;
    swift_release();
    v14 = v17;
    if (v17 == v5)
    {
      swift_release();
      goto LABEL_20;
    }
  }
LABEL_22:
  swift_release();
  return 1;
}

BOOL AnyGestureResponder.shouldRequireFailure(of:)(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  void (*v9)(uint64_t *__return_ptr, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v17;
  char v18;
  uint64_t v19;

  v9 = *(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(a4 + 72);
  v9((uint64_t *)((char *)&v19 + 2), a3, a4);
  if (BYTE2(v19) != 2)
  {
    v10 = *a1;
    (*(void (**)(char *__return_ptr, uint64_t, uint64_t))(a2 + 72))((char *)&v19 + 1, *a1, a2);
    if (BYTE1(v19) != 2)
    {
      v11 = AnyGestureResponder.requiredTapCount.getter(a3, a4);
      if ((v12 & 1) == 0)
      {
        v13 = v11;
        v14 = AnyGestureResponder.requiredTapCount.getter(v10, a2);
        if ((v15 & 1) == 0 && v14 != v13)
          return v13 < v14;
      }
    }
  }
  v17 = *a1;
  v9(&v19, a3, a4);
  if (!AnyGestureResponder.isPrioritized(over:otherExclusionPolicy:)(v4, (unsigned __int8 *)&v19, v17, a2))
    return 0;
  AnyGestureResponder.dependency.getter(a4, &v18);
  return v18 != 0;
}

uint64_t GestureResponder.gestureGraph.getter()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  if (v0[29])
  {
    v1 = v0[29];
  }
  else
  {
    v2 = *v0;
    type metadata accessor for GestureGraph();
    v3 = swift_allocObject();
    v4 = swift_retain();
    v1 = specialized GestureGraph.init(rootResponder:)(v4, v3, v2, (uint64_t)&protocol witness table for GestureResponder<A>);
    v0[29] = v1;
    swift_retain();
    swift_release();
  }
  swift_retain();
  return v1;
}

uint64_t GestureResponder.bindingBridge.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  if (*(_QWORD *)(v0 + 240))
  {
    v1 = *(_QWORD *)(v0 + 240);
  }
  else
  {
    v1 = closure #1 in GestureResponder.bindingBridge.getter(v0);
    *(_QWORD *)(v0 + 240) = v1;
    *(_QWORD *)(v0 + 248) = v2;
    swift_retain();
    swift_release();
  }
  swift_retain();
  return v1;
}

uint64_t closure #1 in GestureResponder.bindingBridge.getter(uint64_t a1)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  int v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  int v21;

  v2 = *(_QWORD *)a1;
  v3 = *(_DWORD *)(a1 + 88);
  v4 = *(_QWORD *)(a1 + 96);
  v5 = *(_QWORD *)(a1 + 120);
  v6 = *(_QWORD *)(a1 + 128);
  v7 = *(_DWORD *)(a1 + 160);
  v13 = *(_QWORD *)(a1 + 80);
  v14 = v3;
  v15 = v4;
  v16 = *(_OWORD *)(a1 + 104);
  v17 = v5;
  v18 = v6;
  v19 = *(_OWORD *)(a1 + 136);
  v20 = *(_QWORD *)(a1 + 152);
  v21 = v7;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v8 = *(_QWORD *)(GestureResponder.gestureGraph.getter() + 208);
  swift_retain();
  swift_release();
  v9 = specialized _ViewInputs.makeEventBindingBridge(bindingManager:responder:)(v8, a1, &v13, v2, (uint64_t)&protocol witness table for GestureResponder<A>);
  v11 = v10;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  *(_QWORD *)(GestureResponder.gestureGraph.getter() + 200) = v11;
  swift_unknownObjectWeakAssign();
  swift_release();
  return v9;
}

uint64_t GestureResponder.gestureContainer.getter()
{
  uint64_t v0;
  uint64_t v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  int v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  int v17;

  if (*(_QWORD *)(v0 + 256))
    return swift_unknownObjectRetain();
  v1 = *(_QWORD *)v0;
  if (!AGSubgraphIsValid())
    return 0;
  v2 = *(_DWORD *)(v0 + 88);
  v3 = *(_QWORD *)(v0 + 96);
  v4 = *(_QWORD *)(v0 + 120);
  v5 = *(_QWORD *)(v0 + 128);
  v6 = *(_DWORD *)(v0 + 160);
  v9 = *(_QWORD *)(v0 + 80);
  v10 = v2;
  v11 = v3;
  v12 = *(_OWORD *)(v0 + 104);
  v13 = v4;
  v14 = v5;
  v15 = *(_OWORD *)(v0 + 136);
  v16 = *(_QWORD *)(v0 + 152);
  v17 = v6;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v7 = specialized _ViewInputs.makeGestureContainer(responder:)(v0, &v9, v1, (uint64_t)&protocol witness table for GestureResponder<A>);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  *(_QWORD *)(v0 + 256) = v7;
  swift_unknownObjectRelease();
  result = *(_QWORD *)(v0 + 256);
  if (result)
    return swift_unknownObjectRetain();
  __break(1u);
  return result;
}

uint64_t GestureResponder.eventSources.getter()
{
  uint64_t v0;
  uint64_t v1;

  v0 = GestureResponder.bindingBridge.getter();
  v1 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v0 + 192))(v0);
  swift_release();
  return v1;
}

uint64_t GestureResponder.exclusionPolicy.getter()
{
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  return (*(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 32))(AssociatedTypeWitness, AssociatedConformanceWitness);
}

uint64_t GestureResponder.label.getter()
{
  _DWORD *v0;
  uint64_t v1;
  uint64_t v2;
  __int128 v4;

  if (!AGSubgraphIsValid())
    return 0;
  AGGraphClearUpdate();
  closure #1 in GestureResponder.label.getter(v0, &v4);
  AGGraphSetUpdate();
  if (*((_QWORD *)&v4 + 1))
    return v4;
  v2 = GestureResponder.gestureGraph.getter();
  swift_beginAccess();
  v1 = 0;
  if (*(_BYTE *)(v2 + 128) == 1)
  {
    specialized static Update.begin()();
    if (*(_DWORD *)(v2 + 244) == *MEMORY[0x24BE096C0])
    {
      v1 = 0;
    }
    else
    {
      type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for String?, MEMORY[0x24BEE0D00], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1C68]);
      v1 = *(_QWORD *)AGGraphGetValue();
      swift_bridgeObjectRetain();
    }
    static Update.end()();
  }
  swift_release();
  return v1;
}

double closure #1 in GestureResponder.label.getter@<D0>(_DWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  id v4;
  double result;
  __int128 v6;

  AGGraphClearUpdate();
  v4 = (id)AGSubgraphGetCurrent();
  AGSubgraphSetCurrent();
  closure #1 in closure #1 in GestureResponder.label.getter(a1, &v6);
  AGSubgraphSetCurrent();

  AGGraphSetUpdate();
  result = *(double *)&v6;
  *a2 = v6;
  return result;
}

uint64_t closure #1 in closure #1 in GestureResponder.label.getter@<X0>(_DWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  int v3;
  uint64_t v4;
  uint64_t (*v5)(void);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *Value;
  uint64_t v10;
  uint64_t v11;
  int v13;
  uint64_t KeyPath;
  _BYTE v15[16];
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v3 = a1[52];
  v18 = *(_OWORD *)(*(_QWORD *)a1 + 368);
  v13 = v3;
  KeyPath = swift_getKeyPath();
  v4 = MEMORY[0x24BEE0D00];
  v5 = MEMORY[0x24BEE1C68];
  type metadata accessor for MutableBox<CachedEnvironment>(255, (unint64_t *)&lazy cache variable for type metadata for String?, MEMORY[0x24BEE0D00], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1C68]);
  v16 = type metadata accessor for Focus();
  v17 = MEMORY[0x23B7C9C04](MEMORY[0x24BE09660], v16);
  type metadata accessor for Attribute<GesturePhase<()>>(0, &lazy cache variable for type metadata for Attribute<String?>, (unint64_t *)&lazy cache variable for type metadata for String?, v4, (uint64_t (*)(_QWORD, uint64_t))v5);
  v7 = v6;
  swift_retain();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v13, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TA_7, (uint64_t)v15, v16, MEMORY[0x24BEE4078], v7, MEMORY[0x24BEE40A8], v8);
  swift_release();
  swift_release();
  Value = (uint64_t *)AGGraphGetValue();
  v11 = *Value;
  v10 = Value[1];
  *a2 = v11;
  a2[1] = v10;
  return swift_bridgeObjectRetain();
}

uint64_t GestureResponder.isValid.getter()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 256))
    return AGSubgraphIsValid();
  else
    return 0;
}

uint64_t GestureResponder.detachContainer()()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 256) = 0;
  return swift_unknownObjectRelease();
}

void GestureResponder.makeSubviewsGesture(inputs:)(__int128 *a1@<X0>, uint64_t a2@<X8>)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5[6];
  _OWORD v6[2];

  v2 = a1[5];
  v5[4] = a1[4];
  v5[5] = v2;
  v6[0] = a1[6];
  *(_OWORD *)((char *)v6 + 12) = *(__int128 *)((char *)a1 + 108);
  v3 = a1[1];
  v5[0] = *a1;
  v5[1] = v3;
  v4 = a1[3];
  v5[2] = a1[2];
  v5[3] = v4;
  DefaultLayoutViewResponder.makeGesture(inputs:)(v5, a2);
}

uint64_t GestureResponder.containsGlobalPoints(_:cacheKey:options:)(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;

  v8 = *a4;
  swift_beginAccess();
  if ((*(_BYTE *)(v4 + 52) & 1) != 0 || (a3 & 0x100000000) != 0 || *(_DWORD *)(v4 + 48) != (_DWORD)a3)
  {
    LOBYTE(v12) = BYTE4(a3) & 1;
    closure #1 in MultiViewResponder.containsGlobalPoints(_:cacheKey:options:)(&v12, v4, a2, a3 | ((unint64_t)(BYTE4(a3) & 1) << 32), v8);
    v9 = v12;
    *(_QWORD *)(v4 + 56) = v12;
    *(_QWORD *)(v4 + 64) = v10;
    *(_DWORD *)(v4 + 48) = a3;
    *(_BYTE *)(v4 + 52) = BYTE4(a3) & 1;
  }
  else
  {
    v9 = *(_QWORD *)(v4 + 56);
  }
  result = swift_endAccess();
  *a1 = v9;
  return result;
}

uint64_t GestureResponder.bindEvent(_:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  _BYTE v7[40];
  uint64_t v8[2];
  uint64_t v9;
  double v10;
  double v11;
  double v12;

  if ((specialized static GestureContainerFeature.isEnabled.getter() & 1) == 0)
    return MultiViewResponder.bindEvent(_:)(a1);
  outlined init with copy of AnyTrackedValue(a1, (uint64_t)v7);
  HitTestableEvent.init(_:)((uint64_t)v7, (uint64_t)v8);
  v2 = v9;
  if (v9 == 1)
    return 0;
  v6 = v8[0];
  v5 = v8[1];
  v8[0] = 0;
  v3 = ViewResponder.hitTest(globalPoint:radius:options:)(v8, v10, v11, v12);
  outlined consume of HitTestableEvent?(v6, v5, v2);
  return v3;
}

void GestureResponder.makeGesture(inputs:)(__int128 *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  _OWORD v7[8];
  _OWORD v8[2];

  v3 = *v2;
  v4 = a1[5];
  v7[6] = a1[4];
  v7[7] = v4;
  v8[0] = a1[6];
  *(_OWORD *)((char *)v8 + 12) = *(__int128 *)((char *)a1 + 108);
  v5 = a1[1];
  v7[2] = *a1;
  v7[3] = v5;
  v6 = a1[3];
  v7[4] = a1[2];
  v7[5] = v6;
  AnyGestureResponder.makeWrappedGesture(inputs:makeChild:)(a1, (void (*)(unint64_t *__return_ptr, __int128 *))partial apply for closure #1 in GestureResponder.makeGesture(inputs:), (uint64_t)v7, v3, (uint64_t)&protocol witness table for GestureResponder<A>, a2);
}

uint64_t closure #1 in GestureResponder.makeGesture(inputs:)@<X0>(_OWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  uint64_t result;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  _DWORD v25[2];
  int v26;
  int v27;
  uint64_t v28;
  int v29;
  __int128 v30[5];
  int v31;
  _OWORD v32[2];
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  _OWORD v37[2];
  _OWORD v38[5];
  int v39;
  uint64_t v40;

  v40 = *MEMORY[0x24BDAC8D0];
  v7 = a1[3];
  v8 = a1[5];
  v35 = a1[4];
  v36 = v8;
  v37[0] = a1[6];
  *(_OWORD *)((char *)v37 + 12) = *(_OWORD *)((char *)a1 + 108);
  v9 = a1[1];
  v32[0] = *a1;
  v32[1] = v9;
  v38[0] = v32[0];
  v38[1] = v9;
  v10 = a1[3];
  v33 = a1[2];
  v34 = v10;
  v38[3] = v10;
  v38[4] = v35;
  v38[2] = v33;
  v39 = *((_DWORD *)a1 + 20);
  v30[2] = v33;
  v30[3] = v7;
  v30[4] = v35;
  v31 = *((_DWORD *)a1 + 20);
  v30[0] = v32[0];
  v30[1] = v9;
  outlined retain of _ViewInputs((uint64_t)v38);
  closure #1 in closure #1 in GestureResponder.makeGesture(inputs:)(a2, (uint64_t *)a3, v30, (uint64_t)v32, (uint64_t)&v26);
  if ((*(_BYTE *)(a2 + 120) & 8) != 0)
  {
    v25[0] = *(_DWORD *)(a3 + 208);
    v25[1] = v27;
    MEMORY[0x24BDAC7A8](v11);
    v22 = type metadata accessor for GestureViewDebug(0, v14, v15, v16);
    v23 = MEMORY[0x23B7C9C04](&protocol conformance descriptor for GestureViewDebug<A>, v22);
    type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for Attribute<GestureDebug.Data>, (uint64_t)&type metadata for GestureDebug.Data, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BE095F0]);
    _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v25, (uint64_t)closure #1 in Attribute.init<A>(_:)partial apply, (uint64_t)&v21, v22, MEMORY[0x24BEE4078], v17, MEMORY[0x24BEE40A8], v18);
    result = outlined release of _ViewInputs((uint64_t)v38);
    v13 = v24;
  }
  else
  {
    result = outlined release of _ViewInputs((uint64_t)v38);
    v13 = v27;
  }
  v19 = v28;
  v20 = v29;
  *(_DWORD *)a4 = v26;
  *(_DWORD *)(a4 + 4) = v13;
  *(_QWORD *)(a4 + 8) = v19;
  *(_DWORD *)(a4 + 16) = v20;
  return result;
}

double closure #1 in closure #1 in GestureResponder.makeGesture(inputs:)@<D0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, __int128 *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9;
  int v10;
  unsigned int v11;
  uint64_t KeyPath;
  __int128 v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t AssociatedTypeWitness;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t AssociatedConformanceWitness;
  char v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  double result;
  _QWORD *v37;
  __int128 v38;
  unsigned int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  char v61;
  int v62;
  _QWORD v63[2];
  int v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  _OWORD v71[2];
  __int128 v72;
  __int128 v73;
  __int128 v74;
  uint64_t v75;

  v75 = *MEMORY[0x24BDAC8D0];
  v9 = *a2;
  v10 = *(_DWORD *)(a1 + 120);
  v11 = *((_DWORD *)a2 + 52);
  KeyPath = swift_getKeyPath();
  if ((v10 & 4) != 0)
  {
    v38 = *a3;
    v66 = a3[1];
    v65 = v38;
    v67 = a3[2];
    swift_beginAccess();
    outlined retain of _GraphInputs((uint64_t)&v65);
    v39 = specialized CachedEnvironment.attribute<A>(keyPath:)(KeyPath);
    swift_endAccess();
    outlined release of _GraphInputs((uint64_t)&v65);
    v40 = swift_release();
    *(_QWORD *)&v72 = __PAIR64__(v39, v11);
    DWORD2(v72) = DWORD2(v66);
    MEMORY[0x24BDAC7A8](v40);
    v58 = type metadata accessor for GestureViewChild(0, v41, v42, v43);
    v59 = MEMORY[0x23B7C9C04](&protocol conformance descriptor for GestureViewChild<A>, v58);
    v44 = MEMORY[0x24BEE4AE0] + 8;
    type metadata accessor for Attribute<GesturePhase<()>>(0, &lazy cache variable for type metadata for Attribute<AnyGesture<()>>, &lazy cache variable for type metadata for AnyGesture<()>, MEMORY[0x24BEE4AE0] + 8, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for AnyGesture);
    _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v72, (uint64_t)closure #1 in Attribute.init<A>(_:)partial apply, (uint64_t)&v56, v58, MEMORY[0x24BEE4078], v45, MEMORY[0x24BEE40A8], v46);
    v47 = v63[0];
    type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for AnyGesture<()>, v44, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for AnyGesture);
    v49 = v48;
    specialized static AnyGesture._makeGesture(gesture:inputs:)(v47, a4, (uint64_t)&v72);
    if ((*(_BYTE *)(a4 + 120) & 8) != 0 && !(swift_conformsToProtocol2() ? v49 : 0))
    {
      _gestureModifierProtocolDescriptor();
      v51 = swift_conformsToProtocol();
      LOBYTE(v63[0]) = 1;
      if (v51)
        v52 = 2;
      else
        v52 = 1;
      specialized _GestureOutputs.reallyWrap<A>(_:kind:properties:inputs:data:)(v52, 0x100000000, a4);
    }
    v53 = *((_QWORD *)&v72 + 1);
    v54 = v73;
    result = *(double *)&v72;
    *(_QWORD *)a5 = v72;
    *(_QWORD *)(a5 + 8) = v53;
    *(_DWORD *)(a5 + 16) = v54;
  }
  else
  {
    v60 = (_QWORD *)a5;
    v13 = a3[1];
    v72 = *a3;
    v73 = v13;
    v74 = a3[2];
    swift_beginAccess();
    outlined retain of _GraphInputs((uint64_t)&v72);
    v14 = specialized CachedEnvironment.attribute<A>(keyPath:)(KeyPath);
    swift_endAccess();
    outlined release of _GraphInputs((uint64_t)&v72);
    v15 = swift_release();
    v16 = *(_QWORD *)(v9 + 368);
    v17 = *(_QWORD *)(v9 + 376);
    *(_QWORD *)&v65 = __PAIR64__(v14, v11);
    DWORD2(v65) = DWORD2(v73);
    *(_QWORD *)&v66 = a2;
    *((_QWORD *)&v66 + 1) = &protocol witness table for GestureResponder<A>;
    MEMORY[0x24BDAC7A8](v15);
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    v56 = AssociatedTypeWitness;
    v57 = type metadata accessor for CombiningGestureViewChild(0, v16, v17, v19);
    v58 = MEMORY[0x23B7C9C04](&protocol conformance descriptor for CombiningGestureViewChild<A>, v57);
    v20 = type metadata accessor for Attribute();
    swift_retain();
    _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v65, (uint64_t)partial apply for closure #1 in Attribute.init<A>(_:), (uint64_t)&v55, v57, MEMORY[0x24BEE4078], v20, MEMORY[0x24BEE40A8], v21);
    swift_release();
    _GraphValue.init(_:)(LODWORD(v63[0]), &v62);
    v22 = *(_OWORD *)(a4 + 80);
    v69 = *(_OWORD *)(a4 + 64);
    v70 = v22;
    v71[0] = *(_OWORD *)(a4 + 96);
    *(_OWORD *)((char *)v71 + 12) = *(_OWORD *)(a4 + 108);
    v23 = *(_OWORD *)(a4 + 16);
    v65 = *(_OWORD *)a4;
    v66 = v23;
    v24 = *(_OWORD *)(a4 + 48);
    v67 = *(_OWORD *)(a4 + 32);
    v68 = v24;
    AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    (*(void (**)(_QWORD *__return_ptr, int *, __int128 *, uint64_t, uint64_t))(AssociatedConformanceWitness + 32))(v63, &v62, &v65, AssociatedTypeWitness, AssociatedConformanceWitness);
    if ((*(_BYTE *)(a4 + 120) & 8) != 0 && !(swift_conformsToProtocol2() ? AssociatedTypeWitness : 0))
    {
      _gestureModifierProtocolDescriptor();
      if (swift_conformsToProtocol())
        v27 = 2;
      else
        v27 = 1;
      LOBYTE(v62) = v27;
      v28 = *(_OWORD *)(a4 + 80);
      v69 = *(_OWORD *)(a4 + 64);
      v70 = v28;
      v71[0] = *(_OWORD *)(a4 + 96);
      *(_OWORD *)((char *)v71 + 12) = *(_OWORD *)(a4 + 108);
      v29 = *(_OWORD *)(a4 + 16);
      v65 = *(_OWORD *)a4;
      v66 = v29;
      v30 = *(_OWORD *)(a4 + 48);
      v67 = *(_OWORD *)(a4 + 32);
      v68 = v30;
      v31 = HIDWORD(v63[0]) == *MEMORY[0x24BE096C0];
      if (HIDWORD(v63[0]) == *MEMORY[0x24BE096C0])
        v32 = 0;
      else
        v32 = HIDWORD(v63[0]);
      type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for _GestureOutputs<()>, MEMORY[0x24BEE4AE0] + 8, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for _GestureOutputs);
      v61 = 1;
      _GestureOutputs.reallyWrap<A>(_:kind:properties:inputs:data:)(AssociatedTypeWitness, (char *)&v62, 0x100000000, &v65, v32 | ((unint64_t)v31 << 32), 0x100000000, v33);
    }
    v34 = v63[1];
    v35 = v64;
    result = *(double *)v63;
    v37 = v60;
    *v60 = v63[0];
    v37[1] = v34;
    *((_DWORD *)v37 + 4) = v35;
  }
  return result;
}

void GestureResponder.resetGesture()()
{
  uint64_t v0;
  void *v1;
  void *v2;

  swift_beginAccess();
  v1 = *(void **)(v0 + 216);
  *(_QWORD *)(v0 + 216) = 0;

  swift_beginAccess();
  v2 = *(void **)(v0 + 224);
  *(_QWORD *)(v0 + 224) = 0;

  DefaultLayoutViewResponder.resetGesture()();
}

uint64_t GestureResponder.extendPrintTree(string:)()
{
  Swift::String v0;

  swift_getAssociatedTypeWitness();
  v0._countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v0);
  return swift_bridgeObjectRelease();
}

void GestureResponder.__allocating_init(inputs:)()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

void GestureResponder.__allocating_init(inputs:viewSubgraph:)()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

uint64_t GestureResponder.__ivar_destroyer()
{
  uint64_t v0;

  swift_release();
  swift_release();
  return swift_unknownObjectRelease();
}

uint64_t GestureResponder.deinit()
{
  uint64_t v0;

  v0 = DefaultLayoutViewResponder.deinit();

  swift_release();
  swift_release();
  swift_unknownObjectRelease();
  return v0;
}

uint64_t GestureResponder.__deallocating_deinit()
{
  GestureResponder.deinit();
  return swift_deallocClassInstance();
}

uint64_t GestureViewDebug.debugData.getter@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  _OWORD *Value;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  _OWORD v12[9];

  if (*MEMORY[0x24BE096C0] == HIDWORD(a1))
  {
    _s7SwiftUI15TextRenderLayer33_FB86B422571764190CF2C7C4C92612D4LLC6LayoutVSgWOi0_(v12);
    return outlined init with take of Image.ResizingInfo?((uint64_t)v12, (uint64_t)a2, &lazy cache variable for type metadata for GestureDebug.Data?, (uint64_t)&type metadata for GestureDebug.Data, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1C68]);
  }
  else
  {
    Value = (_OWORD *)AGGraphGetValue();
    v12[0] = *Value;
    v5 = Value[4];
    v7 = Value[1];
    v6 = Value[2];
    v12[3] = Value[3];
    v12[4] = v5;
    v12[1] = v7;
    v12[2] = v6;
    v8 = Value[8];
    v10 = Value[5];
    v9 = Value[6];
    v12[7] = Value[7];
    v12[8] = v8;
    v12[5] = v10;
    v12[6] = v9;
    memmove(a2, Value, 0x90uLL);
    _ViewInputs.base.modify(a2, v11);
    return outlined retain of GestureDebug.Data((uint64_t)v12);
  }
}

void *protocol witness for AnyGestureResponder.childSubgraph.getter in conformance GestureResponder<A>()
{
  uint64_t v0;
  void *v1;
  id v2;

  swift_beginAccess();
  v1 = *(void **)(v0 + 216);
  v2 = v1;
  return v1;
}

void protocol witness for AnyGestureResponder.childSubgraph.setter in conformance GestureResponder<A>(uint64_t a1)
{
  uint64_t v1;
  void *v3;

  swift_beginAccess();
  v3 = *(void **)(v1 + 216);
  *(_QWORD *)(v1 + 216) = a1;

}

uint64_t (*protocol witness for AnyGestureResponder.childSubgraph.modify in conformance GestureResponder<A>())()
{
  swift_beginAccess();
  return DisplayList.GraphicsRenderer.platformViewMode.modify;
}

void *protocol witness for AnyGestureResponder.childViewSubgraph.getter in conformance GestureResponder<A>()
{
  uint64_t v0;
  void *v1;
  id v2;

  swift_beginAccess();
  v1 = *(void **)(v0 + 224);
  v2 = v1;
  return v1;
}

void protocol witness for AnyGestureResponder.childViewSubgraph.setter in conformance GestureResponder<A>(uint64_t a1)
{
  uint64_t v1;
  void *v3;

  swift_beginAccess();
  v3 = *(void **)(v1 + 224);
  *(_QWORD *)(v1 + 224) = a1;

}

uint64_t (*protocol witness for AnyGestureResponder.childViewSubgraph.modify in conformance GestureResponder<A>())()
{
  swift_beginAccess();
  return CAHostingLayer.propertiesNeedingUpdate.modify;
}

uint64_t protocol witness for AnyGestureContainingResponder.gestureType.getter in conformance GestureResponder<A>()
{
  return specialized GestureResponder.gestureType.getter();
}

__n128 GestureViewDebug.value.getter@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v4;
  uint64_t (*v6)(void);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  __n128 result;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15[9];
  _OWORD v16[9];
  _BYTE __src[289];
  _BYTE v18[144];
  uint64_t v19[18];
  _BYTE v20[144];

  v4 = a1;
  GestureViewDebug.debugData.getter(a1, v18);
  v6 = MEMORY[0x24BEE1C68];
  outlined init with take of Image.ResizingInfo?((uint64_t)v18, (uint64_t)v19, &lazy cache variable for type metadata for GestureDebug.Data?, (uint64_t)&type metadata for GestureDebug.Data, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1C68]);
  outlined init with take of Image.ResizingInfo?((uint64_t)v19, (uint64_t)v20, &lazy cache variable for type metadata for GestureDebug.Data?, (uint64_t)&type metadata for GestureDebug.Data, (uint64_t (*)(_QWORD, uint64_t))v6);
  if (_s7SwiftUI12GestureDebugO4DataVSgWOg((uint64_t)v20) == 1)
  {
    type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for EmptyGesture<()>, MEMORY[0x24BEE4AE0] + 8, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EmptyGesture);
    v8 = v7;
    _s7SwiftUI16ArrayWith2InlineV7StorageOyAA12GestureDebugO4DataV_GWOi2_((uint64_t)v16);
    outlined init with take of Image.ResizingInfo?((uint64_t)v16, (uint64_t)__src, &lazy cache variable for type metadata for ArrayWith2Inline<GestureDebug.Data>.Storage, (uint64_t)&type metadata for GestureDebug.Data, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for ArrayWith2Inline.Storage);
    v9 = swift_allocObject();
    memcpy((void *)(v9 + 16), __src, 0x121uLL);
    v10 = *MEMORY[0x24BE096C0];
    *(_BYTE *)a3 = 0;
    *(_QWORD *)(a3 + 8) = v8;
    *(_WORD *)(a3 + 16) = 768;
    *(_DWORD *)(a3 + 20) = v10;
    *(_DWORD *)(a3 + 24) = 0;
    result.n128_u64[0] = 0;
    *(_OWORD *)(a3 + 32) = 0u;
    *(_OWORD *)(a3 + 48) = 0u;
    *(_OWORD *)(a3 + 64) = 0u;
    *(_OWORD *)(a3 + 80) = 0u;
    *(_OWORD *)(a3 + 96) = 0u;
    *(_OWORD *)(a3 + 112) = 0u;
    *(_BYTE *)(a3 + 128) = 3;
    *(_QWORD *)(a3 + 136) = v9;
  }
  else
  {
    outlined init with take of Image.ResizingInfo?((uint64_t)v19, (uint64_t)v16, &lazy cache variable for type metadata for GestureDebug.Data?, (uint64_t)&type metadata for GestureDebug.Data, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1C68]);
    v15[6] = v16[6];
    v15[7] = v16[7];
    v15[8] = v16[8];
    v15[2] = v16[2];
    v15[3] = v16[3];
    v15[4] = v16[4];
    v15[5] = v16[5];
    v15[0] = v16[0];
    v15[1] = v16[1];
    closure #1 in GestureViewDebug.value.getter(v15, v4, a2, (uint64_t)__src);
    outlined release of GestureDebug.Data?(v19);
    v12 = *(_OWORD *)&__src[112];
    *(_OWORD *)(a3 + 96) = *(_OWORD *)&__src[96];
    *(_OWORD *)(a3 + 112) = v12;
    *(_OWORD *)(a3 + 128) = *(_OWORD *)&__src[128];
    v13 = *(_OWORD *)&__src[48];
    *(_OWORD *)(a3 + 32) = *(_OWORD *)&__src[32];
    *(_OWORD *)(a3 + 48) = v13;
    v14 = *(_OWORD *)&__src[80];
    *(_OWORD *)(a3 + 64) = *(_OWORD *)&__src[64];
    *(_OWORD *)(a3 + 80) = v14;
    result = *(__n128 *)&__src[16];
    *(_OWORD *)a3 = *(_OWORD *)__src;
    *(__n128 *)(a3 + 16) = result;
  }
  return result;
}

__n128 closure #1 in GestureViewDebug.value.getter@<Q0>(__int128 *a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int16 v15;
  int v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  __n128 result;
  __n128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  _OWORD v27[3];
  uint64_t v28;
  uint64_t v29;
  char v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  _OWORD v40[18];
  _BYTE __src[312];

  v7 = a1[5];
  v8 = a1[7];
  v37 = a1[6];
  v38 = v8;
  v9 = a1[1];
  v10 = a1[3];
  v33 = a1[2];
  v34 = v10;
  v11 = a1[3];
  v12 = a1[5];
  v35 = a1[4];
  v36 = v12;
  v13 = a1[1];
  v31 = *a1;
  v32 = v13;
  v40[5] = v7;
  v40[6] = v37;
  v14 = a1[8];
  v40[7] = a1[7];
  v40[8] = v14;
  v40[1] = v9;
  v40[2] = v33;
  v40[3] = v11;
  v40[4] = v35;
  v39 = v14;
  v40[0] = v31;
  _s7SwiftUI16ArrayWith2InlineV7StorageOyAA12GestureDebugO4DataV_GWOi_((uint64_t)v40);
  outlined init with take of Image.ResizingInfo?((uint64_t)v40, (uint64_t)__src, &lazy cache variable for type metadata for ArrayWith2Inline<GestureDebug.Data>.Storage, (uint64_t)&type metadata for GestureDebug.Data, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for ArrayWith2Inline.Storage);
  v15 = v32;
  v16 = DWORD2(v32);
  v26 = v33;
  v17 = v34;
  outlined retain of GestureDebug.Data((uint64_t)&v31);
  specialized ArrayWith2Inline.init<A>(_:)((uint64_t *)(MEMORY[0x24BEE4AF8] + 32), 0, (uint64_t)v27);
  v25 = v27[0];
  v24 = v27[1];
  v23 = (__n128)v27[2];
  v18 = v28;
  v19 = v29;
  v20 = v30;
  v21 = swift_allocObject();
  memcpy((void *)(v21 + 16), __src, 0x121uLL);
  *(_BYTE *)a4 = 3;
  *(_QWORD *)(a4 + 8) = a3;
  *(_WORD *)(a4 + 16) = v15;
  *(_DWORD *)(a4 + 20) = a2;
  *(_DWORD *)(a4 + 24) = v16;
  *(_OWORD *)(a4 + 32) = v26;
  *(_OWORD *)(a4 + 48) = v17;
  *(_OWORD *)(a4 + 64) = v25;
  *(_OWORD *)(a4 + 80) = v24;
  result = v23;
  *(__n128 *)(a4 + 96) = v23;
  *(_QWORD *)(a4 + 112) = v18;
  *(_QWORD *)(a4 + 120) = v19;
  *(_BYTE *)(a4 + 128) = v20;
  *(_QWORD *)(a4 + 136) = v21;
  return result;
}

uint64_t protocol witness for static Rule.initialValue.getter in conformance GestureViewDebug<A>@<X0>(uint64_t a1@<X8>)
{
  _OWORD v3[9];

  _s7SwiftUI15TextRenderLayer33_FB86B422571764190CF2C7C4C92612D4LLC6LayoutVSgWOi0_(v3);
  return outlined init with take of Image.ResizingInfo?((uint64_t)v3, a1, &lazy cache variable for type metadata for GestureDebug.Data?, (uint64_t)&type metadata for GestureDebug.Data, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1C68]);
}

double protocol witness for Rule.value.getter in conformance GestureViewDebug<A>@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  double result;

  *(_QWORD *)&result = GestureViewDebug.value.getter(*v2, *(_QWORD *)(a1 + 16), a2).n128_u64[0];
  return result;
}

uint64_t GestureViewChild.value.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t Value;
  void (*v12)(char *, uint64_t, uint64_t);
  char v13;
  void (*v14)(char *, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t AssociatedConformanceWitness;
  uint64_t v20;
  uint64_t v21;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v21 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v20 = type metadata accessor for _MapGesture(0, AssociatedTypeWitness, MEMORY[0x24BEE4AE0] + 8, AssociatedConformanceWitness);
  MEMORY[0x24BDAC7A8](v20);
  v7 = *(_QWORD *)(a3 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  Value = AGGraphGetValue();
  v12 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 16);
  v12(v10, Value, a3);
  v13 = (*(uint64_t (**)(uint64_t, uint64_t))(a4 + 72))(a3, a4);
  v14 = *(void (**)(char *, uint64_t))(v7 + 8);
  v14(v10, a3);
  if ((v13 & 1) != 0 && *(_BYTE *)AGGraphGetValue() == 1)
  {
    v15 = AGGraphGetValue();
    v12(v10, v15, a3);
    (*(void (**)(uint64_t, uint64_t))(a4 + 56))(a3, a4);
    v14(v10, a3);
    v16 = swift_allocObject();
    *(_QWORD *)(v16 + 16) = a3;
    *(_QWORD *)(v16 + 24) = a4;
    Gesture.map<A>(_:)((uint64_t)_ViewInputs.base.modify, v16, AssociatedTypeWitness, MEMORY[0x24BEE4AE0] + 8);
  }
  type metadata accessor for AnyGestureStorage<EmptyGesture<()>>(0);
  return swift_allocObject();
}

uint64_t protocol witness for Rule.value.getter in conformance GestureViewChild<A>@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;

  result = GestureViewChild.value.getter(*(_QWORD *)v2, *(unsigned int *)(v2 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24));
  *a2 = result;
  return result;
}

void CombiningGestureViewChild.value.getter(uint64_t a1@<X2>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v4;
  uint64_t AssociatedConformanceWitness;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v10[3];
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v10[0] = a2;
  v10[1] = a1;
  v16 = a3;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v15 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v14 = (char *)v10 - v4;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v6 = swift_getAssociatedTypeWitness();
  v9 = type metadata accessor for ContentGesture(255, v6, v7, v8);
  v11 = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ContentGesture<A>, v9);
  v12 = v9;
  v17 = v9;
  v18 = AssociatedTypeWitness;
  v19 = v11;
  v20 = AssociatedConformanceWitness;
  v13 = AssociatedConformanceWitness;
  type metadata accessor for ModifierGesture();
}

uint64_t sub_234F9EF04(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t Value;
  void (*v11)(_BYTE *, uint64_t, uint64_t);
  uint64_t (*v12)(uint64_t, uint64_t);
  char v13;
  void (*v14)(_BYTE *, uint64_t);
  int v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  _BYTE v26[96];

  *(_QWORD *)(v4 - 152) = a1;
  MEMORY[0x24BDAC7A8](a1);
  *(_QWORD *)(v4 - 176) = &v26[-v5];
  v6 = *(_QWORD *)(v1 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v9 = &v26[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  Value = AGGraphGetValue();
  v11 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v6 + 16);
  v11(v9, Value, v1);
  v12 = *(uint64_t (**)(uint64_t, uint64_t))(v2 + 72);
  v13 = v12(v1, v2);
  v14 = *(void (**)(_BYTE *, uint64_t))(v6 + 8);
  v14(v9, v1);
  v15 = 0;
  if ((v13 & 1) != 0)
    v15 = *(unsigned __int8 *)AGGraphGetValue();
  v16 = AGGraphGetValue();
  v11(v9, v16, v1);
  v17 = v12(v1, v2);
  v14(v9, v1);
  if ((v17 & 2) != 0)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for AnyGestureStorage<SubviewsGesture>, (uint64_t)&unk_25061F4D8, (uint64_t)&protocol witness table for SubviewsGesture, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for AnyGestureStorage);
    v18 = swift_allocObject();
    v19 = *(_QWORD *)(v4 - 192);
    *(_QWORD *)(v18 + 16) = *(_QWORD *)(v4 - 184);
    *(_QWORD *)(v18 + 24) = v19;
    swift_retain();
    if (!v15)
      goto LABEL_5;
LABEL_7:
    v20 = AGGraphGetValue();
    v11(v9, v20, v1);
    (*(void (**)(uint64_t, uint64_t))(v2 + 56))(v1, v2);
    v21 = ((uint64_t (*)(_BYTE *, uint64_t))v14)(v9, v1);
    Gesture.modifier<A>(_:)(v21, v3, *(_QWORD *)(v4 - 160), *(_QWORD *)(v4 - 144), *(_QWORD *)(v4 - 168), *(_QWORD *)(v4 - 176));
  }
  type metadata accessor for AnyGestureStorage<EmptyGesture<()>>(0);
  v18 = swift_allocObject();
  if (v15)
    goto LABEL_7;
LABEL_5:
  type metadata accessor for AnyGestureStorage<EmptyGesture<()>>(0);
  v22 = swift_allocObject();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(AssociatedConformanceWitness + 24))(v18, v22, AssociatedTypeWitness, AssociatedConformanceWitness);
  swift_release();
  return swift_release();
}

uint64_t protocol witness for static Rule.initialValue.getter in conformance CombiningGestureViewChild<A>@<X0>(uint64_t a1@<X8>)
{
  uint64_t AssociatedTypeWitness;

  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 56))(a1, 1, 1, AssociatedTypeWitness);
}

void protocol witness for Rule.value.getter in conformance CombiningGestureViewChild<A>(uint64_t a1@<X8>)
{
  uint64_t v1;

  CombiningGestureViewChild.value.getter(*(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), a1);
}

uint64_t static ContentGesture._makeGesture(modifier:inputs:body:)@<X0>(__int128 *a1@<X1>, void (*a2)(__int128 *__return_ptr, __int128 *)@<X2>, uint64_t a3@<X4>, uint64_t a4@<X8>)
{
  __int128 v6;
  __int128 v7;
  __int128 v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v19;
  __int128 v20;
  int v21;
  _BYTE v22[16];
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;

  v34 = *MEMORY[0x24BDAC8D0];
  v6 = a1[5];
  v29 = a1[4];
  v30 = v6;
  v31 = a1[6];
  v7 = a1[1];
  v25 = *a1;
  v26 = v7;
  v8 = a1[3];
  v27 = a1[2];
  v28 = v8;
  v10 = *(_QWORD *)((char *)a1 + 116);
  v32 = *((_DWORD *)a1 + 28);
  v9 = v32;
  v33 = v10;
  a2(&v20, &v25);
  v25 = v20;
  LODWORD(v26) = v21;
  *(_QWORD *)((char *)&v20 + 4) = v9;
  v13 = type metadata accessor for ContentPhase(0, a3, v11, v12);
  v23 = v13;
  v24 = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ContentPhase<A>, v13);
  type metadata accessor for Attribute<GesturePhase<()>>(0, (unint64_t *)&lazy cache variable for type metadata for Attribute<GesturePhase<()>>, (unint64_t *)&lazy cache variable for type metadata for GesturePhase<()>, MEMORY[0x24BEE4AE0] + 8, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for GesturePhase);
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v20, (uint64_t)closure #1 in Attribute.init<A>(_:)partial apply, (uint64_t)v22, v13, MEMORY[0x24BEE4078], v14, MEMORY[0x24BEE40A8], v15);
  type metadata accessor for _GestureOutputs(0, a3, v16, v17);
  _GestureOutputs.withPhase<A>(_:)(v19, a4);
  return swift_bridgeObjectRelease();
}

uint64_t protocol witness for static GestureModifier._makeGesture(modifier:inputs:body:) in conformance ContentGesture<A>@<X0>(__int128 *a1@<X1>, void (*a2)(__int128 *__return_ptr, __int128 *)@<X2>, uint64_t a3@<X4>, uint64_t a4@<X8>)
{
  return static ContentGesture._makeGesture(modifier:inputs:body:)(a1, a2, *(_QWORD *)(a3 + 16), a4);
}

uint64_t static SubviewsGesture._makeGesture(gesture:inputs:)@<X0>(unsigned int *a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X8>)
{
  unsigned int v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  int IndirectAttribute2;
  int v9;
  char v10;
  int v11;
  unint64_t v12;
  int v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  unint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  _BYTE v25[28];
  int v26;
  int v27;
  unint64_t v28;
  int v29;
  __int128 v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  int v34;
  int v35;
  _OWORD v36[9];
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  _BYTE v43[28];
  uint64_t v44;

  v44 = *MEMORY[0x24BDAC8D0];
  v4 = *a1;
  v5 = a2[5];
  v41 = a2[4];
  v42 = v5;
  *(_OWORD *)v43 = a2[6];
  *(_OWORD *)&v43[12] = *(__int128 *)((char *)a2 + 108);
  v6 = a2[1];
  v37 = *a2;
  v38 = v6;
  v7 = a2[3];
  v39 = a2[2];
  v40 = v7;
  specialized _GestureInputs.intern<A>(_:id:)(768, 0);
  IndirectAttribute2 = AGGraphCreateIndirectAttribute2();
  v9 = *MEMORY[0x24BE096C0];
  v10 = v43[24];
  v11 = *MEMORY[0x24BE096C0];
  if ((v43[24] & 8) != 0)
  {
    if (one-time initialization token for defaultValue != -1)
      swift_once();
    v36[6] = xmmword_2561B4810;
    v36[7] = xmmword_2561B4820;
    v36[8] = xmmword_2561B4830;
    v36[2] = xmmword_2561B47D0;
    v36[3] = xmmword_2561B47E0;
    v36[4] = xmmword_2561B47F0;
    v36[5] = xmmword_2561B4800;
    v36[0] = static GestureDebug.Data.defaultValue;
    v36[1] = xmmword_2561B47C0;
    outlined retain of GestureDebug.Data((uint64_t)v36);
    specialized _GestureInputs.intern<A>(_:id:)((uint64_t)v36, 0);
    outlined release of GestureDebug.Data((uint64_t)v36);
    v11 = AGGraphCreateIndirectAttribute2();
  }
  PreferencesInputs.makeIndirectOutputs()((uint64_t)&v18);
  v12 = v18;
  v13 = v19;
  v14 = (id)AGSubgraphGetCurrent();
  if (!v14)
    __break(1u);
  v18 = __PAIR64__(*(unsigned int *)&v43[16], v4);
  v23 = v41;
  v24 = v42;
  *(_OWORD *)v25 = *(_OWORD *)v43;
  *(_OWORD *)&v25[12] = *(_OWORD *)&v43[12];
  v19 = v37;
  v20 = v38;
  v21 = v39;
  v22 = v40;
  v26 = IndirectAttribute2;
  v27 = v11;
  v28 = v12;
  v29 = v13;
  v33 = 0;
  v31 = 0;
  v30 = (unint64_t)v14;
  v32 = 0;
  v34 = v9;
  v35 = v9;
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  outlined retain of _GestureInputs((uint64_t)&v37);
  lazy protocol witness table accessor for type SubviewsPhase and conformance SubviewsPhase();
  swift_bridgeObjectRetain();
  Attribute.init<A>(body:value:flags:update:)();
  outlined release of SubviewsPhase((uint64_t)&v18);
  if ((v10 & 8) != 0)
  {
    AGGraphCreateOffsetAttribute2();
    if (v11 == v9)
      v11 = AGGraphCreateIndirectAttribute2();
    else
      AGGraphSetIndirectAttribute();
  }
  swift_bridgeObjectRetain();
  AGGraphSetIndirectDependency();
  if (v11 != v9)
    AGGraphSetIndirectDependency();
  v15 = *(_QWORD *)(v12 + 16);
  if (v15)
  {
    swift_bridgeObjectRetain();
    v16 = 48;
    do
    {
      AGGraphSetIndirectDependency();
      v16 += 24;
      --v15;
    }
    while (v15);
    swift_bridgeObjectRelease();
  }
  result = swift_bridgeObjectRelease();
  *(_DWORD *)a3 = IndirectAttribute2;
  *(_DWORD *)(a3 + 4) = v11;
  *(_QWORD *)(a3 + 8) = v12;
  *(_DWORD *)(a3 + 16) = v13;
  return result;
}

uint64_t ContentPhase.resetSeed.getter()
{
  return *(unsigned int *)AGGraphGetValue();
}

uint64_t ContentPhase.updateValue()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  double v7;
  uint64_t v8;
  char *v9;
  uint64_t result;
  uint64_t Value;
  uint64_t v12;
  _WORD v13[4];
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  v5 = type metadata accessor for GesturePhase(0, *(_QWORD *)(a1 + 16), a3, a4);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = MEMORY[0x24BDAC7A8](v5);
  v9 = (char *)v13 - v8;
  MEMORY[0x23B7C9C04](&protocol conformance descriptor for ContentPhase<A>, a1, v7);
  result = ResettableGestureRule.resetIfNeeded()();
  if ((result & 1) != 0)
  {
    Value = AGGraphGetValue();
    (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v9, Value, v5);
    v12 = MEMORY[0x24BEE4AE0] + 8;
    GesturePhase.withValue<A>(_:)();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
    v13[2] = v13[3];
    type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for GesturePhase<()>, v12, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for GesturePhase);
    return AGGraphSetOutputValue();
  }
  return result;
}

uint64_t protocol witness for ResettableGestureRule.resetSeed.getter in conformance ContentPhase<A>()
{
  return ContentPhase.resetSeed.getter();
}

uint64_t protocol witness for ResettableGestureRule.lastResetSeed.getter in conformance ContentPhase<A>()
{
  uint64_t v0;

  return *(unsigned int *)(v0 + 8);
}

uint64_t protocol witness for ResettableGestureRule.lastResetSeed.setter in conformance ContentPhase<A>(uint64_t result)
{
  uint64_t v1;

  *(_DWORD *)(v1 + 8) = result;
  return result;
}

void protocol witness for static StatefulRule.initialValue.getter in conformance ContentPhase<A>(_WORD *a1@<X8>)
{
  *a1 = -256;
}

uint64_t SubviewsPhase.updateValue()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t Value;
  uint64_t v3;
  uint64_t *v4;
  uint64_t *v5;
  unsigned int v6;
  void *v7;
  int v8;
  uint64_t v9;
  int v10;
  id v11;
  uint64_t v12;
  _DWORD *v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(uint64_t);
  uint64_t v19;
  id v20;
  void *v21;
  id v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  void (*v30)(__int128 *__return_ptr, _BYTE *, uint64_t, uint64_t);
  int v31;
  int v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  int v36;
  unsigned int v37;
  uint64_t v38;
  char v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  char v45;
  __int128 v46;
  uint64_t v47;
  char v48;
  char v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  _OWORD *v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  uint64_t v63;
  __int128 v64;
  __int128 v65;
  id v66;
  __int128 v67;
  __int128 v68;
  void *v69;
  __int128 v70;
  __int128 v71;
  uint64_t v72;
  char v73;
  uint64_t *v74;
  _BYTE v75[300];
  _BYTE v76[289];
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  uint64_t v86;

  v1 = v0;
  v86 = *MEMORY[0x24BDAC8D0];
  Value = AGGraphGetValue();
  v4 = *(uint64_t **)Value;
  v3 = *(_QWORD *)(Value + 8);
  v74 = *(uint64_t **)Value;
  if (*(_DWORD *)AGGraphGetValue() == *(_DWORD *)(v0 + 184))
  {
    v5 = *(uint64_t **)(v0 + 168);
    if (v5)
    {
      if (v4 == v5)
      {
        swift_retain();
        v6 = *MEMORY[0x24BE096C0];
        goto LABEL_21;
      }
    }
  }
  v7 = *(void **)(v0 + 192);
  v72 = v3;
  if (v7)
  {
    v8 = *(_DWORD *)(v0 + 140);
    v9 = *(_QWORD *)(v1 + 144);
    v10 = *MEMORY[0x24BE096C0];
    swift_retain();
    v11 = v7;
    swift_bridgeObjectRetain();
    AGGraphSetIndirectAttribute();
    if (v8 != v10)
      AGGraphSetIndirectAttribute();
    v12 = *(_QWORD *)(v9 + 16);
    if (v12)
    {
      swift_bridgeObjectRetain();
      v13 = (_DWORD *)(v9 + 48);
      do
      {
        v14 = *((_QWORD *)v13 - 1);
        v15 = *v13;
        v13 += 6;
        *(_DWORD *)v76 = v15;
        (*(void (**)(_BYTE *, ValueMetadata *, _UNKNOWN **))(v14 + 16))(v76, &type metadata for ResetPreference #1 in PreferencesOutputs.detachIndirectOutputs(), &protocol witness table for ResetPreference #1 in PreferencesOutputs.detachIndirectOutputs());
        --v12;
      }
      while (v12);

      v16 = swift_bridgeObjectRelease_n();
      v4 = v74;
    }
    else
    {

      v16 = swift_bridgeObjectRelease();
    }
    *(_QWORD *)(v1 + 192) = 0;
    *(_DWORD *)(v1 + 200) = v10;
    MEMORY[0x24BDAC7A8](v16);
    AGSubgraphApply();
    AGSubgraphInvalidate();

    v3 = v72;
    v17 = *(_QWORD *)(v1 + 168);
    if (!v17)
      goto LABEL_17;
    goto LABEL_16;
  }
  swift_retain();
  v17 = *(_QWORD *)(v0 + 168);
  if (v17)
  {
LABEL_16:
    v18 = *(void (**)(uint64_t))(*(_QWORD *)v17 + 120);
    v19 = swift_retain();
    v18(v19);
    swift_release();
  }
LABEL_17:
  v20 = (id)AGSubgraphGetGraph();
  v21 = (void *)AGSubgraphCreate();

  *(_QWORD *)(v1 + 192) = v21;
  AGSubgraphAddChild();
  v22 = v21;
  AGGraphClearUpdate();
  v66 = (id)AGSubgraphGetCurrent();
  v69 = v22;
  AGSubgraphSetCurrent();
  v23 = *v4;
  v24 = *(_OWORD *)(v1 + 88);
  *(_OWORD *)&v76[64] = *(_OWORD *)(v1 + 72);
  *(_OWORD *)&v76[80] = v24;
  *(_OWORD *)&v76[96] = *(_OWORD *)(v1 + 104);
  *(_OWORD *)&v76[108] = *(_OWORD *)(v1 + 116);
  v25 = *(_OWORD *)(v1 + 24);
  *(_OWORD *)v76 = *(_OWORD *)(v1 + 8);
  *(_OWORD *)&v76[16] = v25;
  v26 = *(_OWORD *)(v1 + 56);
  *(_OWORD *)&v76[32] = *(_OWORD *)(v1 + 40);
  *(_OWORD *)&v76[48] = v26;
  v27 = *(_OWORD *)(v1 + 88);
  *(_OWORD *)&v75[64] = *(_OWORD *)(v1 + 72);
  *(_OWORD *)&v75[80] = v27;
  *(_OWORD *)&v75[96] = *(_OWORD *)(v1 + 104);
  *(_OWORD *)&v75[108] = *(_OWORD *)(v1 + 116);
  v28 = *(_OWORD *)(v1 + 24);
  *(_OWORD *)v75 = *(_OWORD *)(v1 + 8);
  *(_OWORD *)&v75[16] = v28;
  v29 = *(_OWORD *)(v1 + 56);
  *(_OWORD *)&v75[32] = *(_OWORD *)(v1 + 40);
  *(_OWORD *)&v75[48] = v29;
  v30 = *(void (**)(__int128 *__return_ptr, _BYTE *, uint64_t, uint64_t))(v3 + 96);
  outlined retain of _GestureInputs((uint64_t)v76);
  v30(&v77, v75, v23, v3);
  outlined release of _GestureInputs((uint64_t)v76);
  v31 = v77;
  v32 = DWORD1(v77);
  v33 = *((_QWORD *)&v77 + 1);
  v34 = v78;
  LODWORD(v22) = *(_DWORD *)(v1 + 140);
  v35 = *(_QWORD *)(v1 + 144);
  v36 = *(_DWORD *)(v1 + 152);
  swift_bridgeObjectRetain();
  AGGraphSetIndirectAttribute();
  v37 = *MEMORY[0x24BE096C0];
  if ((_DWORD)v22 != *MEMORY[0x24BE096C0] && v32 != *MEMORY[0x24BE096C0])
    AGGraphSetIndirectAttribute();
  *(_QWORD *)v75 = v35;
  *(_DWORD *)&v75[8] = v36;
  *(_QWORD *)&v77 = v33;
  DWORD2(v77) = v34;
  PreferencesOutputs.attachIndirectOutputs(to:)((uint64_t)&v77);
  swift_bridgeObjectRelease();
  AGSubgraphSetCurrent();

  AGGraphSetUpdate();
  *(_DWORD *)(v1 + 200) = v31;
  swift_bridgeObjectRelease();
  *(_DWORD *)(v1 + 204) = v32;
  *(_DWORD *)(v1 + 184) = *(_DWORD *)AGGraphGetValue();
  swift_retain();
  swift_release();
  *(_QWORD *)(v1 + 168) = v74;
  *(_QWORD *)(v1 + 176) = v72;
  v6 = v37;
LABEL_21:
  v38 = MEMORY[0x24BEE4AE0];
  if (*(_DWORD *)(v1 + 200) == v6)
  {
    v73 = 0;
    v39 = 3;
  }
  else
  {
    type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for GesturePhase<()>, MEMORY[0x24BEE4AE0] + 8, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for GesturePhase);
    v40 = (char *)AGGraphGetValue();
    v73 = *v40;
    v39 = v40[1];
  }
  if (*(_DWORD *)(v1 + 204) == v6)
  {
    type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for EmptyGesture<()>, v38 + 8, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EmptyGesture);
    v42 = v41;
    _s7SwiftUI16ArrayWith2InlineV7StorageOyAA12GestureDebugO4DataV_GWOi2_((uint64_t)v75);
    outlined init with take of Image.ResizingInfo?((uint64_t)v75, (uint64_t)v76, &lazy cache variable for type metadata for ArrayWith2Inline<GestureDebug.Data>.Storage, (uint64_t)&type metadata for GestureDebug.Data, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for ArrayWith2Inline.Storage);
    v43 = swift_allocObject();
    memcpy((void *)(v43 + 16), v76, 0x121uLL);
    v44 = 0;
    v45 = 0;
    v46 = 0uLL;
    v47 = v6;
    v48 = 3;
    v49 = 3;
    v50 = 0uLL;
    v51 = 0uLL;
    v52 = 0uLL;
    v53 = 0uLL;
    v54 = 0uLL;
  }
  else
  {
    v55 = (_OWORD *)AGGraphGetValue();
    *(_OWORD *)v76 = *v55;
    v56 = v55[4];
    v58 = v55[1];
    v57 = v55[2];
    *(_OWORD *)&v76[48] = v55[3];
    *(_OWORD *)&v76[64] = v56;
    *(_OWORD *)&v76[16] = v58;
    *(_OWORD *)&v76[32] = v57;
    v59 = v55[8];
    v61 = v55[5];
    v60 = v55[6];
    *(_OWORD *)&v76[112] = v55[7];
    *(_OWORD *)&v76[128] = v59;
    *(_OWORD *)&v76[80] = v61;
    *(_OWORD *)&v76[96] = v60;
    v43 = *((_QWORD *)&v59 + 1);
    v70 = v61;
    v71 = *(_OWORD *)&v76[64];
    v67 = *(_OWORD *)&v76[112];
    v68 = v60;
    v49 = v59;
    v64 = *(_OWORD *)&v76[48];
    v65 = *(_OWORD *)&v76[32];
    v63 = *(_QWORD *)&v76[20];
    v45 = v76[16];
    v48 = v76[17];
    v42 = *(_QWORD *)&v76[8];
    v44 = v76[0];
    outlined retain of GestureDebug.Data((uint64_t)v76);
    v54 = v64;
    v53 = v65;
    v52 = v67;
    v51 = v68;
    v50 = v70;
    v46 = v71;
    v47 = v63;
  }
  LOBYTE(v77) = v44;
  *((_QWORD *)&v77 + 1) = v42;
  LOBYTE(v78) = v45;
  BYTE1(v78) = v48;
  *(_QWORD *)((char *)&v78 + 4) = v47;
  v79 = v53;
  v80 = v54;
  v81 = v46;
  v82 = v50;
  v83 = v51;
  v84 = v52;
  LOBYTE(v85) = v49;
  *((_QWORD *)&v85 + 1) = v43;
  *(_OWORD *)&v75[86] = v50;
  *(_OWORD *)&v75[102] = v51;
  *(_OWORD *)&v75[118] = v52;
  *(_OWORD *)&v75[134] = v85;
  *(_OWORD *)&v75[22] = v78;
  *(_OWORD *)&v75[38] = v53;
  *(_OWORD *)&v75[54] = v54;
  *(_OWORD *)&v75[70] = v46;
  *(_OWORD *)&v75[6] = v77;
  v76[0] = v73;
  v76[1] = v39;
  *(_OWORD *)&v76[98] = *(_OWORD *)&v75[96];
  *(_OWORD *)&v76[114] = *(_OWORD *)&v75[112];
  *(_OWORD *)&v76[130] = *(_OWORD *)&v75[128];
  *(_QWORD *)&v76[144] = v43;
  *(_OWORD *)&v76[34] = *(_OWORD *)&v75[32];
  *(_OWORD *)&v76[50] = *(_OWORD *)&v75[48];
  *(_OWORD *)&v76[66] = *(_OWORD *)&v75[64];
  *(_OWORD *)&v76[82] = *(_OWORD *)&v75[80];
  *(_OWORD *)&v76[2] = *(_OWORD *)v75;
  *(_OWORD *)&v76[18] = *(_OWORD *)&v75[16];
  AGGraphSetOutputValue();
  swift_release();
  return outlined release of GestureDebug.Data((uint64_t)&v77);
}

uint64_t protocol witness for static StatefulRule.initialValue.getter in conformance SubviewsPhase@<X0>(uint64_t a1@<X8>)
{
  _BYTE v3[152];

  _s7SwiftUI13SubviewsPhase33_9DF46B4E935FF03A55FF3DDFB0B1FF2BLLV5ValueVSgWOi0_((uint64_t)v3);
  return outlined init with take of Image.ResizingInfo?((uint64_t)v3, a1, &lazy cache variable for type metadata for SubviewsPhase.Value?, (uint64_t)&unk_250617408, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1C68]);
}

uint64_t protocol witness for ObservedAttribute.destroy() in conformance SubviewsPhase()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;

  v1 = *(_QWORD *)(v0 + 168);
  if (v1)
    return (*(uint64_t (**)(void))(*(_QWORD *)v1 + 120))();
  return result;
}

uint64_t protocol witness for static _AttributeBody._destroySelf(_:) in conformance SubviewsPhase(uint64_t result)
{
  uint64_t v1;

  v1 = *(_QWORD *)(result + 168);
  if (v1)
    return (*(uint64_t (**)(void))(*(_QWORD *)v1 + 120))();
  return result;
}

uint64_t _GraphInputs.gestureAccessibilityProvider.getter()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;

  v1 = *v0;
  swift_retain_n();
  swift_retain();
  swift_bridgeObjectRetain();
  v2 = specialized find<A>(_:key:)(v1);
  if (v2)
  {
    v3 = (uint64_t *)(v2 + 72);
  }
  else
  {
    v3 = &static _GraphInputs.GestureAccessibilityProviderKey.defaultValue;
    if (one-time initialization token for defaultValue != -1)
      swift_once();
  }
  v4 = *v3;
  swift_bridgeObjectRelease();
  swift_release();
  swift_release_n();
  return v4;
}

uint64_t key path getter for _GraphInputs.gestureAccessibilityProvider : _GraphInputs@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = _GraphInputs.gestureAccessibilityProvider.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t key path setter for _GraphInputs.gestureAccessibilityProvider : _GraphInputs(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *a1;
  v4 = a1[1];
  swift_retain();
  specialized closure #1 in PropertyList.subscript.setter(a2, v3, v4);
  return swift_release();
}

uint64_t _GraphInputs.gestureAccessibilityProvider.setter(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;

  swift_retain();
  specialized closure #1 in PropertyList.subscript.setter(v2, a1, a2);
  return swift_release();
}

void (*_GraphInputs.gestureAccessibilityProvider.modify(_QWORD *a1))(uint64_t **a1)
{
  uint64_t *v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;

  v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = v1;
  v4 = *v1;
  swift_retain_n();
  swift_retain();
  swift_bridgeObjectRetain();
  v5 = specialized find<A>(_:key:)(v4);
  if (v5)
  {
    v6 = (uint64_t *)(v5 + 72);
    v7 = (uint64_t *)(v5 + 80);
  }
  else
  {
    v6 = &static _GraphInputs.GestureAccessibilityProviderKey.defaultValue;
    v7 = (uint64_t *)&off_2561B8430;
    if (one-time initialization token for defaultValue != -1)
      swift_once();
  }
  v8 = *v7;
  v9 = *v6;
  swift_release_n();
  swift_release();
  swift_bridgeObjectRelease();
  *v3 = v9;
  v3[1] = v8;
  return _GraphInputs.gestureAccessibilityProvider.modify;
}

void _GraphInputs.gestureAccessibilityProvider.modify(uint64_t **a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *a1;
  v2 = (uint64_t *)(*a1)[4];
  v3 = **a1;
  v4 = (*a1)[1];
  swift_retain();
  specialized closure #1 in PropertyList.subscript.setter(v2, v3, v4);
  swift_release();
  free(v1);
}

double protocol witness for static PropertyKey.defaultValue.getter in conformance _GraphInputs.GestureAccessibilityProviderKey@<D0>(_OWORD *a1@<X8>)
{
  double result;

  if (one-time initialization token for defaultValue != -1)
    swift_once();
  result = *(double *)&static _GraphInputs.GestureAccessibilityProviderKey.defaultValue;
  *a1 = *(_OWORD *)&static _GraphInputs.GestureAccessibilityProviderKey.defaultValue;
  return result;
}

uint64_t key path getter for _ViewInputs.gestureAccessibilityProvider : _ViewInputs@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = _ViewInputs.gestureAccessibilityProvider.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t _ViewInputs.gestureAccessibilityProvider.setter(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;

  swift_retain();
  specialized closure #1 in PropertyList.subscript.setter(v2, a1, a2);
  return swift_release();
}

void (*_ViewInputs.gestureAccessibilityProvider.modify(_QWORD *a1))(uint64_t **a1)
{
  uint64_t *v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;

  v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = v1;
  v4 = *v1;
  swift_retain_n();
  swift_retain();
  swift_bridgeObjectRetain();
  v5 = specialized find<A>(_:key:)(v4);
  if (v5)
  {
    v6 = (uint64_t *)(v5 + 72);
    v7 = (uint64_t *)(v5 + 80);
  }
  else
  {
    v6 = &static _GraphInputs.GestureAccessibilityProviderKey.defaultValue;
    v7 = (uint64_t *)&off_2561B8430;
    if (one-time initialization token for defaultValue != -1)
      swift_once();
  }
  v8 = *v7;
  v9 = *v6;
  swift_release_n();
  swift_release();
  swift_bridgeObjectRelease();
  *v3 = v9;
  v3[1] = v8;
  return _GraphInputs.gestureAccessibilityProvider.modify;
}

uint64_t partial apply for implicit closure #1 in static GestureViewModifier.makeView(modifier:inputs:body:)()
{
  uint64_t v0;

  return implicit closure #1 in static GestureViewModifier.makeView(modifier:inputs:body:)(*(_DWORD *)(v0 + 32), *(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t type metadata accessor for GestureFilter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for GestureFilter);
}

uint64_t specialized GestureResponder.gestureType.getter()
{
  return swift_getAssociatedTypeWitness();
}

uint64_t specialized AddGestureModifier.name.getter(uint64_t a1)
{
  uint64_t v1;

  return *(_QWORD *)(v1 + *(int *)(a1 + 36));
}

uint64_t type metadata accessor for AddGestureModifier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AddGestureModifier);
}

uint64_t sub_234FA05FC()
{
  swift_release();
  return swift_deallocObject();
}

unint64_t lazy protocol witness table accessor for type GestureResponderExclusionPolicy and conformance GestureResponderExclusionPolicy()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type GestureResponderExclusionPolicy and conformance GestureResponderExclusionPolicy;
  if (!lazy protocol witness table cache variable for type GestureResponderExclusionPolicy and conformance GestureResponderExclusionPolicy)
  {
    result = MEMORY[0x23B7C9C04]("!-;\x1Bx*\n", &type metadata for GestureResponderExclusionPolicy);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GestureResponderExclusionPolicy and conformance GestureResponderExclusionPolicy);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type DefaultGestureCombiner and conformance DefaultGestureCombiner()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type DefaultGestureCombiner and conformance DefaultGestureCombiner;
  if (!lazy protocol witness table cache variable for type DefaultGestureCombiner and conformance DefaultGestureCombiner)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for DefaultGestureCombiner, &type metadata for DefaultGestureCombiner);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DefaultGestureCombiner and conformance DefaultGestureCombiner);
  }
  return result;
}

uint64_t associated type witness table accessor for GestureCombiner.Result : Gesture in DefaultGestureCombiner()
{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type _MapGesture<ExclusiveGesture<AnyGesture<()>, AnyGesture<()>>, ()> and conformance _MapGesture<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for _MapGesture<ExclusiveGesture<AnyGesture<()>, AnyGesture<()>>, ()>, (uint64_t)&protocol conformance descriptor for _MapGesture<A, B>);
}

void type metadata accessor for _MapGesture<ExclusiveGesture<AnyGesture<()>, AnyGesture<()>>, ()>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  if (!lazy cache variable for type metadata for _MapGesture<ExclusiveGesture<AnyGesture<()>, AnyGesture<()>>, ()>)
  {
    type metadata accessor for ExclusiveGesture<AnyGesture<()>, AnyGesture<()>>(255, &lazy cache variable for type metadata for ExclusiveGesture<AnyGesture<()>, AnyGesture<()>>, (uint64_t (*)(uint64_t, _QWORD *))type metadata accessor for ExclusiveGesture);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type ExclusiveGesture<AnyGesture<()>, AnyGesture<()>> and conformance ExclusiveGesture<A, B>(&lazy protocol witness table cache variable for type ExclusiveGesture<AnyGesture<()>, AnyGesture<()>> and conformance ExclusiveGesture<A, B>, &lazy cache variable for type metadata for ExclusiveGesture<AnyGesture<()>, AnyGesture<()>>, (uint64_t (*)(uint64_t, _QWORD *))type metadata accessor for ExclusiveGesture, (uint64_t)&protocol conformance descriptor for ExclusiveGesture<A, B>);
    v5 = type metadata accessor for _MapGesture(a1, v3, MEMORY[0x24BEE4AE0] + 8, v4);
    if (!v6)
      atomic_store(v5, (unint64_t *)&lazy cache variable for type metadata for _MapGesture<ExclusiveGesture<AnyGesture<()>, AnyGesture<()>>, ()>);
  }
}

unint64_t lazy protocol witness table accessor for type AnyGesture<()> and conformance AnyGesture<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type AnyGesture<()> and conformance AnyGesture<A>;
  if (!lazy protocol witness table cache variable for type AnyGesture<()> and conformance AnyGesture<A>)
  {
    type metadata accessor for MutableBox<CachedEnvironment>(255, &lazy cache variable for type metadata for AnyGesture<()>, MEMORY[0x24BEE4AE0] + 8, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for AnyGesture);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for AnyGesture<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnyGesture<()> and conformance AnyGesture<A>);
  }
  return result;
}

uint64_t dispatch thunk of GestureViewModifier.gesture.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 56))();
}

uint64_t dispatch thunk of GestureViewModifier.name.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 64))();
}

uint64_t dispatch thunk of GestureViewModifier.gestureMask.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 72))();
}

uint64_t storeEnumTagSinglePayload for GestureResponderExclusionPolicy(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_234FA085C + 4 * byte_2352B9591[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_234FA0890 + 4 * byte_2352B958C[v4]))();
}

uint64_t sub_234FA0890(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_234FA0898(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x234FA08A0);
  return result;
}

uint64_t sub_234FA08AC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x234FA08B4);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_234FA08B8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_234FA08C0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for GestureResponderExclusionPolicy()
{
  return &type metadata for GestureResponderExclusionPolicy;
}

uint64_t dispatch thunk of static GestureCombiner.combine(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 24))();
}

uint64_t dispatch thunk of static GestureCombiner.exclusionPolicy.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

ValueMetadata *type metadata accessor for DefaultGestureCombiner()
{
  return &type metadata for DefaultGestureCombiner;
}

uint64_t dispatch thunk of AnyGestureContainingResponder.viewSubgraph.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of AnyGestureContainingResponder.eventSources.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of AnyGestureContainingResponder.detachContainer()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of AnyGestureContainingResponder.gestureType.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of AnyGestureContainingResponder.isValid.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t dispatch thunk of AnyGestureResponder.inputs.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of AnyGestureResponder.childSubgraph.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of AnyGestureResponder.childSubgraph.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 32))();
}

uint64_t dispatch thunk of AnyGestureResponder.childSubgraph.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 40))();
}

uint64_t dispatch thunk of AnyGestureResponder.childViewSubgraph.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 48))();
}

uint64_t dispatch thunk of AnyGestureResponder.childViewSubgraph.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 56))();
}

uint64_t dispatch thunk of AnyGestureResponder.childViewSubgraph.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 64))();
}

uint64_t dispatch thunk of AnyGestureResponder.exclusionPolicy.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 72))();
}

uint64_t dispatch thunk of AnyGestureResponder.label.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 80))();
}

uint64_t dispatch thunk of AnyGestureResponder.gestureGraph.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 88))();
}

uint64_t dispatch thunk of AnyGestureResponder.makeSubviewsGesture(inputs:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 96))();
}

uint64_t type metadata completion function for GestureResponder()
{
  return swift_initClassMetadata2();
}

uint64_t type metadata accessor for GestureResponder(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for GestureResponder);
}

uint64_t dispatch thunk of static GestureAccessibilityProvider.makeGesture(mask:inputs:outputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 8))();
}

uint64_t type metadata accessor for SimultaneousGestureModifier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for SimultaneousGestureModifier);
}

uint64_t type metadata completion function for AddGestureModifier()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for AddGestureModifier(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;

  v4 = a1;
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0 || ((((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 19) & 0xFFFFFFFFFFFFFFF8 | 4) > 0x18)
  {
    v9 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
    swift_retain();
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    v10 = (_QWORD *)(((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
    v11 = (_QWORD *)(((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
    *v10 = *v11;
    v10[1] = v11[1];
    *(_DWORD *)(((unint64_t)v10 + 19) & 0xFFFFFFFFFFFFF8) = *(_DWORD *)(((unint64_t)v11 + 19) & 0xFFFFFFFFFFFFF8);
    swift_bridgeObjectRetain();
  }
  return v4;
}

uint64_t destroy for AddGestureModifier(uint64_t a1, uint64_t a2)
{
  (*(void (**)(void))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 8))();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for AddGestureModifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 16))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (_QWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = (_QWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *v7 = *v8;
  v7[1] = v8[1];
  *(_DWORD *)(((unint64_t)v7 + 19) & 0xFFFFFFFFFFFFF8) = *(_DWORD *)(((unint64_t)v8 + 19) & 0xFFFFFFFFFFFFF8);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for AddGestureModifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 24))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (_QWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = (_QWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *v7 = *v8;
  v7[1] = v8[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(((unint64_t)v7 + 19) & 0xFFFFFFFFFFFFF8) = *(_DWORD *)(((unint64_t)v8 + 19) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t initializeWithTake for AddGestureModifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _OWORD *v7;
  _OWORD *v8;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 32))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (_OWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = (_OWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *v7 = *v8;
  *(_DWORD *)(((unint64_t)v7 + 19) & 0xFFFFFFFFFFFFF8) = *(_DWORD *)(((unint64_t)v8 + 19) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t assignWithTake for AddGestureModifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 40))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (_QWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = (_QWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *v7 = *v8;
  v7[1] = v8[1];
  swift_bridgeObjectRelease();
  *(_DWORD *)(((unint64_t)v7 + 19) & 0xFFFFFFFFFFFFF8) = *(_DWORD *)(((unint64_t)v8 + 19) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t getEnumTagSinglePayload for AddGestureModifier(_DWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unint64_t v9;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFE)
    v6 = 2147483646;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(_QWORD *)(v4 + 64);
  if (v6 < a2 && *((_BYTE *)a1 + ((((v7 + 7) & 0xFFFFFFFFFFFFFFF8) + 19) & 0xFFFFFFFFFFFFFFF8 | 4)))
    return v6 + *a1 + 1;
  if (v5 >= 0x7FFFFFFE)
    return (*(uint64_t (**)(void))(v4 + 48))();
  v9 = *(_QWORD *)((((unint64_t)a1 + v7 + 7) & 0xFFFFFFFFFFFFF8) + 8);
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  if ((v9 + 1) >= 2)
    return v9;
  else
    return 0;
}

void storeEnumTagSinglePayload for AddGestureModifier(_BYTE *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  unint64_t v10;
  unsigned int v11;
  _QWORD *v12;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFE)
    v8 = 2147483646;
  else
    v8 = *(_DWORD *)(v6 + 84);
  v9 = *(_QWORD *)(v6 + 64);
  v10 = (((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 19) & 0xFFFFFFFFFFFFFFF8 | 4;
  if (v8 >= a2)
  {
    if (v8 < a3)
      a1[v10] = 0;
    if (a2)
    {
      if (v7 < 0x7FFFFFFE)
      {
        v12 = (_QWORD *)((unint64_t)&a1[v9 + 7] & 0xFFFFFFFFFFFFFFF8);
        if (a2 > 0x7FFFFFFE)
        {
          *v12 = 0;
          v12[1] = 0;
          *(_DWORD *)v12 = a2 - 0x7FFFFFFF;
        }
        else
        {
          v12[1] = a2;
        }
      }
      else
      {
        (*(void (**)(_BYTE *))(v6 + 56))(a1);
      }
    }
  }
  else
  {
    v11 = ~v8 + a2;
    bzero(a1, (((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 19) & 0xFFFFFFFFFFFFFFF8 | 4);
    *(_DWORD *)a1 = v11;
    if (v8 < a3)
      a1[v10] = 1;
  }
}

uint64_t type metadata accessor for HighPriorityGestureModifier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for HighPriorityGestureModifier);
}

uint64_t destroy for GestureFilter(uint64_t a1)
{
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_release();
}

uint64_t initializeWithCopy for GestureFilter(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;
  id v6;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  v3 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v3;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  v5 = *(void **)(a2 + 96);
  v4 = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 96) = v5;
  *(_QWORD *)(a1 + 104) = v4;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v6 = v5;
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for GestureFilter(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 84);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  v4 = *(void **)(a2 + 96);
  v5 = *(void **)(a1 + 96);
  *(_QWORD *)(a1 + 96) = v4;
  v6 = v4;

  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for GestureFilter(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_release();
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_release();
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);

  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  swift_release();
  return a1;
}

unint64_t lazy protocol witness table accessor for type HighPriorityGestureCombiner and conformance HighPriorityGestureCombiner()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type HighPriorityGestureCombiner and conformance HighPriorityGestureCombiner;
  if (!lazy protocol witness table cache variable for type HighPriorityGestureCombiner and conformance HighPriorityGestureCombiner)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for HighPriorityGestureCombiner, &type metadata for HighPriorityGestureCombiner);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HighPriorityGestureCombiner and conformance HighPriorityGestureCombiner);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type SimultaneousGestureCombiner and conformance SimultaneousGestureCombiner()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SimultaneousGestureCombiner and conformance SimultaneousGestureCombiner;
  if (!lazy protocol witness table cache variable for type SimultaneousGestureCombiner and conformance SimultaneousGestureCombiner)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for SimultaneousGestureCombiner, &type metadata for SimultaneousGestureCombiner);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SimultaneousGestureCombiner and conformance SimultaneousGestureCombiner);
  }
  return result;
}

uint64_t associated type witness table accessor for GestureCombiner.Result : Gesture in SimultaneousGestureCombiner()
{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type _MapGesture<SimultaneousGesture<AnyGesture<()>, AnyGesture<()>>, ()> and conformance _MapGesture<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for _MapGesture<SimultaneousGesture<AnyGesture<()>, AnyGesture<()>>, ()>, (uint64_t)&protocol conformance descriptor for _MapGesture<A, B>);
}

void type metadata accessor for _MapGesture<SimultaneousGesture<AnyGesture<()>, AnyGesture<()>>, ()>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  if (!lazy cache variable for type metadata for _MapGesture<SimultaneousGesture<AnyGesture<()>, AnyGesture<()>>, ()>)
  {
    type metadata accessor for ExclusiveGesture<AnyGesture<()>, AnyGesture<()>>(255, &lazy cache variable for type metadata for SimultaneousGesture<AnyGesture<()>, AnyGesture<()>>, (uint64_t (*)(uint64_t, _QWORD *))type metadata accessor for SimultaneousGesture);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type ExclusiveGesture<AnyGesture<()>, AnyGesture<()>> and conformance ExclusiveGesture<A, B>(&lazy protocol witness table cache variable for type SimultaneousGesture<AnyGesture<()>, AnyGesture<()>> and conformance SimultaneousGesture<A, B>, &lazy cache variable for type metadata for SimultaneousGesture<AnyGesture<()>, AnyGesture<()>>, (uint64_t (*)(uint64_t, _QWORD *))type metadata accessor for SimultaneousGesture, (uint64_t)&protocol conformance descriptor for SimultaneousGesture<A, B>);
    v5 = type metadata accessor for _MapGesture(a1, v3, MEMORY[0x24BEE4AE0] + 8, v4);
    if (!v6)
      atomic_store(v5, (unint64_t *)&lazy cache variable for type metadata for _MapGesture<SimultaneousGesture<AnyGesture<()>, AnyGesture<()>>, ()>);
  }
}

void type metadata accessor for ExclusiveGesture<AnyGesture<()>, AnyGesture<()>>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, _QWORD *))
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  _QWORD v9[2];
  unint64_t v10;
  unint64_t v11;

  if (!*a2)
  {
    type metadata accessor for MutableBox<CachedEnvironment>(255, &lazy cache variable for type metadata for AnyGesture<()>, MEMORY[0x24BEE4AE0] + 8, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for AnyGesture);
    v9[0] = v6;
    v9[1] = v6;
    v10 = lazy protocol witness table accessor for type AnyGesture<()> and conformance AnyGesture<A>();
    v11 = v10;
    v7 = a3(a1, v9);
    if (!v8)
      atomic_store(v7, a2);
  }
}

uint64_t lazy protocol witness table accessor for type ExclusiveGesture<AnyGesture<()>, AnyGesture<()>> and conformance ExclusiveGesture<A, B>(unint64_t *a1, unint64_t *a2, uint64_t (*a3)(uint64_t, _QWORD *), uint64_t a4)
{
  uint64_t result;
  uint64_t v7;

  result = *a1;
  if (!result)
  {
    type metadata accessor for ExclusiveGesture<AnyGesture<()>, AnyGesture<()>>(255, a2, a3);
    result = MEMORY[0x23B7C9C04](a4, v7);
    atomic_store(result, a1);
  }
  return result;
}

void base witness table accessor for _AttributeBody in GestureFilter<A>()
{
  JUMPOUT(0x23B7C9C04);
}

uint64_t sub_234FA1464@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t *a3@<X8>)
{
  uint64_t result;
  uint64_t v5;

  result = (*(uint64_t (**)(_QWORD))(*(_QWORD *)(a2 + a1 - 8) + 64))(*(_QWORD *)(a2 + a1 - 16));
  *a3 = result;
  a3[1] = v5;
  return result;
}

uint64_t sub_234FA149C()
{
  return 16;
}

__n128 sub_234FA14A8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

void type metadata accessor for Attribute<GesturePhase<()>>(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t a4, uint64_t (*a5)(_QWORD, uint64_t))
{
  unint64_t v6;
  uint64_t v7;

  if (!*a2)
  {
    type metadata accessor for MutableBox<CachedEnvironment>(255, a3, a4, a5);
    v6 = type metadata accessor for Attribute();
    if (!v7)
      atomic_store(v6, a2);
  }
}

void partial apply for specialized closure #1 in MapGesture.init(_:)(int *a1)
{
  specialized closure #1 in MapGesture.init(_:)(*a1);
}

id specialized GestureResponder.init(modifier:inputs:)(int a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  int v6;
  __int128 v7;
  uint64_t v9;
  int v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  int v16;

  v3 = *(_QWORD *)a2;
  v4 = *(_DWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_DWORD *)(a2 + 80);
  *(_OWORD *)(a3 + 216) = 0u;
  *(_OWORD *)(a3 + 232) = 0u;
  *(_OWORD *)(a3 + 248) = 0u;
  *(_DWORD *)(a3 + 208) = a1;
  v9 = v3;
  v10 = v4;
  v11 = v5;
  v7 = *(_OWORD *)(a2 + 40);
  v12 = *(_OWORD *)(a2 + 24);
  v13 = v7;
  v14 = *(_OWORD *)(a2 + 56);
  v15 = *(_QWORD *)(a2 + 72);
  v16 = v6;
  return specialized DefaultLayoutViewResponder.init(inputs:)(&v9, a3);
}

uint64_t partial apply for closure #1 in GestureResponder.makeGesture(inputs:)@<X0>(_OWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return closure #1 in GestureResponder.makeGesture(inputs:)(a1, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), a2);
}

uint64_t type metadata accessor for GestureViewDebug(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for GestureViewDebug);
}

uint64_t type metadata accessor for CombiningGestureViewChild(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for CombiningGestureViewChild);
}

uint64_t type metadata accessor for GestureViewChild(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for GestureViewChild);
}

uint64_t closure #1 in Attribute.init<A>(_:)partial apply(uint64_t a1, uint64_t a2)
{
  return closure #1 in Attribute.init<A>(_:)partial apply(a1, a2, &lazy cache variable for type metadata for AnyGesture<()>, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for AnyGesture, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))closure #1 in Attribute.init<A>(_:));
}

{
  return closure #1 in Attribute.init<A>(_:)partial apply(a1, a2, (unint64_t *)&lazy cache variable for type metadata for GesturePhase<()>, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for GesturePhase, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))closure #1 in Attribute.init<A>(_:));
}

{
  return _s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA12StatefulRuleRd__lufcADSPyqd__GXEfU_TATm_0(a1, a2, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))closure #1 in Attribute.init<A>(_:));
}

uint64_t closure #1 in Attribute.init<A>(_:)partial apply(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t (*a4)(_QWORD, uint64_t), uint64_t (*a5)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v10 = *(_QWORD *)(v5 + 16);
  v9 = *(_QWORD *)(v5 + 24);
  type metadata accessor for MutableBox<CachedEnvironment>(0, a3, MEMORY[0x24BEE4AE0] + 8, a4);
  return a5(a1, v11, v10, v9, a2);
}

unint64_t lazy protocol witness table accessor for type GestureDebug.Value<()> and conformance GestureDebug.Value<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type GestureDebug.Value<()> and conformance GestureDebug.Value<A>;
  if (!lazy protocol witness table cache variable for type GestureDebug.Value<()> and conformance GestureDebug.Value<A>)
  {
    type metadata accessor for MutableBox<CachedEnvironment>(255, &lazy cache variable for type metadata for GestureDebug.Value<()>, MEMORY[0x24BEE4AE0] + 8, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for GestureDebug.Value);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for GestureDebug.Value<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GestureDebug.Value<()> and conformance GestureDebug.Value<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AnyGestureInfo<()> and conformance AnyGestureInfo<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type AnyGestureInfo<()> and conformance AnyGestureInfo<A>;
  if (!lazy protocol witness table cache variable for type AnyGestureInfo<()> and conformance AnyGestureInfo<A>)
  {
    type metadata accessor for MutableBox<CachedEnvironment>(255, &lazy cache variable for type metadata for AnyGestureInfo<()>, MEMORY[0x24BEE4AE0] + 8, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for AnyGestureInfo);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for AnyGestureInfo<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnyGestureInfo<()> and conformance AnyGestureInfo<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type GestureDebug.Value<Never> and conformance GestureDebug.Value<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type GestureDebug.Value<Never> and conformance GestureDebug.Value<A>;
  if (!lazy protocol witness table cache variable for type GestureDebug.Value<Never> and conformance GestureDebug.Value<A>)
  {
    type metadata accessor for MutableBox<CachedEnvironment>(255, &lazy cache variable for type metadata for GestureDebug.Value<Never>, MEMORY[0x24BEE4078], (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for GestureDebug.Value);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for GestureDebug.Value<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GestureDebug.Value<Never> and conformance GestureDebug.Value<A>);
  }
  return result;
}

void partial apply for specialized closure #1 in MapGesture.init(_:)(__int16 *a1)
{
  specialized closure #1 in MapGesture.init(_:)(*a1);
}

unint64_t lazy protocol witness table accessor for type GestureDebug.Value<CGFloat> and conformance GestureDebug.Value<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type GestureDebug.Value<CGFloat> and conformance GestureDebug.Value<A>;
  if (!lazy protocol witness table cache variable for type GestureDebug.Value<CGFloat> and conformance GestureDebug.Value<A>)
  {
    type metadata accessor for MutableBox<CachedEnvironment>(255, &lazy cache variable for type metadata for GestureDebug.Value<CGFloat>, MEMORY[0x24BEE50B0], (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for GestureDebug.Value);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for GestureDebug.Value<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GestureDebug.Value<CGFloat> and conformance GestureDebug.Value<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type GestureDebug.Value<SpatialEvent> and conformance GestureDebug.Value<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type GestureDebug.Value<SpatialEvent> and conformance GestureDebug.Value<A>;
  if (!lazy protocol witness table cache variable for type GestureDebug.Value<SpatialEvent> and conformance GestureDebug.Value<A>)
  {
    type metadata accessor for MutableBox<CachedEnvironment>(255, &lazy cache variable for type metadata for GestureDebug.Value<SpatialEvent>, (uint64_t)&type metadata for SpatialEvent, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for GestureDebug.Value);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for GestureDebug.Value<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GestureDebug.Value<SpatialEvent> and conformance GestureDebug.Value<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type GestureDebug.Value<TappableEvent> and conformance GestureDebug.Value<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type GestureDebug.Value<TappableEvent> and conformance GestureDebug.Value<A>;
  if (!lazy protocol witness table cache variable for type GestureDebug.Value<TappableEvent> and conformance GestureDebug.Value<A>)
  {
    type metadata accessor for MutableBox<CachedEnvironment>(255, &lazy cache variable for type metadata for GestureDebug.Value<TappableEvent>, (uint64_t)&type metadata for TappableEvent, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for GestureDebug.Value);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for GestureDebug.Value<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GestureDebug.Value<TappableEvent> and conformance GestureDebug.Value<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type GestureDebug.Value<Double> and conformance GestureDebug.Value<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type GestureDebug.Value<Double> and conformance GestureDebug.Value<A>;
  if (!lazy protocol witness table cache variable for type GestureDebug.Value<Double> and conformance GestureDebug.Value<A>)
  {
    type metadata accessor for MutableBox<CachedEnvironment>(255, &lazy cache variable for type metadata for GestureDebug.Value<Double>, MEMORY[0x24BEE13C8], (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for GestureDebug.Value);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for GestureDebug.Value<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GestureDebug.Value<Double> and conformance GestureDebug.Value<A>);
  }
  return result;
}

void type metadata accessor for (GestureResponderExclusionPolicy, GestureResponderExclusionPolicy)()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!lazy cache variable for type metadata for (GestureResponderExclusionPolicy, GestureResponderExclusionPolicy))
  {
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (GestureResponderExclusionPolicy, GestureResponderExclusionPolicy));
  }
}

uint64_t sub_234FA19AC@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, _DWORD *a3@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(_QWORD))(*(_QWORD *)(a2 + a1 - 8) + 72))(*(_QWORD *)(a2 + a1 - 16));
  *a3 = result;
  return result;
}

uint64_t sub_234FA19E4()
{
  return 16;
}

__n128 sub_234FA19F0(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t partial apply for specialized closure #1 in Attribute.overrideDefaultValue<A>(_:type:)(uint64_t a1)
{
  return partial apply for specialized closure #1 in Attribute.overrideDefaultValue<A>(_:type:)(a1, (uint64_t (*)(uint64_t, unint64_t))specialized closure #1 in Attribute.overrideDefaultValue<A>(_:type:));
}

uint64_t partial apply for specialized closure #1 in Attribute.overrideDefaultValue<A>(_:type:)(uint64_t a1, uint64_t (*a2)(uint64_t, unint64_t))
{
  uint64_t v2;

  return a2(a1, *(unsigned int *)(v2 + 16) | ((unint64_t)*(unsigned __int8 *)(v2 + 20) << 32));
}

uint64_t sub_234FA1A50@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = ResolvedStyledText.gesture.getter();
  *a1 = result;
  return result;
}

void type metadata accessor for Focus<ResolvedStyledText, AnyGesture<()>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for Focus<ResolvedStyledText, AnyGesture<()>>)
  {
    type metadata accessor for ResolvedStyledText();
    type metadata accessor for MutableBox<CachedEnvironment>(255, &lazy cache variable for type metadata for AnyGesture<()>, MEMORY[0x24BEE4AE0] + 8, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for AnyGesture);
    v0 = type metadata accessor for Focus();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Focus<ResolvedStyledText, AnyGesture<()>>);
  }
}

uint64_t outlined init with copy of GesturePhase<URL>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for GesturePhase<URL>, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for GesturePhase);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of URL?(uint64_t a1)
{
  uint64_t v2;

  type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for URL?, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

ValueMetadata *type metadata accessor for EmptyGestureAccessibilityProvider()
{
  return &type metadata for EmptyGestureAccessibilityProvider;
}

ValueMetadata *type metadata accessor for _GraphInputs.GestureAccessibilityProviderKey()
{
  return &type metadata for _GraphInputs.GestureAccessibilityProviderKey;
}

uint64_t initializeWithCopy for CombiningGestureViewChild(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for CombiningGestureViewChild(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  v3 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 24) = v3;
  return a1;
}

uint64_t assignWithTake for CombiningGestureViewChild(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  swift_release();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  return a1;
}

_OWORD *initializeBufferWithCopyOfBuffer for SubviewsGesture(_OWORD *a1, _OWORD *a2)
{
  *a1 = *a2;
  swift_retain();
  return a1;
}

_QWORD *assignWithCopy for SubviewsGesture(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = v3;
  return a1;
}

_OWORD *assignWithTake for SubviewsGesture(_OWORD *a1, _OWORD *a2)
{
  swift_release();
  *a1 = *a2;
  return a1;
}

void *type metadata accessor for SubviewsGesture()
{
  return &unk_25061F4D8;
}

ValueMetadata *type metadata accessor for SimultaneousGestureCombiner()
{
  return &type metadata for SimultaneousGestureCombiner;
}

ValueMetadata *type metadata accessor for HighPriorityGestureCombiner()
{
  return &type metadata for HighPriorityGestureCombiner;
}

void base witness table accessor for _AttributeBody in GestureViewChild<A>()
{
  JUMPOUT(0x23B7C9C04);
}

void base witness table accessor for _AttributeBody in CombiningGestureViewChild<A>()
{
  JUMPOUT(0x23B7C9C04);
}

void base witness table accessor for _AttributeBody in GestureViewDebug<A>()
{
  JUMPOUT(0x23B7C9C04);
}

uint64_t sub_234FA1DB0()
{
  uint64_t v0;
  __int128 v2;
  __int128 v3;
  __int128 v4;

  v3 = *(_OWORD *)(v0 + 256);
  v4 = *(_OWORD *)(v0 + 272);
  v2 = *(_OWORD *)(v0 + 224);
  outlined consume of ArrayWith2Inline<GestureDebug.Data>.Storage(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 88), *(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 104), *(_QWORD *)(v0 + 112), *(_QWORD *)(v0 + 120), *(_QWORD *)(v0 + 128), *(_QWORD *)(v0 + 136), *(_OWORD *)(v0 + 144), *(_QWORD *)(v0 + 152), *(_QWORD *)(v0 + 160),
    *(_QWORD *)(v0 + 168),
    *(_QWORD *)(v0 + 176),
    *(_QWORD *)(v0 + 184),
    *(_QWORD *)(v0 + 192),
    *(_QWORD *)(v0 + 200),
    *(_QWORD *)(v0 + 208),
    *(_QWORD *)(v0 + 216),
    v2,
    *((uint64_t *)&v2 + 1),
    *(_QWORD *)(v0 + 240),
    *(_QWORD *)(v0 + 248),
    v3,
    *((uint64_t *)&v3 + 1),
    v4,
    *((uint64_t *)&v4 + 1),
    *(_QWORD *)(v0 + 288),
    *(_QWORD *)(v0 + 296),
    *(_BYTE *)(v0 + 304));
  return swift_deallocObject();
}

uint64_t *outlined release of GestureDebug.Data?(uint64_t *a1)
{
  outlined consume of GestureDebug.Data?(*a1, a1[1], a1[2], a1[3], a1[4], a1[5], a1[6], a1[7], a1[8], a1[9], a1[10], a1[11], a1[12], a1[13], a1[14], a1[15], a1[16]);
  return a1;
}

uint64_t outlined consume of GestureDebug.Data?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  uint64_t result;

  if (a2)
  {
    outlined consume of ArrayWith2Inline<(String, String)>.Storage(a9, a10, a11, a12, a13, a14, a15, a16, a17);
    return swift_release();
  }
  return result;
}

uint64_t type metadata accessor for ContentGesture(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ContentGesture);
}

uint64_t sub_234FA1EE4()
{
  return swift_deallocObject();
}

unint64_t lazy protocol witness table accessor for type SubviewsPhase and conformance SubviewsPhase()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SubviewsPhase and conformance SubviewsPhase;
  if (!lazy protocol witness table cache variable for type SubviewsPhase and conformance SubviewsPhase)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for SubviewsPhase, &unk_250617488);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SubviewsPhase and conformance SubviewsPhase);
  }
  return result;
}

uint64_t outlined release of SubviewsPhase(uint64_t a1)
{
  void *v2;
  void *v3;

  v2 = *(void **)(a1 + 96);
  v3 = *(void **)(a1 + 192);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();

  return a1;
}

void destroy for SubviewsPhase(id *a1)
{
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_release();
}

uint64_t initializeWithCopy for SubviewsPhase(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;
  void *v7;
  id v8;
  id v9;
  id v10;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  v3 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v3;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  v5 = *(void **)(a2 + 96);
  v4 = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 96) = v5;
  *(_QWORD *)(a1 + 104) = v4;
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_DWORD *)(a1 + 128) = *(_DWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_DWORD *)(a1 + 152) = *(_DWORD *)(a2 + 152);
  v6 = *(void **)(a2 + 160);
  *(_QWORD *)(a1 + 160) = v6;
  *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
  *(_DWORD *)(a1 + 184) = *(_DWORD *)(a2 + 184);
  v7 = *(void **)(a2 + 192);
  *(_QWORD *)(a1 + 192) = v7;
  *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v8 = v5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v9 = v6;
  swift_retain();
  v10 = v7;
  return a1;
}

uint64_t assignWithCopy for SubviewsPhase(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;
  void *v7;
  void *v8;
  id v9;
  uint64_t v10;
  void *v11;
  void *v12;
  id v13;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 84);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  v4 = *(void **)(a2 + 96);
  v5 = *(void **)(a1 + 96);
  *(_QWORD *)(a1 + 96) = v4;
  v6 = v4;

  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 112);
  *(_DWORD *)(a1 + 116) = *(_DWORD *)(a2 + 116);
  *(_DWORD *)(a1 + 120) = *(_DWORD *)(a2 + 120);
  *(_DWORD *)(a1 + 124) = *(_DWORD *)(a2 + 124);
  *(_DWORD *)(a1 + 128) = *(_DWORD *)(a2 + 128);
  *(_DWORD *)(a1 + 136) = *(_DWORD *)(a2 + 136);
  *(_DWORD *)(a1 + 140) = *(_DWORD *)(a2 + 140);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 152) = *(_DWORD *)(a2 + 152);
  v7 = *(void **)(a2 + 160);
  v8 = *(void **)(a1 + 160);
  *(_QWORD *)(a1 + 160) = v7;
  v9 = v7;

  v10 = *(_QWORD *)(a2 + 176);
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 176) = v10;
  *(_DWORD *)(a1 + 184) = *(_DWORD *)(a2 + 184);
  v11 = *(void **)(a1 + 192);
  v12 = *(void **)(a2 + 192);
  *(_QWORD *)(a1 + 192) = v12;
  v13 = v12;

  *(_DWORD *)(a1 + 200) = *(_DWORD *)(a2 + 200);
  *(_DWORD *)(a1 + 204) = *(_DWORD *)(a2 + 204);
  return a1;
}

__n128 __swift_memcpy208_8(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __n128 result;
  __int128 v9;
  __int128 v10;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v2 = *(_OWORD *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(_OWORD *)(a1 + 16) = v2;
  *(_OWORD *)(a1 + 32) = v3;
  v5 = *(_OWORD *)(a2 + 80);
  v6 = *(_OWORD *)(a2 + 96);
  v7 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = v7;
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + 96) = v6;
  result = *(__n128 *)(a2 + 144);
  v9 = *(_OWORD *)(a2 + 160);
  v10 = *(_OWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 192) = v10;
  *(__n128 *)(a1 + 144) = result;
  *(_OWORD *)(a1 + 160) = v9;
  return result;
}

uint64_t assignWithTake for SubviewsPhase(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void *v5;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_release();
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_release();
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);

  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_DWORD *)(a1 + 128) = *(_DWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 152) = *(_DWORD *)(a2 + 152);

  v4 = *(_QWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
  swift_release();
  *(_QWORD *)(a1 + 176) = v4;
  *(_DWORD *)(a1 + 184) = *(_DWORD *)(a2 + 184);
  v5 = *(void **)(a1 + 192);
  *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);

  *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
  return a1;
}

uint64_t getEnumTagSinglePayload for SubviewsPhase(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 208))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SubviewsPhase(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 200) = 0;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 208) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 24) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 208) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

void *type metadata accessor for SubviewsPhase()
{
  return &unk_250617488;
}

uint64_t destroy for SubviewsPhase.Value(uint64_t a1)
{
  outlined consume of ArrayWith2Inline<(String, String)>.Storage(*(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 128), *(_BYTE *)(a1 + 136));
  return swift_release();
}

uint64_t initializeWithCopy for SubviewsPhase.Value(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v13;

  *(_WORD *)a1 = *(_WORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_WORD *)(a1 + 24) = *(_WORD *)(a2 + 24);
  *(_QWORD *)(a1 + 28) = *(_QWORD *)(a2 + 28);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  v4 = *(_QWORD *)(a2 + 72);
  v5 = *(_QWORD *)(a2 + 80);
  v6 = *(_QWORD *)(a2 + 88);
  v7 = *(_QWORD *)(a2 + 96);
  v8 = *(_QWORD *)(a2 + 104);
  v9 = *(_QWORD *)(a2 + 112);
  v10 = *(_QWORD *)(a2 + 120);
  v11 = *(_QWORD *)(a2 + 128);
  v13 = *(_BYTE *)(a2 + 136);
  outlined copy of ArrayWith2Inline<(String, String)>.Storage(v4, v5, v6, v7, v8, v9, v10, v11, v13);
  *(_QWORD *)(a1 + 72) = v4;
  *(_QWORD *)(a1 + 80) = v5;
  *(_QWORD *)(a1 + 88) = v6;
  *(_QWORD *)(a1 + 96) = v7;
  *(_QWORD *)(a1 + 104) = v8;
  *(_QWORD *)(a1 + 112) = v9;
  *(_QWORD *)(a1 + 120) = v10;
  *(_QWORD *)(a1 + 128) = v11;
  *(_BYTE *)(a1 + 136) = v13;
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for SubviewsPhase.Value(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  char v22;

  *(_WORD *)a1 = *(_WORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_WORD *)(a1 + 24) = *(_WORD *)(a2 + 24);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  v4 = *(_QWORD *)(a2 + 72);
  v5 = *(_QWORD *)(a2 + 80);
  v6 = *(_QWORD *)(a2 + 88);
  v7 = *(_QWORD *)(a2 + 96);
  v8 = *(_QWORD *)(a2 + 104);
  v9 = *(_QWORD *)(a2 + 112);
  v10 = *(_QWORD *)(a2 + 120);
  v11 = *(_QWORD *)(a2 + 128);
  v22 = *(_BYTE *)(a2 + 136);
  outlined copy of ArrayWith2Inline<(String, String)>.Storage(v4, v5, v6, v7, v8, v9, v10, v11, v22);
  v12 = *(_QWORD *)(a1 + 72);
  v13 = *(_QWORD *)(a1 + 80);
  v14 = *(_QWORD *)(a1 + 88);
  v15 = *(_QWORD *)(a1 + 96);
  v16 = *(_QWORD *)(a1 + 104);
  v17 = *(_QWORD *)(a1 + 112);
  v18 = *(_QWORD *)(a1 + 120);
  v19 = *(_QWORD *)(a1 + 128);
  v20 = *(_BYTE *)(a1 + 136);
  *(_QWORD *)(a1 + 72) = v4;
  *(_QWORD *)(a1 + 80) = v5;
  *(_QWORD *)(a1 + 88) = v6;
  *(_QWORD *)(a1 + 96) = v7;
  *(_QWORD *)(a1 + 104) = v8;
  *(_QWORD *)(a1 + 112) = v9;
  *(_QWORD *)(a1 + 120) = v10;
  *(_QWORD *)(a1 + 128) = v11;
  *(_BYTE *)(a1 + 136) = v22;
  outlined consume of ArrayWith2Inline<(String, String)>.Storage(v12, v13, v14, v15, v16, v17, v18, v19, v20);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for SubviewsPhase.Value(uint64_t a1, uint64_t a2)
{
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;

  *(_WORD *)a1 = *(_WORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_WORD *)(a1 + 24) = *(_WORD *)(a2 + 24);
  *(_QWORD *)(a1 + 28) = *(_QWORD *)(a2 + 28);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  v4 = *(_BYTE *)(a2 + 136);
  v5 = *(_QWORD *)(a1 + 72);
  v6 = *(_QWORD *)(a1 + 80);
  v7 = *(_QWORD *)(a1 + 88);
  v8 = *(_QWORD *)(a1 + 96);
  v9 = *(_QWORD *)(a1 + 104);
  v10 = *(_QWORD *)(a1 + 112);
  v11 = *(_QWORD *)(a1 + 120);
  v12 = *(_QWORD *)(a1 + 128);
  v13 = *(_BYTE *)(a1 + 136);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_BYTE *)(a1 + 136) = v4;
  outlined consume of ArrayWith2Inline<(String, String)>.Storage(v5, v6, v7, v8, v9, v10, v11, v12, v13);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for SubviewsPhase.Value(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 152))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SubviewsPhase.Value(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 152) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 16) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 152) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

void *type metadata accessor for SubviewsPhase.Value()
{
  return &unk_250617408;
}

uint64_t type metadata accessor for ContentPhase(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ContentPhase);
}

double _s7SwiftUI13SubviewsPhase33_9DF46B4E935FF03A55FF3DDFB0B1FF2BLLV5ValueVSgWOi0_(uint64_t a1)
{
  double result;

  *(_QWORD *)(a1 + 144) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  return result;
}

uint64_t instantiation function for generic protocol witness table for ContentPhase<A>(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ContentPhase<A>);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

void base witness table accessor for _AttributeBody in ContentPhase<A>()
{
  JUMPOUT(0x23B7C9C04);
}

double static Optional<A>._makeGesture(gesture:inputs:)@<D0>(int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  int v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  int v12;
  uint64_t AssociatedTypeWitness;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  int v28;
  double result;
  _QWORD v30[2];
  int v31;
  char v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  int v41;
  double v42;
  uint64_t v43;
  int v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  uint64_t v52;

  v8 = *a1;
  v9 = *(_OWORD *)(a2 + 80);
  v49 = *(_OWORD *)(a2 + 64);
  v50 = v9;
  v51 = *(_OWORD *)(a2 + 96);
  v52 = *(_QWORD *)(a2 + 112);
  v10 = *(_OWORD *)(a2 + 16);
  v45 = *(_OWORD *)a2;
  v46 = v10;
  v11 = *(_OWORD *)(a2 + 48);
  v47 = *(_OWORD *)(a2 + 32);
  v48 = v11;
  v12 = *(_DWORD *)(a2 + 120);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v16 = type metadata accessor for AnyGesture(0, AssociatedTypeWitness, v14, v15);
  LODWORD(v33) = v8;
  v18 = type metadata accessor for Optional<A>.Child(0, a3, a4, v17);
  v19 = MEMORY[0x23B7C9C04](&protocol conformance descriptor for A?<A>.Child, v18);
  _GraphValue.init<A>(_:)((uint64_t)&v33, v16, v18, v19, v30);
  v37 = v49;
  v38 = v50;
  v39 = v51;
  v40 = v52;
  v33 = v45;
  v34 = v46;
  v35 = v47;
  v36 = v48;
  v41 = v12;
  static AnyGesture._makeGesture(gesture:inputs:)((int *)v30, &v33, AssociatedTypeWitness, v20, (uint64_t)&v42);
  if ((v12 & 8) != 0 && !(swift_conformsToProtocol2() ? v16 : 0))
  {
    _gestureModifierProtocolDescriptor();
    if (swift_conformsToProtocol())
      v24 = 2;
    else
      v24 = 1;
    v32 = v24;
    v37 = v49;
    v38 = v50;
    v39 = v51;
    v40 = v52;
    v33 = v45;
    v34 = v46;
    v35 = v47;
    v36 = v48;
    v41 = v12;
    *(double *)v30 = v42;
    v30[1] = v43;
    v31 = v44;
    v25 = type metadata accessor for _GestureOutputs(0, AssociatedTypeWitness, v22, v23);
    v26 = _GestureOutputs.debugData.getter();
    LOBYTE(v30[0]) = 1;
    _GestureOutputs.reallyWrap<A>(_:kind:properties:inputs:data:)(v16, &v32, 0x100000000, &v33, v26 | ((HIDWORD(v26) & 1) << 32), 0x100000000, v25);
  }
  v27 = v43;
  v28 = v44;
  result = v42;
  *(double *)a5 = v42;
  *(_QWORD *)(a5 + 8) = v27;
  *(_DWORD *)(a5 + 16) = v28;
  return result;
}

uint64_t type metadata accessor for Optional<A>.Child(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Optional<A>.Child);
}

uint64_t Optional<A>.Child.value.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t Value;
  uint64_t AssociatedTypeWitness;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  _BYTE v19[16];
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v5 = type metadata accessor for Optional();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = &v19[-v7];
  Value = AGGraphGetValue();
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v6 + 16))(v8, Value, v5);
  v20 = a2;
  v21 = a3;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v13 = type metadata accessor for AnyGesture(0, AssociatedTypeWitness, v11, v12);
  _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF((void (*)(char *, char *))partial apply for closure #1 in Optional<A>.Child.value.getter, (uint64_t)v19, MEMORY[0x24BEE4078], v13, v14, (uint64_t)&v22);
  (*(void (**)(_BYTE *, uint64_t))(v6 + 8))(v8, v5);
  result = v22;
  if (!v22)
  {
    v17 = type metadata accessor for Optional<A>.Empty(0, a2, a3, v15);
    v18 = MEMORY[0x23B7C9C04](&protocol conformance descriptor for A?<A>.Empty, v17);
    return AnyGesture.init<A>(_:)(v18, AssociatedTypeWitness, v17, v18);
  }
  return result;
}

uint64_t closure #1 in Optional<A>.Child.value.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  double v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t AssociatedTypeWitness;
  uint64_t result;
  uint64_t v13;

  v7 = MEMORY[0x24BDAC7A8](a1);
  v9 = (char *)&v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, double))(v10 + 16))(v9, v7);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  result = AnyGesture.init<A>(_:)((uint64_t)v9, AssociatedTypeWitness, a2, a3);
  *a4 = result;
  return result;
}

uint64_t protocol witness for Rule.value.getter in conformance A?<A>.Child@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  unsigned int *v2;
  uint64_t result;

  result = Optional<A>.Child.value.getter(*v2, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24));
  *a2 = result;
  return result;
}

uint64_t static Optional<A>.Empty._makeGesture(gesture:inputs:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  _DWORD v12[4];
  _BYTE v13[16];
  uint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = type metadata accessor for GesturePhase(0, AssociatedTypeWitness, v3, v4);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)v12 - v7;
  swift_storeEnumTagMultiPayload();
  v14 = v5;
  v9 = type metadata accessor for Attribute();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v8, (uint64_t)partial apply for closure #1 in Attribute.init(value:), (uint64_t)v13, v5, MEMORY[0x24BEE4078], v9, MEMORY[0x24BEE40A8], v10);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  return _GestureOutputs.init(phase:)(v12[3], a1);
}

uint64_t protocol witness for static Gesture._makeGesture(gesture:inputs:) in conformance A?<A>.Empty@<X0>(uint64_t a1@<X8>)
{
  return static Optional<A>.Empty._makeGesture(gesture:inputs:)(a1);
}

double protocol witness for static Gesture._makeGesture(gesture:inputs:) in conformance <A> A?@<D0>(int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  return static Optional<A>._makeGesture(gesture:inputs:)(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a4 - 8), a5);
}

uint64_t instantiation function for generic protocol witness table for <A> A?(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t result;
  uint64_t v5;

  v5 = *a3;
  result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for <A> A?, a2, &v5);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

{
  uint64_t result;
  uint64_t v5;

  v5 = *a3;
  result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for <A> A?, a2, &v5);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

void base witness table accessor for _AttributeBody in A?<A>.Child()
{
  JUMPOUT(0x23B7C9C04);
}

uint64_t partial apply for closure #1 in Optional<A>.Child.value.getter@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  return closure #1 in Optional<A>.Child.value.getter(a1, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), a2);
}

uint64_t type metadata accessor for Optional<A>.Empty(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Optional<A>.Empty);
}

uint64_t instantiation function for generic protocol witness table for A?<A>.Empty(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for A?<A>.Empty);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

double _FrameLayout.init(width:height:alignment:)@<D0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X5>, _OWORD *a7@<X8>)
{
  __int128 v8;
  double result;
  _OWORD v10[2];
  __int128 v11;

  specialized _FrameLayout.init(width:height:alignment:)(a1, a2 & 1, a3, a4 & 1, a5, a6, (uint64_t)v10);
  v8 = v10[1];
  *a7 = v10[0];
  a7[1] = v8;
  result = *(double *)&v11;
  a7[2] = v11;
  return result;
}

double _FrameLayout.sizeThatFits(in:context:child:)(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  int v7;
  double v8;
  int v9;
  uint64_t v10;
  char v11;
  char v12;
  uint64_t v13;
  double v14;
  uint64_t v16;
  char v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  int v21;
  _BYTE v22[16];
  uint64_t v23;
  char v24;

  v4 = *(_QWORD *)(a1 + 16);
  v5 = *(_BYTE *)(a1 + 24);
  v6 = *a3;
  v7 = *((_DWORD *)a3 + 2);
  v8 = *(double *)v3;
  v9 = *(unsigned __int8 *)(v3 + 8);
  if ((v9 & 1) != 0)
  {
    v10 = *(_QWORD *)a1;
    v11 = *(_BYTE *)(a1 + 8);
  }
  else
  {
    outlined init with take of CGFloat?(v3 + 16, (uint64_t)v22);
    outlined init with take of CGFloat?((uint64_t)v22, (uint64_t)&v23);
    if ((v24 & 1) == 0)
      return v8;
    v11 = 0;
    v10 = *(_QWORD *)&v8;
  }
  v20 = v6;
  v21 = v7;
  v12 = *(_BYTE *)(v3 + 24);
  if (v12)
    v13 = v4;
  else
    v13 = *(_QWORD *)(v3 + 16);
  v16 = v10;
  v17 = v11;
  v18 = v13;
  v19 = v12 & v5;
  LayoutProxy.size(in:)(&v16);
  if (v9)
    return v14;
  return v8;
}

uint64_t _FrameLayout.placement(of:in:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  __int128 v5;
  unint64_t v6;
  int v7;
  uint64_t *v8;
  uint64_t v9;
  char v10;
  uint64_t *v11;
  char v12;
  uint64_t v13;
  _BYTE v15[16];
  uint64_t v16;
  char v17;
  _OWORD v18[3];
  char v19;

  v5 = *(_OWORD *)(a2 + 16);
  v18[0] = *(_OWORD *)a2;
  v18[1] = v5;
  v18[2] = *(_OWORD *)(a2 + 32);
  v6 = *(_QWORD *)a1;
  v7 = *(_DWORD *)(a1 + 8);
  v19 = *(_BYTE *)(a2 + 48);
  PlacementContext.proposedSize.getter((uint64_t)v15);
  if (*(_BYTE *)(v3 + 8))
    v8 = (uint64_t *)v15;
  else
    v8 = (uint64_t *)v3;
  v9 = *v8;
  v10 = *(_BYTE *)(v3 + 8) & v15[8];
  v11 = (uint64_t *)(v3 + 16);
  v12 = *(_BYTE *)(v3 + 24);
  if (v12)
    v11 = &v16;
  v13 = *v11;
  v15[0] = v12 & v17;
  return specialized FrameLayoutCommon.commonPlacement(of:in:childProposal:)(v6, v7, (uint64_t)v18, v9, v10, v13, v12 & v17, a3);
}

uint64_t specialized FrameLayoutCommon.commonPlacement(of:in:childProposal:)@<X0>(unint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char a5@<W4>, uint64_t a6@<X5>, char a7@<W6>, uint64_t a8@<X8>)
{
  uint64_t v8;
  double v9;
  int v13;
  unint64_t v15;
  double v16;
  double v17;
  char v18;
  __int128 v19;
  double *InputValue;
  double v21;
  uint64_t v22;
  uint64_t v23;
  double v24;
  double v25;
  double v26;
  double v27;
  _QWORD *v28;
  os_unfair_lock_s *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  os_unfair_lock_s *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  double v39;
  double v40;
  __int128 v41;
  uint64_t result;
  char v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v49;
  char v50;
  uint64_t v51;
  char v52;
  int v53;
  int v54;
  int v55;
  __int128 v56;
  double v57;
  double v58;
  double v59;
  double v60;

  v13 = a1;
  v15 = HIDWORD(a1);
  v46 = *(_QWORD *)(v8 + 32);
  v45 = *(_QWORD *)(v8 + 40);
  v16 = *(double *)(a3 + 16);
  v17 = *(double *)(a3 + 24);
  v18 = *(_BYTE *)(a3 + 48);
  if (one-time initialization token for defaultValue != -1)
    swift_once();
  v19 = static LayoutComputer.defaultValue;
  if ((v18 & 1) != 0)
  {
    InputValue = (double *)AGGraphGetInputValue();
    v21 = *InputValue;
    v17 = InputValue[1];
  }
  else
  {
    v21 = v16;
  }
  v53 = v13;
  v54 = v15;
  v55 = a2;
  v49 = a4;
  v50 = a5 & 1;
  v44 = a6;
  v51 = a6;
  v52 = a7 & 1;
  swift_retain();
  LayoutProxy.dimensions(in:)((uint64_t)&v49, (uint64_t)&v56);
  v22 = *((_QWORD *)&v56 + 1);
  v23 = v56;
  v24 = v57;
  v25 = v58;
  v26 = v59;
  v27 = v60;
  if (one-time initialization token for _typeCache != -1)
    swift_once();
  v28 = static AlignmentKey._typeCache;
  v29 = (os_unfair_lock_s *)((char *)static AlignmentKey._typeCache + 16);
  swift_retain();
  os_unfair_lock_lock(v29);
  v30 = v28[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  os_unfair_lock_unlock(v29);
  swift_release();
  if (v46 < 2)
  {
    __break(1u);
    goto LABEL_15;
  }
  if (v46 >> 1 > *(_QWORD *)(v30 + 16))
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  v43 = a7;
  v31 = v30 + 16 * ((v46 >> 1) - 1);
  v33 = *(_QWORD *)(v31 + 32);
  v32 = *(_QWORD *)(v31 + 40);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v34 = (os_unfair_lock_s *)static AlignmentKey._typeCache;
  swift_retain();
  os_unfair_lock_lock(v34 + 4);
  v35 = *(_QWORD *)&v34[8]._os_unfair_lock_opaque;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  os_unfair_lock_unlock(v34 + 4);
  swift_release();
  if (v45 < 2)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  if (v45 >> 1 > *(_QWORD *)(v35 + 16))
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  v36 = v35 + 16 * ((v45 >> 1) - 1);
  v37 = *(_QWORD *)(v36 + 32);
  v38 = *(_QWORD *)(v36 + 40);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v56 = v19;
  v57 = v21;
  v58 = v17;
  v59 = v21;
  v60 = v17;
  v9 = (*(double (**)(__int128 *, uint64_t, uint64_t))(v32 + 8))(&v56, v33, v32);
  v56 = v19;
  v57 = v21;
  v58 = v17;
  v59 = v21;
  v60 = v17;
  v17 = (*(double (**)(__int128 *, uint64_t, uint64_t))(v38 + 8))(&v56, v37, v38);
  *(_QWORD *)&v56 = v23;
  *((_QWORD *)&v56 + 1) = v22;
  v57 = v24;
  v58 = v25;
  v59 = v26;
  v60 = v27;
  ViewDimensions.subscript.getter(v46);
  v21 = v39;
  *(_QWORD *)&v56 = v23;
  *((_QWORD *)&v56 + 1) = v22;
  v57 = v24;
  v58 = v25;
  v59 = v26;
  v60 = v27;
  ViewDimensions.subscript.getter(v45);
  v24 = v40;
  if (one-time initialization token for topLeading != -1)
LABEL_18:
    swift_once();
  v41 = static UnitPoint.topLeading;
  swift_release();
  result = swift_release();
  *(_QWORD *)a8 = a4;
  *(_BYTE *)(a8 + 8) = a5 & 1;
  *(_QWORD *)(a8 + 16) = v44;
  *(_BYTE *)(a8 + 24) = v43 & 1;
  *(_OWORD *)(a8 + 32) = v41;
  *(double *)(a8 + 48) = v9 - v21;
  *(double *)(a8 + 56) = v17 - v24;
  return result;
}

{
  uint64_t v8;
  double v9;
  uint64_t v10;
  int v13;
  unint64_t v15;
  double v16;
  double v17;
  char v18;
  __int128 v19;
  double *InputValue;
  double v21;
  uint64_t v22;
  double v23;
  double v24;
  double v25;
  double v26;
  unint64_t v27;
  unint64_t v28;
  _QWORD *v29;
  os_unfair_lock_s *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  os_unfair_lock_s *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  double v40;
  double v41;
  __int128 v42;
  uint64_t result;
  __int128 v44;
  char v45;
  uint64_t v49;
  char v50;
  uint64_t v51;
  char v52;
  int v53;
  int v54;
  int v55;
  __int128 v56;
  double v57;
  double v58;
  double v59;
  double v60;

  v10 = v8;
  v13 = a1;
  v15 = HIDWORD(a1);
  v16 = *(double *)(a3 + 16);
  v17 = *(double *)(a3 + 24);
  v18 = *(_BYTE *)(a3 + 48);
  if (one-time initialization token for defaultValue != -1)
    swift_once();
  v19 = static LayoutComputer.defaultValue;
  if ((v18 & 1) != 0)
  {
    InputValue = (double *)AGGraphGetInputValue();
    v21 = *InputValue;
    v17 = InputValue[1];
  }
  else
  {
    v21 = v16;
  }
  v53 = v13;
  v54 = v15;
  v55 = a2;
  v49 = a4;
  v50 = a5 & 1;
  v51 = a6;
  v45 = a7;
  v52 = a7 & 1;
  swift_retain();
  LayoutProxy.dimensions(in:)((uint64_t)&v49, (uint64_t)&v56);
  *((_QWORD *)&v44 + 1) = *((_QWORD *)&v56 + 1);
  v22 = v56;
  v23 = v57;
  v24 = v58;
  v25 = v59;
  v26 = v60;
  v28 = *(_QWORD *)(v10 + 96);
  v27 = *(_QWORD *)(v10 + 104);
  if (one-time initialization token for _typeCache != -1)
    swift_once();
  v29 = static AlignmentKey._typeCache;
  v30 = (os_unfair_lock_s *)((char *)static AlignmentKey._typeCache + 16);
  swift_retain();
  os_unfair_lock_lock(v30);
  v31 = v29[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  os_unfair_lock_unlock(v30);
  swift_release();
  if (v28 < 2)
  {
    __break(1u);
    goto LABEL_15;
  }
  if (v28 >> 1 > *(_QWORD *)(v31 + 16))
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  *(_QWORD *)&v44 = v22;
  v32 = v31 + 16 * ((v28 >> 1) - 1);
  v34 = *(_QWORD *)(v32 + 32);
  v33 = *(_QWORD *)(v32 + 40);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v35 = (os_unfair_lock_s *)static AlignmentKey._typeCache;
  swift_retain();
  os_unfair_lock_lock(v35 + 4);
  v36 = *(_QWORD *)&v35[8]._os_unfair_lock_opaque;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  os_unfair_lock_unlock(v35 + 4);
  swift_release();
  if (v27 < 2)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  if (v27 >> 1 > *(_QWORD *)(v36 + 16))
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  v37 = v36 + 16 * ((v27 >> 1) - 1);
  v38 = *(_QWORD *)(v37 + 32);
  v39 = *(_QWORD *)(v37 + 40);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v56 = v19;
  v57 = v21;
  v58 = v17;
  v59 = v21;
  v60 = v17;
  v9 = (*(double (**)(__int128 *, uint64_t, uint64_t))(v33 + 8))(&v56, v34, v33);
  v56 = v19;
  v57 = v21;
  v58 = v17;
  v59 = v21;
  v60 = v17;
  v17 = (*(double (**)(__int128 *, uint64_t, uint64_t))(v39 + 8))(&v56, v38, v39);
  v56 = v44;
  v57 = v23;
  v58 = v24;
  v59 = v25;
  v60 = v26;
  ViewDimensions.subscript.getter(v28);
  v21 = v40;
  v56 = v44;
  v57 = v23;
  v58 = v24;
  v59 = v25;
  v60 = v26;
  ViewDimensions.subscript.getter(v27);
  v23 = v41;
  if (one-time initialization token for topLeading != -1)
LABEL_18:
    swift_once();
  v42 = static UnitPoint.topLeading;
  swift_release();
  result = swift_release();
  *(_QWORD *)a8 = a4;
  *(_BYTE *)(a8 + 8) = a5 & 1;
  *(_QWORD *)(a8 + 16) = a6;
  *(_BYTE *)(a8 + 24) = v45 & 1;
  *(_OWORD *)(a8 + 32) = v42;
  *(double *)(a8 + 48) = v9 - v21;
  *(double *)(a8 + 56) = v17 - v23;
  return result;
}

uint64_t _FrameLayout.spacing(in:child:)@<X0>(uint64_t a1@<X0>, int *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  Swift::UInt32 v6;
  int v7;
  unsigned int v8;
  __int128 *InputValue;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  __int128 *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t KeyPath;
  char v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  Swift::UInt32 v22;
  uint64_t v23;
  _BYTE v24[16];
  _BYTE v25[16];
  _BYTE v26[8];
  _BYTE v27[8];
  uint64_t v28;

  v4 = v3;
  v28 = *MEMORY[0x24BDAC8D0];
  v6 = *(_DWORD *)(a1 + 8);
  v7 = *a2;
  v18 = *(_QWORD *)(a2 + 1);
  if (one-time initialization token for introduced != -1)
    swift_once();
  v8 = static _SemanticFeature_v3.introduced;
  if (one-time initialization token for forced != -1)
    swift_once();
  swift_beginAccess();
  if (byte_25426FAB4 == 1)
  {
    if ((dyld_program_sdk_at_least() & 1) == 0)
    {
LABEL_10:
      if ((_DWORD)v18 == *MEMORY[0x24BE096C0])
      {
        if (one-time initialization token for defaultValue != -1)
          swift_once();
        InputValue = &static LayoutComputer.defaultValue;
      }
      else
      {
        InputValue = (__int128 *)AGGraphGetInputValue();
      }
      v10 = *(_QWORD *)InputValue;
      v11 = one-time initialization token for lockAssertionsAreEnabled;
      swift_retain();
      if (v11 != -1)
        swift_once();
      if (!lockAssertionsAreEnabled)
        goto LABEL_21;
      if (one-time initialization token for _lock != -1)
        swift_once();
      if (_MovableLockIsOwner(static Update._lock))
      {
LABEL_21:
        (*(void (**)(void))(*(_QWORD *)v10 + 112))();
        return swift_release();
      }
      goto LABEL_34;
    }
  }
  else if (static Semantics.forced < v8)
  {
    goto LABEL_10;
  }
  v19 = v7;
  v20 = v18;
  if ((LayoutProxy.requiresSpacingProjection.getter() & 1) != 0)
    goto LABEL_10;
  if ((_DWORD)v18 == *MEMORY[0x24BE096C0])
  {
    if (one-time initialization token for defaultValue != -1)
      swift_once();
    v13 = &static LayoutComputer.defaultValue;
  }
  else
  {
    v13 = (__int128 *)AGGraphGetInputValue();
  }
  v14 = *(_QWORD *)v13;
  v15 = one-time initialization token for lockAssertionsAreEnabled;
  swift_retain();
  if (v15 != -1)
    swift_once();
  if (!lockAssertionsAreEnabled)
    goto LABEL_33;
  if (one-time initialization token for _lock != -1)
    swift_once();
  if (_MovableLockIsOwner(static Update._lock))
  {
LABEL_33:
    (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v14 + 112))(&v21);
    swift_release();
    outlined init with take of CGFloat?(v4 + 16, (uint64_t)v25);
    outlined init with take of CGFloat?((uint64_t)v25, (uint64_t)v26);
    outlined init with take of CGFloat?(v4, (uint64_t)v24);
    outlined init with take of CGFloat?((uint64_t)v24, (uint64_t)v27);
    KeyPath = swift_getKeyPath();
    v22 = v6;
    v23 = KeyPath;
    type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentFetch<LayoutDirection>, (uint64_t)&type metadata for LayoutDirection, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EnvironmentFetch);
    Hasher.init(_seed:)();
    Hasher._combine(_:)(v6);
    type metadata accessor for KeyPath<EnvironmentValues, LayoutDirection>();
    swift_retain();
    dispatch thunk of Hashable.hash(into:)();
    Hasher._finalize()();
    lazy protocol witness table accessor for type EnvironmentFetch<LayoutDirection> and conformance EnvironmentFetch<A>(&lazy protocol witness table cache variable for type EnvironmentFetch<LayoutDirection> and conformance EnvironmentFetch<A>, (uint64_t)&protocol conformance descriptor for EnvironmentFetch<A>);
    LOBYTE(v19) = 0;
    lazy protocol witness table accessor for type EnvironmentFetch<LayoutDirection> and conformance EnvironmentFetch<A>(&lazy protocol witness table cache variable for type EnvironmentFetch<LayoutDirection> and conformance EnvironmentFetch<A>, (uint64_t)&protocol conformance descriptor for EnvironmentFetch<A>);
    v17 = *(_BYTE *)static Rule<>._cachedValue(options:owner:hashValue:bodyPtr:update:)();
    swift_release_n();
    LOBYTE(v19) = v17;
    AbsoluteEdge.Set.init(_:layoutDirection:)((unsigned __int8 *)&v19, &v22);
    result = (uint64_t)Spacing.reset(_:)(&v22);
    *a3 = v21;
    return result;
  }
LABEL_34:
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t protocol witness for UnaryLayout.spacing(in:child:) in conformance _FrameLayout@<X0>(uint64_t a1@<X0>, int *a2@<X1>, _QWORD *a3@<X8>)
{
  return _FrameLayout.spacing(in:child:)(a1, a2, a3);
}

uint64_t protocol witness for UnaryLayout.placement(of:in:) in conformance _FrameLayout@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  __int128 *v3;
  __int128 v5;
  __int128 v6;
  unint64_t v7;
  int v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE v14[16];
  uint64_t v15;
  char v16;
  _OWORD v17[3];
  char v18;
  __int128 v19;
  _OWORD v20[2];

  v5 = v3[1];
  v19 = *v3;
  v20[0] = v5;
  v20[1] = v3[2];
  v6 = *(_OWORD *)(a2 + 16);
  v17[0] = *(_OWORD *)a2;
  v17[1] = v6;
  v17[2] = *(_OWORD *)(a2 + 32);
  v7 = *(_QWORD *)a1;
  v8 = *(_DWORD *)(a1 + 8);
  v18 = *(_BYTE *)(a2 + 48);
  PlacementContext.proposedSize.getter((uint64_t)v14);
  v9 = &v15;
  if (BYTE8(v19))
    v10 = (uint64_t *)v14;
  else
    v10 = (uint64_t *)&v19;
  v11 = *v10;
  if (!BYTE8(v20[0]))
    v9 = (uint64_t *)v20;
  v12 = *v9;
  v14[0] = BYTE8(v20[0]) & v16;
  return specialized FrameLayoutCommon.commonPlacement(of:in:childProposal:)(v7, v8, (uint64_t)v17, v11, BYTE8(v19) & v14[8], v12, BYTE8(v20[0]) & v16, a3);
}

double protocol witness for UnaryLayout.sizeThatFits(in:context:child:) in conformance _FrameLayout(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return _FrameLayout.sizeThatFits(in:context:child:)(a1, a2, a3);
}

uint64_t View.frame(width:height:alignment:)(uint64_t a1, char a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _BYTE v11[48];

  specialized _FrameLayout.init(width:height:alignment:)(*(double *)&a1, a2 & 1, *(double *)&a3, a4 & 1, a5, a6, (uint64_t)v11);
  return View.modifier<A>(_:)(v11, a7, &type metadata for _FrameLayout, a8);
}

uint64_t View.frame()(uint64_t a1, uint64_t a2)
{
  _BYTE v5[48];

  if (one-time initialization token for center != -1)
    swift_once();
  specialized _FrameLayout.init(width:height:alignment:)(0.0, 1, 0.0, 1, static Alignment.center, *((uint64_t *)&static Alignment.center + 1), (uint64_t)v5);
  return View.modifier<A>(_:)(v5, a1, &type metadata for _FrameLayout, a2);
}

__n128 _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)@<Q0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15)
{
  __int128 v16;
  __int128 v17;
  __n128 result;
  _OWORD v19[7];

  specialized _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)(a1, a2 & 1, a3, a4 & 1, a5, a6 & 1, a7, a8 & 1, (uint64_t)v19, a10, a11 & 1, a12, a13 & 1, a14, a15);
  v16 = v19[5];
  *(_OWORD *)(a9 + 64) = v19[4];
  *(_OWORD *)(a9 + 80) = v16;
  *(_OWORD *)(a9 + 96) = v19[6];
  v17 = v19[1];
  *(_OWORD *)a9 = v19[0];
  *(_OWORD *)(a9 + 16) = v17;
  result = (__n128)v19[3];
  *(_OWORD *)(a9 + 32) = v19[2];
  *(__n128 *)(a9 + 48) = result;
  return result;
}

uint64_t _FlexFrameLayout.childProposal(myProposal:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  double v3;
  double v4;
  double v5;
  char v6;
  double v7;
  double v8;
  double v9;
  char v10;

  v3 = *(double *)v2;
  v4 = *(double *)(v2 + 32);
  if ((*(_BYTE *)(result + 8) & 1) != 0)
  {
    v5 = *(double *)(v2 + 16);
    if ((*(_BYTE *)(v2 + 24) & 1) != 0)
    {
      v6 = 1;
      goto LABEL_13;
    }
  }
  else
  {
    v5 = *(double *)result;
  }
  v6 = 0;
  if (*(_BYTE *)(v2 + 8))
    v3 = -INFINITY;
  if (v3 > v5)
    v5 = v3;
  if (*(_BYTE *)(v2 + 40))
    v4 = INFINITY;
  if (v4 < v5)
    v5 = v4;
LABEL_13:
  v7 = *(double *)(v2 + 48);
  v8 = *(double *)(v2 + 80);
  if (*(_BYTE *)(result + 24))
  {
    v9 = *(double *)(v2 + 64);
    if ((*(_BYTE *)(v2 + 72) & 1) != 0)
    {
      v10 = 1;
      goto LABEL_25;
    }
  }
  else
  {
    v9 = *(double *)(result + 16);
  }
  v10 = 0;
  if (*(_BYTE *)(v2 + 56))
    v7 = -INFINITY;
  if (v7 > v9)
    v9 = v7;
  if (*(_BYTE *)(v2 + 88))
    v8 = INFINITY;
  if (v8 < v9)
    v9 = v8;
LABEL_25:
  *(double *)a2 = v5;
  *(_BYTE *)(a2 + 8) = v6;
  *(double *)(a2 + 16) = v9;
  *(_BYTE *)(a2 + 24) = v10;
  return result;
}

double _FlexFrameLayout.sizeThatFits(in:context:child:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  char v4;
  char v5;
  uint64_t v6;
  char v7;
  double v8;
  double v9;
  int v10;
  double v11;
  uint64_t v12;
  double v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  char v20;
  double v21;
  double v22;
  double v23;
  char v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  double v31;
  int v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  char v38;

  v4 = *(_BYTE *)(a1 + 8);
  v5 = *(_BYTE *)(a1 + 24);
  v6 = *(uint64_t *)v3;
  v7 = *(_BYTE *)(v3 + 8);
  v8 = *(double *)(v3 + 32);
  if ((v4 & 1) != 0)
  {
    v9 = *(double *)(v3 + 16);
    v10 = *(unsigned __int8 *)(v3 + 24);
  }
  else
  {
    v9 = 0.0;
    if ((*(_BYTE *)(v3 + 8) & 1) != 0 || (*(_BYTE *)(v3 + 40) & 1) != 0 || (v11 = *(double *)v3, *(double *)&v6 > v8))
    {
      v10 = 1;
    }
    else
    {
      v10 = 0;
      if (*(double *)&v6 <= *(double *)a1)
        v11 = *(double *)a1;
      if (v11 <= v8)
        v9 = v11;
      else
        v9 = *(double *)(v3 + 32);
    }
  }
  v12 = *(_QWORD *)(a1 + 16);
  v13 = *(double *)a3;
  v14 = *(_DWORD *)(a3 + 8);
  if ((*(_BYTE *)(a1 + 24) & 1) != 0)
  {
    v15 = *(unsigned __int8 *)(v3 + 72);
    goto LABEL_9;
  }
  if ((*(_BYTE *)(v3 + 56) & 1) == 0 && (*(_BYTE *)(v3 + 88) & 1) == 0 && *(double *)(v3 + 48) <= *(double *)(v3 + 80))
  {
    v15 = 0;
LABEL_9:
    if ((v10 | v15) != 1)
      return v9;
    goto LABEL_15;
  }
  v15 = 1;
LABEL_15:
  v25 = *(_BYTE *)(v3 + 88);
  v26 = *(_BYTE *)(v3 + 56);
  v27 = *(_QWORD *)(v3 + 80);
  v28 = *(_QWORD *)(v3 + 48);
  v30 = *(_BYTE *)(v3 + 40);
  v29 = *(_QWORD *)(v3 + 32);
  v31 = *(double *)a1;
  LOBYTE(v32) = v4;
  v33 = v12;
  v34 = v5;
  v16 = v10;
  _FlexFrameLayout.childProposal(myProposal:)((uint64_t)&v31, (uint64_t)&v35);
  v17 = v35;
  v18 = v36;
  v19 = v37;
  v20 = v38;
  v31 = v13;
  v32 = v14;
  LayoutProxy.size(in:)(&v35);
  v23 = v22;
  if (v16)
    v9 = dimension #1 (min:max:childProposal:childActual:) in _FlexFrameLayout.sizeThatFits(in:context:child:)(v6, v7, v29, v30, v17, v18, v21);
  if (v15)
    dimension #1 (min:max:childProposal:childActual:) in _FlexFrameLayout.sizeThatFits(in:context:child:)(v28, v26, v27, v25, v19, v20, v23);
  return v9;
}

double dimension #1 (min:max:childProposal:childActual:) in _FlexFrameLayout.sizeThatFits(in:context:child:)(uint64_t a1, char a2, uint64_t a3, char a4, uint64_t a5, char a6, double result)
{
  double v7;
  double v8;

  if ((a2 & 1) != 0)
  {
    if ((a4 & 1) == 0)
    {
      v8 = *(double *)&a5;
      if ((a6 & 1) != 0)
        v8 = -INFINITY;
      if (v8 < result)
        v8 = result;
      result = *(double *)&a3;
      if (v8 < *(double *)&a3)
        return v8;
    }
  }
  else if ((a4 & 1) != 0 || *(double *)&a1 > *(double *)&a3)
  {
    v7 = *(double *)&a5;
    if ((a6 & 1) != 0)
      v7 = INFINITY;
    if (v7 >= result)
      v7 = result;
    result = *(double *)&a1;
    if (v7 >= *(double *)&a1)
      return v7;
  }
  else
  {
    if (*(double *)&a1 > result)
      result = *(double *)&a1;
    if (result > *(double *)&a3)
      return *(double *)&a3;
  }
  return result;
}

uint64_t proposedDimension #1 (_:min:ideal:max:) in _FlexFrameLayout.childPlacementProposal(of:context:)(char a1, uint64_t a2, char a3, uint64_t a4, char a5, uint64_t a6, char a7, uint64_t a8)
{
  double *InputValue;
  double *v15;
  double v16;
  uint64_t *v17;
  double v18;
  double v19;
  _BYTE v21[8];
  uint64_t v22;
  uint64_t v23;
  _BYTE v24[40];
  _DWORD v25[8];
  char v26;

  outlined init with take of PlacementContext.ParentSize(a8 + 16, (uint64_t)v24);
  outlined init with take of PlacementContext.ParentSize((uint64_t)v24, (uint64_t)v25);
  if ((v26 & 1) != 0)
    InputValue = (double *)AGGraphGetInputValue();
  else
    InputValue = (double *)v25;
  v15 = InputValue + 1;
  if ((a1 & 1) == 0)
    v15 = InputValue;
  v16 = *v15;
  if ((a5 & 1) == 0)
    return *(_QWORD *)&v16;
  PlacementContext.proposedSize.getter((uint64_t)v21);
  v17 = &v22;
  if ((a1 & 1) != 0)
    v17 = &v23;
  if ((*(_BYTE *)v17 & 1) == 0)
    return *(_QWORD *)&v16;
  v18 = *(double *)&a2;
  if ((a3 & 1) != 0)
    v18 = -INFINITY;
  v19 = *(double *)&a6;
  if ((a7 & 1) != 0)
    v19 = INFINITY;
  if (v18 < v16 && v16 < v19)
    return 0;
  else
    return *(_QWORD *)&v16;
}

uint64_t _FlexFrameLayout.placement(of:in:)@<X0>(uint64_t a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  unint64_t v5;
  int v6;
  __int128 v7;
  unsigned int v8;
  uint64_t *InputValue;
  uint64_t v10;
  char v11;
  char v12;
  uint64_t v13;
  char v14;
  char v15;
  __int128 v17;
  _OWORD v18[2];
  char v19;
  _BYTE v20[40];
  _DWORD v21[8];
  char v22;

  v5 = *(_QWORD *)a1;
  v6 = *(_DWORD *)(a1 + 8);
  v7 = a2[1];
  v17 = *a2;
  v18[0] = v7;
  v18[1] = a2[2];
  v19 = *((_BYTE *)a2 + 48);
  if (one-time initialization token for introduced != -1)
    swift_once();
  v8 = static _SemanticFeature_v5.introduced;
  if (one-time initialization token for forced != -1)
    swift_once();
  swift_beginAccess();
  if (byte_25426FAB4 != 1)
  {
    if (static Semantics.forced < v8)
      goto LABEL_7;
LABEL_10:
    v10 = proposedDimension #1 (_:min:ideal:max:) in _FlexFrameLayout.childPlacementProposal(of:context:)(0, *(_QWORD *)v3, *(_BYTE *)(v3 + 8), *(_QWORD *)(v3 + 16), *(_BYTE *)(v3 + 24), *(_QWORD *)(v3 + 32), *(_BYTE *)(v3 + 40), (uint64_t)&v17);
    v12 = v11 & 1;
    v13 = proposedDimension #1 (_:min:ideal:max:) in _FlexFrameLayout.childPlacementProposal(of:context:)(1, *(_QWORD *)(v3 + 48), *(_BYTE *)(v3 + 56), *(_QWORD *)(v3 + 64), *(_BYTE *)(v3 + 72), *(_QWORD *)(v3 + 80), *(_BYTE *)(v3 + 88), (uint64_t)&v17);
    v15 = v14 & 1;
    return specialized FrameLayoutCommon.commonPlacement(of:in:childProposal:)(v5, v6, (uint64_t)&v17, v10, v12, v13, v15, a3);
  }
  if ((dyld_program_sdk_at_least() & 1) != 0)
    goto LABEL_10;
LABEL_7:
  outlined init with take of PlacementContext.ParentSize((uint64_t)v18, (uint64_t)v20);
  outlined init with take of PlacementContext.ParentSize((uint64_t)v20, (uint64_t)v21);
  if ((v22 & 1) != 0)
    InputValue = (uint64_t *)AGGraphGetInputValue();
  else
    InputValue = (uint64_t *)v21;
  v12 = 0;
  v15 = 0;
  v10 = *InputValue;
  v13 = InputValue[1];
  return specialized FrameLayoutCommon.commonPlacement(of:in:childProposal:)(v5, v6, (uint64_t)&v17, v10, v12, v13, v15, a3);
}

uint64_t _FlexFrameLayout.spacing(in:child:)@<X0>(uint64_t a1@<X0>, int *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  Swift::UInt32 v6;
  int v7;
  unsigned int v8;
  __int128 *InputValue;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  __int128 *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t KeyPath;
  char v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  Swift::UInt32 v22;
  uint64_t v23;
  _BYTE v24[16];
  _BYTE v25[16];
  _BYTE v26[16];
  _BYTE v27[16];
  _BYTE v28[16];
  _BYTE v29[16];
  _BYTE v30[16];
  _BYTE v31[16];
  _BYTE v32[8];
  _BYTE v33[16];
  _BYTE v34[16];
  _BYTE v35[8];
  uint64_t v36;

  v4 = v3;
  v36 = *MEMORY[0x24BDAC8D0];
  v6 = *(_DWORD *)(a1 + 8);
  v7 = *a2;
  v18 = *(_QWORD *)(a2 + 1);
  if (one-time initialization token for introduced != -1)
    swift_once();
  v8 = static _SemanticFeature_v3.introduced;
  if (one-time initialization token for forced != -1)
    swift_once();
  swift_beginAccess();
  if (byte_25426FAB4 == 1)
  {
    if ((dyld_program_sdk_at_least() & 1) == 0)
    {
LABEL_10:
      if ((_DWORD)v18 == *MEMORY[0x24BE096C0])
      {
        if (one-time initialization token for defaultValue != -1)
          swift_once();
        InputValue = &static LayoutComputer.defaultValue;
      }
      else
      {
        InputValue = (__int128 *)AGGraphGetInputValue();
      }
      v10 = *(_QWORD *)InputValue;
      v11 = one-time initialization token for lockAssertionsAreEnabled;
      swift_retain();
      if (v11 != -1)
        swift_once();
      if (!lockAssertionsAreEnabled)
        goto LABEL_21;
      if (one-time initialization token for _lock != -1)
        swift_once();
      if (_MovableLockIsOwner(static Update._lock))
      {
LABEL_21:
        (*(void (**)(void))(*(_QWORD *)v10 + 112))();
        return swift_release();
      }
      goto LABEL_40;
    }
  }
  else if (static Semantics.forced < v8)
  {
    goto LABEL_10;
  }
  v19 = v7;
  v20 = v18;
  if ((LayoutProxy.requiresSpacingProjection.getter() & 1) != 0)
    goto LABEL_10;
  if ((_DWORD)v18 == *MEMORY[0x24BE096C0])
  {
    if (one-time initialization token for defaultValue != -1)
      swift_once();
    v13 = &static LayoutComputer.defaultValue;
  }
  else
  {
    v13 = (__int128 *)AGGraphGetInputValue();
  }
  v14 = *(_QWORD *)v13;
  v15 = one-time initialization token for lockAssertionsAreEnabled;
  swift_retain();
  if (v15 != -1)
    swift_once();
  if (lockAssertionsAreEnabled)
  {
    if (one-time initialization token for _lock != -1)
      swift_once();
    if (!_MovableLockIsOwner(static Update._lock))
    {
LABEL_40:
      result = _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      return result;
    }
  }
  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v14 + 112))(&v21);
  swift_release();
  outlined init with take of CGFloat?(v4 + 48, (uint64_t)v29);
  outlined init with take of CGFloat?((uint64_t)v29, (uint64_t)v30);
  if (v30[8] == 1)
  {
    outlined init with take of CGFloat?(v4 + 64, (uint64_t)v28);
    outlined init with take of CGFloat?((uint64_t)v28, (uint64_t)v31);
    if (v31[8] == 1)
    {
      outlined init with take of CGFloat?(v4 + 80, (uint64_t)v27);
      outlined init with take of CGFloat?((uint64_t)v27, (uint64_t)v32);
    }
  }
  outlined init with take of CGFloat?(v4, (uint64_t)v26);
  outlined init with take of CGFloat?((uint64_t)v26, (uint64_t)v33);
  if (v33[8] == 1)
  {
    outlined init with take of CGFloat?(v4 + 16, (uint64_t)v25);
    outlined init with take of CGFloat?((uint64_t)v25, (uint64_t)v34);
    if (v34[8] == 1)
    {
      outlined init with take of CGFloat?(v4 + 32, (uint64_t)v24);
      outlined init with take of CGFloat?((uint64_t)v24, (uint64_t)v35);
    }
  }
  KeyPath = swift_getKeyPath();
  v22 = v6;
  v23 = KeyPath;
  type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentFetch<LayoutDirection>, (uint64_t)&type metadata for LayoutDirection, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EnvironmentFetch);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v6);
  type metadata accessor for KeyPath<EnvironmentValues, LayoutDirection>();
  swift_retain();
  dispatch thunk of Hashable.hash(into:)();
  Hasher._finalize()();
  lazy protocol witness table accessor for type EnvironmentFetch<LayoutDirection> and conformance EnvironmentFetch<A>(&lazy protocol witness table cache variable for type EnvironmentFetch<LayoutDirection> and conformance EnvironmentFetch<A>, (uint64_t)&protocol conformance descriptor for EnvironmentFetch<A>);
  LOBYTE(v19) = 0;
  lazy protocol witness table accessor for type EnvironmentFetch<LayoutDirection> and conformance EnvironmentFetch<A>(&lazy protocol witness table cache variable for type EnvironmentFetch<LayoutDirection> and conformance EnvironmentFetch<A>, (uint64_t)&protocol conformance descriptor for EnvironmentFetch<A>);
  v17 = *(_BYTE *)static Rule<>._cachedValue(options:owner:hashValue:bodyPtr:update:)();
  swift_release_n();
  LOBYTE(v19) = v17;
  AbsoluteEdge.Set.init(_:layoutDirection:)((unsigned __int8 *)&v19, &v22);
  result = (uint64_t)Spacing.reset(_:)(&v22);
  *a3 = v21;
  return result;
}

uint64_t protocol witness for UnaryLayout.spacing(in:child:) in conformance _FlexFrameLayout@<X0>(uint64_t a1@<X0>, int *a2@<X1>, _QWORD *a3@<X8>)
{
  return _FlexFrameLayout.spacing(in:child:)(a1, a2, a3);
}

uint64_t protocol witness for UnaryLayout.placement(of:in:) in conformance _FlexFrameLayout@<X0>(uint64_t a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X8>)
{
  return _FlexFrameLayout.placement(of:in:)(a1, a2, a3);
}

double protocol witness for UnaryLayout.sizeThatFits(in:context:child:) in conformance _FlexFrameLayout(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _FlexFrameLayout.sizeThatFits(in:context:child:)(a1, a2, a3);
}

uint64_t View.frame(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)(uint64_t a1, char a2, uint64_t a3, char a4, uint64_t a5, char a6, uint64_t a7, char a8, double a9, double a10, double a11, double a12, double a13, double a14, double a15, double a16, double a17, char a18, double a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  double v23;
  double v24;
  int v25;
  double v26;
  int v27;
  double v28;
  int v29;
  char v30;
  double v31;
  double v33;
  double v34;
  double v35;
  id v37;
  char v39;
  char v40;
  char v41;
  uint64_t v42;
  _BYTE v43[120];

  v20 = a23;
  v19 = a24;
  v22 = a21;
  v21 = a22;
  v23 = a19;
  v24 = a17;
  v25 = a2 & 1;
  v26 = *(double *)&a1;
  if (v25)
    v26 = -INFINITY;
  v27 = a4 & 1;
  v28 = *(double *)&a3;
  if (v27)
    v28 = v26;
  v29 = a6 & 1;
  v30 = a8 & 1;
  v31 = *(double *)&a5;
  if (v29)
    v31 = v28;
  if (v26 > v28 || v28 > v31)
    goto LABEL_22;
  v33 = *(double *)&a7;
  if ((a8 & 1) != 0)
    v33 = -INFINITY;
  v34 = a17;
  if ((a18 & 1) != 0)
    v34 = v33;
  v35 = a19;
  if ((a20 & 1) != 0)
    v35 = v34;
  if (v33 > v34 || v34 > v35)
  {
LABEL_22:
    v39 = v29;
    v40 = v27;
    v41 = v25;
    v42 = a7;
    static os_log_type_t.fault.getter();
    if (one-time initialization token for runtimeIssuesLog != -1)
      swift_once();
    v37 = (id)static Log.runtimeIssuesLog;
    os_log(_:dso:log:_:_:)();

    v19 = a24;
    a7 = v42;
    v23 = a19;
    v20 = a23;
    v24 = a17;
    LOBYTE(v25) = v41;
    v22 = a21;
    v21 = a22;
    LOBYTE(v29) = v39;
    LOBYTE(v27) = v40;
  }
  specialized _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)(*(double *)&a1, v25, *(double *)&a3, v27, *(double *)&a5, v29, *(double *)&a7, v30, (uint64_t)v43, v24, a18 & 1, v23, a20 & 1, v22, v21);
  return View.modifier<A>(_:)(v43, v20, &type metadata for _FlexFrameLayout, v19);
}

uint64_t specialized _FrameLayout.init(width:height:alignment:)@<X0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  char v13;
  int v14;
  unsigned int v15;
  uint64_t result;
  char v17;
  BOOL v18;
  int v19;
  double v20;

  if (one-time initialization token for v2 != -1)
    swift_once();
  v13 = a2 & 1;
  LOBYTE(v14) = a4 & 1;
  v15 = static Semantics.v2;
  if (one-time initialization token for forced != -1)
    swift_once();
  result = swift_beginAccess();
  if (byte_25426FAB4 == 1)
  {
    result = dyld_program_sdk_at_least();
    if ((result & 1) == 0)
      goto LABEL_31;
  }
  else if (static Semantics.forced < v15)
  {
    goto LABEL_31;
  }
  if ((a2 & 1) != 0 || (v17 = a1 >= 0.0) != 0 && (*(_QWORD *)&a1 & 0x7FF0000000000000) != 0x7FF0000000000000)
  {
    if ((a4 & 1) != 0)
    {
      LOBYTE(v14) = 1;
      goto LABEL_31;
    }
    v14 = 0;
    v17 = a2 & 1;
    goto LABEL_17;
  }
  a1 = 0.0;
  v14 = 1;
  if ((a4 & 1) == 0)
  {
LABEL_17:
    if (a3 >= 0.0)
    {
      v18 = (*(_QWORD *)&a3 & 0x7FF0000000000000) == 0x7FF0000000000000;
      if ((*(_QWORD *)&a3 & 0x7FF0000000000000) == 0x7FF0000000000000)
        v19 = 1;
      else
        v19 = v14;
      if ((*(_QWORD *)&a3 & 0x7FF0000000000000) == 0x7FF0000000000000)
        v20 = 0.0;
      else
        v20 = a3;
      if (v19 != 1)
      {
        LOBYTE(v14) = 0;
        v13 = v17;
        goto LABEL_31;
      }
      v13 = v17;
      a3 = v20;
      LOBYTE(v14) = v18;
    }
    else
    {
      a3 = 0.0;
      LOBYTE(v14) = 0;
      v13 = v17;
    }
    goto LABEL_27;
  }
  v13 = v17;
LABEL_27:
  static os_log_type_t.fault.getter();
  if (one-time initialization token for runtimeIssuesLog != -1)
    swift_once();
  result = os_log(_:dso:log:_:_:)();
LABEL_31:
  *(double *)a7 = a1;
  *(_BYTE *)(a7 + 8) = v13;
  *(double *)(a7 + 16) = a3;
  *(_BYTE *)(a7 + 24) = v14;
  *(_QWORD *)(a7 + 32) = a5;
  *(_QWORD *)(a7 + 40) = a6;
  return result;
}

uint64_t outlined init with take of CGFloat?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for CGFloat?, MEMORY[0x24BEE50B0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1C68]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t specialized _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)@<X0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15)
{
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  _BOOL4 v35;
  int v36;
  double v37;
  double v38;
  _BOOL4 v39;
  int v40;
  unsigned int v41;
  uint64_t result;
  double v44;
  double v45;
  double v46;
  double v47;
  double v48;
  double v49;

  v19 = a12;
  v20 = a1;
  v21 = 0.0;
  if (a1 > 0.0)
    v22 = a1;
  else
    v22 = 0.0;
  v23 = a3;
  if ((a2 & 1) != 0)
    v24 = 0.0;
  else
    v24 = v22;
  if (v24 < a3)
    v24 = a3;
  v25 = v24;
  if ((a4 & 1) != 0)
    v25 = a3;
  v26 = a5;
  v49 = v25;
  v27 = v25;
  if ((a4 & 1) != 0)
    v27 = 0.0;
  if (v27 < a5)
    v27 = a5;
  v28 = v27;
  if ((a6 & 1) != 0)
    v28 = a5;
  v48 = v28;
  if (a7 > 0.0)
    v29 = a7;
  else
    v29 = 0.0;
  if ((a8 & 1) != 0)
    v30 = 0.0;
  else
    v30 = v29;
  if (v30 < a10)
    v30 = a10;
  v31 = v30;
  if ((a11 & 1) != 0)
    v31 = a10;
  v32 = INFINITY;
  v33 = v31;
  if ((a11 & 1) != 0)
    v33 = 0.0;
  if (v33 < a12)
    v33 = a12;
  if ((a13 & 1) == 0)
  {
    v32 = a12;
    v19 = v33;
  }
  v46 = v19;
  v47 = v31;
  if ((a2 & 1) != 0)
    v20 = 0.0;
  if ((a6 & 1) != 0)
    v26 = INFINITY;
  if ((a4 & 1) != 0)
    v34 = v26;
  else
    v34 = a3;
  if ((a4 & 1) != 0)
    v23 = 0.0;
  v35 = v20 > v34;
  if (v23 > v26)
    v35 = 1;
  v36 = v20 >= INFINITY || v35;
  if ((a8 & 1) != 0)
    v37 = 0.0;
  else
    v37 = a7;
  if ((a11 & 1) != 0)
    v38 = v32;
  else
    v38 = a10;
  if ((a11 & 1) == 0)
    v21 = a10;
  v39 = v37 > v38;
  if (v21 > v32)
    v39 = 1;
  v40 = v37 >= INFINITY || v39;
  if (one-time initialization token for v3 != -1)
    swift_once();
  v41 = static Semantics.v3;
  if (one-time initialization token for forced != -1)
    swift_once();
  swift_beginAccess();
  if ((byte_25426FAB4 & 1) != 0)
    result = dyld_program_sdk_at_least();
  else
    result = static Semantics.forced >= v41;
  if ((v36 | v40) == 1 && (_DWORD)result != 0)
  {
    static os_log_type_t.fault.getter();
    if (one-time initialization token for runtimeIssuesLog != -1)
      swift_once();
    result = os_log(_:dso:log:_:_:)();
  }
  v44 = v29;
  if ((a8 & 1) != 0)
    v44 = a7;
  v45 = v22;
  if ((a2 & 1) != 0)
    v45 = a1;
  *(double *)a9 = v45;
  *(_BYTE *)(a9 + 8) = a2 & 1;
  *(double *)(a9 + 16) = v49;
  *(_BYTE *)(a9 + 24) = a4 & 1;
  *(double *)(a9 + 32) = v48;
  *(_BYTE *)(a9 + 40) = a6 & 1;
  *(double *)(a9 + 48) = v44;
  *(_BYTE *)(a9 + 56) = a8 & 1;
  *(double *)(a9 + 64) = v47;
  *(_BYTE *)(a9 + 72) = a11 & 1;
  *(double *)(a9 + 80) = v46;
  *(_BYTE *)(a9 + 88) = a13 & 1;
  *(_QWORD *)(a9 + 96) = a14;
  *(_QWORD *)(a9 + 104) = a15;
  return result;
}

uint64_t outlined init with take of PlacementContext.ParentSize(uint64_t a1, uint64_t a2)
{
  __swift_memcpy33_8(a2, a1);
  return a2;
}

unint64_t instantiation function for generic protocol witness table for _FrameLayout(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type _FrameLayout and conformance _FrameLayout();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t instantiation function for generic protocol witness table for _FlexFrameLayout(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type _FlexFrameLayout and conformance _FlexFrameLayout();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

ValueMetadata *type metadata accessor for _FrameLayout()
{
  return &type metadata for _FrameLayout;
}

ValueMetadata *type metadata accessor for _FlexFrameLayout()
{
  return &type metadata for _FlexFrameLayout;
}

uint64_t sub_234FA5674(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return get_witness_table_7SwiftUI4ViewRzlAA15ModifiedContentVyxAA29IgnoresAutomaticPaddingLayout33_47C1BD8C61550BB60F4F3D12F752D53DLLVGAaBHPxAaBHD1__AgA0C8ModifierHPyHCHCTm(a1, (uint64_t)&type metadata for _FrameLayout, (uint64_t)&protocol witness table for _FrameLayout, a4);
}

uint64_t sub_234FA5688(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return get_witness_table_7SwiftUI4ViewRzlAA15ModifiedContentVyxAA29IgnoresAutomaticPaddingLayout33_47C1BD8C61550BB60F4F3D12F752D53DLLVGAaBHPxAaBHD1__AgA0C8ModifierHPyHCHCTm(a1, (uint64_t)&type metadata for _FlexFrameLayout, (uint64_t)&protocol witness table for _FlexFrameLayout, a4);
}

void AccessibilityLabelStorage.Placement.hash(into:)()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0);
}

BOOL static AccessibilityLabelStorage.Placement.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

Swift::Int AccessibilityLabelStorage.Placement.hashValue.getter()
{
  unsigned __int8 *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t AccessibilityLabelStorage.texts.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t AccessibilityLabelStorage.texts.setter(uint64_t a1)
{
  _QWORD *v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v1 = a1;
  return result;
}

uint64_t (*AccessibilityLabelStorage.texts.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

void AccessibilityLabelStorage.placement.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 8);
}

_BYTE *AccessibilityLabelStorage.placement.setter(_BYTE *result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 8) = *result;
  return result;
}

uint64_t (*AccessibilityLabelStorage.placement.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

SwiftUI::AccessibilityLabelStorage __swiftcall AccessibilityLabelStorage.init(texts:placement:)(Swift::OpaquePointer texts, SwiftUI::AccessibilityLabelStorage::Placement placement)
{
  uint64_t v2;
  char v3;
  SwiftUI::AccessibilityLabelStorage result;

  v3 = *(_BYTE *)placement;
  *(Swift::OpaquePointer *)v2 = texts;
  *(_BYTE *)(v2 + 8) = v3;
  result.texts = texts;
  result.placement = placement;
  return result;
}

BOOL AccessibilityLabelStorage.removing(_:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t v9;
  unint64_t v10;
  char v11;
  char v12;
  uint64_t v13;
  char v14;
  uint64_t v15;

  v9 = *v4;
  swift_bridgeObjectRetain();
  v10 = specialized Collection<>.firstIndex(of:)(a1, a2, a3 & 1, a4, v9);
  v12 = v11;
  swift_bridgeObjectRelease();
  if ((v12 & 1) == 0)
  {
    v13 = specialized Array.remove(at:)(v10);
    outlined consume of Text.Storage(v13, v15, v14 & 1);
    swift_bridgeObjectRelease();
  }
  return (v12 & 1) == 0;
}

uint64_t static AccessibilityLabelStorage.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;

  v2 = *(unsigned __int8 *)(a1 + 8);
  v3 = *(unsigned __int8 *)(a2 + 8);
  return specialized static Array<A>.== infix(_:_:)(*(_QWORD *)a1, *(_QWORD *)a2) & (v2 == v3);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance AccessibilityLabelStorage(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;

  v2 = *(unsigned __int8 *)(a1 + 8);
  v3 = *(unsigned __int8 *)(a2 + 8);
  return specialized static Array<A>.== infix(_:_:)(*(_QWORD *)a1, *(_QWORD *)a2) & (v2 == v3);
}

Swift::Bool __swiftcall AccessibilityLabelStorage.merge(with:)(SwiftUI::AccessibilityLabelStorage with)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  int v4;
  Swift::Bool result;
  uint64_t v6;

  v2 = *(_QWORD *)with.texts._rawValue;
  v3 = *((unsigned __int8 *)with.texts._rawValue + 8);
  v4 = *(unsigned __int8 *)(v1 + 8);
  type metadata accessor for (AccessibilityLabelStorage.Placement, AccessibilityLabelStorage.Placement)();
  if (v4 == 3)
  {
    if (v3 != 3)
    {
      swift_bridgeObjectRelease();
      *(_QWORD *)v1 = v2;
      *(_BYTE *)(v1 + 8) = v3;
      swift_bridgeObjectRetain();
      return 1;
    }
    return 0;
  }
  if (!v3)
    goto LABEL_8;
  if (v3 == 3)
    return 0;
  if (v4 == 1)
  {
LABEL_8:
    swift_bridgeObjectRetain();
    specialized Array.replaceSubrange<A>(_:with:)(0, 0, v2);
    swift_bridgeObjectRelease();
    return 1;
  }
  if (v3 == 1)
    goto LABEL_15;
  if (v4 != 2)
  {
    if (v4)
      goto LABEL_16;
LABEL_15:
    v6 = swift_bridgeObjectRetain();
    specialized Array.append<A>(contentsOf:)(v6);
    return 1;
  }
  if (v3 == 2)
    return 0;
LABEL_16:
  result = _diagnoseUnexpectedEnumCase<A>(type:)();
  __break(1u);
  return result;
}

void type metadata accessor for (AccessibilityLabelStorage.Placement, AccessibilityLabelStorage.Placement)()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!lazy cache variable for type metadata for (AccessibilityLabelStorage.Placement, AccessibilityLabelStorage.Placement))
  {
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (AccessibilityLabelStorage.Placement, AccessibilityLabelStorage.Placement));
  }
}

unint64_t lazy protocol witness table accessor for type AccessibilityLabelStorage.Placement and conformance AccessibilityLabelStorage.Placement()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AccessibilityLabelStorage.Placement and conformance AccessibilityLabelStorage.Placement;
  if (!lazy protocol witness table cache variable for type AccessibilityLabelStorage.Placement and conformance AccessibilityLabelStorage.Placement)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for AccessibilityLabelStorage.Placement, &type metadata for AccessibilityLabelStorage.Placement);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityLabelStorage.Placement and conformance AccessibilityLabelStorage.Placement);
  }
  return result;
}

ValueMetadata *type metadata accessor for AccessibilityLabelStorage()
{
  return &type metadata for AccessibilityLabelStorage;
}

uint64_t storeEnumTagSinglePayload for AccessibilityLabelStorage.Placement(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_234FA5A94 + 4 * byte_2352BA345[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_234FA5AC8 + 4 * asc_2352BA340[v4]))();
}

uint64_t sub_234FA5AC8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_234FA5AD0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x234FA5AD8);
  return result;
}

uint64_t sub_234FA5AE4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x234FA5AECLL);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_234FA5AF0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_234FA5AF8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AccessibilityLabelStorage.Placement()
{
  return &type metadata for AccessibilityLabelStorage.Placement;
}

unint64_t CachedEnvironment.animatedPosition(for:)(uint64_t *a1)
{
  uint64_t v1;
  int v2;
  unint64_t OffsetAttribute2;
  uint64_t v4;
  int v5;
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  uint64_t KeyPath;
  int v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned __int8 v24;
  unint64_t v25;
  unint64_t v26;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  __int128 v36;
  uint64_t v37;
  unint64_t v38;
  unsigned __int8 v39;
  unsigned int v40;
  unsigned __int8 v41;
  unsigned int v42;
  unsigned __int8 v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  int v47;
  int v48;
  int v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  int v54;
  int v55;
  int v56;
  int v57;
  int v58;
  int v59;

  v2 = *((_DWORD *)a1 + 9);
  OffsetAttribute2 = *((unsigned int *)a1 + 16);
  if ((v2 & 0x20) != 0)
  {
    v4 = v1;
    v5 = *((_DWORD *)a1 + 2);
    v6 = a1[2];
    v7 = *((_DWORD *)a1 + 7);
    v8 = *((_DWORD *)a1 + 8);
    v10 = a1[5];
    v9 = a1[6];
    v11 = *((_DWORD *)a1 + 14);
    v12 = *((_DWORD *)a1 + 15);
    v13 = *((_DWORD *)a1 + 17);
    v14 = *((_DWORD *)a1 + 18);
    v15 = *((_DWORD *)a1 + 19);
    v16 = *((_DWORD *)a1 + 20);
    v17 = *((_DWORD *)a1 + 6);
    v44 = *a1;
    v45 = v5;
    v46 = v6;
    v47 = v17;
    v48 = v7;
    v31 = v11;
    v32 = v8;
    v49 = v8;
    v50 = v2;
    v51 = v10;
    v52 = v9;
    v53 = v11;
    v54 = v12;
    v29 = v15;
    v30 = v12;
    v55 = OffsetAttribute2;
    v56 = v13;
    v33 = v13;
    v57 = v14;
    v58 = v15;
    v28 = v16;
    v59 = v16;
    swift_retain();
    v35 = v6;
    swift_retain();
    v34 = v10;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v18 = _ViewInputs.geometryTransaction()();
    KeyPath = swift_getKeyPath();
    v20 = specialized CachedEnvironment.attribute<A>(keyPath:)(KeyPath);
    swift_release();
    if ((*(_BYTE *)(v4 + 65) & 1) == 0
      && (_DWORD)OffsetAttribute2 == *(_DWORD *)(v4 + 16)
      && v14 == *(_DWORD *)(v4 + 20)
      && v20 == *(_DWORD *)(v4 + 24)
      && v5 == *(_DWORD *)(v4 + 28)
      && v18 == *(_DWORD *)(v4 + 32)
      && v17 == *(_DWORD *)(v4 + 36))
    {
      if ((*(_BYTE *)(v4 + 48) & 1) == 0)
      {
        OffsetAttribute2 = *(unsigned int *)(v4 + 44);
LABEL_14:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release();
        swift_release();
        return OffsetAttribute2;
      }
    }
    else
    {
      v45 = v5;
      v46 = v35;
      v47 = v17;
      v48 = v18;
      v49 = v32;
      v50 = v2;
      v51 = v34;
      v52 = v9;
      v53 = v31;
      v54 = v30;
      v55 = OffsetAttribute2;
      v56 = v33;
      v57 = v14;
      v58 = v29;
      v59 = v28;
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      CachedEnvironment.AnimatedFrame.init(inputs:pixelLength:environment:)(&v44, v20, (uint64_t)&v36);
      v22 = v37;
      v21 = v38;
      v23 = v39;
      v24 = v43;
      v25 = v39 | ((unint64_t)v40 << 32);
      v26 = v41 | ((unint64_t)v42 << 32);
      *(_OWORD *)(v4 + 16) = v36;
      *(_QWORD *)(v4 + 32) = v22;
      *(_QWORD *)(v4 + 40) = v21;
      *(_QWORD *)(v4 + 48) = v25;
      *(_QWORD *)(v4 + 56) = v26;
      *(_WORD *)(v4 + 64) = v24;
      if (v23 != 1)
      {
        OffsetAttribute2 = HIDWORD(v21);
        goto LABEL_14;
      }
    }
    OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
    *(_DWORD *)(v4 + 44) = OffsetAttribute2;
    *(_BYTE *)(v4 + 48) = 0;
    goto LABEL_14;
  }
  return OffsetAttribute2;
}

uint64_t CachedEnvironment.animatedSize(for:)(uint64_t *a1)
{
  uint64_t v1;
  int v2;
  uint64_t OffsetAttribute2;
  uint64_t v4;
  int v5;
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  uint64_t KeyPath;
  int v20;
  uint64_t v21;
  unsigned __int8 v22;
  unint64_t v23;
  unint64_t v24;
  __int128 v25;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  _OWORD v35[2];
  unsigned __int8 v36;
  unsigned int v37;
  unsigned __int8 v38;
  unsigned int v39;
  unsigned __int8 v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  int v44;
  int v45;
  int v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  int v51;
  int v52;
  int v53;
  int v54;
  int v55;
  int v56;

  v2 = *((_DWORD *)a1 + 9);
  OffsetAttribute2 = *((unsigned int *)a1 + 18);
  if ((v2 & 0x20) != 0)
  {
    v4 = v1;
    v5 = *((_DWORD *)a1 + 2);
    v6 = a1[2];
    v7 = *((_DWORD *)a1 + 7);
    v8 = *((_DWORD *)a1 + 8);
    v10 = a1[5];
    v9 = a1[6];
    v11 = *((_DWORD *)a1 + 14);
    v12 = *((_DWORD *)a1 + 15);
    v14 = *((_DWORD *)a1 + 16);
    v13 = *((_DWORD *)a1 + 17);
    v15 = *((_DWORD *)a1 + 19);
    v16 = *((_DWORD *)a1 + 20);
    v17 = *((_DWORD *)a1 + 6);
    v41 = *a1;
    v42 = v5;
    v43 = v6;
    v44 = v17;
    v45 = v7;
    v31 = v11;
    v32 = v8;
    v46 = v8;
    v47 = v2;
    v48 = v10;
    v49 = v9;
    v50 = v11;
    v51 = v12;
    v29 = v15;
    v30 = v12;
    v52 = v14;
    v53 = v13;
    v27 = v13;
    v28 = v16;
    v54 = OffsetAttribute2;
    v55 = v15;
    v56 = v16;
    swift_retain();
    v34 = v6;
    swift_retain();
    v33 = v10;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v18 = _ViewInputs.geometryTransaction()();
    KeyPath = swift_getKeyPath();
    v20 = specialized CachedEnvironment.attribute<A>(keyPath:)(KeyPath);
    swift_release();
    if ((*(_BYTE *)(v4 + 65) & 1) == 0
      && v14 == *(_DWORD *)(v4 + 16)
      && (_DWORD)OffsetAttribute2 == *(_DWORD *)(v4 + 20)
      && v20 == *(_DWORD *)(v4 + 24)
      && v5 == *(_DWORD *)(v4 + 28)
      && v18 == *(_DWORD *)(v4 + 32)
      && v17 == *(_DWORD *)(v4 + 36))
    {
      if ((*(_BYTE *)(v4 + 56) & 1) == 0)
      {
        OffsetAttribute2 = *(unsigned int *)(v4 + 52);
LABEL_13:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release();
        swift_release();
        return OffsetAttribute2;
      }
    }
    else
    {
      v42 = v5;
      v43 = v34;
      v44 = v17;
      v45 = v18;
      v46 = v32;
      v47 = v2;
      v48 = v33;
      v49 = v9;
      v50 = v31;
      v51 = v30;
      v52 = v14;
      v53 = v27;
      v54 = OffsetAttribute2;
      v55 = v29;
      v56 = v28;
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      CachedEnvironment.AnimatedFrame.init(inputs:pixelLength:environment:)(&v41, v20, (uint64_t)v35);
      OffsetAttribute2 = v37;
      v21 = v38;
      v22 = v40;
      v23 = v36 | ((unint64_t)v37 << 32);
      v24 = v38 | ((unint64_t)v39 << 32);
      v25 = v35[1];
      *(_OWORD *)(v4 + 16) = v35[0];
      *(_OWORD *)(v4 + 32) = v25;
      *(_QWORD *)(v4 + 48) = v23;
      *(_QWORD *)(v4 + 56) = v24;
      *(_WORD *)(v4 + 64) = v22;
      if (v21 != 1)
        goto LABEL_13;
    }
    OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
    *(_DWORD *)(v4 + 52) = OffsetAttribute2;
    *(_BYTE *)(v4 + 56) = 0;
    goto LABEL_13;
  }
  return OffsetAttribute2;
}

uint64_t CachedEnvironment.animatedCGSize(for:)(uint64_t *a1)
{
  uint64_t v1;
  int v2;
  int v3;
  uint64_t v5;
  int v6;
  uint64_t v7;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  uint64_t KeyPath;
  int v21;
  uint64_t OffsetAttribute2;
  int v23;
  unint64_t v24;
  unint64_t v25;
  __int128 v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  _OWORD v35[2];
  unsigned __int8 v36;
  unsigned int v37;
  unsigned __int8 v38;
  unsigned int v39;
  unsigned __int8 v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  int v44;
  int v45;
  int v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  int v51;
  int v52;
  int v53;
  int v54;
  int v55;
  int v56;

  v2 = *((_DWORD *)a1 + 9);
  v3 = *((_DWORD *)a1 + 18);
  if ((v2 & 0x20) == 0)
    return AGGraphCreateOffsetAttribute2();
  v5 = v1;
  v6 = *((_DWORD *)a1 + 2);
  v7 = a1[2];
  v8 = *((_DWORD *)a1 + 7);
  v9 = *((_DWORD *)a1 + 8);
  v11 = a1[5];
  v10 = a1[6];
  v12 = *((_DWORD *)a1 + 14);
  v13 = *((_DWORD *)a1 + 15);
  v15 = *((_DWORD *)a1 + 16);
  v14 = *((_DWORD *)a1 + 17);
  v16 = *((_DWORD *)a1 + 19);
  v17 = *((_DWORD *)a1 + 20);
  v18 = *((_DWORD *)a1 + 6);
  v41 = *a1;
  v42 = v6;
  v43 = v7;
  v44 = v18;
  v45 = v8;
  v31 = v12;
  v32 = v9;
  v46 = v9;
  v47 = v2;
  v48 = v11;
  v49 = v10;
  v50 = v12;
  v51 = v13;
  v29 = v16;
  v30 = v13;
  v52 = v15;
  v53 = v14;
  v27 = v14;
  v28 = v17;
  v54 = v3;
  v55 = v16;
  v56 = v17;
  swift_retain();
  v34 = v7;
  swift_retain();
  v33 = v11;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v19 = _ViewInputs.geometryTransaction()();
  KeyPath = swift_getKeyPath();
  v21 = specialized CachedEnvironment.attribute<A>(keyPath:)(KeyPath);
  swift_release();
  if ((*(_BYTE *)(v5 + 65) & 1) != 0
    || v15 != *(_DWORD *)(v5 + 16)
    || v3 != *(_DWORD *)(v5 + 20)
    || v21 != *(_DWORD *)(v5 + 24)
    || v6 != *(_DWORD *)(v5 + 28)
    || v19 != *(_DWORD *)(v5 + 32)
    || v18 != *(_DWORD *)(v5 + 36))
  {
    v42 = v6;
    v43 = v34;
    v44 = v18;
    v45 = v19;
    v46 = v32;
    v47 = v2;
    v48 = v33;
    v49 = v10;
    v50 = v31;
    v51 = v30;
    v52 = v15;
    v53 = v27;
    v54 = v3;
    v55 = v29;
    v56 = v28;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    CachedEnvironment.AnimatedFrame.init(inputs:pixelLength:environment:)(&v41, v21, (uint64_t)v35);
    OffsetAttribute2 = v39;
    v23 = v40;
    v24 = v36 | ((unint64_t)v37 << 32);
    v25 = v38 | ((unint64_t)v39 << 32);
    v26 = v35[1];
    *(_OWORD *)(v5 + 16) = v35[0];
    *(_OWORD *)(v5 + 32) = v26;
    *(_QWORD *)(v5 + 48) = v24;
    *(_QWORD *)(v5 + 56) = v25;
    *(_WORD *)(v5 + 64) = v23;
    if (v23 != 1)
      goto LABEL_14;
LABEL_13:
    OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
    *(_DWORD *)(v5 + 60) = OffsetAttribute2;
    *(_BYTE *)(v5 + 64) = 0;
    goto LABEL_14;
  }
  if ((*(_BYTE *)(v5 + 64) & 1) != 0)
    goto LABEL_13;
  OffsetAttribute2 = *(unsigned int *)(v5 + 60);
LABEL_14:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return OffsetAttribute2;
}

uint64_t CachedEnvironment.resolvedShapeStyles(for:role:mode:)(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  unsigned int *v3;
  unsigned int *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  id v15;
  void *v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char v26;
  uint64_t v27;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v29;
  uint64_t v30;

  v4 = v3;
  v6 = *(unsigned int *)(a1 + 8);
  v7 = *(unsigned int *)(a1 + 24);
  v8 = *(unsigned int *)(a1 + 28);
  v9 = *(_DWORD *)(a1 + 36);
  v10 = *(_QWORD *)(a1 + 48);
  v11 = *a2;
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, (unint64_t *)&lazy cache variable for type metadata for _AnyPreferenceKey<DisplayList.Key>, (uint64_t)&type metadata for DisplayList.Key, (uint64_t)&protocol witness table for DisplayList.Key, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for _AnyPreferenceKey);
  v13 = *(_QWORD *)(v10 + 16);
  if (!v13)
  {
LABEL_5:
    if (AGGraphGetCurrentAttribute() == *MEMORY[0x24BE096C0])
    {
      v15 = (id)AGSubgraphGetCurrent();
      if (!v15)
        goto LABEL_23;
      v16 = v15;
      v17 = (id)AGSubgraphGetGraph();

    }
    else
    {
      v17 = (id)AGGraphGetAttributeGraph();
    }
    if (AGGraphGetContext())
    {
      swift_retain();

      if (one-time initialization token for defaultValue != -1)
        swift_once();
      v18 = swift_bridgeObjectRetain();
      v19 = specialized GraphHost.intern<A>(_:for:id:)(v18, (Swift::UInt)&type metadata for _ShapeStyle_Pack, 0);
      swift_bridgeObjectRelease();
      swift_release();
      return v19;
    }
    __break(1u);
LABEL_23:
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  v14 = (_QWORD *)(v10 + 32);
  while (*v14 != v12)
  {
    v14 += 2;
    if (!--v13)
      goto LABEL_5;
  }
  v21 = *v4;
  v29 = *MEMORY[0x24BE096C0];
  if ((a3 & 0x100000000) != 0)
    v22 = *MEMORY[0x24BE096C0];
  else
    v22 = a3;
  v23 = v9 & 1;
  v24 = *((_QWORD *)v4 + 9);
  if (*(_QWORD *)(v24 + 16))
  {
    v25 = specialized __RawDictionaryStorage.find<A>(_:)(v21 | (v6 << 32), v8 | (v7 << 32), v22 | (v11 << 32) | (v23 << 40));
    if ((v26 & 1) != 0)
      return *(unsigned int *)(*(_QWORD *)(v24 + 56) + 4 * v25);
  }
  v27 = ResolvedShapeStyles.makeStyles()();
  if ((a3 & 0x100000000) != 0)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v30 = *((_QWORD *)v4 + 9);
    *((_QWORD *)v4 + 9) = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v27, v21 | (v6 << 32), v8 | (v7 << 32), v29 | (v11 << 32) | (v23 << 40), isUniquelyReferenced_nonNull_native);
    *((_QWORD *)v4 + 9) = v30;
    swift_bridgeObjectRelease();
  }
  return v27;
}

uint64_t key path getter for EnvironmentValues.pixelLength : EnvironmentValues@<X0>(_QWORD *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = EnvironmentValues.pixelLength.getter();
  *a1 = v3;
  return result;
}

uint64_t CachedEnvironment.environment.getter()
{
  unsigned int *v0;

  return *v0;
}

uint64_t specialized CachedEnvironment.attribute<A>(keyPath:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  unsigned int *v8;
  unint64_t v9;
  uint64_t v10;
  char v11;
  char v12;
  uint64_t OffsetAttribute2;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  _QWORD *v17;

  v3 = *(_QWORD **)(v1 + 8);
  v4 = v3[2];
  if (v4)
  {
    type metadata accessor for AnyKeyPath();
    v5 = v3[4];
    v6 = *((unsigned int *)v3 + 10);
    swift_retain_n();
    swift_bridgeObjectRetain();
    v7 = MEMORY[0x23B7C6B38](v5, a1);
    swift_release();
    if ((v7 & 1) != 0)
    {
LABEL_3:
      swift_bridgeObjectRelease();
      swift_release();
      return v6;
    }
    swift_release();
    if (v4 != 1)
    {
      v8 = (unsigned int *)(v3 + 7);
      v9 = 1;
      while (v9 < v3[2])
      {
        v6 = *v8;
        v10 = swift_retain_n();
        v11 = MEMORY[0x23B7C6B38](v10, a1);
        swift_release();
        if ((v11 & 1) != 0)
          goto LABEL_3;
        swift_release();
        ++v9;
        v8 += 4;
        if (v4 == v9)
          goto LABEL_9;
      }
      __break(1u);
      goto LABEL_19;
    }
LABEL_9:
    swift_bridgeObjectRelease();
  }
  dispatch thunk of AnyKeyPath._storedInlineOffset.getter();
  if ((v12 & 1) != 0)
  {
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    v14 = MEMORY[0x24BEE50B0];
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for Focus<EnvironmentValues, CGFloat>, (uint64_t)&type metadata for EnvironmentValues, MEMORY[0x24BEE50B0], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x24BE09650]);
    lazy protocol witness table accessor for type Focus<EnvironmentValues, RedactionReasons> and conformance Focus<A, B>(&lazy protocol witness table cache variable for type Focus<EnvironmentValues, CGFloat> and conformance Focus<A, B>, &lazy cache variable for type metadata for Focus<EnvironmentValues, CGFloat>, v14);
    OffsetAttribute2 = Attribute.init<A>(body:value:flags:update:)();
  }
  else
  {
    OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
  }
  v6 = OffsetAttribute2;
  swift_retain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
LABEL_19:
    v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3[2] + 1, 1, v3);
  v16 = v3[2];
  v15 = v3[3];
  if (v16 >= v15 >> 1)
    v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v15 > 1), v16 + 1, 1, v3);
  v3[2] = v16 + 1;
  v17 = &v3[2 * v16];
  v17[4] = a1;
  *((_DWORD *)v17 + 10) = v6;
  *(_QWORD *)(v1 + 8) = v3;
  return v6;
}

{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  unsigned int *v8;
  unint64_t v9;
  uint64_t v10;
  char v11;
  char v12;
  uint64_t OffsetAttribute2;
  unint64_t v14;
  unint64_t v15;
  _QWORD *v16;

  v3 = *(_QWORD **)(v1 + 8);
  v4 = v3[2];
  if (v4)
  {
    type metadata accessor for AnyKeyPath();
    v5 = v3[4];
    v6 = *((unsigned int *)v3 + 10);
    swift_retain_n();
    swift_bridgeObjectRetain();
    v7 = MEMORY[0x23B7C6B38](v5, a1);
    swift_release();
    if ((v7 & 1) != 0)
    {
LABEL_3:
      swift_bridgeObjectRelease();
      swift_release();
      return v6;
    }
    swift_release();
    if (v4 != 1)
    {
      v8 = (unsigned int *)(v3 + 7);
      v9 = 1;
      while (v9 < v3[2])
      {
        v6 = *v8;
        v10 = swift_retain_n();
        v11 = MEMORY[0x23B7C6B38](v10, a1);
        swift_release();
        if ((v11 & 1) != 0)
          goto LABEL_3;
        swift_release();
        ++v9;
        v8 += 4;
        if (v4 == v9)
          goto LABEL_9;
      }
      __break(1u);
      goto LABEL_19;
    }
LABEL_9:
    swift_bridgeObjectRelease();
  }
  dispatch thunk of AnyKeyPath._storedInlineOffset.getter();
  if ((v12 & 1) != 0)
  {
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for AnyShapeStyle?, (uint64_t)&type metadata for AnyShapeStyle, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1C68]);
    type metadata accessor for Focus<EnvironmentValues, AnyShapeStyle?>(0, &lazy cache variable for type metadata for Focus<EnvironmentValues, AnyShapeStyle?>, &lazy cache variable for type metadata for AnyShapeStyle?, (uint64_t)&type metadata for AnyShapeStyle);
    lazy protocol witness table accessor for type Focus<EnvironmentValues, Color?> and conformance Focus<A, B>(&lazy protocol witness table cache variable for type Focus<EnvironmentValues, AnyShapeStyle?> and conformance Focus<A, B>, &lazy cache variable for type metadata for Focus<EnvironmentValues, AnyShapeStyle?>, &lazy cache variable for type metadata for AnyShapeStyle?, (uint64_t)&type metadata for AnyShapeStyle);
    OffsetAttribute2 = Attribute.init<A>(body:value:flags:update:)();
  }
  else
  {
    OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
  }
  v6 = OffsetAttribute2;
  swift_retain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
LABEL_19:
    v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3[2] + 1, 1, v3);
  v15 = v3[2];
  v14 = v3[3];
  if (v15 >= v14 >> 1)
    v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v14 > 1), v15 + 1, 1, v3);
  v3[2] = v15 + 1;
  v16 = &v3[2 * v15];
  v16[4] = a1;
  *((_DWORD *)v16 + 10) = v6;
  *(_QWORD *)(v1 + 8) = v3;
  return v6;
}

{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  unsigned int *v8;
  unint64_t v9;
  uint64_t v10;
  char v11;
  char v12;
  uint64_t OffsetAttribute2;
  unint64_t v14;
  unint64_t v15;
  _QWORD *v16;

  v3 = *(_QWORD **)(v1 + 8);
  v4 = v3[2];
  if (v4)
  {
    type metadata accessor for AnyKeyPath();
    v5 = v3[4];
    v6 = *((unsigned int *)v3 + 10);
    swift_retain_n();
    swift_bridgeObjectRetain();
    v7 = MEMORY[0x23B7C6B38](v5, a1);
    swift_release();
    if ((v7 & 1) != 0)
    {
LABEL_3:
      swift_bridgeObjectRelease();
      swift_release();
      return v6;
    }
    swift_release();
    if (v4 != 1)
    {
      v8 = (unsigned int *)(v3 + 7);
      v9 = 1;
      while (v9 < v3[2])
      {
        v6 = *v8;
        v10 = swift_retain_n();
        v11 = MEMORY[0x23B7C6B38](v10, a1);
        swift_release();
        if ((v11 & 1) != 0)
          goto LABEL_3;
        swift_release();
        ++v9;
        v8 += 4;
        if (v4 == v9)
          goto LABEL_9;
      }
      __break(1u);
      goto LABEL_19;
    }
LABEL_9:
    swift_bridgeObjectRelease();
  }
  dispatch thunk of AnyKeyPath._storedInlineOffset.getter();
  if ((v12 & 1) != 0)
  {
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for Color?, (uint64_t)&type metadata for Color, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1C68]);
    type metadata accessor for Focus<EnvironmentValues, AnyShapeStyle?>(0, &lazy cache variable for type metadata for Focus<EnvironmentValues, Color?>, &lazy cache variable for type metadata for Color?, (uint64_t)&type metadata for Color);
    lazy protocol witness table accessor for type Focus<EnvironmentValues, Color?> and conformance Focus<A, B>(&lazy protocol witness table cache variable for type Focus<EnvironmentValues, Color?> and conformance Focus<A, B>, &lazy cache variable for type metadata for Focus<EnvironmentValues, Color?>, &lazy cache variable for type metadata for Color?, (uint64_t)&type metadata for Color);
    OffsetAttribute2 = Attribute.init<A>(body:value:flags:update:)();
  }
  else
  {
    OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
  }
  v6 = OffsetAttribute2;
  swift_retain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
LABEL_19:
    v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3[2] + 1, 1, v3);
  v15 = v3[2];
  v14 = v3[3];
  if (v15 >= v14 >> 1)
    v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v14 > 1), v15 + 1, 1, v3);
  v3[2] = v15 + 1;
  v16 = &v3[2 * v15];
  v16[4] = a1;
  *((_DWORD *)v16 + 10) = v6;
  *(_QWORD *)(v1 + 8) = v3;
  return v6;
}

{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  unsigned int *v8;
  unint64_t v9;
  uint64_t v10;
  char v11;
  char v12;
  uint64_t OffsetAttribute2;
  unint64_t v14;
  unint64_t v15;
  _QWORD *v16;

  v3 = *(_QWORD **)(v1 + 8);
  v4 = v3[2];
  if (v4)
  {
    type metadata accessor for AnyKeyPath();
    v5 = v3[4];
    v6 = *((unsigned int *)v3 + 10);
    swift_retain_n();
    swift_bridgeObjectRetain();
    v7 = MEMORY[0x23B7C6B38](v5, a1);
    swift_release();
    if ((v7 & 1) != 0)
    {
LABEL_3:
      swift_bridgeObjectRelease();
      swift_release();
      return v6;
    }
    swift_release();
    if (v4 != 1)
    {
      v8 = (unsigned int *)(v3 + 7);
      v9 = 1;
      while (v9 < v3[2])
      {
        v6 = *v8;
        v10 = swift_retain_n();
        v11 = MEMORY[0x23B7C6B38](v10, a1);
        swift_release();
        if ((v11 & 1) != 0)
          goto LABEL_3;
        swift_release();
        ++v9;
        v8 += 4;
        if (v4 == v9)
          goto LABEL_9;
      }
      __break(1u);
      goto LABEL_19;
    }
LABEL_9:
    swift_bridgeObjectRelease();
  }
  dispatch thunk of AnyKeyPath._storedInlineOffset.getter();
  if ((v12 & 1) != 0)
  {
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for Focus<EnvironmentValues, LayoutDirection>, (uint64_t)&type metadata for EnvironmentValues, (uint64_t)&type metadata for LayoutDirection, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x24BE09650]);
    lazy protocol witness table accessor for type Focus<EnvironmentValues, RedactionReasons> and conformance Focus<A, B>(&lazy protocol witness table cache variable for type Focus<EnvironmentValues, LayoutDirection> and conformance Focus<A, B>, &lazy cache variable for type metadata for Focus<EnvironmentValues, LayoutDirection>, (uint64_t)&type metadata for LayoutDirection);
    OffsetAttribute2 = Attribute.init<A>(body:value:flags:update:)();
  }
  else
  {
    OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
  }
  v6 = OffsetAttribute2;
  swift_retain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
LABEL_19:
    v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3[2] + 1, 1, v3);
  v15 = v3[2];
  v14 = v3[3];
  if (v15 >= v14 >> 1)
    v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v14 > 1), v15 + 1, 1, v3);
  v3[2] = v15 + 1;
  v16 = &v3[2 * v15];
  v16[4] = a1;
  *((_DWORD *)v16 + 10) = v6;
  *(_QWORD *)(v1 + 8) = v3;
  return v6;
}

{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  unsigned int *v8;
  unint64_t v9;
  uint64_t v10;
  char v11;
  char v12;
  uint64_t OffsetAttribute2;
  unint64_t v14;
  unint64_t v15;
  _QWORD *v16;

  v3 = *(_QWORD **)(v1 + 8);
  v4 = v3[2];
  if (v4)
  {
    type metadata accessor for AnyKeyPath();
    v5 = v3[4];
    v6 = *((unsigned int *)v3 + 10);
    swift_retain_n();
    swift_bridgeObjectRetain();
    v7 = MEMORY[0x23B7C6B38](v5, a1);
    swift_release();
    if ((v7 & 1) != 0)
    {
LABEL_3:
      swift_bridgeObjectRelease();
      swift_release();
      return v6;
    }
    swift_release();
    if (v4 != 1)
    {
      v8 = (unsigned int *)(v3 + 7);
      v9 = 1;
      while (v9 < v3[2])
      {
        v6 = *v8;
        v10 = swift_retain_n();
        v11 = MEMORY[0x23B7C6B38](v10, a1);
        swift_release();
        if ((v11 & 1) != 0)
          goto LABEL_3;
        swift_release();
        ++v9;
        v8 += 4;
        if (v4 == v9)
          goto LABEL_9;
      }
      __break(1u);
      goto LABEL_19;
    }
LABEL_9:
    swift_bridgeObjectRelease();
  }
  dispatch thunk of AnyKeyPath._storedInlineOffset.getter();
  if ((v12 & 1) != 0)
  {
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for Focus<EnvironmentValues, RedactionReasons>, (uint64_t)&type metadata for EnvironmentValues, (uint64_t)&type metadata for RedactionReasons, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x24BE09650]);
    lazy protocol witness table accessor for type Focus<EnvironmentValues, RedactionReasons> and conformance Focus<A, B>(&lazy protocol witness table cache variable for type Focus<EnvironmentValues, RedactionReasons> and conformance Focus<A, B>, &lazy cache variable for type metadata for Focus<EnvironmentValues, RedactionReasons>, (uint64_t)&type metadata for RedactionReasons);
    OffsetAttribute2 = Attribute.init<A>(body:value:flags:update:)();
  }
  else
  {
    OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
  }
  v6 = OffsetAttribute2;
  swift_retain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
LABEL_19:
    v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3[2] + 1, 1, v3);
  v15 = v3[2];
  v14 = v3[3];
  if (v15 >= v14 >> 1)
    v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v14 > 1), v15 + 1, 1, v3);
  v3[2] = v15 + 1;
  v16 = &v3[2 * v15];
  v16[4] = a1;
  *((_DWORD *)v16 + 10) = v6;
  *(_QWORD *)(v1 + 8) = v3;
  return v6;
}

{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  unsigned int *v8;
  unint64_t v9;
  uint64_t v10;
  char v11;
  char v12;
  uint64_t OffsetAttribute2;
  unint64_t v14;
  unint64_t v15;
  _QWORD *v16;

  v3 = *(_QWORD **)(v1 + 8);
  v4 = v3[2];
  if (v4)
  {
    type metadata accessor for AnyKeyPath();
    v5 = v3[4];
    v6 = *((unsigned int *)v3 + 10);
    swift_retain_n();
    swift_bridgeObjectRetain();
    v7 = MEMORY[0x23B7C6B38](v5, a1);
    swift_release();
    if ((v7 & 1) != 0)
    {
LABEL_3:
      swift_bridgeObjectRelease();
      swift_release();
      return v6;
    }
    swift_release();
    if (v4 != 1)
    {
      v8 = (unsigned int *)(v3 + 7);
      v9 = 1;
      while (v9 < v3[2])
      {
        v6 = *v8;
        v10 = swift_retain_n();
        v11 = MEMORY[0x23B7C6B38](v10, a1);
        swift_release();
        if ((v11 & 1) != 0)
          goto LABEL_3;
        swift_release();
        ++v9;
        v8 += 4;
        if (v4 == v9)
          goto LABEL_9;
      }
      __break(1u);
      goto LABEL_19;
    }
LABEL_9:
    swift_bridgeObjectRelease();
  }
  dispatch thunk of AnyKeyPath._storedInlineOffset.getter();
  if ((v12 & 1) != 0)
  {
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for Focus<EnvironmentValues, ContentTransitionEffect>, (uint64_t)&type metadata for EnvironmentValues, (uint64_t)&type metadata for ContentTransitionEffect, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x24BE09650]);
    lazy protocol witness table accessor for type Focus<EnvironmentValues, RedactionReasons> and conformance Focus<A, B>(&lazy protocol witness table cache variable for type Focus<EnvironmentValues, ContentTransitionEffect> and conformance Focus<A, B>, &lazy cache variable for type metadata for Focus<EnvironmentValues, ContentTransitionEffect>, (uint64_t)&type metadata for ContentTransitionEffect);
    OffsetAttribute2 = Attribute.init<A>(body:value:flags:update:)();
  }
  else
  {
    OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
  }
  v6 = OffsetAttribute2;
  swift_retain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
LABEL_19:
    v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3[2] + 1, 1, v3);
  v15 = v3[2];
  v14 = v3[3];
  if (v15 >= v14 >> 1)
    v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v14 > 1), v15 + 1, 1, v3);
  v3[2] = v15 + 1;
  v16 = &v3[2 * v15];
  v16[4] = a1;
  *((_DWORD *)v16 + 10) = v6;
  *(_QWORD *)(v1 + 8) = v3;
  return v6;
}

{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  char v8;
  uint64_t OffsetAttribute2;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  uint64_t v15;
  char v16;
  unsigned int *v17;
  unint64_t v18;
  uint64_t v19;
  char v20;

  v3 = *(_QWORD **)(v1 + 8);
  v4 = v3[2];
  if (v4)
  {
    type metadata accessor for AnyKeyPath();
    v5 = v3[4];
    v6 = *((unsigned int *)v3 + 10);
    swift_retain_n();
    swift_bridgeObjectRetain();
    v7 = MEMORY[0x23B7C6B38](v5, a1);
    swift_release();
    if ((v7 & 1) != 0)
    {
LABEL_3:
      swift_bridgeObjectRelease();
      swift_release();
      return v6;
    }
    swift_release();
    if (v4 != 1)
    {
      if (v3[2] < 2uLL)
        __break(1u);
      v6 = *((unsigned int *)v3 + 14);
      v15 = swift_retain_n();
      v16 = MEMORY[0x23B7C6B38](v15, a1);
      swift_release();
      if ((v16 & 1) != 0)
        goto LABEL_3;
      swift_release();
      if (v4 != 2)
      {
        v17 = (unsigned int *)(v3 + 9);
        v18 = 2;
        while (v18 < v3[2])
        {
          v6 = *v17;
          v19 = swift_retain_n();
          v20 = MEMORY[0x23B7C6B38](v19, a1);
          swift_release();
          if ((v20 & 1) != 0)
            goto LABEL_3;
          swift_release();
          ++v18;
          v17 += 4;
          if (v4 == v18)
            goto LABEL_5;
        }
        __break(1u);
        goto LABEL_23;
      }
    }
LABEL_5:
    swift_bridgeObjectRelease();
  }
  dispatch thunk of AnyKeyPath._storedInlineOffset.getter();
  if ((v8 & 1) != 0)
  {
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    v10 = MEMORY[0x24BEE1328];
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, (unint64_t *)&lazy cache variable for type metadata for Focus<EnvironmentValues, Bool>, (uint64_t)&type metadata for EnvironmentValues, MEMORY[0x24BEE1328], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x24BE09650]);
    lazy protocol witness table accessor for type Focus<EnvironmentValues, RedactionReasons> and conformance Focus<A, B>(&lazy protocol witness table cache variable for type Focus<EnvironmentValues, Bool> and conformance Focus<A, B>, (unint64_t *)&lazy cache variable for type metadata for Focus<EnvironmentValues, Bool>, v10);
    OffsetAttribute2 = Attribute.init<A>(body:value:flags:update:)();
  }
  else
  {
    OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
  }
  v6 = OffsetAttribute2;
  swift_retain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
LABEL_23:
    v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3[2] + 1, 1, v3);
  v12 = v3[2];
  v11 = v3[3];
  if (v12 >= v11 >> 1)
    v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v11 > 1), v12 + 1, 1, v3);
  v3[2] = v12 + 1;
  v13 = &v3[2 * v12];
  v13[4] = a1;
  *((_DWORD *)v13 + 10) = v6;
  *(_QWORD *)(v1 + 8) = v3;
  return v6;
}

uint64_t CachedEnvironment.attribute<A>(keyPath:)(_QWORD *a1)
{
  int *v1;
  int *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t OffsetAttribute2;
  char v10;
  unsigned int *v11;
  unint64_t v12;
  uint64_t v13;
  char v14;
  int v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  _QWORD v24[3];
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  int v29;
  _QWORD *v30;
  uint64_t v31;

  v2 = v1;
  v31 = *MEMORY[0x24BDAC8D0];
  v4 = *a1;
  v5 = *((_QWORD *)v1 + 1);
  v6 = *(_QWORD *)(v5 + 16);
  if (v6)
  {
    v7 = (_QWORD *)type metadata accessor for AnyKeyPath();
    v8 = *(_QWORD *)(v5 + 32);
    OffsetAttribute2 = *(unsigned int *)(v5 + 40);
    swift_retain_n();
    swift_bridgeObjectRetain();
    v10 = MEMORY[0x23B7C6B38](v8, a1);
    swift_release();
    if ((v10 & 1) != 0)
    {
LABEL_3:
      swift_bridgeObjectRelease();
      swift_release();
      return OffsetAttribute2;
    }
    v27 = v4;
    swift_release();
    if (v6 != 1)
    {
      v11 = (unsigned int *)(v5 + 56);
      v12 = 1;
      while (v12 < *(_QWORD *)(v5 + 16))
      {
        OffsetAttribute2 = *v11;
        v13 = swift_retain_n();
        v14 = MEMORY[0x23B7C6B38](v13, a1);
        swift_release();
        if ((v14 & 1) != 0)
          goto LABEL_3;
        swift_release();
        ++v12;
        v11 += 4;
        if (v6 == v12)
          goto LABEL_9;
      }
      __break(1u);
      goto LABEL_19;
    }
LABEL_9:
    swift_bridgeObjectRelease();
    v4 = v27;
  }
  v15 = *v2;
  v16 = dispatch thunk of AnyKeyPath._storedInlineOffset.getter();
  if ((v17 & 1) != 0)
  {
    v29 = v15;
    v30 = a1;
    MEMORY[0x24BDAC7A8](v16);
    v24[2] = *(_QWORD *)(*MEMORY[0x24BEE46A8] + v4 + 8);
    v25 = type metadata accessor for Focus();
    v26 = MEMORY[0x23B7C9C04](MEMORY[0x24BE09660], v25);
    v18 = type metadata accessor for Attribute();
    swift_retain();
    _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v29, (uint64_t)partial apply for closure #1 in Attribute.init<A>(_:), (uint64_t)v24, v25, MEMORY[0x24BEE4078], v18, MEMORY[0x24BEE40A8], v19);
    swift_release();
    OffsetAttribute2 = v28;
  }
  else
  {
    OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
  }
  v7 = (_QWORD *)*((_QWORD *)v2 + 1);
  swift_retain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
LABEL_19:
    v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v7[2] + 1, 1, v7);
  v21 = v7[2];
  v20 = v7[3];
  if (v21 >= v20 >> 1)
    v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v20 > 1), v21 + 1, 1, v7);
  v7[2] = v21 + 1;
  v22 = &v7[2 * v21];
  v22[4] = a1;
  *((_DWORD *)v22 + 10) = OffsetAttribute2;
  *((_QWORD *)v2 + 1) = v7;
  return OffsetAttribute2;
}

uint64_t CachedEnvironment.AnimatedFrame.init(inputs:pixelLength:environment:)@<X0>(_DWORD *a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  uint64_t result;

  v5 = a1[2];
  v6 = a1[6];
  v7 = a1[7];
  v8 = a1[16];
  v9 = a1[18];
  if ((a1[9] & 0x400) != 0)
  {
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    lazy protocol witness table accessor for type AnimatableFrameAttributeVFD and conformance AnimatableFrameAttributeVFD();
  }
  else
  {
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    lazy protocol witness table accessor for type AnimatableFrameAttribute and conformance AnimatableFrameAttribute();
  }
  v10 = Attribute.init<A>(body:value:flags:update:)();
  AGGraphSetFlags();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  result = swift_release();
  *(_DWORD *)a3 = v8;
  *(_DWORD *)(a3 + 4) = v9;
  *(_DWORD *)(a3 + 8) = a2;
  *(_DWORD *)(a3 + 12) = v5;
  *(_DWORD *)(a3 + 16) = v7;
  *(_DWORD *)(a3 + 20) = v6;
  *(_DWORD *)(a3 + 24) = v10;
  *(_DWORD *)(a3 + 28) = 0;
  *(_BYTE *)(a3 + 32) = 1;
  *(_DWORD *)(a3 + 36) = 0;
  *(_BYTE *)(a3 + 40) = 1;
  *(_DWORD *)(a3 + 44) = 0;
  *(_BYTE *)(a3 + 48) = 1;
  return result;
}

uint64_t CachedEnvironment.AnimatedFrame.animatedPosition()()
{
  uint64_t v0;
  uint64_t result;

  if (*(_BYTE *)(v0 + 32) != 1)
    return *(unsigned int *)(v0 + 28);
  result = AGGraphCreateOffsetAttribute2();
  *(_DWORD *)(v0 + 28) = result;
  *(_BYTE *)(v0 + 32) = 0;
  return result;
}

uint64_t CachedEnvironment.AnimatedFrame.animatedSize()()
{
  uint64_t v0;
  uint64_t result;

  if (*(_BYTE *)(v0 + 40) != 1)
    return *(unsigned int *)(v0 + 36);
  result = AGGraphCreateOffsetAttribute2();
  *(_DWORD *)(v0 + 36) = result;
  *(_BYTE *)(v0 + 40) = 0;
  return result;
}

uint64_t CachedEnvironment.AnimatedFrame.animatedCGSize()()
{
  uint64_t v0;
  uint64_t result;

  if (*(_BYTE *)(v0 + 48) != 1)
    return *(unsigned int *)(v0 + 44);
  result = AGGraphCreateOffsetAttribute2();
  *(_DWORD *)(v0 + 44) = result;
  *(_BYTE *)(v0 + 48) = 0;
  return result;
}

int32x2_t CachedEnvironment.AnimatedFrame.init(inputs:position:size:pixelLength:animatedFrame:environment:)@<D0>(int32x2_t *a1@<X0>, __int32 a2@<W1>, __int32 a3@<W2>, __int32 a4@<W3>, __int32 a5@<W4>, int32x2_t *a6@<X8>)
{
  __int32 v12;
  int32x2_t result;

  v12 = a1[1].i32[0];
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  a6->i32[0] = a2;
  a6->i32[1] = a3;
  a6[1].i32[0] = a4;
  a6[1].i32[1] = v12;
  result = vrev64_s32(a1[3]);
  a6[2] = result;
  a6[3].i32[0] = a5;
  a6[3].i32[1] = 0;
  a6[4].i8[0] = 1;
  a6[4].i32[1] = 0;
  a6[5].i8[0] = 1;
  a6[5].i32[1] = 0;
  a6[6].i8[0] = 1;
  return result;
}

uint64_t ResolvedShapeStyles.makeStyles()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  type metadata accessor for PropertyList.Tracker();
  v0 = swift_allocObject();
  type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for AtomicBuffer<TrackerData>, (uint64_t)&type metadata for TrackerData, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for AtomicBuffer);
  v1 = swift_allocObject();
  *(_DWORD *)(v1 + 16) = 0;
  v2 = MEMORY[0x24BEE4B00];
  *(_QWORD *)(v1 + 24) = 0;
  *(_QWORD *)(v1 + 32) = v2;
  v3 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v1 + 40) = v2;
  *(_QWORD *)(v1 + 48) = v3;
  *(_BYTE *)(v1 + 56) = 0;
  *(_QWORD *)(v0 + 16) = v1;
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for ShapeStyleResolver<AnyShapeStyle>, (uint64_t)&type metadata for AnyShapeStyle, (uint64_t)&protocol witness table for AnyShapeStyle, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ShapeStyleResolver);
  lazy protocol witness table accessor for type ShapeStyleResolver<AnyShapeStyle> and conformance ShapeStyleResolver<A>();
  v4 = Attribute.init<A>(body:value:flags:update:)();
  swift_release();
  swift_bridgeObjectRelease();
  AGGraphSetFlags();
  return v4;
}

uint64_t CachedEnvironment.AnimatedFrame.position.getter()
{
  unsigned int *v0;

  return *v0;
}

uint64_t CachedEnvironment.AnimatedFrame.size.getter()
{
  uint64_t v0;

  return *(unsigned int *)(v0 + 4);
}

uint64_t CachedEnvironment.AnimatedFrame.pixelLength.getter()
{
  uint64_t v0;

  return *(unsigned int *)(v0 + 8);
}

uint64_t CachedEnvironment.AnimatedFrame.time.getter()
{
  uint64_t v0;

  return *(unsigned int *)(v0 + 12);
}

uint64_t CachedEnvironment.AnimatedFrame.transaction.getter()
{
  uint64_t v0;

  return *(unsigned int *)(v0 + 16);
}

uint64_t CachedEnvironment.AnimatedFrame.viewPhase.getter()
{
  uint64_t v0;

  return *(unsigned int *)(v0 + 20);
}

uint64_t CachedEnvironment.AnimatedFrame.animatedFrame.getter()
{
  uint64_t v0;

  return *(unsigned int *)(v0 + 24);
}

Swift::Int ResolvedShapeStyles.hashValue.getter()
{
  uint64_t v0;
  Swift::UInt32 v1;
  Swift::UInt32 v2;
  Swift::UInt32 v3;
  Swift::UInt32 v4;
  Swift::UInt32 v5;
  Swift::UInt v6;
  Swift::UInt8 v7;

  v1 = *(_DWORD *)v0;
  v2 = *(_DWORD *)(v0 + 4);
  v3 = *(_DWORD *)(v0 + 8);
  v4 = *(_DWORD *)(v0 + 12);
  v5 = *(_DWORD *)(v0 + 16);
  v6 = *(unsigned __int8 *)(v0 + 20);
  v7 = *(_BYTE *)(v0 + 21);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v7);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance ResolvedShapeStyles()
{
  uint64_t v0;
  Swift::UInt32 v1;
  Swift::UInt32 v2;
  Swift::UInt32 v3;
  Swift::UInt32 v4;
  Swift::UInt v5;
  Swift::UInt8 v6;

  v1 = *(_DWORD *)(v0 + 4);
  v2 = *(_DWORD *)(v0 + 8);
  v3 = *(_DWORD *)(v0 + 12);
  v4 = *(_DWORD *)(v0 + 16);
  v5 = *(unsigned __int8 *)(v0 + 20);
  v6 = *(_BYTE *)(v0 + 21);
  Hasher._combine(_:)(*(_DWORD *)v0);
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v6);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ResolvedShapeStyles()
{
  uint64_t v0;
  Swift::UInt32 v1;
  Swift::UInt32 v2;
  Swift::UInt32 v3;
  Swift::UInt32 v4;
  Swift::UInt32 v5;
  Swift::UInt v6;
  Swift::UInt8 v7;

  v1 = *(_DWORD *)v0;
  v2 = *(_DWORD *)(v0 + 4);
  v3 = *(_DWORD *)(v0 + 8);
  v4 = *(_DWORD *)(v0 + 12);
  v5 = *(_DWORD *)(v0 + 16);
  v6 = *(unsigned __int8 *)(v0 + 20);
  v7 = *(_BYTE *)(v0 + 21);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v7);
  return Hasher._finalize()();
}

uint64_t sub_234FA8104@<X0>(_QWORD *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = EnvironmentValues.pixelLength.getter();
  *a1 = v3;
  return result;
}

unint64_t lazy protocol witness table accessor for type AnimatableFrameAttribute and conformance AnimatableFrameAttribute()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AnimatableFrameAttribute and conformance AnimatableFrameAttribute;
  if (!lazy protocol witness table cache variable for type AnimatableFrameAttribute and conformance AnimatableFrameAttribute)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for AnimatableFrameAttribute, &type metadata for AnimatableFrameAttribute);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnimatableFrameAttribute and conformance AnimatableFrameAttribute);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AnimatableFrameAttributeVFD and conformance AnimatableFrameAttributeVFD()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AnimatableFrameAttributeVFD and conformance AnimatableFrameAttributeVFD;
  if (!lazy protocol witness table cache variable for type AnimatableFrameAttributeVFD and conformance AnimatableFrameAttributeVFD)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for AnimatableFrameAttributeVFD, &type metadata for AnimatableFrameAttributeVFD);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnimatableFrameAttributeVFD and conformance AnimatableFrameAttributeVFD);
  }
  return result;
}

uint64_t destroy for CachedEnvironment()
{
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for CachedEnvironment(uint64_t a1, uint64_t a2)
{
  __int128 v3;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_WORD *)(a1 + 64) = *(_WORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for CachedEnvironment(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = *(_OWORD *)(a2 + 16);
  v5 = *(_OWORD *)(a2 + 32);
  v6 = *(_OWORD *)(a2 + 48);
  *(_WORD *)(a1 + 64) = *(_WORD *)(a2 + 64);
  *(_OWORD *)(a1 + 32) = v5;
  *(_OWORD *)(a1 + 48) = v6;
  *(_OWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for CachedEnvironment(uint64_t a1, uint64_t a2)
{
  __int128 v4;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v4;
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_WORD *)(a1 + 64) = *(_WORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for CachedEnvironment(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 80))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for CachedEnvironment(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 80) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 80) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for CachedEnvironment()
{
  return &type metadata for CachedEnvironment;
}

__n128 __swift_memcpy49_4(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

ValueMetadata *type metadata accessor for CachedEnvironment.AnimatedFrame()
{
  return &type metadata for CachedEnvironment.AnimatedFrame;
}

ValueMetadata *type metadata accessor for CachedEnvironment.PlatformCache()
{
  return &type metadata for CachedEnvironment.PlatformCache;
}

__n128 __swift_memcpy22_4(uint64_t a1, uint64_t a2)
{
  __n128 result;

  result = *(__n128 *)a2;
  *(_QWORD *)(a1 + 14) = *(_QWORD *)(a2 + 14);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t getEnumTagSinglePayload for ResolvedShapeStyles(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 22))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 21);
  v4 = v3 >= 2;
  v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for ResolvedShapeStyles(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_WORD *)(result + 20) = 0;
    *(_DWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 255;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 22) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 22) = 0;
    if (a2)
      *(_BYTE *)(result + 21) = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for ResolvedShapeStyles()
{
  return &type metadata for ResolvedShapeStyles;
}

uint64_t initializeBufferWithCopyOfBuffer for CachedEnvironment.Item(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for CachedEnvironment.Item(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  return a1;
}

uint64_t assignWithTake for CachedEnvironment.Item(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_release();
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  return a1;
}

ValueMetadata *type metadata accessor for CachedEnvironment.Item()
{
  return &type metadata for CachedEnvironment.Item;
}

uint64_t specialized static ResolvedShapeStyles.== infix(_:_:)(int32x4_t *a1, int32x4_t *a2)
{
  return vminv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(vmovn_s32(vceqq_s32(*a1, *a2)), 0xFuLL))) & (a1[1].i32[0] == a2[1].i32[0]) & (a1[1].u8[4] == a2[1].u8[4]) & ~(a2[1].u8[5] ^ a1[1].u8[5]);
}

uint64_t lazy protocol witness table accessor for type Focus<EnvironmentValues, RedactionReasons> and conformance Focus<A, B>(unint64_t *a1, unint64_t *a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, a2, (uint64_t)&type metadata for EnvironmentValues, a3, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x24BE09650]);
    result = MEMORY[0x23B7C9C04](MEMORY[0x24BE09658], v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type Focus<EnvironmentValues, Color?> and conformance Focus<A, B>(unint64_t *a1, unint64_t *a2, unint64_t *a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    type metadata accessor for Focus<EnvironmentValues, AnyShapeStyle?>(255, a2, a3, a4);
    result = MEMORY[0x23B7C9C04](MEMORY[0x24BE09658], v6);
    atomic_store(result, a1);
  }
  return result;
}

void type metadata accessor for Focus<EnvironmentValues, AnyShapeStyle?>(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t a4)
{
  unint64_t v5;
  uint64_t v6;

  if (!*a2)
  {
    type metadata accessor for MutableBox<CachedEnvironment>(255, a3, a4, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1C68]);
    v5 = type metadata accessor for Focus();
    if (!v6)
      atomic_store(v5, a2);
  }
}

unint64_t lazy protocol witness table accessor for type ShapeStyleResolver<AnyShapeStyle> and conformance ShapeStyleResolver<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type ShapeStyleResolver<AnyShapeStyle> and conformance ShapeStyleResolver<A>;
  if (!lazy protocol witness table cache variable for type ShapeStyleResolver<AnyShapeStyle> and conformance ShapeStyleResolver<A>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for ShapeStyleResolver<AnyShapeStyle>, (uint64_t)&type metadata for AnyShapeStyle, (uint64_t)&protocol witness table for AnyShapeStyle, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ShapeStyleResolver);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ShapeStyleResolver<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ShapeStyleResolver<AnyShapeStyle> and conformance ShapeStyleResolver<A>);
  }
  return result;
}

__n128 Text.Effect.DrawableFragment.subscript.getter@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v5;
  unint64_t v6;
  Swift::UInt64 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __n128 result;
  __int128 v14;
  _QWORD v15[2];
  __int128 v16;
  __n128 v17;
  uint64_t v18;

  v5 = *(_QWORD *)(v3 + 8);
  v6 = *(_QWORD *)(v3 + 32);
  v7 = specialized Text.Effect.Key.key<A>(for:state:)(*(_QWORD *)(a2 + 16), a1, v5, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24));
  v9 = v8;
  v10 = swift_retain();
  specialized Text.Effect.BaseFragment.init(keyframes:key:fragment:)(v10, v7, v9, v6, v15);
  v11 = v15[1];
  v12 = v18;
  result = v17;
  v14 = v16;
  *(_QWORD *)a3 = v15[0];
  *(_QWORD *)(a3 + 8) = v11;
  *(_OWORD *)(a3 + 16) = v14;
  *(__n128 *)(a3 + 32) = result;
  *(_QWORD *)(a3 + 48) = v12;
  return result;
}

BOOL Text.Effect.BaseFragment.coversAllParagraphs.getter()
{
  uint64_t *v0;
  Swift::UInt64 v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  char v6;
  char v7;

  v2 = *v0;
  v1 = v0[1];
  v3 = v0[2];
  swift_beginAccess();
  v4 = *(_QWORD *)(v2 + 48);
  if (*(_QWORD *)(v4 + 16))
  {
    swift_retain();
    v5 = specialized __RawDictionaryStorage.find<A>(_:)(v1, v3);
    if ((v6 & 1) != 0)
    {
      v7 = *(_BYTE *)(*(_QWORD *)(v4 + 56) + 16 * v5 + 8);
      swift_endAccess();
      swift_release();
      return (v7 & 2) == 0;
    }
    swift_release();
  }
  swift_endAccess();
  return 0;
}

uint64_t Text.Effect.DrawableFragment.range.getter()
{
  uint64_t v0;
  uint64_t result;
  uint64_t v2;

  result = *(_QWORD *)(v0 + 48);
  v2 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v0 + 24) + 96) + 16);
  if (__OFADD__(result, v2))
  {
    __break(1u);
    goto LABEL_5;
  }
  if (result + v2 < result)
LABEL_5:
    __break(1u);
  return result;
}

__n128 Text.Effect.DrawableFragment.init(keyframes:key:fragment:)@<Q0>(uint64_t a1@<X0>, Swift::UInt64 a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  __n128 result;
  __int128 v9;
  _QWORD v10[2];
  __int128 v11;
  __n128 v12;
  uint64_t v13;

  specialized Text.Effect.BaseFragment.init(keyframes:key:fragment:)(a1, a2, a3, a4, v10);
  v6 = v10[1];
  v7 = v13;
  result = v12;
  v9 = v11;
  *(_QWORD *)a5 = v10[0];
  *(_QWORD *)(a5 + 8) = v6;
  *(_OWORD *)(a5 + 16) = v9;
  *(__n128 *)(a5 + 32) = result;
  *(_QWORD *)(a5 + 48) = v7;
  return result;
}

uint64_t Text.Effect.BaseFragment.typographicBounds(for:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v5;
  int64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  unint64_t v11;
  uint64_t v13;
  double v14;
  double v15;
  double v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  double v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  double v29;
  void *v30;
  CFIndex v31;
  uint64_t v32;
  id v33;
  double v34;
  double v35;
  double TypographicBounds;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  CFIndex v42;
  const __CTLine *v43;
  const __CTRun *v44;
  BOOL v45;
  CFIndex v46;
  const __CTRun *v47;
  CGFloat v48;
  CGFloat v49;
  CGFloat v50;
  double MinX;
  double MaxX;
  double v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char v61;
  double v62;
  double v63;
  double v64;
  double v65;
  double v66;
  CGPoint originsBuffer;
  CGFloat leading;
  CGFloat descent;
  CGFloat ascent;
  CGPoint buffer;
  uint64_t v72;
  CFRange v73;
  CFRange v74;
  CFRange v75;
  CGRect v76;
  CGRect v77;

  v72 = *MEMORY[0x24BDAC8D0];
  v5 = *(_QWORD *)(v3 + 48);
  v6 = a1 - v5;
  if (__OFSUB__(a1, v5))
    goto LABEL_49;
  v8 = a2 - v5;
  if (__OFSUB__(a2, v5))
  {
LABEL_50:
    __break(1u);
    goto LABEL_51;
  }
  if (v8 < v6)
  {
LABEL_51:
    __break(1u);
    goto LABEL_52;
  }
  if (v6 < 0)
  {
LABEL_52:
    __break(1u);
    goto LABEL_53;
  }
  v9 = *(_QWORD *)(v3 + 24);
  result = *(_QWORD *)(v9 + 96);
  v11 = *(_QWORD *)(result + 16);
  if (v11 < v6 || (uint64_t)v11 < v8)
LABEL_53:
    __break(1u);
  if (v6 == v8)
  {
    v13 = *(_QWORD *)(v9 + 64);
    v14 = 0.0;
    v15 = 0.0;
    v16 = 0.0;
    goto LABEL_42;
  }
  v17 = swift_bridgeObjectRetain();
  v18 = v5 - a2;
  v19 = 1;
  v16 = 0.0;
  v20 = 48;
  v15 = 0.0;
  v14 = 0.0;
  v21 = v6;
  v22 = 0.0;
  v63 = 0.0;
LABEL_12:
  v23 = v21 + 1;
  v24 = v20 + 24 * v21;
  do
  {
    if (v21 < v6 || v23 - 1 >= v8)
    {
      __break(1u);
LABEL_46:
      __break(1u);
LABEL_47:
      __break(1u);
LABEL_48:
      __break(1u);
LABEL_49:
      __break(1u);
      goto LABEL_50;
    }
    v25 = *(_QWORD *)(v17 + v24);
    v26 = *(_QWORD *)(v25 + 16);
    if (v26)
    {
      v55 = v20;
      v57 = v17;
      v58 = v8;
      v59 = v6;
      v60 = v9;
      swift_bridgeObjectRetain();
      v56 = v18;
      v54 = v18 + v23;
      v27 = v25 + 48;
      v28 = v19;
      do
      {
        v62 = v22;
        v30 = *(void **)(v27 - 16);
        v31 = *(_QWORD *)(v27 + 32);
        v32 = *(_QWORD *)(v27 + 40);
        v65 = v16;
        v66 = v14;
        v64 = v15;
        if (v31 == v32)
        {
          swift_retain();
          v33 = v30;
          v34 = 0.0;
          v35 = 0.0;
          TypographicBounds = 0.0;
          v37 = 0.0;
          v38 = 0.0;
          v39 = 0.0;
        }
        else
        {
          v61 = v28;
          v40 = *(double *)v27;
          v41 = *(double *)(v27 + 8);
          v42 = *(_QWORD *)(v27 - 8);
          swift_retain_n();
          v43 = v30;
          v44 = (id)_CTLineGetRunAtIndex(v43, v42);
          v45 = __OFSUB__(v32, v31);
          v46 = v32 - v31;
          if (v45)
            goto LABEL_47;
          v47 = v44;
          buffer.x = 0.0;
          buffer.y = 0.0;
          descent = 0.0;
          ascent = 0.0;
          originsBuffer.y = 0.0;
          leading = 0.0;
          originsBuffer.x = 0.0;
          v73.location = v31;
          v73.length = 1;
          CTRunGetPositions(v44, v73, &buffer);
          v74.location = v31;
          v74.length = 1;
          CTRunGetBaseAdvancesAndOrigins(v47, v74, 0, &originsBuffer);
          v48 = buffer.x - originsBuffer.x;
          v49 = buffer.y - originsBuffer.y;
          v75.location = v31;
          v75.length = v46;
          TypographicBounds = CTRunGetTypographicBounds(v47, v75, &ascent, &descent, &leading);
          swift_release();

          v37 = ascent;
          v38 = fabs(descent);
          v39 = leading;
          v34 = v40 + v48;
          v35 = v41 - v49;
          v28 = v61;
        }
        v50 = v35 - v37;
        v76.origin.x = v34;
        v76.origin.y = v50;
        v76.size.width = TypographicBounds;
        v76.size.height = v37 + v38;
        MinX = CGRectGetMinX(v76);
        v77.origin.x = v34;
        v77.origin.y = v50;
        v77.size.width = TypographicBounds;
        v77.size.height = v37 + v38;
        MaxX = CGRectGetMaxX(v77);
        swift_release();

        if (MinX > MaxX)
          goto LABEL_46;
        if ((v28 & 1) != 0)
        {
          v29 = MaxX;
          v22 = MinX;
          v14 = v66;
        }
        else
        {
          v22 = v62;
          v29 = v63;
          if (MinX < v62)
            v22 = MinX;
          if (MaxX >= v63)
            v29 = MaxX;
          v14 = v66;
          if (v22 > v29)
            goto LABEL_48;
        }
        v63 = v29;
        v28 = 0;
        v27 += 64;
        if (v14 <= v37)
          v14 = v37;
        v15 = v64;
        v16 = v65;
        if (v64 <= v38)
          v15 = v38;
        if (v65 <= v39)
          v16 = v39;
        --v26;
      }
      while (v26);
      swift_bridgeObjectRelease();
      v19 = 0;
      v21 = v23;
      v9 = v60;
      v8 = v58;
      v6 = v59;
      v18 = v56;
      v17 = v57;
      v20 = v55;
      if (!v54)
      {
        result = swift_bridgeObjectRelease();
        v13 = *(_QWORD *)(v60 + 64);
LABEL_43:
        v53 = v63 - v22;
        goto LABEL_44;
      }
      goto LABEL_12;
    }
    ++v23;
    v24 += 24;
  }
  while (v18 + v23 != 1);
  result = swift_bridgeObjectRelease();
  v13 = *(_QWORD *)(v9 + 64);
  if ((v19 & 1) == 0)
    goto LABEL_43;
LABEL_42:
  v22 = *(double *)(v9 + 56);
  v53 = 0.0;
LABEL_44:
  *(double *)a3 = v22;
  *(_QWORD *)(a3 + 8) = v13;
  *(double *)(a3 + 16) = v53;
  *(double *)(a3 + 24) = v14;
  *(double *)(a3 + 32) = v15;
  *(double *)(a3 + 40) = v16;
  return result;
}

double Text.Effect.BaseFragment.init(keyframes:key:fragment:)@<D0>(uint64_t a1@<X0>, Swift::UInt64 a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X8>)
{
  __int128 v6;
  double result;
  _OWORD v8[2];
  __int128 v9;
  uint64_t v10;

  specialized Text.Effect.BaseFragment.init(keyframes:key:fragment:)(a1, a2, a3, a4, v8);
  v6 = v8[1];
  *(_OWORD *)a5 = v8[0];
  *(_OWORD *)(a5 + 16) = v6;
  result = *(double *)&v9;
  *(_OWORD *)(a5 + 32) = v9;
  *(_QWORD *)(a5 + 48) = v10;
  return result;
}

uint64_t Text.Effect.DrawableFragment.content.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t *v1;

  outlined retain of Text.Effect.DrawableFragment<SmallTextEffect>((uint64_t)v1);
  return Text.Effect.DrawableContent.init(fragment:)(v1, a1);
}

uint64_t Text.Effect.DrawableFragment.fragmentIndex.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 32);
}

double Text.Effect.DrawableFragment.width.getter()
{
  uint64_t v0;

  return CGRectGetWidth(*(CGRect *)(*(_QWORD *)(v0 + 24) + 120));
}

double Text.Effect.DrawableFragment.lineBreakingFragment.getter@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  double v8;
  uint64_t v9;
  char *v10;
  __n128 v11;
  __int128 v12;
  double result;
  uint64_t v14;
  _OWORD v15[2];
  __int128 v16;
  uint64_t v17;

  v4 = *(_QWORD *)(a1 + 16);
  v5 = *(_QWORD *)(a1 + 24);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v7 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v8 = MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v10 = (char *)&v14 - v9;
  (*(void (**)(uint64_t, uint64_t, double))(v5 + 120))(v4, v5, v8);
  v11 = Text.Effect.DrawableFragment.subscript.getter((uint64_t)v10, a1, (uint64_t)v15);
  (*(void (**)(char *, uint64_t, __n128))(v7 + 8))(v10, AssociatedTypeWitness, v11);
  v12 = v15[1];
  *(_OWORD *)a2 = v15[0];
  *(_OWORD *)(a2 + 16) = v12;
  result = *(double *)&v16;
  *(_OWORD *)(a2 + 32) = v16;
  *(_QWORD *)(a2 + 48) = v17;
  return result;
}

double Text.Effect.DrawableFragment.defaultDrawingFragment.getter@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  double v8;
  uint64_t v9;
  char *v10;
  __n128 v11;
  __int128 v12;
  double result;
  uint64_t v14;
  _OWORD v15[2];
  __int128 v16;
  uint64_t v17;

  v4 = *(_QWORD *)(a1 + 16);
  v5 = *(_QWORD *)(a1 + 24);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v7 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v8 = MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v10 = (char *)&v14 - v9;
  (*(void (**)(uint64_t, uint64_t, double))(v5 + 128))(v4, v5, v8);
  v11 = Text.Effect.DrawableFragment.subscript.getter((uint64_t)v10, a1, (uint64_t)v15);
  (*(void (**)(char *, uint64_t, __n128))(v7 + 8))(v10, AssociatedTypeWitness, v11);
  v12 = v15[1];
  *(_OWORD *)a2 = v15[0];
  *(_OWORD *)(a2 + 16) = v12;
  result = *(double *)&v16;
  *(_OWORD *)(a2 + 32) = v16;
  *(_QWORD *)(a2 + 48) = v17;
  return result;
}

uint64_t Text.Effect.DrawableFragment.typographicBounds(for:)@<X0>(uint64_t result@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  __int128 v4;
  _OWORD v5[3];

  v2 = result + 1;
  if (__OFADD__(result, 1))
  {
    __break(1u);
  }
  else if (v2 >= result)
  {
    result = Text.Effect.BaseFragment.typographicBounds(for:)(result, v2, (uint64_t)v5);
    v4 = v5[1];
    *a2 = v5[0];
    a2[1] = v4;
    a2[2] = v5[2];
    return result;
  }
  __break(1u);
  return result;
}

void Text.Effect.DrawableFragment.baseWritingDirection.getter(BOOL *a1@<X8>)
{
  Text.Layout.Line.baseWritingDirection.getter(a1);
}

uint64_t Text.Effect.BaseFragment.onlyEmojis.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  CFIndex *v7;
  void *v8;
  CFIndex v9;
  const __CTLine *v10;
  void *v11;
  const __CTFont *v12;
  __CFString *v13;
  Swift::String v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;

  v1 = *(_QWORD *)(*(_QWORD *)(v0 + 24) + 96);
  v2 = *(_QWORD *)(v1 + 16);
  if (!v2)
    return 1;
  v3 = v1 + 32;
  swift_bridgeObjectRetain_n();
  v4 = 0;
  v17 = v3;
  v18 = v2;
  while (1)
  {
    v5 = *(_QWORD *)(v3 + 24 * v4 + 16);
    v6 = *(_QWORD *)(v5 + 16);
    if (v6)
      break;
LABEL_3:
    if (++v4 == v2)
    {
      v15 = 1;
      goto LABEL_14;
    }
  }
  swift_bridgeObjectRetain_n();
  v7 = (CFIndex *)(v5 + 40);
  while (1)
  {
    v8 = (void *)*(v7 - 1);
    v9 = *v7;
    swift_retain_n();
    v10 = v8;
    v11 = (id)_CTLineGetRunAtIndex(v10, v9);
    v12 = (const __CTFont *)(id)CTRunGetFont();
    swift_release();

    if (!v12)
    {
      swift_bridgeObjectRelease_n();
      swift_release_n();

      goto LABEL_13;
    }
    v13 = (__CFString *)CTFontCopyPostScriptName(v12);
    static String._unconditionallyBridgeFromObjectiveC(_:)();

    v14._countAndFlagsBits = 0xD000000000000010;
    v14._object = (void *)0x80000002352E58F0;
    LOBYTE(v13) = String.hasPrefix(_:)(v14);
    swift_release_n();

    swift_bridgeObjectRelease();
    if ((v13 & 1) == 0)
      break;
    v7 += 8;
    if (!--v6)
    {
      swift_bridgeObjectRelease_n();
      v3 = v17;
      v2 = v18;
      goto LABEL_3;
    }
  }
  swift_bridgeObjectRelease_n();
LABEL_13:
  v15 = 0;
LABEL_14:
  swift_bridgeObjectRelease_n();
  return v15;
}

uint64_t Text.Layout.Cluster.typographicBounds(with:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  char v8;
  double MaxX;
  double v10;
  double v11;
  double v12;
  double v13;
  void *v14;
  CFIndex v15;
  uint64_t v16;
  id v17;
  double v18;
  double v19;
  double TypographicBounds;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  CFIndex v26;
  const __CTRun *v27;
  BOOL v28;
  CFIndex v29;
  const __CTRun *v30;
  CGFloat v31;
  CGFloat v32;
  double MinX;
  double v34;
  double v35;
  uint64_t v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  CGPoint originsBuffer;
  CGFloat leading;
  CGFloat descent;
  CGFloat ascent;
  CGPoint buffer;
  uint64_t v47;
  CFRange v48;
  CFRange v49;
  CFRange v50;
  CGRect v51;
  CGRect v52;

  v47 = *MEMORY[0x24BDAC8D0];
  v4 = *(_QWORD *)(result + 32);
  v5 = *(_QWORD *)(a2 + 16);
  if (!v5)
  {
    v12 = *(double *)(result + 24);
    v35 = 0.0;
    MaxX = 0.0;
    v10 = 0.0;
    v11 = 0.0;
    goto LABEL_25;
  }
  v36 = *(_QWORD *)(result + 32);
  swift_bridgeObjectRetain();
  v7 = a2 + 48;
  v8 = 1;
  MaxX = 0.0;
  v10 = 0.0;
  v11 = 0.0;
  v12 = 0.0;
  v13 = 0.0;
  while (1)
  {
    v37 = v13;
    v38 = v12;
    v14 = *(void **)(v7 - 16);
    v15 = *(_QWORD *)(v7 + 32);
    v16 = *(_QWORD *)(v7 + 40);
    v39 = v10;
    v40 = MaxX;
    v41 = v11;
    if (v15 == v16)
    {
      swift_retain();
      v17 = v14;
      v18 = 0.0;
      v19 = 0.0;
      TypographicBounds = 0.0;
      v21 = 0.0;
      v22 = 0.0;
      v23 = 0.0;
    }
    else
    {
      v24 = *(double *)v7;
      v25 = *(double *)(v7 + 8);
      v26 = *(_QWORD *)(v7 - 8);
      swift_retain();
      v27 = (id)_CTLineGetRunAtIndex((const __CTLine *)v14, v26);
      v28 = __OFSUB__(v16, v15);
      v29 = v16 - v15;
      if (v28)
        goto LABEL_27;
      v30 = v27;
      buffer.x = 0.0;
      buffer.y = 0.0;
      descent = 0.0;
      ascent = 0.0;
      originsBuffer.y = 0.0;
      leading = 0.0;
      originsBuffer.x = 0.0;
      v48.location = v15;
      v48.length = 1;
      CTRunGetPositions(v27, v48, &buffer);
      v49.location = v15;
      v49.length = 1;
      CTRunGetBaseAdvancesAndOrigins(v30, v49, 0, &originsBuffer);
      v31 = buffer.x - originsBuffer.x;
      v32 = buffer.y - originsBuffer.y;
      v50.location = v15;
      v50.length = v29;
      TypographicBounds = CTRunGetTypographicBounds(v30, v50, &ascent, &descent, &leading);

      v21 = ascent;
      v22 = fabs(descent);
      v23 = leading;
      v18 = v24 + v31;
      v19 = v25 - v32;
    }
    v10 = v19 - v21;
    v51.origin.x = v18;
    v51.origin.y = v10;
    v51.size.width = TypographicBounds;
    v51.size.height = v21 + v22;
    MinX = CGRectGetMinX(v51);
    v52.origin.x = v18;
    v52.origin.y = v10;
    v52.size.width = TypographicBounds;
    v52.size.height = v21 + v22;
    MaxX = CGRectGetMaxX(v52);
    swift_release();

    if (MinX > MaxX)
    {
      __break(1u);
LABEL_27:
      __break(1u);
    }
    if ((v8 & 1) == 0)
      break;
    v13 = MaxX;
    v12 = MinX;
    v11 = v41;
LABEL_4:
    v8 = 0;
    v7 += 64;
    if (v11 <= v21)
      v11 = v21;
    v10 = v39;
    MaxX = v40;
    if (v39 <= v22)
      v10 = v22;
    if (v40 <= v23)
      MaxX = v23;
    if (!--v5)
      goto LABEL_23;
  }
  v13 = v37;
  v12 = v38;
  if (MinX < v38)
    v12 = MinX;
  if (v37 <= MaxX)
    v13 = MaxX;
  v11 = v41;
  if (v12 <= v13)
    goto LABEL_4;
  __break(1u);
LABEL_23:
  v34 = v13;
  result = swift_bridgeObjectRelease();
  v35 = v34 - v12;
  v4 = v36;
LABEL_25:
  *(double *)a3 = v12;
  *(_QWORD *)(a3 + 8) = v4;
  *(double *)(a3 + 16) = v35;
  *(double *)(a3 + 24) = v11;
  *(double *)(a3 + 32) = v10;
  *(double *)(a3 + 40) = MaxX;
  return result;
}

uint64_t specialized Text.Effect.BaseFragment.init(keyframes:key:fragment:)@<X0>(uint64_t a1@<X0>, Swift::UInt64 a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v10;
  unint64_t v11;
  char v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t result;

  swift_beginAccess();
  v10 = *(_QWORD *)(a1 + 48);
  if (!*(_QWORD *)(v10 + 16))
    goto LABEL_14;
  swift_retain();
  v11 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  if ((v12 & 1) != 0)
  {
    v13 = *(_QWORD *)(*(_QWORD *)(v10 + 56) + 16 * v11);
    swift_endAccess();
    swift_bridgeObjectRetain();
    swift_release();
    if ((a4 & 0x8000000000000000) == 0)
    {
      v14 = *(_QWORD *)(v13 + 16);
      if (v14 <= a4)
      {
LABEL_12:
        __break(1u);
        goto LABEL_13;
      }
      v15 = v13 + 32;
      v16 = *(_QWORD *)(v13 + 32 + 8 * a4);
      v17 = 0;
      if (!a4)
      {
LABEL_9:
        swift_retain();
        result = swift_bridgeObjectRelease();
        *a5 = a1;
        a5[1] = a2;
        a5[2] = a3;
        a5[3] = v16;
        a5[4] = a4;
        a5[5] = v14;
        a5[6] = v17;
        return result;
      }
      v18 = a4;
      while (1)
      {
        v19 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v15 + 96) + 16);
        v20 = __OFADD__(v17, v19);
        v17 += v19;
        if (v20)
          break;
        v15 += 8;
        if (!--v18)
          goto LABEL_9;
      }
      __break(1u);
    }
    __break(1u);
    goto LABEL_12;
  }
LABEL_13:
  swift_release();
LABEL_14:
  swift_endAccess();
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized Text.Effect.DrawableFragment.visualOrder.getter()
{
  uint64_t v0;

  return *(_QWORD *)(*(_QWORD *)(v0 + 24) + 104);
}

uint64_t type metadata accessor for Text.Effect.DrawableFragment(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Text.Effect.DrawableFragment);
}

uint64_t destroy for Text.Effect.DrawableFragment()
{
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t initializeWithCopy for Text.Effect.DrawableFragment(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

_QWORD *assignWithCopy for Text.Effect.DrawableFragment(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  a1[2] = a2[2];
  swift_retain();
  swift_release();
  a1[3] = a2[3];
  swift_retain();
  swift_release();
  a1[4] = a2[4];
  a1[5] = a2[5];
  a1[6] = a2[6];
  return a1;
}

uint64_t assignWithTake for Text.Effect.DrawableFragment(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_release();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_release();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  swift_release();
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  return a1;
}

ValueMetadata *type metadata accessor for Text.Effect.BaseFragment()
{
  return &type metadata for Text.Effect.BaseFragment;
}

ValueMetadata *type metadata accessor for BigTextEffect()
{
  return &type metadata for BigTextEffect;
}

unint64_t lazy protocol witness table accessor for type BigTextEffect.LayoutState and conformance BigTextEffect.LayoutState()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type BigTextEffect.LayoutState and conformance BigTextEffect.LayoutState;
  if (!lazy protocol witness table cache variable for type BigTextEffect.LayoutState and conformance BigTextEffect.LayoutState)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for BigTextEffect.LayoutState, &type metadata for BigTextEffect.LayoutState);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BigTextEffect.LayoutState and conformance BigTextEffect.LayoutState);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type BigTextEffect.LayoutState and conformance BigTextEffect.LayoutState;
  if (!lazy protocol witness table cache variable for type BigTextEffect.LayoutState and conformance BigTextEffect.LayoutState)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for BigTextEffect.LayoutState, &type metadata for BigTextEffect.LayoutState);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BigTextEffect.LayoutState and conformance BigTextEffect.LayoutState);
  }
  return result;
}

uint64_t specialized KeyframeTrack._resolve(into:initialValue:initialVelocity:)(_QWORD **a1, uint64_t a2, char a3, double a4)
{
  uint64_t *v4;
  uint64_t *v5;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  uint64_t result;
  uint64_t v22;
  _QWORD *v23[3];
  _QWORD __dst[42];

  v5 = v4;
  v9 = a3 & 1;
  v23[2] = *(_QWORD **)&a4;
  v10 = *v5;
  swift_getAtKeyPath();
  __dst[0] = a2;
  LOBYTE(__dst[1]) = v9;
  if ((a3 & 1) == 0)
    swift_getAtKeyPath();
  v11 = MEMORY[0x24BEE4AF8];
  v23[0] = (_QWORD *)MEMORY[0x24BEE4AF8];
  memcpy(__dst, v5 + 1, 0x149uLL);
  specialized MergedKeyframeTrackContent._resolve(into:)(v23);
  v22 = v11;
  specialized closure #1 in KeyframeTrack.resolve(initialValue:initialVelocity:)((uint64_t)&v22, (uint64_t)v23[0]);
  swift_bridgeObjectRelease();
  v12 = v22;
  specialized AnimationPath.duration.getter(v22);
  v14 = v13;
  v15 = swift_allocObject();
  *(_QWORD *)(v15 + 16) = v12;
  *(_QWORD *)(v15 + 24) = v10;
  v16 = swift_allocObject();
  *(_QWORD *)(v16 + 16) = v12;
  *(_QWORD *)(v16 + 24) = v10;
  v17 = *a1;
  swift_bridgeObjectRetain();
  outlined retain of ViewTransform((uint64_t)v5);
  swift_bridgeObjectRetain();
  outlined retain of ViewTransform((uint64_t)v5);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v17 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v17[2] + 1, 1, v17);
  v19 = v17[2];
  v18 = v17[3];
  if (v19 >= v18 >> 1)
    v17 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v18 > 1), v19 + 1, 1, v17);
  v17[2] = v19 + 1;
  v20 = &v17[5 * v19];
  v20[4] = v14;
  v20[5] = partial apply for specialized closure #1 in _ResolvedKeyframes.append<A>(keyPath:path:);
  v20[6] = v15;
  v20[7] = partial apply for specialized closure #2 in _ResolvedKeyframes.append<A>(keyPath:path:);
  v20[8] = v16;
  result = swift_bridgeObjectRelease();
  *a1 = v17;
  return result;
}

void specialized closure #1 in KeyframeTrack.resolve(initialValue:initialVelocity:)(uint64_t a1, uint64_t a2)
{
  if (*(_QWORD *)(a2 + 16))
    __asm { BR              X10 }
}

uint64_t specialized Sequence.allSatisfy(_:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  Swift::UInt64 v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  unint64_t v20;
  Swift::UInt64 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  Swift::UInt64 v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  unint64_t v35;
  char v36;
  uint64_t v37;
  char v38;
  uint64_t result;
  _BYTE v40[24];
  _QWORD v41[7];

  v2 = type metadata accessor for Text.Effect.BaseContent(0);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (uint64_t *)&v40[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v5);
  v7 = (uint64_t *)&v40[-v6];
  type metadata accessor for IndexingIterator<Text.Effect.BaseContent>();
  v9 = v8;
  MEMORY[0x24BDAC7A8](v8);
  v11 = &v40[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v12);
  v14 = (uint64_t *)&v40[-v13];
  outlined init with copy of TypesettingLanguage(a1, (uint64_t)v7, type metadata accessor for Text.Effect.BaseContent);
  outlined init with copy of TypesettingLanguage((uint64_t)v7, (uint64_t)v11, type metadata accessor for Text.Effect.BaseContent);
  v15 = *v7;
  v16 = v7[1];
  v17 = v7[2];
  swift_beginAccess();
  if (*(_QWORD *)(*(_QWORD *)(v15 + 48) + 16))
  {
    specialized __RawDictionaryStorage.find<A>(_:)(v16, v17);
    if ((v18 & 1) != 0)
    {
      swift_endAccess();
      outlined destroy of TypesettingConfiguration((uint64_t)v7, type metadata accessor for Text.Effect.BaseContent);
      *(_QWORD *)&v11[*(int *)(v9 + 36)] = 0;
      outlined init with take of LocalizedStringKey.FormatArgument((uint64_t)v11, (uint64_t)v14, (uint64_t (*)(_QWORD))type metadata accessor for IndexingIterator<Text.Effect.BaseContent>);
      v19 = *(int *)(v9 + 36);
      while (1)
      {
        v20 = *(uint64_t *)((char *)v14 + v19);
        v22 = *v14;
        v21 = v14[1];
        v23 = v14[2];
        swift_beginAccess();
        v24 = *(_QWORD *)(v22 + 48);
        if (!*(_QWORD *)(v24 + 16))
          break;
        v25 = specialized __RawDictionaryStorage.find<A>(_:)(v21, v23);
        if ((v26 & 1) == 0)
          break;
        v27 = *(_QWORD *)(*(_QWORD *)(v24 + 56) + 16 * v25);
        swift_endAccess();
        v28 = *(_QWORD *)(v27 + 16);
        if (__OFSUB__(v28, v20))
        {
          __break(1u);
LABEL_16:
          __break(1u);
          break;
        }
        if (v28 == v20)
          goto LABEL_14;
        swift_retain();
        swift_retain();
        specialized Text.Effect.BaseFragment.init(keyframes:key:fragment:)(v22, v21, v23, v20, v41);
        outlined init with copy of TypesettingLanguage((uint64_t)v14, (uint64_t)v4, type metadata accessor for Text.Effect.BaseContent);
        v29 = *v4;
        v30 = v4[1];
        v31 = v4[2];
        v32 = *v4 + 48;
        swift_beginAccess();
        if (!*(_QWORD *)(*(_QWORD *)(v29 + 48) + 16))
          goto LABEL_18;
        specialized __RawDictionaryStorage.find<A>(_:)(v30, v31);
        if ((v33 & 1) == 0)
          goto LABEL_18;
        swift_endAccess();
        swift_beginAccess();
        v34 = *(_QWORD *)v32;
        if (!*(_QWORD *)(*(_QWORD *)v32 + 16))
          goto LABEL_19;
        v35 = specialized __RawDictionaryStorage.find<A>(_:)(v30, v31);
        if ((v36 & 1) == 0)
          goto LABEL_19;
        v37 = *(_QWORD *)(*(_QWORD *)(v34 + 56) + 16 * v35);
        swift_endAccess();
        if (v20 >= *(_QWORD *)(v37 + 16))
          goto LABEL_16;
        *(uint64_t *)((char *)v14 + v19) = v20 + 1;
        outlined destroy of TypesettingConfiguration((uint64_t)v4, type metadata accessor for Text.Effect.BaseContent);
        v38 = Text.Effect.BaseFragment.onlyEmojis.getter();
        outlined release of Text.Effect.BaseFragment((uint64_t)v41);
        if ((v38 & 1) == 0)
        {
LABEL_14:
          outlined destroy of TypesettingConfiguration((uint64_t)v14, (uint64_t (*)(_QWORD))type metadata accessor for IndexingIterator<Text.Effect.BaseContent>);
          return v28 == v20;
        }
      }
      swift_endAccess();
      __break(1u);
LABEL_18:
      swift_endAccess();
      __break(1u);
LABEL_19:
      swift_endAccess();
      __break(1u);
    }
  }
  result = swift_endAccess();
  __break(1u);
  return result;
}

uint64_t specialized AnimationPath.duration.getter(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  double v5;
  double *v6;

  v1 = *(_QWORD *)(result + 16);
  if (v1)
  {
    v2 = 0;
    v3 = result + 88;
    v4 = 1 - v1;
    v5 = 0.0;
    while (1)
    {
      if (*(_BYTE *)(v3 + 25))
      {
        v6 = (double *)v3;
        if (*(_BYTE *)(v3 + 25) != 1)
        {
          v5 = v5 + 0.0;
          if (!v4)
            return result;
          goto LABEL_5;
        }
      }
      else
      {
        v6 = (double *)(result + 32 + 88 * v2 + 32);
      }
      v5 = v5 + *v6;
      if (!v4)
        return result;
LABEL_5:
      v3 += 88;
      ++v4;
      ++v2;
      if (v4 == 1)
      {
        __break(1u);
        return result;
      }
    }
  }
  return result;
}

uint64_t specialized closure #1 in _ResolvedKeyframes.append<A>(keyPath:path:)(double a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v5;
  uint64_t (*v6)(uint64_t *, _QWORD);
  _QWORD *v7;
  uint64_t v8;
  uint64_t v10;

  v6 = (uint64_t (*)(uint64_t *, _QWORD))swift_modifyAtWritableKeyPath();
  if (*(_QWORD *)(a3 + 16))
  {
    v7 = v5;
    specialized AnimationPath.animatableData(at:)(a3, a1);
    *v7 = v8;
  }
  return v6(&v10, 0);
}

void one-time initialization function for useLarge()
{
  id v0;
  void *v1;
  id v2;
  void *v3;
  unsigned __int8 v4;

  v0 = objc_allocWithZone(MEMORY[0x24BDBCF50]);
  v1 = (void *)MEMORY[0x23B7C5DAC](0xD000000000000011, 0x80000002352DDC30);
  v2 = objc_msgSend(v0, sel_initWithSuiteName_, v1);

  if (v2)
  {
    v3 = (void *)MEMORY[0x23B7C5DAC](0xD000000000000023, 0x80000002352E5940);
    v4 = objc_msgSend(v2, sel_BOOLForKey_, v3);

  }
  else
  {
    v4 = 0;
  }
  static BigTextEffect.useLarge = v4;
}

double one-time initialization function for scaleTimeline()
{
  double result;
  _QWORD *v1[2];
  __int128 v2;
  __int128 v3;
  __int128 v4;
  char v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  char v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  char v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  char v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  char v26;
  char v27;
  char v28;
  char v29;
  char v30;
  char v31;
  char v32;

  v1[0] = (_QWORD *)MEMORY[0x24BEE4AF8];
  v29 = 1;
  v28 = 0;
  v27 = 0;
  v30 = 0;
  v31 = 0;
  v32 = 0;
  type metadata accessor for MergedKeyframeTrackContent<Double, MergedKeyframeTrackContent<Double, MergedKeyframeTrackContent<Double, MergedKeyframeTrackContent<Double, MergedKeyframeTrackContent<Double, LinearKeyframe<Double>, LinearKeyframe<Double>>, LinearKeyframe<Double>>, LinearKeyframe<Double>>, LinearKeyframe<Double>>, LinearKeyframe<Double>>(0);
  lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type MergedKeyframeTrackContent<Double, MergedKeyframeTrackContent<Double, MergedKeyframeTrackContent<Double, MergedKeyframeTrackContent<Double, MergedKeyframeTrackContent<Double, LinearKeyframe<Double>, LinearKeyframe<Double>>, LinearKeyframe<Double>>, LinearKeyframe<Double>>, LinearKeyframe<Double>>, LinearKeyframe<Double>> and conformance MergedKeyframeTrackContent<A, B, C>, type metadata accessor for MergedKeyframeTrackContent<Double, MergedKeyframeTrackContent<Double, MergedKeyframeTrackContent<Double, MergedKeyframeTrackContent<Double, MergedKeyframeTrackContent<Double, LinearKeyframe<Double>, LinearKeyframe<Double>>, LinearKeyframe<Double>>, LinearKeyframe<Double>>, LinearKeyframe<Double>>, LinearKeyframe<Double>>, (uint64_t)&protocol conformance descriptor for MergedKeyframeTrackContent<A, B, C>);
  v1[1] = (_QWORD *)swift_getKeyPath();
  v2 = xmmword_2352BA5C0;
  v3 = 0u;
  v4 = 0u;
  v5 = 1;
  v6 = xmmword_2352BA5D0;
  v7 = xmmword_235286C10;
  v8 = xmmword_23529C940;
  v9 = 0;
  v10 = xmmword_2352BA5E0;
  v11 = xmmword_23529C930;
  v12 = xmmword_2352BA5F0;
  v13 = 0;
  v14 = xmmword_2352BA600;
  v15 = xmmword_2352BA610;
  v16 = xmmword_235285B50;
  v17 = 0;
  v18 = xmmword_2352BA620;
  v19 = xmmword_23529C980;
  v20 = 0x3FE8000000000000;
  v21 = 0x3FF0000000000000;
  v22 = 0;
  v23 = xmmword_2352BA630;
  v24 = xmmword_23529C930;
  v25 = xmmword_235285B50;
  v26 = 0;
  specialized KeyframeTrack._resolve(into:initialValue:initialVelocity:)(v1, 0, 1, 1.0);
  swift_release();
  result = 1.0;
  static BigTextEffect.scaleTimeline = 0x3FF0000000000000;
  qword_25622D240 = (uint64_t)v1[0];
  return result;
}

uint64_t closure #1 in BigTextEffect.configuration(_:)()
{
  return closure #1 in BigTextEffect.configuration(_:)(0.95);
}

uint64_t closure #2 in BigTextEffect.configuration(_:)()
{
  return closure #1 in BigTextEffect.configuration(_:)(2.0);
}

uint64_t closure #3 in BigTextEffect.configuration(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  double v15;
  Swift::UInt64 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  Swift::UInt64 v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  double v37;
  double v38;
  double v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  __int128 v45;
  __int128 v46;
  uint64_t v47;
  __int128 v48;
  uint64_t v49;
  __int128 v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t inited;
  int64_t v54;
  _QWORD *v55;
  _QWORD *v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  BOOL v60;
  uint64_t v61;
  uint64_t result;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  __int128 v71;
  __n128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  uint64_t v77;
  _QWORD v78[3];
  _QWORD *v79;
  _QWORD v80[3];
  _QWORD *v81;
  _QWORD *v82;
  _QWORD *v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91[3];

  type metadata accessor for Text.Effect.DrawableContent<BigTextEffect>(0, &lazy cache variable for type metadata for Text.Effect.DrawableContent<BigTextEffect>, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))type metadata accessor for Text.Effect.DrawableContent);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (uint64_t *)((char *)&v63 - v7);
  v9 = *(_QWORD *)(a1 + 16);
  v10 = *(_QWORD *)(a1 + 24);
  v11 = *(_QWORD *)(a1 + 32);
  v12 = *(_QWORD *)(a1 + 40);
  outlined retain of Text.Effect.DrawableFragment<SmallTextEffect>(a2);
  v13 = 0;
  specialized Text.Effect.PathInterpolator.init<A>(_:quantization:default:options:body:)(a2, a3, 8, a2, &v72, 0.0);
  v14 = *(_OWORD *)(a2 + 32);
  v85 = *(_OWORD *)(a2 + 16);
  v86 = v14;
  v84 = *(_OWORD *)a2;
  v87 = *(_QWORD *)(a2 + 48);
  if ((*((_QWORD *)&v14 + 1) & 0x8000000000000000) != 0)
  {
    __break(1u);
LABEL_21:
    __break(1u);
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v15 = 0.2;
  v70 = v12;
  *(_QWORD *)&v71 = v11;
  if (*((_QWORD *)&v14 + 1) == 1 && Text.Effect.BaseFragment.coversAllParagraphs.getter())
  {
    v16 = *((_QWORD *)&v84 + 1);
    v17 = *(_QWORD *)(*((_QWORD *)&v85 + 1) + 184);
    v68 = *(_QWORD *)(*((_QWORD *)&v85 + 1) + 192);
    v69 = v17;
    v18 = *(_QWORD *)(*((_QWORD *)&v85 + 1) + 200);
    v65 = *(_QWORD *)(*((_QWORD *)&v85 + 1) + 208);
    v66 = v18;
    type metadata accessor for Text.Effect.DrawableContent<BigTextEffect>(0, &lazy cache variable for type metadata for Text.Effect.ConcreteLayoutState<BigTextEffect>, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))type metadata accessor for Text.Effect.ConcreteLayoutState);
    v19 = swift_allocObject();
    v67 = 1;
    *(_BYTE *)(v19 + 16) = 1;
    v20 = v86;
    v21 = swift_retain();
    specialized Text.Effect.BaseFragment.init(keyframes:key:fragment:)(v21, v16, v19, v20, v78);
    v22 = v79;
    v83 = v79;
    swift_retain();
    outlined release of Text.Effect.BaseFragment((uint64_t)v78);
    v23 = v22[24];
    v64 = v22[23];
    v25 = v22[25];
    v24 = v22[26];
    outlined release of ViewTransform((uint64_t)&v83);
    v26 = swift_allocObject();
    *(_BYTE *)(v26 + 16) = 2;
    v27 = swift_retain();
    specialized Text.Effect.BaseFragment.init(keyframes:key:fragment:)(v27, v16, v26, v20, v80);
    v28 = v81;
    v82 = v81;
    swift_retain();
    outlined release of Text.Effect.BaseFragment((uint64_t)v80);
    v13 = v28[23];
    v29 = v28[24];
    v30 = v28[25];
    v31 = v28[26];
    outlined release of ViewTransform((uint64_t)&v82);
    v15 = 0.5;
  }
  else
  {
    v67 = 0;
    v29 = 0;
    v30 = 0;
    v31 = 0;
    v64 = 0;
    v65 = 0;
    v23 = 0;
    v25 = 0;
    v24 = 0;
    v68 = 0;
    v69 = 0;
    v66 = 0;
  }
  v33 = *((_QWORD *)&v84 + 1);
  v32 = v84;
  v34 = v85;
  swift_retain();
  swift_retain();
  Text.Effect.BaseContent.init(keyframes:key:)(v32, v33, v34, v8);
  v35 = specialized Sequence.reduce<A>(_:_:)(0, (uint64_t)v8);
  outlined destroy of Text.Effect.DrawableContent<BigTextEffect>((uint64_t)v8);
  swift_retain();
  swift_retain();
  Text.Effect.BaseContent.init(keyframes:key:)(v32, v33, v34, v8);
  v36 = specialized Sequence.allSatisfy(_:)((uint64_t)v8);
  outlined destroy of Text.Effect.DrawableContent<BigTextEffect>((uint64_t)v8);
  if (__OFSUB__(v35, 10))
    goto LABEL_21;
  v37 = exp((double)(v35 - 10) * -0.25);
  if (v37 > 1.0)
    v37 = 1.0;
  v38 = 0.0;
  if ((v36 & 1) == 0)
    v38 = v15;
  v88 = v9;
  v89 = v10;
  v39 = v38 * v37 + 1.4;
  v41 = v70;
  v40 = v71;
  v90 = v71;
  v91[0] = v70;
  v42 = swift_allocObject();
  *(_OWORD *)(v42 + 16) = *(_OWORD *)a1;
  *(_QWORD *)(v42 + 32) = v9;
  *(_QWORD *)(v42 + 40) = v10;
  *(_QWORD *)(v42 + 48) = v40;
  *(_QWORD *)(v42 + 56) = v41;
  *(double *)(v42 + 64) = v39;
  *(_BYTE *)(v42 + 72) = v67;
  v43 = v68;
  *(_QWORD *)(v42 + 80) = v69;
  *(_QWORD *)(v42 + 88) = v43;
  v44 = v65;
  *(_QWORD *)(v42 + 96) = v66;
  *(_QWORD *)(v42 + 104) = v44;
  *(_QWORD *)(v42 + 112) = v64;
  *(_QWORD *)(v42 + 120) = v23;
  *(_QWORD *)(v42 + 128) = v25;
  *(_QWORD *)(v42 + 136) = v24;
  *(_QWORD *)(v42 + 144) = v13;
  *(_QWORD *)(v42 + 152) = v29;
  *(_QWORD *)(v42 + 160) = v30;
  *(_QWORD *)(v42 + 168) = v31;
  v45 = v75;
  *(_OWORD *)(v42 + 208) = v74;
  *(_OWORD *)(v42 + 224) = v45;
  *(_OWORD *)(v42 + 240) = v76;
  *(_QWORD *)(v42 + 256) = v77;
  v46 = v73;
  *(__n128 *)(v42 + 176) = v72;
  *(_OWORD *)(v42 + 192) = v46;
  v47 = swift_allocObject();
  v48 = v75;
  *(_OWORD *)(v47 + 48) = v74;
  *(_OWORD *)(v47 + 64) = v48;
  *(_OWORD *)(v47 + 80) = v76;
  v49 = v77;
  v50 = v73;
  *(__n128 *)(v47 + 16) = v72;
  *(_OWORD *)(v47 + 32) = v50;
  *(_QWORD *)(v47 + 96) = v49;
  *(_QWORD *)(v47 + 104) = partial apply for closure #3 in closure #3 in BigTextEffect.configuration(_:);
  *(_QWORD *)(v47 + 112) = v42;
  type metadata accessor for _ContiguousArrayStorage<Text.Effect.Drawable.Fragment>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<Text.Effect.Drawable.Fragment>);
  v51 = swift_allocObject();
  v71 = xmmword_23527E860;
  *(_OWORD *)(v51 + 16) = xmmword_23527E860;
  *(_QWORD *)(v51 + 32) = partial apply for closure #1 in Text.Effect.DrawableFragment.transform(with:transform:);
  v52 = v51 + 32;
  *(_QWORD *)(v51 + 40) = v47;
  type metadata accessor for _ContiguousArrayStorage<Text.Effect.Drawable.Fragment>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<Text.Effect.Drawable>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = v71;
  *(_QWORD *)(inited + 32) = v51;
  v54 = *(_QWORD *)(v51 + 16);
  outlined retain of Text.Effect.PathInterpolator((uint64_t)&v72);
  outlined retain of Text.Effect.PathInterpolator((uint64_t)&v72);
  outlined retain of LinearGradient((uint64_t)&v88);
  outlined retain of LinearGradient((uint64_t)&v89);
  outlined retain of LinearGradient((uint64_t)&v90);
  outlined retain of LinearGradient((uint64_t)v91);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v55 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v54, 1, MEMORY[0x24BEE4AF8]);
  v56 = v55;
  if (!*(_QWORD *)(v51 + 16))
  {
    if (!v54)
      goto LABEL_19;
    goto LABEL_22;
  }
  v57 = v55[2];
  if ((v55[3] >> 1) - v57 < v54)
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  v58 = (unint64_t)&v55[2 * v57 + 4];
  if (v52 < v58 + 16 * v54 && v58 < v52 + 16 * v54)
    goto LABEL_25;
  swift_arrayInitWithCopy();
  if (!v54)
  {
LABEL_19:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_setDeallocating();
    swift_arrayDestroy();
    outlined release of Text.Effect.PathInterpolator((uint64_t)&v72);
    return (uint64_t)v56;
  }
  v59 = v56[2];
  v60 = __OFADD__(v59, v54);
  v61 = v59 + v54;
  if (!v60)
  {
    v56[2] = v61;
    goto LABEL_19;
  }
LABEL_24:
  __break(1u);
LABEL_25:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t closure #1 in closure #3 in BigTextEffect.configuration(_:)(_QWORD *a1, uint64_t a2)
{
  Swift::UInt64 v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v15;
  _QWORD v16[7];
  _QWORD v17[7];
  _QWORD v18[7];

  v3 = *(_QWORD *)(a2 + 8);
  v4 = *(_QWORD *)(a2 + 32);
  type metadata accessor for Text.Effect.DrawableContent<BigTextEffect>(0, &lazy cache variable for type metadata for Text.Effect.ConcreteLayoutState<BigTextEffect>, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))type metadata accessor for Text.Effect.ConcreteLayoutState);
  v5 = swift_allocObject();
  *(_BYTE *)(v5 + 16) = 1;
  v6 = swift_retain();
  specialized Text.Effect.BaseFragment.init(keyframes:key:fragment:)(v6, v3, v5, v4, v16);
  outlined retain of Text.Effect.DrawableFragment<SmallTextEffect>((uint64_t)v16);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v18[0] = *a1;
  *a1 = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v16, isUniquelyReferenced_nonNull_native, -1.0);
  *a1 = v18[0];
  swift_bridgeObjectRelease();
  outlined release of Text.Effect.BaseFragment((uint64_t)v16);
  v8 = swift_allocObject();
  *(_BYTE *)(v8 + 16) = 0;
  v9 = swift_retain();
  specialized Text.Effect.BaseFragment.init(keyframes:key:fragment:)(v9, v3, v8, v4, v17);
  outlined retain of Text.Effect.DrawableFragment<SmallTextEffect>((uint64_t)v17);
  v10 = swift_isUniquelyReferenced_nonNull_native();
  v18[0] = *a1;
  *a1 = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v17, v10, 0.0);
  *a1 = v18[0];
  swift_bridgeObjectRelease();
  outlined release of Text.Effect.BaseFragment((uint64_t)v17);
  v11 = swift_allocObject();
  *(_BYTE *)(v11 + 16) = 2;
  v12 = swift_retain();
  specialized Text.Effect.BaseFragment.init(keyframes:key:fragment:)(v12, v3, v11, v4, v18);
  outlined retain of Text.Effect.DrawableFragment<SmallTextEffect>((uint64_t)v18);
  v13 = swift_isUniquelyReferenced_nonNull_native();
  v15 = *a1;
  *a1 = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v18, v13, 1.0);
  *a1 = v15;
  swift_bridgeObjectRelease();
  return outlined release of Text.Effect.BaseFragment((uint64_t)v18);
}

unint64_t closure #3 in closure #3 in BigTextEffect.configuration(_:)(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5, double a6, double a7, double a8, double a9, double a10, double a11, double a12, double a13, double a14, double a15, double a16, double a17, double a18)
{
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  uint64_t v29;
  uint64_t v30;
  double v31;
  double v32;
  double v33;
  double v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  char v39;
  double v40;
  _QWORD *v41;
  double v42;
  uint64_t *v43;
  void (*v44)(_QWORD *, double);
  uint64_t v45;
  double v46;
  double v47;
  double v48;
  double v50;
  double v51;
  double v52;
  double v53;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  __int128 v68;
  uint64_t v69;
  unint64_t result;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  double v75;
  unint64_t v76;
  _QWORD *v77;
  unint64_t v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  _QWORD *v84;
  _QWORD *v85;
  uint64_t v86;
  uint64_t v87;
  __int128 v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  _QWORD v92[17];
  __int128 v93;
  uint64_t v94;
  char v95;
  _QWORD v96[6];
  __int128 v97;
  uint64_t v98;
  char v99;

  if ((a1 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_43;
  }
  if (*(_QWORD *)(*(_QWORD *)(a3 + 16) + 16) <= a1)
  {
LABEL_43:
    __break(1u);
    goto LABEL_44;
  }
  v29 = *(_QWORD *)(a3 + 32);
  if (*(_QWORD *)(v29 + 16) > a1)
  {
    v23 = a5;
    v24 = a8;
    v25 = a7;
    v21 = a4;
    v27 = a6;
    v22 = a2;
    v28 = a11;
    *(double *)&v89 = a12;
    *(double *)&v90 = a13;
    v30 = v29 + 40 * a1;
    v31 = *(double *)(v30 + 32);
    v32 = *(double *)(v30 + 40);
    v33 = *(double *)(a2 + 40) - *(double *)(a2 + 32);
    v91 = a1;
    v26 = 0.0;
    if (v33 >= 0.0)
    {
      if (v33 <= v31 || (v26 = 1.0, v31 + v32 <= v33))
      {
LABEL_11:
        if (one-time initialization token for scaleTimeline == -1)
          goto LABEL_12;
        goto LABEL_45;
      }
    }
    else
    {
      if (v31 >= 0.0)
        goto LABEL_11;
      v26 = 1.0;
      v33 = 0.0;
      if (v31 + v32 <= 0.0)
        goto LABEL_11;
    }
    v26 = (v33 - v31) / v32;
    goto LABEL_11;
  }
LABEL_44:
  __break(1u);
LABEL_45:
  a1 = swift_once();
LABEL_12:
  v34 = *(double *)&static BigTextEffect.scaleTimeline;
  v35 = qword_25622D240;
  v92[0] = static BigTextEffect.scaleTimeline;
  MEMORY[0x24BDAC7A8](a1);
  swift_getKeyPath();
  swift_bridgeObjectRetain_n();
  swift_retain();
  v36 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay7SwiftUI18_ResolvedKeyframesVAFE5TrackVySd_GG_Sds5NeverOTg503_s7d5UI18_fg21V8durationSdvgSdAcAE5h9Vyx_Gcfu_N4_TG5s7KeyPathCyAKSdGTf1cn_nTf4ng_n(v35);
  swift_release_n();
  *(double *)&v37 = COERCE_DOUBLE(specialized Sequence<>.max()(v36));
  v39 = v38;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v40 = *(double *)&v37;
  if ((v39 & 1) != 0)
    v40 = 0.0;
  v41 = *(_QWORD **)(v35 + 16);
  if (v41)
  {
    v42 = v26 * v40;
    swift_bridgeObjectRetain();
    v43 = (uint64_t *)(v35 + 64);
    do
    {
      v44 = (void (*)(_QWORD *, double))*(v43 - 3);
      v45 = *v43;
      v43 += 5;
      v36 = v45;
      swift_retain();
      swift_retain();
      v44(v92, v42);
      swift_release();
      swift_release();
      v41 = (_QWORD *)((char *)v41 - 1);
    }
    while (v41);
    swift_bridgeObjectRelease_n();
    v34 = *(double *)v92;
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }
  v46 = v34 + -1.0;
  if (v34 < 1.0)
  {
    v47 = v46 / 0.05;
    v48 = 0.0;
    if ((v21 & 1) == 0)
      goto LABEL_27;
LABEL_23:
    if (v47 >= 0.0)
    {
      v53 = a17;
      a14 = a18;
      v51 = a15;
      v52 = a16;
      v50 = v47;
    }
    else
    {
      v50 = fabs(v47);
      v51 = v28;
      v52 = *(double *)&v89;
      v53 = *(double *)&v90;
    }
    v48 = Text.Effect.Metrics.offsetForCenterAlignment(other:t:)(v51, v52, v53, a14, v50, v25, v24);
    goto LABEL_27;
  }
  v47 = (v27 + -1.0) * (v46 / 0.6);
  v48 = 0.0;
  if ((v21 & 1) != 0)
    goto LABEL_23;
LABEL_27:
  *(double *)v96 = v47;
  v96[1] = 0;
  *(double *)&v96[2] = v48;
  memset(&v96[3], 0, 24);
  __asm { FMOV            V0.2D, #1.0 }
  v97 = _Q0;
  v98 = 0x3FF0000000000000;
  v99 = 0;
  if (!*(_QWORD *)(v22 + 272))
    goto LABEL_32;
  v36 = *(_QWORD *)(v22 + 272);
  v88 = _Q0;
  v85 = v23;
  v86 = v22;
  v59 = *(_QWORD *)(v22 + 288);
  v60 = *(_QWORD *)(v22 + 296);
  v61 = *(_QWORD *)(v22 + 312);
  v62 = *(_QWORD *)(v22 + 320);
  v63 = *(_QWORD *)(v22 + 328);
  v64 = *(_QWORD *)(v22 + 344);
  v65 = *(_QWORD *)(v22 + 352);
  v41 = *(_QWORD **)(v22 + 264);
  v83 = *(_QWORD *)(v22 + 336);
  v81 = *(_QWORD *)(v22 + 280);
  v22 = *(_QWORD *)(v22 + 304);
  v87 = v61;
  v89 = v62;
  v90 = v63;
  outlined copy of Text.Effect.TransformContext.DrawingMode(v36, v81, v59, v60, v22, v61, v62, v63, v83, v64, v65);
  swift_retain();
  v35 = v59;
  swift_retain();
  v21 = v60;
  swift_retain();
  v82 = v64;
  swift_bridgeObjectRetain();
  v80 = v65;
  outlined copy of Text.Effect.PathInterpolator.MapKeys(v65);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    goto LABEL_47;
  while (1)
  {
    v67 = v41[2];
    v66 = v41[3];
    v68 = v88;
    if (v67 >= v66 >> 1)
    {
      v77 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v66 > 1), v67 + 1, 1, v41);
      v68 = v88;
      v84 = v77;
    }
    else
    {
      v84 = v41;
    }
    v78 = v36;
    v79 = v21;
    v92[0] = v36;
    v92[1] = v81;
    v69 = v35;
    v92[2] = v35;
    v92[3] = v21;
    v21 = v87;
    v92[4] = v22;
    v92[5] = v87;
    v92[6] = v89;
    v92[7] = v90;
    v35 = v82;
    v41 = (_QWORD *)v83;
    v92[8] = v83;
    v92[9] = v82;
    v92[10] = v80;
    *(double *)&v92[11] = v47;
    v92[12] = 0;
    *(double *)&v92[13] = v48;
    memset(&v92[14], 0, 24);
    v93 = v68;
    v94 = 0x3FF0000000000000;
    v95 = 0;
    _s7SwiftUI4TextVAAE6EffectO11DisplayInfoV13DrawOperationOWOi1_((uint64_t)v92);
    v36 = (uint64_t)v84;
    v84[2] = v67 + 1;
    outlined init with take of Text.Effect.DisplayInfo.DrawOperation((uint64_t)v92, (uint64_t)&v84[27 * v67 + 4]);
    outlined consume of Text.Effect.TransformContext.DrawingMode(v78, v81, v69, v79, v22, v87, v89, v90, v83, v82, v80);
    v23 = v85;
    v22 = v86;
    *(_QWORD *)(v86 + 264) = v84;
LABEL_32:
    result = Text.Effect.TransformContext.draw(state:keyPath:)((uint64_t)v96, 0, 0, 0, 1);
    if (!__OFSUB__(*(_QWORD *)v22, v91))
      break;
    __break(1u);
LABEL_47:
    v41 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v41[2] + 1, 1, v41);
  }
  if (*(_QWORD *)v22 == v91)
  {
    v71 = v23[8];
    _VF = __OFSUB__(v91, v71);
    v72 = v91 - v71;
    if (_VF)
    {
      __break(1u);
    }
    else if ((v72 & 0x8000000000000000) == 0)
    {
      v73 = v23[9];
      if (v72 < *(_QWORD *)(v73 + 16))
      {
        v74 = *(_QWORD *)(v73 + 56 * v72 + 64);
        result = Text.Effect.PathInterpolator.MapKeys.index(for:)(v23[10], v47);
        if ((result & 0x8000000000000000) == 0)
        {
          v76 = *(_QWORD *)(v74 + 16);
          if (result < v76)
          {
            if (result + 1 < v76)
            {
              *(double *)(v22 + 136) = *(double *)(v74 + 32 + 8 * result)
                                     + v75
                                     * (*(double *)(v74 + 32 + 8 * (result + 1)) - *(double *)(v74 + 32 + 8 * result));
              return result;
            }
LABEL_54:
            __break(1u);
            return result;
          }
LABEL_53:
          __break(1u);
          goto LABEL_54;
        }
LABEL_52:
        __break(1u);
        goto LABEL_53;
      }
LABEL_51:
      __break(1u);
      goto LABEL_52;
    }
    __break(1u);
    goto LABEL_51;
  }
  return result;
}

uint64_t protocol witness for static TextEffect.name.getter in conformance BigTextEffect()
{
  return 6777186;
}

void *protocol witness for static Text.Effect.Base.states.getter in conformance BigTextEffect()
{
  return &outlined read-only object #0 of protocol witness for static Text.Effect.Base.states.getter in conformance BigTextEffect;
}

uint64_t protocol witness for static Text.Effect.Base.lineBreakingState.getter in conformance BigTextEffect@<X0>(char *a1@<X8>)
{
  char v2;
  uint64_t result;

  if (one-time initialization token for useLarge != -1)
    result = swift_once();
  if (static BigTextEffect.useLarge)
    v2 = 2;
  else
    v2 = 0;
  *a1 = v2;
  return result;
}

double protocol witness for Text.Effect.Base.timing(for:from:to:duration:) in conformance BigTextEffect@<D0>(uint64_t a1@<X0>, double a2@<X5>, char a3@<W6>, _OWORD *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  __int128 v11;
  double v12;
  __int128 v13;
  double result;
  _OWORD v15[2];
  __int128 v16;
  __int128 v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  char v30;
  __int128 v31;
  char v32;
  char v33;
  char v34;
  char v35;

  type metadata accessor for Text.Effect.DrawableContent<BigTextEffect>(0, &lazy cache variable for type metadata for Text.Effect.DrawableContent<BigTextEffect>, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))type metadata accessor for Text.Effect.DrawableContent);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)v15 - v9;
  v35 = 0;
  v34 = 1;
  v33 = 0;
  v17 = xmmword_2352BA640;
  v18 = 0;
  v19 = 0;
  v20 = 0;
  v21 = 2;
  v23 = 0;
  v24 = 0;
  v22 = 0;
  v25 = 0;
  v26 = 0;
  v27 = 0;
  v28 = 1;
  v29 = MEMORY[0x24BEE4AF8];
  v30 = 0;
  v31 = xmmword_235281F60;
  v32 = 0;
  if (one-time initialization token for spring != -1)
    swift_once();
  v11 = static BigTextEffect.spring;
  v12 = *(double *)&qword_25622D230;
  outlined init with copy of Text.Effect.DrawableContent<BigTextEffect>(a1, (uint64_t)v10);
  specialized Text.Effect.Timing.init<A>(configuration:duration:spring:content:)((uint64_t)&v17, a2, a3 & 1, (uint64_t)v10, v15, *(double *)&v11, *((double *)&v11 + 1), v12);
  v13 = v15[1];
  *a4 = v15[0];
  a4[1] = v13;
  result = *(double *)&v16;
  a4[2] = v16;
  return result;
}

unint64_t instantiation function for generic protocol witness table for BigTextEffect(uint64_t a1)
{
  unint64_t result;

  *(_QWORD *)(a1 + 8) = lazy protocol witness table accessor for type BigTextEffect and conformance BigTextEffect();
  result = lazy protocol witness table accessor for type BigTextEffect and conformance BigTextEffect();
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

void specialized HermiteCurve.parametricTime(forArcLength:)(double a1, double a2, double a3, double a4, double a5)
{
  uint64_t v10;
  uint64_t v11;
  double *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  double v23;
  double v24;
  double v25;
  double v26;
  uint64_t v27;
  double v28;
  double v29;
  double v30;
  uint64_t v32;
  _QWORD v33[2];
  unsigned int v34;
  double v35;
  uint64_t v36;
  uint64_t v37;
  double v38;
  double v39;
  double v40;
  double v41;

  type metadata accessor for Result<(integralResult: Double, estimatedAbsoluteError: Double), Quadrature.Error>();
  v37 = v10;
  MEMORY[0x24BDAC7A8](v10);
  v12 = (double *)((char *)v33 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x24BDAC7A8](v13);
  v15 = (char *)v33 - v14;
  v16 = type metadata accessor for Quadrature.Integrator();
  v36 = *(_QWORD *)(v16 - 8);
  MEMORY[0x24BDAC7A8](v16);
  v18 = (_QWORD *)((char *)v33 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  v19 = type metadata accessor for Quadrature();
  v20 = *(_QWORD *)(v19 - 8);
  MEMORY[0x24BDAC7A8](v19);
  v22 = (char *)v33 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  specialized HermiteCurve.arcLength(at:)(1.0, a2, a3, a4, a5);
  if (v23 > 0.0)
  {
    v24 = a1 / v23;
    specialized HermiteCurve.arcLength(at:)(a1 / v23, a2, a3, a4, a5);
    v35 = 0.1;
    if (vabdd_f64(v25, a1) >= 0.1)
    {
      v26 = v25 - a1;
      v34 = *MEMORY[0x24BEDF4C8];
      v27 = 10;
      v33[1] = 0x3FA999999999999ALL;
      v33[0] = 0x3F50624DD2F1A9FCLL;
      do
      {
        v29 = v24 * v24 * 3.0;
        v30 = (v24 * v24 * 6.0 - v24 * 6.0) * a2 + (v24 * 6.0 - v24 * v24 * 6.0) * a3 + (v29 + v24 * -4.0 + 1.0) * a4;
        v24 = v24 - v26 / sqrt(((v29 - (v24 + v24)) * a5 + v30) * ((v29 - (v24 + v24)) * a5 + v30));
        if ((~*(_QWORD *)&v24 & 0x7FF0000000000000) == 0 && (*(_QWORD *)&v24 & 0xFFFFFFFFFFFFFLL) != 0)
          break;
        if (!--v27)
          break;
        v38 = a2;
        v39 = a3;
        v40 = a4;
        v41 = a5;
        if (v24 < 0.0 && v24 > 0.0)
        {
          __break(1u);
          __break(1u);
          return;
        }
        *v18 = 8;
        (*(void (**)(_QWORD *, _QWORD, uint64_t))(v36 + 104))(v18, v34, v16);
        v32 = Quadrature.init(integrator:absoluteTolerance:relativeTolerance:)();
        MEMORY[0x24BDAC7A8](v32);
        v33[-2] = &v38;
        Quadrature.integrate(over:integrand:)();
        outlined init with copy of TypesettingLanguage((uint64_t)v15, (uint64_t)v12, (uint64_t (*)(_QWORD))type metadata accessor for Result<(integralResult: Double, estimatedAbsoluteError: Double), Quadrature.Error>);
        if (swift_getEnumCaseMultiPayload() == 1)
        {
          v28 = sqrt((v39 - v38) * (v39 - v38));
          outlined destroy of TypesettingConfiguration((uint64_t)v15, (uint64_t (*)(_QWORD))type metadata accessor for Result<(integralResult: Double, estimatedAbsoluteError: Double), Quadrature.Error>);
          (*(void (**)(char *, uint64_t))(v20 + 8))(v22, v19);
          outlined destroy of TypesettingConfiguration((uint64_t)v12, (uint64_t (*)(_QWORD))type metadata accessor for Result<(integralResult: Double, estimatedAbsoluteError: Double), Quadrature.Error>);
        }
        else
        {
          outlined destroy of TypesettingConfiguration((uint64_t)v15, (uint64_t (*)(_QWORD))type metadata accessor for Result<(integralResult: Double, estimatedAbsoluteError: Double), Quadrature.Error>);
          (*(void (**)(char *, uint64_t))(v20 + 8))(v22, v19);
          v28 = *v12;
          if (v24 < 0.0)
            v28 = -v28;
        }
        v26 = v28 - a1;
      }
      while (vabdd_f64(v28, a1) >= v35);
    }
  }
}

void specialized HermiteCurve.arcLength(at:)(double a1, double a2, double a3, double a4, double a5)
{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  __n128 v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  _QWORD v26[4];

  type metadata accessor for Result<(integralResult: Double, estimatedAbsoluteError: Double), Quadrature.Error>();
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v13);
  v15 = (char *)v26 - v14;
  v16 = type metadata accessor for Quadrature.Integrator();
  v17 = *(_QWORD *)(v16 - 8);
  MEMORY[0x24BDAC7A8](v16);
  v19 = (_QWORD *)((char *)v26 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  v20 = type metadata accessor for Quadrature();
  v21 = *(_QWORD *)(v20 - 8);
  v22.n128_f64[0] = MEMORY[0x24BDAC7A8](v20);
  v24 = (char *)v26 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(double *)v26 = a2;
  *(double *)&v26[1] = a3;
  *(double *)&v26[2] = a4;
  *(double *)&v26[3] = a5;
  if (a1 < 0.0)
  {
    if (a1 <= 0.0)
      goto LABEL_5;
    __break(1u);
  }
  if (a1 < 0.0)
  {
    __break(1u);
    return;
  }
LABEL_5:
  *v19 = 8;
  (*(void (**)(_QWORD *, _QWORD, uint64_t, __n128))(v17 + 104))(v19, *MEMORY[0x24BEDF4C8], v16, v22);
  v25 = Quadrature.init(integrator:absoluteTolerance:relativeTolerance:)();
  MEMORY[0x24BDAC7A8](v25);
  v26[-2] = v26;
  Quadrature.integrate(over:integrand:)();
  outlined init with copy of TypesettingLanguage((uint64_t)v15, (uint64_t)v12, (uint64_t (*)(_QWORD))type metadata accessor for Result<(integralResult: Double, estimatedAbsoluteError: Double), Quadrature.Error>);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    outlined destroy of TypesettingConfiguration((uint64_t)v15, (uint64_t (*)(_QWORD))type metadata accessor for Result<(integralResult: Double, estimatedAbsoluteError: Double), Quadrature.Error>);
    (*(void (**)(char *, uint64_t))(v21 + 8))(v24, v20);
    outlined destroy of TypesettingConfiguration((uint64_t)v12, (uint64_t (*)(_QWORD))type metadata accessor for Result<(integralResult: Double, estimatedAbsoluteError: Double), Quadrature.Error>);
  }
  else
  {
    outlined destroy of TypesettingConfiguration((uint64_t)v15, (uint64_t (*)(_QWORD))type metadata accessor for Result<(integralResult: Double, estimatedAbsoluteError: Double), Quadrature.Error>);
    (*(void (**)(char *, uint64_t))(v21 + 8))(v24, v20);
  }
}

double specialized closure #1 in HermiteCurve.arcLength(at:)(double a1, double a2, double a3, double a4, double a5)
{
  double v5;
  double v6;

  v5 = a1 * a1 * 3.0;
  v6 = (a1 * a1 * 6.0 - a1 * 6.0) * a2 + (a1 * 6.0 - a1 * a1 * 6.0) * a3 + (v5 + a1 * -4.0 + 1.0) * a4;
  return sqrt(((v5 - (a1 + a1)) * a5 + v6) * ((v5 - (a1 + a1)) * a5 + v6));
}

uint64_t specialized MergedKeyframeTrackContent._resolve(into:)(_QWORD **a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t result;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  __int128 *v14;
  _QWORD *v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  char v23;
  unint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  uint64_t v35;
  __int128 v36;
  uint64_t v37;
  __int128 v38;

  v2 = v1;
  v28 = *(_QWORD *)(v1 + 176);
  v29 = *(_QWORD *)(v1 + 168);
  v4 = *(_QWORD *)(v1 + 200);
  v26 = *(_QWORD *)(v1 + 192);
  v27 = *(_QWORD *)(v1 + 184);
  v5 = *(_QWORD *)(v1 + 208);
  v6 = *(_BYTE *)(v1 + 216);
  v37 = *(_QWORD *)(v1 + 224);
  v35 = *(_QWORD *)(v1 + 232);
  v32 = *(_QWORD *)(v1 + 248);
  v33 = *(_QWORD *)(v1 + 240);
  v30 = *(_QWORD *)(v1 + 264);
  v31 = *(_QWORD *)(v1 + 256);
  v7 = *(_BYTE *)(v1 + 272);
  specialized MergedKeyframeTrackContent._resolve(into:)(a1);
  v8 = v6 & 1;
  v9 = *a1;
  result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
  {
    result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v9[2] + 1, 1, v9);
    v9 = (_QWORD *)result;
  }
  v12 = v9[2];
  v11 = v9[3];
  v13 = v12 + 1;
  if (v12 >= v11 >> 1)
  {
    result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v11 > 1), v12 + 1, 1, v9);
    v9 = (_QWORD *)result;
  }
  v14 = (__int128 *)(v2 + 280);
  v9[2] = v13;
  v15 = &v9[8 * v12];
  v15[4] = v29;
  v15[5] = v28;
  v15[6] = v27;
  v15[7] = v26;
  v15[8] = v4;
  v15[9] = v5;
  v15[10] = v8;
  *((_WORD *)v15 + 44) = 768;
  *a1 = v9;
  v16 = v7 & 1;
  v17 = v9[3];
  v18 = v12 + 2;
  if ((uint64_t)(v12 + 2) > (uint64_t)(v17 >> 1))
  {
    result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v17 > 1), v12 + 2, 1, v9);
    v9 = (_QWORD *)result;
  }
  v9[2] = v18;
  v19 = &v9[8 * v13];
  v19[4] = v37;
  v19[5] = v35;
  v19[6] = v33;
  v19[7] = v32;
  v19[8] = v31;
  v19[9] = v30;
  v19[10] = v16;
  *((_WORD *)v19 + 44) = 768;
  *a1 = v9;
  v20 = *v14;
  v21 = *(_OWORD *)(v2 + 296);
  v22 = *(_OWORD *)(v2 + 312);
  v23 = *(_BYTE *)(v2 + 328);
  v24 = v9[3];
  if ((uint64_t)(v12 + 3) > (uint64_t)(v24 >> 1))
  {
    v36 = *(_OWORD *)(v2 + 296);
    v38 = *v14;
    v34 = *(_OWORD *)(v2 + 312);
    result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v24 > 1), v12 + 3, 1, v9);
    v22 = v34;
    v21 = v36;
    v20 = v38;
    v9 = (_QWORD *)result;
  }
  v9[2] = v12 + 3;
  v25 = &v9[8 * v18];
  *((_OWORD *)v25 + 2) = v20;
  *((_OWORD *)v25 + 3) = v21;
  *((_OWORD *)v25 + 4) = v22;
  v25[10] = v23 & 1;
  *((_WORD *)v25 + 44) = 768;
  *a1 = v9;
  return result;
}

{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t result;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  char v21;
  unint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  __int128 v35;

  v3 = v1[2];
  v25 = v1[1];
  v26 = *v1;
  v4 = v1[3];
  v5 = v1[4];
  v24 = v1[5];
  v34 = v1[7];
  v32 = v1[8];
  v29 = v1[10];
  v30 = v1[9];
  v27 = v1[12];
  v28 = v1[11];
  v6 = *((_BYTE *)v1 + 104);
  v7 = v1[6] & 1;
  v8 = *a1;
  result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
  {
    result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v8[2] + 1, 1, v8);
    v8 = (_QWORD *)result;
  }
  v11 = v8[2];
  v10 = v8[3];
  v12 = v11 + 1;
  if (v11 >= v10 >> 1)
  {
    result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v10 > 1), v11 + 1, 1, v8);
    v8 = (_QWORD *)result;
  }
  v8[2] = v12;
  v13 = &v8[8 * v11];
  v13[4] = v26;
  v13[5] = v25;
  v13[6] = v3;
  v13[7] = v4;
  v13[8] = v5;
  v13[9] = v24;
  v13[10] = v7;
  *((_WORD *)v13 + 44) = 768;
  *a1 = v8;
  v14 = v6 & 1;
  v15 = v8[3];
  v16 = v11 + 2;
  if ((uint64_t)(v11 + 2) > (uint64_t)(v15 >> 1))
  {
    result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v15 > 1), v11 + 2, 1, v8);
    v8 = (_QWORD *)result;
  }
  v8[2] = v16;
  v17 = &v8[8 * v12];
  v17[4] = v34;
  v17[5] = v32;
  v17[6] = v30;
  v17[7] = v29;
  v17[8] = v28;
  v17[9] = v27;
  v17[10] = v14;
  *((_WORD *)v17 + 44) = 768;
  *a1 = v8;
  v18 = *((_OWORD *)v1 + 7);
  v19 = *((_OWORD *)v1 + 8);
  v20 = *((_OWORD *)v1 + 9);
  v21 = *((_BYTE *)v1 + 160);
  v22 = v8[3];
  if ((uint64_t)(v11 + 3) > (uint64_t)(v22 >> 1))
  {
    v33 = *((_OWORD *)v1 + 8);
    v35 = *((_OWORD *)v1 + 7);
    v31 = *((_OWORD *)v1 + 9);
    result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v22 > 1), v11 + 3, 1, v8);
    v20 = v31;
    v19 = v33;
    v18 = v35;
    v8 = (_QWORD *)result;
  }
  v8[2] = v11 + 3;
  v23 = &v8[8 * v16];
  *((_OWORD *)v23 + 2) = v18;
  *((_OWORD *)v23 + 3) = v19;
  *((_OWORD *)v23 + 4) = v20;
  v23[10] = v21 & 1;
  *((_WORD *)v23 + 44) = 768;
  *a1 = v8;
  return result;
}

void specialized AnimationPath.animatableData(at:)(uint64_t a1, double a2)
{
  unint64_t v2;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  double *i;
  double v9;
  double v10;
  double v11;
  double v12;
  _BYTE v13[88];
  _BYTE v14[81];
  char v15;
  _BYTE v16[81];
  char v17;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
    return;
  v4 = 0;
  v5 = a1 + 64;
  do
  {
    if (v4 <= v2)
      v6 = v2;
    else
      v6 = v4;
    v7 = -(uint64_t)v6;
    for (i = (double *)(v5 + 88 * v4++); ; i += 11)
    {
      if (v7 + v4 == 1)
      {
        __break(1u);
        return;
      }
      outlined init with take of AnimationPath<Double>.Element((uint64_t)(i - 4), (uint64_t)v13);
      v9 = *i;
      v10 = i[3];
      outlined init with take of AnimationPath<Double>.Element((uint64_t)v13, (uint64_t)v14);
      v11 = v9;
      if (v15)
      {
        v11 = v10;
        if (v15 != 1)
        {
          if (a2 <= 0.0)
            goto LABEL_20;
          goto LABEL_8;
        }
      }
      if (a2 <= v11)
      {
LABEL_20:
        specialized AnimationPath.Element.animatableData(at:)(a2);
        return;
      }
      outlined init with take of AnimationPath<Double>.Element((uint64_t)v13, (uint64_t)v16);
      if (v17 != 2)
        break;
LABEL_8:
      if (++v4 - v2 == 1)
        return;
    }
    if (v17)
      v12 = v10;
    else
      v12 = v9;
    a2 = a2 - v12;
  }
  while (v4 != v2);
}

void specialized AnimationPath.velocity(at:)(uint64_t a1, double a2)
{
  unint64_t v2;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  double *i;
  double v9;
  double v10;
  double v11;
  double v12;
  _BYTE v13[88];
  _BYTE v14[81];
  char v15;
  _BYTE v16[81];
  char v17;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
    return;
  v4 = 0;
  v5 = a1 + 64;
  do
  {
    if (v4 <= v2)
      v6 = v2;
    else
      v6 = v4;
    v7 = -(uint64_t)v6;
    for (i = (double *)(v5 + 88 * v4++); ; i += 11)
    {
      if (v7 + v4 == 1)
      {
        __break(1u);
        return;
      }
      outlined init with take of AnimationPath<Double>.Element((uint64_t)(i - 4), (uint64_t)v13);
      v9 = *i;
      v10 = i[3];
      outlined init with take of AnimationPath<Double>.Element((uint64_t)v13, (uint64_t)v14);
      v11 = v9;
      if (v15)
      {
        v11 = v10;
        if (v15 != 1)
        {
          if (a2 <= 0.0)
            goto LABEL_19;
          goto LABEL_8;
        }
      }
      if (a2 <= v11)
      {
LABEL_19:
        specialized AnimationPath.Element.velocity(at:)(a2);
        return;
      }
      outlined init with take of AnimationPath<Double>.Element((uint64_t)v13, (uint64_t)v16);
      if (v17 != 2)
        break;
LABEL_8:
      if (++v4 - v2 == 1)
        return;
    }
    if (v17)
      v12 = v10;
    else
      v12 = v9;
    a2 = a2 - v12;
  }
  while (v4 != v2);
}

double specialized AnimationPath.Element.animatableData(at:)(double a1)
{
  uint64_t v1;
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  _QWORD v18[6];
  _BYTE v19[81];
  char v20;

  outlined init with take of AnimationPath<Double>.Element(v1, (uint64_t)v18);
  v4 = *(double *)v18;
  v3 = *(double *)&v18[1];
  v5 = *(double *)&v18[3];
  v6 = *(double *)&v18[4];
  v16 = *(double *)&v18[2];
  v17 = *(double *)&v18[5];
  outlined init with take of AnimationPath<Double>.Element(v1, (uint64_t)v19);
  if (v20)
  {
    if (v20 == 1)
    {
      specialized Spring.value<A>(target:initialVelocity:time:)(v6 - v5, v17, a1, v4, v3);
      return v7 + v5;
    }
    else
    {
      return v4;
    }
  }
  else
  {
    v8 = v4;
    if (a1 >= 0.0)
    {
      if (v6 >= a1)
      {
        v10 = UnitCurve.value(at:)(a1 / v6);
        v11 = v10;
        if ((LOBYTE(v17) & 1) != 0)
        {
          specialized HermiteCurve.arcLength(at:)(1.0, v4, v3, v16, v5);
          specialized HermiteCurve.parametricTime(forArcLength:)(v11 * v13, v4, v3, v16, v5);
          v15 = v14 * (v14 * v14);
          return (v15 - v14 * v14) * v5
               + (v14 + v15 - (v14 * v14 + v14 * v14)) * v16
               + (v14 * v14 * 3.0 - (v15 + v15)) * v3
               + (v15 + v15 - v14 * v14 * 3.0 + 1.0) * v4;
        }
        else
        {
          v12 = v10 * (v10 * v10);
          return (v12 - v10 * v10) * v5
               + (v10 + v12 - (v10 * v10 + v10 * v10)) * v16
               + (v10 * v10 * 3.0 - (v12 + v12)) * v3
               + (v12 + v12 - v10 * v10 * 3.0 + 1.0) * v4;
        }
      }
      else
      {
        return v3;
      }
    }
  }
  return v8;
}

void specialized AnimationPath.Element.velocity(at:)(double a1)
{
  uint64_t v1;
  double v3;
  double v4;
  double v5;
  double v6;
  Swift::Double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  _QWORD v12[6];
  _BYTE v13[81];
  char v14;

  outlined init with take of AnimationPath<Double>.Element(v1, (uint64_t)v12);
  v3 = *(double *)&v12[1];
  v4 = *(double *)&v12[2];
  v5 = *(double *)&v12[3];
  v6 = *(double *)&v12[4];
  v10 = *(double *)v12;
  v11 = *(double *)&v12[5];
  outlined init with take of AnimationPath<Double>.Element(v1, (uint64_t)v13);
  if (v14)
  {
    if (v14 == 1)
      specialized Spring.velocity<A>(target:initialVelocity:time:)(v6 - v5, v11, a1, v10, v3);
  }
  else if (v6 > 0.0 && a1 >= 0.0 && v6 >= a1)
  {
    v7 = a1 / v6;
    v8 = UnitCurve.value(at:)(a1 / v6);
    UnitCurve.velocity(at:)(v7);
    if ((LOBYTE(v11) & 1) != 0)
    {
      specialized HermiteCurve.arcLength(at:)(1.0, v10, v3, v4, v5);
      specialized HermiteCurve.parametricTime(forArcLength:)(v8 * v9, v10, v3, v4, v5);
    }
  }
}

uint64_t specialized Text.Effect.DrawableContent.endIndex.getter()
{
  uint64_t *v0;
  Swift::UInt64 v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;

  v2 = *v0;
  v1 = v0[1];
  v3 = v0[2];
  swift_beginAccess();
  v4 = *(_QWORD *)(v2 + 48);
  if (*(_QWORD *)(v4 + 16))
  {
    swift_retain();
    v5 = specialized __RawDictionaryStorage.find<A>(_:)(v1, v3);
    if ((v6 & 1) != 0)
    {
      v7 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 16 * v5);
      swift_endAccess();
      swift_bridgeObjectRetain();
      swift_release();
      v8 = *(_QWORD *)(v7 + 16);
      swift_bridgeObjectRelease();
      return v8;
    }
    swift_release();
  }
  result = swift_endAccess();
  __break(1u);
  return result;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay7SwiftUI18_ResolvedKeyframesVAFE5TrackVySd_GG_Sds5NeverOTg503_s7d5UI18_fg21V8durationSdvgSdAcAE5h9Vyx_Gcfu_N4_TG5s7KeyPathCyAKSdGTf1cn_nTf4ng_n(uint64_t a1)
{
  int64_t v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v8;
  uint64_t v9;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = MEMORY[0x24BEE4AF8];
  if (v1)
  {
    v9 = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0);
    v2 = v9;
    v4 = a1 + 64;
    do
    {
      swift_retain();
      swift_retain();
      swift_getAtKeyPath();
      swift_release();
      swift_release();
      v6 = *(_QWORD *)(v9 + 16);
      v5 = *(_QWORD *)(v9 + 24);
      if (v6 >= v5 >> 1)
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v5 > 1, v6 + 1, 1);
      *(_QWORD *)(v9 + 16) = v6 + 1;
      *(_QWORD *)(v9 + 8 * v6 + 32) = v8;
      v4 += 40;
      --v1;
    }
    while (v1);
  }
  return v2;
}

_QWORD *specialized BigTextEffect.configuration(_:)()
{
  _QWORD *v0;
  unint64_t v1;
  unint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  unint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;

  v0 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 1, MEMORY[0x24BEE4AF8]);
  v2 = v0[2];
  v1 = v0[3];
  if (v2 >= v1 >> 1)
    v0 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v1 > 1), v2 + 1, 1, v0);
  v0[2] = v2 + 1;
  v3 = &v0[4 * v2];
  v3[4] = 1;
  v3[5] = closure #1 in BigTextEffect.configuration(_:);
  v3[6] = 0;
  *((_BYTE *)v3 + 56) = 1;
  swift_bridgeObjectRetain();
  v4 = v0;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2 + 2, 1, v0);
  v6 = v4[2];
  v5 = v4[3];
  if (v6 >= v5 >> 1)
    v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v5 > 1), v6 + 1, 1, v4);
  v4[2] = v6 + 1;
  v7 = &v4[4 * v6];
  v7[4] = 2;
  v7[5] = closure #2 in BigTextEffect.configuration(_:);
  v7[6] = 0;
  *((_BYTE *)v7 + 56) = 1;
  swift_bridgeObjectRelease();
  v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 1, MEMORY[0x24BEE4AF8]);
  v10 = v8[2];
  v9 = v8[3];
  if (v10 >= v9 >> 1)
    v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v9 > 1), v10 + 1, 1, v8);
  v8[2] = v10 + 1;
  v11 = &v8[2 * v10];
  v11[4] = specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A.Text.Effect.Base.Timing, @guaranteed Text.Effect.DrawableFragment<A>, @unowned Text.Effect.QuantizationContext) -> (@owned Text.Effect.Drawable);
  v11[5] = 0;
  return v4;
}

uint64_t outlined destroy of Text.Effect.DrawableContent<BigTextEffect>(uint64_t a1)
{
  uint64_t v2;

  type metadata accessor for Text.Effect.DrawableContent<BigTextEffect>(0, &lazy cache variable for type metadata for Text.Effect.DrawableContent<BigTextEffect>, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))type metadata accessor for Text.Effect.DrawableContent);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_234FAD60C()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(v0 + 256) >= 3uLL)
    swift_bridgeObjectRelease();
  return swift_deallocObject();
}

unint64_t partial apply for closure #3 in closure #3 in BigTextEffect.configuration(_:)(unint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return closure #3 in closure #3 in BigTextEffect.configuration(_:)(a1, a2, v2 + 16, *(unsigned __int8 *)(v2 + 72), (_QWORD *)(v2 + 176), *(double *)(v2 + 64), *(double *)(v2 + 80), *(double *)(v2 + 88), *(double *)(v2 + 96), *(double *)(v2 + 104), *(double *)(v2 + 112), *(double *)(v2 + 120), *(double *)(v2 + 128), *(double *)(v2 + 136), *(double *)(v2 + 144), *(double *)(v2 + 152), *(double *)(v2 + 160), *(double *)(v2 + 168));
}

uint64_t sub_234FAD6C8()
{
  uint64_t v0;

  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(v0 + 96) >= 3uLL)
    swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocObject();
}

void type metadata accessor for Text.Effect.DrawableContent<BigTextEffect>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, unint64_t))
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    v6 = lazy protocol witness table accessor for type BigTextEffect and conformance BigTextEffect();
    v7 = a3(a1, &type metadata for BigTextEffect, v6);
    if (!v8)
      atomic_store(v7, a2);
  }
}

uint64_t type metadata accessor for MergedKeyframeTrackContent<Double, MergedKeyframeTrackContent<Double, MergedKeyframeTrackContent<Double, MergedKeyframeTrackContent<Double, MergedKeyframeTrackContent<Double, LinearKeyframe<Double>, LinearKeyframe<Double>>, LinearKeyframe<Double>>, LinearKeyframe<Double>>, LinearKeyframe<Double>>, LinearKeyframe<Double>>(uint64_t a1)
{
  return type metadata accessor for MergedKeyframeTrackContent<Double, MergedKeyframeTrackContent<Double, MergedKeyframeTrackContent<Double, MergedKeyframeTrackContent<Double, MergedKeyframeTrackContent<Double, LinearKeyframe<Double>, LinearKeyframe<Double>>, LinearKeyframe<Double>>, LinearKeyframe<Double>>, LinearKeyframe<Double>>, LinearKeyframe<Double>>(a1, &lazy cache variable for type metadata for MergedKeyframeTrackContent<Double, MergedKeyframeTrackContent<Double, MergedKeyframeTrackContent<Double, MergedKeyframeTrackContent<Double, MergedKeyframeTrackContent<Double, LinearKeyframe<Double>, LinearKeyframe<Double>>, LinearKeyframe<Double>>, LinearKeyframe<Double>>, LinearKeyframe<Double>>, LinearKeyframe<Double>>, type metadata accessor for MergedKeyframeTrackContent<Double, MergedKeyframeTrackContent<Double, MergedKeyframeTrackContent<Double, MergedKeyframeTrackContent<Double, LinearKeyframe<Double>, LinearKeyframe<Double>>, LinearKeyframe<Double>>, LinearKeyframe<Double>>, LinearKeyframe<Double>>, &lazy protocol witness table cache variable for type MergedKeyframeTrackContent<Double, MergedKeyframeTrackContent<Double, MergedKeyframeTrackContent<Double, MergedKeyframeTrackContent<Double, LinearKeyframe<Double>, LinearKeyframe<Double>>, LinearKeyframe<Double>>, LinearKeyframe<Double>>, LinearKeyframe<Double>> and conformance MergedKeyframeTrackContent<A, B, C>);
}

uint64_t type metadata accessor for MergedKeyframeTrackContent<Double, MergedKeyframeTrackContent<Double, MergedKeyframeTrackContent<Double, MergedKeyframeTrackContent<Double, LinearKeyframe<Double>, LinearKeyframe<Double>>, LinearKeyframe<Double>>, LinearKeyframe<Double>>, LinearKeyframe<Double>>(uint64_t a1)
{
  return type metadata accessor for MergedKeyframeTrackContent<Double, MergedKeyframeTrackContent<Double, MergedKeyframeTrackContent<Double, MergedKeyframeTrackContent<Double, MergedKeyframeTrackContent<Double, LinearKeyframe<Double>, LinearKeyframe<Double>>, LinearKeyframe<Double>>, LinearKeyframe<Double>>, LinearKeyframe<Double>>, LinearKeyframe<Double>>(a1, &lazy cache variable for type metadata for MergedKeyframeTrackContent<Double, MergedKeyframeTrackContent<Double, MergedKeyframeTrackContent<Double, MergedKeyframeTrackContent<Double, LinearKeyframe<Double>, LinearKeyframe<Double>>, LinearKeyframe<Double>>, LinearKeyframe<Double>>, LinearKeyframe<Double>>, type metadata accessor for MergedKeyframeTrackContent<Double, MergedKeyframeTrackContent<Double, MergedKeyframeTrackContent<Double, LinearKeyframe<Double>, LinearKeyframe<Double>>, LinearKeyframe<Double>>, LinearKeyframe<Double>>, &lazy protocol witness table cache variable for type MergedKeyframeTrackContent<Double, MergedKeyframeTrackContent<Double, MergedKeyframeTrackContent<Double, LinearKeyframe<Double>, LinearKeyframe<Double>>, LinearKeyframe<Double>>, LinearKeyframe<Double>> and conformance MergedKeyframeTrackContent<A, B, C>);
}

uint64_t type metadata accessor for MergedKeyframeTrackContent<Double, MergedKeyframeTrackContent<Double, MergedKeyframeTrackContent<Double, MergedKeyframeTrackContent<Double, MergedKeyframeTrackContent<Double, LinearKeyframe<Double>, LinearKeyframe<Double>>, LinearKeyframe<Double>>, LinearKeyframe<Double>>, LinearKeyframe<Double>>, LinearKeyframe<Double>>(uint64_t a1, uint64_t *a2, uint64_t (*a3)(uint64_t), unint64_t *a4)
{
  uint64_t result;

  result = *a2;
  if (!*a2)
  {
    a3(255);
    type metadata accessor for LinearKeyframe<Double>(255, &lazy cache variable for type metadata for LinearKeyframe<Double>, (uint64_t (*)(_QWORD, _QWORD, _UNKNOWN **))type metadata accessor for LinearKeyframe);
    lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(a4, a3, (uint64_t)&protocol conformance descriptor for MergedKeyframeTrackContent<A, B, C>);
    lazy protocol witness table accessor for type LinearKeyframe<Double> and conformance LinearKeyframe<A>();
    type metadata accessor for MergedKeyframeTrackContent();
  }
  return result;
}

uint64_t type metadata accessor for MergedKeyframeTrackContent<Double, MergedKeyframeTrackContent<Double, MergedKeyframeTrackContent<Double, LinearKeyframe<Double>, LinearKeyframe<Double>>, LinearKeyframe<Double>>, LinearKeyframe<Double>>(uint64_t a1)
{
  return type metadata accessor for MergedKeyframeTrackContent<Double, MergedKeyframeTrackContent<Double, MergedKeyframeTrackContent<Double, MergedKeyframeTrackContent<Double, MergedKeyframeTrackContent<Double, LinearKeyframe<Double>, LinearKeyframe<Double>>, LinearKeyframe<Double>>, LinearKeyframe<Double>>, LinearKeyframe<Double>>, LinearKeyframe<Double>>(a1, &lazy cache variable for type metadata for MergedKeyframeTrackContent<Double, MergedKeyframeTrackContent<Double, MergedKeyframeTrackContent<Double, LinearKeyframe<Double>, LinearKeyframe<Double>>, LinearKeyframe<Double>>, LinearKeyframe<Double>>, type metadata accessor for MergedKeyframeTrackContent<Double, MergedKeyframeTrackContent<Double, LinearKeyframe<Double>, LinearKeyframe<Double>>, LinearKeyframe<Double>>, &lazy protocol witness table cache variable for type MergedKeyframeTrackContent<Double, MergedKeyframeTrackContent<Double, LinearKeyframe<Double>, LinearKeyframe<Double>>, LinearKeyframe<Double>> and conformance MergedKeyframeTrackContent<A, B, C>);
}

uint64_t type metadata accessor for MergedKeyframeTrackContent<Double, MergedKeyframeTrackContent<Double, LinearKeyframe<Double>, LinearKeyframe<Double>>, LinearKeyframe<Double>>(uint64_t a1)
{
  return type metadata accessor for MergedKeyframeTrackContent<Double, MergedKeyframeTrackContent<Double, MergedKeyframeTrackContent<Double, MergedKeyframeTrackContent<Double, MergedKeyframeTrackContent<Double, LinearKeyframe<Double>, LinearKeyframe<Double>>, LinearKeyframe<Double>>, LinearKeyframe<Double>>, LinearKeyframe<Double>>, LinearKeyframe<Double>>(a1, &lazy cache variable for type metadata for MergedKeyframeTrackContent<Double, MergedKeyframeTrackContent<Double, LinearKeyframe<Double>, LinearKeyframe<Double>>, LinearKeyframe<Double>>, (uint64_t (*)(uint64_t))type metadata accessor for MergedKeyframeTrackContent<Double, LinearKeyframe<Double>, LinearKeyframe<Double>>, &lazy protocol witness table cache variable for type MergedKeyframeTrackContent<Double, LinearKeyframe<Double>, LinearKeyframe<Double>> and conformance MergedKeyframeTrackContent<A, B, C>);
}

uint64_t type metadata accessor for MergedKeyframeTrackContent<Double, LinearKeyframe<Double>, LinearKeyframe<Double>>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for MergedKeyframeTrackContent<Double, LinearKeyframe<Double>, LinearKeyframe<Double>>;
  if (!lazy cache variable for type metadata for MergedKeyframeTrackContent<Double, LinearKeyframe<Double>, LinearKeyframe<Double>>)
  {
    type metadata accessor for LinearKeyframe<Double>(255, &lazy cache variable for type metadata for LinearKeyframe<Double>, (uint64_t (*)(_QWORD, _QWORD, _UNKNOWN **))type metadata accessor for LinearKeyframe);
    lazy protocol witness table accessor for type LinearKeyframe<Double> and conformance LinearKeyframe<A>();
    type metadata accessor for MergedKeyframeTrackContent();
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type LinearKeyframe<Double> and conformance LinearKeyframe<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type LinearKeyframe<Double> and conformance LinearKeyframe<A>;
  if (!lazy protocol witness table cache variable for type LinearKeyframe<Double> and conformance LinearKeyframe<A>)
  {
    type metadata accessor for LinearKeyframe<Double>(255, &lazy cache variable for type metadata for LinearKeyframe<Double>, (uint64_t (*)(_QWORD, _QWORD, _UNKNOWN **))type metadata accessor for LinearKeyframe);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for LinearKeyframe<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LinearKeyframe<Double> and conformance LinearKeyframe<A>);
  }
  return result;
}

uint64_t partial apply for specialized closure #1 in _ResolvedKeyframes.append<A>(keyPath:path:)(uint64_t a1, double a2)
{
  uint64_t v2;

  return specialized closure #1 in _ResolvedKeyframes.append<A>(keyPath:path:)(a2, a1, *(_QWORD *)(v2 + 16));
}

uint64_t objectdestroy_6Tm()
{
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for specialized closure #2 in _ResolvedKeyframes.append<A>(keyPath:path:)(double a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t (*v4)(uint64_t *, _QWORD);
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v9;

  v3 = *(_QWORD *)(v1 + 16);
  v4 = (uint64_t (*)(uint64_t *, _QWORD))swift_modifyAtWritableKeyPath();
  v6 = v5;
  specialized AnimationPath.velocity(at:)(v3, a1);
  *v6 = v7;
  return v4(&v9, 0);
}

uint64_t outlined init with take of AnimationPath<Double>.Element(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for LinearKeyframe<Double>(0, &lazy cache variable for type metadata for AnimationPath<Double>.Element, (uint64_t (*)(_QWORD, _QWORD, _UNKNOWN **))type metadata accessor for AnimationPath.Element);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void type metadata accessor for LinearKeyframe<Double>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(_QWORD, _QWORD, _UNKNOWN **))
{
  unint64_t v4;
  uint64_t v5;

  if (!*a2)
  {
    v4 = a3(0, MEMORY[0x24BEE13C8], &protocol witness table for Double);
    if (!v5)
      atomic_store(v4, a2);
  }
}

void type metadata accessor for Result<(integralResult: Double, estimatedAbsoluteError: Double), Quadrature.Error>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for Result<(integralResult: Double, estimatedAbsoluteError: Double), Quadrature.Error>)
  {
    type metadata accessor for (integralResult: Double, estimatedAbsoluteError: Double)();
    type metadata accessor for Quadrature.Error();
    lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type Quadrature.Error and conformance Quadrature.Error, (uint64_t (*)(uint64_t))MEMORY[0x24BEDF4E0], MEMORY[0x24BEDF4E8]);
    v0 = type metadata accessor for Result();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Result<(integralResult: Double, estimatedAbsoluteError: Double), Quadrature.Error>);
  }
}

void type metadata accessor for (integralResult: Double, estimatedAbsoluteError: Double)()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!lazy cache variable for type metadata for (integralResult: Double, estimatedAbsoluteError: Double))
  {
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (integralResult: Double, estimatedAbsoluteError: Double));
  }
}

double partial apply for specialized closure #1 in HermiteCurve.arcLength(at:)(double a1)
{
  uint64_t v1;

  return specialized closure #1 in HermiteCurve.arcLength(at:)(a1, **(double **)(v1 + 16), *(double *)(*(_QWORD *)(v1 + 16) + 8), *(double *)(*(_QWORD *)(v1 + 16) + 16), *(double *)(*(_QWORD *)(v1 + 16) + 24));
}

void type metadata accessor for IndexingIterator<Text.Effect.DrawableContent<BigTextEffect>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for IndexingIterator<Text.Effect.DrawableContent<BigTextEffect>>)
  {
    type metadata accessor for Text.Effect.DrawableContent<BigTextEffect>(255, &lazy cache variable for type metadata for Text.Effect.DrawableContent<BigTextEffect>, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))type metadata accessor for Text.Effect.DrawableContent);
    lazy protocol witness table accessor for type Text.Effect.DrawableContent<BigTextEffect> and conformance Text.Effect.DrawableContent<A>();
    v0 = type metadata accessor for IndexingIterator();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for IndexingIterator<Text.Effect.DrawableContent<BigTextEffect>>);
  }
}

unint64_t lazy protocol witness table accessor for type Text.Effect.DrawableContent<BigTextEffect> and conformance Text.Effect.DrawableContent<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type Text.Effect.DrawableContent<BigTextEffect> and conformance Text.Effect.DrawableContent<A>;
  if (!lazy protocol witness table cache variable for type Text.Effect.DrawableContent<BigTextEffect> and conformance Text.Effect.DrawableContent<A>)
  {
    type metadata accessor for Text.Effect.DrawableContent<BigTextEffect>(255, &lazy cache variable for type metadata for Text.Effect.DrawableContent<BigTextEffect>, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))type metadata accessor for Text.Effect.DrawableContent);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Text.Effect.DrawableContent<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.Effect.DrawableContent<BigTextEffect> and conformance Text.Effect.DrawableContent<A>);
  }
  return result;
}

uint64_t outlined init with copy of Text.Effect.DrawableContent<BigTextEffect>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for Text.Effect.DrawableContent<BigTextEffect>(0, &lazy cache variable for type metadata for Text.Effect.DrawableContent<BigTextEffect>, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))type metadata accessor for Text.Effect.DrawableContent);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t storeEnumTagSinglePayload for BigTextEffect.LayoutState(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_234FADD40 + 4 * byte_2352BA655[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_234FADD74 + 4 * byte_2352BA650[v4]))();
}

uint64_t sub_234FADD74(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_234FADD7C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x234FADD84);
  return result;
}

uint64_t sub_234FADD90(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x234FADD98);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_234FADD9C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_234FADDA4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for BigTextEffect.LayoutState()
{
  return &type metadata for BigTextEffect.LayoutState;
}

BOOL static HoverEffectContext.Source.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;

  v2 = *a1;
  v3 = *a2;
  v4 = *((unsigned __int8 *)a2 + 8);
  if (!*((_BYTE *)a1 + 8))
  {
    if (!*((_BYTE *)a2 + 8))
      return (_DWORD)v2 == (_DWORD)v3;
    return 0;
  }
  if (*((_BYTE *)a1 + 8) == 1)
  {
    if (v4 == 1)
      return v2 == v3;
    return 0;
  }
  return v4 == 2 && v3 == 0;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance HoverEffectContext.Source(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;

  v2 = *a1;
  v3 = *a2;
  v4 = *((unsigned __int8 *)a2 + 8);
  if (!*((_BYTE *)a1 + 8))
  {
    if (!*((_BYTE *)a2 + 8))
      return (_DWORD)v2 == (_DWORD)v3;
    return 0;
  }
  if (*((_BYTE *)a1 + 8) == 1)
  {
    if (v4 == 1)
      return v2 == v3;
    return 0;
  }
  return v4 == 2 && v3 == 0;
}

void HoverEffectContext.source.getter(uint64_t a1@<X8>)
{
  uint64_t v1;
  char v2;

  v2 = *(_BYTE *)(v1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)v1;
  *(_BYTE *)(a1 + 8) = v2;
}

uint64_t HoverEffectContext.implicitAccessibilityID.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 16);
}

uint64_t HoverEffectContext.isModifyingImageView.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 24);
}

uint64_t HoverEffectContext.shouldApplySystemEffectAsBackground.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 25);
}

void HoverEffectContext.state.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 26);
}

uint64_t HoverEffectContext.init(source:implicitAccessibilityID:isModifyingImageView:shouldApplySystemEffectAsBackground:inheritedState:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, char a3@<W2>, char a4@<W3>, char *a5@<X4>, uint64_t a6@<X8>)
{
  char v6;
  char v7;

  v6 = *(_BYTE *)(result + 8);
  v7 = *a5;
  *(_QWORD *)a6 = *(_QWORD *)result;
  *(_BYTE *)(a6 + 8) = v6;
  *(_QWORD *)(a6 + 16) = a2;
  *(_BYTE *)(a6 + 24) = a3;
  *(_BYTE *)(a6 + 25) = a4;
  *(_BYTE *)(a6 + 26) = v7;
  return result;
}

uint64_t static HoverEffectContext.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  BOOL v7;

  v2 = *a1;
  v3 = *a2;
  v4 = *((unsigned __int8 *)a2 + 8);
  if (*((_BYTE *)a1 + 8))
  {
    if (*((_BYTE *)a1 + 8) == 1)
    {
      if (v4 != 1 || v2 != v3)
        return 0;
    }
    else if (v4 != 2 || v3 != 0)
    {
      return 0;
    }
  }
  else
  {
    if (*((_BYTE *)a2 + 8))
      v7 = 0;
    else
      v7 = (_DWORD)v2 == (_DWORD)v3;
    if (!v7)
      return 0;
  }
  return *((unsigned __int8 *)a1 + 26) ^ *((unsigned __int8 *)a2 + 26) ^ 1u;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance HoverEffectContext(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  BOOL v7;

  v2 = *a1;
  v3 = *a2;
  v4 = *((unsigned __int8 *)a2 + 8);
  if (*((_BYTE *)a1 + 8))
  {
    if (*((_BYTE *)a1 + 8) == 1)
    {
      if (v4 != 1 || v2 != v3)
        return 0;
    }
    else if (v4 != 2 || v3 != 0)
    {
      return 0;
    }
  }
  else
  {
    if (*((_BYTE *)a2 + 8))
      v7 = 0;
    else
      v7 = (_DWORD)v2 == (_DWORD)v3;
    if (!v7)
      return 0;
  }
  return *((unsigned __int8 *)a1 + 26) ^ *((unsigned __int8 *)a2 + 26) ^ 1u;
}

uint64_t static HoverEffectContext.Value.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  int v2;
  char v3;
  int v4;

  v2 = *a1;
  v3 = v2 == 2;
  v4 = *a2;
  if (v4 != 2)
    v3 = 0;
  if (v2 != 2 && v4 != 2)
    v3 = ((v2 & 1) == 0) ^ v4;
  return v3 & 1;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance HoverEffectContext.Value(unsigned __int8 *a1, unsigned __int8 *a2)
{
  int v2;
  char v3;
  int v4;

  v2 = *a1;
  v3 = v2 == 2;
  v4 = *a2;
  if (v4 != 2)
    v3 = 0;
  if (v2 != 2 && v4 != 2)
    v3 = ((v2 & 1) == 0) ^ v4;
  return v3 & 1;
}

SwiftUI::HoverEffectContext::Properties __swiftcall HoverEffectContext.Properties.init()()
{
  _BYTE *v0;
  SwiftUI::HoverEffectContext::Properties result;

  *v0 = 0;
  return result;
}

uint64_t HoverEffectContext.Properties.isDisabled.getter()
{
  unsigned __int8 *v0;

  return *v0;
}

BOOL static HoverEffectContext.Properties.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

void HoverEffectContext.State.leafContext.getter(_BYTE *a1@<X8>)
{
  _BYTE *v1;

  *a1 = *v1;
}

SwiftUI::HoverEffectContext::State __swiftcall HoverEffectContext.State.init()()
{
  _BYTE *v0;
  SwiftUI::HoverEffectContext::State result;

  *v0 = 0;
  return result;
}

Swift::Void __swiftcall HoverEffectContext.State.appendDisabled(_:)(Swift::Bool a1)
{
  _BYTE *v1;

  if (a1 && (*v1 & 1) == 0)
    *v1 = 1;
}

BOOL HoverEffectContext.isEnabled.getter()
{
  uint64_t v0;

  return (*(_BYTE *)(v0 + 26) & 1) == 0;
}

Swift::Void __swiftcall HoverEffectContext.appendDisabled(_:)(Swift::Bool a1)
{
  uint64_t v1;

  if (a1 && (*(_BYTE *)(v1 + 26) & 1) == 0)
    *(_BYTE *)(v1 + 26) = 1;
}

uint64_t getEnumTagSinglePayload for HoverEffectContext(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 27))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 24);
  v4 = v3 >= 2;
  v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for HoverEffectContext(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_BYTE *)(result + 26) = 0;
    *(_WORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 27) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 27) = 0;
    if (a2)
      *(_BYTE *)(result + 24) = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for HoverEffectContext()
{
  return &type metadata for HoverEffectContext;
}

ValueMetadata *type metadata accessor for HoverEffectContext.Source()
{
  return &type metadata for HoverEffectContext.Source;
}

uint64_t getEnumTagSinglePayload for HoverEffectContext.Value(unsigned __int8 *a1, unsigned int a2)
{
  unsigned int v2;
  unsigned int v3;
  uint64_t v4;
  unsigned int v6;
  BOOL v7;
  unsigned int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFE)
  {
    v6 = *a1;
    v7 = v6 >= 2;
    v8 = (v6 + 2147483646) & 0x7FFFFFFF;
    if (!v7)
      v8 = -1;
    if (v8 + 1 >= 2)
      return v8;
    else
      return 0;
  }
  else
  {
    v2 = a2 + 2;
    if (a2 + 2 >= 0xFFFF00)
      v3 = 4;
    else
      v3 = 2;
    if (v2 >> 8 < 0xFF)
      v3 = 1;
    if (v2 >= 0x100)
      v4 = v3;
    else
      v4 = 0;
    return ((uint64_t (*)(void))((char *)&loc_234FAE1B0 + 4 * asc_2352BA780[v4]))();
  }
}

uint64_t storeEnumTagSinglePayload for HoverEffectContext.Value(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  unsigned int v3;
  int v4;
  uint64_t v5;

  v3 = a3 + 2;
  if (a3 + 2 >= 0xFFFF00)
    v4 = 4;
  else
    v4 = 2;
  if (v3 >> 8 < 0xFF)
    v4 = 1;
  if (v3 >= 0x100)
    LODWORD(v5) = v4;
  else
    LODWORD(v5) = 0;
  if (a3 >= 0xFE)
    v5 = v5;
  else
    v5 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_234FAE268 + 4 * byte_2352BA78A[v5]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_234FAE29C + 4 * byte_2352BA785[v5]))();
}

uint64_t sub_234FAE29C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_234FAE2A4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x234FAE2ACLL);
  return result;
}

uint64_t sub_234FAE2B8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x234FAE2C0);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_234FAE2C4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_234FAE2CC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for HoverEffectContext.Value()
{
  return &type metadata for HoverEffectContext.Value;
}

ValueMetadata *type metadata accessor for HoverEffectContext.Properties()
{
  return &type metadata for HoverEffectContext.Properties;
}

uint64_t storeEnumTagSinglePayload for HoverEffectContext.Properties(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_234FAE348 + 4 * byte_2352BA794[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_234FAE37C + 4 * byte_2352BA78F[v4]))();
}

uint64_t sub_234FAE37C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_234FAE384(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x234FAE38CLL);
  return result;
}

uint64_t sub_234FAE398(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x234FAE3A0);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_234FAE3A4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_234FAE3AC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for HoverEffectContext.State()
{
  return &type metadata for HoverEffectContext.State;
}

uint64_t thunk for @callee_guaranteed (@guaranteed NSTextLayoutFragment) -> (@unowned Bool)(uint64_t a1, uint64_t (*a2)(void))
{
  return a2() & 1;
}

uint64_t thunk for @escaping @callee_guaranteed (@guaranteed NSTextLayoutFragment) -> (@unowned Bool)(uint64_t a1, void *a2)
{
  uint64_t (*v2)(void);
  id v3;
  char v4;

  v2 = *(uint64_t (**)(void))(a1 + 32);
  v3 = a2;
  v4 = v2();

  return v4 & 1;
}

uint64_t ResolvedStyledText.TextLayoutManager.__allocating_init(storage:layoutProperties:layoutMargins:stylePadding:archiveOptions:isCollapsible:features:suffix:attachments:styles:transitions:scaleFactorOverride:)(void *a1, uint64_t *a2, uint64_t a3, char *a4, char a5, __int16 *a6, uint64_t a7, uint64_t *a8, double a9, double a10, double a11, double a12, uint64_t a13, uint64_t a14)
{
  swift_allocObject();
  return specialized ResolvedStyledText.TextLayoutManager.init(storage:layoutProperties:layoutMargins:stylePadding:archiveOptions:isCollapsible:features:suffix:attachments:styles:transitions:scaleFactorOverride:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14);
}

uint64_t ResolvedStyledText.TextLayoutManager.Cache.find(measuredSize:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>, double a3@<D0>, double a4@<D1>)
{
  uint64_t v4;
  __int128 v5;
  _BYTE *v6;
  __int128 v7;
  __int16 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int16 v13;
  __int16 v14;

  v4 = *(_QWORD *)(result + 16);
  v5 = 0uLL;
  if (v4)
  {
    v6 = (_BYTE *)(result + 113);
    while (1)
    {
      v7 = *(_OWORD *)(v6 - 65);
      if (*(double *)&v7 == a3 && *(double *)(v6 - 57) == a4)
        break;
      v6 += 88;
      if (!--v4)
        goto LABEL_8;
    }
    v5 = *(_OWORD *)(v6 - 81);
    v10 = *(_OWORD *)(v6 - 49);
    v11 = *(_OWORD *)(v6 - 33);
    v12 = *(_OWORD *)(v6 - 17);
    v13 = *(v6 - 1);
    if (*v6)
      v14 = 256;
    else
      v14 = 0;
    v9 = v14 | v13;
  }
  else
  {
LABEL_8:
    v9 = 512;
    v7 = 0uLL;
    v10 = 0uLL;
    v11 = 0uLL;
    v12 = 0uLL;
  }
  *(_OWORD *)a2 = v5;
  *(_OWORD *)(a2 + 16) = v7;
  *(_OWORD *)(a2 + 32) = v10;
  *(_OWORD *)(a2 + 48) = v11;
  *(_OWORD *)(a2 + 64) = v12;
  *(_WORD *)(a2 + 80) = v9;
  return result;
}

id ResolvedStyledText.TextLayoutManager.LayoutManager.layoutManager(for:original:)(id a1, double a2)
{
  uint64_t v2;
  void *v5;
  id v6;
  uint64_t v7;
  void *v8;
  id v9;
  void (*v10)(int, Swift::Int, uint64_t, uint64_t);
  uint64_t v11;
  id v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  id v17;
  id v18;
  id result;
  void *v20;
  id v21;
  void *v22;
  id v23;
  id v24;
  _QWORD aBlock[6];
  void *v26;

  if (a2 == 1.0)
  {
    if (*(_BYTE *)(v2 + 32) == 1)
    {
      objc_msgSend(*(id *)v2, sel_setAttributedString_, a1);
      v5 = *(void **)(v2 + 8);
      v6 = objc_msgSend(v5, sel_documentRange);
      objc_msgSend(v5, sel_invalidateLayoutForRange_, v6);

      v7 = 0;
      *(_BYTE *)(v2 + 32) = 0;
LABEL_20:
      v24 = *(id *)(v2 + 8);
      outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed @escaping @callee_guaranteed (@unowned Bool) -> ()) -> ())?(v7);
      return v24;
    }
LABEL_19:
    v7 = 0;
    goto LABEL_20;
  }
  v8 = *(void **)(v2 + 24);
  if (v8)
  {
    v9 = v8;
  }
  else
  {
    if (!a1)
      goto LABEL_19;
    objc_msgSend(a1, sel_mutableCopy);
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    type metadata accessor for CAPresentationModifier(0, (unint64_t *)&lazy cache variable for type metadata for NSMutableAttributedString);
    if ((swift_dynamicCast() & 1) == 0)
      goto LABEL_19;
    v8 = v26;
    if (!v26)
      goto LABEL_19;
  }
  if (*(_QWORD *)(v2 + 24) && *(double *)(v2 + 16) == a2)
  {
    v10 = 0;
    v7 = 0;
    if ((*(_BYTE *)(v2 + 32) & 1) != 0)
      goto LABEL_15;
    goto LABEL_14;
  }
  if (one-time initialization token for kitFont != -1)
    swift_once();
  v11 = static NSAttributedStringKey.kitFont;
  v12 = v8;
  v13 = objc_msgSend(v12, sel_length);

  v14 = swift_allocObject();
  *(_QWORD *)(v14 + 16) = a1;
  *(double *)(v14 + 24) = a2;
  *(_QWORD *)(v14 + 32) = v12;
  v15 = swift_allocObject();
  *(_QWORD *)(v15 + 16) = partial apply for closure #1 in ResolvedStyledText.TextLayoutManager.LayoutManager.layoutManager(for:original:);
  *(_QWORD *)(v15 + 24) = v14;
  aBlock[4] = partial apply for thunk for @callee_guaranteed (@guaranteed [NSAttributedStringKey : Any], @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ();
  aBlock[5] = v15;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed (@in_guaranteed Any?, @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ();
  aBlock[3] = &block_descriptor_12_4;
  v16 = _Block_copy(aBlock);
  v17 = a1;
  swift_retain();
  v18 = v12;
  swift_release();
  objc_msgSend(v18, sel_enumerateAttribute_inRange_options_usingBlock_, v11, 0, v13, 0, v16);
  _Block_release(v16);
  LOBYTE(v11) = swift_isEscapingClosureAtFileLocation();
  result = (id)swift_release();
  if ((v11 & 1) == 0)
  {
    v20 = *(void **)(v2 + 24);
    v21 = v18;

    *(double *)(v2 + 16) = a2;
    *(_QWORD *)(v2 + 24) = v8;
    v10 = partial apply for closure #1 in ResolvedStyledText.TextLayoutManager.LayoutManager.layoutManager(for:original:);
LABEL_14:
    objc_msgSend(*(id *)v2, sel_setAttributedString_, v8);
    v22 = *(void **)(v2 + 8);
    v23 = objc_msgSend(v22, sel_documentRange);
    objc_msgSend(v22, sel_invalidateLayoutForRange_, v23);

    v7 = (uint64_t)v10;
LABEL_15:

    *(_BYTE *)(v2 + 32) = 1;
    goto LABEL_20;
  }
  __break(1u);
  return result;
}

void closure #1 in ResolvedStyledText.TextLayoutManager.LayoutManager.layoutManager(for:original:)(int a1, Swift::Int at, double a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7)
{
  CTFontRef_optional v9;
  const __CTFont *value;
  const __CTFont *v11;
  CGFloat v12;
  const __CTFontDescriptor *v13;
  CTFontRef v14;
  const __CTFont *v15;

  if (a6)
  {
    v9.value = NSAttributedString.kitFont(at:)(at).value;
    if (v9.value)
    {
      value = v9.value;
      if (a3 == 1.0)
      {
        v11 = v9.value;
      }
      else
      {
        v12 = CTFontGetSize(v9.value) * a3;
        v13 = CTFontCopyFontDescriptor(value);
        v14 = CTFontCreateWithFontDescriptor(v13, v12, 0);

        v11 = v14;
      }
      v15 = v11;
      if (one-time initialization token for kitFont != -1)
        swift_once();
      objc_msgSend(a7, sel_addAttribute_value_range_, static NSAttributedStringKey.kitFont);

    }
  }
}

uint64_t ResolvedStyledText.TextLayoutManager.minorAxisIsFlexible.getter()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  _OWORD v4[2];

  v1 = *(void **)(v0 + 192);
  if (v1 && (uint64_t)objc_msgSend(*(id *)(v0 + 192), sel_length) >= 1)
  {
    if (one-time initialization token for updateSchedule != -1)
      swift_once();
    v2 = static NSAttributedStringKey.updateSchedule;
    objc_msgSend(v1, sel_length);
    if (objc_msgSend(v1, sel_attribute_atIndex_effectiveRange_, v2, 0, 0))
    {
      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
      outlined destroy of Any?((uint64_t)v4);
      return *(_BYTE *)(v0 + 232) & 1;
    }
    memset(v4, 0, sizeof(v4));
    outlined destroy of Any?((uint64_t)v4);
  }
  return 0;
}

BOOL ResolvedStyledText.TextLayoutManager.majorAxis.getter()
{
  uint64_t v0;

  swift_beginAccess();
  return (*(_BYTE *)(v0 + 96) & 1) == 0;
}

uint64_t ResolvedStyledText.TextLayoutManager.drawingMargins.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  __int128 v5;
  __int128 v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  _OWORD v17[2];
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;

  v1 = type metadata accessor for FloatingPointRoundingRule();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x24BDAC7A8](v1);
  v4 = (char *)v17 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*(_BYTE *)(v0 + 320) & 1) != 0)
  {
    if (*(_QWORD *)(v0 + 192))
    {
      NSAttributedString.maxFontMetrics.getter((uint64_t)v17);
      v5 = v17[0];
      v6 = v17[1];
      v8 = v18;
      v7 = v19;
      v9 = v20;
      v10 = v21;
    }
    else
    {
      v5 = 0uLL;
      v8 = 0.0;
      v7 = 0.0;
      v9 = 0.0;
      v10 = 0.0;
      v6 = 0uLL;
    }
    *(_OWORD *)(v0 + 256) = v5;
    *(_OWORD *)(v0 + 272) = v6;
    *(double *)(v0 + 288) = v8;
    *(double *)(v0 + 296) = v7;
    *(double *)(v0 + 304) = v9;
    *(double *)(v0 + 312) = v10;
    *(_BYTE *)(v0 + 320) = 0;
  }
  else
  {
    v9 = *(double *)(v0 + 304);
    v10 = *(double *)(v0 + 312);
    v8 = *(double *)(v0 + 288);
    v7 = *(double *)(v0 + 296);
  }
  swift_beginAccess();
  v11 = v8
      + ResolvedStyledText.lineHeightScalingAdjustment(lineHeightMultiple:maximumLineHeight:minimumLineHeight:)(*(double *)(v0 + 64), *(double *)(v0 + 72), *(double *)(v0 + 80))+ *(double *)(v0 + 200);
  v12 = v7 + *(double *)(v0 + 208);
  v13 = v9 + *(double *)(v0 + 216);
  v14 = v10 + *(double *)(v0 + 224);
  (*(void (**)(char *, _QWORD, uint64_t))(v2 + 104))(v4, *MEMORY[0x24BEE38E0], v1);
  v15 = *(double *)(v0 + 112);
  v24 = v12;
  v25 = v11;
  v22 = v14;
  v23 = v13;
  specialized FloatingPoint.round(_:toMultipleOf:)(v4, v15);
  specialized FloatingPoint.round(_:toMultipleOf:)(v4, v15);
  specialized FloatingPoint.round(_:toMultipleOf:)(v4, v15);
  specialized FloatingPoint.round(_:toMultipleOf:)(v4, v15);
  return (*(uint64_t (**)(char *, uint64_t))(v2 + 8))(v4, v1);
}

void one-time initialization function for lineFragmentPadding()
{
  static ResolvedStyledText.TextLayoutManager.lineFragmentPadding = 0;
}

double ResolvedStyledText.TextLayoutManager.sizeThatFits(_:)(uint64_t a1)
{
  uint64_t v1;
  double v2;
  double v3;
  double v5;

  if (*(_BYTE *)(a1 + 8))
    v2 = INFINITY;
  else
    v2 = *(double *)a1;
  if (*(_BYTE *)(a1 + 24))
    v3 = INFINITY;
  else
    v3 = *(double *)(a1 + 16);
  swift_beginAccess();
  swift_retain();
  specialized ResolvedStyledText.TextLayoutManager.Cache.metrics(requestedSize:body:)(v1 + 392, v1, (uint64_t)&v5, v2, v3);
  swift_endAccess();
  swift_release();
  return v5;
}

CGSize __swiftcall ResolvedStyledText.TextLayoutManager.size(in:)(CGSize in)
{
  uint64_t v1;
  double height;
  double width;
  double v4;
  double v5;
  CGSize result;
  _QWORD v7[9];

  height = in.height;
  width = in.width;
  swift_beginAccess();
  swift_retain();
  specialized ResolvedStyledText.TextLayoutManager.Cache.metrics(requestedSize:body:)(v1 + 392, v1, (uint64_t)v7, width, height);
  swift_endAccess();
  swift_release();
  v4 = *(double *)v7;
  v5 = *(double *)&v7[1];
  result.height = v5;
  result.width = v4;
  return result;
}

uint64_t ResolvedStyledText.TextLayoutManager.drawingScale(size:)(double a1, double a2)
{
  uint64_t v2;
  uint64_t result;
  _BYTE v6[72];

  result = swift_beginAccess();
  if (*(_BYTE *)(v2 + 184) == 1)
  {
    result = swift_beginAccess();
    if (*(double *)(v2 + 48) != 1.0)
    {
      swift_beginAccess();
      swift_retain();
      specialized ResolvedStyledText.TextLayoutManager.Cache.metrics(requestedSize:body:)(v2 + 392, v2, (uint64_t)v6, a1, a2);
      swift_endAccess();
      return swift_release();
    }
  }
  return result;
}

__n128 ResolvedStyledText.TextLayoutManager.metrics(in:layoutMargins:)@<Q0>(uint64_t a1@<X8>, double a2@<D0>, double a3@<D1>)
{
  uint64_t v3;
  __int128 v7;
  __n128 result;
  _OWORD v9[4];
  __int16 v10;

  swift_beginAccess();
  swift_retain();
  specialized ResolvedStyledText.TextLayoutManager.Cache.metrics(requestedSize:body:)(v3 + 392, v3, (uint64_t)v9, a2, a3);
  swift_endAccess();
  swift_release();
  v7 = v9[3];
  *(_OWORD *)(a1 + 32) = v9[2];
  *(_OWORD *)(a1 + 48) = v7;
  *(_WORD *)(a1 + 64) = v10;
  result = (__n128)v9[1];
  *(_OWORD *)a1 = v9[0];
  *(__n128 *)(a1 + 16) = result;
  return result;
}

void Text.Layout.offset(by:)(uint64_t a1@<X8>, double a2@<D0>, double a3@<D1>)
{
  uint64_t *v3;
  uint64_t v6;
  char v7;
  uint64_t v8;
  int64_t v9;
  uint64_t v10;
  _DWORD *v11;
  void *v12;
  uint64_t v13;
  char v14;
  double v15;
  double v16;
  int v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v6 = *v3;
  v7 = *((_BYTE *)v3 + 8);
  v8 = v3[2];
  if (a2 == 0.0 && a3 == 0.0)
  {
    *(_QWORD *)a1 = v6;
    *(_BYTE *)(a1 + 8) = v7;
    *(_QWORD *)(a1 + 16) = v8;
    swift_bridgeObjectRetain();
  }
  else
  {
    v9 = *(_QWORD *)(v6 + 16);
    v10 = MEMORY[0x24BEE4AF8];
    if (v9)
    {
      v21 = v7;
      v22 = v8;
      v23 = a1;
      v24 = MEMORY[0x24BEE4AF8];
      swift_bridgeObjectRetain();
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v9, 0);
      v10 = v24;
      v11 = (_DWORD *)(v6 + 72);
      do
      {
        v12 = (void *)*((_QWORD *)v11 - 5);
        v13 = *((_QWORD *)v11 - 4);
        v14 = *((_BYTE *)v11 - 24);
        v15 = *((double *)v11 - 2);
        v16 = *((double *)v11 - 1);
        v17 = *v11;
        outlined copy of Text.Layout.Line.Line(v12, v13, v14);
        v19 = *(_QWORD *)(v24 + 16);
        v18 = *(_QWORD *)(v24 + 24);
        if (v19 >= v18 >> 1)
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v18 > 1, v19 + 1, 1);
        *(_QWORD *)(v24 + 16) = v19 + 1;
        v20 = v24 + 48 * v19;
        *(_QWORD *)(v20 + 32) = v12;
        *(_QWORD *)(v20 + 40) = v13;
        *(_BYTE *)(v20 + 48) = v14;
        *(double *)(v20 + 56) = v15 + a2;
        *(double *)(v20 + 64) = v16 + a3;
        *(_DWORD *)(v20 + 72) = v17;
        v11 += 12;
        --v9;
      }
      while (v9);
      swift_bridgeObjectRelease();
      v8 = v22;
      a1 = v23;
      v7 = v21;
    }
    *(_QWORD *)a1 = v10;
    *(_BYTE *)(a1 + 8) = v7;
    *(_QWORD *)(a1 + 16) = v8;
  }
}

void ResolvedStyledText.TextLayoutManager.metrics(scale:requestedSize:)(char a1@<W0>, uint64_t a2@<X8>, double a3@<D0>, double a4@<D1>, double a5@<D2>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v12;
  char *v13;
  void *v14;
  id v15;
  double v16;
  double v17;
  double v18;
  int v19;
  double v20;
  double v21;
  double v22;
  void *v23;
  void *v24;
  uint64_t (*v25)();
  unint64_t v26;
  unsigned int v27;
  double v28;
  double v29;
  double v30;
  unsigned int v31;
  char *v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  id v37;
  void *v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  id v43;
  CGFloat v44;
  uint64_t v45;
  uint64_t v46;
  CGFloat v47;
  uint64_t v48;
  char v49;
  double y;
  double x;
  double height;
  double width;
  uint64_t v54;
  double *v55;
  double v56;
  double TypographicBounds;
  double v58;
  double v59;
  double v60;
  double v61;
  void *v62;
  uint64_t v63;
  char v64;
  double v65;
  double v66;
  const __CTLine *v67;
  char v68;
  char v69;
  uint64_t v70;
  uint64_t v71;
  char v72;
  char v73;
  _BOOL4 IsNull;
  double v75;
  double v76;
  double v77;
  double MinX;
  double v79;
  double MaxX;
  char v81;
  CGFloat v82;
  double v83;
  double v84;
  CGFloat v85;
  double v86;
  CGFloat v87;
  CGFloat v88;
  uint64_t v89;
  uint64_t v90;
  double v91;
  double v92;
  double v93;
  double v94;
  double v95;
  uint64_t v96;
  double v97;
  double v98;
  double v99;
  id v100;
  CGFloat v101;
  uint64_t v102;
  uint64_t v103;
  unsigned int v104;
  double v105;
  uint64_t v106;
  uint64_t v107;
  char *v108;
  int v109;
  int v110;
  uint64_t v111;
  uint64_t v112;
  CGFloat leading;
  CGFloat descent;
  CGFloat aBlock;
  uint64_t v116;
  uint64_t (*v117)(uint64_t, void *);
  void *v118;
  uint64_t (*v119)();
  uint64_t v120;
  __int128 v121;
  uint64_t v122;
  uint64_t v123;
  BOOL v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  char v128;
  uint64_t v129;
  CGRect v130;
  CGRect v131;
  CGRect v132;
  CGRect v133;
  CGRect v134;
  CGRect v135;
  CGRect v136;

  v6 = v5;
  v129 = *MEMORY[0x24BDAC8D0];
  v112 = type metadata accessor for FloatingPointRoundingRule();
  v111 = *(_QWORD *)(v112 - 8);
  MEMORY[0x24BDAC7A8](v112);
  v13 = (char *)&v96 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = *(void **)(v5 + 192);
  swift_beginAccess();
  v15 = ResolvedStyledText.TextLayoutManager.LayoutManager.layoutManager(for:original:)(v14, a3);
  swift_endAccess();
  if ((a1 & 1) != 0)
    v16 = a5;
  else
    v16 = a4;
  if ((a1 & 1) != 0)
    a5 = a4;
  swift_beginAccess();
  v17 = a5 - (*(double *)(v5 + 152) + *(double *)(v5 + 168));
  if (v17 < 0.0)
    v17 = 0.0;
  v18 = v16 - (*(double *)(v5 + 144) + *(double *)(v5 + 160));
  if (v18 < 0.0)
    v18 = 0.0;
  v19 = a1 & 1;
  if ((a1 & 1) != 0)
    v20 = v18;
  else
    v20 = v17;
  if ((a1 & 1) != 0)
    v21 = v17;
  else
    v21 = v18;
  swift_beginAccess();
  v22 = *(double *)(v6 + 104) + v21;
  v23 = *(void **)(v6 + 328);
  v103 = *(_QWORD *)(v6 + 336);
  v102 = *(_QWORD *)(v6 + 344);
  v24 = *(void **)(v6 + 352);
  v25 = *(uint64_t (**)())(v6 + 360);
  v26 = *(_QWORD *)(v6 + 368);
  v123 = 0;
  v124 = v26 >> 62 == 2;
  v125 = 0u;
  v126 = 0u;
  v127 = 0u;
  v128 = 1;
  v110 = v19;
  v27 = ResolvedStyledText.TextLayoutManager.layout(with:in:at:)((uint64_t)&v123, v22, v20, a3);
  v29 = v28;
  v105 = v30;
  v31 = v27;
  v32 = computeLayoutInfo #1 () in ResolvedStyledText.TextLayoutManager.metrics(scale:requestedSize:)(v15);
  v121 = 0uLL;
  v122 = 0;
  v109 = v33;
  v108 = v32;
  v107 = v34;
  v106 = v35;
  v104 = v31;
  if ((v33 & 1) == 0)
  {
    v68 = 0;
LABEL_29:
    v70 = v112;
    v71 = v111;
    v72 = v110;
    goto LABEL_46;
  }
  if ((v26 & 0x8000000000000000) != 0)
  {
    v68 = 1;
    goto LABEL_29;
  }
  v100 = v15;
  v36 = v102 & 1;
  descent = MEMORY[0x24BEE4AF8];
  LOBYTE(leading) = 0;
  swift_beginAccess();
  outlined copy of Text.Layout.Line.Line(v23, v103, v36);
  v37 = ResolvedStyledText.TextLayoutManager.LayoutManager.layoutManager(for:original:)(v14, a3);
  v101 = *(double *)&v23;
  v38 = v37;
  swift_endAccess();
  v39 = (*(unsigned __int16 *)(v6 + 236) >> 3) & 0x10;
  v40 = swift_allocObject();
  *(_QWORD *)(v40 + 16) = 0;
  *(_QWORD *)(v40 + 24) = 0;
  *(_QWORD *)(v40 + 32) = &descent;
  *(_DWORD *)(v40 + 40) = v39;
  *(_QWORD *)(v40 + 48) = &leading;
  v41 = swift_allocObject();
  *(_QWORD *)(v41 + 16) = partial apply for closure #1 in ResolvedStyledText.TextLayoutManager.collectTextLayout(origin:scale:);
  *(_QWORD *)(v41 + 24) = v40;
  v119 = thunk for @callee_guaranteed (@guaranteed NSTextLayoutFragment) -> (@unowned Bool)partial apply;
  v120 = v41;
  aBlock = MEMORY[0x24BDAC760];
  v116 = 1107296256;
  v117 = thunk for @escaping @callee_guaranteed (@guaranteed NSTextLayoutFragment) -> (@unowned Bool);
  v118 = &block_descriptor_33;
  v42 = _Block_copy(&aBlock);
  swift_retain();
  swift_release();
  v43 = objc_msgSend(v38, sel_enumerateTextLayoutFragmentsFromLocation_options_usingBlock_, 0, 0, v42);
  swift_unknownObjectRelease();

  _Block_release(v42);
  LOBYTE(v38) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if ((v38 & 1) != 0)
    __break(1u);
  v97 = v20;
  v99 = a3;
  v44 = descent;
  v45 = LOBYTE(leading);
  v46 = *(_QWORD *)(*(_QWORD *)&descent + 16);
  swift_release();
  swift_bridgeObjectRelease();
  *(CGFloat *)&v121 = v44;
  *((_QWORD *)&v121 + 1) = v45;
  v122 = v46;
  v47 = v101;
  aBlock = v101;
  v48 = v103;
  v116 = v103;
  v49 = v102;
  LOBYTE(v117) = v102 & 1;
  v118 = v24;
  v119 = v25;
  LODWORD(v120) = v26 | 2;
  v98 = v21;
  Text.Layout.truncateLast(_:width:)();
  if (!(_QWORD)v121)
  {
    __break(1u);
    return;
  }
  x = *MEMORY[0x24BDBF070];
  y = *(double *)(MEMORY[0x24BDBF070] + 8);
  width = *(double *)(MEMORY[0x24BDBF070] + 16);
  height = *(double *)(MEMORY[0x24BDBF070] + 24);
  v54 = *(_QWORD *)(v121 + 16);
  if (v54)
  {
    v96 = swift_bridgeObjectRetain();
    v55 = (double *)(v96 + 64);
    do
    {
      v62 = (void *)*((_QWORD *)v55 - 4);
      v63 = *((_QWORD *)v55 - 3);
      v64 = *((_BYTE *)v55 - 16);
      v66 = *(v55 - 1);
      v65 = *v55;
      if ((v64 & 1) != 0)
      {
        outlined copy of Text.Layout.Line.Line(v62, v63, 1);
        objc_msgSend(v62, sel_typographicBounds, v96);
        TypographicBounds = v56;
        v59 = v58;
        objc_msgSend(v62, sel_glyphOrigin);
        v61 = v59 - v60;
      }
      else
      {
        outlined copy of Text.Layout.Line.Line(v62, v63, 0);
        outlined copy of Text.Layout.Line.Line(v62, v63, 0);
        v67 = v62;
        aBlock = 0.0;
        descent = 0.0;
        leading = 0.0;
        TypographicBounds = CTLineGetTypographicBounds(v67, &aBlock, &descent, &leading);

        outlined consume of Text.Layout.Line.Line(v62, v63, 0);
        v60 = aBlock;
        v61 = descent;
      }
      v136.origin.x = v66 + 0.0;
      v136.origin.y = v65 + 0.0 - v60;
      v136.size.height = v61 + v60;
      v130.origin.x = x;
      v130.origin.y = y;
      v130.size.width = width;
      v130.size.height = height;
      v136.size.width = TypographicBounds;
      v131 = CGRectUnion(v130, v136);
      x = v131.origin.x;
      y = v131.origin.y;
      width = v131.size.width;
      height = v131.size.height;
      outlined consume of Text.Layout.Line.Line(v62, v63, v64);
      v55 += 6;
      --v54;
    }
    while (v54);
    swift_bridgeObjectRelease();
    v47 = v101;
    v48 = v103;
    v69 = v102;
  }
  else
  {
    v69 = v49;
  }
  v73 = v69 & 1;
  v132.origin.x = x;
  v132.origin.y = y;
  v132.size.width = width;
  v132.size.height = height;
  IsNull = CGRectIsNull(v132);
  if (IsNull)
    v75 = 0.0;
  else
    v75 = y;
  if (IsNull)
    v76 = 0.0;
  else
    v76 = x;
  if (IsNull)
  {
    height = 0.0;
    v77 = 0.0;
  }
  else
  {
    v77 = width;
  }
  v133.origin.x = v76;
  v133.origin.y = v75;
  v133.size.width = v77;
  v133.size.height = height;
  MinX = CGRectGetMinX(v133);
  if (MinX < 0.0)
    v79 = 0.0;
  else
    v79 = MinX;
  v134.origin.x = v76;
  v134.origin.y = v75;
  v134.size.width = v77;
  v134.size.height = height;
  MaxX = CGRectGetMaxX(v134);
  v21 = v98;
  if (MaxX >= v98)
    MaxX = v98;
  v135.size.width = MaxX - v79;
  v135.origin.x = v79;
  v135.origin.y = v75;
  v135.size.height = height;
  v29 = CGRectGetWidth(v135);
  outlined consume of Text.Layout.Line.Line(*(void **)&v47, v48, v73);
  v68 = 1;
  v15 = v100;
  a3 = v99;
  v70 = v112;
  v71 = v111;
  v72 = v110;
  v20 = v97;
LABEL_46:
  v81 = v109;
  v82 = v105;
  v83 = v29 - *(double *)(v6 + 104);
  if ((ResolvedStyledText.TextLayoutManager.minorAxisIsFlexible.getter() & 1) != 0)
    v84 = v21;
  else
    v84 = v83;
  if ((v104 & 1) != 0)
    v85 = v82;
  else
    v85 = v84;
  if ((v104 & 1) != 0)
    v82 = v84;
  (*(void (**)(char *, _QWORD, uint64_t))(v71 + 104))(v13, *MEMORY[0x24BEE38E0], v70);
  v86 = *(double *)(v6 + 112);
  aBlock = v82;
  descent = v85;
  specialized FloatingPoint.round(_:toMultipleOf:)(v13, v86);
  specialized FloatingPoint.round(_:toMultipleOf:)(v13, v86);
  v87 = aBlock;
  v88 = descent;
  (*(void (**)(char *, uint64_t))(v71 + 8))(v13, v70);
  v89 = v122;
  *(double *)a2 = v21;
  *(double *)(a2 + 8) = v20;
  *(_BYTE *)(a2 + 16) = v72;
  *(CGFloat *)(a2 + 24) = v87;
  *(CGFloat *)(a2 + 32) = v88;
  *(double *)(a2 + 40) = a3;
  v90 = v106;
  *(_QWORD *)(a2 + 48) = v107;
  *(_QWORD *)(a2 + 56) = v90;
  *(_QWORD *)(a2 + 64) = 0;
  *(double *)(a2 + 72) = v21;
  *(_QWORD *)(a2 + 80) = v108;
  *(_BYTE *)(a2 + 88) = 0;
  *(_BYTE *)(a2 + 89) = v81 & 1;
  *(_BYTE *)(a2 + 90) = v68;
  *(_OWORD *)(a2 + 96) = v121;
  *(_QWORD *)(a2 + 112) = v89;
  v91 = *(double *)(v6 + 144);
  v92 = *(double *)(v6 + 152);
  v93 = *(double *)(v6 + 160);
  v94 = *(double *)(v6 + 168);
  v95 = *(double *)(v6 + 112);
  swift_bridgeObjectRetain();
  NSAttributedString.Metrics.update(layoutMargins:pixelLength:)(v91, v92, v93, v94, v95);
  swift_bridgeObjectRelease();

}

char *computeLayoutInfo #1 () in ResolvedStyledText.TextLayoutManager.metrics(scale:requestedSize:)(void *a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *v4;
  id v5;
  char *result;
  id v7;
  uint64_t v8;
  char *v9;
  id v10;
  char *v11;
  id v12;
  uint64_t v13;
  id v14;
  void *v15;
  id v16;
  id v17;
  id v18;
  _QWORD aBlock[6];
  char v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  char v26;

  v25 = 0;
  v26 = 1;
  v22 = 0;
  v23 = 0;
  v24 = 1;
  v21 = 0;
  v20 = 0;
  v2 = (_QWORD *)swift_allocObject();
  v2[2] = &v20;
  v2[3] = &v25;
  v2[4] = &v23;
  v2[5] = &v22;
  v2[6] = &v21;
  v3 = swift_allocObject();
  *(_QWORD *)(v3 + 16) = partial apply for closure #1 in computeLayoutInfo #1 () in ResolvedStyledText.TextLayoutManager.metrics(scale:requestedSize:);
  *(_QWORD *)(v3 + 24) = v2;
  aBlock[4] = thunk for @callee_guaranteed (@guaranteed NSTextLayoutFragment) -> (@unowned Bool)partial apply;
  aBlock[5] = v3;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed (@guaranteed NSTextLayoutFragment) -> (@unowned Bool);
  aBlock[3] = &block_descriptor_43;
  v4 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  v5 = objc_msgSend(a1, sel_enumerateTextLayoutFragmentsFromLocation_options_usingBlock_, 0, 0, v4);
  swift_unknownObjectRelease();
  _Block_release(v4);
  LOBYTE(v4) = swift_isEscapingClosureAtFileLocation();
  result = (char *)swift_release();
  if ((v4 & 1) != 0)
  {
    __break(1u);
  }
  else
  {
    if (!v21)
    {
      v12 = 0;
      goto LABEL_9;
    }
    v7 = v21;
    result = (char *)objc_msgSend(v7, sel_characterRange);
    if (v20 == 1)
      goto LABEL_6;
    v9 = &result[v8];
    if (!__OFADD__(result, v8))
    {
      v10 = objc_msgSend(v7, sel_attributedString);
      v11 = (char *)objc_msgSend(v10, sel_length);

      if ((uint64_t)v9 >= (uint64_t)v11)
      {
        v14 = objc_msgSend(v7, sel_textLineFragmentRange);
        if (v14)
        {
          v15 = v14;
          v16 = objc_msgSend(v14, sel_endLocation);

          v17 = objc_msgSend(a1, sel_documentRange);
          v18 = objc_msgSend(v17, sel_endLocation);

          objc_msgSend(v16, sel_compare_, v18);
          swift_unknownObjectRelease();
          swift_unknownObjectRelease();

          goto LABEL_7;
        }
      }
LABEL_6:

LABEL_7:
      v12 = v21;
LABEL_9:
      v13 = v22;
      swift_release();

      return (char *)v13;
    }
  }
  __break(1u);
  return result;
}

BOOL closure #1 in computeLayoutInfo #1 () in ResolvedStyledText.TextLayoutManager.metrics(scale:requestedSize:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5, void **a6)
{
  unint64_t v11;
  uint64_t v12;
  BOOL v13;
  id v14;
  void *v15;
  unint64_t v16;
  uint64_t v17;
  double v18;
  double v19;
  id v20;
  uint64_t v21;
  void *v22;
  id v23;
  void *v24;
  double v25;
  double v26;
  double v27;
  double v28;

  v11 = (unint64_t)a1;
  v12 = (uint64_t)objc_msgSend(a1, sel_state);
  if (v12 == 3)
  {
    if ((*(_BYTE *)a2 & 1) != 0)
    {
      v13 = 1;
    }
    else
    {
      v14 = objc_msgSend((id)v11, sel_truncatedRanges);
      if (v14)
      {
        v15 = v14;
        type metadata accessor for CAPresentationModifier(0, (unint64_t *)&lazy cache variable for type metadata for NSTextRange);
        v16 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

        if (v16 >> 62)
          goto LABEL_23;
        v17 = *(_QWORD *)((v16 & 0xFFFFFFFFFFFFF8) + 0x10);
        goto LABEL_7;
      }
      v13 = 0;
    }
    while (1)
    {
      *(_BYTE *)a2 = v13;
      objc_msgSend((id)v11, sel_layoutFragmentFrame);
      v19 = v18;
      v20 = objc_msgSend((id)v11, sel_textLineFragments);
      type metadata accessor for CAPresentationModifier(0, (unint64_t *)&lazy cache variable for type metadata for NSTextLineFragment);
      v11 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

      if (v11 >> 62)
      {
        swift_bridgeObjectRetain();
        a2 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (!a2)
          goto LABEL_20;
      }
      else
      {
        a2 = *(_QWORD *)((v11 & 0xFFFFFFFFFFFFF8) + 0x10);
        if (!a2)
          goto LABEL_20;
      }
      if (a2 >= 1)
        break;
      __break(1u);
LABEL_23:
      swift_bridgeObjectRetain();
      v17 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
LABEL_7:
      swift_bridgeObjectRelease();
      v13 = v17 != 0;
    }
    v21 = 0;
    do
    {
      if ((v11 & 0xC000000000000001) != 0)
        v23 = (id)MEMORY[0x23B7C6D9C](v21, v11);
      else
        v23 = *(id *)(v11 + 8 * v21 + 32);
      v24 = v23;
      objc_msgSend(v23, sel_typographicBounds);
      v26 = v19 + v25;
      objc_msgSend(v24, sel_glyphOrigin);
      v28 = v26 + v27;
      if (*(_BYTE *)(a3 + 8) == 1)
      {
        *(double *)a3 = v28;
        *(_BYTE *)(a3 + 8) = 0;
      }
      ++v21;
      *(double *)a4 = v28;
      *(_BYTE *)(a4 + 8) = 0;
      ++*a5;
      v22 = *a6;
      *a6 = v24;

    }
    while (a2 != v21);
LABEL_20:
    swift_bridgeObjectRelease();
    v12 = 3;
  }
  return v12 == 3;
}

id ResolvedStyledText.TextLayoutManager.layout(with:in:at:)(uint64_t a1, double a2, double a3, double a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  void *v14;
  id v15;
  id result;
  void *v17;
  double v18;
  double v19;
  double v20;
  double v21;
  uint64_t v22;
  double v23;
  double v24;
  _BOOL4 v25;
  id v26;
  id v27;
  CGFloat x;
  CGFloat y;
  CGFloat width;
  double height;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  id v35;
  char isEscapingClosureAtFileLocation;
  double v37;
  double v38;
  void (*v39)(void *);
  double MinX;
  double v41;
  double MaxX;
  uint64_t v43;
  double v44;
  char v45;
  double v46;
  uint64_t v47;
  double v48;
  char v49;
  id v50;
  uint64_t v51;
  double aBlock[6];
  CGFloat MaxY;
  CGRect v54;
  CGRect v55;
  CGRect v56;
  CGRect v57;
  CGRect v58;
  CGRect v59;

  v5 = v4;
  v10 = type metadata accessor for FloatingPointRoundingRule();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)&v50 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = *(void **)(v4 + 192);
  swift_beginAccess();
  v50 = v14;
  v15 = ResolvedStyledText.TextLayoutManager.LayoutManager.layoutManager(for:original:)(v14, a4);
  swift_endAccess();
  result = objc_msgSend(v15, sel_textContainer);
  if (!result)
    goto LABEL_58;
  v17 = result;
  if (a2 == INFINITY)
    v18 = 1.79769313e308;
  else
    v18 = a2;
  if (a2 > 0.0)
    v19 = v18;
  else
    v19 = COERCE_DOUBLE(1);
  if (a3 == INFINITY)
    v20 = 1.79769313e308;
  else
    v20 = a3;
  if (a3 > 0.0)
    v21 = v20;
  else
    v21 = COERCE_DOUBLE(1);
  swift_beginAccess();
  if (*(_BYTE *)(v4 + 24) == 1)
  {
    if (a3 != 0.0)
    {
      v22 = 0;
      goto LABEL_20;
    }
    goto LABEL_18;
  }
  if (a3 == 0.0)
  {
LABEL_18:
    v21 = 1.79769313e308;
    v22 = 1;
    goto LABEL_20;
  }
  v22 = *(_QWORD *)(v4 + 16);
LABEL_20:
  objc_msgSend(v17, sel_size);
  v25 = v24 != v21 || v23 != v19;
  if (v25)
    objc_msgSend(v17, sel_setSize_, v19, v21);
  if (objc_msgSend(v17, sel_maximumNumberOfLines) != (id)v22)
  {
    objc_msgSend(v17, sel_setMaximumNumberOfLines_, v22);
    v25 = 1;
  }
  if (*(_BYTE *)(a1 + 8) == 1)
    v26 = (id)(*(unsigned __int8 *)(v5 + 41) + 3);
  else
    v26 = *(id *)a1;
  if (objc_msgSend(v17, sel_lineBreakMode) != v26)
  {
    objc_msgSend(v17, sel_setLineBreakMode_, v26);
    v25 = 1;
  }
  v27 = objc_msgSend(v15, sel_documentRange);
  if (v25)
    objc_msgSend(v15, sel_invalidateLayoutForRange_, v27);
  v51 = v11;
  objc_msgSend(v15, sel_ensureLayoutForRange_, v27);
  objc_msgSend(v15, sel_usageBoundsForTextContainer);
  x = v54.origin.x;
  y = v54.origin.y;
  width = v54.size.width;
  height = v54.size.height;
  if (CGRectGetHeight(v54) != v21)
  {
    v39 = 0;
    if (v19 >= 0.0)
      goto LABEL_39;
    goto LABEL_55;
  }
  v55.origin.x = x;
  v55.origin.y = y;
  v55.size.width = width;
  v55.size.height = height;
  MaxY = CGRectGetMaxY(v55);
  v32 = swift_allocObject();
  *(_QWORD *)(v32 + 16) = &MaxY;
  v33 = swift_allocObject();
  *(_QWORD *)(v33 + 16) = partial apply for closure #1 in ResolvedStyledText.TextLayoutManager.layout(with:in:at:);
  *(_QWORD *)(v33 + 24) = v32;
  *(_QWORD *)&aBlock[4] = thunk for @callee_guaranteed (@guaranteed NSTextLayoutFragment) -> (@unowned Bool)partial apply;
  *(_QWORD *)&aBlock[5] = v33;
  *(_QWORD *)&aBlock[0] = MEMORY[0x24BDAC760];
  *(_QWORD *)&aBlock[1] = 1107296256;
  *(_QWORD *)&aBlock[2] = thunk for @escaping @callee_guaranteed (@guaranteed NSTextLayoutFragment) -> (@unowned Bool);
  *(_QWORD *)&aBlock[3] = &block_descriptor_22_1;
  v34 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  v35 = objc_msgSend(v15, sel_enumerateTextLayoutFragmentsFromLocation_options_usingBlock_, 0, 0, v34);
  swift_unknownObjectRelease();
  _Block_release(v34);
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  result = (id)swift_release();
  if ((isEscapingClosureAtFileLocation & 1) != 0)
  {
    __break(1u);
LABEL_58:
    __break(1u);
    return result;
  }
  v37 = MaxY;
  v56.origin.x = x;
  v56.origin.y = y;
  v56.size.width = width;
  v56.size.height = height;
  if (CGRectGetMaxY(v56) < v37)
  {
    v38 = MaxY;
    v57.origin.x = x;
    v57.origin.y = y;
    v57.size.width = width;
    v57.size.height = height;
    height = v38 - CGRectGetMinY(v57);
  }
  v39 = partial apply for closure #1 in ResolvedStyledText.TextLayoutManager.layout(with:in:at:);
  if (v19 >= 0.0)
  {
LABEL_39:
    v58.origin.x = x;
    v58.origin.y = y;
    v58.size.width = width;
    v58.size.height = height;
    MinX = CGRectGetMinX(v58);
    if (MinX < 0.0)
      v41 = 0.0;
    else
      v41 = MinX;
    v59.origin.x = x;
    v59.origin.y = y;
    v59.size.width = width;
    v59.size.height = height;
    MaxX = CGRectGetMaxX(v59);
    if (MaxX >= v19)
      MaxX = v19;
    v19 = MaxX - v41;
    MaxY = height;
    if (one-time initialization token for lineFragmentPadding == -1)
      goto LABEL_45;
    goto LABEL_56;
  }
LABEL_55:
  __break(1u);
LABEL_56:
  swift_once();
LABEL_45:
  aBlock[0] = v19
            + *(double *)&static ResolvedStyledText.TextLayoutManager.lineFragmentPadding
            + *(double *)&static ResolvedStyledText.TextLayoutManager.lineFragmentPadding;
  if ((*(_BYTE *)(v5 + 40) & 1) == 0)
  {
    v43 = *(_QWORD *)(v5 + 32);
    if (v43 >= 1)
    {
      if (v50)
      {
        if ((uint64_t)objc_msgSend(v50, sel_length) >= 1)
        {
          v44 = COERCE_DOUBLE(NSAttributedString.limitedFontHeight(by:)(v43));
          if ((v45 & 1) == 0)
          {
            v46 = v44;
            if (height > v44)
              v46 = height;
            MaxY = v46;
          }
        }
      }
    }
  }
  v47 = v51;
  (*(void (**)(char *, _QWORD, uint64_t))(v51 + 104))(v13, *MEMORY[0x24BEE38E0], v10);
  v48 = *(double *)(v5 + 112);
  specialized FloatingPoint.round(_:toMultipleOf:)(v13, v48);
  specialized FloatingPoint.round(_:toMultipleOf:)(v13, v48);

  (*(void (**)(char *, uint64_t))(v47 + 8))(v13, v10);
  v49 = *(_BYTE *)(v5 + 96);
  outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed @escaping @callee_guaranteed (@unowned Bool) -> ()) -> ())?((uint64_t)v39);
  return (id)((v49 & 1) == 0);
}

void Text.Layout.truncateLast(_:width:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  Class v9;
  Class v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  v1 = *(_QWORD *)(*(_QWORD *)v0 + 16);
  if (v1)
  {
    v2 = *(_QWORD *)v0 + 48 * v1;
    v4 = *(void **)(v2 - 16);
    v3 = *(_QWORD *)(v2 - 8);
    v5 = *(_BYTE *)v2;
    v6 = *(_QWORD *)(v2 + 8);
    v7 = *(_QWORD *)(v2 + 16);
    v8 = *(_DWORD *)(v2 + 24);
    v11 = v4;
    v12 = v3;
    LOBYTE(v13) = v5;
    v14 = v6;
    v15 = v7;
    v16 = v8;
    outlined copy of Text.Layout.Line.Line(v4, v3, v5);
    v9 = Text.Layout.Line.lastRunAttributes.getter();
    if (v9)
    {
      v10 = v9;
      type metadata accessor for NSAttributedStringKey(0);
      lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey();
      static Dictionary._conditionallyBridgeFromObjectiveC(_:result:)();
      outlined consume of Text.Layout.Line.Line(v4, v3, v5);

    }
    else
    {
      outlined consume of Text.Layout.Line.Line(v4, v3, v5);
    }
  }
}

SwiftUI::Spacing __swiftcall ResolvedStyledText.TextLayoutManager.spacing()()
{
  unint64_t *v0;
  uint64_t v1;
  unint64_t *v2;
  __int128 *v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  char v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  _OWORD v32[6];
  _OWORD v33[2];
  double v34[8];
  __int128 v35;
  _BYTE v36[64];
  __int128 v37;
  _OWORD v38[2];
  _OWORD v39[3];
  uint64_t v40;
  uint64_t v41;
  char v42;
  char v43;

  v2 = v0;
  if (!*(_QWORD *)(v1 + 192))
    return Spacing.init()();
  v3 = (__int128 *)(v1 + 16);
  swift_beginAccess();
  ResolvedStyledText.TextLayoutManager.metrics(scale:requestedSize:)((*(_BYTE *)(v1 + 96) & 1) == 0, (uint64_t)&v35, 1.0, INFINITY, INFINITY);
  v4 = *(_OWORD *)&v36[8];
  v5 = *(_OWORD *)&v36[24];
  v6 = *(_OWORD *)&v36[40];
  v7 = *(_QWORD *)&v36[56];
  v8 = v37;
  v9 = BYTE8(v37);
  v10 = BYTE9(v37);
  if ((*(_BYTE *)(v1 + 320) & 1) != 0)
  {
    v30 = *(_OWORD *)&v36[24];
    v31 = *(_OWORD *)&v36[8];
    v29 = *(_OWORD *)&v36[40];
    NSAttributedString.maxFontMetrics.getter((uint64_t)&v35);
    v6 = v29;
    v5 = v30;
    v4 = v31;
    v11 = *((double *)&v35 + 1);
    v12 = *(double *)&v35;
    v13 = *(double *)&v36[8];
    v14 = *(double *)v36;
    v15 = *(double *)&v36[24];
    v16 = *(double *)&v36[16];
    v17 = *(double *)&v36[40];
    v18 = *(double *)&v36[32];
    *(_QWORD *)(v1 + 256) = v35;
    *(double *)(v1 + 264) = v11;
    *(_OWORD *)(v1 + 272) = __PAIR128__(*(unint64_t *)&v13, *(unint64_t *)&v14);
    *(_OWORD *)(v1 + 288) = __PAIR128__(*(unint64_t *)&v15, *(unint64_t *)&v16);
    *(_OWORD *)(v1 + 304) = __PAIR128__(*(unint64_t *)&v17, *(unint64_t *)&v18);
    *(_BYTE *)(v1 + 320) = 0;
  }
  else
  {
    v18 = *(double *)(v1 + 304);
    v17 = *(double *)(v1 + 312);
    v16 = *(double *)(v1 + 288);
    v15 = *(double *)(v1 + 296);
    v14 = *(double *)(v1 + 272);
    v13 = *(double *)(v1 + 280);
    v12 = *(double *)(v1 + 256);
    v11 = *(double *)(v1 + 264);
  }
  v34[0] = v12;
  v34[1] = v11;
  v34[2] = v14;
  v34[3] = v13;
  v34[4] = v16;
  v34[5] = v15;
  v34[6] = v18;
  v34[7] = v17;
  v39[0] = v4;
  v39[1] = v5;
  v39[2] = v6;
  v40 = v7;
  v41 = v8;
  v42 = v9;
  v43 = v10;
  v20 = *v3;
  v21 = *(_OWORD *)(v1 + 32);
  v22 = *(_OWORD *)(v1 + 64);
  *(_OWORD *)&v36[16] = *(_OWORD *)(v1 + 48);
  *(_OWORD *)&v36[32] = v22;
  v23 = *(_OWORD *)(v1 + 32);
  v24 = *(_OWORD *)(v1 + 48);
  v25 = *v3;
  v35 = v20;
  *(_OWORD *)v36 = v23;
  *(_OWORD *)((char *)v38 + 9) = *(_OWORD *)(v1 + 121);
  v26 = *(_OWORD *)(v1 + 96);
  v38[0] = *(_OWORD *)(v1 + 112);
  v27 = *(_OWORD *)(v1 + 96);
  v28 = *(_OWORD *)(v1 + 64);
  *(_OWORD *)&v36[48] = *(_OWORD *)(v1 + 80);
  v37 = v27;
  v32[4] = *(_OWORD *)&v36[48];
  v32[5] = v26;
  v33[0] = *(_OWORD *)(v1 + 112);
  *(_OWORD *)((char *)v33 + 9) = *(_OWORD *)(v1 + 121);
  v32[0] = v25;
  v32[1] = v21;
  v32[2] = v24;
  v32[3] = v28;
  outlined retain of TextLayoutProperties((uint64_t)&v35);
  static Spacing.textSpacing(maxFontMetrics:idealMetrics:layoutProperties:)(v34, (double *)v39, v32, v2);
  swift_bridgeObjectRelease();
  return (SwiftUI::Spacing)outlined release of TextLayoutProperties((uint64_t)&v35);
}

CGSize __swiftcall ResolvedStyledText.TextLayoutManager.frameSize(in:)(CGSize in)
{
  uint64_t v1;
  double height;
  double width;
  uint64_t v4;
  uint64_t v5;
  double *v6;
  double v7;
  double v8;
  CGSize result;
  _QWORD v11[9];

  height = in.height;
  width = in.width;
  swift_beginAccess();
  v4 = *(_QWORD *)(v1 + 392);
  v5 = *(_QWORD *)(v4 + 16);
  if (v5)
  {
    v6 = (double *)(v4 + 56);
    while (1)
    {
      v7 = *(v6 - 1);
      v8 = *v6;
      if (v7 == width && v8 == height)
        break;
      v6 += 11;
      if (!--v5)
        goto LABEL_8;
    }
  }
  else
  {
LABEL_8:
    swift_beginAccess();
    swift_retain();
    specialized ResolvedStyledText.TextLayoutManager.Cache.metrics(requestedSize:body:)(v1 + 392, v1, (uint64_t)v11, width, height);
    swift_endAccess();
    swift_release();
    v7 = *(double *)v11;
    v8 = *(double *)&v11[1];
  }
  result.height = v8;
  result.width = v7;
  return result;
}

__n128 closure #1 in ResolvedStyledText.TextLayoutManager.metrics(in:layoutMargins:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>, double a4@<D1>)
{
  double v8;
  char v9;
  double v10;
  double v11;
  int v12;
  __int128 v13;
  int v14;
  double v15;
  double v16;
  double v18;
  double v19;
  double v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  unsigned __int8 v24;
  __n128 result;
  int v26;
  __int128 v27;
  int v28;
  double v29;
  double v30;
  BOOL v31;
  double v32;
  double v33;
  double v34;
  int v35;
  __int128 v36;
  unsigned __int8 v37;
  double v38;
  double v39;
  BOOL v40;
  double v41;
  double v42;
  double v43;
  __n128 v44;
  __int128 v45;
  __int128 v46;
  _BYTE v47[16];
  unsigned __int8 v48;
  __int128 v49;
  __int128 v50;
  __n128 v51;
  uint64_t v52;
  uint64_t v53;
  char v54;
  unsigned __int8 v55;

  swift_beginAccess();
  if (*(_BYTE *)(a1 + 96))
    v8 = a3;
  else
    v8 = a4;
  if (!*(_BYTE *)(a1 + 96))
    a4 = a3;
  v9 = *(_BYTE *)(a1 + 96) ^ 1;
  v10 = *(double *)(a1 + 48);
  if (v10 >= 1.0)
    goto LABEL_21;
  v11 = v10 > COERCE_DOUBLE(1) ? *(double *)(a1 + 48) : COERCE_DOUBLE(1);
  ResolvedStyledText.TextLayoutManager.metrics(scale:requestedSize:)(v9, (uint64_t)v47, 1.0, a4, INFINITY);
  v12 = v48;
  v13 = v49;
  v14 = v55;
  swift_bridgeObjectRelease();
  v15 = v12 ? *(double *)&v13 : *((double *)&v13 + 1);
  v16 = v12 ? *((double *)&v13 + 1) : *(double *)&v13;
  if (v14 != 1 && v15 <= a4 && v16 <= v8)
  {
LABEL_21:
    v18 = 1.0;
LABEL_22:
    v19 = a4;
    v20 = v8;
    goto LABEL_23;
  }
  ResolvedStyledText.TextLayoutManager.metrics(scale:requestedSize:)(v9, (uint64_t)v47, v11, a4, INFINITY);
  v26 = v48;
  v27 = v49;
  v28 = v55;
  swift_bridgeObjectRelease();
  if (v26)
    v29 = *(double *)&v27;
  else
    v29 = *((double *)&v27 + 1);
  if (v26)
    v30 = *((double *)&v27 + 1);
  else
    v30 = *(double *)&v27;
  if (v28 == 1 || (v29 <= a4 ? (v31 = v30 > v8) : (v31 = 1), v31))
  {
    v18 = v11;
    goto LABEL_22;
  }
  v32 = 1.0;
  v33 = v11;
  do
  {
    v34 = v32 + (v32 - v33) * -0.5;
    ResolvedStyledText.TextLayoutManager.metrics(scale:requestedSize:)(v9, (uint64_t)v47, v34, a4, INFINITY);
    v35 = v48;
    v36 = v49;
    v37 = v55;
    swift_bridgeObjectRelease();
    if (v35)
      v38 = *(double *)&v36;
    else
      v38 = *((double *)&v36 + 1);
    if ((v37 & 1) == 0)
    {
      if (v35)
        v39 = *((double *)&v36 + 1);
      else
        v39 = *(double *)&v36;
      v40 = v39 > v8;
      if (v39 > v8)
        v41 = v11;
      else
        v41 = v32 + (v32 - v33) * -0.5;
      if (v40)
        v42 = v33;
      else
        v42 = v32 + (v32 - v33) * -0.5;
      if (v40)
        v43 = v32 + (v32 - v33) * -0.5;
      else
        v43 = v32;
      if (v38 <= a4)
      {
        v11 = v41;
        v33 = v42;
        v34 = v43;
      }
    }
    v32 = v34;
  }
  while (v34 - v33 >= 0.01);
  v18 = v11;
  v19 = a4;
  v20 = v8;
LABEL_23:
  ResolvedStyledText.TextLayoutManager.metrics(scale:requestedSize:)(v9, (uint64_t)v47, v18, v19, v20);
  v45 = v50;
  v46 = v49;
  v44 = v51;
  v21 = v52;
  v22 = v53;
  v23 = v54;
  v24 = v55;
  swift_bridgeObjectRelease();
  *(_OWORD *)a2 = v46;
  *(_OWORD *)(a2 + 16) = v45;
  result = v44;
  *(__n128 *)(a2 + 32) = v44;
  *(_QWORD *)(a2 + 48) = v21;
  *(_QWORD *)(a2 + 56) = v22;
  *(_BYTE *)(a2 + 64) = v23;
  *(_BYTE *)(a2 + 65) = v24;
  return result;
}

void closure #1 in ResolvedStyledText.TextLayoutManager.layout(with:in:at:)(void *a1, double *a2)
{
  id v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  void *v8;
  double v9;
  double MaxY;
  double v11;
  CGRect v12;

  v3 = objc_msgSend(a1, sel_textLineFragments);
  type metadata accessor for CAPresentationModifier(0, (unint64_t *)&lazy cache variable for type metadata for NSTextLineFragment);
  v4 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (!(v4 >> 62))
  {
    v5 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v5)
      goto LABEL_3;
LABEL_13:
    swift_bridgeObjectRelease();
    return;
  }
  swift_bridgeObjectRetain();
  v5 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v5)
    goto LABEL_13;
LABEL_3:
  if (v5 >= 1)
  {
    v6 = 0;
    do
    {
      if ((v4 & 0xC000000000000001) != 0)
        v7 = (id)MEMORY[0x23B7C6D9C](v6, v4);
      else
        v7 = *(id *)(v4 + 8 * v6 + 32);
      v8 = v7;
      ++v6;
      v9 = *a2;
      objc_msgSend(v7, sel_typographicBounds);
      MaxY = CGRectGetMaxY(v12);

      if (v9 > MaxY)
        v11 = v9;
      else
        v11 = MaxY;
      *a2 = v11;
    }
    while (v5 != v6);
    goto LABEL_13;
  }
  __break(1u);
}

uint64_t ResolvedStyledText.TextLayoutManager.explicitAlignment(_:at:)(uint64_t a1, double a2, double a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  double v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  double v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  _BYTE v19[24];
  double v20;
  uint64_t v21;

  v4 = v3;
  swift_beginAccess();
  if ((*(_BYTE *)(v4 + 96) & 1) != 0)
  {
LABEL_2:
    *(double *)&result = 0.0;
    return result;
  }
  if (one-time initialization token for lastTextBaseline != -1)
    swift_once();
  if (static VerticalAlignment.lastTextBaseline == a1)
  {
    swift_beginAccess();
    swift_retain();
    specialized ResolvedStyledText.TextLayoutManager.Cache.metrics(requestedSize:body:)(v4 + 392, v4, (uint64_t)v19, a2, a3);
    swift_endAccess();
    swift_release();
    return v21;
  }
  else
  {
    if (one-time initialization token for firstTextBaseline != -1)
      swift_once();
    if (static VerticalAlignment.firstTextBaseline == a1)
    {
      swift_beginAccess();
      swift_retain();
      specialized ResolvedStyledText.TextLayoutManager.Cache.metrics(requestedSize:body:)(v4 + 392, v4, (uint64_t)v19, a2, a3);
      swift_endAccess();
      swift_release();
      *(double *)&result = v20;
    }
    else
    {
      if (one-time initialization token for _firstTextLineCenter != -1)
        swift_once();
      if (static VerticalAlignment._firstTextLineCenter == a1)
      {
        swift_beginAccess();
        swift_retain();
        specialized ResolvedStyledText.TextLayoutManager.Cache.metrics(requestedSize:body:)(v4 + 392, v4, (uint64_t)v19, a2, a3);
        swift_endAccess();
        swift_release();
        if ((*(_BYTE *)(v4 + 320) & 1) != 0)
        {
          if (*(_QWORD *)(v4 + 192))
          {
            NSAttributedString.maxFontMetrics.getter((uint64_t)&v14);
            v9 = v14;
            v10 = v15;
            v11 = v16;
            v12 = v17;
            v13 = v18;
          }
          else
          {
            v13 = 0;
            v10 = 0uLL;
            v9 = 0.0;
            v11 = 0uLL;
            v12 = 0uLL;
          }
          *(double *)(v4 + 256) = v9;
          *(_OWORD *)(v4 + 264) = v10;
          *(_OWORD *)(v4 + 280) = v11;
          *(_OWORD *)(v4 + 296) = v12;
          *(_QWORD *)(v4 + 312) = v13;
          *(_BYTE *)(v4 + 320) = 0;
        }
        else
        {
          v9 = *(double *)(v4 + 256);
        }
        *(double *)&result = v20 + v9 * -0.5;
      }
      else
      {
        if (one-time initialization token for leadingText != -1)
          swift_once();
        if (static HorizontalAlignment.leadingText != a1)
          goto LABEL_2;
        swift_beginAccess();
        return *(uint64_t *)(v4 + 152);
      }
    }
  }
  return result;
}

uint64_t ResolvedStyledText.TextLayoutManager.prepareLayoutManager(in:with:applyingMarginOffsets:)@<X0>(char a1@<W0>, uint64_t a2@<X8>, double a3@<D4>, double a4@<D5>)
{
  uint64_t v4;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  char v17;
  double v18;
  double v19;
  int v20;
  double v21;
  double v22;
  int v23;
  double v24;
  double v25;
  BOOL v26;
  double v27;
  uint64_t v28;
  int v29;
  double v30;
  double v31;
  int v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  int v38;
  double v39;
  double v40;
  char v41;
  double v42;
  double v43;
  BOOL v44;
  double v45;
  double v46;
  double v47;
  __int128 v48;
  char v49;
  __int128 v50;
  __int128 v51;
  uint64_t v52;
  __int128 v53;
  uint64_t v54;
  char v55;
  char v56;
  char v57;
  __int128 v58;
  double v59;
  double v60;
  uint64_t v61;
  char v62;
  double v63;
  double v64;
  double v65;
  double v66;
  double v67;
  double v68;
  double v69;
  double v70;
  int v71;
  double v72;
  __int128 v74;
  double v75;
  __int128 v76;
  double v77;
  __int128 v78;
  double v79;
  __int128 v80;
  double v81;
  __int128 v82;
  __int128 v83;
  _BYTE v84[24];
  __int128 v85;
  _BYTE v86[24];
  __int128 v87;
  __int128 v88;
  __int128 v89;
  uint64_t v90;
  _BYTE v91[88];
  _QWORD v92[10];
  unsigned __int8 v93;

  if (*(_QWORD *)(v4 + 192))
  {
    swift_beginAccess();
    ResolvedStyledText.TextLayoutManager.Cache.find(measuredSize:)(*(_QWORD *)(v4 + 392), (uint64_t)v91, a3, a4);
    outlined init with take of ResolvedStyledText.TextLayoutManager.Cache.Entry?((uint64_t)v91, (uint64_t)v92);
    v9 = a4;
    v10 = a3;
    if (v93 << 8 != 512)
    {
      v11 = *(double *)v92;
      v12 = *(double *)&v92[1];
      swift_beginAccess();
      if ((~*(_QWORD *)&v12 & 0x7FF0000000000000) != 0)
        v13 = v12;
      else
        v13 = a4;
      if ((~*(_QWORD *)&v11 & 0x7FF0000000000000) != 0)
        v14 = v11;
      else
        v14 = a3;
      if ((*(_BYTE *)(v4 + 96) & 1) != 0)
        v9 = v13;
      else
        v9 = a4;
      if ((*(_BYTE *)(v4 + 96) & 1) != 0)
        v10 = a3;
      else
        v10 = v14;
    }
    swift_beginAccess();
    if (*(_BYTE *)(v4 + 96))
      v15 = v10;
    else
      v15 = v9;
    if (*(_BYTE *)(v4 + 96))
      v16 = v9;
    else
      v16 = v10;
    v17 = *(_BYTE *)(v4 + 96) ^ 1;
    v18 = *(double *)(v4 + 48);
    if (v18 >= 1.0)
    {
      ResolvedStyledText.TextLayoutManager.metrics(scale:requestedSize:)(v17, (uint64_t)&v83, 1.0, v16, v15);
      goto LABEL_73;
    }
    v77 = v9;
    v79 = v10;
    if (v18 > COERCE_DOUBLE(1))
      v19 = *(double *)(v4 + 48);
    else
      v19 = COERCE_DOUBLE(1);
    ResolvedStyledText.TextLayoutManager.metrics(scale:requestedSize:)(v17, (uint64_t)&v83, 1.0, v16, INFINITY);
    v20 = v84[0];
    v21 = *(double *)&v84[8];
    v22 = *(double *)&v84[16];
    v23 = BYTE9(v87);
    swift_bridgeObjectRelease();
    if (v20)
      v24 = v21;
    else
      v24 = v22;
    if (v20)
      v25 = v22;
    else
      v25 = v21;
    if (v23 == 1 || (v24 <= v16 ? (v26 = v25 > v15) : (v26 = 1), v26))
    {
      ResolvedStyledText.TextLayoutManager.metrics(scale:requestedSize:)(v17, (uint64_t)&v83, v19, v16, INFINITY);
      v29 = v84[0];
      v30 = *(double *)&v84[8];
      v31 = *(double *)&v84[16];
      v32 = BYTE9(v87);
      swift_bridgeObjectRelease();
      if (v29)
        v33 = v30;
      else
        v33 = v31;
      if (v29)
        v34 = v31;
      else
        v34 = v30;
      if (v32 != 1 && v33 <= v16 && v34 <= v15)
      {
        v81 = v15;
        v75 = a3;
        v35 = 1.0;
        v36 = v19;
        do
        {
          v37 = v35 + (v35 - v36) * -0.5;
          ResolvedStyledText.TextLayoutManager.metrics(scale:requestedSize:)(v17, (uint64_t)&v83, v37, v16, INFINITY);
          v38 = v84[0];
          v40 = *(double *)&v84[8];
          v39 = *(double *)&v84[16];
          v41 = BYTE9(v87);
          swift_bridgeObjectRelease();
          if (v38)
            v42 = v40;
          else
            v42 = v39;
          if ((v41 & 1) == 0)
          {
            v43 = v38 ? v39 : v40;
            v44 = v43 > v81;
            v45 = v43 > v81 ? v19 : v35 + (v35 - v36) * -0.5;
            v46 = v44 ? v36 : v35 + (v35 - v36) * -0.5;
            v47 = v44 ? v35 + (v35 - v36) * -0.5 : v35;
            if (v42 <= v16)
            {
              v19 = v45;
              v36 = v46;
              v37 = v47;
            }
          }
          v35 = v37;
        }
        while (v37 - v36 >= 0.01);
        ResolvedStyledText.TextLayoutManager.metrics(scale:requestedSize:)(v17, (uint64_t)&v83, v19, v16, v81);
        a3 = v75;
        goto LABEL_72;
      }
      v27 = v19;
    }
    else
    {
      v27 = 1.0;
    }
    ResolvedStyledText.TextLayoutManager.metrics(scale:requestedSize:)(v17, (uint64_t)&v83, v27, v16, v15);
LABEL_72:
    v10 = v79;
    v9 = v77;
LABEL_73:
    v48 = v83;
    v49 = v84[0];
    v50 = *(_OWORD *)&v84[8];
    v51 = v85;
    v52 = *(_QWORD *)v86;
    v53 = *(_OWORD *)&v86[8];
    v54 = v87;
    v55 = BYTE8(v87);
    v56 = BYTE9(v87);
    v57 = BYTE10(v87);
    v58 = v88;
    v59 = 0.0;
    v60 = *(double *)&v86[8] + 0.0;
    v61 = v89;
    if ((a1 & 1) != 0)
    {
      v62 = *(_BYTE *)(v4 + 96);
      v80 = *(_OWORD *)&v84[8];
      v82 = v83;
      v76 = *(_OWORD *)&v86[8];
      v78 = v85;
      v74 = v88;
      swift_beginAccess();
      ResolvedStyledText.TextLayoutManager.drawingMargins.getter();
      v64 = v63;
      v66 = v65;
      ResolvedStyledText.TextLayoutManager.drawingMargins.getter();
      v58 = v74;
      v53 = v76;
      v51 = v78;
      v50 = v80;
      v68 = v60 + v67;
      v70 = v60 + v69;
      if ((v62 & 1) != 0)
        v60 = v68;
      else
        v60 = v70;
      v48 = v82;
      if ((v62 & 1) != 0)
        v59 = v64 + 0.0;
      else
        v59 = v66 + 0.0;
    }
    v71 = *(unsigned __int8 *)(v4 + 42);
    if ((*(_BYTE *)(v4 + 96) & 1) != 0)
    {
      if (*(_BYTE *)(v4 + 42))
      {
        v72 = v9 - a4;
        if (v71 == 1)
          v72 = (v9 - a4) * 0.5;
      }
      else
      {
        v72 = 0.0;
      }
      goto LABEL_93;
    }
    if (*(_BYTE *)(v4 + 42))
    {
      if (v71 == 1)
      {
        v72 = (v10 - a3) * 0.5;
LABEL_93:
        *(double *)&v83 = v59 - v72;
        *((double *)&v83 + 1) = v60;
        *(_OWORD *)v84 = v48;
        v84[16] = v49;
        v85 = v50;
        *(_OWORD *)v86 = v51;
        *(_QWORD *)&v86[16] = v52;
        v87 = v53;
        *(_QWORD *)&v88 = v54;
        BYTE8(v88) = v55;
        BYTE9(v88) = v56;
        BYTE10(v88) = v57;
        v89 = v58;
        v90 = v61;
        _ViewInputs.base.modify(&v83, v28);
        return outlined init with take of (CGPoint, ResolvedStyledText.TextLayoutManager.Metrics)?((uint64_t)&v83, a2);
      }
      v72 = 0.0;
      if ((*(_BYTE *)(v4 + 43) & 1) != 0)
        goto LABEL_93;
    }
    else
    {
      v72 = 0.0;
      if ((*(_BYTE *)(v4 + 43) & 1) == 0)
        goto LABEL_93;
    }
    v72 = v10 - a3;
    goto LABEL_93;
  }
  _sSo7CGPointV_7SwiftUI18ResolvedStyledTextC0F13LayoutManagerC7Metrics33_B6B30FF60BE9B7CF80B161CEF951DAD7LLVtSgWOi0_((uint64_t)&v83);
  return outlined init with take of (CGPoint, ResolvedStyledText.TextLayoutManager.Metrics)?((uint64_t)&v83, a2);
}

void ResolvedStyledText.TextLayoutManager.draw(in:with:applyingMarginOffsets:containsResolvable:context:renderer:)(char a1, CGFloat a2, CGFloat a3, CGFloat a4, CGFloat a5, double a6, double a7, uint64_t a8, uint64_t a9, _QWORD *a10)
{
  uint64_t v10;
  uint64_t v11;
  double v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  void *v24;
  id v25;
  void *v26;
  char v27;
  id v28;
  uint64_t v29;
  id v30;
  void *v31;
  id v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  char v37;
  uint64_t v38;
  void *v39;
  id v40;
  id v41;
  id v42;
  void *v43;
  CGContext *v44;
  CGFloat Width;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  BOOL (*v52)(void *);
  void *v53;
  CGContext *v54;
  id v55;
  void *v56;
  _QWORD *v57;
  char v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  void (*v62)(_QWORD **);
  void *v63;
  void *v64;
  char v65;
  void *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char v72;
  char v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t (*v77)(uint64_t, uint64_t);
  double v78;
  double v79;
  char v80;
  double v81;
  double v82;
  double v83;
  _QWORD *v84;
  uint64_t v85;
  void *v86;
  void *v87;
  uint64_t (*v88)();
  uint64_t v89;
  uint64_t v90[2];
  double aBlock;
  uint64_t v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  char v99;
  char v100;
  char v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105[17];
  _QWORD v106[4];
  char v107;
  double v108;
  uint64_t v109;
  double v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  char v116;
  char v117;
  char v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  CGRect v122;

  v11 = v10;
  ResolvedStyledText.TextLayoutManager.prepareLayoutManager(in:with:applyingMarginOffsets:)(a1, (uint64_t)&aBlock, a6, a7);
  outlined init with take of (CGPoint, ResolvedStyledText.TextLayoutManager.Metrics)?((uint64_t)&aBlock, (uint64_t)v105);
  outlined init with take of (CGPoint, ResolvedStyledText.TextLayoutManager.Metrics)?((uint64_t)v105, (uint64_t)v106);
  if (_sSo7CGPointV_7SwiftUI18ResolvedStyledTextC0F13LayoutManagerC7Metrics33_B6B30FF60BE9B7CF80B161CEF951DAD7LLVtSgWOg((uint64_t)v106) == 1)
    return;
  v82 = *(double *)v106;
  v83 = *(double *)&v106[1];
  v78 = *(double *)&v106[2];
  v79 = *(double *)&v106[3];
  v80 = v107;
  v17 = v108;
  v18 = v109;
  v81 = v110;
  v19 = v111;
  v20 = v112;
  v74 = v114;
  v75 = v113;
  v21 = v115;
  LOBYTE(v22) = v116;
  v23 = v117;
  v72 = v118;
  v70 = v120;
  v71 = v119;
  v69 = v121;
  v24 = (void *)objc_opt_self();
  v25 = objc_msgSend(v24, sel_current);
  v73 = v23;
  if (v25)
  {
    v26 = v25;
    v27 = v22;
    v28 = objc_msgSend(v25, sel_CGContext);

    if (v28 && (v29 = MEMORY[0x23B7C8EA8](v28, 0, 0), v28, v29))
    {
      v30 = (id)RBDrawingStateGetDisplayList();
      v31 = v30;
      LOBYTE(v22) = v27;
      if (v30)
      {
        v32 = objc_msgSend(v30, sel_CGStyleHandler);
        v67 = v21;
        if (v32)
        {
          v33 = v32;
          v34 = swift_allocObject();
          *(_QWORD *)(v34 + 16) = v33;
          v76 = v34;
          v77 = partial apply for thunk for @escaping @callee_unowned @convention(block) (@unowned RBDrawingState, @unowned Int) -> ();
        }
        else
        {
          v76 = 0;
          v77 = 0;
        }
        v35 = *(_QWORD *)(v11 + 248);
        if (*(_QWORD *)(v35 + 16))
        {
          swift_beginAccess();
          v36 = *(_BYTE *)(v11 + 43);
          v37 = *(_BYTE *)(v11 + 44);
          v38 = swift_allocObject();
          *(_QWORD *)(v38 + 16) = v35;
          *(_BYTE *)(v38 + 24) = v37;
          *(_BYTE *)(v38 + 25) = v36;
          *(_QWORD *)&v94 = partial apply for closure #1 in ResolvedStyledText.cgStyleHandler.getter;
          *((_QWORD *)&v94 + 1) = v38;
          aBlock = MEMORY[0x24BDAC760];
          v92 = 1107296256;
          *(_QWORD *)&v93 = thunk for @escaping @callee_guaranteed (@unowned Bool, @unowned UInt32) -> ();
          *((_QWORD *)&v93 + 1) = &block_descriptor_62_0;
          v39 = _Block_copy(&aBlock);
          v40 = v31;
          swift_bridgeObjectRetain();
          LOBYTE(v22) = v27;
          swift_release();
        }
        else
        {
          v41 = v31;
          v39 = 0;
        }
        v21 = v67;
        objc_msgSend(v31, sel_setCGStyleHandler_, v39);
        _Block_release(v39);

      }
      else
      {
        v76 = 0;
        v77 = 0;
      }
    }
    else
    {
      v76 = 0;
      v77 = 0;
      v31 = 0;
      LOBYTE(v22) = v27;
    }
  }
  else
  {
    v76 = 0;
    v77 = 0;
    v31 = 0;
  }
  v42 = objc_msgSend(v24, sel_current);
  if (!v42
    || (v43 = v42,
        v44 = (CGContext *)objc_msgSend(v42, (SEL)&stru_250686030.offs + 7),
        v43,
        !v44))
  {
    __break(1u);
    return;
  }
  CGContextSaveGState(v44);
  swift_beginAccess();
  if (*(_BYTE *)(v11 + 96) == 1)
  {
    v122.origin.x = a2;
    v122.origin.y = a3;
    v122.size.width = a4;
    v122.size.height = a5;
    Width = CGRectGetWidth(v122);
    CGContextTranslateCTM(v44, Width, 0.0);
    CGContextRotateCTM(v44, 1.57079633);
  }
  if (a10 || *(_QWORD *)(*(_QWORD *)(v11 + 384) + 16))
    goto LABEL_27;
  v65 = v22;
  v66 = v31;
  v68 = v21;
  v46 = *(void **)(v11 + 328);
  v47 = *(_QWORD *)(v11 + 336);
  v48 = *(_QWORD *)(v11 + 344);
  v49 = *(_QWORD *)(v11 + 352);
  v22 = *(_QWORD *)(v11 + 360);
  v50 = *(_QWORD *)(v11 + 368);
  if ((v50 & 0x8000000000000000) == 0)
  {
    outlined copy of ResolvedTextSuffix(*(void **)(v11 + 328), *(_QWORD *)(v11 + 336), *(_QWORD *)(v11 + 344), *(_QWORD *)(v11 + 352), *(_QWORD *)(v11 + 360), *(_QWORD *)(v11 + 368));
    outlined consume of ResolvedTextSuffix(v46, v47, v48, v49, v22, v50);
    outlined consume of ResolvedTextSuffix(0, 0, 0, 0, 0, 0x8000000000000000);
    v31 = v66;
    v21 = v68;
    LOBYTE(v22) = v65;
LABEL_27:
    v56 = v31;
    if (one-time initialization token for lineFragmentPadding != -1)
      swift_once();
    aBlock = v78;
    v92 = *(_QWORD *)&v79;
    LOBYTE(v93) = v80;
    *((double *)&v93 + 1) = v17;
    *(_QWORD *)&v94 = v18;
    *((double *)&v94 + 1) = v81;
    *(_QWORD *)&v95 = v19;
    *((_QWORD *)&v95 + 1) = v20;
    v96 = v75;
    v97 = v74;
    v98 = v21;
    v99 = v22;
    v100 = v73;
    v101 = v72;
    v102 = v71;
    v103 = v70;
    v104 = v69;
    ResolvedStyledText.TextLayoutManager.ensureAndCollectTextLayout(origin:metrics:)(&aBlock, (uint64_t)&v84, v82 + *(double *)&static ResolvedStyledText.TextLayoutManager.lineFragmentPadding, v83);
    outlined release of (CGPoint, ResolvedStyledText.TextLayoutManager.Metrics)?(v105);
    v57 = v84;
    v58 = v85;
    v59 = (uint64_t)v86;
    if (a10)
    {
      v60 = a10[2];
      v61 = a10[3];
      swift_retain();
      swift_retain();
    }
    else
    {
      v84 = 0;
      v85 = 0;
      if (one-time initialization token for shared != -1)
        swift_once();
      swift_beginAccess();
      v62 = *(void (**)(_QWORD **))((*MEMORY[0x24BEE4EA0] & *(_QWORD *)static CoreGlue2.shared) + 0x68);
      v63 = static CoreGlue2.shared;
      v62(&v84);

      v60 = (uint64_t)v84;
      v61 = v85;
    }
    v90[0] = v60;
    v90[1] = v61;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    specialized static GraphicsContext.renderingTo(cgContext:environment:deviceScale:content:)(v44, v90, 0, 1, (uint64_t)a10, v57, v58, v59);
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_bridgeObjectRelease_n();
    v52 = 0;
    v31 = v56;
    goto LABEL_35;
  }
  outlined consume of ResolvedTextSuffix(*(void **)(v11 + 328), *(_QWORD *)(v11 + 336), *(_QWORD *)(v11 + 344), *(_QWORD *)(v11 + 352), *(_QWORD *)(v11 + 360), *(_QWORD *)(v11 + 368));
  outlined consume of ResolvedTextSuffix(0, 0, 0, 0, 0, 0x8000000000000000);
  v31 = v66;
  v21 = v68;
  LOBYTE(v22) = v65;
  if ((*(_WORD *)(v11 + 236) & 0x80) != 0)
    goto LABEL_27;
  aBlock = 0.0;
  LOBYTE(v92) = 1;
  v93 = 0u;
  v94 = 0u;
  v95 = 0u;
  LOBYTE(v96) = 1;
  v17 = v81;
  ResolvedStyledText.TextLayoutManager.layout(with:in:at:)((uint64_t)&aBlock, v78, v79, v81);
  v51 = *(void **)(v11 + 192);
  swift_beginAccess();
  a10 = ResolvedStyledText.TextLayoutManager.LayoutManager.layoutManager(for:original:)(v51, v81);
  swift_endAccess();
  outlined release of (CGPoint, ResolvedStyledText.TextLayoutManager.Metrics)?(v105);
  v22 = swift_allocObject();
  *(double *)(v22 + 16) = v82;
  *(double *)(v22 + 24) = v83;
  *(_QWORD *)(v22 + 32) = v44;
  v21 = swift_allocObject();
  v52 = partial apply for closure #3 in ResolvedStyledText.TextLayoutManager.draw(in:with:applyingMarginOffsets:containsResolvable:context:renderer:);
  *(_QWORD *)(v21 + 16) = partial apply for closure #3 in ResolvedStyledText.TextLayoutManager.draw(in:with:applyingMarginOffsets:containsResolvable:context:renderer:);
  *(_QWORD *)(v21 + 24) = v22;
  v88 = thunk for @callee_guaranteed (@guaranteed NSTextLayoutFragment) -> (@unowned Bool)partial apply;
  v89 = v21;
  v84 = (_QWORD *)MEMORY[0x24BDAC760];
  v85 = 1107296256;
  v86 = thunk for @escaping @callee_guaranteed (@guaranteed NSTextLayoutFragment) -> (@unowned Bool);
  v87 = &block_descriptor_56;
  v53 = _Block_copy(&v84);
  v54 = v44;
  swift_retain();
  swift_release();
  v55 = objc_msgSend(a10, sel_enumerateTextLayoutFragmentsFromLocation_options_usingBlock_, 0, 0, v53);

  swift_unknownObjectRelease();
  _Block_release(v53);
  LOBYTE(v53) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if ((v53 & 1) != 0)
  {
    __break(1u);
    goto LABEL_27;
  }
LABEL_35:
  CGContextRestoreGState(v44);

  if (v31)
  {
    if (v77)
    {
      v88 = (uint64_t (*)())v77;
      v89 = v76;
      v84 = (_QWORD *)MEMORY[0x24BDAC760];
      v85 = 1107296256;
      v86 = thunk for @escaping @callee_guaranteed (@unowned Bool, @unowned UInt32) -> ();
      v87 = &block_descriptor_46;
      v64 = _Block_copy(&v84);
      swift_retain();
      swift_release();
    }
    else
    {
      v64 = 0;
    }
    objc_msgSend(v31, sel_setCGStyleHandler_, v64);
    _Block_release(v64);
    outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed @escaping @callee_guaranteed (@unowned Bool) -> ()) -> ())?((uint64_t)v77);

  }
  else
  {
    outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed @escaping @callee_guaranteed (@unowned Bool) -> ()) -> ())?((uint64_t)v77);
  }
  outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed @escaping @callee_guaranteed (@unowned Bool) -> ()) -> ())?((uint64_t)v52);
}

void ResolvedStyledText.TextLayoutManager.ensureAndCollectTextLayout(origin:metrics:)(double *a1@<X0>, uint64_t a2@<X8>, double a3@<D0>, double a4@<D1>)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, void *);
  char v10;
  uint64_t v11;
  uint64_t v12;
  double v13;
  double v14;
  double v15;
  void *v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  id v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t aBlock;
  uint64_t v26;
  uint64_t (*v27)(uint64_t, void *);
  void *v28;
  uint64_t (*v29)();
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  char v38;

  if (*((_QWORD *)a1 + 12))
  {
    v8 = *((_QWORD *)a1 + 13);
    v9 = (uint64_t (*)(uint64_t, void *))*((_QWORD *)a1 + 14);
    aBlock = *((_QWORD *)a1 + 12);
    LOBYTE(v26) = v8 & 1;
    v27 = v9;
    Text.Layout.offset(by:)((uint64_t)&v33, a3, a4);
    v10 = v34;
    v11 = v35;
    *(_QWORD *)a2 = v33;
    *(_BYTE *)(a2 + 8) = v10;
    *(_QWORD *)(a2 + 16) = v11;
  }
  else
  {
    v12 = v4;
    v13 = *a1;
    v14 = a1[1];
    v15 = a1[5];
    v33 = 0;
    v34 = 1;
    v35 = 0u;
    v36 = 0u;
    v37 = 0u;
    v38 = 1;
    ResolvedStyledText.TextLayoutManager.layout(with:in:at:)((uint64_t)&v33, v13, v14, v15);
    v32 = MEMORY[0x24BEE4AF8];
    v31 = 0;
    v16 = *(void **)(v4 + 192);
    swift_beginAccess();
    v17 = ResolvedStyledText.TextLayoutManager.LayoutManager.layoutManager(for:original:)(v16, v15);
    swift_endAccess();
    LODWORD(v12) = (*(unsigned __int16 *)(v12 + 236) >> 3) & 0x10;
    v18 = swift_allocObject();
    *(double *)(v18 + 16) = a3;
    *(double *)(v18 + 24) = a4;
    *(_QWORD *)(v18 + 32) = &v32;
    *(_DWORD *)(v18 + 40) = v12;
    *(_QWORD *)(v18 + 48) = &v31;
    v19 = swift_allocObject();
    *(_QWORD *)(v19 + 16) = partial apply for closure #1 in ResolvedStyledText.TextLayoutManager.collectTextLayout(origin:scale:);
    *(_QWORD *)(v19 + 24) = v18;
    v29 = partial apply for thunk for @callee_guaranteed (@guaranteed NSTextRange?, @unowned CGRect, @unowned CGFloat, @guaranteed NSTextContainer) -> (@unowned Bool);
    v30 = v19;
    aBlock = MEMORY[0x24BDAC760];
    v26 = 1107296256;
    v27 = thunk for @escaping @callee_guaranteed (@guaranteed NSTextLayoutFragment) -> (@unowned Bool);
    v28 = &block_descriptor_25;
    v20 = _Block_copy(&aBlock);
    swift_retain();
    swift_release();
    v21 = objc_msgSend(v17, sel_enumerateTextLayoutFragmentsFromLocation_options_usingBlock_, 0, 0, v20);
    swift_unknownObjectRelease();

    _Block_release(v20);
    LOBYTE(v17) = swift_isEscapingClosureAtFileLocation();
    swift_release();
    if ((v17 & 1) != 0)
    {
      __break(1u);
    }
    else
    {
      v22 = v32;
      v23 = v31;
      v24 = *(_QWORD *)(v32 + 16);
      swift_release();
      *(_QWORD *)a2 = v22;
      *(_BYTE *)(a2 + 8) = v23;
      *(_QWORD *)(a2 + 16) = v24;
    }
  }
}

BOOL closure #3 in ResolvedStyledText.TextLayoutManager.draw(in:with:applyingMarginOffsets:containsResolvable:context:renderer:)(void *a1, uint64_t a2, double a3, double a4)
{
  id v8;
  double v9;
  double v10;

  v8 = objc_msgSend(a1, sel_state);
  if (v8 == (id)3)
  {
    objc_msgSend(a1, sel_layoutFragmentFrame);
    objc_msgSend(a1, sel_drawAtPoint_inContext_, a2, v9 + a3, v10 + a4);
  }
  return v8 == (id)3;
}

BOOL closure #1 in ResolvedStyledText.TextLayoutManager.collectTextLayout(origin:scale:)(void *a1, _QWORD **a2, int a3, BOOL *a4, double a5, double a6)
{
  unint64_t v12;
  double v13;
  double v14;
  double v15;
  double v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  double v20;
  double v21;
  id v22;
  id v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  _QWORD *v32;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v34;
  unint64_t v35;
  _QWORD *v36;
  BOOL v37;
  id v38;
  void *v39;
  unint64_t v40;
  uint64_t v41;
  id v43;

  v12 = (unint64_t)objc_msgSend(a1, sel_state);
  if (v12 == 3)
  {
    objc_msgSend(a1, sel_layoutFragmentFrame);
    v14 = v13;
    v16 = v15;
    v43 = a1;
    v17 = objc_msgSend(a1, sel_textLineFragments);
    type metadata accessor for CAPresentationModifier(0, (unint64_t *)&lazy cache variable for type metadata for NSTextLineFragment);
    v12 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    if (v12 >> 62)
    {
      swift_bridgeObjectRetain();
      v18 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (!v18)
        goto LABEL_16;
    }
    else
    {
      v18 = *(_QWORD *)((v12 & 0xFFFFFFFFFFFFF8) + 0x10);
      if (!v18)
        goto LABEL_16;
    }
    if (v18 < 1)
    {
      __break(1u);
      goto LABEL_26;
    }
    v19 = 0;
    v20 = v14 + a5;
    v21 = v16 + a6;
    do
    {
      if ((v12 & 0xC000000000000001) != 0)
        v22 = (id)MEMORY[0x23B7C6D9C](v19, v12);
      else
        v22 = *(id *)(v12 + 8 * v19 + 32);
      v23 = v22;
      objc_msgSend(v23, sel_typographicBounds);
      v25 = v24;
      v27 = v26;
      objc_msgSend(v23, sel_glyphOrigin);
      v29 = v28;
      v31 = v30;
      v32 = *a2;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *a2 = v32;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        v32 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v32[2] + 1, 1, v32);
        *a2 = v32;
      }
      v35 = v32[2];
      v34 = v32[3];
      if (v35 >= v34 >> 1)
        v32 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v34 > 1), v35 + 1, 1, v32);
      ++v19;
      v32[2] = v35 + 1;
      v36 = &v32[6 * v35];
      v36[4] = v23;
      v36[5] = 0;
      *((_BYTE *)v36 + 48) = 1;
      *((double *)v36 + 7) = v20 + v25 + v29;
      *((double *)v36 + 8) = v21 + v27 + v31;
      *((_DWORD *)v36 + 18) = a3;
      *a2 = v32;

    }
    while (v18 != v19);
LABEL_16:
    swift_bridgeObjectRelease();
    if (*a4)
    {
      v37 = 1;
      v12 = 3;
LABEL_23:
      *a4 = v37;
      return v12 == 3;
    }
    v38 = objc_msgSend(v43, sel_truncatedRanges);
    v12 = 3;
    if (!v38)
    {
      v37 = 0;
      goto LABEL_23;
    }
    v39 = v38;
    type metadata accessor for CAPresentationModifier(0, (unint64_t *)&lazy cache variable for type metadata for NSTextRange);
    v40 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    if (!(v40 >> 62))
    {
      v41 = *(_QWORD *)((v40 & 0xFFFFFFFFFFFFF8) + 0x10);
LABEL_21:
      swift_bridgeObjectRelease();
      v37 = v41 != 0;
      goto LABEL_23;
    }
LABEL_26:
    swift_bridgeObjectRetain();
    v41 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    goto LABEL_21;
  }
  return v12 == 3;
}

void ResolvedStyledText.TextLayoutManager.linkURL(at:in:)(_BYTE *a1@<X8>, CGFloat a2@<D0>, CGFloat a3@<D1>, double a4@<D2>, double a5@<D3>)
{
  uint64_t v5;
  void *v7;
  id v12;
  uint64_t v13;
  double v14;
  double v15;
  double v16;
  double v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  CGPoint v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  unint64_t v28;
  id v29;
  void *v30;
  id v31;
  void *v32;
  void *v33;
  id v34;
  uint64_t v35;
  uint64_t v36;
  CGAffineTransform v37;
  CGAffineTransform v38;
  uint64_t v39[17];
  _QWORD v40[17];
  CGPoint v41;

  v7 = *(void **)(v5 + 192);
  if (!v7)
  {
    v13 = type metadata accessor for URL();
    (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(a1, 1, 1, v13);
    return;
  }
  v12 = v7;
  ResolvedStyledText.TextLayoutManager.prepareLayoutManager(in:with:applyingMarginOffsets:)(0, (uint64_t)&v38, a4, a5);
  outlined init with take of (CGPoint, ResolvedStyledText.TextLayoutManager.Metrics)?((uint64_t)&v38, (uint64_t)v39);
  outlined init with take of (CGPoint, ResolvedStyledText.TextLayoutManager.Metrics)?((uint64_t)v39, (uint64_t)v40);
  if (_sSo7CGPointV_7SwiftUI18ResolvedStyledTextC0F13LayoutManagerC7Metrics33_B6B30FF60BE9B7CF80B161CEF951DAD7LLVtSgWOg((uint64_t)v40) == 1)
  {

LABEL_28:
    v36 = type metadata accessor for URL();
    (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v36 - 8) + 56))(a1, 1, 1, v36);
    return;
  }
  v15 = *(double *)v40;
  v14 = *(double *)&v40[1];
  v16 = *(double *)&v40[7];
  if (one-time initialization token for lineFragmentPadding != -1)
    swift_once();
  v17 = v15 + *(double *)&static ResolvedStyledText.TextLayoutManager.lineFragmentPadding;
  swift_beginAccess();
  if (*(_BYTE *)(v5 + 96) == 1)
  {
    CGAffineTransformMakeTranslation(&v38, a4, 0.0);
    CGAffineTransformRotate(&v37, &v38, 1.57079633);
    v38 = v37;
    CGAffineTransformInvert(&v37, &v38);
    v19 = *(_OWORD *)&v37.a;
    v18 = *(_OWORD *)&v37.c;
    v20 = *(_OWORD *)&v37.tx;
  }
  else
  {
    v18 = xmmword_23528A280;
    v19 = xmmword_235281560;
    v20 = 0uLL;
  }
  *(_OWORD *)&v38.a = v19;
  *(_OWORD *)&v38.c = v18;
  *(_OWORD *)&v38.tx = v20;
  v41.x = a2;
  v41.y = a3;
  v21 = CGPointApplyAffineTransform(v41, &v38);
  swift_beginAccess();
  v22 = ResolvedStyledText.TextLayoutManager.LayoutManager.layoutManager(for:original:)(v7, v16);
  swift_endAccess();
  outlined release of (CGPoint, ResolvedStyledText.TextLayoutManager.Metrics)?(v39);
  v23 = objc_msgSend(v22, sel_textSelectionNavigation);
  v24 = objc_msgSend(v22, sel_documentRange);
  v25 = objc_msgSend(v24, sel_location);

  v26 = objc_msgSend(v23, sel_textSelectionForSelectionGranularity_enclosingPoint_inContainerAtLocation_, 0, v25, v21.x - v17, v21.y - v14);
  swift_unknownObjectRelease();
  if (!v26)
    goto LABEL_23;
  v27 = objc_msgSend(v26, sel_textRanges);
  type metadata accessor for CAPresentationModifier(0, (unint64_t *)&lazy cache variable for type metadata for NSTextRange);
  v28 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (!(v28 >> 62))
  {
    if (*(_QWORD *)((v28 & 0xFFFFFFFFFFFFF8) + 0x10))
      goto LABEL_13;
LABEL_27:

    swift_bridgeObjectRelease();
    goto LABEL_28;
  }
  swift_bridgeObjectRetain();
  v35 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v35)
    goto LABEL_27;
LABEL_13:
  if ((v28 & 0xC000000000000001) != 0)
  {
    v29 = (id)MEMORY[0x23B7C6D9C](0, v28);
    goto LABEL_16;
  }
  if (*(_QWORD *)((v28 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v29 = *(id *)(v28 + 32);
LABEL_16:
    v30 = v29;
    swift_bridgeObjectRelease();
    v31 = objc_msgSend(v30, sel_location);

    if (v31)
    {
      objc_opt_self();
      v32 = (void *)swift_dynamicCastObjCClass();
      if (v32)
      {
        v33 = v32;
        v34 = objc_msgSend(v32, sel_characterIndex);
        if ((uint64_t)v34 >= (uint64_t)objc_msgSend(v12, sel_length))
        {
          swift_unknownObjectRelease();

          goto LABEL_28;
        }
        if (objc_msgSend(v12, sel_attribute_atIndex_effectiveRange_, *MEMORY[0x24BEBB388], objc_msgSend(v33, sel_characterIndex), 0))
        {
          _bridgeAnyObjectToAny(_:)();
          swift_unknownObjectRelease();
          outlined init with take of Any(&v37, &v38);
          outlined init with copy of Any((uint64_t)&v38, (uint64_t)&v37);
          URL.init(urlValue:)((uint64_t)&v37, a1);

          swift_unknownObjectRelease();
          __swift_destroy_boxed_opaque_existential_1((uint64_t)&v38);
          return;
        }

        swift_unknownObjectRelease();
        goto LABEL_23;
      }
      swift_unknownObjectRelease();
    }

LABEL_23:
    goto LABEL_28;
  }
  __break(1u);
}

uint64_t ResolvedStyledText.TextLayoutManager.layoutValue(in:with:applyingMarginOffsets:)@<X0>(char a1@<W0>, _QWORD *a2@<X8>, double a3@<D4>, double a4@<D5>)
{
  uint64_t result;
  double v6;
  double v7;
  __int128 v8;
  char v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  char v16;
  char v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  unsigned __int8 v28;
  uint64_t v29;
  __int128 v30;
  char v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  char v38;
  char v39;
  __int128 v40;
  uint64_t v41;
  uint64_t v42[17];
  _QWORD v43[2];
  __int128 v44;
  char v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  char v52;
  char v53;
  __int128 v54;
  uint64_t v55;

  ResolvedStyledText.TextLayoutManager.prepareLayoutManager(in:with:applyingMarginOffsets:)(a1, (uint64_t)&v30, a3, a4);
  outlined init with take of (CGPoint, ResolvedStyledText.TextLayoutManager.Metrics)?((uint64_t)&v30, (uint64_t)v42);
  outlined init with take of (CGPoint, ResolvedStyledText.TextLayoutManager.Metrics)?((uint64_t)v42, (uint64_t)v43);
  result = _sSo7CGPointV_7SwiftUI18ResolvedStyledTextC0F13LayoutManagerC7Metrics33_B6B30FF60BE9B7CF80B161CEF951DAD7LLVtSgWOg((uint64_t)v43);
  if ((_DWORD)result == 1)
  {
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
  }
  else
  {
    v7 = *(double *)v43;
    v6 = *(double *)&v43[1];
    v8 = v44;
    v9 = v45;
    v10 = v46;
    v11 = v47;
    v12 = v48;
    v13 = v49;
    v14 = v50;
    v15 = v51;
    v16 = v52;
    v17 = v53;
    v18 = v54;
    v19 = v55;
    if (one-time initialization token for lineFragmentPadding != -1)
    {
      v25 = v46;
      v26 = v44;
      v23 = v48;
      v24 = v47;
      v22 = v54;
      swift_once();
      v18 = v22;
      v12 = v23;
      v11 = v24;
      v10 = v25;
      v8 = v26;
    }
    v30 = v8;
    v31 = v9;
    v32 = v10;
    v33 = v11;
    v34 = v12;
    v35 = v13;
    v36 = v14;
    v37 = v15;
    v38 = v16;
    v39 = v17;
    v40 = v18;
    v41 = v19;
    ResolvedStyledText.TextLayoutManager.ensureAndCollectTextLayout(origin:metrics:)((double *)&v30, (uint64_t)&v27, v7 + *(double *)&static ResolvedStyledText.TextLayoutManager.lineFragmentPadding, v6);
    result = (uint64_t)outlined release of (CGPoint, ResolvedStyledText.TextLayoutManager.Metrics)?(v42);
    v20 = v28;
    v21 = v29;
    *a2 = v27;
    a2[1] = v20;
    a2[2] = v21;
  }
  return result;
}

void ResolvedStyledText.TextLayoutManager.__ivar_destroyer()
{
  uint64_t v0;
  void *v1;
  id v2;

  outlined consume of ResolvedTextSuffix(*(void **)(v0 + 328), *(_QWORD *)(v0 + 336), *(_QWORD *)(v0 + 344), *(_QWORD *)(v0 + 352), *(_QWORD *)(v0 + 360), *(_QWORD *)(v0 + 368));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v1 = *(void **)(v0 + 400);
  v2 = *(id *)(v0 + 424);

}

uint64_t ResolvedStyledText.TextLayoutManager.deinit()
{
  uint64_t v0;
  __int128 v1;
  __int128 v2;
  __int128 v3;
  void *v4;
  void *v5;
  _OWORD v7[6];
  _OWORD v8[2];

  v1 = *(_OWORD *)(v0 + 96);
  v7[4] = *(_OWORD *)(v0 + 80);
  v7[5] = v1;
  v8[0] = *(_OWORD *)(v0 + 112);
  *(_OWORD *)((char *)v8 + 9) = *(_OWORD *)(v0 + 121);
  v2 = *(_OWORD *)(v0 + 32);
  v7[0] = *(_OWORD *)(v0 + 16);
  v7[1] = v2;
  v3 = *(_OWORD *)(v0 + 64);
  v7[2] = *(_OWORD *)(v0 + 48);
  v7[3] = v3;
  outlined release of TextLayoutProperties((uint64_t)v7);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined consume of ResolvedTextSuffix(*(void **)(v0 + 328), *(_QWORD *)(v0 + 336), *(_QWORD *)(v0 + 344), *(_QWORD *)(v0 + 352), *(_QWORD *)(v0 + 360), *(_QWORD *)(v0 + 368));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v4 = *(void **)(v0 + 400);
  v5 = *(void **)(v0 + 424);

  return v0;
}

uint64_t ResolvedStyledText.TextLayoutManager.__deallocating_deinit()
{
  ResolvedStyledText.TextLayoutManager.deinit();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for ResolvedStyledText.TextLayoutManager()
{
  return objc_opt_self();
}

uint64_t vtable thunk for ResolvedStyledText.__allocating_init(storage:layoutProperties:layoutMargins:stylePadding:archiveOptions:isCollapsible:features:suffix:attachments:styles:transitions:scaleFactorOverride:) dispatching to ResolvedStyledText.TextLayoutManager.__allocating_init(storage:layoutProperties:layoutMargins:stylePadding:archiveOptions:isCollapsible:features:suffix:attachments:styles:transitions:scaleFactorOverride:)(void *a1, uint64_t *a2, uint64_t a3, __int16 *a4, char a5, __int16 *a6, uint64_t a7, uint64_t *a8, double a9, double a10, double a11, double a12, uint64_t a13, uint64_t a14)
{
  __int16 v25;
  __int16 v26;

  v26 = *a4;
  v25 = *a6;
  swift_allocObject();
  return specialized ResolvedStyledText.TextLayoutManager.init(storage:layoutProperties:layoutMargins:stylePadding:archiveOptions:isCollapsible:features:suffix:attachments:styles:transitions:scaleFactorOverride:)(a1, a2, a3, (char *)&v26, a5, &v25, a7, a8, a9, a10, a11, a12, a13, a14);
}

void destroy for ResolvedStyledText.TextLayoutManager.LayoutManager(id *a1)
{

}

uint64_t initializeWithCopy for ResolvedStyledText.TextLayoutManager.LayoutManager(uint64_t a1, uint64_t a2)
{
  void *v3;
  void *v4;
  void *v5;
  id v6;
  id v7;
  id v8;

  v3 = *(void **)a2;
  v4 = *(void **)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  v5 = *(void **)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v5;
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  v6 = v3;
  v7 = v4;
  v8 = v5;
  return a1;
}

uint64_t assignWithCopy for ResolvedStyledText.TextLayoutManager.LayoutManager(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;
  void *v7;
  void *v8;
  id v9;
  void *v10;
  void *v11;
  id v12;

  v4 = *(void **)a2;
  v5 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = v4;

  v7 = *(void **)(a2 + 8);
  v8 = *(void **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v7;
  v9 = v7;

  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v10 = *(void **)(a2 + 24);
  v11 = *(void **)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v10;
  v12 = v10;

  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  return a1;
}

uint64_t assignWithTake for ResolvedStyledText.TextLayoutManager.LayoutManager(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;

  v4 = *(void **)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;

  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v5 = *(void **)(a1 + 24);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);

  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  return a1;
}

void *type metadata accessor for ResolvedStyledText.TextLayoutManager.LayoutManager()
{
  return &unk_250629E98;
}

ValueMetadata *type metadata accessor for ResolvedStyledText.TextLayoutManager.Cache()
{
  return &type metadata for ResolvedStyledText.TextLayoutManager.Cache;
}

uint64_t outlined init with take of (CGPoint, ResolvedStyledText.TextLayoutManager.Metrics)?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for (CGPoint, ResolvedStyledText.TextLayoutManager.Metrics)?();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void type metadata accessor for (CGPoint, ResolvedStyledText.TextLayoutManager.Metrics)?()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for (CGPoint, ResolvedStyledText.TextLayoutManager.Metrics)?)
  {
    type metadata accessor for (CGPoint, ResolvedStyledText.TextLayoutManager.Metrics)();
    v0 = type metadata accessor for Optional();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for (CGPoint, ResolvedStyledText.TextLayoutManager.Metrics)?);
  }
}

void type metadata accessor for (CGPoint, ResolvedStyledText.TextLayoutManager.Metrics)()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!lazy cache variable for type metadata for (CGPoint, ResolvedStyledText.TextLayoutManager.Metrics))
  {
    type metadata accessor for CGPoint(255);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (CGPoint, ResolvedStyledText.TextLayoutManager.Metrics));
  }
}

uint64_t _sSo7CGPointV_7SwiftUI18ResolvedStyledTextC0F13LayoutManagerC7Metrics33_B6B30FF60BE9B7CF80B161CEF951DAD7LLVtSgWOg(uint64_t a1)
{
  unint64_t v1;
  int v2;

  v1 = *(_QWORD *)(a1 + 112);
  if (v1 >= 0xFFFFFFFF)
    LODWORD(v1) = -1;
  v2 = v1 - 1;
  if (v2 < 0)
    v2 = -1;
  return (v2 + 1);
}

uint64_t *outlined release of (CGPoint, ResolvedStyledText.TextLayoutManager.Metrics)?(uint64_t *a1)
{
  outlined consume of (CGPoint, ResolvedStyledText.TextLayoutManager.Metrics)?(*a1, a1[1], a1[2], a1[3], a1[4], a1[5], a1[6], a1[7], a1[8], a1[9], a1[10], a1[11], a1[12], a1[13], a1[14]);
  return a1;
}

uint64_t outlined consume of (CGPoint, ResolvedStyledText.TextLayoutManager.Metrics)?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  uint64_t result;

  result = a15;
  if (a15 != 1)
    return swift_bridgeObjectRelease();
  return result;
}

uint64_t sub_234FB37C8()
{
  return swift_deallocObject();
}

uint64_t sub_234FB37DC()
{
  return swift_deallocObject();
}

uint64_t block_copy_helper_25(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_25()
{
  return swift_release();
}

uint64_t sub_234FB3804()
{
  uint64_t v0;

  return swift_deallocObject();
}

void partial apply for closure #1 in ResolvedStyledText.TextLayoutManager.LayoutManager.layoutManager(for:original:)(int a1, Swift::Int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  closure #1 in ResolvedStyledText.TextLayoutManager.LayoutManager.layoutManager(for:original:)(a1, a2, *(double *)(v4 + 24), a3, a4, *(_QWORD *)(v4 + 16), *(void **)(v4 + 32));
}

uint64_t sub_234FB3840()
{
  return swift_deallocObject();
}

uint64_t sub_234FB3850()
{
  return swift_deallocObject();
}

void partial apply for closure #1 in ResolvedStyledText.TextLayoutManager.layout(with:in:at:)(void *a1)
{
  uint64_t v1;

  closure #1 in ResolvedStyledText.TextLayoutManager.layout(with:in:at:)(a1, *(double **)(v1 + 16));
}

uint64_t sub_234FB3868()
{
  return swift_deallocObject();
}

double _sSo7CGPointV_7SwiftUI18ResolvedStyledTextC0F13LayoutManagerC7Metrics33_B6B30FF60BE9B7CF80B161CEF951DAD7LLVtSgWOi0_(uint64_t a1)
{
  double result;

  result = 0.0;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 112) = 1;
  return result;
}

uint64_t outlined init with take of ResolvedStyledText.TextLayoutManager.Cache.Entry?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for GraphicsContext.ResolvedShading?(0, &lazy cache variable for type metadata for ResolvedStyledText.TextLayoutManager.Cache.Entry?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_234FB38F0()
{
  return swift_deallocObject();
}

BOOL partial apply for closure #1 in ResolvedStyledText.TextLayoutManager.collectTextLayout(origin:scale:)(void *a1)
{
  uint64_t v1;

  return closure #1 in ResolvedStyledText.TextLayoutManager.collectTextLayout(origin:scale:)(a1, *(_QWORD ***)(v1 + 32), *(_DWORD *)(v1 + 40), *(BOOL **)(v1 + 48), *(double *)(v1 + 16), *(double *)(v1 + 24));
}

uint64_t sub_234FB3914()
{
  return swift_deallocObject();
}

uint64_t sub_234FB3924()
{
  return swift_deallocObject();
}

BOOL partial apply for closure #1 in computeLayoutInfo #1 () in ResolvedStyledText.TextLayoutManager.metrics(scale:requestedSize:)(void *a1)
{
  uint64_t v1;

  return closure #1 in computeLayoutInfo #1 () in ResolvedStyledText.TextLayoutManager.metrics(scale:requestedSize:)(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD **)(v1 + 40), *(void ***)(v1 + 48));
}

uint64_t sub_234FB3944()
{
  return swift_deallocObject();
}

uint64_t *specialized closure #2 in ResolvedStyledText.TextLayoutManager.draw(in:with:applyingMarginOffsets:containsResolvable:context:renderer:)(uint64_t *result, uint64_t a2, _QWORD *a3, char a4, uint64_t a5)
{
  uint64_t *v6;
  void (*v7)(void **, uint64_t *);
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int v11;
  char v12;
  uint64_t v13;
  void *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  int v19;

  v6 = result;
  if (a2)
  {
    v15 = a3;
    LOBYTE(v16) = a4 & 1;
    v17 = a5;
    v7 = *(void (**)(void **, uint64_t *))(*(_QWORD *)a2 + 96);
    swift_retain();
    v7(&v15, v6);
    return (uint64_t *)swift_release();
  }
  else
  {
    v8 = a3[2];
    if (v8)
    {
      v9 = *result;
      swift_bridgeObjectRetain();
      v10 = a3 + 5;
      do
      {
        v11 = *((_DWORD *)v10 + 8);
        v12 = *((_BYTE *)v10 + 8);
        v14 = (void *)*(v10 - 1);
        v13 = *v10;
        v15 = v14;
        v16 = v13;
        LOBYTE(v17) = v12;
        v18 = *((_OWORD *)v10 + 1);
        v19 = v11;
        outlined copy of Text.Layout.Line.Line(v14, v13, v12);
        GraphicsContext.draw(_:options:)((uint64_t)&v15, 0, v9);
        outlined consume of Text.Layout.Line.Line(v14, v13, v12);
        v10 += 6;
        --v8;
      }
      while (v8);
      return (uint64_t *)swift_bridgeObjectRelease();
    }
  }
  return result;
}

uint64_t sub_234FB3A68()
{
  uint64_t v0;

  return swift_deallocObject();
}

BOOL partial apply for closure #3 in ResolvedStyledText.TextLayoutManager.draw(in:with:applyingMarginOffsets:containsResolvable:context:renderer:)(void *a1)
{
  uint64_t v1;

  return closure #3 in ResolvedStyledText.TextLayoutManager.draw(in:with:applyingMarginOffsets:containsResolvable:context:renderer:)(a1, *(_QWORD *)(v1 + 32), *(double *)(v1 + 16), *(double *)(v1 + 24));
}

uint64_t sub_234FB3A98()
{
  return swift_deallocObject();
}

uint64_t sub_234FB3AA8()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_234FB3ACC()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject();
}

uint64_t partial apply for thunk for @escaping @callee_unowned @convention(block) (@unowned RBDrawingState, @unowned Int) -> ()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return thunk for @escaping @callee_unowned @convention(block) (@unowned RBDrawingState, @unowned Int) -> ()(a1, a2, *(_QWORD *)(v2 + 16));
}

uint64_t specialized ResolvedStyledText.TextLayoutManager.init(storage:layoutProperties:layoutMargins:stylePadding:archiveOptions:isCollapsible:features:suffix:attachments:styles:transitions:scaleFactorOverride:)(void *a1, uint64_t *a2, uint64_t a3, char *a4, char a5, __int16 *a6, uint64_t a7, uint64_t *a8, double a9, double a10, double a11, double a12, uint64_t a13, uint64_t a14)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v21;
  char v22;
  char v23;
  char v24;
  __int16 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  id v30;
  id v31;
  id v32;
  id v33;
  id v34;
  id v35;
  id v36;
  id v37;
  id v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;
  int v43;
  id v44;
  void *v45;
  uint64_t v46;
  char v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v52;
  char v53;
  char v54;
  char v55;
  uint64_t v56;
  id v57;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  __int16 v65;
  void *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v70;
  _QWORD v71[7];
  __int16 v72;
  __int16 v73;
  uint64_t v74;
  char v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;

  v15 = v14;
  v21 = *a2;
  v22 = *((_BYTE *)a2 + 8);
  v23 = *a4;
  v24 = a4[1];
  v25 = *a6;
  v66 = *(void **)a7;
  v67 = *(_QWORD *)(a7 + 8);
  v26 = *(_QWORD *)(a7 + 24);
  v68 = *(_QWORD *)(a7 + 16);
  v27 = *(_QWORD *)(a7 + 32);
  v60 = *(_QWORD *)(a7 + 40);
  v28 = *(_QWORD *)(a7 + 48);
  v64 = *a8;
  *(_QWORD *)(v14 + 392) = MEMORY[0x24BEE4AF8];
  v62 = v27;
  v63 = v28;
  v65 = v25;
  v61 = v26;
  v56 = v21;
  v54 = v23;
  v55 = v22;
  v53 = v24;
  if ((v22 & 1) != 0 || v21 != 1)
  {
    if (a1)
    {
      swift_retain();
      v29 = (void *)NSAttributedString.replacingLineBreakModes(_:)(0);
    }
    else
    {
      swift_retain();
      v29 = 0;
    }
  }
  else
  {
    v29 = a1;
    v30 = a1;
    swift_retain();
  }
  v31 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BEBB4E8]), sel_init);
  objc_msgSend(v31, sel_setUsesFontLeading_, 0);
  v32 = objc_allocWithZone(MEMORY[0x24BEBB4C8]);
  v33 = v29;
  v34 = v31;
  v35 = objc_msgSend(v32, sel_init);
  if (v29)
  {
    v36 = v34;
    v37 = v33;
    v38 = v35;
    objc_msgSend(v38, sel_setAttributedString_, v37);
    objc_msgSend(v36, sel_replaceTextContentManager_, v38);

  }
  *(_QWORD *)(v15 + 400) = v35;
  *(_QWORD *)(v15 + 408) = v34;
  *(_QWORD *)(v15 + 416) = 0;
  *(_QWORD *)(v15 + 424) = 0;
  *(_BYTE *)(v15 + 432) = 0;
  *(_QWORD *)(v15 + 328) = v66;
  *(_QWORD *)(v15 + 336) = v67;
  *(_QWORD *)(v15 + 344) = v68;
  *(_QWORD *)(v15 + 352) = v61;
  *(_QWORD *)(v15 + 360) = v62;
  *(_QWORD *)(v15 + 368) = v60;
  *(_QWORD *)(v15 + 376) = v63;
  *(_QWORD *)(v15 + 384) = v64;
  outlined copy of ResolvedTextSuffix(v66, v67, v68, v61, v62, v60);
  swift_bridgeObjectRetain();
  swift_release();
  v39 = *(_OWORD *)((char *)a2 + 41);
  v79 = *(_OWORD *)((char *)a2 + 57);
  v40 = *(_OWORD *)((char *)a2 + 89);
  v80 = *(_OWORD *)((char *)a2 + 73);
  v81 = v40;
  v82 = *(_OWORD *)((char *)a2 + 105);
  v41 = *(_OWORD *)((char *)a2 + 25);
  v76 = *(_OWORD *)((char *)a2 + 9);
  v77 = v41;
  v74 = v56;
  v75 = v55;
  v78 = v39;
  LOBYTE(v73) = v54;
  HIBYTE(v73) = v53;
  v72 = v65;
  v71[0] = v66;
  v71[1] = v67;
  v71[2] = v68;
  v71[3] = v61;
  v71[4] = v62;
  v71[5] = v60;
  v71[6] = v63;
  v70 = v64;
  v57 = v33;
  outlined copy of ResolvedTextSuffix(v66, v67, v68, v61, v62, v60);
  swift_bridgeObjectRetain();
  v42 = specialized ResolvedStyledText.init(storage:layoutProperties:layoutMargins:stylePadding:archiveOptions:isCollapsible:features:suffix:attachments:styles:transitions:scaleFactorOverride:)(v29, (__int128 *)&v74, a3, &v73, a5 & 1, &v72, (uint64_t)v71, a9, a10, a11, a12, (uint64_t)&v70, a13, a14);
  swift_beginAccess();
  v43 = *(unsigned __int8 *)(v42 + 96);
  swift_retain();
  v44 = _TextContainer(v43);
  if (one-time initialization token for lineFragmentPadding != -1)
    swift_once();
  objc_msgSend(v44, sel_setLineFragmentPadding_, *(double *)&static ResolvedStyledText.TextLayoutManager.lineFragmentPadding);
  objc_msgSend(v34, sel_setTextContainer_, v44);
  if ((v65 & 0x40) != 0)
  {
    v45 = v66;
    v46 = v67;
    v47 = v68;
    v48 = v61;
    v49 = v62;
    v50 = v60;
    goto LABEL_15;
  }
  if ((v60 >> 62) <= 1)
  {
    outlined consume of ResolvedTextSuffix(v66, v67, v68, v61, v62, v60);
    v45 = 0;
    v46 = 0;
    v47 = 0;
    v48 = 0;
    v49 = 0;
    v50 = 0x8000000000000000;
LABEL_15:
    outlined consume of ResolvedTextSuffix(v45, v46, v47, v48, v49, v50);
    goto LABEL_16;
  }
  outlined consume of ResolvedTextSuffix(v66, v67, v68, v61, v62, v60);
  outlined consume of ResolvedTextSuffix(0, 0, 0, 0, 0, 0x8000000000000000);
  if ((v65 & 0x80) == 0)
  {
    v52 = *(_QWORD *)(v64 + 16);
    swift_bridgeObjectRelease();
    if (!v52)
      goto LABEL_18;
    goto LABEL_17;
  }
LABEL_16:
  swift_bridgeObjectRelease();
LABEL_17:
  _NSTextLayoutManagerRequiresCTLine(v34);
LABEL_18:
  swift_release();

  return v42;
}

uint64_t specialized ResolvedStyledText.TextLayoutManager.Cache.metrics(requestedSize:body:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, double a4@<D0>, double a5@<D1>)
{
  _QWORD *v5;
  _QWORD *v9;
  uint64_t v10;
  double *v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  BOOL v18;
  BOOL v19;
  unint64_t v21;
  unint64_t v22;
  double *v23;
  char v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD v33[8];
  char v34;
  char v35;

  v5 = (_QWORD *)result;
  v9 = *(_QWORD **)result;
  v10 = *(_QWORD *)(*(_QWORD *)result + 16);
  if (v10)
  {
    v11 = (double *)(v9 + 7);
    while (1)
    {
      v13 = *(v11 - 1);
      v12 = *v11;
      v15 = *(v11 - 3);
      v14 = *(v11 - 2);
      if (v13 >= v15)
        v16 = *(v11 - 3);
      else
        v16 = *(v11 - 1);
      if (v15 <= v13)
        v15 = *(v11 - 1);
      if (v12 >= v14)
        v17 = *(v11 - 2);
      else
        v17 = *v11;
      if (v14 <= v12)
        v14 = *v11;
      v18 = v16 > a4 || v15 < a4;
      v19 = v18 || v17 > a5;
      if (!v19 && v14 >= a5)
        break;
      v11 += 11;
      if (!--v10)
        goto LABEL_25;
    }
    v24 = *((_BYTE *)v11 + 57);
    v25 = *((_BYTE *)v11 + 56);
    v26 = *((_QWORD *)v11 + 6);
    v28 = *((_QWORD *)v11 + 4);
    v27 = *((_QWORD *)v11 + 5);
    v30 = *((_QWORD *)v11 + 2);
    v29 = *((_QWORD *)v11 + 3);
    v31 = *((_QWORD *)v11 + 1);
  }
  else
  {
LABEL_25:
    closure #1 in ResolvedStyledText.TextLayoutManager.metrics(in:layoutMargins:)(a2, (uint64_t)v33, a4, a5);
    v13 = *(double *)v33;
    v12 = *(double *)&v33[1];
    v31 = v33[2];
    v30 = v33[3];
    v29 = v33[4];
    v28 = v33[5];
    v32 = v33[6];
    v26 = v33[7];
    v25 = v34;
    v24 = v35;
    result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v9[2] + 1, 1, v9);
      v9 = (_QWORD *)result;
    }
    v22 = v9[2];
    v21 = v9[3];
    if (v22 >= v21 >> 1)
    {
      result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v21 > 1), v22 + 1, 1, v9);
      v9 = (_QWORD *)result;
    }
    v9[2] = v22 + 1;
    v23 = (double *)&v9[11 * v22];
    v23[4] = a4;
    v23[5] = a5;
    v23[6] = v13;
    v23[7] = v12;
    *((_QWORD *)v23 + 8) = v31;
    *((_QWORD *)v23 + 9) = v30;
    *((_QWORD *)v23 + 10) = v29;
    *((_QWORD *)v23 + 11) = v28;
    v27 = v32;
    *((_QWORD *)v23 + 12) = v32;
    *((_QWORD *)v23 + 13) = v26;
    *((_BYTE *)v23 + 112) = v25;
    *((_BYTE *)v23 + 113) = v24;
    *v5 = v9;
  }
  *(double *)a3 = v13;
  *(double *)(a3 + 8) = v12;
  *(_QWORD *)(a3 + 16) = v31;
  *(_QWORD *)(a3 + 24) = v30;
  *(_QWORD *)(a3 + 32) = v29;
  *(_QWORD *)(a3 + 40) = v28;
  *(_QWORD *)(a3 + 48) = v27;
  *(_QWORD *)(a3 + 56) = v26;
  *(_BYTE *)(a3 + 64) = v25;
  *(_BYTE *)(a3 + 65) = v24;
  return result;
}

uint64_t destroy for ResolvedStyledText.TextLayoutManager.Metrics()
{
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for ResolvedStyledText.TextLayoutManager.Metrics(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_WORD *)(a1 + 88) = *(_WORD *)(a2 + 88);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 90) = *(_BYTE *)(a2 + 90);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for ResolvedStyledText.TextLayoutManager.Metrics(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  v4 = *(_QWORD *)(a2 + 80);
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  *(_QWORD *)(a1 + 80) = v4;
  *(_BYTE *)(a1 + 89) = *(_BYTE *)(a2 + 89);
  *(_BYTE *)(a1 + 90) = *(_BYTE *)(a2 + 90);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  return a1;
}

uint64_t assignWithTake for ResolvedStyledText.TextLayoutManager.Metrics(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  *(_BYTE *)(a1 + 89) = *(_BYTE *)(a2 + 89);
  *(_BYTE *)(a1 + 90) = *(_BYTE *)(a2 + 90);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  return a1;
}

uint64_t getEnumTagSinglePayload for ResolvedStyledText.TextLayoutManager.Metrics(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 120))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 96);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ResolvedStyledText.TextLayoutManager.Metrics(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 120) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 120) = 0;
    if (a2)
      *(_QWORD *)(result + 96) = a2;
  }
  return result;
}

void *type metadata accessor for ResolvedStyledText.TextLayoutManager.Metrics()
{
  return &unk_25062A078;
}

__n128 __swift_memcpy82_8(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __n128 result;
  __int128 v4;
  __int128 v5;

  v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  result = *(__n128 *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 64);
  *(_WORD *)(a1 + 80) = *(_WORD *)(a2 + 80);
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  *(__n128 *)(a1 + 32) = result;
  return result;
}

uint64_t getEnumTagSinglePayload for ResolvedStyledText.TextLayoutManager.Cache.Entry(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 82))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 81);
  v4 = v3 >= 2;
  v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for ResolvedStyledText.TextLayoutManager.Cache.Entry(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_QWORD *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_WORD *)(result + 80) = 0;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 82) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 82) = 0;
    if (a2)
      *(_BYTE *)(result + 81) = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for ResolvedStyledText.TextLayoutManager.Cache.Entry()
{
  return &type metadata for ResolvedStyledText.TextLayoutManager.Cache.Entry;
}

void *type metadata accessor for ResolvedStyledText.TextLayoutManager.Metrics.Flags()
{
  return &unk_25062A050;
}

void *type metadata accessor for ResolvedStyledText.TextLayoutManager.Size()
{
  return &unk_250629F20;
}

unint64_t lazy protocol witness table accessor for type ResolvedStyledText.TextLayoutManager.Metrics.Flags and conformance ResolvedStyledText.TextLayoutManager.Metrics.Flags()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ResolvedStyledText.TextLayoutManager.Metrics.Flags and conformance ResolvedStyledText.TextLayoutManager.Metrics.Flags;
  if (!lazy protocol witness table cache variable for type ResolvedStyledText.TextLayoutManager.Metrics.Flags and conformance ResolvedStyledText.TextLayoutManager.Metrics.Flags)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ResolvedStyledText.TextLayoutManager.Metrics.Flags, &unk_25062A050);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ResolvedStyledText.TextLayoutManager.Metrics.Flags and conformance ResolvedStyledText.TextLayoutManager.Metrics.Flags);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ResolvedStyledText.TextLayoutManager.Metrics.Flags and conformance ResolvedStyledText.TextLayoutManager.Metrics.Flags;
  if (!lazy protocol witness table cache variable for type ResolvedStyledText.TextLayoutManager.Metrics.Flags and conformance ResolvedStyledText.TextLayoutManager.Metrics.Flags)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ResolvedStyledText.TextLayoutManager.Metrics.Flags, &unk_25062A050);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ResolvedStyledText.TextLayoutManager.Metrics.Flags and conformance ResolvedStyledText.TextLayoutManager.Metrics.Flags);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ResolvedStyledText.TextLayoutManager.Metrics.Flags and conformance ResolvedStyledText.TextLayoutManager.Metrics.Flags;
  if (!lazy protocol witness table cache variable for type ResolvedStyledText.TextLayoutManager.Metrics.Flags and conformance ResolvedStyledText.TextLayoutManager.Metrics.Flags)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ResolvedStyledText.TextLayoutManager.Metrics.Flags, &unk_25062A050);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ResolvedStyledText.TextLayoutManager.Metrics.Flags and conformance ResolvedStyledText.TextLayoutManager.Metrics.Flags);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ResolvedStyledText.TextLayoutManager.Metrics.Flags and conformance ResolvedStyledText.TextLayoutManager.Metrics.Flags;
  if (!lazy protocol witness table cache variable for type ResolvedStyledText.TextLayoutManager.Metrics.Flags and conformance ResolvedStyledText.TextLayoutManager.Metrics.Flags)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ResolvedStyledText.TextLayoutManager.Metrics.Flags, &unk_25062A050);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ResolvedStyledText.TextLayoutManager.Metrics.Flags and conformance ResolvedStyledText.TextLayoutManager.Metrics.Flags);
  }
  return result;
}

id ResolvedTextSuffix.accessibilityLine.getter()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 40) >> 62 == 1 && (*(_BYTE *)(v0 + 16) & 1) != 0)
    return objc_msgSend(*(id *)v0, sel_attributedString);
  else
    return 0;
}

id ResolvedTextSuffix.line.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  id result;

  v3 = *(_QWORD *)(v1 + 40);
  if (v3 < 0)
  {
    v7 = 0;
    v6 = 0;
    v5 = 0;
    v4 = 0;
    LODWORD(v3) = 0;
    v8 = 255;
  }
  else
  {
    v5 = *(_QWORD *)(v1 + 24);
    v4 = *(_QWORD *)(v1 + 32);
    v6 = *(_QWORD *)(v1 + 8);
    v7 = *(void **)v1;
    v8 = *(_QWORD *)(v1 + 16) & 1;
    result = outlined copy of Text.Layout.Line.Line(*(void **)v1, v6, *(_QWORD *)(v1 + 16) & 1);
  }
  *(_QWORD *)a1 = v7;
  *(_QWORD *)(a1 + 8) = v6;
  *(_QWORD *)(a1 + 16) = v8;
  *(_QWORD *)(a1 + 24) = v5;
  *(_QWORD *)(a1 + 32) = v4;
  *(_DWORD *)(a1 + 40) = v3;
  return result;
}

uint64_t Text.Suffix.storage.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *v1;
  v3 = v1[1];
  v4 = v1[2];
  v5 = v1[3];
  *a1 = *v1;
  a1[1] = v3;
  a1[2] = v4;
  a1[3] = v5;
  return outlined copy of Text.Suffix.Storage(v2, v3, v4);
}

__n128 Text.Suffix.storage.setter(__n128 *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  __n128 result;
  __n128 v5;

  v5 = *a1;
  v2 = a1[1].n128_i64[0];
  v3 = a1[1].n128_i64[1];
  outlined consume of Text.Suffix.Storage(*v1, v1[1], v1[2]);
  result = v5;
  *(__n128 *)v1 = v5;
  v1[2] = v2;
  v1[3] = v3;
  return result;
}

uint64_t (*Text.Suffix.storage.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

double static Text.Suffix.automatic.getter@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  result = -0.0;
  *(_OWORD *)(a1 + 16) = xmmword_235260F00;
  return result;
}

double static Text.Suffix.none.getter@<D0>(_OWORD *a1@<X8>)
{
  double result;

  *(_QWORD *)&result = 1;
  *a1 = xmmword_235260EF0;
  a1[1] = xmmword_235260F00;
  return result;
}

uint64_t static Text.Suffix.truncated(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  *a5 = a1;
  a5[1] = a2;
  a5[2] = a3 & 1;
  a5[3] = a4;
  outlined copy of Text.Storage(a1, a2, a3 & 1);
  return swift_bridgeObjectRetain();
}

uint64_t static Text.Suffix.alwaysVisible(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  *a5 = a1;
  a5[1] = a2;
  a5[2] = a3 & 1 | 0x4000000000000000;
  a5[3] = a4;
  outlined copy of Text.Storage(a1, a2, a3 & 1);
  return swift_bridgeObjectRetain();
}

uint64_t Text.Suffix.text.getter()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0[2];
  if (v1 < 0)
    return 0;
  v2 = *v0;
  outlined copy of Text.Suffix.Storage(*v0, v0[1], v1);
  return v2;
}

BOOL static Text.Suffix.== infix(_:_:)(_OWORD *a1, _OWORD *a2)
{
  __int128 v2;
  __int128 v3;
  _OWORD v5[2];
  _OWORD v6[2];

  v2 = a1[1];
  v6[0] = *a1;
  v6[1] = v2;
  v3 = a2[1];
  v5[0] = *a2;
  v5[1] = v3;
  return specialized static Text.Suffix.Storage.== infix(_:_:)((uint64_t *)v6, (uint64_t *)v5);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance Text.Suffix(_OWORD *a1, _OWORD *a2)
{
  __int128 v2;
  __int128 v3;
  _OWORD v5[2];
  _OWORD v6[2];

  v2 = a1[1];
  v6[0] = *a1;
  v6[1] = v2;
  v3 = a2[1];
  v5[0] = *a2;
  v5[1] = v3;
  return static Text.Suffix.Storage.== infix(_:_:)(v6, v5) & 1;
}

uint64_t View.textSuffix(_:)(_OWORD *a1, uint64_t a2, uint64_t a3)
{
  __int128 v3;
  _OWORD v5[2];

  v3 = a1[1];
  v5[0] = *a1;
  v5[1] = v3;
  return View.modifier<A>(_:)(v5, a2, &type metadata for TextSuffixModifier, a3);
}

uint64_t ResolvedTextSuffix.styles.getter()
{
  uint64_t v0;

  if ((*(_QWORD *)(v0 + 40) & 0x8000000000000000) != 0)
    return MEMORY[0x24BEE4AF8];
  else
    return swift_bridgeObjectRetain();
}

double protocol witness for static EnvironmentKey.defaultValue.getter in conformance TextSuffixKey@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  result = -0.0;
  *(_OWORD *)(a1 + 40) = xmmword_235260F00;
  return result;
}

void protocol witness for static Rule.initialValue.getter in conformance TextSuffixModifier.OptionalText(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  a1[3] = 1;
}

uint64_t *protocol witness for Rule.value.getter in conformance TextSuffixModifier.OptionalText@<X0>(uint64_t *a1@<X8>)
{
  uint64_t *result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  result = (uint64_t *)AGGraphGetValue();
  v3 = result[2];
  if (v3 < 0)
  {
    v4 = 0;
    v5 = 0;
    v6 = 0;
    v7 = 0;
  }
  else
  {
    v4 = *result;
    v5 = result[1];
    v6 = result[2] & 1;
    v7 = result[3];
    result = (uint64_t *)outlined copy of Text.Suffix.Storage(*result, v5, v3);
  }
  *a1 = v4;
  a1[1] = v5;
  a1[2] = v6;
  a1[3] = v7;
  return result;
}

uint64_t TextSuffixModifier.ResolvedTextSuffixFilter.value.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t *Value;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  unsigned __int8 v19;
  __int128 v20;
  unsigned int v21;

  Value = (uint64_t *)AGGraphGetValue();
  v3 = *Value;
  v4 = Value[1];
  v5 = (unint64_t)Value[2] >> 62;
  if ((_DWORD)v5)
  {
    if ((_DWORD)v5 == 1)
    {
      v6 = Value[2] & 1;
      swift_bridgeObjectRetain();
      outlined copy of Text.Storage(v3, v4, v6);
      outlined consume of Text.Storage(v3, v4, v6);
      swift_bridgeObjectRelease();
      TextSuffixModifier.ResolvedTextSuffixFilter.line.getter((uint64_t)&v18);
      if (v19 != 255)
      {
        v14 = v18;
        v16 = v20;
        v7 = v19 & 1;
        v8 = v21;
        type metadata accessor for ResolvedStyledText?();
        if (*(_QWORD *)AGGraphGetValue())
          result = swift_bridgeObjectRetain();
        else
          result = MEMORY[0x24BEE4AF8];
        v11 = v8 | 0x4000000000000000;
        *(_OWORD *)a1 = v14;
        *(_QWORD *)(a1 + 16) = v7;
        *(_OWORD *)(a1 + 24) = v16;
        goto LABEL_8;
      }
    }
LABEL_7:
    result = 0;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    v11 = 0x8000000000000000;
    *(_QWORD *)(a1 + 32) = 0;
LABEL_8:
    *(_QWORD *)(a1 + 40) = v11;
    goto LABEL_9;
  }
  v10 = Value[2] & 1;
  swift_bridgeObjectRetain();
  outlined copy of Text.Storage(v3, v4, v10);
  outlined consume of Text.Storage(v3, v4, v10);
  swift_bridgeObjectRelease();
  TextSuffixModifier.ResolvedTextSuffixFilter.line.getter((uint64_t)&v18);
  if (v19 == 255)
    goto LABEL_7;
  v15 = v18;
  v17 = v20;
  v12 = v19 & 1;
  v13 = v21;
  type metadata accessor for ResolvedStyledText?();
  if (*(_QWORD *)AGGraphGetValue())
    result = swift_bridgeObjectRetain();
  else
    result = MEMORY[0x24BEE4AF8];
  *(_OWORD *)a1 = v15;
  *(_QWORD *)(a1 + 16) = v12;
  *(_OWORD *)(a1 + 24) = v17;
  *(_QWORD *)(a1 + 40) = v13;
LABEL_9:
  *(_QWORD *)(a1 + 48) = result;
  return result;
}

uint64_t *TextSuffixModifier.ResolvedTextSuffixFilter.line.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t *result;
  uint64_t v3;
  double (*v4)(uint64_t *);
  double v5;
  double v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  char v16;

  type metadata accessor for ResolvedStyledText?();
  result = (uint64_t *)AGGraphGetValue();
  v3 = *result;
  if (*result)
  {
    v13 = 0;
    v14 = 1;
    v15 = 0;
    v16 = 1;
    v4 = *(double (**)(uint64_t *))(*(_QWORD *)v3 + 224);
    swift_retain();
    v5 = v4(&v13);
    (*(void (**)(uint64_t *__return_ptr, uint64_t, double, double, double, double, double, double))(*(_QWORD *)v3 + 296))(&v13, 1, 0.0, 0.0, v5, v6, v5, v6);
    if (v13)
    {
      if (*(_QWORD *)(v13 + 16) == 1)
      {
        v7 = *(void **)(v13 + 32);
        v8 = *(_QWORD *)(v13 + 40);
        v9 = *(unsigned __int8 *)(v13 + 48);
        v10 = *(_QWORD *)(v13 + 56);
        v11 = *(_QWORD *)(v13 + 64);
        v12 = *(_DWORD *)(v13 + 72);
        outlined copy of Text.Layout.Line.Line(v7, v8, *(_BYTE *)(v13 + 48));
        swift_bridgeObjectRelease();
        result = (uint64_t *)swift_release();
        *(_QWORD *)a1 = v7;
        *(_QWORD *)(a1 + 8) = v8;
        *(_QWORD *)(a1 + 16) = v9;
        *(_QWORD *)(a1 + 24) = v10;
        *(_QWORD *)(a1 + 32) = v11;
        *(_DWORD *)(a1 + 40) = v12;
        return result;
      }
      swift_bridgeObjectRelease();
    }
    result = (uint64_t *)swift_release();
  }
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 16) = 255;
  *(_DWORD *)(a1 + 40) = 0;
  return result;
}

double protocol witness for static Rule.initialValue.getter in conformance TextSuffixModifier.ResolvedTextSuffixFilter@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0x1FFFFFFFELL;
  result = 0.0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  return result;
}

uint64_t protocol witness for Rule.value.getter in conformance TextSuffixModifier.ResolvedTextSuffixFilter@<X0>(uint64_t a1@<X8>)
{
  return TextSuffixModifier.ResolvedTextSuffixFilter.value.getter(a1);
}

_QWORD *protocol witness for Rule.value.getter in conformance TextSuffixModifier.ChildEnvironment@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *Value;
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[7];

  Value = (_QWORD *)AGGraphGetValue();
  v3 = Value[1];
  *a1 = *Value;
  a1[1] = v3;
  v4 = AGGraphGetValue();
  outlined init with take of ResolvedTextSuffix(v4, (uint64_t)v6);
  swift_retain();
  swift_retain();
  outlined retain of ResolvedTextSuffix(v6, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of ResolvedTextSuffix);
  specialized EnvironmentValues.subscript.setter(v6);
  return outlined retain of ResolvedTextSuffix(v6, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of ResolvedTextSuffix);
}

uint64_t specialized static TextSuffixModifier._makeInputs(modifier:inputs:)(int *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _DWORD *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  _UNKNOWN **v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  int v30;
  uint64_t v31;
  int v32;
  int v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t result;
  int v37;
  uint64_t v38;
  int v39;
  __int128 v40;
  int v41;
  int v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  uint64_t v49;

  v49 = *MEMORY[0x24BDAC8D0];
  v4 = type metadata accessor for ResolvedOptionalTextFilter(0);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (_DWORD *)((char *)&v38 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v43 = *a1;
  v48 = v43;
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for Text?, (uint64_t)&type metadata for Text, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1C68]);
  lazy protocol witness table accessor for type TextSuffixModifier.OptionalText and conformance TextSuffixModifier.OptionalText();
  v41 = Attribute.init<A>(body:value:flags:update:)();
  v7 = *(_QWORD *)(a2 + 16);
  swift_beginAccess();
  v8 = *(_DWORD *)(v7 + 16);
  v42 = *(_DWORD *)(a2 + 8);
  v9 = *(_QWORD *)a2;
  v10 = swift_retain();
  v11 = specialized find<A>(_:key:)(v10);
  if (v11)
    *(_QWORD *)&v12 = *(_QWORD *)(v11 + 72);
  else
    v12 = 0uLL;
  v40 = v12;
  swift_release();
  v13 = swift_retain();
  v14 = specialized find<A>(_:key:)(v13);
  if (v14)
  {
    v39 = *(unsigned __int8 *)(v14 + 72);
    v15 = *(_BYTE *)(v14 + 73);
  }
  else
  {
    v39 = 0;
    v15 = 2;
  }
  swift_release();
  swift_retain_n();
  swift_retain();
  swift_bridgeObjectRetain();
  v16 = specialized find<A>(_:key:)(v9);
  if (v16)
  {
    v18 = *(_QWORD *)(v16 + 72);
    v17 = *(_UNKNOWN ***)(v16 + 80);
    swift_release();
    if (v18)
    {
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
      goto LABEL_12;
    }
  }
  else
  {
    swift_release();
  }
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  type metadata accessor for InterfaceIdiomBox<PhoneInterfaceIdiom>(0, v19, v20, v21);
  v18 = v22;
  v17 = &protocol witness table for InterfaceIdiomBox<A>;
LABEL_12:
  *v6 = v41;
  v6[1] = v8;
  v23 = (char *)v6 + *(int *)(v4 + 24);
  v24 = type metadata accessor for ResolvedTextHelper(0);
  *(_QWORD *)&v23[*(int *)(v24 + 56)] = 0;
  type metadata accessor for ResolvedTextHelper.NextUpdate(0);
  swift_storeEnumTagMultiPayload();
  *(_DWORD *)v23 = v42;
  *(_QWORD *)(v23 + 4) = v40;
  *((_WORD *)v23 + 6) = 257;
  v23[14] = v39;
  v23[15] = v15;
  *((_WORD *)v23 + 8) = 64;
  v23[18] = 0;
  *((_QWORD *)v23 + 3) = v18;
  *((_QWORD *)v23 + 4) = v17;
  type metadata accessor for PropertyList.Tracker();
  v25 = swift_allocObject();
  type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for AtomicBuffer<TrackerData>, (uint64_t)&type metadata for TrackerData, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for AtomicBuffer);
  v26 = swift_allocObject();
  *(_DWORD *)(v26 + 16) = 0;
  v27 = MEMORY[0x24BEE4B00];
  v28 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v26 + 24) = 0;
  *(_QWORD *)(v26 + 32) = v27;
  *(_QWORD *)(v26 + 40) = v27;
  *(_QWORD *)(v26 + 48) = v28;
  *(_BYTE *)(v26 + 56) = 0;
  *(_QWORD *)(v25 + 16) = v26;
  *((_QWORD *)v23 + 5) = v25;
  *((_OWORD *)v23 + 3) = 0u;
  *((_OWORD *)v23 + 4) = 0u;
  *(_QWORD *)&v23[*(int *)(v24 + 60)] = 0;
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  type metadata accessor for ResolvedStyledText?();
  lazy protocol witness table accessor for type ResolvedOptionalTextFilter and conformance ResolvedOptionalTextFilter();
  v29 = Attribute.init<A>(body:value:flags:update:)();
  outlined destroy of ResolvedOptionalTextFilter((uint64_t)v6);
  v46 = v43;
  v47 = v29;
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  lazy protocol witness table accessor for type TextSuffixModifier.ResolvedTextSuffixFilter and conformance TextSuffixModifier.ResolvedTextSuffixFilter();
  v30 = Attribute.init<A>(body:value:flags:update:)();
  v31 = *(_QWORD *)(a2 + 16);
  swift_beginAccess();
  v32 = *(_DWORD *)(v31 + 16);
  v44 = v30;
  v45 = v32;
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  lazy protocol witness table accessor for type TextSuffixModifier.ChildEnvironment and conformance TextSuffixModifier.ChildEnvironment();
  v33 = Attribute.init<A>(body:value:flags:update:)();
  v34 = specialized Dictionary.init(dictionaryLiteral:)(v28);
  type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for MutableBox<CachedEnvironment>, (uint64_t)&type metadata for CachedEnvironment, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for MutableBox);
  v35 = swift_allocObject();
  *(_DWORD *)(v35 + 16) = v33;
  *(_QWORD *)(v35 + 24) = v28;
  *(_OWORD *)(v35 + 32) = 0u;
  *(_OWORD *)(v35 + 48) = 0u;
  *(_OWORD *)(v35 + 64) = 0u;
  *(_WORD *)(v35 + 80) = 256;
  *(_QWORD *)(v35 + 88) = v34;
  result = swift_release();
  *(_QWORD *)(a2 + 16) = v35;
  v37 = *(_DWORD *)(a2 + 32);
  if ((v37 & 0x20) == 0)
    *(_DWORD *)(a2 + 32) = v37 | 0x20;
  return result;
}

BOOL specialized static Text.Suffix.Storage.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t (*v10)(uint64_t);
  uint64_t v16;
  char v20;
  char v21;

  v2 = *a1;
  v3 = a1[1];
  v5 = a1[2];
  v4 = a1[3];
  v7 = *a2;
  v6 = a2[1];
  v9 = a2[2];
  v8 = a2[3];
  if (!(v5 >> 62))
  {
    if (v9 >> 62)
      goto LABEL_43;
    if ((v5 & 1) == 0)
    {
      if ((v9 & 1) == 0)
      {
        if (v2 != v7 || v3 != v6)
        {
LABEL_50:
          v20 = _stringCompareWithSmolCheck(_:_:expecting:)();
          outlined copy of Text.Suffix.Storage(v7, v6, v9);
          outlined copy of Text.Suffix.Storage(v2, v3, v5);
          swift_bridgeObjectRetain();
          outlined copy of Text.Storage(v7, v6, 0);
          swift_bridgeObjectRetain();
          outlined copy of Text.Storage(v2, v3, 0);
          if ((v20 & 1) != 0)
          {
LABEL_51:
            v21 = specialized static Array<A>.== infix(_:_:)(v4, v8);
            outlined consume of Text.Storage(v7, v6, v9 & 1);
            swift_bridgeObjectRelease();
            outlined consume of Text.Storage(v2, v3, v5 & 1);
            swift_bridgeObjectRelease();
            outlined consume of Text.Suffix.Storage(v2, v3, v5);
            outlined consume of Text.Suffix.Storage(v7, v6, v9);
            return (v21 & 1) != 0;
          }
          goto LABEL_53;
        }
LABEL_49:
        outlined copy of Text.Suffix.Storage(*a1, v3, v9);
        outlined copy of Text.Suffix.Storage(v2, v3, v5);
        swift_bridgeObjectRetain();
        outlined copy of Text.Storage(v2, v3, 0);
        swift_bridgeObjectRetain();
        outlined copy of Text.Storage(v2, v3, 0);
        goto LABEL_51;
      }
LABEL_43:
      outlined copy of Text.Suffix.Storage(*a2, a2[1], v9);
      outlined copy of Text.Suffix.Storage(v2, v3, v5);
LABEL_44:
      outlined consume of Text.Suffix.Storage(v2, v3, v5);
      outlined consume of Text.Suffix.Storage(v7, v6, v9);
      return 0;
    }
LABEL_11:
    if ((v9 & 1) != 0)
    {
      v10 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 96);
      outlined copy of Text.Suffix.Storage(*a2, a2[1], v9);
      outlined copy of Text.Suffix.Storage(v2, v3, v5);
      swift_bridgeObjectRetain();
      outlined copy of Text.Storage(v7, v6, 1);
      swift_bridgeObjectRetain();
      outlined copy of Text.Storage(v2, v3, 1);
      if ((v10(v7) & 1) != 0)
        goto LABEL_51;
LABEL_53:
      outlined consume of Text.Storage(v7, v6, v9 & 1);
      swift_bridgeObjectRelease();
      outlined consume of Text.Storage(v2, v3, v5 & 1);
      swift_bridgeObjectRelease();
      goto LABEL_44;
    }
    goto LABEL_43;
  }
  if (v5 >> 62 == 1)
  {
    if (v9 >> 62 != 1)
      goto LABEL_43;
    if ((v5 & 1) == 0)
    {
      if ((v9 & 1) == 0)
      {
        if (v2 != v7 || v3 != v6)
          goto LABEL_50;
        goto LABEL_49;
      }
      goto LABEL_43;
    }
    goto LABEL_11;
  }
  if (v5 == 0x8000000000000000 && (v4 | v3 | v2) == 0)
  {
    if (v9 >> 62 != 2 || v9 != 0x8000000000000000 || (v6 | v7 | v8) != 0)
      goto LABEL_43;
    outlined consume of Text.Suffix.Storage(0, 0, 0x8000000000000000);
    outlined consume of Text.Suffix.Storage(0, 0, 0x8000000000000000);
    return 1;
  }
  else
  {
    if (v9 >> 62 != 2 || v7 != 1 || v6 != 0 || v9 != 0x8000000000000000 || v8 != 0)
      goto LABEL_43;
    v16 = 1;
    outlined consume of Text.Suffix.Storage(1, 0, 0x8000000000000000);
    outlined consume of Text.Suffix.Storage(1, 0, 0x8000000000000000);
  }
  return v16;
}

uint64_t specialized static ResolvedTextSuffix.== infix(_:_:)(uint64_t a1, unint64_t *a2)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  BOOL v16;
  char v17;
  char v18;
  char v20;
  char v21;
  void *v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  uint64_t v44;

  v3 = *(void **)a1;
  v2 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  v5 = *(uint64_t *)(a1 + 24);
  v6 = *(uint64_t *)(a1 + 32);
  v7 = *(_QWORD *)(a1 + 40);
  v9 = *a2;
  v8 = a2[1];
  v10 = a2[2];
  v11 = *((uint64_t *)a2 + 3);
  v13 = *((uint64_t *)a2 + 4);
  v12 = a2[5];
  v14 = a2[6];
  v43 = v10;
  v44 = *(_QWORD *)(a1 + 48);
  if (v7 >> 62)
  {
    if (v7 >> 62 == 1)
    {
      if (v12 >> 62 == 1)
      {
        v15 = *(double *)&v5 == *(double *)&v11 && *(double *)&v6 == *(double *)&v13;
        v35 = a2[3];
        v36 = a2[4];
        if (!v15)
          goto LABEL_27;
        if ((v4 & 1) != 0)
        {
LABEL_10:
          if ((v10 & 1) == 0)
            goto LABEL_27;
          goto LABEL_20;
        }
LABEL_19:
        if ((v10 & 1) != 0)
        {
LABEL_27:
          v28 = v10;
          v29 = *(_QWORD *)(a1 + 16);
          v30 = a2[5];
          v31 = a2[1];
          outlined copy of ResolvedTextSuffix((void *)v9, v8, v28, v11, a2[4], v12);
          outlined copy of ResolvedTextSuffix(v3, v2, v29, v5, v6, v7);
          outlined consume of ResolvedTextSuffix(v3, v2, v29, v5, v6, v7);
          v22 = (void *)v9;
          v23 = v31;
          v24 = v43;
          v26 = v35;
          v27 = v36;
          v25 = v30;
          goto LABEL_28;
        }
LABEL_20:
        if (v3 == (void *)v9)
        {
          v32 = v4 & 1;
          v33 = v10 & 1;
          v17 = v10;
          v18 = *(_QWORD *)(a1 + 16);
          v34 = *(_QWORD *)(a1 + 16);
          v39 = a2[1];
          v41 = a2[5];
          outlined copy of ResolvedTextSuffix((void *)v9, v8, v17, v11, v13, v12);
          outlined copy of ResolvedTextSuffix(v3, v2, v18, v5, v6, v7);
          outlined copy of Text.Layout.Line.Line(v3, v2, v32);
          outlined copy of Text.Layout.Line.Line((void *)v9, v39, v33);
          v37 = specialized static Array<A>.== infix(_:_:)(v44, v14);
          outlined consume of Text.Layout.Line.Line((void *)v9, v39, v33);
          outlined consume of Text.Layout.Line.Line(v3, v2, v32);
          outlined consume of ResolvedTextSuffix(v3, v2, v34, v5, v6, v7);
          outlined consume of ResolvedTextSuffix((void *)v9, v39, v43, v35, v36, v41);
          return v37 & 1;
        }
        goto LABEL_27;
      }
    }
    else if (v12 >> 62 == 2 && v12 == 0x8000000000000000 && !(v8 | v9 | v10 | v11 | v13 | v14))
    {
      outlined consume of ResolvedTextSuffix(v3, v2, v4, v5, v6, v7);
      outlined consume of ResolvedTextSuffix(0, 0, v10, v11, v13, 0x8000000000000000);
      return 1;
    }
  }
  else if (!(v12 >> 62))
  {
    v16 = *(double *)&v5 == *(double *)&v11 && *(double *)&v6 == *(double *)&v13;
    v35 = a2[3];
    v36 = a2[4];
    if (!v16)
      goto LABEL_27;
    if ((v4 & 1) != 0)
      goto LABEL_10;
    goto LABEL_19;
  }
  v20 = v10;
  v21 = *(_QWORD *)(a1 + 16);
  v40 = a2[1];
  v42 = a2[5];
  v38 = (void *)*a2;
  outlined copy of ResolvedTextSuffix((void *)*a2, v8, v20, v11, v13, v12);
  outlined copy of ResolvedTextSuffix(v3, v2, v21, v5, v6, v7);
  outlined consume of ResolvedTextSuffix(v3, v2, v21, v5, v6, v7);
  v22 = v38;
  v23 = v40;
  v25 = v42;
  v24 = v43;
  v26 = v11;
  v27 = v13;
LABEL_28:
  outlined consume of ResolvedTextSuffix(v22, v23, v24, v26, v27, v25);
  return 0;
}

uint64_t outlined consume of Text.Suffix.Storage(uint64_t result, uint64_t a2, uint64_t a3)
{
  if ((a3 & 0x8000000000000000) == 0)
  {
    outlined consume of Text.Storage(result, a2, a3 & 1);
    return swift_bridgeObjectRelease();
  }
  return result;
}

ValueMetadata *type metadata accessor for Text.Suffix()
{
  return &type metadata for Text.Suffix;
}

uint64_t getEnumTag for Text.Suffix.Storage(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 16) >> 62;
  if (v1 <= 1)
    return v1;
  else
    return (*(_DWORD *)a1 + 2);
}

uint64_t destructiveProjectEnumData for Text.Suffix.Storage(uint64_t result)
{
  *(_QWORD *)(result + 16) &= 0x3FFFFFFFFFFFFFFFuLL;
  return result;
}

uint64_t destructiveInjectEnumTag for Text.Suffix.Storage(uint64_t result, uint64_t a2)
{
  if (a2 < 2)
  {
    *(_QWORD *)(result + 16) = *(_QWORD *)(result + 16) & 1 | (a2 << 62);
  }
  else
  {
    *(_QWORD *)result = (a2 - 2);
    *(_OWORD *)(result + 8) = xmmword_2352BAAB0;
    *(_QWORD *)(result + 24) = 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for Text.Suffix.Storage()
{
  return &type metadata for Text.Suffix.Storage;
}

void *destroy for ResolvedTextSuffix(uint64_t a1)
{
  return outlined consume of ResolvedTextSuffix(*(void **)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));
}

_QWORD *initializeWithCopy for ResolvedTextSuffix(_QWORD *a1, uint64_t a2)
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = *(void **)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v9 = *(_QWORD *)(a2 + 48);
  outlined copy of ResolvedTextSuffix(*(void **)a2, v4, v5, v6, v7, v8);
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v5;
  a1[3] = v6;
  a1[4] = v7;
  a1[5] = v8;
  a1[6] = v9;
  return a1;
}

uint64_t assignWithCopy for ResolvedTextSuffix(uint64_t a1, uint64_t a2)
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v3 = *(void **)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v9 = *(_QWORD *)(a2 + 48);
  outlined copy of ResolvedTextSuffix(*(void **)a2, v4, v5, v6, v7, v8);
  v10 = *(void **)a1;
  v11 = *(_QWORD *)(a1 + 8);
  v12 = *(_QWORD *)(a1 + 16);
  v13 = *(_QWORD *)(a1 + 24);
  v14 = *(_QWORD *)(a1 + 32);
  v15 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_QWORD *)(a1 + 32) = v7;
  *(_QWORD *)(a1 + 40) = v8;
  *(_QWORD *)(a1 + 48) = v9;
  outlined consume of ResolvedTextSuffix(v10, v11, v12, v13, v14, v15);
  return a1;
}

uint64_t assignWithTake for ResolvedTextSuffix(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;

  v3 = *(_QWORD *)(a2 + 48);
  v4 = *(void **)a1;
  v6 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  v7 = *(_QWORD *)(a1 + 24);
  v8 = *(_QWORD *)(a1 + 32);
  v9 = *(_QWORD *)(a1 + 40);
  v10 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v10;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 48) = v3;
  outlined consume of ResolvedTextSuffix(v4, v6, v5, v7, v8, v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for ResolvedTextSuffix(uint64_t a1, int a2)
{
  uint64_t v2;
  int v3;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 56))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 16) >> 1;
  if (v2 > 0x80000000)
    v3 = ~(_DWORD)v2;
  else
    v3 = -1;
  return (v3 + 1);
}

double storeEnumTagSinglePayload for ResolvedTextSuffix(uint64_t a1, int a2, int a3)
{
  double result;

  if (a2 < 0)
  {
    result = 0.0;
    *(_OWORD *)(a1 + 40) = 0u;
    *(_OWORD *)(a1 + 24) = 0u;
    *(_OWORD *)(a1 + 8) = 0u;
    *(_QWORD *)a1 = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(a1 + 56) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)a1 = 0;
      *(_QWORD *)(a1 + 8) = 0;
      *(_QWORD *)(a1 + 16) = 2 * -a2;
      result = 0.0;
      *(_OWORD *)(a1 + 24) = 0u;
      *(_OWORD *)(a1 + 40) = 0u;
      return result;
    }
    *(_BYTE *)(a1 + 56) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t getEnumTag for ResolvedTextSuffix(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 40) >> 62;
  if (v1 <= 1)
    return v1;
  else
    return (*(_DWORD *)a1 + 2);
}

uint64_t destructiveProjectEnumData for ResolvedTextSuffix(uint64_t result)
{
  *(_QWORD *)(result + 40) &= 0x3FFFFFFFFFFFFFFFuLL;
  return result;
}

uint64_t destructiveInjectEnumTag for ResolvedTextSuffix(uint64_t result, unsigned int a2)
{
  if (a2 < 2)
  {
    *(_QWORD *)(result + 16) &= 1uLL;
    *(_DWORD *)(result + 44) = a2 << 30;
  }
  else
  {
    *(_QWORD *)result = a2 - 2;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 40) = xmmword_235260F00;
  }
  return result;
}

ValueMetadata *type metadata accessor for ResolvedTextSuffix()
{
  return &type metadata for ResolvedTextSuffix;
}

uint64_t sub_234FB5D5C(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[2];

  v4 = a1[1];
  v5 = type metadata accessor for ModifiedContent(255, *a1, (uint64_t)&type metadata for TextSuffixModifier, a4);
  v7[0] = v4;
  v7[1] = &protocol witness table for TextSuffixModifier;
  return MEMORY[0x23B7C9C04]("I{:\x1B̧\t", v5, v7);
}

uint64_t destroy for TextSuffixModifier(uint64_t *a1)
{
  return outlined consume of Text.Suffix.Storage(*a1, a1[1], a1[2]);
}

uint64_t *initializeWithCopy for Text.Suffix(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *a2;
  v4 = a2[1];
  v5 = a2[2];
  v6 = a2[3];
  outlined copy of Text.Suffix.Storage(*a2, v4, v5);
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v5;
  a1[3] = v6;
  return a1;
}

uint64_t *assignWithCopy for Text.Suffix(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = *a2;
  v4 = a2[1];
  v5 = a2[2];
  v6 = a2[3];
  outlined copy of Text.Suffix.Storage(*a2, v4, v5);
  v7 = *a1;
  v8 = a1[1];
  v9 = a1[2];
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v5;
  a1[3] = v6;
  outlined consume of Text.Suffix.Storage(v7, v8, v9);
  return a1;
}

uint64_t *assignWithTake for Text.Suffix(uint64_t *a1, _OWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;

  v3 = *a1;
  v5 = a1[1];
  v4 = a1[2];
  v6 = a2[1];
  *(_OWORD *)a1 = *a2;
  *((_OWORD *)a1 + 1) = v6;
  outlined consume of Text.Suffix.Storage(v3, v5, v4);
  return a1;
}

ValueMetadata *type metadata accessor for TextSuffixModifier()
{
  return &type metadata for TextSuffixModifier;
}

unint64_t lazy protocol witness table accessor for type TextSuffixModifier.OptionalText and conformance TextSuffixModifier.OptionalText()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TextSuffixModifier.OptionalText and conformance TextSuffixModifier.OptionalText;
  if (!lazy protocol witness table cache variable for type TextSuffixModifier.OptionalText and conformance TextSuffixModifier.OptionalText)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for TextSuffixModifier.OptionalText, &unk_25062A928);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TextSuffixModifier.OptionalText and conformance TextSuffixModifier.OptionalText);
  }
  return result;
}

void type metadata accessor for InterfaceIdiomBox<PhoneInterfaceIdiom>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  uint64_t v5;

  if (!lazy cache variable for type metadata for InterfaceIdiomBox<PhoneInterfaceIdiom>)
  {
    v4 = type metadata accessor for InterfaceIdiomBox(0, (uint64_t)&type metadata for PhoneInterfaceIdiom, (uint64_t)&protocol witness table for PhoneInterfaceIdiom, a4);
    if (!v5)
      atomic_store(v4, (unint64_t *)&lazy cache variable for type metadata for InterfaceIdiomBox<PhoneInterfaceIdiom>);
  }
}

void type metadata accessor for ResolvedStyledText?()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ResolvedStyledText?)
  {
    type metadata accessor for ResolvedStyledText();
    v0 = type metadata accessor for Optional();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ResolvedStyledText?);
  }
}

unint64_t lazy protocol witness table accessor for type ResolvedOptionalTextFilter and conformance ResolvedOptionalTextFilter()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type ResolvedOptionalTextFilter and conformance ResolvedOptionalTextFilter;
  if (!lazy protocol witness table cache variable for type ResolvedOptionalTextFilter and conformance ResolvedOptionalTextFilter)
  {
    v1 = type metadata accessor for ResolvedOptionalTextFilter(255);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ResolvedOptionalTextFilter, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ResolvedOptionalTextFilter and conformance ResolvedOptionalTextFilter);
  }
  return result;
}

uint64_t outlined destroy of ResolvedOptionalTextFilter(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for ResolvedOptionalTextFilter(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t lazy protocol witness table accessor for type TextSuffixModifier.ResolvedTextSuffixFilter and conformance TextSuffixModifier.ResolvedTextSuffixFilter()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TextSuffixModifier.ResolvedTextSuffixFilter and conformance TextSuffixModifier.ResolvedTextSuffixFilter;
  if (!lazy protocol witness table cache variable for type TextSuffixModifier.ResolvedTextSuffixFilter and conformance TextSuffixModifier.ResolvedTextSuffixFilter)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for TextSuffixModifier.ResolvedTextSuffixFilter, &unk_25062A960);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TextSuffixModifier.ResolvedTextSuffixFilter and conformance TextSuffixModifier.ResolvedTextSuffixFilter);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type TextSuffixModifier.ChildEnvironment and conformance TextSuffixModifier.ChildEnvironment()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TextSuffixModifier.ChildEnvironment and conformance TextSuffixModifier.ChildEnvironment;
  if (!lazy protocol witness table cache variable for type TextSuffixModifier.ChildEnvironment and conformance TextSuffixModifier.ChildEnvironment)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for TextSuffixModifier.ChildEnvironment, &unk_25062A9F0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TextSuffixModifier.ChildEnvironment and conformance TextSuffixModifier.ChildEnvironment);
  }
  return result;
}

ValueMetadata *type metadata accessor for TextSuffixKey()
{
  return &type metadata for TextSuffixKey;
}

void *type metadata accessor for TextSuffixModifier.ChildEnvironment()
{
  return &unk_25062A9F0;
}

void *type metadata accessor for TextSuffixModifier.ResolvedTextSuffixFilter()
{
  return &unk_25062A960;
}

void *type metadata accessor for TextSuffixModifier.OptionalText()
{
  return &unk_25062A928;
}

unint64_t instantiation function for generic protocol witness table for TextSuffixModifier.OptionalText(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type TextSuffixModifier.OptionalText and conformance TextSuffixModifier.OptionalText();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t instantiation function for generic protocol witness table for TextSuffixModifier.ResolvedTextSuffixFilter(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type TextSuffixModifier.ResolvedTextSuffixFilter and conformance TextSuffixModifier.ResolvedTextSuffixFilter();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t instantiation function for generic protocol witness table for TextSuffixModifier.ChildEnvironment(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type TextSuffixModifier.ChildEnvironment and conformance TextSuffixModifier.ChildEnvironment();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t specialized ContiguousArray.reserveCapacity(_:)(int64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t result;
  int64_t v5;

  v3 = *v1;
  result = swift_isUniquelyReferenced_nonNull_native();
  *v1 = v3;
  if (!(_DWORD)result || a1 > *(_QWORD *)(v3 + 24) >> 1)
  {
    if (*(_QWORD *)(v3 + 16) <= a1)
      v5 = a1;
    else
      v5 = *(_QWORD *)(v3 + 16);
    return specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(result, v5, 0);
  }
  return result;
}

uint64_t specialized RandomAccessCollection.index(_:offsetBy:limitedBy:)(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;

  v4 = *(_QWORD *)(v3 + 24);
  if (v4 < a3 || (a3 | result) < 0 || v4 < result)
  {
    __break(1u);
    goto LABEL_16;
  }
  v5 = a3 - result;
  if (a2 >= 1)
  {
    if (v5 < 0 || v5 >= a2)
      goto LABEL_11;
    return 0;
  }
  if (v5 <= 0 && v5 > a2)
    return 0;
LABEL_11:
  v6 = __OFADD__(result, a2);
  result += a2;
  if (v6)
  {
LABEL_16:
    __break(1u);
LABEL_17:
    __break(1u);
    return result;
  }
  if (result < 0 || v4 < result)
    goto LABEL_17;
  return result;
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v9;
  BOOL v10;

  v5 = *(_QWORD *)(v3 + 48);
  v4 = *(_QWORD *)(v3 + 56);
  if (v4 < a3 || v5 > a3 || v5 > result || v4 < result)
  {
    __break(1u);
    goto LABEL_24;
  }
  v9 = a3 - result;
  if (__OFSUB__(a3, result))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  if (a2 >= 1)
  {
    if (v9 < 0 || v9 >= (unint64_t)a2)
      goto LABEL_19;
    return 0;
  }
  if (v9 <= 0 && v9 > a2)
    return 0;
LABEL_19:
  v10 = __OFADD__(result, a2);
  result += a2;
  if (v10)
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
    return result;
  }
  if (result < v5 || v4 < result)
    goto LABEL_26;
  return result;
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v13;

  v4 = *(_QWORD *)(v3 + 16);
  v5 = *(_QWORD *)(v3 + 24) >> 1;
  v6 = __OFSUB__(v5, v4);
  v7 = v5 - v4;
  if (v6)
  {
    __break(1u);
    goto LABEL_25;
  }
  v8 = *(unsigned __int8 *)(v3 + 32);
  v6 = __OFADD__(v8, v7);
  v9 = v8 + v7;
  if (v6)
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  if (v9 < a3 || v8 > a3 || v8 > result || v9 < result)
    goto LABEL_26;
  v13 = a3 - result;
  if (a2 >= 1)
  {
    if (v13 < 0 || v13 >= (unint64_t)a2)
      goto LABEL_20;
    return 0;
  }
  if (v13 <= 0 && v13 > a2)
    return 0;
LABEL_20:
  v6 = __OFADD__(result, a2);
  result += a2;
  if (v6)
  {
LABEL_27:
    __break(1u);
LABEL_28:
    __break(1u);
    return result;
  }
  if (result < v8 || v9 < result)
    goto LABEL_28;
  return result;
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;

  v4 = *(_QWORD *)(v3 + 40);
  if (v4 < a3 || (a3 | result) < 0 || v4 < result)
  {
    __break(1u);
    goto LABEL_16;
  }
  v5 = a3 - result;
  if (a2 >= 1)
  {
    if (v5 < 0 || v5 >= a2)
      goto LABEL_11;
    return 0;
  }
  if (v5 <= 0 && v5 > a2)
    return 0;
LABEL_11:
  v6 = __OFADD__(result, a2);
  result += a2;
  if (v6)
  {
LABEL_16:
    __break(1u);
LABEL_17:
    __break(1u);
    return result;
  }
  if (result < 0 || v4 < result)
    goto LABEL_17;
  return result;
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;

  v4 = *(_QWORD *)(v3 + 16);
  if (v4 < a3 || (a3 | result) < 0 || v4 < result)
  {
    __break(1u);
    goto LABEL_16;
  }
  v5 = a3 - result;
  if (a2 >= 1)
  {
    if (v5 < 0 || v5 >= a2)
      goto LABEL_11;
    return 0;
  }
  if (v5 <= 0 && v5 > a2)
    return 0;
LABEL_11:
  v6 = __OFADD__(result, a2);
  result += a2;
  if (v6)
  {
LABEL_16:
    __break(1u);
LABEL_17:
    __break(1u);
    return result;
  }
  if (result < 0 || v4 < result)
    goto LABEL_17;
  return result;
}

unint64_t specialized RandomAccessCollection.index(_:offsetBy:limitedBy:)(unint64_t result, uint64_t a2, unint64_t a3, uint64_t a4)
{
  unint64_t v4;
  uint64_t v6;
  BOOL v7;

  v4 = *(_QWORD *)(a4 + 16);
  if (v4 < result || v4 < a3)
  {
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v6 = a3 - result;
  if (a2 >= 1)
  {
    if (v6 < 0 || v6 >= (unint64_t)a2)
      goto LABEL_13;
    return 0;
  }
  if (v6 <= 0 && v6 > a2)
    return 0;
LABEL_13:
  v7 = __OFADD__(result, a2);
  result += a2;
  if (v7)
    goto LABEL_16;
  if (result > v4)
LABEL_17:
    __break(1u);
  return result;
}

unint64_t specialized RandomAccessCollection.index(_:offsetBy:limitedBy:)(unint64_t result, uint64_t a2, unint64_t a3)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v6;
  BOOL v7;

  v4 = *(_QWORD *)(*(_QWORD *)v3 + 16);
  if (v4 < result || v4 < a3)
  {
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v6 = a3 - result;
  if (a2 >= 1)
  {
    if (v6 < 0 || v6 >= (unint64_t)a2)
      goto LABEL_13;
    return 0;
  }
  if (v6 <= 0 && v6 > a2)
    return 0;
LABEL_13:
  v7 = __OFADD__(result, a2);
  result += a2;
  if (v7)
    goto LABEL_16;
  if (result > v4)
LABEL_17:
    __break(1u);
  return result;
}

{
  uint64_t v3;
  unint64_t v4;
  uint64_t v6;
  BOOL v7;

  v4 = *(_QWORD *)(*(_QWORD *)(v3 + 48) + 16);
  if (v4 < result || v4 < a3)
  {
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v6 = a3 - result;
  if (a2 >= 1)
  {
    if (v6 < 0 || v6 >= (unint64_t)a2)
      goto LABEL_13;
    return 0;
  }
  if (v6 <= 0 && v6 > a2)
    return 0;
LABEL_13:
  v7 = __OFADD__(result, a2);
  result += a2;
  if (v7)
    goto LABEL_16;
  if (result > v4)
LABEL_17:
    __break(1u);
  return result;
}

{
  uint64_t v3;
  unint64_t v4;
  uint64_t v6;
  BOOL v7;

  v4 = *(_QWORD *)(*(_QWORD *)(v3 + 8) + 16);
  if (v4 < result || v4 < a3)
  {
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v6 = a3 - result;
  if (a2 >= 1)
  {
    if (v6 < 0 || v6 >= (unint64_t)a2)
      goto LABEL_13;
    return 0;
  }
  if (v6 <= 0 && v6 > a2)
    return 0;
LABEL_13:
  v7 = __OFADD__(result, a2);
  result += a2;
  if (v7)
    goto LABEL_16;
  if (result > v4)
LABEL_17:
    __break(1u);
  return result;
}

{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  BOOL v6;

  v4 = *(_QWORD *)(*(_QWORD *)(v3 + 8) + 16);
  if (v4 < result)
  {
    __break(1u);
    goto LABEL_14;
  }
  if (v4 < a3)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v5 = a3 - result;
  if (a2 >= 1)
  {
    if (v5 < 0 || v5 >= (unint64_t)a2)
      goto LABEL_10;
    return 0;
  }
  if (v5 <= 0 && v5 > a2)
    return 0;
LABEL_10:
  v6 = __OFADD__(result, a2);
  result += a2;
  if (v6)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  if (result > v4)
LABEL_16:
    __break(1u);
  return result;
}

uint64_t specialized RandomAccessCollection.index(_:offsetBy:limitedBy:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v11;

  v5 = *(_QWORD *)(a5 + 16);
  v6 = __OFADD__(a4, v5);
  v7 = a4 + v5;
  if (v6)
  {
    __break(1u);
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  if (v7 < a3 || a3 < a4 || result < a4 || v7 < result)
    goto LABEL_25;
  v11 = a3 - result;
  if (__OFSUB__(a3, result))
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  if (a2 >= 1)
  {
    if (v11 < 0 || v11 >= (unint64_t)a2)
      goto LABEL_20;
    return 0;
  }
  if (v11 <= 0 && v11 > a2)
    return 0;
LABEL_20:
  v6 = __OFADD__(result, a2);
  result += a2;
  if (v6)
  {
LABEL_27:
    __break(1u);
LABEL_28:
    __break(1u);
    return result;
  }
  if (result < a4 || v7 < result)
    goto LABEL_28;
  return result;
}

uint64_t specialized RandomAccessCollection.index(_:offsetBy:limitedBy:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v9;
  BOOL v10;

  v5 = *(_QWORD *)(a4 + 16);
  v4 = *(_QWORD *)(a4 + 24);
  if (v4 < a3 || v5 > a3 || v5 > result || v4 < result)
  {
    __break(1u);
    goto LABEL_24;
  }
  v9 = a3 - result;
  if (__OFSUB__(a3, result))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  if (a2 >= 1)
  {
    if (v9 < 0 || v9 >= (unint64_t)a2)
      goto LABEL_19;
    return 0;
  }
  if (v9 <= 0 && v9 > a2)
    return 0;
LABEL_19:
  v10 = __OFADD__(result, a2);
  result += a2;
  if (v10)
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
    return result;
  }
  if (result < v5 || v4 < result)
    goto LABEL_26;
  return result;
}

unint64_t specialized RandomAccessCollection.index(_:offsetBy:limitedBy:)(unint64_t result, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unint64_t v6;
  uint64_t v8;
  BOOL v9;

  v6 = *(_QWORD *)(a6 + 16);
  if (v6 < result || v6 < a3)
  {
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v8 = a3 - result;
  if (a2 >= 1)
  {
    if (v8 < 0 || v8 >= (unint64_t)a2)
      goto LABEL_13;
    return 0;
  }
  if (v8 <= 0 && v8 > a2)
    return 0;
LABEL_13:
  v9 = __OFADD__(result, a2);
  result += a2;
  if (v9)
    goto LABEL_16;
  if (result > v6)
LABEL_17:
    __break(1u);
  return result;
}

void specialized RandomAccessCollection.index(_:offsetBy:limitedBy:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  id v7;
  uint64_t v8;
  int v9;
  const __CTLine *v10;
  const __CFArray *RunCount;
  const __CTLine *v12;
  const __CFArray *v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  const __CFArray *v17;

  v7 = *(id *)v3;
  v8 = *(_QWORD *)(v3 + 8);
  v9 = *(unsigned __int8 *)(v3 + 16);
  if ((v9 & 1) != 0)
  {
    v10 = (const __CTLine *)(id)_NSTextLineFragmentGetCTLine(v7);
    if (!v10)
    {
      if (a1)
      {
LABEL_31:
        __break(1u);
LABEL_32:
        __break(1u);
        goto LABEL_33;
      }
      goto LABEL_9;
    }
  }
  else
  {
    outlined copy of Text.Layout.Line.Line(v7, v8, 0);
    swift_release();
    v10 = (const __CTLine *)v7;
  }
  RunCount = _CTLineGetRunCount(v10);

  if (a1 < 0 || (uint64_t)RunCount < a1)
    goto LABEL_31;
  if (!v9)
  {
    outlined copy of Text.Layout.Line.Line(v7, v8, 0);
    swift_release();
    v12 = (const __CTLine *)v7;
    goto LABEL_12;
  }
LABEL_9:
  v12 = (const __CTLine *)(id)_NSTextLineFragmentGetCTLine(v7);
  if (v12)
  {
LABEL_12:
    v13 = _CTLineGetRunCount(v12);

    goto LABEL_13;
  }
  v13 = 0;
LABEL_13:
  if (a3 < 0 || (uint64_t)v13 < a3)
    goto LABEL_32;
  v14 = a3 - a1;
  if (a2 < 1)
  {
    if (v14 <= 0 && v14 > a2)
      return;
  }
  else if ((v14 & 0x8000000000000000) == 0 && v14 < a2)
  {
    return;
  }
  v15 = __OFADD__(a1, a2);
  v16 = a1 + a2;
  if (v15)
  {
LABEL_33:
    __break(1u);
LABEL_34:
    __break(1u);
    return;
  }
  if ((v9 & 1) == 0)
  {
    outlined copy of Text.Layout.Line.Line(v7, v8, 0);
    swift_release();
    goto LABEL_27;
  }
  v7 = (id)_NSTextLineFragmentGetCTLine(v7);
  if (v7)
  {
LABEL_27:
    v17 = _CTLineGetRunCount((const __CTLine *)v7);

    goto LABEL_28;
  }
  v17 = 0;
LABEL_28:
  if (v16 < 0 || (uint64_t)v17 < v16)
    goto LABEL_34;
}

void specialized RandomAccessCollection.index(_:offsetBy:limitedBy:)(CFIndex a1, uint64_t a2, CFIndex a3)
{
  uint64_t v3;
  const __CTLine *v7;
  CFIndex v8;
  void *v9;
  CFIndex GlyphCount;
  void *v11;
  CFIndex v12;
  uint64_t v13;
  BOOL v14;
  CFIndex v15;
  void *v16;
  CFIndex v17;

  v7 = *(const __CTLine **)v3;
  v8 = *(_QWORD *)(v3 + 8);
  v9 = (id)_CTLineGetRunAtIndex(v7, v8);
  GlyphCount = CTRunGetGlyphCount((CTRunRef)v9);

  if (a1 < 0 || GlyphCount < a1)
  {
    __break(1u);
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  v11 = (id)_CTLineGetRunAtIndex(v7, v8);
  v12 = CTRunGetGlyphCount((CTRunRef)v11);

  if (a3 < 0 || v12 < a3)
    goto LABEL_17;
  v13 = a3 - a1;
  if (a2 < 1)
  {
    if (v13 > 0 || v13 <= a2)
    {
LABEL_12:
      v14 = __OFADD__(a1, a2);
      v15 = a1 + a2;
      if (!v14)
      {
        v16 = (id)_CTLineGetRunAtIndex(v7, v8);
        v17 = CTRunGetGlyphCount((CTRunRef)v16);

        if ((v15 & 0x8000000000000000) == 0 && v17 >= v15)
          return;
LABEL_19:
        __break(1u);
        return;
      }
LABEL_18:
      __break(1u);
      goto LABEL_19;
    }
  }
  else if (v13 < 0 || v13 >= a2)
  {
    goto LABEL_12;
  }
}

unint64_t specialized RandomAccessCollection.index(_:offsetBy:limitedBy:)(unint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t *v3;
  uint64_t v7;
  unint64_t result;
  unint64_t v9;
  uint64_t v10;

  v7 = *v3;
  result = swift_beginAccess();
  v9 = *(_QWORD *)(*(_QWORD *)(v7 + 160) + 16);
  if (v9 < a1)
  {
    __break(1u);
    goto LABEL_14;
  }
  if (v9 < a3)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v10 = a3 - a1;
  if (a2 >= 1)
  {
    if (v10 < 0 || v10 >= (unint64_t)a2)
      goto LABEL_10;
    return 0;
  }
  if (v10 <= 0 && v10 > a2)
    return 0;
LABEL_10:
  result = a1 + a2;
  if (__OFADD__(a1, a2))
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  if (result > v9)
LABEL_16:
    __break(1u);
  return result;
}

uint64_t specialized RandomAccessCollection.index(_:offsetBy:limitedBy:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v4 = v3;
  if (one-time initialization token for _lock != -1)
    swift_once();
  v8 = static Update._lock;
  _MovableLockLock(static Update._lock);
  specialized static Update.begin()();
  v9 = v3[3];
  v10 = v4[4];
  __swift_project_boxed_opaque_existential_1(v4, v4[3]);
  v11 = ViewList.count.getter(v9, v10);
  static Update.end()();
  result = _MovableLockUnlock(v8);
  if (a1 < 0 || v11 < a1)
  {
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  _MovableLockLock(v8);
  specialized static Update.begin()();
  v13 = v4[3];
  v14 = v4[4];
  __swift_project_boxed_opaque_existential_1(v4, v13);
  v15 = ViewList.count.getter(v13, v14);
  static Update.end()();
  result = _MovableLockUnlock(v8);
  if (a3 < 0 || v15 < a3)
    goto LABEL_19;
  v16 = a3 - a1;
  if (a2 >= 1)
  {
    if (v16 < 0 || v16 >= a2)
      goto LABEL_14;
    return 0;
  }
  if (v16 <= 0 && v16 > a2)
    return 0;
LABEL_14:
  v18 = __OFADD__(a1, a2);
  v17 = a1 + a2;
  if (v18)
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  _MovableLockLock(v8);
  specialized static Update.begin()();
  v19 = v4[3];
  v20 = v4[4];
  __swift_project_boxed_opaque_existential_1(v4, v19);
  v21 = ViewList.count.getter(v19, v20);
  static Update.end()();
  result = _MovableLockUnlock(v8);
  if ((v17 & 0x8000000000000000) == 0 && v21 >= v17)
    return v17;
LABEL_21:
  __break(1u);
  return result;
}

{
  uint64_t v3;
  uint64_t (*v7)(void);
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;

  v7 = *(uint64_t (**)(void))(*(_QWORD *)v3 + 88);
  result = v7();
  if (a1 < 0 || result < a1)
  {
    __break(1u);
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  result = v7();
  if (a3 < 0 || result < a3)
    goto LABEL_17;
  v9 = a3 - a1;
  if (a2 >= 1)
  {
    if (v9 < 0 || v9 >= a2)
      goto LABEL_12;
    return 0;
  }
  if (v9 <= 0 && v9 > a2)
    return 0;
LABEL_12:
  v11 = __OFADD__(a1, a2);
  v10 = a1 + a2;
  if (v11)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  result = v7();
  if ((v10 & 0x8000000000000000) == 0 && result >= v10)
    return v10;
LABEL_19:
  __break(1u);
  return result;
}

uint64_t specialized Collection<>.subscript.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  _QWORD *v3;
  uint64_t v4;
  Swift::UInt64 v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;

  v4 = (uint64_t)v3;
  v8 = v3[1];
  v9 = v3[2];
  v10 = *v3 + 48;
  swift_beginAccess();
  if (*(_QWORD *)(*(_QWORD *)v10 + 16))
  {
    specialized __RawDictionaryStorage.find<A>(_:)(v8, v9);
    if ((v11 & 1) != 0)
    {
      swift_endAccess();
      swift_beginAccess();
      v12 = *(_QWORD *)v10;
      if (!*(_QWORD *)(*(_QWORD *)v10 + 16))
        goto LABEL_10;
      v13 = specialized __RawDictionaryStorage.find<A>(_:)(v8, v9);
      if ((v14 & 1) == 0)
        goto LABEL_10;
      v15 = *(_QWORD *)(*(_QWORD *)(v12 + 56) + 16 * v13);
      swift_endAccess();
      if ((a1 & 0x8000000000000000) == 0 && *(_QWORD *)(v15 + 16) >= a2)
      {
        type metadata accessor for Slice<Text.Effect.BaseContent>();
        result = outlined init with copy of Text.Effect.BaseContent(v4, (uint64_t)a3 + *(int *)(v16 + 40));
        *a3 = a1;
        a3[1] = a2;
        return result;
      }
      __break(1u);
    }
  }
  swift_endAccess();
  __break(1u);
LABEL_10:
  result = swift_endAccess();
  __break(1u);
  return result;
}

void specialized Collection<>.subscript.getter(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  void *v7;
  uint64_t v8;
  char v9;
  int v10;
  const __CTLine *v11;
  uint64_t RunCount;
  __int128 v13;

  v7 = *(void **)v3;
  v8 = *(_QWORD *)(v3 + 8);
  v9 = *(_BYTE *)(v3 + 16);
  v13 = *(_OWORD *)(v3 + 24);
  v10 = *(_DWORD *)(v3 + 40);
  if ((v9 & 1) != 0)
  {
    v11 = (const __CTLine *)(id)_NSTextLineFragmentGetCTLine(v7);
    if (!v11)
    {
      RunCount = 0;
      goto LABEL_6;
    }
  }
  else
  {
    outlined copy of Text.Layout.Line.Line(v7, v8, 0);
    swift_release();
    v11 = (const __CTLine *)v7;
  }
  RunCount = (uint64_t)_CTLineGetRunCount(v11);

  if (RunCount < 0)
  {
    __break(1u);
    goto LABEL_10;
  }
LABEL_6:
  if (a1 < 0)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  if (RunCount >= a2)
  {
    *(_QWORD *)(a3 + 16) = v7;
    *(_QWORD *)(a3 + 24) = v8;
    *(_BYTE *)(a3 + 32) = v9;
    *(_OWORD *)(a3 + 40) = v13;
    *(_DWORD *)(a3 + 56) = v10;
    *(_QWORD *)a3 = a1;
    *(_QWORD *)(a3 + 8) = a2;
    outlined copy of Text.Layout.Line.Line(v7, v8, v9);
    return;
  }
LABEL_11:
  __break(1u);
}

uint64_t specialized Collection<>.subscript.getter@<X0>(__int128 *a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v2;
  uint64_t v5;
  uint64_t result;
  int v7;
  char v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  char v13;
  _BYTE v14[24];
  __int128 v15;
  char v16;
  _BYTE v17[24];
  uint64_t v18;
  int v19;
  char v20;
  uint64_t v21;
  int v22;
  char v23;

  v5 = *v2;
  result = specialized Dictionary.startIndex.getter(*v2);
  if ((v8 & 1) != 0)
    goto LABEL_17;
  v9 = *(_DWORD *)(v5 + 36);
  if (v9 != v7)
  {
    __break(1u);
    goto LABEL_12;
  }
  v10 = result;
  v11 = 1 << *(_BYTE *)(v5 + 32);
  if (v11 < result)
  {
LABEL_12:
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  v15 = *a1;
  v16 = *((_BYTE *)a1 + 16);
  outlined init with take of LocalizedStringKey.FormatArgument((uint64_t)&v15, (uint64_t)v17, (uint64_t (*)(_QWORD))type metadata accessor for [String : AccessibilityCustomAttributes.Value].Index._Variant);
  result = outlined init with take of LocalizedStringKey.FormatArgument((uint64_t)v17, (uint64_t)&v18, (uint64_t (*)(_QWORD))type metadata accessor for [String : AccessibilityCustomAttributes.Value].Index._Variant);
  if ((v20 & 1) != 0)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  v12 = *(__int128 *)((char *)a1 + 24);
  v13 = *((_BYTE *)a1 + 40);
  if (v19 != v9)
    goto LABEL_13;
  if (v18 < v10)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  outlined init with take of LocalizedStringKey.FormatArgument((uint64_t)&v12, (uint64_t)v14, (uint64_t (*)(_QWORD))type metadata accessor for [String : AccessibilityCustomAttributes.Value].Index._Variant);
  result = outlined init with take of LocalizedStringKey.FormatArgument((uint64_t)v14, (uint64_t)&v21, (uint64_t (*)(_QWORD))type metadata accessor for [String : AccessibilityCustomAttributes.Value].Index._Variant);
  if ((v23 & 1) == 0)
  {
    if (v9 == v22)
    {
      if (v11 >= v21)
      {
        *(_QWORD *)(a2 + 48) = v5;
        *(_OWORD *)a2 = v15;
        *(_BYTE *)(a2 + 16) = v16;
        *(_OWORD *)(a2 + 24) = v12;
        *(_BYTE *)(a2 + 40) = v13;
        return swift_bridgeObjectRetain();
      }
      goto LABEL_16;
    }
LABEL_15:
    __break(1u);
LABEL_16:
    __break(1u);
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
LABEL_19:
  __break(1u);
  return result;
}

uint64_t specialized Collection<>.subscript.getter@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;

  v4 = *(_QWORD *)(v3 + 16);
  v5 = *(_QWORD *)(v3 + 24);
  v6 = (v5 >> 1) - v4;
  if (__OFSUB__(v5 >> 1, v4))
  {
    __break(1u);
    goto LABEL_8;
  }
  v7 = *(unsigned __int8 *)(v3 + 32);
  v8 = __OFADD__(v7, v6);
  v9 = v7 + v6;
  if (v8)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  if (v9 < v7)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  if (v7 > result)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  if (v9 >= a2)
  {
    *(_OWORD *)(a3 + 16) = *(_OWORD *)v3;
    *(_QWORD *)(a3 + 32) = v4;
    *(_QWORD *)(a3 + 40) = v5;
    *(_BYTE *)(a3 + 48) = v7;
    *(_QWORD *)a3 = result;
    *(_QWORD *)(a3 + 8) = a2;
    return swift_unknownObjectRetain();
  }
LABEL_11:
  __break(1u);
  return result;
}

uint64_t specialized RandomAccessCollection<>.index(after:)(unint64_t a1)
{
  uint64_t *v1;
  Swift::UInt64 v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  unint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t result;

  v4 = *v1;
  v3 = v1[1];
  v5 = v1[2];
  v6 = *v1 + 48;
  swift_beginAccess();
  if (*(_QWORD *)(*(_QWORD *)(v4 + 48) + 16))
  {
    specialized __RawDictionaryStorage.find<A>(_:)(v3, v5);
    if ((v7 & 1) != 0)
    {
      swift_endAccess();
      swift_beginAccess();
      v8 = *(_QWORD *)v6;
      if (!*(_QWORD *)(*(_QWORD *)v6 + 16))
        goto LABEL_9;
      v9 = specialized __RawDictionaryStorage.find<A>(_:)(v3, v5);
      if ((v10 & 1) == 0)
        goto LABEL_9;
      v11 = *(_QWORD *)(*(_QWORD *)(v8 + 56) + 16 * v9);
      swift_endAccess();
      if (*(_QWORD *)(v11 + 16) > a1)
        return a1 + 1;
      __break(1u);
    }
  }
  swift_endAccess();
  __break(1u);
LABEL_9:
  result = swift_endAccess();
  __break(1u);
  return result;
}

void specialized RandomAccessCollection<>.index(after:)(uint64_t a1)
{
  uint64_t v1;
  id v3;
  const __CFArray *RunCount;

  v3 = *(id *)v1;
  if ((*(_BYTE *)(v1 + 16) & 1) == 0)
  {
    outlined copy of Text.Layout.Line.Line(v3, *(_QWORD *)(v1 + 8), 0);
    swift_release();
    goto LABEL_5;
  }
  v3 = (id)_NSTextLineFragmentGetCTLine(*(void **)v1);
  if (v3)
  {
LABEL_5:
    RunCount = _CTLineGetRunCount((const __CTLine *)v3);

    goto LABEL_6;
  }
  RunCount = 0;
LABEL_6:
  if (a1 < 0 || (uint64_t)RunCount <= a1)
    __break(1u);
}

uint64_t thunk for @callee_guaranteed (@unowned Int, @unowned UnsafeMutablePointer<CFRange>) -> (@unowned Unmanaged<CFDictionaryRef>?)(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  return a3();
}

uint64_t thunk for @escaping @callee_guaranteed (@unowned Int, @unowned UnsafeMutablePointer<CFRange>) -> (@unowned Unmanaged<CFDictionaryRef>?)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 32))(a2, a3);
}

void Text.Layout.Line.subscript.getter(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  void *v5;
  int v6;
  id v7;
  uint64_t v8;
  __int128 v9;

  v5 = *(void **)v2;
  v9 = *(_OWORD *)(v2 + 24);
  v6 = *(_DWORD *)(v2 + 40);
  if ((*(_BYTE *)(v2 + 16) & 1) == 0)
  {
    v8 = *(_QWORD *)(v2 + 8);
    outlined copy of Text.Layout.Line.Line(v5, v8, 0);
    swift_release();
    outlined copy of Text.Layout.Line.Line(v5, v8, 0);

    goto LABEL_5;
  }
  v7 = (id)_NSTextLineFragmentGetCTLine(v5);
  if (v7)
  {
    v5 = v7;
    v8 = 0;
LABEL_5:
    *(_QWORD *)a2 = v5;
    *(_QWORD *)(a2 + 8) = a1;
    *(_OWORD *)(a2 + 16) = v9;
    *(_DWORD *)(a2 + 32) = v6;
    *(_QWORD *)(a2 + 40) = v8;
    return;
  }
  __break(1u);
}

void Text.Layout.Line.characterRange.getter()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  char *location;
  CFIndex v4;
  CFIndex length;
  const __CTLine *v6;
  CFRange StringRange;

  v1 = *(void **)v0;
  if ((*(_BYTE *)(v0 + 16) & 1) != 0)
  {
    v2 = *(_QWORD *)(v0 + 8);
    location = (char *)objc_msgSend(v1, sel_characterRange);
    length = v4;
    outlined consume of Text.Layout.Line.Line(v1, v2, 1);
  }
  else
  {
    v6 = v1;
    StringRange = CTLineGetStringRange(v6);
    location = (char *)StringRange.location;
    length = StringRange.length;

  }
  if (__OFADD__(location, length))
  {
    __break(1u);
    goto LABEL_8;
  }
  if ((uint64_t)&location[length] < (uint64_t)location)
LABEL_8:
    __break(1u);
}

void GraphicsContext.draw(_:options:)(uint64_t a1, int a2, uint64_t a3)
{
  CGFloat v4;
  void *v5;
  CGFloat v6;
  CGFloat v7;
  CGFloat v8;
  unsigned int v9;
  unsigned int v10;
  CGFloat v11;
  double v12;
  int v13;
  CGFloat i;
  void *v15;
  const __CTLine *v16;
  const __CFArray *RunCount;
  const __CTLine *v18;
  const __CTLine *v19;
  char v20;
  const __CTLine *v21;
  const __CFArray *v22;
  const __CTLine *v23;
  CGFloat v24;
  int v25;
  CGFloat c;
  CGContext *v27;
  void *v28;
  double v29;
  uint64_t (*v30)(int, uint64_t, double, double, double, double, double, double, double, double);
  id v31;
  const __CTLine *v32;
  uint64_t v33;
  char v34;
  int v36;
  int v37;
  uint64_t v38;
  CGAffineTransform transform;
  int v40;
  CGAffineTransform v41;
  int v42;
  CFRange v43;

  v5 = *(void **)a1;
  v4 = *(double *)(a1 + 8);
  v6 = *(double *)(a1 + 24);
  v7 = *(double *)(a1 + 32);
  v36 = *(_DWORD *)(a1 + 40);
  v37 = *(unsigned __int8 *)(a1 + 16);
  if ((a2 & 0x40) == 0)
  {
    v8 = *(double *)(a3 + 24);
    v9 = *(_DWORD *)(a3 + 32);
    v10 = *(_DWORD *)(a3 + 36);
    v11 = *(double *)(a3 + 40);
    swift_retain();
    v12 = GraphicsContext.userToDeviceScale.getter();
    swift_release();
    v41.a = v8;
    v41.b = v8;
    v41.c = 0.0;
    *(_QWORD *)&v41.d = __PAIR64__(v10, v9);
    v41.tx = v11;
    v41.ty = v12;
    outlined copy of Text.Layout.Line.Line(v5, *(uint64_t *)&v4, v37);
    v13 = 0;
    for (i = 0.0; ; ++*(_QWORD *)&i)
    {
      if ((v37 & 1) != 0)
      {
        v16 = (const __CTLine *)(id)_NSTextLineFragmentGetCTLine(v5);
        if (!v16)
        {
          if (i == 0.0)
          {
            v34 = 1;
LABEL_24:
            outlined consume of Text.Layout.Line.Line(v5, *(uint64_t *)&v4, v34);
            transform = v41;
            v40 = v13;
            GlyphContext.deinit();
            break;
          }
          goto LABEL_11;
        }
      }
      else
      {
        outlined copy of Text.Layout.Line.Line(v5, *(uint64_t *)&v4, 0);
        swift_release();
        v16 = (const __CTLine *)v5;
      }
      RunCount = _CTLineGetRunCount(v16);

      if (*(const __CFArray **)&i == RunCount)
      {
        v34 = v37;
        goto LABEL_24;
      }
      if (!v37)
      {
        outlined copy of Text.Layout.Line.Line(v5, *(uint64_t *)&v4, 0);
        swift_release();
        outlined copy of Text.Layout.Line.Line(v5, *(uint64_t *)&v4, 0);

        outlined copy of Text.Layout.Line.Line(v5, *(uint64_t *)&v4, 0);
        outlined copy of Text.Layout.Line.Line(v5, *(uint64_t *)&v4, 0);
        swift_release();
        v23 = (const __CTLine *)v5;
        v19 = (const __CTLine *)v5;
        v22 = *(const __CFArray **)&v4;
        goto LABEL_15;
      }
LABEL_11:
      v18 = (const __CTLine *)(id)_NSTextLineFragmentGetCTLine(v5);
      if (!v18)
        goto LABEL_38;
      v19 = v18;
      v20 = 1;
      outlined copy of Text.Layout.Line.Line(v5, *(uint64_t *)&v4, 1);
      v21 = (const __CTLine *)(id)_NSTextLineFragmentGetCTLine(v5);
      v22 = 0;
      if (v21)
      {
        v23 = v21;
LABEL_15:
        v24 = *(double *)&v22;
        v22 = _CTLineGetRunCount(v23);

        v20 = v37;
        goto LABEL_17;
      }
      v24 = 0.0;
LABEL_17:
      outlined consume of Text.Layout.Line.Line(v5, *(uint64_t *)&v4, v20);
      if (*(uint64_t *)&i >= (uint64_t)v22)
      {
        __break(1u);
        goto LABEL_37;
      }
      *(_QWORD *)&transform.a = v19;
      transform.b = i;
      transform.c = v6;
      transform.d = v7;
      LODWORD(transform.tx) = v36;
      transform.ty = v24;
      v25 = Text.Layout.Run.drawingOptions.getter() | a2;
      v42 = v25;
      c = v41.c;
      if (*(_QWORD *)&v41.c && v25 != v13)
      {
        RBDrawingStateEndCGContext();

        v41.c = 0.0;
      }
      v27 = GlyphContext.currentContext()();
      v13 = v42;
      if ((v42 & 8) == 0)
      {
        v28 = (id)_CTLineGetRunAtIndex(v19, *(CFIndex *)&i);
        _CGContextSetTextRunRange((uint64_t)v27, (uint64_t)v28, 0, 0);

      }
      *(_QWORD *)&transform.a = v19;
      transform.b = i;
      transform.c = v6;
      transform.d = v7;
      LODWORD(transform.tx) = v36;
      transform.ty = v24;
      GlyphContext.drawAttachment(_:cgContext:)(&transform, v27);
      CGContextSaveGState(v27);
      transform.b = 0.0;
      transform.c = 0.0;
      transform.a = 1.0;
      transform.d = -1.0;
      transform.tx = v6;
      transform.ty = v7;
      CGContextConcatCTM(v27, &transform);
      v15 = (id)_CTLineGetRunAtIndex(v19, *(CFIndex *)&i);
      v43.location = 0;
      v43.length = 0;
      CTRunDraw((CTRunRef)v15, v27, v43);

      CGContextRestoreGState(v27);
      swift_release();
    }
  }
  if ((a2 & 0x20) == 0)
  {
    outlined copy of Text.Layout.Line.Line(v5, *(uint64_t *)&v4, v37);
    v29 = GraphicsContext.userToDeviceScale.getter();
    if ((v37 & 1) != 0)
    {
      outlined copy of Text.Layout.Line.Line(v5, *(uint64_t *)&v4, 1);
      v30 = (uint64_t (*)(int, uint64_t, double, double, double, double, double, double, double, double))(id)_NSTextLineFragmentGetCTLine(v5);
    }
    else
    {
      outlined copy of Text.Layout.Line.Line(v5, *(uint64_t *)&v4, 0);
      v31 = v5;
      v30 = (uint64_t (*)(int, uint64_t, double, double, double, double, double, double, double, double))v5;
    }
    *(_QWORD *)&v41.a = v5;
    v41.b = v4;
    LOBYTE(v41.c) = v37;
    v41.d = v6;
    v41.tx = v7;
    LODWORD(v41.ty) = v36;
    Text.Layout.Line.typographicBounds.getter((float64x2_t *)&transform);
    outlined consume of Text.Layout.Line.Line(v5, *(uint64_t *)&v4, v37);
    if ((v37 & 1) != 0)
    {
      v32 = (const __CTLine *)(id)_NSTextLineFragmentGetCTLine(v5);
      if (!v32)
      {
        outlined consume of Text.Layout.Line.Line(v5, *(uint64_t *)&v4, 1);
        v33 = 0;
LABEL_34:
        memset(&v41, 0, sizeof(v41));
        LOBYTE(v42) = 1;
        Text.Layout.Decorations.init(line:origin:scale:runs:flags:typographicBounds:)(v30, 0, v33, 3, (uint64_t)&v41, (double *)&v38, *(uint64_t (**)())&transform.a, transform.b, v29);
        GraphicsContext.draw(_:)(&v38, a3);
        swift_bridgeObjectRelease();
        return;
      }
    }
    else
    {
      outlined copy of Text.Layout.Line.Line(v5, *(uint64_t *)&v4, 0);
      swift_release();
      v32 = (const __CTLine *)v5;
    }
    v33 = (uint64_t)_CTLineGetRunCount(v32);

    outlined consume of Text.Layout.Line.Line(v5, *(uint64_t *)&v4, v37);
    if ((v33 & 0x8000000000000000) == 0)
      goto LABEL_34;
LABEL_37:
    __break(1u);
LABEL_38:
    __break(1u);
  }
}

{
  CGFloat v5;
  const __CTLine *v6;
  double v7;
  double v8;
  CGFloat v9;
  int v10;
  CGFloat v11;
  unsigned int v12;
  unsigned int v13;
  CGFloat v14;
  double v15;
  CGContext *v16;
  int v17;
  void *v18;
  void *v19;
  const __CTLine *v20;
  double v21;
  double v22;
  const __CTLine *v23;
  const __CTLine *v24;
  void *v25;
  uint64_t v26;
  CGAffineTransform transform;
  int v28;
  CGAffineTransform v29;
  int v30;
  CFRange v31;

  v6 = *(const __CTLine **)a1;
  v5 = *(double *)(a1 + 8);
  v7 = *(double *)(a1 + 16);
  v8 = *(double *)(a1 + 24);
  v9 = *(double *)(a1 + 40);
  if ((a2 & 0x40) == 0)
  {
    v10 = *(_DWORD *)(a1 + 32);
    v11 = *(double *)(a3 + 24);
    v12 = *(_DWORD *)(a3 + 32);
    v13 = *(_DWORD *)(a3 + 36);
    v14 = *(double *)(a3 + 40);
    swift_retain();
    v15 = GraphicsContext.userToDeviceScale.getter();
    swift_release();
    v29.a = v11;
    v29.b = v11;
    v29.c = 0.0;
    *(_QWORD *)&v29.d = __PAIR64__(v13, v12);
    v29.tx = v14;
    v29.ty = v15;
    *(_QWORD *)&transform.a = v6;
    transform.b = v5;
    transform.c = v7;
    transform.d = v8;
    LODWORD(transform.tx) = v10;
    transform.ty = v9;
    v30 = Text.Layout.Run.drawingOptions.getter() | a2;
    v16 = GlyphContext.currentContext()();
    v17 = v30;
    if ((v30 & 8) == 0)
    {
      v18 = (id)_CTLineGetRunAtIndex(v6, *(CFIndex *)&v5);
      _CGContextSetTextRunRange((uint64_t)v16, (uint64_t)v18, 0, 0);

    }
    *(_QWORD *)&transform.a = v6;
    transform.b = v5;
    transform.c = v7;
    transform.d = v8;
    LODWORD(transform.tx) = v10;
    transform.ty = v9;
    GlyphContext.drawAttachment(_:cgContext:)(&transform, v16);
    CGContextSaveGState(v16);
    transform.a = 1.0;
    transform.b = 0.0;
    transform.c = 0.0;
    transform.d = -1.0;
    transform.tx = v7;
    transform.ty = v8;
    CGContextConcatCTM(v16, &transform);
    v19 = (id)_CTLineGetRunAtIndex(v6, *(CFIndex *)&v5);
    v31.location = 0;
    v31.length = 0;
    CTRunDraw((CTRunRef)v19, v16, v31);

    CGContextRestoreGState(v16);
    transform = v29;
    v28 = v17;
    GlyphContext.deinit();
  }
  if ((a2 & 0x20) == 0)
  {
    swift_retain();
    v20 = v6;
    v21 = GraphicsContext.userToDeviceScale.getter();
    if (__OFADD__(*(_QWORD *)&v5, 1))
    {
      __break(1u);
    }
    else if (*(_QWORD *)&v5 + 1 >= *(uint64_t *)&v5)
    {
      v22 = v21;
      v23 = v20;
      swift_retain();
      v24 = v23;
      v25 = (id)_CTLineGetRunAtIndex(v24, *(CFIndex *)&v5);
      specialized Text.Layout.TypographicBounds.init(run:range:)((const __CTRun *)v25, (CFRange)0, &transform.a);
      swift_release();

      v29.a = v7 + transform.a;
      v29.b = v8 + transform.b;
      *(_OWORD *)&v29.c = *(_OWORD *)&transform.c;
      *(_OWORD *)&v29.tx = *(_OWORD *)&transform.tx;
      LOBYTE(v30) = 0;
      Text.Layout.Decorations.init(line:origin:scale:runs:flags:typographicBounds:)((uint64_t (*)(int, uint64_t, double, double, double, double, double, double, double, double))v20, *(uint64_t *)&v5, *(_QWORD *)&v5 + 1, 3, (uint64_t)&v29, (double *)&v26, *(uint64_t (**)())&v7, v8, v22);
      swift_release();

      GraphicsContext.draw(_:)(&v26, a3);
      swift_bridgeObjectRelease();
      return;
    }
    __break(1u);
  }
}

{
  uint64_t v4;
  CGFloat v5;
  void *v6;
  double v7;
  double v8;
  CGFloat v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  CGFloat v13;
  unsigned int v14;
  unsigned int v15;
  CGFloat v16;
  double v17;
  void *v18;
  uint64_t v19;
  const __CTLine *v20;
  CGContext *v21;
  int v22;
  void *v23;
  void *v24;
  id v25;
  double v26;
  id v27;
  const __CTLine *v28;
  void *v29;
  CFIndex GlyphCount;
  const __CTLine *v31;
  void *v32;
  CFIndex v33;
  char v34;
  __int128 v35;
  double v36;
  double v37;
  __int128 v38;
  const __CTLine *v39;
  void *v40;
  uint64_t v41;
  void *v42;
  uint64_t v43;
  void *v44;
  uint64_t v45;
  char v46;
  uint64_t v47;
  CGAffineTransform transform;
  int v49;
  CGAffineTransform v50;
  int v51;
  CFRange v52;

  LODWORD(v4) = a2;
  v6 = *(void **)a1;
  v5 = *(double *)(a1 + 8);
  v7 = *(double *)(a1 + 16);
  v8 = *(double *)(a1 + 24);
  v9 = *(double *)(a1 + 40);
  v10 = *(_QWORD *)(a1 + 48);
  v11 = *(_QWORD *)(a1 + 56);
  if ((a2 & 0x40) == 0)
  {
    v12 = *(_DWORD *)(a1 + 32);
    v13 = *(double *)(a3 + 24);
    v14 = *(_DWORD *)(a3 + 32);
    v15 = *(_DWORD *)(a3 + 36);
    v16 = *(double *)(a3 + 40);
    swift_retain();
    v17 = GraphicsContext.userToDeviceScale.getter();
    swift_release();
    v50.a = v13;
    v50.b = v13;
    v50.c = 0.0;
    *(_QWORD *)&v50.d = __PAIR64__(v15, v14);
    v50.tx = v16;
    v50.ty = v17;
    *(_QWORD *)&transform.a = v6;
    transform.b = v5;
    transform.c = v7;
    transform.d = v8;
    LODWORD(transform.tx) = v12;
    transform.ty = v9;
    v46 = v4;
    v51 = Text.Layout.Run.drawingOptions.getter() | v4;
    v4 = v11 - v10;
    if (__OFSUB__(v11, v10))
    {
      __break(1u);
LABEL_21:
      __break(1u);
      goto LABEL_22;
    }
    v18 = v6;
    v19 = v10;
    v44 = v18;
    v45 = v11;
    v20 = v18;
    swift_retain();
    v21 = GlyphContext.currentContext()();
    v22 = v51;
    if ((v51 & 8) == 0)
    {
      v23 = (id)_CTLineGetRunAtIndex(v20, *(CFIndex *)&v5);
      _CGContextSetTextRunRange((uint64_t)v21, (uint64_t)v23, v19, v4);

    }
    *(_QWORD *)&transform.a = v20;
    transform.b = v5;
    transform.c = v7;
    transform.d = v8;
    LODWORD(transform.tx) = v12;
    transform.ty = v9;
    GlyphContext.drawAttachment(_:cgContext:)(&transform, v21);
    CGContextSaveGState(v21);
    transform.a = 1.0;
    transform.b = 0.0;
    transform.c = 0.0;
    transform.d = -1.0;
    transform.tx = v7;
    transform.ty = v8;
    CGContextConcatCTM(v21, &transform);
    v24 = (id)_CTLineGetRunAtIndex(v20, *(CFIndex *)&v5);
    v52.location = v19;
    v52.length = v4;
    CTRunDraw((CTRunRef)v24, v21, v52);

    CGContextRestoreGState(v21);
    swift_release();

    transform = v50;
    v49 = v22;
    v10 = v19;
    GlyphContext.deinit();
    v6 = v44;
    v11 = v45;
    LOBYTE(v4) = v46;
  }
  if ((v4 & 0x20) != 0)
    return;
  swift_retain();
  v25 = v6;
  v26 = GraphicsContext.userToDeviceScale.getter();
  v27 = v25;
  swift_retain_n();
  v28 = (const __CTLine *)v27;
  v29 = (id)_CTLineGetRunAtIndex(v28, *(CFIndex *)&v5);
  GlyphCount = CTRunGetGlyphCount((CTRunRef)v29);
  swift_release();

  if (GlyphCount < 0)
    goto LABEL_21;
  v31 = v28;
  swift_retain();
  v32 = (id)_CTLineGetRunAtIndex(v31, *(CFIndex *)&v5);
  v33 = CTRunGetGlyphCount((CTRunRef)v32);
  swift_release();

  if (v33 < 0)
  {
LABEL_22:
    __break(1u);
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  if (v11 == v33)
    v34 = (v10 == 0) | 2;
  else
    v34 = v10 == 0;
  if (__OFADD__(*(_QWORD *)&v5, 1))
    goto LABEL_23;
  if (*(_QWORD *)&v5 + 1 < *(uint64_t *)&v5)
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  if (v10 != v11)
  {
    v39 = v31;
    v40 = (id)_CTLineGetRunAtIndex(v39, *(CFIndex *)&v5);
    v41 = v11 - v10;
    if (!__OFSUB__(v11, v10))
    {
      v42 = v40;
      v43 = v10;
      specialized Text.Layout.TypographicBounds.init(run:range:)((const __CTRun *)v40, *(CFRange *)(&v41 - 1), &transform.a);
      swift_release();

      v35 = *(_OWORD *)&transform.c;
      v38 = *(_OWORD *)&transform.tx;
      v36 = v7 + transform.a;
      v37 = v8 + transform.b;
      goto LABEL_18;
    }
LABEL_25:
    __break(1u);
    return;
  }
  swift_release();
  v35 = 0uLL;
  v36 = 0.0;
  v37 = 0.0;
  v38 = 0uLL;
LABEL_18:
  v50.a = v36;
  v50.b = v37;
  *(_OWORD *)&v50.c = v35;
  *(_OWORD *)&v50.tx = v38;
  LOBYTE(v51) = 0;
  Text.Layout.Decorations.init(line:origin:scale:runs:flags:typographicBounds:)((uint64_t (*)(int, uint64_t, double, double, double, double, double, double, double, double))v31, *(uint64_t *)&v5, *(_QWORD *)&v5 + 1, v34, (uint64_t)&v50, (double *)&v47, *(uint64_t (**)())&v7, v8, v26);
  swift_release();

  GraphicsContext.draw(_:)(&v47, a3);
  swift_bridgeObjectRelease();
}

unint64_t Text.Layout.subscript.getter@<X0>(unint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  char v6;
  int v7;

  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(_QWORD *)(*(_QWORD *)v2 + 16) > result)
  {
    v3 = *(_QWORD *)v2 + 48 * result;
    v4 = *(void **)(v3 + 32);
    v5 = *(_QWORD *)(v3 + 40);
    v6 = *(_BYTE *)(v3 + 48);
    v7 = *(_DWORD *)(v3 + 72);
    *(_QWORD *)a2 = v4;
    *(_QWORD *)(a2 + 8) = v5;
    *(_BYTE *)(a2 + 16) = v6;
    *(_OWORD *)(a2 + 24) = *(_OWORD *)(v3 + 56);
    *(_DWORD *)(a2 + 40) = v7;
    return (unint64_t)outlined copy of Text.Layout.Line.Line(v4, v5, v6);
  }
  __break(1u);
  return result;
}

void Text.Layout.Line.typographicBounds.getter(float64x2_t *a1@<X8>)
{
  uint64_t v1;
  void *v3;
  uint64_t v4;
  id v5;
  double v6;
  double TypographicBounds;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  CGFloat v13;
  const __CTLine *v14;
  float64x2_t v15;
  CGFloat leading;
  CGFloat descent;
  CGFloat ascent[2];

  ascent[1] = *(CGFloat *)MEMORY[0x24BDAC8D0];
  v3 = *(void **)v1;
  v15 = *(float64x2_t *)(v1 + 24);
  if ((*(_BYTE *)(v1 + 16) & 1) != 0)
  {
    v4 = *(_QWORD *)(v1 + 8);
    v5 = v3;
    objc_msgSend(v5, sel_typographicBounds);
    TypographicBounds = v6;
    v9 = v8;
    objc_msgSend(v5, sel_glyphOrigin);
    v11 = v10;
    outlined consume of Text.Layout.Line.Line(v3, v4, 1);
    v12 = v9 - v11;
    v13 = 0.0;
  }
  else
  {
    v14 = v3;
    descent = 0.0;
    ascent[0] = 0.0;
    leading = 0.0;
    TypographicBounds = CTLineGetTypographicBounds(v14, ascent, &descent, &leading);

    v12 = descent;
    v11 = ascent[0];
    v13 = leading;
  }
  *a1 = vaddq_f64(v15, (float64x2_t)0);
  a1[1].f64[0] = TypographicBounds;
  a1[1].f64[1] = v11;
  a1[2].f64[0] = v12;
  a1[2].f64[1] = v13;
}

void Text.Layout.Run.characterRange.getter()
{
  uint64_t v0;
  void *v1;
  CFRange StringRange;

  v1 = (id)_CTLineGetRunAtIndex(*(const __CTLine **)v0, *(_QWORD *)(v0 + 8));
  StringRange = CTRunGetStringRange((CTRunRef)v1);

  if (__OFADD__(StringRange.location, StringRange.length))
  {
    __break(1u);
    goto LABEL_5;
  }
  if (StringRange.location + StringRange.length < StringRange.location)
LABEL_5:
    __break(1u);
}

void Text.Layout.Run.layoutDirection.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;
  void *v3;
  char Status;

  v3 = (id)_CTLineGetRunAtIndex(*(const __CTLine **)v1, *(_QWORD *)(v1 + 8));
  Status = CTRunGetStatus((CTRunRef)v3);

  *a1 = Status & 1;
}

double Text.Layout.Run.typographicBounds.getter@<D0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  double v3;
  double v4;
  void *v5;
  double result;
  double v7;
  __int128 v8;
  __int128 v9;
  CGFloat v10[2];
  __int128 v11;
  __int128 v12;

  v3 = *(double *)(v1 + 16);
  v4 = *(double *)(v1 + 24);
  v5 = (id)_CTLineGetRunAtIndex(*(const __CTLine **)v1, *(_QWORD *)(v1 + 8));
  specialized Text.Layout.TypographicBounds.init(run:range:)((const __CTRun *)v5, (CFRange)0, v10);

  result = v3 + v10[0];
  v7 = v4 + v10[1];
  v8 = v11;
  v9 = v12;
  *(double *)a1 = v3 + v10[0];
  *(double *)(a1 + 8) = v7;
  *(_OWORD *)(a1 + 16) = v8;
  *(_OWORD *)(a1 + 32) = v9;
  return result;
}

const __CTLine *Text.Layout.Line.characterRanges(runIndices:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  void *v18;
  uint64_t v19;
  void (*v20)(char *, uint64_t);
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  const __CTLine *result;
  CFIndex v26;
  const __CTLine *v28;
  void *v29;
  CFRange StringRange;
  CFIndex v31;
  void (*v32)(uint64_t *, _QWORD);
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  CFIndex location;
  CFIndex v42;

  v34 = a1;
  v36 = a2;
  type metadata accessor for RangeSet<Int>.Ranges(0, &lazy cache variable for type metadata for RangeSet<Int>.Ranges, (uint64_t (*)(_QWORD, _QWORD, _QWORD))MEMORY[0x24BEE4908]);
  v38 = v3;
  v35 = *(uint64_t **)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v33 - v4;
  type metadata accessor for RangeSet<Int>.Ranges(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<Int>, (uint64_t (*)(_QWORD, _QWORD, _QWORD))MEMORY[0x24BEE4968]);
  v7 = v6;
  v8 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)&v33 - v9;
  type metadata accessor for RangeSet<Int><>.IndexSequence(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<Int><>.IndexSequence, (uint64_t (*)(uint64_t, _QWORD, _QWORD, unint64_t))type metadata accessor for RangeSet<>.IndexSequence);
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)&v33 - v12;
  type metadata accessor for RangeSet<Int><>.IndexSequence(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<Int><>.IndexSequence.Iterator, (uint64_t (*)(uint64_t, _QWORD, _QWORD, unint64_t))type metadata accessor for RangeSet<>.IndexSequence.Iterator);
  v15 = v14;
  MEMORY[0x24BDAC7A8](v14);
  v17 = (uint64_t *)((char *)&v33 - v16);
  v18 = *(void **)v2;
  v19 = *(_QWORD *)(v2 + 8);
  v37 = *(unsigned __int8 *)(v2 + 16);
  lazy protocol witness table accessor for type Text.Layout.CharacterIndex and conformance Text.Layout.CharacterIndex();
  RangeSet.init()();
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, v34, v7);
  RangeSet.ranges.getter();
  v20 = *(void (**)(char *, uint64_t))(v8 + 8);
  v21 = v38;
  v20(v10, v7);
  v22 = v35;
  ((void (*)(char *, char *, uint64_t))v35[4])(v13, v5, v21);
  ((void (*)(char *, char *, uint64_t))v22[2])((char *)v17 + *(int *)(v15 + 48), v13, v21);
  *v17 = 0;
  v17[1] = 0;
  outlined destroy of RangeSet<Int><>.IndexSequence((uint64_t)v13, (unint64_t *)&lazy cache variable for type metadata for RangeSet<Int><>.IndexSequence, (uint64_t (*)(uint64_t, _QWORD, _QWORD, unint64_t))type metadata accessor for RangeSet<>.IndexSequence);
  v23 = *v17;
  if (v23 >= RangeSet.Ranges.count.getter())
    return (const __CTLine *)outlined destroy of RangeSet<Int><>.IndexSequence((uint64_t)v17, (unint64_t *)&lazy cache variable for type metadata for RangeSet<Int><>.IndexSequence.Iterator, (uint64_t (*)(uint64_t, _QWORD, _QWORD, unint64_t))type metadata accessor for RangeSet<>.IndexSequence.Iterator);
  v35 = v17;
  v24 = v17[1];
  while (1)
  {
    result = (const __CTLine *)RangeSet.Ranges.subscript.getter();
    v26 = v39 + v24;
    if (__OFADD__(v39, v24))
      break;
    if (__OFADD__(v24++, 1))
      goto LABEL_21;
    result = (const __CTLine *)RangeSet.Ranges.subscript.getter();
    if (__OFSUB__(v40, v39))
      goto LABEL_22;
    if (v24 >= v40 - v39)
    {
      v24 = 0;
      *v35 = ++v23;
    }
    if ((v37 & 1) != 0)
    {
      outlined copy of Text.Layout.Line.Line(v18, v19, 1);
      result = (const __CTLine *)(id)_NSTextLineFragmentGetCTLine(v18);
      if (!result)
        goto LABEL_26;
      v28 = result;
      outlined consume of Text.Layout.Line.Line(v18, v19, 1);
    }
    else
    {
      outlined copy of Text.Layout.Line.Line(v18, v19, 0);
      outlined copy of Text.Layout.Line.Line(v18, v19, 0);

      swift_release();
      v28 = (const __CTLine *)v18;
    }
    v29 = (id)_CTLineGetRunAtIndex(v28, v26);
    StringRange = CTRunGetStringRange((CTRunRef)v29);

    result = (const __CTLine *)swift_release();
    v31 = StringRange.location + StringRange.length;
    if (__OFADD__(StringRange.location, StringRange.length))
      goto LABEL_23;
    if (v31 < StringRange.location)
      goto LABEL_24;
    location = StringRange.location;
    v42 = StringRange.location + StringRange.length;
    if (__OFSUB__(v31, StringRange.location))
      goto LABEL_25;
    if (v31 != StringRange.location)
    {
      type metadata accessor for FontBox<Font.SystemProvider>(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<Text.Layout.CharacterIndex>, (uint64_t (*)(void))lazy protocol witness table accessor for type Text.Layout.CharacterIndex and conformance Text.Layout.CharacterIndex, (uint64_t)&type metadata for Text.Layout.CharacterIndex, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE4968]);
      v32 = (void (*)(uint64_t *, _QWORD))RangeSet._ranges.modify();
      type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for RangeSet<Text.Layout.CharacterIndex>.Ranges, (uint64_t (*)(void))lazy protocol witness table accessor for type Text.Layout.CharacterIndex and conformance Text.Layout.CharacterIndex, (uint64_t)&type metadata for Text.Layout.CharacterIndex, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE4908]);
      RangeSet.Ranges._insert(contentsOf:)();
      v32(&v39, 0);
    }
    if (v23 >= RangeSet.Ranges.count.getter())
    {
      v17 = v35;
      v35[1] = v24;
      return (const __CTLine *)outlined destroy of RangeSet<Int><>.IndexSequence((uint64_t)v17, (unint64_t *)&lazy cache variable for type metadata for RangeSet<Int><>.IndexSequence.Iterator, (uint64_t (*)(uint64_t, _QWORD, _QWORD, unint64_t))type metadata accessor for RangeSet<>.IndexSequence.Iterator);
    }
  }
  __break(1u);
LABEL_21:
  __break(1u);
LABEL_22:
  __break(1u);
LABEL_23:
  __break(1u);
LABEL_24:
  __break(1u);
LABEL_25:
  __break(1u);
LABEL_26:
  __break(1u);
  return result;
}

void Text.Layout.RunSlice.typographicBounds.getter(float64x2_t *a1@<X8>)
{
  uint64_t v1;
  CFIndex v3;
  uint64_t v4;
  float64x2_t v5;
  float64x2_t v6;
  float64x2_t v7;
  void *v8;
  void *v9;
  CFRange v10;
  float64x2_t v11;
  float64x2_t v12[3];

  v3 = *(_QWORD *)(v1 + 48);
  v4 = *(_QWORD *)(v1 + 56);
  v5 = 0uLL;
  v6 = 0uLL;
  v7 = 0uLL;
  if (v3 == v4)
    goto LABEL_4;
  v11 = *(float64x2_t *)(v1 + 16);
  v8 = (id)_CTLineGetRunAtIndex(*(const __CTLine **)v1, *(_QWORD *)(v1 + 8));
  if (!__OFSUB__(v4, v3))
  {
    v9 = v8;
    v10.location = v3;
    v10.length = v4 - v3;
    specialized Text.Layout.TypographicBounds.init(run:range:)((const __CTRun *)v8, v10, v12[0].f64);

    v6 = v12[1];
    v7 = v12[2];
    v5 = vaddq_f64(v11, v12[0]);
LABEL_4:
    *a1 = v5;
    a1[1] = v6;
    a1[2] = v7;
    return;
  }
  __break(1u);
}

void Text.Layout.Run.foregroundColor(_:)(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  CFIndex v6;
  double v7;
  double v8;
  uint64_t v9;
  uint64_t inited;
  void *v13;
  uint64_t v14;
  id v15;
  Class isa;
  uint64_t v17;
  Class v18;
  const __CTLine *v19;
  CFRange StringRange;
  CFRange *v21;
  uint64_t v22;
  void *v23;
  objc_class *v24;
  void *CopyWithAttributeOverrides;
  id v26;
  const __CTLine *v27;
  void *v28;
  double v29;
  double v30;
  int v31;
  id v32;
  id v33;
  double aBlock;
  uint64_t v35;
  uint64_t (*v36)(uint64_t, uint64_t, uint64_t);
  void *v37;
  uint64_t (*v38)();
  uint64_t v39;

  v6 = *(_QWORD *)(v4 + 8);
  v8 = *(double *)(v4 + 16);
  v7 = *(double *)(v4 + 24);
  v9 = *(_QWORD *)(v4 + 40);
  v33 = *(id *)v4;
  if ((a3 & 1) != 0)
  {
    v31 = *(_DWORD *)(v4 + 32);
    *(_QWORD *)a4 = *(_QWORD *)v4;
    *(_QWORD *)(a4 + 8) = v6;
    *(double *)(a4 + 16) = v8;
    *(double *)(a4 + 24) = v7;
    *(_DWORD *)(a4 + 32) = v31;
    *(_QWORD *)(a4 + 40) = v9;
    swift_retain();
    v32 = v33;
  }
  else
  {
    _s10Foundation4DateVSgMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<(CFStringRef, CGColorRef)>, 255, (uint64_t (*)(uint64_t))type metadata accessor for (CFStringRef, CGColorRef), (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_23527E860;
    v13 = (void *)*MEMORY[0x24BDC4EE0];
    *(_QWORD *)(inited + 32) = *MEMORY[0x24BDC4EE0];
    v14 = one-time initialization token for cache;
    v15 = v13;
    if (v14 != -1)
      swift_once();
    *(_QWORD *)(inited + 40) = specialized ObjectCache.subscript.getter(*(float *)&a1, *((float *)&a1 + 1), *(float *)&a2, *((float *)&a2 + 1));
    specialized Dictionary.init(dictionaryLiteral:)(inited);
    type metadata accessor for CFStringRef(0);
    type metadata accessor for CGColorRef(0);
    lazy protocol witness table accessor for type AnyTextSizingModifier and conformance AnyTextSizingModifier((unint64_t *)&lazy protocol witness table cache variable for type CFStringRef and conformance CFStringRef, 255, (uint64_t (*)(uint64_t))type metadata accessor for CFStringRef, (uint64_t)&protocol conformance descriptor for CFStringRef);
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>, MEMORY[0x24BEE4AD0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
    v17 = swift_allocObject();
    *(_OWORD *)(v17 + 16) = xmmword_235283250;
    *(_QWORD *)(v17 + 32) = (id)_CTLineGetRunAtIndex((const __CTLine *)v33, v6);
    specialized Array._endMutation()();
    type metadata accessor for CTRunRef(0);
    v18 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    v19 = (const __CTLine *)CTLineCreateWithRunArray();

    StringRange = CTLineGetStringRange(v19);
    v21 = (CFRange *)swift_allocObject();
    v21[1] = StringRange;
    v21[2].location = (CFIndex)isa;
    v22 = swift_allocObject();
    *(_QWORD *)(v22 + 16) = _s7SwiftUI4TextV6LayoutV3RunVAAE15foregroundColoryAgA0G0V8ResolvedVSgFs9UnmanagedVySo15CFDictionaryRefaGSgSi_SpySo7CFRangeaGtXEfU_TA_0;
    *(_QWORD *)(v22 + 24) = v21;
    v38 = partial apply for thunk for @callee_guaranteed (@guaranteed RBDisplayList) -> ();
    v39 = v22;
    aBlock = MEMORY[0x24BDAC760];
    v35 = 1107296256;
    v36 = thunk for @escaping @callee_guaranteed (@unowned Int, @unowned UnsafeMutablePointer<CFRange>) -> (@unowned Unmanaged<CFDictionaryRef>?);
    v37 = &block_descriptor_26;
    v23 = _Block_copy(&aBlock);
    v24 = isa;
    swift_retain();
    swift_release();
    CopyWithAttributeOverrides = (void *)CTLineCreateCopyWithAttributeOverrides();
    _Block_release(v23);
    LOBYTE(v23) = swift_isEscapingClosureAtFileLocation();
    swift_release();
    if ((v23 & 1) != 0)
    {
      __break(1u);
    }
    else
    {
      swift_retain();
      v26 = CopyWithAttributeOverrides;
      v27 = (const __CTLine *)v33;
      v28 = (id)_CTLineGetRunAtIndex(v27, v6);
      specialized Text.Layout.TypographicBounds.init(run:range:)((const __CTRun *)v28, (CFRange)0, &aBlock);
      swift_release();

      v29 = v8 + aBlock;
      v30 = v7 + *(double *)&v35;
      outlined copy of Text.Layout.Line.Line(v26, 0, 0);
      swift_release();

      *(_QWORD *)a4 = v26;
      *(_QWORD *)(a4 + 8) = 0;
      *(double *)(a4 + 16) = v29;
      *(double *)(a4 + 24) = v30;
      *(_DWORD *)(a4 + 32) = 0;
      *(_QWORD *)(a4 + 40) = 0;
    }
  }
}

__n128 Text.Layout.RunSlice.foregroundColor(_:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, __n128 *a4@<X8>)
{
  uint64_t v4;
  unint64_t v6;
  void *v7;
  unint64_t v8;
  unint64_t v9;
  unsigned __int32 v10;
  unint64_t v11;
  id v12;
  __n128 result;
  __n128 v14;
  _QWORD v15[4];
  unsigned __int32 v16;
  unint64_t v17;

  v7 = *(void **)v4;
  v6 = *(_QWORD *)(v4 + 8);
  v8 = *(_QWORD *)(v4 + 16);
  v9 = *(_QWORD *)(v4 + 24);
  v10 = *(_DWORD *)(v4 + 32);
  v11 = *(_QWORD *)(v4 + 40);
  v14 = *(__n128 *)(v4 + 48);
  if ((a3 & 1) != 0)
  {
    swift_retain();
    v12 = v7;
  }
  else
  {
    Text.Layout.Run.foregroundColor(_:)(a1, a2, 0, (uint64_t)v15);
    v12 = (id)v15[0];
    v6 = v15[1];
    v8 = v15[2];
    v9 = v15[3];
    v10 = v16;
    v11 = v17;
  }
  a4->n128_u64[0] = (unint64_t)v12;
  a4->n128_u64[1] = v6;
  a4[1].n128_u64[0] = v8;
  a4[1].n128_u64[1] = v9;
  a4[2].n128_u32[0] = v10;
  a4[2].n128_u64[1] = v11;
  result = v14;
  a4[3] = v14;
  return result;
}

CGPoint *Text.Layout.RunSlice.positions.getter()
{
  CGPoint *v0;
  float64x2_t *v1;
  uint64_t v2;
  float64x2_t v3;
  float64x2_t v4;
  int64_t v5;
  CGPoint *v6;
  int64_t v7;
  float64x2_t v8;
  uint64_t v9;
  CGFloat x;
  float64x2_t v11;
  unint64_t v12;
  CGPoint v13;
  float64x2_t v15;
  float64x2_t v16;
  CGPoint *v17[2];
  float64x2_t v18;
  float64x2_t v19;
  float64x2_t v20;
  float64x2_t v21;

  v3 = v1[1];
  v18 = *v1;
  v19 = v3;
  v4 = v1[3];
  v20 = v1[2];
  v21 = v4;
  v5 = *(_QWORD *)&v4.f64[1] - *(_QWORD *)&v4.f64[0];
  if (*(uint64_t *)&v4.f64[1] < *(uint64_t *)&v4.f64[0])
  {
    __break(1u);
    goto LABEL_14;
  }
  if (__OFSUB__(*(_QWORD *)&v4.f64[1], *(_QWORD *)&v4.f64[0]))
  {
LABEL_14:
    __break(1u);
LABEL_15:
    v2 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()((_QWORD *)v2);
    goto LABEL_5;
  }
  v0 = (CGPoint *)MEMORY[0x24BEE4AF8];
  if (v5 < 1)
    return v0;
  v2 = specialized Array.init(repeating:count:)(v5, 0.0, 0.0);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    goto LABEL_15;
LABEL_5:
  v6 = *(CGPoint **)(v2 + 16);
  v17[0] = (CGPoint *)(v2 + 32);
  v17[1] = v6;
  closure #1 in Text.Layout.RunSlice.positions.getter(v17, (uint64_t)&v18);
  v7 = *(_QWORD *)(v2 + 16);
  if (v7)
  {
    v16 = v19;
    v17[0] = v0;
    swift_bridgeObjectRetain();
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v7, 0);
    v8 = v16;
    v9 = 0;
    v0 = v17[0];
    x = v17[0][1].x;
    do
    {
      v11 = *(float64x2_t *)(v2 + 16 * v9 + 32);
      v17[0] = v0;
      v12 = *(_QWORD *)&v0[1].y;
      if (*(_QWORD *)&x >= v12 >> 1)
      {
        v15 = v11;
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v12 > 1, *(_QWORD *)&x + 1, 1);
        v11 = v15;
        v8 = v16;
        v0 = v17[0];
      }
      *(_QWORD *)&v13.x = *(_OWORD *)&vaddq_f64(v8, v11);
      v13.y = vsubq_f64(v8, v11).f64[1];
      ++v9;
      *(_QWORD *)&v0[1].x = *(_QWORD *)&x + 1;
      v0[(*(_QWORD *)&x)++ + 2] = v13;
    }
    while (v7 != v9);
    swift_bridgeObjectRelease_n();
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  return v0;
}

uint64_t Text.customAttribute<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, _QWORD *a5, uint64_t a6)
{
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  uint64_t v23;

  v12 = *(_QWORD *)(a6 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v14 = (char *)&v23 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for TextAttributeModifier(0, v16, v17, v15);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, a1, a6);
  v18 = swift_allocObject();
  (*(void (**)(uint64_t, char *))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v18 + 128) - 8) + 32))(v18 + *(_QWORD *)(*(_QWORD *)v18 + 144), v14);
  outlined copy of Text.Storage(a2, a3, a4 & 1);
  swift_bridgeObjectRetain();
  swift_retain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    a5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a5[2] + 1, 1, a5);
  v20 = a5[2];
  v19 = a5[3];
  if (v20 >= v19 >> 1)
    a5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v19 > 1), v20 + 1, 1, a5);
  a5[2] = v20 + 1;
  v21 = &a5[2 * v20];
  v21[4] = v18;
  *((_BYTE *)v21 + 40) = -64;
  swift_release();
  return a2;
}

uint64_t Text.Layout.Run.subscript.getter@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v3;
  void *v7;
  CFIndex v8;
  const __CTLine *v9;
  void *v10;
  uint64_t v11;
  void *v12;
  const __CFDictionary *v13;
  _OWORD v15[2];
  _QWORD v16[4];

  v7 = *(void **)v3;
  v8 = *(_QWORD *)(v3 + 8);
  if (one-time initialization token for customAttributes != -1)
    swift_once();
  swift_retain();
  v9 = v7;
  v10 = (id)_CTLineGetRunAtIndex(v9, v8);
  v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v12 = (void *)MEMORY[0x23B7C5DAC](v11);
  swift_bridgeObjectRelease();
  v13 = _CTRunGetAttributeValueForKey((const __CTRun *)v10, v12);

  if (v13)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v15, 0, sizeof(v15));
  }
  outlined init with take of AccessibilityDataSeriesConfiguration.AxisConfiguration?((uint64_t)v15, (uint64_t)v16, (unint64_t *)&lazy cache variable for type metadata for Any?, MEMORY[0x24BEE4AD8] + 8);
  swift_release();

  if (v16[3])
  {
    if ((swift_dynamicCast() & 1) != 0)
    {
      v16[0] = *(_QWORD *)&v15[0];
      Text.CustomAttributes.subscript.getter(a1, a2, a3);
      return swift_bridgeObjectRelease();
    }
  }
  else
  {
    outlined destroy of Any?((uint64_t)v16);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 56))(a3, 1, 1, a1);
}

Class Text.Layout.Line.lastRunAttributes.getter()
{
  __int128 *v0;
  __int128 v1;
  void *v2;
  id v3;
  id v4;
  NSDictionary v5;
  const __CTLine *v6;
  void *v7;
  const __CTLine *v9[2];
  __int128 v10;
  _OWORD v11[2];

  v1 = v0[1];
  v10 = *v0;
  v11[0] = v1;
  *(_OWORD *)((char *)v11 + 12) = *(__int128 *)((char *)v0 + 28);
  if (v1 == 1)
  {
    v2 = (void *)v10;
    outlined retain of Text.Layout.Line((uint64_t)&v10);
    v3 = objc_msgSend(v2, sel_attributedString);
    v4 = objc_msgSend(v3, sel_attributesAtIndex_effectiveRange_, objc_msgSend(v2, sel_characterRange), 0);

    type metadata accessor for NSAttributedStringKey(0);
    lazy protocol witness table accessor for type AnyTextSizingModifier and conformance AnyTextSizingModifier(&lazy protocol witness table cache variable for type NSAttributedStringKey and conformance NSAttributedStringKey, 255, (uint64_t (*)(uint64_t))type metadata accessor for NSAttributedStringKey, (uint64_t)&protocol conformance descriptor for NSAttributedStringKey);
    static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

    v5.super.isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    outlined release of Text.Layout.Line((uint64_t)&v10);
  }
  else
  {
    outlined retain of Text.Layout.Line((uint64_t)&v10);
    specialized BidirectionalCollection.last.getter((uint64_t)v9);
    outlined release of Text.Layout.Line((uint64_t)&v10);
    v6 = v9[0];
    if (v9[0])
    {
      v7 = (id)_CTLineGetRunAtIndex(v9[0], (CFIndex)v9[1]);
      v5.super.isa = CTRunGetAttributes((CTRunRef)v7);

      outlined consume of Text.Layout.Run?(v6);
    }
    else
    {
      return 0;
    }
  }
  return v5.super.isa;
}

uint64_t TextRenderer.sizeThatFits(proposal:text:)(uint64_t a1, char a2, uint64_t a3, char a4, uint64_t *a5, __n128 a6, __n128 a7)
{
  return specialized TextRenderer.sizeThatFits(proposal:text:)(a1, a2 & 1, a3, a4 & 1, a5, a6, a7);
}

double TextRenderer.displayPadding.getter()
{
  return 0.0;
}

uint64_t TextProxy.sizeThatFits(_:)(uint64_t result, char a2, uint64_t a3, char a4, __n128 a5, __n128 a6)
{
  uint64_t *v6;
  double v10;
  uint64_t v11;
  char v12;
  char v13;
  double v14;
  char v15;
  uint64_t v16;
  char v17;

  v10 = *(double *)&result;
  v11 = *v6;
  if (one-time initialization token for zero != -1)
    *(double *)&result = COERCE_DOUBLE(swift_once());
  v12 = byte_2561B6188;
  a5.n128_u64[0] = qword_2561B6190;
  v13 = byte_2561B6198;
  if ((a2 & 1) != 0)
  {
    if (!byte_2561B6188)
      goto LABEL_15;
  }
  else
  {
    a6.n128_u64[0] = static ProposedViewSize.zero;
    if (*(double *)&static ProposedViewSize.zero != v10)
      v12 = 1;
    if ((v12 & 1) != 0)
      goto LABEL_15;
  }
  if ((a4 & 1) != 0)
  {
    a5.n128_u64[0] = 0;
    a6.n128_u64[0] = 0;
    if ((byte_2561B6198 & 1) == 0)
    {
LABEL_15:
      v14 = v10;
      v15 = a2 & 1;
      v16 = a3;
      v17 = a4 & 1;
      *(double *)&result = COERCE_DOUBLE((*(uint64_t (**)(double *, __n128, __n128))(*(_QWORD *)v11 + 224))(&v14, a5, a6));
    }
  }
  else
  {
    if (*(double *)&qword_2561B6190 != *(double *)&a3)
      v13 = 1;
    a5.n128_u64[0] = 0;
    a6.n128_u64[0] = 0;
    if ((v13 & 1) != 0)
      goto LABEL_15;
  }
  return result;
}

void TextAttributeModifierBase.hash(into:)()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t static TextAttributeModifierBase.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 96))(a2) & 1;
}

uint64_t TextAttributeModifierBase.deinit()
{
  uint64_t v0;

  return v0;
}

Swift::Int TextAttributeModifierBase.hashValue.getter()
{
  uint64_t v0;
  _BYTE v2[72];

  Hasher.init(_seed:)();
  (*(void (**)(_BYTE *))(*(_QWORD *)v0 + 112))(v2);
  return Hasher._finalize()();
}

uint64_t TextAttributeModifier.modify(style:environment:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;

  v1 = (_QWORD *)(a1 + *(int *)(type metadata accessor for Text.Style(0) + 88));
  v2 = swift_retain();
  MEMORY[0x23B7C61A8](v2);
  if (*(_QWORD *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  return specialized Array._endMutation()();
}

uint64_t one-time initialization function for customAttributes()
{
  uint64_t result;

  result = MEMORY[0x23B7C5DAC](0xD000000000000018, 0x80000002352E39B0);
  static NSAttributedStringKey.customAttributes = result;
  return result;
}

void Text.CustomAttributes.init()(_QWORD *a1@<X8>)
{
  *a1 = MEMORY[0x24BEE4AF8];
}

uint64_t Text.CustomAttributes.add<A>(_:)(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  v5 = *(_QWORD *)(a2 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for TextAttributeModifier(0, v8, v9, v10);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a1, a2);
  v11 = swift_allocObject();
  v12 = (*(uint64_t (**)(uint64_t, char *))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v11 + 128) - 8) + 32))(v11 + *(_QWORD *)(*(_QWORD *)v11 + 144), v7);
  MEMORY[0x23B7C61A8](v12);
  if (*(_QWORD *)((*v2 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((*v2 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  return specialized Array._endMutation()();
}

uint64_t Text.CustomAttributes.subscript.getter@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t *v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v7 = *v3;
  if ((unint64_t)*v3 >> 62)
    goto LABEL_20;
  v8 = *(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v8; v8 = _CocoaArrayWrapper.endIndex.getter())
  {
    if ((v7 & 0xC000000000000001) != 0)
    {
      v10 = 0;
      while (1)
      {
        MEMORY[0x23B7C6D9C](v10, v7);
        v12 = v10 + 1;
        if (__OFADD__(v10, 1))
          break;
        type metadata accessor for TextAttributeModifier(0, a1, a2, v11);
        v13 = swift_dynamicCastClass();
        if (v13)
        {
          v19 = v13;
          swift_bridgeObjectRelease();
          v17 = *(_QWORD *)(a1 - 8);
          (*(void (**)(uint64_t, uint64_t, uint64_t))(v17 + 16))(a3, v19 + *(_QWORD *)(*(_QWORD *)v19 + 144), a1);
          swift_unknownObjectRelease();
          goto LABEL_16;
        }
        swift_unknownObjectRelease();
        ++v10;
        if (v12 == v8)
          goto LABEL_13;
      }
      __break(1u);
    }
    else
    {
      v14 = 0;
      while (1)
      {
        v15 = v14 + 1;
        if (__OFADD__(v14, 1))
          break;
        type metadata accessor for TextAttributeModifier(0, a1, a2, v9);
        v16 = swift_dynamicCastClass();
        if (v16)
        {
          v20 = v16;
          swift_retain();
          swift_bridgeObjectRelease();
          v17 = *(_QWORD *)(a1 - 8);
          (*(void (**)(uint64_t, uint64_t, uint64_t))(v17 + 16))(a3, v20 + *(_QWORD *)(*(_QWORD *)v20 + 144), a1);
          swift_release();
LABEL_16:
          v18 = 0;
          return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v17 + 56))(a3, v18, 1, a1);
        }
        ++v14;
        if (v15 == v8)
          goto LABEL_13;
      }
    }
    __break(1u);
LABEL_20:
    swift_bridgeObjectRetain();
  }
LABEL_13:
  swift_bridgeObjectRelease();
  v17 = *(_QWORD *)(a1 - 8);
  v18 = 1;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v17 + 56))(a3, v18, 1, a1);
}

void Text.CustomAttributes.hash(into:)(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  Swift::UInt v4;
  uint64_t v5;
  uint64_t i;
  uint64_t v7;
  Swift::UInt v8;

  v3 = *v1;
  if (!((unint64_t)*v1 >> 62))
  {
    v4 = *(_QWORD *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    Hasher._combine(_:)(v4);
    v5 = *(_QWORD *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v5)
      goto LABEL_3;
LABEL_10:
    swift_bridgeObjectRelease();
    return;
  }
  swift_bridgeObjectRetain_n();
  v8 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  Hasher._combine(_:)(v8);
  swift_bridgeObjectRetain();
  v5 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v5)
    goto LABEL_10;
LABEL_3:
  if (v5 >= 1)
  {
    for (i = 0; i != v5; ++i)
    {
      if ((v3 & 0xC000000000000001) != 0)
      {
        v7 = MEMORY[0x23B7C6D9C](i, v3);
      }
      else
      {
        v7 = *(_QWORD *)(v3 + 8 * i + 32);
        swift_retain();
      }
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 112))(a1);
      swift_release();
    }
    goto LABEL_10;
  }
  __break(1u);
}

uint64_t static Text.CustomAttributes.== infix(_:_:)(_QWORD *a1, _QWORD *a2)
{
  return specialized static Array<A>.== infix(_:_:)(*a1, *a2);
}

void Text.CustomAttributes.hashValue.getter()
{
  unint64_t *v0;
  unint64_t v1;
  Swift::UInt v2;
  uint64_t v3;
  uint64_t i;
  uint64_t v5;
  Swift::UInt v6;
  _BYTE v7[72];

  v1 = *v0;
  Hasher.init(_seed:)();
  if (!(v1 >> 62))
  {
    v2 = *(_QWORD *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    Hasher._combine(_:)(v2);
    v3 = *(_QWORD *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v3)
      goto LABEL_3;
LABEL_10:
    swift_bridgeObjectRelease();
    Hasher._finalize()();
    return;
  }
  swift_bridgeObjectRetain();
  v6 = _CocoaArrayWrapper.endIndex.getter();
  Hasher._combine(_:)(v6);
  swift_bridgeObjectRetain();
  v3 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v3)
    goto LABEL_10;
LABEL_3:
  if (v3 >= 1)
  {
    for (i = 0; i != v3; ++i)
    {
      if ((v1 & 0xC000000000000001) != 0)
      {
        v5 = MEMORY[0x23B7C6D9C](i, v1);
      }
      else
      {
        v5 = *(_QWORD *)(v1 + 8 * i + 32);
        swift_retain();
      }
      (*(void (**)(_BYTE *))(*(_QWORD *)v5 + 112))(v7);
      swift_release();
    }
    goto LABEL_10;
  }
  __break(1u);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Text.CustomAttributes()
{
  _BYTE v1[72];

  Hasher.init(_seed:)();
  Text.CustomAttributes.hash(into:)((uint64_t)v1);
  return Hasher._finalize()();
}

uint64_t _TextRendererViewModifier.renderer.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8) + 16))(a2, v2);
}

uint64_t _TextRendererViewModifier.renderer.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 40))(v2, a1);
}

uint64_t (*_TextRendererViewModifier.renderer.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t static _TextRendererViewModifier._makeViewInputs(modifier:inputs:)(int *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t TextRenderer;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD v23[2];
  unsigned int v24;
  _BYTE v25[16];
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  uint64_t v35;

  v35 = *MEMORY[0x24BDAC8D0];
  v7 = *a1;
  v28 = a3;
  v29 = a4;
  LODWORD(v30) = v7;
  v8 = type metadata accessor for _TextRendererViewModifier(255, a3, a4, a4);
  type metadata accessor for _GraphValue(0, v8, v9, v10);
  _GraphValue.subscript.getter((void (*)(uint64_t))partial apply for closure #1 in static _TextRendererViewModifier._makeViewInputs(modifier:inputs:), a3, &v24);
  v11 = *(_DWORD *)(a2 + 8);
  v12 = *(_QWORD *)(a2 + 16);
  v13 = *(_QWORD *)(a2 + 40);
  v30 = *(_QWORD *)a2;
  v31 = v11;
  v32 = v12;
  v33 = *(_OWORD *)(a2 + 24);
  v34 = v13;
  (*(void (**)(unsigned int *, uint64_t *, uint64_t))(*(_QWORD *)(a4 + 8) + 48))(&v24, &v30, a3);
  v14 = v24;
  swift_beginAccess();
  v23[0] = _TextRendererViewModifier.MakeTextRenderer.init(renderer:environment:)(v14, *(unsigned int *)(v12 + 16));
  v23[1] = v15;
  TextRenderer = type metadata accessor for _TextRendererViewModifier.MakeTextRenderer(0, a3, a4, v16);
  v26 = TextRenderer;
  v27 = MEMORY[0x23B7C9C04](&protocol conformance descriptor for _TextRendererViewModifier<A>.MakeTextRenderer, TextRenderer);
  _s10Foundation4DateVSgMaTm_0(0, &lazy cache variable for type metadata for Attribute<TextRendererBoxBase>, v18, (uint64_t (*)(uint64_t))type metadata accessor for TextRendererBoxBase, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BE095F0]);
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v23, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA12StatefulRuleRd__lufcADSPyqd__GXEfU_TA_9, (uint64_t)v25, TextRenderer, MEMORY[0x24BEE4078], v19, MEMORY[0x24BEE40A8], v20);
  swift_release();
  v21 = AGCreateWeakAttribute();
  swift_retain();
  specialized closure #1 in PropertyList.subscript.setter((uint64_t *)a2, v21);
  return swift_release();
}

uint64_t closure #1 in static _TextRendererViewModifier._makeViewInputs(modifier:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[6];

  v9[2] = type metadata accessor for _TextRendererViewModifier(0, a2, a3, a4);
  v9[3] = a2;
  v6 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(a1, (uint64_t)partial apply for closure #1 in static PointerOffset.of(_:), (uint64_t)v9, a2, MEMORY[0x24BEE4078], v6, MEMORY[0x24BEE40A8], v7);
  return v9[5];
}

unint64_t _TextRendererViewModifier.MakeTextRenderer.init(renderer:environment:)(unsigned int a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  type metadata accessor for PropertyList.Tracker();
  v4 = swift_allocObject();
  type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for AtomicBuffer<TrackerData>, (uint64_t)&type metadata for TrackerData, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for AtomicBuffer);
  v5 = swift_allocObject();
  *(_DWORD *)(v5 + 16) = 0;
  v6 = MEMORY[0x24BEE4B00];
  *(_QWORD *)(v5 + 24) = 0;
  *(_QWORD *)(v5 + 32) = v6;
  v7 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v5 + 40) = v6;
  *(_QWORD *)(v5 + 48) = v7;
  *(_BYTE *)(v5 + 56) = 0;
  *(_QWORD *)(v4 + 16) = v5;
  return a1 | (unint64_t)(a2 << 32);
}

uint64_t _TextRendererViewModifier.MakeTextRenderer.updateValue()(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t TupleTypeMetadata2;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t Value;
  char v14;
  char v15;
  void (*v16)(char *, uint64_t, uint64_t);
  char v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  char v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  v3 = *(_QWORD *)(a1 + 16);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v28 = *(_QWORD *)(TupleTypeMetadata2 - 8);
  MEMORY[0x24BDAC7A8](TupleTypeMetadata2);
  v6 = (char *)&v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v27 - v8;
  v11 = *(int *)(v10 + 48);
  v12 = *(_QWORD *)(v1 + 8);
  v27 = *(_QWORD *)(a1 + 24);
  Value = AGGraphGetValue();
  v15 = v14;
  v16 = *(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16);
  v16(v9, Value, v3);
  v9[v11] = v15 & 1;
  v18 = *(_QWORD *)AGGraphGetValue();
  if ((v15 & 1) != 0)
  {
    swift_retain();
    swift_retain();
  }
  else
  {
    v19 = v17;
    swift_retain();
    swift_retain();
    if ((v19 & 1) == 0
      || (v20 = swift_retain(),
          v21 = PropertyList.Tracker.hasDifferentUsedValues(_:)(v20),
          swift_release(),
          (v21 & 1) == 0))
    {
      (*(void (**)(char *, uint64_t))(v28 + 8))(v9, TupleTypeMetadata2);
      swift_release();
      return swift_release();
    }
  }
  PropertyList.Tracker.reset()();
  v16(v6, (uint64_t)v9, v3);
  if (v18)
    v24 = *(_QWORD *)(v18 + 64);
  else
    v24 = 0;
  type metadata accessor for TextRendererBox(0, v3, v27, v23);
  v25 = *(_QWORD *)(v12 + 16);
  swift_retain_n();
  swift_retain_n();
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v25 + 16));
  *(_QWORD *)(v25 + 24) = v24;
  os_unfair_lock_unlock((os_unfair_lock_t)(v25 + 16));
  swift_release();
  swift_release();
  swift_release();
  v26 = (char *)swift_allocObject();
  (*(void (**)(char *, char *))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v26 + 120) - 8) + 32))(&v26[*(_QWORD *)(*(_QWORD *)v26 + 136)], v6);
  *((_QWORD *)v26 + 2) = v18;
  *((_QWORD *)v26 + 3) = v12;
  v29 = v26;
  type metadata accessor for TextRendererBoxBase();
  AGGraphSetOutputValue();
  swift_release();
  swift_release();
  swift_release();
  return (*(uint64_t (**)(char *, uint64_t))(v28 + 8))(v9, TupleTypeMetadata2);
}

char *TextRendererBox.__allocating_init(_:in:)(uint64_t a1, uint64_t *a2)
{
  char *v4;
  uint64_t v5;
  uint64_t v6;

  v4 = (char *)swift_allocObject();
  v6 = *a2;
  v5 = a2[1];
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v4 + 120) - 8) + 32))(&v4[*(_QWORD *)(*(_QWORD *)v4 + 136)], a1);
  *((_QWORD *)v4 + 2) = v6;
  *((_QWORD *)v4 + 3) = v5;
  return v4;
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance _TextRendererViewModifier<A>.MakeTextRenderer(uint64_t a1)
{
  MEMORY[0x23B7C9C04](&protocol conformance descriptor for _TextRendererViewModifier<A>.MakeTextRenderer, a1);
  return static AsyncAttribute.flags.getter();
}

uint64_t protocol witness for static ViewInputsModifier._makeViewInputs(modifier:inputs:) in conformance _TextRendererViewModifier<A>(int *a1, uint64_t a2, uint64_t a3)
{
  return static _TextRendererViewModifier._makeViewInputs(modifier:inputs:)(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24));
}

void TextRendererBoxBase.draw(layout:in:)()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void TextRendererBoxBase.sizeThatFits(proposal:text:)()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void TextRendererBoxBase.displayPadding.getter()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t TextRendererBoxBase.deinit()
{
  uint64_t v0;

  swift_release();
  swift_release();
  return v0;
}

uint64_t TextRendererBoxBase.__deallocating_deinit()
{
  swift_release();
  swift_release();
  return swift_deallocClassInstance();
}

uint64_t TextRendererBox.draw(layout:in:)(uint64_t *a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  char v9;
  uint64_t v10;

  v3 = *v2;
  v4 = *((_BYTE *)a1 + 8);
  v5 = a1[2];
  v6 = *(_QWORD *)(*v2 + 128);
  v8 = *a1;
  v9 = v4;
  v10 = v5;
  return (*(uint64_t (**)(uint64_t *, uint64_t, _QWORD))(v6 + 16))(&v8, a2, *(_QWORD *)(v3 + 120));
}

uint64_t TextRendererBox.sizeThatFits(proposal:text:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)(*(_QWORD *)v0 + 128) + 24))();
}

uint64_t TextRendererBox.displayPadding.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD))(*(_QWORD *)(*(_QWORD *)v0 + 128) + 32))(*(_QWORD *)(*(_QWORD *)v0 + 120));
}

uint64_t *TextRendererBox.deinit()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_release();
  swift_release();
  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v1 + 120) - 8) + 8))((uint64_t)v0 + *(_QWORD *)(*v0 + 136));
  return v0;
}

uint64_t TextRendererBox.__deallocating_deinit()
{
  TextRendererBox.deinit();
  return swift_deallocClassInstance();
}

double protocol witness for static PropertyKey.defaultValue.getter in conformance TextRendererInput@<D0>(_QWORD *a1@<X8>)
{
  double result;

  if (one-time initialization token for defaultValue != -1)
    swift_once();
  result = *(double *)&static TextRendererInput.defaultValue;
  *a1 = static TextRendererInput.defaultValue;
  return result;
}

uint64_t Text.Layout.isTruncated.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 8);
}

uint64_t Text.Layout.numberOfLines.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 16);
}

uint64_t Text.Layout.endIndex.getter()
{
  uint64_t v0;

  return *(_QWORD *)(*(_QWORD *)v0 + 16);
}

uint64_t Text.Layout.CharacterIndex.value.setter(uint64_t result)
{
  _QWORD *v1;

  *v1 = result;
  return result;
}

uint64_t (*Text.Layout.CharacterIndex.value.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

void Text.Layout.CharacterIndex.hash(into:)(int a1, Swift::UInt a2)
{
  Hasher._combine(_:)(a2);
}

Swift::Int Text.Layout.CharacterIndex.hashValue.getter(Swift::UInt a1)
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1);
  return Hasher._finalize()();
}

_QWORD *protocol witness for Strideable.distance(to:) in conformance Text.Layout.CharacterIndex@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;

  if (__OFSUB__(*result, *v2))
    __break(1u);
  else
    *a2 = *result - *v2;
  return result;
}

_QWORD *protocol witness for Strideable.advanced(by:) in conformance Text.Layout.CharacterIndex@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;

  if (__OFADD__(*v2, *result))
    __break(1u);
  else
    *a2 = *v2 + *result;
  return result;
}

_QWORD *protocol witness for static Strideable._step(after:from:by:) in conformance Text.Layout.CharacterIndex(_QWORD *result, uint64_t a2, uint64_t a3, _QWORD *a4, uint64_t a5, _QWORD *a6)
{
  if (__OFADD__(*a4, *a6))
  {
    __break(1u);
  }
  else
  {
    *result = *a4 + *a6;
    return 0;
  }
  return result;
}

_QWORD *protocol witness for static Equatable.== infix(_:_:) in conformance Text.Layout.CharacterIndex(_QWORD *result, _QWORD *a2)
{
  if (!__OFSUB__(*a2, *result))
    return (_QWORD *)(*a2 == *result);
  __break(1u);
  return result;
}

double Text.Layout.TypographicBounds.origin.getter()
{
  uint64_t v0;

  return *(double *)v0;
}

void Text.Layout.TypographicBounds.origin.setter(double a1, double a2)
{
  double *v2;

  *v2 = a1;
  v2[1] = a2;
}

uint64_t (*Text.Layout.TypographicBounds.origin.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

double Text.Layout.TypographicBounds.width.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 16);
}

void Text.Layout.TypographicBounds.width.setter(double a1)
{
  uint64_t v1;

  *(double *)(v1 + 16) = a1;
}

uint64_t (*Text.Layout.TypographicBounds.width.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

double Text.Layout.TypographicBounds.ascent.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 24);
}

void Text.Layout.TypographicBounds.ascent.setter(double a1)
{
  uint64_t v1;

  *(double *)(v1 + 24) = a1;
}

uint64_t (*Text.Layout.TypographicBounds.ascent.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

double Text.Layout.TypographicBounds.descent.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 32);
}

void Text.Layout.TypographicBounds.descent.setter(double a1)
{
  uint64_t v1;

  *(double *)(v1 + 32) = a1;
}

uint64_t (*Text.Layout.TypographicBounds.descent.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

double Text.Layout.TypographicBounds.leading.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 40);
}

void Text.Layout.TypographicBounds.leading.setter(double a1)
{
  uint64_t v1;

  *(double *)(v1 + 40) = a1;
}

uint64_t (*Text.Layout.TypographicBounds.leading.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

BOOL static Text.Layout.TypographicBounds.== infix(_:_:)(double *a1, double *a2)
{
  return *a1 == *a2 && a1[1] == a2[1] && a1[2] == a2[2] && a1[3] == a2[3] && a1[4] == a2[4] && a1[5] == a2[5];
}

double Text.Layout.Line.origin.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 24);
}

void Text.Layout.Line.origin.setter(double a1, double a2)
{
  uint64_t v2;

  *(double *)(v2 + 24) = a1;
  *(double *)(v2 + 32) = a2;
}

uint64_t (*Text.Layout.Line.origin.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t Text.Layout.Line.drawingOptions.getter()
{
  uint64_t v0;

  return *(unsigned int *)(v0 + 40);
}

uint64_t Text.Layout.Line.drawingOptions.setter(uint64_t result)
{
  uint64_t v1;

  *(_DWORD *)(v1 + 40) = result;
  return result;
}

uint64_t (*Text.Layout.Line.drawingOptions.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

const __CFArray *Text.Layout.Line.endIndex.getter()
{
  uint64_t v0;
  void *v1;
  const __CFArray *result;
  const __CFArray *RunCount;

  v1 = *(void **)v0;
  if ((*(_BYTE *)(v0 + 16) & 1) == 0)
  {
    outlined copy of Text.Layout.Line.Line(v1, *(_QWORD *)(v0 + 8), 0);
    swift_release();
    goto LABEL_5;
  }
  result = (const __CFArray *)(id)_NSTextLineFragmentGetCTLine(*(void **)v0);
  v1 = result;
  if (result)
  {
LABEL_5:
    RunCount = _CTLineGetRunCount((const __CTLine *)v1);

    return RunCount;
  }
  return result;
}

const __CTLine *Text.Layout.Line.characterRanges(runIndices:)(CFIndex a1, CFIndex a2)
{
  uint64_t v2;
  void *v5;
  uint64_t v6;
  char v7;
  const __CTLine *result;
  const __CTLine *v9;
  void *v10;
  CFRange StringRange;
  CFIndex v12;
  uint64_t (*v13)(_BYTE *, _QWORD);
  _BYTE v14[32];
  CFIndex location;
  CFIndex v16;

  v5 = *(void **)v2;
  v6 = *(_QWORD *)(v2 + 8);
  v7 = *(_BYTE *)(v2 + 16);
  lazy protocol witness table accessor for type Text.Layout.CharacterIndex and conformance Text.Layout.CharacterIndex();
  result = (const __CTLine *)RangeSet.init()();
  if (a1 != a2)
  {
    if (a2 >= a1)
      goto LABEL_6;
    __break(1u);
    while (a2 != ++a1)
    {
LABEL_6:
      if (a1 >= a2)
      {
        __break(1u);
LABEL_17:
        __break(1u);
LABEL_18:
        __break(1u);
LABEL_19:
        __break(1u);
LABEL_20:
        __break(1u);
        return result;
      }
      if ((v7 & 1) != 0)
      {
        outlined copy of Text.Layout.Line.Line(v5, v6, 1);
        result = (const __CTLine *)(id)_NSTextLineFragmentGetCTLine(v5);
        if (!result)
          goto LABEL_20;
        v9 = result;
        outlined consume of Text.Layout.Line.Line(v5, v6, 1);
      }
      else
      {
        outlined copy of Text.Layout.Line.Line(v5, v6, 0);
        outlined copy of Text.Layout.Line.Line(v5, v6, 0);

        swift_release();
        v9 = (const __CTLine *)v5;
      }
      v10 = (id)_CTLineGetRunAtIndex(v9, a1);
      StringRange = CTRunGetStringRange((CTRunRef)v10);

      result = (const __CTLine *)swift_release();
      v12 = StringRange.location + StringRange.length;
      if (__OFADD__(StringRange.location, StringRange.length))
        goto LABEL_17;
      if (v12 < StringRange.location)
        goto LABEL_18;
      location = StringRange.location;
      v16 = StringRange.location + StringRange.length;
      if (__OFSUB__(v12, StringRange.location))
        goto LABEL_19;
      if (v12 != StringRange.location)
      {
        type metadata accessor for FontBox<Font.SystemProvider>(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<Text.Layout.CharacterIndex>, (uint64_t (*)(void))lazy protocol witness table accessor for type Text.Layout.CharacterIndex and conformance Text.Layout.CharacterIndex, (uint64_t)&type metadata for Text.Layout.CharacterIndex, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE4968]);
        v13 = (uint64_t (*)(_BYTE *, _QWORD))RangeSet._ranges.modify();
        type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for RangeSet<Text.Layout.CharacterIndex>.Ranges, (uint64_t (*)(void))lazy protocol witness table accessor for type Text.Layout.CharacterIndex and conformance Text.Layout.CharacterIndex, (uint64_t)&type metadata for Text.Layout.CharacterIndex, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE4908]);
        RangeSet.Ranges._insert(contentsOf:)();
        result = (const __CTLine *)v13(v14, 0);
      }
    }
  }
  return result;
}

void Text.Layout.Line.paragraphLayoutDirection.getter(char *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  void *v4;
  char v5;
  id v6;
  char IsRightToLeft;
  char v8;

  v4 = *(void **)v1;
  v3 = *(_QWORD *)(v1 + 8);
  v5 = *(_BYTE *)(v1 + 16);
  if ((v5 & 1) != 0)
  {
    outlined copy of Text.Layout.Line.Line(*(void **)v1, *(_QWORD *)(v1 + 8), 1);
    v6 = (id)_NSTextLineFragmentGetCTLine(v4);
    if (!v6)
    {
      outlined consume of Text.Layout.Line.Line(v4, v3, 1);
LABEL_7:
      v8 = 0;
      goto LABEL_8;
    }
  }
  else
  {
    outlined copy of Text.Layout.Line.Line(*(void **)v1, *(_QWORD *)(v1 + 8), 0);
    outlined copy of Text.Layout.Line.Line(v4, v3, 0);
    swift_release();
    v6 = v4;
  }
  IsRightToLeft = CTLineIsRightToLeft();

  outlined consume of Text.Layout.Line.Line(v4, v3, v5);
  if ((IsRightToLeft & 1) == 0)
    goto LABEL_7;
  v8 = 1;
LABEL_8:
  *a1 = v8;
}

void protocol witness for BidirectionalCollection.index(before:) in conformance Text.Layout.Line(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;

  specialized RandomAccessCollection<>.index(before:)(*a1);
  *a2 = v3;
}

void protocol witness for BidirectionalCollection.formIndex(before:) in conformance Text.Layout.Line(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  id v4;
  const __CFArray *RunCount;

  v2 = *a1 - 1;
  if (__OFSUB__(*a1, 1))
  {
    __break(1u);
    goto LABEL_11;
  }
  v4 = *(id *)v1;
  if ((*(_BYTE *)(v1 + 16) & 1) == 0)
  {
    outlined copy of Text.Layout.Line.Line(v4, *(_QWORD *)(v1 + 8), 0);
    swift_release();
    goto LABEL_6;
  }
  v4 = (id)_NSTextLineFragmentGetCTLine(*(void **)v1);
  if (v4)
  {
LABEL_6:
    RunCount = _CTLineGetRunCount((const __CTLine *)v4);

    goto LABEL_7;
  }
  RunCount = 0;
LABEL_7:
  if ((v2 & 0x8000000000000000) == 0 && v2 < (uint64_t)RunCount)
  {
    *a1 = v2;
    return;
  }
LABEL_11:
  __break(1u);
}

void protocol witness for BidirectionalCollection.distance(from:to:) in conformance Text.Layout.Line(uint64_t *a1, uint64_t *a2)
{
  specialized RandomAccessCollection<>.distance(from:to:)(*a1, *a2);
}

void protocol witness for Collection.endIndex.getter in conformance Text.Layout.Line(const __CFArray **a1@<X8>)
{
  uint64_t v1;
  id v3;
  const __CFArray *RunCount;

  v3 = *(id *)v1;
  if ((*(_BYTE *)(v1 + 16) & 1) == 0)
  {
    outlined copy of Text.Layout.Line.Line(v3, *(_QWORD *)(v1 + 8), 0);
    swift_release();
    goto LABEL_5;
  }
  v3 = (id)_NSTextLineFragmentGetCTLine(*(void **)v1);
  if (v3)
  {
LABEL_5:
    RunCount = _CTLineGetRunCount((const __CTLine *)v3);

    goto LABEL_6;
  }
  RunCount = 0;
LABEL_6:
  *a1 = RunCount;
}

uint64_t (*protocol witness for Collection.subscript.read in conformance Text.Layout.Line(_QWORD *a1, uint64_t *a2))()
{
  _QWORD *v4;

  v4 = malloc(0x28uLL);
  *a1 = v4;
  v4[4] = Text.Layout.Line.subscript.read(v4, *a2);
  return protocol witness for Animatable.animatableData.modify in conformance LinearGradient._Paint;
}

void (*Text.Layout.Line.subscript.read(_QWORD *a1, uint64_t a2))(id **a1)
{
  uint64_t v2;
  _QWORD *v5;
  void (*v6)(id **);
  int v7;
  void (*result)(id **);
  uint64_t v9;
  __int128 v10;

  v5 = malloc(0x30uLL);
  *a1 = v5;
  v6 = *(void (**)(id **))v2;
  v10 = *(_OWORD *)(v2 + 24);
  v7 = *(_DWORD *)(v2 + 40);
  if ((*(_BYTE *)(v2 + 16) & 1) == 0)
  {
    v9 = *(_QWORD *)(v2 + 8);
    outlined copy of Text.Layout.Line.Line(v6, v9, 0);
    swift_release();
    outlined copy of Text.Layout.Line.Line(v6, v9, 0);

    goto LABEL_5;
  }
  result = (void (*)(id **))(id)_NSTextLineFragmentGetCTLine(v6);
  if (result)
  {
    v6 = result;
    v9 = 0;
LABEL_5:
    *v5 = v6;
    v5[1] = a2;
    *((_OWORD *)v5 + 1) = v10;
    *((_DWORD *)v5 + 8) = v7;
    v5[5] = v9;
    return Text.Layout.Line.subscript.read;
  }
  __break(1u);
  return result;
}

void Text.Layout.Line.subscript.read(id **a1)
{
  id *v1;

  v1 = *a1;

  swift_release();
  free(v1);
}

void protocol witness for Collection.subscript.getter in conformance Text.Layout.Line(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  specialized Collection<>.subscript.getter(*a1, a1[1], a2);
}

void protocol witness for Collection.indices.getter in conformance Text.Layout.Line(_QWORD *a1@<X8>)
{
  uint64_t v1;
  id v3;
  const __CFArray *RunCount;

  v3 = *(id *)v1;
  if ((*(_BYTE *)(v1 + 16) & 1) != 0)
  {
    v3 = (id)_NSTextLineFragmentGetCTLine(*(void **)v1);
    if (!v3)
    {
      RunCount = 0;
LABEL_6:
      *a1 = 0;
      a1[1] = RunCount;
      return;
    }
  }
  else
  {
    outlined copy of Text.Layout.Line.Line(v3, *(_QWORD *)(v1 + 8), 0);
    swift_release();
  }
  RunCount = _CTLineGetRunCount((const __CTLine *)v3);

  if (((unint64_t)RunCount & 0x8000000000000000) == 0)
    goto LABEL_6;
  __break(1u);
}

BOOL protocol witness for Collection.isEmpty.getter in conformance Text.Layout.Line()
{
  uint64_t v0;
  id v1;
  const __CFArray *RunCount;

  v1 = *(id *)v0;
  if ((*(_BYTE *)(v0 + 16) & 1) != 0)
  {
    v1 = (id)_NSTextLineFragmentGetCTLine(*(void **)v0);
    if (!v1)
      return 1;
  }
  else
  {
    outlined copy of Text.Layout.Line.Line(v1, *(_QWORD *)(v0 + 8), 0);
    swift_release();
  }
  RunCount = _CTLineGetRunCount((const __CTLine *)v1);

  return RunCount == 0;
}

void protocol witness for RandomAccessCollection.index(_:offsetBy:) in conformance Text.Layout.Line(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;
  uint64_t v5;
  id v6;
  const __CFArray *RunCount;

  v5 = *a1 + a2;
  if (__OFADD__(*a1, a2))
  {
    __break(1u);
    goto LABEL_11;
  }
  v6 = *(id *)v3;
  if ((*(_BYTE *)(v3 + 16) & 1) == 0)
  {
    outlined copy of Text.Layout.Line.Line(v6, *(_QWORD *)(v3 + 8), 0);
    swift_release();
    goto LABEL_6;
  }
  v6 = (id)_NSTextLineFragmentGetCTLine(*(void **)v3);
  if (v6)
  {
LABEL_6:
    RunCount = _CTLineGetRunCount((const __CTLine *)v6);

    goto LABEL_7;
  }
  RunCount = 0;
LABEL_7:
  if ((v5 & 0x8000000000000000) == 0 && (uint64_t)RunCount >= v5)
  {
    *a3 = v5;
    return;
  }
LABEL_11:
  __break(1u);
}

void protocol witness for RandomAccessCollection.index(_:offsetBy:limitedBy:) in conformance Text.Layout.Line(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  char v6;

  specialized RandomAccessCollection.index(_:offsetBy:limitedBy:)(*a1, a2, *a3);
  *(_QWORD *)a4 = v5;
  *(_BYTE *)(a4 + 8) = v6 & 1;
}

void protocol witness for Collection.index(after:) in conformance Text.Layout.Line(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;

  specialized RandomAccessCollection<>.index(after:)(*a1);
  *a2 = v3;
}

void protocol witness for Collection.formIndex(after:) in conformance Text.Layout.Line(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v3;
  id v4;
  const __CFArray *RunCount;

  v3 = *a1;
  v4 = *(id *)v1;
  if ((*(_BYTE *)(v1 + 16) & 1) == 0)
  {
    outlined copy of Text.Layout.Line.Line(v4, *(_QWORD *)(v1 + 8), 0);
    swift_release();
    goto LABEL_5;
  }
  v4 = (id)_NSTextLineFragmentGetCTLine(*(void **)v1);
  if (v4)
  {
LABEL_5:
    RunCount = _CTLineGetRunCount((const __CTLine *)v4);

    goto LABEL_6;
  }
  RunCount = 0;
LABEL_6:
  if (v3 < 0 || v3 >= (uint64_t)RunCount)
    __break(1u);
  else
    *a1 = v3 + 1;
}

__n128 protocol witness for Sequence.makeIterator() in conformance Text.Layout.Line@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  char v2;
  int v3;
  __n128 result;

  v2 = *(_BYTE *)(v1 + 16);
  v3 = *(_DWORD *)(v1 + 40);
  *(_OWORD *)a1 = *(_OWORD *)v1;
  *(_BYTE *)(a1 + 16) = v2;
  result = *(__n128 *)(v1 + 24);
  *(__n128 *)(a1 + 24) = result;
  *(_DWORD *)(a1 + 40) = v3;
  *(_QWORD *)(a1 + 48) = 0;
  return result;
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance Text.Layout.Line()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  specialized _copyCollectionToContiguousArray<A>(_:)(v0);
  v2 = v1;
  outlined consume of Text.Layout.Line.Line(*(void **)v0, *(_QWORD *)(v0 + 8), *(_BYTE *)(v0 + 16));
  return v2;
}

double Text.Layout.Run.lineOrigin.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 16);
}

void Text.Layout.Run.lineOrigin.setter(double a1, double a2)
{
  uint64_t v2;

  *(double *)(v2 + 16) = a1;
  *(double *)(v2 + 24) = a2;
}

uint64_t (*Text.Layout.Run.lineOrigin.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t Text.Layout.Run.drawingOptions.getter()
{
  uint64_t v0;
  uint64_t v1;
  CFIndex v2;
  void *v3;
  void *v4;
  const __CTLine *v5;
  void *v6;
  uint64_t v7;
  void *v8;
  const __CFDictionary *v9;
  _OWORD v11[2];
  __int128 v12;
  uint64_t v13;
  _OWORD v14[2];

  v1 = *(unsigned int *)(v0 + 32);
  if ((v1 & 0x10) != 0)
  {
    v3 = *(void **)v0;
    v2 = *(_QWORD *)(v0 + 8);
    v4 = (void *)MEMORY[0x23B7C5DAC](0xD00000000000001DLL, 0x80000002352E2350);
    swift_retain();
    v5 = v3;
    v6 = (id)_CTLineGetRunAtIndex(v5, v2);
    v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v8 = (void *)MEMORY[0x23B7C5DAC](v7);
    swift_bridgeObjectRelease();
    v9 = _CTRunGetAttributeValueForKey((const __CTRun *)v6, v8);

    if (v9)
    {
      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
    }
    else
    {
      memset(v11, 0, sizeof(v11));
    }
    outlined init with take of AccessibilityDataSeriesConfiguration.AxisConfiguration?((uint64_t)v11, (uint64_t)&v12, (unint64_t *)&lazy cache variable for type metadata for Any?, MEMORY[0x24BEE4AD8] + 8);
    swift_release();

    if (v13)
    {
      outlined init with take of Any(&v12, v14);
      outlined init with copy of Any((uint64_t)v14, (uint64_t)&v12);
      if ((swift_dynamicCast() & 1) != 0 && LOBYTE(v11[0]) == 1)
        v1 = v1 | 4;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v14);
    }
    else
    {
      outlined destroy of Any?((uint64_t)&v12);
    }
  }
  return v1;
}

CFIndex Text.Layout.Run.endIndex.getter()
{
  uint64_t v0;
  void *v1;
  CFIndex GlyphCount;

  v1 = (id)_CTLineGetRunAtIndex(*(const __CTLine **)v0, *(_QWORD *)(v0 + 8));
  GlyphCount = CTRunGetGlyphCount((CTRunRef)v1);

  return GlyphCount;
}

__n128 Text.Layout.RunSlice.init(run:indices:)@<Q0>(__n128 *a1@<X0>, unint64_t a2@<X1>, unint64_t a3@<X2>, __n128 *a4@<X8>)
{
  unint64_t v4;
  unsigned __int32 v5;
  unint64_t v6;
  __n128 result;

  v4 = a1->n128_u64[1];
  v5 = a1[2].n128_u32[0];
  v6 = a1[2].n128_u64[1];
  a4->n128_u64[0] = a1->n128_u64[0];
  a4->n128_u64[1] = v4;
  result = a1[1];
  a4[1] = result;
  a4[2].n128_u32[0] = v5;
  a4[2].n128_u64[1] = v6;
  a4[3].n128_u64[0] = a2;
  a4[3].n128_u64[1] = a3;
  return result;
}

void Text.Layout.Run.characterIndices.getter()
{
  uint64_t v0;
  CFIndex v1;
  void *v2;
  const __CTLine *v3;
  void *v4;
  CFIndex GlyphCount;

  v2 = *(void **)v0;
  v1 = *(_QWORD *)(v0 + 8);
  swift_retain();
  v3 = v2;
  v4 = (id)_CTLineGetRunAtIndex(v3, v1);
  GlyphCount = CTRunGetGlyphCount((CTRunRef)v4);
  swift_release();

  if (GlyphCount < 0)
    __break(1u);
  else
    Text.Layout.RunSlice.characterIndices.getter();
}

_QWORD *Text.Layout.RunSlice.characterIndices.getter()
{
  _QWORD *v0;
  uint64_t v1;
  const __CTLine *v2;
  CFIndex v3;
  CFIndex v4;
  uint64_t v5;
  void *v6;
  const CFIndex *StringIndicesPtr;
  _QWORD *result;
  CFIndex v9;
  unint64_t v10;
  const CFIndex *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  void *v15;
  CFRange v16;

  v4 = *(_QWORD *)(v1 + 48);
  v5 = *(_QWORD *)(v1 + 56);
  if (__OFSUB__(v5, v4))
  {
    __break(1u);
    goto LABEL_15;
  }
  v2 = *(const __CTLine **)v1;
  v3 = *(_QWORD *)(v1 + 8);
  v6 = (id)_CTLineGetRunAtIndex(*(const __CTLine **)v1, v3);
  StringIndicesPtr = CTRunGetStringIndicesPtr((CTRunRef)v6);

  if (!StringIndicesPtr)
  {
    v0 = (_QWORD *)specialized Array.init(repeating:count:)(0, v5 - v4);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
    {
LABEL_12:
      v15 = (id)_CTLineGetRunAtIndex(v2, v3);
      v16.location = v4;
      v16.length = v5 - v4;
      CTRunGetStringIndices((CTRunRef)v15, v16, v0 + 4);

      return v0;
    }
LABEL_15:
    v0 = specialized _ArrayBuffer._consumeAndCreateNew()(v0);
    goto LABEL_12;
  }
  result = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, (v5 - v4) & ~((v5 - v4) >> 63), 0, MEMORY[0x24BEE4AF8]);
  v0 = result;
  if (v5 == v4)
    return v0;
  if (v5 < v4)
  {
    __break(1u);
  }
  else
  {
    v9 = v5 - v4;
    if (v5 > v4)
    {
      v10 = result[2];
      v11 = &StringIndicesPtr[v4];
      do
      {
        v13 = *v11++;
        v12 = v13;
        v14 = v0[3];
        if (v10 >= v14 >> 1)
          v0 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v14 > 1), v10 + 1, 1, v0);
        v0[2] = v10 + 1;
        v0[v10++ + 4] = v12;
        --v9;
      }
      while (v9);
      return v0;
    }
  }
  __break(1u);
  return result;
}

void protocol witness for BidirectionalCollection.index(before:) in conformance Text.Layout.Run(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  void *v5;
  CFIndex GlyphCount;

  v4 = *a1 - 1;
  if (__OFSUB__(*a1, 1))
  {
    __break(1u);
  }
  else
  {
    v5 = (id)_CTLineGetRunAtIndex(*(const __CTLine **)v2, *(_QWORD *)(v2 + 8));
    GlyphCount = CTRunGetGlyphCount((CTRunRef)v5);

    if ((v4 & 0x8000000000000000) == 0 && v4 < GlyphCount)
    {
      *a2 = v4;
      return;
    }
  }
  __break(1u);
}

void protocol witness for BidirectionalCollection.formIndex(before:) in conformance Text.Layout.Run(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v4;
  CFIndex GlyphCount;

  v2 = *a1 - 1;
  if (__OFSUB__(*a1, 1))
  {
    __break(1u);
  }
  else
  {
    v4 = (id)_CTLineGetRunAtIndex(*(const __CTLine **)v1, *(_QWORD *)(v1 + 8));
    GlyphCount = CTRunGetGlyphCount((CTRunRef)v4);

    if ((v2 & 0x8000000000000000) == 0 && v2 < GlyphCount)
    {
      *a1 = v2;
      return;
    }
  }
  __break(1u);
}

void protocol witness for Collection.endIndex.getter in conformance Text.Layout.Run(CFIndex *a1@<X8>)
{
  uint64_t v1;
  void *v3;
  CFIndex GlyphCount;

  v3 = (id)_CTLineGetRunAtIndex(*(const __CTLine **)v1, *(_QWORD *)(v1 + 8));
  GlyphCount = CTRunGetGlyphCount((CTRunRef)v3);

  *a1 = GlyphCount;
}

uint64_t (*protocol witness for Collection.subscript.read in conformance Text.Layout.Run(uint64_t (**a1)(), uint64_t *a2))()
{
  uint64_t v2;
  uint64_t (*result)();
  uint64_t v6;
  uint64_t (*v7)();
  uint64_t v8;
  void *v9;
  int v10;
  uint64_t v11;
  id v12;

  result = (uint64_t (*)())malloc(0x40uLL);
  *a1 = result;
  v6 = *a2;
  if (*a2 == 0x7FFFFFFFFFFFFFFFLL)
  {
    __break(1u);
  }
  else
  {
    v7 = result;
    v9 = *(void **)v2;
    v8 = *(_QWORD *)(v2 + 8);
    v10 = *(_DWORD *)(v2 + 32);
    v11 = *(_QWORD *)(v2 + 40);
    *(_QWORD *)v7 = *(_QWORD *)v2;
    *((_QWORD *)v7 + 1) = v8;
    *((_OWORD *)v7 + 1) = *(_OWORD *)(v2 + 16);
    *((_DWORD *)v7 + 8) = v10;
    *((_QWORD *)v7 + 5) = v11;
    *((_QWORD *)v7 + 6) = v6;
    *((_QWORD *)v7 + 7) = v6 + 1;
    swift_retain();
    v12 = v9;
    return protocol witness for Collection.subscript.read in conformance Text.Layout.Run;
  }
  return result;
}

id protocol witness for Collection.subscript.getter in conformance Text.Layout.Run@<X0>(_OWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  id v7;

  v3 = *(_QWORD *)(v2 + 8);
  v7 = *(id *)v2;
  v4 = *(_DWORD *)(v2 + 32);
  v5 = *(_QWORD *)(v2 + 40);
  *(_QWORD *)a2 = *(_QWORD *)v2;
  *(_QWORD *)(a2 + 8) = v3;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(v2 + 16);
  *(_DWORD *)(a2 + 32) = v4;
  *(_QWORD *)(a2 + 40) = v5;
  *(_OWORD *)(a2 + 48) = *a1;
  swift_retain();
  return v7;
}

void protocol witness for Collection.indices.getter in conformance Text.Layout.Run(_QWORD *a1@<X8>)
{
  uint64_t v1;
  void *v3;
  CFIndex GlyphCount;

  v3 = (id)_CTLineGetRunAtIndex(*(const __CTLine **)v1, *(_QWORD *)(v1 + 8));
  GlyphCount = CTRunGetGlyphCount((CTRunRef)v3);

  if (GlyphCount < 0)
  {
    __break(1u);
  }
  else
  {
    *a1 = 0;
    a1[1] = GlyphCount;
  }
}

BOOL protocol witness for Collection.isEmpty.getter in conformance Text.Layout.Run()
{
  uint64_t v0;
  void *v1;
  CFIndex GlyphCount;

  v1 = (id)_CTLineGetRunAtIndex(*(const __CTLine **)v0, *(_QWORD *)(v0 + 8));
  GlyphCount = CTRunGetGlyphCount((CTRunRef)v1);

  return GlyphCount == 0;
}

void protocol witness for RandomAccessCollection.index(_:offsetBy:) in conformance Text.Layout.Run(_QWORD *a1@<X0>, uint64_t a2@<X1>, CFIndex *a3@<X8>)
{
  uint64_t v3;
  CFIndex v5;
  void *v6;
  CFIndex GlyphCount;

  v5 = *a1 + a2;
  if (__OFADD__(*a1, a2))
  {
    __break(1u);
  }
  else
  {
    v6 = (id)_CTLineGetRunAtIndex(*(const __CTLine **)v3, *(_QWORD *)(v3 + 8));
    GlyphCount = CTRunGetGlyphCount((CTRunRef)v6);

    if ((v5 & 0x8000000000000000) == 0 && GlyphCount >= v5)
    {
      *a3 = v5;
      return;
    }
  }
  __break(1u);
}

void protocol witness for RandomAccessCollection.index(_:offsetBy:limitedBy:) in conformance Text.Layout.Run(CFIndex *a1@<X0>, uint64_t a2@<X1>, CFIndex *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  char v6;

  specialized RandomAccessCollection.index(_:offsetBy:limitedBy:)(*a1, a2, *a3);
  *(_QWORD *)a4 = v5;
  *(_BYTE *)(a4 + 8) = v6 & 1;
}

void protocol witness for RandomAccessCollection.distance(from:to:) in conformance Text.Layout.Run(CFIndex *a1, CFIndex *a2)
{
  uint64_t v2;
  CFIndex v3;
  CFIndex v4;
  const __CTLine *v5;
  CFIndex v6;
  void *v7;
  CFIndex GlyphCount;
  void *v9;
  CFIndex v10;

  v3 = *a1;
  v4 = *a2;
  v5 = *(const __CTLine **)v2;
  v6 = *(_QWORD *)(v2 + 8);
  v7 = (id)_CTLineGetRunAtIndex(v5, v6);
  GlyphCount = CTRunGetGlyphCount((CTRunRef)v7);

  if (v3 < 0 || GlyphCount < v3)
  {
    __break(1u);
LABEL_7:
    __break(1u);
    return;
  }
  v9 = (id)_CTLineGetRunAtIndex(v5, v6);
  v10 = CTRunGetGlyphCount((CTRunRef)v9);

  if (v4 < 0 || v10 < v4)
    goto LABEL_7;
}

void protocol witness for Collection.index(after:) in conformance Text.Layout.Run(CFIndex *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  CFIndex v4;
  void *v5;
  CFIndex GlyphCount;

  v4 = *a1;
  v5 = (id)_CTLineGetRunAtIndex(*(const __CTLine **)v2, *(_QWORD *)(v2 + 8));
  GlyphCount = CTRunGetGlyphCount((CTRunRef)v5);

  if (v4 < 0 || v4 >= GlyphCount)
    __break(1u);
  else
    *a2 = v4 + 1;
}

void protocol witness for Collection.formIndex(after:) in conformance Text.Layout.Run(CFIndex *a1)
{
  uint64_t v1;
  CFIndex v3;
  void *v4;
  CFIndex GlyphCount;

  v3 = *a1;
  v4 = (id)_CTLineGetRunAtIndex(*(const __CTLine **)v1, *(_QWORD *)(v1 + 8));
  GlyphCount = CTRunGetGlyphCount((CTRunRef)v4);

  if (v3 < 0 || v3 >= GlyphCount)
    __break(1u);
  else
    *a1 = v3 + 1;
}

__n128 protocol witness for Sequence.makeIterator() in conformance Text.Layout.Run@<Q0>(__n128 *a1@<X8>)
{
  __n128 *v1;
  unint64_t v2;
  unsigned __int32 v3;
  unint64_t v4;
  __n128 result;

  v2 = v1->n128_u64[1];
  v3 = v1[2].n128_u32[0];
  v4 = v1[2].n128_u64[1];
  a1->n128_u64[0] = v1->n128_u64[0];
  a1->n128_u64[1] = v2;
  result = v1[1];
  a1[1] = result;
  a1[2].n128_u32[0] = v3;
  a1[2].n128_u64[1] = v4;
  a1[3].n128_u64[0] = 0;
  return result;
}

void protocol witness for Collection.count.getter in conformance Text.Layout.Run()
{
  uint64_t v0;
  CFIndex v1;
  const __CTLine *v2;
  void *v3;
  CFIndex GlyphCount;
  void *v5;
  CFIndex v6;
  void *v7;
  CFIndex v8;

  v2 = *(const __CTLine **)v0;
  v1 = *(_QWORD *)(v0 + 8);
  v3 = (id)_CTLineGetRunAtIndex(*(const __CTLine **)v0, v1);
  GlyphCount = CTRunGetGlyphCount((CTRunRef)v3);

  v5 = (id)_CTLineGetRunAtIndex(v2, v1);
  v6 = CTRunGetGlyphCount((CTRunRef)v5);

  if (v6 < 0)
  {
    __break(1u);
LABEL_6:
    __break(1u);
    return;
  }
  v7 = (id)_CTLineGetRunAtIndex(v2, v1);
  v8 = CTRunGetGlyphCount((CTRunRef)v7);

  if (GlyphCount < 0 || v8 < GlyphCount)
    goto LABEL_6;
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance Text.Layout.Run()
{
  id *v0;
  uint64_t v1;
  uint64_t v2;

  specialized _copyCollectionToContiguousArray<A>(_:)((uint64_t)v0);
  v2 = v1;

  swift_release();
  return v2;
}

id Text.Layout.RunSlice.run.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  id v6;

  v2 = *(_QWORD *)(v1 + 8);
  v6 = *(id *)v1;
  v3 = *(_DWORD *)(v1 + 32);
  v4 = *(_QWORD *)(v1 + 40);
  *(_QWORD *)a1 = *(_QWORD *)v1;
  *(_QWORD *)(a1 + 8) = v2;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(v1 + 16);
  *(_DWORD *)(a1 + 32) = v3;
  *(_QWORD *)(a1 + 40) = v4;
  swift_retain();
  return v6;
}

uint64_t Text.Layout.RunSlice.run.setter(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t result;

  v2 = *a1;
  v3 = a1[1];
  v4 = a1[2];
  v5 = a1[3];
  v6 = *((_DWORD *)a1 + 8);
  v7 = a1[5];

  result = swift_release();
  *(_QWORD *)v1 = v2;
  *(_QWORD *)(v1 + 8) = v3;
  *(_QWORD *)(v1 + 16) = v4;
  *(_QWORD *)(v1 + 24) = v5;
  *(_DWORD *)(v1 + 32) = v6;
  *(_QWORD *)(v1 + 40) = v7;
  return result;
}

uint64_t (*Text.Layout.RunSlice.run.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t Text.Layout.RunSlice.indices.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 48);
}

uint64_t Text.Layout.RunSlice.indices.setter(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 48) = result;
  *(_QWORD *)(v2 + 56) = a2;
  return result;
}

uint64_t (*Text.Layout.RunSlice.indices.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

id Text.Layout.RunSlice.subscript.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v5;
  int v6;
  uint64_t v7;
  id result;
  Swift::String v9;
  Swift::String v10;
  id v11;

  if (*(_QWORD *)(v3 + 48) > a1 || *(_QWORD *)(v3 + 56) < a2)
  {
    _StringGuts.grow(_:)(19);
    swift_bridgeObjectRelease();
    _print_unlocked<A, B>(_:_:)();
    v9._countAndFlagsBits = 3943982;
    v9._object = (void *)0xE300000000000000;
    String.append(_:)(v9);
    _print_unlocked<A, B>(_:_:)();
    v10._countAndFlagsBits = 0;
    v10._object = (void *)0xE000000000000000;
    String.append(_:)(v10);
    swift_bridgeObjectRelease();
    result = (id)_assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    v5 = *(_QWORD *)(v3 + 40);
    v6 = *(_DWORD *)(v3 + 32);
    v7 = *(_QWORD *)(v3 + 8);
    v11 = *(id *)v3;
    *(_QWORD *)a3 = *(_QWORD *)v3;
    *(_QWORD *)(a3 + 8) = v7;
    *(_OWORD *)(a3 + 16) = *(_OWORD *)(v3 + 16);
    *(_DWORD *)(a3 + 32) = v6;
    *(_QWORD *)(a3 + 40) = v5;
    *(_QWORD *)(a3 + 48) = a1;
    *(_QWORD *)(a3 + 56) = a2;
    swift_retain();
    return v11;
  }
  return result;
}

void closure #1 in Text.Layout.RunSlice.glyphs.getter(CGGlyph **a1, uint64_t a2)
{
  const __CTLine *v4;
  CFIndex v5;
  void *v6;
  const CGGlyph *GlyphsPtr;
  uint64_t v8;
  uint64_t v9;
  CGGlyph *v10;
  uint64_t v11;
  void *v12;
  CFRange v13;
  uint64_t v14;
  void *v15;

  v4 = *(const __CTLine **)a2;
  v5 = *(_QWORD *)(a2 + 8);
  v6 = (id)_CTLineGetRunAtIndex(*(const __CTLine **)a2, v5);
  GlyphsPtr = CTRunGetGlyphsPtr((CTRunRef)v6);

  if (GlyphsPtr)
  {
    v8 = *(_QWORD *)(a2 + 48);
    v9 = *(_QWORD *)(a2 + 56);
    if (v8 != v9)
    {
      if (v9 < v8)
      {
LABEL_15:
        __break(1u);
        goto LABEL_16;
      }
      if (v8 >= v9)
      {
LABEL_16:
        __break(1u);
        goto LABEL_17;
      }
      v10 = *a1;
      v11 = *(_QWORD *)(a2 + 48);
      while (!__OFSUB__(v11, v8))
      {
        v10[v11 - v8] = GlyphsPtr[v11];
        if (v9 == ++v11)
          return;
      }
      __break(1u);
LABEL_14:
      __break(1u);
      goto LABEL_15;
    }
  }
  else
  {
    v12 = (id)_CTLineGetRunAtIndex(v4, v5);
    v13.location = *(_QWORD *)(a2 + 48);
    v14 = *(_QWORD *)(a2 + 56);
    if (__OFSUB__(v14, v13.location))
      goto LABEL_14;
    if (!*a1)
    {
LABEL_17:
      __break(1u);
      return;
    }
    v15 = v12;
    v13.length = v14 - v13.location;
    CTRunGetGlyphs((CTRunRef)v12, v13, *a1);

  }
}

void closure #1 in Text.Layout.RunSlice.positions.getter(CGPoint **a1, uint64_t a2)
{
  const __CTLine *v4;
  CFIndex v5;
  void *v6;
  const CGPoint *PositionsPtr;
  uint64_t v8;
  uint64_t v9;
  CGPoint *v10;
  uint64_t v11;
  void *v12;
  CFRange v13;
  uint64_t v14;
  void *v15;

  v4 = *(const __CTLine **)a2;
  v5 = *(_QWORD *)(a2 + 8);
  v6 = (id)_CTLineGetRunAtIndex(*(const __CTLine **)a2, v5);
  PositionsPtr = CTRunGetPositionsPtr((CTRunRef)v6);

  if (PositionsPtr)
  {
    v8 = *(_QWORD *)(a2 + 48);
    v9 = *(_QWORD *)(a2 + 56);
    if (v8 != v9)
    {
      if (v9 < v8)
      {
LABEL_15:
        __break(1u);
        goto LABEL_16;
      }
      if (v8 >= v9)
      {
LABEL_16:
        __break(1u);
        goto LABEL_17;
      }
      v10 = *a1;
      v11 = *(_QWORD *)(a2 + 48);
      while (!__OFSUB__(v11, v8))
      {
        v10[v11 - v8] = PositionsPtr[v11];
        if (v9 == ++v11)
          return;
      }
      __break(1u);
LABEL_14:
      __break(1u);
      goto LABEL_15;
    }
  }
  else
  {
    v12 = (id)_CTLineGetRunAtIndex(v4, v5);
    v13.location = *(_QWORD *)(a2 + 48);
    v14 = *(_QWORD *)(a2 + 56);
    if (__OFSUB__(v14, v13.location))
      goto LABEL_14;
    if (!*a1)
    {
LABEL_17:
      __break(1u);
      return;
    }
    v15 = v12;
    v13.length = v14 - v13.location;
    CTRunGetPositions((CTRunRef)v12, v13, *a1);

  }
}

_QWORD *Text.Layout.RunSlice.paths.getter()
{
  _OWORD *v0;
  uint64_t v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  void *v5;
  id v6;
  int64_t v7;
  CGGlyph *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  CGGlyph v13;
  const __CTFont *v14;
  CGPathRef PathForGlyph;
  CGPathRef v16;
  uint64_t v17;
  const CGPath *v18;
  uint64_t v19;
  char v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  id v27;
  CGGlyph *v28[2];
  _OWORD v29[3];
  __int128 v30;

  v2 = v0[1];
  v29[0] = *v0;
  v29[1] = v2;
  v3 = v0[3];
  v29[2] = v0[2];
  v30 = v3;
  v4 = v29[0];
  outlined retain of Text.Layout.Run((void **)v29);
  v5 = (id)_CTLineGetRunAtIndex((const __CTLine *)v4, *((CFIndex *)&v4 + 1));
  v6 = (id)CTRunGetFont();

  outlined release of Text.Layout.Run((id *)v29);
  v7 = *((_QWORD *)&v30 + 1) - v30;
  if (*((uint64_t *)&v30 + 1) < (uint64_t)v30)
  {
    __break(1u);
    goto LABEL_29;
  }
  if (__OFSUB__(*((_QWORD *)&v30 + 1), (_QWORD)v30))
  {
LABEL_29:
    __break(1u);
LABEL_30:
    v1 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v1);
    goto LABEL_5;
  }
  if (v7 < 1)
  {
    v1 = MEMORY[0x24BEE4AF8];
    v9 = *(_QWORD *)(MEMORY[0x24BEE4AF8] + 16);
    if (v9)
      goto LABEL_6;
LABEL_26:

    swift_bridgeObjectRelease();
    return (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  outlined retain of Text.Layout.Run((void **)v29);
  v1 = specialized Array.init(repeating:count:)(0, v7);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    goto LABEL_30;
LABEL_5:
  v8 = *(CGGlyph **)(v1 + 16);
  v28[0] = (CGGlyph *)(v1 + 32);
  v28[1] = v8;
  closure #1 in Text.Layout.RunSlice.glyphs.getter(v28, (uint64_t)v29);
  outlined release of Text.Layout.Run((id *)v29);
  v9 = *(_QWORD *)(v1 + 16);
  if (!v9)
    goto LABEL_26;
LABEL_6:
  v10 = 0;
  v11 = (_QWORD *)MEMORY[0x24BEE4AF8];
  v27 = v6;
  do
  {
    if (v6)
    {
      v13 = *(_WORD *)(v1 + 2 * v10 + 32);
      v14 = (const __CTFont *)v6;
      PathForGlyph = CTFontCreatePathForGlyph(v14, v13, 0);
      if (PathForGlyph)
      {
        v16 = PathForGlyph;
        v17 = v1;
        v18 = PathForGlyph;
        if (CGPathIsEmpty(v18))
        {

          v19 = 0;
          v20 = 6;
        }
        else
        {
          type metadata accessor for Path.PathBox();
          v19 = swift_allocObject();
          *(_OWORD *)(v19 + 24) = 0u;
          *(_OWORD *)(v19 + 104) = 0u;
          *(_OWORD *)(v19 + 88) = 0u;
          *(_OWORD *)(v19 + 72) = 0u;
          *(_OWORD *)(v19 + 56) = 0u;
          *(_OWORD *)(v19 + 40) = 0u;
          *(_BYTE *)(v19 + 16) = 0;
          v20 = 5;
          *(_QWORD *)(v19 + 24) = v16;
        }
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v11[2] + 1, 1, v11);
        v24 = v11[2];
        v23 = v11[3];
        if (v24 >= v23 >> 1)
          v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v23 > 1), v24 + 1, 1, v11);
        v11[2] = v24 + 1;
        v25 = &v11[5 * v24];
        v25[4] = v19;
        v25[5] = 0;
        v25[6] = 0;
        v25[7] = 0;
        *((_BYTE *)v25 + 64) = v20;

        v1 = v17;
        v6 = v27;
        goto LABEL_8;
      }

    }
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v11[2] + 1, 1, v11);
    v22 = v11[2];
    v21 = v11[3];
    if (v22 >= v21 >> 1)
      v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v21 > 1), v22 + 1, 1, v11);
    v11[2] = v22 + 1;
    v12 = &v11[5 * v22];
    *((_OWORD *)v12 + 2) = 0u;
    *((_OWORD *)v12 + 3) = 0u;
    *((_BYTE *)v12 + 64) = -1;
LABEL_8:
    ++v10;
  }
  while (v9 != v10);

  swift_bridgeObjectRelease();
  return v11;
}

_QWORD *protocol witness for BidirectionalCollection.index(before:) in conformance Text.Layout.RunSlice@<X0>(_QWORD *result@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  v3 = *result - 1;
  if (__OFSUB__(*result, 1))
  {
    __break(1u);
  }
  else if (v3 >= *(_QWORD *)(v2 + 48) && v3 < *(_QWORD *)(v2 + 56))
  {
    *a2 = v3;
    return result;
  }
  __break(1u);
  return result;
}

uint64_t *protocol witness for BidirectionalCollection.formIndex(before:) in conformance Text.Layout.RunSlice(uint64_t *result)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *result - 1;
  if (__OFSUB__(*result, 1))
  {
    __break(1u);
  }
  else if (v2 >= *(_QWORD *)(v1 + 48) && v2 < *(_QWORD *)(v1 + 56))
  {
    *result = v2;
    return result;
  }
  __break(1u);
  return result;
}

void protocol witness for Collection.startIndex.getter in conformance Text.Layout.RunSlice(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_QWORD *)(v1 + 48);
}

void protocol witness for Collection.endIndex.getter in conformance Text.Layout.RunSlice(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_QWORD *)(v1 + 56);
}

void (*protocol witness for Collection.subscript.read in conformance Text.Layout.RunSlice(_QWORD *a1, void (**a2)(id **a1)))(id **a1)
{
  void *v4;
  void (*result)(id **);

  v4 = malloc(0x40uLL);
  *a1 = v4;
  result = *a2;
  if (*a2 == (void (*)(id **))0x7FFFFFFFFFFFFFFFLL)
  {
    __break(1u);
  }
  else
  {
    Text.Layout.RunSlice.subscript.getter((uint64_t)result, (uint64_t)result + 1, (uint64_t)v4);
    return Text.Layout.Line.subscript.read;
  }
  return result;
}

id protocol witness for Collection.subscript.getter in conformance Text.Layout.RunSlice@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  return Text.Layout.RunSlice.subscript.getter(*a1, a1[1], a2);
}

__n128 protocol witness for Collection.indices.getter in conformance Text.Layout.RunSlice@<Q0>(__n128 *a1@<X8>)
{
  __n128 *v1;
  __n128 result;

  result = v1[3];
  *a1 = result;
  return result;
}

BOOL protocol witness for Collection.isEmpty.getter in conformance Text.Layout.RunSlice()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 48) == *(_QWORD *)(v0 + 56);
}

_QWORD *protocol witness for RandomAccessCollection.index(_:offsetBy:) in conformance Text.Layout.RunSlice@<X0>(_QWORD *result@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;

  v4 = *result + a2;
  if (__OFADD__(*result, a2))
  {
    __break(1u);
  }
  else if (v4 >= *(_QWORD *)(v3 + 48) && *(_QWORD *)(v3 + 56) >= v4)
  {
    *a3 = v4;
    return result;
  }
  __break(1u);
  return result;
}

uint64_t protocol witness for RandomAccessCollection.index(_:offsetBy:limitedBy:) in conformance Text.Layout.RunSlice@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t result;
  char v6;

  result = specialized RandomAccessCollection.index(_:offsetBy:limitedBy:)(*a1, a2, *a3);
  *(_QWORD *)a4 = result;
  *(_BYTE *)(a4 + 8) = v6 & 1;
  return result;
}

uint64_t *protocol witness for RandomAccessCollection.distance(from:to:) in conformance Text.Layout.RunSlice(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *result;
  v4 = *a2;
  v5 = *(_QWORD *)(v2 + 48);
  v6 = *(_QWORD *)(v2 + 56);
  if (v6 < *a2 || v4 < v5 || v3 < v5 || v6 < v3)
  {
    __break(1u);
    goto LABEL_14;
  }
  result = (uint64_t *)(v4 - v3);
  if (__OFSUB__(v4, v3))
LABEL_14:
    __break(1u);
  return result;
}

uint64_t *protocol witness for Collection.index(after:) in conformance Text.Layout.RunSlice@<X0>(uint64_t *result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  BOOL v6;

  v3 = *result;
  v4 = *(_QWORD *)(v2 + 56);
  if (*result >= *(_QWORD *)(v2 + 48))
  {
    v6 = __OFSUB__(v3, v4);
    v5 = v3 - v4 < 0;
  }
  else
  {
    v6 = 0;
    v5 = 0;
  }
  if (v5 != v6)
    *a2 = v3 + 1;
  else
    __break(1u);
  return result;
}

uint64_t *protocol witness for Collection.formIndex(after:) in conformance Text.Layout.RunSlice(uint64_t *result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  BOOL v4;
  BOOL v5;

  v2 = *result;
  v3 = *(_QWORD *)(v1 + 56);
  if (*result >= *(_QWORD *)(v1 + 48))
  {
    v5 = __OFSUB__(v2, v3);
    v4 = v2 - v3 < 0;
  }
  else
  {
    v5 = 0;
    v4 = 0;
  }
  if (v4 != v5)
    *result = v2 + 1;
  else
    __break(1u);
  return result;
}

__n128 protocol witness for Sequence.makeIterator() in conformance Text.Layout.RunSlice@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  __n128 result;

  v2 = *(_QWORD *)(v1 + 8);
  v3 = *(_DWORD *)(v1 + 32);
  v4 = *(_QWORD *)(v1 + 40);
  *(_QWORD *)a1 = *(_QWORD *)v1;
  *(_QWORD *)(a1 + 8) = v2;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(v1 + 16);
  *(_DWORD *)(a1 + 32) = v3;
  *(_QWORD *)(a1 + 40) = v4;
  result = *(__n128 *)(v1 + 48);
  *(__n128 *)(a1 + 48) = result;
  *(_QWORD *)(a1 + 64) = result.n128_u64[0];
  return result;
}

uint64_t protocol witness for Collection.count.getter in conformance Text.Layout.RunSlice()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t result;

  v1 = *(_QWORD *)(v0 + 48);
  v2 = *(_QWORD *)(v0 + 56);
  result = v2 - v1;
  if (v2 < v1)
  {
    __break(1u);
    goto LABEL_5;
  }
  if (__OFSUB__(v2, v1))
LABEL_5:
    __break(1u);
  return result;
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance Text.Layout.RunSlice()
{
  id *v0;
  uint64_t v1;

  v1 = specialized _copyCollectionToContiguousArray<A>(_:)((uint64_t)v0);

  swift_release();
  return v1;
}

BOOL static Text.Layout.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  unsigned __int8 v2;
  uint64_t v3;
  unsigned __int8 v4;
  uint64_t v5;
  char v6;
  _BOOL4 v7;

  v2 = *(_BYTE *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  v4 = *(_BYTE *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = specialized static Array<A>.== infix(_:_:)(*(_QWORD *)a1, *(_QWORD *)a2);
  v7 = ((v2 ^ v4) & 1) == 0 && v3 == v5;
  return (v6 & 1) != 0 && v7;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance Text.Layout(uint64_t a1, uint64_t a2)
{
  unsigned __int8 v2;
  uint64_t v3;
  unsigned __int8 v4;
  uint64_t v5;
  char v6;
  _BOOL4 v7;

  v2 = *(_BYTE *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  v4 = *(_BYTE *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = specialized static Array<A>.== infix(_:_:)(*(_QWORD *)a1, *(_QWORD *)a2);
  v7 = ((v2 ^ v4) & 1) == 0 && v3 == v5;
  return (v6 & 1) != 0 && v7;
}

uint64_t (*protocol witness for Collection.subscript.read in conformance Text.Layout(void (***a1)(void ***a1), unint64_t *a2))()
{
  void (**v4)(void ***);

  v4 = (void (**)(void ***))malloc(0x28uLL);
  *a1 = v4;
  v4[4] = Text.Effect.RenderSegmentation.StaticLines.subscript.read(v4, *a2);
  return protocol witness for Animatable.animatableData.modify in conformance LinearGradient._Paint;
}

uint64_t *protocol witness for Collection.subscript.getter in conformance Text.Layout@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;

  v3 = *result;
  if (*result < 0 || (v4 = result[1], result = *(uint64_t **)v2, *(_QWORD *)(*(_QWORD *)v2 + 16) < v4))
  {
    __break(1u);
  }
  else
  {
    v5 = *(_BYTE *)(v2 + 8);
    v6 = *(_QWORD *)(v2 + 16);
    *(_QWORD *)(a2 + 8) = v4;
    *(_QWORD *)(a2 + 16) = result;
    *(_BYTE *)(a2 + 24) = v5;
    *(_QWORD *)(a2 + 32) = v6;
    *(_QWORD *)a2 = v3;
    return (uint64_t *)swift_bridgeObjectRetain();
  }
  return result;
}

unint64_t protocol witness for RandomAccessCollection.index(_:offsetBy:limitedBy:) in conformance Text.Layout@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X1>, unint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  unint64_t result;
  char v6;

  result = specialized RandomAccessCollection.index(_:offsetBy:limitedBy:)(*a1, a2, *a3);
  *(_QWORD *)a4 = result;
  *(_BYTE *)(a4 + 8) = v6 & 1;
  return result;
}

_QWORD *protocol witness for Collection.formIndex(after:) in conformance Text.Layout(_QWORD *result)
{
  uint64_t v1;

  if (*result >= *(_QWORD *)(*(_QWORD *)v1 + 16))
    __break(1u);
  else
    ++*result;
  return result;
}

void protocol witness for Sequence.makeIterator() in conformance Text.Layout(uint64_t a1@<X8>)
{
  uint64_t v1;
  char v2;
  uint64_t v3;

  v2 = *(_BYTE *)(v1 + 8);
  v3 = *(_QWORD *)(v1 + 16);
  *(_QWORD *)a1 = *(_QWORD *)v1;
  *(_BYTE *)(a1 + 8) = v2;
  *(_QWORD *)(a1 + 16) = v3;
  *(_QWORD *)(a1 + 24) = 0;
}

_QWORD *protocol witness for Sequence._copyToContiguousArray() in conformance Text.Layout()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = specialized _copyCollectionToContiguousArray<A>(_:)(v0);
  swift_bridgeObjectRelease();
  return v1;
}

void AnyTextLayoutRenderer.draw(attachment:rect:attributes:range:in:)()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void AnyTextLayoutRenderer.lineFragment(for:)()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void TextLayoutFragmentRenderer.draw(attachment:rect:attributes:range:in:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, CGFloat a6, CGFloat a7, CGFloat a8, CGFloat a9)
{
  uint64_t v9;
  uint64_t v18;
  CGBlendMode v19;
  CGFloat Height;
  CGContext *c;
  CGRect v22;

  v18 = *a5;
  c = (CGContext *)(id)RBDrawingStateBeginCGContext();
  v19 = *(_DWORD *)(v18 + 36);
  if (v19)
    CGContextSetBlendMode(c, v19);
  v22.origin.x = a6;
  v22.origin.y = a7;
  v22.size.width = a8;
  v22.size.height = a9;
  Height = CGRectGetHeight(v22);
  _NSTextAttachmentDraw(a1, a2, a3, a4, *(void **)(v9 + 16), (uint64_t)c, a6, Height + a7, a8, a9);
  RBDrawingStateEndCGContext();

}

uint64_t TextLayoutFragmentRenderer.lineFragment(for:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  void *v5;
  id v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  char v11;
  BOOL v12;
  char *v13;
  uint64_t v14;
  id v15;
  id v16;
  id v17;
  uint64_t result;

  v5 = *(void **)(v2 + 16);
  v6 = objc_msgSend(v5, sel_rangeInElement);
  v7 = NSTextRange.textRange.getter();
  v9 = v8;
  v11 = v10;

  if ((v11 & 1) == 0)
  {
    v12 = __OFADD__(v7, a1);
    v13 = &v7[a1];
    if (v12)
    {
      __break(1u);
    }
    else
    {
      v12 = __OFADD__(v9, a2);
      v14 = v9 + a2;
      if (!v12)
      {
        v15 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BEBB470]), sel_initWithRange_, v13, v14);
        v16 = objc_msgSend(v15, sel_location);
        v17 = objc_msgSend(v5, sel_textLineFragmentForTextLocation_isUpstreamAffinity_, v16, 0);

        return (uint64_t)v17;
      }
    }
    __break(1u);
  }
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void TextLayoutFragmentRenderer.__ivar_destroyer()
{
  uint64_t v0;

}

uint64_t TextLayoutFragmentRenderer.__deallocating_deinit()
{
  uint64_t v0;

  return swift_deallocClassInstance();
}

uint64_t Text.LayoutKey.AnchoredLayout.origin.getter()
{
  return swift_retain();
}

uint64_t Text.LayoutKey.AnchoredLayout.origin.setter(uint64_t a1)
{
  _QWORD *v1;
  uint64_t result;

  result = swift_release();
  *v1 = a1;
  return result;
}

uint64_t (*Text.LayoutKey.AnchoredLayout.origin.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t Text.LayoutKey.AnchoredLayout.layout.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  char v2;
  uint64_t v3;

  v2 = *(_BYTE *)(v1 + 16);
  v3 = *(_QWORD *)(v1 + 24);
  *(_QWORD *)a1 = *(_QWORD *)(v1 + 8);
  *(_BYTE *)(a1 + 8) = v2;
  *(_QWORD *)(a1 + 16) = v3;
  return swift_bridgeObjectRetain();
}

uint64_t Text.LayoutKey.AnchoredLayout.layout.setter(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t result;

  v2 = *a1;
  v3 = *((_BYTE *)a1 + 8);
  v4 = a1[2];
  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 8) = v2;
  *(_BYTE *)(v1 + 16) = v3;
  *(_QWORD *)(v1 + 24) = v4;
  return result;
}

uint64_t (*Text.LayoutKey.AnchoredLayout.layout.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t static Text.LayoutKey.defaultValue.getter()
{
  if (one-time initialization token for defaultValue != -1)
    swift_once();
  return swift_bridgeObjectRetain();
}

uint64_t static Text.LayoutKey.reduce(value:nextValue:)(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v2;

  v2 = a2();
  return specialized Array.append<A>(contentsOf:)(v2);
}

uint64_t protocol witness for static PreferenceKey.defaultValue.getter in conformance Text.LayoutKey@<X0>(_QWORD *a1@<X8>)
{
  if (one-time initialization token for defaultValue != -1)
    swift_once();
  *a1 = static Text.LayoutKey.defaultValue;
  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for static PreferenceKey.reduce(value:nextValue:) in conformance Text.LayoutKey(uint64_t a1, void (*a2)(uint64_t *__return_ptr))
{
  uint64_t v3;

  a2(&v3);
  return specialized Array.append<A>(contentsOf:)(v3);
}

uint64_t Text.Layout.Decorations.Segment.startIndex.getter()
{
  return 0;
}

uint64_t Text.Layout.Decorations.Segment.endIndex.getter()
{
  uint64_t v0;

  return *(_QWORD *)(*(_QWORD *)(v0 + 48) + 16);
}

unint64_t Text.Layout.Decorations.Segment.subscript.getter@<X0>(unint64_t result@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v5;

  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else
  {
    v3 = *(_QWORD *)(v2 + 48);
    if (*(_QWORD *)(v3 + 16) > result)
    {
      v4 = v3 + 32 * result;
      v5 = *(_OWORD *)(v4 + 48);
      *a2 = *(_OWORD *)(v4 + 32);
      a2[1] = v5;
      return result;
    }
  }
  __break(1u);
  return result;
}

_QWORD *protocol witness for BidirectionalCollection.index(before:) in conformance Text.Layout.Decorations.Segment@<X0>(_QWORD *result@<X0>, unint64_t *a2@<X8>)
{
  uint64_t v2;
  unint64_t v3;

  v3 = *result - 1;
  if (__OFSUB__(*result, 1))
  {
    __break(1u);
  }
  else if (v3 < *(_QWORD *)(*(_QWORD *)(v2 + 48) + 16))
  {
    *a2 = v3;
    return result;
  }
  __break(1u);
  return result;
}

unint64_t *protocol witness for BidirectionalCollection.formIndex(before:) in conformance Text.Layout.Decorations.Segment(unint64_t *result)
{
  uint64_t v1;
  unint64_t v2;

  v2 = *result - 1;
  if (__OFSUB__(*result, 1))
  {
    __break(1u);
  }
  else if (v2 < *(_QWORD *)(*(_QWORD *)(v1 + 48) + 16))
  {
    *result = v2;
    return result;
  }
  __break(1u);
  return result;
}

void protocol witness for Collection.endIndex.getter in conformance Text.Layout.Decorations.Segment(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_QWORD *)(*(_QWORD *)(v1 + 48) + 16);
}

_OWORD *protocol witness for Collection.subscript.read in conformance Text.Layout.Decorations.Segment(_OWORD *result, unint64_t *a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;

  v3 = *a2;
  if ((*a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else
  {
    v4 = *(_QWORD *)(v2 + 48);
    if (v3 < *(_QWORD *)(v4 + 16))
    {
      v5 = v4 + 32 * v3;
      v6 = *(_OWORD *)(v5 + 48);
      *result = *(_OWORD *)(v5 + 32);
      result[1] = v6;
      return _ViewInputs.base.modify;
    }
  }
  __break(1u);
  return result;
}

uint64_t *protocol witness for Collection.subscript.getter in conformance Text.Layout.Decorations.Segment@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = *result;
  if (*result < 0 || (v4 = result[1], v5 = *(_QWORD *)(v2 + 48), *(_QWORD *)(v5 + 16) < v4))
  {
    __break(1u);
  }
  else
  {
    v6 = *(_QWORD *)(v2 + 16);
    v7 = *(_QWORD *)(v2 + 40);
    *(_OWORD *)(a2 + 16) = *(_OWORD *)v2;
    *(_QWORD *)(a2 + 32) = v6;
    *(_OWORD *)(a2 + 40) = *(_OWORD *)(v2 + 24);
    *(_QWORD *)(a2 + 56) = v7;
    *(_QWORD *)(a2 + 64) = v5;
    *(_QWORD *)a2 = v3;
    *(_QWORD *)(a2 + 8) = v4;
    swift_bridgeObjectRetain();
    return (uint64_t *)swift_bridgeObjectRetain();
  }
  return result;
}

void protocol witness for Collection.indices.getter in conformance Text.Layout.Decorations.Segment(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)(v1 + 48) + 16);
  *a1 = 0;
  a1[1] = v2;
}

BOOL protocol witness for Collection.isEmpty.getter in conformance Text.Layout.Decorations.Segment()
{
  uint64_t v0;

  return *(_QWORD *)(*(_QWORD *)(v0 + 48) + 16) == 0;
}

_QWORD *protocol witness for RandomAccessCollection.index(_:offsetBy:) in conformance Text.Layout.Decorations.Segment@<X0>(_QWORD *result@<X0>, uint64_t a2@<X1>, unint64_t *a3@<X8>)
{
  uint64_t v3;
  unint64_t v4;

  v4 = *result + a2;
  if (__OFADD__(*result, a2))
  {
    __break(1u);
  }
  else if (v4 <= *(_QWORD *)(*(_QWORD *)(v3 + 48) + 16))
  {
    *a3 = v4;
    return result;
  }
  __break(1u);
  return result;
}

unint64_t protocol witness for RandomAccessCollection.index(_:offsetBy:limitedBy:) in conformance Text.Layout.Decorations.Segment@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X1>, unint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  unint64_t result;
  char v6;

  result = specialized RandomAccessCollection.index(_:offsetBy:limitedBy:)(*a1, a2, *a3);
  *(_QWORD *)a4 = result;
  *(_BYTE *)(a4 + 8) = v6 & 1;
  return result;
}

unint64_t *protocol witness for RandomAccessCollection.distance(from:to:) in conformance Text.Layout.Decorations.Segment(unint64_t *result, unint64_t *a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v3 = *a2;
  v4 = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 16);
  if (*result <= v4 && v3 <= v4)
    return (unint64_t *)(v3 - *result);
  __break(1u);
  return result;
}

_QWORD *protocol witness for Collection.index(after:) in conformance Text.Layout.Decorations.Segment@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  if (*result >= *(_QWORD *)(*(_QWORD *)(v2 + 48) + 16))
    __break(1u);
  else
    *a2 = *result + 1;
  return result;
}

_QWORD *protocol witness for Collection.formIndex(after:) in conformance Text.Layout.Decorations.Segment(_QWORD *result)
{
  uint64_t v1;

  if (*result >= *(_QWORD *)(*(_QWORD *)(v1 + 48) + 16))
    __break(1u);
  else
    ++*result;
  return result;
}

__n128 protocol witness for Sequence.makeIterator() in conformance Text.Layout.Decorations.Segment@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  __n128 result;

  v2 = *(_QWORD *)(v1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)v1;
  *(_QWORD *)(a1 + 16) = v2;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(v1 + 24);
  result = *(__n128 *)(v1 + 40);
  *(__n128 *)(a1 + 40) = result;
  *(_QWORD *)(a1 + 56) = 0;
  return result;
}

uint64_t protocol witness for Sequence.underestimatedCount.getter in conformance Text.Layout.Decorations.Segment()
{
  uint64_t v0;

  return *(_QWORD *)(*(_QWORD *)(v0 + 48) + 16);
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance Text.Layout.Decorations.Segment()
{
  uint64_t v0;
  uint64_t v1;

  v1 = specialized _copyCollectionToContiguousArray<A>(_:)(v0);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v1;
}

uint64_t Text.Layout.Decorations.init(line:origin:scale:runs:flags:typographicBounds:)@<X0>(uint64_t (*a1)(int a1, uint64_t a2, double a3, double a4, double a5, double a6, double a7, double a8, double a9, double a10)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X4>, double *a6@<X8>, uint64_t (*a7)()@<D0>, double a8@<D1>, double a9@<D2>)
{
  int v9;
  int v10;
  char v19;
  double v20;
  double v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  double v25;
  uint64_t (*v26)(int, uint64_t, double, double, double, double, double, double, double, double);
  uint64_t isEscapingClosureAtFileLocation;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v29;
  unint64_t v30;
  _QWORD *v31;
  double v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  uint64_t result;
  int v37;
  __int128 v38;
  double *v39;
  uint64_t aBlock;
  uint64_t v41;
  uint64_t (*v42)(uint64_t, uint64_t, uint64_t);
  void *v43;
  uint64_t (*v44)();
  double v45;
  _QWORD v46[2];
  _OWORD v47[3];
  uint64_t v48;
  double v49;
  double v50[6];
  char v51;

  v48 = 0;
  v49 = MEMORY[0x24BEE4AF8];
  memset(v47, 0, sizeof(v47));
  v46[0] = 0;
  v46[1] = 0;
  outlined init with take of AccessibilityDataSeriesConfiguration.AxisConfiguration?(a5, (uint64_t)v50, &lazy cache variable for type metadata for Text.Layout.TypographicBounds?, (uint64_t)&type metadata for Text.Layout.TypographicBounds);
  v19 = v51;
  if ((v51 & 1) == 0)
  {
    v21 = v50[0] + v50[2];
    v20 = v50[0];
    v39 = a6;
    if (!a1)
      goto LABEL_11;
LABEL_3:
    v22 = swift_allocObject();
    *(_QWORD *)(v22 + 16) = v47;
    *(_QWORD *)(v22 + 24) = &v49;
    *(_QWORD *)(v22 + 32) = v46;
    *(_QWORD *)(v22 + 40) = a2;
    *(_QWORD *)(v22 + 48) = a3;
    *(double *)(v22 + 56) = v20;
    *(_BYTE *)(v22 + 64) = v19;
    *(double *)(v22 + 72) = v21;
    *(_BYTE *)(v22 + 80) = v19;
    *(_BYTE *)(v22 + 81) = a4;
    *(double *)&v23 = COERCE_DOUBLE(swift_allocObject());
    *(_QWORD *)(v23 + 16) = partial apply for closure #1 in Text.Layout.Decorations.init(line:origin:scale:runs:flags:typographicBounds:);
    *(_QWORD *)(v23 + 24) = v22;
    v44 = partial apply for thunk for @callee_guaranteed (@guaranteed RBDisplayList) -> ();
    v45 = *(double *)&v23;
    aBlock = MEMORY[0x24BDAC760];
    v41 = 1107296256;
    v42 = thunk for @escaping @callee_guaranteed (@unowned Int, @unowned UnsafeMutablePointer<CFRange>) -> (@unowned Unmanaged<CFDictionaryRef>?);
    v43 = &block_descriptor_14_0;
    v24 = _Block_copy(&aBlock);
    v25 = v45;
    swift_retain();
    v26 = a1;
    swift_release();
    aBlock = 0x3FF0000000000000;
    v41 = 0;
    v42 = 0;
    v43 = (void *)0xBFF0000000000000;
    v44 = a7;
    v45 = a8;
    CTLineDecorationApplyWithBlock();
    _Block_release(v24);
    isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
    swift_release();
    if ((isEscapingClosureAtFileLocation & 1) != 0)
    {
      __break(1u);
    }
    else
    {
      v23 = *((uint64_t *)&v47[2] + 1);
      if (!*((_QWORD *)&v47[2] + 1))
      {
LABEL_9:

        a1 = partial apply for closure #1 in Text.Layout.Decorations.init(line:origin:scale:runs:flags:typographicBounds:);
        goto LABEL_11;
      }
      v38 = *(_OWORD *)((char *)&v47[1] + 8);
      isEscapingClosureAtFileLocation = v48;
      v25 = v49;
      a9 = *(double *)&v47[1];
      LODWORD(a6) = HIDWORD(v47[0]);
      v37 = DWORD2(v47[0]);
      v9 = v47[0];
      v10 = DWORD1(v47[0]);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v49 = v25;
      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      {
LABEL_6:
        v30 = *(_QWORD *)(*(_QWORD *)&v25 + 16);
        v29 = *(_QWORD *)(*(_QWORD *)&v25 + 24);
        if (v30 >= v29 >> 1)
        {
          v25 = COERCE_DOUBLE(specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v29 > 1), v30 + 1, 1, *(_QWORD **)&v25));
          v49 = v25;
        }
        *(_QWORD *)(*(_QWORD *)&v25 + 16) = v30 + 1;
        v31 = (_QWORD *)(*(_QWORD *)&v25 + 56 * v30);
        *((_DWORD *)v31 + 8) = v9;
        *((_DWORD *)v31 + 9) = v10;
        *((_DWORD *)v31 + 10) = v37;
        *((_DWORD *)v31 + 11) = (_DWORD)a6;
        *((double *)v31 + 6) = a9;
        *(_OWORD *)(v31 + 7) = v38;
        *((double *)v31 + 9) = *(double *)&v23;
        v31[10] = isEscapingClosureAtFileLocation;
        goto LABEL_9;
      }
    }
    v25 = COERCE_DOUBLE(specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(*(_QWORD *)&v25 + 16) + 1, 1, *(_QWORD **)&v25));
    v49 = v25;
    goto LABEL_6;
  }
  v20 = 0.0;
  v21 = 0.0;
  v39 = a6;
  if (a1)
    goto LABEL_3;
LABEL_11:
  v32 = v49;
  v33 = v47[0];
  v34 = v47[1];
  v35 = v47[2];
  swift_bridgeObjectRetain();
  outlined consume of Text.Layout.Decorations.Segment?(v33, *((uint64_t *)&v33 + 1), v34, *((uint64_t *)&v34 + 1), v35, *((uint64_t *)&v35 + 1));
  swift_bridgeObjectRelease();
  result = outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed @escaping @callee_guaranteed (@unowned Bool) -> ()) -> ())?((uint64_t)a1);
  *v39 = v32;
  return result;
}

uint64_t closure #1 in Text.Layout.Decorations.init(line:origin:scale:runs:flags:typographicBounds:)(int a1, uint64_t a2, int *a3, _QWORD **a4, uint64_t *a5, _QWORD *a6, _QWORD *a7, uint64_t a8, double a9, double a10, double a11, double a12, double a13, double a14, double a15, double a16, char a17, double a18, char a19, char a20)
{
  uint64_t v12;
  double v13;
  uint64_t v14;
  double v15;
  _QWORD *v16;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  unint64_t v26;
  unint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t result;
  double v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  _QWORD *v43;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v45;
  unint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  BOOL v54;
  uint64_t v55;
  uint64_t v56;
  id v57;
  unint64_t v58;
  CFTypeID v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  void *v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char v77;
  char v78;
  void *v79;
  uint64_t v80;
  char v81;
  char v82;
  int v83;
  int v84;
  int v85;
  int v86;
  uint64_t v87;
  int v88;
  _QWORD *v89;
  int v90;
  int v92;

  v16 = a7;
  if (a1 != 1)
  {
    if (a1)
    {
      v37 = *((_QWORD *)a3 + 3);
      v38 = *((_QWORD *)a3 + 4);
      v39 = *((_QWORD *)a3 + 5);
      if (v39)
      {
        v40 = *((_QWORD *)a3 + 6);
        v41 = *((_QWORD *)a3 + 2);
        v42 = a3[1];
        v92 = a3[2];
        v90 = a3[3];
        v88 = *a3;
        v43 = *a4;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        *a4 = v43;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          v43 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v43[2] + 1, 1, v43);
          *a4 = v43;
        }
        v46 = v43[2];
        v45 = v43[3];
        if (v46 >= v45 >> 1)
        {
          v43 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v45 > 1), v46 + 1, 1, v43);
          *a4 = v43;
        }
        v43[2] = v46 + 1;
        v47 = &v43[7 * v46];
        *((_DWORD *)v47 + 8) = v88;
        *((_DWORD *)v47 + 9) = v42;
        *((_DWORD *)v47 + 10) = v92;
        *((_DWORD *)v47 + 11) = v90;
        v47[6] = v41;
        v47[7] = v37;
        v47[8] = v38;
        v47[9] = v39;
        v47[10] = v40;
        v37 = *((_QWORD *)a3 + 3);
        v38 = *((_QWORD *)a3 + 4);
        v48 = *((_QWORD *)a3 + 5);
      }
      else
      {
        v48 = 0;
      }
      v60 = *(_QWORD *)a3;
      v61 = *((_QWORD *)a3 + 1);
      v62 = *((_QWORD *)a3 + 2);
      *((_OWORD *)a3 + 1) = 0u;
      *((_OWORD *)a3 + 2) = 0u;
      *(_OWORD *)a3 = 0u;
      *((_QWORD *)a3 + 6) = 0;
      v63 = v37;
      v64 = v38;
      return outlined consume of Text.Layout.Decorations.Segment?(v60, v61, v62, v63, v64, v48);
    }
    v21 = *((_QWORD *)a3 + 3);
    v22 = *((_QWORD *)a3 + 4);
    v23 = *((_QWORD *)a3 + 5);
    if (!v23)
    {
      v29 = 0;
      goto LABEL_44;
    }
    v89 = a7;
    v24 = *((_QWORD *)a3 + 6);
    v12 = *((_QWORD *)a3 + 2);
    v85 = a3[3];
    v86 = a3[2];
    v83 = a3[1];
    v84 = *a3;
    v16 = *a4;
    swift_bridgeObjectRetain();
    v87 = v24;
    swift_bridgeObjectRetain();
    v25 = swift_isUniquelyReferenced_nonNull_native();
    *a4 = v16;
    if ((v25 & 1) == 0)
      goto LABEL_70;
    while (1)
    {
      v27 = v16[2];
      v26 = v16[3];
      if (v27 >= v26 >> 1)
      {
        v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v26 > 1), v27 + 1, 1, v16);
        *a4 = v16;
      }
      v16[2] = v27 + 1;
      v28 = &v16[7 * v27];
      *((_DWORD *)v28 + 8) = v84;
      *((_DWORD *)v28 + 9) = v83;
      *((_DWORD *)v28 + 10) = v86;
      *((_DWORD *)v28 + 11) = v85;
      v28[6] = v12;
      v28[7] = v21;
      v28[8] = v22;
      v16 = v89;
      v28[9] = v23;
      v28[10] = v87;
      v21 = *((_QWORD *)a3 + 3);
      v22 = *((_QWORD *)a3 + 4);
      v29 = *((_QWORD *)a3 + 5);
LABEL_44:
      v49 = *(_QWORD *)a3;
      v50 = *((_QWORD *)a3 + 1);
      v51 = *((_QWORD *)a3 + 2);
      *((_OWORD *)a3 + 1) = 0u;
      *((_OWORD *)a3 + 2) = 0u;
      *(_OWORD *)a3 = 0u;
      *((_QWORD *)a3 + 6) = 0;
      outlined consume of Text.Layout.Decorations.Segment?(v49, v50, v51, v21, v22, v29);
      result = CTLineDecorationGetSegment();
      v52 = *(_QWORD *)(result + 56);
      v53 = *(_QWORD *)(result + 64);
      v54 = __OFADD__(v52, v53);
      v55 = v52 + v53;
      if (v54)
      {
        __break(1u);
      }
      else if (v55 >= v52)
      {
        *a5 = v52;
        a5[1] = v55;
        if (v55 <= (uint64_t)a6 || v52 >= (uint64_t)v16 || a6 == v16 || v52 == v55)
          return result;
        v56 = result;
        v57 = (id)CTLineDecorationGetSegmentColor();
        v58 = (unint64_t)v57;
        if (v57)
        {
          v59 = CFGetTypeID(v57);
          if (v59 == CFNullGetTypeID())
          {
            swift_unknownObjectRelease();
            goto LABEL_53;
          }
          if (v59 == CGColorGetTypeID())
          {
            type metadata accessor for CGColorRef(0);
            swift_unknownObjectRetain();
            v73 = (void *)swift_dynamicCastUnknownClassUnconditional();
            v74 = specialized Color.Resolved.init(failableCGColor:)(v73);
            v76 = v75;
            v78 = v77;
            swift_unknownObjectRelease();
            v33 = 0;
            v58 = 0;
            LODWORD(v65) = 0;
            v66 = 0;
            if ((v78 & 1) == 0)
            {
              v58 = v74 & 0xFFFFFFFF00000000;
              v66 = v76 & 0xFFFFFFFF00000000;
              v33 = v74;
              LODWORD(v65) = v76;
            }
LABEL_59:
            v68 = *(_QWORD *)(v56 + 56);
            v67 = *(_QWORD *)(v56 + 64);
            v69 = v68 + v67;
            if (__OFADD__(v68, v67))
            {
              __break(1u);
            }
            else if (v69 >= v68)
            {
              v70 = *(_QWORD *)(v56 + 24);
              v71 = specialized _copyCollectionToContiguousArray<A>(_:)(*(char **)(v56 + 72), *(_QWORD *)(v56 + 80));
              v72 = *(_QWORD *)a3;
              v61 = *((_QWORD *)a3 + 1);
              v62 = *((_QWORD *)a3 + 2);
              v63 = *((_QWORD *)a3 + 3);
              v64 = *((_QWORD *)a3 + 4);
              v48 = *((_QWORD *)a3 + 5);
              *(_QWORD *)a3 = v58 | v33;
              *((_QWORD *)a3 + 1) = v66 | v65;
              *((_QWORD *)a3 + 2) = v70;
              *((_QWORD *)a3 + 3) = v68;
              *((_QWORD *)a3 + 4) = v69;
              *((_QWORD *)a3 + 5) = v71;
              *((_QWORD *)a3 + 6) = MEMORY[0x24BEE4AF8];
              v60 = v72;
              return outlined consume of Text.Layout.Decorations.Segment?(v60, v61, v62, v63, v64, v48);
            }
            __break(1u);
LABEL_73:
            result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v33 + 16) + 1, 1, (_QWORD *)v33);
            v33 = result;
            *((_QWORD *)a3 + 6) = result;
LABEL_34:
            v35 = *(_QWORD *)(v33 + 16);
            v34 = *(_QWORD *)(v33 + 24);
            if (v35 >= v34 >> 1)
            {
              result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v34 > 1), v35 + 1, 1, (_QWORD *)v33);
              v33 = result;
            }
            *(_QWORD *)(v33 + 16) = v35 + 1;
            v36 = v33 + 32 * v35;
            *(double *)(v36 + 32) = v15;
            *(_QWORD *)(v36 + 40) = v14;
            *(double *)(v36 + 48) = v13;
            *(_QWORD *)(v36 + 56) = v12;
            *((_QWORD *)a3 + 6) = v33;
            return result;
          }
          v79 = (void *)swift_unknownObjectRetain();
          v33 = specialized Color.Resolved.init(platformColor:)(v79);
          v65 = v80;
          v82 = v81;
          swift_unknownObjectRelease_n();
          if ((v82 & 1) == 0)
          {
            v58 = v33 & 0xFFFFFFFF00000000;
            v66 = v65 & 0xFFFFFFFF00000000;
            goto LABEL_59;
          }
LABEL_53:
          v33 = 0;
          v58 = 0;
        }
        else
        {
          v33 = 0;
        }
        LODWORD(v65) = 0;
        v66 = 0x3F80000000000000;
        goto LABEL_59;
      }
      __break(1u);
LABEL_70:
      v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v16[2] + 1, 1, v16);
      *a4 = v16;
    }
  }
  result = CTLineDecorationGetFragment();
  if (*(double *)(result + 8) == *(double *)(result + 24))
  {
    v32 = *(double *)(result + 16);
    v12 = v32 >= *(double *)result ? *(_QWORD *)(result + 24) : *(_QWORD *)(result + 8);
    v13 = v32 >= *(double *)result ? *(double *)(result + 16) : *(double *)result;
    v14 = v32 >= *(double *)result ? *(_QWORD *)(result + 8) : *(_QWORD *)(result + 24);
    v15 = v32 >= *(double *)result ? *(double *)result : *(double *)(result + 16);
    if ((a17 & 1) != 0 || (a19 & 1) != 0)
      goto LABEL_76;
    if (((a20 & 1) == 0 || (_QWORD *)*a5 != a6) && v15 < *(double *)&a8)
      v15 = *(double *)&a8;
    if (((a20 & 2) == 0 || (_QWORD *)a5[1] != v16) && v13 >= a18)
      v13 = a18;
    if (v15 < v13)
    {
LABEL_76:
      if (*((_QWORD *)a3 + 5))
      {
        v33 = *((_QWORD *)a3 + 6);
        result = swift_isUniquelyReferenced_nonNull_native();
        *((_QWORD *)a3 + 6) = v33;
        if ((result & 1) == 0)
          goto LABEL_73;
        goto LABEL_34;
      }
    }
  }
  return result;
}

uint64_t Text.Layout.Decorations.startIndex.getter()
{
  return 0;
}

uint64_t Text.Layout.Decorations.endIndex.getter()
{
  uint64_t v0;

  return *(_QWORD *)(*(_QWORD *)v0 + 16);
}

unint64_t Text.Layout.Decorations.subscript.getter@<X0>(unint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(_QWORD *)(*(_QWORD *)v2 + 16) > result)
  {
    v3 = *(_QWORD *)v2 + 56 * result;
    v4 = *(_QWORD *)(v3 + 48);
    v5 = *(_QWORD *)(v3 + 72);
    v6 = *(_QWORD *)(v3 + 80);
    *(_OWORD *)a2 = *(_OWORD *)(v3 + 32);
    *(_QWORD *)(a2 + 16) = v4;
    *(_OWORD *)(a2 + 24) = *(_OWORD *)(v3 + 56);
    *(_QWORD *)(a2 + 40) = v5;
    *(_QWORD *)(a2 + 48) = v6;
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  __break(1u);
  return result;
}

uint64_t (*protocol witness for Collection.subscript.read in conformance Text.Layout.Decorations(void (***a1)(void **a1), unint64_t *a2))()
{
  void (**v4)(void **);

  v4 = (void (**)(void **))malloc(0x28uLL);
  *a1 = v4;
  v4[4] = Text.Layout.Decorations.subscript.read(v4, *a2);
  return protocol witness for Animatable.animatableData.modify in conformance LinearGradient._Paint;
}

void (*Text.Layout.Decorations.subscript.read(void (**a1)(void **a1), unint64_t a2))(void **a1)
{
  uint64_t v2;
  void (*result)(void **);
  void (*v6)(void **);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;

  result = (void (*)(void **))malloc(0x38uLL);
  *a1 = result;
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(_QWORD *)(*(_QWORD *)v2 + 16) > a2)
  {
    v6 = result;
    v7 = *(_QWORD *)v2 + 56 * a2;
    v8 = *(_QWORD *)(v7 + 48);
    v9 = *(_QWORD *)(v7 + 72);
    v10 = *(_QWORD *)(v7 + 80);
    v11 = *(_OWORD *)(v7 + 56);
    *(_OWORD *)v6 = *(_OWORD *)(v7 + 32);
    *((_QWORD *)v6 + 2) = v8;
    *(_OWORD *)((char *)v6 + 24) = v11;
    *((_QWORD *)v6 + 5) = v9;
    *((_QWORD *)v6 + 6) = v10;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return Text.Layout.Decorations.subscript.read;
  }
  __break(1u);
  return result;
}

void Text.Layout.Decorations.subscript.read(void **a1)
{
  void *v1;

  v1 = *a1;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  free(v1);
}

uint64_t *protocol witness for Collection.subscript.getter in conformance Text.Layout.Decorations@<X0>(uint64_t *result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t **v2;
  uint64_t v3;
  uint64_t v4;

  v3 = *result;
  if (*result < 0 || (v4 = result[1], result = *v2, (*v2)[2] < v4))
  {
    __break(1u);
  }
  else
  {
    a2[1] = v4;
    a2[2] = result;
    *a2 = v3;
    return (uint64_t *)swift_bridgeObjectRetain();
  }
  return result;
}

_QWORD *protocol witness for Sequence._copyToContiguousArray() in conformance Text.Layout.Decorations()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = specialized _copyCollectionToContiguousArray<A>(_:)(v0);
  swift_bridgeObjectRelease();
  return v1;
}

_QWORD *protocol witness for static Equatable.== infix(_:_:) in conformance Text.Layout.Cluster(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;

  if (__OFSUB__(*a2, *result))
  {
    __break(1u);
  }
  else
  {
    if (*a2 != *result)
      return 0;
    v2 = result[1];
    v3 = a2[1];
    if (!__OFSUB__(v3, v2))
    {
      if (v3 == v2)
        return (_QWORD *)specialized static Array<A>.== infix(_:_:)(result[2], a2[2]);
      return 0;
    }
  }
  __break(1u);
  return result;
}

_QWORD *protocol witness for BidirectionalCollection.index(before:) in conformance Text.Layout.Cluster@<X0>(_QWORD *result@<X0>, unint64_t *a2@<X8>)
{
  uint64_t v2;
  unint64_t v3;

  v3 = *result - 1;
  if (__OFSUB__(*result, 1))
  {
    __break(1u);
  }
  else if (v3 < *(_QWORD *)(*(_QWORD *)(v2 + 16) + 16))
  {
    *a2 = v3;
    return result;
  }
  __break(1u);
  return result;
}

unint64_t *protocol witness for BidirectionalCollection.formIndex(before:) in conformance Text.Layout.Cluster(unint64_t *result)
{
  uint64_t v1;
  unint64_t v2;

  v2 = *result - 1;
  if (__OFSUB__(*result, 1))
  {
    __break(1u);
  }
  else if (v2 < *(_QWORD *)(*(_QWORD *)(v1 + 16) + 16))
  {
    *result = v2;
    return result;
  }
  __break(1u);
  return result;
}

void protocol witness for Collection.endIndex.getter in conformance Text.Layout.Cluster(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_QWORD *)(*(_QWORD *)(v1 + 16) + 16);
}

uint64_t (*protocol witness for Collection.subscript.read in conformance Text.Layout.Cluster(uint64_t (***a1)(), unint64_t *a2))()
{
  uint64_t *v2;
  uint64_t (**v5)();

  v5 = (uint64_t (**)())malloc(0x28uLL);
  *a1 = v5;
  v5[4] = Text.Layout.Cluster.subscript.read(v5, *a2, *v2, v2[1], v2[2]);
  return protocol witness for Animatable.animatableData.modify in conformance LinearGradient._Paint;
}

uint64_t (*Text.Layout.Cluster.subscript.read(uint64_t (**a1)(), unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5))()
{
  uint64_t (*result)();
  uint64_t v9;
  uint64_t v10;
  void *v11;
  int v12;
  uint64_t v13;
  id v14;

  result = (uint64_t (*)())malloc(0x40uLL);
  *a1 = result;
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(_QWORD *)(a5 + 16) > a2)
  {
    v9 = a5 + (a2 << 6);
    v11 = *(void **)(v9 + 32);
    v10 = *(_QWORD *)(v9 + 40);
    v12 = *(_DWORD *)(v9 + 64);
    v13 = *(_QWORD *)(v9 + 88);
    *(_QWORD *)result = v11;
    *((_QWORD *)result + 1) = v10;
    *((_OWORD *)result + 1) = *(_OWORD *)(v9 + 48);
    *((_DWORD *)result + 8) = v12;
    *(_OWORD *)((char *)result + 40) = *(_OWORD *)(v9 + 72);
    *((_QWORD *)result + 7) = v13;
    swift_retain();
    v14 = v11;
    return protocol witness for Collection.subscript.read in conformance Text.Layout.Run;
  }
  __break(1u);
  return result;
}

uint64_t *protocol witness for Collection.subscript.getter in conformance Text.Layout.Cluster@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v3 = *result;
  if (*result < 0 || (v4 = result[1], result = *(uint64_t **)(v2 + 16), result[2] < v4))
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)a2 = v3;
    *(_QWORD *)(a2 + 8) = v4;
    *(_OWORD *)(a2 + 16) = *(_OWORD *)v2;
    *(_QWORD *)(a2 + 32) = result;
    return (uint64_t *)swift_bridgeObjectRetain();
  }
  return result;
}

void protocol witness for Collection.indices.getter in conformance Text.Layout.Cluster(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)(v1 + 16) + 16);
  *a1 = 0;
  a1[1] = v2;
}

BOOL protocol witness for Collection.isEmpty.getter in conformance Text.Layout.Cluster()
{
  uint64_t v0;

  return *(_QWORD *)(*(_QWORD *)(v0 + 16) + 16) == 0;
}

_QWORD *protocol witness for RandomAccessCollection.index(_:offsetBy:) in conformance Text.Layout.Cluster@<X0>(_QWORD *result@<X0>, uint64_t a2@<X1>, unint64_t *a3@<X8>)
{
  uint64_t v3;
  unint64_t v4;

  v4 = *result + a2;
  if (__OFADD__(*result, a2))
  {
    __break(1u);
  }
  else if (v4 <= *(_QWORD *)(*(_QWORD *)(v3 + 16) + 16))
  {
    *a3 = v4;
    return result;
  }
  __break(1u);
  return result;
}

unint64_t protocol witness for RandomAccessCollection.index(_:offsetBy:limitedBy:) in conformance Text.Layout.Cluster@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X1>, unint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t *v4;
  unint64_t result;
  char v7;

  result = specialized RandomAccessCollection.index(_:offsetBy:limitedBy:)(*a1, a2, *a3, *v4, v4[1], v4[2]);
  *(_QWORD *)a4 = result;
  *(_BYTE *)(a4 + 8) = v7 & 1;
  return result;
}

unint64_t *protocol witness for RandomAccessCollection.distance(from:to:) in conformance Text.Layout.Cluster(unint64_t *result, unint64_t *a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v3 = *a2;
  v4 = *(_QWORD *)(*(_QWORD *)(v2 + 16) + 16);
  if (*result <= v4 && v3 <= v4)
    return (unint64_t *)(v3 - *result);
  __break(1u);
  return result;
}

_QWORD *protocol witness for Collection.index(after:) in conformance Text.Layout.Cluster@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  if (*result >= *(_QWORD *)(*(_QWORD *)(v2 + 16) + 16))
    __break(1u);
  else
    *a2 = *result + 1;
  return result;
}

_QWORD *protocol witness for Collection.formIndex(after:) in conformance Text.Layout.Cluster(_QWORD *result)
{
  uint64_t v1;

  if (*result >= *(_QWORD *)(*(_QWORD *)(v1 + 16) + 16))
    __break(1u);
  else
    ++*result;
  return result;
}

__n128 protocol witness for Sequence.makeIterator() in conformance Text.Layout.Cluster@<Q0>(__n128 *a1@<X8>)
{
  __n128 *v1;
  unint64_t v2;
  __n128 result;

  v2 = v1[1].n128_u64[0];
  result = *v1;
  *a1 = *v1;
  a1[1].n128_u64[0] = v2;
  a1[1].n128_u64[1] = 0;
  return result;
}

uint64_t protocol witness for Sequence.underestimatedCount.getter in conformance Text.Layout.Cluster()
{
  uint64_t v0;

  return *(_QWORD *)(*(_QWORD *)(v0 + 16) + 16);
}

_QWORD *protocol witness for Sequence._copyToContiguousArray() in conformance Text.Layout.Cluster()
{
  uint64_t *v0;
  _QWORD *v1;

  v1 = specialized _copyCollectionToContiguousArray<A>(_:)(*v0, v0[1], v0[2]);
  swift_bridgeObjectRelease();
  return v1;
}

_QWORD *protocol witness for Sequence._copyContents(initializing:) in conformance Text.Layout.Cluster(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;

  return specialized Sequence._copyContents(initializing:)(a1, a2, a3, *v3, v3[1], v3[2]);
}

char *Text.Layout.Line.clusters(for:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(char *, uint64_t);
  char *v16;
  uint64_t v17;
  char *result;
  void *v19;
  char *v20;
  uint64_t v21;
  void (*v22)(_QWORD *, _QWORD);
  CFIndex *v23;
  CFIndex v24;
  CFIndex v25;
  id v26;
  uint64_t v27;
  _QWORD *v28;
  char *v29;
  _QWORD *v30;
  CFIndex v31;
  char *v32;
  CFIndex v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  _QWORD *v38;
  _QWORD *v39;
  uint64_t v40;
  unint64_t v41;
  char *v42;
  int v43;
  uint64_t v44;
  void *v45;
  _QWORD *v46;
  uint64_t v47;
  void (*v48)(char *, uint64_t);
  void (*v49)(char *, char *, uint64_t);
  int v50;
  _QWORD v51[2];
  char v52;
  uint64_t v53;
  uint64_t v54;
  int v55;

  type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for RangeSet<Text.Layout.CharacterIndex>.Ranges, (uint64_t (*)(void))lazy protocol witness table accessor for type Text.Layout.CharacterIndex and conformance Text.Layout.CharacterIndex, (uint64_t)&type metadata for Text.Layout.CharacterIndex, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE4908]);
  v2 = v1;
  v3 = *(_QWORD *)(v1 - 8);
  MEMORY[0x24BDAC7A8](v1);
  v5 = (char *)&v41 - v4;
  type metadata accessor for IndexingIterator<RangeSet<Text.Layout.CharacterIndex>.Ranges>();
  v7 = v6;
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v41 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v41 - v11;
  v45 = *(void **)v0;
  v47 = *(_QWORD *)(v0 + 8);
  v50 = *(unsigned __int8 *)(v0 + 16);
  v13 = *(_QWORD *)(v0 + 24);
  v14 = *(_QWORD *)(v0 + 32);
  v43 = *(_DWORD *)(v0 + 40);
  type metadata accessor for FontBox<Font.SystemProvider>(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<Text.Layout.CharacterIndex>, (uint64_t (*)(void))lazy protocol witness table accessor for type Text.Layout.CharacterIndex and conformance Text.Layout.CharacterIndex, (uint64_t)&type metadata for Text.Layout.CharacterIndex, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE4968]);
  RangeSet.ranges.getter();
  v49 = *(void (**)(char *, char *, uint64_t))(v3 + 16);
  v49(v9, v5, v2);
  lazy protocol witness table accessor for type RangeSet<Text.Layout.CharacterIndex>.Ranges and conformance RangeSet<A>.Ranges();
  dispatch thunk of Collection.startIndex.getter();
  v15 = *(void (**)(char *, uint64_t))(v3 + 8);
  v42 = v5;
  v48 = v15;
  v15(v5, v2);
  *(_QWORD *)&v9[*(int *)(v7 + 36)] = v51[0];
  outlined init with take of LocalizedStringKey.FormatArgument((uint64_t)v9, (uint64_t)v12, (uint64_t (*)(_QWORD))type metadata accessor for IndexingIterator<RangeSet<Text.Layout.CharacterIndex>.Ranges>);
  v16 = &v12[*(int *)(v7 + 36)];
  v17 = *(_QWORD *)v16;
  dispatch thunk of Collection.endIndex.getter();
  if (v17 == v51[0])
  {
    v46 = (_QWORD *)MEMORY[0x24BEE4AF8];
    goto LABEL_3;
  }
  v46 = (_QWORD *)MEMORY[0x24BEE4AF8];
  v19 = v45;
  while (2)
  {
    v20 = v42;
    while (1)
    {
      v22 = (void (*)(_QWORD *, _QWORD))dispatch thunk of Collection.subscript.read();
      v25 = *v23;
      v24 = v23[1];
      v22(v51, 0);
      v49(v20, v12, v2);
      dispatch thunk of Collection.formIndex(after:)();
      v48(v20, v2);
      if ((v50 & 1) != 0)
        break;
      outlined copy of Text.Layout.Line.Line(v19, v47, 0);
      swift_release();
      v26 = v19;
      if (v25 < v24)
        goto LABEL_13;
LABEL_6:

LABEL_7:
      v21 = *(_QWORD *)v16;
      dispatch thunk of Collection.endIndex.getter();
      if (v21 == v51[0])
        goto LABEL_3;
    }
    v26 = (id)_NSTextLineFragmentGetCTLine(v19);
    if (!v26)
      goto LABEL_7;
    if (v25 >= v24)
      goto LABEL_6;
LABEL_13:
    result = (char *)CTLineGetRangeOfCharacterClusterAtIndex();
    if (result == (char *)-1)
      goto LABEL_6;
    do
    {
      v29 = &result[v27];
      if (__OFADD__(result, v27))
      {
        __break(1u);
LABEL_40:
        __break(1u);
LABEL_41:
        __break(1u);
        return result;
      }
      if ((uint64_t)v29 < (uint64_t)result)
        goto LABEL_40;
      if (v24 >= (uint64_t)result)
        v30 = result;
      else
        v30 = (_QWORD *)v24;
      if ((uint64_t)result >= v25)
        v31 = (CFIndex)v30;
      else
        v31 = v25;
      if ((uint64_t)v29 <= v25)
        v32 = (char *)v25;
      else
        v32 = &result[v27];
      if (v24 >= (uint64_t)v29)
        v33 = (CFIndex)v32;
      else
        v33 = v24;
      if (__OFSUB__(v33, v31))
        goto LABEL_41;
      if (v33 != v31)
      {
        v51[0] = v45;
        v51[1] = v47;
        v52 = v50;
        v53 = v13;
        v54 = v14;
        v55 = v43;
        Text.Layout.Line.slices(for:)(v31, v33);
        v44 = v34;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v46 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v46[2] + 1, 1, v46);
        v36 = v46[2];
        v35 = v46[3];
        v37 = v36 + 1;
        if (v36 >= v35 >> 1)
        {
          v41 = v36 + 1;
          v28 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v35 > 1), v36 + 1, 1, v46);
          v37 = v41;
          v46 = v28;
        }
        v38 = v46;
        v46[2] = v37;
        v39 = &v38[3 * v36];
        v39[4] = v31;
        v39[5] = v33;
        v39[6] = v44;
      }
      v19 = v45;
      if (v33 >= v24)
        break;
      result = (char *)CTLineGetRangeOfCharacterClusterAtIndex();
    }
    while (result != (char *)-1);

    v40 = *(_QWORD *)v16;
    dispatch thunk of Collection.endIndex.getter();
    if (v40 != v51[0])
      continue;
    break;
  }
LABEL_3:
  outlined destroy of IndexingIterator<RangeSet<Text.Layout.CharacterIndex>.Ranges>((uint64_t)v12);
  return (char *)v46;
}

void Text.Layout.Line.slices(for:)(CFIndex a1, CFIndex a2)
{
  uint64_t v2;
  uint64_t v5;
  void *v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  const __CFArray *v11;
  BOOL v12;
  const __CTLine *v13;
  uint64_t v14;
  uint64_t v15;
  CFIndex v16;
  const __CTLine *v17;
  const __CFArray *RunCount;
  id v19;
  void *v20;
  char v21;
  const __CTLine *v22;
  const __CFArray *v23;
  const __CTLine *v24;
  const __CFArray *v25;
  const __CTLine *v26;
  void *v27;
  CFRange StringRange;
  CFIndex v29;
  const __CTLine *v30;
  const __CTLine *v31;
  void *v32;
  CFIndex GlyphCount;
  _QWORD *v34;
  uint64_t v35;
  const __CTLine *v36;
  uint64_t v37;
  _QWORD *v38;
  _QWORD *v39;
  _QWORD *v40;
  CFIndex v41;
  uint64_t v42;
  CFIndex v44;
  unint64_t v45;
  unint64_t v46;
  _QWORD *v47;
  unint64_t v48;
  void *v49;
  int v50;
  uint64_t v51;
  int v52;
  BOOL v53;
  CFIndex v54;
  CFIndex v55;
  _QWORD v56[4];
  int v57;
  const __CFArray *v58;

  v6 = *(void **)v2;
  v5 = *(_QWORD *)(v2 + 8);
  v7 = *(unsigned __int8 *)(v2 + 16);
  v8 = *(_QWORD *)(v2 + 24);
  v9 = *(_QWORD *)(v2 + 32);
  v10 = *(_DWORD *)(v2 + 40);
  outlined copy of Text.Layout.Line.Line(*(void **)v2, v5, v7);
  v11 = 0;
  v55 = a1;
  v12 = __OFSUB__(a2, a1);
  v52 = v10;
  v53 = v12;
  v51 = v5;
  v50 = v7;
  v49 = v6;
  while (1)
  {
    v54 = (CFIndex)v11;
    if ((v7 & 1) != 0)
    {
      v17 = (const __CTLine *)(id)_NSTextLineFragmentGetCTLine(v6);
      if (!v17)
      {
        if (!v11)
        {
          LOBYTE(v7) = 1;
LABEL_52:
          outlined consume of Text.Layout.Line.Line(v6, v5, v7);
          return;
        }
        goto LABEL_15;
      }
    }
    else
    {
      outlined copy of Text.Layout.Line.Line(v6, v5, 0);
      swift_release();
      v17 = (const __CTLine *)v6;
    }
    RunCount = _CTLineGetRunCount(v17);

    if (v11 == RunCount)
      goto LABEL_52;
    if (!v7)
    {
      outlined copy of Text.Layout.Line.Line(v6, v5, 0);
      swift_release();
      outlined copy of Text.Layout.Line.Line(v6, v5, 0);

      outlined copy of Text.Layout.Line.Line(v6, v5, 0);
      outlined copy of Text.Layout.Line.Line(v6, v5, 0);
      swift_release();
      v24 = (const __CTLine *)v6;
      v20 = v6;
      v23 = (const __CFArray *)v5;
      goto LABEL_19;
    }
LABEL_15:
    v19 = (id)_NSTextLineFragmentGetCTLine(v6);
    if (!v19)
      goto LABEL_61;
    v20 = v19;
    v21 = 1;
    outlined copy of Text.Layout.Line.Line(v6, v5, 1);
    v22 = (const __CTLine *)(id)_NSTextLineFragmentGetCTLine(v6);
    v23 = 0;
    if (v22)
    {
      v24 = v22;
LABEL_19:
      v25 = v23;
      v23 = _CTLineGetRunCount(v24);

      v21 = v7;
      goto LABEL_21;
    }
    v25 = 0;
LABEL_21:
    outlined consume of Text.Layout.Line.Line(v6, v5, v21);
    v56[0] = v20;
    v56[1] = v54;
    v56[2] = v8;
    v56[3] = v9;
    v57 = v10;
    v58 = v25;
    if (v54 >= (uint64_t)v23)
      break;
    swift_retain();
    v26 = v20;
    v27 = (id)_CTLineGetRunAtIndex(v26, v54);
    StringRange = CTRunGetStringRange((CTRunRef)v27);
    swift_release();

    v29 = StringRange.location + StringRange.length;
    if (__OFADD__(StringRange.location, StringRange.length))
      goto LABEL_54;
    if (v29 < StringRange.location)
      goto LABEL_55;
    if (StringRange.location >= a2)
      goto LABEL_6;
    v16 = v54;
    if (v29 > v55)
    {
      if (__OFSUB__(v29, StringRange.location))
        goto LABEL_56;
      if (v29 != StringRange.location)
      {
        if (v53)
          goto LABEL_59;
        if (a2 != v55)
        {
          v30 = v26;
          swift_retain_n();
          v31 = v30;
          v32 = (id)_CTLineGetRunAtIndex(v31, v54);
          GlyphCount = CTRunGetGlyphCount((CTRunRef)v32);
          swift_release();

          if (GlyphCount < 0)
            goto LABEL_60;
          v34 = Text.Layout.RunSlice.characterIndices.getter();
          swift_release();

          v35 = v34[2];
          v36 = v31;
          if (v35)
          {
            v37 = 0;
            v38 = v34 + 4;
            v39 = (_QWORD *)MEMORY[0x24BEE4AF8];
            do
            {
              v41 = v38[v37];
              v42 = v37 + 1;
              if (v41 >= v55 && v41 < a2)
              {
                v44 = a2;
                v45 = v39[2];
                if (v45 && (v46 = v45 - 1, v47 = &v39[2 * v45 - 2], v37 == v47[5]))
                {
                  v37 = v47[4];
                  if (v42 < v37)
                    goto LABEL_57;
                  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
                    v39 = specialized _ArrayBuffer._consumeAndCreateNew()(v39);
                  if (v45 > v39[2])
                    goto LABEL_58;
                }
                else
                {
                  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
                    v39 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v45 + 1, 1, v39);
                  v46 = v39[2];
                  v48 = v39[3];
                  if (v46 >= v48 >> 1)
                    v39 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v48 > 1), v46 + 1, 1, v39);
                  v39[2] = v46 + 1;
                }
                v40 = &v39[2 * v46];
                v40[4] = v37;
                v40[5] = v42;
                a2 = v44;
              }
              v37 = v42;
            }
            while (v35 != v42);
          }
          swift_bridgeObjectRelease();
          v13 = v36;
          swift_retain();
          v14 = swift_bridgeObjectRetain();
          v15 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySnySiGG_7SwiftUI4TextV6LayoutV8RunSliceVs5NeverOTg503_s7d3UI4f2V6g64V4LineVAAE6slices33_7F70C8A76EE0356881289646072938C03forSayAE8hI41VGSnyAE14CharacterIndexVG_tFALSnySiGXEfU_AL0H0VTf1cn_nTf4ng_n(v14, (uint64_t)v56);
          swift_bridgeObjectRelease_n();
          swift_release();

          specialized Array.append<A>(contentsOf:)(v15);
          v5 = v51;
          v7 = v50;
          v6 = v49;
          v10 = v52;
LABEL_6:
          v16 = v54;
        }
      }
    }
    v11 = (const __CFArray *)(v16 + 1);
    swift_release();

  }
  __break(1u);
LABEL_54:
  __break(1u);
LABEL_55:
  __break(1u);
LABEL_56:
  __break(1u);
LABEL_57:
  __break(1u);
LABEL_58:
  __break(1u);
LABEL_59:
  __break(1u);
LABEL_60:
  __break(1u);
LABEL_61:
  __break(1u);
}

uint64_t GraphicsContext.draw(_:)(uint64_t *a1, uint64_t a2)
{
  uint64_t result;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  unsigned __int8 v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void **v20;
  int v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  void *v25;
  id v26;
  int v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  __int128 v40;
  __int128 v41;
  char v42;
  unint64_t v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  char v48;
  _QWORD v49[4];
  unsigned __int8 v50;
  uint64_t v51;

  v51 = *MEMORY[0x24BDAC8D0];
  result = *a1;
  v3 = *(_QWORD *)(result + 16);
  if (v3)
  {
    v4 = a2;
    v34 = result + 32;
    v5 = 0;
    v33 = swift_bridgeObjectRetain();
    while (1)
    {
      if (v5 >= v3)
      {
LABEL_51:
        __break(1u);
LABEL_52:
        __break(1u);
LABEL_53:
        __break(1u);
LABEL_54:
        __break(1u);
LABEL_55:
        __break(1u);
      }
      v35 = v5;
      v6 = v34 + 56 * v5;
      v7 = *(_QWORD *)(v6 + 16);
      v9 = *(_QWORD *)(v6 + 40);
      v8 = *(_QWORD *)(v6 + 48);
      type metadata accessor for FontBox<Font.SystemProvider>(0, (unint64_t *)&lazy cache variable for type metadata for ColorBox<ResolvedColorProvider>, (uint64_t (*)(void))lazy protocol witness table accessor for type ResolvedColorProvider and conformance ResolvedColorProvider, (uint64_t)&type metadata for ResolvedColorProvider, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ColorBox);
      v38 = swift_allocObject();
      *(_OWORD *)(v38 + 16) = *(_OWORD *)v6;
      v10 = *(_QWORD *)(v8 + 16);
      if (v10)
        break;
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain_n();
LABEL_4:
      v5 = v35 + 1;
      swift_release();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      v3 = *(_QWORD *)(v33 + 16);
      if (v35 + 1 == v3)
        return swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    v11 = 0;
    v12 = (uint64_t *)(v8 + 56);
    v37 = v8;
    while (1)
    {
      if (v11 >= v10)
      {
        __break(1u);
        goto LABEL_51;
      }
      v15 = *(v12 - 3);
      v16 = *(v12 - 2);
      v17 = *(v12 - 1);
      v18 = *v12;
      type metadata accessor for Path.PathBox();
      v19 = swift_allocObject();
      *(_OWORD *)(v19 + 24) = 0u;
      v20 = (void **)(v19 + 24);
      *(_OWORD *)(v19 + 104) = 0u;
      *(_OWORD *)(v19 + 88) = 0u;
      *(_OWORD *)(v19 + 72) = 0u;
      *(_OWORD *)(v19 + 56) = 0u;
      *(_OWORD *)(v19 + 40) = 0u;
      *(_BYTE *)(v19 + 16) = 2;
      RBPathStorageInit();
      v21 = *(unsigned __int8 *)(v19 + 16);
      swift_retain();
      if (v21 != 2)
      {
        Path.PathBox.prepareBuffer()();
        if (*(_BYTE *)(v19 + 16) != 2)
          Path.PathBox.prepareBuffer()();
      }
      v43 = v15;
      *(_QWORD *)&v44 = v16;
      MEMORY[0x23B7C9088](v20, 0, &v43, 0);
      swift_release();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
      {
        v22 = v19;
      }
      else
      {
        v22 = swift_allocObject();
        *(_OWORD *)(v22 + 24) = 0u;
        *(_OWORD *)(v22 + 104) = 0u;
        *(_OWORD *)(v22 + 88) = 0u;
        *(_OWORD *)(v22 + 72) = 0u;
        *(_OWORD *)(v22 + 56) = 0u;
        *(_OWORD *)(v22 + 40) = 0u;
        v23 = *(unsigned __int8 *)(v19 + 16);
        *(_BYTE *)(v22 + 16) = v23;
        if (v23)
        {
          if (v23 == 1)
          {
            swift_retain();
            *(_QWORD *)(v22 + 24) = RBPathRetain();
            *(_QWORD *)(v22 + 32) = v24;
            swift_release();
          }
          else
          {
            RBPathStorageInit();
          }
        }
        else
        {
          v25 = *v20;
          if (!*v20)
            goto LABEL_53;
          *(_QWORD *)(v22 + 24) = v25;
          v26 = v25;
        }
        swift_release();
      }
      v27 = *(unsigned __int8 *)(v22 + 16);
      swift_retain();
      if (v27 != 2)
        Path.PathBox.prepareBuffer()();
      v28 = (_QWORD *)(v22 + 24);
      v43 = v17;
      *(_QWORD *)&v44 = v18;
      MEMORY[0x23B7C9088](v22 + 24, 1, &v43, 0);
      if (!*(_BYTE *)(v22 + 16))
        break;
      if (*(_BYTE *)(v22 + 16) == 1)
        goto LABEL_27;
      v29 = one-time initialization token for bufferCallbacks;
      swift_bridgeObjectRetain();
      if (v29 != -1)
        swift_once();
LABEL_32:
      if ((RBPathIsEmpty() & 1) == 0)
      {
        if (*(_BYTE *)(v22 + 16))
        {
          if (*(_BYTE *)(v22 + 16) == 1)
            goto LABEL_35;
          v30 = one-time initialization token for bufferCallbacks;
          swift_retain();
          if (v30 != -1)
            swift_once();
        }
        else
        {
          if (!*v28)
            goto LABEL_54;
LABEL_35:
          swift_retain();
        }
        RBPathRetain();
        swift_release();
        v13 = swift_allocObject();
        *(_OWORD *)(v13 + 24) = 0u;
        *(_OWORD *)(v13 + 104) = 0u;
        *(_OWORD *)(v13 + 88) = 0u;
        *(_OWORD *)(v13 + 72) = 0u;
        *(_OWORD *)(v13 + 56) = 0u;
        *(_OWORD *)(v13 + 40) = 0u;
        *(_BYTE *)(v13 + 16) = 2;
        RBPathStorageInit();
        v43 = v7;
        *(_QWORD *)&v44 = 0x4024000000000000;
        *((_QWORD *)&v44 + 1) = v15;
        v31 = *(_QWORD *)(v9 + 16);
        v39 = 0;
        *(_QWORD *)&v40 = v31;
        *((_QWORD *)&v40 + 1) = v9 + 32;
        MEMORY[0x23B7C9088](v13 + 24, 19, &v43, &v39);
        if (*(_BYTE *)(v22 + 16))
        {
          if (*(_BYTE *)(v22 + 16) == 1)
            goto LABEL_42;
          v32 = one-time initialization token for bufferCallbacks;
          swift_retain();
          if (v32 != -1)
            swift_once();
        }
        else
        {
          if (!*v28)
            goto LABEL_55;
LABEL_42:
          swift_retain();
        }
        RBPathStorageAppendPath();
        swift_release();
        MEMORY[0x23B7C9088](v13 + 24, 16, 0, 0);
        RBPathRelease();
        swift_release();
        swift_bridgeObjectRelease();
        v14 = 5;
        v4 = a2;
        goto LABEL_9;
      }
      swift_release();
      swift_bridgeObjectRelease();
      v13 = 0;
      v14 = 6;
LABEL_9:
      ++v11;
      v49[0] = v13;
      memset(&v49[1], 0, 24);
      v50 = v14;
      swift_release();
      v43 = v38;
      v44 = 0u;
      v45 = 0u;
      v46 = 0u;
      v47 = 0u;
      v48 = 1;
      v39 = 256;
      v40 = 0u;
      v41 = 0u;
      v42 = 0;
      outlined copy of Path.Storage(v13, 0, 0, 0, v14);
      swift_retain();
      GraphicsContext.draw(_:with:style:)((uint64_t)v49, &v43, &v39, v4);
      outlined consume of Path.Storage(v13, 0, 0, 0, v14);
      swift_release();
      outlined consume of Path.Storage(v13, 0, 0, 0, v14);
      v10 = *(_QWORD *)(v37 + 16);
      v12 += 4;
      if (v11 == v10)
        goto LABEL_4;
    }
    if (!*v28)
      goto LABEL_52;
LABEL_27:
    swift_bridgeObjectRetain();
    goto LABEL_32;
  }
  return result;
}

void GraphicsContext.setTextMetadata(of:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id v5;

  v2 = v1;
  v5 = (id)_CTLineGetRunAtIndex(*(const __CTLine **)a1, *(_QWORD *)(a1 + 8));
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    v3 = RBDrawingStateInit();
    type metadata accessor for GraphicsContext.Storage();
    swift_allocObject();
    v4 = swift_retain();
    *(_QWORD *)v2 = GraphicsContext.Storage.init(_:state:ownsState:resetBlending:)(v4, v3, 1, 0);
    swift_release();
  }
  _RBDrawingStateSetTextRunRange(*(_QWORD *)(*(_QWORD *)v2 + 24), (uint64_t)v5, 0, 0);

}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;

  v2 = v1;
  v3 = *(_QWORD *)(a1 + 48);
  v4 = *(_QWORD *)(a1 + 56);
  v5 = (id)_CTLineGetRunAtIndex(*(const __CTLine **)a1, *(_QWORD *)(a1 + 8));
  v6 = v4 - v3;
  if (__OFSUB__(v4, v3))
  {
    __break(1u);
  }
  else
  {
    v9 = v5;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      v7 = RBDrawingStateInit();
      type metadata accessor for GraphicsContext.Storage();
      swift_allocObject();
      v8 = swift_retain();
      *(_QWORD *)v2 = GraphicsContext.Storage.init(_:state:ownsState:resetBlending:)(v8, v7, 1, 0);
      swift_release();
    }
    _RBDrawingStateSetTextRunRange(*(_QWORD *)(*(_QWORD *)v2 + 24), (uint64_t)v9, v3, v6);

  }
}

void *closure #1 in Text.Layout.Run.foregroundColor(_:)(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, void *a5)
{
  id v6;

  *a2 = a3;
  a2[1] = a4;
  v6 = a5;
  return a5;
}

id *GlyphContext.deinit()
{
  _QWORD *v0;
  id v2;
  uint64_t v3;

  outlined init with take of AnyTextLayoutRenderer?((uint64_t)(v0 + 2), (uint64_t)&v2, (unint64_t *)&lazy cache variable for type metadata for CGContextRef?, 255, (uint64_t (*)(uint64_t))type metadata accessor for CGContextRef);
  outlined init with take of AnyTextLayoutRenderer?((uint64_t)&v2, (uint64_t)&v3, (unint64_t *)&lazy cache variable for type metadata for CGContextRef?, 255, (uint64_t (*)(uint64_t))type metadata accessor for CGContextRef);
  if (v3)
    RBDrawingStateEndCGContext();
  if (*v0 != v0[1])
    RBDrawingStateDestroy();
  return outlined release of CGContextRef?(&v2);
}

CGContextRef GlyphContext.currentContext()()
{
  uint64_t v0;
  CGContextRef result;
  uint64_t v2;
  int v3;
  id v4;
  id v5;
  CGBlendMode v6;
  double v7;
  CGContextRef c;

  result = *(CGContextRef *)(v0 + 16);
  if (result)
    return result;
  v2 = v0;
  if (*(_QWORD *)v0 == *(_QWORD *)(v0 + 8))
  {
    if ((*(_BYTE *)(v0 + 48) & 6) != 0)
      *(_QWORD *)v0 = RBDrawingStateInit();
  }
  else
  {
    RBDrawingStateAssign();
  }
  v3 = *(_DWORD *)(v0 + 48);
  if ((v3 & 2) != 0)
  {
    if (one-time initialization token for suffixNamespace != -1)
      swift_once();
    RBDrawingStateSetIdentifier2();
    v4 = ContentTransition.rbTransition.getter();
    RBDrawingStateSetTransition();

  }
  if ((v3 & 4) != 0)
  {
    v5 = ContentTransition.rbTransition.getter();
    RBDrawingStateSetTransition();

  }
  result = (CGContextRef)(id)RBDrawingStateBeginCGContext();
  *(_QWORD *)(v2 + 16) = result;
  v6 = *(_DWORD *)(v2 + 28);
  c = result;
  if (v6)
  {
    if (!result)
    {
      __break(1u);
      goto LABEL_23;
    }
    CGContextSetBlendMode(result, v6);
    result = c;
  }
  v7 = *(double *)(v2 + 32);
  if ((~*(_QWORD *)&v7 & 0x7FF0000000000000) == 0 && (*(_QWORD *)&v7 & 0xFFFFFFFFFFFFFLL) != 0)
  {
    if (result)
      return result;
    __break(1u);
  }
  if (result)
  {
    _CGContextSetShapeDistance(v7);
    result = c;
    return result;
  }
LABEL_23:
  __break(1u);
  return result;
}

uint64_t one-time initialization function for suffixNamespace()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  unint64_t v4;
  char v5;
  unint64_t v6;
  char v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t (*v13)(char *, uint64_t);
  unint64_t v14;
  uint64_t result;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;

  v0 = type metadata accessor for UUID();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x24BDAC7A8](v0);
  v3 = (char *)&v16 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  UUID.init()();
  v4 = UUID.uuid.getter();
  v5 = v4;
  v7 = v6;
  v8 = v4 >> 8;
  v9 = v4 >> 16;
  v10 = v4 >> 24;
  v11 = HIDWORD(v4);
  v12 = v4 >> 40;
  v16 = HIWORD(v4);
  v17 = HIBYTE(v4);
  v18 = v6 >> 8;
  v19 = v6 >> 16;
  v20 = v6 >> 24;
  v21 = HIDWORD(v6);
  v22 = v6 >> 40;
  v23 = HIWORD(v6);
  v13 = *(uint64_t (**)(char *, uint64_t))(v1 + 8);
  v14 = HIBYTE(v6);
  result = v13(v3, v0);
  LOBYTE(static GlyphContext.suffixNamespace) = v5;
  BYTE1(static GlyphContext.suffixNamespace) = v8;
  BYTE2(static GlyphContext.suffixNamespace) = v9;
  BYTE3(static GlyphContext.suffixNamespace) = v10;
  BYTE4(static GlyphContext.suffixNamespace) = v11;
  BYTE5(static GlyphContext.suffixNamespace) = v12;
  BYTE6(static GlyphContext.suffixNamespace) = v16;
  HIBYTE(static GlyphContext.suffixNamespace) = v17;
  byte_2561A4030 = v7;
  byte_2561A4031 = v18;
  byte_2561A4032 = v19;
  byte_2561A4033 = v20;
  byte_2561A4034 = v21;
  byte_2561A4035 = v22;
  byte_2561A4036 = v23;
  byte_2561A4037 = v14;
  return result;
}

void GlyphContext.drawAttachment(_:cgContext:)(_OWORD *a1, CGContext *a2)
{
  __int128 v3;
  __int128 v4;
  void *v5;
  uint64_t v6;
  void *v7;
  const __CFDictionary *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  id v12;
  void (*v13)(_OWORD *);
  void *v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  void (*v21)(_OWORD *);
  void *v22;
  void *v23;
  uint64_t v24;
  void *v25;
  const __CFDictionary *v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(__int128 *);
  void *v30;
  __int128 v31;
  _OWORD v32[2];
  __int128 v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  _OWORD v37[2];
  __int128 v38;
  _BYTE v39[8];
  uint64_t v40;

  v3 = a1[1];
  v37[0] = *a1;
  v37[1] = v3;
  v38 = a1[2];
  if (one-time initialization token for kitAttachment != -1)
    swift_once();
  v4 = v37[0];
  outlined retain of Text.Layout.Run((void **)v37);
  v5 = (id)_CTLineGetRunAtIndex((const __CTLine *)v4, *((CFIndex *)&v4 + 1));
  v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v7 = (void *)MEMORY[0x23B7C5DAC](v6);
  swift_bridgeObjectRelease();
  v8 = _CTRunGetAttributeValueForKey((const __CTRun *)v5, v7);

  if (v8)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v32, 0, sizeof(v32));
  }
  v9 = MEMORY[0x24BEE4AD8];
  outlined init with take of AccessibilityDataSeriesConfiguration.AxisConfiguration?((uint64_t)v32, (uint64_t)&v33, (unint64_t *)&lazy cache variable for type metadata for Any?, MEMORY[0x24BEE4AD8] + 8);
  outlined release of Text.Layout.Run((id *)v37);
  if (*((_QWORD *)&v34 + 1))
  {
    outlined init with take of Any(&v33, &v35);
    outlined init with copy of Any((uint64_t)&v35, (uint64_t)&v33);
    type metadata accessor for SwiftUITextAttachment();
    if (swift_dynamicCast())
    {
      v10 = *(void **)&v32[0];
      v32[0] = 0uLL;
      outlined retain of Text.Layout.Run((void **)v37);
      v11 = one-time initialization token for shared;
      v12 = v10;
      if (v11 != -1)
        swift_once();
      swift_beginAccess();
      v13 = *(void (**)(_OWORD *))((*MEMORY[0x24BEE4EA0] & *(_QWORD *)static CoreGlue2.shared) + 0x68);
      v14 = static CoreGlue2.shared;
      v13(v32);

      v31 = v32[0];
      specialized static GraphicsContext.renderingTo(cgContext:environment:deviceScale:content:)(a2, (uint64_t *)&v31, 0, 1, (uint64_t)v12, (uint64_t)v37);
      outlined release of Text.Layout.Run((id *)v37);

      swift_release();
      swift_release();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v35);

      return;
    }
    outlined init with copy of Any((uint64_t)&v35, (uint64_t)&v33);
    type metadata accessor for NSTextAttachment();
    if ((swift_dynamicCast() & 1) != 0)
    {
      v16 = *(void **)&v32[0];
      outlined init with take of AnyTextLayoutRenderer?((uint64_t)&v38 + 8, (uint64_t)v39, &lazy cache variable for type metadata for AnyTextLayoutRenderer?, v15, (uint64_t (*)(uint64_t))type metadata accessor for AnyTextLayoutRenderer);
      outlined init with take of AnyTextLayoutRenderer?((uint64_t)v39, (uint64_t)&v40, &lazy cache variable for type metadata for AnyTextLayoutRenderer?, v17, (uint64_t (*)(uint64_t))type metadata accessor for AnyTextLayoutRenderer);
      v18 = v40;
      if (v40)
      {
        v32[0] = 0uLL;
        outlined retain of Text.Layout.Run((void **)v37);
        outlined retain of ViewTransform((uint64_t)v39);
        v19 = one-time initialization token for shared;
        v20 = v16;
        if (v19 != -1)
          swift_once();
        swift_beginAccess();
        v21 = *(void (**)(_OWORD *))((*MEMORY[0x24BEE4EA0] & *(_QWORD *)static CoreGlue2.shared) + 0x68);
        v22 = static CoreGlue2.shared;
        v21(v32);

        v31 = v32[0];
        specialized static GraphicsContext.renderingTo(cgContext:environment:deviceScale:content:)(a2, (uint64_t *)&v31, 0, 1, v18, (uint64_t)v20, (uint64_t)v37);
        outlined release of Text.Layout.Run((id *)v37);

        swift_release();
        swift_release();
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v35);
        outlined release of ViewTransform((uint64_t)v39);
        return;
      }
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v35);

    }
    else
    {
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v35);
    }
  }
  else
  {
    outlined destroy of Any?((uint64_t)&v33);
  }
  if (one-time initialization token for customAttachment != -1)
    swift_once();
  outlined retain of Text.Layout.Run((void **)v37);
  v23 = (id)_CTLineGetRunAtIndex((const __CTLine *)v4, *((CFIndex *)&v4 + 1));
  v24 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v25 = (void *)MEMORY[0x23B7C5DAC](v24);
  swift_bridgeObjectRelease();
  v26 = _CTRunGetAttributeValueForKey((const __CTRun *)v23, v25);

  if (v26)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    v33 = 0u;
    v34 = 0u;
  }
  outlined init with take of AccessibilityDataSeriesConfiguration.AxisConfiguration?((uint64_t)&v33, (uint64_t)&v35, (unint64_t *)&lazy cache variable for type metadata for Any?, v9 + 8);
  outlined release of Text.Layout.Run((id *)v37);
  if (v36)
  {
    type metadata accessor for AnyCustomTextAttachment();
    if ((swift_dynamicCast() & 1) != 0)
    {
      v27 = v33;
      v33 = 0uLL;
      outlined retain of Text.Layout.Run((void **)v37);
      v28 = one-time initialization token for shared;
      swift_retain();
      if (v28 != -1)
        swift_once();
      swift_beginAccess();
      v29 = *(void (**)(__int128 *))((*MEMORY[0x24BEE4EA0] & *(_QWORD *)static CoreGlue2.shared) + 0x68);
      v30 = static CoreGlue2.shared;
      v29(&v33);

      v32[0] = v33;
      specialized static GraphicsContext.renderingTo(cgContext:environment:deviceScale:content:)(a2, (uint64_t *)v32, 0, 1, v27, (uint64_t)v37);
      outlined release of Text.Layout.Run((id *)v37);
      swift_release_n();
      swift_release();
      swift_release();
    }
  }
  else
  {
    outlined destroy of Any?((uint64_t)&v35);
  }
}

uint64_t specialized static Array._allocateUninitialized(_:)(uint64_t a1)
{
  uint64_t result;

  if (a1 < 0)
  {
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else if (a1)
  {
    type metadata accessor for CGPoint(0);
    result = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(_QWORD *)(result + 16) = a1;
  }
  else
  {
    return MEMORY[0x24BEE4AF8];
  }
  return result;
}

uint64_t specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t result;

  v1 = *v0;
  result = swift_isUniquelyReferenced_nonNull_native();
  *v0 = v1;
  if ((result & 1) == 0)
    return specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v1 + 16) + 1, 1);
  return result;
}

{
  return MEMORY[0x24BEE2908]();
}

uint64_t specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(uint64_t result)
{
  uint64_t v1;
  unint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 24);
  if (result + 1 > (uint64_t)(v2 >> 1))
    return specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v2 > 1, result + 1, 1);
  return result;
}

uint64_t specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(uint64_t result, double a2, double a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;

  v4 = *v3;
  *(_QWORD *)(v4 + 16) = result + 1;
  v5 = v4 + 16 * result;
  *(double *)(v5 + 32) = a2;
  *(double *)(v5 + 40) = a3;
  return result;
}

BOOL specialized static Text.Layout.Run.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  double v2;
  double v3;
  const __CTLine *v4;
  CFIndex v5;
  double v6;
  double v7;
  void *v8;
  void *v9;

  v3 = *(double *)(a1 + 16);
  v2 = *(double *)(a1 + 24);
  v4 = *(const __CTLine **)a2;
  v5 = *(_QWORD *)(a2 + 8);
  v7 = *(double *)(a2 + 16);
  v6 = *(double *)(a2 + 24);
  v8 = (id)_CTLineGetRunAtIndex(*(const __CTLine **)a1, *(_QWORD *)(a1 + 8));
  v9 = (id)_CTLineGetRunAtIndex(v4, v5);

  return v8 == v9 && v3 == v7 && v2 == v6;
}

BOOL specialized static Text.Layout.Line.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  _BOOL4 v4;
  _BOOL4 v5;

  if (*(double *)(a1 + 24) != *(double *)(a2 + 24) || *(double *)(a1 + 32) != *(double *)(a2 + 32))
    return 0;
  v4 = *(_QWORD *)a1 == *(_QWORD *)a2;
  if ((*(_BYTE *)(a2 + 16) & 1) == 0)
    v4 = 0;
  v5 = *(_QWORD *)a1 == *(_QWORD *)a2;
  if ((*(_BYTE *)(a2 + 16) & 1) != 0)
    v5 = 0;
  if ((*(_BYTE *)(a1 + 16) & 1) != 0)
    return v4;
  else
    return v5;
}

BOOL specialized static Text.Layout.RunSlice.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  CFIndex v2;
  void *v3;
  double v4;
  double v5;
  uint64_t v6;
  uint64_t v7;
  CFIndex v8;
  void *v9;
  double v10;
  double v11;
  uint64_t v12;
  uint64_t v13;
  const __CTLine *v14;
  const __CTLine *v15;
  void *v16;
  void *v17;
  _BOOL8 result;

  v3 = *(void **)a1;
  v2 = *(_QWORD *)(a1 + 8);
  v5 = *(double *)(a1 + 16);
  v4 = *(double *)(a1 + 24);
  v6 = *(_QWORD *)(a1 + 48);
  v7 = *(_QWORD *)(a1 + 56);
  v9 = *(void **)a2;
  v8 = *(_QWORD *)(a2 + 8);
  v11 = *(double *)(a2 + 16);
  v10 = *(double *)(a2 + 24);
  v12 = *(_QWORD *)(a2 + 48);
  v13 = *(_QWORD *)(a2 + 56);
  swift_retain();
  v14 = v3;
  swift_retain();
  v15 = v9;
  v16 = (id)_CTLineGetRunAtIndex(v14, v2);
  v17 = (id)_CTLineGetRunAtIndex(v15, v8);
  swift_release();

  swift_release();
  result = 0;
  if (v16 == v17 && v5 == v11 && v4 == v10)
    return v6 == v12 && v7 == v13;
  return result;
}

uint64_t specialized static Text.LayoutKey.AnchoredLayout.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(unsigned __int8 *)(a1 + 16);
  v4 = *(_QWORD *)(a1 + 24);
  v5 = *(_QWORD *)(a2 + 8);
  v6 = *(unsigned __int8 *)(a2 + 16);
  v7 = *(_QWORD *)(a2 + 24);
  if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)a1 + 104))(*(_QWORD *)a2) & 1) != 0)
    return specialized static Array<A>.== infix(_:_:)(v2, v5) & ~(v3 ^ v6) & (v4 == v7);
  else
    return 0;
}

void specialized Text.Layout.TypographicBounds.init(run:range:)(const __CTRun *a1@<X0>, CFRange a2@<X2:X1>, CGFloat *a3@<X8>)
{
  CFIndex length;
  CFIndex location;
  CGFloat v7;
  CGFloat v8;
  double TypographicBounds;
  CGFloat v10;
  double v11;
  CGFloat v12;
  CGPoint v13;
  CGFloat leading;
  CGFloat descent;
  CGFloat ascent;
  CGPoint buffer;
  uint64_t v18;
  CFRange v19;
  CFRange v20;

  length = a2.length;
  location = a2.location;
  v18 = *MEMORY[0x24BDAC8D0];
  buffer.x = 0.0;
  buffer.y = 0.0;
  descent = 0.0;
  ascent = 0.0;
  v13.y = 0.0;
  leading = 0.0;
  v13.x = 0.0;
  a2.length = 1;
  CTRunGetPositions(a1, a2, &buffer);
  v19.location = location;
  v19.length = 1;
  CTRunGetBaseAdvancesAndOrigins(a1, v19, 0, &v13);
  v7 = buffer.x - v13.x;
  v8 = buffer.y - v13.y;
  v20.location = location;
  v20.length = length;
  TypographicBounds = CTRunGetTypographicBounds(a1, v20, &ascent, &descent, &leading);
  v10 = ascent;
  v11 = fabs(descent);
  v12 = leading;
  *a3 = v7;
  a3[1] = -v8;
  a3[2] = TypographicBounds;
  a3[3] = v10;
  a3[4] = v11;
  a3[5] = v12;
}

uint64_t sub_234FBFA28()
{
  uint64_t v0;

  return swift_deallocObject();
}

void *_s7SwiftUI4TextV6LayoutV3RunVAAE15foregroundColoryAgA0G0V8ResolvedVSgFs9UnmanagedVySo15CFDictionaryRefaGSgSi_SpySo7CFRangeaGtXEfU_TA_0(uint64_t a1, _OWORD *a2)
{
  uint64_t v2;
  void *v3;
  id v4;

  v3 = *(void **)(v2 + 32);
  *a2 = *(_OWORD *)(v2 + 16);
  v4 = v3;
  return v3;
}

uint64_t sub_234FBFA78()
{
  return swift_deallocObject();
}

uint64_t block_copy_helper_26(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_26()
{
  return swift_release();
}

uint64_t type metadata accessor for TextAttributeModifier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for TextAttributeModifier);
}

uint64_t partial apply for closure #1 in static _TextRendererViewModifier._makeViewInputs(modifier:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return closure #1 in static _TextRendererViewModifier._makeViewInputs(modifier:inputs:)(a1, *(_QWORD *)(v4 + 16), *(_QWORD *)(v4 + 24), a4);
}

uint64_t type metadata accessor for _TextRendererViewModifier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for _TextRendererViewModifier);
}

uint64_t type metadata accessor for _TextRendererViewModifier.MakeTextRenderer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for _TextRendererViewModifier.MakeTextRenderer);
}

uint64_t _s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA12StatefulRuleRd__lufcADSPyqd__GXEfU_TA_9@<X0>(_DWORD *a1@<X8>)
{
  type metadata accessor for TextRendererBoxBase();
  return closure #1 in Attribute.init<A>(_:)(a1);
}

uint64_t type metadata accessor for TextRendererBoxBase()
{
  return objc_opt_self();
}

uint64_t base witness table accessor for Equatable in TextAttributeModifierBase(uint64_t a1, uint64_t a2)
{
  return lazy protocol witness table accessor for type AnyTextSizingModifier and conformance AnyTextSizingModifier(&lazy protocol witness table cache variable for type TextAttributeModifierBase and conformance TextAttributeModifierBase, a2, (uint64_t (*)(uint64_t))type metadata accessor for TextAttributeModifierBase, (uint64_t)&protocol conformance descriptor for TextAttributeModifierBase);
}

uint64_t type metadata accessor for TextAttributeModifierBase()
{
  return objc_opt_self();
}

uint64_t associated type witness table accessor for Strideable.Stride : SignedNumeric in Text.Layout.CharacterIndex()
{
  return MEMORY[0x24BEE17C0];
}

unint64_t lazy protocol witness table accessor for type Text.Layout.Line and conformance Text.Layout.Line()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Text.Layout.Line and conformance Text.Layout.Line;
  if (!lazy protocol witness table cache variable for type Text.Layout.Line and conformance Text.Layout.Line)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Text.Layout.Line, &type metadata for Text.Layout.Line);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.Layout.Line and conformance Text.Layout.Line);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Text.Layout.Line and conformance Text.Layout.Line;
  if (!lazy protocol witness table cache variable for type Text.Layout.Line and conformance Text.Layout.Line)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Text.Layout.Line, &type metadata for Text.Layout.Line);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.Layout.Line and conformance Text.Layout.Line);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Text.Layout.Line and conformance Text.Layout.Line;
  if (!lazy protocol witness table cache variable for type Text.Layout.Line and conformance Text.Layout.Line)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Text.Layout.Line, &type metadata for Text.Layout.Line);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.Layout.Line and conformance Text.Layout.Line);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Text.Layout.Line and conformance Text.Layout.Line;
  if (!lazy protocol witness table cache variable for type Text.Layout.Line and conformance Text.Layout.Line)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Text.Layout.Line, &type metadata for Text.Layout.Line);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.Layout.Line and conformance Text.Layout.Line);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Slice<Text.Layout.Line> and conformance <> Slice<A>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  result = lazy protocol witness table cache variable for type Slice<Text.Layout.Line> and conformance <> Slice<A>;
  if (!lazy protocol witness table cache variable for type Slice<Text.Layout.Line> and conformance <> Slice<A>)
  {
    type metadata accessor for FontBox<Font.SystemProvider>(255, &lazy cache variable for type metadata for Slice<Text.Layout.Line>, (uint64_t (*)(void))lazy protocol witness table accessor for type Text.Layout.Line and conformance Text.Layout.Line, (uint64_t)&type metadata for Text.Layout.Line, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE41D8]);
    v2 = v1;
    v3 = lazy protocol witness table accessor for type Text.Layout.Line and conformance Text.Layout.Line();
    result = MEMORY[0x23B7C9C04](MEMORY[0x24BEE4230], v2, &v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Slice<Text.Layout.Line> and conformance <> Slice<A>);
  }
  return result;
}

{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  result = lazy protocol witness table cache variable for type Slice<Text.Layout.Line> and conformance <> Slice<A>;
  if (!lazy protocol witness table cache variable for type Slice<Text.Layout.Line> and conformance <> Slice<A>)
  {
    type metadata accessor for FontBox<Font.SystemProvider>(255, &lazy cache variable for type metadata for Slice<Text.Layout.Line>, (uint64_t (*)(void))lazy protocol witness table accessor for type Text.Layout.Line and conformance Text.Layout.Line, (uint64_t)&type metadata for Text.Layout.Line, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE41D8]);
    v2 = v1;
    v3 = lazy protocol witness table accessor for type Text.Layout.Line and conformance Text.Layout.Line();
    result = MEMORY[0x23B7C9C04](MEMORY[0x24BEE4218], v2, &v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Slice<Text.Layout.Line> and conformance <> Slice<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Slice<Text.Layout.Line> and conformance Slice<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type Slice<Text.Layout.Line> and conformance Slice<A>;
  if (!lazy protocol witness table cache variable for type Slice<Text.Layout.Line> and conformance Slice<A>)
  {
    type metadata accessor for FontBox<Font.SystemProvider>(255, &lazy cache variable for type metadata for Slice<Text.Layout.Line>, (uint64_t (*)(void))lazy protocol witness table accessor for type Text.Layout.Line and conformance Text.Layout.Line, (uint64_t)&type metadata for Text.Layout.Line, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE41D8]);
    result = MEMORY[0x23B7C9C04](MEMORY[0x24BEE4238], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Slice<Text.Layout.Line> and conformance Slice<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type IndexingIterator<Text.Layout.Line> and conformance IndexingIterator<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type IndexingIterator<Text.Layout.Line> and conformance IndexingIterator<A>;
  if (!lazy protocol witness table cache variable for type IndexingIterator<Text.Layout.Line> and conformance IndexingIterator<A>)
  {
    type metadata accessor for FontBox<Font.SystemProvider>(255, &lazy cache variable for type metadata for IndexingIterator<Text.Layout.Line>, (uint64_t (*)(void))lazy protocol witness table accessor for type Text.Layout.Line and conformance Text.Layout.Line, (uint64_t)&type metadata for Text.Layout.Line, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE2C00]);
    result = MEMORY[0x23B7C9C04](MEMORY[0x24BEE2C18], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IndexingIterator<Text.Layout.Line> and conformance IndexingIterator<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Text.Layout.Run and conformance Text.Layout.Run()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Text.Layout.Run and conformance Text.Layout.Run;
  if (!lazy protocol witness table cache variable for type Text.Layout.Run and conformance Text.Layout.Run)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Text.Layout.Run, &type metadata for Text.Layout.Run);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.Layout.Run and conformance Text.Layout.Run);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Text.Layout.Run and conformance Text.Layout.Run;
  if (!lazy protocol witness table cache variable for type Text.Layout.Run and conformance Text.Layout.Run)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Text.Layout.Run, &type metadata for Text.Layout.Run);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.Layout.Run and conformance Text.Layout.Run);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Text.Layout.Run and conformance Text.Layout.Run;
  if (!lazy protocol witness table cache variable for type Text.Layout.Run and conformance Text.Layout.Run)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Text.Layout.Run, &type metadata for Text.Layout.Run);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.Layout.Run and conformance Text.Layout.Run);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Text.Layout.RunSlice and conformance Text.Layout.RunSlice()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Text.Layout.RunSlice and conformance Text.Layout.RunSlice;
  if (!lazy protocol witness table cache variable for type Text.Layout.RunSlice and conformance Text.Layout.RunSlice)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Text.Layout.RunSlice, &type metadata for Text.Layout.RunSlice);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.Layout.RunSlice and conformance Text.Layout.RunSlice);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Text.Layout.RunSlice and conformance Text.Layout.RunSlice;
  if (!lazy protocol witness table cache variable for type Text.Layout.RunSlice and conformance Text.Layout.RunSlice)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Text.Layout.RunSlice, &type metadata for Text.Layout.RunSlice);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.Layout.RunSlice and conformance Text.Layout.RunSlice);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Text.Layout.RunSlice and conformance Text.Layout.RunSlice;
  if (!lazy protocol witness table cache variable for type Text.Layout.RunSlice and conformance Text.Layout.RunSlice)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Text.Layout.RunSlice, &type metadata for Text.Layout.RunSlice);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.Layout.RunSlice and conformance Text.Layout.RunSlice);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Text.Layout.RunSlice and conformance Text.Layout.RunSlice;
  if (!lazy protocol witness table cache variable for type Text.Layout.RunSlice and conformance Text.Layout.RunSlice)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Text.Layout.RunSlice, &type metadata for Text.Layout.RunSlice);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.Layout.RunSlice and conformance Text.Layout.RunSlice);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type IndexingIterator<Text.Layout.Run> and conformance IndexingIterator<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type IndexingIterator<Text.Layout.Run> and conformance IndexingIterator<A>;
  if (!lazy protocol witness table cache variable for type IndexingIterator<Text.Layout.Run> and conformance IndexingIterator<A>)
  {
    type metadata accessor for FontBox<Font.SystemProvider>(255, &lazy cache variable for type metadata for IndexingIterator<Text.Layout.Run>, (uint64_t (*)(void))lazy protocol witness table accessor for type Text.Layout.Run and conformance Text.Layout.Run, (uint64_t)&type metadata for Text.Layout.Run, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE2C00]);
    result = MEMORY[0x23B7C9C04](MEMORY[0x24BEE2C18], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IndexingIterator<Text.Layout.Run> and conformance IndexingIterator<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type IndexingIterator<Text.Layout.RunSlice> and conformance IndexingIterator<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type IndexingIterator<Text.Layout.RunSlice> and conformance IndexingIterator<A>;
  if (!lazy protocol witness table cache variable for type IndexingIterator<Text.Layout.RunSlice> and conformance IndexingIterator<A>)
  {
    type metadata accessor for FontBox<Font.SystemProvider>(255, &lazy cache variable for type metadata for IndexingIterator<Text.Layout.RunSlice>, (uint64_t (*)(void))lazy protocol witness table accessor for type Text.Layout.RunSlice and conformance Text.Layout.RunSlice, (uint64_t)&type metadata for Text.Layout.RunSlice, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE2C00]);
    result = MEMORY[0x23B7C9C04](MEMORY[0x24BEE2C18], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IndexingIterator<Text.Layout.RunSlice> and conformance IndexingIterator<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Text.Layout and conformance Text.Layout()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Text.Layout and conformance Text.Layout;
  if (!lazy protocol witness table cache variable for type Text.Layout and conformance Text.Layout)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Text.Layout, &type metadata for Text.Layout);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.Layout and conformance Text.Layout);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Text.Layout and conformance Text.Layout;
  if (!lazy protocol witness table cache variable for type Text.Layout and conformance Text.Layout)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Text.Layout, &type metadata for Text.Layout);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.Layout and conformance Text.Layout);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Text.Layout and conformance Text.Layout;
  if (!lazy protocol witness table cache variable for type Text.Layout and conformance Text.Layout)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Text.Layout, &type metadata for Text.Layout);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.Layout and conformance Text.Layout);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Text.Layout and conformance Text.Layout;
  if (!lazy protocol witness table cache variable for type Text.Layout and conformance Text.Layout)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Text.Layout, &type metadata for Text.Layout);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.Layout and conformance Text.Layout);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Slice<Text.Layout> and conformance <> Slice<A>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  result = lazy protocol witness table cache variable for type Slice<Text.Layout> and conformance <> Slice<A>;
  if (!lazy protocol witness table cache variable for type Slice<Text.Layout> and conformance <> Slice<A>)
  {
    type metadata accessor for FontBox<Font.SystemProvider>(255, &lazy cache variable for type metadata for Slice<Text.Layout>, (uint64_t (*)(void))lazy protocol witness table accessor for type Text.Layout and conformance Text.Layout, (uint64_t)&type metadata for Text.Layout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE41D8]);
    v2 = v1;
    v3 = lazy protocol witness table accessor for type Text.Layout and conformance Text.Layout();
    result = MEMORY[0x23B7C9C04](MEMORY[0x24BEE4230], v2, &v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Slice<Text.Layout> and conformance <> Slice<A>);
  }
  return result;
}

{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  result = lazy protocol witness table cache variable for type Slice<Text.Layout> and conformance <> Slice<A>;
  if (!lazy protocol witness table cache variable for type Slice<Text.Layout> and conformance <> Slice<A>)
  {
    type metadata accessor for FontBox<Font.SystemProvider>(255, &lazy cache variable for type metadata for Slice<Text.Layout>, (uint64_t (*)(void))lazy protocol witness table accessor for type Text.Layout and conformance Text.Layout, (uint64_t)&type metadata for Text.Layout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE41D8]);
    v2 = v1;
    v3 = lazy protocol witness table accessor for type Text.Layout and conformance Text.Layout();
    result = MEMORY[0x23B7C9C04](MEMORY[0x24BEE4218], v2, &v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Slice<Text.Layout> and conformance <> Slice<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Slice<Text.Layout> and conformance Slice<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type Slice<Text.Layout> and conformance Slice<A>;
  if (!lazy protocol witness table cache variable for type Slice<Text.Layout> and conformance Slice<A>)
  {
    type metadata accessor for FontBox<Font.SystemProvider>(255, &lazy cache variable for type metadata for Slice<Text.Layout>, (uint64_t (*)(void))lazy protocol witness table accessor for type Text.Layout and conformance Text.Layout, (uint64_t)&type metadata for Text.Layout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE41D8]);
    result = MEMORY[0x23B7C9C04](MEMORY[0x24BEE4238], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Slice<Text.Layout> and conformance Slice<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type IndexingIterator<Text.Layout> and conformance IndexingIterator<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type IndexingIterator<Text.Layout> and conformance IndexingIterator<A>;
  if (!lazy protocol witness table cache variable for type IndexingIterator<Text.Layout> and conformance IndexingIterator<A>)
  {
    type metadata accessor for FontBox<Font.SystemProvider>(255, &lazy cache variable for type metadata for IndexingIterator<Text.Layout>, (uint64_t (*)(void))lazy protocol witness table accessor for type Text.Layout and conformance Text.Layout, (uint64_t)&type metadata for Text.Layout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE2C00]);
    result = MEMORY[0x23B7C9C04](MEMORY[0x24BEE2C18], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IndexingIterator<Text.Layout> and conformance IndexingIterator<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Text.Layout.DrawingOptions and conformance Text.Layout.DrawingOptions()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Text.Layout.DrawingOptions and conformance Text.Layout.DrawingOptions;
  if (!lazy protocol witness table cache variable for type Text.Layout.DrawingOptions and conformance Text.Layout.DrawingOptions)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Text.Layout.DrawingOptions, &type metadata for Text.Layout.DrawingOptions);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.Layout.DrawingOptions and conformance Text.Layout.DrawingOptions);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Text.Layout.DrawingOptions and conformance Text.Layout.DrawingOptions;
  if (!lazy protocol witness table cache variable for type Text.Layout.DrawingOptions and conformance Text.Layout.DrawingOptions)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Text.Layout.DrawingOptions, &type metadata for Text.Layout.DrawingOptions);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.Layout.DrawingOptions and conformance Text.Layout.DrawingOptions);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Text.Layout.DrawingOptions and conformance Text.Layout.DrawingOptions;
  if (!lazy protocol witness table cache variable for type Text.Layout.DrawingOptions and conformance Text.Layout.DrawingOptions)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Text.Layout.DrawingOptions, &type metadata for Text.Layout.DrawingOptions);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.Layout.DrawingOptions and conformance Text.Layout.DrawingOptions);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Text.Layout.DrawingOptions and conformance Text.Layout.DrawingOptions;
  if (!lazy protocol witness table cache variable for type Text.Layout.DrawingOptions and conformance Text.Layout.DrawingOptions)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Text.Layout.DrawingOptions, &type metadata for Text.Layout.DrawingOptions);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.Layout.DrawingOptions and conformance Text.Layout.DrawingOptions);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Text.Layout.Decorations.Segment and conformance Text.Layout.Decorations.Segment()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Text.Layout.Decorations.Segment and conformance Text.Layout.Decorations.Segment;
  if (!lazy protocol witness table cache variable for type Text.Layout.Decorations.Segment and conformance Text.Layout.Decorations.Segment)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Text.Layout.Decorations.Segment, &type metadata for Text.Layout.Decorations.Segment);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.Layout.Decorations.Segment and conformance Text.Layout.Decorations.Segment);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Text.Layout.Decorations.Segment and conformance Text.Layout.Decorations.Segment;
  if (!lazy protocol witness table cache variable for type Text.Layout.Decorations.Segment and conformance Text.Layout.Decorations.Segment)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Text.Layout.Decorations.Segment, &type metadata for Text.Layout.Decorations.Segment);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.Layout.Decorations.Segment and conformance Text.Layout.Decorations.Segment);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Text.Layout.Decorations.Segment and conformance Text.Layout.Decorations.Segment;
  if (!lazy protocol witness table cache variable for type Text.Layout.Decorations.Segment and conformance Text.Layout.Decorations.Segment)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Text.Layout.Decorations.Segment, &type metadata for Text.Layout.Decorations.Segment);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.Layout.Decorations.Segment and conformance Text.Layout.Decorations.Segment);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Text.Layout.Decorations.Segment and conformance Text.Layout.Decorations.Segment;
  if (!lazy protocol witness table cache variable for type Text.Layout.Decorations.Segment and conformance Text.Layout.Decorations.Segment)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Text.Layout.Decorations.Segment, &type metadata for Text.Layout.Decorations.Segment);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.Layout.Decorations.Segment and conformance Text.Layout.Decorations.Segment);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Slice<Text.Layout.Decorations.Segment> and conformance <> Slice<A>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  result = lazy protocol witness table cache variable for type Slice<Text.Layout.Decorations.Segment> and conformance <> Slice<A>;
  if (!lazy protocol witness table cache variable for type Slice<Text.Layout.Decorations.Segment> and conformance <> Slice<A>)
  {
    type metadata accessor for FontBox<Font.SystemProvider>(255, &lazy cache variable for type metadata for Slice<Text.Layout.Decorations.Segment>, (uint64_t (*)(void))lazy protocol witness table accessor for type Text.Layout.Decorations.Segment and conformance Text.Layout.Decorations.Segment, (uint64_t)&type metadata for Text.Layout.Decorations.Segment, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE41D8]);
    v2 = v1;
    v3 = lazy protocol witness table accessor for type Text.Layout.Decorations.Segment and conformance Text.Layout.Decorations.Segment();
    result = MEMORY[0x23B7C9C04](MEMORY[0x24BEE4230], v2, &v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Slice<Text.Layout.Decorations.Segment> and conformance <> Slice<A>);
  }
  return result;
}

{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  result = lazy protocol witness table cache variable for type Slice<Text.Layout.Decorations.Segment> and conformance <> Slice<A>;
  if (!lazy protocol witness table cache variable for type Slice<Text.Layout.Decorations.Segment> and conformance <> Slice<A>)
  {
    type metadata accessor for FontBox<Font.SystemProvider>(255, &lazy cache variable for type metadata for Slice<Text.Layout.Decorations.Segment>, (uint64_t (*)(void))lazy protocol witness table accessor for type Text.Layout.Decorations.Segment and conformance Text.Layout.Decorations.Segment, (uint64_t)&type metadata for Text.Layout.Decorations.Segment, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE41D8]);
    v2 = v1;
    v3 = lazy protocol witness table accessor for type Text.Layout.Decorations.Segment and conformance Text.Layout.Decorations.Segment();
    result = MEMORY[0x23B7C9C04](MEMORY[0x24BEE4218], v2, &v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Slice<Text.Layout.Decorations.Segment> and conformance <> Slice<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Slice<Text.Layout.Decorations.Segment> and conformance Slice<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type Slice<Text.Layout.Decorations.Segment> and conformance Slice<A>;
  if (!lazy protocol witness table cache variable for type Slice<Text.Layout.Decorations.Segment> and conformance Slice<A>)
  {
    type metadata accessor for FontBox<Font.SystemProvider>(255, &lazy cache variable for type metadata for Slice<Text.Layout.Decorations.Segment>, (uint64_t (*)(void))lazy protocol witness table accessor for type Text.Layout.Decorations.Segment and conformance Text.Layout.Decorations.Segment, (uint64_t)&type metadata for Text.Layout.Decorations.Segment, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE41D8]);
    result = MEMORY[0x23B7C9C04](MEMORY[0x24BEE4238], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Slice<Text.Layout.Decorations.Segment> and conformance Slice<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type IndexingIterator<Text.Layout.Decorations.Segment> and conformance IndexingIterator<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type IndexingIterator<Text.Layout.Decorations.Segment> and conformance IndexingIterator<A>;
  if (!lazy protocol witness table cache variable for type IndexingIterator<Text.Layout.Decorations.Segment> and conformance IndexingIterator<A>)
  {
    type metadata accessor for FontBox<Font.SystemProvider>(255, &lazy cache variable for type metadata for IndexingIterator<Text.Layout.Decorations.Segment>, (uint64_t (*)(void))lazy protocol witness table accessor for type Text.Layout.Decorations.Segment and conformance Text.Layout.Decorations.Segment, (uint64_t)&type metadata for Text.Layout.Decorations.Segment, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE2C00]);
    result = MEMORY[0x23B7C9C04](MEMORY[0x24BEE2C18], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IndexingIterator<Text.Layout.Decorations.Segment> and conformance IndexingIterator<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Text.Layout.Decorations and conformance Text.Layout.Decorations()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Text.Layout.Decorations and conformance Text.Layout.Decorations;
  if (!lazy protocol witness table cache variable for type Text.Layout.Decorations and conformance Text.Layout.Decorations)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Text.Layout.Decorations, &type metadata for Text.Layout.Decorations);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.Layout.Decorations and conformance Text.Layout.Decorations);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Text.Layout.Decorations and conformance Text.Layout.Decorations;
  if (!lazy protocol witness table cache variable for type Text.Layout.Decorations and conformance Text.Layout.Decorations)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Text.Layout.Decorations, &type metadata for Text.Layout.Decorations);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.Layout.Decorations and conformance Text.Layout.Decorations);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Text.Layout.Decorations and conformance Text.Layout.Decorations;
  if (!lazy protocol witness table cache variable for type Text.Layout.Decorations and conformance Text.Layout.Decorations)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Text.Layout.Decorations, &type metadata for Text.Layout.Decorations);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.Layout.Decorations and conformance Text.Layout.Decorations);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Text.Layout.Decorations and conformance Text.Layout.Decorations;
  if (!lazy protocol witness table cache variable for type Text.Layout.Decorations and conformance Text.Layout.Decorations)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Text.Layout.Decorations, &type metadata for Text.Layout.Decorations);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.Layout.Decorations and conformance Text.Layout.Decorations);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Slice<Text.Layout.Decorations> and conformance <> Slice<A>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  result = lazy protocol witness table cache variable for type Slice<Text.Layout.Decorations> and conformance <> Slice<A>;
  if (!lazy protocol witness table cache variable for type Slice<Text.Layout.Decorations> and conformance <> Slice<A>)
  {
    type metadata accessor for FontBox<Font.SystemProvider>(255, &lazy cache variable for type metadata for Slice<Text.Layout.Decorations>, (uint64_t (*)(void))lazy protocol witness table accessor for type Text.Layout.Decorations and conformance Text.Layout.Decorations, (uint64_t)&type metadata for Text.Layout.Decorations, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE41D8]);
    v2 = v1;
    v3 = lazy protocol witness table accessor for type Text.Layout.Decorations and conformance Text.Layout.Decorations();
    result = MEMORY[0x23B7C9C04](MEMORY[0x24BEE4230], v2, &v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Slice<Text.Layout.Decorations> and conformance <> Slice<A>);
  }
  return result;
}

{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  result = lazy protocol witness table cache variable for type Slice<Text.Layout.Decorations> and conformance <> Slice<A>;
  if (!lazy protocol witness table cache variable for type Slice<Text.Layout.Decorations> and conformance <> Slice<A>)
  {
    type metadata accessor for FontBox<Font.SystemProvider>(255, &lazy cache variable for type metadata for Slice<Text.Layout.Decorations>, (uint64_t (*)(void))lazy protocol witness table accessor for type Text.Layout.Decorations and conformance Text.Layout.Decorations, (uint64_t)&type metadata for Text.Layout.Decorations, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE41D8]);
    v2 = v1;
    v3 = lazy protocol witness table accessor for type Text.Layout.Decorations and conformance Text.Layout.Decorations();
    result = MEMORY[0x23B7C9C04](MEMORY[0x24BEE4218], v2, &v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Slice<Text.Layout.Decorations> and conformance <> Slice<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Slice<Text.Layout.Decorations> and conformance Slice<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type Slice<Text.Layout.Decorations> and conformance Slice<A>;
  if (!lazy protocol witness table cache variable for type Slice<Text.Layout.Decorations> and conformance Slice<A>)
  {
    type metadata accessor for FontBox<Font.SystemProvider>(255, &lazy cache variable for type metadata for Slice<Text.Layout.Decorations>, (uint64_t (*)(void))lazy protocol witness table accessor for type Text.Layout.Decorations and conformance Text.Layout.Decorations, (uint64_t)&type metadata for Text.Layout.Decorations, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE41D8]);
    result = MEMORY[0x23B7C9C04](MEMORY[0x24BEE4238], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Slice<Text.Layout.Decorations> and conformance Slice<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type IndexingIterator<Text.Layout.Decorations> and conformance IndexingIterator<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type IndexingIterator<Text.Layout.Decorations> and conformance IndexingIterator<A>;
  if (!lazy protocol witness table cache variable for type IndexingIterator<Text.Layout.Decorations> and conformance IndexingIterator<A>)
  {
    type metadata accessor for FontBox<Font.SystemProvider>(255, &lazy cache variable for type metadata for IndexingIterator<Text.Layout.Decorations>, (uint64_t (*)(void))lazy protocol witness table accessor for type Text.Layout.Decorations and conformance Text.Layout.Decorations, (uint64_t)&type metadata for Text.Layout.Decorations, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE2C00]);
    result = MEMORY[0x23B7C9C04](MEMORY[0x24BEE2C18], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IndexingIterator<Text.Layout.Decorations> and conformance IndexingIterator<A>);
  }
  return result;
}

uint64_t dispatch thunk of TextRenderer.draw(layout:in:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 16))();
}

uint64_t dispatch thunk of TextRenderer.sizeThatFits(proposal:text:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return (*(uint64_t (**)(void))(a7 + 24))();
}

uint64_t dispatch thunk of TextRenderer.displayPadding.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

ValueMetadata *type metadata accessor for TextProxy()
{
  return &type metadata for TextProxy;
}

uint64_t method lookup function for TextAttributeModifierBase()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of TextAttributeModifierBase.hash(into:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 112))();
}

uint64_t dispatch thunk of TextAttributeModifierBase.hashValue.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 120))();
}

ValueMetadata *type metadata accessor for Text.CustomAttributes()
{
  return &type metadata for Text.CustomAttributes;
}

uint64_t getEnumTagSinglePayload for _TextRendererViewModifier(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  char v8;
  int v9;
  unsigned int v10;
  int v11;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = a2 - v5;
  if (a2 <= v5)
    goto LABEL_18;
  v7 = *(_QWORD *)(v4 + 64);
  v8 = 8 * v7;
  if (v7 <= 3)
  {
    v10 = ((v6 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      v9 = *(_DWORD *)(a1 + v7);
      if (!v9)
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      v9 = *(unsigned __int16 *)(a1 + v7);
      if (!*(_WORD *)(a1 + v7))
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_18:
      if (v5)
        return (*(uint64_t (**)(void))(v4 + 48))();
      return 0;
    }
  }
  v9 = *(unsigned __int8 *)(a1 + v7);
  if (!*(_BYTE *)(a1 + v7))
    goto LABEL_18;
LABEL_11:
  v11 = (v9 - 1) << v8;
  if (v7 > 3)
    v11 = 0;
  if (!(_DWORD)v7)
    return v5 + v11 + 1;
  if (v7 > 3)
    LODWORD(v7) = 4;
  return ((uint64_t (*)(void))((char *)&loc_234FC0D38 + 4 * byte_2352BAE30[(v7 - 1)]))();
}

void storeEnumTagSinglePayload for _TextRendererViewModifier(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  BOOL v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = a3 >= v7;
  v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      v13 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v13))
      {
        v11 = 4u;
      }
      else if (v13 >= 0x100)
      {
        v11 = 2;
      }
      else
      {
        v11 = v13 > 1;
      }
    }
    else
    {
      v11 = 1u;
    }
  }
  else
  {
    v11 = 0;
  }
  if (v7 < a2)
  {
    v12 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        v14 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v14;
          *((_BYTE *)a1 + 2) = BYTE2(v14);
        }
        else if ((_DWORD)v8 == 2)
        {
          *a1 = v14;
        }
        else
        {
          *(_BYTE *)a1 = v14;
        }
      }
    }
    else
    {
      bzero(a1, *(_QWORD *)(v6 + 64));
      *(_DWORD *)a1 = v12;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X11 }
}

uint64_t method lookup function for TextRendererBoxBase()
{
  return swift_lookUpClassMethod();
}

uint64_t type metadata accessor for TextRendererBox(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for TextRendererBox);
}

uint64_t initializeBufferWithCopyOfBuffer for Text.Layout(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for Text.Layout(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  return a1;
}

uint64_t assignWithTake for Text.Layout(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  return a1;
}

ValueMetadata *type metadata accessor for Text.Layout()
{
  return &type metadata for Text.Layout;
}

ValueMetadata *type metadata accessor for Text.Layout.CharacterIndex()
{
  return &type metadata for Text.Layout.CharacterIndex;
}

ValueMetadata *type metadata accessor for Text.Layout.TypographicBounds()
{
  return &type metadata for Text.Layout.TypographicBounds;
}

uint64_t initializeWithCopy for Text.Layout.Line(uint64_t a1, uint64_t a2)
{
  void *v4;
  uint64_t v5;
  char v6;

  v4 = *(void **)a2;
  v5 = *(_QWORD *)(a2 + 8);
  v6 = *(_BYTE *)(a2 + 16);
  outlined copy of Text.Layout.Line.Line(*(void **)a2, v5, v6);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  *(_BYTE *)(a1 + 16) = v6;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  return a1;
}

uint64_t assignWithCopy for Text.Layout.Line(uint64_t a1, uint64_t a2)
{
  void *v4;
  uint64_t v5;
  char v6;
  void *v7;
  uint64_t v8;
  char v9;

  v4 = *(void **)a2;
  v5 = *(_QWORD *)(a2 + 8);
  v6 = *(_BYTE *)(a2 + 16);
  outlined copy of Text.Layout.Line.Line(*(void **)a2, v5, v6);
  v7 = *(void **)a1;
  v8 = *(_QWORD *)(a1 + 8);
  v9 = *(_BYTE *)(a1 + 16);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  *(_BYTE *)(a1 + 16) = v6;
  outlined consume of Text.Layout.Line.Line(v7, v8, v9);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  return a1;
}

uint64_t assignWithTake for Text.Layout.Line(uint64_t a1, uint64_t a2)
{
  char v4;
  void *v5;
  uint64_t v6;
  char v7;

  v4 = *(_BYTE *)(a2 + 16);
  v5 = *(void **)a1;
  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(_BYTE *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = v4;
  outlined consume of Text.Layout.Line.Line(v5, v6, v7);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  return a1;
}

uint64_t getEnumTagSinglePayload for Text.Layout.Line(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 44))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 1)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for Text.Layout.Line(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_DWORD *)(result + 40) = 0;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 44) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 44) = 0;
    if (a2)
      *(_BYTE *)(result + 16) = -(char)a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for Text.Layout.Line()
{
  return &type metadata for Text.Layout.Line;
}

uint64_t destroy for Text.Layout.Run(id *a1)
{

  return swift_release();
}

uint64_t initializeWithCopy for Text.Layout.Run(uint64_t a1, uint64_t a2)
{
  void *v3;
  uint64_t v4;
  id v5;

  v3 = *(void **)a2;
  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  v5 = v3;
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for Text.Layout.Run(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;

  v4 = *(void **)a2;
  v5 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = v4;

  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for Text.Layout.Run(uint64_t a1, uint64_t a2)
{
  void *v4;

  v4 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;

  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_release();
  return a1;
}

ValueMetadata *type metadata accessor for Text.Layout.Run()
{
  return &type metadata for Text.Layout.Run;
}

uint64_t initializeWithCopy for Text.Layout.RunSlice(uint64_t a1, uint64_t a2)
{
  void *v3;
  uint64_t v4;
  id v5;

  v3 = *(void **)a2;
  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  v5 = v3;
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for Text.Layout.RunSlice(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;

  v4 = *(void **)a2;
  v5 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = v4;

  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  return a1;
}

uint64_t assignWithTake for Text.Layout.RunSlice(uint64_t a1, uint64_t a2)
{
  void *v4;

  v4 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;

  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_release();
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  return a1;
}

uint64_t getEnumTagSinglePayload for Text.Layout.RunSlice(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 64))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for Text.Layout.RunSlice(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 64) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 64) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for Text.Layout.RunSlice()
{
  return &type metadata for Text.Layout.RunSlice;
}

uint64_t type metadata accessor for AnyTextLayoutRenderer()
{
  return objc_opt_self();
}

uint64_t type metadata accessor for TextLayoutFragmentRenderer()
{
  return objc_opt_self();
}

ValueMetadata *type metadata accessor for Text.LayoutKey()
{
  return &type metadata for Text.LayoutKey;
}

uint64_t initializeWithCopy for Text.LayoutKey.AnchoredLayout(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_retain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for Text.LayoutKey.AnchoredLayout(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  return a1;
}

uint64_t assignWithTake for Text.LayoutKey.AnchoredLayout(uint64_t a1, uint64_t a2)
{
  swift_release();
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  return a1;
}

ValueMetadata *type metadata accessor for Text.LayoutKey.AnchoredLayout()
{
  return &type metadata for Text.LayoutKey.AnchoredLayout;
}

ValueMetadata *type metadata accessor for Text.Layout.DrawingOptions()
{
  return &type metadata for Text.Layout.DrawingOptions;
}

ValueMetadata *type metadata accessor for Text.Layout.Decorations()
{
  return &type metadata for Text.Layout.Decorations;
}

ValueMetadata *type metadata accessor for Text.Layout.Decorations.Fragment()
{
  return &type metadata for Text.Layout.Decorations.Fragment;
}

uint64_t destroy for Text.Layout.Decorations.Segment()
{
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for Text.Layout.Decorations.Segment(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  v3 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for Text.Layout.Decorations.Segment(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for Text.Layout.Decorations.Segment(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for Text.Layout.Decorations.Segment(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 56))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 40);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for Text.Layout.Decorations.Segment(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 56) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 40) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 56) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for Text.Layout.Decorations.Segment()
{
  return &type metadata for Text.Layout.Decorations.Segment;
}

ValueMetadata *type metadata accessor for Text.Layout.Cluster()
{
  return &type metadata for Text.Layout.Cluster;
}

uint64_t initializeBufferWithCopyOfBuffer for Text.Layout.Line.Line(uint64_t a1, uint64_t a2)
{
  void *v3;
  uint64_t v4;
  char v5;

  v3 = *(void **)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  outlined copy of Text.Layout.Line.Line(*(void **)a2, v4, v5);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for Text.Layout.Line.Line(uint64_t a1, uint64_t a2)
{
  void *v3;
  uint64_t v4;
  char v5;
  void *v6;
  uint64_t v7;
  char v8;

  v3 = *(void **)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  outlined copy of Text.Layout.Line.Line(*(void **)a2, v4, v5);
  v6 = *(void **)a1;
  v7 = *(_QWORD *)(a1 + 8);
  v8 = *(_BYTE *)(a1 + 16);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  outlined consume of Text.Layout.Line.Line(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for Text.Layout.Line.Line(uint64_t a1, uint64_t a2)
{
  char v3;
  void *v4;
  uint64_t v5;
  char v6;

  v3 = *(_BYTE *)(a2 + 16);
  v4 = *(void **)a1;
  v5 = *(_QWORD *)(a1 + 8);
  v6 = *(_BYTE *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = v3;
  outlined consume of Text.Layout.Line.Line(v4, v5, v6);
  return a1;
}

void *type metadata accessor for Text.Layout.Line.Line()
{
  return &unk_2506462F8;
}

uint64_t instantiation function for generic protocol witness table for _TextRendererViewModifier<A>.MakeTextRenderer(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for _TextRendererViewModifier<A>.MakeTextRenderer);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type IndexingIterator<Text.Layout.Cluster> and conformance IndexingIterator<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type IndexingIterator<Text.Layout.Cluster> and conformance IndexingIterator<A>;
  if (!lazy protocol witness table cache variable for type IndexingIterator<Text.Layout.Cluster> and conformance IndexingIterator<A>)
  {
    type metadata accessor for FontBox<Font.SystemProvider>(255, &lazy cache variable for type metadata for IndexingIterator<Text.Layout.Cluster>, (uint64_t (*)(void))lazy protocol witness table accessor for type Text.Layout.Cluster and conformance Text.Layout.Cluster, (uint64_t)&type metadata for Text.Layout.Cluster, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE2C00]);
    result = MEMORY[0x23B7C9C04](MEMORY[0x24BEE2C18], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IndexingIterator<Text.Layout.Cluster> and conformance IndexingIterator<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Text.Layout.Cluster and conformance Text.Layout.Cluster()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Text.Layout.Cluster and conformance Text.Layout.Cluster;
  if (!lazy protocol witness table cache variable for type Text.Layout.Cluster and conformance Text.Layout.Cluster)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Text.Layout.Cluster, &type metadata for Text.Layout.Cluster);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.Layout.Cluster and conformance Text.Layout.Cluster);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Text.Layout.Cluster and conformance Text.Layout.Cluster;
  if (!lazy protocol witness table cache variable for type Text.Layout.Cluster and conformance Text.Layout.Cluster)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Text.Layout.Cluster, &type metadata for Text.Layout.Cluster);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.Layout.Cluster and conformance Text.Layout.Cluster);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Text.Layout.Cluster and conformance Text.Layout.Cluster;
  if (!lazy protocol witness table cache variable for type Text.Layout.Cluster and conformance Text.Layout.Cluster)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Text.Layout.Cluster, &type metadata for Text.Layout.Cluster);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.Layout.Cluster and conformance Text.Layout.Cluster);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Text.Layout.Cluster and conformance Text.Layout.Cluster;
  if (!lazy protocol witness table cache variable for type Text.Layout.Cluster and conformance Text.Layout.Cluster)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Text.Layout.Cluster, &type metadata for Text.Layout.Cluster);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.Layout.Cluster and conformance Text.Layout.Cluster);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Slice<Text.Layout.Cluster> and conformance Slice<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type Slice<Text.Layout.Cluster> and conformance Slice<A>;
  if (!lazy protocol witness table cache variable for type Slice<Text.Layout.Cluster> and conformance Slice<A>)
  {
    type metadata accessor for FontBox<Font.SystemProvider>(255, &lazy cache variable for type metadata for Slice<Text.Layout.Cluster>, (uint64_t (*)(void))lazy protocol witness table accessor for type Text.Layout.Cluster and conformance Text.Layout.Cluster, (uint64_t)&type metadata for Text.Layout.Cluster, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE41D8]);
    result = MEMORY[0x23B7C9C04](MEMORY[0x24BEE4238], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Slice<Text.Layout.Cluster> and conformance Slice<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Slice<Text.Layout.Cluster> and conformance <> Slice<A>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  result = lazy protocol witness table cache variable for type Slice<Text.Layout.Cluster> and conformance <> Slice<A>;
  if (!lazy protocol witness table cache variable for type Slice<Text.Layout.Cluster> and conformance <> Slice<A>)
  {
    type metadata accessor for FontBox<Font.SystemProvider>(255, &lazy cache variable for type metadata for Slice<Text.Layout.Cluster>, (uint64_t (*)(void))lazy protocol witness table accessor for type Text.Layout.Cluster and conformance Text.Layout.Cluster, (uint64_t)&type metadata for Text.Layout.Cluster, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE41D8]);
    v2 = v1;
    v3 = lazy protocol witness table accessor for type Text.Layout.Cluster and conformance Text.Layout.Cluster();
    result = MEMORY[0x23B7C9C04](MEMORY[0x24BEE4218], v2, &v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Slice<Text.Layout.Cluster> and conformance <> Slice<A>);
  }
  return result;
}

{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  result = lazy protocol witness table cache variable for type Slice<Text.Layout.Cluster> and conformance <> Slice<A>;
  if (!lazy protocol witness table cache variable for type Slice<Text.Layout.Cluster> and conformance <> Slice<A>)
  {
    type metadata accessor for FontBox<Font.SystemProvider>(255, &lazy cache variable for type metadata for Slice<Text.Layout.Cluster>, (uint64_t (*)(void))lazy protocol witness table accessor for type Text.Layout.Cluster and conformance Text.Layout.Cluster, (uint64_t)&type metadata for Text.Layout.Cluster, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE41D8]);
    v2 = v1;
    v3 = lazy protocol witness table accessor for type Text.Layout.Cluster and conformance Text.Layout.Cluster();
    result = MEMORY[0x23B7C9C04](MEMORY[0x24BEE4230], v2, &v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Slice<Text.Layout.Cluster> and conformance <> Slice<A>);
  }
  return result;
}

void base witness table accessor for _AttributeBody in _TextRendererViewModifier<A>.MakeTextRenderer()
{
  JUMPOUT(0x23B7C9C04);
}

uint64_t outlined destroy of IndexingIterator<RangeSet<Text.Layout.CharacterIndex>.Ranges>(uint64_t a1)
{
  uint64_t v2;

  type metadata accessor for IndexingIterator<RangeSet<Text.Layout.CharacterIndex>.Ranges>();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySnySiGG_7SwiftUI4TextV6LayoutV8RunSliceVs5NeverOTg503_s7d3UI4f2V6g64V4LineVAAE6slices33_7F70C8A76EE0356881289646072938C0LL3forSayAE8hI41VGSnyAE14CharacterIndexVG_tFALSnySiGXEfU_AL0H0VTf1cn_nTf4ng_n(uint64_t a1, uint64_t a2)
{
  int64_t v2;
  uint64_t v3;
  uint64_t v6;
  int v7;
  uint64_t v8;
  __int128 *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  __int128 v14;
  void *v15;
  __int128 v16;
  uint64_t v17;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = MEMORY[0x24BEE4AF8];
  if (v2)
  {
    v6 = *(_QWORD *)(a2 + 8);
    v15 = *(void **)a2;
    v14 = *(_OWORD *)(a2 + 16);
    v7 = *(_DWORD *)(a2 + 32);
    v8 = *(_QWORD *)(a2 + 40);
    v17 = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2, 0);
    v3 = v17;
    v9 = (__int128 *)(a1 + 32);
    do
    {
      v16 = *v9;
      outlined retain of Text.Layout.Run((void **)a2);
      v11 = *(_QWORD *)(v17 + 16);
      v10 = *(_QWORD *)(v17 + 24);
      if (v11 >= v10 >> 1)
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v10 > 1, v11 + 1, 1);
      *(_QWORD *)(v17 + 16) = v11 + 1;
      v12 = v17 + (v11 << 6);
      *(_QWORD *)(v12 + 32) = v15;
      *(_QWORD *)(v12 + 40) = v6;
      *(_OWORD *)(v12 + 48) = v14;
      *(_DWORD *)(v12 + 64) = v7;
      *(_QWORD *)(v12 + 72) = v8;
      ++v9;
      *(_OWORD *)(v12 + 80) = v16;
      --v2;
    }
    while (v2);
  }
  return v3;
}

uint64_t specialized TextRenderer.sizeThatFits(proposal:text:)(uint64_t result, char a2, uint64_t a3, char a4, uint64_t *a5, __n128 a6, __n128 a7)
{
  double v10;
  uint64_t v11;
  char v12;
  char v13;
  double v14;
  char v15;
  uint64_t v16;
  char v17;

  v10 = *(double *)&result;
  v11 = *a5;
  if (one-time initialization token for zero != -1)
    *(double *)&result = COERCE_DOUBLE(swift_once());
  v12 = byte_2561B6188;
  a6.n128_u64[0] = qword_2561B6190;
  v13 = byte_2561B6198;
  if ((a2 & 1) != 0)
  {
    if (!byte_2561B6188)
      goto LABEL_15;
  }
  else
  {
    a7.n128_u64[0] = static ProposedViewSize.zero;
    if (*(double *)&static ProposedViewSize.zero != v10)
      v12 = 1;
    if ((v12 & 1) != 0)
      goto LABEL_15;
  }
  if ((a4 & 1) != 0)
  {
    a6.n128_u64[0] = 0;
    a7.n128_u64[0] = 0;
    if (!byte_2561B6198)
    {
LABEL_15:
      v14 = v10;
      v15 = a2 & 1;
      v16 = a3;
      v17 = a4 & 1;
      *(double *)&result = COERCE_DOUBLE((*(uint64_t (**)(double *, __n128, __n128))(*(_QWORD *)v11 + 224))(&v14, a6, a7));
    }
  }
  else
  {
    if (*(double *)&qword_2561B6190 != *(double *)&a3)
      v13 = 1;
    a6.n128_u64[0] = 0;
    a7.n128_u64[0] = 0;
    if ((v13 & 1) != 0)
      goto LABEL_15;
  }
  return result;
}

uint64_t outlined consume of Text.Layout.Decorations.Segment?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t result;

  if (a6)
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_234FC2018()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in Text.Layout.Decorations.init(line:origin:scale:runs:flags:typographicBounds:)(int a1, uint64_t a2, double a3, double a4, double a5, double a6, double a7, double a8, double a9, double a10)
{
  uint64_t v10;

  return closure #1 in Text.Layout.Decorations.init(line:origin:scale:runs:flags:typographicBounds:)(a1, a2, *(int **)(v10 + 16), *(_QWORD ***)(v10 + 24), *(uint64_t **)(v10 + 32), *(_QWORD **)(v10 + 40), *(_QWORD **)(v10 + 48), *(_QWORD *)(v10 + 56), a3, a4, a5, a6, a7, a8, a9, a10, *(_BYTE *)(v10 + 64), *(double *)(v10 + 72), *(_BYTE *)(v10 + 80),
           *(_BYTE *)(v10 + 81));
}

uint64_t sub_234FC2070()
{
  return swift_deallocObject();
}

uint64_t outlined init with take of AnyTextLayoutRenderer?(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t a4, uint64_t (*a5)(uint64_t))
{
  uint64_t v7;

  _s10Foundation4DateVSgMaTm_0(0, a3, a4, a5, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a2, a1, v7);
  return a2;
}

id *outlined release of CGContextRef?(id *a1)
{

  return a1;
}

ValueMetadata *type metadata accessor for TextRendererInput()
{
  return &type metadata for TextRendererInput;
}

void type metadata accessor for Slice<Text.Effect.BaseContent>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for Slice<Text.Effect.BaseContent>)
  {
    type metadata accessor for Text.Effect.BaseContent(255);
    lazy protocol witness table accessor for type AnyTextSizingModifier and conformance AnyTextSizingModifier(&lazy protocol witness table cache variable for type Text.Effect.BaseContent and conformance Text.Effect.BaseContent, 255, type metadata accessor for Text.Effect.BaseContent, (uint64_t)&protocol conformance descriptor for Text.Effect.BaseContent);
    v0 = type metadata accessor for Slice();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Slice<Text.Effect.BaseContent>);
  }
}

ValueMetadata *type metadata accessor for EnvironmentValues.TextRendererAddsDrawingGroupKey()
{
  return &type metadata for EnvironmentValues.TextRendererAddsDrawingGroupKey;
}

uint64_t Text.italic()(uint64_t a1, uint64_t a2, char a3, _QWORD *a4)
{
  unint64_t v6;
  unint64_t v7;
  _QWORD *v8;

  outlined copy of Text.Storage(a1, a2, a3 & 1);
  swift_bridgeObjectRetain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    a4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a4[2] + 1, 1, a4);
  v7 = a4[2];
  v6 = a4[3];
  if (v7 >= v6 >> 1)
    a4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v6 > 1), v7 + 1, 1, a4);
  a4[2] = v7 + 1;
  v8 = &a4[2 * v7];
  v8[4] = 0;
  *((_BYTE *)v8 + 40) = -32;
  return a1;
}

uint64_t Text.bold()(uint64_t a1, uint64_t a2, char a3, _QWORD *a4)
{
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;

  type metadata accessor for BoldTextModifier();
  v8 = swift_allocObject();
  *(_BYTE *)(v8 + 16) = 1;
  outlined copy of Text.Storage(a1, a2, a3 & 1);
  swift_bridgeObjectRetain();
  swift_retain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    a4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a4[2] + 1, 1, a4);
  v10 = a4[2];
  v9 = a4[3];
  if (v10 >= v9 >> 1)
    a4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v9 > 1), v10 + 1, 1, a4);
  a4[2] = v10 + 1;
  v11 = &a4[2 * v10];
  v11[4] = v8;
  *((_BYTE *)v11 + 40) = -64;
  swift_release();
  return a1;
}

uint64_t Text.monospaced(_:)(char a1, uint64_t a2, uint64_t a3, char a4, _QWORD *a5)
{
  return Text.monospaced(_:)(a1, a2, a3, a4, a5, (void (*)(_QWORD))type metadata accessor for MonospacedTextModifier);
}

uint64_t Text.strikethrough(_:color:)(char a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, _QWORD *a6)
{
  return Text.strikethrough(_:color:)(a1, a2, a3, a4, a5, a6, (void (*)(_QWORD))type metadata accessor for StrikethroughTextModifier);
}

uint64_t _ShapeStyle_Shape.PreparedTextResult.apply(to:)(uint64_t a1, uint64_t a2, char a3, _QWORD *a4)
{
  uint64_t *v4;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t inited;
  unint64_t v14;
  unint64_t v15;
  _QWORD *v16;

  v9 = *v4;
  if (*v4)
  {
    swift_retain_n();
    outlined copy of Text.Storage(a1, a2, a3 & 1);
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      a4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a4[2] + 1, 1, a4);
    v11 = a4[2];
    v10 = a4[3];
    if (v11 >= v10 >> 1)
      a4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v10 > 1), v11 + 1, 1, a4);
    a4[2] = v11 + 1;
    v12 = &a4[2 * v11];
    v12[4] = v9;
    *((_BYTE *)v12 + 40) = 0;
    swift_release();
  }
  else
  {
    type metadata accessor for TextForegroundKeyColorModifier();
    inited = swift_initStaticObject();
    outlined copy of Text.Storage(a1, a2, a3 & 1);
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      a4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a4[2] + 1, 1, a4);
    v15 = a4[2];
    v14 = a4[3];
    if (v15 >= v14 >> 1)
      a4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v14 > 1), v15 + 1, 1, a4);
    a4[2] = v15 + 1;
    v16 = &a4[2 * v15];
    v16[4] = inited;
    *((_BYTE *)v16 + 40) = -64;
  }
  return a1;
}

Swift::Bool __swiftcall Text.isCollapsible()()
{
  uint64_t v0;
  uint64_t v1;
  _BYTE *i;

  v1 = *(_QWORD *)(v0 + 16);
  if (!v1)
    return 0;
  for (i = (_BYTE *)(v0 + 40); ; i += 16)
  {
    if ((*i & 0xE0) == 0xC0)
    {
      type metadata accessor for CollapsibleTextModifier();
      if (swift_dynamicCastClass())
        break;
    }
    if (!--v1)
      return 0;
  }
  return 1;
}

uint64_t Text.foregroundStyle<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, _QWORD *a5, uint64_t a6, uint64_t a7)
{
  double v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  char v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  _QWORD *v27;
  _QWORD v29[2];

  v14 = MEMORY[0x24BDAC7A8](a1);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v16 + 16))((char *)v29 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v17, v14);
  if (swift_dynamicCast())
  {
    v18 = v29[1];
    swift_retain();
    outlined copy of Text.Storage(a2, a3, a4 & 1);
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      a5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a5[2] + 1, 1, a5);
    v20 = a5[2];
    v19 = a5[3];
    if (v20 >= v19 >> 1)
      a5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v19 > 1), v20 + 1, 1, a5);
    v21 = 0;
    a5[2] = v20 + 1;
    v22 = &a5[2 * v20];
    v22[4] = v18;
    v23 = v22 + 4;
  }
  else
  {
    type metadata accessor for TextForegroundStyleModifier();
    v24 = specialized TextForegroundStyleModifier.__allocating_init<A>(_:)(a1, a6, a7);
    outlined copy of Text.Storage(a2, a3, a4 & 1);
    swift_bridgeObjectRetain();
    swift_retain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      a5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a5[2] + 1, 1, a5);
    v26 = a5[2];
    v25 = a5[3];
    if (v26 >= v25 >> 1)
      a5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v25 > 1), v26 + 1, 1, a5);
    a5[2] = v26 + 1;
    v27 = &a5[2 * v26];
    v27[4] = v24;
    v23 = v27 + 4;
    v21 = -64;
  }
  *((_BYTE *)v23 + 8) = v21;
  swift_release();
  return a2;
}

uint64_t Text.foregroundColor(_:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, _QWORD *a5)
{
  unint64_t v8;
  unint64_t v9;
  _QWORD *v10;

  outlined copy of Text.Storage(a2, a3, a4 & 1);
  swift_retain();
  swift_bridgeObjectRetain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    a5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a5[2] + 1, 1, a5);
  v9 = a5[2];
  v8 = a5[3];
  if (v9 >= v8 >> 1)
    a5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v8 > 1), v9 + 1, 1, a5);
  a5[2] = v9 + 1;
  v10 = &a5[2 * v9];
  v10[4] = a1;
  *((_BYTE *)v10 + 40) = 0;
  return a2;
}

uint64_t Text.font(_:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, _QWORD *a5)
{
  unint64_t v8;
  unint64_t v9;
  _QWORD *v10;

  outlined copy of Text.Storage(a2, a3, a4 & 1);
  swift_retain();
  swift_bridgeObjectRetain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    a5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a5[2] + 1, 1, a5);
  v9 = a5[2];
  v8 = a5[3];
  if (v9 >= v8 >> 1)
    a5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v8 > 1), v9 + 1, 1, a5);
  a5[2] = v9 + 1;
  v10 = &a5[2 * v9];
  v10[4] = a1;
  *((_BYTE *)v10 + 40) = 32;
  return a2;
}

uint64_t Text.fontWeight(_:)(uint64_t a1, char a2, uint64_t a3, uint64_t a4, char a5, _QWORD *a6)
{
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;

  outlined copy of Text.Storage(a3, a4, a5 & 1);
  swift_bridgeObjectRetain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    a6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a6[2] + 1, 1, a6);
  v11 = a6[2];
  v10 = a6[3];
  if (v11 >= v10 >> 1)
    a6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v10 > 1), v11 + 1, 1, a6);
  a6[2] = v11 + 1;
  v12 = &a6[2 * v11];
  v12[4] = a1;
  *((_BYTE *)v12 + 40) = a2 & 1 | 0x40;
  return a3;
}

uint64_t Text.fontWidth(_:)(uint64_t *a1, uint64_t a2, uint64_t a3, char a4, _QWORD *a5)
{
  char v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  _QWORD *v14;

  v9 = *((_BYTE *)a1 + 8);
  if (v9)
    v10 = 0;
  else
    v10 = *a1;
  type metadata accessor for TextWidthModifier();
  v11 = swift_allocObject();
  *(_QWORD *)(v11 + 16) = v10;
  *(_BYTE *)(v11 + 24) = v9;
  outlined copy of Text.Storage(a2, a3, a4 & 1);
  swift_bridgeObjectRetain();
  swift_retain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    a5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a5[2] + 1, 1, a5);
  v13 = a5[2];
  v12 = a5[3];
  if (v13 >= v12 >> 1)
    a5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v12 > 1), v13 + 1, 1, a5);
  a5[2] = v13 + 1;
  v14 = &a5[2 * v13];
  v14[4] = v11;
  *((_BYTE *)v14 + 40) = -64;
  swift_release();
  return a2;
}

uint64_t Text.bold(_:)(char a1, uint64_t a2, uint64_t a3, char a4, _QWORD *a5)
{
  return Text.monospaced(_:)(a1, a2, a3, a4, a5, (void (*)(_QWORD))type metadata accessor for BoldTextModifier);
}

uint64_t Text.italic(_:)(char a1, uint64_t a2, uint64_t a3, char a4, _QWORD *a5)
{
  return Text.monospaced(_:)(a1, a2, a3, a4, a5, (void (*)(_QWORD))type metadata accessor for ItalicTextModifier);
}

uint64_t Text.monospaced(_:)(char a1, uint64_t a2, uint64_t a3, char a4, _QWORD *a5, void (*a6)(_QWORD))
{
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  _QWORD *v14;

  a6(0);
  v11 = swift_allocObject();
  *(_BYTE *)(v11 + 16) = a1;
  outlined copy of Text.Storage(a2, a3, a4 & 1);
  swift_bridgeObjectRetain();
  swift_retain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    a5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a5[2] + 1, 1, a5);
  v13 = a5[2];
  v12 = a5[3];
  if (v13 >= v12 >> 1)
    a5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v12 > 1), v13 + 1, 1, a5);
  a5[2] = v13 + 1;
  v14 = &a5[2 * v13];
  v14[4] = v11;
  *((_BYTE *)v14 + 40) = -64;
  swift_release();
  return a2;
}

uint64_t Text.fontDesign(_:)(char *a1, uint64_t a2, uint64_t a3, char a4, _QWORD *a5)
{
  char v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  _QWORD *v13;

  v9 = *a1;
  type metadata accessor for TextDesignModifier();
  v10 = swift_allocObject();
  *(_BYTE *)(v10 + 16) = v9;
  outlined copy of Text.Storage(a2, a3, a4 & 1);
  swift_bridgeObjectRetain();
  swift_retain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    a5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a5[2] + 1, 1, a5);
  v12 = a5[2];
  v11 = a5[3];
  if (v12 >= v11 >> 1)
    a5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v11 > 1), v12 + 1, 1, a5);
  a5[2] = v12 + 1;
  v13 = &a5[2 * v12];
  v13[4] = v10;
  *((_BYTE *)v13 + 40) = -64;
  swift_release();
  return a2;
}

uint64_t Text.monospacedDigit()(uint64_t a1, uint64_t a2, char a3, _QWORD *a4)
{
  return Text.monospacedDigit()(a1, a2, a3, a4, (void (*)(_QWORD))type metadata accessor for MonospacedDigitTextModifier);
}

uint64_t Text.strikethrough(_:pattern:color:)(char a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, _QWORD *a7)
{
  return Text.strikethrough(_:pattern:color:)(a1, a2, a3, a4, a5, a6, a7, (void (*)(_QWORD))type metadata accessor for StrikethroughTextModifier);
}

uint64_t Text.underline(_:color:)(char a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, _QWORD *a6)
{
  return Text.strikethrough(_:color:)(a1, a2, a3, a4, a5, a6, (void (*)(_QWORD))type metadata accessor for UnderlineTextModifier);
}

uint64_t Text.strikethrough(_:color:)(char a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, _QWORD *a6, void (*a7)(_QWORD))
{
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  _QWORD *v17;

  if ((a1 & 1) != 0)
  {
    swift_retain();
    v13 = 1;
  }
  else
  {
    v13 = 0;
    a2 = 1;
  }
  a7(0);
  v14 = swift_allocObject();
  *(_QWORD *)(v14 + 16) = v13;
  *(_QWORD *)(v14 + 24) = a2;
  outlined copy of Text.Storage(a3, a4, a5 & 1);
  swift_bridgeObjectRetain();
  swift_retain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    a6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a6[2] + 1, 1, a6);
  v16 = a6[2];
  v15 = a6[3];
  if (v16 >= v15 >> 1)
    a6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v15 > 1), v16 + 1, 1, a6);
  a6[2] = v16 + 1;
  v17 = &a6[2 * v16];
  v17[4] = v14;
  *((_BYTE *)v17 + 40) = -64;
  swift_release();
  return a3;
}

uint64_t Text.underline(_:pattern:color:)(char a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, _QWORD *a7)
{
  return Text.strikethrough(_:pattern:color:)(a1, a2, a3, a4, a5, a6, a7, (void (*)(_QWORD))type metadata accessor for UnderlineTextModifier);
}

uint64_t Text.strikethrough(_:pattern:color:)(char a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, _QWORD *a7, void (*a8)(_QWORD))
{
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;

  if ((a1 & 1) != 0)
  {
    v14 = *a2 | 1;
    swift_retain();
  }
  else
  {
    v14 = 0;
    a3 = 1;
  }
  a8(0);
  v15 = swift_allocObject();
  *(_QWORD *)(v15 + 16) = v14;
  *(_QWORD *)(v15 + 24) = a3;
  outlined copy of Text.Storage(a4, a5, a6 & 1);
  swift_bridgeObjectRetain();
  swift_retain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    a7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a7[2] + 1, 1, a7);
  v17 = a7[2];
  v16 = a7[3];
  if (v17 >= v16 >> 1)
    a7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v16 > 1), v17 + 1, 1, a7);
  a7[2] = v17 + 1;
  v18 = &a7[2 * v17];
  v18[4] = v15;
  *((_BYTE *)v18 + 40) = -64;
  swift_release();
  return a4;
}

uint64_t Text.kerning(_:)(uint64_t a1, uint64_t a2, char a3, _QWORD *a4, double a5)
{
  unint64_t v8;
  unint64_t v9;
  double *v10;

  outlined copy of Text.Storage(a1, a2, a3 & 1);
  swift_bridgeObjectRetain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    a4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a4[2] + 1, 1, a4);
  v9 = a4[2];
  v8 = a4[3];
  if (v9 >= v8 >> 1)
    a4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v8 > 1), v9 + 1, 1, a4);
  a4[2] = v9 + 1;
  v10 = (double *)&a4[2 * v9];
  v10[4] = a5;
  *((_BYTE *)v10 + 40) = 96;
  return a1;
}

uint64_t Text.tracking(_:)(uint64_t a1, uint64_t a2, char a3, _QWORD *a4, double a5)
{
  unint64_t v8;
  unint64_t v9;
  double *v10;

  outlined copy of Text.Storage(a1, a2, a3 & 1);
  swift_bridgeObjectRetain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    a4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a4[2] + 1, 1, a4);
  v9 = a4[2];
  v8 = a4[3];
  if (v9 >= v8 >> 1)
    a4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v8 > 1), v9 + 1, 1, a4);
  a4[2] = v9 + 1;
  v10 = (double *)&a4[2 * v9];
  v10[4] = a5;
  *((_BYTE *)v10 + 40) = 0x80;
  return a1;
}

uint64_t Text.baselineOffset(_:)(uint64_t a1, uint64_t a2, char a3, _QWORD *a4, double a5)
{
  unint64_t v8;
  unint64_t v9;
  double *v10;

  outlined copy of Text.Storage(a1, a2, a3 & 1);
  swift_bridgeObjectRetain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    a4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a4[2] + 1, 1, a4);
  v9 = a4[2];
  v8 = a4[3];
  if (v9 >= v8 >> 1)
    a4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v8 > 1), v9 + 1, 1, a4);
  a4[2] = v9 + 1;
  v10 = (double *)&a4[2 * v9];
  v10[4] = a5;
  *((_BYTE *)v10 + 40) = -96;
  return a1;
}

uint64_t Text._stylisticAlternative(_:)(char *a1, uint64_t a2, uint64_t a3, char a4, _QWORD *a5)
{
  char v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  _QWORD *v13;

  v9 = *a1;
  type metadata accessor for StylisticAlternativeTextModifier();
  v10 = swift_allocObject();
  *(_BYTE *)(v10 + 16) = v9;
  outlined copy of Text.Storage(a2, a3, a4 & 1);
  swift_bridgeObjectRetain();
  swift_retain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    a5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a5[2] + 1, 1, a5);
  v12 = a5[2];
  v11 = a5[3];
  if (v12 >= v11 >> 1)
    a5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v11 > 1), v12 + 1, 1, a5);
  a5[2] = v12 + 1;
  v13 = &a5[2 * v12];
  v13[4] = v10;
  *((_BYTE *)v13 + 40) = -64;
  swift_release();
  return a2;
}

uint64_t Text.collapsible()(uint64_t a1, uint64_t a2, char a3, _QWORD *a4)
{
  return Text.monospacedDigit()(a1, a2, a3, a4, (void (*)(_QWORD))type metadata accessor for CollapsibleTextModifier);
}

uint64_t Text.monospacedDigit()(uint64_t a1, uint64_t a2, char a3, _QWORD *a4, void (*a5)(_QWORD))
{
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;

  a5(0);
  v9 = swift_allocObject();
  outlined copy of Text.Storage(a1, a2, a3 & 1);
  swift_bridgeObjectRetain();
  swift_retain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    a4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a4[2] + 1, 1, a4);
  v11 = a4[2];
  v10 = a4[3];
  if (v11 >= v10 >> 1)
    a4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v10 > 1), v11 + 1, 1, a4);
  a4[2] = v11 + 1;
  v12 = &a4[2 * v11];
  v12[4] = v9;
  *((_BYTE *)v12 + 40) = -64;
  swift_release();
  return a1;
}

uint64_t static Spacing.textSpacing(maxFontMetrics:idealMetrics:layoutProperties:)@<X0>(double *a1@<X0>, double *a2@<X1>, _OWORD *a3@<X2>, unint64_t *a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  double v11;
  double v12;
  double v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  char v17;
  char v18;
  uint64_t v19;
  double v20;
  unsigned int v21;
  int v22;
  double v23;
  double v24;
  int v25;
  unint64_t v26;
  unint64_t v27;
  char v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  uint64_t v34;
  uint64_t inited;
  uint64_t v36;
  double v37;
  double v38;
  double v39;
  double v40;
  unint64_t v41;
  uint64_t result;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  double v46;
  double v47;
  double v48;
  unint64_t *v49;
  uint64_t v50[3];
  uint64_t v51;
  uint64_t v52;
  double v53;
  char v54;
  char v55;
  _OWORD v56[6];
  _OWORD v57[3];

  v49 = a4;
  v7 = type metadata accessor for FloatingPointRoundingRule();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v43 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = a1[1];
  v48 = *a1;
  v13 = a1[2];
  v12 = a1[3];
  v14 = a3[5];
  v56[4] = a3[4];
  v56[5] = v14;
  v57[0] = a3[6];
  *(_OWORD *)((char *)v57 + 9) = *(_OWORD *)((char *)a3 + 105);
  v15 = a3[1];
  v56[0] = *a3;
  v56[1] = v15;
  v16 = a3[3];
  v56[2] = a3[2];
  v56[3] = v16;
  closure #1 in static Spacing.textSpacing(maxFontMetrics:idealMetrics:layoutProperties:)(&v55, &v54, v50, &v53, &v52, &v51, (uint64_t)v56);
  v17 = v55;
  v18 = v54;
  v45 = v50[0];
  v46 = v53;
  v19 = v51;
  v44 = v52;
  if (one-time initialization token for introduced != -1)
    swift_once();
  v47 = v11;
  v20 = v11 - v13;
  v21 = static _SemanticFeature_v5.introduced;
  if (one-time initialization token for forced != -1)
    swift_once();
  swift_beginAccess();
  if ((byte_25426FAB4 & 1) != 0)
    v22 = dyld_program_sdk_at_least();
  else
    v22 = static Semantics.forced >= v21;
  if (v22)
    v23 = *(double *)v57;
  else
    v23 = 4.0;
  (*(void (**)(char *, _QWORD, uint64_t))(v8 + 104))(v10, *MEMORY[0x24BEE38E0], v7);
  v53 = v20 * 0.1;
  specialized FloatingPoint.round(_:toMultipleOf:)(v10, v23);
  v24 = v53;
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  v25 = BYTE8(v57[0]);
  v26 = *(_QWORD *)&v57[1];
  outlined retain of TextLayoutProperties((uint64_t)v56);
  if (one-time initialization token for uniformLineHeight != -1)
    swift_once();
  if (v25 != static Text.Sizing.uniformLineHeight)
  {
    v29 = v12;
    outlined release of TextLayoutProperties((uint64_t)v56);
    goto LABEL_17;
  }
  v27 = qword_254266A58;
  swift_bridgeObjectRetain();
  v28 = specialized static Array<A>.== infix(_:_:)(v26, v27);
  swift_bridgeObjectRelease();
  outlined release of TextLayoutProperties((uint64_t)v56);
  v29 = v12;
  v30 = v12;
  if ((v28 & 1) == 0)
LABEL_17:
    v30 = 0.0;
  v31 = a2[1];
  v33 = a2[3];
  v32 = a2[4];
  v34 = *(_QWORD *)&v57[0];
  type metadata accessor for _ContiguousArrayStorage<(Spacing.Key, Spacing.Value)>();
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_235283240;
  if (one-time initialization token for textToText != -1)
    swift_once();
  v36 = static Spacing.Category.textToText;
  *(_QWORD *)(inited + 32) = static Spacing.Category.textToText;
  *(_BYTE *)(inited + 40) = v17;
  v37 = v30 * 0.5 - v13;
  v38 = v48;
  v39 = v47 + v30 * 0.5;
  *(double *)(inited + 48) = v39;
  *(double *)(inited + 56) = v37;
  *(double *)(inited + 64) = v29 - v30;
  v40 = v20 + v24 - v38;
  *(_QWORD *)(inited + 72) = v34;
  *(_BYTE *)(inited + 80) = 2;
  if (v40 <= v24 + v37)
    v40 = v24 + v37;
  *(_QWORD *)(inited + 88) = v36;
  *(_BYTE *)(inited + 96) = v18;
  *(double *)(inited + 104) = v39;
  *(double *)(inited + 112) = v37;
  *(double *)(inited + 120) = v29 - v30;
  *(_QWORD *)(inited + 128) = v34;
  *(_BYTE *)(inited + 136) = 1;
  *(_QWORD *)(inited + 144) = v19;
  *(_BYTE *)(inited + 152) = v18;
  *(double *)(inited + 160) = -(v31 - v32);
  *(_QWORD *)(inited + 176) = 0;
  *(_QWORD *)(inited + 184) = 0;
  *(_QWORD *)(inited + 168) = 0;
  *(_BYTE *)(inited + 192) = 0;
  *(_QWORD *)(inited + 200) = v44;
  *(_BYTE *)(inited + 208) = v17;
  *(double *)(inited + 216) = -v33;
  *(_QWORD *)(inited + 224) = 0;
  *(_QWORD *)(inited + 232) = 0;
  *(_BYTE *)(inited + 248) = 0;
  *(_QWORD *)(inited + 240) = 0;
  *(_QWORD *)(inited + 256) = v45;
  *(_BYTE *)(inited + 264) = v17;
  *(double *)(inited + 272) = v20 + v24 - v39;
  *(_QWORD *)(inited + 280) = 0;
  *(_QWORD *)(inited + 288) = 0;
  *(_BYTE *)(inited + 304) = 0;
  *(_QWORD *)(inited + 296) = 0;
  *(double *)(inited + 312) = v46;
  *(_BYTE *)(inited + 320) = v18;
  *(double *)(inited + 328) = v40;
  *(_QWORD *)(inited + 336) = 0;
  *(_QWORD *)(inited + 344) = 0;
  *(_BYTE *)(inited + 360) = 0;
  *(_QWORD *)(inited + 352) = 0;
  v41 = specialized Dictionary.init(dictionaryLiteral:)(inited);
  result = swift_setDeallocating();
  *v49 = v41;
  return result;
}

_BYTE *closure #1 in static Spacing.textSpacing(maxFontMetrics:idealMetrics:layoutProperties:)(_BYTE *result, _BYTE *a2, _QWORD *a3, _QWORD *a4, _QWORD *a5, uint64_t *a6, uint64_t a7)
{
  uint64_t v11;

  if ((*(_BYTE *)(a7 + 80) & 1) != 0)
  {
    *result = 3;
    *a2 = 1;
    if (one-time initialization token for edgeRightText != -1)
      result = (_BYTE *)swift_once();
    *a3 = static Spacing.Category.edgeRightText;
    if (one-time initialization token for edgeLeftText != -1)
      result = (_BYTE *)swift_once();
    *a4 = static Spacing.Category.edgeLeftText;
    if (one-time initialization token for rightTextBaseline != -1)
      result = (_BYTE *)swift_once();
    *a5 = static Spacing.Category.rightTextBaseline;
    if (one-time initialization token for leftTextBaseline != -1)
      result = (_BYTE *)swift_once();
    v11 = static Spacing.Category.leftTextBaseline;
  }
  else
  {
    *result = 0;
    *a2 = 2;
    if (one-time initialization token for edgeAboveText != -1)
      result = (_BYTE *)swift_once();
    *a3 = static Spacing.Category.edgeAboveText;
    if (one-time initialization token for edgeBelowText != -1)
      result = (_BYTE *)swift_once();
    *a4 = static Spacing.Category.edgeBelowText;
    if (one-time initialization token for textBaseline != -1)
      result = (_BYTE *)swift_once();
    v11 = static Spacing.Category.textBaseline;
    *a5 = static Spacing.Category.textBaseline;
  }
  *a6 = v11;
  return result;
}

uint64_t EnvironmentValues.textScale.getter@<X0>(char *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;

  v3 = *v1;
  if (v1[1])
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v3, a1);
    swift_release_n();
  }
  else
  {
    v4 = swift_retain_n();
    specialized closure #1 in PropertyList.subscript.getter(v4, a1);
  }
  return swift_release_n();
}

void static Text.Scale.default.getter(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

void static Text.Scale.secondary.getter(_BYTE *a1@<X8>)
{
  *a1 = 1;
}

void Text.Scale.hash(into:)()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0);
}

BOOL static Text.Scale.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

Swift::Int Text.Scale.hashValue.getter()
{
  unsigned __int8 *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t Text.Scale.init(_:)@<X0>(uint64_t a1@<X0>, void *a2@<X1>, char *a3@<X8>)
{
  Swift::String v6;
  char v8;
  uint64_t result;
  char v10;

  v6 = String.init(_:)(CFSTR("NSTextScaleSecondary"));
  if (v6._countAndFlagsBits == a1 && v6._object == a2)
  {
    result = swift_bridgeObjectRelease_n();
    v10 = 1;
  }
  else
  {
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    result = swift_bridgeObjectRelease();
    if ((v8 & 1) != 0)
      v10 = 1;
    else
      v10 = 2;
  }
  *a3 = v10;
  return result;
}

uint64_t TextScaleModifier.modify(style:environment:)(uint64_t result)
{
  uint64_t v1;

  if (*(_BYTE *)(v1 + 16) == 1)
    *(_BYTE *)(result + 320) = *(_BYTE *)(v1 + 17);
  return result;
}

uint64_t TextScaleModifier.isEqual(to:)()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  type metadata accessor for TextScaleModifier();
  v1 = swift_dynamicCastClass();
  if (v1)
    v2 = *(_BYTE *)(v1 + 17) ^ *(_BYTE *)(v0 + 17) ^ 1;
  else
    v2 = 0;
  return v2 & 1;
}

uint64_t TextScaleModifier.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t Text.textScale(_:isEnabled:)(char *a1, char a2, uint64_t a3, uint64_t a4, char a5, _QWORD *a6)
{
  char v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD *v15;

  v11 = *a1;
  type metadata accessor for TextScaleModifier();
  v12 = swift_allocObject();
  *(_BYTE *)(v12 + 16) = a2;
  *(_BYTE *)(v12 + 17) = v11;
  outlined copy of Text.Storage(a3, a4, a5 & 1);
  swift_bridgeObjectRetain();
  swift_retain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    a6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a6[2] + 1, 1, a6);
  v14 = a6[2];
  v13 = a6[3];
  if (v14 >= v13 >> 1)
    a6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v13 > 1), v14 + 1, 1, a6);
  a6[2] = v14 + 1;
  v15 = &a6[2 * v14];
  v15[4] = v12;
  *((_BYTE *)v15 + 40) = -64;
  swift_release();
  return a3;
}

uint64_t type metadata accessor for TextScaleModifier()
{
  return objc_opt_self();
}

uint64_t EnvironmentValues.textScale.setter(unsigned __int8 *a1)
{
  uint64_t *v1;
  uint64_t v2;
  unsigned __int8 v3;
  uint64_t v4;

  v2 = *v1;
  v3 = *a1;
  swift_retain_n();
  specialized closure #1 in PropertyList.subscript.setter(v1, v3);
  swift_release();
  if (v1[1])
  {
    v4 = *v1;
    swift_retain();
    swift_retain();
    specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v2, v4);
    swift_release();
    swift_release();
  }
  return swift_release();
}

uint64_t View.textScale(_:isEnabled:)(char *a1, char a2, uint64_t a3, uint64_t a4)
{
  char v7;
  uint64_t *KeyPath;
  uint64_t v9;

  v7 = *a1;
  KeyPath = (uint64_t *)swift_getKeyPath();
  v9 = swift_allocObject();
  *(_BYTE *)(v9 + 16) = a2;
  *(_BYTE *)(v9 + 17) = v7;
  View.transformEnvironment<A>(_:transform:)(KeyPath, (uint64_t)partial apply for closure #1 in View.textScale(_:isEnabled:), v9, a3, a4);
  swift_release();
  return swift_release();
}

uint64_t key path getter for EnvironmentValues.textScale : EnvironmentValues@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  char v6;

  v3 = *a1;
  if (a1[1])
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v3, &v6);
    swift_release_n();
  }
  else
  {
    v4 = swift_retain_n();
    specialized closure #1 in PropertyList.subscript.getter(v4, &v6);
  }
  result = swift_release_n();
  *a2 = v6;
  return result;
}

uint64_t sub_234FC4048(unsigned __int8 *a1)
{
  unsigned __int8 v2;

  v2 = *a1;
  return EnvironmentValues.textScale.setter(&v2);
}

uint64_t sub_234FC407C()
{
  return swift_deallocObject();
}

_BYTE *partial apply for closure #1 in View.textScale(_:isEnabled:)(_BYTE *result)
{
  uint64_t v1;

  if (*(_BYTE *)(v1 + 16) == 1)
    *result = *(_BYTE *)(v1 + 17);
  return result;
}

ValueMetadata *type metadata accessor for Text.Scale()
{
  return &type metadata for Text.Scale;
}

uint64_t sub_234FC4100(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[2];

  v1 = *a1;
  v2 = a1[1];
  type metadata accessor for _EnvironmentKeyTransformModifier<Text.Scale?>(255);
  v5 = type metadata accessor for ModifiedContent(255, v1, v3, v4);
  v7[0] = v2;
  v7[1] = &protocol witness table for _EnvironmentKeyTransformModifier<A>;
  return MEMORY[0x23B7C9C04]("I{:\x1B̧\t", v5, v7);
}

void type metadata accessor for _EnvironmentKeyTransformModifier<Text.Scale?>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  if (!lazy cache variable for type metadata for _EnvironmentKeyTransformModifier<Text.Scale?>)
  {
    type metadata accessor for Text.Scale?();
    v5 = type metadata accessor for _EnvironmentKeyTransformModifier(a1, v2, v3, v4);
    if (!v6)
      atomic_store(v5, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyTransformModifier<Text.Scale?>);
  }
}

void type metadata accessor for Text.Scale?()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for Text.Scale?)
  {
    v0 = type metadata accessor for Optional();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Text.Scale?);
  }
}

uint64_t storeEnumTagSinglePayload for Text.Scale(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_234FC4250 + 4 * byte_2352BC4D5[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_234FC4284 + 4 * byte_2352BC4D0[v4]))();
}

uint64_t sub_234FC4284(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_234FC428C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x234FC4294);
  return result;
}

uint64_t sub_234FC42A0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x234FC42A8);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_234FC42AC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_234FC42B4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for Text.Scale.Storage()
{
  return &type metadata for Text.Scale.Storage;
}

ValueMetadata *type metadata accessor for TextScaleKey()
{
  return &type metadata for TextScaleKey;
}

unint64_t lazy protocol witness table accessor for type Text.Scale.Storage and conformance Text.Scale.Storage()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Text.Scale.Storage and conformance Text.Scale.Storage;
  if (!lazy protocol witness table cache variable for type Text.Scale.Storage and conformance Text.Scale.Storage)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Text.Scale.Storage, &type metadata for Text.Scale.Storage);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.Scale.Storage and conformance Text.Scale.Storage);
  }
  return result;
}

void static CAHostingLayerEvent.MouseButton.primary.getter(_QWORD *a1@<X8>)
{
  *a1 = 1;
}

void static CAHostingLayerEvent.MouseButton.secondary.getter(_QWORD *a1@<X8>)
{
  *a1 = 2;
}

void CAHostingLayerEvent.MouseButton.hash(into:)()
{
  Swift::UInt *v0;

  Hasher._combine(_:)(*v0);
}

BOOL static CAHostingLayerEvent.MouseButton.== infix(_:_:)(_QWORD *a1, _QWORD *a2)
{
  return *a1 == *a2;
}

Swift::Int CAHostingLayerEvent.MouseButton.hashValue.getter()
{
  Swift::UInt *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t static CAHostingLayerEvent.mousePressed(button:location:instant:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>, double a4@<D0>, double a5@<D1>)
{
  return static CAHostingLayerEvent.mousePressed(button:location:instant:)(a1, a2, (uint64_t)partial apply for closure #1 in static CAHostingLayerEvent.mousePressed(button:location:instant:), a3, a4, a5);
}

uint64_t closure #1 in static CAHostingLayerEvent.mousePressed(button:location:instant:)(uint64_t a1, Swift::UInt a2, double a3, double a4)
{
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  double v23;
  uint64_t v24;
  _OWORD *v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  _OWORD v29[2];
  __int128 v30;
  _OWORD v31[3];
  __int128 v32;
  __int128 v33;
  __int128 v34;
  _BYTE v35[48];

  v7 = (_QWORD *)(a1 + *(int *)(type metadata accessor for CAHostingLayerEvent.Context() + 20));
  v8 = *v7;
  if (*(_QWORD *)(*v7 + 16) && (v9 = specialized __RawDictionaryStorage.find<A>(_:)(a2), (v10 & 1) != 0))
  {
    v11 = *(_QWORD *)(*(_QWORD *)(v8 + 56) + 8 * v9);
    ContinuousClock.Instant.duration(to:)();
    v12 = Duration.components.getter();
    v14 = (double)v13 / 1.0e18 + (double)v12;
    *(_QWORD *)&v34 = &type metadata for MouseEvent;
    *((_QWORD *)&v34 + 1) = &protocol witness table for MouseEvent;
    v15 = swift_allocObject();
    *(double *)(v15 + 16) = v14;
    *(_QWORD *)(v15 + 24) = 0;
    *(_QWORD *)(v15 + 32) = a2;
    *(_BYTE *)(v15 + 40) = 3;
    *(_QWORD *)(v15 + 48) = 0;
    *(_QWORD *)(v15 + 56) = 0;
    *(double *)(v15 + 64) = a3;
    *(double *)(v15 + 72) = a4;
    *(_QWORD *)(v15 + 80) = 0;
    *(_QWORD *)&v32 = v11;
    *((_QWORD *)&v32 + 1) = v15;
  }
  else
  {
    v33 = 0u;
    v34 = 0u;
    v32 = 0u;
  }
  result = outlined init with take of CAHostingLayerEvent.Resolved?((uint64_t)&v32, (uint64_t)v35);
  v17 = v7[1];
  v18 = v17 + 1;
  if (__OFADD__(v17, 1))
  {
    __break(1u);
  }
  else
  {
    v7[1] = v18;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(_QWORD *)&v32 = *v7;
    *v7 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v18, a2, isUniquelyReferenced_nonNull_native);
    *v7 = v32;
    swift_bridgeObjectRelease();
    specialized Set._Variant.insert(_:)((Swift::UInt *)&v32, a2);
    v20 = v7[1];
    ContinuousClock.Instant.duration(to:)();
    v21 = Duration.components.getter();
    v23 = (double)v22 / 1.0e18 + (double)v21;
    *(_QWORD *)&v34 = &type metadata for MouseEvent;
    *((_QWORD *)&v34 + 1) = &protocol witness table for MouseEvent;
    v24 = swift_allocObject();
    *(double *)(v24 + 16) = v23;
    *(_QWORD *)(v24 + 24) = 0;
    *(_QWORD *)(v24 + 32) = a2;
    *(_BYTE *)(v24 + 40) = 0;
    *(_QWORD *)(v24 + 48) = 0;
    *(_QWORD *)(v24 + 56) = 0;
    *(double *)(v24 + 64) = a3;
    *(double *)(v24 + 72) = a4;
    *(_QWORD *)(v24 + 80) = 0;
    *(_QWORD *)&v32 = v20;
    *((_QWORD *)&v32 + 1) = v24;
    outlined init with copy of CAHostingLayerEvent.Resolved?((uint64_t)v35, (uint64_t)v29);
    if ((_QWORD)v30)
    {
      v31[0] = v29[0];
      v31[1] = v29[1];
      v31[2] = v30;
      type metadata accessor for _ContiguousArrayStorage<CAHostingLayerEvent.Resolved>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<CAHostingLayerEvent.Resolved>, (uint64_t (*)(_QWORD, ValueMetadata *))MEMORY[0x24BEE3598]);
      v25 = (_OWORD *)swift_allocObject();
      v25[1] = xmmword_2352828C0;
      outlined init with copy of CAHostingLayerEvent.Resolved((uint64_t)v31, (uint64_t)(v25 + 2));
      outlined init with copy of CAHostingLayerEvent.Resolved((uint64_t)&v32, (uint64_t)(v25 + 5));
      outlined destroy of CAHostingLayerEvent.Resolved((uint64_t)v31);
      outlined destroy of CAHostingLayerEvent.Resolved((uint64_t)&v32);
    }
    else
    {
      outlined destroy of CAHostingLayerEvent.Resolved?((uint64_t)v29);
      type metadata accessor for _ContiguousArrayStorage<CAHostingLayerEvent.Resolved>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<CAHostingLayerEvent.Resolved>, (uint64_t (*)(_QWORD, ValueMetadata *))MEMORY[0x24BEE3598]);
      v25 = (_OWORD *)swift_allocObject();
      v26 = v32;
      v27 = v33;
      v25[1] = xmmword_23527E860;
      v25[2] = v26;
      v28 = v34;
      v25[3] = v27;
      v25[4] = v28;
    }
    outlined destroy of CAHostingLayerEvent.Resolved?((uint64_t)v35);
    return (uint64_t)v25;
  }
  return result;
}

uint64_t partial apply for closure #1 in static CAHostingLayerEvent.mousePressed(button:location:instant:)(uint64_t a1)
{
  return partial apply for closure #1 in static CAHostingLayerEvent.mousePressed(button:location:instant:)(a1, (uint64_t (*)(uint64_t, _QWORD, unint64_t, double, double))closure #1 in static CAHostingLayerEvent.mousePressed(button:location:instant:));
}

uint64_t static CAHostingLayerEvent.mouseLifted(button:location:instant:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>, double a4@<D0>, double a5@<D1>)
{
  return static CAHostingLayerEvent.mousePressed(button:location:instant:)(a1, a2, (uint64_t)partial apply for closure #1 in static CAHostingLayerEvent.mouseLifted(button:location:instant:), a3, a4, a5);
}

uint64_t static CAHostingLayerEvent.mousePressed(button:location:instant:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, _QWORD *a4@<X8>, double a5@<D0>, double a6@<D1>)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t result;
  double *v20;
  uint64_t v21;

  v12 = type metadata accessor for ContinuousClock.Instant();
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(_QWORD *)(v13 + 64);
  v15 = MEMORY[0x24BDAC7A8](v12);
  v16 = *a1;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v13 + 16))((char *)&v21 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0), a2, v12, v15);
  v17 = (*(unsigned __int8 *)(v13 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  v18 = swift_allocObject();
  *(_QWORD *)(v18 + 16) = v16;
  result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v13 + 32))(v18 + v17, (char *)&v21 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0), v12);
  v20 = (double *)(v18 + ((v14 + v17 + 7) & 0xFFFFFFFFFFFFFFF8));
  *v20 = a5;
  v20[1] = a6;
  *a4 = a3;
  a4[1] = v18;
  return result;
}

uint64_t closure #1 in static CAHostingLayerEvent.mouseLifted(button:location:instant:)(uint64_t a1, Swift::UInt a2, double a3, double a4)
{
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;

  v7 = (uint64_t *)(a1 + *(int *)(type metadata accessor for CAHostingLayerEvent.Context() + 20));
  v8 = *v7;
  if (!*(_QWORD *)(*v7 + 16))
    return MEMORY[0x24BEE4AF8];
  v9 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  if ((v10 & 1) == 0)
    return MEMORY[0x24BEE4AF8];
  v11 = *(_QWORD *)(*(_QWORD *)(v8 + 56) + 8 * v9);
  ContinuousClock.Instant.duration(to:)();
  v12 = Duration.components.getter();
  v14 = (double)v13 / 1.0e18 + (double)v12;
  v15 = swift_allocObject();
  *(double *)(v15 + 16) = v14;
  *(_QWORD *)(v15 + 24) = 0;
  *(_QWORD *)(v15 + 32) = a2;
  *(_BYTE *)(v15 + 40) = 2;
  *(_QWORD *)(v15 + 48) = 0;
  *(_QWORD *)(v15 + 56) = 0;
  *(double *)(v15 + 64) = a3;
  *(double *)(v15 + 72) = a4;
  *(_QWORD *)(v15 + 80) = 0;
  type metadata accessor for _ContiguousArrayStorage<CAHostingLayerEvent.Resolved>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<CAHostingLayerEvent.Resolved>, (uint64_t (*)(_QWORD, ValueMetadata *))MEMORY[0x24BEE3598]);
  v16 = swift_allocObject();
  *(_OWORD *)(v16 + 16) = xmmword_23527E860;
  *(_QWORD *)(v16 + 32) = v11;
  *(_QWORD *)(v16 + 40) = v15;
  *(_QWORD *)(v16 + 64) = &type metadata for MouseEvent;
  *(_QWORD *)(v16 + 72) = &protocol witness table for MouseEvent;
  specialized Dictionary._Variant.removeValue(forKey:)(a2);
  specialized Set._Variant.remove(_:)(a2, (uint64_t)&v18);
  return v16;
}

uint64_t objectdestroyTm_11()
{
  uint64_t v0;
  uint64_t v1;

  v1 = type metadata accessor for ContinuousClock.Instant();
  (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80)), v1);
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in static CAHostingLayerEvent.mouseLifted(button:location:instant:)(uint64_t a1)
{
  return partial apply for closure #1 in static CAHostingLayerEvent.mousePressed(button:location:instant:)(a1, (uint64_t (*)(uint64_t, _QWORD, unint64_t, double, double))closure #1 in static CAHostingLayerEvent.mouseLifted(button:location:instant:));
}

uint64_t partial apply for closure #1 in static CAHostingLayerEvent.mousePressed(button:location:instant:)(uint64_t a1, uint64_t (*a2)(uint64_t, _QWORD, unint64_t, double, double))
{
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  double *v6;

  v4 = *(_QWORD *)(type metadata accessor for ContinuousClock.Instant() - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = (double *)(v2 + ((*(_QWORD *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8));
  return a2(a1, *(_QWORD *)(v2 + 16), v2 + v5, *v6, v6[1]);
}

uint64_t static CAHostingLayerEvent.mouseDragged(location:instant:)@<X0>(uint64_t a1@<X0>, uint64_t (**a2)(uint64_t a1)@<X8>, double a3@<D0>, double a4@<D1>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t result;
  double *v15;
  uint64_t v16;

  v8 = type metadata accessor for ContinuousClock.Instant();
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(_QWORD *)(v9 + 64);
  v11 = MEMORY[0x24BDAC7A8](v8);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v9 + 16))((char *)&v16 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v8, v11);
  v12 = (*(unsigned __int8 *)(v9 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  v13 = swift_allocObject();
  result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v9 + 32))(v13 + v12, (char *)&v16 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), v8);
  v15 = (double *)(v13 + ((v10 + v12 + 7) & 0xFFFFFFFFFFFFFFF8));
  *v15 = a3;
  v15[1] = a4;
  *a2 = partial apply for closure #1 in static CAHostingLayerEvent.mouseDragged(location:instant:);
  a2[1] = (uint64_t (*)(uint64_t))v13;
  return result;
}

uint64_t closure #1 in static CAHostingLayerEvent.mouseDragged(location:instant:)(uint64_t a1, uint64_t a2, double a3, double a4)
{
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[6];

  v8 = *(_QWORD *)(a1 + *(int *)(type metadata accessor for CAHostingLayerEvent.Context() + 20) + 16);
  v11[2] = a1;
  v11[3] = a2;
  *(double *)&v11[4] = a3;
  *(double *)&v11[5] = a4;
  swift_bridgeObjectRetain();
  v9 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFShy7SwiftUI19CAHostingLayerEventV11MouseButtonVG_AH8ResolvedVs5NeverOTg5((void (*)(_OWORD *__return_ptr, uint64_t *))partial apply for closure #1 in closure #1 in static CAHostingLayerEvent.mouseDragged(location:instant:), (uint64_t)v11, v8);
  swift_bridgeObjectRelease();
  return v9;
}

uint64_t sub_234FC4B68()
{
  uint64_t v0;
  uint64_t v1;

  v1 = type metadata accessor for ContinuousClock.Instant();
  (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80)), v1);
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in static CAHostingLayerEvent.mouseDragged(location:instant:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  double *v5;

  v3 = *(_QWORD *)(type metadata accessor for ContinuousClock.Instant() - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5 = (double *)(v1 + ((*(_QWORD *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8));
  return closure #1 in static CAHostingLayerEvent.mouseDragged(location:instant:)(a1, v1 + v4, *v5, v5[1]);
}

ValueMetadata *type metadata accessor for CAHostingLayerEvent()
{
  return &type metadata for CAHostingLayerEvent;
}

ValueMetadata *type metadata accessor for CAHostingLayerEvent.MouseButton()
{
  return &type metadata for CAHostingLayerEvent.MouseButton;
}

uint64_t initializeWithCopy for CAHostingLayerEvent.Resolved(uint64_t a1, uint64_t a2)
{
  __int128 v3;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 32) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a1 + 8, a2 + 8);
  return a1;
}

_QWORD *assignWithCopy for CAHostingLayerEvent.Resolved(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  __swift_assign_boxed_opaque_existential_1(a1 + 1, a2 + 1);
  return a1;
}

uint64_t assignWithTake for CAHostingLayerEvent.Resolved(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  __swift_destroy_boxed_opaque_existential_1(a1 + 8);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  return a1;
}

uint64_t getEnumTagSinglePayload for CAHostingLayerEvent.Resolved(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 48))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 32);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for CAHostingLayerEvent.Resolved(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 48) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 32) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 48) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for CAHostingLayerEvent.Resolved()
{
  return &type metadata for CAHostingLayerEvent.Resolved;
}

uint64_t *initializeBufferWithCopyOfBuffer for CAHostingLayerEvent.Context(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for ContinuousClock.Instant();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = *(int *)(a3 + 20);
    v9 = (uint64_t *)((char *)a1 + v8);
    v10 = (uint64_t *)((char *)a2 + v8);
    v11 = v10[1];
    *v9 = *v10;
    v9[1] = v11;
    v9[2] = v10[2];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t destroy for CAHostingLayerEvent.Context(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for ContinuousClock.Instant();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for CAHostingLayerEvent.Context(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;

  v6 = type metadata accessor for ContinuousClock.Instant();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = (_QWORD *)(a1 + v7);
  v9 = (_QWORD *)(a2 + v7);
  v10 = v9[1];
  *v8 = *v9;
  v8[1] = v10;
  v8[2] = v9[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for CAHostingLayerEvent.Context(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v6 = type metadata accessor for ContinuousClock.Instant();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = (_QWORD *)(a2 + v7);
  *(_QWORD *)(a1 + v7) = *v9;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v8 + 8) = v9[1];
  *(_QWORD *)(v8 + 16) = v9[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t initializeWithTake for CAHostingLayerEvent.Context(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v6 = type metadata accessor for ContinuousClock.Instant();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  *(_OWORD *)v8 = *(_OWORD *)v9;
  *(_QWORD *)(v8 + 16) = *(_QWORD *)(v9 + 16);
  return a1;
}

uint64_t assignWithTake for CAHostingLayerEvent.Context(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;

  v6 = type metadata accessor for ContinuousClock.Instant();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = (_QWORD *)(a2 + v7);
  *(_QWORD *)(a1 + v7) = *v9;
  swift_bridgeObjectRelease();
  v10 = v9[2];
  *(_QWORD *)(v8 + 8) = v9[1];
  *(_QWORD *)(v8 + 16) = v10;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for CAHostingLayerEvent.Context()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_234FC50E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = type metadata accessor for ContinuousClock.Instant();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t storeEnumTagSinglePayload for CAHostingLayerEvent.Context()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_234FC516C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for ContinuousClock.Instant();
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
  return result;
}

uint64_t type metadata accessor for CAHostingLayerEvent.Context()
{
  uint64_t result;

  result = type metadata singleton initialization cache for CAHostingLayerEvent.Context;
  if (!type metadata singleton initialization cache for CAHostingLayerEvent.Context)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t type metadata completion function for CAHostingLayerEvent.Context()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for ContinuousClock.Instant();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t closure #1 in closure #1 in static CAHostingLayerEvent.mouseDragged(location:instant:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>, double a4@<D0>, double a5@<D1>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  double v21;
  uint64_t v22;

  v10 = type metadata accessor for ContinuousClock.Instant();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)&v22 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = *a1;
  result = type metadata accessor for CAHostingLayerEvent.Context();
  v16 = *(_QWORD *)(a2 + *(int *)(result + 20));
  if (*(_QWORD *)(v16 + 16))
  {
    result = specialized __RawDictionaryStorage.find<A>(_:)(v14);
    if ((v17 & 1) != 0)
    {
      v18 = *(_QWORD *)(*(_QWORD *)(v16 + 56) + 8 * result);
      (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, a2, v10);
      ContinuousClock.Instant.duration(to:)();
      (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
      v19 = Duration.components.getter();
      v21 = (double)v20 / 1.0e18 + (double)v19;
      a3[4] = &type metadata for MouseEvent;
      a3[5] = &protocol witness table for MouseEvent;
      result = swift_allocObject();
      *(double *)(result + 16) = v21;
      *(_QWORD *)(result + 24) = 0;
      *(_QWORD *)(result + 32) = v14;
      *(_BYTE *)(result + 40) = 1;
      *(_QWORD *)(result + 48) = 0;
      *(_QWORD *)(result + 56) = 0;
      *(double *)(result + 64) = a4;
      *(double *)(result + 72) = a5;
      *(_QWORD *)(result + 80) = 0;
      *a3 = v18;
      a3[1] = result;
      return result;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t partial apply for closure #1 in closure #1 in static CAHostingLayerEvent.mouseDragged(location:instant:)@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  return closure #1 in closure #1 in static CAHostingLayerEvent.mouseDragged(location:instant:)(a1, *(_QWORD *)(v2 + 16), a2, *(double *)(v2 + 32), *(double *)(v2 + 40));
}

uint64_t sub_234FC5438()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t outlined init with take of CAHostingLayerEvent.Resolved?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for _ContiguousArrayStorage<CAHostingLayerEvent.Resolved>(0, &lazy cache variable for type metadata for CAHostingLayerEvent.Resolved?, (uint64_t (*)(_QWORD, ValueMetadata *))MEMORY[0x24BEE1C68]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void type metadata accessor for _ContiguousArrayStorage<CAHostingLayerEvent.Resolved>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(_QWORD, ValueMetadata *))
{
  unint64_t v4;
  uint64_t v5;

  if (!*a2)
  {
    v4 = a3(0, &type metadata for CAHostingLayerEvent.Resolved);
    if (!v5)
      atomic_store(v4, a2);
  }
}

uint64_t outlined init with copy of CAHostingLayerEvent.Resolved?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for _ContiguousArrayStorage<CAHostingLayerEvent.Resolved>(0, &lazy cache variable for type metadata for CAHostingLayerEvent.Resolved?, (uint64_t (*)(_QWORD, ValueMetadata *))MEMORY[0x24BEE1C68]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of CAHostingLayerEvent.Resolved?(uint64_t a1)
{
  uint64_t v2;

  type metadata accessor for _ContiguousArrayStorage<CAHostingLayerEvent.Resolved>(0, &lazy cache variable for type metadata for CAHostingLayerEvent.Resolved?, (uint64_t (*)(_QWORD, ValueMetadata *))MEMORY[0x24BEE1C68]);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t destroy for MouseTracker()
{
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

_QWORD *initializeBufferWithCopyOfBuffer for MouseTracker(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for MouseTracker(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_QWORD *assignWithTake for MouseTracker(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;

  *a1 = *a2;
  swift_bridgeObjectRelease();
  v4 = a2[2];
  a1[1] = a2[1];
  a1[2] = v4;
  swift_bridgeObjectRelease();
  return a1;
}

void *type metadata accessor for MouseTracker()
{
  return &unk_2506141E0;
}

BOOL compareEnumTags<A>(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  double v6;
  uint64_t v7;
  char *v8;
  void (*v9)(char *, double);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(char *, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  _BYTE v20[16];
  uint64_t v21;
  uint64_t v22;
  _BYTE v23[16];
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  v5 = *(_QWORD *)(a3 - 8);
  v6 = MEMORY[0x24BDAC7A8](a1);
  v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *(void (**)(char *, double))(v5 + 16);
  v9(v8, v6);
  v24 = a3;
  v25 = a3;
  v10 = MEMORY[0x24BEE4078];
  v11 = MEMORY[0x24BEE1768];
  v12 = MEMORY[0x24BEE40A8];
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v8, (uint64_t)partial apply for closure #1 in tag #1 <A>(of:) in compareEnumTags<A>(_:_:), (uint64_t)v23, a3, MEMORY[0x24BEE4078], MEMORY[0x24BEE1768], MEMORY[0x24BEE40A8], v13);
  v14 = *(void (**)(char *, uint64_t))(v5 + 8);
  v14(v8, a3);
  v15 = v19;
  ((void (*)(char *, uint64_t, uint64_t))v9)(v8, a2, a3);
  v21 = a3;
  v22 = a3;
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v8, (uint64_t)closure #1 in tag #1 <A>(of:) in compareEnumTags<A>(_:_:)partial apply, (uint64_t)v20, a3, v10, v11, v12, v16);
  v14(v8, a3);
  return v15 == v19;
}

uint64_t static AsyncAttribute.flags.getter()
{
  unsigned int v1;

  type metadata accessor for AGAttributeTypeFlags(0);
  lazy protocol witness table accessor for type AGAttributeTypeFlags and conformance AGAttributeTypeFlags();
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  OptionSet<>.init()();
  return v1;
}

BOOL AGTypeID.isValueType.getter()
{
  return AGTypeGetKind() - 2 < 4;
}

uint64_t AGTypeID.genericType(at:)(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 8 * a1 + 16);
}

uint64_t AGTypeID.projectEnum(at:tag:_:)(uint64_t a1, uint64_t a2, void (*a3)(uint64_t))
{
  AGTypeProjectEnumData();
  a3(a1);
  return AGTypeInjectEnumTag();
}

uint64_t static AGAttributeFlags.transactional.getter()
{
  return 1;
}

uint64_t specialized Attribute.syncMainIfReferences<A>(do:)(uint64_t a1, uint64_t a2)
{
  uint64_t Value;
  uint64_t v4;
  void (*v5)(uint64_t);
  char v6;
  uint64_t result;
  void *v8;
  uint64_t v9;
  int CurrentAttribute;
  uint64_t v11;
  char isEscapingClosureAtFileLocation;
  _QWORD v13[6];
  _QWORD v14[2];
  int v15;
  _QWORD v16[2];
  char v17;
  char v18;
  uint64_t v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  v19 = a2;
  Value = AGGraphGetValue();
  v5 = *(void (**)(uint64_t))Value;
  v4 = *(_QWORD *)(Value + 8);
  v16[0] = *(_QWORD *)Value;
  v16[1] = v4;
  if ((v6 & 2) != 0)
  {
    v17 = 1;
    MEMORY[0x24BDAC7A8](Value);
    v13[2] = &v17;
    v13[3] = partial apply for closure #2 in ChildValueTransaction.value.getter;
    v13[4] = &v18;
    v13[5] = v16;
    v8 = (void *)objc_opt_self();
    swift_retain();
    if ((objc_msgSend(v8, sel_isMainThread) & 1) != 0)
    {
      result = ((uint64_t (*)(uint64_t))v16[0])(a2);
      v17 = 0;
    }
    else
    {
      v9 = swift_allocObject();
      *(_QWORD *)(v9 + 16) = partial apply for specialized closure #1 in Attribute.syncMainIfReferences<A>(do:);
      *(_QWORD *)(v9 + 24) = v13;
      CurrentAttribute = AGGraphGetCurrentAttribute();
      v14[0] = thunk for @escaping @callee_guaranteed () -> ()partial apply;
      v14[1] = v9;
      v15 = CurrentAttribute;
      v11 = one-time initialization token for _lock;
      swift_retain();
      if (v11 != -1)
        swift_once();
      _MovableLockSyncMain(static Update._lock, (uint64_t)v14, (void (*)(uint64_t))@objc closure #1 in closure #1 in closure #1 in static Update.syncMain(_:));
      swift_release();
      isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
      result = swift_release();
      if ((isEscapingClosureAtFileLocation & 1) != 0)
        __break(1u);
    }
    if ((v17 & 1) != 0)
      __break(1u);
    else
      return swift_release();
  }
  else
  {
    swift_retain();
    v5(a2);
    return swift_release();
  }
  return result;
}

{
  uint64_t Value;
  uint64_t (*v4)(uint64_t);
  uint64_t v5;
  char v6;
  uint64_t result;
  _QWORD v8[6];
  char v9;
  uint64_t v10;
  char v11;
  _QWORD v12[2];

  v10 = a2;
  type metadata accessor for (_:)();
  Value = AGGraphGetValue();
  v4 = *(uint64_t (**)(uint64_t))Value;
  v5 = *(_QWORD *)(Value + 8);
  v12[0] = *(_QWORD *)Value;
  v12[1] = v5;
  if ((v6 & 2) == 0)
    return v4(a2);
  v11 = 1;
  MEMORY[0x24BDAC7A8](Value);
  v8[2] = &v11;
  v8[3] = partial apply for closure #2 in ChildValueTransaction.value.getter;
  v8[4] = &v9;
  v8[5] = v12;
  swift_retain();
  result = specialized static Update.syncMain(_:)(partial apply for specialized closure #1 in Attribute.syncMainIfReferences<A>(do:), (uint64_t)v8);
  if ((v11 & 1) == 0)
    return swift_release();
  __break(1u);
  return result;
}

uint64_t specialized Attribute.syncMainIfReferences<A>(do:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t Value;
  void (*v6)(uint64_t);
  void (*v7)(uint64_t);
  char v8;
  uint64_t result;
  void *v10;
  uint64_t v11;
  int CurrentAttribute;
  uint64_t v13;
  char isEscapingClosureAtFileLocation;
  _QWORD v15[7];
  void (*v16)(uint64_t);
  void (*v17)(uint64_t);
  _QWORD v18[2];
  int v19;
  char v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v22 = a2;
  v23 = a3;
  type metadata accessor for (_:)(0, (unint64_t *)&lazy cache variable for type metadata for (_:), (void (*)(uint64_t))type metadata accessor for Int?);
  Value = AGGraphGetValue();
  v7 = *(void (**)(uint64_t))Value;
  v6 = *(void (**)(uint64_t))(Value + 8);
  v16 = *(void (**)(uint64_t))Value;
  v17 = v6;
  if ((v8 & 2) != 0)
  {
    v20 = 1;
    MEMORY[0x24BDAC7A8](Value);
    v15[2] = &v20;
    v15[3] = partial apply for specialized closure #1 in PreferenceTransform.value.getter;
    v15[4] = &v21;
    v15[5] = &v16;
    v10 = (void *)objc_opt_self();
    swift_retain();
    if ((objc_msgSend(v10, sel_isMainThread) & 1) != 0)
    {
      result = specialized closure #1 in PreferenceTransform.value.getter(v16, v17, a2, a3);
      v20 = 0;
    }
    else
    {
      v11 = swift_allocObject();
      *(_QWORD *)(v11 + 16) = partial apply for specialized closure #1 in Attribute.syncMainIfReferences<A>(do:);
      *(_QWORD *)(v11 + 24) = v15;
      CurrentAttribute = AGGraphGetCurrentAttribute();
      v18[0] = partial apply for thunk for @escaping @callee_guaranteed () -> ();
      v18[1] = v11;
      v19 = CurrentAttribute;
      v13 = one-time initialization token for _lock;
      swift_retain();
      if (v13 != -1)
        swift_once();
      _MovableLockSyncMain(static Update._lock, (uint64_t)v18, (void (*)(uint64_t))@objc closure #1 in closure #1 in closure #1 in static Update.syncMain(_:));
      swift_release();
      isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
      result = swift_release();
      if ((isEscapingClosureAtFileLocation & 1) != 0)
        __break(1u);
    }
    if ((v20 & 1) != 0)
      __break(1u);
    else
      return swift_release();
  }
  else
  {
    swift_retain();
    specialized closure #1 in PreferenceTransform.value.getter(v7, v6, a2, a3);
    return swift_release();
  }
  return result;
}

uint64_t specialized Attribute.syncMainIfReferences<A>(do:)(uint64_t a1, uint64_t a2, void (*a3)(char *, char *, uint64_t))
{
  uint64_t Value;
  void (*v6)(char *, char *, uint64_t);
  void (*v7)(char *, char *, uint64_t);
  char v8;
  uint64_t result;
  _QWORD v10[6];
  char v11;
  uint64_t v12;
  void (*v13)(char *, char *, uint64_t);
  char v14;
  _QWORD v15[2];

  v12 = a2;
  v13 = a3;
  type metadata accessor for (_:)();
  Value = AGGraphGetValue();
  v6 = *(void (**)(char *, char *, uint64_t))Value;
  v7 = *(void (**)(char *, char *, uint64_t))(Value + 8);
  v15[0] = *(_QWORD *)Value;
  v15[1] = v7;
  if ((v8 & 2) == 0)
    return specialized closure #1 in PreferenceTransform.value.getter(v6, v7, a2, a3, (uint64_t)&unk_25066D718, (uint64_t)partial apply for specialized closure #1 in installObservationSlow<A>(accessList:attribute:));
  v14 = 1;
  MEMORY[0x24BDAC7A8](v6);
  v10[2] = &v14;
  v10[3] = partial apply for specialized closure #1 in PreferenceTransform.value.getter;
  v10[4] = &v11;
  v10[5] = v15;
  swift_retain();
  result = specialized static Update.syncMain(_:)(partial apply for specialized closure #1 in Attribute.syncMainIfReferences<A>(do:), (uint64_t)v10);
  if ((v14 & 1) == 0)
    return swift_release();
  __break(1u);
  return result;
}

{
  uint64_t Value;
  void (*v6)(char *, char *, uint64_t);
  void (*v7)(char *, char *, uint64_t);
  char v8;
  uint64_t result;
  _QWORD v10[6];
  char v11;
  uint64_t v12;
  void (*v13)(char *, char *, uint64_t);
  char v14;
  _QWORD v15[2];

  v12 = a2;
  v13 = a3;
  type metadata accessor for (_:)(0, (unint64_t *)&lazy cache variable for type metadata for (_:), (void (*)(uint64_t))type metadata accessor for [ScrollTargetRole.Role : [ScrollableCollection]]);
  Value = AGGraphGetValue();
  v6 = *(void (**)(char *, char *, uint64_t))Value;
  v7 = *(void (**)(char *, char *, uint64_t))(Value + 8);
  v15[0] = *(_QWORD *)Value;
  v15[1] = v7;
  if ((v8 & 2) == 0)
    return specialized closure #1 in PreferenceTransform.value.getter(v6, v7, a2, a3, (uint64_t)&unk_25066D6F0, (uint64_t)partial apply for specialized closure #1 in installObservationSlow<A>(accessList:attribute:));
  v14 = 1;
  MEMORY[0x24BDAC7A8](v6);
  v10[2] = &v14;
  v10[3] = partial apply for specialized closure #1 in PreferenceTransform.value.getter;
  v10[4] = &v11;
  v10[5] = v15;
  swift_retain();
  result = specialized static Update.syncMain(_:)(partial apply for specialized closure #1 in Attribute.syncMainIfReferences<A>(do:), (uint64_t)v10);
  if ((v14 & 1) == 0)
    return swift_release();
  __break(1u);
  return result;
}

uint64_t Attribute.syncMainIfReferences<A>(do:)@<X0>(void (*a1)(_QWORD)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t Value;
  char v20;
  char v21;
  uint64_t result;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(_QWORD);
  uint64_t v26;
  uint64_t v27;
  void (*v28)(_QWORD);
  uint64_t v29;

  v28 = a1;
  v29 = a2;
  v8 = type metadata accessor for Optional();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)&v26 - v13;
  v15 = *(_QWORD *)(a3 - 8);
  MEMORY[0x24BDAC7A8](v16);
  v18 = (char *)&v26 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  Value = AGGraphGetValue();
  v21 = v20;
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v18, Value, a3);
  if ((v21 & 2) != 0)
  {
    v27 = a5;
    v23 = *(_QWORD *)(a4 - 8);
    v24 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v23 + 56))(v14, 1, 1, a4);
    MEMORY[0x24BDAC7A8](v24);
    *(&v26 - 6) = a3;
    *(&v26 - 5) = a4;
    v25 = v28;
    *(&v26 - 4) = (uint64_t)v14;
    *(&v26 - 3) = (uint64_t)v25;
    *(&v26 - 2) = v29;
    *(&v26 - 1) = (uint64_t)v18;
    specialized static Update.syncMain(_:)(partial apply for closure #1 in Attribute.syncMainIfReferences<A>(do:), (uint64_t)(&v26 - 8));
    (*(void (**)(char *, char *, uint64_t))(v9 + 16))(v11, v14, v8);
    result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v23 + 48))(v11, 1, a4);
    if ((_DWORD)result == 1)
    {
      __break(1u);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v15 + 8))(v18, a3);
      (*(void (**)(uint64_t, char *, uint64_t))(v23 + 32))(v27, v11, a4);
      return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v14, v8);
    }
  }
  else
  {
    v28(v18);
    return (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v18, a3);
  }
  return result;
}

uint64_t static AGAttributeFlags.removable.getter()
{
  return 2;
}

uint64_t Attribute.unsafeBitCast<A>(to:)()
{
  return AGGraphCreateOffsetAttribute2();
}

uint64_t static AGAttributeFlags.scrapeable.getter()
{
  return 8;
}

uint64_t AGSubgraphRef.addSecondaryChild(_:)()
{
  return AGSubgraphAddChild2();
}

Swift::Void __swiftcall AGSubgraphRef.didReinsert()()
{
  AGSubgraphApply();
}

Swift::Void __swiftcall AGSubgraphRef.willInvalidate(isInserted:)(Swift::Bool isInserted)
{
  AGSubgraphApply();
}

Swift::Void __swiftcall AGSubgraphRef.willRemove()()
{
  AGSubgraphApply();
}

uint64_t specialized closure #1 in PreferenceTransform.value.getter(void (*a1)(uint64_t), void (*a2)(uint64_t), uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(uint64_t);
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  unint64_t StatusReg;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  void (*v27)(char *, char *, uint64_t);
  char *v28;
  char *v29;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  void (*v37)(char *, unint64_t, uint64_t);
  uint64_t v39;
  char *v40;
  void (*v41)(uint64_t);
  void *v42;
  void (*v43)(uint64_t);
  char *v44;
  char *v45;
  uint64_t v46;

  v46 = *MEMORY[0x24BDAC8D0];
  v7 = type metadata accessor for ObservationTracking._AccessList();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v39 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v11);
  v44 = (char *)&v39 - v12;
  MEMORY[0x24BDAC7A8](v13);
  v40 = (char *)&v39 - v14;
  type metadata accessor for [(_:)](0, (unint64_t *)&lazy cache variable for type metadata for ObservationTracking._AccessList?, v15, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v16);
  v18 = (char *)&v39 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v19);
  v21 = (char *)&v39 - v20;
  if (AGGraphGetCurrentAttribute() == *MEMORY[0x24BE096C0])
  {
    __break(1u);
  }
  else
  {
    v41 = a1;
    v22 = one-time initialization token for lastestAccessLists;
    swift_retain();
    a1 = a2;
    if (v22 == -1)
      goto LABEL_3;
  }
  swift_once();
LABEL_3:
  swift_beginAccess();
  v42 = static ObservationRegistrar.lastestAccessLists;
  static ObservationRegistrar.lastestAccessLists = (_UNKNOWN *)MEMORY[0x24BEE4AF8];
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56))(v21, 1, 1, v7);
  v45 = v21;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v24 = *(_QWORD *)(StatusReg + 848);
  *(_QWORD *)(StatusReg + 848) = v45;
  v43 = a1;
  v41(a4);
  *(_QWORD *)(StatusReg + 848) = v24;
  v25 = (uint64_t)v45;
  outlined init with copy of ObservationTracking._AccessList?((uint64_t)v45, (uint64_t)v18, (unint64_t *)&lazy cache variable for type metadata for ObservationTracking._AccessList?, (uint64_t (*)(uint64_t))MEMORY[0x24BEE5C08], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  v26 = (_QWORD *)&type metadata instantiation cache for InterfaceIdiomBox;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v18, 1, v7) == 1)
  {
    outlined destroy of ObservationTracking._AccessList?((uint64_t)v18, (unint64_t *)&lazy cache variable for type metadata for ObservationTracking._AccessList?, (uint64_t (*)(uint64_t))MEMORY[0x24BEE5C08], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  }
  else
  {
    v27 = *(void (**)(char *, char *, uint64_t))(v8 + 32);
    v28 = v40;
    v27(v40, v18, v7);
    (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v44, v28, v7);
    swift_beginAccess();
    v29 = (char *)static ObservationRegistrar.lastestAccessLists;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    static ObservationRegistrar.lastestAccessLists = v29;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      v29 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v29 + 2) + 1, 1, (unint64_t)v29);
      static ObservationRegistrar.lastestAccessLists = v29;
    }
    v32 = *((_QWORD *)v29 + 2);
    v31 = *((_QWORD *)v29 + 3);
    if (v32 >= v31 >> 1)
    {
      v29 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v31 > 1, v32 + 1, 1, (unint64_t)v29);
      static ObservationRegistrar.lastestAccessLists = v29;
    }
    *((_QWORD *)v29 + 2) = v32 + 1;
    v27(&v29[((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80))+ *(_QWORD *)(v8 + 72) * v32], v44, v7);
    swift_endAccess();
    (*(void (**)(char *, uint64_t))(v8 + 8))(v28, v7);
    v26 = &type metadata instantiation cache for InterfaceIdiomBox;
    v25 = (uint64_t)v45;
  }
  outlined destroy of ObservationTracking._AccessList?(v25, (unint64_t *)&lazy cache variable for type metadata for ObservationTracking._AccessList?, (uint64_t (*)(uint64_t))MEMORY[0x24BEE5C08], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  v33 = v26[463];
  v34 = *(_QWORD *)(v33 + 16);
  if (v34)
  {
    v35 = v33 + ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
    v36 = *(_QWORD *)(v8 + 72);
    v37 = *(void (**)(char *, unint64_t, uint64_t))(v8 + 16);
    v45 = (char *)v33;
    swift_bridgeObjectRetain();
    do
    {
      v37(v10, v35, v7);
      specialized installObservationSlow<A>(accessList:attribute:)((uint64_t)v10);
      (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
      v35 += v36;
      --v34;
    }
    while (v34);
    swift_bridgeObjectRelease();
    v26 = &type metadata instantiation cache for InterfaceIdiomBox;
  }
  v26[463] = v42;
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t specialized closure #1 in PreferenceTransform.value.getter(void (*a1)(char *, char *, uint64_t), void (*a2)(char *, char *, uint64_t), uint64_t a3, void (*a4)(char *, char *, uint64_t), uint64_t a5, uint64_t a6)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(uint64_t);
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  unint64_t StatusReg;
  uint64_t v26;
  void (*v27)(char *, char *, uint64_t);
  _QWORD *v28;
  char *v29;
  char *v30;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v32;
  unint64_t v33;
  char *v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  void (*v38)(char *, char *, uint64_t);
  _QWORD v40[2];
  void (*v41)(char *, char *, uint64_t);
  void *v42;
  char *v43;
  char *v44;
  void (*v45)(char *, char *, uint64_t);
  uint64_t v46;

  v45 = a4;
  v46 = *MEMORY[0x24BDAC8D0];
  v9 = type metadata accessor for ObservationTracking._AccessList();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)v40 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v13);
  v43 = (char *)v40 - v14;
  MEMORY[0x24BDAC7A8](v15);
  v44 = (char *)v40 - v16;
  type metadata accessor for [(_:)](0, (unint64_t *)&lazy cache variable for type metadata for ObservationTracking._AccessList?, v17, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v18);
  v20 = (char *)v40 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v21);
  v23 = (char *)v40 - v22;
  if (AGGraphGetCurrentAttribute() == *MEMORY[0x24BE096C0])
  {
    __break(1u);
  }
  else
  {
    v40[1] = a6;
    v41 = a1;
    v24 = one-time initialization token for lastestAccessLists;
    swift_retain();
    a1 = a2;
    if (v24 == -1)
      goto LABEL_3;
  }
  swift_once();
LABEL_3:
  swift_beginAccess();
  v42 = static ObservationRegistrar.lastestAccessLists;
  static ObservationRegistrar.lastestAccessLists = (_UNKNOWN *)MEMORY[0x24BEE4AF8];
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56))(v23, 1, 1, v9);
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v26 = *(_QWORD *)(StatusReg + 848);
  *(_QWORD *)(StatusReg + 848) = v23;
  v27 = v45;
  v45 = a1;
  ((void (*)(void (*)(char *, char *, uint64_t)))v41)(v27);
  *(_QWORD *)(StatusReg + 848) = v26;
  outlined init with copy of ObservationTracking._AccessList?((uint64_t)v23, (uint64_t)v20, (unint64_t *)&lazy cache variable for type metadata for ObservationTracking._AccessList?, (uint64_t (*)(uint64_t))MEMORY[0x24BEE5C08], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  v28 = (_QWORD *)&type metadata instantiation cache for InterfaceIdiomBox;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v20, 1, v9) == 1)
  {
    outlined destroy of ObservationTracking._AccessList?((uint64_t)v20, (unint64_t *)&lazy cache variable for type metadata for ObservationTracking._AccessList?, (uint64_t (*)(uint64_t))MEMORY[0x24BEE5C08], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  }
  else
  {
    v29 = v44;
    v41 = *(void (**)(char *, char *, uint64_t))(v10 + 32);
    v41(v44, v20, v9);
    (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v43, v29, v9);
    swift_beginAccess();
    v30 = (char *)static ObservationRegistrar.lastestAccessLists;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    static ObservationRegistrar.lastestAccessLists = v30;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      v30 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v30 + 2) + 1, 1, (unint64_t)v30);
      static ObservationRegistrar.lastestAccessLists = v30;
    }
    v33 = *((_QWORD *)v30 + 2);
    v32 = *((_QWORD *)v30 + 3);
    if (v33 >= v32 >> 1)
    {
      v30 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v32 > 1, v33 + 1, 1, (unint64_t)v30);
      static ObservationRegistrar.lastestAccessLists = v30;
    }
    *((_QWORD *)v30 + 2) = v33 + 1;
    v41(&v30[((*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80))+ *(_QWORD *)(v10 + 72) * v33], v43, v9);
    swift_endAccess();
    (*(void (**)(char *, uint64_t))(v10 + 8))(v44, v9);
    v28 = &type metadata instantiation cache for InterfaceIdiomBox;
  }
  outlined destroy of ObservationTracking._AccessList?((uint64_t)v23, (unint64_t *)&lazy cache variable for type metadata for ObservationTracking._AccessList?, (uint64_t (*)(uint64_t))MEMORY[0x24BEE5C08], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  v34 = (char *)v28[463];
  v35 = *((_QWORD *)v34 + 2);
  if (v35)
  {
    v36 = &v34[(*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80)];
    v37 = *(_QWORD *)(v10 + 72);
    v38 = *(void (**)(char *, char *, uint64_t))(v10 + 16);
    v44 = v34;
    swift_bridgeObjectRetain();
    do
    {
      v38(v12, v36, v9);
      specialized installObservationSlow<A>(accessList:attribute:)((uint64_t)v12);
      (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
      v36 += v37;
      --v35;
    }
    while (v35);
    swift_bridgeObjectRelease();
    v28 = &type metadata instantiation cache for InterfaceIdiomBox;
  }
  v28[463] = v42;
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t static AGSubgraphChildFlags.secondary.getter()
{
  return 1;
}

uint64_t specialized installObservationSlow<A>(accessList:attribute:)(uint64_t a1)
{
  return specialized installObservationSlow<A>(accessList:attribute:)(a1);
}

{
  return specialized installObservationSlow<A>(accessList:attribute:)(a1);
}

{
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  id v9;
  void *v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  _BYTE v17[8];
  _BYTE v18[8];

  type metadata accessor for [(_:)](0, (unint64_t *)&lazy cache variable for type metadata for ObservationTracking._AccessList?, (uint64_t (*)(uint64_t))MEMORY[0x24BEE5C08], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v2);
  v4 = &v17[-v3];
  v5 = type metadata accessor for ObservationTracking();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = &v17[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  if (AGGraphGetCurrentAttribute() == *MEMORY[0x24BE096C0])
  {
    v9 = (id)AGSubgraphGetCurrent();
    if (!v9)
      goto LABEL_8;
    v10 = v9;
    v11 = (id)AGSubgraphGetGraph();

  }
  else
  {
    v11 = (id)AGGraphGetAttributeGraph();
  }
  if (AGGraphGetContext())
  {
    swift_retain();

    swift_weakInit();
    swift_weakAssign();
    swift_release();
    outlined init with take of WeakUncheckedSendable<GraphHost>((uint64_t)v17, (uint64_t)v18);
    v12 = AGCreateWeakAttribute();
    v13 = type metadata accessor for ObservationTracking._AccessList();
    v14 = *(_QWORD *)(v13 - 8);
    (*(void (**)(_BYTE *, uint64_t, uint64_t))(v14 + 16))(v4, a1, v13);
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v4, 0, 1, v13);
    ObservationTracking.init(_:)();
    outlined init with copy of ObservationTracking._AccessList?((uint64_t)v18, (uint64_t)v17, &lazy cache variable for type metadata for WeakUncheckedSendable<GraphHost>, (uint64_t (*)(uint64_t))type metadata accessor for GraphHost, (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for WeakUncheckedSendable);
    v15 = swift_allocObject();
    *(_QWORD *)(v15 + 16) = v12;
    outlined init with take of WeakUncheckedSendable<GraphHost>((uint64_t)v17, v15 + 24);
    static ObservationTracking._installTracking(_:willSet:didSet:)();
    swift_release();
    (*(void (**)(_BYTE *, uint64_t))(v6 + 8))(v8, v5);
    return outlined destroy of ObservationTracking._AccessList?((uint64_t)v18, &lazy cache variable for type metadata for WeakUncheckedSendable<GraphHost>, (uint64_t (*)(uint64_t))type metadata accessor for GraphHost, (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for WeakUncheckedSendable);
  }
  __break(1u);
LABEL_8:
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  return specialized installObservationSlow<A>(accessList:attribute:)(a1);
}

{
  return specialized installObservationSlow<A>(accessList:attribute:)(a1);
}

{
  return specialized installObservationSlow<A>(accessList:attribute:)(a1);
}

{
  return specialized installObservationSlow<A>(accessList:attribute:)(a1);
}

{
  return specialized installObservationSlow<A>(accessList:attribute:)(a1);
}

{
  return specialized installObservationSlow<A>(accessList:attribute:)(a1);
}

{
  return specialized installObservationSlow<A>(accessList:attribute:)(a1);
}

{
  return specialized installObservationSlow<A>(accessList:attribute:)(a1);
}

{
  return specialized installObservationSlow<A>(accessList:attribute:)(a1);
}

{
  return specialized installObservationSlow<A>(accessList:attribute:)(a1);
}

{
  return specialized installObservationSlow<A>(accessList:attribute:)(a1);
}

{
  return specialized installObservationSlow<A>(accessList:attribute:)(a1);
}

{
  return specialized installObservationSlow<A>(accessList:attribute:)(a1);
}

{
  return specialized installObservationSlow<A>(accessList:attribute:)(a1);
}

{
  return specialized installObservationSlow<A>(accessList:attribute:)(a1);
}

{
  return specialized installObservationSlow<A>(accessList:attribute:)(a1);
}

{
  return specialized installObservationSlow<A>(accessList:attribute:)(a1);
}

{
  return specialized installObservationSlow<A>(accessList:attribute:)(a1);
}

{
  return specialized installObservationSlow<A>(accessList:attribute:)(a1);
}

{
  return specialized installObservationSlow<A>(accessList:attribute:)(a1);
}

{
  return specialized installObservationSlow<A>(accessList:attribute:)(a1);
}

{
  return specialized installObservationSlow<A>(accessList:attribute:)(a1);
}

{
  return specialized installObservationSlow<A>(accessList:attribute:)(a1);
}

{
  return specialized installObservationSlow<A>(accessList:attribute:)(a1);
}

{
  return specialized installObservationSlow<A>(accessList:attribute:)(a1);
}

{
  return specialized installObservationSlow<A>(accessList:attribute:)(a1);
}

{
  return specialized installObservationSlow<A>(accessList:attribute:)(a1);
}

{
  return specialized installObservationSlow<A>(accessList:attribute:)(a1);
}

{
  return specialized installObservationSlow<A>(accessList:attribute:)(a1);
}

{
  return specialized installObservationSlow<A>(accessList:attribute:)(a1);
}

{
  return specialized installObservationSlow<A>(accessList:attribute:)(a1);
}

{
  return specialized installObservationSlow<A>(accessList:attribute:)(a1);
}

{
  return specialized installObservationSlow<A>(accessList:attribute:)(a1);
}

uint64_t specialized closure #1 in installObservationSlow<A>(accessList:attribute:)(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;

  type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for _ContiguousArrayStorage<ObservationTracking>, (uint64_t (*)(uint64_t))MEMORY[0x24BEE5C20], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
  v4 = type metadata accessor for ObservationTracking();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_QWORD *)(v5 + 72);
  v7 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16) = xmmword_23527E860;
  v9 = v8 + v7;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v5 + 16))(v9, a1, v4);
  if (one-time initialization token for _lock != -1)
    swift_once();
  v10 = static Update._lock;
  _MovableLockLock(static Update._lock);
  specialized static Update.begin()();
  if (AGWeakAttributeGetAttribute() == *MEMORY[0x24BE096C0] || !swift_weakLoadStrong())
  {
    v12 = *(_QWORD *)(v8 + 16);
    if (v12)
    {
      swift_bridgeObjectRetain();
      do
      {
        ObservationTracking.cancel()();
        v9 += v6;
        --v12;
      }
      while (v12);
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    if (_threadTransactionData())
    {
      type metadata accessor for PropertyList.Element();
      swift_unknownObjectRetain();
      v11 = swift_dynamicCastClassUnconditional();
    }
    else
    {
      v11 = 0;
    }
    v13 = _threadTransactionID();
    specialized GraphHost.asyncTransaction<A>(_:id:mutation:style:mayDeferUpdate:)(v11, v13, a2, v8, 0, 1);
    swift_release();
    swift_release();
  }
  static Update.end()();
  _MovableLockUnlock(v10);
  return swift_bridgeObjectRelease();
}

uint64_t DefaultRule.weakValue.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t WeakValue;
  uint64_t v4;
  uint64_t v5;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  WeakValue = AGGraphGetWeakValue();
  v4 = *(_QWORD *)(AssociatedTypeWitness - 8);
  if (WeakValue)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(a1, WeakValue, AssociatedTypeWitness);
    v5 = 0;
  }
  else
  {
    v5 = 1;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v4 + 56))(a1, v5, 1, AssociatedTypeWitness);
}

void DefaultRule.init()(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t static DefaultRule.initialValue.getter@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t AssociatedTypeWitness;

  (*(void (**)(void))(a1 + 16))();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 56))(a2, 0, 1, AssociatedTypeWitness);
}

uint64_t DefaultRule.value.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  _QWORD v13[2];

  v5 = *(_QWORD *)(a1 + 16);
  v4 = *(_QWORD *)(a1 + 24);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v7 = type metadata accessor for Optional();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)v13 - v9;
  v13[1] = *v2;
  DefaultRule.weakValue.getter((uint64_t)v13 - v9);
  v11 = *(_QWORD *)(AssociatedTypeWitness - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v10, 1, AssociatedTypeWitness) != 1)
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v11 + 32))(a2, v10, AssociatedTypeWitness);
  (*(void (**)(uint64_t, uint64_t))(v4 + 16))(v5, v4);
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
}

uint64_t DefaultRule.description.getter()
{
  return specialized DefaultRule.description.getter();
}

uint64_t protocol witness for static Rule.initialValue.getter in conformance DefaultRule<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return static DefaultRule.initialValue.getter(*(_QWORD *)(a1 + 24), a2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance DefaultRule<A>()
{
  return specialized DefaultRule.description.getter();
}

uint64_t protocol witness for static _AttributeBody._updateDefault(_:) in conformance DefaultRule<A>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v14;
  double v15;
  uint64_t v16;
  _QWORD v17[2];

  v17[1] = *MEMORY[0x24BDAC8D0];
  v3 = *(_QWORD *)(a2 + 24);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = type metadata accessor for Optional();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)v17 - v7;
  v9 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)v17 - v11;
  static DefaultRule.initialValue.getter(v3, (uint64_t)v8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v8, 1, AssociatedTypeWitness) == 1)
    return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  v14 = (*(uint64_t (**)(char *, char *, uint64_t))(v9 + 32))(v12, v8, AssociatedTypeWitness);
  v15 = MEMORY[0x24BDAC7A8](v14);
  v17[-2] = a2;
  v17[-1] = MEMORY[0x23B7C9C04](&protocol conformance descriptor for DefaultRule<A>, a2, v15);
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v12, (uint64_t)partial apply for closure #1 in static Rule._updateDefault(_:), (uint64_t)&v17[-4], AssociatedTypeWitness, MEMORY[0x24BEE4078], MEMORY[0x24BEE4AE0] + 8, MEMORY[0x24BEE40A8], v16);
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v12, AssociatedTypeWitness);
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance DefaultRule<A>(uint64_t a1)
{
  MEMORY[0x23B7C9C04](&protocol conformance descriptor for DefaultRule<A>, a1);
  return static AsyncAttribute.flags.getter();
}

uint64_t Attribute.overrideDefaultValue<A>(_:type:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  type metadata accessor for DefaultRule(0, a5, a6, a4);
  return AGGraphMutateAttribute();
}

Swift::Bool __swiftcall Attribute.invalidateValueIfNeeded()()
{
  char ValueState;

  ValueState = AGGraphGetValueState();
  if ((ValueState & 1) == 0)
    AGGraphInvalidateValue();
  return (ValueState & 1) == 0;
}

uint64_t static AGAttributeFlags.invalidatable.getter()
{
  return 4;
}

uint64_t closure #1 in AGSubgraphRef.willRemove()(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_QWORD *)AGGraphGetAttributeInfo();
  result = swift_conformsToProtocol2();
  if (result)
    v4 = result;
  else
    v4 = 0;
  if (result)
    v5 = v2;
  else
    v5 = 0;
  if (v5)
    return (*(uint64_t (**)(uint64_t))(v4 + 16))(a1);
  return result;
}

uint64_t closure #1 in AGSubgraphRef.didReinsert()(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_QWORD *)AGGraphGetAttributeInfo();
  result = swift_conformsToProtocol2();
  if (result)
    v4 = result;
  else
    v4 = 0;
  if (result)
    v5 = v2;
  else
    v5 = 0;
  if (v5)
    return (*(uint64_t (**)(uint64_t))(v4 + 24))(a1);
  return result;
}

uint64_t closure #1 in AGSubgraphRef.willInvalidate(isInserted:)(uint64_t a1, char a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;

  v4 = *(_QWORD *)AGGraphGetAttributeInfo();
  result = swift_conformsToProtocol2();
  if (result)
    v6 = result;
  else
    v6 = 0;
  if (result)
    v7 = v4;
  else
    v7 = 0;
  if (v7)
    return (*(uint64_t (**)(uint64_t))(v6 + 16))(a1);
  if ((a2 & 1) != 0)
  {
    result = swift_conformsToProtocol2();
    v6 = result ? result : 0;
    if (result ? v4 : 0)
      return (*(uint64_t (**)(uint64_t))(v6 + 16))(a1);
  }
  return result;
}

uint64_t closure #1 in Attribute.syncMainIfReferences<A>(do:)(uint64_t a1, void (*a2)(uint64_t, double), uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10;
  uint64_t v11;
  double v12;
  uint64_t v13;
  char *v14;
  uint64_t v16;

  v10 = type metadata accessor for Optional();
  v11 = *(_QWORD *)(v10 - 8);
  v12 = MEMORY[0x24BDAC7A8](v10);
  v14 = (char *)&v16 - v13;
  a2(a4, v12);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(a6 - 8) + 56))(v14, 0, 1, a6);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v11 + 40))(a1, v14, v10);
}

Swift::Bool __swiftcall Attribute.allowsAsyncUpdate()()
{
  return (~AGGraphGetValueState() & 0x11) != 0;
}

Swift::Bool __swiftcall WeakAttribute.allowsAsyncUpdate()()
{
  uint64_t v0;
  uint64_t v1;
  int Attribute;
  BOOL v3;
  int v4;
  char v5;
  uint64_t v6;
  _QWORD v8[5];
  int v9;
  char v10;
  char v11;

  v1 = v0;
  Attribute = AGWeakAttributeGetAttribute();
  v3 = Attribute == *MEMORY[0x24BE096C0];
  if (Attribute == *MEMORY[0x24BE096C0])
    v4 = 0;
  else
    v4 = Attribute;
  v9 = v4;
  v5 = v3;
  v10 = v5;
  v8[2] = v1;
  type metadata accessor for Attribute();
  type metadata accessor for Optional();
  _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF((void (*)(char *, char *))partial apply for closure #1 in WeakAttribute.allowsAsyncUpdate(), (uint64_t)v8, MEMORY[0x24BEE4078], MEMORY[0x24BEE1328], v6, (uint64_t)&v11);
  return v11 & 1;
}

uint64_t TreeElementFlags.rawValue.getter()
{
  unsigned int *v0;

  return *v0;
}

uint64_t TreeValueFlags.rawValue.getter()
{
  unsigned int *v0;

  return *v0;
}

uint64_t TreeValueFlags.init(rawValue:)@<X0>(uint64_t result@<X0>, _DWORD *a2@<X8>)
{
  *a2 = result;
  return result;
}

void static TreeValueFlags.stateSignal.getter(_DWORD *a1@<X8>)
{
  *a1 = 1;
}

void static TreeValueFlags.environmentObjectSignal.getter(_DWORD *a1@<X8>)
{
  *a1 = 2;
}

void static TreeValueFlags.observedObjectSignal.getter(_DWORD *a1@<X8>)
{
  *a1 = 3;
}

void static TreeValueFlags.appStorageSignal.getter(_DWORD *a1@<X8>)
{
  *a1 = 4;
}

void static TreeValueFlags.sceneStorageSignal.getter(_DWORD *a1@<X8>)
{
  *a1 = 5;
}

uint64_t partial apply for closure #1 in tag #1 <A>(of:) in compareEnumTags<A>(_:_:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = AGTypeGetEnumTag();
  *a1 = result;
  return result;
}

uint64_t Attribute.toOptional.getter(int a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v8;
  int v9;
  _BYTE v10[16];
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  v9 = a1;
  v11 = type metadata accessor for Optional();
  v12 = type metadata accessor for ToOptional(0, a2, v3, v4);
  v13 = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ToOptional<A>, v12);
  v5 = type metadata accessor for Attribute();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v9, (uint64_t)partial apply for closure #1 in Attribute.init<A>(_:), (uint64_t)v10, v12, MEMORY[0x24BEE4078], v5, MEMORY[0x24BEE40A8], v6);
  return v8;
}

uint64_t ToOptional.value.getter@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t Value;
  uint64_t v5;

  Value = AGGraphGetValue();
  v5 = *(_QWORD *)(a1 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(a2, Value, a1);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v5 + 56))(a2, 0, 1, a1);
}

uint64_t protocol witness for static Rule.initialValue.getter in conformance ToOptional<A>@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;

  v2 = type metadata accessor for Optional();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(a1, 1, 1, v2);
}

uint64_t protocol witness for Rule.value.getter in conformance ToOptional<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return ToOptional.value.getter(*(_QWORD *)(a1 + 16), a2);
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance ToOptional<A>(uint64_t a1)
{
  MEMORY[0x23B7C9C04](&protocol conformance descriptor for ToOptional<A>, a1);
  return static AsyncAttribute.flags.getter();
}

uint64_t static AGGraphRef.cancelCurrentUpdateIfDeadlinePassed()()
{
  uint64_t HasDeadlinePassed;

  HasDeadlinePassed = AGGraphHasDeadlinePassed();
  if ((_DWORD)HasDeadlinePassed)
    AGGraphCancelUpdate();
  return HasDeadlinePassed;
}

uint64_t static AGGraphRef.startTracing(options:)(uint64_t a1)
{
  if ((a1 & 0x100000000) != 0 && one-time initialization token for tracingOptions != -1)
    swift_once();
  return AGGraphStartTracing();
}

uint64_t static AGGraphRef.stopTracing()()
{
  return AGGraphStopTracing();
}

uint64_t partial apply for closure #1 in Attribute.syncMainIfReferences<A>(do:)()
{
  uint64_t v0;

  return closure #1 in Attribute.syncMainIfReferences<A>(do:)(*(_QWORD *)(v0 + 32), *(void (**)(uint64_t, double))(v0 + 40), *(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t specialized DefaultRule.description.getter()
{
  Swift::String v0;

  swift_getAssociatedTypeWitness();
  v0._countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  return 547916002;
}

uint64_t partial apply for closure #1 in Attribute.overrideDefaultValue<A>(_:type:)(uint64_t *a1)
{
  uint64_t result;

  result = AGCreateWeakAttribute();
  *a1 = result;
  return result;
}

uint64_t type metadata accessor for DefaultRule(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for DefaultRule);
}

uint64_t partial apply for closure #1 in WeakAttribute.allowsAsyncUpdate()@<X0>(BOOL *a1@<X8>)
{
  uint64_t result;

  result = AGGraphGetValueState();
  *a1 = (~(_DWORD)result & 0x11) != 0;
  return result;
}

uint64_t type metadata accessor for ToOptional(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ToOptional);
}

void base witness table accessor for _AttributeBody in DefaultRule<A>()
{
  JUMPOUT(0x23B7C9C04);
}

uint64_t instantiation function for generic protocol witness table for DefaultRule<A>(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for DefaultRule<A>);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type TreeElementFlags and conformance TreeElementFlags()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TreeElementFlags and conformance TreeElementFlags;
  if (!lazy protocol witness table cache variable for type TreeElementFlags and conformance TreeElementFlags)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for TreeElementFlags, &type metadata for TreeElementFlags);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TreeElementFlags and conformance TreeElementFlags);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TreeElementFlags and conformance TreeElementFlags;
  if (!lazy protocol witness table cache variable for type TreeElementFlags and conformance TreeElementFlags)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for TreeElementFlags, &type metadata for TreeElementFlags);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TreeElementFlags and conformance TreeElementFlags);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TreeElementFlags and conformance TreeElementFlags;
  if (!lazy protocol witness table cache variable for type TreeElementFlags and conformance TreeElementFlags)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for TreeElementFlags, &type metadata for TreeElementFlags);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TreeElementFlags and conformance TreeElementFlags);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TreeElementFlags and conformance TreeElementFlags;
  if (!lazy protocol witness table cache variable for type TreeElementFlags and conformance TreeElementFlags)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for TreeElementFlags, &type metadata for TreeElementFlags);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TreeElementFlags and conformance TreeElementFlags);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type TreeValueFlags and conformance TreeValueFlags()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TreeValueFlags and conformance TreeValueFlags;
  if (!lazy protocol witness table cache variable for type TreeValueFlags and conformance TreeValueFlags)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for TreeValueFlags, &type metadata for TreeValueFlags);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TreeValueFlags and conformance TreeValueFlags);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TreeValueFlags and conformance TreeValueFlags;
  if (!lazy protocol witness table cache variable for type TreeValueFlags and conformance TreeValueFlags)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for TreeValueFlags, &type metadata for TreeValueFlags);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TreeValueFlags and conformance TreeValueFlags);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TreeValueFlags and conformance TreeValueFlags;
  if (!lazy protocol witness table cache variable for type TreeValueFlags and conformance TreeValueFlags)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for TreeValueFlags, &type metadata for TreeValueFlags);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TreeValueFlags and conformance TreeValueFlags);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TreeValueFlags and conformance TreeValueFlags;
  if (!lazy protocol witness table cache variable for type TreeValueFlags and conformance TreeValueFlags)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for TreeValueFlags, &type metadata for TreeValueFlags);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TreeValueFlags and conformance TreeValueFlags);
  }
  return result;
}

uint64_t dispatch thunk of static Defaultable.defaultValue.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of static RemovableAttribute.willRemove(attribute:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 16))();
}

uint64_t dispatch thunk of static RemovableAttribute.didReinsert(attribute:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

ValueMetadata *type metadata accessor for TreeElementFlags()
{
  return &type metadata for TreeElementFlags;
}

ValueMetadata *type metadata accessor for TreeValueFlags()
{
  return &type metadata for TreeValueFlags;
}

uint64_t instantiation function for generic protocol witness table for ToOptional<A>(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x23B7C9C04]("i\v;\x1BH\n\n");
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

void base witness table accessor for _AttributeBody in ToOptional<A>()
{
  JUMPOUT(0x23B7C9C04);
}

uint64_t partial apply for specialized closure #1 in PreferenceTransform.value.getter(void (**a1)(uint64_t))
{
  uint64_t v1;

  return specialized closure #1 in PreferenceTransform.value.getter(*a1, a1[1], *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_234FC81A8()
{
  return swift_deallocObject();
}

uint64_t partial apply for specialized closure #1 in installObservationSlow<A>(accessList:attribute:)(uint64_t a1)
{
  uint64_t v1;

  return specialized closure #1 in installObservationSlow<A>(accessList:attribute:)(a1, *(_QWORD *)(v1 + 16));
}

uint64_t partial apply for closure #2 in ChildValueTransaction.value.getter(uint64_t (**a1)(uint64_t))
{
  uint64_t v1;

  return closure #1 in ChildTransaction.value.getter(a1, *(_QWORD *)(v1 + 16));
}

_QWORD *partial apply for specialized closure #1 in Attribute.syncMainIfReferences<A>(do:)()
{
  _QWORD *v0;
  _QWORD *(*v1)(char *__return_ptr, __int128 *);
  _BYTE *v2;
  _QWORD *result;
  char v4;
  __int128 v5;

  v2 = (_BYTE *)v0[2];
  v1 = (_QWORD *(*)(char *__return_ptr, __int128 *))v0[3];
  v5 = *(_OWORD *)v0[5];
  result = v1(&v4, &v5);
  *v2 = 0;
  return result;
}

uint64_t sub_234FC8220()
{
  return swift_deallocObject();
}

uint64_t sub_234FC8230()
{
  swift_weakDestroy();
  return swift_deallocObject();
}

uint64_t partial apply for specialized closure #1 in PreferenceTransform.value.getter(void (**a1)(char *, char *, uint64_t))
{
  uint64_t v1;

  return specialized closure #1 in PreferenceTransform.value.getter(*a1, a1[1], *(_QWORD *)(v1 + 16), *(void (**)(char *, char *, uint64_t))(v1 + 24), (uint64_t)&unk_25066D6F0, (uint64_t)partial apply for specialized closure #1 in installObservationSlow<A>(accessList:attribute:));
}

{
  uint64_t v1;

  return specialized closure #1 in PreferenceTransform.value.getter(*a1, a1[1], *(_QWORD *)(v1 + 16), *(void (**)(char *, char *, uint64_t))(v1 + 24), (uint64_t)&unk_25066D718, (uint64_t)partial apply for specialized closure #1 in installObservationSlow<A>(accessList:attribute:));
}

uint64_t type metadata accessor for (_:)(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  uint64_t result;

  result = *a2;
  if (!*a2)
  {
    a3(255);
    result = swift_getFunctionTypeMetadata();
    atomic_store(result, a2);
  }
  return result;
}

uint64_t closure #1 in tag #1 <A>(of:) in compareEnumTags<A>(_:_:)partial apply@<X0>(uint64_t *a1@<X8>)
{
  return partial apply for closure #1 in tag #1 <A>(of:) in compareEnumTags<A>(_:_:)(a1);
}

BOOL static TouchType.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

void TouchType.hash(into:)()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0);
}

Swift::Int TouchType.hashValue.getter()
{
  unsigned __int8 *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

Swift::Int one-time initialization function for allTypes()
{
  Swift::Int result;

  result = specialized Set.init(_nonEmptyArrayLiteral:)((uint64_t)&outlined read-only object #0 of one-time initialization function for allTypes);
  static TouchType.allTypes = result;
  return result;
}

uint64_t static TouchType.allTypes.getter()
{
  if (one-time initialization token for allTypes != -1)
    swift_once();
  return swift_bridgeObjectRetain();
}

uint64_t storeEnumTagSinglePayload for TouchType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_234FC8574 + 4 * byte_2352BCCC5[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_234FC85A8 + 4 * byte_2352BCCC0[v4]))();
}

uint64_t sub_234FC85A8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_234FC85B0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x234FC85B8);
  return result;
}

uint64_t sub_234FC85C4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x234FC85CCLL);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_234FC85D0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_234FC85D8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for TouchType()
{
  return &type metadata for TouchType;
}

Swift::Bool __swiftcall ResettableGestureRule.resetIfNeeded()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  uint64_t v12;
  char *v13;
  int v14;
  char v15;
  uint64_t v17;

  v3 = v2;
  v4 = v1;
  v5 = v0;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v9 = type metadata accessor for GesturePhase(0, AssociatedTypeWitness, v7, v8);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = MEMORY[0x24BDAC7A8](v9);
  v13 = (char *)&v17 - v12;
  v14 = (*(uint64_t (**)(uint64_t, uint64_t, double))(v4 + 40))(v5, v4, v11);
  if (v14 == (*(unsigned int (**)(uint64_t, uint64_t))(v4 + 32))(v5, v4))
  {
    swift_getAssociatedTypeWitness();
    if (AGGraphGetOutputValue())
    {
      (*(void (**)(uint64_t, uint64_t))(v4 + 24))(v5, v4);
      v15 = GesturePhase.isTerminal.getter(v9);
      (*(void (**)(char *, uint64_t))(v10 + 8))(v13, v9);
      if ((v15 & 1) != 0)
      {
        $defer #1 <A>() in ResettableGestureRule.resetIfNeeded()(v3, v5, v4);
        return 0;
      }
    }
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t))(v4 + 64))(v5, v4);
  }
  $defer #1 <A>() in ResettableGestureRule.resetIfNeeded()(v3, v5, v4);
  return 1;
}

uint64_t protocol witness for ResettableGestureRule.phaseValue.getter in conformance DelayedPhase<A>@<X0>(uint64_t a1@<X8>)
{
  return ResettableGestureRule<>.phaseValue.getter(a1);
}

uint64_t ResettableGestureRule<>.phaseValue.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = type metadata accessor for GesturePhase(0, AssociatedTypeWitness, v3, v4);
  result = AGGraphGetOutputValue();
  if (result)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a1, result, v5);
  __break(1u);
  return result;
}

uint64_t protocol witness for ResettableGestureRule.phaseValue.getter in conformance EventListenerPhase<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;

  v6 = type metadata accessor for EventListenerPhase.Value(255, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a4);
  v7 = MEMORY[0x23B7C9C04](&protocol conformance descriptor for EventListenerPhase<A>.Value, v6);
  return ResettableGestureRule<>.phaseValue.getter(a1, a2, v7);
}

uint64_t ResettableGestureRule<>.phaseValue.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t result;
  uint64_t v9;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v7 = (char *)&v9 - v6;
  result = AGGraphGetOutputValue();
  if (result)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, result, AssociatedTypeWitness);
    (*(void (**)(uint64_t, uint64_t))(a3 + 16))(AssociatedTypeWitness, a3);
    return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, AssociatedTypeWitness);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t $defer #1 <A>() in ResettableGestureRule.resetIfNeeded()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v11;

  v6 = *(_QWORD *)(a2 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, a1, a2);
  v9 = (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 32))(a2, a3);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, a2);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a3 + 48))(v9, a2, a3);
}

uint64_t dispatch thunk of ResettableGestureRule.phaseValue.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of ResettableGestureRule.resetSeed.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of ResettableGestureRule.lastResetSeed.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t dispatch thunk of ResettableGestureRule.lastResetSeed.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 48))();
}

uint64_t dispatch thunk of ResettableGestureRule.lastResetSeed.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 56))();
}

uint64_t dispatch thunk of ResettableGestureRule.resetPhase()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 64))();
}

BOOL static ProcessEnvironment.BOOL(forKey:defaultValue:)(uint64_t a1, uint64_t a2, BOOL a3)
{
  uint64_t v4;
  char *v5;

  v4 = String.utf8CString.getter();
  v5 = getenv((const char *)(v4 + 32));
  swift_release();
  if (v5)
    return atoi(v5) != 0;
  return a3;
}

ValueMetadata *type metadata accessor for ProcessEnvironment()
{
  return &type metadata for ProcessEnvironment;
}

uint64_t one-time initialization function for tracingOptions()
{
  uint64_t result;

  result = (uint64_t)getenv("SWIFTUI_TRACE");
  if (result && (result = atoi((const char *)result), (result & 0x80000000) != 0))
  {
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    static ProcessEnvironment.tracingOptions = result;
  }
  return result;
}

double *static Animation.spring(response:dampingFraction:blendDuration:)(double a1, double a2, double a3)
{
  double *result;

  type metadata accessor for InternalAnimationBox<FluidSpringAnimation>(0, (unint64_t *)&lazy cache variable for type metadata for InternalAnimationBox<FluidSpringAnimation>, (uint64_t (*)(void))lazy protocol witness table accessor for type FluidSpringAnimation and conformance FluidSpringAnimation, (uint64_t (*)(uint64_t, ValueMetadata *, uint64_t))type metadata accessor for InternalAnimationBox);
  result = (double *)swift_allocObject();
  result[2] = a1;
  result[3] = a2;
  result[4] = a3;
  return result;
}

double FluidSpringAnimation.response.getter()
{
  uint64_t v0;

  return *(double *)v0;
}

void FluidSpringAnimation.response.setter(double a1)
{
  double *v1;

  *v1 = a1;
}

uint64_t (*FluidSpringAnimation.response.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

double FluidSpringAnimation.dampingFraction.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 8);
}

void FluidSpringAnimation.dampingFraction.setter(double a1)
{
  uint64_t v1;

  *(double *)(v1 + 8) = a1;
}

uint64_t (*FluidSpringAnimation.dampingFraction.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

double FluidSpringAnimation.blendDuration.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 16);
}

void FluidSpringAnimation.blendDuration.setter(double a1)
{
  uint64_t v1;

  *(double *)(v1 + 16) = a1;
}

uint64_t (*FluidSpringAnimation.blendDuration.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

SwiftUI::FluidSpringAnimation __swiftcall FluidSpringAnimation.init(response:dampingFraction:blendDuration:)(Swift::Double response, Swift::Double dampingFraction, Swift::Double blendDuration)
{
  Swift::Double *v3;
  SwiftUI::FluidSpringAnimation result;

  *v3 = response;
  v3[1] = dampingFraction;
  v3[2] = blendDuration;
  result.blendDuration = blendDuration;
  result.dampingFraction = dampingFraction;
  result.response = response;
  return result;
}

uint64_t specialized FluidSpringAnimation.animate<A>(value:time:context:)@<X0>(uint64_t a1@<X0>, int64x2_t *a2@<X8>, float64_t a3@<D0>, float64_t a4@<D1>, float64_t a5@<D2>, float64_t a6@<D3>, double a7@<D4>, double a8@<D5>, double a9@<D6>, double a10@<D7>)
{
  uint64_t v16;
  double v17;
  double v18;
  double v19;
  BOOL v20;
  double v21;
  double v22;
  double v23;
  float64x2_t v24;
  float64x2_t v25;
  double v26;
  float64x2_t v27;
  float64x2_t v28;
  float64x2_t v29;
  float64x2_t v30;
  float64x2_t v31;
  float64x2_t v32;
  float64x2_t v33;
  float64x2_t v34;
  float64x2_t v35;
  float64x2_t v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t result;
  double v47;
  char v48;
  int64x2_t v49;
  int64x2_t v50;
  float64x2_t v51;
  float64x2_t v52;
  double v53;
  float64x2_t v54;
  float64x2_t v55;
  int64x2_t v60;
  int64x2_t v61;
  double v62;
  double v63;
  double v64;
  double v65;
  _QWORD v66[4];
  float64x2_t v67;
  float64x2_t v68;
  float64x2_t v69;
  float64x2_t v70;
  float64x2_t v71;
  float64x2_t v72;
  double v73;
  double v74;
  double v75;
  double v76;

  v16 = swift_bridgeObjectRetain();
  specialized AnimationState.subscript.getter(v16, &v67);
  swift_bridgeObjectRelease();
  if (a10 <= 0.0 || v76 == 0.0)
  {
    if (a8 > 0.0)
    {
LABEL_4:
      v17 = 6.28318531 / a8 * (6.28318531 / a8);
      goto LABEL_12;
    }
  }
  else
  {
    v18 = (a7 - v75) / a10;
    if (v18 <= 1.0)
      v19 = (a7 - v75) / a10;
    else
      v19 = 1.0;
    v20 = v18 < 0.0;
    v21 = 0.0;
    if (!v20)
      v21 = v19;
    a8 = v76 * (1.0 - v21 * v21 * (3.0 - (v21 + v21))) + a8;
    if (a8 > 0.0)
      goto LABEL_4;
  }
  v17 = INFINITY;
LABEL_12:
  if (v17 > 45000.0)
    v17 = 45000.0;
  v22 = v74;
  if (a8 <= a7 - v74)
    *(_BYTE *)(a1 + 17) = 1;
  if (a7 - v73 <= 1.0)
    v23 = v73;
  else
    v23 = a7 + -0.0166666667;
  v24 = v67;
  v25 = v68;
  if (v23 >= a7)
  {
    v38 = v69.f64[1];
    v37 = v70.f64[1];
    v62 = v69.f64[0];
    v63 = v70.f64[0];
    v40 = v71.f64[1];
    v39 = v72.f64[1];
    v64 = v71.f64[0];
    v65 = v72.f64[0];
  }
  else
  {
    v26 = sqrt(v17) * -2.0 * a9;
    v28 = v71;
    v27 = v72;
    v29.f64[0] = a5;
    v29.f64[1] = a6;
    v30.f64[0] = a3;
    v30.f64[1] = a4;
    v31 = (float64x2_t)vdupq_n_s64(0x3F5B4E81B4E81B4FuLL);
    v32 = v69;
    v33 = v70;
    v34 = (float64x2_t)vdupq_n_s64(0x3F6B4E81B4E81B4FuLL);
    do
    {
      v35 = vaddq_f64(vmulq_f64(v28, v31), v32);
      v36 = vaddq_f64(vmulq_f64(v27, v31), v33);
      v24 = vaddq_f64(v24, vmulq_f64(v35, v34));
      v25 = vaddq_f64(v25, vmulq_f64(v36, v34));
      v27 = vaddq_f64(vmulq_n_f64(v36, v26), vmulq_n_f64(vsubq_f64(v29, v25), v17));
      v28 = vaddq_f64(vmulq_n_f64(v35, v26), vmulq_n_f64(vsubq_f64(v30, v24), v17));
      v33 = vaddq_f64(v36, vmulq_f64(v27, v31));
      v32 = vaddq_f64(v35, vmulq_f64(v28, v31));
      v23 = v23 + 0.00333333333;
    }
    while (v23 < a7);
    v37 = v33.f64[1];
    v38 = v32.f64[1];
    v62 = v32.f64[0];
    v63 = v33.f64[0];
    v69 = v32;
    v70 = v33;
    v39 = v27.f64[1];
    v40 = v28.f64[1];
    v64 = v28.f64[0];
    v65 = v27.f64[0];
    v71 = v28;
    v72 = v27;
    v67 = v24;
    v68 = v25;
  }
  v60 = (int64x2_t)v25;
  v61 = (int64x2_t)v24;
  v41 = v75;
  v42 = v76;
  type metadata accessor for SpringState<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>>(0);
  v44 = v43;
  v66[3] = v43;
  v45 = swift_allocObject();
  v66[0] = v45;
  *(int64x2_t *)(v45 + 16) = v61;
  *(int64x2_t *)(v45 + 32) = v60;
  *(double *)(v45 + 48) = v62;
  *(double *)(v45 + 56) = v38;
  *(double *)(v45 + 64) = v63;
  *(double *)(v45 + 72) = v37;
  *(double *)(v45 + 80) = v64;
  *(double *)(v45 + 88) = v40;
  *(double *)(v45 + 96) = v65;
  *(double *)(v45 + 104) = v39;
  *(double *)(v45 + 112) = v23;
  *(double *)(v45 + 120) = v22;
  *(double *)(v45 + 128) = v41;
  *(double *)(v45 + 136) = v42;
  result = specialized Dictionary.subscript.setter((uint64_t)v66, v44);
  v47 = v62 * v62 + v38 * v38 + v63 * v63 + v37 * v37;
  if (v47 <= v64 * v64 + v40 * v40 + v65 * v65 + v39 * v39)
    v47 = v64 * v64 + v40 * v40 + v65 * v65 + v39 * v39;
  if (v47 <= 0.0036)
  {
    v51.f64[0] = a3;
    v52.f64[0] = a4;
    v53 = a3 * 0.01 * (a3 * 0.01) + a4 * 0.01 * (a4 * 0.01) + a5 * 0.01 * (a5 * 0.01) + a6 * 0.01 * (a6 * 0.01);
    if (v53 <= 0.0
      || (v52.f64[1] = a6,
          v50 = v60,
          v49 = v61,
          v54 = vsubq_f64(v52, (float64x2_t)vzip2q_s64(v61, v60)),
          v51.f64[1] = a5,
          v55 = vsubq_f64(v51, (float64x2_t)vzip1q_s64(v61, v60)),
          v53 >= vaddvq_f64(vaddq_f64(vmulq_f64(v55, v55), vmulq_f64(v54, v54)))))
    {
      v49 = 0uLL;
      v48 = 1;
      v50 = 0uLL;
    }
    else
    {
      v48 = 0;
    }
  }
  else
  {
    v48 = 0;
    v50 = v60;
    v49 = v61;
  }
  *a2 = v49;
  a2[1] = v50;
  a2[2].i8[0] = v48;
  return result;
}

uint64_t specialized FluidSpringAnimation.animate<A>(value:time:context:)(uint64_t a1, double a2, double a3, double a4, double a5, double a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  double v16;
  double v17;
  double v18;
  BOOL v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  double v35;
  double v37;
  _QWORD v39[4];
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  double v46;

  v12 = swift_bridgeObjectRetain();
  specialized AnimationState.subscript.getter(v12, (uint64_t)&v40);
  swift_bridgeObjectRelease();
  if (a6 <= 0.0 || v46 == 0.0)
  {
    if (a4 > 0.0)
    {
LABEL_4:
      v16 = 6.28318531 / a4 * (6.28318531 / a4);
      goto LABEL_12;
    }
  }
  else
  {
    v17 = (a3 - v45) / a6;
    if (v17 <= 1.0)
      v18 = (a3 - v45) / a6;
    else
      v18 = 1.0;
    v19 = v17 < 0.0;
    v20 = 0.0;
    if (!v19)
      v20 = v18;
    a4 = v46 * (1.0 - v20 * v20 * (3.0 - (v20 + v20))) + a4;
    if (a4 > 0.0)
      goto LABEL_4;
  }
  v16 = INFINITY;
LABEL_12:
  if (v16 > 45000.0)
    v16 = 45000.0;
  v21 = v44;
  if (a4 <= a3 - v44)
    *(_BYTE *)(a1 + 17) = 1;
  v22 = v40;
  if (a3 - v43 <= 1.0)
    v23 = v43;
  else
    v23 = a3 + -0.0166666667;
  if (v23 >= a3)
  {
    v26 = v41;
    v25 = v42;
  }
  else
  {
    v24 = sqrt(v16);
    v26 = v41;
    v25 = v42;
    v27 = (v24 + v24) * a5;
    do
    {
      v28 = v25 * 0.00166666667 + v26;
      v22 = v22 + v28 * 0.00333333333;
      v29 = v16 * (a2 - v22);
      v25 = v29 - v27 * v28;
      v26 = v28 + v25 * 0.00166666667;
      v23 = v23 + 0.00333333333;
    }
    while (v23 < a3);
    v41 = v28 + v25 * 0.00166666667;
    v42 = v29 - v27 * v28;
    v40 = v22;
  }
  v30 = v45;
  v31 = v46;
  type metadata accessor for SpringState<Double>(0, v13, v14, v15);
  v33 = v32;
  v39[3] = v32;
  v34 = swift_allocObject();
  v39[0] = v34;
  *(double *)(v34 + 16) = v22;
  *(double *)(v34 + 24) = v26;
  *(double *)(v34 + 32) = v25;
  *(double *)(v34 + 40) = v23;
  *(double *)(v34 + 48) = v21;
  *(double *)(v34 + 56) = v30;
  *(double *)(v34 + 64) = v31;
  specialized Dictionary.subscript.setter((uint64_t)v39, v33);
  v35 = v26 * v26;
  if (v26 * v26 <= v25 * v25)
    v35 = v25 * v25;
  if (v35 > 0.0036)
    return *(_QWORD *)&v22;
  v37 = a2 * 0.01 * (a2 * 0.01);
  if (v37 >= (a2 - v22) * (a2 - v22) || v37 <= 0.0)
    return 0;
  else
    return *(_QWORD *)&v22;
}

uint64_t FluidSpringAnimation.animate<A>(value:time:context:)@<X0>(double *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>, double a5@<D0>)
{
  double *v5;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  double v31;
  double v32;
  double v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  double v43;
  double v44;
  uint64_t result;
  char v46;
  uint64_t v47;
  double v48;
  double v49;
  BOOL v50;
  double v51;
  double v52;
  uint64_t v53;
  double v54;
  char *v55;
  char *v56;
  char *v57;
  uint64_t v58;
  double v59;
  uint64_t v60;
  void (*v61)(uint64_t, uint64_t, double);
  char *v62;
  void (*v63)(char *, char *, uint64_t);
  char *v64;
  uint64_t v65;
  char *v66;
  void (*v67)(char *, char *, uint64_t);
  uint64_t v68;
  void (*v69)(char *, uint64_t);
  char *v70;
  double v71;
  uint64_t v72;
  int *v73;
  uint64_t v74;
  double (*v75)(uint64_t, uint64_t);
  double v76;
  double v77;
  void (*v78)(uint64_t, uint64_t, uint64_t);
  uint64_t v79;
  char *v80;
  float64_t *v81;
  char *v82;
  double v83;
  double v84;
  double v85;
  void (*v86)(char *, uint64_t);
  uint64_t v87;
  uint64_t v88;
  void (*v89)(char *, uint64_t);
  char *v90;
  uint64_t v91;
  uint64_t v92;
  int *v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  void (*v97)(char *, char *, uint64_t);
  void (*v98)(uint64_t, uint64_t, double);
  char *v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  float64_t *v103;
  char *v104;
  uint64_t v105;
  char *v106;
  char *v107;
  char *v108;
  char *v109;
  int64x2_t v110;
  char v111;
  char v112;

  v105 = *(_QWORD *)(a3 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v94 = (char *)&v90 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)&v90 - v13;
  MEMORY[0x24BDAC7A8](v15);
  v108 = (char *)&v90 - v16;
  MEMORY[0x24BDAC7A8](v17);
  v102 = (char *)&v90 - v18;
  MEMORY[0x24BDAC7A8](v19);
  v104 = (char *)&v90 - v20;
  MEMORY[0x24BDAC7A8](v21);
  v109 = (char *)&v90 - v22;
  v24 = v23;
  v26 = (int *)type metadata accessor for SpringState(0, v25, v23, v23);
  v27 = *((_QWORD *)v26 - 1);
  MEMORY[0x24BDAC7A8](v26);
  v29 = (char *)&v90 - v28;
  if (a3 == MEMORY[0x24BEE13C8])
  {
    result = specialized FluidSpringAnimation.animate<A>(value:time:context:)(a2, *a1, a5, *v5, v5[1], v5[2]);
    *(_QWORD *)a4 = result;
    *(_BYTE *)(a4 + 8) = v46 & 1;
    return result;
  }
  v95 = a4;
  v96 = a2;
  v103 = a1;
  if (type metadata accessor for AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>() == a3)
  {
    specialized FluidSpringAnimation.animate<A>(value:time:context:)(v96, &v110, *v103, v103[1], v103[2], v103[3], a5, *v5, v5[1], v5[2]);
    return outlined init with take of AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>?((uint64_t)&v110, v95);
  }
  v32 = *v5;
  v31 = v5[1];
  v33 = v5[2];
  v34 = v96;
  v35 = *(_QWORD *)(v96 + 8);
  v36 = *(_BYTE *)(v96 + 16);
  v37 = *(_BYTE *)(v96 + 17);
  v110.i64[0] = *(_QWORD *)v96;
  v110.i64[1] = v35;
  v111 = v36;
  v112 = v37;
  v92 = type metadata accessor for AnimationContext(0, a3, v24, v30);
  AnimationContext.springState.getter(v92, v38, v39, v40);
  if (v33 <= 0.0 || (v43 = *(double *)&v29[v26[14]], v43 == 0.0))
  {
    if (v32 > 0.0)
    {
LABEL_6:
      v44 = 6.28318531 / v32 * (6.28318531 / v32);
      goto LABEL_16;
    }
  }
  else
  {
    v47 = v26[13];
    v48 = (a5 - *(double *)&v29[v47]) / v33;
    if (v48 <= 1.0)
      v49 = (a5 - *(double *)&v29[v47]) / v33;
    else
      v49 = 1.0;
    v50 = v48 < 0.0;
    v51 = 0.0;
    if (!v50)
      v51 = v49;
    v32 = v32 + v43 * (1.0 - v51 * v51 * (3.0 - (v51 + v51)));
    if (v32 > 0.0)
      goto LABEL_6;
  }
  v44 = INFINITY;
LABEL_16:
  v90 = v14;
  v91 = v27;
  if (v44 <= 45000.0)
    v52 = v44;
  else
    v52 = 45000.0;
  if (v32 <= a5 - *(double *)&v29[v26[12]])
    *(_BYTE *)(v34 + 17) = 1;
  v93 = v26;
  v53 = v26[11];
  v54 = *(double *)&v29[v53];
  v55 = v109;
  if (a5 - v54 > 1.0)
  {
    v54 = a5 + -0.0166666667;
    *(double *)&v29[v53] = a5 + -0.0166666667;
  }
  v107 = v29;
  v101 = v24;
  v56 = v108;
  v57 = v104;
  if (v54 < a5)
  {
    v58 = v93[9];
    v106 = &v107[v93[10]];
    v98 = *(void (**)(uint64_t, uint64_t, double))(v101 + 16);
    v99 = &v107[v58];
    v59 = v31 * (sqrt(v52) * -2.0);
    v97 = *(void (**)(char *, char *, uint64_t))(v105 + 16);
    v100 = v53;
    v60 = v101;
    v61 = v98;
    v62 = &v107[v58];
    do
    {
      v63 = v97;
      v97(v55, v106, a3);
      v61(a3, v60, 0.00166666667);
      dispatch thunk of static AdditiveArithmetic.+= infix(_:_:)();
      v63(v57, v109, a3);
      v61(a3, v60, 0.00333333333);
      dispatch thunk of static AdditiveArithmetic.+= infix(_:_:)();
      v64 = v102;
      v63(v102, v109, a3);
      v61(a3, v60, v59);
      v63(v56, (char *)v103, a3);
      dispatch thunk of static AdditiveArithmetic.-= infix(_:_:)();
      v61(a3, v60, v52);
      v65 = v105;
      v66 = v106;
      v67 = *(void (**)(char *, char *, uint64_t))(v105 + 24);
      v67(v106, v64, a3);
      dispatch thunk of static AdditiveArithmetic.+= infix(_:_:)();
      v67(v62, v66, a3);
      v68 = v65;
      v56 = v108;
      v61(a3, v60, 0.00166666667);
      v55 = v109;
      dispatch thunk of static AdditiveArithmetic.+= infix(_:_:)();
      v69 = *(void (**)(char *, uint64_t))(v68 + 8);
      v69(v56, a3);
      v70 = v64;
      v57 = v104;
      v69(v70, a3);
      v69(v57, a3);
      v69(v55, a3);
      v71 = *(double *)&v107[v100] + 0.00333333333;
      *(double *)&v107[v100] = v71;
    }
    while (v71 < a5);
  }
  v72 = (uint64_t)v107;
  specialized AnimationContext.springState.setter((uint64_t)v107, v92, v41, v42);
  v73 = v93;
  v74 = v101;
  v75 = *(double (**)(uint64_t, uint64_t))(v101 + 24);
  v76 = v75(a3, v101);
  v77 = v75(a3, v74);
  if (v76 > v77)
    v77 = v76;
  v78 = *(void (**)(uint64_t, uint64_t, uint64_t))(v105 + 16);
  if (v77 > 0.0036)
  {
    v79 = v95;
    v78(v95, v72, a3);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v105 + 56))(v79, 0, 1, a3);
    return (*(uint64_t (**)(uint64_t, int *))(v91 + 8))(v72, v73);
  }
  v80 = v90;
  v81 = v103;
  v78((uint64_t)v90, (uint64_t)v103, a3);
  (*(void (**)(uint64_t, uint64_t, double))(v74 + 16))(a3, v74, 0.01);
  v82 = v94;
  v78((uint64_t)v94, (uint64_t)v81, a3);
  dispatch thunk of static AdditiveArithmetic.-= infix(_:_:)();
  v83 = v75(a3, v74);
  if (v83 <= 0.0)
  {
    v89 = *(void (**)(char *, uint64_t))(v105 + 8);
    v89(v82, a3);
    v89(v80, a3);
    v87 = v95;
    v88 = v91;
    goto LABEL_34;
  }
  v84 = v83;
  v85 = v75(a3, v74);
  v86 = *(void (**)(char *, uint64_t))(v105 + 8);
  v86(v82, a3);
  v86(v80, a3);
  v87 = v95;
  v88 = v91;
  if (v84 >= v85)
  {
LABEL_34:
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v105 + 56))(v87, 1, 1, a3);
    return (*(uint64_t (**)(uint64_t, int *))(v88 + 8))(v72, v73);
  }
  v78(v95, v72, a3);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v105 + 56))(v87, 0, 1, a3);
  return (*(uint64_t (**)(uint64_t, int *))(v88 + 8))(v72, v73);
}

uint64_t type metadata accessor for SpringState(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for SpringState);
}

uint64_t AnimationContext.springState.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = *(_QWORD *)(a1 + 16);
  v5 = *(_QWORD *)(a1 + 24);
  v6 = type metadata accessor for SpringState(0, v4, v5, a4);
  v8 = type metadata accessor for AnimationState(0, v4, v5, v7);
  v9 = MEMORY[0x23B7C9C04](&protocol conformance descriptor for SpringState<A>, v6);
  return AnimationState.subscript.getter(v6, v8, v6, v9);
}

double _stdlib_squareRoot(double a1)
{
  return sqrt(a1);
}

uint64_t FluidSpringAnimation.velocity<A>(value:time:context:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD v22[3];
  char v23;
  char v24;

  v8 = type metadata accessor for SpringState(0, a2, a3, a3);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)v22 - v10;
  v12 = *(_QWORD *)(a1 + 8);
  v13 = *(_BYTE *)(a1 + 16);
  v14 = *(_BYTE *)(a1 + 17);
  v22[1] = *(_QWORD *)a1;
  v22[2] = v12;
  v23 = v13;
  v24 = v14;
  v16 = type metadata accessor for AnimationContext(0, a2, a3, v15);
  AnimationContext.springState.getter(v16, v17, v18, v19);
  v20 = *(_QWORD *)(a2 - 8);
  (*(void (**)(uint64_t, char *, uint64_t))(v20 + 16))(a4, &v11[*(int *)(v8 + 36)], a2);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v20 + 56))(a4, 0, 1, a2);
}

uint64_t FluidSpringAnimation.shouldMerge<A>(previous:value:time:context:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, double a6)
{
  double *v6;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  double v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int (*v34)(char *, uint64_t, uint64_t);
  int *v35;
  char *v36;
  __n128 (*v37)(char *, char *, uint64_t);
  __n128 v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  double v45;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char v62;
  char v63;

  v48 = a2;
  v59 = a1;
  v50 = type metadata accessor for Optional();
  v55 = *(_QWORD *)(v50 - 8);
  MEMORY[0x24BDAC7A8](v50);
  v56 = (uint64_t)&v47 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)&v47 - v13;
  v15 = *(_QWORD *)(a4 - 8);
  MEMORY[0x24BDAC7A8](v16);
  v51 = (char *)&v47 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v18);
  v54 = (char *)&v47 - v19;
  MEMORY[0x24BDAC7A8](v20);
  v49 = (char *)&v47 - v21;
  v47 = type metadata accessor for SpringState(0, a4, a5, v22);
  v57 = *(_QWORD *)(v47 - 8);
  MEMORY[0x24BDAC7A8](v47);
  v24 = (char *)&v47 - v23;
  v25 = *v6;
  v27 = *(_QWORD *)a3;
  v26 = *(_QWORD *)(a3 + 8);
  v28 = *(_BYTE *)(a3 + 16);
  v58 = a3;
  LOBYTE(a3) = *(_BYTE *)(a3 + 17);
  v60 = v27;
  v61 = v26;
  v62 = v28;
  v63 = a3;
  v53 = type metadata accessor for AnimationContext(0, a4, a5, v29);
  AnimationContext.springState.getter(v53, v30, v31, v32);
  v60 = v27;
  v61 = v26;
  v62 = v28;
  v63 = a3;
  swift_bridgeObjectRetain();
  v33 = v48;
  v52 = a5;
  Animation.velocity<A>(value:time:context:)(v48, (uint64_t)&v60, v59, a4, a5);
  swift_bridgeObjectRelease();
  v34 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48);
  if (v34(v14, 1, a4) == 1)
  {
    v35 = (int *)v47;
    v36 = v49;
    (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v49, &v24[*(int *)(v47 + 36)], a4);
    (*(void (**)(char *, uint64_t))(v55 + 8))(v14, v50);
  }
  else
  {
    v36 = v49;
    (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v49, v14, a4);
    v35 = (int *)v47;
  }
  v37 = *(__n128 (**)(char *, char *, uint64_t))(v15 + 40);
  v38 = v37(&v24[v35[9]], v36, a4);
  v39 = v56;
  v38.n128_f64[0] = a6;
  Animation.animate<A>(value:time:context:)(v33, v58, v59, a4, v52, v56, v38);
  v40 = v51;
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v51, v33, a4);
  if (v34((char *)v39, 1, a4) == 1)
  {
    v41 = v54;
    (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v54, v40, a4);
    (*(void (**)(uint64_t, uint64_t))(v55 + 8))(v39, v50);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v15 + 8))(v40, a4);
    v41 = v54;
    (*(void (**)(char *, uint64_t, uint64_t))(v15 + 32))(v54, v39, a4);
  }
  v37(v24, v41, a4);
  *(double *)&v24[v35[11]] = a6;
  *(double *)&v24[v35[12]] = a6;
  type metadata accessor for InternalAnimationBox<FluidSpringAnimation>(0, &lazy cache variable for type metadata for AnimationBox<FluidSpringAnimation>, (uint64_t (*)(void))lazy protocol witness table accessor for type FluidSpringAnimation and conformance FluidSpringAnimation, (uint64_t (*)(uint64_t, ValueMetadata *, uint64_t))type metadata accessor for AnimationBox);
  v42 = swift_dynamicCastClass();
  if (v42)
  {
    v45 = *(double *)(v42 + 16);
    if (v25 != v45)
    {
      *(double *)&v24[v35[14]] = v45 - v25;
      *(double *)&v24[v35[13]] = a6;
    }
  }
  specialized AnimationContext.springState.setter((uint64_t)v24, v53, v43, v44);
  (*(void (**)(char *, int *))(v57 + 8))(v24, v35);
  return 1;
}

double FluidSpringAnimation.function.getter@<D0>(uint64_t a1@<X8>)
{
  double result;

  SpringAnimation.function.getter(a1);
  return result;
}

void FluidSpringAnimation.hash(into:)()
{
  Swift::UInt64 *v0;
  Swift::UInt64 v1;
  Swift::UInt64 v2;
  Swift::UInt64 v3;
  Swift::UInt64 v4;
  Swift::UInt64 v5;

  v1 = v0[1];
  v2 = v0[2];
  if ((*v0 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v3 = *v0;
  else
    v3 = 0;
  Hasher._combine(_:)(v3);
  if ((v1 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v4 = v1;
  else
    v4 = 0;
  Hasher._combine(_:)(v4);
  if ((v2 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v5 = v2;
  else
    v5 = 0;
  Hasher._combine(_:)(v5);
}

BOOL static FluidSpringAnimation.== infix(_:_:)(double *a1, double *a2)
{
  return *a1 == *a2 && a1[1] == a2[1] && a1[2] == a2[2];
}

Swift::Int FluidSpringAnimation.hashValue.getter()
{
  Hasher.init(_seed:)();
  FluidSpringAnimation.hash(into:)();
  return Hasher._finalize()();
}

void protocol witness for InternalCustomAnimation.function.getter in conformance FluidSpringAnimation(uint64_t a1@<X8>)
{
  double *v1;
  double v3;

  if (*v1 <= 0.0)
    v3 = INFINITY;
  else
    v3 = 6.28318531 / *v1 * (6.28318531 / *v1);
  _stdlib_squareRoot(v3);
  SpringAnimation.function.getter(a1);
}

uint64_t protocol witness for CustomAnimation.velocity<A>(value:time:context:) in conformance FluidSpringAnimation@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  return FluidSpringAnimation.velocity<A>(value:time:context:)(a1, a2, a3, a4);
}

uint64_t protocol witness for CustomAnimation.shouldMerge<A>(previous:value:time:context:) in conformance FluidSpringAnimation(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, double a6)
{
  FluidSpringAnimation.shouldMerge<A>(previous:value:time:context:)(a1, a2, a3, a4, a5, a6);
  return 1;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance FluidSpringAnimation()
{
  Hasher.init(_seed:)();
  FluidSpringAnimation.hash(into:)();
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance FluidSpringAnimation()
{
  Hasher.init(_seed:)();
  FluidSpringAnimation.hash(into:)();
  return Hasher._finalize()();
}

uint64_t SpringState.init()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  int *v7;
  uint64_t result;

  dispatch thunk of IteratorProtocol.next()();
  v7 = (int *)type metadata accessor for SpringState(0, a1, a2, v6);
  dispatch thunk of IteratorProtocol.next()();
  result = dispatch thunk of IteratorProtocol.next()();
  *(_QWORD *)(a3 + v7[11]) = 0;
  *(_QWORD *)(a3 + v7[12]) = 0;
  *(_QWORD *)(a3 + v7[13]) = 0;
  *(_QWORD *)(a3 + v7[14]) = 0;
  return result;
}

uint64_t protocol witness for static AnimationStateKey.defaultValue.getter in conformance SpringState<A>(uint64_t a1)
{
  return static SpringState.defaultValue.getter(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24));
}

double *static Animation.interactiveSpring(response:dampingFraction:blendDuration:)(double a1, double a2, double a3)
{
  double *result;

  type metadata accessor for InternalAnimationBox<FluidSpringAnimation>(0, (unint64_t *)&lazy cache variable for type metadata for InternalAnimationBox<FluidSpringAnimation>, (uint64_t (*)(void))lazy protocol witness table accessor for type FluidSpringAnimation and conformance FluidSpringAnimation, (uint64_t (*)(uint64_t, ValueMetadata *, uint64_t))type metadata accessor for InternalAnimationBox);
  result = (double *)swift_allocObject();
  result[2] = a1;
  result[3] = a2;
  result[4] = a3;
  return result;
}

_QWORD *FluidSpringAnimation.encode(to:)(_QWORD *result)
{
  double *v1;
  double *v2;
  _QWORD *v3;
  double v4;
  double v5;
  double v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = v1;
  v3 = result;
  v5 = *v2;
  v4 = v2[1];
  v6 = v2[2];
  if (*v2 != 0.0)
  {
    ProtobufEncoder.encodeVarint(_:)(9uLL);
    v7 = v3[1];
    result = (_QWORD *)(v7 + 8);
    if (__OFADD__(v7, 8))
    {
      __break(1u);
    }
    else if (v3[2] >= (uint64_t)result)
    {
      v3[1] = result;
      *(double *)(*v3 + v7) = v5;
      goto LABEL_5;
    }
    result = (_QWORD *)ProtobufEncoder.growBufferSlow(to:)((int64_t)result);
    *(double *)result = v5;
    if (v4 == 0.0)
      goto LABEL_9;
    goto LABEL_6;
  }
LABEL_5:
  if (v4 == 0.0)
    goto LABEL_9;
LABEL_6:
  ProtobufEncoder.encodeVarint(_:)(0x11uLL);
  v8 = v3[1];
  result = (_QWORD *)(v8 + 8);
  if (__OFADD__(v8, 8))
  {
    __break(1u);
  }
  else if (v3[2] >= (uint64_t)result)
  {
    v3[1] = result;
    *(double *)(*v3 + v8) = v4;
    goto LABEL_9;
  }
  result = (_QWORD *)ProtobufEncoder.growBufferSlow(to:)((int64_t)result);
  *(double *)result = v4;
LABEL_9:
  if (v6 == 0.0)
    return result;
  ProtobufEncoder.encodeVarint(_:)(0x19uLL);
  v9 = v3[1];
  result = (_QWORD *)(v9 + 8);
  if (__OFADD__(v9, 8))
  {
    __break(1u);
    goto LABEL_20;
  }
  if (v3[2] < (uint64_t)result)
  {
LABEL_20:
    result = (_QWORD *)ProtobufEncoder.growBufferSlow(to:)((int64_t)result);
    *(double *)result = v6;
    return result;
  }
  v3[1] = result;
  *(double *)(*v3 + v9) = v6;
  return result;
}

unint64_t FluidSpringAnimation.init(from:)@<X0>(unint64_t result@<X0>, double *a2@<X8>)
{
  uint64_t v2;
  _QWORD *v3;
  unint64_t v5;
  unint64_t v6;
  double v7;
  double v8;
  double v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  double *v13;
  unint64_t v14;
  double *v15;
  unint64_t v16;
  double *v17;
  float *v18;
  float v19;
  float *v20;
  float v21;
  float *v22;
  float v23;

  v3 = (_QWORD *)result;
  v5 = *(_QWORD *)(result + 8);
  v6 = *(_QWORD *)(result + 16);
  v7 = 0.0;
  if (v5 < v6)
  {
    v8 = 0.0;
    v9 = 0.0;
    while (1)
    {
      result = v3[3];
      if (result)
      {
        v10 = v3[4];
        if (v5 < v10)
          goto LABEL_15;
        if (v10 < v5)
          goto LABEL_61;
        v3[3] = 0;
      }
      result = ProtobufDecoder.decodeVarint()();
      if (v2)
        return result;
      if (result <= 7)
      {
LABEL_61:
        lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
        swift_allocError();
        return swift_willThrow();
      }
LABEL_15:
      v11 = result >> 3;
      if (result >> 3 == 3)
      {
        v14 = result & 7;
        if (v14 != 5)
        {
          if (v14 == 2)
          {
            result = ProtobufDecoder.decodeVarint()();
            if (v2)
              return result;
            if ((result & 0x8000000000000000) != 0)
              goto LABEL_64;
            v15 = (double *)v3[1];
            if (v6 < (unint64_t)v15 + result)
              goto LABEL_61;
            v3[3] = 25;
            v3[4] = (char *)v15 + result;
          }
          else
          {
            if (v14 != 1)
              goto LABEL_61;
            v15 = (double *)v3[1];
          }
          v5 = (unint64_t)(v15 + 1);
          if (v6 < (unint64_t)(v15 + 1))
            goto LABEL_61;
          v7 = *v15;
LABEL_7:
          v3[1] = v5;
          goto LABEL_8;
        }
        v20 = (float *)v3[1];
        v5 = (unint64_t)(v20 + 1);
        if (v6 < (unint64_t)(v20 + 1))
          goto LABEL_61;
        v21 = *v20;
        v3[1] = v5;
        v7 = v21;
      }
      else if (v11 == 2)
      {
        v16 = result & 7;
        if (v16 != 5)
        {
          if (v16 == 2)
          {
            result = ProtobufDecoder.decodeVarint()();
            if (v2)
              return result;
            if ((result & 0x8000000000000000) != 0)
              goto LABEL_65;
            v17 = (double *)v3[1];
            if (v6 < (unint64_t)v17 + result)
              goto LABEL_61;
            v3[3] = 17;
            v3[4] = (char *)v17 + result;
          }
          else
          {
            if (v16 != 1)
              goto LABEL_61;
            v17 = (double *)v3[1];
          }
          v5 = (unint64_t)(v17 + 1);
          if (v6 < (unint64_t)(v17 + 1))
            goto LABEL_61;
          v8 = *v17;
          goto LABEL_7;
        }
        v22 = (float *)v3[1];
        v5 = (unint64_t)(v22 + 1);
        if (v6 < (unint64_t)(v22 + 1))
          goto LABEL_61;
        v23 = *v22;
        v3[1] = v5;
        v8 = v23;
      }
      else
      {
        if (v11 != 1)
        {
          switch(result & 7)
          {
            case 0uLL:
              result = ProtobufDecoder.decodeVarint()();
              if (v2)
                return result;
              v5 = v3[1];
              goto LABEL_8;
            case 1uLL:
              v5 = v3[1] + 8;
              goto LABEL_6;
            case 2uLL:
              result = ProtobufDecoder.decodeVarint()();
              if (v2)
                return result;
              if ((result & 0x8000000000000000) != 0)
                goto LABEL_66;
              v5 = v3[1] + result;
LABEL_6:
              if (v6 >= v5)
                goto LABEL_7;
              goto LABEL_61;
            case 5uLL:
              v5 = v3[1] + 4;
              goto LABEL_6;
            default:
              goto LABEL_61;
          }
        }
        v12 = result & 7;
        if (v12 != 5)
        {
          if (v12 == 2)
          {
            result = ProtobufDecoder.decodeVarint()();
            if (v2)
              return result;
            if ((result & 0x8000000000000000) != 0)
            {
              __break(1u);
LABEL_64:
              __break(1u);
LABEL_65:
              __break(1u);
LABEL_66:
              __break(1u);
              JUMPOUT(0x234FCA69CLL);
            }
            v13 = (double *)v3[1];
            if (v6 < (unint64_t)v13 + result)
              goto LABEL_61;
            v3[3] = 9;
            v3[4] = (char *)v13 + result;
          }
          else
          {
            if (v12 != 1)
              goto LABEL_61;
            v13 = (double *)v3[1];
          }
          v5 = (unint64_t)(v13 + 1);
          if (v6 < (unint64_t)(v13 + 1))
            goto LABEL_61;
          v9 = *v13;
          goto LABEL_7;
        }
        v18 = (float *)v3[1];
        v5 = (unint64_t)(v18 + 1);
        if (v6 < (unint64_t)(v18 + 1))
          goto LABEL_61;
        v19 = *v18;
        v3[1] = v5;
        v9 = v19;
      }
LABEL_8:
      v6 = v3[2];
      if (v5 >= v6)
        goto LABEL_4;
    }
  }
  v8 = 0.0;
  v9 = 0.0;
LABEL_4:
  v3[3] = 0;
  *a2 = v9;
  a2[1] = v8;
  a2[2] = v7;
  return result;
}

_QWORD *protocol witness for ProtobufEncodableMessage.encode(to:) in conformance FluidSpringAnimation(_QWORD *result)
{
  double *v1;
  double *v2;
  _QWORD *v3;
  double v4;
  double v5;
  double v6;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  int64_t v10;
  uint64_t v11;
  int64_t v12;

  v2 = v1;
  v3 = result;
  v5 = *v2;
  v4 = v2[1];
  v6 = v2[2];
  if (*v2 == 0.0)
  {
    if (v4 == 0.0)
      goto LABEL_3;
    goto LABEL_9;
  }
  ProtobufEncoder.encodeVarint(_:)(9uLL);
  v7 = v3[1];
  v8 = v7 + 8;
  if (__OFADD__(v7, 8))
  {
    __break(1u);
  }
  else if (v3[2] >= v8)
  {
    v3[1] = v8;
    result = (_QWORD *)(*v3 + v7);
    goto LABEL_8;
  }
  result = (_QWORD *)ProtobufEncoder.growBufferSlow(to:)(v8);
LABEL_8:
  *(double *)result = v5;
  if (v4 == 0.0)
  {
LABEL_3:
    if (v6 == 0.0)
      return result;
    goto LABEL_13;
  }
LABEL_9:
  ProtobufEncoder.encodeVarint(_:)(0x11uLL);
  v9 = v3[1];
  v10 = v9 + 8;
  if (__OFADD__(v9, 8))
  {
    __break(1u);
  }
  else if (v3[2] >= v10)
  {
    v3[1] = v10;
    result = (_QWORD *)(*v3 + v9);
    goto LABEL_12;
  }
  result = (_QWORD *)ProtobufEncoder.growBufferSlow(to:)(v10);
LABEL_12:
  *(double *)result = v4;
  if (v6 == 0.0)
    return result;
LABEL_13:
  ProtobufEncoder.encodeVarint(_:)(0x19uLL);
  v11 = v3[1];
  v12 = v11 + 8;
  if (__OFADD__(v11, 8))
  {
    __break(1u);
    goto LABEL_23;
  }
  if (v3[2] < v12)
  {
LABEL_23:
    result = (_QWORD *)ProtobufEncoder.growBufferSlow(to:)(v12);
    goto LABEL_16;
  }
  v3[1] = v12;
  result = (_QWORD *)(*v3 + v11);
LABEL_16:
  *(double *)result = v6;
  return result;
}

unint64_t protocol witness for ProtobufDecodableMessage.init(from:) in conformance FluidSpringAnimation@<X0>(unint64_t a1@<X0>, double *a2@<X8>)
{
  return FluidSpringAnimation.init(from:)(a1, a2);
}

uint64_t protocol witness for static EncodableAnimation.leafProtobufTag.getter in conformance FluidSpringAnimation()
{
  return 3;
}

uint64_t specialized AnimationContext.springState.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = type metadata accessor for SpringState(0, v5, v6, a4);
  v9 = type metadata accessor for AnimationState(0, v5, v6, v8);
  MEMORY[0x23B7C9C04](&protocol conformance descriptor for SpringState<A>, v7);
  return specialized AnimationState.subscript.setter(a1, v7, v9, v7);
}

void type metadata accessor for InternalAnimationBox<FluidSpringAnimation>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void), uint64_t (*a4)(uint64_t, ValueMetadata *, uint64_t))
{
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;

  if (!*a2)
  {
    v7 = a3();
    v8 = a4(a1, &type metadata for FluidSpringAnimation, v7);
    if (!v9)
      atomic_store(v8, a2);
  }
}

unint64_t instantiation function for generic protocol witness table for FluidSpringAnimation(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type FluidSpringAnimation and conformance FluidSpringAnimation();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table accessor for type FluidSpringAnimation and conformance FluidSpringAnimation();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

ValueMetadata *type metadata accessor for FluidSpringAnimation()
{
  return &type metadata for FluidSpringAnimation;
}

uint64_t type metadata completion function for SpringState()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for SpringState(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t *, uint64_t *, uint64_t);
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;

  v4 = a1;
  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  v8 = *(_DWORD *)(v6 + 80);
  v9 = v7 + v8;
  v10 = v7 + 7;
  v11 = ((((((((v7 + 7 + ((v7 + v8 + ((v7 + v8) & ~v8)) & ~v8)) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
          + 15) & 0xFFFFFFFFFFFFFFF8)
        + 15) & 0xFFFFFFFFFFFFFFF8)
      + 8;
  if (v8 > 7 || (*(_DWORD *)(v6 + 80) & 0x100000) != 0 || v11 > 0x18)
  {
    v14 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v14 + ((v8 & 0xF8 ^ 0x1F8) & (v8 + 16)));
    swift_retain();
  }
  else
  {
    v15 = ~v8;
    v16 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v6 + 16);
    v16(a1, a2, *(_QWORD *)(a3 + 16));
    v17 = ((unint64_t)a2 + v9) & v15;
    v16((uint64_t *)(((unint64_t)v4 + v9) & v15), (uint64_t *)v17, v5);
    v18 = (v9 + v17) & v15;
    v16((uint64_t *)((v9 + (((unint64_t)v4 + v9) & v15)) & v15), (uint64_t *)v18, v5);
    v19 = (_QWORD *)((v10 + ((v9 + (((unint64_t)v4 + v9) & v15)) & v15)) & 0xFFFFFFFFFFFFF8);
    v20 = (_QWORD *)((v10 + v18) & 0xFFFFFFFFFFFFF8);
    *v19 = *v20;
    v21 = (_QWORD *)(((unint64_t)v19 + 15) & 0xFFFFFFFFFFFFF8);
    v22 = (_QWORD *)(((unint64_t)v20 + 15) & 0xFFFFFFFFFFFFF8);
    *v21 = *v22;
    v23 = (_QWORD *)(((unint64_t)v21 + 15) & 0xFFFFFFFFFFFFF8);
    v24 = (_QWORD *)(((unint64_t)v22 + 15) & 0xFFFFFFFFFFFFF8);
    *v23 = *v24;
    *(_QWORD *)(((unint64_t)v23 + 15) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v24 + 15) & 0xFFFFFFFFFFFFF8);
  }
  return v4;
}

uint64_t destroy for SpringState(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v10)(uint64_t, uint64_t);

  v3 = *(_QWORD *)(a2 + 16);
  v4 = *(_QWORD *)(v3 - 8);
  v10 = *(void (**)(uint64_t, uint64_t))(v4 + 8);
  v10(a1, v3);
  v5 = *(_QWORD *)(v4 + 64);
  v6 = *(unsigned __int8 *)(v4 + 80);
  v7 = v5 + v6;
  v8 = (v5 + v6 + a1) & ~v6;
  v10(v8, v3);
  return ((uint64_t (*)(uint64_t, uint64_t))v10)((v7 + v8) & ~v6, v3);
}

uint64_t initializeWithCopy for SpringState(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16);
  v7(a1, a2, v5);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = *(unsigned __int8 *)(v6 + 80);
  v10 = (v8 + v9 + a2) & ~v9;
  v7((v8 + v9 + a1) & ~v9, v10, v5);
  v11 = (v8 + v9 + v10) & ~v9;
  v7((v8 + v9 + ((v8 + v9 + a1) & ~v9)) & ~v9, v11, v5);
  v12 = (_QWORD *)((v8 + 7 + ((v8 + v9 + ((v8 + v9 + a1) & ~v9)) & ~v9)) & 0xFFFFFFFFFFFFF8);
  v13 = (_QWORD *)((v8 + 7 + v11) & 0xFFFFFFFFFFFFF8);
  *v12 = *v13;
  v14 = (_QWORD *)(((unint64_t)v12 + 15) & 0xFFFFFFFFFFFFF8);
  v15 = (_QWORD *)(((unint64_t)v13 + 15) & 0xFFFFFFFFFFFFF8);
  *v14 = *v15;
  v16 = (_QWORD *)(((unint64_t)v14 + 15) & 0xFFFFFFFFFFFFF8);
  v17 = (_QWORD *)(((unint64_t)v15 + 15) & 0xFFFFFFFFFFFFF8);
  *v16 = *v17;
  *(_QWORD *)(((unint64_t)v16 + 15) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v17 + 15) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t assignWithCopy for SpringState(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 24);
  v7(a1, a2, v5);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = *(unsigned __int8 *)(v6 + 80);
  v10 = (v8 + v9 + a2) & ~v9;
  v7((v8 + v9 + a1) & ~v9, v10, v5);
  v11 = (v8 + v9 + v10) & ~v9;
  v7((v8 + v9 + ((v8 + v9 + a1) & ~v9)) & ~v9, v11, v5);
  v12 = (_QWORD *)((v8 + 7 + ((v8 + v9 + ((v8 + v9 + a1) & ~v9)) & ~v9)) & 0xFFFFFFFFFFFFF8);
  v13 = (_QWORD *)((v8 + 7 + v11) & 0xFFFFFFFFFFFFF8);
  *v12 = *v13;
  v14 = (_QWORD *)(((unint64_t)v12 + 15) & 0xFFFFFFFFFFFFF8);
  v15 = (_QWORD *)(((unint64_t)v13 + 15) & 0xFFFFFFFFFFFFF8);
  *v14 = *v15;
  v16 = (_QWORD *)(((unint64_t)v14 + 15) & 0xFFFFFFFFFFFFF8);
  v17 = (_QWORD *)(((unint64_t)v15 + 15) & 0xFFFFFFFFFFFFF8);
  *v16 = *v17;
  *(_QWORD *)(((unint64_t)v16 + 15) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v17 + 15) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t initializeWithTake for SpringState(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 32);
  v7(a1, a2, v5);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = *(unsigned __int8 *)(v6 + 80);
  v10 = (v8 + v9 + a2) & ~v9;
  v7((v8 + v9 + a1) & ~v9, v10, v5);
  v11 = (v8 + v9 + v10) & ~v9;
  v7((v8 + v9 + ((v8 + v9 + a1) & ~v9)) & ~v9, v11, v5);
  v12 = (_QWORD *)((v8 + 7 + ((v8 + v9 + ((v8 + v9 + a1) & ~v9)) & ~v9)) & 0xFFFFFFFFFFFFF8);
  v13 = (_QWORD *)((v8 + 7 + v11) & 0xFFFFFFFFFFFFF8);
  *v12 = *v13;
  v14 = (_QWORD *)(((unint64_t)v12 + 15) & 0xFFFFFFFFFFFFF8);
  v15 = (_QWORD *)(((unint64_t)v13 + 15) & 0xFFFFFFFFFFFFF8);
  *v14 = *v15;
  v16 = (_QWORD *)(((unint64_t)v14 + 15) & 0xFFFFFFFFFFFFF8);
  v17 = (_QWORD *)(((unint64_t)v15 + 15) & 0xFFFFFFFFFFFFF8);
  *v16 = *v17;
  *(_QWORD *)(((unint64_t)v16 + 15) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v17 + 15) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t assignWithTake for SpringState(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 40);
  v7(a1, a2, v5);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = *(unsigned __int8 *)(v6 + 80);
  v10 = (v8 + v9 + a2) & ~v9;
  v7((v8 + v9 + a1) & ~v9, v10, v5);
  v11 = (v8 + v9 + v10) & ~v9;
  v7((v8 + v9 + ((v8 + v9 + a1) & ~v9)) & ~v9, v11, v5);
  v12 = (_QWORD *)((v8 + 7 + ((v8 + v9 + ((v8 + v9 + a1) & ~v9)) & ~v9)) & 0xFFFFFFFFFFFFF8);
  v13 = (_QWORD *)((v8 + 7 + v11) & 0xFFFFFFFFFFFFF8);
  *v12 = *v13;
  v14 = (_QWORD *)(((unint64_t)v12 + 15) & 0xFFFFFFFFFFFFF8);
  v15 = (_QWORD *)(((unint64_t)v13 + 15) & 0xFFFFFFFFFFFFF8);
  *v14 = *v15;
  v16 = (_QWORD *)(((unint64_t)v14 + 15) & 0xFFFFFFFFFFFFF8);
  v17 = (_QWORD *)(((unint64_t)v15 + 15) & 0xFFFFFFFFFFFFF8);
  *v16 = *v17;
  *(_QWORD *)(((unint64_t)v16 + 15) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v17 + 15) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t getEnumTagSinglePayload for SpringState(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 >= a2)
  {
    if (v5)
      return (*(uint64_t (**)(void))(v4 + 48))();
    return 0;
  }
  if (((((((((((*(_QWORD *)(v4 + 64)
               + ((*(_QWORD *)(v4 + 64)
                 + *(unsigned __int8 *)(v4 + 80)
                 + ((*(_QWORD *)(v4 + 64) + *(unsigned __int8 *)(v4 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80))) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80))
               + 7) & 0xFFFFFFFFFFFFFFF8)
             + 15) & 0xFFFFFFFFFFFFFFF8)
           + 15) & 0xFFFFFFFFFFFFFFF8)
         + 15) & 0xFFFFFFFFFFFFFFF8)
       + 8) & 0xFFFFFFF8) != 0)
    v6 = 2;
  else
    v6 = a2 - v5 + 1;
  if (v6 >= 0x10000)
    v7 = 4;
  else
    v7 = 2;
  if (v6 < 0x100)
    v7 = 1;
  if (v6 >= 2)
    v8 = v7;
  else
    v8 = 0;
  return ((uint64_t (*)(void))((char *)&loc_234FCB098 + 4 * byte_2352BCDD0[v8]))();
}

void storeEnumTagSinglePayload for SpringState(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  int v11;
  unsigned int v12;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  if (v7 >= a3)
  {
    v11 = 0;
    if (a2 <= v7)
      goto LABEL_14;
  }
  else
  {
    v8 = a3 - v7;
    if (((((((((*(_DWORD *)(v6 + 64)
               + ((*(_DWORD *)(v6 + 64)
                 + *(unsigned __int8 *)(v6 + 80)
                 + ((*(_DWORD *)(v6 + 64) + *(unsigned __int8 *)(v6 + 80)) & ~*(unsigned __int8 *)(v6 + 80))) & ~*(unsigned __int8 *)(v6 + 80))
               + 7) & 0xFFFFFFF8)
             + 15) & 0xFFFFFFF8)
           + 15) & 0xFFFFFFF8)
         + 15) & 0xFFFFFFF8) == 0xFFFFFFF8)
      v9 = v8 + 1;
    else
      v9 = 2;
    if (v9 >= 0x10000)
      v10 = 4;
    else
      v10 = 2;
    if (v9 < 0x100)
      v10 = 1;
    if (v9 >= 2)
      v11 = v10;
    else
      v11 = 0;
    if (a2 <= v7)
LABEL_14:
      __asm { BR              X11 }
  }
  if (((((((((*(_DWORD *)(v6 + 64)
             + ((*(_DWORD *)(v6 + 64)
               + *(unsigned __int8 *)(v6 + 80)
               + ((*(_DWORD *)(v6 + 64) + *(unsigned __int8 *)(v6 + 80)) & ~*(unsigned __int8 *)(v6 + 80))) & ~*(unsigned __int8 *)(v6 + 80))
             + 7) & 0xFFFFFFF8)
           + 15) & 0xFFFFFFF8)
         + 15) & 0xFFFFFFF8)
       + 15) & 0xFFFFFFF8) != 0xFFFFFFF8)
  {
    v12 = ~v7 + a2;
    bzero(a1, ((((((((*(_QWORD *)(v6 + 64)+ ((*(_QWORD *)(v6 + 64)+ *(unsigned __int8 *)(v6 + 80)+ ((*(_QWORD *)(v6 + 64) + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))+ 7) & 0xFFFFFFFFFFFFFFF8)+ 15) & 0xFFFFFFFFFFFFFFF8)+ 15) & 0xFFFFFFFFFFFFFFF8)+ 15) & 0xFFFFFFFFFFFFFFF8)+ 8);
    *a1 = v12;
  }
  __asm { BR              X10 }
}

void sub_234FCB208()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
}

void sub_234FCB210(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x234FCB218);
}

void sub_234FCB234()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
}

void sub_234FCB23C()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
}

uint64_t sub_234FCB244(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_WORD *)(v4 + v5) = 0;
  if (!a2)
    JUMPOUT(0x234FCB24CLL);
  return (*(uint64_t (**)(uint64_t))(v3 + 56))(v4);
}

void type metadata accessor for SpringState<Double>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  uint64_t v5;

  if (!lazy cache variable for type metadata for SpringState<Double>)
  {
    v4 = type metadata accessor for SpringState(0, MEMORY[0x24BEE13C8], (uint64_t)&protocol witness table for Double, a4);
    if (!v5)
      atomic_store(v4, (unint64_t *)&lazy cache variable for type metadata for SpringState<Double>);
  }
}

uint64_t sub_234FCB2C0()
{
  return swift_deallocObject();
}

void type metadata accessor for SpringState<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  if (!lazy cache variable for type metadata for SpringState<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>>)
  {
    v2 = type metadata accessor for AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>();
    v3 = _s7SwiftUI14AnimatablePairVyS2dGACyxq_GAA16VectorArithmeticAAWlTm_0(&lazy protocol witness table cache variable for type AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>> and conformance AnimatablePair<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>);
    v5 = type metadata accessor for SpringState(a1, v2, v3, v4);
    if (!v6)
      atomic_store(v5, (unint64_t *)&lazy cache variable for type metadata for SpringState<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>>);
  }
}

uint64_t sub_234FCB340()
{
  return swift_deallocObject();
}

double Text.Effect.Metrics.offsetForCenterAlignment(other:t:)(double a1, double a2, double a3, double a4, double a5, double a6, double a7)
{
  double v7;
  double v8;
  BOOL v9;
  double v10;
  double v11;

  v7 = a1 * a5 + (1.0 - a5) * a6;
  v8 = v7 + a2 * a5 + (1.0 - a5) * a7 - (a6 + a7);
  v9 = v8 <= 0.0;
  v10 = v7 + fabs(v8) * 0.5;
  v11 = v8 * 0.5 + a6;
  if (v9)
  {
    v11 = a6;
    v7 = v10;
  }
  return v7 - v11;
}

uint64_t specialized static Text.Effect.Base<>.animatorPhase(from:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5;

  if (a1 == 6710895 && a2 == 0xE300000000000000)
    return 0;
  v5 = 0;
  if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
  {
    v5 = 1;
    if (a1 != 28271 || a2 != 0xE200000000000000)
    {
      if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        return 1;
      else
        return 2;
    }
  }
  return v5;
}

uint64_t protocol witness for static Text.Effect.Base.animatorPhase(from:) in conformance SmallTextEffect()
{
  return 0x746C7561666564;
}

uint64_t protocol witness for Text.Effect.DurationProvider.animationInterval(for:) in conformance GlimmerTextEffect.Timing()
{
  return 0;
}

_BYTE *protocol witness for static Text.Effect.Base.animatorPhase(after:) in conformance GlimmerTextEffect@<X0>(_BYTE *result@<X0>, BOOL *a2@<X8>)
{
  *a2 = (*result & 1) == 0;
  return result;
}

uint64_t protocol witness for static Text.Effect.Base.animatorPhase(from:) in conformance GlimmerTextEffect@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = specialized static Text.Effect.Base<>.animatorPhase(from:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for static Text.Effect.Base.animatorPhase(from:) in conformance GlimmerTextEffect(_BYTE *a1)
{
  if (*a1)
    return 28271;
  else
    return 6710895;
}

void protocol witness for Text.Effect.Base.timing(for:from:to:duration:) in conformance GradientForegroundTextEffect(uint64_t a1@<X5>, char a2@<W6>, uint64_t a3@<X8>)
{
  *(_QWORD *)a3 = a1;
  *(_BYTE *)(a3 + 8) = a2 & 1;
}

double protocol witness for static Text.Effect.Base.delay(for:duration:) in conformance BigTextEffect(double a1)
{
  return a1 * 0.85;
}

uint64_t protocol witness for LosslessStringConvertible.init(_:) in conformance Text.Effect.DefaultAnimatorPhase@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v5;
  uint64_t result;
  char v7;

  if (a1 == 0x746C7561666564 && a2 == 0xE700000000000000)
  {
    result = swift_bridgeObjectRelease();
    v7 = 0;
  }
  else
  {
    v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    result = swift_bridgeObjectRelease();
    v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t protocol witness for LosslessStringConvertible.init(_:) in conformance Text.Effect.OnOffAnimatorPhase@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = specialized Text.Effect.OnOffAnimatorPhase.init(_:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Text.Effect.OnOffAnimatorPhase()
{
  _BYTE *v0;

  if (*v0)
    return 28271;
  else
    return 6710895;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Text.Effect.Identifier(uint64_t a1, uint64_t a2)
{
  return protocol witness for Hashable.hashValue.getter in conformance Text.Effect.Identifier(a1, a2, (void (*)(uint64_t))MEMORY[0x24BEE4318]);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Text.Effect.Identifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance Text.Effect.Identifier(a1, a2, a3, (void (*)(uint64_t))MEMORY[0x24BEE4318]);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Text.Effect.RelativeIdentifierKey()
{
  Swift::UInt64 *v0;
  Swift::UInt64 v1;
  Swift::UInt v2;

  v1 = *v0;
  v2 = v0[1];
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance Text.Effect.RelativeIdentifierKey()
{
  Swift::UInt64 *v0;
  Swift::UInt v1;

  v1 = v0[1];
  Hasher._combine(_:)(*v0);
  Hasher._combine(_:)(v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Text.Effect.RelativeIdentifierKey()
{
  Swift::UInt64 *v0;
  Swift::UInt64 v1;
  Swift::UInt v2;

  v1 = *v0;
  v2 = v0[1];
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

_QWORD *protocol witness for static Equatable.== infix(_:_:) in conformance Text.Effect.RelativeIdentifierKey(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;

  if (*result != *a2)
    return 0;
  v2 = a2[1];
  v3 = result[1];
  if (!__OFSUB__(v2, v3))
    return (_QWORD *)(v2 == v3);
  __break(1u);
  return result;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Text.Effect.Phase.Storage()
{
  unsigned __int8 *v0;
  int v1;
  Swift::UInt v2;

  v1 = *v0;
  Hasher.init(_seed:)();
  if (v1 == 2)
  {
    v2 = 1;
  }
  else
  {
    if (v1 != 3)
    {
      Hasher._combine(_:)(0);
      Hasher._combine(_:)(v1 & 1);
      return Hasher._finalize()();
    }
    v2 = 2;
  }
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance Text.Effect.Phase.Storage()
{
  unsigned __int8 *v0;
  int v1;
  Swift::UInt v2;
  Swift::UInt8 v3;

  v1 = *v0;
  if (v1 == 2)
  {
    v2 = 1;
    goto LABEL_5;
  }
  if (v1 == 3)
  {
    v2 = 2;
LABEL_5:
    Hasher._combine(_:)(v2);
    return;
  }
  v3 = v1 & 1;
  Hasher._combine(_:)(0);
  Hasher._combine(_:)(v3);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Text.Effect.Phase.Storage()
{
  unsigned __int8 *v0;
  int v1;
  Swift::UInt v2;

  v1 = *v0;
  Hasher.init(_seed:)();
  if (v1 == 2)
  {
    v2 = 1;
  }
  else
  {
    if (v1 != 3)
    {
      Hasher._combine(_:)(0);
      Hasher._combine(_:)(v1 & 1);
      return Hasher._finalize()();
    }
    v2 = 2;
  }
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance Text.Effect.Phase.Storage(unsigned __int8 *a1, unsigned __int8 *a2)
{
  int v2;
  int v3;
  BOOL v4;
  BOOL v5;
  int v6;
  char v7;

  v2 = *a1;
  v3 = *a2;
  v4 = v3 == 2;
  v5 = v3 == 3;
  v6 = v3 & 0xFE;
  v7 = ((v2 & 1) == 0) ^ v3;
  if (v6 == 2)
    v7 = 0;
  if (v2 == 3)
    v7 = v5;
  if (v2 == 2)
    return v4;
  else
    return v7;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance Text.Effect.Phase(unsigned __int8 *a1, unsigned __int8 *a2)
{
  int v2;
  int v3;

  v2 = *a1;
  v3 = *a2;
  if (v2 == 2)
    return v3 == 2;
  if (v2 != 3)
    return (v3 & 0xFE) != 2 && ((((v2 & 1) == 0) ^ v3) & 1) != 0;
  return v3 == 3;
}

Swift::Void __swiftcall Text.Effect.DrawingState.scale(by:)(Swift::Double by)
{
  float64x2_t *v1;
  float64x2_t v2;
  float64x2_t v3;

  v2 = vmulq_n_f64(v1[1], by);
  *v1 = vmulq_n_f64(*v1, by);
  v1[1] = v2;
  v3 = vmulq_n_f64(v1[3], by);
  v1[2] = vmulq_n_f64(v1[2], by);
  v1[3] = v3;
  v1[4].f64[0] = v1[4].f64[0] * by;
}

double protocol witness for VectorArithmetic.magnitudeSquared.getter in conformance Text.Effect.DrawingState()
{
  double *v0;

  return *v0 * *v0
       + v0[1] * v0[1]
       + v0[2] * v0[2]
       + v0[3] * v0[3]
       + v0[4] * v0[4]
       + v0[5] * v0[5]
       + v0[6] * v0[6]
       + v0[7] * v0[7]
       + v0[8] * v0[8];
}

double protocol witness for static AdditiveArithmetic.zero.getter in conformance Text.Effect.DrawingState@<D0>(uint64_t a1@<X8>)
{
  double result;
  char v3;
  __int128 v4;
  __int128 v5;

  if (one-time initialization token for zero != -1)
    swift_once();
  result = *(double *)&qword_25622D2A0;
  v3 = byte_25622D2A8;
  v4 = *(_OWORD *)algn_25622D270;
  *(_OWORD *)a1 = static Text.Effect.DrawingState.zero;
  *(_OWORD *)(a1 + 16) = v4;
  v5 = unk_25622D290;
  *(_OWORD *)(a1 + 32) = xmmword_25622D280;
  *(_OWORD *)(a1 + 48) = v5;
  *(double *)(a1 + 64) = result;
  *(_BYTE *)(a1 + 72) = v3;
  return result;
}

double protocol witness for static AdditiveArithmetic.+ infix(_:_:) in conformance Text.Effect.DrawingState@<D0>(uint64_t a1@<X0>, float64x2_t *a2@<X1>, uint64_t a3@<X8>)
{
  double result;
  float64x2_t v4;
  float64x2_t v5;
  char v6;

  result = *(double *)(a1 + 64) + a2[4].f64[0];
  v4 = vaddq_f64(*(float64x2_t *)(a1 + 16), a2[1]);
  *(float64x2_t *)a3 = vaddq_f64(*(float64x2_t *)a1, *a2);
  *(float64x2_t *)(a3 + 16) = v4;
  v5 = vaddq_f64(*(float64x2_t *)(a1 + 48), a2[3]);
  v6 = *(_BYTE *)(a1 + 72);
  *(float64x2_t *)(a3 + 32) = vaddq_f64(*(float64x2_t *)(a1 + 32), a2[2]);
  *(float64x2_t *)(a3 + 48) = v5;
  *(double *)(a3 + 64) = result;
  *(_BYTE *)(a3 + 72) = v6;
  return result;
}

float64_t protocol witness for static AdditiveArithmetic.+= infix(_:_:) in conformance Text.Effect.DrawingState(float64x2_t *a1, uint64_t a2)
{
  __int128 v2;
  float64x2_t v3;
  float64x2_t v5[3];
  _OWORD v6[2];

  v2 = *(_OWORD *)(a2 + 48);
  v5[2] = *(float64x2_t *)(a2 + 32);
  v6[0] = v2;
  *(_OWORD *)((char *)v6 + 9) = *(_OWORD *)(a2 + 57);
  v3 = *(float64x2_t *)(a2 + 16);
  v5[0] = *(float64x2_t *)a2;
  v5[1] = v3;
  return specialized static Text.Effect.DrawingState.+= infix(_:_:)(a1, v5);
}

double protocol witness for static AdditiveArithmetic.- infix(_:_:) in conformance Text.Effect.DrawingState@<D0>(uint64_t a1@<X0>, float64x2_t *a2@<X1>, uint64_t a3@<X8>)
{
  double result;
  float64x2_t v4;
  float64x2_t v5;
  char v6;

  result = *(double *)(a1 + 64) - a2[4].f64[0];
  v4 = vsubq_f64(*(float64x2_t *)(a1 + 16), a2[1]);
  *(float64x2_t *)a3 = vsubq_f64(*(float64x2_t *)a1, *a2);
  *(float64x2_t *)(a3 + 16) = v4;
  v5 = vsubq_f64(*(float64x2_t *)(a1 + 48), a2[3]);
  v6 = *(_BYTE *)(a1 + 72);
  *(float64x2_t *)(a3 + 32) = vsubq_f64(*(float64x2_t *)(a1 + 32), a2[2]);
  *(float64x2_t *)(a3 + 48) = v5;
  *(double *)(a3 + 64) = result;
  *(_BYTE *)(a3 + 72) = v6;
  return result;
}

float64_t protocol witness for static AdditiveArithmetic.-= infix(_:_:) in conformance Text.Effect.DrawingState(float64x2_t *a1, uint64_t a2)
{
  __int128 v2;
  float64x2_t v3;
  float64x2_t v5[3];
  _OWORD v6[2];

  v2 = *(_OWORD *)(a2 + 48);
  v5[2] = *(float64x2_t *)(a2 + 32);
  v6[0] = v2;
  *(_OWORD *)((char *)v6 + 9) = *(_OWORD *)(a2 + 57);
  v3 = *(float64x2_t *)(a2 + 16);
  v5[0] = *(float64x2_t *)a2;
  v5[1] = v3;
  return specialized static Text.Effect.DrawingState.-= infix(_:_:)(a1, v5);
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance Text.Effect.DrawingState(_OWORD *a1, _OWORD *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  _OWORD v7[3];
  _OWORD v8[2];
  _OWORD v9[3];
  _OWORD v10[2];

  v2 = a1[3];
  v7[2] = a1[2];
  v8[0] = v2;
  *(_OWORD *)((char *)v8 + 9) = *(_OWORD *)((char *)a1 + 57);
  v3 = a1[1];
  v7[0] = *a1;
  v7[1] = v3;
  v4 = a2[3];
  v9[2] = a2[2];
  v10[0] = v4;
  *(_OWORD *)((char *)v10 + 9) = *(_OWORD *)((char *)a2 + 57);
  v5 = a2[1];
  v9[0] = *a2;
  v9[1] = v5;
  return specialized static Text.Effect.DrawingState.== infix(_:_:)((uint64_t)v7, (uint64_t)v9);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Text.Effect.GlyphIndex(uint64_t a1, uint64_t a2)
{
  return protocol witness for Hashable.hashValue.getter in conformance Text.Effect.Identifier(a1, a2, (void (*)(uint64_t))MEMORY[0x24BEE42F8]);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Text.Effect.Identifier(uint64_t a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t *v3;
  uint64_t v5;

  v5 = *v3;
  Hasher.init(_seed:)();
  a3(v5);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Text.Effect.GlyphIndex(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance Text.Effect.Identifier(a1, a2, a3, (void (*)(uint64_t))MEMORY[0x24BEE42F8]);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Text.Effect.Identifier(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t))
{
  uint64_t *v4;
  uint64_t v6;

  v6 = *v4;
  Hasher.init(_seed:)();
  a4(v6);
  return Hasher._finalize()();
}

float64x2_t Text.Effect.CubicStates.applying(weights:)@<Q0>(uint64_t a1@<X8>, double a2@<D0>, double a3@<D1>, double a4@<D2>, double a5@<D3>)
{
  uint64_t v5;
  double v6;
  float64x2_t v7;
  float64x2_t v8;
  char v9;
  float64x2_t result;

  v6 = *(double *)(v5 + 64) * a2 + *(double *)(v5 + 144) * a3 + *(double *)(v5 + 224) * a4 + *(double *)(v5 + 304) * a5;
  v7 = vaddq_f64(vaddq_f64(vaddq_f64(vmulq_n_f64(*(float64x2_t *)(v5 + 16), a2), vmulq_n_f64(*(float64x2_t *)(v5 + 96), a3)), vmulq_n_f64(*(float64x2_t *)(v5 + 176), a4)), vmulq_n_f64(*(float64x2_t *)(v5 + 256), a5));
  *(float64x2_t *)a1 = vaddq_f64(vaddq_f64(vaddq_f64(vmulq_n_f64(*(float64x2_t *)v5, a2), vmulq_n_f64(*(float64x2_t *)(v5 + 80), a3)), vmulq_n_f64(*(float64x2_t *)(v5 + 160), a4)), vmulq_n_f64(*(float64x2_t *)(v5 + 240), a5));
  *(float64x2_t *)(a1 + 16) = v7;
  v8 = vaddq_f64(vaddq_f64(vaddq_f64(vmulq_n_f64(*(float64x2_t *)(v5 + 32), a2), vmulq_n_f64(*(float64x2_t *)(v5 + 112), a3)), vmulq_n_f64(*(float64x2_t *)(v5 + 192), a4)), vmulq_n_f64(*(float64x2_t *)(v5 + 272), a5));
  v9 = *(_BYTE *)(v5 + 72);
  result = vaddq_f64(vaddq_f64(vaddq_f64(vmulq_n_f64(*(float64x2_t *)(v5 + 48), a2), vmulq_n_f64(*(float64x2_t *)(v5 + 128), a3)), vmulq_n_f64(*(float64x2_t *)(v5 + 208), a4)), vmulq_n_f64(*(float64x2_t *)(v5 + 288), a5));
  *(float64x2_t *)(a1 + 32) = v8;
  *(float64x2_t *)(a1 + 48) = result;
  *(double *)(a1 + 64) = v6;
  *(_BYTE *)(a1 + 72) = v9;
  return result;
}

void Text.Effect.AnyLayoutState.isEqual(to:)()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void Text.Effect.AnyLayoutState.hash(into:)()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void Text.Effect.AnyLayoutState.name.getter()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t type metadata accessor for Text.Effect.AnyLayoutState()
{
  return objc_opt_self();
}

uint64_t type metadata completion function for Text.Effect.ConcreteLayoutState()
{
  uint64_t result;
  unint64_t v1;

  result = swift_getAssociatedTypeWitness();
  if (v1 <= 0x3F)
  {
    result = swift_initClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t Text.Effect.ConcreteLayoutState.__allocating_init(state:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t AssociatedTypeWitness;

  v2 = swift_allocObject();
  v3 = v2 + *(_QWORD *)(*(_QWORD *)v2 + 128);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 32))(v3, a1, AssociatedTypeWitness);
  return v2;
}

uint64_t Text.Effect.ConcreteLayoutState.isEqual(to:)()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t AssociatedTypeWitness;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  void (*v12)(char *, char *, uint64_t);
  char v13;
  void (*v14)(char *, uint64_t);
  uint64_t v16;

  v1 = *v0;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v3 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v5 = (char *)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v16 - v7;
  v9 = swift_dynamicCastClass();
  if (v9)
  {
    v10 = v9;
    v11 = (char *)v0 + *(_QWORD *)(v1 + 128);
    v12 = *(void (**)(char *, char *, uint64_t))(v3 + 16);
    v12(v8, v11, AssociatedTypeWitness);
    v12(v5, (char *)(v10 + *(_QWORD *)(*(_QWORD *)v10 + 128)), AssociatedTypeWitness);
    swift_getAssociatedConformanceWitness();
    v13 = dispatch thunk of static Equatable.== infix(_:_:)();
    v14 = *(void (**)(char *, uint64_t))(v3 + 8);
    v14(v5, AssociatedTypeWitness);
    v14(v8, AssociatedTypeWitness);
  }
  else
  {
    v13 = 0;
  }
  return v13 & 1;
}

uint64_t Text.Effect.ConcreteLayoutState.hash(into:)()
{
  char *v0;
  uint64_t v1;
  uint64_t AssociatedTypeWitness;
  uint64_t v3;
  double v4;
  uint64_t v5;
  char *v6;
  uint64_t v8;

  v1 = *(_QWORD *)v0;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v3 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v4 = MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v6 = (char *)&v8 - v5;
  (*(void (**)(char *, char *, uint64_t, double))(v3 + 16))((char *)&v8 - v5, &v0[*(_QWORD *)(v1 + 128)], AssociatedTypeWitness, v4);
  swift_getAssociatedConformanceWitness();
  dispatch thunk of Hashable.hash(into:)();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v6, AssociatedTypeWitness);
}

uint64_t Text.Effect.ConcreteLayoutState.name.getter()
{
  char *v0;
  uint64_t v1;
  uint64_t AssociatedTypeWitness;
  uint64_t v3;
  double v4;
  uint64_t v5;
  char *v6;
  _QWORD v8[2];

  v1 = *(_QWORD *)v0;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v3 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v4 = MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v6 = (char *)v8 - v5;
  v8[0] = 0;
  v8[1] = 0xE000000000000000;
  (*(void (**)(char *, char *, uint64_t, double))(v3 + 16))((char *)v8 - v5, &v0[*(_QWORD *)(v1 + 128)], AssociatedTypeWitness, v4);
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v6, AssociatedTypeWitness);
  return v8[0];
}

uint64_t Text.Effect.ConcreteLayoutState.__ivar_destroyer()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t AssociatedTypeWitness;

  v1 = v0 + *(_QWORD *)(*(_QWORD *)v0 + 128);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 8))(v1, AssociatedTypeWitness);
}

uint64_t Text.Effect.ConcreteLayoutState.__deallocating_deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t AssociatedTypeWitness;

  v1 = v0 + *(_QWORD *)(*(_QWORD *)v0 + 128);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 8))(v1, AssociatedTypeWitness);
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for Text.Effect.ConcreteLayoutState(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Text.Effect.ConcreteLayoutState);
}

Swift::Void __swiftcall Text.Effect.AnyAnimationInfo.clearCaches()()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

Swift::Void __swiftcall Text.Effect.AnyAnimationInfo.clearFrameCache()()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void Text.Effect.AnyAnimationInfo.isSettled.getter()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t type metadata accessor for Text.Effect.AnyAnimationInfo()
{
  return objc_opt_self();
}

void Text.Effect.AnyPhase.description.getter()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void Text.Effect.AnyPhase.isEqual(to:)()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void Text.Effect.AnyPhase.hash(into:)()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void Text.Effect.AnyPhase.isDefaultPhase.getter()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void Text.Effect.AnyPhase.nextPhase.getter()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void Text.Effect.AnyPhase.requireAdvancedDrawing.getter()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t type metadata accessor for Text.Effect.AnyPhase()
{
  return objc_opt_self();
}

uint64_t type metadata completion function for Text.Effect.ConcretePhase()
{
  uint64_t result;
  unint64_t v1;

  result = swift_getAssociatedTypeWitness();
  if (v1 <= 0x3F)
  {
    result = swift_initClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Text.Effect.AnyPhase()
{
  uint64_t *v0;
  uint64_t v1;
  _BYTE v3[72];

  v1 = *v0;
  Hasher.init(_seed:)();
  (*(void (**)(_BYTE *))(*(_QWORD *)v1 + 96))(v3);
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance Text.Effect.AnyPhase()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 96))();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Text.Effect.AnyPhase()
{
  uint64_t v0;
  _BYTE v2[72];

  Hasher.init(_seed:)();
  (*(void (**)(_BYTE *))(**(_QWORD **)v0 + 96))(v2);
  return Hasher._finalize()();
}

uint64_t Text.Effect.ConcretePhase.__allocating_init(_:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t AssociatedTypeWitness;

  v2 = swift_allocObject();
  v3 = v2 + *(_QWORD *)(*(_QWORD *)v2 + 160);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 32))(v3, a1, AssociatedTypeWitness);
  return v2;
}

uint64_t Text.Effect.ConcretePhase.isEqual(to:)()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t AssociatedTypeWitness;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  void (*v12)(char *, char *, uint64_t);
  char v13;
  void (*v14)(char *, uint64_t);
  uint64_t v16;

  v1 = *v0;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v3 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v5 = (char *)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v16 - v7;
  v9 = swift_dynamicCastClass();
  if (v9)
  {
    v10 = v9;
    v11 = (char *)v0 + *(_QWORD *)(v1 + 160);
    v12 = *(void (**)(char *, char *, uint64_t))(v3 + 16);
    v12(v8, v11, AssociatedTypeWitness);
    v12(v5, (char *)(v10 + *(_QWORD *)(*(_QWORD *)v10 + 160)), AssociatedTypeWitness);
    swift_getAssociatedConformanceWitness();
    v13 = dispatch thunk of static Equatable.== infix(_:_:)();
    v14 = *(void (**)(char *, uint64_t))(v3 + 8);
    v14(v5, AssociatedTypeWitness);
    v14(v8, AssociatedTypeWitness);
  }
  else
  {
    v13 = 0;
  }
  return v13 & 1;
}

uint64_t Text.Effect.ConcretePhase.hash(into:)()
{
  char *v0;
  uint64_t v1;
  uint64_t AssociatedTypeWitness;
  uint64_t v3;
  double v4;
  uint64_t v5;
  char *v6;
  uint64_t v8;

  v1 = *(_QWORD *)v0;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v3 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v4 = MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v6 = (char *)&v8 - v5;
  (*(void (**)(char *, char *, uint64_t, double))(v3 + 16))((char *)&v8 - v5, &v0[*(_QWORD *)(v1 + 160)], AssociatedTypeWitness, v4);
  swift_getAssociatedConformanceWitness();
  dispatch thunk of Hashable.hash(into:)();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v6, AssociatedTypeWitness);
}

uint64_t Text.Effect.ConcretePhase.description.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)v0 + 152) + 96))(v0 + *(_QWORD *)(*(_QWORD *)v0 + 160));
}

uint64_t Text.Effect.ConcretePhase.isDefaultPhase.getter()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  char *v11;
  char v12;
  void (*v13)(char *, uint64_t);
  uint64_t v15;

  v1 = *v0;
  v3 = *(_QWORD *)(*v0 + 144);
  v2 = *(_QWORD *)(*v0 + 152);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v15 - v10;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v5 + 16))((char *)&v15 - v10, (uint64_t)v0 + *(_QWORD *)(v1 + 160), AssociatedTypeWitness, v9);
  (*(void (**)(uint64_t, uint64_t))(v2 + 72))(v3, v2);
  swift_getAssociatedConformanceWitness();
  v12 = dispatch thunk of static Equatable.== infix(_:_:)();
  v13 = *(void (**)(char *, uint64_t))(v5 + 8);
  v13(v7, AssociatedTypeWitness);
  v13(v11, AssociatedTypeWitness);
  return v12 & 1;
}

uint64_t Text.Effect.ConcretePhase.nextPhase.getter()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  char *v11;
  uint64_t v13;

  v1 = *v0;
  v3 = *(_QWORD *)(*v0 + 144);
  v2 = *(_QWORD *)(*v0 + 152);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v13 - v10;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v5 + 16))(v7, (uint64_t)v0 + *(_QWORD *)(v1 + 160), AssociatedTypeWitness, v9);
  (*(void (**)(char *, uint64_t, uint64_t))(v2 + 80))(v7, v3, v2);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, AssociatedTypeWitness);
  return Text.Effect.ConcretePhase.__allocating_init(_:)((uint64_t)v11);
}

uint64_t Text.Effect.ConcretePhase.requireAdvancedDrawing.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)v0 + 152) + 104))(v0 + *(_QWORD *)(*(_QWORD *)v0 + 160)) & 1;
}

uint64_t Text.Effect.ConcretePhase.__ivar_destroyer()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t AssociatedTypeWitness;

  v1 = v0 + *(_QWORD *)(*(_QWORD *)v0 + 160);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 8))(v1, AssociatedTypeWitness);
}

uint64_t Text.Effect.ConcretePhase.__deallocating_deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t AssociatedTypeWitness;

  v1 = v0 + *(_QWORD *)(*(_QWORD *)v0 + 160);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 8))(v1, AssociatedTypeWitness);
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for Text.Effect.ConcretePhase(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Text.Effect.ConcretePhase);
}

uint64_t type metadata accessor for Text.Effect.AnyConfiguration()
{
  return objc_opt_self();
}

uint64_t type metadata completion function for Text.Effect.ConcreteConfiguration()
{
  uint64_t result;
  unint64_t v1;

  result = swift_getAssociatedTypeWitness();
  if (v1 <= 0x3F)
  {
    result = swift_initClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t Text.Effect.ConcreteConfiguration.__allocating_init(_:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t AssociatedTypeWitness;

  v2 = swift_allocObject();
  v3 = v2 + *(_QWORD *)(*(_QWORD *)v2 + 112);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 32))(v3, a1, AssociatedTypeWitness);
  return v2;
}

uint64_t Text.Effect.ConcreteConfiguration.__ivar_destroyer()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t AssociatedTypeWitness;

  v1 = v0 + *(_QWORD *)(*(_QWORD *)v0 + 112);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 8))(v1, AssociatedTypeWitness);
}

uint64_t Text.Effect.ConcreteConfiguration.__deallocating_deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t AssociatedTypeWitness;

  v1 = v0 + *(_QWORD *)(*(_QWORD *)v0 + 112);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 8))(v1, AssociatedTypeWitness);
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for Text.Effect.ConcreteConfiguration(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Text.Effect.ConcreteConfiguration);
}

void AnyTextAnimation.name.getter()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void AnyTextAnimation.duration(from:to:variant:context:)()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void AnyTextAnimation.phase(from:)()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void AnyTextAnimation.defaultAnimatorPhase.getter()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void AnyTextAnimation.configuration(from:)()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void AnyTextAnimation.states.getter()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void AnyTextAnimation.lineBreakingState.getter()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void AnyTextAnimation.defaultDrawingState.getter()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void AnyTextAnimation.updateInfo(_:context:)()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void AnyTextAnimation.delay(for:duration:)()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void AnyTextAnimation.saveSnapshot(animationController:)()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void AnyTextAnimation.restoreSnapshot(_:context:)()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void AnyTextAnimation.needsUpdate(_:at:context:)()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

id AnyTextAnimation.__deallocating_deinit()
{
  return CoreGlue.__deallocating_deinit(type metadata accessor for AnyTextAnimation);
}

uint64_t type metadata accessor for AnyTextAnimation()
{
  return objc_opt_self();
}

void protocol witness for Identifiable.id.getter in conformance AnyTextAnimation(_QWORD *a1@<X8>)
{
  _QWORD *v1;

  *a1 = *(_QWORD *)(*v1 + OBJC_IVAR____TtC7SwiftUI16AnyTextAnimation_id);
}

void AnyTextEffect.resolve(_:ranges:in:)()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void AnyTextEffect.lineBreakingMetrics(_:ranges:context:)()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void AnyTextEffect.metrics(_:ranges:at:context:)()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void AnyTextEffect.widthDifference(_:ranges:at:context:)()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void AnyTextEffect.appendInteractionMetrics(for:to:at:context:)()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

Swift::Double_optional __swiftcall AnyTextEffect.staticUnitProgress()()
{
  char v0;
  double v1;
  Swift::Double_optional result;

  v0 = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  result.value = v1;
  result.is_nil = v0;
  return result;
}

void AnyTextEffect.clipDrawingBounds.getter()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

id AnyTextEffect.__deallocating_deinit()
{
  return CoreGlue.__deallocating_deinit(type metadata accessor for AnyTextEffect);
}

uint64_t type metadata accessor for AnyTextEffect()
{
  return objc_opt_self();
}

uint64_t destroy for Text.Effect.State()
{
  swift_release();
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t initializeWithCopy for Text.Effect.State(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  v3 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v3;
  v4 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = v4;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for Text.Effect.State(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = v4;
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for Text.Effect.State(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  swift_release();
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  swift_release();
  swift_release();
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for Text.Effect.State(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 96))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 64);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for Text.Effect.State(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 88) = 0;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 96) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 96) = 0;
    if (a2)
      *(_QWORD *)(result + 64) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for Text.Effect.State()
{
  return &type metadata for Text.Effect.State;
}

ValueMetadata *type metadata accessor for NoTextEffectState()
{
  return &type metadata for NoTextEffectState;
}

ValueMetadata *type metadata accessor for Text.Effect.Metrics()
{
  return &type metadata for Text.Effect.Metrics;
}

uint64_t getEnumTagSinglePayload for Text.Effect.DrawingState(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 73))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for Text.Effect.DrawingState(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 72) = 0;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 73) = v3;
  return result;
}

ValueMetadata *type metadata accessor for Text.Effect.DrawingState()
{
  return &type metadata for Text.Effect.DrawingState;
}

ValueMetadata *type metadata accessor for Text.Effect.Variant()
{
  return &type metadata for Text.Effect.Variant;
}

ValueMetadata *type metadata accessor for Text.Effect.BasePhaseConfiguration()
{
  return &type metadata for Text.Effect.BasePhaseConfiguration;
}

ValueMetadata *type metadata accessor for Text.Effect.Identifier()
{
  return &type metadata for Text.Effect.Identifier;
}

ValueMetadata *type metadata accessor for Text.Effect()
{
  return &type metadata for Text.Effect;
}

unint64_t lazy protocol witness table accessor for type Text.Effect.Variant and conformance Text.Effect.Variant()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Text.Effect.Variant and conformance Text.Effect.Variant;
  if (!lazy protocol witness table cache variable for type Text.Effect.Variant and conformance Text.Effect.Variant)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Text.Effect.Variant, &type metadata for Text.Effect.Variant);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.Effect.Variant and conformance Text.Effect.Variant);
  }
  return result;
}

unint64_t instantiation function for generic protocol witness table for Text.Effect.DrawingState(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type Text.Effect.DrawingState and conformance Text.Effect.DrawingState();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type Text.Effect.AnyPhase and conformance Text.Effect.AnyPhase()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type Text.Effect.AnyPhase and conformance Text.Effect.AnyPhase;
  if (!lazy protocol witness table cache variable for type Text.Effect.AnyPhase and conformance Text.Effect.AnyPhase)
  {
    v1 = type metadata accessor for Text.Effect.AnyPhase();
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Text.Effect.AnyPhase, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.Effect.AnyPhase and conformance Text.Effect.AnyPhase);
  }
  return result;
}

uint64_t protocol witness for static Text.Effect.Base.animatorPhase(from:) in conformance SmallTextEffect@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v5;

  if (result == 0x746C7561666564 && a2 == 0xE700000000000000)
  {
    v5 = 0;
  }
  else
  {
    result = _stringCompareWithSmolCheck(_:_:expecting:)();
    v5 = result ^ 1;
  }
  *a3 = v5 & 1;
  return result;
}

BOOL specialized static Text.Effect.DrawingState.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return *(double *)a1 == *(double *)a2
      && *(double *)(a1 + 8) == *(double *)(a2 + 8)
      && *(double *)(a1 + 16) == *(double *)(a2 + 16)
      && *(double *)(a1 + 24) == *(double *)(a2 + 24)
      && *(double *)(a1 + 32) == *(double *)(a2 + 32)
      && *(double *)(a1 + 40) == *(double *)(a2 + 40)
      && *(double *)(a1 + 48) == *(double *)(a2 + 48)
      && *(double *)(a1 + 56) == *(double *)(a2 + 56)
      && *(double *)(a1 + 64) == *(double *)(a2 + 64)
      && *(unsigned __int8 *)(a1 + 72) == *(unsigned __int8 *)(a2 + 72);
}

float64_t specialized static Text.Effect.DrawingState.+= infix(_:_:)(float64x2_t *a1, float64x2_t *a2)
{
  float64x2_t v2;
  float64x2_t v3;
  float64_t result;

  v2 = vaddq_f64(a2[1], a1[1]);
  *a1 = vaddq_f64(*a2, *a1);
  a1[1] = v2;
  v3 = vaddq_f64(a2[3], a1[3]);
  a1[2] = vaddq_f64(a2[2], a1[2]);
  a1[3] = v3;
  result = a2[4].f64[0] + a1[4].f64[0];
  a1[4].f64[0] = result;
  return result;
}

float64_t specialized static Text.Effect.DrawingState.-= infix(_:_:)(float64x2_t *a1, float64x2_t *a2)
{
  float64x2_t v2;
  float64x2_t v3;
  float64_t result;

  v2 = vsubq_f64(a1[1], a2[1]);
  *a1 = vsubq_f64(*a1, *a2);
  a1[1] = v2;
  v3 = vsubq_f64(a1[3], a2[3]);
  a1[2] = vsubq_f64(a1[2], a2[2]);
  a1[3] = v3;
  result = a1[4].f64[0] - a2[4].f64[0];
  a1[4].f64[0] = result;
  return result;
}

unint64_t _atomic_fetch_add64()
{
  unint64_t result;

  do
    result = __ldxr((unint64_t *)&static Text.Effect.Identifier.next);
  while (__stxr(result + 1, (unint64_t *)&static Text.Effect.Identifier.next));
  return result;
}

uint64_t getEnumTagSinglePayload for Text.Effect.Phase.Storage(unsigned __int8 *a1, unsigned int a2)
{
  unsigned int v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t result;
  unsigned int v6;
  unsigned int v7;

  if (!a2)
    return 0;
  if (a2 < 0xFD)
  {
    v6 = *a1;
    if (v6 >= 2)
    {
      v7 = (v6 + 2147483646) & 0x7FFFFFFF;
      result = v7 - 1;
      if (v7 > 1)
        return result;
    }
    return 0;
  }
  v2 = a2 + 3;
  if (a2 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if (v2 >> 8 < 0xFF)
    v3 = 1;
  if (v2 >= 0x100)
    v4 = v3;
  else
    v4 = 0;
  return ((uint64_t (*)(void))((char *)&loc_234FCDF58 + 4 * byte_2352BCF20[v4]))();
}

uint64_t storeEnumTagSinglePayload for Text.Effect.Phase.Storage(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  unsigned int v3;
  int v4;
  uint64_t v5;

  v3 = a3 + 3;
  if (a3 + 3 >= 0xFFFF00)
    v4 = 4;
  else
    v4 = 2;
  if (v3 >> 8 < 0xFF)
    v4 = 1;
  if (v3 >= 0x100)
    LODWORD(v5) = v4;
  else
    LODWORD(v5) = 0;
  if (a3 >= 0xFD)
    v5 = v5;
  else
    v5 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_234FCE004 + 4 * byte_2352BCF2A[v5]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_234FCE038 + 4 * byte_2352BCF25[v5]))();
}

uint64_t sub_234FCE038(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_234FCE040(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x234FCE048);
  return result;
}

uint64_t sub_234FCE054(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x234FCE05CLL);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_234FCE060(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_234FCE068(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for Text.Effect.Phase.Storage()
{
  return &type metadata for Text.Effect.Phase.Storage;
}

ValueMetadata *type metadata accessor for Text.Effect.RelativeIdentifierKey()
{
  return &type metadata for Text.Effect.RelativeIdentifierKey;
}

uint64_t getEnumTagSinglePayload for Text.Effect.Phase(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  int v7;

  if (!a2)
    return 0;
  if (a2 < 0xFD)
    goto LABEL_17;
  if (a2 + 3 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 3) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 3;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 3;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 3;
  }
LABEL_17:
  v6 = *a1;
  if (v6 >= 2)
    v7 = ((v6 + 2147483646) & 0x7FFFFFFF) - 2;
  else
    v7 = -3;
  if (v7 < 0)
    v7 = -1;
  return (v7 + 1);
}

uint64_t storeEnumTagSinglePayload for Text.Effect.Phase(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_234FCE18C + 4 * byte_2352BCF34[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_234FCE1C0 + 4 * byte_2352BCF2F[v4]))();
}

uint64_t sub_234FCE1C0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_234FCE1C8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x234FCE1D0);
  return result;
}

uint64_t sub_234FCE1DC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x234FCE1E4);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_234FCE1E8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_234FCE1F0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for Text.Effect.Phase()
{
  return &type metadata for Text.Effect.Phase;
}

ValueMetadata *type metadata accessor for Text.Effect.Progress()
{
  return &type metadata for Text.Effect.Progress;
}

ValueMetadata *type metadata accessor for Text.Effect.DrawingState.InteractionFlags()
{
  return &type metadata for Text.Effect.DrawingState.InteractionFlags;
}

ValueMetadata *type metadata accessor for Text.Effect.Variant.Storage()
{
  return &type metadata for Text.Effect.Variant.Storage;
}

unint64_t lazy protocol witness table accessor for type Text.Effect.Variant.Storage and conformance Text.Effect.Variant.Storage()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Text.Effect.Variant.Storage and conformance Text.Effect.Variant.Storage;
  if (!lazy protocol witness table cache variable for type Text.Effect.Variant.Storage and conformance Text.Effect.Variant.Storage)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Text.Effect.Variant.Storage, &type metadata for Text.Effect.Variant.Storage);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.Effect.Variant.Storage and conformance Text.Effect.Variant.Storage);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Text.Effect.DrawingState.InteractionFlags and conformance Text.Effect.DrawingState.InteractionFlags()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Text.Effect.DrawingState.InteractionFlags and conformance Text.Effect.DrawingState.InteractionFlags;
  if (!lazy protocol witness table cache variable for type Text.Effect.DrawingState.InteractionFlags and conformance Text.Effect.DrawingState.InteractionFlags)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Text.Effect.DrawingState.InteractionFlags, &type metadata for Text.Effect.DrawingState.InteractionFlags);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.Effect.DrawingState.InteractionFlags and conformance Text.Effect.DrawingState.InteractionFlags);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Text.Effect.DrawingState.InteractionFlags and conformance Text.Effect.DrawingState.InteractionFlags;
  if (!lazy protocol witness table cache variable for type Text.Effect.DrawingState.InteractionFlags and conformance Text.Effect.DrawingState.InteractionFlags)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Text.Effect.DrawingState.InteractionFlags, &type metadata for Text.Effect.DrawingState.InteractionFlags);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.Effect.DrawingState.InteractionFlags and conformance Text.Effect.DrawingState.InteractionFlags);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Text.Effect.DrawingState.InteractionFlags and conformance Text.Effect.DrawingState.InteractionFlags;
  if (!lazy protocol witness table cache variable for type Text.Effect.DrawingState.InteractionFlags and conformance Text.Effect.DrawingState.InteractionFlags)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Text.Effect.DrawingState.InteractionFlags, &type metadata for Text.Effect.DrawingState.InteractionFlags);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.Effect.DrawingState.InteractionFlags and conformance Text.Effect.DrawingState.InteractionFlags);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Text.Effect.DrawingState.InteractionFlags and conformance Text.Effect.DrawingState.InteractionFlags;
  if (!lazy protocol witness table cache variable for type Text.Effect.DrawingState.InteractionFlags and conformance Text.Effect.DrawingState.InteractionFlags)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Text.Effect.DrawingState.InteractionFlags, &type metadata for Text.Effect.DrawingState.InteractionFlags);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.Effect.DrawingState.InteractionFlags and conformance Text.Effect.DrawingState.InteractionFlags);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Text.Effect.Phase and conformance Text.Effect.Phase()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Text.Effect.Phase and conformance Text.Effect.Phase;
  if (!lazy protocol witness table cache variable for type Text.Effect.Phase and conformance Text.Effect.Phase)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Text.Effect.Phase, &type metadata for Text.Effect.Phase);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.Effect.Phase and conformance Text.Effect.Phase);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Text.Effect.Phase.Storage and conformance Text.Effect.Phase.Storage()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Text.Effect.Phase.Storage and conformance Text.Effect.Phase.Storage;
  if (!lazy protocol witness table cache variable for type Text.Effect.Phase.Storage and conformance Text.Effect.Phase.Storage)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Text.Effect.Phase.Storage, &type metadata for Text.Effect.Phase.Storage);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.Effect.Phase.Storage and conformance Text.Effect.Phase.Storage);
  }
  return result;
}

uint64_t specialized Text.Effect.OnOffAnimatorPhase.init(_:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 6710895 && a2 == 0xE300000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 28271 && a2 == 0xE200000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

ValueMetadata *type metadata accessor for Text.Effect.DefaultDurationProvider()
{
  return &type metadata for Text.Effect.DefaultDurationProvider;
}

uint64_t storeEnumTagSinglePayload for Text.Effect.DefaultAnimatorPhase(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_234FCE624 + 4 * byte_2352BCF39[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_234FCE644 + 4 * byte_2352BCF3E[v4]))();
}

_BYTE *sub_234FCE624(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_234FCE644(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_234FCE64C(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_234FCE654(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_234FCE65C(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_234FCE664(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for Text.Effect.DefaultAnimatorPhase()
{
  return &type metadata for Text.Effect.DefaultAnimatorPhase;
}

uint64_t storeEnumTagSinglePayload for Text.Effect.Variant(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_234FCE6CC + 4 * byte_2352BCF48[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_234FCE700 + 4 * byte_2352BCF43[v4]))();
}

uint64_t sub_234FCE700(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_234FCE708(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x234FCE710);
  return result;
}

uint64_t sub_234FCE71C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x234FCE724);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_234FCE728(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_234FCE730(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for Text.Effect.OnOffAnimatorPhase()
{
  return &type metadata for Text.Effect.OnOffAnimatorPhase;
}

ValueMetadata *type metadata accessor for Text.Effect.GlyphIndex()
{
  return &type metadata for Text.Effect.GlyphIndex;
}

uint64_t specialized Array.append(_:)(uint64_t a1, uint64_t a2, uint64_t a3, double a4)
{
  _QWORD **v4;
  _QWORD *v9;
  uint64_t result;
  unint64_t v11;
  unint64_t v12;
  double *v13;

  v9 = *v4;
  result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
  {
    result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v9[2] + 1, 1, v9);
    v9 = (_QWORD *)result;
  }
  v12 = v9[2];
  v11 = v9[3];
  if (v12 >= v11 >> 1)
  {
    result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v11 > 1), v12 + 1, 1, v9);
    v9 = (_QWORD *)result;
  }
  v9[2] = v12 + 1;
  v13 = (double *)&v9[4 * v12];
  *((_QWORD *)v13 + 4) = a1;
  *((_QWORD *)v13 + 5) = a2;
  v13[6] = a4;
  *((_QWORD *)v13 + 7) = a3;
  *v4 = v9;
  return result;
}

__n128 specialized Array.append(_:)(uint64_t a1)
{
  _QWORD **v1;
  _QWORD *v3;
  unint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  __n128 result;
  __int128 v8;
  __int128 v9;

  v3 = *v1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3[2] + 1, 1, v3);
  v5 = v3[2];
  v4 = v3[3];
  if (v5 >= v4 >> 1)
    v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v4 > 1), v5 + 1, 1, v3);
  v3[2] = v5 + 1;
  v6 = &v3[7 * v5];
  result = *(__n128 *)a1;
  v8 = *(_OWORD *)(a1 + 16);
  v9 = *(_OWORD *)(a1 + 32);
  v6[10] = *(_QWORD *)(a1 + 48);
  *((_OWORD *)v6 + 3) = v8;
  *((_OWORD *)v6 + 4) = v9;
  *((__n128 *)v6 + 2) = result;
  *v1 = v3;
  return result;
}

{
  _QWORD **v1;
  _QWORD *v3;
  unint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  __n128 result;
  __int128 v8;

  v3 = *v1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3[2] + 1, 1, v3);
  v5 = v3[2];
  v4 = v3[3];
  if (v5 >= v4 >> 1)
    v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v4 > 1), v5 + 1, 1, v3);
  v3[2] = v5 + 1;
  v6 = &v3[6 * v5];
  result = *(__n128 *)a1;
  v8 = *(_OWORD *)(a1 + 32);
  *((_OWORD *)v6 + 3) = *(_OWORD *)(a1 + 16);
  *((_OWORD *)v6 + 4) = v8;
  *((__n128 *)v6 + 2) = result;
  *v1 = v3;
  return result;
}

{
  _QWORD **v1;
  _QWORD *v3;
  unint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  __n128 result;
  __int128 v8;
  __int128 v9;

  v3 = *v1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3[2] + 1, 1, v3);
  v5 = v3[2];
  v4 = v3[3];
  if (v5 >= v4 >> 1)
    v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v4 > 1), v5 + 1, 1, v3);
  v3[2] = v5 + 1;
  v6 = &v3[7 * v5];
  result = *(__n128 *)a1;
  v8 = *(_OWORD *)(a1 + 16);
  v9 = *(_OWORD *)(a1 + 32);
  v6[10] = *(_QWORD *)(a1 + 48);
  *((_OWORD *)v6 + 3) = v8;
  *((_OWORD *)v6 + 4) = v9;
  *((__n128 *)v6 + 2) = result;
  *v1 = v3;
  return result;
}

{
  _QWORD **v1;
  _QWORD *v3;
  unint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  __n128 result;
  __int128 v8;
  __int128 v9;

  v3 = *v1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3[2] + 1, 1, v3);
  v5 = v3[2];
  v4 = v3[3];
  if (v5 >= v4 >> 1)
    v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v4 > 1), v5 + 1, 1, v3);
  v3[2] = v5 + 1;
  v6 = &v3[8 * v5];
  result = *(__n128 *)a1;
  v8 = *(_OWORD *)(a1 + 16);
  v9 = *(_OWORD *)(a1 + 48);
  *((_OWORD *)v6 + 4) = *(_OWORD *)(a1 + 32);
  *((_OWORD *)v6 + 5) = v9;
  *((__n128 *)v6 + 2) = result;
  *((_OWORD *)v6 + 3) = v8;
  *v1 = v3;
  return result;
}

{
  _QWORD **v1;
  _QWORD *v3;
  unint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  __n128 result;
  __int128 v8;
  __int128 v9;

  v3 = *v1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3[2] + 1, 1, v3);
  v5 = v3[2];
  v4 = v3[3];
  if (v5 >= v4 >> 1)
    v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v4 > 1), v5 + 1, 1, v3);
  v3[2] = v5 + 1;
  v6 = &v3[9 * v5];
  *((_OWORD *)v6 + 2) = *(_OWORD *)a1;
  result = *(__n128 *)(a1 + 16);
  v8 = *(_OWORD *)(a1 + 32);
  v9 = *(_OWORD *)(a1 + 48);
  v6[12] = *(_QWORD *)(a1 + 64);
  *((_OWORD *)v6 + 4) = v8;
  *((_OWORD *)v6 + 5) = v9;
  *((__n128 *)v6 + 3) = result;
  *v1 = v3;
  return result;
}

{
  _QWORD **v1;
  _QWORD *v3;
  unint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  __n128 result;
  __int128 v8;
  __int128 v9;

  v3 = *v1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3[2] + 1, 1, v3);
  v5 = v3[2];
  v4 = v3[3];
  if (v5 >= v4 >> 1)
    v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v4 > 1), v5 + 1, 1, v3);
  v3[2] = v5 + 1;
  v6 = &v3[9 * v5];
  *((_OWORD *)v6 + 2) = *(_OWORD *)a1;
  result = *(__n128 *)(a1 + 16);
  v8 = *(_OWORD *)(a1 + 32);
  v9 = *(_OWORD *)(a1 + 48);
  v6[12] = *(_QWORD *)(a1 + 64);
  *((_OWORD *)v6 + 4) = v8;
  *((_OWORD *)v6 + 5) = v9;
  *((__n128 *)v6 + 3) = result;
  *v1 = v3;
  return result;
}

{
  _QWORD **v1;
  _QWORD *v3;
  unint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  __n128 result;
  __int128 v8;
  __int128 v9;

  v3 = *v1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3[2] + 1, 1, v3);
  v5 = v3[2];
  v4 = v3[3];
  if (v5 >= v4 >> 1)
    v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v4 > 1), v5 + 1, 1, v3);
  v3[2] = v5 + 1;
  v6 = &v3[9 * v5];
  *((_OWORD *)v6 + 2) = *(_OWORD *)a1;
  result = *(__n128 *)(a1 + 16);
  v8 = *(_OWORD *)(a1 + 32);
  v9 = *(_OWORD *)(a1 + 48);
  v6[12] = *(_QWORD *)(a1 + 64);
  *((_OWORD *)v6 + 4) = v8;
  *((_OWORD *)v6 + 5) = v9;
  *((__n128 *)v6 + 3) = result;
  *v1 = v3;
  return result;
}

{
  _QWORD **v1;
  _QWORD *v3;
  unint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  __n128 result;
  __int128 v8;

  v3 = *v1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3[2] + 1, 1, v3);
  v5 = v3[2];
  v4 = v3[3];
  if (v5 >= v4 >> 1)
    v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v4 > 1), v5 + 1, 1, v3);
  v3[2] = v5 + 1;
  v6 = &v3[6 * v5];
  result = *(__n128 *)a1;
  v8 = *(_OWORD *)(a1 + 32);
  *((_OWORD *)v6 + 3) = *(_OWORD *)(a1 + 16);
  *((_OWORD *)v6 + 4) = v8;
  *((__n128 *)v6 + 2) = result;
  *v1 = v3;
  return result;
}

{
  _QWORD **v1;
  _QWORD *v3;
  unint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  __n128 result;
  __int128 v8;
  __int128 v9;

  v3 = *v1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3[2] + 1, 1, v3);
  v5 = v3[2];
  v4 = v3[3];
  if (v5 >= v4 >> 1)
    v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v4 > 1), v5 + 1, 1, v3);
  v3[2] = v5 + 1;
  v6 = &v3[9 * v5];
  *((_OWORD *)v6 + 2) = *(_OWORD *)a1;
  result = *(__n128 *)(a1 + 16);
  v8 = *(_OWORD *)(a1 + 32);
  v9 = *(_OWORD *)(a1 + 48);
  v6[12] = *(_QWORD *)(a1 + 64);
  *((_OWORD *)v6 + 4) = v8;
  *((_OWORD *)v6 + 5) = v9;
  *((__n128 *)v6 + 3) = result;
  *v1 = v3;
  return result;
}

{
  _QWORD **v1;
  _QWORD *v3;
  unint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  __n128 result;
  __int128 v8;
  __int128 v9;

  v3 = *v1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3[2] + 1, 1, v3);
  v5 = v3[2];
  v4 = v3[3];
  if (v5 >= v4 >> 1)
    v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v4 > 1), v5 + 1, 1, v3);
  v3[2] = v5 + 1;
  v6 = &v3[10 * v5];
  *((_OWORD *)v6 + 2) = *(_OWORD *)a1;
  result = *(__n128 *)(a1 + 16);
  v8 = *(_OWORD *)(a1 + 32);
  v9 = *(_OWORD *)(a1 + 64);
  *((_OWORD *)v6 + 5) = *(_OWORD *)(a1 + 48);
  *((_OWORD *)v6 + 6) = v9;
  *((__n128 *)v6 + 3) = result;
  *((_OWORD *)v6 + 4) = v8;
  *v1 = v3;
  return result;
}

{
  _QWORD **v1;
  _QWORD *v3;
  unint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  __n128 result;
  __int128 v8;
  __int128 v9;

  v3 = *v1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3[2] + 1, 1, v3);
  v5 = v3[2];
  v4 = v3[3];
  if (v5 >= v4 >> 1)
    v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v4 > 1), v5 + 1, 1, v3);
  v3[2] = v5 + 1;
  v6 = &v3[8 * v5];
  result = *(__n128 *)a1;
  v8 = *(_OWORD *)(a1 + 16);
  v9 = *(_OWORD *)(a1 + 48);
  *((_OWORD *)v6 + 4) = *(_OWORD *)(a1 + 32);
  *((_OWORD *)v6 + 5) = v9;
  *((__n128 *)v6 + 2) = result;
  *((_OWORD *)v6 + 3) = v8;
  *v1 = v3;
  return result;
}

{
  _QWORD **v1;
  _QWORD *v3;
  unint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  __n128 result;
  __int128 v8;

  v3 = *v1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3[2] + 1, 1, v3);
  v5 = v3[2];
  v4 = v3[3];
  if (v5 >= v4 >> 1)
    v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v4 > 1), v5 + 1, 1, v3);
  v3[2] = v5 + 1;
  v6 = &v3[6 * v5];
  result = *(__n128 *)a1;
  v8 = *(_OWORD *)(a1 + 32);
  *((_OWORD *)v6 + 3) = *(_OWORD *)(a1 + 16);
  *((_OWORD *)v6 + 4) = v8;
  *((__n128 *)v6 + 2) = result;
  *v1 = v3;
  return result;
}

{
  _QWORD **v1;
  _QWORD *v3;
  unint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  __n128 result;
  __int128 v8;
  __int128 v9;

  v3 = *v1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3[2] + 1, 1, v3);
  v5 = v3[2];
  v4 = v3[3];
  if (v5 >= v4 >> 1)
    v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v4 > 1), v5 + 1, 1, v3);
  v3[2] = v5 + 1;
  v6 = &v3[8 * v5];
  result = *(__n128 *)a1;
  v8 = *(_OWORD *)(a1 + 16);
  v9 = *(_OWORD *)(a1 + 48);
  *((_OWORD *)v6 + 4) = *(_OWORD *)(a1 + 32);
  *((_OWORD *)v6 + 5) = v9;
  *((__n128 *)v6 + 2) = result;
  *((_OWORD *)v6 + 3) = v8;
  *v1 = v3;
  return result;
}

__n128 specialized Array.append(_:)(__n128 *a1)
{
  _QWORD **v1;
  _QWORD *v3;
  unint64_t v4;
  unint64_t v5;
  __n128 *v6;
  __n128 result;
  __n128 v8;

  v3 = *v1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3[2] + 1, 1, v3);
  v5 = v3[2];
  v4 = v3[3];
  if (v5 >= v4 >> 1)
    v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v4 > 1), v5 + 1, 1, v3);
  v3[2] = v5 + 1;
  v6 = (__n128 *)&v3[5 * v5];
  result = *a1;
  v8 = a1[1];
  v6[4].n128_u64[0] = a1[2].n128_u64[0];
  v6[2] = result;
  v6[3] = v8;
  *v1 = v3;
  return result;
}

{
  _QWORD **v1;
  _QWORD *v3;
  unint64_t v4;
  unint64_t v5;
  __n128 *v6;
  __n128 result;
  __n128 v8;

  v3 = *v1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3[2] + 1, 1, v3);
  v5 = v3[2];
  v4 = v3[3];
  if (v5 >= v4 >> 1)
    v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v4 > 1), v5 + 1, 1, v3);
  v3[2] = v5 + 1;
  v6 = (__n128 *)&v3[5 * v5];
  result = *a1;
  v8 = a1[1];
  v6[4].n128_u64[0] = a1[2].n128_u64[0];
  v6[2] = result;
  v6[3] = v8;
  *v1 = v3;
  return result;
}

__n128 specialized Array.append(_:)(__int128 *a1)
{
  _QWORD **v1;
  _QWORD *v3;
  unint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __n128 result;
  __int128 v11;
  __int128 v12;

  v3 = *v1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3[2] + 1, 1, v3);
  v5 = v3[2];
  v4 = v3[3];
  if (v5 >= v4 >> 1)
    v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v4 > 1), v5 + 1, 1, v3);
  v3[2] = v5 + 1;
  v6 = &v3[16 * v5];
  v7 = *a1;
  v8 = a1[1];
  v9 = a1[3];
  *((_OWORD *)v6 + 4) = a1[2];
  *((_OWORD *)v6 + 5) = v9;
  *((_OWORD *)v6 + 2) = v7;
  *((_OWORD *)v6 + 3) = v8;
  result = (__n128)a1[4];
  v11 = a1[5];
  v12 = a1[7];
  *((_OWORD *)v6 + 8) = a1[6];
  *((_OWORD *)v6 + 9) = v12;
  *((__n128 *)v6 + 6) = result;
  *((_OWORD *)v6 + 7) = v11;
  *v1 = v3;
  return result;
}

{
  _QWORD **v1;
  _QWORD *v3;
  unint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  __int128 v7;
  __int128 v8;
  __n128 result;
  __int128 v10;
  __int128 v11;

  v3 = *v1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3[2] + 1, 1, v3);
  v5 = v3[2];
  v4 = v3[3];
  if (v5 >= v4 >> 1)
    v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v4 > 1), v5 + 1, 1, v3);
  v3[2] = v5 + 1;
  v6 = &v3[14 * v5];
  v7 = *a1;
  v8 = a1[2];
  *((_OWORD *)v6 + 3) = a1[1];
  *((_OWORD *)v6 + 4) = v8;
  *((_OWORD *)v6 + 2) = v7;
  result = (__n128)a1[3];
  v10 = a1[4];
  v11 = a1[6];
  *((_OWORD *)v6 + 7) = a1[5];
  *((_OWORD *)v6 + 8) = v11;
  *((__n128 *)v6 + 5) = result;
  *((_OWORD *)v6 + 6) = v10;
  *v1 = v3;
  return result;
}

uint64_t specialized Animation.animate<A>(value:time:context:)(uint64_t a1, uint64_t a2, double a3, double a4)
{
  void (*v8)(uint64_t *__return_ptr, double *, uint64_t, _QWORD, unint64_t, double);
  unint64_t v9;
  void (*v11)(uint64_t *__return_ptr, double *, uint64_t, _QWORD, uint64_t, double);
  uint64_t v12;
  double v13[4];
  uint64_t v14;
  double v15;

  v15 = a3;
  if (type metadata accessor for AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>() == MEMORY[0x24BEE50B0])
  {
    v13[0] = a3;
    v11 = *(void (**)(uint64_t *__return_ptr, double *, uint64_t, _QWORD, uint64_t, double))(*(_QWORD *)a2 + 120);
    v12 = lazy protocol witness table accessor for type AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>> and conformance AnimatablePair<A, B>();
    v11(&v14, v13, a1, MEMORY[0x24BEE50B0], v12, a4);
  }
  else
  {
    v8 = *(void (**)(uint64_t *__return_ptr, double *, uint64_t, _QWORD, unint64_t, double))(*(_QWORD *)a2 + 120);
    v9 = lazy protocol witness table accessor for type CGFloat and conformance CGFloat();
    v8(&v14, &v15, a1, MEMORY[0x24BEE50B0], v9, a4);
  }
  return v14;
}

_QWORD *specialized Animation.animate<A>(value:time:context:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, double a4@<D0>, double a5@<D1>, double a6@<D2>, double a7@<D3>, double a8@<D4>)
{
  uint64_t v16;
  uint64_t v17;
  _QWORD *(*v18)(uint64_t *__return_ptr, _QWORD *, uint64_t, uint64_t, unint64_t, double);
  unint64_t v19;
  _QWORD *result;
  uint64_t v21;
  __int128 v22;
  char v23;
  _QWORD *(*v24)(uint64_t *__return_ptr, _QWORD *, uint64_t, uint64_t, uint64_t, double);
  uint64_t v25;
  uint64_t v26;
  _QWORD v27[4];
  _QWORD v28[4];
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  char v32;

  *(double *)v28 = a4;
  *(double *)&v28[1] = a5;
  *(double *)&v28[2] = a6;
  *(double *)&v28[3] = a7;
  v16 = type metadata accessor for AnimatablePair<CGFloat, AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>>(0, &lazy cache variable for type metadata for AnimatablePair<CGFloat, AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>>, (void (*)(uint64_t))type metadata accessor for AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>, (void (*)(void))lazy protocol witness table accessor for type AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>> and conformance AnimatablePair<A, B>);
  if (v16 == MEMORY[0x24BEE13C8])
  {
    *(double *)v27 = a4;
    result = (*(_QWORD *(**)(uint64_t *__return_ptr, _QWORD *, uint64_t, _QWORD, _UNKNOWN **, double))(*(_QWORD *)a2 + 120))(&v29, v27, a1, MEMORY[0x24BEE13C8], &protocol witness table for Double, a8);
    v21 = v29;
    v23 = v30;
  }
  else
  {
    v17 = v16;
    if (v16 == type metadata accessor for AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>())
    {
      *(double *)v27 = a4;
      *(double *)&v27[1] = a5;
      *(double *)&v27[2] = a6;
      *(double *)&v27[3] = a7;
      v24 = *(_QWORD *(**)(uint64_t *__return_ptr, _QWORD *, uint64_t, uint64_t, uint64_t, double))(*(_QWORD *)a2 + 120);
      v25 = lazy protocol witness table accessor for type AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>> and conformance AnimatablePair<A, B>();
      result = v24(&v29, v27, a1, v17, v25, a8);
    }
    else
    {
      v18 = *(_QWORD *(**)(uint64_t *__return_ptr, _QWORD *, uint64_t, uint64_t, unint64_t, double))(*(_QWORD *)a2 + 120);
      v19 = lazy protocol witness table accessor for type AnimatablePair<CGFloat, AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>> and conformance AnimatablePair<A, B>();
      result = v18(&v29, v28, a1, v17, v19, a8);
    }
    v21 = v29;
    v22 = v31;
    v23 = v32;
  }
  v26 = v30;
  *(_QWORD *)a3 = v21;
  *(_QWORD *)(a3 + 8) = v26;
  *(_OWORD *)(a3 + 16) = v22;
  *(_BYTE *)(a3 + 32) = v23 & 1;
  return result;
}

uint64_t specialized Animation.animate<A>(value:time:context:)(uint64_t a1, uint64_t a2, double a3, double a4, double a5)
{
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t *__return_ptr, _QWORD *, uint64_t, uint64_t, unint64_t, double);
  unint64_t v13;
  void (*v15)(uint64_t *__return_ptr, _QWORD *, uint64_t, uint64_t, uint64_t, double);
  uint64_t v16;
  _QWORD v17[4];
  uint64_t v18;
  _QWORD v19[2];

  *(double *)v19 = a3;
  *(double *)&v19[1] = a4;
  v10 = type metadata accessor for AnimatablePair<CGFloat, CGFloat>();
  if (v10 == MEMORY[0x24BEE13C8])
  {
    *(double *)v17 = a3;
    (*(void (**)(uint64_t *__return_ptr, _QWORD *, uint64_t, _QWORD, _UNKNOWN **, double))(*(_QWORD *)a2 + 120))(&v18, v17, a1, MEMORY[0x24BEE13C8], &protocol witness table for Double, a5);
    return v18;
  }
  else
  {
    v11 = v10;
    if (v10 == type metadata accessor for AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>())
    {
      *(double *)v17 = a3;
      *(double *)&v17[1] = a4;
      v15 = *(void (**)(uint64_t *__return_ptr, _QWORD *, uint64_t, uint64_t, uint64_t, double))(*(_QWORD *)a2 + 120);
      v16 = lazy protocol witness table accessor for type AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>> and conformance AnimatablePair<A, B>();
      v15(&v18, v17, a1, v11, v16, a5);
    }
    else
    {
      v12 = *(void (**)(uint64_t *__return_ptr, _QWORD *, uint64_t, uint64_t, unint64_t, double))(*(_QWORD *)a2 + 120);
      v13 = lazy protocol witness table accessor for type AnimatablePair<CGFloat, CGFloat> and conformance AnimatablePair<A, B>();
      v12(&v18, v19, a1, v11, v13, a5);
    }
    return v18;
  }
}

uint64_t specialized Animation.animate<A>(value:time:context:)(uint64_t a1, uint64_t a2, double a3, double a4, double a5, double a6)
{
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t *__return_ptr, _QWORD *, uint64_t, uint64_t, uint64_t, double);
  uint64_t v15;
  void (*v17)(uint64_t *__return_ptr, _QWORD *, uint64_t, uint64_t, uint64_t, double);
  uint64_t v18;
  _QWORD v19[4];
  uint64_t v20;
  _QWORD v21[3];

  *(double *)v21 = a3;
  *(double *)&v21[1] = a4;
  *(double *)&v21[2] = a5;
  v12 = type metadata accessor for AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>(0);
  if (v12 == MEMORY[0x24BEE13C8])
  {
    *(double *)v19 = a3;
    (*(void (**)(uint64_t *__return_ptr, _QWORD *, uint64_t, _QWORD, _UNKNOWN **, double))(*(_QWORD *)a2 + 120))(&v20, v19, a1, MEMORY[0x24BEE13C8], &protocol witness table for Double, a6);
    return v20;
  }
  else
  {
    v13 = v12;
    if (v12 == type metadata accessor for AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>())
    {
      *(double *)v19 = a3;
      *(double *)&v19[1] = a4;
      *(double *)&v19[2] = a5;
      v17 = *(void (**)(uint64_t *__return_ptr, _QWORD *, uint64_t, uint64_t, uint64_t, double))(*(_QWORD *)a2 + 120);
      v18 = lazy protocol witness table accessor for type AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>> and conformance AnimatablePair<A, B>();
      v17(&v20, v19, a1, v13, v18, a6);
    }
    else
    {
      v14 = *(void (**)(uint64_t *__return_ptr, _QWORD *, uint64_t, uint64_t, uint64_t, double))(*(_QWORD *)a2 + 120);
      v15 = lazy protocol witness table accessor for type AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>> and conformance AnimatablePair<A, B>();
      v14(&v20, v21, a1, v13, v15, a6);
    }
    return v20;
  }
}

{
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t *__return_ptr, _QWORD *, uint64_t, uint64_t, unint64_t, double);
  unint64_t v15;
  void (*v17)(uint64_t *__return_ptr, _QWORD *, uint64_t, uint64_t, uint64_t, double);
  uint64_t v18;
  _QWORD v19[4];
  uint64_t v20;
  _QWORD v21[3];

  *(double *)v21 = a3;
  *(double *)&v21[1] = a4;
  *(double *)&v21[2] = a5;
  v12 = type metadata accessor for AnimatablePair<AnimatablePair<CGFloat, CGFloat>, ResolvedGradientVector>(0, &lazy cache variable for type metadata for AnimatablePair<AnimatablePair<CGFloat, CGFloat>, CGFloat>, (void (*)(void))lazy protocol witness table accessor for type CGFloat and conformance CGFloat);
  if (v12 == MEMORY[0x24BEE13C8])
  {
    *(double *)v19 = a3;
    (*(void (**)(uint64_t *__return_ptr, _QWORD *, uint64_t, _QWORD, _UNKNOWN **, double))(*(_QWORD *)a2 + 120))(&v20, v19, a1, MEMORY[0x24BEE13C8], &protocol witness table for Double, a6);
    return v20;
  }
  else
  {
    v13 = v12;
    if (v12 == type metadata accessor for AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>())
    {
      *(double *)v19 = a3;
      *(double *)&v19[1] = a4;
      *(double *)&v19[2] = a5;
      v17 = *(void (**)(uint64_t *__return_ptr, _QWORD *, uint64_t, uint64_t, uint64_t, double))(*(_QWORD *)a2 + 120);
      v18 = lazy protocol witness table accessor for type AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>> and conformance AnimatablePair<A, B>();
      v17(&v20, v19, a1, v13, v18, a6);
    }
    else
    {
      v14 = *(void (**)(uint64_t *__return_ptr, _QWORD *, uint64_t, uint64_t, unint64_t, double))(*(_QWORD *)a2 + 120);
      v15 = lazy protocol witness table accessor for type AnimatablePair<AnimatablePair<CGFloat, CGFloat>, CGFloat> and conformance AnimatablePair<A, B>();
      v14(&v20, v21, a1, v13, v15, a6);
    }
    return v20;
  }
}

_QWORD *specialized Animation.animate<A>(value:time:context:)@<X0>(__int128 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>, double a5@<D0>)
{
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(__int128 *, uint64_t, uint64_t, uint64_t, double);
  uint64_t v13;
  _QWORD *result;
  char v15;
  _QWORD *(*v16)(_OWORD *__return_ptr, _OWORD *, uint64_t, uint64_t, uint64_t, double);
  uint64_t v17;
  char v18;
  __int128 v19;
  _OWORD v20[2];
  _OWORD v21[2];
  char v22;
  __int128 v23;
  __int128 v24;

  v9 = a1[1];
  v23 = *a1;
  v24 = v9;
  v10 = type metadata accessor for AnimatablePair<AnimatableArray<Float>, AnimatablePair<AnimatableArray<AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>, AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>>();
  if (v10 == MEMORY[0x24BEE13C8])
  {
    *(_QWORD *)&v20[0] = v23;
    result = (*(_QWORD *(**)(_OWORD *__return_ptr, _OWORD *, uint64_t, _QWORD, _UNKNOWN **, double))(*(_QWORD *)a3 + 120))(v21, v20, a2, MEMORY[0x24BEE13C8], &protocol witness table for Double, a5);
    v15 = BYTE8(v21[0]);
    *(_QWORD *)a4 = *(_QWORD *)&v21[0];
    *(_BYTE *)(a4 + 8) = v15;
  }
  else
  {
    v11 = v10;
    if (v10 == type metadata accessor for AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>())
    {
      v20[0] = v23;
      v20[1] = v24;
      v16 = *(_QWORD *(**)(_OWORD *__return_ptr, _OWORD *, uint64_t, uint64_t, uint64_t, double))(*(_QWORD *)a3 + 120);
      v17 = lazy protocol witness table accessor for type AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>> and conformance AnimatablePair<A, B>();
      result = v16(v21, v20, a2, v11, v17, a5);
      v18 = v22;
      v19 = v21[1];
      *(_OWORD *)a4 = v21[0];
      *(_OWORD *)(a4 + 16) = v19;
      *(_BYTE *)(a4 + 32) = v18;
    }
    else
    {
      v12 = *(uint64_t (**)(__int128 *, uint64_t, uint64_t, uint64_t, double))(*(_QWORD *)a3 + 120);
      v13 = lazy protocol witness table accessor for type AnimatablePair<AnimatableArray<Float>, AnimatablePair<AnimatableArray<AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>, AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>> and conformance AnimatablePair<A, B>();
      return (_QWORD *)v12(&v23, a2, v11, v13, a5);
    }
  }
  return result;
}

{
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(__int128 *, uint64_t, uint64_t, uint64_t, double);
  uint64_t v13;
  _QWORD *result;
  char v15;
  _QWORD *(*v16)(_OWORD *__return_ptr, _OWORD *, uint64_t, uint64_t, uint64_t, double);
  uint64_t v17;
  char v18;
  __int128 v19;
  _OWORD v20[2];
  _OWORD v21[2];
  char v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;

  v9 = a1[1];
  v23 = *a1;
  v24 = v9;
  v25 = *((_QWORD *)a1 + 4);
  v10 = type metadata accessor for AnimatablePair<AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>, AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>>();
  if (v10 == MEMORY[0x24BEE13C8])
  {
    *(_QWORD *)&v20[0] = v23;
    result = (*(_QWORD *(**)(_OWORD *__return_ptr, _OWORD *, uint64_t, _QWORD, _UNKNOWN **, double))(*(_QWORD *)a3 + 120))(v21, v20, a2, MEMORY[0x24BEE13C8], &protocol witness table for Double, a5);
    v15 = BYTE8(v21[0]);
    *(_QWORD *)a4 = *(_QWORD *)&v21[0];
    *(_BYTE *)(a4 + 8) = v15;
  }
  else
  {
    v11 = v10;
    if (v10 == type metadata accessor for AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>())
    {
      v20[0] = v23;
      v20[1] = v24;
      v16 = *(_QWORD *(**)(_OWORD *__return_ptr, _OWORD *, uint64_t, uint64_t, uint64_t, double))(*(_QWORD *)a3 + 120);
      v17 = lazy protocol witness table accessor for type AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>> and conformance AnimatablePair<A, B>();
      result = v16(v21, v20, a2, v11, v17, a5);
      v18 = v22;
      v19 = v21[1];
      *(_OWORD *)a4 = v21[0];
      *(_OWORD *)(a4 + 16) = v19;
      *(_BYTE *)(a4 + 32) = v18;
    }
    else
    {
      v12 = *(uint64_t (**)(__int128 *, uint64_t, uint64_t, uint64_t, double))(*(_QWORD *)a3 + 120);
      v13 = lazy protocol witness table accessor for type AnimatablePair<AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>, AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>> and conformance AnimatablePair<A, B>();
      return (_QWORD *)v12(&v23, a2, v11, v13, a5);
    }
  }
  return result;
}

{
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(__int128 *, uint64_t, uint64_t, unint64_t, double);
  unint64_t v13;
  _QWORD *result;
  char v15;
  _QWORD *(*v16)(_OWORD *__return_ptr, _OWORD *, uint64_t, uint64_t, uint64_t, double);
  uint64_t v17;
  char v18;
  __int128 v19;
  _OWORD v20[2];
  _OWORD v21[2];
  char v22;
  __int128 v23;
  _OWORD v24[2];

  v9 = a1[1];
  v23 = *a1;
  v24[0] = v9;
  *(_OWORD *)((char *)v24 + 9) = *(__int128 *)((char *)a1 + 25);
  v10 = type metadata accessor for AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>, CGFloat>(0, &lazy cache variable for type metadata for AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>, ResolvedGradientVector>, (void (*)(void))lazy protocol witness table accessor for type ResolvedGradientVector and conformance ResolvedGradientVector);
  if (v10 == MEMORY[0x24BEE13C8])
  {
    *(_QWORD *)&v20[0] = v23;
    result = (*(_QWORD *(**)(_OWORD *__return_ptr, _OWORD *, uint64_t, _QWORD, _UNKNOWN **, double))(*(_QWORD *)a3 + 120))(v21, v20, a2, MEMORY[0x24BEE13C8], &protocol witness table for Double, a5);
    v15 = BYTE8(v21[0]);
    *(_QWORD *)a4 = *(_QWORD *)&v21[0];
    *(_BYTE *)(a4 + 8) = v15;
  }
  else
  {
    v11 = v10;
    if (v10 == type metadata accessor for AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>())
    {
      v20[0] = v23;
      v20[1] = v24[0];
      v16 = *(_QWORD *(**)(_OWORD *__return_ptr, _OWORD *, uint64_t, uint64_t, uint64_t, double))(*(_QWORD *)a3 + 120);
      v17 = lazy protocol witness table accessor for type AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>> and conformance AnimatablePair<A, B>();
      result = v16(v21, v20, a2, v11, v17, a5);
      v18 = v22;
      v19 = v21[1];
      *(_OWORD *)a4 = v21[0];
      *(_OWORD *)(a4 + 16) = v19;
      *(_BYTE *)(a4 + 32) = v18;
    }
    else
    {
      v12 = *(uint64_t (**)(__int128 *, uint64_t, uint64_t, unint64_t, double))(*(_QWORD *)a3 + 120);
      v13 = lazy protocol witness table accessor for type AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>, ResolvedGradientVector> and conformance AnimatablePair<A, B>();
      return (_QWORD *)v12(&v23, a2, v11, v13, a5);
    }
  }
  return result;
}

{
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(__int128 *, uint64_t, uint64_t, uint64_t, double);
  uint64_t v13;
  _QWORD *result;
  char v15;
  _QWORD *(*v16)(_OWORD *__return_ptr, _OWORD *, uint64_t, uint64_t, uint64_t, double);
  uint64_t v17;
  char v18;
  __int128 v19;
  _OWORD v20[2];
  _OWORD v21[2];
  char v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;

  v9 = a1[1];
  v23 = *a1;
  v24 = v9;
  v25 = a1[2];
  v10 = type metadata accessor for AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, ResolvedGradientVector>, AnimatablePair<CGFloat, CGFloat>>();
  if (v10 == MEMORY[0x24BEE13C8])
  {
    *(_QWORD *)&v20[0] = v23;
    result = (*(_QWORD *(**)(_OWORD *__return_ptr, _OWORD *, uint64_t, _QWORD, _UNKNOWN **, double))(*(_QWORD *)a3 + 120))(v21, v20, a2, MEMORY[0x24BEE13C8], &protocol witness table for Double, a5);
    v15 = BYTE8(v21[0]);
    *(_QWORD *)a4 = *(_QWORD *)&v21[0];
    *(_BYTE *)(a4 + 8) = v15;
  }
  else
  {
    v11 = v10;
    if (v10 == type metadata accessor for AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>())
    {
      v20[0] = v23;
      v20[1] = v24;
      v16 = *(_QWORD *(**)(_OWORD *__return_ptr, _OWORD *, uint64_t, uint64_t, uint64_t, double))(*(_QWORD *)a3 + 120);
      v17 = lazy protocol witness table accessor for type AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>> and conformance AnimatablePair<A, B>();
      result = v16(v21, v20, a2, v11, v17, a5);
      v18 = v22;
      v19 = v21[1];
      *(_OWORD *)a4 = v21[0];
      *(_OWORD *)(a4 + 16) = v19;
      *(_BYTE *)(a4 + 32) = v18;
    }
    else
    {
      v12 = *(uint64_t (**)(__int128 *, uint64_t, uint64_t, uint64_t, double))(*(_QWORD *)a3 + 120);
      v13 = lazy protocol witness table accessor for type AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, ResolvedGradientVector>, AnimatablePair<CGFloat, CGFloat>> and conformance AnimatablePair<A, B>();
      return (_QWORD *)v12(&v23, a2, v11, v13, a5);
    }
  }
  return result;
}

{
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(__int128 *, uint64_t, uint64_t, uint64_t, double);
  uint64_t v13;
  _QWORD *result;
  char v15;
  _QWORD *(*v16)(_OWORD *__return_ptr, _OWORD *, uint64_t, uint64_t, uint64_t, double);
  uint64_t v17;
  char v18;
  __int128 v19;
  _OWORD v20[2];
  _OWORD v21[2];
  char v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;

  v9 = a1[1];
  v23 = *a1;
  v24 = v9;
  v25 = a1[2];
  v10 = type metadata accessor for AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, ResolvedGradientVector>, AnimatablePair<Double, Double>>();
  if (v10 == MEMORY[0x24BEE13C8])
  {
    *(_QWORD *)&v20[0] = v23;
    result = (*(_QWORD *(**)(_OWORD *__return_ptr, _OWORD *, uint64_t, _QWORD, _UNKNOWN **, double))(*(_QWORD *)a3 + 120))(v21, v20, a2, MEMORY[0x24BEE13C8], &protocol witness table for Double, a5);
    v15 = BYTE8(v21[0]);
    *(_QWORD *)a4 = *(_QWORD *)&v21[0];
    *(_BYTE *)(a4 + 8) = v15;
  }
  else
  {
    v11 = v10;
    if (v10 == type metadata accessor for AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>())
    {
      v20[0] = v23;
      v20[1] = v24;
      v16 = *(_QWORD *(**)(_OWORD *__return_ptr, _OWORD *, uint64_t, uint64_t, uint64_t, double))(*(_QWORD *)a3 + 120);
      v17 = lazy protocol witness table accessor for type AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>> and conformance AnimatablePair<A, B>();
      result = v16(v21, v20, a2, v11, v17, a5);
      v18 = v22;
      v19 = v21[1];
      *(_OWORD *)a4 = v21[0];
      *(_OWORD *)(a4 + 16) = v19;
      *(_BYTE *)(a4 + 32) = v18;
    }
    else
    {
      v12 = *(uint64_t (**)(__int128 *, uint64_t, uint64_t, uint64_t, double))(*(_QWORD *)a3 + 120);
      v13 = lazy protocol witness table accessor for type AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, ResolvedGradientVector>, AnimatablePair<Double, Double>> and conformance AnimatablePair<A, B>();
      return (_QWORD *)v12(&v23, a2, v11, v13, a5);
    }
  }
  return result;
}

{
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(__int128 *, uint64_t, uint64_t, uint64_t, double);
  uint64_t v15;
  _QWORD *result;
  char v17;
  _QWORD *(*v18)(_OWORD *__return_ptr, _OWORD *, uint64_t, uint64_t, uint64_t, double);
  uint64_t v19;
  char v20;
  __int128 v21;
  _OWORD v22[2];
  _OWORD v23[2];
  char v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;

  v9 = a1[5];
  v29 = a1[4];
  v30 = v9;
  v31 = *((_QWORD *)a1 + 12);
  v10 = a1[1];
  v25 = *a1;
  v26 = v10;
  v11 = a1[3];
  v27 = a1[2];
  v28 = v11;
  v12 = type metadata accessor for AnimatablePair<_ShapeStyle_Pack.Fill.AnimatableData, AnimatablePair<Float, AnimatableArray<AnimatablePair<Float, _ShapeStyle_Pack.Effect.Kind.AnimatableData>>>>();
  if (v12 == MEMORY[0x24BEE13C8])
  {
    *(_QWORD *)&v22[0] = v25;
    result = (*(_QWORD *(**)(_OWORD *__return_ptr, _OWORD *, uint64_t, _QWORD, _UNKNOWN **, double))(*(_QWORD *)a3 + 120))(v23, v22, a2, MEMORY[0x24BEE13C8], &protocol witness table for Double, a5);
    v17 = BYTE8(v23[0]);
    *(_QWORD *)a4 = *(_QWORD *)&v23[0];
    *(_BYTE *)(a4 + 8) = v17;
  }
  else
  {
    v13 = v12;
    if (v12 == type metadata accessor for AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>())
    {
      v22[0] = v25;
      v22[1] = v26;
      v18 = *(_QWORD *(**)(_OWORD *__return_ptr, _OWORD *, uint64_t, uint64_t, uint64_t, double))(*(_QWORD *)a3 + 120);
      v19 = lazy protocol witness table accessor for type AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>> and conformance AnimatablePair<A, B>();
      result = v18(v23, v22, a2, v13, v19, a5);
      v20 = v24;
      v21 = v23[1];
      *(_OWORD *)a4 = v23[0];
      *(_OWORD *)(a4 + 16) = v21;
      *(_BYTE *)(a4 + 32) = v20;
    }
    else
    {
      v14 = *(uint64_t (**)(__int128 *, uint64_t, uint64_t, uint64_t, double))(*(_QWORD *)a3 + 120);
      v15 = lazy protocol witness table accessor for type AnimatablePair<_ShapeStyle_Pack.Fill.AnimatableData, AnimatablePair<Float, AnimatableArray<AnimatablePair<Float, _ShapeStyle_Pack.Effect.Kind.AnimatableData>>>> and conformance AnimatablePair<A, B>();
      return (_QWORD *)v14(&v25, a2, v13, v15, a5);
    }
  }
  return result;
}

{
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(__int128 *, uint64_t, uint64_t, uint64_t, double);
  uint64_t v13;
  _QWORD *result;
  char v15;
  _QWORD *(*v16)(_OWORD *__return_ptr, _OWORD *, uint64_t, uint64_t, uint64_t, double);
  uint64_t v17;
  char v18;
  __int128 v19;
  _OWORD v20[2];
  _OWORD v21[2];
  char v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  char v26;

  v9 = a1[1];
  v23 = *a1;
  v24 = v9;
  v25 = a1[2];
  v26 = *((_BYTE *)a1 + 48);
  v10 = type metadata accessor for AnimatablePair<Float, _ShapeStyle_Pack.Effect.Kind.AnimatableData>();
  if (v10 == MEMORY[0x24BEE13C8])
  {
    *(_QWORD *)&v20[0] = v23;
    result = (*(_QWORD *(**)(_OWORD *__return_ptr, _OWORD *, uint64_t, _QWORD, _UNKNOWN **, double))(*(_QWORD *)a3 + 120))(v21, v20, a2, MEMORY[0x24BEE13C8], &protocol witness table for Double, a5);
    v15 = BYTE8(v21[0]);
    *(_QWORD *)a4 = *(_QWORD *)&v21[0];
    *(_BYTE *)(a4 + 8) = v15;
  }
  else
  {
    v11 = v10;
    if (v10 == type metadata accessor for AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>())
    {
      v20[0] = v23;
      v20[1] = v24;
      v16 = *(_QWORD *(**)(_OWORD *__return_ptr, _OWORD *, uint64_t, uint64_t, uint64_t, double))(*(_QWORD *)a3 + 120);
      v17 = lazy protocol witness table accessor for type AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>> and conformance AnimatablePair<A, B>();
      result = v16(v21, v20, a2, v11, v17, a5);
      v18 = v22;
      v19 = v21[1];
      *(_OWORD *)a4 = v21[0];
      *(_OWORD *)(a4 + 16) = v19;
      *(_BYTE *)(a4 + 32) = v18;
    }
    else
    {
      v12 = *(uint64_t (**)(__int128 *, uint64_t, uint64_t, uint64_t, double))(*(_QWORD *)a3 + 120);
      v13 = lazy protocol witness table accessor for type AnimatablePair<Float, _ShapeStyle_Pack.Effect.Kind.AnimatableData> and conformance AnimatablePair<A, B>();
      return (_QWORD *)v12(&v23, a2, v11, v13, a5);
    }
  }
  return result;
}

{
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *(*v12)(_QWORD *__return_ptr, __int128 *, uint64_t, uint64_t, unint64_t, double);
  unint64_t v13;
  _QWORD *result;
  uint64_t v15;
  __int128 v16;
  _QWORD *(*v17)(_QWORD *__return_ptr, _OWORD *, uint64_t, uint64_t, uint64_t, double);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  _OWORD v22[2];
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  _QWORD v26[2];
  __int128 v27;
  uint64_t v28;
  char v29;

  v9 = a1[1];
  v23 = *a1;
  v24 = v9;
  v25 = *((_QWORD *)a1 + 4);
  v10 = type metadata accessor for AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>, CGFloat>(0, &lazy cache variable for type metadata for AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>, CGFloat>, (void (*)(void))lazy protocol witness table accessor for type CGFloat and conformance CGFloat);
  if (v10 == MEMORY[0x24BEE13C8])
  {
    *(_QWORD *)&v22[0] = v23;
    result = (*(_QWORD *(**)(_QWORD *__return_ptr, _OWORD *, uint64_t, _QWORD, _UNKNOWN **, double))(*(_QWORD *)a3 + 120))(v26, v22, a2, MEMORY[0x24BEE13C8], &protocol witness table for Double, a5);
    v15 = v26[0];
  }
  else
  {
    v11 = v10;
    if (v10 == type metadata accessor for AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>())
    {
      v22[0] = v23;
      v22[1] = v24;
      v17 = *(_QWORD *(**)(_QWORD *__return_ptr, _OWORD *, uint64_t, uint64_t, uint64_t, double))(*(_QWORD *)a3 + 120);
      v18 = lazy protocol witness table accessor for type AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>> and conformance AnimatablePair<A, B>();
      result = v17(v26, v22, a2, v11, v18, a5);
    }
    else
    {
      v12 = *(_QWORD *(**)(_QWORD *__return_ptr, __int128 *, uint64_t, uint64_t, unint64_t, double))(*(_QWORD *)a3 + 120);
      v13 = lazy protocol witness table accessor for type AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>, CGFloat> and conformance AnimatablePair<A, B>();
      result = v12(v26, &v23, a2, v11, v13, a5);
    }
    v15 = v26[0];
    v16 = v27;
  }
  v19 = v26[1];
  v20 = v28;
  v21 = v29;
  *(_QWORD *)a4 = v15;
  *(_QWORD *)(a4 + 8) = v19;
  *(_OWORD *)(a4 + 16) = v16;
  *(_QWORD *)(a4 + 32) = v20;
  *(_BYTE *)(a4 + 40) = v21;
  return result;
}

_QWORD *specialized Animation.animate<A>(value:time:context:)@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>, double a6@<D0>)
{
  uint64_t (*v11)(uint64_t *, uint64_t, ValueMetadata *, unint64_t, double);
  unint64_t v12;
  _QWORD *result;
  _QWORD *(*v14)(_OWORD *__return_ptr, _QWORD *, uint64_t, ValueMetadata *, uint64_t, double);
  uint64_t v15;
  char v16;
  __int128 v17;
  _QWORD v18[4];
  _OWORD v19[2];
  char v20;
  uint64_t v21;
  uint64_t v22;

  v21 = a1;
  LOBYTE(v22) = a2;
  if ((ValueMetadata *)type metadata accessor for AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>() == &type metadata for ResolvedGradientVector)
  {
    v18[0] = a1;
    v18[1] = v22;
    v14 = *(_QWORD *(**)(_OWORD *__return_ptr, _QWORD *, uint64_t, ValueMetadata *, uint64_t, double))(*(_QWORD *)a4 + 120);
    v15 = lazy protocol witness table accessor for type AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>> and conformance AnimatablePair<A, B>();
    result = v14(v19, v18, a3, &type metadata for ResolvedGradientVector, v15, a6);
    v16 = v20;
    v17 = v19[1];
    *(_OWORD *)a5 = v19[0];
    *(_OWORD *)(a5 + 16) = v17;
    *(_BYTE *)(a5 + 32) = v16;
  }
  else
  {
    v11 = *(uint64_t (**)(uint64_t *, uint64_t, ValueMetadata *, unint64_t, double))(*(_QWORD *)a4 + 120);
    v12 = lazy protocol witness table accessor for type ResolvedGradientVector and conformance ResolvedGradientVector();
    return (_QWORD *)v11(&v21, a3, &type metadata for ResolvedGradientVector, v12, a6);
  }
  return result;
}

_QWORD *specialized Animation.animate<A>(value:time:context:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>, double a5@<D0>)
{
  uint64_t (*v9)(_OWORD *, uint64_t, ValueMetadata *, unint64_t, double);
  unint64_t v10;
  _QWORD *result;
  _QWORD *(*v12)(_OWORD *__return_ptr, _OWORD *, uint64_t, ValueMetadata *, uint64_t, double);
  uint64_t v13;
  char v14;
  __int128 v15;
  _OWORD v16[2];
  _OWORD v17[2];
  char v18;
  _OWORD v19[6];

  outlined init with take of _ShapeStyle_Pack.Fill.AnimatableData(a1, (uint64_t)v19);
  if ((ValueMetadata *)type metadata accessor for AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>() == &type metadata for _ShapeStyle_Pack.Fill.AnimatableData)
  {
    v16[0] = v19[0];
    v16[1] = v19[1];
    v12 = *(_QWORD *(**)(_OWORD *__return_ptr, _OWORD *, uint64_t, ValueMetadata *, uint64_t, double))(*(_QWORD *)a3 + 120);
    v13 = lazy protocol witness table accessor for type AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>> and conformance AnimatablePair<A, B>();
    result = v12(v17, v16, a2, &type metadata for _ShapeStyle_Pack.Fill.AnimatableData, v13, a5);
    v14 = v18;
    v15 = v17[1];
    *(_OWORD *)a4 = v17[0];
    *(_OWORD *)(a4 + 16) = v15;
    *(_BYTE *)(a4 + 32) = v14;
  }
  else
  {
    v9 = *(uint64_t (**)(_OWORD *, uint64_t, ValueMetadata *, unint64_t, double))(*(_QWORD *)a3 + 120);
    v10 = lazy protocol witness table accessor for type _ShapeStyle_Pack.Fill.AnimatableData and conformance _ShapeStyle_Pack.Fill.AnimatableData();
    return (_QWORD *)v9(v19, a2, &type metadata for _ShapeStyle_Pack.Fill.AnimatableData, v10, a5);
  }
  return result;
}

{
  uint64_t (*v9)(_OWORD *, uint64_t, ValueMetadata *, unint64_t, double);
  unint64_t v10;
  _QWORD *result;
  _QWORD *(*v12)(_OWORD *__return_ptr, _OWORD *, uint64_t, ValueMetadata *, uint64_t, double);
  uint64_t v13;
  char v14;
  __int128 v15;
  _OWORD v16[2];
  _OWORD v17[2];
  char v18;
  _OWORD v19[3];

  outlined init with take of _ShapeStyle_Pack.Effect.Kind.AnimatableData(a1, (uint64_t)v19);
  if ((ValueMetadata *)type metadata accessor for AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>() == &type metadata for _ShapeStyle_Pack.Effect.Kind.AnimatableData)
  {
    v16[0] = v19[0];
    v16[1] = v19[1];
    v12 = *(_QWORD *(**)(_OWORD *__return_ptr, _OWORD *, uint64_t, ValueMetadata *, uint64_t, double))(*(_QWORD *)a3 + 120);
    v13 = lazy protocol witness table accessor for type AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>> and conformance AnimatablePair<A, B>();
    result = v12(v17, v16, a2, &type metadata for _ShapeStyle_Pack.Effect.Kind.AnimatableData, v13, a5);
    v14 = v18;
    v15 = v17[1];
    *(_OWORD *)a4 = v17[0];
    *(_OWORD *)(a4 + 16) = v15;
    *(_BYTE *)(a4 + 32) = v14;
  }
  else
  {
    v9 = *(uint64_t (**)(_OWORD *, uint64_t, ValueMetadata *, unint64_t, double))(*(_QWORD *)a3 + 120);
    v10 = lazy protocol witness table accessor for type _ShapeStyle_Pack.Effect.Kind.AnimatableData and conformance _ShapeStyle_Pack.Effect.Kind.AnimatableData();
    return (_QWORD *)v9(v19, a2, &type metadata for _ShapeStyle_Pack.Effect.Kind.AnimatableData, v10, a5);
  }
  return result;
}

uint64_t specialized Animation.animate<A>(value:time:context:)(__int128 *a1, uint64_t a2, uint64_t a3, double a4)
{
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t *__return_ptr, __int128 *, uint64_t, uint64_t, uint64_t, double);
  uint64_t v10;
  void (*v12)(uint64_t *__return_ptr, __int128 *, uint64_t, uint64_t, uint64_t, double);
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;

  v17 = *a1;
  v18 = *((_QWORD *)a1 + 2);
  v7 = type metadata accessor for AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>>(0);
  if (v7 == MEMORY[0x24BEE13C8])
  {
    *(_QWORD *)&v14 = v17;
    (*(void (**)(uint64_t *__return_ptr, __int128 *, uint64_t, _QWORD, _UNKNOWN **, double))(*(_QWORD *)a3 + 120))(&v16, &v14, a2, MEMORY[0x24BEE13C8], &protocol witness table for Double, a4);
    return v16;
  }
  else
  {
    v8 = v7;
    if (v7 == type metadata accessor for AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>())
    {
      v14 = v17;
      v15 = v18;
      v12 = *(void (**)(uint64_t *__return_ptr, __int128 *, uint64_t, uint64_t, uint64_t, double))(*(_QWORD *)a3 + 120);
      v13 = lazy protocol witness table accessor for type AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>> and conformance AnimatablePair<A, B>();
      v12(&v16, &v14, a2, v8, v13, a4);
    }
    else
    {
      v9 = *(void (**)(uint64_t *__return_ptr, __int128 *, uint64_t, uint64_t, uint64_t, double))(*(_QWORD *)a3 + 120);
      v10 = lazy protocol witness table accessor for type AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>> and conformance AnimatablePair<A, B>();
      v9(&v16, &v17, a2, v8, v10, a4);
    }
    return v16;
  }
}

_QWORD *specialized Animation.animate<A>(value:time:context:)@<X0>(_OWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>, double a5@<D0>)
{
  uint64_t (*v10)(_OWORD *, uint64_t, ValueMetadata *, unint64_t, double);
  unint64_t v11;
  _QWORD *result;
  __int128 v13;
  _QWORD *(*v14)(_OWORD *__return_ptr, _OWORD *, uint64_t, ValueMetadata *, uint64_t, double);
  uint64_t v15;
  char v16;
  __int128 v17;
  _OWORD v18[2];
  _OWORD v19[2];
  char v20;

  if ((ValueMetadata *)type metadata accessor for AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>() == &type metadata for _AnyAnimatableData)
  {
    v13 = a1[1];
    v18[0] = *a1;
    v18[1] = v13;
    v14 = *(_QWORD *(**)(_OWORD *__return_ptr, _OWORD *, uint64_t, ValueMetadata *, uint64_t, double))(*(_QWORD *)a3 + 120);
    v15 = lazy protocol witness table accessor for type AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>> and conformance AnimatablePair<A, B>();
    result = v14(v19, v18, a2, &type metadata for _AnyAnimatableData, v15, a5);
    v16 = v20;
    v17 = v19[1];
    *(_OWORD *)a4 = v19[0];
    *(_OWORD *)(a4 + 16) = v17;
    *(_BYTE *)(a4 + 32) = v16;
  }
  else
  {
    v10 = *(uint64_t (**)(_OWORD *, uint64_t, ValueMetadata *, unint64_t, double))(*(_QWORD *)a3 + 120);
    v11 = lazy protocol witness table accessor for type _AnyAnimatableData and conformance _AnyAnimatableData();
    return (_QWORD *)v10(a1, a2, &type metadata for _AnyAnimatableData, v11, a5);
  }
  return result;
}

uint64_t AnimatorState.__allocating_init(animation:interval:at:in:)(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6;

  v6 = swift_allocObject();
  AnimatorState.init(animation:interval:at:in:)(a1, a2, a3);
  return v6;
}

uint64_t specialized AnimatorState.update(_:at:environment:)(uint64_t a1, double a2)
{
  uint64_t v2;
  uint64_t v5[3];
  uint64_t v6[3];

  if (*(double *)(v2 + 56) + *(double *)(v2 + 48) * -0.5 < a2)
    __asm { BR              X10 }
  swift_beginAccess();
  v6[0] = *(_QWORD *)(v2 + 64);
  specialized static _ShapeStyle_Pack.AnimatableData.+= infix(_:_:)(a1, v6);
  swift_beginAccess();
  v5[0] = *(_QWORD *)(v2 + 32);
  specialized static _ShapeStyle_Pack.AnimatableData.-= infix(_:_:)(a1, v5);
  return 0;
}

{
  uint64_t v2;
  uint64_t v5[3];
  uint64_t v6[3];

  if (*(double *)(v2 + 56) + *(double *)(v2 + 48) * -0.5 < a2)
    __asm { BR              X10 }
  swift_beginAccess();
  v6[0] = *(_QWORD *)(v2 + 64);
  specialized static ShaderVectorData.+= infix(_:_:)(a1, v6);
  swift_beginAccess();
  v5[0] = *(_QWORD *)(v2 + 32);
  specialized static ShaderVectorData.-= infix(_:_:)(a1, v5);
  return 0;
}

{
  uint64_t v2;
  double v4;
  uint64_t result;
  double v6;
  float64x2_t v7;
  float32x4_t v8;
  float64x2_t v9;

  if (*(double *)(v2 + 88) + *(double *)(v2 + 80) * -0.5 < a2)
    __asm { BR              X10 }
  swift_beginAccess();
  v4 = *(double *)(v2 + 128) + *(double *)(a1 + 32);
  v8 = vaddq_f32(*(float32x4_t *)(v2 + 96), *(float32x4_t *)a1);
  v9 = vaddq_f64(*(float64x2_t *)(v2 + 112), *(float64x2_t *)(a1 + 16));
  swift_beginAccess();
  result = 0;
  v6 = *(double *)(v2 + 64);
  v7 = vsubq_f64(v9, *(float64x2_t *)(v2 + 48));
  *(float32x4_t *)a1 = vsubq_f32(v8, *(float32x4_t *)(v2 + 32));
  *(float64x2_t *)(a1 + 16) = v7;
  *(double *)(a1 + 32) = v4 - v6;
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  float v15;
  uint64_t v16;
  float v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  float v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int8x16_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  float v49;
  uint64_t v50;

  v3 = v2;
  if (*(double *)(v2 + 152) + *(double *)(v2 + 144) * -0.5 < a2)
    __asm { BR              X10 }
  swift_beginAccess();
  v5 = *(_QWORD *)(v2 + 160);
  v4 = *(_QWORD *)(v2 + 168);
  v6 = *(_QWORD *)(v2 + 176);
  v7 = *(_QWORD *)(v2 + 184);
  v8 = *(_QWORD *)(v2 + 192);
  v9 = *(_QWORD *)(v2 + 200);
  v11 = *(_QWORD *)(v2 + 208);
  v10 = *(_QWORD *)(v2 + 216);
  v12 = *(_QWORD *)(v2 + 224);
  v13 = *(_QWORD *)(v2 + 232);
  v14 = *(_BYTE *)(v2 + 240);
  v15 = *(float *)(v2 + 248);
  v16 = *(_QWORD *)(v2 + 256);
  v39.i64[0] = v5;
  v39.i64[1] = v4;
  v31 = v6;
  v32 = v5;
  v34 = v10;
  v36 = v4;
  v40 = v6;
  v41 = v7;
  v42 = v8;
  v43 = v9;
  v44 = v11;
  v45 = v10;
  v46 = v12;
  v47 = v13;
  v48 = v14;
  v49 = v15;
  v50 = v16;
  outlined copy of _ShapeStyle_Pack.Fill.AnimatableData(v5, v4, v6, v7, v8, v9, v11, v10, v12, v13, v14);
  swift_bridgeObjectRetain();
  specialized static _ShapeStyle_Pack.Fill.AnimatableData.+= infix(_:_:)((__int128 *)a1, &v39);
  v17 = v15 + *(float *)(a1 + 88);
  specialized static AnimatableArray.+= infix(_:_:)(a1 + 96, v16);
  outlined consume of _ShapeStyle_Pack.Fill.AnimatableData(v32, v36, v31, v7, v8, v9, v11, v34, v12, v13, v14);
  swift_bridgeObjectRelease();
  swift_beginAccess();
  v19 = *(_QWORD *)(v3 + 32);
  v18 = *(_QWORD *)(v3 + 40);
  v20 = *(_QWORD *)(v3 + 48);
  v21 = *(_QWORD *)(v3 + 56);
  v22 = *(_QWORD *)(v3 + 64);
  v23 = *(_QWORD *)(v3 + 72);
  v24 = *(_QWORD *)(v3 + 80);
  v25 = *(_QWORD *)(v3 + 88);
  v27 = *(_QWORD *)(v3 + 96);
  v26 = *(_QWORD *)(v3 + 104);
  LOBYTE(v12) = *(_BYTE *)(v3 + 112);
  v28 = *(float *)(v3 + 120);
  v29 = *(_QWORD *)(v3 + 128);
  v39.i64[0] = v19;
  v39.i64[1] = v18;
  v33 = v19;
  v35 = v20;
  v37 = v18;
  v40 = v20;
  v41 = v21;
  v42 = v22;
  v43 = v23;
  v44 = v24;
  v45 = v25;
  v46 = v27;
  v47 = v26;
  v48 = v12;
  v49 = v28;
  v50 = v29;
  outlined copy of _ShapeStyle_Pack.Fill.AnimatableData(v19, v18, v20, v21, v22, v23, v24, v25, v27, v26, v12);
  swift_bridgeObjectRetain();
  specialized static _ShapeStyle_Pack.Fill.AnimatableData.-= infix(_:_:)((__int128 *)a1, &v39);
  *(float *)(a1 + 88) = v17 - v28;
  specialized static AnimatableArray.-= infix(_:_:)(a1 + 96, v29);
  outlined consume of _ShapeStyle_Pack.Fill.AnimatableData(v33, v37, v35, v21, v22, v23, v24, v25, v27, v26, v12);
  swift_bridgeObjectRelease();
  return 0;
}

{
  uint64_t v2;
  uint64_t v3;
  char v5;
  int64x2_t v6;
  double v7;
  double v8;
  double v9;
  char v10;
  double v11;
  double v12;
  double v13;
  int64x2_t v14;
  float32x2_t v15;
  int8x16_t v16;
  uint64_t v17;
  uint64_t v18;
  double v19;
  double v20;
  uint64_t v21;
  uint64_t result;
  double v23;
  int64x2_t v24;

  v3 = v2;
  if (*(double *)(v2 + 96) + *(double *)(v2 + 88) * -0.5 < a2)
    __asm { BR              X10 }
  swift_beginAccess();
  v5 = *(_BYTE *)(v2 + 144);
  v6 = *(int64x2_t *)a1;
  v7 = *(double *)(a1 + 16);
  v8 = *(double *)(a1 + 24);
  v9 = *(double *)(a1 + 32);
  v10 = *(_BYTE *)(a1 + 40);
  if ((v5 & 1) != 0)
  {
    v24 = *(int64x2_t *)a1;
  }
  else
  {
    v11 = *(double *)(v3 + 120);
    v12 = *(double *)(v3 + 128);
    v13 = *(double *)(v3 + 136);
    v14 = *(int64x2_t *)(v3 + 104);
    if ((*(_BYTE *)(a1 + 40) & 1) != 0)
    {
      *(int64x2_t *)a1 = v14;
    }
    else
    {
      v11 = v11 + v7;
      v12 = v12 + v8;
      v15 = vadd_f32((float32x2_t)vmovn_s64(v14), (float32x2_t)vmovn_s64(v6));
      v16.i64[0] = v15.u32[0];
      v16.i64[1] = v15.u32[1];
      v14 = (int64x2_t)vorrq_s8((int8x16_t)vshll_n_s32((int32x2_t)vadd_f32((float32x2_t)vshrn_n_s64(v14, 0x20uLL), (float32x2_t)vshrn_n_s64(v6, 0x20uLL)), 0x20uLL), v16);
      *(int64x2_t *)a1 = v14;
      v13 = v13 + v9;
    }
    *(double *)(a1 + 16) = v11;
    *(double *)(a1 + 24) = v12;
    v10 = 0;
    *(double *)(a1 + 32) = v13;
    *(_BYTE *)(a1 + 40) = 0;
    v7 = v11;
    v8 = v12;
    v9 = v13;
    v24 = v14;
  }
  swift_beginAccess();
  if ((*(_BYTE *)(v3 + 72) & 1) != 0)
    return 0;
  v18 = *(_QWORD *)(v3 + 32);
  v17 = *(_QWORD *)(v3 + 40);
  v20 = *(double *)(v3 + 48);
  v19 = *(double *)(v3 + 56);
  v21 = *(_QWORD *)(v3 + 64);
  result = 0;
  if ((v10 & 1) != 0)
  {
    *(_QWORD *)a1 = v18;
    *(_QWORD *)(a1 + 8) = v17;
    *(double *)(a1 + 16) = v20;
    *(double *)(a1 + 24) = v19;
    *(_QWORD *)(a1 + 32) = v21;
  }
  else
  {
    v23 = *(double *)(v3 + 64);
    *(_QWORD *)a1 = COERCE_UNSIGNED_INT(*(float *)v24.i32 - *(float *)&v18) | ((unint64_t)COERCE_UNSIGNED_INT(*(float *)&v24.i32[1]- *((float *)&v18 + 1)) << 32);
    *(_QWORD *)(a1 + 8) = COERCE_UNSIGNED_INT(*(float *)&v24.i32[2] - *(float *)&v17) | ((unint64_t)COERCE_UNSIGNED_INT(*(float *)&v24.i32[3] - *((float *)&v17 + 1)) << 32);
    *(double *)(a1 + 16) = v7 - v20;
    *(double *)(a1 + 24) = v8 - v19;
    *(double *)(a1 + 32) = v9 - v23;
  }
  *(_BYTE *)(a1 + 40) = 0;
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  float v5;
  char v6;
  float v7;
  int64x2_t v8;
  double v9;
  double v10;
  double v11;
  char v12;
  double v13;
  double v14;
  double v15;
  int64x2_t v16;
  float32x2_t v17;
  int8x16_t v18;
  float v19;
  uint64_t v20;
  uint64_t v21;
  double v22;
  double v23;
  double v24;
  char v25;
  uint64_t result;
  int64x2_t v27;

  v3 = v2;
  if (*(double *)(v2 + 104) + *(double *)(v2 + 96) * -0.5 < a2)
    __asm { BR              X10 }
  swift_beginAccess();
  v5 = *(float *)(v2 + 112);
  v6 = *(_BYTE *)(v2 + 160);
  v7 = *(float *)a1;
  v8 = *(int64x2_t *)(a1 + 8);
  v9 = *(double *)(a1 + 24);
  v10 = *(double *)(a1 + 32);
  v11 = *(double *)(a1 + 40);
  v12 = *(_BYTE *)(a1 + 48);
  if ((v6 & 1) != 0)
  {
    v27 = *(int64x2_t *)(a1 + 8);
  }
  else
  {
    v13 = *(double *)(v3 + 136);
    v14 = *(double *)(v3 + 144);
    v15 = *(double *)(v3 + 152);
    v16 = *(int64x2_t *)(v3 + 120);
    if ((*(_BYTE *)(a1 + 48) & 1) != 0)
    {
      *(int64x2_t *)(a1 + 8) = v16;
    }
    else
    {
      v13 = v13 + v9;
      v14 = v14 + v10;
      v17 = vadd_f32((float32x2_t)vmovn_s64(v16), (float32x2_t)vmovn_s64(v8));
      v18.i64[0] = v17.u32[0];
      v18.i64[1] = v17.u32[1];
      v16 = (int64x2_t)vorrq_s8((int8x16_t)vshll_n_s32((int32x2_t)vadd_f32((float32x2_t)vshrn_n_s64(v16, 0x20uLL), (float32x2_t)vshrn_n_s64(v8, 0x20uLL)), 0x20uLL), v18);
      *(int64x2_t *)(a1 + 8) = v16;
      v15 = v15 + v11;
    }
    *(double *)(a1 + 24) = v13;
    *(double *)(a1 + 32) = v14;
    v12 = 0;
    *(double *)(a1 + 40) = v15;
    *(_BYTE *)(a1 + 48) = 0;
    v9 = v13;
    v10 = v14;
    v11 = v15;
    v27 = v16;
  }
  v19 = v5 + v7;
  swift_beginAccess();
  v21 = *(_QWORD *)(v3 + 40);
  v20 = *(_QWORD *)(v3 + 48);
  v23 = *(double *)(v3 + 56);
  v22 = *(double *)(v3 + 64);
  v24 = *(double *)(v3 + 72);
  v25 = *(_BYTE *)(v3 + 80);
  *(float *)a1 = v19 - *(float *)(v3 + 32);
  if ((v25 & 1) != 0)
    return 0;
  result = 0;
  if ((v12 & 1) != 0)
  {
    *(_QWORD *)(a1 + 8) = v21;
    *(_QWORD *)(a1 + 16) = v20;
    *(double *)(a1 + 24) = v23;
    *(double *)(a1 + 32) = v22;
    *(double *)(a1 + 40) = v24;
  }
  else
  {
    *(_QWORD *)(a1 + 8) = COERCE_UNSIGNED_INT(*(float *)v27.i32 - *(float *)&v21) | ((unint64_t)COERCE_UNSIGNED_INT(*(float *)&v27.i32[1] - *((float *)&v21 + 1)) << 32);
    *(_QWORD *)(a1 + 16) = COERCE_UNSIGNED_INT(*(float *)&v27.i32[2] - *(float *)&v20) | ((unint64_t)COERCE_UNSIGNED_INT(*(float *)&v27.i32[3] - *((float *)&v20 + 1)) << 32);
    *(double *)(a1 + 24) = v9 - v23;
    *(double *)(a1 + 32) = v10 - v22;
    *(double *)(a1 + 40) = v11 - v24;
  }
  *(_BYTE *)(a1 + 48) = 0;
  return result;
}

{
  uint64_t v2;
  float32x2_t v4;
  uint64_t result;
  float32x2_t v6;
  float32x4_t v7;

  if (*(double *)(v2 + 72) + *(double *)(v2 + 64) * -0.5 < a2)
    __asm { BR              X10 }
  swift_beginAccess();
  v7 = vaddq_f32(*(float32x4_t *)(v2 + 80), *(float32x4_t *)a1);
  v4 = vadd_f32(*(float32x2_t *)(v2 + 96), *(float32x2_t *)(a1 + 16));
  swift_beginAccess();
  result = 0;
  v6 = *(float32x2_t *)(v2 + 48);
  *(float32x4_t *)a1 = vsubq_f32(v7, *(float32x4_t *)(v2 + 32));
  *(float32x2_t *)(a1 + 16) = vsub_f32(v4, v6);
  return result;
}

void sub_234FD0BDC(double a1)
{
  uint64_t v1;
  double v2;
  double v3;
  uint64_t (*v4)(void);
  void *v5;

  if (a1 < 0.0166666667)
    v3 = 0.0333333333;
  else
    v3 = a1 + a1;
  if (v3 < v2 - *(double *)(v1 + 40))
  {
    if (one-time initialization token for shared != -1)
      swift_once();
    swift_beginAccess();
    v4 = *(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *(_QWORD *)static CoreGlue.shared) + 0x60);
    v5 = static CoreGlue.shared;
    LOBYTE(v4) = v4();

    if ((v4 & 1) == 0)
      *(double *)(v1 + 40) = v2 - v3;
  }
  JUMPOUT(0x234FD0C7CLL);
}

uint64_t specialized AnimatorState.update(_:at:environment:)(float32x4_t *a1, double a2)
{
  uint64_t v2;
  uint64_t result;
  float32x4_t v5;

  if (*(double *)(v2 + 64) + *(double *)(v2 + 56) * -0.5 < a2)
    __asm { BR              X10 }
  swift_beginAccess();
  v5 = vaddq_f32(*(float32x4_t *)(v2 + 72), *a1);
  swift_beginAccess();
  result = 0;
  *a1 = vsubq_f32(v5, *(float32x4_t *)(v2 + 32));
  return result;
}

uint64_t specialized AnimatorState.update(_:at:environment:)(double *a1, double a2)
{
  double *v2;
  double v4;
  uint64_t result;

  if (v2[7] + v2[6] * -0.5 < a2)
    __asm { BR              X10 }
  swift_beginAccess();
  v4 = v2[8] + *a1;
  swift_beginAccess();
  result = 0;
  *a1 = v4 - v2[4];
  return result;
}

{
  double *v2;
  double v4;
  uint64_t result;

  if (v2[7] + v2[6] * -0.5 < a2)
    __asm { BR              X10 }
  swift_beginAccess();
  v4 = v2[8] + *a1;
  swift_beginAccess();
  result = 0;
  *a1 = v4 - v2[4];
  return result;
}

void sub_234FD1748(double a1)
{
  uint64_t v1;
  double v2;
  double v3;
  uint64_t (*v4)(void);
  void *v5;

  if (a1 < 0.0166666667)
    v3 = 0.0333333333;
  else
    v3 = a1 + a1;
  if (v3 < v2 - *(double *)(v1 + 40))
  {
    if (one-time initialization token for shared != -1)
      swift_once();
    swift_beginAccess();
    v4 = *(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *(_QWORD *)static CoreGlue.shared) + 0x60);
    v5 = static CoreGlue.shared;
    LOBYTE(v4) = v4();

    if ((v4 & 1) == 0)
      *(double *)(v1 + 40) = v2 - v3;
  }
  JUMPOUT(0x234FD17E8);
}

uint64_t specialized AnimatorState.update(_:at:environment:)(float64x2_t *a1, double a2)
{
  uint64_t v2;
  uint64_t result;
  float64x2_t v5;
  float64x2_t v6;
  float64x2_t v7;
  float64x2_t v8;
  float64x2_t v9;
  float64x2_t v10;
  float64x2_t v11;

  if (*(double *)(v2 + 112) + *(double *)(v2 + 104) * -0.5 < a2)
    __asm { BR              X10 }
  swift_beginAccess();
  v10 = vaddq_f64(*(float64x2_t *)(v2 + 120), *a1);
  v11 = vaddq_f64(*(float64x2_t *)(v2 + 136), a1[1]);
  v8 = vaddq_f64(*(float64x2_t *)(v2 + 152), a1[2]);
  v9 = vaddq_f64(*(float64x2_t *)(v2 + 168), a1[3]);
  swift_beginAccess();
  result = 0;
  v5 = *(float64x2_t *)(v2 + 64);
  v6 = *(float64x2_t *)(v2 + 80);
  v7 = vsubq_f64(v11, *(float64x2_t *)(v2 + 48));
  *a1 = vsubq_f64(v10, *(float64x2_t *)(v2 + 32));
  a1[1] = v7;
  a1[2] = vsubq_f64(v8, v5);
  a1[3] = vsubq_f64(v9, v6);
  return result;
}

{
  uint64_t v2;
  uint64_t result;
  float64x2_t v5;
  float64x2_t v6;
  float64x2_t v7;

  if (*(double *)(v2 + 80) + *(double *)(v2 + 72) * -0.5 < a2)
    __asm { BR              X10 }
  swift_beginAccess();
  v6 = vaddq_f64(*(float64x2_t *)(v2 + 88), *a1);
  v7 = vaddq_f64(*(float64x2_t *)(v2 + 104), a1[1]);
  swift_beginAccess();
  result = 0;
  v5 = vsubq_f64(v7, *(float64x2_t *)(v2 + 48));
  *a1 = vsubq_f64(v6, *(float64x2_t *)(v2 + 32));
  a1[1] = v5;
  return result;
}

{
  uint64_t v2;
  uint64_t result;
  float64x2_t v5;
  float64x2_t v6;
  float64x2_t v7;

  if (*(double *)(v2 + 80) + *(double *)(v2 + 72) * -0.5 < a2)
    __asm { BR              X10 }
  swift_beginAccess();
  v6 = vaddq_f64(*(float64x2_t *)(v2 + 88), *a1);
  v7 = vaddq_f64(*(float64x2_t *)(v2 + 104), a1[1]);
  swift_beginAccess();
  result = 0;
  v5 = vsubq_f64(v7, *(float64x2_t *)(v2 + 48));
  *a1 = vsubq_f64(v6, *(float64x2_t *)(v2 + 32));
  a1[1] = v5;
  return result;
}

{
  uint64_t v2;
  uint64_t result;
  float64x2_t v5;

  if (*(double *)(v2 + 64) + *(double *)(v2 + 56) * -0.5 < a2)
    __asm { BR              X10 }
  swift_beginAccess();
  v5 = vaddq_f64(*(float64x2_t *)(v2 + 72), *a1);
  swift_beginAccess();
  result = 0;
  *a1 = vsubq_f64(v5, *(float64x2_t *)(v2 + 32));
  return result;
}

{
  uint64_t v2;
  char v4;
  uint64_t v5;
  char v6;
  float64x2_t v7;
  float64x2_t v9;
  float64x2_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;

  if (*(double *)(v2 + 96) + *(double *)(v2 + 88) * -0.5 < a2)
    __asm { BR              X10 }
  swift_beginAccess();
  v4 = *(_BYTE *)(v2 + 144);
  v11 = *(_QWORD *)(v2 + 136);
  LOBYTE(v12) = v4;
  v9 = vaddq_f64(*(float64x2_t *)(v2 + 104), *a1);
  v10 = vaddq_f64(*(float64x2_t *)(v2 + 120), a1[1]);
  ResolvedGradientVector.add(_:scaledBy:)((uint64_t)&v11, 1.0);
  swift_beginAccess();
  v5 = *(_QWORD *)(v2 + 64);
  v6 = *(_BYTE *)(v2 + 72);
  v7 = vsubq_f64(v10, *(float64x2_t *)(v2 + 48));
  *a1 = vsubq_f64(v9, *(float64x2_t *)(v2 + 32));
  a1[1] = v7;
  v13 = v5;
  v14 = v6;
  ResolvedGradientVector.add(_:scaledBy:)((uint64_t)&v13, -1.0);
  return 0;
}

{
  uint64_t v2;
  char v4;
  double v5;
  double v6;
  double v7;
  double v8;
  uint64_t v9;
  char v10;
  double v11;
  double v12;
  uint64_t result;
  float64x2_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;

  if (*(double *)(v2 + 96) + *(double *)(v2 + 88) * -0.5 < a2)
    __asm { BR              X10 }
  swift_beginAccess();
  v4 = *(_BYTE *)(v2 + 128);
  v5 = *(double *)(v2 + 136);
  v6 = *(double *)(v2 + 144);
  v15 = *(_QWORD *)(v2 + 120);
  LOBYTE(v16) = v4;
  v14 = vaddq_f64(*(float64x2_t *)(v2 + 104), *a1);
  ResolvedGradientVector.add(_:scaledBy:)((uint64_t)&v15, 1.0);
  v7 = v5 + a1[2].f64[0];
  v8 = v6 + a1[2].f64[1];
  swift_beginAccess();
  v9 = *(_QWORD *)(v2 + 48);
  v10 = *(_BYTE *)(v2 + 56);
  v11 = *(double *)(v2 + 64);
  v12 = *(double *)(v2 + 72);
  *a1 = vsubq_f64(v14, *(float64x2_t *)(v2 + 32));
  v17 = v9;
  v18 = v10;
  ResolvedGradientVector.add(_:scaledBy:)((uint64_t)&v17, -1.0);
  result = 0;
  a1[2].f64[0] = v7 - v11;
  a1[2].f64[1] = v8 - v12;
  return result;
}

{
  uint64_t v2;
  char v4;
  double v5;
  double v6;
  double v7;
  double v8;
  uint64_t v9;
  char v10;
  double v11;
  double v12;
  uint64_t result;
  float64x2_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;

  if (*(double *)(v2 + 96) + *(double *)(v2 + 88) * -0.5 < a2)
    __asm { BR              X10 }
  swift_beginAccess();
  v4 = *(_BYTE *)(v2 + 128);
  v5 = *(double *)(v2 + 136);
  v6 = *(double *)(v2 + 144);
  v15 = *(_QWORD *)(v2 + 120);
  LOBYTE(v16) = v4;
  v14 = vaddq_f64(*(float64x2_t *)(v2 + 104), *a1);
  ResolvedGradientVector.add(_:scaledBy:)((uint64_t)&v15, 1.0);
  v7 = v5 + a1[2].f64[0];
  v8 = v6 + a1[2].f64[1];
  swift_beginAccess();
  v9 = *(_QWORD *)(v2 + 48);
  v10 = *(_BYTE *)(v2 + 56);
  v11 = *(double *)(v2 + 64);
  v12 = *(double *)(v2 + 72);
  *a1 = vsubq_f64(v14, *(float64x2_t *)(v2 + 32));
  v17 = v9;
  v18 = v10;
  ResolvedGradientVector.add(_:scaledBy:)((uint64_t)&v17, -1.0);
  result = 0;
  a1[2].f64[0] = v7 - v11;
  a1[2].f64[1] = v8 - v12;
  return result;
}

uint64_t specialized AnimatorState.update(_:at:environment:)(float64x2_t *a1, float64_t a2)
{
  float64x2_t *v2;
  float64_t v4;
  uint64_t result;
  double v6;
  float64x2_t v7;

  if (v2[4].f64[1] + v2[4].f64[0] * -0.5 < a2)
    __asm { BR              X10 }
  swift_beginAccess();
  v4 = v2[6].f64[0] + a1[1].f64[0];
  v7 = vaddq_f64(v2[5], *a1);
  swift_beginAccess();
  result = 0;
  v6 = v2[3].f64[0];
  *a1 = vsubq_f64(v7, v2[2]);
  a1[1].f64[0] = v4 - v6;
  return result;
}

{
  float64x2_t *v2;
  float64_t v4;
  uint64_t result;
  double v6;
  float64x2_t v7;

  if (v2[4].f64[1] + v2[4].f64[0] * -0.5 < a2)
    __asm { BR              X10 }
  swift_beginAccess();
  v4 = v2[6].f64[0] + a1[1].f64[0];
  v7 = vaddq_f64(v2[5], *a1);
  swift_beginAccess();
  result = 0;
  v6 = v2[3].f64[0];
  *a1 = vsubq_f64(v7, v2[2]);
  a1[1].f64[0] = v4 - v6;
  return result;
}

{
  float64x2_t *v2;
  float64_t v4;
  uint64_t result;
  double v6;
  float64x2_t v7;
  float64x2_t v8;
  float64x2_t v9;

  if (v2[5].f64[1] + v2[5].f64[0] * -0.5 < a2)
    __asm { BR              X10 }
  swift_beginAccess();
  v4 = v2[8].f64[0] + a1[2].f64[0];
  v8 = vaddq_f64(v2[6], *a1);
  v9 = vaddq_f64(v2[7], a1[1]);
  swift_beginAccess();
  result = 0;
  v6 = v2[4].f64[0];
  v7 = vsubq_f64(v9, v2[3]);
  *a1 = vsubq_f64(v8, v2[2]);
  a1[1] = v7;
  a1[2].f64[0] = v4 - v6;
  return result;
}

uint64_t specialized AnimatorState.update(_:at:environment:)(float32x2_t *a1, double a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  float32x2_t v7;
  float32x2_t v8;
  float32x2_t v9;
  float32x2_t v10;
  uint64_t v11;
  uint64_t v12;
  float32x2_t v13;
  float32x2_t v14;
  uint64_t result;

  v3 = (_QWORD *)v2;
  if (*(double *)(v2 + 80) + *(double *)(v2 + 72) * -0.5 < a2)
    __asm { BR              X10 }
  swift_beginAccess();
  v5 = *(_QWORD *)(v2 + 88);
  v6 = v3[12];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v7 = (float32x2_t)v3[13];
  v8 = (float32x2_t)v3[14];
  specialized static AnimatableArray.+= infix(_:_:)((uint64_t)a1, v5);
  specialized static AnimatableArray.+= infix(_:_:)((uint64_t)&a1[1], v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v9 = vadd_f32(v7, a1[2]);
  v10 = vadd_f32(v8, a1[3]);
  swift_beginAccess();
  v11 = v3[4];
  v12 = v3[5];
  v13 = (float32x2_t)v3[6];
  v14 = (float32x2_t)v3[7];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  specialized static AnimatableArray.-= infix(_:_:)((uint64_t)a1, v11);
  specialized static AnimatableArray.-= infix(_:_:)((uint64_t)&a1[1], v12);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  result = 0;
  a1[2] = vsub_f32(v9, v13);
  a1[3] = vsub_f32(v10, v14);
  return result;
}

void sub_234FD3C7C(double a1)
{
  uint64_t v1;
  double v2;
  double v3;
  uint64_t (*v4)(void);
  void *v5;

  if (a1 < 0.0166666667)
    v3 = 0.0333333333;
  else
    v3 = a1 + a1;
  if (v3 < v2 - *(double *)(v1 + 80))
  {
    if (one-time initialization token for shared != -1)
      swift_once();
    swift_beginAccess();
    v4 = *(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *(_QWORD *)static CoreGlue.shared) + 0x60);
    v5 = static CoreGlue.shared;
    LOBYTE(v4) = v4();

    if ((v4 & 1) == 0)
      *(double *)(v1 + 80) = v2 - v3;
  }
  JUMPOUT(0x234FD3D1CLL);
}

uint64_t specialized AnimatorState.update(_:at:environment:)(double a1)
{
  uint64_t v1;
  char v2;
  char v3;
  uint64_t v5;
  char v6;
  uint64_t v7;
  char v8;

  if (*(double *)(v1 + 64) + *(double *)(v1 + 56) * -0.5 < a1)
    __asm { BR              X10 }
  swift_beginAccess();
  v2 = *(_BYTE *)(v1 + 80);
  v7 = *(_QWORD *)(v1 + 72);
  v8 = v2;
  ResolvedGradientVector.add(_:scaledBy:)((uint64_t)&v7, 1.0);
  swift_beginAccess();
  v3 = *(_BYTE *)(v1 + 40);
  v5 = *(_QWORD *)(v1 + 32);
  v6 = v3;
  ResolvedGradientVector.add(_:scaledBy:)((uint64_t)&v5, -1.0);
  return 0;
}

void sub_234FD4A3C(double a1)
{
  uint64_t v1;
  double v2;
  double v3;
  uint64_t (*v4)(void);
  void *v5;

  if (a1 < 0.0166666667)
    v3 = 0.0333333333;
  else
    v3 = a1 + a1;
  if (v3 < v2 - *(double *)(v1 + 48))
  {
    if (one-time initialization token for shared != -1)
      swift_once();
    swift_beginAccess();
    v4 = *(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *(_QWORD *)static CoreGlue.shared) + 0x60);
    v5 = static CoreGlue.shared;
    LOBYTE(v4) = v4();

    if ((v4 & 1) == 0)
      *(double *)(v1 + 48) = v2 - v3;
  }
  JUMPOUT(0x234FD4ADCLL);
}

#error "234FD5404: call analysis failed (funcsize=89)"

void sub_234FD545C(double a1)
{
  uint64_t v1;
  double v2;
  double v3;
  uint64_t (*v4)(void);
  void *v5;

  if (a1 < 0.0166666667)
    v3 = 0.0333333333;
  else
    v3 = a1 + a1;
  if (v3 < v2 - *(double *)(v1 + 136))
  {
    if (one-time initialization token for shared != -1)
      swift_once();
    swift_beginAccess();
    v4 = *(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *(_QWORD *)static CoreGlue.shared) + 0x60);
    v5 = static CoreGlue.shared;
    LOBYTE(v4) = v4();

    if ((v4 & 1) == 0)
      *(double *)(v1 + 136) = v2 - v3;
  }
  JUMPOUT(0x234FD54FCLL);
}

uint64_t specialized AnimatorState.update(_:at:environment:)(__int128 *a1, double a2)
{
  uint64_t v2;
  char v4;
  __int128 v5;
  __int128 v6;
  char v7;
  __int128 v8;
  __int128 v9;
  int8x16_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  char v16;

  if (*(double *)(v2 + 136) + *(double *)(v2 + 128) * -0.5 < a2)
    __asm { BR              X10 }
  swift_beginAccess();
  v4 = *(_BYTE *)(v2 + 224);
  v5 = *(_OWORD *)(v2 + 160);
  v11 = *(int8x16_t *)(v2 + 144);
  v12 = v5;
  v6 = *(_OWORD *)(v2 + 192);
  v13 = *(_OWORD *)(v2 + 176);
  v14 = v6;
  v15 = *(_OWORD *)(v2 + 208);
  v16 = v4;
  specialized static _ShapeStyle_Pack.Fill.AnimatableData.+= infix(_:_:)(a1, &v11);
  swift_beginAccess();
  v7 = *(_BYTE *)(v2 + 112);
  v8 = *(_OWORD *)(v2 + 48);
  v11 = *(int8x16_t *)(v2 + 32);
  v12 = v8;
  v9 = *(_OWORD *)(v2 + 80);
  v13 = *(_OWORD *)(v2 + 64);
  v14 = v9;
  v15 = *(_OWORD *)(v2 + 96);
  v16 = v7;
  specialized static _ShapeStyle_Pack.Fill.AnimatableData.-= infix(_:_:)(a1, &v11);
  return 0;
}

void sub_234FD5AE0(double a1)
{
  uint64_t v1;
  double v2;
  double v3;
  uint64_t (*v4)(void);
  void *v5;

  if (a1 < 0.0166666667)
    v3 = 0.0333333333;
  else
    v3 = a1 + a1;
  if (v3 < v2 - *(double *)(v1 + 120))
  {
    if (one-time initialization token for shared != -1)
      swift_once();
    swift_beginAccess();
    v4 = *(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *(_QWORD *)static CoreGlue.shared) + 0x60);
    v5 = static CoreGlue.shared;
    LOBYTE(v4) = v4();

    if ((v4 & 1) == 0)
      *(double *)(v1 + 120) = v2 - v3;
  }
  JUMPOUT(0x234FD5B80);
}

uint64_t specialized AnimatorState.update(_:at:environment:)(_QWORD *a1, double a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;

  v3 = v2;
  if (*(double *)(v2 + 88) + *(double *)(v2 + 80) * -0.5 < a2)
    __asm { BR              X10 }
  swift_beginAccess();
  outlined init with copy of _AnyAnimatableData((_QWORD *)(v2 + 96), &v8);
  v5 = *a1;
  if (*a1 == v8)
  {
    (*(void (**)(_QWORD *, uint64_t *))(v5 + 96))(a1 + 1, &v9);
  }
  else if (v5 == type metadata accessor for ZeroVTable())
  {
    outlined destroy of _AnyAnimatableData((uint64_t)a1);
    outlined init with copy of _AnyAnimatableData(&v8, a1);
  }
  outlined destroy of _AnyAnimatableData((uint64_t)&v8);
  swift_beginAccess();
  outlined init with copy of _AnyAnimatableData((_QWORD *)(v3 + 32), &v8);
  v6 = *a1;
  if (*a1 == v8)
  {
    (*(void (**)(_QWORD *, uint64_t *))(v6 + 104))(a1 + 1, &v9);
  }
  else if (v6 == type metadata accessor for ZeroVTable())
  {
    outlined destroy of _AnyAnimatableData((uint64_t)a1);
    outlined init with copy of _AnyAnimatableData(&v8, a1);
    (*(void (**)(_QWORD *))(*a1 + 112))(a1 + 1);
  }
  outlined destroy of _AnyAnimatableData((uint64_t)&v8);
  return 0;
}

uint64_t AnimatorState.update(_:at:environment:)(uint64_t a1, double *a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(char *, uint64_t, uint64_t);
  void (*v21)(char *, uint64_t);
  uint64_t v22;
  _QWORD v24[9];

  v3 = v2;
  v6 = *(_QWORD **)v3;
  v7 = *(_QWORD *)(*(_QWORD *)v3 + 80);
  v8 = type metadata accessor for Optional();
  MEMORY[0x24BDAC7A8](v8);
  v9 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v10);
  MEMORY[0x24BDAC7A8](v11);
  v16 = (char *)v24 - v15;
  v18 = v6[16];
  v17 = v6[17];
  if (*(double *)(v3 + v17) + *(double *)(v3 + v18) * -0.5 < *a2)
  {
    v24[3] = v14;
    v24[4] = v12;
    v24[5] = v18;
    v24[6] = v13;
    v24[7] = v17;
    v24[8] = a1;
    __asm { BR              X10 }
  }
  v19 = v3 + v6[18];
  swift_beginAccess();
  v20 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 16);
  v20(v16, v19, v7);
  dispatch thunk of static AdditiveArithmetic.+= infix(_:_:)();
  v21 = *(void (**)(char *, uint64_t))(v9 + 8);
  v21(v16, v7);
  v22 = v3 + *(_QWORD *)(*(_QWORD *)v3 + 112);
  swift_beginAccess();
  v20(v16, v22, v7);
  dispatch thunk of static AdditiveArithmetic.-= infix(_:_:)();
  v21(v16, v7);
  return 0;
}

void specialized AnimatorState.combine(newAnimation:newInterval:at:in:environment:)(uint64_t a1, uint64_t a2, double a3)
{
  uint64_t v3;
  uint64_t v4;
  double v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(uint64_t, _QWORD *, _QWORD *, ValueMetadata *, unint64_t, double);
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  double v20;
  char v21;
  double v22;
  long double v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  char v27;
  char v28;
  unsigned int v29;
  _QWORD v30[3];
  _QWORD v31[2];
  char v32;
  char v33;
  uint64_t v34;

  v4 = v3;
  v34 = a2;
  if (!*(_BYTE *)(v3 + 77))
  {
    if (one-time initialization token for introduced != -1)
      swift_once();
    v29 = static _SemanticFeature_v3.introduced;
    if (one-time initialization token for forced != -1)
      swift_once();
    swift_beginAccess();
    if (byte_25426FAB4 == 1)
    {
      if ((dyld_program_sdk_at_least() & 1) != 0)
        goto LABEL_2;
    }
    else if (static Semantics.forced >= v29)
    {
      goto LABEL_2;
    }
    swift_beginAccess();
    *(_QWORD *)(v3 + 16) = a1;
    swift_retain();
    swift_release();
    swift_beginAccess();
    *(_QWORD *)(v3 + 32) = a2;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    goto LABEL_6;
  }
LABEL_2:
  v8 = a3 - *(double *)(v3 + 40);
  swift_beginAccess();
  v9 = *(_QWORD *)(v3 + 24);
  v10 = *(_BYTE *)(v3 + 96);
  swift_bridgeObjectRetain();
  v31[0] = v9;
  v31[1] = AGCreateWeakAttribute();
  v32 = 0;
  v33 = v10;
  swift_beginAccess();
  v11 = *(_QWORD *)(v3 + 16);
  v12 = *(_QWORD *)(v3 + 24);
  swift_beginAccess();
  v13 = *(_QWORD *)(v3 + 32);
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  specialized AnimatorState.forkListeners(animation:state:interval:)(v11, v12, v13, (uint64_t (*)(BOOL, uint64_t, uint64_t, uint64_t))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  *(_BYTE *)(v3 + 96) = 0;
  v14 = *(_QWORD *)(v3 + 16);
  v30[0] = *(_QWORD *)(v3 + 32);
  v15 = *(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, ValueMetadata *, unint64_t, double))(*(_QWORD *)a1 + 136);
  v16 = lazy protocol witness table accessor for type _ShapeStyle_Pack.AnimatableData and conformance _ShapeStyle_Pack.AnimatableData();
  swift_retain();
  swift_bridgeObjectRetain();
  LOBYTE(v16) = v15(v14, v30, v31, &type metadata for _ShapeStyle_Pack.AnimatableData, v16, v8);
  swift_bridgeObjectRelease();
  swift_release();
  if ((v16 & 1) != 0)
  {
    *(_QWORD *)(v4 + 24) = v31[0];
    swift_bridgeObjectRelease();
    *(_QWORD *)(v4 + 16) = a1;
    swift_retain();
    swift_release();
  }
  else
  {
    swift_bridgeObjectRelease();
    v17 = *(_QWORD **)(v4 + 32);
    swift_beginAccess();
    swift_beginAccess();
    swift_bridgeObjectRetain();
    specialized combineAnimation<A>(into:state:value:elapsed:newAnimation:newValue:)((uint64_t *)(v4 + 16), (unint64_t *)(v4 + 24), v17, a1, a2, v8);
    swift_endAccess();
    swift_endAccess();
    swift_bridgeObjectRelease();
  }
  swift_beginAccess();
  specialized static _ShapeStyle_Pack.AnimatableData.+= infix(_:_:)(v4 + 32, &v34);
  swift_endAccess();
  *(double *)(v4 + 56) = a3;
LABEL_6:
  v18 = swift_retain();
  v19 = specialized find<A>(_:key:)(v18);
  if (!v19)
  {
    swift_release();
    return;
  }
  v20 = *(double *)(v19 + 72);
  v21 = *(_BYTE *)(v19 + 80);
  swift_release();
  if ((v21 & 1) != 0)
    return;
  v22 = 0.0;
  if (v20 > 0.0)
  {
    v23 = log2(v20 * 240.0);
    v22 = exp2(floor(v23 + 0.01)) * 0.00416666667;
  }
  if (v22 >= *(double *)(v4 + 48))
    v22 = *(double *)(v4 + 48);
  *(double *)(v4 + 48) = v22;
  if (v22 >= 0.0166666667)
  {
    v26 = 0;
    v28 = 1;
    goto LABEL_29;
  }
  v24 = swift_retain();
  v25 = specialized find<A>(_:key:)(v24);
  if (!v25)
  {
    swift_release();
    goto LABEL_28;
  }
  v26 = *(_DWORD *)(v25 + 72);
  v27 = *(_BYTE *)(v25 + 76);
  swift_release();
  if ((v27 & 1) != 0)
  {
LABEL_28:
    v26 = *(_DWORD *)(v4 + 72);
    v28 = *(_BYTE *)(v4 + 76);
    goto LABEL_29;
  }
  v28 = 0;
LABEL_29:
  *(_DWORD *)(v4 + 72) = v26;
  *(_BYTE *)(v4 + 76) = v28;
}

{
  uint64_t v3;
  uint64_t v4;
  double v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(uint64_t, _QWORD *, _QWORD *, ValueMetadata *, unint64_t, double);
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  double v20;
  char v21;
  double v22;
  long double v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  char v27;
  char v28;
  unsigned int v29;
  _QWORD v30[3];
  _QWORD v31[2];
  char v32;
  char v33;
  uint64_t v34;

  v4 = v3;
  v34 = a2;
  if (!*(_BYTE *)(v3 + 77))
  {
    if (one-time initialization token for introduced != -1)
      swift_once();
    v29 = static _SemanticFeature_v3.introduced;
    if (one-time initialization token for forced != -1)
      swift_once();
    swift_beginAccess();
    if (byte_25426FAB4 == 1)
    {
      if ((dyld_program_sdk_at_least() & 1) != 0)
        goto LABEL_2;
    }
    else if (static Semantics.forced >= v29)
    {
      goto LABEL_2;
    }
    swift_beginAccess();
    *(_QWORD *)(v3 + 16) = a1;
    swift_retain();
    swift_release();
    swift_beginAccess();
    *(_QWORD *)(v3 + 32) = a2;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    goto LABEL_6;
  }
LABEL_2:
  v8 = a3 - *(double *)(v3 + 40);
  swift_beginAccess();
  v9 = *(_QWORD *)(v3 + 24);
  v10 = *(_BYTE *)(v3 + 96);
  swift_bridgeObjectRetain();
  v31[0] = v9;
  v31[1] = AGCreateWeakAttribute();
  v32 = 0;
  v33 = v10;
  swift_beginAccess();
  v11 = *(_QWORD *)(v3 + 16);
  v12 = *(_QWORD *)(v3 + 24);
  swift_beginAccess();
  v13 = *(_QWORD *)(v3 + 32);
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  specialized AnimatorState.forkListeners(animation:state:interval:)(v11, v12, v13, (uint64_t (*)(BOOL, uint64_t, uint64_t, uint64_t))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  *(_BYTE *)(v3 + 96) = 0;
  v14 = *(_QWORD *)(v3 + 16);
  v30[0] = *(_QWORD *)(v3 + 32);
  v15 = *(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, ValueMetadata *, unint64_t, double))(*(_QWORD *)a1 + 136);
  v16 = lazy protocol witness table accessor for type ShaderVectorData and conformance ShaderVectorData();
  swift_retain();
  swift_bridgeObjectRetain();
  LOBYTE(v16) = v15(v14, v30, v31, &type metadata for ShaderVectorData, v16, v8);
  swift_bridgeObjectRelease();
  swift_release();
  if ((v16 & 1) != 0)
  {
    *(_QWORD *)(v4 + 24) = v31[0];
    swift_bridgeObjectRelease();
    *(_QWORD *)(v4 + 16) = a1;
    swift_retain();
    swift_release();
  }
  else
  {
    swift_bridgeObjectRelease();
    v17 = *(_QWORD *)(v4 + 32);
    swift_beginAccess();
    swift_beginAccess();
    swift_bridgeObjectRetain();
    specialized combineAnimation<A>(into:state:value:elapsed:newAnimation:newValue:)((uint64_t *)(v4 + 16), (unint64_t *)(v4 + 24), v17, a1, a2, v8);
    swift_endAccess();
    swift_endAccess();
    swift_bridgeObjectRelease();
  }
  swift_beginAccess();
  specialized static ShaderVectorData.+= infix(_:_:)(v4 + 32, &v34);
  swift_endAccess();
  *(double *)(v4 + 56) = a3;
LABEL_6:
  v18 = swift_retain();
  v19 = specialized find<A>(_:key:)(v18);
  if (!v19)
  {
    swift_release();
    return;
  }
  v20 = *(double *)(v19 + 72);
  v21 = *(_BYTE *)(v19 + 80);
  swift_release();
  if ((v21 & 1) != 0)
    return;
  v22 = 0.0;
  if (v20 > 0.0)
  {
    v23 = log2(v20 * 240.0);
    v22 = exp2(floor(v23 + 0.01)) * 0.00416666667;
  }
  if (v22 >= *(double *)(v4 + 48))
    v22 = *(double *)(v4 + 48);
  *(double *)(v4 + 48) = v22;
  if (v22 >= 0.0166666667)
  {
    v26 = 0;
    v28 = 1;
    goto LABEL_29;
  }
  v24 = swift_retain();
  v25 = specialized find<A>(_:key:)(v24);
  if (!v25)
  {
    swift_release();
    goto LABEL_28;
  }
  v26 = *(_DWORD *)(v25 + 72);
  v27 = *(_BYTE *)(v25 + 76);
  swift_release();
  if ((v27 & 1) != 0)
  {
LABEL_28:
    v26 = *(_DWORD *)(v4 + 72);
    v28 = *(_BYTE *)(v4 + 76);
    goto LABEL_29;
  }
  v28 = 0;
LABEL_29:
  *(_DWORD *)(v4 + 72) = v26;
  *(_BYTE *)(v4 + 76) = v28;
}

{
  uint64_t v3;
  uint64_t v4;
  double v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  __int128 v15;
  uint64_t (*v16)(uint64_t, __int128 *, _QWORD *, uint64_t, uint64_t, double);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  double v22;
  float64x2_t v23;
  uint64_t v24;
  uint64_t v25;
  double v26;
  char v27;
  double v28;
  long double v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  char v33;
  char v34;
  unsigned int v35;
  __int128 v36;
  uint64_t v37;
  _QWORD v38[2];
  char v39;
  char v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;
  __int128 v44[2];
  uint64_t v45;

  v4 = v3;
  if (!*(_BYTE *)(v3 + 141))
  {
    if (one-time initialization token for introduced != -1)
      swift_once();
    v35 = static _SemanticFeature_v3.introduced;
    if (one-time initialization token for forced != -1)
      swift_once();
    swift_beginAccess();
    if (byte_25426FAB4 == 1)
    {
      if ((dyld_program_sdk_at_least() & 1) != 0)
        goto LABEL_2;
    }
    else if (static Semantics.forced >= v35)
    {
      goto LABEL_2;
    }
    swift_beginAccess();
    *(_QWORD *)(v3 + 16) = a1;
    swift_retain();
    swift_release();
    swift_beginAccess();
    v36 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)(v3 + 32) = *(_OWORD *)a2;
    *(_OWORD *)(v3 + 48) = v36;
    *(_QWORD *)(v3 + 64) = *(_QWORD *)(a2 + 32);
    goto LABEL_6;
  }
LABEL_2:
  v37 = a2;
  v8 = a3 - *(double *)(v3 + 72);
  swift_beginAccess();
  v9 = *(_QWORD *)(v3 + 24);
  v10 = *(_BYTE *)(v3 + 160);
  swift_bridgeObjectRetain();
  v38[0] = v9;
  v38[1] = AGCreateWeakAttribute();
  v39 = 0;
  v40 = v10;
  swift_beginAccess();
  v11 = *(_QWORD *)(v3 + 16);
  v12 = *(_QWORD *)(v3 + 24);
  swift_beginAccess();
  v13 = *(_OWORD *)(v3 + 48);
  v44[0] = *(_OWORD *)(v3 + 32);
  v44[1] = v13;
  v45 = *(_QWORD *)(v3 + 64);
  swift_retain();
  swift_bridgeObjectRetain();
  specialized AnimatorState.forkListeners(animation:state:interval:)(v11, v12, v44);
  swift_bridgeObjectRelease();
  swift_release();
  *(_BYTE *)(v3 + 160) = 0;
  v14 = *(_QWORD *)(v3 + 64);
  v15 = *(_OWORD *)(v3 + 48);
  v41 = *(_OWORD *)(v3 + 32);
  v42 = v15;
  v43 = v14;
  v16 = *(uint64_t (**)(uint64_t, __int128 *, _QWORD *, uint64_t, uint64_t, double))(*(_QWORD *)a1 + 136);
  v17 = type metadata accessor for AnimatablePair<AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>, AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>>();
  v18 = lazy protocol witness table accessor for type AnimatablePair<AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>, AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>> and conformance AnimatablePair<A, B>();
  v19 = swift_retain();
  LOBYTE(v17) = v16(v19, &v41, v38, v17, v18, v8);
  swift_release();
  if ((v17 & 1) != 0)
  {
    *(_QWORD *)(v4 + 24) = v38[0];
    swift_bridgeObjectRelease();
    *(_QWORD *)(v4 + 16) = a1;
    swift_retain();
    swift_release();
    v20 = v37;
  }
  else
  {
    swift_bridgeObjectRelease();
    v21 = *(_OWORD *)(v4 + 48);
    v41 = *(_OWORD *)(v4 + 32);
    v42 = v21;
    v43 = *(_QWORD *)(v4 + 64);
    swift_beginAccess();
    swift_beginAccess();
    v20 = v37;
    specialized combineAnimation<A>(into:state:value:elapsed:newAnimation:newValue:)((uint64_t *)(v4 + 16), (unint64_t *)(v4 + 24), (uint64_t)&v41, a1, v37, v8);
    swift_endAccess();
    swift_endAccess();
  }
  v22 = *(double *)(v20 + 32);
  v23 = vaddq_f64(*(float64x2_t *)(v20 + 16), *(float64x2_t *)(v4 + 48));
  *(float32x4_t *)(v4 + 32) = vaddq_f32(*(float32x4_t *)v20, *(float32x4_t *)(v4 + 32));
  *(float64x2_t *)(v4 + 48) = v23;
  *(double *)(v4 + 64) = v22 + *(double *)(v4 + 64);
  *(double *)(v4 + 88) = a3;
LABEL_6:
  v24 = swift_retain();
  v25 = specialized find<A>(_:key:)(v24);
  if (!v25)
  {
    swift_release();
    return;
  }
  v26 = *(double *)(v25 + 72);
  v27 = *(_BYTE *)(v25 + 80);
  swift_release();
  if ((v27 & 1) != 0)
    return;
  v28 = 0.0;
  if (v26 > 0.0)
  {
    v29 = log2(v26 * 240.0);
    v28 = exp2(floor(v29 + 0.01)) * 0.00416666667;
  }
  if (v28 >= *(double *)(v4 + 80))
    v28 = *(double *)(v4 + 80);
  *(double *)(v4 + 80) = v28;
  if (v28 >= 0.0166666667)
  {
    v32 = 0;
    v34 = 1;
    goto LABEL_29;
  }
  v30 = swift_retain();
  v31 = specialized find<A>(_:key:)(v30);
  if (!v31)
  {
    swift_release();
    goto LABEL_28;
  }
  v32 = *(_DWORD *)(v31 + 72);
  v33 = *(_BYTE *)(v31 + 76);
  swift_release();
  if ((v33 & 1) != 0)
  {
LABEL_28:
    v32 = *(_DWORD *)(v4 + 136);
    v34 = *(_BYTE *)(v4 + 140);
    goto LABEL_29;
  }
  v34 = 0;
LABEL_29:
  *(_DWORD *)(v4 + 136) = v32;
  *(_BYTE *)(v4 + 140) = v34;
}

{
  uint64_t v3;
  uint64_t v4;
  double v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __int128 *v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  float v36;
  uint64_t v37;
  int8x16_t v38;
  int8x16_t v39;
  int8x16_t v40;
  uint64_t v41;
  uint64_t v42;
  double v43;
  char v44;
  double v45;
  long double v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  char v50;
  char v51;
  unsigned int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  char *v63;
  uint64_t (*v64)(uint64_t, __int128 *, _QWORD *, uint64_t, uint64_t, double);
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t *v72;
  uint64_t v73;
  __int128 *v74;
  uint64_t v75;
  unint64_t *v76;
  uint64_t v77;
  uint64_t v78;
  int8x16_t v80[6];
  uint64_t v81;
  _QWORD v82[2];
  char v83;
  char v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  uint64_t v91;
  _OWORD v92[6];
  uint64_t v93;

  v4 = v3;
  v63 = (char *)(v3 + 268);
  if (!*(_BYTE *)(v3 + 269))
  {
    if (one-time initialization token for introduced != -1)
      swift_once();
    v52 = static _SemanticFeature_v3.introduced;
    if (one-time initialization token for forced != -1)
      swift_once();
    swift_beginAccess();
    if (byte_25426FAB4 == 1)
    {
      if ((dyld_program_sdk_at_least() & 1) != 0)
        goto LABEL_2;
    }
    else if (static Semantics.forced >= v52)
    {
      goto LABEL_2;
    }
    swift_beginAccess();
    *(_QWORD *)(v3 + 16) = a1;
    swift_retain();
    swift_release();
    swift_beginAccess();
    v77 = *(_QWORD *)(v3 + 40);
    v78 = *(_QWORD *)(v3 + 32);
    v53 = *(_QWORD *)(v3 + 64);
    v73 = *(_QWORD *)(v3 + 56);
    v75 = *(_QWORD *)(v3 + 48);
    v54 = *(_QWORD *)(v3 + 72);
    v55 = *(_QWORD *)(v3 + 80);
    v57 = *(_QWORD *)(v3 + 88);
    v56 = *(_QWORD *)(v3 + 96);
    v58 = *(_QWORD *)(v4 + 104);
    v59 = *(_BYTE *)(v4 + 112);
    outlined retain of AnimatablePair<_ShapeStyle_Pack.Fill.AnimatableData, AnimatablePair<Float, AnimatableArray<AnimatablePair<Float, _ShapeStyle_Pack.Effect.Kind.AnimatableData>>>>(a2);
    v60 = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(v4 + 96) = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(v4 + 112) = v60;
    *(_QWORD *)(v4 + 128) = *(_QWORD *)(a2 + 96);
    v61 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)(v4 + 32) = *(_OWORD *)a2;
    *(_OWORD *)(v4 + 48) = v61;
    v62 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(v4 + 64) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(v4 + 80) = v62;
    outlined consume of _ShapeStyle_Pack.Fill.AnimatableData(v78, v77, v75, v73, v53, v54, v55, v57, v56, v58, v59);
    swift_bridgeObjectRelease();
    goto LABEL_6;
  }
LABEL_2:
  v7 = a3 - *(double *)(v3 + 136);
  v76 = (unint64_t *)(v3 + 24);
  swift_beginAccess();
  v8 = *(_QWORD *)(v3 + 24);
  v9 = *(_BYTE *)(v3 + 288);
  swift_bridgeObjectRetain();
  v82[0] = v8;
  v82[1] = AGCreateWeakAttribute();
  v83 = 0;
  v84 = v9;
  v72 = (uint64_t *)(v3 + 16);
  swift_beginAccess();
  v10 = *(_QWORD *)(v3 + 16);
  v11 = *(_QWORD *)(v3 + 24);
  v74 = (__int128 *)(v3 + 32);
  swift_beginAccess();
  v12 = *(_OWORD *)(v3 + 112);
  v92[4] = *(_OWORD *)(v3 + 96);
  v92[5] = v12;
  v93 = *(_QWORD *)(v3 + 128);
  v13 = *(_OWORD *)(v3 + 48);
  v92[0] = *(_OWORD *)(v3 + 32);
  v92[1] = v13;
  v14 = *(_OWORD *)(v3 + 80);
  v92[2] = *(_OWORD *)(v3 + 64);
  v92[3] = v14;
  outlined retain of AnimatablePair<_ShapeStyle_Pack.Fill.AnimatableData, AnimatablePair<Float, AnimatableArray<AnimatablePair<Float, _ShapeStyle_Pack.Effect.Kind.AnimatableData>>>>((uint64_t)v92);
  swift_retain();
  swift_bridgeObjectRetain();
  specialized AnimatorState.forkListeners(animation:state:interval:)(v10, v11, (uint64_t)v92);
  swift_release();
  outlined release of AnimatablePair<_ShapeStyle_Pack.Fill.AnimatableData, AnimatablePair<Float, AnimatableArray<AnimatablePair<Float, _ShapeStyle_Pack.Effect.Kind.AnimatableData>>>>((uint64_t)v92);
  swift_bridgeObjectRelease();
  *(_BYTE *)(v3 + 288) = 0;
  v16 = *(_QWORD *)(v3 + 32);
  v15 = *(_QWORD *)(v3 + 40);
  v18 = *(_QWORD *)(v3 + 48);
  v17 = *(_QWORD *)(v3 + 56);
  v19 = *(_QWORD *)(v3 + 64);
  v20 = *(_QWORD *)(v3 + 72);
  v21 = *(_QWORD *)(v3 + 80);
  v22 = *(_QWORD *)(v3 + 88);
  v23 = *(_QWORD *)(v3 + 96);
  v24 = *(_QWORD *)(v3 + 104);
  v25 = *(_BYTE *)(v3 + 112);
  v26 = *(_DWORD *)(v3 + 120);
  v27 = *(_QWORD *)(v3 + 128);
  *(_QWORD *)&v85 = v16;
  *((_QWORD *)&v85 + 1) = v15;
  v65 = v18;
  v66 = v15;
  *(_QWORD *)&v86 = v18;
  *((_QWORD *)&v86 + 1) = v17;
  v70 = v19;
  v71 = v17;
  *(_QWORD *)&v87 = v19;
  *((_QWORD *)&v87 + 1) = v20;
  v68 = v21;
  v69 = v20;
  *(_QWORD *)&v88 = v21;
  *((_QWORD *)&v88 + 1) = v22;
  v67 = v22;
  *(_QWORD *)&v89 = v23;
  *((_QWORD *)&v89 + 1) = v24;
  LOBYTE(v90) = v25;
  DWORD2(v90) = v26;
  v91 = v27;
  v64 = *(uint64_t (**)(uint64_t, __int128 *, _QWORD *, uint64_t, uint64_t, double))(*(_QWORD *)a1 + 136);
  outlined copy of _ShapeStyle_Pack.Fill.AnimatableData(v16, v15, v18, v17, v19, v20, v21, v22, v23, v24, v25);
  v28 = type metadata accessor for AnimatablePair<_ShapeStyle_Pack.Fill.AnimatableData, AnimatablePair<Float, AnimatableArray<AnimatablePair<Float, _ShapeStyle_Pack.Effect.Kind.AnimatableData>>>>();
  v29 = lazy protocol witness table accessor for type AnimatablePair<_ShapeStyle_Pack.Fill.AnimatableData, AnimatablePair<Float, AnimatableArray<AnimatablePair<Float, _ShapeStyle_Pack.Effect.Kind.AnimatableData>>>> and conformance AnimatablePair<A, B>();
  swift_bridgeObjectRetain();
  v30 = swift_retain();
  LOBYTE(v29) = v64(v30, &v85, v82, v28, v29, v7);
  swift_release();
  outlined consume of _ShapeStyle_Pack.Fill.AnimatableData(v16, v66, v65, v71, v70, v69, v68, v67, v23, v24, v25);
  swift_bridgeObjectRelease();
  if ((v29 & 1) != 0)
  {
    *v76 = v82[0];
    swift_bridgeObjectRelease();
    *v72 = a1;
    swift_retain();
    swift_release();
    v31 = a2;
    v32 = (__int128 *)(v4 + 32);
  }
  else
  {
    swift_bridgeObjectRelease();
    v32 = (__int128 *)(v4 + 32);
    v33 = *(_OWORD *)(v4 + 112);
    v89 = *(_OWORD *)(v4 + 96);
    v90 = v33;
    v91 = *(_QWORD *)(v4 + 128);
    v34 = *(_OWORD *)(v4 + 48);
    v85 = *v74;
    v86 = v34;
    v35 = *(_OWORD *)(v4 + 80);
    v87 = *(_OWORD *)(v4 + 64);
    v88 = v35;
    swift_beginAccess();
    swift_beginAccess();
    outlined retain of AnimatablePair<_ShapeStyle_Pack.Fill.AnimatableData, AnimatablePair<Float, AnimatableArray<AnimatablePair<Float, _ShapeStyle_Pack.Effect.Kind.AnimatableData>>>>((uint64_t)&v85);
    v31 = a2;
    specialized combineAnimation<A>(into:state:value:elapsed:newAnimation:newValue:)(v72, v76, (uint64_t)&v85, a1, a2, v7);
    swift_endAccess();
    swift_endAccess();
    outlined release of AnimatablePair<_ShapeStyle_Pack.Fill.AnimatableData, AnimatablePair<Float, AnimatableArray<AnimatablePair<Float, _ShapeStyle_Pack.Effect.Kind.AnimatableData>>>>((uint64_t)&v85);
  }
  swift_beginAccess();
  v36 = *(float *)(v31 + 88);
  v37 = *(_QWORD *)(v31 + 96);
  v38 = *(int8x16_t *)(v31 + 80);
  v80[4] = *(int8x16_t *)(v31 + 64);
  v80[5] = v38;
  v81 = v37;
  v39 = *(int8x16_t *)(v31 + 16);
  v80[0] = *(int8x16_t *)v31;
  v80[1] = v39;
  v40 = *(int8x16_t *)(v31 + 48);
  v80[2] = *(int8x16_t *)(v31 + 32);
  v80[3] = v40;
  specialized static _ShapeStyle_Pack.Fill.AnimatableData.+= infix(_:_:)(v32, v80);
  *(float *)(v4 + 120) = v36 + *(float *)(v4 + 120);
  specialized static AnimatableArray.+= infix(_:_:)(v4 + 128, v37);
  swift_endAccess();
  *(double *)(v4 + 152) = a3;
LABEL_6:
  v41 = swift_retain();
  v42 = specialized find<A>(_:key:)(v41);
  if (!v42)
  {
    swift_release();
    return;
  }
  v43 = *(double *)(v42 + 72);
  v44 = *(_BYTE *)(v42 + 80);
  swift_release();
  if ((v44 & 1) != 0)
    return;
  v45 = 0.0;
  if (v43 > 0.0)
  {
    v46 = log2(v43 * 240.0);
    v45 = exp2(floor(v46 + 0.01)) * 0.00416666667;
  }
  if (v45 >= *(double *)(v4 + 144))
    v45 = *(double *)(v4 + 144);
  *(double *)(v4 + 144) = v45;
  if (v45 >= 0.0166666667)
  {
    v49 = 0;
    v51 = 1;
    goto LABEL_29;
  }
  v47 = swift_retain();
  v48 = specialized find<A>(_:key:)(v47);
  if (!v48)
  {
    swift_release();
    goto LABEL_28;
  }
  v49 = *(_DWORD *)(v48 + 72);
  v50 = *(_BYTE *)(v48 + 76);
  swift_release();
  if ((v50 & 1) != 0)
  {
LABEL_28:
    v49 = *(_DWORD *)(v4 + 264);
    v51 = *v63;
    goto LABEL_29;
  }
  v51 = 0;
LABEL_29:
  *(_DWORD *)(v4 + 264) = v49;
  *v63 = v51;
}

{
  uint64_t v3;
  uint64_t v4;
  double v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  unint64_t v24;
  uint64_t v25;
  __int128 *v26;
  uint64_t v27;
  uint64_t v28;
  double v29;
  char v30;
  double v31;
  long double v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  char v36;
  char v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  uint64_t (*v47)(uint64_t, _QWORD *, _QWORD *, ValueMetadata *, unint64_t, double);
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t *v58;
  uint64_t v59;
  _QWORD v60[2];
  char v61;
  char v62;
  int8x16_t v63[5];
  _QWORD v64[10];
  char v65;
  _BYTE v66[96];

  v4 = v3;
  outlined init with take of _ShapeStyle_Pack.Fill.AnimatableData(a2, (uint64_t)v63);
  if (!*(_BYTE *)(v3 + 233))
  {
    if (one-time initialization token for introduced != -1)
      swift_once();
    v38 = static _SemanticFeature_v3.introduced;
    if (one-time initialization token for forced != -1)
      swift_once();
    swift_beginAccess();
    if (byte_25426FAB4 == 1)
    {
      if ((dyld_program_sdk_at_least() & 1) != 0)
        goto LABEL_2;
    }
    else if (static Semantics.forced >= v38)
    {
      goto LABEL_2;
    }
    swift_beginAccess();
    *(_QWORD *)(v3 + 16) = a1;
    swift_retain();
    swift_release();
    swift_beginAccess();
    v57 = *(_QWORD *)(v3 + 40);
    v59 = *(_QWORD *)(v3 + 32);
    v39 = *(_QWORD *)(v3 + 64);
    v54 = *(_QWORD *)(v3 + 56);
    v56 = *(_QWORD *)(v3 + 48);
    v40 = *(_QWORD *)(v3 + 72);
    v41 = *(_QWORD *)(v3 + 80);
    v43 = *(_QWORD *)(v3 + 88);
    v42 = *(_QWORD *)(v3 + 96);
    v44 = *(_QWORD *)(v3 + 104);
    v45 = *(_BYTE *)(v3 + 112);
    outlined retain of Text.Effect.ResolvedDrawing.Operation(a2, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))outlined copy of _ShapeStyle_Pack.Fill.AnimatableData);
    outlined init with take of _ShapeStyle_Pack.Fill.AnimatableData(a2, v3 + 32);
    outlined consume of _ShapeStyle_Pack.Fill.AnimatableData(v59, v57, v56, v54, v39, v40, v41, v43, v42, v44, v45);
    goto LABEL_6;
  }
LABEL_2:
  v7 = a3 - *(double *)(v3 + 120);
  v58 = (unint64_t *)(v3 + 24);
  swift_beginAccess();
  v8 = *(_QWORD *)(v3 + 24);
  v9 = *(_BYTE *)(v3 + 256);
  swift_bridgeObjectRetain();
  v60[0] = v8;
  v60[1] = AGCreateWeakAttribute();
  v61 = 0;
  v62 = v9;
  v55 = (uint64_t *)(v3 + 16);
  swift_beginAccess();
  v10 = *(_QWORD *)(v3 + 16);
  v11 = *(_QWORD *)(v3 + 24);
  swift_beginAccess();
  outlined init with take of _ShapeStyle_Pack.Fill.AnimatableData(v3 + 32, (uint64_t)v66);
  outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)v66, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))outlined copy of _ShapeStyle_Pack.Fill.AnimatableData);
  swift_retain();
  swift_bridgeObjectRetain();
  specialized AnimatorState.forkListeners(animation:state:interval:)(v10, v11, (uint64_t)v66);
  swift_release();
  outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)v66, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))outlined consume of _ShapeStyle_Pack.Fill.AnimatableData);
  swift_bridgeObjectRelease();
  *(_BYTE *)(v3 + 256) = 0;
  v12 = *(_QWORD *)(v3 + 32);
  v13 = *(_QWORD *)(v3 + 40);
  v14 = *(_QWORD *)(v3 + 48);
  v15 = *(_QWORD *)(v3 + 56);
  v16 = *(_QWORD *)(v3 + 64);
  v17 = *(_QWORD *)(v3 + 72);
  v19 = *(_QWORD *)(v3 + 80);
  v18 = *(_QWORD *)(v3 + 88);
  v20 = a1;
  v21 = *(_QWORD *)(v4 + 96);
  v22 = *(_QWORD *)(v4 + 104);
  v23 = *(_BYTE *)(v4 + 112);
  v64[0] = v12;
  v64[1] = v13;
  v64[2] = v14;
  v64[3] = v15;
  v48 = v15;
  v49 = v14;
  v51 = v17;
  v52 = v16;
  v64[4] = v16;
  v64[5] = v17;
  v64[6] = v19;
  v64[7] = v18;
  v50 = v18;
  v64[8] = v21;
  v64[9] = v22;
  v65 = v23;
  v47 = *(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, ValueMetadata *, unint64_t, double))(*(_QWORD *)v20 + 136);
  outlined copy of _ShapeStyle_Pack.Fill.AnimatableData(v12, v13, v14, v15, v16, v17, v19, v18, v21, v22, v23);
  v24 = lazy protocol witness table accessor for type _ShapeStyle_Pack.Fill.AnimatableData and conformance _ShapeStyle_Pack.Fill.AnimatableData();
  v25 = swift_retain();
  v53 = v20;
  LOBYTE(v20) = v47(v25, v64, v60, &type metadata for _ShapeStyle_Pack.Fill.AnimatableData, v24, v7);
  swift_release();
  outlined consume of _ShapeStyle_Pack.Fill.AnimatableData(v12, v13, v49, v48, v52, v51, v19, v50, v21, v22, v23);
  if ((v20 & 1) != 0)
  {
    *v58 = v60[0];
    swift_bridgeObjectRelease();
    *v55 = v53;
    swift_retain();
    swift_release();
    v26 = (__int128 *)(v4 + 32);
  }
  else
  {
    swift_bridgeObjectRelease();
    v26 = (__int128 *)(v4 + 32);
    outlined init with take of _ShapeStyle_Pack.Fill.AnimatableData(v4 + 32, (uint64_t)v64);
    swift_beginAccess();
    swift_beginAccess();
    outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)v64, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))outlined copy of _ShapeStyle_Pack.Fill.AnimatableData);
    specialized combineAnimation<A>(into:state:value:elapsed:newAnimation:newValue:)(v55, v58, (uint64_t)v64, v53, a2, v7);
    swift_endAccess();
    swift_endAccess();
    outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)v64, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))outlined consume of _ShapeStyle_Pack.Fill.AnimatableData);
  }
  swift_beginAccess();
  specialized static _ShapeStyle_Pack.Fill.AnimatableData.+= infix(_:_:)(v26, v63);
  swift_endAccess();
  *(double *)(v4 + 136) = a3;
LABEL_6:
  v27 = swift_retain();
  v28 = specialized find<A>(_:key:)(v27);
  if (!v28)
  {
    swift_release();
    return;
  }
  v29 = *(double *)(v28 + 72);
  v30 = *(_BYTE *)(v28 + 80);
  swift_release();
  if ((v30 & 1) != 0)
    return;
  v31 = 0.0;
  if (v29 > 0.0)
  {
    v32 = log2(v29 * 240.0);
    v31 = exp2(floor(v32 + 0.01)) * 0.00416666667;
  }
  if (v31 >= *(double *)(v4 + 128))
    v31 = *(double *)(v4 + 128);
  *(double *)(v4 + 128) = v31;
  if (v31 >= 0.0166666667)
  {
    v35 = 0;
    v37 = 1;
    goto LABEL_29;
  }
  v33 = swift_retain();
  v34 = specialized find<A>(_:key:)(v33);
  if (!v34)
  {
    swift_release();
    goto LABEL_28;
  }
  v35 = *(_DWORD *)(v34 + 72);
  v36 = *(_BYTE *)(v34 + 76);
  swift_release();
  if ((v36 & 1) != 0)
  {
LABEL_28:
    v35 = *(_DWORD *)(v4 + 228);
    v37 = *(_BYTE *)(v4 + 232);
    goto LABEL_29;
  }
  v37 = 0;
LABEL_29:
  *(_DWORD *)(v4 + 228) = v35;
  *(_BYTE *)(v4 + 232) = v37;
}

{
  uint64_t v3;
  uint64_t v4;
  double v8;
  double v9;
  double v10;
  double v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  __int128 v18;
  uint64_t (*v19)(uint64_t, _OWORD *, _QWORD *, ValueMetadata *, unint64_t, double);
  unint64_t v20;
  uint64_t v21;
  double v22;
  double v23;
  double v24;
  char v25;
  unsigned int v26;
  float32x2_t v27;
  int8x16_t v28;
  uint64_t v29;
  uint64_t v30;
  double v31;
  char v32;
  double v33;
  long double v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  char v38;
  char v39;
  int64x2_t v40;
  int64x2_t v41;
  _QWORD v42[2];
  char v43;
  char v44;
  int64x2_t v45;
  double v46;
  double v47;
  double v48;
  _BYTE v49[48];
  _OWORD v50[2];
  uint64_t v51;
  char v52;
  _BYTE v53[56];

  v4 = v3;
  outlined init with take of _ShapeStyle_Pack.Effect.Kind.AnimatableData(a2, (uint64_t)&v45);
  v41 = v45;
  v8 = v46;
  v9 = v47;
  v10 = v48;
  if (!*(_BYTE *)(v3 + 153))
  {
    if (one-time initialization token for introduced != -1)
      swift_once();
    v26 = static _SemanticFeature_v3.introduced;
    if (one-time initialization token for forced != -1)
      swift_once();
    swift_beginAccess();
    if (byte_25426FAB4 == 1)
    {
      if ((dyld_program_sdk_at_least() & 1) != 0)
        goto LABEL_2;
    }
    else if (static Semantics.forced >= v26)
    {
      goto LABEL_2;
    }
    swift_beginAccess();
    *(_QWORD *)(v3 + 16) = a1;
    swift_retain();
    swift_release();
    swift_beginAccess();
    outlined init with take of _ShapeStyle_Pack.Effect.Kind.AnimatableData(a2, v3 + 32);
    goto LABEL_17;
  }
LABEL_2:
  v11 = a3 - *(double *)(v3 + 80);
  swift_beginAccess();
  v12 = *(_QWORD *)(v3 + 24);
  v13 = *(_BYTE *)(v3 + 176);
  swift_bridgeObjectRetain();
  v42[0] = v12;
  v42[1] = AGCreateWeakAttribute();
  v43 = 0;
  v44 = v13;
  swift_beginAccess();
  v14 = *(_QWORD *)(v3 + 16);
  v15 = *(_QWORD *)(v3 + 24);
  swift_beginAccess();
  outlined init with take of _ShapeStyle_Pack.Effect.Kind.AnimatableData(v3 + 32, (uint64_t)v53);
  swift_retain();
  swift_bridgeObjectRetain();
  specialized AnimatorState.forkListeners(animation:state:interval:)(v14, v15, (uint64_t)v53);
  swift_bridgeObjectRelease();
  swift_release();
  *(_BYTE *)(v3 + 176) = 0;
  v16 = *(_QWORD *)(v3 + 64);
  v17 = *(_BYTE *)(v3 + 72);
  v18 = *(_OWORD *)(v3 + 48);
  v50[0] = *(_OWORD *)(v3 + 32);
  v50[1] = v18;
  v51 = v16;
  v52 = v17;
  v19 = *(uint64_t (**)(uint64_t, _OWORD *, _QWORD *, ValueMetadata *, unint64_t, double))(*(_QWORD *)a1 + 136);
  v20 = lazy protocol witness table accessor for type _ShapeStyle_Pack.Effect.Kind.AnimatableData and conformance _ShapeStyle_Pack.Effect.Kind.AnimatableData();
  v21 = swift_retain();
  LOBYTE(v20) = v19(v21, v50, v42, &type metadata for _ShapeStyle_Pack.Effect.Kind.AnimatableData, v20, v11);
  swift_release();
  if ((v20 & 1) != 0)
  {
    *(_QWORD *)(v4 + 24) = v42[0];
    swift_bridgeObjectRelease();
    *(_QWORD *)(v4 + 16) = a1;
    swift_retain();
    swift_release();
  }
  else
  {
    swift_bridgeObjectRelease();
    outlined init with take of _ShapeStyle_Pack.Effect.Kind.AnimatableData(v4 + 32, (uint64_t)v50);
    swift_beginAccess();
    swift_beginAccess();
    specialized combineAnimation<A>(into:state:value:elapsed:newAnimation:newValue:)((uint64_t *)(v4 + 16), (unint64_t *)(v4 + 24), (uint64_t)v50, a1, a2, v11);
    swift_endAccess();
    swift_endAccess();
  }
  v40 = *(int64x2_t *)(v4 + 32);
  v22 = *(double *)(v4 + 48);
  v23 = *(double *)(v4 + 56);
  v24 = *(double *)(v4 + 64);
  v25 = *(_BYTE *)(v4 + 72);
  outlined init with take of _ShapeStyle_Pack.Effect.Kind.AnimatableData(a2, (uint64_t)v49);
  if ((v49[40] & 1) == 0)
  {
    if ((v25 & 1) != 0)
    {
      outlined init with take of _ShapeStyle_Pack.Effect.Kind.AnimatableData(a2, v4 + 32);
    }
    else
    {
      v27 = vadd_f32((float32x2_t)vmovn_s64(v41), (float32x2_t)vmovn_s64(v40));
      v28.i64[0] = v27.u32[0];
      v28.i64[1] = v27.u32[1];
      *(int8x16_t *)(v4 + 32) = vorrq_s8((int8x16_t)vshll_n_s32((int32x2_t)vadd_f32((float32x2_t)vshrn_n_s64(v41, 0x20uLL), (float32x2_t)vshrn_n_s64(v40, 0x20uLL)), 0x20uLL), v28);
      *(double *)(v4 + 48) = v8 + v22;
      *(double *)(v4 + 56) = v9 + v23;
      *(double *)(v4 + 64) = v10 + v24;
      *(_BYTE *)(v4 + 72) = 0;
    }
  }
  *(double *)(v4 + 96) = a3;
LABEL_17:
  v29 = swift_retain();
  v30 = specialized find<A>(_:key:)(v29);
  if (!v30)
  {
    swift_release();
    return;
  }
  v31 = *(double *)(v30 + 72);
  v32 = *(_BYTE *)(v30 + 80);
  swift_release();
  if ((v32 & 1) != 0)
    return;
  v33 = 0.0;
  if (v31 > 0.0)
  {
    v34 = log2(v31 * 240.0);
    v33 = exp2(floor(v34 + 0.01)) * 0.00416666667;
  }
  if (v33 >= *(double *)(v4 + 88))
    v33 = *(double *)(v4 + 88);
  *(double *)(v4 + 88) = v33;
  if (v33 >= 0.0166666667)
  {
    v37 = 0;
    v39 = 1;
    goto LABEL_33;
  }
  v35 = swift_retain();
  v36 = specialized find<A>(_:key:)(v35);
  if (!v36)
  {
    swift_release();
    goto LABEL_32;
  }
  v37 = *(_DWORD *)(v36 + 72);
  v38 = *(_BYTE *)(v36 + 76);
  swift_release();
  if ((v38 & 1) != 0)
  {
LABEL_32:
    v37 = *(_DWORD *)(v4 + 148);
    v39 = *(_BYTE *)(v4 + 152);
    goto LABEL_33;
  }
  v39 = 0;
LABEL_33:
  *(_DWORD *)(v4 + 148) = v37;
  *(_BYTE *)(v4 + 152) = v39;
}

{
  uint64_t v3;
  uint64_t v4;
  double v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  char v16;
  uint64_t (*v17)(uint64_t, _BYTE *, _QWORD *, uint64_t, uint64_t, double);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  double v23;
  int64x2_t v24;
  float64x2_t v25;
  double v26;
  unsigned int v27;
  int64x2_t v28;
  float64x2_t v29;
  float32x2_t v30;
  int8x16_t v31;
  uint64_t v32;
  uint64_t v33;
  double v34;
  char v35;
  double v36;
  long double v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  char v41;
  char v42;
  __int128 v43;
  uint64_t v44;
  _QWORD v45[2];
  char v46;
  char v47;
  _BYTE v48[48];
  char v49;
  _OWORD v50[3];
  char v51;

  v4 = v3;
  if (!*(_BYTE *)(v3 + 169))
  {
    if (one-time initialization token for introduced != -1)
      swift_once();
    v27 = static _SemanticFeature_v3.introduced;
    if (one-time initialization token for forced != -1)
      swift_once();
    swift_beginAccess();
    if (byte_25426FAB4 == 1)
    {
      if ((dyld_program_sdk_at_least() & 1) != 0)
        goto LABEL_2;
    }
    else if (static Semantics.forced >= v27)
    {
      goto LABEL_2;
    }
    swift_beginAccess();
    *(_QWORD *)(v3 + 16) = a1;
    swift_retain();
    swift_release();
    swift_beginAccess();
    v43 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)(v3 + 32) = *(_OWORD *)a2;
    *(_OWORD *)(v3 + 48) = v43;
    *(_OWORD *)(v3 + 64) = *(_OWORD *)(a2 + 32);
    *(_BYTE *)(v3 + 80) = *(_BYTE *)(a2 + 48);
    goto LABEL_18;
  }
LABEL_2:
  v44 = a2;
  v8 = a3 - *(double *)(v3 + 88);
  swift_beginAccess();
  v9 = *(_QWORD *)(v3 + 24);
  v10 = *(_BYTE *)(v3 + 192);
  swift_bridgeObjectRetain();
  v45[0] = v9;
  v45[1] = AGCreateWeakAttribute();
  v46 = 0;
  v47 = v10;
  swift_beginAccess();
  v11 = a1;
  v12 = *(_QWORD *)(v3 + 16);
  v13 = *(_QWORD *)(v3 + 24);
  swift_beginAccess();
  v14 = *(_OWORD *)(v3 + 48);
  v50[0] = *(_OWORD *)(v3 + 32);
  v50[1] = v14;
  v50[2] = *(_OWORD *)(v3 + 64);
  v51 = *(_BYTE *)(v3 + 80);
  swift_retain();
  swift_bridgeObjectRetain();
  specialized AnimatorState.forkListeners(animation:state:interval:)(v12, v13, (int *)v50);
  swift_bridgeObjectRelease();
  swift_release();
  *(_BYTE *)(v3 + 192) = 0;
  v15 = *(_QWORD *)(v3 + 72);
  v16 = *(_BYTE *)(v3 + 80);
  *(_DWORD *)v48 = *(_DWORD *)(v3 + 32);
  *(_OWORD *)&v48[8] = *(_OWORD *)(v3 + 40);
  *(_OWORD *)&v48[24] = *(_OWORD *)(v3 + 56);
  *(_QWORD *)&v48[40] = v15;
  v49 = v16;
  v17 = *(uint64_t (**)(uint64_t, _BYTE *, _QWORD *, uint64_t, uint64_t, double))(*(_QWORD *)v11 + 136);
  v18 = type metadata accessor for AnimatablePair<Float, _ShapeStyle_Pack.Effect.Kind.AnimatableData>();
  v19 = lazy protocol witness table accessor for type AnimatablePair<Float, _ShapeStyle_Pack.Effect.Kind.AnimatableData> and conformance AnimatablePair<A, B>();
  v20 = swift_retain();
  LOBYTE(v17) = v17(v20, v48, v45, v18, v19, v8);
  swift_release();
  if ((v17 & 1) != 0)
  {
    *(_QWORD *)(v4 + 24) = v45[0];
    swift_bridgeObjectRelease();
    *(_QWORD *)(v4 + 16) = v11;
    swift_retain();
    swift_release();
    v21 = v44;
  }
  else
  {
    swift_bridgeObjectRelease();
    v22 = *(_OWORD *)(v4 + 48);
    *(_OWORD *)v48 = *(_OWORD *)(v4 + 32);
    *(_OWORD *)&v48[16] = v22;
    *(_OWORD *)&v48[32] = *(_OWORD *)(v4 + 64);
    v49 = *(_BYTE *)(v4 + 80);
    swift_beginAccess();
    swift_beginAccess();
    v21 = v44;
    specialized combineAnimation<A>(into:state:value:elapsed:newAnimation:newValue:)((uint64_t *)(v4 + 16), (unint64_t *)(v4 + 24), (uint64_t)v48, v11, v44, v8);
    swift_endAccess();
    swift_endAccess();
  }
  *(float *)(v4 + 32) = *(float *)v21 + *(float *)(v4 + 32);
  if ((*(_BYTE *)(v21 + 48) & 1) == 0)
  {
    v23 = *(double *)(v21 + 40);
    v24 = *(int64x2_t *)(v21 + 8);
    v25 = *(float64x2_t *)(v21 + 24);
    if ((*(_BYTE *)(v4 + 80) & 1) != 0)
    {
      *(int64x2_t *)(v4 + 40) = v24;
      *(float64x2_t *)(v4 + 56) = v25;
      v26 = v23;
    }
    else
    {
      v28 = *(int64x2_t *)(v4 + 40);
      v29 = *(float64x2_t *)(v4 + 56);
      v26 = *(double *)(v4 + 72) + v23;
      v30 = vadd_f32((float32x2_t)vmovn_s64(v24), (float32x2_t)vmovn_s64(v28));
      v31.i64[0] = v30.u32[0];
      v31.i64[1] = v30.u32[1];
      *(int8x16_t *)(v4 + 40) = vorrq_s8((int8x16_t)vshll_n_s32((int32x2_t)vadd_f32((float32x2_t)vshrn_n_s64(v24, 0x20uLL), (float32x2_t)vshrn_n_s64(v28, 0x20uLL)), 0x20uLL), v31);
      *(float64x2_t *)(v4 + 56) = vaddq_f64(v29, v25);
    }
    *(double *)(v4 + 72) = v26;
    *(_BYTE *)(v4 + 80) = 0;
  }
  *(double *)(v4 + 104) = a3;
LABEL_18:
  v32 = swift_retain();
  v33 = specialized find<A>(_:key:)(v32);
  if (!v33)
  {
    swift_release();
    return;
  }
  v34 = *(double *)(v33 + 72);
  v35 = *(_BYTE *)(v33 + 80);
  swift_release();
  if ((v35 & 1) != 0)
    return;
  v36 = 0.0;
  if (v34 > 0.0)
  {
    v37 = log2(v34 * 240.0);
    v36 = exp2(floor(v37 + 0.01)) * 0.00416666667;
  }
  if (v36 >= *(double *)(v4 + 96))
    v36 = *(double *)(v4 + 96);
  *(double *)(v4 + 96) = v36;
  if (v36 >= 0.0166666667)
  {
    v40 = 0;
    v42 = 1;
    goto LABEL_34;
  }
  v38 = swift_retain();
  v39 = specialized find<A>(_:key:)(v38);
  if (!v39)
  {
    swift_release();
    goto LABEL_33;
  }
  v40 = *(_DWORD *)(v39 + 72);
  v41 = *(_BYTE *)(v39 + 76);
  swift_release();
  if ((v41 & 1) != 0)
  {
LABEL_33:
    v40 = *(_DWORD *)(v4 + 164);
    v42 = *(_BYTE *)(v4 + 168);
    goto LABEL_34;
  }
  v42 = 0;
LABEL_34:
  *(_DWORD *)(v4 + 164) = v40;
  *(_BYTE *)(v4 + 168) = v42;
}

{
  uint64_t v3;
  uint64_t v4;
  double v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  __int128 v15;
  uint64_t (*v16)(uint64_t, __int128 *, _QWORD *, uint64_t, unint64_t, double);
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  float64x2_t *v20;
  __int128 v21;
  double v22;
  float64x2_t v23;
  uint64_t v24;
  uint64_t v25;
  double v26;
  char v27;
  double v28;
  long double v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  char v33;
  char v34;
  unsigned int v35;
  __int128 v36;
  double *v37;
  _QWORD v38[2];
  char v39;
  char v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;
  __int128 v44[2];
  uint64_t v45;

  v4 = v3;
  if (!*(_BYTE *)(v3 + 141))
  {
    if (one-time initialization token for introduced != -1)
      swift_once();
    v35 = static _SemanticFeature_v3.introduced;
    if (one-time initialization token for forced != -1)
      swift_once();
    swift_beginAccess();
    if (byte_25426FAB4 == 1)
    {
      if ((dyld_program_sdk_at_least() & 1) != 0)
        goto LABEL_2;
    }
    else if (static Semantics.forced >= v35)
    {
      goto LABEL_2;
    }
    swift_beginAccess();
    *(_QWORD *)(v3 + 16) = a1;
    swift_retain();
    swift_release();
    swift_beginAccess();
    v36 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)(v3 + 32) = *(_OWORD *)a2;
    *(_OWORD *)(v3 + 48) = v36;
    *(_QWORD *)(v3 + 64) = *(_QWORD *)(a2 + 32);
    goto LABEL_6;
  }
LABEL_2:
  v37 = (double *)a2;
  v8 = a3 - *(double *)(v3 + 72);
  swift_beginAccess();
  v9 = *(_QWORD *)(v3 + 24);
  v10 = *(_BYTE *)(v3 + 160);
  swift_bridgeObjectRetain();
  v38[0] = v9;
  v38[1] = AGCreateWeakAttribute();
  v39 = 0;
  v40 = v10;
  swift_beginAccess();
  v11 = *(_QWORD *)(v3 + 16);
  v12 = *(_QWORD *)(v3 + 24);
  swift_beginAccess();
  v13 = *(_OWORD *)(v3 + 48);
  v44[0] = *(_OWORD *)(v3 + 32);
  v44[1] = v13;
  v45 = *(_QWORD *)(v3 + 64);
  swift_retain();
  swift_bridgeObjectRetain();
  specialized AnimatorState.forkListeners(animation:state:interval:)(v11, v12, v44);
  swift_bridgeObjectRelease();
  swift_release();
  *(_BYTE *)(v3 + 160) = 0;
  v14 = *(_QWORD *)(v3 + 64);
  v15 = *(_OWORD *)(v3 + 48);
  v41 = *(_OWORD *)(v3 + 32);
  v42 = v15;
  v43 = v14;
  v16 = *(uint64_t (**)(uint64_t, __int128 *, _QWORD *, uint64_t, unint64_t, double))(*(_QWORD *)a1 + 136);
  v17 = type metadata accessor for AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>, CGFloat>(0, &lazy cache variable for type metadata for AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>, CGFloat>, (void (*)(void))lazy protocol witness table accessor for type CGFloat and conformance CGFloat);
  v18 = lazy protocol witness table accessor for type AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>, CGFloat> and conformance AnimatablePair<A, B>();
  v19 = swift_retain();
  LOBYTE(v17) = v16(v19, &v41, v38, v17, v18, v8);
  swift_release();
  if ((v17 & 1) != 0)
  {
    *(_QWORD *)(v4 + 24) = v38[0];
    swift_bridgeObjectRelease();
    *(_QWORD *)(v4 + 16) = a1;
    swift_retain();
    swift_release();
    v20 = (float64x2_t *)v37;
  }
  else
  {
    swift_bridgeObjectRelease();
    v21 = *(_OWORD *)(v4 + 48);
    v41 = *(_OWORD *)(v4 + 32);
    v42 = v21;
    v43 = *(_QWORD *)(v4 + 64);
    swift_beginAccess();
    swift_beginAccess();
    v20 = (float64x2_t *)v37;
    specialized combineAnimation<A>(into:state:value:elapsed:newAnimation:newValue:)((uint64_t *)(v4 + 16), (unint64_t *)(v4 + 24), (double *)&v41, a1, v37, v8);
    swift_endAccess();
    swift_endAccess();
  }
  v22 = v20[2].f64[0];
  v23 = vaddq_f64(v20[1], *(float64x2_t *)(v4 + 48));
  *(float64x2_t *)(v4 + 32) = vaddq_f64(*v20, *(float64x2_t *)(v4 + 32));
  *(float64x2_t *)(v4 + 48) = v23;
  *(double *)(v4 + 64) = v22 + *(double *)(v4 + 64);
  *(double *)(v4 + 88) = a3;
LABEL_6:
  v24 = swift_retain();
  v25 = specialized find<A>(_:key:)(v24);
  if (!v25)
  {
    swift_release();
    return;
  }
  v26 = *(double *)(v25 + 72);
  v27 = *(_BYTE *)(v25 + 80);
  swift_release();
  if ((v27 & 1) != 0)
    return;
  v28 = 0.0;
  if (v26 > 0.0)
  {
    v29 = log2(v26 * 240.0);
    v28 = exp2(floor(v29 + 0.01)) * 0.00416666667;
  }
  if (v28 >= *(double *)(v4 + 80))
    v28 = *(double *)(v4 + 80);
  *(double *)(v4 + 80) = v28;
  if (v28 >= 0.0166666667)
  {
    v32 = 0;
    v34 = 1;
    goto LABEL_29;
  }
  v30 = swift_retain();
  v31 = specialized find<A>(_:key:)(v30);
  if (!v31)
  {
    swift_release();
    goto LABEL_28;
  }
  v32 = *(_DWORD *)(v31 + 72);
  v33 = *(_BYTE *)(v31 + 76);
  swift_release();
  if ((v33 & 1) != 0)
  {
LABEL_28:
    v32 = *(_DWORD *)(v4 + 136);
    v34 = *(_BYTE *)(v4 + 140);
    goto LABEL_29;
  }
  v34 = 0;
LABEL_29:
  *(_DWORD *)(v4 + 136) = v32;
  *(_BYTE *)(v4 + 140) = v34;
}

{
  uint64_t v3;
  uint64_t v4;
  double v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(uint64_t, __int128 *, _QWORD *, uint64_t, uint64_t, double);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  double v20;
  char v21;
  double v22;
  long double v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  char v27;
  char v28;
  unsigned int v29;
  uint64_t v30;
  _QWORD v31[2];
  char v32;
  char v33;
  __int128 v34;
  uint64_t v35;
  __int128 v36;
  uint64_t v37;

  v4 = v3;
  if (!*(_BYTE *)(v3 + 109))
  {
    if (one-time initialization token for introduced != -1)
      swift_once();
    v29 = static _SemanticFeature_v3.introduced;
    if (one-time initialization token for forced != -1)
      swift_once();
    swift_beginAccess();
    if (byte_25426FAB4 == 1)
    {
      if ((dyld_program_sdk_at_least() & 1) != 0)
        goto LABEL_2;
    }
    else if (static Semantics.forced >= v29)
    {
      goto LABEL_2;
    }
    swift_beginAccess();
    *(_QWORD *)(v3 + 16) = a1;
    swift_retain();
    swift_release();
    swift_beginAccess();
    *(_OWORD *)(v3 + 32) = *(_OWORD *)a2;
    *(_QWORD *)(v3 + 48) = *(_QWORD *)(a2 + 16);
    goto LABEL_6;
  }
LABEL_2:
  v30 = a2;
  v8 = a3 - *(double *)(v3 + 56);
  swift_beginAccess();
  v9 = *(_QWORD *)(v3 + 24);
  v10 = *(_BYTE *)(v3 + 128);
  swift_bridgeObjectRetain();
  v31[0] = v9;
  v31[1] = AGCreateWeakAttribute();
  v32 = 0;
  v33 = v10;
  swift_beginAccess();
  v11 = *(_QWORD *)(v3 + 16);
  v12 = *(_QWORD *)(v3 + 24);
  swift_beginAccess();
  v36 = *(_OWORD *)(v3 + 32);
  v37 = *(_QWORD *)(v3 + 48);
  swift_retain();
  swift_bridgeObjectRetain();
  specialized AnimatorState.forkListeners(animation:state:interval:)(v11, v12, &v36);
  swift_bridgeObjectRelease();
  swift_release();
  *(_BYTE *)(v3 + 128) = 0;
  v34 = *(_OWORD *)(v3 + 32);
  v35 = *(_QWORD *)(v3 + 48);
  v13 = *(uint64_t (**)(uint64_t, __int128 *, _QWORD *, uint64_t, uint64_t, double))(*(_QWORD *)a1 + 136);
  v14 = type metadata accessor for AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>>(0);
  v15 = lazy protocol witness table accessor for type AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>> and conformance AnimatablePair<A, B>();
  v16 = swift_retain();
  LOBYTE(v14) = v13(v16, &v34, v31, v14, v15, v8);
  swift_release();
  if ((v14 & 1) != 0)
  {
    *(_QWORD *)(v4 + 24) = v31[0];
    swift_bridgeObjectRelease();
    *(_QWORD *)(v4 + 16) = a1;
    swift_retain();
    swift_release();
    v17 = v30;
  }
  else
  {
    swift_bridgeObjectRelease();
    v34 = *(_OWORD *)(v4 + 32);
    v35 = *(_QWORD *)(v4 + 48);
    swift_beginAccess();
    swift_beginAccess();
    v17 = v30;
    specialized combineAnimation<A>(into:state:value:elapsed:newAnimation:newValue:)((uint64_t *)(v4 + 16), (unint64_t *)(v4 + 24), (double *)&v34, a1, v30, v8);
    swift_endAccess();
    swift_endAccess();
  }
  *(float32x4_t *)(v4 + 32) = vaddq_f32(*(float32x4_t *)v17, *(float32x4_t *)(v4 + 32));
  *(float32x2_t *)(v4 + 48) = vadd_f32(*(float32x2_t *)(v17 + 16), *(float32x2_t *)(v4 + 48));
  *(double *)(v4 + 72) = a3;
LABEL_6:
  v18 = swift_retain();
  v19 = specialized find<A>(_:key:)(v18);
  if (!v19)
  {
    swift_release();
    return;
  }
  v20 = *(double *)(v19 + 72);
  v21 = *(_BYTE *)(v19 + 80);
  swift_release();
  if ((v21 & 1) != 0)
    return;
  v22 = 0.0;
  if (v20 > 0.0)
  {
    v23 = log2(v20 * 240.0);
    v22 = exp2(floor(v23 + 0.01)) * 0.00416666667;
  }
  if (v22 >= *(double *)(v4 + 64))
    v22 = *(double *)(v4 + 64);
  *(double *)(v4 + 64) = v22;
  if (v22 >= 0.0166666667)
  {
    v26 = 0;
    v28 = 1;
    goto LABEL_29;
  }
  v24 = swift_retain();
  v25 = specialized find<A>(_:key:)(v24);
  if (!v25)
  {
    swift_release();
    goto LABEL_28;
  }
  v26 = *(_DWORD *)(v25 + 72);
  v27 = *(_BYTE *)(v25 + 76);
  swift_release();
  if ((v27 & 1) != 0)
  {
LABEL_28:
    v26 = *(_DWORD *)(v4 + 104);
    v28 = *(_BYTE *)(v4 + 108);
    goto LABEL_29;
  }
  v28 = 0;
LABEL_29:
  *(_DWORD *)(v4 + 104) = v26;
  *(_BYTE *)(v4 + 108) = v28;
}

void specialized AnimatorState.combine(newAnimation:newInterval:at:in:environment:)(uint64_t a1, float a2, float a3, float a4, float a5, double a6)
{
  uint64_t v6;
  uint64_t v7;
  float v14;
  double v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  float v20;
  float v21;
  float v22;
  float v23;
  uint64_t (*v24)(uint64_t, __int128 *, _QWORD *, uint64_t, uint64_t, double);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  uint64_t v38;
  uint64_t v39;
  double v40;
  char v41;
  double v42;
  long double v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  char v47;
  char v48;
  unsigned int v49;
  float v50;
  float v51;
  __int128 v52;
  _QWORD v53[2];
  char v54;
  char v55;

  v7 = v6;
  if (!*(_BYTE *)(v6 + 93))
  {
    if (one-time initialization token for introduced != -1)
      swift_once();
    v49 = static _SemanticFeature_v3.introduced;
    if (one-time initialization token for forced != -1)
      swift_once();
    swift_beginAccess();
    if (byte_25426FAB4 == 1)
    {
      if ((dyld_program_sdk_at_least() & 1) != 0)
        goto LABEL_2;
    }
    else if (static Semantics.forced >= v49)
    {
      goto LABEL_2;
    }
    swift_beginAccess();
    *(_QWORD *)(v6 + 16) = a1;
    swift_retain();
    swift_release();
    swift_beginAccess();
    *(float *)(v6 + 32) = a2;
    *(float *)(v6 + 36) = a3;
    *(float *)(v6 + 40) = a4;
    *(float *)(v6 + 44) = a5;
    goto LABEL_6;
  }
LABEL_2:
  v50 = a3;
  v51 = a4;
  v14 = a5;
  v15 = a6 - *(double *)(v6 + 48);
  swift_beginAccess();
  v16 = *(_QWORD *)(v6 + 24);
  v17 = *(_BYTE *)(v6 + 112);
  swift_bridgeObjectRetain();
  v53[0] = v16;
  v53[1] = AGCreateWeakAttribute();
  v54 = 0;
  v55 = v17;
  swift_beginAccess();
  v18 = *(_QWORD *)(v6 + 16);
  v19 = *(_QWORD *)(v6 + 24);
  swift_beginAccess();
  v20 = *(float *)(v6 + 32);
  v21 = *(float *)(v6 + 36);
  v22 = *(float *)(v6 + 40);
  v23 = *(float *)(v6 + 44);
  swift_retain();
  swift_bridgeObjectRetain();
  specialized AnimatorState.forkListeners(animation:state:interval:)(v18, v19, v20, v21, v22, v23);
  swift_bridgeObjectRelease();
  swift_release();
  *(_BYTE *)(v6 + 112) = 0;
  v52 = *(_OWORD *)(v6 + 32);
  v24 = *(uint64_t (**)(uint64_t, __int128 *, _QWORD *, uint64_t, uint64_t, double))(*(_QWORD *)a1 + 136);
  v25 = type metadata accessor for AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>(0);
  v26 = lazy protocol witness table accessor for type AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>> and conformance AnimatablePair<A, B>();
  v27 = swift_retain();
  LOBYTE(v25) = v24(v27, &v52, v53, v25, v26, v15);
  swift_release();
  if ((v25 & 1) != 0)
  {
    *(_QWORD *)(v7 + 24) = v53[0];
    swift_bridgeObjectRelease();
    *(_QWORD *)(v7 + 16) = a1;
    swift_retain();
    swift_release();
    v29 = v50;
    v28 = v51;
  }
  else
  {
    swift_bridgeObjectRelease();
    v30 = *(float *)(v7 + 32);
    v31 = *(float *)(v7 + 36);
    v32 = *(float *)(v7 + 40);
    v33 = *(float *)(v7 + 44);
    swift_beginAccess();
    swift_beginAccess();
    v34 = v30;
    v35 = v31;
    v29 = v50;
    v28 = v51;
    specialized combineAnimation<A>(into:state:value:elapsed:newAnimation:newValue:)((uint64_t *)(v7 + 16), (unint64_t *)(v7 + 24), a1, v34, v35, v32, v33, v15, a2, v50, v51, v14);
    swift_endAccess();
    swift_endAccess();
  }
  v36 = *(float *)(v7 + 36) + v29;
  *(float *)(v7 + 32) = *(float *)(v7 + 32) + a2;
  *(float *)(v7 + 36) = v36;
  v37 = *(float *)(v7 + 44) + v14;
  *(float *)(v7 + 40) = *(float *)(v7 + 40) + v28;
  *(float *)(v7 + 44) = v37;
  *(double *)(v7 + 64) = a6;
LABEL_6:
  v38 = swift_retain();
  v39 = specialized find<A>(_:key:)(v38);
  if (!v39)
  {
    swift_release();
    return;
  }
  v40 = *(double *)(v39 + 72);
  v41 = *(_BYTE *)(v39 + 80);
  swift_release();
  if ((v41 & 1) != 0)
    return;
  v42 = 0.0;
  if (v40 > 0.0)
  {
    v43 = log2(v40 * 240.0);
    v42 = exp2(floor(v43 + 0.01)) * 0.00416666667;
  }
  if (v42 >= *(double *)(v7 + 56))
    v42 = *(double *)(v7 + 56);
  *(double *)(v7 + 56) = v42;
  if (v42 >= 0.0166666667)
  {
    v46 = 0;
    v48 = 1;
    goto LABEL_29;
  }
  v44 = swift_retain();
  v45 = specialized find<A>(_:key:)(v44);
  if (!v45)
  {
    swift_release();
    goto LABEL_28;
  }
  v46 = *(_DWORD *)(v45 + 72);
  v47 = *(_BYTE *)(v45 + 76);
  swift_release();
  if ((v47 & 1) != 0)
  {
LABEL_28:
    v46 = *(_DWORD *)(v7 + 88);
    v48 = *(_BYTE *)(v7 + 92);
    goto LABEL_29;
  }
  v48 = 0;
LABEL_29:
  *(_DWORD *)(v7 + 88) = v46;
  *(_BYTE *)(v7 + 92) = v48;
}

void specialized AnimatorState.combine(newAnimation:newInterval:at:in:environment:)(uint64_t a1, double a2, double a3)
{
  uint64_t v3;
  uint64_t v4;
  double v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  double v13;
  uint64_t (*v14)(uint64_t, _QWORD *, _QWORD *, _QWORD, _UNKNOWN **, double);
  uint64_t v15;
  char v16;
  double v17;
  uint64_t v18;
  uint64_t v19;
  double v20;
  char v21;
  double v22;
  long double v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  char v27;
  char v28;
  unsigned int v29;
  _QWORD v30[3];
  _QWORD v31[2];
  char v32;
  char v33;

  v4 = v3;
  if (!*(_BYTE *)(v3 + 77))
  {
    if (one-time initialization token for introduced != -1)
      swift_once();
    v29 = static _SemanticFeature_v3.introduced;
    if (one-time initialization token for forced != -1)
      swift_once();
    swift_beginAccess();
    if (byte_25426FAB4 == 1)
    {
      if ((dyld_program_sdk_at_least() & 1) != 0)
        goto LABEL_2;
    }
    else if (static Semantics.forced >= v29)
    {
      goto LABEL_2;
    }
    swift_beginAccess();
    *(_QWORD *)(v3 + 16) = a1;
    swift_retain();
    swift_release();
    swift_beginAccess();
    *(double *)(v3 + 32) = a2;
    goto LABEL_6;
  }
LABEL_2:
  v8 = a3 - *(double *)(v3 + 40);
  swift_beginAccess();
  v9 = *(_QWORD *)(v3 + 24);
  v10 = *(_BYTE *)(v3 + 96);
  swift_bridgeObjectRetain();
  v31[0] = v9;
  v31[1] = AGCreateWeakAttribute();
  v32 = 0;
  v33 = v10;
  swift_beginAccess();
  v11 = *(_QWORD *)(v3 + 16);
  v12 = *(_QWORD *)(v3 + 24);
  swift_beginAccess();
  v13 = *(double *)(v3 + 32);
  swift_retain();
  swift_bridgeObjectRetain();
  specialized AnimatorState.forkListeners(animation:state:interval:)(v11, v12, v13);
  swift_bridgeObjectRelease();
  swift_release();
  *(_BYTE *)(v3 + 96) = 0;
  v30[0] = *(_QWORD *)(v3 + 32);
  v14 = *(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, _QWORD, _UNKNOWN **, double))(*(_QWORD *)a1 + 136);
  v15 = swift_retain();
  v16 = v14(v15, v30, v31, MEMORY[0x24BEE13C8], &protocol witness table for Double, v8);
  swift_release();
  if ((v16 & 1) != 0)
  {
    *(_QWORD *)(v4 + 24) = v31[0];
    swift_bridgeObjectRelease();
    *(_QWORD *)(v4 + 16) = a1;
    swift_retain();
    swift_release();
  }
  else
  {
    swift_bridgeObjectRelease();
    v17 = *(double *)(v4 + 32);
    swift_beginAccess();
    swift_beginAccess();
    specialized combineAnimation<A>(into:state:value:elapsed:newAnimation:newValue:)((uint64_t *)(v4 + 16), (unint64_t *)(v4 + 24), a1, v17, v8, a2);
    swift_endAccess();
    swift_endAccess();
  }
  *(double *)(v4 + 32) = *(double *)(v4 + 32) + a2;
  *(double *)(v4 + 56) = a3;
LABEL_6:
  v18 = swift_retain();
  v19 = specialized find<A>(_:key:)(v18);
  if (!v19)
  {
    swift_release();
    return;
  }
  v20 = *(double *)(v19 + 72);
  v21 = *(_BYTE *)(v19 + 80);
  swift_release();
  if ((v21 & 1) != 0)
    return;
  v22 = 0.0;
  if (v20 > 0.0)
  {
    v23 = log2(v20 * 240.0);
    v22 = exp2(floor(v23 + 0.01)) * 0.00416666667;
  }
  if (v22 >= *(double *)(v4 + 48))
    v22 = *(double *)(v4 + 48);
  *(double *)(v4 + 48) = v22;
  if (v22 >= 0.0166666667)
  {
    v26 = 0;
    v28 = 1;
    goto LABEL_29;
  }
  v24 = swift_retain();
  v25 = specialized find<A>(_:key:)(v24);
  if (!v25)
  {
    swift_release();
    goto LABEL_28;
  }
  v26 = *(_DWORD *)(v25 + 72);
  v27 = *(_BYTE *)(v25 + 76);
  swift_release();
  if ((v27 & 1) != 0)
  {
LABEL_28:
    v26 = *(_DWORD *)(v4 + 72);
    v28 = *(_BYTE *)(v4 + 76);
    goto LABEL_29;
  }
  v28 = 0;
LABEL_29:
  *(_DWORD *)(v4 + 72) = v26;
  *(_BYTE *)(v4 + 76) = v28;
}

{
  uint64_t v3;
  uint64_t v4;
  double v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  double v13;
  uint64_t (*v14)(uint64_t, _QWORD *, _QWORD *, _QWORD, unint64_t, double);
  unint64_t v15;
  uint64_t v16;
  double v17;
  uint64_t v18;
  uint64_t v19;
  double v20;
  char v21;
  double v22;
  long double v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  char v27;
  char v28;
  unsigned int v29;
  _QWORD v30[3];
  _QWORD v31[2];
  char v32;
  char v33;

  v4 = v3;
  if (!*(_BYTE *)(v3 + 77))
  {
    if (one-time initialization token for introduced != -1)
      swift_once();
    v29 = static _SemanticFeature_v3.introduced;
    if (one-time initialization token for forced != -1)
      swift_once();
    swift_beginAccess();
    if (byte_25426FAB4 == 1)
    {
      if ((dyld_program_sdk_at_least() & 1) != 0)
        goto LABEL_2;
    }
    else if (static Semantics.forced >= v29)
    {
      goto LABEL_2;
    }
    swift_beginAccess();
    *(_QWORD *)(v3 + 16) = a1;
    swift_retain();
    swift_release();
    swift_beginAccess();
    *(double *)(v3 + 32) = a2;
    goto LABEL_6;
  }
LABEL_2:
  v8 = a3 - *(double *)(v3 + 40);
  swift_beginAccess();
  v9 = *(_QWORD *)(v3 + 24);
  v10 = *(_BYTE *)(v3 + 96);
  swift_bridgeObjectRetain();
  v31[0] = v9;
  v31[1] = AGCreateWeakAttribute();
  v32 = 0;
  v33 = v10;
  swift_beginAccess();
  v11 = *(_QWORD *)(v3 + 16);
  v12 = *(_QWORD *)(v3 + 24);
  swift_beginAccess();
  v13 = *(double *)(v3 + 32);
  swift_retain();
  swift_bridgeObjectRetain();
  specialized AnimatorState.forkListeners(animation:state:interval:)(v11, v12, v13);
  swift_bridgeObjectRelease();
  swift_release();
  *(_BYTE *)(v3 + 96) = 0;
  v30[0] = *(_QWORD *)(v3 + 32);
  v14 = *(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, _QWORD, unint64_t, double))(*(_QWORD *)a1 + 136);
  v15 = lazy protocol witness table accessor for type CGFloat and conformance CGFloat();
  v16 = swift_retain();
  LOBYTE(v15) = v14(v16, v30, v31, MEMORY[0x24BEE50B0], v15, v8);
  swift_release();
  if ((v15 & 1) != 0)
  {
    *(_QWORD *)(v4 + 24) = v31[0];
    swift_bridgeObjectRelease();
    *(_QWORD *)(v4 + 16) = a1;
    swift_retain();
    swift_release();
  }
  else
  {
    swift_bridgeObjectRelease();
    v17 = *(double *)(v4 + 32);
    swift_beginAccess();
    swift_beginAccess();
    specialized combineAnimation<A>(into:state:value:elapsed:newAnimation:newValue:)((uint64_t *)(v4 + 16), (unint64_t *)(v4 + 24), a1, v17, v8, a2);
    swift_endAccess();
    swift_endAccess();
  }
  *(double *)(v4 + 32) = *(double *)(v4 + 32) + a2;
  *(double *)(v4 + 56) = a3;
LABEL_6:
  v18 = swift_retain();
  v19 = specialized find<A>(_:key:)(v18);
  if (!v19)
  {
    swift_release();
    return;
  }
  v20 = *(double *)(v19 + 72);
  v21 = *(_BYTE *)(v19 + 80);
  swift_release();
  if ((v21 & 1) != 0)
    return;
  v22 = 0.0;
  if (v20 > 0.0)
  {
    v23 = log2(v20 * 240.0);
    v22 = exp2(floor(v23 + 0.01)) * 0.00416666667;
  }
  if (v22 >= *(double *)(v4 + 48))
    v22 = *(double *)(v4 + 48);
  *(double *)(v4 + 48) = v22;
  if (v22 >= 0.0166666667)
  {
    v26 = 0;
    v28 = 1;
    goto LABEL_29;
  }
  v24 = swift_retain();
  v25 = specialized find<A>(_:key:)(v24);
  if (!v25)
  {
    swift_release();
    goto LABEL_28;
  }
  v26 = *(_DWORD *)(v25 + 72);
  v27 = *(_BYTE *)(v25 + 76);
  swift_release();
  if ((v27 & 1) != 0)
  {
LABEL_28:
    v26 = *(_DWORD *)(v4 + 72);
    v28 = *(_BYTE *)(v4 + 76);
    goto LABEL_29;
  }
  v28 = 0;
LABEL_29:
  *(_DWORD *)(v4 + 72) = v26;
  *(_BYTE *)(v4 + 76) = v28;
}

void specialized AnimatorState.combine(newAnimation:newInterval:at:in:environment:)(uint64_t a1, double *a2, double a3)
{
  uint64_t v3;
  uint64_t v4;
  double v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t (*v18)(uint64_t, __int128 *, _QWORD *, uint64_t, uint64_t, double);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  float64x2_t *v22;
  __int128 v23;
  __int128 v24;
  float64x2_t v25;
  float64x2_t v26;
  uint64_t v27;
  uint64_t v28;
  double v29;
  char v30;
  double v31;
  long double v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  char v36;
  char v37;
  unsigned int v38;
  __int128 v39;
  __int128 v40;
  double *v41;
  _QWORD v42[2];
  char v43;
  char v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49[5];

  v4 = v3;
  if (!*(_BYTE *)(v3 + 189))
  {
    if (one-time initialization token for introduced != -1)
      swift_once();
    v38 = static _SemanticFeature_v3.introduced;
    if (one-time initialization token for forced != -1)
      swift_once();
    swift_beginAccess();
    if (byte_25426FAB4 == 1)
    {
      if ((dyld_program_sdk_at_least() & 1) != 0)
        goto LABEL_2;
    }
    else if (static Semantics.forced >= v38)
    {
      goto LABEL_2;
    }
    swift_beginAccess();
    *(_QWORD *)(v3 + 16) = a1;
    swift_retain();
    swift_release();
    swift_beginAccess();
    v39 = *((_OWORD *)a2 + 1);
    *(_OWORD *)(v3 + 32) = *(_OWORD *)a2;
    *(_OWORD *)(v3 + 48) = v39;
    v40 = *((_OWORD *)a2 + 3);
    *(_OWORD *)(v3 + 64) = *((_OWORD *)a2 + 2);
    *(_OWORD *)(v3 + 80) = v40;
    goto LABEL_6;
  }
LABEL_2:
  v41 = a2;
  v8 = a3 - *(double *)(v3 + 96);
  swift_beginAccess();
  v9 = *(_QWORD *)(v3 + 24);
  v10 = *(_BYTE *)(v3 + 208);
  swift_bridgeObjectRetain();
  v42[0] = v9;
  v42[1] = AGCreateWeakAttribute();
  v43 = 0;
  v44 = v10;
  swift_beginAccess();
  v11 = a1;
  v12 = *(_QWORD *)(v3 + 16);
  v13 = *(_QWORD *)(v3 + 24);
  swift_beginAccess();
  v14 = *(_OWORD *)(v3 + 48);
  v49[0] = *(_OWORD *)(v3 + 32);
  v49[1] = v14;
  v15 = *(_OWORD *)(v3 + 80);
  v49[2] = *(_OWORD *)(v3 + 64);
  v49[3] = v15;
  swift_retain();
  swift_bridgeObjectRetain();
  specialized AnimatorState.forkListeners(animation:state:interval:)(v12, v13, v49);
  swift_bridgeObjectRelease();
  swift_release();
  *(_BYTE *)(v3 + 208) = 0;
  v16 = *(_OWORD *)(v3 + 48);
  v45 = *(_OWORD *)(v3 + 32);
  v46 = v16;
  v17 = *(_OWORD *)(v3 + 80);
  v47 = *(_OWORD *)(v3 + 64);
  v48 = v17;
  v18 = *(uint64_t (**)(uint64_t, __int128 *, _QWORD *, uint64_t, uint64_t, double))(*(_QWORD *)v11 + 136);
  v19 = type metadata accessor for AnimatablePair<Double, AnimatablePair<CGFloat, AnimatablePair<CGFloat, AnimatablePair<CGFloat, AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>>>>>();
  v20 = lazy protocol witness table accessor for type AnimatablePair<Double, AnimatablePair<CGFloat, AnimatablePair<CGFloat, AnimatablePair<CGFloat, AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>>>>> and conformance AnimatablePair<A, B>();
  v21 = swift_retain();
  LOBYTE(v18) = v18(v21, &v45, v42, v19, v20, v8);
  swift_release();
  if ((v18 & 1) != 0)
  {
    *(_QWORD *)(v4 + 24) = v42[0];
    swift_bridgeObjectRelease();
    *(_QWORD *)(v4 + 16) = v11;
    swift_retain();
    swift_release();
    v22 = (float64x2_t *)v41;
  }
  else
  {
    swift_bridgeObjectRelease();
    v23 = *(_OWORD *)(v4 + 48);
    v45 = *(_OWORD *)(v4 + 32);
    v46 = v23;
    v24 = *(_OWORD *)(v4 + 80);
    v47 = *(_OWORD *)(v4 + 64);
    v48 = v24;
    swift_beginAccess();
    swift_beginAccess();
    v22 = (float64x2_t *)v41;
    specialized combineAnimation<A>(into:state:value:elapsed:newAnimation:newValue:)((uint64_t *)(v4 + 16), (unint64_t *)(v4 + 24), (double *)&v45, v11, v41, v8);
    swift_endAccess();
    swift_endAccess();
  }
  v25 = vaddq_f64(v22[1], *(float64x2_t *)(v4 + 48));
  *(float64x2_t *)(v4 + 32) = vaddq_f64(*v22, *(float64x2_t *)(v4 + 32));
  *(float64x2_t *)(v4 + 48) = v25;
  v26 = vaddq_f64(v22[3], *(float64x2_t *)(v4 + 80));
  *(float64x2_t *)(v4 + 64) = vaddq_f64(v22[2], *(float64x2_t *)(v4 + 64));
  *(float64x2_t *)(v4 + 80) = v26;
  *(double *)(v4 + 112) = a3;
LABEL_6:
  v27 = swift_retain();
  v28 = specialized find<A>(_:key:)(v27);
  if (!v28)
  {
    swift_release();
    return;
  }
  v29 = *(double *)(v28 + 72);
  v30 = *(_BYTE *)(v28 + 80);
  swift_release();
  if ((v30 & 1) != 0)
    return;
  v31 = 0.0;
  if (v29 > 0.0)
  {
    v32 = log2(v29 * 240.0);
    v31 = exp2(floor(v32 + 0.01)) * 0.00416666667;
  }
  if (v31 >= *(double *)(v4 + 104))
    v31 = *(double *)(v4 + 104);
  *(double *)(v4 + 104) = v31;
  if (v31 >= 0.0166666667)
  {
    v35 = 0;
    v37 = 1;
    goto LABEL_29;
  }
  v33 = swift_retain();
  v34 = specialized find<A>(_:key:)(v33);
  if (!v34)
  {
    swift_release();
    goto LABEL_28;
  }
  v35 = *(_DWORD *)(v34 + 72);
  v36 = *(_BYTE *)(v34 + 76);
  swift_release();
  if ((v36 & 1) != 0)
  {
LABEL_28:
    v35 = *(_DWORD *)(v4 + 184);
    v37 = *(_BYTE *)(v4 + 188);
    goto LABEL_29;
  }
  v37 = 0;
LABEL_29:
  *(_DWORD *)(v4 + 184) = v35;
  *(_BYTE *)(v4 + 188) = v37;
}

{
  uint64_t v3;
  uint64_t v4;
  double v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t (*v14)(uint64_t, double *, _QWORD *, ValueMetadata *, unint64_t, double);
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  double v21;
  char v22;
  double v23;
  long double v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  char v28;
  char v29;
  double v30[5];
  _QWORD v31[2];
  char v32;
  char v33;

  v4 = v3;
  if (!*(_BYTE *)(v3 + 141))
  {
    if (one-time initialization token for introduced != -1)
      swift_once();
    v18 = static _SemanticFeature_v3.introduced;
    if (one-time initialization token for forced != -1)
      swift_once();
    swift_beginAccess();
    if (byte_25426FAB4 == 1)
    {
      if ((dyld_program_sdk_at_least() & 1) != 0)
        goto LABEL_2;
    }
    else if (static Semantics.forced >= v18)
    {
      goto LABEL_2;
    }
    swift_beginAccess();
    *(_QWORD *)(v3 + 16) = a1;
    swift_retain();
    swift_release();
    swift_beginAccess();
    outlined assign with copy of _AnyAnimatableData(a2, (_QWORD *)(v3 + 32));
    swift_endAccess();
    goto LABEL_17;
  }
LABEL_2:
  v8 = a3 - *(double *)(v3 + 72);
  swift_beginAccess();
  v9 = *(_QWORD *)(v3 + 24);
  v10 = *(_BYTE *)(v3 + 160);
  swift_bridgeObjectRetain();
  v31[0] = v9;
  v31[1] = AGCreateWeakAttribute();
  v32 = 0;
  v33 = v10;
  swift_beginAccess();
  v11 = *(_QWORD *)(v3 + 16);
  v12 = *(_QWORD *)(v3 + 24);
  v13 = (uint64_t *)(v3 + 32);
  swift_beginAccess();
  outlined init with copy of _AnyAnimatableData((_QWORD *)(v3 + 32), v30);
  swift_retain();
  swift_bridgeObjectRetain();
  specialized AnimatorState.forkListeners(animation:state:interval:)(v11, v12, v30);
  swift_release();
  outlined destroy of _AnyAnimatableData((uint64_t)v30);
  swift_bridgeObjectRelease();
  *(_BYTE *)(v3 + 160) = 0;
  outlined init with copy of _AnyAnimatableData((_QWORD *)(v3 + 32), v30);
  v14 = *(uint64_t (**)(uint64_t, double *, _QWORD *, ValueMetadata *, unint64_t, double))(*(_QWORD *)a1 + 136);
  v15 = lazy protocol witness table accessor for type _AnyAnimatableData and conformance _AnyAnimatableData();
  v16 = swift_retain();
  LOBYTE(v15) = v14(v16, v30, v31, &type metadata for _AnyAnimatableData, v15, v8);
  swift_release();
  outlined destroy of _AnyAnimatableData((uint64_t)v30);
  if ((v15 & 1) != 0)
  {
    *(_QWORD *)(v4 + 24) = v31[0];
    swift_bridgeObjectRelease();
    *(_QWORD *)(v4 + 16) = a1;
    swift_retain();
    swift_release();
  }
  else
  {
    swift_bridgeObjectRelease();
    outlined init with copy of _AnyAnimatableData((_QWORD *)(v4 + 32), v30);
    swift_beginAccess();
    swift_beginAccess();
    specialized combineAnimation<A>(into:state:value:elapsed:newAnimation:newValue:)((uint64_t *)(v4 + 16), (unint64_t *)(v4 + 24), v30, a1, a2, v8);
    swift_endAccess();
    swift_endAccess();
    outlined destroy of _AnyAnimatableData((uint64_t)v30);
  }
  swift_beginAccess();
  v17 = *v13;
  if (*v13 == *(_QWORD *)a2)
  {
    (*(void (**)(uint64_t, _QWORD *))(v17 + 96))(v4 + 40, (_QWORD *)a2 + 1);
  }
  else if (v17 == type metadata accessor for ZeroVTable())
  {
    outlined destroy of _AnyAnimatableData(v4 + 32);
    outlined init with copy of _AnyAnimatableData(a2, (_QWORD *)(v4 + 32));
  }
  swift_endAccess();
  *(double *)(v4 + 88) = a3;
LABEL_17:
  v19 = swift_retain();
  v20 = specialized find<A>(_:key:)(v19);
  if (!v20)
  {
    swift_release();
    return;
  }
  v21 = *(double *)(v20 + 72);
  v22 = *(_BYTE *)(v20 + 80);
  swift_release();
  if ((v22 & 1) != 0)
    return;
  v23 = 0.0;
  if (v21 > 0.0)
  {
    v24 = log2(v21 * 240.0);
    v23 = exp2(floor(v24 + 0.01)) * 0.00416666667;
  }
  if (v23 >= *(double *)(v4 + 80))
    v23 = *(double *)(v4 + 80);
  *(double *)(v4 + 80) = v23;
  if (v23 >= 0.0166666667)
  {
    v27 = 0;
    v29 = 1;
    goto LABEL_33;
  }
  v25 = swift_retain();
  v26 = specialized find<A>(_:key:)(v25);
  if (!v26)
  {
    swift_release();
    goto LABEL_32;
  }
  v27 = *(_DWORD *)(v26 + 72);
  v28 = *(_BYTE *)(v26 + 76);
  swift_release();
  if ((v28 & 1) != 0)
  {
LABEL_32:
    v27 = *(_DWORD *)(v4 + 136);
    v29 = *(_BYTE *)(v4 + 140);
    goto LABEL_33;
  }
  v29 = 0;
LABEL_33:
  *(_DWORD *)(v4 + 136) = v27;
  *(_BYTE *)(v4 + 140) = v29;
}

void specialized AnimatorState.combine(newAnimation:newInterval:at:in:environment:)(uint64_t a1, double a2, double a3, double a4, double a5)
{
  uint64_t v5;
  uint64_t v6;
  double v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  double v18;
  double v19;
  uint64_t v20;
  uint64_t (*v21)(uint64_t, __int128 *, _QWORD *, uint64_t, uint64_t, double);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  double v25;
  double v26;
  double v27;
  double v28;
  uint64_t v29;
  uint64_t v30;
  double v31;
  char v32;
  double v33;
  long double v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  char v38;
  char v39;
  unsigned int v40;
  __int128 v41;
  uint64_t v42;
  _QWORD v43[2];
  char v44;
  char v45;

  v6 = v5;
  if (!*(_BYTE *)(v5 + 109))
  {
    if (one-time initialization token for introduced != -1)
      swift_once();
    v40 = static _SemanticFeature_v3.introduced;
    if (one-time initialization token for forced != -1)
      swift_once();
    swift_beginAccess();
    if (byte_25426FAB4 == 1)
    {
      if ((dyld_program_sdk_at_least() & 1) != 0)
        goto LABEL_2;
    }
    else if (static Semantics.forced >= v40)
    {
      goto LABEL_2;
    }
    swift_beginAccess();
    *(_QWORD *)(v5 + 16) = a1;
    swift_retain();
    swift_release();
    swift_beginAccess();
    *(double *)(v5 + 32) = a2;
    *(double *)(v5 + 40) = a3;
    *(double *)(v5 + 48) = a4;
    goto LABEL_6;
  }
LABEL_2:
  v12 = a5 - *(double *)(v5 + 56);
  swift_beginAccess();
  v13 = *(_QWORD *)(v5 + 24);
  v14 = *(_BYTE *)(v5 + 128);
  swift_bridgeObjectRetain();
  v43[0] = v13;
  v43[1] = AGCreateWeakAttribute();
  v44 = 0;
  v45 = v14;
  swift_beginAccess();
  v15 = *(_QWORD *)(v5 + 16);
  v16 = *(_QWORD *)(v5 + 24);
  swift_beginAccess();
  v17 = *(double *)(v5 + 32);
  v18 = *(double *)(v5 + 40);
  v19 = *(double *)(v5 + 48);
  swift_retain();
  swift_bridgeObjectRetain();
  specialized AnimatorState.forkListeners(animation:state:interval:)(v15, v16, v17, v18, v19);
  swift_bridgeObjectRelease();
  swift_release();
  *(_BYTE *)(v5 + 128) = 0;
  v20 = *(_QWORD *)(v5 + 48);
  v41 = *(_OWORD *)(v5 + 32);
  v42 = v20;
  v21 = *(uint64_t (**)(uint64_t, __int128 *, _QWORD *, uint64_t, uint64_t, double))(*(_QWORD *)a1 + 136);
  v22 = type metadata accessor for AnimatablePair<Double, AnimatablePair<CGFloat, CGFloat>>();
  v23 = lazy protocol witness table accessor for type AnimatablePair<Double, AnimatablePair<CGFloat, CGFloat>> and conformance AnimatablePair<A, B>();
  v24 = swift_retain();
  LOBYTE(v22) = v21(v24, &v41, v43, v22, v23, v12);
  swift_release();
  if ((v22 & 1) != 0)
  {
    *(_QWORD *)(v6 + 24) = v43[0];
    swift_bridgeObjectRelease();
    *(_QWORD *)(v6 + 16) = a1;
    swift_retain();
    swift_release();
  }
  else
  {
    swift_bridgeObjectRelease();
    v25 = *(double *)(v6 + 32);
    v26 = *(double *)(v6 + 40);
    v27 = *(double *)(v6 + 48);
    swift_beginAccess();
    swift_beginAccess();
    specialized combineAnimation<A>(into:state:value:elapsed:newAnimation:newValue:)((uint64_t *)(v6 + 16), (unint64_t *)(v6 + 24), a1, v25, v26, v27, v12, a2, a3, a4);
    swift_endAccess();
    swift_endAccess();
  }
  v28 = *(double *)(v6 + 40) + a3;
  *(double *)(v6 + 32) = *(double *)(v6 + 32) + a2;
  *(double *)(v6 + 40) = v28;
  *(double *)(v6 + 48) = *(double *)(v6 + 48) + a4;
  *(double *)(v6 + 72) = a5;
LABEL_6:
  v29 = swift_retain();
  v30 = specialized find<A>(_:key:)(v29);
  if (!v30)
  {
    swift_release();
    return;
  }
  v31 = *(double *)(v30 + 72);
  v32 = *(_BYTE *)(v30 + 80);
  swift_release();
  if ((v32 & 1) != 0)
    return;
  v33 = 0.0;
  if (v31 > 0.0)
  {
    v34 = log2(v31 * 240.0);
    v33 = exp2(floor(v34 + 0.01)) * 0.00416666667;
  }
  if (v33 >= *(double *)(v6 + 64))
    v33 = *(double *)(v6 + 64);
  *(double *)(v6 + 64) = v33;
  if (v33 >= 0.0166666667)
  {
    v37 = 0;
    v39 = 1;
    goto LABEL_29;
  }
  v35 = swift_retain();
  v36 = specialized find<A>(_:key:)(v35);
  if (!v36)
  {
    swift_release();
    goto LABEL_28;
  }
  v37 = *(_DWORD *)(v36 + 72);
  v38 = *(_BYTE *)(v36 + 76);
  swift_release();
  if ((v38 & 1) != 0)
  {
LABEL_28:
    v37 = *(_DWORD *)(v6 + 104);
    v39 = *(_BYTE *)(v6 + 108);
    goto LABEL_29;
  }
  v39 = 0;
LABEL_29:
  *(_DWORD *)(v6 + 104) = v37;
  *(_BYTE *)(v6 + 108) = v39;
}

{
  uint64_t v5;
  uint64_t v6;
  double v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  double v18;
  double v19;
  uint64_t v20;
  uint64_t (*v21)(uint64_t, __int128 *, _QWORD *, uint64_t, uint64_t, double);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  double v25;
  double v26;
  double v27;
  double v28;
  uint64_t v29;
  uint64_t v30;
  double v31;
  char v32;
  double v33;
  long double v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  char v38;
  char v39;
  unsigned int v40;
  __int128 v41;
  uint64_t v42;
  _QWORD v43[2];
  char v44;
  char v45;

  v6 = v5;
  if (!*(_BYTE *)(v5 + 109))
  {
    if (one-time initialization token for introduced != -1)
      swift_once();
    v40 = static _SemanticFeature_v3.introduced;
    if (one-time initialization token for forced != -1)
      swift_once();
    swift_beginAccess();
    if (byte_25426FAB4 == 1)
    {
      if ((dyld_program_sdk_at_least() & 1) != 0)
        goto LABEL_2;
    }
    else if (static Semantics.forced >= v40)
    {
      goto LABEL_2;
    }
    swift_beginAccess();
    *(_QWORD *)(v5 + 16) = a1;
    swift_retain();
    swift_release();
    swift_beginAccess();
    *(double *)(v5 + 32) = a2;
    *(double *)(v5 + 40) = a3;
    *(double *)(v5 + 48) = a4;
    goto LABEL_6;
  }
LABEL_2:
  v12 = a5 - *(double *)(v5 + 56);
  swift_beginAccess();
  v13 = *(_QWORD *)(v5 + 24);
  v14 = *(_BYTE *)(v5 + 128);
  swift_bridgeObjectRetain();
  v43[0] = v13;
  v43[1] = AGCreateWeakAttribute();
  v44 = 0;
  v45 = v14;
  swift_beginAccess();
  v15 = *(_QWORD *)(v5 + 16);
  v16 = *(_QWORD *)(v5 + 24);
  swift_beginAccess();
  v17 = *(double *)(v5 + 32);
  v18 = *(double *)(v5 + 40);
  v19 = *(double *)(v5 + 48);
  swift_retain();
  swift_bridgeObjectRetain();
  specialized AnimatorState.forkListeners(animation:state:interval:)(v15, v16, v17, v18, v19);
  swift_bridgeObjectRelease();
  swift_release();
  *(_BYTE *)(v5 + 128) = 0;
  v20 = *(_QWORD *)(v5 + 48);
  v41 = *(_OWORD *)(v5 + 32);
  v42 = v20;
  v21 = *(uint64_t (**)(uint64_t, __int128 *, _QWORD *, uint64_t, uint64_t, double))(*(_QWORD *)a1 + 136);
  v22 = type metadata accessor for AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>(0);
  v23 = lazy protocol witness table accessor for type AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>> and conformance AnimatablePair<A, B>();
  v24 = swift_retain();
  LOBYTE(v22) = v21(v24, &v41, v43, v22, v23, v12);
  swift_release();
  if ((v22 & 1) != 0)
  {
    *(_QWORD *)(v6 + 24) = v43[0];
    swift_bridgeObjectRelease();
    *(_QWORD *)(v6 + 16) = a1;
    swift_retain();
    swift_release();
  }
  else
  {
    swift_bridgeObjectRelease();
    v25 = *(double *)(v6 + 32);
    v26 = *(double *)(v6 + 40);
    v27 = *(double *)(v6 + 48);
    swift_beginAccess();
    swift_beginAccess();
    specialized combineAnimation<A>(into:state:value:elapsed:newAnimation:newValue:)((uint64_t *)(v6 + 16), (unint64_t *)(v6 + 24), a1, v25, v26, v27, v12, a2, a3, a4);
    swift_endAccess();
    swift_endAccess();
  }
  v28 = *(double *)(v6 + 40) + a3;
  *(double *)(v6 + 32) = *(double *)(v6 + 32) + a2;
  *(double *)(v6 + 40) = v28;
  *(double *)(v6 + 48) = *(double *)(v6 + 48) + a4;
  *(double *)(v6 + 72) = a5;
LABEL_6:
  v29 = swift_retain();
  v30 = specialized find<A>(_:key:)(v29);
  if (!v30)
  {
    swift_release();
    return;
  }
  v31 = *(double *)(v30 + 72);
  v32 = *(_BYTE *)(v30 + 80);
  swift_release();
  if ((v32 & 1) != 0)
    return;
  v33 = 0.0;
  if (v31 > 0.0)
  {
    v34 = log2(v31 * 240.0);
    v33 = exp2(floor(v34 + 0.01)) * 0.00416666667;
  }
  if (v33 >= *(double *)(v6 + 64))
    v33 = *(double *)(v6 + 64);
  *(double *)(v6 + 64) = v33;
  if (v33 >= 0.0166666667)
  {
    v37 = 0;
    v39 = 1;
    goto LABEL_29;
  }
  v35 = swift_retain();
  v36 = specialized find<A>(_:key:)(v35);
  if (!v36)
  {
    swift_release();
    goto LABEL_28;
  }
  v37 = *(_DWORD *)(v36 + 72);
  v38 = *(_BYTE *)(v36 + 76);
  swift_release();
  if ((v38 & 1) != 0)
  {
LABEL_28:
    v37 = *(_DWORD *)(v6 + 104);
    v39 = *(_BYTE *)(v6 + 108);
    goto LABEL_29;
  }
  v39 = 0;
LABEL_29:
  *(_DWORD *)(v6 + 104) = v37;
  *(_BYTE *)(v6 + 108) = v39;
}

{
  uint64_t v5;
  uint64_t v6;
  double v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  double v18;
  double v19;
  uint64_t v20;
  uint64_t (*v21)(uint64_t, __int128 *, _QWORD *, uint64_t, unint64_t, double);
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  double v25;
  double v26;
  double v27;
  double v28;
  uint64_t v29;
  uint64_t v30;
  double v31;
  char v32;
  double v33;
  long double v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  char v38;
  char v39;
  unsigned int v40;
  __int128 v41;
  uint64_t v42;
  _QWORD v43[2];
  char v44;
  char v45;

  v6 = v5;
  if (!*(_BYTE *)(v5 + 109))
  {
    if (one-time initialization token for introduced != -1)
      swift_once();
    v40 = static _SemanticFeature_v3.introduced;
    if (one-time initialization token for forced != -1)
      swift_once();
    swift_beginAccess();
    if (byte_25426FAB4 == 1)
    {
      if ((dyld_program_sdk_at_least() & 1) != 0)
        goto LABEL_2;
    }
    else if (static Semantics.forced >= v40)
    {
      goto LABEL_2;
    }
    swift_beginAccess();
    *(_QWORD *)(v5 + 16) = a1;
    swift_retain();
    swift_release();
    swift_beginAccess();
    *(double *)(v5 + 32) = a2;
    *(double *)(v5 + 40) = a3;
    *(double *)(v5 + 48) = a4;
    goto LABEL_6;
  }
LABEL_2:
  v12 = a5 - *(double *)(v5 + 56);
  swift_beginAccess();
  v13 = *(_QWORD *)(v5 + 24);
  v14 = *(_BYTE *)(v5 + 128);
  swift_bridgeObjectRetain();
  v43[0] = v13;
  v43[1] = AGCreateWeakAttribute();
  v44 = 0;
  v45 = v14;
  swift_beginAccess();
  v15 = *(_QWORD *)(v5 + 16);
  v16 = *(_QWORD *)(v5 + 24);
  swift_beginAccess();
  v17 = *(double *)(v5 + 32);
  v18 = *(double *)(v5 + 40);
  v19 = *(double *)(v5 + 48);
  swift_retain();
  swift_bridgeObjectRetain();
  specialized AnimatorState.forkListeners(animation:state:interval:)(v15, v16, v17, v18, v19);
  swift_bridgeObjectRelease();
  swift_release();
  *(_BYTE *)(v5 + 128) = 0;
  v20 = *(_QWORD *)(v5 + 48);
  v41 = *(_OWORD *)(v5 + 32);
  v42 = v20;
  v21 = *(uint64_t (**)(uint64_t, __int128 *, _QWORD *, uint64_t, unint64_t, double))(*(_QWORD *)a1 + 136);
  v22 = type metadata accessor for AnimatablePair<AnimatablePair<CGFloat, CGFloat>, ResolvedGradientVector>(0, &lazy cache variable for type metadata for AnimatablePair<AnimatablePair<CGFloat, CGFloat>, CGFloat>, (void (*)(void))lazy protocol witness table accessor for type CGFloat and conformance CGFloat);
  v23 = lazy protocol witness table accessor for type AnimatablePair<AnimatablePair<CGFloat, CGFloat>, CGFloat> and conformance AnimatablePair<A, B>();
  v24 = swift_retain();
  LOBYTE(v22) = v21(v24, &v41, v43, v22, v23, v12);
  swift_release();
  if ((v22 & 1) != 0)
  {
    *(_QWORD *)(v6 + 24) = v43[0];
    swift_bridgeObjectRelease();
    *(_QWORD *)(v6 + 16) = a1;
    swift_retain();
    swift_release();
  }
  else
  {
    swift_bridgeObjectRelease();
    v25 = *(double *)(v6 + 32);
    v26 = *(double *)(v6 + 40);
    v27 = *(double *)(v6 + 48);
    swift_beginAccess();
    swift_beginAccess();
    specialized combineAnimation<A>(into:state:value:elapsed:newAnimation:newValue:)((uint64_t *)(v6 + 16), (unint64_t *)(v6 + 24), a1, v25, v26, v27, v12, a2, a3, a4);
    swift_endAccess();
    swift_endAccess();
  }
  v28 = *(double *)(v6 + 40) + a3;
  *(double *)(v6 + 32) = *(double *)(v6 + 32) + a2;
  *(double *)(v6 + 40) = v28;
  *(double *)(v6 + 48) = *(double *)(v6 + 48) + a4;
  *(double *)(v6 + 72) = a5;
LABEL_6:
  v29 = swift_retain();
  v30 = specialized find<A>(_:key:)(v29);
  if (!v30)
  {
    swift_release();
    return;
  }
  v31 = *(double *)(v30 + 72);
  v32 = *(_BYTE *)(v30 + 80);
  swift_release();
  if ((v32 & 1) != 0)
    return;
  v33 = 0.0;
  if (v31 > 0.0)
  {
    v34 = log2(v31 * 240.0);
    v33 = exp2(floor(v34 + 0.01)) * 0.00416666667;
  }
  if (v33 >= *(double *)(v6 + 64))
    v33 = *(double *)(v6 + 64);
  *(double *)(v6 + 64) = v33;
  if (v33 >= 0.0166666667)
  {
    v37 = 0;
    v39 = 1;
    goto LABEL_29;
  }
  v35 = swift_retain();
  v36 = specialized find<A>(_:key:)(v35);
  if (!v36)
  {
    swift_release();
    goto LABEL_28;
  }
  v37 = *(_DWORD *)(v36 + 72);
  v38 = *(_BYTE *)(v36 + 76);
  swift_release();
  if ((v38 & 1) != 0)
  {
LABEL_28:
    v37 = *(_DWORD *)(v6 + 104);
    v39 = *(_BYTE *)(v6 + 108);
    goto LABEL_29;
  }
  v39 = 0;
LABEL_29:
  *(_DWORD *)(v6 + 104) = v37;
  *(_BYTE *)(v6 + 108) = v39;
}

void specialized AnimatorState.combine(newAnimation:newInterval:at:in:environment:)(uint64_t a1, double a2, double a3, double a4, double a5, double a6)
{
  uint64_t v6;
  uint64_t v7;
  double v14;
  double v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  double v20;
  double v21;
  double v22;
  double v23;
  __int128 v24;
  uint64_t (*v25)(uint64_t, _OWORD *, _QWORD *, uint64_t, uint64_t, double);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  uint64_t v39;
  uint64_t v40;
  double v41;
  char v42;
  double v43;
  long double v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  char v48;
  char v49;
  unsigned int v50;
  double v51;
  double v52;
  _OWORD v53[2];
  _QWORD v54[2];
  char v55;
  char v56;

  v7 = v6;
  if (!*(_BYTE *)(v6 + 125))
  {
    if (one-time initialization token for introduced != -1)
      swift_once();
    v50 = static _SemanticFeature_v3.introduced;
    if (one-time initialization token for forced != -1)
      swift_once();
    swift_beginAccess();
    if (byte_25426FAB4 == 1)
    {
      if ((dyld_program_sdk_at_least() & 1) != 0)
        goto LABEL_2;
    }
    else if (static Semantics.forced >= v50)
    {
      goto LABEL_2;
    }
    swift_beginAccess();
    *(_QWORD *)(v6 + 16) = a1;
    swift_retain();
    swift_release();
    swift_beginAccess();
    *(double *)(v6 + 32) = a2;
    *(double *)(v6 + 40) = a3;
    *(double *)(v6 + 48) = a4;
    *(double *)(v6 + 56) = a5;
    goto LABEL_6;
  }
LABEL_2:
  v51 = a3;
  v52 = a4;
  v14 = a5;
  v15 = a6 - *(double *)(v6 + 64);
  swift_beginAccess();
  v16 = *(_QWORD *)(v6 + 24);
  v17 = *(_BYTE *)(v6 + 144);
  swift_bridgeObjectRetain();
  v54[0] = v16;
  v54[1] = AGCreateWeakAttribute();
  v55 = 0;
  v56 = v17;
  swift_beginAccess();
  v18 = *(_QWORD *)(v6 + 16);
  v19 = *(_QWORD *)(v6 + 24);
  swift_beginAccess();
  v20 = *(double *)(v6 + 32);
  v21 = *(double *)(v6 + 40);
  v22 = *(double *)(v6 + 48);
  v23 = *(double *)(v6 + 56);
  swift_retain();
  swift_bridgeObjectRetain();
  specialized AnimatorState.forkListeners(animation:state:interval:)(v18, v19, v20, v21, v22, v23);
  swift_bridgeObjectRelease();
  swift_release();
  *(_BYTE *)(v6 + 144) = 0;
  v24 = *(_OWORD *)(v6 + 48);
  v53[0] = *(_OWORD *)(v6 + 32);
  v53[1] = v24;
  v25 = *(uint64_t (**)(uint64_t, _OWORD *, _QWORD *, uint64_t, uint64_t, double))(*(_QWORD *)a1 + 136);
  v26 = type metadata accessor for AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>();
  v27 = lazy protocol witness table accessor for type AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>> and conformance AnimatablePair<A, B>();
  v28 = swift_retain();
  LOBYTE(v26) = v25(v28, v53, v54, v26, v27, v15);
  swift_release();
  if ((v26 & 1) != 0)
  {
    *(_QWORD *)(v7 + 24) = v54[0];
    swift_bridgeObjectRelease();
    *(_QWORD *)(v7 + 16) = a1;
    swift_retain();
    swift_release();
    v30 = v51;
    v29 = v52;
  }
  else
  {
    swift_bridgeObjectRelease();
    v31 = *(double *)(v7 + 32);
    v32 = *(double *)(v7 + 40);
    v33 = *(double *)(v7 + 48);
    v34 = *(double *)(v7 + 56);
    swift_beginAccess();
    swift_beginAccess();
    v35 = v31;
    v36 = v32;
    v30 = v51;
    v29 = v52;
    specialized combineAnimation<A>(into:state:value:elapsed:newAnimation:newValue:)((uint64_t *)(v7 + 16), (unint64_t *)(v7 + 24), a1, v35, v36, v33, v34, v15, a2, v51, v52, v14);
    swift_endAccess();
    swift_endAccess();
  }
  v37 = *(double *)(v7 + 40) + v30;
  *(double *)(v7 + 32) = *(double *)(v7 + 32) + a2;
  *(double *)(v7 + 40) = v37;
  v38 = *(double *)(v7 + 56) + v14;
  *(double *)(v7 + 48) = *(double *)(v7 + 48) + v29;
  *(double *)(v7 + 56) = v38;
  *(double *)(v7 + 80) = a6;
LABEL_6:
  v39 = swift_retain();
  v40 = specialized find<A>(_:key:)(v39);
  if (!v40)
  {
    swift_release();
    return;
  }
  v41 = *(double *)(v40 + 72);
  v42 = *(_BYTE *)(v40 + 80);
  swift_release();
  if ((v42 & 1) != 0)
    return;
  v43 = 0.0;
  if (v41 > 0.0)
  {
    v44 = log2(v41 * 240.0);
    v43 = exp2(floor(v44 + 0.01)) * 0.00416666667;
  }
  if (v43 >= *(double *)(v7 + 72))
    v43 = *(double *)(v7 + 72);
  *(double *)(v7 + 72) = v43;
  if (v43 >= 0.0166666667)
  {
    v47 = 0;
    v49 = 1;
    goto LABEL_29;
  }
  v45 = swift_retain();
  v46 = specialized find<A>(_:key:)(v45);
  if (!v46)
  {
    swift_release();
    goto LABEL_28;
  }
  v47 = *(_DWORD *)(v46 + 72);
  v48 = *(_BYTE *)(v46 + 76);
  swift_release();
  if ((v48 & 1) != 0)
  {
LABEL_28:
    v47 = *(_DWORD *)(v7 + 120);
    v49 = *(_BYTE *)(v7 + 124);
    goto LABEL_29;
  }
  v49 = 0;
LABEL_29:
  *(_DWORD *)(v7 + 120) = v47;
  *(_BYTE *)(v7 + 124) = v49;
}

{
  uint64_t v6;
  uint64_t v7;
  double v14;
  double v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  double v20;
  double v21;
  double v22;
  double v23;
  __int128 v24;
  uint64_t (*v25)(uint64_t, _OWORD *, _QWORD *, uint64_t, unint64_t, double);
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  uint64_t v39;
  uint64_t v40;
  double v41;
  char v42;
  double v43;
  long double v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  char v48;
  char v49;
  unsigned int v50;
  double v51;
  double v52;
  _OWORD v53[2];
  _QWORD v54[2];
  char v55;
  char v56;

  v7 = v6;
  if (!*(_BYTE *)(v6 + 125))
  {
    if (one-time initialization token for introduced != -1)
      swift_once();
    v50 = static _SemanticFeature_v3.introduced;
    if (one-time initialization token for forced != -1)
      swift_once();
    swift_beginAccess();
    if (byte_25426FAB4 == 1)
    {
      if ((dyld_program_sdk_at_least() & 1) != 0)
        goto LABEL_2;
    }
    else if (static Semantics.forced >= v50)
    {
      goto LABEL_2;
    }
    swift_beginAccess();
    *(_QWORD *)(v6 + 16) = a1;
    swift_retain();
    swift_release();
    swift_beginAccess();
    *(double *)(v6 + 32) = a2;
    *(double *)(v6 + 40) = a3;
    *(double *)(v6 + 48) = a4;
    *(double *)(v6 + 56) = a5;
    goto LABEL_6;
  }
LABEL_2:
  v51 = a3;
  v52 = a4;
  v14 = a5;
  v15 = a6 - *(double *)(v6 + 64);
  swift_beginAccess();
  v16 = *(_QWORD *)(v6 + 24);
  v17 = *(_BYTE *)(v6 + 144);
  swift_bridgeObjectRetain();
  v54[0] = v16;
  v54[1] = AGCreateWeakAttribute();
  v55 = 0;
  v56 = v17;
  swift_beginAccess();
  v18 = *(_QWORD *)(v6 + 16);
  v19 = *(_QWORD *)(v6 + 24);
  swift_beginAccess();
  v20 = *(double *)(v6 + 32);
  v21 = *(double *)(v6 + 40);
  v22 = *(double *)(v6 + 48);
  v23 = *(double *)(v6 + 56);
  swift_retain();
  swift_bridgeObjectRetain();
  specialized AnimatorState.forkListeners(animation:state:interval:)(v18, v19, v20, v21, v22, v23);
  swift_bridgeObjectRelease();
  swift_release();
  *(_BYTE *)(v6 + 144) = 0;
  v24 = *(_OWORD *)(v6 + 48);
  v53[0] = *(_OWORD *)(v6 + 32);
  v53[1] = v24;
  v25 = *(uint64_t (**)(uint64_t, _OWORD *, _QWORD *, uint64_t, unint64_t, double))(*(_QWORD *)a1 + 136);
  v26 = type metadata accessor for AnimatablePair<CGFloat, AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>>(0, &lazy cache variable for type metadata for AnimatablePair<CGFloat, AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>>, (void (*)(uint64_t))type metadata accessor for AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>, (void (*)(void))lazy protocol witness table accessor for type AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>> and conformance AnimatablePair<A, B>);
  v27 = lazy protocol witness table accessor for type AnimatablePair<CGFloat, AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>> and conformance AnimatablePair<A, B>();
  v28 = swift_retain();
  LOBYTE(v26) = v25(v28, v53, v54, v26, v27, v15);
  swift_release();
  if ((v26 & 1) != 0)
  {
    *(_QWORD *)(v7 + 24) = v54[0];
    swift_bridgeObjectRelease();
    *(_QWORD *)(v7 + 16) = a1;
    swift_retain();
    swift_release();
    v30 = v51;
    v29 = v52;
  }
  else
  {
    swift_bridgeObjectRelease();
    v31 = *(double *)(v7 + 32);
    v32 = *(double *)(v7 + 40);
    v33 = *(double *)(v7 + 48);
    v34 = *(double *)(v7 + 56);
    swift_beginAccess();
    swift_beginAccess();
    v35 = v31;
    v36 = v32;
    v30 = v51;
    v29 = v52;
    specialized combineAnimation<A>(into:state:value:elapsed:newAnimation:newValue:)((uint64_t *)(v7 + 16), (unint64_t *)(v7 + 24), a1, v35, v36, v33, v34, v15, a2, v51, v52, v14);
    swift_endAccess();
    swift_endAccess();
  }
  v37 = *(double *)(v7 + 40) + v30;
  *(double *)(v7 + 32) = *(double *)(v7 + 32) + a2;
  *(double *)(v7 + 40) = v37;
  v38 = *(double *)(v7 + 56) + v14;
  *(double *)(v7 + 48) = *(double *)(v7 + 48) + v29;
  *(double *)(v7 + 56) = v38;
  *(double *)(v7 + 80) = a6;
LABEL_6:
  v39 = swift_retain();
  v40 = specialized find<A>(_:key:)(v39);
  if (!v40)
  {
    swift_release();
    return;
  }
  v41 = *(double *)(v40 + 72);
  v42 = *(_BYTE *)(v40 + 80);
  swift_release();
  if ((v42 & 1) != 0)
    return;
  v43 = 0.0;
  if (v41 > 0.0)
  {
    v44 = log2(v41 * 240.0);
    v43 = exp2(floor(v44 + 0.01)) * 0.00416666667;
  }
  if (v43 >= *(double *)(v7 + 72))
    v43 = *(double *)(v7 + 72);
  *(double *)(v7 + 72) = v43;
  if (v43 >= 0.0166666667)
  {
    v47 = 0;
    v49 = 1;
    goto LABEL_29;
  }
  v45 = swift_retain();
  v46 = specialized find<A>(_:key:)(v45);
  if (!v46)
  {
    swift_release();
    goto LABEL_28;
  }
  v47 = *(_DWORD *)(v46 + 72);
  v48 = *(_BYTE *)(v46 + 76);
  swift_release();
  if ((v48 & 1) != 0)
  {
LABEL_28:
    v47 = *(_DWORD *)(v7 + 120);
    v49 = *(_BYTE *)(v7 + 124);
    goto LABEL_29;
  }
  v49 = 0;
LABEL_29:
  *(_DWORD *)(v7 + 120) = v47;
  *(_BYTE *)(v7 + 124) = v49;
}

void specialized AnimatorState.combine(newAnimation:newInterval:at:in:environment:)(uint64_t a1, double a2, double a3, double a4)
{
  uint64_t v4;
  uint64_t v5;
  double v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  unint64_t v14;
  double v15;
  double v16;
  uint64_t (*v17)(uint64_t, __int128 *, _QWORD *, uint64_t, unint64_t, double);
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  double v21;
  double v22;
  double v23;
  uint64_t v24;
  uint64_t v25;
  double v26;
  char v27;
  double v28;
  long double v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  char v33;
  char v34;
  unsigned int v35;
  __int128 v36;
  _QWORD v37[2];
  char v38;
  char v39;

  v5 = v4;
  if (!*(_BYTE *)(v4 + 93))
  {
    if (one-time initialization token for introduced != -1)
      swift_once();
    v35 = static _SemanticFeature_v3.introduced;
    if (one-time initialization token for forced != -1)
      swift_once();
    swift_beginAccess();
    if (byte_25426FAB4 == 1)
    {
      if ((dyld_program_sdk_at_least() & 1) != 0)
        goto LABEL_2;
    }
    else if (static Semantics.forced >= v35)
    {
      goto LABEL_2;
    }
    swift_beginAccess();
    *(_QWORD *)(v4 + 16) = a1;
    swift_retain();
    swift_release();
    swift_beginAccess();
    *(double *)(v4 + 32) = a2;
    *(double *)(v4 + 40) = a3;
    goto LABEL_6;
  }
LABEL_2:
  v10 = a4 - *(double *)(v4 + 48);
  swift_beginAccess();
  v11 = *(_QWORD *)(v4 + 24);
  v12 = *(_BYTE *)(v4 + 112);
  swift_bridgeObjectRetain();
  v37[0] = v11;
  v37[1] = AGCreateWeakAttribute();
  v38 = 0;
  v39 = v12;
  swift_beginAccess();
  v13 = *(_QWORD *)(v4 + 16);
  v14 = *(_QWORD *)(v4 + 24);
  swift_beginAccess();
  v15 = *(double *)(v4 + 32);
  v16 = *(double *)(v4 + 40);
  swift_retain();
  swift_bridgeObjectRetain();
  specialized AnimatorState.forkListeners(animation:state:interval:)(v13, v14, v15, v16);
  swift_bridgeObjectRelease();
  swift_release();
  *(_BYTE *)(v4 + 112) = 0;
  v36 = *(_OWORD *)(v4 + 32);
  v17 = *(uint64_t (**)(uint64_t, __int128 *, _QWORD *, uint64_t, unint64_t, double))(*(_QWORD *)a1 + 136);
  v18 = type metadata accessor for AnimatablePair<CGFloat, CGFloat>();
  v19 = lazy protocol witness table accessor for type AnimatablePair<CGFloat, CGFloat> and conformance AnimatablePair<A, B>();
  v20 = swift_retain();
  LOBYTE(v18) = v17(v20, &v36, v37, v18, v19, v10);
  swift_release();
  if ((v18 & 1) != 0)
  {
    *(_QWORD *)(v5 + 24) = v37[0];
    swift_bridgeObjectRelease();
    *(_QWORD *)(v5 + 16) = a1;
    swift_retain();
    swift_release();
  }
  else
  {
    swift_bridgeObjectRelease();
    v21 = *(double *)(v5 + 32);
    v22 = *(double *)(v5 + 40);
    swift_beginAccess();
    swift_beginAccess();
    specialized combineAnimation<A>(into:state:value:elapsed:newAnimation:newValue:)((uint64_t *)(v5 + 16), (unint64_t *)(v5 + 24), a1, v21, v22, v10, a2, a3);
    swift_endAccess();
    swift_endAccess();
  }
  v23 = *(double *)(v5 + 40) + a3;
  *(double *)(v5 + 32) = *(double *)(v5 + 32) + a2;
  *(double *)(v5 + 40) = v23;
  *(double *)(v5 + 64) = a4;
LABEL_6:
  v24 = swift_retain();
  v25 = specialized find<A>(_:key:)(v24);
  if (!v25)
  {
    swift_release();
    return;
  }
  v26 = *(double *)(v25 + 72);
  v27 = *(_BYTE *)(v25 + 80);
  swift_release();
  if ((v27 & 1) != 0)
    return;
  v28 = 0.0;
  if (v26 > 0.0)
  {
    v29 = log2(v26 * 240.0);
    v28 = exp2(floor(v29 + 0.01)) * 0.00416666667;
  }
  if (v28 >= *(double *)(v5 + 56))
    v28 = *(double *)(v5 + 56);
  *(double *)(v5 + 56) = v28;
  if (v28 >= 0.0166666667)
  {
    v32 = 0;
    v34 = 1;
    goto LABEL_29;
  }
  v30 = swift_retain();
  v31 = specialized find<A>(_:key:)(v30);
  if (!v31)
  {
    swift_release();
    goto LABEL_28;
  }
  v32 = *(_DWORD *)(v31 + 72);
  v33 = *(_BYTE *)(v31 + 76);
  swift_release();
  if ((v33 & 1) != 0)
  {
LABEL_28:
    v32 = *(_DWORD *)(v5 + 88);
    v34 = *(_BYTE *)(v5 + 92);
    goto LABEL_29;
  }
  v34 = 0;
LABEL_29:
  *(_DWORD *)(v5 + 88) = v32;
  *(_BYTE *)(v5 + 92) = v34;
}

void specialized AnimatorState.combine(newAnimation:newInterval:at:in:environment:)(uint64_t a1, _OWORD *a2, double a3)
{
  uint64_t v3;
  uint64_t v4;
  double v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  uint64_t (*v15)(uint64_t, __int128 *, _QWORD *, uint64_t, uint64_t, double);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  float32x4_t *v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  double v25;
  char v26;
  double v27;
  long double v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  char v32;
  char v33;
  unsigned int v34;
  __int128 v35;
  uint64_t *v36;
  unint64_t *v37;
  uint64_t v38;
  float32x4_t v39;
  _QWORD v40[2];
  char v41;
  char v42;
  __int128 v43;
  __int128 v44;
  _OWORD v45[3];

  v4 = v3;
  if (!*(_BYTE *)(v3 + 125))
  {
    if (one-time initialization token for introduced != -1)
      swift_once();
    v34 = static _SemanticFeature_v3.introduced;
    if (one-time initialization token for forced != -1)
      swift_once();
    swift_beginAccess();
    if (byte_25426FAB4 == 1)
    {
      if ((dyld_program_sdk_at_least() & 1) != 0)
        goto LABEL_2;
    }
    else if (static Semantics.forced >= v34)
    {
      goto LABEL_2;
    }
    swift_beginAccess();
    *(_QWORD *)(v3 + 16) = a1;
    swift_retain();
    swift_release();
    swift_beginAccess();
    outlined retain of Text.Effect.RenderSegmentation.StaticLines((uint64_t)a2);
    v35 = a2[1];
    *(_OWORD *)(v3 + 32) = *a2;
    *(_OWORD *)(v3 + 48) = v35;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_6;
  }
LABEL_2:
  v38 = (uint64_t)a2;
  v8 = a3 - *(double *)(v3 + 64);
  v37 = (unint64_t *)(v3 + 24);
  swift_beginAccess();
  v9 = *(_QWORD *)(v3 + 24);
  v10 = *(_BYTE *)(v3 + 144);
  swift_bridgeObjectRetain();
  v40[0] = v9;
  v40[1] = AGCreateWeakAttribute();
  v41 = 0;
  v42 = v10;
  v36 = (uint64_t *)(v3 + 16);
  swift_beginAccess();
  v11 = *(_QWORD *)(v3 + 16);
  v12 = *(_QWORD *)(v3 + 24);
  swift_beginAccess();
  v13 = *(_OWORD *)(v3 + 48);
  v45[0] = *(_OWORD *)(v3 + 32);
  v45[1] = v13;
  outlined retain of Text.Effect.RenderSegmentation.StaticLines((uint64_t)v45);
  swift_retain();
  swift_bridgeObjectRetain();
  specialized AnimatorState.forkListeners(animation:state:interval:)(v11, v12, (uint64_t)v45);
  swift_release();
  outlined release of Text.Effect.RenderSegmentation.StaticLines((uint64_t)v45);
  swift_bridgeObjectRelease();
  *(_BYTE *)(v3 + 144) = 0;
  v14 = *(_QWORD *)(v3 + 40);
  *(_QWORD *)&v43 = *(_QWORD *)(v3 + 32);
  *((_QWORD *)&v43 + 1) = v14;
  v44 = *(_OWORD *)(v3 + 48);
  v15 = *(uint64_t (**)(uint64_t, __int128 *, _QWORD *, uint64_t, uint64_t, double))(*(_QWORD *)a1 + 136);
  v16 = type metadata accessor for AnimatablePair<AnimatableArray<Float>, AnimatablePair<AnimatableArray<AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>, AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>>();
  v17 = a1;
  v18 = lazy protocol witness table accessor for type AnimatablePair<AnimatableArray<Float>, AnimatablePair<AnimatableArray<AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>, AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>> and conformance AnimatablePair<A, B>();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v19 = swift_retain();
  LOBYTE(v18) = v15(v19, &v43, v40, v16, v18, v8);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  if ((v18 & 1) != 0)
  {
    *v37 = v40[0];
    swift_bridgeObjectRelease();
    *v36 = v17;
    swift_retain();
    swift_release();
    v20 = (float32x4_t *)v38;
  }
  else
  {
    swift_bridgeObjectRelease();
    v21 = *(_OWORD *)(v4 + 48);
    v43 = *(_OWORD *)(v4 + 32);
    v44 = v21;
    swift_beginAccess();
    swift_beginAccess();
    outlined retain of Text.Effect.RenderSegmentation.StaticLines((uint64_t)&v43);
    v22 = v17;
    v20 = (float32x4_t *)v38;
    specialized combineAnimation<A>(into:state:value:elapsed:newAnimation:newValue:)(v36, v37, (uint64_t)&v43, v22, v38, v8);
    swift_endAccess();
    swift_endAccess();
    outlined release of Text.Effect.RenderSegmentation.StaticLines((uint64_t)&v43);
  }
  swift_beginAccess();
  specialized static AnimatableArray.+= infix(_:_:)(v4 + 32, v20->i64[0]);
  v39 = v20[1];
  specialized static AnimatableArray.+= infix(_:_:)(v4 + 40, v20->i64[1]);
  *(float32x4_t *)(v4 + 48) = vaddq_f32(v39, *(float32x4_t *)(v4 + 48));
  swift_endAccess();
  *(double *)(v4 + 80) = a3;
LABEL_6:
  v23 = swift_retain();
  v24 = specialized find<A>(_:key:)(v23);
  if (!v24)
  {
    swift_release();
    return;
  }
  v25 = *(double *)(v24 + 72);
  v26 = *(_BYTE *)(v24 + 80);
  swift_release();
  if ((v26 & 1) != 0)
    return;
  v27 = 0.0;
  if (v25 > 0.0)
  {
    v28 = log2(v25 * 240.0);
    v27 = exp2(floor(v28 + 0.01)) * 0.00416666667;
  }
  if (v27 >= *(double *)(v4 + 72))
    v27 = *(double *)(v4 + 72);
  *(double *)(v4 + 72) = v27;
  if (v27 >= 0.0166666667)
  {
    v31 = 0;
    v33 = 1;
    goto LABEL_29;
  }
  v29 = swift_retain();
  v30 = specialized find<A>(_:key:)(v29);
  if (!v30)
  {
    swift_release();
    goto LABEL_28;
  }
  v31 = *(_DWORD *)(v30 + 72);
  v32 = *(_BYTE *)(v30 + 76);
  swift_release();
  if ((v32 & 1) != 0)
  {
LABEL_28:
    v31 = *(_DWORD *)(v4 + 120);
    v33 = *(_BYTE *)(v4 + 124);
    goto LABEL_29;
  }
  v33 = 0;
LABEL_29:
  *(_DWORD *)(v4 + 120) = v31;
  *(_BYTE *)(v4 + 124) = v33;
}

{
  uint64_t v3;
  uint64_t v4;
  double v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  char v15;
  __int128 v16;
  uint64_t (*v17)(uint64_t, __int128 *, _QWORD *, uint64_t, unint64_t, double);
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  float64x2_t v23;
  uint64_t v24;
  uint64_t v25;
  double v26;
  char v27;
  double v28;
  long double v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  char v33;
  char v34;
  unsigned int v35;
  __int128 v36;
  unint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  _QWORD v41[2];
  char v42;
  char v43;
  __int128 v44;
  _BYTE v45[25];
  __int128 v46;
  _OWORD v47[3];

  v4 = v3;
  if (!*(_BYTE *)(v3 + 153))
  {
    if (one-time initialization token for introduced != -1)
      swift_once();
    v35 = static _SemanticFeature_v3.introduced;
    if (one-time initialization token for forced != -1)
      swift_once();
    swift_beginAccess();
    if (byte_25426FAB4 == 1)
    {
      if ((dyld_program_sdk_at_least() & 1) != 0)
        goto LABEL_2;
    }
    else if (static Semantics.forced >= v35)
    {
      goto LABEL_2;
    }
    swift_beginAccess();
    *(_QWORD *)(v3 + 16) = a1;
    swift_retain();
    swift_release();
    swift_beginAccess();
    outlined retain of AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>, ResolvedGradientVector>((uint64_t)a2);
    v36 = a2[1];
    *(_OWORD *)(v3 + 32) = *a2;
    *(_OWORD *)(v3 + 48) = v36;
    *(_OWORD *)(v3 + 57) = *(_OWORD *)((char *)a2 + 25);
    swift_bridgeObjectRelease();
    goto LABEL_6;
  }
LABEL_2:
  v38 = (uint64_t)a2;
  v8 = a3 - *(double *)(v3 + 80);
  v37 = (unint64_t *)(v3 + 24);
  swift_beginAccess();
  v9 = *(_QWORD *)(v3 + 24);
  v10 = *(_BYTE *)(v3 + 176);
  swift_bridgeObjectRetain();
  v41[0] = v9;
  v41[1] = AGCreateWeakAttribute();
  v42 = 0;
  v43 = v10;
  swift_beginAccess();
  v11 = *(_QWORD *)(v3 + 16);
  v12 = *(_QWORD *)(v3 + 24);
  swift_beginAccess();
  v13 = *(_OWORD *)(v3 + 48);
  v46 = *(_OWORD *)(v3 + 32);
  v47[0] = v13;
  *(_OWORD *)((char *)v47 + 9) = *(_OWORD *)(v3 + 57);
  outlined retain of AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>, ResolvedGradientVector>((uint64_t)&v46);
  swift_retain();
  swift_bridgeObjectRetain();
  specialized AnimatorState.forkListeners(animation:state:interval:)(v11, v12, (uint64_t)&v46);
  swift_release();
  outlined release of AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>, ResolvedGradientVector>((uint64_t)&v46);
  swift_bridgeObjectRelease();
  *(_BYTE *)(v3 + 176) = 0;
  v14 = *(_QWORD *)(v3 + 64);
  v15 = *(_BYTE *)(v3 + 72);
  v16 = *(_OWORD *)(v3 + 48);
  v44 = *(_OWORD *)(v3 + 32);
  *(_OWORD *)v45 = v16;
  *(_QWORD *)&v45[16] = v14;
  v45[24] = v15;
  v17 = *(uint64_t (**)(uint64_t, __int128 *, _QWORD *, uint64_t, unint64_t, double))(*(_QWORD *)a1 + 136);
  v18 = type metadata accessor for AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>, CGFloat>(0, &lazy cache variable for type metadata for AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>, ResolvedGradientVector>, (void (*)(void))lazy protocol witness table accessor for type ResolvedGradientVector and conformance ResolvedGradientVector);
  v19 = lazy protocol witness table accessor for type AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>, ResolvedGradientVector> and conformance AnimatablePair<A, B>();
  swift_bridgeObjectRetain();
  v20 = swift_retain();
  LOBYTE(v18) = v17(v20, &v44, v41, v18, v19, v8);
  swift_bridgeObjectRelease();
  swift_release();
  if ((v18 & 1) != 0)
  {
    *v37 = v41[0];
    swift_bridgeObjectRelease();
    *(_QWORD *)(v4 + 16) = a1;
    swift_retain();
    swift_release();
    v21 = v38;
  }
  else
  {
    swift_bridgeObjectRelease();
    v22 = *(_OWORD *)(v4 + 48);
    v44 = *(_OWORD *)(v4 + 32);
    *(_OWORD *)v45 = v22;
    *(_OWORD *)&v45[9] = *(_OWORD *)(v4 + 57);
    swift_beginAccess();
    swift_beginAccess();
    outlined retain of AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>, ResolvedGradientVector>((uint64_t)&v44);
    v21 = v38;
    specialized combineAnimation<A>(into:state:value:elapsed:newAnimation:newValue:)((uint64_t *)(v4 + 16), v37, (uint64_t)&v44, a1, v38, v8);
    swift_endAccess();
    swift_endAccess();
    outlined release of AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>, ResolvedGradientVector>((uint64_t)&v44);
  }
  swift_beginAccess();
  v23 = vaddq_f64(*(float64x2_t *)(v21 + 16), *(float64x2_t *)(v4 + 48));
  *(float64x2_t *)(v4 + 32) = vaddq_f64(*(float64x2_t *)v21, *(float64x2_t *)(v4 + 32));
  *(float64x2_t *)(v4 + 48) = v23;
  v39 = *(_QWORD *)(v21 + 32);
  v40 = *(_BYTE *)(v21 + 40);
  ResolvedGradientVector.add(_:scaledBy:)((uint64_t)&v39, 1.0);
  swift_endAccess();
  *(double *)(v4 + 96) = a3;
LABEL_6:
  v24 = swift_retain();
  v25 = specialized find<A>(_:key:)(v24);
  if (!v25)
  {
    swift_release();
    return;
  }
  v26 = *(double *)(v25 + 72);
  v27 = *(_BYTE *)(v25 + 80);
  swift_release();
  if ((v27 & 1) != 0)
    return;
  v28 = 0.0;
  if (v26 > 0.0)
  {
    v29 = log2(v26 * 240.0);
    v28 = exp2(floor(v29 + 0.01)) * 0.00416666667;
  }
  if (v28 >= *(double *)(v4 + 88))
    v28 = *(double *)(v4 + 88);
  *(double *)(v4 + 88) = v28;
  if (v28 >= 0.0166666667)
  {
    v32 = 0;
    v34 = 1;
    goto LABEL_29;
  }
  v30 = swift_retain();
  v31 = specialized find<A>(_:key:)(v30);
  if (!v31)
  {
    swift_release();
    goto LABEL_28;
  }
  v32 = *(_DWORD *)(v31 + 72);
  v33 = *(_BYTE *)(v31 + 76);
  swift_release();
  if ((v33 & 1) != 0)
  {
LABEL_28:
    v32 = *(_DWORD *)(v4 + 148);
    v34 = *(_BYTE *)(v4 + 152);
    goto LABEL_29;
  }
  v34 = 0;
LABEL_29:
  *(_DWORD *)(v4 + 148) = v32;
  *(_BYTE *)(v4 + 152) = v34;
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  double v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  char v15;
  uint64_t (*v16)(uint64_t, __int128 *, _QWORD *, uint64_t, uint64_t, double);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _OWORD *v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  double v24;
  char v25;
  double v26;
  long double v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  char v31;
  char v32;
  unsigned int v34;
  __int128 v35;
  unint64_t *v36;
  uint64_t v37;
  char v38;
  _QWORD v39[2];
  char v40;
  char v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  _OWORD v45[4];

  v4 = v3;
  v7 = a1;
  if (!*(_BYTE *)(v3 + 157))
  {
    if (one-time initialization token for introduced != -1)
      swift_once();
    v34 = static _SemanticFeature_v3.introduced;
    if (one-time initialization token for forced != -1)
      swift_once();
    swift_beginAccess();
    if (byte_25426FAB4 == 1)
    {
      v7 = a1;
      if ((dyld_program_sdk_at_least() & 1) != 0)
        goto LABEL_2;
    }
    else
    {
      v7 = a1;
      if (static Semantics.forced >= v34)
        goto LABEL_2;
    }
    swift_beginAccess();
    *(_QWORD *)(v3 + 16) = v7;
    swift_retain();
    swift_release();
    swift_beginAccess();
    outlined retain of AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, ResolvedGradientVector>, AnimatablePair<Double, Double>>((uint64_t)a2);
    v35 = a2[1];
    *(_OWORD *)(v3 + 32) = *a2;
    *(_OWORD *)(v3 + 48) = v35;
    *(_OWORD *)(v3 + 64) = a2[2];
    swift_bridgeObjectRelease();
    goto LABEL_6;
  }
LABEL_2:
  v8 = a3 - *(double *)(v3 + 80);
  v36 = (unint64_t *)(v3 + 24);
  swift_beginAccess();
  v9 = *(_QWORD *)(v3 + 24);
  v10 = *(_BYTE *)(v3 + 176);
  swift_bridgeObjectRetain();
  v39[0] = v9;
  v39[1] = AGCreateWeakAttribute();
  v40 = 0;
  v41 = v10;
  swift_beginAccess();
  v12 = *(_QWORD *)(v3 + 16);
  v11 = *(_QWORD *)(v3 + 24);
  swift_beginAccess();
  v13 = *(_OWORD *)(v3 + 48);
  v45[0] = *(_OWORD *)(v3 + 32);
  v45[1] = v13;
  v45[2] = *(_OWORD *)(v3 + 64);
  outlined retain of AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, ResolvedGradientVector>, AnimatablePair<Double, Double>>((uint64_t)v45);
  swift_retain();
  swift_bridgeObjectRetain();
  specialized AnimatorState.forkListeners(animation:state:interval:)(v12, v11, (uint64_t)v45);
  swift_release();
  outlined release of AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, ResolvedGradientVector>, AnimatablePair<Double, Double>>((uint64_t)v45);
  swift_bridgeObjectRelease();
  *(_BYTE *)(v3 + 176) = 0;
  v14 = *(_QWORD *)(v3 + 48);
  v15 = *(_BYTE *)(v3 + 56);
  v42 = *(_OWORD *)(v3 + 32);
  *(_QWORD *)&v43 = v14;
  BYTE8(v43) = v15;
  v44 = *(_OWORD *)(v3 + 64);
  v16 = *(uint64_t (**)(uint64_t, __int128 *, _QWORD *, uint64_t, uint64_t, double))(*(_QWORD *)v7 + 136);
  v17 = type metadata accessor for AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, ResolvedGradientVector>, AnimatablePair<CGFloat, CGFloat>>();
  v18 = lazy protocol witness table accessor for type AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, ResolvedGradientVector>, AnimatablePair<CGFloat, CGFloat>> and conformance AnimatablePair<A, B>();
  swift_bridgeObjectRetain();
  v19 = swift_retain();
  LOBYTE(v17) = v16(v19, &v42, v39, v17, v18, v8);
  swift_bridgeObjectRelease();
  swift_release();
  if ((v17 & 1) != 0)
  {
    *v36 = v39[0];
    swift_bridgeObjectRelease();
    *(_QWORD *)(v4 + 16) = v7;
    swift_retain();
    swift_release();
    v20 = a2;
  }
  else
  {
    swift_bridgeObjectRelease();
    v21 = *(_OWORD *)(v4 + 48);
    v42 = *(_OWORD *)(v4 + 32);
    v43 = v21;
    v44 = *(_OWORD *)(v4 + 64);
    swift_beginAccess();
    swift_beginAccess();
    outlined retain of AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, ResolvedGradientVector>, AnimatablePair<Double, Double>>((uint64_t)&v42);
    v20 = a2;
    specialized combineAnimation<A>(into:state:value:elapsed:newAnimation:newValue:)((uint64_t *)(v4 + 16), v36, (uint64_t)&v42, v7, (uint64_t)a2, v8);
    swift_endAccess();
    swift_endAccess();
    outlined release of AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, ResolvedGradientVector>, AnimatablePair<Double, Double>>((uint64_t)&v42);
  }
  swift_beginAccess();
  v37 = *((_QWORD *)v20 + 2);
  v38 = *((_BYTE *)v20 + 24);
  *(float64x2_t *)(v4 + 32) = vaddq_f64(*(float64x2_t *)v20, *(float64x2_t *)(v4 + 32));
  ResolvedGradientVector.add(_:scaledBy:)((uint64_t)&v37, 1.0);
  *(float64x2_t *)(v4 + 64) = vaddq_f64(*((float64x2_t *)v20 + 2), *(float64x2_t *)(v4 + 64));
  swift_endAccess();
  *(double *)(v4 + 96) = a3;
LABEL_6:
  v22 = swift_retain();
  v23 = specialized find<A>(_:key:)(v22);
  if (!v23)
  {
    swift_release();
    return;
  }
  v24 = *(double *)(v23 + 72);
  v25 = *(_BYTE *)(v23 + 80);
  swift_release();
  if ((v25 & 1) != 0)
    return;
  v26 = 0.0;
  if (v24 > 0.0)
  {
    v27 = log2(v24 * 240.0);
    v26 = exp2(floor(v27 + 0.01)) * 0.00416666667;
  }
  if (v26 >= *(double *)(v4 + 88))
    v26 = *(double *)(v4 + 88);
  *(double *)(v4 + 88) = v26;
  if (v26 >= 0.0166666667)
  {
    v30 = 0;
    v32 = 1;
    goto LABEL_29;
  }
  v28 = swift_retain();
  v29 = specialized find<A>(_:key:)(v28);
  if (!v29)
  {
    swift_release();
    goto LABEL_28;
  }
  v30 = *(_DWORD *)(v29 + 72);
  v31 = *(_BYTE *)(v29 + 76);
  swift_release();
  if ((v31 & 1) != 0)
  {
LABEL_28:
    v30 = *(_DWORD *)(v4 + 152);
    v32 = *(_BYTE *)(v4 + 156);
    goto LABEL_29;
  }
  v32 = 0;
LABEL_29:
  *(_DWORD *)(v4 + 152) = v30;
  *(_BYTE *)(v4 + 156) = v32;
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  double v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  char v15;
  uint64_t (*v16)(uint64_t, __int128 *, _QWORD *, uint64_t, uint64_t, double);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _OWORD *v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  double v24;
  char v25;
  double v26;
  long double v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  char v31;
  char v32;
  unsigned int v34;
  __int128 v35;
  unint64_t *v36;
  uint64_t v37;
  char v38;
  _QWORD v39[2];
  char v40;
  char v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  _OWORD v45[4];

  v4 = v3;
  v7 = a1;
  if (!*(_BYTE *)(v3 + 157))
  {
    if (one-time initialization token for introduced != -1)
      swift_once();
    v34 = static _SemanticFeature_v3.introduced;
    if (one-time initialization token for forced != -1)
      swift_once();
    swift_beginAccess();
    if (byte_25426FAB4 == 1)
    {
      v7 = a1;
      if ((dyld_program_sdk_at_least() & 1) != 0)
        goto LABEL_2;
    }
    else
    {
      v7 = a1;
      if (static Semantics.forced >= v34)
        goto LABEL_2;
    }
    swift_beginAccess();
    *(_QWORD *)(v3 + 16) = v7;
    swift_retain();
    swift_release();
    swift_beginAccess();
    outlined retain of AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, ResolvedGradientVector>, AnimatablePair<Double, Double>>((uint64_t)a2);
    v35 = a2[1];
    *(_OWORD *)(v3 + 32) = *a2;
    *(_OWORD *)(v3 + 48) = v35;
    *(_OWORD *)(v3 + 64) = a2[2];
    swift_bridgeObjectRelease();
    goto LABEL_6;
  }
LABEL_2:
  v8 = a3 - *(double *)(v3 + 80);
  v36 = (unint64_t *)(v3 + 24);
  swift_beginAccess();
  v9 = *(_QWORD *)(v3 + 24);
  v10 = *(_BYTE *)(v3 + 176);
  swift_bridgeObjectRetain();
  v39[0] = v9;
  v39[1] = AGCreateWeakAttribute();
  v40 = 0;
  v41 = v10;
  swift_beginAccess();
  v12 = *(_QWORD *)(v3 + 16);
  v11 = *(_QWORD *)(v3 + 24);
  swift_beginAccess();
  v13 = *(_OWORD *)(v3 + 48);
  v45[0] = *(_OWORD *)(v3 + 32);
  v45[1] = v13;
  v45[2] = *(_OWORD *)(v3 + 64);
  outlined retain of AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, ResolvedGradientVector>, AnimatablePair<Double, Double>>((uint64_t)v45);
  swift_retain();
  swift_bridgeObjectRetain();
  specialized AnimatorState.forkListeners(animation:state:interval:)(v12, v11, (uint64_t)v45);
  swift_release();
  outlined release of AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, ResolvedGradientVector>, AnimatablePair<Double, Double>>((uint64_t)v45);
  swift_bridgeObjectRelease();
  *(_BYTE *)(v3 + 176) = 0;
  v14 = *(_QWORD *)(v3 + 48);
  v15 = *(_BYTE *)(v3 + 56);
  v42 = *(_OWORD *)(v3 + 32);
  *(_QWORD *)&v43 = v14;
  BYTE8(v43) = v15;
  v44 = *(_OWORD *)(v3 + 64);
  v16 = *(uint64_t (**)(uint64_t, __int128 *, _QWORD *, uint64_t, uint64_t, double))(*(_QWORD *)v7 + 136);
  v17 = type metadata accessor for AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, ResolvedGradientVector>, AnimatablePair<Double, Double>>();
  v18 = lazy protocol witness table accessor for type AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, ResolvedGradientVector>, AnimatablePair<Double, Double>> and conformance AnimatablePair<A, B>();
  swift_bridgeObjectRetain();
  v19 = swift_retain();
  LOBYTE(v17) = v16(v19, &v42, v39, v17, v18, v8);
  swift_bridgeObjectRelease();
  swift_release();
  if ((v17 & 1) != 0)
  {
    *v36 = v39[0];
    swift_bridgeObjectRelease();
    *(_QWORD *)(v4 + 16) = v7;
    swift_retain();
    swift_release();
    v20 = a2;
  }
  else
  {
    swift_bridgeObjectRelease();
    v21 = *(_OWORD *)(v4 + 48);
    v42 = *(_OWORD *)(v4 + 32);
    v43 = v21;
    v44 = *(_OWORD *)(v4 + 64);
    swift_beginAccess();
    swift_beginAccess();
    outlined retain of AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, ResolvedGradientVector>, AnimatablePair<Double, Double>>((uint64_t)&v42);
    v20 = a2;
    specialized combineAnimation<A>(into:state:value:elapsed:newAnimation:newValue:)((uint64_t *)(v4 + 16), v36, (uint64_t)&v42, v7, (uint64_t)a2, v8);
    swift_endAccess();
    swift_endAccess();
    outlined release of AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, ResolvedGradientVector>, AnimatablePair<Double, Double>>((uint64_t)&v42);
  }
  swift_beginAccess();
  v37 = *((_QWORD *)v20 + 2);
  v38 = *((_BYTE *)v20 + 24);
  *(float64x2_t *)(v4 + 32) = vaddq_f64(*(float64x2_t *)v20, *(float64x2_t *)(v4 + 32));
  ResolvedGradientVector.add(_:scaledBy:)((uint64_t)&v37, 1.0);
  *(float64x2_t *)(v4 + 64) = vaddq_f64(*((float64x2_t *)v20 + 2), *(float64x2_t *)(v4 + 64));
  swift_endAccess();
  *(double *)(v4 + 96) = a3;
LABEL_6:
  v22 = swift_retain();
  v23 = specialized find<A>(_:key:)(v22);
  if (!v23)
  {
    swift_release();
    return;
  }
  v24 = *(double *)(v23 + 72);
  v25 = *(_BYTE *)(v23 + 80);
  swift_release();
  if ((v25 & 1) != 0)
    return;
  v26 = 0.0;
  if (v24 > 0.0)
  {
    v27 = log2(v24 * 240.0);
    v26 = exp2(floor(v27 + 0.01)) * 0.00416666667;
  }
  if (v26 >= *(double *)(v4 + 88))
    v26 = *(double *)(v4 + 88);
  *(double *)(v4 + 88) = v26;
  if (v26 >= 0.0166666667)
  {
    v30 = 0;
    v32 = 1;
    goto LABEL_29;
  }
  v28 = swift_retain();
  v29 = specialized find<A>(_:key:)(v28);
  if (!v29)
  {
    swift_release();
    goto LABEL_28;
  }
  v30 = *(_DWORD *)(v29 + 72);
  v31 = *(_BYTE *)(v29 + 76);
  swift_release();
  if ((v31 & 1) != 0)
  {
LABEL_28:
    v30 = *(_DWORD *)(v4 + 152);
    v32 = *(_BYTE *)(v4 + 156);
    goto LABEL_29;
  }
  v32 = 0;
LABEL_29:
  *(_DWORD *)(v4 + 152) = v30;
  *(_BYTE *)(v4 + 156) = v32;
}

void specialized AnimatorState.combine(newAnimation:newInterval:at:in:environment:)(uint64_t a1, uint64_t a2, char a3, double a4)
{
  uint64_t v4;
  uint64_t v5;
  double v10;
  uint64_t v11;
  char v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  char v17;
  uint64_t (*v18)(uint64_t, uint64_t *, _QWORD *, ValueMetadata *, unint64_t, double);
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  char v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  double v28;
  char v29;
  double v30;
  long double v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  char v35;
  char v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  char v42;
  _QWORD v43[2];
  char v44;
  char v45;

  v5 = v4;
  if (!*(_BYTE *)(v4 + 89))
  {
    if (one-time initialization token for introduced != -1)
      swift_once();
    v37 = static _SemanticFeature_v3.introduced;
    if (one-time initialization token for forced != -1)
      swift_once();
    swift_beginAccess();
    if (byte_25426FAB4 == 1)
    {
      if ((dyld_program_sdk_at_least() & 1) != 0)
        goto LABEL_2;
    }
    else if (static Semantics.forced >= v37)
    {
      goto LABEL_2;
    }
    swift_beginAccess();
    *(_QWORD *)(v4 + 16) = a1;
    swift_retain();
    swift_release();
    swift_beginAccess();
    *(_QWORD *)(v4 + 32) = a2;
    *(_BYTE *)(v4 + 40) = a3;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    goto LABEL_6;
  }
LABEL_2:
  v38 = a2;
  v10 = a4 - *(double *)(v4 + 48);
  swift_beginAccess();
  v11 = *(_QWORD *)(v4 + 24);
  v12 = *(_BYTE *)(v4 + 112);
  swift_bridgeObjectRetain();
  v43[0] = v11;
  v43[1] = AGCreateWeakAttribute();
  v44 = 0;
  v45 = v12;
  swift_beginAccess();
  v14 = *(_QWORD *)(v4 + 16);
  v13 = *(_QWORD *)(v4 + 24);
  swift_beginAccess();
  v15 = *(_QWORD *)(v4 + 32);
  v16 = *(_BYTE *)(v4 + 40);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  specialized AnimatorState.forkListeners(animation:state:interval:)(v14, v13, v15, v16);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  *(_BYTE *)(v5 + 112) = 0;
  v17 = *(_BYTE *)(v5 + 40);
  v41 = *(_QWORD *)(v5 + 32);
  v42 = v17;
  v18 = *(uint64_t (**)(uint64_t, uint64_t *, _QWORD *, ValueMetadata *, unint64_t, double))(*(_QWORD *)a1 + 136);
  v19 = lazy protocol witness table accessor for type ResolvedGradientVector and conformance ResolvedGradientVector();
  swift_bridgeObjectRetain();
  v20 = swift_retain();
  LOBYTE(v19) = v18(v20, &v41, v43, &type metadata for ResolvedGradientVector, v19, v10);
  swift_bridgeObjectRelease();
  swift_release();
  if ((v19 & 1) != 0)
  {
    *(_QWORD *)(v5 + 24) = v43[0];
    swift_bridgeObjectRelease();
    *(_QWORD *)(v5 + 16) = a1;
    swift_retain();
    swift_release();
    v21 = v38;
    v22 = a3;
  }
  else
  {
    swift_bridgeObjectRelease();
    v23 = *(_QWORD *)(v5 + 32);
    v24 = *(_BYTE *)(v5 + 40);
    swift_beginAccess();
    swift_beginAccess();
    swift_bridgeObjectRetain();
    v25 = v24;
    v21 = v38;
    v22 = a3;
    specialized combineAnimation<A>(into:state:value:elapsed:newAnimation:newValue:)((uint64_t *)(v5 + 16), (unint64_t *)(v5 + 24), v23, v25, a1, v38, a3, v10);
    swift_endAccess();
    swift_endAccess();
    swift_bridgeObjectRelease();
  }
  swift_beginAccess();
  v39 = v21;
  v40 = v22;
  ResolvedGradientVector.add(_:scaledBy:)((uint64_t)&v39, 1.0);
  swift_endAccess();
  *(double *)(v5 + 64) = a4;
LABEL_6:
  v26 = swift_retain();
  v27 = specialized find<A>(_:key:)(v26);
  if (!v27)
  {
    swift_release();
    return;
  }
  v28 = *(double *)(v27 + 72);
  v29 = *(_BYTE *)(v27 + 80);
  swift_release();
  if ((v29 & 1) != 0)
    return;
  v30 = 0.0;
  if (v28 > 0.0)
  {
    v31 = log2(v28 * 240.0);
    v30 = exp2(floor(v31 + 0.01)) * 0.00416666667;
  }
  if (v30 >= *(double *)(v5 + 56))
    v30 = *(double *)(v5 + 56);
  *(double *)(v5 + 56) = v30;
  if (v30 >= 0.0166666667)
  {
    v34 = 0;
    v36 = 1;
    goto LABEL_29;
  }
  v32 = swift_retain();
  v33 = specialized find<A>(_:key:)(v32);
  if (!v33)
  {
    swift_release();
    goto LABEL_28;
  }
  v34 = *(_DWORD *)(v33 + 72);
  v35 = *(_BYTE *)(v33 + 76);
  swift_release();
  if ((v35 & 1) != 0)
  {
LABEL_28:
    v34 = *(_DWORD *)(v5 + 84);
    v36 = *(_BYTE *)(v5 + 88);
    goto LABEL_29;
  }
  v36 = 0;
LABEL_29:
  *(_DWORD *)(v5 + 84) = v34;
  *(_BYTE *)(v5 + 88) = v36;
}

void AnimatorState.combine(newAnimation:newInterval:at:in:environment:)(uint64_t a1, double *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double *v11;
  double *v12;
  double v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  char v18;
  uint64_t v19;
  char *v20;
  void (*v21)(double *, char *, uint64_t);
  void (*v22)(double *, uint64_t);
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  unint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  double v29;
  char v30;
  double v31;
  long double v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  char v37;
  char v38;
  unsigned int v39;
  char v40;
  uint64_t v41;
  BOOL v42;
  char *v43;
  char *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  unint64_t *v49;
  double *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53[3];
  uint64_t v54[4];
  _QWORD v55[4];

  v5 = v4;
  v8 = *(_QWORD *)(*v4 + 80);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v11 = (double *)((char *)&v46 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  v13 = *v12;
  LODWORD(v10) = *((unsigned __int8 *)v4 + *(_QWORD *)(v14 + 160));
  v15 = *(_QWORD *)(v14 + 88);
  v52 = v16;
  if (!(_DWORD)v10)
  {
    if (one-time initialization token for introduced != -1)
      swift_once();
    v39 = static _SemanticFeature_v3.introduced;
    if (one-time initialization token for forced != -1)
      swift_once();
    swift_beginAccess();
    if (byte_25426FAB4 == 1)
    {
      v40 = dyld_program_sdk_at_least();
      v41 = v52;
      if ((v40 & 1) != 0)
        goto LABEL_2;
    }
    else
    {
      v42 = static Semantics.forced >= v39;
      v41 = v52;
      if (v42)
        goto LABEL_2;
    }
    swift_beginAccess();
    v4[2] = v41;
    swift_retain();
    swift_release();
    v43 = (char *)v4 + *(_QWORD *)(*v4 + 112);
    swift_beginAccess();
    (*(void (**)(char *, double *, uint64_t))(v9 + 24))(v43, a2, v8);
    swift_endAccess();
    goto LABEL_6;
  }
LABEL_2:
  v50 = a2;
  v51 = a4;
  v17 = v13 - *(double *)((char *)v4 + *(_QWORD *)(*v4 + 120));
  v49 = v4 + 3;
  swift_beginAccess();
  v54[0] = v4[3];
  v47 = *(_QWORD *)(*v4 + 184);
  v18 = *((_BYTE *)v4 + v47);
  swift_bridgeObjectRetain();
  AnimationContext.init(state:environment:isLogicallyComplete:)(v54, v18, (uint64_t)v55);
  v48 = v4 + 2;
  swift_beginAccess();
  v19 = v4[2];
  v53[0] = v4[3];
  v20 = (char *)v4 + *(_QWORD *)(*v4 + 112);
  swift_beginAccess();
  v21 = *(void (**)(double *, char *, uint64_t))(v9 + 16);
  v21(v11, v20, v8);
  swift_retain();
  swift_bridgeObjectRetain();
  AnimatorState.forkListeners(animation:state:interval:)(v19, v53, (uint64_t)v11);
  swift_release();
  v22 = *(void (**)(double *, uint64_t))(v9 + 8);
  v22(v11, v8);
  swift_bridgeObjectRelease();
  *((_BYTE *)v4 + v47) = 0;
  v21(v11, v20, v8);
  v23 = swift_retain();
  v24 = v52;
  LOBYTE(v19) = Animation.shouldMerge<A>(previous:value:time:context:)(v23, (uint64_t)v11, (uint64_t)v55, v52, v8, v15);
  swift_release();
  v22(v11, v8);
  if ((v19 & 1) != 0)
  {
    *v49 = v55[0];
    swift_bridgeObjectRelease();
    *v48 = v24;
    swift_retain();
    swift_release();
  }
  else
  {
    swift_bridgeObjectRelease();
    v21(v11, v20, v8);
    v25 = v48;
    swift_beginAccess();
    v26 = v49;
    swift_beginAccess();
    combineAnimation<A>(into:state:value:elapsed:newAnimation:newValue:)(v25, v26, v11, v24, v50, v8, v15, v17);
    swift_endAccess();
    swift_endAccess();
    v22(v11, v8);
  }
  swift_beginAccess();
  dispatch thunk of static AdditiveArithmetic.+= infix(_:_:)();
  swift_endAccess();
  *(double *)((char *)v5 + *(_QWORD *)(*v5 + 136)) = v13;
LABEL_6:
  v27 = swift_retain();
  v28 = specialized find<A>(_:key:)(v27);
  if (!v28)
  {
    swift_release();
    return;
  }
  v29 = *(double *)(v28 + 72);
  v30 = *(_BYTE *)(v28 + 80);
  swift_release();
  if ((v30 & 1) != 0)
    return;
  v31 = 0.0;
  if (v29 > 0.0)
  {
    v32 = log2(v29 * 240.0);
    v31 = exp2(floor(v32 + 0.01)) * 0.00416666667;
  }
  v33 = *(_QWORD *)(*v5 + 128);
  if (v31 >= *(double *)((char *)v5 + v33))
    v31 = *(double *)((char *)v5 + v33);
  *(double *)((char *)v5 + v33) = v31;
  if (v31 >= 0.0166666667)
  {
    v36 = 0;
    v38 = 1;
    goto LABEL_29;
  }
  v34 = swift_retain();
  v35 = specialized find<A>(_:key:)(v34);
  if (!v35)
  {
    swift_release();
    goto LABEL_28;
  }
  v36 = *(_DWORD *)(v35 + 72);
  v37 = *(_BYTE *)(v35 + 76);
  swift_release();
  if ((v37 & 1) != 0)
  {
LABEL_28:
    v44 = (char *)v5 + *(_QWORD *)(*v5 + 152);
    v36 = *(_DWORD *)v44;
    v38 = v44[4];
    goto LABEL_29;
  }
  v38 = 0;
LABEL_29:
  v45 = (char *)v5 + *(_QWORD *)(*v5 + 152);
  *(_DWORD *)v45 = v36;
  v45[4] = v38;
}

Swift::Void __swiftcall AnimatorState.nextUpdate()()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  double v3;
  unsigned int *v4;
  uint64_t v5;
  unsigned __int8 v6;
  void (*v7)(uint64_t *, unint64_t, double);
  void *v8;
  uint64_t v9;

  if (one-time initialization token for shared != -1)
    swift_once();
  swift_beginAccess();
  v1 = *v0;
  v2 = *(_QWORD *)(*v0 + 128);
  v9 = *(uint64_t *)((char *)v0 + *(_QWORD *)(*v0 + 136));
  v3 = *(double *)((char *)v0 + v2);
  v4 = (unsigned int *)((char *)v0 + *(_QWORD *)(v1 + 152));
  v5 = *v4;
  v6 = *((_BYTE *)v4 + 4);
  v7 = *(void (**)(uint64_t *, unint64_t, double))((*MEMORY[0x24BEE4EA0] & *(_QWORD *)static CoreGlue.shared)
                                                                  + 0x58);
  v8 = static CoreGlue.shared;
  v7(&v9, v5 | ((unint64_t)v6 << 32), v3);

}

BOOL specialized static AnimatablePair.== infix(_:_:)(double *a1, double *a2)
{
  _BOOL8 result;

  result = 0;
  if (*a1 == *a2 && a1[1] == a2[1] && a1[2] == a2[2] && a1[3] == a2[3])
  {
    type metadata accessor for AnimatablePair<CGFloat, CGFloat>();
    lazy protocol witness table accessor for type AnimatablePair<CGFloat, CGFloat> and conformance AnimatablePair<A, B>();
    if ((static AnimatablePair.== infix(_:_:)() & 1) != 0)
      return 1;
  }
  return result;
}

uint64_t specialized static AnimatablePair.== infix(_:_:)(float *a1, float *a2)
{
  float v4;
  float v5;
  float v6;
  float v7;
  double v8;
  double v9;
  double v10;
  BOOL v11;
  _BYTE v12[48];
  _BYTE v13[48];
  _DWORD v14[4];
  double v15;
  double v16;
  double v17;
  char v18;
  float v19[4];
  double v20;
  double v21;
  double v22;
  char v23;

  if (*a1 == *a2)
  {
    outlined init with take of _ShapeStyle_Pack.Effect.Kind.AnimatableData((uint64_t)(a1 + 2), (uint64_t)v13);
    outlined init with take of _ShapeStyle_Pack.Effect.Kind.AnimatableData((uint64_t)(a2 + 2), (uint64_t)v12);
    outlined init with take of _ShapeStyle_Pack.Effect.Kind.AnimatableData((uint64_t)v13, (uint64_t)v14);
    if (v18 == 1)
    {
      outlined init with take of _ShapeStyle_Pack.Effect.Kind.AnimatableData((uint64_t)v12, (uint64_t)v19);
      if ((v23 & 1) != 0)
        return 1;
    }
    else
    {
      v4 = *(float *)v14;
      v5 = *(float *)&v14[1];
      v7 = *(float *)&v14[2];
      v6 = *(float *)&v14[3];
      v9 = v15;
      v8 = v16;
      v10 = v17;
      outlined init with take of _ShapeStyle_Pack.Effect.Kind.AnimatableData((uint64_t)v12, (uint64_t)v19);
      if ((v23 & 1) == 0)
      {
        v11 = v4 == v19[0] && v5 == v19[1];
        if (v11 && v7 == v19[2] && v6 == v19[3] && v9 == v20 && v8 == v21 && v10 == v22)
          return 1;
      }
    }
  }
  return 0;
}

BOOL AnimatableAttributeHelper.isAnimating.getter(uint64_t a1)
{
  uint64_t v1;

  return *(_QWORD *)(v1 + *(int *)(a1 + 48)) != 0;
}

Swift::Bool __swiftcall AnimatableAttributeHelper.checkReset()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  int v3;
  int v4;

  v2 = v0;
  v3 = *(_DWORD *)AGGraphGetValue() >> 1;
  v4 = *(_DWORD *)(v1 + *(int *)(v2 + 52));
  if (v3 != v4)
    AnimatableAttributeHelper.reset()();
  return v3 != v4;
}

Swift::Void __swiftcall AnimatableAttributeHelper.reset()()
{
  int *v0;
  uint64_t v1;
  uint64_t v2;
  int *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t AssociatedTypeWitness;
  uint64_t v7;

  v2 = v1;
  v3 = v0;
  v4 = v0[12];
  if (*(_QWORD *)(v1 + v4))
  {
    AnimatorState.removeListeners()();
    v4 = v3[12];
  }
  swift_release();
  *(_QWORD *)(v1 + v4) = 0;
  v5 = v1 + v3[11];
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v7 = type metadata accessor for Optional();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v5, v7);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 56))(v5, 1, 1, AssociatedTypeWitness);
  *(_DWORD *)(v2 + v3[13]) = *(_DWORD *)AGGraphGetValue() >> 1;
}

uint64_t AnimatableAttributeHelper.update(value:defaultAnimation:environment:)(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  _OWORD v5[2];

  v5[1] = *(_OWORD *)(a4 + 16);
  return AnimatableAttributeHelper.update(value:defaultAnimation:environment:sampleCollector:)(a1, a2, a3, (void (*)(char *, uint64_t *))_ViewInputs.base.modify, (uint64_t)v5, a4);
}

Swift::Void __swiftcall AnimatableAttributeHelper.removeListeners()()
{
  uint64_t v0;
  uint64_t v1;

  if (*(_QWORD *)(v1 + *(int *)(v0 + 48)))
    AnimatorState.removeListeners()();
}

uint64_t AnimatableAttributeHelper.init(phase:time:transaction:)@<X0>(int a1@<W0>, int a2@<W1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, _DWORD *a6@<X8>)
{
  int *v10;
  char *v11;
  uint64_t AssociatedTypeWitness;
  uint64_t result;

  v10 = (int *)type metadata accessor for AnimatableAttributeHelper(0, a4, a5, a4);
  v11 = (char *)a6 + v10[11];
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 56))(v11, 1, 1, AssociatedTypeWitness);
  *(_QWORD *)((char *)a6 + v10[12]) = 0;
  *(_DWORD *)((char *)a6 + v10[13]) = 0;
  *a6 = a1;
  a6[1] = a2;
  a6[2] = a3;
  return result;
}

double AnimatableFrameAttributeVFD.init(position:size:pixelLength:environment:phase:time:transaction:animationsDisabled:)@<D0>(int a1@<W0>, int a2@<W1>, int a3@<W2>, int a4@<W3>, int a5@<W4>, int a6@<W5>, int a7@<W6>, char a8@<W7>, uint64_t a9@<X8>)
{
  double result;

  *(_DWORD *)a9 = a1;
  *(_DWORD *)(a9 + 4) = a2;
  *(_DWORD *)(a9 + 8) = a3;
  *(_DWORD *)(a9 + 12) = a4;
  *(_DWORD *)(a9 + 16) = a5;
  *(_DWORD *)(a9 + 20) = a6;
  *(_DWORD *)(a9 + 24) = a7;
  result = 0.0;
  *(_OWORD *)(a9 + 32) = 0u;
  *(_OWORD *)(a9 + 48) = 0u;
  *(_BYTE *)(a9 + 64) = 1;
  *(_QWORD *)(a9 + 72) = 0;
  *(_DWORD *)(a9 + 80) = 0;
  *(_QWORD *)(a9 + 88) = 0;
  *(_BYTE *)(a9 + 96) = 1;
  *(_QWORD *)(a9 + 136) = 0;
  *(_OWORD *)(a9 + 120) = 0u;
  *(_OWORD *)(a9 + 104) = 0u;
  *(_BYTE *)(a9 + 144) = 1;
  *(_BYTE *)(a9 + 145) = a8;
  return result;
}

double AnimatableFrameAttribute.init(position:size:pixelLength:environment:phase:time:transaction:animationsDisabled:)@<D0>(int a1@<W0>, int a2@<W1>, int a3@<W2>, int a4@<W3>, int a5@<W4>, int a6@<W5>, int a7@<W6>, char a8@<W7>, uint64_t a9@<X8>)
{
  double result;

  *(_DWORD *)a9 = a1;
  *(_DWORD *)(a9 + 4) = a2;
  *(_DWORD *)(a9 + 8) = a3;
  *(_DWORD *)(a9 + 12) = a4;
  *(_DWORD *)(a9 + 16) = a5;
  *(_DWORD *)(a9 + 20) = a6;
  *(_DWORD *)(a9 + 24) = a7;
  result = 0.0;
  *(_OWORD *)(a9 + 32) = 0u;
  *(_OWORD *)(a9 + 48) = 0u;
  *(_BYTE *)(a9 + 64) = 1;
  *(_QWORD *)(a9 + 72) = 0;
  *(_DWORD *)(a9 + 80) = 0;
  *(_BYTE *)(a9 + 84) = a8;
  return result;
}

uint64_t specialized AnimationState.subscript.getter(uint64_t a1)
{
  return specialized AnimationState.subscript.getter(a1, (uint64_t)&lazy cache variable for type metadata for CombinedAnimationState<Double>, MEMORY[0x24BEE13C8], (uint64_t)&protocol witness table for Double, (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t)))type metadata accessor for _AnyPreferenceKey<DisplayList.Key>);
}

{
  return specialized AnimationState.subscript.getter(a1, (uint64_t (*)(_QWORD))type metadata accessor for CombinedAnimationState<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>>);
}

uint64_t specialized AnimationState.subscript.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t (*)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)))
{
  uint64_t v6;
  unint64_t v7;
  char v8;
  _OWORD v10[2];
  _OWORD v11[2];
  uint64_t v12;

  if (!*(_QWORD *)(a1 + 16))
    return MEMORY[0x24BEE4AF8];
  v6 = a5(0, a2, a3, a4, type metadata accessor for CombinedAnimationState);
  v7 = specialized __RawDictionaryStorage.find<A>(_:)(v6);
  if ((v8 & 1) == 0)
    return MEMORY[0x24BEE4AF8];
  outlined init with copy of Any(*(_QWORD *)(a1 + 56) + 32 * v7, (uint64_t)v10);
  outlined init with take of Any(v10, v11);
  outlined init with take of Any(v11, v10);
  swift_dynamicCast();
  return v12;
}

uint64_t specialized AnimationState.subscript.getter(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v3;
  unint64_t v4;
  char v5;
  _OWORD v7[2];
  _OWORD v8[2];
  uint64_t v9;

  if (!*(_QWORD *)(a1 + 16))
    return MEMORY[0x24BEE4AF8];
  v3 = a2(0);
  v4 = specialized __RawDictionaryStorage.find<A>(_:)(v3);
  if ((v5 & 1) == 0)
    return MEMORY[0x24BEE4AF8];
  outlined init with copy of Any(*(_QWORD *)(a1 + 56) + 32 * v4, (uint64_t)v7);
  outlined init with take of Any(v7, v8);
  outlined init with take of Any(v8, v7);
  swift_dynamicCast();
  return v9;
}

double specialized AnimationState.subscript.getter@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  unint64_t v5;
  char v6;
  double result;
  _OWORD v8[2];
  _OWORD v9[2];

  if (*(_QWORD *)(a1 + 16)
    && (type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, (unint64_t *)&lazy cache variable for type metadata for SpringState<Double>, MEMORY[0x24BEE13C8], (uint64_t)&protocol witness table for Double, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for SpringState), v5 = specialized __RawDictionaryStorage.find<A>(_:)(v4), (v6 & 1) != 0))
  {
    outlined init with copy of Any(*(_QWORD *)(a1 + 56) + 32 * v5, (uint64_t)v8);
    outlined init with take of Any(v8, v9);
    outlined init with take of Any(v9, v8);
    swift_dynamicCast();
  }
  else
  {
    *(_QWORD *)(a2 + 48) = 0;
    result = 0.0;
    *(_OWORD *)(a2 + 16) = 0u;
    *(_OWORD *)(a2 + 32) = 0u;
    *(_OWORD *)a2 = 0u;
  }
  return result;
}

double specialized AnimationState.subscript.getter@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v4;
  unint64_t v5;
  char v6;
  double result;
  _OWORD v8[2];
  _OWORD v9[2];

  if (*(_QWORD *)(a1 + 16)
    && (type metadata accessor for CombinedAnimationState<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>>.Entry(0, (unint64_t *)&lazy cache variable for type metadata for SpringState<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>>, (uint64_t (*)(uint64_t))type metadata accessor for AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>, lazy protocol witness table accessor for type AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>> and conformance AnimatablePair<A, B>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for SpringState), v5 = specialized __RawDictionaryStorage.find<A>(_:)(v4), (v6 & 1) != 0))
  {
    outlined init with copy of Any(*(_QWORD *)(a1 + 56) + 32 * v5, (uint64_t)v8);
    outlined init with take of Any(v8, v9);
    outlined init with take of Any(v9, v8);
    swift_dynamicCast();
  }
  else
  {
    result = 0.0;
    a2[6] = 0u;
    a2[7] = 0u;
    a2[4] = 0u;
    a2[5] = 0u;
    a2[2] = 0u;
    a2[3] = 0u;
    *a2 = 0u;
    a2[1] = 0u;
  }
  return result;
}

uint64_t specialized AnimationState.subscript.getter(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void), uint64_t a4)
{
  uint64_t v5;
  unint64_t v6;
  char v7;
  _OWORD v9[2];
  _OWORD v10[2];
  uint64_t v11;

  if (!*(_QWORD *)(a1 + 16))
    return MEMORY[0x24BEE4AF8];
  type metadata accessor for FontBox<Font.SystemProvider>(0, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for CombinedAnimationState);
  v6 = specialized __RawDictionaryStorage.find<A>(_:)(v5);
  if ((v7 & 1) == 0)
    return MEMORY[0x24BEE4AF8];
  outlined init with copy of Any(*(_QWORD *)(a1 + 56) + 32 * v6, (uint64_t)v9);
  outlined init with take of Any(v9, v10);
  outlined init with take of Any(v10, v9);
  swift_dynamicCast();
  return v11;
}

uint64_t AnimatableAttribute.$environment.getter()
{
  uint64_t v0;

  return *(unsigned int *)(v0 + 4);
}

uint64_t AnimatableAttribute.init(source:phase:time:transaction:environment:)@<X0>(int a1@<W0>, int a2@<W1>, int a3@<W2>, uint64_t a4@<X3>, int a5@<W4>, uint64_t a6@<X5>, uint64_t a7@<X6>, _DWORD *a8@<X8>)
{
  int v10;
  uint64_t v14;

  v10 = a4;
  *a8 = a1;
  a8[1] = a5;
  v14 = type metadata accessor for AnimatableAttribute(0, a6, a7, a4);
  return AnimatableAttributeHelper.init(phase:time:transaction:)(a2, a3, v10, a6, a7, (_DWORD *)((char *)a8 + *(int *)(v14 + 40)));
}

Swift::Void __swiftcall AnimatableAttribute.updateValue()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t TupleTypeMetadata2;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t Value;
  char v13;
  char v14;
  void (*v15)(char *, uint64_t, uint64_t);
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  double v20;
  uint64_t v21;
  _QWORD v22[2];
  _BYTE v23[16];
  __int128 v24;
  uint64_t v25;

  v2 = v0;
  v25 = *MEMORY[0x24BDAC8D0];
  v3 = *(_QWORD *)(v0 + 16);
  v4 = *(_QWORD *)(v3 - 8);
  ((void (*)())MEMORY[0x24BDAC7A8])();
  v6 = (char *)v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v22[0] = *(_QWORD *)(TupleTypeMetadata2 - 8);
  MEMORY[0x24BDAC7A8](TupleTypeMetadata2);
  v9 = (char *)v22 - v8;
  v11 = *(int *)(v10 + 48);
  Value = AGGraphGetValue();
  v14 = v13;
  v15 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 16);
  v15(v9, Value, v3);
  v9[v11] = v14 & 1;
  v16 = *(_DWORD *)(v1 + 4);
  v18 = type metadata accessor for AnimatableAttributeHelper(0, v3, *(_QWORD *)(v2 + 24), v17);
  v24 = *(_OWORD *)(v18 + 16);
  AnimatableAttributeHelper.update(value:defaultAnimation:environment:sampleCollector:)((uint64_t)v9, 0, v16, (void (*)(char *, uint64_t *))_ViewInputs.base.modify, (uint64_t)v23, v18);
  if ((v9[v11] & 1) != 0 || !AGGraphGetOutputValue())
  {
    v19 = ((uint64_t (*)(char *, char *, uint64_t))v15)(v6, v9, v3);
    v20 = MEMORY[0x24BDAC7A8](v19);
    v22[-2] = v2;
    v22[-1] = MEMORY[0x23B7C9C04](&protocol conformance descriptor for AnimatableAttribute<A>, v2, v20);
    _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v6, (uint64_t)partial apply for closure #1 in StatefulRule.value.setter, (uint64_t)&v22[-4], v3, MEMORY[0x24BEE4078], MEMORY[0x24BEE4AE0] + 8, MEMORY[0x24BEE40A8], v21);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    (*(void (**)(char *, uint64_t))(v22[0] + 8))(v9, TupleTypeMetadata2);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v22[0] + 8))(v9, TupleTypeMetadata2);
  }
}

uint64_t AnimatableAttribute.description.getter()
{
  return specialized AnimatableAttribute.description.getter();
}

Swift::Void __swiftcall AnimatableAttribute.destroy()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v3 = v2 + *(int *)(v0 + 40);
  if (*(_QWORD *)(v3
                 + *(int *)(type metadata accessor for AnimatableAttributeHelper(0, *(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), v1)+ 48)))AnimatorState.removeListeners()();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AnimatableAttribute<A>()
{
  return specialized AnimatableAttribute.description.getter();
}

void protocol witness for static _AttributeBody._destroySelf(_:) in conformance AnimatableAttribute<A>()
{
  AnimatableAttribute.destroy()();
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance AnimatableAttribute<A>(uint64_t a1)
{
  MEMORY[0x23B7C9C04](&protocol conformance descriptor for AnimatableAttribute<A>, a1);
  return static AsyncAttribute.flags.getter();
}

Swift::Void __swiftcall AnimatableFrameAttribute.updateValue()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t *Value;
  char v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  char v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  double v15;
  char v16;
  __int128 v17;
  __int128 v18;
  _OWORD v19[2];
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;

  v1 = v0;
  v23 = *MEMORY[0x24BDAC8D0];
  Value = (uint64_t *)AGGraphGetValue();
  v4 = v3;
  v5 = *Value;
  v6 = Value[1];
  v7 = (uint64_t *)AGGraphGetValue();
  v9 = v4 | v8;
  v10 = *v7;
  v11 = v7[1];
  v12 = v7[2];
  v13 = v7[3];
  v15 = *(double *)AGGraphGetValue();
  v20 = v12;
  v21 = v13;
  if ((v9 & 1) != 0)
    v16 = 1;
  else
    v16 = v14 & 1;
  v22 = v16;
  *(_QWORD *)&v17 = v5;
  *((_QWORD *)&v17 + 1) = v6;
  *(_QWORD *)&v18 = v10;
  *((_QWORD *)&v18 + 1) = v11;
  CGRect.roundCoordinatesToNearestOrUp(toMultipleOf:)(v15);
  v19[0] = v17;
  v19[1] = v18;
  if ((*(_BYTE *)(v1 + 84) & 1) != 0)
  {
    if ((v16 & 1) != 0)
      goto LABEL_9;
LABEL_8:
    if (AGGraphGetOutputValue())
      return;
    goto LABEL_9;
  }
  specialized AnimatableAttributeHelper.update(value:defaultAnimation:environment:sampleCollector:)((uint64_t)v19, 0, *(unsigned int *)(v1 + 12), v1 + 16);
  if ((v22 & 1) == 0)
    goto LABEL_8;
LABEL_9:
  AGGraphSetOutputValue();
}

Swift::Void __swiftcall AnimatableFrameAttribute.destroy()()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 72))
    specialized AnimatorState.removeListeners()();
}

uint64_t protocol witness for ObservedAttribute.destroy() in conformance AnimatableFrameAttribute()
{
  uint64_t v0;
  uint64_t result;

  if (*(_QWORD *)(v0 + 72))
    return specialized AnimatorState.removeListeners()();
  return result;
}

uint64_t protocol witness for static _AttributeBody._destroySelf(_:) in conformance AnimatableFrameAttribute(uint64_t result)
{
  if (*(_QWORD *)(result + 72))
    return specialized AnimatorState.removeListeners()();
  return result;
}

Swift::Void __swiftcall AnimatableFrameAttributeVFD.updateValue()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t *Value;
  char v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  char v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  double v15;
  char v16;
  uint64_t v17;
  double v18;
  void (*v19)(double);
  void *v20;
  __int128 v21;
  __int128 v22;
  _OWORD v23[2];
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;

  v1 = v0;
  v27 = *MEMORY[0x24BDAC8D0];
  Value = (uint64_t *)AGGraphGetValue();
  v4 = v3;
  v5 = *Value;
  v6 = Value[1];
  v7 = (uint64_t *)AGGraphGetValue();
  v9 = v4 | v8;
  v10 = *v7;
  v11 = v7[1];
  v12 = v7[2];
  v13 = v7[3];
  v15 = *(double *)AGGraphGetValue();
  v24 = v12;
  v25 = v13;
  if ((v9 & 1) != 0)
    v16 = 1;
  else
    v16 = v14 & 1;
  v26 = v16;
  *(_QWORD *)&v21 = v5;
  *((_QWORD *)&v21 + 1) = v6;
  *(_QWORD *)&v22 = v10;
  *((_QWORD *)&v22 + 1) = v11;
  CGRect.roundCoordinatesToNearestOrUp(toMultipleOf:)(v15);
  v23[0] = v21;
  v23[1] = v22;
  if ((*(_BYTE *)(v1 + 145) & 1) == 0)
  {
    v17 = *(_QWORD *)(v1 + 72);
    specialized AnimatableAttributeHelper.update(value:defaultAnimation:environment:sampleCollector:)((uint64_t)v23, 0, *(unsigned int *)(v1 + 12), v1 + 16, v1);
    if (*(_QWORD *)(v1 + 72))
    {
      if (one-time initialization token for shared != -1)
        swift_once();
      swift_beginAccess();
      if (*(_BYTE *)(v1 + 96))
        v18 = 0.0;
      else
        v18 = *(double *)(v1 + 88);
      v19 = *(void (**)(double))((*MEMORY[0x24BEE4EA0] & *(_QWORD *)static CoreGlue.shared) + 0x50);
      v20 = static CoreGlue.shared;
      v19(v18);

    }
    else if (v17)
    {
      *(_QWORD *)(v1 + 136) = 0;
      *(_OWORD *)(v1 + 120) = 0u;
      *(_OWORD *)(v1 + 104) = 0u;
      *(_BYTE *)(v1 + 144) = 1;
      *(_QWORD *)(v1 + 88) = 0;
      *(_BYTE *)(v1 + 96) = 1;
    }
  }
  if ((v26 & 1) != 0 || !AGGraphGetOutputValue())
    AGGraphSetOutputValue();
}

void FrameVelocityFilter.addSample(_:time:)(double *a1, double a2, double a3, double a4, double a5)
{
  uint64_t v5;
  double v8;
  double v9;
  double v10;
  double x;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  CGRect v22;
  CGRect v23;
  CGRect v24;
  CGRect v25;

  v8 = *a1;
  if ((*(_BYTE *)(v5 + 56) & 1) == 0)
  {
    v9 = *(double *)(v5 + 16);
    if (v9 < v8)
    {
      v20 = a4;
      v21 = a5;
      v10 = 1.0 / (v8 - v9);
      v12 = v10 * (a3 - *(double *)(v5 + 32));
      v13 = v10 * (a4 - *(double *)(v5 + 40));
      v14 = v10 * (a5 - *(double *)(v5 + 48));
      v22.origin.x = v10 * (a2 - *(double *)(v5 + 24));
      x = v22.origin.x;
      v22.origin.y = v12;
      v22.size.width = v13;
      v22.size.height = v14;
      v15 = fabs(CGRectGetMinX(v22));
      v23.origin.x = x;
      v23.origin.y = v12;
      v23.size.width = v13;
      v23.size.height = v14;
      v16 = fabs(CGRectGetMaxX(v23));
      if (v15 > v16)
        v16 = v15;
      v19 = v16;
      v24.origin.x = x;
      v24.origin.y = v12;
      v24.size.width = v13;
      v24.size.height = v14;
      v17 = fabs(CGRectGetMinY(v24));
      v25.origin.x = x;
      v25.origin.y = v12;
      v25.size.width = v13;
      v25.size.height = v14;
      v18 = fabs(CGRectGetMaxY(v25));
      if (v17 > v18)
        v18 = v17;
      if (v19 > v18)
        v18 = v19;
      if ((*(_BYTE *)(v5 + 8) & 1) == 0)
        v18 = *(double *)v5 + (v18 - *(double *)v5) * 0.35;
      *(double *)v5 = v18;
      *(_BYTE *)(v5 + 8) = 0;
      a4 = v20;
      a5 = v21;
    }
  }
  *(double *)(v5 + 16) = v8;
  *(double *)(v5 + 24) = a2;
  *(double *)(v5 + 32) = a3;
  *(double *)(v5 + 40) = a4;
  *(double *)(v5 + 48) = a5;
  *(_BYTE *)(v5 + 56) = 0;
}

unsigned int *specialized AnimatableAttributeHelper.update(value:defaultAnimation:environment:sampleCollector:)(_BYTE *a1, _QWORD *a2, int a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v8;
  uint64_t v9;
  double v10;
  double *Value;
  char v12;
  unsigned int *result;
  unsigned int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  int64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  int64_t v32;
  _BYTE *v33;
  int64_t v34;
  uint64_t v35;
  _QWORD *v36;
  unsigned int v37;
  unsigned int v38;
  unsigned __int8 *v39;
  unsigned int v40;
  unsigned int v41;
  _BOOL4 v43;
  _BYTE *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  float v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  char v65;
  uint64_t v66;
  uint64_t v67;
  void *v68;
  _QWORD *v69;
  id v70;
  uint64_t v71;
  int v72;
  int v73;
  id v74;
  uint64_t v75;
  uint64_t v76;
  int v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  int64_t v81;
  int64_t v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  void *v89;
  id v90;
  uint64_t v91;
  int CurrentAttribute;
  uint64_t Counter;
  uint64_t v94;
  int v95;
  uint64_t v96;
  char *v97;
  double v98;
  uint64_t v99;
  unsigned __int8 v100;
  void (*v101)(uint64_t *, unint64_t, double);
  void *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  void *v108;
  _QWORD *v109;
  id v110;
  uint64_t v111;
  int v112;
  int v113;
  id v114;
  uint64_t v115;
  uint64_t v116;
  int v117;
  uint64_t v118;
  char *v119;
  uint64_t v120;
  _QWORD *v121;
  _QWORD *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  char *v126;
  int v127;
  _BYTE *v128;
  uint64_t v129;
  _BYTE *v130;
  _BYTE *v131;
  int64_t v132;
  _QWORD *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  unint64_t v145;
  unsigned __int8 v146;
  uint64_t v147[13];
  _QWORD *v148;
  uint64_t v149[3];
  uint64_t v150[2];
  _BYTE v151[80];
  int8x16_t v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  __int128 v158;
  uint64_t v159;
  uint64_t v160;

  v127 = a3;
  v160 = *MEMORY[0x24BDAC8D0];
  v8 = type metadata accessor for OSSignpostID();
  v124 = *(_QWORD *)(v8 - 8);
  v125 = v8;
  MEMORY[0x24BDAC7A8](v8);
  v126 = (char *)&v120 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for infinity == -1)
    goto LABEL_2;
LABEL_100:
  swift_once();
LABEL_2:
  v10 = -*(double *)&static Time.infinity;
  if (*(_QWORD *)(a4 + 24))
  {
    Value = (double *)AGGraphGetValue();
    if ((v12 & 1) != 0)
      v10 = *Value;
  }
  result = (unsigned int *)AGGraphGetValue();
  v14 = *result;
  v15 = *(_DWORD *)(a4 + 32);
  v128 = a1;
  v129 = a4;
  if (v15 == v14 >> 1)
  {
    if (a1[8] != 1)
    {
      v123 = 0;
      v16 = *(_QWORD *)(a4 + 24);
      if (v16)
        goto LABEL_67;
      return result;
    }
  }
  else
  {
    specialized AnimatableAttributeHelper.reset()();
    a1[8] = 1;
  }
  v122 = a2;
  v17 = *(_QWORD *)a1;
  v18 = *(_QWORD *)(*(_QWORD *)a1 + 16);
  v4 = (_QWORD *)MEMORY[0x24BEE4AF8];
  if (v18)
  {
    v149[0] = MEMORY[0x24BEE4AF8];
    swift_bridgeObjectRetain();
    v133 = (_QWORD *)v18;
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v18, 0);
    v132 = v17 + 32;
    v141 = v149[0];
    v130 = (_BYTE *)v17;
    v131 = v151;
    v140 = 1;
    v20 = *(_OWORD *)(v17 + 64);
    v19 = *(_OWORD *)(v17 + 80);
    v21 = *(_OWORD *)(v17 + 48);
    v152 = *(int8x16_t *)(v17 + 32);
    v153 = v21;
    v154 = v20;
    v155 = v19;
    v22 = *(_OWORD *)(v17 + 96);
    v23 = *(_OWORD *)(v17 + 112);
    v24 = *(_OWORD *)(v17 + 128);
    v159 = *(_QWORD *)(v17 + 144);
    v157 = v23;
    v158 = v24;
    v156 = v22;
    __asm { BR              X9 }
  }
  v150[0] = MEMORY[0x24BEE4AF8];
  v25 = *(_QWORD *)(a4 + 16);
  if (!v25)
    goto LABEL_15;
  v149[0] = *(_QWORD *)(a4 + 16);
  swift_bridgeObjectRetain();
  if ((specialized static _ShapeStyle_Pack.AnimatableData.== infix(_:_:)(v150, v149) & 1) != 0)
  {
    swift_bridgeObjectRelease();
LABEL_15:
    v123 = 0;
    goto LABEL_66;
  }
  AGGraphClearUpdate();
  v26 = *(_QWORD **)AGGraphGetValue();
  swift_retain();
  AGGraphSetUpdate();
  v27 = swift_retain();
  v28 = specialized find<A>(_:key:)(v27);
  v121 = v26;
  if (v28)
  {
    v29 = *(_QWORD *)(v28 + 72);
    swift_retain();
    swift_release();
    v130 = (_BYTE *)v29;
    if (v29)
    {
      v123 = 0;
      goto LABEL_25;
    }
  }
  else
  {
    swift_release();
  }
  v30 = swift_retain();
  v31 = specialized closure #1 in PropertyList.subscript.getter(v30);
  v123 = 0;
  swift_release();
  if ((v31 & 1) != 0)
  {
    if (one-time initialization token for velocityTracking != -1)
      goto LABEL_104;
    goto LABEL_22;
  }
  if (v122)
  {
    v130 = (_BYTE *)swift_retain();
    goto LABEL_25;
  }
LABEL_96:
  swift_release();
  while (1)
  {
    swift_bridgeObjectRelease();
LABEL_66:
    result = (unsigned int *)swift_bridgeObjectRelease();
    *(_QWORD *)(a4 + 16) = v150[0];
    v16 = *(_QWORD *)(a4 + 24);
    if (!v16)
      return result;
LABEL_67:
    v80 = *(_QWORD *)a1;
    v81 = *(_QWORD *)(*(_QWORD *)a1 + 16);
    if (v81)
    {
      v147[0] = MEMORY[0x24BEE4AF8];
      v122 = (_QWORD *)v16;
      v82 = v81;
      swift_retain();
      swift_bridgeObjectRetain();
      v132 = v82;
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v82, 0);
      v121 = (_QWORD *)v80;
      v140 = v147[0];
      v130 = v151;
      v131 = (_BYTE *)(v80 + 32);
      v139 = 1;
      v84 = *(_OWORD *)(v80 + 64);
      v83 = *(_OWORD *)(v80 + 80);
      v85 = *(_OWORD *)(v80 + 48);
      v152 = *(int8x16_t *)(v80 + 32);
      v153 = v85;
      v154 = v84;
      v155 = v83;
      v86 = *(_OWORD *)(v80 + 96);
      v87 = *(_OWORD *)(v80 + 112);
      v88 = *(_OWORD *)(v80 + 128);
      v159 = *(_QWORD *)(v80 + 144);
      v157 = v87;
      v158 = v88;
      v156 = v86;
      __asm { BR              X9 }
    }
    swift_retain();
    v150[0] = MEMORY[0x24BEE4AF8];
    v152.i8[0] = 0;
    if ((specialized AnimatorState.update(_:at:environment:)((uint64_t)v150, v10) & 1) == 0)
      break;
    swift_bridgeObjectRetain();
    swift_retain_n();
    a4 = static os_signpost_type_t.end.getter();
    static os_signpost_type_t.event.getter();
    if ((kdebug_is_enabled() & 1) == 0)
      goto LABEL_80;
    if (one-time initialization token for _signpostLog != -1)
      swift_once();
    v89 = (void *)_signpostLog;
    if ((OS_os_log.signpostsEnabled.getter() & 1) == 0)
    {
LABEL_80:
      swift_release_n();
      goto LABEL_81;
    }
    swift_retain();
    v90 = v89;
    OSSignpostID.init(log:object:)();
    type metadata accessor for _ContiguousArrayStorage<CVarArg>();
    v91 = swift_allocObject();
    *(_OWORD *)(v91 + 16) = xmmword_235283260;
    CurrentAttribute = AGGraphGetCurrentAttribute();
    v25 = *MEMORY[0x24BE096C0];
    if (CurrentAttribute == (_DWORD)v25)
      goto LABEL_102;
    v4 = (id)AGGraphGetAttributeGraph();
    Counter = AGGraphGetCounter();

    v94 = MEMORY[0x24BEE1ED8];
    *(_QWORD *)(v91 + 56) = MEMORY[0x24BEE1E88];
    *(_QWORD *)(v91 + 64) = v94;
    *(_QWORD *)(v91 + 32) = Counter;
    v95 = AGGraphGetCurrentAttribute();
    if (v95 != (_DWORD)v25)
    {
      v96 = MEMORY[0x24BEE4558];
      *(_QWORD *)(v91 + 96) = MEMORY[0x24BEE44F0];
      *(_QWORD *)(v91 + 104) = v96;
      *(_DWORD *)(v91 + 72) = v95;
      *(_QWORD *)(v91 + 136) = MEMORY[0x24BEE0D00];
      *(_QWORD *)(v91 + 144) = lazy protocol witness table accessor for type String and conformance String();
      *(_QWORD *)(v91 + 112) = 0xD000000000000010;
      *(_QWORD *)(v91 + 120) = 0x80000002352E5F10;
      v97 = v126;
      os_signpost(_:dso:log:name:signpostID:_:_:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v124 + 8))(v97, v125);
LABEL_81:
      v103 = swift_bridgeObjectRelease();
      v104 = v129;
      if (*(_QWORD *)(v129 + 24))
      {
        specialized AnimatorState.removeListeners()(v103);
        swift_release();
      }
      *(_QWORD *)(v104 + 24) = 0;
      goto LABEL_84;
    }
LABEL_103:
    __break(1u);
LABEL_104:
    swift_once();
LABEL_22:
    v130 = (_BYTE *)static Animation.velocityTracking;
    swift_retain();
LABEL_25:
    v148 = v4;
    v32 = *(_QWORD *)(v25 + 16);
    v134 = v25;
    if (v32)
    {
      a2 = (_QWORD *)v4[2];
      if (a2)
      {
        v33 = (_BYTE *)(v25 + 32);
        swift_bridgeObjectRetain();
        v34 = 0;
        v35 = 0;
        v132 = v32;
        v133 = a2;
        v131 = (_BYTE *)(v25 + 32);
        while ((unint64_t)v35 < v4[2])
        {
          if ((unint64_t)v34 >= *(_QWORD *)(v25 + 16))
            goto LABEL_98;
          v36 = &v4[14 * v35];
          v37 = *((unsigned __int8 *)v36 + 32);
          v38 = *((unsigned __int8 *)v36 + 33);
          v39 = &v33[112 * v34];
          v40 = *v39;
          v41 = v39[1];
          if (v37 == v40 && v38 == v41)
          {
            v145 = v35;
            v143 = v34;
            v45 = &v33[112 * v34];
            v46 = *((_QWORD *)v45 + 1);
            v47 = *((_QWORD *)v45 + 2);
            v48 = *((_QWORD *)v45 + 3);
            v49 = *((_QWORD *)v45 + 4);
            v50 = *((_QWORD *)v45 + 5);
            v51 = *((_QWORD *)v45 + 6);
            v52 = *((_QWORD *)v45 + 7);
            v53 = *((_QWORD *)v45 + 8);
            v54 = *((_QWORD *)v45 + 9);
            v55 = *((_QWORD *)v45 + 10);
            v56 = *((float *)v45 + 24);
            v57 = *((_QWORD *)v45 + 13);
            LODWORD(v139) = v45[88];
            v140 = v55;
            v141 = v54;
            v58 = v46;
            v59 = v47;
            v60 = v48;
            v61 = v49;
            a1 = (_BYTE *)v50;
            v62 = v51;
            a4 = v52;
            v144 = v53;
            outlined copy of _ShapeStyle_Pack.Fill.AnimatableData(v46, v47, v48, v49, v50, v51, v52, v53, v54, v55, v139);
            v142 = v57;
            swift_bridgeObjectRetain();
            a2 = v4;
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
              a2 = specialized _ArrayBuffer._consumeAndCreateNew()(v4);
            if (v145 >= a2[2])
              goto LABEL_99;
            v4 = a2;
            v138 = v58;
            v152.i64[0] = v58;
            v137 = v59;
            v152.i64[1] = v59;
            v63 = &a2[14 * v145];
            *(_QWORD *)&v153 = v60;
            *((_QWORD *)&v153 + 1) = v61;
            *(_QWORD *)&v154 = a1;
            v136 = v62;
            *((_QWORD *)&v154 + 1) = v62;
            v135 = a4;
            *(_QWORD *)&v155 = a4;
            *((_QWORD *)&v155 + 1) = v144;
            v64 = v140;
            a4 = v141;
            *(_QWORD *)&v156 = v141;
            *((_QWORD *)&v156 + 1) = v140;
            v65 = v139;
            LOBYTE(v157) = v139;
            specialized static _ShapeStyle_Pack.Fill.AnimatableData.-= infix(_:_:)((__int128 *)(v63 + 5), &v152);
            *((float *)v63 + 32) = *((float *)v63 + 32) - v56;
            v66 = v142;
            swift_bridgeObjectRetain();
            specialized static AnimatableArray.-= infix(_:_:)((uint64_t)(v63 + 17), v66);
            swift_bridgeObjectRelease();
            outlined consume of _ShapeStyle_Pack.Fill.AnimatableData(v138, v137, v60, v61, (uint64_t)a1, v136, v135, v144, a4, v64, v65);
            swift_bridgeObjectRelease();
            v148 = v4;
            v35 = v145 + 1;
            v34 = v143 + 1;
            a2 = v133;
            v25 = v134;
            v33 = v131;
            v32 = v132;
            if ((uint64_t)(v145 + 1) >= (uint64_t)v133)
            {
LABEL_49:
              v4 = v121;
              if ((uint64_t)a2 >= v35)
              {
                specialized Array.replaceSubrange<A>(_:with:)(v35, (int64_t)a2);
                a1 = v128;
                a4 = v129;
                goto LABEL_54;
              }
              __break(1u);
LABEL_102:
              __break(1u);
              goto LABEL_103;
            }
          }
          else
          {
            v43 = v38 < v41 && v37 == v40;
            if (v37 >= v40 && !v43)
            {
              ++v34;
              if (v35 >= (uint64_t)a2)
                goto LABEL_49;
            }
            else if (++v35 >= (uint64_t)a2)
            {
              goto LABEL_49;
            }
          }
          if (v34 >= v32)
            goto LABEL_49;
        }
        __break(1u);
LABEL_98:
        __break(1u);
LABEL_99:
        __break(1u);
        goto LABEL_100;
      }
      v148 = (_QWORD *)v25;
      swift_bridgeObjectRetain();
      _ShapeStyle_Pack.AnimatableData.scale(by:)(-1.0);
    }
    else
    {
      swift_bridgeObjectRetain();
    }
    v4 = v121;
LABEL_54:
    v10 = *(double *)AGGraphGetValue();
    if (*(_QWORD *)(a4 + 24))
    {
      v67 = (uint64_t)v148;
      swift_retain();
      v152.i8[0] = 0;
      specialized AnimatorState.combine(newAnimation:newInterval:at:in:environment:)((uint64_t)v130, v67, v10);
      swift_retain_n();
      swift_bridgeObjectRetain();
      static os_signpost_type_t.event.getter();
      static os_signpost_type_t.event.getter();
      if ((kdebug_is_enabled() & 1) == 0)
        goto LABEL_62;
      if (one-time initialization token for _signpostLog != -1)
        swift_once();
      v68 = (void *)_signpostLog;
      if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
      {
        v69 = v4;
        swift_retain();
        v70 = v68;
        OSSignpostID.init(log:object:)();
        type metadata accessor for _ContiguousArrayStorage<CVarArg>();
        v71 = swift_allocObject();
        *(_OWORD *)(v71 + 16) = xmmword_235283260;
        v72 = AGGraphGetCurrentAttribute();
        v73 = *MEMORY[0x24BE096C0];
        if (v72 == *MEMORY[0x24BE096C0])
        {
          __break(1u);
LABEL_106:
          __break(1u);
LABEL_107:
          __break(1u);
LABEL_108:
          __break(1u);
        }
        v74 = (id)AGGraphGetAttributeGraph();
        v75 = AGGraphGetCounter();

        v76 = MEMORY[0x24BEE1ED8];
        *(_QWORD *)(v71 + 56) = MEMORY[0x24BEE1E88];
        *(_QWORD *)(v71 + 64) = v76;
        *(_QWORD *)(v71 + 32) = v75;
        v77 = AGGraphGetCurrentAttribute();
        if (v77 == v73)
          goto LABEL_106;
        v78 = MEMORY[0x24BEE4558];
        *(_QWORD *)(v71 + 96) = MEMORY[0x24BEE44F0];
        *(_QWORD *)(v71 + 104) = v78;
        *(_DWORD *)(v71 + 72) = v77;
        *(_QWORD *)(v71 + 136) = MEMORY[0x24BEE0D00];
        *(_QWORD *)(v71 + 144) = lazy protocol witness table accessor for type String and conformance String();
        *(_QWORD *)(v71 + 112) = 0xD000000000000010;
        *(_QWORD *)(v71 + 120) = 0x80000002352E5F10;
        v79 = v126;
        os_signpost(_:dso:log:name:signpostID:_:_:)();
        swift_release_n();
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v124 + 8))(v79, v125);
        v4 = v69;
      }
      else
      {
LABEL_62:
        swift_release_n();
      }
      swift_bridgeObjectRelease();
      a4 = v129;
      if (!*(_QWORD *)(v129 + 24))
      {
LABEL_95:
        __break(1u);
        goto LABEL_96;
      }
    }
    else
    {
      v105 = (uint64_t)v148;
      type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for AnimatorState<_ShapeStyle_Pack.AnimatableData>, (uint64_t (*)(void))lazy protocol witness table accessor for type _ShapeStyle_Pack.AnimatableData and conformance _ShapeStyle_Pack.AnimatableData, (uint64_t)&type metadata for _ShapeStyle_Pack.AnimatableData, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatorState);
      swift_allocObject();
      swift_retain();
      v106 = (uint64_t)v130;
      swift_retain();
      swift_bridgeObjectRetain();
      v107 = specialized AnimatorState.init(animation:interval:at:in:)(v106, v105, v10);
      swift_bridgeObjectRetain();
      swift_retain();
      static os_signpost_type_t.begin.getter();
      static os_signpost_type_t.event.getter();
      if ((kdebug_is_enabled() & 1) == 0)
        goto LABEL_93;
      if (one-time initialization token for _signpostLog != -1)
        swift_once();
      v108 = (void *)_signpostLog;
      if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
      {
        v109 = v4;
        swift_retain();
        v110 = v108;
        OSSignpostID.init(log:object:)();
        type metadata accessor for _ContiguousArrayStorage<CVarArg>();
        v111 = swift_allocObject();
        *(_OWORD *)(v111 + 16) = xmmword_235283260;
        v112 = AGGraphGetCurrentAttribute();
        v113 = *MEMORY[0x24BE096C0];
        if (v112 == *MEMORY[0x24BE096C0])
          goto LABEL_107;
        v114 = (id)AGGraphGetAttributeGraph();
        v115 = AGGraphGetCounter();

        v116 = MEMORY[0x24BEE1ED8];
        *(_QWORD *)(v111 + 56) = MEMORY[0x24BEE1E88];
        *(_QWORD *)(v111 + 64) = v116;
        *(_QWORD *)(v111 + 32) = v115;
        v117 = AGGraphGetCurrentAttribute();
        if (v117 == v113)
          goto LABEL_108;
        v118 = MEMORY[0x24BEE4558];
        *(_QWORD *)(v111 + 96) = MEMORY[0x24BEE44F0];
        *(_QWORD *)(v111 + 104) = v118;
        *(_DWORD *)(v111 + 72) = v117;
        *(_QWORD *)(v111 + 136) = MEMORY[0x24BEE0D00];
        *(_QWORD *)(v111 + 144) = lazy protocol witness table accessor for type String and conformance String();
        *(_QWORD *)(v111 + 112) = 0xD000000000000010;
        *(_QWORD *)(v111 + 120) = 0x80000002352E5F10;
        v119 = v126;
        os_signpost(_:dso:log:name:signpostID:_:_:)();
        swift_release();
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v124 + 8))(v119, v125);
        v4 = v109;
      }
      else
      {
LABEL_93:
        swift_release();
      }
      swift_bridgeObjectRelease();
      a4 = v129;
      swift_release();
      *(_QWORD *)(a4 + 24) = v107;
      if (!v107)
        goto LABEL_95;
    }
    swift_retain();
    specialized AnimatorState.addListeners(transaction:)();
    swift_release();
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
  }
  if (one-time initialization token for shared != -1)
    swift_once();
  swift_beginAccess();
  v98 = *(double *)(v16 + 48);
  v147[0] = *(_QWORD *)(v16 + 56);
  v99 = *(unsigned int *)(v16 + 72);
  v100 = *(_BYTE *)(v16 + 76);
  v101 = *(void (**)(uint64_t *, unint64_t, double))((*MEMORY[0x24BEE4EA0] & *(_QWORD *)static CoreGlue.shared)
                                                                    + 0x58);
  v102 = static CoreGlue.shared;
  v146 = v100;
  v101(v147, v99 | ((unint64_t)v100 << 32), v98);

LABEL_84:
  v147[0] = v150[0];
  swift_bridgeObjectRetain();
  _ShapeStyle_Pack.animatableData.setter(v147);
  swift_bridgeObjectRelease();
  result = (unsigned int *)swift_release();
  a1[8] = 1;
  return result;
}

void specialized AnimatableAttributeHelper.update(value:defaultAnimation:environment:sampleCollector:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  double v18;
  double *Value;
  char v20;
  double *v21;
  double *v22;
  float v23;
  int8x16_t v24;
  int8x16_t v25;
  float v26;
  BOOL v27;
  BOOL v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  float v35;
  float v36;
  uint64_t v37;
  int v38;
  void *v39;
  id v40;
  uint64_t v41;
  int v42;
  id v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  uint64_t i;
  uint64_t v48;
  int v49;
  void *v50;
  id v51;
  uint64_t v52;
  int CurrentAttribute;
  id v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  int8x16_t v59;
  float32x4_t v60;
  float32x4_t v61;
  void *v62;
  id v63;
  uint64_t v64;
  int v65;
  int v66;
  id v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  uint64_t v71;
  double v72;
  uint64_t v73;
  unsigned __int8 v74;
  void (*v75)(float32x4_t *, unint64_t, double);
  void *v76;
  float32x4_t v77;
  float32x4_t v78;
  __int32 v79;
  __int32 v80;
  __int32 v81;
  __int32 v82;
  uint64_t v83;
  __int32 v84;
  __int32 v85;
  __int32 v86;
  uint64_t Counter;
  int v88;
  int v89;
  uint64_t v90;
  float v91;
  int8x16_t v92;
  float32x4_t v93;
  char v94;
  float32x4_t v95;
  float v96[6];
  float32x4_t v97[2];

  v14 = type metadata accessor for OSSignpostID();
  v15 = *(_QWORD *)(v14 - 8);
  MEMORY[0x24BDAC7A8](v14);
  v17 = (char *)&Counter - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for infinity != -1)
    swift_once();
  v18 = -*(double *)&static Time.infinity;
  if (*(_QWORD *)(a4 + 32))
  {
    Value = (double *)AGGraphGetValue();
    if ((v20 & 1) != 0)
      v18 = *Value;
  }
  v21 = (double *)&unk_254266000;
  if (*(_DWORD *)(a4 + 40) == *(_DWORD *)AGGraphGetValue() >> 1)
  {
    if (*(_BYTE *)(a1 + 16) != 1)
    {
      v22 = (double *)&unk_254266000;
      v21 = *(double **)(a4 + 32);
      if (v21)
        goto LABEL_62;
      return;
    }
  }
  else
  {
    specialized AnimatableAttributeHelper.reset()();
    *(_BYTE *)(a1 + 16) = 1;
  }
  v4 = *(float *)a1;
  v5 = *(float *)(a1 + 4);
  v6 = *(float *)(a1 + 8);
  v23 = *(float *)(a1 + 12);
  if (one-time initialization token for legacyInterpolation != -1)
    swift_once();
  swift_beginAccess();
  if ((static Color.Resolved.legacyInterpolation & 1) == 0)
  {
    v95.i8[0] = 2;
    *(float *)v24.i32 = v4;
    ResolvedGradient.ColorSpace.convertIn(_:)(v96, v24, v5, LODWORD(v6), v23, v25);
    v4 = v96[0];
    v5 = v96[1];
    v6 = v96[2];
    v23 = v96[3];
  }
  v8 = v4 * 128.0;
  v10 = v5 * 128.0;
  v26 = v6 * 128.0;
  v7 = v23 * 128.0;
  if ((*(_BYTE *)(a4 + 28) & 1) != 0)
    goto LABEL_61;
  v4 = *(float *)(a4 + 12);
  v6 = *(float *)(a4 + 16);
  v9 = *(float *)(a4 + 20);
  v5 = *(float *)(a4 + 24);
  v27 = v8 == v4 && v10 == v6;
  v28 = v27 && v26 == v9;
  if (v28 && v7 == v5)
    goto LABEL_61;
  v91 = v26;
  v92.i64[0] = v15;
  AGGraphClearUpdate();
  AGGraphGetValue();
  swift_retain();
  AGGraphSetUpdate();
  v30 = swift_retain();
  v31 = specialized find<A>(_:key:)(v30);
  if (v31)
  {
    v32 = *(_QWORD *)(v31 + 72);
    swift_retain();
    swift_release();
    if (v32)
      goto LABEL_35;
  }
  else
  {
    swift_release();
  }
  v33 = swift_retain();
  v34 = specialized closure #1 in PropertyList.subscript.getter(v33);
  swift_release();
  if ((v34 & 1) == 0)
  {
    v21 = (double *)&unk_254266000;
    if (!a2)
      goto LABEL_60;
    swift_retain();
    v32 = a2;
    goto LABEL_35;
  }
  v21 = (double *)&unk_254266000;
  if (one-time initialization token for velocityTracking != -1)
    goto LABEL_89;
  while (1)
  {
    v32 = static Animation.velocityTracking;
    swift_retain();
LABEL_35:
    v35 = v7;
    v36 = v8 - v4;
    v6 = v10 - v6;
    v4 = v91 - v9;
    v9 = v35;
    v5 = v35 - v5;
    v18 = *(double *)AGGraphGetValue();
    v37 = *(_QWORD *)(a4 + 32);
    v90 = v32;
    if (!v37)
    {
      type metadata accessor for CombinedAnimationState<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>>.Entry(0, &lazy cache variable for type metadata for AnimatorState<AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>, type metadata accessor for AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>, lazy protocol witness table accessor for type AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>> and conformance AnimatablePair<A, B>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatorState);
      swift_allocObject();
      swift_retain();
      v48 = swift_retain();
      i = specialized AnimatorState.init(animation:interval:at:in:)(v48, v36, v6, v4, v5, v18);
      swift_retain();
      v49 = static os_signpost_type_t.begin.getter();
      static os_signpost_type_t.event.getter();
      if ((kdebug_is_enabled() & 1) != 0)
      {
        v89 = v49;
        if (one-time initialization token for _signpostLog != -1)
          swift_once();
        v50 = (void *)_signpostLog;
        v7 = v9;
        if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
        {
          swift_retain();
          v51 = v50;
          OSSignpostID.init(log:object:)();
          type metadata accessor for _ContiguousArrayStorage<CVarArg>();
          v52 = swift_allocObject();
          *(_OWORD *)(v52 + 16) = xmmword_235283260;
          CurrentAttribute = AGGraphGetCurrentAttribute();
          v88 = *MEMORY[0x24BE096C0];
          if (CurrentAttribute == v88)
            goto LABEL_92;
          v54 = (id)AGGraphGetAttributeGraph();
          Counter = AGGraphGetCounter();

          v55 = MEMORY[0x24BEE1ED8];
          *(_QWORD *)(v52 + 56) = MEMORY[0x24BEE1E88];
          *(_QWORD *)(v52 + 64) = v55;
          *(_QWORD *)(v52 + 32) = Counter;
          v56 = AGGraphGetCurrentAttribute();
          if (v56 == v88)
            goto LABEL_93;
          v57 = MEMORY[0x24BEE4558];
          *(_QWORD *)(v52 + 96) = MEMORY[0x24BEE44F0];
          *(_QWORD *)(v52 + 104) = v57;
          *(_DWORD *)(v52 + 72) = v56;
          *(_QWORD *)(v52 + 136) = MEMORY[0x24BEE0D00];
          *(_QWORD *)(v52 + 144) = lazy protocol witness table accessor for type String and conformance String();
          *(_QWORD *)(v52 + 112) = 0x656956726F6C6F43;
          *(_QWORD *)(v52 + 120) = 0xE900000000000077;
          os_signpost(_:dso:log:name:signpostID:_:_:)();
          swift_release();
          (*(void (**)(char *, uint64_t))(v92.i64[0] + 8))(v17, v14);
          swift_bridgeObjectRelease();
          v21 = (double *)&unk_254266000;
        }
        else
        {
          swift_release();
        }
        goto LABEL_58;
      }
      goto LABEL_53;
    }
    swift_retain();
    LOBYTE(v96[0]) = 0;
    specialized AnimatorState.combine(newAnimation:newInterval:at:in:environment:)(v32, v36, v6, v4, v5, v18);
    swift_retain_n();
    v38 = static os_signpost_type_t.event.getter();
    static os_signpost_type_t.event.getter();
    if ((kdebug_is_enabled() & 1) != 0)
    {
      v89 = v38;
      if (one-time initialization token for _signpostLog != -1)
        swift_once();
      v39 = (void *)_signpostLog;
      v7 = v9;
      if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
      {
        swift_retain();
        v40 = v39;
        OSSignpostID.init(log:object:)();
        type metadata accessor for _ContiguousArrayStorage<CVarArg>();
        v41 = swift_allocObject();
        *(_OWORD *)(v41 + 16) = xmmword_235283260;
        v42 = AGGraphGetCurrentAttribute();
        v88 = *MEMORY[0x24BE096C0];
        if (v42 == v88)
        {
          __break(1u);
LABEL_91:
          __break(1u);
LABEL_92:
          __break(1u);
LABEL_93:
          __break(1u);
          return;
        }
        v43 = (id)AGGraphGetAttributeGraph();
        Counter = AGGraphGetCounter();

        v44 = MEMORY[0x24BEE1ED8];
        *(_QWORD *)(v41 + 56) = MEMORY[0x24BEE1E88];
        *(_QWORD *)(v41 + 64) = v44;
        *(_QWORD *)(v41 + 32) = Counter;
        v45 = AGGraphGetCurrentAttribute();
        if (v45 == v88)
          goto LABEL_91;
        v46 = MEMORY[0x24BEE4558];
        *(_QWORD *)(v41 + 96) = MEMORY[0x24BEE44F0];
        *(_QWORD *)(v41 + 104) = v46;
        *(_DWORD *)(v41 + 72) = v45;
        *(_QWORD *)(v41 + 136) = MEMORY[0x24BEE0D00];
        *(_QWORD *)(v41 + 144) = lazy protocol witness table accessor for type String and conformance String();
        *(_QWORD *)(v41 + 112) = 0x656956726F6C6F43;
        *(_QWORD *)(v41 + 120) = 0xE900000000000077;
        os_signpost(_:dso:log:name:signpostID:_:_:)();
        swift_release_n();
        (*(void (**)(char *, uint64_t))(v92.i64[0] + 8))(v17, v14);
        swift_bridgeObjectRelease();
        v21 = (double *)&unk_254266000;
        for (i = *(_QWORD *)(a4 + 32); !i; *(_QWORD *)(a4 + 32) = i)
        {
LABEL_52:
          __break(1u);
LABEL_53:
          swift_release();
          v7 = v9;
LABEL_58:
          swift_release();
        }
      }
      else
      {
        swift_release_n();
        i = *(_QWORD *)(a4 + 32);
        if (!i)
          goto LABEL_52;
      }
    }
    else
    {
      swift_release_n();
      v7 = v9;
      i = *(_QWORD *)(a4 + 32);
      if (!i)
        goto LABEL_52;
    }
    swift_retain();
    specialized AnimatorState.addListeners(transaction:)();
    swift_release();
    swift_release();
LABEL_60:
    swift_release();
    v15 = v92.i64[0];
    v26 = v91;
LABEL_61:
    v22 = v21;
    *(_QWORD *)(a4 + 12) = LODWORD(v8) | ((unint64_t)LODWORD(v10) << 32);
    *(_QWORD *)(a4 + 20) = LODWORD(v26) | ((unint64_t)LODWORD(v7) << 32);
    *(_BYTE *)(a4 + 28) = 0;
    v21 = *(double **)(a4 + 32);
    if (!v21)
      return;
LABEL_62:
    v92 = *(int8x16_t *)a1;
    v58 = *((_QWORD *)v22 + 183);
    swift_retain();
    if (v58 != -1)
      swift_once();
    swift_beginAccess();
    if ((static Color.Resolved.legacyInterpolation & 1) != 0)
    {
      v60 = (float32x4_t)v92;
    }
    else
    {
      v97[0].i8[0] = 2;
      ResolvedGradient.ColorSpace.convertIn(_:)(v95.f32, v92, *(float *)&v92.i32[1], v92.u32[2], *(float *)&v92.i32[3], v59);
      v60 = v95;
    }
    v61.i64[0] = 0x4300000043000000;
    v61.i64[1] = 0x4300000043000000;
    v97[0] = vmulq_f32(v60, v61);
    v95.i8[0] = 0;
    if ((specialized AnimatorState.update(_:at:environment:)(v97, v18) & 1) == 0)
      break;
    swift_retain_n();
    static os_signpost_type_t.end.getter();
    static os_signpost_type_t.event.getter();
    if ((kdebug_is_enabled() & 1) == 0)
      goto LABEL_79;
    if (one-time initialization token for _signpostLog != -1)
      swift_once();
    v62 = (void *)_signpostLog;
    if ((OS_os_log.signpostsEnabled.getter() & 1) == 0)
    {
LABEL_79:
      swift_release_n();
      if (!*(_QWORD *)(a4 + 32))
      {
LABEL_81:
        *(_QWORD *)(a4 + 32) = 0;
        goto LABEL_82;
      }
LABEL_80:
      specialized AnimatorState.removeListeners()();
      swift_release();
      goto LABEL_81;
    }
    v92.i64[0] = v15;
    swift_retain();
    v63 = v62;
    OSSignpostID.init(log:object:)();
    type metadata accessor for _ContiguousArrayStorage<CVarArg>();
    v64 = swift_allocObject();
    *(_OWORD *)(v64 + 16) = xmmword_235283260;
    v65 = AGGraphGetCurrentAttribute();
    v66 = *MEMORY[0x24BE096C0];
    if (v65 == *MEMORY[0x24BE096C0])
    {
      __break(1u);
    }
    else
    {
      v67 = (id)AGGraphGetAttributeGraph();
      v68 = AGGraphGetCounter();

      v69 = MEMORY[0x24BEE1ED8];
      *(_QWORD *)(v64 + 56) = MEMORY[0x24BEE1E88];
      *(_QWORD *)(v64 + 64) = v69;
      *(_QWORD *)(v64 + 32) = v68;
      v70 = AGGraphGetCurrentAttribute();
      if (v70 != v66)
      {
        v71 = MEMORY[0x24BEE4558];
        *(_QWORD *)(v64 + 96) = MEMORY[0x24BEE44F0];
        *(_QWORD *)(v64 + 104) = v71;
        *(_DWORD *)(v64 + 72) = v70;
        *(_QWORD *)(v64 + 136) = MEMORY[0x24BEE0D00];
        *(_QWORD *)(v64 + 144) = lazy protocol witness table accessor for type String and conformance String();
        *(_QWORD *)(v64 + 112) = 0x656956726F6C6F43;
        *(_QWORD *)(v64 + 120) = 0xE900000000000077;
        os_signpost(_:dso:log:name:signpostID:_:_:)();
        swift_release_n();
        (*(void (**)(char *, uint64_t))(v92.i64[0] + 8))(v17, v14);
        swift_bridgeObjectRelease();
        if (!*(_QWORD *)(a4 + 32))
          goto LABEL_81;
        goto LABEL_80;
      }
    }
    __break(1u);
LABEL_89:
    swift_once();
  }
  if (one-time initialization token for shared != -1)
    swift_once();
  swift_beginAccess();
  v72 = v21[7];
  v93.i64[0] = (uint64_t)v21[8];
  v73 = *((unsigned int *)v21 + 22);
  v74 = *((_BYTE *)v21 + 92);
  v75 = *(void (**)(float32x4_t *, unint64_t, double))((*MEMORY[0x24BEE4EA0] & *(_QWORD *)static CoreGlue.shared)
                                                                       + 0x58);
  v76 = static CoreGlue.shared;
  v94 = v74;
  v75(&v93, v73 | ((unint64_t)v74 << 32), v72);

LABEL_82:
  v77.i64[0] = 0x3C0000003C000000;
  v77.i64[1] = 0x3C0000003C000000;
  v78 = vmulq_f32(v97[0], v77);
  if (static Color.Resolved.legacyInterpolation == 1)
  {
    v92 = (int8x16_t)v78;
    swift_release();
    v80 = v92.i32[1];
    v79 = v92.i32[0];
    v82 = v92.i32[3];
    v81 = v92.i32[2];
  }
  else
  {
    v94 = 2;
    v93 = v78;
    *(float *)&v83 = ResolvedGradient.ColorSpace.convertOut(_:)(v93.f32);
    v92.i64[0] = v83;
    v80 = v84;
    v81 = v85;
    v82 = v86;
    swift_release();
    v79 = v92.i32[0];
  }
  *(_DWORD *)a1 = v79;
  *(_DWORD *)(a1 + 4) = v80;
  *(_DWORD *)(a1 + 8) = v81;
  *(_DWORD *)(a1 + 12) = v82;
  *(_BYTE *)(a1 + 16) = 1;
}

{
  double v4;
  double v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  double v13;
  double *Value;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  int v22;
  void *v23;
  id v24;
  uint64_t v25;
  int v26;
  id v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  void *v31;
  id v32;
  uint64_t v33;
  int CurrentAttribute;
  id v35;
  uint64_t Counter;
  uint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  double v41;
  uint64_t v42;
  unsigned __int8 v43;
  void (*v44)(uint64_t *, unint64_t, double);
  void *v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  void *v49;
  id v50;
  uint64_t v51;
  int v52;
  id v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  int v60;
  uint64_t v61;
  unsigned __int8 v62;
  uint64_t v63;
  char v64;
  double v65;

  v9 = type metadata accessor for OSSignpostID();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v57 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for infinity != -1)
    swift_once();
  v13 = -*(double *)&static Time.infinity;
  if (*(_QWORD *)(a4 + 32))
  {
    Value = (double *)AGGraphGetValue();
    if ((v15 & 1) != 0)
      v13 = *Value;
  }
  if (*(_DWORD *)(a4 + 40) != *(_DWORD *)AGGraphGetValue() >> 1)
  {
    specialized AnimatableAttributeHelper.reset()();
    *(_BYTE *)(a1 + 16) = 1;
LABEL_11:
    v5 = *(double *)a1;
    if ((*(_BYTE *)(a4 + 24) & 1) != 0)
      goto LABEL_34;
    v4 = *(double *)(a4 + 16);
    if (v5 == v4)
      goto LABEL_34;
    AGGraphClearUpdate();
    AGGraphGetValue();
    swift_retain();
    AGGraphSetUpdate();
    v17 = swift_retain();
    v18 = specialized find<A>(_:key:)(v17);
    if (v18)
    {
      v19 = *(_QWORD *)(v18 + 72);
      swift_retain();
      swift_release();
      if (v19)
        goto LABEL_22;
    }
    else
    {
      swift_release();
    }
    v20 = swift_retain();
    v21 = specialized closure #1 in PropertyList.subscript.getter(v20);
    swift_release();
    if ((v21 & 1) == 0)
    {
      if (!a2)
        goto LABEL_33;
      swift_retain();
      v19 = a2;
      goto LABEL_22;
    }
    if (one-time initialization token for velocityTracking != -1)
      goto LABEL_65;
    goto LABEL_19;
  }
  if (*(_BYTE *)(a1 + 16) == 1)
    goto LABEL_11;
  v16 = *(_QWORD *)(a4 + 32);
  if (!v16)
    return;
  while (1)
  {
    v65 = *(double *)a1;
    swift_retain();
    v64 = 0;
    if ((specialized AnimatorState.update(_:at:environment:)(&v65, v13) & 1) == 0)
    {
      if (one-time initialization token for shared != -1)
        swift_once();
      swift_beginAccess();
      v41 = *(double *)(v16 + 48);
      v63 = *(_QWORD *)(v16 + 56);
      v42 = *(unsigned int *)(v16 + 72);
      v43 = *(_BYTE *)(v16 + 76);
      v44 = *(void (**)(uint64_t *, unint64_t, double))((*MEMORY[0x24BEE4EA0] & *(_QWORD *)static CoreGlue.shared)
                                                                       + 0x58);
      v45 = static CoreGlue.shared;
      v62 = v43;
      v44(&v63, v42 | ((unint64_t)v43 << 32), v41);
      swift_release();

      goto LABEL_50;
    }
    swift_retain_n();
    static os_signpost_type_t.end.getter();
    static os_signpost_type_t.event.getter();
    if ((kdebug_is_enabled() & 1) == 0)
      goto LABEL_47;
    if (one-time initialization token for _signpostLog != -1)
      swift_once();
    v31 = (void *)_signpostLog;
    if ((OS_os_log.signpostsEnabled.getter() & 1) == 0)
    {
LABEL_47:
      v40 = swift_release_n();
      if (*(_QWORD *)(a4 + 32))
      {
LABEL_48:
        specialized AnimatorState.removeListeners()(v40);
        swift_release();
      }
LABEL_49:
      swift_release();
      *(_QWORD *)(a4 + 32) = 0;
LABEL_50:
      *(double *)a1 = v65;
      *(_BYTE *)(a1 + 16) = 1;
      return;
    }
    v61 = v10;
    swift_retain();
    v32 = v31;
    OSSignpostID.init(log:object:)();
    type metadata accessor for _ContiguousArrayStorage<CVarArg>();
    v33 = swift_allocObject();
    *(_OWORD *)(v33 + 16) = xmmword_235283260;
    CurrentAttribute = AGGraphGetCurrentAttribute();
    v10 = *MEMORY[0x24BE096C0];
    if (CurrentAttribute == (_DWORD)v10)
    {
      __break(1u);
    }
    else
    {
      v35 = (id)AGGraphGetAttributeGraph();
      Counter = AGGraphGetCounter();

      v37 = MEMORY[0x24BEE1ED8];
      *(_QWORD *)(v33 + 56) = MEMORY[0x24BEE1E88];
      *(_QWORD *)(v33 + 64) = v37;
      *(_QWORD *)(v33 + 32) = Counter;
      v38 = AGGraphGetCurrentAttribute();
      if (v38 != (_DWORD)v10)
      {
        v39 = MEMORY[0x24BEE4558];
        *(_QWORD *)(v33 + 96) = MEMORY[0x24BEE44F0];
        *(_QWORD *)(v33 + 104) = v39;
        *(_DWORD *)(v33 + 72) = v38;
        *(_QWORD *)(v33 + 136) = MEMORY[0x24BEE0D00];
        *(_QWORD *)(v33 + 144) = lazy protocol witness table accessor for type String and conformance String();
        *(_QWORD *)(v33 + 112) = 0xD000000000000034;
        *(_QWORD *)(v33 + 120) = 0x80000002352E2FD0;
        os_signpost(_:dso:log:name:signpostID:_:_:)();
        swift_release_n();
        (*(void (**)(char *, uint64_t))(v61 + 8))(v12, v9);
        v40 = swift_bridgeObjectRelease();
        if (*(_QWORD *)(a4 + 32))
          goto LABEL_48;
        goto LABEL_49;
      }
    }
    __break(1u);
LABEL_65:
    swift_once();
LABEL_19:
    v19 = static Animation.velocityTracking;
    swift_retain();
LABEL_22:
    v4 = v5 - v4;
    v13 = *(double *)AGGraphGetValue();
    if (*(_QWORD *)(a4 + 32))
      break;
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for AnimatorState<Double>, MEMORY[0x24BEE13C8], (uint64_t)&protocol witness table for Double, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for AnimatorState);
    swift_allocObject();
    swift_retain();
    v46 = swift_retain();
    v47 = specialized AnimatorState.init(animation:interval:at:in:)(v46, v4, v13);
    swift_retain();
    v48 = static os_signpost_type_t.begin.getter();
    static os_signpost_type_t.event.getter();
    if ((kdebug_is_enabled() & 1) == 0)
      goto LABEL_59;
    v60 = v48;
    if (one-time initialization token for _signpostLog != -1)
      swift_once();
    v49 = (void *)_signpostLog;
    if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
    {
      v61 = v19;
      swift_retain();
      v50 = v49;
      OSSignpostID.init(log:object:)();
      type metadata accessor for _ContiguousArrayStorage<CVarArg>();
      v51 = swift_allocObject();
      *(_OWORD *)(v51 + 16) = xmmword_235283260;
      v52 = AGGraphGetCurrentAttribute();
      v59 = *MEMORY[0x24BE096C0];
      if (v52 == v59)
        goto LABEL_68;
      v53 = (id)AGGraphGetAttributeGraph();
      v58 = AGGraphGetCounter();

      v54 = MEMORY[0x24BEE1ED8];
      *(_QWORD *)(v51 + 56) = MEMORY[0x24BEE1E88];
      *(_QWORD *)(v51 + 64) = v54;
      *(_QWORD *)(v51 + 32) = v58;
      v55 = AGGraphGetCurrentAttribute();
      if (v55 == v59)
        goto LABEL_69;
      v56 = MEMORY[0x24BEE4558];
      *(_QWORD *)(v51 + 96) = MEMORY[0x24BEE44F0];
      *(_QWORD *)(v51 + 104) = v56;
      *(_DWORD *)(v51 + 72) = v55;
      *(_QWORD *)(v51 + 136) = MEMORY[0x24BEE0D00];
      *(_QWORD *)(v51 + 144) = lazy protocol witness table accessor for type String and conformance String();
      *(_QWORD *)(v51 + 112) = 0xD000000000000034;
      *(_QWORD *)(v51 + 120) = 0x80000002352E2FD0;
      os_signpost(_:dso:log:name:signpostID:_:_:)();
      swift_release();
      (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
      swift_bridgeObjectRelease();
    }
    else
    {
LABEL_59:
      swift_release();
    }
    swift_release();
    *(_QWORD *)(a4 + 32) = v47;
    if (v47)
    {
LABEL_32:
      swift_retain();
      specialized AnimatorState.addListeners(transaction:)();
      swift_release();
      swift_release();
      goto LABEL_33;
    }
LABEL_61:
    __break(1u);
LABEL_33:
    swift_release();
LABEL_34:
    *(double *)(a4 + 16) = v5;
    *(_BYTE *)(a4 + 24) = 0;
    v16 = *(_QWORD *)(a4 + 32);
    if (!v16)
      return;
  }
  swift_retain();
  v64 = 0;
  specialized AnimatorState.combine(newAnimation:newInterval:at:in:environment:)(v19, v4, v13);
  swift_retain_n();
  v22 = static os_signpost_type_t.event.getter();
  static os_signpost_type_t.event.getter();
  if ((kdebug_is_enabled() & 1) == 0)
    goto LABEL_30;
  v60 = v22;
  if (one-time initialization token for _signpostLog != -1)
    swift_once();
  v23 = (void *)_signpostLog;
  if ((OS_os_log.signpostsEnabled.getter() & 1) == 0)
  {
LABEL_30:
    swift_release_n();
    goto LABEL_31;
  }
  v61 = v19;
  swift_retain();
  v24 = v23;
  OSSignpostID.init(log:object:)();
  type metadata accessor for _ContiguousArrayStorage<CVarArg>();
  v25 = swift_allocObject();
  *(_OWORD *)(v25 + 16) = xmmword_235283260;
  v26 = AGGraphGetCurrentAttribute();
  v59 = *MEMORY[0x24BE096C0];
  if (v26 != v59)
  {
    v27 = (id)AGGraphGetAttributeGraph();
    v58 = AGGraphGetCounter();

    v28 = MEMORY[0x24BEE1ED8];
    *(_QWORD *)(v25 + 56) = MEMORY[0x24BEE1E88];
    *(_QWORD *)(v25 + 64) = v28;
    *(_QWORD *)(v25 + 32) = v58;
    v29 = AGGraphGetCurrentAttribute();
    if (v29 == v59)
      goto LABEL_67;
    v30 = MEMORY[0x24BEE4558];
    *(_QWORD *)(v25 + 96) = MEMORY[0x24BEE44F0];
    *(_QWORD *)(v25 + 104) = v30;
    *(_DWORD *)(v25 + 72) = v29;
    *(_QWORD *)(v25 + 136) = MEMORY[0x24BEE0D00];
    *(_QWORD *)(v25 + 144) = lazy protocol witness table accessor for type String and conformance String();
    *(_QWORD *)(v25 + 112) = 0xD000000000000034;
    *(_QWORD *)(v25 + 120) = 0x80000002352E2FD0;
    os_signpost(_:dso:log:name:signpostID:_:_:)();
    swift_release_n();
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
    swift_bridgeObjectRelease();
LABEL_31:
    if (*(_QWORD *)(a4 + 32))
      goto LABEL_32;
    goto LABEL_61;
  }
  __break(1u);
LABEL_67:
  __break(1u);
LABEL_68:
  __break(1u);
LABEL_69:
  __break(1u);
}

{
  specialized AnimatableAttributeHelper.update(value:defaultAnimation:environment:sampleCollector:)(a1, a2, a3, a4, (void (*)(void))specialized AnimatableAttributeHelper.reset(), 0xD000000000000015, 0x80000002352E5E90);
}

{
  id v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  double v12;
  double *Value;
  char v14;
  _DWORD *v15;
  uint64_t v16;
  id v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  int v26;
  void *v27;
  id v28;
  int v29;
  id v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  id v34;
  id v35;
  void *v36;
  id v37;
  int CurrentAttribute;
  uint64_t Counter;
  uint64_t v40;
  int v41;
  uint64_t v42;
  double v43;
  uint64_t v44;
  unsigned __int8 v45;
  void (*v46)(uint64_t *, unint64_t, double);
  void *v47;
  uint64_t v48;
  id v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  void *v54;
  id v55;
  int v56;
  id v57;
  uint64_t v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  unsigned __int8 v66;
  uint64_t v67;
  uint64_t v68[3];
  uint64_t v69;

  v8 = type metadata accessor for OSSignpostID();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v61 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for infinity != -1)
    swift_once();
  v12 = -*(double *)&static Time.infinity;
  if (*(_QWORD *)(a4 + 24))
  {
    Value = (double *)AGGraphGetValue();
    if ((v14 & 1) != 0)
      v12 = *Value;
  }
  v15 = (_DWORD *)AGGraphGetValue();
  if (*(_DWORD *)(a4 + 32) != *v15 >> 1)
  {
    specialized AnimatableAttributeHelper.reset()(v15);
    *(_BYTE *)(a1 + 28) = 1;
LABEL_11:
    v17 = *(id *)a1;
    v18 = *(id *)a1;
    ShaderVectorData.init(rbShader:)(v17, v68);
    v4 = *(id *)(a4 + 16);
    v19 = v68[0];
    if (!v4)
      goto LABEL_34;
    v69 = *(_QWORD *)(a4 + 16);
    if ((specialized static Array<A>.== infix(_:_:)(v68[0], (uint64_t)v4) & 1) != 0)
      goto LABEL_34;
    v65 = v9;
    swift_bridgeObjectRetain();
    AGGraphClearUpdate();
    AGGraphGetValue();
    swift_retain();
    AGGraphSetUpdate();
    v20 = swift_retain();
    v21 = specialized find<A>(_:key:)(v20);
    if (v21)
    {
      v22 = *(_QWORD *)(v21 + 72);
      swift_retain();
      swift_release();
      if (v22)
        goto LABEL_22;
    }
    else
    {
      swift_release();
    }
    v23 = swift_retain();
    v24 = specialized closure #1 in PropertyList.subscript.getter(v23);
    swift_release();
    if ((v24 & 1) == 0)
    {
      if (!a2)
        goto LABEL_62;
      swift_retain();
      v22 = a2;
      goto LABEL_22;
    }
    if (one-time initialization token for velocityTracking != -1)
      goto LABEL_65;
    goto LABEL_19;
  }
  if (*(_BYTE *)(a1 + 28) == 1)
    goto LABEL_11;
  v16 = *(_QWORD *)(a4 + 24);
  if (!v16)
    return;
  while (1)
  {
    v34 = *(id *)a1;
    v35 = *(id *)a1;
    swift_retain();
    ShaderVectorData.init(rbShader:)(v34, &v69);
    LOBYTE(v68[0]) = 0;
    if ((specialized AnimatorState.update(_:at:environment:)((uint64_t)&v69, v12) & 1) == 0)
    {
      if (one-time initialization token for shared != -1)
        swift_once();
      swift_beginAccess();
      v43 = *(double *)(v16 + 48);
      v67 = *(_QWORD *)(v16 + 56);
      v44 = *(unsigned int *)(v16 + 72);
      v45 = *(_BYTE *)(v16 + 76);
      v46 = *(void (**)(uint64_t *, unint64_t, double))((*MEMORY[0x24BEE4EA0] & *(_QWORD *)static CoreGlue.shared)
                                                                       + 0x58);
      v47 = static CoreGlue.shared;
      v66 = v45;
      v46(&v67, v44 | ((unint64_t)v45 << 32), v43);

      goto LABEL_50;
    }
    v65 = v9;
    swift_bridgeObjectRetain();
    swift_retain_n();
    static os_signpost_type_t.end.getter();
    static os_signpost_type_t.event.getter();
    if ((kdebug_is_enabled() & 1) == 0)
      goto LABEL_46;
    if (one-time initialization token for _signpostLog != -1)
      swift_once();
    v36 = (void *)_signpostLog;
    if ((OS_os_log.signpostsEnabled.getter() & 1) == 0)
    {
LABEL_46:
      swift_release_n();
LABEL_47:
      v48 = swift_bridgeObjectRelease();
      if (*(_QWORD *)(a4 + 24))
      {
        specialized AnimatorState.removeListeners()(v48);
        swift_release();
      }
      *(_QWORD *)(a4 + 24) = 0;
LABEL_50:
      v67 = v69;
      v49 = *(id *)a1;
      swift_bridgeObjectRetain();
      v50 = ShaderVectorData.updating(rbShader:)(v49);
      swift_release();
      swift_bridgeObjectRelease_n();

      *(_QWORD *)a1 = v50;
      *(_BYTE *)(a1 + 28) = 1;
      return;
    }
    v64 = v8;
    swift_retain();
    v37 = v36;
    OSSignpostID.init(log:object:)();
    type metadata accessor for _ContiguousArrayStorage<CVarArg>();
    v19 = swift_allocObject();
    *(_OWORD *)(v19 + 16) = xmmword_235283260;
    CurrentAttribute = AGGraphGetCurrentAttribute();
    v8 = *MEMORY[0x24BE096C0];
    if (CurrentAttribute == (_DWORD)v8)
    {
      __break(1u);
    }
    else
    {
      v4 = (id)AGGraphGetAttributeGraph();
      Counter = AGGraphGetCounter();

      v40 = MEMORY[0x24BEE1ED8];
      *(_QWORD *)(v19 + 56) = MEMORY[0x24BEE1E88];
      *(_QWORD *)(v19 + 64) = v40;
      *(_QWORD *)(v19 + 32) = Counter;
      v41 = AGGraphGetCurrentAttribute();
      if (v41 != (_DWORD)v8)
      {
        v42 = MEMORY[0x24BEE4558];
        *(_QWORD *)(v19 + 96) = MEMORY[0x24BEE44F0];
        *(_QWORD *)(v19 + 104) = v42;
        *(_DWORD *)(v19 + 72) = v41;
        *(_QWORD *)(v19 + 136) = MEMORY[0x24BEE0D00];
        *(_QWORD *)(v19 + 144) = lazy protocol witness table accessor for type String and conformance String();
        strcpy((char *)(v19 + 112), "ResolvedShader");
        *(_BYTE *)(v19 + 127) = -18;
        os_signpost(_:dso:log:name:signpostID:_:_:)();
        swift_release_n();
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v65 + 8))(v11, v64);
        goto LABEL_47;
      }
    }
    __break(1u);
LABEL_65:
    swift_once();
LABEL_19:
    v22 = static Animation.velocityTracking;
    swift_retain();
LABEL_22:
    v67 = v19;
    swift_bridgeObjectRetain();
    specialized static ShaderVectorData.-= infix(_:_:)((uint64_t)&v67, &v69);
    v12 = *(double *)AGGraphGetValue();
    if (*(_QWORD *)(a4 + 24))
      break;
    v51 = v67;
    type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for AnimatorState<ShaderVectorData>, (uint64_t (*)(void))lazy protocol witness table accessor for type ShaderVectorData and conformance ShaderVectorData, (uint64_t)&type metadata for ShaderVectorData, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatorState);
    swift_allocObject();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    v52 = specialized AnimatorState.init(animation:interval:at:in:)(v22, v51, v12);
    swift_bridgeObjectRetain();
    swift_retain();
    v53 = static os_signpost_type_t.begin.getter();
    static os_signpost_type_t.event.getter();
    if ((kdebug_is_enabled() & 1) == 0)
      goto LABEL_59;
    v63 = v53;
    if (one-time initialization token for _signpostLog != -1)
      swift_once();
    v54 = (void *)_signpostLog;
    if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
    {
      v64 = v22;
      swift_retain();
      v55 = v54;
      OSSignpostID.init(log:object:)();
      type metadata accessor for _ContiguousArrayStorage<CVarArg>();
      v19 = swift_allocObject();
      *(_OWORD *)(v19 + 16) = xmmword_235283260;
      v56 = AGGraphGetCurrentAttribute();
      v62 = *MEMORY[0x24BE096C0];
      if (v56 == v62)
        goto LABEL_68;
      v57 = (id)AGGraphGetAttributeGraph();
      v61 = AGGraphGetCounter();

      v58 = MEMORY[0x24BEE1ED8];
      *(_QWORD *)(v19 + 56) = MEMORY[0x24BEE1E88];
      *(_QWORD *)(v19 + 64) = v58;
      *(_QWORD *)(v19 + 32) = v61;
      v59 = AGGraphGetCurrentAttribute();
      if (v59 == v62)
        goto LABEL_69;
      v60 = MEMORY[0x24BEE4558];
      *(_QWORD *)(v19 + 96) = MEMORY[0x24BEE44F0];
      *(_QWORD *)(v19 + 104) = v60;
      *(_DWORD *)(v19 + 72) = v59;
      *(_QWORD *)(v19 + 136) = MEMORY[0x24BEE0D00];
      *(_QWORD *)(v19 + 144) = lazy protocol witness table accessor for type String and conformance String();
      strcpy((char *)(v19 + 112), "ResolvedShader");
      *(_BYTE *)(v19 + 127) = -18;
      os_signpost(_:dso:log:name:signpostID:_:_:)();
      swift_release();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v65 + 8))(v11, v8);
    }
    else
    {
LABEL_59:
      swift_release();
      v19 = (uint64_t)v4;
    }
    swift_bridgeObjectRelease();
    swift_release();
    *(_QWORD *)(a4 + 24) = v52;
    if (v52)
    {
LABEL_32:
      swift_retain();
      specialized AnimatorState.addListeners(transaction:)();
      swift_release();
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v19 = v68[0];
      goto LABEL_33;
    }
LABEL_61:
    __break(1u);
LABEL_62:
    swift_release();
    swift_bridgeObjectRelease();
LABEL_33:
    v9 = v65;
LABEL_34:
    swift_bridgeObjectRelease();
    *(_QWORD *)(a4 + 16) = v19;
    v16 = *(_QWORD *)(a4 + 24);
    if (!v16)
      return;
  }
  v25 = v67;
  swift_retain();
  v66 = 0;
  specialized AnimatorState.combine(newAnimation:newInterval:at:in:environment:)(v22, v25, v12);
  swift_retain_n();
  swift_bridgeObjectRetain();
  v26 = static os_signpost_type_t.event.getter();
  static os_signpost_type_t.event.getter();
  if ((kdebug_is_enabled() & 1) == 0)
    goto LABEL_30;
  v63 = v26;
  if (one-time initialization token for _signpostLog != -1)
    swift_once();
  v27 = (void *)_signpostLog;
  if ((OS_os_log.signpostsEnabled.getter() & 1) == 0)
  {
LABEL_30:
    swift_release_n();
    v19 = (uint64_t)v4;
    goto LABEL_31;
  }
  v64 = v22;
  swift_retain();
  v28 = v27;
  OSSignpostID.init(log:object:)();
  type metadata accessor for _ContiguousArrayStorage<CVarArg>();
  v19 = swift_allocObject();
  *(_OWORD *)(v19 + 16) = xmmword_235283260;
  v29 = AGGraphGetCurrentAttribute();
  v62 = *MEMORY[0x24BE096C0];
  if (v29 != v62)
  {
    v30 = (id)AGGraphGetAttributeGraph();
    v61 = AGGraphGetCounter();

    v31 = MEMORY[0x24BEE1ED8];
    *(_QWORD *)(v19 + 56) = MEMORY[0x24BEE1E88];
    *(_QWORD *)(v19 + 64) = v31;
    *(_QWORD *)(v19 + 32) = v61;
    v32 = AGGraphGetCurrentAttribute();
    if (v32 == v62)
      goto LABEL_67;
    v33 = MEMORY[0x24BEE4558];
    *(_QWORD *)(v19 + 96) = MEMORY[0x24BEE44F0];
    *(_QWORD *)(v19 + 104) = v33;
    *(_DWORD *)(v19 + 72) = v32;
    *(_QWORD *)(v19 + 136) = MEMORY[0x24BEE0D00];
    *(_QWORD *)(v19 + 144) = lazy protocol witness table accessor for type String and conformance String();
    strcpy((char *)(v19 + 112), "ResolvedShader");
    *(_BYTE *)(v19 + 127) = -18;
    os_signpost(_:dso:log:name:signpostID:_:_:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v65 + 8))(v11, v8);
LABEL_31:
    swift_bridgeObjectRelease();
    if (*(_QWORD *)(a4 + 24))
      goto LABEL_32;
    goto LABEL_61;
  }
  __break(1u);
LABEL_67:
  __break(1u);
LABEL_68:
  __break(1u);
LABEL_69:
  __break(1u);
}

{
  specialized AnimatableAttributeHelper.update(value:defaultAnimation:environment:sampleCollector:)(a1, a2, a3, a4, (void (*)(void))specialized AnimatableAttributeHelper.reset(), 0x7974696361704F5FLL, 0xEE00746365666645);
}

{
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  double v16;
  double *Value;
  char v18;
  uint64_t v19;
  float64x2_t v20;
  BOOL v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  int v28;
  void *v29;
  id v30;
  uint64_t v31;
  int v32;
  id v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  double v37;
  void *v38;
  id v39;
  uint64_t v40;
  int CurrentAttribute;
  id v42;
  uint64_t Counter;
  uint64_t v44;
  int v45;
  uint64_t v46;
  double v47;
  uint64_t v48;
  unsigned __int8 v49;
  void (*v50)(uint64_t *, unint64_t, double);
  void *v51;
  double v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  void *v56;
  id v57;
  uint64_t v58;
  int v59;
  id v60;
  uint64_t v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  int v67;
  uint64_t v68;
  float64x2_t v69;
  unsigned __int8 v70;
  uint64_t v71;
  char v72;
  float64x2_t v73;
  double v74;

  v12 = type metadata accessor for OSSignpostID();
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v15 = (char *)&v64 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for infinity != -1)
    swift_once();
  v16 = -*(double *)&static Time.infinity;
  if (*(_QWORD *)(a4 + 48))
  {
    Value = (double *)AGGraphGetValue();
    if ((v18 & 1) != 0)
      v16 = *Value;
  }
  if (*(_DWORD *)(a4 + 56) != *(_DWORD *)AGGraphGetValue() >> 1)
  {
    specialized AnimatableAttributeHelper.reset()();
    *(_BYTE *)(a1 + 24) = 1;
LABEL_11:
    v20 = vmulq_f64(*(float64x2_t *)a1, (float64x2_t)vdupq_n_s64(0x4060000000000000uLL));
    v7 = *(double *)(a1 + 16) * 128.0;
    if ((*(_BYTE *)(a4 + 40) & 1) != 0)
      goto LABEL_40;
    v5 = *(double *)(a4 + 24);
    v4 = *(double *)(a4 + 32);
    v6 = *(double *)(a4 + 16);
    v8 = v20.f64[1];
    v21 = v20.f64[0] == v6 && v20.f64[1] == v5;
    if (v21 && v7 == v4)
      goto LABEL_40;
    v69 = v20;
    AGGraphClearUpdate();
    AGGraphGetValue();
    swift_retain();
    AGGraphSetUpdate();
    v23 = swift_retain();
    v24 = specialized find<A>(_:key:)(v23);
    if (v24)
    {
      v25 = *(_QWORD *)(v24 + 72);
      swift_retain();
      swift_release();
      if (v25)
        goto LABEL_28;
    }
    else
    {
      swift_release();
    }
    v26 = swift_retain();
    v27 = specialized closure #1 in PropertyList.subscript.getter(v26);
    swift_release();
    if ((v27 & 1) == 0)
    {
      if (!a2)
        goto LABEL_39;
      swift_retain();
      v25 = a2;
      goto LABEL_28;
    }
    if (one-time initialization token for velocityTracking != -1)
      goto LABEL_71;
    goto LABEL_25;
  }
  if (*(_BYTE *)(a1 + 24) == 1)
    goto LABEL_11;
  v19 = *(_QWORD *)(a4 + 48);
  if (!v19)
    return;
  while (1)
  {
    v37 = *(double *)(a1 + 16) * 128.0;
    v73 = vmulq_f64(*(float64x2_t *)a1, (float64x2_t)vdupq_n_s64(0x4060000000000000uLL));
    v74 = v37;
    swift_retain();
    v72 = 0;
    if ((specialized AnimatorState.update(_:at:environment:)(&v73, v16) & 1) == 0)
    {
      if (one-time initialization token for shared != -1)
        swift_once();
      swift_beginAccess();
      v47 = *(double *)(v19 + 64);
      v71 = *(_QWORD *)(v19 + 72);
      v48 = *(unsigned int *)(v19 + 104);
      v49 = *(_BYTE *)(v19 + 108);
      v50 = *(void (**)(uint64_t *, unint64_t, double))((*MEMORY[0x24BEE4EA0] & *(_QWORD *)static CoreGlue.shared)
                                                                       + 0x58);
      v51 = static CoreGlue.shared;
      v70 = v49;
      v50(&v71, v48 | ((unint64_t)v49 << 32), v47);
      swift_release();

      goto LABEL_56;
    }
    swift_retain_n();
    static os_signpost_type_t.end.getter();
    static os_signpost_type_t.event.getter();
    if ((kdebug_is_enabled() & 1) == 0)
      goto LABEL_53;
    if (one-time initialization token for _signpostLog != -1)
      swift_once();
    v38 = (void *)_signpostLog;
    if ((OS_os_log.signpostsEnabled.getter() & 1) == 0)
    {
LABEL_53:
      swift_release_n();
      if (*(_QWORD *)(a4 + 48))
      {
LABEL_54:
        specialized AnimatorState.removeListeners()();
        swift_release();
      }
LABEL_55:
      swift_release();
      *(_QWORD *)(a4 + 48) = 0;
LABEL_56:
      v52 = v74 * 0.0078125;
      *(float64x2_t *)a1 = vmulq_f64(v73, (float64x2_t)vdupq_n_s64(0x3F80000000000000uLL));
      *(double *)(a1 + 16) = v52;
      *(_BYTE *)(a1 + 24) = 1;
      return;
    }
    v68 = v13;
    swift_retain();
    v39 = v38;
    OSSignpostID.init(log:object:)();
    type metadata accessor for _ContiguousArrayStorage<CVarArg>();
    v40 = swift_allocObject();
    *(_OWORD *)(v40 + 16) = xmmword_235283260;
    CurrentAttribute = AGGraphGetCurrentAttribute();
    v13 = *MEMORY[0x24BE096C0];
    if (CurrentAttribute == (_DWORD)v13)
    {
      __break(1u);
    }
    else
    {
      v42 = (id)AGGraphGetAttributeGraph();
      Counter = AGGraphGetCounter();

      v44 = MEMORY[0x24BEE1ED8];
      *(_QWORD *)(v40 + 56) = MEMORY[0x24BEE1E88];
      *(_QWORD *)(v40 + 64) = v44;
      *(_QWORD *)(v40 + 32) = Counter;
      v45 = AGGraphGetCurrentAttribute();
      if (v45 != (_DWORD)v13)
      {
        v46 = MEMORY[0x24BEE4558];
        *(_QWORD *)(v40 + 96) = MEMORY[0x24BEE44F0];
        *(_QWORD *)(v40 + 104) = v46;
        *(_DWORD *)(v40 + 72) = v45;
        *(_QWORD *)(v40 + 136) = MEMORY[0x24BEE0D00];
        *(_QWORD *)(v40 + 144) = lazy protocol witness table accessor for type String and conformance String();
        *(_QWORD *)(v40 + 112) = 0x6F697461746F525FLL;
        *(_QWORD *)(v40 + 120) = 0xEF7463656666456ELL;
        os_signpost(_:dso:log:name:signpostID:_:_:)();
        swift_release_n();
        (*(void (**)(char *, uint64_t))(v68 + 8))(v15, v12);
        swift_bridgeObjectRelease();
        if (*(_QWORD *)(a4 + 48))
          goto LABEL_54;
        goto LABEL_55;
      }
    }
    __break(1u);
LABEL_71:
    swift_once();
LABEL_25:
    v25 = static Animation.velocityTracking;
    swift_retain();
LABEL_28:
    v6 = v69.f64[0] - v6;
    v5 = v8 - v5;
    v4 = v7 - v4;
    v16 = *(double *)AGGraphGetValue();
    if (*(_QWORD *)(a4 + 48))
      break;
    type metadata accessor for CombinedAnimationState<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>>.Entry(0, &lazy cache variable for type metadata for AnimatorState<AnimatablePair<Double, AnimatablePair<CGFloat, CGFloat>>>, (uint64_t (*)(uint64_t))type metadata accessor for AnimatablePair<Double, AnimatablePair<CGFloat, CGFloat>>, lazy protocol witness table accessor for type AnimatablePair<Double, AnimatablePair<CGFloat, CGFloat>> and conformance AnimatablePair<A, B>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatorState);
    swift_allocObject();
    swift_retain();
    v53 = swift_retain();
    v54 = specialized AnimatorState.init(animation:interval:at:in:)(v53, v6, v5, v4, v16);
    swift_retain();
    v55 = static os_signpost_type_t.begin.getter();
    static os_signpost_type_t.event.getter();
    if ((kdebug_is_enabled() & 1) == 0)
      goto LABEL_65;
    v67 = v55;
    if (one-time initialization token for _signpostLog != -1)
      swift_once();
    v56 = (void *)_signpostLog;
    if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
    {
      v68 = v13;
      swift_retain();
      v57 = v56;
      OSSignpostID.init(log:object:)();
      type metadata accessor for _ContiguousArrayStorage<CVarArg>();
      v58 = swift_allocObject();
      *(_OWORD *)(v58 + 16) = xmmword_235283260;
      v59 = AGGraphGetCurrentAttribute();
      v66 = *MEMORY[0x24BE096C0];
      if (v59 == v66)
        goto LABEL_74;
      v60 = (id)AGGraphGetAttributeGraph();
      v65 = AGGraphGetCounter();

      v61 = MEMORY[0x24BEE1ED8];
      *(_QWORD *)(v58 + 56) = MEMORY[0x24BEE1E88];
      *(_QWORD *)(v58 + 64) = v61;
      *(_QWORD *)(v58 + 32) = v65;
      v62 = AGGraphGetCurrentAttribute();
      if (v62 == v66)
        goto LABEL_75;
      v63 = MEMORY[0x24BEE4558];
      *(_QWORD *)(v58 + 96) = MEMORY[0x24BEE44F0];
      *(_QWORD *)(v58 + 104) = v63;
      *(_DWORD *)(v58 + 72) = v62;
      *(_QWORD *)(v58 + 136) = MEMORY[0x24BEE0D00];
      *(_QWORD *)(v58 + 144) = lazy protocol witness table accessor for type String and conformance String();
      *(_QWORD *)(v58 + 112) = 0x6F697461746F525FLL;
      *(_QWORD *)(v58 + 120) = 0xEF7463656666456ELL;
      os_signpost(_:dso:log:name:signpostID:_:_:)();
      swift_release();
      v13 = v68;
      (*(void (**)(char *, uint64_t))(v68 + 8))(v15, v12);
      swift_bridgeObjectRelease();
    }
    else
    {
LABEL_65:
      swift_release();
    }
    swift_release();
    *(_QWORD *)(a4 + 48) = v54;
    if (v54)
    {
LABEL_38:
      swift_retain();
      specialized AnimatorState.addListeners(transaction:)();
      swift_release();
      swift_release();
      goto LABEL_39;
    }
LABEL_67:
    __break(1u);
LABEL_39:
    swift_release();
    v20 = v69;
LABEL_40:
    *(float64x2_t *)(a4 + 16) = v20;
    *(double *)(a4 + 32) = v7;
    *(_BYTE *)(a4 + 40) = 0;
    v19 = *(_QWORD *)(a4 + 48);
    if (!v19)
      return;
  }
  swift_retain();
  LOBYTE(v73.f64[0]) = 0;
  specialized AnimatorState.combine(newAnimation:newInterval:at:in:environment:)(v25, v6, v5, v4, v16);
  swift_retain_n();
  v28 = static os_signpost_type_t.event.getter();
  static os_signpost_type_t.event.getter();
  if ((kdebug_is_enabled() & 1) == 0)
    goto LABEL_36;
  v67 = v28;
  if (one-time initialization token for _signpostLog != -1)
    swift_once();
  v29 = (void *)_signpostLog;
  if ((OS_os_log.signpostsEnabled.getter() & 1) == 0)
  {
LABEL_36:
    swift_release_n();
    goto LABEL_37;
  }
  v68 = v13;
  swift_retain();
  v30 = v29;
  OSSignpostID.init(log:object:)();
  type metadata accessor for _ContiguousArrayStorage<CVarArg>();
  v31 = swift_allocObject();
  *(_OWORD *)(v31 + 16) = xmmword_235283260;
  v32 = AGGraphGetCurrentAttribute();
  v66 = *MEMORY[0x24BE096C0];
  if (v32 != v66)
  {
    v33 = (id)AGGraphGetAttributeGraph();
    v65 = AGGraphGetCounter();

    v34 = MEMORY[0x24BEE1ED8];
    *(_QWORD *)(v31 + 56) = MEMORY[0x24BEE1E88];
    *(_QWORD *)(v31 + 64) = v34;
    *(_QWORD *)(v31 + 32) = v65;
    v35 = AGGraphGetCurrentAttribute();
    if (v35 == v66)
      goto LABEL_73;
    v36 = MEMORY[0x24BEE4558];
    *(_QWORD *)(v31 + 96) = MEMORY[0x24BEE44F0];
    *(_QWORD *)(v31 + 104) = v36;
    *(_DWORD *)(v31 + 72) = v35;
    *(_QWORD *)(v31 + 136) = MEMORY[0x24BEE0D00];
    *(_QWORD *)(v31 + 144) = lazy protocol witness table accessor for type String and conformance String();
    *(_QWORD *)(v31 + 112) = 0x6F697461746F525FLL;
    *(_QWORD *)(v31 + 120) = 0xEF7463656666456ELL;
    os_signpost(_:dso:log:name:signpostID:_:_:)();
    swift_release_n();
    v13 = v68;
    (*(void (**)(char *, uint64_t))(v68 + 8))(v15, v12);
    swift_bridgeObjectRelease();
LABEL_37:
    if (*(_QWORD *)(a4 + 48))
      goto LABEL_38;
    goto LABEL_67;
  }
  __break(1u);
LABEL_73:
  __break(1u);
LABEL_74:
  __break(1u);
LABEL_75:
  __break(1u);
}

{
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  double v18;
  double *Value;
  char v20;
  uint64_t v21;
  float64x2_t v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  int v29;
  void *v30;
  id v31;
  uint64_t v32;
  int v33;
  id v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  float64x2_t v38;
  void *v39;
  id v40;
  uint64_t v41;
  int CurrentAttribute;
  id v43;
  uint64_t Counter;
  uint64_t v45;
  int v46;
  uint64_t v47;
  double v48;
  uint64_t v49;
  unsigned __int8 v50;
  void (*v51)(uint64_t *, unint64_t, double);
  void *v52;
  float64x2_t v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  void *v57;
  id v58;
  uint64_t v59;
  int v60;
  id v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  int v68;
  uint64_t v69;
  float64x2_t v70;
  unsigned __int8 v71;
  uint64_t v72;
  char v73;
  float64x2_t v74;
  float64x2_t v75;

  v14 = type metadata accessor for OSSignpostID();
  v15 = *(_QWORD *)(v14 - 8);
  MEMORY[0x24BDAC7A8](v14);
  v17 = (char *)&v65 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for infinity != -1)
    swift_once();
  v18 = -*(double *)&static Time.infinity;
  if (*(_QWORD *)(a4 + 56))
  {
    Value = (double *)AGGraphGetValue();
    if ((v20 & 1) != 0)
      v18 = *Value;
  }
  if (*(_DWORD *)(a4 + 64) != *(_DWORD *)AGGraphGetValue() >> 1)
  {
    specialized AnimatableAttributeHelper.reset()();
    *(_BYTE *)(a1 + 32) = 1;
LABEL_11:
    v8 = *(double *)a1;
    v9 = *(double *)(a1 + 8);
    v22 = vmulq_f64(*(float64x2_t *)(a1 + 16), (float64x2_t)vdupq_n_s64(0x4060000000000000uLL));
    if ((*(_BYTE *)(a4 + 48) & 1) != 0)
      goto LABEL_39;
    v4 = *(double *)(a4 + 32);
    v5 = *(double *)(a4 + 40);
    v7 = *(double *)(a4 + 16);
    v6 = *(double *)(a4 + 24);
    v10 = v22.f64[1];
    if (v8 == v7 && v9 == v6 && v22.f64[0] == v4 && v22.f64[1] == v5)
      goto LABEL_39;
    v70 = v22;
    AGGraphClearUpdate();
    AGGraphGetValue();
    swift_retain();
    AGGraphSetUpdate();
    v24 = swift_retain();
    v25 = specialized find<A>(_:key:)(v24);
    if (v25)
    {
      v26 = *(_QWORD *)(v25 + 72);
      swift_retain();
      swift_release();
      if (v26)
        goto LABEL_27;
    }
    else
    {
      swift_release();
    }
    v27 = swift_retain();
    v28 = specialized closure #1 in PropertyList.subscript.getter(v27);
    swift_release();
    if ((v28 & 1) == 0)
    {
      if (!a2)
        goto LABEL_38;
      swift_retain();
      v26 = a2;
      goto LABEL_27;
    }
    if (one-time initialization token for velocityTracking != -1)
      goto LABEL_70;
    goto LABEL_24;
  }
  if (*(_BYTE *)(a1 + 32) == 1)
    goto LABEL_11;
  v21 = *(_QWORD *)(a4 + 56);
  if (!v21)
    return;
  while (1)
  {
    v38 = vmulq_f64(*(float64x2_t *)(a1 + 16), (float64x2_t)vdupq_n_s64(0x4060000000000000uLL));
    v74 = *(float64x2_t *)a1;
    v75 = v38;
    swift_retain();
    v73 = 0;
    if ((specialized AnimatorState.update(_:at:environment:)(&v74, v18) & 1) == 0)
    {
      if (one-time initialization token for shared != -1)
        swift_once();
      swift_beginAccess();
      v48 = *(double *)(v21 + 72);
      v72 = *(_QWORD *)(v21 + 80);
      v49 = *(unsigned int *)(v21 + 120);
      v50 = *(_BYTE *)(v21 + 124);
      v51 = *(void (**)(uint64_t *, unint64_t, double))((*MEMORY[0x24BEE4EA0] & *(_QWORD *)static CoreGlue.shared)
                                                                       + 0x58);
      v52 = static CoreGlue.shared;
      v71 = v50;
      v51(&v72, v49 | ((unint64_t)v50 << 32), v48);
      swift_release();

      goto LABEL_55;
    }
    swift_retain_n();
    static os_signpost_type_t.end.getter();
    static os_signpost_type_t.event.getter();
    if ((kdebug_is_enabled() & 1) == 0)
      goto LABEL_52;
    if (one-time initialization token for _signpostLog != -1)
      swift_once();
    v39 = (void *)_signpostLog;
    if ((OS_os_log.signpostsEnabled.getter() & 1) == 0)
    {
LABEL_52:
      swift_release_n();
      if (*(_QWORD *)(a4 + 56))
      {
LABEL_53:
        specialized AnimatorState.removeListeners()();
        swift_release();
      }
LABEL_54:
      swift_release();
      *(_QWORD *)(a4 + 56) = 0;
LABEL_55:
      v53 = vmulq_f64(v75, (float64x2_t)vdupq_n_s64(0x3F80000000000000uLL));
      *(float64x2_t *)a1 = v74;
      *(float64x2_t *)(a1 + 16) = v53;
      *(_BYTE *)(a1 + 32) = 1;
      return;
    }
    v69 = v15;
    swift_retain();
    v40 = v39;
    OSSignpostID.init(log:object:)();
    type metadata accessor for _ContiguousArrayStorage<CVarArg>();
    v41 = swift_allocObject();
    *(_OWORD *)(v41 + 16) = xmmword_235283260;
    CurrentAttribute = AGGraphGetCurrentAttribute();
    v15 = *MEMORY[0x24BE096C0];
    if (CurrentAttribute == (_DWORD)v15)
    {
      __break(1u);
    }
    else
    {
      v43 = (id)AGGraphGetAttributeGraph();
      Counter = AGGraphGetCounter();

      v45 = MEMORY[0x24BEE1ED8];
      *(_QWORD *)(v41 + 56) = MEMORY[0x24BEE1E88];
      *(_QWORD *)(v41 + 64) = v45;
      *(_QWORD *)(v41 + 32) = Counter;
      v46 = AGGraphGetCurrentAttribute();
      if (v46 != (_DWORD)v15)
      {
        v47 = MEMORY[0x24BEE4558];
        *(_QWORD *)(v41 + 96) = MEMORY[0x24BEE44F0];
        *(_QWORD *)(v41 + 104) = v47;
        *(_DWORD *)(v41 + 72) = v46;
        *(_QWORD *)(v41 + 136) = MEMORY[0x24BEE0D00];
        *(_QWORD *)(v41 + 144) = lazy protocol witness table accessor for type String and conformance String();
        strcpy((char *)(v41 + 112), "_ScaleEffect");
        *(_BYTE *)(v41 + 125) = 0;
        *(_WORD *)(v41 + 126) = -5120;
        os_signpost(_:dso:log:name:signpostID:_:_:)();
        swift_release_n();
        (*(void (**)(char *, uint64_t))(v69 + 8))(v17, v14);
        swift_bridgeObjectRelease();
        if (*(_QWORD *)(a4 + 56))
          goto LABEL_53;
        goto LABEL_54;
      }
    }
    __break(1u);
LABEL_70:
    swift_once();
LABEL_24:
    v26 = static Animation.velocityTracking;
    swift_retain();
LABEL_27:
    v7 = v8 - v7;
    v6 = v9 - v6;
    v4 = v70.f64[0] - v4;
    v5 = v10 - v5;
    v18 = *(double *)AGGraphGetValue();
    if (*(_QWORD *)(a4 + 56))
      break;
    type metadata accessor for CombinedAnimationState<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>>.Entry(0, (unint64_t *)&lazy cache variable for type metadata for AnimatorState<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>>, (uint64_t (*)(uint64_t))type metadata accessor for AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>, lazy protocol witness table accessor for type AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>> and conformance AnimatablePair<A, B>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatorState);
    swift_allocObject();
    swift_retain();
    v54 = swift_retain();
    v55 = specialized AnimatorState.init(animation:interval:at:in:)(v54, v7, v6, v4, v5, v18);
    swift_retain();
    v56 = static os_signpost_type_t.begin.getter();
    static os_signpost_type_t.event.getter();
    if ((kdebug_is_enabled() & 1) == 0)
      goto LABEL_64;
    v68 = v56;
    if (one-time initialization token for _signpostLog != -1)
      swift_once();
    v57 = (void *)_signpostLog;
    if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
    {
      v69 = v15;
      swift_retain();
      v58 = v57;
      OSSignpostID.init(log:object:)();
      type metadata accessor for _ContiguousArrayStorage<CVarArg>();
      v59 = swift_allocObject();
      *(_OWORD *)(v59 + 16) = xmmword_235283260;
      v60 = AGGraphGetCurrentAttribute();
      v67 = *MEMORY[0x24BE096C0];
      if (v60 == v67)
        goto LABEL_73;
      v61 = (id)AGGraphGetAttributeGraph();
      v66 = AGGraphGetCounter();

      v62 = MEMORY[0x24BEE1ED8];
      *(_QWORD *)(v59 + 56) = MEMORY[0x24BEE1E88];
      *(_QWORD *)(v59 + 64) = v62;
      *(_QWORD *)(v59 + 32) = v66;
      v63 = AGGraphGetCurrentAttribute();
      if (v63 == v67)
        goto LABEL_74;
      v64 = MEMORY[0x24BEE4558];
      *(_QWORD *)(v59 + 96) = MEMORY[0x24BEE44F0];
      *(_QWORD *)(v59 + 104) = v64;
      *(_DWORD *)(v59 + 72) = v63;
      *(_QWORD *)(v59 + 136) = MEMORY[0x24BEE0D00];
      *(_QWORD *)(v59 + 144) = lazy protocol witness table accessor for type String and conformance String();
      strcpy((char *)(v59 + 112), "_ScaleEffect");
      *(_BYTE *)(v59 + 125) = 0;
      *(_WORD *)(v59 + 126) = -5120;
      os_signpost(_:dso:log:name:signpostID:_:_:)();
      swift_release();
      v15 = v69;
      (*(void (**)(char *, uint64_t))(v69 + 8))(v17, v14);
      swift_bridgeObjectRelease();
    }
    else
    {
LABEL_64:
      swift_release();
    }
    swift_release();
    *(_QWORD *)(a4 + 56) = v55;
    if (v55)
    {
LABEL_37:
      swift_retain();
      specialized AnimatorState.addListeners(transaction:)();
      swift_release();
      swift_release();
      goto LABEL_38;
    }
LABEL_66:
    __break(1u);
LABEL_38:
    swift_release();
    v22 = v70;
LABEL_39:
    *(double *)(a4 + 16) = v8;
    *(double *)(a4 + 24) = v9;
    *(float64x2_t *)(a4 + 32) = v22;
    *(_BYTE *)(a4 + 48) = 0;
    v21 = *(_QWORD *)(a4 + 56);
    if (!v21)
      return;
  }
  swift_retain();
  LOBYTE(v74.f64[0]) = 0;
  specialized AnimatorState.combine(newAnimation:newInterval:at:in:environment:)(v26, v7, v6, v4, v5, v18);
  swift_retain_n();
  v29 = static os_signpost_type_t.event.getter();
  static os_signpost_type_t.event.getter();
  if ((kdebug_is_enabled() & 1) == 0)
    goto LABEL_35;
  v68 = v29;
  if (one-time initialization token for _signpostLog != -1)
    swift_once();
  v30 = (void *)_signpostLog;
  if ((OS_os_log.signpostsEnabled.getter() & 1) == 0)
  {
LABEL_35:
    swift_release_n();
    goto LABEL_36;
  }
  v69 = v15;
  swift_retain();
  v31 = v30;
  OSSignpostID.init(log:object:)();
  type metadata accessor for _ContiguousArrayStorage<CVarArg>();
  v32 = swift_allocObject();
  *(_OWORD *)(v32 + 16) = xmmword_235283260;
  v33 = AGGraphGetCurrentAttribute();
  v67 = *MEMORY[0x24BE096C0];
  if (v33 != v67)
  {
    v34 = (id)AGGraphGetAttributeGraph();
    v66 = AGGraphGetCounter();

    v35 = MEMORY[0x24BEE1ED8];
    *(_QWORD *)(v32 + 56) = MEMORY[0x24BEE1E88];
    *(_QWORD *)(v32 + 64) = v35;
    *(_QWORD *)(v32 + 32) = v66;
    v36 = AGGraphGetCurrentAttribute();
    if (v36 == v67)
      goto LABEL_72;
    v37 = MEMORY[0x24BEE4558];
    *(_QWORD *)(v32 + 96) = MEMORY[0x24BEE44F0];
    *(_QWORD *)(v32 + 104) = v37;
    *(_DWORD *)(v32 + 72) = v36;
    *(_QWORD *)(v32 + 136) = MEMORY[0x24BEE0D00];
    *(_QWORD *)(v32 + 144) = lazy protocol witness table accessor for type String and conformance String();
    strcpy((char *)(v32 + 112), "_ScaleEffect");
    *(_BYTE *)(v32 + 125) = 0;
    *(_WORD *)(v32 + 126) = -5120;
    os_signpost(_:dso:log:name:signpostID:_:_:)();
    swift_release_n();
    v15 = v69;
    (*(void (**)(char *, uint64_t))(v69 + 8))(v17, v14);
    swift_bridgeObjectRelease();
LABEL_36:
    if (*(_QWORD *)(a4 + 56))
      goto LABEL_37;
    goto LABEL_66;
  }
  __break(1u);
LABEL_72:
  __break(1u);
LABEL_73:
  __break(1u);
LABEL_74:
  __break(1u);
}

{
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  double v18;
  double *Value;
  char v20;
  uint64_t v21;
  double v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  int v28;
  void *v29;
  id v30;
  uint64_t v31;
  int v32;
  id v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  __int128 v37;
  void *v38;
  id v39;
  uint64_t v40;
  int CurrentAttribute;
  id v42;
  uint64_t Counter;
  uint64_t v44;
  int v45;
  uint64_t v46;
  double v47;
  uint64_t v48;
  unsigned __int8 v49;
  void (*v50)(uint64_t *, unint64_t, double);
  void *v51;
  __int128 v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  void *v56;
  id v57;
  uint64_t v58;
  int v59;
  id v60;
  uint64_t v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  int v67;
  uint64_t v68;
  double v69;
  unsigned __int8 v70;
  uint64_t v71;
  char v72;
  float64x2_t v73;
  __int128 v74;

  v14 = type metadata accessor for OSSignpostID();
  v15 = *(_QWORD *)(v14 - 8);
  MEMORY[0x24BDAC7A8](v14);
  v17 = (char *)&v64 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for infinity != -1)
    swift_once();
  v18 = -*(double *)&static Time.infinity;
  if (*(_QWORD *)(a4 + 56))
  {
    Value = (double *)AGGraphGetValue();
    if ((v20 & 1) != 0)
      v18 = *Value;
  }
  if (*(_DWORD *)(a4 + 64) != *(_DWORD *)AGGraphGetValue() >> 1)
  {
    specialized AnimatableAttributeHelper.reset()();
    *(_BYTE *)(a1 + 48) = 1;
LABEL_11:
    v8 = *(double *)a1;
    v9 = *(double *)(a1 + 8);
    v10 = *(double *)(a1 + 16);
    v22 = *(double *)(a1 + 24);
    if ((*(_BYTE *)(a4 + 48) & 1) != 0)
      goto LABEL_37;
    v4 = *(double *)(a4 + 32);
    v5 = *(double *)(a4 + 40);
    v7 = *(double *)(a4 + 16);
    v6 = *(double *)(a4 + 24);
    if (v8 == v7 && v9 == v6 && v10 == v4 && v22 == v5)
      goto LABEL_37;
    v69 = *(double *)(a1 + 24);
    AGGraphClearUpdate();
    AGGraphGetValue();
    swift_retain();
    AGGraphSetUpdate();
    v23 = swift_retain();
    v24 = specialized find<A>(_:key:)(v23);
    if (v24)
    {
      v25 = *(_QWORD *)(v24 + 72);
      swift_retain();
      swift_release();
      if (v25)
        goto LABEL_25;
    }
    else
    {
      swift_release();
    }
    v26 = swift_retain();
    v27 = specialized closure #1 in PropertyList.subscript.getter(v26);
    swift_release();
    if ((v27 & 1) == 0)
    {
      if (!a2)
        goto LABEL_36;
      swift_retain();
      v25 = a2;
      goto LABEL_25;
    }
    if (one-time initialization token for velocityTracking != -1)
      goto LABEL_68;
    goto LABEL_22;
  }
  if (*(_BYTE *)(a1 + 48) == 1)
    goto LABEL_11;
  v21 = *(_QWORD *)(a4 + 56);
  if (!v21)
    return;
  while (1)
  {
    v37 = *(_OWORD *)(a1 + 16);
    v73 = *(float64x2_t *)a1;
    v74 = v37;
    swift_retain();
    v72 = 0;
    if ((specialized AnimatorState.update(_:at:environment:)(&v73, v18) & 1) == 0)
    {
      if (one-time initialization token for shared != -1)
        swift_once();
      swift_beginAccess();
      v47 = *(double *)(v21 + 72);
      v71 = *(_QWORD *)(v21 + 80);
      v48 = *(unsigned int *)(v21 + 120);
      v49 = *(_BYTE *)(v21 + 124);
      v50 = *(void (**)(uint64_t *, unint64_t, double))((*MEMORY[0x24BEE4EA0] & *(_QWORD *)static CoreGlue.shared)
                                                                       + 0x58);
      v51 = static CoreGlue.shared;
      v70 = v49;
      v50(&v71, v48 | ((unint64_t)v49 << 32), v47);
      swift_release();

      goto LABEL_53;
    }
    swift_retain();
    static os_signpost_type_t.end.getter();
    static os_signpost_type_t.event.getter();
    if ((kdebug_is_enabled() & 1) == 0)
      goto LABEL_50;
    if (one-time initialization token for _signpostLog != -1)
      swift_once();
    v38 = (void *)_signpostLog;
    if ((OS_os_log.signpostsEnabled.getter() & 1) == 0)
    {
LABEL_50:
      swift_release();
      if (*(_QWORD *)(a4 + 56))
      {
LABEL_51:
        specialized AnimatorState.removeListeners()();
        swift_release();
      }
LABEL_52:
      swift_release();
      *(_QWORD *)(a4 + 56) = 0;
LABEL_53:
      v52 = v74;
      *(float64x2_t *)a1 = v73;
      *(_OWORD *)(a1 + 16) = v52;
      *(_BYTE *)(a1 + 48) = 1;
      return;
    }
    v68 = v15;
    swift_retain();
    v39 = v38;
    OSSignpostID.init(log:object:)();
    type metadata accessor for _ContiguousArrayStorage<CVarArg>();
    v40 = swift_allocObject();
    *(_OWORD *)(v40 + 16) = xmmword_235283260;
    CurrentAttribute = AGGraphGetCurrentAttribute();
    v15 = *MEMORY[0x24BE096C0];
    if (CurrentAttribute == (_DWORD)v15)
    {
      __break(1u);
    }
    else
    {
      v42 = (id)AGGraphGetAttributeGraph();
      Counter = AGGraphGetCounter();

      v44 = MEMORY[0x24BEE1ED8];
      *(_QWORD *)(v40 + 56) = MEMORY[0x24BEE1E88];
      *(_QWORD *)(v40 + 64) = v44;
      *(_QWORD *)(v40 + 32) = Counter;
      v45 = AGGraphGetCurrentAttribute();
      if (v45 != (_DWORD)v15)
      {
        v46 = MEMORY[0x24BEE4558];
        *(_QWORD *)(v40 + 96) = MEMORY[0x24BEE44F0];
        *(_QWORD *)(v40 + 104) = v46;
        *(_DWORD *)(v40 + 72) = v45;
        *(_QWORD *)(v40 + 136) = MEMORY[0x24BEE0D00];
        *(_QWORD *)(v40 + 144) = lazy protocol witness table accessor for type String and conformance String();
        *(_QWORD *)(v40 + 112) = 0x6D61724677656956;
        *(_QWORD *)(v40 + 120) = 0xE900000000000065;
        os_signpost(_:dso:log:name:signpostID:_:_:)();
        swift_release();
        (*(void (**)(char *, uint64_t))(v68 + 8))(v17, v14);
        swift_bridgeObjectRelease();
        if (*(_QWORD *)(a4 + 56))
          goto LABEL_51;
        goto LABEL_52;
      }
    }
    __break(1u);
LABEL_68:
    swift_once();
LABEL_22:
    v25 = static Animation.velocityTracking;
    swift_retain();
LABEL_25:
    v7 = v8 - v7;
    v6 = v9 - v6;
    v4 = v10 - v4;
    v5 = v69 - v5;
    v18 = *(double *)AGGraphGetValue();
    if (*(_QWORD *)(a4 + 56))
      break;
    type metadata accessor for CombinedAnimationState<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>>.Entry(0, (unint64_t *)&lazy cache variable for type metadata for AnimatorState<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>>, (uint64_t (*)(uint64_t))type metadata accessor for AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>, lazy protocol witness table accessor for type AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>> and conformance AnimatablePair<A, B>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatorState);
    swift_allocObject();
    swift_retain();
    v53 = swift_retain();
    v54 = specialized AnimatorState.init(animation:interval:at:in:)(v53, v7, v6, v4, v5, v18);
    swift_retain();
    v55 = static os_signpost_type_t.begin.getter();
    static os_signpost_type_t.event.getter();
    if ((kdebug_is_enabled() & 1) == 0)
      goto LABEL_62;
    v67 = v55;
    if (one-time initialization token for _signpostLog != -1)
      swift_once();
    v56 = (void *)_signpostLog;
    if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
    {
      v68 = v15;
      swift_retain();
      v57 = v56;
      OSSignpostID.init(log:object:)();
      type metadata accessor for _ContiguousArrayStorage<CVarArg>();
      v58 = swift_allocObject();
      *(_OWORD *)(v58 + 16) = xmmword_235283260;
      v59 = AGGraphGetCurrentAttribute();
      v66 = *MEMORY[0x24BE096C0];
      if (v59 == v66)
        goto LABEL_71;
      v60 = (id)AGGraphGetAttributeGraph();
      v65 = AGGraphGetCounter();

      v61 = MEMORY[0x24BEE1ED8];
      *(_QWORD *)(v58 + 56) = MEMORY[0x24BEE1E88];
      *(_QWORD *)(v58 + 64) = v61;
      *(_QWORD *)(v58 + 32) = v65;
      v62 = AGGraphGetCurrentAttribute();
      if (v62 == v66)
        goto LABEL_72;
      v63 = MEMORY[0x24BEE4558];
      *(_QWORD *)(v58 + 96) = MEMORY[0x24BEE44F0];
      *(_QWORD *)(v58 + 104) = v63;
      *(_DWORD *)(v58 + 72) = v62;
      *(_QWORD *)(v58 + 136) = MEMORY[0x24BEE0D00];
      *(_QWORD *)(v58 + 144) = lazy protocol witness table accessor for type String and conformance String();
      *(_QWORD *)(v58 + 112) = 0x6D61724677656956;
      *(_QWORD *)(v58 + 120) = 0xE900000000000065;
      os_signpost(_:dso:log:name:signpostID:_:_:)();
      swift_release();
      v15 = v68;
      (*(void (**)(char *, uint64_t))(v68 + 8))(v17, v14);
      swift_bridgeObjectRelease();
    }
    else
    {
LABEL_62:
      swift_release();
    }
    swift_release();
    *(_QWORD *)(a4 + 56) = v54;
    if (v54)
    {
LABEL_35:
      swift_retain();
      specialized AnimatorState.addListeners(transaction:)();
      swift_release();
      swift_release();
      goto LABEL_36;
    }
LABEL_64:
    __break(1u);
LABEL_36:
    swift_release();
    v22 = v69;
LABEL_37:
    *(double *)(a4 + 16) = v8;
    *(double *)(a4 + 24) = v9;
    *(double *)(a4 + 32) = v10;
    *(double *)(a4 + 40) = v22;
    *(_BYTE *)(a4 + 48) = 0;
    v21 = *(_QWORD *)(a4 + 56);
    if (!v21)
      return;
  }
  swift_retain();
  LOBYTE(v73.f64[0]) = 0;
  specialized AnimatorState.combine(newAnimation:newInterval:at:in:environment:)(v25, v7, v6, v4, v5, v18);
  swift_retain();
  v28 = static os_signpost_type_t.event.getter();
  static os_signpost_type_t.event.getter();
  if ((kdebug_is_enabled() & 1) == 0)
    goto LABEL_33;
  v67 = v28;
  if (one-time initialization token for _signpostLog != -1)
    swift_once();
  v29 = (void *)_signpostLog;
  if ((OS_os_log.signpostsEnabled.getter() & 1) == 0)
  {
LABEL_33:
    swift_release_n();
    goto LABEL_34;
  }
  v68 = v15;
  swift_retain();
  v30 = v29;
  OSSignpostID.init(log:object:)();
  type metadata accessor for _ContiguousArrayStorage<CVarArg>();
  v31 = swift_allocObject();
  *(_OWORD *)(v31 + 16) = xmmword_235283260;
  v32 = AGGraphGetCurrentAttribute();
  v66 = *MEMORY[0x24BE096C0];
  if (v32 != v66)
  {
    v33 = (id)AGGraphGetAttributeGraph();
    v65 = AGGraphGetCounter();

    v34 = MEMORY[0x24BEE1ED8];
    *(_QWORD *)(v31 + 56) = MEMORY[0x24BEE1E88];
    *(_QWORD *)(v31 + 64) = v34;
    *(_QWORD *)(v31 + 32) = v65;
    v35 = AGGraphGetCurrentAttribute();
    if (v35 == v66)
      goto LABEL_70;
    v36 = MEMORY[0x24BEE4558];
    *(_QWORD *)(v31 + 96) = MEMORY[0x24BEE44F0];
    *(_QWORD *)(v31 + 104) = v36;
    *(_DWORD *)(v31 + 72) = v35;
    *(_QWORD *)(v31 + 136) = MEMORY[0x24BEE0D00];
    *(_QWORD *)(v31 + 144) = lazy protocol witness table accessor for type String and conformance String();
    *(_QWORD *)(v31 + 112) = 0x6D61724677656956;
    *(_QWORD *)(v31 + 120) = 0xE900000000000065;
    os_signpost(_:dso:log:name:signpostID:_:_:)();
    swift_release_n();
    v15 = v68;
    (*(void (**)(char *, uint64_t))(v68 + 8))(v17, v14);
    swift_bridgeObjectRelease();
LABEL_34:
    if (*(_QWORD *)(a4 + 56))
      goto LABEL_35;
    goto LABEL_64;
  }
  __break(1u);
LABEL_70:
  __break(1u);
LABEL_71:
  __break(1u);
LABEL_72:
  __break(1u);
}

{
  double v4;
  double v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  double v13;
  double *Value;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  int v22;
  void *v23;
  id v24;
  uint64_t v25;
  int v26;
  id v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  void *v31;
  id v32;
  uint64_t v33;
  int CurrentAttribute;
  id v35;
  uint64_t Counter;
  uint64_t v37;
  int v38;
  uint64_t v39;
  double v40;
  uint64_t v41;
  unsigned __int8 v42;
  void (*v43)(uint64_t *, unint64_t, double);
  void *v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  void *v48;
  id v49;
  uint64_t v50;
  int v51;
  id v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  int v59;
  uint64_t v60;
  unsigned __int8 v61;
  uint64_t v62;
  char v63;
  double v64;

  v9 = type metadata accessor for OSSignpostID();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v56 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for infinity != -1)
    swift_once();
  v13 = -*(double *)&static Time.infinity;
  if (*(_QWORD *)(a4 + 32))
  {
    Value = (double *)AGGraphGetValue();
    if ((v15 & 1) != 0)
      v13 = *Value;
  }
  if (*(_DWORD *)(a4 + 40) != *(_DWORD *)AGGraphGetValue() >> 1)
  {
    specialized AnimatableAttributeHelper.reset()();
    *(_BYTE *)(a1 + 8) = 1;
LABEL_11:
    v5 = *(double *)a1;
    if ((*(_BYTE *)(a4 + 24) & 1) != 0)
      goto LABEL_34;
    v4 = *(double *)(a4 + 16);
    if (v5 == v4)
      goto LABEL_34;
    AGGraphClearUpdate();
    AGGraphGetValue();
    swift_retain();
    AGGraphSetUpdate();
    v17 = swift_retain();
    v18 = specialized find<A>(_:key:)(v17);
    if (v18)
    {
      v19 = *(_QWORD *)(v18 + 72);
      swift_retain();
      swift_release();
      if (v19)
        goto LABEL_22;
    }
    else
    {
      swift_release();
    }
    v20 = swift_retain();
    v21 = specialized closure #1 in PropertyList.subscript.getter(v20);
    swift_release();
    if ((v21 & 1) == 0)
    {
      if (!a2)
        goto LABEL_33;
      swift_retain();
      v19 = a2;
      goto LABEL_22;
    }
    if (one-time initialization token for velocityTracking != -1)
      goto LABEL_65;
    goto LABEL_19;
  }
  if (*(_BYTE *)(a1 + 8) == 1)
    goto LABEL_11;
  v16 = *(_QWORD *)(a4 + 32);
  if (!v16)
    return;
  while (1)
  {
    v64 = *(double *)a1;
    swift_retain();
    v63 = 0;
    if ((specialized AnimatorState.update(_:at:environment:)(&v64, v13) & 1) == 0)
    {
      if (one-time initialization token for shared != -1)
        swift_once();
      swift_beginAccess();
      v40 = *(double *)(v16 + 48);
      v62 = *(_QWORD *)(v16 + 56);
      v41 = *(unsigned int *)(v16 + 72);
      v42 = *(_BYTE *)(v16 + 76);
      v43 = *(void (**)(uint64_t *, unint64_t, double))((*MEMORY[0x24BEE4EA0] & *(_QWORD *)static CoreGlue.shared)
                                                                       + 0x58);
      v44 = static CoreGlue.shared;
      v61 = v42;
      v43(&v62, v41 | ((unint64_t)v42 << 32), v40);
      swift_release();

      goto LABEL_50;
    }
    swift_retain();
    static os_signpost_type_t.end.getter();
    static os_signpost_type_t.event.getter();
    if ((kdebug_is_enabled() & 1) == 0)
      goto LABEL_47;
    if (one-time initialization token for _signpostLog != -1)
      swift_once();
    v31 = (void *)_signpostLog;
    if ((OS_os_log.signpostsEnabled.getter() & 1) == 0)
    {
LABEL_47:
      swift_release();
      if (*(_QWORD *)(a4 + 32))
      {
LABEL_48:
        specialized AnimatorState.removeListeners()();
        swift_release();
      }
LABEL_49:
      swift_release();
      *(_QWORD *)(a4 + 32) = 0;
LABEL_50:
      *(double *)a1 = v64;
      *(_BYTE *)(a1 + 8) = 1;
      return;
    }
    v60 = v10;
    swift_retain();
    v32 = v31;
    OSSignpostID.init(log:object:)();
    type metadata accessor for _ContiguousArrayStorage<CVarArg>();
    v33 = swift_allocObject();
    *(_OWORD *)(v33 + 16) = xmmword_235283260;
    CurrentAttribute = AGGraphGetCurrentAttribute();
    v10 = *MEMORY[0x24BE096C0];
    if (CurrentAttribute == (_DWORD)v10)
    {
      __break(1u);
    }
    else
    {
      v35 = (id)AGGraphGetAttributeGraph();
      Counter = AGGraphGetCounter();

      v37 = MEMORY[0x24BEE1ED8];
      *(_QWORD *)(v33 + 56) = MEMORY[0x24BEE1E88];
      *(_QWORD *)(v33 + 64) = v37;
      *(_QWORD *)(v33 + 32) = Counter;
      v38 = AGGraphGetCurrentAttribute();
      if (v38 != (_DWORD)v10)
      {
        v39 = MEMORY[0x24BEE4558];
        *(_QWORD *)(v33 + 96) = MEMORY[0x24BEE44F0];
        *(_QWORD *)(v33 + 104) = v39;
        *(_DWORD *)(v33 + 72) = v38;
        *(_QWORD *)(v33 + 136) = MEMORY[0x24BEE0D00];
        *(_QWORD *)(v33 + 144) = lazy protocol witness table accessor for type String and conformance String();
        *(_QWORD *)(v33 + 112) = 0x74616F6C464743;
        *(_QWORD *)(v33 + 120) = 0xE700000000000000;
        os_signpost(_:dso:log:name:signpostID:_:_:)();
        swift_release();
        (*(void (**)(char *, uint64_t))(v60 + 8))(v12, v9);
        swift_bridgeObjectRelease();
        if (*(_QWORD *)(a4 + 32))
          goto LABEL_48;
        goto LABEL_49;
      }
    }
    __break(1u);
LABEL_65:
    swift_once();
LABEL_19:
    v19 = static Animation.velocityTracking;
    swift_retain();
LABEL_22:
    v4 = v5 - v4;
    v13 = *(double *)AGGraphGetValue();
    if (*(_QWORD *)(a4 + 32))
      break;
    type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for AnimatorState<CGFloat>, (uint64_t (*)(void))lazy protocol witness table accessor for type CGFloat and conformance CGFloat, MEMORY[0x24BEE50B0], (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatorState);
    swift_allocObject();
    swift_retain();
    v45 = swift_retain();
    v46 = specialized AnimatorState.init(animation:interval:at:in:)(v45, v4, v13);
    swift_retain();
    v47 = static os_signpost_type_t.begin.getter();
    static os_signpost_type_t.event.getter();
    if ((kdebug_is_enabled() & 1) == 0)
      goto LABEL_59;
    v59 = v47;
    if (one-time initialization token for _signpostLog != -1)
      swift_once();
    v48 = (void *)_signpostLog;
    if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
    {
      v60 = v19;
      swift_retain();
      v49 = v48;
      OSSignpostID.init(log:object:)();
      type metadata accessor for _ContiguousArrayStorage<CVarArg>();
      v50 = swift_allocObject();
      *(_OWORD *)(v50 + 16) = xmmword_235283260;
      v51 = AGGraphGetCurrentAttribute();
      v58 = *MEMORY[0x24BE096C0];
      if (v51 == v58)
        goto LABEL_68;
      v52 = (id)AGGraphGetAttributeGraph();
      v57 = AGGraphGetCounter();

      v53 = MEMORY[0x24BEE1ED8];
      *(_QWORD *)(v50 + 56) = MEMORY[0x24BEE1E88];
      *(_QWORD *)(v50 + 64) = v53;
      *(_QWORD *)(v50 + 32) = v57;
      v54 = AGGraphGetCurrentAttribute();
      if (v54 == v58)
        goto LABEL_69;
      v55 = MEMORY[0x24BEE4558];
      *(_QWORD *)(v50 + 96) = MEMORY[0x24BEE44F0];
      *(_QWORD *)(v50 + 104) = v55;
      *(_DWORD *)(v50 + 72) = v54;
      *(_QWORD *)(v50 + 136) = MEMORY[0x24BEE0D00];
      *(_QWORD *)(v50 + 144) = lazy protocol witness table accessor for type String and conformance String();
      *(_QWORD *)(v50 + 112) = 0x74616F6C464743;
      *(_QWORD *)(v50 + 120) = 0xE700000000000000;
      os_signpost(_:dso:log:name:signpostID:_:_:)();
      swift_release();
      (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
      swift_bridgeObjectRelease();
    }
    else
    {
LABEL_59:
      swift_release();
    }
    swift_release();
    *(_QWORD *)(a4 + 32) = v46;
    if (v46)
    {
LABEL_32:
      swift_retain();
      specialized AnimatorState.addListeners(transaction:)();
      swift_release();
      swift_release();
      goto LABEL_33;
    }
LABEL_61:
    __break(1u);
LABEL_33:
    swift_release();
LABEL_34:
    *(double *)(a4 + 16) = v5;
    *(_BYTE *)(a4 + 24) = 0;
    v16 = *(_QWORD *)(a4 + 32);
    if (!v16)
      return;
  }
  swift_retain();
  v63 = 0;
  specialized AnimatorState.combine(newAnimation:newInterval:at:in:environment:)(v19, v4, v13);
  swift_retain();
  v22 = static os_signpost_type_t.event.getter();
  static os_signpost_type_t.event.getter();
  if ((kdebug_is_enabled() & 1) == 0)
    goto LABEL_30;
  v59 = v22;
  if (one-time initialization token for _signpostLog != -1)
    swift_once();
  v23 = (void *)_signpostLog;
  if ((OS_os_log.signpostsEnabled.getter() & 1) == 0)
  {
LABEL_30:
    swift_release_n();
    goto LABEL_31;
  }
  v60 = v19;
  swift_retain();
  v24 = v23;
  OSSignpostID.init(log:object:)();
  type metadata accessor for _ContiguousArrayStorage<CVarArg>();
  v25 = swift_allocObject();
  *(_OWORD *)(v25 + 16) = xmmword_235283260;
  v26 = AGGraphGetCurrentAttribute();
  v58 = *MEMORY[0x24BE096C0];
  if (v26 != v58)
  {
    v27 = (id)AGGraphGetAttributeGraph();
    v57 = AGGraphGetCounter();

    v28 = MEMORY[0x24BEE1ED8];
    *(_QWORD *)(v25 + 56) = MEMORY[0x24BEE1E88];
    *(_QWORD *)(v25 + 64) = v28;
    *(_QWORD *)(v25 + 32) = v57;
    v29 = AGGraphGetCurrentAttribute();
    if (v29 == v58)
      goto LABEL_67;
    v30 = MEMORY[0x24BEE4558];
    *(_QWORD *)(v25 + 96) = MEMORY[0x24BEE44F0];
    *(_QWORD *)(v25 + 104) = v30;
    *(_DWORD *)(v25 + 72) = v29;
    *(_QWORD *)(v25 + 136) = MEMORY[0x24BEE0D00];
    *(_QWORD *)(v25 + 144) = lazy protocol witness table accessor for type String and conformance String();
    *(_QWORD *)(v25 + 112) = 0x74616F6C464743;
    *(_QWORD *)(v25 + 120) = 0xE700000000000000;
    os_signpost(_:dso:log:name:signpostID:_:_:)();
    swift_release_n();
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
    swift_bridgeObjectRelease();
LABEL_31:
    if (*(_QWORD *)(a4 + 32))
      goto LABEL_32;
    goto LABEL_61;
  }
  __break(1u);
LABEL_67:
  __break(1u);
LABEL_68:
  __break(1u);
LABEL_69:
  __break(1u);
}

{
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  double v18;
  double *Value;
  char v20;
  uint64_t v21;
  double v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  int v28;
  void *v29;
  id v30;
  uint64_t v31;
  int v32;
  id v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  __int128 v37;
  void *v38;
  id v39;
  uint64_t v40;
  int CurrentAttribute;
  id v42;
  uint64_t Counter;
  uint64_t v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  double v48;
  uint64_t v49;
  unsigned __int8 v50;
  void (*v51)(uint64_t *, unint64_t, double);
  void *v52;
  __int128 v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  void *v57;
  id v58;
  uint64_t v59;
  int v60;
  id v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  int v68;
  uint64_t v69;
  double v70;
  unsigned __int8 v71;
  uint64_t v72;
  char v73;
  float64x2_t v74;
  __int128 v75;

  v14 = type metadata accessor for OSSignpostID();
  v15 = *(_QWORD *)(v14 - 8);
  MEMORY[0x24BDAC7A8](v14);
  v17 = (char *)&v65 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for infinity != -1)
    swift_once();
  v18 = -*(double *)&static Time.infinity;
  if (*(_QWORD *)(a4 + 56))
  {
    Value = (double *)AGGraphGetValue();
    if ((v20 & 1) != 0)
      v18 = *Value;
  }
  if (*(_DWORD *)(a4 + 64) != *(_DWORD *)AGGraphGetValue() >> 1)
  {
    specialized AnimatableAttributeHelper.reset()();
    *(_BYTE *)(a1 + 32) = 1;
LABEL_11:
    v8 = *(double *)a1;
    v9 = *(double *)(a1 + 8);
    v10 = *(double *)(a1 + 16);
    v22 = *(double *)(a1 + 24);
    if ((*(_BYTE *)(a4 + 48) & 1) != 0)
      goto LABEL_37;
    v4 = *(double *)(a4 + 32);
    v5 = *(double *)(a4 + 40);
    v7 = *(double *)(a4 + 16);
    v6 = *(double *)(a4 + 24);
    if (v8 == v7 && v9 == v6 && v10 == v4 && v22 == v5)
      goto LABEL_37;
    v70 = *(double *)(a1 + 24);
    AGGraphClearUpdate();
    AGGraphGetValue();
    swift_retain();
    AGGraphSetUpdate();
    v23 = swift_retain();
    v24 = specialized find<A>(_:key:)(v23);
    if (v24)
    {
      v25 = *(_QWORD *)(v24 + 72);
      swift_retain();
      swift_release();
      if (v25)
        goto LABEL_25;
    }
    else
    {
      swift_release();
    }
    v26 = swift_retain();
    v27 = specialized closure #1 in PropertyList.subscript.getter(v26);
    swift_release();
    if ((v27 & 1) == 0)
    {
      if (!a2)
        goto LABEL_36;
      swift_retain();
      v25 = a2;
      goto LABEL_25;
    }
    if (one-time initialization token for velocityTracking != -1)
      goto LABEL_68;
    goto LABEL_22;
  }
  if (*(_BYTE *)(a1 + 32) == 1)
    goto LABEL_11;
  v21 = *(_QWORD *)(a4 + 56);
  if (!v21)
    return;
  while (1)
  {
    v37 = *(_OWORD *)(a1 + 16);
    v74 = *(float64x2_t *)a1;
    v75 = v37;
    swift_retain();
    v73 = 0;
    if ((specialized AnimatorState.update(_:at:environment:)(&v74, v18) & 1) == 0)
    {
      if (one-time initialization token for shared != -1)
        swift_once();
      swift_beginAccess();
      v48 = *(double *)(v21 + 72);
      v72 = *(_QWORD *)(v21 + 80);
      v49 = *(unsigned int *)(v21 + 120);
      v50 = *(_BYTE *)(v21 + 124);
      v51 = *(void (**)(uint64_t *, unint64_t, double))((*MEMORY[0x24BEE4EA0] & *(_QWORD *)static CoreGlue.shared)
                                                                       + 0x58);
      v52 = static CoreGlue.shared;
      v71 = v50;
      v51(&v72, v49 | ((unint64_t)v50 << 32), v48);
      swift_release();

      goto LABEL_53;
    }
    swift_retain();
    static os_signpost_type_t.end.getter();
    static os_signpost_type_t.event.getter();
    if ((kdebug_is_enabled() & 1) == 0)
      goto LABEL_50;
    if (one-time initialization token for _signpostLog != -1)
      swift_once();
    v38 = (void *)_signpostLog;
    if ((OS_os_log.signpostsEnabled.getter() & 1) == 0)
    {
LABEL_50:
      v47 = swift_release();
      if (*(_QWORD *)(a4 + 56))
      {
LABEL_51:
        specialized AnimatorState.removeListeners()(v47);
        swift_release();
      }
LABEL_52:
      swift_release();
      *(_QWORD *)(a4 + 56) = 0;
LABEL_53:
      v53 = v75;
      *(float64x2_t *)a1 = v74;
      *(_OWORD *)(a1 + 16) = v53;
      *(_BYTE *)(a1 + 32) = 1;
      return;
    }
    v69 = v15;
    swift_retain();
    v39 = v38;
    OSSignpostID.init(log:object:)();
    type metadata accessor for _ContiguousArrayStorage<CVarArg>();
    v40 = swift_allocObject();
    *(_OWORD *)(v40 + 16) = xmmword_235283260;
    CurrentAttribute = AGGraphGetCurrentAttribute();
    v15 = *MEMORY[0x24BE096C0];
    if (CurrentAttribute == (_DWORD)v15)
    {
      __break(1u);
    }
    else
    {
      v42 = (id)AGGraphGetAttributeGraph();
      Counter = AGGraphGetCounter();

      v44 = MEMORY[0x24BEE1ED8];
      *(_QWORD *)(v40 + 56) = MEMORY[0x24BEE1E88];
      *(_QWORD *)(v40 + 64) = v44;
      *(_QWORD *)(v40 + 32) = Counter;
      v45 = AGGraphGetCurrentAttribute();
      if (v45 != (_DWORD)v15)
      {
        v46 = MEMORY[0x24BEE4558];
        *(_QWORD *)(v40 + 96) = MEMORY[0x24BEE44F0];
        *(_QWORD *)(v40 + 104) = v46;
        *(_DWORD *)(v40 + 72) = v45;
        *(_QWORD *)(v40 + 136) = MEMORY[0x24BEE0D00];
        *(_QWORD *)(v40 + 144) = lazy protocol witness table accessor for type String and conformance String();
        *(_QWORD *)(v40 + 112) = 0x65736E4965676445;
        *(_QWORD *)(v40 + 120) = 0xEA00000000007374;
        os_signpost(_:dso:log:name:signpostID:_:_:)();
        swift_release();
        (*(void (**)(char *, uint64_t))(v69 + 8))(v17, v14);
        v47 = swift_bridgeObjectRelease();
        if (*(_QWORD *)(a4 + 56))
          goto LABEL_51;
        goto LABEL_52;
      }
    }
    __break(1u);
LABEL_68:
    swift_once();
LABEL_22:
    v25 = static Animation.velocityTracking;
    swift_retain();
LABEL_25:
    v7 = v8 - v7;
    v6 = v9 - v6;
    v4 = v10 - v4;
    v5 = v70 - v5;
    v18 = *(double *)AGGraphGetValue();
    if (*(_QWORD *)(a4 + 56))
      break;
    type metadata accessor for AnimatorState<AnimatablePair<CGFloat, AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>>>(0);
    swift_allocObject();
    swift_retain();
    v54 = swift_retain();
    v55 = specialized AnimatorState.init(animation:interval:at:in:)(v54, v7, v6, v4, v5, v18);
    swift_retain();
    v56 = static os_signpost_type_t.begin.getter();
    static os_signpost_type_t.event.getter();
    if ((kdebug_is_enabled() & 1) == 0)
      goto LABEL_62;
    v68 = v56;
    if (one-time initialization token for _signpostLog != -1)
      swift_once();
    v57 = (void *)_signpostLog;
    if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
    {
      v69 = v15;
      swift_retain();
      v58 = v57;
      OSSignpostID.init(log:object:)();
      type metadata accessor for _ContiguousArrayStorage<CVarArg>();
      v59 = swift_allocObject();
      *(_OWORD *)(v59 + 16) = xmmword_235283260;
      v60 = AGGraphGetCurrentAttribute();
      v67 = *MEMORY[0x24BE096C0];
      if (v60 == v67)
        goto LABEL_71;
      v61 = (id)AGGraphGetAttributeGraph();
      v66 = AGGraphGetCounter();

      v62 = MEMORY[0x24BEE1ED8];
      *(_QWORD *)(v59 + 56) = MEMORY[0x24BEE1E88];
      *(_QWORD *)(v59 + 64) = v62;
      *(_QWORD *)(v59 + 32) = v66;
      v63 = AGGraphGetCurrentAttribute();
      if (v63 == v67)
        goto LABEL_72;
      v64 = MEMORY[0x24BEE4558];
      *(_QWORD *)(v59 + 96) = MEMORY[0x24BEE44F0];
      *(_QWORD *)(v59 + 104) = v64;
      *(_DWORD *)(v59 + 72) = v63;
      *(_QWORD *)(v59 + 136) = MEMORY[0x24BEE0D00];
      *(_QWORD *)(v59 + 144) = lazy protocol witness table accessor for type String and conformance String();
      *(_QWORD *)(v59 + 112) = 0x65736E4965676445;
      *(_QWORD *)(v59 + 120) = 0xEA00000000007374;
      os_signpost(_:dso:log:name:signpostID:_:_:)();
      swift_release();
      v15 = v69;
      (*(void (**)(char *, uint64_t))(v69 + 8))(v17, v14);
      swift_bridgeObjectRelease();
    }
    else
    {
LABEL_62:
      swift_release();
    }
    swift_release();
    *(_QWORD *)(a4 + 56) = v55;
    if (v55)
    {
LABEL_35:
      swift_retain();
      specialized AnimatorState.addListeners(transaction:)();
      swift_release();
      swift_release();
      goto LABEL_36;
    }
LABEL_64:
    __break(1u);
LABEL_36:
    swift_release();
    v22 = v70;
LABEL_37:
    *(double *)(a4 + 16) = v8;
    *(double *)(a4 + 24) = v9;
    *(double *)(a4 + 32) = v10;
    *(double *)(a4 + 40) = v22;
    *(_BYTE *)(a4 + 48) = 0;
    v21 = *(_QWORD *)(a4 + 56);
    if (!v21)
      return;
  }
  swift_retain();
  LOBYTE(v74.f64[0]) = 0;
  specialized AnimatorState.combine(newAnimation:newInterval:at:in:environment:)(v25, v7, v6, v4, v5, v18);
  swift_retain();
  v28 = static os_signpost_type_t.event.getter();
  static os_signpost_type_t.event.getter();
  if ((kdebug_is_enabled() & 1) == 0)
    goto LABEL_33;
  v68 = v28;
  if (one-time initialization token for _signpostLog != -1)
    swift_once();
  v29 = (void *)_signpostLog;
  if ((OS_os_log.signpostsEnabled.getter() & 1) == 0)
  {
LABEL_33:
    swift_release_n();
    goto LABEL_34;
  }
  v69 = v15;
  swift_retain();
  v30 = v29;
  OSSignpostID.init(log:object:)();
  type metadata accessor for _ContiguousArrayStorage<CVarArg>();
  v31 = swift_allocObject();
  *(_OWORD *)(v31 + 16) = xmmword_235283260;
  v32 = AGGraphGetCurrentAttribute();
  v67 = *MEMORY[0x24BE096C0];
  if (v32 != v67)
  {
    v33 = (id)AGGraphGetAttributeGraph();
    v66 = AGGraphGetCounter();

    v34 = MEMORY[0x24BEE1ED8];
    *(_QWORD *)(v31 + 56) = MEMORY[0x24BEE1E88];
    *(_QWORD *)(v31 + 64) = v34;
    *(_QWORD *)(v31 + 32) = v66;
    v35 = AGGraphGetCurrentAttribute();
    if (v35 == v67)
      goto LABEL_70;
    v36 = MEMORY[0x24BEE4558];
    *(_QWORD *)(v31 + 96) = MEMORY[0x24BEE44F0];
    *(_QWORD *)(v31 + 104) = v36;
    *(_DWORD *)(v31 + 72) = v35;
    *(_QWORD *)(v31 + 136) = MEMORY[0x24BEE0D00];
    *(_QWORD *)(v31 + 144) = lazy protocol witness table accessor for type String and conformance String();
    *(_QWORD *)(v31 + 112) = 0x65736E4965676445;
    *(_QWORD *)(v31 + 120) = 0xEA00000000007374;
    os_signpost(_:dso:log:name:signpostID:_:_:)();
    swift_release_n();
    v15 = v69;
    (*(void (**)(char *, uint64_t))(v69 + 8))(v17, v14);
    swift_bridgeObjectRelease();
LABEL_34:
    if (*(_QWORD *)(a4 + 56))
      goto LABEL_35;
    goto LABEL_64;
  }
  __break(1u);
LABEL_70:
  __break(1u);
LABEL_71:
  __break(1u);
LABEL_72:
  __break(1u);
}

{
  specialized AnimatableAttributeHelper.update(value:defaultAnimation:environment:sampleCollector:)(a1, a2, a3, a4, (void (*)(void))specialized AnimatableAttributeHelper.reset(), 0x6769724F77656956, 0xEA00000000006E69);
}

{
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  double v17;
  double *Value;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  int v26;
  void *v27;
  id v28;
  uint64_t v29;
  int v30;
  id v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  float64_t v35;
  uint64_t v36;
  void *v37;
  id v38;
  uint64_t v39;
  int CurrentAttribute;
  id v41;
  uint64_t Counter;
  uint64_t v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  double v47;
  uint64_t v48;
  unsigned __int8 v49;
  void (*v50)(uint64_t *, unint64_t, double);
  void *v51;
  float64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  void *v57;
  id v58;
  uint64_t v59;
  int v60;
  id v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  int v67;
  uint64_t v68;
  unsigned __int8 v69;
  uint64_t v70;
  char v71;
  float64x2_t v72;
  uint64_t v73;

  v13 = type metadata accessor for OSSignpostID();
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x24BDAC7A8](v13);
  v16 = (char *)&v65 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for infinity != -1)
    swift_once();
  v17 = -*(double *)&static Time.infinity;
  if (*(_QWORD *)(a4 + 48))
  {
    Value = (double *)AGGraphGetValue();
    if ((v19 & 1) != 0)
      v17 = *Value;
  }
  if (*(_DWORD *)(a4 + 56) != *(_DWORD *)AGGraphGetValue() >> 1)
  {
    specialized AnimatableAttributeHelper.reset()();
    *(_BYTE *)(a1 + 40) = 1;
LABEL_11:
    v7 = *(double *)a1;
    v8 = *(double *)(a1 + 16);
    v9 = *(double *)(a1 + 32);
    if ((*(_BYTE *)(a4 + 40) & 1) != 0)
      goto LABEL_36;
    v5 = *(double *)(a4 + 24);
    v4 = *(double *)(a4 + 32);
    v6 = *(double *)(a4 + 16);
    if (v7 == v6 && v8 == v5 && v9 == v4)
      goto LABEL_36;
    AGGraphClearUpdate();
    AGGraphGetValue();
    swift_retain();
    AGGraphSetUpdate();
    v21 = swift_retain();
    v22 = specialized find<A>(_:key:)(v21);
    if (v22)
    {
      v23 = *(_QWORD *)(v22 + 72);
      swift_retain();
      swift_release();
      if (v23)
        goto LABEL_24;
    }
    else
    {
      swift_release();
    }
    v24 = swift_retain();
    v25 = specialized closure #1 in PropertyList.subscript.getter(v24);
    swift_release();
    if ((v25 & 1) == 0)
    {
      if (!a2)
        goto LABEL_35;
      swift_retain();
      v23 = a2;
      goto LABEL_24;
    }
    if (one-time initialization token for velocityTracking != -1)
      goto LABEL_67;
    goto LABEL_21;
  }
  if (*(_BYTE *)(a1 + 40) == 1)
    goto LABEL_11;
  v20 = *(_QWORD *)(a4 + 48);
  if (!v20)
    return;
  while (1)
  {
    v35 = *(double *)(a1 + 16);
    v36 = *(_QWORD *)(a1 + 32);
    v72.f64[0] = *(float64_t *)a1;
    v72.f64[1] = v35;
    v73 = v36;
    swift_retain();
    v71 = 0;
    if ((specialized AnimatorState.update(_:at:environment:)(&v72, v17) & 1) == 0)
    {
      if (one-time initialization token for shared != -1)
        swift_once();
      swift_beginAccess();
      v47 = *(double *)(v20 + 64);
      v70 = *(_QWORD *)(v20 + 72);
      v48 = *(unsigned int *)(v20 + 104);
      v49 = *(_BYTE *)(v20 + 108);
      v50 = *(void (**)(uint64_t *, unint64_t, double))((*MEMORY[0x24BEE4EA0] & *(_QWORD *)static CoreGlue.shared)
                                                                       + 0x58);
      v51 = static CoreGlue.shared;
      v69 = v49;
      v50(&v70, v48 | ((unint64_t)v49 << 32), v47);
      swift_release();

      goto LABEL_52;
    }
    swift_retain();
    static os_signpost_type_t.end.getter();
    static os_signpost_type_t.event.getter();
    if ((kdebug_is_enabled() & 1) == 0)
      goto LABEL_49;
    if (one-time initialization token for _signpostLog != -1)
      swift_once();
    v37 = (void *)_signpostLog;
    if ((OS_os_log.signpostsEnabled.getter() & 1) == 0)
    {
LABEL_49:
      v46 = swift_release();
      if (*(_QWORD *)(a4 + 48))
      {
LABEL_50:
        specialized AnimatorState.removeListeners()(v46);
        swift_release();
      }
LABEL_51:
      swift_release();
      *(_QWORD *)(a4 + 48) = 0;
LABEL_52:
      v52 = v72.f64[1];
      v53 = v73;
      *(float64_t *)a1 = v72.f64[0];
      *(float64_t *)(a1 + 16) = v52;
      *(_QWORD *)(a1 + 32) = v53;
      *(_BYTE *)(a1 + 40) = 1;
      return;
    }
    v68 = v14;
    swift_retain();
    v38 = v37;
    OSSignpostID.init(log:object:)();
    type metadata accessor for _ContiguousArrayStorage<CVarArg>();
    v39 = swift_allocObject();
    *(_OWORD *)(v39 + 16) = xmmword_235283260;
    CurrentAttribute = AGGraphGetCurrentAttribute();
    v14 = *MEMORY[0x24BE096C0];
    if (CurrentAttribute == (_DWORD)v14)
    {
      __break(1u);
    }
    else
    {
      v41 = (id)AGGraphGetAttributeGraph();
      Counter = AGGraphGetCounter();

      v43 = MEMORY[0x24BEE1ED8];
      *(_QWORD *)(v39 + 56) = MEMORY[0x24BEE1E88];
      *(_QWORD *)(v39 + 64) = v43;
      *(_QWORD *)(v39 + 32) = Counter;
      v44 = AGGraphGetCurrentAttribute();
      if (v44 != (_DWORD)v14)
      {
        v45 = MEMORY[0x24BEE4558];
        *(_QWORD *)(v39 + 96) = MEMORY[0x24BEE44F0];
        *(_QWORD *)(v39 + 104) = v45;
        *(_DWORD *)(v39 + 72) = v44;
        *(_QWORD *)(v39 + 136) = MEMORY[0x24BEE0D00];
        *(_QWORD *)(v39 + 144) = lazy protocol witness table accessor for type String and conformance String();
        *(_QWORD *)(v39 + 112) = 0x7453656B6F727453;
        *(_QWORD *)(v39 + 120) = 0xEB00000000656C79;
        os_signpost(_:dso:log:name:signpostID:_:_:)();
        swift_release();
        (*(void (**)(char *, uint64_t))(v68 + 8))(v16, v13);
        v46 = swift_bridgeObjectRelease();
        if (*(_QWORD *)(a4 + 48))
          goto LABEL_50;
        goto LABEL_51;
      }
    }
    __break(1u);
LABEL_67:
    swift_once();
LABEL_21:
    v23 = static Animation.velocityTracking;
    swift_retain();
LABEL_24:
    v6 = v7 - v6;
    v5 = v8 - v5;
    v4 = v9 - v4;
    v17 = *(double *)AGGraphGetValue();
    if (*(_QWORD *)(a4 + 48))
      break;
    type metadata accessor for CombinedAnimationState<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>>.Entry(0, &lazy cache variable for type metadata for AnimatorState<AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>>, type metadata accessor for AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>, lazy protocol witness table accessor for type AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>> and conformance AnimatablePair<A, B>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatorState);
    swift_allocObject();
    swift_retain();
    v54 = swift_retain();
    v55 = specialized AnimatorState.init(animation:interval:at:in:)(v54, v6, v5, v4, v17);
    swift_retain();
    v56 = static os_signpost_type_t.begin.getter();
    static os_signpost_type_t.event.getter();
    if ((kdebug_is_enabled() & 1) == 0)
      goto LABEL_61;
    v67 = v56;
    if (one-time initialization token for _signpostLog != -1)
      swift_once();
    v57 = (void *)_signpostLog;
    if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
    {
      v68 = v14;
      swift_retain();
      v58 = v57;
      OSSignpostID.init(log:object:)();
      type metadata accessor for _ContiguousArrayStorage<CVarArg>();
      v59 = swift_allocObject();
      *(_OWORD *)(v59 + 16) = xmmword_235283260;
      v60 = AGGraphGetCurrentAttribute();
      v66 = *MEMORY[0x24BE096C0];
      if (v60 == v66)
        goto LABEL_70;
      v61 = (id)AGGraphGetAttributeGraph();
      v65 = AGGraphGetCounter();

      v62 = MEMORY[0x24BEE1ED8];
      *(_QWORD *)(v59 + 56) = MEMORY[0x24BEE1E88];
      *(_QWORD *)(v59 + 64) = v62;
      *(_QWORD *)(v59 + 32) = v65;
      v63 = AGGraphGetCurrentAttribute();
      if (v63 == v66)
        goto LABEL_71;
      v64 = MEMORY[0x24BEE4558];
      *(_QWORD *)(v59 + 96) = MEMORY[0x24BEE44F0];
      *(_QWORD *)(v59 + 104) = v64;
      *(_DWORD *)(v59 + 72) = v63;
      *(_QWORD *)(v59 + 136) = MEMORY[0x24BEE0D00];
      *(_QWORD *)(v59 + 144) = lazy protocol witness table accessor for type String and conformance String();
      *(_QWORD *)(v59 + 112) = 0x7453656B6F727453;
      *(_QWORD *)(v59 + 120) = 0xEB00000000656C79;
      os_signpost(_:dso:log:name:signpostID:_:_:)();
      swift_release();
      v14 = v68;
      (*(void (**)(char *, uint64_t))(v68 + 8))(v16, v13);
      swift_bridgeObjectRelease();
    }
    else
    {
LABEL_61:
      swift_release();
    }
    swift_release();
    *(_QWORD *)(a4 + 48) = v55;
    if (v55)
    {
LABEL_34:
      swift_retain();
      specialized AnimatorState.addListeners(transaction:)();
      swift_release();
      swift_release();
      goto LABEL_35;
    }
LABEL_63:
    __break(1u);
LABEL_35:
    swift_release();
LABEL_36:
    *(double *)(a4 + 16) = v7;
    *(double *)(a4 + 24) = v8;
    *(double *)(a4 + 32) = v9;
    *(_BYTE *)(a4 + 40) = 0;
    v20 = *(_QWORD *)(a4 + 48);
    if (!v20)
      return;
  }
  swift_retain();
  LOBYTE(v72.f64[0]) = 0;
  specialized AnimatorState.combine(newAnimation:newInterval:at:in:environment:)(v23, v6, v5, v4, v17);
  swift_retain();
  v26 = static os_signpost_type_t.event.getter();
  static os_signpost_type_t.event.getter();
  if ((kdebug_is_enabled() & 1) == 0)
    goto LABEL_32;
  v67 = v26;
  if (one-time initialization token for _signpostLog != -1)
    swift_once();
  v27 = (void *)_signpostLog;
  if ((OS_os_log.signpostsEnabled.getter() & 1) == 0)
  {
LABEL_32:
    swift_release_n();
    goto LABEL_33;
  }
  v68 = v14;
  swift_retain();
  v28 = v27;
  OSSignpostID.init(log:object:)();
  type metadata accessor for _ContiguousArrayStorage<CVarArg>();
  v29 = swift_allocObject();
  *(_OWORD *)(v29 + 16) = xmmword_235283260;
  v30 = AGGraphGetCurrentAttribute();
  v66 = *MEMORY[0x24BE096C0];
  if (v30 != v66)
  {
    v31 = (id)AGGraphGetAttributeGraph();
    v65 = AGGraphGetCounter();

    v32 = MEMORY[0x24BEE1ED8];
    *(_QWORD *)(v29 + 56) = MEMORY[0x24BEE1E88];
    *(_QWORD *)(v29 + 64) = v32;
    *(_QWORD *)(v29 + 32) = v65;
    v33 = AGGraphGetCurrentAttribute();
    if (v33 == v66)
      goto LABEL_69;
    v34 = MEMORY[0x24BEE4558];
    *(_QWORD *)(v29 + 96) = MEMORY[0x24BEE44F0];
    *(_QWORD *)(v29 + 104) = v34;
    *(_DWORD *)(v29 + 72) = v33;
    *(_QWORD *)(v29 + 136) = MEMORY[0x24BEE0D00];
    *(_QWORD *)(v29 + 144) = lazy protocol witness table accessor for type String and conformance String();
    *(_QWORD *)(v29 + 112) = 0x7453656B6F727453;
    *(_QWORD *)(v29 + 120) = 0xEB00000000656C79;
    os_signpost(_:dso:log:name:signpostID:_:_:)();
    swift_release_n();
    v14 = v68;
    (*(void (**)(char *, uint64_t))(v68 + 8))(v16, v13);
    swift_bridgeObjectRelease();
LABEL_33:
    if (*(_QWORD *)(a4 + 48))
      goto LABEL_34;
    goto LABEL_63;
  }
  __break(1u);
LABEL_69:
  __break(1u);
LABEL_70:
  __break(1u);
LABEL_71:
  __break(1u);
}

{
  double v4;
  double v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  double v13;
  double *Value;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  int v22;
  void *v23;
  id v24;
  uint64_t v25;
  int v26;
  id v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  void *v31;
  id v32;
  uint64_t v33;
  int CurrentAttribute;
  id v35;
  uint64_t Counter;
  uint64_t v37;
  int v38;
  uint64_t v39;
  double v40;
  uint64_t v41;
  unsigned __int8 v42;
  void (*v43)(uint64_t *, unint64_t, double);
  void *v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  void *v48;
  id v49;
  uint64_t v50;
  int v51;
  id v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  int v59;
  uint64_t v60;
  unsigned __int8 v61;
  uint64_t v62;
  char v63;
  double v64;

  v9 = type metadata accessor for OSSignpostID();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v56 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for infinity != -1)
    swift_once();
  v13 = -*(double *)&static Time.infinity;
  if (*(_QWORD *)(a4 + 32))
  {
    Value = (double *)AGGraphGetValue();
    if ((v15 & 1) != 0)
      v13 = *Value;
  }
  if (*(_DWORD *)(a4 + 40) != *(_DWORD *)AGGraphGetValue() >> 1)
  {
    specialized AnimatableAttributeHelper.reset()();
    *(_BYTE *)(a1 + 9) = 1;
LABEL_11:
    v5 = *(double *)a1;
    if ((*(_BYTE *)(a4 + 24) & 1) != 0)
      goto LABEL_34;
    v4 = *(double *)(a4 + 16);
    if (v5 == v4)
      goto LABEL_34;
    AGGraphClearUpdate();
    AGGraphGetValue();
    swift_retain();
    AGGraphSetUpdate();
    v17 = swift_retain();
    v18 = specialized find<A>(_:key:)(v17);
    if (v18)
    {
      v19 = *(_QWORD *)(v18 + 72);
      swift_retain();
      swift_release();
      if (v19)
        goto LABEL_22;
    }
    else
    {
      swift_release();
    }
    v20 = swift_retain();
    v21 = specialized closure #1 in PropertyList.subscript.getter(v20);
    swift_release();
    if ((v21 & 1) == 0)
    {
      if (!a2)
        goto LABEL_33;
      swift_retain();
      v19 = a2;
      goto LABEL_22;
    }
    if (one-time initialization token for velocityTracking != -1)
      goto LABEL_65;
    goto LABEL_19;
  }
  if (*(_BYTE *)(a1 + 9) == 1)
    goto LABEL_11;
  v16 = *(_QWORD *)(a4 + 32);
  if (!v16)
    return;
  while (1)
  {
    v64 = *(double *)a1;
    swift_retain();
    v63 = 0;
    if ((specialized AnimatorState.update(_:at:environment:)(&v64, v13) & 1) == 0)
    {
      if (one-time initialization token for shared != -1)
        swift_once();
      swift_beginAccess();
      v40 = *(double *)(v16 + 48);
      v62 = *(_QWORD *)(v16 + 56);
      v41 = *(unsigned int *)(v16 + 72);
      v42 = *(_BYTE *)(v16 + 76);
      v43 = *(void (**)(uint64_t *, unint64_t, double))((*MEMORY[0x24BEE4EA0] & *(_QWORD *)static CoreGlue.shared)
                                                                       + 0x58);
      v44 = static CoreGlue.shared;
      v61 = v42;
      v43(&v62, v41 | ((unint64_t)v42 << 32), v40);
      swift_release();

      goto LABEL_50;
    }
    swift_retain();
    static os_signpost_type_t.end.getter();
    static os_signpost_type_t.event.getter();
    if ((kdebug_is_enabled() & 1) == 0)
      goto LABEL_47;
    if (one-time initialization token for _signpostLog != -1)
      swift_once();
    v31 = (void *)_signpostLog;
    if ((OS_os_log.signpostsEnabled.getter() & 1) == 0)
    {
LABEL_47:
      swift_release();
      if (*(_QWORD *)(a4 + 32))
      {
LABEL_48:
        specialized AnimatorState.removeListeners()();
        swift_release();
      }
LABEL_49:
      swift_release();
      *(_QWORD *)(a4 + 32) = 0;
LABEL_50:
      *(double *)a1 = v64;
      *(_BYTE *)(a1 + 9) = 1;
      return;
    }
    v60 = v10;
    swift_retain();
    v32 = v31;
    OSSignpostID.init(log:object:)();
    type metadata accessor for _ContiguousArrayStorage<CVarArg>();
    v33 = swift_allocObject();
    *(_OWORD *)(v33 + 16) = xmmword_235283260;
    CurrentAttribute = AGGraphGetCurrentAttribute();
    v10 = *MEMORY[0x24BE096C0];
    if (CurrentAttribute == (_DWORD)v10)
    {
      __break(1u);
    }
    else
    {
      v35 = (id)AGGraphGetAttributeGraph();
      Counter = AGGraphGetCounter();

      v37 = MEMORY[0x24BEE1ED8];
      *(_QWORD *)(v33 + 56) = MEMORY[0x24BEE1E88];
      *(_QWORD *)(v33 + 64) = v37;
      *(_QWORD *)(v33 + 32) = Counter;
      v38 = AGGraphGetCurrentAttribute();
      if (v38 != (_DWORD)v10)
      {
        v39 = MEMORY[0x24BEE4558];
        *(_QWORD *)(v33 + 96) = MEMORY[0x24BEE44F0];
        *(_QWORD *)(v33 + 104) = v39;
        *(_DWORD *)(v33 + 72) = v38;
        *(_QWORD *)(v33 + 136) = MEMORY[0x24BEE0D00];
        *(_QWORD *)(v33 + 144) = lazy protocol witness table accessor for type String and conformance String();
        *(_QWORD *)(v33 + 112) = 0x66664572756C425FLL;
        *(_QWORD *)(v33 + 120) = 0xEB00000000746365;
        os_signpost(_:dso:log:name:signpostID:_:_:)();
        swift_release();
        (*(void (**)(char *, uint64_t))(v60 + 8))(v12, v9);
        swift_bridgeObjectRelease();
        if (*(_QWORD *)(a4 + 32))
          goto LABEL_48;
        goto LABEL_49;
      }
    }
    __break(1u);
LABEL_65:
    swift_once();
LABEL_19:
    v19 = static Animation.velocityTracking;
    swift_retain();
LABEL_22:
    v4 = v5 - v4;
    v13 = *(double *)AGGraphGetValue();
    if (*(_QWORD *)(a4 + 32))
      break;
    type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for AnimatorState<CGFloat>, (uint64_t (*)(void))lazy protocol witness table accessor for type CGFloat and conformance CGFloat, MEMORY[0x24BEE50B0], (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatorState);
    swift_allocObject();
    swift_retain();
    v45 = swift_retain();
    v46 = specialized AnimatorState.init(animation:interval:at:in:)(v45, v4, v13);
    swift_retain();
    v47 = static os_signpost_type_t.begin.getter();
    static os_signpost_type_t.event.getter();
    if ((kdebug_is_enabled() & 1) == 0)
      goto LABEL_59;
    v59 = v47;
    if (one-time initialization token for _signpostLog != -1)
      swift_once();
    v48 = (void *)_signpostLog;
    if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
    {
      v60 = v19;
      swift_retain();
      v49 = v48;
      OSSignpostID.init(log:object:)();
      type metadata accessor for _ContiguousArrayStorage<CVarArg>();
      v50 = swift_allocObject();
      *(_OWORD *)(v50 + 16) = xmmword_235283260;
      v51 = AGGraphGetCurrentAttribute();
      v58 = *MEMORY[0x24BE096C0];
      if (v51 == v58)
        goto LABEL_68;
      v52 = (id)AGGraphGetAttributeGraph();
      v57 = AGGraphGetCounter();

      v53 = MEMORY[0x24BEE1ED8];
      *(_QWORD *)(v50 + 56) = MEMORY[0x24BEE1E88];
      *(_QWORD *)(v50 + 64) = v53;
      *(_QWORD *)(v50 + 32) = v57;
      v54 = AGGraphGetCurrentAttribute();
      if (v54 == v58)
        goto LABEL_69;
      v55 = MEMORY[0x24BEE4558];
      *(_QWORD *)(v50 + 96) = MEMORY[0x24BEE44F0];
      *(_QWORD *)(v50 + 104) = v55;
      *(_DWORD *)(v50 + 72) = v54;
      *(_QWORD *)(v50 + 136) = MEMORY[0x24BEE0D00];
      *(_QWORD *)(v50 + 144) = lazy protocol witness table accessor for type String and conformance String();
      *(_QWORD *)(v50 + 112) = 0x66664572756C425FLL;
      *(_QWORD *)(v50 + 120) = 0xEB00000000746365;
      os_signpost(_:dso:log:name:signpostID:_:_:)();
      swift_release();
      (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
      swift_bridgeObjectRelease();
    }
    else
    {
LABEL_59:
      swift_release();
    }
    swift_release();
    *(_QWORD *)(a4 + 32) = v46;
    if (v46)
    {
LABEL_32:
      swift_retain();
      specialized AnimatorState.addListeners(transaction:)();
      swift_release();
      swift_release();
      goto LABEL_33;
    }
LABEL_61:
    __break(1u);
LABEL_33:
    swift_release();
LABEL_34:
    *(double *)(a4 + 16) = v5;
    *(_BYTE *)(a4 + 24) = 0;
    v16 = *(_QWORD *)(a4 + 32);
    if (!v16)
      return;
  }
  swift_retain();
  v63 = 0;
  specialized AnimatorState.combine(newAnimation:newInterval:at:in:environment:)(v19, v4, v13);
  swift_retain();
  v22 = static os_signpost_type_t.event.getter();
  static os_signpost_type_t.event.getter();
  if ((kdebug_is_enabled() & 1) == 0)
    goto LABEL_30;
  v59 = v22;
  if (one-time initialization token for _signpostLog != -1)
    swift_once();
  v23 = (void *)_signpostLog;
  if ((OS_os_log.signpostsEnabled.getter() & 1) == 0)
  {
LABEL_30:
    swift_release_n();
    goto LABEL_31;
  }
  v60 = v19;
  swift_retain();
  v24 = v23;
  OSSignpostID.init(log:object:)();
  type metadata accessor for _ContiguousArrayStorage<CVarArg>();
  v25 = swift_allocObject();
  *(_OWORD *)(v25 + 16) = xmmword_235283260;
  v26 = AGGraphGetCurrentAttribute();
  v58 = *MEMORY[0x24BE096C0];
  if (v26 != v58)
  {
    v27 = (id)AGGraphGetAttributeGraph();
    v57 = AGGraphGetCounter();

    v28 = MEMORY[0x24BEE1ED8];
    *(_QWORD *)(v25 + 56) = MEMORY[0x24BEE1E88];
    *(_QWORD *)(v25 + 64) = v28;
    *(_QWORD *)(v25 + 32) = v57;
    v29 = AGGraphGetCurrentAttribute();
    if (v29 == v58)
      goto LABEL_67;
    v30 = MEMORY[0x24BEE4558];
    *(_QWORD *)(v25 + 96) = MEMORY[0x24BEE44F0];
    *(_QWORD *)(v25 + 104) = v30;
    *(_DWORD *)(v25 + 72) = v29;
    *(_QWORD *)(v25 + 136) = MEMORY[0x24BEE0D00];
    *(_QWORD *)(v25 + 144) = lazy protocol witness table accessor for type String and conformance String();
    *(_QWORD *)(v25 + 112) = 0x66664572756C425FLL;
    *(_QWORD *)(v25 + 120) = 0xEB00000000746365;
    os_signpost(_:dso:log:name:signpostID:_:_:)();
    swift_release_n();
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
    swift_bridgeObjectRelease();
LABEL_31:
    if (*(_QWORD *)(a4 + 32))
      goto LABEL_32;
    goto LABEL_61;
  }
  __break(1u);
LABEL_67:
  __break(1u);
LABEL_68:
  __break(1u);
LABEL_69:
  __break(1u);
}

{
  specialized AnimatableAttributeHelper.update(value:defaultAnimation:environment:sampleCollector:)(a1, a2, a3, a4, (void (*)(void))specialized AnimatableAttributeHelper.reset(), 0x4574657366664F5FLL, 0xED00007463656666);
}

{
  double v4;
  double v5;
  uint64_t v6;
  double v7;
  uint64_t v11;
  uint64_t Counter;
  uint64_t v13;
  char *v14;
  double v15;
  double *Value;
  char v17;
  double *v18;
  double *v19;
  float v20;
  float v21;
  float v22;
  int8x16_t v23;
  int8x16_t v24;
  float v25;
  float v26;
  float v27;
  float v28;
  double v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  double v37;
  float v38;
  float v39;
  float v40;
  float v41;
  double v42;
  double v43;
  double v44;
  uint64_t v45;
  int v46;
  void *v47;
  char v48;
  id v49;
  uint64_t v50;
  int v51;
  id v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  void *v58;
  char v59;
  id v60;
  uint64_t v61;
  int v62;
  id v63;
  uint64_t v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  int8x16_t v68;
  float32x4_t v69;
  float32x4_t v70;
  void *v71;
  id v72;
  uint64_t v73;
  int CurrentAttribute;
  int v75;
  id v76;
  uint64_t v77;
  int v78;
  uint64_t v79;
  uint64_t v80;
  double v81;
  uint64_t v82;
  unsigned __int8 v83;
  void (*v84)(float32x4_t *, unint64_t, double);
  void *v85;
  double v86;
  float32x4_t v87;
  float32x4_t v88;
  __int32 v89;
  __int32 v90;
  __int32 v91;
  __int32 v92;
  uint64_t v93;
  __int32 v94;
  __int32 v95;
  __int32 v96;
  uint64_t v97;
  uint64_t v98;
  int v99;
  int v100;
  uint64_t v101;
  float v102;
  float v103;
  float v104;
  float v105;
  uint64_t v106;
  double v107;
  float32x4_t v108;
  int8x16_t v109;
  float32x4_t v110;
  char v111;
  char v112;
  float32x4_t v113;
  int8x16_t v114;
  double v115;
  float v116;
  float v117;
  float v118;
  float v119;
  double v120;
  double v121;
  double v122;

  v11 = type metadata accessor for OSSignpostID();
  Counter = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v11);
  v14 = (char *)&v97 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for infinity == -1)
    goto LABEL_2;
LABEL_83:
  swift_once();
LABEL_2:
  v15 = -*(double *)&static Time.infinity;
  if (*(_QWORD *)(a4 + 64))
  {
    Value = (double *)AGGraphGetValue();
    if ((v17 & 1) != 0)
      v15 = *Value;
  }
  v18 = (double *)&unk_254266000;
  if (*(_DWORD *)(a4 + 72) == *(_DWORD *)AGGraphGetValue() >> 1)
  {
    if (*(_BYTE *)(a1 + 45) != 1)
    {
      v19 = (double *)&unk_254266000;
      v18 = *(double **)(a4 + 64);
      if (v18)
        goto LABEL_54;
      return;
    }
  }
  else
  {
    specialized AnimatableAttributeHelper.reset()();
    *(_BYTE *)(a1 + 45) = 1;
  }
  v20 = *(float *)a1;
  v21 = *(float *)(a1 + 4);
  v22 = *(float *)(a1 + 8);
  LODWORD(v4) = *(_DWORD *)(a1 + 12);
  v5 = *(double *)(a1 + 16);
  v6 = *(_QWORD *)(a1 + 24);
  v7 = *(double *)(a1 + 32);
  if (one-time initialization token for legacyInterpolation != -1)
    swift_once();
  swift_beginAccess();
  if ((static Color.Resolved.legacyInterpolation & 1) == 0)
  {
    v113.i8[0] = 2;
    *(float *)v23.i32 = v20;
    ResolvedGradient.ColorSpace.convertIn(_:)(&v116, v23, v21, LODWORD(v22), *(float *)&v4, v24);
    v20 = v116;
    v21 = v117;
    v22 = v118;
    *(float *)&v4 = v119;
  }
  v25 = v20 * 128.0;
  v26 = v21 * 128.0;
  v27 = v22 * 128.0;
  v28 = *(float *)&v4 * 128.0;
  if ((*(_BYTE *)(a4 + 56) & 1) == 0)
  {
    v107 = v7;
    v108.i64[0] = v6;
    *(double *)v109.i64 = v5;
    v4 = *(double *)(a4 + 40);
    v29 = *(double *)(a4 + 48);
    v5 = *(double *)(a4 + 32);
    LODWORD(v30) = *(_DWORD *)(a4 + 16);
    LODWORD(v31) = *(_DWORD *)(a4 + 20);
    LODWORD(v7) = *(_DWORD *)(a4 + 24);
    LODWORD(v6) = *(_DWORD *)(a4 + 28);
    if (v25 == *(float *)&v30
      && v26 == *(float *)&v31
      && v27 == *(float *)&v7
      && v28 == *(float *)&v6
      && *(double *)v109.i64 == v5
      && *(double *)v108.i64 == v4
      && v107 == v29)
    {
      v5 = *(double *)v109.i64;
      v6 = v108.i64[0];
      v7 = v107;
      goto LABEL_53;
    }
    v102 = v25;
    v103 = v26;
    v104 = v27;
    v105 = v28;
    v106 = Counter;
    AGGraphClearUpdate();
    Counter = *(_QWORD *)AGGraphGetValue();
    swift_retain();
    AGGraphSetUpdate();
    v32 = swift_retain();
    v33 = specialized find<A>(_:key:)(v32);
    if (v33)
    {
      v34 = *(_QWORD *)(v33 + 72);
      swift_retain();
      swift_release();
      if (v34)
        goto LABEL_32;
    }
    else
    {
      swift_release();
    }
    v35 = swift_retain();
    v36 = specialized closure #1 in PropertyList.subscript.getter(v35);
    swift_release();
    if ((v36 & 1) != 0)
    {
      v18 = (double *)&unk_254266000;
      if (one-time initialization token for velocityTracking != -1)
        goto LABEL_86;
      goto LABEL_29;
    }
    v18 = (double *)&unk_254266000;
    if (a2)
    {
      swift_retain();
      v34 = a2;
      goto LABEL_32;
    }
    swift_release();
    Counter = v106;
    v5 = *(double *)v109.i64;
    v6 = v108.i64[0];
    v7 = v107;
    goto LABEL_52;
  }
  while (1)
  {
LABEL_53:
    v19 = v18;
    *(_QWORD *)(a4 + 16) = LODWORD(v25) | ((unint64_t)LODWORD(v26) << 32);
    *(_QWORD *)(a4 + 24) = LODWORD(v27) | ((unint64_t)LODWORD(v28) << 32);
    *(double *)(a4 + 32) = v5;
    *(_QWORD *)(a4 + 40) = v6;
    *(double *)(a4 + 48) = v7;
    *(_BYTE *)(a4 + 56) = 0;
    v18 = *(double **)(a4 + 64);
    if (!v18)
      return;
LABEL_54:
    v109 = *(int8x16_t *)a1;
    v30 = *(_QWORD *)(a1 + 16);
    v31 = *(_QWORD *)(a1 + 24);
    v29 = *(double *)(a1 + 32);
    v67 = *((_QWORD *)v19 + 183);
    swift_retain();
    if (v67 != -1)
      swift_once();
    swift_beginAccess();
    if ((static Color.Resolved.legacyInterpolation & 1) != 0)
    {
      v69 = (float32x4_t)v109;
    }
    else
    {
      v112 = 2;
      ResolvedGradient.ColorSpace.convertIn(_:)(v113.f32, v109, *(float *)&v109.i32[1], v109.u32[2], *(float *)&v109.i32[3], v68);
      v69 = v113;
    }
    v70.i64[0] = 0x4300000043000000;
    v70.i64[1] = 0x4300000043000000;
    v113 = vmulq_f32(v69, v70);
    v114.i64[0] = v30;
    v114.i64[1] = v31;
    v115 = v29;
    v112 = 0;
    if ((specialized AnimatorState.update(_:at:environment:)((uint64_t)&v113, v15) & 1) == 0)
      break;
    swift_retain();
    static os_signpost_type_t.end.getter();
    static os_signpost_type_t.event.getter();
    if ((kdebug_is_enabled() & 1) == 0)
      goto LABEL_71;
    if (one-time initialization token for _signpostLog != -1)
      swift_once();
    v71 = (void *)_signpostLog;
    if ((OS_os_log.signpostsEnabled.getter() & 1) == 0)
    {
LABEL_71:
      v80 = swift_release();
      if (!*(_QWORD *)(a4 + 64))
      {
LABEL_73:
        *(_QWORD *)(a4 + 64) = 0;
        goto LABEL_74;
      }
LABEL_72:
      specialized AnimatorState.removeListeners()(v80);
      swift_release();
      goto LABEL_73;
    }
    v106 = Counter;
    swift_retain();
    v72 = v71;
    OSSignpostID.init(log:object:)();
    type metadata accessor for _ContiguousArrayStorage<CVarArg>();
    v73 = swift_allocObject();
    *(_OWORD *)(v73 + 16) = xmmword_235283260;
    CurrentAttribute = AGGraphGetCurrentAttribute();
    v75 = *MEMORY[0x24BE096C0];
    if (CurrentAttribute == *MEMORY[0x24BE096C0])
    {
      __break(1u);
    }
    else
    {
      v76 = (id)AGGraphGetAttributeGraph();
      Counter = AGGraphGetCounter();

      v77 = MEMORY[0x24BEE1ED8];
      *(_QWORD *)(v73 + 56) = MEMORY[0x24BEE1E88];
      *(_QWORD *)(v73 + 64) = v77;
      *(_QWORD *)(v73 + 32) = Counter;
      v78 = AGGraphGetCurrentAttribute();
      if (v78 != v75)
      {
        v79 = MEMORY[0x24BEE4558];
        *(_QWORD *)(v73 + 96) = MEMORY[0x24BEE44F0];
        *(_QWORD *)(v73 + 104) = v79;
        *(_DWORD *)(v73 + 72) = v78;
        *(_QWORD *)(v73 + 136) = MEMORY[0x24BEE0D00];
        *(_QWORD *)(v73 + 144) = lazy protocol witness table accessor for type String and conformance String();
        *(_QWORD *)(v73 + 112) = 0x65766C6F7365525FLL;
        *(_QWORD *)(v73 + 120) = 0xE900000000000064;
        os_signpost(_:dso:log:name:signpostID:_:_:)();
        swift_release();
        (*(void (**)(char *, uint64_t))(v106 + 8))(v14, v11);
        v80 = swift_bridgeObjectRelease();
        if (!*(_QWORD *)(a4 + 64))
          goto LABEL_73;
        goto LABEL_72;
      }
    }
    __break(1u);
LABEL_86:
    swift_once();
LABEL_29:
    v34 = static Animation.velocityTracking;
    swift_retain();
LABEL_32:
    v37 = v29;
    v38 = v102 - *(float *)&v30;
    v39 = v103 - *(float *)&v31;
    v40 = v104 - *(float *)&v7;
    v41 = v105 - *(float *)&v6;
    v42 = *(double *)v109.i64 - v5;
    v43 = *(double *)v108.i64 - v4;
    v44 = v107 - v37;
    v4 = *(double *)AGGraphGetValue();
    v45 = *(_QWORD *)(a4 + 64);
    v101 = v34;
    if (v45)
    {
      v116 = v38;
      v117 = v39;
      v118 = v40;
      v119 = v41;
      v120 = v42;
      v121 = v43;
      v122 = v44;
      swift_retain();
      v113.i8[0] = 0;
      specialized AnimatorState.combine(newAnimation:newInterval:at:in:environment:)(v34, (uint64_t)&v116, v4);
      swift_retain();
      v46 = static os_signpost_type_t.event.getter();
      static os_signpost_type_t.event.getter();
      v15 = v4;
      if ((kdebug_is_enabled() & 1) != 0)
      {
        v100 = v46;
        if (one-time initialization token for _signpostLog != -1)
          swift_once();
        v47 = (void *)_signpostLog;
        v48 = OS_os_log.signpostsEnabled.getter();
        v5 = *(double *)v109.i64;
        v6 = v108.i64[0];
        v7 = v107;
        if ((v48 & 1) != 0)
        {
          swift_retain();
          v49 = v47;
          OSSignpostID.init(log:object:)();
          type metadata accessor for _ContiguousArrayStorage<CVarArg>();
          v50 = swift_allocObject();
          *(_OWORD *)(v50 + 16) = xmmword_235283260;
          v51 = AGGraphGetCurrentAttribute();
          v99 = *MEMORY[0x24BE096C0];
          if (v51 == v99)
          {
            __break(1u);
LABEL_88:
            __break(1u);
LABEL_89:
            __break(1u);
LABEL_90:
            __break(1u);
            return;
          }
          v52 = (id)AGGraphGetAttributeGraph();
          v98 = AGGraphGetCounter();

          v53 = MEMORY[0x24BEE1ED8];
          *(_QWORD *)(v50 + 56) = MEMORY[0x24BEE1E88];
          *(_QWORD *)(v50 + 64) = v53;
          *(_QWORD *)(v50 + 32) = v98;
          v54 = AGGraphGetCurrentAttribute();
          if (v54 == v99)
            goto LABEL_88;
          v55 = MEMORY[0x24BEE4558];
          *(_QWORD *)(v50 + 96) = MEMORY[0x24BEE44F0];
          *(_QWORD *)(v50 + 104) = v55;
          *(_DWORD *)(v50 + 72) = v54;
          *(_QWORD *)(v50 + 136) = MEMORY[0x24BEE0D00];
          *(_QWORD *)(v50 + 144) = lazy protocol witness table accessor for type String and conformance String();
          *(_QWORD *)(v50 + 112) = 0x65766C6F7365525FLL;
          *(_QWORD *)(v50 + 120) = 0xE900000000000064;
          os_signpost(_:dso:log:name:signpostID:_:_:)();
          swift_release_n();
          (*(void (**)(char *, uint64_t))(v106 + 8))(v14, v11);
          swift_bridgeObjectRelease();
          v18 = (double *)&unk_254266000;
        }
        else
        {
          swift_release_n();
        }
      }
      else
      {
        swift_release_n();
        v5 = *(double *)v109.i64;
        v6 = v108.i64[0];
        v7 = v107;
      }
      a2 = *(_QWORD *)(a4 + 64);
      if (!a2)
      {
LABEL_82:
        __break(1u);
        goto LABEL_83;
      }
    }
    else
    {
      v116 = v38;
      v117 = v39;
      v118 = v40;
      v119 = v41;
      v120 = v42;
      v121 = v43;
      v122 = v44;
      type metadata accessor for CombinedAnimationState<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>>.Entry(0, &lazy cache variable for type metadata for AnimatorState<AnimatablePair<AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>, AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>>>, (uint64_t (*)(uint64_t))type metadata accessor for AnimatablePair<AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>, AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>>, lazy protocol witness table accessor for type AnimatablePair<AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>, AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>> and conformance AnimatablePair<A, B>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatorState);
      swift_allocObject();
      swift_retain();
      v56 = swift_retain();
      a2 = specialized AnimatorState.init(animation:interval:at:in:)(v56, (uint64_t)&v116, v4);
      swift_retain();
      v57 = static os_signpost_type_t.begin.getter();
      static os_signpost_type_t.event.getter();
      v15 = v4;
      if ((kdebug_is_enabled() & 1) != 0)
      {
        v100 = v57;
        if (one-time initialization token for _signpostLog != -1)
          swift_once();
        v58 = (void *)_signpostLog;
        v59 = OS_os_log.signpostsEnabled.getter();
        v5 = *(double *)v109.i64;
        v6 = v108.i64[0];
        v7 = v107;
        if ((v59 & 1) != 0)
        {
          swift_retain();
          v60 = v58;
          OSSignpostID.init(log:object:)();
          type metadata accessor for _ContiguousArrayStorage<CVarArg>();
          v61 = swift_allocObject();
          *(_OWORD *)(v61 + 16) = xmmword_235283260;
          v62 = AGGraphGetCurrentAttribute();
          v99 = *MEMORY[0x24BE096C0];
          if (v62 == v99)
            goto LABEL_89;
          v63 = (id)AGGraphGetAttributeGraph();
          v98 = AGGraphGetCounter();

          v64 = MEMORY[0x24BEE1ED8];
          *(_QWORD *)(v61 + 56) = MEMORY[0x24BEE1E88];
          *(_QWORD *)(v61 + 64) = v64;
          *(_QWORD *)(v61 + 32) = v98;
          v65 = AGGraphGetCurrentAttribute();
          if (v65 == v99)
            goto LABEL_90;
          v66 = MEMORY[0x24BEE4558];
          *(_QWORD *)(v61 + 96) = MEMORY[0x24BEE44F0];
          *(_QWORD *)(v61 + 104) = v66;
          *(_DWORD *)(v61 + 72) = v65;
          *(_QWORD *)(v61 + 136) = MEMORY[0x24BEE0D00];
          *(_QWORD *)(v61 + 144) = lazy protocol witness table accessor for type String and conformance String();
          *(_QWORD *)(v61 + 112) = 0x65766C6F7365525FLL;
          *(_QWORD *)(v61 + 120) = 0xE900000000000064;
          os_signpost(_:dso:log:name:signpostID:_:_:)();
          swift_release();
          (*(void (**)(char *, uint64_t))(v106 + 8))(v14, v11);
          swift_bridgeObjectRelease();
          v18 = (double *)&unk_254266000;
        }
        else
        {
          swift_release();
        }
      }
      else
      {
        swift_release();
        v5 = *(double *)v109.i64;
        v6 = v108.i64[0];
        v7 = v107;
      }
      swift_release();
      *(_QWORD *)(a4 + 64) = a2;
      if (!a2)
        goto LABEL_82;
    }
    swift_retain();
    specialized AnimatorState.addListeners(transaction:)();
    swift_release();
    swift_release();
    swift_release();
    Counter = v106;
LABEL_52:
    v28 = v105;
    v27 = v104;
    v26 = v103;
    v25 = v102;
  }
  if (one-time initialization token for shared != -1)
    swift_once();
  swift_beginAccess();
  v81 = v18[10];
  v110.i64[0] = (uint64_t)v18[11];
  v82 = *((unsigned int *)v18 + 34);
  v83 = *((_BYTE *)v18 + 140);
  v84 = *(void (**)(float32x4_t *, unint64_t, double))((*MEMORY[0x24BEE4EA0] & *(_QWORD *)static CoreGlue.shared)
                                                                       + 0x58);
  v85 = static CoreGlue.shared;
  v111 = v83;
  v84(&v110, v82 | ((unint64_t)v83 << 32), v81);

LABEL_74:
  v109 = v114;
  v86 = v115;
  v87.i64[0] = 0x3C0000003C000000;
  v87.i64[1] = 0x3C0000003C000000;
  v88 = vmulq_f32(v113, v87);
  if (static Color.Resolved.legacyInterpolation == 1)
  {
    v108 = v88;
    swift_release();
    v90 = v108.i32[1];
    v89 = v108.i32[0];
    v92 = v108.i32[3];
    v91 = v108.i32[2];
  }
  else
  {
    v111 = 2;
    v110 = v88;
    *(float *)&v93 = ResolvedGradient.ColorSpace.convertOut(_:)(v110.f32);
    v108.i64[0] = v93;
    v90 = v94;
    v91 = v95;
    v92 = v96;
    swift_release();
    v89 = v108.i32[0];
  }
  *(_DWORD *)a1 = v89;
  *(_DWORD *)(a1 + 4) = v90;
  *(_DWORD *)(a1 + 8) = v91;
  *(_DWORD *)(a1 + 12) = v92;
  *(int8x16_t *)(a1 + 16) = v109;
  *(double *)(a1 + 32) = v86;
  *(_BYTE *)(a1 + 45) = 1;
}

{
  specialized AnimatableAttributeHelper.update(value:defaultAnimation:environment:sampleCollector:)(a1, a2, a3, a4, (void (*)(void))specialized AnimatableAttributeHelper.reset(), 0x736172746E6F435FLL, 0xEF74636566664574);
}

{
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  double v17;
  double *Value;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  int v26;
  void *v27;
  id v28;
  uint64_t v29;
  int v30;
  id v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  id v37;
  uint64_t v38;
  int CurrentAttribute;
  id v40;
  uint64_t Counter;
  uint64_t v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  double v46;
  uint64_t v47;
  unsigned __int8 v48;
  void (*v49)(uint64_t *, unint64_t, double);
  void *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  void *v55;
  id v56;
  uint64_t v57;
  int v58;
  id v59;
  uint64_t v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  int v65;
  uint64_t v66;
  unsigned __int8 v67;
  uint64_t v68;
  char v69;
  float64x2_t v70;
  uint64_t v71;

  v13 = type metadata accessor for OSSignpostID();
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x24BDAC7A8](v13);
  v16 = (char *)&v63 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for infinity != -1)
    swift_once();
  v17 = -*(double *)&static Time.infinity;
  if (*(_QWORD *)(a4 + 48))
  {
    Value = (double *)AGGraphGetValue();
    if ((v19 & 1) != 0)
      v17 = *Value;
  }
  if (*(_DWORD *)(a4 + 56) != *(_DWORD *)AGGraphGetValue() >> 1)
  {
    specialized AnimatableAttributeHelper.reset()();
    *(_BYTE *)(a1 + 32) = 1;
LABEL_11:
    v7 = *(double *)a1;
    v8 = *(double *)(a1 + 8);
    v9 = *(double *)(a1 + 24);
    if ((*(_BYTE *)(a4 + 40) & 1) != 0)
      goto LABEL_36;
    v5 = *(double *)(a4 + 24);
    v4 = *(double *)(a4 + 32);
    v6 = *(double *)(a4 + 16);
    if (v7 == v6 && v8 == v5 && v9 == v4)
      goto LABEL_36;
    AGGraphClearUpdate();
    AGGraphGetValue();
    swift_retain();
    AGGraphSetUpdate();
    v21 = swift_retain();
    v22 = specialized find<A>(_:key:)(v21);
    if (v22)
    {
      v23 = *(_QWORD *)(v22 + 72);
      swift_retain();
      swift_release();
      if (v23)
        goto LABEL_24;
    }
    else
    {
      swift_release();
    }
    v24 = swift_retain();
    v25 = specialized closure #1 in PropertyList.subscript.getter(v24);
    swift_release();
    if ((v25 & 1) == 0)
    {
      if (!a2)
        goto LABEL_35;
      swift_retain();
      v23 = a2;
      goto LABEL_24;
    }
    if (one-time initialization token for velocityTracking != -1)
      goto LABEL_67;
    goto LABEL_21;
  }
  if (*(_BYTE *)(a1 + 32) == 1)
    goto LABEL_11;
  v20 = *(_QWORD *)(a4 + 48);
  if (!v20)
    return;
  while (1)
  {
    v35 = *(_QWORD *)(a1 + 24);
    v70 = *(float64x2_t *)a1;
    v71 = v35;
    swift_retain();
    v69 = 0;
    if ((specialized AnimatorState.update(_:at:environment:)(&v70, v17) & 1) == 0)
    {
      if (one-time initialization token for shared != -1)
        swift_once();
      swift_beginAccess();
      v46 = *(double *)(v20 + 64);
      v68 = *(_QWORD *)(v20 + 72);
      v47 = *(unsigned int *)(v20 + 104);
      v48 = *(_BYTE *)(v20 + 108);
      v49 = *(void (**)(uint64_t *, unint64_t, double))((*MEMORY[0x24BEE4EA0] & *(_QWORD *)static CoreGlue.shared)
                                                                       + 0x58);
      v50 = static CoreGlue.shared;
      v67 = v48;
      v49(&v68, v47 | ((unint64_t)v48 << 32), v46);
      swift_release();

      goto LABEL_52;
    }
    swift_retain();
    static os_signpost_type_t.end.getter();
    static os_signpost_type_t.event.getter();
    if ((kdebug_is_enabled() & 1) == 0)
      goto LABEL_49;
    if (one-time initialization token for _signpostLog != -1)
      swift_once();
    v36 = (void *)_signpostLog;
    if ((OS_os_log.signpostsEnabled.getter() & 1) == 0)
    {
LABEL_49:
      v45 = swift_release();
      if (*(_QWORD *)(a4 + 48))
      {
LABEL_50:
        specialized AnimatorState.removeListeners()(v45);
        swift_release();
      }
LABEL_51:
      swift_release();
      *(_QWORD *)(a4 + 48) = 0;
LABEL_52:
      v51 = v71;
      *(float64x2_t *)a1 = v70;
      *(_QWORD *)(a1 + 24) = v51;
      *(_BYTE *)(a1 + 32) = 1;
      return;
    }
    v66 = v14;
    swift_retain();
    v37 = v36;
    OSSignpostID.init(log:object:)();
    type metadata accessor for _ContiguousArrayStorage<CVarArg>();
    v38 = swift_allocObject();
    *(_OWORD *)(v38 + 16) = xmmword_235283260;
    CurrentAttribute = AGGraphGetCurrentAttribute();
    v14 = *MEMORY[0x24BE096C0];
    if (CurrentAttribute == (_DWORD)v14)
    {
      __break(1u);
    }
    else
    {
      v40 = (id)AGGraphGetAttributeGraph();
      Counter = AGGraphGetCounter();

      v42 = MEMORY[0x24BEE1ED8];
      *(_QWORD *)(v38 + 56) = MEMORY[0x24BEE1E88];
      *(_QWORD *)(v38 + 64) = v42;
      *(_QWORD *)(v38 + 32) = Counter;
      v43 = AGGraphGetCurrentAttribute();
      if (v43 != (_DWORD)v14)
      {
        v44 = MEMORY[0x24BEE4558];
        *(_QWORD *)(v38 + 96) = MEMORY[0x24BEE44F0];
        *(_QWORD *)(v38 + 104) = v44;
        *(_DWORD *)(v38 + 72) = v43;
        *(_QWORD *)(v38 + 136) = MEMORY[0x24BEE0D00];
        *(_QWORD *)(v38 + 144) = lazy protocol witness table accessor for type String and conformance String();
        *(_QWORD *)(v38 + 112) = 0x7465736E495FLL;
        *(_QWORD *)(v38 + 120) = 0xE600000000000000;
        os_signpost(_:dso:log:name:signpostID:_:_:)();
        swift_release();
        (*(void (**)(char *, uint64_t))(v66 + 8))(v16, v13);
        v45 = swift_bridgeObjectRelease();
        if (*(_QWORD *)(a4 + 48))
          goto LABEL_50;
        goto LABEL_51;
      }
    }
    __break(1u);
LABEL_67:
    swift_once();
LABEL_21:
    v23 = static Animation.velocityTracking;
    swift_retain();
LABEL_24:
    v6 = v7 - v6;
    v5 = v8 - v5;
    v4 = v9 - v4;
    v17 = *(double *)AGGraphGetValue();
    if (*(_QWORD *)(a4 + 48))
      break;
    type metadata accessor for AnimatorState<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, CGFloat>>(0);
    swift_allocObject();
    swift_retain();
    v52 = swift_retain();
    v53 = specialized AnimatorState.init(animation:interval:at:in:)(v52, v6, v5, v4, v17);
    swift_retain();
    v54 = static os_signpost_type_t.begin.getter();
    static os_signpost_type_t.event.getter();
    if ((kdebug_is_enabled() & 1) == 0)
      goto LABEL_61;
    v65 = v54;
    if (one-time initialization token for _signpostLog != -1)
      swift_once();
    v55 = (void *)_signpostLog;
    if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
    {
      v66 = v14;
      swift_retain();
      v56 = v55;
      OSSignpostID.init(log:object:)();
      type metadata accessor for _ContiguousArrayStorage<CVarArg>();
      v57 = swift_allocObject();
      *(_OWORD *)(v57 + 16) = xmmword_235283260;
      v58 = AGGraphGetCurrentAttribute();
      v64 = *MEMORY[0x24BE096C0];
      if (v58 == v64)
        goto LABEL_70;
      v59 = (id)AGGraphGetAttributeGraph();
      v63 = AGGraphGetCounter();

      v60 = MEMORY[0x24BEE1ED8];
      *(_QWORD *)(v57 + 56) = MEMORY[0x24BEE1E88];
      *(_QWORD *)(v57 + 64) = v60;
      *(_QWORD *)(v57 + 32) = v63;
      v61 = AGGraphGetCurrentAttribute();
      if (v61 == v64)
        goto LABEL_71;
      v62 = MEMORY[0x24BEE4558];
      *(_QWORD *)(v57 + 96) = MEMORY[0x24BEE44F0];
      *(_QWORD *)(v57 + 104) = v62;
      *(_DWORD *)(v57 + 72) = v61;
      *(_QWORD *)(v57 + 136) = MEMORY[0x24BEE0D00];
      *(_QWORD *)(v57 + 144) = lazy protocol witness table accessor for type String and conformance String();
      *(_QWORD *)(v57 + 112) = 0x7465736E495FLL;
      *(_QWORD *)(v57 + 120) = 0xE600000000000000;
      os_signpost(_:dso:log:name:signpostID:_:_:)();
      swift_release();
      v14 = v66;
      (*(void (**)(char *, uint64_t))(v66 + 8))(v16, v13);
      swift_bridgeObjectRelease();
    }
    else
    {
LABEL_61:
      swift_release();
    }
    swift_release();
    *(_QWORD *)(a4 + 48) = v53;
    if (v53)
    {
LABEL_34:
      swift_retain();
      specialized AnimatorState.addListeners(transaction:)();
      swift_release();
      swift_release();
      goto LABEL_35;
    }
LABEL_63:
    __break(1u);
LABEL_35:
    swift_release();
LABEL_36:
    *(double *)(a4 + 16) = v7;
    *(double *)(a4 + 24) = v8;
    *(double *)(a4 + 32) = v9;
    *(_BYTE *)(a4 + 40) = 0;
    v20 = *(_QWORD *)(a4 + 48);
    if (!v20)
      return;
  }
  swift_retain();
  LOBYTE(v70.f64[0]) = 0;
  specialized AnimatorState.combine(newAnimation:newInterval:at:in:environment:)(v23, v6, v5, v4, v17);
  swift_retain();
  v26 = static os_signpost_type_t.event.getter();
  static os_signpost_type_t.event.getter();
  if ((kdebug_is_enabled() & 1) == 0)
    goto LABEL_32;
  v65 = v26;
  if (one-time initialization token for _signpostLog != -1)
    swift_once();
  v27 = (void *)_signpostLog;
  if ((OS_os_log.signpostsEnabled.getter() & 1) == 0)
  {
LABEL_32:
    swift_release_n();
    goto LABEL_33;
  }
  v66 = v14;
  swift_retain();
  v28 = v27;
  OSSignpostID.init(log:object:)();
  type metadata accessor for _ContiguousArrayStorage<CVarArg>();
  v29 = swift_allocObject();
  *(_OWORD *)(v29 + 16) = xmmword_235283260;
  v30 = AGGraphGetCurrentAttribute();
  v64 = *MEMORY[0x24BE096C0];
  if (v30 != v64)
  {
    v31 = (id)AGGraphGetAttributeGraph();
    v63 = AGGraphGetCounter();

    v32 = MEMORY[0x24BEE1ED8];
    *(_QWORD *)(v29 + 56) = MEMORY[0x24BEE1E88];
    *(_QWORD *)(v29 + 64) = v32;
    *(_QWORD *)(v29 + 32) = v63;
    v33 = AGGraphGetCurrentAttribute();
    if (v33 == v64)
      goto LABEL_69;
    v34 = MEMORY[0x24BEE4558];
    *(_QWORD *)(v29 + 96) = MEMORY[0x24BEE44F0];
    *(_QWORD *)(v29 + 104) = v34;
    *(_DWORD *)(v29 + 72) = v33;
    *(_QWORD *)(v29 + 136) = MEMORY[0x24BEE0D00];
    *(_QWORD *)(v29 + 144) = lazy protocol witness table accessor for type String and conformance String();
    *(_QWORD *)(v29 + 112) = 0x7465736E495FLL;
    *(_QWORD *)(v29 + 120) = 0xE600000000000000;
    os_signpost(_:dso:log:name:signpostID:_:_:)();
    swift_release_n();
    v14 = v66;
    (*(void (**)(char *, uint64_t))(v66 + 8))(v16, v13);
    swift_bridgeObjectRelease();
LABEL_33:
    if (*(_QWORD *)(a4 + 48))
      goto LABEL_34;
    goto LABEL_63;
  }
  __break(1u);
LABEL_69:
  __break(1u);
LABEL_70:
  __break(1u);
LABEL_71:
  __break(1u);
}

{
  double v4;
  double v5;
  double v6;
  double v7;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  double v15;
  double *Value;
  char v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  int v25;
  void *v26;
  id v27;
  uint64_t v28;
  int v29;
  id v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  void *v34;
  id v35;
  uint64_t v36;
  int CurrentAttribute;
  id v38;
  uint64_t Counter;
  uint64_t v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  double v44;
  uint64_t v45;
  unsigned __int8 v46;
  void (*v47)(uint64_t *, unint64_t, double);
  void *v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  void *v52;
  id v53;
  uint64_t v54;
  int v55;
  id v56;
  uint64_t v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  int v62;
  uint64_t v63;
  unsigned __int8 v64;
  uint64_t v65;
  char v66;
  float64x2_t v67;

  v11 = type metadata accessor for OSSignpostID();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v11);
  v14 = (char *)&v60 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for infinity != -1)
    swift_once();
  v15 = -*(double *)&static Time.infinity;
  if (*(_QWORD *)(a4 + 40))
  {
    Value = (double *)AGGraphGetValue();
    if ((v17 & 1) != 0)
      v15 = *Value;
  }
  if (*(_DWORD *)(a4 + 48) != *(_DWORD *)AGGraphGetValue() >> 1)
  {
    specialized AnimatableAttributeHelper.reset()();
    *(_BYTE *)(a1 + 17) = 1;
LABEL_11:
    v6 = *(double *)a1;
    v7 = *(double *)(a1 + 8);
    if ((*(_BYTE *)(a4 + 32) & 1) != 0)
      goto LABEL_37;
    v5 = *(double *)(a4 + 16);
    v4 = *(double *)(a4 + 24);
    if (v6 == v5 && v7 == v4)
      goto LABEL_37;
    AGGraphClearUpdate();
    AGGraphGetValue();
    swift_retain();
    AGGraphSetUpdate();
    v20 = swift_retain();
    v21 = specialized find<A>(_:key:)(v20);
    if (v21)
    {
      v22 = *(_QWORD *)(v21 + 72);
      swift_retain();
      swift_release();
      if (v22)
        goto LABEL_25;
    }
    else
    {
      swift_release();
    }
    v23 = swift_retain();
    v24 = specialized closure #1 in PropertyList.subscript.getter(v23);
    swift_release();
    if ((v24 & 1) == 0)
    {
      if (!a2)
        goto LABEL_36;
      swift_retain();
      v22 = a2;
      goto LABEL_25;
    }
    if (one-time initialization token for velocityTracking != -1)
      goto LABEL_68;
    goto LABEL_22;
  }
  if (*(_BYTE *)(a1 + 17) == 1)
    goto LABEL_11;
  v18 = *(_QWORD *)(a4 + 40);
  if (!v18)
    return;
  while (1)
  {
    v67 = *(float64x2_t *)a1;
    swift_retain();
    v66 = 0;
    if ((specialized AnimatorState.update(_:at:environment:)(&v67, v15) & 1) == 0)
    {
      if (one-time initialization token for shared != -1)
        swift_once();
      swift_beginAccess();
      v44 = *(double *)(v18 + 56);
      v65 = *(_QWORD *)(v18 + 64);
      v45 = *(unsigned int *)(v18 + 88);
      v46 = *(_BYTE *)(v18 + 92);
      v47 = *(void (**)(uint64_t *, unint64_t, double))((*MEMORY[0x24BEE4EA0] & *(_QWORD *)static CoreGlue.shared)
                                                                       + 0x58);
      v48 = static CoreGlue.shared;
      v64 = v46;
      v47(&v65, v45 | ((unint64_t)v46 << 32), v44);
      swift_release();

      goto LABEL_53;
    }
    swift_retain();
    static os_signpost_type_t.end.getter();
    static os_signpost_type_t.event.getter();
    if ((kdebug_is_enabled() & 1) == 0)
      goto LABEL_50;
    if (one-time initialization token for _signpostLog != -1)
      swift_once();
    v34 = (void *)_signpostLog;
    if ((OS_os_log.signpostsEnabled.getter() & 1) == 0)
    {
LABEL_50:
      v43 = swift_release();
      if (*(_QWORD *)(a4 + 40))
      {
LABEL_51:
        specialized AnimatorState.removeListeners()(v43);
        swift_release();
      }
LABEL_52:
      swift_release();
      *(_QWORD *)(a4 + 40) = 0;
LABEL_53:
      *(float64x2_t *)a1 = v67;
      *(_BYTE *)(a1 + 17) = 1;
      return;
    }
    v63 = v12;
    swift_retain();
    v35 = v34;
    OSSignpostID.init(log:object:)();
    type metadata accessor for _ContiguousArrayStorage<CVarArg>();
    v36 = swift_allocObject();
    *(_OWORD *)(v36 + 16) = xmmword_235283260;
    CurrentAttribute = AGGraphGetCurrentAttribute();
    v12 = *MEMORY[0x24BE096C0];
    if (CurrentAttribute == (_DWORD)v12)
    {
      __break(1u);
    }
    else
    {
      v38 = (id)AGGraphGetAttributeGraph();
      Counter = AGGraphGetCounter();

      v40 = MEMORY[0x24BEE1ED8];
      *(_QWORD *)(v36 + 56) = MEMORY[0x24BEE1E88];
      *(_QWORD *)(v36 + 64) = v40;
      *(_QWORD *)(v36 + 32) = Counter;
      v41 = AGGraphGetCurrentAttribute();
      if (v41 != (_DWORD)v12)
      {
        v42 = MEMORY[0x24BEE4558];
        *(_QWORD *)(v36 + 96) = MEMORY[0x24BEE44F0];
        *(_QWORD *)(v36 + 104) = v42;
        *(_DWORD *)(v36 + 72) = v41;
        *(_QWORD *)(v36 + 136) = MEMORY[0x24BEE0D00];
        *(_QWORD *)(v36 + 144) = lazy protocol witness table accessor for type String and conformance String();
        *(_QWORD *)(v36 + 112) = 0xD000000000000010;
        *(_QWORD *)(v36 + 120) = 0x80000002352E30B0;
        os_signpost(_:dso:log:name:signpostID:_:_:)();
        swift_release();
        (*(void (**)(char *, uint64_t))(v63 + 8))(v14, v11);
        v43 = swift_bridgeObjectRelease();
        if (*(_QWORD *)(a4 + 40))
          goto LABEL_51;
        goto LABEL_52;
      }
    }
    __break(1u);
LABEL_68:
    swift_once();
LABEL_22:
    v22 = static Animation.velocityTracking;
    swift_retain();
LABEL_25:
    v5 = v6 - v5;
    v4 = v7 - v4;
    v15 = *(double *)AGGraphGetValue();
    if (*(_QWORD *)(a4 + 40))
      break;
    type metadata accessor for CombinedAnimationState<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>>.Entry(0, &lazy cache variable for type metadata for AnimatorState<AnimatablePair<CGFloat, CGFloat>>, (uint64_t (*)(uint64_t))type metadata accessor for AnimatablePair<CGFloat, CGFloat>, (uint64_t (*)(void))lazy protocol witness table accessor for type AnimatablePair<CGFloat, CGFloat> and conformance AnimatablePair<A, B>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatorState);
    swift_allocObject();
    swift_retain();
    v49 = swift_retain();
    v50 = specialized AnimatorState.init(animation:interval:at:in:)(v49, v5, v4, v15);
    swift_retain();
    v51 = static os_signpost_type_t.begin.getter();
    static os_signpost_type_t.event.getter();
    if ((kdebug_is_enabled() & 1) == 0)
      goto LABEL_62;
    v62 = v51;
    if (one-time initialization token for _signpostLog != -1)
      swift_once();
    v52 = (void *)_signpostLog;
    if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
    {
      v63 = v12;
      swift_retain();
      v53 = v52;
      OSSignpostID.init(log:object:)();
      type metadata accessor for _ContiguousArrayStorage<CVarArg>();
      v54 = swift_allocObject();
      *(_OWORD *)(v54 + 16) = xmmword_235283260;
      v55 = AGGraphGetCurrentAttribute();
      v61 = *MEMORY[0x24BE096C0];
      if (v55 == v61)
        goto LABEL_71;
      v56 = (id)AGGraphGetAttributeGraph();
      v60 = AGGraphGetCounter();

      v57 = MEMORY[0x24BEE1ED8];
      *(_QWORD *)(v54 + 56) = MEMORY[0x24BEE1E88];
      *(_QWORD *)(v54 + 64) = v57;
      *(_QWORD *)(v54 + 32) = v60;
      v58 = AGGraphGetCurrentAttribute();
      if (v58 == v61)
        goto LABEL_72;
      v59 = MEMORY[0x24BEE4558];
      *(_QWORD *)(v54 + 96) = MEMORY[0x24BEE44F0];
      *(_QWORD *)(v54 + 104) = v59;
      *(_DWORD *)(v54 + 72) = v58;
      *(_QWORD *)(v54 + 136) = MEMORY[0x24BEE0D00];
      *(_QWORD *)(v54 + 144) = lazy protocol witness table accessor for type String and conformance String();
      *(_QWORD *)(v54 + 112) = 0xD000000000000010;
      *(_QWORD *)(v54 + 120) = 0x80000002352E30B0;
      os_signpost(_:dso:log:name:signpostID:_:_:)();
      swift_release();
      v12 = v63;
      (*(void (**)(char *, uint64_t))(v63 + 8))(v14, v11);
      swift_bridgeObjectRelease();
    }
    else
    {
LABEL_62:
      swift_release();
    }
    swift_release();
    *(_QWORD *)(a4 + 40) = v50;
    if (v50)
    {
LABEL_35:
      swift_retain();
      specialized AnimatorState.addListeners(transaction:)();
      swift_release();
      swift_release();
      goto LABEL_36;
    }
LABEL_64:
    __break(1u);
LABEL_36:
    swift_release();
LABEL_37:
    *(double *)(a4 + 16) = v6;
    *(double *)(a4 + 24) = v7;
    *(_BYTE *)(a4 + 32) = 0;
    v18 = *(_QWORD *)(a4 + 40);
    if (!v18)
      return;
  }
  swift_retain();
  v66 = 0;
  specialized AnimatorState.combine(newAnimation:newInterval:at:in:environment:)(v22, v5, v4, v15);
  swift_retain();
  v25 = static os_signpost_type_t.event.getter();
  static os_signpost_type_t.event.getter();
  if ((kdebug_is_enabled() & 1) == 0)
    goto LABEL_33;
  v62 = v25;
  if (one-time initialization token for _signpostLog != -1)
    swift_once();
  v26 = (void *)_signpostLog;
  if ((OS_os_log.signpostsEnabled.getter() & 1) == 0)
  {
LABEL_33:
    swift_release_n();
    goto LABEL_34;
  }
  v63 = v12;
  swift_retain();
  v27 = v26;
  OSSignpostID.init(log:object:)();
  type metadata accessor for _ContiguousArrayStorage<CVarArg>();
  v28 = swift_allocObject();
  *(_OWORD *)(v28 + 16) = xmmword_235283260;
  v29 = AGGraphGetCurrentAttribute();
  v61 = *MEMORY[0x24BE096C0];
  if (v29 != v61)
  {
    v30 = (id)AGGraphGetAttributeGraph();
    v60 = AGGraphGetCounter();

    v31 = MEMORY[0x24BEE1ED8];
    *(_QWORD *)(v28 + 56) = MEMORY[0x24BEE1E88];
    *(_QWORD *)(v28 + 64) = v31;
    *(_QWORD *)(v28 + 32) = v60;
    v32 = AGGraphGetCurrentAttribute();
    if (v32 == v61)
      goto LABEL_70;
    v33 = MEMORY[0x24BEE4558];
    *(_QWORD *)(v28 + 96) = MEMORY[0x24BEE44F0];
    *(_QWORD *)(v28 + 104) = v33;
    *(_DWORD *)(v28 + 72) = v32;
    *(_QWORD *)(v28 + 136) = MEMORY[0x24BEE0D00];
    *(_QWORD *)(v28 + 144) = lazy protocol witness table accessor for type String and conformance String();
    *(_QWORD *)(v28 + 112) = 0xD000000000000010;
    *(_QWORD *)(v28 + 120) = 0x80000002352E30B0;
    os_signpost(_:dso:log:name:signpostID:_:_:)();
    swift_release_n();
    v12 = v63;
    (*(void (**)(char *, uint64_t))(v63 + 8))(v14, v11);
    swift_bridgeObjectRelease();
LABEL_34:
    if (*(_QWORD *)(a4 + 40))
      goto LABEL_35;
    goto LABEL_64;
  }
  __break(1u);
LABEL_70:
  __break(1u);
LABEL_71:
  __break(1u);
LABEL_72:
  __break(1u);
}

{
  specialized AnimatableAttributeHelper.update(value:defaultAnimation:environment:sampleCollector:)(a1, a2, a3, a4, (void (*)(void))specialized AnimatableAttributeHelper.reset(), 0xD000000000000010, 0x80000002352E5ED0);
}

{
  double v4;
  double v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  double v13;
  double *Value;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  int v22;
  void *v23;
  id v24;
  uint64_t v25;
  int v26;
  id v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  void *v31;
  id v32;
  uint64_t v33;
  int CurrentAttribute;
  id v35;
  uint64_t Counter;
  uint64_t v37;
  int v38;
  uint64_t v39;
  double v40;
  uint64_t v41;
  unsigned __int8 v42;
  void (*v43)(uint64_t *, unint64_t, double);
  void *v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  void *v48;
  id v49;
  uint64_t v50;
  int v51;
  id v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  int v59;
  uint64_t v60;
  unsigned __int8 v61;
  uint64_t v62;
  char v63;
  double v64;

  v9 = type metadata accessor for OSSignpostID();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v56 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for infinity != -1)
    swift_once();
  v13 = -*(double *)&static Time.infinity;
  if (*(_QWORD *)(a4 + 32))
  {
    Value = (double *)AGGraphGetValue();
    if ((v15 & 1) != 0)
      v13 = *Value;
  }
  if (*(_DWORD *)(a4 + 40) != *(_DWORD *)AGGraphGetValue() >> 1)
  {
    specialized AnimatableAttributeHelper.reset()();
    *(_BYTE *)(a1 + 116) = 1;
LABEL_11:
    v5 = *(double *)a1;
    if ((*(_BYTE *)(a4 + 24) & 1) != 0)
      goto LABEL_34;
    v4 = *(double *)(a4 + 16);
    if (v5 == v4)
      goto LABEL_34;
    AGGraphClearUpdate();
    AGGraphGetValue();
    swift_retain();
    AGGraphSetUpdate();
    v17 = swift_retain();
    v18 = specialized find<A>(_:key:)(v17);
    if (v18)
    {
      v19 = *(_QWORD *)(v18 + 72);
      swift_retain();
      swift_release();
      if (v19)
        goto LABEL_22;
    }
    else
    {
      swift_release();
    }
    v20 = swift_retain();
    v21 = specialized closure #1 in PropertyList.subscript.getter(v20);
    swift_release();
    if ((v21 & 1) == 0)
    {
      if (!a2)
        goto LABEL_33;
      swift_retain();
      v19 = a2;
      goto LABEL_22;
    }
    if (one-time initialization token for velocityTracking != -1)
      goto LABEL_65;
    goto LABEL_19;
  }
  if (*(_BYTE *)(a1 + 116) == 1)
    goto LABEL_11;
  v16 = *(_QWORD *)(a4 + 32);
  if (!v16)
    return;
  while (1)
  {
    v64 = *(double *)a1;
    swift_retain();
    v63 = 0;
    if ((specialized AnimatorState.update(_:at:environment:)(&v64, v13) & 1) == 0)
    {
      if (one-time initialization token for shared != -1)
        swift_once();
      swift_beginAccess();
      v40 = *(double *)(v16 + 48);
      v62 = *(_QWORD *)(v16 + 56);
      v41 = *(unsigned int *)(v16 + 72);
      v42 = *(_BYTE *)(v16 + 76);
      v43 = *(void (**)(uint64_t *, unint64_t, double))((*MEMORY[0x24BEE4EA0] & *(_QWORD *)static CoreGlue.shared)
                                                                       + 0x58);
      v44 = static CoreGlue.shared;
      v61 = v42;
      v43(&v62, v41 | ((unint64_t)v42 << 32), v40);
      swift_release();

      goto LABEL_50;
    }
    swift_retain();
    static os_signpost_type_t.end.getter();
    static os_signpost_type_t.event.getter();
    if ((kdebug_is_enabled() & 1) == 0)
      goto LABEL_47;
    if (one-time initialization token for _signpostLog != -1)
      swift_once();
    v31 = (void *)_signpostLog;
    if ((OS_os_log.signpostsEnabled.getter() & 1) == 0)
    {
LABEL_47:
      swift_release();
      if (*(_QWORD *)(a4 + 32))
      {
LABEL_48:
        specialized AnimatorState.removeListeners()();
        swift_release();
      }
LABEL_49:
      swift_release();
      *(_QWORD *)(a4 + 32) = 0;
LABEL_50:
      *(double *)a1 = v64;
      *(_BYTE *)(a1 + 116) = 1;
      return;
    }
    v60 = v10;
    swift_retain();
    v32 = v31;
    OSSignpostID.init(log:object:)();
    type metadata accessor for _ContiguousArrayStorage<CVarArg>();
    v33 = swift_allocObject();
    *(_OWORD *)(v33 + 16) = xmmword_235283260;
    CurrentAttribute = AGGraphGetCurrentAttribute();
    v10 = *MEMORY[0x24BE096C0];
    if (CurrentAttribute == (_DWORD)v10)
    {
      __break(1u);
    }
    else
    {
      v35 = (id)AGGraphGetAttributeGraph();
      Counter = AGGraphGetCounter();

      v37 = MEMORY[0x24BEE1ED8];
      *(_QWORD *)(v33 + 56) = MEMORY[0x24BEE1E88];
      *(_QWORD *)(v33 + 64) = v37;
      *(_QWORD *)(v33 + 32) = Counter;
      v38 = AGGraphGetCurrentAttribute();
      if (v38 != (_DWORD)v10)
      {
        v39 = MEMORY[0x24BEE4558];
        *(_QWORD *)(v33 + 96) = MEMORY[0x24BEE44F0];
        *(_QWORD *)(v33 + 104) = v39;
        *(_DWORD *)(v33 + 72) = v38;
        *(_QWORD *)(v33 + 136) = MEMORY[0x24BEE0D00];
        *(_QWORD *)(v33 + 144) = lazy protocol witness table accessor for type String and conformance String();
        *(_QWORD *)(v33 + 112) = 0xD000000000000011;
        *(_QWORD *)(v33 + 120) = 0x80000002352E5E50;
        os_signpost(_:dso:log:name:signpostID:_:_:)();
        swift_release();
        (*(void (**)(char *, uint64_t))(v60 + 8))(v12, v9);
        swift_bridgeObjectRelease();
        if (*(_QWORD *)(a4 + 32))
          goto LABEL_48;
        goto LABEL_49;
      }
    }
    __break(1u);
LABEL_65:
    swift_once();
LABEL_19:
    v19 = static Animation.velocityTracking;
    swift_retain();
LABEL_22:
    v4 = v5 - v4;
    v13 = *(double *)AGGraphGetValue();
    if (*(_QWORD *)(a4 + 32))
      break;
    type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for AnimatorState<CGFloat>, (uint64_t (*)(void))lazy protocol witness table accessor for type CGFloat and conformance CGFloat, MEMORY[0x24BEE50B0], (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatorState);
    swift_allocObject();
    swift_retain();
    v45 = swift_retain();
    v46 = specialized AnimatorState.init(animation:interval:at:in:)(v45, v4, v13);
    swift_retain();
    v47 = static os_signpost_type_t.begin.getter();
    static os_signpost_type_t.event.getter();
    if ((kdebug_is_enabled() & 1) == 0)
      goto LABEL_59;
    v59 = v47;
    if (one-time initialization token for _signpostLog != -1)
      swift_once();
    v48 = (void *)_signpostLog;
    if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
    {
      v60 = v19;
      swift_retain();
      v49 = v48;
      OSSignpostID.init(log:object:)();
      type metadata accessor for _ContiguousArrayStorage<CVarArg>();
      v50 = swift_allocObject();
      *(_OWORD *)(v50 + 16) = xmmword_235283260;
      v51 = AGGraphGetCurrentAttribute();
      v58 = *MEMORY[0x24BE096C0];
      if (v51 == v58)
        goto LABEL_68;
      v52 = (id)AGGraphGetAttributeGraph();
      v57 = AGGraphGetCounter();

      v53 = MEMORY[0x24BEE1ED8];
      *(_QWORD *)(v50 + 56) = MEMORY[0x24BEE1E88];
      *(_QWORD *)(v50 + 64) = v53;
      *(_QWORD *)(v50 + 32) = v57;
      v54 = AGGraphGetCurrentAttribute();
      if (v54 == v58)
        goto LABEL_69;
      v55 = MEMORY[0x24BEE4558];
      *(_QWORD *)(v50 + 96) = MEMORY[0x24BEE44F0];
      *(_QWORD *)(v50 + 104) = v55;
      *(_DWORD *)(v50 + 72) = v54;
      *(_QWORD *)(v50 + 136) = MEMORY[0x24BEE0D00];
      *(_QWORD *)(v50 + 144) = lazy protocol witness table accessor for type String and conformance String();
      *(_QWORD *)(v50 + 112) = 0xD000000000000011;
      *(_QWORD *)(v50 + 120) = 0x80000002352E5E50;
      os_signpost(_:dso:log:name:signpostID:_:_:)();
      swift_release();
      (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
      swift_bridgeObjectRelease();
    }
    else
    {
LABEL_59:
      swift_release();
    }
    swift_release();
    *(_QWORD *)(a4 + 32) = v46;
    if (v46)
    {
LABEL_32:
      swift_retain();
      specialized AnimatorState.addListeners(transaction:)();
      swift_release();
      swift_release();
      goto LABEL_33;
    }
LABEL_61:
    __break(1u);
LABEL_33:
    swift_release();
LABEL_34:
    *(double *)(a4 + 16) = v5;
    *(_BYTE *)(a4 + 24) = 0;
    v16 = *(_QWORD *)(a4 + 32);
    if (!v16)
      return;
  }
  swift_retain();
  v63 = 0;
  specialized AnimatorState.combine(newAnimation:newInterval:at:in:environment:)(v19, v4, v13);
  swift_retain();
  v22 = static os_signpost_type_t.event.getter();
  static os_signpost_type_t.event.getter();
  if ((kdebug_is_enabled() & 1) == 0)
    goto LABEL_30;
  v59 = v22;
  if (one-time initialization token for _signpostLog != -1)
    swift_once();
  v23 = (void *)_signpostLog;
  if ((OS_os_log.signpostsEnabled.getter() & 1) == 0)
  {
LABEL_30:
    swift_release_n();
    goto LABEL_31;
  }
  v60 = v19;
  swift_retain();
  v24 = v23;
  OSSignpostID.init(log:object:)();
  type metadata accessor for _ContiguousArrayStorage<CVarArg>();
  v25 = swift_allocObject();
  *(_OWORD *)(v25 + 16) = xmmword_235283260;
  v26 = AGGraphGetCurrentAttribute();
  v58 = *MEMORY[0x24BE096C0];
  if (v26 != v58)
  {
    v27 = (id)AGGraphGetAttributeGraph();
    v57 = AGGraphGetCounter();

    v28 = MEMORY[0x24BEE1ED8];
    *(_QWORD *)(v25 + 56) = MEMORY[0x24BEE1E88];
    *(_QWORD *)(v25 + 64) = v28;
    *(_QWORD *)(v25 + 32) = v57;
    v29 = AGGraphGetCurrentAttribute();
    if (v29 == v58)
      goto LABEL_67;
    v30 = MEMORY[0x24BEE4558];
    *(_QWORD *)(v25 + 96) = MEMORY[0x24BEE44F0];
    *(_QWORD *)(v25 + 104) = v30;
    *(_DWORD *)(v25 + 72) = v29;
    *(_QWORD *)(v25 + 136) = MEMORY[0x24BEE0D00];
    *(_QWORD *)(v25 + 144) = lazy protocol witness table accessor for type String and conformance String();
    *(_QWORD *)(v25 + 112) = 0xD000000000000011;
    *(_QWORD *)(v25 + 120) = 0x80000002352E5E50;
    os_signpost(_:dso:log:name:signpostID:_:_:)();
    swift_release_n();
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
    swift_bridgeObjectRelease();
LABEL_31:
    if (*(_QWORD *)(a4 + 32))
      goto LABEL_32;
    goto LABEL_61;
  }
  __break(1u);
LABEL_67:
  __break(1u);
LABEL_68:
  __break(1u);
LABEL_69:
  __break(1u);
}

{
  specialized AnimatableAttributeHelper.update(value:defaultAnimation:environment:sampleCollector:)(a1, a2, a3, a4, (void (*)(void))specialized AnimatableAttributeHelper.reset(), 0xD000000000000011, 0x80000002352E5E70);
}

{
  specialized AnimatableAttributeHelper.update(value:defaultAnimation:environment:sampleCollector:)(a1, a2, a3, a4, (void (*)(void))specialized AnimatableAttributeHelper.reset(), 0xD000000000000011, 0x80000002352E5E10);
}

{
  specialized AnimatableAttributeHelper.update(value:defaultAnimation:environment:sampleCollector:)(a1, a2, a3, a4, (void (*)(void))specialized AnimatableAttributeHelper.reset(), 0xD000000000000012, 0x80000002352E5DD0);
}

{
  double v4;
  double v5;
  uint64_t v6;
  double v7;
  uint64_t v11;
  uint64_t Counter;
  uint64_t v13;
  char *v14;
  double v15;
  double *Value;
  char v17;
  double *v18;
  double *v19;
  float v20;
  float v21;
  float v22;
  int8x16_t v23;
  int8x16_t v24;
  float v25;
  float v26;
  float v27;
  float v28;
  double v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  double v37;
  float v38;
  float v39;
  float v40;
  float v41;
  double v42;
  double v43;
  double v44;
  uint64_t v45;
  int v46;
  void *v47;
  char v48;
  id v49;
  uint64_t v50;
  int v51;
  id v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  void *v58;
  char v59;
  id v60;
  uint64_t v61;
  int v62;
  id v63;
  uint64_t v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  int8x16_t v68;
  float32x4_t v69;
  float32x4_t v70;
  void *v71;
  id v72;
  uint64_t v73;
  int CurrentAttribute;
  int v75;
  id v76;
  uint64_t v77;
  int v78;
  uint64_t v79;
  uint64_t v80;
  double v81;
  uint64_t v82;
  unsigned __int8 v83;
  void (*v84)(float32x4_t *, unint64_t, double);
  void *v85;
  double v86;
  float32x4_t v87;
  float32x4_t v88;
  __int32 v89;
  __int32 v90;
  __int32 v91;
  __int32 v92;
  uint64_t v93;
  __int32 v94;
  __int32 v95;
  __int32 v96;
  uint64_t v97;
  uint64_t v98;
  int v99;
  int v100;
  uint64_t v101;
  float v102;
  float v103;
  float v104;
  float v105;
  uint64_t v106;
  double v107;
  float32x4_t v108;
  int8x16_t v109;
  float32x4_t v110;
  char v111;
  char v112;
  float32x4_t v113;
  int8x16_t v114;
  double v115;
  float v116;
  float v117;
  float v118;
  float v119;
  double v120;
  double v121;
  double v122;

  v11 = type metadata accessor for OSSignpostID();
  Counter = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v11);
  v14 = (char *)&v97 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for infinity == -1)
    goto LABEL_2;
LABEL_83:
  swift_once();
LABEL_2:
  v15 = -*(double *)&static Time.infinity;
  if (*(_QWORD *)(a4 + 64))
  {
    Value = (double *)AGGraphGetValue();
    if ((v17 & 1) != 0)
      v15 = *Value;
  }
  v18 = (double *)&unk_254266000;
  if (*(_DWORD *)(a4 + 72) == *(_DWORD *)AGGraphGetValue() >> 1)
  {
    if (*(_BYTE *)(a1 + 45) != 1)
    {
      v19 = (double *)&unk_254266000;
      v18 = *(double **)(a4 + 64);
      if (v18)
        goto LABEL_54;
      return;
    }
  }
  else
  {
    specialized AnimatableAttributeHelper.reset()();
    *(_BYTE *)(a1 + 45) = 1;
  }
  v20 = *(float *)a1;
  v21 = *(float *)(a1 + 4);
  v22 = *(float *)(a1 + 8);
  LODWORD(v4) = *(_DWORD *)(a1 + 12);
  v5 = *(double *)(a1 + 16);
  v6 = *(_QWORD *)(a1 + 24);
  v7 = *(double *)(a1 + 32);
  if (one-time initialization token for legacyInterpolation != -1)
    swift_once();
  swift_beginAccess();
  if ((static Color.Resolved.legacyInterpolation & 1) == 0)
  {
    v113.i8[0] = 2;
    *(float *)v23.i32 = v20;
    ResolvedGradient.ColorSpace.convertIn(_:)(&v116, v23, v21, LODWORD(v22), *(float *)&v4, v24);
    v20 = v116;
    v21 = v117;
    v22 = v118;
    *(float *)&v4 = v119;
  }
  v25 = v20 * 128.0;
  v26 = v21 * 128.0;
  v27 = v22 * 128.0;
  v28 = *(float *)&v4 * 128.0;
  if ((*(_BYTE *)(a4 + 56) & 1) == 0)
  {
    v107 = v7;
    v108.i64[0] = v6;
    *(double *)v109.i64 = v5;
    v4 = *(double *)(a4 + 40);
    v29 = *(double *)(a4 + 48);
    v5 = *(double *)(a4 + 32);
    LODWORD(v30) = *(_DWORD *)(a4 + 16);
    LODWORD(v31) = *(_DWORD *)(a4 + 20);
    LODWORD(v7) = *(_DWORD *)(a4 + 24);
    LODWORD(v6) = *(_DWORD *)(a4 + 28);
    if (v25 == *(float *)&v30
      && v26 == *(float *)&v31
      && v27 == *(float *)&v7
      && v28 == *(float *)&v6
      && *(double *)v109.i64 == v5
      && *(double *)v108.i64 == v4
      && v107 == v29)
    {
      v5 = *(double *)v109.i64;
      v6 = v108.i64[0];
      v7 = v107;
      goto LABEL_53;
    }
    v102 = v25;
    v103 = v26;
    v104 = v27;
    v105 = v28;
    v106 = Counter;
    AGGraphClearUpdate();
    Counter = *(_QWORD *)AGGraphGetValue();
    swift_retain();
    AGGraphSetUpdate();
    v32 = swift_retain();
    v33 = specialized find<A>(_:key:)(v32);
    if (v33)
    {
      v34 = *(_QWORD *)(v33 + 72);
      swift_retain();
      swift_release();
      if (v34)
        goto LABEL_32;
    }
    else
    {
      swift_release();
    }
    v35 = swift_retain();
    v36 = specialized closure #1 in PropertyList.subscript.getter(v35);
    swift_release();
    if ((v36 & 1) != 0)
    {
      v18 = (double *)&unk_254266000;
      if (one-time initialization token for velocityTracking != -1)
        goto LABEL_86;
      goto LABEL_29;
    }
    v18 = (double *)&unk_254266000;
    if (a2)
    {
      swift_retain();
      v34 = a2;
      goto LABEL_32;
    }
    swift_release();
    Counter = v106;
    v5 = *(double *)v109.i64;
    v6 = v108.i64[0];
    v7 = v107;
    goto LABEL_52;
  }
  while (1)
  {
LABEL_53:
    v19 = v18;
    *(_QWORD *)(a4 + 16) = LODWORD(v25) | ((unint64_t)LODWORD(v26) << 32);
    *(_QWORD *)(a4 + 24) = LODWORD(v27) | ((unint64_t)LODWORD(v28) << 32);
    *(double *)(a4 + 32) = v5;
    *(_QWORD *)(a4 + 40) = v6;
    *(double *)(a4 + 48) = v7;
    *(_BYTE *)(a4 + 56) = 0;
    v18 = *(double **)(a4 + 64);
    if (!v18)
      return;
LABEL_54:
    v109 = *(int8x16_t *)a1;
    v30 = *(_QWORD *)(a1 + 16);
    v31 = *(_QWORD *)(a1 + 24);
    v29 = *(double *)(a1 + 32);
    v67 = *((_QWORD *)v19 + 183);
    swift_retain();
    if (v67 != -1)
      swift_once();
    swift_beginAccess();
    if ((static Color.Resolved.legacyInterpolation & 1) != 0)
    {
      v69 = (float32x4_t)v109;
    }
    else
    {
      v112 = 2;
      ResolvedGradient.ColorSpace.convertIn(_:)(v113.f32, v109, *(float *)&v109.i32[1], v109.u32[2], *(float *)&v109.i32[3], v68);
      v69 = v113;
    }
    v70.i64[0] = 0x4300000043000000;
    v70.i64[1] = 0x4300000043000000;
    v113 = vmulq_f32(v69, v70);
    v114.i64[0] = v30;
    v114.i64[1] = v31;
    v115 = v29;
    v112 = 0;
    if ((specialized AnimatorState.update(_:at:environment:)((uint64_t)&v113, v15) & 1) == 0)
      break;
    swift_retain();
    static os_signpost_type_t.end.getter();
    static os_signpost_type_t.event.getter();
    if ((kdebug_is_enabled() & 1) == 0)
      goto LABEL_71;
    if (one-time initialization token for _signpostLog != -1)
      swift_once();
    v71 = (void *)_signpostLog;
    if ((OS_os_log.signpostsEnabled.getter() & 1) == 0)
    {
LABEL_71:
      v80 = swift_release();
      if (!*(_QWORD *)(a4 + 64))
      {
LABEL_73:
        *(_QWORD *)(a4 + 64) = 0;
        goto LABEL_74;
      }
LABEL_72:
      specialized AnimatorState.removeListeners()(v80);
      swift_release();
      goto LABEL_73;
    }
    v106 = Counter;
    swift_retain();
    v72 = v71;
    OSSignpostID.init(log:object:)();
    type metadata accessor for _ContiguousArrayStorage<CVarArg>();
    v73 = swift_allocObject();
    *(_OWORD *)(v73 + 16) = xmmword_235283260;
    CurrentAttribute = AGGraphGetCurrentAttribute();
    v75 = *MEMORY[0x24BE096C0];
    if (CurrentAttribute == *MEMORY[0x24BE096C0])
    {
      __break(1u);
    }
    else
    {
      v76 = (id)AGGraphGetAttributeGraph();
      Counter = AGGraphGetCounter();

      v77 = MEMORY[0x24BEE1ED8];
      *(_QWORD *)(v73 + 56) = MEMORY[0x24BEE1E88];
      *(_QWORD *)(v73 + 64) = v77;
      *(_QWORD *)(v73 + 32) = Counter;
      v78 = AGGraphGetCurrentAttribute();
      if (v78 != v75)
      {
        v79 = MEMORY[0x24BEE4558];
        *(_QWORD *)(v73 + 96) = MEMORY[0x24BEE44F0];
        *(_QWORD *)(v73 + 104) = v79;
        *(_DWORD *)(v73 + 72) = v78;
        *(_QWORD *)(v73 + 136) = MEMORY[0x24BEE0D00];
        *(_QWORD *)(v73 + 144) = lazy protocol witness table accessor for type String and conformance String();
        *(_QWORD *)(v73 + 112) = 0xD000000000000013;
        *(_QWORD *)(v73 + 120) = 0x80000002352E5E30;
        os_signpost(_:dso:log:name:signpostID:_:_:)();
        swift_release();
        (*(void (**)(char *, uint64_t))(v106 + 8))(v14, v11);
        v80 = swift_bridgeObjectRelease();
        if (!*(_QWORD *)(a4 + 64))
          goto LABEL_73;
        goto LABEL_72;
      }
    }
    __break(1u);
LABEL_86:
    swift_once();
LABEL_29:
    v34 = static Animation.velocityTracking;
    swift_retain();
LABEL_32:
    v37 = v29;
    v38 = v102 - *(float *)&v30;
    v39 = v103 - *(float *)&v31;
    v40 = v104 - *(float *)&v7;
    v41 = v105 - *(float *)&v6;
    v42 = *(double *)v109.i64 - v5;
    v43 = *(double *)v108.i64 - v4;
    v44 = v107 - v37;
    v4 = *(double *)AGGraphGetValue();
    v45 = *(_QWORD *)(a4 + 64);
    v101 = v34;
    if (v45)
    {
      v116 = v38;
      v117 = v39;
      v118 = v40;
      v119 = v41;
      v120 = v42;
      v121 = v43;
      v122 = v44;
      swift_retain();
      v113.i8[0] = 0;
      specialized AnimatorState.combine(newAnimation:newInterval:at:in:environment:)(v34, (uint64_t)&v116, v4);
      swift_retain();
      v46 = static os_signpost_type_t.event.getter();
      static os_signpost_type_t.event.getter();
      v15 = v4;
      if ((kdebug_is_enabled() & 1) != 0)
      {
        v100 = v46;
        if (one-time initialization token for _signpostLog != -1)
          swift_once();
        v47 = (void *)_signpostLog;
        v48 = OS_os_log.signpostsEnabled.getter();
        v5 = *(double *)v109.i64;
        v6 = v108.i64[0];
        v7 = v107;
        if ((v48 & 1) != 0)
        {
          swift_retain();
          v49 = v47;
          OSSignpostID.init(log:object:)();
          type metadata accessor for _ContiguousArrayStorage<CVarArg>();
          v50 = swift_allocObject();
          *(_OWORD *)(v50 + 16) = xmmword_235283260;
          v51 = AGGraphGetCurrentAttribute();
          v99 = *MEMORY[0x24BE096C0];
          if (v51 == v99)
          {
            __break(1u);
LABEL_88:
            __break(1u);
LABEL_89:
            __break(1u);
LABEL_90:
            __break(1u);
            return;
          }
          v52 = (id)AGGraphGetAttributeGraph();
          v98 = AGGraphGetCounter();

          v53 = MEMORY[0x24BEE1ED8];
          *(_QWORD *)(v50 + 56) = MEMORY[0x24BEE1E88];
          *(_QWORD *)(v50 + 64) = v53;
          *(_QWORD *)(v50 + 32) = v98;
          v54 = AGGraphGetCurrentAttribute();
          if (v54 == v99)
            goto LABEL_88;
          v55 = MEMORY[0x24BEE4558];
          *(_QWORD *)(v50 + 96) = MEMORY[0x24BEE44F0];
          *(_QWORD *)(v50 + 104) = v55;
          *(_DWORD *)(v50 + 72) = v54;
          *(_QWORD *)(v50 + 136) = MEMORY[0x24BEE0D00];
          *(_QWORD *)(v50 + 144) = lazy protocol witness table accessor for type String and conformance String();
          *(_QWORD *)(v50 + 112) = 0xD000000000000013;
          *(_QWORD *)(v50 + 120) = 0x80000002352E5E30;
          os_signpost(_:dso:log:name:signpostID:_:_:)();
          swift_release_n();
          (*(void (**)(char *, uint64_t))(v106 + 8))(v14, v11);
          swift_bridgeObjectRelease();
          v18 = (double *)&unk_254266000;
        }
        else
        {
          swift_release_n();
        }
      }
      else
      {
        swift_release_n();
        v5 = *(double *)v109.i64;
        v6 = v108.i64[0];
        v7 = v107;
      }
      a2 = *(_QWORD *)(a4 + 64);
      if (!a2)
      {
LABEL_82:
        __break(1u);
        goto LABEL_83;
      }
    }
    else
    {
      v116 = v38;
      v117 = v39;
      v118 = v40;
      v119 = v41;
      v120 = v42;
      v121 = v43;
      v122 = v44;
      type metadata accessor for CombinedAnimationState<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>>.Entry(0, &lazy cache variable for type metadata for AnimatorState<AnimatablePair<AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>, AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>>>, (uint64_t (*)(uint64_t))type metadata accessor for AnimatablePair<AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>, AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>>, lazy protocol witness table accessor for type AnimatablePair<AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>, AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>> and conformance AnimatablePair<A, B>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatorState);
      swift_allocObject();
      swift_retain();
      v56 = swift_retain();
      a2 = specialized AnimatorState.init(animation:interval:at:in:)(v56, (uint64_t)&v116, v4);
      swift_retain();
      v57 = static os_signpost_type_t.begin.getter();
      static os_signpost_type_t.event.getter();
      v15 = v4;
      if ((kdebug_is_enabled() & 1) != 0)
      {
        v100 = v57;
        if (one-time initialization token for _signpostLog != -1)
          swift_once();
        v58 = (void *)_signpostLog;
        v59 = OS_os_log.signpostsEnabled.getter();
        v5 = *(double *)v109.i64;
        v6 = v108.i64[0];
        v7 = v107;
        if ((v59 & 1) != 0)
        {
          swift_retain();
          v60 = v58;
          OSSignpostID.init(log:object:)();
          type metadata accessor for _ContiguousArrayStorage<CVarArg>();
          v61 = swift_allocObject();
          *(_OWORD *)(v61 + 16) = xmmword_235283260;
          v62 = AGGraphGetCurrentAttribute();
          v99 = *MEMORY[0x24BE096C0];
          if (v62 == v99)
            goto LABEL_89;
          v63 = (id)AGGraphGetAttributeGraph();
          v98 = AGGraphGetCounter();

          v64 = MEMORY[0x24BEE1ED8];
          *(_QWORD *)(v61 + 56) = MEMORY[0x24BEE1E88];
          *(_QWORD *)(v61 + 64) = v64;
          *(_QWORD *)(v61 + 32) = v98;
          v65 = AGGraphGetCurrentAttribute();
          if (v65 == v99)
            goto LABEL_90;
          v66 = MEMORY[0x24BEE4558];
          *(_QWORD *)(v61 + 96) = MEMORY[0x24BEE44F0];
          *(_QWORD *)(v61 + 104) = v66;
          *(_DWORD *)(v61 + 72) = v65;
          *(_QWORD *)(v61 + 136) = MEMORY[0x24BEE0D00];
          *(_QWORD *)(v61 + 144) = lazy protocol witness table accessor for type String and conformance String();
          *(_QWORD *)(v61 + 112) = 0xD000000000000013;
          *(_QWORD *)(v61 + 120) = 0x80000002352E5E30;
          os_signpost(_:dso:log:name:signpostID:_:_:)();
          swift_release();
          (*(void (**)(char *, uint64_t))(v106 + 8))(v14, v11);
          swift_bridgeObjectRelease();
          v18 = (double *)&unk_254266000;
        }
        else
        {
          swift_release();
        }
      }
      else
      {
        swift_release();
        v5 = *(double *)v109.i64;
        v6 = v108.i64[0];
        v7 = v107;
      }
      swift_release();
      *(_QWORD *)(a4 + 64) = a2;
      if (!a2)
        goto LABEL_82;
    }
    swift_retain();
    specialized AnimatorState.addListeners(transaction:)();
    swift_release();
    swift_release();
    swift_release();
    Counter = v106;
LABEL_52:
    v28 = v105;
    v27 = v104;
    v26 = v103;
    v25 = v102;
  }
  if (one-time initialization token for shared != -1)
    swift_once();
  swift_beginAccess();
  v81 = v18[10];
  v110.i64[0] = (uint64_t)v18[11];
  v82 = *((unsigned int *)v18 + 34);
  v83 = *((_BYTE *)v18 + 140);
  v84 = *(void (**)(float32x4_t *, unint64_t, double))((*MEMORY[0x24BEE4EA0] & *(_QWORD *)static CoreGlue.shared)
                                                                       + 0x58);
  v85 = static CoreGlue.shared;
  v111 = v83;
  v84(&v110, v82 | ((unint64_t)v83 << 32), v81);

LABEL_74:
  v109 = v114;
  v86 = v115;
  v87.i64[0] = 0x3C0000003C000000;
  v87.i64[1] = 0x3C0000003C000000;
  v88 = vmulq_f32(v113, v87);
  if (static Color.Resolved.legacyInterpolation == 1)
  {
    v108 = v88;
    swift_release();
    v90 = v108.i32[1];
    v89 = v108.i32[0];
    v92 = v108.i32[3];
    v91 = v108.i32[2];
  }
  else
  {
    v111 = 2;
    v110 = v88;
    *(float *)&v93 = ResolvedGradient.ColorSpace.convertOut(_:)(v110.f32);
    v108.i64[0] = v93;
    v90 = v94;
    v91 = v95;
    v92 = v96;
    swift_release();
    v89 = v108.i32[0];
  }
  *(_DWORD *)a1 = v89;
  *(_DWORD *)(a1 + 4) = v90;
  *(_DWORD *)(a1 + 8) = v91;
  *(_DWORD *)(a1 + 12) = v92;
  *(int8x16_t *)(a1 + 16) = v109;
  *(double *)(a1 + 32) = v86;
  *(_BYTE *)(a1 + 45) = 1;
}

{
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  double v18;
  double *Value;
  char v20;
  uint64_t v21;
  double v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  int v28;
  void *v29;
  id v30;
  uint64_t v31;
  int v32;
  id v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  __int128 v37;
  void *v38;
  id v39;
  uint64_t v40;
  int CurrentAttribute;
  id v42;
  uint64_t Counter;
  uint64_t v44;
  int v45;
  uint64_t v46;
  double v47;
  uint64_t v48;
  unsigned __int8 v49;
  void (*v50)(uint64_t *, unint64_t, double);
  void *v51;
  __int128 v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  void *v56;
  id v57;
  uint64_t v58;
  int v59;
  id v60;
  uint64_t v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  int v67;
  uint64_t v68;
  double v69;
  unsigned __int8 v70;
  uint64_t v71;
  char v72;
  float64x2_t v73;
  __int128 v74;

  v14 = type metadata accessor for OSSignpostID();
  v15 = *(_QWORD *)(v14 - 8);
  MEMORY[0x24BDAC7A8](v14);
  v17 = (char *)&v64 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for infinity != -1)
    swift_once();
  v18 = -*(double *)&static Time.infinity;
  if (*(_QWORD *)(a4 + 56))
  {
    Value = (double *)AGGraphGetValue();
    if ((v20 & 1) != 0)
      v18 = *Value;
  }
  if (*(_DWORD *)(a4 + 64) != *(_DWORD *)AGGraphGetValue() >> 1)
  {
    specialized AnimatableAttributeHelper.reset()();
    *(_BYTE *)(a1 + 32) = 1;
LABEL_11:
    v8 = *(double *)a1;
    v9 = *(double *)(a1 + 8);
    v10 = *(double *)(a1 + 16);
    v22 = *(double *)(a1 + 24);
    if ((*(_BYTE *)(a4 + 48) & 1) != 0)
      goto LABEL_37;
    v4 = *(double *)(a4 + 32);
    v5 = *(double *)(a4 + 40);
    v7 = *(double *)(a4 + 16);
    v6 = *(double *)(a4 + 24);
    if (v8 == v7 && v9 == v6 && v10 == v4 && v22 == v5)
      goto LABEL_37;
    v69 = *(double *)(a1 + 24);
    AGGraphClearUpdate();
    AGGraphGetValue();
    swift_retain();
    AGGraphSetUpdate();
    v23 = swift_retain();
    v24 = specialized find<A>(_:key:)(v23);
    if (v24)
    {
      v25 = *(_QWORD *)(v24 + 72);
      swift_retain();
      swift_release();
      if (v25)
        goto LABEL_25;
    }
    else
    {
      swift_release();
    }
    v26 = swift_retain();
    v27 = specialized closure #1 in PropertyList.subscript.getter(v26);
    swift_release();
    if ((v27 & 1) == 0)
    {
      if (!a2)
        goto LABEL_36;
      swift_retain();
      v25 = a2;
      goto LABEL_25;
    }
    if (one-time initialization token for velocityTracking != -1)
      goto LABEL_68;
    goto LABEL_22;
  }
  if (*(_BYTE *)(a1 + 32) == 1)
    goto LABEL_11;
  v21 = *(_QWORD *)(a4 + 56);
  if (!v21)
    return;
  while (1)
  {
    v37 = *(_OWORD *)(a1 + 16);
    v73 = *(float64x2_t *)a1;
    v74 = v37;
    swift_retain();
    v72 = 0;
    if ((specialized AnimatorState.update(_:at:environment:)(&v73, v18) & 1) == 0)
    {
      if (one-time initialization token for shared != -1)
        swift_once();
      swift_beginAccess();
      v47 = *(double *)(v21 + 72);
      v71 = *(_QWORD *)(v21 + 80);
      v48 = *(unsigned int *)(v21 + 120);
      v49 = *(_BYTE *)(v21 + 124);
      v50 = *(void (**)(uint64_t *, unint64_t, double))((*MEMORY[0x24BEE4EA0] & *(_QWORD *)static CoreGlue.shared)
                                                                       + 0x58);
      v51 = static CoreGlue.shared;
      v70 = v49;
      v50(&v71, v48 | ((unint64_t)v49 << 32), v47);
      swift_release();

      goto LABEL_53;
    }
    swift_retain();
    static os_signpost_type_t.end.getter();
    static os_signpost_type_t.event.getter();
    if ((kdebug_is_enabled() & 1) == 0)
      goto LABEL_50;
    if (one-time initialization token for _signpostLog != -1)
      swift_once();
    v38 = (void *)_signpostLog;
    if ((OS_os_log.signpostsEnabled.getter() & 1) == 0)
    {
LABEL_50:
      swift_release();
      if (*(_QWORD *)(a4 + 56))
      {
LABEL_51:
        specialized AnimatorState.removeListeners()();
        swift_release();
      }
LABEL_52:
      swift_release();
      *(_QWORD *)(a4 + 56) = 0;
LABEL_53:
      v52 = v74;
      *(float64x2_t *)a1 = v73;
      *(_OWORD *)(a1 + 16) = v52;
      *(_BYTE *)(a1 + 32) = 1;
      return;
    }
    v68 = v15;
    swift_retain();
    v39 = v38;
    OSSignpostID.init(log:object:)();
    type metadata accessor for _ContiguousArrayStorage<CVarArg>();
    v40 = swift_allocObject();
    *(_OWORD *)(v40 + 16) = xmmword_235283260;
    CurrentAttribute = AGGraphGetCurrentAttribute();
    v15 = *MEMORY[0x24BE096C0];
    if (CurrentAttribute == (_DWORD)v15)
    {
      __break(1u);
    }
    else
    {
      v42 = (id)AGGraphGetAttributeGraph();
      Counter = AGGraphGetCounter();

      v44 = MEMORY[0x24BEE1ED8];
      *(_QWORD *)(v40 + 56) = MEMORY[0x24BEE1E88];
      *(_QWORD *)(v40 + 64) = v44;
      *(_QWORD *)(v40 + 32) = Counter;
      v45 = AGGraphGetCurrentAttribute();
      if (v45 != (_DWORD)v15)
      {
        v46 = MEMORY[0x24BEE4558];
        *(_QWORD *)(v40 + 96) = MEMORY[0x24BEE44F0];
        *(_QWORD *)(v40 + 104) = v46;
        *(_DWORD *)(v40 + 72) = v45;
        *(_QWORD *)(v40 + 136) = MEMORY[0x24BEE0D00];
        *(_QWORD *)(v40 + 144) = lazy protocol witness table accessor for type String and conformance String();
        *(_QWORD *)(v40 + 112) = 0xD000000000000014;
        *(_QWORD *)(v40 + 120) = 0x80000002352E5DF0;
        os_signpost(_:dso:log:name:signpostID:_:_:)();
        swift_release();
        (*(void (**)(char *, uint64_t))(v68 + 8))(v17, v14);
        swift_bridgeObjectRelease();
        if (*(_QWORD *)(a4 + 56))
          goto LABEL_51;
        goto LABEL_52;
      }
    }
    __break(1u);
LABEL_68:
    swift_once();
LABEL_22:
    v25 = static Animation.velocityTracking;
    swift_retain();
LABEL_25:
    v7 = v8 - v7;
    v6 = v9 - v6;
    v4 = v10 - v4;
    v5 = v69 - v5;
    v18 = *(double *)AGGraphGetValue();
    if (*(_QWORD *)(a4 + 56))
      break;
    type metadata accessor for CombinedAnimationState<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>>.Entry(0, (unint64_t *)&lazy cache variable for type metadata for AnimatorState<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>>, (uint64_t (*)(uint64_t))type metadata accessor for AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>, lazy protocol witness table accessor for type AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>> and conformance AnimatablePair<A, B>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatorState);
    swift_allocObject();
    swift_retain();
    v53 = swift_retain();
    v54 = specialized AnimatorState.init(animation:interval:at:in:)(v53, v7, v6, v4, v5, v18);
    swift_retain();
    v55 = static os_signpost_type_t.begin.getter();
    static os_signpost_type_t.event.getter();
    if ((kdebug_is_enabled() & 1) == 0)
      goto LABEL_62;
    v67 = v55;
    if (one-time initialization token for _signpostLog != -1)
      swift_once();
    v56 = (void *)_signpostLog;
    if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
    {
      v68 = v15;
      swift_retain();
      v57 = v56;
      OSSignpostID.init(log:object:)();
      type metadata accessor for _ContiguousArrayStorage<CVarArg>();
      v58 = swift_allocObject();
      *(_OWORD *)(v58 + 16) = xmmword_235283260;
      v59 = AGGraphGetCurrentAttribute();
      v66 = *MEMORY[0x24BE096C0];
      if (v59 == v66)
        goto LABEL_71;
      v60 = (id)AGGraphGetAttributeGraph();
      v65 = AGGraphGetCounter();

      v61 = MEMORY[0x24BEE1ED8];
      *(_QWORD *)(v58 + 56) = MEMORY[0x24BEE1E88];
      *(_QWORD *)(v58 + 64) = v61;
      *(_QWORD *)(v58 + 32) = v65;
      v62 = AGGraphGetCurrentAttribute();
      if (v62 == v66)
        goto LABEL_72;
      v63 = MEMORY[0x24BEE4558];
      *(_QWORD *)(v58 + 96) = MEMORY[0x24BEE44F0];
      *(_QWORD *)(v58 + 104) = v63;
      *(_DWORD *)(v58 + 72) = v62;
      *(_QWORD *)(v58 + 136) = MEMORY[0x24BEE0D00];
      *(_QWORD *)(v58 + 144) = lazy protocol witness table accessor for type String and conformance String();
      *(_QWORD *)(v58 + 112) = 0xD000000000000014;
      *(_QWORD *)(v58 + 120) = 0x80000002352E5DF0;
      os_signpost(_:dso:log:name:signpostID:_:_:)();
      swift_release();
      v15 = v68;
      (*(void (**)(char *, uint64_t))(v68 + 8))(v17, v14);
      swift_bridgeObjectRelease();
    }
    else
    {
LABEL_62:
      swift_release();
    }
    swift_release();
    *(_QWORD *)(a4 + 56) = v54;
    if (v54)
    {
LABEL_35:
      swift_retain();
      specialized AnimatorState.addListeners(transaction:)();
      swift_release();
      swift_release();
      goto LABEL_36;
    }
LABEL_64:
    __break(1u);
LABEL_36:
    swift_release();
    v22 = v69;
LABEL_37:
    *(double *)(a4 + 16) = v8;
    *(double *)(a4 + 24) = v9;
    *(double *)(a4 + 32) = v10;
    *(double *)(a4 + 40) = v22;
    *(_BYTE *)(a4 + 48) = 0;
    v21 = *(_QWORD *)(a4 + 56);
    if (!v21)
      return;
  }
  swift_retain();
  LOBYTE(v73.f64[0]) = 0;
  specialized AnimatorState.combine(newAnimation:newInterval:at:in:environment:)(v25, v7, v6, v4, v5, v18);
  swift_retain();
  v28 = static os_signpost_type_t.event.getter();
  static os_signpost_type_t.event.getter();
  if ((kdebug_is_enabled() & 1) == 0)
    goto LABEL_33;
  v67 = v28;
  if (one-time initialization token for _signpostLog != -1)
    swift_once();
  v29 = (void *)_signpostLog;
  if ((OS_os_log.signpostsEnabled.getter() & 1) == 0)
  {
LABEL_33:
    swift_release_n();
    goto LABEL_34;
  }
  v68 = v15;
  swift_retain();
  v30 = v29;
  OSSignpostID.init(log:object:)();
  type metadata accessor for _ContiguousArrayStorage<CVarArg>();
  v31 = swift_allocObject();
  *(_OWORD *)(v31 + 16) = xmmword_235283260;
  v32 = AGGraphGetCurrentAttribute();
  v66 = *MEMORY[0x24BE096C0];
  if (v32 != v66)
  {
    v33 = (id)AGGraphGetAttributeGraph();
    v65 = AGGraphGetCounter();

    v34 = MEMORY[0x24BEE1ED8];
    *(_QWORD *)(v31 + 56) = MEMORY[0x24BEE1E88];
    *(_QWORD *)(v31 + 64) = v34;
    *(_QWORD *)(v31 + 32) = v65;
    v35 = AGGraphGetCurrentAttribute();
    if (v35 == v66)
      goto LABEL_70;
    v36 = MEMORY[0x24BEE4558];
    *(_QWORD *)(v31 + 96) = MEMORY[0x24BEE44F0];
    *(_QWORD *)(v31 + 104) = v36;
    *(_DWORD *)(v31 + 72) = v35;
    *(_QWORD *)(v31 + 136) = MEMORY[0x24BEE0D00];
    *(_QWORD *)(v31 + 144) = lazy protocol witness table accessor for type String and conformance String();
    *(_QWORD *)(v31 + 112) = 0xD000000000000014;
    *(_QWORD *)(v31 + 120) = 0x80000002352E5DF0;
    os_signpost(_:dso:log:name:signpostID:_:_:)();
    swift_release_n();
    v15 = v68;
    (*(void (**)(char *, uint64_t))(v68 + 8))(v17, v14);
    swift_bridgeObjectRelease();
LABEL_34:
    if (*(_QWORD *)(a4 + 56))
      goto LABEL_35;
    goto LABEL_64;
  }
  __break(1u);
LABEL_70:
  __break(1u);
LABEL_71:
  __break(1u);
LABEL_72:
  __break(1u);
}

{
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  double v17;
  double *Value;
  char v19;
  double *v20;
  double *v21;
  float v22;
  int8x16_t v23;
  int8x16_t v24;
  float v25;
  float v26;
  BOOL v27;
  BOOL v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  float v35;
  uint64_t v36;
  int v37;
  void *v38;
  id v39;
  uint64_t v40;
  int v41;
  id v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  int8x16_t v47;
  float32x4_t v48;
  float32x4_t v49;
  void *v50;
  id v51;
  uint64_t v52;
  int CurrentAttribute;
  int v54;
  id v55;
  uint64_t Counter;
  uint64_t v57;
  int v58;
  uint64_t v59;
  double v60;
  uint64_t v61;
  unsigned __int8 v62;
  void (*v63)(float32x4_t *, unint64_t, double);
  void *v64;
  float32x4_t v65;
  float32x4_t v66;
  __int32 v67;
  __int32 v68;
  __int32 v69;
  __int32 v70;
  uint64_t v71;
  __int32 v72;
  __int32 v73;
  __int32 v74;
  uint64_t v75;
  uint64_t v76;
  int v77;
  void *v78;
  id v79;
  uint64_t v80;
  int v81;
  id v82;
  uint64_t v83;
  int v84;
  uint64_t v85;
  uint64_t v86;
  int v87;
  int v88;
  uint64_t v89;
  float v90;
  float v91;
  int8x16_t v92;
  float32x4_t v93;
  char v94;
  float32x4_t v95;
  float v96[6];
  float32x4_t v97[2];

  v13 = type metadata accessor for OSSignpostID();
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x24BDAC7A8](v13);
  v16 = (char *)&v86 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for infinity != -1)
    swift_once();
  v17 = -*(double *)&static Time.infinity;
  if (*(_QWORD *)(a4 + 32))
  {
    Value = (double *)AGGraphGetValue();
    if ((v19 & 1) != 0)
      v17 = *Value;
  }
  v20 = (double *)&unk_254266000;
  if (*(_DWORD *)(a4 + 40) != *(_DWORD *)AGGraphGetValue() >> 1)
  {
    specialized AnimatableAttributeHelper.reset()();
    *(_BYTE *)(a1 + 16) = 1;
    goto LABEL_11;
  }
  if (*(_BYTE *)(a1 + 16) == 1)
  {
LABEL_11:
    v4 = *(float *)a1;
    v5 = *(float *)(a1 + 4);
    v6 = *(float *)(a1 + 8);
    v22 = *(float *)(a1 + 12);
    if (one-time initialization token for legacyInterpolation != -1)
      swift_once();
    swift_beginAccess();
    if ((static Color.Resolved.legacyInterpolation & 1) == 0)
    {
      v95.i8[0] = 2;
      *(float *)v23.i32 = v4;
      ResolvedGradient.ColorSpace.convertIn(_:)(v96, v23, v5, LODWORD(v6), v22, v24);
      v4 = v96[0];
      v5 = v96[1];
      v6 = v96[2];
      v22 = v96[3];
    }
    v7 = v4 * 128.0;
    v9 = v5 * 128.0;
    v25 = v6 * 128.0;
    v26 = v22 * 128.0;
    if ((*(_BYTE *)(a4 + 28) & 1) != 0)
      goto LABEL_47;
    v4 = *(float *)(a4 + 12);
    v6 = *(float *)(a4 + 16);
    v8 = *(float *)(a4 + 20);
    v5 = *(float *)(a4 + 24);
    v27 = v7 == v4 && v9 == v6;
    v28 = v27 && v25 == v8;
    if (v28 && v26 == v5)
      goto LABEL_47;
    v90 = v25;
    v91 = v22 * 128.0;
    v92.i64[0] = v14;
    AGGraphClearUpdate();
    AGGraphGetValue();
    swift_retain();
    AGGraphSetUpdate();
    v30 = swift_retain();
    v31 = specialized find<A>(_:key:)(v30);
    if (v31)
    {
      v32 = *(_QWORD *)(v31 + 72);
      swift_retain();
      swift_release();
      if (v32)
        goto LABEL_35;
    }
    else
    {
      swift_release();
    }
    v33 = swift_retain();
    v34 = specialized closure #1 in PropertyList.subscript.getter(v33);
    swift_release();
    if ((v34 & 1) == 0)
    {
      v20 = (double *)&unk_254266000;
      if (!a2)
        goto LABEL_83;
      swift_retain();
      v32 = a2;
      goto LABEL_35;
    }
    v20 = (double *)&unk_254266000;
    if (one-time initialization token for velocityTracking != -1)
      goto LABEL_86;
    goto LABEL_32;
  }
  v21 = (double *)&unk_254266000;
  v20 = *(double **)(a4 + 32);
  if (!v20)
    return;
  while (1)
  {
    v92 = *(int8x16_t *)a1;
    v46 = *((_QWORD *)v21 + 183);
    swift_retain();
    if (v46 != -1)
      swift_once();
    swift_beginAccess();
    if ((static Color.Resolved.legacyInterpolation & 1) != 0)
    {
      v48 = (float32x4_t)v92;
    }
    else
    {
      v97[0].i8[0] = 2;
      ResolvedGradient.ColorSpace.convertIn(_:)(v95.f32, v92, *(float *)&v92.i32[1], v92.u32[2], *(float *)&v92.i32[3], v47);
      v48 = v95;
    }
    v49.i64[0] = 0x4300000043000000;
    v49.i64[1] = 0x4300000043000000;
    v97[0] = vmulq_f32(v48, v49);
    v95.i8[0] = 0;
    if ((specialized AnimatorState.update(_:at:environment:)(v97, v17) & 1) == 0)
      break;
    swift_retain();
    static os_signpost_type_t.end.getter();
    static os_signpost_type_t.event.getter();
    if ((kdebug_is_enabled() & 1) == 0)
      goto LABEL_65;
    if (one-time initialization token for _signpostLog != -1)
      swift_once();
    v50 = (void *)_signpostLog;
    if ((OS_os_log.signpostsEnabled.getter() & 1) == 0)
    {
LABEL_65:
      swift_release();
      if (*(_QWORD *)(a4 + 32))
      {
LABEL_66:
        specialized AnimatorState.removeListeners()();
        swift_release();
      }
LABEL_67:
      *(_QWORD *)(a4 + 32) = 0;
      goto LABEL_68;
    }
    v92.i64[0] = v14;
    swift_retain();
    v51 = v50;
    OSSignpostID.init(log:object:)();
    type metadata accessor for _ContiguousArrayStorage<CVarArg>();
    v52 = swift_allocObject();
    *(_OWORD *)(v52 + 16) = xmmword_235283260;
    CurrentAttribute = AGGraphGetCurrentAttribute();
    v54 = *MEMORY[0x24BE096C0];
    if (CurrentAttribute == *MEMORY[0x24BE096C0])
    {
      __break(1u);
    }
    else
    {
      v55 = (id)AGGraphGetAttributeGraph();
      Counter = AGGraphGetCounter();

      v57 = MEMORY[0x24BEE1ED8];
      *(_QWORD *)(v52 + 56) = MEMORY[0x24BEE1E88];
      *(_QWORD *)(v52 + 64) = v57;
      *(_QWORD *)(v52 + 32) = Counter;
      v58 = AGGraphGetCurrentAttribute();
      if (v58 != v54)
      {
        v59 = MEMORY[0x24BEE4558];
        *(_QWORD *)(v52 + 96) = MEMORY[0x24BEE44F0];
        *(_QWORD *)(v52 + 104) = v59;
        *(_DWORD *)(v52 + 72) = v58;
        *(_QWORD *)(v52 + 136) = MEMORY[0x24BEE0D00];
        *(_QWORD *)(v52 + 144) = lazy protocol witness table accessor for type String and conformance String();
        *(_QWORD *)(v52 + 112) = 0x65766C6F7365525FLL;
        *(_QWORD *)(v52 + 120) = 0xE900000000000064;
        os_signpost(_:dso:log:name:signpostID:_:_:)();
        swift_release();
        (*(void (**)(char *, uint64_t))(v92.i64[0] + 8))(v16, v13);
        swift_bridgeObjectRelease();
        if (*(_QWORD *)(a4 + 32))
          goto LABEL_66;
        goto LABEL_67;
      }
    }
    __break(1u);
LABEL_86:
    swift_once();
LABEL_32:
    v32 = static Animation.velocityTracking;
    swift_retain();
LABEL_35:
    v35 = v7 - v4;
    v6 = v9 - v6;
    v4 = v90 - v8;
    v5 = v91 - v5;
    v17 = *(double *)AGGraphGetValue();
    v36 = *(_QWORD *)(a4 + 32);
    v89 = v32;
    if (v36)
    {
      swift_retain();
      LOBYTE(v96[0]) = 0;
      specialized AnimatorState.combine(newAnimation:newInterval:at:in:environment:)(v32, v35, v6, v4, v5, v17);
      swift_retain();
      v37 = static os_signpost_type_t.event.getter();
      static os_signpost_type_t.event.getter();
      if ((kdebug_is_enabled() & 1) == 0)
        goto LABEL_43;
      v88 = v37;
      if (one-time initialization token for _signpostLog != -1)
        swift_once();
      v38 = (void *)_signpostLog;
      if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
      {
        swift_retain();
        v39 = v38;
        OSSignpostID.init(log:object:)();
        type metadata accessor for _ContiguousArrayStorage<CVarArg>();
        v40 = swift_allocObject();
        *(_OWORD *)(v40 + 16) = xmmword_235283260;
        v41 = AGGraphGetCurrentAttribute();
        v87 = *MEMORY[0x24BE096C0];
        if (v41 == v87)
        {
          __break(1u);
LABEL_88:
          __break(1u);
LABEL_89:
          __break(1u);
LABEL_90:
          __break(1u);
          return;
        }
        v42 = (id)AGGraphGetAttributeGraph();
        v86 = AGGraphGetCounter();

        v43 = MEMORY[0x24BEE1ED8];
        *(_QWORD *)(v40 + 56) = MEMORY[0x24BEE1E88];
        *(_QWORD *)(v40 + 64) = v43;
        *(_QWORD *)(v40 + 32) = v86;
        v44 = AGGraphGetCurrentAttribute();
        if (v44 == v87)
          goto LABEL_88;
        v45 = MEMORY[0x24BEE4558];
        *(_QWORD *)(v40 + 96) = MEMORY[0x24BEE44F0];
        *(_QWORD *)(v40 + 104) = v45;
        *(_DWORD *)(v40 + 72) = v44;
        *(_QWORD *)(v40 + 136) = MEMORY[0x24BEE0D00];
        *(_QWORD *)(v40 + 144) = lazy protocol witness table accessor for type String and conformance String();
        *(_QWORD *)(v40 + 112) = 0x65766C6F7365525FLL;
        *(_QWORD *)(v40 + 120) = 0xE900000000000064;
        os_signpost(_:dso:log:name:signpostID:_:_:)();
        swift_release_n();
        (*(void (**)(char *, uint64_t))(v92.i64[0] + 8))(v16, v13);
        swift_bridgeObjectRelease();
        v20 = (double *)&unk_254266000;
      }
      else
      {
LABEL_43:
        swift_release_n();
      }
      if (*(_QWORD *)(a4 + 32))
      {
LABEL_45:
        swift_retain();
        specialized AnimatorState.addListeners(transaction:)();
        swift_release();
        swift_release();
        swift_release();
        v14 = v92.i64[0];
        goto LABEL_46;
      }
    }
    else
    {
      type metadata accessor for CombinedAnimationState<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>>.Entry(0, &lazy cache variable for type metadata for AnimatorState<AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>, type metadata accessor for AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>, lazy protocol witness table accessor for type AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>> and conformance AnimatablePair<A, B>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatorState);
      swift_allocObject();
      swift_retain();
      v75 = swift_retain();
      v76 = specialized AnimatorState.init(animation:interval:at:in:)(v75, v35, v6, v4, v5, v17);
      swift_retain();
      v77 = static os_signpost_type_t.begin.getter();
      static os_signpost_type_t.event.getter();
      if ((kdebug_is_enabled() & 1) == 0)
        goto LABEL_80;
      v88 = v77;
      if (one-time initialization token for _signpostLog != -1)
        swift_once();
      v78 = (void *)_signpostLog;
      if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
      {
        swift_retain();
        v79 = v78;
        OSSignpostID.init(log:object:)();
        type metadata accessor for _ContiguousArrayStorage<CVarArg>();
        v80 = swift_allocObject();
        *(_OWORD *)(v80 + 16) = xmmword_235283260;
        v81 = AGGraphGetCurrentAttribute();
        v87 = *MEMORY[0x24BE096C0];
        if (v81 == v87)
          goto LABEL_89;
        v82 = (id)AGGraphGetAttributeGraph();
        v86 = AGGraphGetCounter();

        v83 = MEMORY[0x24BEE1ED8];
        *(_QWORD *)(v80 + 56) = MEMORY[0x24BEE1E88];
        *(_QWORD *)(v80 + 64) = v83;
        *(_QWORD *)(v80 + 32) = v86;
        v84 = AGGraphGetCurrentAttribute();
        if (v84 == v87)
          goto LABEL_90;
        v85 = MEMORY[0x24BEE4558];
        *(_QWORD *)(v80 + 96) = MEMORY[0x24BEE44F0];
        *(_QWORD *)(v80 + 104) = v85;
        *(_DWORD *)(v80 + 72) = v84;
        *(_QWORD *)(v80 + 136) = MEMORY[0x24BEE0D00];
        *(_QWORD *)(v80 + 144) = lazy protocol witness table accessor for type String and conformance String();
        *(_QWORD *)(v80 + 112) = 0x65766C6F7365525FLL;
        *(_QWORD *)(v80 + 120) = 0xE900000000000064;
        os_signpost(_:dso:log:name:signpostID:_:_:)();
        swift_release();
        (*(void (**)(char *, uint64_t))(v92.i64[0] + 8))(v16, v13);
        swift_bridgeObjectRelease();
        v20 = (double *)&unk_254266000;
      }
      else
      {
LABEL_80:
        swift_release();
      }
      swift_release();
      *(_QWORD *)(a4 + 32) = v76;
      if (v76)
        goto LABEL_45;
    }
    __break(1u);
LABEL_83:
    swift_release();
    v14 = v92.i64[0];
LABEL_46:
    v26 = v91;
    v25 = v90;
LABEL_47:
    v21 = v20;
    *(_QWORD *)(a4 + 12) = LODWORD(v7) | ((unint64_t)LODWORD(v9) << 32);
    *(_QWORD *)(a4 + 20) = LODWORD(v25) | ((unint64_t)LODWORD(v26) << 32);
    *(_BYTE *)(a4 + 28) = 0;
    v20 = *(double **)(a4 + 32);
    if (!v20)
      return;
  }
  if (one-time initialization token for shared != -1)
    swift_once();
  swift_beginAccess();
  v60 = v20[7];
  v93.i64[0] = (uint64_t)v20[8];
  v61 = *((unsigned int *)v20 + 22);
  v62 = *((_BYTE *)v20 + 92);
  v63 = *(void (**)(float32x4_t *, unint64_t, double))((*MEMORY[0x24BEE4EA0] & *(_QWORD *)static CoreGlue.shared)
                                                                       + 0x58);
  v64 = static CoreGlue.shared;
  v94 = v62;
  v63(&v93, v61 | ((unint64_t)v62 << 32), v60);

LABEL_68:
  v65.i64[0] = 0x3C0000003C000000;
  v65.i64[1] = 0x3C0000003C000000;
  v66 = vmulq_f32(v97[0], v65);
  if (static Color.Resolved.legacyInterpolation == 1)
  {
    v92 = (int8x16_t)v66;
    swift_release();
    v68 = v92.i32[1];
    v67 = v92.i32[0];
    v70 = v92.i32[3];
    v69 = v92.i32[2];
  }
  else
  {
    v94 = 2;
    v93 = v66;
    *(float *)&v71 = ResolvedGradient.ColorSpace.convertOut(_:)(v93.f32);
    v92.i64[0] = v71;
    v68 = v72;
    v69 = v73;
    v70 = v74;
    swift_release();
    v67 = v92.i32[0];
  }
  *(_DWORD *)a1 = v67;
  *(_DWORD *)(a1 + 4) = v68;
  *(_DWORD *)(a1 + 8) = v69;
  *(_DWORD *)(a1 + 12) = v70;
  *(_BYTE *)(a1 + 16) = 1;
}

{
  specialized AnimatableAttributeHelper.update(value:defaultAnimation:environment:sampleCollector:)(a1, a2, a3, a4, (void (*)(void))specialized AnimatableAttributeHelper.reset());
}

{
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  double v18;
  double *Value;
  char v20;
  uint64_t v21;
  double v22;
  double v23;
  double v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  double v30;
  double v31;
  int v32;
  void *v33;
  char v34;
  id v35;
  uint64_t v36;
  int v37;
  id v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  void *v44;
  char v45;
  id v46;
  uint64_t v47;
  int v48;
  id v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  __int128 v54;
  void *v55;
  id v56;
  uint64_t v57;
  int CurrentAttribute;
  id v59;
  uint64_t Counter;
  uint64_t v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  double v65;
  uint64_t v66;
  unsigned __int8 v67;
  void (*v68)(uint64_t *, unint64_t, double);
  void *v69;
  uint64_t v70;
  __int128 v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  int v75;
  uint64_t v76;
  double v77;
  double v78;
  double v79;
  double v80;
  double v81;
  unsigned __int8 v82;
  uint64_t v83;
  char v84;
  float64x2_t v85;
  __int128 v86;
  uint64_t v87;
  double v88;
  double v89;
  double v90;
  double v91;
  double v92;

  v14 = type metadata accessor for OSSignpostID();
  v15 = *(_QWORD *)(v14 - 8);
  MEMORY[0x24BDAC7A8](v14);
  v17 = (char *)&v72 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for infinity == -1)
    goto LABEL_2;
LABEL_68:
  swift_once();
LABEL_2:
  v18 = -*(double *)&static Time.infinity;
  if (*(_QWORD *)(a4 + 64))
  {
    Value = (double *)AGGraphGetValue();
    if ((v20 & 1) != 0)
      v18 = *Value;
  }
  if (*(_DWORD *)(a4 + 72) == *(_DWORD *)AGGraphGetValue() >> 1)
  {
    if (*(_BYTE *)(a1 + 48) != 1)
    {
      v21 = *(_QWORD *)(a4 + 64);
      if (v21)
        goto LABEL_47;
      return;
    }
  }
  else
  {
    specialized AnimatableAttributeHelper.reset()();
    *(_BYTE *)(a1 + 48) = 1;
  }
  v4 = *(double *)a1;
  v5 = *(double *)(a1 + 8);
  v22 = *(double *)(a1 + 16);
  v23 = *(double *)(a1 + 24);
  v24 = *(double *)(a1 + 40);
  if ((*(_BYTE *)(a4 + 56) & 1) == 0)
  {
    v10 = *(double *)(a4 + 40);
    v9 = *(double *)(a4 + 48);
    v7 = *(double *)(a4 + 24);
    v8 = *(double *)(a4 + 32);
    v6 = *(double *)(a4 + 16);
    if (v4 != v6 || v5 != v7 || v22 != v8 || v23 != v10 || v24 != v9)
    {
      v79 = *(double *)(a1 + 40);
      v80 = v23;
      v81 = v22;
      AGGraphClearUpdate();
      AGGraphGetValue();
      swift_retain();
      AGGraphSetUpdate();
      v25 = swift_retain();
      v26 = specialized find<A>(_:key:)(v25);
      if (v26)
      {
        v27 = *(_QWORD *)(v26 + 72);
        swift_retain();
        swift_release();
        if (v27)
          goto LABEL_25;
      }
      else
      {
        swift_release();
      }
      v28 = swift_retain();
      v29 = specialized closure #1 in PropertyList.subscript.getter(v28);
      swift_release();
      if ((v29 & 1) != 0)
      {
        if (one-time initialization token for velocityTracking != -1)
          goto LABEL_71;
        goto LABEL_22;
      }
      if (a2)
      {
        swift_retain();
        v27 = a2;
        goto LABEL_25;
      }
      goto LABEL_45;
    }
  }
  while (1)
  {
    *(double *)(a4 + 16) = v4;
    *(double *)(a4 + 24) = v5;
    *(double *)(a4 + 32) = v22;
    *(double *)(a4 + 40) = v23;
    *(double *)(a4 + 48) = v24;
    *(_BYTE *)(a4 + 56) = 0;
    v21 = *(_QWORD *)(a4 + 64);
    if (!v21)
      return;
LABEL_47:
    v53 = *(_QWORD *)(a1 + 40);
    v54 = *(_OWORD *)(a1 + 16);
    v85 = *(float64x2_t *)a1;
    v86 = v54;
    v87 = v53;
    swift_retain();
    v84 = 0;
    if ((specialized AnimatorState.update(_:at:environment:)(&v85, v18) & 1) == 0)
      break;
    swift_retain();
    static os_signpost_type_t.end.getter();
    static os_signpost_type_t.event.getter();
    if ((kdebug_is_enabled() & 1) == 0)
      goto LABEL_59;
    if (one-time initialization token for _signpostLog != -1)
      swift_once();
    v55 = (void *)_signpostLog;
    if ((OS_os_log.signpostsEnabled.getter() & 1) == 0)
    {
LABEL_59:
      v64 = swift_release();
      if (!*(_QWORD *)(a4 + 64))
      {
LABEL_61:
        swift_release();
        *(_QWORD *)(a4 + 64) = 0;
        goto LABEL_62;
      }
LABEL_60:
      specialized AnimatorState.removeListeners()(v64);
      swift_release();
      goto LABEL_61;
    }
    v76 = v15;
    swift_retain();
    v56 = v55;
    OSSignpostID.init(log:object:)();
    type metadata accessor for _ContiguousArrayStorage<CVarArg>();
    v57 = swift_allocObject();
    *(_OWORD *)(v57 + 16) = xmmword_235283260;
    CurrentAttribute = AGGraphGetCurrentAttribute();
    v15 = *MEMORY[0x24BE096C0];
    if (CurrentAttribute == (_DWORD)v15)
    {
      __break(1u);
    }
    else
    {
      v59 = (id)AGGraphGetAttributeGraph();
      Counter = AGGraphGetCounter();

      v61 = MEMORY[0x24BEE1ED8];
      *(_QWORD *)(v57 + 56) = MEMORY[0x24BEE1E88];
      *(_QWORD *)(v57 + 64) = v61;
      *(_QWORD *)(v57 + 32) = Counter;
      v62 = AGGraphGetCurrentAttribute();
      if (v62 != (_DWORD)v15)
      {
        v63 = MEMORY[0x24BEE4558];
        *(_QWORD *)(v57 + 96) = MEMORY[0x24BEE44F0];
        *(_QWORD *)(v57 + 104) = v63;
        *(_DWORD *)(v57 + 72) = v62;
        *(_QWORD *)(v57 + 136) = MEMORY[0x24BEE0D00];
        *(_QWORD *)(v57 + 144) = lazy protocol witness table accessor for type String and conformance String();
        *(_QWORD *)(v57 + 112) = 0x7465736E495FLL;
        *(_QWORD *)(v57 + 120) = 0xE600000000000000;
        os_signpost(_:dso:log:name:signpostID:_:_:)();
        swift_release();
        (*(void (**)(char *, uint64_t))(v76 + 8))(v17, v14);
        v64 = swift_bridgeObjectRelease();
        if (!*(_QWORD *)(a4 + 64))
          goto LABEL_61;
        goto LABEL_60;
      }
    }
    __break(1u);
LABEL_71:
    swift_once();
LABEL_22:
    v27 = static Animation.velocityTracking;
    swift_retain();
LABEL_25:
    v78 = v4;
    v30 = v4 - v6;
    v77 = v5;
    v31 = v5 - v7;
    v8 = v81 - v8;
    v6 = v80 - v10;
    v7 = v79 - v9;
    v18 = *(double *)AGGraphGetValue();
    if (*(_QWORD *)(a4 + 64))
    {
      v88 = v30;
      v89 = v31;
      v90 = v8;
      v91 = v6;
      v92 = v7;
      swift_retain();
      LOBYTE(v85.f64[0]) = 0;
      specialized AnimatorState.combine(newAnimation:newInterval:at:in:environment:)(v27, (uint64_t)&v88, v18);
      swift_retain();
      v32 = static os_signpost_type_t.event.getter();
      static os_signpost_type_t.event.getter();
      if ((kdebug_is_enabled() & 1) != 0)
      {
        v75 = v32;
        if (one-time initialization token for _signpostLog != -1)
          swift_once();
        v33 = (void *)_signpostLog;
        v34 = OS_os_log.signpostsEnabled.getter();
        v4 = v78;
        v5 = v77;
        if ((v34 & 1) != 0)
        {
          v76 = v15;
          swift_retain();
          v35 = v33;
          OSSignpostID.init(log:object:)();
          type metadata accessor for _ContiguousArrayStorage<CVarArg>();
          v36 = swift_allocObject();
          *(_OWORD *)(v36 + 16) = xmmword_235283260;
          v37 = AGGraphGetCurrentAttribute();
          v74 = *MEMORY[0x24BE096C0];
          if (v37 == v74)
          {
            __break(1u);
LABEL_73:
            __break(1u);
LABEL_74:
            __break(1u);
LABEL_75:
            __break(1u);
            return;
          }
          v38 = (id)AGGraphGetAttributeGraph();
          v73 = AGGraphGetCounter();

          v39 = MEMORY[0x24BEE1ED8];
          *(_QWORD *)(v36 + 56) = MEMORY[0x24BEE1E88];
          *(_QWORD *)(v36 + 64) = v39;
          *(_QWORD *)(v36 + 32) = v73;
          v40 = AGGraphGetCurrentAttribute();
          if (v40 == v74)
            goto LABEL_73;
          v41 = MEMORY[0x24BEE4558];
          *(_QWORD *)(v36 + 96) = MEMORY[0x24BEE44F0];
          *(_QWORD *)(v36 + 104) = v41;
          *(_DWORD *)(v36 + 72) = v40;
          *(_QWORD *)(v36 + 136) = MEMORY[0x24BEE0D00];
          *(_QWORD *)(v36 + 144) = lazy protocol witness table accessor for type String and conformance String();
          *(_QWORD *)(v36 + 112) = 0x7465736E495FLL;
          *(_QWORD *)(v36 + 120) = 0xE600000000000000;
          os_signpost(_:dso:log:name:signpostID:_:_:)();
          swift_release_n();
          v15 = v76;
          (*(void (**)(char *, uint64_t))(v76 + 8))(v17, v14);
          swift_bridgeObjectRelease();
        }
        else
        {
          swift_release_n();
        }
      }
      else
      {
        swift_release_n();
        v4 = v78;
        v5 = v77;
      }
      a2 = *(_QWORD *)(a4 + 64);
      if (!a2)
      {
LABEL_67:
        __break(1u);
        goto LABEL_68;
      }
    }
    else
    {
      v88 = v30;
      v89 = v31;
      v90 = v8;
      v91 = v6;
      v92 = v7;
      type metadata accessor for AnimatorState<AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>, CGFloat>>(0);
      swift_allocObject();
      swift_retain();
      v42 = swift_retain();
      a2 = specialized AnimatorState.init(animation:interval:at:in:)(v42, (uint64_t)&v88, v18);
      swift_retain();
      v43 = static os_signpost_type_t.begin.getter();
      static os_signpost_type_t.event.getter();
      if ((kdebug_is_enabled() & 1) != 0)
      {
        v75 = v43;
        if (one-time initialization token for _signpostLog != -1)
          swift_once();
        v44 = (void *)_signpostLog;
        v45 = OS_os_log.signpostsEnabled.getter();
        v4 = v78;
        v5 = v77;
        if ((v45 & 1) != 0)
        {
          v76 = v15;
          swift_retain();
          v46 = v44;
          OSSignpostID.init(log:object:)();
          type metadata accessor for _ContiguousArrayStorage<CVarArg>();
          v47 = swift_allocObject();
          *(_OWORD *)(v47 + 16) = xmmword_235283260;
          v48 = AGGraphGetCurrentAttribute();
          v74 = *MEMORY[0x24BE096C0];
          if (v48 == v74)
            goto LABEL_74;
          v49 = (id)AGGraphGetAttributeGraph();
          v73 = AGGraphGetCounter();

          v50 = MEMORY[0x24BEE1ED8];
          *(_QWORD *)(v47 + 56) = MEMORY[0x24BEE1E88];
          *(_QWORD *)(v47 + 64) = v50;
          *(_QWORD *)(v47 + 32) = v73;
          v51 = AGGraphGetCurrentAttribute();
          if (v51 == v74)
            goto LABEL_75;
          v52 = MEMORY[0x24BEE4558];
          *(_QWORD *)(v47 + 96) = MEMORY[0x24BEE44F0];
          *(_QWORD *)(v47 + 104) = v52;
          *(_DWORD *)(v47 + 72) = v51;
          *(_QWORD *)(v47 + 136) = MEMORY[0x24BEE0D00];
          *(_QWORD *)(v47 + 144) = lazy protocol witness table accessor for type String and conformance String();
          *(_QWORD *)(v47 + 112) = 0x7465736E495FLL;
          *(_QWORD *)(v47 + 120) = 0xE600000000000000;
          os_signpost(_:dso:log:name:signpostID:_:_:)();
          swift_release();
          v15 = v76;
          (*(void (**)(char *, uint64_t))(v76 + 8))(v17, v14);
          swift_bridgeObjectRelease();
        }
        else
        {
          swift_release();
        }
      }
      else
      {
        swift_release();
        v4 = v78;
        v5 = v77;
      }
      swift_release();
      *(_QWORD *)(a4 + 64) = a2;
      if (!a2)
        goto LABEL_67;
    }
    swift_retain();
    specialized AnimatorState.addListeners(transaction:)();
    swift_release();
    swift_release();
LABEL_45:
    swift_release();
    v22 = v81;
    v23 = v80;
    v24 = v79;
  }
  if (one-time initialization token for shared != -1)
    swift_once();
  swift_beginAccess();
  v65 = *(double *)(v21 + 80);
  v83 = *(_QWORD *)(v21 + 88);
  v66 = *(unsigned int *)(v21 + 136);
  v67 = *(_BYTE *)(v21 + 140);
  v68 = *(void (**)(uint64_t *, unint64_t, double))((*MEMORY[0x24BEE4EA0] & *(_QWORD *)static CoreGlue.shared)
                                                                   + 0x58);
  v69 = static CoreGlue.shared;
  v82 = v67;
  v68(&v83, v66 | ((unint64_t)v67 << 32), v65);
  swift_release();

LABEL_62:
  v70 = v87;
  v71 = v86;
  *(float64x2_t *)a1 = v85;
  *(_OWORD *)(a1 + 16) = v71;
  *(_QWORD *)(a1 + 40) = v70;
  *(_BYTE *)(a1 + 48) = 1;
}

{
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  double v18;
  double *Value;
  char v20;
  uint64_t v21;
  double v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  int v28;
  void *v29;
  id v30;
  uint64_t v31;
  int v32;
  id v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  __int128 v37;
  void *v38;
  id v39;
  uint64_t v40;
  int CurrentAttribute;
  id v42;
  uint64_t Counter;
  uint64_t v44;
  int v45;
  uint64_t v46;
  double v47;
  uint64_t v48;
  unsigned __int8 v49;
  void (*v50)(uint64_t *, unint64_t, double);
  void *v51;
  __int128 v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  void *v56;
  id v57;
  uint64_t v58;
  int v59;
  id v60;
  uint64_t v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  int v67;
  uint64_t v68;
  double v69;
  unsigned __int8 v70;
  uint64_t v71;
  char v72;
  float64x2_t v73;
  __int128 v74;

  v14 = type metadata accessor for OSSignpostID();
  v15 = *(_QWORD *)(v14 - 8);
  MEMORY[0x24BDAC7A8](v14);
  v17 = (char *)&v64 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for infinity != -1)
    swift_once();
  v18 = -*(double *)&static Time.infinity;
  if (*(_QWORD *)(a4 + 56))
  {
    Value = (double *)AGGraphGetValue();
    if ((v20 & 1) != 0)
      v18 = *Value;
  }
  if (*(_DWORD *)(a4 + 64) != *(_DWORD *)AGGraphGetValue() >> 1)
  {
    specialized AnimatableAttributeHelper.reset()();
    *(_BYTE *)(a1 + 33) = 1;
LABEL_11:
    v8 = *(double *)a1;
    v9 = *(double *)(a1 + 8);
    v10 = *(double *)(a1 + 16);
    v22 = *(double *)(a1 + 24);
    if ((*(_BYTE *)(a4 + 48) & 1) != 0)
      goto LABEL_37;
    v4 = *(double *)(a4 + 32);
    v5 = *(double *)(a4 + 40);
    v7 = *(double *)(a4 + 16);
    v6 = *(double *)(a4 + 24);
    if (v8 == v7 && v9 == v6 && v10 == v4 && v22 == v5)
      goto LABEL_37;
    v69 = *(double *)(a1 + 24);
    AGGraphClearUpdate();
    AGGraphGetValue();
    swift_retain();
    AGGraphSetUpdate();
    v23 = swift_retain();
    v24 = specialized find<A>(_:key:)(v23);
    if (v24)
    {
      v25 = *(_QWORD *)(v24 + 72);
      swift_retain();
      swift_release();
      if (v25)
        goto LABEL_25;
    }
    else
    {
      swift_release();
    }
    v26 = swift_retain();
    v27 = specialized closure #1 in PropertyList.subscript.getter(v26);
    swift_release();
    if ((v27 & 1) == 0)
    {
      if (!a2)
        goto LABEL_36;
      swift_retain();
      v25 = a2;
      goto LABEL_25;
    }
    if (one-time initialization token for velocityTracking != -1)
      goto LABEL_68;
    goto LABEL_22;
  }
  if (*(_BYTE *)(a1 + 33) == 1)
    goto LABEL_11;
  v21 = *(_QWORD *)(a4 + 56);
  if (!v21)
    return;
  while (1)
  {
    v37 = *(_OWORD *)(a1 + 16);
    v73 = *(float64x2_t *)a1;
    v74 = v37;
    swift_retain();
    v72 = 0;
    if ((specialized AnimatorState.update(_:at:environment:)(&v73, v18) & 1) == 0)
    {
      if (one-time initialization token for shared != -1)
        swift_once();
      swift_beginAccess();
      v47 = *(double *)(v21 + 72);
      v71 = *(_QWORD *)(v21 + 80);
      v48 = *(unsigned int *)(v21 + 120);
      v49 = *(_BYTE *)(v21 + 124);
      v50 = *(void (**)(uint64_t *, unint64_t, double))((*MEMORY[0x24BEE4EA0] & *(_QWORD *)static CoreGlue.shared)
                                                                       + 0x58);
      v51 = static CoreGlue.shared;
      v70 = v49;
      v50(&v71, v48 | ((unint64_t)v49 << 32), v47);
      swift_release();

      goto LABEL_53;
    }
    swift_retain();
    static os_signpost_type_t.end.getter();
    static os_signpost_type_t.event.getter();
    if ((kdebug_is_enabled() & 1) == 0)
      goto LABEL_50;
    if (one-time initialization token for _signpostLog != -1)
      swift_once();
    v38 = (void *)_signpostLog;
    if ((OS_os_log.signpostsEnabled.getter() & 1) == 0)
    {
LABEL_50:
      swift_release();
      if (*(_QWORD *)(a4 + 56))
      {
LABEL_51:
        specialized AnimatorState.removeListeners()();
        swift_release();
      }
LABEL_52:
      swift_release();
      *(_QWORD *)(a4 + 56) = 0;
LABEL_53:
      v52 = v74;
      *(float64x2_t *)a1 = v73;
      *(_OWORD *)(a1 + 16) = v52;
      *(_BYTE *)(a1 + 33) = 1;
      return;
    }
    v68 = v15;
    swift_retain();
    v39 = v38;
    OSSignpostID.init(log:object:)();
    type metadata accessor for _ContiguousArrayStorage<CVarArg>();
    v40 = swift_allocObject();
    *(_OWORD *)(v40 + 16) = xmmword_235283260;
    CurrentAttribute = AGGraphGetCurrentAttribute();
    v15 = *MEMORY[0x24BE096C0];
    if (CurrentAttribute == (_DWORD)v15)
    {
      __break(1u);
    }
    else
    {
      v42 = (id)AGGraphGetAttributeGraph();
      Counter = AGGraphGetCounter();

      v44 = MEMORY[0x24BEE1ED8];
      *(_QWORD *)(v40 + 56) = MEMORY[0x24BEE1E88];
      *(_QWORD *)(v40 + 64) = v44;
      *(_QWORD *)(v40 + 32) = Counter;
      v45 = AGGraphGetCurrentAttribute();
      if (v45 != (_DWORD)v15)
      {
        v46 = MEMORY[0x24BEE4558];
        *(_QWORD *)(v40 + 96) = MEMORY[0x24BEE44F0];
        *(_QWORD *)(v40 + 104) = v46;
        *(_DWORD *)(v40 + 72) = v45;
        *(_QWORD *)(v40 + 136) = MEMORY[0x24BEE0D00];
        *(_QWORD *)(v40 + 144) = lazy protocol witness table accessor for type String and conformance String();
        *(_QWORD *)(v40 + 112) = 0xD000000000000016;
        *(_QWORD *)(v40 + 120) = 0x80000002352E3090;
        os_signpost(_:dso:log:name:signpostID:_:_:)();
        swift_release();
        (*(void (**)(char *, uint64_t))(v68 + 8))(v17, v14);
        swift_bridgeObjectRelease();
        if (*(_QWORD *)(a4 + 56))
          goto LABEL_51;
        goto LABEL_52;
      }
    }
    __break(1u);
LABEL_68:
    swift_once();
LABEL_22:
    v25 = static Animation.velocityTracking;
    swift_retain();
LABEL_25:
    v7 = v8 - v7;
    v6 = v9 - v6;
    v4 = v10 - v4;
    v5 = v69 - v5;
    v18 = *(double *)AGGraphGetValue();
    if (*(_QWORD *)(a4 + 56))
      break;
    type metadata accessor for CombinedAnimationState<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>>.Entry(0, (unint64_t *)&lazy cache variable for type metadata for AnimatorState<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>>, (uint64_t (*)(uint64_t))type metadata accessor for AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>, lazy protocol witness table accessor for type AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>> and conformance AnimatablePair<A, B>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatorState);
    swift_allocObject();
    swift_retain();
    v53 = swift_retain();
    v54 = specialized AnimatorState.init(animation:interval:at:in:)(v53, v7, v6, v4, v5, v18);
    swift_retain();
    v55 = static os_signpost_type_t.begin.getter();
    static os_signpost_type_t.event.getter();
    if ((kdebug_is_enabled() & 1) == 0)
      goto LABEL_62;
    v67 = v55;
    if (one-time initialization token for _signpostLog != -1)
      swift_once();
    v56 = (void *)_signpostLog;
    if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
    {
      v68 = v15;
      swift_retain();
      v57 = v56;
      OSSignpostID.init(log:object:)();
      type metadata accessor for _ContiguousArrayStorage<CVarArg>();
      v58 = swift_allocObject();
      *(_OWORD *)(v58 + 16) = xmmword_235283260;
      v59 = AGGraphGetCurrentAttribute();
      v66 = *MEMORY[0x24BE096C0];
      if (v59 == v66)
        goto LABEL_71;
      v60 = (id)AGGraphGetAttributeGraph();
      v65 = AGGraphGetCounter();

      v61 = MEMORY[0x24BEE1ED8];
      *(_QWORD *)(v58 + 56) = MEMORY[0x24BEE1E88];
      *(_QWORD *)(v58 + 64) = v61;
      *(_QWORD *)(v58 + 32) = v65;
      v62 = AGGraphGetCurrentAttribute();
      if (v62 == v66)
        goto LABEL_72;
      v63 = MEMORY[0x24BEE4558];
      *(_QWORD *)(v58 + 96) = MEMORY[0x24BEE44F0];
      *(_QWORD *)(v58 + 104) = v63;
      *(_DWORD *)(v58 + 72) = v62;
      *(_QWORD *)(v58 + 136) = MEMORY[0x24BEE0D00];
      *(_QWORD *)(v58 + 144) = lazy protocol witness table accessor for type String and conformance String();
      *(_QWORD *)(v58 + 112) = 0xD000000000000016;
      *(_QWORD *)(v58 + 120) = 0x80000002352E3090;
      os_signpost(_:dso:log:name:signpostID:_:_:)();
      swift_release();
      v15 = v68;
      (*(void (**)(char *, uint64_t))(v68 + 8))(v17, v14);
      swift_bridgeObjectRelease();
    }
    else
    {
LABEL_62:
      swift_release();
    }
    swift_release();
    *(_QWORD *)(a4 + 56) = v54;
    if (v54)
    {
LABEL_35:
      swift_retain();
      specialized AnimatorState.addListeners(transaction:)();
      swift_release();
      swift_release();
      goto LABEL_36;
    }
LABEL_64:
    __break(1u);
LABEL_36:
    swift_release();
    v22 = v69;
LABEL_37:
    *(double *)(a4 + 16) = v8;
    *(double *)(a4 + 24) = v9;
    *(double *)(a4 + 32) = v10;
    *(double *)(a4 + 40) = v22;
    *(_BYTE *)(a4 + 48) = 0;
    v21 = *(_QWORD *)(a4 + 56);
    if (!v21)
      return;
  }
  swift_retain();
  LOBYTE(v73.f64[0]) = 0;
  specialized AnimatorState.combine(newAnimation:newInterval:at:in:environment:)(v25, v7, v6, v4, v5, v18);
  swift_retain();
  v28 = static os_signpost_type_t.event.getter();
  static os_signpost_type_t.event.getter();
  if ((kdebug_is_enabled() & 1) == 0)
    goto LABEL_33;
  v67 = v28;
  if (one-time initialization token for _signpostLog != -1)
    swift_once();
  v29 = (void *)_signpostLog;
  if ((OS_os_log.signpostsEnabled.getter() & 1) == 0)
  {
LABEL_33:
    swift_release_n();
    goto LABEL_34;
  }
  v68 = v15;
  swift_retain();
  v30 = v29;
  OSSignpostID.init(log:object:)();
  type metadata accessor for _ContiguousArrayStorage<CVarArg>();
  v31 = swift_allocObject();
  *(_OWORD *)(v31 + 16) = xmmword_235283260;
  v32 = AGGraphGetCurrentAttribute();
  v66 = *MEMORY[0x24BE096C0];
  if (v32 != v66)
  {
    v33 = (id)AGGraphGetAttributeGraph();
    v65 = AGGraphGetCounter();

    v34 = MEMORY[0x24BEE1ED8];
    *(_QWORD *)(v31 + 56) = MEMORY[0x24BEE1E88];
    *(_QWORD *)(v31 + 64) = v34;
    *(_QWORD *)(v31 + 32) = v65;
    v35 = AGGraphGetCurrentAttribute();
    if (v35 == v66)
      goto LABEL_70;
    v36 = MEMORY[0x24BEE4558];
    *(_QWORD *)(v31 + 96) = MEMORY[0x24BEE44F0];
    *(_QWORD *)(v31 + 104) = v36;
    *(_DWORD *)(v31 + 72) = v35;
    *(_QWORD *)(v31 + 136) = MEMORY[0x24BEE0D00];
    *(_QWORD *)(v31 + 144) = lazy protocol witness table accessor for type String and conformance String();
    *(_QWORD *)(v31 + 112) = 0xD000000000000016;
    *(_QWORD *)(v31 + 120) = 0x80000002352E3090;
    os_signpost(_:dso:log:name:signpostID:_:_:)();
    swift_release_n();
    v15 = v68;
    (*(void (**)(char *, uint64_t))(v68 + 8))(v17, v14);
    swift_bridgeObjectRelease();
LABEL_34:
    if (*(_QWORD *)(a4 + 56))
      goto LABEL_35;
    goto LABEL_64;
  }
  __break(1u);
LABEL_70:
  __break(1u);
LABEL_71:
  __break(1u);
LABEL_72:
  __break(1u);
}

{
  float v4;
  float v5;
  float v6;
  double v7;
  float v8;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  double v16;
  double *Value;
  char v18;
  int8x16_t v19;
  double *v20;
  double *v21;
  float v22;
  float v23;
  int8x16_t v24;
  __int128 v25;
  __int128 v26;
  int8x16_t v27;
  float v28;
  float v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  float v36;
  float v37;
  float v38;
  uint64_t v39;
  int v40;
  void *v41;
  id v42;
  uint64_t v43;
  int v44;
  id v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  int8x16_t v49;
  uint64_t v50;
  int8x16_t v51;
  float32x4_t v52;
  float32x4_t v53;
  void *v54;
  id v55;
  uint64_t v56;
  int CurrentAttribute;
  id v58;
  uint64_t Counter;
  uint64_t v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  double v64;
  uint64_t v65;
  unsigned __int8 v66;
  void (*v67)(float32x4_t *, unint64_t, double);
  void *v68;
  float32x4_t v69;
  float32x4_t v70;
  float32x4_t v71;
  __int32 v72;
  __int32 v73;
  __int32 v74;
  __int32 v75;
  uint64_t v76;
  __int32 v77;
  __int32 v78;
  __int32 v79;
  uint64_t v80;
  uint64_t v81;
  int v82;
  void *v83;
  id v84;
  uint64_t v85;
  int v86;
  id v87;
  uint64_t v88;
  int v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  int v93;
  int v94;
  uint64_t v95;
  __int128 v96;
  __int128 v97;
  float v98;
  float v99;
  uint64_t v100;
  int8x16_t v101;
  int8x16_t v102;
  float32x4_t v103;
  char v104;
  char v105;
  _BYTE v106[24];
  float v107;
  float v108;
  float v109;
  float v110;
  float v111;
  float v112;

  v12 = type metadata accessor for OSSignpostID();
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v15 = (char *)&v91 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for infinity != -1)
    swift_once();
  v16 = -*(double *)&static Time.infinity;
  if (*(_QWORD *)(a4 + 40))
  {
    Value = (double *)AGGraphGetValue();
    if ((v18 & 1) != 0)
      v16 = *Value;
  }
  v20 = (double *)&unk_254266000;
  if (*(_DWORD *)(a4 + 48) != *(_DWORD *)AGGraphGetValue() >> 1)
  {
    specialized AnimatableAttributeHelper.reset()();
    *(_BYTE *)(a1 + 24) = 1;
    goto LABEL_11;
  }
  if (*(_BYTE *)(a1 + 24) == 1)
  {
LABEL_11:
    v22 = *(float *)a1;
    v23 = *(float *)(a1 + 4);
    v4 = *(float *)(a1 + 8);
    v5 = *(float *)(a1 + 12);
    v19.i32[0] = *(_DWORD *)(a1 + 16);
    v102 = v19;
    v19.i32[0] = *(_DWORD *)(a1 + 20);
    v101 = v19;
    if (one-time initialization token for legacyInterpolation != -1)
      swift_once();
    swift_beginAccess();
    if ((static Color.Resolved.legacyInterpolation & 1) == 0)
    {
      v106[0] = 2;
      *(float *)v24.i32 = v22;
      ResolvedGradient.ColorSpace.convertIn(_:)(&v107, v24, v23, LODWORD(v4), v5, v27);
      v22 = v107;
      v23 = v108;
      v4 = v109;
      v5 = v110;
    }
    *(float *)&v25 = v22 * 128.0;
    *(float *)&v26 = v23 * 128.0;
    v28 = v4 * 128.0;
    v29 = v5 * 128.0;
    if ((*(_BYTE *)(a4 + 36) & 1) != 0)
      goto LABEL_43;
    v5 = *(float *)(a4 + 12);
    v6 = *(float *)(a4 + 16);
    LODWORD(v7) = *(_DWORD *)(a4 + 20);
    v8 = *(float *)(a4 + 24);
    LODWORD(v30) = *(_DWORD *)(a4 + 28);
    v4 = *(float *)(a4 + 32);
    if (*(float *)v102.i32 == v5
      && *(float *)v101.i32 == v6
      && *(float *)&v25 == *(float *)&v7
      && *(float *)&v26 == v8
      && v28 == *(float *)&v30
      && v29 == v4)
    {
      goto LABEL_43;
    }
    v96 = v25;
    v97 = v26;
    v98 = v28;
    v99 = v29;
    v100 = v13;
    AGGraphClearUpdate();
    AGGraphGetValue();
    swift_retain();
    AGGraphSetUpdate();
    v31 = swift_retain();
    v32 = specialized find<A>(_:key:)(v31);
    if (v32)
    {
      v33 = *(_QWORD *)(v32 + 72);
      swift_retain();
      swift_release();
      if (v33)
        goto LABEL_31;
    }
    else
    {
      swift_release();
    }
    v34 = swift_retain();
    v35 = specialized closure #1 in PropertyList.subscript.getter(v34);
    swift_release();
    if ((v35 & 1) == 0)
    {
      v20 = (double *)&unk_254266000;
      if (!a2)
        goto LABEL_79;
      swift_retain();
      v33 = a2;
      goto LABEL_31;
    }
    v20 = (double *)&unk_254266000;
    if (one-time initialization token for velocityTracking != -1)
      goto LABEL_82;
    goto LABEL_28;
  }
  v21 = (double *)&unk_254266000;
  v20 = *(double **)(a4 + 40);
  if (!v20)
    return;
  while (1)
  {
    v102 = *(int8x16_t *)a1;
    v30 = *(_QWORD *)(a1 + 16);
    v50 = *((_QWORD *)v21 + 183);
    swift_retain();
    if (v50 != -1)
      swift_once();
    swift_beginAccess();
    if ((static Color.Resolved.legacyInterpolation & 1) != 0)
    {
      v52 = (float32x4_t)v102;
    }
    else
    {
      v105 = 2;
      ResolvedGradient.ColorSpace.convertIn(_:)((float *)v106, v102, *(float *)&v102.i32[1], v102.u32[2], *(float *)&v102.i32[3], v51);
      v52 = *(float32x4_t *)v106;
    }
    v53.i64[0] = 0x4300000043000000;
    v53.i64[1] = 0x4300000043000000;
    *(_QWORD *)v106 = v30;
    *(float32x4_t *)&v106[8] = vmulq_f32(v52, v53);
    v105 = 0;
    if ((specialized AnimatorState.update(_:at:environment:)((uint64_t)v106, v16) & 1) == 0)
      break;
    swift_retain();
    static os_signpost_type_t.end.getter();
    static os_signpost_type_t.event.getter();
    if ((kdebug_is_enabled() & 1) == 0)
      goto LABEL_61;
    if (one-time initialization token for _signpostLog != -1)
      swift_once();
    v54 = (void *)_signpostLog;
    if ((OS_os_log.signpostsEnabled.getter() & 1) == 0)
    {
LABEL_61:
      v63 = swift_release();
      if (*(_QWORD *)(a4 + 40))
      {
LABEL_62:
        specialized AnimatorState.removeListeners()(v63);
        swift_release();
      }
LABEL_63:
      *(_QWORD *)(a4 + 40) = 0;
      goto LABEL_64;
    }
    v100 = v13;
    v102.i64[0] = v12;
    swift_retain();
    v55 = v54;
    OSSignpostID.init(log:object:)();
    type metadata accessor for _ContiguousArrayStorage<CVarArg>();
    v56 = swift_allocObject();
    *(_OWORD *)(v56 + 16) = xmmword_235283260;
    CurrentAttribute = AGGraphGetCurrentAttribute();
    v12 = *MEMORY[0x24BE096C0];
    if (CurrentAttribute == (_DWORD)v12)
    {
      __break(1u);
    }
    else
    {
      v58 = (id)AGGraphGetAttributeGraph();
      Counter = AGGraphGetCounter();

      v60 = MEMORY[0x24BEE1ED8];
      *(_QWORD *)(v56 + 56) = MEMORY[0x24BEE1E88];
      *(_QWORD *)(v56 + 64) = v60;
      *(_QWORD *)(v56 + 32) = Counter;
      v61 = AGGraphGetCurrentAttribute();
      if (v61 != (_DWORD)v12)
      {
        v62 = MEMORY[0x24BEE4558];
        *(_QWORD *)(v56 + 96) = MEMORY[0x24BEE44F0];
        *(_QWORD *)(v56 + 104) = v62;
        *(_DWORD *)(v56 + 72) = v61;
        *(_QWORD *)(v56 + 136) = MEMORY[0x24BEE0D00];
        *(_QWORD *)(v56 + 144) = lazy protocol witness table accessor for type String and conformance String();
        *(_QWORD *)(v56 + 112) = 0x65766C6F7365525FLL;
        *(_QWORD *)(v56 + 120) = 0xE900000000000064;
        os_signpost(_:dso:log:name:signpostID:_:_:)();
        swift_release();
        (*(void (**)(char *, uint64_t))(v100 + 8))(v15, v102.i64[0]);
        v63 = swift_bridgeObjectRelease();
        if (*(_QWORD *)(a4 + 40))
          goto LABEL_62;
        goto LABEL_63;
      }
    }
    __break(1u);
LABEL_82:
    swift_once();
LABEL_28:
    v33 = static Animation.velocityTracking;
    swift_retain();
LABEL_31:
    v36 = *(float *)v102.i32 - v5;
    v37 = *(float *)v101.i32 - v6;
    v6 = *(float *)&v96 - *(float *)&v7;
    v5 = *(float *)&v97 - v8;
    v38 = v98 - *(float *)&v30;
    v4 = v99 - v4;
    v7 = *(double *)AGGraphGetValue();
    v39 = *(_QWORD *)(a4 + 40);
    v95 = v33;
    if (v39)
    {
      v107 = v36;
      v108 = v37;
      v109 = v6;
      v110 = v5;
      v111 = v38;
      v112 = v4;
      swift_retain();
      v106[0] = 0;
      specialized AnimatorState.combine(newAnimation:newInterval:at:in:environment:)(v33, (uint64_t)&v107, v7);
      swift_retain();
      v40 = static os_signpost_type_t.event.getter();
      static os_signpost_type_t.event.getter();
      v16 = v7;
      if ((kdebug_is_enabled() & 1) == 0)
        goto LABEL_39;
      v94 = v40;
      if (one-time initialization token for _signpostLog != -1)
        swift_once();
      v41 = (void *)_signpostLog;
      if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
      {
        swift_retain();
        v42 = v41;
        OSSignpostID.init(log:object:)();
        type metadata accessor for _ContiguousArrayStorage<CVarArg>();
        v43 = swift_allocObject();
        *(_OWORD *)(v43 + 16) = xmmword_235283260;
        v44 = AGGraphGetCurrentAttribute();
        v93 = *MEMORY[0x24BE096C0];
        if (v44 == v93)
        {
          __break(1u);
LABEL_84:
          __break(1u);
LABEL_85:
          __break(1u);
LABEL_86:
          __break(1u);
          return;
        }
        v45 = (id)AGGraphGetAttributeGraph();
        v92 = AGGraphGetCounter();

        v46 = MEMORY[0x24BEE1ED8];
        *(_QWORD *)(v43 + 56) = MEMORY[0x24BEE1E88];
        *(_QWORD *)(v43 + 64) = v46;
        *(_QWORD *)(v43 + 32) = v92;
        v47 = AGGraphGetCurrentAttribute();
        if (v47 == v93)
          goto LABEL_84;
        v48 = MEMORY[0x24BEE4558];
        *(_QWORD *)(v43 + 96) = MEMORY[0x24BEE44F0];
        *(_QWORD *)(v43 + 104) = v48;
        *(_DWORD *)(v43 + 72) = v47;
        *(_QWORD *)(v43 + 136) = MEMORY[0x24BEE0D00];
        *(_QWORD *)(v43 + 144) = lazy protocol witness table accessor for type String and conformance String();
        *(_QWORD *)(v43 + 112) = 0x65766C6F7365525FLL;
        *(_QWORD *)(v43 + 120) = 0xE900000000000064;
        os_signpost(_:dso:log:name:signpostID:_:_:)();
        swift_release_n();
        (*(void (**)(char *, uint64_t))(v100 + 8))(v15, v12);
        swift_bridgeObjectRelease();
        v20 = (double *)&unk_254266000;
      }
      else
      {
LABEL_39:
        swift_release_n();
      }
      if (*(_QWORD *)(a4 + 40))
      {
LABEL_41:
        swift_retain();
        specialized AnimatorState.addListeners(transaction:)();
        swift_release();
        swift_release();
        swift_release();
        v13 = v100;
        goto LABEL_42;
      }
    }
    else
    {
      v107 = v36;
      v108 = v37;
      v109 = v6;
      v110 = v5;
      v111 = v38;
      v112 = v4;
      type metadata accessor for CombinedAnimationState<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>>.Entry(0, &lazy cache variable for type metadata for AnimatorState<AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>>>, type metadata accessor for AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>>, lazy protocol witness table accessor for type AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>> and conformance AnimatablePair<A, B>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatorState);
      swift_allocObject();
      swift_retain();
      v80 = swift_retain();
      v81 = specialized AnimatorState.init(animation:interval:at:in:)(v80, (uint64_t)&v107, v7);
      swift_retain();
      v82 = static os_signpost_type_t.begin.getter();
      static os_signpost_type_t.event.getter();
      v16 = v7;
      if ((kdebug_is_enabled() & 1) == 0)
        goto LABEL_76;
      v94 = v82;
      if (one-time initialization token for _signpostLog != -1)
        swift_once();
      v83 = (void *)_signpostLog;
      if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
      {
        swift_retain();
        v84 = v83;
        OSSignpostID.init(log:object:)();
        type metadata accessor for _ContiguousArrayStorage<CVarArg>();
        v85 = swift_allocObject();
        *(_OWORD *)(v85 + 16) = xmmword_235283260;
        v86 = AGGraphGetCurrentAttribute();
        v93 = *MEMORY[0x24BE096C0];
        if (v86 == v93)
          goto LABEL_85;
        v87 = (id)AGGraphGetAttributeGraph();
        v92 = AGGraphGetCounter();

        v88 = MEMORY[0x24BEE1ED8];
        *(_QWORD *)(v85 + 56) = MEMORY[0x24BEE1E88];
        *(_QWORD *)(v85 + 64) = v88;
        *(_QWORD *)(v85 + 32) = v92;
        v89 = AGGraphGetCurrentAttribute();
        if (v89 == v93)
          goto LABEL_86;
        v90 = MEMORY[0x24BEE4558];
        *(_QWORD *)(v85 + 96) = MEMORY[0x24BEE44F0];
        *(_QWORD *)(v85 + 104) = v90;
        *(_DWORD *)(v85 + 72) = v89;
        *(_QWORD *)(v85 + 136) = MEMORY[0x24BEE0D00];
        *(_QWORD *)(v85 + 144) = lazy protocol witness table accessor for type String and conformance String();
        *(_QWORD *)(v85 + 112) = 0x65766C6F7365525FLL;
        *(_QWORD *)(v85 + 120) = 0xE900000000000064;
        os_signpost(_:dso:log:name:signpostID:_:_:)();
        swift_release();
        (*(void (**)(char *, uint64_t))(v100 + 8))(v15, v12);
        swift_bridgeObjectRelease();
        v20 = (double *)&unk_254266000;
      }
      else
      {
LABEL_76:
        swift_release();
      }
      swift_release();
      *(_QWORD *)(a4 + 40) = v81;
      if (v81)
        goto LABEL_41;
    }
    __break(1u);
LABEL_79:
    swift_release();
    v13 = v100;
LABEL_42:
    v29 = v99;
    v28 = v98;
    LODWORD(v26) = v97;
    LODWORD(v25) = v96;
LABEL_43:
    v21 = v20;
    v49.i64[0] = v102.u32[0];
    v49.i64[1] = v25;
    *(int8x16_t *)(a4 + 12) = vorrq_s8((int8x16_t)vshll_n_s32((int32x2_t)__PAIR64__(v26, v101.u32[0]), 0x20uLL), v49);
    *(_QWORD *)(a4 + 28) = LODWORD(v28) | ((unint64_t)LODWORD(v29) << 32);
    *(_BYTE *)(a4 + 36) = 0;
    v20 = *(double **)(a4 + 40);
    if (!v20)
      return;
  }
  if (one-time initialization token for shared != -1)
    swift_once();
  swift_beginAccess();
  v64 = v20[8];
  v103.i64[0] = (uint64_t)v20[9];
  v65 = *((unsigned int *)v20 + 26);
  v66 = *((_BYTE *)v20 + 108);
  v67 = *(void (**)(float32x4_t *, unint64_t, double))((*MEMORY[0x24BEE4EA0] & *(_QWORD *)static CoreGlue.shared)
                                                                       + 0x58);
  v68 = static CoreGlue.shared;
  v104 = v66;
  v67(&v103, v65 | ((unint64_t)v66 << 32), v64);

LABEL_64:
  v69 = *(float32x4_t *)&v106[8];
  *(_QWORD *)(a1 + 16) = *(_QWORD *)v106;
  v70.i64[0] = 0x3C0000003C000000;
  v70.i64[1] = 0x3C0000003C000000;
  v71 = vmulq_f32(v69, v70);
  if (static Color.Resolved.legacyInterpolation == 1)
  {
    v102 = (int8x16_t)v71;
    swift_release();
    v73 = v102.i32[1];
    v72 = v102.i32[0];
    v75 = v102.i32[3];
    v74 = v102.i32[2];
  }
  else
  {
    v104 = 2;
    v103 = v71;
    *(float *)&v76 = ResolvedGradient.ColorSpace.convertOut(_:)(v103.f32);
    v102.i64[0] = v76;
    v73 = v77;
    v74 = v78;
    v75 = v79;
    swift_release();
    v72 = v102.i32[0];
  }
  *(_DWORD *)a1 = v72;
  *(_DWORD *)(a1 + 4) = v73;
  *(_DWORD *)(a1 + 8) = v74;
  *(_DWORD *)(a1 + 12) = v75;
  *(_BYTE *)(a1 + 24) = 1;
}

{
  specialized AnimatableAttributeHelper.update(value:defaultAnimation:environment:sampleCollector:)(a1, a2, a3, a4, (void (*)(void))specialized AnimatableAttributeHelper.reset(), 0x656C676E41, 0xE500000000000000);
}

{
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  double v17;
  double *Value;
  char v19;
  double *v20;
  double *v21;
  float v22;
  int8x16_t v23;
  int8x16_t v24;
  float v25;
  float v26;
  BOOL v27;
  BOOL v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  float v35;
  uint64_t v36;
  int v37;
  void *v38;
  id v39;
  uint64_t v40;
  int v41;
  id v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  int8x16_t v47;
  float32x4_t v48;
  float32x4_t v49;
  void *v50;
  id v51;
  uint64_t v52;
  int CurrentAttribute;
  int v54;
  id v55;
  uint64_t Counter;
  uint64_t v57;
  int v58;
  uint64_t v59;
  double v60;
  uint64_t v61;
  unsigned __int8 v62;
  void (*v63)(float32x4_t *, unint64_t, double);
  void *v64;
  float32x4_t v65;
  float32x4_t v66;
  __int32 v67;
  __int32 v68;
  __int32 v69;
  __int32 v70;
  uint64_t v71;
  __int32 v72;
  __int32 v73;
  __int32 v74;
  uint64_t v75;
  uint64_t v76;
  int v77;
  void *v78;
  id v79;
  uint64_t v80;
  int v81;
  id v82;
  uint64_t v83;
  int v84;
  uint64_t v85;
  uint64_t v86;
  int v87;
  int v88;
  uint64_t v89;
  float v90;
  float v91;
  int8x16_t v92;
  float32x4_t v93;
  char v94;
  float32x4_t v95;
  float v96[6];
  float32x4_t v97[2];

  v13 = type metadata accessor for OSSignpostID();
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x24BDAC7A8](v13);
  v16 = (char *)&v86 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for infinity != -1)
    swift_once();
  v17 = -*(double *)&static Time.infinity;
  if (*(_QWORD *)(a4 + 32))
  {
    Value = (double *)AGGraphGetValue();
    if ((v19 & 1) != 0)
      v17 = *Value;
  }
  v20 = (double *)&unk_254266000;
  if (*(_DWORD *)(a4 + 40) != *(_DWORD *)AGGraphGetValue() >> 1)
  {
    specialized AnimatableAttributeHelper.reset()();
    *(_BYTE *)(a1 + 16) = 1;
    goto LABEL_11;
  }
  if (*(_BYTE *)(a1 + 16) == 1)
  {
LABEL_11:
    v4 = *(float *)a1;
    v5 = *(float *)(a1 + 4);
    v6 = *(float *)(a1 + 8);
    v22 = *(float *)(a1 + 12);
    if (one-time initialization token for legacyInterpolation != -1)
      swift_once();
    swift_beginAccess();
    if ((static Color.Resolved.legacyInterpolation & 1) == 0)
    {
      v95.i8[0] = 2;
      *(float *)v23.i32 = v4;
      ResolvedGradient.ColorSpace.convertIn(_:)(v96, v23, v5, LODWORD(v6), v22, v24);
      v4 = v96[0];
      v5 = v96[1];
      v6 = v96[2];
      v22 = v96[3];
    }
    v7 = v4 * 128.0;
    v9 = v5 * 128.0;
    v25 = v6 * 128.0;
    v26 = v22 * 128.0;
    if ((*(_BYTE *)(a4 + 28) & 1) != 0)
      goto LABEL_47;
    v4 = *(float *)(a4 + 12);
    v6 = *(float *)(a4 + 16);
    v8 = *(float *)(a4 + 20);
    v5 = *(float *)(a4 + 24);
    v27 = v7 == v4 && v9 == v6;
    v28 = v27 && v25 == v8;
    if (v28 && v26 == v5)
      goto LABEL_47;
    v90 = v25;
    v91 = v22 * 128.0;
    v92.i64[0] = v14;
    AGGraphClearUpdate();
    AGGraphGetValue();
    swift_retain();
    AGGraphSetUpdate();
    v30 = swift_retain();
    v31 = specialized find<A>(_:key:)(v30);
    if (v31)
    {
      v32 = *(_QWORD *)(v31 + 72);
      swift_retain();
      swift_release();
      if (v32)
        goto LABEL_35;
    }
    else
    {
      swift_release();
    }
    v33 = swift_retain();
    v34 = specialized closure #1 in PropertyList.subscript.getter(v33);
    swift_release();
    if ((v34 & 1) == 0)
    {
      v20 = (double *)&unk_254266000;
      if (!a2)
        goto LABEL_83;
      swift_retain();
      v32 = a2;
      goto LABEL_35;
    }
    v20 = (double *)&unk_254266000;
    if (one-time initialization token for velocityTracking != -1)
      goto LABEL_86;
    goto LABEL_32;
  }
  v21 = (double *)&unk_254266000;
  v20 = *(double **)(a4 + 32);
  if (!v20)
    return;
  while (1)
  {
    v92 = *(int8x16_t *)a1;
    v46 = *((_QWORD *)v21 + 183);
    swift_retain();
    if (v46 != -1)
      swift_once();
    swift_beginAccess();
    if ((static Color.Resolved.legacyInterpolation & 1) != 0)
    {
      v48 = (float32x4_t)v92;
    }
    else
    {
      v97[0].i8[0] = 2;
      ResolvedGradient.ColorSpace.convertIn(_:)(v95.f32, v92, *(float *)&v92.i32[1], v92.u32[2], *(float *)&v92.i32[3], v47);
      v48 = v95;
    }
    v49.i64[0] = 0x4300000043000000;
    v49.i64[1] = 0x4300000043000000;
    v97[0] = vmulq_f32(v48, v49);
    v95.i8[0] = 0;
    if ((specialized AnimatorState.update(_:at:environment:)(v97, v17) & 1) == 0)
      break;
    swift_retain();
    static os_signpost_type_t.end.getter();
    static os_signpost_type_t.event.getter();
    if ((kdebug_is_enabled() & 1) == 0)
      goto LABEL_65;
    if (one-time initialization token for _signpostLog != -1)
      swift_once();
    v50 = (void *)_signpostLog;
    if ((OS_os_log.signpostsEnabled.getter() & 1) == 0)
    {
LABEL_65:
      swift_release();
      if (*(_QWORD *)(a4 + 32))
      {
LABEL_66:
        specialized AnimatorState.removeListeners()();
        swift_release();
      }
LABEL_67:
      *(_QWORD *)(a4 + 32) = 0;
      goto LABEL_68;
    }
    v92.i64[0] = v14;
    swift_retain();
    v51 = v50;
    OSSignpostID.init(log:object:)();
    type metadata accessor for _ContiguousArrayStorage<CVarArg>();
    v52 = swift_allocObject();
    *(_OWORD *)(v52 + 16) = xmmword_235283260;
    CurrentAttribute = AGGraphGetCurrentAttribute();
    v54 = *MEMORY[0x24BE096C0];
    if (CurrentAttribute == *MEMORY[0x24BE096C0])
    {
      __break(1u);
    }
    else
    {
      v55 = (id)AGGraphGetAttributeGraph();
      Counter = AGGraphGetCounter();

      v57 = MEMORY[0x24BEE1ED8];
      *(_QWORD *)(v52 + 56) = MEMORY[0x24BEE1E88];
      *(_QWORD *)(v52 + 64) = v57;
      *(_QWORD *)(v52 + 32) = Counter;
      v58 = AGGraphGetCurrentAttribute();
      if (v58 != v54)
      {
        v59 = MEMORY[0x24BEE4558];
        *(_QWORD *)(v52 + 96) = MEMORY[0x24BEE44F0];
        *(_QWORD *)(v52 + 104) = v59;
        *(_DWORD *)(v52 + 72) = v58;
        *(_QWORD *)(v52 + 136) = MEMORY[0x24BEE0D00];
        *(_QWORD *)(v52 + 144) = lazy protocol witness table accessor for type String and conformance String();
        *(_QWORD *)(v52 + 112) = 0x6465766C6F736552;
        *(_QWORD *)(v52 + 120) = 0xE800000000000000;
        os_signpost(_:dso:log:name:signpostID:_:_:)();
        swift_release();
        (*(void (**)(char *, uint64_t))(v92.i64[0] + 8))(v16, v13);
        swift_bridgeObjectRelease();
        if (*(_QWORD *)(a4 + 32))
          goto LABEL_66;
        goto LABEL_67;
      }
    }
    __break(1u);
LABEL_86:
    swift_once();
LABEL_32:
    v32 = static Animation.velocityTracking;
    swift_retain();
LABEL_35:
    v35 = v7 - v4;
    v6 = v9 - v6;
    v4 = v90 - v8;
    v5 = v91 - v5;
    v17 = *(double *)AGGraphGetValue();
    v36 = *(_QWORD *)(a4 + 32);
    v89 = v32;
    if (v36)
    {
      swift_retain();
      LOBYTE(v96[0]) = 0;
      specialized AnimatorState.combine(newAnimation:newInterval:at:in:environment:)(v32, v35, v6, v4, v5, v17);
      swift_retain();
      v37 = static os_signpost_type_t.event.getter();
      static os_signpost_type_t.event.getter();
      if ((kdebug_is_enabled() & 1) == 0)
        goto LABEL_43;
      v88 = v37;
      if (one-time initialization token for _signpostLog != -1)
        swift_once();
      v38 = (void *)_signpostLog;
      if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
      {
        swift_retain();
        v39 = v38;
        OSSignpostID.init(log:object:)();
        type metadata accessor for _ContiguousArrayStorage<CVarArg>();
        v40 = swift_allocObject();
        *(_OWORD *)(v40 + 16) = xmmword_235283260;
        v41 = AGGraphGetCurrentAttribute();
        v87 = *MEMORY[0x24BE096C0];
        if (v41 == v87)
        {
          __break(1u);
LABEL_88:
          __break(1u);
LABEL_89:
          __break(1u);
LABEL_90:
          __break(1u);
          return;
        }
        v42 = (id)AGGraphGetAttributeGraph();
        v86 = AGGraphGetCounter();

        v43 = MEMORY[0x24BEE1ED8];
        *(_QWORD *)(v40 + 56) = MEMORY[0x24BEE1E88];
        *(_QWORD *)(v40 + 64) = v43;
        *(_QWORD *)(v40 + 32) = v86;
        v44 = AGGraphGetCurrentAttribute();
        if (v44 == v87)
          goto LABEL_88;
        v45 = MEMORY[0x24BEE4558];
        *(_QWORD *)(v40 + 96) = MEMORY[0x24BEE44F0];
        *(_QWORD *)(v40 + 104) = v45;
        *(_DWORD *)(v40 + 72) = v44;
        *(_QWORD *)(v40 + 136) = MEMORY[0x24BEE0D00];
        *(_QWORD *)(v40 + 144) = lazy protocol witness table accessor for type String and conformance String();
        *(_QWORD *)(v40 + 112) = 0x6465766C6F736552;
        *(_QWORD *)(v40 + 120) = 0xE800000000000000;
        os_signpost(_:dso:log:name:signpostID:_:_:)();
        swift_release_n();
        (*(void (**)(char *, uint64_t))(v92.i64[0] + 8))(v16, v13);
        swift_bridgeObjectRelease();
        v20 = (double *)&unk_254266000;
      }
      else
      {
LABEL_43:
        swift_release_n();
      }
      if (*(_QWORD *)(a4 + 32))
      {
LABEL_45:
        swift_retain();
        specialized AnimatorState.addListeners(transaction:)();
        swift_release();
        swift_release();
        swift_release();
        v14 = v92.i64[0];
        goto LABEL_46;
      }
    }
    else
    {
      type metadata accessor for CombinedAnimationState<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>>.Entry(0, &lazy cache variable for type metadata for AnimatorState<AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>, type metadata accessor for AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>, lazy protocol witness table accessor for type AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>> and conformance AnimatablePair<A, B>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatorState);
      swift_allocObject();
      swift_retain();
      v75 = swift_retain();
      v76 = specialized AnimatorState.init(animation:interval:at:in:)(v75, v35, v6, v4, v5, v17);
      swift_retain();
      v77 = static os_signpost_type_t.begin.getter();
      static os_signpost_type_t.event.getter();
      if ((kdebug_is_enabled() & 1) == 0)
        goto LABEL_80;
      v88 = v77;
      if (one-time initialization token for _signpostLog != -1)
        swift_once();
      v78 = (void *)_signpostLog;
      if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
      {
        swift_retain();
        v79 = v78;
        OSSignpostID.init(log:object:)();
        type metadata accessor for _ContiguousArrayStorage<CVarArg>();
        v80 = swift_allocObject();
        *(_OWORD *)(v80 + 16) = xmmword_235283260;
        v81 = AGGraphGetCurrentAttribute();
        v87 = *MEMORY[0x24BE096C0];
        if (v81 == v87)
          goto LABEL_89;
        v82 = (id)AGGraphGetAttributeGraph();
        v86 = AGGraphGetCounter();

        v83 = MEMORY[0x24BEE1ED8];
        *(_QWORD *)(v80 + 56) = MEMORY[0x24BEE1E88];
        *(_QWORD *)(v80 + 64) = v83;
        *(_QWORD *)(v80 + 32) = v86;
        v84 = AGGraphGetCurrentAttribute();
        if (v84 == v87)
          goto LABEL_90;
        v85 = MEMORY[0x24BEE4558];
        *(_QWORD *)(v80 + 96) = MEMORY[0x24BEE44F0];
        *(_QWORD *)(v80 + 104) = v85;
        *(_DWORD *)(v80 + 72) = v84;
        *(_QWORD *)(v80 + 136) = MEMORY[0x24BEE0D00];
        *(_QWORD *)(v80 + 144) = lazy protocol witness table accessor for type String and conformance String();
        *(_QWORD *)(v80 + 112) = 0x6465766C6F736552;
        *(_QWORD *)(v80 + 120) = 0xE800000000000000;
        os_signpost(_:dso:log:name:signpostID:_:_:)();
        swift_release();
        (*(void (**)(char *, uint64_t))(v92.i64[0] + 8))(v16, v13);
        swift_bridgeObjectRelease();
        v20 = (double *)&unk_254266000;
      }
      else
      {
LABEL_80:
        swift_release();
      }
      swift_release();
      *(_QWORD *)(a4 + 32) = v76;
      if (v76)
        goto LABEL_45;
    }
    __break(1u);
LABEL_83:
    swift_release();
    v14 = v92.i64[0];
LABEL_46:
    v26 = v91;
    v25 = v90;
LABEL_47:
    v21 = v20;
    *(_QWORD *)(a4 + 12) = LODWORD(v7) | ((unint64_t)LODWORD(v9) << 32);
    *(_QWORD *)(a4 + 20) = LODWORD(v25) | ((unint64_t)LODWORD(v26) << 32);
    *(_BYTE *)(a4 + 28) = 0;
    v20 = *(double **)(a4 + 32);
    if (!v20)
      return;
  }
  if (one-time initialization token for shared != -1)
    swift_once();
  swift_beginAccess();
  v60 = v20[7];
  v93.i64[0] = (uint64_t)v20[8];
  v61 = *((unsigned int *)v20 + 22);
  v62 = *((_BYTE *)v20 + 92);
  v63 = *(void (**)(float32x4_t *, unint64_t, double))((*MEMORY[0x24BEE4EA0] & *(_QWORD *)static CoreGlue.shared)
                                                                       + 0x58);
  v64 = static CoreGlue.shared;
  v94 = v62;
  v63(&v93, v61 | ((unint64_t)v62 << 32), v60);

LABEL_68:
  v65.i64[0] = 0x3C0000003C000000;
  v65.i64[1] = 0x3C0000003C000000;
  v66 = vmulq_f32(v97[0], v65);
  if (static Color.Resolved.legacyInterpolation == 1)
  {
    v92 = (int8x16_t)v66;
    swift_release();
    v68 = v92.i32[1];
    v67 = v92.i32[0];
    v70 = v92.i32[3];
    v69 = v92.i32[2];
  }
  else
  {
    v94 = 2;
    v93 = v66;
    *(float *)&v71 = ResolvedGradient.ColorSpace.convertOut(_:)(v93.f32);
    v92.i64[0] = v71;
    v68 = v72;
    v69 = v73;
    v70 = v74;
    swift_release();
    v67 = v92.i32[0];
  }
  *(_DWORD *)a1 = v67;
  *(_DWORD *)(a1 + 4) = v68;
  *(_DWORD *)(a1 + 8) = v69;
  *(_DWORD *)(a1 + 12) = v70;
  *(_BYTE *)(a1 + 16) = 1;
}

{
  double v4;
  double v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  double v13;
  double *Value;
  char v15;
  uint64_t v16;
  double v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  int v23;
  void *v24;
  id v25;
  uint64_t v26;
  int v27;
  id v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  void *v32;
  id v33;
  uint64_t v34;
  int CurrentAttribute;
  id v36;
  uint64_t Counter;
  uint64_t v38;
  int v39;
  uint64_t v40;
  double v41;
  uint64_t v42;
  unsigned __int8 v43;
  void (*v44)(uint64_t *, unint64_t, double);
  void *v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  void *v49;
  id v50;
  uint64_t v51;
  int v52;
  id v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  unsigned __int8 v62;
  uint64_t v63;
  char v64;
  unint64_t v65;

  v9 = type metadata accessor for OSSignpostID();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v57 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for infinity != -1)
    swift_once();
  v13 = -*(double *)&static Time.infinity;
  if (*(_QWORD *)(a4 + 32))
  {
    Value = (double *)AGGraphGetValue();
    if ((v15 & 1) != 0)
      v13 = *Value;
  }
  if (*(_DWORD *)(a4 + 40) != *(_DWORD *)AGGraphGetValue() >> 1)
  {
    specialized AnimatableAttributeHelper.reset()();
    *(_BYTE *)(a1 + 8) = 1;
LABEL_11:
    *(_QWORD *)&v17 = *(_QWORD *)a1 & 0xFFFFFFFFFFFFFFFELL;
    if ((*(_BYTE *)(a4 + 24) & 1) != 0)
      goto LABEL_34;
    *(_QWORD *)&v4 = *(_QWORD *)a1 & 0xFFFFFFFFFFFFFFFELL;
    v5 = *(double *)(a4 + 16);
    if (v5 == v17)
      goto LABEL_34;
    v61 = v10;
    AGGraphClearUpdate();
    AGGraphGetValue();
    swift_retain();
    AGGraphSetUpdate();
    v18 = swift_retain();
    v19 = specialized find<A>(_:key:)(v18);
    if (v19)
    {
      v20 = *(_QWORD *)(v19 + 72);
      swift_retain();
      swift_release();
      if (v20)
        goto LABEL_22;
    }
    else
    {
      swift_release();
    }
    v21 = swift_retain();
    v22 = specialized closure #1 in PropertyList.subscript.getter(v21);
    swift_release();
    if ((v22 & 1) == 0)
    {
      if (!a2)
        goto LABEL_33;
      swift_retain();
      v20 = a2;
      goto LABEL_22;
    }
    if (one-time initialization token for velocityTracking != -1)
      goto LABEL_65;
    goto LABEL_19;
  }
  if (*(_BYTE *)(a1 + 8) == 1)
    goto LABEL_11;
  v16 = *(_QWORD *)(a4 + 32);
  if (!v16)
    return;
  while (1)
  {
    v65 = *(_QWORD *)a1 & 0xFFFFFFFFFFFFFFFELL;
    swift_retain();
    v64 = 0;
    if ((specialized AnimatorState.update(_:at:environment:)((double *)&v65, v13) & 1) == 0)
    {
      if (one-time initialization token for shared != -1)
        swift_once();
      swift_beginAccess();
      v41 = *(double *)(v16 + 48);
      v63 = *(_QWORD *)(v16 + 56);
      v42 = *(unsigned int *)(v16 + 72);
      v43 = *(_BYTE *)(v16 + 76);
      v44 = *(void (**)(uint64_t *, unint64_t, double))((*MEMORY[0x24BEE4EA0] & *(_QWORD *)static CoreGlue.shared)
                                                                       + 0x58);
      v45 = static CoreGlue.shared;
      v62 = v43;
      v44(&v63, v42 | ((unint64_t)v43 << 32), v41);
      swift_release();

      goto LABEL_50;
    }
    swift_retain();
    static os_signpost_type_t.end.getter();
    static os_signpost_type_t.event.getter();
    if ((kdebug_is_enabled() & 1) == 0)
      goto LABEL_47;
    if (one-time initialization token for _signpostLog != -1)
      swift_once();
    v32 = (void *)_signpostLog;
    if ((OS_os_log.signpostsEnabled.getter() & 1) == 0)
    {
LABEL_47:
      swift_release();
      if (*(_QWORD *)(a4 + 32))
      {
LABEL_48:
        specialized AnimatorState.removeListeners()();
        swift_release();
      }
LABEL_49:
      swift_release();
      *(_QWORD *)(a4 + 32) = 0;
LABEL_50:
      *(_QWORD *)a1 = v65 & 0xFFFFFFFFFFFFFFFELL | *(_QWORD *)a1 & 1;
      *(_BYTE *)(a1 + 8) = 1;
      return;
    }
    v61 = v10;
    swift_retain();
    v33 = v32;
    OSSignpostID.init(log:object:)();
    type metadata accessor for _ContiguousArrayStorage<CVarArg>();
    v34 = swift_allocObject();
    *(_OWORD *)(v34 + 16) = xmmword_235283260;
    CurrentAttribute = AGGraphGetCurrentAttribute();
    *(_QWORD *)&v17 = *MEMORY[0x24BE096C0];
    if (CurrentAttribute == LODWORD(v17))
    {
      __break(1u);
    }
    else
    {
      v36 = (id)AGGraphGetAttributeGraph();
      Counter = AGGraphGetCounter();

      v38 = MEMORY[0x24BEE1ED8];
      *(_QWORD *)(v34 + 56) = MEMORY[0x24BEE1E88];
      *(_QWORD *)(v34 + 64) = v38;
      *(_QWORD *)(v34 + 32) = Counter;
      v39 = AGGraphGetCurrentAttribute();
      if (v39 != LODWORD(v17))
      {
        v40 = MEMORY[0x24BEE4558];
        *(_QWORD *)(v34 + 96) = MEMORY[0x24BEE44F0];
        *(_QWORD *)(v34 + 104) = v40;
        *(_DWORD *)(v34 + 72) = v39;
        *(_QWORD *)(v34 + 136) = MEMORY[0x24BEE0D00];
        *(_QWORD *)(v34 + 144) = lazy protocol witness table accessor for type String and conformance String();
        *(_QWORD *)(v34 + 112) = 0x7465736E495FLL;
        *(_QWORD *)(v34 + 120) = 0xE600000000000000;
        os_signpost(_:dso:log:name:signpostID:_:_:)();
        swift_release();
        (*(void (**)(char *, uint64_t))(v61 + 8))(v12, v9);
        swift_bridgeObjectRelease();
        if (*(_QWORD *)(a4 + 32))
          goto LABEL_48;
        goto LABEL_49;
      }
    }
    __break(1u);
LABEL_65:
    swift_once();
LABEL_19:
    v20 = static Animation.velocityTracking;
    swift_retain();
LABEL_22:
    v4 = v4 - v5;
    v13 = *(double *)AGGraphGetValue();
    if (*(_QWORD *)(a4 + 32))
      break;
    type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for AnimatorState<CGFloat>, (uint64_t (*)(void))lazy protocol witness table accessor for type CGFloat and conformance CGFloat, MEMORY[0x24BEE50B0], (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatorState);
    swift_allocObject();
    swift_retain();
    v46 = swift_retain();
    v47 = specialized AnimatorState.init(animation:interval:at:in:)(v46, v4, v13);
    swift_retain();
    v48 = static os_signpost_type_t.begin.getter();
    static os_signpost_type_t.event.getter();
    if ((kdebug_is_enabled() & 1) == 0)
      goto LABEL_59;
    v59 = v48;
    if (one-time initialization token for _signpostLog != -1)
      swift_once();
    v49 = (void *)_signpostLog;
    if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
    {
      v60 = v20;
      swift_retain();
      v50 = v49;
      OSSignpostID.init(log:object:)();
      type metadata accessor for _ContiguousArrayStorage<CVarArg>();
      v51 = swift_allocObject();
      *(_OWORD *)(v51 + 16) = xmmword_235283260;
      v52 = AGGraphGetCurrentAttribute();
      v58 = *MEMORY[0x24BE096C0];
      if (v52 == v58)
        goto LABEL_68;
      v53 = (id)AGGraphGetAttributeGraph();
      v57 = AGGraphGetCounter();

      v54 = MEMORY[0x24BEE1ED8];
      *(_QWORD *)(v51 + 56) = MEMORY[0x24BEE1E88];
      *(_QWORD *)(v51 + 64) = v54;
      *(_QWORD *)(v51 + 32) = v57;
      v55 = AGGraphGetCurrentAttribute();
      if (v55 == v58)
        goto LABEL_69;
      v56 = MEMORY[0x24BEE4558];
      *(_QWORD *)(v51 + 96) = MEMORY[0x24BEE44F0];
      *(_QWORD *)(v51 + 104) = v56;
      *(_DWORD *)(v51 + 72) = v55;
      *(_QWORD *)(v51 + 136) = MEMORY[0x24BEE0D00];
      *(_QWORD *)(v51 + 144) = lazy protocol witness table accessor for type String and conformance String();
      *(_QWORD *)(v51 + 112) = 0x7465736E495FLL;
      *(_QWORD *)(v51 + 120) = 0xE600000000000000;
      os_signpost(_:dso:log:name:signpostID:_:_:)();
      swift_release();
      (*(void (**)(char *, uint64_t))(v61 + 8))(v12, v9);
      swift_bridgeObjectRelease();
    }
    else
    {
LABEL_59:
      swift_release();
    }
    swift_release();
    *(_QWORD *)(a4 + 32) = v47;
    if (v47)
    {
LABEL_32:
      swift_retain();
      specialized AnimatorState.addListeners(transaction:)();
      swift_release();
      swift_release();
      goto LABEL_33;
    }
LABEL_61:
    __break(1u);
LABEL_33:
    swift_release();
    v10 = v61;
LABEL_34:
    *(double *)(a4 + 16) = v17;
    *(_BYTE *)(a4 + 24) = 0;
    v16 = *(_QWORD *)(a4 + 32);
    if (!v16)
      return;
  }
  swift_retain();
  v64 = 0;
  specialized AnimatorState.combine(newAnimation:newInterval:at:in:environment:)(v20, v4, v13);
  swift_retain();
  v23 = static os_signpost_type_t.event.getter();
  static os_signpost_type_t.event.getter();
  if ((kdebug_is_enabled() & 1) == 0)
    goto LABEL_30;
  v59 = v23;
  if (one-time initialization token for _signpostLog != -1)
    swift_once();
  v24 = (void *)_signpostLog;
  if ((OS_os_log.signpostsEnabled.getter() & 1) == 0)
  {
LABEL_30:
    swift_release_n();
    goto LABEL_31;
  }
  v60 = v20;
  swift_retain();
  v25 = v24;
  OSSignpostID.init(log:object:)();
  type metadata accessor for _ContiguousArrayStorage<CVarArg>();
  v26 = swift_allocObject();
  *(_OWORD *)(v26 + 16) = xmmword_235283260;
  v27 = AGGraphGetCurrentAttribute();
  v58 = *MEMORY[0x24BE096C0];
  if (v27 != v58)
  {
    v28 = (id)AGGraphGetAttributeGraph();
    v57 = AGGraphGetCounter();

    v29 = MEMORY[0x24BEE1ED8];
    *(_QWORD *)(v26 + 56) = MEMORY[0x24BEE1E88];
    *(_QWORD *)(v26 + 64) = v29;
    *(_QWORD *)(v26 + 32) = v57;
    v30 = AGGraphGetCurrentAttribute();
    if (v30 == v58)
      goto LABEL_67;
    v31 = MEMORY[0x24BEE4558];
    *(_QWORD *)(v26 + 96) = MEMORY[0x24BEE44F0];
    *(_QWORD *)(v26 + 104) = v31;
    *(_DWORD *)(v26 + 72) = v30;
    *(_QWORD *)(v26 + 136) = MEMORY[0x24BEE0D00];
    *(_QWORD *)(v26 + 144) = lazy protocol witness table accessor for type String and conformance String();
    *(_QWORD *)(v26 + 112) = 0x7465736E495FLL;
    *(_QWORD *)(v26 + 120) = 0xE600000000000000;
    os_signpost(_:dso:log:name:signpostID:_:_:)();
    swift_release_n();
    (*(void (**)(char *, uint64_t))(v61 + 8))(v12, v9);
    swift_bridgeObjectRelease();
LABEL_31:
    if (*(_QWORD *)(a4 + 32))
      goto LABEL_32;
    goto LABEL_61;
  }
  __break(1u);
LABEL_67:
  __break(1u);
LABEL_68:
  __break(1u);
LABEL_69:
  __break(1u);
}

{
  uint64_t v7;
  float64_t v8;
  uint64_t v9;
  char *v10;
  double v11;
  double *Value;
  char v13;
  uint64_t v14;
  float64x2_t v15;
  float64x2_t v16;
  float64x2_t v17;
  float64x2_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  double v24;
  double v25;
  double v26;
  double v27;
  int v28;
  void *v29;
  id v30;
  uint64_t v31;
  int v32;
  id v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  float64x2_t v37;
  float64x2_t v38;
  float64x2_t v39;
  void *v40;
  id v41;
  uint64_t v42;
  int CurrentAttribute;
  id v44;
  uint64_t Counter;
  uint64_t v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  double v50;
  uint64_t v51;
  unsigned __int8 v52;
  void (*v53)(uint64_t *, unint64_t, double);
  void *v54;
  float64x2_t v55;
  float64x2_t v56;
  float64x2_t v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  void *v61;
  id v62;
  uint64_t v63;
  int v64;
  id v65;
  uint64_t v66;
  int v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  __int128 v71;
  float64x2_t v72;
  float64x2_t v73;
  float64x2_t v74;
  unsigned __int8 v75;
  uint64_t v76;
  char v77;
  float64x2_t v78;
  float64x2_t v79;

  v7 = type metadata accessor for OSSignpostID();
  v8 = *(double *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v69 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for infinity != -1)
    swift_once();
  v11 = -*(double *)&static Time.infinity;
  if (*(_QWORD *)(a4 + 56))
  {
    Value = (double *)AGGraphGetValue();
    if ((v13 & 1) != 0)
      v11 = *Value;
  }
  if (*(_DWORD *)(a4 + 64) != *(_DWORD *)AGGraphGetValue() >> 1)
  {
    specialized AnimatableAttributeHelper.reset()();
    *(_BYTE *)(a1 + 32) = 1;
LABEL_11:
    v15 = (float64x2_t)vdupq_n_s64(0x4060000000000000uLL);
    v16 = vmulq_f64(*(float64x2_t *)a1, v15);
    v17 = vmulq_f64(*(float64x2_t *)(a1 + 16), v15);
    if ((*(_BYTE *)(a4 + 48) & 1) != 0)
      goto LABEL_34;
    v18 = *(float64x2_t *)(a4 + 32);
    if ((vminv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(vmovn_s32(vuzp1q_s32((int32x4_t)vceqq_f64(v16, *(float64x2_t *)(a4 + 16)), (int32x4_t)vceqq_f64(v17, v18))), 0xFuLL))) & 1) != 0)goto LABEL_34;
    v71 = *(_OWORD *)(a4 + 16);
    v72 = v18;
    v73 = v17;
    v74 = v16;
    AGGraphClearUpdate();
    AGGraphGetValue();
    swift_retain();
    AGGraphSetUpdate();
    v19 = swift_retain();
    v20 = specialized find<A>(_:key:)(v19);
    if (v20)
    {
      v21 = *(_QWORD *)(v20 + 72);
      swift_retain();
      swift_release();
      if (v21)
        goto LABEL_22;
    }
    else
    {
      swift_release();
    }
    v22 = swift_retain();
    v23 = specialized closure #1 in PropertyList.subscript.getter(v22);
    swift_release();
    if ((v23 & 1) == 0)
    {
      if (!a2)
        goto LABEL_33;
      swift_retain();
      v21 = a2;
      goto LABEL_22;
    }
    if (one-time initialization token for velocityTracking != -1)
      goto LABEL_65;
    goto LABEL_19;
  }
  if (*(_BYTE *)(a1 + 32) == 1)
    goto LABEL_11;
  v14 = *(_QWORD *)(a4 + 56);
  if (!v14)
    return;
  while (1)
  {
    v37 = (float64x2_t)vdupq_n_s64(0x4060000000000000uLL);
    v38 = vmulq_f64(*(float64x2_t *)a1, v37);
    v39 = vmulq_f64(*(float64x2_t *)(a1 + 16), v37);
    v78 = v38;
    v79 = v39;
    swift_retain();
    v77 = 0;
    if ((specialized AnimatorState.update(_:at:environment:)(&v78, v11) & 1) == 0)
    {
      if (one-time initialization token for shared != -1)
        swift_once();
      swift_beginAccess();
      v50 = *(double *)(v14 + 72);
      v76 = *(_QWORD *)(v14 + 80);
      v51 = *(unsigned int *)(v14 + 120);
      v52 = *(_BYTE *)(v14 + 124);
      v53 = *(void (**)(uint64_t *, unint64_t, double))((*MEMORY[0x24BEE4EA0] & *(_QWORD *)static CoreGlue.shared)
                                                                       + 0x58);
      v54 = static CoreGlue.shared;
      v75 = v52;
      v53(&v76, v51 | ((unint64_t)v52 << 32), v50);
      swift_release();

      goto LABEL_50;
    }
    swift_retain();
    static os_signpost_type_t.end.getter();
    static os_signpost_type_t.event.getter();
    if ((kdebug_is_enabled() & 1) == 0)
      goto LABEL_47;
    if (one-time initialization token for _signpostLog != -1)
      swift_once();
    v40 = (void *)_signpostLog;
    if ((OS_os_log.signpostsEnabled.getter() & 1) == 0)
    {
LABEL_47:
      v49 = swift_release();
      if (*(_QWORD *)(a4 + 56))
      {
LABEL_48:
        specialized AnimatorState.removeListeners()(v49);
        swift_release();
      }
LABEL_49:
      swift_release();
      *(_QWORD *)(a4 + 56) = 0;
LABEL_50:
      v55 = (float64x2_t)vdupq_n_s64(0x3F80000000000000uLL);
      v56 = vmulq_f64(v78, v55);
      v57 = vmulq_f64(v79, v55);
      *(float64x2_t *)a1 = v56;
      *(float64x2_t *)(a1 + 16) = v57;
      *(_BYTE *)(a1 + 32) = 1;
      return;
    }
    v72.f64[0] = v8;
    swift_retain();
    v41 = v40;
    OSSignpostID.init(log:object:)();
    type metadata accessor for _ContiguousArrayStorage<CVarArg>();
    v42 = swift_allocObject();
    *(_OWORD *)(v42 + 16) = xmmword_235283260;
    CurrentAttribute = AGGraphGetCurrentAttribute();
    *(_QWORD *)&v8 = *MEMORY[0x24BE096C0];
    if (CurrentAttribute == LODWORD(v8))
    {
      __break(1u);
    }
    else
    {
      v44 = (id)AGGraphGetAttributeGraph();
      Counter = AGGraphGetCounter();

      v46 = MEMORY[0x24BEE1ED8];
      *(_QWORD *)(v42 + 56) = MEMORY[0x24BEE1E88];
      *(_QWORD *)(v42 + 64) = v46;
      *(_QWORD *)(v42 + 32) = Counter;
      v47 = AGGraphGetCurrentAttribute();
      if (v47 != LODWORD(v8))
      {
        v48 = MEMORY[0x24BEE4558];
        *(_QWORD *)(v42 + 96) = MEMORY[0x24BEE44F0];
        *(_QWORD *)(v42 + 104) = v48;
        *(_DWORD *)(v42 + 72) = v47;
        *(_QWORD *)(v42 + 136) = MEMORY[0x24BEE0D00];
        *(_QWORD *)(v42 + 144) = lazy protocol witness table accessor for type String and conformance String();
        *(_QWORD *)(v42 + 112) = 0x7463655274696E55;
        *(_QWORD *)(v42 + 120) = 0xE800000000000000;
        os_signpost(_:dso:log:name:signpostID:_:_:)();
        swift_release();
        (*(void (**)(char *, uint64_t))(*(_QWORD *)&v72.f64[0] + 8))(v10, v7);
        v49 = swift_bridgeObjectRelease();
        if (*(_QWORD *)(a4 + 56))
          goto LABEL_48;
        goto LABEL_49;
      }
    }
    __break(1u);
LABEL_65:
    swift_once();
LABEL_19:
    v21 = static Animation.velocityTracking;
    swift_retain();
LABEL_22:
    v24 = v74.f64[0] - *(double *)&v71;
    v25 = v74.f64[1] - *((double *)&v71 + 1);
    v26 = v73.f64[0] - v72.f64[0];
    v27 = v73.f64[1] - v72.f64[1];
    v11 = *(double *)AGGraphGetValue();
    if (*(_QWORD *)(a4 + 56))
      break;
    type metadata accessor for AnimatorState<AnimatablePair<CGFloat, AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>>>(0);
    swift_allocObject();
    swift_retain();
    v58 = swift_retain();
    v59 = specialized AnimatorState.init(animation:interval:at:in:)(v58, v24, v25, v26, v27, v11);
    swift_retain();
    v60 = static os_signpost_type_t.begin.getter();
    static os_signpost_type_t.event.getter();
    if ((kdebug_is_enabled() & 1) == 0)
      goto LABEL_59;
    LODWORD(v71) = v60;
    if (one-time initialization token for _signpostLog != -1)
      swift_once();
    v61 = (void *)_signpostLog;
    if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
    {
      v72.f64[0] = v8;
      swift_retain();
      v62 = v61;
      OSSignpostID.init(log:object:)();
      type metadata accessor for _ContiguousArrayStorage<CVarArg>();
      v63 = swift_allocObject();
      *(_OWORD *)(v63 + 16) = xmmword_235283260;
      v64 = AGGraphGetCurrentAttribute();
      v70 = *MEMORY[0x24BE096C0];
      if (v64 == v70)
        goto LABEL_68;
      v65 = (id)AGGraphGetAttributeGraph();
      v69 = AGGraphGetCounter();

      v66 = MEMORY[0x24BEE1ED8];
      *(_QWORD *)(v63 + 56) = MEMORY[0x24BEE1E88];
      *(_QWORD *)(v63 + 64) = v66;
      *(_QWORD *)(v63 + 32) = v69;
      v67 = AGGraphGetCurrentAttribute();
      if (v67 == v70)
        goto LABEL_69;
      v68 = MEMORY[0x24BEE4558];
      *(_QWORD *)(v63 + 96) = MEMORY[0x24BEE44F0];
      *(_QWORD *)(v63 + 104) = v68;
      *(_DWORD *)(v63 + 72) = v67;
      *(_QWORD *)(v63 + 136) = MEMORY[0x24BEE0D00];
      *(_QWORD *)(v63 + 144) = lazy protocol witness table accessor for type String and conformance String();
      *(_QWORD *)(v63 + 112) = 0x7463655274696E55;
      *(_QWORD *)(v63 + 120) = 0xE800000000000000;
      os_signpost(_:dso:log:name:signpostID:_:_:)();
      swift_release();
      v8 = v72.f64[0];
      (*(void (**)(char *, uint64_t))(*(_QWORD *)&v72.f64[0] + 8))(v10, v7);
      swift_bridgeObjectRelease();
    }
    else
    {
LABEL_59:
      swift_release();
    }
    swift_release();
    *(_QWORD *)(a4 + 56) = v59;
    if (v59)
    {
LABEL_32:
      swift_retain();
      specialized AnimatorState.addListeners(transaction:)();
      swift_release();
      swift_release();
      goto LABEL_33;
    }
LABEL_61:
    __break(1u);
LABEL_33:
    swift_release();
    v16 = v74;
    v17 = v73;
LABEL_34:
    *(float64x2_t *)(a4 + 16) = v16;
    *(float64x2_t *)(a4 + 32) = v17;
    *(_BYTE *)(a4 + 48) = 0;
    v14 = *(_QWORD *)(a4 + 56);
    if (!v14)
      return;
  }
  swift_retain();
  LOBYTE(v78.f64[0]) = 0;
  specialized AnimatorState.combine(newAnimation:newInterval:at:in:environment:)(v21, v24, v25, v26, v27, v11);
  swift_retain();
  v28 = static os_signpost_type_t.event.getter();
  static os_signpost_type_t.event.getter();
  if ((kdebug_is_enabled() & 1) == 0)
    goto LABEL_30;
  LODWORD(v71) = v28;
  if (one-time initialization token for _signpostLog != -1)
    swift_once();
  v29 = (void *)_signpostLog;
  if ((OS_os_log.signpostsEnabled.getter() & 1) == 0)
  {
LABEL_30:
    swift_release_n();
    goto LABEL_31;
  }
  v72.f64[0] = v8;
  swift_retain();
  v30 = v29;
  OSSignpostID.init(log:object:)();
  type metadata accessor for _ContiguousArrayStorage<CVarArg>();
  v31 = swift_allocObject();
  *(_OWORD *)(v31 + 16) = xmmword_235283260;
  v32 = AGGraphGetCurrentAttribute();
  v70 = *MEMORY[0x24BE096C0];
  if (v32 != v70)
  {
    v33 = (id)AGGraphGetAttributeGraph();
    v69 = AGGraphGetCounter();

    v34 = MEMORY[0x24BEE1ED8];
    *(_QWORD *)(v31 + 56) = MEMORY[0x24BEE1E88];
    *(_QWORD *)(v31 + 64) = v34;
    *(_QWORD *)(v31 + 32) = v69;
    v35 = AGGraphGetCurrentAttribute();
    if (v35 == v70)
      goto LABEL_67;
    v36 = MEMORY[0x24BEE4558];
    *(_QWORD *)(v31 + 96) = MEMORY[0x24BEE44F0];
    *(_QWORD *)(v31 + 104) = v36;
    *(_DWORD *)(v31 + 72) = v35;
    *(_QWORD *)(v31 + 136) = MEMORY[0x24BEE0D00];
    *(_QWORD *)(v31 + 144) = lazy protocol witness table accessor for type String and conformance String();
    *(_QWORD *)(v31 + 112) = 0x7463655274696E55;
    *(_QWORD *)(v31 + 120) = 0xE800000000000000;
    os_signpost(_:dso:log:name:signpostID:_:_:)();
    swift_release_n();
    v8 = v72.f64[0];
    (*(void (**)(char *, uint64_t))(*(_QWORD *)&v72.f64[0] + 8))(v10, v7);
    swift_bridgeObjectRelease();
LABEL_31:
    if (*(_QWORD *)(a4 + 56))
      goto LABEL_32;
    goto LABEL_61;
  }
  __break(1u);
LABEL_67:
  __break(1u);
LABEL_68:
  __break(1u);
LABEL_69:
  __break(1u);
}

{
  double v4;
  double v5;
  double v6;
  double v7;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  double v15;
  double *Value;
  char v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  int v25;
  void *v26;
  id v27;
  uint64_t v28;
  int v29;
  id v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  void *v34;
  id v35;
  uint64_t v36;
  int CurrentAttribute;
  id v38;
  uint64_t Counter;
  uint64_t v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  double v44;
  uint64_t v45;
  unsigned __int8 v46;
  void (*v47)(uint64_t *, unint64_t, double);
  void *v48;
  float64x2_t v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  void *v53;
  id v54;
  uint64_t v55;
  int v56;
  id v57;
  uint64_t v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  int v63;
  uint64_t v64;
  unsigned __int8 v65;
  uint64_t v66;
  char v67;
  float64x2_t v68;

  v11 = type metadata accessor for OSSignpostID();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v11);
  v14 = (char *)&v61 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for infinity != -1)
    swift_once();
  v15 = -*(double *)&static Time.infinity;
  if (*(_QWORD *)(a4 + 40))
  {
    Value = (double *)AGGraphGetValue();
    if ((v17 & 1) != 0)
      v15 = *Value;
  }
  if (*(_DWORD *)(a4 + 48) != *(_DWORD *)AGGraphGetValue() >> 1)
  {
    specialized AnimatableAttributeHelper.reset()();
    *(_BYTE *)(a1 + 32) = 1;
LABEL_11:
    v6 = *(double *)a1;
    v7 = *(double *)(a1 + 8);
    if ((*(_BYTE *)(a4 + 32) & 1) != 0)
      goto LABEL_37;
    v5 = *(double *)(a4 + 16);
    v4 = *(double *)(a4 + 24);
    if (v6 == v5 && v7 == v4)
      goto LABEL_37;
    AGGraphClearUpdate();
    AGGraphGetValue();
    swift_retain();
    AGGraphSetUpdate();
    v20 = swift_retain();
    v21 = specialized find<A>(_:key:)(v20);
    if (v21)
    {
      v22 = *(_QWORD *)(v21 + 72);
      swift_retain();
      swift_release();
      if (v22)
        goto LABEL_25;
    }
    else
    {
      swift_release();
    }
    v23 = swift_retain();
    v24 = specialized closure #1 in PropertyList.subscript.getter(v23);
    swift_release();
    if ((v24 & 1) == 0)
    {
      if (!a2)
        goto LABEL_36;
      swift_retain();
      v22 = a2;
      goto LABEL_25;
    }
    if (one-time initialization token for velocityTracking != -1)
      goto LABEL_68;
    goto LABEL_22;
  }
  if (*(_BYTE *)(a1 + 32) == 1)
    goto LABEL_11;
  v18 = *(_QWORD *)(a4 + 40);
  if (!v18)
    return;
  while (1)
  {
    v68 = *(float64x2_t *)a1;
    swift_retain();
    v67 = 0;
    if ((specialized AnimatorState.update(_:at:environment:)(&v68, v15) & 1) == 0)
    {
      if (one-time initialization token for shared != -1)
        swift_once();
      swift_beginAccess();
      v44 = *(double *)(v18 + 56);
      v66 = *(_QWORD *)(v18 + 64);
      v45 = *(unsigned int *)(v18 + 88);
      v46 = *(_BYTE *)(v18 + 92);
      v47 = *(void (**)(uint64_t *, unint64_t, double))((*MEMORY[0x24BEE4EA0] & *(_QWORD *)static CoreGlue.shared)
                                                                       + 0x58);
      v48 = static CoreGlue.shared;
      v65 = v46;
      v47(&v66, v45 | ((unint64_t)v46 << 32), v44);
      swift_release();

      goto LABEL_53;
    }
    swift_retain();
    static os_signpost_type_t.end.getter();
    static os_signpost_type_t.event.getter();
    if ((kdebug_is_enabled() & 1) == 0)
      goto LABEL_50;
    if (one-time initialization token for _signpostLog != -1)
      swift_once();
    v34 = (void *)_signpostLog;
    if ((OS_os_log.signpostsEnabled.getter() & 1) == 0)
    {
LABEL_50:
      v43 = swift_release();
      if (*(_QWORD *)(a4 + 40))
      {
LABEL_51:
        specialized AnimatorState.removeListeners()(v43);
        swift_release();
      }
LABEL_52:
      swift_release();
      *(_QWORD *)(a4 + 40) = 0;
LABEL_53:
      v49 = v68;
      *(float64x2_t *)a1 = v68;
      *(float64x2_t *)(a1 + 16) = v49;
      *(_BYTE *)(a1 + 32) = 1;
      return;
    }
    v64 = v12;
    swift_retain();
    v35 = v34;
    OSSignpostID.init(log:object:)();
    type metadata accessor for _ContiguousArrayStorage<CVarArg>();
    v36 = swift_allocObject();
    *(_OWORD *)(v36 + 16) = xmmword_235283260;
    CurrentAttribute = AGGraphGetCurrentAttribute();
    v12 = *MEMORY[0x24BE096C0];
    if (CurrentAttribute == (_DWORD)v12)
    {
      __break(1u);
    }
    else
    {
      v38 = (id)AGGraphGetAttributeGraph();
      Counter = AGGraphGetCounter();

      v40 = MEMORY[0x24BEE1ED8];
      *(_QWORD *)(v36 + 56) = MEMORY[0x24BEE1E88];
      *(_QWORD *)(v36 + 64) = v40;
      *(_QWORD *)(v36 + 32) = Counter;
      v41 = AGGraphGetCurrentAttribute();
      if (v41 != (_DWORD)v12)
      {
        v42 = MEMORY[0x24BEE4558];
        *(_QWORD *)(v36 + 96) = MEMORY[0x24BEE44F0];
        *(_QWORD *)(v36 + 104) = v42;
        *(_DWORD *)(v36 + 72) = v41;
        *(_QWORD *)(v36 + 136) = MEMORY[0x24BEE0D00];
        *(_QWORD *)(v36 + 144) = lazy protocol witness table accessor for type String and conformance String();
        *(_QWORD *)(v36 + 112) = 0x657A695377656956;
        *(_QWORD *)(v36 + 120) = 0xE800000000000000;
        os_signpost(_:dso:log:name:signpostID:_:_:)();
        swift_release();
        (*(void (**)(char *, uint64_t))(v64 + 8))(v14, v11);
        v43 = swift_bridgeObjectRelease();
        if (*(_QWORD *)(a4 + 40))
          goto LABEL_51;
        goto LABEL_52;
      }
    }
    __break(1u);
LABEL_68:
    swift_once();
LABEL_22:
    v22 = static Animation.velocityTracking;
    swift_retain();
LABEL_25:
    v5 = v6 - v5;
    v4 = v7 - v4;
    v15 = *(double *)AGGraphGetValue();
    if (*(_QWORD *)(a4 + 40))
      break;
    type metadata accessor for CombinedAnimationState<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>>.Entry(0, &lazy cache variable for type metadata for AnimatorState<AnimatablePair<CGFloat, CGFloat>>, (uint64_t (*)(uint64_t))type metadata accessor for AnimatablePair<CGFloat, CGFloat>, (uint64_t (*)(void))lazy protocol witness table accessor for type AnimatablePair<CGFloat, CGFloat> and conformance AnimatablePair<A, B>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatorState);
    swift_allocObject();
    swift_retain();
    v50 = swift_retain();
    v51 = specialized AnimatorState.init(animation:interval:at:in:)(v50, v5, v4, v15);
    swift_retain();
    v52 = static os_signpost_type_t.begin.getter();
    static os_signpost_type_t.event.getter();
    if ((kdebug_is_enabled() & 1) == 0)
      goto LABEL_62;
    v63 = v52;
    if (one-time initialization token for _signpostLog != -1)
      swift_once();
    v53 = (void *)_signpostLog;
    if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
    {
      v64 = v12;
      swift_retain();
      v54 = v53;
      OSSignpostID.init(log:object:)();
      type metadata accessor for _ContiguousArrayStorage<CVarArg>();
      v55 = swift_allocObject();
      *(_OWORD *)(v55 + 16) = xmmword_235283260;
      v56 = AGGraphGetCurrentAttribute();
      v62 = *MEMORY[0x24BE096C0];
      if (v56 == v62)
        goto LABEL_71;
      v57 = (id)AGGraphGetAttributeGraph();
      v61 = AGGraphGetCounter();

      v58 = MEMORY[0x24BEE1ED8];
      *(_QWORD *)(v55 + 56) = MEMORY[0x24BEE1E88];
      *(_QWORD *)(v55 + 64) = v58;
      *(_QWORD *)(v55 + 32) = v61;
      v59 = AGGraphGetCurrentAttribute();
      if (v59 == v62)
        goto LABEL_72;
      v60 = MEMORY[0x24BEE4558];
      *(_QWORD *)(v55 + 96) = MEMORY[0x24BEE44F0];
      *(_QWORD *)(v55 + 104) = v60;
      *(_DWORD *)(v55 + 72) = v59;
      *(_QWORD *)(v55 + 136) = MEMORY[0x24BEE0D00];
      *(_QWORD *)(v55 + 144) = lazy protocol witness table accessor for type String and conformance String();
      *(_QWORD *)(v55 + 112) = 0x657A695377656956;
      *(_QWORD *)(v55 + 120) = 0xE800000000000000;
      os_signpost(_:dso:log:name:signpostID:_:_:)();
      swift_release();
      v12 = v64;
      (*(void (**)(char *, uint64_t))(v64 + 8))(v14, v11);
      swift_bridgeObjectRelease();
    }
    else
    {
LABEL_62:
      swift_release();
    }
    swift_release();
    *(_QWORD *)(a4 + 40) = v51;
    if (v51)
    {
LABEL_35:
      swift_retain();
      specialized AnimatorState.addListeners(transaction:)();
      swift_release();
      swift_release();
      goto LABEL_36;
    }
LABEL_64:
    __break(1u);
LABEL_36:
    swift_release();
LABEL_37:
    *(double *)(a4 + 16) = v6;
    *(double *)(a4 + 24) = v7;
    *(_BYTE *)(a4 + 32) = 0;
    v18 = *(_QWORD *)(a4 + 40);
    if (!v18)
      return;
  }
  swift_retain();
  v67 = 0;
  specialized AnimatorState.combine(newAnimation:newInterval:at:in:environment:)(v22, v5, v4, v15);
  swift_retain();
  v25 = static os_signpost_type_t.event.getter();
  static os_signpost_type_t.event.getter();
  if ((kdebug_is_enabled() & 1) == 0)
    goto LABEL_33;
  v63 = v25;
  if (one-time initialization token for _signpostLog != -1)
    swift_once();
  v26 = (void *)_signpostLog;
  if ((OS_os_log.signpostsEnabled.getter() & 1) == 0)
  {
LABEL_33:
    swift_release_n();
    goto LABEL_34;
  }
  v64 = v12;
  swift_retain();
  v27 = v26;
  OSSignpostID.init(log:object:)();
  type metadata accessor for _ContiguousArrayStorage<CVarArg>();
  v28 = swift_allocObject();
  *(_OWORD *)(v28 + 16) = xmmword_235283260;
  v29 = AGGraphGetCurrentAttribute();
  v62 = *MEMORY[0x24BE096C0];
  if (v29 != v62)
  {
    v30 = (id)AGGraphGetAttributeGraph();
    v61 = AGGraphGetCounter();

    v31 = MEMORY[0x24BEE1ED8];
    *(_QWORD *)(v28 + 56) = MEMORY[0x24BEE1E88];
    *(_QWORD *)(v28 + 64) = v31;
    *(_QWORD *)(v28 + 32) = v61;
    v32 = AGGraphGetCurrentAttribute();
    if (v32 == v62)
      goto LABEL_70;
    v33 = MEMORY[0x24BEE4558];
    *(_QWORD *)(v28 + 96) = MEMORY[0x24BEE44F0];
    *(_QWORD *)(v28 + 104) = v33;
    *(_DWORD *)(v28 + 72) = v32;
    *(_QWORD *)(v28 + 136) = MEMORY[0x24BEE0D00];
    *(_QWORD *)(v28 + 144) = lazy protocol witness table accessor for type String and conformance String();
    *(_QWORD *)(v28 + 112) = 0x657A695377656956;
    *(_QWORD *)(v28 + 120) = 0xE800000000000000;
    os_signpost(_:dso:log:name:signpostID:_:_:)();
    swift_release_n();
    v12 = v64;
    (*(void (**)(char *, uint64_t))(v64 + 8))(v14, v11);
    swift_bridgeObjectRelease();
LABEL_34:
    if (*(_QWORD *)(a4 + 40))
      goto LABEL_35;
    goto LABEL_64;
  }
  __break(1u);
LABEL_70:
  __break(1u);
LABEL_71:
  __break(1u);
LABEL_72:
  __break(1u);
}

{
  double v4;
  double v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  double v13;
  double *Value;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  int v22;
  void *v23;
  id v24;
  uint64_t v25;
  int v26;
  id v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  void *v31;
  id v32;
  uint64_t v33;
  int CurrentAttribute;
  id v35;
  uint64_t Counter;
  uint64_t v37;
  int v38;
  uint64_t v39;
  double v40;
  uint64_t v41;
  unsigned __int8 v42;
  void (*v43)(uint64_t *, unint64_t, double);
  void *v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  void *v48;
  id v49;
  uint64_t v50;
  int v51;
  id v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  int v59;
  uint64_t v60;
  unsigned __int8 v61;
  uint64_t v62;
  char v63;
  double v64;

  v9 = type metadata accessor for OSSignpostID();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v56 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for infinity != -1)
    swift_once();
  v13 = -*(double *)&static Time.infinity;
  if (*(_QWORD *)(a4 + 32))
  {
    Value = (double *)AGGraphGetValue();
    if ((v15 & 1) != 0)
      v13 = *Value;
  }
  if (*(_DWORD *)(a4 + 40) != *(_DWORD *)AGGraphGetValue() >> 1)
  {
    specialized AnimatableAttributeHelper.reset()();
    *(_BYTE *)(a1 + 10) = 1;
LABEL_11:
    v5 = *(double *)a1;
    if ((*(_BYTE *)(a4 + 24) & 1) != 0)
      goto LABEL_34;
    v4 = *(double *)(a4 + 16);
    if (v5 == v4)
      goto LABEL_34;
    AGGraphClearUpdate();
    AGGraphGetValue();
    swift_retain();
    AGGraphSetUpdate();
    v17 = swift_retain();
    v18 = specialized find<A>(_:key:)(v17);
    if (v18)
    {
      v19 = *(_QWORD *)(v18 + 72);
      swift_retain();
      swift_release();
      if (v19)
        goto LABEL_22;
    }
    else
    {
      swift_release();
    }
    v20 = swift_retain();
    v21 = specialized closure #1 in PropertyList.subscript.getter(v20);
    swift_release();
    if ((v21 & 1) == 0)
    {
      if (!a2)
        goto LABEL_33;
      swift_retain();
      v19 = a2;
      goto LABEL_22;
    }
    if (one-time initialization token for velocityTracking != -1)
      goto LABEL_65;
    goto LABEL_19;
  }
  if (*(_BYTE *)(a1 + 10) == 1)
    goto LABEL_11;
  v16 = *(_QWORD *)(a4 + 32);
  if (!v16)
    return;
  while (1)
  {
    v64 = *(double *)a1;
    swift_retain();
    v63 = 0;
    if ((specialized AnimatorState.update(_:at:environment:)(&v64, v13) & 1) == 0)
    {
      if (one-time initialization token for shared != -1)
        swift_once();
      swift_beginAccess();
      v40 = *(double *)(v16 + 48);
      v62 = *(_QWORD *)(v16 + 56);
      v41 = *(unsigned int *)(v16 + 72);
      v42 = *(_BYTE *)(v16 + 76);
      v43 = *(void (**)(uint64_t *, unint64_t, double))((*MEMORY[0x24BEE4EA0] & *(_QWORD *)static CoreGlue.shared)
                                                                       + 0x58);
      v44 = static CoreGlue.shared;
      v61 = v42;
      v43(&v62, v41 | ((unint64_t)v42 << 32), v40);
      swift_release();

      goto LABEL_50;
    }
    swift_retain();
    static os_signpost_type_t.end.getter();
    static os_signpost_type_t.event.getter();
    if ((kdebug_is_enabled() & 1) == 0)
      goto LABEL_47;
    if (one-time initialization token for _signpostLog != -1)
      swift_once();
    v31 = (void *)_signpostLog;
    if ((OS_os_log.signpostsEnabled.getter() & 1) == 0)
    {
LABEL_47:
      swift_release();
      if (*(_QWORD *)(a4 + 32))
      {
LABEL_48:
        specialized AnimatorState.removeListeners()();
        swift_release();
      }
LABEL_49:
      swift_release();
      *(_QWORD *)(a4 + 32) = 0;
LABEL_50:
      *(double *)a1 = v64;
      *(_BYTE *)(a1 + 10) = 1;
      return;
    }
    v60 = v10;
    swift_retain();
    v32 = v31;
    OSSignpostID.init(log:object:)();
    type metadata accessor for _ContiguousArrayStorage<CVarArg>();
    v33 = swift_allocObject();
    *(_OWORD *)(v33 + 16) = xmmword_235283260;
    CurrentAttribute = AGGraphGetCurrentAttribute();
    v10 = *MEMORY[0x24BE096C0];
    if (CurrentAttribute == (_DWORD)v10)
    {
      __break(1u);
    }
    else
    {
      v35 = (id)AGGraphGetAttributeGraph();
      Counter = AGGraphGetCounter();

      v37 = MEMORY[0x24BEE1ED8];
      *(_QWORD *)(v33 + 56) = MEMORY[0x24BEE1E88];
      *(_QWORD *)(v33 + 64) = v37;
      *(_QWORD *)(v33 + 32) = Counter;
      v38 = AGGraphGetCurrentAttribute();
      if (v38 != (_DWORD)v10)
      {
        v39 = MEMORY[0x24BEE4558];
        *(_QWORD *)(v33 + 96) = MEMORY[0x24BEE44F0];
        *(_QWORD *)(v33 + 104) = v39;
        *(_DWORD *)(v33 + 72) = v38;
        *(_QWORD *)(v33 + 136) = MEMORY[0x24BEE0D00];
        *(_QWORD *)(v33 + 144) = lazy protocol witness table accessor for type String and conformance String();
        *(_QWORD *)(v33 + 112) = 0x6C79745372756C42;
        *(_QWORD *)(v33 + 120) = 0xE900000000000065;
        os_signpost(_:dso:log:name:signpostID:_:_:)();
        swift_release();
        (*(void (**)(char *, uint64_t))(v60 + 8))(v12, v9);
        swift_bridgeObjectRelease();
        if (*(_QWORD *)(a4 + 32))
          goto LABEL_48;
        goto LABEL_49;
      }
    }
    __break(1u);
LABEL_65:
    swift_once();
LABEL_19:
    v19 = static Animation.velocityTracking;
    swift_retain();
LABEL_22:
    v4 = v5 - v4;
    v13 = *(double *)AGGraphGetValue();
    if (*(_QWORD *)(a4 + 32))
      break;
    type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for AnimatorState<CGFloat>, (uint64_t (*)(void))lazy protocol witness table accessor for type CGFloat and conformance CGFloat, MEMORY[0x24BEE50B0], (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatorState);
    swift_allocObject();
    swift_retain();
    v45 = swift_retain();
    v46 = specialized AnimatorState.init(animation:interval:at:in:)(v45, v4, v13);
    swift_retain();
    v47 = static os_signpost_type_t.begin.getter();
    static os_signpost_type_t.event.getter();
    if ((kdebug_is_enabled() & 1) == 0)
      goto LABEL_59;
    v59 = v47;
    if (one-time initialization token for _signpostLog != -1)
      swift_once();
    v48 = (void *)_signpostLog;
    if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
    {
      v60 = v19;
      swift_retain();
      v49 = v48;
      OSSignpostID.init(log:object:)();
      type metadata accessor for _ContiguousArrayStorage<CVarArg>();
      v50 = swift_allocObject();
      *(_OWORD *)(v50 + 16) = xmmword_235283260;
      v51 = AGGraphGetCurrentAttribute();
      v58 = *MEMORY[0x24BE096C0];
      if (v51 == v58)
        goto LABEL_68;
      v52 = (id)AGGraphGetAttributeGraph();
      v57 = AGGraphGetCounter();

      v53 = MEMORY[0x24BEE1ED8];
      *(_QWORD *)(v50 + 56) = MEMORY[0x24BEE1E88];
      *(_QWORD *)(v50 + 64) = v53;
      *(_QWORD *)(v50 + 32) = v57;
      v54 = AGGraphGetCurrentAttribute();
      if (v54 == v58)
        goto LABEL_69;
      v55 = MEMORY[0x24BEE4558];
      *(_QWORD *)(v50 + 96) = MEMORY[0x24BEE44F0];
      *(_QWORD *)(v50 + 104) = v55;
      *(_DWORD *)(v50 + 72) = v54;
      *(_QWORD *)(v50 + 136) = MEMORY[0x24BEE0D00];
      *(_QWORD *)(v50 + 144) = lazy protocol witness table accessor for type String and conformance String();
      *(_QWORD *)(v50 + 112) = 0x6C79745372756C42;
      *(_QWORD *)(v50 + 120) = 0xE900000000000065;
      os_signpost(_:dso:log:name:signpostID:_:_:)();
      swift_release();
      (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
      swift_bridgeObjectRelease();
    }
    else
    {
LABEL_59:
      swift_release();
    }
    swift_release();
    *(_QWORD *)(a4 + 32) = v46;
    if (v46)
    {
LABEL_32:
      swift_retain();
      specialized AnimatorState.addListeners(transaction:)();
      swift_release();
      swift_release();
      goto LABEL_33;
    }
LABEL_61:
    __break(1u);
LABEL_33:
    swift_release();
LABEL_34:
    *(double *)(a4 + 16) = v5;
    *(_BYTE *)(a4 + 24) = 0;
    v16 = *(_QWORD *)(a4 + 32);
    if (!v16)
      return;
  }
  swift_retain();
  v63 = 0;
  specialized AnimatorState.combine(newAnimation:newInterval:at:in:environment:)(v19, v4, v13);
  swift_retain();
  v22 = static os_signpost_type_t.event.getter();
  static os_signpost_type_t.event.getter();
  if ((kdebug_is_enabled() & 1) == 0)
    goto LABEL_30;
  v59 = v22;
  if (one-time initialization token for _signpostLog != -1)
    swift_once();
  v23 = (void *)_signpostLog;
  if ((OS_os_log.signpostsEnabled.getter() & 1) == 0)
  {
LABEL_30:
    swift_release_n();
    goto LABEL_31;
  }
  v60 = v19;
  swift_retain();
  v24 = v23;
  OSSignpostID.init(log:object:)();
  type metadata accessor for _ContiguousArrayStorage<CVarArg>();
  v25 = swift_allocObject();
  *(_OWORD *)(v25 + 16) = xmmword_235283260;
  v26 = AGGraphGetCurrentAttribute();
  v58 = *MEMORY[0x24BE096C0];
  if (v26 != v58)
  {
    v27 = (id)AGGraphGetAttributeGraph();
    v57 = AGGraphGetCounter();

    v28 = MEMORY[0x24BEE1ED8];
    *(_QWORD *)(v25 + 56) = MEMORY[0x24BEE1E88];
    *(_QWORD *)(v25 + 64) = v28;
    *(_QWORD *)(v25 + 32) = v57;
    v29 = AGGraphGetCurrentAttribute();
    if (v29 == v58)
      goto LABEL_67;
    v30 = MEMORY[0x24BEE4558];
    *(_QWORD *)(v25 + 96) = MEMORY[0x24BEE44F0];
    *(_QWORD *)(v25 + 104) = v30;
    *(_DWORD *)(v25 + 72) = v29;
    *(_QWORD *)(v25 + 136) = MEMORY[0x24BEE0D00];
    *(_QWORD *)(v25 + 144) = lazy protocol witness table accessor for type String and conformance String();
    *(_QWORD *)(v25 + 112) = 0x6C79745372756C42;
    *(_QWORD *)(v25 + 120) = 0xE900000000000065;
    os_signpost(_:dso:log:name:signpostID:_:_:)();
    swift_release_n();
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
    swift_bridgeObjectRelease();
LABEL_31:
    if (*(_QWORD *)(a4 + 32))
      goto LABEL_32;
    goto LABEL_61;
  }
  __break(1u);
LABEL_67:
  __break(1u);
LABEL_68:
  __break(1u);
LABEL_69:
  __break(1u);
}

{
  double v4;
  double v5;
  double v6;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  double v14;
  double *Value;
  char v16;
  uint64_t v17;
  float64x2_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  int v25;
  void *v26;
  id v27;
  uint64_t v28;
  int v29;
  id v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  void *v34;
  id v35;
  uint64_t v36;
  int CurrentAttribute;
  id v38;
  uint64_t Counter;
  uint64_t v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  double v44;
  uint64_t v45;
  unsigned __int8 v46;
  void (*v47)(uint64_t *, unint64_t, double);
  void *v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  void *v52;
  id v53;
  uint64_t v54;
  int v55;
  id v56;
  uint64_t v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  int v63;
  uint64_t v64;
  float64x2_t v65;
  unsigned __int8 v66;
  uint64_t v67;
  char v68;
  float64x2_t v69[2];

  v10 = type metadata accessor for OSSignpostID();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)&v60 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for infinity != -1)
    swift_once();
  v14 = -*(double *)&static Time.infinity;
  if (*(_QWORD *)(a4 + 40))
  {
    Value = (double *)AGGraphGetValue();
    if ((v16 & 1) != 0)
      v14 = *Value;
  }
  if (*(_DWORD *)(a4 + 48) != *(_DWORD *)AGGraphGetValue() >> 1)
  {
    specialized AnimatableAttributeHelper.reset()();
    *(_BYTE *)(a1 + 16) = 1;
LABEL_11:
    v18 = vmulq_f64(*(float64x2_t *)a1, (float64x2_t)vdupq_n_s64(0x4060000000000000uLL));
    if ((*(_BYTE *)(a4 + 32) & 1) != 0)
      goto LABEL_37;
    v5 = *(double *)(a4 + 16);
    v4 = *(double *)(a4 + 24);
    v6 = v18.f64[1];
    if (v18.f64[0] == v5 && v18.f64[1] == v4)
      goto LABEL_37;
    v65 = v18;
    AGGraphClearUpdate();
    AGGraphGetValue();
    swift_retain();
    AGGraphSetUpdate();
    v20 = swift_retain();
    v21 = specialized find<A>(_:key:)(v20);
    if (v21)
    {
      v22 = *(_QWORD *)(v21 + 72);
      swift_retain();
      swift_release();
      if (v22)
        goto LABEL_25;
    }
    else
    {
      swift_release();
    }
    v23 = swift_retain();
    v24 = specialized closure #1 in PropertyList.subscript.getter(v23);
    swift_release();
    if ((v24 & 1) == 0)
    {
      if (!a2)
        goto LABEL_36;
      swift_retain();
      v22 = a2;
      goto LABEL_25;
    }
    if (one-time initialization token for velocityTracking != -1)
      goto LABEL_68;
    goto LABEL_22;
  }
  if (*(_BYTE *)(a1 + 16) == 1)
    goto LABEL_11;
  v17 = *(_QWORD *)(a4 + 40);
  if (!v17)
    return;
  while (1)
  {
    v69[0] = vmulq_f64(*(float64x2_t *)a1, (float64x2_t)vdupq_n_s64(0x4060000000000000uLL));
    swift_retain();
    v68 = 0;
    if ((specialized AnimatorState.update(_:at:environment:)(v69, v14) & 1) == 0)
    {
      if (one-time initialization token for shared != -1)
        swift_once();
      swift_beginAccess();
      v44 = *(double *)(v17 + 56);
      v67 = *(_QWORD *)(v17 + 64);
      v45 = *(unsigned int *)(v17 + 88);
      v46 = *(_BYTE *)(v17 + 92);
      v47 = *(void (**)(uint64_t *, unint64_t, double))((*MEMORY[0x24BEE4EA0] & *(_QWORD *)static CoreGlue.shared)
                                                                       + 0x58);
      v48 = static CoreGlue.shared;
      v66 = v46;
      v47(&v67, v45 | ((unint64_t)v46 << 32), v44);
      swift_release();

      goto LABEL_53;
    }
    swift_retain();
    static os_signpost_type_t.end.getter();
    static os_signpost_type_t.event.getter();
    if ((kdebug_is_enabled() & 1) == 0)
      goto LABEL_50;
    if (one-time initialization token for _signpostLog != -1)
      swift_once();
    v34 = (void *)_signpostLog;
    if ((OS_os_log.signpostsEnabled.getter() & 1) == 0)
    {
LABEL_50:
      v43 = swift_release();
      if (*(_QWORD *)(a4 + 40))
      {
LABEL_51:
        specialized AnimatorState.removeListeners()(v43);
        swift_release();
      }
LABEL_52:
      swift_release();
      *(_QWORD *)(a4 + 40) = 0;
LABEL_53:
      *(float64x2_t *)a1 = vmulq_f64(v69[0], (float64x2_t)vdupq_n_s64(0x3F80000000000000uLL));
      *(_BYTE *)(a1 + 16) = 1;
      return;
    }
    v64 = v11;
    swift_retain();
    v35 = v34;
    OSSignpostID.init(log:object:)();
    type metadata accessor for _ContiguousArrayStorage<CVarArg>();
    v36 = swift_allocObject();
    *(_OWORD *)(v36 + 16) = xmmword_235283260;
    CurrentAttribute = AGGraphGetCurrentAttribute();
    v11 = *MEMORY[0x24BE096C0];
    if (CurrentAttribute == (_DWORD)v11)
    {
      __break(1u);
    }
    else
    {
      v38 = (id)AGGraphGetAttributeGraph();
      Counter = AGGraphGetCounter();

      v40 = MEMORY[0x24BEE1ED8];
      *(_QWORD *)(v36 + 56) = MEMORY[0x24BEE1E88];
      *(_QWORD *)(v36 + 64) = v40;
      *(_QWORD *)(v36 + 32) = Counter;
      v41 = AGGraphGetCurrentAttribute();
      if (v41 != (_DWORD)v11)
      {
        v42 = MEMORY[0x24BEE4558];
        *(_QWORD *)(v36 + 96) = MEMORY[0x24BEE44F0];
        *(_QWORD *)(v36 + 104) = v42;
        *(_DWORD *)(v36 + 72) = v41;
        *(_QWORD *)(v36 + 136) = MEMORY[0x24BEE0D00];
        *(_QWORD *)(v36 + 144) = lazy protocol witness table accessor for type String and conformance String();
        *(_QWORD *)(v36 + 112) = 0x6E696F5074696E55;
        *(_QWORD *)(v36 + 120) = 0xE900000000000074;
        os_signpost(_:dso:log:name:signpostID:_:_:)();
        swift_release();
        (*(void (**)(char *, uint64_t))(v64 + 8))(v13, v10);
        v43 = swift_bridgeObjectRelease();
        if (*(_QWORD *)(a4 + 40))
          goto LABEL_51;
        goto LABEL_52;
      }
    }
    __break(1u);
LABEL_68:
    swift_once();
LABEL_22:
    v22 = static Animation.velocityTracking;
    swift_retain();
LABEL_25:
    v5 = v65.f64[0] - v5;
    v4 = v6 - v4;
    v14 = *(double *)AGGraphGetValue();
    if (*(_QWORD *)(a4 + 40))
      break;
    type metadata accessor for CombinedAnimationState<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>>.Entry(0, &lazy cache variable for type metadata for AnimatorState<AnimatablePair<CGFloat, CGFloat>>, (uint64_t (*)(uint64_t))type metadata accessor for AnimatablePair<CGFloat, CGFloat>, (uint64_t (*)(void))lazy protocol witness table accessor for type AnimatablePair<CGFloat, CGFloat> and conformance AnimatablePair<A, B>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatorState);
    swift_allocObject();
    swift_retain();
    v49 = swift_retain();
    v50 = specialized AnimatorState.init(animation:interval:at:in:)(v49, v5, v4, v14);
    swift_retain();
    v51 = static os_signpost_type_t.begin.getter();
    static os_signpost_type_t.event.getter();
    if ((kdebug_is_enabled() & 1) == 0)
      goto LABEL_62;
    v63 = v51;
    if (one-time initialization token for _signpostLog != -1)
      swift_once();
    v52 = (void *)_signpostLog;
    if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
    {
      v64 = v11;
      swift_retain();
      v53 = v52;
      OSSignpostID.init(log:object:)();
      type metadata accessor for _ContiguousArrayStorage<CVarArg>();
      v54 = swift_allocObject();
      *(_OWORD *)(v54 + 16) = xmmword_235283260;
      v55 = AGGraphGetCurrentAttribute();
      v62 = *MEMORY[0x24BE096C0];
      if (v55 == v62)
        goto LABEL_71;
      v56 = (id)AGGraphGetAttributeGraph();
      v61 = AGGraphGetCounter();

      v57 = MEMORY[0x24BEE1ED8];
      *(_QWORD *)(v54 + 56) = MEMORY[0x24BEE1E88];
      *(_QWORD *)(v54 + 64) = v57;
      *(_QWORD *)(v54 + 32) = v61;
      v58 = AGGraphGetCurrentAttribute();
      if (v58 == v62)
        goto LABEL_72;
      v59 = MEMORY[0x24BEE4558];
      *(_QWORD *)(v54 + 96) = MEMORY[0x24BEE44F0];
      *(_QWORD *)(v54 + 104) = v59;
      *(_DWORD *)(v54 + 72) = v58;
      *(_QWORD *)(v54 + 136) = MEMORY[0x24BEE0D00];
      *(_QWORD *)(v54 + 144) = lazy protocol witness table accessor for type String and conformance String();
      *(_QWORD *)(v54 + 112) = 0x6E696F5074696E55;
      *(_QWORD *)(v54 + 120) = 0xE900000000000074;
      os_signpost(_:dso:log:name:signpostID:_:_:)();
      swift_release();
      v11 = v64;
      (*(void (**)(char *, uint64_t))(v64 + 8))(v13, v10);
      swift_bridgeObjectRelease();
    }
    else
    {
LABEL_62:
      swift_release();
    }
    swift_release();
    *(_QWORD *)(a4 + 40) = v50;
    if (v50)
    {
LABEL_35:
      swift_retain();
      specialized AnimatorState.addListeners(transaction:)();
      swift_release();
      swift_release();
      goto LABEL_36;
    }
LABEL_64:
    __break(1u);
LABEL_36:
    swift_release();
    v18 = v65;
LABEL_37:
    *(float64x2_t *)(a4 + 16) = v18;
    *(_BYTE *)(a4 + 32) = 0;
    v17 = *(_QWORD *)(a4 + 40);
    if (!v17)
      return;
  }
  swift_retain();
  v68 = 0;
  specialized AnimatorState.combine(newAnimation:newInterval:at:in:environment:)(v22, v5, v4, v14);
  swift_retain();
  v25 = static os_signpost_type_t.event.getter();
  static os_signpost_type_t.event.getter();
  if ((kdebug_is_enabled() & 1) == 0)
    goto LABEL_33;
  v63 = v25;
  if (one-time initialization token for _signpostLog != -1)
    swift_once();
  v26 = (void *)_signpostLog;
  if ((OS_os_log.signpostsEnabled.getter() & 1) == 0)
  {
LABEL_33:
    swift_release_n();
    goto LABEL_34;
  }
  v64 = v11;
  swift_retain();
  v27 = v26;
  OSSignpostID.init(log:object:)();
  type metadata accessor for _ContiguousArrayStorage<CVarArg>();
  v28 = swift_allocObject();
  *(_OWORD *)(v28 + 16) = xmmword_235283260;
  v29 = AGGraphGetCurrentAttribute();
  v62 = *MEMORY[0x24BE096C0];
  if (v29 != v62)
  {
    v30 = (id)AGGraphGetAttributeGraph();
    v61 = AGGraphGetCounter();

    v31 = MEMORY[0x24BEE1ED8];
    *(_QWORD *)(v28 + 56) = MEMORY[0x24BEE1E88];
    *(_QWORD *)(v28 + 64) = v31;
    *(_QWORD *)(v28 + 32) = v61;
    v32 = AGGraphGetCurrentAttribute();
    if (v32 == v62)
      goto LABEL_70;
    v33 = MEMORY[0x24BEE4558];
    *(_QWORD *)(v28 + 96) = MEMORY[0x24BEE44F0];
    *(_QWORD *)(v28 + 104) = v33;
    *(_DWORD *)(v28 + 72) = v32;
    *(_QWORD *)(v28 + 136) = MEMORY[0x24BEE0D00];
    *(_QWORD *)(v28 + 144) = lazy protocol witness table accessor for type String and conformance String();
    *(_QWORD *)(v28 + 112) = 0x6E696F5074696E55;
    *(_QWORD *)(v28 + 120) = 0xE900000000000074;
    os_signpost(_:dso:log:name:signpostID:_:_:)();
    swift_release_n();
    v11 = v64;
    (*(void (**)(char *, uint64_t))(v64 + 8))(v13, v10);
    swift_bridgeObjectRelease();
LABEL_34:
    if (*(_QWORD *)(a4 + 40))
      goto LABEL_35;
    goto LABEL_64;
  }
  __break(1u);
LABEL_70:
  __break(1u);
LABEL_71:
  __break(1u);
LABEL_72:
  __break(1u);
}

{
  double v4;
  double v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  double v13;
  double *Value;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  int v22;
  void *v23;
  id v24;
  uint64_t v25;
  int v26;
  id v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  void *v31;
  id v32;
  uint64_t v33;
  int CurrentAttribute;
  id v35;
  uint64_t Counter;
  uint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  double v41;
  uint64_t v42;
  unsigned __int8 v43;
  void (*v44)(uint64_t *, unint64_t, double);
  void *v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  void *v49;
  id v50;
  uint64_t v51;
  int v52;
  id v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  int v60;
  uint64_t v61;
  unsigned __int8 v62;
  uint64_t v63;
  char v64;
  double v65;

  v9 = type metadata accessor for OSSignpostID();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v57 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for infinity != -1)
    swift_once();
  v13 = -*(double *)&static Time.infinity;
  if (*(_QWORD *)(a4 + 32))
  {
    Value = (double *)AGGraphGetValue();
    if ((v15 & 1) != 0)
      v13 = *Value;
  }
  if (*(_DWORD *)(a4 + 40) != *(_DWORD *)AGGraphGetValue() >> 1)
  {
    specialized AnimatableAttributeHelper.reset()();
    *(_BYTE *)(a1 + 8) = 1;
LABEL_11:
    v5 = *(double *)a1;
    if ((*(_BYTE *)(a4 + 24) & 1) != 0)
      goto LABEL_34;
    v4 = *(double *)(a4 + 16);
    if (v5 == v4)
      goto LABEL_34;
    AGGraphClearUpdate();
    AGGraphGetValue();
    swift_retain();
    AGGraphSetUpdate();
    v17 = swift_retain();
    v18 = specialized find<A>(_:key:)(v17);
    if (v18)
    {
      v19 = *(_QWORD *)(v18 + 72);
      swift_retain();
      swift_release();
      if (v19)
        goto LABEL_22;
    }
    else
    {
      swift_release();
    }
    v20 = swift_retain();
    v21 = specialized closure #1 in PropertyList.subscript.getter(v20);
    swift_release();
    if ((v21 & 1) == 0)
    {
      if (!a2)
        goto LABEL_33;
      swift_retain();
      v19 = a2;
      goto LABEL_22;
    }
    if (one-time initialization token for velocityTracking != -1)
      goto LABEL_65;
    goto LABEL_19;
  }
  if (*(_BYTE *)(a1 + 8) == 1)
    goto LABEL_11;
  v16 = *(_QWORD *)(a4 + 32);
  if (!v16)
    return;
  while (1)
  {
    v65 = *(double *)a1;
    swift_retain();
    v64 = 0;
    if ((specialized AnimatorState.update(_:at:environment:)(&v65, v13) & 1) == 0)
    {
      if (one-time initialization token for shared != -1)
        swift_once();
      swift_beginAccess();
      v41 = *(double *)(v16 + 48);
      v63 = *(_QWORD *)(v16 + 56);
      v42 = *(unsigned int *)(v16 + 72);
      v43 = *(_BYTE *)(v16 + 76);
      v44 = *(void (**)(uint64_t *, unint64_t, double))((*MEMORY[0x24BEE4EA0] & *(_QWORD *)static CoreGlue.shared)
                                                                       + 0x58);
      v45 = static CoreGlue.shared;
      v62 = v43;
      v44(&v63, v42 | ((unint64_t)v43 << 32), v41);
      swift_release();

      goto LABEL_50;
    }
    swift_retain();
    static os_signpost_type_t.end.getter();
    static os_signpost_type_t.event.getter();
    if ((kdebug_is_enabled() & 1) == 0)
      goto LABEL_47;
    if (one-time initialization token for _signpostLog != -1)
      swift_once();
    v31 = (void *)_signpostLog;
    if ((OS_os_log.signpostsEnabled.getter() & 1) == 0)
    {
LABEL_47:
      v40 = swift_release();
      if (*(_QWORD *)(a4 + 32))
      {
LABEL_48:
        specialized AnimatorState.removeListeners()(v40);
        swift_release();
      }
LABEL_49:
      swift_release();
      *(_QWORD *)(a4 + 32) = 0;
LABEL_50:
      *(double *)a1 = v65;
      *(_BYTE *)(a1 + 8) = 1;
      return;
    }
    v61 = v10;
    swift_retain();
    v32 = v31;
    OSSignpostID.init(log:object:)();
    type metadata accessor for _ContiguousArrayStorage<CVarArg>();
    v33 = swift_allocObject();
    *(_OWORD *)(v33 + 16) = xmmword_235283260;
    CurrentAttribute = AGGraphGetCurrentAttribute();
    v10 = *MEMORY[0x24BE096C0];
    if (CurrentAttribute == (_DWORD)v10)
    {
      __break(1u);
    }
    else
    {
      v35 = (id)AGGraphGetAttributeGraph();
      Counter = AGGraphGetCounter();

      v37 = MEMORY[0x24BEE1ED8];
      *(_QWORD *)(v33 + 56) = MEMORY[0x24BEE1E88];
      *(_QWORD *)(v33 + 64) = v37;
      *(_QWORD *)(v33 + 32) = Counter;
      v38 = AGGraphGetCurrentAttribute();
      if (v38 != (_DWORD)v10)
      {
        v39 = MEMORY[0x24BEE4558];
        *(_QWORD *)(v33 + 96) = MEMORY[0x24BEE44F0];
        *(_QWORD *)(v33 + 104) = v39;
        *(_DWORD *)(v33 + 72) = v38;
        *(_QWORD *)(v33 + 136) = MEMORY[0x24BEE0D00];
        *(_QWORD *)(v33 + 144) = lazy protocol witness table accessor for type String and conformance String();
        *(_QWORD *)(v33 + 112) = 0x656C62756F44;
        *(_QWORD *)(v33 + 120) = 0xE600000000000000;
        os_signpost(_:dso:log:name:signpostID:_:_:)();
        swift_release();
        (*(void (**)(char *, uint64_t))(v61 + 8))(v12, v9);
        v40 = swift_bridgeObjectRelease();
        if (*(_QWORD *)(a4 + 32))
          goto LABEL_48;
        goto LABEL_49;
      }
    }
    __break(1u);
LABEL_65:
    swift_once();
LABEL_19:
    v19 = static Animation.velocityTracking;
    swift_retain();
LABEL_22:
    v4 = v5 - v4;
    v13 = *(double *)AGGraphGetValue();
    if (*(_QWORD *)(a4 + 32))
      break;
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for AnimatorState<Double>, MEMORY[0x24BEE13C8], (uint64_t)&protocol witness table for Double, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for AnimatorState);
    swift_allocObject();
    swift_retain();
    v46 = swift_retain();
    v47 = specialized AnimatorState.init(animation:interval:at:in:)(v46, v4, v13);
    swift_retain();
    v48 = static os_signpost_type_t.begin.getter();
    static os_signpost_type_t.event.getter();
    if ((kdebug_is_enabled() & 1) == 0)
      goto LABEL_59;
    v60 = v48;
    if (one-time initialization token for _signpostLog != -1)
      swift_once();
    v49 = (void *)_signpostLog;
    if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
    {
      v61 = v19;
      swift_retain();
      v50 = v49;
      OSSignpostID.init(log:object:)();
      type metadata accessor for _ContiguousArrayStorage<CVarArg>();
      v51 = swift_allocObject();
      *(_OWORD *)(v51 + 16) = xmmword_235283260;
      v52 = AGGraphGetCurrentAttribute();
      v59 = *MEMORY[0x24BE096C0];
      if (v52 == v59)
        goto LABEL_68;
      v53 = (id)AGGraphGetAttributeGraph();
      v58 = AGGraphGetCounter();

      v54 = MEMORY[0x24BEE1ED8];
      *(_QWORD *)(v51 + 56) = MEMORY[0x24BEE1E88];
      *(_QWORD *)(v51 + 64) = v54;
      *(_QWORD *)(v51 + 32) = v58;
      v55 = AGGraphGetCurrentAttribute();
      if (v55 == v59)
        goto LABEL_69;
      v56 = MEMORY[0x24BEE4558];
      *(_QWORD *)(v51 + 96) = MEMORY[0x24BEE44F0];
      *(_QWORD *)(v51 + 104) = v56;
      *(_DWORD *)(v51 + 72) = v55;
      *(_QWORD *)(v51 + 136) = MEMORY[0x24BEE0D00];
      *(_QWORD *)(v51 + 144) = lazy protocol witness table accessor for type String and conformance String();
      *(_QWORD *)(v51 + 112) = 0x656C62756F44;
      *(_QWORD *)(v51 + 120) = 0xE600000000000000;
      os_signpost(_:dso:log:name:signpostID:_:_:)();
      swift_release();
      (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
      swift_bridgeObjectRelease();
    }
    else
    {
LABEL_59:
      swift_release();
    }
    swift_release();
    *(_QWORD *)(a4 + 32) = v47;
    if (v47)
    {
LABEL_32:
      swift_retain();
      specialized AnimatorState.addListeners(transaction:)();
      swift_release();
      swift_release();
      goto LABEL_33;
    }
LABEL_61:
    __break(1u);
LABEL_33:
    swift_release();
LABEL_34:
    *(double *)(a4 + 16) = v5;
    *(_BYTE *)(a4 + 24) = 0;
    v16 = *(_QWORD *)(a4 + 32);
    if (!v16)
      return;
  }
  swift_retain();
  v64 = 0;
  specialized AnimatorState.combine(newAnimation:newInterval:at:in:environment:)(v19, v4, v13);
  swift_retain();
  v22 = static os_signpost_type_t.event.getter();
  static os_signpost_type_t.event.getter();
  if ((kdebug_is_enabled() & 1) == 0)
    goto LABEL_30;
  v60 = v22;
  if (one-time initialization token for _signpostLog != -1)
    swift_once();
  v23 = (void *)_signpostLog;
  if ((OS_os_log.signpostsEnabled.getter() & 1) == 0)
  {
LABEL_30:
    swift_release_n();
    goto LABEL_31;
  }
  v61 = v19;
  swift_retain();
  v24 = v23;
  OSSignpostID.init(log:object:)();
  type metadata accessor for _ContiguousArrayStorage<CVarArg>();
  v25 = swift_allocObject();
  *(_OWORD *)(v25 + 16) = xmmword_235283260;
  v26 = AGGraphGetCurrentAttribute();
  v59 = *MEMORY[0x24BE096C0];
  if (v26 != v59)
  {
    v27 = (id)AGGraphGetAttributeGraph();
    v58 = AGGraphGetCounter();

    v28 = MEMORY[0x24BEE1ED8];
    *(_QWORD *)(v25 + 56) = MEMORY[0x24BEE1E88];
    *(_QWORD *)(v25 + 64) = v28;
    *(_QWORD *)(v25 + 32) = v58;
    v29 = AGGraphGetCurrentAttribute();
    if (v29 == v59)
      goto LABEL_67;
    v30 = MEMORY[0x24BEE4558];
    *(_QWORD *)(v25 + 96) = MEMORY[0x24BEE44F0];
    *(_QWORD *)(v25 + 104) = v30;
    *(_DWORD *)(v25 + 72) = v29;
    *(_QWORD *)(v25 + 136) = MEMORY[0x24BEE0D00];
    *(_QWORD *)(v25 + 144) = lazy protocol witness table accessor for type String and conformance String();
    *(_QWORD *)(v25 + 112) = 0x656C62756F44;
    *(_QWORD *)(v25 + 120) = 0xE600000000000000;
    os_signpost(_:dso:log:name:signpostID:_:_:)();
    swift_release_n();
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
    swift_bridgeObjectRelease();
LABEL_31:
    if (*(_QWORD *)(a4 + 32))
      goto LABEL_32;
    goto LABEL_61;
  }
  __break(1u);
LABEL_67:
  __break(1u);
LABEL_68:
  __break(1u);
LABEL_69:
  __break(1u);
}

{
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  double v18;
  double *Value;
  char v20;
  uint64_t v21;
  double v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  int v28;
  void *v29;
  id v30;
  uint64_t v31;
  int v32;
  id v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  __int128 v37;
  void *v38;
  id v39;
  uint64_t v40;
  int CurrentAttribute;
  id v42;
  uint64_t Counter;
  uint64_t v44;
  int v45;
  uint64_t v46;
  double v47;
  uint64_t v48;
  unsigned __int8 v49;
  void (*v50)(uint64_t *, unint64_t, double);
  void *v51;
  __int128 v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  void *v56;
  id v57;
  uint64_t v58;
  int v59;
  id v60;
  uint64_t v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  int v67;
  uint64_t v68;
  double v69;
  unsigned __int8 v70;
  uint64_t v71;
  char v72;
  float64x2_t v73;
  __int128 v74;

  v14 = type metadata accessor for OSSignpostID();
  v15 = *(_QWORD *)(v14 - 8);
  MEMORY[0x24BDAC7A8](v14);
  v17 = (char *)&v64 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for infinity != -1)
    swift_once();
  v18 = -*(double *)&static Time.infinity;
  if (*(_QWORD *)(a4 + 56))
  {
    Value = (double *)AGGraphGetValue();
    if ((v20 & 1) != 0)
      v18 = *Value;
  }
  if (*(_DWORD *)(a4 + 64) != *(_DWORD *)AGGraphGetValue() >> 1)
  {
    specialized AnimatableAttributeHelper.reset()();
    *(_BYTE *)(a1 + 32) = 1;
LABEL_11:
    v8 = *(double *)a1;
    v9 = *(double *)(a1 + 8);
    v10 = *(double *)(a1 + 16);
    v22 = *(double *)(a1 + 24);
    if ((*(_BYTE *)(a4 + 48) & 1) != 0)
      goto LABEL_37;
    v4 = *(double *)(a4 + 32);
    v5 = *(double *)(a4 + 40);
    v7 = *(double *)(a4 + 16);
    v6 = *(double *)(a4 + 24);
    if (v8 == v7 && v9 == v6 && v10 == v4 && v22 == v5)
      goto LABEL_37;
    v69 = *(double *)(a1 + 24);
    AGGraphClearUpdate();
    AGGraphGetValue();
    swift_retain();
    AGGraphSetUpdate();
    v23 = swift_retain();
    v24 = specialized find<A>(_:key:)(v23);
    if (v24)
    {
      v25 = *(_QWORD *)(v24 + 72);
      swift_retain();
      swift_release();
      if (v25)
        goto LABEL_25;
    }
    else
    {
      swift_release();
    }
    v26 = swift_retain();
    v27 = specialized closure #1 in PropertyList.subscript.getter(v26);
    swift_release();
    if ((v27 & 1) == 0)
    {
      if (!a2)
        goto LABEL_36;
      swift_retain();
      v25 = a2;
      goto LABEL_25;
    }
    if (one-time initialization token for velocityTracking != -1)
      goto LABEL_68;
    goto LABEL_22;
  }
  if (*(_BYTE *)(a1 + 32) == 1)
    goto LABEL_11;
  v21 = *(_QWORD *)(a4 + 56);
  if (!v21)
    return;
  while (1)
  {
    v37 = *(_OWORD *)(a1 + 16);
    v73 = *(float64x2_t *)a1;
    v74 = v37;
    swift_retain();
    v72 = 0;
    if ((specialized AnimatorState.update(_:at:environment:)(&v73, v18) & 1) == 0)
    {
      if (one-time initialization token for shared != -1)
        swift_once();
      swift_beginAccess();
      v47 = *(double *)(v21 + 72);
      v71 = *(_QWORD *)(v21 + 80);
      v48 = *(unsigned int *)(v21 + 120);
      v49 = *(_BYTE *)(v21 + 124);
      v50 = *(void (**)(uint64_t *, unint64_t, double))((*MEMORY[0x24BEE4EA0] & *(_QWORD *)static CoreGlue.shared)
                                                                       + 0x58);
      v51 = static CoreGlue.shared;
      v70 = v49;
      v50(&v71, v48 | ((unint64_t)v49 << 32), v47);
      swift_release();

      goto LABEL_53;
    }
    swift_retain();
    static os_signpost_type_t.end.getter();
    static os_signpost_type_t.event.getter();
    if ((kdebug_is_enabled() & 1) == 0)
      goto LABEL_50;
    if (one-time initialization token for _signpostLog != -1)
      swift_once();
    v38 = (void *)_signpostLog;
    if ((OS_os_log.signpostsEnabled.getter() & 1) == 0)
    {
LABEL_50:
      swift_release();
      if (*(_QWORD *)(a4 + 56))
      {
LABEL_51:
        specialized AnimatorState.removeListeners()();
        swift_release();
      }
LABEL_52:
      swift_release();
      *(_QWORD *)(a4 + 56) = 0;
LABEL_53:
      v52 = v74;
      *(float64x2_t *)a1 = v73;
      *(_OWORD *)(a1 + 16) = v52;
      *(_BYTE *)(a1 + 32) = 1;
      return;
    }
    v68 = v15;
    swift_retain();
    v39 = v38;
    OSSignpostID.init(log:object:)();
    type metadata accessor for _ContiguousArrayStorage<CVarArg>();
    v40 = swift_allocObject();
    *(_OWORD *)(v40 + 16) = xmmword_235283260;
    CurrentAttribute = AGGraphGetCurrentAttribute();
    v15 = *MEMORY[0x24BE096C0];
    if (CurrentAttribute == (_DWORD)v15)
    {
      __break(1u);
    }
    else
    {
      v42 = (id)AGGraphGetAttributeGraph();
      Counter = AGGraphGetCounter();

      v44 = MEMORY[0x24BEE1ED8];
      *(_QWORD *)(v40 + 56) = MEMORY[0x24BEE1E88];
      *(_QWORD *)(v40 + 64) = v44;
      *(_QWORD *)(v40 + 32) = Counter;
      v45 = AGGraphGetCurrentAttribute();
      if (v45 != (_DWORD)v15)
      {
        v46 = MEMORY[0x24BEE4558];
        *(_QWORD *)(v40 + 96) = MEMORY[0x24BEE44F0];
        *(_QWORD *)(v40 + 104) = v46;
        *(_DWORD *)(v40 + 72) = v45;
        *(_QWORD *)(v40 + 136) = MEMORY[0x24BEE0D00];
        *(_QWORD *)(v40 + 144) = lazy protocol witness table accessor for type String and conformance String();
        *(_QWORD *)(v40 + 112) = 0x746365524743;
        *(_QWORD *)(v40 + 120) = 0xE600000000000000;
        os_signpost(_:dso:log:name:signpostID:_:_:)();
        swift_release();
        (*(void (**)(char *, uint64_t))(v68 + 8))(v17, v14);
        swift_bridgeObjectRelease();
        if (*(_QWORD *)(a4 + 56))
          goto LABEL_51;
        goto LABEL_52;
      }
    }
    __break(1u);
LABEL_68:
    swift_once();
LABEL_22:
    v25 = static Animation.velocityTracking;
    swift_retain();
LABEL_25:
    v7 = v8 - v7;
    v6 = v9 - v6;
    v4 = v10 - v4;
    v5 = v69 - v5;
    v18 = *(double *)AGGraphGetValue();
    if (*(_QWORD *)(a4 + 56))
      break;
    type metadata accessor for CombinedAnimationState<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>>.Entry(0, (unint64_t *)&lazy cache variable for type metadata for AnimatorState<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>>, (uint64_t (*)(uint64_t))type metadata accessor for AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>, lazy protocol witness table accessor for type AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>> and conformance AnimatablePair<A, B>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatorState);
    swift_allocObject();
    swift_retain();
    v53 = swift_retain();
    v54 = specialized AnimatorState.init(animation:interval:at:in:)(v53, v7, v6, v4, v5, v18);
    swift_retain();
    v55 = static os_signpost_type_t.begin.getter();
    static os_signpost_type_t.event.getter();
    if ((kdebug_is_enabled() & 1) == 0)
      goto LABEL_62;
    v67 = v55;
    if (one-time initialization token for _signpostLog != -1)
      swift_once();
    v56 = (void *)_signpostLog;
    if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
    {
      v68 = v15;
      swift_retain();
      v57 = v56;
      OSSignpostID.init(log:object:)();
      type metadata accessor for _ContiguousArrayStorage<CVarArg>();
      v58 = swift_allocObject();
      *(_OWORD *)(v58 + 16) = xmmword_235283260;
      v59 = AGGraphGetCurrentAttribute();
      v66 = *MEMORY[0x24BE096C0];
      if (v59 == v66)
        goto LABEL_71;
      v60 = (id)AGGraphGetAttributeGraph();
      v65 = AGGraphGetCounter();

      v61 = MEMORY[0x24BEE1ED8];
      *(_QWORD *)(v58 + 56) = MEMORY[0x24BEE1E88];
      *(_QWORD *)(v58 + 64) = v61;
      *(_QWORD *)(v58 + 32) = v65;
      v62 = AGGraphGetCurrentAttribute();
      if (v62 == v66)
        goto LABEL_72;
      v63 = MEMORY[0x24BEE4558];
      *(_QWORD *)(v58 + 96) = MEMORY[0x24BEE44F0];
      *(_QWORD *)(v58 + 104) = v63;
      *(_DWORD *)(v58 + 72) = v62;
      *(_QWORD *)(v58 + 136) = MEMORY[0x24BEE0D00];
      *(_QWORD *)(v58 + 144) = lazy protocol witness table accessor for type String and conformance String();
      *(_QWORD *)(v58 + 112) = 0x746365524743;
      *(_QWORD *)(v58 + 120) = 0xE600000000000000;
      os_signpost(_:dso:log:name:signpostID:_:_:)();
      swift_release();
      v15 = v68;
      (*(void (**)(char *, uint64_t))(v68 + 8))(v17, v14);
      swift_bridgeObjectRelease();
    }
    else
    {
LABEL_62:
      swift_release();
    }
    swift_release();
    *(_QWORD *)(a4 + 56) = v54;
    if (v54)
    {
LABEL_35:
      swift_retain();
      specialized AnimatorState.addListeners(transaction:)();
      swift_release();
      swift_release();
      goto LABEL_36;
    }
LABEL_64:
    __break(1u);
LABEL_36:
    swift_release();
    v22 = v69;
LABEL_37:
    *(double *)(a4 + 16) = v8;
    *(double *)(a4 + 24) = v9;
    *(double *)(a4 + 32) = v10;
    *(double *)(a4 + 40) = v22;
    *(_BYTE *)(a4 + 48) = 0;
    v21 = *(_QWORD *)(a4 + 56);
    if (!v21)
      return;
  }
  swift_retain();
  LOBYTE(v73.f64[0]) = 0;
  specialized AnimatorState.combine(newAnimation:newInterval:at:in:environment:)(v25, v7, v6, v4, v5, v18);
  swift_retain();
  v28 = static os_signpost_type_t.event.getter();
  static os_signpost_type_t.event.getter();
  if ((kdebug_is_enabled() & 1) == 0)
    goto LABEL_33;
  v67 = v28;
  if (one-time initialization token for _signpostLog != -1)
    swift_once();
  v29 = (void *)_signpostLog;
  if ((OS_os_log.signpostsEnabled.getter() & 1) == 0)
  {
LABEL_33:
    swift_release_n();
    goto LABEL_34;
  }
  v68 = v15;
  swift_retain();
  v30 = v29;
  OSSignpostID.init(log:object:)();
  type metadata accessor for _ContiguousArrayStorage<CVarArg>();
  v31 = swift_allocObject();
  *(_OWORD *)(v31 + 16) = xmmword_235283260;
  v32 = AGGraphGetCurrentAttribute();
  v66 = *MEMORY[0x24BE096C0];
  if (v32 != v66)
  {
    v33 = (id)AGGraphGetAttributeGraph();
    v65 = AGGraphGetCounter();

    v34 = MEMORY[0x24BEE1ED8];
    *(_QWORD *)(v31 + 56) = MEMORY[0x24BEE1E88];
    *(_QWORD *)(v31 + 64) = v34;
    *(_QWORD *)(v31 + 32) = v65;
    v35 = AGGraphGetCurrentAttribute();
    if (v35 == v66)
      goto LABEL_70;
    v36 = MEMORY[0x24BEE4558];
    *(_QWORD *)(v31 + 96) = MEMORY[0x24BEE44F0];
    *(_QWORD *)(v31 + 104) = v36;
    *(_DWORD *)(v31 + 72) = v35;
    *(_QWORD *)(v31 + 136) = MEMORY[0x24BEE0D00];
    *(_QWORD *)(v31 + 144) = lazy protocol witness table accessor for type String and conformance String();
    *(_QWORD *)(v31 + 112) = 0x746365524743;
    *(_QWORD *)(v31 + 120) = 0xE600000000000000;
    os_signpost(_:dso:log:name:signpostID:_:_:)();
    swift_release_n();
    v15 = v68;
    (*(void (**)(char *, uint64_t))(v68 + 8))(v17, v14);
    swift_bridgeObjectRelease();
LABEL_34:
    if (*(_QWORD *)(a4 + 56))
      goto LABEL_35;
    goto LABEL_64;
  }
  __break(1u);
LABEL_70:
  __break(1u);
LABEL_71:
  __break(1u);
LABEL_72:
  __break(1u);
}

{
  specialized AnimatableAttributeHelper.update(value:defaultAnimation:environment:sampleCollector:)(a1, a2, a3, a4, (void (*)(void))specialized AnimatableAttributeHelper.reset(), 0x657A69534743, 0xE600000000000000);
}

{
  specialized AnimatableAttributeHelper.update(value:defaultAnimation:environment:sampleCollector:)(a1, a2, a3, a4, (void (*)(void))specialized AnimatableAttributeHelper.reset(), 0x746E696F504743, 0xE700000000000000);
}

void specialized AnimatableAttributeHelper.update(value:defaultAnimation:environment:sampleCollector:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(void), uint64_t a6, uint64_t a7)
{
  double v7;
  double v8;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  double v18;
  double *Value;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  int v27;
  void *v28;
  id v29;
  uint64_t v30;
  int v31;
  id v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  id v38;
  uint64_t v39;
  int CurrentAttribute;
  id v41;
  uint64_t Counter;
  uint64_t v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  double v48;
  uint64_t v49;
  unsigned __int8 v50;
  void (*v51)(uint64_t *, unint64_t, double);
  void *v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  void *v56;
  id v57;
  uint64_t v58;
  int v59;
  id v60;
  uint64_t v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unsigned __int8 v72;
  uint64_t v73;
  char v74;
  double v75;

  v71 = a6;
  v14 = type metadata accessor for OSSignpostID();
  v15 = *(_QWORD *)(v14 - 8);
  MEMORY[0x24BDAC7A8](v14);
  v17 = (char *)&v65 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for infinity != -1)
    swift_once();
  v18 = -*(double *)&static Time.infinity;
  if (*(_QWORD *)(a4 + 32))
  {
    Value = (double *)AGGraphGetValue();
    if ((v20 & 1) != 0)
      v18 = *Value;
  }
  if (*(_DWORD *)(a4 + 40) != *(_DWORD *)AGGraphGetValue() >> 1)
  {
    a5();
    *(_BYTE *)(a1 + 8) = 1;
LABEL_11:
    v8 = *(double *)a1;
    if ((*(_BYTE *)(a4 + 24) & 1) != 0)
      goto LABEL_34;
    v7 = *(double *)(a4 + 16);
    if (v8 == v7)
      goto LABEL_34;
    v70 = a7;
    AGGraphClearUpdate();
    AGGraphGetValue();
    swift_retain();
    AGGraphSetUpdate();
    v22 = swift_retain();
    v23 = specialized find<A>(_:key:)(v22);
    if (v23)
    {
      v24 = *(_QWORD *)(v23 + 72);
      swift_retain();
      swift_release();
      if (v24)
        goto LABEL_22;
    }
    else
    {
      swift_release();
    }
    v25 = swift_retain();
    v26 = specialized closure #1 in PropertyList.subscript.getter(v25);
    swift_release();
    if ((v26 & 1) == 0)
    {
      if (!a2)
        goto LABEL_33;
      swift_retain();
      v24 = a2;
      goto LABEL_22;
    }
    if (one-time initialization token for velocityTracking != -1)
      goto LABEL_65;
    goto LABEL_19;
  }
  if (*(_BYTE *)(a1 + 8) == 1)
    goto LABEL_11;
  v21 = *(_QWORD *)(a4 + 32);
  if (!v21)
    return;
  while (1)
  {
    v75 = *(double *)a1;
    swift_retain();
    v74 = 0;
    if ((specialized AnimatorState.update(_:at:environment:)(&v75, v18) & 1) == 0)
    {
      if (one-time initialization token for shared != -1)
        swift_once();
      swift_beginAccess();
      v48 = *(double *)(v21 + 48);
      v73 = *(_QWORD *)(v21 + 56);
      v49 = *(unsigned int *)(v21 + 72);
      v50 = *(_BYTE *)(v21 + 76);
      v51 = *(void (**)(uint64_t *, unint64_t, double))((*MEMORY[0x24BEE4EA0] & *(_QWORD *)static CoreGlue.shared)
                                                                       + 0x58);
      v52 = static CoreGlue.shared;
      v72 = v50;
      v51(&v73, v49 | ((unint64_t)v50 << 32), v48);
      swift_release();

      goto LABEL_50;
    }
    swift_retain_n();
    static os_signpost_type_t.end.getter();
    static os_signpost_type_t.event.getter();
    if ((kdebug_is_enabled() & 1) == 0)
      goto LABEL_47;
    if (one-time initialization token for _signpostLog != -1)
      swift_once();
    v37 = (void *)_signpostLog;
    if ((OS_os_log.signpostsEnabled.getter() & 1) == 0)
    {
LABEL_47:
      v47 = swift_release_n();
      if (*(_QWORD *)(a4 + 32))
      {
LABEL_48:
        specialized AnimatorState.removeListeners()(v47);
        swift_release();
      }
LABEL_49:
      swift_release();
      *(_QWORD *)(a4 + 32) = 0;
LABEL_50:
      *(double *)a1 = v75;
      *(_BYTE *)(a1 + 8) = 1;
      return;
    }
    v69 = v15;
    v70 = a7;
    swift_retain();
    v38 = v37;
    OSSignpostID.init(log:object:)();
    type metadata accessor for _ContiguousArrayStorage<CVarArg>();
    v39 = swift_allocObject();
    *(_OWORD *)(v39 + 16) = xmmword_235283260;
    CurrentAttribute = AGGraphGetCurrentAttribute();
    v15 = *MEMORY[0x24BE096C0];
    if (CurrentAttribute == (_DWORD)v15)
    {
      __break(1u);
    }
    else
    {
      v41 = (id)AGGraphGetAttributeGraph();
      Counter = AGGraphGetCounter();

      v43 = MEMORY[0x24BEE1ED8];
      *(_QWORD *)(v39 + 56) = MEMORY[0x24BEE1E88];
      *(_QWORD *)(v39 + 64) = v43;
      *(_QWORD *)(v39 + 32) = Counter;
      v44 = AGGraphGetCurrentAttribute();
      if (v44 != (_DWORD)v15)
      {
        v45 = MEMORY[0x24BEE4558];
        *(_QWORD *)(v39 + 96) = MEMORY[0x24BEE44F0];
        *(_QWORD *)(v39 + 104) = v45;
        *(_DWORD *)(v39 + 72) = v44;
        *(_QWORD *)(v39 + 136) = MEMORY[0x24BEE0D00];
        *(_QWORD *)(v39 + 144) = lazy protocol witness table accessor for type String and conformance String();
        v46 = v70;
        *(_QWORD *)(v39 + 112) = v71;
        *(_QWORD *)(v39 + 120) = v46;
        os_signpost(_:dso:log:name:signpostID:_:_:)();
        swift_release_n();
        (*(void (**)(char *, uint64_t))(v69 + 8))(v17, v14);
        v47 = swift_bridgeObjectRelease();
        if (*(_QWORD *)(a4 + 32))
          goto LABEL_48;
        goto LABEL_49;
      }
    }
    __break(1u);
LABEL_65:
    swift_once();
LABEL_19:
    v24 = static Animation.velocityTracking;
    swift_retain();
LABEL_22:
    v7 = v8 - v7;
    v18 = *(double *)AGGraphGetValue();
    if (*(_QWORD *)(a4 + 32))
      break;
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for AnimatorState<Double>, MEMORY[0x24BEE13C8], (uint64_t)&protocol witness table for Double, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for AnimatorState);
    swift_allocObject();
    swift_retain();
    v53 = swift_retain();
    v54 = specialized AnimatorState.init(animation:interval:at:in:)(v53, v7, v18);
    swift_retain();
    v55 = static os_signpost_type_t.begin.getter();
    static os_signpost_type_t.event.getter();
    if ((kdebug_is_enabled() & 1) == 0)
      goto LABEL_59;
    v68 = v55;
    if (one-time initialization token for _signpostLog != -1)
      swift_once();
    v56 = (void *)_signpostLog;
    if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
    {
      v69 = v24;
      swift_retain();
      v57 = v56;
      OSSignpostID.init(log:object:)();
      type metadata accessor for _ContiguousArrayStorage<CVarArg>();
      v58 = swift_allocObject();
      *(_OWORD *)(v58 + 16) = xmmword_235283260;
      v59 = AGGraphGetCurrentAttribute();
      v67 = *MEMORY[0x24BE096C0];
      if (v59 == v67)
        goto LABEL_68;
      v60 = (id)AGGraphGetAttributeGraph();
      v66 = AGGraphGetCounter();

      v61 = MEMORY[0x24BEE1ED8];
      *(_QWORD *)(v58 + 56) = MEMORY[0x24BEE1E88];
      *(_QWORD *)(v58 + 64) = v61;
      *(_QWORD *)(v58 + 32) = v66;
      v62 = AGGraphGetCurrentAttribute();
      if (v62 == v67)
        goto LABEL_69;
      v63 = MEMORY[0x24BEE4558];
      *(_QWORD *)(v58 + 96) = MEMORY[0x24BEE44F0];
      *(_QWORD *)(v58 + 104) = v63;
      *(_DWORD *)(v58 + 72) = v62;
      *(_QWORD *)(v58 + 136) = MEMORY[0x24BEE0D00];
      *(_QWORD *)(v58 + 144) = lazy protocol witness table accessor for type String and conformance String();
      v64 = v70;
      *(_QWORD *)(v58 + 112) = v71;
      *(_QWORD *)(v58 + 120) = v64;
      os_signpost(_:dso:log:name:signpostID:_:_:)();
      swift_release();
      (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v14);
      swift_bridgeObjectRelease();
    }
    else
    {
LABEL_59:
      swift_release();
    }
    swift_release();
    *(_QWORD *)(a4 + 32) = v54;
    if (v54)
    {
LABEL_32:
      swift_retain();
      specialized AnimatorState.addListeners(transaction:)();
      swift_release();
      swift_release();
      goto LABEL_33;
    }
LABEL_61:
    __break(1u);
LABEL_33:
    swift_release();
    a7 = v70;
LABEL_34:
    *(double *)(a4 + 16) = v8;
    *(_BYTE *)(a4 + 24) = 0;
    v21 = *(_QWORD *)(a4 + 32);
    if (!v21)
      return;
  }
  swift_retain();
  v74 = 0;
  specialized AnimatorState.combine(newAnimation:newInterval:at:in:environment:)(v24, v7, v18);
  swift_retain_n();
  v27 = static os_signpost_type_t.event.getter();
  static os_signpost_type_t.event.getter();
  if ((kdebug_is_enabled() & 1) == 0)
    goto LABEL_30;
  v68 = v27;
  if (one-time initialization token for _signpostLog != -1)
    swift_once();
  v28 = (void *)_signpostLog;
  if ((OS_os_log.signpostsEnabled.getter() & 1) == 0)
  {
LABEL_30:
    swift_release_n();
    goto LABEL_31;
  }
  v69 = v24;
  swift_retain();
  v29 = v28;
  OSSignpostID.init(log:object:)();
  type metadata accessor for _ContiguousArrayStorage<CVarArg>();
  v30 = swift_allocObject();
  *(_OWORD *)(v30 + 16) = xmmword_235283260;
  v31 = AGGraphGetCurrentAttribute();
  v67 = *MEMORY[0x24BE096C0];
  if (v31 != v67)
  {
    v32 = (id)AGGraphGetAttributeGraph();
    v66 = AGGraphGetCounter();

    v33 = MEMORY[0x24BEE1ED8];
    *(_QWORD *)(v30 + 56) = MEMORY[0x24BEE1E88];
    *(_QWORD *)(v30 + 64) = v33;
    *(_QWORD *)(v30 + 32) = v66;
    v34 = AGGraphGetCurrentAttribute();
    if (v34 == v67)
      goto LABEL_67;
    v35 = MEMORY[0x24BEE4558];
    *(_QWORD *)(v30 + 96) = MEMORY[0x24BEE44F0];
    *(_QWORD *)(v30 + 104) = v35;
    *(_DWORD *)(v30 + 72) = v34;
    *(_QWORD *)(v30 + 136) = MEMORY[0x24BEE0D00];
    *(_QWORD *)(v30 + 144) = lazy protocol witness table accessor for type String and conformance String();
    v36 = v70;
    *(_QWORD *)(v30 + 112) = v71;
    *(_QWORD *)(v30 + 120) = v36;
    os_signpost(_:dso:log:name:signpostID:_:_:)();
    swift_release_n();
    (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v14);
    swift_bridgeObjectRelease();
LABEL_31:
    if (*(_QWORD *)(a4 + 32))
      goto LABEL_32;
    goto LABEL_61;
  }
  __break(1u);
LABEL_67:
  __break(1u);
LABEL_68:
  __break(1u);
LABEL_69:
  __break(1u);
}

{
  double v7;
  double v8;
  double v9;
  double v10;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  double v20;
  double *Value;
  char v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  int v30;
  void *v31;
  id v32;
  uint64_t v33;
  int v34;
  id v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  id v41;
  uint64_t v42;
  int CurrentAttribute;
  id v44;
  uint64_t Counter;
  uint64_t v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  double v51;
  uint64_t v52;
  unsigned __int8 v53;
  void (*v54)(uint64_t *, unint64_t, double);
  void *v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  void *v59;
  id v60;
  uint64_t v61;
  int v62;
  id v63;
  uint64_t v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unsigned __int8 v74;
  uint64_t v75;
  char v76;
  float64x2_t v77[2];

  v73 = a6;
  v16 = type metadata accessor for OSSignpostID();
  v17 = *(_QWORD *)(v16 - 8);
  MEMORY[0x24BDAC7A8](v16);
  v19 = (char *)&v68 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for infinity != -1)
    swift_once();
  v20 = -*(double *)&static Time.infinity;
  if (*(_QWORD *)(a4 + 40))
  {
    Value = (double *)AGGraphGetValue();
    if ((v22 & 1) != 0)
      v20 = *Value;
  }
  if (*(_DWORD *)(a4 + 48) != *(_DWORD *)AGGraphGetValue() >> 1)
  {
    a5();
    *(_BYTE *)(a1 + 16) = 1;
LABEL_11:
    v9 = *(double *)a1;
    v10 = *(double *)(a1 + 8);
    if ((*(_BYTE *)(a4 + 32) & 1) != 0)
      goto LABEL_37;
    v8 = *(double *)(a4 + 16);
    v7 = *(double *)(a4 + 24);
    if (v9 == v8 && v10 == v7)
      goto LABEL_37;
    v72 = a7;
    AGGraphClearUpdate();
    AGGraphGetValue();
    swift_retain();
    AGGraphSetUpdate();
    v25 = swift_retain();
    v26 = specialized find<A>(_:key:)(v25);
    if (v26)
    {
      v27 = *(_QWORD *)(v26 + 72);
      swift_retain();
      swift_release();
      if (v27)
        goto LABEL_25;
    }
    else
    {
      swift_release();
    }
    v28 = swift_retain();
    v29 = specialized closure #1 in PropertyList.subscript.getter(v28);
    swift_release();
    if ((v29 & 1) == 0)
    {
      if (!a2)
        goto LABEL_36;
      swift_retain();
      v27 = a2;
      goto LABEL_25;
    }
    if (one-time initialization token for velocityTracking != -1)
      goto LABEL_68;
    goto LABEL_22;
  }
  if (*(_BYTE *)(a1 + 16) == 1)
    goto LABEL_11;
  v23 = *(_QWORD *)(a4 + 40);
  if (!v23)
    return;
  while (1)
  {
    v77[0] = *(float64x2_t *)a1;
    swift_retain();
    v76 = 0;
    if ((specialized AnimatorState.update(_:at:environment:)(v77, v20) & 1) == 0)
    {
      if (one-time initialization token for shared != -1)
        swift_once();
      swift_beginAccess();
      v51 = *(double *)(v23 + 56);
      v75 = *(_QWORD *)(v23 + 64);
      v52 = *(unsigned int *)(v23 + 88);
      v53 = *(_BYTE *)(v23 + 92);
      v54 = *(void (**)(uint64_t *, unint64_t, double))((*MEMORY[0x24BEE4EA0] & *(_QWORD *)static CoreGlue.shared)
                                                                       + 0x58);
      v55 = static CoreGlue.shared;
      v74 = v53;
      v54(&v75, v52 | ((unint64_t)v53 << 32), v51);
      swift_release();

      goto LABEL_53;
    }
    swift_retain();
    static os_signpost_type_t.end.getter();
    static os_signpost_type_t.event.getter();
    if ((kdebug_is_enabled() & 1) == 0)
      goto LABEL_50;
    if (one-time initialization token for _signpostLog != -1)
      swift_once();
    v40 = (void *)_signpostLog;
    if ((OS_os_log.signpostsEnabled.getter() & 1) == 0)
    {
LABEL_50:
      v50 = swift_release();
      if (*(_QWORD *)(a4 + 40))
      {
LABEL_51:
        specialized AnimatorState.removeListeners()(v50);
        swift_release();
      }
LABEL_52:
      swift_release();
      *(_QWORD *)(a4 + 40) = 0;
LABEL_53:
      *(float64x2_t *)a1 = v77[0];
      *(_BYTE *)(a1 + 16) = 1;
      return;
    }
    v71 = v17;
    v72 = a7;
    swift_retain();
    v41 = v40;
    OSSignpostID.init(log:object:)();
    type metadata accessor for _ContiguousArrayStorage<CVarArg>();
    v42 = swift_allocObject();
    *(_OWORD *)(v42 + 16) = xmmword_235283260;
    CurrentAttribute = AGGraphGetCurrentAttribute();
    v17 = *MEMORY[0x24BE096C0];
    if (CurrentAttribute == (_DWORD)v17)
    {
      __break(1u);
    }
    else
    {
      v44 = (id)AGGraphGetAttributeGraph();
      Counter = AGGraphGetCounter();

      v46 = MEMORY[0x24BEE1ED8];
      *(_QWORD *)(v42 + 56) = MEMORY[0x24BEE1E88];
      *(_QWORD *)(v42 + 64) = v46;
      *(_QWORD *)(v42 + 32) = Counter;
      v47 = AGGraphGetCurrentAttribute();
      if (v47 != (_DWORD)v17)
      {
        v48 = MEMORY[0x24BEE4558];
        *(_QWORD *)(v42 + 96) = MEMORY[0x24BEE44F0];
        *(_QWORD *)(v42 + 104) = v48;
        *(_DWORD *)(v42 + 72) = v47;
        *(_QWORD *)(v42 + 136) = MEMORY[0x24BEE0D00];
        *(_QWORD *)(v42 + 144) = lazy protocol witness table accessor for type String and conformance String();
        v49 = v72;
        *(_QWORD *)(v42 + 112) = v73;
        *(_QWORD *)(v42 + 120) = v49;
        os_signpost(_:dso:log:name:signpostID:_:_:)();
        swift_release();
        (*(void (**)(char *, uint64_t))(v71 + 8))(v19, v16);
        v50 = swift_bridgeObjectRelease();
        if (*(_QWORD *)(a4 + 40))
          goto LABEL_51;
        goto LABEL_52;
      }
    }
    __break(1u);
LABEL_68:
    swift_once();
LABEL_22:
    v27 = static Animation.velocityTracking;
    swift_retain();
LABEL_25:
    v8 = v9 - v8;
    v7 = v10 - v7;
    v20 = *(double *)AGGraphGetValue();
    if (*(_QWORD *)(a4 + 40))
      break;
    type metadata accessor for CombinedAnimationState<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>>.Entry(0, &lazy cache variable for type metadata for AnimatorState<AnimatablePair<CGFloat, CGFloat>>, (uint64_t (*)(uint64_t))type metadata accessor for AnimatablePair<CGFloat, CGFloat>, (uint64_t (*)(void))lazy protocol witness table accessor for type AnimatablePair<CGFloat, CGFloat> and conformance AnimatablePair<A, B>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatorState);
    swift_allocObject();
    swift_retain();
    v56 = swift_retain();
    v57 = specialized AnimatorState.init(animation:interval:at:in:)(v56, v8, v7, v20);
    swift_retain();
    v58 = static os_signpost_type_t.begin.getter();
    static os_signpost_type_t.event.getter();
    if ((kdebug_is_enabled() & 1) == 0)
      goto LABEL_62;
    v70 = v58;
    if (one-time initialization token for _signpostLog != -1)
      swift_once();
    v59 = (void *)_signpostLog;
    if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
    {
      v71 = v17;
      swift_retain();
      v60 = v59;
      OSSignpostID.init(log:object:)();
      type metadata accessor for _ContiguousArrayStorage<CVarArg>();
      v61 = swift_allocObject();
      *(_OWORD *)(v61 + 16) = xmmword_235283260;
      v62 = AGGraphGetCurrentAttribute();
      v69 = *MEMORY[0x24BE096C0];
      if (v62 == v69)
        goto LABEL_71;
      v63 = (id)AGGraphGetAttributeGraph();
      v68 = AGGraphGetCounter();

      v64 = MEMORY[0x24BEE1ED8];
      *(_QWORD *)(v61 + 56) = MEMORY[0x24BEE1E88];
      *(_QWORD *)(v61 + 64) = v64;
      *(_QWORD *)(v61 + 32) = v68;
      v65 = AGGraphGetCurrentAttribute();
      if (v65 == v69)
        goto LABEL_72;
      v66 = MEMORY[0x24BEE4558];
      *(_QWORD *)(v61 + 96) = MEMORY[0x24BEE44F0];
      *(_QWORD *)(v61 + 104) = v66;
      *(_DWORD *)(v61 + 72) = v65;
      *(_QWORD *)(v61 + 136) = MEMORY[0x24BEE0D00];
      *(_QWORD *)(v61 + 144) = lazy protocol witness table accessor for type String and conformance String();
      v67 = v72;
      *(_QWORD *)(v61 + 112) = v73;
      *(_QWORD *)(v61 + 120) = v67;
      os_signpost(_:dso:log:name:signpostID:_:_:)();
      swift_release();
      v17 = v71;
      (*(void (**)(char *, uint64_t))(v71 + 8))(v19, v16);
      swift_bridgeObjectRelease();
    }
    else
    {
LABEL_62:
      swift_release();
    }
    swift_release();
    *(_QWORD *)(a4 + 40) = v57;
    if (v57)
    {
LABEL_35:
      swift_retain();
      specialized AnimatorState.addListeners(transaction:)();
      swift_release();
      swift_release();
      goto LABEL_36;
    }
LABEL_64:
    __break(1u);
LABEL_36:
    swift_release();
    a7 = v72;
LABEL_37:
    *(double *)(a4 + 16) = v9;
    *(double *)(a4 + 24) = v10;
    *(_BYTE *)(a4 + 32) = 0;
    v23 = *(_QWORD *)(a4 + 40);
    if (!v23)
      return;
  }
  swift_retain();
  v76 = 0;
  specialized AnimatorState.combine(newAnimation:newInterval:at:in:environment:)(v27, v8, v7, v20);
  swift_retain();
  v30 = static os_signpost_type_t.event.getter();
  static os_signpost_type_t.event.getter();
  if ((kdebug_is_enabled() & 1) == 0)
    goto LABEL_33;
  v70 = v30;
  if (one-time initialization token for _signpostLog != -1)
    swift_once();
  v31 = (void *)_signpostLog;
  if ((OS_os_log.signpostsEnabled.getter() & 1) == 0)
  {
LABEL_33:
    swift_release_n();
    goto LABEL_34;
  }
  v71 = v17;
  swift_retain();
  v32 = v31;
  OSSignpostID.init(log:object:)();
  type metadata accessor for _ContiguousArrayStorage<CVarArg>();
  v33 = swift_allocObject();
  *(_OWORD *)(v33 + 16) = xmmword_235283260;
  v34 = AGGraphGetCurrentAttribute();
  v69 = *MEMORY[0x24BE096C0];
  if (v34 != v69)
  {
    v35 = (id)AGGraphGetAttributeGraph();
    v68 = AGGraphGetCounter();

    v36 = MEMORY[0x24BEE1ED8];
    *(_QWORD *)(v33 + 56) = MEMORY[0x24BEE1E88];
    *(_QWORD *)(v33 + 64) = v36;
    *(_QWORD *)(v33 + 32) = v68;
    v37 = AGGraphGetCurrentAttribute();
    if (v37 == v69)
      goto LABEL_70;
    v38 = MEMORY[0x24BEE4558];
    *(_QWORD *)(v33 + 96) = MEMORY[0x24BEE44F0];
    *(_QWORD *)(v33 + 104) = v38;
    *(_DWORD *)(v33 + 72) = v37;
    *(_QWORD *)(v33 + 136) = MEMORY[0x24BEE0D00];
    *(_QWORD *)(v33 + 144) = lazy protocol witness table accessor for type String and conformance String();
    v39 = v72;
    *(_QWORD *)(v33 + 112) = v73;
    *(_QWORD *)(v33 + 120) = v39;
    os_signpost(_:dso:log:name:signpostID:_:_:)();
    swift_release_n();
    v17 = v71;
    (*(void (**)(char *, uint64_t))(v71 + 8))(v19, v16);
    swift_bridgeObjectRelease();
LABEL_34:
    if (*(_QWORD *)(a4 + 40))
      goto LABEL_35;
    goto LABEL_64;
  }
  __break(1u);
LABEL_70:
  __break(1u);
LABEL_71:
  __break(1u);
LABEL_72:
  __break(1u);
}

{
  double v7;
  double v8;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  double v18;
  double *Value;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  int v27;
  void *v28;
  id v29;
  uint64_t v30;
  int v31;
  id v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  id v38;
  uint64_t v39;
  int CurrentAttribute;
  id v41;
  uint64_t Counter;
  uint64_t v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  double v48;
  uint64_t v49;
  unsigned __int8 v50;
  void (*v51)(uint64_t *, unint64_t, double);
  void *v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  void *v56;
  id v57;
  uint64_t v58;
  int v59;
  id v60;
  uint64_t v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unsigned __int8 v72;
  uint64_t v73;
  char v74;
  double v75;

  v71 = a6;
  v14 = type metadata accessor for OSSignpostID();
  v15 = *(_QWORD *)(v14 - 8);
  MEMORY[0x24BDAC7A8](v14);
  v17 = (char *)&v65 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for infinity != -1)
    swift_once();
  v18 = -*(double *)&static Time.infinity;
  if (*(_QWORD *)(a4 + 32))
  {
    Value = (double *)AGGraphGetValue();
    if ((v20 & 1) != 0)
      v18 = *Value;
  }
  if (*(_DWORD *)(a4 + 40) != *(_DWORD *)AGGraphGetValue() >> 1)
  {
    a5();
    *(_BYTE *)(a1 + 8) = 1;
LABEL_11:
    v8 = *(double *)a1;
    if ((*(_BYTE *)(a4 + 24) & 1) != 0)
      goto LABEL_34;
    v7 = *(double *)(a4 + 16);
    if (v8 == v7)
      goto LABEL_34;
    v70 = a7;
    AGGraphClearUpdate();
    AGGraphGetValue();
    swift_retain();
    AGGraphSetUpdate();
    v22 = swift_retain();
    v23 = specialized find<A>(_:key:)(v22);
    if (v23)
    {
      v24 = *(_QWORD *)(v23 + 72);
      swift_retain();
      swift_release();
      if (v24)
        goto LABEL_22;
    }
    else
    {
      swift_release();
    }
    v25 = swift_retain();
    v26 = specialized closure #1 in PropertyList.subscript.getter(v25);
    swift_release();
    if ((v26 & 1) == 0)
    {
      if (!a2)
        goto LABEL_33;
      swift_retain();
      v24 = a2;
      goto LABEL_22;
    }
    if (one-time initialization token for velocityTracking != -1)
      goto LABEL_65;
    goto LABEL_19;
  }
  if (*(_BYTE *)(a1 + 8) == 1)
    goto LABEL_11;
  v21 = *(_QWORD *)(a4 + 32);
  if (!v21)
    return;
  while (1)
  {
    v75 = *(double *)a1;
    swift_retain();
    v74 = 0;
    if ((specialized AnimatorState.update(_:at:environment:)(&v75, v18) & 1) == 0)
    {
      if (one-time initialization token for shared != -1)
        swift_once();
      swift_beginAccess();
      v48 = *(double *)(v21 + 48);
      v73 = *(_QWORD *)(v21 + 56);
      v49 = *(unsigned int *)(v21 + 72);
      v50 = *(_BYTE *)(v21 + 76);
      v51 = *(void (**)(uint64_t *, unint64_t, double))((*MEMORY[0x24BEE4EA0] & *(_QWORD *)static CoreGlue.shared)
                                                                       + 0x58);
      v52 = static CoreGlue.shared;
      v72 = v50;
      v51(&v73, v49 | ((unint64_t)v50 << 32), v48);
      swift_release();

      goto LABEL_50;
    }
    swift_retain();
    static os_signpost_type_t.end.getter();
    static os_signpost_type_t.event.getter();
    if ((kdebug_is_enabled() & 1) == 0)
      goto LABEL_47;
    if (one-time initialization token for _signpostLog != -1)
      swift_once();
    v37 = (void *)_signpostLog;
    if ((OS_os_log.signpostsEnabled.getter() & 1) == 0)
    {
LABEL_47:
      v47 = swift_release();
      if (*(_QWORD *)(a4 + 32))
      {
LABEL_48:
        specialized AnimatorState.removeListeners()(v47);
        swift_release();
      }
LABEL_49:
      swift_release();
      *(_QWORD *)(a4 + 32) = 0;
LABEL_50:
      *(double *)a1 = v75;
      *(_BYTE *)(a1 + 8) = 1;
      return;
    }
    v69 = v15;
    v70 = a7;
    swift_retain();
    v38 = v37;
    OSSignpostID.init(log:object:)();
    type metadata accessor for _ContiguousArrayStorage<CVarArg>();
    v39 = swift_allocObject();
    *(_OWORD *)(v39 + 16) = xmmword_235283260;
    CurrentAttribute = AGGraphGetCurrentAttribute();
    v15 = *MEMORY[0x24BE096C0];
    if (CurrentAttribute == (_DWORD)v15)
    {
      __break(1u);
    }
    else
    {
      v41 = (id)AGGraphGetAttributeGraph();
      Counter = AGGraphGetCounter();

      v43 = MEMORY[0x24BEE1ED8];
      *(_QWORD *)(v39 + 56) = MEMORY[0x24BEE1E88];
      *(_QWORD *)(v39 + 64) = v43;
      *(_QWORD *)(v39 + 32) = Counter;
      v44 = AGGraphGetCurrentAttribute();
      if (v44 != (_DWORD)v15)
      {
        v45 = MEMORY[0x24BEE4558];
        *(_QWORD *)(v39 + 96) = MEMORY[0x24BEE44F0];
        *(_QWORD *)(v39 + 104) = v45;
        *(_DWORD *)(v39 + 72) = v44;
        *(_QWORD *)(v39 + 136) = MEMORY[0x24BEE0D00];
        *(_QWORD *)(v39 + 144) = lazy protocol witness table accessor for type String and conformance String();
        v46 = v70;
        *(_QWORD *)(v39 + 112) = v71;
        *(_QWORD *)(v39 + 120) = v46;
        os_signpost(_:dso:log:name:signpostID:_:_:)();
        swift_release();
        (*(void (**)(char *, uint64_t))(v69 + 8))(v17, v14);
        v47 = swift_bridgeObjectRelease();
        if (*(_QWORD *)(a4 + 32))
          goto LABEL_48;
        goto LABEL_49;
      }
    }
    __break(1u);
LABEL_65:
    swift_once();
LABEL_19:
    v24 = static Animation.velocityTracking;
    swift_retain();
LABEL_22:
    v7 = v8 - v7;
    v18 = *(double *)AGGraphGetValue();
    if (*(_QWORD *)(a4 + 32))
      break;
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for AnimatorState<Double>, MEMORY[0x24BEE13C8], (uint64_t)&protocol witness table for Double, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for AnimatorState);
    swift_allocObject();
    swift_retain();
    v53 = swift_retain();
    v54 = specialized AnimatorState.init(animation:interval:at:in:)(v53, v7, v18);
    swift_retain();
    v55 = static os_signpost_type_t.begin.getter();
    static os_signpost_type_t.event.getter();
    if ((kdebug_is_enabled() & 1) == 0)
      goto LABEL_59;
    v68 = v55;
    if (one-time initialization token for _signpostLog != -1)
      swift_once();
    v56 = (void *)_signpostLog;
    if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
    {
      v69 = v24;
      swift_retain();
      v57 = v56;
      OSSignpostID.init(log:object:)();
      type metadata accessor for _ContiguousArrayStorage<CVarArg>();
      v58 = swift_allocObject();
      *(_OWORD *)(v58 + 16) = xmmword_235283260;
      v59 = AGGraphGetCurrentAttribute();
      v67 = *MEMORY[0x24BE096C0];
      if (v59 == v67)
        goto LABEL_68;
      v60 = (id)AGGraphGetAttributeGraph();
      v66 = AGGraphGetCounter();

      v61 = MEMORY[0x24BEE1ED8];
      *(_QWORD *)(v58 + 56) = MEMORY[0x24BEE1E88];
      *(_QWORD *)(v58 + 64) = v61;
      *(_QWORD *)(v58 + 32) = v66;
      v62 = AGGraphGetCurrentAttribute();
      if (v62 == v67)
        goto LABEL_69;
      v63 = MEMORY[0x24BEE4558];
      *(_QWORD *)(v58 + 96) = MEMORY[0x24BEE44F0];
      *(_QWORD *)(v58 + 104) = v63;
      *(_DWORD *)(v58 + 72) = v62;
      *(_QWORD *)(v58 + 136) = MEMORY[0x24BEE0D00];
      *(_QWORD *)(v58 + 144) = lazy protocol witness table accessor for type String and conformance String();
      v64 = v70;
      *(_QWORD *)(v58 + 112) = v71;
      *(_QWORD *)(v58 + 120) = v64;
      os_signpost(_:dso:log:name:signpostID:_:_:)();
      swift_release();
      (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v14);
      swift_bridgeObjectRelease();
    }
    else
    {
LABEL_59:
      swift_release();
    }
    swift_release();
    *(_QWORD *)(a4 + 32) = v54;
    if (v54)
    {
LABEL_32:
      swift_retain();
      specialized AnimatorState.addListeners(transaction:)();
      swift_release();
      swift_release();
      goto LABEL_33;
    }
LABEL_61:
    __break(1u);
LABEL_33:
    swift_release();
    a7 = v70;
LABEL_34:
    *(double *)(a4 + 16) = v8;
    *(_BYTE *)(a4 + 24) = 0;
    v21 = *(_QWORD *)(a4 + 32);
    if (!v21)
      return;
  }
  swift_retain();
  v74 = 0;
  specialized AnimatorState.combine(newAnimation:newInterval:at:in:environment:)(v24, v7, v18);
  swift_retain();
  v27 = static os_signpost_type_t.event.getter();
  static os_signpost_type_t.event.getter();
  if ((kdebug_is_enabled() & 1) == 0)
    goto LABEL_30;
  v68 = v27;
  if (one-time initialization token for _signpostLog != -1)
    swift_once();
  v28 = (void *)_signpostLog;
  if ((OS_os_log.signpostsEnabled.getter() & 1) == 0)
  {
LABEL_30:
    swift_release_n();
    goto LABEL_31;
  }
  v69 = v24;
  swift_retain();
  v29 = v28;
  OSSignpostID.init(log:object:)();
  type metadata accessor for _ContiguousArrayStorage<CVarArg>();
  v30 = swift_allocObject();
  *(_OWORD *)(v30 + 16) = xmmword_235283260;
  v31 = AGGraphGetCurrentAttribute();
  v67 = *MEMORY[0x24BE096C0];
  if (v31 != v67)
  {
    v32 = (id)AGGraphGetAttributeGraph();
    v66 = AGGraphGetCounter();

    v33 = MEMORY[0x24BEE1ED8];
    *(_QWORD *)(v30 + 56) = MEMORY[0x24BEE1E88];
    *(_QWORD *)(v30 + 64) = v33;
    *(_QWORD *)(v30 + 32) = v66;
    v34 = AGGraphGetCurrentAttribute();
    if (v34 == v67)
      goto LABEL_67;
    v35 = MEMORY[0x24BEE4558];
    *(_QWORD *)(v30 + 96) = MEMORY[0x24BEE44F0];
    *(_QWORD *)(v30 + 104) = v35;
    *(_DWORD *)(v30 + 72) = v34;
    *(_QWORD *)(v30 + 136) = MEMORY[0x24BEE0D00];
    *(_QWORD *)(v30 + 144) = lazy protocol witness table accessor for type String and conformance String();
    v36 = v70;
    *(_QWORD *)(v30 + 112) = v71;
    *(_QWORD *)(v30 + 120) = v36;
    os_signpost(_:dso:log:name:signpostID:_:_:)();
    swift_release_n();
    (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v14);
    swift_bridgeObjectRelease();
LABEL_31:
    if (*(_QWORD *)(a4 + 32))
      goto LABEL_32;
    goto LABEL_61;
  }
  __break(1u);
LABEL_67:
  __break(1u);
LABEL_68:
  __break(1u);
LABEL_69:
  __break(1u);
}

{
  double v7;
  double v8;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  double v18;
  double *Value;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  int v27;
  void *v28;
  id v29;
  uint64_t v30;
  int v31;
  id v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  id v38;
  uint64_t v39;
  int CurrentAttribute;
  id v41;
  uint64_t Counter;
  uint64_t v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  double v48;
  uint64_t v49;
  unsigned __int8 v50;
  void (*v51)(uint64_t *, unint64_t, double);
  void *v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  void *v56;
  id v57;
  uint64_t v58;
  int v59;
  id v60;
  uint64_t v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unsigned __int8 v72;
  uint64_t v73;
  char v74;
  double v75;

  v71 = a6;
  v14 = type metadata accessor for OSSignpostID();
  v15 = *(_QWORD *)(v14 - 8);
  MEMORY[0x24BDAC7A8](v14);
  v17 = (char *)&v65 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for infinity != -1)
    swift_once();
  v18 = -*(double *)&static Time.infinity;
  if (*(_QWORD *)(a4 + 32))
  {
    Value = (double *)AGGraphGetValue();
    if ((v20 & 1) != 0)
      v18 = *Value;
  }
  if (*(_DWORD *)(a4 + 40) != *(_DWORD *)AGGraphGetValue() >> 1)
  {
    a5();
    *(_BYTE *)(a1 + 8) = 1;
LABEL_11:
    v8 = *(double *)a1 * 128.0;
    if ((*(_BYTE *)(a4 + 24) & 1) != 0)
      goto LABEL_34;
    v7 = *(double *)(a4 + 16);
    if (v8 == v7)
      goto LABEL_34;
    v70 = a7;
    AGGraphClearUpdate();
    AGGraphGetValue();
    swift_retain();
    AGGraphSetUpdate();
    v22 = swift_retain();
    v23 = specialized find<A>(_:key:)(v22);
    if (v23)
    {
      v24 = *(_QWORD *)(v23 + 72);
      swift_retain();
      swift_release();
      if (v24)
        goto LABEL_22;
    }
    else
    {
      swift_release();
    }
    v25 = swift_retain();
    v26 = specialized closure #1 in PropertyList.subscript.getter(v25);
    swift_release();
    if ((v26 & 1) == 0)
    {
      if (!a2)
        goto LABEL_33;
      swift_retain();
      v24 = a2;
      goto LABEL_22;
    }
    if (one-time initialization token for velocityTracking != -1)
      goto LABEL_65;
    goto LABEL_19;
  }
  if (*(_BYTE *)(a1 + 8) == 1)
    goto LABEL_11;
  v21 = *(_QWORD *)(a4 + 32);
  if (!v21)
    return;
  while (1)
  {
    v75 = *(double *)a1 * 128.0;
    swift_retain();
    v74 = 0;
    if ((specialized AnimatorState.update(_:at:environment:)(&v75, v18) & 1) == 0)
    {
      if (one-time initialization token for shared != -1)
        swift_once();
      swift_beginAccess();
      v48 = *(double *)(v21 + 48);
      v73 = *(_QWORD *)(v21 + 56);
      v49 = *(unsigned int *)(v21 + 72);
      v50 = *(_BYTE *)(v21 + 76);
      v51 = *(void (**)(uint64_t *, unint64_t, double))((*MEMORY[0x24BEE4EA0] & *(_QWORD *)static CoreGlue.shared)
                                                                       + 0x58);
      v52 = static CoreGlue.shared;
      v72 = v50;
      v51(&v73, v49 | ((unint64_t)v50 << 32), v48);
      swift_release();

      goto LABEL_50;
    }
    swift_retain();
    static os_signpost_type_t.end.getter();
    static os_signpost_type_t.event.getter();
    if ((kdebug_is_enabled() & 1) == 0)
      goto LABEL_47;
    if (one-time initialization token for _signpostLog != -1)
      swift_once();
    v37 = (void *)_signpostLog;
    if ((OS_os_log.signpostsEnabled.getter() & 1) == 0)
    {
LABEL_47:
      v47 = swift_release();
      if (*(_QWORD *)(a4 + 32))
      {
LABEL_48:
        specialized AnimatorState.removeListeners()(v47);
        swift_release();
      }
LABEL_49:
      swift_release();
      *(_QWORD *)(a4 + 32) = 0;
LABEL_50:
      *(double *)a1 = v75 * 0.0078125;
      *(_BYTE *)(a1 + 8) = 1;
      return;
    }
    v69 = v15;
    v70 = a7;
    swift_retain();
    v38 = v37;
    OSSignpostID.init(log:object:)();
    type metadata accessor for _ContiguousArrayStorage<CVarArg>();
    v39 = swift_allocObject();
    *(_OWORD *)(v39 + 16) = xmmword_235283260;
    CurrentAttribute = AGGraphGetCurrentAttribute();
    v15 = *MEMORY[0x24BE096C0];
    if (CurrentAttribute == (_DWORD)v15)
    {
      __break(1u);
    }
    else
    {
      v41 = (id)AGGraphGetAttributeGraph();
      Counter = AGGraphGetCounter();

      v43 = MEMORY[0x24BEE1ED8];
      *(_QWORD *)(v39 + 56) = MEMORY[0x24BEE1E88];
      *(_QWORD *)(v39 + 64) = v43;
      *(_QWORD *)(v39 + 32) = Counter;
      v44 = AGGraphGetCurrentAttribute();
      if (v44 != (_DWORD)v15)
      {
        v45 = MEMORY[0x24BEE4558];
        *(_QWORD *)(v39 + 96) = MEMORY[0x24BEE44F0];
        *(_QWORD *)(v39 + 104) = v45;
        *(_DWORD *)(v39 + 72) = v44;
        *(_QWORD *)(v39 + 136) = MEMORY[0x24BEE0D00];
        *(_QWORD *)(v39 + 144) = lazy protocol witness table accessor for type String and conformance String();
        v46 = v70;
        *(_QWORD *)(v39 + 112) = v71;
        *(_QWORD *)(v39 + 120) = v46;
        os_signpost(_:dso:log:name:signpostID:_:_:)();
        swift_release();
        (*(void (**)(char *, uint64_t))(v69 + 8))(v17, v14);
        v47 = swift_bridgeObjectRelease();
        if (*(_QWORD *)(a4 + 32))
          goto LABEL_48;
        goto LABEL_49;
      }
    }
    __break(1u);
LABEL_65:
    swift_once();
LABEL_19:
    v24 = static Animation.velocityTracking;
    swift_retain();
LABEL_22:
    v7 = v8 - v7;
    v18 = *(double *)AGGraphGetValue();
    if (*(_QWORD *)(a4 + 32))
      break;
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for AnimatorState<Double>, MEMORY[0x24BEE13C8], (uint64_t)&protocol witness table for Double, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for AnimatorState);
    swift_allocObject();
    swift_retain();
    v53 = swift_retain();
    v54 = specialized AnimatorState.init(animation:interval:at:in:)(v53, v7, v18);
    swift_retain();
    v55 = static os_signpost_type_t.begin.getter();
    static os_signpost_type_t.event.getter();
    if ((kdebug_is_enabled() & 1) == 0)
      goto LABEL_59;
    v68 = v55;
    if (one-time initialization token for _signpostLog != -1)
      swift_once();
    v56 = (void *)_signpostLog;
    if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
    {
      v69 = v24;
      swift_retain();
      v57 = v56;
      OSSignpostID.init(log:object:)();
      type metadata accessor for _ContiguousArrayStorage<CVarArg>();
      v58 = swift_allocObject();
      *(_OWORD *)(v58 + 16) = xmmword_235283260;
      v59 = AGGraphGetCurrentAttribute();
      v67 = *MEMORY[0x24BE096C0];
      if (v59 == v67)
        goto LABEL_68;
      v60 = (id)AGGraphGetAttributeGraph();
      v66 = AGGraphGetCounter();

      v61 = MEMORY[0x24BEE1ED8];
      *(_QWORD *)(v58 + 56) = MEMORY[0x24BEE1E88];
      *(_QWORD *)(v58 + 64) = v61;
      *(_QWORD *)(v58 + 32) = v66;
      v62 = AGGraphGetCurrentAttribute();
      if (v62 == v67)
        goto LABEL_69;
      v63 = MEMORY[0x24BEE4558];
      *(_QWORD *)(v58 + 96) = MEMORY[0x24BEE44F0];
      *(_QWORD *)(v58 + 104) = v63;
      *(_DWORD *)(v58 + 72) = v62;
      *(_QWORD *)(v58 + 136) = MEMORY[0x24BEE0D00];
      *(_QWORD *)(v58 + 144) = lazy protocol witness table accessor for type String and conformance String();
      v64 = v70;
      *(_QWORD *)(v58 + 112) = v71;
      *(_QWORD *)(v58 + 120) = v64;
      os_signpost(_:dso:log:name:signpostID:_:_:)();
      swift_release();
      (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v14);
      swift_bridgeObjectRelease();
    }
    else
    {
LABEL_59:
      swift_release();
    }
    swift_release();
    *(_QWORD *)(a4 + 32) = v54;
    if (v54)
    {
LABEL_32:
      swift_retain();
      specialized AnimatorState.addListeners(transaction:)();
      swift_release();
      swift_release();
      goto LABEL_33;
    }
LABEL_61:
    __break(1u);
LABEL_33:
    swift_release();
    a7 = v70;
LABEL_34:
    *(double *)(a4 + 16) = v8;
    *(_BYTE *)(a4 + 24) = 0;
    v21 = *(_QWORD *)(a4 + 32);
    if (!v21)
      return;
  }
  swift_retain();
  v74 = 0;
  specialized AnimatorState.combine(newAnimation:newInterval:at:in:environment:)(v24, v7, v18);
  swift_retain();
  v27 = static os_signpost_type_t.event.getter();
  static os_signpost_type_t.event.getter();
  if ((kdebug_is_enabled() & 1) == 0)
    goto LABEL_30;
  v68 = v27;
  if (one-time initialization token for _signpostLog != -1)
    swift_once();
  v28 = (void *)_signpostLog;
  if ((OS_os_log.signpostsEnabled.getter() & 1) == 0)
  {
LABEL_30:
    swift_release_n();
    goto LABEL_31;
  }
  v69 = v24;
  swift_retain();
  v29 = v28;
  OSSignpostID.init(log:object:)();
  type metadata accessor for _ContiguousArrayStorage<CVarArg>();
  v30 = swift_allocObject();
  *(_OWORD *)(v30 + 16) = xmmword_235283260;
  v31 = AGGraphGetCurrentAttribute();
  v67 = *MEMORY[0x24BE096C0];
  if (v31 != v67)
  {
    v32 = (id)AGGraphGetAttributeGraph();
    v66 = AGGraphGetCounter();

    v33 = MEMORY[0x24BEE1ED8];
    *(_QWORD *)(v30 + 56) = MEMORY[0x24BEE1E88];
    *(_QWORD *)(v30 + 64) = v33;
    *(_QWORD *)(v30 + 32) = v66;
    v34 = AGGraphGetCurrentAttribute();
    if (v34 == v67)
      goto LABEL_67;
    v35 = MEMORY[0x24BEE4558];
    *(_QWORD *)(v30 + 96) = MEMORY[0x24BEE44F0];
    *(_QWORD *)(v30 + 104) = v35;
    *(_DWORD *)(v30 + 72) = v34;
    *(_QWORD *)(v30 + 136) = MEMORY[0x24BEE0D00];
    *(_QWORD *)(v30 + 144) = lazy protocol witness table accessor for type String and conformance String();
    v36 = v70;
    *(_QWORD *)(v30 + 112) = v71;
    *(_QWORD *)(v30 + 120) = v36;
    os_signpost(_:dso:log:name:signpostID:_:_:)();
    swift_release_n();
    (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v14);
    swift_bridgeObjectRelease();
LABEL_31:
    if (*(_QWORD *)(a4 + 32))
      goto LABEL_32;
    goto LABEL_61;
  }
  __break(1u);
LABEL_67:
  __break(1u);
LABEL_68:
  __break(1u);
LABEL_69:
  __break(1u);
}

uint64_t specialized AnimatableAttributeHelper.update(value:defaultAnimation:environment:sampleCollector:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  uint64_t v13;
  void (**v14)(char *, _QWORD);
  uint64_t v15;
  char *v16;
  double v17;
  double *Value;
  char v19;
  uint64_t result;
  uint64_t v21;
  double v22;
  float64x2_t v23;
  float64x2_t v24;
  float64x2_t v25;
  float64x2_t v26;
  double v27;
  double v28;
  double v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  double v35;
  double v36;
  int v37;
  void *v38;
  char v39;
  id v40;
  uint64_t v41;
  id v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  void *v47;
  char v48;
  id v49;
  uint64_t v50;
  id v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  float64x2_t v55;
  double v56;
  float64x2_t v57;
  void *v58;
  id v59;
  uint64_t v60;
  int CurrentAttribute;
  uint64_t Counter;
  uint64_t v63;
  int v64;
  uint64_t v65;
  double v66;
  uint64_t v67;
  unsigned __int8 v68;
  void (*v69)(uint64_t *, unint64_t, double);
  void *v70;
  uint64_t v71;
  double v72;
  float64x2_t v73;
  float64x2_t v74;
  uint64_t v75;
  uint64_t v76;
  int v77;
  int v78;
  double v79;
  double v80;
  double v81;
  void (**v82)(char *, _QWORD);
  double v83;
  float64x2_t v84;
  float64x2_t v85;
  float64x2_t v86;
  unsigned __int8 v87;
  uint64_t v88;
  char v89;
  float64x2_t v90;
  float64x2_t v91;
  float64x2_t v92;
  uint64_t v93;
  double v94;
  __int128 v95;
  double v96;
  double v97;
  double v98;
  double v99;
  double v100;
  double v101;
  _OWORD v102[3];
  double v103;
  double v104;
  double v105[10];

  v13 = type metadata accessor for OSSignpostID();
  v14 = *(void (***)(char *, _QWORD))(v13 - 8);
  MEMORY[0x24BDAC7A8](v13);
  v16 = (char *)&v75 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for infinity == -1)
    goto LABEL_2;
LABEL_65:
  swift_once();
LABEL_2:
  v17 = -*(double *)&static Time.infinity;
  if (*(_QWORD *)(a4 + 88))
  {
    Value = (double *)AGGraphGetValue();
    if ((v19 & 1) != 0)
      v17 = *Value;
  }
  result = AGGraphGetValue();
  if (*(_DWORD *)(a4 + 96) == *(_DWORD *)result >> 1)
  {
    if (*(_BYTE *)(a1 + 64) != 1)
    {
      v21 = *(_QWORD *)(a4 + 88);
      if (v21)
        goto LABEL_44;
      return result;
    }
  }
  else
  {
    result = (uint64_t)specialized AnimatableAttributeHelper.reset()();
    *(_BYTE *)(a1 + 64) = 1;
  }
  v22 = *(double *)(a1 + 48);
  v23 = (float64x2_t)vdupq_n_s64(0x4060000000000000uLL);
  v24 = vmulq_f64(*(float64x2_t *)a1, v23);
  v25 = vmulq_f64(*(float64x2_t *)(a1 + 16), v23);
  v26 = vmulq_f64(*(float64x2_t *)(a1 + 32), v23);
  v27 = *(double *)(a1 + 56) * 128.0;
  v102[0] = v24;
  v102[1] = v25;
  v102[2] = v26;
  v103 = v22;
  v104 = v27;
  if ((*(_BYTE *)(a4 + 80) & 1) == 0)
  {
    v83 = v27;
    v84 = v26;
    v85 = v24;
    v86 = v25;
    v29 = *(double *)(a4 + 64);
    v28 = *(double *)(a4 + 72);
    v8 = *(double *)(a4 + 48);
    v7 = *(double *)(a4 + 56);
    v5 = *(double *)(a4 + 32);
    v9 = *(double *)(a4 + 40);
    v4 = *(double *)(a4 + 16);
    v6 = *(double *)(a4 + 24);
    v105[0] = v4;
    v105[1] = v6;
    v105[2] = v5;
    v105[3] = v9;
    v105[4] = v8;
    v105[5] = v7;
    v79 = v29;
    v80 = v28;
    v105[6] = v29;
    v105[7] = v28;
    result = specialized static AnimatablePair.== infix(_:_:)((double *)v102, v105);
    if ((result & 1) == 0)
    {
      v81 = v22;
      v82 = v14;
      AGGraphClearUpdate();
      v14 = *(void (***)(char *, _QWORD))AGGraphGetValue();
      swift_retain();
      AGGraphSetUpdate();
      v30 = swift_retain();
      v31 = specialized find<A>(_:key:)(v30);
      if (v31)
      {
        v32 = *(uint64_t *)(v31 + 72);
        swift_retain();
        swift_release();
        if (*(double *)&v32 != 0.0)
          goto LABEL_21;
      }
      else
      {
        swift_release();
      }
      v33 = swift_retain();
      v34 = specialized closure #1 in PropertyList.subscript.getter(v33);
      swift_release();
      if ((v34 & 1) != 0)
      {
        if (one-time initialization token for velocityTracking != -1)
          goto LABEL_68;
        goto LABEL_18;
      }
      if (*(double *)&a2 != 0.0)
      {
        swift_retain();
        v32 = a2;
        goto LABEL_21;
      }
      v22 = v81;
      goto LABEL_41;
    }
    goto LABEL_42;
  }
  while (1)
  {
    *(float64x2_t *)(a4 + 16) = v24;
    *(float64x2_t *)(a4 + 32) = v25;
    *(float64x2_t *)(a4 + 48) = v26;
    *(double *)(a4 + 64) = v22;
    *(double *)(a4 + 72) = v27;
    *(_BYTE *)(a4 + 80) = 0;
    v21 = *(_QWORD *)(a4 + 88);
    if (!v21)
      return result;
LABEL_44:
    v54 = *(_QWORD *)(a1 + 48);
    v55 = (float64x2_t)vdupq_n_s64(0x4060000000000000uLL);
    v56 = *(double *)(a1 + 56) * 128.0;
    v57 = vmulq_f64(*(float64x2_t *)(a1 + 16), v55);
    v90 = vmulq_f64(*(float64x2_t *)a1, v55);
    v91 = v57;
    v92 = vmulq_f64(*(float64x2_t *)(a1 + 32), v55);
    v93 = v54;
    v94 = v56;
    swift_retain();
    v89 = 0;
    if ((specialized AnimatorState.update(_:at:environment:)(&v90, v17) & 1) == 0)
      break;
    swift_retain_n();
    static os_signpost_type_t.end.getter();
    static os_signpost_type_t.event.getter();
    if ((kdebug_is_enabled() & 1) == 0)
      goto LABEL_56;
    if (one-time initialization token for _signpostLog != -1)
      swift_once();
    v58 = (void *)_signpostLog;
    if ((OS_os_log.signpostsEnabled.getter() & 1) == 0)
    {
LABEL_56:
      swift_release_n();
      if (!*(_QWORD *)(a4 + 88))
      {
LABEL_58:
        *(_QWORD *)(a4 + 88) = 0;
        goto LABEL_59;
      }
LABEL_57:
      specialized AnimatorState.removeListeners()();
      swift_release();
      goto LABEL_58;
    }
    v82 = v14;
    *(_QWORD *)&v86.f64[0] = v13;
    swift_retain();
    v59 = v58;
    OSSignpostID.init(log:object:)();
    type metadata accessor for _ContiguousArrayStorage<CVarArg>();
    v60 = swift_allocObject();
    *(_OWORD *)(v60 + 16) = xmmword_235283260;
    CurrentAttribute = AGGraphGetCurrentAttribute();
    v13 = *MEMORY[0x24BE096C0];
    if (CurrentAttribute == (_DWORD)v13)
    {
      __break(1u);
    }
    else
    {
      v14 = (void (**)(char *, _QWORD))(id)AGGraphGetAttributeGraph();
      Counter = AGGraphGetCounter();

      v63 = MEMORY[0x24BEE1ED8];
      *(_QWORD *)(v60 + 56) = MEMORY[0x24BEE1E88];
      *(_QWORD *)(v60 + 64) = v63;
      *(_QWORD *)(v60 + 32) = Counter;
      v64 = AGGraphGetCurrentAttribute();
      if (v64 != (_DWORD)v13)
      {
        v65 = MEMORY[0x24BEE4558];
        *(_QWORD *)(v60 + 96) = MEMORY[0x24BEE44F0];
        *(_QWORD *)(v60 + 104) = v65;
        *(_DWORD *)(v60 + 72) = v64;
        *(_QWORD *)(v60 + 136) = MEMORY[0x24BEE0D00];
        *(_QWORD *)(v60 + 144) = lazy protocol witness table accessor for type String and conformance String();
        *(_QWORD *)(v60 + 112) = 0xD000000000000011;
        *(_QWORD *)(v60 + 120) = 0x80000002352E5EB0;
        os_signpost(_:dso:log:name:signpostID:_:_:)();
        swift_release_n();
        v82[1](v16, *(_QWORD *)&v86.f64[0]);
        swift_bridgeObjectRelease();
        if (!*(_QWORD *)(a4 + 88))
          goto LABEL_58;
        goto LABEL_57;
      }
    }
    __break(1u);
LABEL_68:
    swift_once();
LABEL_18:
    v32 = static Animation.velocityTracking;
    swift_retain();
LABEL_21:
    v35 = v85.f64[0] - v4;
    v6 = v85.f64[1] - v6;
    v36 = v86.f64[0] - v5;
    v9 = v86.f64[1] - v9;
    v8 = v84.f64[0] - v8;
    v7 = v84.f64[1] - v7;
    v4 = v81 - v79;
    v5 = v83 - v80;
    v80 = *(double *)AGGraphGetValue();
    if (*(_QWORD *)(a4 + 88))
    {
      *(double *)&v95 = v35;
      *((double *)&v95 + 1) = v6;
      v96 = v36;
      v97 = v9;
      v98 = v8;
      v99 = v7;
      v100 = v4;
      v101 = v5;
      swift_retain();
      LOBYTE(v90.f64[0]) = 0;
      v17 = v80;
      specialized AnimatorState.combine(newAnimation:newInterval:at:in:environment:)(v32, (double *)&v95, v80);
      swift_retain_n();
      v37 = static os_signpost_type_t.event.getter();
      static os_signpost_type_t.event.getter();
      if ((kdebug_is_enabled() & 1) != 0)
      {
        v78 = v37;
        if (one-time initialization token for _signpostLog != -1)
          swift_once();
        v38 = (void *)_signpostLog;
        v39 = OS_os_log.signpostsEnabled.getter();
        v22 = v81;
        if ((v39 & 1) != 0)
        {
          v79 = *(double *)&v32;
          swift_retain();
          v40 = v38;
          OSSignpostID.init(log:object:)();
          type metadata accessor for _ContiguousArrayStorage<CVarArg>();
          v41 = swift_allocObject();
          *(_OWORD *)(v41 + 16) = xmmword_235283260;
          result = AGGraphGetCurrentAttribute();
          v77 = *MEMORY[0x24BE096C0];
          if ((_DWORD)result == v77)
          {
            __break(1u);
LABEL_70:
            __break(1u);
LABEL_71:
            __break(1u);
LABEL_72:
            __break(1u);
            return result;
          }
          v42 = (id)AGGraphGetAttributeGraph();
          v76 = AGGraphGetCounter();

          v43 = MEMORY[0x24BEE1ED8];
          *(_QWORD *)(v41 + 56) = MEMORY[0x24BEE1E88];
          *(_QWORD *)(v41 + 64) = v43;
          *(_QWORD *)(v41 + 32) = v76;
          result = AGGraphGetCurrentAttribute();
          if ((_DWORD)result == v77)
            goto LABEL_70;
          v44 = MEMORY[0x24BEE4558];
          *(_QWORD *)(v41 + 96) = MEMORY[0x24BEE44F0];
          *(_QWORD *)(v41 + 104) = v44;
          *(_DWORD *)(v41 + 72) = result;
          *(_QWORD *)(v41 + 136) = MEMORY[0x24BEE0D00];
          *(_QWORD *)(v41 + 144) = lazy protocol witness table accessor for type String and conformance String();
          *(_QWORD *)(v41 + 112) = 0xD000000000000011;
          *(_QWORD *)(v41 + 120) = 0x80000002352E5EB0;
          os_signpost(_:dso:log:name:signpostID:_:_:)();
          swift_release_n();
          v82[1](v16, v13);
          swift_bridgeObjectRelease();
        }
        else
        {
          swift_release_n();
        }
      }
      else
      {
        swift_release_n();
        v22 = v81;
      }
      a2 = *(uint64_t *)(a4 + 88);
      if (*(double *)&a2 == 0.0)
      {
LABEL_64:
        __break(1u);
        goto LABEL_65;
      }
    }
    else
    {
      *(double *)&v95 = v35;
      *((double *)&v95 + 1) = v6;
      v96 = v36;
      v97 = v9;
      v98 = v8;
      v99 = v7;
      v100 = v4;
      v101 = v5;
      type metadata accessor for CombinedAnimationState<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>>.Entry(0, &lazy cache variable for type metadata for AnimatorState<AnimatablePair<Double, AnimatablePair<CGFloat, AnimatablePair<CGFloat, AnimatablePair<CGFloat, AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>>>>>>, (uint64_t (*)(uint64_t))type metadata accessor for AnimatablePair<Double, AnimatablePair<CGFloat, AnimatablePair<CGFloat, AnimatablePair<CGFloat, AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>>>>>, lazy protocol witness table accessor for type AnimatablePair<Double, AnimatablePair<CGFloat, AnimatablePair<CGFloat, AnimatablePair<CGFloat, AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>>>>> and conformance AnimatablePair<A, B>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatorState);
      swift_allocObject();
      swift_retain();
      v45 = swift_retain();
      v17 = v80;
      *(double *)&a2 = COERCE_DOUBLE(specialized AnimatorState.init(animation:interval:at:in:)(v45, &v95, v80));
      swift_retain();
      v46 = static os_signpost_type_t.begin.getter();
      static os_signpost_type_t.event.getter();
      if ((kdebug_is_enabled() & 1) != 0)
      {
        v78 = v46;
        if (one-time initialization token for _signpostLog != -1)
          swift_once();
        v47 = (void *)_signpostLog;
        v48 = OS_os_log.signpostsEnabled.getter();
        v22 = v81;
        if ((v48 & 1) != 0)
        {
          v79 = *(double *)&v32;
          swift_retain();
          v49 = v47;
          OSSignpostID.init(log:object:)();
          type metadata accessor for _ContiguousArrayStorage<CVarArg>();
          v50 = swift_allocObject();
          *(_OWORD *)(v50 + 16) = xmmword_235283260;
          result = AGGraphGetCurrentAttribute();
          v77 = *MEMORY[0x24BE096C0];
          if ((_DWORD)result == v77)
            goto LABEL_71;
          v51 = (id)AGGraphGetAttributeGraph();
          v76 = AGGraphGetCounter();

          v52 = MEMORY[0x24BEE1ED8];
          *(_QWORD *)(v50 + 56) = MEMORY[0x24BEE1E88];
          *(_QWORD *)(v50 + 64) = v52;
          *(_QWORD *)(v50 + 32) = v76;
          result = AGGraphGetCurrentAttribute();
          if ((_DWORD)result == v77)
            goto LABEL_72;
          v53 = MEMORY[0x24BEE4558];
          *(_QWORD *)(v50 + 96) = MEMORY[0x24BEE44F0];
          *(_QWORD *)(v50 + 104) = v53;
          *(_DWORD *)(v50 + 72) = result;
          *(_QWORD *)(v50 + 136) = MEMORY[0x24BEE0D00];
          *(_QWORD *)(v50 + 144) = lazy protocol witness table accessor for type String and conformance String();
          *(_QWORD *)(v50 + 112) = 0xD000000000000011;
          *(_QWORD *)(v50 + 120) = 0x80000002352E5EB0;
          os_signpost(_:dso:log:name:signpostID:_:_:)();
          swift_release();
          v82[1](v16, v13);
          swift_bridgeObjectRelease();
        }
        else
        {
          swift_release();
        }
      }
      else
      {
        swift_release();
        v22 = v81;
      }
      swift_release();
      *(double *)(a4 + 88) = *(double *)&a2;
      if (*(double *)&a2 == 0.0)
        goto LABEL_64;
    }
    swift_retain();
    specialized AnimatorState.addListeners(transaction:)();
    swift_release();
    swift_release();
LABEL_41:
    result = swift_release();
    v14 = v82;
LABEL_42:
    v24 = v85;
    v25 = v86;
    v26 = v84;
    v27 = v83;
  }
  if (one-time initialization token for shared != -1)
    swift_once();
  swift_beginAccess();
  v66 = *(double *)(v21 + 104);
  v88 = *(_QWORD *)(v21 + 112);
  v67 = *(unsigned int *)(v21 + 184);
  v68 = *(_BYTE *)(v21 + 188);
  v69 = *(void (**)(uint64_t *, unint64_t, double))((*MEMORY[0x24BEE4EA0] & *(_QWORD *)static CoreGlue.shared)
                                                                   + 0x58);
  v70 = static CoreGlue.shared;
  v87 = v68;
  v69(&v88, v67 | ((unint64_t)v68 << 32), v66);

LABEL_59:
  result = swift_release();
  v71 = v93;
  v72 = v94;
  v73 = (float64x2_t)vdupq_n_s64(0x3F80000000000000uLL);
  v74 = vmulq_f64(v91, v73);
  *(float64x2_t *)a1 = vmulq_f64(v90, v73);
  *(float64x2_t *)(a1 + 16) = v74;
  *(float64x2_t *)(a1 + 32) = vmulq_f64(v92, v73);
  *(_QWORD *)(a1 + 48) = v71;
  *(double *)(a1 + 56) = v72 * 0.0078125;
  *(_BYTE *)(a1 + 64) = 1;
  return result;
}

_DWORD *specialized AnimatableAttributeHelper.update(value:defaultAnimation:environment:sampleCollector:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  double v20;
  double *Value;
  char v22;
  _DWORD *result;
  uint64_t v24;
  double v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  int v31;
  void *v32;
  id v33;
  uint64_t v34;
  id v35;
  uint64_t v36;
  uint64_t v37;
  __int128 v38;
  void *v39;
  id v40;
  uint64_t v41;
  int CurrentAttribute;
  int v43;
  id v44;
  uint64_t Counter;
  uint64_t v46;
  int v47;
  uint64_t v48;
  double v49;
  uint64_t v50;
  unsigned __int8 v51;
  void (*v52)(double *, unint64_t, double);
  void *v53;
  float64_t v54;
  float64_t v55;
  double v56;
  double v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  void *v61;
  id v62;
  uint64_t v63;
  id v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  int v69;
  uint64_t v70;
  uint64_t v71;
  double v72;
  unsigned __int8 v73;
  double v74;
  char v75;
  float64x2_t v76;
  double v77[4];

  v16 = type metadata accessor for OSSignpostID();
  v17 = *(_QWORD *)(v16 - 8);
  MEMORY[0x24BDAC7A8](v16);
  v19 = (char *)&v67 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for infinity != -1)
    swift_once();
  v20 = -*(double *)&static Time.infinity;
  if (*(_QWORD *)(a4 + 56))
  {
    Value = (double *)AGGraphGetValue();
    if ((v22 & 1) != 0)
      v20 = *Value;
  }
  result = (_DWORD *)AGGraphGetValue();
  if (*(_DWORD *)(a4 + 64) != *result >> 1)
  {
    result = (_DWORD *)specialized AnimatableAttributeHelper.reset()();
    *(_BYTE *)(a1 + 48) = 1;
LABEL_11:
    v9 = *(double *)a1;
    v10 = *(double *)(a1 + 8);
    v11 = *(double *)(a1 + 16);
    v25 = *(double *)(a1 + 24);
    if ((*(_BYTE *)(a4 + 48) & 1) != 0)
      goto LABEL_37;
    v5 = *(double *)(a4 + 32);
    v6 = *(double *)(a4 + 40);
    v8 = *(double *)(a4 + 16);
    v7 = *(double *)(a4 + 24);
    if (v9 == v8 && v10 == v7 && v11 == v5 && v25 == v6)
      goto LABEL_37;
    v72 = *(double *)(a1 + 24);
    v70 = a5;
    AGGraphClearUpdate();
    AGGraphGetValue();
    swift_retain();
    AGGraphSetUpdate();
    v26 = swift_retain();
    v27 = specialized find<A>(_:key:)(v26);
    if (v27)
    {
      v28 = *(_QWORD *)(v27 + 72);
      swift_retain();
      swift_release();
      if (v28)
        goto LABEL_25;
    }
    else
    {
      swift_release();
    }
    v29 = swift_retain();
    v30 = specialized closure #1 in PropertyList.subscript.getter(v29);
    swift_release();
    if ((v30 & 1) == 0)
    {
      if (!a2)
        goto LABEL_36;
      swift_retain();
      v28 = a2;
      goto LABEL_25;
    }
    if (one-time initialization token for velocityTracking != -1)
      goto LABEL_68;
    goto LABEL_22;
  }
  if (*(_BYTE *)(a1 + 48) == 1)
    goto LABEL_11;
  v24 = *(_QWORD *)(a4 + 56);
  if (!v24)
    return result;
  while (1)
  {
    v38 = *(_OWORD *)(a1 + 16);
    v76 = *(float64x2_t *)a1;
    *(_OWORD *)v77 = v38;
    swift_retain();
    v75 = 0;
    if ((specialized AnimatorState.update(_:at:environment:)(&v76, v20) & 1) == 0)
    {
      if (one-time initialization token for shared != -1)
        swift_once();
      swift_beginAccess();
      v49 = *(double *)(v24 + 72);
      v74 = *(double *)(v24 + 80);
      v50 = *(unsigned int *)(v24 + 120);
      v51 = *(_BYTE *)(v24 + 124);
      v52 = *(void (**)(double *, unint64_t, double))((*MEMORY[0x24BEE4EA0] & *(_QWORD *)static CoreGlue.shared)
                                                                      + 0x58);
      v53 = static CoreGlue.shared;
      v73 = v51;
      v52(&v74, v50 | ((unint64_t)v51 << 32), v49);

      v55 = v76.f64[1];
      v54 = v76.f64[0];
      v57 = v77[1];
      v56 = v77[0];
      v74 = v20;
      FrameVelocityFilter.addSample(_:time:)(&v74, v76.f64[0], v76.f64[1], v77[0], v77[1]);
      result = (_DWORD *)swift_release();
      goto LABEL_53;
    }
    v71 = v17;
    swift_retain();
    v17 = static os_signpost_type_t.end.getter();
    static os_signpost_type_t.event.getter();
    if ((kdebug_is_enabled() & 1) == 0)
      goto LABEL_50;
    if (one-time initialization token for _signpostLog != -1)
      swift_once();
    v39 = (void *)_signpostLog;
    if ((OS_os_log.signpostsEnabled.getter() & 1) == 0)
    {
LABEL_50:
      swift_release();
      if (*(_QWORD *)(a4 + 56))
      {
LABEL_51:
        specialized AnimatorState.removeListeners()();
        swift_release();
      }
LABEL_52:
      result = (_DWORD *)swift_release();
      *(_QWORD *)(a4 + 56) = 0;
      v55 = v76.f64[1];
      v54 = v76.f64[0];
      v57 = v77[1];
      v56 = v77[0];
LABEL_53:
      *(float64_t *)a1 = v54;
      *(float64_t *)(a1 + 8) = v55;
      *(double *)(a1 + 16) = v56;
      *(double *)(a1 + 24) = v57;
      *(_BYTE *)(a1 + 48) = 1;
      return result;
    }
    swift_retain();
    v40 = v39;
    OSSignpostID.init(log:object:)();
    type metadata accessor for _ContiguousArrayStorage<CVarArg>();
    v41 = swift_allocObject();
    *(_OWORD *)(v41 + 16) = xmmword_235283260;
    CurrentAttribute = AGGraphGetCurrentAttribute();
    v43 = *MEMORY[0x24BE096C0];
    if (CurrentAttribute == *MEMORY[0x24BE096C0])
    {
      __break(1u);
    }
    else
    {
      v44 = (id)AGGraphGetAttributeGraph();
      Counter = AGGraphGetCounter();

      v46 = MEMORY[0x24BEE1ED8];
      *(_QWORD *)(v41 + 56) = MEMORY[0x24BEE1E88];
      *(_QWORD *)(v41 + 64) = v46;
      *(_QWORD *)(v41 + 32) = Counter;
      v47 = AGGraphGetCurrentAttribute();
      if (v47 != v43)
      {
        v48 = MEMORY[0x24BEE4558];
        *(_QWORD *)(v41 + 96) = MEMORY[0x24BEE44F0];
        *(_QWORD *)(v41 + 104) = v48;
        *(_DWORD *)(v41 + 72) = v47;
        *(_QWORD *)(v41 + 136) = MEMORY[0x24BEE0D00];
        *(_QWORD *)(v41 + 144) = lazy protocol witness table accessor for type String and conformance String();
        *(_QWORD *)(v41 + 112) = 0x6D61724677656956;
        *(_QWORD *)(v41 + 120) = 0xE900000000000065;
        os_signpost(_:dso:log:name:signpostID:_:_:)();
        swift_release();
        (*(void (**)(char *, uint64_t))(v71 + 8))(v19, v16);
        swift_bridgeObjectRelease();
        if (*(_QWORD *)(a4 + 56))
          goto LABEL_51;
        goto LABEL_52;
      }
    }
    __break(1u);
LABEL_68:
    swift_once();
LABEL_22:
    v28 = static Animation.velocityTracking;
    swift_retain();
LABEL_25:
    v8 = v9 - v8;
    v7 = v10 - v7;
    v5 = v11 - v5;
    v6 = v72 - v6;
    v20 = *(double *)AGGraphGetValue();
    if (*(_QWORD *)(a4 + 56))
      break;
    type metadata accessor for CombinedAnimationState<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>>.Entry(0, (unint64_t *)&lazy cache variable for type metadata for AnimatorState<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>>, (uint64_t (*)(uint64_t))type metadata accessor for AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>, lazy protocol witness table accessor for type AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>> and conformance AnimatablePair<A, B>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatorState);
    swift_allocObject();
    swift_retain();
    v58 = swift_retain();
    v59 = specialized AnimatorState.init(animation:interval:at:in:)(v58, v8, v7, v5, v6, v20);
    swift_retain();
    v60 = static os_signpost_type_t.begin.getter();
    static os_signpost_type_t.event.getter();
    if ((kdebug_is_enabled() & 1) == 0)
      goto LABEL_62;
    v69 = v60;
    if (one-time initialization token for _signpostLog != -1)
      swift_once();
    v61 = (void *)_signpostLog;
    if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
    {
      v71 = v17;
      swift_retain();
      v62 = v61;
      OSSignpostID.init(log:object:)();
      type metadata accessor for _ContiguousArrayStorage<CVarArg>();
      v63 = swift_allocObject();
      *(_OWORD *)(v63 + 16) = xmmword_235283260;
      result = (_DWORD *)AGGraphGetCurrentAttribute();
      v68 = *MEMORY[0x24BE096C0];
      if ((_DWORD)result == v68)
        goto LABEL_71;
      v64 = (id)AGGraphGetAttributeGraph();
      v67 = AGGraphGetCounter();

      v65 = MEMORY[0x24BEE1ED8];
      *(_QWORD *)(v63 + 56) = MEMORY[0x24BEE1E88];
      *(_QWORD *)(v63 + 64) = v65;
      *(_QWORD *)(v63 + 32) = v67;
      result = (_DWORD *)AGGraphGetCurrentAttribute();
      if ((_DWORD)result == v68)
        goto LABEL_72;
      v66 = MEMORY[0x24BEE4558];
      *(_QWORD *)(v63 + 96) = MEMORY[0x24BEE44F0];
      *(_QWORD *)(v63 + 104) = v66;
      *(_DWORD *)(v63 + 72) = (_DWORD)result;
      *(_QWORD *)(v63 + 136) = MEMORY[0x24BEE0D00];
      *(_QWORD *)(v63 + 144) = lazy protocol witness table accessor for type String and conformance String();
      *(_QWORD *)(v63 + 112) = 0x6D61724677656956;
      *(_QWORD *)(v63 + 120) = 0xE900000000000065;
      os_signpost(_:dso:log:name:signpostID:_:_:)();
      swift_release();
      v17 = v71;
      (*(void (**)(char *, uint64_t))(v71 + 8))(v19, v16);
      swift_bridgeObjectRelease();
    }
    else
    {
LABEL_62:
      swift_release();
    }
    swift_release();
    *(_QWORD *)(a4 + 56) = v59;
    if (v59)
    {
LABEL_35:
      swift_retain();
      specialized AnimatorState.addListeners(transaction:)();
      swift_release();
      swift_release();
      goto LABEL_36;
    }
LABEL_64:
    __break(1u);
LABEL_36:
    result = (_DWORD *)swift_release();
    v25 = v72;
LABEL_37:
    *(double *)(a4 + 16) = v9;
    *(double *)(a4 + 24) = v10;
    *(double *)(a4 + 32) = v11;
    *(double *)(a4 + 40) = v25;
    *(_BYTE *)(a4 + 48) = 0;
    v24 = *(_QWORD *)(a4 + 56);
    if (!v24)
      return result;
  }
  swift_retain();
  LOBYTE(v76.f64[0]) = 0;
  specialized AnimatorState.combine(newAnimation:newInterval:at:in:environment:)(v28, v8, v7, v5, v6, v20);
  swift_retain();
  v31 = static os_signpost_type_t.event.getter();
  static os_signpost_type_t.event.getter();
  if ((kdebug_is_enabled() & 1) == 0)
    goto LABEL_33;
  v69 = v31;
  if (one-time initialization token for _signpostLog != -1)
    swift_once();
  v32 = (void *)_signpostLog;
  if ((OS_os_log.signpostsEnabled.getter() & 1) == 0)
  {
LABEL_33:
    swift_release_n();
    goto LABEL_34;
  }
  v71 = v17;
  swift_retain();
  v33 = v32;
  OSSignpostID.init(log:object:)();
  type metadata accessor for _ContiguousArrayStorage<CVarArg>();
  v34 = swift_allocObject();
  *(_OWORD *)(v34 + 16) = xmmword_235283260;
  result = (_DWORD *)AGGraphGetCurrentAttribute();
  v68 = *MEMORY[0x24BE096C0];
  if ((_DWORD)result != v68)
  {
    v35 = (id)AGGraphGetAttributeGraph();
    v67 = AGGraphGetCounter();

    v36 = MEMORY[0x24BEE1ED8];
    *(_QWORD *)(v34 + 56) = MEMORY[0x24BEE1E88];
    *(_QWORD *)(v34 + 64) = v36;
    *(_QWORD *)(v34 + 32) = v67;
    result = (_DWORD *)AGGraphGetCurrentAttribute();
    if ((_DWORD)result == v68)
      goto LABEL_70;
    v37 = MEMORY[0x24BEE4558];
    *(_QWORD *)(v34 + 96) = MEMORY[0x24BEE44F0];
    *(_QWORD *)(v34 + 104) = v37;
    *(_DWORD *)(v34 + 72) = (_DWORD)result;
    *(_QWORD *)(v34 + 136) = MEMORY[0x24BEE0D00];
    *(_QWORD *)(v34 + 144) = lazy protocol witness table accessor for type String and conformance String();
    *(_QWORD *)(v34 + 112) = 0x6D61724677656956;
    *(_QWORD *)(v34 + 120) = 0xE900000000000065;
    os_signpost(_:dso:log:name:signpostID:_:_:)();
    swift_release_n();
    v17 = v71;
    (*(void (**)(char *, uint64_t))(v71 + 8))(v19, v16);
    swift_bridgeObjectRelease();
LABEL_34:
    if (*(_QWORD *)(a4 + 56))
      goto LABEL_35;
    goto LABEL_64;
  }
  __break(1u);
LABEL_70:
  __break(1u);
LABEL_71:
  __break(1u);
LABEL_72:
  __break(1u);
  return result;
}

_DWORD *specialized AnimatableAttributeHelper.update(value:defaultAnimation:environment:sampleCollector:)(uint64_t a1, id a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  double v12;
  double *Value;
  char v14;
  _DWORD *result;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  float32x4_t *v19;
  float v20;
  float v21;
  float32x4_t *v22;
  __int128 v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  float v30;
  float v31;
  int v32;
  void *v33;
  id v34;
  uint64_t v35;
  id v36;
  uint64_t Counter;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  void *v42;
  id v43;
  uint64_t v44;
  id v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  id v51;
  uint64_t v52;
  int CurrentAttribute;
  uint64_t v54;
  int v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  double v59;
  uint64_t v60;
  unsigned __int8 v61;
  void (*v62)(float32x4_t *, unint64_t, double);
  void *v63;
  uint64_t v64;
  int v65;
  int v66;
  double v67;
  uint64_t v68;
  float32x4_t *v69;
  int v70;
  char *v71;
  uint64_t v72;
  float32x4_t v73;
  __int128 v74;
  unsigned __int8 v75;
  char v76;
  float32x4_t v77;
  __int128 v78;
  float32x4_t v79;
  int v80;
  float v81;
  float v82;
  float v83;

  LODWORD(v5) = a3;
  *(double *)&v8 = COERCE_DOUBLE(type metadata accessor for OSSignpostID());
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v64 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for infinity == -1)
    goto LABEL_2;
  while (1)
  {
    swift_once();
LABEL_2:
    v12 = -*(double *)&static Time.infinity;
    if (*(_QWORD *)(a4 + 48))
    {
      Value = (double *)AGGraphGetValue();
      if ((v14 & 1) != 0)
        v12 = *Value;
    }
    result = (_DWORD *)AGGraphGetValue();
    if (*(_DWORD *)(a4 + 56) == *result >> 1)
    {
      if (*(_BYTE *)(a1 + 60) != 1)
      {
        v16 = *(_QWORD *)(a4 + 48);
        if (v16)
          goto LABEL_49;
        return result;
      }
    }
    else
    {
      specialized AnimatableAttributeHelper.reset()();
      *(_BYTE *)(a1 + 60) = 1;
    }
    MeshGradient._Paint.animatableData.getter(&v77);
    v17 = *(uint64_t **)(a4 + 16);
    v18 = v77.i64[0];
    if (!v17)
      goto LABEL_48;
    v67 = v12;
    v70 = v5;
    v71 = v11;
    v19 = *(float32x4_t **)(a4 + 24);
    v5 = *(_QWORD *)(a4 + 32);
    LODWORD(v20) = *(_QWORD *)(a4 + 40);
    v72 = *(_QWORD *)(a4 + 40);
    v21 = *((float *)&v72 + 1);
    v22 = (float32x4_t *)v77.i64[1];
    v23 = v78;
    if (specialized static Array<A>.== infix(_:_:)(v77.i64[0], (uint64_t)v17))
    {
      specialized static Array<A>.== infix(_:_:)(v22, v19);
      if ((v24 & 1) != 0
        && *(float *)&v23 == *(float *)&v5
        && *((float *)&v23 + 1) == *((float *)&v5 + 1)
        && *((float *)&v23 + 2) == v20
        && *((float *)&v23 + 3) == v21)
      {
        goto LABEL_47;
      }
    }
    v68 = v9;
    v69 = v19;
    outlined copy of ScrapeableContent?((uint64_t)v17);
    AGGraphClearUpdate();
    v9 = *(_QWORD *)AGGraphGetValue();
    swift_retain();
    AGGraphSetUpdate();
    v25 = swift_retain();
    v26 = specialized find<A>(_:key:)(v25);
    if (v26)
    {
      v27 = *(_QWORD *)(v26 + 72);
      swift_retain();
      swift_release();
      if (v27)
        goto LABEL_27;
    }
    else
    {
      swift_release();
    }
    v28 = swift_retain();
    v29 = specialized closure #1 in PropertyList.subscript.getter(v28);
    swift_release();
    if ((v29 & 1) != 0)
    {
      if (one-time initialization token for velocityTracking != -1)
        swift_once();
      v27 = static Animation.velocityTracking;
      swift_retain();
    }
    else
    {
      if (!a2)
      {
        outlined consume of AnimatablePair<AnimatableArray<Float>, AnimatablePair<AnimatableArray<AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>, AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>>?((uint64_t)v17);
        swift_release();
        v9 = v68;
LABEL_47:
        v11 = v71;
        v12 = v67;
        goto LABEL_48;
      }
      swift_retain();
      v27 = (uint64_t)a2;
    }
LABEL_27:
    v73.i64[0] = v18;
    v73.i64[1] = (uint64_t)v22;
    v74 = v23;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    specialized static AnimatableArray.-= infix(_:_:)((uint64_t)&v73, (uint64_t)v17);
    specialized static AnimatableArray.-= infix(_:_:)((uint64_t)&v73.i64[1], (uint64_t)v69);
    *(float *)&v74 = *(float *)&v23 - *(float *)&v5;
    *((float *)&v74 + 1) = *((float *)&v23 + 1) - *((float *)&v5 + 1);
    v30 = *((float *)&v23 + 2) - v20;
    v31 = *((float *)&v23 + 3) - v21;
    *((float *)&v74 + 2) = v30;
    *((float *)&v74 + 3) = *((float *)&v23 + 3) - v21;
    v12 = *(double *)AGGraphGetValue();
    if (!*(_QWORD *)(a4 + 48))
    {
      v79 = v73;
      v80 = v23;
      v81 = *((float *)&v23 + 1) - *((float *)&v5 + 1);
      v82 = v30;
      v83 = v31;
      type metadata accessor for CombinedAnimationState<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>>.Entry(0, &lazy cache variable for type metadata for AnimatorState<AnimatablePair<AnimatableArray<Float>, AnimatablePair<AnimatableArray<AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>, AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>>>, (uint64_t (*)(uint64_t))type metadata accessor for AnimatablePair<AnimatableArray<Float>, AnimatablePair<AnimatableArray<AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>, AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>>, lazy protocol witness table accessor for type AnimatablePair<AnimatableArray<Float>, AnimatablePair<AnimatableArray<AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>, AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>> and conformance AnimatablePair<A, B>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatorState);
      swift_allocObject();
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v40 = swift_retain();
      a2 = (id)specialized AnimatorState.init(animation:interval:at:in:)(v40, &v79, v12);
      swift_retain();
      v41 = static os_signpost_type_t.begin.getter();
      static os_signpost_type_t.event.getter();
      if ((kdebug_is_enabled() & 1) == 0)
      {
        swift_release();
        v11 = v71;
        goto LABEL_67;
      }
      v66 = v41;
      v11 = v71;
      if (one-time initialization token for _signpostLog == -1)
        goto LABEL_37;
      goto LABEL_72;
    }
    v79 = v73;
    v80 = v23;
    v81 = *((float *)&v23 + 1) - *((float *)&v5 + 1);
    v82 = v30;
    v83 = v31;
    swift_retain();
    v76 = 0;
    specialized AnimatorState.combine(newAnimation:newInterval:at:in:environment:)(v27, &v79, v12);
    swift_retain();
    v32 = static os_signpost_type_t.event.getter();
    static os_signpost_type_t.event.getter();
    if ((kdebug_is_enabled() & 1) != 0)
    {
      v66 = v32;
      v11 = v71;
      if (one-time initialization token for _signpostLog != -1)
        swift_once();
      v33 = (void *)_signpostLog;
      if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
      {
        v67 = *(double *)&v8;
        swift_retain();
        v34 = v33;
        OSSignpostID.init(log:object:)();
        type metadata accessor for _ContiguousArrayStorage<CVarArg>();
        v35 = swift_allocObject();
        *(_OWORD *)(v35 + 16) = xmmword_235283260;
        result = (_DWORD *)AGGraphGetCurrentAttribute();
        v65 = *MEMORY[0x24BE096C0];
        if ((_DWORD)result == v65)
        {
          __break(1u);
LABEL_74:
          __break(1u);
LABEL_75:
          __break(1u);
LABEL_76:
          __break(1u);
          return result;
        }
        v36 = (id)AGGraphGetAttributeGraph();
        Counter = AGGraphGetCounter();

        v38 = MEMORY[0x24BEE1ED8];
        *(_QWORD *)(v35 + 56) = MEMORY[0x24BEE1E88];
        *(_QWORD *)(v35 + 64) = v38;
        *(_QWORD *)(v35 + 32) = Counter;
        result = (_DWORD *)AGGraphGetCurrentAttribute();
        if ((_DWORD)result == v65)
          goto LABEL_74;
        v39 = MEMORY[0x24BEE4558];
        *(_QWORD *)(v35 + 96) = MEMORY[0x24BEE44F0];
        *(_QWORD *)(v35 + 104) = v39;
        *(_DWORD *)(v35 + 72) = (_DWORD)result;
        *(_QWORD *)(v35 + 136) = MEMORY[0x24BEE0D00];
        *(_QWORD *)(v35 + 144) = lazy protocol witness table accessor for type String and conformance String();
        *(_QWORD *)(v35 + 112) = 0x746E6961505FLL;
        *(_QWORD *)(v35 + 120) = 0xE600000000000000;
        v11 = v71;
        os_signpost(_:dso:log:name:signpostID:_:_:)();
        swift_release_n();
        *(double *)&v8 = v67;
        (*(void (**)(char *, double))(v68 + 8))(v11, COERCE_DOUBLE(*(_QWORD *)&v67));
        swift_bridgeObjectRelease();
      }
      else
      {
        swift_release_n();
      }
    }
    else
    {
      swift_release_n();
      v11 = v71;
    }
    a2 = *(id *)(a4 + 48);
    if (a2)
      break;
LABEL_68:
    __break(1u);
  }
  while (1)
  {
    swift_retain();
    specialized AnimatorState.addListeners(transaction:)();
    swift_release();
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined consume of AnimatablePair<AnimatableArray<Float>, AnimatablePair<AnimatableArray<AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>, AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>>?((uint64_t)v17);
    v18 = v77.i64[0];
    v9 = v68;
LABEL_48:
    result = (_DWORD *)outlined consume of AnimatablePair<AnimatableArray<Float>, AnimatablePair<AnimatableArray<AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>, AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>>?(*(_QWORD *)(a4 + 16));
    v49 = v77.i64[1];
    *(_QWORD *)(a4 + 16) = v18;
    *(_QWORD *)(a4 + 24) = v49;
    *(_OWORD *)(a4 + 32) = v78;
    v16 = *(_QWORD *)(a4 + 48);
    if (!v16)
      return result;
LABEL_49:
    swift_retain();
    MeshGradient._Paint.animatableData.getter(&v77);
    v73.i8[0] = 0;
    if ((specialized AnimatorState.update(_:at:environment:)((float32x2_t *)&v77, v12) & 1) == 0)
      break;
    v5 = v8;
    swift_retain();
    *(double *)&v8 = COERCE_DOUBLE(static os_signpost_type_t.end.getter());
    static os_signpost_type_t.event.getter();
    if ((kdebug_is_enabled() & 1) == 0)
      goto LABEL_61;
    if (one-time initialization token for _signpostLog != -1)
      swift_once();
    v17 = &OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D417TextRenderSurface_renderer;
    v50 = (void *)_signpostLog;
    if ((OS_os_log.signpostsEnabled.getter() & 1) == 0)
    {
LABEL_61:
      v58 = swift_release();
      if (!*(_QWORD *)(a4 + 48))
      {
LABEL_63:
        *(_QWORD *)(a4 + 48) = 0;
        goto LABEL_64;
      }
LABEL_62:
      specialized AnimatorState.removeListeners()(v58);
      swift_release();
      goto LABEL_63;
    }
    v68 = v9;
    swift_retain();
    v51 = v50;
    v71 = v11;
    OSSignpostID.init(log:object:)();
    type metadata accessor for _ContiguousArrayStorage<CVarArg>();
    v52 = swift_allocObject();
    *(_OWORD *)(v52 + 16) = xmmword_235283260;
    CurrentAttribute = AGGraphGetCurrentAttribute();
    v11 = (char *)*MEMORY[0x24BE096C0];
    if (CurrentAttribute == (_DWORD)v11)
    {
      __break(1u);
    }
    else
    {
      a2 = (id)AGGraphGetAttributeGraph();
      v9 = AGGraphGetCounter();

      v54 = MEMORY[0x24BEE1ED8];
      *(_QWORD *)(v52 + 56) = MEMORY[0x24BEE1E88];
      *(_QWORD *)(v52 + 64) = v54;
      *(_QWORD *)(v52 + 32) = v9;
      v55 = AGGraphGetCurrentAttribute();
      if (v55 != (_DWORD)v11)
      {
        v56 = MEMORY[0x24BEE4558];
        *(_QWORD *)(v52 + 96) = MEMORY[0x24BEE44F0];
        *(_QWORD *)(v52 + 104) = v56;
        *(_DWORD *)(v52 + 72) = v55;
        *(_QWORD *)(v52 + 136) = MEMORY[0x24BEE0D00];
        *(_QWORD *)(v52 + 144) = lazy protocol witness table accessor for type String and conformance String();
        *(_QWORD *)(v52 + 112) = 0x746E6961505FLL;
        *(_QWORD *)(v52 + 120) = 0xE600000000000000;
        v57 = v71;
        os_signpost(_:dso:log:name:signpostID:_:_:)();
        swift_release();
        (*(void (**)(char *, uint64_t))(v68 + 8))(v57, v5);
        v58 = swift_bridgeObjectRelease();
        if (!*(_QWORD *)(a4 + 48))
          goto LABEL_63;
        goto LABEL_62;
      }
    }
    __break(1u);
LABEL_72:
    swift_once();
LABEL_37:
    v42 = (void *)_signpostLog;
    if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
    {
      v67 = *(double *)&v8;
      swift_retain();
      v43 = v42;
      OSSignpostID.init(log:object:)();
      type metadata accessor for _ContiguousArrayStorage<CVarArg>();
      v44 = swift_allocObject();
      *(_OWORD *)(v44 + 16) = xmmword_235283260;
      result = (_DWORD *)AGGraphGetCurrentAttribute();
      v65 = *MEMORY[0x24BE096C0];
      if ((_DWORD)result == v65)
        goto LABEL_75;
      v45 = (id)AGGraphGetAttributeGraph();
      v46 = AGGraphGetCounter();

      v47 = MEMORY[0x24BEE1ED8];
      *(_QWORD *)(v44 + 56) = MEMORY[0x24BEE1E88];
      *(_QWORD *)(v44 + 64) = v47;
      *(_QWORD *)(v44 + 32) = v46;
      result = (_DWORD *)AGGraphGetCurrentAttribute();
      if ((_DWORD)result == v65)
        goto LABEL_76;
      v48 = MEMORY[0x24BEE4558];
      *(_QWORD *)(v44 + 96) = MEMORY[0x24BEE44F0];
      *(_QWORD *)(v44 + 104) = v48;
      *(_DWORD *)(v44 + 72) = (_DWORD)result;
      *(_QWORD *)(v44 + 136) = MEMORY[0x24BEE0D00];
      *(_QWORD *)(v44 + 144) = lazy protocol witness table accessor for type String and conformance String();
      *(_QWORD *)(v44 + 112) = 0x746E6961505FLL;
      *(_QWORD *)(v44 + 120) = 0xE600000000000000;
      v11 = v71;
      os_signpost(_:dso:log:name:signpostID:_:_:)();
      swift_release();
      *(double *)&v8 = v67;
      (*(void (**)(char *, double))(v68 + 8))(v11, COERCE_DOUBLE(*(_QWORD *)&v67));
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_release();
    }
LABEL_67:
    swift_release();
    *(_QWORD *)(a4 + 48) = a2;
    if (!a2)
      goto LABEL_68;
  }
  if (one-time initialization token for shared != -1)
    swift_once();
  swift_beginAccess();
  v59 = *(double *)(v16 + 72);
  v73.i64[0] = *(_QWORD *)(v16 + 80);
  v60 = *(unsigned int *)(v16 + 120);
  v61 = *(_BYTE *)(v16 + 124);
  v62 = *(void (**)(float32x4_t *, unint64_t, double))((*MEMORY[0x24BEE4EA0] & *(_QWORD *)static CoreGlue.shared)
                                                                       + 0x58);
  v63 = static CoreGlue.shared;
  v75 = v61;
  v62(&v73, v60 | ((unint64_t)v61 << 32), v59);

LABEL_64:
  v73 = v77;
  v74 = v78;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  MeshGradient._Paint.animatableData.setter(&v73);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  result = (_DWORD *)swift_release();
  *(_BYTE *)(a1 + 60) = 1;
  return result;
}

_DWORD *specialized AnimatableAttributeHelper.update(value:defaultAnimation:environment:sampleCollector:)(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  double v4;
  double v5;
  double v6;
  uint64_t v10;
  uint64_t v11;
  double v12;
  double *Value;
  char v14;
  _DWORD *result;
  uint64_t *v16;
  uint64_t v17;
  float64_t v18;
  char v19;
  double v20;
  double v21;
  double v22;
  double v23;
  unsigned int v24;
  int v25;
  float64_t v26;
  double v27;
  float64_t v28;
  int v29;
  double v30;
  double v31;
  double v32;
  double v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  int v39;
  void *v40;
  char v41;
  id v42;
  uint64_t v43;
  id v44;
  uint64_t Counter;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t *v50;
  void *v51;
  char v52;
  id v53;
  uint64_t v54;
  id v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  float64_t v60;
  char v61;
  uint64_t v62;
  float64x2_t v63;
  unsigned int v64;
  char v65;
  float64_t v66;
  void *v67;
  uint64_t v68;
  id v69;
  uint64_t v70;
  int CurrentAttribute;
  id v72;
  uint64_t v73;
  uint64_t v74;
  int v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  double v79;
  uint64_t v80;
  unsigned __int8 v81;
  void (*v82)(uint64_t *, unint64_t, double);
  void *v83;
  uint64_t v84;
  char v85;
  float64x2_t v86;
  float64x2_t v87;
  float64x2_t v88;
  uint64_t v89;
  int v90;
  int v91;
  float64x2_t v92;
  uint64_t v93;
  float64x2_t v94;
  char *v95;
  float64x2_t v96;
  int v97;
  uint64_t v98;
  char v99;
  unsigned __int8 v100;
  float64_t v101;
  char v102;
  char v103;
  float64x2_t v104;
  _BYTE v105[25];
  float64x2_t v106;
  _BYTE v107[25];
  SwiftUI::ResolvedGradient v108;
  SwiftUI::ResolvedGradient v109;

  v97 = a3;
  v10 = type metadata accessor for OSSignpostID();
  v93 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v95 = (char *)&v89 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for infinity == -1)
    goto LABEL_2;
  while (1)
  {
    swift_once();
LABEL_2:
    v12 = -*(double *)&static Time.infinity;
    if (*(_QWORD *)(a4 + 64))
    {
      Value = (double *)AGGraphGetValue();
      if ((v14 & 1) != 0)
        v12 = *Value;
    }
    result = (_DWORD *)AGGraphGetValue();
    v16 = &lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.AccessibilityTextAttributeResolverKey> and conformance EnvironmentPropertyKey<A>;
    if (*(_DWORD *)(a4 + 72) == *result >> 1)
    {
      if (*(_BYTE *)(a1 + 48) != 1)
      {
        v17 = *(_QWORD *)(a4 + 64);
        if (v17)
          goto LABEL_57;
        return result;
      }
    }
    else
    {
      specialized AnimatableAttributeHelper.reset()();
      *(_BYTE *)(a1 + 48) = 1;
    }
    v18 = *(double *)a1;
    v19 = *(_BYTE *)(a1 + 8);
    v20 = *(double *)(a1 + 16);
    v21 = *(double *)(a1 + 24);
    v22 = *(double *)(a1 + 32);
    v23 = *(double *)(a1 + 40);
    if (one-time initialization token for v5 != -1)
      swift_once();
    v24 = static Semantics.v5;
    if (one-time initialization token for forced != -1)
      swift_once();
    swift_beginAccess();
    if (byte_25426FAB4 == 1)
    {
      v16 = &lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.AccessibilityTextAttributeResolverKey> and conformance EnvironmentPropertyKey<A>;
      if ((dyld_program_sdk_at_least() & 1) != 0)
        goto LABEL_18;
    }
    else
    {
      v16 = &lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.AccessibilityTextAttributeResolverKey> and conformance EnvironmentPropertyKey<A>;
      if (static Semantics.forced >= v24)
      {
LABEL_18:
        v104.f64[0] = v18;
        LOBYTE(v104.f64[1]) = v19;
        swift_bridgeObjectRetain();
        v108.stops._rawValue = &v104;
        ResolvedGradientVector.init(_:)(v108);
        v26 = v106.f64[0];
        v25 = LOBYTE(v106.f64[1]);
        goto LABEL_19;
      }
    }
    v25 = 0;
    v26 = MEMORY[0x24BEE4AF8];
LABEL_19:
    v27 = v20 * 128.0;
    v6 = v21 * 128.0;
    v5 = v22 * 128.0;
    v28 = *(double *)(a4 + 48);
    v4 = v23 * 128.0;
    v96.f64[0] = v20 * 128.0;
    if (v28 == 0.0)
      goto LABEL_56;
    v29 = *(unsigned __int8 *)(a4 + 56);
    v30 = *(double *)(a4 + 32);
    v31 = *(double *)(a4 + 40);
    v33 = *(double *)(a4 + 16);
    v32 = *(double *)(a4 + 24);
    if (v27 == v33
      && v6 == v32
      && v5 == v30
      && v4 == v31
      && (specialized static Array<A>.== infix(_:_:)(*(_QWORD *)&v26, *(_QWORD *)&v28) & 1) != 0
      && v25 == v29)
    {
      goto LABEL_56;
    }
    LODWORD(v94.f64[0]) = v25;
    swift_bridgeObjectRetain();
    AGGraphClearUpdate();
    AGGraphGetValue();
    swift_retain();
    AGGraphSetUpdate();
    v34 = swift_retain();
    v35 = specialized find<A>(_:key:)(v34);
    if (v35)
    {
      v36 = *(_QWORD *)(v35 + 72);
      swift_retain();
      swift_release();
      if (v36)
        goto LABEL_36;
    }
    else
    {
      swift_release();
    }
    v37 = swift_retain();
    v38 = specialized closure #1 in PropertyList.subscript.getter(v37);
    swift_release();
    if ((v38 & 1) != 0)
    {
      if (one-time initialization token for velocityTracking != -1)
        swift_once();
      v36 = static Animation.velocityTracking;
      swift_retain();
    }
    else
    {
      if (!a2)
      {
        swift_release();
        goto LABEL_55;
      }
      swift_retain();
      v36 = a2;
    }
LABEL_36:
    *(_QWORD *)&v92.f64[0] = v10;
    *(float64_t *)&v105[16] = v26;
    v105[24] = LOBYTE(v94.f64[0]);
    v104.f64[0] = v96.f64[0] - v33;
    v104.f64[1] = v6 - v32;
    *(double *)v105 = v5 - v30;
    *(double *)&v105[8] = v4 - v31;
    v106.f64[0] = v28;
    LOBYTE(v106.f64[1]) = v29;
    swift_bridgeObjectRetain();
    ResolvedGradientVector.add(_:scaledBy:)((uint64_t)&v106, -1.0);
    v12 = *(double *)AGGraphGetValue();
    if (!*(_QWORD *)(a4 + 64))
    {
      v106 = v104;
      *(_OWORD *)v107 = *(_OWORD *)v105;
      *(_OWORD *)&v107[9] = *(_OWORD *)&v105[9];
      type metadata accessor for AnimatorState<AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>, ResolvedGradientVector>>(0);
      swift_allocObject();
      swift_retain();
      outlined retain of AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>, ResolvedGradientVector>((uint64_t)&v106);
      v49 = swift_retain();
      a2 = specialized AnimatorState.init(animation:interval:at:in:)(v49, &v106, v12);
      swift_retain();
      LODWORD(v50) = static os_signpost_type_t.begin.getter();
      static os_signpost_type_t.event.getter();
      if ((kdebug_is_enabled() & 1) == 0)
      {
        swift_release();
        v10 = *(_QWORD *)&v92.f64[0];
        goto LABEL_85;
      }
      if (one-time initialization token for _signpostLog == -1)
        goto LABEL_46;
      goto LABEL_90;
    }
    v106 = v104;
    *(_OWORD *)v107 = *(_OWORD *)v105;
    *(_OWORD *)&v107[9] = *(_OWORD *)&v105[9];
    swift_retain();
    v103 = 0;
    specialized AnimatorState.combine(newAnimation:newInterval:at:in:environment:)(v36, &v106, v12);
    swift_retain();
    v39 = static os_signpost_type_t.event.getter();
    static os_signpost_type_t.event.getter();
    if ((kdebug_is_enabled() & 1) != 0)
    {
      if (one-time initialization token for _signpostLog != -1)
        swift_once();
      v40 = (void *)_signpostLog;
      v41 = OS_os_log.signpostsEnabled.getter();
      v10 = *(_QWORD *)&v92.f64[0];
      if ((v41 & 1) != 0)
      {
        v90 = v39;
        swift_retain();
        v42 = v40;
        OSSignpostID.init(log:object:)();
        type metadata accessor for _ContiguousArrayStorage<CVarArg>();
        v43 = swift_allocObject();
        *(_OWORD *)(v43 + 16) = xmmword_235283260;
        result = (_DWORD *)AGGraphGetCurrentAttribute();
        v91 = *MEMORY[0x24BE096C0];
        if ((_DWORD)result == v91)
        {
          __break(1u);
LABEL_92:
          __break(1u);
LABEL_93:
          __break(1u);
LABEL_94:
          __break(1u);
          return result;
        }
        v44 = (id)AGGraphGetAttributeGraph();
        Counter = AGGraphGetCounter();

        v46 = MEMORY[0x24BEE1ED8];
        *(_QWORD *)(v43 + 56) = MEMORY[0x24BEE1E88];
        *(_QWORD *)(v43 + 64) = v46;
        *(_QWORD *)(v43 + 32) = Counter;
        result = (_DWORD *)AGGraphGetCurrentAttribute();
        if ((_DWORD)result == v91)
          goto LABEL_92;
        v47 = MEMORY[0x24BEE4558];
        *(_QWORD *)(v43 + 96) = MEMORY[0x24BEE44F0];
        *(_QWORD *)(v43 + 104) = v47;
        *(_DWORD *)(v43 + 72) = (_DWORD)result;
        *(_QWORD *)(v43 + 136) = MEMORY[0x24BEE0D00];
        *(_QWORD *)(v43 + 144) = lazy protocol witness table accessor for type String and conformance String();
        *(_QWORD *)(v43 + 112) = 0x746E6961505FLL;
        *(_QWORD *)(v43 + 120) = 0xE600000000000000;
        v48 = v95;
        os_signpost(_:dso:log:name:signpostID:_:_:)();
        swift_release_n();
        v10 = *(_QWORD *)&v92.f64[0];
        (*(void (**)(char *, _QWORD))(v93 + 8))(v48, *(_QWORD *)&v92.f64[0]);
        swift_bridgeObjectRelease();
      }
      else
      {
        swift_release_n();
      }
    }
    else
    {
      swift_release_n();
      v10 = *(_QWORD *)&v92.f64[0];
    }
    a2 = *(_QWORD *)(a4 + 64);
    if (a2)
      break;
LABEL_86:
    __break(1u);
  }
  while (1)
  {
    swift_retain();
    specialized AnimatorState.addListeners(transaction:)();
    swift_release();
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
LABEL_55:
    swift_bridgeObjectRelease();
    v16 = &lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.AccessibilityTextAttributeResolverKey> and conformance EnvironmentPropertyKey<A>;
    LOBYTE(v25) = LOBYTE(v94.f64[0]);
LABEL_56:
    result = (_DWORD *)swift_bridgeObjectRelease();
    *(float64_t *)(a4 + 16) = v96.f64[0];
    *(double *)(a4 + 24) = v6;
    *(double *)(a4 + 32) = v5;
    *(double *)(a4 + 40) = v4;
    *(float64_t *)(a4 + 48) = v26;
    *(_BYTE *)(a4 + 56) = v25;
    v17 = *(_QWORD *)(a4 + 64);
    if (!v17)
      return result;
LABEL_57:
    v60 = *(double *)a1;
    v61 = *(_BYTE *)(a1 + 8);
    v96 = *(float64x2_t *)(a1 + 16);
    v94 = *(float64x2_t *)(a1 + 32);
    v62 = v16[224];
    swift_retain();
    if (v62 != -1)
      swift_once();
    v63 = (float64x2_t)vdupq_n_s64(0x4060000000000000uLL);
    v64 = static Semantics.v5;
    if (one-time initialization token for forced != -1)
    {
      v92 = v63;
      swift_once();
      v63 = v92;
    }
    v96 = vmulq_f64(v96, v63);
    v94 = vmulq_f64(v94, v63);
    swift_beginAccess();
    if (byte_25426FAB4 == 1)
    {
      if ((dyld_program_sdk_at_least() & 1) == 0)
        goto LABEL_63;
    }
    else if (static Semantics.forced < v64)
    {
LABEL_63:
      v65 = 0;
      v66 = MEMORY[0x24BEE4AF8];
      goto LABEL_66;
    }
    v101 = v60;
    v102 = v61;
    swift_bridgeObjectRetain();
    v109.stops._rawValue = &v101;
    ResolvedGradientVector.init(_:)(v109);
    v66 = v104.f64[0];
    v65 = LOBYTE(v104.f64[1]);
LABEL_66:
    v104 = v96;
    *(float64x2_t *)v105 = v94;
    *(float64_t *)&v105[16] = v66;
    v105[24] = v65;
    LOBYTE(v101) = 0;
    if ((specialized AnimatorState.update(_:at:environment:)(&v104, v12) & 1) == 0)
    {
      if (one-time initialization token for shared != -1)
        swift_once();
      swift_beginAccess();
      v79 = *(double *)(v17 + 88);
      v98 = *(_QWORD *)(v17 + 96);
      v80 = *(unsigned int *)(v17 + 148);
      v81 = *(_BYTE *)(v17 + 152);
      v82 = *(void (**)(uint64_t *, unint64_t, double))((*MEMORY[0x24BEE4EA0] & *(_QWORD *)static CoreGlue.shared)
                                                                       + 0x58);
      v83 = static CoreGlue.shared;
      v100 = v81;
      v82(&v98, v80 | ((unint64_t)v81 << 32), v79);

      goto LABEL_81;
    }
    swift_retain();
    a2 = static os_signpost_type_t.end.getter();
    static os_signpost_type_t.event.getter();
    if ((kdebug_is_enabled() & 1) == 0)
      break;
    if (one-time initialization token for _signpostLog != -1)
      swift_once();
    v50 = &OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D417TextRenderSurface_renderer;
    v67 = (void *)_signpostLog;
    if ((OS_os_log.signpostsEnabled.getter() & 1) == 0)
      break;
    v68 = v10;
    swift_retain();
    v69 = v67;
    OSSignpostID.init(log:object:)();
    type metadata accessor for _ContiguousArrayStorage<CVarArg>();
    v70 = swift_allocObject();
    *(_OWORD *)(v70 + 16) = xmmword_235283260;
    CurrentAttribute = AGGraphGetCurrentAttribute();
    *(_QWORD *)&v26 = *MEMORY[0x24BE096C0];
    if (CurrentAttribute == LODWORD(v26))
    {
      __break(1u);
    }
    else
    {
      v72 = (id)AGGraphGetAttributeGraph();
      v73 = AGGraphGetCounter();

      v74 = MEMORY[0x24BEE1ED8];
      *(_QWORD *)(v70 + 56) = MEMORY[0x24BEE1E88];
      *(_QWORD *)(v70 + 64) = v74;
      *(_QWORD *)(v70 + 32) = v73;
      v75 = AGGraphGetCurrentAttribute();
      if (v75 != LODWORD(v26))
      {
        v76 = MEMORY[0x24BEE4558];
        *(_QWORD *)(v70 + 96) = MEMORY[0x24BEE44F0];
        *(_QWORD *)(v70 + 104) = v76;
        *(_DWORD *)(v70 + 72) = v75;
        *(_QWORD *)(v70 + 136) = MEMORY[0x24BEE0D00];
        *(_QWORD *)(v70 + 144) = lazy protocol witness table accessor for type String and conformance String();
        *(_QWORD *)(v70 + 112) = 0x746E6961505FLL;
        *(_QWORD *)(v70 + 120) = 0xE600000000000000;
        v77 = v95;
        os_signpost(_:dso:log:name:signpostID:_:_:)();
        swift_release();
        (*(void (**)(char *, uint64_t))(v93 + 8))(v77, v68);
        v78 = swift_bridgeObjectRelease();
        if (*(_QWORD *)(a4 + 64))
          goto LABEL_79;
        goto LABEL_80;
      }
    }
    __break(1u);
LABEL_90:
    swift_once();
LABEL_46:
    v51 = (void *)_signpostLog;
    v52 = OS_os_log.signpostsEnabled.getter();
    v10 = *(_QWORD *)&v92.f64[0];
    if ((v52 & 1) != 0)
    {
      v90 = (int)v50;
      swift_retain();
      v53 = v51;
      OSSignpostID.init(log:object:)();
      type metadata accessor for _ContiguousArrayStorage<CVarArg>();
      v54 = swift_allocObject();
      *(_OWORD *)(v54 + 16) = xmmword_235283260;
      result = (_DWORD *)AGGraphGetCurrentAttribute();
      v91 = *MEMORY[0x24BE096C0];
      if ((_DWORD)result == v91)
        goto LABEL_93;
      v55 = (id)AGGraphGetAttributeGraph();
      v56 = AGGraphGetCounter();

      v57 = MEMORY[0x24BEE1ED8];
      *(_QWORD *)(v54 + 56) = MEMORY[0x24BEE1E88];
      *(_QWORD *)(v54 + 64) = v57;
      *(_QWORD *)(v54 + 32) = v56;
      result = (_DWORD *)AGGraphGetCurrentAttribute();
      if ((_DWORD)result == v91)
        goto LABEL_94;
      v58 = MEMORY[0x24BEE4558];
      *(_QWORD *)(v54 + 96) = MEMORY[0x24BEE44F0];
      *(_QWORD *)(v54 + 104) = v58;
      *(_DWORD *)(v54 + 72) = (_DWORD)result;
      *(_QWORD *)(v54 + 136) = MEMORY[0x24BEE0D00];
      *(_QWORD *)(v54 + 144) = lazy protocol witness table accessor for type String and conformance String();
      *(_QWORD *)(v54 + 112) = 0x746E6961505FLL;
      *(_QWORD *)(v54 + 120) = 0xE600000000000000;
      v59 = v95;
      os_signpost(_:dso:log:name:signpostID:_:_:)();
      swift_release();
      v10 = *(_QWORD *)&v92.f64[0];
      (*(void (**)(char *, _QWORD))(v93 + 8))(v59, *(_QWORD *)&v92.f64[0]);
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_release();
    }
LABEL_85:
    swift_release();
    *(_QWORD *)(a4 + 64) = a2;
    if (!a2)
      goto LABEL_86;
  }
  v78 = swift_release();
  if (*(_QWORD *)(a4 + 64))
  {
LABEL_79:
    specialized AnimatorState.removeListeners()(v78);
    swift_release();
  }
LABEL_80:
  *(_QWORD *)(a4 + 64) = 0;
LABEL_81:
  v84 = *(_QWORD *)&v105[16];
  v85 = v105[24];
  v86 = (float64x2_t)vdupq_n_s64(0x3F80000000000000uLL);
  v87 = vmulq_f64(v104, v86);
  v88 = vmulq_f64(*(float64x2_t *)v105, v86);
  *(float64x2_t *)(a1 + 16) = v87;
  *(float64x2_t *)(a1 + 32) = v88;
  v98 = v84;
  v99 = v85;
  swift_bridgeObjectRetain();
  ResolvedGradient.animatableData.setter(&v98);
  swift_bridgeObjectRelease();
  result = (_DWORD *)swift_release();
  *(_BYTE *)(a1 + 48) = 1;
  return result;
}

{
  return specialized AnimatableAttributeHelper.update(value:defaultAnimation:environment:sampleCollector:)(a1, a2, a3, a4, (uint64_t)specialized AnimatableAttributeHelper.reset());
}

{
  double v4;
  double v5;
  double v6;
  uint64_t v10;
  uint64_t v11;
  double v12;
  double *Value;
  char v14;
  _DWORD *result;
  uint64_t *v16;
  uint64_t v17;
  float64_t v18;
  char v19;
  double v20;
  double v21;
  double v22;
  double v23;
  unsigned int v24;
  unsigned int v25;
  float64_t v26;
  double v27;
  float64_t v28;
  double v29;
  double v30;
  int v31;
  double v32;
  double v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  double v40;
  int v41;
  void *v42;
  id v43;
  uint64_t v44;
  id v45;
  uint64_t Counter;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  float64_t v50;
  char v51;
  uint64_t v52;
  float64x2_t v53;
  unsigned int v54;
  char v55;
  float64_t v56;
  uint64_t v57;
  uint64_t *v58;
  void *v59;
  uint64_t v60;
  id v61;
  uint64_t v62;
  int CurrentAttribute;
  id v64;
  uint64_t v65;
  int v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  double v70;
  uint64_t v71;
  unsigned __int8 v72;
  void (*v73)(uint64_t *, unint64_t, double);
  void *v74;
  uint64_t v75;
  char v76;
  float64x2_t v77;
  uint64_t v78;
  void *v79;
  id v80;
  uint64_t v81;
  id v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  int v88;
  int v89;
  float64x2_t v90;
  uint64_t v91;
  float64x2_t v92;
  char *v93;
  float64x2_t v94;
  int v95;
  uint64_t v96;
  char v97;
  unsigned __int8 v98;
  float64_t v99;
  char v100;
  char v101;
  float64x2_t v102;
  uint64_t v103;
  char v104;
  float64x2_t v105;
  float64x2_t v106;
  uint64_t v107;
  char v108;
  double v109;
  double v110;
  SwiftUI::ResolvedGradient v111;
  SwiftUI::ResolvedGradient v112;

  v95 = a3;
  v10 = type metadata accessor for OSSignpostID();
  v91 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v93 = (char *)&v87 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for infinity != -1)
    swift_once();
  v12 = -*(double *)&static Time.infinity;
  if (*(_QWORD *)(a4 + 64))
  {
    Value = (double *)AGGraphGetValue();
    if ((v14 & 1) != 0)
      v12 = *Value;
  }
  result = (_DWORD *)AGGraphGetValue();
  v16 = &lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.AccessibilityTextAttributeResolverKey> and conformance EnvironmentPropertyKey<A>;
  if (*(_DWORD *)(a4 + 72) != *result >> 1)
  {
    specialized AnimatableAttributeHelper.reset()();
    *(_BYTE *)(a1 + 48) = 1;
LABEL_11:
    v18 = *(double *)a1;
    v19 = *(_BYTE *)(a1 + 8);
    v20 = *(double *)(a1 + 16);
    v21 = *(double *)(a1 + 24);
    v22 = *(double *)(a1 + 32);
    v23 = *(double *)(a1 + 40);
    if (one-time initialization token for v5 != -1)
      swift_once();
    v24 = static Semantics.v5;
    if (one-time initialization token for forced != -1)
      swift_once();
    swift_beginAccess();
    if (byte_25426FAB4 == 1)
    {
      v16 = &lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.AccessibilityTextAttributeResolverKey> and conformance EnvironmentPropertyKey<A>;
      if ((dyld_program_sdk_at_least() & 1) == 0)
      {
LABEL_17:
        v25 = 0;
        v26 = MEMORY[0x24BEE4AF8];
LABEL_20:
        v27 = v20 * 128.0;
        v6 = v21 * 128.0;
        v4 = v22 * 128.0;
        v5 = v23 * 128.0;
        v28 = *(double *)(a4 + 32);
        v94.f64[0] = v20 * 128.0;
        if (v28 == 0.0)
          goto LABEL_49;
        v29 = *(double *)(a4 + 48);
        v30 = *(double *)(a4 + 56);
        v31 = *(unsigned __int8 *)(a4 + 40);
        v33 = *(double *)(a4 + 16);
        v32 = *(double *)(a4 + 24);
        if (v27 == v33
          && v6 == v32
          && (specialized static Array<A>.== infix(_:_:)(*(_QWORD *)&v26, *(_QWORD *)&v28) & 1) != 0
          && v25 == v31
          && v4 == v29
          && v5 == v30)
        {
          goto LABEL_49;
        }
        LODWORD(v92.f64[0]) = v25;
        swift_bridgeObjectRetain();
        AGGraphClearUpdate();
        v34 = *(_QWORD *)AGGraphGetValue();
        swift_retain();
        AGGraphSetUpdate();
        v35 = swift_retain();
        v36 = specialized find<A>(_:key:)(v35);
        if (v36)
        {
          v37 = *(_QWORD *)(v36 + 72);
          swift_retain();
          swift_release();
          if (v37)
            goto LABEL_37;
        }
        else
        {
          swift_release();
        }
        v38 = swift_retain();
        v39 = specialized closure #1 in PropertyList.subscript.getter(v38);
        swift_release();
        if ((v39 & 1) != 0)
        {
          if (one-time initialization token for velocityTracking != -1)
            swift_once();
          v37 = static Animation.velocityTracking;
          swift_retain();
        }
        else
        {
          if (!a2)
            goto LABEL_85;
          swift_retain();
          v37 = a2;
        }
LABEL_37:
        v103 = *(_QWORD *)&v26;
        v104 = LOBYTE(v92.f64[0]);
        v102.f64[0] = v94.f64[0] - v33;
        v102.f64[1] = v6 - v32;
        v106.f64[0] = v28;
        LOBYTE(v106.f64[1]) = v31;
        swift_bridgeObjectRetain();
        ResolvedGradientVector.add(_:scaledBy:)((uint64_t)&v106, -1.0);
        v40 = v5 - v30;
        v105.f64[0] = v4 - v29;
        v105.f64[1] = v40;
        v12 = *(double *)AGGraphGetValue();
        if (!*(_QWORD *)(a4 + 64))
        {
          v106 = v102;
          v107 = v103;
          v108 = v104;
          v109 = v4 - v29;
          v110 = v40;
          type metadata accessor for CombinedAnimationState<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>>.Entry(0, &lazy cache variable for type metadata for AnimatorState<AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, ResolvedGradientVector>, AnimatablePair<Double, Double>>>, (uint64_t (*)(uint64_t))type metadata accessor for AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, ResolvedGradientVector>, AnimatablePair<Double, Double>>, lazy protocol witness table accessor for type AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, ResolvedGradientVector>, AnimatablePair<Double, Double>> and conformance AnimatablePair<A, B>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatorState);
          swift_allocObject();
          swift_retain();
          swift_bridgeObjectRetain();
          v78 = swift_retain();
          v57 = specialized AnimatorState.init(animation:interval:at:in:)(v78, &v106, v12, v34, (void (*)(_OWORD *))outlined retain of AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, ResolvedGradientVector>, AnimatablePair<Double, Double>>, (void (*)(_OWORD *))outlined release of AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, ResolvedGradientVector>, AnimatablePair<Double, Double>>);
          swift_retain();
          LODWORD(v58) = static os_signpost_type_t.begin.getter();
          static os_signpost_type_t.event.getter();
          if ((kdebug_is_enabled() & 1) == 0)
            goto LABEL_82;
          if (one-time initialization token for _signpostLog != -1)
            goto LABEL_88;
          goto LABEL_78;
        }
        v106 = v102;
        v107 = v103;
        v108 = v104;
        v109 = v4 - v29;
        v110 = v40;
        swift_retain();
        v101 = 0;
        specialized AnimatorState.combine(newAnimation:newInterval:at:in:environment:)(v37, &v106, v12);
        swift_retain();
        v41 = static os_signpost_type_t.event.getter();
        static os_signpost_type_t.event.getter();
        if ((kdebug_is_enabled() & 1) != 0)
        {
          if (one-time initialization token for _signpostLog != -1)
            swift_once();
          v42 = (void *)_signpostLog;
          if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
          {
            v88 = v41;
            *(_QWORD *)&v90.f64[0] = v10;
            swift_retain();
            v43 = v42;
            OSSignpostID.init(log:object:)();
            type metadata accessor for _ContiguousArrayStorage<CVarArg>();
            v44 = swift_allocObject();
            *(_OWORD *)(v44 + 16) = xmmword_235283260;
            result = (_DWORD *)AGGraphGetCurrentAttribute();
            v89 = *MEMORY[0x24BE096C0];
            if ((_DWORD)result == v89)
            {
              __break(1u);
            }
            else
            {
              v45 = (id)AGGraphGetAttributeGraph();
              Counter = AGGraphGetCounter();

              v47 = MEMORY[0x24BEE1ED8];
              *(_QWORD *)(v44 + 56) = MEMORY[0x24BEE1E88];
              *(_QWORD *)(v44 + 64) = v47;
              *(_QWORD *)(v44 + 32) = Counter;
              result = (_DWORD *)AGGraphGetCurrentAttribute();
              if ((_DWORD)result != v89)
              {
                v48 = MEMORY[0x24BEE4558];
                *(_QWORD *)(v44 + 96) = MEMORY[0x24BEE44F0];
                *(_QWORD *)(v44 + 104) = v48;
                *(_DWORD *)(v44 + 72) = (_DWORD)result;
                *(_QWORD *)(v44 + 136) = MEMORY[0x24BEE0D00];
                *(_QWORD *)(v44 + 144) = lazy protocol witness table accessor for type String and conformance String();
                *(_QWORD *)(v44 + 112) = 0x746E6961505FLL;
                *(_QWORD *)(v44 + 120) = 0xE600000000000000;
                v49 = v93;
                os_signpost(_:dso:log:name:signpostID:_:_:)();
                swift_release_n();
                v10 = *(_QWORD *)&v90.f64[0];
                (*(void (**)(char *, _QWORD))(v91 + 8))(v49, *(_QWORD *)&v90.f64[0]);
                swift_bridgeObjectRelease();
                goto LABEL_46;
              }
            }
            __break(1u);
LABEL_91:
            __break(1u);
LABEL_92:
            __break(1u);
            return result;
          }
        }
        swift_release_n();
LABEL_46:
        if (!*(_QWORD *)(a4 + 64))
          goto LABEL_84;
        goto LABEL_47;
      }
    }
    else
    {
      v16 = &lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.AccessibilityTextAttributeResolverKey> and conformance EnvironmentPropertyKey<A>;
      if (static Semantics.forced < v24)
        goto LABEL_17;
    }
    v102.f64[0] = v18;
    LOBYTE(v102.f64[1]) = v19;
    swift_bridgeObjectRetain();
    v111.stops._rawValue = &v102;
    ResolvedGradientVector.init(_:)(v111);
    v26 = v106.f64[0];
    v25 = LOBYTE(v106.f64[1]);
    goto LABEL_20;
  }
  if (*(_BYTE *)(a1 + 48) == 1)
    goto LABEL_11;
  v17 = *(_QWORD *)(a4 + 64);
  if (!v17)
    return result;
  while (1)
  {
    v50 = *(double *)a1;
    v51 = *(_BYTE *)(a1 + 8);
    v94 = *(float64x2_t *)(a1 + 16);
    v92 = *(float64x2_t *)(a1 + 32);
    v52 = v16[224];
    swift_retain();
    if (v52 != -1)
      swift_once();
    v53 = (float64x2_t)vdupq_n_s64(0x4060000000000000uLL);
    v54 = static Semantics.v5;
    if (one-time initialization token for forced != -1)
    {
      v90 = v53;
      swift_once();
      v53 = v90;
    }
    v94 = vmulq_f64(v94, v53);
    swift_beginAccess();
    if (byte_25426FAB4 == 1)
    {
      if ((dyld_program_sdk_at_least() & 1) == 0)
        goto LABEL_56;
    }
    else if (static Semantics.forced < v54)
    {
LABEL_56:
      v55 = 0;
      v56 = MEMORY[0x24BEE4AF8];
      goto LABEL_59;
    }
    v99 = v50;
    v100 = v51;
    swift_bridgeObjectRetain();
    v112.stops._rawValue = &v99;
    ResolvedGradientVector.init(_:)(v112);
    v56 = v102.f64[0];
    v55 = LOBYTE(v102.f64[1]);
LABEL_59:
    v102 = v94;
    v103 = *(_QWORD *)&v56;
    v104 = v55;
    v105 = vmulq_f64(v92, (float64x2_t)vdupq_n_s64(0x4060000000000000uLL));
    LOBYTE(v99) = 0;
    if ((specialized AnimatorState.update(_:at:environment:)(&v102, v12) & 1) == 0)
      break;
    swift_retain();
    v57 = static os_signpost_type_t.end.getter();
    static os_signpost_type_t.event.getter();
    if ((kdebug_is_enabled() & 1) == 0)
      goto LABEL_71;
    if (one-time initialization token for _signpostLog != -1)
      swift_once();
    v58 = &OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D417TextRenderSurface_renderer;
    v59 = (void *)_signpostLog;
    if ((OS_os_log.signpostsEnabled.getter() & 1) == 0)
    {
LABEL_71:
      v69 = swift_release();
      if (*(_QWORD *)(a4 + 64))
      {
LABEL_72:
        specialized AnimatorState.removeListeners()(v69);
        swift_release();
      }
LABEL_73:
      *(_QWORD *)(a4 + 64) = 0;
      goto LABEL_74;
    }
    v60 = v10;
    swift_retain();
    v61 = v59;
    OSSignpostID.init(log:object:)();
    type metadata accessor for _ContiguousArrayStorage<CVarArg>();
    v62 = swift_allocObject();
    *(_OWORD *)(v62 + 16) = xmmword_235283260;
    CurrentAttribute = AGGraphGetCurrentAttribute();
    *(_QWORD *)&v26 = *MEMORY[0x24BE096C0];
    if (CurrentAttribute == LODWORD(v26))
    {
      __break(1u);
    }
    else
    {
      v64 = (id)AGGraphGetAttributeGraph();
      v10 = AGGraphGetCounter();

      v65 = MEMORY[0x24BEE1ED8];
      *(_QWORD *)(v62 + 56) = MEMORY[0x24BEE1E88];
      *(_QWORD *)(v62 + 64) = v65;
      *(_QWORD *)(v62 + 32) = v10;
      v66 = AGGraphGetCurrentAttribute();
      if (v66 != LODWORD(v26))
      {
        v67 = MEMORY[0x24BEE4558];
        *(_QWORD *)(v62 + 96) = MEMORY[0x24BEE44F0];
        *(_QWORD *)(v62 + 104) = v67;
        *(_DWORD *)(v62 + 72) = v66;
        *(_QWORD *)(v62 + 136) = MEMORY[0x24BEE0D00];
        *(_QWORD *)(v62 + 144) = lazy protocol witness table accessor for type String and conformance String();
        *(_QWORD *)(v62 + 112) = 0x746E6961505FLL;
        *(_QWORD *)(v62 + 120) = 0xE600000000000000;
        v68 = v93;
        os_signpost(_:dso:log:name:signpostID:_:_:)();
        swift_release();
        (*(void (**)(char *, uint64_t))(v91 + 8))(v68, v60);
        v69 = swift_bridgeObjectRelease();
        if (*(_QWORD *)(a4 + 64))
          goto LABEL_72;
        goto LABEL_73;
      }
    }
    __break(1u);
LABEL_88:
    swift_once();
LABEL_78:
    v79 = (void *)_signpostLog;
    if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
    {
      v88 = (int)v58;
      *(_QWORD *)&v90.f64[0] = v10;
      swift_retain();
      v80 = v79;
      OSSignpostID.init(log:object:)();
      type metadata accessor for _ContiguousArrayStorage<CVarArg>();
      v81 = swift_allocObject();
      *(_OWORD *)(v81 + 16) = xmmword_235283260;
      result = (_DWORD *)AGGraphGetCurrentAttribute();
      v89 = *MEMORY[0x24BE096C0];
      if ((_DWORD)result == v89)
        goto LABEL_91;
      v82 = (id)AGGraphGetAttributeGraph();
      v83 = AGGraphGetCounter();

      v84 = MEMORY[0x24BEE1ED8];
      *(_QWORD *)(v81 + 56) = MEMORY[0x24BEE1E88];
      *(_QWORD *)(v81 + 64) = v84;
      *(_QWORD *)(v81 + 32) = v83;
      result = (_DWORD *)AGGraphGetCurrentAttribute();
      if ((_DWORD)result == v89)
        goto LABEL_92;
      v85 = MEMORY[0x24BEE4558];
      *(_QWORD *)(v81 + 96) = MEMORY[0x24BEE44F0];
      *(_QWORD *)(v81 + 104) = v85;
      *(_DWORD *)(v81 + 72) = (_DWORD)result;
      *(_QWORD *)(v81 + 136) = MEMORY[0x24BEE0D00];
      *(_QWORD *)(v81 + 144) = lazy protocol witness table accessor for type String and conformance String();
      *(_QWORD *)(v81 + 112) = 0x746E6961505FLL;
      *(_QWORD *)(v81 + 120) = 0xE600000000000000;
      v86 = v93;
      os_signpost(_:dso:log:name:signpostID:_:_:)();
      swift_release();
      v10 = *(_QWORD *)&v90.f64[0];
      (*(void (**)(char *, _QWORD))(v91 + 8))(v86, *(_QWORD *)&v90.f64[0]);
      swift_bridgeObjectRelease();
    }
    else
    {
LABEL_82:
      swift_release();
    }
    swift_release();
    *(_QWORD *)(a4 + 64) = v57;
    if (v57)
    {
LABEL_47:
      swift_retain();
      specialized AnimatorState.addListeners(transaction:)();
      swift_release();
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
    }
    else
    {
LABEL_84:
      __break(1u);
LABEL_85:
      swift_release();
    }
    swift_bridgeObjectRelease();
    v16 = &lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.AccessibilityTextAttributeResolverKey> and conformance EnvironmentPropertyKey<A>;
    v25 = LODWORD(v92.f64[0]);
LABEL_49:
    result = (_DWORD *)swift_bridgeObjectRelease();
    *(float64_t *)(a4 + 16) = v94.f64[0];
    *(double *)(a4 + 24) = v6;
    *(float64_t *)(a4 + 32) = v26;
    *(_QWORD *)(a4 + 40) = v25;
    *(double *)(a4 + 48) = v4;
    *(double *)(a4 + 56) = v5;
    v17 = *(_QWORD *)(a4 + 64);
    if (!v17)
      return result;
  }
  if (one-time initialization token for shared != -1)
    swift_once();
  swift_beginAccess();
  v70 = *(double *)(v17 + 88);
  v96 = *(_QWORD *)(v17 + 96);
  v71 = *(unsigned int *)(v17 + 152);
  v72 = *(_BYTE *)(v17 + 156);
  v73 = *(void (**)(uint64_t *, unint64_t, double))((*MEMORY[0x24BEE4EA0] & *(_QWORD *)static CoreGlue.shared)
                                                                   + 0x58);
  v74 = static CoreGlue.shared;
  v98 = v72;
  v73(&v96, v71 | ((unint64_t)v72 << 32), v70);

LABEL_74:
  v75 = v103;
  v76 = v104;
  v77 = v105;
  *(float64x2_t *)(a1 + 16) = vmulq_f64(v102, (float64x2_t)vdupq_n_s64(0x3F80000000000000uLL));
  v96 = v75;
  v97 = v76;
  swift_bridgeObjectRetain();
  ResolvedGradient.animatableData.setter(&v96);
  swift_bridgeObjectRelease();
  result = (_DWORD *)swift_release();
  *(double *)(a1 + 32) = v77.f64[0] * 0.0078125;
  *(double *)(a1 + 40) = v77.f64[1] * 0.0078125;
  *(_BYTE *)(a1 + 48) = 1;
  return result;
}

{
  uint64_t v7;
  uint64_t v8;
  char *Counter;
  double v10;
  double *Value;
  char v12;
  _DWORD *result;
  uint64_t v14;
  uint64_t v15;
  char v16;
  unsigned int v17;
  uint64_t *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  char v27;
  int v28;
  char v29;
  void *v30;
  id v31;
  uint64_t v32;
  int v33;
  id v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  unsigned int v40;
  char v41;
  uint64_t v42;
  void *v43;
  id v44;
  uint64_t v45;
  int CurrentAttribute;
  id v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  double v52;
  uint64_t v53;
  unsigned __int8 v54;
  void (*v55)(uint64_t *, unint64_t, double);
  void *v56;
  uint64_t v57;
  char v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  char is_enabled;
  void *v63;
  id v64;
  uint64_t v65;
  int v66;
  id v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  int v77;
  uint64_t v78;
  char v79;
  unsigned __int8 v80;
  char *v81;
  char v82;
  uint64_t v83;
  unsigned __int8 v84;
  uint64_t v85;
  char v86;
  SwiftUI::ResolvedGradient v87;
  SwiftUI::ResolvedGradient v88;

  v77 = a3;
  v7 = type metadata accessor for OSSignpostID();
  v76 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  Counter = (char *)&v70 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for infinity != -1)
    swift_once();
  v10 = -*(double *)&static Time.infinity;
  if (*(_QWORD *)(a4 + 32))
  {
    Value = (double *)AGGraphGetValue();
    if ((v12 & 1) != 0)
      v10 = *Value;
  }
  result = (_DWORD *)AGGraphGetValue();
  if (*(_DWORD *)(a4 + 40) != *result >> 1)
  {
    specialized AnimatableAttributeHelper.reset()();
    *(_BYTE *)(a1 + 9) = 1;
LABEL_11:
    v15 = *(_QWORD *)a1;
    v16 = *(_BYTE *)(a1 + 8);
    if (one-time initialization token for v5 != -1)
      swift_once();
    v17 = static Semantics.v5;
    if (one-time initialization token for forced != -1)
      swift_once();
    swift_beginAccess();
    if (byte_25426FAB4 == 1)
    {
      if ((dyld_program_sdk_at_least() & 1) == 0)
        goto LABEL_17;
    }
    else if (static Semantics.forced < v17)
    {
LABEL_17:
      LODWORD(v18) = 0;
      v19 = MEMORY[0x24BEE4AF8];
      v20 = *(char **)(a4 + 16);
      if (!v20)
        goto LABEL_44;
LABEL_21:
      v75 = Counter;
      LODWORD(Counter) = *(unsigned __int8 *)(a4 + 24);
      if ((specialized static Array<A>.== infix(_:_:)(v19, v20) & 1) == 0 || (_DWORD)v18 != (_DWORD)Counter)
      {
        v73 = v7;
        swift_bridgeObjectRetain();
        AGGraphClearUpdate();
        AGGraphGetValue();
        swift_retain();
        AGGraphSetUpdate();
        v21 = swift_retain();
        v22 = specialized find<A>(_:key:)(v21);
        if (v22)
        {
          v23 = *(_QWORD *)(v22 + 72);
          swift_retain();
          swift_release();
          v74 = v23;
          if (v23)
            goto LABEL_33;
        }
        else
        {
          swift_release();
        }
        v24 = swift_retain();
        v25 = specialized closure #1 in PropertyList.subscript.getter(v24);
        swift_release();
        if ((v25 & 1) == 0)
        {
          if (!a2)
            goto LABEL_81;
          swift_retain();
          v74 = a2;
          goto LABEL_33;
        }
        if (one-time initialization token for velocityTracking != -1)
          goto LABEL_84;
        goto LABEL_30;
      }
      goto LABEL_23;
    }
    v81 = (char *)v15;
    v82 = v16;
    swift_bridgeObjectRetain();
    v87.stops._rawValue = &v81;
    ResolvedGradientVector.init(_:)(v87);
    v19 = v83;
    LODWORD(v18) = v84;
    v20 = *(char **)(a4 + 16);
    if (!v20)
      goto LABEL_44;
    goto LABEL_21;
  }
  if (*(_BYTE *)(a1 + 9) == 1)
    goto LABEL_11;
  v14 = *(_QWORD *)(a4 + 32);
  if (!v14)
    return result;
  while (1)
  {
    v37 = *(_QWORD *)a1;
    v38 = *(_BYTE *)(a1 + 8);
    v39 = one-time initialization token for v5;
    swift_retain();
    if (v39 != -1)
      swift_once();
    v40 = static Semantics.v5;
    if (one-time initialization token for forced != -1)
      swift_once();
    swift_beginAccess();
    if (byte_25426FAB4 == 1)
    {
      if ((dyld_program_sdk_at_least() & 1) == 0)
        goto LABEL_51;
    }
    else if (static Semantics.forced < v40)
    {
LABEL_51:
      v41 = 0;
      v42 = MEMORY[0x24BEE4AF8];
      goto LABEL_54;
    }
    v85 = v37;
    v86 = v38;
    swift_bridgeObjectRetain();
    v88.stops._rawValue = &v85;
    ResolvedGradientVector.init(_:)(v88);
    v42 = (uint64_t)v81;
    v41 = v82;
LABEL_54:
    v85 = v42;
    v86 = v41;
    LOBYTE(v81) = 0;
    if ((specialized AnimatorState.update(_:at:environment:)(v10) & 1) == 0)
    {
      if (one-time initialization token for shared != -1)
        swift_once();
      swift_beginAccess();
      v52 = *(double *)(v14 + 56);
      v78 = *(_QWORD *)(v14 + 64);
      v53 = *(unsigned int *)(v14 + 84);
      v54 = *(_BYTE *)(v14 + 88);
      v55 = *(void (**)(uint64_t *, unint64_t, double))((*MEMORY[0x24BEE4EA0] & *(_QWORD *)static CoreGlue.shared)
                                                                       + 0x58);
      v56 = static CoreGlue.shared;
      v80 = v54;
      v55(&v78, v53 | ((unint64_t)v54 << 32), v52);

      goto LABEL_69;
    }
    swift_retain();
    static os_signpost_type_t.end.getter();
    static os_signpost_type_t.event.getter();
    if ((kdebug_is_enabled() & 1) == 0)
      goto LABEL_66;
    if (one-time initialization token for _signpostLog != -1)
      swift_once();
    v18 = &OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D417TextRenderSurface_renderer;
    v43 = (void *)_signpostLog;
    if ((OS_os_log.signpostsEnabled.getter() & 1) == 0)
    {
LABEL_66:
      v51 = swift_release();
      if (*(_QWORD *)(a4 + 32))
      {
LABEL_67:
        specialized AnimatorState.removeListeners()(v51);
        swift_release();
      }
LABEL_68:
      *(_QWORD *)(a4 + 32) = 0;
LABEL_69:
      v78 = v85;
      v79 = v86;
      swift_bridgeObjectRetain();
      ResolvedGradient.animatableData.setter(&v78);
      swift_bridgeObjectRelease();
      result = (_DWORD *)swift_release();
      *(_BYTE *)(a1 + 9) = 1;
      return result;
    }
    v73 = v7;
    swift_retain();
    v44 = v43;
    v20 = Counter;
    OSSignpostID.init(log:object:)();
    type metadata accessor for _ContiguousArrayStorage<CVarArg>();
    v45 = swift_allocObject();
    *(_OWORD *)(v45 + 16) = xmmword_235283260;
    CurrentAttribute = AGGraphGetCurrentAttribute();
    v19 = *MEMORY[0x24BE096C0];
    if (CurrentAttribute == (_DWORD)v19)
    {
      __break(1u);
    }
    else
    {
      v47 = (id)AGGraphGetAttributeGraph();
      Counter = (char *)AGGraphGetCounter();

      v48 = MEMORY[0x24BEE1ED8];
      *(_QWORD *)(v45 + 56) = MEMORY[0x24BEE1E88];
      *(_QWORD *)(v45 + 64) = v48;
      *(_QWORD *)(v45 + 32) = Counter;
      v49 = AGGraphGetCurrentAttribute();
      if (v49 != (_DWORD)v19)
      {
        v50 = MEMORY[0x24BEE4558];
        *(_QWORD *)(v45 + 96) = MEMORY[0x24BEE44F0];
        *(_QWORD *)(v45 + 104) = v50;
        *(_DWORD *)(v45 + 72) = v49;
        *(_QWORD *)(v45 + 136) = MEMORY[0x24BEE0D00];
        *(_QWORD *)(v45 + 144) = lazy protocol witness table accessor for type String and conformance String();
        *(_QWORD *)(v45 + 112) = 0xD000000000000010;
        *(_QWORD *)(v45 + 120) = 0x80000002352E5EF0;
        os_signpost(_:dso:log:name:signpostID:_:_:)();
        swift_release();
        (*(void (**)(char *, uint64_t))(v76 + 8))(v20, v73);
        v51 = swift_bridgeObjectRelease();
        if (*(_QWORD *)(a4 + 32))
          goto LABEL_67;
        goto LABEL_68;
      }
    }
    __break(1u);
LABEL_84:
    swift_once();
LABEL_30:
    v74 = static Animation.velocityTracking;
    swift_retain();
LABEL_33:
    v83 = v19;
    v84 = v18;
    v81 = v20;
    v82 = (char)Counter;
    swift_bridgeObjectRetain();
    ResolvedGradientVector.add(_:scaledBy:)((uint64_t)&v81, -1.0);
    v10 = *(double *)AGGraphGetValue();
    if (*(_QWORD *)(a4 + 32))
      break;
    v57 = v83;
    v58 = v84;
    type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for AnimatorState<ResolvedGradientVector>, (uint64_t (*)(void))lazy protocol witness table accessor for type ResolvedGradientVector and conformance ResolvedGradientVector, (uint64_t)&type metadata for ResolvedGradientVector, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatorState);
    swift_allocObject();
    swift_retain();
    swift_bridgeObjectRetain();
    v59 = swift_retain();
    v60 = specialized AnimatorState.init(animation:interval:at:in:)(v59, v57, v58, v10);
    swift_retain();
    v61 = static os_signpost_type_t.begin.getter();
    static os_signpost_type_t.event.getter();
    is_enabled = kdebug_is_enabled();
    Counter = v75;
    if ((is_enabled & 1) == 0)
      goto LABEL_78;
    if (one-time initialization token for _signpostLog != -1)
      swift_once();
    v63 = (void *)_signpostLog;
    if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
    {
      LODWORD(v71) = v61;
      swift_retain();
      v64 = v63;
      OSSignpostID.init(log:object:)();
      type metadata accessor for _ContiguousArrayStorage<CVarArg>();
      v65 = swift_allocObject();
      *(_OWORD *)(v65 + 16) = xmmword_235283260;
      result = (_DWORD *)AGGraphGetCurrentAttribute();
      v66 = *MEMORY[0x24BE096C0];
      if ((_DWORD)result == *MEMORY[0x24BE096C0])
        goto LABEL_87;
      v67 = (id)AGGraphGetAttributeGraph();
      v72 = AGGraphGetCounter();

      v68 = MEMORY[0x24BEE1ED8];
      *(_QWORD *)(v65 + 56) = MEMORY[0x24BEE1E88];
      *(_QWORD *)(v65 + 64) = v68;
      *(_QWORD *)(v65 + 32) = v72;
      result = (_DWORD *)AGGraphGetCurrentAttribute();
      if ((_DWORD)result == v66)
        goto LABEL_88;
      v69 = MEMORY[0x24BEE4558];
      *(_QWORD *)(v65 + 96) = MEMORY[0x24BEE44F0];
      *(_QWORD *)(v65 + 104) = v69;
      *(_DWORD *)(v65 + 72) = (_DWORD)result;
      *(_QWORD *)(v65 + 136) = MEMORY[0x24BEE0D00];
      *(_QWORD *)(v65 + 144) = lazy protocol witness table accessor for type String and conformance String();
      *(_QWORD *)(v65 + 112) = 0xD000000000000010;
      *(_QWORD *)(v65 + 120) = 0x80000002352E5EF0;
      Counter = v75;
      os_signpost(_:dso:log:name:signpostID:_:_:)();
      swift_release();
      (*(void (**)(char *, uint64_t))(v76 + 8))(Counter, v73);
      swift_bridgeObjectRelease();
    }
    else
    {
LABEL_78:
      swift_release();
    }
    swift_release();
    *(_QWORD *)(a4 + 32) = v60;
    if (!v60)
    {
LABEL_80:
      __break(1u);
LABEL_81:
      swift_release();
      swift_bridgeObjectRelease();
      v7 = v73;
LABEL_23:
      Counter = v75;
      goto LABEL_44;
    }
LABEL_43:
    swift_retain();
    specialized AnimatorState.addListeners(transaction:)();
    swift_release();
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v7 = v73;
LABEL_44:
    result = (_DWORD *)swift_bridgeObjectRelease();
    *(_QWORD *)(a4 + 16) = v19;
    *(_BYTE *)(a4 + 24) = (_BYTE)v18;
    v14 = *(_QWORD *)(a4 + 32);
    if (!v14)
      return result;
  }
  v26 = v83;
  v27 = v84;
  swift_retain();
  LOBYTE(v81) = 0;
  specialized AnimatorState.combine(newAnimation:newInterval:at:in:environment:)(v74, v26, v27, v10);
  swift_retain();
  v28 = static os_signpost_type_t.event.getter();
  static os_signpost_type_t.event.getter();
  v29 = kdebug_is_enabled();
  Counter = v75;
  if ((v29 & 1) == 0)
    goto LABEL_41;
  if (one-time initialization token for _signpostLog != -1)
    swift_once();
  v30 = (void *)_signpostLog;
  if ((OS_os_log.signpostsEnabled.getter() & 1) == 0)
  {
LABEL_41:
    swift_release_n();
    goto LABEL_42;
  }
  LODWORD(v72) = v28;
  swift_retain();
  v31 = v30;
  OSSignpostID.init(log:object:)();
  type metadata accessor for _ContiguousArrayStorage<CVarArg>();
  v32 = swift_allocObject();
  *(_OWORD *)(v32 + 16) = xmmword_235283260;
  result = (_DWORD *)AGGraphGetCurrentAttribute();
  v33 = *MEMORY[0x24BE096C0];
  if ((_DWORD)result != *MEMORY[0x24BE096C0])
  {
    v34 = (id)AGGraphGetAttributeGraph();
    v71 = AGGraphGetCounter();

    v35 = MEMORY[0x24BEE1ED8];
    *(_QWORD *)(v32 + 56) = MEMORY[0x24BEE1E88];
    *(_QWORD *)(v32 + 64) = v35;
    *(_QWORD *)(v32 + 32) = v71;
    result = (_DWORD *)AGGraphGetCurrentAttribute();
    if ((_DWORD)result == v33)
      goto LABEL_86;
    v36 = MEMORY[0x24BEE4558];
    *(_QWORD *)(v32 + 96) = MEMORY[0x24BEE44F0];
    *(_QWORD *)(v32 + 104) = v36;
    *(_DWORD *)(v32 + 72) = (_DWORD)result;
    *(_QWORD *)(v32 + 136) = MEMORY[0x24BEE0D00];
    *(_QWORD *)(v32 + 144) = lazy protocol witness table accessor for type String and conformance String();
    *(_QWORD *)(v32 + 112) = 0xD000000000000010;
    *(_QWORD *)(v32 + 120) = 0x80000002352E5EF0;
    Counter = v75;
    os_signpost(_:dso:log:name:signpostID:_:_:)();
    swift_release_n();
    (*(void (**)(char *, uint64_t))(v76 + 8))(Counter, v73);
    swift_bridgeObjectRelease();
LABEL_42:
    if (!*(_QWORD *)(a4 + 32))
      goto LABEL_80;
    goto LABEL_43;
  }
  __break(1u);
LABEL_86:
  __break(1u);
LABEL_87:
  __break(1u);
LABEL_88:
  __break(1u);
  return result;
}

unsigned int *specialized AnimatableAttributeHelper.update(value:defaultAnimation:environment:sampleCollector:)(uint64_t *a1, unint64_t a2, int a3, _QWORD *a4)
{
  uint64_t v7;
  uint64_t v8;
  double v9;
  double *Value;
  char v11;
  unsigned int *result;
  unsigned int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  float v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int64_t v32;
  uint64_t v33;
  unsigned __int8 *v34;
  char v35;
  int v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  int8x16_t v40;
  uint64_t v41;
  uint64_t v42;
  unsigned __int8 v43;
  float v44;
  float v45;
  float v46;
  float v47;
  int8x16_t v48;
  int8x16_t v49;
  int8x16_t v50;
  int8x16_t v51;
  int8x16_t v52;
  int8x16_t v53;
  int8x16_t v54;
  int8x16_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  float v72;
  char v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char v79;
  float v80;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v82;
  _QWORD *v83;
  unint64_t v84;
  int64x2_t v85;
  float64x2_t v86;
  double v87;
  float32x2_t v88;
  int8x16_t v89;
  int64x2_t v90;
  float64x2_t v91;
  double v92;
  char v93;
  uint64_t *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t *v97;
  int v98;
  id v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  __int128 v104;
  __int128 v105;
  uint64_t v106;
  void *Counter;
  char v108;
  uint64_t *v109;
  int v110;
  id v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  void *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t *v123;
  uint64_t v124;
  uint64_t v125;
  char v126;
  uint64_t v127;
  uint64_t v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  unsigned __int8 v134;
  int64_t v135;
  uint64_t v136;
  char v137;
  int v138;
  unint64_t v139;
  uint64_t v140;
  int8x16_t v141;
  uint64_t v142;
  unsigned __int8 v143;
  float v144;
  float v145;
  float v146;
  float v147;
  int8x16_t v148;
  int8x16_t v149;
  int8x16_t v150;
  int8x16_t v151;
  int8x16_t v152;
  int8x16_t v153;
  int8x16_t v154;
  int8x16_t v155;
  unint64_t v156;
  unint64_t v157;
  unint64_t v158;
  uint64_t v159;
  void *v160;
  id v161;
  uint64_t v162;
  int CurrentAttribute;
  int v164;
  uint64_t v165;
  int v166;
  uint64_t v167;
  uint64_t v168;
  double v169;
  uint64_t v170;
  unsigned __int8 v171;
  void (*v172)(__int128 *, unint64_t, double);
  void *v173;
  _QWORD *v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  int v181;
  _QWORD *v182;
  uint64_t v183;
  unint64_t v184;
  unint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  char v191;
  int8x16_t v192;
  int64x2_t v193;
  int8x16_t v194;
  char v195;
  uint64_t *v196;
  int8x16_t v197;
  uint64_t v198;
  uint64_t v199;
  float32x2_t v200;
  int32x2_t v201;
  __int32 v202;
  float v203;
  float32x2_t v204;
  float v205;
  float32x2_t v206;
  float32x2_t v207;
  int8x16_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  char v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  int8x16_t v234;
  __int128 v235;
  uint64_t v236;
  uint64_t v237;
  _BYTE *v238;
  __int128 v239;
  uint64_t v240;
  __int128 v241;
  __int128 v242;
  __int128 v243;
  uint64_t *v244;
  __int128 v245;
  _QWORD *v246;
  unint64_t v247;
  int8x16_t v248;
  int8x16_t v249;
  int8x16_t v250;
  int64x2_t v251;
  int8x16_t v252;
  unsigned __int8 v253;
  __int128 v254;
  __int128 v255;
  __int128 v256;
  __int128 v257;
  __int128 v258;
  unsigned __int8 v259;
  int8x16_t v260;
  __int128 v261;
  __int128 v262;
  __int128 v263;
  __int128 v264;
  __int128 v265;
  uint64_t v266;
  int8x16_t v267;
  __int128 v268;
  __int128 v269;
  __int128 v270;
  __int128 v271;
  __int128 v272;
  uint64_t v273;

  LODWORD(v240) = a3;
  v7 = type metadata accessor for OSSignpostID();
  v224 = *(_QWORD *)(v7 - 8);
  v225 = v7;
  MEMORY[0x24BDAC7A8](v7);
  v236 = (uint64_t)&v215 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for infinity == -1)
    goto LABEL_2;
  while (1)
  {
    swift_once();
LABEL_2:
    v9 = -*(double *)&static Time.infinity;
    if (a4[15])
    {
      Value = (double *)AGGraphGetValue();
      if ((v11 & 1) != 0)
        v9 = *Value;
    }
    result = (unsigned int *)AGGraphGetValue();
    v13 = *result;
    v14 = *((_DWORD *)a4 + 32);
    v244 = a1;
    v246 = a4;
    if (v14 == v13 >> 1)
    {
      v238 = a1 + 14;
      if (*((_BYTE *)a1 + 112) != 1)
      {
        while (1)
        {
          v247 = a4[15];
          if (!v247)
            return result;
          v118 = a1[1];
          v251.i64[0] = *a1;
          v250.i64[0] = v118;
          Counter = (void *)a1[2];
          v119 = (void *)a1[3];
          v120 = a1[4];
          v121 = a1[5];
          v59 = a1[6];
          v122 = a1[7];
          v123 = a1;
          v125 = a1[8];
          v124 = a1[9];
          v126 = *((_BYTE *)v123 + 80);
          v26 = *((float *)v123 + 21);
          v252.i64[0] = v123[13];
          v260.i64[0] = v251.i64[0];
          v260.i64[1] = v118;
          *(_QWORD *)&v261 = Counter;
          *((_QWORD *)&v261 + 1) = v119;
          *(_QWORD *)&v262 = v120;
          *((_QWORD *)&v262 + 1) = v121;
          *(_QWORD *)&v263 = v59;
          *((_QWORD *)&v263 + 1) = v122;
          *(_QWORD *)&v264 = v125;
          *((_QWORD *)&v264 + 1) = v124;
          LOBYTE(v265) = v126;
          swift_retain();
          v127 = v122;
          v128 = v252.i64[0];
          outlined copy of _ShapeStyle_Pack.Fill((id)v251.i64[0], v250.i64[0], Counter, v119, v120, v121, v59, v127, v125, v124, v126);
          _ShapeStyle_Pack.Fill.AnimatableData.init(_:)((uint64_t)&v260);
          v129 = v254;
          v130 = v255;
          v131 = v256;
          v132 = v257;
          v133 = v258;
          v134 = v259;
          v135 = *(_QWORD *)(v128 + 16);
          v136 = MEMORY[0x24BEE4AF8];
          if (v135)
          {
            LODWORD(v237) = v259;
            v239 = v258;
            v241 = v257;
            v242 = v256;
            v243 = v255;
            v245 = v254;
            v260.i64[0] = MEMORY[0x24BEE4AF8];
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v135, 0);
            v59 = v128 + 96;
            v136 = v260.i64[0];
            do
            {
              v137 = *(_BYTE *)(v59 - 19);
              v138 = *(_DWORD *)(v59 - 16);
              if ((v137 & 1) != 0)
              {
                v139 = 0;
                Counter = 0;
                v140 = 0;
                v141 = 0uLL;
              }
              else
              {
                v252 = *(int8x16_t *)(v59 - 48);
                v251.i64[0] = *(_QWORD *)(v59 - 32);
                v142 = *(_QWORD *)(v59 - 8);
                v143 = *(_BYTE *)v59;
                v145 = *(float *)(v59 - 64);
                v144 = *(float *)(v59 - 60);
                v146 = *(float *)(v59 - 56);
                v147 = *(float *)(v59 - 52);
                outlined copy of GraphicsBlendMode?(v142, *(_BYTE *)v59);
                if (one-time initialization token for legacyInterpolation != -1)
                  swift_once();
                swift_beginAccess();
                if ((static Color.Resolved.legacyInterpolation & 1) != 0)
                {
                  outlined consume of GraphicsBlendMode?(v142, v143);
                }
                else
                {
                  *(float *)v149.i32 = (float)(v146 * 0.051446)
                                     + (float)((float)(v145 * 0.41222) + (float)(v144 * 0.53633));
                  *(float *)v148.i32 = (float)(v146 * 0.1074) + (float)((float)(v145 * 0.2119) + (float)(v144 * 0.6807));
                  v248 = v149;
                  v249 = v148;
                  *(float *)v148.i32 = (float)(v146 * 0.62998)
                                     + (float)((float)(v145 * 0.088302) + (float)(v144 * 0.28172));
                  v250 = v148;
                  *(float *)v150.i32 = powf(fabsf(*(float *)v149.i32), 0.33333);
                  v151.i64[0] = 0x8000000080000000;
                  v151.i64[1] = 0x8000000080000000;
                  v248 = vbslq_s8(v151, v150, v248);
                  *(float *)v152.i32 = powf(fabsf(*(float *)v249.i32), 0.33333);
                  v153.i64[0] = 0x8000000080000000;
                  v153.i64[1] = 0x8000000080000000;
                  v249 = vbslq_s8(v153, v152, v249);
                  *(float *)v154.i32 = powf(fabsf(*(float *)v250.i32), 0.33333);
                  v155.i64[0] = 0x8000000080000000;
                  v155.i64[1] = 0x8000000080000000;
                  v250 = vbslq_s8(v155, v154, v250);
                  outlined consume of GraphicsBlendMode?(v142, v143);
                  v145 = *(float *)v248.i32 * v147;
                  v144 = *(float *)v249.i32 * v147;
                  v146 = *(float *)v250.i32 * v147;
                }
                v139 = COERCE_UNSIGNED_INT(v145 * 128.0) | ((unint64_t)COERCE_UNSIGNED_INT(v144 * 128.0) << 32);
                Counter = (void *)(COERCE_UNSIGNED_INT(v146 * 128.0) | ((unint64_t)COERCE_UNSIGNED_INT(v147 * 128.0) << 32));
                v140 = v251.i64[0];
                v141 = v252;
              }
              v260.i64[0] = v136;
              v157 = *(_QWORD *)(v136 + 16);
              v156 = *(_QWORD *)(v136 + 24);
              if (v157 >= v156 >> 1)
              {
                v159 = v140;
                v252 = v141;
                specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v156 > 1, v157 + 1, 1);
                v141 = v252;
                v140 = v159;
                v136 = v260.i64[0];
              }
              *(_QWORD *)(v136 + 16) = v157 + 1;
              v158 = v136 + 56 * v157;
              *(_DWORD *)(v158 + 32) = v138;
              v59 += 72;
              *(_QWORD *)(v158 + 40) = v139;
              *(_QWORD *)(v158 + 48) = Counter;
              *(int8x16_t *)(v158 + 56) = v141;
              *(_QWORD *)(v158 + 72) = v140;
              *(_BYTE *)(v158 + 80) = v137;
              --v135;
            }
            while (v135);
            v129 = v245;
            v131 = v242;
            v130 = v243;
            v132 = v241;
            v133 = v239;
            v134 = v237;
          }
          v260 = (int8x16_t)v129;
          v261 = v130;
          v262 = v131;
          v263 = v132;
          v264 = v133;
          LOBYTE(v265) = v134;
          *((float *)&v265 + 2) = v26;
          v266 = v136;
          LOBYTE(v254) = 0;
          if ((specialized AnimatorState.update(_:at:environment:)((uint64_t)&v260, v9) & 1) == 0)
          {
            if (one-time initialization token for shared != -1)
              swift_once();
            swift_beginAccess();
            v169 = *(double *)(v247 + 144);
            *(_QWORD *)&v254 = *(_QWORD *)(v247 + 152);
            v170 = *(unsigned int *)(v247 + 264);
            v171 = *(_BYTE *)(v247 + 268);
            v172 = *(void (**)(__int128 *, unint64_t, double))((*MEMORY[0x24BEE4EA0] & *(_QWORD *)static CoreGlue.shared)
                                                                               + 0x58);
            v173 = static CoreGlue.shared;
            v253 = v171;
            v172(&v254, v170 | ((unint64_t)v171 << 32), v169);

            goto LABEL_104;
          }
          swift_retain();
          static os_signpost_type_t.end.getter();
          static os_signpost_type_t.event.getter();
          if ((kdebug_is_enabled() & 1) == 0)
            break;
          if (one-time initialization token for _signpostLog != -1)
            swift_once();
          v160 = (void *)_signpostLog;
          if ((OS_os_log.signpostsEnabled.getter() & 1) == 0)
            break;
          a2 = v247;
          swift_retain();
          v161 = v160;
          OSSignpostID.init(log:object:)();
          type metadata accessor for _ContiguousArrayStorage<CVarArg>();
          v162 = swift_allocObject();
          *(_OWORD *)(v162 + 16) = xmmword_235283260;
          CurrentAttribute = AGGraphGetCurrentAttribute();
          v164 = *MEMORY[0x24BE096C0];
          if (CurrentAttribute == *MEMORY[0x24BE096C0])
          {
            __break(1u);
          }
          else
          {
            a2 = (unint64_t)(id)AGGraphGetAttributeGraph();
            Counter = (void *)AGGraphGetCounter();

            v165 = MEMORY[0x24BEE1ED8];
            *(_QWORD *)(v162 + 56) = MEMORY[0x24BEE1E88];
            *(_QWORD *)(v162 + 64) = v165;
            *(_QWORD *)(v162 + 32) = Counter;
            v166 = AGGraphGetCurrentAttribute();
            if (v166 != v164)
            {
              v167 = MEMORY[0x24BEE4558];
              *(_QWORD *)(v162 + 96) = MEMORY[0x24BEE44F0];
              *(_QWORD *)(v162 + 104) = v167;
              *(_DWORD *)(v162 + 72) = v166;
              *(_QWORD *)(v162 + 136) = MEMORY[0x24BEE0D00];
              *(_QWORD *)(v162 + 144) = lazy protocol witness table accessor for type String and conformance String();
              *(_QWORD *)(v162 + 112) = 0x656C797453;
              *(_QWORD *)(v162 + 120) = 0xE500000000000000;
              v168 = v236;
              os_signpost(_:dso:log:name:signpostID:_:_:)();
              swift_release();
              (*(void (**)(uint64_t, uint64_t))(v224 + 8))(v168, v225);
              swift_bridgeObjectRelease();
              goto LABEL_101;
            }
          }
          __break(1u);
LABEL_138:
          swift_once();
LABEL_63:
          a1 = (uint64_t *)_signpostLog;
          v108 = OS_os_log.signpostsEnabled.getter();
          a4 = v246;
          v67 = v222;
          if ((v108 & 1) != 0)
          {
            swift_retain();
            v109 = a1;
            OSSignpostID.init(log:object:)();
            type metadata accessor for _ContiguousArrayStorage<CVarArg>();
            a1 = (uint64_t *)swift_allocObject();
            *((_OWORD *)a1 + 1) = xmmword_235283260;
            result = (unsigned int *)AGGraphGetCurrentAttribute();
            v110 = *MEMORY[0x24BE096C0];
            if ((_DWORD)result == *MEMORY[0x24BE096C0])
              goto LABEL_141;
            v111 = (id)AGGraphGetAttributeGraph();
            a2 = AGGraphGetCounter();

            v112 = MEMORY[0x24BEE1ED8];
            a1[7] = MEMORY[0x24BEE1E88];
            a1[8] = v112;
            a1[4] = a2;
            result = (unsigned int *)AGGraphGetCurrentAttribute();
            if ((_DWORD)result == v110)
              goto LABEL_142;
            v113 = MEMORY[0x24BEE4558];
            a1[12] = MEMORY[0x24BEE44F0];
            a1[13] = v113;
            *((_DWORD *)a1 + 18) = (_DWORD)result;
            a1[17] = MEMORY[0x24BEE0D00];
            a1[18] = lazy protocol witness table accessor for type String and conformance String();
            a1[14] = 0x656C797453;
            a1[15] = 0xE500000000000000;
            v114 = v236;
            os_signpost(_:dso:log:name:signpostID:_:_:)();
            swift_release();
            (*(void (**)(uint64_t, uint64_t))(v224 + 8))(v114, v225);
            swift_bridgeObjectRelease();
            a4 = v246;
          }
          else
          {
            swift_release();
          }
LABEL_130:
          swift_release();
          a4[15] = Counter;
          v28 = v227;
          v31 = v228;
          v29 = v226;
          if (!Counter)
            goto LABEL_131;
LABEL_72:
          swift_retain();
          specialized AnimatorState.addListeners(transaction:)();
          swift_release();
          swift_release();
          swift_release();
          outlined consume of _ShapeStyle_Pack.Fill.AnimatableData(v260.i64[0], v260.i64[1], v261, *((uint64_t *)&v261 + 1), v262, *((uint64_t *)&v262 + 1), v263, *((uint64_t *)&v263 + 1), v264, *((uint64_t *)&v264 + 1), v265);
          swift_bridgeObjectRelease();
          outlined consume of AnimatablePair<_ShapeStyle_Pack.Fill.AnimatableData, AnimatablePair<Float, AnimatableArray<AnimatablePair<Float, _ShapeStyle_Pack.Effect.Kind.AnimatableData>>>>?(v234.i64[0], v234.i64[1], v235, *((uint64_t *)&v235 + 1), v249.i64[0], v250.i64[0], v251.i64[0], v67, v233, v232, v231, v230, v59);
          a1 = v244;
          v30 = v237;
          a2 = v239;
LABEL_73:
          result = (unsigned int *)outlined consume of AnimatablePair<_ShapeStyle_Pack.Fill.AnimatableData, AnimatablePair<Float, AnimatableArray<AnimatablePair<Float, _ShapeStyle_Pack.Effect.Kind.AnimatableData>>>>?(a4[2], a4[3], a4[4], a4[5], a4[6], a4[7], a4[8], a4[9], a4[10], a4[11], *((_OWORD *)a4 + 6), a4[13], a4[14]);
          a4[2] = v28;
          a4[3] = v29;
          a4[4] = v30;
          a4[5] = a2;
          v115 = v247;
          a4[6] = v248.i64[0];
          a4[7] = v115;
          v116 = v243;
          a4[8] = v245;
          a4[9] = v116;
          v117 = v241;
          a4[10] = v242;
          a4[11] = v117;
          a4[12] = v31;
          a4[13] = LODWORD(v26);
          a4[14] = v252.i64[0];
        }
        swift_release();
LABEL_101:
        v174 = v246;
        if (v246[15])
        {
          specialized AnimatorState.removeListeners()();
          swift_release();
        }
        v174[15] = 0;
LABEL_104:
        v175 = *((_QWORD *)&v261 + 1);
        v177 = *((_QWORD *)&v262 + 1);
        v176 = v262;
        v179 = *((_QWORD *)&v263 + 1);
        v178 = v263;
        v180 = v264;
        v181 = DWORD2(v265);
        v182 = (_QWORD *)v266;
        v254 = (__int128)v260;
        v255 = v261;
        v256 = v262;
        v257 = v263;
        v258 = v264;
        v259 = v265;
        LODWORD(v241) = v265;
        *(_QWORD *)&v239 = *((_QWORD *)&v264 + 1);
        *(_QWORD *)&v242 = v260.i64[1];
        *(_QWORD *)&v243 = v260.i64[0];
        v240 = v261;
        outlined copy of _ShapeStyle_Pack.Fill.AnimatableData(v260.i64[0], v260.i64[1], v261, *((uint64_t *)&v261 + 1), v262, *((uint64_t *)&v262 + 1), v263, *((uint64_t *)&v263 + 1), v264, *((uint64_t *)&v264 + 1), v265);
        swift_bridgeObjectRetain();
        v183 = (uint64_t)v244;
        _ShapeStyle_Pack.Fill.AnimatableData.set(fill:)((uint64_t)v244);
        *(_DWORD *)(v183 + 84) = v181;
        a1 = *(uint64_t **)(v183 + 104);
        a4 = v182;
        v184 = a1[2];
        v185 = v182[2];
        if (v185 < v184)
          v184 = v185;
        if (!v184)
        {
          v209 = v239;
          v214 = v240;
          outlined consume of _ShapeStyle_Pack.Fill.AnimatableData(v243, v242, v240, v175, v176, v177, v178, v179, v180, v239, v241);
          swift_release();
          swift_bridgeObjectRelease();
          v213 = v241;
          v212 = v243;
          v211 = v242;
          v210 = v214;
LABEL_126:
          outlined consume of _ShapeStyle_Pack.Fill.AnimatableData(v212, v211, v210, v175, v176, v177, v178, v179, v180, v209, v213);
          result = (unsigned int *)swift_bridgeObjectRelease();
          *v238 = 1;
          return result;
        }
        v248.i64[0] = v184;
        v234.i64[0] = v180;
        v234.i64[1] = v179;
        *(_QWORD *)&v235 = v178;
        *((_QWORD *)&v235 + 1) = v177;
        v236 = v176;
        v237 = v175;
        swift_bridgeObjectRetain();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          a1 = specialized _ArrayBuffer._consumeAndCreateNew()(a1);
        v186 = 0;
        v187 = 0;
        a2 = 0;
        v188 = v248.i64[0];
        v246 = a4;
        *(_QWORD *)&v245 = v185;
        while (v185 != a2)
        {
          if (a2 >= a1[2])
            goto LABEL_133;
          v193 = *(int64x2_t *)&a4[v187 + 5];
          v194 = *(int8x16_t *)&a4[v187 + 7];
          v189 = a4[v187 + 9];
          v195 = a4[v187 + 10];
          v196 = &a1[v186];
          LODWORD(a1[v186 + 10]) = a4[v187 + 4];
          v197 = 0uLL;
          if ((a1[v186 + 9] & 0x10000000000) != 0 || (v195 & 1) != 0)
          {
            v189 = 0;
            v190 = 0;
            v191 = 1;
            v192 = 0uLL;
          }
          else
          {
            v252 = v194;
            v198 = *((unsigned __int8 *)v196 + 76);
            v199 = *((unsigned int *)v196 + 18);
            if (one-time initialization token for legacyInterpolation != -1)
            {
              v251 = v193;
              swift_once();
              v193 = v251;
            }
            *(float *)v194.i32 = *(float *)&v193.i32[1] * 0.0078125;
            *(float32x2_t *)v197.i8 = vmul_f32((float32x2_t)vmovn_s64(v193), (float32x2_t)0x3C0000003C000000);
            v251 = (int64x2_t)v197;
            *(float *)v197.i32 = *(float *)&v193.i32[3] * 0.0078125;
            v249 = v194;
            v250 = v197;
            swift_beginAccess();
            if ((static Color.Resolved.legacyInterpolation & 1) != 0)
            {
              v188 = v248.i64[0];
              v200 = *(float32x2_t *)v251.i8;
              v192 = v252;
              v201.i32[0] = v249.i32[0];
              v202 = v250.i32[0];
            }
            else
            {
              v202 = v250.i32[0];
              v203 = *(float *)v251.i32;
              v204 = (float32x2_t)__PAIR64__(v251.u32[1], v249.u32[0]);
              v188 = v248.i64[0];
              if (*(float *)v250.i32 != 0.0)
              {
                v203 = *(float *)v251.i32 * (float)(1.0 / *(float *)v250.i32);
                v204 = vmul_n_f32((float32x2_t)__PAIR64__(v251.u32[1], v249.u32[0]), 1.0 / *(float *)v250.i32);
              }
              v205 = v203 * (float)(v203 * v203);
              v206 = vmul_f32(v204, vmul_f32(v204, v204));
              v207 = vmul_f32(v206, (float32x2_t)0x3EAEC16A40270644);
              *(float *)v201.i32 = (float)(v207.f32[0] + (float)(v205 * -1.2684)) - v207.f32[1];
              v200 = vadd_f32(vmul_lane_f32((float32x2_t)0x3FDA931E3E6C8362, v206, 1), vadd_f32(vmul_n_f32((float32x2_t)0xBB897F53408274ABLL, v205), vmul_n_f32((float32x2_t)0xBF34133EC053B18CLL, v206.f32[0])));
              v192 = v252;
            }
            v191 = 0;
            v190 = v199 | (v198 << 32);
            v201.i32[1] = v202;
            v208.i64[0] = v200.u32[0];
            v208.i64[1] = v200.u32[1];
            v197 = vorrq_s8((int8x16_t)vshll_n_s32(v201, 0x20uLL), v208);
            a4 = v246;
            v185 = v245;
          }
          ++a2;
          *((int8x16_t *)v196 + 2) = v197;
          *((int8x16_t *)v196 + 3) = v192;
          v196[8] = v189;
          *((_DWORD *)v196 + 18) = v190;
          *((_BYTE *)v196 + 76) = BYTE4(v190);
          v187 += 7;
          v186 += 9;
          *((_BYTE *)v196 + 77) = v191;
          if (v188 == a2)
          {
            swift_bridgeObjectRelease();
            v209 = v239;
            v180 = v234.i64[0];
            v176 = v236;
            v175 = v237;
            v177 = *((_QWORD *)&v235 + 1);
            v178 = v235;
            v179 = v234.i64[1];
            outlined consume of _ShapeStyle_Pack.Fill.AnimatableData(v243, v242, v240, v237, v236, *((uint64_t *)&v235 + 1), v235, v234.i64[1], v234.i64[0], v239, v241);
            swift_release();
            swift_bridgeObjectRelease();
            v244[13] = (uint64_t)a1;
            v210 = v240;
            v211 = v242;
            v212 = v243;
            v213 = v241;
            goto LABEL_126;
          }
        }
        goto LABEL_132;
      }
    }
    else
    {
      specialized AnimatableAttributeHelper.reset()();
      a1 = v244;
      v15 = (uint64_t)v244;
      *((_BYTE *)v244 + 112) = 1;
      v238 = (_BYTE *)(v15 + 112);
    }
    v222 = a2;
    v16 = a1[1];
    v17 = (void *)a1[2];
    v18 = (void *)a1[3];
    v19 = a1[4];
    v20 = a1[5];
    v21 = a1[6];
    v22 = a1[7];
    v23 = a1[8];
    v24 = a1[9];
    v25 = *((_BYTE *)a1 + 80);
    v26 = *((float *)a1 + 21);
    v27 = a1[13];
    v260.i64[0] = *a1;
    v260.i64[1] = v16;
    *(_QWORD *)&v261 = v17;
    *((_QWORD *)&v261 + 1) = v18;
    *(_QWORD *)&v262 = v19;
    *((_QWORD *)&v262 + 1) = v20;
    *(_QWORD *)&v263 = v21;
    *((_QWORD *)&v263 + 1) = v22;
    *(_QWORD *)&v264 = v23;
    *((_QWORD *)&v264 + 1) = v24;
    LOBYTE(v265) = v25;
    outlined copy of _ShapeStyle_Pack.Fill((id)v260.i64[0], v16, v17, v18, v19, v20, v21, v22, v23, v24, v25);
    _ShapeStyle_Pack.Fill.AnimatableData.init(_:)((uint64_t)&v260);
    v29 = v267.i64[1];
    v28 = v267.i64[0];
    *(_QWORD *)&v239 = *((_QWORD *)&v268 + 1);
    v30 = v268;
    v247 = *((_QWORD *)&v269 + 1);
    v248.i64[0] = v269;
    *(_QWORD *)&v243 = *((_QWORD *)&v270 + 1);
    *(_QWORD *)&v245 = v270;
    *(_QWORD *)&v241 = *((_QWORD *)&v271 + 1);
    *(_QWORD *)&v242 = v271;
    v31 = v272;
    v32 = *(_QWORD *)(v27 + 16);
    v33 = MEMORY[0x24BEE4AF8];
    v237 = v268;
    if (v32)
    {
      v226 = v267.i64[1];
      v227 = v267.i64[0];
      v228 = v272;
      v260.i64[0] = MEMORY[0x24BEE4AF8];
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v32, 0);
      v34 = (unsigned __int8 *)(v27 + 96);
      v33 = v260.i64[0];
      do
      {
        v35 = *(v34 - 19);
        v36 = *((_DWORD *)v34 - 4);
        if ((v35 & 1) != 0)
        {
          v37 = 0;
          v38 = 0;
          v39 = 0;
          v40 = 0uLL;
        }
        else
        {
          v41 = v33;
          v252 = *((int8x16_t *)v34 - 3);
          v39 = *((_QWORD *)v34 - 4);
          v42 = *((_QWORD *)v34 - 1);
          v43 = *v34;
          v45 = *((float *)v34 - 16);
          v44 = *((float *)v34 - 15);
          v46 = *((float *)v34 - 14);
          v47 = *((float *)v34 - 13);
          outlined copy of GraphicsBlendMode?(v42, *v34);
          if (one-time initialization token for legacyInterpolation != -1)
            swift_once();
          swift_beginAccess();
          if ((static Color.Resolved.legacyInterpolation & 1) != 0)
          {
            outlined consume of GraphicsBlendMode?(v42, v43);
          }
          else
          {
            *(float *)v49.i32 = (float)(v46 * 0.051446) + (float)((float)(v45 * 0.41222) + (float)(v44 * 0.53633));
            *(float *)v48.i32 = (float)(v46 * 0.1074) + (float)((float)(v45 * 0.2119) + (float)(v44 * 0.6807));
            v249 = v49;
            v250 = v48;
            *(float *)v48.i32 = (float)(v46 * 0.62998) + (float)((float)(v45 * 0.088302) + (float)(v44 * 0.28172));
            v251 = (int64x2_t)v48;
            *(float *)v50.i32 = powf(fabsf(*(float *)v49.i32), 0.33333);
            v51.i64[0] = 0x8000000080000000;
            v51.i64[1] = 0x8000000080000000;
            v249 = vbslq_s8(v51, v50, v249);
            *(float *)v52.i32 = powf(fabsf(*(float *)v250.i32), 0.33333);
            v53.i64[0] = 0x8000000080000000;
            v53.i64[1] = 0x8000000080000000;
            v250 = vbslq_s8(v53, v52, v250);
            *(float *)v54.i32 = powf(fabsf(*(float *)v251.i32), 0.33333);
            v55.i64[0] = 0x8000000080000000;
            v55.i64[1] = 0x8000000080000000;
            v251 = (int64x2_t)vbslq_s8(v55, v54, (int8x16_t)v251);
            outlined consume of GraphicsBlendMode?(v42, v43);
            v45 = *(float *)v249.i32 * v47;
            v44 = *(float *)v250.i32 * v47;
            v46 = *(float *)v251.i32 * v47;
          }
          v37 = COERCE_UNSIGNED_INT(v45 * 128.0) | ((unint64_t)COERCE_UNSIGNED_INT(v44 * 128.0) << 32);
          v38 = COERCE_UNSIGNED_INT(v46 * 128.0) | ((unint64_t)COERCE_UNSIGNED_INT(v47 * 128.0) << 32);
          v33 = v41;
          v40 = v252;
        }
        v260.i64[0] = v33;
        v57 = *(_QWORD *)(v33 + 16);
        v56 = *(_QWORD *)(v33 + 24);
        if (v57 >= v56 >> 1)
        {
          v252 = v40;
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v56 > 1, v57 + 1, 1);
          v40 = v252;
          v33 = v260.i64[0];
        }
        *(_QWORD *)(v33 + 16) = v57 + 1;
        v58 = v33 + 56 * v57;
        *(_DWORD *)(v58 + 32) = v36;
        v34 += 72;
        *(_QWORD *)(v58 + 40) = v37;
        *(_QWORD *)(v58 + 48) = v38;
        *(int8x16_t *)(v58 + 56) = v40;
        *(_QWORD *)(v58 + 72) = v39;
        *(_BYTE *)(v58 + 80) = v35;
        --v32;
      }
      while (v32);
      a1 = v244;
      v28 = v227;
      v31 = v228;
      v29 = v226;
      v30 = v237;
    }
    a4 = v246;
    v59 = v246[14];
    a2 = v239;
    v252.i64[0] = v33;
    if (!v59)
      goto LABEL_73;
    v60 = v246[2];
    v61 = v246[3];
    v62 = v246[4];
    v63 = v246[5];
    v64 = v246[6];
    v65 = v246[7];
    v66 = v246[8];
    v67 = v246[9];
    v68 = v246[10];
    v69 = v246[11];
    v70 = v246[12];
    v71 = v246[13];
    v72 = *(float *)&v71;
    v267.i64[0] = v28;
    v267.i64[1] = v29;
    *(_QWORD *)&v268 = v30;
    *((_QWORD *)&v268 + 1) = v239;
    *(_QWORD *)&v269 = v248.i64[0];
    *((_QWORD *)&v269 + 1) = v247;
    *(_QWORD *)&v270 = v245;
    *((_QWORD *)&v270 + 1) = v243;
    *(_QWORD *)&v271 = v242;
    *((_QWORD *)&v271 + 1) = v241;
    LOBYTE(v272) = v31;
    *((float *)&v272 + 2) = v26;
    v273 = v33;
    v260.i64[0] = v60;
    v260.i64[1] = v61;
    *(_QWORD *)&v261 = v62;
    *((_QWORD *)&v261 + 1) = v63;
    *(_QWORD *)&v262 = v64;
    *((_QWORD *)&v262 + 1) = v65;
    *(_QWORD *)&v263 = v66;
    *((_QWORD *)&v263 + 1) = v67;
    *(_QWORD *)&v264 = v68;
    *((_QWORD *)&v264 + 1) = v69;
    LOBYTE(v265) = v70;
    DWORD2(v265) = v71;
    v266 = v59;
    v230 = v71;
    v231 = v70;
    v232 = v69;
    v233 = v68;
    v234.i64[0] = v60;
    v234.i64[1] = v61;
    *(_QWORD *)&v235 = v62;
    *((_QWORD *)&v235 + 1) = v63;
    v249.i64[0] = v64;
    v250.i64[0] = v65;
    v251.i64[0] = v66;
    outlined copy of AnimatablePair<_ShapeStyle_Pack.Fill.AnimatableData, AnimatablePair<Float, AnimatableArray<AnimatablePair<Float, _ShapeStyle_Pack.Effect.Kind.AnimatableData>>>>?(v60, v61, v62, v63, v64, v65, v66, v67, v68, v69, v70, v71, v59);
    specialized static _ShapeStyle_Pack.Fill.AnimatableData.== infix(_:_:)((uint64_t)&v267);
    if ((v73 & 1) != 0 && v26 == v72 && (specialized static Array<A>.== infix(_:_:)(v252.i64[0], v59) & 1) != 0)
    {
      outlined consume of AnimatablePair<_ShapeStyle_Pack.Fill.AnimatableData, AnimatablePair<Float, AnimatableArray<AnimatablePair<Float, _ShapeStyle_Pack.Effect.Kind.AnimatableData>>>>?(v234.i64[0], v234.i64[1], v235, *((uint64_t *)&v235 + 1), v249.i64[0], v250.i64[0], v251.i64[0], v67, v233, v232, v231, v230, v59);
      goto LABEL_73;
    }
    AGGraphClearUpdate();
    v74 = *(_QWORD *)AGGraphGetValue();
    swift_retain();
    AGGraphSetUpdate();
    v75 = swift_retain();
    v76 = specialized find<A>(_:key:)(v75);
    v229 = v74;
    if (v76)
    {
      v77 = *(_QWORD *)(v76 + 72);
      swift_retain();
      swift_release();
      v223 = v77;
      if (v77)
        goto LABEL_38;
    }
    else
    {
      swift_release();
    }
    v78 = swift_retain();
    v79 = specialized closure #1 in PropertyList.subscript.getter(v78);
    swift_release();
    if ((v79 & 1) != 0)
    {
      if (one-time initialization token for velocityTracking != -1)
        swift_once();
      v223 = static Animation.velocityTracking;
      swift_retain();
    }
    else
    {
      if (!v222)
      {
        outlined consume of AnimatablePair<_ShapeStyle_Pack.Fill.AnimatableData, AnimatablePair<Float, AnimatableArray<AnimatablePair<Float, _ShapeStyle_Pack.Effect.Kind.AnimatableData>>>>?(v234.i64[0], v234.i64[1], v235, *((uint64_t *)&v235 + 1), v249.i64[0], v250.i64[0], v251.i64[0], v67, v233, v232, v231, v230, v59);
        swift_release();
        a1 = v244;
        a4 = v246;
        goto LABEL_73;
      }
      v223 = swift_retain();
    }
LABEL_38:
    v260.i64[0] = v28;
    v260.i64[1] = v29;
    *(_QWORD *)&v261 = v30;
    *((_QWORD *)&v261 + 1) = a2;
    *(_QWORD *)&v262 = v248.i64[0];
    *((_QWORD *)&v262 + 1) = v247;
    *(_QWORD *)&v263 = v245;
    *((_QWORD *)&v263 + 1) = v243;
    *(_QWORD *)&v264 = v242;
    *((_QWORD *)&v264 + 1) = v241;
    LOBYTE(v265) = v31;
    *((float *)&v265 + 2) = v26;
    a1 = (uint64_t *)v252.i64[0];
    v266 = v252.i64[0];
    v267 = v234;
    v268 = v235;
    *(_QWORD *)&v269 = v249.i64[0];
    *((_QWORD *)&v269 + 1) = v250.i64[0];
    *(_QWORD *)&v270 = v251.i64[0];
    *((_QWORD *)&v270 + 1) = v67;
    *(_QWORD *)&v271 = v233;
    *((_QWORD *)&v271 + 1) = v232;
    LOBYTE(v272) = v231;
    DWORD2(v272) = v230;
    v273 = v59;
    outlined copy of _ShapeStyle_Pack.Fill.AnimatableData(v28, v29, v30, a2, v248.i64[0], v247, v245, v243, v242, v241, v31);
    swift_bridgeObjectRetain();
    specialized static _ShapeStyle_Pack.Fill.AnimatableData.-= infix(_:_:)((__int128 *)v260.i8, &v267);
    v80 = v26 - v72;
    *((float *)&v265 + 2) = v80;
    a4 = *(_QWORD *)(v59 + 16) >= (unint64_t)a1[2] ? (_QWORD *)a1[2] : *(_QWORD **)(v59 + 16);
    if (!a4)
      break;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    a1 = (uint64_t *)v252.i64[0];
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      a1 = specialized _ArrayBuffer._consumeAndCreateNew()(v252.i64[0]);
    v82 = 0;
    v83 = 0;
    v84 = a1[2];
    while ((unint64_t)v83 < v84)
    {
      v90 = *(int64x2_t *)(v59 + v82 + 40);
      v91 = *(float64x2_t *)(v59 + v82 + 56);
      v92 = *(double *)(v59 + v82 + 72);
      v93 = *(_BYTE *)(v59 + v82 + 80);
      v94 = &a1[v82 / 8];
      *(float *)&a1[v82 / 8 + 4] = *(float *)&a1[v82 / 8 + 4] - *(float *)(v59 + v82 + 32);
      if ((v93 & 1) == 0)
      {
        if ((v94[10] & 1) != 0)
        {
          v94[5] = v90.i64[0];
          *((int8x16_t *)v94 + 3) = vextq_s8((int8x16_t)v90, (int8x16_t)v91, 8uLL);
          v94[8] = *(_QWORD *)&v91.f64[1];
          v87 = v92;
        }
        else
        {
          v85 = *(int64x2_t *)(v94 + 5);
          v86 = *(float64x2_t *)(v94 + 7);
          v87 = *((double *)v94 + 9) - v92;
          v88 = vsub_f32((float32x2_t)vmovn_s64(v85), (float32x2_t)vmovn_s64(v90));
          v89.i64[0] = v88.u32[0];
          v89.i64[1] = v88.u32[1];
          *(int8x16_t *)(v94 + 5) = vorrq_s8((int8x16_t)vshll_n_s32((int32x2_t)vsub_f32((float32x2_t)vshrn_n_s64(v85, 0x20uLL), (float32x2_t)vshrn_n_s64(v90, 0x20uLL)), 0x20uLL), v89);
          *(float64x2_t *)(v94 + 7) = vsubq_f64(v86, v91);
        }
        *((double *)v94 + 9) = v87;
        *((_BYTE *)v94 + 80) = 0;
      }
      v83 = (_QWORD *)((char *)v83 + 1);
      v82 += 56;
      if (a4 == v83)
      {
        v266 = (uint64_t)a1;
        goto LABEL_53;
      }
    }
LABEL_134:
    __break(1u);
  }
LABEL_53:
  a4 = v246;
  v9 = *(double *)AGGraphGetValue();
  if (!a4[15])
  {
    v222 = v67;
    v226 = v29;
    v227 = v28;
    v228 = v31;
    v103 = v260.i64[0];
    v104 = v261;
    v220 = *((_QWORD *)&v262 + 1);
    v221 = v262;
    v219 = v263;
    v217 = v260.i64[1];
    v218 = *((_QWORD *)&v263 + 1);
    v105 = v264;
    a2 = v265;
    v267 = v260;
    v268 = v261;
    v269 = v262;
    v270 = v263;
    v271 = v264;
    LOBYTE(v272) = v265;
    *((float *)&v272 + 2) = v80;
    v273 = (uint64_t)a1;
    type metadata accessor for CombinedAnimationState<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>>.Entry(0, &lazy cache variable for type metadata for AnimatorState<AnimatablePair<_ShapeStyle_Pack.Fill.AnimatableData, AnimatablePair<Float, AnimatableArray<AnimatablePair<Float, _ShapeStyle_Pack.Effect.Kind.AnimatableData>>>>>, (uint64_t (*)(uint64_t))type metadata accessor for AnimatablePair<_ShapeStyle_Pack.Fill.AnimatableData, AnimatablePair<Float, AnimatableArray<AnimatablePair<Float, _ShapeStyle_Pack.Effect.Kind.AnimatableData>>>>, lazy protocol witness table accessor for type AnimatablePair<_ShapeStyle_Pack.Fill.AnimatableData, AnimatablePair<Float, AnimatableArray<AnimatablePair<Float, _ShapeStyle_Pack.Effect.Kind.AnimatableData>>>> and conformance AnimatablePair<A, B>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatorState);
    v216 = swift_allocObject();
    swift_retain();
    outlined copy of _ShapeStyle_Pack.Fill.AnimatableData(v103, v217, v104, *((uint64_t *)&v104 + 1), v221, v220, v219, v218, v105, *((uint64_t *)&v105 + 1), a2);
    swift_bridgeObjectRetain();
    v106 = swift_retain();
    a1 = (uint64_t *)v216;
    Counter = (void *)specialized AnimatorState.init(animation:interval:at:in:)(v106, (uint64_t)&v267, v9);
    swift_retain();
    static os_signpost_type_t.begin.getter();
    static os_signpost_type_t.event.getter();
    if ((kdebug_is_enabled() & 1) != 0)
    {
      if (one-time initialization token for _signpostLog == -1)
        goto LABEL_63;
      goto LABEL_138;
    }
    swift_release();
    a4 = v246;
    v67 = v222;
    goto LABEL_130;
  }
  v271 = v264;
  v272 = v265;
  v273 = v266;
  v267 = v260;
  v268 = v261;
  v269 = v262;
  v270 = v263;
  swift_retain();
  LOBYTE(v254) = 0;
  specialized AnimatorState.combine(newAnimation:newInterval:at:in:environment:)(v223, (uint64_t)&v267, v9);
  swift_retain();
  a1 = (uint64_t *)static os_signpost_type_t.event.getter();
  static os_signpost_type_t.event.getter();
  if ((kdebug_is_enabled() & 1) == 0)
  {
    swift_release_n();
    goto LABEL_71;
  }
  LODWORD(v228) = (_DWORD)a1;
  v222 = v67;
  v95 = v28;
  v96 = v31;
  if (one-time initialization token for _signpostLog != -1)
    swift_once();
  a1 = (uint64_t *)_signpostLog;
  if ((OS_os_log.signpostsEnabled.getter() & 1) == 0)
  {
    swift_release_n();
    goto LABEL_70;
  }
  swift_retain();
  v97 = a1;
  OSSignpostID.init(log:object:)();
  type metadata accessor for _ContiguousArrayStorage<CVarArg>();
  a1 = (uint64_t *)swift_allocObject();
  *((_OWORD *)a1 + 1) = xmmword_235283260;
  result = (unsigned int *)AGGraphGetCurrentAttribute();
  v98 = *MEMORY[0x24BE096C0];
  if ((_DWORD)result != *MEMORY[0x24BE096C0])
  {
    v99 = (id)AGGraphGetAttributeGraph();
    a2 = AGGraphGetCounter();

    v100 = MEMORY[0x24BEE1ED8];
    a1[7] = MEMORY[0x24BEE1E88];
    a1[8] = v100;
    a1[4] = a2;
    result = (unsigned int *)AGGraphGetCurrentAttribute();
    if ((_DWORD)result == v98)
      goto LABEL_140;
    v101 = MEMORY[0x24BEE4558];
    a1[12] = MEMORY[0x24BEE44F0];
    a1[13] = v101;
    *((_DWORD *)a1 + 18) = (_DWORD)result;
    a1[17] = MEMORY[0x24BEE0D00];
    a1[18] = lazy protocol witness table accessor for type String and conformance String();
    a1[14] = 0x656C797453;
    a1[15] = 0xE500000000000000;
    v102 = v236;
    os_signpost(_:dso:log:name:signpostID:_:_:)();
    swift_release_n();
    (*(void (**)(uint64_t, uint64_t))(v224 + 8))(v102, v225);
    swift_bridgeObjectRelease();
    a4 = v246;
LABEL_70:
    v31 = v96;
    v28 = v95;
    v67 = v222;
LABEL_71:
    if (a4[15])
      goto LABEL_72;
LABEL_131:
    __break(1u);
LABEL_132:
    __break(1u);
LABEL_133:
    __break(1u);
    goto LABEL_134;
  }
  __break(1u);
LABEL_140:
  __break(1u);
LABEL_141:
  __break(1u);
LABEL_142:
  __break(1u);
  return result;
}

unsigned int *specialized AnimatableAttributeHelper.update(value:defaultAnimation:environment:sampleCollector:)(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  double v9;
  double *Value;
  char v11;
  unsigned int *result;
  unsigned int v13;
  int v14;
  uint64_t v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  char v25;
  int v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  void *v45;
  id v46;
  uint64_t v47;
  int v48;
  id v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  void *v56;
  id v57;
  uint64_t v58;
  int v59;
  id v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char v65;
  __int128 v66;
  __int128 v67;
  id v68;
  uint64_t v69;
  void *v70;
  void *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char v77;
  uint64_t v78;
  void *v79;
  id v80;
  uint64_t v81;
  int CurrentAttribute;
  id v83;
  uint64_t Counter;
  uint64_t v85;
  int v86;
  uint64_t v87;
  uint64_t v88;
  double v89;
  uint64_t v90;
  unsigned __int8 v91;
  void (*v92)(__int128 *, unint64_t, double);
  void *v93;
  uint64_t v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  char v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  id v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  char v121;
  unsigned __int8 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  char v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  char v134;
  id v135[10];
  char v136;

  LODWORD(v113) = a3;
  v7 = type metadata accessor for OSSignpostID();
  v107 = *(_QWORD *)(v7 - 8);
  v108 = v7;
  MEMORY[0x24BDAC7A8](v7);
  v111 = (uint64_t)&v101 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for infinity == -1)
    goto LABEL_2;
LABEL_67:
  swift_once();
LABEL_2:
  v9 = -*(double *)&static Time.infinity;
  if (*(_QWORD *)(a4 + 104))
  {
    Value = (double *)AGGraphGetValue();
    if ((v11 & 1) != 0)
      v9 = *Value;
  }
  result = (unsigned int *)AGGraphGetValue();
  v13 = *result;
  v14 = *(_DWORD *)(a4 + 112);
  v114 = a4;
  if (v14 == v13 >> 1)
  {
    if (*(_BYTE *)(a1 + 81) != 1)
    {
      v15 = *(_QWORD *)(a4 + 104);
      if (v15)
        goto LABEL_45;
      return result;
    }
  }
  else
  {
    specialized AnimatableAttributeHelper.reset()();
    *(_BYTE *)(a1 + 81) = 1;
  }
  v16 = *(void **)(a1 + 8);
  v17 = *(void **)(a1 + 16);
  v18 = *(void **)(a1 + 24);
  v19 = *(void **)(a1 + 32);
  v20 = *(void **)(a1 + 40);
  v21 = *(void **)(a1 + 48);
  v22 = *(void **)(a1 + 56);
  v23 = *(void **)(a1 + 64);
  v24 = *(void **)(a1 + 72);
  v25 = *(_BYTE *)(a1 + 80);
  v135[0] = *(id *)a1;
  v135[1] = v16;
  v135[2] = v17;
  v135[3] = v18;
  v135[4] = v19;
  v135[5] = v20;
  v135[6] = v21;
  v135[7] = v22;
  v135[8] = v23;
  v135[9] = v24;
  v136 = v25;
  outlined copy of _ShapeStyle_Pack.Fill(v135[0], (uint64_t)v16, v17, v18, (uint64_t)v19, (uint64_t)v20, (uint64_t)v21, (uint64_t)v22, (uint64_t)v23, (uint64_t)v24, v25);
  _ShapeStyle_Pack.Fill.AnimatableData.init(_:)((uint64_t)v135);
  v26 = *(unsigned __int8 *)(a4 + 96);
  if (v26 != 255)
  {
    v106 = a2;
    v27 = *(void **)(a4 + 16);
    v28 = *(_QWORD *)(a4 + 24);
    v29 = *(_QWORD *)(a4 + 32);
    v30 = *(_QWORD *)(a4 + 40);
    v32 = *(_QWORD *)(a4 + 48);
    v31 = *(_QWORD *)(a4 + 56);
    v34 = *(_QWORD *)(a4 + 64);
    v33 = *(_QWORD *)(a4 + 72);
    v35 = *(_QWORD *)(a4 + 80);
    v36 = *(_QWORD *)(a4 + 88);
    *(_QWORD *)&v123 = v27;
    *((_QWORD *)&v123 + 1) = v28;
    *(_QWORD *)&v124 = v29;
    *((_QWORD *)&v124 + 1) = v30;
    *(_QWORD *)&v125 = v32;
    *((_QWORD *)&v125 + 1) = v31;
    *(_QWORD *)&v126 = v34;
    *((_QWORD *)&v126 + 1) = v33;
    *(_QWORD *)&v127 = v35;
    *((_QWORD *)&v127 + 1) = v36;
    v128 = v26;
    v110 = v27;
    v115 = v29;
    LODWORD(v109) = v26;
    outlined copy of _ShapeStyle_Pack.Fill.AnimatableData?((uint64_t)v27, v28, v29, v30, v32, v31, v34, v33, v35, v36, v26);
    specialized static _ShapeStyle_Pack.Fill.AnimatableData.== infix(_:_:)((uint64_t)&v129);
    if ((v37 & 1) != 0)
    {
      outlined consume of _ShapeStyle_Pack.Fill.AnimatableData?((uint64_t)v110, v28, v115, v30, v32, v31, v34, v33, v35, v36, v109);
LABEL_13:
      a4 = v114;
      goto LABEL_44;
    }
    v101 = v36;
    v102 = v35;
    v38 = v115;
    v103 = v30;
    v104 = v31;
    v105 = v33;
    v112 = a1;
    AGGraphClearUpdate();
    v39 = *(_QWORD *)AGGraphGetValue();
    swift_retain();
    AGGraphSetUpdate();
    v40 = swift_retain();
    v41 = specialized find<A>(_:key:)(v40);
    if (v41)
    {
      a1 = *(_QWORD *)(v41 + 72);
      swift_retain();
      swift_release();
      v42 = (uint64_t)v110;
      if (a1)
        goto LABEL_23;
    }
    else
    {
      swift_release();
      v42 = (uint64_t)v110;
    }
    v43 = swift_retain();
    v44 = specialized closure #1 in PropertyList.subscript.getter(v43);
    swift_release();
    if ((v44 & 1) != 0)
    {
      if (one-time initialization token for velocityTracking != -1)
        goto LABEL_70;
      goto LABEL_20;
    }
    a1 = v106;
    if (!v106)
    {
      outlined consume of _ShapeStyle_Pack.Fill.AnimatableData?(v42, v28, v38, v103, v32, v104, v34, v105, v102, v101, v109);
      swift_release();
      a1 = v112;
      goto LABEL_13;
    }
    goto LABEL_22;
  }
  while (1)
  {
LABEL_44:
    result = (unsigned int *)outlined consume of _ShapeStyle_Pack.Fill.AnimatableData?(*(_QWORD *)(a4 + 16), *(_QWORD *)(a4 + 24), *(_QWORD *)(a4 + 32), *(_QWORD *)(a4 + 40), *(_QWORD *)(a4 + 48), *(_QWORD *)(a4 + 56), *(_QWORD *)(a4 + 64), *(_QWORD *)(a4 + 72), *(_QWORD *)(a4 + 80), *(_QWORD *)(a4 + 88), *(_BYTE *)(a4 + 96));
    v65 = v134;
    v66 = v130;
    *(_OWORD *)(a4 + 16) = v129;
    *(_OWORD *)(a4 + 32) = v66;
    v67 = v132;
    *(_OWORD *)(a4 + 48) = v131;
    *(_OWORD *)(a4 + 64) = v67;
    *(_OWORD *)(a4 + 80) = v133;
    *(_BYTE *)(a4 + 96) = v65;
    v15 = *(_QWORD *)(a4 + 104);
    if (!v15)
      return result;
LABEL_45:
    v68 = *(id *)a1;
    v69 = *(_QWORD *)(a1 + 8);
    v70 = *(void **)(a1 + 16);
    v71 = *(void **)(a1 + 24);
    v72 = *(_QWORD *)(a1 + 32);
    v73 = *(_QWORD *)(a1 + 40);
    v74 = *(_QWORD *)(a1 + 48);
    v109 = *(_QWORD *)(a1 + 56);
    v110 = v68;
    v115 = v15;
    v76 = *(_QWORD *)(a1 + 64);
    v75 = *(_QWORD *)(a1 + 72);
    v112 = a1;
    v77 = *(_BYTE *)(a1 + 80);
    *(_QWORD *)&v123 = v68;
    *((_QWORD *)&v123 + 1) = v69;
    *(_QWORD *)&v124 = v70;
    *((_QWORD *)&v124 + 1) = v71;
    *(_QWORD *)&v125 = v72;
    *((_QWORD *)&v125 + 1) = v73;
    *(_QWORD *)&v126 = v74;
    *((_QWORD *)&v126 + 1) = v109;
    *(_QWORD *)&v127 = v76;
    *((_QWORD *)&v127 + 1) = v75;
    v128 = v77;
    swift_retain();
    v100 = v76;
    v78 = v115;
    outlined copy of _ShapeStyle_Pack.Fill(v110, v69, v70, v71, v72, v73, v74, v109, v100, v75, v77);
    _ShapeStyle_Pack.Fill.AnimatableData.init(_:)((uint64_t)&v123);
    LOBYTE(v123) = 0;
    if ((specialized AnimatorState.update(_:at:environment:)(&v129, v9) & 1) == 0)
      break;
    swift_retain();
    static os_signpost_type_t.end.getter();
    static os_signpost_type_t.event.getter();
    if ((kdebug_is_enabled() & 1) == 0)
      goto LABEL_56;
    if (one-time initialization token for _signpostLog != -1)
      swift_once();
    v79 = (void *)_signpostLog;
    if ((OS_os_log.signpostsEnabled.getter() & 1) == 0)
    {
LABEL_56:
      swift_release();
      goto LABEL_57;
    }
    swift_retain();
    v80 = v79;
    OSSignpostID.init(log:object:)();
    type metadata accessor for _ContiguousArrayStorage<CVarArg>();
    v81 = swift_allocObject();
    *(_OWORD *)(v81 + 16) = xmmword_235283260;
    CurrentAttribute = AGGraphGetCurrentAttribute();
    v39 = *MEMORY[0x24BE096C0];
    if (CurrentAttribute == (_DWORD)v39)
    {
      __break(1u);
    }
    else
    {
      v83 = (id)AGGraphGetAttributeGraph();
      Counter = AGGraphGetCounter();

      v85 = MEMORY[0x24BEE1ED8];
      *(_QWORD *)(v81 + 56) = MEMORY[0x24BEE1E88];
      *(_QWORD *)(v81 + 64) = v85;
      *(_QWORD *)(v81 + 32) = Counter;
      v86 = AGGraphGetCurrentAttribute();
      if (v86 != (_DWORD)v39)
      {
        v87 = MEMORY[0x24BEE4558];
        *(_QWORD *)(v81 + 96) = MEMORY[0x24BEE44F0];
        *(_QWORD *)(v81 + 104) = v87;
        *(_DWORD *)(v81 + 72) = v86;
        *(_QWORD *)(v81 + 136) = MEMORY[0x24BEE0D00];
        *(_QWORD *)(v81 + 144) = lazy protocol witness table accessor for type String and conformance String();
        *(_QWORD *)(v81 + 112) = 1819044166;
        *(_QWORD *)(v81 + 120) = 0xE400000000000000;
        v88 = v111;
        os_signpost(_:dso:log:name:signpostID:_:_:)();
        swift_release();
        (*(void (**)(uint64_t, uint64_t))(v107 + 8))(v88, v108);
        swift_bridgeObjectRelease();
LABEL_57:
        v94 = v114;
        if (*(_QWORD *)(v114 + 104))
        {
          specialized AnimatorState.removeListeners()();
          swift_release();
        }
        *(_QWORD *)(v94 + 104) = 0;
        goto LABEL_60;
      }
    }
    __break(1u);
LABEL_70:
    swift_once();
LABEL_20:
    a1 = static Animation.velocityTracking;
LABEL_22:
    swift_retain();
LABEL_23:
    a2 = v39;
    v116 = v129;
    v117 = v130;
    v118 = v131;
    v119 = v132;
    v120 = v133;
    v121 = v134;
    outlined copy of _ShapeStyle_Pack.Fill.AnimatableData(v129, *((uint64_t *)&v129 + 1), v130, *((uint64_t *)&v130 + 1), v131, *((uint64_t *)&v131 + 1), v132, *((uint64_t *)&v132 + 1), v133, *((uint64_t *)&v133 + 1), v134);
    specialized static _ShapeStyle_Pack.Fill.AnimatableData.-= infix(_:_:)(&v116, (int8x16_t *)&v123);
    a4 = v114;
    v9 = *(double *)AGGraphGetValue();
    if (*(_QWORD *)(a4 + 104))
    {
      outlined init with take of _ShapeStyle_Pack.Fill.AnimatableData((uint64_t)&v116, (uint64_t)v135);
      swift_retain();
      v122 = 0;
      specialized AnimatorState.combine(newAnimation:newInterval:at:in:environment:)(a1, (uint64_t)v135, v9);
      swift_retain();
      static os_signpost_type_t.event.getter();
      static os_signpost_type_t.event.getter();
      if ((kdebug_is_enabled() & 1) != 0)
      {
        if (one-time initialization token for _signpostLog != -1)
          swift_once();
        v45 = (void *)_signpostLog;
        if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
        {
          swift_retain();
          v46 = v45;
          OSSignpostID.init(log:object:)();
          type metadata accessor for _ContiguousArrayStorage<CVarArg>();
          v47 = swift_allocObject();
          *(_OWORD *)(v47 + 16) = xmmword_235283260;
          result = (unsigned int *)AGGraphGetCurrentAttribute();
          v48 = *MEMORY[0x24BE096C0];
          if ((_DWORD)result == *MEMORY[0x24BE096C0])
          {
            __break(1u);
LABEL_72:
            __break(1u);
LABEL_73:
            __break(1u);
LABEL_74:
            __break(1u);
            return result;
          }
          v49 = (id)AGGraphGetAttributeGraph();
          v50 = AGGraphGetCounter();

          v51 = MEMORY[0x24BEE1ED8];
          *(_QWORD *)(v47 + 56) = MEMORY[0x24BEE1E88];
          *(_QWORD *)(v47 + 64) = v51;
          *(_QWORD *)(v47 + 32) = v50;
          result = (unsigned int *)AGGraphGetCurrentAttribute();
          if ((_DWORD)result == v48)
            goto LABEL_72;
          v52 = MEMORY[0x24BEE4558];
          *(_QWORD *)(v47 + 96) = MEMORY[0x24BEE44F0];
          *(_QWORD *)(v47 + 104) = v52;
          *(_DWORD *)(v47 + 72) = (_DWORD)result;
          *(_QWORD *)(v47 + 136) = MEMORY[0x24BEE0D00];
          *(_QWORD *)(v47 + 144) = lazy protocol witness table accessor for type String and conformance String();
          *(_QWORD *)(v47 + 112) = 1819044166;
          *(_QWORD *)(v47 + 120) = 0xE400000000000000;
          v53 = v111;
          os_signpost(_:dso:log:name:signpostID:_:_:)();
          swift_release_n();
          (*(void (**)(uint64_t, uint64_t))(v107 + 8))(v53, v108);
          swift_bridgeObjectRelease();
        }
        else
        {
          swift_release_n();
        }
        a4 = v114;
      }
      else
      {
        swift_release_n();
      }
      if (!*(_QWORD *)(a4 + 104))
      {
LABEL_66:
        __break(1u);
        goto LABEL_67;
      }
    }
    else
    {
      outlined init with take of _ShapeStyle_Pack.Fill.AnimatableData((uint64_t)&v116, (uint64_t)v135);
      type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for AnimatorState<_ShapeStyle_Pack.Fill.AnimatableData>, (uint64_t (*)(void))lazy protocol witness table accessor for type _ShapeStyle_Pack.Fill.AnimatableData and conformance _ShapeStyle_Pack.Fill.AnimatableData, (uint64_t)&type metadata for _ShapeStyle_Pack.Fill.AnimatableData, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatorState);
      swift_allocObject();
      swift_retain();
      outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)v135, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))outlined copy of _ShapeStyle_Pack.Fill.AnimatableData);
      v54 = swift_retain();
      v55 = specialized AnimatorState.init(animation:interval:at:in:)(v54, (uint64_t)v135, v9);
      swift_retain();
      static os_signpost_type_t.begin.getter();
      static os_signpost_type_t.event.getter();
      if ((kdebug_is_enabled() & 1) != 0)
      {
        if (one-time initialization token for _signpostLog != -1)
          swift_once();
        v56 = (void *)_signpostLog;
        if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
        {
          swift_retain();
          v57 = v56;
          OSSignpostID.init(log:object:)();
          type metadata accessor for _ContiguousArrayStorage<CVarArg>();
          v58 = swift_allocObject();
          *(_OWORD *)(v58 + 16) = xmmword_235283260;
          result = (unsigned int *)AGGraphGetCurrentAttribute();
          v59 = *MEMORY[0x24BE096C0];
          if ((_DWORD)result == *MEMORY[0x24BE096C0])
            goto LABEL_73;
          v60 = (id)AGGraphGetAttributeGraph();
          v61 = AGGraphGetCounter();

          v62 = MEMORY[0x24BEE1ED8];
          *(_QWORD *)(v58 + 56) = MEMORY[0x24BEE1E88];
          *(_QWORD *)(v58 + 64) = v62;
          *(_QWORD *)(v58 + 32) = v61;
          result = (unsigned int *)AGGraphGetCurrentAttribute();
          if ((_DWORD)result == v59)
            goto LABEL_74;
          v63 = MEMORY[0x24BEE4558];
          *(_QWORD *)(v58 + 96) = MEMORY[0x24BEE44F0];
          *(_QWORD *)(v58 + 104) = v63;
          *(_DWORD *)(v58 + 72) = (_DWORD)result;
          *(_QWORD *)(v58 + 136) = MEMORY[0x24BEE0D00];
          *(_QWORD *)(v58 + 144) = lazy protocol witness table accessor for type String and conformance String();
          *(_QWORD *)(v58 + 112) = 1819044166;
          *(_QWORD *)(v58 + 120) = 0xE400000000000000;
          v64 = v111;
          os_signpost(_:dso:log:name:signpostID:_:_:)();
          swift_release();
          (*(void (**)(uint64_t, uint64_t))(v107 + 8))(v64, v108);
          swift_bridgeObjectRelease();
        }
        else
        {
          swift_release();
        }
        a4 = v114;
      }
      else
      {
        swift_release();
      }
      swift_release();
      *(_QWORD *)(a4 + 104) = v55;
      if (!v55)
        goto LABEL_66;
    }
    swift_retain();
    specialized AnimatorState.addListeners(transaction:)();
    swift_release();
    swift_release();
    swift_release();
    outlined consume of _ShapeStyle_Pack.Fill.AnimatableData(v116, *((uint64_t *)&v116 + 1), v117, *((uint64_t *)&v117 + 1), v118, *((uint64_t *)&v118 + 1), v119, *((uint64_t *)&v119 + 1), v120, *((uint64_t *)&v120 + 1), v121);
    outlined consume of _ShapeStyle_Pack.Fill.AnimatableData(v123, *((uint64_t *)&v123 + 1), v124, *((uint64_t *)&v124 + 1), v125, *((uint64_t *)&v125 + 1), v126, *((uint64_t *)&v126 + 1), v127, *((uint64_t *)&v127 + 1), v128);
    a1 = v112;
  }
  if (one-time initialization token for shared != -1)
    swift_once();
  swift_beginAccess();
  v89 = *(double *)(v78 + 128);
  *(_QWORD *)&v123 = *(_QWORD *)(v78 + 136);
  v90 = *(unsigned int *)(v78 + 228);
  v91 = *(_BYTE *)(v78 + 232);
  v92 = *(void (**)(__int128 *, unint64_t, double))((*MEMORY[0x24BEE4EA0] & *(_QWORD *)static CoreGlue.shared)
                                                                    + 0x58);
  v93 = static CoreGlue.shared;
  v122 = v91;
  v92(&v123, v90 | ((unint64_t)v91 << 32), v89);

LABEL_60:
  v113 = *((_QWORD *)&v129 + 1);
  v114 = v129;
  v110 = (id)*((_QWORD *)&v130 + 1);
  v111 = v130;
  v95 = v131;
  v96 = v132;
  v97 = v133;
  v98 = v134;
  v123 = v129;
  v124 = v130;
  v125 = v131;
  v126 = v132;
  v127 = v133;
  v128 = v134;
  v99 = v112;
  _ShapeStyle_Pack.Fill.AnimatableData.set(fill:)(v112);
  swift_release();
  result = (unsigned int *)outlined consume of _ShapeStyle_Pack.Fill.AnimatableData(v114, v113, v111, (uint64_t)v110, v95, *((uint64_t *)&v95 + 1), v96, *((uint64_t *)&v96 + 1), v97, *((uint64_t *)&v97 + 1), v98);
  *(_BYTE *)(v99 + 81) = 1;
  return result;
}

void specialized AnimatableAttributeHelper.update(value:defaultAnimation:environment:sampleCollector:)(uint64_t a1, uint64_t a2, __int32 a3, uint64_t a4)
{
  double v4;
  double v5;
  uint64_t v10;
  __int8 *v11;
  double v12;
  double *Value;
  char v14;
  unint64_t v15;
  int64x2_t v16;
  uint64_t *v17;
  int8x16_t v18;
  int64x2_t v19;
  int64x2_t v20;
  int8x16_t v21;
  float v22;
  float32x2_t v23;
  int8x16_t v24;
  int64x2_t v25;
  __int128 v26;
  char v27;
  int64x2_t v29;
  int64x2_t v30;
  int32x2_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  char v37;
  float64x2_t v38;
  int8x16_t v39;
  float32x2_t v40;
  int8x16_t v41;
  __int32 v42;
  void *v43;
  id v44;
  uint64_t v45;
  int v46;
  id v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  uint64_t v54;
  int8x16_t v55;
  float64x2_t v56;
  uint64_t v57;
  int64x2_t v58;
  int8x16_t v59;
  float32x2_t v60;
  float32x2_t v61;
  float32x2_t v62;
  int8x16_t v63;
  void *v64;
  id v65;
  uint64_t v66;
  int CurrentAttribute;
  id v68;
  uint64_t Counter;
  uint64_t v70;
  int v71;
  uint64_t v72;
  uint64_t v73;
  double v74;
  uint64_t v75;
  unsigned __int8 v76;
  void (*v77)(_QWORD, _QWORD, double);
  void *v78;
  uint64_t v79;
  uint64_t v80;
  int8x16_t v81;
  char v82;
  __int128 v83;
  int64x2_t v84;
  __int128 v85;
  uint64_t v86;
  uint64_t v87;
  float32x2_t v88;
  float32x2_t v89;
  unint64_t v90;
  int32x2_t v91;
  float *v92;
  float64x2_t v93;
  uint64_t v94;
  uint64_t v95;
  __int128 v96;
  int8x16_t v97;
  uint64_t v98;
  uint64_t v99;
  __int32 v100;
  void *v101;
  id v102;
  uint64_t v103;
  int v104;
  id v105;
  uint64_t v106;
  uint64_t v107;
  int v108;
  uint64_t v109;
  int64x2_t v110;
  float64x2_t v111;
  int64x2_t v112;
  int8x16_t v113;
  uint64_t v114;
  __int128 v115;
  int64x2_t v116;
  __int128 v117;
  float v118[5];
  char v119;
  _QWORD v120[3];
  char v121;
  uint64_t v122;
  unsigned int v123;
  __int32 v124;
  uint64_t v125;
  char v126;
  float v127[4];
  double v128;
  char v129;
  float32x2x2_t v130;

  *(_QWORD *)&v115 = type metadata accessor for OSSignpostID();
  v114 = *(_QWORD *)(v115 - 8);
  MEMORY[0x24BDAC7A8](v115);
  v11 = &v110.i8[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  if (one-time initialization token for infinity != -1)
    swift_once();
  v12 = -*(double *)&static Time.infinity;
  if (*(_QWORD *)(a4 + 64))
  {
    Value = (double *)AGGraphGetValue();
    if ((v14 & 1) != 0)
      v12 = *Value;
  }
  v15 = (unint64_t)&v122;
  if (*(_DWORD *)(a4 + 72) != *(_DWORD *)AGGraphGetValue() >> 1)
  {
    specialized AnimatableAttributeHelper.reset()();
    *(_BYTE *)(a1 + 46) = 1;
    LOBYTE(v17) = *(_BYTE *)(a1 + 45);
    if ((v17 & 1) != 0)
      goto LABEL_9;
LABEL_12:
    v5 = *(double *)(a1 + 32);
    v116 = *(int64x2_t *)(a1 + 16);
    v20 = *(int64x2_t *)a1;
    v113 = *(int8x16_t *)a1;
    if (one-time initialization token for legacyInterpolation != -1)
    {
      swift_once();
      v20 = (int64x2_t)v113;
    }
    *(int32x2_t *)v16.i8 = vshrn_n_s64(v20, 0x20uLL);
    v112 = v16;
    LODWORD(v4) = v20.i32[2];
    swift_beginAccess();
    if ((static Color.Resolved.legacyInterpolation & 1) != 0)
    {
      v22 = *(float *)v113.i32;
      v23 = *(float32x2_t *)v112.i8;
    }
    else
    {
      LOBYTE(v122) = 2;
      ResolvedGradient.ColorSpace.convertIn(_:)(v127, v113, *(float *)v112.i32, LODWORD(v4), *(float *)&v112.i32[1], v21);
      v23 = (float32x2_t)__PAIR64__(LODWORD(v127[3]), LODWORD(v127[1]));
      v22 = v127[0];
      *(float *)&v4 = v127[2];
    }
    v24.i32[1] = 0;
    v24.i32[3] = 0;
    *(float *)v24.i32 = v22 * 128.0;
    *(float *)&v24.i32[2] = *(float *)&v4 * 128.0;
    v18 = vorrq_s8((int8x16_t)vshll_n_s32((int32x2_t)vmul_f32(v23, (float32x2_t)0x4300000043000000), 0x20uLL), v24);
    v19 = v116;
    if ((*(_BYTE *)(a4 + 57) & 1) != 0)
      goto LABEL_59;
LABEL_18:
    v113.i32[0] = a3;
    v26 = *(_OWORD *)(a4 + 16);
    v25 = *(int64x2_t *)(a4 + 32);
    v4 = *(double *)(a4 + 48);
    v27 = *(_BYTE *)(a4 + 56);
    if ((v17 & 1) != 0)
    {
      if ((*(_BYTE *)(a4 + 56) & 1) != 0)
        goto LABEL_59;
    }
    else if ((*(_BYTE *)(a4 + 56) & 1) == 0
           && *(float *)v18.i32 == *(float *)&v26
           && *(float *)&v18.i32[1] == *((float *)&v26 + 1)
           && *(float *)&v18.i32[2] == *((float *)&v26 + 2)
           && *(float *)&v18.i32[3] == *((float *)&v26 + 3))
    {
      v29 = vzip1q_s64(v19, v25);
      v30 = vzip2q_s64(v19, v25);
      v31 = vmovn_s64(vceqq_f64((float64x2_t)vzip1q_s64(v30, v29), (float64x2_t)vzip2q_s64(v30, v29)));
      if ((v31.i8[4] & 1) != 0 && (v31.i8[0] & 1) != 0 && v5 == v4)
        goto LABEL_59;
    }
    v110 = *(int64x2_t *)(a4 + 16);
    v111 = (float64x2_t)v25;
    v112 = (int64x2_t)v18;
    v116 = v19;
    AGGraphClearUpdate();
    AGGraphGetValue();
    swift_retain();
    AGGraphSetUpdate();
    v32 = swift_retain();
    v33 = specialized find<A>(_:key:)(v32);
    if (v33)
    {
      v34 = *(_QWORD *)(v33 + 72);
      swift_retain();
      swift_release();
      if (v34)
        goto LABEL_40;
    }
    else
    {
      swift_release();
    }
    v35 = swift_retain();
    v36 = specialized closure #1 in PropertyList.subscript.getter(v35);
    swift_release();
    if ((v36 & 1) == 0)
    {
      if (!a2)
        goto LABEL_58;
      swift_retain();
      v34 = a2;
      if ((v27 & 1) == 0)
        goto LABEL_41;
      goto LABEL_45;
    }
    if (one-time initialization token for velocityTracking != -1)
      goto LABEL_108;
    goto LABEL_39;
  }
  if (*(_BYTE *)(a1 + 46) != 1)
    goto LABEL_60;
  LOBYTE(v17) = *(_BYTE *)(a1 + 45);
  if ((v17 & 1) == 0)
    goto LABEL_12;
LABEL_9:
  v18 = 0uLL;
  v5 = 0.0;
  v19 = 0uLL;
  if ((*(_BYTE *)(a4 + 57) & 1) == 0)
    goto LABEL_18;
  while (1)
  {
LABEL_59:
    *(int8x16_t *)(a4 + 16) = v18;
    *(int64x2_t *)(a4 + 32) = v19;
    *(double *)(a4 + 48) = v5;
    *(_BYTE *)(a4 + 56) = (_BYTE)v17;
    *(_BYTE *)(a4 + 57) = 0;
LABEL_60:
    v52 = *(_QWORD *)(a4 + 64);
    if (!v52)
      return;
    v53 = *(_BYTE *)(a1 + 45);
    if ((v53 & 1) != 0)
    {
      swift_retain();
      v54 = 0;
      v55 = 0uLL;
      v56 = 0uLL;
    }
    else
    {
      v54 = *(_QWORD *)(a1 + 32);
      v116 = *(int64x2_t *)(a1 + 16);
      v112 = *(int64x2_t *)a1;
      v57 = one-time initialization token for legacyInterpolation;
      swift_retain();
      if (v57 != -1)
        swift_once();
      *(int32x2_t *)v58.i8 = vmovn_s64(v112);
      v113 = (int8x16_t)v58;
      *(int32x2_t *)v58.i8 = vshrn_n_s64(v112, 0x20uLL);
      v112 = v58;
      swift_beginAccess();
      if ((static Color.Resolved.legacyInterpolation & 1) != 0)
      {
        v60 = *(float32x2_t *)v113.i8;
        v61 = *(float32x2_t *)v112.i8;
      }
      else
      {
        v121 = 2;
        ResolvedGradient.ColorSpace.convertIn(_:)((float *)&v122, v113, *(float *)v112.i32, v113.u32[1], *(float *)&v112.i32[1], v59);
        v60 = (float32x2_t)__PAIR64__(v123, v122);
        v61 = *(float32x2_t *)(v15 + 4);
        v61.i32[1] = v124;
      }
      v62 = vmul_f32(v60, (float32x2_t)0x4300000043000000);
      v63.i64[0] = v62.u32[0];
      v63.i64[1] = v62.u32[1];
      v55 = vorrq_s8((int8x16_t)vshll_n_s32((int32x2_t)vmul_f32(v61, (float32x2_t)0x4300000043000000), 0x20uLL), v63);
      v56 = (float64x2_t)v116;
    }
    *(int8x16_t *)v15 = v55;
    *(float64x2_t *)(v15 + 16) = v56;
    v125 = v54;
    v126 = v53;
    v121 = 0;
    if ((specialized AnimatorState.update(_:at:environment:)((uint64_t)&v122, v12) & 1) == 0)
    {
      if (one-time initialization token for shared != -1)
        swift_once();
      swift_beginAccess();
      v74 = *(double *)(v52 + 88);
      v120[0] = *(_QWORD *)(v52 + 96);
      v75 = *(unsigned int *)(v52 + 148);
      v76 = *(_BYTE *)(v52 + 152);
      v77 = *(void (**)(_QWORD, _QWORD, double))((*MEMORY[0x24BEE4EA0] & *(_QWORD *)static CoreGlue.shared)
                                                          + 0x58);
      v78 = static CoreGlue.shared;
      LOBYTE(v118[0]) = v76;
      v77(v120, v75 | ((unint64_t)v76 << 32), v74);

      if ((*(_BYTE *)(a1 + 45) & 1) == 0)
        goto LABEL_85;
      goto LABEL_86;
    }
    swift_retain();
    v27 = static os_signpost_type_t.end.getter();
    static os_signpost_type_t.event.getter();
    if ((kdebug_is_enabled() & 1) == 0)
      goto LABEL_82;
    if (one-time initialization token for _signpostLog != -1)
      swift_once();
    v17 = &OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D417TextRenderSurface_renderer;
    v64 = (void *)_signpostLog;
    if ((OS_os_log.signpostsEnabled.getter() & 1) == 0)
    {
LABEL_82:
      v73 = swift_release();
      if (*(_QWORD *)(a4 + 64))
      {
LABEL_83:
        specialized AnimatorState.removeListeners()(v73);
        swift_release();
      }
LABEL_84:
      *(_QWORD *)(a4 + 64) = 0;
      if ((*(_BYTE *)(a1 + 45) & 1) == 0)
      {
LABEL_85:
        if ((v126 & 1) != 0)
          goto LABEL_86;
        v84 = *(int64x2_t *)v15;
        v85 = *(_OWORD *)(v15 + 16);
        v115 = v85;
        v79 = v125;
        v86 = *(unsigned __int8 *)(a1 + 44);
        v87 = *(unsigned int *)(a1 + 40);
        v88 = (float32x2_t)vmovn_s64(v84);
        v89 = (float32x2_t)vshrn_n_s64(v84, 0x20uLL);
        if (one-time initialization token for legacyInterpolation != -1)
          swift_once();
        v80 = v87 | (v86 << 32);
        *(float32x2_t *)v84.i8 = vmul_f32(v88, (float32x2_t)0x3C0000003C000000);
        *(float32x2_t *)&v85 = vmul_f32(v89, (float32x2_t)0x3C0000003C000000);
        v116 = v84;
        v117 = v85;
        swift_beginAccess();
        if ((static Color.Resolved.legacyInterpolation & 1) != 0)
        {
          swift_release();
          v90 = v116.i64[0];
          v91 = (int32x2_t)v117;
        }
        else
        {
          v119 = 2;
          v92 = v118;
          v130.val[0] = (float32x2_t)v116.i64[0];
          v130.val[1] = (float32x2_t)v117;
          vst2_f32(v92, v130);
          *(float *)v93.f64 = ResolvedGradient.ColorSpace.convertOut(_:)(v118);
          v114 = v94;
          v113.i64[0] = v95;
          v116 = (int64x2_t)v93;
          v117 = v96;
          swift_release();
          v90 = __PAIR64__(v114, v116.u32[0]);
          v91 = (int32x2_t)__PAIR64__(v113.u32[0], v117);
        }
        v82 = 0;
        v97.i64[0] = v90;
        v97.i64[1] = HIDWORD(v90);
        v81 = vorrq_s8((int8x16_t)vshll_n_s32(v91, 0x20uLL), v97);
        v83 = v115;
LABEL_93:
        *(int8x16_t *)a1 = v81;
        *(_OWORD *)(a1 + 16) = v83;
        *(_QWORD *)(a1 + 32) = v79;
        *(_DWORD *)(a1 + 40) = v80;
        *(_BYTE *)(a1 + 44) = BYTE4(v80);
        *(_BYTE *)(a1 + 45) = v82;
        *(_BYTE *)(a1 + 46) = 1;
        return;
      }
LABEL_86:
      swift_release();
      v79 = 0;
      v80 = 0;
      v81 = 0uLL;
      v82 = 1;
      v83 = 0uLL;
      goto LABEL_93;
    }
    swift_retain();
    v65 = v64;
    OSSignpostID.init(log:object:)();
    type metadata accessor for _ContiguousArrayStorage<CVarArg>();
    v66 = swift_allocObject();
    *(_OWORD *)(v66 + 16) = xmmword_235283260;
    CurrentAttribute = AGGraphGetCurrentAttribute();
    v15 = *MEMORY[0x24BE096C0];
    if (CurrentAttribute == (_DWORD)v15)
    {
      __break(1u);
    }
    else
    {
      v68 = (id)AGGraphGetAttributeGraph();
      Counter = AGGraphGetCounter();

      v70 = MEMORY[0x24BEE1ED8];
      *(_QWORD *)(v66 + 56) = MEMORY[0x24BEE1E88];
      *(_QWORD *)(v66 + 64) = v70;
      *(_QWORD *)(v66 + 32) = Counter;
      v71 = AGGraphGetCurrentAttribute();
      if (v71 != (_DWORD)v15)
      {
        v72 = MEMORY[0x24BEE4558];
        *(_QWORD *)(v66 + 96) = MEMORY[0x24BEE44F0];
        *(_QWORD *)(v66 + 104) = v72;
        *(_DWORD *)(v66 + 72) = v71;
        *(_QWORD *)(v66 + 136) = MEMORY[0x24BEE0D00];
        *(_QWORD *)(v66 + 144) = lazy protocol witness table accessor for type String and conformance String();
        *(_QWORD *)(v66 + 112) = 1684957515;
        *(_QWORD *)(v66 + 120) = 0xE400000000000000;
        os_signpost(_:dso:log:name:signpostID:_:_:)();
        swift_release();
        (*(void (**)(__int8 *, _QWORD))(v114 + 8))(v11, v115);
        v73 = swift_bridgeObjectRelease();
        v15 = (unint64_t)&v122;
        if (*(_QWORD *)(a4 + 64))
          goto LABEL_83;
        goto LABEL_84;
      }
    }
    __break(1u);
LABEL_108:
    swift_once();
LABEL_39:
    v34 = static Animation.velocityTracking;
    swift_retain();
LABEL_40:
    if ((v27 & 1) != 0)
    {
LABEL_45:
      v4 = v5;
      v37 = (char)v17;
      v39 = (int8x16_t)v112;
      v38 = (float64x2_t)v116;
    }
    else
    {
LABEL_41:
      v37 = 0;
      if ((v17 & 1) != 0)
      {
        v38 = v111;
        v39 = (int8x16_t)v110;
      }
      else
      {
        v38 = vsubq_f64((float64x2_t)v116, v111);
        v4 = v5 - v4;
        v40 = vsub_f32((float32x2_t)vmovn_s64(v112), (float32x2_t)vmovn_s64(v110));
        v41.i64[0] = v40.u32[0];
        v41.i64[1] = v40.u32[1];
        v39 = vorrq_s8((int8x16_t)vshll_n_s32((int32x2_t)vsub_f32((float32x2_t)vshrn_n_s64(v112, 0x20uLL), (float32x2_t)vshrn_n_s64(v110, 0x20uLL)), 0x20uLL), v41);
      }
    }
    *(int8x16_t *)(v15 + 48) = v39;
    *(float64x2_t *)(v15 + 64) = v38;
    v128 = v4;
    v129 = v37;
    v12 = *(double *)AGGraphGetValue();
    if (*(_QWORD *)(a4 + 64))
      break;
    type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for AnimatorState<_ShapeStyle_Pack.Effect.Kind.AnimatableData>, (uint64_t (*)(void))lazy protocol witness table accessor for type _ShapeStyle_Pack.Effect.Kind.AnimatableData and conformance _ShapeStyle_Pack.Effect.Kind.AnimatableData, (uint64_t)&type metadata for _ShapeStyle_Pack.Effect.Kind.AnimatableData, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatorState);
    swift_allocObject();
    swift_retain();
    v98 = swift_retain();
    v99 = specialized AnimatorState.init(animation:interval:at:in:)(v98, (uint64_t)v127, v12);
    swift_retain();
    v100 = static os_signpost_type_t.begin.getter();
    static os_signpost_type_t.event.getter();
    if ((kdebug_is_enabled() & 1) == 0)
      goto LABEL_102;
    if (one-time initialization token for _signpostLog != -1)
      swift_once();
    v101 = (void *)_signpostLog;
    if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
    {
      v110.i32[0] = v100;
      swift_retain();
      v102 = v101;
      OSSignpostID.init(log:object:)();
      type metadata accessor for _ContiguousArrayStorage<CVarArg>();
      v103 = swift_allocObject();
      *(_OWORD *)(v103 + 16) = xmmword_235283260;
      v104 = AGGraphGetCurrentAttribute();
      LODWORD(v111.f64[0]) = *MEMORY[0x24BE096C0];
      if (v104 == LODWORD(v111.f64[0]))
        goto LABEL_111;
      v105 = (id)AGGraphGetAttributeGraph();
      v106 = AGGraphGetCounter();

      v107 = MEMORY[0x24BEE1ED8];
      *(_QWORD *)(v103 + 56) = MEMORY[0x24BEE1E88];
      *(_QWORD *)(v103 + 64) = v107;
      *(_QWORD *)(v103 + 32) = v106;
      v108 = AGGraphGetCurrentAttribute();
      if (v108 == LODWORD(v111.f64[0]))
        goto LABEL_112;
      v109 = MEMORY[0x24BEE4558];
      *(_QWORD *)(v103 + 96) = MEMORY[0x24BEE44F0];
      *(_QWORD *)(v103 + 104) = v109;
      *(_DWORD *)(v103 + 72) = v108;
      *(_QWORD *)(v103 + 136) = MEMORY[0x24BEE0D00];
      *(_QWORD *)(v103 + 144) = lazy protocol witness table accessor for type String and conformance String();
      *(_QWORD *)(v103 + 112) = 1684957515;
      *(_QWORD *)(v103 + 120) = 0xE400000000000000;
      os_signpost(_:dso:log:name:signpostID:_:_:)();
      swift_release();
      (*(void (**)(__int8 *, _QWORD))(v114 + 8))(v11, v115);
      swift_bridgeObjectRelease();
      v15 = (unint64_t)&v122;
    }
    else
    {
LABEL_102:
      swift_release();
    }
    swift_release();
    *(_QWORD *)(a4 + 64) = v99;
    if (v99)
    {
LABEL_57:
      swift_retain();
      specialized AnimatorState.addListeners(transaction:)();
      swift_release();
      swift_release();
      goto LABEL_58;
    }
LABEL_104:
    __break(1u);
LABEL_58:
    swift_release();
    v19 = v116;
    v18 = (int8x16_t)v112;
  }
  swift_retain();
  LOBYTE(v122) = 0;
  specialized AnimatorState.combine(newAnimation:newInterval:at:in:environment:)(v34, (uint64_t)v127, v12);
  swift_retain();
  v42 = static os_signpost_type_t.event.getter();
  static os_signpost_type_t.event.getter();
  if ((kdebug_is_enabled() & 1) == 0)
    goto LABEL_55;
  if (one-time initialization token for _signpostLog != -1)
    swift_once();
  v43 = (void *)_signpostLog;
  if ((OS_os_log.signpostsEnabled.getter() & 1) == 0)
  {
LABEL_55:
    swift_release_n();
    goto LABEL_56;
  }
  v110.i32[0] = v42;
  swift_retain();
  v44 = v43;
  OSSignpostID.init(log:object:)();
  type metadata accessor for _ContiguousArrayStorage<CVarArg>();
  v45 = swift_allocObject();
  *(_OWORD *)(v45 + 16) = xmmword_235283260;
  v46 = AGGraphGetCurrentAttribute();
  LODWORD(v111.f64[0]) = *MEMORY[0x24BE096C0];
  if (v46 != LODWORD(v111.f64[0]))
  {
    v47 = (id)AGGraphGetAttributeGraph();
    v48 = AGGraphGetCounter();

    v49 = MEMORY[0x24BEE1ED8];
    *(_QWORD *)(v45 + 56) = MEMORY[0x24BEE1E88];
    *(_QWORD *)(v45 + 64) = v49;
    *(_QWORD *)(v45 + 32) = v48;
    v50 = AGGraphGetCurrentAttribute();
    if (v50 == LODWORD(v111.f64[0]))
      goto LABEL_110;
    v51 = MEMORY[0x24BEE4558];
    *(_QWORD *)(v45 + 96) = MEMORY[0x24BEE44F0];
    *(_QWORD *)(v45 + 104) = v51;
    *(_DWORD *)(v45 + 72) = v50;
    *(_QWORD *)(v45 + 136) = MEMORY[0x24BEE0D00];
    *(_QWORD *)(v45 + 144) = lazy protocol witness table accessor for type String and conformance String();
    *(_QWORD *)(v45 + 112) = 1684957515;
    *(_QWORD *)(v45 + 120) = 0xE400000000000000;
    os_signpost(_:dso:log:name:signpostID:_:_:)();
    swift_release_n();
    (*(void (**)(__int8 *, _QWORD))(v114 + 8))(v11, v115);
    swift_bridgeObjectRelease();
    v15 = (unint64_t)&v122;
LABEL_56:
    if (*(_QWORD *)(a4 + 64))
      goto LABEL_57;
    goto LABEL_104;
  }
  __break(1u);
LABEL_110:
  __break(1u);
LABEL_111:
  __break(1u);
LABEL_112:
  __break(1u);
}

void specialized AnimatableAttributeHelper.update(value:defaultAnimation:environment:sampleCollector:)(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  double v4;
  double v5;
  double v6;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  double *Value;
  char v16;
  uint64_t v17;
  _DWORD *v18;
  int64x2_t v19;
  uint64_t *v20;
  float v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  float v27;
  int64x2_t v28;
  unsigned __int8 v29;
  float32x2_t v30;
  int8x16_t v31;
  float v32;
  int v33;
  void *v34;
  id v35;
  uint64_t v36;
  int v37;
  int v38;
  id v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unsigned __int8 v45;
  void *v46;
  id v47;
  uint64_t v48;
  int CurrentAttribute;
  uint64_t Counter;
  uint64_t v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  __int128 v55;
  double v56;
  uint64_t v57;
  unsigned __int8 v58;
  void (*v59)(uint64_t *, unint64_t, double);
  void *v60;
  int64x2_t v61;
  __int128 v62;
  uint64_t v63;
  unsigned __int8 v64;
  uint64_t v65;
  int8x16_t v66;
  char v67;
  __int128 v68;
  uint64_t v69;
  uint64_t v70;
  float32x2_t v71;
  float32x2_t v72;
  unint64_t v73;
  int32x2_t v74;
  float *v75;
  int64x2_t v76;
  uint64_t v77;
  uint64_t v78;
  __int128 v79;
  int8x16_t v80;
  uint64_t v81;
  int v82;
  void *v83;
  id v84;
  uint64_t v85;
  int v86;
  int v87;
  id v88;
  uint64_t v89;
  int v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  int v95;
  _QWORD *v96;
  int64x2_t v97;
  uint64_t v98;
  __int128 v99;
  int64x2_t v100;
  __int128 v101;
  float v102[7];
  char v103;
  uint64_t v104[3];
  char v105;
  _OWORD v106[3];
  unsigned __int8 v107;
  _DWORD v108[6];
  double v109;
  double v110;
  double v111;
  unsigned __int8 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  unsigned __int8 v116;
  float v117;
  int64x2_t v118;
  double v119;
  double v120;
  double v121;
  char v122;
  float32x2x2_t v123;

  v11 = (_QWORD *)type metadata accessor for OSSignpostID();
  v12 = *(v11 - 1);
  MEMORY[0x24BDAC7A8](v11);
  v100.i64[0] = (uint64_t)&v93 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for infinity == -1)
    goto LABEL_2;
LABEL_76:
  swift_once();
LABEL_2:
  v14 = -*(double *)&static Time.infinity;
  if (*(_QWORD *)(a4 + 72))
  {
    Value = (double *)AGGraphGetValue();
    if ((v16 & 1) != 0)
      v14 = *Value;
  }
  if (*(_DWORD *)(a4 + 80) == *(_DWORD *)AGGraphGetValue() >> 1)
  {
    if (*(_BYTE *)(a1 + 65) != 1)
    {
      v17 = *(_QWORD *)(a4 + 72);
      if (v17)
        goto LABEL_38;
      return;
    }
  }
  else
  {
    specialized AnimatableAttributeHelper.reset()();
    *(_BYTE *)(a1 + 65) = 1;
  }
  _ShapeStyle_Pack.Effect.animatableData.getter((uint64_t)v106);
  if ((*(_BYTE *)(a4 + 65) & 1) == 0)
  {
    LODWORD(v98) = a3;
    *(_QWORD *)&v99 = v12;
    v18 = v108;
    v19 = *(int64x2_t *)(a4 + 24);
    v4 = *(double *)(a4 + 40);
    v5 = *(double *)(a4 + 48);
    v6 = *(double *)(a4 + 56);
    LOBYTE(v20) = *(_BYTE *)(a4 + 64);
    v21 = *(float *)(a4 + 16);
    v117 = v21;
    v97 = v19;
    v118 = v19;
    v119 = v4;
    v120 = v5;
    v121 = v6;
    v122 = v20 & 1;
    v113 = v106[0];
    v114 = v106[1];
    v115 = v106[2];
    v116 = v107;
    if ((specialized static AnimatablePair.== infix(_:_:)((float *)&v113, &v117) & 1) != 0)
      goto LABEL_12;
    v96 = v11;
    AGGraphClearUpdate();
    v11 = *(_QWORD **)AGGraphGetValue();
    swift_retain();
    AGGraphSetUpdate();
    v22 = swift_retain();
    v23 = specialized find<A>(_:key:)(v22);
    if (v23)
    {
      v24 = *(_QWORD *)(v23 + 72);
      swift_retain();
      swift_release();
      if (v24)
        goto LABEL_22;
    }
    else
    {
      swift_release();
    }
    v25 = swift_retain();
    v26 = specialized closure #1 in PropertyList.subscript.getter(v25);
    swift_release();
    if ((v26 & 1) != 0)
    {
      if (one-time initialization token for velocityTracking != -1)
        goto LABEL_79;
      goto LABEL_19;
    }
    if (!a2)
    {
      swift_release();
      v11 = v96;
LABEL_12:
      v12 = v99;
      goto LABEL_37;
    }
    swift_retain();
    v24 = a2;
    goto LABEL_22;
  }
  while (1)
  {
LABEL_37:
    v44 = *((_QWORD *)&v106[2] + 1);
    v45 = v107;
    *(_QWORD *)(a4 + 16) = LODWORD(v106[0]);
    *(_OWORD *)(a4 + 24) = *(_OWORD *)((char *)v106 + 8);
    *(_OWORD *)(a4 + 40) = *(_OWORD *)((char *)&v106[1] + 8);
    *(_QWORD *)(a4 + 56) = v44;
    *(_WORD *)(a4 + 64) = v45;
    v17 = *(_QWORD *)(a4 + 72);
    if (!v17)
      return;
LABEL_38:
    swift_retain();
    _ShapeStyle_Pack.Effect.animatableData.getter((uint64_t)v106);
    v105 = 0;
    if ((specialized AnimatorState.update(_:at:environment:)((uint64_t)v106, v14) & 1) == 0)
      break;
    swift_retain();
    v18 = (_DWORD *)static os_signpost_type_t.end.getter();
    static os_signpost_type_t.event.getter();
    if ((kdebug_is_enabled() & 1) == 0)
      goto LABEL_50;
    if (one-time initialization token for _signpostLog != -1)
      swift_once();
    v20 = &OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D417TextRenderSurface_renderer;
    v46 = (void *)_signpostLog;
    if ((OS_os_log.signpostsEnabled.getter() & 1) == 0)
    {
LABEL_50:
      swift_release();
      if (!*(_QWORD *)(a4 + 72))
      {
LABEL_52:
        *(_QWORD *)(a4 + 72) = 0;
        goto LABEL_53;
      }
LABEL_51:
      specialized AnimatorState.removeListeners()();
      swift_release();
      goto LABEL_52;
    }
    *(_QWORD *)&v99 = v12;
    v96 = v11;
    swift_retain();
    v47 = v46;
    OSSignpostID.init(log:object:)();
    type metadata accessor for _ContiguousArrayStorage<CVarArg>();
    v48 = swift_allocObject();
    *(_OWORD *)(v48 + 16) = xmmword_235283260;
    CurrentAttribute = AGGraphGetCurrentAttribute();
    v21 = *MEMORY[0x24BE096C0];
    if (CurrentAttribute == *MEMORY[0x24BE096C0])
    {
      __break(1u);
    }
    else
    {
      v11 = (id)AGGraphGetAttributeGraph();
      Counter = AGGraphGetCounter();

      v51 = MEMORY[0x24BEE1ED8];
      *(_QWORD *)(v48 + 56) = MEMORY[0x24BEE1E88];
      *(_QWORD *)(v48 + 64) = v51;
      *(_QWORD *)(v48 + 32) = Counter;
      v52 = AGGraphGetCurrentAttribute();
      if (v52 != LODWORD(v21))
      {
        v53 = MEMORY[0x24BEE4558];
        *(_QWORD *)(v48 + 96) = MEMORY[0x24BEE44F0];
        *(_QWORD *)(v48 + 104) = v53;
        *(_DWORD *)(v48 + 72) = v52;
        *(_QWORD *)(v48 + 136) = MEMORY[0x24BEE0D00];
        *(_QWORD *)(v48 + 144) = lazy protocol witness table accessor for type String and conformance String();
        *(_QWORD *)(v48 + 112) = 0x746365666645;
        *(_QWORD *)(v48 + 120) = 0xE600000000000000;
        v54 = v100.i64[0];
        os_signpost(_:dso:log:name:signpostID:_:_:)();
        swift_release();
        (*(void (**)(uint64_t, _QWORD *))(v99 + 8))(v54, v96);
        swift_bridgeObjectRelease();
        if (!*(_QWORD *)(a4 + 72))
          goto LABEL_52;
        goto LABEL_51;
      }
    }
    __break(1u);
LABEL_79:
    swift_once();
LABEL_19:
    v24 = static Animation.velocityTracking;
    swift_retain();
LABEL_22:
    v27 = v21;
    v28 = *((int64x2_t *)v18 + 4);
    v29 = v116;
    if ((v20 & 1) != 0)
    {
      v4 = *((double *)&v114 + 1);
      v6 = *((double *)&v115 + 1);
      v5 = *(double *)&v115;
      v97 = *((int64x2_t *)v18 + 4);
      v12 = v99;
    }
    else
    {
      v12 = v99;
      v29 = 0;
      if ((v116 & 1) == 0)
      {
        v4 = *((double *)&v114 + 1) - v4;
        v5 = *(double *)&v115 - v5;
        v6 = *((double *)&v115 + 1) - v6;
        v30 = vsub_f32((float32x2_t)vmovn_s64(v28), (float32x2_t)vmovn_s64(v97));
        v31.i64[0] = v30.u32[0];
        v31.i64[1] = v30.u32[1];
        v97 = (int64x2_t)vorrq_s8((int8x16_t)vshll_n_s32((int32x2_t)vsub_f32((float32x2_t)vshrn_n_s64(v28, 0x20uLL), (float32x2_t)vshrn_n_s64(v97, 0x20uLL)), 0x20uLL), v31);
      }
    }
    v32 = *(float *)&v113 - v27;
    v14 = *(double *)AGGraphGetValue();
    if (*(_QWORD *)(a4 + 72))
    {
      *(float *)v108 = v32;
      *(int64x2_t *)(v18 + 2) = v97;
      v109 = v4;
      v110 = v5;
      v111 = v6;
      v112 = v29;
      swift_retain();
      v105 = 0;
      a3 = v98;
      specialized AnimatorState.combine(newAnimation:newInterval:at:in:environment:)(v24, (uint64_t)v108, v14);
      swift_retain();
      v33 = static os_signpost_type_t.event.getter();
      static os_signpost_type_t.event.getter();
      if ((kdebug_is_enabled() & 1) == 0)
        goto LABEL_34;
      v95 = v33;
      if (one-time initialization token for _signpostLog != -1)
        swift_once();
      v34 = (void *)_signpostLog;
      if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
      {
        v97.i64[0] = v24;
        swift_retain();
        v35 = v34;
        OSSignpostID.init(log:object:)();
        type metadata accessor for _ContiguousArrayStorage<CVarArg>();
        v36 = swift_allocObject();
        *(_OWORD *)(v36 + 16) = xmmword_235283260;
        v37 = AGGraphGetCurrentAttribute();
        v38 = *MEMORY[0x24BE096C0];
        if (v37 == *MEMORY[0x24BE096C0])
        {
          __break(1u);
LABEL_81:
          __break(1u);
LABEL_82:
          __break(1u);
LABEL_83:
          __break(1u);
          return;
        }
        v39 = (id)AGGraphGetAttributeGraph();
        v94 = AGGraphGetCounter();

        v40 = MEMORY[0x24BEE1ED8];
        *(_QWORD *)(v36 + 56) = MEMORY[0x24BEE1E88];
        *(_QWORD *)(v36 + 64) = v40;
        *(_QWORD *)(v36 + 32) = v94;
        v41 = AGGraphGetCurrentAttribute();
        if (v41 == v38)
          goto LABEL_81;
        v42 = MEMORY[0x24BEE4558];
        *(_QWORD *)(v36 + 96) = MEMORY[0x24BEE44F0];
        *(_QWORD *)(v36 + 104) = v42;
        *(_DWORD *)(v36 + 72) = v41;
        *(_QWORD *)(v36 + 136) = MEMORY[0x24BEE0D00];
        *(_QWORD *)(v36 + 144) = lazy protocol witness table accessor for type String and conformance String();
        *(_QWORD *)(v36 + 112) = 0x746365666645;
        *(_QWORD *)(v36 + 120) = 0xE600000000000000;
        v43 = v100.i64[0];
        os_signpost(_:dso:log:name:signpostID:_:_:)();
        swift_release_n();
        v12 = v99;
        (*(void (**)(uint64_t, _QWORD *))(v99 + 8))(v43, v96);
        swift_bridgeObjectRelease();
      }
      else
      {
LABEL_34:
        swift_release_n();
      }
      a2 = *(_QWORD *)(a4 + 72);
      if (!a2)
      {
LABEL_75:
        __break(1u);
        goto LABEL_76;
      }
    }
    else
    {
      *(float *)v108 = v32;
      *(int64x2_t *)(v18 + 2) = v97;
      v109 = v4;
      v110 = v5;
      v111 = v6;
      v112 = v29;
      type metadata accessor for CombinedAnimationState<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>>.Entry(0, &lazy cache variable for type metadata for AnimatorState<AnimatablePair<Float, _ShapeStyle_Pack.Effect.Kind.AnimatableData>>, (uint64_t (*)(uint64_t))type metadata accessor for AnimatablePair<Float, _ShapeStyle_Pack.Effect.Kind.AnimatableData>, lazy protocol witness table accessor for type AnimatablePair<Float, _ShapeStyle_Pack.Effect.Kind.AnimatableData> and conformance AnimatablePair<A, B>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatorState);
      swift_allocObject();
      swift_retain();
      v81 = swift_retain();
      a2 = specialized AnimatorState.init(animation:interval:at:in:)(v81, (uint64_t)v108, v14);
      swift_retain();
      v82 = static os_signpost_type_t.begin.getter();
      static os_signpost_type_t.event.getter();
      if ((kdebug_is_enabled() & 1) != 0)
      {
        v95 = v82;
        a3 = v98;
        if (one-time initialization token for _signpostLog != -1)
          swift_once();
        v83 = (void *)_signpostLog;
        if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
        {
          v97.i64[0] = v24;
          swift_retain();
          v84 = v83;
          OSSignpostID.init(log:object:)();
          type metadata accessor for _ContiguousArrayStorage<CVarArg>();
          v85 = swift_allocObject();
          *(_OWORD *)(v85 + 16) = xmmword_235283260;
          v86 = AGGraphGetCurrentAttribute();
          v87 = *MEMORY[0x24BE096C0];
          if (v86 == *MEMORY[0x24BE096C0])
            goto LABEL_82;
          v88 = (id)AGGraphGetAttributeGraph();
          v94 = AGGraphGetCounter();

          v89 = MEMORY[0x24BEE1ED8];
          *(_QWORD *)(v85 + 56) = MEMORY[0x24BEE1E88];
          *(_QWORD *)(v85 + 64) = v89;
          *(_QWORD *)(v85 + 32) = v94;
          v90 = AGGraphGetCurrentAttribute();
          if (v90 == v87)
            goto LABEL_83;
          v91 = MEMORY[0x24BEE4558];
          *(_QWORD *)(v85 + 96) = MEMORY[0x24BEE44F0];
          *(_QWORD *)(v85 + 104) = v91;
          *(_DWORD *)(v85 + 72) = v90;
          *(_QWORD *)(v85 + 136) = MEMORY[0x24BEE0D00];
          *(_QWORD *)(v85 + 144) = lazy protocol witness table accessor for type String and conformance String();
          *(_QWORD *)(v85 + 112) = 0x746365666645;
          *(_QWORD *)(v85 + 120) = 0xE600000000000000;
          v92 = v100.i64[0];
          os_signpost(_:dso:log:name:signpostID:_:_:)();
          swift_release();
          v12 = v99;
          (*(void (**)(uint64_t, _QWORD *))(v99 + 8))(v92, v96);
          swift_bridgeObjectRelease();
        }
        else
        {
          swift_release();
        }
      }
      else
      {
        swift_release();
        a3 = v98;
      }
      swift_release();
      *(_QWORD *)(a4 + 72) = a2;
      if (!a2)
        goto LABEL_75;
    }
    swift_retain();
    specialized AnimatorState.addListeners(transaction:)();
    swift_release();
    swift_release();
    swift_release();
    v11 = v96;
  }
  if (one-time initialization token for shared != -1)
    swift_once();
  swift_beginAccess();
  v56 = *(double *)(v17 + 96);
  v104[0] = *(_QWORD *)(v17 + 104);
  v57 = *(unsigned int *)(v17 + 164);
  v58 = *(_BYTE *)(v17 + 168);
  v59 = *(void (**)(uint64_t *, unint64_t, double))((*MEMORY[0x24BEE4EA0] & *(_QWORD *)static CoreGlue.shared)
                                                                   + 0x58);
  v60 = static CoreGlue.shared;
  LOBYTE(v102[0]) = v58;
  v59(v104, v57 | ((unint64_t)v58 << 32), v56);

LABEL_53:
  v61 = *(int64x2_t *)((char *)v106 + 8);
  v62 = *(_OWORD *)((char *)&v106[1] + 8);
  v63 = *((_QWORD *)&v106[2] + 1);
  v64 = v107;
  *(_DWORD *)(a1 + 48) = v106[0];
  if ((*(_BYTE *)(a1 + 45) & 1) != 0 || (v64 & 1) != 0)
  {
    swift_release();
    v63 = 0;
    v65 = 0;
    v66 = 0uLL;
    v67 = 1;
    v68 = 0uLL;
  }
  else
  {
    v99 = v62;
    v69 = *(unsigned __int8 *)(a1 + 44);
    v70 = *(unsigned int *)(a1 + 40);
    v71 = (float32x2_t)vmovn_s64(v61);
    v72 = (float32x2_t)vshrn_n_s64(v61, 0x20uLL);
    if (one-time initialization token for legacyInterpolation != -1)
      swift_once();
    v65 = v70 | (v69 << 32);
    *(float32x2_t *)v61.i8 = vmul_f32(v71, (float32x2_t)0x3C0000003C000000);
    *(float32x2_t *)&v55 = vmul_f32(v72, (float32x2_t)0x3C0000003C000000);
    v100 = v61;
    v101 = v55;
    swift_beginAccess();
    if ((static Color.Resolved.legacyInterpolation & 1) != 0)
    {
      swift_release();
      v73 = v100.i64[0];
      v74 = (int32x2_t)v101;
    }
    else
    {
      v103 = 2;
      v75 = v102;
      v123.val[0] = (float32x2_t)v100.i64[0];
      v123.val[1] = (float32x2_t)v101;
      vst2_f32(v75, v123);
      *(float *)v76.i32 = ResolvedGradient.ColorSpace.convertOut(_:)(v102);
      v98 = v77;
      v97.i64[0] = v78;
      v100 = v76;
      v101 = v79;
      swift_release();
      v73 = __PAIR64__(v98, v100.u32[0]);
      v74 = (int32x2_t)__PAIR64__(v97.u32[0], v101);
    }
    v67 = 0;
    v80.i64[0] = v73;
    v80.i64[1] = HIDWORD(v73);
    v66 = vorrq_s8((int8x16_t)vshll_n_s32(v74, 0x20uLL), v80);
    v68 = v99;
  }
  *(int8x16_t *)a1 = v66;
  *(_OWORD *)(a1 + 16) = v68;
  *(_QWORD *)(a1 + 32) = v63;
  *(_DWORD *)(a1 + 40) = v65;
  *(_BYTE *)(a1 + 44) = BYTE4(v65);
  *(_BYTE *)(a1 + 45) = v67;
  *(_BYTE *)(a1 + 65) = 1;
}

_DWORD *specialized AnimatableAttributeHelper.update(value:defaultAnimation:environment:sampleCollector:)(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  double v5;
  double v6;
  uint64_t v11;
  uint64_t v12;
  double v13;
  double *Value;
  char v15;
  _DWORD *result;
  uint64_t *v17;
  float64_t v18;
  char v19;
  double v20;
  double v21;
  double v22;
  unsigned int v23;
  unsigned int v24;
  float64_t v25;
  double v26;
  float64_t v27;
  double v28;
  double v29;
  int v30;
  double v31;
  double v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  double v38;
  int v39;
  void *v40;
  char v41;
  id v42;
  uint64_t v43;
  id v44;
  uint64_t Counter;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t *v50;
  void *v51;
  char v52;
  id v53;
  uint64_t v54;
  id v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  float64_t v60;
  char v61;
  double v62;
  uint64_t v63;
  float64x2_t v64;
  unsigned int v65;
  char v66;
  float64_t v67;
  void *v68;
  uint64_t v69;
  id v70;
  uint64_t v71;
  int CurrentAttribute;
  id v73;
  uint64_t v74;
  uint64_t v75;
  int v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  double v80;
  uint64_t v81;
  unsigned __int8 v82;
  void (*v83)(uint64_t *, unint64_t, double);
  void *v84;
  uint64_t v85;
  char v86;
  double v87;
  double v88;
  int v89;
  int v90;
  uint64_t v91;
  float64x2_t v92;
  uint64_t v93;
  char *v94;
  float64x2_t v95;
  int v96;
  uint64_t v97;
  char v98;
  unsigned __int8 v99;
  float64_t v100;
  char v101;
  char v102;
  float64x2_t v103;
  uint64_t v104;
  char v105;
  double v106;
  double v107;
  float64x2_t v108;
  uint64_t v109;
  char v110;
  double v111;
  double v112;
  SwiftUI::ResolvedGradient v113;
  SwiftUI::ResolvedGradient v114;

  v96 = a3;
  v11 = type metadata accessor for OSSignpostID();
  v93 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v11);
  v94 = (char *)&v89 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for infinity == -1)
    goto LABEL_2;
  while (1)
  {
    swift_once();
LABEL_2:
    v13 = -*(double *)&static Time.infinity;
    if (*(_QWORD *)(a4 + 64))
    {
      Value = (double *)AGGraphGetValue();
      if ((v15 & 1) != 0)
        v13 = *Value;
    }
    result = (_DWORD *)AGGraphGetValue();
    v17 = &lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.AccessibilityTextAttributeResolverKey> and conformance EnvironmentPropertyKey<A>;
    if (*(_DWORD *)(a4 + 72) == *result >> 1)
    {
      if (*(_BYTE *)(a1 + 48) != 1)
      {
        a5 = *(_QWORD *)(a4 + 64);
        if (a5)
          goto LABEL_57;
        return result;
      }
    }
    else
    {
      ((void (*)(void))a5)();
      *(_BYTE *)(a1 + 48) = 1;
    }
    v18 = *(double *)a1;
    v19 = *(_BYTE *)(a1 + 8);
    v20 = *(double *)(a1 + 16);
    v21 = *(double *)(a1 + 24);
    v22 = *(double *)(a1 + 32);
    v5 = *(double *)(a1 + 40);
    if (one-time initialization token for v5 != -1)
      swift_once();
    v23 = static Semantics.v5;
    if (one-time initialization token for forced != -1)
      swift_once();
    swift_beginAccess();
    if (byte_25426FAB4 == 1)
    {
      v17 = &lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.AccessibilityTextAttributeResolverKey> and conformance EnvironmentPropertyKey<A>;
      if ((dyld_program_sdk_at_least() & 1) != 0)
        goto LABEL_18;
    }
    else
    {
      v17 = &lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.AccessibilityTextAttributeResolverKey> and conformance EnvironmentPropertyKey<A>;
      if (static Semantics.forced >= v23)
      {
LABEL_18:
        v103.f64[0] = v18;
        LOBYTE(v103.f64[1]) = v19;
        swift_bridgeObjectRetain();
        v113.stops._rawValue = &v103;
        ResolvedGradientVector.init(_:)(v113);
        v25 = v108.f64[0];
        v24 = LOBYTE(v108.f64[1]);
        goto LABEL_19;
      }
    }
    v24 = 0;
    v25 = MEMORY[0x24BEE4AF8];
LABEL_19:
    v26 = v20 * 128.0;
    v6 = v21 * 128.0;
    v27 = *(double *)(a4 + 32);
    v95.f64[0] = v20 * 128.0;
    if (v27 == 0.0)
      goto LABEL_56;
    v28 = *(double *)(a4 + 48);
    v29 = *(double *)(a4 + 56);
    v30 = *(unsigned __int8 *)(a4 + 40);
    v31 = *(double *)(a4 + 16);
    v32 = *(double *)(a4 + 24);
    if (v26 == v31
      && v6 == v32
      && (specialized static Array<A>.== infix(_:_:)(*(_QWORD *)&v25, *(_QWORD *)&v27) & 1) != 0
      && v24 == v30
      && v22 == v28
      && v5 == v29)
    {
      goto LABEL_56;
    }
    LODWORD(v92.f64[0]) = v24;
    swift_bridgeObjectRetain();
    AGGraphClearUpdate();
    v33 = *(_QWORD *)AGGraphGetValue();
    swift_retain();
    AGGraphSetUpdate();
    v34 = swift_retain();
    v35 = specialized find<A>(_:key:)(v34);
    if (v35)
    {
      a5 = *(_QWORD *)(v35 + 72);
      swift_retain();
      swift_release();
      if (a5)
        goto LABEL_36;
    }
    else
    {
      swift_release();
    }
    v36 = swift_retain();
    v37 = specialized closure #1 in PropertyList.subscript.getter(v36);
    swift_release();
    if ((v37 & 1) != 0)
    {
      if (one-time initialization token for velocityTracking != -1)
        swift_once();
      a5 = static Animation.velocityTracking;
      swift_retain();
    }
    else
    {
      if (!a2)
      {
        swift_release();
        goto LABEL_55;
      }
      swift_retain();
      a5 = a2;
    }
LABEL_36:
    v91 = v11;
    v104 = *(_QWORD *)&v25;
    v105 = LOBYTE(v92.f64[0]);
    v103.f64[0] = v95.f64[0] - v31;
    v103.f64[1] = v6 - v32;
    v108.f64[0] = v27;
    LOBYTE(v108.f64[1]) = v30;
    swift_bridgeObjectRetain();
    ResolvedGradientVector.add(_:scaledBy:)((uint64_t)&v108, -1.0);
    v38 = v5 - v29;
    v106 = v22 - v28;
    v107 = v38;
    v13 = *(double *)AGGraphGetValue();
    if (!*(_QWORD *)(a4 + 64))
    {
      v108 = v103;
      v109 = v104;
      v110 = v105;
      v111 = v22 - v28;
      v112 = v38;
      type metadata accessor for CombinedAnimationState<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>>.Entry(0, &lazy cache variable for type metadata for AnimatorState<AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, ResolvedGradientVector>, AnimatablePair<CGFloat, CGFloat>>>, (uint64_t (*)(uint64_t))type metadata accessor for AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, ResolvedGradientVector>, AnimatablePair<CGFloat, CGFloat>>, lazy protocol witness table accessor for type AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, ResolvedGradientVector>, AnimatablePair<CGFloat, CGFloat>> and conformance AnimatablePair<A, B>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatorState);
      swift_allocObject();
      swift_retain();
      swift_bridgeObjectRetain();
      v49 = swift_retain();
      a2 = specialized AnimatorState.init(animation:interval:at:in:)(v49, &v108, v13, v33, (void (*)(_OWORD *))outlined retain of AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, ResolvedGradientVector>, AnimatablePair<CGFloat, CGFloat>>, (void (*)(_OWORD *))outlined release of AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, ResolvedGradientVector>, AnimatablePair<CGFloat, CGFloat>>);
      swift_retain();
      LODWORD(v50) = static os_signpost_type_t.begin.getter();
      static os_signpost_type_t.event.getter();
      if ((kdebug_is_enabled() & 1) == 0)
      {
        swift_release();
        v11 = v91;
        goto LABEL_85;
      }
      if (one-time initialization token for _signpostLog == -1)
        goto LABEL_46;
      goto LABEL_90;
    }
    v108 = v103;
    v109 = v104;
    v110 = v105;
    v111 = v22 - v28;
    v112 = v38;
    swift_retain();
    v102 = 0;
    specialized AnimatorState.combine(newAnimation:newInterval:at:in:environment:)(a5, &v108, v13);
    swift_retain();
    v39 = static os_signpost_type_t.event.getter();
    static os_signpost_type_t.event.getter();
    if ((kdebug_is_enabled() & 1) != 0)
    {
      if (one-time initialization token for _signpostLog != -1)
        swift_once();
      v40 = (void *)_signpostLog;
      v41 = OS_os_log.signpostsEnabled.getter();
      v11 = v91;
      if ((v41 & 1) != 0)
      {
        v89 = v39;
        swift_retain();
        v42 = v40;
        OSSignpostID.init(log:object:)();
        type metadata accessor for _ContiguousArrayStorage<CVarArg>();
        v43 = swift_allocObject();
        *(_OWORD *)(v43 + 16) = xmmword_235283260;
        result = (_DWORD *)AGGraphGetCurrentAttribute();
        v90 = *MEMORY[0x24BE096C0];
        if ((_DWORD)result == v90)
        {
          __break(1u);
LABEL_92:
          __break(1u);
LABEL_93:
          __break(1u);
LABEL_94:
          __break(1u);
          return result;
        }
        v44 = (id)AGGraphGetAttributeGraph();
        Counter = AGGraphGetCounter();

        v46 = MEMORY[0x24BEE1ED8];
        *(_QWORD *)(v43 + 56) = MEMORY[0x24BEE1E88];
        *(_QWORD *)(v43 + 64) = v46;
        *(_QWORD *)(v43 + 32) = Counter;
        result = (_DWORD *)AGGraphGetCurrentAttribute();
        if ((_DWORD)result == v90)
          goto LABEL_92;
        v47 = MEMORY[0x24BEE4558];
        *(_QWORD *)(v43 + 96) = MEMORY[0x24BEE44F0];
        *(_QWORD *)(v43 + 104) = v47;
        *(_DWORD *)(v43 + 72) = (_DWORD)result;
        *(_QWORD *)(v43 + 136) = MEMORY[0x24BEE0D00];
        *(_QWORD *)(v43 + 144) = lazy protocol witness table accessor for type String and conformance String();
        *(_QWORD *)(v43 + 112) = 0x746E6961505FLL;
        *(_QWORD *)(v43 + 120) = 0xE600000000000000;
        v48 = v94;
        os_signpost(_:dso:log:name:signpostID:_:_:)();
        swift_release_n();
        v11 = v91;
        (*(void (**)(char *, uint64_t))(v93 + 8))(v48, v91);
        swift_bridgeObjectRelease();
      }
      else
      {
        swift_release_n();
      }
    }
    else
    {
      swift_release_n();
      v11 = v91;
    }
    a2 = *(_QWORD *)(a4 + 64);
    if (a2)
      break;
LABEL_86:
    __break(1u);
  }
  while (1)
  {
    swift_retain();
    specialized AnimatorState.addListeners(transaction:)();
    swift_release();
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
LABEL_55:
    swift_bridgeObjectRelease();
    v17 = &lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.AccessibilityTextAttributeResolverKey> and conformance EnvironmentPropertyKey<A>;
    v24 = LODWORD(v92.f64[0]);
LABEL_56:
    result = (_DWORD *)swift_bridgeObjectRelease();
    *(float64_t *)(a4 + 16) = v95.f64[0];
    *(double *)(a4 + 24) = v6;
    *(float64_t *)(a4 + 32) = v25;
    *(_QWORD *)(a4 + 40) = v24;
    *(double *)(a4 + 48) = v22;
    *(double *)(a4 + 56) = v5;
    a5 = *(_QWORD *)(a4 + 64);
    if (!a5)
      return result;
LABEL_57:
    v60 = *(double *)a1;
    v61 = *(_BYTE *)(a1 + 8);
    v95 = *(float64x2_t *)(a1 + 16);
    v22 = *(double *)(a1 + 32);
    v62 = *(double *)(a1 + 40);
    v63 = v17[224];
    swift_retain();
    if (v63 != -1)
      swift_once();
    v64 = (float64x2_t)vdupq_n_s64(0x4060000000000000uLL);
    v65 = static Semantics.v5;
    if (one-time initialization token for forced != -1)
    {
      v92 = v64;
      swift_once();
      v64 = v92;
    }
    v95 = vmulq_f64(v95, v64);
    swift_beginAccess();
    if (byte_25426FAB4 == 1)
    {
      if ((dyld_program_sdk_at_least() & 1) == 0)
        goto LABEL_63;
    }
    else if (static Semantics.forced < v65)
    {
LABEL_63:
      v66 = 0;
      v67 = MEMORY[0x24BEE4AF8];
      goto LABEL_66;
    }
    v100 = v60;
    v101 = v61;
    swift_bridgeObjectRetain();
    v114.stops._rawValue = &v100;
    ResolvedGradientVector.init(_:)(v114);
    v67 = v103.f64[0];
    v66 = LOBYTE(v103.f64[1]);
LABEL_66:
    v103 = v95;
    v104 = *(_QWORD *)&v67;
    v105 = v66;
    v106 = v22;
    v107 = v62;
    LOBYTE(v100) = 0;
    if ((specialized AnimatorState.update(_:at:environment:)(&v103, v13) & 1) == 0)
    {
      if (one-time initialization token for shared != -1)
        swift_once();
      swift_beginAccess();
      v80 = *(double *)(a5 + 88);
      v97 = *(_QWORD *)(a5 + 96);
      v81 = *(unsigned int *)(a5 + 152);
      v82 = *(_BYTE *)(a5 + 156);
      v83 = *(void (**)(uint64_t *, unint64_t, double))((*MEMORY[0x24BEE4EA0] & *(_QWORD *)static CoreGlue.shared)
                                                                       + 0x58);
      v84 = static CoreGlue.shared;
      v99 = v82;
      v83(&v97, v81 | ((unint64_t)v82 << 32), v80);

      goto LABEL_81;
    }
    swift_retain();
    a2 = static os_signpost_type_t.end.getter();
    static os_signpost_type_t.event.getter();
    if ((kdebug_is_enabled() & 1) == 0)
      break;
    if (one-time initialization token for _signpostLog != -1)
      swift_once();
    v50 = &OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D417TextRenderSurface_renderer;
    v68 = (void *)_signpostLog;
    if ((OS_os_log.signpostsEnabled.getter() & 1) == 0)
      break;
    v69 = v11;
    swift_retain();
    v70 = v68;
    OSSignpostID.init(log:object:)();
    type metadata accessor for _ContiguousArrayStorage<CVarArg>();
    v71 = swift_allocObject();
    *(_OWORD *)(v71 + 16) = xmmword_235283260;
    CurrentAttribute = AGGraphGetCurrentAttribute();
    *(_QWORD *)&v25 = *MEMORY[0x24BE096C0];
    if (CurrentAttribute == LODWORD(v25))
    {
      __break(1u);
    }
    else
    {
      v73 = (id)AGGraphGetAttributeGraph();
      v74 = AGGraphGetCounter();

      v75 = MEMORY[0x24BEE1ED8];
      *(_QWORD *)(v71 + 56) = MEMORY[0x24BEE1E88];
      *(_QWORD *)(v71 + 64) = v75;
      *(_QWORD *)(v71 + 32) = v74;
      v76 = AGGraphGetCurrentAttribute();
      if (v76 != LODWORD(v25))
      {
        v77 = MEMORY[0x24BEE4558];
        *(_QWORD *)(v71 + 96) = MEMORY[0x24BEE44F0];
        *(_QWORD *)(v71 + 104) = v77;
        *(_DWORD *)(v71 + 72) = v76;
        *(_QWORD *)(v71 + 136) = MEMORY[0x24BEE0D00];
        *(_QWORD *)(v71 + 144) = lazy protocol witness table accessor for type String and conformance String();
        *(_QWORD *)(v71 + 112) = 0x746E6961505FLL;
        *(_QWORD *)(v71 + 120) = 0xE600000000000000;
        v78 = v94;
        os_signpost(_:dso:log:name:signpostID:_:_:)();
        swift_release();
        (*(void (**)(char *, uint64_t))(v93 + 8))(v78, v69);
        v79 = swift_bridgeObjectRelease();
        if (*(_QWORD *)(a4 + 64))
          goto LABEL_79;
        goto LABEL_80;
      }
    }
    __break(1u);
LABEL_90:
    swift_once();
LABEL_46:
    v51 = (void *)_signpostLog;
    v52 = OS_os_log.signpostsEnabled.getter();
    v11 = v91;
    if ((v52 & 1) != 0)
    {
      v89 = (int)v50;
      swift_retain();
      v53 = v51;
      OSSignpostID.init(log:object:)();
      type metadata accessor for _ContiguousArrayStorage<CVarArg>();
      v54 = swift_allocObject();
      *(_OWORD *)(v54 + 16) = xmmword_235283260;
      result = (_DWORD *)AGGraphGetCurrentAttribute();
      v90 = *MEMORY[0x24BE096C0];
      if ((_DWORD)result == v90)
        goto LABEL_93;
      v55 = (id)AGGraphGetAttributeGraph();
      v56 = AGGraphGetCounter();

      v57 = MEMORY[0x24BEE1ED8];
      *(_QWORD *)(v54 + 56) = MEMORY[0x24BEE1E88];
      *(_QWORD *)(v54 + 64) = v57;
      *(_QWORD *)(v54 + 32) = v56;
      result = (_DWORD *)AGGraphGetCurrentAttribute();
      if ((_DWORD)result == v90)
        goto LABEL_94;
      v58 = MEMORY[0x24BEE4558];
      *(_QWORD *)(v54 + 96) = MEMORY[0x24BEE44F0];
      *(_QWORD *)(v54 + 104) = v58;
      *(_DWORD *)(v54 + 72) = (_DWORD)result;
      *(_QWORD *)(v54 + 136) = MEMORY[0x24BEE0D00];
      *(_QWORD *)(v54 + 144) = lazy protocol witness table accessor for type String and conformance String();
      *(_QWORD *)(v54 + 112) = 0x746E6961505FLL;
      *(_QWORD *)(v54 + 120) = 0xE600000000000000;
      v59 = v94;
      os_signpost(_:dso:log:name:signpostID:_:_:)();
      swift_release();
      v11 = v91;
      (*(void (**)(char *, uint64_t))(v93 + 8))(v59, v91);
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_release();
    }
LABEL_85:
    swift_release();
    *(_QWORD *)(a4 + 64) = a2;
    if (!a2)
      goto LABEL_86;
  }
  v79 = swift_release();
  if (*(_QWORD *)(a4 + 64))
  {
LABEL_79:
    specialized AnimatorState.removeListeners()(v79);
    swift_release();
  }
LABEL_80:
  *(_QWORD *)(a4 + 64) = 0;
LABEL_81:
  v85 = v104;
  v86 = v105;
  v87 = v106;
  v88 = v107;
  *(float64x2_t *)(a1 + 16) = vmulq_f64(v103, (float64x2_t)vdupq_n_s64(0x3F80000000000000uLL));
  v97 = v85;
  v98 = v86;
  swift_bridgeObjectRetain();
  ResolvedGradient.animatableData.setter(&v97);
  swift_bridgeObjectRelease();
  result = (_DWORD *)swift_release();
  *(double *)(a1 + 32) = v87;
  *(double *)(a1 + 40) = v88;
  *(_BYTE *)(a1 + 48) = 1;
  return result;
}

void specialized AnimatableAttributeHelper.update(value:defaultAnimation:environment:sampleCollector:)(float32x4_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  double v17;
  double *Value;
  char v19;
  uint64_t v20;
  float v21;
  float v22;
  float v23;
  float v24;
  BOOL v25;
  BOOL v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  float v33;
  int v34;
  void *v35;
  id v36;
  uint64_t v37;
  int v38;
  id v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  float32x4_t v43;
  void *v44;
  id v45;
  uint64_t v46;
  int CurrentAttribute;
  id v48;
  uint64_t Counter;
  uint64_t v50;
  int v51;
  uint64_t v52;
  double v53;
  uint64_t v54;
  unsigned __int8 v55;
  void (*v56)(uint64_t *, unint64_t, double);
  void *v57;
  float32x4_t v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  void *v62;
  id v63;
  uint64_t v64;
  int v65;
  id v66;
  uint64_t v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  int v72;
  int v73;
  uint64_t v74;
  float v75;
  float v76;
  unsigned __int8 v77;
  uint64_t v78;
  char v79;
  float32x4_t v80[2];

  v13 = type metadata accessor for OSSignpostID();
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x24BDAC7A8](v13);
  v16 = (char *)&v70 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for infinity != -1)
    swift_once();
  v17 = -*(double *)&static Time.infinity;
  if (*(_QWORD *)(a4 + 32))
  {
    Value = (double *)AGGraphGetValue();
    if ((v19 & 1) != 0)
      v17 = *Value;
  }
  if (*(_DWORD *)(a4 + 40) != *(_DWORD *)AGGraphGetValue() >> 1)
  {
    specialized AnimatableAttributeHelper.reset()();
    a1[1].i8[0] = 1;
LABEL_11:
    v21 = a1->f32[2];
    v22 = a1->f32[3];
    v7 = a1->f32[0] * 128.0;
    v9 = a1->f32[1] * 128.0;
    v23 = v21 * 128.0;
    v24 = v22 * 128.0;
    if ((*(_BYTE *)(a4 + 28) & 1) != 0)
      goto LABEL_43;
    v4 = *(float *)(a4 + 12);
    v6 = *(float *)(a4 + 16);
    v8 = *(float *)(a4 + 20);
    v5 = *(float *)(a4 + 24);
    v25 = v7 == v4 && v9 == v6;
    v26 = v25 && v23 == v8;
    if (v26 && v24 == v5)
      goto LABEL_43;
    v75 = v21 * 128.0;
    v76 = v22 * 128.0;
    AGGraphClearUpdate();
    AGGraphGetValue();
    swift_retain();
    AGGraphSetUpdate();
    v28 = swift_retain();
    v29 = specialized find<A>(_:key:)(v28);
    if (v29)
    {
      v30 = *(_QWORD *)(v29 + 72);
      swift_retain();
      swift_release();
      if (v30)
        goto LABEL_31;
    }
    else
    {
      swift_release();
    }
    v31 = swift_retain();
    v32 = specialized closure #1 in PropertyList.subscript.getter(v31);
    swift_release();
    if ((v32 & 1) == 0)
    {
      if (!a2)
        goto LABEL_42;
      swift_retain();
      v30 = a2;
      goto LABEL_31;
    }
    if (one-time initialization token for velocityTracking != -1)
      goto LABEL_74;
    goto LABEL_28;
  }
  if (a1[1].i8[0] == 1)
    goto LABEL_11;
  v20 = *(_QWORD *)(a4 + 32);
  if (!v20)
    return;
  while (1)
  {
    v43.i64[0] = 0x4300000043000000;
    v43.i64[1] = 0x4300000043000000;
    v80[0] = vmulq_f32(*a1, v43);
    swift_retain();
    v79 = 0;
    if ((specialized AnimatorState.update(_:at:environment:)(v80, v17) & 1) == 0)
    {
      if (one-time initialization token for shared != -1)
        swift_once();
      swift_beginAccess();
      v53 = *(double *)(v20 + 56);
      v78 = *(_QWORD *)(v20 + 64);
      v54 = *(unsigned int *)(v20 + 88);
      v55 = *(_BYTE *)(v20 + 92);
      v56 = *(void (**)(uint64_t *, unint64_t, double))((*MEMORY[0x24BEE4EA0] & *(_QWORD *)static CoreGlue.shared)
                                                                       + 0x58);
      v57 = static CoreGlue.shared;
      v77 = v55;
      v56(&v78, v54 | ((unint64_t)v55 << 32), v53);
      swift_release();

      goto LABEL_59;
    }
    swift_retain();
    static os_signpost_type_t.end.getter();
    static os_signpost_type_t.event.getter();
    if ((kdebug_is_enabled() & 1) == 0)
      goto LABEL_56;
    if (one-time initialization token for _signpostLog != -1)
      swift_once();
    v44 = (void *)_signpostLog;
    if ((OS_os_log.signpostsEnabled.getter() & 1) == 0)
    {
LABEL_56:
      swift_release();
      if (*(_QWORD *)(a4 + 32))
      {
LABEL_57:
        specialized AnimatorState.removeListeners()();
        swift_release();
      }
LABEL_58:
      swift_release();
      *(_QWORD *)(a4 + 32) = 0;
LABEL_59:
      v58.i64[0] = 0x3C0000003C000000;
      v58.i64[1] = 0x3C0000003C000000;
      *a1 = vmulq_f32(v80[0], v58);
      a1[1].i8[0] = 1;
      return;
    }
    v74 = v14;
    swift_retain();
    v45 = v44;
    OSSignpostID.init(log:object:)();
    type metadata accessor for _ContiguousArrayStorage<CVarArg>();
    v46 = swift_allocObject();
    *(_OWORD *)(v46 + 16) = xmmword_235283260;
    CurrentAttribute = AGGraphGetCurrentAttribute();
    v14 = *MEMORY[0x24BE096C0];
    if (CurrentAttribute == (_DWORD)v14)
    {
      __break(1u);
    }
    else
    {
      v48 = (id)AGGraphGetAttributeGraph();
      Counter = AGGraphGetCounter();

      v50 = MEMORY[0x24BEE1ED8];
      *(_QWORD *)(v46 + 56) = MEMORY[0x24BEE1E88];
      *(_QWORD *)(v46 + 64) = v50;
      *(_QWORD *)(v46 + 32) = Counter;
      v51 = AGGraphGetCurrentAttribute();
      if (v51 != (_DWORD)v14)
      {
        v52 = MEMORY[0x24BEE4558];
        *(_QWORD *)(v46 + 96) = MEMORY[0x24BEE44F0];
        *(_QWORD *)(v46 + 104) = v52;
        *(_DWORD *)(v46 + 72) = v51;
        *(_QWORD *)(v46 + 136) = MEMORY[0x24BEE0D00];
        *(_QWORD *)(v46 + 144) = lazy protocol witness table accessor for type String and conformance String();
        *(_QWORD *)(v46 + 112) = 0x6465766C6F736552;
        *(_QWORD *)(v46 + 120) = 0xEF746E6172626956;
        os_signpost(_:dso:log:name:signpostID:_:_:)();
        swift_release();
        (*(void (**)(char *, uint64_t))(v74 + 8))(v16, v13);
        swift_bridgeObjectRelease();
        if (*(_QWORD *)(a4 + 32))
          goto LABEL_57;
        goto LABEL_58;
      }
    }
    __break(1u);
LABEL_74:
    swift_once();
LABEL_28:
    v30 = static Animation.velocityTracking;
    swift_retain();
LABEL_31:
    v33 = v7 - v4;
    v6 = v9 - v6;
    v4 = v75 - v8;
    v5 = v76 - v5;
    v17 = *(double *)AGGraphGetValue();
    if (*(_QWORD *)(a4 + 32))
      break;
    type metadata accessor for CombinedAnimationState<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>>.Entry(0, &lazy cache variable for type metadata for AnimatorState<AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>, type metadata accessor for AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>, lazy protocol witness table accessor for type AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>> and conformance AnimatablePair<A, B>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatorState);
    swift_allocObject();
    swift_retain();
    v59 = swift_retain();
    v60 = specialized AnimatorState.init(animation:interval:at:in:)(v59, v33, v6, v4, v5, v17);
    swift_retain();
    v61 = static os_signpost_type_t.begin.getter();
    static os_signpost_type_t.event.getter();
    if ((kdebug_is_enabled() & 1) == 0)
      goto LABEL_68;
    v73 = v61;
    if (one-time initialization token for _signpostLog != -1)
      swift_once();
    v62 = (void *)_signpostLog;
    if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
    {
      v74 = v14;
      swift_retain();
      v63 = v62;
      OSSignpostID.init(log:object:)();
      type metadata accessor for _ContiguousArrayStorage<CVarArg>();
      v64 = swift_allocObject();
      *(_OWORD *)(v64 + 16) = xmmword_235283260;
      v65 = AGGraphGetCurrentAttribute();
      v72 = *MEMORY[0x24BE096C0];
      if (v65 == v72)
        goto LABEL_77;
      v66 = (id)AGGraphGetAttributeGraph();
      v71 = AGGraphGetCounter();

      v67 = MEMORY[0x24BEE1ED8];
      *(_QWORD *)(v64 + 56) = MEMORY[0x24BEE1E88];
      *(_QWORD *)(v64 + 64) = v67;
      *(_QWORD *)(v64 + 32) = v71;
      v68 = AGGraphGetCurrentAttribute();
      if (v68 == v72)
        goto LABEL_78;
      v69 = MEMORY[0x24BEE4558];
      *(_QWORD *)(v64 + 96) = MEMORY[0x24BEE44F0];
      *(_QWORD *)(v64 + 104) = v69;
      *(_DWORD *)(v64 + 72) = v68;
      *(_QWORD *)(v64 + 136) = MEMORY[0x24BEE0D00];
      *(_QWORD *)(v64 + 144) = lazy protocol witness table accessor for type String and conformance String();
      *(_QWORD *)(v64 + 112) = 0x6465766C6F736552;
      *(_QWORD *)(v64 + 120) = 0xEF746E6172626956;
      os_signpost(_:dso:log:name:signpostID:_:_:)();
      swift_release();
      v14 = v74;
      (*(void (**)(char *, uint64_t))(v74 + 8))(v16, v13);
      swift_bridgeObjectRelease();
    }
    else
    {
LABEL_68:
      swift_release();
    }
    swift_release();
    *(_QWORD *)(a4 + 32) = v60;
    if (v60)
    {
LABEL_41:
      swift_retain();
      specialized AnimatorState.addListeners(transaction:)();
      swift_release();
      swift_release();
      goto LABEL_42;
    }
LABEL_70:
    __break(1u);
LABEL_42:
    swift_release();
    v23 = v75;
    v24 = v76;
LABEL_43:
    *(_QWORD *)(a4 + 12) = LODWORD(v7) | ((unint64_t)LODWORD(v9) << 32);
    *(_QWORD *)(a4 + 20) = LODWORD(v23) | ((unint64_t)LODWORD(v24) << 32);
    *(_BYTE *)(a4 + 28) = 0;
    v20 = *(_QWORD *)(a4 + 32);
    if (!v20)
      return;
  }
  swift_retain();
  v79 = 0;
  specialized AnimatorState.combine(newAnimation:newInterval:at:in:environment:)(v30, v33, v6, v4, v5, v17);
  swift_retain();
  v34 = static os_signpost_type_t.event.getter();
  static os_signpost_type_t.event.getter();
  if ((kdebug_is_enabled() & 1) == 0)
    goto LABEL_39;
  v73 = v34;
  if (one-time initialization token for _signpostLog != -1)
    swift_once();
  v35 = (void *)_signpostLog;
  if ((OS_os_log.signpostsEnabled.getter() & 1) == 0)
  {
LABEL_39:
    swift_release_n();
    goto LABEL_40;
  }
  v74 = v14;
  swift_retain();
  v36 = v35;
  OSSignpostID.init(log:object:)();
  type metadata accessor for _ContiguousArrayStorage<CVarArg>();
  v37 = swift_allocObject();
  *(_OWORD *)(v37 + 16) = xmmword_235283260;
  v38 = AGGraphGetCurrentAttribute();
  v72 = *MEMORY[0x24BE096C0];
  if (v38 != v72)
  {
    v39 = (id)AGGraphGetAttributeGraph();
    v71 = AGGraphGetCounter();

    v40 = MEMORY[0x24BEE1ED8];
    *(_QWORD *)(v37 + 56) = MEMORY[0x24BEE1E88];
    *(_QWORD *)(v37 + 64) = v40;
    *(_QWORD *)(v37 + 32) = v71;
    v41 = AGGraphGetCurrentAttribute();
    if (v41 == v72)
      goto LABEL_76;
    v42 = MEMORY[0x24BEE4558];
    *(_QWORD *)(v37 + 96) = MEMORY[0x24BEE44F0];
    *(_QWORD *)(v37 + 104) = v42;
    *(_DWORD *)(v37 + 72) = v41;
    *(_QWORD *)(v37 + 136) = MEMORY[0x24BEE0D00];
    *(_QWORD *)(v37 + 144) = lazy protocol witness table accessor for type String and conformance String();
    *(_QWORD *)(v37 + 112) = 0x6465766C6F736552;
    *(_QWORD *)(v37 + 120) = 0xEF746E6172626956;
    os_signpost(_:dso:log:name:signpostID:_:_:)();
    swift_release_n();
    v14 = v74;
    (*(void (**)(char *, uint64_t))(v74 + 8))(v16, v13);
    swift_bridgeObjectRelease();
LABEL_40:
    if (*(_QWORD *)(a4 + 32))
      goto LABEL_41;
    goto LABEL_70;
  }
  __break(1u);
LABEL_76:
  __break(1u);
LABEL_77:
  __break(1u);
LABEL_78:
  __break(1u);
}

_DWORD *specialized AnimatableAttributeHelper.update(value:defaultAnimation:environment:sampleCollector:)(_BYTE *a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  double v11;
  double *Value;
  char v13;
  _DWORD *result;
  _BYTE *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  BOOL v24;
  int v25;
  void *v26;
  id v27;
  uint64_t v28;
  int v29;
  id v30;
  uint64_t Counter;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  __int128 v35;
  void (*v36)(_OWORD *__return_ptr, uint64_t);
  uint64_t v37;
  uint64_t v38;
  void *v39;
  id v40;
  uint64_t v41;
  int CurrentAttribute;
  uint64_t v43;
  int v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  double v48;
  uint64_t v49;
  unsigned __int8 v50;
  void (*v51)(_OWORD *, unint64_t, double);
  void *v52;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void *v57;
  id v58;
  uint64_t v59;
  int v60;
  id v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  _BYTE *v67;
  uint64_t v68;
  int v69;
  uint64_t v70;
  char *v71;
  _QWORD v72[5];
  _OWORD v73[2];
  uint64_t v74;
  _OWORD v75[2];
  uint64_t v76;
  _OWORD v77[2];
  uint64_t v78;

  v9 = type metadata accessor for OSSignpostID();
  v70 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v71 = (char *)&v66 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for infinity != -1)
    swift_once();
  v11 = -*(double *)&static Time.infinity;
  if (*(_QWORD *)(a4 + 56))
  {
    Value = (double *)AGGraphGetValue();
    if ((v13 & 1) != 0)
      v11 = *Value;
  }
  result = (_DWORD *)AGGraphGetValue();
  if (*(_DWORD *)(a4 + 64) != *result >> 1)
  {
    result = (_DWORD *)specialized AnimatableAttributeHelper.reset()();
    a1[8] = 1;
    v15 = a1 + 8;
LABEL_11:
    (*(void (**)(_OWORD *__return_ptr, _DWORD *))(**(_QWORD **)a1 + 96))(v77, result);
    v4 = a4 + 16;
    outlined init with copy of _AnyAnimatableData?(a4 + 16, (uint64_t)v73);
    if (!*(_QWORD *)&v73[0])
    {
      outlined destroy of _AnyAnimatableData?((uint64_t)v73);
      goto LABEL_42;
    }
    v75[0] = v73[0];
    v75[1] = v73[1];
    v17 = *(_QWORD *)&v73[0];
    v76 = v74;
    if (*(_QWORD *)&v77[0] == *(_QWORD *)&v73[0]
      && ((*(uint64_t (**)(char *, char *))(*(_QWORD *)&v77[0] + 88))((char *)v77 + 8, (char *)v75 + 8) & 1) != 0)
    {
      outlined destroy of _AnyAnimatableData((uint64_t)v75);
      goto LABEL_42;
    }
    v69 = a3;
    AGGraphClearUpdate();
    AGGraphGetValue();
    swift_retain();
    AGGraphSetUpdate();
    v18 = swift_retain();
    v19 = specialized find<A>(_:key:)(v18);
    if (v19)
    {
      v20 = *(_QWORD *)(v19 + 72);
      swift_retain();
      swift_release();
      if (v20)
        goto LABEL_26;
    }
    else
    {
      swift_release();
    }
    v21 = swift_retain();
    v22 = specialized closure #1 in PropertyList.subscript.getter(v21);
    swift_release();
    if ((v22 & 1) != 0)
    {
      if (one-time initialization token for velocityTracking != -1)
        swift_once();
      v20 = static Animation.velocityTracking;
      swift_retain();
    }
    else
    {
      if (!a2)
        goto LABEL_72;
      swift_retain();
      v20 = a2;
    }
LABEL_26:
    v68 = v9;
    outlined init with copy of _AnyAnimatableData(v77, v73);
    v23 = *(_QWORD *)&v73[0];
    if (*(_QWORD *)&v73[0] == v17)
    {
      (*(void (**)(char *, char *))(v17 + 104))((char *)v73 + 8, (char *)v75 + 8);
      v9 = v68;
    }
    else
    {
      v24 = v23 == type metadata accessor for ZeroVTable();
      v9 = v68;
      if (v24)
      {
        outlined destroy of _AnyAnimatableData((uint64_t)v73);
        outlined init with copy of _AnyAnimatableData(v75, v73);
        (*(void (**)(char *))(*(_QWORD *)&v73[0] + 112))((char *)v73 + 8);
      }
    }
    v11 = *(double *)AGGraphGetValue();
    if (!*(_QWORD *)(a4 + 56))
    {
      outlined init with copy of _AnyAnimatableData(v73, v72);
      type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for AnimatorState<_AnyAnimatableData>, (uint64_t (*)(void))lazy protocol witness table accessor for type _AnyAnimatableData and conformance _AnyAnimatableData, (uint64_t)&type metadata for _AnyAnimatableData, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatorState);
      swift_allocObject();
      swift_retain();
      v56 = swift_retain();
      v38 = specialized AnimatorState.init(animation:interval:at:in:)(v56, v72, v11);
      swift_retain();
      LODWORD(v36) = static os_signpost_type_t.begin.getter();
      static os_signpost_type_t.event.getter();
      if ((kdebug_is_enabled() & 1) == 0)
        goto LABEL_69;
      if (one-time initialization token for _signpostLog != -1)
        goto LABEL_75;
      goto LABEL_65;
    }
    swift_retain();
    LOBYTE(v72[0]) = 0;
    specialized AnimatorState.combine(newAnimation:newInterval:at:in:environment:)(v20, (double *)v73, v11);
    swift_retain();
    v25 = static os_signpost_type_t.event.getter();
    static os_signpost_type_t.event.getter();
    if ((kdebug_is_enabled() & 1) != 0)
    {
      if (one-time initialization token for _signpostLog != -1)
        swift_once();
      v26 = (void *)_signpostLog;
      if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
      {
        HIDWORD(v66) = v25;
        v67 = v15;
        swift_retain();
        v27 = v26;
        OSSignpostID.init(log:object:)();
        type metadata accessor for _ContiguousArrayStorage<CVarArg>();
        v28 = swift_allocObject();
        *(_OWORD *)(v28 + 16) = xmmword_235283260;
        result = (_DWORD *)AGGraphGetCurrentAttribute();
        v29 = *MEMORY[0x24BE096C0];
        if ((_DWORD)result == *MEMORY[0x24BE096C0])
        {
          __break(1u);
        }
        else
        {
          v30 = (id)AGGraphGetAttributeGraph();
          Counter = AGGraphGetCounter();

          v32 = MEMORY[0x24BEE1ED8];
          *(_QWORD *)(v28 + 56) = MEMORY[0x24BEE1E88];
          *(_QWORD *)(v28 + 64) = v32;
          *(_QWORD *)(v28 + 32) = Counter;
          result = (_DWORD *)AGGraphGetCurrentAttribute();
          if ((_DWORD)result != v29)
          {
            v33 = MEMORY[0x24BEE4558];
            *(_QWORD *)(v28 + 96) = MEMORY[0x24BEE44F0];
            *(_QWORD *)(v28 + 104) = v33;
            *(_DWORD *)(v28 + 72) = (_DWORD)result;
            *(_QWORD *)(v28 + 136) = MEMORY[0x24BEE0D00];
            *(_QWORD *)(v28 + 144) = lazy protocol witness table accessor for type String and conformance String();
            *(_QWORD *)(v28 + 112) = 0x6570616853796E41;
            *(_QWORD *)(v28 + 120) = 0xE800000000000000;
            v34 = v71;
            os_signpost(_:dso:log:name:signpostID:_:_:)();
            swift_release_n();
            v9 = v68;
            (*(void (**)(char *, uint64_t))(v70 + 8))(v34, v68);
            swift_bridgeObjectRelease();
            v15 = v67;
            goto LABEL_40;
          }
        }
        __break(1u);
LABEL_78:
        __break(1u);
LABEL_79:
        __break(1u);
        return result;
      }
    }
    swift_release_n();
LABEL_40:
    if (!*(_QWORD *)(a4 + 56))
      goto LABEL_71;
    goto LABEL_41;
  }
  v15 = a1 + 8;
  if (a1[8] == 1)
    goto LABEL_11;
  v16 = *(_QWORD *)(a4 + 56);
  if (v16)
  {
    while (1)
    {
      v36 = *(void (**)(_OWORD *__return_ptr, uint64_t))(**(_QWORD **)a1 + 96);
      v37 = swift_retain();
      v36(v77, v37);
      LOBYTE(v75[0]) = 0;
      if ((specialized AnimatorState.update(_:at:environment:)(v77, v11) & 1) == 0)
        break;
      v38 = (uint64_t)v15;
      swift_retain();
      v15 = (_BYTE *)static os_signpost_type_t.end.getter();
      static os_signpost_type_t.event.getter();
      if ((kdebug_is_enabled() & 1) == 0)
        goto LABEL_54;
      if (one-time initialization token for _signpostLog != -1)
        swift_once();
      v39 = (void *)_signpostLog;
      if ((OS_os_log.signpostsEnabled.getter() & 1) == 0)
      {
LABEL_54:
        v47 = swift_release();
        goto LABEL_55;
      }
      v68 = v9;
      swift_retain();
      v40 = v39;
      OSSignpostID.init(log:object:)();
      type metadata accessor for _ContiguousArrayStorage<CVarArg>();
      v41 = swift_allocObject();
      *(_OWORD *)(v41 + 16) = xmmword_235283260;
      CurrentAttribute = AGGraphGetCurrentAttribute();
      v9 = *MEMORY[0x24BE096C0];
      if (CurrentAttribute == (_DWORD)v9)
      {
        __break(1u);
      }
      else
      {
        v36 = (void (*)(_OWORD *__return_ptr, uint64_t))(id)AGGraphGetAttributeGraph();
        v4 = AGGraphGetCounter();

        v43 = MEMORY[0x24BEE1ED8];
        *(_QWORD *)(v41 + 56) = MEMORY[0x24BEE1E88];
        *(_QWORD *)(v41 + 64) = v43;
        *(_QWORD *)(v41 + 32) = v4;
        v44 = AGGraphGetCurrentAttribute();
        if (v44 != (_DWORD)v9)
        {
          v45 = MEMORY[0x24BEE4558];
          *(_QWORD *)(v41 + 96) = MEMORY[0x24BEE44F0];
          *(_QWORD *)(v41 + 104) = v45;
          *(_DWORD *)(v41 + 72) = v44;
          *(_QWORD *)(v41 + 136) = MEMORY[0x24BEE0D00];
          *(_QWORD *)(v41 + 144) = lazy protocol witness table accessor for type String and conformance String();
          *(_QWORD *)(v41 + 112) = 0x6570616853796E41;
          *(_QWORD *)(v41 + 120) = 0xE800000000000000;
          v46 = v71;
          os_signpost(_:dso:log:name:signpostID:_:_:)();
          swift_release();
          (*(void (**)(char *, uint64_t))(v70 + 8))(v46, v68);
          v47 = swift_bridgeObjectRelease();
LABEL_55:
          v15 = (_BYTE *)v38;
          if (*(_QWORD *)(a4 + 56))
          {
            specialized AnimatorState.removeListeners()(v47);
            swift_release();
          }
          *(_QWORD *)(a4 + 56) = 0;
          goto LABEL_58;
        }
      }
      __break(1u);
LABEL_75:
      swift_once();
LABEL_65:
      v57 = (void *)_signpostLog;
      if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
      {
        HIDWORD(v66) = (_DWORD)v36;
        v67 = v15;
        swift_retain();
        v58 = v57;
        OSSignpostID.init(log:object:)();
        type metadata accessor for _ContiguousArrayStorage<CVarArg>();
        v59 = swift_allocObject();
        *(_OWORD *)(v59 + 16) = xmmword_235283260;
        result = (_DWORD *)AGGraphGetCurrentAttribute();
        v60 = *MEMORY[0x24BE096C0];
        if ((_DWORD)result == *MEMORY[0x24BE096C0])
          goto LABEL_78;
        v61 = (id)AGGraphGetAttributeGraph();
        v62 = AGGraphGetCounter();

        v63 = MEMORY[0x24BEE1ED8];
        *(_QWORD *)(v59 + 56) = MEMORY[0x24BEE1E88];
        *(_QWORD *)(v59 + 64) = v63;
        *(_QWORD *)(v59 + 32) = v62;
        result = (_DWORD *)AGGraphGetCurrentAttribute();
        if ((_DWORD)result == v60)
          goto LABEL_79;
        v64 = MEMORY[0x24BEE4558];
        *(_QWORD *)(v59 + 96) = MEMORY[0x24BEE44F0];
        *(_QWORD *)(v59 + 104) = v64;
        *(_DWORD *)(v59 + 72) = (_DWORD)result;
        *(_QWORD *)(v59 + 136) = MEMORY[0x24BEE0D00];
        *(_QWORD *)(v59 + 144) = lazy protocol witness table accessor for type String and conformance String();
        *(_QWORD *)(v59 + 112) = 0x6570616853796E41;
        *(_QWORD *)(v59 + 120) = 0xE800000000000000;
        v65 = v71;
        os_signpost(_:dso:log:name:signpostID:_:_:)();
        swift_release();
        v9 = v68;
        (*(void (**)(char *, uint64_t))(v70 + 8))(v65, v68);
        swift_bridgeObjectRelease();
        v15 = v67;
      }
      else
      {
LABEL_69:
        swift_release();
      }
      swift_release();
      *(_QWORD *)(a4 + 56) = v38;
      if (v38)
      {
LABEL_41:
        swift_retain();
        specialized AnimatorState.addListeners(transaction:)();
        swift_release();
        swift_release();
        swift_release();
        outlined destroy of _AnyAnimatableData((uint64_t)v73);
        outlined destroy of _AnyAnimatableData((uint64_t)v75);
      }
      else
      {
LABEL_71:
        __break(1u);
LABEL_72:
        outlined destroy of _AnyAnimatableData((uint64_t)v75);
        swift_release();
      }
LABEL_42:
      result = (_DWORD *)outlined destroy of _AnyAnimatableData?(v4);
      v35 = v77[1];
      *(_OWORD *)v4 = v77[0];
      *(_OWORD *)(v4 + 16) = v35;
      *(_QWORD *)(v4 + 32) = v78;
      v16 = *(_QWORD *)(a4 + 56);
      if (!v16)
        return result;
    }
    if (one-time initialization token for shared != -1)
      swift_once();
    swift_beginAccess();
    v48 = *(double *)(v16 + 80);
    *(_QWORD *)&v75[0] = *(_QWORD *)(v16 + 88);
    v49 = *(unsigned int *)(v16 + 136);
    v50 = *(_BYTE *)(v16 + 140);
    v51 = *(void (**)(_OWORD *, unint64_t, double))((*MEMORY[0x24BEE4EA0] & *(_QWORD *)static CoreGlue.shared)
                                                                    + 0x58);
    v52 = static CoreGlue.shared;
    LOBYTE(v73[0]) = v50;
    v51(v75, v49 | ((unint64_t)v50 << 32), v48);

LABEL_58:
    outlined init with copy of _AnyAnimatableData(v77, v75);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v54 = *(_QWORD *)a1;
    if (isUniquelyReferenced_nonNull_native)
    {
      outlined init with copy of _AnyAnimatableData(v75, v73);
      (*(void (**)(_OWORD *))(*(_QWORD *)v54 + 104))(v73);
      outlined destroy of _AnyAnimatableData((uint64_t)v75);
    }
    else
    {
      v55 = (*(uint64_t (**)(_OWORD *))(*(_QWORD *)v54 + 120))(v75);
      outlined destroy of _AnyAnimatableData((uint64_t)v75);
      *(_QWORD *)a1 = v55;
      swift_release();
    }
    swift_release();
    result = (_DWORD *)outlined destroy of _AnyAnimatableData((uint64_t)v77);
    *v15 = 1;
  }
  return result;
}

{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  double v11;
  double *Value;
  char v13;
  _DWORD *result;
  _BYTE *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  BOOL v24;
  int v25;
  void *v26;
  id v27;
  uint64_t v28;
  int v29;
  id v30;
  uint64_t Counter;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  __int128 v35;
  void (*v36)(_OWORD *__return_ptr, uint64_t);
  uint64_t v37;
  uint64_t v38;
  void *v39;
  id v40;
  uint64_t v41;
  int CurrentAttribute;
  uint64_t v43;
  int v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  double v48;
  uint64_t v49;
  unsigned __int8 v50;
  void (*v51)(_OWORD *, unint64_t, double);
  void *v52;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void *v57;
  id v58;
  uint64_t v59;
  int v60;
  id v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  _BYTE *v67;
  uint64_t v68;
  int v69;
  uint64_t v70;
  char *v71;
  _QWORD v72[5];
  _OWORD v73[2];
  uint64_t v74;
  _OWORD v75[2];
  uint64_t v76;
  _OWORD v77[2];
  uint64_t v78;

  v9 = type metadata accessor for OSSignpostID();
  v70 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v71 = (char *)&v66 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for infinity != -1)
    swift_once();
  v11 = -*(double *)&static Time.infinity;
  if (*(_QWORD *)(a4 + 56))
  {
    Value = (double *)AGGraphGetValue();
    if ((v13 & 1) != 0)
      v11 = *Value;
  }
  result = (_DWORD *)AGGraphGetValue();
  if (*(_DWORD *)(a4 + 64) != *result >> 1)
  {
    result = (_DWORD *)specialized AnimatableAttributeHelper.reset()();
    a1[8] = 1;
    v15 = a1 + 8;
LABEL_11:
    (*(void (**)(_OWORD *__return_ptr, _DWORD *))(**(_QWORD **)a1 + 144))(v77, result);
    v4 = a4 + 16;
    outlined init with copy of _AnyAnimatableData?(a4 + 16, (uint64_t)v73);
    if (!*(_QWORD *)&v73[0])
    {
      outlined destroy of _AnyAnimatableData?((uint64_t)v73);
      goto LABEL_42;
    }
    v75[0] = v73[0];
    v75[1] = v73[1];
    v17 = *(_QWORD *)&v73[0];
    v76 = v74;
    if (*(_QWORD *)&v77[0] == *(_QWORD *)&v73[0]
      && ((*(uint64_t (**)(char *, char *))(*(_QWORD *)&v77[0] + 88))((char *)v77 + 8, (char *)v75 + 8) & 1) != 0)
    {
      outlined destroy of _AnyAnimatableData((uint64_t)v75);
      goto LABEL_42;
    }
    v69 = a3;
    AGGraphClearUpdate();
    AGGraphGetValue();
    swift_retain();
    AGGraphSetUpdate();
    v18 = swift_retain();
    v19 = specialized find<A>(_:key:)(v18);
    if (v19)
    {
      v20 = *(_QWORD *)(v19 + 72);
      swift_retain();
      swift_release();
      if (v20)
        goto LABEL_26;
    }
    else
    {
      swift_release();
    }
    v21 = swift_retain();
    v22 = specialized closure #1 in PropertyList.subscript.getter(v21);
    swift_release();
    if ((v22 & 1) != 0)
    {
      if (one-time initialization token for velocityTracking != -1)
        swift_once();
      v20 = static Animation.velocityTracking;
      swift_retain();
    }
    else
    {
      if (!a2)
        goto LABEL_72;
      swift_retain();
      v20 = a2;
    }
LABEL_26:
    v68 = v9;
    outlined init with copy of _AnyAnimatableData(v77, v73);
    v23 = *(_QWORD *)&v73[0];
    if (*(_QWORD *)&v73[0] == v17)
    {
      (*(void (**)(char *, char *))(v17 + 104))((char *)v73 + 8, (char *)v75 + 8);
      v9 = v68;
    }
    else
    {
      v24 = v23 == type metadata accessor for ZeroVTable();
      v9 = v68;
      if (v24)
      {
        outlined destroy of _AnyAnimatableData((uint64_t)v73);
        outlined init with copy of _AnyAnimatableData(v75, v73);
        (*(void (**)(char *))(*(_QWORD *)&v73[0] + 112))((char *)v73 + 8);
      }
    }
    v11 = *(double *)AGGraphGetValue();
    if (!*(_QWORD *)(a4 + 56))
    {
      outlined init with copy of _AnyAnimatableData(v73, v72);
      type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for AnimatorState<_AnyAnimatableData>, (uint64_t (*)(void))lazy protocol witness table accessor for type _AnyAnimatableData and conformance _AnyAnimatableData, (uint64_t)&type metadata for _AnyAnimatableData, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatorState);
      swift_allocObject();
      swift_retain();
      v56 = swift_retain();
      v38 = specialized AnimatorState.init(animation:interval:at:in:)(v56, v72, v11);
      swift_retain();
      LODWORD(v36) = static os_signpost_type_t.begin.getter();
      static os_signpost_type_t.event.getter();
      if ((kdebug_is_enabled() & 1) == 0)
        goto LABEL_69;
      if (one-time initialization token for _signpostLog != -1)
        goto LABEL_75;
      goto LABEL_65;
    }
    swift_retain();
    LOBYTE(v72[0]) = 0;
    specialized AnimatorState.combine(newAnimation:newInterval:at:in:environment:)(v20, (double *)v73, v11);
    swift_retain();
    v25 = static os_signpost_type_t.event.getter();
    static os_signpost_type_t.event.getter();
    if ((kdebug_is_enabled() & 1) != 0)
    {
      if (one-time initialization token for _signpostLog != -1)
        swift_once();
      v26 = (void *)_signpostLog;
      if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
      {
        HIDWORD(v66) = v25;
        v67 = v15;
        swift_retain();
        v27 = v26;
        OSSignpostID.init(log:object:)();
        type metadata accessor for _ContiguousArrayStorage<CVarArg>();
        v28 = swift_allocObject();
        *(_OWORD *)(v28 + 16) = xmmword_235283260;
        result = (_DWORD *)AGGraphGetCurrentAttribute();
        v29 = *MEMORY[0x24BE096C0];
        if ((_DWORD)result == *MEMORY[0x24BE096C0])
        {
          __break(1u);
        }
        else
        {
          v30 = (id)AGGraphGetAttributeGraph();
          Counter = AGGraphGetCounter();

          v32 = MEMORY[0x24BEE1ED8];
          *(_QWORD *)(v28 + 56) = MEMORY[0x24BEE1E88];
          *(_QWORD *)(v28 + 64) = v32;
          *(_QWORD *)(v28 + 32) = Counter;
          result = (_DWORD *)AGGraphGetCurrentAttribute();
          if ((_DWORD)result != v29)
          {
            v33 = MEMORY[0x24BEE4558];
            *(_QWORD *)(v28 + 96) = MEMORY[0x24BEE44F0];
            *(_QWORD *)(v28 + 104) = v33;
            *(_DWORD *)(v28 + 72) = (_DWORD)result;
            *(_QWORD *)(v28 + 136) = MEMORY[0x24BEE0D00];
            *(_QWORD *)(v28 + 144) = lazy protocol witness table accessor for type String and conformance String();
            *(_QWORD *)(v28 + 112) = 0x756F79614C796E41;
            *(_QWORD *)(v28 + 120) = 0xE900000000000074;
            v34 = v71;
            os_signpost(_:dso:log:name:signpostID:_:_:)();
            swift_release_n();
            v9 = v68;
            (*(void (**)(char *, uint64_t))(v70 + 8))(v34, v68);
            swift_bridgeObjectRelease();
            v15 = v67;
            goto LABEL_40;
          }
        }
        __break(1u);
LABEL_78:
        __break(1u);
LABEL_79:
        __break(1u);
        return result;
      }
    }
    swift_release_n();
LABEL_40:
    if (!*(_QWORD *)(a4 + 56))
      goto LABEL_71;
    goto LABEL_41;
  }
  v15 = a1 + 8;
  if (a1[8] == 1)
    goto LABEL_11;
  v16 = *(_QWORD *)(a4 + 56);
  if (v16)
  {
    while (1)
    {
      v36 = *(void (**)(_OWORD *__return_ptr, uint64_t))(**(_QWORD **)a1 + 144);
      v37 = swift_retain();
      v36(v77, v37);
      LOBYTE(v75[0]) = 0;
      if ((specialized AnimatorState.update(_:at:environment:)(v77, v11) & 1) == 0)
        break;
      v38 = (uint64_t)v15;
      swift_retain();
      v15 = (_BYTE *)static os_signpost_type_t.end.getter();
      static os_signpost_type_t.event.getter();
      if ((kdebug_is_enabled() & 1) == 0)
        goto LABEL_54;
      if (one-time initialization token for _signpostLog != -1)
        swift_once();
      v39 = (void *)_signpostLog;
      if ((OS_os_log.signpostsEnabled.getter() & 1) == 0)
      {
LABEL_54:
        v47 = swift_release();
        goto LABEL_55;
      }
      v68 = v9;
      swift_retain();
      v40 = v39;
      OSSignpostID.init(log:object:)();
      type metadata accessor for _ContiguousArrayStorage<CVarArg>();
      v41 = swift_allocObject();
      *(_OWORD *)(v41 + 16) = xmmword_235283260;
      CurrentAttribute = AGGraphGetCurrentAttribute();
      v9 = *MEMORY[0x24BE096C0];
      if (CurrentAttribute == (_DWORD)v9)
      {
        __break(1u);
      }
      else
      {
        v36 = (void (*)(_OWORD *__return_ptr, uint64_t))(id)AGGraphGetAttributeGraph();
        v4 = AGGraphGetCounter();

        v43 = MEMORY[0x24BEE1ED8];
        *(_QWORD *)(v41 + 56) = MEMORY[0x24BEE1E88];
        *(_QWORD *)(v41 + 64) = v43;
        *(_QWORD *)(v41 + 32) = v4;
        v44 = AGGraphGetCurrentAttribute();
        if (v44 != (_DWORD)v9)
        {
          v45 = MEMORY[0x24BEE4558];
          *(_QWORD *)(v41 + 96) = MEMORY[0x24BEE44F0];
          *(_QWORD *)(v41 + 104) = v45;
          *(_DWORD *)(v41 + 72) = v44;
          *(_QWORD *)(v41 + 136) = MEMORY[0x24BEE0D00];
          *(_QWORD *)(v41 + 144) = lazy protocol witness table accessor for type String and conformance String();
          *(_QWORD *)(v41 + 112) = 0x756F79614C796E41;
          *(_QWORD *)(v41 + 120) = 0xE900000000000074;
          v46 = v71;
          os_signpost(_:dso:log:name:signpostID:_:_:)();
          swift_release();
          (*(void (**)(char *, uint64_t))(v70 + 8))(v46, v68);
          v47 = swift_bridgeObjectRelease();
LABEL_55:
          v15 = (_BYTE *)v38;
          if (*(_QWORD *)(a4 + 56))
          {
            specialized AnimatorState.removeListeners()(v47);
            swift_release();
          }
          *(_QWORD *)(a4 + 56) = 0;
          goto LABEL_58;
        }
      }
      __break(1u);
LABEL_75:
      swift_once();
LABEL_65:
      v57 = (void *)_signpostLog;
      if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
      {
        HIDWORD(v66) = (_DWORD)v36;
        v67 = v15;
        swift_retain();
        v58 = v57;
        OSSignpostID.init(log:object:)();
        type metadata accessor for _ContiguousArrayStorage<CVarArg>();
        v59 = swift_allocObject();
        *(_OWORD *)(v59 + 16) = xmmword_235283260;
        result = (_DWORD *)AGGraphGetCurrentAttribute();
        v60 = *MEMORY[0x24BE096C0];
        if ((_DWORD)result == *MEMORY[0x24BE096C0])
          goto LABEL_78;
        v61 = (id)AGGraphGetAttributeGraph();
        v62 = AGGraphGetCounter();

        v63 = MEMORY[0x24BEE1ED8];
        *(_QWORD *)(v59 + 56) = MEMORY[0x24BEE1E88];
        *(_QWORD *)(v59 + 64) = v63;
        *(_QWORD *)(v59 + 32) = v62;
        result = (_DWORD *)AGGraphGetCurrentAttribute();
        if ((_DWORD)result == v60)
          goto LABEL_79;
        v64 = MEMORY[0x24BEE4558];
        *(_QWORD *)(v59 + 96) = MEMORY[0x24BEE44F0];
        *(_QWORD *)(v59 + 104) = v64;
        *(_DWORD *)(v59 + 72) = (_DWORD)result;
        *(_QWORD *)(v59 + 136) = MEMORY[0x24BEE0D00];
        *(_QWORD *)(v59 + 144) = lazy protocol witness table accessor for type String and conformance String();
        *(_QWORD *)(v59 + 112) = 0x756F79614C796E41;
        *(_QWORD *)(v59 + 120) = 0xE900000000000074;
        v65 = v71;
        os_signpost(_:dso:log:name:signpostID:_:_:)();
        swift_release();
        v9 = v68;
        (*(void (**)(char *, uint64_t))(v70 + 8))(v65, v68);
        swift_bridgeObjectRelease();
        v15 = v67;
      }
      else
      {
LABEL_69:
        swift_release();
      }
      swift_release();
      *(_QWORD *)(a4 + 56) = v38;
      if (v38)
      {
LABEL_41:
        swift_retain();
        specialized AnimatorState.addListeners(transaction:)();
        swift_release();
        swift_release();
        swift_release();
        outlined destroy of _AnyAnimatableData((uint64_t)v73);
        outlined destroy of _AnyAnimatableData((uint64_t)v75);
      }
      else
      {
LABEL_71:
        __break(1u);
LABEL_72:
        outlined destroy of _AnyAnimatableData((uint64_t)v75);
        swift_release();
      }
LABEL_42:
      result = (_DWORD *)outlined destroy of _AnyAnimatableData?(v4);
      v35 = v77[1];
      *(_OWORD *)v4 = v77[0];
      *(_OWORD *)(v4 + 16) = v35;
      *(_QWORD *)(v4 + 32) = v78;
      v16 = *(_QWORD *)(a4 + 56);
      if (!v16)
        return result;
    }
    if (one-time initialization token for shared != -1)
      swift_once();
    swift_beginAccess();
    v48 = *(double *)(v16 + 80);
    *(_QWORD *)&v75[0] = *(_QWORD *)(v16 + 88);
    v49 = *(unsigned int *)(v16 + 136);
    v50 = *(_BYTE *)(v16 + 140);
    v51 = *(void (**)(_OWORD *, unint64_t, double))((*MEMORY[0x24BEE4EA0] & *(_QWORD *)static CoreGlue.shared)
                                                                    + 0x58);
    v52 = static CoreGlue.shared;
    LOBYTE(v73[0]) = v50;
    v51(v75, v49 | ((unint64_t)v50 << 32), v48);

LABEL_58:
    outlined init with copy of _AnyAnimatableData(v77, v75);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v54 = *(_QWORD *)a1;
    if (isUniquelyReferenced_nonNull_native)
    {
      outlined init with copy of _AnyAnimatableData(v75, v73);
      (*(void (**)(_OWORD *))(*(_QWORD *)v54 + 152))(v73);
      outlined destroy of _AnyAnimatableData((uint64_t)v75);
    }
    else
    {
      v55 = (*(uint64_t (**)(_OWORD *))(*(_QWORD *)v54 + 168))(v75);
      outlined destroy of _AnyAnimatableData((uint64_t)v75);
      *(_QWORD *)a1 = v55;
      swift_release();
    }
    swift_release();
    result = (_DWORD *)outlined destroy of _AnyAnimatableData((uint64_t)v77);
    *v15 = 1;
  }
  return result;
}

void specialized AnimatableAttributeHelper.update(value:defaultAnimation:environment:sampleCollector:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(void))
{
  double v5;
  double v6;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  double v15;
  double *Value;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  int v24;
  void *v25;
  id v26;
  uint64_t v27;
  int v28;
  id v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  void *v33;
  id v34;
  uint64_t v35;
  int CurrentAttribute;
  id v37;
  uint64_t Counter;
  uint64_t v39;
  int v40;
  uint64_t v41;
  double v42;
  uint64_t v43;
  unsigned __int8 v44;
  void (*v45)(uint64_t *, unint64_t, double);
  void *v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  void *v50;
  id v51;
  uint64_t v52;
  int v53;
  id v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  int v61;
  uint64_t v62;
  unsigned __int8 v63;
  uint64_t v64;
  char v65;
  double v66;

  v11 = type metadata accessor for OSSignpostID();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v11);
  v14 = (char *)&v58 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for infinity != -1)
    swift_once();
  v15 = -*(double *)&static Time.infinity;
  if (*(_QWORD *)(a4 + 32))
  {
    Value = (double *)AGGraphGetValue();
    if ((v17 & 1) != 0)
      v15 = *Value;
  }
  if (*(_DWORD *)(a4 + 40) != *(_DWORD *)AGGraphGetValue() >> 1)
  {
    a5();
    *(_BYTE *)(a1 + 8) = 1;
LABEL_11:
    v6 = *(double *)a1;
    if ((*(_BYTE *)(a4 + 24) & 1) != 0)
      goto LABEL_34;
    v5 = *(double *)(a4 + 16);
    if (v6 == v5)
      goto LABEL_34;
    AGGraphClearUpdate();
    AGGraphGetValue();
    swift_retain();
    AGGraphSetUpdate();
    v19 = swift_retain();
    v20 = specialized find<A>(_:key:)(v19);
    if (v20)
    {
      v21 = *(_QWORD *)(v20 + 72);
      swift_retain();
      swift_release();
      if (v21)
        goto LABEL_22;
    }
    else
    {
      swift_release();
    }
    v22 = swift_retain();
    v23 = specialized closure #1 in PropertyList.subscript.getter(v22);
    swift_release();
    if ((v23 & 1) == 0)
    {
      if (!a2)
        goto LABEL_33;
      swift_retain();
      v21 = a2;
      goto LABEL_22;
    }
    if (one-time initialization token for velocityTracking != -1)
      goto LABEL_65;
    goto LABEL_19;
  }
  if (*(_BYTE *)(a1 + 8) == 1)
    goto LABEL_11;
  v18 = *(_QWORD *)(a4 + 32);
  if (!v18)
    return;
  while (1)
  {
    v66 = *(double *)a1;
    swift_retain();
    v65 = 0;
    if ((specialized AnimatorState.update(_:at:environment:)(&v66, v15) & 1) == 0)
    {
      if (one-time initialization token for shared != -1)
        swift_once();
      swift_beginAccess();
      v42 = *(double *)(v18 + 48);
      v64 = *(_QWORD *)(v18 + 56);
      v43 = *(unsigned int *)(v18 + 72);
      v44 = *(_BYTE *)(v18 + 76);
      v45 = *(void (**)(uint64_t *, unint64_t, double))((*MEMORY[0x24BEE4EA0] & *(_QWORD *)static CoreGlue.shared)
                                                                       + 0x58);
      v46 = static CoreGlue.shared;
      v63 = v44;
      v45(&v64, v43 | ((unint64_t)v44 << 32), v42);
      swift_release();

      goto LABEL_50;
    }
    swift_retain();
    static os_signpost_type_t.end.getter();
    static os_signpost_type_t.event.getter();
    if ((kdebug_is_enabled() & 1) == 0)
      goto LABEL_47;
    if (one-time initialization token for _signpostLog != -1)
      swift_once();
    v33 = (void *)_signpostLog;
    if ((OS_os_log.signpostsEnabled.getter() & 1) == 0)
    {
LABEL_47:
      swift_release();
      if (*(_QWORD *)(a4 + 32))
      {
LABEL_48:
        specialized AnimatorState.removeListeners()();
        swift_release();
      }
LABEL_49:
      swift_release();
      *(_QWORD *)(a4 + 32) = 0;
LABEL_50:
      *(double *)a1 = v66;
      *(_BYTE *)(a1 + 8) = 1;
      return;
    }
    v62 = v12;
    swift_retain();
    v34 = v33;
    OSSignpostID.init(log:object:)();
    type metadata accessor for _ContiguousArrayStorage<CVarArg>();
    v35 = swift_allocObject();
    *(_OWORD *)(v35 + 16) = xmmword_235283260;
    CurrentAttribute = AGGraphGetCurrentAttribute();
    v12 = *MEMORY[0x24BE096C0];
    if (CurrentAttribute == (_DWORD)v12)
    {
      __break(1u);
    }
    else
    {
      v37 = (id)AGGraphGetAttributeGraph();
      Counter = AGGraphGetCounter();

      v39 = MEMORY[0x24BEE1ED8];
      *(_QWORD *)(v35 + 56) = MEMORY[0x24BEE1E88];
      *(_QWORD *)(v35 + 64) = v39;
      *(_QWORD *)(v35 + 32) = Counter;
      v40 = AGGraphGetCurrentAttribute();
      if (v40 != (_DWORD)v12)
      {
        v41 = MEMORY[0x24BEE4558];
        *(_QWORD *)(v35 + 96) = MEMORY[0x24BEE44F0];
        *(_QWORD *)(v35 + 104) = v41;
        *(_DWORD *)(v35 + 72) = v40;
        *(_QWORD *)(v35 + 136) = MEMORY[0x24BEE0D00];
        *(_QWORD *)(v35 + 144) = lazy protocol witness table accessor for type String and conformance String();
        *(_QWORD *)(v35 + 112) = 0x7465736E495FLL;
        *(_QWORD *)(v35 + 120) = 0xE600000000000000;
        os_signpost(_:dso:log:name:signpostID:_:_:)();
        swift_release();
        (*(void (**)(char *, uint64_t))(v62 + 8))(v14, v11);
        swift_bridgeObjectRelease();
        if (*(_QWORD *)(a4 + 32))
          goto LABEL_48;
        goto LABEL_49;
      }
    }
    __break(1u);
LABEL_65:
    swift_once();
LABEL_19:
    v21 = static Animation.velocityTracking;
    swift_retain();
LABEL_22:
    v5 = v6 - v5;
    v15 = *(double *)AGGraphGetValue();
    if (*(_QWORD *)(a4 + 32))
      break;
    type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for AnimatorState<CGFloat>, (uint64_t (*)(void))lazy protocol witness table accessor for type CGFloat and conformance CGFloat, MEMORY[0x24BEE50B0], (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatorState);
    swift_allocObject();
    swift_retain();
    v47 = swift_retain();
    v48 = specialized AnimatorState.init(animation:interval:at:in:)(v47, v5, v15);
    swift_retain();
    v49 = static os_signpost_type_t.begin.getter();
    static os_signpost_type_t.event.getter();
    if ((kdebug_is_enabled() & 1) == 0)
      goto LABEL_59;
    v61 = v49;
    if (one-time initialization token for _signpostLog != -1)
      swift_once();
    v50 = (void *)_signpostLog;
    if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
    {
      v62 = v21;
      swift_retain();
      v51 = v50;
      OSSignpostID.init(log:object:)();
      type metadata accessor for _ContiguousArrayStorage<CVarArg>();
      v52 = swift_allocObject();
      *(_OWORD *)(v52 + 16) = xmmword_235283260;
      v53 = AGGraphGetCurrentAttribute();
      v60 = *MEMORY[0x24BE096C0];
      if (v53 == v60)
        goto LABEL_68;
      v54 = (id)AGGraphGetAttributeGraph();
      v59 = AGGraphGetCounter();

      v55 = MEMORY[0x24BEE1ED8];
      *(_QWORD *)(v52 + 56) = MEMORY[0x24BEE1E88];
      *(_QWORD *)(v52 + 64) = v55;
      *(_QWORD *)(v52 + 32) = v59;
      v56 = AGGraphGetCurrentAttribute();
      if (v56 == v60)
        goto LABEL_69;
      v57 = MEMORY[0x24BEE4558];
      *(_QWORD *)(v52 + 96) = MEMORY[0x24BEE44F0];
      *(_QWORD *)(v52 + 104) = v57;
      *(_DWORD *)(v52 + 72) = v56;
      *(_QWORD *)(v52 + 136) = MEMORY[0x24BEE0D00];
      *(_QWORD *)(v52 + 144) = lazy protocol witness table accessor for type String and conformance String();
      *(_QWORD *)(v52 + 112) = 0x7465736E495FLL;
      *(_QWORD *)(v52 + 120) = 0xE600000000000000;
      os_signpost(_:dso:log:name:signpostID:_:_:)();
      swift_release();
      (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
      swift_bridgeObjectRelease();
    }
    else
    {
LABEL_59:
      swift_release();
    }
    swift_release();
    *(_QWORD *)(a4 + 32) = v48;
    if (v48)
    {
LABEL_32:
      swift_retain();
      specialized AnimatorState.addListeners(transaction:)();
      swift_release();
      swift_release();
      goto LABEL_33;
    }
LABEL_61:
    __break(1u);
LABEL_33:
    swift_release();
LABEL_34:
    *(double *)(a4 + 16) = v6;
    *(_BYTE *)(a4 + 24) = 0;
    v18 = *(_QWORD *)(a4 + 32);
    if (!v18)
      return;
  }
  swift_retain();
  v65 = 0;
  specialized AnimatorState.combine(newAnimation:newInterval:at:in:environment:)(v21, v5, v15);
  swift_retain();
  v24 = static os_signpost_type_t.event.getter();
  static os_signpost_type_t.event.getter();
  if ((kdebug_is_enabled() & 1) == 0)
    goto LABEL_30;
  v61 = v24;
  if (one-time initialization token for _signpostLog != -1)
    swift_once();
  v25 = (void *)_signpostLog;
  if ((OS_os_log.signpostsEnabled.getter() & 1) == 0)
  {
LABEL_30:
    swift_release_n();
    goto LABEL_31;
  }
  v62 = v21;
  swift_retain();
  v26 = v25;
  OSSignpostID.init(log:object:)();
  type metadata accessor for _ContiguousArrayStorage<CVarArg>();
  v27 = swift_allocObject();
  *(_OWORD *)(v27 + 16) = xmmword_235283260;
  v28 = AGGraphGetCurrentAttribute();
  v60 = *MEMORY[0x24BE096C0];
  if (v28 != v60)
  {
    v29 = (id)AGGraphGetAttributeGraph();
    v59 = AGGraphGetCounter();

    v30 = MEMORY[0x24BEE1ED8];
    *(_QWORD *)(v27 + 56) = MEMORY[0x24BEE1E88];
    *(_QWORD *)(v27 + 64) = v30;
    *(_QWORD *)(v27 + 32) = v59;
    v31 = AGGraphGetCurrentAttribute();
    if (v31 == v60)
      goto LABEL_67;
    v32 = MEMORY[0x24BEE4558];
    *(_QWORD *)(v27 + 96) = MEMORY[0x24BEE44F0];
    *(_QWORD *)(v27 + 104) = v32;
    *(_DWORD *)(v27 + 72) = v31;
    *(_QWORD *)(v27 + 136) = MEMORY[0x24BEE0D00];
    *(_QWORD *)(v27 + 144) = lazy protocol witness table accessor for type String and conformance String();
    *(_QWORD *)(v27 + 112) = 0x7465736E495FLL;
    *(_QWORD *)(v27 + 120) = 0xE600000000000000;
    os_signpost(_:dso:log:name:signpostID:_:_:)();
    swift_release_n();
    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
    swift_bridgeObjectRelease();
LABEL_31:
    if (*(_QWORD *)(a4 + 32))
      goto LABEL_32;
    goto LABEL_61;
  }
  __break(1u);
LABEL_67:
  __break(1u);
LABEL_68:
  __break(1u);
LABEL_69:
  __break(1u);
}

uint64_t AnimatableAttributeHelper.update(value:defaultAnimation:environment:sampleCollector:)(uint64_t a1, uint64_t a2, int a3, void (*a4)(char *, uint64_t *), uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t AssociatedTypeWitness;
  uint64_t Counter;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  double v30;
  double *Value;
  char v32;
  Swift::Bool v33;
  uint64_t v34;
  uint64_t result;
  void (*v36)(char *);
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  void (*v46)(double *, char *, uint64_t);
  double *v47;
  double *v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  id v52;
  id v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  int v61;
  void *v62;
  id v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  void (*v69)(double *, uint64_t);
  void (*v70)(uint64_t, uint64_t);
  uint64_t v71;
  void (*v72)(uint64_t, uint64_t);
  void *v73;
  id v74;
  uint64_t v75;
  int CurrentAttribute;
  uint64_t v77;
  int v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  id v88;
  uint64_t v89;
  uint64_t AssociatedConformanceWitness;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  double *v98;
  char *v99;
  uint64_t v100;
  void (*v101)(char *, uint64_t *);
  char *v102;
  uint64_t v103;
  int v104;
  double *v105;
  uint64_t v106;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  char v110;
  uint64_t v111[2];

  v7 = v6;
  v100 = a5;
  v101 = a4;
  v104 = a3;
  v95 = a2;
  v10 = type metadata accessor for OSSignpostID();
  v96 = *(_QWORD *)(v10 - 8);
  v97 = v10;
  MEMORY[0x24BDAC7A8](v10);
  v99 = (char *)&v87 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = *(_QWORD *)(a6 + 16);
  v12 = *(_QWORD *)(a6 + 24);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v106 = type metadata accessor for Optional();
  Counter = *(_QWORD *)(v106 - 8);
  MEMORY[0x24BDAC7A8](v106);
  v17 = (char *)&v87 - v16;
  v18 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](v19);
  v107 = (char *)&v87 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v21);
  v105 = (double *)((char *)&v87 - v22);
  MEMORY[0x24BDAC7A8](v23);
  v98 = (double *)((char *)&v87 - v24);
  MEMORY[0x24BDAC7A8](v25);
  v102 = (char *)&v87 - v26;
  MEMORY[0x24BDAC7A8](v27);
  v29 = (char *)&v87 - v28;
  if (one-time initialization token for infinity == -1)
    goto LABEL_2;
LABEL_63:
  swift_once();
LABEL_2:
  v30 = -*(double *)&static Time.infinity;
  v108 = *(int *)(a6 + 48);
  v109 = a1;
  if (*(_QWORD *)(v7 + v108))
  {
    Value = (double *)AGGraphGetValue();
    if ((v32 & 1) != 0)
      v30 = *Value;
  }
  v33 = AnimatableAttributeHelper.checkReset()();
  v34 = v109;
  if (v33)
    *(_BYTE *)(v34 + *(int *)(swift_getTupleTypeMetadata2() + 48)) = 1;
  result = swift_getTupleTypeMetadata2();
  v103 = *(int *)(result + 48);
  if (*(_BYTE *)(v34 + v103) == 1)
  {
    (*(void (**)(uint64_t, uint64_t))(v12 + 24))(v13, v12);
    v36 = *(void (**)(char *))(Counter + 16);
    v94 = v7 + *(int *)(a6 + 44);
    v37 = v106;
    v36(v17);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v17, 1, AssociatedTypeWitness) == 1)
    {
      (*(void (**)(char *, uint64_t))(Counter + 8))(v17, v37);
      v38 = v37;
      goto LABEL_42;
    }
    v39 = v102;
    (*(void (**)(void))(v18 + 32))();
    AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    v91 = *(_QWORD *)(AssociatedConformanceWitness + 8);
    if ((dispatch thunk of static Equatable.== infix(_:_:)() & 1) != 0)
    {
      (*(void (**)(char *, uint64_t))(v18 + 8))(v39, AssociatedTypeWitness);
      goto LABEL_41;
    }
    AGGraphClearUpdate();
    v40 = *(_QWORD *)AGGraphGetValue();
    swift_retain();
    AGGraphSetUpdate();
    v41 = swift_retain();
    v42 = specialized find<A>(_:key:)(v41);
    v93 = v40;
    if (v42)
    {
      v43 = *(_QWORD *)(v42 + 72);
      swift_retain();
      swift_release();
      v92 = v43;
      if (v43)
        goto LABEL_21;
    }
    else
    {
      swift_release();
    }
    v44 = swift_retain();
    v45 = specialized closure #1 in PropertyList.subscript.getter(v44);
    swift_release();
    if ((v45 & 1) != 0)
    {
      if (one-time initialization token for velocityTracking != -1)
        goto LABEL_66;
      goto LABEL_18;
    }
    if (!v95)
    {
      (*(void (**)(char *, uint64_t))(v18 + 8))(v102, AssociatedTypeWitness);
      swift_release();
      goto LABEL_41;
    }
    v92 = swift_retain();
    goto LABEL_21;
  }
  while (1)
  {
    v29 = v107;
    if (!*(_QWORD *)(v7 + v108))
      return result;
    v72 = *(void (**)(uint64_t, uint64_t))(v12 + 24);
    swift_retain();
    v72(v13, v12);
    *(double *)v111 = v30;
    v110 = 0;
    if ((AnimatorState.update(_:at:environment:)((uint64_t)v29, (double *)v111) & 1) == 0)
    {
      AnimatorState.nextUpdate()();
      *(double *)v111 = v30;
      v101(v29, v111);
      goto LABEL_57;
    }
    swift_retain();
    Counter = static os_signpost_type_t.end.getter();
    static os_signpost_type_t.event.getter();
    if ((kdebug_is_enabled() & 1) == 0)
      goto LABEL_53;
    if (one-time initialization token for _signpostLog != -1)
      swift_once();
    v73 = (void *)_signpostLog;
    if ((OS_os_log.signpostsEnabled.getter() & 1) == 0)
    {
LABEL_53:
      swift_release();
      goto LABEL_54;
    }
    v104 = Counter;
    swift_retain();
    v74 = v73;
    OSSignpostID.init(log:object:)();
    type metadata accessor for _ContiguousArrayStorage<CVarArg>();
    v75 = swift_allocObject();
    *(_OWORD *)(v75 + 16) = xmmword_235283260;
    CurrentAttribute = AGGraphGetCurrentAttribute();
    LODWORD(v106) = *MEMORY[0x24BE096C0];
    if (CurrentAttribute == (_DWORD)v106)
    {
      __break(1u);
      goto LABEL_65;
    }
    v29 = (char *)(id)AGGraphGetAttributeGraph();
    Counter = AGGraphGetCounter();

    v77 = MEMORY[0x24BEE1ED8];
    *(_QWORD *)(v75 + 56) = MEMORY[0x24BEE1E88];
    *(_QWORD *)(v75 + 64) = v77;
    *(_QWORD *)(v75 + 32) = Counter;
    v78 = AGGraphGetCurrentAttribute();
    if (v78 != (_DWORD)v106)
      break;
LABEL_65:
    __break(1u);
LABEL_66:
    swift_once();
LABEL_18:
    v92 = static Animation.velocityTracking;
    swift_retain();
LABEL_21:
    v95 = Counter;
    v46 = *(void (**)(double *, char *, uint64_t))(v18 + 16);
    v47 = v98;
    v46(v98, v29, AssociatedTypeWitness);
    dispatch thunk of static AdditiveArithmetic.-= infix(_:_:)();
    v48 = (double *)AGGraphGetValue();
    v30 = *v48;
    a1 = *(_QWORD *)(v7 + v108);
    if (a1)
    {
      v111[0] = *(uint64_t *)v48;
      swift_retain();
      v110 = 0;
      AnimatorState.combine(newAnimation:newInterval:at:in:environment:)(v92, v47, (uint64_t)v111, v93);
      swift_retain();
      v50 = static os_signpost_type_t.event.getter();
      static os_signpost_type_t.event.getter();
      v51 = a1;
      if ((kdebug_is_enabled() & 1) != 0)
      {
        LODWORD(v91) = v50;
        Counter = v95;
        if (one-time initialization token for _signpostLog != -1)
          swift_once();
        a1 = _signpostLog;
        if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
        {
          swift_retain();
          v52 = (id)a1;
          v89 = v51;
          OSSignpostID.init(log:object:)();
          type metadata accessor for _ContiguousArrayStorage<CVarArg>();
          a1 = swift_allocObject();
          *(_OWORD *)(a1 + 16) = xmmword_235283260;
          result = AGGraphGetCurrentAttribute();
          LODWORD(AssociatedConformanceWitness) = *MEMORY[0x24BE096C0];
          if ((_DWORD)result == (_DWORD)AssociatedConformanceWitness)
          {
            __break(1u);
LABEL_68:
            __break(1u);
LABEL_69:
            __break(1u);
LABEL_70:
            __break(1u);
            return result;
          }
          v53 = (id)AGGraphGetAttributeGraph();
          v88 = (id)AGGraphGetCounter();

          v54 = MEMORY[0x24BEE1ED8];
          *(_QWORD *)(a1 + 56) = MEMORY[0x24BEE1E88];
          *(_QWORD *)(a1 + 64) = v54;
          *(_QWORD *)(a1 + 32) = v88;
          result = AGGraphGetCurrentAttribute();
          if ((_DWORD)result == (_DWORD)AssociatedConformanceWitness)
            goto LABEL_68;
          v55 = MEMORY[0x24BEE4558];
          *(_QWORD *)(a1 + 96) = MEMORY[0x24BEE44F0];
          *(_QWORD *)(a1 + 104) = v55;
          *(_DWORD *)(a1 + 72) = result;
          v56 = _typeName(_:qualified:)();
          AssociatedConformanceWitness = v57;
          *(_QWORD *)(a1 + 136) = MEMORY[0x24BEE0D00];
          *(_QWORD *)(a1 + 144) = lazy protocol witness table accessor for type String and conformance String();
          v58 = AssociatedConformanceWitness;
          *(_QWORD *)(a1 + 112) = v56;
          *(_QWORD *)(a1 + 120) = v58;
          v59 = v99;
          os_signpost(_:dso:log:name:signpostID:_:_:)();
          swift_release_n();
          (*(void (**)(char *, uint64_t))(v96 + 8))(v59, v97);
          swift_bridgeObjectRelease();
        }
        else
        {
          swift_release_n();
        }
      }
      else
      {
        swift_release_n();
        Counter = v95;
      }
      v17 = *(char **)(v7 + v108);
      if (!v17)
      {
LABEL_62:
        __break(1u);
        goto LABEL_63;
      }
    }
    else
    {
      type metadata accessor for AnimatorState(0, AssociatedTypeWitness, AssociatedConformanceWitness, v49);
      v46(v105, (char *)v47, AssociatedTypeWitness);
      *(double *)v111 = v30;
      v17 = (char *)swift_allocObject();
      swift_retain();
      v60 = swift_retain();
      AnimatorState.init(animation:interval:at:in:)(v60, (uint64_t)v105, v111);
      swift_retain();
      v61 = static os_signpost_type_t.begin.getter();
      static os_signpost_type_t.event.getter();
      if ((kdebug_is_enabled() & 1) != 0)
      {
        LODWORD(v91) = v61;
        Counter = v95;
        if (one-time initialization token for _signpostLog != -1)
          swift_once();
        v62 = (void *)_signpostLog;
        if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
        {
          swift_retain();
          v63 = v62;
          OSSignpostID.init(log:object:)();
          type metadata accessor for _ContiguousArrayStorage<CVarArg>();
          v64 = swift_allocObject();
          *(_OWORD *)(v64 + 16) = xmmword_235283260;
          result = AGGraphGetCurrentAttribute();
          LODWORD(AssociatedConformanceWitness) = *MEMORY[0x24BE096C0];
          if ((_DWORD)result == (_DWORD)AssociatedConformanceWitness)
            goto LABEL_69;
          v88 = (id)AGGraphGetAttributeGraph();
          v89 = AGGraphGetCounter();

          v65 = MEMORY[0x24BEE1ED8];
          *(_QWORD *)(v64 + 56) = MEMORY[0x24BEE1E88];
          *(_QWORD *)(v64 + 64) = v65;
          *(_QWORD *)(v64 + 32) = v89;
          result = AGGraphGetCurrentAttribute();
          if ((_DWORD)result == (_DWORD)AssociatedConformanceWitness)
            goto LABEL_70;
          v66 = MEMORY[0x24BEE4558];
          *(_QWORD *)(v64 + 96) = MEMORY[0x24BEE44F0];
          *(_QWORD *)(v64 + 104) = v66;
          *(_DWORD *)(v64 + 72) = result;
          AssociatedConformanceWitness = _typeName(_:qualified:)();
          v89 = v67;
          *(_QWORD *)(v64 + 136) = MEMORY[0x24BEE0D00];
          *(_QWORD *)(v64 + 144) = lazy protocol witness table accessor for type String and conformance String();
          v68 = v89;
          *(_QWORD *)(v64 + 112) = AssociatedConformanceWitness;
          *(_QWORD *)(v64 + 120) = v68;
          os_signpost(_:dso:log:name:signpostID:_:_:)();
          swift_release();
          (*(void (**)(char *, uint64_t))(v96 + 8))(v99, v97);
          swift_bridgeObjectRelease();
        }
        else
        {
          swift_release();
        }
      }
      else
      {
        swift_release();
        Counter = v95;
      }
      a1 = v108;
      swift_release();
      *(_QWORD *)(v7 + a1) = v17;
      if (!v17)
        goto LABEL_62;
    }
    swift_retain();
    AnimatorState.addListeners(transaction:)();
    swift_release();
    swift_release();
    swift_release();
    v69 = *(void (**)(double *, uint64_t))(v18 + 8);
    v69(v98, AssociatedTypeWitness);
    v69((double *)v102, AssociatedTypeWitness);
LABEL_41:
    v38 = v106;
LABEL_42:
    v70 = *(void (**)(uint64_t, uint64_t))(Counter + 8);
    v71 = v94;
    v70(v94, v38);
    (*(void (**)(uint64_t, char *, uint64_t))(v18 + 32))(v71, v29, AssociatedTypeWitness);
    result = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v18 + 56))(v71, 0, 1, AssociatedTypeWitness);
  }
  v79 = MEMORY[0x24BEE4558];
  *(_QWORD *)(v75 + 96) = MEMORY[0x24BEE44F0];
  *(_QWORD *)(v75 + 104) = v79;
  *(_DWORD *)(v75 + 72) = v78;
  v80 = _typeName(_:qualified:)();
  v82 = v81;
  *(_QWORD *)(v75 + 136) = MEMORY[0x24BEE0D00];
  *(_QWORD *)(v75 + 144) = lazy protocol witness table accessor for type String and conformance String();
  *(_QWORD *)(v75 + 112) = v80;
  *(_QWORD *)(v75 + 120) = v82;
  v83 = v99;
  os_signpost(_:dso:log:name:signpostID:_:_:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v96 + 8))(v83, v97);
  swift_bridgeObjectRelease();
  v29 = v107;
LABEL_54:
  if (*(_QWORD *)(v7 + *(int *)(a6 + 48)))
    AnimatorState.removeListeners()();
  v84 = v108;
  swift_release();
  *(_QWORD *)(v7 + v84) = 0;
LABEL_57:
  v85 = (uint64_t)v105;
  (*(void (**)(double *, char *, uint64_t))(v18 + 16))(v105, v29, AssociatedTypeWitness);
  v86 = v109;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 32))(v85, v13, v12);
  swift_release();
  result = (*(uint64_t (**)(char *, uint64_t))(v18 + 8))(v29, AssociatedTypeWitness);
  *(_BYTE *)(v86 + v103) = 1;
  return result;
}

Swift::Void __swiftcall AnimatableFrameAttributeVFD.destroy()()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 72))
    specialized AnimatorState.removeListeners()();
}

_DWORD *AnimatableAttributeHelper.phase.getter@<X0>(_DWORD *a1@<X8>)
{
  _DWORD *result;

  result = (_DWORD *)AGGraphGetValue();
  *a1 = *result;
  return result;
}

uint64_t AnimatableAttributeHelper.phase.setter()
{
  return AGGraphSetValue();
}

uint64_t (*AnimatableAttributeHelper.phase.modify(_DWORD *a1))(_DWORD *a1)
{
  _DWORD *v1;

  a1[2] = *v1;
  *a1 = *(_DWORD *)AGGraphGetValue();
  return GraphHost.Data.phase.modify;
}

uint64_t AnimatableAttributeHelper.$phase.getter()
{
  unsigned int *v0;

  return *v0;
}

uint64_t AnimatableAttributeHelper.$phase.setter(uint64_t result)
{
  _DWORD *v1;

  *v1 = result;
  return result;
}

uint64_t (*AnimatableAttributeHelper.$phase.modify(uint64_t a1))(uint64_t result)
{
  _DWORD *v1;

  *(_QWORD *)a1 = v1;
  *(_DWORD *)(a1 + 8) = *v1;
  return DefaultLayoutResponderFilter.$children.modify;
}

double AnimatableAttributeHelper.time.getter@<D0>(_QWORD *a1@<X8>)
{
  double *Value;
  double result;

  Value = (double *)AGGraphGetValue();
  result = *Value;
  *a1 = *(_QWORD *)Value;
  return result;
}

uint64_t AnimatableAttributeHelper.time.setter()
{
  return AGGraphSetValue();
}

uint64_t (*AnimatableAttributeHelper.time.modify(uint64_t a1))(_QWORD *a1)
{
  uint64_t v1;

  *(_DWORD *)(a1 + 16) = *(_DWORD *)(v1 + 4);
  *(_QWORD *)a1 = *(_QWORD *)AGGraphGetValue();
  return GraphHost.Data.time.modify;
}

uint64_t AnimatableAttributeHelper.$time.setter(uint64_t result)
{
  uint64_t v1;

  *(_DWORD *)(v1 + 4) = result;
  return result;
}

_DWORD *(*AnimatableAttributeHelper.$time.modify(uint64_t a1))(_DWORD *result)
{
  uint64_t v1;

  *(_QWORD *)a1 = v1;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(v1 + 4);
  return SecondaryLayerGeometryQuery.$layoutDirection.modify;
}

uint64_t AnimatableAttributeHelper.transaction.getter()
{
  specialized AnimatableAttributeHelper.transaction.getter();
  return swift_retain();
}

uint64_t key path getter for AnimatableAttributeHelper.transaction : <A>AnimatableAttributeHelper<A>@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t *a4@<X8>)
{
  type metadata accessor for AnimatableAttributeHelper(0, *(_QWORD *)(a2 + a1 - 16), *(_QWORD *)(a2 + a1 - 8), a3);
  *a4 = specialized AnimatableAttributeHelper.transaction.getter();
  return swift_retain();
}

uint64_t key path setter for AnimatableAttributeHelper.transaction : <A>AnimatableAttributeHelper<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  type metadata accessor for AnimatableAttributeHelper(0, *(_QWORD *)(a4 + a3 - 16), *(_QWORD *)(a4 + a3 - 8), a4);
  swift_retain();
  specialized AnimatableAttributeHelper.transaction.setter();
  return swift_release();
}

uint64_t AnimatableAttributeHelper.transaction.setter()
{
  specialized AnimatableAttributeHelper.transaction.setter();
  return swift_release();
}

uint64_t (*AnimatableAttributeHelper.transaction.modify(uint64_t a1))(_QWORD *a1)
{
  uint64_t v1;

  *(_DWORD *)(a1 + 16) = *(_DWORD *)(v1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)AGGraphGetValue();
  swift_retain();
  return GraphHost.Data.transaction.modify;
}

uint64_t AnimatableAttributeHelper.$transaction.getter()
{
  uint64_t v0;

  return *(unsigned int *)(v0 + 8);
}

uint64_t AnimatableAttributeHelper.$transaction.setter(uint64_t result)
{
  uint64_t v1;

  *(_DWORD *)(v1 + 8) = result;
  return result;
}

_DWORD *(*AnimatableAttributeHelper.$transaction.modify(uint64_t a1))(_DWORD *result)
{
  uint64_t v1;

  *(_QWORD *)a1 = v1;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(v1 + 8);
  return _ViewInputs.time.modify;
}

uint64_t specialized AnimatorState.addListeners(transaction:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;

  v1 = swift_retain();
  v2 = specialized find<A>(_:key:)(v1);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 72);
    swift_retain();
    swift_release();
    if (!v3)
      goto LABEL_7;
    swift_beginAccess();
    v4 = swift_retain();
    MEMORY[0x23B7C61A8](v4);
    if (*(_QWORD *)((*(_QWORD *)(v0 + 192) & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((*(_QWORD *)(v0 + 192) & 0xFFFFFFFFFFFFFF8)
                                                                                        + 0x18) >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
    v5 = swift_endAccess();
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 88))(v5);
  }
  swift_release();
LABEL_7:
  v6 = swift_retain();
  v7 = specialized find<A>(_:key:)(v6);
  if (v7)
  {
    v8 = *(_QWORD *)(v7 + 72);
    swift_retain();
    result = swift_release();
    if (!v8)
      return result;
    v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 88))(result);
    if ((*(_BYTE *)(v0 + 208) & 1) != 0)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 96))(v10);
    }
    else
    {
      swift_beginAccess();
      v11 = swift_retain();
      MEMORY[0x23B7C61A8](v11);
      if (*(_QWORD *)((*(_QWORD *)(v0 + 200) & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((*(_QWORD *)(v0 + 200) & 0xFFFFFFFFFFFFFF8)
                                                                                          + 0x18) >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      swift_endAccess();
    }
  }
  return swift_release();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;

  v1 = swift_retain();
  v2 = specialized find<A>(_:key:)(v1);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 72);
    swift_retain();
    swift_release();
    if (!v3)
      goto LABEL_7;
    swift_beginAccess();
    v4 = swift_retain();
    MEMORY[0x23B7C61A8](v4);
    if (*(_QWORD *)((*(_QWORD *)(v0 + 80) & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((*(_QWORD *)(v0 + 80) & 0xFFFFFFFFFFFFFF8)
                                                                                       + 0x18) >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
    v5 = swift_endAccess();
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 88))(v5);
  }
  swift_release();
LABEL_7:
  v6 = swift_retain();
  v7 = specialized find<A>(_:key:)(v6);
  if (v7)
  {
    v8 = *(_QWORD *)(v7 + 72);
    swift_retain();
    result = swift_release();
    if (!v8)
      return result;
    v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 88))(result);
    if ((*(_BYTE *)(v0 + 96) & 1) != 0)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 96))(v10);
    }
    else
    {
      swift_beginAccess();
      v11 = swift_retain();
      MEMORY[0x23B7C61A8](v11);
      if (*(_QWORD *)((*(_QWORD *)(v0 + 88) & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((*(_QWORD *)(v0 + 88) & 0xFFFFFFFFFFFFFF8)
                                                                                         + 0x18) >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      swift_endAccess();
    }
  }
  return swift_release();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;

  v1 = swift_retain();
  v2 = specialized find<A>(_:key:)(v1);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 72);
    swift_retain();
    swift_release();
    if (!v3)
      goto LABEL_7;
    swift_beginAccess();
    v4 = swift_retain();
    MEMORY[0x23B7C61A8](v4);
    if (*(_QWORD *)((*(_QWORD *)(v0 + 128) & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((*(_QWORD *)(v0 + 128) & 0xFFFFFFFFFFFFFF8)
                                                                                        + 0x18) >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
    v5 = swift_endAccess();
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 88))(v5);
  }
  swift_release();
LABEL_7:
  v6 = swift_retain();
  v7 = specialized find<A>(_:key:)(v6);
  if (v7)
  {
    v8 = *(_QWORD *)(v7 + 72);
    swift_retain();
    result = swift_release();
    if (!v8)
      return result;
    v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 88))(result);
    if ((*(_BYTE *)(v0 + 144) & 1) != 0)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 96))(v10);
    }
    else
    {
      swift_beginAccess();
      v11 = swift_retain();
      MEMORY[0x23B7C61A8](v11);
      if (*(_QWORD *)((*(_QWORD *)(v0 + 136) & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((*(_QWORD *)(v0 + 136) & 0xFFFFFFFFFFFFFF8)
                                                                                          + 0x18) >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      swift_endAccess();
    }
  }
  return swift_release();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;

  v1 = swift_retain();
  v2 = specialized find<A>(_:key:)(v1);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 72);
    swift_retain();
    swift_release();
    if (!v3)
      goto LABEL_7;
    swift_beginAccess();
    v4 = swift_retain();
    MEMORY[0x23B7C61A8](v4);
    if (*(_QWORD *)((*(_QWORD *)(v0 + 96) & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((*(_QWORD *)(v0 + 96) & 0xFFFFFFFFFFFFFF8)
                                                                                       + 0x18) >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
    v5 = swift_endAccess();
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 88))(v5);
  }
  swift_release();
LABEL_7:
  v6 = swift_retain();
  v7 = specialized find<A>(_:key:)(v6);
  if (v7)
  {
    v8 = *(_QWORD *)(v7 + 72);
    swift_retain();
    result = swift_release();
    if (!v8)
      return result;
    v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 88))(result);
    if ((*(_BYTE *)(v0 + 112) & 1) != 0)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 96))(v10);
    }
    else
    {
      swift_beginAccess();
      v11 = swift_retain();
      MEMORY[0x23B7C61A8](v11);
      if (*(_QWORD *)((*(_QWORD *)(v0 + 104) & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((*(_QWORD *)(v0 + 104) & 0xFFFFFFFFFFFFFF8)
                                                                                          + 0x18) >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      swift_endAccess();
    }
  }
  return swift_release();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;

  v1 = swift_retain();
  v2 = specialized find<A>(_:key:)(v1);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 72);
    swift_retain();
    swift_release();
    if (!v3)
      goto LABEL_7;
    swift_beginAccess();
    v4 = swift_retain();
    MEMORY[0x23B7C61A8](v4);
    if (*(_QWORD *)((*(_QWORD *)(v0 + 272) & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((*(_QWORD *)(v0 + 272) & 0xFFFFFFFFFFFFFF8)
                                                                                        + 0x18) >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
    v5 = swift_endAccess();
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 88))(v5);
  }
  swift_release();
LABEL_7:
  v6 = swift_retain();
  v7 = specialized find<A>(_:key:)(v6);
  if (v7)
  {
    v8 = *(_QWORD *)(v7 + 72);
    swift_retain();
    result = swift_release();
    if (!v8)
      return result;
    v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 88))(result);
    if ((*(_BYTE *)(v0 + 288) & 1) != 0)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 96))(v10);
    }
    else
    {
      swift_beginAccess();
      v11 = swift_retain();
      MEMORY[0x23B7C61A8](v11);
      if (*(_QWORD *)((*(_QWORD *)(v0 + 280) & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((*(_QWORD *)(v0 + 280) & 0xFFFFFFFFFFFFFF8)
                                                                                          + 0x18) >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      swift_endAccess();
    }
  }
  return swift_release();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;

  v1 = swift_retain();
  v2 = specialized find<A>(_:key:)(v1);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 72);
    swift_retain();
    swift_release();
    if (!v3)
      goto LABEL_7;
    swift_beginAccess();
    v4 = swift_retain();
    MEMORY[0x23B7C61A8](v4);
    if (*(_QWORD *)((*(_QWORD *)(v0 + 240) & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((*(_QWORD *)(v0 + 240) & 0xFFFFFFFFFFFFFF8)
                                                                                        + 0x18) >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
    v5 = swift_endAccess();
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 88))(v5);
  }
  swift_release();
LABEL_7:
  v6 = swift_retain();
  v7 = specialized find<A>(_:key:)(v6);
  if (v7)
  {
    v8 = *(_QWORD *)(v7 + 72);
    swift_retain();
    result = swift_release();
    if (!v8)
      return result;
    v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 88))(result);
    if ((*(_BYTE *)(v0 + 256) & 1) != 0)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 96))(v10);
    }
    else
    {
      swift_beginAccess();
      v11 = swift_retain();
      MEMORY[0x23B7C61A8](v11);
      if (*(_QWORD *)((*(_QWORD *)(v0 + 248) & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((*(_QWORD *)(v0 + 248) & 0xFFFFFFFFFFFFFF8)
                                                                                          + 0x18) >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      swift_endAccess();
    }
  }
  return swift_release();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;

  v1 = swift_retain();
  v2 = specialized find<A>(_:key:)(v1);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 72);
    swift_retain();
    swift_release();
    if (!v3)
      goto LABEL_7;
    swift_beginAccess();
    v4 = swift_retain();
    MEMORY[0x23B7C61A8](v4);
    if (*(_QWORD *)((*(_QWORD *)(v0 + 160) & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((*(_QWORD *)(v0 + 160) & 0xFFFFFFFFFFFFFF8)
                                                                                        + 0x18) >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
    v5 = swift_endAccess();
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 88))(v5);
  }
  swift_release();
LABEL_7:
  v6 = swift_retain();
  v7 = specialized find<A>(_:key:)(v6);
  if (v7)
  {
    v8 = *(_QWORD *)(v7 + 72);
    swift_retain();
    result = swift_release();
    if (!v8)
      return result;
    v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 88))(result);
    if ((*(_BYTE *)(v0 + 176) & 1) != 0)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 96))(v10);
    }
    else
    {
      swift_beginAccess();
      v11 = swift_retain();
      MEMORY[0x23B7C61A8](v11);
      if (*(_QWORD *)((*(_QWORD *)(v0 + 168) & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((*(_QWORD *)(v0 + 168) & 0xFFFFFFFFFFFFFF8)
                                                                                          + 0x18) >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      swift_endAccess();
    }
  }
  return swift_release();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;

  v1 = swift_retain();
  v2 = specialized find<A>(_:key:)(v1);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 72);
    swift_retain();
    swift_release();
    if (!v3)
      goto LABEL_7;
    swift_beginAccess();
    v4 = swift_retain();
    MEMORY[0x23B7C61A8](v4);
    if (*(_QWORD *)((*(_QWORD *)(v0 + 176) & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((*(_QWORD *)(v0 + 176) & 0xFFFFFFFFFFFFFF8)
                                                                                        + 0x18) >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
    v5 = swift_endAccess();
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 88))(v5);
  }
  swift_release();
LABEL_7:
  v6 = swift_retain();
  v7 = specialized find<A>(_:key:)(v6);
  if (v7)
  {
    v8 = *(_QWORD *)(v7 + 72);
    swift_retain();
    result = swift_release();
    if (!v8)
      return result;
    v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 88))(result);
    if ((*(_BYTE *)(v0 + 192) & 1) != 0)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 96))(v10);
    }
    else
    {
      swift_beginAccess();
      v11 = swift_retain();
      MEMORY[0x23B7C61A8](v11);
      if (*(_QWORD *)((*(_QWORD *)(v0 + 184) & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((*(_QWORD *)(v0 + 184) & 0xFFFFFFFFFFFFFF8)
                                                                                          + 0x18) >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      swift_endAccess();
    }
  }
  return swift_release();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;

  v1 = swift_retain();
  v2 = specialized find<A>(_:key:)(v1);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 72);
    swift_retain();
    swift_release();
    if (!v3)
      goto LABEL_7;
    swift_beginAccess();
    v4 = swift_retain();
    MEMORY[0x23B7C61A8](v4);
    if (*(_QWORD *)((*(_QWORD *)(v0 + 112) & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((*(_QWORD *)(v0 + 112) & 0xFFFFFFFFFFFFFF8)
                                                                                        + 0x18) >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
    v5 = swift_endAccess();
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 88))(v5);
  }
  swift_release();
LABEL_7:
  v6 = swift_retain();
  v7 = specialized find<A>(_:key:)(v6);
  if (v7)
  {
    v8 = *(_QWORD *)(v7 + 72);
    swift_retain();
    result = swift_release();
    if (!v8)
      return result;
    v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 88))(result);
    if ((*(_BYTE *)(v0 + 128) & 1) != 0)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 96))(v10);
    }
    else
    {
      swift_beginAccess();
      v11 = swift_retain();
      MEMORY[0x23B7C61A8](v11);
      if (*(_QWORD *)((*(_QWORD *)(v0 + 120) & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((*(_QWORD *)(v0 + 120) & 0xFFFFFFFFFFFFFF8)
                                                                                          + 0x18) >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      swift_endAccess();
    }
  }
  return swift_release();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;

  v1 = swift_retain();
  v2 = specialized find<A>(_:key:)(v1);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 72);
    swift_retain();
    swift_release();
    if (!v3)
      goto LABEL_7;
    swift_beginAccess();
    v4 = swift_retain();
    MEMORY[0x23B7C61A8](v4);
    if (*(_QWORD *)((*(_QWORD *)(v0 + 144) & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((*(_QWORD *)(v0 + 144) & 0xFFFFFFFFFFFFFF8)
                                                                                        + 0x18) >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
    v5 = swift_endAccess();
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 88))(v5);
  }
  swift_release();
LABEL_7:
  v6 = swift_retain();
  v7 = specialized find<A>(_:key:)(v6);
  if (v7)
  {
    v8 = *(_QWORD *)(v7 + 72);
    swift_retain();
    result = swift_release();
    if (!v8)
      return result;
    v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 88))(result);
    if ((*(_BYTE *)(v0 + 160) & 1) != 0)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 96))(v10);
    }
    else
    {
      swift_beginAccess();
      v11 = swift_retain();
      MEMORY[0x23B7C61A8](v11);
      if (*(_QWORD *)((*(_QWORD *)(v0 + 152) & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((*(_QWORD *)(v0 + 152) & 0xFFFFFFFFFFFFFF8)
                                                                                          + 0x18) >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      swift_endAccess();
    }
  }
  return swift_release();
}

uint64_t AnimatorState.addListeners(transaction:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;

  v1 = v0;
  v2 = swift_retain();
  v3 = specialized find<A>(_:key:)(v2);
  if (v3)
  {
    v4 = *(_QWORD *)(v3 + 72);
    swift_retain();
    swift_release();
    if (!v4)
      goto LABEL_7;
    v5 = (_QWORD *)(v0 + *(_QWORD *)(*(_QWORD *)v0 + 168));
    swift_beginAccess();
    v6 = swift_retain();
    MEMORY[0x23B7C61A8](v6);
    if (*(_QWORD *)((*v5 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((*v5 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
    v7 = swift_endAccess();
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 88))(v7);
  }
  swift_release();
LABEL_7:
  v8 = swift_retain();
  v9 = specialized find<A>(_:key:)(v8);
  if (v9)
  {
    v10 = *(_QWORD *)(v9 + 72);
    swift_retain();
    result = swift_release();
    if (!v10)
      return result;
    v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 88))(result);
    if ((*(_BYTE *)(v1 + *(_QWORD *)(*(_QWORD *)v1 + 184)) & 1) != 0)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 96))(v12);
    }
    else
    {
      v13 = (_QWORD *)(v1 + *(_QWORD *)(*(_QWORD *)v1 + 176));
      swift_beginAccess();
      v14 = swift_retain();
      MEMORY[0x23B7C61A8](v14);
      if (*(_QWORD *)((*v13 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((*v13 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      swift_endAccess();
    }
  }
  return swift_release();
}

Swift::Void __swiftcall AnimatorState.removeListeners()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t j;
  uint64_t v13;
  uint64_t v14;

  v1 = v0;
  v2 = (uint64_t *)(v0 + *(_QWORD *)(*(_QWORD *)v0 + 168));
  swift_beginAccess();
  if ((unint64_t)*v2 >> 62)
  {
    swift_bridgeObjectRetain();
    v3 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    v3 = *(_QWORD *)((*v2 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v4 = MEMORY[0x24BEE4AF8];
  if (v3)
  {
    v5 = *v2;
    if ((unint64_t)*v2 >> 62)
    {
      swift_bridgeObjectRetain();
      v6 = _CocoaArrayWrapper.endIndex.getter();
      if (v6)
        goto LABEL_6;
    }
    else
    {
      v6 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      if (v6)
      {
LABEL_6:
        if (v6 < 1)
        {
          __break(1u);
          goto LABEL_31;
        }
        for (i = 0; i != v6; ++i)
        {
          if ((v5 & 0xC000000000000001) != 0)
          {
            v8 = MEMORY[0x23B7C6D9C](i, v5);
          }
          else
          {
            v8 = *(_QWORD *)(v5 + 8 * i + 32);
            swift_retain();
          }
          (*(void (**)(void))(*(_QWORD *)v8 + 96))();
          swift_release();
        }
      }
    }
    swift_bridgeObjectRelease();
    *v2 = v4;
    swift_bridgeObjectRelease();
  }
  v9 = (uint64_t *)(v1 + *(_QWORD *)(*(_QWORD *)v1 + 176));
  swift_beginAccess();
  if ((unint64_t)*v9 >> 62)
  {
    swift_bridgeObjectRetain();
    v14 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v14)
      return;
  }
  else if (!*(_QWORD *)((*v9 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    return;
  }
  v10 = *v9;
  if ((unint64_t)*v9 >> 62)
  {
    swift_bridgeObjectRetain();
    v11 = _CocoaArrayWrapper.endIndex.getter();
    if (v11)
    {
LABEL_19:
      if (v11 >= 1)
      {
        for (j = 0; j != v11; ++j)
        {
          if ((v10 & 0xC000000000000001) != 0)
          {
            v13 = MEMORY[0x23B7C6D9C](j, v10);
          }
          else
          {
            v13 = *(_QWORD *)(v10 + 8 * j + 32);
            swift_retain();
          }
          (*(void (**)(void))(*(_QWORD *)v13 + 96))();
          swift_release();
        }
        goto LABEL_28;
      }
LABEL_31:
      __break(1u);
      return;
    }
  }
  else
  {
    v11 = *(_QWORD *)((v10 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v11)
      goto LABEL_19;
  }
LABEL_28:
  swift_bridgeObjectRelease();
  *v9 = v4;
  swift_bridgeObjectRelease();
}

uint64_t AnimatorState.Fork.update(time:environment:)(double a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  __n128 v12;
  BOOL v13;
  char v14;
  uint64_t v16;
  uint64_t v17;
  _QWORD v18[2];
  char v19;

  v6 = *(_QWORD *)(a3 + 16);
  v7 = type metadata accessor for Optional();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v16 - v9;
  v17 = v3[1];
  v11 = *(_QWORD *)(a3 + 24);
  swift_bridgeObjectRetain();
  AnimationContext.init(state:environment:isLogicallyComplete:)(&v17, 0, (uint64_t)v18);
  v12.n128_f64[0] = a1;
  Animation.animate<A>(value:time:context:)((uint64_t)v3 + *(int *)(a3 + 40), (uint64_t)v18, *v3, v6, v11, (uint64_t)v10, v12);
  v13 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 48))(v10, 1, v6) == 1;
  v14 = v13 | v19;
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  swift_bridgeObjectRelease();
  return v14 & 1;
}

uint64_t specialized AnimatorState.updateListeners(isLogicallyComplete:time:environment:)(char a1, double a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t i;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(uint64_t *__return_ptr, uint64_t *, _QWORD *, ValueMetadata *, unint64_t, double);
  unint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t j;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD v44[2];
  __int16 v45;

  v3 = v2;
  type metadata accessor for CombinedAnimationState<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>>.Entry(0, (unint64_t *)&lazy cache variable for type metadata for Slice<IndexSet>, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF428], lazy protocol witness table accessor for type IndexSet and conformance IndexSet, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE41D8]);
  MEMORY[0x24BDAC7A8](v6);
  v40 = (uint64_t)&v38 - v7;
  v8 = type metadata accessor for IndexSet();
  v39 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v38 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  LOBYTE(v9) = *(_BYTE *)(v3 + 96);
  v41 = v10;
  if ((v9 & 1) != 0 || (a1 & 1) == 0)
    goto LABEL_17;
  *(_BYTE *)(v3 + 96) = a1 & 1;
  v11 = (uint64_t *)(v3 + 88);
  swift_beginAccess();
  v12 = *(_QWORD *)(v3 + 88);
  if (v12 >> 62)
  {
    swift_bridgeObjectRetain();
    v18 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v18)
      goto LABEL_17;
LABEL_5:
    v13 = *v11;
    if ((unint64_t)*v11 >> 62)
    {
      swift_bridgeObjectRetain();
      result = _CocoaArrayWrapper.endIndex.getter();
      v14 = result;
      if (result)
        goto LABEL_7;
    }
    else
    {
      v14 = *(_QWORD *)((v13 & 0xFFFFFFFFFFFFF8) + 0x10);
      result = swift_bridgeObjectRetain();
      if (v14)
      {
LABEL_7:
        if (v14 < 1)
          goto LABEL_47;
        for (i = 0; i != v14; ++i)
        {
          if ((v13 & 0xC000000000000001) != 0)
          {
            v17 = MEMORY[0x23B7C6D9C](i, v13);
          }
          else
          {
            v17 = *(_QWORD *)(v13 + 8 * i + 32);
            swift_retain();
          }
          (*(void (**)(void))(*(_QWORD *)v17 + 96))();
          swift_release();
        }
      }
    }
    swift_bridgeObjectRelease();
    *v11 = MEMORY[0x24BEE4AF8];
    swift_bridgeObjectRelease();
    v10 = v41;
    goto LABEL_17;
  }
  if (*(_QWORD *)((v12 & 0xFFFFFFFFFFFFF8) + 0x10))
    goto LABEL_5;
LABEL_17:
  v19 = (uint64_t *)(v3 + 104);
  result = swift_beginAccess();
  if (!*(_QWORD *)(*(_QWORD *)(v3 + 104) + 16))
    return result;
  v38 = v8;
  IndexSet.init()();
  v20 = *(_QWORD *)(*v19 + 16);
  if (!v20)
  {
LABEL_40:
    swift_beginAccess();
    v36 = v40;
    specialized Collection.subscript.getter(v40);
    result = specialized MutableCollection.halfStablePartitionByOffset(isSuffixElementAtOffset:)(v19, v36);
    v37 = *(_QWORD *)(*v19 + 16);
    if (v37 < result)
      goto LABEL_46;
    specialized Array.replaceSubrange<A>(_:with:)(result, v37);
    outlined destroy of Slice<IndexSet>(v36);
    swift_endAccess();
    return (*(uint64_t (**)(char *, uint64_t))(v39 + 8))(v10, v38);
  }
  v21 = 0;
  while (1)
  {
    swift_beginAccess();
    v22 = (_QWORD *)*v19;
    result = swift_isUniquelyReferenced_nonNull_native();
    *v19 = (uint64_t)v22;
    if ((result & 1) == 0)
    {
      result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v22);
      v22 = (_QWORD *)result;
      *v19 = result;
    }
    if (v21 >= v22[2])
      break;
    v23 = &v22[4 * v21];
    v24 = v23[5];
    swift_bridgeObjectRetain();
    v25 = AGCreateWeakAttribute();
    v44[0] = v24;
    v44[1] = v25;
    v45 = 0;
    v26 = v23[4];
    v42 = v23[6];
    v27 = *(void (**)(uint64_t *__return_ptr, uint64_t *, _QWORD *, ValueMetadata *, unint64_t, double))(*(_QWORD *)v26 + 120);
    v28 = lazy protocol witness table accessor for type _ShapeStyle_Pack.AnimatableData and conformance _ShapeStyle_Pack.AnimatableData();
    v27(&v43, &v42, v44, &type metadata for _ShapeStyle_Pack.AnimatableData, v28, a2);
    v29 = v43;
    swift_bridgeObjectRelease();
    if (v29)
    {
      v30 = HIBYTE(v45);
      swift_bridgeObjectRelease();
      v31 = *v19;
      result = swift_endAccess();
      if ((v30 & 1) == 0)
        goto LABEL_21;
    }
    else
    {
      swift_bridgeObjectRelease();
      v31 = *v19;
      result = swift_endAccess();
    }
    if (v21 >= *(_QWORD *)(v31 + 16))
      goto LABEL_44;
    v32 = *(_QWORD *)(v31 + 32 * v21 + 56);
    if (v32 >> 62)
    {
      swift_bridgeObjectRetain();
      result = _CocoaArrayWrapper.endIndex.getter();
      v33 = result;
      if (result)
      {
LABEL_32:
        if (v33 < 1)
          goto LABEL_45;
        for (j = 0; j != v33; ++j)
        {
          if ((v32 & 0xC000000000000001) != 0)
          {
            v35 = MEMORY[0x23B7C6D9C](j, v32);
          }
          else
          {
            v35 = *(_QWORD *)(v32 + 8 * j + 32);
            swift_retain();
          }
          (*(void (**)(void))(*(_QWORD *)v35 + 96))();
          swift_release();
        }
      }
    }
    else
    {
      v33 = *(_QWORD *)((v32 & 0xFFFFFFFFFFFFF8) + 0x10);
      result = swift_bridgeObjectRetain();
      if (v33)
        goto LABEL_32;
    }
    swift_bridgeObjectRelease();
    v10 = v41;
    IndexSet.insert(_:)(v21);
LABEL_21:
    if (++v21 == v20)
      goto LABEL_40;
  }
  __break(1u);
LABEL_44:
  __break(1u);
LABEL_45:
  __break(1u);
LABEL_46:
  __break(1u);
LABEL_47:
  __break(1u);
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t i;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(uint64_t *__return_ptr, __int128 *, _QWORD *, uint64_t, uint64_t, double);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t j;
  uint64_t v35;
  uint64_t v36;
  int64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  __int128 v42;
  uint64_t v43;
  char v44;
  _QWORD v45[2];
  __int16 v46;

  v3 = v2;
  type metadata accessor for CombinedAnimationState<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>>.Entry(0, (unint64_t *)&lazy cache variable for type metadata for Slice<IndexSet>, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF428], lazy protocol witness table accessor for type IndexSet and conformance IndexSet, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE41D8]);
  MEMORY[0x24BDAC7A8](v6);
  v40 = (uint64_t)&v38 - v7;
  v8 = type metadata accessor for IndexSet();
  v39 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v38 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  LOBYTE(v9) = *(_BYTE *)(v3 + 112);
  v41 = v10;
  if ((v9 & 1) != 0 || (a1 & 1) == 0)
    goto LABEL_17;
  *(_BYTE *)(v3 + 112) = a1 & 1;
  v11 = (uint64_t *)(v3 + 104);
  swift_beginAccess();
  v12 = *(_QWORD *)(v3 + 104);
  if (v12 >> 62)
  {
    swift_bridgeObjectRetain();
    v18 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v18)
      goto LABEL_17;
LABEL_5:
    v13 = *v11;
    if ((unint64_t)*v11 >> 62)
    {
      swift_bridgeObjectRetain();
      result = _CocoaArrayWrapper.endIndex.getter();
      v14 = result;
      if (result)
        goto LABEL_7;
    }
    else
    {
      v14 = *(_QWORD *)((v13 & 0xFFFFFFFFFFFFF8) + 0x10);
      result = swift_bridgeObjectRetain();
      if (v14)
      {
LABEL_7:
        if (v14 < 1)
          goto LABEL_46;
        for (i = 0; i != v14; ++i)
        {
          if ((v13 & 0xC000000000000001) != 0)
          {
            v17 = MEMORY[0x23B7C6D9C](i, v13);
          }
          else
          {
            v17 = *(_QWORD *)(v13 + 8 * i + 32);
            swift_retain();
          }
          (*(void (**)(void))(*(_QWORD *)v17 + 96))();
          swift_release();
        }
      }
    }
    swift_bridgeObjectRelease();
    *v11 = MEMORY[0x24BEE4AF8];
    swift_bridgeObjectRelease();
    v10 = v41;
    goto LABEL_17;
  }
  if (*(_QWORD *)((v12 & 0xFFFFFFFFFFFFF8) + 0x10))
    goto LABEL_5;
LABEL_17:
  v19 = (uint64_t *)(v3 + 120);
  result = swift_beginAccess();
  if (!*(_QWORD *)(*(_QWORD *)(v3 + 120) + 16))
    return result;
  v38 = v8;
  IndexSet.init()();
  v20 = *(_QWORD *)(*v19 + 16);
  if (!v20)
  {
LABEL_39:
    swift_beginAccess();
    v36 = v40;
    specialized Collection.subscript.getter(v40);
    result = specialized MutableCollection.halfStablePartitionByOffset(isSuffixElementAtOffset:)(v19, v36);
    v37 = *(_QWORD *)(*v19 + 16);
    if (v37 < result)
      goto LABEL_45;
    specialized Array.replaceSubrange<A>(_:with:)(result, v37);
    outlined destroy of Slice<IndexSet>(v36);
    swift_endAccess();
    return (*(uint64_t (**)(char *, uint64_t))(v39 + 8))(v10, v38);
  }
  v21 = 0;
  while (1)
  {
    swift_beginAccess();
    v22 = (_QWORD *)*v19;
    result = swift_isUniquelyReferenced_nonNull_native();
    *v19 = (uint64_t)v22;
    if ((result & 1) == 0)
    {
      result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v22);
      v22 = (_QWORD *)result;
      *v19 = result;
    }
    if (v21 >= v22[2])
      break;
    v23 = &v22[5 * v21];
    v24 = v23[5];
    swift_bridgeObjectRetain();
    v25 = AGCreateWeakAttribute();
    v45[0] = v24;
    v45[1] = v25;
    v46 = 0;
    v26 = v23[4];
    v42 = *((_OWORD *)v23 + 3);
    v27 = *(void (**)(uint64_t *__return_ptr, __int128 *, _QWORD *, uint64_t, uint64_t, double))(*(_QWORD *)v26 + 120);
    v28 = type metadata accessor for AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>(0);
    v29 = lazy protocol witness table accessor for type AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>> and conformance AnimatablePair<A, B>();
    v27(&v43, &v42, v45, v28, v29, a2);
    if (v44 == 1)
    {
      swift_bridgeObjectRelease();
      v30 = *v19;
      result = swift_endAccess();
    }
    else
    {
      v31 = HIBYTE(v46);
      swift_bridgeObjectRelease();
      v30 = *v19;
      result = swift_endAccess();
      if ((v31 & 1) == 0)
        goto LABEL_21;
    }
    if (v21 >= *(_QWORD *)(v30 + 16))
      goto LABEL_43;
    v32 = *(_QWORD *)(v30 + 40 * v21 + 64);
    if (v32 >> 62)
    {
      swift_bridgeObjectRetain();
      result = _CocoaArrayWrapper.endIndex.getter();
      v33 = result;
      if (result)
      {
LABEL_31:
        if (v33 < 1)
          goto LABEL_44;
        for (j = 0; j != v33; ++j)
        {
          if ((v32 & 0xC000000000000001) != 0)
          {
            v35 = MEMORY[0x23B7C6D9C](j, v32);
          }
          else
          {
            v35 = *(_QWORD *)(v32 + 8 * j + 32);
            swift_retain();
          }
          (*(void (**)(void))(*(_QWORD *)v35 + 96))();
          swift_release();
        }
      }
    }
    else
    {
      v33 = *(_QWORD *)((v32 & 0xFFFFFFFFFFFFF8) + 0x10);
      result = swift_bridgeObjectRetain();
      if (v33)
        goto LABEL_31;
    }
    swift_bridgeObjectRelease();
    v10 = v41;
    IndexSet.insert(_:)(v21);
LABEL_21:
    if (++v21 == v20)
      goto LABEL_39;
  }
  __break(1u);
LABEL_43:
  __break(1u);
LABEL_44:
  __break(1u);
LABEL_45:
  __break(1u);
LABEL_46:
  __break(1u);
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t i;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t j;
  uint64_t v32;
  uint64_t v33;
  int64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  _QWORD v41[2];
  __int16 v42;

  v3 = v2;
  type metadata accessor for CombinedAnimationState<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>>.Entry(0, (unint64_t *)&lazy cache variable for type metadata for Slice<IndexSet>, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF428], lazy protocol witness table accessor for type IndexSet and conformance IndexSet, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE41D8]);
  MEMORY[0x24BDAC7A8](v6);
  v37 = (uint64_t)&v35 - v7;
  v8 = type metadata accessor for IndexSet();
  v35 = *(_QWORD *)(v8 - 8);
  v36 = v8;
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v35 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*(_BYTE *)(v2 + 96) & 1) != 0 || (a1 & 1) == 0)
    goto LABEL_17;
  *(_BYTE *)(v2 + 96) = a1 & 1;
  v11 = (uint64_t *)(v2 + 88);
  swift_beginAccess();
  v12 = *(_QWORD *)(v2 + 88);
  if (v12 >> 62)
  {
    swift_bridgeObjectRetain();
    v18 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v18)
      goto LABEL_17;
LABEL_5:
    v13 = *v11;
    if ((unint64_t)*v11 >> 62)
    {
      swift_bridgeObjectRetain();
      result = _CocoaArrayWrapper.endIndex.getter();
      v14 = result;
      if (result)
        goto LABEL_7;
    }
    else
    {
      v14 = *(_QWORD *)((v13 & 0xFFFFFFFFFFFFF8) + 0x10);
      result = swift_bridgeObjectRetain();
      if (v14)
      {
LABEL_7:
        if (v14 < 1)
          goto LABEL_46;
        for (i = 0; i != v14; ++i)
        {
          if ((v13 & 0xC000000000000001) != 0)
          {
            v17 = MEMORY[0x23B7C6D9C](i, v13);
          }
          else
          {
            v17 = *(_QWORD *)(v13 + 8 * i + 32);
            swift_retain();
          }
          (*(void (**)(void))(*(_QWORD *)v17 + 96))();
          swift_release();
        }
      }
    }
    swift_bridgeObjectRelease();
    *v11 = MEMORY[0x24BEE4AF8];
    swift_bridgeObjectRelease();
    goto LABEL_17;
  }
  if (*(_QWORD *)((v12 & 0xFFFFFFFFFFFFF8) + 0x10))
    goto LABEL_5;
LABEL_17:
  v19 = (uint64_t *)(v3 + 104);
  result = swift_beginAccess();
  if (!*(_QWORD *)(*(_QWORD *)(v3 + 104) + 16))
    return result;
  IndexSet.init()();
  v20 = *(_QWORD *)(*v19 + 16);
  if (!v20)
  {
LABEL_39:
    swift_beginAccess();
    v33 = v37;
    specialized Collection.subscript.getter(v37);
    result = specialized MutableCollection.halfStablePartitionByOffset(isSuffixElementAtOffset:)(v19, v33);
    v34 = *(_QWORD *)(*v19 + 16);
    if (v34 < result)
      goto LABEL_45;
    specialized Array.replaceSubrange<A>(_:with:)(result, v34);
    outlined destroy of Slice<IndexSet>(v33);
    swift_endAccess();
    return (*(uint64_t (**)(char *, uint64_t))(v35 + 8))(v10, v36);
  }
  v21 = 0;
  while (1)
  {
    swift_beginAccess();
    v22 = (_QWORD *)*v19;
    result = swift_isUniquelyReferenced_nonNull_native();
    *v19 = (uint64_t)v22;
    if ((result & 1) == 0)
    {
      result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v22);
      v22 = (_QWORD *)result;
      *v19 = result;
    }
    if (v21 >= v22[2])
      break;
    v23 = &v22[4 * v21];
    v24 = v23[5];
    swift_bridgeObjectRetain();
    v25 = AGCreateWeakAttribute();
    v41[0] = v24;
    v41[1] = v25;
    v42 = 0;
    v26 = v23[4];
    v38 = v23[6];
    (*(void (**)(uint64_t *__return_ptr, uint64_t *, _QWORD *, _QWORD, _UNKNOWN **, double))(*(_QWORD *)v26 + 120))(&v39, &v38, v41, MEMORY[0x24BEE13C8], &protocol witness table for Double, a2);
    if (v40 == 1)
    {
      swift_bridgeObjectRelease();
      v27 = *v19;
      result = swift_endAccess();
    }
    else
    {
      v28 = HIBYTE(v42);
      swift_bridgeObjectRelease();
      v27 = *v19;
      result = swift_endAccess();
      if ((v28 & 1) == 0)
        goto LABEL_21;
    }
    if (v21 >= *(_QWORD *)(v27 + 16))
      goto LABEL_43;
    v29 = *(_QWORD *)(v27 + 32 * v21 + 56);
    if (v29 >> 62)
    {
      swift_bridgeObjectRetain();
      result = _CocoaArrayWrapper.endIndex.getter();
      v30 = result;
      if (result)
      {
LABEL_31:
        if (v30 < 1)
          goto LABEL_44;
        for (j = 0; j != v30; ++j)
        {
          if ((v29 & 0xC000000000000001) != 0)
          {
            v32 = MEMORY[0x23B7C6D9C](j, v29);
          }
          else
          {
            v32 = *(_QWORD *)(v29 + 8 * j + 32);
            swift_retain();
          }
          (*(void (**)(void))(*(_QWORD *)v32 + 96))();
          swift_release();
        }
      }
    }
    else
    {
      v30 = *(_QWORD *)((v29 & 0xFFFFFFFFFFFFF8) + 0x10);
      result = swift_bridgeObjectRetain();
      if (v30)
        goto LABEL_31;
    }
    swift_bridgeObjectRelease();
    IndexSet.insert(_:)(v21);
LABEL_21:
    if (++v21 == v20)
      goto LABEL_39;
  }
  __break(1u);
LABEL_43:
  __break(1u);
LABEL_44:
  __break(1u);
LABEL_45:
  __break(1u);
LABEL_46:
  __break(1u);
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t i;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(uint64_t *__return_ptr, uint64_t *, _QWORD *, ValueMetadata *, unint64_t, double);
  unint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t j;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD v44[2];
  __int16 v45;

  v3 = v2;
  type metadata accessor for CombinedAnimationState<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>>.Entry(0, (unint64_t *)&lazy cache variable for type metadata for Slice<IndexSet>, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF428], lazy protocol witness table accessor for type IndexSet and conformance IndexSet, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE41D8]);
  MEMORY[0x24BDAC7A8](v6);
  v40 = (uint64_t)&v38 - v7;
  v8 = type metadata accessor for IndexSet();
  v39 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v38 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  LOBYTE(v9) = *(_BYTE *)(v3 + 96);
  v41 = v10;
  if ((v9 & 1) != 0 || (a1 & 1) == 0)
    goto LABEL_17;
  *(_BYTE *)(v3 + 96) = a1 & 1;
  v11 = (uint64_t *)(v3 + 88);
  swift_beginAccess();
  v12 = *(_QWORD *)(v3 + 88);
  if (v12 >> 62)
  {
    swift_bridgeObjectRetain();
    v18 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v18)
      goto LABEL_17;
LABEL_5:
    v13 = *v11;
    if ((unint64_t)*v11 >> 62)
    {
      swift_bridgeObjectRetain();
      result = _CocoaArrayWrapper.endIndex.getter();
      v14 = result;
      if (result)
        goto LABEL_7;
    }
    else
    {
      v14 = *(_QWORD *)((v13 & 0xFFFFFFFFFFFFF8) + 0x10);
      result = swift_bridgeObjectRetain();
      if (v14)
      {
LABEL_7:
        if (v14 < 1)
          goto LABEL_47;
        for (i = 0; i != v14; ++i)
        {
          if ((v13 & 0xC000000000000001) != 0)
          {
            v17 = MEMORY[0x23B7C6D9C](i, v13);
          }
          else
          {
            v17 = *(_QWORD *)(v13 + 8 * i + 32);
            swift_retain();
          }
          (*(void (**)(void))(*(_QWORD *)v17 + 96))();
          swift_release();
        }
      }
    }
    swift_bridgeObjectRelease();
    *v11 = MEMORY[0x24BEE4AF8];
    swift_bridgeObjectRelease();
    v10 = v41;
    goto LABEL_17;
  }
  if (*(_QWORD *)((v12 & 0xFFFFFFFFFFFFF8) + 0x10))
    goto LABEL_5;
LABEL_17:
  v19 = (uint64_t *)(v3 + 104);
  result = swift_beginAccess();
  if (!*(_QWORD *)(*(_QWORD *)(v3 + 104) + 16))
    return result;
  v38 = v8;
  IndexSet.init()();
  v20 = *(_QWORD *)(*v19 + 16);
  if (!v20)
  {
LABEL_40:
    swift_beginAccess();
    v36 = v40;
    specialized Collection.subscript.getter(v40);
    result = specialized MutableCollection.halfStablePartitionByOffset(isSuffixElementAtOffset:)(v19, v36);
    v37 = *(_QWORD *)(*v19 + 16);
    if (v37 < result)
      goto LABEL_46;
    specialized Array.replaceSubrange<A>(_:with:)(result, v37);
    outlined destroy of Slice<IndexSet>(v36);
    swift_endAccess();
    return (*(uint64_t (**)(char *, uint64_t))(v39 + 8))(v10, v38);
  }
  v21 = 0;
  while (1)
  {
    swift_beginAccess();
    v22 = (_QWORD *)*v19;
    result = swift_isUniquelyReferenced_nonNull_native();
    *v19 = (uint64_t)v22;
    if ((result & 1) == 0)
    {
      result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v22);
      v22 = (_QWORD *)result;
      *v19 = result;
    }
    if (v21 >= v22[2])
      break;
    v23 = &v22[4 * v21];
    v24 = v23[5];
    swift_bridgeObjectRetain();
    v25 = AGCreateWeakAttribute();
    v44[0] = v24;
    v44[1] = v25;
    v45 = 0;
    v26 = v23[4];
    v42 = v23[6];
    v27 = *(void (**)(uint64_t *__return_ptr, uint64_t *, _QWORD *, ValueMetadata *, unint64_t, double))(*(_QWORD *)v26 + 120);
    v28 = lazy protocol witness table accessor for type ShaderVectorData and conformance ShaderVectorData();
    v27(&v43, &v42, v44, &type metadata for ShaderVectorData, v28, a2);
    v29 = v43;
    swift_bridgeObjectRelease();
    if (v29)
    {
      v30 = HIBYTE(v45);
      swift_bridgeObjectRelease();
      v31 = *v19;
      result = swift_endAccess();
      if ((v30 & 1) == 0)
        goto LABEL_21;
    }
    else
    {
      swift_bridgeObjectRelease();
      v31 = *v19;
      result = swift_endAccess();
    }
    if (v21 >= *(_QWORD *)(v31 + 16))
      goto LABEL_44;
    v32 = *(_QWORD *)(v31 + 32 * v21 + 56);
    if (v32 >> 62)
    {
      swift_bridgeObjectRetain();
      result = _CocoaArrayWrapper.endIndex.getter();
      v33 = result;
      if (result)
      {
LABEL_32:
        if (v33 < 1)
          goto LABEL_45;
        for (j = 0; j != v33; ++j)
        {
          if ((v32 & 0xC000000000000001) != 0)
          {
            v35 = MEMORY[0x23B7C6D9C](j, v32);
          }
          else
          {
            v35 = *(_QWORD *)(v32 + 8 * j + 32);
            swift_retain();
          }
          (*(void (**)(void))(*(_QWORD *)v35 + 96))();
          swift_release();
        }
      }
    }
    else
    {
      v33 = *(_QWORD *)((v32 & 0xFFFFFFFFFFFFF8) + 0x10);
      result = swift_bridgeObjectRetain();
      if (v33)
        goto LABEL_32;
    }
    swift_bridgeObjectRelease();
    v10 = v41;
    IndexSet.insert(_:)(v21);
LABEL_21:
    if (++v21 == v20)
      goto LABEL_40;
  }
  __break(1u);
LABEL_44:
  __break(1u);
LABEL_45:
  __break(1u);
LABEL_46:
  __break(1u);
LABEL_47:
  __break(1u);
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t i;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  void (*v30)(uint64_t *__return_ptr, _OWORD *, _QWORD *, uint64_t, uint64_t, double);
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t j;
  uint64_t v38;
  uint64_t v39;
  int64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  _OWORD v45[4];
  uint64_t v46[8];
  char v47;
  _QWORD v48[2];
  __int16 v49;

  v3 = v2;
  type metadata accessor for CombinedAnimationState<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>>.Entry(0, (unint64_t *)&lazy cache variable for type metadata for Slice<IndexSet>, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF428], lazy protocol witness table accessor for type IndexSet and conformance IndexSet, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE41D8]);
  MEMORY[0x24BDAC7A8](v6);
  v43 = (uint64_t)&v41 - v7;
  v8 = type metadata accessor for IndexSet();
  v42 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v41 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  LOBYTE(v9) = *(_BYTE *)(v3 + 208);
  v44 = v10;
  if ((v9 & 1) != 0 || (a1 & 1) == 0)
    goto LABEL_17;
  *(_BYTE *)(v3 + 208) = a1 & 1;
  v11 = (uint64_t *)(v3 + 200);
  swift_beginAccess();
  v12 = *(_QWORD *)(v3 + 200);
  if (v12 >> 62)
  {
    swift_bridgeObjectRetain();
    v18 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v18)
      goto LABEL_17;
LABEL_5:
    v13 = *v11;
    if ((unint64_t)*v11 >> 62)
    {
      swift_bridgeObjectRetain();
      result = _CocoaArrayWrapper.endIndex.getter();
      v14 = result;
      if (result)
        goto LABEL_7;
    }
    else
    {
      v14 = *(_QWORD *)((v13 & 0xFFFFFFFFFFFFF8) + 0x10);
      result = swift_bridgeObjectRetain();
      if (v14)
      {
LABEL_7:
        if (v14 < 1)
          goto LABEL_46;
        for (i = 0; i != v14; ++i)
        {
          if ((v13 & 0xC000000000000001) != 0)
          {
            v17 = MEMORY[0x23B7C6D9C](i, v13);
          }
          else
          {
            v17 = *(_QWORD *)(v13 + 8 * i + 32);
            swift_retain();
          }
          (*(void (**)(void))(*(_QWORD *)v17 + 96))();
          swift_release();
        }
      }
    }
    swift_bridgeObjectRelease();
    *v11 = MEMORY[0x24BEE4AF8];
    swift_bridgeObjectRelease();
    v10 = v44;
    goto LABEL_17;
  }
  if (*(_QWORD *)((v12 & 0xFFFFFFFFFFFFF8) + 0x10))
    goto LABEL_5;
LABEL_17:
  v19 = v3 + 216;
  result = swift_beginAccess();
  if (!*(_QWORD *)(*(_QWORD *)(v3 + 216) + 16))
    return result;
  v41 = v8;
  IndexSet.init()();
  v20 = *(_QWORD *)(*(_QWORD *)v19 + 16);
  if (!v20)
  {
LABEL_39:
    swift_beginAccess();
    v39 = v43;
    specialized Collection.subscript.getter(v43);
    result = specialized MutableCollection.halfStablePartitionByOffset(isSuffixElementAtOffset:)(v19, v39);
    v40 = *(_QWORD *)(*(_QWORD *)v19 + 16);
    if (v40 < result)
      goto LABEL_45;
    specialized Array.replaceSubrange<A>(_:with:)(result, v40);
    outlined destroy of Slice<IndexSet>(v39);
    swift_endAccess();
    return (*(uint64_t (**)(char *, uint64_t))(v42 + 8))(v10, v41);
  }
  v21 = 0;
  while (1)
  {
    swift_beginAccess();
    v22 = *(_QWORD **)v19;
    result = swift_isUniquelyReferenced_nonNull_native();
    *(_QWORD *)v19 = v22;
    if ((result & 1) == 0)
    {
      result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v22);
      v22 = (_QWORD *)result;
      *(_QWORD *)v19 = result;
    }
    if (v21 >= v22[2])
      break;
    v23 = &v22[11 * v21];
    v24 = v23[5];
    swift_bridgeObjectRetain();
    v25 = AGCreateWeakAttribute();
    v48[0] = v24;
    v48[1] = v25;
    v49 = 0;
    v26 = v23[4];
    v27 = *((_OWORD *)v23 + 4);
    v28 = *((_OWORD *)v23 + 5);
    v29 = *((_OWORD *)v23 + 6);
    v45[0] = *((_OWORD *)v23 + 3);
    v45[1] = v27;
    v45[2] = v28;
    v45[3] = v29;
    v30 = *(void (**)(uint64_t *__return_ptr, _OWORD *, _QWORD *, uint64_t, uint64_t, double))(*(_QWORD *)v26 + 120);
    v31 = type metadata accessor for AnimatablePair<Double, AnimatablePair<CGFloat, AnimatablePair<CGFloat, AnimatablePair<CGFloat, AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>>>>>();
    v32 = lazy protocol witness table accessor for type AnimatablePair<Double, AnimatablePair<CGFloat, AnimatablePair<CGFloat, AnimatablePair<CGFloat, AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>>>>> and conformance AnimatablePair<A, B>();
    v30(v46, v45, v48, v31, v32, a2);
    if (v47 == 1)
    {
      swift_bridgeObjectRelease();
      v33 = *(_QWORD *)v19;
      result = swift_endAccess();
    }
    else
    {
      v34 = HIBYTE(v49);
      swift_bridgeObjectRelease();
      v33 = *(_QWORD *)v19;
      result = swift_endAccess();
      if ((v34 & 1) == 0)
        goto LABEL_21;
    }
    if (v21 >= *(_QWORD *)(v33 + 16))
      goto LABEL_43;
    v35 = *(_QWORD *)(v33 + 88 * v21 + 112);
    if (v35 >> 62)
    {
      swift_bridgeObjectRetain();
      result = _CocoaArrayWrapper.endIndex.getter();
      v36 = result;
      if (result)
      {
LABEL_31:
        if (v36 < 1)
          goto LABEL_44;
        for (j = 0; j != v36; ++j)
        {
          if ((v35 & 0xC000000000000001) != 0)
          {
            v38 = MEMORY[0x23B7C6D9C](j, v35);
          }
          else
          {
            v38 = *(_QWORD *)(v35 + 8 * j + 32);
            swift_retain();
          }
          (*(void (**)(void))(*(_QWORD *)v38 + 96))();
          swift_release();
        }
      }
    }
    else
    {
      v36 = *(_QWORD *)((v35 & 0xFFFFFFFFFFFFF8) + 0x10);
      result = swift_bridgeObjectRetain();
      if (v36)
        goto LABEL_31;
    }
    swift_bridgeObjectRelease();
    v10 = v44;
    IndexSet.insert(_:)(v21);
LABEL_21:
    if (++v21 == v20)
      goto LABEL_39;
  }
  __break(1u);
LABEL_43:
  __break(1u);
LABEL_44:
  __break(1u);
LABEL_45:
  __break(1u);
LABEL_46:
  __break(1u);
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t i;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(uint64_t *__return_ptr, __int128 *, _QWORD *, uint64_t, uint64_t, double);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t j;
  uint64_t v36;
  uint64_t v37;
  int64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  __int128 v43;
  uint64_t v44;
  uint64_t v45[3];
  char v46;
  _QWORD v47[2];
  __int16 v48;

  v3 = v2;
  type metadata accessor for CombinedAnimationState<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>>.Entry(0, (unint64_t *)&lazy cache variable for type metadata for Slice<IndexSet>, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF428], lazy protocol witness table accessor for type IndexSet and conformance IndexSet, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE41D8]);
  MEMORY[0x24BDAC7A8](v6);
  v41 = (uint64_t)&v39 - v7;
  v8 = type metadata accessor for IndexSet();
  v40 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v39 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  LOBYTE(v9) = *(_BYTE *)(v3 + 128);
  v42 = v10;
  if ((v9 & 1) != 0 || (a1 & 1) == 0)
    goto LABEL_17;
  *(_BYTE *)(v3 + 128) = a1 & 1;
  v11 = (uint64_t *)(v3 + 120);
  swift_beginAccess();
  v12 = *(_QWORD *)(v3 + 120);
  if (v12 >> 62)
  {
    swift_bridgeObjectRetain();
    v18 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v18)
      goto LABEL_17;
LABEL_5:
    v13 = *v11;
    if ((unint64_t)*v11 >> 62)
    {
      swift_bridgeObjectRetain();
      result = _CocoaArrayWrapper.endIndex.getter();
      v14 = result;
      if (result)
        goto LABEL_7;
    }
    else
    {
      v14 = *(_QWORD *)((v13 & 0xFFFFFFFFFFFFF8) + 0x10);
      result = swift_bridgeObjectRetain();
      if (v14)
      {
LABEL_7:
        if (v14 < 1)
          goto LABEL_46;
        for (i = 0; i != v14; ++i)
        {
          if ((v13 & 0xC000000000000001) != 0)
          {
            v17 = MEMORY[0x23B7C6D9C](i, v13);
          }
          else
          {
            v17 = *(_QWORD *)(v13 + 8 * i + 32);
            swift_retain();
          }
          (*(void (**)(void))(*(_QWORD *)v17 + 96))();
          swift_release();
        }
      }
    }
    swift_bridgeObjectRelease();
    *v11 = MEMORY[0x24BEE4AF8];
    swift_bridgeObjectRelease();
    v10 = v42;
    goto LABEL_17;
  }
  if (*(_QWORD *)((v12 & 0xFFFFFFFFFFFFF8) + 0x10))
    goto LABEL_5;
LABEL_17:
  v19 = (uint64_t *)(v3 + 136);
  result = swift_beginAccess();
  if (!*(_QWORD *)(*(_QWORD *)(v3 + 136) + 16))
    return result;
  v39 = v8;
  IndexSet.init()();
  v20 = *(_QWORD *)(*v19 + 16);
  if (!v20)
  {
LABEL_39:
    swift_beginAccess();
    v37 = v41;
    specialized Collection.subscript.getter(v41);
    result = specialized MutableCollection.halfStablePartitionByOffset(isSuffixElementAtOffset:)(v19, v37);
    v38 = *(_QWORD *)(*v19 + 16);
    if (v38 < result)
      goto LABEL_45;
    specialized Array.replaceSubrange<A>(_:with:)(result, v38);
    outlined destroy of Slice<IndexSet>(v37);
    swift_endAccess();
    return (*(uint64_t (**)(char *, uint64_t))(v40 + 8))(v10, v39);
  }
  v21 = 0;
  while (1)
  {
    swift_beginAccess();
    v22 = (_QWORD *)*v19;
    result = swift_isUniquelyReferenced_nonNull_native();
    *v19 = (uint64_t)v22;
    if ((result & 1) == 0)
    {
      result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v22);
      v22 = (_QWORD *)result;
      *v19 = result;
    }
    if (v21 >= v22[2])
      break;
    v23 = &v22[6 * v21];
    v24 = v23[5];
    swift_bridgeObjectRetain();
    v25 = AGCreateWeakAttribute();
    v47[0] = v24;
    v47[1] = v25;
    v48 = 0;
    v26 = v23[4];
    v27 = v23[8];
    v43 = *((_OWORD *)v23 + 3);
    v44 = v27;
    v28 = *(void (**)(uint64_t *__return_ptr, __int128 *, _QWORD *, uint64_t, uint64_t, double))(*(_QWORD *)v26 + 120);
    v29 = type metadata accessor for AnimatablePair<Double, AnimatablePair<CGFloat, CGFloat>>();
    v30 = lazy protocol witness table accessor for type AnimatablePair<Double, AnimatablePair<CGFloat, CGFloat>> and conformance AnimatablePair<A, B>();
    v28(v45, &v43, v47, v29, v30, a2);
    if (v46 == 1)
    {
      swift_bridgeObjectRelease();
      v31 = *v19;
      result = swift_endAccess();
    }
    else
    {
      v32 = HIBYTE(v48);
      swift_bridgeObjectRelease();
      v31 = *v19;
      result = swift_endAccess();
      if ((v32 & 1) == 0)
        goto LABEL_21;
    }
    if (v21 >= *(_QWORD *)(v31 + 16))
      goto LABEL_43;
    v33 = *(_QWORD *)(v31 + 48 * v21 + 72);
    if (v33 >> 62)
    {
      swift_bridgeObjectRetain();
      result = _CocoaArrayWrapper.endIndex.getter();
      v34 = result;
      if (result)
      {
LABEL_31:
        if (v34 < 1)
          goto LABEL_44;
        for (j = 0; j != v34; ++j)
        {
          if ((v33 & 0xC000000000000001) != 0)
          {
            v36 = MEMORY[0x23B7C6D9C](j, v33);
          }
          else
          {
            v36 = *(_QWORD *)(v33 + 8 * j + 32);
            swift_retain();
          }
          (*(void (**)(void))(*(_QWORD *)v36 + 96))();
          swift_release();
        }
      }
    }
    else
    {
      v34 = *(_QWORD *)((v33 & 0xFFFFFFFFFFFFF8) + 0x10);
      result = swift_bridgeObjectRetain();
      if (v34)
        goto LABEL_31;
    }
    swift_bridgeObjectRelease();
    v10 = v42;
    IndexSet.insert(_:)(v21);
LABEL_21:
    if (++v21 == v20)
      goto LABEL_39;
  }
  __break(1u);
LABEL_43:
  __break(1u);
LABEL_44:
  __break(1u);
LABEL_45:
  __break(1u);
LABEL_46:
  __break(1u);
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t i;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  void (*v28)(uint64_t *__return_ptr, _OWORD *, _QWORD *, uint64_t, uint64_t, double);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t j;
  uint64_t v36;
  uint64_t v37;
  int64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  _OWORD v43[2];
  uint64_t v44[4];
  char v45;
  _QWORD v46[2];
  __int16 v47;

  v3 = v2;
  type metadata accessor for CombinedAnimationState<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>>.Entry(0, (unint64_t *)&lazy cache variable for type metadata for Slice<IndexSet>, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF428], lazy protocol witness table accessor for type IndexSet and conformance IndexSet, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE41D8]);
  MEMORY[0x24BDAC7A8](v6);
  v41 = (uint64_t)&v39 - v7;
  v8 = type metadata accessor for IndexSet();
  v40 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v39 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  LOBYTE(v9) = *(_BYTE *)(v3 + 144);
  v42 = v10;
  if ((v9 & 1) != 0 || (a1 & 1) == 0)
    goto LABEL_17;
  *(_BYTE *)(v3 + 144) = a1 & 1;
  v11 = (uint64_t *)(v3 + 136);
  swift_beginAccess();
  v12 = *(_QWORD *)(v3 + 136);
  if (v12 >> 62)
  {
    swift_bridgeObjectRetain();
    v18 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v18)
      goto LABEL_17;
LABEL_5:
    v13 = *v11;
    if ((unint64_t)*v11 >> 62)
    {
      swift_bridgeObjectRetain();
      result = _CocoaArrayWrapper.endIndex.getter();
      v14 = result;
      if (result)
        goto LABEL_7;
    }
    else
    {
      v14 = *(_QWORD *)((v13 & 0xFFFFFFFFFFFFF8) + 0x10);
      result = swift_bridgeObjectRetain();
      if (v14)
      {
LABEL_7:
        if (v14 < 1)
          goto LABEL_46;
        for (i = 0; i != v14; ++i)
        {
          if ((v13 & 0xC000000000000001) != 0)
          {
            v17 = MEMORY[0x23B7C6D9C](i, v13);
          }
          else
          {
            v17 = *(_QWORD *)(v13 + 8 * i + 32);
            swift_retain();
          }
          (*(void (**)(void))(*(_QWORD *)v17 + 96))();
          swift_release();
        }
      }
    }
    swift_bridgeObjectRelease();
    *v11 = MEMORY[0x24BEE4AF8];
    swift_bridgeObjectRelease();
    v10 = v42;
    goto LABEL_17;
  }
  if (*(_QWORD *)((v12 & 0xFFFFFFFFFFFFF8) + 0x10))
    goto LABEL_5;
LABEL_17:
  v19 = (uint64_t *)(v3 + 152);
  result = swift_beginAccess();
  if (!*(_QWORD *)(*(_QWORD *)(v3 + 152) + 16))
    return result;
  v39 = v8;
  IndexSet.init()();
  v20 = *(_QWORD *)(*v19 + 16);
  if (!v20)
  {
LABEL_39:
    swift_beginAccess();
    v37 = v41;
    specialized Collection.subscript.getter(v41);
    result = specialized MutableCollection.halfStablePartitionByOffset(isSuffixElementAtOffset:)(v19, v37);
    v38 = *(_QWORD *)(*v19 + 16);
    if (v38 < result)
      goto LABEL_45;
    specialized Array.replaceSubrange<A>(_:with:)(result, v38);
    outlined destroy of Slice<IndexSet>(v37);
    swift_endAccess();
    return (*(uint64_t (**)(char *, uint64_t))(v40 + 8))(v10, v39);
  }
  v21 = 0;
  while (1)
  {
    swift_beginAccess();
    v22 = (_QWORD *)*v19;
    result = swift_isUniquelyReferenced_nonNull_native();
    *v19 = (uint64_t)v22;
    if ((result & 1) == 0)
    {
      result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v22);
      v22 = (_QWORD *)result;
      *v19 = result;
    }
    if (v21 >= v22[2])
      break;
    v23 = &v22[7 * v21];
    v24 = v23[5];
    swift_bridgeObjectRetain();
    v25 = AGCreateWeakAttribute();
    v46[0] = v24;
    v46[1] = v25;
    v47 = 0;
    v26 = v23[4];
    v27 = *((_OWORD *)v23 + 4);
    v43[0] = *((_OWORD *)v23 + 3);
    v43[1] = v27;
    v28 = *(void (**)(uint64_t *__return_ptr, _OWORD *, _QWORD *, uint64_t, uint64_t, double))(*(_QWORD *)v26 + 120);
    v29 = type metadata accessor for AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>();
    v30 = lazy protocol witness table accessor for type AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>> and conformance AnimatablePair<A, B>();
    v28(v44, v43, v46, v29, v30, a2);
    if (v45 == 1)
    {
      swift_bridgeObjectRelease();
      v31 = *v19;
      result = swift_endAccess();
    }
    else
    {
      v32 = HIBYTE(v47);
      swift_bridgeObjectRelease();
      v31 = *v19;
      result = swift_endAccess();
      if ((v32 & 1) == 0)
        goto LABEL_21;
    }
    if (v21 >= *(_QWORD *)(v31 + 16))
      goto LABEL_43;
    v33 = *(_QWORD *)(v31 + 56 * v21 + 80);
    if (v33 >> 62)
    {
      swift_bridgeObjectRetain();
      result = _CocoaArrayWrapper.endIndex.getter();
      v34 = result;
      if (result)
      {
LABEL_31:
        if (v34 < 1)
          goto LABEL_44;
        for (j = 0; j != v34; ++j)
        {
          if ((v33 & 0xC000000000000001) != 0)
          {
            v36 = MEMORY[0x23B7C6D9C](j, v33);
          }
          else
          {
            v36 = *(_QWORD *)(v33 + 8 * j + 32);
            swift_retain();
          }
          (*(void (**)(void))(*(_QWORD *)v36 + 96))();
          swift_release();
        }
      }
    }
    else
    {
      v34 = *(_QWORD *)((v33 & 0xFFFFFFFFFFFFF8) + 0x10);
      result = swift_bridgeObjectRetain();
      if (v34)
        goto LABEL_31;
    }
    swift_bridgeObjectRelease();
    v10 = v42;
    IndexSet.insert(_:)(v21);
LABEL_21:
    if (++v21 == v20)
      goto LABEL_39;
  }
  __break(1u);
LABEL_43:
  __break(1u);
LABEL_44:
  __break(1u);
LABEL_45:
  __break(1u);
LABEL_46:
  __break(1u);
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  uint64_t i;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(__int128 *__return_ptr, _QWORD *, _QWORD *, uint64_t, unint64_t, double);
  unint64_t v33;
  void (*v34)(__int128 *__return_ptr, _QWORD *, _QWORD *, uint64_t, uint64_t, double);
  uint64_t v35;
  char v36;
  char v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t j;
  uint64_t v42;
  uint64_t v43;
  int64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD v49[5];
  _QWORD v50[4];
  __int128 v51;
  char v52;
  _QWORD v53[2];
  __int16 v54;

  v3 = v2;
  type metadata accessor for CombinedAnimationState<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>>.Entry(0, (unint64_t *)&lazy cache variable for type metadata for Slice<IndexSet>, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF428], lazy protocol witness table accessor for type IndexSet and conformance IndexSet, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE41D8]);
  MEMORY[0x24BDAC7A8](v6);
  v47 = (uint64_t)&v45 - v7;
  v46 = type metadata accessor for IndexSet();
  v45 = *(_QWORD *)(v46 - 8);
  MEMORY[0x24BDAC7A8](v46);
  v9 = (char *)&v45 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*(_BYTE *)(v2 + 144) & 1) != 0 || (a1 & 1) == 0)
    goto LABEL_17;
  *(_BYTE *)(v2 + 144) = a1 & 1;
  v10 = (uint64_t *)(v2 + 136);
  swift_beginAccess();
  v11 = *(_QWORD *)(v2 + 136);
  if (v11 >> 62)
  {
    swift_bridgeObjectRetain();
    v17 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v17)
      goto LABEL_17;
LABEL_5:
    v12 = *v10;
    if ((unint64_t)*v10 >> 62)
    {
      swift_bridgeObjectRetain();
      result = _CocoaArrayWrapper.endIndex.getter();
      v13 = result;
      if (result)
        goto LABEL_7;
    }
    else
    {
      v13 = *(_QWORD *)((v12 & 0xFFFFFFFFFFFFF8) + 0x10);
      result = swift_bridgeObjectRetain();
      if (v13)
      {
LABEL_7:
        if (v13 < 1)
          goto LABEL_50;
        for (i = 0; i != v13; ++i)
        {
          if ((v12 & 0xC000000000000001) != 0)
          {
            v16 = MEMORY[0x23B7C6D9C](i, v12);
          }
          else
          {
            v16 = *(_QWORD *)(v12 + 8 * i + 32);
            swift_retain();
          }
          (*(void (**)(void))(*(_QWORD *)v16 + 96))();
          swift_release();
        }
      }
    }
    swift_bridgeObjectRelease();
    *v10 = MEMORY[0x24BEE4AF8];
    swift_bridgeObjectRelease();
    goto LABEL_17;
  }
  if (*(_QWORD *)((v11 & 0xFFFFFFFFFFFFF8) + 0x10))
    goto LABEL_5;
LABEL_17:
  v18 = v3 + 152;
  result = swift_beginAccess();
  if (!*(_QWORD *)(*(_QWORD *)(v3 + 152) + 16))
    return result;
  IndexSet.init()();
  v19 = *(_QWORD *)(*(_QWORD *)v18 + 16);
  if (!v19)
  {
LABEL_43:
    swift_beginAccess();
    v43 = v47;
    specialized Collection.subscript.getter(v47);
    result = specialized MutableCollection.halfStablePartitionByOffset(isSuffixElementAtOffset:)(v18, v43);
    v44 = *(_QWORD *)(*(_QWORD *)v18 + 16);
    if (v44 < result)
      goto LABEL_49;
    specialized Array.replaceSubrange<A>(_:with:)(result, v44);
    outlined destroy of Slice<IndexSet>(v43);
    swift_endAccess();
    return (*(uint64_t (**)(char *, uint64_t))(v45 + 8))(v9, v46);
  }
  v20 = type metadata accessor for AnimatablePair<CGFloat, AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>>(0, &lazy cache variable for type metadata for AnimatablePair<CGFloat, AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>>, (void (*)(uint64_t))type metadata accessor for AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>, (void (*)(void))lazy protocol witness table accessor for type AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>> and conformance AnimatablePair<A, B>);
  v21 = 0;
  v22 = MEMORY[0x24BEE13C8];
  v48 = v19;
  while (1)
  {
    swift_beginAccess();
    v23 = *(_QWORD **)v18;
    result = swift_isUniquelyReferenced_nonNull_native();
    *(_QWORD *)v18 = v23;
    if ((result & 1) == 0)
    {
      result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v23);
      v23 = (_QWORD *)result;
      *(_QWORD *)v18 = result;
    }
    if (v21 >= v23[2])
      break;
    v24 = &v23[7 * v21];
    v25 = v24[5];
    swift_bridgeObjectRetain();
    v26 = AGCreateWeakAttribute();
    v53[0] = v25;
    v53[1] = v26;
    v54 = 0;
    v27 = v24[4];
    v28 = v24[6];
    v29 = v24[7];
    v30 = v24[8];
    v31 = v24[9];
    v50[0] = v28;
    v50[1] = v29;
    v50[2] = v30;
    v50[3] = v31;
    if (v20 == v22)
    {
      v49[0] = v28;
      (*(void (**)(__int128 *__return_ptr, _QWORD *, _QWORD *, uint64_t, _UNKNOWN **, double))(*(_QWORD *)v27 + 120))(&v51, v49, v53, v22, &protocol witness table for Double, a2);
    }
    else if (v20 == type metadata accessor for AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>())
    {
      v49[0] = v28;
      v49[1] = v29;
      v49[2] = v30;
      v49[3] = v31;
      v34 = *(void (**)(__int128 *__return_ptr, _QWORD *, _QWORD *, uint64_t, uint64_t, double))(*(_QWORD *)v27 + 120);
      v35 = lazy protocol witness table accessor for type AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>> and conformance AnimatablePair<A, B>();
      v34(&v51, v49, v53, v20, v35, a2);
    }
    else
    {
      v32 = *(void (**)(__int128 *__return_ptr, _QWORD *, _QWORD *, uint64_t, unint64_t, double))(*(_QWORD *)v27 + 120);
      v33 = lazy protocol witness table accessor for type AnimatablePair<CGFloat, AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>> and conformance AnimatablePair<A, B>();
      v32(&v51, v50, v53, v20, v33, a2);
    }
    v36 = v52;
    v37 = HIBYTE(v54);
    swift_bridgeObjectRelease();
    v38 = *(_QWORD *)v18;
    result = swift_endAccess();
    if ((v36 & 1) == 0 && (v37 & 1) == 0)
      goto LABEL_21;
    if (v21 >= *(_QWORD *)(v38 + 16))
      goto LABEL_47;
    v39 = *(_QWORD *)(v38 + 56 * v21 + 80);
    if (v39 >> 62)
    {
      swift_bridgeObjectRetain();
      result = _CocoaArrayWrapper.endIndex.getter();
      v40 = result;
      if (result)
      {
LABEL_35:
        if (v40 < 1)
          goto LABEL_48;
        for (j = 0; j != v40; ++j)
        {
          if ((v39 & 0xC000000000000001) != 0)
          {
            v42 = MEMORY[0x23B7C6D9C](j, v39);
          }
          else
          {
            v42 = *(_QWORD *)(v39 + 8 * j + 32);
            swift_retain();
          }
          (*(void (**)(void))(*(_QWORD *)v42 + 96))();
          swift_release();
        }
      }
    }
    else
    {
      v40 = *(_QWORD *)((v39 & 0xFFFFFFFFFFFFF8) + 0x10);
      result = swift_bridgeObjectRetain();
      if (v40)
        goto LABEL_35;
    }
    swift_bridgeObjectRelease();
    IndexSet.insert(_:)(v21);
    v19 = v48;
    v22 = MEMORY[0x24BEE13C8];
LABEL_21:
    if (++v21 == v19)
      goto LABEL_43;
  }
  __break(1u);
LABEL_47:
  __break(1u);
LABEL_48:
  __break(1u);
LABEL_49:
  __break(1u);
LABEL_50:
  __break(1u);
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  uint64_t i;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  void (*v34)(__int128 *__return_ptr, _QWORD *, _QWORD *, uint64_t, unint64_t, double);
  unint64_t v35;
  int v36;
  void (*v37)(__int128 *__return_ptr, _QWORD *, _QWORD *, uint64_t, uint64_t, double);
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t j;
  uint64_t v43;
  uint64_t v44;
  int64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD v50[5];
  _QWORD v51[5];
  char v52;
  __int128 v53;
  uint64_t v54;
  _QWORD v55[2];
  __int16 v56;

  v3 = v2;
  type metadata accessor for CombinedAnimationState<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>>.Entry(0, (unint64_t *)&lazy cache variable for type metadata for Slice<IndexSet>, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF428], lazy protocol witness table accessor for type IndexSet and conformance IndexSet, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE41D8]);
  MEMORY[0x24BDAC7A8](v6);
  v48 = (uint64_t)&v46 - v7;
  v47 = type metadata accessor for IndexSet();
  v46 = *(_QWORD *)(v47 - 8);
  MEMORY[0x24BDAC7A8](v47);
  v9 = (char *)&v46 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*(_BYTE *)(v2 + 176) & 1) != 0 || (a1 & 1) == 0)
    goto LABEL_17;
  *(_BYTE *)(v2 + 176) = a1 & 1;
  v10 = (uint64_t *)(v2 + 168);
  swift_beginAccess();
  v11 = *(_QWORD *)(v2 + 168);
  if (v11 >> 62)
  {
    swift_bridgeObjectRetain();
    v17 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v17)
      goto LABEL_17;
LABEL_5:
    v12 = *v10;
    if ((unint64_t)*v10 >> 62)
    {
      swift_bridgeObjectRetain();
      result = _CocoaArrayWrapper.endIndex.getter();
      v13 = result;
      if (result)
        goto LABEL_7;
    }
    else
    {
      v13 = *(_QWORD *)((v12 & 0xFFFFFFFFFFFFF8) + 0x10);
      result = swift_bridgeObjectRetain();
      if (v13)
      {
LABEL_7:
        if (v13 < 1)
          goto LABEL_52;
        for (i = 0; i != v13; ++i)
        {
          if ((v12 & 0xC000000000000001) != 0)
          {
            v16 = MEMORY[0x23B7C6D9C](i, v12);
          }
          else
          {
            v16 = *(_QWORD *)(v12 + 8 * i + 32);
            swift_retain();
          }
          (*(void (**)(void))(*(_QWORD *)v16 + 96))();
          swift_release();
        }
      }
    }
    swift_bridgeObjectRelease();
    *v10 = MEMORY[0x24BEE4AF8];
    swift_bridgeObjectRelease();
    goto LABEL_17;
  }
  if (*(_QWORD *)((v11 & 0xFFFFFFFFFFFFF8) + 0x10))
    goto LABEL_5;
LABEL_17:
  v18 = v3 + 184;
  result = swift_beginAccess();
  if (!*(_QWORD *)(*(_QWORD *)(v3 + 184) + 16))
    return result;
  IndexSet.init()();
  v19 = *(_QWORD *)(*(_QWORD *)v18 + 16);
  if (!v19)
  {
LABEL_45:
    swift_beginAccess();
    v44 = v48;
    specialized Collection.subscript.getter(v48);
    result = specialized MutableCollection.halfStablePartitionByOffset(isSuffixElementAtOffset:)(v18, v44);
    v45 = *(_QWORD *)(*(_QWORD *)v18 + 16);
    if (v45 < result)
      goto LABEL_51;
    specialized Array.replaceSubrange<A>(_:with:)(result, v45);
    outlined destroy of Slice<IndexSet>(v44);
    swift_endAccess();
    return (*(uint64_t (**)(char *, uint64_t))(v46 + 8))(v9, v47);
  }
  v20 = type metadata accessor for AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>, CGFloat>(0, &lazy cache variable for type metadata for AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>, ResolvedGradientVector>, (void (*)(void))lazy protocol witness table accessor for type ResolvedGradientVector and conformance ResolvedGradientVector);
  v21 = 0;
  v22 = MEMORY[0x24BEE13C8];
  v49 = v19;
  while (1)
  {
    swift_beginAccess();
    v23 = *(_QWORD **)v18;
    result = swift_isUniquelyReferenced_nonNull_native();
    *(_QWORD *)v18 = v23;
    if ((result & 1) == 0)
    {
      result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v23);
      v23 = (_QWORD *)result;
      *(_QWORD *)v18 = result;
    }
    if (v21 >= v23[2])
      break;
    v24 = &v23[9 * v21];
    v25 = v24[5];
    swift_bridgeObjectRetain();
    v26 = AGCreateWeakAttribute();
    v55[0] = v25;
    v55[1] = v26;
    v56 = 0;
    v27 = v24[4];
    v28 = v24[6];
    v29 = v24[7];
    v30 = v24[8];
    v31 = v24[9];
    v32 = v24[10];
    v33 = *((_BYTE *)v24 + 88);
    v51[0] = v28;
    v51[1] = v29;
    v51[2] = v30;
    v51[3] = v31;
    v51[4] = v32;
    v52 = v33;
    if (v20 == v22)
    {
      v50[0] = v28;
      (*(void (**)(__int128 *__return_ptr, _QWORD *, _QWORD *, uint64_t, _UNKNOWN **, double))(*(_QWORD *)v27 + 120))(&v53, v50, v55, v22, &protocol witness table for Double, a2);
      if (v54)
        goto LABEL_30;
    }
    else if (v20 == type metadata accessor for AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>())
    {
      v50[0] = v28;
      v50[1] = v29;
      v50[2] = v30;
      v50[3] = v31;
      v37 = *(void (**)(__int128 *__return_ptr, _QWORD *, _QWORD *, uint64_t, uint64_t, double))(*(_QWORD *)v27 + 120);
      v38 = lazy protocol witness table accessor for type AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>> and conformance AnimatablePair<A, B>();
      v37(&v53, v50, v55, v20, v38, a2);
      if (v54)
      {
LABEL_30:
        swift_bridgeObjectRelease();
        v36 = HIBYTE(v56);
        goto LABEL_33;
      }
    }
    else
    {
      v34 = *(void (**)(__int128 *__return_ptr, _QWORD *, _QWORD *, uint64_t, unint64_t, double))(*(_QWORD *)v27 + 120);
      v35 = lazy protocol witness table accessor for type AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>, ResolvedGradientVector> and conformance AnimatablePair<A, B>();
      v34(&v53, v51, v55, v20, v35, a2);
      if (v54)
        goto LABEL_30;
    }
    v36 = 1;
LABEL_33:
    swift_bridgeObjectRelease();
    v39 = *(_QWORD *)v18;
    result = swift_endAccess();
    if (!v36)
      goto LABEL_21;
    if (v21 >= *(_QWORD *)(v39 + 16))
      goto LABEL_49;
    v40 = *(_QWORD *)(v39 + 72 * v21 + 96);
    if (v40 >> 62)
    {
      swift_bridgeObjectRetain();
      result = _CocoaArrayWrapper.endIndex.getter();
      v41 = result;
      if (result)
      {
LABEL_37:
        if (v41 < 1)
          goto LABEL_50;
        for (j = 0; j != v41; ++j)
        {
          if ((v40 & 0xC000000000000001) != 0)
          {
            v43 = MEMORY[0x23B7C6D9C](j, v40);
          }
          else
          {
            v43 = *(_QWORD *)(v40 + 8 * j + 32);
            swift_retain();
          }
          (*(void (**)(void))(*(_QWORD *)v43 + 96))();
          swift_release();
        }
      }
    }
    else
    {
      v41 = *(_QWORD *)((v40 & 0xFFFFFFFFFFFFF8) + 0x10);
      result = swift_bridgeObjectRetain();
      if (v41)
        goto LABEL_37;
    }
    swift_bridgeObjectRelease();
    IndexSet.insert(_:)(v21);
    v19 = v49;
    v22 = MEMORY[0x24BEE13C8];
LABEL_21:
    if (++v21 == v19)
      goto LABEL_45;
  }
  __break(1u);
LABEL_49:
  __break(1u);
LABEL_50:
  __break(1u);
LABEL_51:
  __break(1u);
LABEL_52:
  __break(1u);
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  uint64_t i;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(_QWORD *__return_ptr, _QWORD *, _QWORD *, uint64_t, unint64_t, double);
  unint64_t v32;
  void (*v33)(_QWORD *__return_ptr, _QWORD *, _QWORD *, uint64_t, uint64_t, double);
  uint64_t v34;
  char v35;
  char v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t j;
  uint64_t v41;
  uint64_t v42;
  int64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD v49[4];
  _QWORD v50[2];
  __int128 v51;
  _QWORD v52[3];
  _QWORD v53[2];
  __int16 v54;

  v3 = v2;
  type metadata accessor for CombinedAnimationState<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>>.Entry(0, (unint64_t *)&lazy cache variable for type metadata for Slice<IndexSet>, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF428], lazy protocol witness table accessor for type IndexSet and conformance IndexSet, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE41D8]);
  MEMORY[0x24BDAC7A8](v6);
  v47 = (uint64_t)&v44 - v7;
  v46 = type metadata accessor for IndexSet();
  v45 = *(_QWORD *)(v46 - 8);
  MEMORY[0x24BDAC7A8](v46);
  v9 = (char *)&v44 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*(_BYTE *)(v2 + 128) & 1) != 0 || (a1 & 1) == 0)
    goto LABEL_17;
  *(_BYTE *)(v2 + 128) = a1 & 1;
  v10 = (uint64_t *)(v2 + 120);
  swift_beginAccess();
  v11 = *(_QWORD *)(v2 + 120);
  if (v11 >> 62)
  {
    swift_bridgeObjectRetain();
    v17 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v17)
      goto LABEL_17;
LABEL_5:
    v12 = *v10;
    if ((unint64_t)*v10 >> 62)
    {
      swift_bridgeObjectRetain();
      result = _CocoaArrayWrapper.endIndex.getter();
      v13 = result;
      if (result)
        goto LABEL_7;
    }
    else
    {
      v13 = *(_QWORD *)((v12 & 0xFFFFFFFFFFFFF8) + 0x10);
      result = swift_bridgeObjectRetain();
      if (v13)
      {
LABEL_7:
        if (v13 < 1)
          goto LABEL_50;
        for (i = 0; i != v13; ++i)
        {
          if ((v12 & 0xC000000000000001) != 0)
          {
            v16 = MEMORY[0x23B7C6D9C](i, v12);
          }
          else
          {
            v16 = *(_QWORD *)(v12 + 8 * i + 32);
            swift_retain();
          }
          (*(void (**)(void))(*(_QWORD *)v16 + 96))();
          swift_release();
        }
      }
    }
    swift_bridgeObjectRelease();
    *v10 = MEMORY[0x24BEE4AF8];
    swift_bridgeObjectRelease();
    goto LABEL_17;
  }
  if (*(_QWORD *)((v11 & 0xFFFFFFFFFFFFF8) + 0x10))
    goto LABEL_5;
LABEL_17:
  v18 = v3 + 136;
  result = swift_beginAccess();
  if (!*(_QWORD *)(*(_QWORD *)(v3 + 136) + 16))
    return result;
  IndexSet.init()();
  v19 = *(_QWORD *)(*(_QWORD *)v18 + 16);
  if (!v19)
  {
LABEL_43:
    swift_beginAccess();
    v42 = v47;
    specialized Collection.subscript.getter(v47);
    result = specialized MutableCollection.halfStablePartitionByOffset(isSuffixElementAtOffset:)(v18, v42);
    v43 = *(_QWORD *)(*(_QWORD *)v18 + 16);
    if (v43 < result)
      goto LABEL_49;
    specialized Array.replaceSubrange<A>(_:with:)(result, v43);
    outlined destroy of Slice<IndexSet>(v42);
    swift_endAccess();
    return (*(uint64_t (**)(char *, uint64_t))(v45 + 8))(v9, v46);
  }
  v20 = type metadata accessor for AnimatablePair<AnimatablePair<CGFloat, CGFloat>, ResolvedGradientVector>(0, &lazy cache variable for type metadata for AnimatablePair<AnimatablePair<CGFloat, CGFloat>, CGFloat>, (void (*)(void))lazy protocol witness table accessor for type CGFloat and conformance CGFloat);
  v21 = 0;
  v22 = MEMORY[0x24BEE13C8];
  v48 = v19;
  while (1)
  {
    swift_beginAccess();
    v23 = *(_QWORD **)v18;
    result = swift_isUniquelyReferenced_nonNull_native();
    *(_QWORD *)v18 = v23;
    if ((result & 1) == 0)
    {
      result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v23);
      v23 = (_QWORD *)result;
      *(_QWORD *)v18 = result;
    }
    if (v21 >= v23[2])
      break;
    v24 = &v23[6 * v21];
    v25 = v24[5];
    swift_bridgeObjectRetain();
    v26 = AGCreateWeakAttribute();
    v53[0] = v25;
    v53[1] = v26;
    v54 = 0;
    v27 = v24[4];
    v28 = v24[6];
    v29 = v24[7];
    v30 = v24[8];
    v52[0] = v28;
    v52[1] = v29;
    v52[2] = v30;
    if (v20 == v22)
    {
      v49[0] = v28;
      (*(void (**)(_QWORD *__return_ptr, _QWORD *, _QWORD *, uint64_t, _UNKNOWN **, double))(*(_QWORD *)v27 + 120))(v50, v49, v53, v22, &protocol witness table for Double, a2);
    }
    else if (v20 == type metadata accessor for AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>())
    {
      v49[0] = v28;
      v49[1] = v29;
      v49[2] = v30;
      v49[3] = v53[0];
      v33 = *(void (**)(_QWORD *__return_ptr, _QWORD *, _QWORD *, uint64_t, uint64_t, double))(*(_QWORD *)v27 + 120);
      v34 = lazy protocol witness table accessor for type AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>> and conformance AnimatablePair<A, B>();
      v33(v50, v49, v53, v20, v34, a2);
    }
    else
    {
      v31 = *(void (**)(_QWORD *__return_ptr, _QWORD *, _QWORD *, uint64_t, unint64_t, double))(*(_QWORD *)v27 + 120);
      v32 = lazy protocol witness table accessor for type AnimatablePair<AnimatablePair<CGFloat, CGFloat>, CGFloat> and conformance AnimatablePair<A, B>();
      v31(v50, v52, v53, v20, v32, a2);
    }
    v35 = BYTE8(v51);
    v36 = HIBYTE(v54);
    swift_bridgeObjectRelease();
    v37 = *(_QWORD *)v18;
    result = swift_endAccess();
    if ((v35 & 1) == 0 && (v36 & 1) == 0)
      goto LABEL_21;
    if (v21 >= *(_QWORD *)(v37 + 16))
      goto LABEL_47;
    v38 = *(_QWORD *)(v37 + 48 * v21 + 72);
    if (v38 >> 62)
    {
      swift_bridgeObjectRetain();
      result = _CocoaArrayWrapper.endIndex.getter();
      v39 = result;
      if (result)
      {
LABEL_35:
        if (v39 < 1)
          goto LABEL_48;
        for (j = 0; j != v39; ++j)
        {
          if ((v38 & 0xC000000000000001) != 0)
          {
            v41 = MEMORY[0x23B7C6D9C](j, v38);
          }
          else
          {
            v41 = *(_QWORD *)(v38 + 8 * j + 32);
            swift_retain();
          }
          (*(void (**)(void))(*(_QWORD *)v41 + 96))();
          swift_release();
        }
      }
    }
    else
    {
      v39 = *(_QWORD *)((v38 & 0xFFFFFFFFFFFFF8) + 0x10);
      result = swift_bridgeObjectRetain();
      if (v39)
        goto LABEL_35;
    }
    swift_bridgeObjectRelease();
    IndexSet.insert(_:)(v21);
    v19 = v48;
    v22 = MEMORY[0x24BEE13C8];
LABEL_21:
    if (++v21 == v19)
      goto LABEL_43;
  }
  __break(1u);
LABEL_47:
  __break(1u);
LABEL_48:
  __break(1u);
LABEL_49:
  __break(1u);
LABEL_50:
  __break(1u);
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  uint64_t i;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  __int128 v30;
  void (*v31)(uint64_t *__return_ptr, _QWORD *, _QWORD *, ValueMetadata *, unint64_t, double);
  unint64_t v32;
  _QWORD *v33;
  char v34;
  char v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t j;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  int64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  __int128 v48;
  _QWORD v49[5];
  _QWORD v50[3];
  __int128 v51;
  char v52;
  uint64_t v53[5];
  char v54;
  _QWORD v55[2];
  __int16 v56;

  v3 = v2;
  type metadata accessor for CombinedAnimationState<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>>.Entry(0, (unint64_t *)&lazy cache variable for type metadata for Slice<IndexSet>, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF428], lazy protocol witness table accessor for type IndexSet and conformance IndexSet, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE41D8]);
  MEMORY[0x24BDAC7A8](v6);
  v46 = (uint64_t)&v44 - v7;
  v45 = type metadata accessor for IndexSet();
  v44 = *(_QWORD *)(v45 - 8);
  MEMORY[0x24BDAC7A8](v45);
  v9 = (char *)&v44 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*(_BYTE *)(v3 + 176) & 1) != 0 || (a1 & 1) == 0)
    goto LABEL_17;
  *(_BYTE *)(v3 + 176) = a1 & 1;
  v10 = (uint64_t *)(v3 + 168);
  swift_beginAccess();
  v11 = *(_QWORD *)(v3 + 168);
  if (v11 >> 62)
  {
    swift_bridgeObjectRetain();
    v17 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v17)
      goto LABEL_17;
LABEL_5:
    v12 = *v10;
    if ((unint64_t)*v10 >> 62)
    {
      swift_bridgeObjectRetain();
      result = _CocoaArrayWrapper.endIndex.getter();
      v13 = result;
      if (result)
        goto LABEL_7;
    }
    else
    {
      v13 = *(_QWORD *)((v12 & 0xFFFFFFFFFFFFF8) + 0x10);
      result = swift_bridgeObjectRetain();
      if (v13)
      {
LABEL_7:
        if (v13 < 1)
          goto LABEL_48;
        for (i = 0; i != v13; ++i)
        {
          if ((v12 & 0xC000000000000001) != 0)
          {
            v16 = MEMORY[0x23B7C6D9C](i, v12);
          }
          else
          {
            v16 = *(_QWORD *)(v12 + 8 * i + 32);
            swift_retain();
          }
          (*(void (**)(void))(*(_QWORD *)v16 + 96))();
          swift_release();
        }
      }
    }
    swift_bridgeObjectRelease();
    *v10 = MEMORY[0x24BEE4AF8];
    swift_bridgeObjectRelease();
    goto LABEL_17;
  }
  if (*(_QWORD *)((v11 & 0xFFFFFFFFFFFFF8) + 0x10))
    goto LABEL_5;
LABEL_17:
  v18 = v3 + 184;
  result = swift_beginAccess();
  if (!*(_QWORD *)(*(_QWORD *)(v3 + 184) + 16))
    return result;
  v47 = v9;
  IndexSet.init()();
  v19 = *(_QWORD *)(*(_QWORD *)v18 + 16);
  if (!v19)
  {
LABEL_41:
    swift_beginAccess();
    v41 = v46;
    v42 = v47;
    specialized Collection.subscript.getter(v46);
    result = specialized MutableCollection.halfStablePartitionByOffset(isSuffixElementAtOffset:)(v18, v41);
    v43 = *(_QWORD *)(*(_QWORD *)v18 + 16);
    if (v43 < result)
      goto LABEL_47;
    specialized Array.replaceSubrange<A>(_:with:)(result, v43);
    outlined destroy of Slice<IndexSet>(v41);
    swift_endAccess();
    return (*(uint64_t (**)(char *, uint64_t))(v44 + 8))(v42, v45);
  }
  v20 = 0;
  while (1)
  {
    swift_beginAccess();
    v21 = *(_QWORD **)v18;
    result = swift_isUniquelyReferenced_nonNull_native();
    *(_QWORD *)v18 = v21;
    if ((result & 1) == 0)
    {
      result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v21);
      v21 = (_QWORD *)result;
      *(_QWORD *)v18 = result;
    }
    if (v20 >= v21[2])
      break;
    v22 = &v21[9 * v20];
    v23 = v22[5];
    swift_bridgeObjectRetain();
    v24 = AGCreateWeakAttribute();
    v55[0] = v23;
    v55[1] = v24;
    v56 = 0;
    v25 = v22[4];
    v26 = v22[6];
    v27 = v22[7];
    v28 = v22[8];
    v29 = *((_BYTE *)v22 + 88);
    v30 = *(_OWORD *)(v22 + 9);
    v50[0] = v26;
    v50[1] = v27;
    v50[2] = v28;
    v48 = v30;
    v51 = v30;
    v52 = v29;
    if ((ValueMetadata *)type metadata accessor for AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>() == &type metadata for _ShapeStyle_Pack.Effect.Kind.AnimatableData)
    {
      v49[0] = v26;
      v49[1] = v27;
      v49[2] = v28;
      v49[3] = v48;
      v31 = *(void (**)(uint64_t *__return_ptr, _QWORD *, _QWORD *, ValueMetadata *, unint64_t, double))(*(_QWORD *)v25 + 120);
      v32 = lazy protocol witness table accessor for type AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>> and conformance AnimatablePair<A, B>();
      v33 = v49;
    }
    else
    {
      v31 = *(void (**)(uint64_t *__return_ptr, _QWORD *, _QWORD *, ValueMetadata *, unint64_t, double))(*(_QWORD *)v25 + 120);
      v32 = lazy protocol witness table accessor for type _ShapeStyle_Pack.Effect.Kind.AnimatableData and conformance _ShapeStyle_Pack.Effect.Kind.AnimatableData();
      v33 = v50;
    }
    v31(v53, v33, v55, &type metadata for _ShapeStyle_Pack.Effect.Kind.AnimatableData, v32, a2);
    v34 = v54;
    v35 = HIBYTE(v56);
    swift_bridgeObjectRelease();
    v36 = *(_QWORD *)v18;
    result = swift_endAccess();
    if ((v34 & 1) == 0 && (v35 & 1) == 0)
      goto LABEL_21;
    if (v20 >= *(_QWORD *)(v36 + 16))
      goto LABEL_45;
    v37 = *(_QWORD *)(v36 + 72 * v20 + 96);
    if (v37 >> 62)
    {
      swift_bridgeObjectRetain();
      result = _CocoaArrayWrapper.endIndex.getter();
      v38 = result;
      if (result)
      {
LABEL_33:
        if (v38 < 1)
          goto LABEL_46;
        for (j = 0; j != v38; ++j)
        {
          if ((v37 & 0xC000000000000001) != 0)
          {
            v40 = MEMORY[0x23B7C6D9C](j, v37);
          }
          else
          {
            v40 = *(_QWORD *)(v37 + 8 * j + 32);
            swift_retain();
          }
          (*(void (**)(void))(*(_QWORD *)v40 + 96))();
          swift_release();
        }
      }
    }
    else
    {
      v38 = *(_QWORD *)((v37 & 0xFFFFFFFFFFFFF8) + 0x10);
      result = swift_bridgeObjectRetain();
      if (v38)
        goto LABEL_33;
    }
    swift_bridgeObjectRelease();
    IndexSet.insert(_:)(v20);
LABEL_21:
    if (++v20 == v19)
      goto LABEL_41;
  }
  __break(1u);
LABEL_45:
  __break(1u);
LABEL_46:
  __break(1u);
LABEL_47:
  __break(1u);
LABEL_48:
  __break(1u);
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  uint64_t i;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  void (*v32)(_QWORD *__return_ptr, _QWORD *, _QWORD *, uint64_t, unint64_t, double);
  unint64_t v33;
  void (*v34)(_QWORD *__return_ptr, _QWORD *, _QWORD *, uint64_t, uint64_t, double);
  uint64_t v35;
  char v36;
  char v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t j;
  uint64_t v42;
  uint64_t v43;
  int64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  __int128 v49;
  _QWORD v50[5];
  _QWORD v51[3];
  __int128 v52;
  _QWORD v53[5];
  char v54;
  _QWORD v55[2];
  __int16 v56;

  v3 = v2;
  type metadata accessor for CombinedAnimationState<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>>.Entry(0, (unint64_t *)&lazy cache variable for type metadata for Slice<IndexSet>, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF428], lazy protocol witness table accessor for type IndexSet and conformance IndexSet, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE41D8]);
  MEMORY[0x24BDAC7A8](v6);
  v47 = (uint64_t)&v45 - v7;
  v46 = type metadata accessor for IndexSet();
  v45 = *(_QWORD *)(v46 - 8);
  MEMORY[0x24BDAC7A8](v46);
  v9 = (char *)&v45 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*(_BYTE *)(v2 + 160) & 1) != 0 || (a1 & 1) == 0)
    goto LABEL_17;
  *(_BYTE *)(v2 + 160) = a1 & 1;
  v10 = (uint64_t *)(v2 + 152);
  swift_beginAccess();
  v11 = *(_QWORD *)(v2 + 152);
  if (v11 >> 62)
  {
    swift_bridgeObjectRetain();
    v17 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v17)
      goto LABEL_17;
LABEL_5:
    v12 = *v10;
    if ((unint64_t)*v10 >> 62)
    {
      swift_bridgeObjectRetain();
      result = _CocoaArrayWrapper.endIndex.getter();
      v13 = result;
      if (result)
        goto LABEL_7;
    }
    else
    {
      v13 = *(_QWORD *)((v12 & 0xFFFFFFFFFFFFF8) + 0x10);
      result = swift_bridgeObjectRetain();
      if (v13)
      {
LABEL_7:
        if (v13 < 1)
          goto LABEL_50;
        for (i = 0; i != v13; ++i)
        {
          if ((v12 & 0xC000000000000001) != 0)
          {
            v16 = MEMORY[0x23B7C6D9C](i, v12);
          }
          else
          {
            v16 = *(_QWORD *)(v12 + 8 * i + 32);
            swift_retain();
          }
          (*(void (**)(void))(*(_QWORD *)v16 + 96))();
          swift_release();
        }
      }
    }
    swift_bridgeObjectRelease();
    *v10 = MEMORY[0x24BEE4AF8];
    swift_bridgeObjectRelease();
    goto LABEL_17;
  }
  if (*(_QWORD *)((v11 & 0xFFFFFFFFFFFFF8) + 0x10))
    goto LABEL_5;
LABEL_17:
  v18 = v3 + 168;
  result = swift_beginAccess();
  if (!*(_QWORD *)(*(_QWORD *)(v3 + 168) + 16))
    return result;
  IndexSet.init()();
  v19 = *(_QWORD *)(*(_QWORD *)v18 + 16);
  if (!v19)
  {
LABEL_43:
    swift_beginAccess();
    v43 = v47;
    specialized Collection.subscript.getter(v47);
    result = specialized MutableCollection.halfStablePartitionByOffset(isSuffixElementAtOffset:)(v18, v43);
    v44 = *(_QWORD *)(*(_QWORD *)v18 + 16);
    if (v44 < result)
      goto LABEL_49;
    specialized Array.replaceSubrange<A>(_:with:)(result, v44);
    outlined destroy of Slice<IndexSet>(v43);
    swift_endAccess();
    return (*(uint64_t (**)(char *, uint64_t))(v45 + 8))(v9, v46);
  }
  v20 = type metadata accessor for AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>, CGFloat>(0, &lazy cache variable for type metadata for AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>, CGFloat>, (void (*)(void))lazy protocol witness table accessor for type CGFloat and conformance CGFloat);
  v21 = 0;
  v22 = MEMORY[0x24BEE13C8];
  v48 = v19;
  while (1)
  {
    swift_beginAccess();
    v23 = *(_QWORD **)v18;
    result = swift_isUniquelyReferenced_nonNull_native();
    *(_QWORD *)v18 = v23;
    if ((result & 1) == 0)
    {
      result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v23);
      v23 = (_QWORD *)result;
      *(_QWORD *)v18 = result;
    }
    if (v21 >= v23[2])
      break;
    v24 = &v23[8 * v21];
    v25 = v24[5];
    swift_bridgeObjectRetain();
    v26 = AGCreateWeakAttribute();
    v55[0] = v25;
    v55[1] = v26;
    v56 = 0;
    v27 = v24[4];
    v28 = v24[6];
    v29 = v24[7];
    v30 = v24[8];
    v31 = *(_OWORD *)(v24 + 9);
    v51[0] = v28;
    v51[1] = v29;
    v51[2] = v30;
    v52 = v31;
    if (v20 == v22)
    {
      v50[0] = v28;
      (*(void (**)(_QWORD *__return_ptr, _QWORD *, _QWORD *, uint64_t, _UNKNOWN **, double))(*(_QWORD *)v27 + 120))(v53, v50, v55, v22, &protocol witness table for Double, a2);
    }
    else
    {
      v49 = v31;
      if (v20 == type metadata accessor for AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>())
      {
        v50[0] = v28;
        v50[1] = v29;
        v50[2] = v30;
        v50[3] = v49;
        v34 = *(void (**)(_QWORD *__return_ptr, _QWORD *, _QWORD *, uint64_t, uint64_t, double))(*(_QWORD *)v27 + 120);
        v35 = lazy protocol witness table accessor for type AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>> and conformance AnimatablePair<A, B>();
        v34(v53, v50, v55, v20, v35, a2);
      }
      else
      {
        v32 = *(void (**)(_QWORD *__return_ptr, _QWORD *, _QWORD *, uint64_t, unint64_t, double))(*(_QWORD *)v27 + 120);
        v33 = lazy protocol witness table accessor for type AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>, CGFloat> and conformance AnimatablePair<A, B>();
        v32(v53, v51, v55, v20, v33, a2);
      }
    }
    v36 = v54;
    v37 = HIBYTE(v56);
    swift_bridgeObjectRelease();
    v38 = *(_QWORD *)v18;
    result = swift_endAccess();
    if ((v36 & 1) == 0 && (v37 & 1) == 0)
      goto LABEL_21;
    if (v21 >= *(_QWORD *)(v38 + 16))
      goto LABEL_47;
    v39 = *(_QWORD *)(v38 + (v21 << 6) + 88);
    if (v39 >> 62)
    {
      swift_bridgeObjectRetain();
      result = _CocoaArrayWrapper.endIndex.getter();
      v40 = result;
      if (result)
      {
LABEL_35:
        if (v40 < 1)
          goto LABEL_48;
        for (j = 0; j != v40; ++j)
        {
          if ((v39 & 0xC000000000000001) != 0)
          {
            v42 = MEMORY[0x23B7C6D9C](j, v39);
          }
          else
          {
            v42 = *(_QWORD *)(v39 + 8 * j + 32);
            swift_retain();
          }
          (*(void (**)(void))(*(_QWORD *)v42 + 96))();
          swift_release();
        }
      }
    }
    else
    {
      v40 = *(_QWORD *)((v39 & 0xFFFFFFFFFFFFF8) + 0x10);
      result = swift_bridgeObjectRetain();
      if (v40)
        goto LABEL_35;
    }
    swift_bridgeObjectRelease();
    IndexSet.insert(_:)(v21);
    v19 = v48;
    v22 = MEMORY[0x24BEE13C8];
LABEL_21:
    if (++v21 == v19)
      goto LABEL_43;
  }
  __break(1u);
LABEL_47:
  __break(1u);
LABEL_48:
  __break(1u);
LABEL_49:
  __break(1u);
LABEL_50:
  __break(1u);
  return result;
}

uint64_t specialized AnimatorState.updateListeners(isLogicallyComplete:time:environment:)(char a1, uint64_t a2, double a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  uint64_t i;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(uint64_t *__return_ptr, uint64_t *, __int128 *, uint64_t, unint64_t, double);
  unint64_t v31;
  char v32;
  void (*v33)(uint64_t *__return_ptr, uint64_t *, __int128 *, uint64_t, uint64_t, double);
  uint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t j;
  uint64_t v43;
  uint64_t v44;
  int64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  __int128 v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  __int128 v56;
  uint64_t v57;

  v4 = v3;
  type metadata accessor for CombinedAnimationState<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>>.Entry(0, (unint64_t *)&lazy cache variable for type metadata for Slice<IndexSet>, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF428], lazy protocol witness table accessor for type IndexSet and conformance IndexSet, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE41D8]);
  MEMORY[0x24BDAC7A8](v8);
  v48 = (uint64_t)&v46 - v9;
  v47 = type metadata accessor for IndexSet();
  v46 = *(_QWORD *)(v47 - 8);
  MEMORY[0x24BDAC7A8](v47);
  v11 = (char *)&v46 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*(_BYTE *)(v4 + 96) & 1) != 0 || (a1 & 1) == 0)
    goto LABEL_17;
  *(_BYTE *)(v4 + 96) = a1 & 1;
  v12 = (uint64_t *)(v4 + 88);
  swift_beginAccess();
  v13 = *(_QWORD *)(v4 + 88);
  if (v13 >> 62)
  {
    swift_bridgeObjectRetain();
    v19 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v19)
      goto LABEL_17;
LABEL_5:
    v14 = *v12;
    if ((unint64_t)*v12 >> 62)
    {
      swift_bridgeObjectRetain();
      result = _CocoaArrayWrapper.endIndex.getter();
      v15 = result;
      if (result)
        goto LABEL_7;
    }
    else
    {
      v15 = *(_QWORD *)((v14 & 0xFFFFFFFFFFFFF8) + 0x10);
      result = swift_bridgeObjectRetain();
      if (v15)
      {
LABEL_7:
        if (v15 < 1)
          goto LABEL_51;
        for (i = 0; i != v15; ++i)
        {
          if ((v14 & 0xC000000000000001) != 0)
          {
            v18 = MEMORY[0x23B7C6D9C](i, v14);
          }
          else
          {
            v18 = *(_QWORD *)(v14 + 8 * i + 32);
            swift_retain();
          }
          (*(void (**)(void))(*(_QWORD *)v18 + 96))();
          swift_release();
        }
      }
    }
    swift_bridgeObjectRelease();
    *v12 = MEMORY[0x24BEE4AF8];
    swift_bridgeObjectRelease();
    goto LABEL_17;
  }
  if (*(_QWORD *)((v13 & 0xFFFFFFFFFFFFF8) + 0x10))
    goto LABEL_5;
LABEL_17:
  v20 = v4 + 104;
  result = swift_beginAccess();
  if (!*(_QWORD *)(*(_QWORD *)(v4 + 104) + 16))
    return result;
  IndexSet.init()();
  v21 = *(_QWORD *)(*(_QWORD *)v20 + 16);
  if (!v21)
  {
LABEL_44:
    swift_beginAccess();
    v44 = v48;
    specialized Collection.subscript.getter(v48);
    result = specialized MutableCollection.halfStablePartitionByOffset(isSuffixElementAtOffset:)(v20, v44);
    v45 = *(_QWORD *)(*(_QWORD *)v20 + 16);
    if (v45 < result)
      goto LABEL_50;
    specialized Array.replaceSubrange<A>(_:with:)(result, v45);
    outlined destroy of Slice<IndexSet>(v44);
    swift_endAccess();
    return (*(uint64_t (**)(char *, uint64_t))(v46 + 8))(v11, v47);
  }
  v22 = 0;
  if ((a2 & 0x100000000) != 0)
    a2 = *MEMORY[0x24BE096C0];
  else
    a2 = a2;
  v23 = MEMORY[0x24BEE50B0];
  v49 = *(_QWORD *)(*(_QWORD *)v20 + 16);
  while (1)
  {
    swift_beginAccess();
    v24 = *(_QWORD **)v20;
    result = swift_isUniquelyReferenced_nonNull_native();
    *(_QWORD *)v20 = v24;
    if ((result & 1) == 0)
    {
      result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v24);
      v24 = (_QWORD *)result;
      *(_QWORD *)v20 = result;
    }
    if (v22 >= v24[2])
      break;
    v25 = &v24[4 * v22];
    v26 = v25[5];
    swift_bridgeObjectRetain();
    v27 = AGCreateWeakAttribute();
    *(_QWORD *)&v56 = v26;
    *((_QWORD *)&v56 + 1) = v27;
    LOWORD(v57) = 0;
    v28 = v25[4];
    v29 = v25[6];
    v55 = v29;
    if (type metadata accessor for AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>() == v23)
    {
      v50 = v29;
      v51 = v56;
      v52 = v57;
      v33 = *(void (**)(uint64_t *__return_ptr, uint64_t *, __int128 *, uint64_t, uint64_t, double))(*(_QWORD *)v28 + 120);
      v34 = lazy protocol witness table accessor for type AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>> and conformance AnimatablePair<A, B>();
      v33(&v53, &v50, &v56, v23, v34, a3);
      v32 = v54 & 1;
    }
    else
    {
      v30 = *(void (**)(uint64_t *__return_ptr, uint64_t *, __int128 *, uint64_t, unint64_t, double))(*(_QWORD *)v28 + 120);
      v31 = lazy protocol witness table accessor for type CGFloat and conformance CGFloat();
      v30(&v53, &v55, &v56, v23, v31, a3);
      v32 = v54;
    }
    v35 = BYTE1(v57);
    swift_bridgeObjectRelease();
    v36 = *(_QWORD *)v20;
    result = swift_endAccess();
    if ((v32 & 1) == 0 && (v35 & 1) == 0)
      goto LABEL_24;
    if (v22 >= *(_QWORD *)(v36 + 16))
      goto LABEL_48;
    v37 = v23;
    v38 = a2;
    v39 = v11;
    v40 = *(_QWORD *)(v36 + 32 * v22 + 56);
    if (v40 >> 62)
    {
      swift_bridgeObjectRetain();
      result = _CocoaArrayWrapper.endIndex.getter();
      v41 = result;
      if (result)
      {
LABEL_36:
        if (v41 < 1)
          goto LABEL_49;
        for (j = 0; j != v41; ++j)
        {
          if ((v40 & 0xC000000000000001) != 0)
          {
            v43 = MEMORY[0x23B7C6D9C](j, v40);
          }
          else
          {
            v43 = *(_QWORD *)(v40 + 8 * j + 32);
            swift_retain();
          }
          (*(void (**)(void))(*(_QWORD *)v43 + 96))();
          swift_release();
        }
      }
    }
    else
    {
      v41 = *(_QWORD *)((v40 & 0xFFFFFFFFFFFFF8) + 0x10);
      result = swift_bridgeObjectRetain();
      if (v41)
        goto LABEL_36;
    }
    swift_bridgeObjectRelease();
    v11 = v39;
    IndexSet.insert(_:)(v22);
    a2 = v38;
    v23 = v37;
    v21 = v49;
LABEL_24:
    if (++v22 == v21)
      goto LABEL_44;
  }
  __break(1u);
LABEL_48:
  __break(1u);
LABEL_49:
  __break(1u);
LABEL_50:
  __break(1u);
LABEL_51:
  __break(1u);
  return result;
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  uint64_t i;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(_QWORD *__return_ptr, _QWORD *, __int128 *, uint64_t, unint64_t, double);
  unint64_t v33;
  void (*v34)(_QWORD *__return_ptr, _QWORD *, __int128 *, uint64_t, uint64_t, double);
  uint64_t v35;
  char v36;
  char v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t j;
  uint64_t v42;
  uint64_t v43;
  int64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  _QWORD v50[2];
  __int128 v51;
  _QWORD v52[2];
  uint64_t v53;
  _QWORD v54[2];
  __int128 v55;
  __int16 v56;

  v4 = v3;
  type metadata accessor for CombinedAnimationState<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>>.Entry(0, (unint64_t *)&lazy cache variable for type metadata for Slice<IndexSet>, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF428], lazy protocol witness table accessor for type IndexSet and conformance IndexSet, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE41D8]);
  MEMORY[0x24BDAC7A8](v8);
  v48 = (uint64_t)&v45 - v9;
  v47 = type metadata accessor for IndexSet();
  v46 = *(_QWORD *)(v47 - 8);
  MEMORY[0x24BDAC7A8](v47);
  v11 = (char *)&v45 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*(_BYTE *)(v3 + 112) & 1) != 0 || (a1 & 1) == 0)
    goto LABEL_17;
  *(_BYTE *)(v3 + 112) = a1 & 1;
  v12 = (uint64_t *)(v3 + 104);
  swift_beginAccess();
  v13 = *(_QWORD *)(v3 + 104);
  if (v13 >> 62)
  {
    swift_bridgeObjectRetain();
    v19 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v19)
      goto LABEL_17;
LABEL_5:
    v14 = *v12;
    if ((unint64_t)*v12 >> 62)
    {
      swift_bridgeObjectRetain();
      result = _CocoaArrayWrapper.endIndex.getter();
      v15 = result;
      if (result)
        goto LABEL_7;
    }
    else
    {
      v15 = *(_QWORD *)((v14 & 0xFFFFFFFFFFFFF8) + 0x10);
      result = swift_bridgeObjectRetain();
      if (v15)
      {
LABEL_7:
        if (v15 < 1)
          goto LABEL_52;
        for (i = 0; i != v15; ++i)
        {
          if ((v14 & 0xC000000000000001) != 0)
          {
            v18 = MEMORY[0x23B7C6D9C](i, v14);
          }
          else
          {
            v18 = *(_QWORD *)(v14 + 8 * i + 32);
            swift_retain();
          }
          (*(void (**)(void))(*(_QWORD *)v18 + 96))();
          swift_release();
        }
      }
    }
    swift_bridgeObjectRelease();
    *v12 = MEMORY[0x24BEE4AF8];
    swift_bridgeObjectRelease();
    goto LABEL_17;
  }
  if (*(_QWORD *)((v13 & 0xFFFFFFFFFFFFF8) + 0x10))
    goto LABEL_5;
LABEL_17:
  v20 = v4 + 120;
  result = swift_beginAccess();
  if (!*(_QWORD *)(*(_QWORD *)(v4 + 120) + 16))
    return result;
  IndexSet.init()();
  v21 = *(_QWORD *)(*(_QWORD *)v20 + 16);
  if (!v21)
  {
LABEL_45:
    swift_beginAccess();
    v43 = v48;
    specialized Collection.subscript.getter(v48);
    result = specialized MutableCollection.halfStablePartitionByOffset(isSuffixElementAtOffset:)(v20, v43);
    v44 = *(_QWORD *)(*(_QWORD *)v20 + 16);
    if (v44 < result)
      goto LABEL_51;
    specialized Array.replaceSubrange<A>(_:with:)(result, v44);
    outlined destroy of Slice<IndexSet>(v43);
    swift_endAccess();
    return (*(uint64_t (**)(char *, uint64_t))(v46 + 8))(v11, v47);
  }
  v22 = type metadata accessor for AnimatablePair<CGFloat, CGFloat>();
  v23 = 0;
  if ((a2 & 0x100000000) != 0)
    LODWORD(a2) = *MEMORY[0x24BE096C0];
  v24 = MEMORY[0x24BEE13C8];
  v49 = a2;
  while (1)
  {
    swift_beginAccess();
    v25 = *(_QWORD **)v20;
    result = swift_isUniquelyReferenced_nonNull_native();
    *(_QWORD *)v20 = v25;
    if ((result & 1) == 0)
    {
      result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v25);
      v25 = (_QWORD *)result;
      *(_QWORD *)v20 = result;
    }
    if (v23 >= v25[2])
      break;
    v26 = &v25[5 * v23];
    v27 = v26[5];
    swift_bridgeObjectRetain();
    v28 = AGCreateWeakAttribute();
    *(_QWORD *)&v55 = v27;
    *((_QWORD *)&v55 + 1) = v28;
    v56 = 0;
    v29 = v26[4];
    v30 = v26[6];
    v31 = v26[7];
    v54[0] = v30;
    v54[1] = v31;
    if (v22 == v24)
    {
      v50[0] = v30;
      (*(void (**)(_QWORD *__return_ptr, _QWORD *, __int128 *, uint64_t, _UNKNOWN **, double))(*(_QWORD *)v29 + 120))(v52, v50, &v55, v24, &protocol witness table for Double, a3);
    }
    else if (v22 == type metadata accessor for AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>())
    {
      v50[0] = v30;
      v50[1] = v31;
      v51 = v55;
      v34 = *(void (**)(_QWORD *__return_ptr, _QWORD *, __int128 *, uint64_t, uint64_t, double))(*(_QWORD *)v29 + 120);
      v35 = lazy protocol witness table accessor for type AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>> and conformance AnimatablePair<A, B>();
      v34(v52, v50, &v55, v22, v35, a3);
    }
    else
    {
      v32 = *(void (**)(_QWORD *__return_ptr, _QWORD *, __int128 *, uint64_t, unint64_t, double))(*(_QWORD *)v29 + 120);
      v33 = lazy protocol witness table accessor for type AnimatablePair<CGFloat, CGFloat> and conformance AnimatablePair<A, B>();
      v32(v52, v54, &v55, v22, v33, a3);
    }
    v36 = v53;
    v37 = HIBYTE(v56);
    swift_bridgeObjectRelease();
    v38 = *(_QWORD *)v20;
    result = swift_endAccess();
    if ((v36 & 1) == 0 && (v37 & 1) == 0)
      goto LABEL_23;
    if (v23 >= *(_QWORD *)(v38 + 16))
      goto LABEL_49;
    v39 = *(_QWORD *)(v38 + 40 * v23 + 64);
    if (v39 >> 62)
    {
      swift_bridgeObjectRetain();
      result = _CocoaArrayWrapper.endIndex.getter();
      v40 = result;
      if (result)
      {
LABEL_37:
        if (v40 < 1)
          goto LABEL_50;
        for (j = 0; j != v40; ++j)
        {
          if ((v39 & 0xC000000000000001) != 0)
          {
            v42 = MEMORY[0x23B7C6D9C](j, v39);
          }
          else
          {
            v42 = *(_QWORD *)(v39 + 8 * j + 32);
            swift_retain();
          }
          (*(void (**)(void))(*(_QWORD *)v42 + 96))();
          swift_release();
        }
      }
    }
    else
    {
      v40 = *(_QWORD *)((v39 & 0xFFFFFFFFFFFFF8) + 0x10);
      result = swift_bridgeObjectRetain();
      if (v40)
        goto LABEL_37;
    }
    swift_bridgeObjectRelease();
    IndexSet.insert(_:)(v23);
    v24 = MEMORY[0x24BEE13C8];
LABEL_23:
    if (++v23 == v21)
      goto LABEL_45;
  }
  __break(1u);
LABEL_49:
  __break(1u);
LABEL_50:
  __break(1u);
LABEL_51:
  __break(1u);
LABEL_52:
  __break(1u);
  return result;
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  uint64_t i;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(_QWORD *__return_ptr, _QWORD *, _QWORD *, uint64_t, uint64_t, double);
  uint64_t v34;
  void (*v35)(_QWORD *__return_ptr, _QWORD *, _QWORD *, uint64_t, uint64_t, double);
  uint64_t v36;
  char v37;
  char v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t j;
  uint64_t v43;
  uint64_t v44;
  int64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  _QWORD v51[4];
  _QWORD v52[2];
  __int128 v53;
  _QWORD v54[3];
  _QWORD v55[2];
  __int16 v56;

  v4 = v3;
  type metadata accessor for CombinedAnimationState<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>>.Entry(0, (unint64_t *)&lazy cache variable for type metadata for Slice<IndexSet>, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF428], lazy protocol witness table accessor for type IndexSet and conformance IndexSet, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE41D8]);
  MEMORY[0x24BDAC7A8](v8);
  v49 = (uint64_t)&v46 - v9;
  v48 = type metadata accessor for IndexSet();
  v47 = *(_QWORD *)(v48 - 8);
  MEMORY[0x24BDAC7A8](v48);
  v11 = (char *)&v46 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*(_BYTE *)(v3 + 128) & 1) != 0 || (a1 & 1) == 0)
    goto LABEL_17;
  *(_BYTE *)(v3 + 128) = a1 & 1;
  v12 = (uint64_t *)(v3 + 120);
  swift_beginAccess();
  v13 = *(_QWORD *)(v3 + 120);
  if (v13 >> 62)
  {
    swift_bridgeObjectRetain();
    v19 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v19)
      goto LABEL_17;
LABEL_5:
    v14 = *v12;
    if ((unint64_t)*v12 >> 62)
    {
      swift_bridgeObjectRetain();
      result = _CocoaArrayWrapper.endIndex.getter();
      v15 = result;
      if (result)
        goto LABEL_7;
    }
    else
    {
      v15 = *(_QWORD *)((v14 & 0xFFFFFFFFFFFFF8) + 0x10);
      result = swift_bridgeObjectRetain();
      if (v15)
      {
LABEL_7:
        if (v15 < 1)
          goto LABEL_52;
        for (i = 0; i != v15; ++i)
        {
          if ((v14 & 0xC000000000000001) != 0)
          {
            v18 = MEMORY[0x23B7C6D9C](i, v14);
          }
          else
          {
            v18 = *(_QWORD *)(v14 + 8 * i + 32);
            swift_retain();
          }
          (*(void (**)(void))(*(_QWORD *)v18 + 96))();
          swift_release();
        }
      }
    }
    swift_bridgeObjectRelease();
    *v12 = MEMORY[0x24BEE4AF8];
    swift_bridgeObjectRelease();
    goto LABEL_17;
  }
  if (*(_QWORD *)((v13 & 0xFFFFFFFFFFFFF8) + 0x10))
    goto LABEL_5;
LABEL_17:
  v20 = v4 + 136;
  result = swift_beginAccess();
  if (!*(_QWORD *)(*(_QWORD *)(v4 + 136) + 16))
    return result;
  IndexSet.init()();
  v21 = *(_QWORD *)(*(_QWORD *)v20 + 16);
  if (!v21)
  {
LABEL_45:
    swift_beginAccess();
    v44 = v49;
    specialized Collection.subscript.getter(v49);
    result = specialized MutableCollection.halfStablePartitionByOffset(isSuffixElementAtOffset:)(v20, v44);
    v45 = *(_QWORD *)(*(_QWORD *)v20 + 16);
    if (v45 < result)
      goto LABEL_51;
    specialized Array.replaceSubrange<A>(_:with:)(result, v45);
    outlined destroy of Slice<IndexSet>(v44);
    swift_endAccess();
    return (*(uint64_t (**)(char *, uint64_t))(v47 + 8))(v11, v48);
  }
  v22 = type metadata accessor for AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>(0);
  v23 = 0;
  if ((a2 & 0x100000000) != 0)
    LODWORD(a2) = *MEMORY[0x24BE096C0];
  v24 = MEMORY[0x24BEE13C8];
  v50 = a2;
  while (1)
  {
    swift_beginAccess();
    v25 = *(_QWORD **)v20;
    result = swift_isUniquelyReferenced_nonNull_native();
    *(_QWORD *)v20 = v25;
    if ((result & 1) == 0)
    {
      result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v25);
      v25 = (_QWORD *)result;
      *(_QWORD *)v20 = result;
    }
    if (v23 >= v25[2])
      break;
    v26 = &v25[6 * v23];
    v27 = v26[5];
    swift_bridgeObjectRetain();
    v28 = AGCreateWeakAttribute();
    v55[0] = v27;
    v55[1] = v28;
    v56 = 0;
    v29 = v26[4];
    v30 = v26[6];
    v31 = v26[7];
    v32 = v26[8];
    v54[0] = v30;
    v54[1] = v31;
    v54[2] = v32;
    if (v22 == v24)
    {
      v51[0] = v30;
      (*(void (**)(_QWORD *__return_ptr, _QWORD *, _QWORD *, uint64_t, _UNKNOWN **, double))(*(_QWORD *)v29 + 120))(v52, v51, v55, v24, &protocol witness table for Double, a3);
    }
    else if (v22 == type metadata accessor for AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>())
    {
      v51[0] = v30;
      v51[1] = v31;
      v51[2] = v32;
      v51[3] = v55[0];
      v35 = *(void (**)(_QWORD *__return_ptr, _QWORD *, _QWORD *, uint64_t, uint64_t, double))(*(_QWORD *)v29 + 120);
      v36 = lazy protocol witness table accessor for type AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>> and conformance AnimatablePair<A, B>();
      v35(v52, v51, v55, v22, v36, a3);
    }
    else
    {
      v33 = *(void (**)(_QWORD *__return_ptr, _QWORD *, _QWORD *, uint64_t, uint64_t, double))(*(_QWORD *)v29 + 120);
      v34 = lazy protocol witness table accessor for type AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>> and conformance AnimatablePair<A, B>();
      v33(v52, v54, v55, v22, v34, a3);
    }
    v37 = BYTE8(v53);
    v38 = HIBYTE(v56);
    swift_bridgeObjectRelease();
    v39 = *(_QWORD *)v20;
    result = swift_endAccess();
    if ((v37 & 1) == 0 && (v38 & 1) == 0)
      goto LABEL_23;
    if (v23 >= *(_QWORD *)(v39 + 16))
      goto LABEL_49;
    v40 = *(_QWORD *)(v39 + 48 * v23 + 72);
    if (v40 >> 62)
    {
      swift_bridgeObjectRetain();
      result = _CocoaArrayWrapper.endIndex.getter();
      v41 = result;
      if (result)
      {
LABEL_37:
        if (v41 < 1)
          goto LABEL_50;
        for (j = 0; j != v41; ++j)
        {
          if ((v40 & 0xC000000000000001) != 0)
          {
            v43 = MEMORY[0x23B7C6D9C](j, v40);
          }
          else
          {
            v43 = *(_QWORD *)(v40 + 8 * j + 32);
            swift_retain();
          }
          (*(void (**)(void))(*(_QWORD *)v43 + 96))();
          swift_release();
        }
      }
    }
    else
    {
      v41 = *(_QWORD *)((v40 & 0xFFFFFFFFFFFFF8) + 0x10);
      result = swift_bridgeObjectRetain();
      if (v41)
        goto LABEL_37;
    }
    swift_bridgeObjectRelease();
    IndexSet.insert(_:)(v23);
    v24 = MEMORY[0x24BEE13C8];
LABEL_23:
    if (++v23 == v21)
      goto LABEL_45;
  }
  __break(1u);
LABEL_49:
  __break(1u);
LABEL_50:
  __break(1u);
LABEL_51:
  __break(1u);
LABEL_52:
  __break(1u);
  return result;
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  uint64_t i;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  void (*v33)(__int128 *__return_ptr, _QWORD *, _QWORD *, uint64_t, uint64_t, double);
  uint64_t v34;
  uint64_t v35;
  int v36;
  void (*v37)(__int128 *__return_ptr, _QWORD *, _QWORD *, uint64_t, uint64_t, double);
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t j;
  uint64_t v46;
  uint64_t v47;
  int64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD v54[2];
  __int128 v55;
  __int128 v56;
  _QWORD v57[2];
  __int128 v58;
  _QWORD v59[2];
  __int16 v60;

  v4 = v3;
  type metadata accessor for CombinedAnimationState<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>>.Entry(0, (unint64_t *)&lazy cache variable for type metadata for Slice<IndexSet>, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF428], lazy protocol witness table accessor for type IndexSet and conformance IndexSet, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE41D8]);
  MEMORY[0x24BDAC7A8](v8);
  v52 = (uint64_t)&v49 - v9;
  v51 = type metadata accessor for IndexSet();
  v50 = *(_QWORD *)(v51 - 8);
  MEMORY[0x24BDAC7A8](v51);
  v11 = (char *)&v49 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*(_BYTE *)(v3 + 144) & 1) != 0 || (a1 & 1) == 0)
    goto LABEL_17;
  *(_BYTE *)(v3 + 144) = a1 & 1;
  v12 = (uint64_t *)(v3 + 136);
  swift_beginAccess();
  v13 = *(_QWORD *)(v3 + 136);
  if (v13 >> 62)
  {
    swift_bridgeObjectRetain();
    v19 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v19)
      goto LABEL_17;
LABEL_5:
    v14 = *v12;
    if ((unint64_t)*v12 >> 62)
    {
      swift_bridgeObjectRetain();
      result = _CocoaArrayWrapper.endIndex.getter();
      v15 = result;
      if (result)
        goto LABEL_7;
    }
    else
    {
      v15 = *(_QWORD *)((v14 & 0xFFFFFFFFFFFFF8) + 0x10);
      result = swift_bridgeObjectRetain();
      if (v15)
      {
LABEL_7:
        if (v15 < 1)
          goto LABEL_55;
        for (i = 0; i != v15; ++i)
        {
          if ((v14 & 0xC000000000000001) != 0)
          {
            v18 = MEMORY[0x23B7C6D9C](i, v14);
          }
          else
          {
            v18 = *(_QWORD *)(v14 + 8 * i + 32);
            swift_retain();
          }
          (*(void (**)(void))(*(_QWORD *)v18 + 96))();
          swift_release();
        }
      }
    }
    swift_bridgeObjectRelease();
    *v12 = MEMORY[0x24BEE4AF8];
    swift_bridgeObjectRelease();
    goto LABEL_17;
  }
  if (*(_QWORD *)((v13 & 0xFFFFFFFFFFFFF8) + 0x10))
    goto LABEL_5;
LABEL_17:
  v20 = v4 + 152;
  result = swift_beginAccess();
  if (!*(_QWORD *)(*(_QWORD *)(v4 + 152) + 16))
    return result;
  IndexSet.init()();
  v21 = *(_QWORD *)(*(_QWORD *)v20 + 16);
  if (!v21)
  {
LABEL_48:
    swift_beginAccess();
    v47 = v52;
    specialized Collection.subscript.getter(v52);
    result = specialized MutableCollection.halfStablePartitionByOffset(isSuffixElementAtOffset:)(v20, v47);
    v48 = *(_QWORD *)(*(_QWORD *)v20 + 16);
    if (v48 < result)
      goto LABEL_54;
    specialized Array.replaceSubrange<A>(_:with:)(result, v48);
    outlined destroy of Slice<IndexSet>(v47);
    swift_endAccess();
    return (*(uint64_t (**)(char *, uint64_t))(v50 + 8))(v11, v51);
  }
  v22 = type metadata accessor for AnimatablePair<AnimatableArray<Float>, AnimatablePair<AnimatableArray<AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>, AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>>();
  v23 = v22;
  v24 = 0;
  if ((a2 & 0x100000000) != 0)
    a2 = *MEMORY[0x24BE096C0];
  else
    a2 = a2;
  v53 = v22;
  while (1)
  {
    swift_beginAccess();
    v25 = *(_QWORD **)v20;
    result = swift_isUniquelyReferenced_nonNull_native();
    *(_QWORD *)v20 = v25;
    if ((result & 1) == 0)
    {
      result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v25);
      v25 = (_QWORD *)result;
      *(_QWORD *)v20 = result;
    }
    if (v24 >= v25[2])
      break;
    v26 = &v25[7 * v24];
    v27 = v26[5];
    swift_bridgeObjectRetain();
    v28 = AGCreateWeakAttribute();
    v59[0] = v27;
    v59[1] = v28;
    v60 = 0;
    v29 = v26[4];
    v30 = v26[6];
    v31 = v26[7];
    v32 = *((_OWORD *)v26 + 4);
    v57[0] = v30;
    v57[1] = v31;
    v58 = v32;
    if (v23 == MEMORY[0x24BEE13C8])
    {
      v54[0] = v30;
      (*(void (**)(__int128 *__return_ptr, _QWORD *, _QWORD *, double))(*(_QWORD *)v29 + 120))(&v56, v54, v59, a3);
      v35 = v56;
      if ((_QWORD)v56)
        goto LABEL_33;
    }
    else if (v23 == type metadata accessor for AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>())
    {
      v54[0] = v30;
      v54[1] = v31;
      v55 = v58;
      v37 = *(void (**)(__int128 *__return_ptr, _QWORD *, _QWORD *, uint64_t, uint64_t, double))(*(_QWORD *)v29 + 120);
      v38 = lazy protocol witness table accessor for type AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>> and conformance AnimatablePair<A, B>();
      v37(&v56, v54, v59, v23, v38, a3);
      v35 = v56;
      if ((_QWORD)v56)
      {
LABEL_33:
        outlined consume of AnimatablePair<AnimatableArray<Float>, AnimatablePair<AnimatableArray<AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>, AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>>?(v35);
        v36 = HIBYTE(v60);
        goto LABEL_36;
      }
    }
    else
    {
      v33 = *(void (**)(__int128 *__return_ptr, _QWORD *, _QWORD *, uint64_t, uint64_t, double))(*(_QWORD *)v29 + 120);
      v34 = lazy protocol witness table accessor for type AnimatablePair<AnimatableArray<Float>, AnimatablePair<AnimatableArray<AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>, AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>> and conformance AnimatablePair<A, B>();
      v33(&v56, v57, v59, v23, v34, a3);
      v35 = v56;
      if ((_QWORD)v56)
        goto LABEL_33;
    }
    v36 = 1;
LABEL_36:
    swift_bridgeObjectRelease();
    v39 = *(_QWORD *)v20;
    result = swift_endAccess();
    if (!v36)
      goto LABEL_24;
    if (v24 >= *(_QWORD *)(v39 + 16))
      goto LABEL_52;
    v40 = v21;
    v41 = a2;
    v42 = v11;
    v43 = *(_QWORD *)(v39 + 56 * v24 + 80);
    if (v43 >> 62)
    {
      swift_bridgeObjectRetain();
      result = _CocoaArrayWrapper.endIndex.getter();
      v44 = result;
      if (result)
      {
LABEL_40:
        if (v44 < 1)
          goto LABEL_53;
        for (j = 0; j != v44; ++j)
        {
          if ((v43 & 0xC000000000000001) != 0)
          {
            v46 = MEMORY[0x23B7C6D9C](j, v43);
          }
          else
          {
            v46 = *(_QWORD *)(v43 + 8 * j + 32);
            swift_retain();
          }
          (*(void (**)(void))(*(_QWORD *)v46 + 96))();
          swift_release();
        }
      }
    }
    else
    {
      v44 = *(_QWORD *)((v43 & 0xFFFFFFFFFFFFF8) + 0x10);
      result = swift_bridgeObjectRetain();
      if (v44)
        goto LABEL_40;
    }
    swift_bridgeObjectRelease();
    v11 = v42;
    IndexSet.insert(_:)(v24);
    a2 = v41;
    v21 = v40;
    v23 = v53;
LABEL_24:
    if (++v24 == v21)
      goto LABEL_48;
  }
  __break(1u);
LABEL_52:
  __break(1u);
LABEL_53:
  __break(1u);
LABEL_54:
  __break(1u);
LABEL_55:
  __break(1u);
  return result;
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  uint64_t i;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  void (*v32)(_QWORD *__return_ptr, __int128 *, _QWORD *, uint64_t, uint64_t, double);
  uint64_t v33;
  void (*v34)(_QWORD *__return_ptr, __int128 *, _QWORD *, uint64_t, uint64_t, double);
  uint64_t v35;
  char v36;
  char v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t j;
  uint64_t v42;
  uint64_t v43;
  int64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  __int128 v49;
  __int128 v50;
  uint64_t v51;
  uint64_t v52;
  __int128 v53;
  uint64_t v54;
  __int128 v55;
  _QWORD v56[5];
  char v57;
  _QWORD v58[2];
  __int16 v59;

  v4 = v3;
  type metadata accessor for CombinedAnimationState<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>>.Entry(0, (unint64_t *)&lazy cache variable for type metadata for Slice<IndexSet>, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF428], lazy protocol witness table accessor for type IndexSet and conformance IndexSet, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE41D8]);
  MEMORY[0x24BDAC7A8](v8);
  v47 = (uint64_t)&v45 - v9;
  v46 = type metadata accessor for IndexSet();
  v45 = *(_QWORD *)(v46 - 8);
  MEMORY[0x24BDAC7A8](v46);
  v11 = (char *)&v45 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*(_BYTE *)(v3 + 160) & 1) != 0 || (a1 & 1) == 0)
    goto LABEL_17;
  *(_BYTE *)(v3 + 160) = a1 & 1;
  v12 = (uint64_t *)(v3 + 152);
  swift_beginAccess();
  v13 = *(_QWORD *)(v3 + 152);
  if (v13 >> 62)
  {
    swift_bridgeObjectRetain();
    v19 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v19)
      goto LABEL_17;
LABEL_5:
    v14 = *v12;
    if ((unint64_t)*v12 >> 62)
    {
      swift_bridgeObjectRetain();
      result = _CocoaArrayWrapper.endIndex.getter();
      v15 = result;
      if (result)
        goto LABEL_7;
    }
    else
    {
      v15 = *(_QWORD *)((v14 & 0xFFFFFFFFFFFFF8) + 0x10);
      result = swift_bridgeObjectRetain();
      if (v15)
      {
LABEL_7:
        if (v15 < 1)
          goto LABEL_52;
        for (i = 0; i != v15; ++i)
        {
          if ((v14 & 0xC000000000000001) != 0)
          {
            v18 = MEMORY[0x23B7C6D9C](i, v14);
          }
          else
          {
            v18 = *(_QWORD *)(v14 + 8 * i + 32);
            swift_retain();
          }
          (*(void (**)(void))(*(_QWORD *)v18 + 96))();
          swift_release();
        }
      }
    }
    swift_bridgeObjectRelease();
    *v12 = MEMORY[0x24BEE4AF8];
    swift_bridgeObjectRelease();
    goto LABEL_17;
  }
  if (*(_QWORD *)((v13 & 0xFFFFFFFFFFFFF8) + 0x10))
    goto LABEL_5;
LABEL_17:
  v20 = v4 + 168;
  result = swift_beginAccess();
  if (!*(_QWORD *)(*(_QWORD *)(v4 + 168) + 16))
    return result;
  IndexSet.init()();
  v21 = *(_QWORD *)(*(_QWORD *)v20 + 16);
  if (!v21)
  {
LABEL_45:
    swift_beginAccess();
    v43 = v47;
    specialized Collection.subscript.getter(v47);
    result = specialized MutableCollection.halfStablePartitionByOffset(isSuffixElementAtOffset:)(v20, v43);
    v44 = *(_QWORD *)(*(_QWORD *)v20 + 16);
    if (v44 < result)
      goto LABEL_51;
    specialized Array.replaceSubrange<A>(_:with:)(result, v44);
    outlined destroy of Slice<IndexSet>(v43);
    swift_endAccess();
    return (*(uint64_t (**)(char *, uint64_t))(v45 + 8))(v11, v46);
  }
  v22 = type metadata accessor for AnimatablePair<AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>, AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>>();
  v23 = 0;
  if ((a2 & 0x100000000) != 0)
    LODWORD(a2) = *MEMORY[0x24BE096C0];
  v24 = MEMORY[0x24BEE13C8];
  v48 = a2;
  while (1)
  {
    swift_beginAccess();
    v25 = *(_QWORD **)v20;
    result = swift_isUniquelyReferenced_nonNull_native();
    *(_QWORD *)v20 = v25;
    if ((result & 1) == 0)
    {
      result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v25);
      v25 = (_QWORD *)result;
      *(_QWORD *)v20 = result;
    }
    if (v23 >= v25[2])
      break;
    v26 = &v25[8 * v23];
    v27 = v26[5];
    swift_bridgeObjectRetain();
    v28 = AGCreateWeakAttribute();
    v58[0] = v27;
    v58[1] = v28;
    v59 = 0;
    v29 = v26[4];
    v30 = v26[8];
    v31 = *(_OWORD *)(v26 + 9);
    v53 = *((_OWORD *)v26 + 3);
    v54 = v30;
    v55 = v31;
    if (v22 == v24)
    {
      *(_QWORD *)&v50 = v53;
      (*(void (**)(_QWORD *__return_ptr, __int128 *, _QWORD *, uint64_t, _UNKNOWN **, double))(*(_QWORD *)v29 + 120))(v56, &v50, v58, v24, &protocol witness table for Double, a3);
    }
    else
    {
      v49 = v31;
      if (v22 == type metadata accessor for AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>())
      {
        v50 = v53;
        v51 = v30;
        v52 = v49;
        v34 = *(void (**)(_QWORD *__return_ptr, __int128 *, _QWORD *, uint64_t, uint64_t, double))(*(_QWORD *)v29 + 120);
        v35 = lazy protocol witness table accessor for type AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>> and conformance AnimatablePair<A, B>();
        v34(v56, &v50, v58, v22, v35, a3);
      }
      else
      {
        v32 = *(void (**)(_QWORD *__return_ptr, __int128 *, _QWORD *, uint64_t, uint64_t, double))(*(_QWORD *)v29 + 120);
        v33 = lazy protocol witness table accessor for type AnimatablePair<AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>, AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>> and conformance AnimatablePair<A, B>();
        v32(v56, &v53, v58, v22, v33, a3);
      }
    }
    v36 = v57;
    v37 = HIBYTE(v59);
    swift_bridgeObjectRelease();
    v38 = *(_QWORD *)v20;
    result = swift_endAccess();
    if ((v36 & 1) == 0 && (v37 & 1) == 0)
      goto LABEL_23;
    if (v23 >= *(_QWORD *)(v38 + 16))
      goto LABEL_49;
    v39 = *(_QWORD *)(v38 + (v23 << 6) + 88);
    if (v39 >> 62)
    {
      swift_bridgeObjectRetain();
      result = _CocoaArrayWrapper.endIndex.getter();
      v40 = result;
      if (result)
      {
LABEL_37:
        if (v40 < 1)
          goto LABEL_50;
        for (j = 0; j != v40; ++j)
        {
          if ((v39 & 0xC000000000000001) != 0)
          {
            v42 = MEMORY[0x23B7C6D9C](j, v39);
          }
          else
          {
            v42 = *(_QWORD *)(v39 + 8 * j + 32);
            swift_retain();
          }
          (*(void (**)(void))(*(_QWORD *)v42 + 96))();
          swift_release();
        }
      }
    }
    else
    {
      v40 = *(_QWORD *)((v39 & 0xFFFFFFFFFFFFF8) + 0x10);
      result = swift_bridgeObjectRetain();
      if (v40)
        goto LABEL_37;
    }
    swift_bridgeObjectRelease();
    IndexSet.insert(_:)(v23);
    v24 = MEMORY[0x24BEE13C8];
LABEL_23:
    if (++v23 == v21)
      goto LABEL_45;
  }
  __break(1u);
LABEL_49:
  __break(1u);
LABEL_50:
  __break(1u);
LABEL_51:
  __break(1u);
LABEL_52:
  __break(1u);
  return result;
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  uint64_t i;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  __int128 v34;
  void (*v35)(__int128 *__return_ptr, _QWORD *, _QWORD *, uint64_t, uint64_t, double);
  uint64_t v36;
  int v37;
  void (*v38)(__int128 *__return_ptr, _QWORD *, _QWORD *, uint64_t, uint64_t, double);
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t j;
  uint64_t v44;
  uint64_t v45;
  int64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  _QWORD v51[5];
  _QWORD v52[3];
  uint64_t v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  _QWORD v57[2];
  __int16 v58;

  v4 = v3;
  type metadata accessor for CombinedAnimationState<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>>.Entry(0, (unint64_t *)&lazy cache variable for type metadata for Slice<IndexSet>, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF428], lazy protocol witness table accessor for type IndexSet and conformance IndexSet, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE41D8]);
  MEMORY[0x24BDAC7A8](v8);
  v49 = (uint64_t)&v47 - v9;
  v48 = type metadata accessor for IndexSet();
  v47 = *(_QWORD *)(v48 - 8);
  MEMORY[0x24BDAC7A8](v48);
  v11 = (char *)&v47 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*(_BYTE *)(v3 + 176) & 1) != 0 || (a1 & 1) == 0)
    goto LABEL_17;
  *(_BYTE *)(v3 + 176) = a1 & 1;
  v12 = (uint64_t *)(v3 + 168);
  swift_beginAccess();
  v13 = *(_QWORD *)(v3 + 168);
  if (v13 >> 62)
  {
    swift_bridgeObjectRetain();
    v19 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v19)
      goto LABEL_17;
LABEL_5:
    v14 = *v12;
    if ((unint64_t)*v12 >> 62)
    {
      swift_bridgeObjectRetain();
      result = _CocoaArrayWrapper.endIndex.getter();
      v15 = result;
      if (result)
        goto LABEL_7;
    }
    else
    {
      v15 = *(_QWORD *)((v14 & 0xFFFFFFFFFFFFF8) + 0x10);
      result = swift_bridgeObjectRetain();
      if (v15)
      {
LABEL_7:
        if (v15 < 1)
          goto LABEL_54;
        for (i = 0; i != v15; ++i)
        {
          if ((v14 & 0xC000000000000001) != 0)
          {
            v18 = MEMORY[0x23B7C6D9C](i, v14);
          }
          else
          {
            v18 = *(_QWORD *)(v14 + 8 * i + 32);
            swift_retain();
          }
          (*(void (**)(void))(*(_QWORD *)v18 + 96))();
          swift_release();
        }
      }
    }
    swift_bridgeObjectRelease();
    *v12 = MEMORY[0x24BEE4AF8];
    swift_bridgeObjectRelease();
    goto LABEL_17;
  }
  if (*(_QWORD *)((v13 & 0xFFFFFFFFFFFFF8) + 0x10))
    goto LABEL_5;
LABEL_17:
  v20 = v4 + 184;
  result = swift_beginAccess();
  if (!*(_QWORD *)(*(_QWORD *)(v4 + 184) + 16))
    return result;
  IndexSet.init()();
  v21 = *(_QWORD *)(*(_QWORD *)v20 + 16);
  if (!v21)
  {
LABEL_47:
    swift_beginAccess();
    v45 = v49;
    specialized Collection.subscript.getter(v49);
    result = specialized MutableCollection.halfStablePartitionByOffset(isSuffixElementAtOffset:)(v20, v45);
    v46 = *(_QWORD *)(*(_QWORD *)v20 + 16);
    if (v46 < result)
      goto LABEL_53;
    specialized Array.replaceSubrange<A>(_:with:)(result, v46);
    outlined destroy of Slice<IndexSet>(v45);
    swift_endAccess();
    return (*(uint64_t (**)(char *, uint64_t))(v47 + 8))(v11, v48);
  }
  v22 = type metadata accessor for AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, ResolvedGradientVector>, AnimatablePair<CGFloat, CGFloat>>();
  v23 = 0;
  if ((a2 & 0x100000000) != 0)
    LODWORD(a2) = *MEMORY[0x24BE096C0];
  v24 = MEMORY[0x24BEE13C8];
  v50 = a2;
  while (1)
  {
    swift_beginAccess();
    v25 = *(_QWORD **)v20;
    result = swift_isUniquelyReferenced_nonNull_native();
    *(_QWORD *)v20 = v25;
    if ((result & 1) == 0)
    {
      result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v25);
      v25 = (_QWORD *)result;
      *(_QWORD *)v20 = result;
    }
    if (v23 >= v25[2])
      break;
    v26 = &v25[9 * v23];
    v27 = v26[5];
    swift_bridgeObjectRetain();
    v28 = AGCreateWeakAttribute();
    v57[0] = v27;
    v57[1] = v28;
    v58 = 0;
    v29 = v26[4];
    v30 = v26[6];
    v31 = v26[7];
    v32 = v26[8];
    v33 = *((_BYTE *)v26 + 72);
    v34 = *((_OWORD *)v26 + 5);
    v52[0] = v30;
    v52[1] = v31;
    v52[2] = v32;
    LOBYTE(v53) = v33;
    v54 = v34;
    if (v22 == v24)
    {
      v51[0] = v30;
      (*(void (**)(__int128 *__return_ptr, _QWORD *, _QWORD *, uint64_t, _UNKNOWN **, double))(*(_QWORD *)v29 + 120))(&v55, v51, v57, v24, &protocol witness table for Double, a3);
LABEL_31:
      if ((_QWORD)v56)
        goto LABEL_32;
      goto LABEL_34;
    }
    if (v22 != type metadata accessor for AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>())
    {
      v35 = *(void (**)(__int128 *__return_ptr, _QWORD *, _QWORD *, uint64_t, uint64_t, double))(*(_QWORD *)v29 + 120);
      v36 = lazy protocol witness table accessor for type AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, ResolvedGradientVector>, AnimatablePair<CGFloat, CGFloat>> and conformance AnimatablePair<A, B>();
      v35(&v55, v52, v57, v22, v36, a3);
      goto LABEL_31;
    }
    v51[0] = v30;
    v51[1] = v31;
    v51[2] = v32;
    v51[3] = v53;
    v38 = *(void (**)(__int128 *__return_ptr, _QWORD *, _QWORD *, uint64_t, uint64_t, double))(*(_QWORD *)v29 + 120);
    v39 = lazy protocol witness table accessor for type AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>> and conformance AnimatablePair<A, B>();
    v38(&v55, v51, v57, v22, v39, a3);
    if ((_QWORD)v56)
    {
LABEL_32:
      swift_bridgeObjectRelease();
      v37 = HIBYTE(v58);
      goto LABEL_35;
    }
LABEL_34:
    v37 = 1;
LABEL_35:
    swift_bridgeObjectRelease();
    v40 = *(_QWORD *)v20;
    result = swift_endAccess();
    if (!v37)
      goto LABEL_23;
    if (v23 >= *(_QWORD *)(v40 + 16))
      goto LABEL_51;
    v41 = *(_QWORD *)(v40 + 72 * v23 + 96);
    if (v41 >> 62)
    {
      swift_bridgeObjectRetain();
      result = _CocoaArrayWrapper.endIndex.getter();
      v42 = result;
      if (result)
      {
LABEL_39:
        if (v42 < 1)
          goto LABEL_52;
        for (j = 0; j != v42; ++j)
        {
          if ((v41 & 0xC000000000000001) != 0)
          {
            v44 = MEMORY[0x23B7C6D9C](j, v41);
          }
          else
          {
            v44 = *(_QWORD *)(v41 + 8 * j + 32);
            swift_retain();
          }
          (*(void (**)(void))(*(_QWORD *)v44 + 96))();
          swift_release();
        }
      }
    }
    else
    {
      v42 = *(_QWORD *)((v41 & 0xFFFFFFFFFFFFF8) + 0x10);
      result = swift_bridgeObjectRetain();
      if (v42)
        goto LABEL_39;
    }
    swift_bridgeObjectRelease();
    IndexSet.insert(_:)(v23);
    v24 = MEMORY[0x24BEE13C8];
LABEL_23:
    if (++v23 == v21)
      goto LABEL_47;
  }
  __break(1u);
LABEL_51:
  __break(1u);
LABEL_52:
  __break(1u);
LABEL_53:
  __break(1u);
LABEL_54:
  __break(1u);
  return result;
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  uint64_t i;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  __int128 v34;
  void (*v35)(__int128 *__return_ptr, _QWORD *, _QWORD *, uint64_t, uint64_t, double);
  uint64_t v36;
  int v37;
  void (*v38)(__int128 *__return_ptr, _QWORD *, _QWORD *, uint64_t, uint64_t, double);
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t j;
  uint64_t v44;
  uint64_t v45;
  int64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  _QWORD v51[5];
  _QWORD v52[3];
  uint64_t v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  _QWORD v57[2];
  __int16 v58;

  v4 = v3;
  type metadata accessor for CombinedAnimationState<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>>.Entry(0, (unint64_t *)&lazy cache variable for type metadata for Slice<IndexSet>, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF428], lazy protocol witness table accessor for type IndexSet and conformance IndexSet, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE41D8]);
  MEMORY[0x24BDAC7A8](v8);
  v49 = (uint64_t)&v47 - v9;
  v48 = type metadata accessor for IndexSet();
  v47 = *(_QWORD *)(v48 - 8);
  MEMORY[0x24BDAC7A8](v48);
  v11 = (char *)&v47 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*(_BYTE *)(v3 + 176) & 1) != 0 || (a1 & 1) == 0)
    goto LABEL_17;
  *(_BYTE *)(v3 + 176) = a1 & 1;
  v12 = (uint64_t *)(v3 + 168);
  swift_beginAccess();
  v13 = *(_QWORD *)(v3 + 168);
  if (v13 >> 62)
  {
    swift_bridgeObjectRetain();
    v19 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v19)
      goto LABEL_17;
LABEL_5:
    v14 = *v12;
    if ((unint64_t)*v12 >> 62)
    {
      swift_bridgeObjectRetain();
      result = _CocoaArrayWrapper.endIndex.getter();
      v15 = result;
      if (result)
        goto LABEL_7;
    }
    else
    {
      v15 = *(_QWORD *)((v14 & 0xFFFFFFFFFFFFF8) + 0x10);
      result = swift_bridgeObjectRetain();
      if (v15)
      {
LABEL_7:
        if (v15 < 1)
          goto LABEL_54;
        for (i = 0; i != v15; ++i)
        {
          if ((v14 & 0xC000000000000001) != 0)
          {
            v18 = MEMORY[0x23B7C6D9C](i, v14);
          }
          else
          {
            v18 = *(_QWORD *)(v14 + 8 * i + 32);
            swift_retain();
          }
          (*(void (**)(void))(*(_QWORD *)v18 + 96))();
          swift_release();
        }
      }
    }
    swift_bridgeObjectRelease();
    *v12 = MEMORY[0x24BEE4AF8];
    swift_bridgeObjectRelease();
    goto LABEL_17;
  }
  if (*(_QWORD *)((v13 & 0xFFFFFFFFFFFFF8) + 0x10))
    goto LABEL_5;
LABEL_17:
  v20 = v4 + 184;
  result = swift_beginAccess();
  if (!*(_QWORD *)(*(_QWORD *)(v4 + 184) + 16))
    return result;
  IndexSet.init()();
  v21 = *(_QWORD *)(*(_QWORD *)v20 + 16);
  if (!v21)
  {
LABEL_47:
    swift_beginAccess();
    v45 = v49;
    specialized Collection.subscript.getter(v49);
    result = specialized MutableCollection.halfStablePartitionByOffset(isSuffixElementAtOffset:)(v20, v45);
    v46 = *(_QWORD *)(*(_QWORD *)v20 + 16);
    if (v46 < result)
      goto LABEL_53;
    specialized Array.replaceSubrange<A>(_:with:)(result, v46);
    outlined destroy of Slice<IndexSet>(v45);
    swift_endAccess();
    return (*(uint64_t (**)(char *, uint64_t))(v47 + 8))(v11, v48);
  }
  v22 = type metadata accessor for AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, ResolvedGradientVector>, AnimatablePair<Double, Double>>();
  v23 = 0;
  if ((a2 & 0x100000000) != 0)
    LODWORD(a2) = *MEMORY[0x24BE096C0];
  v24 = MEMORY[0x24BEE13C8];
  v50 = a2;
  while (1)
  {
    swift_beginAccess();
    v25 = *(_QWORD **)v20;
    result = swift_isUniquelyReferenced_nonNull_native();
    *(_QWORD *)v20 = v25;
    if ((result & 1) == 0)
    {
      result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v25);
      v25 = (_QWORD *)result;
      *(_QWORD *)v20 = result;
    }
    if (v23 >= v25[2])
      break;
    v26 = &v25[9 * v23];
    v27 = v26[5];
    swift_bridgeObjectRetain();
    v28 = AGCreateWeakAttribute();
    v57[0] = v27;
    v57[1] = v28;
    v58 = 0;
    v29 = v26[4];
    v30 = v26[6];
    v31 = v26[7];
    v32 = v26[8];
    v33 = *((_BYTE *)v26 + 72);
    v34 = *((_OWORD *)v26 + 5);
    v52[0] = v30;
    v52[1] = v31;
    v52[2] = v32;
    LOBYTE(v53) = v33;
    v54 = v34;
    if (v22 == v24)
    {
      v51[0] = v30;
      (*(void (**)(__int128 *__return_ptr, _QWORD *, _QWORD *, uint64_t, _UNKNOWN **, double))(*(_QWORD *)v29 + 120))(&v55, v51, v57, v24, &protocol witness table for Double, a3);
LABEL_31:
      if ((_QWORD)v56)
        goto LABEL_32;
      goto LABEL_34;
    }
    if (v22 != type metadata accessor for AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>())
    {
      v35 = *(void (**)(__int128 *__return_ptr, _QWORD *, _QWORD *, uint64_t, uint64_t, double))(*(_QWORD *)v29 + 120);
      v36 = lazy protocol witness table accessor for type AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, ResolvedGradientVector>, AnimatablePair<Double, Double>> and conformance AnimatablePair<A, B>();
      v35(&v55, v52, v57, v22, v36, a3);
      goto LABEL_31;
    }
    v51[0] = v30;
    v51[1] = v31;
    v51[2] = v32;
    v51[3] = v53;
    v38 = *(void (**)(__int128 *__return_ptr, _QWORD *, _QWORD *, uint64_t, uint64_t, double))(*(_QWORD *)v29 + 120);
    v39 = lazy protocol witness table accessor for type AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>> and conformance AnimatablePair<A, B>();
    v38(&v55, v51, v57, v22, v39, a3);
    if ((_QWORD)v56)
    {
LABEL_32:
      swift_bridgeObjectRelease();
      v37 = HIBYTE(v58);
      goto LABEL_35;
    }
LABEL_34:
    v37 = 1;
LABEL_35:
    swift_bridgeObjectRelease();
    v40 = *(_QWORD *)v20;
    result = swift_endAccess();
    if (!v37)
      goto LABEL_23;
    if (v23 >= *(_QWORD *)(v40 + 16))
      goto LABEL_51;
    v41 = *(_QWORD *)(v40 + 72 * v23 + 96);
    if (v41 >> 62)
    {
      swift_bridgeObjectRetain();
      result = _CocoaArrayWrapper.endIndex.getter();
      v42 = result;
      if (result)
      {
LABEL_39:
        if (v42 < 1)
          goto LABEL_52;
        for (j = 0; j != v42; ++j)
        {
          if ((v41 & 0xC000000000000001) != 0)
          {
            v44 = MEMORY[0x23B7C6D9C](j, v41);
          }
          else
          {
            v44 = *(_QWORD *)(v41 + 8 * j + 32);
            swift_retain();
          }
          (*(void (**)(void))(*(_QWORD *)v44 + 96))();
          swift_release();
        }
      }
    }
    else
    {
      v42 = *(_QWORD *)((v41 & 0xFFFFFFFFFFFFF8) + 0x10);
      result = swift_bridgeObjectRetain();
      if (v42)
        goto LABEL_39;
    }
    swift_bridgeObjectRelease();
    IndexSet.insert(_:)(v23);
    v24 = MEMORY[0x24BEE13C8];
LABEL_23:
    if (++v23 == v21)
      goto LABEL_47;
  }
  __break(1u);
LABEL_51:
  __break(1u);
LABEL_52:
  __break(1u);
LABEL_53:
  __break(1u);
LABEL_54:
  __break(1u);
  return result;
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  uint64_t i;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  ValueMetadata *v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  void (*v31)(__int128 *__return_ptr, uint64_t *, char *, ValueMetadata *, unint64_t, double);
  unint64_t v32;
  int v33;
  void (*v34)(__int128 *__return_ptr, uint64_t *, char *, ValueMetadata *, uint64_t, double);
  uint64_t v35;
  uint64_t v36;
  ValueMetadata *v37;
  uint64_t v38;
  char *v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t j;
  uint64_t v43;
  uint64_t v44;
  int64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  __int128 v52;
  uint64_t v53;
  __int128 v54;
  uint64_t v55;
  __int128 v56;
  uint64_t v57;
  __int16 v58;

  v4 = v3;
  type metadata accessor for CombinedAnimationState<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>>.Entry(0, (unint64_t *)&lazy cache variable for type metadata for Slice<IndexSet>, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF428], lazy protocol witness table accessor for type IndexSet and conformance IndexSet, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE41D8]);
  MEMORY[0x24BDAC7A8](v8);
  v49 = (uint64_t)&v46 - v9;
  v48 = type metadata accessor for IndexSet();
  v47 = *(_QWORD *)(v48 - 8);
  MEMORY[0x24BDAC7A8](v48);
  v11 = (char *)&v46 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*(_BYTE *)(v4 + 112) & 1) != 0 || (a1 & 1) == 0)
    goto LABEL_17;
  *(_BYTE *)(v4 + 112) = a1 & 1;
  v12 = (uint64_t *)(v4 + 104);
  swift_beginAccess();
  v13 = *(_QWORD *)(v4 + 104);
  if (v13 >> 62)
  {
    swift_bridgeObjectRetain();
    v19 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v19)
      goto LABEL_17;
LABEL_5:
    v14 = *v12;
    if ((unint64_t)*v12 >> 62)
    {
      swift_bridgeObjectRetain();
      result = _CocoaArrayWrapper.endIndex.getter();
      v15 = result;
      if (result)
        goto LABEL_7;
    }
    else
    {
      v15 = *(_QWORD *)((v14 & 0xFFFFFFFFFFFFF8) + 0x10);
      result = swift_bridgeObjectRetain();
      if (v15)
      {
LABEL_7:
        if (v15 < 1)
          goto LABEL_52;
        for (i = 0; i != v15; ++i)
        {
          if ((v14 & 0xC000000000000001) != 0)
          {
            v18 = MEMORY[0x23B7C6D9C](i, v14);
          }
          else
          {
            v18 = *(_QWORD *)(v14 + 8 * i + 32);
            swift_retain();
          }
          (*(void (**)(void))(*(_QWORD *)v18 + 96))();
          swift_release();
        }
      }
    }
    swift_bridgeObjectRelease();
    *v12 = MEMORY[0x24BEE4AF8];
    swift_bridgeObjectRelease();
    goto LABEL_17;
  }
  if (*(_QWORD *)((v13 & 0xFFFFFFFFFFFFF8) + 0x10))
    goto LABEL_5;
LABEL_17:
  v20 = v4 + 120;
  result = swift_beginAccess();
  if (!*(_QWORD *)(*(_QWORD *)(v4 + 120) + 16))
    return result;
  IndexSet.init()();
  v21 = *(_QWORD *)(*(_QWORD *)v20 + 16);
  if (!v21)
  {
LABEL_45:
    swift_beginAccess();
    v44 = v49;
    specialized Collection.subscript.getter(v49);
    result = specialized MutableCollection.halfStablePartitionByOffset(isSuffixElementAtOffset:)(v20, v44);
    v45 = *(_QWORD *)(*(_QWORD *)v20 + 16);
    if (v45 < result)
      goto LABEL_51;
    specialized Array.replaceSubrange<A>(_:with:)(result, v45);
    outlined destroy of Slice<IndexSet>(v44);
    swift_endAccess();
    return (*(uint64_t (**)(char *, uint64_t))(v47 + 8))(v11, v48);
  }
  v22 = 0;
  if ((a2 & 0x100000000) != 0)
    a2 = *MEMORY[0x24BE096C0];
  else
    a2 = a2;
  v23 = &type metadata for ResolvedGradientVector;
  v50 = *(_QWORD *)(*(_QWORD *)v20 + 16);
  while (1)
  {
    swift_beginAccess();
    v24 = *(_QWORD **)v20;
    result = swift_isUniquelyReferenced_nonNull_native();
    *(_QWORD *)v20 = v24;
    if ((result & 1) == 0)
    {
      result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v24);
      v24 = (_QWORD *)result;
      *(_QWORD *)v20 = result;
    }
    if (v22 >= v24[2])
      break;
    v25 = &v24[5 * v22];
    v26 = v25[5];
    swift_bridgeObjectRetain();
    v27 = AGCreateWeakAttribute();
    *((_QWORD *)&v56 + 1) = v26;
    v57 = v27;
    v58 = 0;
    v28 = v25[4];
    v29 = v25[6];
    v30 = *((_BYTE *)v25 + 56);
    v55 = v29;
    LOBYTE(v56) = v30;
    if ((ValueMetadata *)type metadata accessor for AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>() == v23)
    {
      v51 = v29;
      v52 = v56;
      v53 = v57;
      v34 = *(void (**)(__int128 *__return_ptr, uint64_t *, char *, ValueMetadata *, uint64_t, double))(*(_QWORD *)v28 + 120);
      v35 = lazy protocol witness table accessor for type AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>> and conformance AnimatablePair<A, B>();
      v34(&v54, &v51, (char *)&v56 + 8, v23, v35, a3);
      if ((_QWORD)v54)
      {
LABEL_30:
        swift_bridgeObjectRelease();
        v33 = HIBYTE(v58);
        goto LABEL_33;
      }
    }
    else
    {
      v31 = *(void (**)(__int128 *__return_ptr, uint64_t *, char *, ValueMetadata *, unint64_t, double))(*(_QWORD *)v28 + 120);
      v32 = lazy protocol witness table accessor for type ResolvedGradientVector and conformance ResolvedGradientVector();
      v31(&v54, &v55, (char *)&v56 + 8, v23, v32, a3);
      if ((_QWORD)v54)
        goto LABEL_30;
    }
    v33 = 1;
LABEL_33:
    swift_bridgeObjectRelease();
    v36 = *(_QWORD *)v20;
    result = swift_endAccess();
    if (!v33)
      goto LABEL_24;
    if (v22 >= *(_QWORD *)(v36 + 16))
      goto LABEL_49;
    v37 = v23;
    v38 = a2;
    v39 = v11;
    v40 = *(_QWORD *)(v36 + 40 * v22 + 64);
    if (v40 >> 62)
    {
      swift_bridgeObjectRetain();
      result = _CocoaArrayWrapper.endIndex.getter();
      v41 = result;
      if (result)
      {
LABEL_37:
        if (v41 < 1)
          goto LABEL_50;
        for (j = 0; j != v41; ++j)
        {
          if ((v40 & 0xC000000000000001) != 0)
          {
            v43 = MEMORY[0x23B7C6D9C](j, v40);
          }
          else
          {
            v43 = *(_QWORD *)(v40 + 8 * j + 32);
            swift_retain();
          }
          (*(void (**)(void))(*(_QWORD *)v43 + 96))();
          swift_release();
        }
      }
    }
    else
    {
      v41 = *(_QWORD *)((v40 & 0xFFFFFFFFFFFFF8) + 0x10);
      result = swift_bridgeObjectRetain();
      if (v41)
        goto LABEL_37;
    }
    swift_bridgeObjectRelease();
    v11 = v39;
    IndexSet.insert(_:)(v22);
    a2 = v38;
    v23 = v37;
    v21 = v50;
LABEL_24:
    if (++v22 == v21)
      goto LABEL_45;
  }
  __break(1u);
LABEL_49:
  __break(1u);
LABEL_50:
  __break(1u);
LABEL_51:
  __break(1u);
LABEL_52:
  __break(1u);
  return result;
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  uint64_t i;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  int v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  int v36;
  uint64_t v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  void (*v41)(uint64_t *__return_ptr, _QWORD *, _QWORD *, uint64_t, uint64_t, double);
  uint64_t v42;
  uint64_t v43;
  int v44;
  void (*v45)(uint64_t *__return_ptr, _QWORD *, _QWORD *, uint64_t, uint64_t, double);
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t j;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  int64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  __int128 v59;
  int v60;
  _QWORD v61[5];
  _QWORD v62[3];
  __int128 v63;
  __int128 v64;
  __int128 v65;
  uint64_t v66;
  char v67;
  int v68;
  uint64_t v69;
  uint64_t v70[10];
  char v71;
  uint64_t v72;
  uint64_t v73;
  _QWORD v74[2];
  __int16 v75;

  v4 = v3;
  type metadata accessor for CombinedAnimationState<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>>.Entry(0, (unint64_t *)&lazy cache variable for type metadata for Slice<IndexSet>, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF428], lazy protocol witness table accessor for type IndexSet and conformance IndexSet, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE41D8]);
  MEMORY[0x24BDAC7A8](v8);
  v57 = (uint64_t)&v55 - v9;
  v10 = type metadata accessor for IndexSet();
  v56 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v55 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  LOBYTE(v11) = *(_BYTE *)(v4 + 288);
  v58 = v12;
  if ((v11 & 1) != 0 || (a1 & 1) == 0)
    goto LABEL_17;
  *(_BYTE *)(v4 + 288) = a1 & 1;
  v13 = (uint64_t *)(v4 + 280);
  swift_beginAccess();
  v14 = *(_QWORD *)(v4 + 280);
  if (v14 >> 62)
  {
    swift_bridgeObjectRetain();
    v20 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v20)
      goto LABEL_17;
LABEL_5:
    v15 = *v13;
    if ((unint64_t)*v13 >> 62)
    {
      swift_bridgeObjectRetain();
      result = _CocoaArrayWrapper.endIndex.getter();
      v16 = result;
      if (result)
        goto LABEL_7;
    }
    else
    {
      v16 = *(_QWORD *)((v15 & 0xFFFFFFFFFFFFF8) + 0x10);
      result = swift_bridgeObjectRetain();
      if (v16)
      {
LABEL_7:
        if (v16 < 1)
          goto LABEL_54;
        for (i = 0; i != v16; ++i)
        {
          if ((v15 & 0xC000000000000001) != 0)
          {
            v19 = MEMORY[0x23B7C6D9C](i, v15);
          }
          else
          {
            v19 = *(_QWORD *)(v15 + 8 * i + 32);
            swift_retain();
          }
          (*(void (**)(void))(*(_QWORD *)v19 + 96))();
          swift_release();
        }
      }
    }
    swift_bridgeObjectRelease();
    *v13 = MEMORY[0x24BEE4AF8];
    swift_bridgeObjectRelease();
    goto LABEL_17;
  }
  if (*(_QWORD *)((v14 & 0xFFFFFFFFFFFFF8) + 0x10))
    goto LABEL_5;
LABEL_17:
  v21 = v4 + 296;
  result = swift_beginAccess();
  if (!*(_QWORD *)(*(_QWORD *)(v4 + 296) + 16))
    return result;
  v55 = v10;
  IndexSet.init()();
  v22 = *(_QWORD *)(*(_QWORD *)v21 + 16);
  if (!v22)
  {
LABEL_47:
    swift_beginAccess();
    v52 = v57;
    v53 = v58;
    specialized Collection.subscript.getter(v57);
    result = specialized MutableCollection.halfStablePartitionByOffset(isSuffixElementAtOffset:)(v21, v52);
    v54 = *(_QWORD *)(*(_QWORD *)v21 + 16);
    if (v54 < result)
      goto LABEL_53;
    specialized Array.replaceSubrange<A>(_:with:)(result, v54);
    outlined destroy of Slice<IndexSet>(v52);
    swift_endAccess();
    return (*(uint64_t (**)(char *, uint64_t))(v56 + 8))(v53, v55);
  }
  v23 = type metadata accessor for AnimatablePair<_ShapeStyle_Pack.Fill.AnimatableData, AnimatablePair<Float, AnimatableArray<AnimatablePair<Float, _ShapeStyle_Pack.Effect.Kind.AnimatableData>>>>();
  v24 = 0;
  v25 = *MEMORY[0x24BE096C0];
  if ((a2 & 0x100000000) == 0)
    v25 = a2;
  v60 = v25;
  while (1)
  {
    swift_beginAccess();
    v26 = *(_QWORD **)v21;
    result = swift_isUniquelyReferenced_nonNull_native();
    *(_QWORD *)v21 = v26;
    if ((result & 1) == 0)
    {
      result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v26);
      v26 = (_QWORD *)result;
      *(_QWORD *)v21 = result;
    }
    if (v24 >= v26[2])
      break;
    v27 = &v26[16 * v24];
    v28 = v27[5];
    swift_bridgeObjectRetain();
    v29 = AGCreateWeakAttribute();
    v74[0] = v28;
    v74[1] = v29;
    v75 = 0;
    v30 = v27[4];
    v31 = v27[6];
    v32 = v27[7];
    v33 = v27[8];
    v34 = v27[15];
    v35 = *((_BYTE *)v27 + 128);
    v36 = *((_DWORD *)v27 + 34);
    v37 = v27[18];
    v38 = *(_OWORD *)(v27 + 9);
    v39 = *(_OWORD *)(v27 + 11);
    v40 = *(_OWORD *)(v27 + 13);
    v62[0] = v31;
    v62[1] = v32;
    v62[2] = v33;
    v63 = v38;
    v64 = v39;
    v65 = v40;
    v66 = v34;
    v67 = v35;
    v68 = v36;
    v69 = v37;
    if (v23 == MEMORY[0x24BEE13C8])
    {
      v61[0] = v31;
      (*(void (**)(uint64_t *__return_ptr, _QWORD *, _QWORD *, double))(*(_QWORD *)v30 + 120))(v70, v61, v74, a3);
      v43 = v73;
      if (v73)
        goto LABEL_32;
    }
    else
    {
      v59 = v38;
      if (v23 == type metadata accessor for AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>())
      {
        v61[0] = v31;
        v61[1] = v32;
        v61[2] = v33;
        v61[3] = v59;
        v45 = *(void (**)(uint64_t *__return_ptr, _QWORD *, _QWORD *, uint64_t, uint64_t, double))(*(_QWORD *)v30 + 120);
        v46 = lazy protocol witness table accessor for type AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>> and conformance AnimatablePair<A, B>();
        v45(v70, v61, v74, v23, v46, a3);
        v43 = v73;
        if (v73)
        {
LABEL_32:
          outlined consume of AnimatablePair<_ShapeStyle_Pack.Fill.AnimatableData, AnimatablePair<Float, AnimatableArray<AnimatablePair<Float, _ShapeStyle_Pack.Effect.Kind.AnimatableData>>>>?(v70[0], v70[1], v70[2], v70[3], v70[4], v70[5], v70[6], v70[7], v70[8], v70[9], v71, v72, v43);
          v44 = HIBYTE(v75);
          goto LABEL_35;
        }
      }
      else
      {
        v41 = *(void (**)(uint64_t *__return_ptr, _QWORD *, _QWORD *, uint64_t, uint64_t, double))(*(_QWORD *)v30 + 120);
        v42 = lazy protocol witness table accessor for type AnimatablePair<_ShapeStyle_Pack.Fill.AnimatableData, AnimatablePair<Float, AnimatableArray<AnimatablePair<Float, _ShapeStyle_Pack.Effect.Kind.AnimatableData>>>> and conformance AnimatablePair<A, B>();
        v41(v70, v62, v74, v23, v42, a3);
        v43 = v73;
        if (v73)
          goto LABEL_32;
      }
    }
    v44 = 1;
LABEL_35:
    swift_bridgeObjectRelease();
    v47 = *(_QWORD *)v21;
    result = swift_endAccess();
    if (!v44)
      goto LABEL_23;
    if (v24 >= *(_QWORD *)(v47 + 16))
      goto LABEL_51;
    v48 = *(_QWORD *)(v47 + (v24 << 7) + 152);
    if (v48 >> 62)
    {
      swift_bridgeObjectRetain();
      result = _CocoaArrayWrapper.endIndex.getter();
      v49 = result;
      if (result)
      {
LABEL_39:
        if (v49 < 1)
          goto LABEL_52;
        for (j = 0; j != v49; ++j)
        {
          if ((v48 & 0xC000000000000001) != 0)
          {
            v51 = MEMORY[0x23B7C6D9C](j, v48);
          }
          else
          {
            v51 = *(_QWORD *)(v48 + 8 * j + 32);
            swift_retain();
          }
          (*(void (**)(void))(*(_QWORD *)v51 + 96))();
          swift_release();
        }
      }
    }
    else
    {
      v49 = *(_QWORD *)((v48 & 0xFFFFFFFFFFFFF8) + 0x10);
      result = swift_bridgeObjectRetain();
      if (v49)
        goto LABEL_39;
    }
    swift_bridgeObjectRelease();
    IndexSet.insert(_:)(v24);
LABEL_23:
    if (++v24 == v22)
      goto LABEL_47;
  }
  __break(1u);
LABEL_51:
  __break(1u);
LABEL_52:
  __break(1u);
LABEL_53:
  __break(1u);
LABEL_54:
  __break(1u);
  return result;
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t result;
  uint64_t i;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  int v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  void (*v39)(uint64_t *__return_ptr, _QWORD *, _QWORD *, ValueMetadata *, unint64_t, double);
  unint64_t v40;
  void (*v41)(uint64_t *__return_ptr, _QWORD *, _QWORD *, ValueMetadata *, uint64_t, double);
  uint64_t v42;
  int v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t j;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  int64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  int v57;
  __int128 v58;
  _QWORD v59[5];
  _QWORD v60[3];
  __int128 v61;
  __int128 v62;
  __int128 v63;
  uint64_t v64;
  char v65;
  uint64_t v66[10];
  unsigned __int8 v67;
  _QWORD v68[2];
  __int16 v69;

  v4 = v3;
  type metadata accessor for CombinedAnimationState<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>>.Entry(0, (unint64_t *)&lazy cache variable for type metadata for Slice<IndexSet>, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF428], lazy protocol witness table accessor for type IndexSet and conformance IndexSet, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE41D8]);
  MEMORY[0x24BDAC7A8](v8);
  v55 = (uint64_t)&v52 - v9;
  v10 = type metadata accessor for IndexSet();
  v53 = *(_QWORD *)(v10 - 8);
  v54 = v10;
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v52 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*(_BYTE *)(v4 + 256) & 1) != 0 || (a1 & 1) == 0)
    goto LABEL_17;
  *(_BYTE *)(v4 + 256) = a1 & 1;
  v13 = (uint64_t *)(v4 + 248);
  swift_beginAccess();
  v14 = *(_QWORD *)(v4 + 248);
  if (v14 >> 62)
  {
    swift_bridgeObjectRetain();
    v21 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v21)
      goto LABEL_17;
LABEL_5:
    v15 = *v13;
    v16 = v12;
    if ((unint64_t)*v13 >> 62)
    {
      swift_bridgeObjectRetain();
      result = _CocoaArrayWrapper.endIndex.getter();
      v17 = result;
      if (result)
        goto LABEL_7;
    }
    else
    {
      v17 = *(_QWORD *)((v15 & 0xFFFFFFFFFFFFF8) + 0x10);
      result = swift_bridgeObjectRetain();
      if (v17)
      {
LABEL_7:
        if (v17 < 1)
          goto LABEL_52;
        for (i = 0; i != v17; ++i)
        {
          if ((v15 & 0xC000000000000001) != 0)
          {
            v20 = MEMORY[0x23B7C6D9C](i, v15);
          }
          else
          {
            v20 = *(_QWORD *)(v15 + 8 * i + 32);
            swift_retain();
          }
          (*(void (**)(void))(*(_QWORD *)v20 + 96))();
          swift_release();
        }
      }
    }
    swift_bridgeObjectRelease();
    *v13 = MEMORY[0x24BEE4AF8];
    swift_bridgeObjectRelease();
    v12 = v16;
    goto LABEL_17;
  }
  if (*(_QWORD *)((v14 & 0xFFFFFFFFFFFFF8) + 0x10))
    goto LABEL_5;
LABEL_17:
  v22 = v4 + 264;
  result = swift_beginAccess();
  if (!*(_QWORD *)(*(_QWORD *)(v4 + 264) + 16))
    return result;
  v56 = v12;
  IndexSet.init()();
  v23 = *(_QWORD *)(*(_QWORD *)v22 + 16);
  if (!v23)
  {
LABEL_45:
    swift_beginAccess();
    v49 = v55;
    v50 = v56;
    specialized Collection.subscript.getter(v55);
    result = specialized MutableCollection.halfStablePartitionByOffset(isSuffixElementAtOffset:)(v22, v49);
    v51 = *(_QWORD *)(*(_QWORD *)v22 + 16);
    if (v51 < result)
      goto LABEL_51;
    specialized Array.replaceSubrange<A>(_:with:)(result, v51);
    outlined destroy of Slice<IndexSet>(v49);
    swift_endAccess();
    return (*(uint64_t (**)(char *, uint64_t))(v53 + 8))(v50, v54);
  }
  v24 = 0;
  v25 = *MEMORY[0x24BE096C0];
  if ((a2 & 0x100000000) == 0)
    v25 = a2;
  v57 = v25;
  while (1)
  {
    swift_beginAccess();
    v26 = *(_QWORD **)v22;
    result = swift_isUniquelyReferenced_nonNull_native();
    *(_QWORD *)v22 = v26;
    if ((result & 1) == 0)
    {
      result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v26);
      v26 = (_QWORD *)result;
      *(_QWORD *)v22 = result;
    }
    if (v24 >= v26[2])
      break;
    v27 = &v26[14 * v24];
    v28 = v27[5];
    swift_bridgeObjectRetain();
    v29 = AGCreateWeakAttribute();
    v68[0] = v28;
    v68[1] = v29;
    v69 = 0;
    v30 = v27[4];
    v31 = v27[6];
    v32 = v27[7];
    v33 = v27[8];
    v34 = v27[15];
    v35 = *((_BYTE *)v27 + 128);
    v36 = *(_OWORD *)(v27 + 9);
    v37 = *(_OWORD *)(v27 + 11);
    v38 = *(_OWORD *)(v27 + 13);
    v60[0] = v31;
    v60[1] = v32;
    v60[2] = v33;
    v58 = v36;
    v61 = v36;
    v62 = v37;
    v63 = v38;
    v64 = v34;
    v65 = v35;
    if ((ValueMetadata *)type metadata accessor for AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>() == &type metadata for _ShapeStyle_Pack.Fill.AnimatableData)
    {
      v59[0] = v31;
      v59[1] = v32;
      v59[2] = v33;
      v59[3] = v58;
      v41 = *(void (**)(uint64_t *__return_ptr, _QWORD *, _QWORD *, ValueMetadata *, uint64_t, double))(*(_QWORD *)v30 + 120);
      v42 = lazy protocol witness table accessor for type AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>> and conformance AnimatablePair<A, B>();
      v41(v66, v59, v68, &type metadata for _ShapeStyle_Pack.Fill.AnimatableData, v42, a3);
    }
    else
    {
      v39 = *(void (**)(uint64_t *__return_ptr, _QWORD *, _QWORD *, ValueMetadata *, unint64_t, double))(*(_QWORD *)v30 + 120);
      v40 = lazy protocol witness table accessor for type _ShapeStyle_Pack.Fill.AnimatableData and conformance _ShapeStyle_Pack.Fill.AnimatableData();
      v39(v66, v60, v68, &type metadata for _ShapeStyle_Pack.Fill.AnimatableData, v40, a3);
    }
    if (v67 == 255)
    {
      v43 = 1;
    }
    else
    {
      outlined consume of _ShapeStyle_Pack.Fill.AnimatableData?(v66[0], v66[1], v66[2], v66[3], v66[4], v66[5], v66[6], v66[7], v66[8], v66[9], v67);
      v43 = HIBYTE(v69);
    }
    swift_bridgeObjectRelease();
    v44 = *(_QWORD *)v22;
    result = swift_endAccess();
    if (!v43)
      goto LABEL_23;
    if (v24 >= *(_QWORD *)(v44 + 16))
      goto LABEL_49;
    v45 = *(_QWORD *)(v44 + 112 * v24 + 136);
    if (v45 >> 62)
    {
      swift_bridgeObjectRetain();
      result = _CocoaArrayWrapper.endIndex.getter();
      v46 = result;
      if (result)
      {
LABEL_37:
        if (v46 < 1)
          goto LABEL_50;
        for (j = 0; j != v46; ++j)
        {
          if ((v45 & 0xC000000000000001) != 0)
          {
            v48 = MEMORY[0x23B7C6D9C](j, v45);
          }
          else
          {
            v48 = *(_QWORD *)(v45 + 8 * j + 32);
            swift_retain();
          }
          (*(void (**)(void))(*(_QWORD *)v48 + 96))();
          swift_release();
        }
      }
    }
    else
    {
      v46 = *(_QWORD *)((v45 & 0xFFFFFFFFFFFFF8) + 0x10);
      result = swift_bridgeObjectRetain();
      if (v46)
        goto LABEL_37;
    }
    swift_bridgeObjectRelease();
    IndexSet.insert(_:)(v24);
LABEL_23:
    if (++v24 == v23)
      goto LABEL_45;
  }
  __break(1u);
LABEL_49:
  __break(1u);
LABEL_50:
  __break(1u);
LABEL_51:
  __break(1u);
LABEL_52:
  __break(1u);
  return result;
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  uint64_t i;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  __int128 v34;
  void (*v35)(_QWORD *__return_ptr, _QWORD, _QWORD, _QWORD, _QWORD, double);
  uint64_t v36;
  void (*v37)(_QWORD *__return_ptr, _QWORD, _QWORD, _QWORD, _QWORD, double);
  uint64_t v38;
  char v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t j;
  uint64_t v48;
  uint64_t v49;
  int64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  __int128 v55;
  _QWORD v56[5];
  _QWORD v57[3];
  __int128 v58;
  uint64_t v59;
  char v60;
  _QWORD v61[6];
  char v62;
  _QWORD v63[2];
  __int16 v64;

  v4 = v3;
  type metadata accessor for CombinedAnimationState<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>>.Entry(0, (unint64_t *)&lazy cache variable for type metadata for Slice<IndexSet>, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF428], lazy protocol witness table accessor for type IndexSet and conformance IndexSet, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE41D8]);
  MEMORY[0x24BDAC7A8](v8);
  v53 = (uint64_t)&v51 - v9;
  v52 = type metadata accessor for IndexSet();
  v51 = *(_QWORD *)(v52 - 8);
  MEMORY[0x24BDAC7A8](v52);
  v11 = (char *)&v51 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*(_BYTE *)(v3 + 192) & 1) != 0 || (a1 & 1) == 0)
    goto LABEL_17;
  *(_BYTE *)(v3 + 192) = a1 & 1;
  v12 = (uint64_t *)(v3 + 184);
  swift_beginAccess();
  v13 = *(_QWORD *)(v3 + 184);
  if (v13 >> 62)
  {
    swift_bridgeObjectRetain();
    v19 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v19)
      goto LABEL_17;
LABEL_5:
    v14 = *v12;
    if ((unint64_t)*v12 >> 62)
    {
      swift_bridgeObjectRetain();
      result = _CocoaArrayWrapper.endIndex.getter();
      v15 = result;
      if (result)
        goto LABEL_7;
    }
    else
    {
      v15 = *(_QWORD *)((v14 & 0xFFFFFFFFFFFFF8) + 0x10);
      result = swift_bridgeObjectRetain();
      if (v15)
      {
LABEL_7:
        if (v15 < 1)
          goto LABEL_53;
        for (i = 0; i != v15; ++i)
        {
          if ((v14 & 0xC000000000000001) != 0)
          {
            v18 = MEMORY[0x23B7C6D9C](i, v14);
          }
          else
          {
            v18 = *(_QWORD *)(v14 + 8 * i + 32);
            swift_retain();
          }
          (*(void (**)(void))(*(_QWORD *)v18 + 96))();
          swift_release();
        }
      }
    }
    swift_bridgeObjectRelease();
    *v12 = MEMORY[0x24BEE4AF8];
    swift_bridgeObjectRelease();
    goto LABEL_17;
  }
  if (*(_QWORD *)((v13 & 0xFFFFFFFFFFFFF8) + 0x10))
    goto LABEL_5;
LABEL_17:
  v20 = v4 + 200;
  result = swift_beginAccess();
  if (!*(_QWORD *)(*(_QWORD *)(v4 + 200) + 16))
    return result;
  IndexSet.init()();
  v21 = *(_QWORD *)(*(_QWORD *)v20 + 16);
  if (!v21)
  {
LABEL_46:
    swift_beginAccess();
    v49 = v53;
    specialized Collection.subscript.getter(v53);
    result = specialized MutableCollection.halfStablePartitionByOffset(isSuffixElementAtOffset:)(v20, v49);
    v50 = *(_QWORD *)(*(_QWORD *)v20 + 16);
    if (v50 < result)
      goto LABEL_52;
    specialized Array.replaceSubrange<A>(_:with:)(result, v50);
    outlined destroy of Slice<IndexSet>(v49);
    swift_endAccess();
    return (*(uint64_t (**)(char *, uint64_t))(v51 + 8))(v11, v52);
  }
  v22 = type metadata accessor for AnimatablePair<Float, _ShapeStyle_Pack.Effect.Kind.AnimatableData>();
  v23 = v22;
  v24 = 0;
  if ((a2 & 0x100000000) != 0)
    a2 = *MEMORY[0x24BE096C0];
  else
    a2 = a2;
  v54 = v22;
  while (1)
  {
    swift_beginAccess();
    v25 = *(_QWORD **)v20;
    result = swift_isUniquelyReferenced_nonNull_native();
    *(_QWORD *)v20 = v25;
    if ((result & 1) == 0)
    {
      result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v25);
      v25 = (_QWORD *)result;
      *(_QWORD *)v20 = result;
    }
    if (v24 >= v25[2])
      break;
    v26 = &v25[10 * v24];
    v27 = v26[5];
    swift_bridgeObjectRetain();
    v28 = AGCreateWeakAttribute();
    v63[0] = v27;
    v63[1] = v28;
    v64 = 0;
    v29 = v26[4];
    v30 = v26[7];
    v31 = v26[8];
    v32 = v26[11];
    v33 = *((_BYTE *)v26 + 96);
    v34 = *(_OWORD *)(v26 + 9);
    LODWORD(v57[0]) = *((_DWORD *)v26 + 12);
    v57[1] = v30;
    v57[2] = v31;
    v58 = v34;
    v59 = v32;
    v60 = v33;
    if (v23 == MEMORY[0x24BEE13C8])
    {
      v56[0] = v57[0];
      (*(void (**)(_QWORD *__return_ptr, _QWORD *, _QWORD *, double))(*(_QWORD *)v29 + 120))(v61, v56, v63, a3);
    }
    else
    {
      v55 = v34;
      if (v23 == type metadata accessor for AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>())
      {
        v56[0] = v57[0];
        v56[1] = v30;
        v56[2] = v31;
        v56[3] = v55;
        v37 = *(void (**)(_QWORD *__return_ptr, _QWORD, _QWORD, _QWORD, _QWORD, double))(*(_QWORD *)v29
                                                                                                  + 120);
        v38 = lazy protocol witness table accessor for type AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>> and conformance AnimatablePair<A, B>();
        v37(v61, v56, v63, v23, v38, a3);
      }
      else
      {
        v35 = *(void (**)(_QWORD *__return_ptr, _QWORD, _QWORD, _QWORD, _QWORD, double))(*(_QWORD *)v29
                                                                                                  + 120);
        v36 = lazy protocol witness table accessor for type AnimatablePair<Float, _ShapeStyle_Pack.Effect.Kind.AnimatableData> and conformance AnimatablePair<A, B>();
        v35(v61, v57, v63, v23, v36, a3);
      }
    }
    v39 = v62;
    v40 = HIBYTE(v64);
    swift_bridgeObjectRelease();
    v41 = *(_QWORD *)v20;
    result = swift_endAccess();
    if ((v39 & 1) == 0 && (v40 & 1) == 0)
      goto LABEL_24;
    if (v24 >= *(_QWORD *)(v41 + 16))
      goto LABEL_50;
    v42 = v21;
    v43 = a2;
    v44 = v11;
    v45 = *(_QWORD *)(v41 + 80 * v24 + 104);
    if (v45 >> 62)
    {
      swift_bridgeObjectRetain();
      result = _CocoaArrayWrapper.endIndex.getter();
      v46 = result;
      if (result)
      {
LABEL_38:
        if (v46 < 1)
          goto LABEL_51;
        for (j = 0; j != v46; ++j)
        {
          if ((v45 & 0xC000000000000001) != 0)
          {
            v48 = MEMORY[0x23B7C6D9C](j, v45);
          }
          else
          {
            v48 = *(_QWORD *)(v45 + 8 * j + 32);
            swift_retain();
          }
          (*(void (**)(void))(*(_QWORD *)v48 + 96))();
          swift_release();
        }
      }
    }
    else
    {
      v46 = *(_QWORD *)((v45 & 0xFFFFFFFFFFFFF8) + 0x10);
      result = swift_bridgeObjectRetain();
      if (v46)
        goto LABEL_38;
    }
    swift_bridgeObjectRelease();
    v11 = v44;
    IndexSet.insert(_:)(v24);
    a2 = v43;
    v21 = v42;
    v23 = v54;
LABEL_24:
    if (++v24 == v21)
      goto LABEL_46;
  }
  __break(1u);
LABEL_50:
  __break(1u);
LABEL_51:
  __break(1u);
LABEL_52:
  __break(1u);
LABEL_53:
  __break(1u);
  return result;
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  uint64_t i;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(__int128 *__return_ptr, __int128 *, _QWORD *, uint64_t, uint64_t, double);
  uint64_t v32;
  void (*v33)(__int128 *__return_ptr, _OWORD *, _QWORD *, uint64_t, uint64_t, double);
  uint64_t v34;
  char v35;
  char v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t j;
  uint64_t v41;
  uint64_t v42;
  int64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  _OWORD v49[2];
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  _QWORD v54[2];
  __int16 v55;

  v4 = v3;
  type metadata accessor for CombinedAnimationState<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>>.Entry(0, (unint64_t *)&lazy cache variable for type metadata for Slice<IndexSet>, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF428], lazy protocol witness table accessor for type IndexSet and conformance IndexSet, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE41D8]);
  MEMORY[0x24BDAC7A8](v8);
  v47 = (uint64_t)&v44 - v9;
  v46 = type metadata accessor for IndexSet();
  v45 = *(_QWORD *)(v46 - 8);
  MEMORY[0x24BDAC7A8](v46);
  v11 = (char *)&v44 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*(_BYTE *)(v3 + 128) & 1) != 0 || (a1 & 1) == 0)
    goto LABEL_17;
  *(_BYTE *)(v3 + 128) = a1 & 1;
  v12 = (uint64_t *)(v3 + 120);
  swift_beginAccess();
  v13 = *(_QWORD *)(v3 + 120);
  if (v13 >> 62)
  {
    swift_bridgeObjectRetain();
    v19 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v19)
      goto LABEL_17;
LABEL_5:
    v14 = *v12;
    if ((unint64_t)*v12 >> 62)
    {
      swift_bridgeObjectRetain();
      result = _CocoaArrayWrapper.endIndex.getter();
      v15 = result;
      if (result)
        goto LABEL_7;
    }
    else
    {
      v15 = *(_QWORD *)((v14 & 0xFFFFFFFFFFFFF8) + 0x10);
      result = swift_bridgeObjectRetain();
      if (v15)
      {
LABEL_7:
        if (v15 < 1)
          goto LABEL_52;
        for (i = 0; i != v15; ++i)
        {
          if ((v14 & 0xC000000000000001) != 0)
          {
            v18 = MEMORY[0x23B7C6D9C](i, v14);
          }
          else
          {
            v18 = *(_QWORD *)(v14 + 8 * i + 32);
            swift_retain();
          }
          (*(void (**)(void))(*(_QWORD *)v18 + 96))();
          swift_release();
        }
      }
    }
    swift_bridgeObjectRelease();
    *v12 = MEMORY[0x24BEE4AF8];
    swift_bridgeObjectRelease();
    goto LABEL_17;
  }
  if (*(_QWORD *)((v13 & 0xFFFFFFFFFFFFF8) + 0x10))
    goto LABEL_5;
LABEL_17:
  v20 = v4 + 136;
  result = swift_beginAccess();
  if (!*(_QWORD *)(*(_QWORD *)(v4 + 136) + 16))
    return result;
  IndexSet.init()();
  v21 = *(_QWORD *)(*(_QWORD *)v20 + 16);
  if (!v21)
  {
LABEL_45:
    swift_beginAccess();
    v42 = v47;
    specialized Collection.subscript.getter(v47);
    result = specialized MutableCollection.halfStablePartitionByOffset(isSuffixElementAtOffset:)(v20, v42);
    v43 = *(_QWORD *)(*(_QWORD *)v20 + 16);
    if (v43 < result)
      goto LABEL_51;
    specialized Array.replaceSubrange<A>(_:with:)(result, v43);
    outlined destroy of Slice<IndexSet>(v42);
    swift_endAccess();
    return (*(uint64_t (**)(char *, uint64_t))(v45 + 8))(v11, v46);
  }
  v22 = type metadata accessor for AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>>(0);
  v23 = 0;
  if ((a2 & 0x100000000) != 0)
    LODWORD(a2) = *MEMORY[0x24BE096C0];
  v24 = MEMORY[0x24BEE13C8];
  v48 = a2;
  while (1)
  {
    swift_beginAccess();
    v25 = *(_QWORD **)v20;
    result = swift_isUniquelyReferenced_nonNull_native();
    *(_QWORD *)v20 = v25;
    if ((result & 1) == 0)
    {
      result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v25);
      v25 = (_QWORD *)result;
      *(_QWORD *)v20 = result;
    }
    if (v23 >= v25[2])
      break;
    v26 = &v25[6 * v23];
    v27 = v26[5];
    swift_bridgeObjectRetain();
    v28 = AGCreateWeakAttribute();
    v54[0] = v27;
    v54[1] = v28;
    v55 = 0;
    v29 = v26[4];
    v30 = v26[8];
    v52 = *((_OWORD *)v26 + 3);
    *(_QWORD *)&v53 = v30;
    if (v22 == v24)
    {
      *(_QWORD *)&v49[0] = v52;
      (*(void (**)(__int128 *__return_ptr, _OWORD *, _QWORD *, uint64_t, _UNKNOWN **, double))(*(_QWORD *)v29 + 120))(&v50, v49, v54, v24, &protocol witness table for Double, a3);
    }
    else if (v22 == type metadata accessor for AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>())
    {
      v49[0] = v52;
      v49[1] = v53;
      v33 = *(void (**)(__int128 *__return_ptr, _OWORD *, _QWORD *, uint64_t, uint64_t, double))(*(_QWORD *)v29 + 120);
      v34 = lazy protocol witness table accessor for type AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>> and conformance AnimatablePair<A, B>();
      v33(&v50, v49, v54, v22, v34, a3);
    }
    else
    {
      v31 = *(void (**)(__int128 *__return_ptr, __int128 *, _QWORD *, uint64_t, uint64_t, double))(*(_QWORD *)v29 + 120);
      v32 = lazy protocol witness table accessor for type AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>> and conformance AnimatablePair<A, B>();
      v31(&v50, &v52, v54, v22, v32, a3);
    }
    v35 = BYTE8(v51);
    v36 = HIBYTE(v55);
    swift_bridgeObjectRelease();
    v37 = *(_QWORD *)v20;
    result = swift_endAccess();
    if ((v35 & 1) == 0 && (v36 & 1) == 0)
      goto LABEL_23;
    if (v23 >= *(_QWORD *)(v37 + 16))
      goto LABEL_49;
    v38 = *(_QWORD *)(v37 + 48 * v23 + 72);
    if (v38 >> 62)
    {
      swift_bridgeObjectRetain();
      result = _CocoaArrayWrapper.endIndex.getter();
      v39 = result;
      if (result)
      {
LABEL_37:
        if (v39 < 1)
          goto LABEL_50;
        for (j = 0; j != v39; ++j)
        {
          if ((v38 & 0xC000000000000001) != 0)
          {
            v41 = MEMORY[0x23B7C6D9C](j, v38);
          }
          else
          {
            v41 = *(_QWORD *)(v38 + 8 * j + 32);
            swift_retain();
          }
          (*(void (**)(void))(*(_QWORD *)v41 + 96))();
          swift_release();
        }
      }
    }
    else
    {
      v39 = *(_QWORD *)((v38 & 0xFFFFFFFFFFFFF8) + 0x10);
      result = swift_bridgeObjectRetain();
      if (v39)
        goto LABEL_37;
    }
    swift_bridgeObjectRelease();
    IndexSet.insert(_:)(v23);
    v24 = MEMORY[0x24BEE13C8];
LABEL_23:
    if (++v23 == v21)
      goto LABEL_45;
  }
  __break(1u);
LABEL_49:
  __break(1u);
LABEL_50:
  __break(1u);
LABEL_51:
  __break(1u);
LABEL_52:
  __break(1u);
  return result;
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  uint64_t i;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  ValueMetadata *v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _OWORD *v29;
  void (*v30)(__int128 *__return_ptr, _OWORD *, _QWORD *, ValueMetadata *, unint64_t, double);
  unint64_t v31;
  uint64_t v32;
  __int128 v33;
  void (*v34)(__int128 *__return_ptr, _OWORD *, _QWORD *, ValueMetadata *, uint64_t, double);
  uint64_t v35;
  char v36;
  uint64_t v37;
  ValueMetadata *v38;
  uint64_t v39;
  char *v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t j;
  uint64_t v44;
  uint64_t v45;
  int64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _OWORD v52[3];
  __int128 v53;
  _QWORD v54[2];
  __int16 v55;

  v4 = v3;
  type metadata accessor for CombinedAnimationState<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>>.Entry(0, (unint64_t *)&lazy cache variable for type metadata for Slice<IndexSet>, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF428], lazy protocol witness table accessor for type IndexSet and conformance IndexSet, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE41D8]);
  MEMORY[0x24BDAC7A8](v8);
  v50 = (uint64_t)&v47 - v9;
  v49 = type metadata accessor for IndexSet();
  v48 = *(_QWORD *)(v49 - 8);
  MEMORY[0x24BDAC7A8](v49);
  v11 = (char *)&v47 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*(_BYTE *)(v4 + 160) & 1) != 0 || (a1 & 1) == 0)
    goto LABEL_17;
  *(_BYTE *)(v4 + 160) = a1 & 1;
  v12 = (uint64_t *)(v4 + 152);
  swift_beginAccess();
  v13 = *(_QWORD *)(v4 + 152);
  if (v13 >> 62)
  {
    swift_bridgeObjectRetain();
    v19 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v19)
      goto LABEL_17;
LABEL_5:
    v14 = *v12;
    if ((unint64_t)*v12 >> 62)
    {
      swift_bridgeObjectRetain();
      result = _CocoaArrayWrapper.endIndex.getter();
      v15 = result;
      if (result)
        goto LABEL_7;
    }
    else
    {
      v15 = *(_QWORD *)((v14 & 0xFFFFFFFFFFFFF8) + 0x10);
      result = swift_bridgeObjectRetain();
      if (v15)
      {
LABEL_7:
        if (v15 < 1)
          goto LABEL_51;
        for (i = 0; i != v15; ++i)
        {
          if ((v14 & 0xC000000000000001) != 0)
          {
            v18 = MEMORY[0x23B7C6D9C](i, v14);
          }
          else
          {
            v18 = *(_QWORD *)(v14 + 8 * i + 32);
            swift_retain();
          }
          (*(void (**)(void))(*(_QWORD *)v18 + 96))();
          swift_release();
        }
      }
    }
    swift_bridgeObjectRelease();
    *v12 = MEMORY[0x24BEE4AF8];
    swift_bridgeObjectRelease();
    goto LABEL_17;
  }
  if (*(_QWORD *)((v13 & 0xFFFFFFFFFFFFF8) + 0x10))
    goto LABEL_5;
LABEL_17:
  v20 = v4 + 168;
  result = swift_beginAccess();
  if (!*(_QWORD *)(*(_QWORD *)(v4 + 168) + 16))
    return result;
  IndexSet.init()();
  v21 = *(_QWORD *)(*(_QWORD *)v20 + 16);
  if (!v21)
  {
LABEL_44:
    swift_beginAccess();
    v45 = v50;
    specialized Collection.subscript.getter(v50);
    result = specialized MutableCollection.halfStablePartitionByOffset(isSuffixElementAtOffset:)(v20, v45);
    v46 = *(_QWORD *)(*(_QWORD *)v20 + 16);
    if (v46 < result)
      goto LABEL_50;
    specialized Array.replaceSubrange<A>(_:with:)(result, v46);
    outlined destroy of Slice<IndexSet>(v45);
    swift_endAccess();
    return (*(uint64_t (**)(char *, uint64_t))(v48 + 8))(v11, v49);
  }
  v22 = 0;
  if ((a2 & 0x100000000) != 0)
    a2 = *MEMORY[0x24BE096C0];
  else
    a2 = a2;
  v23 = &type metadata for _AnyAnimatableData;
  v51 = *(_QWORD *)(*(_QWORD *)v20 + 16);
  while (1)
  {
    swift_beginAccess();
    v24 = *(_QWORD **)v20;
    result = swift_isUniquelyReferenced_nonNull_native();
    *(_QWORD *)v20 = v24;
    if ((result & 1) == 0)
    {
      result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v24);
      v24 = (_QWORD *)result;
      *(_QWORD *)v20 = result;
    }
    if (v22 >= v24[2])
      break;
    v25 = &v24[8 * v22];
    v26 = v25[5];
    swift_bridgeObjectRetain();
    v27 = AGCreateWeakAttribute();
    v54[0] = v26;
    v54[1] = v27;
    v55 = 0;
    v28 = v25[4];
    v29 = v25 + 6;
    if ((ValueMetadata *)type metadata accessor for AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>() == v23)
    {
      v33 = *((_OWORD *)v25 + 4);
      v52[0] = *v29;
      v52[1] = v33;
      v34 = *(void (**)(__int128 *__return_ptr, _OWORD *, _QWORD *, ValueMetadata *, uint64_t, double))(*(_QWORD *)v28 + 120);
      v35 = lazy protocol witness table accessor for type AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>> and conformance AnimatablePair<A, B>();
      v34(&v53, v52, v54, v23, v35, a3);
    }
    else
    {
      v30 = *(void (**)(__int128 *__return_ptr, _OWORD *, _QWORD *, ValueMetadata *, unint64_t, double))(*(_QWORD *)v28 + 120);
      v31 = lazy protocol witness table accessor for type _AnyAnimatableData and conformance _AnyAnimatableData();
      v30(&v53, v29, v54, v23, v31, a3);
    }
    v32 = v53;
    v36 = HIBYTE(v55);
    outlined destroy of _AnyAnimatableData?((uint64_t)&v53);
    swift_bridgeObjectRelease();
    v37 = *(_QWORD *)v20;
    result = swift_endAccess();
    if (v32 && (v36 & 1) == 0)
      goto LABEL_24;
    if (v22 >= *(_QWORD *)(v37 + 16))
      goto LABEL_48;
    v38 = v23;
    v39 = a2;
    v40 = v11;
    v41 = *(_QWORD *)(v37 + (v22 << 6) + 88);
    if (v41 >> 62)
    {
      swift_bridgeObjectRetain();
      result = _CocoaArrayWrapper.endIndex.getter();
      v42 = result;
      if (result)
      {
LABEL_36:
        if (v42 < 1)
          goto LABEL_49;
        for (j = 0; j != v42; ++j)
        {
          if ((v41 & 0xC000000000000001) != 0)
          {
            v44 = MEMORY[0x23B7C6D9C](j, v41);
          }
          else
          {
            v44 = *(_QWORD *)(v41 + 8 * j + 32);
            swift_retain();
          }
          (*(void (**)(void))(*(_QWORD *)v44 + 96))();
          swift_release();
        }
      }
    }
    else
    {
      v42 = *(_QWORD *)((v41 & 0xFFFFFFFFFFFFF8) + 0x10);
      result = swift_bridgeObjectRetain();
      if (v42)
        goto LABEL_36;
    }
    swift_bridgeObjectRelease();
    v11 = v40;
    IndexSet.insert(_:)(v22);
    a2 = v39;
    v23 = v38;
    v21 = v51;
LABEL_24:
    if (++v22 == v21)
      goto LABEL_44;
  }
  __break(1u);
LABEL_48:
  __break(1u);
LABEL_49:
  __break(1u);
LABEL_50:
  __break(1u);
LABEL_51:
  __break(1u);
  return result;
}

uint64_t AnimatorState.updateListeners(isLogicallyComplete:time:environment:)(char a1, unint64_t a2, double a3, uint64_t a4, uint64_t a5)
{
  uint64_t **v5;
  uint64_t **v6;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  uint64_t i;
  uint64_t v22;
  uint64_t v23;
  Swift::Int *v24;
  uint64_t v25;
  Swift::Int v26;
  Swift::Int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  char *v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t j;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  Swift::Int v45;
  Swift::Int v46;
  Swift::Int v47;

  v6 = v5;
  v10 = *v5;
  v11 = type metadata accessor for AnimatorState.Fork(0, v10[10], v10[11], a5);
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v11);
  v43 = (char *)&v39 - v13;
  v14 = type metadata accessor for IndexSet();
  v39 = *(_QWORD *)(v14 - 8);
  v40 = v14;
  MEMORY[0x24BDAC7A8](v14);
  v44 = (uint64_t)&v39 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = v10[23];
  if ((*((_BYTE *)v6 + v16) & 1) != 0 || (a1 & 1) == 0)
    goto LABEL_17;
  *((_BYTE *)v6 + v16) = a1 & 1;
  v17 = (uint64_t *)((char *)v6 + (*v6)[22]);
  swift_beginAccess();
  if ((unint64_t)*v17 >> 62)
  {
    swift_bridgeObjectRetain();
    v23 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v23)
      goto LABEL_17;
LABEL_5:
    v18 = *v17;
    if ((unint64_t)*v17 >> 62)
    {
      swift_bridgeObjectRetain();
      result = _CocoaArrayWrapper.endIndex.getter();
      v19 = result;
      if (result)
        goto LABEL_7;
    }
    else
    {
      v19 = *(_QWORD *)((v18 & 0xFFFFFFFFFFFFF8) + 0x10);
      result = swift_bridgeObjectRetain();
      if (v19)
      {
LABEL_7:
        if (v19 < 1)
          goto LABEL_40;
        for (i = 0; i != v19; ++i)
        {
          if ((v18 & 0xC000000000000001) != 0)
          {
            v22 = MEMORY[0x23B7C6D9C](i, v18);
          }
          else
          {
            v22 = *(_QWORD *)(v18 + 8 * i + 32);
            swift_retain();
          }
          (*(void (**)(void))(*(_QWORD *)v22 + 96))();
          swift_release();
        }
      }
    }
    swift_bridgeObjectRelease();
    *v17 = MEMORY[0x24BEE4AF8];
    swift_bridgeObjectRelease();
    goto LABEL_17;
  }
  if (*(_QWORD *)((*v17 & 0xFFFFFFFFFFFFF8) + 0x10))
    goto LABEL_5;
LABEL_17:
  v24 = (Swift::Int *)((char *)v6 + (*v6)[24]);
  swift_beginAccess();
  v45 = *v24;
  v25 = type metadata accessor for Array();
  MEMORY[0x23B7C9C04](MEMORY[0x24BEE12E0], v25);
  result = Collection.isEmpty.getter();
  if ((result & 1) != 0)
    return result;
  IndexSet.init()();
  v47 = *v24;
  MEMORY[0x23B7C9C04](MEMORY[0x24BEE12D8], v25);
  result = RandomAccessCollection<>.indices.getter();
  v27 = v45;
  v26 = v46;
  if (v45 == v46)
  {
LABEL_19:
    swift_beginAccess();
    v28 = MEMORY[0x23B7C9C04](MEMORY[0x24BEE12B8], v25);
    v29 = MEMORY[0x23B7C9C04](MEMORY[0x24BEE12E8], v25);
    v30 = v44;
    RangeReplaceableCollection<>.remove(atOffsets:)(v44, v25, v28, v29);
    swift_endAccess();
    return (*(uint64_t (**)(uint64_t, uint64_t))(v39 + 8))(v30, v40);
  }
  if (v46 < v45)
    goto LABEL_39;
  v31 = a2 | ((HIDWORD(a2) & 1) << 32);
  v41 = v31;
  v42 = v12;
  while (v27 < v26)
  {
    swift_beginAccess();
    Array._makeMutableAndUnique()();
    Array._checkSubscript_mutating(_:)(v27);
    v32 = AnimatorState.Fork.update(time:environment:)(a3, v31, v11);
    _ViewInputs.base.modify(v25, v33);
    result = swift_endAccess();
    if ((v32 & 1) == 0)
      goto LABEL_24;
    swift_beginAccess();
    v34 = v43;
    Array.subscript.getter();
    v35 = *(_QWORD *)&v34[*(int *)(v11 + 44)];
    swift_endAccess();
    swift_bridgeObjectRetain();
    result = (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v34, v11);
    if (v35 >> 62)
    {
      swift_bridgeObjectRetain();
      v36 = _CocoaArrayWrapper.endIndex.getter();
      result = swift_bridgeObjectRelease();
      if (v36)
      {
LABEL_29:
        if (v36 < 1)
          goto LABEL_38;
        for (j = 0; j != v36; ++j)
        {
          if ((v35 & 0xC000000000000001) != 0)
          {
            v38 = MEMORY[0x23B7C6D9C](j, v35);
          }
          else
          {
            v38 = *(_QWORD *)(v35 + 8 * j + 32);
            swift_retain();
          }
          (*(void (**)(void))(*(_QWORD *)v38 + 96))();
          swift_release();
        }
      }
    }
    else
    {
      v36 = *(_QWORD *)((v35 & 0xFFFFFFFFFFFFF8) + 0x10);
      if (v36)
        goto LABEL_29;
    }
    swift_bridgeObjectRelease();
    result = *(_OWORD *)&IndexSet.insert(_:)(v27);
    v31 = v41;
    v12 = v42;
LABEL_24:
    if (++v27 == v26)
      goto LABEL_19;
  }
  __break(1u);
LABEL_38:
  __break(1u);
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
  return result;
}

uint64_t specialized AnimatorState.forkListeners(animation:state:interval:)(uint64_t result, uint64_t a2, float a3, float a4, float a5, float a6)
{
  uint64_t v6;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v18;
  unint64_t v19;
  float *v20;
  uint64_t v21;

  if ((*(_BYTE *)(v6 + 112) & 1) == 0)
  {
    v12 = result;
    result = swift_beginAccess();
    v13 = *(_QWORD *)(v6 + 104);
    if (v13 >> 62)
    {
      swift_bridgeObjectRetain();
      v21 = _CocoaArrayWrapper.endIndex.getter();
      result = swift_bridgeObjectRelease();
      if (!v21)
        return result;
    }
    else if (!*(_QWORD *)((v13 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      return result;
    }
    v14 = *(_QWORD *)(v6 + 104);
    v15 = (_QWORD *)(v6 + 120);
    swift_beginAccess();
    v16 = *(_QWORD **)(v6 + 120);
    swift_retain_n();
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(_QWORD *)(v6 + 120) = v16;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v16[2] + 1, 1, v16);
      *v15 = v16;
    }
    v19 = v16[2];
    v18 = v16[3];
    if (v19 >= v18 >> 1)
    {
      v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v18 > 1), v19 + 1, 1, v16);
      *v15 = v16;
    }
    v16[2] = v19 + 1;
    v20 = (float *)&v16[5 * v19];
    *((_QWORD *)v20 + 4) = v12;
    *((_QWORD *)v20 + 5) = a2;
    v20[12] = a3;
    v20[13] = a4;
    v20[14] = a5;
    v20[15] = a6;
    *((_QWORD *)v20 + 8) = v14;
    swift_endAccess();
    *(_QWORD *)(v6 + 104) = MEMORY[0x24BEE4AF8];
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t specialized AnimatorState.forkListeners(animation:state:interval:)(uint64_t result, uint64_t a2, double a3)
{
  uint64_t v3;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v12;
  unint64_t v13;
  double *v14;
  uint64_t v15;

  if ((*(_BYTE *)(v3 + 96) & 1) == 0)
  {
    v6 = result;
    result = swift_beginAccess();
    v7 = *(_QWORD *)(v3 + 88);
    if (v7 >> 62)
    {
      swift_bridgeObjectRetain();
      v15 = _CocoaArrayWrapper.endIndex.getter();
      result = swift_bridgeObjectRelease();
      if (!v15)
        return result;
    }
    else if (!*(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      return result;
    }
    v8 = *(_QWORD *)(v3 + 88);
    v9 = (_QWORD *)(v3 + 104);
    swift_beginAccess();
    v10 = *(_QWORD **)(v3 + 104);
    swift_retain_n();
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(_QWORD *)(v3 + 104) = v10;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v10[2] + 1, 1, v10);
      *v9 = v10;
    }
    v13 = v10[2];
    v12 = v10[3];
    if (v13 >= v12 >> 1)
    {
      v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v12 > 1), v13 + 1, 1, v10);
      *v9 = v10;
    }
    v10[2] = v13 + 1;
    v14 = (double *)&v10[4 * v13];
    *((_QWORD *)v14 + 4) = v6;
    *((_QWORD *)v14 + 5) = a2;
    v14[6] = a3;
    *((_QWORD *)v14 + 7) = v8;
    swift_endAccess();
    *(_QWORD *)(v3 + 88) = MEMORY[0x24BEE4AF8];
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    return swift_bridgeObjectRelease();
  }
  return result;
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if ((*(_BYTE *)(v3 + 96) & 1) == 0)
  {
    v4 = v3;
    v7 = result;
    result = swift_beginAccess();
    v8 = *(_QWORD *)(v3 + 88);
    if (v8 >> 62)
    {
      swift_bridgeObjectRetain();
      v10 = _CocoaArrayWrapper.endIndex.getter();
      result = swift_bridgeObjectRelease();
      if (!v10)
        return result;
    }
    else if (!*(_QWORD *)((v8 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      return result;
    }
    v9 = *(_QWORD *)(v4 + 88);
    swift_beginAccess();
    swift_retain_n();
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    specialized Array.append(_:)(v7, a2, v9, a3);
    swift_endAccess();
    *(_QWORD *)(v4 + 88) = MEMORY[0x24BEE4AF8];
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t specialized AnimatorState.forkListeners(animation:state:interval:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t (*a4)(BOOL, uint64_t, uint64_t, uint64_t))
{
  uint64_t v4;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  uint64_t v17;

  if ((*(_BYTE *)(v4 + 96) & 1) == 0)
  {
    v8 = result;
    result = swift_beginAccess();
    v9 = *(_QWORD *)(v4 + 88);
    if (v9 >> 62)
    {
      swift_bridgeObjectRetain();
      v17 = _CocoaArrayWrapper.endIndex.getter();
      result = swift_bridgeObjectRelease();
      if (!v17)
        return result;
    }
    else if (!*(_QWORD *)((v9 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      return result;
    }
    v10 = *(_QWORD *)(v4 + 88);
    v11 = (uint64_t *)(v4 + 104);
    swift_beginAccess();
    v12 = *(_QWORD *)(v4 + 104);
    swift_retain_n();
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(_QWORD *)(v4 + 104) = v12;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      v12 = a4(0, *(_QWORD *)(v12 + 16) + 1, 1, v12);
      *v11 = v12;
    }
    v15 = *(_QWORD *)(v12 + 16);
    v14 = *(_QWORD *)(v12 + 24);
    if (v15 >= v14 >> 1)
    {
      v12 = a4(v14 > 1, v15 + 1, 1, v12);
      *v11 = v12;
    }
    *(_QWORD *)(v12 + 16) = v15 + 1;
    v16 = (_QWORD *)(v12 + 32 * v15);
    v16[4] = v8;
    v16[5] = a2;
    v16[6] = a3;
    v16[7] = v10;
    swift_endAccess();
    *(_QWORD *)(v4 + 88) = MEMORY[0x24BEE4AF8];
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t specialized AnimatorState.forkListeners(animation:state:interval:)(uint64_t result, uint64_t a2, __int128 *a3)
{
  uint64_t v3;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;

  if ((*(_BYTE *)(v3 + 208) & 1) == 0)
  {
    v5 = result;
    v17 = a3[1];
    v18 = *a3;
    v15 = a3[2];
    v16 = a3[3];
    result = swift_beginAccess();
    v6 = *(_QWORD *)(v3 + 200);
    if (v6 >> 62)
    {
      swift_bridgeObjectRetain();
      v14 = _CocoaArrayWrapper.endIndex.getter();
      result = swift_bridgeObjectRelease();
      if (!v14)
        return result;
    }
    else if (!*(_QWORD *)((v6 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      return result;
    }
    v7 = *(_QWORD *)(v3 + 200);
    v8 = (_QWORD *)(v3 + 216);
    swift_beginAccess();
    v9 = *(_QWORD **)(v3 + 216);
    swift_retain_n();
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(_QWORD *)(v3 + 216) = v9;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v9[2] + 1, 1, v9);
      *v8 = v9;
    }
    v12 = v9[2];
    v11 = v9[3];
    if (v12 >= v11 >> 1)
    {
      v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v11 > 1), v12 + 1, 1, v9);
      *v8 = v9;
    }
    v9[2] = v12 + 1;
    v13 = &v9[11 * v12];
    v13[4] = v5;
    v13[5] = a2;
    *((_OWORD *)v13 + 3) = v18;
    *((_OWORD *)v13 + 4) = v17;
    *((_OWORD *)v13 + 5) = v15;
    *((_OWORD *)v13 + 6) = v16;
    v13[14] = v7;
    swift_endAccess();
    *(_QWORD *)(v3 + 200) = MEMORY[0x24BEE4AF8];
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    return swift_bridgeObjectRelease();
  }
  return result;
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  _QWORD v13[2];
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;

  if ((*(_BYTE *)(v3 + 160) & 1) == 0)
  {
    v4 = v3;
    v6 = result;
    v11 = a3[1];
    v12 = *a3;
    v7 = *((_QWORD *)a3 + 4);
    result = swift_beginAccess();
    v8 = *(_QWORD *)(v3 + 152);
    if (v8 >> 62)
    {
      swift_bridgeObjectRetain();
      v10 = _CocoaArrayWrapper.endIndex.getter();
      result = swift_bridgeObjectRelease();
      if (!v10)
        return result;
    }
    else if (!*(_QWORD *)((v8 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      return result;
    }
    v9 = *(_QWORD *)(v4 + 152);
    v13[0] = v6;
    v13[1] = a2;
    v14 = v12;
    v15 = v11;
    v16 = v7;
    v17 = v9;
    swift_beginAccess();
    swift_retain_n();
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    specialized Array.append(_:)((uint64_t)v13);
    swift_endAccess();
    *(_QWORD *)(v4 + 152) = MEMORY[0x24BEE4AF8];
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    return swift_bridgeObjectRelease();
  }
  return result;
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  _QWORD v13[2];
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;

  if ((*(_BYTE *)(v3 + 160) & 1) == 0)
  {
    v4 = v3;
    v6 = result;
    v11 = a3[1];
    v12 = *a3;
    v7 = *((_QWORD *)a3 + 4);
    result = swift_beginAccess();
    v8 = *(_QWORD *)(v3 + 152);
    if (v8 >> 62)
    {
      swift_bridgeObjectRetain();
      v10 = _CocoaArrayWrapper.endIndex.getter();
      result = swift_bridgeObjectRelease();
      if (!v10)
        return result;
    }
    else if (!*(_QWORD *)((v8 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      return result;
    }
    v9 = *(_QWORD *)(v4 + 152);
    v13[0] = v6;
    v13[1] = a2;
    v14 = v12;
    v15 = v11;
    v16 = v7;
    v17 = v9;
    swift_beginAccess();
    swift_retain_n();
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    specialized Array.append(_:)((uint64_t)v13);
    swift_endAccess();
    *(_QWORD *)(v4 + 152) = MEMORY[0x24BEE4AF8];
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    return swift_bridgeObjectRelease();
  }
  return result;
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  _QWORD v12[2];
  __int128 v13;
  uint64_t v14;
  uint64_t v15;

  if ((*(_BYTE *)(v3 + 128) & 1) == 0)
  {
    v4 = v3;
    v6 = result;
    v11 = *a3;
    v7 = *((_QWORD *)a3 + 2);
    result = swift_beginAccess();
    v8 = *(_QWORD *)(v3 + 120);
    if (v8 >> 62)
    {
      swift_bridgeObjectRetain();
      v10 = _CocoaArrayWrapper.endIndex.getter();
      result = swift_bridgeObjectRelease();
      if (!v10)
        return result;
    }
    else if (!*(_QWORD *)((v8 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      return result;
    }
    v9 = *(_QWORD *)(v4 + 120);
    v12[0] = v6;
    v12[1] = a2;
    v13 = v11;
    v14 = v7;
    v15 = v9;
    swift_beginAccess();
    swift_retain_n();
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    specialized Array.append(_:)((uint64_t)v12);
    swift_endAccess();
    *(_QWORD *)(v4 + 120) = MEMORY[0x24BEE4AF8];
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t specialized AnimatorState.forkListeners(animation:state:interval:)(uint64_t result, uint64_t a2, double a3, double a4, double a5)
{
  uint64_t v5;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v16;
  unint64_t v17;
  double *v18;
  uint64_t v19;

  if ((*(_BYTE *)(v5 + 128) & 1) == 0)
  {
    v10 = result;
    result = swift_beginAccess();
    v11 = *(_QWORD *)(v5 + 120);
    if (v11 >> 62)
    {
      swift_bridgeObjectRetain();
      v19 = _CocoaArrayWrapper.endIndex.getter();
      result = swift_bridgeObjectRelease();
      if (!v19)
        return result;
    }
    else if (!*(_QWORD *)((v11 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      return result;
    }
    v12 = *(_QWORD *)(v5 + 120);
    v13 = (_QWORD *)(v5 + 136);
    swift_beginAccess();
    v14 = *(_QWORD **)(v5 + 136);
    swift_retain_n();
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(_QWORD *)(v5 + 136) = v14;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v14[2] + 1, 1, v14);
      *v13 = v14;
    }
    v17 = v14[2];
    v16 = v14[3];
    if (v17 >= v16 >> 1)
    {
      v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v16 > 1), v17 + 1, 1, v14);
      *v13 = v14;
    }
    v14[2] = v17 + 1;
    v18 = (double *)&v14[6 * v17];
    *((_QWORD *)v18 + 4) = v10;
    *((_QWORD *)v18 + 5) = a2;
    v18[6] = a3;
    v18[7] = a4;
    v18[8] = a5;
    *((_QWORD *)v18 + 9) = v12;
    swift_endAccess();
    *(_QWORD *)(v5 + 120) = MEMORY[0x24BEE4AF8];
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    return swift_bridgeObjectRelease();
  }
  return result;
}

{
  uint64_t v5;
  uint64_t v6;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v15[6];

  if ((*(_BYTE *)(v5 + 128) & 1) == 0)
  {
    v6 = v5;
    v11 = result;
    result = swift_beginAccess();
    v12 = *(_QWORD *)(v5 + 120);
    if (v12 >> 62)
    {
      swift_bridgeObjectRetain();
      v14 = _CocoaArrayWrapper.endIndex.getter();
      result = swift_bridgeObjectRelease();
      if (!v14)
        return result;
    }
    else if (!*(_QWORD *)((v12 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      return result;
    }
    v13 = *(_QWORD *)(v6 + 120);
    v15[0] = v11;
    v15[1] = a2;
    *(double *)&v15[2] = a3;
    *(double *)&v15[3] = a4;
    *(double *)&v15[4] = a5;
    v15[5] = v13;
    swift_beginAccess();
    swift_retain_n();
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    specialized Array.append(_:)((uint64_t)v15);
    swift_endAccess();
    *(_QWORD *)(v6 + 120) = MEMORY[0x24BEE4AF8];
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    return swift_bridgeObjectRelease();
  }
  return result;
}

{
  uint64_t v5;
  uint64_t v6;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v15[6];

  if ((*(_BYTE *)(v5 + 128) & 1) == 0)
  {
    v6 = v5;
    v11 = result;
    result = swift_beginAccess();
    v12 = *(_QWORD *)(v5 + 120);
    if (v12 >> 62)
    {
      swift_bridgeObjectRetain();
      v14 = _CocoaArrayWrapper.endIndex.getter();
      result = swift_bridgeObjectRelease();
      if (!v14)
        return result;
    }
    else if (!*(_QWORD *)((v12 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      return result;
    }
    v13 = *(_QWORD *)(v6 + 120);
    v15[0] = v11;
    v15[1] = a2;
    *(double *)&v15[2] = a3;
    *(double *)&v15[3] = a4;
    *(double *)&v15[4] = a5;
    v15[5] = v13;
    swift_beginAccess();
    swift_retain_n();
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    specialized Array.append(_:)((uint64_t)v15);
    swift_endAccess();
    *(_QWORD *)(v6 + 120) = MEMORY[0x24BEE4AF8];
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t specialized AnimatorState.forkListeners(animation:state:interval:)(uint64_t result, uint64_t a2, double a3, double a4, double a5, double a6)
{
  uint64_t v6;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v18;
  unint64_t v19;
  double *v20;
  uint64_t v21;

  if ((*(_BYTE *)(v6 + 144) & 1) == 0)
  {
    v12 = result;
    result = swift_beginAccess();
    v13 = *(_QWORD *)(v6 + 136);
    if (v13 >> 62)
    {
      swift_bridgeObjectRetain();
      v21 = _CocoaArrayWrapper.endIndex.getter();
      result = swift_bridgeObjectRelease();
      if (!v21)
        return result;
    }
    else if (!*(_QWORD *)((v13 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      return result;
    }
    v14 = *(_QWORD *)(v6 + 136);
    v15 = (_QWORD *)(v6 + 152);
    swift_beginAccess();
    v16 = *(_QWORD **)(v6 + 152);
    swift_retain_n();
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(_QWORD *)(v6 + 152) = v16;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v16[2] + 1, 1, v16);
      *v15 = v16;
    }
    v19 = v16[2];
    v18 = v16[3];
    if (v19 >= v18 >> 1)
    {
      v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v18 > 1), v19 + 1, 1, v16);
      *v15 = v16;
    }
    v16[2] = v19 + 1;
    v20 = (double *)&v16[7 * v19];
    *((_QWORD *)v20 + 4) = v12;
    *((_QWORD *)v20 + 5) = a2;
    v20[6] = a3;
    v20[7] = a4;
    v20[8] = a5;
    v20[9] = a6;
    *((_QWORD *)v20 + 10) = v14;
    swift_endAccess();
    *(_QWORD *)(v6 + 136) = MEMORY[0x24BEE4AF8];
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    return swift_bridgeObjectRelease();
  }
  return result;
}

{
  uint64_t v6;
  uint64_t v7;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD v17[7];

  if ((*(_BYTE *)(v6 + 144) & 1) == 0)
  {
    v7 = v6;
    v13 = result;
    result = swift_beginAccess();
    v14 = *(_QWORD *)(v6 + 136);
    if (v14 >> 62)
    {
      swift_bridgeObjectRetain();
      v16 = _CocoaArrayWrapper.endIndex.getter();
      result = swift_bridgeObjectRelease();
      if (!v16)
        return result;
    }
    else if (!*(_QWORD *)((v14 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      return result;
    }
    v15 = *(_QWORD *)(v7 + 136);
    v17[0] = v13;
    v17[1] = a2;
    *(double *)&v17[2] = a3;
    *(double *)&v17[3] = a4;
    *(double *)&v17[4] = a5;
    *(double *)&v17[5] = a6;
    v17[6] = v15;
    swift_beginAccess();
    swift_retain_n();
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    specialized Array.append(_:)((uint64_t)v17);
    swift_endAccess();
    *(_QWORD *)(v7 + 136) = MEMORY[0x24BEE4AF8];
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t specialized AnimatorState.forkListeners(animation:state:interval:)(uint64_t result, unint64_t a2, double a3, double a4)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __n128 v13;
  double v14;
  double v15;
  uint64_t v16;

  if ((*(_BYTE *)(v4 + 112) & 1) == 0)
  {
    v5 = v4;
    v9 = result;
    result = swift_beginAccess();
    v10 = *(_QWORD *)(v4 + 104);
    if (v10 >> 62)
    {
      swift_bridgeObjectRetain();
      v12 = _CocoaArrayWrapper.endIndex.getter();
      result = swift_bridgeObjectRelease();
      if (!v12)
        return result;
    }
    else if (!*(_QWORD *)((v10 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      return result;
    }
    v11 = *(_QWORD *)(v5 + 104);
    v13.n128_u64[0] = v9;
    v13.n128_u64[1] = a2;
    v14 = a3;
    v15 = a4;
    v16 = v11;
    swift_beginAccess();
    swift_retain_n();
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    specialized Array.append(_:)(&v13);
    swift_endAccess();
    *(_QWORD *)(v5 + 104) = MEMORY[0x24BEE4AF8];
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t specialized AnimatorState.forkListeners(animation:state:interval:)(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  _QWORD v14[4];
  __int128 v15;
  uint64_t v16;

  v4 = v3;
  if ((*(_BYTE *)(v3 + 144) & 1) == 0)
  {
    v7 = result;
    v8 = *(_QWORD *)a3;
    v9 = *(_QWORD *)(a3 + 8);
    v13 = *(_OWORD *)(a3 + 16);
    result = swift_beginAccess();
    v10 = *(_QWORD *)(v4 + 136);
    if (v10 >> 62)
    {
      swift_bridgeObjectRetain();
      v12 = _CocoaArrayWrapper.endIndex.getter();
      result = swift_bridgeObjectRelease();
      if (!v12)
        return result;
    }
    else if (!*(_QWORD *)((v10 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      return result;
    }
    v11 = *(_QWORD *)(v4 + 136);
    v14[0] = v7;
    v14[1] = a2;
    v14[2] = v8;
    v14[3] = v9;
    v15 = v13;
    v16 = v11;
    swift_beginAccess();
    outlined retain of Text.Effect.RenderSegmentation.StaticLines(a3);
    swift_retain_n();
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain_n();
    specialized Array.append(_:)((uint64_t)v14);
    swift_endAccess();
    *(_QWORD *)(v4 + 136) = MEMORY[0x24BEE4AF8];
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    return swift_bridgeObjectRelease();
  }
  return result;
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  _QWORD v15[2];
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  char v19;
  uint64_t v20;

  v4 = v3;
  if ((*(_BYTE *)(v3 + 176) & 1) == 0)
  {
    v7 = result;
    v13 = *(_OWORD *)(a3 + 16);
    v14 = *(_OWORD *)a3;
    v8 = *(_QWORD *)(a3 + 32);
    v9 = *(_BYTE *)(a3 + 40);
    result = swift_beginAccess();
    v10 = *(_QWORD *)(v4 + 168);
    if (v10 >> 62)
    {
      swift_bridgeObjectRetain();
      v12 = _CocoaArrayWrapper.endIndex.getter();
      result = swift_bridgeObjectRelease();
      if (!v12)
        return result;
    }
    else if (!*(_QWORD *)((v10 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      return result;
    }
    v11 = *(_QWORD *)(v4 + 168);
    v15[0] = v7;
    v15[1] = a2;
    v16 = v14;
    v17 = v13;
    v18 = v8;
    v19 = v9;
    v20 = v11;
    swift_beginAccess();
    outlined retain of AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>, ResolvedGradientVector>(a3);
    swift_retain_n();
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain_n();
    specialized Array.append(_:)((uint64_t)v15);
    swift_endAccess();
    *(_QWORD *)(v4 + 168) = MEMORY[0x24BEE4AF8];
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    return swift_bridgeObjectRelease();
  }
  return result;
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  _QWORD v15[2];
  __int128 v16;
  uint64_t v17;
  char v18;
  __int128 v19;
  uint64_t v20;

  v4 = v3;
  if ((*(_BYTE *)(v3 + 176) & 1) == 0)
  {
    v7 = result;
    v8 = *(_QWORD *)(a3 + 16);
    v9 = *(_BYTE *)(a3 + 24);
    v13 = *(_OWORD *)(a3 + 32);
    v14 = *(_OWORD *)a3;
    result = swift_beginAccess();
    v10 = *(_QWORD *)(v4 + 168);
    if (v10 >> 62)
    {
      swift_bridgeObjectRetain();
      v12 = _CocoaArrayWrapper.endIndex.getter();
      result = swift_bridgeObjectRelease();
      if (!v12)
        return result;
    }
    else if (!*(_QWORD *)((v10 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      return result;
    }
    v11 = *(_QWORD *)(v4 + 168);
    v15[0] = v7;
    v15[1] = a2;
    v16 = v14;
    v17 = v8;
    v18 = v9;
    v19 = v13;
    v20 = v11;
    swift_beginAccess();
    outlined retain of AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, ResolvedGradientVector>, AnimatablePair<Double, Double>>(a3);
    swift_retain_n();
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain_n();
    specialized Array.append(_:)((uint64_t)v15);
    swift_endAccess();
    *(_QWORD *)(v4 + 168) = MEMORY[0x24BEE4AF8];
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    return swift_bridgeObjectRelease();
  }
  return result;
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  _QWORD v15[2];
  __int128 v16;
  uint64_t v17;
  char v18;
  __int128 v19;
  uint64_t v20;

  v4 = v3;
  if ((*(_BYTE *)(v3 + 176) & 1) == 0)
  {
    v7 = result;
    v8 = *(_QWORD *)(a3 + 16);
    v9 = *(_BYTE *)(a3 + 24);
    v13 = *(_OWORD *)(a3 + 32);
    v14 = *(_OWORD *)a3;
    result = swift_beginAccess();
    v10 = *(_QWORD *)(v4 + 168);
    if (v10 >> 62)
    {
      swift_bridgeObjectRetain();
      v12 = _CocoaArrayWrapper.endIndex.getter();
      result = swift_bridgeObjectRelease();
      if (!v12)
        return result;
    }
    else if (!*(_QWORD *)((v10 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      return result;
    }
    v11 = *(_QWORD *)(v4 + 168);
    v15[0] = v7;
    v15[1] = a2;
    v16 = v14;
    v17 = v8;
    v18 = v9;
    v19 = v13;
    v20 = v11;
    swift_beginAccess();
    outlined retain of AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, ResolvedGradientVector>, AnimatablePair<Double, Double>>(a3);
    swift_retain_n();
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain_n();
    specialized Array.append(_:)((uint64_t)v15);
    swift_endAccess();
    *(_QWORD *)(v4 + 168) = MEMORY[0x24BEE4AF8];
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    return swift_bridgeObjectRelease();
  }
  return result;
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  char v8;
  int v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  _OWORD v19[6];
  __int128 v20;
  __int128 v21;
  __int128 v22[8];

  v4 = v3;
  if ((*(_BYTE *)(v3 + 288) & 1) == 0)
  {
    v7 = result;
    v17 = *(_OWORD *)(a3 + 16);
    v18 = *(_OWORD *)a3;
    v15 = *(_OWORD *)(a3 + 48);
    v16 = *(_OWORD *)(a3 + 32);
    v14 = *(_OWORD *)(a3 + 64);
    v8 = *(_BYTE *)(a3 + 80);
    v9 = *(_DWORD *)(a3 + 88);
    v10 = *(_QWORD *)(a3 + 96);
    result = swift_beginAccess();
    v11 = *(_QWORD *)(v4 + 280);
    if (v11 >> 62)
    {
      swift_bridgeObjectRetain();
      v13 = _CocoaArrayWrapper.endIndex.getter();
      result = swift_bridgeObjectRelease();
      if (!v13)
        return result;
    }
    else if (!*(_QWORD *)((v11 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      return result;
    }
    v12 = *(_QWORD *)(v4 + 280);
    *(_QWORD *)&v19[0] = v7;
    *((_QWORD *)&v19[0] + 1) = a2;
    v19[1] = v18;
    v19[2] = v17;
    v19[3] = v16;
    v19[4] = v15;
    v19[5] = v14;
    LOBYTE(v20) = v8;
    DWORD2(v20) = v9;
    *(_QWORD *)&v21 = v10;
    *((_QWORD *)&v21 + 1) = v12;
    v22[4] = v15;
    v22[5] = v14;
    v22[0] = v19[0];
    v22[1] = v18;
    v22[2] = v17;
    v22[3] = v16;
    v22[6] = v20;
    v22[7] = v21;
    swift_beginAccess();
    outlined retain of AnimatablePair<_ShapeStyle_Pack.Fill.AnimatableData, AnimatablePair<Float, AnimatableArray<AnimatablePair<Float, _ShapeStyle_Pack.Effect.Kind.AnimatableData>>>>(a3);
    outlined retain of AnimatorState<AnimatablePair<_ShapeStyle_Pack.Fill.AnimatableData, AnimatablePair<Float, AnimatableArray<AnimatablePair<Float, _ShapeStyle_Pack.Effect.Kind.AnimatableData>>>>>.Fork((uint64_t)v19);
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    specialized Array.append(_:)(v22);
    swift_endAccess();
    *(_QWORD *)(v4 + 280) = MEMORY[0x24BEE4AF8];
    swift_bridgeObjectRelease();
    return outlined release of AnimatorState<AnimatablePair<_ShapeStyle_Pack.Fill.AnimatableData, AnimatablePair<Float, AnimatableArray<AnimatablePair<Float, _ShapeStyle_Pack.Effect.Kind.AnimatableData>>>>>.Fork((uint64_t)v19);
  }
  return result;
}

uint64_t specialized AnimatorState.forkListeners(animation:state:interval:)(uint64_t result, unint64_t a2, uint64_t a3, char a4)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __n128 v13;
  uint64_t v14;
  char v15;
  uint64_t v16;

  v5 = v4;
  if ((*(_BYTE *)(v4 + 112) & 1) == 0)
  {
    v9 = result;
    result = swift_beginAccess();
    v10 = *(_QWORD *)(v5 + 104);
    if (v10 >> 62)
    {
      swift_bridgeObjectRetain();
      v12 = _CocoaArrayWrapper.endIndex.getter();
      result = swift_bridgeObjectRelease();
      if (!v12)
        return result;
    }
    else if (!*(_QWORD *)((v10 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      return result;
    }
    v11 = *(_QWORD *)(v5 + 104);
    v13.n128_u64[0] = v9;
    v13.n128_u64[1] = a2;
    v14 = a3;
    v15 = a4;
    v16 = v11;
    swift_beginAccess();
    swift_bridgeObjectRetain_n();
    swift_retain_n();
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    specialized Array.append(_:)(&v13);
    swift_endAccess();
    *(_QWORD *)(v5 + 104) = MEMORY[0x24BEE4AF8];
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t specialized AnimatorState.forkListeners(animation:state:interval:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD v23[10];
  char v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  uint64_t v37;

  v4 = v3;
  result = outlined init with take of _ShapeStyle_Pack.Fill.AnimatableData(a3, (uint64_t)v23);
  if ((*(_BYTE *)(v4 + 256) & 1) == 0)
  {
    v10 = v23[0];
    v9 = v23[1];
    v11 = v23[3];
    v20 = v23[5];
    v21 = v23[4];
    v22 = v23[6];
    v18 = v23[2];
    v19 = v23[7];
    v15 = v23[9];
    v16 = v23[8];
    v17 = v24;
    result = swift_beginAccess();
    v12 = *(_QWORD *)(v4 + 248);
    if (v12 >> 62)
    {
      swift_bridgeObjectRetain();
      v14 = _CocoaArrayWrapper.endIndex.getter();
      result = swift_bridgeObjectRelease();
      if (!v14)
        return result;
    }
    else if (!*(_QWORD *)((v12 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      return result;
    }
    v13 = *(_QWORD *)(v4 + 248);
    *(_QWORD *)&v25 = a1;
    *((_QWORD *)&v25 + 1) = a2;
    v26 = v10;
    v27 = v9;
    v28 = v18;
    v29 = v11;
    v30 = v21;
    v31 = v20;
    v32 = v22;
    v33 = v19;
    v34 = v16;
    v35 = v15;
    v36 = v17;
    v37 = v13;
    swift_beginAccess();
    outlined retain of Text.Effect.ResolvedDrawing.Operation(a3, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))outlined copy of _ShapeStyle_Pack.Fill.AnimatableData);
    swift_retain();
    swift_bridgeObjectRetain();
    outlined copy of _ShapeStyle_Pack.Fill.AnimatableData(v10, v9, v18, v11, v21, v20, v22, v19, v16, v15, v17);
    swift_bridgeObjectRetain_n();
    swift_retain();
    swift_bridgeObjectRetain();
    specialized Array.append(_:)(&v25);
    swift_endAccess();
    *(_QWORD *)(v4 + 248) = MEMORY[0x24BEE4AF8];
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    outlined consume of _ShapeStyle_Pack.Fill.AnimatableData(v10, v9, v18, v11, v21, v20, v22, v19, v16, v15, v17);
    return swift_bridgeObjectRelease();
  }
  return result;
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  _OWORD v15[2];
  uint64_t v16;
  char v17;
  _QWORD v18[2];
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  char v22;
  uint64_t v23;

  v4 = v3;
  result = outlined init with take of _ShapeStyle_Pack.Effect.Kind.AnimatableData(a3, (uint64_t)v15);
  if ((*(_BYTE *)(v3 + 176) & 1) == 0)
  {
    v13 = v15[1];
    v14 = v15[0];
    v8 = v16;
    v9 = v17;
    result = swift_beginAccess();
    v10 = *(_QWORD *)(v3 + 168);
    if (v10 >> 62)
    {
      swift_bridgeObjectRetain();
      v12 = _CocoaArrayWrapper.endIndex.getter();
      result = swift_bridgeObjectRelease();
      if (!v12)
        return result;
    }
    else if (!*(_QWORD *)((v10 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      return result;
    }
    v11 = *(_QWORD *)(v4 + 168);
    v18[0] = a1;
    v18[1] = a2;
    v19 = v14;
    v20 = v13;
    v21 = v8;
    v22 = v9;
    v23 = v11;
    swift_beginAccess();
    swift_retain_n();
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    specialized Array.append(_:)((uint64_t)v18);
    swift_endAccess();
    *(_QWORD *)(v4 + 168) = MEMORY[0x24BEE4AF8];
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t specialized AnimatorState.forkListeners(animation:state:interval:)(uint64_t result, uint64_t a2, int *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  int v7;
  uint64_t v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  _QWORD v15[2];
  int v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  char v20;
  uint64_t v21;

  if ((*(_BYTE *)(v3 + 192) & 1) == 0)
  {
    v4 = v3;
    v6 = result;
    v7 = *a3;
    v13 = *(_OWORD *)(a3 + 6);
    v14 = *(_OWORD *)(a3 + 2);
    v8 = *((_QWORD *)a3 + 5);
    v9 = *((_BYTE *)a3 + 48);
    result = swift_beginAccess();
    v10 = *(_QWORD *)(v3 + 184);
    if (v10 >> 62)
    {
      swift_bridgeObjectRetain();
      v12 = _CocoaArrayWrapper.endIndex.getter();
      result = swift_bridgeObjectRelease();
      if (!v12)
        return result;
    }
    else if (!*(_QWORD *)((v10 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      return result;
    }
    v11 = *(_QWORD *)(v4 + 184);
    v15[0] = v6;
    v15[1] = a2;
    v16 = v7;
    v17 = v14;
    v18 = v13;
    v19 = v8;
    v20 = v9 & 1;
    v21 = v11;
    swift_beginAccess();
    swift_retain_n();
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    specialized Array.append(_:)((uint64_t)v15);
    swift_endAccess();
    *(_QWORD *)(v4 + 184) = MEMORY[0x24BEE4AF8];
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t specialized AnimatorState.forkListeners(animation:state:interval:)(uint64_t result, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE v11[64];
  _QWORD v12[2];
  _QWORD v13[6];

  v4 = v3;
  if ((*(_BYTE *)(v3 + 160) & 1) == 0)
  {
    v7 = result;
    result = swift_beginAccess();
    v8 = *(_QWORD *)(v4 + 152);
    if (v8 >> 62)
    {
      swift_bridgeObjectRetain();
      v10 = _CocoaArrayWrapper.endIndex.getter();
      result = swift_bridgeObjectRelease();
      if (!v10)
        return result;
    }
    else if (!*(_QWORD *)((v8 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      return result;
    }
    outlined init with copy of _AnyAnimatableData(a3, v13);
    v9 = *(_QWORD *)(v4 + 152);
    v12[0] = v7;
    v12[1] = a2;
    v13[5] = v9;
    outlined init with copy of AnimatorState<_AnyAnimatableData>.Fork((uint64_t)v12, (uint64_t)v11);
    swift_beginAccess();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    specialized Array.append(_:)((uint64_t)v11);
    swift_endAccess();
    *(_QWORD *)(v4 + 152) = MEMORY[0x24BEE4AF8];
    swift_bridgeObjectRelease();
    return outlined destroy of AnimatorState<_AnyAnimatableData>.Fork((uint64_t)v12);
  }
  return result;
}

void AnimatorState.forkListeners(animation:state:interval:)(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t **v3;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v29 = a1;
  v6 = *v3;
  v7 = (*v3)[10];
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v10 = (char *)&v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for AnimatorState.Fork(0, v7, v6[11], v11);
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)&v26 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v15);
  v18 = (char *)&v26 - v17;
  if ((*((_BYTE *)v3 + v6[23]) & 1) == 0)
  {
    v26 = v16;
    v27 = a3;
    v28 = *a2;
    v19 = (uint64_t *)((char *)v3 + v6[22]);
    swift_beginAccess();
    if ((unint64_t)*v19 >> 62)
    {
      swift_bridgeObjectRetain();
      v25 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      v20 = v27;
      if (!v25)
        return;
    }
    else
    {
      v20 = v27;
      if (!*(_QWORD *)((*v19 & 0xFFFFFFFFFFFFF8) + 0x10))
        return;
    }
    (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, v20, v7);
    v21 = v14;
    v22 = *v19;
    v23 = v28;
    *(_QWORD *)v18 = v29;
    *((_QWORD *)v18 + 1) = v23;
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(&v18[*(int *)(v12 + 40)], v10, v7);
    *(_QWORD *)&v18[*(int *)(v12 + 44)] = v22;
    v24 = v26;
    (*(void (**)(char *, char *, uint64_t))(v26 + 16))(v21, v18, v12);
    swift_beginAccess();
    type metadata accessor for Array();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    Array.append(_:)();
    swift_endAccess();
    *v19 = MEMORY[0x24BEE4AF8];
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v24 + 8))(v18, v12);
  }
}

uint64_t specialized AnimatorState.init(animation:interval:at:in:)(uint64_t a1, uint64_t a2, double a3)
{
  uint64_t v3;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  char v12;
  long double v13;
  long double v14;
  int v15;
  char v16;
  uint64_t v17;
  uint64_t v18;

  v7 = MEMORY[0x24BEE4AF8];
  v8 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  *(_QWORD *)(v3 + 32) = v7;
  *(_QWORD *)(v3 + 56) = 0;
  *(_QWORD *)(v3 + 64) = v7;
  *(_DWORD *)(v3 + 72) = 0;
  *(_WORD *)(v3 + 76) = 1;
  *(_QWORD *)(v3 + 80) = v7;
  *(_QWORD *)(v3 + 88) = v7;
  *(_BYTE *)(v3 + 96) = 0;
  *(_QWORD *)(v3 + 104) = v7;
  *(_QWORD *)(v3 + 16) = a1;
  *(_QWORD *)(v3 + 24) = v8;
  swift_beginAccess();
  *(_QWORD *)(v3 + 32) = a2;
  swift_retain();
  swift_bridgeObjectRelease();
  *(double *)(v3 + 40) = a3;
  *(double *)(v3 + 56) = a3;
  v9 = swift_retain();
  v10 = specialized find<A>(_:key:)(v9);
  if (!v10)
  {
    swift_release();
    goto LABEL_7;
  }
  v11 = *(double *)(v10 + 72);
  v12 = *(_BYTE *)(v10 + 80);
  swift_release();
  if ((v12 & 1) != 0)
  {
LABEL_7:
    swift_release();
    swift_release();
    v15 = 0;
    *(_QWORD *)(v3 + 48) = 0;
    goto LABEL_8;
  }
  if (v11 <= 0.0)
  {
    *(_QWORD *)(v3 + 48) = 0;
  }
  else
  {
    v13 = log2(v11 * 240.0);
    v14 = exp2(floor(v13 + 0.01)) * 0.00416666667;
    *(long double *)(v3 + 48) = v14;
    if (v14 >= 0.0166666667)
    {
      swift_release();
      swift_release();
      v15 = 0;
LABEL_8:
      v16 = 1;
      goto LABEL_14;
    }
  }
  v17 = swift_retain();
  v18 = specialized find<A>(_:key:)(v17);
  if (v18)
  {
    v15 = *(_DWORD *)(v18 + 72);
    v16 = *(_BYTE *)(v18 + 76);
  }
  else
  {
    v15 = 0;
    v16 = 1;
  }
  swift_release();
  swift_release_n();
LABEL_14:
  *(_DWORD *)(v3 + 72) = v15;
  *(_BYTE *)(v3 + 76) = v16;
  return v3;
}

{
  uint64_t v3;
  uint64_t v7;
  unint64_t v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  double v12;
  char v13;
  long double v14;
  long double v15;
  int v16;
  char v17;
  uint64_t v18;
  uint64_t v19;

  v7 = MEMORY[0x24BEE4AF8];
  v8 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  *(_OWORD *)(v3 + 32) = 0u;
  *(_WORD *)(v3 + 140) = 1;
  *(_OWORD *)(v3 + 48) = 0u;
  *(_QWORD *)(v3 + 64) = 0;
  *(_OWORD *)(v3 + 88) = 0u;
  *(_OWORD *)(v3 + 104) = 0u;
  *(_OWORD *)(v3 + 120) = 0u;
  *(_DWORD *)(v3 + 136) = 0;
  *(_QWORD *)(v3 + 144) = v7;
  *(_QWORD *)(v3 + 152) = v7;
  *(_BYTE *)(v3 + 160) = 0;
  *(_QWORD *)(v3 + 168) = v7;
  *(_QWORD *)(v3 + 16) = a1;
  *(_QWORD *)(v3 + 24) = v8;
  swift_beginAccess();
  v9 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(v3 + 32) = *(_OWORD *)a2;
  *(_OWORD *)(v3 + 48) = v9;
  *(_QWORD *)(v3 + 64) = *(_QWORD *)(a2 + 32);
  *(double *)(v3 + 72) = a3;
  *(double *)(v3 + 88) = a3;
  swift_retain();
  v10 = swift_retain();
  v11 = specialized find<A>(_:key:)(v10);
  if (!v11)
  {
    swift_release();
    goto LABEL_7;
  }
  v12 = *(double *)(v11 + 72);
  v13 = *(_BYTE *)(v11 + 80);
  swift_release();
  if ((v13 & 1) != 0)
  {
LABEL_7:
    swift_release();
    swift_release();
    v16 = 0;
    *(_QWORD *)(v3 + 80) = 0;
    v17 = 1;
    goto LABEL_13;
  }
  if (v12 <= 0.0)
  {
    *(_QWORD *)(v3 + 80) = 0;
  }
  else
  {
    v14 = log2(v12 * 240.0);
    v15 = exp2(floor(v14 + 0.01)) * 0.00416666667;
    *(long double *)(v3 + 80) = v15;
    if (v15 >= 0.0166666667)
    {
      swift_release();
      swift_release();
      v16 = 0;
      v17 = 1;
      goto LABEL_13;
    }
  }
  v18 = swift_retain();
  v19 = specialized find<A>(_:key:)(v18);
  if (v19)
  {
    v16 = *(_DWORD *)(v19 + 72);
    v17 = *(_BYTE *)(v19 + 76);
  }
  else
  {
    v16 = 0;
    v17 = 1;
  }
  swift_release();
  swift_release_n();
LABEL_13:
  *(_DWORD *)(v3 + 136) = v16;
  *(_BYTE *)(v3 + 140) = v17;
  return v3;
}

{
  uint64_t v3;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  double v22;
  char v23;
  uint64_t v24;
  char *v25;
  int v26;
  char v27;
  long double v28;
  long double v29;
  uint64_t v30;
  uint64_t v31;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v7 = MEMORY[0x24BEE4AF8];
  v8 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  *(_OWORD *)(v3 + 32) = 0u;
  v9 = v3 + 32;
  *(_BYTE *)(v3 + 112) = 9;
  *(_BYTE *)(v3 + 240) = 9;
  *(_WORD *)(v3 + 268) = 1;
  v33 = (char *)(v3 + 268);
  v34 = v3;
  *(_OWORD *)(v3 + 48) = 0u;
  *(_OWORD *)(v3 + 64) = 0u;
  *(_OWORD *)(v3 + 80) = 0u;
  *(_OWORD *)(v3 + 96) = 0u;
  *(_DWORD *)(v3 + 120) = 0;
  *(_QWORD *)(v3 + 128) = v7;
  *(_OWORD *)(v3 + 152) = 0u;
  *(_OWORD *)(v3 + 168) = 0u;
  *(_OWORD *)(v3 + 184) = 0u;
  *(_OWORD *)(v3 + 200) = 0u;
  *(_OWORD *)(v3 + 216) = 0u;
  *(_QWORD *)(v3 + 232) = 0;
  *(_DWORD *)(v3 + 248) = 0;
  *(_QWORD *)(v3 + 256) = v7;
  *(_DWORD *)(v3 + 264) = 0;
  *(_QWORD *)(v3 + 272) = v7;
  *(_QWORD *)(v3 + 280) = v7;
  *(_BYTE *)(v3 + 288) = 0;
  *(_QWORD *)(v3 + 296) = v7;
  *(_QWORD *)(v3 + 16) = a1;
  *(_QWORD *)(v3 + 24) = v8;
  swift_beginAccess();
  v10 = *(_QWORD *)(v3 + 32);
  v11 = *(_QWORD *)(v3 + 40);
  v12 = *(_QWORD *)(v3 + 56);
  v13 = *(_QWORD *)(v3 + 64);
  v37 = *(_QWORD *)(v3 + 80);
  v38 = *(_QWORD *)(v3 + 72);
  v14 = *(_QWORD *)(v3 + 96);
  v36 = *(_QWORD *)(v9 + 56);
  v15 = *(_QWORD *)(v9 + 72);
  v16 = *(_BYTE *)(v9 + 80);
  v35 = *(_QWORD *)(v9 + 16);
  swift_retain();
  outlined retain of AnimatablePair<_ShapeStyle_Pack.Fill.AnimatableData, AnimatablePair<Float, AnimatableArray<AnimatablePair<Float, _ShapeStyle_Pack.Effect.Kind.AnimatableData>>>>(a2);
  v17 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(v9 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(v9 + 80) = v17;
  *(_QWORD *)(v9 + 96) = *(_QWORD *)(a2 + 96);
  v18 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)v9 = *(_OWORD *)a2;
  *(_OWORD *)(v9 + 16) = v18;
  v19 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(v9 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(v9 + 48) = v19;
  outlined consume of _ShapeStyle_Pack.Fill.AnimatableData(v10, v11, v35, v12, v13, v38, v37, v36, v14, v15, v16);
  swift_bridgeObjectRelease();
  *(double *)(v9 + 104) = a3;
  *(double *)(v9 + 120) = a3;
  v20 = swift_retain();
  v21 = specialized find<A>(_:key:)(v20);
  if (!v21)
  {
    swift_release();
    v25 = v33;
    v24 = v34;
    goto LABEL_5;
  }
  v22 = *(double *)(v21 + 72);
  v23 = *(_BYTE *)(v21 + 80);
  swift_release();
  if ((v23 & 1) != 0)
  {
    v25 = v33;
    v24 = v34;
LABEL_5:
    swift_release();
    swift_release();
    outlined release of AnimatablePair<_ShapeStyle_Pack.Fill.AnimatableData, AnimatablePair<Float, AnimatableArray<AnimatablePair<Float, _ShapeStyle_Pack.Effect.Kind.AnimatableData>>>>(a2);
    v26 = 0;
    *(_QWORD *)(v24 + 144) = 0;
    v27 = 1;
    goto LABEL_14;
  }
  if (v22 <= 0.0)
  {
    v25 = v33;
    v24 = v34;
    *(_QWORD *)(v34 + 144) = 0;
  }
  else
  {
    v28 = log2(v22 * 240.0);
    v29 = exp2(floor(v28 + 0.01)) * 0.00416666667;
    v25 = v33;
    v24 = v34;
    *(long double *)(v34 + 144) = v29;
    if (v29 >= 0.0166666667)
    {
      swift_release();
      swift_release();
      outlined release of AnimatablePair<_ShapeStyle_Pack.Fill.AnimatableData, AnimatablePair<Float, AnimatableArray<AnimatablePair<Float, _ShapeStyle_Pack.Effect.Kind.AnimatableData>>>>(a2);
      v26 = 0;
      v27 = 1;
      goto LABEL_14;
    }
  }
  v30 = swift_retain();
  v31 = specialized find<A>(_:key:)(v30);
  if (v31)
  {
    v26 = *(_DWORD *)(v31 + 72);
    v27 = *(_BYTE *)(v31 + 76);
  }
  else
  {
    v26 = 0;
    v27 = 1;
  }
  swift_release();
  swift_release_n();
  outlined release of AnimatablePair<_ShapeStyle_Pack.Fill.AnimatableData, AnimatablePair<Float, AnimatableArray<AnimatablePair<Float, _ShapeStyle_Pack.Effect.Kind.AnimatableData>>>>(a2);
LABEL_14:
  *(_DWORD *)(v24 + 264) = v26;
  *v25 = v27;
  return v24;
}

{
  uint64_t v3;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  double v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  char v24;
  long double v25;
  long double v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v7 = MEMORY[0x24BEE4AF8];
  v8 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  v30 = v3;
  *(_OWORD *)(v3 + 32) = 0u;
  v9 = v3 + 32;
  *(_BYTE *)(v3 + 112) = 9;
  *(_BYTE *)(v3 + 224) = 9;
  *(_WORD *)(v3 + 232) = 1;
  *(_OWORD *)(v3 + 48) = 0u;
  *(_OWORD *)(v3 + 64) = 0u;
  *(_OWORD *)(v3 + 80) = 0u;
  *(_OWORD *)(v3 + 96) = 0u;
  *(_OWORD *)(v3 + 136) = 0u;
  *(_OWORD *)(v3 + 152) = 0u;
  *(_OWORD *)(v3 + 168) = 0u;
  *(_OWORD *)(v3 + 184) = 0u;
  *(_OWORD *)(v3 + 200) = 0u;
  *(_QWORD *)(v3 + 216) = 0;
  *(_DWORD *)(v3 + 228) = 0;
  *(_QWORD *)(v3 + 240) = v7;
  *(_QWORD *)(v3 + 248) = v7;
  *(_BYTE *)(v3 + 256) = 0;
  *(_QWORD *)(v3 + 264) = v7;
  *(_QWORD *)(v3 + 16) = a1;
  *(_QWORD *)(v3 + 24) = v8;
  swift_beginAccess();
  v10 = *(_QWORD *)(v3 + 32);
  v11 = *(_QWORD *)(v3 + 48);
  v12 = *(_QWORD *)(v3 + 56);
  v13 = *(_QWORD *)(v3 + 64);
  v33 = *(_QWORD *)(v3 + 72);
  v34 = *(_QWORD *)(v3 + 40);
  v14 = *(_QWORD *)(v3 + 96);
  v31 = *(_QWORD *)(v3 + 88);
  v32 = *(_QWORD *)(v3 + 80);
  v15 = *(_QWORD *)(v3 + 104);
  v16 = *(_BYTE *)(v3 + 112);
  swift_retain();
  outlined retain of Text.Effect.ResolvedDrawing.Operation(a2, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))outlined copy of _ShapeStyle_Pack.Fill.AnimatableData);
  outlined init with take of _ShapeStyle_Pack.Fill.AnimatableData(a2, v9);
  outlined consume of _ShapeStyle_Pack.Fill.AnimatableData(v10, v34, v11, v12, v13, v33, v32, v31, v14, v15, v16);
  *(double *)(v9 + 88) = a3;
  *(double *)(v9 + 104) = a3;
  v17 = swift_retain();
  v18 = specialized find<A>(_:key:)(v17);
  if (!v18)
  {
    swift_release();
    v21 = a2;
    v22 = v30;
    goto LABEL_5;
  }
  v19 = *(double *)(v18 + 72);
  v20 = *(_BYTE *)(v18 + 80);
  swift_release();
  if ((v20 & 1) != 0)
  {
    v21 = a2;
    v22 = v30;
LABEL_5:
    swift_release();
    swift_release();
    outlined retain of Text.Effect.ResolvedDrawing.Operation(v21, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))outlined consume of _ShapeStyle_Pack.Fill.AnimatableData);
    v23 = 0;
    *(_QWORD *)(v22 + 128) = 0;
    v24 = 1;
    goto LABEL_14;
  }
  if (v19 <= 0.0)
  {
    v22 = v30;
    *(_QWORD *)(v30 + 128) = 0;
  }
  else
  {
    v25 = log2(v19 * 240.0);
    v26 = exp2(floor(v25 + 0.01)) * 0.00416666667;
    v22 = v30;
    *(long double *)(v30 + 128) = v26;
    if (v26 >= 0.0166666667)
    {
      swift_release();
      swift_release();
      outlined retain of Text.Effect.ResolvedDrawing.Operation(a2, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))outlined consume of _ShapeStyle_Pack.Fill.AnimatableData);
      v23 = 0;
      v24 = 1;
      goto LABEL_14;
    }
  }
  v27 = swift_retain();
  v28 = specialized find<A>(_:key:)(v27);
  if (v28)
  {
    v23 = *(_DWORD *)(v28 + 72);
    v24 = *(_BYTE *)(v28 + 76);
  }
  else
  {
    v23 = 0;
    v24 = 1;
  }
  swift_release();
  swift_release_n();
  outlined retain of Text.Effect.ResolvedDrawing.Operation(a2, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))outlined consume of _ShapeStyle_Pack.Fill.AnimatableData);
LABEL_14:
  *(_DWORD *)(v22 + 228) = v23;
  *(_BYTE *)(v22 + 232) = v24;
  return v22;
}

{
  uint64_t v3;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  char v12;
  long double v13;
  long double v14;
  int v15;
  char v16;
  uint64_t v17;
  uint64_t v18;

  v7 = MEMORY[0x24BEE4AF8];
  v8 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  *(_OWORD *)(v3 + 32) = 0u;
  *(_BYTE *)(v3 + 72) = 1;
  *(_BYTE *)(v3 + 144) = 1;
  *(_WORD *)(v3 + 152) = 1;
  *(_OWORD *)(v3 + 48) = 0u;
  *(_QWORD *)(v3 + 64) = 0;
  *(_OWORD *)(v3 + 96) = 0u;
  *(_OWORD *)(v3 + 112) = 0u;
  *(_OWORD *)(v3 + 128) = 0u;
  *(_DWORD *)(v3 + 148) = 0;
  *(_QWORD *)(v3 + 160) = v7;
  *(_QWORD *)(v3 + 168) = v7;
  *(_BYTE *)(v3 + 176) = 0;
  *(_QWORD *)(v3 + 184) = v7;
  *(_QWORD *)(v3 + 16) = a1;
  *(_QWORD *)(v3 + 24) = v8;
  swift_beginAccess();
  outlined init with take of _ShapeStyle_Pack.Effect.Kind.AnimatableData(a2, v3 + 32);
  *(double *)(v3 + 80) = a3;
  *(double *)(v3 + 96) = a3;
  swift_retain();
  v9 = swift_retain();
  v10 = specialized find<A>(_:key:)(v9);
  if (!v10)
  {
    swift_release();
    goto LABEL_7;
  }
  v11 = *(double *)(v10 + 72);
  v12 = *(_BYTE *)(v10 + 80);
  swift_release();
  if ((v12 & 1) != 0)
  {
LABEL_7:
    swift_release();
    swift_release();
    v15 = 0;
    *(_QWORD *)(v3 + 88) = 0;
    v16 = 1;
    goto LABEL_13;
  }
  if (v11 <= 0.0)
  {
    *(_QWORD *)(v3 + 88) = 0;
  }
  else
  {
    v13 = log2(v11 * 240.0);
    v14 = exp2(floor(v13 + 0.01)) * 0.00416666667;
    *(long double *)(v3 + 88) = v14;
    if (v14 >= 0.0166666667)
    {
      swift_release();
      swift_release();
      v15 = 0;
      v16 = 1;
      goto LABEL_13;
    }
  }
  v17 = swift_retain();
  v18 = specialized find<A>(_:key:)(v17);
  if (v18)
  {
    v15 = *(_DWORD *)(v18 + 72);
    v16 = *(_BYTE *)(v18 + 76);
  }
  else
  {
    v15 = 0;
    v16 = 1;
  }
  swift_release();
  swift_release_n();
LABEL_13:
  *(_DWORD *)(v3 + 148) = v15;
  *(_BYTE *)(v3 + 152) = v16;
  return v3;
}

{
  uint64_t v3;
  uint64_t v7;
  unint64_t v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  double v12;
  char v13;
  long double v14;
  long double v15;
  int v16;
  char v17;
  uint64_t v18;
  uint64_t v19;

  v7 = MEMORY[0x24BEE4AF8];
  v8 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  *(_DWORD *)(v3 + 32) = 0;
  *(_BYTE *)(v3 + 80) = 1;
  *(_BYTE *)(v3 + 160) = 1;
  *(_WORD *)(v3 + 168) = 1;
  *(_OWORD *)(v3 + 40) = 0u;
  *(_OWORD *)(v3 + 56) = 0u;
  *(_QWORD *)(v3 + 72) = 0;
  *(_QWORD *)(v3 + 104) = 0;
  *(_DWORD *)(v3 + 112) = 0;
  *(_OWORD *)(v3 + 120) = 0u;
  *(_OWORD *)(v3 + 136) = 0u;
  *(_QWORD *)(v3 + 152) = 0;
  *(_DWORD *)(v3 + 164) = 0;
  *(_QWORD *)(v3 + 176) = v7;
  *(_QWORD *)(v3 + 184) = v7;
  *(_BYTE *)(v3 + 192) = 0;
  *(_QWORD *)(v3 + 200) = v7;
  *(_QWORD *)(v3 + 16) = a1;
  *(_QWORD *)(v3 + 24) = v8;
  swift_beginAccess();
  v9 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(v3 + 32) = *(_OWORD *)a2;
  *(_OWORD *)(v3 + 48) = v9;
  *(_OWORD *)(v3 + 64) = *(_OWORD *)(a2 + 32);
  *(_BYTE *)(v3 + 80) = *(_BYTE *)(a2 + 48);
  *(double *)(v3 + 88) = a3;
  *(double *)(v3 + 104) = a3;
  swift_retain();
  v10 = swift_retain();
  v11 = specialized find<A>(_:key:)(v10);
  if (!v11)
  {
    swift_release();
    goto LABEL_7;
  }
  v12 = *(double *)(v11 + 72);
  v13 = *(_BYTE *)(v11 + 80);
  swift_release();
  if ((v13 & 1) != 0)
  {
LABEL_7:
    swift_release();
    swift_release();
    v16 = 0;
    *(_QWORD *)(v3 + 96) = 0;
    v17 = 1;
    goto LABEL_13;
  }
  if (v12 <= 0.0)
  {
    *(_QWORD *)(v3 + 96) = 0;
  }
  else
  {
    v14 = log2(v12 * 240.0);
    v15 = exp2(floor(v14 + 0.01)) * 0.00416666667;
    *(long double *)(v3 + 96) = v15;
    if (v15 >= 0.0166666667)
    {
      swift_release();
      swift_release();
      v16 = 0;
      v17 = 1;
      goto LABEL_13;
    }
  }
  v18 = swift_retain();
  v19 = specialized find<A>(_:key:)(v18);
  if (v19)
  {
    v16 = *(_DWORD *)(v19 + 72);
    v17 = *(_BYTE *)(v19 + 76);
  }
  else
  {
    v16 = 0;
    v17 = 1;
  }
  swift_release();
  swift_release_n();
LABEL_13:
  *(_DWORD *)(v3 + 164) = v16;
  *(_BYTE *)(v3 + 168) = v17;
  return v3;
}

{
  uint64_t v3;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  char v12;
  long double v13;
  long double v14;
  int v15;
  char v16;
  uint64_t v17;
  uint64_t v18;

  v7 = MEMORY[0x24BEE4AF8];
  v8 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  *(_QWORD *)(v3 + 32) = 0;
  *(_WORD *)(v3 + 108) = 1;
  *(_QWORD *)(v3 + 40) = 0;
  *(_QWORD *)(v3 + 48) = 0;
  *(_OWORD *)(v3 + 72) = 0u;
  *(_OWORD *)(v3 + 88) = 0u;
  *(_DWORD *)(v3 + 104) = 0;
  *(_QWORD *)(v3 + 112) = v7;
  *(_QWORD *)(v3 + 120) = v7;
  *(_BYTE *)(v3 + 128) = 0;
  *(_QWORD *)(v3 + 136) = v7;
  *(_QWORD *)(v3 + 16) = a1;
  *(_QWORD *)(v3 + 24) = v8;
  swift_beginAccess();
  *(_OWORD *)(v3 + 32) = *(_OWORD *)a2;
  *(_QWORD *)(v3 + 48) = *(_QWORD *)(a2 + 16);
  *(double *)(v3 + 56) = a3;
  *(double *)(v3 + 72) = a3;
  swift_retain();
  v9 = swift_retain();
  v10 = specialized find<A>(_:key:)(v9);
  if (!v10)
  {
    swift_release();
    goto LABEL_7;
  }
  v11 = *(double *)(v10 + 72);
  v12 = *(_BYTE *)(v10 + 80);
  swift_release();
  if ((v12 & 1) != 0)
  {
LABEL_7:
    swift_release();
    swift_release();
    v15 = 0;
    *(_QWORD *)(v3 + 64) = 0;
    v16 = 1;
    goto LABEL_13;
  }
  if (v11 <= 0.0)
  {
    *(_QWORD *)(v3 + 64) = 0;
  }
  else
  {
    v13 = log2(v11 * 240.0);
    v14 = exp2(floor(v13 + 0.01)) * 0.00416666667;
    *(long double *)(v3 + 64) = v14;
    if (v14 >= 0.0166666667)
    {
      swift_release();
      swift_release();
      v15 = 0;
      v16 = 1;
      goto LABEL_13;
    }
  }
  v17 = swift_retain();
  v18 = specialized find<A>(_:key:)(v17);
  if (v18)
  {
    v15 = *(_DWORD *)(v18 + 72);
    v16 = *(_BYTE *)(v18 + 76);
  }
  else
  {
    v15 = 0;
    v16 = 1;
  }
  swift_release();
  swift_release_n();
LABEL_13:
  *(_DWORD *)(v3 + 104) = v15;
  *(_BYTE *)(v3 + 108) = v16;
  return v3;
}

uint64_t specialized AnimatorState.init(animation:interval:at:in:)(uint64_t a1, float a2, float a3, float a4, float a5, double a6)
{
  uint64_t v6;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  char v18;
  long double v19;
  long double v20;
  int v21;
  char v22;
  uint64_t v23;
  uint64_t v24;

  v13 = MEMORY[0x24BEE4AF8];
  v14 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  *(_QWORD *)(v6 + 32) = 0;
  *(_WORD *)(v6 + 92) = 1;
  *(_QWORD *)(v6 + 40) = 0;
  *(_QWORD *)(v6 + 72) = 0;
  *(_QWORD *)(v6 + 80) = 0;
  *(_QWORD *)(v6 + 64) = 0;
  *(_DWORD *)(v6 + 88) = 0;
  *(_QWORD *)(v6 + 96) = v13;
  *(_QWORD *)(v6 + 104) = v13;
  *(_BYTE *)(v6 + 112) = 0;
  *(_QWORD *)(v6 + 120) = v13;
  *(_QWORD *)(v6 + 16) = a1;
  *(_QWORD *)(v6 + 24) = v14;
  swift_beginAccess();
  *(float *)(v6 + 32) = a2;
  *(float *)(v6 + 36) = a3;
  *(float *)(v6 + 40) = a4;
  *(float *)(v6 + 44) = a5;
  *(double *)(v6 + 48) = a6;
  *(double *)(v6 + 64) = a6;
  swift_retain();
  v15 = swift_retain();
  v16 = specialized find<A>(_:key:)(v15);
  if (!v16)
  {
    swift_release();
    goto LABEL_7;
  }
  v17 = *(double *)(v16 + 72);
  v18 = *(_BYTE *)(v16 + 80);
  swift_release();
  if ((v18 & 1) != 0)
  {
LABEL_7:
    swift_release();
    swift_release();
    v21 = 0;
    *(_QWORD *)(v6 + 56) = 0;
    goto LABEL_8;
  }
  if (v17 <= 0.0)
  {
    *(_QWORD *)(v6 + 56) = 0;
  }
  else
  {
    v19 = log2(v17 * 240.0);
    v20 = exp2(floor(v19 + 0.01)) * 0.00416666667;
    *(long double *)(v6 + 56) = v20;
    if (v20 >= 0.0166666667)
    {
      swift_release();
      swift_release();
      v21 = 0;
LABEL_8:
      v22 = 1;
      goto LABEL_14;
    }
  }
  v23 = swift_retain();
  v24 = specialized find<A>(_:key:)(v23);
  if (v24)
  {
    v21 = *(_DWORD *)(v24 + 72);
    v22 = *(_BYTE *)(v24 + 76);
  }
  else
  {
    v21 = 0;
    v22 = 1;
  }
  swift_release();
  swift_release_n();
LABEL_14:
  *(_DWORD *)(v6 + 88) = v21;
  *(_BYTE *)(v6 + 92) = v22;
  return v6;
}

uint64_t specialized AnimatorState.init(animation:interval:at:in:)(uint64_t a1, _OWORD *a2, double a3)
{
  uint64_t v3;
  uint64_t v7;
  unint64_t v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  double v13;
  char v14;
  long double v15;
  long double v16;
  int v17;
  char v18;
  uint64_t v19;
  uint64_t v20;

  v7 = MEMORY[0x24BEE4AF8];
  v8 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  *(_OWORD *)(v3 + 32) = 0u;
  *(_WORD *)(v3 + 188) = 1;
  *(_OWORD *)(v3 + 48) = 0u;
  *(_OWORD *)(v3 + 64) = 0u;
  *(_OWORD *)(v3 + 80) = 0u;
  *(_OWORD *)(v3 + 112) = 0u;
  *(_OWORD *)(v3 + 128) = 0u;
  *(_OWORD *)(v3 + 144) = 0u;
  *(_OWORD *)(v3 + 160) = 0u;
  *(_OWORD *)(v3 + 172) = 0u;
  *(_QWORD *)(v3 + 192) = v7;
  *(_QWORD *)(v3 + 200) = v7;
  *(_BYTE *)(v3 + 208) = 0;
  *(_QWORD *)(v3 + 216) = v7;
  *(_QWORD *)(v3 + 16) = a1;
  *(_QWORD *)(v3 + 24) = v8;
  swift_beginAccess();
  v9 = a2[1];
  *(_OWORD *)(v3 + 32) = *a2;
  *(_OWORD *)(v3 + 48) = v9;
  v10 = a2[3];
  *(_OWORD *)(v3 + 64) = a2[2];
  *(_OWORD *)(v3 + 80) = v10;
  *(double *)(v3 + 96) = a3;
  *(double *)(v3 + 112) = a3;
  swift_retain();
  v11 = swift_retain();
  v12 = specialized find<A>(_:key:)(v11);
  if (!v12)
  {
    swift_release();
    goto LABEL_7;
  }
  v13 = *(double *)(v12 + 72);
  v14 = *(_BYTE *)(v12 + 80);
  swift_release();
  if ((v14 & 1) != 0)
  {
LABEL_7:
    swift_release();
    swift_release();
    v17 = 0;
    *(_QWORD *)(v3 + 104) = 0;
    goto LABEL_8;
  }
  if (v13 <= 0.0)
  {
    *(_QWORD *)(v3 + 104) = 0;
  }
  else
  {
    v15 = log2(v13 * 240.0);
    v16 = exp2(floor(v15 + 0.01)) * 0.00416666667;
    *(long double *)(v3 + 104) = v16;
    if (v16 >= 0.0166666667)
    {
      swift_release();
      swift_release();
      v17 = 0;
LABEL_8:
      v18 = 1;
      goto LABEL_14;
    }
  }
  v19 = swift_retain();
  v20 = specialized find<A>(_:key:)(v19);
  if (v20)
  {
    v17 = *(_DWORD *)(v20 + 72);
    v18 = *(_BYTE *)(v20 + 76);
  }
  else
  {
    v17 = 0;
    v18 = 1;
  }
  swift_release();
  swift_release_n();
LABEL_14:
  *(_DWORD *)(v3 + 184) = v17;
  *(_BYTE *)(v3 + 188) = v18;
  return v3;
}

{
  uint64_t v3;
  uint64_t v7;
  unint64_t v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  double v12;
  char v13;
  long double v14;
  long double v15;
  int v16;
  char v17;
  uint64_t v18;
  uint64_t v19;

  v7 = MEMORY[0x24BEE4AF8];
  v8 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  *(_QWORD *)(v3 + 32) = v7;
  *(_WORD *)(v3 + 124) = 1;
  *(_QWORD *)(v3 + 48) = 0;
  *(_QWORD *)(v3 + 56) = 0;
  *(_QWORD *)(v3 + 40) = v7;
  *(_QWORD *)(v3 + 80) = 0;
  *(_QWORD *)(v3 + 88) = v7;
  *(_QWORD *)(v3 + 104) = 0;
  *(_QWORD *)(v3 + 112) = 0;
  *(_QWORD *)(v3 + 96) = v7;
  *(_DWORD *)(v3 + 120) = 0;
  *(_QWORD *)(v3 + 128) = v7;
  *(_QWORD *)(v3 + 136) = v7;
  *(_BYTE *)(v3 + 144) = 0;
  *(_QWORD *)(v3 + 152) = v7;
  *(_QWORD *)(v3 + 16) = a1;
  *(_QWORD *)(v3 + 24) = v8;
  swift_beginAccess();
  swift_retain();
  outlined retain of Text.Effect.RenderSegmentation.StaticLines((uint64_t)a2);
  v9 = a2[1];
  *(_OWORD *)(v3 + 32) = *a2;
  *(_OWORD *)(v3 + 48) = v9;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(double *)(v3 + 64) = a3;
  *(double *)(v3 + 80) = a3;
  v10 = swift_retain();
  v11 = specialized find<A>(_:key:)(v10);
  if (!v11)
  {
    swift_release();
    goto LABEL_7;
  }
  v12 = *(double *)(v11 + 72);
  v13 = *(_BYTE *)(v11 + 80);
  swift_release();
  if ((v13 & 1) != 0)
  {
LABEL_7:
    swift_release();
    swift_release();
    outlined release of Text.Effect.RenderSegmentation.StaticLines((uint64_t)a2);
    v16 = 0;
    *(_QWORD *)(v3 + 72) = 0;
    v17 = 1;
    goto LABEL_13;
  }
  if (v12 <= 0.0)
  {
    *(_QWORD *)(v3 + 72) = 0;
  }
  else
  {
    v14 = log2(v12 * 240.0);
    v15 = exp2(floor(v14 + 0.01)) * 0.00416666667;
    *(long double *)(v3 + 72) = v15;
    if (v15 >= 0.0166666667)
    {
      swift_release();
      swift_release();
      outlined release of Text.Effect.RenderSegmentation.StaticLines((uint64_t)a2);
      v16 = 0;
      v17 = 1;
      goto LABEL_13;
    }
  }
  v18 = swift_retain();
  v19 = specialized find<A>(_:key:)(v18);
  if (v19)
  {
    v16 = *(_DWORD *)(v19 + 72);
    v17 = *(_BYTE *)(v19 + 76);
  }
  else
  {
    v16 = 0;
    v17 = 1;
  }
  swift_release();
  swift_release_n();
  outlined release of Text.Effect.RenderSegmentation.StaticLines((uint64_t)a2);
LABEL_13:
  *(_DWORD *)(v3 + 120) = v16;
  *(_BYTE *)(v3 + 124) = v17;
  return v3;
}

{
  uint64_t v3;
  uint64_t v7;
  unint64_t v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  double v12;
  char v13;
  long double v14;
  long double v15;
  int v16;
  char v17;
  uint64_t v18;
  uint64_t v19;

  v7 = MEMORY[0x24BEE4AF8];
  v8 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  *(_OWORD *)(v3 + 32) = 0u;
  *(_WORD *)(v3 + 152) = 1;
  *(_OWORD *)(v3 + 48) = 0u;
  *(_QWORD *)(v3 + 64) = v7;
  *(_BYTE *)(v3 + 72) = 0;
  *(_OWORD *)(v3 + 96) = 0u;
  *(_OWORD *)(v3 + 112) = 0u;
  *(_QWORD *)(v3 + 128) = 0;
  *(_QWORD *)(v3 + 136) = v7;
  *(_BYTE *)(v3 + 144) = 0;
  *(_DWORD *)(v3 + 148) = 0;
  *(_QWORD *)(v3 + 160) = v7;
  *(_QWORD *)(v3 + 168) = v7;
  *(_BYTE *)(v3 + 176) = 0;
  *(_QWORD *)(v3 + 184) = v7;
  *(_QWORD *)(v3 + 16) = a1;
  *(_QWORD *)(v3 + 24) = v8;
  swift_beginAccess();
  swift_retain();
  outlined retain of AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>, ResolvedGradientVector>((uint64_t)a2);
  v9 = a2[1];
  *(_OWORD *)(v3 + 32) = *a2;
  *(_OWORD *)(v3 + 48) = v9;
  *(_OWORD *)(v3 + 57) = *(_OWORD *)((char *)a2 + 25);
  swift_bridgeObjectRelease();
  *(double *)(v3 + 80) = a3;
  *(double *)(v3 + 96) = a3;
  v10 = swift_retain();
  v11 = specialized find<A>(_:key:)(v10);
  if (!v11)
  {
    swift_release();
    goto LABEL_7;
  }
  v12 = *(double *)(v11 + 72);
  v13 = *(_BYTE *)(v11 + 80);
  swift_release();
  if ((v13 & 1) != 0)
  {
LABEL_7:
    swift_release();
    swift_release();
    outlined release of AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>, ResolvedGradientVector>((uint64_t)a2);
    v16 = 0;
    *(_QWORD *)(v3 + 88) = 0;
    v17 = 1;
    goto LABEL_13;
  }
  if (v12 <= 0.0)
  {
    *(_QWORD *)(v3 + 88) = 0;
  }
  else
  {
    v14 = log2(v12 * 240.0);
    v15 = exp2(floor(v14 + 0.01)) * 0.00416666667;
    *(long double *)(v3 + 88) = v15;
    if (v15 >= 0.0166666667)
    {
      swift_release();
      swift_release();
      outlined release of AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>, ResolvedGradientVector>((uint64_t)a2);
      v16 = 0;
      v17 = 1;
      goto LABEL_13;
    }
  }
  v18 = swift_retain();
  v19 = specialized find<A>(_:key:)(v18);
  if (v19)
  {
    v16 = *(_DWORD *)(v19 + 72);
    v17 = *(_BYTE *)(v19 + 76);
  }
  else
  {
    v16 = 0;
    v17 = 1;
  }
  swift_release();
  swift_release_n();
  outlined release of AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>, ResolvedGradientVector>((uint64_t)a2);
LABEL_13:
  *(_DWORD *)(v3 + 148) = v16;
  *(_BYTE *)(v3 + 152) = v17;
  return v3;
}

uint64_t specialized AnimatorState.init(animation:interval:at:in:)(uint64_t a1, double a2, double a3, double a4, double a5)
{
  uint64_t v5;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  char v16;
  long double v17;
  long double v18;
  int v19;
  char v20;
  uint64_t v21;
  uint64_t v22;

  v11 = MEMORY[0x24BEE4AF8];
  v12 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  *(_QWORD *)(v5 + 32) = 0;
  *(_WORD *)(v5 + 108) = 1;
  *(_QWORD *)(v5 + 40) = 0;
  *(_QWORD *)(v5 + 48) = 0;
  *(_OWORD *)(v5 + 72) = 0u;
  *(_OWORD *)(v5 + 88) = 0u;
  *(_DWORD *)(v5 + 104) = 0;
  *(_QWORD *)(v5 + 112) = v11;
  *(_QWORD *)(v5 + 120) = v11;
  *(_BYTE *)(v5 + 128) = 0;
  *(_QWORD *)(v5 + 136) = v11;
  *(_QWORD *)(v5 + 16) = a1;
  *(_QWORD *)(v5 + 24) = v12;
  swift_beginAccess();
  *(double *)(v5 + 32) = a2;
  *(double *)(v5 + 40) = a3;
  *(double *)(v5 + 48) = a4;
  *(double *)(v5 + 56) = a5;
  *(double *)(v5 + 72) = a5;
  swift_retain();
  v13 = swift_retain();
  v14 = specialized find<A>(_:key:)(v13);
  if (!v14)
  {
    swift_release();
    goto LABEL_7;
  }
  v15 = *(double *)(v14 + 72);
  v16 = *(_BYTE *)(v14 + 80);
  swift_release();
  if ((v16 & 1) != 0)
  {
LABEL_7:
    swift_release();
    swift_release();
    v19 = 0;
    *(_QWORD *)(v5 + 64) = 0;
    goto LABEL_8;
  }
  if (v15 <= 0.0)
  {
    *(_QWORD *)(v5 + 64) = 0;
  }
  else
  {
    v17 = log2(v15 * 240.0);
    v18 = exp2(floor(v17 + 0.01)) * 0.00416666667;
    *(long double *)(v5 + 64) = v18;
    if (v18 >= 0.0166666667)
    {
      swift_release();
      swift_release();
      v19 = 0;
LABEL_8:
      v20 = 1;
      goto LABEL_14;
    }
  }
  v21 = swift_retain();
  v22 = specialized find<A>(_:key:)(v21);
  if (v22)
  {
    v19 = *(_DWORD *)(v22 + 72);
    v20 = *(_BYTE *)(v22 + 76);
  }
  else
  {
    v19 = 0;
    v20 = 1;
  }
  swift_release();
  swift_release_n();
LABEL_14:
  *(_DWORD *)(v5 + 104) = v19;
  *(_BYTE *)(v5 + 108) = v20;
  return v5;
}

uint64_t specialized AnimatorState.init(animation:interval:at:in:)(uint64_t a1, double a2, double a3)
{
  uint64_t v3;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  char v12;
  long double v13;
  long double v14;
  int v15;
  char v16;
  uint64_t v17;
  uint64_t v18;

  v7 = MEMORY[0x24BEE4AF8];
  v8 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  *(_QWORD *)(v3 + 32) = 0;
  *(_QWORD *)(v3 + 56) = 0;
  *(_QWORD *)(v3 + 64) = 0;
  *(_DWORD *)(v3 + 72) = 0;
  *(_WORD *)(v3 + 76) = 1;
  *(_QWORD *)(v3 + 80) = v7;
  *(_QWORD *)(v3 + 88) = v7;
  *(_BYTE *)(v3 + 96) = 0;
  *(_QWORD *)(v3 + 104) = v7;
  *(_QWORD *)(v3 + 16) = a1;
  *(_QWORD *)(v3 + 24) = v8;
  swift_beginAccess();
  *(double *)(v3 + 32) = a2;
  *(double *)(v3 + 40) = a3;
  *(double *)(v3 + 56) = a3;
  swift_retain();
  v9 = swift_retain();
  v10 = specialized find<A>(_:key:)(v9);
  if (!v10)
  {
    swift_release();
    goto LABEL_7;
  }
  v11 = *(double *)(v10 + 72);
  v12 = *(_BYTE *)(v10 + 80);
  swift_release();
  if ((v12 & 1) != 0)
  {
LABEL_7:
    swift_release();
    swift_release();
    v15 = 0;
    *(_QWORD *)(v3 + 48) = 0;
    v16 = 1;
    goto LABEL_13;
  }
  if (v11 <= 0.0)
  {
    *(_QWORD *)(v3 + 48) = 0;
  }
  else
  {
    v13 = log2(v11 * 240.0);
    v14 = exp2(floor(v13 + 0.01)) * 0.00416666667;
    *(long double *)(v3 + 48) = v14;
    if (v14 >= 0.0166666667)
    {
      swift_release();
      swift_release();
      v15 = 0;
      v16 = 1;
      goto LABEL_13;
    }
  }
  v17 = swift_retain();
  v18 = specialized find<A>(_:key:)(v17);
  if (v18)
  {
    v15 = *(_DWORD *)(v18 + 72);
    v16 = *(_BYTE *)(v18 + 76);
  }
  else
  {
    v15 = 0;
    v16 = 1;
  }
  swift_release();
  swift_release_n();
LABEL_13:
  *(_DWORD *)(v3 + 72) = v15;
  *(_BYTE *)(v3 + 76) = v16;
  return v3;
}

uint64_t specialized AnimatorState.init(animation:interval:at:in:)(uint64_t a1, double a2, double a3, double a4, double a5, double a6)
{
  uint64_t v6;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  char v18;
  long double v19;
  long double v20;
  int v21;
  char v22;
  uint64_t v23;
  uint64_t v24;

  v13 = MEMORY[0x24BEE4AF8];
  v14 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  *(_OWORD *)(v6 + 32) = 0u;
  *(_WORD *)(v6 + 124) = 1;
  *(_OWORD *)(v6 + 48) = 0u;
  *(_OWORD *)(v6 + 80) = 0u;
  *(_OWORD *)(v6 + 96) = 0u;
  *(_OWORD *)(v6 + 108) = 0u;
  *(_QWORD *)(v6 + 128) = v13;
  *(_QWORD *)(v6 + 136) = v13;
  *(_BYTE *)(v6 + 144) = 0;
  *(_QWORD *)(v6 + 152) = v13;
  *(_QWORD *)(v6 + 16) = a1;
  *(_QWORD *)(v6 + 24) = v14;
  swift_beginAccess();
  *(double *)(v6 + 32) = a2;
  *(double *)(v6 + 40) = a3;
  *(double *)(v6 + 48) = a4;
  *(double *)(v6 + 56) = a5;
  *(double *)(v6 + 64) = a6;
  *(double *)(v6 + 80) = a6;
  swift_retain();
  v15 = swift_retain();
  v16 = specialized find<A>(_:key:)(v15);
  if (!v16)
  {
    swift_release();
    goto LABEL_7;
  }
  v17 = *(double *)(v16 + 72);
  v18 = *(_BYTE *)(v16 + 80);
  swift_release();
  if ((v18 & 1) != 0)
  {
LABEL_7:
    swift_release();
    swift_release();
    v21 = 0;
    *(_QWORD *)(v6 + 72) = 0;
    v22 = 1;
    goto LABEL_13;
  }
  if (v17 <= 0.0)
  {
    *(_QWORD *)(v6 + 72) = 0;
  }
  else
  {
    v19 = log2(v17 * 240.0);
    v20 = exp2(floor(v19 + 0.01)) * 0.00416666667;
    *(long double *)(v6 + 72) = v20;
    if (v20 >= 0.0166666667)
    {
      swift_release();
      swift_release();
      v21 = 0;
      v22 = 1;
      goto LABEL_13;
    }
  }
  v23 = swift_retain();
  v24 = specialized find<A>(_:key:)(v23);
  if (v24)
  {
    v21 = *(_DWORD *)(v24 + 72);
    v22 = *(_BYTE *)(v24 + 76);
  }
  else
  {
    v21 = 0;
    v22 = 1;
  }
  swift_release();
  swift_release_n();
LABEL_13:
  *(_DWORD *)(v6 + 120) = v21;
  *(_BYTE *)(v6 + 124) = v22;
  return v6;
}

uint64_t specialized AnimatorState.init(animation:interval:at:in:)(uint64_t a1, double a2, double a3, double a4)
{
  uint64_t v4;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  double v13;
  char v14;
  long double v15;
  long double v16;
  int v17;
  char v18;
  uint64_t v19;
  uint64_t v20;

  v9 = MEMORY[0x24BEE4AF8];
  v10 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  *(_QWORD *)(v4 + 32) = 0;
  *(_WORD *)(v4 + 92) = 1;
  *(_QWORD *)(v4 + 40) = 0;
  *(_QWORD *)(v4 + 72) = 0;
  *(_QWORD *)(v4 + 80) = 0;
  *(_QWORD *)(v4 + 64) = 0;
  *(_DWORD *)(v4 + 88) = 0;
  *(_QWORD *)(v4 + 96) = v9;
  *(_QWORD *)(v4 + 104) = v9;
  *(_BYTE *)(v4 + 112) = 0;
  *(_QWORD *)(v4 + 120) = v9;
  *(_QWORD *)(v4 + 16) = a1;
  *(_QWORD *)(v4 + 24) = v10;
  swift_beginAccess();
  *(double *)(v4 + 32) = a2;
  *(double *)(v4 + 40) = a3;
  *(double *)(v4 + 48) = a4;
  *(double *)(v4 + 64) = a4;
  swift_retain();
  v11 = swift_retain();
  v12 = specialized find<A>(_:key:)(v11);
  if (!v12)
  {
    swift_release();
    goto LABEL_7;
  }
  v13 = *(double *)(v12 + 72);
  v14 = *(_BYTE *)(v12 + 80);
  swift_release();
  if ((v14 & 1) != 0)
  {
LABEL_7:
    swift_release();
    swift_release();
    v17 = 0;
    *(_QWORD *)(v4 + 56) = 0;
    v18 = 1;
    goto LABEL_13;
  }
  if (v13 <= 0.0)
  {
    *(_QWORD *)(v4 + 56) = 0;
  }
  else
  {
    v15 = log2(v13 * 240.0);
    v16 = exp2(floor(v15 + 0.01)) * 0.00416666667;
    *(long double *)(v4 + 56) = v16;
    if (v16 >= 0.0166666667)
    {
      swift_release();
      swift_release();
      v17 = 0;
      v18 = 1;
      goto LABEL_13;
    }
  }
  v19 = swift_retain();
  v20 = specialized find<A>(_:key:)(v19);
  if (v20)
  {
    v17 = *(_DWORD *)(v20 + 72);
    v18 = *(_BYTE *)(v20 + 76);
  }
  else
  {
    v17 = 0;
    v18 = 1;
  }
  swift_release();
  swift_release_n();
LABEL_13:
  *(_DWORD *)(v4 + 88) = v17;
  *(_BYTE *)(v4 + 92) = v18;
  return v4;
}

uint64_t specialized AnimatorState.init(animation:interval:at:in:)(uint64_t a1, _OWORD *a2, double a3, uint64_t a4, void (*a5)(_OWORD *), void (*a6)(_OWORD *))
{
  uint64_t v6;
  uint64_t v12;
  unint64_t v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  char v18;
  long double v19;
  long double v20;
  int v21;
  char v22;
  uint64_t v23;
  uint64_t v24;

  v12 = MEMORY[0x24BEE4AF8];
  v13 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  *(_QWORD *)(v6 + 32) = 0;
  *(_WORD *)(v6 + 156) = 1;
  *(_QWORD *)(v6 + 40) = 0;
  *(_QWORD *)(v6 + 48) = v12;
  *(_BYTE *)(v6 + 56) = 0;
  *(_QWORD *)(v6 + 64) = 0;
  *(_QWORD *)(v6 + 72) = 0;
  *(_QWORD *)(v6 + 96) = 0;
  *(_QWORD *)(v6 + 104) = 0;
  *(_QWORD *)(v6 + 112) = 0;
  *(_QWORD *)(v6 + 120) = v12;
  *(_BYTE *)(v6 + 128) = 0;
  *(_QWORD *)(v6 + 136) = 0;
  *(_QWORD *)(v6 + 144) = 0;
  *(_DWORD *)(v6 + 152) = 0;
  *(_QWORD *)(v6 + 160) = v12;
  *(_QWORD *)(v6 + 168) = v12;
  *(_BYTE *)(v6 + 176) = 0;
  *(_QWORD *)(v6 + 184) = v12;
  *(_QWORD *)(v6 + 16) = a1;
  *(_QWORD *)(v6 + 24) = v13;
  swift_beginAccess();
  swift_retain();
  a5(a2);
  v14 = a2[1];
  *(_OWORD *)(v6 + 32) = *a2;
  *(_OWORD *)(v6 + 48) = v14;
  *(_OWORD *)(v6 + 64) = a2[2];
  swift_bridgeObjectRelease();
  *(double *)(v6 + 80) = a3;
  *(double *)(v6 + 96) = a3;
  v15 = swift_retain();
  v16 = specialized find<A>(_:key:)(v15);
  if (!v16)
  {
    swift_release();
    goto LABEL_7;
  }
  v17 = *(double *)(v16 + 72);
  v18 = *(_BYTE *)(v16 + 80);
  swift_release();
  if ((v18 & 1) != 0)
  {
LABEL_7:
    swift_release();
    swift_release();
    a6(a2);
    v21 = 0;
    *(_QWORD *)(v6 + 88) = 0;
    v22 = 1;
    goto LABEL_13;
  }
  if (v17 <= 0.0)
  {
    *(_QWORD *)(v6 + 88) = 0;
  }
  else
  {
    v19 = log2(v17 * 240.0);
    v20 = exp2(floor(v19 + 0.01)) * 0.00416666667;
    *(long double *)(v6 + 88) = v20;
    if (v20 >= 0.0166666667)
    {
      swift_release();
      swift_release();
      a6(a2);
      v21 = 0;
      v22 = 1;
      goto LABEL_13;
    }
  }
  v23 = swift_retain();
  v24 = specialized find<A>(_:key:)(v23);
  if (v24)
  {
    v21 = *(_DWORD *)(v24 + 72);
    v22 = *(_BYTE *)(v24 + 76);
  }
  else
  {
    v21 = 0;
    v22 = 1;
  }
  swift_release();
  swift_release_n();
  a6(a2);
LABEL_13:
  *(_DWORD *)(v6 + 152) = v21;
  *(_BYTE *)(v6 + 156) = v22;
  return v6;
}

uint64_t specialized AnimatorState.init(animation:interval:at:in:)(uint64_t a1, uint64_t a2, char a3, double a4)
{
  uint64_t v4;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  double v13;
  char v14;
  int v15;
  char v16;
  long double v17;
  long double v18;
  uint64_t v19;
  uint64_t v20;

  v9 = MEMORY[0x24BEE4AF8];
  v10 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  *(_QWORD *)(v4 + 32) = v9;
  *(_WORD *)(v4 + 88) = 1;
  *(_BYTE *)(v4 + 40) = 0;
  *(_QWORD *)(v4 + 64) = 0;
  *(_QWORD *)(v4 + 72) = v9;
  *(_BYTE *)(v4 + 80) = 0;
  *(_DWORD *)(v4 + 84) = 0;
  *(_QWORD *)(v4 + 96) = v9;
  *(_QWORD *)(v4 + 104) = v9;
  *(_BYTE *)(v4 + 112) = 0;
  *(_QWORD *)(v4 + 120) = v9;
  *(_QWORD *)(v4 + 16) = a1;
  *(_QWORD *)(v4 + 24) = v10;
  swift_beginAccess();
  *(_QWORD *)(v4 + 32) = a2;
  *(_BYTE *)(v4 + 40) = a3;
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(double *)(v4 + 48) = a4;
  *(double *)(v4 + 64) = a4;
  v11 = swift_retain();
  v12 = specialized find<A>(_:key:)(v11);
  if (!v12)
  {
    swift_bridgeObjectRelease();
    swift_release();
    goto LABEL_5;
  }
  v13 = *(double *)(v12 + 72);
  v14 = *(_BYTE *)(v12 + 80);
  swift_release();
  if ((v14 & 1) != 0)
  {
    swift_bridgeObjectRelease();
LABEL_5:
    swift_release();
    swift_release();
    v15 = 0;
    *(_QWORD *)(v4 + 56) = 0;
    v16 = 1;
    goto LABEL_14;
  }
  if (v13 <= 0.0)
  {
    *(_QWORD *)(v4 + 56) = 0;
  }
  else
  {
    v17 = log2(v13 * 240.0);
    v18 = exp2(floor(v17 + 0.01)) * 0.00416666667;
    *(long double *)(v4 + 56) = v18;
    if (v18 >= 0.0166666667)
    {
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
      v15 = 0;
      v16 = 1;
      goto LABEL_14;
    }
  }
  v19 = swift_retain();
  v20 = specialized find<A>(_:key:)(v19);
  if (v20)
  {
    v15 = *(_DWORD *)(v20 + 72);
    v16 = *(_BYTE *)(v20 + 76);
  }
  else
  {
    v15 = 0;
    v16 = 1;
  }
  swift_bridgeObjectRelease();
  swift_release();
  swift_release_n();
LABEL_14:
  *(_DWORD *)(v4 + 84) = v15;
  *(_BYTE *)(v4 + 88) = v16;
  return v4;
}

uint64_t specialized AnimatorState.init(animation:interval:at:in:)(uint64_t a1, _QWORD *a2, double a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double v12;
  char v13;
  long double v14;
  long double v15;
  int v16;
  char v17;
  uint64_t v18;
  uint64_t v19;

  v7 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v3 + 24) = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  v8 = type metadata accessor for ZeroVTable();
  v9 = MEMORY[0x24BEE4AE0];
  *(_QWORD *)(v3 + 32) = v8;
  v9 += 8;
  *(_QWORD *)(v3 + 64) = v9;
  *(_QWORD *)(v3 + 128) = v9;
  *(_QWORD *)(v3 + 88) = 0;
  *(_QWORD *)(v3 + 96) = v8;
  *(_DWORD *)(v3 + 136) = 0;
  *(_WORD *)(v3 + 140) = 1;
  *(_QWORD *)(v3 + 144) = v7;
  *(_QWORD *)(v3 + 152) = v7;
  *(_BYTE *)(v3 + 160) = 0;
  *(_QWORD *)(v3 + 168) = v7;
  *(_QWORD *)(v3 + 16) = a1;
  swift_beginAccess();
  swift_retain();
  outlined assign with copy of _AnyAnimatableData(a2, (_QWORD *)(v3 + 32));
  swift_endAccess();
  *(double *)(v3 + 72) = a3;
  *(double *)(v3 + 88) = a3;
  v10 = swift_retain();
  v11 = specialized find<A>(_:key:)(v10);
  if (v11)
  {
    v12 = *(double *)(v11 + 72);
    v13 = *(_BYTE *)(v11 + 80);
    swift_release();
    if ((v13 & 1) == 0)
    {
      if (v12 <= 0.0)
      {
        *(_QWORD *)(v3 + 80) = 0;
      }
      else
      {
        v14 = log2(v12 * 240.0);
        v15 = exp2(floor(v14 + 0.01)) * 0.00416666667;
        *(long double *)(v3 + 80) = v15;
        if (v15 >= 0.0166666667)
        {
          v16 = 0;
          v17 = 1;
LABEL_13:
          swift_release();
          swift_release();
          outlined destroy of _AnyAnimatableData((uint64_t)a2);
          goto LABEL_14;
        }
      }
      v18 = swift_retain();
      v19 = specialized find<A>(_:key:)(v18);
      if (v19)
      {
        v16 = *(_DWORD *)(v19 + 72);
        v17 = *(_BYTE *)(v19 + 76);
      }
      else
      {
        v16 = 0;
        v17 = 1;
      }
      swift_release();
      goto LABEL_13;
    }
  }
  else
  {
    swift_release();
  }
  swift_release();
  swift_release();
  outlined destroy of _AnyAnimatableData((uint64_t)a2);
  v16 = 0;
  *(_QWORD *)(v3 + 80) = 0;
  v17 = 1;
LABEL_14:
  *(_DWORD *)(v3 + 136) = v16;
  *(_BYTE *)(v3 + 140) = v17;
  return v3;
}

_QWORD *AnimatorState.init(animation:interval:at:in:)(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(char *, uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  double v22;
  char v23;
  long double v24;
  long double v25;
  int v26;
  char v27;
  uint64_t v28;
  uint64_t v29;

  v4 = v3;
  v7 = *v3;
  v8 = *a3;
  v9 = v3 + 3;
  v10 = *(_QWORD *)(*v3 + 80);
  v11 = *(_QWORD *)(v7 + 88);
  AnimationState.init()(v9);
  v12 = (char *)v4 + *(_QWORD *)(*v4 + 112);
  dispatch thunk of IteratorProtocol.next()();
  v13 = *(_QWORD *)(*v4 + 136);
  *(_QWORD *)((char *)v4 + v13) = 0;
  dispatch thunk of IteratorProtocol.next()();
  v14 = (char *)v4 + *(_QWORD *)(*v4 + 152);
  *(_DWORD *)v14 = 0;
  v14[4] = 1;
  *((_BYTE *)v4 + *(_QWORD *)(*v4 + 160)) = 0;
  v15 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)((char *)v4 + *(_QWORD *)(*v4 + 168)) = MEMORY[0x24BEE4AF8];
  *(_QWORD *)((char *)v4 + *(_QWORD *)(*v4 + 176)) = v15;
  *((_BYTE *)v4 + *(_QWORD *)(*v4 + 184)) = 0;
  v16 = *(_QWORD *)(*v4 + 192);
  type metadata accessor for AnimatorState.Fork(0, v10, v11, v17);
  *(_QWORD *)((char *)v4 + v16) = Array.init()();
  v4[2] = a1;
  swift_beginAccess();
  v18 = *(_QWORD *)(v10 - 8);
  v19 = *(void (**)(char *, uint64_t, uint64_t))(v18 + 24);
  swift_retain();
  v19(v12, a2, v10);
  swift_endAccess();
  *(_QWORD *)((char *)v4 + *(_QWORD *)(*v4 + 120)) = v8;
  *(_QWORD *)((char *)v4 + v13) = v8;
  v20 = swift_retain();
  v21 = specialized find<A>(_:key:)(v20);
  if (v21)
  {
    v22 = *(double *)(v21 + 72);
    v23 = *(_BYTE *)(v21 + 80);
    swift_release();
    if ((v23 & 1) == 0)
    {
      if (v22 <= 0.0)
      {
        *(_QWORD *)((char *)v4 + *(_QWORD *)(*v4 + 128)) = 0;
      }
      else
      {
        v24 = log2(v22 * 240.0);
        v25 = exp2(floor(v24 + 0.01)) * 0.00416666667;
        *(long double *)((char *)v4 + *(_QWORD *)(*v4 + 128)) = v25;
        if (v25 >= 0.0166666667)
        {
          v26 = 0;
          v27 = 1;
LABEL_13:
          swift_release();
          swift_release();
          (*(void (**)(uint64_t, uint64_t))(v18 + 8))(a2, v10);
          goto LABEL_14;
        }
      }
      v28 = swift_retain();
      v29 = specialized find<A>(_:key:)(v28);
      if (v29)
      {
        v26 = *(_DWORD *)(v29 + 72);
        v27 = *(_BYTE *)(v29 + 76);
      }
      else
      {
        v26 = 0;
        v27 = 1;
      }
      swift_release();
      goto LABEL_13;
    }
  }
  else
  {
    swift_release();
  }
  swift_release();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v18 + 8))(a2, v10);
  v26 = 0;
  *(_QWORD *)((char *)v4 + *(_QWORD *)(*v4 + 128)) = 0;
  v27 = 1;
LABEL_14:
  *(_DWORD *)v14 = v26;
  v14[4] = v27;
  return v4;
}

uint64_t specialized combineAnimation<A>(into:state:value:elapsed:newAnimation:newValue:)(uint64_t *a1, unint64_t *a2, _QWORD *a3, uint64_t a4, uint64_t a5, double a6)
{
  unint64_t v6;
  uint64_t *v10;
  _QWORD *v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned __int8 *v18;
  unsigned int v19;
  unsigned int v20;
  unsigned __int8 *v21;
  unsigned int v22;
  unsigned int v23;
  _BOOL4 v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  float v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v43;
  unint64_t v44;
  uint64_t result;
  uint64_t v46;
  _QWORD *v47;
  unsigned __int8 *v48;
  unsigned int v49;
  unsigned int v50;
  unsigned __int8 *v51;
  unsigned int v52;
  unsigned int v53;
  _BOOL4 v55;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  float v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  uint64_t v76;
  _QWORD *v77;
  unint64_t v78;
  unint64_t v79;
  _QWORD *v80;
  char v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t *v88;
  unint64_t *v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unsigned int v99;
  char v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  unint64_t v109;
  int64_t v110;
  int64_t v111;
  _QWORD *v112;
  uint64_t v113;
  int8x16_t v115;
  uint64_t v116;
  unint64_t v117;
  unint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  char v124;
  unint64_t v125;
  _OWORD v126[2];

  v10 = a1;
  v11 = (_QWORD *)*a1;
  type metadata accessor for FontBox<Font.SystemProvider>(0, (unint64_t *)&lazy cache variable for type metadata for AnimationBox<DefaultCombiningAnimation>, (uint64_t (*)(void))lazy protocol witness table accessor for type DefaultCombiningAnimation and conformance DefaultCombiningAnimation, (uint64_t)&type metadata for DefaultCombiningAnimation, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimationBox);
  v12 = swift_dynamicCastClass();
  v90 = a2;
  v88 = v10;
  if (!v12)
  {
    v35 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
    v36 = *a2;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v37 = swift_bridgeObjectRetain();
    v11 = (_QWORD *)specialized AnimationState.subscript.getter(v37, (uint64_t)&lazy cache variable for type metadata for CombinedAnimationState<_ShapeStyle_Pack.AnimatableData>, (uint64_t)lazy protocol witness table accessor for type _ShapeStyle_Pack.AnimatableData and conformance _ShapeStyle_Pack.AnimatableData, (uint64_t)&type metadata for _ShapeStyle_Pack.AnimatableData, (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t)))type metadata accessor for FontBox<Font.SystemProvider>);
    swift_bridgeObjectRelease();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v11[2] + 1, 1, v11);
    v13 = v11[2];
    v38 = v11[3];
    if (v13 >= v38 >> 1)
      v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v38 > 1), v13 + 1, 1, v11);
    v11[2] = v13 + 1;
    v39 = &v11[2 * v13];
    v39[4] = a3;
    v39[5] = v36;
    type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for CombinedAnimationState<_ShapeStyle_Pack.AnimatableData>, (uint64_t (*)(void))lazy protocol witness table accessor for type _ShapeStyle_Pack.AnimatableData and conformance _ShapeStyle_Pack.AnimatableData, (uint64_t)&type metadata for _ShapeStyle_Pack.AnimatableData, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for CombinedAnimationState);
    v41 = v40;
    v117 = v40;
    v115.i64[0] = (uint64_t)v11;
    outlined init with take of Any(&v115, v126);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v125 = v35;
    v10 = (uint64_t *)&v125;
    v86 = v41;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v126, v41, isUniquelyReferenced_nonNull_native);
    v43 = v125;
    swift_bridgeObjectRelease();
    *(_QWORD *)&v126[0] = a3;
    v6 = *(_QWORD *)(a5 + 16);
    v87 = v43;
    if (v6)
    {
      v111 = a3[2];
      if (v111)
      {
        swift_bridgeObjectRetain();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          goto LABEL_78;
        goto LABEL_34;
      }
      swift_bridgeObjectRetain();
      a3 = (_QWORD *)a5;
    }
    else
    {
      swift_bridgeObjectRetain();
    }
LABEL_67:
    v75 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
    v76 = swift_bridgeObjectRetain();
    v77 = (_QWORD *)specialized AnimationState.subscript.getter(v76, (uint64_t)&lazy cache variable for type metadata for CombinedAnimationState<_ShapeStyle_Pack.AnimatableData>, (uint64_t)lazy protocol witness table accessor for type _ShapeStyle_Pack.AnimatableData and conformance _ShapeStyle_Pack.AnimatableData, (uint64_t)&type metadata for _ShapeStyle_Pack.AnimatableData, (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t)))type metadata accessor for FontBox<Font.SystemProvider>);
    swift_bridgeObjectRelease();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v77 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v77[2] + 1, 1, v77);
    v79 = v77[2];
    v78 = v77[3];
    if (v79 >= v78 >> 1)
      v77 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v78 > 1), v79 + 1, 1, v77);
    v77[2] = v79 + 1;
    v80 = &v77[2 * v79];
    v80[4] = a3;
    v80[5] = v75;
    v117 = v86;
    v115.i64[0] = (uint64_t)v77;
    outlined init with take of Any(&v115, v126);
    v81 = swift_isUniquelyReferenced_nonNull_native();
    v125 = v87;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v126, v86, v81);
    v82 = v125;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *a2 = v82;
    v83 = *v88;
    swift_retain();
    v84 = specialized DefaultCombiningAnimation.init(first:firstElapsed:second:)(v83, a4, a6);
    v85 = swift_allocObject();
    *(_QWORD *)(v85 + 16) = v84;
    *v88 = v85;
    return swift_bridgeObjectRelease();
  }
  v13 = *(_QWORD *)(v12 + 16);
  swift_bridgeObjectRetain();
  swift_release();
  *(_QWORD *)&v126[0] = a3;
  v14 = *(_QWORD *)(a5 + 16);
  if (!v14)
  {
    swift_bridgeObjectRetain();
    goto LABEL_57;
  }
  v110 = a3[2];
  if (!v110)
  {
    swift_bridgeObjectRetain();
    a3 = (_QWORD *)a5;
LABEL_57:
    v10 = (uint64_t *)specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
    v67 = swift_bridgeObjectRetain();
    v11 = (_QWORD *)specialized AnimationState.subscript.getter(v67, (uint64_t)&lazy cache variable for type metadata for CombinedAnimationState<_ShapeStyle_Pack.AnimatableData>, (uint64_t)lazy protocol witness table accessor for type _ShapeStyle_Pack.AnimatableData and conformance _ShapeStyle_Pack.AnimatableData, (uint64_t)&type metadata for _ShapeStyle_Pack.AnimatableData, (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t)))type metadata accessor for FontBox<Font.SystemProvider>);
    swift_bridgeObjectRelease();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      goto LABEL_76;
    goto LABEL_58;
  }
  swift_bridgeObjectRetain();
  v87 = v13;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    a3 = specialized _ArrayBuffer._consumeAndCreateNew()(a3);
  v15 = 0;
  v16 = 0;
  v17 = a5 + 32;
  v112 = a3 + 4;
  v91 = a5 + 32;
  v93 = v14;
  while ((unint64_t)v16 < a3[2])
  {
    if (v15 >= v14)
      goto LABEL_73;
    v18 = (unsigned __int8 *)&v112[14 * v16];
    v19 = *v18;
    v20 = v18[1];
    v21 = (unsigned __int8 *)(v17 + 112 * v15);
    v22 = *v21;
    v23 = v21[1];
    if (v19 == v22 && v20 == v23)
    {
      v27 = v17 + 112 * v15;
      v111 = v16;
      v28 = *(_QWORD *)(v27 + 16);
      v30 = *(_QWORD *)(v27 + 24);
      v29 = *(_QWORD *)(v27 + 32);
      v13 = *(_QWORD *)(v27 + 40);
      v31 = *(_QWORD *)(v27 + 48);
      v32 = *(_QWORD *)(v27 + 56);
      a5 = *(_QWORD *)(v27 + 64);
      v95 = *(_QWORD *)(v27 + 72);
      v97 = *(_QWORD *)(v27 + 80);
      v99 = *(unsigned __int8 *)(v27 + 88);
      v33 = *(float *)(v27 + 96);
      v34 = *(_QWORD *)(v27 + 104);
      v104 = v28;
      v106 = *(_QWORD *)(v27 + 8);
      v101 = v32;
      v103 = v29;
      v108 = v15;
      outlined copy of _ShapeStyle_Pack.Fill.AnimatableData(v106, v28, v30, v29, v13, v31, v32, a5, v95, v97, *(_BYTE *)(v27 + 88));
      a2 = &v112[14 * v111];
      swift_bridgeObjectRetain();
      v115.i64[0] = v106;
      v115.i64[1] = v28;
      v116 = v30;
      v117 = v29;
      v118 = v13;
      v119 = v31;
      v120 = v32;
      v121 = a5;
      v10 = (uint64_t *)v97;
      v122 = v95;
      v123 = v97;
      v6 = v99;
      v124 = v99;
      specialized static _ShapeStyle_Pack.Fill.AnimatableData.+= infix(_:_:)((__int128 *)(a2 + 1), &v115);
      *((float *)a2 + 24) = v33 + *((float *)a2 + 24);
      v11 = a2 + 13;
      swift_bridgeObjectRetain();
      specialized static AnimatableArray.+= infix(_:_:)((uint64_t)(a2 + 13), v34);
      swift_bridgeObjectRelease();
      v14 = v93;
      outlined consume of _ShapeStyle_Pack.Fill.AnimatableData(v106, v104, v30, v103, v13, v31, v101, a5, v95, v97, v99);
      swift_bridgeObjectRelease();
      v15 = v108;
      v17 = v91;
      v16 = v111 + 1;
    }
    else
    {
      v25 = v20 < v23 && v19 == v22;
      if (v19 < v22 || v25)
      {
        ++v16;
        goto LABEL_23;
      }
    }
    ++v15;
LABEL_23:
    if (v16 >= v110 || (uint64_t)v15 >= (uint64_t)v14)
    {
      *(_QWORD *)&v126[0] = a3;
      if (v110 >= v16)
      {
        specialized Array.replaceSubrange<A>(_:with:)(v16, v110);
        a3 = *(_QWORD **)&v126[0];
        v13 = v87;
        goto LABEL_57;
      }
      __break(1u);
LABEL_78:
      a3 = specialized _ArrayBuffer._consumeAndCreateNew()(a3);
LABEL_34:
      v44 = 0;
      result = 0;
      v46 = a5 + 32;
      v47 = a3 + 4;
      v92 = a5 + 32;
      v94 = v6;
      while (2)
      {
        if ((unint64_t)result >= a3[2])
          goto LABEL_74;
        if (v44 >= v6)
          goto LABEL_75;
        v48 = (unsigned __int8 *)&v47[14 * result];
        v49 = *v48;
        v50 = v48[1];
        v51 = (unsigned __int8 *)(v46 + 112 * v44);
        v52 = *v51;
        v53 = v51[1];
        if (v49 == v52 && v50 == v53)
        {
          v57 = v46 + 112 * v44;
          v113 = result;
          v58 = *(_QWORD *)(v57 + 8);
          v59 = *(_QWORD *)(v57 + 24);
          v13 = *(_QWORD *)(v57 + 32);
          v61 = *(_QWORD *)(v57 + 40);
          v60 = *(_QWORD *)(v57 + 48);
          v62 = *(_QWORD *)(v57 + 56);
          v63 = *(_QWORD *)(v57 + 64);
          v96 = *(_QWORD *)(v57 + 72);
          v98 = *(_QWORD *)(v57 + 80);
          v100 = *(_BYTE *)(v57 + 88);
          v64 = *(float *)(v57 + 96);
          v65 = *(_QWORD *)(v57 + 104);
          v105 = v59;
          v107 = *(_QWORD *)(v57 + 16);
          v102 = v60;
          v109 = v44;
          outlined copy of _ShapeStyle_Pack.Fill.AnimatableData(v58, v107, v59, v13, v61, v60, v62, v63, v96, v98, v100);
          v66 = (uint64_t)&a3[14 * v113 + 4];
          swift_bridgeObjectRetain();
          v115.i64[0] = v58;
          v115.i64[1] = v107;
          v116 = v59;
          v117 = v13;
          v118 = v61;
          v119 = v60;
          v120 = v62;
          v121 = v63;
          v10 = (uint64_t *)v98;
          v122 = v96;
          v123 = v98;
          v124 = v100;
          specialized static _ShapeStyle_Pack.Fill.AnimatableData.+= infix(_:_:)((__int128 *)(v66 + 8), &v115);
          *(float *)(v66 + 96) = v64 + *(float *)(v66 + 96);
          v11 = (_QWORD *)(v66 + 104);
          swift_bridgeObjectRetain();
          specialized static AnimatableArray.+= infix(_:_:)(v66 + 104, v65);
          swift_bridgeObjectRelease();
          v6 = v94;
          outlined consume of _ShapeStyle_Pack.Fill.AnimatableData(v58, v107, v105, v13, v61, v102, v62, v63, v96, v98, v100);
          a2 = v90;
          swift_bridgeObjectRelease();
          v44 = v109;
          v47 = a3 + 4;
          v46 = v92;
          result = v113 + 1;
        }
        else
        {
          v55 = v50 < v53 && v49 == v52;
          if (v49 < v52 || v55)
          {
            ++result;
LABEL_51:
            if (result >= v111 || (uint64_t)v44 >= (uint64_t)v6)
            {
              *(_QWORD *)&v126[0] = a3;
              if (v111 >= result)
              {
                specialized Array.replaceSubrange<A>(_:with:)(result, v111);
                a3 = *(_QWORD **)&v126[0];
                goto LABEL_67;
              }
              __break(1u);
              return result;
            }
            continue;
          }
        }
        break;
      }
      ++v44;
      goto LABEL_51;
    }
  }
  __break(1u);
LABEL_73:
  __break(1u);
LABEL_74:
  __break(1u);
LABEL_75:
  __break(1u);
LABEL_76:
  v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v11[2] + 1, 1, v11);
LABEL_58:
  v69 = v11[2];
  v68 = v11[3];
  if (v69 >= v68 >> 1)
    v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v68 > 1), v69 + 1, 1, v11);
  v11[2] = v69 + 1;
  v70 = &v11[2 * v69];
  v70[4] = a3;
  v70[5] = v10;
  type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for CombinedAnimationState<_ShapeStyle_Pack.AnimatableData>, (uint64_t (*)(void))lazy protocol witness table accessor for type _ShapeStyle_Pack.AnimatableData and conformance _ShapeStyle_Pack.AnimatableData, (uint64_t)&type metadata for _ShapeStyle_Pack.AnimatableData, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for CombinedAnimationState);
  v117 = v71;
  v115.i64[0] = (uint64_t)v11;
  specialized Dictionary.subscript.setter((uint64_t)&v115, v71);
  swift_retain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v13 = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v13 + 16) + 1, 1, (_QWORD *)v13);
  v73 = *(_QWORD *)(v13 + 16);
  v72 = *(_QWORD *)(v13 + 24);
  if (v73 >= v72 >> 1)
    v13 = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v72 > 1), v73 + 1, 1, (_QWORD *)v13);
  *(_QWORD *)(v13 + 16) = v73 + 1;
  v74 = v13 + 16 * v73;
  *(_QWORD *)(v74 + 32) = a4;
  *(double *)(v74 + 40) = a6;
  result = swift_allocObject();
  *(_QWORD *)(result + 16) = v13;
  *v88 = result;
  return result;
}

uint64_t specialized combineAnimation<A>(into:state:value:elapsed:newAnimation:newValue:)(uint64_t *a1, unint64_t *a2, uint64_t a3, float a4, float a5, float a6, float a7, double a8, float a9, float a10, float a11, float a12)
{
  uint64_t v27;
  _QWORD *v28;
  unint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  float v32;
  float v33;
  float v34;
  unint64_t v35;
  unint64_t v36;
  float *v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  double *v41;
  uint64_t result;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  unint64_t v47;
  unint64_t v48;
  float *v49;
  uint64_t v50;
  uint64_t v51;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  float v56;
  float v57;
  float v58;
  unint64_t v59;
  unint64_t v60;
  float *v61;
  char v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _OWORD v67[2];
  __int128 v68;
  uint64_t v69;

  type metadata accessor for FontBox<Font.SystemProvider>(0, (unint64_t *)&lazy cache variable for type metadata for AnimationBox<DefaultCombiningAnimation>, (uint64_t (*)(void))lazy protocol witness table accessor for type DefaultCombiningAnimation and conformance DefaultCombiningAnimation, (uint64_t)&type metadata for DefaultCombiningAnimation, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimationBox);
  v27 = swift_dynamicCastClass();
  if (v27)
  {
    v28 = *(_QWORD **)(v27 + 16);
    swift_bridgeObjectRetain();
    swift_release();
    v29 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
    v30 = swift_bridgeObjectRetain();
    v31 = (_QWORD *)specialized AnimationState.subscript.getter(v30, (uint64_t (*)(_QWORD))type metadata accessor for CombinedAnimationState<AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>);
    swift_bridgeObjectRelease();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v31 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v31[2] + 1, 1, v31);
    v32 = a4 + a9;
    v33 = a5 + a10;
    v34 = a6 + a11;
    v36 = v31[2];
    v35 = v31[3];
    if (v36 >= v35 >> 1)
      v31 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v35 > 1), v36 + 1, 1, v31);
    v31[2] = v36 + 1;
    v37 = (float *)&v31[3 * v36];
    v37[8] = v32;
    v37[9] = v33;
    v37[10] = v34;
    v37[11] = a7 + a12;
    *((_QWORD *)v37 + 6) = v29;
    type metadata accessor for CombinedAnimationState<AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>(0);
    v69 = v38;
    *(_QWORD *)&v68 = v31;
    specialized Dictionary.subscript.setter((uint64_t)&v68, v38);
    swift_retain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v28 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v28[2] + 1, 1, v28);
    v40 = v28[2];
    v39 = v28[3];
    if (v40 >= v39 >> 1)
      v28 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v39 > 1), v40 + 1, 1, v28);
    v28[2] = v40 + 1;
    v41 = (double *)&v28[2 * v40];
    *((_QWORD *)v41 + 4) = a3;
    v41[5] = a8;
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v28;
    *a1 = result;
  }
  else
  {
    v43 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
    v44 = *a2;
    swift_bridgeObjectRetain();
    v45 = swift_bridgeObjectRetain();
    v46 = (_QWORD *)specialized AnimationState.subscript.getter(v45, (uint64_t (*)(_QWORD))type metadata accessor for CombinedAnimationState<AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>);
    swift_bridgeObjectRelease();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v46 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v46[2] + 1, 1, v46);
    v48 = v46[2];
    v47 = v46[3];
    if (v48 >= v47 >> 1)
      v46 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v47 > 1), v48 + 1, 1, v46);
    v46[2] = v48 + 1;
    v49 = (float *)&v46[3 * v48];
    v49[8] = a4;
    v49[9] = a5;
    v49[10] = a6;
    v49[11] = a7;
    *((_QWORD *)v49 + 6) = v44;
    type metadata accessor for CombinedAnimationState<AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>(0);
    v51 = v50;
    v69 = v50;
    *(_QWORD *)&v68 = v46;
    outlined init with take of Any(&v68, v67);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v67, v51, isUniquelyReferenced_nonNull_native);
    swift_bridgeObjectRelease();
    v53 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
    v54 = swift_bridgeObjectRetain();
    v55 = (_QWORD *)specialized AnimationState.subscript.getter(v54, (uint64_t (*)(_QWORD))type metadata accessor for CombinedAnimationState<AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>);
    swift_bridgeObjectRelease();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v55 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v55[2] + 1, 1, v55);
    v56 = a4 + a9;
    v57 = a5 + a10;
    v58 = a6 + a11;
    v60 = v55[2];
    v59 = v55[3];
    if (v60 >= v59 >> 1)
      v55 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v59 > 1), v60 + 1, 1, v55);
    v55[2] = v60 + 1;
    v61 = (float *)&v55[3 * v60];
    v61[8] = v56;
    v61[9] = v57;
    v61[10] = v58;
    v61[11] = a7 + a12;
    *((_QWORD *)v61 + 6) = v53;
    v69 = v51;
    *(_QWORD *)&v68 = v55;
    outlined init with take of Any(&v68, v67);
    v62 = swift_isUniquelyReferenced_nonNull_native();
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v67, v51, v62);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *a2 = v43;
    v63 = *a1;
    swift_retain();
    v64 = specialized DefaultCombiningAnimation.init(first:firstElapsed:second:)(v63, a3, a8);
    v65 = swift_allocObject();
    *(_QWORD *)(v65 + 16) = v64;
    *a1 = v65;
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t specialized combineAnimation<A>(into:state:value:elapsed:newAnimation:newValue:)(uint64_t *a1, unint64_t *a2, uint64_t a3, double a4, double a5, double a6)
{
  uint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  unint64_t v17;
  unint64_t v18;
  double *v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  double *v23;
  uint64_t result;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  unint64_t v29;
  unint64_t v30;
  double *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  double v39;
  unint64_t v40;
  unint64_t v41;
  double *v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _OWORD v47[2];
  __int128 v48;
  uint64_t v49;

  type metadata accessor for FontBox<Font.SystemProvider>(0, (unint64_t *)&lazy cache variable for type metadata for AnimationBox<DefaultCombiningAnimation>, (uint64_t (*)(void))lazy protocol witness table accessor for type DefaultCombiningAnimation and conformance DefaultCombiningAnimation, (uint64_t)&type metadata for DefaultCombiningAnimation, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimationBox);
  v12 = swift_dynamicCastClass();
  if (v12)
  {
    v13 = *(_QWORD **)(v12 + 16);
    swift_bridgeObjectRetain();
    swift_release();
    v14 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
    v15 = swift_bridgeObjectRetain();
    v16 = (_QWORD *)specialized AnimationState.subscript.getter(v15, (uint64_t)&lazy cache variable for type metadata for CombinedAnimationState<Double>, MEMORY[0x24BEE13C8], (uint64_t)&protocol witness table for Double, (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t)))type metadata accessor for _AnyPreferenceKey<DisplayList.Key>);
    swift_bridgeObjectRelease();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v16[2] + 1, 1, v16);
    v18 = v16[2];
    v17 = v16[3];
    if (v18 >= v17 >> 1)
      v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v17 > 1), v18 + 1, 1, v16);
    v16[2] = v18 + 1;
    v19 = (double *)&v16[2 * v18];
    v19[4] = a4 + a6;
    *((_QWORD *)v19 + 5) = v14;
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, (unint64_t *)&lazy cache variable for type metadata for CombinedAnimationState<Double>, MEMORY[0x24BEE13C8], (uint64_t)&protocol witness table for Double, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for CombinedAnimationState);
    v49 = v20;
    *(_QWORD *)&v48 = v16;
    specialized Dictionary.subscript.setter((uint64_t)&v48, v20);
    swift_retain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v13 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v13[2] + 1, 1, v13);
    v22 = v13[2];
    v21 = v13[3];
    if (v22 >= v21 >> 1)
      v13 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v21 > 1), v22 + 1, 1, v13);
    v13[2] = v22 + 1;
    v23 = (double *)&v13[2 * v22];
    *((_QWORD *)v23 + 4) = a3;
    v23[5] = a5;
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v13;
    *a1 = result;
  }
  else
  {
    v25 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
    v26 = *a2;
    swift_bridgeObjectRetain();
    v27 = swift_bridgeObjectRetain();
    v28 = (_QWORD *)specialized AnimationState.subscript.getter(v27, (uint64_t)&lazy cache variable for type metadata for CombinedAnimationState<Double>, MEMORY[0x24BEE13C8], (uint64_t)&protocol witness table for Double, (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t)))type metadata accessor for _AnyPreferenceKey<DisplayList.Key>);
    swift_bridgeObjectRelease();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v28 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v28[2] + 1, 1, v28);
    v30 = v28[2];
    v29 = v28[3];
    if (v30 >= v29 >> 1)
      v28 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v29 > 1), v30 + 1, 1, v28);
    v28[2] = v30 + 1;
    v31 = (double *)&v28[2 * v30];
    v31[4] = a4;
    *((_QWORD *)v31 + 5) = v26;
    v32 = MEMORY[0x24BEE13C8];
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, (unint64_t *)&lazy cache variable for type metadata for CombinedAnimationState<Double>, MEMORY[0x24BEE13C8], (uint64_t)&protocol witness table for Double, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for CombinedAnimationState);
    v34 = v33;
    v49 = v33;
    *(_QWORD *)&v48 = v28;
    outlined init with take of Any(&v48, v47);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v47, v34, isUniquelyReferenced_nonNull_native);
    swift_bridgeObjectRelease();
    v36 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
    v37 = swift_bridgeObjectRetain();
    v38 = (_QWORD *)specialized AnimationState.subscript.getter(v37, (uint64_t)&lazy cache variable for type metadata for CombinedAnimationState<Double>, v32, (uint64_t)&protocol witness table for Double, (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t)))type metadata accessor for _AnyPreferenceKey<DisplayList.Key>);
    swift_bridgeObjectRelease();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v38 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v38[2] + 1, 1, v38);
    v39 = a4 + a6;
    v41 = v38[2];
    v40 = v38[3];
    if (v41 >= v40 >> 1)
      v38 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v40 > 1), v41 + 1, 1, v38);
    v38[2] = v41 + 1;
    v42 = (double *)&v38[2 * v41];
    v42[4] = v39;
    *((_QWORD *)v42 + 5) = v36;
    v49 = v34;
    *(_QWORD *)&v48 = v38;
    outlined init with take of Any(&v48, v47);
    v43 = swift_isUniquelyReferenced_nonNull_native();
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v47, v34, v43);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *a2 = v25;
    v44 = *a1;
    swift_retain();
    v45 = specialized DefaultCombiningAnimation.init(first:firstElapsed:second:)(v44, a3, a5);
    v46 = swift_allocObject();
    *(_QWORD *)(v46 + 16) = v45;
    *a1 = v46;
    return swift_bridgeObjectRelease();
  }
  return result;
}

{
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  double *v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  double *v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  unint64_t v31;
  unint64_t v32;
  double *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  double v41;
  unint64_t v42;
  unint64_t v43;
  double *v44;
  char v45;
  uint64_t v46;
  uint64_t *v47;
  _OWORD v48[2];
  __int128 v49;
  uint64_t v50;

  result = type metadata accessor for AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>();
  if (result == MEMORY[0x24BEE50B0])
  {
    __break(1u);
  }
  else
  {
    v13 = *a1;
    type metadata accessor for FontBox<Font.SystemProvider>(0, (unint64_t *)&lazy cache variable for type metadata for AnimationBox<DefaultCombiningAnimation>, (uint64_t (*)(void))lazy protocol witness table accessor for type DefaultCombiningAnimation and conformance DefaultCombiningAnimation, (uint64_t)&type metadata for DefaultCombiningAnimation, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimationBox);
    v14 = swift_dynamicCastClass();
    if (v14)
    {
      v15 = *(_QWORD **)(v14 + 16);
      swift_bridgeObjectRetain();
      swift_release();
      v16 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
      v17 = swift_bridgeObjectRetain();
      v18 = (_QWORD *)specialized AnimationState.subscript.getter(v17, &lazy cache variable for type metadata for CombinedAnimationState<CGFloat>, (uint64_t (*)(void))lazy protocol witness table accessor for type CGFloat and conformance CGFloat, MEMORY[0x24BEE50B0]);
      swift_bridgeObjectRelease();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v18 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v18[2] + 1, 1, v18);
      v20 = v18[2];
      v19 = v18[3];
      if (v20 >= v19 >> 1)
        v18 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v19 > 1), v20 + 1, 1, v18);
      v18[2] = v20 + 1;
      v21 = (double *)&v18[2 * v20];
      v21[4] = a4 + a6;
      *((_QWORD *)v21 + 5) = v16;
      type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for CombinedAnimationState<CGFloat>, (uint64_t (*)(void))lazy protocol witness table accessor for type CGFloat and conformance CGFloat, MEMORY[0x24BEE50B0], (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for CombinedAnimationState);
      v50 = v22;
      *(_QWORD *)&v49 = v18;
      specialized Dictionary.subscript.setter((uint64_t)&v49, v22);
      swift_retain();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v15 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v15[2] + 1, 1, v15);
      v24 = v15[2];
      v23 = v15[3];
      if (v24 >= v23 >> 1)
        v15 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v23 > 1), v24 + 1, 1, v15);
      v15[2] = v24 + 1;
      v25 = (double *)&v15[2 * v24];
      *((_QWORD *)v25 + 4) = a3;
      v25[5] = a5;
      result = swift_allocObject();
      v26 = result;
      *(_QWORD *)(result + 16) = v15;
    }
    else
    {
      v27 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
      v28 = *a2;
      swift_bridgeObjectRetain();
      v29 = swift_bridgeObjectRetain();
      v30 = (_QWORD *)specialized AnimationState.subscript.getter(v29, &lazy cache variable for type metadata for CombinedAnimationState<CGFloat>, (uint64_t (*)(void))lazy protocol witness table accessor for type CGFloat and conformance CGFloat, MEMORY[0x24BEE50B0]);
      swift_bridgeObjectRelease();
      v47 = a1;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v30 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v30[2] + 1, 1, v30);
      v32 = v30[2];
      v31 = v30[3];
      if (v32 >= v31 >> 1)
        v30 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v31 > 1), v32 + 1, 1, v30);
      v30[2] = v32 + 1;
      v33 = (double *)&v30[2 * v32];
      v33[4] = a4;
      *((_QWORD *)v33 + 5) = v28;
      v34 = MEMORY[0x24BEE50B0];
      type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for CombinedAnimationState<CGFloat>, (uint64_t (*)(void))lazy protocol witness table accessor for type CGFloat and conformance CGFloat, MEMORY[0x24BEE50B0], (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for CombinedAnimationState);
      v36 = v35;
      v50 = v35;
      *(_QWORD *)&v49 = v30;
      outlined init with take of Any(&v49, v48);
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v48, v36, isUniquelyReferenced_nonNull_native);
      swift_bridgeObjectRelease();
      v38 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
      v39 = swift_bridgeObjectRetain();
      v40 = (_QWORD *)specialized AnimationState.subscript.getter(v39, &lazy cache variable for type metadata for CombinedAnimationState<CGFloat>, (uint64_t (*)(void))lazy protocol witness table accessor for type CGFloat and conformance CGFloat, v34);
      swift_bridgeObjectRelease();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v40 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v40[2] + 1, 1, v40);
      v41 = a4 + a6;
      v43 = v40[2];
      v42 = v40[3];
      if (v43 >= v42 >> 1)
        v40 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v42 > 1), v43 + 1, 1, v40);
      v40[2] = v43 + 1;
      v44 = (double *)&v40[2 * v43];
      v44[4] = v41;
      *((_QWORD *)v44 + 5) = v38;
      v50 = v36;
      *(_QWORD *)&v49 = v40;
      outlined init with take of Any(&v49, v48);
      v45 = swift_isUniquelyReferenced_nonNull_native();
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v48, v36, v45);
      swift_bridgeObjectRelease();
      *a2 = v27;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<DefaultCombiningAnimation.Entry>, (uint64_t)&type metadata for DefaultCombiningAnimation.Entry, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
      v46 = swift_allocObject();
      *(_OWORD *)(v46 + 16) = xmmword_2352828C0;
      *(_QWORD *)(v46 + 32) = v13;
      *(_QWORD *)(v46 + 40) = 0;
      *(_QWORD *)(v46 + 48) = a3;
      *(double *)(v46 + 56) = a5;
      v26 = swift_allocObject();
      *(_QWORD *)(v26 + 16) = v46;
      swift_retain();
      result = swift_bridgeObjectRelease();
      a1 = v47;
    }
    *a1 = v26;
  }
  return result;
}

uint64_t specialized combineAnimation<A>(into:state:value:elapsed:newAnimation:newValue:)(uint64_t *a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, double a6)
{
  uint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  double *v24;
  uint64_t result;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  unint64_t v30;
  unint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  unint64_t v40;
  unint64_t v41;
  _QWORD *v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _OWORD v48[2];
  __int128 v49;
  uint64_t v50;

  type metadata accessor for FontBox<Font.SystemProvider>(0, (unint64_t *)&lazy cache variable for type metadata for AnimationBox<DefaultCombiningAnimation>, (uint64_t (*)(void))lazy protocol witness table accessor for type DefaultCombiningAnimation and conformance DefaultCombiningAnimation, (uint64_t)&type metadata for DefaultCombiningAnimation, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimationBox);
  v12 = swift_dynamicCastClass();
  if (v12)
  {
    v13 = *(_QWORD **)(v12 + 16);
    swift_bridgeObjectRetain();
    swift_release();
    *(_QWORD *)&v49 = a3;
    *(_QWORD *)&v48[0] = a5;
    swift_bridgeObjectRetain();
    specialized static ShaderVectorData.+= infix(_:_:)((uint64_t)&v49, (uint64_t *)v48);
    v14 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
    v15 = v49;
    v16 = swift_bridgeObjectRetain();
    v17 = (_QWORD *)specialized AnimationState.subscript.getter(v16, (uint64_t)&lazy cache variable for type metadata for CombinedAnimationState<ShaderVectorData>, (uint64_t)lazy protocol witness table accessor for type ShaderVectorData and conformance ShaderVectorData, (uint64_t)&type metadata for ShaderVectorData, (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t)))type metadata accessor for FontBox<Font.SystemProvider>);
    swift_bridgeObjectRelease();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v17 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v17[2] + 1, 1, v17);
    v19 = v17[2];
    v18 = v17[3];
    if (v19 >= v18 >> 1)
      v17 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v18 > 1), v19 + 1, 1, v17);
    v17[2] = v19 + 1;
    v20 = &v17[2 * v19];
    v20[4] = v15;
    v20[5] = v14;
    type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for CombinedAnimationState<ShaderVectorData>, (uint64_t (*)(void))lazy protocol witness table accessor for type ShaderVectorData and conformance ShaderVectorData, (uint64_t)&type metadata for ShaderVectorData, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for CombinedAnimationState);
    v50 = v21;
    *(_QWORD *)&v49 = v17;
    specialized Dictionary.subscript.setter((uint64_t)&v49, v21);
    swift_retain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v13 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v13[2] + 1, 1, v13);
    v23 = v13[2];
    v22 = v13[3];
    if (v23 >= v22 >> 1)
      v13 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v22 > 1), v23 + 1, 1, v13);
    v13[2] = v23 + 1;
    v24 = (double *)&v13[2 * v23];
    *((_QWORD *)v24 + 4) = a4;
    v24[5] = a6;
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v13;
    *a1 = result;
  }
  else
  {
    v47 = a4;
    v26 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
    v27 = *a2;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v28 = swift_bridgeObjectRetain();
    v29 = (_QWORD *)specialized AnimationState.subscript.getter(v28, (uint64_t)&lazy cache variable for type metadata for CombinedAnimationState<ShaderVectorData>, (uint64_t)lazy protocol witness table accessor for type ShaderVectorData and conformance ShaderVectorData, (uint64_t)&type metadata for ShaderVectorData, (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t)))type metadata accessor for FontBox<Font.SystemProvider>);
    swift_bridgeObjectRelease();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v29 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v29[2] + 1, 1, v29);
    v31 = v29[2];
    v30 = v29[3];
    if (v31 >= v30 >> 1)
      v29 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v30 > 1), v31 + 1, 1, v29);
    v29[2] = v31 + 1;
    v32 = &v29[2 * v31];
    v32[4] = a3;
    v32[5] = v27;
    type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for CombinedAnimationState<ShaderVectorData>, (uint64_t (*)(void))lazy protocol witness table accessor for type ShaderVectorData and conformance ShaderVectorData, (uint64_t)&type metadata for ShaderVectorData, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for CombinedAnimationState);
    v34 = v33;
    v50 = v33;
    *(_QWORD *)&v49 = v29;
    outlined init with take of Any(&v49, v48);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v48, v34, isUniquelyReferenced_nonNull_native);
    swift_bridgeObjectRelease();
    *(_QWORD *)&v49 = a3;
    *(_QWORD *)&v48[0] = a5;
    swift_bridgeObjectRetain();
    specialized static ShaderVectorData.+= infix(_:_:)((uint64_t)&v49, (uint64_t *)v48);
    v36 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
    v37 = v49;
    v38 = swift_bridgeObjectRetain();
    v39 = (_QWORD *)specialized AnimationState.subscript.getter(v38, (uint64_t)&lazy cache variable for type metadata for CombinedAnimationState<ShaderVectorData>, (uint64_t)lazy protocol witness table accessor for type ShaderVectorData and conformance ShaderVectorData, (uint64_t)&type metadata for ShaderVectorData, (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t)))type metadata accessor for FontBox<Font.SystemProvider>);
    swift_bridgeObjectRelease();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v39 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v39[2] + 1, 1, v39);
    v41 = v39[2];
    v40 = v39[3];
    if (v41 >= v40 >> 1)
      v39 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v40 > 1), v41 + 1, 1, v39);
    v39[2] = v41 + 1;
    v42 = &v39[2 * v41];
    v42[4] = v37;
    v42[5] = v36;
    v50 = v34;
    *(_QWORD *)&v49 = v39;
    outlined init with take of Any(&v49, v48);
    v43 = swift_isUniquelyReferenced_nonNull_native();
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v48, v34, v43);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *a2 = v26;
    v44 = *a1;
    swift_retain();
    v45 = specialized DefaultCombiningAnimation.init(first:firstElapsed:second:)(v44, v47, a6);
    v46 = swift_allocObject();
    *(_QWORD *)(v46 + 16) = v45;
    *a1 = v46;
    return swift_bridgeObjectRelease();
  }
  return result;
}

{
  uint64_t v12;
  uint64_t v13;
  float v14;
  float v15;
  float v16;
  float v17;
  double v18;
  double v19;
  float v20;
  float v21;
  float v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  double v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  float v32;
  float v33;
  float v34;
  unint64_t v35;
  unint64_t v36;
  float *v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  double *v41;
  uint64_t result;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  unint64_t v47;
  unint64_t v48;
  double *v49;
  uint64_t v50;
  uint64_t v51;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  float32x2_t v56;
  float32x2_t v57;
  float32x2_t v58;
  float32x2_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  _QWORD *v64;
  float32x2_t v65;
  float32x2_t v66;
  unint64_t v67;
  unint64_t v68;
  _QWORD *v69;
  char v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t *v74;
  unint64_t *v75;
  double v76;
  float v77;
  _OWORD v78[2];
  __int128 v79;
  uint64_t v80;
  double v81;
  _QWORD v82[2];

  v13 = *(_QWORD *)a5;
  v12 = *(_QWORD *)(a5 + 8);
  v14 = *(float *)(a5 + 16);
  v15 = *(float *)(a5 + 20);
  v17 = *(float *)(a5 + 24);
  v16 = *(float *)(a5 + 28);
  v18 = *(double *)a3;
  v19 = *(double *)(a3 + 8);
  v21 = *(float *)(a3 + 16);
  v20 = *(float *)(a3 + 20);
  v22 = *(float *)(a3 + 24);
  v77 = *(float *)(a3 + 28);
  v23 = type metadata accessor for AnimatablePair<AnimatableArray<Float>, AnimatablePair<AnimatableArray<AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>, AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>>();
  if (v23 == MEMORY[0x24BEE13C8])
    return specialized combineAnimation<A>(into:state:value:elapsed:newAnimation:newValue:)(a1, a2, a4, v18, a6, *(double *)&v13);
  v76 = a6;
  if (v23 == type metadata accessor for AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>())
  {
    *(_QWORD *)&v79 = __PAIR64__(LODWORD(v15), LODWORD(v14));
    *(_QWORD *)&v78[0] = __PAIR64__(LODWORD(v16), LODWORD(v17));
    return specialized combineAnimation<A>(into:state:value:elapsed:newAnimation:newValue:)(a1, a2, a4, v18, v19, COERCE_DOUBLE(__PAIR64__(LODWORD(v20), LODWORD(v21))), COERCE_DOUBLE(__PAIR64__(LODWORD(v77), LODWORD(v22))), a6, *(double *)&v13, *(double *)&v12, COERCE_DOUBLE(__PAIR64__(LODWORD(v15), LODWORD(v14))), COERCE_DOUBLE(__PAIR64__(LODWORD(v16), LODWORD(v17))));
  }
  else
  {
    v75 = a2;
    v24 = *a1;
    type metadata accessor for FontBox<Font.SystemProvider>(0, (unint64_t *)&lazy cache variable for type metadata for AnimationBox<DefaultCombiningAnimation>, (uint64_t (*)(void))lazy protocol witness table accessor for type DefaultCombiningAnimation and conformance DefaultCombiningAnimation, (uint64_t)&type metadata for DefaultCombiningAnimation, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimationBox);
    v25 = swift_dynamicCastClass();
    if (v25)
    {
      v26 = *(_QWORD **)(v25 + 16);
      swift_bridgeObjectRetain();
      swift_release();
      *(double *)v78 = v18;
      *(double *)&v79 = v18;
      outlined retain of LinearGradient((uint64_t)v78);
      specialized static AnimatableArray.+= infix(_:_:)((uint64_t)&v79, v13);
      v81 = v19;
      *(double *)v82 = v19;
      outlined retain of LinearGradient((uint64_t)v82);
      specialized static AnimatableArray.+= infix(_:_:)((uint64_t)&v81, v12);
      v27 = v81;
      v28 = v79;
      v29 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
      v30 = swift_bridgeObjectRetain();
      v31 = (_QWORD *)specialized AnimationState.subscript.getter(v30, (uint64_t (*)(_QWORD))type metadata accessor for CombinedAnimationState<AnimatablePair<AnimatableArray<Float>, AnimatablePair<AnimatableArray<AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>, AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>>>);
      swift_bridgeObjectRelease();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v31 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v31[2] + 1, 1, v31);
      v32 = v21 + v14;
      v33 = v20 + v15;
      v34 = v22 + v17;
      v36 = v31[2];
      v35 = v31[3];
      if (v36 >= v35 >> 1)
        v31 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v35 > 1), v36 + 1, 1, v31);
      v31[2] = v36 + 1;
      v37 = (float *)&v31[5 * v36];
      *((_QWORD *)v37 + 4) = v28;
      *((double *)v37 + 5) = v27;
      v37[12] = v32;
      v37[13] = v33;
      v37[14] = v34;
      v37[15] = v77 + v16;
      *((_QWORD *)v37 + 8) = v29;
      type metadata accessor for CombinedAnimationState<AnimatablePair<AnimatableArray<Float>, AnimatablePair<AnimatableArray<AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>, AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>>>(0);
      v80 = v38;
      *(_QWORD *)&v79 = v31;
      specialized Dictionary.subscript.setter((uint64_t)&v79, v38);
      swift_retain();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v26 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v26[2] + 1, 1, v26);
      v40 = v26[2];
      v39 = v26[3];
      if (v40 >= v39 >> 1)
        v26 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v39 > 1), v40 + 1, 1, v26);
      v26[2] = v40 + 1;
      v41 = (double *)&v26[2 * v40];
      *((_QWORD *)v41 + 4) = a4;
      v41[5] = a6;
      result = swift_allocObject();
      *(_QWORD *)(result + 16) = v26;
      *a1 = result;
    }
    else
    {
      v73 = a4;
      v43 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
      v44 = *v75;
      outlined retain of Text.Effect.RenderSegmentation.StaticLines(a3);
      swift_bridgeObjectRetain();
      v45 = swift_bridgeObjectRetain();
      v46 = (_QWORD *)specialized AnimationState.subscript.getter(v45, (uint64_t (*)(_QWORD))type metadata accessor for CombinedAnimationState<AnimatablePair<AnimatableArray<Float>, AnimatablePair<AnimatableArray<AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>, AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>>>);
      swift_bridgeObjectRelease();
      v74 = a1;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v46 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v46[2] + 1, 1, v46);
      v48 = v46[2];
      v47 = v46[3];
      if (v48 >= v47 >> 1)
        v46 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v47 > 1), v48 + 1, 1, v46);
      v46[2] = v48 + 1;
      v49 = (double *)&v46[5 * v48];
      v49[4] = v18;
      v49[5] = v19;
      *((float *)v49 + 12) = v21;
      *((float *)v49 + 13) = v20;
      *((float *)v49 + 14) = v22;
      *((float *)v49 + 15) = v77;
      *((_QWORD *)v49 + 8) = v44;
      type metadata accessor for CombinedAnimationState<AnimatablePair<AnimatableArray<Float>, AnimatablePair<AnimatableArray<AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>, AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>>>(0);
      v51 = v50;
      v80 = v50;
      *(_QWORD *)&v79 = v46;
      outlined init with take of Any(&v79, v78);
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v82[0] = v43;
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v78, v51, isUniquelyReferenced_nonNull_native);
      v53 = v82[0];
      swift_bridgeObjectRelease();
      v82[0] = *(_QWORD *)a3;
      v54 = *(_QWORD *)a5;
      *(_QWORD *)&v79 = v82[0];
      outlined retain of LinearGradient((uint64_t)v82);
      specialized static AnimatableArray.+= infix(_:_:)((uint64_t)&v79, v54);
      v55 = *(_QWORD *)(a5 + 8);
      v56 = *(float32x2_t *)(a3 + 16);
      v57 = *(float32x2_t *)(a3 + 24);
      v59 = *(float32x2_t *)(a5 + 16);
      v58 = *(float32x2_t *)(a5 + 24);
      v81 = *(double *)(a3 + 8);
      *(double *)v78 = v81;
      outlined retain of LinearGradient((uint64_t)&v81);
      specialized static AnimatableArray.+= infix(_:_:)((uint64_t)v78, v55);
      v60 = *(_QWORD *)&v78[0];
      v61 = v79;
      v62 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
      v63 = swift_bridgeObjectRetain();
      v64 = (_QWORD *)specialized AnimationState.subscript.getter(v63, (uint64_t (*)(_QWORD))type metadata accessor for CombinedAnimationState<AnimatablePair<AnimatableArray<Float>, AnimatablePair<AnimatableArray<AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>, AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>>>);
      swift_bridgeObjectRelease();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v64 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v64[2] + 1, 1, v64);
      v65 = vadd_f32(v56, v59);
      v66 = vadd_f32(v57, v58);
      v68 = v64[2];
      v67 = v64[3];
      if (v68 >= v67 >> 1)
        v64 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v67 > 1), v68 + 1, 1, v64);
      v64[2] = v68 + 1;
      v69 = &v64[5 * v68];
      v69[4] = v61;
      v69[5] = v60;
      v69[6] = v65;
      v69[7] = v66;
      v69[8] = v62;
      v80 = v51;
      *(_QWORD *)&v79 = v64;
      outlined init with take of Any(&v79, v78);
      v70 = swift_isUniquelyReferenced_nonNull_native();
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v78, v51, v70);
      swift_bridgeObjectRelease();
      *v75 = v53;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<DefaultCombiningAnimation.Entry>, (uint64_t)&type metadata for DefaultCombiningAnimation.Entry, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
      v71 = swift_allocObject();
      *(_OWORD *)(v71 + 16) = xmmword_2352828C0;
      *(_QWORD *)(v71 + 32) = v24;
      *(_QWORD *)(v71 + 40) = 0;
      *(_QWORD *)(v71 + 48) = v73;
      *(double *)(v71 + 56) = v76;
      v72 = swift_allocObject();
      *(_QWORD *)(v72 + 16) = v71;
      swift_retain();
      result = swift_bridgeObjectRelease();
      *v74 = v72;
    }
  }
  return result;
}

{
  float v12;
  float v13;
  float v14;
  float v15;
  double v16;
  float v17;
  float v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  double v23;
  unint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  float v27;
  float v28;
  float v29;
  double v30;
  unint64_t v31;
  unint64_t v32;
  float *v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  double *v37;
  uint64_t result;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  unint64_t v43;
  unint64_t v44;
  float *v45;
  uint64_t v46;
  uint64_t v47;
  char isUniquelyReferenced_nonNull_native;
  double v49;
  double v50;
  double v51;
  double v52;
  double v53;
  double v54;
  unint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  float32x4_t v58;
  double v59;
  double v60;
  double v61;
  unint64_t v62;
  unint64_t v63;
  float32x4_t *v64;
  char v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  double v70;
  double v71;
  double v72;
  double v73;
  double v74;
  float32x4_t v75;
  double v76;
  float32x4_t v77;
  float32x4_t v78;
  _OWORD v79[2];
  __int128 v80;
  uint64_t v81;

  v13 = *(float *)a5;
  v12 = *(float *)(a5 + 4);
  v15 = *(float *)(a5 + 8);
  v14 = *(float *)(a5 + 12);
  v16 = *(double *)(a5 + 24);
  v17 = *(float *)a3;
  v18 = *(float *)(a3 + 4);
  v73 = *(double *)(a3 + 8);
  v74 = *(double *)(a3 + 16);
  v76 = *(double *)(a3 + 24);
  v71 = *(double *)(a3 + 32);
  v72 = *(double *)(a5 + 16);
  v19 = type metadata accessor for AnimatablePair<AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>, AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>>();
  if (v19 == MEMORY[0x24BEE13C8])
  {
    *(_QWORD *)&v80 = __PAIR64__(LODWORD(v12), LODWORD(v13));
    return specialized combineAnimation<A>(into:state:value:elapsed:newAnimation:newValue:)(a1, a2, a4, COERCE_DOUBLE(__PAIR64__(LODWORD(v18), LODWORD(v17))), a6, COERCE_DOUBLE(__PAIR64__(LODWORD(v12), LODWORD(v13))));
  }
  else
  {
    v70 = a6;
    if (v19 == type metadata accessor for AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>())
    {
      *(_QWORD *)&v80 = __PAIR64__(LODWORD(v12), LODWORD(v13));
      *(_QWORD *)&v79[0] = __PAIR64__(LODWORD(v14), LODWORD(v15));
      return specialized combineAnimation<A>(into:state:value:elapsed:newAnimation:newValue:)(a1, a2, a4, COERCE_DOUBLE(__PAIR64__(LODWORD(v18), LODWORD(v17))), v73, v74, v76, a6, COERCE_DOUBLE(__PAIR64__(LODWORD(v12), LODWORD(v13))), COERCE_DOUBLE(__PAIR64__(LODWORD(v14), LODWORD(v15))), v72, v16);
    }
    else
    {
      v20 = *a1;
      type metadata accessor for FontBox<Font.SystemProvider>(0, (unint64_t *)&lazy cache variable for type metadata for AnimationBox<DefaultCombiningAnimation>, (uint64_t (*)(void))lazy protocol witness table accessor for type DefaultCombiningAnimation and conformance DefaultCombiningAnimation, (uint64_t)&type metadata for DefaultCombiningAnimation, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimationBox);
      v21 = swift_dynamicCastClass();
      if (v21)
      {
        v22 = *(_QWORD **)(v21 + 16);
        swift_bridgeObjectRetain();
        swift_release();
        v23 = *(double *)(a5 + 32);
        v24 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
        v25 = swift_bridgeObjectRetain();
        v26 = (_QWORD *)specialized AnimationState.subscript.getter(v25, (uint64_t (*)(_QWORD))type metadata accessor for CombinedAnimationState<AnimatablePair<AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>, AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>>>);
        swift_bridgeObjectRelease();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v26 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v26[2] + 1, 1, v26);
        v27 = v13 + v17;
        v28 = v12 + v18;
        v29 = v14 + *((float *)&v73 + 1);
        v30 = v76 + v16;
        v32 = v26[2];
        v31 = v26[3];
        if (v32 >= v31 >> 1)
          v26 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v31 > 1), v32 + 1, 1, v26);
        v26[2] = v32 + 1;
        v33 = (float *)&v26[6 * v32];
        v33[8] = v27;
        v33[9] = v28;
        v33[10] = v15 + *(float *)&v73;
        v33[11] = v29;
        *((double *)v33 + 6) = v74 + v72;
        *((double *)v33 + 7) = v30;
        *((double *)v33 + 8) = v71 + v23;
        *((_QWORD *)v33 + 9) = v24;
        type metadata accessor for CombinedAnimationState<AnimatablePair<AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>, AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>>>(0);
        v81 = v34;
        *(_QWORD *)&v80 = v26;
        specialized Dictionary.subscript.setter((uint64_t)&v80, v34);
        swift_retain();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v22 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v22[2] + 1, 1, v22);
        v36 = v22[2];
        v35 = v22[3];
        if (v36 >= v35 >> 1)
          v22 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v35 > 1), v36 + 1, 1, v22);
        v22[2] = v36 + 1;
        v37 = (double *)&v22[2 * v36];
        *((_QWORD *)v37 + 4) = a4;
        v37[5] = v70;
        result = swift_allocObject();
        *(_QWORD *)(result + 16) = v22;
        *a1 = result;
      }
      else
      {
        v69 = v20;
        v39 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
        v40 = *a2;
        swift_bridgeObjectRetain();
        v41 = swift_bridgeObjectRetain();
        v42 = (_QWORD *)specialized AnimationState.subscript.getter(v41, (uint64_t (*)(_QWORD))type metadata accessor for CombinedAnimationState<AnimatablePair<AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>, AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>>>);
        swift_bridgeObjectRelease();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v42 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v42[2] + 1, 1, v42);
        v44 = v42[2];
        v43 = v42[3];
        if (v44 >= v43 >> 1)
          v42 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v43 > 1), v44 + 1, 1, v42);
        v42[2] = v44 + 1;
        v45 = (float *)&v42[6 * v44];
        v45[8] = v17;
        v45[9] = v18;
        *((double *)v45 + 5) = v73;
        *((double *)v45 + 6) = v74;
        *((double *)v45 + 7) = v76;
        *((double *)v45 + 8) = v71;
        *((_QWORD *)v45 + 9) = v40;
        type metadata accessor for CombinedAnimationState<AnimatablePair<AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>, AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>>>(0);
        v47 = v46;
        v81 = v46;
        *(_QWORD *)&v80 = v42;
        outlined init with take of Any(&v80, v79);
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v79, v47, isUniquelyReferenced_nonNull_native);
        swift_bridgeObjectRelease();
        v75 = *(float32x4_t *)a5;
        v77 = *(float32x4_t *)a3;
        v49 = *(double *)(a3 + 16);
        v50 = *(double *)(a3 + 24);
        v51 = *(double *)(a3 + 32);
        v52 = *(double *)(a5 + 16);
        v53 = *(double *)(a5 + 24);
        v54 = *(double *)(a5 + 32);
        v55 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
        v56 = swift_bridgeObjectRetain();
        v57 = (_QWORD *)specialized AnimationState.subscript.getter(v56, (uint64_t (*)(_QWORD))type metadata accessor for CombinedAnimationState<AnimatablePair<AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>, AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>>>);
        swift_bridgeObjectRelease();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v57 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v57[2] + 1, 1, v57);
        v58 = vaddq_f32(v77, v75);
        v59 = v49 + v52;
        v60 = v50 + v53;
        v61 = v51 + v54;
        v63 = v57[2];
        v62 = v57[3];
        if (v63 >= v62 >> 1)
        {
          v78 = v58;
          v68 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v62 > 1), v63 + 1, 1, v57);
          v58 = v78;
          v57 = v68;
        }
        v57[2] = v63 + 1;
        v64 = (float32x4_t *)&v57[6 * v63];
        v64[2] = v58;
        *(double *)v64[3].i64 = v59;
        *(double *)&v64[3].i64[1] = v60;
        *(double *)v64[4].i64 = v61;
        v64[4].i64[1] = v55;
        v81 = v47;
        *(_QWORD *)&v80 = v57;
        outlined init with take of Any(&v80, v79);
        v65 = swift_isUniquelyReferenced_nonNull_native();
        specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v79, v47, v65);
        swift_bridgeObjectRelease();
        *a2 = v39;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<DefaultCombiningAnimation.Entry>, (uint64_t)&type metadata for DefaultCombiningAnimation.Entry, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
        v66 = swift_allocObject();
        *(_OWORD *)(v66 + 16) = xmmword_2352828C0;
        *(_QWORD *)(v66 + 32) = v69;
        *(_QWORD *)(v66 + 40) = 0;
        *(_QWORD *)(v66 + 48) = a4;
        *(double *)(v66 + 56) = v70;
        v67 = swift_allocObject();
        *(_QWORD *)(v67 + 16) = v66;
        swift_retain();
        result = swift_bridgeObjectRelease();
        *a1 = v67;
      }
    }
  }
  return result;
}

{
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  char v27;
  unint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  double v31;
  double v32;
  double v33;
  double v34;
  unint64_t v35;
  unint64_t v36;
  double *v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  double *v41;
  uint64_t result;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  unint64_t v47;
  unint64_t v48;
  double *v49;
  uint64_t v50;
  uint64_t v51;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v53;
  double v54;
  double v55;
  double v56;
  double v57;
  double v58;
  double v59;
  double v60;
  double v61;
  uint64_t v62;
  char v63;
  unint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  double v67;
  double v68;
  double v69;
  double v70;
  unint64_t v71;
  unint64_t v72;
  double *v73;
  char v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t *v79;
  double v80;
  double v81;
  _OWORD v82[2];
  __int128 v83;
  uint64_t v84;
  unint64_t v85;
  char v86;

  v12 = *(double *)a5;
  v13 = *(double *)(a5 + 8);
  v15 = *(double *)(a5 + 16);
  v14 = *(double *)(a5 + 24);
  v16 = *(double *)a3;
  v17 = *(double *)(a3 + 8);
  v18 = *(double *)(a3 + 16);
  v81 = *(double *)(a3 + 24);
  v20 = a3 + 32;
  v19 = *(_QWORD *)(a3 + 32);
  v21 = *(_BYTE *)(a3 + 40);
  v22 = type metadata accessor for AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>, CGFloat>(0, &lazy cache variable for type metadata for AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>, ResolvedGradientVector>, (void (*)(void))lazy protocol witness table accessor for type ResolvedGradientVector and conformance ResolvedGradientVector);
  if (v22 == MEMORY[0x24BEE13C8])
    return specialized combineAnimation<A>(into:state:value:elapsed:newAnimation:newValue:)(a1, a2, a4, v16, a6, v12);
  v80 = a6;
  if (v22 == type metadata accessor for AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>())
    return specialized combineAnimation<A>(into:state:value:elapsed:newAnimation:newValue:)(a1, a2, a4, v16, v17, v18, v81, a6, v12, v13, v15, v14);
  v23 = *a1;
  type metadata accessor for FontBox<Font.SystemProvider>(0, (unint64_t *)&lazy cache variable for type metadata for AnimationBox<DefaultCombiningAnimation>, (uint64_t (*)(void))lazy protocol witness table accessor for type DefaultCombiningAnimation and conformance DefaultCombiningAnimation, (uint64_t)&type metadata for DefaultCombiningAnimation, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimationBox);
  v24 = swift_dynamicCastClass();
  if (v24)
  {
    v25 = *(_QWORD **)(v24 + 16);
    swift_bridgeObjectRetain();
    swift_release();
    *(_QWORD *)&v82[0] = *(_QWORD *)v20;
    BYTE8(v82[0]) = *(_BYTE *)(v20 + 8);
    v85 = *(_QWORD *)(a5 + 32);
    v86 = *(_BYTE *)(a5 + 40);
    *(_QWORD *)&v83 = *(_QWORD *)v20;
    BYTE8(v83) = *(_BYTE *)(v20 + 8);
    outlined retain of LinearGradient((uint64_t)v82);
    ResolvedGradientVector.add(_:scaledBy:)((uint64_t)&v85, 1.0);
    v26 = v83;
    v27 = BYTE8(v83);
    v28 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
    v29 = swift_bridgeObjectRetain();
    v30 = (_QWORD *)specialized AnimationState.subscript.getter(v29, (uint64_t (*)(_QWORD))type metadata accessor for CombinedAnimationState<AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>, ResolvedGradientVector>>);
    swift_bridgeObjectRelease();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v30 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v30[2] + 1, 1, v30);
    v31 = v12 + v16;
    v32 = v13 + v17;
    v33 = v15 + v18;
    v34 = v14 + v81;
    v36 = v30[2];
    v35 = v30[3];
    if (v36 >= v35 >> 1)
      v30 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v35 > 1), v36 + 1, 1, v30);
    v30[2] = v36 + 1;
    v37 = (double *)&v30[7 * v36];
    v37[4] = v31;
    v37[5] = v32;
    v37[6] = v33;
    v37[7] = v34;
    *((_QWORD *)v37 + 8) = v26;
    *((_BYTE *)v37 + 72) = v27;
    *((_QWORD *)v37 + 10) = v28;
    type metadata accessor for CombinedAnimationState<AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>, ResolvedGradientVector>>(0);
    v84 = v38;
    *(_QWORD *)&v83 = v30;
    specialized Dictionary.subscript.setter((uint64_t)&v83, v38);
    swift_retain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v25 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v25[2] + 1, 1, v25);
    v40 = v25[2];
    v39 = v25[3];
    if (v40 >= v39 >> 1)
      v25 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v39 > 1), v40 + 1, 1, v25);
    v25[2] = v40 + 1;
    v41 = (double *)&v25[2 * v40];
    *((_QWORD *)v41 + 4) = a4;
    v41[5] = a6;
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v25;
    *a1 = result;
  }
  else
  {
    v77 = v23;
    v78 = a4;
    v43 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
    v44 = *a2;
    outlined retain of AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>, ResolvedGradientVector>(a3);
    swift_bridgeObjectRetain();
    v45 = swift_bridgeObjectRetain();
    v46 = (_QWORD *)specialized AnimationState.subscript.getter(v45, (uint64_t (*)(_QWORD))type metadata accessor for CombinedAnimationState<AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>, ResolvedGradientVector>>);
    swift_bridgeObjectRelease();
    v79 = a1;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v46 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v46[2] + 1, 1, v46);
    v48 = v46[2];
    v47 = v46[3];
    if (v48 >= v47 >> 1)
      v46 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v47 > 1), v48 + 1, 1, v46);
    v46[2] = v48 + 1;
    v49 = (double *)&v46[7 * v48];
    v49[4] = v16;
    v49[5] = v17;
    v49[6] = v18;
    v49[7] = v81;
    *((_QWORD *)v49 + 8) = v19;
    *((_BYTE *)v49 + 72) = v21;
    *((_QWORD *)v49 + 10) = v44;
    type metadata accessor for CombinedAnimationState<AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>, ResolvedGradientVector>>(0);
    v51 = v50;
    v84 = v50;
    *(_QWORD *)&v83 = v46;
    outlined init with take of Any(&v83, v82);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v85 = v43;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v82, v51, isUniquelyReferenced_nonNull_native);
    v53 = v85;
    swift_bridgeObjectRelease();
    v54 = *(double *)a3;
    v55 = *(double *)(a3 + 8);
    v56 = *(double *)(a3 + 16);
    v57 = *(double *)(a3 + 24);
    v58 = *(double *)a5;
    v59 = *(double *)(a5 + 8);
    v60 = *(double *)(a5 + 16);
    v61 = *(double *)(a5 + 24);
    v85 = *(_QWORD *)v20;
    v86 = *(_BYTE *)(v20 + 8);
    *(_QWORD *)&v82[0] = *(_QWORD *)(a5 + 32);
    BYTE8(v82[0]) = *(_BYTE *)(a5 + 40);
    *(_QWORD *)&v83 = *(_QWORD *)v20;
    BYTE8(v83) = *(_BYTE *)(v20 + 8);
    outlined retain of LinearGradient((uint64_t)&v85);
    ResolvedGradientVector.add(_:scaledBy:)((uint64_t)v82, 1.0);
    v62 = v83;
    v63 = BYTE8(v83);
    v64 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
    v65 = swift_bridgeObjectRetain();
    v66 = (_QWORD *)specialized AnimationState.subscript.getter(v65, (uint64_t (*)(_QWORD))type metadata accessor for CombinedAnimationState<AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>, ResolvedGradientVector>>);
    swift_bridgeObjectRelease();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v66 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v66[2] + 1, 1, v66);
    v67 = v54 + v58;
    v68 = v55 + v59;
    v69 = v56 + v60;
    v70 = v57 + v61;
    v72 = v66[2];
    v71 = v66[3];
    if (v72 >= v71 >> 1)
      v66 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v71 > 1), v72 + 1, 1, v66);
    v66[2] = v72 + 1;
    v73 = (double *)&v66[7 * v72];
    v73[4] = v67;
    v73[5] = v68;
    v73[6] = v69;
    v73[7] = v70;
    *((_QWORD *)v73 + 8) = v62;
    *((_BYTE *)v73 + 72) = v63;
    *((_QWORD *)v73 + 10) = v64;
    v84 = v51;
    *(_QWORD *)&v83 = v66;
    outlined init with take of Any(&v83, v82);
    v74 = swift_isUniquelyReferenced_nonNull_native();
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v82, v51, v74);
    swift_bridgeObjectRelease();
    *a2 = v53;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<DefaultCombiningAnimation.Entry>, (uint64_t)&type metadata for DefaultCombiningAnimation.Entry, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
    v75 = swift_allocObject();
    *(_OWORD *)(v75 + 16) = xmmword_2352828C0;
    *(_QWORD *)(v75 + 32) = v77;
    *(_QWORD *)(v75 + 40) = 0;
    *(_QWORD *)(v75 + 48) = v78;
    *(double *)(v75 + 56) = v80;
    v76 = swift_allocObject();
    *(_QWORD *)(v76 + 16) = v75;
    swift_retain();
    result = swift_bridgeObjectRelease();
    *v79 = v76;
  }
  return result;
}

{
  double v12;
  double v13;
  uint64_t v14;
  double v15;
  double v16;
  double v17;
  double v18;
  uint64_t v19;
  double v20;
  double v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  char v27;
  double v28;
  double v29;
  unint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  double v33;
  double v34;
  double v35;
  unint64_t v36;
  unint64_t v37;
  double *v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  double *v42;
  uint64_t result;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  unint64_t v48;
  unint64_t v49;
  double *v50;
  uint64_t v51;
  uint64_t v52;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v54;
  double v55;
  double v56;
  double v57;
  double v58;
  uint64_t v59;
  char v60;
  double v61;
  double v62;
  double v63;
  double v64;
  unint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  double v68;
  double v69;
  double v70;
  unint64_t v71;
  unint64_t v72;
  double *v73;
  char v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  double v78;
  uint64_t v79;
  double v80;
  double v81;
  unint64_t *v82;
  uint64_t *v83;
  _OWORD v84[2];
  __int128 v85;
  uint64_t v86;
  unint64_t v87;
  char v88;

  v12 = *(double *)a5;
  v13 = *(double *)(a5 + 8);
  v14 = a5 + 16;
  v15 = *(double *)(a5 + 16);
  *(_QWORD *)&v16 = *(unsigned __int8 *)(a5 + 24);
  v17 = *(double *)a3;
  v18 = *(double *)(a3 + 8);
  v19 = a3 + 16;
  *(_QWORD *)&v80 = *(unsigned __int8 *)(a3 + 24);
  v81 = *(double *)(a3 + 16);
  v21 = *(double *)(a3 + 32);
  v20 = *(double *)(a3 + 40);
  v22 = type metadata accessor for AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, ResolvedGradientVector>, AnimatablePair<CGFloat, CGFloat>>();
  if (v22 == MEMORY[0x24BEE13C8])
    return specialized combineAnimation<A>(into:state:value:elapsed:newAnimation:newValue:)(a1, a2, a4, v17, a6, v12);
  v82 = a2;
  v83 = a1;
  v79 = a4;
  if (v22 == type metadata accessor for AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>())
    return specialized combineAnimation<A>(into:state:value:elapsed:newAnimation:newValue:)(a1, a2, a4, v17, v18, v81, v80, a6, v12, v13, v15, v16);
  v23 = *a1;
  type metadata accessor for FontBox<Font.SystemProvider>(0, (unint64_t *)&lazy cache variable for type metadata for AnimationBox<DefaultCombiningAnimation>, (uint64_t (*)(void))lazy protocol witness table accessor for type DefaultCombiningAnimation and conformance DefaultCombiningAnimation, (uint64_t)&type metadata for DefaultCombiningAnimation, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimationBox);
  v24 = swift_dynamicCastClass();
  v78 = a6;
  if (v24)
  {
    v25 = *(_QWORD **)(v24 + 16);
    swift_bridgeObjectRetain();
    swift_release();
    *(_QWORD *)&v84[0] = *(_QWORD *)v19;
    BYTE8(v84[0]) = *(_BYTE *)(v19 + 8);
    v87 = *(_QWORD *)v14;
    v88 = *(_BYTE *)(v14 + 8);
    *(_QWORD *)&v85 = *(_QWORD *)v19;
    BYTE8(v85) = *(_BYTE *)(v19 + 8);
    outlined retain of LinearGradient((uint64_t)v84);
    ResolvedGradientVector.add(_:scaledBy:)((uint64_t)&v87, 1.0);
    v26 = v85;
    v27 = BYTE8(v85);
    v29 = *(double *)(a5 + 32);
    v28 = *(double *)(a5 + 40);
    v30 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
    v31 = swift_bridgeObjectRetain();
    v32 = (_QWORD *)specialized AnimationState.subscript.getter(v31, (uint64_t (*)(_QWORD))type metadata accessor for CombinedAnimationState<AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, ResolvedGradientVector>, AnimatablePair<CGFloat, CGFloat>>>);
    swift_bridgeObjectRelease();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v32 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v32[2] + 1, 1, v32);
    v33 = v12 + v17;
    v34 = v13 + v18;
    v35 = v20 + v28;
    v37 = v32[2];
    v36 = v32[3];
    if (v37 >= v36 >> 1)
      v32 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v36 > 1), v37 + 1, 1, v32);
    v32[2] = v37 + 1;
    v38 = (double *)&v32[7 * v37];
    v38[4] = v33;
    v38[5] = v34;
    *((_QWORD *)v38 + 6) = v26;
    *((_BYTE *)v38 + 56) = v27;
    v38[8] = v21 + v29;
    v38[9] = v35;
    *((_QWORD *)v38 + 10) = v30;
    type metadata accessor for CombinedAnimationState<AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, ResolvedGradientVector>, AnimatablePair<CGFloat, CGFloat>>>(0);
    v86 = v39;
    *(_QWORD *)&v85 = v32;
    specialized Dictionary.subscript.setter((uint64_t)&v85, v39);
    swift_retain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v25 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v25[2] + 1, 1, v25);
    v41 = v25[2];
    v40 = v25[3];
    if (v41 >= v40 >> 1)
      v25 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v40 > 1), v41 + 1, 1, v25);
    v25[2] = v41 + 1;
    v42 = (double *)&v25[2 * v41];
    *((_QWORD *)v42 + 4) = a4;
    v42[5] = v78;
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v25;
    *a1 = result;
  }
  else
  {
    v77 = v23;
    v44 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
    v45 = *a2;
    outlined retain of AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, ResolvedGradientVector>, AnimatablePair<Double, Double>>(a3);
    swift_bridgeObjectRetain();
    v46 = swift_bridgeObjectRetain();
    v47 = (_QWORD *)specialized AnimationState.subscript.getter(v46, (uint64_t (*)(_QWORD))type metadata accessor for CombinedAnimationState<AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, ResolvedGradientVector>, AnimatablePair<CGFloat, CGFloat>>>);
    swift_bridgeObjectRelease();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v47 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v47[2] + 1, 1, v47);
    v49 = v47[2];
    v48 = v47[3];
    if (v49 >= v48 >> 1)
      v47 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v48 > 1), v49 + 1, 1, v47);
    v47[2] = v49 + 1;
    v50 = (double *)&v47[7 * v49];
    v50[4] = v17;
    v50[5] = v18;
    v50[6] = v81;
    *((_BYTE *)v50 + 56) = LOBYTE(v80);
    v50[8] = v21;
    v50[9] = v20;
    *((_QWORD *)v50 + 10) = v45;
    type metadata accessor for CombinedAnimationState<AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, ResolvedGradientVector>, AnimatablePair<CGFloat, CGFloat>>>(0);
    v52 = v51;
    v86 = v51;
    *(_QWORD *)&v85 = v47;
    outlined init with take of Any(&v85, v84);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v87 = v44;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v84, v52, isUniquelyReferenced_nonNull_native);
    v54 = v87;
    swift_bridgeObjectRelease();
    v55 = *(double *)a3;
    v56 = *(double *)(a3 + 8);
    v87 = *(_QWORD *)v19;
    v88 = *(_BYTE *)(v19 + 8);
    v57 = *(double *)a5;
    v58 = *(double *)(a5 + 8);
    *(_QWORD *)&v84[0] = *(_QWORD *)v14;
    BYTE8(v84[0]) = *(_BYTE *)(v14 + 8);
    *(_QWORD *)&v85 = *(_QWORD *)v19;
    BYTE8(v85) = *(_BYTE *)(v19 + 8);
    outlined retain of LinearGradient((uint64_t)&v87);
    ResolvedGradientVector.add(_:scaledBy:)((uint64_t)v84, 1.0);
    v59 = v85;
    v60 = BYTE8(v85);
    v61 = *(double *)(a3 + 32);
    v62 = *(double *)(a3 + 40);
    v63 = *(double *)(a5 + 32);
    v64 = *(double *)(a5 + 40);
    v65 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
    v66 = swift_bridgeObjectRetain();
    v67 = (_QWORD *)specialized AnimationState.subscript.getter(v66, (uint64_t (*)(_QWORD))type metadata accessor for CombinedAnimationState<AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, ResolvedGradientVector>, AnimatablePair<CGFloat, CGFloat>>>);
    swift_bridgeObjectRelease();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v67 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v67[2] + 1, 1, v67);
    v68 = v55 + v57;
    v69 = v56 + v58;
    v70 = v61 + v63;
    v72 = v67[2];
    v71 = v67[3];
    if (v72 >= v71 >> 1)
      v67 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v71 > 1), v72 + 1, 1, v67);
    v67[2] = v72 + 1;
    v73 = (double *)&v67[7 * v72];
    v73[4] = v68;
    v73[5] = v69;
    *((_QWORD *)v73 + 6) = v59;
    *((_BYTE *)v73 + 56) = v60;
    v73[8] = v70;
    v73[9] = v62 + v64;
    *((_QWORD *)v73 + 10) = v65;
    v86 = v52;
    *(_QWORD *)&v85 = v67;
    outlined init with take of Any(&v85, v84);
    v74 = swift_isUniquelyReferenced_nonNull_native();
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v84, v52, v74);
    swift_bridgeObjectRelease();
    *v82 = v54;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<DefaultCombiningAnimation.Entry>, (uint64_t)&type metadata for DefaultCombiningAnimation.Entry, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
    v75 = swift_allocObject();
    *(_OWORD *)(v75 + 16) = xmmword_2352828C0;
    *(_QWORD *)(v75 + 32) = v77;
    *(_QWORD *)(v75 + 40) = 0;
    *(_QWORD *)(v75 + 48) = v79;
    *(double *)(v75 + 56) = v78;
    v76 = swift_allocObject();
    *(_QWORD *)(v76 + 16) = v75;
    swift_retain();
    result = swift_bridgeObjectRelease();
    *v83 = v76;
  }
  return result;
}

{
  double v12;
  double v13;
  uint64_t v14;
  double v15;
  double v16;
  double v17;
  double v18;
  uint64_t v19;
  double v20;
  double v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  char v27;
  double v28;
  double v29;
  unint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  double v33;
  double v34;
  double v35;
  unint64_t v36;
  unint64_t v37;
  double *v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  double *v42;
  uint64_t result;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  unint64_t v48;
  unint64_t v49;
  double *v50;
  uint64_t v51;
  uint64_t v52;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v54;
  double v55;
  double v56;
  double v57;
  double v58;
  uint64_t v59;
  char v60;
  double v61;
  double v62;
  double v63;
  double v64;
  unint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  double v68;
  double v69;
  double v70;
  unint64_t v71;
  unint64_t v72;
  double *v73;
  char v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  double v78;
  uint64_t v79;
  double v80;
  double v81;
  unint64_t *v82;
  uint64_t *v83;
  _OWORD v84[2];
  __int128 v85;
  uint64_t v86;
  unint64_t v87;
  char v88;

  v12 = *(double *)a5;
  v13 = *(double *)(a5 + 8);
  v14 = a5 + 16;
  v15 = *(double *)(a5 + 16);
  *(_QWORD *)&v16 = *(unsigned __int8 *)(a5 + 24);
  v17 = *(double *)a3;
  v18 = *(double *)(a3 + 8);
  v19 = a3 + 16;
  *(_QWORD *)&v80 = *(unsigned __int8 *)(a3 + 24);
  v81 = *(double *)(a3 + 16);
  v21 = *(double *)(a3 + 32);
  v20 = *(double *)(a3 + 40);
  v22 = type metadata accessor for AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, ResolvedGradientVector>, AnimatablePair<Double, Double>>();
  if (v22 == MEMORY[0x24BEE13C8])
    return specialized combineAnimation<A>(into:state:value:elapsed:newAnimation:newValue:)(a1, a2, a4, v17, a6, v12);
  v82 = a2;
  v83 = a1;
  v79 = a4;
  if (v22 == type metadata accessor for AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>())
    return specialized combineAnimation<A>(into:state:value:elapsed:newAnimation:newValue:)(a1, a2, a4, v17, v18, v81, v80, a6, v12, v13, v15, v16);
  v23 = *a1;
  type metadata accessor for FontBox<Font.SystemProvider>(0, (unint64_t *)&lazy cache variable for type metadata for AnimationBox<DefaultCombiningAnimation>, (uint64_t (*)(void))lazy protocol witness table accessor for type DefaultCombiningAnimation and conformance DefaultCombiningAnimation, (uint64_t)&type metadata for DefaultCombiningAnimation, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimationBox);
  v24 = swift_dynamicCastClass();
  v78 = a6;
  if (v24)
  {
    v25 = *(_QWORD **)(v24 + 16);
    swift_bridgeObjectRetain();
    swift_release();
    *(_QWORD *)&v84[0] = *(_QWORD *)v19;
    BYTE8(v84[0]) = *(_BYTE *)(v19 + 8);
    v87 = *(_QWORD *)v14;
    v88 = *(_BYTE *)(v14 + 8);
    *(_QWORD *)&v85 = *(_QWORD *)v19;
    BYTE8(v85) = *(_BYTE *)(v19 + 8);
    outlined retain of LinearGradient((uint64_t)v84);
    ResolvedGradientVector.add(_:scaledBy:)((uint64_t)&v87, 1.0);
    v26 = v85;
    v27 = BYTE8(v85);
    v29 = *(double *)(a5 + 32);
    v28 = *(double *)(a5 + 40);
    v30 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
    v31 = swift_bridgeObjectRetain();
    v32 = (_QWORD *)specialized AnimationState.subscript.getter(v31, (uint64_t (*)(_QWORD))type metadata accessor for CombinedAnimationState<AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, ResolvedGradientVector>, AnimatablePair<Double, Double>>>);
    swift_bridgeObjectRelease();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v32 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v32[2] + 1, 1, v32);
    v33 = v12 + v17;
    v34 = v13 + v18;
    v35 = v20 + v28;
    v37 = v32[2];
    v36 = v32[3];
    if (v37 >= v36 >> 1)
      v32 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v36 > 1), v37 + 1, 1, v32);
    v32[2] = v37 + 1;
    v38 = (double *)&v32[7 * v37];
    v38[4] = v33;
    v38[5] = v34;
    *((_QWORD *)v38 + 6) = v26;
    *((_BYTE *)v38 + 56) = v27;
    v38[8] = v21 + v29;
    v38[9] = v35;
    *((_QWORD *)v38 + 10) = v30;
    type metadata accessor for CombinedAnimationState<AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, ResolvedGradientVector>, AnimatablePair<Double, Double>>>(0);
    v86 = v39;
    *(_QWORD *)&v85 = v32;
    specialized Dictionary.subscript.setter((uint64_t)&v85, v39);
    swift_retain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v25 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v25[2] + 1, 1, v25);
    v41 = v25[2];
    v40 = v25[3];
    if (v41 >= v40 >> 1)
      v25 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v40 > 1), v41 + 1, 1, v25);
    v25[2] = v41 + 1;
    v42 = (double *)&v25[2 * v41];
    *((_QWORD *)v42 + 4) = a4;
    v42[5] = v78;
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v25;
    *a1 = result;
  }
  else
  {
    v77 = v23;
    v44 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
    v45 = *a2;
    outlined retain of AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, ResolvedGradientVector>, AnimatablePair<Double, Double>>(a3);
    swift_bridgeObjectRetain();
    v46 = swift_bridgeObjectRetain();
    v47 = (_QWORD *)specialized AnimationState.subscript.getter(v46, (uint64_t (*)(_QWORD))type metadata accessor for CombinedAnimationState<AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, ResolvedGradientVector>, AnimatablePair<Double, Double>>>);
    swift_bridgeObjectRelease();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v47 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v47[2] + 1, 1, v47);
    v49 = v47[2];
    v48 = v47[3];
    if (v49 >= v48 >> 1)
      v47 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v48 > 1), v49 + 1, 1, v47);
    v47[2] = v49 + 1;
    v50 = (double *)&v47[7 * v49];
    v50[4] = v17;
    v50[5] = v18;
    v50[6] = v81;
    *((_BYTE *)v50 + 56) = LOBYTE(v80);
    v50[8] = v21;
    v50[9] = v20;
    *((_QWORD *)v50 + 10) = v45;
    type metadata accessor for CombinedAnimationState<AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, ResolvedGradientVector>, AnimatablePair<Double, Double>>>(0);
    v52 = v51;
    v86 = v51;
    *(_QWORD *)&v85 = v47;
    outlined init with take of Any(&v85, v84);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v87 = v44;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v84, v52, isUniquelyReferenced_nonNull_native);
    v54 = v87;
    swift_bridgeObjectRelease();
    v55 = *(double *)a3;
    v56 = *(double *)(a3 + 8);
    v87 = *(_QWORD *)v19;
    v88 = *(_BYTE *)(v19 + 8);
    v57 = *(double *)a5;
    v58 = *(double *)(a5 + 8);
    *(_QWORD *)&v84[0] = *(_QWORD *)v14;
    BYTE8(v84[0]) = *(_BYTE *)(v14 + 8);
    *(_QWORD *)&v85 = *(_QWORD *)v19;
    BYTE8(v85) = *(_BYTE *)(v19 + 8);
    outlined retain of LinearGradient((uint64_t)&v87);
    ResolvedGradientVector.add(_:scaledBy:)((uint64_t)v84, 1.0);
    v59 = v85;
    v60 = BYTE8(v85);
    v61 = *(double *)(a3 + 32);
    v62 = *(double *)(a3 + 40);
    v63 = *(double *)(a5 + 32);
    v64 = *(double *)(a5 + 40);
    v65 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
    v66 = swift_bridgeObjectRetain();
    v67 = (_QWORD *)specialized AnimationState.subscript.getter(v66, (uint64_t (*)(_QWORD))type metadata accessor for CombinedAnimationState<AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, ResolvedGradientVector>, AnimatablePair<Double, Double>>>);
    swift_bridgeObjectRelease();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v67 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v67[2] + 1, 1, v67);
    v68 = v55 + v57;
    v69 = v56 + v58;
    v70 = v61 + v63;
    v72 = v67[2];
    v71 = v67[3];
    if (v72 >= v71 >> 1)
      v67 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v71 > 1), v72 + 1, 1, v67);
    v67[2] = v72 + 1;
    v73 = (double *)&v67[7 * v72];
    v73[4] = v68;
    v73[5] = v69;
    *((_QWORD *)v73 + 6) = v59;
    *((_BYTE *)v73 + 56) = v60;
    v73[8] = v70;
    v73[9] = v62 + v64;
    *((_QWORD *)v73 + 10) = v65;
    v86 = v52;
    *(_QWORD *)&v85 = v67;
    outlined init with take of Any(&v85, v84);
    v74 = swift_isUniquelyReferenced_nonNull_native();
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v84, v52, v74);
    swift_bridgeObjectRelease();
    *v82 = v54;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<DefaultCombiningAnimation.Entry>, (uint64_t)&type metadata for DefaultCombiningAnimation.Entry, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
    v75 = swift_allocObject();
    *(_OWORD *)(v75 + 16) = xmmword_2352828C0;
    *(_QWORD *)(v75 + 32) = v77;
    *(_QWORD *)(v75 + 40) = 0;
    *(_QWORD *)(v75 + 48) = v79;
    *(double *)(v75 + 56) = v78;
    v76 = swift_allocObject();
    *(_QWORD *)(v76 + 16) = v75;
    swift_retain();
    result = swift_bridgeObjectRelease();
    *v83 = v76;
  }
  return result;
}

{
  uint64_t v6;
  _QWORD *v12;
  double v13;
  double v14;
  double v15;
  uint64_t v16;
  _QWORD *v17;
  int8x16_t *v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  float v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  int64x2_t v30;
  float64x2_t v31;
  double v32;
  float32x2_t v33;
  int8x16_t v34;
  int64x2_t v35;
  float64x2_t v36;
  double v37;
  char v38;
  _QWORD *v39;
  uint64_t result;
  uint64_t v41;
  float v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  double *v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  double *v57;
  uint64_t v58;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  int64x2_t v63;
  float64x2_t v64;
  double v65;
  float32x2_t v66;
  int8x16_t v67;
  int64x2_t v68;
  float64x2_t v69;
  double v70;
  char v71;
  uint64_t v72;
  float v73;
  uint64_t v74;
  uint64_t v75;
  _QWORD *v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  _QWORD *v80;
  float v81;
  unint64_t v82;
  unint64_t v83;
  double *v84;
  char v85;
  uint64_t v86;
  uint64_t v87;
  _QWORD *v88;
  uint64_t v89;
  uint64_t v90;
  char v91;
  uint64_t v92;
  char v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  double v103;
  uint64_t v104;
  double v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t *v108;
  uint64_t *v109;
  int8x16_t v110;
  __int128 v111;
  uint64_t v112;
  _QWORD *v113;
  uint64_t v114;
  double v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  char v120;
  int8x16_t v121;
  _OWORD v122[5];
  __int128 v123;
  uint64_t v124;

  v6 = a5;
  v12 = *(_QWORD **)a5;
  v13 = *(double *)(a5 + 8);
  v14 = *(double *)(a5 + 16);
  v15 = *(double *)(a5 + 24);
  v16 = *(_QWORD *)a3;
  v17 = *(_QWORD **)(a3 + 8);
  v105 = *(double *)(a3 + 16);
  v107 = *(_QWORD *)(a3 + 24);
  v100 = *(_QWORD *)(a3 + 40);
  v102 = *(_QWORD *)(a3 + 32);
  v96 = *(_QWORD *)(a3 + 56);
  v98 = *(_QWORD *)(a3 + 48);
  v92 = *(_QWORD *)(a3 + 72);
  v94 = *(_QWORD *)(a3 + 64);
  v91 = *(_BYTE *)(a3 + 80);
  v18 = (int8x16_t *)(a3 + 88);
  v19 = *(_DWORD *)(a3 + 88);
  v90 = *(_QWORD *)(a3 + 96);
  v20 = type metadata accessor for AnimatablePair<_ShapeStyle_Pack.Fill.AnimatableData, AnimatablePair<Float, AnimatableArray<AnimatablePair<Float, _ShapeStyle_Pack.Effect.Kind.AnimatableData>>>>();
  if (v20 == MEMORY[0x24BEE13C8])
    return specialized combineAnimation<A>(into:state:value:elapsed:newAnimation:newValue:)(a1, a2, a4, *(double *)&v16, a6, *(double *)&v12);
  v108 = a2;
  v109 = a1;
  v104 = a4;
  if (v20 == type metadata accessor for AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>())
    return specialized combineAnimation<A>(into:state:value:elapsed:newAnimation:newValue:)(a1, a2, a4, *(double *)&v16, *(double *)&v17, v105, *(double *)&v107, a6, *(double *)&v12, v13, v14, v15);
  v21 = *a1;
  type metadata accessor for FontBox<Font.SystemProvider>(0, (unint64_t *)&lazy cache variable for type metadata for AnimationBox<DefaultCombiningAnimation>, (uint64_t (*)(void))lazy protocol witness table accessor for type DefaultCombiningAnimation and conformance DefaultCombiningAnimation, (uint64_t)&type metadata for DefaultCombiningAnimation, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimationBox);
  v22 = swift_dynamicCastClass();
  if (v22)
  {
    v17 = *(_QWORD **)(v22 + 16);
    swift_bridgeObjectRetain();
    swift_release();
    outlined init with take of _ShapeStyle_Pack.Fill.AnimatableData(a3, (uint64_t)&v123);
    outlined init with take of _ShapeStyle_Pack.Fill.AnimatableData(v6, (uint64_t)v122);
    outlined init with take of _ShapeStyle_Pack.Fill.AnimatableData((uint64_t)&v123, (uint64_t)&v111);
    outlined init with take of _ShapeStyle_Pack.Fill.AnimatableData((uint64_t)v122, (uint64_t)&v110);
    outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v123, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))outlined copy of _ShapeStyle_Pack.Fill.AnimatableData);
    specialized static _ShapeStyle_Pack.Fill.AnimatableData.+= infix(_:_:)(&v111, &v110);
    v110 = *v18;
    v23 = *(float *)(v6 + 88);
    v24 = *(_QWORD *)(v6 + 96);
    v25 = (_QWORD *)v110.i64[1];
    if (*(_QWORD *)(v24 + 16) >= *(_QWORD *)(v110.i64[1] + 16))
      v26 = *(_QWORD *)(v110.i64[1] + 16);
    else
      v26 = *(_QWORD *)(v24 + 16);
    outlined retain of AnimatablePair<Float, AnimatableArray<AnimatablePair<Float, _ShapeStyle_Pack.Effect.Kind.AnimatableData>>>((uint64_t)&v110);
    if (!v26)
    {
LABEL_19:
      LODWORD(v14) = v110.i32[0];
      v26 = *((_QWORD *)&v111 + 1);
      v24 = v111;
      v16 = v112;
      v12 = v113;
      v105 = v115;
      v107 = v114;
      v100 = v117;
      v102 = v116;
      v96 = v119;
      v98 = v118;
      LOBYTE(v94) = v120;
      v18 = (int8x16_t *)specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
      v41 = swift_bridgeObjectRetain();
      v6 = specialized AnimationState.subscript.getter(v41, (uint64_t (*)(_QWORD))type metadata accessor for CombinedAnimationState<AnimatablePair<_ShapeStyle_Pack.Fill.AnimatableData, AnimatablePair<Float, AnimatableArray<AnimatablePair<Float, _ShapeStyle_Pack.Effect.Kind.AnimatableData>>>>>);
      swift_bridgeObjectRelease();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
      {
LABEL_20:
        v42 = v23 + *(float *)&v14;
        v44 = *(_QWORD *)(v6 + 16);
        v43 = *(_QWORD *)(v6 + 24);
        if (v44 >= v43 >> 1)
          v6 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v43 > 1), v44 + 1, 1, (_QWORD *)v6);
        *(_QWORD *)(v6 + 16) = v44 + 1;
        v45 = v6 + 112 * v44;
        *(_QWORD *)(v45 + 32) = v24;
        *(_QWORD *)(v45 + 40) = v26;
        *(_QWORD *)(v45 + 48) = v16;
        *(_QWORD *)(v45 + 56) = v12;
        *(_QWORD *)(v45 + 64) = v107;
        *(double *)(v45 + 72) = v105;
        *(_QWORD *)(v45 + 80) = v102;
        *(_QWORD *)(v45 + 88) = v100;
        *(_QWORD *)(v45 + 96) = v98;
        *(_QWORD *)(v45 + 104) = v96;
        *(_BYTE *)(v45 + 112) = v94;
        *(float *)(v45 + 120) = v42;
        *(_QWORD *)(v45 + 128) = v25;
        *(_QWORD *)(v45 + 136) = v18;
        type metadata accessor for CombinedAnimationState<AnimatablePair<_ShapeStyle_Pack.Fill.AnimatableData, AnimatablePair<Float, AnimatableArray<AnimatablePair<Float, _ShapeStyle_Pack.Effect.Kind.AnimatableData>>>>>(0);
        v113 = (_QWORD *)v46;
        *(_QWORD *)&v111 = v6;
        specialized Dictionary.subscript.setter((uint64_t)&v111, v46);
        swift_retain();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v17 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v17[2] + 1, 1, v17);
        v48 = v17[2];
        v47 = v17[3];
        if (v48 >= v47 >> 1)
          v17 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v47 > 1), v48 + 1, 1, v17);
        v17[2] = v48 + 1;
        v49 = (double *)&v17[2 * v48];
        *((_QWORD *)v49 + 4) = v104;
        v49[5] = a6;
        result = swift_allocObject();
        *(_QWORD *)(result + 16) = v17;
        *v109 = result;
        return result;
      }
LABEL_53:
      v6 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v6 + 16) + 1, 1, (_QWORD *)v6);
      goto LABEL_20;
    }
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v25 = specialized _ArrayBuffer._consumeAndCreateNew()(v25);
    v27 = 0;
    v28 = 0;
    v29 = v25[2];
    while (v28 < v29)
    {
      v35 = *(int64x2_t *)(v24 + v27 + 40);
      v36 = *(float64x2_t *)(v24 + v27 + 56);
      v37 = *(double *)(v24 + v27 + 72);
      v38 = *(_BYTE *)(v24 + v27 + 80);
      v39 = &v25[v27 / 8];
      *(float *)&v25[v27 / 8 + 4] = *(float *)(v24 + v27 + 32) + *(float *)&v25[v27 / 8 + 4];
      if ((v38 & 1) == 0)
      {
        if ((v39[10] & 1) != 0)
        {
          v39[5] = v35.i64[0];
          *((int8x16_t *)v39 + 3) = vextq_s8((int8x16_t)v35, (int8x16_t)v36, 8uLL);
          v39[8] = *(_QWORD *)&v36.f64[1];
          v32 = v37;
        }
        else
        {
          v30 = *(int64x2_t *)(v39 + 5);
          v31 = *(float64x2_t *)(v39 + 7);
          v32 = *((double *)v39 + 9) + v37;
          v33 = vadd_f32((float32x2_t)vmovn_s64(v35), (float32x2_t)vmovn_s64(v30));
          v34.i64[0] = v33.u32[0];
          v34.i64[1] = v33.u32[1];
          *(int8x16_t *)(v39 + 5) = vorrq_s8((int8x16_t)vshll_n_s32((int32x2_t)vadd_f32((float32x2_t)vshrn_n_s64(v35, 0x20uLL), (float32x2_t)vshrn_n_s64(v30, 0x20uLL)), 0x20uLL), v34);
          *(float64x2_t *)(v39 + 7) = vaddq_f64(v31, v36);
        }
        *((double *)v39 + 9) = v32;
        *((_BYTE *)v39 + 80) = 0;
      }
      ++v28;
      v27 += 56;
      if (v26 == v28)
        goto LABEL_19;
    }
    __break(1u);
LABEL_52:
    __break(1u);
    goto LABEL_53;
  }
  v50 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  v51 = *v108;
  outlined retain of AnimatablePair<_ShapeStyle_Pack.Fill.AnimatableData, AnimatablePair<Float, AnimatableArray<AnimatablePair<Float, _ShapeStyle_Pack.Effect.Kind.AnimatableData>>>>(a3);
  v52 = v51;
  swift_bridgeObjectRetain();
  v53 = swift_bridgeObjectRetain();
  v12 = (_QWORD *)specialized AnimationState.subscript.getter(v53, (uint64_t (*)(_QWORD))type metadata accessor for CombinedAnimationState<AnimatablePair<_ShapeStyle_Pack.Fill.AnimatableData, AnimatablePair<Float, AnimatableArray<AnimatablePair<Float, _ShapeStyle_Pack.Effect.Kind.AnimatableData>>>>>);
  swift_bridgeObjectRelease();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v12[2] + 1, 1, v12);
  v55 = v12[2];
  v54 = v12[3];
  v56 = v55 + 1;
  v89 = v21;
  if (v55 >= v54 >> 1)
  {
    v88 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v54 > 1), v55 + 1, 1, v12);
    v56 = v55 + 1;
    v12 = v88;
  }
  v12[2] = v56;
  v57 = (double *)&v12[14 * v55];
  *((_QWORD *)v57 + 4) = v16;
  *((_QWORD *)v57 + 5) = v17;
  v57[6] = v105;
  *((_QWORD *)v57 + 7) = v107;
  *((_QWORD *)v57 + 8) = v102;
  *((_QWORD *)v57 + 9) = v100;
  *((_QWORD *)v57 + 10) = v98;
  *((_QWORD *)v57 + 11) = v96;
  *((_QWORD *)v57 + 12) = v94;
  *((_QWORD *)v57 + 13) = v92;
  *((_BYTE *)v57 + 112) = v91;
  *((_DWORD *)v57 + 30) = v19;
  *((_QWORD *)v57 + 16) = v90;
  *((_QWORD *)v57 + 17) = v52;
  type metadata accessor for CombinedAnimationState<AnimatablePair<_ShapeStyle_Pack.Fill.AnimatableData, AnimatablePair<Float, AnimatableArray<AnimatablePair<Float, _ShapeStyle_Pack.Effect.Kind.AnimatableData>>>>>(0);
  v16 = v58;
  v124 = v58;
  *(_QWORD *)&v123 = v12;
  outlined init with take of Any(&v123, v122);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)&v111 = v50;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v122, v16, isUniquelyReferenced_nonNull_native);
  v25 = (_QWORD *)v50;
  swift_bridgeObjectRelease();
  outlined init with take of _ShapeStyle_Pack.Fill.AnimatableData(a3, (uint64_t)&v123);
  outlined init with take of _ShapeStyle_Pack.Fill.AnimatableData(v6, (uint64_t)v122);
  outlined init with take of _ShapeStyle_Pack.Fill.AnimatableData((uint64_t)&v123, (uint64_t)&v111);
  outlined init with take of _ShapeStyle_Pack.Fill.AnimatableData((uint64_t)v122, (uint64_t)&v110);
  outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v123, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))outlined copy of _ShapeStyle_Pack.Fill.AnimatableData);
  specialized static _ShapeStyle_Pack.Fill.AnimatableData.+= infix(_:_:)(&v111, &v110);
  v121 = *v18;
  v23 = *(float *)(v6 + 88);
  v24 = *(_QWORD *)(v6 + 96);
  v6 = v121.i64[1];
  if (*(_QWORD *)(v24 + 16) >= *(_QWORD *)(v121.i64[1] + 16))
    v26 = *(_QWORD *)(v121.i64[1] + 16);
  else
    v26 = *(_QWORD *)(v24 + 16);
  outlined retain of AnimatablePair<Float, AnimatableArray<AnimatablePair<Float, _ShapeStyle_Pack.Effect.Kind.AnimatableData>>>((uint64_t)&v121);
  v107 = v16;
  if (v26)
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v6 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()((_QWORD *)v6);
    v60 = 0;
    v61 = 0;
    v62 = *(_QWORD *)(v6 + 16);
    while (v61 < v62)
    {
      v68 = *(int64x2_t *)(v24 + v60 + 40);
      v69 = *(float64x2_t *)(v24 + v60 + 56);
      v70 = *(double *)(v24 + v60 + 72);
      v71 = *(_BYTE *)(v24 + v60 + 80);
      v72 = v6 + v60;
      *(float *)(v6 + v60 + 32) = *(float *)(v24 + v60 + 32) + *(float *)(v6 + v60 + 32);
      if ((v71 & 1) == 0)
      {
        if ((*(_BYTE *)(v72 + 80) & 1) != 0)
        {
          *(_QWORD *)(v72 + 40) = v68.i64[0];
          *(int8x16_t *)(v72 + 48) = vextq_s8((int8x16_t)v68, (int8x16_t)v69, 8uLL);
          *(float64_t *)(v72 + 64) = v69.f64[1];
          v65 = v70;
        }
        else
        {
          v63 = *(int64x2_t *)(v72 + 40);
          v64 = *(float64x2_t *)(v72 + 56);
          v65 = *(double *)(v72 + 72) + v70;
          v66 = vadd_f32((float32x2_t)vmovn_s64(v68), (float32x2_t)vmovn_s64(v63));
          v67.i64[0] = v66.u32[0];
          v67.i64[1] = v66.u32[1];
          *(int8x16_t *)(v72 + 40) = vorrq_s8((int8x16_t)vshll_n_s32((int32x2_t)vadd_f32((float32x2_t)vshrn_n_s64(v68, 0x20uLL), (float32x2_t)vshrn_n_s64(v63, 0x20uLL)), 0x20uLL), v67);
          *(float64x2_t *)(v72 + 56) = vaddq_f64(v64, v69);
        }
        *(double *)(v72 + 72) = v65;
        *(_BYTE *)(v72 + 80) = 0;
      }
      ++v61;
      v60 += 56;
      if (v26 == v61)
        goto LABEL_46;
    }
    goto LABEL_52;
  }
LABEL_46:
  v73 = *(float *)v121.i32;
  v74 = *((_QWORD *)&v111 + 1);
  v106 = v111;
  v75 = v112;
  v76 = v113;
  v77 = v114;
  v101 = v116;
  v103 = v115;
  v97 = v118;
  v99 = v117;
  v95 = v119;
  v93 = v120;
  v78 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  v79 = swift_bridgeObjectRetain();
  v80 = (_QWORD *)specialized AnimationState.subscript.getter(v79, (uint64_t (*)(_QWORD))type metadata accessor for CombinedAnimationState<AnimatablePair<_ShapeStyle_Pack.Fill.AnimatableData, AnimatablePair<Float, AnimatableArray<AnimatablePair<Float, _ShapeStyle_Pack.Effect.Kind.AnimatableData>>>>>);
  swift_bridgeObjectRelease();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v80 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v80[2] + 1, 1, v80);
  v81 = v23 + v73;
  v83 = v80[2];
  v82 = v80[3];
  if (v83 >= v82 >> 1)
    v80 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v82 > 1), v83 + 1, 1, v80);
  v80[2] = v83 + 1;
  v84 = (double *)&v80[14 * v83];
  *((_QWORD *)v84 + 4) = v106;
  *((_QWORD *)v84 + 5) = v74;
  *((_QWORD *)v84 + 6) = v75;
  *((_QWORD *)v84 + 7) = v76;
  *((_QWORD *)v84 + 8) = v77;
  v84[9] = v103;
  *((_QWORD *)v84 + 10) = v101;
  *((_QWORD *)v84 + 11) = v99;
  *((_QWORD *)v84 + 12) = v97;
  *((_QWORD *)v84 + 13) = v95;
  *((_BYTE *)v84 + 112) = v93;
  *((float *)v84 + 30) = v81;
  *((_QWORD *)v84 + 16) = v6;
  *((_QWORD *)v84 + 17) = v78;
  v113 = (_QWORD *)v107;
  *(_QWORD *)&v111 = v80;
  outlined init with take of Any(&v111, &v110);
  v85 = swift_isUniquelyReferenced_nonNull_native();
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(&v110, v107, v85);
  swift_bridgeObjectRelease();
  *v108 = (unint64_t)v25;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<DefaultCombiningAnimation.Entry>, (uint64_t)&type metadata for DefaultCombiningAnimation.Entry, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
  v86 = swift_allocObject();
  *(_OWORD *)(v86 + 16) = xmmword_2352828C0;
  *(_QWORD *)(v86 + 32) = v89;
  *(_QWORD *)(v86 + 40) = 0;
  *(_QWORD *)(v86 + 48) = v104;
  *(double *)(v86 + 56) = a6;
  v87 = swift_allocObject();
  *(_QWORD *)(v87 + 16) = v86;
  swift_retain();
  result = swift_bridgeObjectRelease();
  *v109 = v87;
  return result;
}

{
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  unint64_t v33;
  unint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  double *v39;
  uint64_t result;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  unint64_t v45;
  unint64_t v46;
  double *v47;
  uint64_t v48;
  uint64_t v49;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  unint64_t v60;
  unint64_t v61;
  _QWORD *v62;
  char v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  char v68;
  uint64_t v69;
  char v70;
  char v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  unint64_t v87;
  uint64_t *v88;
  unint64_t *v89;
  uint64_t v90;
  int8x16_t v91;
  uint64_t v92;
  unint64_t v93;
  _OWORD v94[2];
  __int128 v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  char v104;
  unint64_t v105;
  _QWORD v106[10];
  char v107;
  _QWORD v108[12];

  outlined init with take of _ShapeStyle_Pack.Fill.AnimatableData(a5, (uint64_t)v108);
  v12 = *(double *)v108;
  v13 = *(double *)&v108[1];
  v14 = *(double *)&v108[2];
  v15 = *(double *)&v108[3];
  outlined init with take of _ShapeStyle_Pack.Fill.AnimatableData(a3, (uint64_t)v106);
  v16 = *(double *)v106;
  v17 = *(double *)&v106[1];
  v19 = *(double *)&v106[2];
  v18 = *(double *)&v106[3];
  v20 = v106[4];
  v82 = v106[6];
  v85 = v106[5];
  v76 = v106[8];
  v79 = v106[7];
  v73 = v106[9];
  v70 = v107;
  if ((ValueMetadata *)type metadata accessor for AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>() == &type metadata for _ShapeStyle_Pack.Fill.AnimatableData)
    return specialized combineAnimation<A>(into:state:value:elapsed:newAnimation:newValue:)(a1, a2, a4, v16, v17, v19, v18, a6, v12, v13, v14, v15);
  v90 = a4;
  v88 = a1;
  v21 = *a1;
  type metadata accessor for FontBox<Font.SystemProvider>(0, (unint64_t *)&lazy cache variable for type metadata for AnimationBox<DefaultCombiningAnimation>, (uint64_t (*)(void))lazy protocol witness table accessor for type DefaultCombiningAnimation and conformance DefaultCombiningAnimation, (uint64_t)&type metadata for DefaultCombiningAnimation, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimationBox);
  v22 = swift_dynamicCastClass();
  v89 = a2;
  if (v22)
  {
    v23 = *(_QWORD **)(v22 + 16);
    swift_bridgeObjectRetain();
    swift_release();
    outlined init with take of _ShapeStyle_Pack.Fill.AnimatableData(a3, (uint64_t)&v95);
    outlined init with take of _ShapeStyle_Pack.Fill.AnimatableData(a5, (uint64_t)&v91);
    outlined retain of Text.Effect.ResolvedDrawing.Operation(a3, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))outlined copy of _ShapeStyle_Pack.Fill.AnimatableData);
    specialized static _ShapeStyle_Pack.Fill.AnimatableData.+= infix(_:_:)(&v95, &v91);
    v24 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
    v25 = *((_QWORD *)&v95 + 1);
    v83 = v95;
    v86 = v24;
    v26 = v96;
    v27 = v97;
    v28 = v98;
    v29 = v99;
    v30 = v100;
    v77 = v102;
    v80 = v101;
    v74 = v103;
    v71 = v104;
    v31 = swift_bridgeObjectRetain();
    v32 = (_QWORD *)specialized AnimationState.subscript.getter(v31, &lazy cache variable for type metadata for CombinedAnimationState<_ShapeStyle_Pack.Fill.AnimatableData>, (uint64_t (*)(void))lazy protocol witness table accessor for type _ShapeStyle_Pack.Fill.AnimatableData and conformance _ShapeStyle_Pack.Fill.AnimatableData, (uint64_t)&type metadata for _ShapeStyle_Pack.Fill.AnimatableData);
    swift_bridgeObjectRelease();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v32 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v32[2] + 1, 1, v32);
    v34 = v32[2];
    v33 = v32[3];
    if (v34 >= v33 >> 1)
      v32 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v33 > 1), v34 + 1, 1, v32);
    v32[2] = v34 + 1;
    v35 = &v32[12 * v34];
    v35[4] = v83;
    v35[5] = v25;
    v35[6] = v26;
    v35[7] = v27;
    v35[8] = v28;
    v35[9] = v29;
    v35[10] = v30;
    v35[11] = v80;
    v35[12] = v77;
    v35[13] = v74;
    *((_BYTE *)v35 + 112) = v71;
    v35[15] = v86;
    type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for CombinedAnimationState<_ShapeStyle_Pack.Fill.AnimatableData>, (uint64_t (*)(void))lazy protocol witness table accessor for type _ShapeStyle_Pack.Fill.AnimatableData and conformance _ShapeStyle_Pack.Fill.AnimatableData, (uint64_t)&type metadata for _ShapeStyle_Pack.Fill.AnimatableData, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for CombinedAnimationState);
    v97 = v36;
    *(_QWORD *)&v95 = v32;
    specialized Dictionary.subscript.setter((uint64_t)&v95, v36);
    swift_retain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v23 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v23[2] + 1, 1, v23);
    v38 = v23[2];
    v37 = v23[3];
    if (v38 >= v37 >> 1)
      v23 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v37 > 1), v38 + 1, 1, v23);
    v23[2] = v38 + 1;
    v39 = (double *)&v23[2 * v38];
    *((_QWORD *)v39 + 4) = v90;
    v39[5] = a6;
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v23;
    *v88 = result;
  }
  else
  {
    v69 = v21;
    v41 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
    v42 = *a2;
    outlined init with take of _ShapeStyle_Pack.Fill.AnimatableData(a3, (uint64_t)&v95);
    v105 = v42;
    outlined retain of Text.Effect.ResolvedDrawing.Operation(a3, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))outlined copy of _ShapeStyle_Pack.Fill.AnimatableData);
    v67 = v42;
    swift_bridgeObjectRetain();
    v43 = swift_bridgeObjectRetain();
    v44 = (_QWORD *)specialized AnimationState.subscript.getter(v43, &lazy cache variable for type metadata for CombinedAnimationState<_ShapeStyle_Pack.Fill.AnimatableData>, (uint64_t (*)(void))lazy protocol witness table accessor for type _ShapeStyle_Pack.Fill.AnimatableData and conformance _ShapeStyle_Pack.Fill.AnimatableData, (uint64_t)&type metadata for _ShapeStyle_Pack.Fill.AnimatableData);
    swift_bridgeObjectRelease();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v44 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v44[2] + 1, 1, v44);
    v46 = v44[2];
    v45 = v44[3];
    if (v46 >= v45 >> 1)
      v44 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v45 > 1), v46 + 1, 1, v44);
    v44[2] = v46 + 1;
    v47 = (double *)&v44[12 * v46];
    v47[4] = v16;
    v47[5] = v17;
    v47[6] = v19;
    v47[7] = v18;
    *((_QWORD *)v47 + 8) = v20;
    *((_QWORD *)v47 + 9) = v85;
    *((_QWORD *)v47 + 10) = v82;
    *((_QWORD *)v47 + 11) = v79;
    *((_QWORD *)v47 + 12) = v76;
    *((_QWORD *)v47 + 13) = v73;
    *((_BYTE *)v47 + 112) = v70;
    *((_QWORD *)v47 + 15) = v67;
    type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for CombinedAnimationState<_ShapeStyle_Pack.Fill.AnimatableData>, (uint64_t (*)(void))lazy protocol witness table accessor for type _ShapeStyle_Pack.Fill.AnimatableData and conformance _ShapeStyle_Pack.Fill.AnimatableData, (uint64_t)&type metadata for _ShapeStyle_Pack.Fill.AnimatableData, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for CombinedAnimationState);
    v49 = v48;
    v92 = v48;
    v91.i64[0] = (uint64_t)v44;
    outlined init with take of Any(&v91, v94);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v93 = v41;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v94, v49, isUniquelyReferenced_nonNull_native);
    v51 = v93;
    swift_bridgeObjectRelease();
    outlined init with take of _ShapeStyle_Pack.Fill.AnimatableData(a3, (uint64_t)&v95);
    outlined init with take of _ShapeStyle_Pack.Fill.AnimatableData(a5, (uint64_t)&v91);
    outlined retain of Text.Effect.ResolvedDrawing.Operation(a3, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))outlined copy of _ShapeStyle_Pack.Fill.AnimatableData);
    specialized static _ShapeStyle_Pack.Fill.AnimatableData.+= infix(_:_:)(&v95, &v91);
    v52 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
    v53 = *((_QWORD *)&v95 + 1);
    v84 = v95;
    v87 = v52;
    v54 = v96;
    v55 = v97;
    v57 = v98;
    v56 = v99;
    v78 = v101;
    v81 = v100;
    v72 = v103;
    v75 = v102;
    v68 = v104;
    v58 = swift_bridgeObjectRetain();
    v59 = (_QWORD *)specialized AnimationState.subscript.getter(v58, &lazy cache variable for type metadata for CombinedAnimationState<_ShapeStyle_Pack.Fill.AnimatableData>, (uint64_t (*)(void))lazy protocol witness table accessor for type _ShapeStyle_Pack.Fill.AnimatableData and conformance _ShapeStyle_Pack.Fill.AnimatableData, (uint64_t)&type metadata for _ShapeStyle_Pack.Fill.AnimatableData);
    swift_bridgeObjectRelease();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v59 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v59[2] + 1, 1, v59);
    v61 = v59[2];
    v60 = v59[3];
    if (v61 >= v60 >> 1)
      v59 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v60 > 1), v61 + 1, 1, v59);
    v59[2] = v61 + 1;
    v62 = &v59[12 * v61];
    v62[4] = v84;
    v62[5] = v53;
    v62[6] = v54;
    v62[7] = v55;
    v62[8] = v57;
    v62[9] = v56;
    v62[10] = v81;
    v62[11] = v78;
    v62[12] = v75;
    v62[13] = v72;
    *((_BYTE *)v62 + 112) = v68;
    v62[15] = v87;
    v97 = v49;
    *(_QWORD *)&v95 = v59;
    outlined init with take of Any(&v95, &v91);
    v63 = swift_isUniquelyReferenced_nonNull_native();
    *(_QWORD *)&v94[0] = v51;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(&v91, v49, v63);
    v64 = *(_QWORD *)&v94[0];
    swift_bridgeObjectRelease();
    *v89 = v64;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<DefaultCombiningAnimation.Entry>, (uint64_t)&type metadata for DefaultCombiningAnimation.Entry, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
    v65 = swift_allocObject();
    *(_OWORD *)(v65 + 16) = xmmword_2352828C0;
    *(_QWORD *)(v65 + 32) = v69;
    *(_QWORD *)(v65 + 40) = 0;
    *(_QWORD *)(v65 + 48) = v90;
    *(double *)(v65 + 56) = a6;
    v66 = swift_allocObject();
    *(_QWORD *)(v66 + 16) = v65;
    swift_retain();
    result = swift_bridgeObjectRelease();
    *v88 = v66;
  }
  return result;
}

{
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t result;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  unint64_t v31;
  unint64_t v32;
  double *v33;
  double v34;
  uint64_t v35;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  unint64_t v40;
  unint64_t v41;
  double *v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  double *v46;
  unint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  double *v53;
  char v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t *v58;
  char v59;
  double v60;
  char v61;
  unint64_t *v62;
  unint64_t v63;
  _OWORD v64[2];
  __int128 v65;
  uint64_t v66;
  _BYTE v67[40];
  char v68;
  unint64_t v69;
  _QWORD v70[5];
  char v71;
  _QWORD v72[5];
  char v73;
  __int128 v74;
  double v75;
  double v76;
  double v77;
  char v78;

  outlined init with take of _ShapeStyle_Pack.Effect.Kind.AnimatableData(a5, (uint64_t)v72);
  v13 = *(double *)v72;
  v12 = *(double *)&v72[1];
  v14 = *(double *)&v72[2];
  v15 = *(double *)&v72[3];
  v16 = *(double *)&v72[4];
  v61 = v73;
  outlined init with take of _ShapeStyle_Pack.Effect.Kind.AnimatableData(a3, (uint64_t)v70);
  v17 = *(double *)v70;
  v18 = *(double *)&v70[1];
  v19 = *(double *)&v70[2];
  v20 = *(double *)&v70[3];
  v21 = *(double *)&v70[4];
  v22 = v71;
  if ((ValueMetadata *)type metadata accessor for AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>() == &type metadata for _ShapeStyle_Pack.Effect.Kind.AnimatableData)
    return specialized combineAnimation<A>(into:state:value:elapsed:newAnimation:newValue:)(a1, a2, a4, v17, v18, v19, v20, a6, v13, v12, v14, v15);
  v60 = v12;
  v63 = *(_QWORD *)&v18;
  v23 = *a1;
  type metadata accessor for FontBox<Font.SystemProvider>(0, (unint64_t *)&lazy cache variable for type metadata for AnimationBox<DefaultCombiningAnimation>, (uint64_t (*)(void))lazy protocol witness table accessor for type DefaultCombiningAnimation and conformance DefaultCombiningAnimation, (uint64_t)&type metadata for DefaultCombiningAnimation, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimationBox);
  v24 = swift_dynamicCastClass();
  v62 = a2;
  if (v24)
  {
    v25 = *(_QWORD **)(v24 + 16);
    swift_bridgeObjectRetain();
    swift_release();
    outlined init with take of _ShapeStyle_Pack.Effect.Kind.AnimatableData(a5, (uint64_t)v67);
    if ((v68 & 1) == 0)
    {
      outlined init with take of _ShapeStyle_Pack.Effect.Kind.AnimatableData(a3, (uint64_t)&v74);
      if (v78 == 1)
      {
        v17 = v13;
        v63 = *(_QWORD *)&v60;
        v19 = v14;
        v20 = v15;
        v21 = v16;
        v22 = v61;
      }
      else
      {
        v22 = 0;
        *(_QWORD *)&v17 = COERCE_UNSIGNED_INT(*(float *)&v74 + *(float *)&v13) | ((unint64_t)COERCE_UNSIGNED_INT(*((float *)&v74 + 1) + *((float *)&v13 + 1)) << 32);
        v63 = COERCE_UNSIGNED_INT(*((float *)&v74 + 2) + *(float *)&v60) | ((unint64_t)COERCE_UNSIGNED_INT(*((float *)&v74 + 3)+ *((float *)&v60 + 1)) << 32);
        v19 = v75 + v14;
        v20 = v76 + v15;
        v21 = v77 + v16;
      }
    }
    v37 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
    v38 = swift_bridgeObjectRetain();
    v39 = (_QWORD *)specialized AnimationState.subscript.getter(v38, &lazy cache variable for type metadata for CombinedAnimationState<_ShapeStyle_Pack.Effect.Kind.AnimatableData>, (uint64_t (*)(void))lazy protocol witness table accessor for type _ShapeStyle_Pack.Effect.Kind.AnimatableData and conformance _ShapeStyle_Pack.Effect.Kind.AnimatableData, (uint64_t)&type metadata for _ShapeStyle_Pack.Effect.Kind.AnimatableData);
    swift_bridgeObjectRelease();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v39 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v39[2] + 1, 1, v39);
    v41 = v39[2];
    v40 = v39[3];
    if (v41 >= v40 >> 1)
      v39 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v40 > 1), v41 + 1, 1, v39);
    v39[2] = v41 + 1;
    v42 = (double *)&v39[7 * v41];
    v42[4] = v17;
    *((_QWORD *)v42 + 5) = v63;
    v42[6] = v19;
    v42[7] = v20;
    v42[8] = v21;
    *((_BYTE *)v42 + 72) = v22;
    *((_QWORD *)v42 + 10) = v37;
    type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for CombinedAnimationState<_ShapeStyle_Pack.Effect.Kind.AnimatableData>, (uint64_t (*)(void))lazy protocol witness table accessor for type _ShapeStyle_Pack.Effect.Kind.AnimatableData and conformance _ShapeStyle_Pack.Effect.Kind.AnimatableData, (uint64_t)&type metadata for _ShapeStyle_Pack.Effect.Kind.AnimatableData, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for CombinedAnimationState);
    v66 = v43;
    *(_QWORD *)&v65 = v39;
    specialized Dictionary.subscript.setter((uint64_t)&v65, v43);
    swift_retain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v25 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v25[2] + 1, 1, v25);
    v45 = v25[2];
    v44 = v25[3];
    if (v45 >= v44 >> 1)
      v25 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v44 > 1), v45 + 1, 1, v25);
    v25[2] = v45 + 1;
    v46 = (double *)&v25[2 * v45];
    *((_QWORD *)v46 + 4) = a4;
    v46[5] = a6;
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v25;
    *a1 = result;
  }
  else
  {
    v59 = v22;
    v58 = a1;
    v27 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
    v28 = *a2;
    outlined init with take of _ShapeStyle_Pack.Effect.Kind.AnimatableData(a3, (uint64_t)v67);
    v69 = v28;
    swift_bridgeObjectRetain();
    v29 = swift_bridgeObjectRetain();
    v30 = (_QWORD *)specialized AnimationState.subscript.getter(v29, &lazy cache variable for type metadata for CombinedAnimationState<_ShapeStyle_Pack.Effect.Kind.AnimatableData>, (uint64_t (*)(void))lazy protocol witness table accessor for type _ShapeStyle_Pack.Effect.Kind.AnimatableData and conformance _ShapeStyle_Pack.Effect.Kind.AnimatableData, (uint64_t)&type metadata for _ShapeStyle_Pack.Effect.Kind.AnimatableData);
    swift_bridgeObjectRelease();
    v57 = a4;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v30 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v30[2] + 1, 1, v30);
    v32 = v30[2];
    v31 = v30[3];
    if (v32 >= v31 >> 1)
      v30 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v31 > 1), v32 + 1, 1, v30);
    v30[2] = v32 + 1;
    v33 = (double *)&v30[7 * v32];
    v33[4] = v17;
    *((_QWORD *)v33 + 5) = v63;
    v33[6] = v19;
    v33[7] = v20;
    v33[8] = v21;
    *((_BYTE *)v33 + 72) = v59;
    *((_QWORD *)v33 + 10) = v28;
    type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for CombinedAnimationState<_ShapeStyle_Pack.Effect.Kind.AnimatableData>, (uint64_t (*)(void))lazy protocol witness table accessor for type _ShapeStyle_Pack.Effect.Kind.AnimatableData and conformance _ShapeStyle_Pack.Effect.Kind.AnimatableData, (uint64_t)&type metadata for _ShapeStyle_Pack.Effect.Kind.AnimatableData, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for CombinedAnimationState);
    v35 = *(_QWORD *)&v34;
    v76 = v34;
    *(_QWORD *)&v74 = v30;
    outlined init with take of Any(&v74, &v65);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(_QWORD *)&v64[0] = v27;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(&v65, v35, isUniquelyReferenced_nonNull_native);
    swift_bridgeObjectRelease();
    outlined init with take of _ShapeStyle_Pack.Effect.Kind.AnimatableData(a5, (uint64_t)v67);
    if ((v68 & 1) == 0)
    {
      outlined init with take of _ShapeStyle_Pack.Effect.Kind.AnimatableData(a3, (uint64_t)&v74);
      if (v78 == 1)
      {
        v17 = v13;
        v63 = *(_QWORD *)&v60;
        v19 = v14;
        v20 = v15;
        v21 = v16;
        v59 = v61;
      }
      else
      {
        v59 = 0;
        *(_QWORD *)&v17 = COERCE_UNSIGNED_INT(*(float *)&v74 + *(float *)&v13) | ((unint64_t)COERCE_UNSIGNED_INT(*((float *)&v74 + 1) + *((float *)&v13 + 1)) << 32);
        v63 = COERCE_UNSIGNED_INT(*((float *)&v74 + 2) + *(float *)&v60) | ((unint64_t)COERCE_UNSIGNED_INT(*((float *)&v74 + 3)+ *((float *)&v60 + 1)) << 32);
        v19 = v75 + v14;
        v20 = v76 + v15;
        v21 = v77 + v16;
      }
    }
    v47 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
    v48 = swift_bridgeObjectRetain();
    v49 = (_QWORD *)specialized AnimationState.subscript.getter(v48, &lazy cache variable for type metadata for CombinedAnimationState<_ShapeStyle_Pack.Effect.Kind.AnimatableData>, (uint64_t (*)(void))lazy protocol witness table accessor for type _ShapeStyle_Pack.Effect.Kind.AnimatableData and conformance _ShapeStyle_Pack.Effect.Kind.AnimatableData, (uint64_t)&type metadata for _ShapeStyle_Pack.Effect.Kind.AnimatableData);
    swift_bridgeObjectRelease();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v49 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v49[2] + 1, 1, v49);
    v50 = v23;
    v52 = v49[2];
    v51 = v49[3];
    if (v52 >= v51 >> 1)
      v49 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v51 > 1), v52 + 1, 1, v49);
    v49[2] = v52 + 1;
    v53 = (double *)&v49[7 * v52];
    v53[4] = v17;
    *((_QWORD *)v53 + 5) = v63;
    v53[6] = v19;
    v53[7] = v20;
    v53[8] = v21;
    *((_BYTE *)v53 + 72) = v59;
    *((_QWORD *)v53 + 10) = v47;
    v66 = v35;
    *(_QWORD *)&v65 = v49;
    outlined init with take of Any(&v65, v64);
    v54 = swift_isUniquelyReferenced_nonNull_native();
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v64, v35, v54);
    swift_bridgeObjectRelease();
    *v62 = v27;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<DefaultCombiningAnimation.Entry>, (uint64_t)&type metadata for DefaultCombiningAnimation.Entry, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
    v55 = swift_allocObject();
    *(_OWORD *)(v55 + 16) = xmmword_2352828C0;
    *(_QWORD *)(v55 + 32) = v50;
    *(_QWORD *)(v55 + 40) = 0;
    *(_QWORD *)(v55 + 48) = v57;
    *(double *)(v55 + 56) = a6;
    v56 = swift_allocObject();
    *(_QWORD *)(v56 + 16) = v55;
    swift_retain();
    result = swift_bridgeObjectRelease();
    *v58 = v56;
  }
  return result;
}

{
  float v12;
  double v13;
  double v14;
  double v15;
  float v16;
  double v17;
  double v18;
  double v19;
  double v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  char v26;
  double v27;
  double v28;
  uint64_t result;
  double v30;
  unint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  unint64_t v34;
  unint64_t v35;
  float *v36;
  uint64_t v37;
  uint64_t v38;
  char isUniquelyReferenced_nonNull_native;
  int64x2_t v40;
  char v41;
  double v42;
  double v43;
  double v44;
  uint64_t *v45;
  float v46;
  int64x2_t v47;
  unsigned int v48;
  unint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  unint64_t v52;
  unint64_t v53;
  float *v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  double *v58;
  float32x2_t v59;
  int8x16_t v60;
  float v61;
  float v62;
  unint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  float v66;
  unint64_t v67;
  unint64_t v68;
  _QWORD *v69;
  char v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t *v76;
  double v77;
  int8x16_t v78;
  _OWORD v79[2];
  __int128 v80;
  uint64_t v81;

  v12 = *(float *)a5;
  v13 = *(double *)(a5 + 8);
  v14 = *(double *)(a5 + 16);
  v15 = *(double *)(a5 + 24);
  v16 = *(float *)a3;
  v17 = *(double *)(a3 + 8);
  v18 = *(double *)(a3 + 16);
  v19 = *(double *)(a3 + 24);
  v20 = *(double *)(a3 + 32);
  v77 = *(double *)(a3 + 40);
  v21 = *(_BYTE *)(a3 + 48);
  v22 = type metadata accessor for AnimatablePair<Float, _ShapeStyle_Pack.Effect.Kind.AnimatableData>();
  if (v22 == MEMORY[0x24BEE13C8])
  {
    *(float *)&v80 = v16;
    v28 = *(double *)&v80;
    *(float *)&v80 = v12;
    return specialized combineAnimation<A>(into:state:value:elapsed:newAnimation:newValue:)(a1, a2, a4, v28, a6, *(double *)&v80);
  }
  else if (v22 == type metadata accessor for AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>())
  {
    *(float *)&v80 = v16;
    v30 = *(double *)&v80;
    *(float *)&v80 = v12;
    return specialized combineAnimation<A>(into:state:value:elapsed:newAnimation:newValue:)(a1, a2, a4, v30, v17, v18, v19, a6, *(double *)&v80, v13, v14, v15);
  }
  else
  {
    v23 = *a1;
    type metadata accessor for FontBox<Font.SystemProvider>(0, (unint64_t *)&lazy cache variable for type metadata for AnimationBox<DefaultCombiningAnimation>, (uint64_t (*)(void))lazy protocol witness table accessor for type DefaultCombiningAnimation and conformance DefaultCombiningAnimation, (uint64_t)&type metadata for DefaultCombiningAnimation, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimationBox);
    v24 = swift_dynamicCastClass();
    v75 = a4;
    if (v24)
    {
      v25 = *(_QWORD **)(v24 + 16);
      swift_bridgeObjectRetain();
      swift_release();
      if ((*(_BYTE *)(a5 + 48) & 1) != 0)
      {
        v26 = v21 & 1;
        v27 = v77;
      }
      else
      {
        v46 = *(float *)&v14;
        v26 = 0;
        if ((v21 & 1) != 0)
        {
          v17 = v13;
          v18 = v14;
          v19 = v15;
          v20 = *(double *)(a5 + 32);
          v27 = *(double *)(a5 + 40);
        }
        else
        {
          *(float *)&v48 = *((float *)&v18 + 1) + *((float *)&v14 + 1);
          v19 = v15 + v19;
          v20 = v20 + *(double *)(a5 + 32);
          v27 = v77 + *(double *)(a5 + 40);
          *(_QWORD *)&v17 = COERCE_UNSIGNED_INT(*(float *)&v17 + *(float *)&v13) | ((unint64_t)COERCE_UNSIGNED_INT(*((float *)&v17 + 1) + *((float *)&v13 + 1)) << 32);
          *(_QWORD *)&v18 = COERCE_UNSIGNED_INT(*(float *)&v18 + v46) | ((unint64_t)v48 << 32);
        }
      }
      v49 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
      v50 = swift_bridgeObjectRetain();
      v51 = (_QWORD *)specialized AnimationState.subscript.getter(v50, (uint64_t (*)(_QWORD))type metadata accessor for CombinedAnimationState<AnimatablePair<Float, _ShapeStyle_Pack.Effect.Kind.AnimatableData>>);
      swift_bridgeObjectRelease();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v51 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v51[2] + 1, 1, v51);
      v53 = v51[2];
      v52 = v51[3];
      if (v53 >= v52 >> 1)
        v51 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v52 > 1), v53 + 1, 1, v51);
      v51[2] = v53 + 1;
      v54 = (float *)&v51[8 * v53];
      v54[8] = v12 + v16;
      *((double *)v54 + 5) = v17;
      *((double *)v54 + 6) = v18;
      *((double *)v54 + 7) = v19;
      *((double *)v54 + 8) = v20;
      *((double *)v54 + 9) = v27;
      *((_BYTE *)v54 + 80) = v26;
      *((_QWORD *)v54 + 11) = v49;
      type metadata accessor for CombinedAnimationState<AnimatablePair<Float, _ShapeStyle_Pack.Effect.Kind.AnimatableData>>(0);
      v81 = v55;
      *(_QWORD *)&v80 = v51;
      specialized Dictionary.subscript.setter((uint64_t)&v80, v55);
      swift_retain();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v25 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v25[2] + 1, 1, v25);
      v57 = v25[2];
      v56 = v25[3];
      if (v57 >= v56 >> 1)
        v25 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v56 > 1), v57 + 1, 1, v25);
      v25[2] = v57 + 1;
      v58 = (double *)&v25[2 * v57];
      *((_QWORD *)v58 + 4) = v75;
      v58[5] = a6;
      result = swift_allocObject();
      *(_QWORD *)(result + 16) = v25;
      *a1 = result;
    }
    else
    {
      v74 = v23;
      v76 = a1;
      v31 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
      v73 = *a2;
      swift_bridgeObjectRetain();
      v32 = swift_bridgeObjectRetain();
      v33 = (_QWORD *)specialized AnimationState.subscript.getter(v32, (uint64_t (*)(_QWORD))type metadata accessor for CombinedAnimationState<AnimatablePair<Float, _ShapeStyle_Pack.Effect.Kind.AnimatableData>>);
      swift_bridgeObjectRelease();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v33 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v33[2] + 1, 1, v33);
      v35 = v33[2];
      v34 = v33[3];
      if (v35 >= v34 >> 1)
        v33 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v34 > 1), v35 + 1, 1, v33);
      v33[2] = v35 + 1;
      v36 = (float *)&v33[8 * v35];
      v36[8] = v16;
      *((double *)v36 + 5) = v17;
      *((double *)v36 + 6) = v18;
      *((double *)v36 + 7) = v19;
      *((double *)v36 + 8) = v20;
      *((double *)v36 + 9) = v77;
      *((_BYTE *)v36 + 80) = v21 & 1;
      *((_QWORD *)v36 + 11) = v73;
      type metadata accessor for CombinedAnimationState<AnimatablePair<Float, _ShapeStyle_Pack.Effect.Kind.AnimatableData>>(0);
      v38 = v37;
      v81 = v37;
      *(_QWORD *)&v80 = v33;
      outlined init with take of Any(&v80, v79);
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v79, v38, isUniquelyReferenced_nonNull_native);
      swift_bridgeObjectRelease();
      v40 = *(int64x2_t *)(a3 + 8);
      v41 = *(_BYTE *)(a3 + 48);
      if ((*(_BYTE *)(a5 + 48) & 1) != 0)
      {
        v42 = *(double *)(a3 + 24);
        v43 = *(double *)(a3 + 32);
        v44 = *(double *)(a3 + 40);
        v78 = *(int8x16_t *)(a3 + 8);
        v45 = v76;
      }
      else
      {
        v42 = *(double *)(a5 + 24);
        v43 = *(double *)(a5 + 32);
        v44 = *(double *)(a5 + 40);
        v47 = *(int64x2_t *)(a5 + 8);
        v45 = v76;
        if ((*(_BYTE *)(a3 + 48) & 1) != 0)
        {
          v78 = *(int8x16_t *)(a5 + 8);
          v41 = 0;
        }
        else
        {
          v41 = 0;
          v42 = *(double *)(a3 + 24) + v42;
          v43 = *(double *)(a3 + 32) + v43;
          v44 = *(double *)(a3 + 40) + v44;
          v59 = vadd_f32((float32x2_t)vmovn_s64(v40), (float32x2_t)vmovn_s64(v47));
          v60.i64[0] = v59.u32[0];
          v60.i64[1] = v59.u32[1];
          v78 = vorrq_s8((int8x16_t)vshll_n_s32((int32x2_t)vadd_f32((float32x2_t)vshrn_n_s64(v40, 0x20uLL), (float32x2_t)vshrn_n_s64(v47, 0x20uLL)), 0x20uLL), v60);
        }
      }
      v61 = *(float *)a3;
      v62 = *(float *)a5;
      v63 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
      v64 = swift_bridgeObjectRetain();
      v65 = (_QWORD *)specialized AnimationState.subscript.getter(v64, (uint64_t (*)(_QWORD))type metadata accessor for CombinedAnimationState<AnimatablePair<Float, _ShapeStyle_Pack.Effect.Kind.AnimatableData>>);
      swift_bridgeObjectRelease();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v65 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v65[2] + 1, 1, v65);
      v66 = v61 + v62;
      v68 = v65[2];
      v67 = v65[3];
      if (v68 >= v67 >> 1)
        v65 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v67 > 1), v68 + 1, 1, v65);
      v65[2] = v68 + 1;
      v69 = &v65[8 * v68];
      *((float *)v69 + 8) = v66;
      *(int8x16_t *)(v69 + 5) = v78;
      *((double *)v69 + 7) = v42;
      *((double *)v69 + 8) = v43;
      *((double *)v69 + 9) = v44;
      *((_BYTE *)v69 + 80) = v41;
      v69[11] = v63;
      v81 = v38;
      *(_QWORD *)&v80 = v65;
      outlined init with take of Any(&v80, v79);
      v70 = swift_isUniquelyReferenced_nonNull_native();
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v79, v38, v70);
      swift_bridgeObjectRelease();
      *a2 = v31;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<DefaultCombiningAnimation.Entry>, (uint64_t)&type metadata for DefaultCombiningAnimation.Entry, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
      v71 = swift_allocObject();
      *(_OWORD *)(v71 + 16) = xmmword_2352828C0;
      *(_QWORD *)(v71 + 32) = v74;
      *(_QWORD *)(v71 + 40) = 0;
      *(_QWORD *)(v71 + 48) = v75;
      *(double *)(v71 + 56) = a6;
      v72 = swift_allocObject();
      *(_QWORD *)(v72 + 16) = v71;
      swift_retain();
      result = swift_bridgeObjectRelease();
      *v45 = v72;
    }
  }
  return result;
}

