uint64_t getEnumTagSinglePayload for BlurStyle(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 10))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 8);
  v4 = v3 >= 2;
  v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for BlurStyle(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_WORD *)(result + 8) = 0;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 10) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 10) = 0;
    if (a2)
      *(_BYTE *)(result + 8) = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for BlurStyle()
{
  return &type metadata for BlurStyle;
}

BOOL static Image.Interpolation.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

void Image.Interpolation.hash(into:)()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0);
}

Swift::Int Image.Interpolation.hashValue.getter()
{
  unsigned __int8 *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t Image.interpolation(_:)(char *a1, uint64_t a2)
{
  char v3;
  uint64_t v4;

  v3 = *a1;
  type metadata accessor for ImageProviderBox<Image.InterpolationProvider>(0, &lazy cache variable for type metadata for ImageProviderBox<Image.InterpolationProvider>, (uint64_t (*)(void))lazy protocol witness table accessor for type Image.InterpolationProvider and conformance Image.InterpolationProvider, (uint64_t)&unk_25064BD48);
  v4 = swift_allocObject();
  *(_QWORD *)(v4 + 16) = a2;
  *(_BYTE *)(v4 + 24) = v3;
  swift_retain();
  return v4;
}

unint64_t lazy protocol witness table accessor for type Image.InterpolationProvider and conformance Image.InterpolationProvider()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Image.InterpolationProvider and conformance Image.InterpolationProvider;
  if (!lazy protocol witness table cache variable for type Image.InterpolationProvider and conformance Image.InterpolationProvider)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Image.InterpolationProvider, &unk_25064BD48);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Image.InterpolationProvider and conformance Image.InterpolationProvider);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Image.InterpolationProvider and conformance Image.InterpolationProvider;
  if (!lazy protocol witness table cache variable for type Image.InterpolationProvider and conformance Image.InterpolationProvider)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Image.InterpolationProvider, &unk_25064BD48);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Image.InterpolationProvider and conformance Image.InterpolationProvider);
  }
  return result;
}

uint64_t Image.antialiased(_:)(char a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for ImageProviderBox<Image.InterpolationProvider>(0, &lazy cache variable for type metadata for ImageProviderBox<Image.AntialiasedProvider>, (uint64_t (*)(void))lazy protocol witness table accessor for type Image.AntialiasedProvider and conformance Image.AntialiasedProvider, (uint64_t)&unk_25064BC08);
  v4 = swift_allocObject();
  *(_QWORD *)(v4 + 16) = a2;
  *(_BYTE *)(v4 + 24) = a1;
  swift_retain();
  return v4;
}

void type metadata accessor for ImageProviderBox<Image.InterpolationProvider>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void), uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;

  if (!*a2)
  {
    v7 = a3();
    v9 = type metadata accessor for ImageProviderBox(a1, a4, v7, v8);
    if (!v10)
      atomic_store(v9, a2);
  }
}

unint64_t lazy protocol witness table accessor for type Image.AntialiasedProvider and conformance Image.AntialiasedProvider()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Image.AntialiasedProvider and conformance Image.AntialiasedProvider;
  if (!lazy protocol witness table cache variable for type Image.AntialiasedProvider and conformance Image.AntialiasedProvider)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Image.AntialiasedProvider, &unk_25064BC08);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Image.AntialiasedProvider and conformance Image.AntialiasedProvider);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Image.AntialiasedProvider and conformance Image.AntialiasedProvider;
  if (!lazy protocol witness table cache variable for type Image.AntialiasedProvider and conformance Image.AntialiasedProvider)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Image.AntialiasedProvider, &unk_25064BC08);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Image.AntialiasedProvider and conformance Image.AntialiasedProvider);
  }
  return result;
}

void protocol witness for ImageProvider.resolve(in:) in conformance Image.InterpolationProvider(uint64_t a1@<X8>)
{
  _BYTE *v1;
  char v3;

  v3 = v1[8];
  (*(void (**)(_QWORD *__return_ptr))(**(_QWORD **)v1 + 80))((_QWORD *)a1);
  *(_BYTE *)(a1 + 98) = v3;
  Image.Resolved.image.didset();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance Image.InterpolationProvider(unsigned __int8 *a1, uint64_t a2)
{
  int v2;
  int v3;

  v2 = a1[8];
  v3 = *(unsigned __int8 *)(a2 + 8);
  return (*(_QWORD *)a1 == *(_QWORD *)a2 || ((*(uint64_t (**)(void))(**(_QWORD **)a1 + 96))() & 1) != 0) && v2 == v3;
}

void protocol witness for ImageProvider.resolve(in:) in conformance Image.AntialiasedProvider(uint64_t a1@<X8>)
{
  _BYTE *v1;
  char v3;

  v3 = v1[8];
  (*(void (**)(_QWORD *__return_ptr))(**(_QWORD **)v1 + 80))((_QWORD *)a1);
  *(_BYTE *)(a1 + 97) = v3;
  Image.Resolved.image.didset();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance Image.AntialiasedProvider(unsigned __int8 *a1, uint64_t a2)
{
  int v2;
  int v3;

  v2 = a1[8];
  v3 = *(unsigned __int8 *)(a2 + 8);
  if (*(_QWORD *)a1 == *(_QWORD *)a2 || ((*(uint64_t (**)(void))(**(_QWORD **)a1 + 96))() & 1) != 0)
    return v2 ^ v3 ^ 1u;
  else
    return 0;
}

uint64_t Image.Interpolation.protobufValue.getter()
{
  unsigned __int8 *v0;

  return *v0;
}

unint64_t Image.Interpolation.init(protobufValue:)@<X0>(unint64_t result@<X0>, char *a2@<X8>)
{
  char v2;

  v2 = 4;
  if (result < 4)
    v2 = result;
  *a2 = v2;
  return result;
}

unint64_t lazy protocol witness table accessor for type Image.Interpolation and conformance Image.Interpolation()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Image.Interpolation and conformance Image.Interpolation;
  if (!lazy protocol witness table cache variable for type Image.Interpolation and conformance Image.Interpolation)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Image.Interpolation, &type metadata for Image.Interpolation);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Image.Interpolation and conformance Image.Interpolation);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for Image.Interpolation(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_234D95E84 + 4 * byte_23529FC45[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_234D95EB8 + 4 * asc_23529FC40[v4]))();
}

uint64_t sub_234D95EB8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_234D95EC0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x234D95EC8);
  return result;
}

uint64_t sub_234D95ED4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x234D95EDCLL);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_234D95EE0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_234D95EE8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for Image.Interpolation()
{
  return &type metadata for Image.Interpolation;
}

uint64_t initializeBufferWithCopyOfBuffer for Image.AntialiasedProvider(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for Image.AntialiasedProvider(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_retain();
  swift_release();
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  return a1;
}

uint64_t assignWithTake for Image.AntialiasedProvider(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_release();
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  return a1;
}

void *type metadata accessor for Image.AntialiasedProvider()
{
  return &unk_25064BC08;
}

void *type metadata accessor for Image.InterpolationProvider()
{
  return &unk_25064BD48;
}

unint64_t instantiation function for generic protocol witness table for Image.AntialiasedProvider(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type Image.AntialiasedProvider and conformance Image.AntialiasedProvider();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t instantiation function for generic protocol witness table for Image.InterpolationProvider(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type Image.InterpolationProvider and conformance Image.InterpolationProvider();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

id _ShapeStyle_ResolverMode.bundle.getter()
{
  id *v0;
  id v1;
  id v2;

  v1 = *v0;
  v2 = *v0;
  return v1;
}

void _ShapeStyle_ResolverMode.bundle.setter(void *a1)
{
  id *v1;

  *v1 = a1;
}

uint64_t (*_ShapeStyle_ResolverMode.bundle.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t _ShapeStyle_ResolverMode.foregroundLevels.getter()
{
  uint64_t v0;

  return *(unsigned __int16 *)(v0 + 8);
}

uint64_t _ShapeStyle_ResolverMode.foregroundLevels.setter(uint64_t result)
{
  uint64_t v1;

  *(_WORD *)(v1 + 8) = result;
  return result;
}

uint64_t (*_ShapeStyle_ResolverMode.foregroundLevels.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t _ShapeStyle_ResolverMode.Options.rawValue.getter()
{
  unsigned __int8 *v0;

  return *v0;
}

uint64_t _ShapeStyle_ResolverMode.Options.init(rawValue:)@<X0>(uint64_t result@<X0>, _BYTE *a2@<X8>)
{
  *a2 = result;
  return result;
}

void static _ShapeStyle_ResolverMode.Options.foregroundPalette.getter(_BYTE *a1@<X8>)
{
  *a1 = 1;
}

void static _ShapeStyle_ResolverMode.Options.background.getter(_BYTE *a1@<X8>)
{
  *a1 = 2;
}

void static _ShapeStyle_ResolverMode.Options.multicolor.getter(_BYTE *a1@<X8>)
{
  *a1 = 4;
}

void _ShapeStyle_ResolverMode.options.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 10);
}

_BYTE *_ShapeStyle_ResolverMode.options.setter(_BYTE *result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 10) = *result;
  return result;
}

uint64_t (*_ShapeStyle_ResolverMode.options.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t _ShapeStyle_ResolverMode.init(foregroundLevels:options:)@<X0>(uint64_t result@<X0>, char *a2@<X1>, uint64_t a3@<X8>)
{
  char v3;

  v3 = *a2;
  *(_QWORD *)a3 = 0;
  *(_WORD *)(a3 + 8) = result;
  *(_BYTE *)(a3 + 10) = v3;
  return result;
}

void *_ShapeStyle_ResolverMode.init(rbSymbolStyleMask:location:)@<X0>(__int16 a1@<W0>, void **a2@<X1>, uint64_t a3@<X8>)
{
  void *result;
  char v6;
  __int16 v7;
  uint64_t v8;

  result = *a2;
  if ((a1 & 0x200) != 0)
  {
    v6 = 4;
    if ((unint64_t)result > 1)
      goto LABEL_5;
  }
  else
  {
    v6 = 0;
  }
  outlined consume of Image.Location(result);
  result = 0;
LABEL_5:
  if ((a1 & 0x100) != 0)
  {
    v8 = 4;
LABEL_16:
    v7 = v8 + 1;
    v6 |= v8 != 0;
    goto LABEL_17;
  }
  if ((a1 & 0x80) != 0)
  {
    v8 = 3;
    goto LABEL_16;
  }
  if ((a1 & 0x40) != 0)
  {
    v8 = 2;
    goto LABEL_16;
  }
  if ((a1 & 0x20) != 0)
  {
    v8 = 1;
    goto LABEL_16;
  }
  if ((a1 & 1) != 0)
  {
    v8 = 0;
    goto LABEL_16;
  }
  v7 = 0;
LABEL_17:
  *(_QWORD *)a3 = result;
  *(_WORD *)(a3 + 8) = v7;
  *(_BYTE *)(a3 + 10) = v6;
  return result;
}

_BYTE *_ShapeStyle_ResolverMode.formUnion(_:)(_BYTE *result)
{
  uint64_t v1;
  unsigned int v2;
  char v3;
  id v4;
  unsigned int v5;

  v2 = *((unsigned __int16 *)result + 4);
  v3 = result[10];
  v4 = *(id *)v1;
  if (!*(_QWORD *)v1)
  {
    v4 = *(id *)result;
    result = *(id *)result;
  }
  *(_QWORD *)v1 = v4;
  v5 = *(unsigned __int16 *)(v1 + 8);
  if (v2 > v5)
    LOWORD(v5) = v2;
  *(_WORD *)(v1 + 8) = v5;
  *(_BYTE *)(v1 + 10) |= v3;
  return result;
}

double ShapeStyleResolver.init(style:mode:environment:role:animationsDisabled:helper:)@<D0>(int a1@<W0>, int a2@<W1>, int a3@<W2>, char *a4@<X3>, char a5@<W4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  char v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  double result;
  int v21;

  v12 = *a4;
  v13 = *(_DWORD *)(a6 + 8);
  v15 = *(_QWORD *)(a6 + 16);
  v14 = *(_QWORD *)(a6 + 24);
  v21 = *(_DWORD *)(a6 + 32);
  type metadata accessor for PropertyList.Tracker();
  v16 = swift_allocObject();
  type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for AtomicBuffer<TrackerData>, (uint64_t)&type metadata for TrackerData, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for AtomicBuffer);
  v17 = swift_allocObject();
  *(_DWORD *)(v17 + 16) = 0;
  v18 = MEMORY[0x24BEE4B00];
  *(_QWORD *)(v17 + 24) = 0;
  *(_QWORD *)(v17 + 32) = v18;
  v19 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v17 + 40) = v18;
  *(_QWORD *)(v17 + 48) = v19;
  *(_BYTE *)(v17 + 56) = 0;
  *(_QWORD *)(v16 + 16) = v17;
  *(_DWORD *)a7 = a1;
  *(_DWORD *)(a7 + 4) = a2;
  *(_DWORD *)(a7 + 8) = a3;
  *(_BYTE *)(a7 + 12) = v12;
  *(_BYTE *)(a7 + 13) = a5;
  result = *(double *)a6;
  *(_QWORD *)(a7 + 16) = *(_QWORD *)a6;
  *(_DWORD *)(a7 + 24) = v13;
  *(_QWORD *)(a7 + 32) = v15;
  *(_QWORD *)(a7 + 40) = v14;
  *(_DWORD *)(a7 + 48) = v21;
  *(_QWORD *)(a7 + 56) = v16;
  return result;
}

Swift::Void __swiftcall ShapeStyleResolver.updateValue()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t TupleTypeMetadata2;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  double v16;
  char *v17;
  uint64_t v18;
  int v19;
  int v20;
  uint64_t Value;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  int v26;
  char v27;
  unsigned __int16 v28;
  uint64_t v29;
  char v30;
  char v31;
  id v32;
  unsigned __int16 v33;
  char v34;
  id v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  BOOL v44;
  char v45;
  char v46;
  uint64_t OutputValue;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  id v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  char v62;
  uint64_t v63;
  id v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char v70;
  id v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  int v81;
  uint64_t v82;
  id v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  unsigned __int8 v89;
  uint64_t v90;
  char v91;
  __int128 v92;
  uint64_t v93;
  id v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  char v98;
  int v99;
  uint64_t v100;
  char v101;
  uint64_t v102;
  __int128 v103;
  __int128 v104;
  uint64_t v105;
  char v106;
  uint64_t v107;
  char v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  uint64_t v112;
  char v113;
  char v114;
  char v115;
  uint64_t v116;

  v116 = *MEMORY[0x24BDAC8D0];
  v76 = v0;
  v2 = *(_QWORD *)(v0 + 16);
  v3 = *(_QWORD *)(v2 - 8);
  ((void (*)())MEMORY[0x24BDAC7A8])();
  v75 = (char *)&v72 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  MEMORY[0x24BDAC7A8](TupleTypeMetadata2);
  v7 = (char *)&v72 - v6;
  v8 = type metadata accessor for Optional();
  v9 = swift_getTupleTypeMetadata2();
  v84 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v78 = (char *)&v72 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)&v72 - v12;
  v16 = MEMORY[0x24BDAC7A8](v14);
  v17 = (char *)&v72 - v15;
  v85 = *(int *)(v18 + 48);
  LODWORD(v18) = *(_DWORD *)v1;
  v19 = *MEMORY[0x24BE096C0];
  v88 = (char *)&v72 - v15;
  v79 = v8;
  v80 = v3;
  v77 = v2;
  if ((_DWORD)v18 == v19)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t, double))(v3 + 56))((char *)&v72 - v15, 1, 1, v2, v16);
    v20 = 0;
  }
  else
  {
    Value = AGGraphGetValue();
    v86 = v22;
    (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v7, Value, v2);
    v23 = *(int *)(v9 + 48);
    (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v13, v7, v2);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v3 + 56))(v13, 0, 1, v2);
    v13[v23] = v86 & 1;
    v17 = v88;
    v24 = *(int *)(v9 + 48);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(v88, v13, v8);
    v20 = v13[v24];
  }
  LODWORD(v86) = v20;
  v17[v85] = v20;
  v25 = *(_DWORD *)(v1 + 4);
  v87 = v9;
  if (v25 == v19)
  {
    v26 = 0;
    v83 = 0;
    v27 = 0;
    v28 = 1;
  }
  else
  {
    v29 = AGGraphGetValue();
    v31 = v30;
    v32 = *(id *)v29;
    v33 = *(_WORD *)(v29 + 8);
    v34 = *(_BYTE *)(v29 + 10);
    v35 = *(id *)v29;
    if (v32 == (id)1)
      v26 = 0;
    else
      v26 = v31 & 1;
    if (v32 == (id)1)
      v36 = 0;
    else
      v36 = v32;
    v83 = v36;
    if (v32 == (id)1)
      v28 = 1;
    else
      v28 = v33;
    if (v32 == (id)1)
      v27 = 0;
    else
      v27 = v34;
  }
  v82 = v1;
  v37 = v1 + 16;
  v81 = *(unsigned __int8 *)(v1 + 12);
  v38 = *(_QWORD *)(v1 + 40);
  v74 = *(_DWORD *)(v1 + 48);
  v39 = *(_QWORD *)(v1 + 56);
  v40 = (uint64_t *)AGGraphGetValue();
  v43 = *v40;
  v42 = v40[1];
  v90 = MEMORY[0x24BEE4AF8];
  if ((_DWORD)v86)
    v44 = 0;
  else
    v44 = v26 == 0;
  v85 = v42;
  if (!v44)
  {
    v45 = 1;
    v91 = 1;
    swift_retain();
    swift_retain();
    if (v38)
      goto LABEL_23;
    goto LABEL_30;
  }
  v46 = v41;
  OutputValue = AGGraphGetOutputValue();
  v91 = OutputValue == 0;
  if (OutputValue)
  {
    if ((v46 & 1) == 0)
    {
      swift_retain();
      swift_retain();
      if (v38)
      {
LABEL_28:
        v74 = 0;
        goto LABEL_37;
      }
      goto LABEL_31;
    }
    swift_retain();
    v48 = swift_retain_n();
    v45 = PropertyList.Tracker.hasDifferentUsedValues(_:)(v48);
    swift_release();
    v91 = v45 & 1;
    if (!v38)
    {
LABEL_30:
      if ((v45 & 1) != 0)
        goto LABEL_36;
LABEL_31:
      if (v74 == *(_DWORD *)AGGraphGetValue() >> 1)
      {
        (*(void (**)(char *, uint64_t))(v84 + 8))(v88, v87);

        swift_release();
        goto LABEL_83;
      }
      specialized AnimatableAttributeHelper.reset()();
      v91 = 1;
      goto LABEL_36;
    }
  }
  else
  {
    swift_retain();
    swift_retain();
    v45 = 1;
    if (!v38)
      goto LABEL_30;
  }
LABEL_23:
  if ((v45 & 1) == 0)
    goto LABEL_28;
LABEL_36:
  PropertyList.Tracker.reset()();
  v74 = 1;
LABEL_37:
  v73 = v28;
  if ((v27 & 1) != 0)
    v49 = v28;
  else
    v49 = v28 != 0;
  if (v43)
    v50 = *(_QWORD *)(v43 + 64);
  else
    v50 = 0;
  v51 = *(_QWORD *)(v39 + 16);
  swift_retain_n();
  swift_retain_n();
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v51 + 16));
  *(_QWORD *)(v51 + 24) = v50;
  os_unfair_lock_unlock((os_unfair_lock_t)(v51 + 16));
  swift_release();
  swift_release();
  swift_release();
  v115 = 0;
  v104 = 0uLL;
  v105 = v49;
  v106 = 1;
  v107 = 0;
  v108 = 5;
  *(_QWORD *)&v109 = v43;
  *((_QWORD *)&v109 + 1) = v39;
  v110 = 0u;
  v111 = 0u;
  v112 = 0;
  v113 = 1;
  v114 = v81;
  if (v49)
  {
    v52 = *(int *)(v87 + 48);
    v54 = v78;
    v53 = v79;
    v55 = *(_QWORD *)(v79 - 8);
    (*(void (**)(char *, char *, uint64_t))(v55 + 16))(v78, v88, v79);
    v54[v52] = v86;
    v56 = v80;
    v57 = v77;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v80 + 48))(v54, 1, v77) == 1)
    {
      (*(void (**)(char *, uint64_t))(v55 + 8))(v54, v53);
      specialized ForegroundStyle._apply(to:)((uint64_t)&v104);
      v58 = v83;
      if ((v27 & 1) != 0)
        goto LABEL_57;
    }
    else
    {
      v59 = v75;
      (*(void (**)(char *, char *, uint64_t))(v56 + 32))(v75, v54, v57);
      (*(void (**)(__int128 *, uint64_t))(*(_QWORD *)(v76 + 24) + 32))(&v104, v57);
      (*(void (**)(char *, uint64_t))(v56 + 8))(v59, v57);
      v58 = v83;
      if ((v27 & 1) != 0)
        goto LABEL_57;
    }
    v89 = 0;
    v92 = v109;
    v60 = MEMORY[0x24BEE4AF8];
    if (v108 == 1)
    {
      v60 = v107;
      v61 = 0;
    }
    else
    {
      v61 = v107;
    }
    if (v108 == 1)
      v62 = 5;
    else
      v62 = v108;
    *(_QWORD *)&v103 = v60;
    _ShapeStyle_Pack.createOpacities(count:name:environment:)(v73, (char *)&v89, (uint64_t *)&v92);
    outlined consume of _ShapeStyle_Shape.Result(v61, v62);
    v107 = v103;
    v108 = 1;
  }
  else
  {
    v58 = v83;
    if (v74)
      specialized AnimatableAttributeHelper.reset()();
  }
LABEL_57:
  if ((v27 & 2) != 0)
  {
    v104 = xmmword_235260EF0;
    v105 = 1;
    v106 = 1;
    v114 = 0;
    BackgroundStyle._apply(to:)((uint64_t)&v104);
  }
  if ((v27 & 4) != 0)
  {
    v103 = v109;
    v64 = v58;
    swift_retain();
    swift_retain();
    ResolvedMulticolorStyle.init(in:bundle:)((uint64_t *)&v103, (uint64_t)v58, (uint64_t)&v92);
    v65 = 256;
    if (!BYTE1(v93))
      v65 = 0;
    v66 = v65 | v93;
    v67 = 0x10000;
    if (!BYTE2(v93))
      v67 = 0;
    v93 = v66 | v67;
    v95 = 0u;
    v96 = 0u;
    v97 = 0u;
    v98 = 6;
    v99 = 1065353216;
    v100 = 0;
    v101 = -1;
    v68 = MEMORY[0x24BEE4AF8];
    v102 = MEMORY[0x24BEE4AF8];
    if (v108 == 1)
      v68 = v107;
    v89 = 2;
    if (v108 == 1)
      v69 = 0;
    else
      v69 = v107;
    if (v108 == 1)
      v70 = 5;
    else
      v70 = v108;
    *(_QWORD *)&v103 = v68;
    v71 = v94;
    _ShapeStyle_Pack.subscript.setter((uint64_t *)&v92, &v89, 0);
    outlined consume of _ShapeStyle_Shape.Result(v69, v70);

    v63 = v103;
    v107 = v103;
    v108 = 1;
  }
  else
  {
    if (v108 != 1)
    {
      v63 = MEMORY[0x24BEE4AF8];
      goto LABEL_77;
    }
    v63 = v107;
  }
  swift_bridgeObjectRetain();
LABEL_77:
  swift_bridgeObjectRelease();
  v90 = v63;
  if ((*(_BYTE *)(v82 + 13) & 1) == 0)
    specialized AnimatableAttributeHelper.update(value:defaultAnimation:environment:sampleCollector:)(&v90, 0, *(_DWORD *)(v82 + 8), v37);
  if (v91 == 1)
  {
    *(_QWORD *)&v92 = v90;
    swift_bridgeObjectRetain();
    AGGraphSetOutputValue();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();

    (*(void (**)(char *, uint64_t))(v84 + 8))(v88, v87);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v84 + 8))(v88, v87);
    swift_release();

    swift_release();
  }
  outlined consume of _ShapeStyle_Shape.Result(v107, v108);
  swift_release();
  swift_release();
LABEL_83:
  swift_release();
  swift_bridgeObjectRelease();
}

_DWORD *specialized AnimatableAttributeHelper.reset()()
{
  uint64_t v0;
  _DWORD *result;

  if (*(_QWORD *)(v0 + 32))
  {
    specialized AnimatorState.removeListeners()();
    swift_release();
  }
  *(_QWORD *)(v0 + 32) = 0;
  *(_QWORD *)(v0 + 16) = 0;
  *(_BYTE *)(v0 + 24) = 1;
  result = (_DWORD *)AGGraphGetValue();
  *(_DWORD *)(v0 + 40) = *result >> 1;
  return result;
}

{
  uint64_t v0;
  _DWORD *result;

  if (*(_QWORD *)(v0 + 24))
  {
    specialized AnimatorState.removeListeners()();
    swift_release();
  }
  *(_QWORD *)(v0 + 24) = 0;
  swift_bridgeObjectRelease();
  *(_QWORD *)(v0 + 16) = 0;
  result = (_DWORD *)AGGraphGetValue();
  *(_DWORD *)(v0 + 32) = *result >> 1;
  return result;
}

{
  uint64_t v0;
  _DWORD *result;

  if (*(_QWORD *)(v0 + 88))
  {
    specialized AnimatorState.removeListeners()();
    swift_release();
  }
  *(_QWORD *)(v0 + 88) = 0;
  *(_OWORD *)(v0 + 16) = 0u;
  *(_OWORD *)(v0 + 32) = 0u;
  *(_OWORD *)(v0 + 48) = 0u;
  *(_OWORD *)(v0 + 64) = 0u;
  *(_BYTE *)(v0 + 80) = 1;
  result = (_DWORD *)AGGraphGetValue();
  *(_DWORD *)(v0 + 96) = *result >> 1;
  return result;
}

{
  uint64_t v0;
  _DWORD *result;

  if (*(_QWORD *)(v0 + 48))
  {
    specialized AnimatorState.removeListeners()();
    swift_release();
  }
  *(_QWORD *)(v0 + 48) = 0;
  *(_QWORD *)(v0 + 24) = 0;
  *(_QWORD *)(v0 + 32) = 0;
  *(_QWORD *)(v0 + 16) = 0;
  *(_BYTE *)(v0 + 40) = 1;
  result = (_DWORD *)AGGraphGetValue();
  *(_DWORD *)(v0 + 56) = *result >> 1;
  return result;
}

{
  uint64_t v0;
  _DWORD *result;

  if (*(_QWORD *)(v0 + 56))
  {
    specialized AnimatorState.removeListeners()();
    swift_release();
  }
  *(_QWORD *)(v0 + 56) = 0;
  *(_OWORD *)(v0 + 16) = 0u;
  *(_OWORD *)(v0 + 32) = 0u;
  *(_BYTE *)(v0 + 48) = 1;
  result = (_DWORD *)AGGraphGetValue();
  *(_DWORD *)(v0 + 64) = *result >> 1;
  return result;
}

{
  uint64_t v0;
  _DWORD *result;

  if (*(_QWORD *)(v0 + 48))
  {
    specialized AnimatorState.removeListeners()();
    swift_release();
  }
  *(_QWORD *)(v0 + 48) = 0;
  outlined consume of AnimatablePair<AnimatableArray<Float>, AnimatablePair<AnimatableArray<AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>, AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>>?(*(_QWORD *)(v0 + 16));
  *(_OWORD *)(v0 + 16) = 0u;
  *(_OWORD *)(v0 + 32) = 0u;
  result = (_DWORD *)AGGraphGetValue();
  *(_DWORD *)(v0 + 56) = *result >> 1;
  return result;
}

{
  uint64_t v0;
  _DWORD *result;

  if (*(_QWORD *)(v0 + 40))
  {
    specialized AnimatorState.removeListeners()();
    swift_release();
  }
  *(_QWORD *)(v0 + 40) = 0;
  *(_QWORD *)(v0 + 16) = 0;
  *(_QWORD *)(v0 + 24) = 0;
  *(_BYTE *)(v0 + 32) = 1;
  result = (_DWORD *)AGGraphGetValue();
  *(_DWORD *)(v0 + 48) = *result >> 1;
  return result;
}

{
  uint64_t v0;
  _DWORD *result;

  if (*(_QWORD *)(v0 + 64))
  {
    specialized AnimatorState.removeListeners()();
    swift_release();
  }
  *(_QWORD *)(v0 + 64) = 0;
  swift_bridgeObjectRelease();
  *(_OWORD *)(v0 + 41) = 0u;
  *(_OWORD *)(v0 + 16) = 0u;
  *(_OWORD *)(v0 + 32) = 0u;
  result = (_DWORD *)AGGraphGetValue();
  *(_DWORD *)(v0 + 72) = *result >> 1;
  return result;
}

{
  uint64_t v0;
  _DWORD *result;

  if (*(_QWORD *)(v0 + 64))
  {
    specialized AnimatorState.removeListeners()();
    swift_release();
  }
  *(_QWORD *)(v0 + 64) = 0;
  swift_bridgeObjectRelease();
  *(_OWORD *)(v0 + 32) = 0u;
  *(_OWORD *)(v0 + 48) = 0u;
  *(_OWORD *)(v0 + 16) = 0u;
  result = (_DWORD *)AGGraphGetValue();
  *(_DWORD *)(v0 + 72) = *result >> 1;
  return result;
}

{
  uint64_t v0;
  _DWORD *result;

  if (*(_QWORD *)(v0 + 32))
  {
    specialized AnimatorState.removeListeners()();
    swift_release();
  }
  *(_QWORD *)(v0 + 32) = 0;
  swift_bridgeObjectRelease();
  *(_QWORD *)(v0 + 16) = 0;
  *(_BYTE *)(v0 + 24) = 0;
  result = (_DWORD *)AGGraphGetValue();
  *(_DWORD *)(v0 + 40) = *result >> 1;
  return result;
}

{
  uint64_t v0;
  _DWORD *result;

  if (*(_QWORD *)(v0 + 120))
  {
    specialized AnimatorState.removeListeners()();
    swift_release();
  }
  *(_QWORD *)(v0 + 120) = 0;
  outlined consume of AnimatablePair<_ShapeStyle_Pack.Fill.AnimatableData, AnimatablePair<Float, AnimatableArray<AnimatablePair<Float, _ShapeStyle_Pack.Effect.Kind.AnimatableData>>>>?(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 88), *(_OWORD *)(v0 + 96), *(_QWORD *)(v0 + 104), *(_QWORD *)(v0 + 112));
  *(_QWORD *)(v0 + 112) = 0;
  *(_OWORD *)(v0 + 80) = 0u;
  *(_OWORD *)(v0 + 96) = 0u;
  *(_OWORD *)(v0 + 48) = 0u;
  *(_OWORD *)(v0 + 64) = 0u;
  *(_OWORD *)(v0 + 16) = 0u;
  *(_OWORD *)(v0 + 32) = 0u;
  result = (_DWORD *)AGGraphGetValue();
  *(_DWORD *)(v0 + 128) = *result >> 1;
  return result;
}

{
  uint64_t v0;
  _DWORD *result;

  if (*(_QWORD *)(v0 + 104))
  {
    specialized AnimatorState.removeListeners()();
    swift_release();
  }
  *(_QWORD *)(v0 + 104) = 0;
  outlined consume of _ShapeStyle_Pack.Fill.AnimatableData?(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 88), *(_BYTE *)(v0 + 96));
  *(_OWORD *)(v0 + 64) = 0u;
  *(_OWORD *)(v0 + 80) = 0u;
  *(_OWORD *)(v0 + 32) = 0u;
  *(_OWORD *)(v0 + 48) = 0u;
  *(_OWORD *)(v0 + 16) = 0u;
  *(_BYTE *)(v0 + 96) = -1;
  result = (_DWORD *)AGGraphGetValue();
  *(_DWORD *)(v0 + 112) = *result >> 1;
  return result;
}

{
  uint64_t v0;
  _DWORD *result;

  if (*(_QWORD *)(v0 + 64))
  {
    specialized AnimatorState.removeListeners()();
    swift_release();
  }
  *(_QWORD *)(v0 + 64) = 0;
  *(_OWORD *)(v0 + 16) = 0u;
  *(_OWORD *)(v0 + 32) = 0u;
  *(_OWORD *)(v0 + 41) = 0u;
  *(_BYTE *)(v0 + 57) = 1;
  result = (_DWORD *)AGGraphGetValue();
  *(_DWORD *)(v0 + 72) = *result >> 1;
  return result;
}

{
  uint64_t v0;
  _DWORD *result;

  if (*(_QWORD *)(v0 + 72))
  {
    specialized AnimatorState.removeListeners()();
    swift_release();
  }
  *(_QWORD *)(v0 + 72) = 0;
  *(_OWORD *)(v0 + 16) = 0u;
  *(_OWORD *)(v0 + 32) = 0u;
  *(_OWORD *)(v0 + 48) = 0u;
  *(_WORD *)(v0 + 64) = 256;
  result = (_DWORD *)AGGraphGetValue();
  *(_DWORD *)(v0 + 80) = *result >> 1;
  return result;
}

{
  uint64_t v0;
  _DWORD *result;

  if (*(_QWORD *)(v0 + 64))
  {
    specialized AnimatorState.removeListeners()();
    swift_release();
  }
  *(_QWORD *)(v0 + 64) = 0;
  *(_OWORD *)(v0 + 16) = 0u;
  *(_OWORD *)(v0 + 32) = 0u;
  *(_QWORD *)(v0 + 48) = 0;
  *(_BYTE *)(v0 + 56) = 1;
  result = (_DWORD *)AGGraphGetValue();
  *(_DWORD *)(v0 + 72) = *result >> 1;
  return result;
}

{
  uint64_t v0;
  _DWORD *result;

  if (*(_QWORD *)(v0 + 40))
  {
    specialized AnimatorState.removeListeners()();
    swift_release();
  }
  *(_QWORD *)(v0 + 40) = 0;
  *(_QWORD *)(v0 + 12) = 0;
  *(_QWORD *)(v0 + 28) = 0;
  *(_QWORD *)(v0 + 20) = 0;
  *(_BYTE *)(v0 + 36) = 1;
  result = (_DWORD *)AGGraphGetValue();
  *(_DWORD *)(v0 + 48) = *result >> 1;
  return result;
}

{
  uint64_t v0;
  _DWORD *result;

  if (*(_QWORD *)(v0 + 32))
  {
    specialized AnimatorState.removeListeners()();
    swift_release();
  }
  *(_QWORD *)(v0 + 32) = 0;
  *(_QWORD *)(v0 + 20) = 0;
  *(_QWORD *)(v0 + 12) = 0;
  *(_BYTE *)(v0 + 28) = 1;
  result = (_DWORD *)AGGraphGetValue();
  *(_DWORD *)(v0 + 40) = *result >> 1;
  return result;
}

{
  uint64_t v0;
  _DWORD *result;

  if (*(_QWORD *)(v0 + 56))
  {
    specialized AnimatorState.removeListeners()();
    swift_release();
  }
  *(_QWORD *)(v0 + 56) = 0;
  outlined destroy of _AnyAnimatableData?(v0 + 16);
  *(_OWORD *)(v0 + 16) = 0u;
  *(_OWORD *)(v0 + 32) = 0u;
  *(_QWORD *)(v0 + 48) = 0;
  result = (_DWORD *)AGGraphGetValue();
  *(_DWORD *)(v0 + 64) = *result >> 1;
  return result;
}

Swift::Void __swiftcall ShapeStyleResolver.destroy()()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 40))
    specialized AnimatorState.removeListeners()();
}

void protocol witness for static _AttributeBody._destroySelf(_:) in conformance ShapeStyleResolver<A>()
{
  ShapeStyleResolver.destroy()();
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance ShapeStyleResolver<A>(uint64_t a1)
{
  MEMORY[0x23B7C9C04](&protocol conformance descriptor for ShapeStyleResolver<A>, a1);
  return static AsyncAttribute.flags.getter();
}

uint64_t specialized AnimatorState.removeListeners()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t *v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t i;
  uint64_t v10;
  uint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t j;
  uint64_t v16;
  uint64_t v17;

  v1 = v0;
  v2 = (uint64_t *)(v0 + 96);
  swift_beginAccess();
  v3 = *(_QWORD *)(v0 + 96);
  if (v3 >> 62)
  {
    swift_bridgeObjectRetain();
    v4 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    v4 = *(_QWORD *)((v3 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v5 = MEMORY[0x24BEE4AF8];
  if (v4)
  {
    v6 = *v2;
    if ((unint64_t)*v2 >> 62)
    {
      swift_bridgeObjectRetain();
      result = _CocoaArrayWrapper.endIndex.getter();
      v7 = result;
      if (result)
        goto LABEL_6;
    }
    else
    {
      v7 = *(_QWORD *)((v6 & 0xFFFFFFFFFFFFF8) + 0x10);
      result = swift_bridgeObjectRetain();
      if (v7)
      {
LABEL_6:
        if (v7 < 1)
        {
          __break(1u);
          goto LABEL_31;
        }
        for (i = 0; i != v7; ++i)
        {
          if ((v6 & 0xC000000000000001) != 0)
          {
            v10 = MEMORY[0x23B7C6D9C](i, v6);
          }
          else
          {
            v10 = *(_QWORD *)(v6 + 8 * i + 32);
            swift_retain();
          }
          (*(void (**)(void))(*(_QWORD *)v10 + 96))();
          swift_release();
        }
      }
    }
    swift_bridgeObjectRelease();
    *v2 = v5;
    swift_bridgeObjectRelease();
  }
  v11 = (uint64_t *)(v1 + 104);
  result = swift_beginAccess();
  v12 = *(_QWORD *)(v1 + 104);
  if (v12 >> 62)
  {
    swift_bridgeObjectRetain();
    v17 = _CocoaArrayWrapper.endIndex.getter();
    result = swift_bridgeObjectRelease();
    if (!v17)
      return result;
  }
  else if (!*(_QWORD *)((v12 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    return result;
  }
  v13 = *v11;
  if ((unint64_t)*v11 >> 62)
  {
    swift_bridgeObjectRetain();
    result = _CocoaArrayWrapper.endIndex.getter();
    v14 = result;
    if (result)
    {
LABEL_19:
      if (v14 >= 1)
      {
        for (j = 0; j != v14; ++j)
        {
          if ((v13 & 0xC000000000000001) != 0)
          {
            v16 = MEMORY[0x23B7C6D9C](j, v13);
          }
          else
          {
            v16 = *(_QWORD *)(v13 + 8 * j + 32);
            swift_retain();
          }
          (*(void (**)(void))(*(_QWORD *)v16 + 96))();
          swift_release();
        }
        goto LABEL_28;
      }
LABEL_31:
      __break(1u);
      return result;
    }
  }
  else
  {
    v14 = *(_QWORD *)((v13 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = swift_bridgeObjectRetain();
    if (v14)
      goto LABEL_19;
  }
LABEL_28:
  swift_bridgeObjectRelease();
  *v11 = v5;
  return swift_bridgeObjectRelease();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t *v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t i;
  uint64_t v10;
  uint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t j;
  uint64_t v16;
  uint64_t v17;

  v1 = v0;
  v2 = (uint64_t *)(v0 + 192);
  swift_beginAccess();
  v3 = *(_QWORD *)(v0 + 192);
  if (v3 >> 62)
  {
    swift_bridgeObjectRetain();
    v4 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    v4 = *(_QWORD *)((v3 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v5 = MEMORY[0x24BEE4AF8];
  if (v4)
  {
    v6 = *v2;
    if ((unint64_t)*v2 >> 62)
    {
      swift_bridgeObjectRetain();
      result = _CocoaArrayWrapper.endIndex.getter();
      v7 = result;
      if (result)
        goto LABEL_6;
    }
    else
    {
      v7 = *(_QWORD *)((v6 & 0xFFFFFFFFFFFFF8) + 0x10);
      result = swift_bridgeObjectRetain();
      if (v7)
      {
LABEL_6:
        if (v7 < 1)
        {
          __break(1u);
          goto LABEL_31;
        }
        for (i = 0; i != v7; ++i)
        {
          if ((v6 & 0xC000000000000001) != 0)
          {
            v10 = MEMORY[0x23B7C6D9C](i, v6);
          }
          else
          {
            v10 = *(_QWORD *)(v6 + 8 * i + 32);
            swift_retain();
          }
          (*(void (**)(void))(*(_QWORD *)v10 + 96))();
          swift_release();
        }
      }
    }
    swift_bridgeObjectRelease();
    *v2 = v5;
    swift_bridgeObjectRelease();
  }
  v11 = (uint64_t *)(v1 + 200);
  result = swift_beginAccess();
  v12 = *(_QWORD *)(v1 + 200);
  if (v12 >> 62)
  {
    swift_bridgeObjectRetain();
    v17 = _CocoaArrayWrapper.endIndex.getter();
    result = swift_bridgeObjectRelease();
    if (!v17)
      return result;
  }
  else if (!*(_QWORD *)((v12 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    return result;
  }
  v13 = *v11;
  if ((unint64_t)*v11 >> 62)
  {
    swift_bridgeObjectRetain();
    result = _CocoaArrayWrapper.endIndex.getter();
    v14 = result;
    if (result)
    {
LABEL_19:
      if (v14 >= 1)
      {
        for (j = 0; j != v14; ++j)
        {
          if ((v13 & 0xC000000000000001) != 0)
          {
            v16 = MEMORY[0x23B7C6D9C](j, v13);
          }
          else
          {
            v16 = *(_QWORD *)(v13 + 8 * j + 32);
            swift_retain();
          }
          (*(void (**)(void))(*(_QWORD *)v16 + 96))();
          swift_release();
        }
        goto LABEL_28;
      }
LABEL_31:
      __break(1u);
      return result;
    }
  }
  else
  {
    v14 = *(_QWORD *)((v13 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = swift_bridgeObjectRetain();
    if (v14)
      goto LABEL_19;
  }
LABEL_28:
  swift_bridgeObjectRelease();
  *v11 = v5;
  return swift_bridgeObjectRelease();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t *v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t i;
  uint64_t v10;
  uint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t j;
  uint64_t v16;
  uint64_t v17;

  v1 = v0;
  v2 = (uint64_t *)(v0 + 112);
  swift_beginAccess();
  v3 = *(_QWORD *)(v0 + 112);
  if (v3 >> 62)
  {
    swift_bridgeObjectRetain();
    v4 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    v4 = *(_QWORD *)((v3 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v5 = MEMORY[0x24BEE4AF8];
  if (v4)
  {
    v6 = *v2;
    if ((unint64_t)*v2 >> 62)
    {
      swift_bridgeObjectRetain();
      result = _CocoaArrayWrapper.endIndex.getter();
      v7 = result;
      if (result)
        goto LABEL_6;
    }
    else
    {
      v7 = *(_QWORD *)((v6 & 0xFFFFFFFFFFFFF8) + 0x10);
      result = swift_bridgeObjectRetain();
      if (v7)
      {
LABEL_6:
        if (v7 < 1)
        {
          __break(1u);
          goto LABEL_31;
        }
        for (i = 0; i != v7; ++i)
        {
          if ((v6 & 0xC000000000000001) != 0)
          {
            v10 = MEMORY[0x23B7C6D9C](i, v6);
          }
          else
          {
            v10 = *(_QWORD *)(v6 + 8 * i + 32);
            swift_retain();
          }
          (*(void (**)(void))(*(_QWORD *)v10 + 96))();
          swift_release();
        }
      }
    }
    swift_bridgeObjectRelease();
    *v2 = v5;
    swift_bridgeObjectRelease();
  }
  v11 = (uint64_t *)(v1 + 120);
  result = swift_beginAccess();
  v12 = *(_QWORD *)(v1 + 120);
  if (v12 >> 62)
  {
    swift_bridgeObjectRetain();
    v17 = _CocoaArrayWrapper.endIndex.getter();
    result = swift_bridgeObjectRelease();
    if (!v17)
      return result;
  }
  else if (!*(_QWORD *)((v12 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    return result;
  }
  v13 = *v11;
  if ((unint64_t)*v11 >> 62)
  {
    swift_bridgeObjectRetain();
    result = _CocoaArrayWrapper.endIndex.getter();
    v14 = result;
    if (result)
    {
LABEL_19:
      if (v14 >= 1)
      {
        for (j = 0; j != v14; ++j)
        {
          if ((v13 & 0xC000000000000001) != 0)
          {
            v16 = MEMORY[0x23B7C6D9C](j, v13);
          }
          else
          {
            v16 = *(_QWORD *)(v13 + 8 * j + 32);
            swift_retain();
          }
          (*(void (**)(void))(*(_QWORD *)v16 + 96))();
          swift_release();
        }
        goto LABEL_28;
      }
LABEL_31:
      __break(1u);
      return result;
    }
  }
  else
  {
    v14 = *(_QWORD *)((v13 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = swift_bridgeObjectRetain();
    if (v14)
      goto LABEL_19;
  }
LABEL_28:
  swift_bridgeObjectRelease();
  *v11 = v5;
  return swift_bridgeObjectRelease();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t *v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t i;
  uint64_t v10;
  uint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t j;
  uint64_t v16;
  uint64_t v17;

  v1 = v0;
  v2 = (uint64_t *)(v0 + 128);
  swift_beginAccess();
  v3 = *(_QWORD *)(v0 + 128);
  if (v3 >> 62)
  {
    swift_bridgeObjectRetain();
    v4 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    v4 = *(_QWORD *)((v3 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v5 = MEMORY[0x24BEE4AF8];
  if (v4)
  {
    v6 = *v2;
    if ((unint64_t)*v2 >> 62)
    {
      swift_bridgeObjectRetain();
      result = _CocoaArrayWrapper.endIndex.getter();
      v7 = result;
      if (result)
        goto LABEL_6;
    }
    else
    {
      v7 = *(_QWORD *)((v6 & 0xFFFFFFFFFFFFF8) + 0x10);
      result = swift_bridgeObjectRetain();
      if (v7)
      {
LABEL_6:
        if (v7 < 1)
        {
          __break(1u);
          goto LABEL_31;
        }
        for (i = 0; i != v7; ++i)
        {
          if ((v6 & 0xC000000000000001) != 0)
          {
            v10 = MEMORY[0x23B7C6D9C](i, v6);
          }
          else
          {
            v10 = *(_QWORD *)(v6 + 8 * i + 32);
            swift_retain();
          }
          (*(void (**)(void))(*(_QWORD *)v10 + 96))();
          swift_release();
        }
      }
    }
    swift_bridgeObjectRelease();
    *v2 = v5;
    swift_bridgeObjectRelease();
  }
  v11 = (uint64_t *)(v1 + 136);
  result = swift_beginAccess();
  v12 = *(_QWORD *)(v1 + 136);
  if (v12 >> 62)
  {
    swift_bridgeObjectRetain();
    v17 = _CocoaArrayWrapper.endIndex.getter();
    result = swift_bridgeObjectRelease();
    if (!v17)
      return result;
  }
  else if (!*(_QWORD *)((v12 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    return result;
  }
  v13 = *v11;
  if ((unint64_t)*v11 >> 62)
  {
    swift_bridgeObjectRetain();
    result = _CocoaArrayWrapper.endIndex.getter();
    v14 = result;
    if (result)
    {
LABEL_19:
      if (v14 >= 1)
      {
        for (j = 0; j != v14; ++j)
        {
          if ((v13 & 0xC000000000000001) != 0)
          {
            v16 = MEMORY[0x23B7C6D9C](j, v13);
          }
          else
          {
            v16 = *(_QWORD *)(v13 + 8 * j + 32);
            swift_retain();
          }
          (*(void (**)(void))(*(_QWORD *)v16 + 96))();
          swift_release();
        }
        goto LABEL_28;
      }
LABEL_31:
      __break(1u);
      return result;
    }
  }
  else
  {
    v14 = *(_QWORD *)((v13 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = swift_bridgeObjectRetain();
    if (v14)
      goto LABEL_19;
  }
LABEL_28:
  swift_bridgeObjectRelease();
  *v11 = v5;
  return swift_bridgeObjectRelease();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t *v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t i;
  uint64_t v10;
  uint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t j;
  uint64_t v16;
  uint64_t v17;

  v1 = v0;
  v2 = (uint64_t *)(v0 + 80);
  swift_beginAccess();
  v3 = *(_QWORD *)(v0 + 80);
  if (v3 >> 62)
  {
    swift_bridgeObjectRetain();
    v4 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    v4 = *(_QWORD *)((v3 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v5 = MEMORY[0x24BEE4AF8];
  if (v4)
  {
    v6 = *v2;
    if ((unint64_t)*v2 >> 62)
    {
      swift_bridgeObjectRetain();
      result = _CocoaArrayWrapper.endIndex.getter();
      v7 = result;
      if (result)
        goto LABEL_6;
    }
    else
    {
      v7 = *(_QWORD *)((v6 & 0xFFFFFFFFFFFFF8) + 0x10);
      result = swift_bridgeObjectRetain();
      if (v7)
      {
LABEL_6:
        if (v7 < 1)
        {
          __break(1u);
          goto LABEL_31;
        }
        for (i = 0; i != v7; ++i)
        {
          if ((v6 & 0xC000000000000001) != 0)
          {
            v10 = MEMORY[0x23B7C6D9C](i, v6);
          }
          else
          {
            v10 = *(_QWORD *)(v6 + 8 * i + 32);
            swift_retain();
          }
          (*(void (**)(void))(*(_QWORD *)v10 + 96))();
          swift_release();
        }
      }
    }
    swift_bridgeObjectRelease();
    *v2 = v5;
    swift_bridgeObjectRelease();
  }
  v11 = (uint64_t *)(v1 + 88);
  result = swift_beginAccess();
  v12 = *(_QWORD *)(v1 + 88);
  if (v12 >> 62)
  {
    swift_bridgeObjectRetain();
    v17 = _CocoaArrayWrapper.endIndex.getter();
    result = swift_bridgeObjectRelease();
    if (!v17)
      return result;
  }
  else if (!*(_QWORD *)((v12 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    return result;
  }
  v13 = *v11;
  if ((unint64_t)*v11 >> 62)
  {
    swift_bridgeObjectRetain();
    result = _CocoaArrayWrapper.endIndex.getter();
    v14 = result;
    if (result)
    {
LABEL_19:
      if (v14 >= 1)
      {
        for (j = 0; j != v14; ++j)
        {
          if ((v13 & 0xC000000000000001) != 0)
          {
            v16 = MEMORY[0x23B7C6D9C](j, v13);
          }
          else
          {
            v16 = *(_QWORD *)(v13 + 8 * j + 32);
            swift_retain();
          }
          (*(void (**)(void))(*(_QWORD *)v16 + 96))();
          swift_release();
        }
        goto LABEL_28;
      }
LABEL_31:
      __break(1u);
      return result;
    }
  }
  else
  {
    v14 = *(_QWORD *)((v13 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = swift_bridgeObjectRetain();
    if (v14)
      goto LABEL_19;
  }
LABEL_28:
  swift_bridgeObjectRelease();
  *v11 = v5;
  return swift_bridgeObjectRelease();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t *v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t i;
  uint64_t v10;
  uint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t j;
  uint64_t v16;
  uint64_t v17;

  v1 = v0;
  v2 = (uint64_t *)(v0 + 272);
  swift_beginAccess();
  v3 = *(_QWORD *)(v0 + 272);
  if (v3 >> 62)
  {
    swift_bridgeObjectRetain();
    v4 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    v4 = *(_QWORD *)((v3 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v5 = MEMORY[0x24BEE4AF8];
  if (v4)
  {
    v6 = *v2;
    if ((unint64_t)*v2 >> 62)
    {
      swift_bridgeObjectRetain();
      result = _CocoaArrayWrapper.endIndex.getter();
      v7 = result;
      if (result)
        goto LABEL_6;
    }
    else
    {
      v7 = *(_QWORD *)((v6 & 0xFFFFFFFFFFFFF8) + 0x10);
      result = swift_bridgeObjectRetain();
      if (v7)
      {
LABEL_6:
        if (v7 < 1)
        {
          __break(1u);
          goto LABEL_31;
        }
        for (i = 0; i != v7; ++i)
        {
          if ((v6 & 0xC000000000000001) != 0)
          {
            v10 = MEMORY[0x23B7C6D9C](i, v6);
          }
          else
          {
            v10 = *(_QWORD *)(v6 + 8 * i + 32);
            swift_retain();
          }
          (*(void (**)(void))(*(_QWORD *)v10 + 96))();
          swift_release();
        }
      }
    }
    swift_bridgeObjectRelease();
    *v2 = v5;
    swift_bridgeObjectRelease();
  }
  v11 = (uint64_t *)(v1 + 280);
  result = swift_beginAccess();
  v12 = *(_QWORD *)(v1 + 280);
  if (v12 >> 62)
  {
    swift_bridgeObjectRetain();
    v17 = _CocoaArrayWrapper.endIndex.getter();
    result = swift_bridgeObjectRelease();
    if (!v17)
      return result;
  }
  else if (!*(_QWORD *)((v12 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    return result;
  }
  v13 = *v11;
  if ((unint64_t)*v11 >> 62)
  {
    swift_bridgeObjectRetain();
    result = _CocoaArrayWrapper.endIndex.getter();
    v14 = result;
    if (result)
    {
LABEL_19:
      if (v14 >= 1)
      {
        for (j = 0; j != v14; ++j)
        {
          if ((v13 & 0xC000000000000001) != 0)
          {
            v16 = MEMORY[0x23B7C6D9C](j, v13);
          }
          else
          {
            v16 = *(_QWORD *)(v13 + 8 * j + 32);
            swift_retain();
          }
          (*(void (**)(void))(*(_QWORD *)v16 + 96))();
          swift_release();
        }
        goto LABEL_28;
      }
LABEL_31:
      __break(1u);
      return result;
    }
  }
  else
  {
    v14 = *(_QWORD *)((v13 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = swift_bridgeObjectRetain();
    if (v14)
      goto LABEL_19;
  }
LABEL_28:
  swift_bridgeObjectRelease();
  *v11 = v5;
  return swift_bridgeObjectRelease();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t *v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t i;
  uint64_t v10;
  uint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t j;
  uint64_t v16;
  uint64_t v17;

  v1 = v0;
  v2 = (uint64_t *)(v0 + 240);
  swift_beginAccess();
  v3 = *(_QWORD *)(v0 + 240);
  if (v3 >> 62)
  {
    swift_bridgeObjectRetain();
    v4 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    v4 = *(_QWORD *)((v3 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v5 = MEMORY[0x24BEE4AF8];
  if (v4)
  {
    v6 = *v2;
    if ((unint64_t)*v2 >> 62)
    {
      swift_bridgeObjectRetain();
      result = _CocoaArrayWrapper.endIndex.getter();
      v7 = result;
      if (result)
        goto LABEL_6;
    }
    else
    {
      v7 = *(_QWORD *)((v6 & 0xFFFFFFFFFFFFF8) + 0x10);
      result = swift_bridgeObjectRetain();
      if (v7)
      {
LABEL_6:
        if (v7 < 1)
        {
          __break(1u);
          goto LABEL_31;
        }
        for (i = 0; i != v7; ++i)
        {
          if ((v6 & 0xC000000000000001) != 0)
          {
            v10 = MEMORY[0x23B7C6D9C](i, v6);
          }
          else
          {
            v10 = *(_QWORD *)(v6 + 8 * i + 32);
            swift_retain();
          }
          (*(void (**)(void))(*(_QWORD *)v10 + 96))();
          swift_release();
        }
      }
    }
    swift_bridgeObjectRelease();
    *v2 = v5;
    swift_bridgeObjectRelease();
  }
  v11 = (uint64_t *)(v1 + 248);
  result = swift_beginAccess();
  v12 = *(_QWORD *)(v1 + 248);
  if (v12 >> 62)
  {
    swift_bridgeObjectRetain();
    v17 = _CocoaArrayWrapper.endIndex.getter();
    result = swift_bridgeObjectRelease();
    if (!v17)
      return result;
  }
  else if (!*(_QWORD *)((v12 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    return result;
  }
  v13 = *v11;
  if ((unint64_t)*v11 >> 62)
  {
    swift_bridgeObjectRetain();
    result = _CocoaArrayWrapper.endIndex.getter();
    v14 = result;
    if (result)
    {
LABEL_19:
      if (v14 >= 1)
      {
        for (j = 0; j != v14; ++j)
        {
          if ((v13 & 0xC000000000000001) != 0)
          {
            v16 = MEMORY[0x23B7C6D9C](j, v13);
          }
          else
          {
            v16 = *(_QWORD *)(v13 + 8 * j + 32);
            swift_retain();
          }
          (*(void (**)(void))(*(_QWORD *)v16 + 96))();
          swift_release();
        }
        goto LABEL_28;
      }
LABEL_31:
      __break(1u);
      return result;
    }
  }
  else
  {
    v14 = *(_QWORD *)((v13 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = swift_bridgeObjectRetain();
    if (v14)
      goto LABEL_19;
  }
LABEL_28:
  swift_bridgeObjectRelease();
  *v11 = v5;
  return swift_bridgeObjectRelease();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t *v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t i;
  uint64_t v10;
  uint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t j;
  uint64_t v16;
  uint64_t v17;

  v1 = v0;
  v2 = (uint64_t *)(v0 + 160);
  swift_beginAccess();
  v3 = *(_QWORD *)(v0 + 160);
  if (v3 >> 62)
  {
    swift_bridgeObjectRetain();
    v4 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    v4 = *(_QWORD *)((v3 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v5 = MEMORY[0x24BEE4AF8];
  if (v4)
  {
    v6 = *v2;
    if ((unint64_t)*v2 >> 62)
    {
      swift_bridgeObjectRetain();
      result = _CocoaArrayWrapper.endIndex.getter();
      v7 = result;
      if (result)
        goto LABEL_6;
    }
    else
    {
      v7 = *(_QWORD *)((v6 & 0xFFFFFFFFFFFFF8) + 0x10);
      result = swift_bridgeObjectRetain();
      if (v7)
      {
LABEL_6:
        if (v7 < 1)
        {
          __break(1u);
          goto LABEL_31;
        }
        for (i = 0; i != v7; ++i)
        {
          if ((v6 & 0xC000000000000001) != 0)
          {
            v10 = MEMORY[0x23B7C6D9C](i, v6);
          }
          else
          {
            v10 = *(_QWORD *)(v6 + 8 * i + 32);
            swift_retain();
          }
          (*(void (**)(void))(*(_QWORD *)v10 + 96))();
          swift_release();
        }
      }
    }
    swift_bridgeObjectRelease();
    *v2 = v5;
    swift_bridgeObjectRelease();
  }
  v11 = (uint64_t *)(v1 + 168);
  result = swift_beginAccess();
  v12 = *(_QWORD *)(v1 + 168);
  if (v12 >> 62)
  {
    swift_bridgeObjectRetain();
    v17 = _CocoaArrayWrapper.endIndex.getter();
    result = swift_bridgeObjectRelease();
    if (!v17)
      return result;
  }
  else if (!*(_QWORD *)((v12 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    return result;
  }
  v13 = *v11;
  if ((unint64_t)*v11 >> 62)
  {
    swift_bridgeObjectRetain();
    result = _CocoaArrayWrapper.endIndex.getter();
    v14 = result;
    if (result)
    {
LABEL_19:
      if (v14 >= 1)
      {
        for (j = 0; j != v14; ++j)
        {
          if ((v13 & 0xC000000000000001) != 0)
          {
            v16 = MEMORY[0x23B7C6D9C](j, v13);
          }
          else
          {
            v16 = *(_QWORD *)(v13 + 8 * j + 32);
            swift_retain();
          }
          (*(void (**)(void))(*(_QWORD *)v16 + 96))();
          swift_release();
        }
        goto LABEL_28;
      }
LABEL_31:
      __break(1u);
      return result;
    }
  }
  else
  {
    v14 = *(_QWORD *)((v13 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = swift_bridgeObjectRetain();
    if (v14)
      goto LABEL_19;
  }
LABEL_28:
  swift_bridgeObjectRelease();
  *v11 = v5;
  return swift_bridgeObjectRelease();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t *v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t i;
  uint64_t v10;
  uint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t j;
  uint64_t v16;
  uint64_t v17;

  v1 = v0;
  v2 = (uint64_t *)(v0 + 176);
  swift_beginAccess();
  v3 = *(_QWORD *)(v0 + 176);
  if (v3 >> 62)
  {
    swift_bridgeObjectRetain();
    v4 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    v4 = *(_QWORD *)((v3 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v5 = MEMORY[0x24BEE4AF8];
  if (v4)
  {
    v6 = *v2;
    if ((unint64_t)*v2 >> 62)
    {
      swift_bridgeObjectRetain();
      result = _CocoaArrayWrapper.endIndex.getter();
      v7 = result;
      if (result)
        goto LABEL_6;
    }
    else
    {
      v7 = *(_QWORD *)((v6 & 0xFFFFFFFFFFFFF8) + 0x10);
      result = swift_bridgeObjectRetain();
      if (v7)
      {
LABEL_6:
        if (v7 < 1)
        {
          __break(1u);
          goto LABEL_31;
        }
        for (i = 0; i != v7; ++i)
        {
          if ((v6 & 0xC000000000000001) != 0)
          {
            v10 = MEMORY[0x23B7C6D9C](i, v6);
          }
          else
          {
            v10 = *(_QWORD *)(v6 + 8 * i + 32);
            swift_retain();
          }
          (*(void (**)(void))(*(_QWORD *)v10 + 96))();
          swift_release();
        }
      }
    }
    swift_bridgeObjectRelease();
    *v2 = v5;
    swift_bridgeObjectRelease();
  }
  v11 = (uint64_t *)(v1 + 184);
  result = swift_beginAccess();
  v12 = *(_QWORD *)(v1 + 184);
  if (v12 >> 62)
  {
    swift_bridgeObjectRetain();
    v17 = _CocoaArrayWrapper.endIndex.getter();
    result = swift_bridgeObjectRelease();
    if (!v17)
      return result;
  }
  else if (!*(_QWORD *)((v12 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    return result;
  }
  v13 = *v11;
  if ((unint64_t)*v11 >> 62)
  {
    swift_bridgeObjectRetain();
    result = _CocoaArrayWrapper.endIndex.getter();
    v14 = result;
    if (result)
    {
LABEL_19:
      if (v14 >= 1)
      {
        for (j = 0; j != v14; ++j)
        {
          if ((v13 & 0xC000000000000001) != 0)
          {
            v16 = MEMORY[0x23B7C6D9C](j, v13);
          }
          else
          {
            v16 = *(_QWORD *)(v13 + 8 * j + 32);
            swift_retain();
          }
          (*(void (**)(void))(*(_QWORD *)v16 + 96))();
          swift_release();
        }
        goto LABEL_28;
      }
LABEL_31:
      __break(1u);
      return result;
    }
  }
  else
  {
    v14 = *(_QWORD *)((v13 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = swift_bridgeObjectRetain();
    if (v14)
      goto LABEL_19;
  }
LABEL_28:
  swift_bridgeObjectRelease();
  *v11 = v5;
  return swift_bridgeObjectRelease();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t *v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t i;
  uint64_t v10;
  uint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t j;
  uint64_t v16;
  uint64_t v17;

  v1 = v0;
  v2 = (uint64_t *)(v0 + 144);
  swift_beginAccess();
  v3 = *(_QWORD *)(v0 + 144);
  if (v3 >> 62)
  {
    swift_bridgeObjectRetain();
    v4 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    v4 = *(_QWORD *)((v3 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v5 = MEMORY[0x24BEE4AF8];
  if (v4)
  {
    v6 = *v2;
    if ((unint64_t)*v2 >> 62)
    {
      swift_bridgeObjectRetain();
      result = _CocoaArrayWrapper.endIndex.getter();
      v7 = result;
      if (result)
        goto LABEL_6;
    }
    else
    {
      v7 = *(_QWORD *)((v6 & 0xFFFFFFFFFFFFF8) + 0x10);
      result = swift_bridgeObjectRetain();
      if (v7)
      {
LABEL_6:
        if (v7 < 1)
        {
          __break(1u);
          goto LABEL_31;
        }
        for (i = 0; i != v7; ++i)
        {
          if ((v6 & 0xC000000000000001) != 0)
          {
            v10 = MEMORY[0x23B7C6D9C](i, v6);
          }
          else
          {
            v10 = *(_QWORD *)(v6 + 8 * i + 32);
            swift_retain();
          }
          (*(void (**)(void))(*(_QWORD *)v10 + 96))();
          swift_release();
        }
      }
    }
    swift_bridgeObjectRelease();
    *v2 = v5;
    swift_bridgeObjectRelease();
  }
  v11 = (uint64_t *)(v1 + 152);
  result = swift_beginAccess();
  v12 = *(_QWORD *)(v1 + 152);
  if (v12 >> 62)
  {
    swift_bridgeObjectRetain();
    v17 = _CocoaArrayWrapper.endIndex.getter();
    result = swift_bridgeObjectRelease();
    if (!v17)
      return result;
  }
  else if (!*(_QWORD *)((v12 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    return result;
  }
  v13 = *v11;
  if ((unint64_t)*v11 >> 62)
  {
    swift_bridgeObjectRetain();
    result = _CocoaArrayWrapper.endIndex.getter();
    v14 = result;
    if (result)
    {
LABEL_19:
      if (v14 >= 1)
      {
        for (j = 0; j != v14; ++j)
        {
          if ((v13 & 0xC000000000000001) != 0)
          {
            v16 = MEMORY[0x23B7C6D9C](j, v13);
          }
          else
          {
            v16 = *(_QWORD *)(v13 + 8 * j + 32);
            swift_retain();
          }
          (*(void (**)(void))(*(_QWORD *)v16 + 96))();
          swift_release();
        }
        goto LABEL_28;
      }
LABEL_31:
      __break(1u);
      return result;
    }
  }
  else
  {
    v14 = *(_QWORD *)((v13 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = swift_bridgeObjectRetain();
    if (v14)
      goto LABEL_19;
  }
LABEL_28:
  swift_bridgeObjectRelease();
  *v11 = v5;
  return swift_bridgeObjectRelease();
}

BOOL specialized static _ShapeStyle_ResolverMode.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  void *v2;
  int v3;
  int v4;
  void *v5;
  int v6;
  int v7;
  id v8;
  id v9;
  char v10;
  _BOOL8 result;
  BOOL v12;

  v2 = *(void **)a1;
  v3 = *(unsigned __int16 *)(a1 + 8);
  v4 = *(unsigned __int8 *)(a1 + 10);
  v5 = *(void **)a2;
  v6 = *(unsigned __int16 *)(a2 + 8);
  v7 = *(unsigned __int8 *)(a2 + 10);
  if (!*(_QWORD *)a1)
  {
    if (v5)
      v12 = 0;
    else
      v12 = v3 == v6;
    if (v12)
      return v4 == v7;
    return 0;
  }
  if (!v5)
    return 0;
  type metadata accessor for NSBundle();
  v8 = v5;
  v9 = v2;
  v10 = static NSObject.== infix(_:_:)();

  result = 0;
  if ((v10 & 1) != 0 && v3 == v6)
    return v4 == v7;
  return result;
}

unint64_t lazy protocol witness table accessor for type _ShapeStyle_ResolverMode.Options and conformance _ShapeStyle_ResolverMode.Options()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _ShapeStyle_ResolverMode.Options and conformance _ShapeStyle_ResolverMode.Options;
  if (!lazy protocol witness table cache variable for type _ShapeStyle_ResolverMode.Options and conformance _ShapeStyle_ResolverMode.Options)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for _ShapeStyle_ResolverMode.Options, &type metadata for _ShapeStyle_ResolverMode.Options);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ShapeStyle_ResolverMode.Options and conformance _ShapeStyle_ResolverMode.Options);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _ShapeStyle_ResolverMode.Options and conformance _ShapeStyle_ResolverMode.Options;
  if (!lazy protocol witness table cache variable for type _ShapeStyle_ResolverMode.Options and conformance _ShapeStyle_ResolverMode.Options)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for _ShapeStyle_ResolverMode.Options, &type metadata for _ShapeStyle_ResolverMode.Options);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ShapeStyle_ResolverMode.Options and conformance _ShapeStyle_ResolverMode.Options);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _ShapeStyle_ResolverMode.Options and conformance _ShapeStyle_ResolverMode.Options;
  if (!lazy protocol witness table cache variable for type _ShapeStyle_ResolverMode.Options and conformance _ShapeStyle_ResolverMode.Options)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for _ShapeStyle_ResolverMode.Options, &type metadata for _ShapeStyle_ResolverMode.Options);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ShapeStyle_ResolverMode.Options and conformance _ShapeStyle_ResolverMode.Options);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _ShapeStyle_ResolverMode.Options and conformance _ShapeStyle_ResolverMode.Options;
  if (!lazy protocol witness table cache variable for type _ShapeStyle_ResolverMode.Options and conformance _ShapeStyle_ResolverMode.Options)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for _ShapeStyle_ResolverMode.Options, &type metadata for _ShapeStyle_ResolverMode.Options);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ShapeStyle_ResolverMode.Options and conformance _ShapeStyle_ResolverMode.Options);
  }
  return result;
}

void base witness table accessor for _AttributeBody in ShapeStyleResolver<A>()
{
  JUMPOUT(0x23B7C9C04);
}

uint64_t instantiation function for generic protocol witness table for ShapeStyleResolver<A>(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ShapeStyleResolver<A>);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for _ShapeStyle_ResolverMode(uint64_t a1, uint64_t a2)
{
  void *v3;
  id v4;

  v3 = *(void **)a2;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_WORD *)(a1 + 8) = *(_WORD *)(a2 + 8);
  *(_BYTE *)(a1 + 10) = *(_BYTE *)(a2 + 10);
  v4 = v3;
  return a1;
}

uint64_t assignWithCopy for _ShapeStyle_ResolverMode(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;

  v4 = *(void **)a1;
  v5 = *(void **)a2;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = v5;

  *(_WORD *)(a1 + 8) = *(_WORD *)(a2 + 8);
  *(_BYTE *)(a1 + 10) = *(_BYTE *)(a2 + 10);
  return a1;
}

uint64_t assignWithTake for _ShapeStyle_ResolverMode(uint64_t a1, uint64_t a2)
{
  void *v4;

  v4 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;

  *(_WORD *)(a1 + 8) = *(_WORD *)(a2 + 8);
  *(_BYTE *)(a1 + 10) = *(_BYTE *)(a2 + 10);
  return a1;
}

uint64_t getEnumTagSinglePayload for _ShapeStyle_ResolverMode(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *((_BYTE *)a1 + 11))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for _ShapeStyle_ResolverMode(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_BYTE *)(result + 10) = 0;
    *(_WORD *)(result + 8) = 0;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 11) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 11) = 0;
    if (a2)
      *(_QWORD *)result = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for _ShapeStyle_ResolverMode()
{
  return &type metadata for _ShapeStyle_ResolverMode;
}

ValueMetadata *type metadata accessor for _ShapeStyle_ResolverMode.Options()
{
  return &type metadata for _ShapeStyle_ResolverMode.Options;
}

uint64_t destroy for ShapeStyleResolver()
{
  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

uint64_t initializeWithCopy for ShapeStyleResolver(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_WORD *)(a1 + 12) = *(_WORD *)(a2 + 12);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  v3 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v3;
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for ShapeStyleResolver(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(a2 + 12);
  *(_BYTE *)(a1 + 13) = *(_BYTE *)(a2 + 13);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for ShapeStyleResolver(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(a2 + 12);
  *(_BYTE *)(a1 + 13) = *(_BYTE *)(a2 + 13);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  swift_release();
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_release();
  return a1;
}

uint64_t type metadata accessor for ShapeStyleResolver(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ShapeStyleResolver);
}

uint64_t outlined consume of AnimatablePair<AnimatableArray<Float>, AnimatablePair<AnimatableArray<AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>, AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>>?(uint64_t result)
{
  if (result)
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t outlined destroy of _AnyAnimatableData?(uint64_t a1)
{
  uint64_t v2;

  type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for _AnyAnimatableData?, (uint64_t)&type metadata for _AnyAnimatableData, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1C68]);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t outlined consume of _ShapeStyle_Pack.Fill.AnimatableData?(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, unsigned __int8 a11)
{
  if (a11 != 255)
    return outlined consume of _ShapeStyle_Pack.Fill.AnimatableData(result, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
  return result;
}

uint64_t outlined consume of AnimatablePair<_ShapeStyle_Pack.Fill.AnimatableData, AnimatablePair<Float, AnimatableArray<AnimatablePair<Float, _ShapeStyle_Pack.Effect.Kind.AnimatableData>>>>?(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13)
{
  if (a13)
  {
    outlined consume of _ShapeStyle_Pack.Fill.AnimatableData(result, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t AnyEquatable.init<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v7;
  uint64_t result;

  type metadata accessor for _AnyEquatableBox(0, a2, a3, a4);
  v7 = swift_allocObject();
  result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v7 + 104) - 8) + 32))(v7 + *(_QWORD *)(*(_QWORD *)v7 + 120), a1);
  *a5 = v7;
  return result;
}

uint64_t type metadata accessor for _AnyEquatableBox(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for _AnyEquatableBox);
}

uint64_t static AnyEquatable.== infix(_:_:)(uint64_t a1, _QWORD *a2)
{
  if (*(_QWORD *)a1 == *a2)
    return 1;
  else
    return (*(uint64_t (**)(void))(**(_QWORD **)a1 + 80))() & 1;
}

uint64_t AnyEquatable.hash.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 88))();
}

__n128 AnyEquatable.init(hash:)@<Q0>(__n128 *a1@<X0>, uint64_t *a2@<X8>)
{
  unsigned __int32 v4;
  uint64_t v5;
  __n128 result;

  v4 = a1[1].n128_u32[0];
  type metadata accessor for HashEquatableBox();
  v5 = swift_allocObject();
  result = *a1;
  *(__n128 *)(v5 + 16) = *a1;
  *(_DWORD *)(v5 + 32) = v4;
  *a2 = v5;
  return result;
}

uint64_t type metadata accessor for HashEquatableBox()
{
  return objc_opt_self();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance AnyEquatable(uint64_t a1, _QWORD *a2)
{
  if (*(_QWORD *)a1 == *a2)
    return 1;
  else
    return (*(uint64_t (**)(void))(**(_QWORD **)a1 + 80))() & 1;
}

ValueMetadata *type metadata accessor for AnyEquatable()
{
  return &type metadata for AnyEquatable;
}

void AnyEquatableBox.isEqual(to:)()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void AnyEquatableBox.hash.getter(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 20) = 1;
}

uint64_t type metadata accessor for AnyEquatableBox()
{
  return objc_opt_self();
}

uint64_t _AnyEquatableBox.isEqual(to:)()
{
  uint64_t result;
  char v1;

  result = swift_dynamicCastClass();
  if (result)
  {
    swift_retain();
    v1 = dispatch thunk of static Equatable.== infix(_:_:)();
    swift_release();
    return v1 & 1;
  }
  return result;
}

uint64_t _AnyEquatableBox.hash.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return makeStableIDData<A>(from:)(v1 + *(_QWORD *)(*(_QWORD *)v1 + 120), *(_QWORD *)(*(_QWORD *)v1 + 104), a1);
}

BOOL HashEquatableBox.isEqual(to:)(uint64_t a1)
{
  int32x4_t *v1;

  if (*(__objc2_class **)a1 != _TtC7SwiftUIP33_5FED8E8437E1C5DEB2554486604823AB16HashEquatableBox)
    return 0;
  if ((vminv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(vmovn_s32(vceqq_s32(v1[1], *(int32x4_t *)(a1 + 16))), 0xFuLL))) & 1) != 0)
    return v1[2].i32[0] == *(_DWORD *)(a1 + 32);
  return 0;
}

__n128 HashEquatableBox.hash.getter@<Q0>(__n128 *a1@<X8>)
{
  __n128 *v1;
  unsigned __int32 v2;
  __n128 result;

  v2 = v1[2].n128_u32[0];
  result = v1[1];
  *a1 = result;
  a1[1].n128_u32[0] = v2;
  a1[1].n128_u8[4] = 0;
  return result;
}

uint64_t HashEquatableBox.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t protocol witness for MaterialLayer.content.getter in conformance IntelligenceLightSourceLayer@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  char *v2;
  char v5;
  char v6;
  uint64_t result;

  v5 = *v2;
  v6 = v2[1];
  result = swift_allocObject();
  *(_QWORD *)(result + 40) = a1;
  *(_QWORD *)(result + 48) = &protocol witness table for IntelligenceLightSourceLayer;
  *(_BYTE *)(result + 16) = v5;
  *(_BYTE *)(result + 17) = v6;
  *a2 = result | 0x6000000000000000;
  return result;
}

uint64_t sub_234D996F8()
{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  return swift_deallocObject();
}

uint64_t getEnumTagSinglePayload for IntelligenceLightSourceLayer(unsigned __int16 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFF)
    goto LABEL_17;
  if (a2 + 65281 <= 0xFFFEFFFF)
    v2 = 2;
  else
    v2 = 4;
  if (a2 + 65281 < 0xFF0000)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 16)) - 65281;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = a1[1];
      if (!a1[1])
        goto LABEL_17;
      return (*a1 | (v4 << 16)) - 65281;
    }
    v4 = *((unsigned __int8 *)a1 + 2);
    if (*((_BYTE *)a1 + 2))
      return (*a1 | (v4 << 16)) - 65281;
  }
LABEL_17:
  v6 = *(unsigned __int8 *)a1;
  v7 = v6 >= 2;
  v8 = v6 - 2;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for IntelligenceLightSourceLayer(_WORD *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 65281 <= 0xFFFEFFFF)
    v3 = 2;
  else
    v3 = 4;
  if (a3 + 65281 < 0xFF0000)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_234D997FC + 4 * byte_2352A01B5[v4]))();
  *a1 = a2 - 255;
  return ((uint64_t (*)(void))((char *)sub_234D99830 + 4 * asc_2352A01B0[v4]))();
}

uint64_t sub_234D99830(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 2) = v1;
  return result;
}

uint64_t sub_234D99838(uint64_t result, int a2)
{
  *(_WORD *)(result + 2) = 0;
  if (a2)
    JUMPOUT(0x234D99840);
  return result;
}

uint64_t sub_234D9984C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 2) = 0;
  if (!a2)
    JUMPOUT(0x234D99854);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_234D99858(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 2) = v1;
  return result;
}

uint64_t sub_234D99860(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 2) = v1;
  return result;
}

ValueMetadata *type metadata accessor for IntelligenceLightSourceLayer()
{
  return &type metadata for IntelligenceLightSourceLayer;
}

Class protocol witness for PlatformViewFactory.makePlatformView() in conformance IntelligenceLightSourceLayer()
{
  uint64_t v0;

  return CoreViewMakeIntelligenceLightSourceView(*(unsigned __int8 *)(v0 + 1));
}

uint64_t protocol witness for PlatformViewFactory.updatePlatformView(_:) in conformance IntelligenceLightSourceLayer(_QWORD *a1)
{
  uint64_t v1;

  return CoreViewUpdateIntelligenceLightSourceView(*a1, *(unsigned __int8 *)(v1 + 1));
}

ValueMetadata *protocol witness for AnyViewFactory.viewType.getter in conformance IntelligenceLightSourceLayer()
{
  return &type metadata for EmptyView;
}

int64_t ProtobufEncoder.cgFloatField(_:_:defaultValue:)(int64_t result, uint64_t a2, char a3, double a4)
{
  _QWORD *v4;
  double v5;
  double v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int64_t v10;

  v5 = a4;
  if ((a3 & 1) == 0 && *(double *)&a2 == a4)
    return result;
  v6 = fabs(a4);
  v7 = 5;
  if (v6 >= 65536.0)
    v7 = 1;
  ProtobufEncoder.encodeVarint(_:)(v7 | (8 * result));
  if (v6 >= 65536.0)
  {
    v9 = v4[1];
    v10 = v9 + 8;
    if (__OFADD__(v9, 8))
    {
      __break(1u);
    }
    else if (v4[2] >= v10)
    {
      v4[1] = v10;
      result = *v4 + v9;
LABEL_12:
      *(double *)result = v5;
      return result;
    }
    result = ProtobufEncoder.growBufferSlow(to:)(v10);
    goto LABEL_12;
  }
  v8 = v4[1];
  result = v8 + 4;
  if (__OFADD__(v8, 4))
  {
    __break(1u);
  }
  else
  {
    *(float *)&v5 = v5;
    if (v4[2] >= result)
    {
      v4[1] = result;
      *(_DWORD *)(*v4 + v8) = LODWORD(v5);
      return result;
    }
  }
  result = ProtobufEncoder.growBufferSlow(to:)(result);
  *(_DWORD *)result = LODWORD(v5);
  return result;
}

void ProtobufEncoder.enumField<A, B>(_:_:defaultValue:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char v22;
  Swift::UInt v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v25 = a8;
  v24 = a7;
  v26 = a2;
  v12 = type metadata accessor for Optional();
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v15 = (char *)&v24 - v14;
  v16 = *(_QWORD *)(a5 - 8);
  v18 = MEMORY[0x24BDAC7A8](v17);
  v20 = (char *)&v24 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = (*(uint64_t (**)(uint64_t, uint64_t, double))(a6 + 16))(a4, a6, v18);
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v15, a3, v12);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v15, 1, a5) == 1)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v20, v15, a5);
    v22 = dispatch thunk of static Equatable.== infix(_:_:)();
    (*(void (**)(char *, uint64_t))(v16 + 8))(v20, a5);
    if ((v22 & 1) != 0)
      return;
  }
  v23 = (*(uint64_t (**)(uint64_t))(v25 + 8))(a5);
  ProtobufEncoder.encodeVarint(_:)(8 * v21);
  ProtobufEncoder.encodeVarint(_:)(v23);
}

uint64_t ProtobufEncoder.messageField<A, B>(_:_:defaultValue:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  uint64_t result;

  v11 = (*(uint64_t (**)(uint64_t, uint64_t))(a6 + 16))(a4, a6);
  result = dispatch thunk of static Equatable.== infix(_:_:)();
  if ((result & 1) == 0)
  {
    ProtobufEncoder.encodeVarint(_:)((8 * v11) | 2);
    return ProtobufEncoder.encodeMessage<A>(_:)(a2, a5, a8);
  }
  return result;
}

uint64_t ProtobufEncoder.messageField<A, B>(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9;

  v9 = (*(uint64_t (**)(uint64_t, uint64_t))(a5 + 16))(a3, a5);
  ProtobufEncoder.encodeVarint(_:)((8 * v9) | 2);
  return ProtobufEncoder.encodeMessage<A>(_:)(a2, a4, a6);
}

int64_t ProtobufEncoder.cgFloatField<A>(_:_:defaultValue:)(double a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  int64_t result;
  double v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  result = (*(uint64_t (**)(uint64_t, uint64_t))(a6 + 16))(a5, a6);
  if ((a4 & 1) != 0 || *(double *)&a3 != a1)
  {
    v11 = fabs(a1);
    v12 = 5;
    if (v11 >= 65536.0)
      v12 = 1;
    ProtobufEncoder.encodeVarint(_:)(v12 | (8 * result));
    if (v11 >= 65536.0)
    {
      v14 = v6[1];
      result = v14 + 8;
      if (__OFADD__(v14, 8))
      {
        __break(1u);
      }
      else if (v6[2] >= result)
      {
        v6[1] = result;
        *(double *)(*v6 + v14) = a1;
        return result;
      }
      result = ProtobufEncoder.growBufferSlow(to:)(result);
      *(double *)result = a1;
      return result;
    }
    v13 = v6[1];
    result = v13 + 4;
    if (__OFADD__(v13, 4))
    {
      __break(1u);
    }
    else
    {
      *(float *)&a1 = a1;
      if (v6[2] >= result)
      {
        v6[1] = result;
        *(_DWORD *)(*v6 + v13) = LODWORD(a1);
        return result;
      }
    }
    result = ProtobufEncoder.growBufferSlow(to:)(result);
    *(_DWORD *)result = LODWORD(a1);
  }
  return result;
}

uint64_t ProtobufEncoder.stringField<A>(_:_:defaultValue:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t result;
  uint64_t v10;

  result = (*(uint64_t (**)(uint64_t, uint64_t))(a7 + 16))(a6, a7);
  v10 = result;
  if (a2 || a3 != 0xE000000000000000)
  {
    result = _stringCompareWithSmolCheck(_:_:expecting:)();
    if ((result & 1) == 0)
      return ProtobufEncoder.stringFieldAlways(_:_:)(v10);
  }
  return result;
}

void ProtobufEncoder.uintField<A>(_:_:defaultValue:)(uint64_t a1, Swift::UInt a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9;

  v9 = (*(uint64_t (**)(uint64_t, uint64_t))(a6 + 16))(a5, a6);
  if ((a4 & 1) != 0 || a2 != a3)
  {
    ProtobufEncoder.encodeVarint(_:)(8 * v9);
    ProtobufEncoder.encodeVarint(_:)(a2);
  }
}

uint64_t ProtobufEncoder.messageField<A>(_:_:)(uint64_t a1, uint64_t (*a2)(uint64_t), uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t result;
  unint64_t v13;
  unint64_t v14;

  v7 = v5;
  v9 = (*(uint64_t (**)(uint64_t, uint64_t))(a5 + 16))(a4, a5);
  ProtobufEncoder.encodeVarint(_:)((8 * v9) | 2);
  v10 = *(_QWORD *)(v5 + 8);
  v11 = *(_QWORD **)(v5 + 24);
  result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
  {
    result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v11[2] + 1, 1, v11);
    v11 = (_QWORD *)result;
  }
  v14 = v11[2];
  v13 = v11[3];
  if (v14 >= v13 >> 1)
  {
    result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v13 > 1), v14 + 1, 1, v11);
    v11 = (_QWORD *)result;
  }
  v11[2] = v14 + 1;
  v11[v14 + 4] = v10;
  *(_QWORD *)(v7 + 24) = v11;
  if (__OFADD__(v10, 1))
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v7 + 8) = v10 + 1;
    result = a2(v7);
    if (!v6)
      return ProtobufEncoder.endLengthDelimited()();
  }
  return result;
}

void ProtobufEncoder.intField<A>(_:_:defaultValue:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9;

  v9 = (*(uint64_t (**)(uint64_t, uint64_t))(a6 + 16))(a5, a6);
  if ((a4 & 1) != 0 || a2 != a3)
  {
    ProtobufEncoder.encodeVarint(_:)(8 * v9);
    ProtobufEncoder.encodeVarint(_:)((2 * a2) ^ (a2 >> 63));
  }
}

void ProtobufEncoder.BOOLField<A>(_:_:defaultValue:)(uint64_t a1, int a2, unsigned __int8 a3, uint64_t a4, uint64_t a5)
{
  int v7;
  uint64_t v8;

  v7 = a3;
  v8 = (*(uint64_t (**)(uint64_t, uint64_t))(a5 + 16))(a4, a5);
  if (v7 == 2 || ((((a3 & 1) == 0) ^ a2) & 1) == 0)
  {
    ProtobufEncoder.encodeVarint(_:)(8 * v8);
    ProtobufEncoder.encodeVarint(_:)(a2 & 1);
  }
}

int64_t ProtobufEncoder.doubleField<A>(_:_:defaultValue:)(double a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  int64_t result;
  uint64_t v11;

  result = (*(uint64_t (**)(uint64_t, uint64_t))(a6 + 16))(a5, a6);
  if ((a4 & 1) != 0 || *(double *)&a3 != a1)
  {
    ProtobufEncoder.encodeVarint(_:)((8 * result) | 1);
    v11 = v6[1];
    result = v11 + 8;
    if (__OFADD__(v11, 8))
    {
      __break(1u);
    }
    else if (v6[2] >= result)
    {
      v6[1] = result;
      *(double *)(*v6 + v11) = a1;
      return result;
    }
    result = ProtobufEncoder.growBufferSlow(to:)(result);
    *(double *)result = a1;
  }
  return result;
}

uint64_t ProtobufEncoder.codableField<A, B>(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9;

  v9 = (*(uint64_t (**)(uint64_t, uint64_t))(a5 + 16))(a3, a5);
  return ProtobufEncoder.codableField<A>(_:_:)(v9, a2, a4, a6);
}

int64_t ProtobufEncoder.floatField<A>(_:_:defaultValue:)(float a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  int64_t result;
  uint64_t v9;

  result = (*(uint64_t (**)(uint64_t, uint64_t))(a5 + 16))(a4, a5);
  if ((a3 & 0x100000000) != 0 || *(float *)&a3 != a1)
  {
    ProtobufEncoder.encodeVarint(_:)((8 * result) | 5);
    v9 = v5[1];
    result = v9 + 4;
    if (__OFADD__(v9, 4))
    {
      __break(1u);
    }
    else if (v5[2] >= result)
    {
      v5[1] = result;
      *(float *)(*v5 + v9) = a1;
      return result;
    }
    result = ProtobufEncoder.growBufferSlow(to:)(result);
    *(float *)result = a1;
  }
  return result;
}

Swift::Void __swiftcall ProtobufEncoder.uintField(_:_:defaultValue:)(Swift::UInt _, Swift::UInt a2, Swift::UInt_optional defaultValue)
{
  if (defaultValue.is_nil || a2 != defaultValue.value)
  {
    ProtobufEncoder.encodeVarint(_:)(8 * _);
    ProtobufEncoder.encodeVarint(_:)(a2);
  }
}

uint64_t ProtobufEncoder.messageField<A>(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  ProtobufEncoder.encodeVarint(_:)((8 * a1) | 2);
  return ProtobufEncoder.encodeMessage<A>(_:)(a2, a3, a4);
}

Swift::Void __swiftcall ProtobufEncoder.floatField(_:_:defaultValue:)(Swift::UInt _, Swift::Float a2, Swift::Float_optional *defaultValue)
{
  _QWORD *v3;
  uint64_t v5;
  int64_t v6;
  Swift::Float *v7;

  if (((unint64_t)defaultValue & 0x100000000) != 0 || *(float *)&defaultValue != a2)
  {
    ProtobufEncoder.encodeVarint(_:)((8 * _) | 5);
    v5 = v3[1];
    v6 = v5 + 4;
    if (__OFADD__(v5, 4))
    {
      __break(1u);
    }
    else if (v3[2] >= v6)
    {
      v3[1] = v6;
      v7 = (Swift::Float *)(*v3 + v5);
LABEL_6:
      *v7 = a2;
      return;
    }
    v7 = (Swift::Float *)ProtobufEncoder.growBufferSlow(to:)(v6);
    goto LABEL_6;
  }
}

void ProtobufEncoder.dataField(_:_:)(uint64_t a1, _BYTE *a2, _BYTE *a3)
{
  if (a2)
  {
    if (a3 != a2)
    {
      ProtobufEncoder.encodeVarint(_:)((8 * a1) | 2);
      ProtobufEncoder.encodeData(_:)(a2, a3);
    }
  }
}

void ProtobufEncoder.dataField(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __asm { BR              X9 }
}

Swift::Void __swiftcall ProtobufEncoder.doubleField(_:_:defaultValue:)(Swift::UInt _, Swift::Double a2, Swift::Double_optional defaultValue)
{
  char v3;
  _QWORD *v4;
  uint64_t v6;
  int64_t v7;
  Swift::Double *v8;

  if ((v3 & 1) != 0 || *(double *)&defaultValue.is_nil != a2)
  {
    ProtobufEncoder.encodeVarint(_:)((8 * _) | 1);
    v6 = v4[1];
    v7 = v6 + 8;
    if (__OFADD__(v6, 8))
    {
      __break(1u);
    }
    else if (v4[2] >= v7)
    {
      v4[1] = v7;
      v8 = (Swift::Double *)(*v4 + v6);
LABEL_6:
      *v8 = a2;
      return;
    }
    v8 = (Swift::Double *)ProtobufEncoder.growBufferSlow(to:)(v7);
    goto LABEL_6;
  }
}

uint64_t static ProtobufEncoder.encoding(_:)(void (*a1)(void **))
{
  return specialized static ProtobufEncoder.encoding(_:)(a1);
}

void ProtobufEncoder.enumField<A, B>(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8;
  Swift::UInt v9;

  v8 = (*(uint64_t (**)(uint64_t, uint64_t))(a5 + 16))(a3, a5);
  v9 = (*(uint64_t (**)(uint64_t, uint64_t))(a6 + 8))(a4, a6);
  ProtobufEncoder.encodeVarint(_:)(8 * v8);
  ProtobufEncoder.encodeVarint(_:)(v9);
}

Swift::Void __swiftcall ProtobufEncoder.uint64Field(_:_:defaultValue:)(Swift::UInt _, Swift::UInt64 a2, Swift::UInt64_optional defaultValue)
{
  if (defaultValue.is_nil || a2 != defaultValue.value)
  {
    ProtobufEncoder.encodeVarint(_:)(8 * _);
    ProtobufEncoder.encodeVarint(_:)(a2);
  }
}

uint64_t static ProtobufEncoder.EncodingError.== infix(_:_:)()
{
  return 1;
}

void ProtobufEncoder.EncodingError.hash(into:)()
{
  Hasher._combine(_:)(0);
}

Swift::Int ProtobufEncoder.EncodingError.hashValue.getter()
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(0);
  return Hasher._finalize()();
}

uint64_t ProtobufEncoder.userInfo.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t ProtobufEncoder.userInfo.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 32) = a1;
  return result;
}

uint64_t (*ProtobufEncoder.userInfo.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t ProtobufEncoder.takeData()()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  double v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, _QWORD);
  uint64_t v13;

  v1 = v0;
  v2 = type metadata accessor for Data.Deallocator();
  v3 = *(_QWORD *)(v2 - 8);
  v4 = MEMORY[0x24BDAC7A8](v2);
  v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *v0;
  if (!*v0)
    return 0;
  v8 = v0[1];
  (*(void (**)(char *, _QWORD, uint64_t, double))(v3 + 104))(v6, *MEMORY[0x24BDCDB90], v2, v4);
  Data.Deallocator._deallocator.getter();
  if (v8)
  {
    type metadata accessor for __DataStorage();
    swift_allocObject();
    swift_retain();
    v9 = __DataStorage.init(bytes:length:copy:deallocator:offset:)();
    v10 = specialized Data._Representation.init(_:count:)(v9, v8);
    swift_release();
  }
  else
  {
    v11 = (void (*)(uint64_t, _QWORD))Data.Deallocator._deallocator.getter();
    v11(v7, 0);
    swift_release();
    swift_release();
    v10 = 0;
  }
  (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  *v1 = 0;
  v1[1] = 0;
  v1[2] = 0;
  return v10;
}

uint64_t static ProtobufEncoder.encoding<A>(_:)()
{
  return specialized static ProtobufEncoder.encoding(_:)((void (*)(void **))partial apply for closure #1 in static ProtobufEncoder.encoding<A>(_:));
}

Swift::Void __swiftcall ProtobufEncoder.BOOLField(_:_:defaultValue:)(Swift::UInt _, Swift::Bool a2, Swift::Bool_optional defaultValue)
{
  if (defaultValue.value == 2 || ((!defaultValue.value ^ a2) & 1) == 0)
  {
    ProtobufEncoder.encodeVarint(_:)(8 * _);
    ProtobufEncoder.encodeVarint(_:)(a2);
  }
}

Swift::Void __swiftcall ProtobufEncoder.encodeVarint(_:)(Swift::UInt a1)
{
  _QWORD *v1;
  Swift::UInt v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  int64_t v6;
  _BYTE *v7;
  uint64_t v8;
  char v9;
  BOOL v10;

  v2 = a1;
  if (a1 > 0x7F)
  {
    v4 = __clz(a1);
    v5 = (((37 * (70 - v4)) >> 8)
        + (((70 - v4 - ((unsigned __int16)(37 * (70 - v4)) >> 8)) & 0xFE) >> 1)) >> 2;
    v3 = v1[1];
    v6 = v3 + v5;
    if (!__OFADD__(v3, v5))
      goto LABEL_5;
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  v3 = v1[1];
  if (v3 < v1[2])
  {
    *(_BYTE *)(*v1 + v3) = a1;
    v1[1] = v3 + 1;
    return;
  }
  v6 = v3 + 1;
  if (__OFADD__(v3, 1))
    goto LABEL_12;
LABEL_5:
  if (v1[2] < v6)
  {
LABEL_13:
    v7 = (_BYTE *)ProtobufEncoder.growBufferSlow(to:)(v6);
    goto LABEL_7;
  }
  v1[1] = v6;
  v7 = (_BYTE *)(*v1 + v3);
LABEL_7:
  LOBYTE(v8) = v2 & 0x7F;
  if (v2 >= 0x80)
  {
    do
    {
      v9 = v8 | 0x80;
      v8 = (v2 >> 7) & 0x7F;
      *v7++ = v9;
      v10 = v2 >= 0x4000;
      v2 >>= 7;
    }
    while (v10);
  }
  *v7 = v8;
}

void ProtobufEncoder.enumField<A>(_:_:defaultValue:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  uint64_t v16;
  char *v17;
  char v18;
  Swift::UInt v19;
  uint64_t v20;
  uint64_t v21;

  v20 = a5;
  v21 = a1;
  v9 = type metadata accessor for Optional();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v20 - v11;
  v13 = *(_QWORD *)(a4 - 8);
  v15 = MEMORY[0x24BDAC7A8](v14);
  v17 = (char *)&v20 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v10 + 16))(v12, a3, v9, v15);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v12, 1, a4) == 1)
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v17, v12, a4);
    v18 = dispatch thunk of static Equatable.== infix(_:_:)();
    (*(void (**)(char *, uint64_t))(v13 + 8))(v17, a4);
    if ((v18 & 1) != 0)
      return;
  }
  v19 = (*(uint64_t (**)(uint64_t, uint64_t))(a6 + 8))(a4, a6);
  ProtobufEncoder.encodeVarint(_:)(8 * v21);
  ProtobufEncoder.encodeVarint(_:)(v19);
}

void ProtobufEncoder.enumField<A>(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  Swift::UInt v5;

  v5 = (*(uint64_t (**)(uint64_t, uint64_t))(a4 + 8))(a3, a4);
  ProtobufEncoder.encodeVarint(_:)(8 * a1);
  ProtobufEncoder.encodeVarint(_:)(v5);
}

Swift::Void __swiftcall ProtobufEncoder.intField(_:_:defaultValue:)(Swift::UInt _, Swift::Int a2, Swift::Int_optional defaultValue)
{
  if (defaultValue.is_nil || a2 != defaultValue.value)
  {
    ProtobufEncoder.encodeVarint(_:)(8 * _);
    ProtobufEncoder.encodeVarint(_:)((2 * a2) ^ (a2 >> 63));
  }
}

Swift::Void __swiftcall ProtobufEncoder.encodeVarintZZ(_:)(Swift::Int a1)
{
  ProtobufEncoder.encodeVarint(_:)((2 * a1) ^ (a1 >> 63));
}

Swift::Void __swiftcall ProtobufEncoder.int64Field(_:_:defaultValue:)(Swift::UInt _, Swift::Int64 a2, Swift::Int64_optional defaultValue)
{
  if (defaultValue.is_nil || a2 != defaultValue.value)
  {
    ProtobufEncoder.encodeVarint(_:)(8 * _);
    ProtobufEncoder.encodeVarint(_:)((2 * a2) ^ (a2 >> 63));
  }
}

Swift::Void __swiftcall ProtobufEncoder.encodeVarint64ZZ(_:)(Swift::Int64 a1)
{
  ProtobufEncoder.encodeVarint(_:)((2 * a1) ^ (a1 >> 63));
}

Swift::Void __swiftcall ProtobufEncoder.fixed32Field(_:_:defaultValue:)(Swift::UInt _, Swift::UInt32 a2, Swift::UInt32_optional defaultValue)
{
  _QWORD *v3;
  uint64_t v5;
  int64_t v6;
  _DWORD *v7;

  if ((*(_QWORD *)&defaultValue.value & 0x100000000) != 0 || defaultValue.value != a2)
  {
    ProtobufEncoder.encodeVarint(_:)((8 * _) | 5);
    v5 = v3[1];
    v6 = v5 + 4;
    if (__OFADD__(v5, 4))
    {
      __break(1u);
    }
    else if (v3[2] >= v6)
    {
      v3[1] = v6;
      v7 = (_DWORD *)(*v3 + v5);
LABEL_6:
      *v7 = a2;
      return;
    }
    v7 = (_DWORD *)ProtobufEncoder.growBufferSlow(to:)(v6);
    goto LABEL_6;
  }
}

Swift::Void __swiftcall ProtobufEncoder.encodeFixed32(_:)(Swift::UInt32 a1)
{
  _QWORD *v1;
  uint64_t v3;
  int64_t v4;
  _DWORD *v5;

  v3 = v1[1];
  v4 = v3 + 4;
  if (__OFADD__(v3, 4))
  {
    __break(1u);
    goto LABEL_6;
  }
  if (v1[2] < v4)
  {
LABEL_6:
    v5 = (_DWORD *)ProtobufEncoder.growBufferSlow(to:)(v4);
    goto LABEL_4;
  }
  v1[1] = v4;
  v5 = (_DWORD *)(*v1 + v3);
LABEL_4:
  *v5 = a1;
}

Swift::Void __swiftcall ProtobufEncoder.fixed64Field(_:_:defaultValue:)(Swift::UInt _, Swift::UInt64 a2, Swift::UInt64_optional defaultValue)
{
  _QWORD *v3;
  uint64_t v5;
  int64_t v6;
  _QWORD *v7;

  if (defaultValue.is_nil || a2 != defaultValue.value)
  {
    ProtobufEncoder.encodeVarint(_:)((8 * _) | 1);
    v5 = v3[1];
    v6 = v5 + 8;
    if (__OFADD__(v5, 8))
    {
      __break(1u);
    }
    else if (v3[2] >= v6)
    {
      v3[1] = v6;
      v7 = (_QWORD *)(*v3 + v5);
LABEL_6:
      *v7 = a2;
      return;
    }
    v7 = (_QWORD *)ProtobufEncoder.growBufferSlow(to:)(v6);
    goto LABEL_6;
  }
}

Swift::Void __swiftcall ProtobufEncoder.encodeFixed64(_:)(Swift::UInt64 a1)
{
  _QWORD *v1;
  uint64_t v3;
  int64_t v4;
  _QWORD *v5;

  v3 = v1[1];
  v4 = v3 + 8;
  if (__OFADD__(v3, 8))
  {
    __break(1u);
    goto LABEL_6;
  }
  if (v1[2] < v4)
  {
LABEL_6:
    v5 = (_QWORD *)ProtobufEncoder.growBufferSlow(to:)(v4);
    goto LABEL_4;
  }
  v1[1] = v4;
  v5 = (_QWORD *)(*v1 + v3);
LABEL_4:
  *v5 = a1;
}

Swift::Void __swiftcall ProtobufEncoder.encodeFloat(_:)(Swift::Float a1)
{
  _QWORD *v1;
  Swift::Float v2;
  uint64_t v3;
  int64_t v4;
  Swift::Float *v5;

  v3 = v1[1];
  v4 = v3 + 4;
  if (__OFADD__(v3, 4))
  {
    __break(1u);
    goto LABEL_6;
  }
  v2 = a1;
  if (v1[2] < v4)
  {
LABEL_6:
    v5 = (Swift::Float *)ProtobufEncoder.growBufferSlow(to:)(v4);
    goto LABEL_4;
  }
  v1[1] = v4;
  v5 = (Swift::Float *)(*v1 + v3);
LABEL_4:
  *v5 = v2;
}

double *ProtobufEncoder.encodeDouble(_:)(double a1)
{
  _QWORD *v1;
  double v2;
  uint64_t v3;
  int64_t v4;
  double *result;

  v3 = v1[1];
  v4 = v3 + 8;
  if (__OFADD__(v3, 8))
  {
    __break(1u);
    goto LABEL_6;
  }
  v2 = a1;
  if (v1[2] < v4)
  {
LABEL_6:
    result = (double *)ProtobufEncoder.growBufferSlow(to:)(v4);
    goto LABEL_4;
  }
  v1[1] = v4;
  result = (double *)(*v1 + v3);
LABEL_4:
  *result = v2;
  return result;
}

void ProtobufEncoder.encodeData(_:)(_BYTE *a1, _BYTE *a2)
{
  _QWORD *v2;
  size_t v5;
  Swift::UInt v6;
  uint64_t v7;
  int64_t v8;
  void *v9;

  v5 = a2 - a1;
  if (a1)
    v6 = a2 - a1;
  else
    v6 = 0;
  ProtobufEncoder.encodeVarint(_:)(v6);
  if (a1 && a2 != a1)
  {
    v7 = v2[1];
    v8 = v7 + v5;
    if (__OFADD__(v7, v5))
    {
      __break(1u);
    }
    else if (v2[2] >= v8)
    {
      v2[1] = v8;
      v9 = (void *)(*v2 + v7);
LABEL_10:
      memcpy(v9, a1, v5);
      return;
    }
    v9 = (void *)ProtobufEncoder.growBufferSlow(to:)(v8);
    goto LABEL_10;
  }
}

uint64_t ProtobufEncoder.packedField(_:_:)(uint64_t a1, void (*a2)(uint64_t))
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  _QWORD *v6;
  uint64_t result;
  unint64_t v8;
  unint64_t v9;

  v3 = v2;
  ProtobufEncoder.encodeVarint(_:)((8 * a1) | 2);
  v5 = *(_QWORD *)(v2 + 8);
  v6 = *(_QWORD **)(v2 + 24);
  result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
  {
    result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v6[2] + 1, 1, v6);
    v6 = (_QWORD *)result;
  }
  v9 = v6[2];
  v8 = v6[3];
  if (v9 >= v8 >> 1)
  {
    result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v8 > 1), v9 + 1, 1, v6);
    v6 = (_QWORD *)result;
  }
  v6[2] = v9 + 1;
  v6[v9 + 4] = v5;
  *(_QWORD *)(v3 + 24) = v6;
  if (__OFADD__(v5, 1))
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v3 + 8) = v5 + 1;
    a2(v3);
    return ProtobufEncoder.endLengthDelimited()();
  }
  return result;
}

uint64_t ProtobufEncoder.endLengthDelimited()()
{
  _QWORD *v0;
  int64_t v1;
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 v6;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  char v12;
  BOOL v13;

  v1 = v0[3];
  if (*(_QWORD *)(v1 + 16))
  {
    result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) != 0)
    {
      v3 = *(_QWORD *)(v1 + 16);
      if (v3)
        goto LABEL_4;
LABEL_18:
      __break(1u);
      goto LABEL_19;
    }
  }
  else
  {
    __break(1u);
  }
  result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()((_QWORD *)v1);
  v1 = result;
  v3 = *(_QWORD *)(result + 16);
  if (!v3)
    goto LABEL_18;
LABEL_4:
  v4 = v3 - 1;
  v5 = *(_QWORD *)(v1 + 8 * v4 + 32);
  *(_QWORD *)(v1 + 16) = v4;
  v0[3] = v1;
  v3 = v0[1];
  v1 = v3 - (v5 + 1);
  if (__OFSUB__(v3, v5 + 1))
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  if (v1 > 127)
  {
    v6 = 70 - __clz(v1);
    v7 = (((37 * v6) >> 8) + (((v6 - ((unsigned __int16)(37 * v6) >> 8)) & 0xFE) >> 1)) >> 2;
    goto LABEL_9;
  }
  if (v3 >= v0[2])
  {
    while (1)
    {
      if (v1 < 0)
        goto LABEL_25;
      v7 = 1;
LABEL_9:
      v8 = v3 + v7 - 1;
      if (!__OFADD__(v3, v7 - 1))
        break;
LABEL_20:
      __break(1u);
    }
    if (v0[2] < v8)
    {
      v9 = ProtobufEncoder.growBufferSlow(to:)(v8);
    }
    else
    {
      v0[1] = v8;
      v9 = *v0 + v3;
    }
    if (__OFSUB__(0, v1 + 1))
    {
      __break(1u);
LABEL_25:
      result = _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      return result;
    }
    v10 = (_BYTE *)(v9 - (v1 + 1));
    result = (uint64_t)memmove(&v10[v7], (const void *)(v9 - v1), v1);
    LOBYTE(v11) = v1 & 0x7F;
    if (v1 >= 128)
    {
      do
      {
        v12 = v11 | 0x80;
        v11 = ((unint64_t)v1 >> 7) & 0x7F;
        *v10++ = v12;
        v13 = (unint64_t)v1 >= 0x4000;
        v1 = (unint64_t)v1 >> 7;
      }
      while (v13);
    }
    *v10 = v11;
  }
  else
  {
    *(_BYTE *)(*v0 + v5) = v1;
  }
  return result;
}

uint64_t ProtobufEncoder.messageField(_:_:)(uint64_t a1, uint64_t (*a2)(uint64_t))
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  _QWORD *v7;
  uint64_t result;
  unint64_t v9;
  unint64_t v10;

  v4 = v2;
  ProtobufEncoder.encodeVarint(_:)((8 * a1) | 2);
  v6 = *(_QWORD *)(v2 + 8);
  v7 = *(_QWORD **)(v2 + 24);
  result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
  {
    result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v7[2] + 1, 1, v7);
    v7 = (_QWORD *)result;
  }
  v10 = v7[2];
  v9 = v7[3];
  if (v10 >= v9 >> 1)
  {
    result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v9 > 1), v10 + 1, 1, v7);
    v7 = (_QWORD *)result;
  }
  v7[2] = v10 + 1;
  v7[v10 + 4] = v6;
  *(_QWORD *)(v4 + 24) = v7;
  if (__OFADD__(v6, 1))
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v4 + 8) = v6 + 1;
    result = a2(v4);
    if (!v3)
      return ProtobufEncoder.endLengthDelimited()();
  }
  return result;
}

uint64_t ProtobufEncoder.messageField<A>(_:_:defaultValue:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t result;

  result = dispatch thunk of static Equatable.== infix(_:_:)();
  if ((result & 1) == 0)
  {
    ProtobufEncoder.encodeVarint(_:)((8 * a1) | 2);
    return ProtobufEncoder.encodeMessage<A>(_:)(a2, a4, a6);
  }
  return result;
}

uint64_t ProtobufEncoder.encodeMessage<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  _QWORD *v8;
  uint64_t result;
  unint64_t v10;
  unint64_t v11;

  v7 = *(_QWORD *)(v3 + 8);
  v8 = *(_QWORD **)(v3 + 24);
  result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
  {
    result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v8[2] + 1, 1, v8);
    v8 = (_QWORD *)result;
  }
  v11 = v8[2];
  v10 = v8[3];
  if (v11 >= v10 >> 1)
  {
    result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v10 > 1), v11 + 1, 1, v8);
    v8 = (_QWORD *)result;
  }
  v8[2] = v11 + 1;
  v8[v11 + 4] = v7;
  *(_QWORD *)(v3 + 24) = v8;
  if (__OFADD__(v7, 1))
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v3 + 8) = v7 + 1;
    result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a3 + 8))(v3, a2, a3);
    if (!v4)
      return ProtobufEncoder.endLengthDelimited()();
  }
  return result;
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> ProtobufEncoder.stringField(_:_:defaultValue:)(Swift::UInt _, Swift::String a2, Swift::String_optional defaultValue)
{
  if (!defaultValue.value._object
    || (a2._countAndFlagsBits != defaultValue.value._countAndFlagsBits || a2._object != defaultValue.value._object)
    && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
  {
    ProtobufEncoder.stringFieldAlways(_:_:)(_);
  }
}

uint64_t ProtobufEncoder.stringFieldAlways(_:_:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  unint64_t v6;
  unint64_t v7;
  _QWORD v9[4];

  v9[3] = *MEMORY[0x24BDAC8D0];
  v2 = type metadata accessor for String.Encoding();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  ProtobufEncoder.encodeVarint(_:)((8 * a1) | 2);
  static String.Encoding.utf8.getter();
  String.data(using:allowLossyConversion:)();
  v7 = v6;
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  if (v7 >> 60 != 15)
    __asm { BR              X10 }
  lazy protocol witness table accessor for type ProtobufEncoder.EncodingError and conformance ProtobufEncoder.EncodingError();
  swift_allocError();
  return swift_willThrow();
}

uint64_t ProtobufEncoder.codableField<A>(_:_:defaultValue:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result;

  result = dispatch thunk of static Equatable.== infix(_:_:)();
  if ((result & 1) == 0)
    return ProtobufEncoder.codableField<A>(_:_:)(a1, a2, a4, a5);
  return result;
}

uint64_t ProtobufEncoder.codableField<A>(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t result;

  ProtobufEncoder.encodeVarint(_:)((8 * a1) | 2);
  result = ProtobufEncoder.binaryPlistData<A>(for:)(a2, a3, a4);
  if (!v4)
    __asm { BR              X10 }
  return result;
}

Swift::Void __swiftcall ProtobufEncoder.emptyField(_:)(Swift::UInt a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  unint64_t v4;
  unint64_t v5;

  ProtobufEncoder.encodeVarint(_:)((8 * a1) | 2);
  v2 = *(_QWORD *)(v1 + 8);
  v3 = *(_QWORD **)(v1 + 24);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3[2] + 1, 1, v3);
  v5 = v3[2];
  v4 = v3[3];
  if (v5 >= v4 >> 1)
    v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v4 > 1), v5 + 1, 1, v3);
  v3[2] = v5 + 1;
  v3[v5 + 4] = v2;
  *(_QWORD *)(v1 + 24) = v3;
  if (__OFADD__(v2, 1))
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v1 + 8) = v2 + 1;
    ProtobufEncoder.endLengthDelimited()();
  }
}

void ProtobufEncoder.uint64Field<A>(_:_:defaultValue:)(uint64_t a1, Swift::UInt a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9;

  v9 = (*(uint64_t (**)(uint64_t, uint64_t))(a6 + 16))(a5, a6);
  if ((a4 & 1) != 0 || a2 != a3)
  {
    ProtobufEncoder.encodeVarint(_:)(8 * v9);
    ProtobufEncoder.encodeVarint(_:)(a2);
  }
}

void ProtobufEncoder.int64Field<A>(_:_:defaultValue:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9;

  v9 = (*(uint64_t (**)(uint64_t, uint64_t))(a6 + 16))(a5, a6);
  if ((a4 & 1) != 0 || a2 != a3)
  {
    ProtobufEncoder.encodeVarint(_:)(8 * v9);
    ProtobufEncoder.encodeVarint(_:)((2 * a2) ^ (a2 >> 63));
  }
}

int64_t ProtobufEncoder.fixed32Field<A>(_:_:defaultValue:)(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  int64_t result;
  uint64_t v9;

  result = (*(uint64_t (**)(uint64_t, uint64_t))(a5 + 16))(a4, a5);
  if ((a3 & 0x100000000) != 0 || (_DWORD)a3 != a2)
  {
    ProtobufEncoder.encodeVarint(_:)((8 * result) | 5);
    v9 = v5[1];
    result = v9 + 4;
    if (__OFADD__(v9, 4))
    {
      __break(1u);
    }
    else if (v5[2] >= result)
    {
      v5[1] = result;
      *(_DWORD *)(*v5 + v9) = a2;
      return result;
    }
    result = ProtobufEncoder.growBufferSlow(to:)(result);
    *(_DWORD *)result = a2;
  }
  return result;
}

int64_t ProtobufEncoder.fixed64Field<A>(_:_:defaultValue:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  int64_t result;
  uint64_t v11;

  result = (*(uint64_t (**)(uint64_t, uint64_t))(a6 + 16))(a5, a6);
  if ((a4 & 1) != 0 || a2 != a3)
  {
    ProtobufEncoder.encodeVarint(_:)((8 * result) | 1);
    v11 = v6[1];
    result = v11 + 8;
    if (__OFADD__(v11, 8))
    {
      __break(1u);
    }
    else if (v6[2] >= result)
    {
      v6[1] = result;
      *(_QWORD *)(*v6 + v11) = a2;
      return result;
    }
    result = ProtobufEncoder.growBufferSlow(to:)(result);
    *(_QWORD *)result = a2;
  }
  return result;
}

void ProtobufEncoder.dataField<A>(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;

  v7 = (*(uint64_t (**)(uint64_t, uint64_t))(a5 + 16))(a4, a5);
  ProtobufEncoder.dataField(_:_:)(v7, a2, a3);
}

void ProtobufEncoder.dataField<A>(_:_:)(uint64_t a1, _BYTE *a2, _BYTE *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;

  v7 = (*(uint64_t (**)(uint64_t, uint64_t))(a5 + 16))(a4, a5);
  if (a2)
  {
    if (a3 != a2)
    {
      ProtobufEncoder.encodeVarint(_:)((8 * v7) | 2);
      ProtobufEncoder.encodeData(_:)(a2, a3);
    }
  }
}

uint64_t ProtobufEncoder.packedField<A>(_:_:)(uint64_t a1, void (*a2)(uint64_t), uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t result;
  unint64_t v12;
  unint64_t v13;

  v6 = v5;
  v8 = (*(uint64_t (**)(uint64_t, uint64_t))(a5 + 16))(a4, a5);
  ProtobufEncoder.encodeVarint(_:)((8 * v8) | 2);
  v9 = *(_QWORD *)(v5 + 8);
  v10 = *(_QWORD **)(v5 + 24);
  result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
  {
    result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v10[2] + 1, 1, v10);
    v10 = (_QWORD *)result;
  }
  v13 = v10[2];
  v12 = v10[3];
  if (v13 >= v12 >> 1)
  {
    result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v12 > 1), v13 + 1, 1, v10);
    v10 = (_QWORD *)result;
  }
  v10[2] = v13 + 1;
  v10[v13 + 4] = v9;
  *(_QWORD *)(v6 + 24) = v10;
  if (__OFADD__(v9, 1))
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v6 + 8) = v9 + 1;
    a2(v6);
    return ProtobufEncoder.endLengthDelimited()();
  }
  return result;
}

uint64_t ProtobufEncoder.codableField<A, B>(_:_:defaultValue:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v10;
  uint64_t result;

  v10 = (*(uint64_t (**)(uint64_t, uint64_t))(a6 + 16))(a4, a6);
  result = dispatch thunk of static Equatable.== infix(_:_:)();
  if ((result & 1) == 0)
    return ProtobufEncoder.codableField<A>(_:_:)(v10, a2, a5, a7);
  return result;
}

Swift::Void __swiftcall ProtobufEncoder.encodeBool(_:)(Swift::Bool a1)
{
  _QWORD *v1;
  uint64_t v3;
  int64_t v4;
  _BYTE *v5;

  v3 = v1[1];
  v4 = v3 + 1;
  if (__OFADD__(v3, 1))
  {
    __break(1u);
    goto LABEL_6;
  }
  if (v1[2] < v4)
  {
LABEL_6:
    v5 = (_BYTE *)ProtobufEncoder.growBufferSlow(to:)(v4);
    goto LABEL_4;
  }
  v1[1] = v4;
  v5 = (_BYTE *)(*v1 + v3);
LABEL_4:
  *v5 = a1;
}

uint64_t ProtobufEncoder.growBufferSlow(to:)(int64_t a1)
{
  uint64_t v1;
  int64_t v2;
  size_t v3;
  void *v4;
  uint64_t v5;
  uint64_t result;

  v2 = a1;
  if (a1 <= 128)
    a1 = 128;
  v3 = malloc_good_size(a1);
  v4 = realloc(*(void **)v1, v3);
  if (v4)
  {
    v5 = *(_QWORD *)(v1 + 8);
    *(_QWORD *)v1 = v4;
    *(_QWORD *)(v1 + 8) = v2;
    *(_QWORD *)(v1 + 16) = v3;
    return (uint64_t)v4 + v5;
  }
  else
  {
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

void specialized __DataStorage.withUnsafeBytes<A>(in:apply:)(uint64_t a1, uint64_t a2)
{
  _BYTE *v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  _BYTE *v11;

  v4 = (_BYTE *)__DataStorage._bytes.getter();
  if (v4)
  {
    v5 = __DataStorage._offset.getter();
    if (__OFSUB__(a1, v5))
    {
LABEL_13:
      __break(1u);
      return;
    }
    v4 += a1 - v5;
  }
  v6 = __OFSUB__(a2, a1);
  v7 = a2 - a1;
  if (v6)
  {
    __break(1u);
    goto LABEL_13;
  }
  v8 = __DataStorage._length.getter();
  if (v8 >= v7)
    v9 = v7;
  else
    v9 = v8;
  v10 = &v4[v9];
  if (v4)
    v11 = v10;
  else
    v11 = 0;
  ProtobufEncoder.encodeData(_:)(v4, v11);
}

uint64_t specialized static ProtobufEncoder.encoding(_:)(void (*a1)(void **))
{
  uint64_t v1;
  uint64_t v2;
  void *v4[3];
  uint64_t v5;
  uint64_t v6;

  memset(v4, 0, sizeof(v4));
  v5 = MEMORY[0x24BEE4AF8];
  v6 = MEMORY[0x24BEE4B00];
  a1(v4);
  if (v1)
  {
    free(v4[0]);
    v2 = v5;
  }
  else
  {
    v2 = ProtobufEncoder.takeData()();
    free(v4[0]);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2;
}

uint64_t partial apply for closure #1 in static ProtobufEncoder.encoding<A>(_:)(uint64_t a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(v1 + 24) + 8))(a1, *(_QWORD *)(v1 + 16));
}

unint64_t lazy protocol witness table accessor for type ProtobufEncoder.EncodingError and conformance ProtobufEncoder.EncodingError()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ProtobufEncoder.EncodingError and conformance ProtobufEncoder.EncodingError;
  if (!lazy protocol witness table cache variable for type ProtobufEncoder.EncodingError and conformance ProtobufEncoder.EncodingError)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ProtobufEncoder.EncodingError, &type metadata for ProtobufEncoder.EncodingError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ProtobufEncoder.EncodingError and conformance ProtobufEncoder.EncodingError);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ProtobufEncoder.EncodingError and conformance ProtobufEncoder.EncodingError;
  if (!lazy protocol witness table cache variable for type ProtobufEncoder.EncodingError and conformance ProtobufEncoder.EncodingError)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ProtobufEncoder.EncodingError, &type metadata for ProtobufEncoder.EncodingError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ProtobufEncoder.EncodingError and conformance ProtobufEncoder.EncodingError);
  }
  return result;
}

uint64_t destroy for ProtobufEncoder()
{
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for ProtobufEncoder(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v3 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v3;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for ProtobufEncoder(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for ProtobufEncoder(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for ProtobufEncoder()
{
  return &type metadata for ProtobufEncoder;
}

uint64_t storeEnumTagSinglePayload for ProtobufEncoder.EncodingError(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_234D9C408 + 4 * byte_2352A0210[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_234D9C428 + 4 * byte_2352A0215[v4]))();
}

_BYTE *sub_234D9C408(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_234D9C428(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_234D9C430(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_234D9C438(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_234D9C440(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_234D9C448(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for ProtobufEncoder.EncodingError()
{
  return &type metadata for ProtobufEncoder.EncodingError;
}

uint64_t specialized static ProtobufEncoder.encoding(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;

  v4 = *(_QWORD *)(a1 + OBJC_IVAR____TtC7SwiftUI28RBDisplayListEncoderDelegate_encoder + 32);
  if (a3)
    swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  v5 = RBImageCopyCGImage();
  if (v5)
  {
    v6 = (void *)v5;
    ProtobufEncoder.encodeVarint(_:)(0xAuLL);
    specialized ProtobufEncoder.encodeMessage<A>(_:)((uint64_t)v6);

    swift_unknownObjectRelease();
    if (!v3)
    {
      v4 = ProtobufEncoder.takeData()();
      free(0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v4;
    }
  }
  else
  {
    lazy protocol witness table accessor for type CodableRBImage.Error and conformance CodableRBImage.Error();
    swift_allocError();
    swift_willThrow();
    swift_unknownObjectRelease();
  }
  free(0);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v4;
}

uint64_t specialized static ProtobufEncoder.encoding(_:)(uint64_t a1, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  CGFont *v5;
  uint64_t v6;
  void *v8[3];
  uint64_t v9;
  uint64_t v10;

  v3 = v2;
  memset(v8, 0, sizeof(v8));
  v9 = MEMORY[0x24BEE4AF8];
  v10 = *(_QWORD *)(a1 + OBJC_IVAR____TtC7SwiftUI28RBDisplayListEncoderDelegate_encoder + 32);
  swift_bridgeObjectRetain();
  v5 = a2;
  CodableCGFont.encode(to:)((uint64_t)v8, v5);

  if (v3)
  {
    free(v8[0]);
    v6 = v9;
  }
  else
  {
    v6 = ProtobufEncoder.takeData()();
    free(v8[0]);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v6;
}

uint64_t specialized static ProtobufEncoder.encoding(_:)(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v8;

  v8 = MEMORY[0x24BEE4AF8];
  swift_bridgeObjectRetain();
  ProtobufEncoder.encodeVarint(_:)(0x1AuLL);
  specialized ProtobufEncoder.encodeMessage<A>(_:)(a2, a3);
  if (v3)
  {
    free(0);
    v6 = v8;
  }
  else
  {
    v6 = ProtobufEncoder.takeData()();
    free(0);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v6;
}

unint64_t lazy protocol witness table accessor for type CodableRBImage.Error and conformance CodableRBImage.Error()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CodableRBImage.Error and conformance CodableRBImage.Error;
  if (!lazy protocol witness table cache variable for type CodableRBImage.Error and conformance CodableRBImage.Error)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for CodableRBImage.Error, &type metadata for CodableRBImage.Error);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodableRBImage.Error and conformance CodableRBImage.Error);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CodableRBImage.Error and conformance CodableRBImage.Error;
  if (!lazy protocol witness table cache variable for type CodableRBImage.Error and conformance CodableRBImage.Error)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for CodableRBImage.Error, &type metadata for CodableRBImage.Error);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodableRBImage.Error and conformance CodableRBImage.Error);
  }
  return result;
}

id Text.Effect.Content.fontSize(scale:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, double a5)
{
  id v8;
  uint64_t v9;

  type metadata accessor for AnyDynamicAttributeModifier<TextScaleAttributeModifier>(0, a2, a3, a4);
  *(double *)(swift_allocObject() + 16) = a5;
  v8 = a1;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v9 = swift_retain();
  MEMORY[0x23B7C61A8](v9);
  if (*(_QWORD *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  swift_release();
  return v8;
}

uint64_t type metadata accessor for AnyAttributeModifier()
{
  return objc_opt_self();
}

uint64_t type metadata completion function for AnyDynamicAttributeModifier()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    result = swift_initClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t AnyDynamicAttributeModifier.modify(attributes:)(uint64_t a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(*(_QWORD *)v1 + 104) + 8))(a1, *(_QWORD *)(*(_QWORD *)v1 + 96));
}

uint64_t AnyDynamicAttributeModifier.__ivar_destroyer()
{
  uint64_t v0;

  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v0 + 96) - 8) + 8))(v0 + *(_QWORD *)(*(_QWORD *)v0 + 112));
}

uint64_t AnyDynamicAttributeModifier.__deallocating_deinit()
{
  uint64_t v0;

  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v0 + 96) - 8) + 8))(v0 + *(_QWORD *)(*(_QWORD *)v0 + 112));
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for AnyDynamicAttributeModifier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AnyDynamicAttributeModifier);
}

NSAttributedString_optional __swiftcall Text.Effect.Content.resolveIfModified()()
{
  void *v0;
  _BOOL8 v1;
  unint64_t v2;
  unint64_t v3;
  _BOOL8 v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  id v8;
  uint64_t v9;
  uint64_t p_type;
  uint64_t v11;
  _QWORD *v12;
  void *v13;
  id v14;
  id v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  id v20;
  objc_class *v21;
  uint64_t v22;
  void (*v23)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t aBlock;
  uint64_t v25;
  void *v26;
  void *v27;
  uint64_t (*v28)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v29;
  void *v30;
  NSAttributedString_optional result;

  v3 = v2;
  v4 = v1;
  v5 = v0;
  if ((unint64_t)v1 >> 62)
  {
    swift_bridgeObjectRetain();
    v6 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    v7 = v3 >> 62;
    if (v6)
      goto LABEL_5;
  }
  else
  {
    v6 = *(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10);
    v7 = v2 >> 62;
    if (v6)
      goto LABEL_5;
  }
  if (v7)
  {
    swift_bridgeObjectRetain();
    v8 = (id)_CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v8)
      goto LABEL_17;
  }
  else
  {
    v8 = *(id *)((v3 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v8)
      goto LABEL_17;
  }
LABEL_5:
  objc_msgSend(v5, sel_mutableCopy);
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  type metadata accessor for NSMutableAttributedString();
  swift_dynamicCast();
  v8 = v30;
  if (v7)
  {
    swift_bridgeObjectRetain();
    v9 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    v9 = *(_QWORD *)((v3 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  p_type = (uint64_t)&stru_250685FF0.type;
  v11 = MEMORY[0x24BDAC760];
  if (!v9)
  {
    if (!v6)
      goto LABEL_17;
    v23 = 0;
LABEL_13:
    if (one-time initialization token for kitFont == -1)
      goto LABEL_14;
    goto LABEL_22;
  }
  v23 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))objc_msgSend(v5, sel_length);
  v12 = (_QWORD *)swift_allocObject();
  v12[2] = v5;
  v12[3] = v4;
  v12[4] = v3;
  v12[5] = v8;
  p_type = swift_allocObject();
  *(_QWORD *)(p_type + 16) = partial apply for closure #1 in Text.Effect.Content.resolveIfModified();
  *(_QWORD *)(p_type + 24) = v12;
  v28 = partial apply for thunk for @callee_guaranteed (@guaranteed [NSAttributedStringKey : Any], @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ();
  v29 = p_type;
  aBlock = v11;
  v25 = 1107296256;
  v26 = thunk for @escaping @callee_guaranteed (@guaranteed [NSAttributedStringKey : Any], @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ();
  v27 = &block_descriptor_14;
  v13 = _Block_copy(&aBlock);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v14 = v5;
  v15 = v8;
  swift_retain();
  swift_release();
  objc_msgSend(v14, sel_enumerateAttributesInRange_options_usingBlock_, 0, v23, 0x100000, v13);
  _Block_release(v13);
  LOBYTE(v14) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if ((v14 & 1) == 0)
  {
    if (!v6)
    {
LABEL_16:
      swift_release();
      goto LABEL_17;
    }
    v23 = partial apply for closure #1 in Text.Effect.Content.resolveIfModified();
    p_type = 0x250686000;
    goto LABEL_13;
  }
  __break(1u);
LABEL_22:
  swift_once();
LABEL_14:
  v22 = static NSAttributedStringKey.kitFont;
  v16 = objc_msgSend(v5, *(SEL *)(p_type + 2408));
  v17 = swift_allocObject();
  *(_QWORD *)(v17 + 16) = v5;
  *(_QWORD *)(v17 + 24) = v4;
  *(_QWORD *)(v17 + 32) = v3;
  *(_WORD *)(v17 + 40) = 515;
  *(_QWORD *)(v17 + 48) = &type metadata for DefaultFontDefinition;
  *(_QWORD *)(v17 + 56) = &protocol witness table for DefaultFontDefinition;
  *(_WORD *)(v17 + 64) = 1;
  *(_QWORD *)(v17 + 72) = v8;
  v18 = swift_allocObject();
  *(_QWORD *)(v18 + 16) = partial apply for closure #2 in Text.Effect.Content.resolveIfModified();
  *(_QWORD *)(v18 + 24) = v17;
  v28 = partial apply for thunk for @callee_guaranteed (@guaranteed [NSAttributedStringKey : Any], @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ();
  v29 = v18;
  aBlock = MEMORY[0x24BDAC760];
  v25 = 1107296256;
  v26 = thunk for @escaping @callee_guaranteed (@in_guaranteed Any?, @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ();
  v27 = &block_descriptor_12_2;
  v19 = _Block_copy(&aBlock);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v20 = v5;
  v8 = v8;
  swift_retain();
  swift_release();
  objc_msgSend(v20, sel_enumerateAttribute_inRange_options_usingBlock_, v22, 0, v16, 0, v19);
  _Block_release(v19);
  LOBYTE(v20) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed @escaping @callee_guaranteed (@unowned Bool) -> ()) -> ())?((uint64_t)v23);
  swift_release();
  if ((v20 & 1) != 0)
  {
    __break(1u);
    goto LABEL_16;
  }
LABEL_17:
  v21 = (objc_class *)v8;
  result.is_nil = v1;
  result.value.super.isa = v21;
  return result;
}

unint64_t type metadata accessor for NSMutableAttributedString()
{
  unint64_t result;

  result = lazy cache variable for type metadata for NSMutableAttributedString;
  if (!lazy cache variable for type metadata for NSMutableAttributedString)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for NSMutableAttributedString);
  }
  return result;
}

void closure #1 in Text.Effect.Content.resolveIfModified()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7, void *a8)
{
  uint64_t v12;
  uint64_t i;
  uint64_t v14;
  Class isa;
  uint64_t v16;

  v16 = a1;
  if (!(a7 >> 62))
  {
    v12 = *(_QWORD *)((a7 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v12)
      goto LABEL_3;
LABEL_11:
    swift_bridgeObjectRelease();
LABEL_12:
    type metadata accessor for NSAttributedStringKey(0);
    lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type NSAttributedStringKey and conformance NSAttributedStringKey, (uint64_t (*)(uint64_t))type metadata accessor for NSAttributedStringKey, (uint64_t)&protocol conformance descriptor for NSAttributedStringKey);
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    objc_msgSend(a8, sel_setAttributes_range_, isa, a2, a3);

    return;
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v12 = _CocoaArrayWrapper.endIndex.getter();
  if (!v12)
    goto LABEL_11;
LABEL_3:
  if (v12 >= 1)
  {
    for (i = 0; i != v12; ++i)
    {
      if ((a7 & 0xC000000000000001) != 0)
      {
        v14 = MEMORY[0x23B7C6D9C](i, a7);
      }
      else
      {
        v14 = *(_QWORD *)(a7 + 8 * i + 32);
        swift_retain();
      }
      (*(void (**)(uint64_t *))(*(_QWORD *)v14 + 80))(&v16);
      swift_release();
    }
    swift_bridgeObjectRelease();
    goto LABEL_12;
  }
  __break(1u);
}

uint64_t sub_234D9D014()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

void partial apply for closure #1 in Text.Effect.Content.resolveIfModified()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  closure #1 in Text.Effect.Content.resolveIfModified()(a1, a2, a3, a4, *(_QWORD *)(v4 + 16), *(_QWORD *)(v4 + 24), *(_QWORD *)(v4 + 32), *(void **)(v4 + 40));
}

uint64_t sub_234D9D05C()
{
  return swift_deallocObject();
}

uint64_t block_copy_helper_14(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_14()
{
  return swift_release();
}

void closure #2 in Text.Effect.Content.resolveIfModified()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, __int16 a8, uint64_t a9, uint64_t a10, __int16 a11, void *a12)
{
  const void *v14;
  const __CTFont *v15;
  id v16;
  id v17;
  __int16 v18;
  uint64_t v19;
  uint64_t v20;
  __int16 v21;

  type metadata accessor for CTFontRef(0);
  type metadata accessor for Any?();
  v14 = (const void *)Optional._bridgeToObjectiveC()();
  v15 = (const __CTFont *)static CTFontRef.make(platformFont:)(v14);
  swift_unknownObjectRelease();
  if (v15)
  {
    v18 = a8;
    v19 = a9;
    v20 = a10;
    v21 = a11 & 0x1FF;
    v16 = (id)specialized Text.Effect.Content.resolveFont(_:context:)(v15, (char *)&v18, a6);
    if (one-time initialization token for kitFont != -1)
      swift_once();
    objc_msgSend(a12, sel_addAttribute_value_range_, static NSAttributedStringKey.kitFont, v16);

  }
}

void WeightDeltaModifier.modify(descriptor:in:)(CTFontDescriptorRef *a1, double a2, double a3, double a4)
{
  const __CTFontDescriptor *v8;
  CTFontRef v9;
  double v10;
  double v11;
  double v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t inited;
  uint64_t v20;
  const __CFDictionary *isa;
  CTFontDescriptorRef CopyWithAttributes;

  v8 = *a1;
  v9 = CTFontCreateWithFontDescriptor(*a1, 0.0, 0);
  CTFontGetWeight();
  v11 = (v10 + 1.0) * 500.0 + a2;
  if (v11 < a3)
    v11 = a3;
  if (v11 > a4)
    v11 = a4;
  v12 = (v11 + -500.0) / 500.0;
  v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v15 = v14;
  v16 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v18 = v17;
  type metadata accessor for _ContiguousArrayStorage<CGPoint>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<(String, [String : CGFloat])>, (void (*)(uint64_t))type metadata accessor for (String, [String : CGFloat]));
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_23527E860;
  *(_QWORD *)(inited + 32) = v13;
  *(_QWORD *)(inited + 40) = v15;
  type metadata accessor for _ContiguousArrayStorage<CGPoint>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<(String, CGFloat)>, (void (*)(uint64_t))type metadata accessor for (String, CGFloat));
  v20 = swift_initStackObject();
  *(_OWORD *)(v20 + 16) = xmmword_23527E860;
  *(_QWORD *)(v20 + 32) = v16;
  *(_QWORD *)(v20 + 40) = v18;
  *(double *)(v20 + 48) = v12;
  *(_QWORD *)(inited + 48) = specialized Dictionary.init(dictionaryLiteral:)(v20);
  specialized Dictionary.init(dictionaryLiteral:)(inited);
  type metadata accessor for [String : CGFloat]();
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  CopyWithAttributes = CTFontDescriptorCreateCopyWithAttributes(v8, isa);

  *a1 = CopyWithAttributes;
}

void protocol witness for FontModifier.modify(descriptor:in:) in conformance WeightDeltaModifier(CTFontDescriptorRef *a1)
{
  double *v1;

  WeightDeltaModifier.modify(descriptor:in:)(a1, *v1, v1[1], v1[2]);
}

double protocol witness for FontModifier.modify(traits:) in conformance WeightDeltaModifier(uint64_t a1)
{
  double *v1;
  double v2;
  double result;

  v2 = *v1 + (*(double *)(a1 + 8) + 1.0) * 500.0;
  if (v1[1] > v2)
    v2 = v1[1];
  if (v1[2] < v2)
    v2 = v1[2];
  result = (v2 + -500.0) / 500.0;
  *(double *)(a1 + 8) = result;
  return result;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance WeightDeltaModifier()
{
  double *v0;
  double v1;
  double v2;
  double v3;
  Swift::UInt64 v4;

  v1 = *v0;
  v2 = v0[1];
  v3 = v0[2];
  Hasher.init(_seed:)();
  if ((*(_QWORD *)&v1 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v4 = *(_QWORD *)&v1;
  else
    v4 = 0;
  Hasher._combine(_:)(v4);
  specialized ClosedRange<>.hash(into:)(v2, v3);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance WeightDeltaModifier()
{
  Swift::UInt64 *v0;
  double v1;
  double v2;
  Swift::UInt64 v3;

  v1 = *((double *)v0 + 1);
  v2 = *((double *)v0 + 2);
  if ((*v0 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v3 = *v0;
  else
    v3 = 0;
  Hasher._combine(_:)(v3);
  specialized ClosedRange<>.hash(into:)(v1, v2);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance WeightDeltaModifier()
{
  double *v0;
  double v1;
  double v2;
  double v3;
  Swift::UInt64 v4;

  v1 = *v0;
  v2 = v0[1];
  v3 = v0[2];
  Hasher.init(_seed:)();
  if ((*(_QWORD *)&v1 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v4 = *(_QWORD *)&v1;
  else
    v4 = 0;
  Hasher._combine(_:)(v4);
  specialized ClosedRange<>.hash(into:)(v2, v3);
  return Hasher._finalize()();
}

uint64_t TextScaleAttributeModifier.modify(attributes:)(double a1)
{
  void *v2;
  uint64_t v3;
  id v4;
  __CFString *v5;
  _QWORD v7[3];
  uint64_t v8;

  if (one-time initialization token for _textScale != -1)
    swift_once();
  v2 = (void *)static NSAttributedStringKey._textScale;
  type metadata accessor for CFStringRef(0);
  v8 = v3;
  v7[0] = CFSTR("NSTextScaleSecondary");
  v4 = v2;
  v5 = CFSTR("NSTextScaleSecondary");
  specialized Dictionary.subscript.setter((uint64_t)v7, v4);
  if (one-time initialization token for _textScaleRatio != -1)
    swift_once();
  v8 = MEMORY[0x24BEE50B0];
  *(double *)v7 = a1;
  return specialized Dictionary.subscript.setter((uint64_t)v7, (id)static NSAttributedStringKey._textScaleRatio);
}

uint64_t protocol witness for AttributeModifier.modify(attributes:) in conformance TextScaleAttributeModifier()
{
  double *v0;

  return TextScaleAttributeModifier.modify(attributes:)(*v0);
}

uint64_t sub_234D9D5D0()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

void partial apply for closure #2 in Text.Effect.Content.resolveIfModified()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  __int16 v5;

  if (*(_BYTE *)(v4 + 65))
    v5 = 256;
  else
    v5 = 0;
  closure #2 in Text.Effect.Content.resolveIfModified()(a1, a2, a3, a4, *(_QWORD *)(v4 + 16), *(_QWORD *)(v4 + 24), *(_QWORD *)(v4 + 32), *(_WORD *)(v4 + 40), *(_QWORD *)(v4 + 48), *(_QWORD *)(v4 + 56), v5 | *(unsigned __int8 *)(v4 + 64), *(void **)(v4 + 72));
}

uint64_t sub_234D9D660()
{
  return swift_deallocObject();
}

void specialized ClosedRange<>.hash(into:)(double a1, double a2)
{
  Swift::UInt64 v3;
  Swift::UInt64 v4;

  if ((*(_QWORD *)&a1 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v3 = *(_QWORD *)&a1;
  else
    v3 = 0;
  Hasher._combine(_:)(v3);
  if ((*(_QWORD *)&a2 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v4 = *(_QWORD *)&a2;
  else
    v4 = 0;
  Hasher._combine(_:)(v4);
}

uint64_t specialized Text.Effect.Content.resolveFont(_:context:)(const __CTFont *a1, char *a2, unint64_t a3)
{
  char v5;
  char v6;
  char v7;
  char v8;
  const __CTFontDescriptor *v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  const __CTFont *v14;
  void *v15;
  uint64_t inited;
  void *v17;
  uint64_t v18;
  id v19;
  id v20;
  const __CFDictionary *isa;
  const __CTFontDescriptor *v22;
  CTFontRef CopyWithAttributes;
  __int128 v24;
  _BYTE v25[8];
  __int128 v26;
  char v27;
  char v28;
  const __CTFontDescriptor *v29;

  v5 = *a2;
  v6 = a2[1];
  v24 = *(_OWORD *)(a2 + 8);
  v7 = a2[24];
  v8 = a2[25];
  v9 = CTFontCopyFontDescriptor(a1);
  v29 = v9;
  if (a3 >> 62)
  {
    swift_bridgeObjectRetain();
    result = _CocoaArrayWrapper.endIndex.getter();
    v10 = result;
    if (result)
      goto LABEL_3;
LABEL_11:
    swift_bridgeObjectRelease();
    goto LABEL_12;
  }
  v10 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
  result = swift_bridgeObjectRetain();
  if (!v10)
    goto LABEL_11;
LABEL_3:
  if (v10 < 1)
  {
    __break(1u);
    goto LABEL_15;
  }
  v12 = 0;
  do
  {
    if ((a3 & 0xC000000000000001) != 0)
    {
      v13 = MEMORY[0x23B7C6D9C](v12, a3);
    }
    else
    {
      v13 = *(_QWORD *)(a3 + 8 * v12 + 32);
      swift_retain();
    }
    ++v12;
    v25[0] = v5;
    v25[1] = v6;
    v26 = v24;
    v27 = v7;
    v28 = v8;
    (*(void (**)(const __CTFontDescriptor **, _BYTE *))(*(_QWORD *)v13 + 80))(&v29, v25);
    swift_release();
  }
  while (v10 != v12);
  swift_bridgeObjectRelease();
  v9 = v29;
LABEL_12:
  v14 = CTFontCreateWithFontDescriptor(v9, 0.0, 0);
  result = (uint64_t)CTFontCopyDefaultCascadeListForLanguages(a1, 0);
  if (result)
  {
    v15 = (void *)result;
    type metadata accessor for _ContiguousArrayStorage<CGPoint>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<(CFStringRef, Any)>, (void (*)(uint64_t))type metadata accessor for (CFStringRef, Any));
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_23527E860;
    v17 = (void *)*MEMORY[0x24BDC4C30];
    *(_QWORD *)(inited + 32) = *MEMORY[0x24BDC4C30];
    type metadata accessor for CFArrayRef(0);
    *(_QWORD *)(inited + 64) = v18;
    *(_QWORD *)(inited + 40) = v15;
    v19 = v17;
    v20 = v15;
    specialized Dictionary.init(dictionaryLiteral:)(inited);
    type metadata accessor for CFStringRef(0);
    lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID((unint64_t *)&lazy protocol witness table cache variable for type CFStringRef and conformance CFStringRef, (uint64_t (*)(uint64_t))type metadata accessor for CFStringRef, (uint64_t)&protocol conformance descriptor for CFStringRef);
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    v22 = CTFontDescriptorCreateWithAttributes(isa);

    CopyWithAttributes = CTFontCreateCopyWithAttributes(v14, 0.0, 0, v22);
    return (uint64_t)CopyWithAttributes;
  }
LABEL_15:
  __break(1u);
  return result;
}

void type metadata accessor for AnyDynamicAttributeModifier<TextScaleAttributeModifier>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  uint64_t v5;

  if (!lazy cache variable for type metadata for AnyDynamicAttributeModifier<TextScaleAttributeModifier>)
  {
    v4 = type metadata accessor for AnyDynamicAttributeModifier(0, (uint64_t)&unk_25063CB90, (uint64_t)&protocol witness table for TextScaleAttributeModifier, a4);
    if (!v5)
      atomic_store(v4, (unint64_t *)&lazy cache variable for type metadata for AnyDynamicAttributeModifier<TextScaleAttributeModifier>);
  }
}

void *type metadata accessor for TextScaleAttributeModifier()
{
  return &unk_25063CB90;
}

ValueMetadata *type metadata accessor for WeightDeltaModifier()
{
  return &type metadata for WeightDeltaModifier;
}

uint64_t destroy for Text.Effect.Content(id *a1)
{

  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

_QWORD *initializeBufferWithCopyOfBuffer for Text.Effect.Content(_QWORD *a1, uint64_t a2)
{
  void *v3;
  uint64_t v4;
  id v5;

  v3 = *(void **)a2;
  v4 = *(_QWORD *)(a2 + 8);
  *a1 = *(_QWORD *)a2;
  a1[1] = v4;
  a1[2] = *(_QWORD *)(a2 + 16);
  v5 = v3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for Text.Effect.Content(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;

  v4 = *(void **)a2;
  v5 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = v4;

  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for Text.Effect.Content(uint64_t a1, uint64_t a2)
{

  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for Text.Effect.Content()
{
  return &type metadata for Text.Effect.Content;
}

unint64_t instantiation function for generic protocol witness table for WeightDeltaModifier(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type WeightDeltaModifier and conformance WeightDeltaModifier();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

void type metadata accessor for (String, CGFloat)()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!lazy cache variable for type metadata for (String, CGFloat))
  {
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (String, CGFloat));
  }
}

uint64_t _VariadicView.Tree.init(_:content:)@<X0>(uint64_t a1@<X0>, void (*a2)(uint64_t)@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X8>)
{
  uint64_t v12;
  double v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;

  v12 = *(_QWORD *)(a4 - 8);
  v13 = MEMORY[0x24BDAC7A8](a1);
  v15 = (char *)&v21 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = *(_QWORD *)(v16 - 8);
  v18 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, double))(v17 + 16))(a6, a1, v16, v13);
  a2(v18);
  (*(void (**)(uint64_t, uint64_t))(v17 + 8))(a1, a3);
  v19 = type metadata accessor for _VariadicView.Tree(0, a3, a4, a5);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v12 + 32))(a6 + *(int *)(v19 + 44), v15, a4);
}

uint64_t type metadata accessor for _VariadicView.Tree(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for _VariadicView.Tree);
}

uint64_t protocol witness for static _VariadicView_ViewRoot._makeViewList(root:inputs:body:) in conformance _ZStackLayout@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v6;
  int v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  unint64_t v11;
  int v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v19;
  int v20;
  int v21;
  char v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  int v29;
  uint64_t v30;
  int v31;
  int v32;
  int v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  char v40;
  _QWORD v41[6];

  v6 = *(_QWORD *)a1;
  v7 = *(_DWORD *)(a1 + 8);
  v8 = *(_QWORD *)(a1 + 16);
  v9 = *(_DWORD *)(a1 + 28);
  v20 = *(_DWORD *)(a1 + 32);
  v21 = *(_DWORD *)(a1 + 24);
  v19 = *(_DWORD *)(a1 + 36);
  v10 = *(_QWORD *)(a1 + 40);
  v25 = *(_QWORD *)(a1 + 56);
  v26 = *(_QWORD *)(a1 + 48);
  v24 = *(_DWORD *)(a1 + 64);
  v23 = *(_QWORD *)(a1 + 72);
  v22 = *(_BYTE *)(a1 + 80);
  v11 = AGCreateWeakAttribute();
  v12 = v11;
  v13 = HIDWORD(v11);
  v14 = swift_allocObject();
  *(_DWORD *)(v14 + 16) = v12;
  *(_DWORD *)(v14 + 20) = v13;
  *(_QWORD *)(v14 + 24) = v4;
  *(_QWORD *)(v14 + 32) = a2;
  *(_QWORD *)(v14 + 40) = a3;
  type metadata accessor for UnaryElements<BodyUnaryViewGenerator<_ZStackLayout>>(0, &lazy cache variable for type metadata for UnaryElements<BodyUnaryViewGenerator<_ZStackLayout>>, &lazy cache variable for type metadata for BodyUnaryViewGenerator<_ZStackLayout>, (uint64_t)&type metadata for _ZStackLayout);
  v41[3] = v15;
  v41[4] = &protocol witness table for UnaryElements<A>;
  v16 = swift_allocObject();
  v41[0] = v16;
  *(_QWORD *)(v16 + 16) = partial apply for specialized closure #1 in static _VariadicView_UnaryViewRoot._makeViewList(root:inputs:body:);
  *(_QWORD *)(v16 + 24) = v14;
  *(_QWORD *)(v16 + 32) = v6;
  *(_DWORD *)(v16 + 40) = v7;
  *(_QWORD *)(v16 + 48) = v8;
  *(_DWORD *)(v16 + 56) = v21;
  *(_DWORD *)(v16 + 60) = v9;
  *(_DWORD *)(v16 + 64) = v20;
  *(_DWORD *)(v16 + 68) = v19;
  *(_QWORD *)(v16 + 72) = v10;
  v28 = v6;
  v29 = v7;
  v30 = v8;
  v31 = v21;
  v32 = v9;
  v33 = v20;
  v34 = v19;
  v35 = v10;
  v36 = v26;
  v37 = v25;
  v38 = v24;
  v39 = v23;
  v40 = v22;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  static _ViewListOutputs.staticList(_:inputs:staticCount:)((uint64_t)v41, &v28, 1, a4);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v41);
  return swift_release();
}

uint64_t static _VariadicView_UnaryViewRoot._makeViewList(root:inputs:body:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X8>)
{
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  char v14;
  unint64_t v15;
  int v16;
  uint64_t v17;
  __int128 v19;
  unint64_t v20;
  uint64_t v24;
  uint64_t v26;
  int v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  char v34;

  v8 = *(_QWORD *)a1;
  v9 = *(_DWORD *)(a1 + 8);
  v10 = *(_QWORD *)(a1 + 16);
  v19 = *(_OWORD *)(a1 + 40);
  v11 = *(_QWORD *)(a1 + 56);
  v12 = *(_DWORD *)(a1 + 64);
  v13 = *(_QWORD *)(a1 + 72);
  v14 = *(_BYTE *)(a1 + 80);
  v15 = AGCreateWeakAttribute();
  v16 = v15;
  v20 = HIDWORD(v15);
  v26 = v8;
  v27 = v9;
  v28 = v10;
  v29 = *(_OWORD *)(a1 + 24);
  v30 = v19;
  v31 = v11;
  v32 = v12;
  v33 = v13;
  v34 = v14;
  v17 = swift_allocObject();
  *(_QWORD *)(v17 + 16) = a4;
  *(_QWORD *)(v17 + 24) = a5;
  *(_DWORD *)(v17 + 32) = v16;
  *(_DWORD *)(v17 + 36) = v20;
  *(_QWORD *)(v17 + 40) = v24;
  *(_QWORD *)(v17 + 48) = a2;
  *(_QWORD *)(v17 + 56) = a3;
  swift_retain();
  static _ViewListOutputs.unaryViewList<A>(viewType:inputs:body:)(&v26, (uint64_t)partial apply for closure #1 in static _VariadicView_UnaryViewRoot._makeViewList(root:inputs:body:), v17, a4, a6);
  return swift_release();
}

uint64_t static _VariadicView_UnaryViewRoot._viewListCount(inputs:body:)()
{
  return 1;
}

void protocol witness for _VariadicView_ViewRoot.body(children:) in conformance _ZStackLayout(uint64_t a1)
{
  specialized _VariadicView_ViewRoot<>.body(children:)(a1, 0x4C6B636174535A5FLL);
}

void _VariadicView_ViewRoot<>.body(children:)()
{
  specialized _VariadicView_ViewRoot<>.body(children:)();
}

uint64_t static _VariadicView_Root._viewListOptions.getter()
{
  return 0;
}

uint64_t protocol witness for static _VariadicView_AnyImplicitRoot.visitType<A>(visitor:) in conformance _ZStackLayout(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return static _VariadicView_ImplicitRoot.visitType<A>(visitor:)(a1, a4, a2, (uint64_t)&protocol witness table for _ZStackLayout, a3);
}

uint64_t static _VariadicView_ImplicitRoot.visitType<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a5 + 8))(a2, a2, a4, a3);
}

uint64_t specialized static View.makeViewList(view:inputs:)@<X0>(int a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  __int128 v6;
  unsigned __int8 v7;
  unsigned int v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  int v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v24;
  uint64_t v25;
  int v26;
  char v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  int v32;
  int ShouldRecordTree;
  char v34;
  char v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  int v40;
  int v41;
  int v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  char v49;
  _QWORD v50[5];
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  char v56;
  uint64_t v57;

  v57 = *MEMORY[0x24BDAC8D0];
  static DynamicPropertyCache.fields(of:)(v3, (uint64_t)&v51);
  v6 = v51;
  v7 = v52;
  v8 = DWORD1(v52);
  v9 = *(_OWORD *)(a2 + 48);
  v53 = *(_OWORD *)(a2 + 32);
  v54 = v9;
  v55 = *(_OWORD *)(a2 + 64);
  v56 = *(_BYTE *)(a2 + 80);
  v10 = *(_OWORD *)(a2 + 16);
  v51 = *(_OWORD *)a2;
  v52 = v10;
  outlined retain of _ViewListInputs(a2);
  v36 = v7;
  LOBYTE(v37) = v7;
  v26 = a1;
  specialized static View.makeBody(view:inputs:fields:)(v50, (uint64_t)&v37, a1, (uint64_t)&v51, v6, *((uint64_t *)&v6 + 1), v7 | ((unint64_t)v8 << 32));
  v24 = v38;
  v25 = v37;
  v34 = v39;
  v11 = v51;
  v12 = v52;
  v13 = HIDWORD(v52);
  v31 = DWORD2(v52);
  v32 = DWORD2(v51);
  v14 = v53;
  v15 = DWORD1(v53);
  v16 = *((_QWORD *)&v53 + 1);
  v29 = *((_QWORD *)&v54 + 1);
  v30 = v54;
  v17 = *((_QWORD *)&v55 + 1);
  v27 = v56;
  v28 = v55;
  ShouldRecordTree = AGSubgraphShouldRecordTree();
  if (ShouldRecordTree)
  {
    type metadata accessor for _ShapeView<Rectangle.AsymmetricalInset, ForegroundStyle>();
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    AGSubgraphBeginTreeElement();
  }
  else
  {
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
  }
  v18 = AGCreateWeakAttribute();
  v19 = v18;
  v20 = HIDWORD(v18);
  type metadata accessor for InterpolatedDisplayList<ResolvedStyledText>(0, &lazy cache variable for type metadata for UnaryElements<TypedUnaryViewGenerator<_ShapeView<Rectangle.AsymmetricalInset, ForegroundStyle>>>, (uint64_t (*)(uint64_t))type metadata accessor for TypedUnaryViewGenerator<_ShapeView<Rectangle.AsymmetricalInset, ForegroundStyle>>, (uint64_t)&protocol witness table for TypedUnaryViewGenerator<A>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UnaryElements);
  v50[3] = v21;
  v50[4] = &protocol witness table for UnaryElements<A>;
  v22 = swift_allocObject();
  v50[0] = v22;
  *(_DWORD *)(v22 + 16) = v19;
  *(_DWORD *)(v22 + 20) = v20;
  *(_QWORD *)(v22 + 24) = v11;
  *(_DWORD *)(v22 + 32) = v32;
  *(_QWORD *)(v22 + 40) = v12;
  *(_DWORD *)(v22 + 48) = v31;
  *(_DWORD *)(v22 + 52) = v13;
  *(_DWORD *)(v22 + 56) = v14;
  *(_DWORD *)(v22 + 60) = v15;
  *(_QWORD *)(v22 + 64) = v16;
  v37 = v11;
  LODWORD(v38) = v32;
  v39 = v12;
  v40 = v31;
  v41 = v13;
  v42 = v14;
  v43 = v15;
  v44 = v16;
  v45 = v30;
  v46 = v29;
  v47 = v28;
  v48 = v17;
  v49 = v27;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  static _ViewListOutputs.staticList(_:inputs:staticCount:)((uint64_t)v50, &v37, 1, a3);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v50);
  if (ShouldRecordTree)
    AGSubgraphEndTreeElement();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  if ((v34 & 1) == 0)
  {
    LOBYTE(v37) = v36;
    specialized _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)(v26, v6, *((uint64_t *)&v6 + 1), v36, v25, v24, (uint64_t)&type metadata for Rectangle.AsymmetricalInset, (void (*)(_QWORD))type metadata accessor for Rectangle.AsymmetricalInset.Type);
  }
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  return outlined consume of DynamicPropertyCache.Fields.Layout();
}

{
  uint64_t v3;
  __int128 v6;
  unsigned __int8 v7;
  unsigned int v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  int v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v24;
  uint64_t v25;
  int v26;
  char v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  int v32;
  int ShouldRecordTree;
  char v34;
  char v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  int v40;
  int v41;
  int v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  char v49;
  _QWORD v50[5];
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  char v56;
  uint64_t v57;

  v57 = *MEMORY[0x24BDAC8D0];
  static DynamicPropertyCache.fields(of:)(v3, (uint64_t)&v51);
  v6 = v51;
  v7 = v52;
  v8 = DWORD1(v52);
  v9 = *(_OWORD *)(a2 + 48);
  v53 = *(_OWORD *)(a2 + 32);
  v54 = v9;
  v55 = *(_OWORD *)(a2 + 64);
  v56 = *(_BYTE *)(a2 + 80);
  v10 = *(_OWORD *)(a2 + 16);
  v51 = *(_OWORD *)a2;
  v52 = v10;
  outlined retain of _ViewListInputs(a2);
  v36 = v7;
  LOBYTE(v37) = v7;
  v26 = a1;
  specialized static View.makeBody(view:inputs:fields:)(v50, (uint64_t)&v37, a1, (uint64_t)&v51, v6, *((uint64_t *)&v6 + 1), v7 | ((unint64_t)v8 << 32));
  v24 = v38;
  v25 = v37;
  v34 = v39;
  v11 = v51;
  v12 = v52;
  v13 = HIDWORD(v52);
  v31 = DWORD2(v52);
  v32 = DWORD2(v51);
  v14 = v53;
  v15 = DWORD1(v53);
  v16 = *((_QWORD *)&v53 + 1);
  v29 = *((_QWORD *)&v54 + 1);
  v30 = v54;
  v17 = *((_QWORD *)&v55 + 1);
  v27 = v56;
  v28 = v55;
  ShouldRecordTree = AGSubgraphShouldRecordTree();
  if (ShouldRecordTree)
  {
    type metadata accessor for _ShapeView<CombinedContentShape, ForegroundStyle>();
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    AGSubgraphBeginTreeElement();
  }
  else
  {
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
  }
  v18 = AGCreateWeakAttribute();
  v19 = v18;
  v20 = HIDWORD(v18);
  type metadata accessor for InterpolatedDisplayList<ResolvedStyledText>(0, &lazy cache variable for type metadata for UnaryElements<TypedUnaryViewGenerator<_ShapeView<CombinedContentShape, ForegroundStyle>>>, (uint64_t (*)(uint64_t))type metadata accessor for TypedUnaryViewGenerator<_ShapeView<CombinedContentShape, ForegroundStyle>>, (uint64_t)&protocol witness table for TypedUnaryViewGenerator<A>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UnaryElements);
  v50[3] = v21;
  v50[4] = &protocol witness table for UnaryElements<A>;
  v22 = swift_allocObject();
  v50[0] = v22;
  *(_DWORD *)(v22 + 16) = v19;
  *(_DWORD *)(v22 + 20) = v20;
  *(_QWORD *)(v22 + 24) = v11;
  *(_DWORD *)(v22 + 32) = v32;
  *(_QWORD *)(v22 + 40) = v12;
  *(_DWORD *)(v22 + 48) = v31;
  *(_DWORD *)(v22 + 52) = v13;
  *(_DWORD *)(v22 + 56) = v14;
  *(_DWORD *)(v22 + 60) = v15;
  *(_QWORD *)(v22 + 64) = v16;
  v37 = v11;
  LODWORD(v38) = v32;
  v39 = v12;
  v40 = v31;
  v41 = v13;
  v42 = v14;
  v43 = v15;
  v44 = v16;
  v45 = v30;
  v46 = v29;
  v47 = v28;
  v48 = v17;
  v49 = v27;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  static _ViewListOutputs.staticList(_:inputs:staticCount:)((uint64_t)v50, &v37, 1, a3);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v50);
  if (ShouldRecordTree)
    AGSubgraphEndTreeElement();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  if ((v34 & 1) == 0)
  {
    LOBYTE(v37) = v36;
    specialized _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)(v26, v6, *((uint64_t *)&v6 + 1), v36, v25, v24, (uint64_t)&type metadata for CombinedContentShape, (void (*)(_QWORD))type metadata accessor for CombinedContentShape.Type);
  }
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  return outlined consume of DynamicPropertyCache.Fields.Layout();
}

{
  __int128 v6;
  unsigned __int8 v7;
  unsigned int v8;
  __int128 v9;
  __int128 v10;
  unint64_t v11;
  char v12;
  uint64_t v14;
  int v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  char v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  char v27;
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  static DynamicPropertyCache.fields(of:)((uint64_t)&type metadata for SummarySymbol, (uint64_t)&v22);
  v6 = v22;
  v7 = v23;
  v8 = DWORD1(v23);
  v9 = *(_OWORD *)(a2 + 48);
  v18 = *(_OWORD *)(a2 + 32);
  v19 = v9;
  v20 = *(_OWORD *)(a2 + 64);
  v21 = *(_BYTE *)(a2 + 80);
  v10 = *(_OWORD *)(a2 + 16);
  v16 = *(_OWORD *)a2;
  v17 = v10;
  outlined retain of _ViewListInputs(a2);
  LOBYTE(v22) = v7;
  specialized static View.makeBody(view:inputs:fields:)(&v15, (uint64_t)&v22, a1, (uint64_t)&v16, v6, *((uint64_t *)&v6 + 1), v7 | ((unint64_t)v8 << 32));
  v11 = *((_QWORD *)&v22 + 1);
  v14 = v22;
  v12 = v23;
  v24 = v18;
  v25 = v19;
  v26 = v20;
  v27 = v21;
  v22 = v16;
  v23 = v17;
  if (AGSubgraphShouldRecordTree())
  {
    type metadata accessor for ModifiedContent<Image, _ForegroundStyleModifier2<AngularGradient, Color>>(0);
    outlined retain of _ViewListInputs((uint64_t)&v22);
    AGSubgraphBeginTreeElement();
    specialized static ModifiedContent<>._makeViewList(view:inputs:)((uint64_t)&v22, a3);
    AGSubgraphEndTreeElement();
  }
  else
  {
    outlined retain of _ViewListInputs((uint64_t)&v22);
    specialized static ModifiedContent<>._makeViewList(view:inputs:)((uint64_t)&v22, a3);
  }
  outlined release of _ViewListInputs((uint64_t)&v22);
  if ((v12 & 1) == 0)
  {
    LOBYTE(v15) = v7;
    specialized _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)(a1, v6, *((uint64_t *)&v6 + 1), v7, v14, v11, (uint64_t)&type metadata for SummarySymbol, (void (*)(_QWORD))type metadata accessor for SummarySymbol.Type);
  }
  outlined release of _ViewListInputs((uint64_t)&v22);
  return outlined consume of DynamicPropertyCache.Fields.Layout();
}

{
  uint64_t v3;
  __int128 v6;
  unsigned __int8 v7;
  unsigned int v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  int v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  int v26;
  char v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  int v32;
  int ShouldRecordTree;
  char v34;
  char v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  int v41;
  int v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  char v49;
  _QWORD v50[5];
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  char v56;

  static DynamicPropertyCache.fields(of:)(v3, (uint64_t)&v51);
  v6 = v51;
  v7 = v52;
  v8 = DWORD1(v52);
  v9 = *(_OWORD *)(a2 + 48);
  v53 = *(_OWORD *)(a2 + 32);
  v54 = v9;
  v55 = *(_OWORD *)(a2 + 64);
  v56 = *(_BYTE *)(a2 + 80);
  v10 = *(_OWORD *)(a2 + 16);
  v51 = *(_OWORD *)a2;
  v52 = v10;
  outlined retain of _ViewListInputs(a2);
  v36 = v7;
  LOBYTE(v37) = v7;
  v26 = a1;
  specialized static View.makeBody(view:inputs:fields:)(v50, (uint64_t)&v37, a1, (uint64_t)&v51, v6, *((uint64_t *)&v6 + 1), v7 | ((unint64_t)v8 << 32));
  v24 = v38;
  v25 = v37;
  v34 = v39;
  type metadata accessor for _ShapeView<Rectangle, ForegroundStyle>();
  v11 = v51;
  v12 = v52;
  v13 = HIDWORD(v52);
  v31 = DWORD2(v52);
  v32 = DWORD2(v51);
  v14 = v53;
  v15 = DWORD1(v53);
  v16 = *((_QWORD *)&v53 + 1);
  v29 = *((_QWORD *)&v54 + 1);
  v30 = v54;
  v17 = *((_QWORD *)&v55 + 1);
  v27 = v56;
  v28 = v55;
  ShouldRecordTree = AGSubgraphShouldRecordTree();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  if (ShouldRecordTree)
    AGSubgraphBeginTreeElement();
  v18 = AGCreateWeakAttribute();
  v19 = v18;
  v20 = HIDWORD(v18);
  type metadata accessor for InterpolatedDisplayList<ResolvedStyledText>(0, &lazy cache variable for type metadata for UnaryElements<TypedUnaryViewGenerator<_ShapeView<Rectangle, ForegroundStyle>>>, (uint64_t (*)(uint64_t))type metadata accessor for TypedUnaryViewGenerator<_ShapeView<Rectangle, ForegroundStyle>>, (uint64_t)&protocol witness table for TypedUnaryViewGenerator<A>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UnaryElements);
  v50[3] = v21;
  v50[4] = &protocol witness table for UnaryElements<A>;
  v22 = swift_allocObject();
  v50[0] = v22;
  *(_DWORD *)(v22 + 16) = v19;
  *(_DWORD *)(v22 + 20) = v20;
  *(_QWORD *)(v22 + 24) = v11;
  *(_DWORD *)(v22 + 32) = v32;
  *(_QWORD *)(v22 + 40) = v12;
  *(_DWORD *)(v22 + 48) = v31;
  *(_DWORD *)(v22 + 52) = v13;
  *(_DWORD *)(v22 + 56) = v14;
  *(_DWORD *)(v22 + 60) = v15;
  *(_QWORD *)(v22 + 64) = v16;
  v37 = v11;
  LODWORD(v38) = v32;
  v39 = v12;
  v40 = v31;
  v41 = v13;
  v42 = v14;
  v43 = v15;
  v44 = v16;
  v45 = v30;
  v46 = v29;
  v47 = v28;
  v48 = v17;
  v49 = v27;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  static _ViewListOutputs.staticList(_:inputs:staticCount:)((uint64_t)v50, &v37, 1, a3);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v50);
  if (ShouldRecordTree)
    AGSubgraphEndTreeElement();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  if ((v34 & 1) == 0)
  {
    LOBYTE(v37) = v36;
    specialized _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)(v26, v6, *((uint64_t *)&v6 + 1), v36, v25, v24, (unint64_t)&type metadata for Rectangle, (uint64_t)type metadata accessor for Rectangle.Type);
  }
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  return outlined consume of DynamicPropertyCache.Fields.Layout();
}

{
  uint64_t v3;
  __int128 v6;
  unsigned __int8 v7;
  unsigned int v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  int v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  int v26;
  char v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  int v32;
  int ShouldRecordTree;
  char v34;
  char v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  int v41;
  int v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  char v49;
  _QWORD v50[5];
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  char v56;

  static DynamicPropertyCache.fields(of:)(v3, (uint64_t)&v51);
  v6 = v51;
  v7 = v52;
  v8 = DWORD1(v52);
  v9 = *(_OWORD *)(a2 + 48);
  v53 = *(_OWORD *)(a2 + 32);
  v54 = v9;
  v55 = *(_OWORD *)(a2 + 64);
  v56 = *(_BYTE *)(a2 + 80);
  v10 = *(_OWORD *)(a2 + 16);
  v51 = *(_OWORD *)a2;
  v52 = v10;
  outlined retain of _ViewListInputs(a2);
  v36 = v7;
  LOBYTE(v37) = v7;
  v26 = a1;
  specialized static View.makeBody(view:inputs:fields:)(v50, (uint64_t)&v37, a1, (uint64_t)&v51, v6, *((uint64_t *)&v6 + 1), v7 | ((unint64_t)v8 << 32));
  v24 = v38;
  v25 = v37;
  v34 = v39;
  type metadata accessor for _ShapeView<Rectangle._Inset, ForegroundStyle>();
  v11 = v51;
  v12 = v52;
  v13 = HIDWORD(v52);
  v31 = DWORD2(v52);
  v32 = DWORD2(v51);
  v14 = v53;
  v15 = DWORD1(v53);
  v16 = *((_QWORD *)&v53 + 1);
  v29 = *((_QWORD *)&v54 + 1);
  v30 = v54;
  v17 = *((_QWORD *)&v55 + 1);
  v27 = v56;
  v28 = v55;
  ShouldRecordTree = AGSubgraphShouldRecordTree();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  if (ShouldRecordTree)
    AGSubgraphBeginTreeElement();
  v18 = AGCreateWeakAttribute();
  v19 = v18;
  v20 = HIDWORD(v18);
  type metadata accessor for InterpolatedDisplayList<ResolvedStyledText>(0, &lazy cache variable for type metadata for UnaryElements<TypedUnaryViewGenerator<_ShapeView<Rectangle._Inset, ForegroundStyle>>>, (uint64_t (*)(uint64_t))type metadata accessor for TypedUnaryViewGenerator<_ShapeView<Rectangle._Inset, ForegroundStyle>>, (uint64_t)&protocol witness table for TypedUnaryViewGenerator<A>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UnaryElements);
  v50[3] = v21;
  v50[4] = &protocol witness table for UnaryElements<A>;
  v22 = swift_allocObject();
  v50[0] = v22;
  *(_DWORD *)(v22 + 16) = v19;
  *(_DWORD *)(v22 + 20) = v20;
  *(_QWORD *)(v22 + 24) = v11;
  *(_DWORD *)(v22 + 32) = v32;
  *(_QWORD *)(v22 + 40) = v12;
  *(_DWORD *)(v22 + 48) = v31;
  *(_DWORD *)(v22 + 52) = v13;
  *(_DWORD *)(v22 + 56) = v14;
  *(_DWORD *)(v22 + 60) = v15;
  *(_QWORD *)(v22 + 64) = v16;
  v37 = v11;
  LODWORD(v38) = v32;
  v39 = v12;
  v40 = v31;
  v41 = v13;
  v42 = v14;
  v43 = v15;
  v44 = v16;
  v45 = v30;
  v46 = v29;
  v47 = v28;
  v48 = v17;
  v49 = v27;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  static _ViewListOutputs.staticList(_:inputs:staticCount:)((uint64_t)v50, &v37, 1, a3);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v50);
  if (ShouldRecordTree)
    AGSubgraphEndTreeElement();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  if ((v34 & 1) == 0)
  {
    LOBYTE(v37) = v36;
    specialized _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)(v26, v6, *((uint64_t *)&v6 + 1), v36, v25, v24, (unint64_t)&type metadata for Rectangle._Inset, (uint64_t)type metadata accessor for Rectangle._Inset.Type);
  }
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  return outlined consume of DynamicPropertyCache.Fields.Layout();
}

{
  uint64_t v3;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 v11;
  unsigned int v12;
  int v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  int v18;
  uint64_t v19;
  int ShouldRecordTree;
  uint64_t v21;
  id v22;
  void *v23;
  uint64_t v24;
  int v25;
  uint64_t v27;
  uint64_t v28;
  int v29;
  char v30;
  int v31;
  char v32;
  uint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  unsigned int v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  int v44;
  uint64_t v45;
  char v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  char v55;
  uint64_t v56;

  v56 = *MEMORY[0x24BDAC8D0];
  static DynamicPropertyCache.fields(of:)(v3, (uint64_t)&v37);
  v6 = *(_OWORD *)(a2 + 32);
  v7 = *(_OWORD *)(a2 + 64);
  v53 = *(_OWORD *)(a2 + 48);
  v54 = v7;
  v8 = *(_OWORD *)(a2 + 16);
  v50 = *(_OWORD *)a2;
  v10 = v37;
  v9 = v38;
  v11 = v39;
  v12 = v40;
  v55 = *(_BYTE *)(a2 + 80);
  v51 = v8;
  v52 = v6;
  outlined retain of _ViewListInputs(a2);
  LOBYTE(v37) = v11;
  v29 = a1;
  v34 = v10;
  v35 = v9;
  specialized static View.makeBody(view:inputs:fields:)(&v36, (uint64_t)&v37, a1, (uint64_t)&v50, v10, v9, v11 | ((unint64_t)v12 << 32));
  v13 = v36;
  v27 = v38;
  v28 = v37;
  v32 = v39;
  v14 = v50;
  v15 = v51;
  v16 = v52;
  v17 = v53;
  v18 = DWORD2(v50);
  v19 = *((_QWORD *)&v54 + 1);
  v30 = v55;
  v31 = v54;
  ShouldRecordTree = AGSubgraphShouldRecordTree();
  swift_bridgeObjectRetain();
  v21 = v14;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  if (ShouldRecordTree)
    AGSubgraphBeginTreeElement();
  v22 = (id)AGSubgraphGetCurrent();
  if (!v22)
    __break(1u);
  v23 = v22;
  type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for MutableBox<[Unmanaged<DynamicViewList<AnyView>.Item>]>, (uint64_t (*)(uint64_t))type metadata accessor for [Unmanaged<DynamicViewList<AnyView>.Item>], (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for MutableBox);
  v24 = swift_allocObject();
  *(_QWORD *)(v24 + 16) = MEMORY[0x24BEE4AF8];
  LODWORD(v37) = v13;
  v38 = v21;
  v39 = v18;
  v41 = v15;
  v42 = v16;
  v43 = v17;
  v44 = v31;
  v45 = v19;
  v46 = v30;
  v47 = v23;
  v48 = v24;
  v49 = 0;
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  type metadata accessor for ScrollStateRequest(0, (unint64_t *)&lazy cache variable for type metadata for ViewList);
  type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for DynamicViewList<AnyView>, (uint64_t (*)(void))lazy protocol witness table accessor for type AnyView and conformance AnyView, (uint64_t)&type metadata for AnyView, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for DynamicViewList);
  lazy protocol witness table accessor for type DynamicViewList<AnyView> and conformance DynamicViewList<A>();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v25 = Attribute.init<A>(body:value:flags:update:)();
  swift_release();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  *(_DWORD *)a3 = v25;
  *(_QWORD *)(a3 + 8) = 0;
  *(_BYTE *)(a3 + 40) = 1;
  *(_QWORD *)(a3 + 48) = v17;
  *(_QWORD *)(a3 + 56) = 0;
  *(_BYTE *)(a3 + 64) = 1;
  if (ShouldRecordTree)
    AGSubgraphEndTreeElement();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  if ((v32 & 1) == 0)
  {
    LOBYTE(v37) = v11;
    specialized _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)(v29, v34, v35, v11, v28, v27, (unint64_t)&type metadata for _TestApp.RootView, (uint64_t)type metadata accessor for _TestApp.RootView.Type);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return outlined consume of DynamicPropertyCache.Fields.Layout();
}

{
  uint64_t v3;
  __int128 v6;
  unsigned __int8 v7;
  unsigned int v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  int v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  int v26;
  char v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  int v32;
  int ShouldRecordTree;
  char v34;
  char v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  int v41;
  int v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  char v49;
  _QWORD v50[5];
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  char v56;

  static DynamicPropertyCache.fields(of:)(v3, (uint64_t)&v51);
  v6 = v51;
  v7 = v52;
  v8 = DWORD1(v52);
  v9 = *(_OWORD *)(a2 + 48);
  v53 = *(_OWORD *)(a2 + 32);
  v54 = v9;
  v55 = *(_OWORD *)(a2 + 64);
  v56 = *(_BYTE *)(a2 + 80);
  v10 = *(_OWORD *)(a2 + 16);
  v51 = *(_OWORD *)a2;
  v52 = v10;
  outlined retain of _ViewListInputs(a2);
  v36 = v7;
  LOBYTE(v37) = v7;
  v26 = a1;
  specialized static View.makeBody(view:inputs:fields:)(v50, (uint64_t)&v37, a1, (uint64_t)&v51, v6, *((uint64_t *)&v6 + 1), v7 | ((unint64_t)v8 << 32));
  v24 = v38;
  v25 = v37;
  v34 = v39;
  type metadata accessor for _ShapeView<AnyShape, ForegroundStyle>();
  v11 = v51;
  v12 = v52;
  v13 = HIDWORD(v52);
  v31 = DWORD2(v52);
  v32 = DWORD2(v51);
  v14 = v53;
  v15 = DWORD1(v53);
  v16 = *((_QWORD *)&v53 + 1);
  v29 = *((_QWORD *)&v54 + 1);
  v30 = v54;
  v17 = *((_QWORD *)&v55 + 1);
  v27 = v56;
  v28 = v55;
  ShouldRecordTree = AGSubgraphShouldRecordTree();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  if (ShouldRecordTree)
    AGSubgraphBeginTreeElement();
  v18 = AGCreateWeakAttribute();
  v19 = v18;
  v20 = HIDWORD(v18);
  type metadata accessor for InterpolatedDisplayList<ResolvedStyledText>(0, &lazy cache variable for type metadata for UnaryElements<TypedUnaryViewGenerator<_ShapeView<AnyShape, ForegroundStyle>>>, (uint64_t (*)(uint64_t))type metadata accessor for TypedUnaryViewGenerator<_ShapeView<AnyShape, ForegroundStyle>>, (uint64_t)&protocol witness table for TypedUnaryViewGenerator<A>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UnaryElements);
  v50[3] = v21;
  v50[4] = &protocol witness table for UnaryElements<A>;
  v22 = swift_allocObject();
  v50[0] = v22;
  *(_DWORD *)(v22 + 16) = v19;
  *(_DWORD *)(v22 + 20) = v20;
  *(_QWORD *)(v22 + 24) = v11;
  *(_DWORD *)(v22 + 32) = v32;
  *(_QWORD *)(v22 + 40) = v12;
  *(_DWORD *)(v22 + 48) = v31;
  *(_DWORD *)(v22 + 52) = v13;
  *(_DWORD *)(v22 + 56) = v14;
  *(_DWORD *)(v22 + 60) = v15;
  *(_QWORD *)(v22 + 64) = v16;
  v37 = v11;
  LODWORD(v38) = v32;
  v39 = v12;
  v40 = v31;
  v41 = v13;
  v42 = v14;
  v43 = v15;
  v44 = v16;
  v45 = v30;
  v46 = v29;
  v47 = v28;
  v48 = v17;
  v49 = v27;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  static _ViewListOutputs.staticList(_:inputs:staticCount:)((uint64_t)v50, &v37, 1, a3);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v50);
  if (ShouldRecordTree)
    AGSubgraphEndTreeElement();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  if ((v34 & 1) == 0)
  {
    LOBYTE(v37) = v36;
    specialized _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)(v26, v6, *((uint64_t *)&v6 + 1), v36, v25, v24, (unint64_t)&type metadata for AnyShape, (uint64_t)type metadata accessor for AnyShape.Type);
  }
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  return outlined consume of DynamicPropertyCache.Fields.Layout();
}

{
  uint64_t v3;
  __int128 v6;
  unsigned __int8 v7;
  unsigned int v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  int v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  int v26;
  char v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  int v32;
  int ShouldRecordTree;
  char v34;
  char v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  int v41;
  int v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  char v49;
  _QWORD v50[5];
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  char v56;

  static DynamicPropertyCache.fields(of:)(v3, (uint64_t)&v51);
  v6 = v51;
  v7 = v52;
  v8 = DWORD1(v52);
  v9 = *(_OWORD *)(a2 + 48);
  v53 = *(_OWORD *)(a2 + 32);
  v54 = v9;
  v55 = *(_OWORD *)(a2 + 64);
  v56 = *(_BYTE *)(a2 + 80);
  v10 = *(_OWORD *)(a2 + 16);
  v51 = *(_OWORD *)a2;
  v52 = v10;
  outlined retain of _ViewListInputs(a2);
  v36 = v7;
  LOBYTE(v37) = v7;
  v26 = a1;
  specialized static View.makeBody(view:inputs:fields:)(v50, (uint64_t)&v37, a1, (uint64_t)&v51, v6, *((uint64_t *)&v6 + 1), v7 | ((unint64_t)v8 << 32));
  v24 = v38;
  v25 = v37;
  v34 = v39;
  type metadata accessor for _ShapeView<Ellipse, ForegroundStyle>();
  v11 = v51;
  v12 = v52;
  v13 = HIDWORD(v52);
  v31 = DWORD2(v52);
  v32 = DWORD2(v51);
  v14 = v53;
  v15 = DWORD1(v53);
  v16 = *((_QWORD *)&v53 + 1);
  v29 = *((_QWORD *)&v54 + 1);
  v30 = v54;
  v17 = *((_QWORD *)&v55 + 1);
  v27 = v56;
  v28 = v55;
  ShouldRecordTree = AGSubgraphShouldRecordTree();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  if (ShouldRecordTree)
    AGSubgraphBeginTreeElement();
  v18 = AGCreateWeakAttribute();
  v19 = v18;
  v20 = HIDWORD(v18);
  type metadata accessor for InterpolatedDisplayList<ResolvedStyledText>(0, &lazy cache variable for type metadata for UnaryElements<TypedUnaryViewGenerator<_ShapeView<Ellipse, ForegroundStyle>>>, (uint64_t (*)(uint64_t))type metadata accessor for TypedUnaryViewGenerator<_ShapeView<Ellipse, ForegroundStyle>>, (uint64_t)&protocol witness table for TypedUnaryViewGenerator<A>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UnaryElements);
  v50[3] = v21;
  v50[4] = &protocol witness table for UnaryElements<A>;
  v22 = swift_allocObject();
  v50[0] = v22;
  *(_DWORD *)(v22 + 16) = v19;
  *(_DWORD *)(v22 + 20) = v20;
  *(_QWORD *)(v22 + 24) = v11;
  *(_DWORD *)(v22 + 32) = v32;
  *(_QWORD *)(v22 + 40) = v12;
  *(_DWORD *)(v22 + 48) = v31;
  *(_DWORD *)(v22 + 52) = v13;
  *(_DWORD *)(v22 + 56) = v14;
  *(_DWORD *)(v22 + 60) = v15;
  *(_QWORD *)(v22 + 64) = v16;
  v37 = v11;
  LODWORD(v38) = v32;
  v39 = v12;
  v40 = v31;
  v41 = v13;
  v42 = v14;
  v43 = v15;
  v44 = v16;
  v45 = v30;
  v46 = v29;
  v47 = v28;
  v48 = v17;
  v49 = v27;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  static _ViewListOutputs.staticList(_:inputs:staticCount:)((uint64_t)v50, &v37, 1, a3);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v50);
  if (ShouldRecordTree)
    AGSubgraphEndTreeElement();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  if ((v34 & 1) == 0)
  {
    LOBYTE(v37) = v36;
    specialized _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)(v26, v6, *((uint64_t *)&v6 + 1), v36, v25, v24, (unint64_t)&type metadata for Ellipse, (uint64_t)type metadata accessor for Ellipse.Type);
  }
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  return outlined consume of DynamicPropertyCache.Fields.Layout();
}

{
  uint64_t v3;
  __int128 v6;
  unsigned __int8 v7;
  unsigned int v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  int v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  int v26;
  char v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  int v32;
  int ShouldRecordTree;
  char v34;
  char v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  int v41;
  int v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  char v49;
  _QWORD v50[5];
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  char v56;

  static DynamicPropertyCache.fields(of:)(v3, (uint64_t)&v51);
  v6 = v51;
  v7 = v52;
  v8 = DWORD1(v52);
  v9 = *(_OWORD *)(a2 + 48);
  v53 = *(_OWORD *)(a2 + 32);
  v54 = v9;
  v55 = *(_OWORD *)(a2 + 64);
  v56 = *(_BYTE *)(a2 + 80);
  v10 = *(_OWORD *)(a2 + 16);
  v51 = *(_OWORD *)a2;
  v52 = v10;
  outlined retain of _ViewListInputs(a2);
  v36 = v7;
  LOBYTE(v37) = v7;
  v26 = a1;
  specialized static View.makeBody(view:inputs:fields:)(v50, (uint64_t)&v37, a1, (uint64_t)&v51, v6, *((uint64_t *)&v6 + 1), v7 | ((unint64_t)v8 << 32));
  v24 = v38;
  v25 = v37;
  v34 = v39;
  type metadata accessor for _ShapeView<Ellipse._Inset, ForegroundStyle>();
  v11 = v51;
  v12 = v52;
  v13 = HIDWORD(v52);
  v31 = DWORD2(v52);
  v32 = DWORD2(v51);
  v14 = v53;
  v15 = DWORD1(v53);
  v16 = *((_QWORD *)&v53 + 1);
  v29 = *((_QWORD *)&v54 + 1);
  v30 = v54;
  v17 = *((_QWORD *)&v55 + 1);
  v27 = v56;
  v28 = v55;
  ShouldRecordTree = AGSubgraphShouldRecordTree();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  if (ShouldRecordTree)
    AGSubgraphBeginTreeElement();
  v18 = AGCreateWeakAttribute();
  v19 = v18;
  v20 = HIDWORD(v18);
  type metadata accessor for InterpolatedDisplayList<ResolvedStyledText>(0, &lazy cache variable for type metadata for UnaryElements<TypedUnaryViewGenerator<_ShapeView<Ellipse._Inset, ForegroundStyle>>>, (uint64_t (*)(uint64_t))type metadata accessor for TypedUnaryViewGenerator<_ShapeView<Ellipse._Inset, ForegroundStyle>>, (uint64_t)&protocol witness table for TypedUnaryViewGenerator<A>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UnaryElements);
  v50[3] = v21;
  v50[4] = &protocol witness table for UnaryElements<A>;
  v22 = swift_allocObject();
  v50[0] = v22;
  *(_DWORD *)(v22 + 16) = v19;
  *(_DWORD *)(v22 + 20) = v20;
  *(_QWORD *)(v22 + 24) = v11;
  *(_DWORD *)(v22 + 32) = v32;
  *(_QWORD *)(v22 + 40) = v12;
  *(_DWORD *)(v22 + 48) = v31;
  *(_DWORD *)(v22 + 52) = v13;
  *(_DWORD *)(v22 + 56) = v14;
  *(_DWORD *)(v22 + 60) = v15;
  *(_QWORD *)(v22 + 64) = v16;
  v37 = v11;
  LODWORD(v38) = v32;
  v39 = v12;
  v40 = v31;
  v41 = v13;
  v42 = v14;
  v43 = v15;
  v44 = v16;
  v45 = v30;
  v46 = v29;
  v47 = v28;
  v48 = v17;
  v49 = v27;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  static _ViewListOutputs.staticList(_:inputs:staticCount:)((uint64_t)v50, &v37, 1, a3);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v50);
  if (ShouldRecordTree)
    AGSubgraphEndTreeElement();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  if ((v34 & 1) == 0)
  {
    LOBYTE(v37) = v36;
    specialized _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)(v26, v6, *((uint64_t *)&v6 + 1), v36, v25, v24, (unint64_t)&type metadata for Ellipse._Inset, (uint64_t)type metadata accessor for Ellipse._Inset.Type);
  }
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  return outlined consume of DynamicPropertyCache.Fields.Layout();
}

{
  uint64_t v3;
  __int128 v6;
  unsigned __int8 v7;
  unsigned int v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  int v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  int v26;
  char v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  int v32;
  int ShouldRecordTree;
  char v34;
  char v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  int v41;
  int v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  char v49;
  _QWORD v50[5];
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  char v56;

  static DynamicPropertyCache.fields(of:)(v3, (uint64_t)&v51);
  v6 = v51;
  v7 = v52;
  v8 = DWORD1(v52);
  v9 = *(_OWORD *)(a2 + 48);
  v53 = *(_OWORD *)(a2 + 32);
  v54 = v9;
  v55 = *(_OWORD *)(a2 + 64);
  v56 = *(_BYTE *)(a2 + 80);
  v10 = *(_OWORD *)(a2 + 16);
  v51 = *(_OWORD *)a2;
  v52 = v10;
  outlined retain of _ViewListInputs(a2);
  v36 = v7;
  LOBYTE(v37) = v7;
  v26 = a1;
  specialized static View.makeBody(view:inputs:fields:)(v50, (uint64_t)&v37, a1, (uint64_t)&v51, v6, *((uint64_t *)&v6 + 1), v7 | ((unint64_t)v8 << 32));
  v24 = v38;
  v25 = v37;
  v34 = v39;
  type metadata accessor for _ShapeView<Capsule, ForegroundStyle>();
  v11 = v51;
  v12 = v52;
  v13 = HIDWORD(v52);
  v31 = DWORD2(v52);
  v32 = DWORD2(v51);
  v14 = v53;
  v15 = DWORD1(v53);
  v16 = *((_QWORD *)&v53 + 1);
  v29 = *((_QWORD *)&v54 + 1);
  v30 = v54;
  v17 = *((_QWORD *)&v55 + 1);
  v27 = v56;
  v28 = v55;
  ShouldRecordTree = AGSubgraphShouldRecordTree();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  if (ShouldRecordTree)
    AGSubgraphBeginTreeElement();
  v18 = AGCreateWeakAttribute();
  v19 = v18;
  v20 = HIDWORD(v18);
  type metadata accessor for InterpolatedDisplayList<ResolvedStyledText>(0, &lazy cache variable for type metadata for UnaryElements<TypedUnaryViewGenerator<_ShapeView<Capsule, ForegroundStyle>>>, (uint64_t (*)(uint64_t))type metadata accessor for TypedUnaryViewGenerator<_ShapeView<Capsule, ForegroundStyle>>, (uint64_t)&protocol witness table for TypedUnaryViewGenerator<A>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UnaryElements);
  v50[3] = v21;
  v50[4] = &protocol witness table for UnaryElements<A>;
  v22 = swift_allocObject();
  v50[0] = v22;
  *(_DWORD *)(v22 + 16) = v19;
  *(_DWORD *)(v22 + 20) = v20;
  *(_QWORD *)(v22 + 24) = v11;
  *(_DWORD *)(v22 + 32) = v32;
  *(_QWORD *)(v22 + 40) = v12;
  *(_DWORD *)(v22 + 48) = v31;
  *(_DWORD *)(v22 + 52) = v13;
  *(_DWORD *)(v22 + 56) = v14;
  *(_DWORD *)(v22 + 60) = v15;
  *(_QWORD *)(v22 + 64) = v16;
  v37 = v11;
  LODWORD(v38) = v32;
  v39 = v12;
  v40 = v31;
  v41 = v13;
  v42 = v14;
  v43 = v15;
  v44 = v16;
  v45 = v30;
  v46 = v29;
  v47 = v28;
  v48 = v17;
  v49 = v27;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  static _ViewListOutputs.staticList(_:inputs:staticCount:)((uint64_t)v50, &v37, 1, a3);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v50);
  if (ShouldRecordTree)
    AGSubgraphEndTreeElement();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  if ((v34 & 1) == 0)
  {
    LOBYTE(v37) = v36;
    specialized _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)(v26, v6, *((uint64_t *)&v6 + 1), v36, v25, v24, (unint64_t)&type metadata for Capsule, (uint64_t)type metadata accessor for Capsule.Type);
  }
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  return outlined consume of DynamicPropertyCache.Fields.Layout();
}

{
  uint64_t v3;
  __int128 v6;
  unsigned __int8 v7;
  unsigned int v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  int v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  int v26;
  char v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  int v32;
  int ShouldRecordTree;
  char v34;
  char v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  int v41;
  int v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  char v49;
  _QWORD v50[5];
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  char v56;

  static DynamicPropertyCache.fields(of:)(v3, (uint64_t)&v51);
  v6 = v51;
  v7 = v52;
  v8 = DWORD1(v52);
  v9 = *(_OWORD *)(a2 + 48);
  v53 = *(_OWORD *)(a2 + 32);
  v54 = v9;
  v55 = *(_OWORD *)(a2 + 64);
  v56 = *(_BYTE *)(a2 + 80);
  v10 = *(_OWORD *)(a2 + 16);
  v51 = *(_OWORD *)a2;
  v52 = v10;
  outlined retain of _ViewListInputs(a2);
  v36 = v7;
  LOBYTE(v37) = v7;
  v26 = a1;
  specialized static View.makeBody(view:inputs:fields:)(v50, (uint64_t)&v37, a1, (uint64_t)&v51, v6, *((uint64_t *)&v6 + 1), v7 | ((unint64_t)v8 << 32));
  v24 = v38;
  v25 = v37;
  v34 = v39;
  type metadata accessor for _ShapeView<Capsule._Inset, ForegroundStyle>();
  v11 = v51;
  v12 = v52;
  v13 = HIDWORD(v52);
  v31 = DWORD2(v52);
  v32 = DWORD2(v51);
  v14 = v53;
  v15 = DWORD1(v53);
  v16 = *((_QWORD *)&v53 + 1);
  v29 = *((_QWORD *)&v54 + 1);
  v30 = v54;
  v17 = *((_QWORD *)&v55 + 1);
  v27 = v56;
  v28 = v55;
  ShouldRecordTree = AGSubgraphShouldRecordTree();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  if (ShouldRecordTree)
    AGSubgraphBeginTreeElement();
  v18 = AGCreateWeakAttribute();
  v19 = v18;
  v20 = HIDWORD(v18);
  type metadata accessor for InterpolatedDisplayList<ResolvedStyledText>(0, &lazy cache variable for type metadata for UnaryElements<TypedUnaryViewGenerator<_ShapeView<Capsule._Inset, ForegroundStyle>>>, (uint64_t (*)(uint64_t))type metadata accessor for TypedUnaryViewGenerator<_ShapeView<Capsule._Inset, ForegroundStyle>>, (uint64_t)&protocol witness table for TypedUnaryViewGenerator<A>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UnaryElements);
  v50[3] = v21;
  v50[4] = &protocol witness table for UnaryElements<A>;
  v22 = swift_allocObject();
  v50[0] = v22;
  *(_DWORD *)(v22 + 16) = v19;
  *(_DWORD *)(v22 + 20) = v20;
  *(_QWORD *)(v22 + 24) = v11;
  *(_DWORD *)(v22 + 32) = v32;
  *(_QWORD *)(v22 + 40) = v12;
  *(_DWORD *)(v22 + 48) = v31;
  *(_DWORD *)(v22 + 52) = v13;
  *(_DWORD *)(v22 + 56) = v14;
  *(_DWORD *)(v22 + 60) = v15;
  *(_QWORD *)(v22 + 64) = v16;
  v37 = v11;
  LODWORD(v38) = v32;
  v39 = v12;
  v40 = v31;
  v41 = v13;
  v42 = v14;
  v43 = v15;
  v44 = v16;
  v45 = v30;
  v46 = v29;
  v47 = v28;
  v48 = v17;
  v49 = v27;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  static _ViewListOutputs.staticList(_:inputs:staticCount:)((uint64_t)v50, &v37, 1, a3);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v50);
  if (ShouldRecordTree)
    AGSubgraphEndTreeElement();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  if ((v34 & 1) == 0)
  {
    LOBYTE(v37) = v36;
    specialized _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)(v26, v6, *((uint64_t *)&v6 + 1), v36, v25, v24, (unint64_t)&type metadata for Capsule._Inset, (uint64_t)type metadata accessor for Capsule._Inset.Type);
  }
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  return outlined consume of DynamicPropertyCache.Fields.Layout();
}

{
  uint64_t v3;
  __int128 v6;
  unsigned __int8 v7;
  unsigned int v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  int v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  int v26;
  char v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  int v32;
  int ShouldRecordTree;
  char v34;
  char v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  int v41;
  int v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  char v49;
  _QWORD v50[5];
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  char v56;

  static DynamicPropertyCache.fields(of:)(v3, (uint64_t)&v51);
  v6 = v51;
  v7 = v52;
  v8 = DWORD1(v52);
  v9 = *(_OWORD *)(a2 + 48);
  v53 = *(_OWORD *)(a2 + 32);
  v54 = v9;
  v55 = *(_OWORD *)(a2 + 64);
  v56 = *(_BYTE *)(a2 + 80);
  v10 = *(_OWORD *)(a2 + 16);
  v51 = *(_OWORD *)a2;
  v52 = v10;
  outlined retain of _ViewListInputs(a2);
  v36 = v7;
  LOBYTE(v37) = v7;
  v26 = a1;
  specialized static View.makeBody(view:inputs:fields:)(v50, (uint64_t)&v37, a1, (uint64_t)&v51, v6, *((uint64_t *)&v6 + 1), v7 | ((unint64_t)v8 << 32));
  v24 = v38;
  v25 = v37;
  v34 = v39;
  type metadata accessor for _ShapeView<Circle, ForegroundStyle>();
  v11 = v51;
  v12 = v52;
  v13 = HIDWORD(v52);
  v31 = DWORD2(v52);
  v32 = DWORD2(v51);
  v14 = v53;
  v15 = DWORD1(v53);
  v16 = *((_QWORD *)&v53 + 1);
  v29 = *((_QWORD *)&v54 + 1);
  v30 = v54;
  v17 = *((_QWORD *)&v55 + 1);
  v27 = v56;
  v28 = v55;
  ShouldRecordTree = AGSubgraphShouldRecordTree();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  if (ShouldRecordTree)
    AGSubgraphBeginTreeElement();
  v18 = AGCreateWeakAttribute();
  v19 = v18;
  v20 = HIDWORD(v18);
  type metadata accessor for InterpolatedDisplayList<ResolvedStyledText>(0, &lazy cache variable for type metadata for UnaryElements<TypedUnaryViewGenerator<_ShapeView<Circle, ForegroundStyle>>>, (uint64_t (*)(uint64_t))type metadata accessor for TypedUnaryViewGenerator<_ShapeView<Circle, ForegroundStyle>>, (uint64_t)&protocol witness table for TypedUnaryViewGenerator<A>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UnaryElements);
  v50[3] = v21;
  v50[4] = &protocol witness table for UnaryElements<A>;
  v22 = swift_allocObject();
  v50[0] = v22;
  *(_DWORD *)(v22 + 16) = v19;
  *(_DWORD *)(v22 + 20) = v20;
  *(_QWORD *)(v22 + 24) = v11;
  *(_DWORD *)(v22 + 32) = v32;
  *(_QWORD *)(v22 + 40) = v12;
  *(_DWORD *)(v22 + 48) = v31;
  *(_DWORD *)(v22 + 52) = v13;
  *(_DWORD *)(v22 + 56) = v14;
  *(_DWORD *)(v22 + 60) = v15;
  *(_QWORD *)(v22 + 64) = v16;
  v37 = v11;
  LODWORD(v38) = v32;
  v39 = v12;
  v40 = v31;
  v41 = v13;
  v42 = v14;
  v43 = v15;
  v44 = v16;
  v45 = v30;
  v46 = v29;
  v47 = v28;
  v48 = v17;
  v49 = v27;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  static _ViewListOutputs.staticList(_:inputs:staticCount:)((uint64_t)v50, &v37, 1, a3);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v50);
  if (ShouldRecordTree)
    AGSubgraphEndTreeElement();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  if ((v34 & 1) == 0)
  {
    LOBYTE(v37) = v36;
    specialized _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)(v26, v6, *((uint64_t *)&v6 + 1), v36, v25, v24, (unint64_t)&type metadata for Circle, (uint64_t)type metadata accessor for Circle.Type);
  }
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  return outlined consume of DynamicPropertyCache.Fields.Layout();
}

{
  uint64_t v3;
  __int128 v6;
  unsigned __int8 v7;
  unsigned int v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  int v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  int v26;
  char v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  int v32;
  int ShouldRecordTree;
  char v34;
  char v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  int v41;
  int v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  char v49;
  _QWORD v50[5];
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  char v56;

  static DynamicPropertyCache.fields(of:)(v3, (uint64_t)&v51);
  v6 = v51;
  v7 = v52;
  v8 = DWORD1(v52);
  v9 = *(_OWORD *)(a2 + 48);
  v53 = *(_OWORD *)(a2 + 32);
  v54 = v9;
  v55 = *(_OWORD *)(a2 + 64);
  v56 = *(_BYTE *)(a2 + 80);
  v10 = *(_OWORD *)(a2 + 16);
  v51 = *(_OWORD *)a2;
  v52 = v10;
  outlined retain of _ViewListInputs(a2);
  v36 = v7;
  LOBYTE(v37) = v7;
  v26 = a1;
  specialized static View.makeBody(view:inputs:fields:)(v50, (uint64_t)&v37, a1, (uint64_t)&v51, v6, *((uint64_t *)&v6 + 1), v7 | ((unint64_t)v8 << 32));
  v24 = v38;
  v25 = v37;
  v34 = v39;
  type metadata accessor for _ShapeView<Circle._Inset, ForegroundStyle>();
  v11 = v51;
  v12 = v52;
  v13 = HIDWORD(v52);
  v31 = DWORD2(v52);
  v32 = DWORD2(v51);
  v14 = v53;
  v15 = DWORD1(v53);
  v16 = *((_QWORD *)&v53 + 1);
  v29 = *((_QWORD *)&v54 + 1);
  v30 = v54;
  v17 = *((_QWORD *)&v55 + 1);
  v27 = v56;
  v28 = v55;
  ShouldRecordTree = AGSubgraphShouldRecordTree();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  if (ShouldRecordTree)
    AGSubgraphBeginTreeElement();
  v18 = AGCreateWeakAttribute();
  v19 = v18;
  v20 = HIDWORD(v18);
  type metadata accessor for InterpolatedDisplayList<ResolvedStyledText>(0, &lazy cache variable for type metadata for UnaryElements<TypedUnaryViewGenerator<_ShapeView<Circle._Inset, ForegroundStyle>>>, (uint64_t (*)(uint64_t))type metadata accessor for TypedUnaryViewGenerator<_ShapeView<Circle._Inset, ForegroundStyle>>, (uint64_t)&protocol witness table for TypedUnaryViewGenerator<A>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UnaryElements);
  v50[3] = v21;
  v50[4] = &protocol witness table for UnaryElements<A>;
  v22 = swift_allocObject();
  v50[0] = v22;
  *(_DWORD *)(v22 + 16) = v19;
  *(_DWORD *)(v22 + 20) = v20;
  *(_QWORD *)(v22 + 24) = v11;
  *(_DWORD *)(v22 + 32) = v32;
  *(_QWORD *)(v22 + 40) = v12;
  *(_DWORD *)(v22 + 48) = v31;
  *(_DWORD *)(v22 + 52) = v13;
  *(_DWORD *)(v22 + 56) = v14;
  *(_DWORD *)(v22 + 60) = v15;
  *(_QWORD *)(v22 + 64) = v16;
  v37 = v11;
  LODWORD(v38) = v32;
  v39 = v12;
  v40 = v31;
  v41 = v13;
  v42 = v14;
  v43 = v15;
  v44 = v16;
  v45 = v30;
  v46 = v29;
  v47 = v28;
  v48 = v17;
  v49 = v27;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  static _ViewListOutputs.staticList(_:inputs:staticCount:)((uint64_t)v50, &v37, 1, a3);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v50);
  if (ShouldRecordTree)
    AGSubgraphEndTreeElement();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  if ((v34 & 1) == 0)
  {
    LOBYTE(v37) = v36;
    specialized _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)(v26, v6, *((uint64_t *)&v6 + 1), v36, v25, v24, (unint64_t)&type metadata for Circle._Inset, (uint64_t)type metadata accessor for Circle._Inset.Type);
  }
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  return outlined consume of DynamicPropertyCache.Fields.Layout();
}

{
  uint64_t v3;
  __int128 v6;
  unsigned __int8 v7;
  unsigned int v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  int v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  int v26;
  char v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  int v32;
  int ShouldRecordTree;
  char v34;
  char v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  int v41;
  int v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  char v49;
  _QWORD v50[5];
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  char v56;

  static DynamicPropertyCache.fields(of:)(v3, (uint64_t)&v51);
  v6 = v51;
  v7 = v52;
  v8 = DWORD1(v52);
  v9 = *(_OWORD *)(a2 + 48);
  v53 = *(_OWORD *)(a2 + 32);
  v54 = v9;
  v55 = *(_OWORD *)(a2 + 64);
  v56 = *(_BYTE *)(a2 + 80);
  v10 = *(_OWORD *)(a2 + 16);
  v51 = *(_OWORD *)a2;
  v52 = v10;
  outlined retain of _ViewListInputs(a2);
  v36 = v7;
  LOBYTE(v37) = v7;
  v26 = a1;
  specialized static View.makeBody(view:inputs:fields:)(v50, (uint64_t)&v37, a1, (uint64_t)&v51, v6, *((uint64_t *)&v6 + 1), v7 | ((unint64_t)v8 << 32));
  v24 = v38;
  v25 = v37;
  v34 = v39;
  type metadata accessor for _ShapeView<Path, ForegroundStyle>();
  v11 = v51;
  v12 = v52;
  v13 = HIDWORD(v52);
  v31 = DWORD2(v52);
  v32 = DWORD2(v51);
  v14 = v53;
  v15 = DWORD1(v53);
  v16 = *((_QWORD *)&v53 + 1);
  v29 = *((_QWORD *)&v54 + 1);
  v30 = v54;
  v17 = *((_QWORD *)&v55 + 1);
  v27 = v56;
  v28 = v55;
  ShouldRecordTree = AGSubgraphShouldRecordTree();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  if (ShouldRecordTree)
    AGSubgraphBeginTreeElement();
  v18 = AGCreateWeakAttribute();
  v19 = v18;
  v20 = HIDWORD(v18);
  type metadata accessor for InterpolatedDisplayList<ResolvedStyledText>(0, &lazy cache variable for type metadata for UnaryElements<TypedUnaryViewGenerator<_ShapeView<Path, ForegroundStyle>>>, (uint64_t (*)(uint64_t))type metadata accessor for TypedUnaryViewGenerator<_ShapeView<Path, ForegroundStyle>>, (uint64_t)&protocol witness table for TypedUnaryViewGenerator<A>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UnaryElements);
  v50[3] = v21;
  v50[4] = &protocol witness table for UnaryElements<A>;
  v22 = swift_allocObject();
  v50[0] = v22;
  *(_DWORD *)(v22 + 16) = v19;
  *(_DWORD *)(v22 + 20) = v20;
  *(_QWORD *)(v22 + 24) = v11;
  *(_DWORD *)(v22 + 32) = v32;
  *(_QWORD *)(v22 + 40) = v12;
  *(_DWORD *)(v22 + 48) = v31;
  *(_DWORD *)(v22 + 52) = v13;
  *(_DWORD *)(v22 + 56) = v14;
  *(_DWORD *)(v22 + 60) = v15;
  *(_QWORD *)(v22 + 64) = v16;
  v37 = v11;
  LODWORD(v38) = v32;
  v39 = v12;
  v40 = v31;
  v41 = v13;
  v42 = v14;
  v43 = v15;
  v44 = v16;
  v45 = v30;
  v46 = v29;
  v47 = v28;
  v48 = v17;
  v49 = v27;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  static _ViewListOutputs.staticList(_:inputs:staticCount:)((uint64_t)v50, &v37, 1, a3);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v50);
  if (ShouldRecordTree)
    AGSubgraphEndTreeElement();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  if ((v34 & 1) == 0)
  {
    LOBYTE(v37) = v36;
    specialized _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)(v26, v6, *((uint64_t *)&v6 + 1), v36, v25, v24, (unint64_t)&type metadata for Path, (uint64_t)type metadata accessor for Path.Type);
  }
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  return outlined consume of DynamicPropertyCache.Fields.Layout();
}

{
  uint64_t v3;
  __int128 v6;
  unsigned __int8 v7;
  unsigned int v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  int v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  int v26;
  char v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  int v32;
  int ShouldRecordTree;
  char v34;
  char v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  int v41;
  int v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  char v49;
  _QWORD v50[5];
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  char v56;

  static DynamicPropertyCache.fields(of:)(v3, (uint64_t)&v51);
  v6 = v51;
  v7 = v52;
  v8 = DWORD1(v52);
  v9 = *(_OWORD *)(a2 + 48);
  v53 = *(_OWORD *)(a2 + 32);
  v54 = v9;
  v55 = *(_OWORD *)(a2 + 64);
  v56 = *(_BYTE *)(a2 + 80);
  v10 = *(_OWORD *)(a2 + 16);
  v51 = *(_OWORD *)a2;
  v52 = v10;
  outlined retain of _ViewListInputs(a2);
  v36 = v7;
  LOBYTE(v37) = v7;
  v26 = a1;
  specialized static View.makeBody(view:inputs:fields:)(v50, (uint64_t)&v37, a1, (uint64_t)&v51, v6, *((uint64_t *)&v6 + 1), v7 | ((unint64_t)v8 << 32));
  v24 = v38;
  v25 = v37;
  v34 = v39;
  type metadata accessor for _ShapeView<UnevenRoundedRectangle, ForegroundStyle>();
  v11 = v51;
  v12 = v52;
  v13 = HIDWORD(v52);
  v31 = DWORD2(v52);
  v32 = DWORD2(v51);
  v14 = v53;
  v15 = DWORD1(v53);
  v16 = *((_QWORD *)&v53 + 1);
  v29 = *((_QWORD *)&v54 + 1);
  v30 = v54;
  v17 = *((_QWORD *)&v55 + 1);
  v27 = v56;
  v28 = v55;
  ShouldRecordTree = AGSubgraphShouldRecordTree();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  if (ShouldRecordTree)
    AGSubgraphBeginTreeElement();
  v18 = AGCreateWeakAttribute();
  v19 = v18;
  v20 = HIDWORD(v18);
  type metadata accessor for InterpolatedDisplayList<ResolvedStyledText>(0, &lazy cache variable for type metadata for UnaryElements<TypedUnaryViewGenerator<_ShapeView<UnevenRoundedRectangle, ForegroundStyle>>>, (uint64_t (*)(uint64_t))type metadata accessor for TypedUnaryViewGenerator<_ShapeView<UnevenRoundedRectangle, ForegroundStyle>>, (uint64_t)&protocol witness table for TypedUnaryViewGenerator<A>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UnaryElements);
  v50[3] = v21;
  v50[4] = &protocol witness table for UnaryElements<A>;
  v22 = swift_allocObject();
  v50[0] = v22;
  *(_DWORD *)(v22 + 16) = v19;
  *(_DWORD *)(v22 + 20) = v20;
  *(_QWORD *)(v22 + 24) = v11;
  *(_DWORD *)(v22 + 32) = v32;
  *(_QWORD *)(v22 + 40) = v12;
  *(_DWORD *)(v22 + 48) = v31;
  *(_DWORD *)(v22 + 52) = v13;
  *(_DWORD *)(v22 + 56) = v14;
  *(_DWORD *)(v22 + 60) = v15;
  *(_QWORD *)(v22 + 64) = v16;
  v37 = v11;
  LODWORD(v38) = v32;
  v39 = v12;
  v40 = v31;
  v41 = v13;
  v42 = v14;
  v43 = v15;
  v44 = v16;
  v45 = v30;
  v46 = v29;
  v47 = v28;
  v48 = v17;
  v49 = v27;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  static _ViewListOutputs.staticList(_:inputs:staticCount:)((uint64_t)v50, &v37, 1, a3);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v50);
  if (ShouldRecordTree)
    AGSubgraphEndTreeElement();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  if ((v34 & 1) == 0)
  {
    LOBYTE(v37) = v36;
    specialized _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)(v26, v6, *((uint64_t *)&v6 + 1), v36, v25, v24, (unint64_t)&type metadata for UnevenRoundedRectangle, (uint64_t)type metadata accessor for UnevenRoundedRectangle.Type);
  }
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  return outlined consume of DynamicPropertyCache.Fields.Layout();
}

{
  uint64_t v3;
  __int128 v6;
  unsigned __int8 v7;
  unsigned int v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  int v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  int v26;
  char v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  int v32;
  int ShouldRecordTree;
  char v34;
  char v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  int v41;
  int v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  char v49;
  _QWORD v50[5];
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  char v56;

  static DynamicPropertyCache.fields(of:)(v3, (uint64_t)&v51);
  v6 = v51;
  v7 = v52;
  v8 = DWORD1(v52);
  v9 = *(_OWORD *)(a2 + 48);
  v53 = *(_OWORD *)(a2 + 32);
  v54 = v9;
  v55 = *(_OWORD *)(a2 + 64);
  v56 = *(_BYTE *)(a2 + 80);
  v10 = *(_OWORD *)(a2 + 16);
  v51 = *(_OWORD *)a2;
  v52 = v10;
  outlined retain of _ViewListInputs(a2);
  v36 = v7;
  LOBYTE(v37) = v7;
  v26 = a1;
  specialized static View.makeBody(view:inputs:fields:)(v50, (uint64_t)&v37, a1, (uint64_t)&v51, v6, *((uint64_t *)&v6 + 1), v7 | ((unint64_t)v8 << 32));
  v24 = v38;
  v25 = v37;
  v34 = v39;
  type metadata accessor for _ShapeView<UnevenRoundedRectangle._Inset, ForegroundStyle>();
  v11 = v51;
  v12 = v52;
  v13 = HIDWORD(v52);
  v31 = DWORD2(v52);
  v32 = DWORD2(v51);
  v14 = v53;
  v15 = DWORD1(v53);
  v16 = *((_QWORD *)&v53 + 1);
  v29 = *((_QWORD *)&v54 + 1);
  v30 = v54;
  v17 = *((_QWORD *)&v55 + 1);
  v27 = v56;
  v28 = v55;
  ShouldRecordTree = AGSubgraphShouldRecordTree();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  if (ShouldRecordTree)
    AGSubgraphBeginTreeElement();
  v18 = AGCreateWeakAttribute();
  v19 = v18;
  v20 = HIDWORD(v18);
  type metadata accessor for InterpolatedDisplayList<ResolvedStyledText>(0, &lazy cache variable for type metadata for UnaryElements<TypedUnaryViewGenerator<_ShapeView<UnevenRoundedRectangle._Inset, ForegroundStyle>>>, (uint64_t (*)(uint64_t))type metadata accessor for TypedUnaryViewGenerator<_ShapeView<UnevenRoundedRectangle._Inset, ForegroundStyle>>, (uint64_t)&protocol witness table for TypedUnaryViewGenerator<A>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UnaryElements);
  v50[3] = v21;
  v50[4] = &protocol witness table for UnaryElements<A>;
  v22 = swift_allocObject();
  v50[0] = v22;
  *(_DWORD *)(v22 + 16) = v19;
  *(_DWORD *)(v22 + 20) = v20;
  *(_QWORD *)(v22 + 24) = v11;
  *(_DWORD *)(v22 + 32) = v32;
  *(_QWORD *)(v22 + 40) = v12;
  *(_DWORD *)(v22 + 48) = v31;
  *(_DWORD *)(v22 + 52) = v13;
  *(_DWORD *)(v22 + 56) = v14;
  *(_DWORD *)(v22 + 60) = v15;
  *(_QWORD *)(v22 + 64) = v16;
  v37 = v11;
  LODWORD(v38) = v32;
  v39 = v12;
  v40 = v31;
  v41 = v13;
  v42 = v14;
  v43 = v15;
  v44 = v16;
  v45 = v30;
  v46 = v29;
  v47 = v28;
  v48 = v17;
  v49 = v27;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  static _ViewListOutputs.staticList(_:inputs:staticCount:)((uint64_t)v50, &v37, 1, a3);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v50);
  if (ShouldRecordTree)
    AGSubgraphEndTreeElement();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  if ((v34 & 1) == 0)
  {
    LOBYTE(v37) = v36;
    specialized _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)(v26, v6, *((uint64_t *)&v6 + 1), v36, v25, v24, (unint64_t)&type metadata for UnevenRoundedRectangle._Inset, (uint64_t)type metadata accessor for UnevenRoundedRectangle._Inset.Type);
  }
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  return outlined consume of DynamicPropertyCache.Fields.Layout();
}

{
  uint64_t v3;
  __int128 v6;
  unsigned __int8 v7;
  unsigned int v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  int v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  int v26;
  char v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  int v32;
  int ShouldRecordTree;
  char v34;
  char v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  int v41;
  int v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  char v49;
  _QWORD v50[5];
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  char v56;

  static DynamicPropertyCache.fields(of:)(v3, (uint64_t)&v51);
  v6 = v51;
  v7 = v52;
  v8 = DWORD1(v52);
  v9 = *(_OWORD *)(a2 + 48);
  v53 = *(_OWORD *)(a2 + 32);
  v54 = v9;
  v55 = *(_OWORD *)(a2 + 64);
  v56 = *(_BYTE *)(a2 + 80);
  v10 = *(_OWORD *)(a2 + 16);
  v51 = *(_OWORD *)a2;
  v52 = v10;
  outlined retain of _ViewListInputs(a2);
  v36 = v7;
  LOBYTE(v37) = v7;
  v26 = a1;
  specialized static View.makeBody(view:inputs:fields:)(v50, (uint64_t)&v37, a1, (uint64_t)&v51, v6, *((uint64_t *)&v6 + 1), v7 | ((unint64_t)v8 << 32));
  v24 = v38;
  v25 = v37;
  v34 = v39;
  type metadata accessor for _ShapeView<ContainerRelativeShape, ForegroundStyle>();
  v11 = v51;
  v12 = v52;
  v13 = HIDWORD(v52);
  v31 = DWORD2(v52);
  v32 = DWORD2(v51);
  v14 = v53;
  v15 = DWORD1(v53);
  v16 = *((_QWORD *)&v53 + 1);
  v29 = *((_QWORD *)&v54 + 1);
  v30 = v54;
  v17 = *((_QWORD *)&v55 + 1);
  v27 = v56;
  v28 = v55;
  ShouldRecordTree = AGSubgraphShouldRecordTree();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  if (ShouldRecordTree)
    AGSubgraphBeginTreeElement();
  v18 = AGCreateWeakAttribute();
  v19 = v18;
  v20 = HIDWORD(v18);
  type metadata accessor for InterpolatedDisplayList<ResolvedStyledText>(0, &lazy cache variable for type metadata for UnaryElements<TypedUnaryViewGenerator<_ShapeView<ContainerRelativeShape, ForegroundStyle>>>, (uint64_t (*)(uint64_t))type metadata accessor for TypedUnaryViewGenerator<_ShapeView<ContainerRelativeShape, ForegroundStyle>>, (uint64_t)&protocol witness table for TypedUnaryViewGenerator<A>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UnaryElements);
  v50[3] = v21;
  v50[4] = &protocol witness table for UnaryElements<A>;
  v22 = swift_allocObject();
  v50[0] = v22;
  *(_DWORD *)(v22 + 16) = v19;
  *(_DWORD *)(v22 + 20) = v20;
  *(_QWORD *)(v22 + 24) = v11;
  *(_DWORD *)(v22 + 32) = v32;
  *(_QWORD *)(v22 + 40) = v12;
  *(_DWORD *)(v22 + 48) = v31;
  *(_DWORD *)(v22 + 52) = v13;
  *(_DWORD *)(v22 + 56) = v14;
  *(_DWORD *)(v22 + 60) = v15;
  *(_QWORD *)(v22 + 64) = v16;
  v37 = v11;
  LODWORD(v38) = v32;
  v39 = v12;
  v40 = v31;
  v41 = v13;
  v42 = v14;
  v43 = v15;
  v44 = v16;
  v45 = v30;
  v46 = v29;
  v47 = v28;
  v48 = v17;
  v49 = v27;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  static _ViewListOutputs.staticList(_:inputs:staticCount:)((uint64_t)v50, &v37, 1, a3);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v50);
  if (ShouldRecordTree)
    AGSubgraphEndTreeElement();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  if ((v34 & 1) == 0)
  {
    LOBYTE(v37) = v36;
    specialized _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)(v26, v6, *((uint64_t *)&v6 + 1), v36, v25, v24, (unint64_t)&type metadata for ContainerRelativeShape, (uint64_t)type metadata accessor for ContainerRelativeShape.Type);
  }
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  return outlined consume of DynamicPropertyCache.Fields.Layout();
}

{
  uint64_t v3;
  __int128 v6;
  unsigned __int8 v7;
  unsigned int v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  int v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  int v26;
  char v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  int v32;
  int ShouldRecordTree;
  char v34;
  char v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  int v41;
  int v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  char v49;
  _QWORD v50[5];
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  char v56;

  static DynamicPropertyCache.fields(of:)(v3, (uint64_t)&v51);
  v6 = v51;
  v7 = v52;
  v8 = DWORD1(v52);
  v9 = *(_OWORD *)(a2 + 48);
  v53 = *(_OWORD *)(a2 + 32);
  v54 = v9;
  v55 = *(_OWORD *)(a2 + 64);
  v56 = *(_BYTE *)(a2 + 80);
  v10 = *(_OWORD *)(a2 + 16);
  v51 = *(_OWORD *)a2;
  v52 = v10;
  outlined retain of _ViewListInputs(a2);
  v36 = v7;
  LOBYTE(v37) = v7;
  v26 = a1;
  specialized static View.makeBody(view:inputs:fields:)(v50, (uint64_t)&v37, a1, (uint64_t)&v51, v6, *((uint64_t *)&v6 + 1), v7 | ((unint64_t)v8 << 32));
  v24 = v38;
  v25 = v37;
  v34 = v39;
  type metadata accessor for _ShapeView<ContainerRelativeShape._Inset, ForegroundStyle>();
  v11 = v51;
  v12 = v52;
  v13 = HIDWORD(v52);
  v31 = DWORD2(v52);
  v32 = DWORD2(v51);
  v14 = v53;
  v15 = DWORD1(v53);
  v16 = *((_QWORD *)&v53 + 1);
  v29 = *((_QWORD *)&v54 + 1);
  v30 = v54;
  v17 = *((_QWORD *)&v55 + 1);
  v27 = v56;
  v28 = v55;
  ShouldRecordTree = AGSubgraphShouldRecordTree();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  if (ShouldRecordTree)
    AGSubgraphBeginTreeElement();
  v18 = AGCreateWeakAttribute();
  v19 = v18;
  v20 = HIDWORD(v18);
  type metadata accessor for InterpolatedDisplayList<ResolvedStyledText>(0, &lazy cache variable for type metadata for UnaryElements<TypedUnaryViewGenerator<_ShapeView<ContainerRelativeShape._Inset, ForegroundStyle>>>, (uint64_t (*)(uint64_t))type metadata accessor for TypedUnaryViewGenerator<_ShapeView<ContainerRelativeShape._Inset, ForegroundStyle>>, (uint64_t)&protocol witness table for TypedUnaryViewGenerator<A>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UnaryElements);
  v50[3] = v21;
  v50[4] = &protocol witness table for UnaryElements<A>;
  v22 = swift_allocObject();
  v50[0] = v22;
  *(_DWORD *)(v22 + 16) = v19;
  *(_DWORD *)(v22 + 20) = v20;
  *(_QWORD *)(v22 + 24) = v11;
  *(_DWORD *)(v22 + 32) = v32;
  *(_QWORD *)(v22 + 40) = v12;
  *(_DWORD *)(v22 + 48) = v31;
  *(_DWORD *)(v22 + 52) = v13;
  *(_DWORD *)(v22 + 56) = v14;
  *(_DWORD *)(v22 + 60) = v15;
  *(_QWORD *)(v22 + 64) = v16;
  v37 = v11;
  LODWORD(v38) = v32;
  v39 = v12;
  v40 = v31;
  v41 = v13;
  v42 = v14;
  v43 = v15;
  v44 = v16;
  v45 = v30;
  v46 = v29;
  v47 = v28;
  v48 = v17;
  v49 = v27;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  static _ViewListOutputs.staticList(_:inputs:staticCount:)((uint64_t)v50, &v37, 1, a3);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v50);
  if (ShouldRecordTree)
    AGSubgraphEndTreeElement();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  if ((v34 & 1) == 0)
  {
    LOBYTE(v37) = v36;
    specialized _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)(v26, v6, *((uint64_t *)&v6 + 1), v36, v25, v24, (unint64_t)&type metadata for ContainerRelativeShape._Inset, (uint64_t)type metadata accessor for ContainerRelativeShape._Inset.Type);
  }
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  return outlined consume of DynamicPropertyCache.Fields.Layout();
}

{
  uint64_t v3;
  __int128 v7;
  unsigned __int8 v8;
  unsigned int v9;
  __int128 v10;
  __int128 v11;
  char v12;
  uint64_t v14;
  uint64_t v15;
  int v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  char v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  char v28;

  static DynamicPropertyCache.fields(of:)(v3, (uint64_t)&v23);
  v7 = v23;
  v8 = v24;
  v9 = DWORD1(v24);
  v10 = *(_OWORD *)(a2 + 48);
  v19 = *(_OWORD *)(a2 + 32);
  v20 = v10;
  v21 = *(_OWORD *)(a2 + 64);
  v22 = *(_BYTE *)(a2 + 80);
  v11 = *(_OWORD *)(a2 + 16);
  v17 = *(_OWORD *)a2;
  v18 = v11;
  outlined retain of _ViewListInputs(a2);
  LOBYTE(v23) = v8;
  specialized static View.makeBody(view:inputs:fields:)(&v16, (uint64_t)&v23, a1, (uint64_t)&v17, v7, *((uint64_t *)&v7 + 1), v8 | ((unint64_t)v9 << 32));
  v14 = *((_QWORD *)&v23 + 1);
  v15 = v23;
  v12 = v24;
  type metadata accessor for ModifiedContent<ModifiedContent<SummarySymbol, _ValueTransactionModifier<Bool>>, _EnvironmentKeyWritingModifier<Font?>>(0);
  v25 = v19;
  v26 = v20;
  v27 = v21;
  v28 = v22;
  v23 = v17;
  v24 = v18;
  if (AGSubgraphShouldRecordTree())
  {
    outlined retain of _ViewListInputs((uint64_t)&v23);
    AGSubgraphBeginTreeElement();
    specialized static ModifiedContent<>._makeViewList(view:inputs:)((uint64_t)&v23, a3);
    AGSubgraphEndTreeElement();
  }
  else
  {
    outlined retain of _ViewListInputs((uint64_t)&v23);
    specialized static ModifiedContent<>._makeViewList(view:inputs:)((uint64_t)&v23, a3);
  }
  outlined release of _ViewListInputs((uint64_t)&v23);
  if ((v12 & 1) == 0)
  {
    LOBYTE(v16) = v8;
    specialized _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)(a1, v7, *((uint64_t *)&v7 + 1), v8, v15, v14, (unint64_t)&type metadata for _IntelligenceSupport.AnimatingSummarySymbol, (uint64_t)type metadata accessor for _IntelligenceSupport.AnimatingSummarySymbol.Type);
  }
  outlined release of _ViewListInputs((uint64_t)&v23);
  return outlined consume of DynamicPropertyCache.Fields.Layout();
}

{
  uint64_t v3;
  __int128 v7;
  unsigned __int8 v8;
  unsigned int v9;
  __int128 v10;
  __int128 v11;
  char v12;
  uint64_t v14;
  uint64_t v15;
  int v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  char v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  char v28;

  static DynamicPropertyCache.fields(of:)(v3, (uint64_t)&v23);
  v7 = v23;
  v8 = v24;
  v9 = DWORD1(v24);
  v10 = *(_OWORD *)(a2 + 48);
  v19 = *(_OWORD *)(a2 + 32);
  v20 = v10;
  v21 = *(_OWORD *)(a2 + 64);
  v22 = *(_BYTE *)(a2 + 80);
  v11 = *(_OWORD *)(a2 + 16);
  v17 = *(_OWORD *)a2;
  v18 = v11;
  outlined retain of _ViewListInputs(a2);
  LOBYTE(v23) = v8;
  specialized static View.makeBody(view:inputs:fields:)(&v16, (uint64_t)&v23, a1, (uint64_t)&v17, v7, *((uint64_t *)&v7 + 1), v8 | ((unint64_t)v9 << 32));
  v14 = *((_QWORD *)&v23 + 1);
  v15 = v23;
  v12 = v24;
  type metadata accessor for ModifiedContent<Text, _OverlayPreferenceModifier<Text.LayoutKey, ForEach<Range<Int>, Int, ModifiedContent<ModifiedContent<SummarySymbol, _ValueTransactionModifier<Double>>, _OffsetEffect>>>>(0);
  v25 = v19;
  v26 = v20;
  v27 = v21;
  v28 = v22;
  v23 = v17;
  v24 = v18;
  if (AGSubgraphShouldRecordTree())
  {
    outlined retain of _ViewListInputs((uint64_t)&v23);
    AGSubgraphBeginTreeElement();
    specialized static ModifiedContent<>._makeViewList(view:inputs:)((uint64_t *)&v23, a3);
    AGSubgraphEndTreeElement();
  }
  else
  {
    outlined retain of _ViewListInputs((uint64_t)&v23);
    specialized static ModifiedContent<>._makeViewList(view:inputs:)((uint64_t *)&v23, a3);
  }
  outlined release of _ViewListInputs((uint64_t)&v23);
  if ((v12 & 1) == 0)
  {
    LOBYTE(v16) = v8;
    specialized _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)(a1, v7, *((uint64_t *)&v7 + 1), v8, v15, v14, (unint64_t)&type metadata for _IntelligenceSupport.AnimatingText, (uint64_t)type metadata accessor for _IntelligenceSupport.AnimatingText.Type);
  }
  outlined release of _ViewListInputs((uint64_t)&v23);
  return outlined consume of DynamicPropertyCache.Fields.Layout();
}

{
  uint64_t v3;
  __int128 v6;
  unsigned __int8 v7;
  unsigned int v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  int v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  int v26;
  char v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  int v32;
  int ShouldRecordTree;
  char v34;
  char v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  int v41;
  int v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  char v49;
  _QWORD v50[5];
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  char v56;

  static DynamicPropertyCache.fields(of:)(v3, (uint64_t)&v51);
  v6 = v51;
  v7 = v52;
  v8 = DWORD1(v52);
  v9 = *(_OWORD *)(a2 + 48);
  v53 = *(_OWORD *)(a2 + 32);
  v54 = v9;
  v55 = *(_OWORD *)(a2 + 64);
  v56 = *(_BYTE *)(a2 + 80);
  v10 = *(_OWORD *)(a2 + 16);
  v51 = *(_OWORD *)a2;
  v52 = v10;
  outlined retain of _ViewListInputs(a2);
  v36 = v7;
  LOBYTE(v37) = v7;
  v26 = a1;
  specialized static View.makeBody(view:inputs:fields:)(v50, (uint64_t)&v37, a1, (uint64_t)&v51, v6, *((uint64_t *)&v6 + 1), v7 | ((unint64_t)v8 << 32));
  v24 = v38;
  v25 = v37;
  v34 = v39;
  type metadata accessor for _ShapeView<Rectangle, EllipticalGradient>();
  v11 = v51;
  v12 = v52;
  v13 = HIDWORD(v52);
  v31 = DWORD2(v52);
  v32 = DWORD2(v51);
  v14 = v53;
  v15 = DWORD1(v53);
  v16 = *((_QWORD *)&v53 + 1);
  v29 = *((_QWORD *)&v54 + 1);
  v30 = v54;
  v17 = *((_QWORD *)&v55 + 1);
  v27 = v56;
  v28 = v55;
  ShouldRecordTree = AGSubgraphShouldRecordTree();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  if (ShouldRecordTree)
    AGSubgraphBeginTreeElement();
  v18 = AGCreateWeakAttribute();
  v19 = v18;
  v20 = HIDWORD(v18);
  type metadata accessor for InterpolatedDisplayList<ResolvedStyledText>(0, &lazy cache variable for type metadata for UnaryElements<TypedUnaryViewGenerator<_ShapeView<Rectangle, EllipticalGradient>>>, (uint64_t (*)(uint64_t))type metadata accessor for TypedUnaryViewGenerator<_ShapeView<Rectangle, EllipticalGradient>>, (uint64_t)&protocol witness table for TypedUnaryViewGenerator<A>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UnaryElements);
  v50[3] = v21;
  v50[4] = &protocol witness table for UnaryElements<A>;
  v22 = swift_allocObject();
  v50[0] = v22;
  *(_DWORD *)(v22 + 16) = v19;
  *(_DWORD *)(v22 + 20) = v20;
  *(_QWORD *)(v22 + 24) = v11;
  *(_DWORD *)(v22 + 32) = v32;
  *(_QWORD *)(v22 + 40) = v12;
  *(_DWORD *)(v22 + 48) = v31;
  *(_DWORD *)(v22 + 52) = v13;
  *(_DWORD *)(v22 + 56) = v14;
  *(_DWORD *)(v22 + 60) = v15;
  *(_QWORD *)(v22 + 64) = v16;
  v37 = v11;
  LODWORD(v38) = v32;
  v39 = v12;
  v40 = v31;
  v41 = v13;
  v42 = v14;
  v43 = v15;
  v44 = v16;
  v45 = v30;
  v46 = v29;
  v47 = v28;
  v48 = v17;
  v49 = v27;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  static _ViewListOutputs.staticList(_:inputs:staticCount:)((uint64_t)v50, &v37, 1, a3);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v50);
  if (ShouldRecordTree)
    AGSubgraphEndTreeElement();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  if ((v34 & 1) == 0)
  {
    LOBYTE(v37) = v36;
    specialized _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)(v26, v6, *((uint64_t *)&v6 + 1), v36, v25, v24, (unint64_t)&type metadata for EllipticalGradient, (uint64_t)type metadata accessor for EllipticalGradient.Type);
  }
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  return outlined consume of DynamicPropertyCache.Fields.Layout();
}

{
  uint64_t v3;
  __int128 v6;
  unsigned __int8 v7;
  unsigned int v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  int v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  int v26;
  char v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  int v32;
  int ShouldRecordTree;
  char v34;
  char v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  int v41;
  int v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  char v49;
  _QWORD v50[5];
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  char v56;

  static DynamicPropertyCache.fields(of:)(v3, (uint64_t)&v51);
  v6 = v51;
  v7 = v52;
  v8 = DWORD1(v52);
  v9 = *(_OWORD *)(a2 + 48);
  v53 = *(_OWORD *)(a2 + 32);
  v54 = v9;
  v55 = *(_OWORD *)(a2 + 64);
  v56 = *(_BYTE *)(a2 + 80);
  v10 = *(_OWORD *)(a2 + 16);
  v51 = *(_OWORD *)a2;
  v52 = v10;
  outlined retain of _ViewListInputs(a2);
  v36 = v7;
  LOBYTE(v37) = v7;
  v26 = a1;
  specialized static View.makeBody(view:inputs:fields:)(v50, (uint64_t)&v37, a1, (uint64_t)&v51, v6, *((uint64_t *)&v6 + 1), v7 | ((unint64_t)v8 << 32));
  v24 = v38;
  v25 = v37;
  v34 = v39;
  type metadata accessor for _ShapeView<RoundedRectangle, ForegroundStyle>();
  v11 = v51;
  v12 = v52;
  v13 = HIDWORD(v52);
  v31 = DWORD2(v52);
  v32 = DWORD2(v51);
  v14 = v53;
  v15 = DWORD1(v53);
  v16 = *((_QWORD *)&v53 + 1);
  v29 = *((_QWORD *)&v54 + 1);
  v30 = v54;
  v17 = *((_QWORD *)&v55 + 1);
  v27 = v56;
  v28 = v55;
  ShouldRecordTree = AGSubgraphShouldRecordTree();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  if (ShouldRecordTree)
    AGSubgraphBeginTreeElement();
  v18 = AGCreateWeakAttribute();
  v19 = v18;
  v20 = HIDWORD(v18);
  type metadata accessor for InterpolatedDisplayList<ResolvedStyledText>(0, &lazy cache variable for type metadata for UnaryElements<TypedUnaryViewGenerator<_ShapeView<RoundedRectangle, ForegroundStyle>>>, (uint64_t (*)(uint64_t))type metadata accessor for TypedUnaryViewGenerator<_ShapeView<RoundedRectangle, ForegroundStyle>>, (uint64_t)&protocol witness table for TypedUnaryViewGenerator<A>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UnaryElements);
  v50[3] = v21;
  v50[4] = &protocol witness table for UnaryElements<A>;
  v22 = swift_allocObject();
  v50[0] = v22;
  *(_DWORD *)(v22 + 16) = v19;
  *(_DWORD *)(v22 + 20) = v20;
  *(_QWORD *)(v22 + 24) = v11;
  *(_DWORD *)(v22 + 32) = v32;
  *(_QWORD *)(v22 + 40) = v12;
  *(_DWORD *)(v22 + 48) = v31;
  *(_DWORD *)(v22 + 52) = v13;
  *(_DWORD *)(v22 + 56) = v14;
  *(_DWORD *)(v22 + 60) = v15;
  *(_QWORD *)(v22 + 64) = v16;
  v37 = v11;
  LODWORD(v38) = v32;
  v39 = v12;
  v40 = v31;
  v41 = v13;
  v42 = v14;
  v43 = v15;
  v44 = v16;
  v45 = v30;
  v46 = v29;
  v47 = v28;
  v48 = v17;
  v49 = v27;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  static _ViewListOutputs.staticList(_:inputs:staticCount:)((uint64_t)v50, &v37, 1, a3);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v50);
  if (ShouldRecordTree)
    AGSubgraphEndTreeElement();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  if ((v34 & 1) == 0)
  {
    LOBYTE(v37) = v36;
    specialized _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)(v26, v6, *((uint64_t *)&v6 + 1), v36, v25, v24, (unint64_t)&type metadata for RoundedRectangle, (uint64_t)type metadata accessor for RoundedRectangle.Type);
  }
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  return outlined consume of DynamicPropertyCache.Fields.Layout();
}

{
  uint64_t v3;
  __int128 v6;
  unsigned __int8 v7;
  unsigned int v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  int v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  int v26;
  char v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  int v32;
  int ShouldRecordTree;
  char v34;
  char v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  int v41;
  int v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  char v49;
  _QWORD v50[5];
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  char v56;

  static DynamicPropertyCache.fields(of:)(v3, (uint64_t)&v51);
  v6 = v51;
  v7 = v52;
  v8 = DWORD1(v52);
  v9 = *(_OWORD *)(a2 + 48);
  v53 = *(_OWORD *)(a2 + 32);
  v54 = v9;
  v55 = *(_OWORD *)(a2 + 64);
  v56 = *(_BYTE *)(a2 + 80);
  v10 = *(_OWORD *)(a2 + 16);
  v51 = *(_OWORD *)a2;
  v52 = v10;
  outlined retain of _ViewListInputs(a2);
  v36 = v7;
  LOBYTE(v37) = v7;
  v26 = a1;
  specialized static View.makeBody(view:inputs:fields:)(v50, (uint64_t)&v37, a1, (uint64_t)&v51, v6, *((uint64_t *)&v6 + 1), v7 | ((unint64_t)v8 << 32));
  v24 = v38;
  v25 = v37;
  v34 = v39;
  type metadata accessor for _ShapeView<RoundedRectangle._Inset, ForegroundStyle>();
  v11 = v51;
  v12 = v52;
  v13 = HIDWORD(v52);
  v31 = DWORD2(v52);
  v32 = DWORD2(v51);
  v14 = v53;
  v15 = DWORD1(v53);
  v16 = *((_QWORD *)&v53 + 1);
  v29 = *((_QWORD *)&v54 + 1);
  v30 = v54;
  v17 = *((_QWORD *)&v55 + 1);
  v27 = v56;
  v28 = v55;
  ShouldRecordTree = AGSubgraphShouldRecordTree();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  if (ShouldRecordTree)
    AGSubgraphBeginTreeElement();
  v18 = AGCreateWeakAttribute();
  v19 = v18;
  v20 = HIDWORD(v18);
  type metadata accessor for InterpolatedDisplayList<ResolvedStyledText>(0, &lazy cache variable for type metadata for UnaryElements<TypedUnaryViewGenerator<_ShapeView<RoundedRectangle._Inset, ForegroundStyle>>>, (uint64_t (*)(uint64_t))type metadata accessor for TypedUnaryViewGenerator<_ShapeView<RoundedRectangle._Inset, ForegroundStyle>>, (uint64_t)&protocol witness table for TypedUnaryViewGenerator<A>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UnaryElements);
  v50[3] = v21;
  v50[4] = &protocol witness table for UnaryElements<A>;
  v22 = swift_allocObject();
  v50[0] = v22;
  *(_DWORD *)(v22 + 16) = v19;
  *(_DWORD *)(v22 + 20) = v20;
  *(_QWORD *)(v22 + 24) = v11;
  *(_DWORD *)(v22 + 32) = v32;
  *(_QWORD *)(v22 + 40) = v12;
  *(_DWORD *)(v22 + 48) = v31;
  *(_DWORD *)(v22 + 52) = v13;
  *(_DWORD *)(v22 + 56) = v14;
  *(_DWORD *)(v22 + 60) = v15;
  *(_QWORD *)(v22 + 64) = v16;
  v37 = v11;
  LODWORD(v38) = v32;
  v39 = v12;
  v40 = v31;
  v41 = v13;
  v42 = v14;
  v43 = v15;
  v44 = v16;
  v45 = v30;
  v46 = v29;
  v47 = v28;
  v48 = v17;
  v49 = v27;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  static _ViewListOutputs.staticList(_:inputs:staticCount:)((uint64_t)v50, &v37, 1, a3);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v50);
  if (ShouldRecordTree)
    AGSubgraphEndTreeElement();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  if ((v34 & 1) == 0)
  {
    LOBYTE(v37) = v36;
    specialized _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)(v26, v6, *((uint64_t *)&v6 + 1), v36, v25, v24, (unint64_t)&type metadata for RoundedRectangle._Inset, (uint64_t)type metadata accessor for RoundedRectangle._Inset.Type);
  }
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  return outlined consume of DynamicPropertyCache.Fields.Layout();
}

{
  uint64_t v3;
  __int128 v6;
  unsigned __int8 v7;
  unsigned int v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  int v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  int v26;
  char v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  int v32;
  int ShouldRecordTree;
  char v34;
  char v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  int v41;
  int v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  char v49;
  _QWORD v50[5];
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  char v56;

  static DynamicPropertyCache.fields(of:)(v3, (uint64_t)&v51);
  v6 = v51;
  v7 = v52;
  v8 = DWORD1(v52);
  v9 = *(_OWORD *)(a2 + 48);
  v53 = *(_OWORD *)(a2 + 32);
  v54 = v9;
  v55 = *(_OWORD *)(a2 + 64);
  v56 = *(_BYTE *)(a2 + 80);
  v10 = *(_OWORD *)(a2 + 16);
  v51 = *(_OWORD *)a2;
  v52 = v10;
  outlined retain of _ViewListInputs(a2);
  v36 = v7;
  LOBYTE(v37) = v7;
  v26 = a1;
  specialized static View.makeBody(view:inputs:fields:)(v50, (uint64_t)&v37, a1, (uint64_t)&v51, v6, *((uint64_t *)&v6 + 1), v7 | ((unint64_t)v8 << 32));
  v24 = v38;
  v25 = v37;
  v34 = v39;
  type metadata accessor for _ShapeView<Rectangle, AngularGradient>();
  v11 = v51;
  v12 = v52;
  v13 = HIDWORD(v52);
  v31 = DWORD2(v52);
  v32 = DWORD2(v51);
  v14 = v53;
  v15 = DWORD1(v53);
  v16 = *((_QWORD *)&v53 + 1);
  v29 = *((_QWORD *)&v54 + 1);
  v30 = v54;
  v17 = *((_QWORD *)&v55 + 1);
  v27 = v56;
  v28 = v55;
  ShouldRecordTree = AGSubgraphShouldRecordTree();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  if (ShouldRecordTree)
    AGSubgraphBeginTreeElement();
  v18 = AGCreateWeakAttribute();
  v19 = v18;
  v20 = HIDWORD(v18);
  type metadata accessor for InterpolatedDisplayList<ResolvedStyledText>(0, &lazy cache variable for type metadata for UnaryElements<TypedUnaryViewGenerator<_ShapeView<Rectangle, AngularGradient>>>, (uint64_t (*)(uint64_t))type metadata accessor for TypedUnaryViewGenerator<_ShapeView<Rectangle, AngularGradient>>, (uint64_t)&protocol witness table for TypedUnaryViewGenerator<A>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UnaryElements);
  v50[3] = v21;
  v50[4] = &protocol witness table for UnaryElements<A>;
  v22 = swift_allocObject();
  v50[0] = v22;
  *(_DWORD *)(v22 + 16) = v19;
  *(_DWORD *)(v22 + 20) = v20;
  *(_QWORD *)(v22 + 24) = v11;
  *(_DWORD *)(v22 + 32) = v32;
  *(_QWORD *)(v22 + 40) = v12;
  *(_DWORD *)(v22 + 48) = v31;
  *(_DWORD *)(v22 + 52) = v13;
  *(_DWORD *)(v22 + 56) = v14;
  *(_DWORD *)(v22 + 60) = v15;
  *(_QWORD *)(v22 + 64) = v16;
  v37 = v11;
  LODWORD(v38) = v32;
  v39 = v12;
  v40 = v31;
  v41 = v13;
  v42 = v14;
  v43 = v15;
  v44 = v16;
  v45 = v30;
  v46 = v29;
  v47 = v28;
  v48 = v17;
  v49 = v27;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  static _ViewListOutputs.staticList(_:inputs:staticCount:)((uint64_t)v50, &v37, 1, a3);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v50);
  if (ShouldRecordTree)
    AGSubgraphEndTreeElement();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  if ((v34 & 1) == 0)
  {
    LOBYTE(v37) = v36;
    specialized _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)(v26, v6, *((uint64_t *)&v6 + 1), v36, v25, v24, (unint64_t)&type metadata for AngularGradient, (uint64_t)type metadata accessor for AngularGradient.Type);
  }
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  return outlined consume of DynamicPropertyCache.Fields.Layout();
}

{
  uint64_t v3;
  __int128 v6;
  unsigned __int8 v7;
  unsigned int v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  int v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  int v26;
  char v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  int v32;
  int ShouldRecordTree;
  char v34;
  char v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  int v41;
  int v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  char v49;
  _QWORD v50[5];
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  char v56;

  static DynamicPropertyCache.fields(of:)(v3, (uint64_t)&v51);
  v6 = v51;
  v7 = v52;
  v8 = DWORD1(v52);
  v9 = *(_OWORD *)(a2 + 48);
  v53 = *(_OWORD *)(a2 + 32);
  v54 = v9;
  v55 = *(_OWORD *)(a2 + 64);
  v56 = *(_BYTE *)(a2 + 80);
  v10 = *(_OWORD *)(a2 + 16);
  v51 = *(_OWORD *)a2;
  v52 = v10;
  outlined retain of _ViewListInputs(a2);
  v36 = v7;
  LOBYTE(v37) = v7;
  v26 = a1;
  specialized static View.makeBody(view:inputs:fields:)(v50, (uint64_t)&v37, a1, (uint64_t)&v51, v6, *((uint64_t *)&v6 + 1), v7 | ((unint64_t)v8 << 32));
  v24 = v38;
  v25 = v37;
  v34 = v39;
  type metadata accessor for _ShapeView<Rectangle, RadialGradient>();
  v11 = v51;
  v12 = v52;
  v13 = HIDWORD(v52);
  v31 = DWORD2(v52);
  v32 = DWORD2(v51);
  v14 = v53;
  v15 = DWORD1(v53);
  v16 = *((_QWORD *)&v53 + 1);
  v29 = *((_QWORD *)&v54 + 1);
  v30 = v54;
  v17 = *((_QWORD *)&v55 + 1);
  v27 = v56;
  v28 = v55;
  ShouldRecordTree = AGSubgraphShouldRecordTree();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  if (ShouldRecordTree)
    AGSubgraphBeginTreeElement();
  v18 = AGCreateWeakAttribute();
  v19 = v18;
  v20 = HIDWORD(v18);
  type metadata accessor for InterpolatedDisplayList<ResolvedStyledText>(0, &lazy cache variable for type metadata for UnaryElements<TypedUnaryViewGenerator<_ShapeView<Rectangle, RadialGradient>>>, (uint64_t (*)(uint64_t))type metadata accessor for TypedUnaryViewGenerator<_ShapeView<Rectangle, RadialGradient>>, (uint64_t)&protocol witness table for TypedUnaryViewGenerator<A>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UnaryElements);
  v50[3] = v21;
  v50[4] = &protocol witness table for UnaryElements<A>;
  v22 = swift_allocObject();
  v50[0] = v22;
  *(_DWORD *)(v22 + 16) = v19;
  *(_DWORD *)(v22 + 20) = v20;
  *(_QWORD *)(v22 + 24) = v11;
  *(_DWORD *)(v22 + 32) = v32;
  *(_QWORD *)(v22 + 40) = v12;
  *(_DWORD *)(v22 + 48) = v31;
  *(_DWORD *)(v22 + 52) = v13;
  *(_DWORD *)(v22 + 56) = v14;
  *(_DWORD *)(v22 + 60) = v15;
  *(_QWORD *)(v22 + 64) = v16;
  v37 = v11;
  LODWORD(v38) = v32;
  v39 = v12;
  v40 = v31;
  v41 = v13;
  v42 = v14;
  v43 = v15;
  v44 = v16;
  v45 = v30;
  v46 = v29;
  v47 = v28;
  v48 = v17;
  v49 = v27;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  static _ViewListOutputs.staticList(_:inputs:staticCount:)((uint64_t)v50, &v37, 1, a3);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v50);
  if (ShouldRecordTree)
    AGSubgraphEndTreeElement();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  if ((v34 & 1) == 0)
  {
    LOBYTE(v37) = v36;
    specialized _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)(v26, v6, *((uint64_t *)&v6 + 1), v36, v25, v24, (unint64_t)&type metadata for RadialGradient, (uint64_t)type metadata accessor for RadialGradient.Type);
  }
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  return outlined consume of DynamicPropertyCache.Fields.Layout();
}

{
  uint64_t v3;
  __int128 v6;
  unsigned __int8 v7;
  unsigned int v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  int v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  int v26;
  char v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  int v32;
  int ShouldRecordTree;
  char v34;
  char v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  int v41;
  int v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  char v49;
  _QWORD v50[5];
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  char v56;

  static DynamicPropertyCache.fields(of:)(v3, (uint64_t)&v51);
  v6 = v51;
  v7 = v52;
  v8 = DWORD1(v52);
  v9 = *(_OWORD *)(a2 + 48);
  v53 = *(_OWORD *)(a2 + 32);
  v54 = v9;
  v55 = *(_OWORD *)(a2 + 64);
  v56 = *(_BYTE *)(a2 + 80);
  v10 = *(_OWORD *)(a2 + 16);
  v51 = *(_OWORD *)a2;
  v52 = v10;
  outlined retain of _ViewListInputs(a2);
  v36 = v7;
  LOBYTE(v37) = v7;
  v26 = a1;
  specialized static View.makeBody(view:inputs:fields:)(v50, (uint64_t)&v37, a1, (uint64_t)&v51, v6, *((uint64_t *)&v6 + 1), v7 | ((unint64_t)v8 << 32));
  v24 = v38;
  v25 = v37;
  v34 = v39;
  type metadata accessor for _ShapeView<Rectangle, LinearGradient>();
  v11 = v51;
  v12 = v52;
  v13 = HIDWORD(v52);
  v31 = DWORD2(v52);
  v32 = DWORD2(v51);
  v14 = v53;
  v15 = DWORD1(v53);
  v16 = *((_QWORD *)&v53 + 1);
  v29 = *((_QWORD *)&v54 + 1);
  v30 = v54;
  v17 = *((_QWORD *)&v55 + 1);
  v27 = v56;
  v28 = v55;
  ShouldRecordTree = AGSubgraphShouldRecordTree();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  if (ShouldRecordTree)
    AGSubgraphBeginTreeElement();
  v18 = AGCreateWeakAttribute();
  v19 = v18;
  v20 = HIDWORD(v18);
  type metadata accessor for InterpolatedDisplayList<ResolvedStyledText>(0, &lazy cache variable for type metadata for UnaryElements<TypedUnaryViewGenerator<_ShapeView<Rectangle, LinearGradient>>>, (uint64_t (*)(uint64_t))type metadata accessor for TypedUnaryViewGenerator<_ShapeView<Rectangle, LinearGradient>>, (uint64_t)&protocol witness table for TypedUnaryViewGenerator<A>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UnaryElements);
  v50[3] = v21;
  v50[4] = &protocol witness table for UnaryElements<A>;
  v22 = swift_allocObject();
  v50[0] = v22;
  *(_DWORD *)(v22 + 16) = v19;
  *(_DWORD *)(v22 + 20) = v20;
  *(_QWORD *)(v22 + 24) = v11;
  *(_DWORD *)(v22 + 32) = v32;
  *(_QWORD *)(v22 + 40) = v12;
  *(_DWORD *)(v22 + 48) = v31;
  *(_DWORD *)(v22 + 52) = v13;
  *(_DWORD *)(v22 + 56) = v14;
  *(_DWORD *)(v22 + 60) = v15;
  *(_QWORD *)(v22 + 64) = v16;
  v37 = v11;
  LODWORD(v38) = v32;
  v39 = v12;
  v40 = v31;
  v41 = v13;
  v42 = v14;
  v43 = v15;
  v44 = v16;
  v45 = v30;
  v46 = v29;
  v47 = v28;
  v48 = v17;
  v49 = v27;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  static _ViewListOutputs.staticList(_:inputs:staticCount:)((uint64_t)v50, &v37, 1, a3);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v50);
  if (ShouldRecordTree)
    AGSubgraphEndTreeElement();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  if ((v34 & 1) == 0)
  {
    LOBYTE(v37) = v36;
    specialized _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)(v26, v6, *((uint64_t *)&v6 + 1), v36, v25, v24, (unint64_t)&type metadata for LinearGradient, (uint64_t)type metadata accessor for LinearGradient.Type);
  }
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  return outlined consume of DynamicPropertyCache.Fields.Layout();
}

void specialized static View.makeViewList(view:inputs:)(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  char v5;

  static DynamicPropertyCache.fields(of:)(MEMORY[0x24BEE4078], (uint64_t)&v4);
  v3 = v5;
  outlined retain of _ViewListInputs(a2);
  LOBYTE(v4) = v3;
  specialized static View.makeBody(view:inputs:fields:)();
}

{
  uint64_t v2;
  char v4;
  uint64_t v5;
  char v6;

  static DynamicPropertyCache.fields(of:)(v2, (uint64_t)&v5);
  v4 = v6;
  outlined retain of _ViewListInputs(a2);
  LOBYTE(v5) = v4;
  specialized static View.makeBody(view:inputs:fields:)();
}

void sub_234D9E9F8()
{
  uint64_t v0;
  int ShouldRecordTree;
  unsigned int v2;

  ShouldRecordTree = AGSubgraphShouldRecordTree();
  outlined retain of _ViewListInputs(v0);
  if (ShouldRecordTree)
  {
    AGSubgraphBeginTreeElement();
    specialized static View.makeViewList(view:inputs:)(v2, v0);
  }
  specialized static View.makeViewList(view:inputs:)(v2, v0);
}

void sub_234D9EB4C()
{
  uint64_t v0;
  int ShouldRecordTree;
  unsigned int v2;

  ShouldRecordTree = AGSubgraphShouldRecordTree();
  outlined retain of _ViewListInputs(v0);
  if (ShouldRecordTree)
  {
    AGSubgraphBeginTreeElement();
    specialized static View.makeViewList(view:inputs:)(v2, v0);
  }
  specialized static View.makeViewList(view:inputs:)(v2, v0);
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay7SwiftUI20DynamicPropertyCacheV12TaggedFieldsVG_Si3tag_AF01_fG6BufferV5linksts5NeverOTg503_s7d5UI22_fgl5V9addj37_9container6inputs10baseOffsetyAA0cD5h65V0G0V_AA11_GraphValueVyxGAA01_M6InputsVzSitlFSi3tag_AC5linkstAI06iW51VXEfU_AA16SingleTapGestureVyAA13TappableEventVG_TG5AF01_yZ0VyAF16SingleTapGestureVyAF13TappableEventVGGAF01_Y6InputsVTf1cn_n(uint64_t a1, int a2, uint64_t a3)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  int64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v3 = *(_QWORD *)(a1 + 16);
  v4 = MEMORY[0x24BEE4AF8];
  if (v3)
  {
    v32 = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3, 0);
    v8 = 0;
    v4 = v32;
    v25 = v3;
    v26 = a1 + 32;
    do
    {
      v9 = (uint64_t *)(v26 + 16 * v8);
      v10 = *v9;
      v11 = v9[1];
      v12 = *(_QWORD *)(v11 + 16);
      if (v12)
      {
        v27 = *v9;
        swift_bridgeObjectRetain_n();
        v13 = v11 + 40;
        v14 = v12;
        do
        {
          (*(void (**)(void))(*(_QWORD *)v13 + 16))();
          v13 += 32;
          --v14;
        }
        while (v14);
        v30 = 0;
        v31 = 0;
        outlined copy of DynamicPropertyCache.Fields.Layout();
        type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for SingleTapGesture<TappableEvent>, (uint64_t)&type metadata for TappableEvent, (uint64_t)&protocol witness table for TappableEvent, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for SingleTapGesture);
        v16 = v15;
        v17 = (uint64_t *)(v11 + 48);
        do
        {
          v18 = *(v17 - 1);
          v19 = *v17;
          v17 += 4;
          v29 = a2;
          (*(void (**)(uint64_t *, int *, uint64_t, uint64_t, uint64_t))(v18 + 8))(&v30, &v29, v19, a3, v16);
          --v12;
        }
        while (v12);
        swift_bridgeObjectRelease_n();
        v12 = v30;
        v20 = v31;
        v3 = v25;
        v10 = v27;
      }
      else
      {
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRelease_n();
        v20 = 0;
      }
      v32 = v4;
      v22 = *(_QWORD *)(v4 + 16);
      v21 = *(_QWORD *)(v4 + 24);
      if (v22 >= v21 >> 1)
      {
        v28 = v20;
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v21 > 1, v22 + 1, 1);
        v20 = v28;
        v4 = v32;
      }
      ++v8;
      *(_QWORD *)(v4 + 16) = v22 + 1;
      v23 = (_QWORD *)(v4 + 24 * v22);
      v23[4] = v10;
      v23[5] = v12;
      v23[6] = v20;
    }
    while (v8 != v3);
  }
  return v4;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay7SwiftUI20DynamicPropertyCacheV12TaggedFieldsVG_Si3tag_AF01_fG6BufferV5linksts5NeverOTg503_s7d5UI22_fgl5V9addj37_9container6inputs10baseOffsetyAA0cD5h65V0G0V_AA11_GraphValueVyxGAA01_M6InputsVzSitlFSi3tag_AC5linkstAI06iW65VXEfU_AA13SummarySymbol33_5039765D26D33F565D3CDFCA69D19B23LLV_TG5AF01_yZ0VyAF13SummarySymbol33_5039765D26D33F565D3CDFCA69D19B23LLVGAF01_Y6InputsVTf1cn_nTm(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int64_t v6;
  uint64_t result;
  int64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  int64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v6 = *(_QWORD *)(a1 + 16);
  result = MEMORY[0x24BEE4AF8];
  if (v6)
  {
    v26 = v6;
    v34 = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v6, 0);
    v11 = v26;
    v12 = 0;
    result = v34;
    v27 = a1 + 32;
    do
    {
      v13 = (uint64_t *)(v27 + 16 * v12);
      v14 = v13[1];
      v28 = *v13;
      v29 = result;
      v15 = *(_QWORD *)(v14 + 16);
      if (v15)
      {
        swift_bridgeObjectRetain_n();
        v16 = v14 + 40;
        v17 = v15;
        do
        {
          (*(void (**)(void))(*(_QWORD *)v16 + 16))();
          v16 += 32;
          --v17;
        }
        while (v17);
        v32 = 0;
        v33 = 0;
        outlined copy of DynamicPropertyCache.Fields.Layout();
        v18 = (uint64_t *)(v14 + 48);
        do
        {
          v19 = *(v18 - 1);
          v20 = *v18;
          v18 += 4;
          v31 = a2;
          (*(void (**)(uint64_t *, int *, uint64_t, uint64_t, uint64_t))(v19 + 8))(&v32, &v31, v20, a3, a5);
          --v15;
        }
        while (v15);
        swift_bridgeObjectRelease_n();
        v21 = v32;
        v22 = v33;
        v11 = v26;
      }
      else
      {
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRelease_n();
        v21 = 0;
        v22 = 0;
      }
      result = v29;
      v34 = v29;
      v24 = *(_QWORD *)(v29 + 16);
      v23 = *(_QWORD *)(v29 + 24);
      if (v24 >= v23 >> 1)
      {
        v30 = v22;
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v23 > 1, v24 + 1, 1);
        v22 = v30;
        v11 = v26;
        result = v34;
      }
      ++v12;
      *(_QWORD *)(result + 16) = v24 + 1;
      v25 = (_QWORD *)(result + 24 * v24);
      v25[4] = v28;
      v25[5] = v21;
      v25[6] = v22;
    }
    while (v12 != v11);
  }
  return result;
}

uint64_t protocol witness for static _VariadicView_ViewRoot._makeViewList(root:inputs:body:) in conformance _VStackLayout@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v6;
  int v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  unint64_t v11;
  int v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v19;
  int v20;
  int v21;
  char v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  int v29;
  uint64_t v30;
  int v31;
  int v32;
  int v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  char v40;
  _QWORD v41[6];

  v6 = *(_QWORD *)a1;
  v7 = *(_DWORD *)(a1 + 8);
  v8 = *(_QWORD *)(a1 + 16);
  v9 = *(_DWORD *)(a1 + 28);
  v20 = *(_DWORD *)(a1 + 32);
  v21 = *(_DWORD *)(a1 + 24);
  v19 = *(_DWORD *)(a1 + 36);
  v10 = *(_QWORD *)(a1 + 40);
  v25 = *(_QWORD *)(a1 + 56);
  v26 = *(_QWORD *)(a1 + 48);
  v24 = *(_DWORD *)(a1 + 64);
  v23 = *(_QWORD *)(a1 + 72);
  v22 = *(_BYTE *)(a1 + 80);
  v11 = AGCreateWeakAttribute();
  v12 = v11;
  v13 = HIDWORD(v11);
  v14 = swift_allocObject();
  *(_DWORD *)(v14 + 16) = v12;
  *(_DWORD *)(v14 + 20) = v13;
  *(_QWORD *)(v14 + 24) = v4;
  *(_QWORD *)(v14 + 32) = a2;
  *(_QWORD *)(v14 + 40) = a3;
  type metadata accessor for UnaryElements<BodyUnaryViewGenerator<_ZStackLayout>>(0, &lazy cache variable for type metadata for UnaryElements<BodyUnaryViewGenerator<_VStackLayout>>, &lazy cache variable for type metadata for BodyUnaryViewGenerator<_VStackLayout>, (uint64_t)&type metadata for _VStackLayout);
  v41[3] = v15;
  v41[4] = &protocol witness table for UnaryElements<A>;
  v16 = swift_allocObject();
  v41[0] = v16;
  *(_QWORD *)(v16 + 16) = partial apply for specialized closure #1 in static _VariadicView_UnaryViewRoot._makeViewList(root:inputs:body:);
  *(_QWORD *)(v16 + 24) = v14;
  *(_QWORD *)(v16 + 32) = v6;
  *(_DWORD *)(v16 + 40) = v7;
  *(_QWORD *)(v16 + 48) = v8;
  *(_DWORD *)(v16 + 56) = v21;
  *(_DWORD *)(v16 + 60) = v9;
  *(_DWORD *)(v16 + 64) = v20;
  *(_DWORD *)(v16 + 68) = v19;
  *(_QWORD *)(v16 + 72) = v10;
  v28 = v6;
  v29 = v7;
  v30 = v8;
  v31 = v21;
  v32 = v9;
  v33 = v20;
  v34 = v19;
  v35 = v10;
  v36 = v26;
  v37 = v25;
  v38 = v24;
  v39 = v23;
  v40 = v22;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  static _ViewListOutputs.staticList(_:inputs:staticCount:)((uint64_t)v41, &v28, 1, a4);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v41);
  return swift_release();
}

void protocol witness for _VariadicView_ViewRoot.body(children:) in conformance _VStackLayout(uint64_t a1)
{
  specialized _VariadicView_ViewRoot<>.body(children:)(a1, 0x4C6B63617453565FLL);
}

uint64_t protocol witness for static _VariadicView_AnyImplicitRoot.visitType<A>(visitor:) in conformance _VStackLayout(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return static _VariadicView_ImplicitRoot.visitType<A>(visitor:)(a1, a4, a2, (uint64_t)&protocol witness table for _VStackLayout, a3);
}

uint64_t specialized _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)(int a1, unint64_t a2, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  return specialized _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)(a1, a2, a3, a4, a5, a6, (uint64_t)&type metadata for Rectangle.AsymmetricalInset, (void (*)(_QWORD))type metadata accessor for Rectangle.AsymmetricalInset.Type);
}

{
  return specialized _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)(a1, a2, a3, a4, a5, a6, (uint64_t)&type metadata for CombinedContentShape, (void (*)(_QWORD))type metadata accessor for CombinedContentShape.Type);
}

{
  return specialized _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)(a1, a2, a3, a4, a5, a6, (uint64_t)&type metadata for SummarySymbol, (void (*)(_QWORD))type metadata accessor for SummarySymbol.Type);
}

{
  return specialized _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)(a1, a2, a3, a4, a5, a6, MEMORY[0x24BEE4078], (void (*)(_QWORD))type metadata accessor for Never.Type);
}

{
  return specialized _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)(a1, a2, a3, a4, a5, a6, (uint64_t)&type metadata for ViewListArchivedAnimation.Effect, (void (*)(_QWORD))type metadata accessor for ViewListArchivedAnimation.Effect.Type);
}

uint64_t specialized _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)(int a1, unint64_t a2, uint64_t a3, char a4, uint64_t a5, unint64_t a6, uint64_t a7, void (*a8)(_QWORD))
{
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t result;
  void (*v19)(_QWORD);
  uint64_t v20;
  uint64_t v21;
  id v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  __int128 v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  int v41;
  uint64_t v42;
  void (*v43)(_QWORD);
  uint64_t Counter;
  const char *v45;
  uint64_t v46;
  int v47;
  char *v48;
  uint64_t v49;
  unint64_t v50;
  char v51;
  uint64_t v52;

  LOBYTE(v12) = a4;
  v50 = a2;
  LODWORD(v13) = a1;
  v14 = (_QWORD *)type metadata accessor for OSSignpostID();
  v15 = *(v14 - 1);
  MEMORY[0x24BDAC7A8](v14);
  v17 = (char *)&v37 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  static os_signpost_type_t.event.getter();
  result = kdebug_is_enabled();
  if (!(_DWORD)result)
    return result;
  v48 = v17;
  if (one-time initialization token for _signpostLog != -1)
LABEL_24:
    swift_once();
  result = OS_os_log.signpostsEnabled.getter();
  if ((result & 1) == 0)
    return result;
  v52 = a7;
  a8(0);
  v46 = String.init<A>(describing:)();
  a8 = v19;
  v45 = specialized static Tracing.libraryName(defining:)();
  v21 = v20;
  v22 = (id)AGGraphGetAttributeGraph();
  Counter = AGGraphGetCounter();

  if ((v12 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  v42 = v21;
  v43 = a8;
  v39 = v15;
  v40 = v14;
  v41 = v13;
  v49 = a5;
  v23 = HIDWORD(a6);
  v51 = 0;
  a6 = v50;
  outlined copy of DynamicPropertyCache.Fields.Layout();
  if (!(_DWORD)v23)
  {
LABEL_19:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  v24 = 0;
  LODWORD(a7) = 0;
  v14 = (_QWORD *)(a6 + 48);
  a5 = (v23 - 1);
  v37 = xmmword_23529BF50;
  v38 = a5;
  while (v49)
  {
    v15 = v49 + (int)a7;
    if ((_DWORD)a5 == (_DWORD)v24)
      a7 = 0;
    else
      a7 = (*(_DWORD *)(v15 + 8) + a7);
    v25 = *(_QWORD *)(a6 + 16);
    if (v24 == v25)
      goto LABEL_19;
    if (v24 >= v25)
    {
      __break(1u);
      goto LABEL_24;
    }
    a8 = (void (*)(_QWORD))*(v14 - 2);
    v13 = *v14;
    LODWORD(v12) = static os_signpost_type_t.event.getter();
    static os_signpost_type_t.event.getter();
    if (kdebug_is_enabled() && (OS_os_log.signpostsEnabled.getter() & 1) != 0)
    {
      v47 = v12;
      v26 = v48;
      static OSSignpostID.exclusive.getter();
      type metadata accessor for _ContiguousArrayStorage<CVarArg>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<CVarArg>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
      v27 = swift_allocObject();
      *(_OWORD *)(v27 + 16) = v37;
      v28 = _typeName(_:qualified:)();
      v30 = v29;
      v12 = MEMORY[0x24BEE0D00];
      *(_QWORD *)(v27 + 56) = MEMORY[0x24BEE0D00];
      v31 = lazy protocol witness table accessor for type String and conformance String();
      *(_QWORD *)(v27 + 32) = v28;
      *(_QWORD *)(v27 + 40) = v30;
      v32 = MEMORY[0x24BEE1E88];
      *(_QWORD *)(v27 + 96) = MEMORY[0x24BEE1E88];
      v33 = MEMORY[0x24BEE1ED8];
      *(_QWORD *)(v27 + 64) = v31;
      *(_QWORD *)(v27 + 72) = v15;
      *(_QWORD *)(v27 + 136) = v12;
      *(_QWORD *)(v27 + 144) = v31;
      v34 = v46;
      *(_QWORD *)(v27 + 104) = v33;
      *(_QWORD *)(v27 + 112) = v34;
      v35 = v42;
      *(_QWORD *)(v27 + 120) = v43;
      *(_QWORD *)(v27 + 176) = v12;
      *(_QWORD *)(v27 + 184) = v31;
      *(_QWORD *)(v27 + 152) = v45;
      *(_QWORD *)(v27 + 160) = v35;
      *(_QWORD *)(v27 + 216) = MEMORY[0x24BEE1768];
      *(_QWORD *)(v27 + 224) = MEMORY[0x24BEE17F0];
      *(_QWORD *)(v27 + 192) = v13;
      *(_QWORD *)(v27 + 256) = MEMORY[0x24BEE44F0];
      *(_QWORD *)(v27 + 264) = MEMORY[0x24BEE4558];
      *(_DWORD *)(v27 + 232) = v41;
      *(_QWORD *)(v27 + 296) = v32;
      *(_QWORD *)(v27 + 304) = v33;
      if (Counter < 0)
        goto LABEL_26;
      *(_QWORD *)(v27 + 272) = Counter;
      a8 = (void (*)(_QWORD))_signpostLog;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      os_signpost(_:dso:log:name:signpostID:_:_:)();
      (*(void (**)(char *, _QWORD *))(v39 + 8))(v26, v40);
      swift_bridgeObjectRelease();
      a6 = v50;
      a5 = v38;
      if ((v51 & 1) != 0)
        goto LABEL_19;
    }
    v36 = v24;
    v14 += 4;
    ++v24;
    if ((_DWORD)a5 == v36 && !(_DWORD)a7)
      goto LABEL_19;
  }
  __break(1u);
LABEL_26:
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)(int a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v8;
  uint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  char *v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  uint64_t v22;
  unint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  __int128 v35;
  uint64_t v36;
  char *v37;
  _QWORD *v38;
  unint64_t v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t Counter;
  const char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  uint64_t v50;

  HIDWORD(v6) = HIDWORD(a6);
  LOBYTE(v8) = a4;
  v48 = a2;
  LODWORD(v10) = a1;
  v11 = type metadata accessor for OSSignpostID();
  v12 = *(_QWORD **)(v11 - 8);
  MEMORY[0x24BDAC7A8](v11);
  v14 = (char *)&v35 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  static os_signpost_type_t.event.getter();
  result = kdebug_is_enabled();
  if ((result & 1) == 0)
    return result;
  if (one-time initialization token for _signpostLog != -1)
LABEL_24:
    swift_once();
  result = OS_os_log.signpostsEnabled.getter();
  if ((result & 1) == 0)
    return result;
  v46 = a3;
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for SingleTapGesture<TappableEvent>, (uint64_t)&type metadata for TappableEvent, (uint64_t)&protocol witness table for TappableEvent, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for SingleTapGesture);
  v50 = v16;
  type metadata accessor for SingleTapGesture<TappableEvent>.Type();
  v45 = String.init<A>(describing:)();
  v18 = v17;
  v44 = specialized static Tracing.libraryName(defining:)();
  v20 = v19;
  v21 = (id)AGGraphGetAttributeGraph();
  Counter = AGGraphGetCounter();

  if ((v8 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  v41 = v20;
  v42 = v18;
  v37 = v14;
  v38 = v12;
  v39 = v11;
  v40 = v10;
  v47 = a5;
  v49 = 0;
  v22 = v48;
  outlined copy of DynamicPropertyCache.Fields.Layout();
  if (!HIDWORD(v6))
  {
LABEL_19:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  v11 = 0;
  LODWORD(a3) = 0;
  v12 = (_QWORD *)(v22 + 48);
  a5 = (HIDWORD(v6) - 1);
  v35 = xmmword_23529BF50;
  v36 = a5;
  while (v47)
  {
    v14 = (char *)(v47 + (int)a3);
    if ((_DWORD)a5 == (_DWORD)v11)
      a3 = 0;
    else
      a3 = (*((_DWORD *)v14 + 2) + a3);
    v23 = *(_QWORD *)(v22 + 16);
    if (v11 == v23)
      goto LABEL_19;
    if (v11 >= v23)
    {
      __break(1u);
      goto LABEL_24;
    }
    v6 = *(v12 - 2);
    v10 = *v12;
    LODWORD(v8) = static os_signpost_type_t.event.getter();
    static os_signpost_type_t.event.getter();
    if ((kdebug_is_enabled() & 1) != 0 && (OS_os_log.signpostsEnabled.getter() & 1) != 0)
    {
      LODWORD(v46) = v8;
      v24 = v37;
      static OSSignpostID.exclusive.getter();
      type metadata accessor for _ContiguousArrayStorage<CVarArg>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<CVarArg>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
      v25 = swift_allocObject();
      *(_OWORD *)(v25 + 16) = v35;
      v26 = _typeName(_:qualified:)();
      v28 = v27;
      v8 = MEMORY[0x24BEE0D00];
      *(_QWORD *)(v25 + 56) = MEMORY[0x24BEE0D00];
      v29 = lazy protocol witness table accessor for type String and conformance String();
      *(_QWORD *)(v25 + 32) = v26;
      *(_QWORD *)(v25 + 40) = v28;
      v30 = MEMORY[0x24BEE1E88];
      *(_QWORD *)(v25 + 96) = MEMORY[0x24BEE1E88];
      v31 = MEMORY[0x24BEE1ED8];
      *(_QWORD *)(v25 + 64) = v29;
      *(_QWORD *)(v25 + 72) = v14;
      *(_QWORD *)(v25 + 136) = v8;
      *(_QWORD *)(v25 + 144) = v29;
      v32 = v45;
      *(_QWORD *)(v25 + 104) = v31;
      *(_QWORD *)(v25 + 112) = v32;
      v33 = v41;
      *(_QWORD *)(v25 + 120) = v42;
      *(_QWORD *)(v25 + 176) = v8;
      *(_QWORD *)(v25 + 184) = v29;
      *(_QWORD *)(v25 + 152) = v44;
      *(_QWORD *)(v25 + 160) = v33;
      *(_QWORD *)(v25 + 216) = MEMORY[0x24BEE1768];
      *(_QWORD *)(v25 + 224) = MEMORY[0x24BEE17F0];
      *(_QWORD *)(v25 + 192) = v10;
      *(_QWORD *)(v25 + 256) = MEMORY[0x24BEE44F0];
      *(_QWORD *)(v25 + 264) = MEMORY[0x24BEE4558];
      *(_DWORD *)(v25 + 232) = v40;
      *(_QWORD *)(v25 + 296) = v30;
      *(_QWORD *)(v25 + 304) = v31;
      if (Counter < 0)
        goto LABEL_26;
      *(_QWORD *)(v25 + 272) = Counter;
      HIDWORD(v6) = HIDWORD(_signpostLog);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      os_signpost(_:dso:log:name:signpostID:_:_:)();
      ((void (*)(char *, unint64_t))v38[1])(v24, v39);
      swift_bridgeObjectRelease();
      v22 = v48;
      a5 = v36;
      if ((v49 & 1) != 0)
        goto LABEL_19;
    }
    v34 = v11;
    v12 += 4;
    ++v11;
    if ((_DWORD)a5 == v34 && !(_DWORD)a3)
      goto LABEL_19;
  }
  __break(1u);
LABEL_26:
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  char *v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  uint64_t v19;
  int v20;
  unint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  __int128 v33;
  uint64_t v34;
  char *v35;
  _QWORD *v36;
  unint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t Counter;
  const char *v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  ValueMetadata *v48;

  HIDWORD(v6) = HIDWORD(a6);
  LOBYTE(v8) = a4;
  v46 = a2;
  LODWORD(v9) = a1;
  v10 = type metadata accessor for OSSignpostID();
  v11 = *(_QWORD **)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)&v33 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  static os_signpost_type_t.event.getter();
  result = kdebug_is_enabled();
  if ((result & 1) == 0)
    return result;
  if (one-time initialization token for _signpostLog != -1)
LABEL_24:
    swift_once();
  result = OS_os_log.signpostsEnabled.getter();
  if ((result & 1) == 0)
    return result;
  v48 = &type metadata for DistanceGesture;
  type metadata accessor for DistanceGesture.Type();
  v42 = String.init<A>(describing:)();
  v44 = v15;
  v41 = specialized static Tracing.libraryName(defining:)();
  v17 = v16;
  v18 = (id)AGGraphGetAttributeGraph();
  Counter = AGGraphGetCounter();

  if ((v8 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  v39 = v17;
  v35 = v13;
  v36 = v11;
  v37 = v10;
  v38 = v9;
  v45 = a5;
  v47 = 0;
  v19 = v46;
  outlined copy of DynamicPropertyCache.Fields.Layout();
  if (!HIDWORD(v6))
  {
LABEL_19:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  v10 = 0;
  v20 = 0;
  v11 = (_QWORD *)(v19 + 48);
  a5 = (HIDWORD(v6) - 1);
  v33 = xmmword_23529BF50;
  v34 = a5;
  while (v45)
  {
    v13 = (char *)(v45 + v20);
    if ((_DWORD)a5 == (_DWORD)v10)
      v20 = 0;
    else
      v20 += *((_DWORD *)v13 + 2);
    v21 = *(_QWORD *)(v19 + 16);
    if (v10 == v21)
      goto LABEL_19;
    if (v10 >= v21)
    {
      __break(1u);
      goto LABEL_24;
    }
    v6 = *(v11 - 2);
    v9 = *v11;
    LODWORD(v8) = static os_signpost_type_t.event.getter();
    static os_signpost_type_t.event.getter();
    if ((kdebug_is_enabled() & 1) != 0 && (OS_os_log.signpostsEnabled.getter() & 1) != 0)
    {
      v43 = v8;
      v22 = v35;
      static OSSignpostID.exclusive.getter();
      type metadata accessor for _ContiguousArrayStorage<CVarArg>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<CVarArg>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
      v23 = swift_allocObject();
      *(_OWORD *)(v23 + 16) = v33;
      v24 = _typeName(_:qualified:)();
      v26 = v25;
      v8 = MEMORY[0x24BEE0D00];
      *(_QWORD *)(v23 + 56) = MEMORY[0x24BEE0D00];
      v27 = lazy protocol witness table accessor for type String and conformance String();
      *(_QWORD *)(v23 + 32) = v24;
      *(_QWORD *)(v23 + 40) = v26;
      v28 = MEMORY[0x24BEE1E88];
      *(_QWORD *)(v23 + 96) = MEMORY[0x24BEE1E88];
      v29 = MEMORY[0x24BEE1ED8];
      *(_QWORD *)(v23 + 64) = v27;
      *(_QWORD *)(v23 + 72) = v13;
      *(_QWORD *)(v23 + 136) = v8;
      *(_QWORD *)(v23 + 144) = v27;
      v30 = v42;
      *(_QWORD *)(v23 + 104) = v29;
      *(_QWORD *)(v23 + 112) = v30;
      *(_QWORD *)(v23 + 120) = v44;
      *(_QWORD *)(v23 + 176) = v8;
      *(_QWORD *)(v23 + 184) = v27;
      v31 = v39;
      *(_QWORD *)(v23 + 152) = v41;
      *(_QWORD *)(v23 + 160) = v31;
      *(_QWORD *)(v23 + 216) = MEMORY[0x24BEE1768];
      *(_QWORD *)(v23 + 224) = MEMORY[0x24BEE17F0];
      *(_QWORD *)(v23 + 192) = v9;
      *(_QWORD *)(v23 + 256) = MEMORY[0x24BEE44F0];
      *(_QWORD *)(v23 + 264) = MEMORY[0x24BEE4558];
      *(_DWORD *)(v23 + 232) = v38;
      *(_QWORD *)(v23 + 296) = v28;
      *(_QWORD *)(v23 + 304) = v29;
      if (Counter < 0)
        goto LABEL_26;
      *(_QWORD *)(v23 + 272) = Counter;
      HIDWORD(v6) = HIDWORD(_signpostLog);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      os_signpost(_:dso:log:name:signpostID:_:_:)();
      ((void (*)(char *, unint64_t))v36[1])(v22, v37);
      swift_bridgeObjectRelease();
      v19 = v46;
      a5 = v34;
      if ((v47 & 1) != 0)
        goto LABEL_19;
    }
    v32 = v10;
    v11 += 4;
    ++v10;
    if ((_DWORD)a5 == v32 && !v20)
      goto LABEL_19;
  }
  __break(1u);
LABEL_26:
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  return specialized _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)(a1, a2, a3, a4, a5, a6, (unint64_t)&type metadata for _ColorMonochromeEffect, (uint64_t)type metadata accessor for _ColorMonochromeEffect.Type);
}

{
  return specialized _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)(a1, a2, a3, a4, a5, a6, (unint64_t)&type metadata for _ColorMultiplyEffect, (uint64_t)type metadata accessor for _ColorMultiplyEffect.Type);
}

{
  return specialized _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)(a1, a2, a3, a4, a5, a6, (unint64_t)&type metadata for Rectangle, (uint64_t)type metadata accessor for Rectangle.Type);
}

{
  return specialized _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)(a1, a2, a3, a4, a5, a6, (unint64_t)&type metadata for Rectangle._Inset, (uint64_t)type metadata accessor for Rectangle._Inset.Type);
}

{
  return specialized _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)(a1, a2, a3, a4, a5, a6, (unint64_t)&type metadata for _TestApp.RootView, (uint64_t)type metadata accessor for _TestApp.RootView.Type);
}

{
  return specialized _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)(a1, a2, a3, a4, a5, a6, (unint64_t)&type metadata for AnyShape, (uint64_t)type metadata accessor for AnyShape.Type);
}

{
  return specialized _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)(a1, a2, a3, a4, a5, a6, (unint64_t)&type metadata for Ellipse, (uint64_t)type metadata accessor for Ellipse.Type);
}

{
  return specialized _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)(a1, a2, a3, a4, a5, a6, (unint64_t)&type metadata for Ellipse._Inset, (uint64_t)type metadata accessor for Ellipse._Inset.Type);
}

{
  return specialized _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)(a1, a2, a3, a4, a5, a6, (unint64_t)&type metadata for Capsule, (uint64_t)type metadata accessor for Capsule.Type);
}

{
  return specialized _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)(a1, a2, a3, a4, a5, a6, (unint64_t)&type metadata for Capsule._Inset, (uint64_t)type metadata accessor for Capsule._Inset.Type);
}

{
  return specialized _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)(a1, a2, a3, a4, a5, a6, (unint64_t)&type metadata for Circle, (uint64_t)type metadata accessor for Circle.Type);
}

{
  return specialized _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)(a1, a2, a3, a4, a5, a6, (unint64_t)&type metadata for Circle._Inset, (uint64_t)type metadata accessor for Circle._Inset.Type);
}

{
  return specialized _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)(a1, a2, a3, a4, a5, a6, (unint64_t)&type metadata for Path, (uint64_t)type metadata accessor for Path.Type);
}

{
  return specialized _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)(a1, a2, a3, a4, a5, a6, (unint64_t)&type metadata for UnevenRoundedRectangle, (uint64_t)type metadata accessor for UnevenRoundedRectangle.Type);
}

{
  return specialized _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)(a1, a2, a3, a4, a5, a6, (unint64_t)&type metadata for UnevenRoundedRectangle._Inset, (uint64_t)type metadata accessor for UnevenRoundedRectangle._Inset.Type);
}

{
  return specialized _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)(a1, a2, a3, a4, a5, a6, (unint64_t)&type metadata for ContainerRelativeShape, (uint64_t)type metadata accessor for ContainerRelativeShape.Type);
}

{
  return specialized _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)(a1, a2, a3, a4, a5, a6, (unint64_t)&type metadata for ContainerRelativeShape._Inset, (uint64_t)type metadata accessor for ContainerRelativeShape._Inset.Type);
}

{
  return specialized _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)(a1, a2, a3, a4, a5, a6, (unint64_t)&type metadata for _IntelligenceSupport.AnimatingSummarySymbol, (uint64_t)type metadata accessor for _IntelligenceSupport.AnimatingSummarySymbol.Type);
}

{
  return specialized _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)(a1, a2, a3, a4, a5, a6, (unint64_t)&type metadata for _IntelligenceSupport.AnimatingText, (uint64_t)type metadata accessor for _IntelligenceSupport.AnimatingText.Type);
}

{
  return specialized _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)(a1, a2, a3, a4, a5, a6, (unint64_t)&type metadata for EllipticalGradient, (uint64_t)type metadata accessor for EllipticalGradient.Type);
}

{
  return specialized _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)(a1, a2, a3, a4, a5, a6, (unint64_t)&type metadata for RoundedRectangle, (uint64_t)type metadata accessor for RoundedRectangle.Type);
}

{
  return specialized _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)(a1, a2, a3, a4, a5, a6, (unint64_t)&type metadata for RoundedRectangle._Inset, (uint64_t)type metadata accessor for RoundedRectangle._Inset.Type);
}

{
  return specialized _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)(a1, a2, a3, a4, a5, a6, (unint64_t)&type metadata for AngularGradient, (uint64_t)type metadata accessor for AngularGradient.Type);
}

{
  return specialized _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)(a1, a2, a3, a4, a5, a6, (unint64_t)&type metadata for RadialGradient, (uint64_t)type metadata accessor for RadialGradient.Type);
}

{
  return specialized _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)(a1, a2, a3, a4, a5, a6, (unint64_t)&type metadata for LinearGradient, (uint64_t)type metadata accessor for LinearGradient.Type);
}

{
  return specialized _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)(a1, a2, a3, a4, a5, a6, (unint64_t)&type metadata for _ShadowEffect, (uint64_t)type metadata accessor for _ShadowEffect.Type);
}

{
  return specialized _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)(a1, a2, a3, a4, a5, a6, (unint64_t)&type metadata for MeshGradient, (uint64_t)type metadata accessor for MeshGradient.Type);
}

uint64_t specialized _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)(int a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  char *v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  unint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  __int128 v35;
  uint64_t v36;
  char *v37;
  _QWORD *v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t Counter;
  const char *v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  unint64_t v50;

  HIDWORD(v10) = HIDWORD(a6);
  LOBYTE(v12) = a4;
  v48 = a2;
  LODWORD(v13) = a1;
  v14 = type metadata accessor for OSSignpostID();
  v15 = *(_QWORD **)(v14 - 8);
  MEMORY[0x24BDAC7A8](v14);
  v17 = (char *)&v35 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  static os_signpost_type_t.event.getter();
  result = kdebug_is_enabled();
  if (!(_DWORD)result)
    return result;
  if (one-time initialization token for _signpostLog != -1)
LABEL_23:
    swift_once();
  result = OS_os_log.signpostsEnabled.getter();
  if ((result & 1) == 0)
    return result;
  v50 = a7;
  ((void (*)(_QWORD))a8)(0);
  v45 = String.init<A>(describing:)();
  v20 = v19;
  v44 = specialized static Tracing.libraryName(defining:)();
  v22 = v21;
  v23 = (id)AGGraphGetAttributeGraph();
  Counter = AGGraphGetCounter();

  if ((v12 & 1) != 0)
  {
LABEL_20:
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  v41 = v22;
  v42 = v20;
  v37 = v17;
  v38 = v15;
  v39 = v14;
  v40 = v13;
  v47 = a5;
  v49 = 0;
  a8 = v48;
  swift_bridgeObjectRetain();
  if (!HIDWORD(v10))
  {
LABEL_19:
    swift_bridgeObjectRelease();
    goto LABEL_20;
  }
  a7 = 0;
  LODWORD(v14) = 0;
  v15 = (_QWORD *)(a8 + 48);
  a5 = (HIDWORD(v10) - 1);
  v35 = xmmword_23529BF50;
  v36 = a5;
  while (v47)
  {
    v17 = (char *)(v47 + (int)v14);
    if ((_DWORD)a5 == (_DWORD)a7)
      v14 = 0;
    else
      v14 = (*((_DWORD *)v17 + 2) + v14);
    v24 = *(_QWORD *)(a8 + 16);
    if (a7 == v24)
      goto LABEL_19;
    if (a7 >= v24)
    {
      __break(1u);
      goto LABEL_23;
    }
    v10 = *(v15 - 2);
    v13 = *v15;
    LODWORD(v12) = static os_signpost_type_t.event.getter();
    static os_signpost_type_t.event.getter();
    if (kdebug_is_enabled() && (OS_os_log.signpostsEnabled.getter() & 1) != 0)
    {
      v46 = v12;
      v25 = v37;
      static OSSignpostID.exclusive.getter();
      type metadata accessor for _ContiguousArrayStorage<CVarArg>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<CVarArg>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
      v26 = swift_allocObject();
      *(_OWORD *)(v26 + 16) = v35;
      v10 = _typeName(_:qualified:)();
      v28 = v27;
      v12 = MEMORY[0x24BEE0D00];
      *(_QWORD *)(v26 + 56) = MEMORY[0x24BEE0D00];
      v29 = lazy protocol witness table accessor for type String and conformance String();
      *(_QWORD *)(v26 + 32) = v10;
      *(_QWORD *)(v26 + 40) = v28;
      v30 = MEMORY[0x24BEE1E88];
      *(_QWORD *)(v26 + 96) = MEMORY[0x24BEE1E88];
      v31 = MEMORY[0x24BEE1ED8];
      *(_QWORD *)(v26 + 64) = v29;
      *(_QWORD *)(v26 + 72) = v17;
      *(_QWORD *)(v26 + 136) = v12;
      *(_QWORD *)(v26 + 144) = v29;
      v32 = v45;
      *(_QWORD *)(v26 + 104) = v31;
      *(_QWORD *)(v26 + 112) = v32;
      v33 = v41;
      *(_QWORD *)(v26 + 120) = v42;
      *(_QWORD *)(v26 + 176) = v12;
      *(_QWORD *)(v26 + 184) = v29;
      *(_QWORD *)(v26 + 152) = v44;
      *(_QWORD *)(v26 + 160) = v33;
      *(_QWORD *)(v26 + 216) = MEMORY[0x24BEE1768];
      *(_QWORD *)(v26 + 224) = MEMORY[0x24BEE17F0];
      *(_QWORD *)(v26 + 192) = v13;
      *(_QWORD *)(v26 + 256) = MEMORY[0x24BEE44F0];
      *(_QWORD *)(v26 + 264) = MEMORY[0x24BEE4558];
      *(_DWORD *)(v26 + 232) = v40;
      *(_QWORD *)(v26 + 296) = v30;
      *(_QWORD *)(v26 + 304) = v31;
      if (Counter < 0)
        goto LABEL_25;
      *(_QWORD *)(v26 + 272) = Counter;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      os_signpost(_:dso:log:name:signpostID:_:_:)();
      ((void (*)(char *, uint64_t))v38[1])(v25, v39);
      swift_bridgeObjectRelease();
      a8 = v48;
      a5 = v36;
      if ((v49 & 1) != 0)
        goto LABEL_19;
    }
    v34 = a7;
    v15 += 4;
    ++a7;
    if ((_DWORD)a5 == v34 && !(_DWORD)v14)
      goto LABEL_19;
  }
  __break(1u);
LABEL_25:
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t static _ViewOutputs.multiView(inputs:body:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  int v17;
  unint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;

  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(_QWORD *)(a1 + 16);
  v7 = *(_QWORD *)(a1 + 40);
  v8 = *(_QWORD *)(a1 + 48);
  v9 = *(_DWORD *)(a1 + 80);
  v19 = *(_QWORD *)a1;
  v20 = v5;
  v21 = v6;
  v22 = *(_OWORD *)(a1 + 24);
  v23 = v7;
  v24 = v8;
  v25 = *(_OWORD *)(a1 + 56);
  v26 = *(_QWORD *)(a1 + 72);
  v27 = v9;
  v28 = a2;
  v29 = a3;
  v30 = 0;
  v31 = 0;
  swift_retain();
  swift_retain_n();
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  v10 = specialized find<A>(_:key:)(v19);
  if (v10)
  {
    v11 = (uint64_t *)(v10 + 72);
    v12 = (uint64_t *)(v10 + 80);
  }
  else
  {
    v11 = &static ImplicitRootType.defaultValue;
    v12 = (uint64_t *)&off_25426D1D0;
    if (one-time initialization token for defaultValue != -1)
      swift_once();
  }
  v13 = *v12;
  v14 = *v11;
  swift_bridgeObjectRelease();
  swift_release();
  swift_release_n();
  result = (*(uint64_t (**)(uint64_t *, void *, _UNKNOWN **, uint64_t, uint64_t))(v13 + 8))(&v19, &unk_250613C38, &protocol witness table for MakeViewRoot, v14, v13);
  v16 = v30;
  if (v30)
  {
    v17 = v31;
    v18 = HIDWORD(v31);
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    result = swift_release();
    *(_QWORD *)a4 = v16;
    *(_DWORD *)(a4 + 8) = v17;
    *(_DWORD *)(a4 + 12) = v18;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t static View.makeImplicitRoot(view:inputs:)@<X0>(int *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  int v8;
  int v9;
  uint64_t v10;
  int v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v15;
  int v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  int v22;

  v8 = *a1;
  v9 = *((_DWORD *)a2 + 2);
  v10 = a2[2];
  v11 = *((_DWORD *)a2 + 20);
  v15 = *a2;
  v16 = v9;
  v17 = v10;
  v12 = *(_OWORD *)(a2 + 5);
  v18 = *(_OWORD *)(a2 + 3);
  v19 = v12;
  v20 = *(_OWORD *)(a2 + 7);
  v21 = a2[9];
  v22 = v11;
  v13 = swift_allocObject();
  *(_QWORD *)(v13 + 16) = a3;
  *(_QWORD *)(v13 + 24) = a4;
  *(_DWORD *)(v13 + 32) = v8;
  static _ViewOutputs.multiView(inputs:body:)((uint64_t)&v15, (uint64_t)partial apply for closure #1 in static View.makeImplicitRoot(view:inputs:), v13, a5);
  return swift_release();
}

uint64_t protocol witness for static _VariadicView_ViewRoot._makeView(root:inputs:body:) in conformance GroupContainer@<X0>(int *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  int v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  char isEscapingClosureAtFileLocation;
  uint64_t result;
  uint64_t v20;
  int v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  int v27;

  v9 = *a1;
  v10 = *a2;
  v11 = *((_DWORD *)a2 + 2);
  v12 = a2[2];
  v13 = *((_DWORD *)a2 + 20);
  v14 = swift_allocObject();
  *(_QWORD *)(v14 + 16) = a3;
  *(_QWORD *)(v14 + 24) = a4;
  v20 = v10;
  v21 = v11;
  v22 = v12;
  v15 = *(_OWORD *)(a2 + 5);
  v23 = *(_OWORD *)(a2 + 3);
  v24 = v15;
  v25 = *(_OWORD *)(a2 + 7);
  v26 = a2[9];
  v27 = v13;
  v16 = swift_allocObject();
  *(_QWORD *)(v16 + 16) = thunk for @callee_guaranteed (@in_guaranteed _Graph, @in_guaranteed _ViewInputs) -> (@out _ViewListOutputs)partial apply;
  *(_QWORD *)(v16 + 24) = v14;
  *(_QWORD *)(v16 + 32) = v5;
  *(_DWORD *)(v16 + 40) = v9;
  swift_retain();
  static _ViewOutputs.multiView(inputs:body:)((uint64_t)&v20, (uint64_t)partial apply for specialized closure #1 in closure #1 in static _VariadicView_MultiViewRoot._makeView(root:inputs:body:), v16, a5);
  swift_release();
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  result = swift_release();
  if ((isEscapingClosureAtFileLocation & 1) != 0)
    __break(1u);
  return result;
}

uint64_t static _VariadicView_MultiViewRoot._makeView(root:inputs:body:)@<X0>(int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v7;
  int v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  uint64_t result;
  _OWORD v18[5];
  int v19;

  v13 = *a1;
  v14 = *(_OWORD *)(a2 + 48);
  v18[2] = *(_OWORD *)(a2 + 32);
  v18[3] = v14;
  v18[4] = *(_OWORD *)(a2 + 64);
  v19 = *(_DWORD *)(a2 + 80);
  v15 = *(_OWORD *)(a2 + 16);
  v18[0] = *(_OWORD *)a2;
  v18[1] = v15;
  v16 = swift_allocObject();
  *(_QWORD *)(v16 + 16) = a3;
  *(_QWORD *)(v16 + 24) = a4;
  closure #1 in static _VariadicView_MultiViewRoot._makeView(root:inputs:body:)((uint64_t)partial apply for thunk for @callee_guaranteed (@in_guaranteed _Graph, @in_guaranteed _ViewInputs) -> (@out _ViewListOutputs), v16, (uint64_t)v18, v7, v13, a5, a6, a7);
  LOBYTE(a6) = swift_isEscapingClosureAtFileLocation();
  result = swift_release();
  if ((a6 & 1) != 0)
    __break(1u);
  return result;
}

uint64_t static _VariadicView_MultiViewRoot._viewListCount(inputs:body:)(__int128 *a1, uint64_t (*a2)(__int128 *))
{
  int v2;
  uint64_t v3;
  __int128 v5;
  int v6;
  uint64_t v7;

  v2 = *((_DWORD *)a1 + 4);
  v3 = *((_QWORD *)a1 + 3);
  v5 = *a1;
  v6 = v2;
  v7 = v3;
  return a2(&v5);
}

void protocol witness for _VariadicView_ViewRoot.body(children:) in conformance GroupContainer()
{
  _StringGuts.grow(_:)(34);
  swift_bridgeObjectRelease();
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t _ViewInputs.implicitRootType.setter(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;

  swift_retain();
  specialized closure #1 in PropertyList.subscript.setter(v2, a1, a2);
  return swift_release();
}

uint64_t specialized static View.makeBody(view:inputs:fields:)(_DWORD *a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  char v14;
  uint64_t result;
  char v16;
  Swift::String v17;
  Swift::String v18;
  Swift::String v19;
  uint64_t v20;
  __int128 v21;
  char v22;

  if (AGTypeGetKind() - 2 >= 4)
  {
    _StringGuts.grow(_:)(70);
    v17._countAndFlagsBits = 0xD000000000000038;
    v17._object = (void *)0x80000002352E0FD0;
    String.append(_:)(v17);
    v18._object = (void *)0x80000002352E3010;
    v18._countAndFlagsBits = 0xD000000000000011;
    String.append(_:)(v18);
    v19._countAndFlagsBits = 0x6C63206120736920;
    v19._object = (void *)0xEC0000002E737361;
    String.append(_:)(v19);
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    v14 = a7 & 1;
    if ((a7 & 0x100000000) != 0)
      result = specialized project #1 <A><A1>(flags:) in closure #1 in BodyAccessor.makeBody(container:inputs:fields:)(&v20, (uint64_t)&v21, a5, a6, v14, a3, a4);
    else
      result = specialized project #1 <A><A1>(flags:) in closure #1 in BodyAccessor.makeBody(container:inputs:fields:)(&v20, (uint64_t)&v21, a5, a6, v14, a3, a4);
    v16 = v22;
    *a1 = v20;
    *(_OWORD *)a2 = v21;
    *(_BYTE *)(a2 + 16) = v16;
  }
  return result;
}

{
  char v14;
  uint64_t result;
  char v16;
  Swift::String v17;
  Swift::String v18;
  Swift::String v19;
  uint64_t v20;
  __int128 v21;
  char v22;

  if (AGTypeGetKind() - 2 >= 4)
  {
    _StringGuts.grow(_:)(70);
    v17._object = (void *)0x80000002352E0FD0;
    v17._countAndFlagsBits = 0xD000000000000038;
    String.append(_:)(v17);
    v18._countAndFlagsBits = 0xD00000000000003BLL;
    v18._object = (void *)0x80000002352E3030;
    String.append(_:)(v18);
    v19._countAndFlagsBits = 0x6C63206120736920;
    v19._object = (void *)0xEC0000002E737361;
    String.append(_:)(v19);
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    v14 = a7 & 1;
    if ((a7 & 0x100000000) != 0)
      result = specialized project #1 <A><A1>(flags:) in closure #1 in BodyAccessor.makeBody(container:inputs:fields:)(&v20, (uint64_t)&v21, a5, a6, v14, a3, a4);
    else
      result = specialized project #1 <A><A1>(flags:) in closure #1 in BodyAccessor.makeBody(container:inputs:fields:)(&v20, (uint64_t)&v21, a5, a6, v14, a3, a4);
    v16 = v22;
    *a1 = v20;
    *(_OWORD *)a2 = v21;
    *(_BYTE *)(a2 + 16) = v16;
  }
  return result;
}

{
  char v14;
  uint64_t result;
  char v16;
  Swift::String v17;
  Swift::String v18;
  Swift::String v19;
  uint64_t v20;
  __int128 v21;
  char v22;

  if (AGTypeGetKind() - 2 >= 4)
  {
    _StringGuts.grow(_:)(70);
    v17._countAndFlagsBits = 0xD000000000000038;
    v17._object = (void *)0x80000002352E0FD0;
    String.append(_:)(v17);
    v18._object = (void *)0x80000002352E2FD0;
    v18._countAndFlagsBits = 0xD000000000000034;
    String.append(_:)(v18);
    v19._countAndFlagsBits = 0x6C63206120736920;
    v19._object = (void *)0xEC0000002E737361;
    String.append(_:)(v19);
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    v14 = a7 & 1;
    if ((a7 & 0x100000000) != 0)
      result = specialized project #1 <A><A1>(flags:) in closure #1 in BodyAccessor.makeBody(container:inputs:fields:)(&v20, (uint64_t)&v21, a5, a6, v14, a3, a4);
    else
      result = specialized project #1 <A><A1>(flags:) in closure #1 in BodyAccessor.makeBody(container:inputs:fields:)(&v20, (uint64_t)&v21, a5, a6, v14, a3, a4);
    v16 = v22;
    *a1 = v20;
    *(_OWORD *)a2 = v21;
    *(_BYTE *)(a2 + 16) = v16;
  }
  return result;
}

{
  uint64_t result;
  Swift::String v15;
  Swift::String v16;
  Swift::String v17;

  if (AGTypeGetKind() - 2 < 4)
    return specialized BodyAccessor.makeBody(container:inputs:fields:)(a1, a2, a3, a4, a5, a6, a7 & 0xFFFFFFFF00000001);
  _StringGuts.grow(_:)(70);
  v15._object = (void *)0x80000002352E0FD0;
  v15._countAndFlagsBits = 0xD000000000000038;
  String.append(_:)(v15);
  v16._countAndFlagsBits = 0x6C676E6174636552;
  v16._object = (void *)0xE900000000000065;
  String.append(_:)(v16);
  v17._countAndFlagsBits = 0x6C63206120736920;
  v17._object = (void *)0xEC0000002E737361;
  String.append(_:)(v17);
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t result;
  Swift::String v15;
  Swift::String v16;
  Swift::String v17;

  if (AGTypeGetKind() - 2 < 4)
    return specialized BodyAccessor.makeBody(container:inputs:fields:)(a1, a2, a3, a4, a5, a6, a7 & 0xFFFFFFFF00000001);
  _StringGuts.grow(_:)(70);
  v15._object = (void *)0x80000002352E0FD0;
  v15._countAndFlagsBits = 0xD000000000000038;
  String.append(_:)(v15);
  v16._countAndFlagsBits = 0x7465736E495FLL;
  v16._object = (void *)0xE600000000000000;
  String.append(_:)(v16);
  v17._countAndFlagsBits = 0x6C63206120736920;
  v17._object = (void *)0xEC0000002E737361;
  String.append(_:)(v17);
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t result;
  Swift::String v15;
  Swift::String v16;
  Swift::String v17;

  if (AGTypeGetKind() - 2 < 4)
    return specialized BodyAccessor.makeBody(container:inputs:fields:)(a1, a2, a3, a4, a5, a6, a7 & 0xFFFFFFFF00000001);
  _StringGuts.grow(_:)(70);
  v15._object = (void *)0x80000002352E0FD0;
  v15._countAndFlagsBits = 0xD000000000000038;
  String.append(_:)(v15);
  v16._countAndFlagsBits = 0x77656956746F6F52;
  v16._object = (void *)0xE800000000000000;
  String.append(_:)(v16);
  v17._countAndFlagsBits = 0x6C63206120736920;
  v17._object = (void *)0xEC0000002E737361;
  String.append(_:)(v17);
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t result;
  Swift::String v15;
  Swift::String v16;
  Swift::String v17;

  if (AGTypeGetKind() - 2 < 4)
    return specialized BodyAccessor.makeBody(container:inputs:fields:)(a1, a2, a3, a4, a5, a6, a7 & 0xFFFFFFFF00000001);
  _StringGuts.grow(_:)(70);
  v15._object = (void *)0x80000002352E0FD0;
  v15._countAndFlagsBits = 0xD000000000000038;
  String.append(_:)(v15);
  v16._countAndFlagsBits = 0x6570616853796E41;
  v16._object = (void *)0xE800000000000000;
  String.append(_:)(v16);
  v17._countAndFlagsBits = 0x6C63206120736920;
  v17._object = (void *)0xEC0000002E737361;
  String.append(_:)(v17);
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t result;
  Swift::String v15;
  Swift::String v16;
  Swift::String v17;

  if (AGTypeGetKind() - 2 < 4)
    return specialized BodyAccessor.makeBody(container:inputs:fields:)(a1, a2, a3, a4, a5, a6, a7 & 0xFFFFFFFF00000001);
  _StringGuts.grow(_:)(70);
  v15._object = (void *)0x80000002352E0FD0;
  v15._countAndFlagsBits = 0xD000000000000038;
  String.append(_:)(v15);
  v16._countAndFlagsBits = 0x657370696C6C45;
  v16._object = (void *)0xE700000000000000;
  String.append(_:)(v16);
  v17._countAndFlagsBits = 0x6C63206120736920;
  v17._object = (void *)0xEC0000002E737361;
  String.append(_:)(v17);
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t result;
  Swift::String v15;
  Swift::String v16;
  Swift::String v17;

  if (AGTypeGetKind() - 2 < 4)
    return specialized BodyAccessor.makeBody(container:inputs:fields:)(a1, a2, a3, a4, a5, a6, a7 & 0xFFFFFFFF00000001);
  _StringGuts.grow(_:)(70);
  v15._object = (void *)0x80000002352E0FD0;
  v15._countAndFlagsBits = 0xD000000000000038;
  String.append(_:)(v15);
  v16._countAndFlagsBits = 0x7465736E495FLL;
  v16._object = (void *)0xE600000000000000;
  String.append(_:)(v16);
  v17._countAndFlagsBits = 0x6C63206120736920;
  v17._object = (void *)0xEC0000002E737361;
  String.append(_:)(v17);
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t result;
  Swift::String v15;
  Swift::String v16;
  Swift::String v17;

  if (AGTypeGetKind() - 2 < 4)
    return specialized BodyAccessor.makeBody(container:inputs:fields:)(a1, a2, a3, a4, a5, a6, a7 & 0xFFFFFFFF00000001);
  _StringGuts.grow(_:)(70);
  v15._object = (void *)0x80000002352E0FD0;
  v15._countAndFlagsBits = 0xD000000000000038;
  String.append(_:)(v15);
  v16._countAndFlagsBits = 0x656C7573706143;
  v16._object = (void *)0xE700000000000000;
  String.append(_:)(v16);
  v17._countAndFlagsBits = 0x6C63206120736920;
  v17._object = (void *)0xEC0000002E737361;
  String.append(_:)(v17);
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t result;
  Swift::String v15;
  Swift::String v16;
  Swift::String v17;

  if (AGTypeGetKind() - 2 < 4)
    return specialized BodyAccessor.makeBody(container:inputs:fields:)(a1, a2, a3, a4, a5, a6, a7 & 0xFFFFFFFF00000001);
  _StringGuts.grow(_:)(70);
  v15._object = (void *)0x80000002352E0FD0;
  v15._countAndFlagsBits = 0xD000000000000038;
  String.append(_:)(v15);
  v16._countAndFlagsBits = 0x7465736E495FLL;
  v16._object = (void *)0xE600000000000000;
  String.append(_:)(v16);
  v17._countAndFlagsBits = 0x6C63206120736920;
  v17._object = (void *)0xEC0000002E737361;
  String.append(_:)(v17);
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t result;
  Swift::String v15;
  Swift::String v16;
  Swift::String v17;

  if (AGTypeGetKind() - 2 < 4)
    return specialized BodyAccessor.makeBody(container:inputs:fields:)(a1, a2, a3, a4, a5, a6, a7 & 0xFFFFFFFF00000001);
  _StringGuts.grow(_:)(70);
  v15._object = (void *)0x80000002352E0FD0;
  v15._countAndFlagsBits = 0xD000000000000038;
  String.append(_:)(v15);
  v16._countAndFlagsBits = 0x656C63726943;
  v16._object = (void *)0xE600000000000000;
  String.append(_:)(v16);
  v17._countAndFlagsBits = 0x6C63206120736920;
  v17._object = (void *)0xEC0000002E737361;
  String.append(_:)(v17);
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t result;
  Swift::String v15;
  Swift::String v16;
  Swift::String v17;

  if (AGTypeGetKind() - 2 < 4)
    return specialized BodyAccessor.makeBody(container:inputs:fields:)(a1, a2, a3, a4, a5, a6, a7 & 0xFFFFFFFF00000001);
  _StringGuts.grow(_:)(70);
  v15._object = (void *)0x80000002352E0FD0;
  v15._countAndFlagsBits = 0xD000000000000038;
  String.append(_:)(v15);
  v16._countAndFlagsBits = 0x7465736E495FLL;
  v16._object = (void *)0xE600000000000000;
  String.append(_:)(v16);
  v17._countAndFlagsBits = 0x6C63206120736920;
  v17._object = (void *)0xEC0000002E737361;
  String.append(_:)(v17);
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t result;
  Swift::String v15;
  Swift::String v16;
  Swift::String v17;

  if (AGTypeGetKind() - 2 < 4)
    return specialized BodyAccessor.makeBody(container:inputs:fields:)(a1, a2, a3, a4, a5, a6, a7 & 0xFFFFFFFF00000001);
  _StringGuts.grow(_:)(70);
  v15._object = (void *)0x80000002352E0FD0;
  v15._countAndFlagsBits = 0xD000000000000038;
  String.append(_:)(v15);
  v16._countAndFlagsBits = 1752457552;
  v16._object = (void *)0xE400000000000000;
  String.append(_:)(v16);
  v17._countAndFlagsBits = 0x6C63206120736920;
  v17._object = (void *)0xEC0000002E737361;
  String.append(_:)(v17);
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t result;
  Swift::String v15;
  Swift::String v16;
  Swift::String v17;

  if (AGTypeGetKind() - 2 < 4)
    return specialized BodyAccessor.makeBody(container:inputs:fields:)(a1, a2, a3, a4, a5, a6, a7 & 0xFFFFFFFF00000001);
  _StringGuts.grow(_:)(70);
  v15._countAndFlagsBits = 0xD000000000000038;
  v15._object = (void *)0x80000002352E0FD0;
  String.append(_:)(v15);
  v16._object = (void *)0x80000002352E3090;
  v16._countAndFlagsBits = 0xD000000000000016;
  String.append(_:)(v16);
  v17._countAndFlagsBits = 0x6C63206120736920;
  v17._object = (void *)0xEC0000002E737361;
  String.append(_:)(v17);
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t result;
  Swift::String v15;
  Swift::String v16;
  Swift::String v17;

  if (AGTypeGetKind() - 2 < 4)
    return specialized BodyAccessor.makeBody(container:inputs:fields:)(a1, a2, a3, a4, a5, a6, a7 & 0xFFFFFFFF00000001);
  _StringGuts.grow(_:)(70);
  v15._object = (void *)0x80000002352E0FD0;
  v15._countAndFlagsBits = 0xD000000000000038;
  String.append(_:)(v15);
  v16._countAndFlagsBits = 0x7465736E495FLL;
  v16._object = (void *)0xE600000000000000;
  String.append(_:)(v16);
  v17._countAndFlagsBits = 0x6C63206120736920;
  v17._object = (void *)0xEC0000002E737361;
  String.append(_:)(v17);
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t result;
  Swift::String v15;
  Swift::String v16;
  Swift::String v17;

  if (AGTypeGetKind() - 2 < 4)
    return specialized BodyAccessor.makeBody(container:inputs:fields:)(a1, a2, a3, a4, a5, a6, a7 & 0xFFFFFFFF00000001);
  _StringGuts.grow(_:)(70);
  v15._countAndFlagsBits = 0xD000000000000038;
  v15._object = (void *)0x80000002352E0FD0;
  String.append(_:)(v15);
  v16._object = (void *)0x80000002352E3070;
  v16._countAndFlagsBits = 0xD000000000000016;
  String.append(_:)(v16);
  v17._countAndFlagsBits = 0x6C63206120736920;
  v17._object = (void *)0xEC0000002E737361;
  String.append(_:)(v17);
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t result;
  Swift::String v15;
  Swift::String v16;
  Swift::String v17;

  if (AGTypeGetKind() - 2 < 4)
    return specialized BodyAccessor.makeBody(container:inputs:fields:)(a1, a2, a3, a4, a5, a6, a7 & 0xFFFFFFFF00000001);
  _StringGuts.grow(_:)(70);
  v15._object = (void *)0x80000002352E0FD0;
  v15._countAndFlagsBits = 0xD000000000000038;
  String.append(_:)(v15);
  v16._countAndFlagsBits = 0x7465736E495FLL;
  v16._object = (void *)0xE600000000000000;
  String.append(_:)(v16);
  v17._countAndFlagsBits = 0x6C63206120736920;
  v17._object = (void *)0xEC0000002E737361;
  String.append(_:)(v17);
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t result;
  Swift::String v15;
  Swift::String v16;
  Swift::String v17;

  if (AGTypeGetKind() - 2 < 4)
    return specialized BodyAccessor.makeBody(container:inputs:fields:)(a1, a2, a3, a4, a5, a6, a7 & 0xFFFFFFFF00000001);
  _StringGuts.grow(_:)(70);
  v15._countAndFlagsBits = 0xD000000000000038;
  v15._object = (void *)0x80000002352E0FD0;
  String.append(_:)(v15);
  v16._object = (void *)0x80000002352E30D0;
  v16._countAndFlagsBits = 0xD000000000000016;
  String.append(_:)(v16);
  v17._countAndFlagsBits = 0x6C63206120736920;
  v17._object = (void *)0xEC0000002E737361;
  String.append(_:)(v17);
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t result;
  Swift::String v15;
  Swift::String v16;
  Swift::String v17;

  if (AGTypeGetKind() - 2 < 4)
    return specialized BodyAccessor.makeBody(container:inputs:fields:)(a1, a2, a3, a4, a5, a6, a7 & 0xFFFFFFFF00000001);
  _StringGuts.grow(_:)(70);
  v15._object = (void *)0x80000002352E0FD0;
  v15._countAndFlagsBits = 0xD000000000000038;
  String.append(_:)(v15);
  v16._countAndFlagsBits = 0x6E6974616D696E41;
  v16._object = (void *)0xED00007478655467;
  String.append(_:)(v16);
  v17._countAndFlagsBits = 0x6C63206120736920;
  v17._object = (void *)0xEC0000002E737361;
  String.append(_:)(v17);
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t result;
  Swift::String v15;
  Swift::String v16;
  Swift::String v17;

  if (AGTypeGetKind() - 2 < 4)
    return specialized BodyAccessor.makeBody(container:inputs:fields:)(a1, a2, a3, a4, a5, a6, a7 & 0xFFFFFFFF00000001);
  _StringGuts.grow(_:)(70);
  v15._countAndFlagsBits = 0xD000000000000038;
  v15._object = (void *)0x80000002352E0FD0;
  String.append(_:)(v15);
  v16._object = (void *)0x80000002352E30F0;
  v16._countAndFlagsBits = 0xD000000000000012;
  String.append(_:)(v16);
  v17._countAndFlagsBits = 0x6C63206120736920;
  v17._object = (void *)0xEC0000002E737361;
  String.append(_:)(v17);
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t result;
  Swift::String v15;
  Swift::String v16;
  Swift::String v17;

  if (AGTypeGetKind() - 2 < 4)
    return specialized BodyAccessor.makeBody(container:inputs:fields:)(a1, a2, a3, a4, a5, a6, a7 & 0xFFFFFFFF00000001);
  _StringGuts.grow(_:)(70);
  v15._countAndFlagsBits = 0xD000000000000038;
  v15._object = (void *)0x80000002352E0FD0;
  String.append(_:)(v15);
  v16._object = (void *)0x80000002352E30B0;
  v16._countAndFlagsBits = 0xD000000000000010;
  String.append(_:)(v16);
  v17._countAndFlagsBits = 0x6C63206120736920;
  v17._object = (void *)0xEC0000002E737361;
  String.append(_:)(v17);
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t result;
  Swift::String v15;
  Swift::String v16;
  Swift::String v17;

  if (AGTypeGetKind() - 2 < 4)
    return specialized BodyAccessor.makeBody(container:inputs:fields:)(a1, a2, a3, a4, a5, a6, a7 & 0xFFFFFFFF00000001);
  _StringGuts.grow(_:)(70);
  v15._object = (void *)0x80000002352E0FD0;
  v15._countAndFlagsBits = 0xD000000000000038;
  String.append(_:)(v15);
  v16._countAndFlagsBits = 0x7465736E495FLL;
  v16._object = (void *)0xE600000000000000;
  String.append(_:)(v16);
  v17._countAndFlagsBits = 0x6C63206120736920;
  v17._object = (void *)0xEC0000002E737361;
  String.append(_:)(v17);
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t result;
  Swift::String v15;
  Swift::String v16;
  Swift::String v17;

  if (AGTypeGetKind() - 2 < 4)
    return specialized BodyAccessor.makeBody(container:inputs:fields:)(a1, a2, a3, a4, a5, a6, a7 & 0xFFFFFFFF00000001);
  _StringGuts.grow(_:)(70);
  v15._object = (void *)0x80000002352E0FD0;
  v15._countAndFlagsBits = 0xD000000000000038;
  String.append(_:)(v15);
  v16._countAndFlagsBits = 0x4772616C75676E41;
  v16._object = (void *)0xEF746E6569646172;
  String.append(_:)(v16);
  v17._countAndFlagsBits = 0x6C63206120736920;
  v17._object = (void *)0xEC0000002E737361;
  String.append(_:)(v17);
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t result;
  Swift::String v15;
  Swift::String v16;
  Swift::String v17;

  if (AGTypeGetKind() - 2 < 4)
    return specialized BodyAccessor.makeBody(container:inputs:fields:)(a1, a2, a3, a4, a5, a6, a7 & 0xFFFFFFFF00000001);
  _StringGuts.grow(_:)(70);
  v15._object = (void *)0x80000002352E0FD0;
  v15._countAndFlagsBits = 0xD000000000000038;
  String.append(_:)(v15);
  v16._countAndFlagsBits = 0x72476C6169646152;
  v16._object = (void *)0xEE00746E65696461;
  String.append(_:)(v16);
  v17._countAndFlagsBits = 0x6C63206120736920;
  v17._object = (void *)0xEC0000002E737361;
  String.append(_:)(v17);
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t result;
  Swift::String v15;
  Swift::String v16;
  Swift::String v17;

  if (AGTypeGetKind() - 2 < 4)
    return specialized BodyAccessor.makeBody(container:inputs:fields:)(a1, a2, a3, a4, a5, a6, a7 & 0xFFFFFFFF00000001);
  _StringGuts.grow(_:)(70);
  v15._object = (void *)0x80000002352E0FD0;
  v15._countAndFlagsBits = 0xD000000000000038;
  String.append(_:)(v15);
  v16._countAndFlagsBits = 0x72477261656E694CLL;
  v16._object = (void *)0xEE00746E65696461;
  String.append(_:)(v16);
  v17._countAndFlagsBits = 0x6C63206120736920;
  v17._object = (void *)0xEC0000002E737361;
  String.append(_:)(v17);
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t result;
  Swift::String v15;
  Swift::String v16;
  Swift::String v17;

  if (AGTypeGetKind() - 2 < 4)
    return specialized BodyAccessor.makeBody(container:inputs:fields:)(a1, a2, a3, a4, a5, a6, a7 & 0xFFFFFFFF00000001);
  _StringGuts.grow(_:)(70);
  v15._object = (void *)0x80000002352E0FD0;
  v15._countAndFlagsBits = 0xD000000000000038;
  String.append(_:)(v15);
  v16._countAndFlagsBits = 0x646172476873654DLL;
  v16._object = (void *)0xEC000000746E6569;
  String.append(_:)(v16);
  v17._countAndFlagsBits = 0x6C63206120736920;
  v17._object = (void *)0xEC0000002E737361;
  String.append(_:)(v17);
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void specialized static View.makeBody(view:inputs:fields:)()
{
  Swift::String v0;
  Swift::String v1;
  Swift::String v2;

  if (AGTypeGetKind() - 2 >= 4)
  {
    _StringGuts.grow(_:)(70);
    v0._countAndFlagsBits = 0xD000000000000038;
    v0._object = (void *)0x80000002352E0FD0;
    String.append(_:)(v0);
    v1._countAndFlagsBits = 0x726576654ELL;
    v1._object = (void *)0xE500000000000000;
    String.append(_:)(v1);
    v2._countAndFlagsBits = 0x6C63206120736920;
    v2._object = (void *)0xEC0000002E737361;
    String.append(_:)(v2);
  }
  else
  {
    _StringGuts.grow(_:)(29);
    swift_bridgeObjectRelease();
  }
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t protocol witness for static _VariadicView_ViewRoot._makeViewList(root:inputs:body:) in conformance _HStackLayout@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v6;
  int v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  unint64_t v11;
  int v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v19;
  int v20;
  int v21;
  char v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  int v29;
  uint64_t v30;
  int v31;
  int v32;
  int v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  char v40;
  _QWORD v41[6];

  v6 = *(_QWORD *)a1;
  v7 = *(_DWORD *)(a1 + 8);
  v8 = *(_QWORD *)(a1 + 16);
  v9 = *(_DWORD *)(a1 + 28);
  v20 = *(_DWORD *)(a1 + 32);
  v21 = *(_DWORD *)(a1 + 24);
  v19 = *(_DWORD *)(a1 + 36);
  v10 = *(_QWORD *)(a1 + 40);
  v25 = *(_QWORD *)(a1 + 56);
  v26 = *(_QWORD *)(a1 + 48);
  v24 = *(_DWORD *)(a1 + 64);
  v23 = *(_QWORD *)(a1 + 72);
  v22 = *(_BYTE *)(a1 + 80);
  v11 = AGCreateWeakAttribute();
  v12 = v11;
  v13 = HIDWORD(v11);
  v14 = swift_allocObject();
  *(_DWORD *)(v14 + 16) = v12;
  *(_DWORD *)(v14 + 20) = v13;
  *(_QWORD *)(v14 + 24) = v4;
  *(_QWORD *)(v14 + 32) = a2;
  *(_QWORD *)(v14 + 40) = a3;
  type metadata accessor for UnaryElements<BodyUnaryViewGenerator<_ZStackLayout>>(0, &lazy cache variable for type metadata for UnaryElements<BodyUnaryViewGenerator<_HStackLayout>>, &lazy cache variable for type metadata for BodyUnaryViewGenerator<_HStackLayout>, (uint64_t)&type metadata for _HStackLayout);
  v41[3] = v15;
  v41[4] = &protocol witness table for UnaryElements<A>;
  v16 = swift_allocObject();
  v41[0] = v16;
  *(_QWORD *)(v16 + 16) = partial apply for specialized closure #1 in static _VariadicView_UnaryViewRoot._makeViewList(root:inputs:body:);
  *(_QWORD *)(v16 + 24) = v14;
  *(_QWORD *)(v16 + 32) = v6;
  *(_DWORD *)(v16 + 40) = v7;
  *(_QWORD *)(v16 + 48) = v8;
  *(_DWORD *)(v16 + 56) = v21;
  *(_DWORD *)(v16 + 60) = v9;
  *(_DWORD *)(v16 + 64) = v20;
  *(_DWORD *)(v16 + 68) = v19;
  *(_QWORD *)(v16 + 72) = v10;
  v28 = v6;
  v29 = v7;
  v30 = v8;
  v31 = v21;
  v32 = v9;
  v33 = v20;
  v34 = v19;
  v35 = v10;
  v36 = v26;
  v37 = v25;
  v38 = v24;
  v39 = v23;
  v40 = v22;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  static _ViewListOutputs.staticList(_:inputs:staticCount:)((uint64_t)v41, &v28, 1, a4);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v41);
  return swift_release();
}

void protocol witness for _VariadicView_ViewRoot.body(children:) in conformance _HStackLayout(uint64_t a1)
{
  specialized _VariadicView_ViewRoot<>.body(children:)(a1, 0x4C6B63617453485FLL);
}

uint64_t protocol witness for static _VariadicView_AnyImplicitRoot.visitType<A>(visitor:) in conformance _HStackLayout(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return static _VariadicView_ImplicitRoot.visitType<A>(visitor:)(a1, a4, a2, (uint64_t)&protocol witness table for _HStackLayout, a3);
}

double specialized _DynamicPropertyBuffer.init<A>(fields:container:inputs:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, int a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X5>, double *a7@<X8>)
{
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double result;
  int v18;
  _BYTE v19[16];
  uint64_t v20;
  double v21;

  v20 = 0;
  v21 = 0.0;
  if ((a3 & 1) != 0)
  {
    if (*(_QWORD *)(a2 + 16))
    {
      v16 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay7SwiftUI20DynamicPropertyCacheV12TaggedFieldsVG_Si3tag_AF01_fG6BufferV5linksts5NeverOTg503_s7d5UI22_fgl5V9addj37_9container6inputs10baseOffsetyAA0cD5h65V0G0V_AA11_GraphValueVyxGAA01_M6InputsVzSitlFSi3tag_AC5linkstAI06iW65VXEfU_AA13SummarySymbol33_5039765D26D33F565D3CDFCA69D19B23LLV_TG5AF01_yZ0VyAF13SummarySymbol33_5039765D26D33F565D3CDFCA69D19B23LLVGAF01_Y6InputsVTf1cn_nTm(a2, a4, a5, (uint64_t)v19, a6);
      project #1 <A><A1>(type:) in _DynamicPropertyBuffer.addFields<A>(_:container:inputs:baseOffset:)(a1, &v20, v16, 0, a6, a1);
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    v12 = *(_QWORD *)(a1 + 16);
    if (v12)
    {
      v13 = (uint64_t *)(a1 + 48);
      do
      {
        v14 = *(v13 - 1);
        v15 = *v13;
        v13 += 4;
        v18 = a4;
        (*(void (**)(uint64_t *, int *, uint64_t, uint64_t, uint64_t))(v14 + 8))(&v20, &v18, v15, a5, a6);
        --v12;
      }
      while (v12);
    }
  }
  outlined consume of DynamicPropertyCache.Fields.Layout();
  *(_QWORD *)a7 = v20;
  result = v21;
  a7[1] = v21;
  return result;
}

double specialized _DynamicPropertyBuffer.init<A>(fields:container:inputs:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, int a4@<W3>, uint64_t a5@<X4>, double *a6@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  double result;
  int v19;
  uint64_t v20;
  double v21;

  v20 = 0;
  v21 = 0.0;
  if ((a3 & 1) != 0)
  {
    if (*(_QWORD *)(a2 + 16))
    {
      v16 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay7SwiftUI20DynamicPropertyCacheV12TaggedFieldsVG_Si3tag_AF01_fG6BufferV5linksts5NeverOTg503_s7d5UI22_fgl5V9addj37_9container6inputs10baseOffsetyAA0cD5h65V0G0V_AA11_GraphValueVyxGAA01_M6InputsVzSitlFSi3tag_AC5linkstAI06iW51VXEfU_AA16SingleTapGestureVyAA13TappableEventVG_TG5AF01_yZ0VyAF16SingleTapGestureVyAF13TappableEventVGGAF01_Y6InputsVTf1cn_n(a2, a4, a5);
      type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for SingleTapGesture<TappableEvent>, (uint64_t)&type metadata for TappableEvent, (uint64_t)&protocol witness table for TappableEvent, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for SingleTapGesture);
      project #1 <A><A1>(type:) in _DynamicPropertyBuffer.addFields<A>(_:container:inputs:baseOffset:)(a1, &v20, v16, 0, v17, a1);
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    v10 = *(_QWORD *)(a1 + 16);
    if (v10)
    {
      type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for SingleTapGesture<TappableEvent>, (uint64_t)&type metadata for TappableEvent, (uint64_t)&protocol witness table for TappableEvent, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for SingleTapGesture);
      v12 = v11;
      v13 = (uint64_t *)(a1 + 48);
      do
      {
        v14 = *(v13 - 1);
        v15 = *v13;
        v13 += 4;
        v19 = a4;
        (*(void (**)(uint64_t *, int *, uint64_t, uint64_t, uint64_t))(v14 + 8))(&v20, &v19, v15, a5, v12);
        --v10;
      }
      while (v10);
    }
  }
  outlined consume of DynamicPropertyCache.Fields.Layout();
  *(_QWORD *)a6 = v20;
  result = v21;
  a6[1] = v21;
  return result;
}

uint64_t _VariadicView.Tree.root.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8) + 16))(a2, v2);
}

uint64_t _VariadicView.Tree.root.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 40))(v2, a1);
}

uint64_t (*_VariadicView.Tree.root.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t _VariadicView.Tree.content.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 24) - 8) + 16))(a2, v2 + *(int *)(a1 + 44));
}

uint64_t _VariadicView.Tree.content.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 24) - 8) + 40))(v2 + *(int *)(a2 + 44), a1);
}

uint64_t (*_VariadicView.Tree.content.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t _VariadicView.Tree.init(root:content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v11;

  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 32))(a6, a1);
  v11 = a6 + *(int *)(type metadata accessor for _VariadicView.Tree(0, a3, a4, a5) + 44);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a4 - 8) + 32))(v11, a2, a4);
}

uint64_t static _VariadicView_Root.viewListOptions.getter@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(a1 + 8))();
  *a2 = result;
  return result;
}

uint64_t static _VariadicView_Root._viewListCount(inputs:body:)()
{
  return 0;
}

void static ViewListOptionsInput.defaultValue.getter(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t static _VariadicView_ViewRoot._makeView(root:inputs:body:)@<X0>(int *a1@<X0>, uint64_t *a2@<X1>, void (*a3)(uint64_t *__return_ptr, int *, uint64_t *)@<X2>, uint64_t a4@<X4>, uint64_t a5@<X5>, _QWORD *a6@<X8>)
{
  uint64_t v6;
  int v7;
  uint64_t v8;
  int v9;
  __int128 v10;
  uint64_t v12;
  int v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  int v19;
  int v20;

  v6 = *a2;
  v7 = *((_DWORD *)a2 + 2);
  v8 = a2[2];
  v9 = *((_DWORD *)a2 + 20);
  v20 = *a1;
  v12 = v6;
  v13 = v7;
  v14 = v8;
  v10 = *(_OWORD *)(a2 + 5);
  v15 = *(_OWORD *)(a2 + 3);
  v16 = v10;
  v17 = *(_OWORD *)(a2 + 7);
  v18 = a2[9];
  v19 = v9;
  return static _VariadicView_ViewRoot.makeView(root:inputs:body:)(&v20, (uint64_t)&v12, a3, a4, a5, a6);
}

uint64_t static _VariadicView_ViewRoot._makeViewList(root:inputs:body:)(int *a1, uint64_t a2, void (*a3)(uint64_t *__return_ptr, int *, uint64_t *), uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  int v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  char v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  int v20;
  uint64_t v21;
  uint64_t AssociatedTypeWitness;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  int ShouldRecordTree;
  uint64_t AssociatedConformanceWitness;
  uint64_t v34;
  uint64_t v35;
  int v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  int v41;
  char v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  int v49;
  int v52;
  unsigned int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  uint64_t v63;
  char v64;
  uint64_t v65;
  uint64_t v66;
  char v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  int v76;
  uint64_t v77;
  char v78;
  uint64_t v79;

  v79 = *MEMORY[0x24BDAC8D0];
  v49 = *a1;
  v7 = *(_DWORD *)(a2 + 8);
  v8 = *(_QWORD *)(a2 + 16);
  v10 = *(_DWORD *)(a2 + 24);
  v9 = *(_DWORD *)(a2 + 28);
  v11 = *(_DWORD *)(a2 + 32);
  v12 = *(_DWORD *)(a2 + 36);
  v13 = *(_QWORD *)(a2 + 40);
  v45 = *(_QWORD *)(a2 + 56);
  v47 = *(_QWORD *)(a2 + 48);
  v43 = *(_DWORD *)(a2 + 64);
  v38 = *(_QWORD *)(a2 + 72);
  v14 = *(_BYTE *)(a2 + 80);
  v40 = v14;
  v68 = *(_QWORD *)a2;
  v6 = v68;
  LODWORD(v69) = v7;
  v70 = v8;
  v71 = __PAIR64__(v9, v10);
  v72 = __PAIR64__(v12, v11);
  v73 = v13;
  v74 = v47;
  v75 = v45;
  v76 = v43;
  v77 = v38;
  v78 = v14;
  a3(&v54, a1, &v68);
  v15 = *MEMORY[0x24BE096C0];
  v68 = v6;
  LODWORD(v69) = v7;
  v70 = v8;
  v71 = __PAIR64__(v9, v10);
  v72 = __PAIR64__(v12, v11);
  v74 = 0;
  v75 = 0;
  v73 = v13;
  v76 = v15;
  v77 = MEMORY[0x24BEE4B08];
  v78 = 0;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  v16 = _ViewListOutputs.makeAttribute(inputs:)(&v68);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  outlined destroy of _ViewListOutputs((uint64_t)&v54);
  static DynamicPropertyCache.fields(of:)(a5, (uint64_t)&v68);
  v18 = v68;
  v17 = v69;
  v19 = v70;
  v20 = HIDWORD(v70);
  v68 = v6;
  LODWORD(v69) = v7;
  v70 = v8;
  v71 = __PAIR64__(v9, v10);
  v72 = __PAIR64__(v12, v11);
  v73 = v13;
  v74 = v47;
  v75 = v45;
  v76 = v43;
  v77 = v38;
  v78 = v40;
  v52 = v49;
  v44 = v18;
  v46 = v17;
  v54 = v18;
  v55 = v17;
  v48 = v19;
  LOBYTE(v56) = v19;
  v36 = v20;
  HIDWORD(v56) = v20;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  static _VariadicView_ViewRoot.makeBody(root:list:inputs:fields:)(&v53, (uint64_t)&v65, &v52, v16, (uint64_t)&v68, &v54, a5, a6);
  v21 = v53;
  v34 = v65;
  v35 = v66;
  v42 = v67;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v23 = v68;
  v41 = v69;
  v24 = v70;
  v25 = v71;
  v26 = v72;
  v27 = v73;
  v39 = v74;
  v28 = v75;
  v37 = v76;
  v29 = v77;
  v30 = v78;
  ShouldRecordTree = AGSubgraphShouldRecordTree();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  if (ShouldRecordTree)
    AGSubgraphBeginTreeElement();
  LODWORD(v65) = v21;
  v54 = v23;
  LODWORD(v55) = v41;
  v56 = v24;
  v57 = v25;
  v58 = v26;
  v59 = v27;
  v60 = v39;
  v61 = v28;
  v62 = v37;
  v63 = v29;
  v64 = v30;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  (*(void (**)(uint64_t *, uint64_t *, uint64_t, uint64_t))(AssociatedConformanceWitness + 32))(&v65, &v54, AssociatedTypeWitness, AssociatedConformanceWitness);
  $defer #1 <A>() in static ViewModifier.makeDebuggableViewList(modifier:inputs:body:)(v21, AssociatedTypeWitness, AssociatedConformanceWitness);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  if ((v42 & 1) == 0)
  {
    v65 = v34;
    v66 = v35;
    v53 = v49;
    v54 = v44;
    v55 = v46;
    LOBYTE(v56) = v48;
    HIDWORD(v56) = v36;
    _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)((unint64_t)&v53, &v54, a5);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return outlined consume of DynamicPropertyCache.Fields.Layout();
}

void specialized closure #1 in static _VariadicView_UnaryViewRoot._makeViewList(root:inputs:body:)(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X4>, uint64_t a4@<X8>)
{
  uint64_t Attribute;
  int v9;
  void *v10;
  __int128 v11;
  __int128 v12;
  void (*v13)(int *, _OWORD *, uint64_t (*)(uint64_t, uint64_t *), _QWORD *, ValueMetadata *, unint64_t);
  unint64_t v14;
  id v15;
  _QWORD v16[4];
  _OWORD v17[5];
  int v18;
  int v19;

  Attribute = AGWeakAttributeGetAttribute();
  v9 = Attribute;
  if ((_DWORD)Attribute == *MEMORY[0x24BE096C0])
  {
    *(_QWORD *)a4 = MEMORY[0x24BEE4AF8];
    *(_DWORD *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 12) = Attribute;
  }
  else
  {
    MEMORY[0x24BDAC7A8](Attribute);
    v16[2] = a2;
    v16[3] = a3;
    if (one-time initialization token for shared != -1)
      swift_once();
    swift_beginAccess();
    v10 = static CoreGlue.shared;
    v11 = *(_OWORD *)(a1 + 48);
    v17[2] = *(_OWORD *)(a1 + 32);
    v17[3] = v11;
    v17[4] = *(_OWORD *)(a1 + 64);
    v18 = *(_DWORD *)(a1 + 80);
    v19 = v9;
    v12 = *(_OWORD *)(a1 + 16);
    v17[0] = *(_OWORD *)a1;
    v17[1] = v12;
    v13 = *(void (**)(int *, _OWORD *, uint64_t (*)(uint64_t, uint64_t *), _QWORD *, ValueMetadata *, unint64_t))((*MEMORY[0x24BEE4EA0] & *(_QWORD *)static CoreGlue.shared) + 0xB0);
    v14 = lazy protocol witness table accessor for type _HStackLayout and conformance _HStackLayout();
    v15 = v10;
    v13(&v19, v17, partial apply for closure #1 in closure #1 in static _VariadicView_UnaryViewRoot._makeViewList(root:inputs:body:), v16, &type metadata for _HStackLayout, v14);

  }
}

{
  uint64_t Attribute;
  int v9;
  void *v10;
  __int128 v11;
  __int128 v12;
  void (*v13)(int *, _OWORD *, uint64_t (*)(), _QWORD *, ValueMetadata *, unint64_t);
  unint64_t v14;
  id v15;
  _QWORD v16[4];
  _OWORD v17[5];
  int v18;
  int v19;

  Attribute = AGWeakAttributeGetAttribute();
  v9 = Attribute;
  if ((_DWORD)Attribute == *MEMORY[0x24BE096C0])
  {
    *(_QWORD *)a4 = MEMORY[0x24BEE4AF8];
    *(_DWORD *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 12) = Attribute;
  }
  else
  {
    MEMORY[0x24BDAC7A8](Attribute);
    v16[2] = a2;
    v16[3] = a3;
    if (one-time initialization token for shared != -1)
      swift_once();
    swift_beginAccess();
    v10 = static CoreGlue.shared;
    v11 = *(_OWORD *)(a1 + 48);
    v17[2] = *(_OWORD *)(a1 + 32);
    v17[3] = v11;
    v17[4] = *(_OWORD *)(a1 + 64);
    v18 = *(_DWORD *)(a1 + 80);
    v19 = v9;
    v12 = *(_OWORD *)(a1 + 16);
    v17[0] = *(_OWORD *)a1;
    v17[1] = v12;
    v13 = *(void (**)(int *, _OWORD *, uint64_t (*)(), _QWORD *, ValueMetadata *, unint64_t))((*MEMORY[0x24BEE4EA0] & *(_QWORD *)static CoreGlue.shared) + 0xB0);
    v14 = lazy protocol witness table accessor for type _VStackLayout and conformance _VStackLayout();
    v15 = v10;
    v13(&v19, v17, closure #1 in closure #1 in static _VariadicView_UnaryViewRoot._makeViewList(root:inputs:body:)partial apply, v16, &type metadata for _VStackLayout, v14);

  }
}

{
  uint64_t Attribute;
  int v9;
  void *v10;
  __int128 v11;
  __int128 v12;
  void (*v13)(int *, _OWORD *, uint64_t (*)(), _QWORD *, ValueMetadata *, unint64_t);
  unint64_t v14;
  id v15;
  _QWORD v16[4];
  _OWORD v17[5];
  int v18;
  int v19;

  Attribute = AGWeakAttributeGetAttribute();
  v9 = Attribute;
  if ((_DWORD)Attribute == *MEMORY[0x24BE096C0])
  {
    *(_QWORD *)a4 = MEMORY[0x24BEE4AF8];
    *(_DWORD *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 12) = Attribute;
  }
  else
  {
    MEMORY[0x24BDAC7A8](Attribute);
    v16[2] = a2;
    v16[3] = a3;
    if (one-time initialization token for shared != -1)
      swift_once();
    swift_beginAccess();
    v10 = static CoreGlue.shared;
    v11 = *(_OWORD *)(a1 + 48);
    v17[2] = *(_OWORD *)(a1 + 32);
    v17[3] = v11;
    v17[4] = *(_OWORD *)(a1 + 64);
    v18 = *(_DWORD *)(a1 + 80);
    v19 = v9;
    v12 = *(_OWORD *)(a1 + 16);
    v17[0] = *(_OWORD *)a1;
    v17[1] = v12;
    v13 = *(void (**)(int *, _OWORD *, uint64_t (*)(), _QWORD *, ValueMetadata *, unint64_t))((*MEMORY[0x24BEE4EA0] & *(_QWORD *)static CoreGlue.shared) + 0xB0);
    v14 = lazy protocol witness table accessor for type _ZStackLayout and conformance _ZStackLayout();
    v15 = v10;
    v13(&v19, v17, closure #1 in closure #1 in static _VariadicView_UnaryViewRoot._makeViewList(root:inputs:body:)partial apply, v16, &type metadata for _ZStackLayout, v14);

  }
}

uint64_t closure #1 in static _VariadicView_UnaryViewRoot._makeViewList(root:inputs:body:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X6>, uint64_t a4@<X8>)
{
  uint64_t result;
  int v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  double v15;
  _QWORD v16[3];
  uint64_t v17;
  int v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  int v24;
  int v25;

  result = AGWeakAttributeGetAttribute();
  if ((_DWORD)result == *MEMORY[0x24BE096C0])
  {
    *(_QWORD *)a4 = MEMORY[0x24BEE4AF8];
    *(_DWORD *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 12) = result;
  }
  else
  {
    v9 = *((_DWORD *)a1 + 20);
    v10 = a1[2];
    v11 = *((_DWORD *)a1 + 2);
    v16[2] = a2;
    v12 = *a1;
    v13 = _GraphValue.init(_:)(result, &v25);
    v16[1] = v16;
    v17 = v12;
    v18 = v11;
    v19 = v10;
    v14 = *(_OWORD *)(a1 + 5);
    v20 = *(_OWORD *)(a1 + 3);
    v21 = v14;
    v22 = *(_OWORD *)(a1 + 7);
    v23 = a1[9];
    v24 = v9;
    v15 = MEMORY[0x24BDAC7A8](v13);
    return (*(uint64_t (**)(int *, uint64_t *, uint64_t (*)(), double))(*(_QWORD *)(a3 + 8) + 32))(&v25, &v17, closure #1 in closure #1 in static _VariadicView_UnaryViewRoot._makeViewList(root:inputs:body:)partial apply, v15);
  }
  return result;
}

uint64_t sub_234DA82C0()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in static _VariadicView_UnaryViewRoot._makeViewList(root:inputs:body:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return closure #1 in static _VariadicView_UnaryViewRoot._makeViewList(root:inputs:body:)(a1, *(_QWORD *)(v2 + 40), *(_QWORD *)(v2 + 24), a2);
}

uint64_t closure #1 in closure #1 in static _VariadicView_UnaryViewRoot._makeViewList(root:inputs:body:)(uint64_t a1, uint64_t *a2, void (*a3)(uint64_t, uint64_t *))
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v10;
  int v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  char v19;

  v4 = *((_DWORD *)a2 + 2);
  v5 = a2[2];
  v6 = a2[5];
  v7 = *MEMORY[0x24BE096C0];
  v10 = *a2;
  v11 = v4;
  v12 = v5;
  v13 = *(_OWORD *)(a2 + 3);
  v15 = 0;
  v16 = 0;
  v14 = v6;
  v17 = v7;
  v18 = MEMORY[0x24BEE4B08];
  v19 = 0;
  swift_retain();
  swift_retain();
  v8 = swift_bridgeObjectRetain();
  a3(v8, &v10);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

uint64_t closure #1 in static _VariadicView_MultiViewRoot._makeView(root:inputs:body:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, int a5@<W4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v16;

  v16 = swift_allocObject();
  *(_QWORD *)(v16 + 16) = a6;
  *(_QWORD *)(v16 + 24) = a7;
  *(_QWORD *)(v16 + 32) = a1;
  *(_QWORD *)(v16 + 40) = a2;
  *(_QWORD *)(v16 + 48) = a4;
  *(_DWORD *)(v16 + 56) = a5;
  swift_retain();
  static _ViewOutputs.multiView(inputs:body:)(a3, (uint64_t)partial apply for closure #1 in closure #1 in static _VariadicView_MultiViewRoot._makeView(root:inputs:body:), v16, a8);
  return swift_release();
}

void specialized closure #1 in closure #1 in static _VariadicView_MultiViewRoot._makeView(root:inputs:body:)(uint64_t a1, void (*a2)(_QWORD *__return_ptr), uint64_t a3, uint64_t a4)
{
  __int128 v6;
  __int128 v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  _QWORD v12[12];
  __int128 v13;
  _BYTE v14[32];
  __int128 v15;
  __int128 v16;
  int v17;

  v6 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)&v14[16] = *(_OWORD *)(a1 + 32);
  v15 = v6;
  v16 = *(_OWORD *)(a1 + 64);
  v17 = *(_DWORD *)(a1 + 80);
  v7 = *(_OWORD *)(a1 + 16);
  v13 = *(_OWORD *)a1;
  *(_OWORD *)v14 = v7;
  a2(v12);
  v8 = *(_DWORD *)(a1 + 8);
  v9 = *(_QWORD *)(a1 + 16);
  v10 = *(_QWORD *)(a1 + 40);
  v11 = *MEMORY[0x24BE096C0];
  *(_QWORD *)&v13 = *(_QWORD *)a1;
  DWORD2(v13) = v8;
  *(_QWORD *)v14 = v9;
  *(_OWORD *)&v14[8] = *(_OWORD *)(a1 + 24);
  v15 = 0uLL;
  *(_QWORD *)&v14[24] = v10;
  LODWORD(v16) = v11;
  *((_QWORD *)&v16 + 1) = MEMORY[0x24BEE4B08];
  LOBYTE(v17) = 0;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  _ViewListOutputs.makeAttribute(inputs:)((uint64_t *)&v13);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  outlined destroy of _ViewListOutputs((uint64_t)v12);
  static DynamicPropertyCache.fields(of:)(a4, (uint64_t)&v13);
  LOBYTE(v9) = v14[0];
  outlined retain of _ViewInputs(a1);
  LOBYTE(v13) = v9;
  specialized static _VariadicView_ViewRoot.makeBody(root:list:inputs:fields:)();
}

void sub_234DA85B8()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(unsigned int *)(v0 - 176);
  _ViewInputs.implicitRootBodyInputs.getter(v0 - 176);
  if (AGSubgraphShouldRecordTree())
  {
    AGSubgraphBeginTreeElement();
    specialized static View.makeViewList(view:inputs:)(v1, v0 - 176);
  }
  specialized static View.makeViewList(view:inputs:)(v1, v0 - 176);
}

uint64_t closure #1 in closure #1 in static _VariadicView_MultiViewRoot._makeView(root:inputs:body:)(uint64_t a1, uint64_t a2, void (*a3)(uint64_t *__return_ptr, uint64_t, uint64_t *), uint64_t a4, uint64_t a5, int a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  int v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  int v21;
  uint64_t v22;
  uint64_t AssociatedTypeWitness;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char v31;
  uint64_t AssociatedConformanceWitness;
  uint64_t v34;
  uint64_t v35;
  int v36;
  int v37;
  __int128 v38;
  uint64_t v39;
  int v40;
  char v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int v44;
  unsigned int v46;
  uint64_t v47;
  unsigned int v48;
  uint64_t v49;
  unsigned int v50;
  char v51;
  unsigned int v52;
  int v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  __int128 v60;
  uint64_t v61;
  uint64_t v62;
  __int128 v63;
  unint64_t v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  __int128 v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  int v73;
  unint64_t v74;
  char v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  __int128 v79;
  uint64_t v80;
  uint64_t v81;
  __int128 v82;
  unint64_t v83;
  int v84;
  uint64_t v85;

  v85 = *MEMORY[0x24BDAC8D0];
  v9 = *(_DWORD *)(a2 + 8);
  v10 = *(_QWORD *)(a2 + 16);
  v11 = *(_DWORD *)(a2 + 24);
  v12 = *(_DWORD *)(a2 + 28);
  v14 = *(_DWORD *)(a2 + 32);
  v13 = *(_DWORD *)(a2 + 36);
  v15 = *(_QWORD *)(a2 + 40);
  v39 = *(_QWORD *)(a2 + 48);
  v50 = *(_DWORD *)(a2 + 56);
  v48 = *(_DWORD *)(a2 + 60);
  v46 = *(_DWORD *)(a2 + 64);
  v44 = *(_DWORD *)(a2 + 68);
  v43 = *(_DWORD *)(a2 + 72);
  v40 = *(_DWORD *)(a2 + 80);
  v42 = *(_DWORD *)(a2 + 76);
  v76 = *(_QWORD *)a2;
  v8 = v76;
  LODWORD(v77) = v9;
  v78 = v10;
  *(_QWORD *)&v79 = __PAIR64__(v12, v11);
  *((_QWORD *)&v79 + 1) = __PAIR64__(v13, v14);
  v80 = v15;
  v81 = v39;
  *(_QWORD *)&v82 = __PAIR64__(v48, v50);
  *((_QWORD *)&v82 + 1) = __PAIR64__(v44, v46);
  v83 = __PAIR64__(v42, v43);
  v84 = v40;
  a3(&v57, a1, &v76);
  v16 = *MEMORY[0x24BE096C0];
  v76 = v8;
  LODWORD(v77) = v9;
  v78 = v10;
  *(_QWORD *)&v79 = __PAIR64__(v12, v11);
  *((_QWORD *)&v79 + 1) = __PAIR64__(v13, v14);
  v81 = 0;
  *(_QWORD *)&v82 = 0;
  v80 = v15;
  DWORD2(v82) = v16;
  v83 = MEMORY[0x24BEE4B08];
  LOBYTE(v84) = 0;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  v17 = _ViewListOutputs.makeAttribute(inputs:)(&v76);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  outlined destroy of _ViewListOutputs((uint64_t)&v57);
  static DynamicPropertyCache.fields(of:)(a7, (uint64_t)&v76);
  v19 = v76;
  v18 = v77;
  v20 = v78;
  v21 = HIDWORD(v78);
  v76 = v8;
  LODWORD(v77) = v9;
  v78 = v10;
  *(_QWORD *)&v79 = __PAIR64__(v12, v11);
  *((_QWORD *)&v79 + 1) = __PAIR64__(v13, v14);
  v80 = v15;
  v81 = v39;
  *(_QWORD *)&v82 = __PAIR64__(v48, v50);
  *((_QWORD *)&v82 + 1) = __PAIR64__(v44, v46);
  v83 = __PAIR64__(v42, v43);
  v84 = v40;
  v55 = a6;
  v47 = v19;
  v49 = v18;
  v57 = v19;
  v58 = v18;
  v51 = v20;
  LOBYTE(v59) = v20;
  v36 = v21;
  HIDWORD(v59) = v21;
  v22 = *(_QWORD *)(a8 + 8);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  static _VariadicView_ViewRoot.makeBody(root:list:inputs:fields:)(&v56, (uint64_t)&v66, &v55, v17, (uint64_t)&v76, &v57, a7, v22);
  v52 = v56;
  v34 = v66;
  v35 = v67;
  v41 = v68;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v57 = v76;
  LODWORD(v58) = v77;
  v59 = v78;
  v60 = v79;
  v61 = v80;
  v62 = v81;
  v63 = v82;
  v64 = v83;
  v65 = v84;
  _ViewInputs.implicitRootBodyInputs.getter((uint64_t)&v66);
  v24 = v66;
  v25 = v67;
  v26 = v68;
  v38 = v69;
  v27 = v70;
  v28 = v71;
  v29 = v72;
  v37 = v73;
  v30 = v74;
  v31 = v75;
  if (AGSubgraphShouldRecordTree())
    AGSubgraphBeginTreeElement();
  v56 = v52;
  v57 = v24;
  LODWORD(v58) = v25;
  v59 = v26;
  v60 = v38;
  v61 = v27;
  v62 = v28;
  *(_QWORD *)&v63 = v29;
  DWORD2(v63) = v37;
  v64 = v30;
  LOBYTE(v65) = v31;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  (*(void (**)(int *, uint64_t *, uint64_t, uint64_t))(AssociatedConformanceWitness + 32))(&v56, &v57, AssociatedTypeWitness, AssociatedConformanceWitness);
  $defer #1 <A>() in static ViewModifier.makeDebuggableViewList(modifier:inputs:body:)(v52, AssociatedTypeWitness, AssociatedConformanceWitness);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  if ((v41 & 1) == 0)
  {
    v66 = v34;
    v67 = v35;
    v56 = a6;
    v57 = v47;
    v58 = v49;
    LOBYTE(v59) = v51;
    HIDWORD(v59) = v36;
    _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)((unint64_t)&v56, &v57, a7);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return outlined consume of DynamicPropertyCache.Fields.Layout();
}

void specialized static _VariadicView_ViewRoot.makeBody(root:list:inputs:fields:)()
{
  Swift::String v0;
  Swift::String v1;
  Swift::String v2;

  if (AGTypeGetKind() - 2 < 4)
  {
    if ((id)AGSubgraphGetCurrent())
    {
      _StringGuts.grow(_:)(29);
      swift_bridgeObjectRelease();
      goto LABEL_6;
    }
    __break(1u);
  }
  _StringGuts.grow(_:)(75);
  v0._countAndFlagsBits = 0xD00000000000003DLL;
  v0._object = (void *)0x80000002352E2EF0;
  String.append(_:)(v0);
  v1._object = (void *)0x80000002352E2F30;
  v1._countAndFlagsBits = 0xD000000000000035;
  String.append(_:)(v1);
  v2._countAndFlagsBits = 0x6C63206120736920;
  v2._object = (void *)0xEC0000002E737361;
  String.append(_:)(v2);
LABEL_6:
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void static _VariadicView_ViewRoot.makeBody(root:list:inputs:fields:)(_DWORD *a1, uint64_t a2, int *a3, int a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8)
{
  int v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  int v16;
  id v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  Swift::String v22;
  Swift::String v23;
  Swift::String v24;
  _QWORD v27[2];
  char v28;
  int v29;
  _DWORD v30[3];
  id v31;

  v12 = *a3;
  v13 = *a6;
  v14 = a6[1];
  v15 = *((_BYTE *)a6 + 16);
  v16 = *((_DWORD *)a6 + 5);
  if (AGTypeGetKind() - 2 < 4)
  {
    v17 = (id)AGSubgraphGetCurrent();
    if (v17)
    {
      v19 = v17;
      v30[0] = v12;
      v30[1] = a4;
      v31 = v17;
      v27[0] = v13;
      v27[1] = v14;
      v28 = v15;
      v29 = v16;
      v20 = type metadata accessor for ViewRootBodyAccessor(0, a7, a8, v18);
      v21 = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ViewRootBodyAccessor<A>, v20);
      BodyAccessor.makeBody(container:inputs:fields:)(a1, a2, (uint64_t)v30, a5, (uint64_t)v27, v20, v21);

      return;
    }
    __break(1u);
  }
  _StringGuts.grow(_:)(75);
  v22._object = (void *)0x80000002352E2EF0;
  v22._countAndFlagsBits = 0xD00000000000003DLL;
  String.append(_:)(v22);
  v23._countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v23);
  swift_bridgeObjectRelease();
  v24._countAndFlagsBits = 0x6C63206120736920;
  v24._object = (void *)0xEC0000002E737361;
  String.append(_:)(v24);
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t _ViewInputs.implicitRootBodyInputs.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  int *v12;
  unsigned int v13;
  int v14;
  uint64_t result;
  uint64_t v16;

  v3 = *(_QWORD *)v1;
  v4 = *(_DWORD *)(v1 + 8);
  v5 = *(_QWORD *)(v1 + 16);
  v6 = *(_QWORD *)(v1 + 24);
  v7 = *(_QWORD *)(v1 + 32);
  v8 = *(_QWORD *)(v1 + 40);
  swift_retain_n();
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  v9 = specialized find<A>(_:key:)(v3);
  if (v9)
    v10 = *(_QWORD *)(v9 + 72);
  else
    v10 = 0;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  swift_release_n();
  v11 = one-time initialization token for introduced;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  if (v11 != -1)
    swift_once();
  v12 = (int *)MEMORY[0x24BE096C0];
  v13 = static _SemanticFeature_v2.introduced;
  if (one-time initialization token for forced != -1)
    swift_once();
  v14 = *v12;
  swift_beginAccess();
  if ((byte_25426FAB4 & 1) != 0)
    result = dyld_program_sdk_at_least();
  else
    result = static Semantics.forced >= v13;
  if (result | (v10 >> 1) & 1)
    v16 = v10;
  else
    v16 = v10 | 2;
  *(_QWORD *)a1 = v3;
  *(_DWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_QWORD *)(a1 + 32) = v7;
  *(_QWORD *)(a1 + 40) = v8;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = v16;
  *(_DWORD *)(a1 + 64) = v14;
  *(_QWORD *)(a1 + 72) = MEMORY[0x24BEE4B08];
  *(_BYTE *)(a1 + 80) = 0;
  return result;
}

uint64_t _VariadicView_Children.list.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of AnyTrackedValue(v1, a1);
}

uint64_t _VariadicView_Children.list.setter(__int128 *a1)
{
  uint64_t v1;

  __swift_destroy_boxed_opaque_existential_1(v1);
  return outlined init with take of ScrollStateRequest(a1, v1);
}

uint64_t (*_VariadicView_Children.list.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

id _VariadicView_Children.contentSubgraph.getter()
{
  uint64_t v0;

  return *(id *)(v0 + 40);
}

void _VariadicView_Children.contentSubgraph.setter(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 40) = a1;
}

uint64_t (*_VariadicView_Children.contentSubgraph.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t _VariadicView_Children.transform.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_QWORD *)(v1 + 48);
  return swift_bridgeObjectRetain();
}

uint64_t _VariadicView_Children.transform.setter(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;

  v2 = *a1;
  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 48) = v2;
  return result;
}

uint64_t (*_VariadicView_Children.transform.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t _VariadicView_Children.init(_:contentSubgraph:transform:)@<X0>(__int128 *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t result;

  v6 = *a3;
  result = outlined init with take of ScrollStateRequest(a1, a4);
  *(_QWORD *)(a4 + 40) = a2;
  *(_QWORD *)(a4 + 48) = v6;
  return result;
}

uint64_t _VariadicView_Children.content.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of _VariadicView_Children(v1, a1);
}

uint64_t static _VariadicView_ViewRoot.makeView(root:inputs:body:)@<X0>(int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(uint64_t *__return_ptr, int *, uint64_t *)@<X2>, uint64_t a4@<X4>, uint64_t a5@<X5>, _QWORD *a6@<X8>)
{
  uint64_t v6;
  int v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  int v20;
  uint64_t AssociatedTypeWitness;
  int ShouldRecordTree;
  uint64_t AssociatedConformanceWitness;
  void (*v24)(_QWORD *__return_ptr, int *, uint64_t *, uint64_t, uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t result;
  uint64_t v28;
  uint64_t v29;
  int v30;
  int v31;
  int v32;
  char v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  int v39;
  int v40;
  int v41;
  unsigned int v42;
  unsigned int v43;
  int v44;
  int v45;
  unsigned int v46;
  unsigned int v47;
  _QWORD v50[2];
  int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  int v56;
  int v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  unsigned int v61;
  unsigned int v62;
  int v63;
  int v64;
  unsigned int v65;
  unsigned int v66;
  int v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  int v71;
  int v72;
  int v73;
  int v74;
  uint64_t v75;
  uint64_t v76;
  unsigned int v77;
  unsigned int v78;
  int v79;
  int v80;
  unsigned int v81;
  unsigned int v82;
  int v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  int v87;
  int v88;
  int v89;
  int v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  int v94;
  int v95;
  unint64_t v96;
  int v97;
  uint64_t v98;

  v98 = *MEMORY[0x24BDAC8D0];
  v39 = *a1;
  v7 = *(_DWORD *)(a2 + 8);
  v8 = *(_QWORD *)(a2 + 16);
  v9 = *(_DWORD *)(a2 + 24);
  v10 = *(_DWORD *)(a2 + 28);
  v11 = *(_DWORD *)(a2 + 32);
  v12 = *(_DWORD *)(a2 + 36);
  v13 = *(_QWORD *)(a2 + 40);
  v14 = *(_QWORD *)(a2 + 48);
  v46 = *(_DWORD *)(a2 + 60);
  v47 = *(_DWORD *)(a2 + 56);
  v44 = *(_DWORD *)(a2 + 68);
  v45 = *(_DWORD *)(a2 + 64);
  v42 = *(_DWORD *)(a2 + 76);
  v43 = *(_DWORD *)(a2 + 72);
  v41 = *(_DWORD *)(a2 + 80);
  v84 = *(_QWORD *)a2;
  v6 = v84;
  LODWORD(v85) = v7;
  v86 = v8;
  v87 = v9;
  v88 = v10;
  v15 = v9;
  v31 = v9;
  v89 = v11;
  v90 = v12;
  v91 = v13;
  v92 = v14;
  v93 = __PAIR64__(v46, v47);
  v94 = v45;
  v95 = v44;
  v96 = __PAIR64__(v42, v43);
  v97 = v41;
  a3(&v68, a1, &v84);
  v16 = *MEMORY[0x24BE096C0];
  v84 = v6;
  LODWORD(v85) = v7;
  v86 = v8;
  v87 = v15;
  v88 = v10;
  v89 = v11;
  v90 = v12;
  v92 = 0;
  v93 = 0;
  v91 = v13;
  v94 = v16;
  v96 = MEMORY[0x24BEE4B08];
  LOBYTE(v97) = 0;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  v32 = _ViewListOutputs.makeAttribute(inputs:)(&v84);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  outlined destroy of _ViewListOutputs((uint64_t)&v68);
  static DynamicPropertyCache.fields(of:)(a4, (uint64_t)&v84);
  v18 = v84;
  v17 = v85;
  v19 = v86;
  v20 = HIDWORD(v86);
  v84 = v6;
  v34 = v11;
  LODWORD(v85) = v7;
  v86 = v8;
  v87 = v31;
  v88 = v10;
  v89 = v11;
  v90 = v12;
  v91 = v13;
  v92 = v14;
  v93 = __PAIR64__(v46, v47);
  v94 = v45;
  v95 = v44;
  v96 = __PAIR64__(v42, v43);
  v97 = v41;
  v51 = v39;
  v35 = v18;
  v36 = v17;
  v68 = v18;
  v69 = v17;
  v37 = v19;
  LOBYTE(v70) = v19;
  v30 = v20;
  HIDWORD(v70) = v20;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  static _VariadicView_ViewRoot.makeBody(root:list:inputs:fields:)(v50, (uint64_t)&v52, &v51, v32, (uint64_t)&v84, &v68, a4, a5);
  v40 = v50[0];
  v28 = v52;
  v29 = v53;
  v33 = v54;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  ShouldRecordTree = AGSubgraphShouldRecordTree();
  if (ShouldRecordTree)
    AGSubgraphBeginTreeElement();
  v68 = v6;
  LODWORD(v69) = v7;
  v70 = v8;
  v71 = v31;
  v72 = v10;
  v75 = v13;
  v76 = v14;
  v77 = v47;
  v78 = v46;
  v79 = v45;
  v80 = v44;
  v81 = v43;
  v82 = v42;
  v83 = v41;
  v74 = v12;
  v73 = 0;
  v51 = v40;
  v52 = v6;
  LODWORD(v53) = v7;
  v54 = v8;
  v55 = v31;
  v56 = v10;
  v57 = 0;
  v58 = v12;
  v59 = v13;
  v60 = v14;
  v61 = v47;
  v62 = v46;
  v63 = v45;
  v64 = v44;
  v65 = v43;
  v66 = v42;
  v67 = v41;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v24 = *(void (**)(_QWORD *__return_ptr, int *, uint64_t *, uint64_t, uint64_t))(AssociatedConformanceWitness
                                                                                        + 24);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v24(v50, &v51, &v52, AssociatedTypeWitness, AssociatedConformanceWitness);
  v73 = v34;
  if (ShouldRecordTree)
  {
    specialized static _ViewDebug.reallyWrap<A>(_:value:inputs:)((uint64_t)v50, (uint64_t)&v68);
    AGSubgraphEndTreeElement();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  v25 = v50[0];
  v26 = v50[1];
  if ((v33 & 1) == 0)
  {
    v52 = v28;
    v53 = v29;
    LODWORD(v50[0]) = v39;
    v68 = v35;
    v69 = v36;
    LOBYTE(v70) = v37;
    HIDWORD(v70) = v30;
    _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)((unint64_t)v50, &v68, a4);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  result = outlined consume of DynamicPropertyCache.Fields.Layout();
  *a6 = v25;
  a6[1] = v26;
  return result;
}

uint64_t static _VariadicView_ViewRoot._viewListCount(inputs:)(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  _QWORD v8[2];
  int v9;
  uint64_t v10;

  v1 = *a1;
  v2 = a1[1];
  v3 = *((_DWORD *)a1 + 4);
  v4 = a1[3];
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v8[0] = v1;
  v8[1] = v2;
  v9 = v3;
  v10 = v4;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  return (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(AssociatedConformanceWitness + 40))(v8, AssociatedTypeWitness, AssociatedConformanceWitness);
}

uint64_t ViewRootBodyAccessor.updateBody(of:changed:)(uint64_t a1, char a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t AssociatedTypeWitness;
  uint64_t v16;
  uint64_t Value;
  char v18;
  char v19;
  id v21;
  int v22;
  uint64_t inited;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(char *, uint64_t, uint64_t);
  uint64_t v36;
  uint64_t v37;
  void (*v38)(char *, uint64_t);
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  __int128 v55;
  _BYTE v56[24];
  uint64_t v57;
  _BYTE v58[40];
  void *v59;
  uint64_t v60;
  _BYTE v61[40];
  uint64_t v62;

  v50 = a1;
  v62 = *MEMORY[0x24BDAC8D0];
  v10 = type metadata accessor for OSSignpostID();
  v53 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v45 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v13);
  v54 = (char *)&v45 - v14;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v52 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v51 = (char *)&v45 - v16;
  type metadata accessor for ScrollStateRequest(0, (unint64_t *)&lazy cache variable for type metadata for ViewList);
  Value = AGGraphGetValue();
  v19 = v18;
  outlined init with copy of AnyTrackedValue(Value, (uint64_t)v61);
  if ((a2 & 1) == 0 && (v19 & 1) == 0)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v61);
  v49 = AssociatedTypeWitness;
  outlined init with copy of AnyTrackedValue((uint64_t)v61, (uint64_t)v58);
  v59 = a4;
  v60 = MEMORY[0x24BEE4AF8];
  v21 = a4;
  v22 = static os_signpost_type_t.begin.getter();
  static os_signpost_type_t.event.getter();
  if (kdebug_is_enabled())
  {
    v47 = v22;
    static OSSignpostID.exclusive.getter();
    type metadata accessor for _ContiguousArrayStorage<CVarArg>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<CVarArg>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_2352828C0;
    v24 = AGTypeID.description.getter();
    v26 = v25;
    v27 = a5;
    *(_QWORD *)(inited + 56) = MEMORY[0x24BEE0D00];
    v28 = lazy protocol witness table accessor for type String and conformance String();
    *(_QWORD *)(inited + 32) = v24;
    v29 = (_QWORD *)(inited + 32);
    *(_QWORD *)(inited + 64) = v28;
    *(_QWORD *)(inited + 40) = v26;
    v48 = v27;
    *(_QWORD *)(inited + 72) = specialized static Tracing.libraryName(defining:)();
    v30 = inited + 72;
    *(_QWORD *)(inited + 96) = MEMORY[0x24BEE0D00];
    *(_QWORD *)(inited + 104) = v28;
    *(_QWORD *)(inited + 80) = v31;
    if (one-time initialization token for _signpostLog != -1)
      swift_once();
    (*(void (**)(char *, char *, uint64_t))(v53 + 16))(v12, v54, v10);
    type metadata accessor for _ContiguousArrayStorage<CVarArg?>();
    v32 = swift_initStackObject();
    v55 = xmmword_235283260;
    *(_OWORD *)(v32 + 16) = xmmword_235283260;
    if (*(_QWORD *)(inited + 16))
    {
      v33 = v32;
      outlined init with copy of AnyTrackedValue(inited + 32, v32 + 32);
      if (*(_QWORD *)(inited + 16) >= 2uLL)
      {
        v45 = inited;
        v46 = a6;
        LODWORD(inited) = v47 | 0x14110014;
        outlined init with copy of AnyTrackedValue(v30, v33 + 72);
        *(_OWORD *)(v33 + 128) = 0u;
        *(_QWORD *)(v33 + 144) = 0;
        *(_OWORD *)(v33 + 112) = 0u;
        specialized withKDebugValues(_:_:closure:)(inited, v33, inited, (uint64_t)v12);
        outlined init with copy of CVarArg?(v33 + 112, (uint64_t)v56);
        swift_bridgeObjectRelease();
        if (!v57)
        {
LABEL_16:
          outlined destroy of CVarArg?((uint64_t)v56);
          swift_bridgeObjectRelease();
          v38 = *(void (**)(char *, uint64_t))(v53 + 8);
          v38(v54, v10);
          v38(v12, v10);
          a6 = v46;
          a5 = v48;
          goto LABEL_17;
        }
        outlined destroy of CVarArg?((uint64_t)v56);
        v29 = &unk_2561AC000;
        if (one-time initialization token for continuation == -1)
        {
LABEL_11:
          v34 = __swift_project_value_buffer(v10, (uint64_t)static OSSignpostID.continuation);
          v35 = *(void (**)(char *, uint64_t, uint64_t))(v53 + 24);
          while (1)
          {
            v35(v12, v34, v10);
            v36 = swift_initStackObject();
            *(_OWORD *)(v36 + 16) = v55;
            *(_OWORD *)(v36 + 32) = 0u;
            *(_OWORD *)(v36 + 48) = 0u;
            *(_OWORD *)(v36 + 64) = 0u;
            *(_OWORD *)(v36 + 80) = 0u;
            *(_OWORD *)(v36 + 96) = 0u;
            *(_OWORD *)(v36 + 128) = 0u;
            *(_QWORD *)(v36 + 144) = 0;
            *(_OWORD *)(v36 + 112) = 0u;
            v37 = v36 + 112;
            specialized withKDebugValues(_:_:closure:)(inited, v36, inited, (uint64_t)v12);
            outlined init with copy of CVarArg?(v37, (uint64_t)v56);
            swift_bridgeObjectRelease();
            if (!v57)
              break;
            outlined destroy of CVarArg?((uint64_t)v56);
            if (v29[291] != -1)
              swift_once();
            v34 = __swift_project_value_buffer(v10, (uint64_t)static OSSignpostID.continuation);
          }
          goto LABEL_16;
        }
LABEL_20:
        swift_once();
        goto LABEL_11;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_20;
  }
LABEL_17:
  AGGraphClearUpdate();
  v39 = (uint64_t)v51;
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(a6 + 56))(v58, a5, a6);
  AGGraphSetUpdate();
  v40 = $defer #1 <A>() in traceRuleBody<A>(_:body:)();
  MEMORY[0x24BDAC7A8](v40);
  v42 = type metadata accessor for ViewRootBodyAccessor(0, a5, a6, v41);
  *(&v45 - 2) = v42;
  *(&v45 - 1) = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ViewRootBodyAccessor<A>, v42);
  v43 = v49;
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v39, (uint64_t)partial apply for closure #2 in BodyAccessor.setBody(_:), (uint64_t)(&v45 - 4), v49, MEMORY[0x24BEE4078], MEMORY[0x24BEE4AE0] + 8, MEMORY[0x24BEE40A8], v44);
  (*(void (**)(uint64_t, uint64_t))(v52 + 8))(v39, v43);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v61);
  return outlined destroy of _VariadicView_Children((uint64_t)v58);
}

uint64_t protocol witness for BodyAccessor.updateBody(of:changed:) in conformance ViewRootBodyAccessor<A>(uint64_t a1, char a2, uint64_t a3)
{
  void **v3;

  return ViewRootBodyAccessor.updateBody(of:changed:)(a1, a2, *(unsigned int *)v3, v3[1], *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24));
}

uint64_t static _VariadicView.Tree<>._makeView(view:inputs:)@<X0>(int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t (*v20)(uint64_t, uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  Swift::UInt value;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(_DWORD *, Swift::UInt *, uint64_t (*)(uint64_t, uint64_t), _QWORD *, uint64_t, uint64_t);
  _QWORD v32[6];
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  int v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  Swift::UInt v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  _DWORD v56[3];

  v43 = a6;
  v44 = a7;
  v41 = *a1;
  v10 = *(_QWORD *)a2;
  v39 = *(_DWORD *)(a2 + 8);
  v11 = *(_QWORD *)(a2 + 16);
  v12 = *(_QWORD *)(a2 + 24);
  v13 = *(_QWORD *)(a2 + 32);
  v14 = *(_QWORD *)(a2 + 40);
  v15 = *(_QWORD *)(a2 + 48);
  v16 = *(_QWORD *)(a2 + 56);
  v17 = *(_QWORD *)(a2 + 64);
  v18 = *(_QWORD *)(a2 + 72);
  v38 = *(_DWORD *)(a2 + 80);
  v19 = *(_QWORD *)(a5 + 8);
  v20 = *(uint64_t (**)(uint64_t, uint64_t))(v19 + 8);
  swift_retain();
  v42 = v11;
  swift_retain();
  v21 = v14;
  swift_bridgeObjectRetain();
  v40 = v15;
  swift_bridgeObjectRetain();
  v22 = v20(a3, v19);
  v23 = swift_retain();
  v24 = specialized find<A>(_:key:)(v23);
  if (!v24 || (value = v10, v22 != *(_QWORD *)(v24 + 72)))
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, (unint64_t *)&lazy cache variable for type metadata for TypedElement<ViewListOptionsInput>, (uint64_t)&type metadata for ViewListOptionsInput, (uint64_t)&protocol witness table for ViewListOptionsInput, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for TypedElement);
    *(_QWORD *)(swift_allocObject() + 72) = v22;
    value = PropertyList.Element.init(keyType:before:after:)((Swift::Int)&type metadata for ViewListOptionsInput, 0, v10).value;
  }
  v26 = swift_release();
  MEMORY[0x24BDAC7A8](v26);
  v34 = a3;
  v35 = a4;
  v36 = a5;
  v37 = v43;
  v27 = type metadata accessor for _VariadicView.Tree(255, a3, a4, v19);
  type metadata accessor for _GraphValue(0, v27, v28, v29);
  _GraphValue.subscript.getter((void (*)(uint64_t))partial apply for closure #1 in static _VariadicView.Tree<>._makeView(view:inputs:), a3, v56);
  v45 = value;
  v46 = v39;
  v47 = v42;
  v48 = v12;
  v49 = v13;
  v50 = v21;
  v51 = v40;
  v52 = v16;
  v53 = v17;
  v54 = v18;
  v55 = v38;
  MEMORY[0x24BDAC7A8](value);
  v32[2] = a3;
  v32[3] = a4;
  v32[4] = a5;
  v32[5] = v43;
  v33 = v41;
  v30 = *(void (**)(_DWORD *, Swift::UInt *, uint64_t (*)(uint64_t, uint64_t), _QWORD *, uint64_t, uint64_t))(a5 + 32);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v30(v56, &v45, partial apply for closure #2 in static _VariadicView.Tree<>._makeView(view:inputs:), v32, a3, a5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

uint64_t closure #2 in static _VariadicView.Tree<>._makeView(view:inputs:)(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  int ShouldRecordTree;
  int v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  char v38;
  int v39;
  unsigned int v40;

  v12 = *(_QWORD *)a2;
  v27 = *(_DWORD *)(a2 + 8);
  v13 = *(_QWORD *)(a2 + 16);
  v14 = *(_QWORD *)(a2 + 24);
  v15 = *(_QWORD *)(a2 + 32);
  v16 = *(_QWORD *)(a2 + 40);
  swift_retain_n();
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  v17 = specialized find<A>(_:key:)(v12);
  if (v17)
    v18 = *(_QWORD *)(v17 + 72);
  else
    v18 = 0;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  v19 = swift_release_n();
  MEMORY[0x24BDAC7A8](v19);
  LODWORD(v28) = a3;
  v20 = type metadata accessor for _VariadicView.Tree(255, a4, a5, *(_QWORD *)(a6 + 8));
  type metadata accessor for _GraphValue(0, v20, v21, v22);
  _GraphValue.subscript.getter((void (*)(uint64_t))partial apply for closure #1 in closure #2 in static _VariadicView.Tree<>._makeView(view:inputs:), a5, &v40);
  v23 = v40;
  v24 = *MEMORY[0x24BE096C0];
  ShouldRecordTree = AGSubgraphShouldRecordTree();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  if (ShouldRecordTree)
    AGSubgraphBeginTreeElement();
  v39 = v23;
  v28 = v12;
  v29 = v27;
  v30 = v13;
  v31 = v14;
  v32 = v15;
  v33 = v16;
  v34 = 0;
  v35 = v18;
  v36 = v24;
  v37 = MEMORY[0x24BEE4B08];
  v38 = 0;
  (*(void (**)(int *, uint64_t *, uint64_t, uint64_t))(a7 + 32))(&v39, &v28, a5, a7);
  $defer #1 <A>() in static ViewModifier.makeDebuggableViewList(modifier:inputs:body:)(v23, a5, a7);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

uint64_t static _VariadicView.Tree<>._makeViewList(view:inputs:)(int *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)(uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  Swift::UInt value;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(_DWORD *, Swift::UInt *, uint64_t (*)(uint64_t, uint64_t), uint64_t, uint64_t, uint64_t);
  char v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  int v34;
  Swift::UInt v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  char v46;
  _DWORD v47[3];

  v34 = *a1;
  v9 = *(_QWORD *)a2;
  v33 = *(_DWORD *)(a2 + 8);
  v10 = *(_QWORD *)(a2 + 16);
  v11 = *(_QWORD *)(a2 + 24);
  v12 = *(_QWORD *)(a2 + 32);
  v13 = *(_QWORD *)(a2 + 40);
  v31 = *(_QWORD *)(a2 + 56);
  v32 = *(_QWORD *)(a2 + 48);
  v30 = *(_DWORD *)(a2 + 64);
  v14 = *(_QWORD *)(a2 + 72);
  v29 = *(_BYTE *)(a2 + 80);
  v15 = *(_QWORD *)(a5 + 8);
  v16 = *(uint64_t (**)(uint64_t, uint64_t))(v15 + 8);
  swift_retain();
  swift_retain();
  v17 = v13;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v18 = v16(a3, v15);
  v19 = swift_retain();
  v20 = specialized find<A>(_:key:)(v19);
  if (!v20 || (value = v9, v18 != *(_QWORD *)(v20 + 72)))
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, (unint64_t *)&lazy cache variable for type metadata for TypedElement<ViewListOptionsInput>, (uint64_t)&type metadata for ViewListOptionsInput, (uint64_t)&protocol witness table for ViewListOptionsInput, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for TypedElement);
    *(_QWORD *)(swift_allocObject() + 72) = v18;
    value = PropertyList.Element.init(keyType:before:after:)((Swift::Int)&type metadata for ViewListOptionsInput, 0, v9).value;
  }
  v22 = swift_release();
  MEMORY[0x24BDAC7A8](v22);
  v23 = type metadata accessor for _VariadicView.Tree(255, a3, a4, v15);
  type metadata accessor for _GraphValue(0, v23, v24, v25);
  _GraphValue.subscript.getter((void (*)(uint64_t))partial apply for closure #1 in static _VariadicView.Tree<>._makeView(view:inputs:), a3, v47);
  v36 = value;
  v37 = v33;
  v38 = v10;
  v39 = v11;
  v40 = v12;
  v41 = v17;
  v42 = v32;
  v43 = v31;
  v44 = v30;
  v45 = v14;
  v46 = v29;
  v26 = swift_allocObject();
  *(_QWORD *)(v26 + 16) = a3;
  *(_QWORD *)(v26 + 24) = a4;
  *(_QWORD *)(v26 + 32) = a5;
  *(_QWORD *)(v26 + 40) = a6;
  *(_DWORD *)(v26 + 48) = v34;
  v27 = *(void (**)(_DWORD *, Swift::UInt *, uint64_t (*)(uint64_t, uint64_t), uint64_t, uint64_t, uint64_t))(a5 + 40);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v27(v47, &v36, partial apply for closure #2 in static _VariadicView.Tree<>._makeViewList(view:inputs:), v26, a3, a5);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t closure #1 in static _VariadicView.Tree<>._makeView(view:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[6];

  v12[2] = type metadata accessor for _VariadicView.Tree(0, a2, a3, *(_QWORD *)(a4 + 8));
  v12[3] = a2;
  v9 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(a1, a6, (uint64_t)v12, a2, MEMORY[0x24BEE4078], v9, MEMORY[0x24BEE40A8], v10);
  return v12[5];
}

uint64_t closure #2 in static _VariadicView.Tree<>._makeViewList(view:inputs:)(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int ShouldRecordTree;
  uint64_t v26;
  uint64_t v27;
  char v28;
  int v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  char v42;
  int v43;
  _DWORD v44[3];

  v12 = *(_QWORD *)a2;
  v31 = *(_DWORD *)(a2 + 8);
  v13 = *(_QWORD *)(a2 + 16);
  v14 = *(_QWORD *)(a2 + 24);
  v15 = *(_QWORD *)(a2 + 32);
  v16 = *(_QWORD *)(a2 + 40);
  v30 = *(_QWORD *)(a2 + 48);
  v27 = *(_QWORD *)(a2 + 56);
  v17 = *(_QWORD *)(a2 + 72);
  v28 = *(_BYTE *)(a2 + 80);
  v29 = *(_DWORD *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_retain_n();
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  v18 = specialized find<A>(_:key:)(v12);
  if (v18)
    v26 = *(_QWORD *)(v18 + 72);
  else
    v26 = 0;
  swift_bridgeObjectRelease();
  swift_release();
  v19 = swift_release_n();
  MEMORY[0x24BDAC7A8](v19);
  LODWORD(v32) = a3;
  v20 = type metadata accessor for _VariadicView.Tree(255, a4, a5, *(_QWORD *)(a6 + 8));
  type metadata accessor for _GraphValue(0, v20, v21, v22);
  _GraphValue.subscript.getter((void (*)(uint64_t))partial apply for closure #1 in closure #2 in static _VariadicView.Tree<>._makeViewList(view:inputs:), a5, v44);
  v23 = v44[0];
  ShouldRecordTree = AGSubgraphShouldRecordTree();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (ShouldRecordTree)
    AGSubgraphBeginTreeElement();
  v43 = v23;
  v32 = v12;
  v33 = v31;
  v34 = v13;
  v35 = v14;
  v36 = v15;
  v37 = v16;
  v38 = v30;
  v39 = v26 | v27;
  v40 = v29;
  v41 = v17;
  v42 = v28;
  (*(void (**)(int *, uint64_t *, uint64_t, uint64_t))(a7 + 32))(&v43, &v32, a5, a7);
  $defer #1 <A>() in static ViewModifier.makeDebuggableViewList(modifier:inputs:body:)(v23, a5, a7);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  return swift_release_n();
}

uint64_t closure #1 in closure #2 in static _VariadicView.Tree<>._makeView(view:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v14[6];

  v9 = type metadata accessor for _VariadicView.Tree(0, a2, a3, *(_QWORD *)(a4 + 8));
  v10 = a1 + *(int *)(v9 + 44);
  v14[2] = v9;
  v14[3] = a3;
  v11 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v10, a6, (uint64_t)v14, a3, MEMORY[0x24BEE4078], v11, MEMORY[0x24BEE40A8], v12);
  return v14[5];
}

uint64_t static _VariadicView.Tree<>._viewListCount(inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  Swift::UInt value;
  uint64_t v18;
  uint64_t (*v19)(_QWORD *, uint64_t (*)(uint64_t *), _QWORD *, uint64_t, uint64_t);
  uint64_t v20;
  _QWORD v22[8];
  int v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD v26[2];
  int v27;
  uint64_t v28;

  v25 = a5;
  v8 = *(_QWORD *)a1;
  v9 = *(_QWORD *)(a1 + 8);
  v10 = *(_DWORD *)(a1 + 16);
  v11 = *(_QWORD *)(a1 + 24);
  v12 = *(_QWORD *)(a4 + 8);
  v13 = *(uint64_t (**)(uint64_t, uint64_t))(v12 + 8);
  swift_retain();
  swift_bridgeObjectRetain();
  v14 = v13(a2, v12);
  v15 = swift_retain();
  v16 = specialized find<A>(_:key:)(v15);
  if (!v16 || (value = v8, v14 != *(_QWORD *)(v16 + 72)))
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, (unint64_t *)&lazy cache variable for type metadata for TypedElement<ViewListOptionsInput>, (uint64_t)&type metadata for ViewListOptionsInput, (uint64_t)&protocol witness table for ViewListOptionsInput, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for TypedElement);
    *(_QWORD *)(swift_allocObject() + 72) = v14;
    value = PropertyList.Element.init(keyType:before:after:)((Swift::Int)&type metadata for ViewListOptionsInput, 0, v8).value;
  }
  v18 = swift_release();
  v26[0] = value;
  v26[1] = v9;
  v27 = v10;
  v28 = v11;
  MEMORY[0x24BDAC7A8](v18);
  v22[2] = a2;
  v22[3] = a3;
  v22[4] = a4;
  v22[5] = v25;
  v22[6] = v8;
  v22[7] = v9;
  v23 = v10;
  v24 = v11;
  v19 = *(uint64_t (**)(_QWORD *, uint64_t (*)(uint64_t *), _QWORD *, uint64_t, uint64_t))(a4 + 48);
  swift_retain();
  swift_bridgeObjectRetain();
  v20 = v19(v26, partial apply for closure #1 in static _VariadicView.Tree<>._viewListCount(inputs:), v22, a2, a4);
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  return v20;
}

uint64_t closure #1 in static _VariadicView.Tree<>._viewListCount(inputs:)(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD v19[2];
  int v20;
  uint64_t v21;

  v11 = *a1;
  v12 = a1[1];
  v13 = *((_DWORD *)a1 + 4);
  v14 = a1[3];
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain_n();
  swift_bridgeObjectRetain();
  v15 = specialized find<A>(_:key:)(a2);
  if (v15)
    v16 = *(_QWORD *)(v15 + 72);
  else
    v16 = 0;
  swift_bridgeObjectRelease();
  swift_release_n();
  v19[0] = v11;
  v19[1] = v16 | v12;
  v20 = v13;
  v21 = v14;
  v17 = (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(a9 + 40))(v19, a7, a9);
  swift_bridgeObjectRelease();
  swift_release();
  return v17;
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance <> _VariadicView.Tree<A, B>@<X0>(int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  return static _VariadicView.Tree<>._makeView(view:inputs:)(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24), *(_QWORD *)(a4 - 8), *(_QWORD *)(a4 - 16), a5);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance <> _VariadicView.Tree<A, B>(int *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return static _VariadicView.Tree<>._makeViewList(view:inputs:)(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24), *(_QWORD *)(a4 - 8), *(_QWORD *)(a4 - 16));
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance <> _VariadicView.Tree<A, B>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return static _VariadicView.Tree<>._viewListCount(inputs:)(a1, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), *(_QWORD *)(a3 - 8), *(_QWORD *)(a3 - 16));
}

uint64_t _ViewInputs.implicitRootType.getter()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;

  v1 = *v0;
  swift_retain_n();
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  v2 = specialized find<A>(_:key:)(v1);
  if (v2)
  {
    v3 = (uint64_t *)(v2 + 72);
  }
  else
  {
    v3 = &static ImplicitRootType.defaultValue;
    if (one-time initialization token for defaultValue != -1)
      swift_once();
  }
  v4 = *v3;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  swift_release_n();
  return v4;
}

uint64_t key path getter for _ViewInputs.implicitRootType : _ViewInputs@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = _ViewInputs.implicitRootType.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t key path setter for _ViewInputs.implicitRootType : _ViewInputs(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *a1;
  v4 = a1[1];
  swift_retain();
  specialized closure #1 in PropertyList.subscript.setter(a2, v3, v4);
  return swift_release();
}

uint64_t (*_ViewInputs.implicitRootType.modify(_QWORD *a1))()
{
  uint64_t *v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;

  v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = v1;
  v4 = *v1;
  swift_retain_n();
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  v5 = specialized find<A>(_:key:)(v4);
  if (v5)
  {
    v6 = (uint64_t *)(v5 + 72);
    v7 = (uint64_t *)(v5 + 80);
  }
  else
  {
    v6 = &static ImplicitRootType.defaultValue;
    v7 = (uint64_t *)&off_25426D1D0;
    if (one-time initialization token for defaultValue != -1)
      swift_once();
  }
  v8 = *v7;
  v9 = *v6;
  swift_release_n();
  swift_release_n();
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease();
  *v3 = v9;
  v3[1] = v8;
  return _ViewInputs.implicitRootType.modify;
}

uint64_t _ViewListInputs.implicitRootType.getter()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;

  v1 = *v0;
  swift_bridgeObjectRetain();
  swift_retain_n();
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  v2 = specialized find<A>(_:key:)(v1);
  if (v2)
  {
    v3 = (uint64_t *)(v2 + 72);
  }
  else
  {
    v3 = &static ImplicitRootType.defaultValue;
    if (one-time initialization token for defaultValue != -1)
      swift_once();
  }
  v4 = *v3;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  swift_release_n();
  return v4;
}

uint64_t key path getter for _ViewListInputs.implicitRootType : _ViewListInputs@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = _ViewListInputs.implicitRootType.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t _ViewListInputs.implicitRootType.setter(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;

  swift_retain();
  specialized closure #1 in PropertyList.subscript.setter(v2, a1, a2);
  return swift_release();
}

uint64_t (*_ViewListInputs.implicitRootType.modify(_QWORD *a1))()
{
  uint64_t *v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;

  v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = v1;
  v4 = *v1;
  swift_bridgeObjectRetain();
  swift_retain_n();
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  v5 = specialized find<A>(_:key:)(v4);
  if (v5)
  {
    v6 = (uint64_t *)(v5 + 72);
    v7 = (uint64_t *)(v5 + 80);
  }
  else
  {
    v6 = &static ImplicitRootType.defaultValue;
    v7 = (uint64_t *)&off_25426D1D0;
    if (one-time initialization token for defaultValue != -1)
      swift_once();
  }
  v8 = *v7;
  v9 = *v6;
  swift_release_n();
  swift_release_n();
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease();
  *v3 = v9;
  v3[1] = v8;
  return _ViewInputs.implicitRootType.modify;
}

void _ViewInputs.implicitRootType.modify(uint64_t **a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *a1;
  v2 = (uint64_t *)(*a1)[4];
  v3 = **a1;
  v4 = (*a1)[1];
  swift_retain();
  specialized closure #1 in PropertyList.subscript.setter(v2, v3, v4);
  swift_release();
  free(v1);
}

double protocol witness for static PropertyKey.defaultValue.getter in conformance ImplicitRootType@<D0>(_OWORD *a1@<X8>)
{
  double result;

  if (one-time initialization token for defaultValue != -1)
    swift_once();
  result = *(double *)&static ImplicitRootType.defaultValue;
  *a1 = *(_OWORD *)&static ImplicitRootType.defaultValue;
  return result;
}

uint64_t static _ViewOutputs.multiView<A>(applying:inputs:body:)@<X0>(int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t (*v21)(int *, uint64_t, _UNKNOWN **, uint64_t, uint64_t);
  uint64_t v22;
  uint64_t ModifiedRoot;
  uint64_t result;
  uint64_t v25;
  int v26;
  unint64_t v27;
  int v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  int v36;
  __int128 v37;
  uint64_t v38;
  unint64_t v39;
  int v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  uint64_t v47;
  int v48;
  __int128 v49;
  uint64_t v50;
  unint64_t v51;

  v10 = *(_QWORD *)a2;
  v11 = *(_DWORD *)(a2 + 8);
  v12 = *(_QWORD *)(a2 + 16);
  v13 = *(_QWORD *)(a2 + 40);
  v14 = *(_QWORD *)(a2 + 48);
  v15 = *(_DWORD *)(a2 + 80);
  v40 = *a1;
  v41 = v10;
  v42 = v11;
  v43 = v12;
  v44 = *(_OWORD *)(a2 + 24);
  *(_QWORD *)&v45 = v13;
  *((_QWORD *)&v45 + 1) = v14;
  v46 = *(_OWORD *)(a2 + 56);
  v47 = *(_QWORD *)(a2 + 72);
  v48 = v15;
  *(_QWORD *)&v49 = a3;
  *((_QWORD *)&v49 + 1) = a4;
  v50 = 0;
  v51 = 0;
  swift_retain();
  swift_retain_n();
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  v16 = specialized find<A>(_:key:)(v10);
  if (v16)
  {
    v17 = (uint64_t *)(v16 + 72);
    v18 = (uint64_t *)(v16 + 80);
  }
  else
  {
    v17 = &static ImplicitRootType.defaultValue;
    v18 = (uint64_t *)&off_25426D1D0;
    if (one-time initialization token for defaultValue != -1)
      swift_once();
  }
  v19 = *v18;
  v20 = *v17;
  swift_bridgeObjectRelease();
  swift_release();
  swift_release_n();
  v21 = *(uint64_t (**)(int *, uint64_t, _UNKNOWN **, uint64_t, uint64_t))(v19 + 8);
  ModifiedRoot = type metadata accessor for MakeModifiedRoot(0, a5, a6, v22);
  result = v21(&v40, ModifiedRoot, &protocol witness table for MakeModifiedRoot<A>, v20, v19);
  v25 = v50;
  if (v50)
  {
    v26 = v51;
    v27 = HIDWORD(v51);
    v28 = v40;
    v29 = v41;
    v30 = v42;
    v31 = v43;
    v32 = v44;
    v33 = v45;
    v34 = v46;
    v35 = v47;
    v36 = v48;
    v37 = v49;
    v38 = v50;
    v39 = v51;
    swift_bridgeObjectRetain();
    result = outlined release of MakeModifiedRoot<A>((uint64_t)&v28);
    *(_QWORD *)a7 = v25;
    *(_DWORD *)(a7 + 8) = v26;
    *(_DWORD *)(a7 + 12) = v27;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t closure #1 in static View.makeImplicitRoot(view:inputs:)(uint64_t a1, uint64_t *a2, unsigned int a3, uint64_t a4, uint64_t a5)
{
  int v6;
  uint64_t v7;
  int v8;
  __int128 v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  char v17;
  uint64_t v19;
  __int128 v20;
  unsigned int v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  char v41;

  v6 = *((_DWORD *)a2 + 2);
  v7 = a2[2];
  v8 = *((_DWORD *)a2 + 20);
  v24 = *a2;
  v25 = v6;
  v26 = v7;
  v9 = *(_OWORD *)(a2 + 5);
  v27 = *(_OWORD *)(a2 + 3);
  v28 = v9;
  v29 = *(_OWORD *)(a2 + 7);
  v30 = a2[9];
  v31 = v8;
  _ViewInputs.implicitRootBodyInputs.getter((uint64_t)&v32);
  v10 = v32;
  v11 = v33;
  v12 = v34;
  v20 = v35;
  v13 = v36;
  v14 = v37;
  v19 = v38;
  v15 = v39;
  v16 = v40;
  v17 = v41;
  if (AGSubgraphShouldRecordTree())
    AGSubgraphBeginTreeElement();
  v23 = a3;
  v24 = v10;
  v25 = v11;
  v26 = v12;
  v27 = v20;
  *(_QWORD *)&v28 = v13;
  *((_QWORD *)&v28 + 1) = v14;
  *(_QWORD *)&v29 = v19;
  DWORD2(v29) = v15;
  v30 = v16;
  LOBYTE(v31) = v17;
  (*(void (**)(unsigned int *, uint64_t *, uint64_t, uint64_t))(a5 + 32))(&v23, &v24, a4, a5);
  $defer #1 <A>() in static ViewModifier.makeDebuggableViewList(modifier:inputs:body:)(a3, a4, a5);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t static ViewModifier.makeImplicitRoot(modifier:inputs:body:)@<X0>(int *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v19;
  int v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  int v26;
  int v27;

  v12 = *a2;
  v13 = *((_DWORD *)a2 + 2);
  v14 = a2[2];
  v15 = *((_DWORD *)a2 + 20);
  v27 = *a1;
  v19 = v12;
  v20 = v13;
  v21 = v14;
  v16 = *(_OWORD *)(a2 + 5);
  v22 = *(_OWORD *)(a2 + 3);
  v23 = v16;
  v24 = *(_OWORD *)(a2 + 7);
  v25 = a2[9];
  v26 = v15;
  v17 = swift_allocObject();
  *(_QWORD *)(v17 + 16) = a3;
  *(_QWORD *)(v17 + 24) = a4;
  swift_retain();
  static _ViewOutputs.multiView<A>(applying:inputs:body:)(&v27, (uint64_t)&v19, (uint64_t)partial apply for closure #1 in static ViewModifier.makeImplicitRoot(modifier:inputs:body:), v17, a5, a6, a7);
  return swift_release();
}

uint64_t closure #1 in static ViewModifier.makeImplicitRoot(modifier:inputs:body:)(uint64_t a1, uint64_t *a2, void (*a3)(uint64_t, uint64_t *))
{
  int v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v9;
  int v10;
  uint64_t v11;
  __int128 v12;
  _BYTE v13[32];
  uint64_t v14;
  int v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  __int128 v21;
  int v22;
  uint64_t v23;
  char v24;

  v4 = *((_DWORD *)a2 + 2);
  v5 = a2[2];
  v6 = *((_DWORD *)a2 + 20);
  v9 = *a2;
  v10 = v4;
  v11 = v5;
  v12 = *(_OWORD *)(a2 + 3);
  *(_OWORD *)v13 = *(_OWORD *)(a2 + 5);
  *(_OWORD *)&v13[16] = *(_OWORD *)(a2 + 7);
  v15 = v6;
  v7 = _ViewInputs.implicitRootBodyInputs.getter((uint64_t)&v16);
  v9 = v16;
  v10 = v17;
  v11 = v18;
  v12 = v19;
  *(_QWORD *)v13 = v20;
  *(_OWORD *)&v13[8] = v21;
  *(_DWORD *)&v13[24] = v22;
  v14 = v23;
  LOBYTE(v15) = v24;
  a3(v7, &v9);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t MakeViewRoot.visit<A>(type:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  Swift::UInt v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t);
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t (*v29)(uint64_t, uint64_t);
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  Swift::UInt value;
  uint64_t v34;
  uint64_t v35;
  void (*v36)(_QWORD *__return_ptr, int *, Swift::UInt *, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v37;
  uint64_t v38;
  uint64_t result;
  int v40;
  int v41;
  unsigned int v42;
  int v43;
  _QWORD v44[2];
  Swift::UInt v45;
  int v46;
  uint64_t v47;
  __int128 v48;
  uint64_t v49;
  uint64_t v50;
  __int128 v51;
  uint64_t v52;
  int v53;

  v4 = v3;
  v7 = *(_QWORD *)(a2 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v9 = (char *)&v40 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(_QWORD *)v3;
  LODWORD(v8) = *(_DWORD *)(v3 + 8);
  v11 = *(_QWORD *)(v3 + 16);
  v12 = *(_QWORD *)(v4 + 40);
  v13 = *(_QWORD *)(v4 + 48);
  v14 = *(_DWORD *)(v4 + 80);
  v45 = v10;
  v46 = v8;
  v47 = v11;
  v48 = *(_OWORD *)(v4 + 24);
  v49 = v12;
  v50 = v13;
  v51 = *(_OWORD *)(v4 + 56);
  v52 = *(_QWORD *)(v4 + 72);
  v53 = v14;
  v16 = *(void (**)(uint64_t, uint64_t))(v15 + 24);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v16(a2, a3);
  LOBYTE(v44[0]) = 1;
  v42 = _ViewInputs.intern<A>(_:id:)((uint64_t)v9, (char *)v44, a2);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, a2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  v17 = *(_QWORD *)v4;
  v18 = *(_DWORD *)(v4 + 8);
  v19 = *(_QWORD *)(v4 + 16);
  v20 = *(_QWORD *)(v4 + 24);
  v21 = *(_QWORD *)(v4 + 32);
  v22 = *(_QWORD *)(v4 + 40);
  v23 = *(_QWORD *)(v4 + 48);
  v24 = *(_QWORD *)(v4 + 56);
  v25 = *(_QWORD *)(v4 + 64);
  v26 = *(_QWORD *)(v4 + 72);
  v40 = *(_DWORD *)(v4 + 80);
  v41 = v18;
  v27 = *(_QWORD *)(a3 + 16);
  v28 = *(_QWORD *)(v27 + 8);
  v29 = *(uint64_t (**)(uint64_t, uint64_t))(v28 + 8);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v30 = v29(a2, v28);
  v31 = swift_retain();
  v32 = specialized find<A>(_:key:)(v31);
  if (!v32 || (value = v17, v30 != *(_QWORD *)(v32 + 72)))
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, (unint64_t *)&lazy cache variable for type metadata for TypedElement<ViewListOptionsInput>, (uint64_t)&type metadata for ViewListOptionsInput, (uint64_t)&protocol witness table for ViewListOptionsInput, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for TypedElement);
    *(_QWORD *)(swift_allocObject() + 72) = v30;
    value = PropertyList.Element.init(keyType:before:after:)((Swift::Int)&type metadata for ViewListOptionsInput, 0, v17).value;
  }
  swift_release();
  _GraphValue.init(_:)(v42, &v43);
  v45 = value;
  v46 = v41;
  v47 = v19;
  *(_QWORD *)&v48 = v20;
  *((_QWORD *)&v48 + 1) = v21;
  v49 = v22;
  v50 = v23;
  *(_QWORD *)&v51 = v24;
  *((_QWORD *)&v51 + 1) = v25;
  v52 = v26;
  v53 = v40;
  v34 = *(_QWORD *)(v4 + 88);
  v35 = *(_QWORD *)(v4 + 96);
  v36 = *(void (**)(_QWORD *__return_ptr, int *, Swift::UInt *, uint64_t, uint64_t, uint64_t, uint64_t))(v27 + 32);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v36(v44, &v43, &v45, v34, v35, a2, v27);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  swift_release_n();
  v37 = v44[0];
  v38 = v44[1];
  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v4 + 104) = v37;
  *(_QWORD *)(v4 + 112) = v38;
  return result;
}

uint64_t MakeModifiedRoot.visit<A>(type:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int *v4;
  int *v5;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  Swift::UInt v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  void (*v17)(uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t (*v23)(uint64_t, uint64_t);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  Swift::UInt value;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char ShouldRecordTree;
  uint64_t v36;
  void (*v37)(_QWORD *__return_ptr, int *, Swift::UInt *, uint64_t (*)(uint64_t, uint64_t *), uint64_t, uint64_t, uint64_t);
  uint64_t v38;
  uint64_t v39;
  uint64_t result;
  uint64_t v41;
  int v42;
  int v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int v46;
  unsigned int v47;
  unsigned int v48;
  unsigned int v49;
  unsigned int v50;
  unsigned int v51;
  int v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  int v58;
  int v59;
  _QWORD v60[2];
  Swift::UInt v61;
  int v62;
  uint64_t v63;
  unsigned int v64;
  uint64_t v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  unsigned int v69;
  unsigned int v70;
  unsigned int v71;
  unsigned int v72;
  unsigned int v73;
  unsigned int v74;
  int v75;
  Swift::UInt v76;
  int v77;
  uint64_t v78;
  __int128 v79;
  uint64_t v80;
  uint64_t v81;
  __int128 v82;
  unint64_t v83;
  int v84;
  uint64_t v85;

  v5 = v4;
  v55 = a2;
  v85 = *MEMORY[0x24BDAC8D0];
  v8 = *(_QWORD *)(a3 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v10 = (char *)&v41 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *((_QWORD *)v4 + 1);
  LODWORD(v9) = v4[4];
  v12 = *((_QWORD *)v4 + 3);
  v13 = *((_QWORD *)v5 + 6);
  v14 = *((_QWORD *)v5 + 7);
  v15 = v5[22];
  v76 = v11;
  v77 = v9;
  v78 = v12;
  v79 = *((_OWORD *)v5 + 2);
  v80 = v13;
  v81 = v14;
  v82 = *((_OWORD *)v5 + 4);
  v83 = *((_QWORD *)v5 + 10);
  v84 = v15;
  v17 = *(void (**)(uint64_t, uint64_t))(v16 + 24);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v17(a3, a4);
  LOBYTE(v61) = 1;
  v42 = _ViewInputs.intern<A>(_:id:)((uint64_t)v10, (char *)&v61, a3);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, a3);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  v18 = *((_QWORD *)v5 + 1);
  v53 = v5[4];
  v19 = *((_QWORD *)v5 + 3);
  v51 = v5[8];
  v50 = v5[9];
  v57 = v5[10];
  v52 = v5[11];
  v20 = *((_QWORD *)v5 + 6);
  v21 = *((_QWORD *)v5 + 7);
  v49 = v5[16];
  v48 = v5[17];
  v47 = v5[18];
  v46 = v5[19];
  v45 = v5[20];
  v44 = v5[21];
  v43 = v5[22];
  v56 = a4;
  v22 = *(_QWORD *)(*(_QWORD *)(a4 + 16) + 8);
  v23 = *(uint64_t (**)(uint64_t, uint64_t))(v22 + 8);
  swift_retain();
  v54 = v19;
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v24 = v23(a3, v22);
  v25 = swift_retain();
  v26 = specialized find<A>(_:key:)(v25);
  if (!v26 || (value = v18, v24 != *(_QWORD *)(v26 + 72)))
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, (unint64_t *)&lazy cache variable for type metadata for TypedElement<ViewListOptionsInput>, (uint64_t)&type metadata for ViewListOptionsInput, (uint64_t)&protocol witness table for ViewListOptionsInput, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for TypedElement);
    *(_QWORD *)(swift_allocObject() + 72) = v24;
    value = PropertyList.Element.init(keyType:before:after:)((Swift::Int)&type metadata for ViewListOptionsInput, 0, v18).value;
  }
  swift_release();
  v28 = v55;
  v29 = *(_QWORD *)(v55 + 16);
  v58 = *v5;
  v30 = *((_QWORD *)v5 + 12);
  v31 = *((_QWORD *)v5 + 13);
  v32 = swift_allocObject();
  *(_QWORD *)(v32 + 16) = v29;
  *(_QWORD *)(v32 + 24) = a3;
  v33 = *(_QWORD *)(v28 + 24);
  v34 = v56;
  *(_QWORD *)(v32 + 32) = v33;
  *(_QWORD *)(v32 + 40) = v34;
  *(_DWORD *)(v32 + 48) = v42;
  *(_QWORD *)(v32 + 56) = v30;
  *(_QWORD *)(v32 + 64) = v31;
  ShouldRecordTree = AGSubgraphShouldRecordTree();
  swift_retain();
  v36 = v54;
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  if ((ShouldRecordTree & 1) != 0)
    AGSubgraphBeginTreeElement();
  v76 = value;
  v77 = v53;
  v78 = v36;
  *(_QWORD *)&v79 = __PAIR64__(v50, v51);
  v80 = v20;
  v81 = v21;
  HIDWORD(v79) = v52;
  *(_QWORD *)&v82 = __PAIR64__(v48, v49);
  *((_QWORD *)&v82 + 1) = __PAIR64__(v46, v47);
  v83 = __PAIR64__(v44, v45);
  v84 = v43;
  v59 = v58;
  v61 = value;
  v62 = v53;
  v63 = v36;
  v64 = v51;
  v65 = v50;
  v66 = v52;
  v67 = v20;
  v68 = v21;
  v69 = v49;
  v70 = v48;
  v71 = v47;
  v72 = v46;
  v73 = v45;
  v74 = v44;
  v75 = v43;
  v37 = *(void (**)(_QWORD *__return_ptr, int *, Swift::UInt *, uint64_t (*)(uint64_t, uint64_t *), uint64_t, uint64_t, uint64_t))(v33 + 24);
  swift_retain_n();
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  v37(v60, &v59, &v61, partial apply for closure #1 in MakeModifiedRoot.visit<A>(type:), v32, v29, v33);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  DWORD2(v79) = v57;
  if ((ShouldRecordTree & 1) != 0)
  {
    specialized static _ViewDebug.reallyWrap<A>(_:value:inputs:)((uint64_t)v60, (uint64_t)&v76);
    AGSubgraphEndTreeElement();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_release();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_release_n();
  }
  swift_release();
  swift_release();
  v38 = v60[0];
  v39 = v60[1];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  result = swift_bridgeObjectRelease();
  *((_QWORD *)v5 + 14) = v38;
  *((_QWORD *)v5 + 15) = v39;
  return result;
}

uint64_t closure #1 in MakeModifiedRoot.visit<A>(type:)(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v13;
  int v14;
  uint64_t v15;
  int v16;
  __int128 v17;
  uint64_t v19;
  int v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  int v26;
  int v27;

  v13 = *a2;
  v14 = *((_DWORD *)a2 + 2);
  v15 = a2[2];
  v16 = *((_DWORD *)a2 + 20);
  _GraphValue.init(_:)(a3, &v27);
  v19 = v13;
  v20 = v14;
  v21 = v15;
  v17 = *(_OWORD *)(a2 + 5);
  v22 = *(_OWORD *)(a2 + 3);
  v23 = v17;
  v24 = *(_OWORD *)(a2 + 7);
  v25 = a2[9];
  v26 = v16;
  return (*(uint64_t (**)(int *, uint64_t *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a9 + 16) + 32))(&v27, &v19, a4, a5, a7);
}

uint64_t protocol witness for _VariadicView_ImplicitRootVisitor.visit<A>(type:) in conformance MakeModifiedRoot<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MakeModifiedRoot.visit<A>(type:)(a1, a4, a2, a3);
}

uint64_t specialized project #1 <A><A1>(flags:) in closure #1 in BodyAccessor.makeBody(container:inputs:fields:)(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, int a6, uint64_t a7)
{
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int v21;
  int v22;
  int v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  outlined copy of DynamicPropertyCache.Fields.Layout();
  specialized _DynamicPropertyBuffer.init<A>(fields:container:inputs:)(a3, a4, a5 & 1, a6, a7, (uint64_t)&type metadata for Rectangle.AsymmetricalInset, (double *)&v19);
  v14 = v19;
  v16 = v20;
  v15 = HIDWORD(v20);
  if (HIDWORD(v20))
  {
    v19 = __PAIR64__(*(_DWORD *)(a7 + 24), a6);
    v20 = v14;
    v21 = v16;
    v22 = v15;
    v23 = 0;
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for _ShapeView<Rectangle.AsymmetricalInset, ForegroundStyle>();
    type metadata accessor for DynamicBody<ViewBodyAccessor<Rectangle.AsymmetricalInset>, AsyncThreadFlags>();
    lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type DynamicBody<ViewBodyAccessor<Rectangle.AsymmetricalInset>, AsyncThreadFlags> and conformance DynamicBody<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for DynamicBody<ViewBodyAccessor<Rectangle.AsymmetricalInset>, AsyncThreadFlags>, (uint64_t)&protocol conformance descriptor for DynamicBody<A, B>);
    result = Attribute.init<A>(body:value:flags:update:)();
    v18 = v16 | (v15 << 32);
  }
  else
  {
    v20 = v20;
    _DynamicPropertyBuffer.destroy()();
    LODWORD(v19) = a6;
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for _ShapeView<Rectangle.AsymmetricalInset, ForegroundStyle>();
    type metadata accessor for StaticBody<ViewBodyAccessor<Rectangle.AsymmetricalInset>, AsyncThreadFlags>();
    lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type StaticBody<ViewBodyAccessor<Rectangle.AsymmetricalInset>, AsyncThreadFlags> and conformance StaticBody<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for StaticBody<ViewBodyAccessor<Rectangle.AsymmetricalInset>, AsyncThreadFlags>, (uint64_t)&protocol conformance descriptor for StaticBody<A, B>);
    result = Attribute.init<A>(body:value:flags:update:)();
    v14 = 0;
    v18 = 0;
  }
  *a1 = result;
  *(_QWORD *)a2 = v14;
  *(_QWORD *)(a2 + 8) = v18;
  *(_BYTE *)(a2 + 16) = (_DWORD)v15 == 0;
  return result;
}

{
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int v21;
  int v22;
  int v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  outlined copy of DynamicPropertyCache.Fields.Layout();
  specialized _DynamicPropertyBuffer.init<A>(fields:container:inputs:)(a3, a4, a5 & 1, a6, a7, (uint64_t)&type metadata for Rectangle.AsymmetricalInset, (double *)&v19);
  v14 = v19;
  v16 = v20;
  v15 = HIDWORD(v20);
  if (HIDWORD(v20))
  {
    v19 = __PAIR64__(*(_DWORD *)(a7 + 24), a6);
    v20 = v14;
    v21 = v16;
    v22 = v15;
    v23 = 0;
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for _ShapeView<Rectangle.AsymmetricalInset, ForegroundStyle>();
    type metadata accessor for DynamicBody<ViewBodyAccessor<Rectangle.AsymmetricalInset>, MainThreadFlags>();
    lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type DynamicBody<ViewBodyAccessor<Rectangle.AsymmetricalInset>, MainThreadFlags> and conformance DynamicBody<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for DynamicBody<ViewBodyAccessor<Rectangle.AsymmetricalInset>, MainThreadFlags>, (uint64_t)&protocol conformance descriptor for DynamicBody<A, B>);
    result = Attribute.init<A>(body:value:flags:update:)();
    v18 = v16 | (v15 << 32);
  }
  else
  {
    v20 = v20;
    _DynamicPropertyBuffer.destroy()();
    LODWORD(v19) = a6;
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for _ShapeView<Rectangle.AsymmetricalInset, ForegroundStyle>();
    type metadata accessor for StaticBody<ViewBodyAccessor<Rectangle.AsymmetricalInset>, MainThreadFlags>();
    lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type StaticBody<ViewBodyAccessor<Rectangle.AsymmetricalInset>, MainThreadFlags> and conformance StaticBody<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for StaticBody<ViewBodyAccessor<Rectangle.AsymmetricalInset>, MainThreadFlags>, (uint64_t)&protocol conformance descriptor for StaticBody<A, B>);
    result = Attribute.init<A>(body:value:flags:update:)();
    v14 = 0;
    v18 = 0;
  }
  *a1 = result;
  *(_QWORD *)a2 = v14;
  *(_QWORD *)(a2 + 8) = v18;
  *(_BYTE *)(a2 + 16) = (_DWORD)v15 == 0;
  return result;
}

{
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int v21;
  int v22;
  int v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  outlined copy of DynamicPropertyCache.Fields.Layout();
  specialized _DynamicPropertyBuffer.init<A>(fields:container:inputs:)(a3, a4, a5 & 1, a6, a7, (uint64_t)&type metadata for CombinedContentShape, (double *)&v19);
  v14 = v19;
  v16 = v20;
  v15 = HIDWORD(v20);
  if (HIDWORD(v20))
  {
    v19 = __PAIR64__(*(_DWORD *)(a7 + 24), a6);
    v20 = v14;
    v21 = v16;
    v22 = v15;
    v23 = 0;
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for _ShapeView<CombinedContentShape, ForegroundStyle>();
    type metadata accessor for DynamicBody<ViewBodyAccessor<CombinedContentShape>, AsyncThreadFlags>();
    lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type DynamicBody<ViewBodyAccessor<CombinedContentShape>, AsyncThreadFlags> and conformance DynamicBody<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for DynamicBody<ViewBodyAccessor<CombinedContentShape>, AsyncThreadFlags>, (uint64_t)&protocol conformance descriptor for DynamicBody<A, B>);
    result = Attribute.init<A>(body:value:flags:update:)();
    v18 = v16 | (v15 << 32);
  }
  else
  {
    v20 = v20;
    _DynamicPropertyBuffer.destroy()();
    LODWORD(v19) = a6;
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for _ShapeView<CombinedContentShape, ForegroundStyle>();
    type metadata accessor for StaticBody<ViewBodyAccessor<CombinedContentShape>, AsyncThreadFlags>();
    lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type StaticBody<ViewBodyAccessor<CombinedContentShape>, AsyncThreadFlags> and conformance StaticBody<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for StaticBody<ViewBodyAccessor<CombinedContentShape>, AsyncThreadFlags>, (uint64_t)&protocol conformance descriptor for StaticBody<A, B>);
    result = Attribute.init<A>(body:value:flags:update:)();
    v14 = 0;
    v18 = 0;
  }
  *a1 = result;
  *(_QWORD *)a2 = v14;
  *(_QWORD *)(a2 + 8) = v18;
  *(_BYTE *)(a2 + 16) = (_DWORD)v15 == 0;
  return result;
}

{
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int v21;
  int v22;
  int v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  outlined copy of DynamicPropertyCache.Fields.Layout();
  specialized _DynamicPropertyBuffer.init<A>(fields:container:inputs:)(a3, a4, a5 & 1, a6, a7, (uint64_t)&type metadata for CombinedContentShape, (double *)&v19);
  v14 = v19;
  v16 = v20;
  v15 = HIDWORD(v20);
  if (HIDWORD(v20))
  {
    v19 = __PAIR64__(*(_DWORD *)(a7 + 24), a6);
    v20 = v14;
    v21 = v16;
    v22 = v15;
    v23 = 0;
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for _ShapeView<CombinedContentShape, ForegroundStyle>();
    type metadata accessor for DynamicBody<ViewBodyAccessor<CombinedContentShape>, MainThreadFlags>();
    lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type DynamicBody<ViewBodyAccessor<CombinedContentShape>, MainThreadFlags> and conformance DynamicBody<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for DynamicBody<ViewBodyAccessor<CombinedContentShape>, MainThreadFlags>, (uint64_t)&protocol conformance descriptor for DynamicBody<A, B>);
    result = Attribute.init<A>(body:value:flags:update:)();
    v18 = v16 | (v15 << 32);
  }
  else
  {
    v20 = v20;
    _DynamicPropertyBuffer.destroy()();
    LODWORD(v19) = a6;
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for _ShapeView<CombinedContentShape, ForegroundStyle>();
    type metadata accessor for StaticBody<ViewBodyAccessor<CombinedContentShape>, MainThreadFlags>();
    lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type StaticBody<ViewBodyAccessor<CombinedContentShape>, MainThreadFlags> and conformance StaticBody<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for StaticBody<ViewBodyAccessor<CombinedContentShape>, MainThreadFlags>, (uint64_t)&protocol conformance descriptor for StaticBody<A, B>);
    result = Attribute.init<A>(body:value:flags:update:)();
    v14 = 0;
    v18 = 0;
  }
  *a1 = result;
  *(_QWORD *)a2 = v14;
  *(_QWORD *)(a2 + 8) = v18;
  *(_BYTE *)(a2 + 16) = (_DWORD)v15 == 0;
  return result;
}

{
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int v21;
  int v22;
  int v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  outlined copy of DynamicPropertyCache.Fields.Layout();
  specialized _DynamicPropertyBuffer.init<A>(fields:container:inputs:)(a3, a4, a5 & 1, a6, a7, (uint64_t)&type metadata for SummarySymbol, (double *)&v19);
  v14 = v19;
  v16 = v20;
  v15 = HIDWORD(v20);
  if (HIDWORD(v20))
  {
    v19 = __PAIR64__(*(_DWORD *)(a7 + 24), a6);
    v20 = v14;
    v21 = v16;
    v22 = v15;
    v23 = 0;
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for ModifiedContent<Image, _ForegroundStyleModifier2<AngularGradient, Color>>(0);
    type metadata accessor for DynamicBody<ViewBodyAccessor<SummarySymbol>, AsyncThreadFlags>();
    lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type DynamicBody<ViewBodyAccessor<SummarySymbol>, AsyncThreadFlags> and conformance DynamicBody<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for DynamicBody<ViewBodyAccessor<SummarySymbol>, AsyncThreadFlags>, (uint64_t)&protocol conformance descriptor for DynamicBody<A, B>);
    result = Attribute.init<A>(body:value:flags:update:)();
    v18 = v16 | (v15 << 32);
  }
  else
  {
    v20 = v20;
    _DynamicPropertyBuffer.destroy()();
    LODWORD(v19) = a6;
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for ModifiedContent<Image, _ForegroundStyleModifier2<AngularGradient, Color>>(0);
    type metadata accessor for StaticBody<ViewBodyAccessor<SummarySymbol>, AsyncThreadFlags>();
    lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type StaticBody<ViewBodyAccessor<SummarySymbol>, AsyncThreadFlags> and conformance StaticBody<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for StaticBody<ViewBodyAccessor<SummarySymbol>, AsyncThreadFlags>, (uint64_t)&protocol conformance descriptor for StaticBody<A, B>);
    result = Attribute.init<A>(body:value:flags:update:)();
    v14 = 0;
    v18 = 0;
  }
  *a1 = result;
  *(_QWORD *)a2 = v14;
  *(_QWORD *)(a2 + 8) = v18;
  *(_BYTE *)(a2 + 16) = (_DWORD)v15 == 0;
  return result;
}

{
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int v21;
  int v22;
  int v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  outlined copy of DynamicPropertyCache.Fields.Layout();
  specialized _DynamicPropertyBuffer.init<A>(fields:container:inputs:)(a3, a4, a5 & 1, a6, a7, (uint64_t)&type metadata for SummarySymbol, (double *)&v19);
  v14 = v19;
  v16 = v20;
  v15 = HIDWORD(v20);
  if (HIDWORD(v20))
  {
    v19 = __PAIR64__(*(_DWORD *)(a7 + 24), a6);
    v20 = v14;
    v21 = v16;
    v22 = v15;
    v23 = 0;
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for ModifiedContent<Image, _ForegroundStyleModifier2<AngularGradient, Color>>(0);
    type metadata accessor for DynamicBody<ViewBodyAccessor<SummarySymbol>, MainThreadFlags>();
    lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type DynamicBody<ViewBodyAccessor<SummarySymbol>, MainThreadFlags> and conformance DynamicBody<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for DynamicBody<ViewBodyAccessor<SummarySymbol>, MainThreadFlags>, (uint64_t)&protocol conformance descriptor for DynamicBody<A, B>);
    result = Attribute.init<A>(body:value:flags:update:)();
    v18 = v16 | (v15 << 32);
  }
  else
  {
    v20 = v20;
    _DynamicPropertyBuffer.destroy()();
    LODWORD(v19) = a6;
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for ModifiedContent<Image, _ForegroundStyleModifier2<AngularGradient, Color>>(0);
    type metadata accessor for StaticBody<ViewBodyAccessor<SummarySymbol>, MainThreadFlags>();
    lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type StaticBody<ViewBodyAccessor<SummarySymbol>, MainThreadFlags> and conformance StaticBody<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for StaticBody<ViewBodyAccessor<SummarySymbol>, MainThreadFlags>, (uint64_t)&protocol conformance descriptor for StaticBody<A, B>);
    result = Attribute.init<A>(body:value:flags:update:)();
    v14 = 0;
    v18 = 0;
  }
  *a1 = result;
  *(_QWORD *)a2 = v14;
  *(_QWORD *)(a2 + 8) = v18;
  *(_BYTE *)(a2 + 16) = (_DWORD)v15 == 0;
  return result;
}

{
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int v21;
  int v22;
  int v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  outlined copy of DynamicPropertyCache.Fields.Layout();
  specialized _DynamicPropertyBuffer.init<A>(fields:container:inputs:)(a3, a4, a5 & 1, a6, a7, (uint64_t)&type metadata for DistanceGesture, (double *)&v19);
  v14 = v19;
  v16 = v20;
  v15 = HIDWORD(v20);
  if (HIDWORD(v20))
  {
    v19 = __PAIR64__(*(_DWORD *)(a7 + 24), a6);
    v20 = v14;
    v21 = v16;
    v22 = v15;
    v23 = 0;
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for ModifierGesture<StateContainerGesture<DistanceGesture.StateType, SpatialEvent, CGFloat>, EventListener<SpatialEvent>>();
    type metadata accessor for DynamicBody<GestureBodyAccessor<DistanceGesture>, AsyncThreadFlags>();
    lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type DynamicBody<GestureBodyAccessor<DistanceGesture>, AsyncThreadFlags> and conformance DynamicBody<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for DynamicBody<GestureBodyAccessor<DistanceGesture>, AsyncThreadFlags>, (uint64_t)&protocol conformance descriptor for DynamicBody<A, B>);
    result = Attribute.init<A>(body:value:flags:update:)();
    v18 = v16 | (v15 << 32);
  }
  else
  {
    v20 = v20;
    _DynamicPropertyBuffer.destroy()();
    LODWORD(v19) = a6;
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for ModifierGesture<StateContainerGesture<DistanceGesture.StateType, SpatialEvent, CGFloat>, EventListener<SpatialEvent>>();
    type metadata accessor for StaticBody<GestureBodyAccessor<DistanceGesture>, AsyncThreadFlags>();
    lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type StaticBody<GestureBodyAccessor<DistanceGesture>, AsyncThreadFlags> and conformance StaticBody<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for StaticBody<GestureBodyAccessor<DistanceGesture>, AsyncThreadFlags>, (uint64_t)&protocol conformance descriptor for StaticBody<A, B>);
    result = Attribute.init<A>(body:value:flags:update:)();
    v14 = 0;
    v18 = 0;
  }
  *a1 = result;
  *(_QWORD *)a2 = v14;
  *(_QWORD *)(a2 + 8) = v18;
  *(_BYTE *)(a2 + 16) = (_DWORD)v15 == 0;
  return result;
}

{
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int v21;
  int v22;
  int v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  outlined copy of DynamicPropertyCache.Fields.Layout();
  specialized _DynamicPropertyBuffer.init<A>(fields:container:inputs:)(a3, a4, a5 & 1, a6, a7, (uint64_t)&type metadata for DistanceGesture, (double *)&v19);
  v14 = v19;
  v16 = v20;
  v15 = HIDWORD(v20);
  if (HIDWORD(v20))
  {
    v19 = __PAIR64__(*(_DWORD *)(a7 + 24), a6);
    v20 = v14;
    v21 = v16;
    v22 = v15;
    v23 = 0;
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for ModifierGesture<StateContainerGesture<DistanceGesture.StateType, SpatialEvent, CGFloat>, EventListener<SpatialEvent>>();
    type metadata accessor for DynamicBody<GestureBodyAccessor<DistanceGesture>, MainThreadFlags>();
    lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type DynamicBody<GestureBodyAccessor<DistanceGesture>, MainThreadFlags> and conformance DynamicBody<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for DynamicBody<GestureBodyAccessor<DistanceGesture>, MainThreadFlags>, (uint64_t)&protocol conformance descriptor for DynamicBody<A, B>);
    result = Attribute.init<A>(body:value:flags:update:)();
    v18 = v16 | (v15 << 32);
  }
  else
  {
    v20 = v20;
    _DynamicPropertyBuffer.destroy()();
    LODWORD(v19) = a6;
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for ModifierGesture<StateContainerGesture<DistanceGesture.StateType, SpatialEvent, CGFloat>, EventListener<SpatialEvent>>();
    type metadata accessor for StaticBody<GestureBodyAccessor<DistanceGesture>, MainThreadFlags>();
    lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type StaticBody<GestureBodyAccessor<DistanceGesture>, MainThreadFlags> and conformance StaticBody<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for StaticBody<GestureBodyAccessor<DistanceGesture>, MainThreadFlags>, (uint64_t)&protocol conformance descriptor for StaticBody<A, B>);
    result = Attribute.init<A>(body:value:flags:update:)();
    v14 = 0;
    v18 = 0;
  }
  *a1 = result;
  *(_QWORD *)a2 = v14;
  *(_QWORD *)(a2 + 8) = v18;
  *(_BYTE *)(a2 + 16) = (_DWORD)v15 == 0;
  return result;
}

{
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int v21;
  int v22;
  int v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  outlined copy of DynamicPropertyCache.Fields.Layout();
  specialized _DynamicPropertyBuffer.init<A>(fields:container:inputs:)(a3, a4, a5 & 1, a6, a7, (double *)&v19);
  v14 = v19;
  v16 = v20;
  v15 = HIDWORD(v20);
  if (HIDWORD(v20))
  {
    v19 = __PAIR64__(*(_DWORD *)(a7 + 24), a6);
    v20 = v14;
    v21 = v16;
    v22 = v15;
    v23 = 0;
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for ModifierGesture<EventFilter<TappableEvent>, ModifierGesture<Map2Gesture<TappableEvent, ModifierGesture<CoordinateSpaceGesture<CGFloat>, DistanceGesture>, TappableEvent>, ModifierGesture<Map2Gesture<TappableEvent, ModifierGesture<DurationGesture<TappableEvent>, EventListener<TappableEvent>>, TappableEvent>, ModifierGesture<DependentGesture<TappableEvent>, ModifierGesture<MapGesture<TappableEvent, TappableEvent>, EventListener<TappableEvent>>>>>>();
    type metadata accessor for StaticBody<GestureBodyAccessor<SingleTapGesture<TappableEvent>>, MainThreadFlags>(0, &lazy cache variable for type metadata for DynamicBody<GestureBodyAccessor<SingleTapGesture<TappableEvent>>, AsyncThreadFlags>, (uint64_t)&type metadata for AsyncThreadFlags, (uint64_t)&protocol witness table for AsyncThreadFlags, (uint64_t (*)(uint64_t, _QWORD *))type metadata accessor for DynamicBody);
    lazy protocol witness table accessor for type DynamicBody<GestureBodyAccessor<SingleTapGesture<TappableEvent>>, AsyncThreadFlags> and conformance DynamicBody<A, B>(&lazy protocol witness table cache variable for type DynamicBody<GestureBodyAccessor<SingleTapGesture<TappableEvent>>, AsyncThreadFlags> and conformance DynamicBody<A, B>, &lazy cache variable for type metadata for DynamicBody<GestureBodyAccessor<SingleTapGesture<TappableEvent>>, AsyncThreadFlags>, (uint64_t (*)(uint64_t, _QWORD *))type metadata accessor for DynamicBody, (uint64_t)&protocol conformance descriptor for DynamicBody<A, B>);
    result = Attribute.init<A>(body:value:flags:update:)();
    v18 = v16 | (v15 << 32);
  }
  else
  {
    v20 = v20;
    _DynamicPropertyBuffer.destroy()();
    LODWORD(v19) = a6;
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for ModifierGesture<EventFilter<TappableEvent>, ModifierGesture<Map2Gesture<TappableEvent, ModifierGesture<CoordinateSpaceGesture<CGFloat>, DistanceGesture>, TappableEvent>, ModifierGesture<Map2Gesture<TappableEvent, ModifierGesture<DurationGesture<TappableEvent>, EventListener<TappableEvent>>, TappableEvent>, ModifierGesture<DependentGesture<TappableEvent>, ModifierGesture<MapGesture<TappableEvent, TappableEvent>, EventListener<TappableEvent>>>>>>();
    type metadata accessor for StaticBody<GestureBodyAccessor<SingleTapGesture<TappableEvent>>, MainThreadFlags>(0, &lazy cache variable for type metadata for StaticBody<GestureBodyAccessor<SingleTapGesture<TappableEvent>>, AsyncThreadFlags>, (uint64_t)&type metadata for AsyncThreadFlags, (uint64_t)&protocol witness table for AsyncThreadFlags, (uint64_t (*)(uint64_t, _QWORD *))type metadata accessor for StaticBody);
    lazy protocol witness table accessor for type DynamicBody<GestureBodyAccessor<SingleTapGesture<TappableEvent>>, AsyncThreadFlags> and conformance DynamicBody<A, B>(&lazy protocol witness table cache variable for type StaticBody<GestureBodyAccessor<SingleTapGesture<TappableEvent>>, AsyncThreadFlags> and conformance StaticBody<A, B>, &lazy cache variable for type metadata for StaticBody<GestureBodyAccessor<SingleTapGesture<TappableEvent>>, AsyncThreadFlags>, (uint64_t (*)(uint64_t, _QWORD *))type metadata accessor for StaticBody, (uint64_t)&protocol conformance descriptor for StaticBody<A, B>);
    result = Attribute.init<A>(body:value:flags:update:)();
    v14 = 0;
    v18 = 0;
  }
  *a1 = result;
  *(_QWORD *)a2 = v14;
  *(_QWORD *)(a2 + 8) = v18;
  *(_BYTE *)(a2 + 16) = (_DWORD)v15 == 0;
  return result;
}

{
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int v21;
  int v22;
  int v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  outlined copy of DynamicPropertyCache.Fields.Layout();
  specialized _DynamicPropertyBuffer.init<A>(fields:container:inputs:)(a3, a4, a5 & 1, a6, a7, (double *)&v19);
  v14 = v19;
  v16 = v20;
  v15 = HIDWORD(v20);
  if (HIDWORD(v20))
  {
    v19 = __PAIR64__(*(_DWORD *)(a7 + 24), a6);
    v20 = v14;
    v21 = v16;
    v22 = v15;
    v23 = 0;
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for ModifierGesture<EventFilter<TappableEvent>, ModifierGesture<Map2Gesture<TappableEvent, ModifierGesture<CoordinateSpaceGesture<CGFloat>, DistanceGesture>, TappableEvent>, ModifierGesture<Map2Gesture<TappableEvent, ModifierGesture<DurationGesture<TappableEvent>, EventListener<TappableEvent>>, TappableEvent>, ModifierGesture<DependentGesture<TappableEvent>, ModifierGesture<MapGesture<TappableEvent, TappableEvent>, EventListener<TappableEvent>>>>>>();
    type metadata accessor for StaticBody<GestureBodyAccessor<SingleTapGesture<TappableEvent>>, MainThreadFlags>(0, &lazy cache variable for type metadata for DynamicBody<GestureBodyAccessor<SingleTapGesture<TappableEvent>>, MainThreadFlags>, (uint64_t)&type metadata for MainThreadFlags, (uint64_t)&protocol witness table for MainThreadFlags, (uint64_t (*)(uint64_t, _QWORD *))type metadata accessor for DynamicBody);
    lazy protocol witness table accessor for type StaticBody<GestureBodyAccessor<SingleTapGesture<TappableEvent>>, MainThreadFlags> and conformance StaticBody<A, B>(&lazy protocol witness table cache variable for type DynamicBody<GestureBodyAccessor<SingleTapGesture<TappableEvent>>, MainThreadFlags> and conformance DynamicBody<A, B>, &lazy cache variable for type metadata for DynamicBody<GestureBodyAccessor<SingleTapGesture<TappableEvent>>, MainThreadFlags>, (uint64_t (*)(uint64_t, _QWORD *))type metadata accessor for DynamicBody, (uint64_t)&protocol conformance descriptor for DynamicBody<A, B>);
    result = Attribute.init<A>(body:value:flags:update:)();
    v18 = v16 | (v15 << 32);
  }
  else
  {
    v20 = v20;
    _DynamicPropertyBuffer.destroy()();
    LODWORD(v19) = a6;
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for ModifierGesture<EventFilter<TappableEvent>, ModifierGesture<Map2Gesture<TappableEvent, ModifierGesture<CoordinateSpaceGesture<CGFloat>, DistanceGesture>, TappableEvent>, ModifierGesture<Map2Gesture<TappableEvent, ModifierGesture<DurationGesture<TappableEvent>, EventListener<TappableEvent>>, TappableEvent>, ModifierGesture<DependentGesture<TappableEvent>, ModifierGesture<MapGesture<TappableEvent, TappableEvent>, EventListener<TappableEvent>>>>>>();
    type metadata accessor for StaticBody<GestureBodyAccessor<SingleTapGesture<TappableEvent>>, MainThreadFlags>(0, &lazy cache variable for type metadata for StaticBody<GestureBodyAccessor<SingleTapGesture<TappableEvent>>, MainThreadFlags>, (uint64_t)&type metadata for MainThreadFlags, (uint64_t)&protocol witness table for MainThreadFlags, (uint64_t (*)(uint64_t, _QWORD *))type metadata accessor for StaticBody);
    lazy protocol witness table accessor for type StaticBody<GestureBodyAccessor<SingleTapGesture<TappableEvent>>, MainThreadFlags> and conformance StaticBody<A, B>(&lazy protocol witness table cache variable for type StaticBody<GestureBodyAccessor<SingleTapGesture<TappableEvent>>, MainThreadFlags> and conformance StaticBody<A, B>, &lazy cache variable for type metadata for StaticBody<GestureBodyAccessor<SingleTapGesture<TappableEvent>>, MainThreadFlags>, (uint64_t (*)(uint64_t, _QWORD *))type metadata accessor for StaticBody, (uint64_t)&protocol conformance descriptor for StaticBody<A, B>);
    result = Attribute.init<A>(body:value:flags:update:)();
    v14 = 0;
    v18 = 0;
  }
  *a1 = result;
  *(_QWORD *)a2 = v14;
  *(_QWORD *)(a2 + 8) = v18;
  *(_BYTE *)(a2 + 16) = (_DWORD)v15 == 0;
  return result;
}

uint64_t protocol witness for static _VariadicView_ViewRoot._makeViewList(root:inputs:body:) in conformance _LayoutRoot<A>@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  return static _VariadicView_UnaryViewRoot._makeViewList(root:inputs:body:)(a1, a2, a3, a4, (uint64_t)&protocol witness table for _LayoutRoot<A>, a5);
}

void protocol witness for _VariadicView_ViewRoot.body(children:) in conformance _LayoutRoot<A>()
{
  specialized _VariadicView_ViewRoot<>.body(children:)();
}

uint64_t specialized static ModifiedContent<>._makeViewList(view:inputs:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t OffsetAttribute2;
  int ShouldRecordTree;
  unsigned int v5;
  uint64_t result;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  int v20;
  int v21;
  int v22;
  unint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  char v35;
  uint64_t v36;

  v36 = *MEMORY[0x24BDAC8D0];
  type metadata accessor for _ForegroundStyleModifier2<AngularGradient, Color>(0, (unint64_t *)&lazy cache variable for type metadata for _ForegroundStyleModifier2<AngularGradient, Color>, (uint64_t (*)(_QWORD, _QWORD *))type metadata accessor for _ForegroundStyleModifier2);
  OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
  ShouldRecordTree = AGSubgraphShouldRecordTree();
  if (ShouldRecordTree)
    AGSubgraphBeginTreeElement();
  if (one-time initialization token for v4 != -1)
    swift_once();
  v5 = static Semantics.v4;
  if (one-time initialization token for forced != -1)
    swift_once();
  swift_beginAccess();
  if (byte_25426FAB4 == 1)
  {
    if ((dyld_program_sdk_at_least() & 1) == 0)
      goto LABEL_9;
LABEL_12:
    v7 = *(_QWORD *)a1;
    v8 = *(_QWORD *)(a1 + 16);
    v20 = *(_DWORD *)(a1 + 8);
    v21 = *(_DWORD *)(a1 + 36);
    v9 = *(_QWORD *)(a1 + 40);
    v19 = *(_DWORD *)(a1 + 32) | 0x20;
    v10 = *(_QWORD *)(a1 + 24);
    swift_beginAccess();
    v24 = __PAIR64__(*(_DWORD *)(v8 + 16), OffsetAttribute2);
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for _ForegroundStyleModifier2<AngularGradient, Color>(0, &lazy cache variable for type metadata for _ForegroundStyleModifier2<AngularGradient, Color>.ForegroundStyleEnvironment, (uint64_t (*)(_QWORD, _QWORD *))type metadata accessor for _ForegroundStyleModifier2.ForegroundStyleEnvironment);
    lazy protocol witness table accessor for type _ForegroundStyleModifier2<AngularGradient, Color>.ForegroundStyleEnvironment and conformance _ForegroundStyleModifier2<A, B>.ForegroundStyleEnvironment();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    v11 = Attribute.init<A>(body:value:flags:update:)();
    v12 = MEMORY[0x24BEE4AF8];
    v13 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
    type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for MutableBox<CachedEnvironment>, (uint64_t)&type metadata for CachedEnvironment, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for MutableBox);
    v14 = swift_allocObject();
    *(_DWORD *)(v14 + 16) = v11;
    *(_QWORD *)(v14 + 24) = v12;
    *(_OWORD *)(v14 + 32) = 0u;
    *(_OWORD *)(v14 + 48) = 0u;
    *(_OWORD *)(v14 + 64) = 0u;
    *(_WORD *)(v14 + 80) = 256;
    *(_QWORD *)(v14 + 88) = v13;
    swift_release();
    v22 = ShouldRecordTree;
    v16 = *(_QWORD *)(a1 + 48);
    v15 = *(_QWORD *)(a1 + 56);
    v17 = *(_DWORD *)(a1 + 64);
    v18 = *(_QWORD *)(a1 + 72);
    LOBYTE(v12) = *(_BYTE *)(a1 + 80);
    swift_retain_n();
    swift_retain_n();
    swift_bridgeObjectRetain_n();
    outlined retain of _ViewListInputs(a1);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    v24 = v7;
    v25 = v20;
    v26 = v14;
    v27 = v10;
    v28 = v19;
    v29 = v21;
    v30 = v9;
    v31 = v16;
    v32 = v15;
    v33 = v17;
    v34 = v18;
    v35 = v12;
    swift_retain();
    swift_retain();
    swift_release();
    swift_release();
    specialized closure #2 in static ModifiedContent<>._makeViewList(view:inputs:)((uint64_t *)&v24, a2);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_release_n();
    result = swift_release_n();
    if (!v22)
      return result;
    return AGSubgraphEndTreeElement();
  }
  if (static Semantics.forced >= v5)
    goto LABEL_12;
LABEL_9:
  specialized closure #2 in static ModifiedContent<>._makeViewList(view:inputs:)((uint64_t *)a1, a2);
  result = specialized _ViewListOutputs.multiModifier<A>(_:inputs:)(OffsetAttribute2, (__int128 *)a1);
  if (ShouldRecordTree)
    return AGSubgraphEndTreeElement();
  return result;
}

{
  unsigned int OffsetAttribute2;
  int ShouldRecordTree;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  int v15;
  uint64_t result;
  int v17;
  int v18;
  int v19;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  int v26;
  uint64_t v27;
  __int128 v28;
  int v29;
  uint64_t v30;
  char v31;
  uint64_t v32;

  v32 = *MEMORY[0x24BDAC8D0];
  type metadata accessor for ChildEnvironment<Font?>(0, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Font?>, (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for _EnvironmentKeyWritingModifier);
  OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
  ShouldRecordTree = AGSubgraphShouldRecordTree();
  if (ShouldRecordTree)
    AGSubgraphBeginTreeElement();
  v5 = *(_QWORD *)a1;
  v6 = *(_QWORD *)(a1 + 16);
  v18 = *(_DWORD *)(a1 + 8);
  v19 = *(_DWORD *)(a1 + 36);
  v7 = *(_QWORD *)(a1 + 40);
  v17 = *(_DWORD *)(a1 + 32) | 0x20;
  v8 = *(_QWORD *)(a1 + 24);
  swift_beginAccess();
  v21 = __PAIR64__(*(_DWORD *)(v6 + 16), OffsetAttribute2);
  v22 = 0;
  v23 = 0;
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  outlined retain of _ViewListInputs(a1);
  type metadata accessor for ChildEnvironment<Font?>(0, &lazy cache variable for type metadata for ChildEnvironment<Font?>, (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for ChildEnvironment);
  lazy protocol witness table accessor for type ChildEnvironment<Font?> and conformance ChildEnvironment<A>();
  v9 = Attribute.init<A>(body:value:flags:update:)();
  v10 = MEMORY[0x24BEE4AF8];
  v11 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for MutableBox<CachedEnvironment>, (uint64_t)&type metadata for CachedEnvironment, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for MutableBox);
  v12 = swift_allocObject();
  *(_DWORD *)(v12 + 16) = v9;
  *(_QWORD *)(v12 + 24) = v10;
  *(_OWORD *)(v12 + 32) = 0u;
  *(_OWORD *)(v12 + 48) = 0u;
  *(_OWORD *)(v12 + 64) = 0u;
  *(_WORD *)(v12 + 80) = 256;
  *(_QWORD *)(v12 + 88) = v11;
  swift_release();
  v13 = *(_QWORD *)(a1 + 72);
  v14 = *(_BYTE *)(a1 + 80);
  v15 = *(_DWORD *)(a1 + 64);
  v21 = v5;
  LODWORD(v22) = v18;
  v23 = v12;
  v24 = v8;
  v25 = v17;
  v26 = v19;
  v27 = v7;
  v28 = *(_OWORD *)(a1 + 48);
  v29 = v15;
  v30 = v13;
  v31 = v14;
  specialized closure #2 in static ModifiedContent<>._makeViewList(view:inputs:)((uint64_t)&v21, a2);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  result = swift_bridgeObjectRelease();
  if (ShouldRecordTree)
    return AGSubgraphEndTreeElement();
  return result;
}

{
  uint64_t OffsetAttribute2;
  __int128 v5;
  __int128 v6;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  char v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  char v21;

  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for _ValueTransactionModifier<Bool>, MEMORY[0x24BEE1328], MEMORY[0x24BEE1340], (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for _ValueTransactionModifier);
  OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
  if (AGSubgraphShouldRecordTree())
  {
    AGSubgraphBeginTreeElement();
    v5 = *(_OWORD *)(a1 + 48);
    v12 = *(_OWORD *)(a1 + 32);
    v13 = v5;
    v14 = *(_OWORD *)(a1 + 64);
    v15 = *(_BYTE *)(a1 + 80);
    v6 = *(_OWORD *)(a1 + 16);
    v10 = *(_OWORD *)a1;
    v11 = v6;
    outlined retain of _ViewListInputs(a1);
    specialized static _ValueTransactionModifier._makeInputs(modifier:inputs:)(OffsetAttribute2, (uint64_t)&v10);
    v18 = v12;
    v19 = v13;
    v20 = v14;
    v21 = v15;
    v16 = v10;
    v17 = v11;
    specialized closure #2 in static ModifiedContent<>._makeViewList(view:inputs:)(&v16, a2);
    outlined release of _ViewListInputs((uint64_t)&v16);
    return AGSubgraphEndTreeElement();
  }
  else
  {
    v8 = *(_OWORD *)(a1 + 48);
    v12 = *(_OWORD *)(a1 + 32);
    v13 = v8;
    v14 = *(_OWORD *)(a1 + 64);
    v15 = *(_BYTE *)(a1 + 80);
    v9 = *(_OWORD *)(a1 + 16);
    v10 = *(_OWORD *)a1;
    v11 = v9;
    outlined retain of _ViewListInputs(a1);
    specialized static _ValueTransactionModifier._makeInputs(modifier:inputs:)(OffsetAttribute2, (uint64_t)&v10);
    v18 = v12;
    v19 = v13;
    v20 = v14;
    v21 = v15;
    v16 = v10;
    v17 = v11;
    specialized closure #2 in static ModifiedContent<>._makeViewList(view:inputs:)(&v16, a2);
    return outlined release of _ViewListInputs((uint64_t)&v16);
  }
}

uint64_t specialized static ModifiedContent<>._makeViewList(view:inputs:)@<X0>(uint64_t *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t OffsetAttribute2;

  type metadata accessor for _OverlayPreferenceModifier<Text.LayoutKey, ForEach<Range<Int>, Int, ModifiedContent<ModifiedContent<SummarySymbol, _ValueTransactionModifier<Double>>, _OffsetEffect>>>();
  OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
  if (AGSubgraphShouldRecordTree())
  {
    AGSubgraphBeginTreeElement();
    specialized closure #2 in static ModifiedContent<>._makeViewList(view:inputs:)(a1, a2);
    specialized _ViewListOutputs.multiModifier<A>(_:inputs:)(OffsetAttribute2, (__int128 *)a1);
    return AGSubgraphEndTreeElement();
  }
  else
  {
    specialized closure #2 in static ModifiedContent<>._makeViewList(view:inputs:)(a1, a2);
    return specialized _ViewListOutputs.multiModifier<A>(_:inputs:)(OffsetAttribute2, (__int128 *)a1);
  }
}

uint64_t specialized closure #2 in static ModifiedContent<>._makeViewList(view:inputs:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  int ShouldRecordTree;
  unint64_t v5;
  int v6;
  unint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  uint64_t result;
  _OWORD v17[5];
  char v18;
  _QWORD v19[5];

  AGGraphCreateOffsetAttribute2();
  ShouldRecordTree = AGSubgraphShouldRecordTree();
  if (ShouldRecordTree)
    AGSubgraphBeginTreeElement();
  v5 = AGCreateWeakAttribute();
  v6 = v5;
  v7 = HIDWORD(v5);
  v8 = *a1;
  v9 = *((_DWORD *)a1 + 2);
  v10 = a1[2];
  v11 = a1[5];
  type metadata accessor for UnaryElements<TypedUnaryViewGenerator<Image>>(0, &lazy cache variable for type metadata for UnaryElements<TypedUnaryViewGenerator<Image>>, &lazy cache variable for type metadata for TypedUnaryViewGenerator<Image>, (uint64_t)&type metadata for Image, (uint64_t)&protocol witness table for Image);
  v19[3] = v12;
  v19[4] = &protocol witness table for UnaryElements<A>;
  v13 = swift_allocObject();
  v19[0] = v13;
  *(_DWORD *)(v13 + 16) = v6;
  *(_DWORD *)(v13 + 20) = v7;
  *(_QWORD *)(v13 + 24) = v8;
  *(_DWORD *)(v13 + 32) = v9;
  *(_QWORD *)(v13 + 40) = v10;
  *(_OWORD *)(v13 + 48) = *(_OWORD *)(a1 + 3);
  *(_QWORD *)(v13 + 64) = v11;
  v14 = *((_OWORD *)a1 + 3);
  v17[2] = *((_OWORD *)a1 + 2);
  v17[3] = v14;
  v17[4] = *((_OWORD *)a1 + 4);
  v18 = *((_BYTE *)a1 + 80);
  v15 = *((_OWORD *)a1 + 1);
  v17[0] = *(_OWORD *)a1;
  v17[1] = v15;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  static _ViewListOutputs.staticList(_:inputs:staticCount:)((uint64_t)v19, (uint64_t *)v17, 1, a2);
  result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v19);
  if (ShouldRecordTree)
    return AGSubgraphEndTreeElement();
  return result;
}

{
  int ShouldRecordTree;
  unint64_t v5;
  int v6;
  unint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  uint64_t result;
  _OWORD v17[5];
  char v18;
  _QWORD v19[5];

  AGGraphCreateOffsetAttribute2();
  ShouldRecordTree = AGSubgraphShouldRecordTree();
  if (ShouldRecordTree)
    AGSubgraphBeginTreeElement();
  v5 = AGCreateWeakAttribute();
  v6 = v5;
  v7 = HIDWORD(v5);
  v8 = *a1;
  v9 = *((_DWORD *)a1 + 2);
  v10 = a1[2];
  v11 = a1[5];
  type metadata accessor for UnaryElements<TypedUnaryViewGenerator<Image>>(0, &lazy cache variable for type metadata for UnaryElements<TypedUnaryViewGenerator<Text>>, &lazy cache variable for type metadata for TypedUnaryViewGenerator<Text>, (uint64_t)&type metadata for Text, (uint64_t)&protocol witness table for Text);
  v19[3] = v12;
  v19[4] = &protocol witness table for UnaryElements<A>;
  v13 = swift_allocObject();
  v19[0] = v13;
  *(_DWORD *)(v13 + 16) = v6;
  *(_DWORD *)(v13 + 20) = v7;
  *(_QWORD *)(v13 + 24) = v8;
  *(_DWORD *)(v13 + 32) = v9;
  *(_QWORD *)(v13 + 40) = v10;
  *(_OWORD *)(v13 + 48) = *(_OWORD *)(a1 + 3);
  *(_QWORD *)(v13 + 64) = v11;
  v14 = *((_OWORD *)a1 + 3);
  v17[2] = *((_OWORD *)a1 + 2);
  v17[3] = v14;
  v17[4] = *((_OWORD *)a1 + 4);
  v18 = *((_BYTE *)a1 + 80);
  v15 = *((_OWORD *)a1 + 1);
  v17[0] = *(_OWORD *)a1;
  v17[1] = v15;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  static _ViewListOutputs.staticList(_:inputs:staticCount:)((uint64_t)v19, (uint64_t *)v17, 1, a2);
  result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v19);
  if (ShouldRecordTree)
    return AGSubgraphEndTreeElement();
  return result;
}

uint64_t specialized closure #2 in static ModifiedContent<>._makeViewList(view:inputs:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  type metadata accessor for ModifiedContent<SummarySymbol, _ValueTransactionModifier<Double>>(0, &lazy cache variable for type metadata for ModifiedContent<SummarySymbol, _ValueTransactionModifier<Bool>>, &lazy cache variable for type metadata for _ValueTransactionModifier<Bool>, MEMORY[0x24BEE1328], MEMORY[0x24BEE1340]);
  AGGraphCreateOffsetAttribute2();
  if (!AGSubgraphShouldRecordTree())
    return specialized static ModifiedContent<>._makeViewList(view:inputs:)(a1, a2);
  AGSubgraphBeginTreeElement();
  specialized static ModifiedContent<>._makeViewList(view:inputs:)(a1, a2);
  return AGSubgraphEndTreeElement();
}

uint64_t specialized closure #2 in static ModifiedContent<>._makeViewList(view:inputs:)@<X0>(_OWORD *a1@<X0>, uint64_t a2@<X8>)
{
  int OffsetAttribute2;
  int ShouldRecordTree;
  __int128 v6;
  int v7;
  uint64_t result;
  _OWORD v9[3];
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
  ShouldRecordTree = AGSubgraphShouldRecordTree();
  if (ShouldRecordTree)
    AGSubgraphBeginTreeElement();
  v6 = a1[2];
  v9[1] = a1[1];
  v9[2] = v6;
  v9[0] = *a1;
  v7 = OffsetAttribute2;
  if ((BYTE4(v6) & 1) == 0)
  {
    swift_beginAccess();
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    outlined retain of _GraphInputs((uint64_t)v9);
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, (unint64_t *)&lazy cache variable for type metadata for AnimatableAttribute<SummarySymbol>, (uint64_t)&type metadata for SummarySymbol, (uint64_t)&protocol witness table for SummarySymbol, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for AnimatableAttribute);
    lazy protocol witness table accessor for type AnimatableAttribute<SummarySymbol> and conformance AnimatableAttribute<A>();
    v7 = Attribute.init<A>(body:value:flags:update:)();
    AGGraphGetFlags();
    AGGraphSetFlags();
    outlined release of _GraphInputs((uint64_t)v9);
  }
  result = specialized static View.makeViewList(view:inputs:)(v7, (uint64_t)a1, a2);
  if (ShouldRecordTree)
    return AGSubgraphEndTreeElement();
  return result;
}

uint64_t specialized static _ValueTransactionModifier._makeInputs(modifier:inputs:)(uint64_t a1, uint64_t a2)
{
  id v3;
  void *v4;
  id v5;
  uint64_t v6;
  uint64_t result;

  AGGraphCreateOffsetAttribute2();
  if (AGGraphGetCurrentAttribute() == *MEMORY[0x24BE096C0])
  {
    v3 = (id)AGSubgraphGetCurrent();
    if (!v3)
    {
      result = _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      return result;
    }
    v4 = v3;
    v5 = (id)AGSubgraphGetGraph();

  }
  else
  {
    v5 = (id)AGGraphGetAttributeGraph();
  }
  if (!AGGraphGetContext())
    __break(1u);
  swift_retain();

  swift_beginAccess();
  swift_release();
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for ValueTransactionSeed<Bool>, MEMORY[0x24BEE1328], MEMORY[0x24BEE1340], (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ValueTransactionSeed);
  lazy protocol witness table accessor for type ValueTransactionSeed<Bool> and conformance ValueTransactionSeed<A>();
  Attribute.init<A>(body:value:flags:update:)();
  v6 = AGGraphSetFlags();
  MEMORY[0x24BDAC7A8](v6);
  swift_getKeyPath();
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  type metadata accessor for (_:)();
  type metadata accessor for Focus<_ValueTransactionModifier<Bool>, (_:)>();
  lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type Focus<_ValueTransactionModifier<Bool>, (_:)> and conformance Focus<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for Focus<_ValueTransactionModifier<Bool>, (_:)>, MEMORY[0x24BE09658]);
  Attribute.init<A>(body:value:flags:update:)();
  swift_release();
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  lazy protocol witness table accessor for type ChildValueTransaction and conformance ChildValueTransaction();
  result = Attribute.init<A>(body:value:flags:update:)();
  *(_DWORD *)(a2 + 28) = result;
  return result;
}

void specialized _VariadicView_ViewRoot<>.body(children:)(uint64_t a1, uint64_t a2)
{
  Swift::String v3;
  Swift::String v4;

  _StringGuts.grow(_:)(34);
  swift_bridgeObjectRelease();
  v3._countAndFlagsBits = a2;
  v3._object = (void *)0xED000074756F7961;
  String.append(_:)(v3);
  v4._countAndFlagsBits = 46;
  v4._object = (void *)0xE100000000000000;
  String.append(_:)(v4);
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void specialized _VariadicView_ViewRoot<>.body(children:)()
{
  Swift::String v0;
  Swift::String v1;

  _StringGuts.grow(_:)(34);
  swift_bridgeObjectRelease();
  v0._countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  v1._countAndFlagsBits = 46;
  v1._object = (void *)0xE100000000000000;
  String.append(_:)(v1);
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t sub_234DAE4F0()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in static View.makeImplicitRoot(view:inputs:)(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;

  return closure #1 in static View.makeImplicitRoot(view:inputs:)(a1, a2, *(_DWORD *)(v2 + 32), *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24));
}

uint64_t sub_234DAE50C()
{
  return swift_deallocObject();
}

uint64_t partial apply for thunk for @callee_guaranteed (@in_guaranteed _Graph, @in_guaranteed _ViewInputs) -> (@out _ViewListOutputs)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t partial apply for closure #1 in static _VariadicView.Tree<>._makeView(view:inputs:)(uint64_t a1)
{
  uint64_t *v1;

  return closure #1 in static _VariadicView.Tree<>._makeView(view:inputs:)(a1, v1[2], v1[3], v1[4], v1[5], (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply);
}

uint64_t partial apply for closure #2 in static _VariadicView.Tree<>._makeView(view:inputs:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return closure #2 in static _VariadicView.Tree<>._makeView(view:inputs:)(a1, a2, *(_DWORD *)(v2 + 48), *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32), *(_QWORD *)(v2 + 40));
}

uint64_t sub_234DAE570()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in static _VariadicView.Tree<>._makeViewList(view:inputs:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return closure #2 in static _VariadicView.Tree<>._makeViewList(view:inputs:)(a1, a2, *(_DWORD *)(v2 + 48), *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32), *(_QWORD *)(v2 + 40));
}

uint64_t partial apply for closure #1 in static _VariadicView.Tree<>._viewListCount(inputs:)(uint64_t *a1)
{
  uint64_t v1;

  return closure #1 in static _VariadicView.Tree<>._viewListCount(inputs:)(a1, *(_QWORD *)(v1 + 48), *(_QWORD *)(v1 + 56), *(unsigned int *)(v1 + 64), *(_QWORD *)(v1 + 72), *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40));
}

uint64_t sub_234DAE5C4()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in static ViewModifier.makeImplicitRoot(modifier:inputs:body:)(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;

  return closure #1 in static ViewModifier.makeImplicitRoot(modifier:inputs:body:)(a1, a2, *(void (**)(uint64_t, uint64_t *))(v2 + 16));
}

uint64_t instantiation function for generic protocol witness table for <> _VariadicView.Tree<A, B>(uint64_t a1, uint64_t a2, __int128 *a3)
{
  uint64_t result;
  __int128 v5;

  v5 = *a3;
  result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for <> _VariadicView.Tree<A, B>, a2, &v5);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

ValueMetadata *type metadata accessor for _VariadicView()
{
  return &type metadata for _VariadicView;
}

uint64_t type metadata completion function for _VariadicView.Tree()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t getEnumTagSinglePayload for _VariadicView.Tree(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  char v13;
  int v14;
  unsigned int v15;
  int v16;
  int v17;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= v5)
    v8 = *(_DWORD *)(v4 + 84);
  else
    v8 = *(_DWORD *)(v6 + 84);
  if (!a2)
    return 0;
  v9 = *(unsigned __int8 *)(v6 + 80);
  v10 = *(_QWORD *)(v4 + 64) + v9;
  v11 = a2 - v8;
  if (a2 <= v8)
    goto LABEL_23;
  v12 = (v10 & ~v9) + *(_QWORD *)(v6 + 64);
  v13 = 8 * v12;
  if (v12 <= 3)
  {
    v15 = ((v11 + ~(-1 << v13)) >> v13) + 1;
    if (HIWORD(v15))
    {
      v14 = *(_DWORD *)(a1 + v12);
      if (!v14)
        goto LABEL_23;
      goto LABEL_14;
    }
    if (v15 > 0xFF)
    {
      v14 = *(unsigned __int16 *)(a1 + v12);
      if (!*(_WORD *)(a1 + v12))
        goto LABEL_23;
      goto LABEL_14;
    }
    if (v15 < 2)
    {
LABEL_23:
      if (v8)
      {
        if (v5 >= v7)
          return (*(uint64_t (**)(void))(v4 + 48))();
        else
          return (*(uint64_t (**)(uint64_t))(v6 + 48))((v10 + a1) & ~v9);
      }
      return 0;
    }
  }
  v14 = *(unsigned __int8 *)(a1 + v12);
  if (!*(_BYTE *)(a1 + v12))
    goto LABEL_23;
LABEL_14:
  v16 = (v14 - 1) << v13;
  if (v12 > 3)
    v16 = 0;
  if (!(_DWORD)v12)
    return v8 + v16 + 1;
  if (v12 <= 3)
    v17 = (v10 & ~(_DWORD)v9) + *(_DWORD *)(v6 + 64);
  else
    v17 = 4;
  return ((uint64_t (*)(void))((char *)&loc_234DAE7B8 + 4 * byte_2352A0460[v17 - 1]))();
}

void storeEnumTagSinglePayload for _VariadicView.Tree(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  int v12;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 24) - 8);
  if (*(_DWORD *)(v6 + 84) <= *(_DWORD *)(v5 + 84))
    v7 = *(_DWORD *)(v5 + 84);
  else
    v7 = *(_DWORD *)(v6 + 84);
  v8 = ((*(_QWORD *)(v5 + 64) + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))
     + *(_QWORD *)(v6 + 64);
  if (a3 > v7)
  {
    if (v8 <= 3)
    {
      v11 = ((a3 - v7 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v11))
      {
        v9 = 4u;
      }
      else if (v11 >= 0x100)
      {
        v9 = 2;
      }
      else
      {
        v9 = v11 > 1;
      }
    }
    else
    {
      v9 = 1u;
    }
  }
  else
  {
    v9 = 0;
  }
  if (v7 < a2)
  {
    v10 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        v12 = v10 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v12;
          *((_BYTE *)a1 + 2) = BYTE2(v12);
        }
        else if ((_DWORD)v8 == 2)
        {
          *a1 = v12;
        }
        else
        {
          *(_BYTE *)a1 = v12;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v10;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X16 }
}

uint64_t dispatch thunk of static _VariadicView_Root._viewListOptions.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

ValueMetadata *type metadata accessor for ViewListOptionsInput()
{
  return &type metadata for ViewListOptionsInput;
}

uint64_t dispatch thunk of static _VariadicView_ViewRoot._makeView(root:inputs:body:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 32))();
}

uint64_t dispatch thunk of static _VariadicView_ViewRoot._makeViewList(root:inputs:body:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 40))();
}

uint64_t dispatch thunk of static _VariadicView_ViewRoot._viewListCount(inputs:body:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 48))();
}

uint64_t dispatch thunk of _VariadicView_ViewRoot.body(children:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 56))();
}

uint64_t destroy for _VariadicView_Children(uint64_t a1)
{
  __swift_destroy_boxed_opaque_existential_1(a1);

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for _VariadicView_Children(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  void *v5;
  uint64_t v6;
  id v7;

  v4 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v4;
  (**(void (***)(void))(v4 - 8))();
  v5 = *(void **)(a2 + 40);
  v6 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = v5;
  *(_QWORD *)(a1 + 48) = v6;
  v7 = v5;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t *assignWithCopy for _VariadicView_Children(uint64_t *a1, uint64_t *a2)
{
  void *v4;
  void *v5;
  id v6;

  __swift_assign_boxed_opaque_existential_1(a1, a2);
  v4 = (void *)a2[5];
  v5 = (void *)a1[5];
  a1[5] = (uint64_t)v4;
  v6 = v4;

  a1[6] = a2[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for _VariadicView_Children(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;
  void *v6;

  __swift_destroy_boxed_opaque_existential_1(a1);
  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  v5 = *(_QWORD *)(a2 + 40);
  v6 = *(void **)(a1 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v5;

  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for _VariadicView_Children(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 56))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for _VariadicView_Children(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 56) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 24) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 56) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for _VariadicView_Children()
{
  return &type metadata for _VariadicView_Children;
}

uint64_t dispatch thunk of static _VariadicView_AnyImplicitRoot.visitType<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 8))();
}

uint64_t dispatch thunk of static _VariadicView_ImplicitRoot.implicitRoot.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t destroy for MakeViewRoot()
{
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for MakeViewRoot(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  v3 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v3;
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  v4 = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = v4;
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for MakeViewRoot(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  v4 = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = v4;
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 112);
  *(_DWORD *)(a1 + 116) = *(_DWORD *)(a2 + 116);
  return a1;
}

__n128 __swift_memcpy120_8(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __n128 result;
  __int128 v6;
  __int128 v7;

  v2 = *a2;
  v3 = a2[1];
  v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  result = (__n128)a2[4];
  v6 = a2[5];
  v7 = a2[6];
  *(_QWORD *)(a1 + 112) = *((_QWORD *)a2 + 14);
  *(_OWORD *)(a1 + 80) = v6;
  *(_OWORD *)(a1 + 96) = v7;
  *(__n128 *)(a1 + 64) = result;
  return result;
}

uint64_t assignWithTake for MakeViewRoot(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_release();
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_release();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  swift_release();
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  return a1;
}

uint64_t getEnumTagSinglePayload for MakeViewRoot(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 120))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for MakeViewRoot(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 120) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 16) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 120) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

void *type metadata accessor for MakeViewRoot()
{
  return &unk_250613C38;
}

uint64_t sub_234DAF018()
{
  return swift_deallocObject();
}

uint64_t sub_234DAF028()
{
  swift_release();
  return swift_deallocObject();
}

void partial apply for specialized closure #1 in closure #1 in static _VariadicView_MultiViewRoot._makeView(root:inputs:body:)(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  void (*v4)(_QWORD *__return_ptr);
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  _OWORD v8[5];
  int v9;

  v4 = (void (*)(_QWORD *__return_ptr))v2[2];
  v3 = v2[3];
  v5 = v2[4];
  v6 = *(_OWORD *)(a2 + 48);
  v8[2] = *(_OWORD *)(a2 + 32);
  v8[3] = v6;
  v8[4] = *(_OWORD *)(a2 + 64);
  v9 = *(_DWORD *)(a2 + 80);
  v7 = *(_OWORD *)(a2 + 16);
  v8[0] = *(_OWORD *)a2;
  v8[1] = v7;
  specialized closure #1 in closure #1 in static _VariadicView_MultiViewRoot._makeView(root:inputs:body:)((uint64_t)v8, v4, v3, v5);
}

unint64_t type metadata accessor for GroupContainer.Type()
{
  unint64_t result;

  result = lazy cache variable for type metadata for GroupContainer.Type;
  if (!lazy cache variable for type metadata for GroupContainer.Type)
  {
    result = swift_getMetatypeMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for GroupContainer.Type);
  }
  return result;
}

unint64_t type metadata accessor for Never.Type()
{
  unint64_t result;

  result = lazy cache variable for type metadata for Never.Type;
  if (!lazy cache variable for type metadata for Never.Type)
  {
    result = swift_getMetatypeMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for Never.Type);
  }
  return result;
}

void type metadata accessor for ModifiedContent<Image, _ForegroundStyleModifier2<AngularGradient, Color>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  if (!lazy cache variable for type metadata for ModifiedContent<Image, _ForegroundStyleModifier2<AngularGradient, Color>>)
  {
    type metadata accessor for _ForegroundStyleModifier2<AngularGradient, Color>(255, (unint64_t *)&lazy cache variable for type metadata for _ForegroundStyleModifier2<AngularGradient, Color>, (uint64_t (*)(_QWORD, _QWORD *))type metadata accessor for _ForegroundStyleModifier2);
    v4 = type metadata accessor for ModifiedContent(a1, (uint64_t)&type metadata for Image, v2, v3);
    if (!v5)
      atomic_store(v4, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<Image, _ForegroundStyleModifier2<AngularGradient, Color>>);
  }
}

unint64_t type metadata accessor for SummarySymbol.Type()
{
  unint64_t result;

  result = lazy cache variable for type metadata for SummarySymbol.Type;
  if (!lazy cache variable for type metadata for SummarySymbol.Type)
  {
    result = swift_getMetatypeMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for SummarySymbol.Type);
  }
  return result;
}

void type metadata accessor for _ForegroundStyleModifier2<AngularGradient, Color>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(_QWORD, _QWORD *))
{
  unint64_t v4;
  uint64_t v5;
  _QWORD v6[4];

  if (!*a2)
  {
    v6[0] = &type metadata for AngularGradient;
    v6[1] = &type metadata for Color;
    v6[2] = &protocol witness table for AngularGradient;
    v6[3] = &protocol witness table for Color;
    v4 = a3(0, v6);
    if (!v5)
      atomic_store(v4, a2);
  }
}

unint64_t lazy protocol witness table accessor for type _ForegroundStyleModifier2<AngularGradient, Color>.ForegroundStyleEnvironment and conformance _ForegroundStyleModifier2<A, B>.ForegroundStyleEnvironment()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type _ForegroundStyleModifier2<AngularGradient, Color>.ForegroundStyleEnvironment and conformance _ForegroundStyleModifier2<A, B>.ForegroundStyleEnvironment;
  if (!lazy protocol witness table cache variable for type _ForegroundStyleModifier2<AngularGradient, Color>.ForegroundStyleEnvironment and conformance _ForegroundStyleModifier2<A, B>.ForegroundStyleEnvironment)
  {
    type metadata accessor for _ForegroundStyleModifier2<AngularGradient, Color>(255, &lazy cache variable for type metadata for _ForegroundStyleModifier2<AngularGradient, Color>.ForegroundStyleEnvironment, (uint64_t (*)(_QWORD, _QWORD *))type metadata accessor for _ForegroundStyleModifier2.ForegroundStyleEnvironment);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for _ForegroundStyleModifier2<A, B>.ForegroundStyleEnvironment, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ForegroundStyleModifier2<AngularGradient, Color>.ForegroundStyleEnvironment and conformance _ForegroundStyleModifier2<A, B>.ForegroundStyleEnvironment);
  }
  return result;
}

uint64_t type metadata accessor for DynamicBody<ViewBodyAccessor<SummarySymbol>, AsyncThreadFlags>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for DynamicBody<ViewBodyAccessor<SummarySymbol>, AsyncThreadFlags>;
  if (!lazy cache variable for type metadata for DynamicBody<ViewBodyAccessor<SummarySymbol>, AsyncThreadFlags>)
  {
    type metadata accessor for FontBox<Font.SystemProvider>(255, &lazy cache variable for type metadata for ViewBodyAccessor<SummarySymbol>, (uint64_t (*)(void))lazy protocol witness table accessor for type SummarySymbol and conformance SummarySymbol, (uint64_t)&type metadata for SummarySymbol, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ViewBodyAccessor);
    lazy protocol witness table accessor for type ViewBodyAccessor<SummarySymbol> and conformance ViewBodyAccessor<A>();
    type metadata accessor for DynamicBody();
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ViewBodyAccessor<SummarySymbol> and conformance ViewBodyAccessor<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type ViewBodyAccessor<SummarySymbol> and conformance ViewBodyAccessor<A>;
  if (!lazy protocol witness table cache variable for type ViewBodyAccessor<SummarySymbol> and conformance ViewBodyAccessor<A>)
  {
    type metadata accessor for FontBox<Font.SystemProvider>(255, &lazy cache variable for type metadata for ViewBodyAccessor<SummarySymbol>, (uint64_t (*)(void))lazy protocol witness table accessor for type SummarySymbol and conformance SummarySymbol, (uint64_t)&type metadata for SummarySymbol, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ViewBodyAccessor);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ViewBodyAccessor<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ViewBodyAccessor<SummarySymbol> and conformance ViewBodyAccessor<A>);
  }
  return result;
}

uint64_t type metadata accessor for StaticBody<ViewBodyAccessor<SummarySymbol>, AsyncThreadFlags>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for StaticBody<ViewBodyAccessor<SummarySymbol>, AsyncThreadFlags>;
  if (!lazy cache variable for type metadata for StaticBody<ViewBodyAccessor<SummarySymbol>, AsyncThreadFlags>)
  {
    type metadata accessor for FontBox<Font.SystemProvider>(255, &lazy cache variable for type metadata for ViewBodyAccessor<SummarySymbol>, (uint64_t (*)(void))lazy protocol witness table accessor for type SummarySymbol and conformance SummarySymbol, (uint64_t)&type metadata for SummarySymbol, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ViewBodyAccessor);
    lazy protocol witness table accessor for type ViewBodyAccessor<SummarySymbol> and conformance ViewBodyAccessor<A>();
    type metadata accessor for StaticBody();
  }
  return result;
}

uint64_t type metadata accessor for DynamicBody<ViewBodyAccessor<SummarySymbol>, MainThreadFlags>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for DynamicBody<ViewBodyAccessor<SummarySymbol>, MainThreadFlags>;
  if (!lazy cache variable for type metadata for DynamicBody<ViewBodyAccessor<SummarySymbol>, MainThreadFlags>)
  {
    type metadata accessor for FontBox<Font.SystemProvider>(255, &lazy cache variable for type metadata for ViewBodyAccessor<SummarySymbol>, (uint64_t (*)(void))lazy protocol witness table accessor for type SummarySymbol and conformance SummarySymbol, (uint64_t)&type metadata for SummarySymbol, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ViewBodyAccessor);
    lazy protocol witness table accessor for type ViewBodyAccessor<SummarySymbol> and conformance ViewBodyAccessor<A>();
    type metadata accessor for DynamicBody();
  }
  return result;
}

uint64_t type metadata accessor for StaticBody<ViewBodyAccessor<SummarySymbol>, MainThreadFlags>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for StaticBody<ViewBodyAccessor<SummarySymbol>, MainThreadFlags>;
  if (!lazy cache variable for type metadata for StaticBody<ViewBodyAccessor<SummarySymbol>, MainThreadFlags>)
  {
    type metadata accessor for FontBox<Font.SystemProvider>(255, &lazy cache variable for type metadata for ViewBodyAccessor<SummarySymbol>, (uint64_t (*)(void))lazy protocol witness table accessor for type SummarySymbol and conformance SummarySymbol, (uint64_t)&type metadata for SummarySymbol, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ViewBodyAccessor);
    lazy protocol witness table accessor for type ViewBodyAccessor<SummarySymbol> and conformance ViewBodyAccessor<A>();
    type metadata accessor for StaticBody();
  }
  return result;
}

void type metadata accessor for TypedUnaryViewGenerator<_ShapeView<Rectangle.AsymmetricalInset, ForegroundStyle>>(uint64_t a1)
{
  type metadata accessor for InterpolatedDisplayList<ResolvedStyledText>(a1, &lazy cache variable for type metadata for TypedUnaryViewGenerator<_ShapeView<Rectangle.AsymmetricalInset, ForegroundStyle>>, (uint64_t (*)(uint64_t))type metadata accessor for _ShapeView<Rectangle.AsymmetricalInset, ForegroundStyle>, (uint64_t)&protocol witness table for _ShapeView<A, B>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for TypedUnaryViewGenerator);
}

unint64_t type metadata accessor for Rectangle.AsymmetricalInset.Type()
{
  unint64_t result;

  result = lazy cache variable for type metadata for Rectangle.AsymmetricalInset.Type;
  if (!lazy cache variable for type metadata for Rectangle.AsymmetricalInset.Type)
  {
    result = swift_getMetatypeMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for Rectangle.AsymmetricalInset.Type);
  }
  return result;
}

uint64_t type metadata accessor for DynamicBody<ViewBodyAccessor<Rectangle.AsymmetricalInset>, AsyncThreadFlags>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for DynamicBody<ViewBodyAccessor<Rectangle.AsymmetricalInset>, AsyncThreadFlags>;
  if (!lazy cache variable for type metadata for DynamicBody<ViewBodyAccessor<Rectangle.AsymmetricalInset>, AsyncThreadFlags>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for ViewBodyAccessor<Rectangle.AsymmetricalInset>, (uint64_t)&type metadata for Rectangle.AsymmetricalInset, (uint64_t)&protocol witness table for Rectangle.AsymmetricalInset, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ViewBodyAccessor);
    lazy protocol witness table accessor for type ViewBodyAccessor<Rectangle.AsymmetricalInset> and conformance ViewBodyAccessor<A>();
    type metadata accessor for DynamicBody();
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ViewBodyAccessor<Rectangle.AsymmetricalInset> and conformance ViewBodyAccessor<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type ViewBodyAccessor<Rectangle.AsymmetricalInset> and conformance ViewBodyAccessor<A>;
  if (!lazy protocol witness table cache variable for type ViewBodyAccessor<Rectangle.AsymmetricalInset> and conformance ViewBodyAccessor<A>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for ViewBodyAccessor<Rectangle.AsymmetricalInset>, (uint64_t)&type metadata for Rectangle.AsymmetricalInset, (uint64_t)&protocol witness table for Rectangle.AsymmetricalInset, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ViewBodyAccessor);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ViewBodyAccessor<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ViewBodyAccessor<Rectangle.AsymmetricalInset> and conformance ViewBodyAccessor<A>);
  }
  return result;
}

uint64_t type metadata accessor for StaticBody<ViewBodyAccessor<Rectangle.AsymmetricalInset>, AsyncThreadFlags>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for StaticBody<ViewBodyAccessor<Rectangle.AsymmetricalInset>, AsyncThreadFlags>;
  if (!lazy cache variable for type metadata for StaticBody<ViewBodyAccessor<Rectangle.AsymmetricalInset>, AsyncThreadFlags>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for ViewBodyAccessor<Rectangle.AsymmetricalInset>, (uint64_t)&type metadata for Rectangle.AsymmetricalInset, (uint64_t)&protocol witness table for Rectangle.AsymmetricalInset, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ViewBodyAccessor);
    lazy protocol witness table accessor for type ViewBodyAccessor<Rectangle.AsymmetricalInset> and conformance ViewBodyAccessor<A>();
    type metadata accessor for StaticBody();
  }
  return result;
}

uint64_t type metadata accessor for DynamicBody<ViewBodyAccessor<Rectangle.AsymmetricalInset>, MainThreadFlags>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for DynamicBody<ViewBodyAccessor<Rectangle.AsymmetricalInset>, MainThreadFlags>;
  if (!lazy cache variable for type metadata for DynamicBody<ViewBodyAccessor<Rectangle.AsymmetricalInset>, MainThreadFlags>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for ViewBodyAccessor<Rectangle.AsymmetricalInset>, (uint64_t)&type metadata for Rectangle.AsymmetricalInset, (uint64_t)&protocol witness table for Rectangle.AsymmetricalInset, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ViewBodyAccessor);
    lazy protocol witness table accessor for type ViewBodyAccessor<Rectangle.AsymmetricalInset> and conformance ViewBodyAccessor<A>();
    type metadata accessor for DynamicBody();
  }
  return result;
}

uint64_t type metadata accessor for StaticBody<ViewBodyAccessor<Rectangle.AsymmetricalInset>, MainThreadFlags>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for StaticBody<ViewBodyAccessor<Rectangle.AsymmetricalInset>, MainThreadFlags>;
  if (!lazy cache variable for type metadata for StaticBody<ViewBodyAccessor<Rectangle.AsymmetricalInset>, MainThreadFlags>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for ViewBodyAccessor<Rectangle.AsymmetricalInset>, (uint64_t)&type metadata for Rectangle.AsymmetricalInset, (uint64_t)&protocol witness table for Rectangle.AsymmetricalInset, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ViewBodyAccessor);
    lazy protocol witness table accessor for type ViewBodyAccessor<Rectangle.AsymmetricalInset> and conformance ViewBodyAccessor<A>();
    type metadata accessor for StaticBody();
  }
  return result;
}

void type metadata accessor for TypedUnaryViewGenerator<_ShapeView<CombinedContentShape, ForegroundStyle>>(uint64_t a1)
{
  type metadata accessor for InterpolatedDisplayList<ResolvedStyledText>(a1, &lazy cache variable for type metadata for TypedUnaryViewGenerator<_ShapeView<CombinedContentShape, ForegroundStyle>>, (uint64_t (*)(uint64_t))type metadata accessor for _ShapeView<CombinedContentShape, ForegroundStyle>, (uint64_t)&protocol witness table for _ShapeView<A, B>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for TypedUnaryViewGenerator);
}

unint64_t type metadata accessor for CombinedContentShape.Type()
{
  unint64_t result;

  result = lazy cache variable for type metadata for CombinedContentShape.Type;
  if (!lazy cache variable for type metadata for CombinedContentShape.Type)
  {
    result = swift_getMetatypeMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for CombinedContentShape.Type);
  }
  return result;
}

uint64_t type metadata accessor for DynamicBody<ViewBodyAccessor<CombinedContentShape>, AsyncThreadFlags>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for DynamicBody<ViewBodyAccessor<CombinedContentShape>, AsyncThreadFlags>;
  if (!lazy cache variable for type metadata for DynamicBody<ViewBodyAccessor<CombinedContentShape>, AsyncThreadFlags>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for ViewBodyAccessor<CombinedContentShape>, (uint64_t)&type metadata for CombinedContentShape, (uint64_t)&protocol witness table for CombinedContentShape, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ViewBodyAccessor);
    lazy protocol witness table accessor for type ViewBodyAccessor<CombinedContentShape> and conformance ViewBodyAccessor<A>();
    type metadata accessor for DynamicBody();
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ViewBodyAccessor<CombinedContentShape> and conformance ViewBodyAccessor<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type ViewBodyAccessor<CombinedContentShape> and conformance ViewBodyAccessor<A>;
  if (!lazy protocol witness table cache variable for type ViewBodyAccessor<CombinedContentShape> and conformance ViewBodyAccessor<A>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for ViewBodyAccessor<CombinedContentShape>, (uint64_t)&type metadata for CombinedContentShape, (uint64_t)&protocol witness table for CombinedContentShape, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ViewBodyAccessor);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ViewBodyAccessor<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ViewBodyAccessor<CombinedContentShape> and conformance ViewBodyAccessor<A>);
  }
  return result;
}

uint64_t type metadata accessor for StaticBody<ViewBodyAccessor<CombinedContentShape>, AsyncThreadFlags>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for StaticBody<ViewBodyAccessor<CombinedContentShape>, AsyncThreadFlags>;
  if (!lazy cache variable for type metadata for StaticBody<ViewBodyAccessor<CombinedContentShape>, AsyncThreadFlags>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for ViewBodyAccessor<CombinedContentShape>, (uint64_t)&type metadata for CombinedContentShape, (uint64_t)&protocol witness table for CombinedContentShape, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ViewBodyAccessor);
    lazy protocol witness table accessor for type ViewBodyAccessor<CombinedContentShape> and conformance ViewBodyAccessor<A>();
    type metadata accessor for StaticBody();
  }
  return result;
}

uint64_t type metadata accessor for DynamicBody<ViewBodyAccessor<CombinedContentShape>, MainThreadFlags>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for DynamicBody<ViewBodyAccessor<CombinedContentShape>, MainThreadFlags>;
  if (!lazy cache variable for type metadata for DynamicBody<ViewBodyAccessor<CombinedContentShape>, MainThreadFlags>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for ViewBodyAccessor<CombinedContentShape>, (uint64_t)&type metadata for CombinedContentShape, (uint64_t)&protocol witness table for CombinedContentShape, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ViewBodyAccessor);
    lazy protocol witness table accessor for type ViewBodyAccessor<CombinedContentShape> and conformance ViewBodyAccessor<A>();
    type metadata accessor for DynamicBody();
  }
  return result;
}

uint64_t type metadata accessor for StaticBody<ViewBodyAccessor<CombinedContentShape>, MainThreadFlags>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for StaticBody<ViewBodyAccessor<CombinedContentShape>, MainThreadFlags>;
  if (!lazy cache variable for type metadata for StaticBody<ViewBodyAccessor<CombinedContentShape>, MainThreadFlags>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for ViewBodyAccessor<CombinedContentShape>, (uint64_t)&type metadata for CombinedContentShape, (uint64_t)&protocol witness table for CombinedContentShape, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ViewBodyAccessor);
    lazy protocol witness table accessor for type ViewBodyAccessor<CombinedContentShape> and conformance ViewBodyAccessor<A>();
    type metadata accessor for StaticBody();
  }
  return result;
}

unint64_t type metadata accessor for _ColorMultiplyEffect.Type()
{
  unint64_t result;

  result = lazy cache variable for type metadata for _ColorMultiplyEffect.Type;
  if (!lazy cache variable for type metadata for _ColorMultiplyEffect.Type)
  {
    result = swift_getMetatypeMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for _ColorMultiplyEffect.Type);
  }
  return result;
}

void type metadata accessor for [Unmanaged<DynamicViewList<AnyView>.Item>](uint64_t a1)
{
  type metadata accessor for [(_:)](a1, &lazy cache variable for type metadata for [Unmanaged<DynamicViewList<AnyView>.Item>], (uint64_t (*)(uint64_t))type metadata accessor for Unmanaged<DynamicViewList<AnyView>.Item>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1250]);
}

unint64_t lazy protocol witness table accessor for type DynamicViewList<AnyView> and conformance DynamicViewList<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type DynamicViewList<AnyView> and conformance DynamicViewList<A>;
  if (!lazy protocol witness table cache variable for type DynamicViewList<AnyView> and conformance DynamicViewList<A>)
  {
    type metadata accessor for FontBox<Font.SystemProvider>(255, &lazy cache variable for type metadata for DynamicViewList<AnyView>, (uint64_t (*)(void))lazy protocol witness table accessor for type AnyView and conformance AnyView, (uint64_t)&type metadata for AnyView, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for DynamicViewList);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for DynamicViewList<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DynamicViewList<AnyView> and conformance DynamicViewList<A>);
  }
  return result;
}

unint64_t type metadata accessor for _TestApp.RootView.Type()
{
  unint64_t result;

  result = lazy cache variable for type metadata for _TestApp.RootView.Type;
  if (!lazy cache variable for type metadata for _TestApp.RootView.Type)
  {
    result = swift_getMetatypeMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for _TestApp.RootView.Type);
  }
  return result;
}

unint64_t type metadata accessor for MeshGradient.Type()
{
  unint64_t result;

  result = lazy cache variable for type metadata for MeshGradient.Type;
  if (!lazy cache variable for type metadata for MeshGradient.Type)
  {
    result = swift_getMetatypeMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for MeshGradient.Type);
  }
  return result;
}

void type metadata accessor for TypedUnaryViewGenerator<_ShapeView<ContainerRelativeShape._Inset, ForegroundStyle>>(uint64_t a1)
{
  type metadata accessor for InterpolatedDisplayList<ResolvedStyledText>(a1, &lazy cache variable for type metadata for TypedUnaryViewGenerator<_ShapeView<ContainerRelativeShape._Inset, ForegroundStyle>>, (uint64_t (*)(uint64_t))type metadata accessor for _ShapeView<ContainerRelativeShape._Inset, ForegroundStyle>, (uint64_t)&protocol witness table for _ShapeView<A, B>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for TypedUnaryViewGenerator);
}

unint64_t type metadata accessor for ContainerRelativeShape._Inset.Type()
{
  unint64_t result;

  result = lazy cache variable for type metadata for ContainerRelativeShape._Inset.Type;
  if (!lazy cache variable for type metadata for ContainerRelativeShape._Inset.Type)
  {
    result = swift_getMetatypeMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for ContainerRelativeShape._Inset.Type);
  }
  return result;
}

void type metadata accessor for TypedUnaryViewGenerator<_ShapeView<ContainerRelativeShape, ForegroundStyle>>(uint64_t a1)
{
  type metadata accessor for InterpolatedDisplayList<ResolvedStyledText>(a1, &lazy cache variable for type metadata for TypedUnaryViewGenerator<_ShapeView<ContainerRelativeShape, ForegroundStyle>>, (uint64_t (*)(uint64_t))type metadata accessor for _ShapeView<ContainerRelativeShape, ForegroundStyle>, (uint64_t)&protocol witness table for _ShapeView<A, B>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for TypedUnaryViewGenerator);
}

unint64_t type metadata accessor for ContainerRelativeShape.Type()
{
  unint64_t result;

  result = lazy cache variable for type metadata for ContainerRelativeShape.Type;
  if (!lazy cache variable for type metadata for ContainerRelativeShape.Type)
  {
    result = swift_getMetatypeMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for ContainerRelativeShape.Type);
  }
  return result;
}

void type metadata accessor for TypedUnaryViewGenerator<_ShapeView<Circle._Inset, ForegroundStyle>>(uint64_t a1)
{
  type metadata accessor for InterpolatedDisplayList<ResolvedStyledText>(a1, &lazy cache variable for type metadata for TypedUnaryViewGenerator<_ShapeView<Circle._Inset, ForegroundStyle>>, (uint64_t (*)(uint64_t))type metadata accessor for _ShapeView<Circle._Inset, ForegroundStyle>, (uint64_t)&protocol witness table for _ShapeView<A, B>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for TypedUnaryViewGenerator);
}

unint64_t type metadata accessor for Circle._Inset.Type()
{
  unint64_t result;

  result = lazy cache variable for type metadata for Circle._Inset.Type;
  if (!lazy cache variable for type metadata for Circle._Inset.Type)
  {
    result = swift_getMetatypeMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for Circle._Inset.Type);
  }
  return result;
}

void type metadata accessor for TypedUnaryViewGenerator<_ShapeView<Ellipse._Inset, ForegroundStyle>>(uint64_t a1)
{
  type metadata accessor for InterpolatedDisplayList<ResolvedStyledText>(a1, &lazy cache variable for type metadata for TypedUnaryViewGenerator<_ShapeView<Ellipse._Inset, ForegroundStyle>>, (uint64_t (*)(uint64_t))type metadata accessor for _ShapeView<Ellipse._Inset, ForegroundStyle>, (uint64_t)&protocol witness table for _ShapeView<A, B>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for TypedUnaryViewGenerator);
}

unint64_t type metadata accessor for Ellipse._Inset.Type()
{
  unint64_t result;

  result = lazy cache variable for type metadata for Ellipse._Inset.Type;
  if (!lazy cache variable for type metadata for Ellipse._Inset.Type)
  {
    result = swift_getMetatypeMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for Ellipse._Inset.Type);
  }
  return result;
}

void type metadata accessor for TypedUnaryViewGenerator<_ShapeView<Capsule._Inset, ForegroundStyle>>(uint64_t a1)
{
  type metadata accessor for InterpolatedDisplayList<ResolvedStyledText>(a1, &lazy cache variable for type metadata for TypedUnaryViewGenerator<_ShapeView<Capsule._Inset, ForegroundStyle>>, (uint64_t (*)(uint64_t))type metadata accessor for _ShapeView<Capsule._Inset, ForegroundStyle>, (uint64_t)&protocol witness table for _ShapeView<A, B>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for TypedUnaryViewGenerator);
}

unint64_t type metadata accessor for Capsule._Inset.Type()
{
  unint64_t result;

  result = lazy cache variable for type metadata for Capsule._Inset.Type;
  if (!lazy cache variable for type metadata for Capsule._Inset.Type)
  {
    result = swift_getMetatypeMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for Capsule._Inset.Type);
  }
  return result;
}

void type metadata accessor for TypedUnaryViewGenerator<_ShapeView<UnevenRoundedRectangle._Inset, ForegroundStyle>>(uint64_t a1)
{
  type metadata accessor for InterpolatedDisplayList<ResolvedStyledText>(a1, &lazy cache variable for type metadata for TypedUnaryViewGenerator<_ShapeView<UnevenRoundedRectangle._Inset, ForegroundStyle>>, (uint64_t (*)(uint64_t))type metadata accessor for _ShapeView<UnevenRoundedRectangle._Inset, ForegroundStyle>, (uint64_t)&protocol witness table for _ShapeView<A, B>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for TypedUnaryViewGenerator);
}

unint64_t type metadata accessor for UnevenRoundedRectangle._Inset.Type()
{
  unint64_t result;

  result = lazy cache variable for type metadata for UnevenRoundedRectangle._Inset.Type;
  if (!lazy cache variable for type metadata for UnevenRoundedRectangle._Inset.Type)
  {
    result = swift_getMetatypeMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for UnevenRoundedRectangle._Inset.Type);
  }
  return result;
}

void type metadata accessor for TypedUnaryViewGenerator<_ShapeView<RoundedRectangle._Inset, ForegroundStyle>>(uint64_t a1)
{
  type metadata accessor for InterpolatedDisplayList<ResolvedStyledText>(a1, &lazy cache variable for type metadata for TypedUnaryViewGenerator<_ShapeView<RoundedRectangle._Inset, ForegroundStyle>>, (uint64_t (*)(uint64_t))type metadata accessor for _ShapeView<RoundedRectangle._Inset, ForegroundStyle>, (uint64_t)&protocol witness table for _ShapeView<A, B>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for TypedUnaryViewGenerator);
}

unint64_t type metadata accessor for RoundedRectangle._Inset.Type()
{
  unint64_t result;

  result = lazy cache variable for type metadata for RoundedRectangle._Inset.Type;
  if (!lazy cache variable for type metadata for RoundedRectangle._Inset.Type)
  {
    result = swift_getMetatypeMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for RoundedRectangle._Inset.Type);
  }
  return result;
}

void type metadata accessor for TypedUnaryViewGenerator<_ShapeView<Rectangle._Inset, ForegroundStyle>>(uint64_t a1)
{
  type metadata accessor for InterpolatedDisplayList<ResolvedStyledText>(a1, &lazy cache variable for type metadata for TypedUnaryViewGenerator<_ShapeView<Rectangle._Inset, ForegroundStyle>>, (uint64_t (*)(uint64_t))type metadata accessor for _ShapeView<Rectangle._Inset, ForegroundStyle>, (uint64_t)&protocol witness table for _ShapeView<A, B>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for TypedUnaryViewGenerator);
}

unint64_t type metadata accessor for Rectangle._Inset.Type()
{
  unint64_t result;

  result = lazy cache variable for type metadata for Rectangle._Inset.Type;
  if (!lazy cache variable for type metadata for Rectangle._Inset.Type)
  {
    result = swift_getMetatypeMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for Rectangle._Inset.Type);
  }
  return result;
}

void type metadata accessor for TypedUnaryViewGenerator<_ShapeView<Circle, ForegroundStyle>>(uint64_t a1)
{
  type metadata accessor for InterpolatedDisplayList<ResolvedStyledText>(a1, &lazy cache variable for type metadata for TypedUnaryViewGenerator<_ShapeView<Circle, ForegroundStyle>>, (uint64_t (*)(uint64_t))type metadata accessor for _ShapeView<Circle, ForegroundStyle>, (uint64_t)&protocol witness table for _ShapeView<A, B>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for TypedUnaryViewGenerator);
}

unint64_t type metadata accessor for Circle.Type()
{
  unint64_t result;

  result = lazy cache variable for type metadata for Circle.Type;
  if (!lazy cache variable for type metadata for Circle.Type)
  {
    result = swift_getMetatypeMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for Circle.Type);
  }
  return result;
}

void type metadata accessor for TypedUnaryViewGenerator<_ShapeView<Ellipse, ForegroundStyle>>(uint64_t a1)
{
  type metadata accessor for InterpolatedDisplayList<ResolvedStyledText>(a1, &lazy cache variable for type metadata for TypedUnaryViewGenerator<_ShapeView<Ellipse, ForegroundStyle>>, (uint64_t (*)(uint64_t))type metadata accessor for _ShapeView<Ellipse, ForegroundStyle>, (uint64_t)&protocol witness table for _ShapeView<A, B>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for TypedUnaryViewGenerator);
}

unint64_t type metadata accessor for Ellipse.Type()
{
  unint64_t result;

  result = lazy cache variable for type metadata for Ellipse.Type;
  if (!lazy cache variable for type metadata for Ellipse.Type)
  {
    result = swift_getMetatypeMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for Ellipse.Type);
  }
  return result;
}

void type metadata accessor for TypedUnaryViewGenerator<_ShapeView<Capsule, ForegroundStyle>>(uint64_t a1)
{
  type metadata accessor for InterpolatedDisplayList<ResolvedStyledText>(a1, &lazy cache variable for type metadata for TypedUnaryViewGenerator<_ShapeView<Capsule, ForegroundStyle>>, (uint64_t (*)(uint64_t))type metadata accessor for _ShapeView<Capsule, ForegroundStyle>, (uint64_t)&protocol witness table for _ShapeView<A, B>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for TypedUnaryViewGenerator);
}

unint64_t type metadata accessor for Capsule.Type()
{
  unint64_t result;

  result = lazy cache variable for type metadata for Capsule.Type;
  if (!lazy cache variable for type metadata for Capsule.Type)
  {
    result = swift_getMetatypeMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for Capsule.Type);
  }
  return result;
}

void type metadata accessor for TypedUnaryViewGenerator<_ShapeView<UnevenRoundedRectangle, ForegroundStyle>>(uint64_t a1)
{
  type metadata accessor for InterpolatedDisplayList<ResolvedStyledText>(a1, &lazy cache variable for type metadata for TypedUnaryViewGenerator<_ShapeView<UnevenRoundedRectangle, ForegroundStyle>>, (uint64_t (*)(uint64_t))type metadata accessor for _ShapeView<UnevenRoundedRectangle, ForegroundStyle>, (uint64_t)&protocol witness table for _ShapeView<A, B>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for TypedUnaryViewGenerator);
}

unint64_t type metadata accessor for UnevenRoundedRectangle.Type()
{
  unint64_t result;

  result = lazy cache variable for type metadata for UnevenRoundedRectangle.Type;
  if (!lazy cache variable for type metadata for UnevenRoundedRectangle.Type)
  {
    result = swift_getMetatypeMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for UnevenRoundedRectangle.Type);
  }
  return result;
}

void type metadata accessor for TypedUnaryViewGenerator<_ShapeView<RoundedRectangle, ForegroundStyle>>(uint64_t a1)
{
  type metadata accessor for InterpolatedDisplayList<ResolvedStyledText>(a1, &lazy cache variable for type metadata for TypedUnaryViewGenerator<_ShapeView<RoundedRectangle, ForegroundStyle>>, (uint64_t (*)(uint64_t))type metadata accessor for _ShapeView<RoundedRectangle, ForegroundStyle>, (uint64_t)&protocol witness table for _ShapeView<A, B>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for TypedUnaryViewGenerator);
}

unint64_t type metadata accessor for RoundedRectangle.Type()
{
  unint64_t result;

  result = lazy cache variable for type metadata for RoundedRectangle.Type;
  if (!lazy cache variable for type metadata for RoundedRectangle.Type)
  {
    result = swift_getMetatypeMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for RoundedRectangle.Type);
  }
  return result;
}

void type metadata accessor for TypedUnaryViewGenerator<_ShapeView<Rectangle, ForegroundStyle>>(uint64_t a1)
{
  type metadata accessor for InterpolatedDisplayList<ResolvedStyledText>(a1, &lazy cache variable for type metadata for TypedUnaryViewGenerator<_ShapeView<Rectangle, ForegroundStyle>>, (uint64_t (*)(uint64_t))type metadata accessor for _ShapeView<Rectangle, ForegroundStyle>, (uint64_t)&protocol witness table for _ShapeView<A, B>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for TypedUnaryViewGenerator);
}

unint64_t type metadata accessor for Rectangle.Type()
{
  unint64_t result;

  result = lazy cache variable for type metadata for Rectangle.Type;
  if (!lazy cache variable for type metadata for Rectangle.Type)
  {
    result = swift_getMetatypeMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for Rectangle.Type);
  }
  return result;
}

void type metadata accessor for TypedUnaryViewGenerator<_ShapeView<Path, ForegroundStyle>>(uint64_t a1)
{
  type metadata accessor for InterpolatedDisplayList<ResolvedStyledText>(a1, &lazy cache variable for type metadata for TypedUnaryViewGenerator<_ShapeView<Path, ForegroundStyle>>, (uint64_t (*)(uint64_t))type metadata accessor for _ShapeView<Path, ForegroundStyle>, (uint64_t)&protocol witness table for _ShapeView<A, B>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for TypedUnaryViewGenerator);
}

unint64_t type metadata accessor for Path.Type()
{
  unint64_t result;

  result = lazy cache variable for type metadata for Path.Type;
  if (!lazy cache variable for type metadata for Path.Type)
  {
    result = swift_getMetatypeMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for Path.Type);
  }
  return result;
}

void type metadata accessor for TypedUnaryViewGenerator<_ShapeView<AnyShape, ForegroundStyle>>(uint64_t a1)
{
  type metadata accessor for InterpolatedDisplayList<ResolvedStyledText>(a1, &lazy cache variable for type metadata for TypedUnaryViewGenerator<_ShapeView<AnyShape, ForegroundStyle>>, (uint64_t (*)(uint64_t))type metadata accessor for _ShapeView<AnyShape, ForegroundStyle>, (uint64_t)&protocol witness table for _ShapeView<A, B>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for TypedUnaryViewGenerator);
}

unint64_t type metadata accessor for AnyShape.Type()
{
  unint64_t result;

  result = lazy cache variable for type metadata for AnyShape.Type;
  if (!lazy cache variable for type metadata for AnyShape.Type)
  {
    result = swift_getMetatypeMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for AnyShape.Type);
  }
  return result;
}

void type metadata accessor for ChildEnvironment<Font?>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t))
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    type metadata accessor for MutableBox<CachedEnvironment>(255, &lazy cache variable for type metadata for Font?, (uint64_t)&type metadata for Font, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1C68]);
    v7 = a3(a1, v6);
    if (!v8)
      atomic_store(v7, a2);
  }
}

unint64_t type metadata accessor for _IntelligenceSupport.AnimatingSummarySymbol.Type()
{
  unint64_t result;

  result = lazy cache variable for type metadata for _IntelligenceSupport.AnimatingSummarySymbol.Type;
  if (!lazy cache variable for type metadata for _IntelligenceSupport.AnimatingSummarySymbol.Type)
  {
    result = swift_getMetatypeMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for _IntelligenceSupport.AnimatingSummarySymbol.Type);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ChildEnvironment<Font?> and conformance ChildEnvironment<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type ChildEnvironment<Font?> and conformance ChildEnvironment<A>;
  if (!lazy protocol witness table cache variable for type ChildEnvironment<Font?> and conformance ChildEnvironment<A>)
  {
    type metadata accessor for ChildEnvironment<Font?>(255, &lazy cache variable for type metadata for ChildEnvironment<Font?>, (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for ChildEnvironment);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ChildEnvironment<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ChildEnvironment<Font?> and conformance ChildEnvironment<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ValueTransactionSeed<Bool> and conformance ValueTransactionSeed<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type ValueTransactionSeed<Bool> and conformance ValueTransactionSeed<A>;
  if (!lazy protocol witness table cache variable for type ValueTransactionSeed<Bool> and conformance ValueTransactionSeed<A>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for ValueTransactionSeed<Bool>, MEMORY[0x24BEE1328], MEMORY[0x24BEE1340], (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ValueTransactionSeed);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ValueTransactionSeed<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ValueTransactionSeed<Bool> and conformance ValueTransactionSeed<A>);
  }
  return result;
}

uint64_t sub_234DB0464()
{
  return 16;
}

__n128 sub_234DB0470(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

void type metadata accessor for Focus<_ValueTransactionModifier<Bool>, (_:)>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for Focus<_ValueTransactionModifier<Bool>, (_:)>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for _ValueTransactionModifier<Bool>, MEMORY[0x24BEE1328], MEMORY[0x24BEE1340], (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for _ValueTransactionModifier);
    type metadata accessor for (_:)();
    v0 = type metadata accessor for Focus();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Focus<_ValueTransactionModifier<Bool>, (_:)>);
  }
}

unint64_t lazy protocol witness table accessor for type ChildValueTransaction and conformance ChildValueTransaction()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ChildValueTransaction and conformance ChildValueTransaction;
  if (!lazy protocol witness table cache variable for type ChildValueTransaction and conformance ChildValueTransaction)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ChildValueTransaction, &type metadata for ChildValueTransaction);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ChildValueTransaction and conformance ChildValueTransaction);
  }
  return result;
}

unint64_t type metadata accessor for _IntelligenceSupport.AnimatingText.Type()
{
  unint64_t result;

  result = lazy cache variable for type metadata for _IntelligenceSupport.AnimatingText.Type;
  if (!lazy cache variable for type metadata for _IntelligenceSupport.AnimatingText.Type)
  {
    result = swift_getMetatypeMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for _IntelligenceSupport.AnimatingText.Type);
  }
  return result;
}

void type metadata accessor for UnaryElements<TypedUnaryViewGenerator<Image>>(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;

  if (!*a2)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, a3, a4, a5, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for TypedUnaryViewGenerator);
    v9 = type metadata accessor for UnaryElements(a1, v7, (uint64_t)&protocol witness table for TypedUnaryViewGenerator<A>, v8);
    if (!v10)
      atomic_store(v9, a2);
  }
}

uint64_t type metadata accessor for DynamicBody<GestureBodyAccessor<DistanceGesture>, AsyncThreadFlags>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for DynamicBody<GestureBodyAccessor<DistanceGesture>, AsyncThreadFlags>;
  if (!lazy cache variable for type metadata for DynamicBody<GestureBodyAccessor<DistanceGesture>, AsyncThreadFlags>)
  {
    type metadata accessor for FontBox<Font.SystemProvider>(255, &lazy cache variable for type metadata for GestureBodyAccessor<DistanceGesture>, (uint64_t (*)(void))lazy protocol witness table accessor for type DistanceGesture and conformance DistanceGesture, (uint64_t)&type metadata for DistanceGesture, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for GestureBodyAccessor);
    lazy protocol witness table accessor for type GestureBodyAccessor<DistanceGesture> and conformance GestureBodyAccessor<A>();
    type metadata accessor for DynamicBody();
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type GestureBodyAccessor<DistanceGesture> and conformance GestureBodyAccessor<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type GestureBodyAccessor<DistanceGesture> and conformance GestureBodyAccessor<A>;
  if (!lazy protocol witness table cache variable for type GestureBodyAccessor<DistanceGesture> and conformance GestureBodyAccessor<A>)
  {
    type metadata accessor for FontBox<Font.SystemProvider>(255, &lazy cache variable for type metadata for GestureBodyAccessor<DistanceGesture>, (uint64_t (*)(void))lazy protocol witness table accessor for type DistanceGesture and conformance DistanceGesture, (uint64_t)&type metadata for DistanceGesture, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for GestureBodyAccessor);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for GestureBodyAccessor<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GestureBodyAccessor<DistanceGesture> and conformance GestureBodyAccessor<A>);
  }
  return result;
}

uint64_t type metadata accessor for StaticBody<GestureBodyAccessor<DistanceGesture>, AsyncThreadFlags>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for StaticBody<GestureBodyAccessor<DistanceGesture>, AsyncThreadFlags>;
  if (!lazy cache variable for type metadata for StaticBody<GestureBodyAccessor<DistanceGesture>, AsyncThreadFlags>)
  {
    type metadata accessor for FontBox<Font.SystemProvider>(255, &lazy cache variable for type metadata for GestureBodyAccessor<DistanceGesture>, (uint64_t (*)(void))lazy protocol witness table accessor for type DistanceGesture and conformance DistanceGesture, (uint64_t)&type metadata for DistanceGesture, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for GestureBodyAccessor);
    lazy protocol witness table accessor for type GestureBodyAccessor<DistanceGesture> and conformance GestureBodyAccessor<A>();
    type metadata accessor for StaticBody();
  }
  return result;
}

unint64_t type metadata accessor for DistanceGesture.Type()
{
  unint64_t result;

  result = lazy cache variable for type metadata for DistanceGesture.Type;
  if (!lazy cache variable for type metadata for DistanceGesture.Type)
  {
    result = swift_getMetatypeMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for DistanceGesture.Type);
  }
  return result;
}

uint64_t type metadata accessor for DynamicBody<GestureBodyAccessor<DistanceGesture>, MainThreadFlags>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for DynamicBody<GestureBodyAccessor<DistanceGesture>, MainThreadFlags>;
  if (!lazy cache variable for type metadata for DynamicBody<GestureBodyAccessor<DistanceGesture>, MainThreadFlags>)
  {
    type metadata accessor for FontBox<Font.SystemProvider>(255, &lazy cache variable for type metadata for GestureBodyAccessor<DistanceGesture>, (uint64_t (*)(void))lazy protocol witness table accessor for type DistanceGesture and conformance DistanceGesture, (uint64_t)&type metadata for DistanceGesture, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for GestureBodyAccessor);
    lazy protocol witness table accessor for type GestureBodyAccessor<DistanceGesture> and conformance GestureBodyAccessor<A>();
    type metadata accessor for DynamicBody();
  }
  return result;
}

uint64_t type metadata accessor for StaticBody<GestureBodyAccessor<DistanceGesture>, MainThreadFlags>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for StaticBody<GestureBodyAccessor<DistanceGesture>, MainThreadFlags>;
  if (!lazy cache variable for type metadata for StaticBody<GestureBodyAccessor<DistanceGesture>, MainThreadFlags>)
  {
    type metadata accessor for FontBox<Font.SystemProvider>(255, &lazy cache variable for type metadata for GestureBodyAccessor<DistanceGesture>, (uint64_t (*)(void))lazy protocol witness table accessor for type DistanceGesture and conformance DistanceGesture, (uint64_t)&type metadata for DistanceGesture, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for GestureBodyAccessor);
    lazy protocol witness table accessor for type GestureBodyAccessor<DistanceGesture> and conformance GestureBodyAccessor<A>();
    type metadata accessor for StaticBody();
  }
  return result;
}

uint64_t partial apply for specialized closure #1 in static _VariadicView_UnaryViewRoot._makeViewList(root:inputs:body:)(uint64_t a1)
{
  return partial apply for specialized closure #1 in static _VariadicView_UnaryViewRoot._makeViewList(root:inputs:body:)(a1, (uint64_t (*)(_OWORD *, uint64_t, uint64_t, uint64_t, uint64_t))specialized closure #1 in static _VariadicView_UnaryViewRoot._makeViewList(root:inputs:body:));
}

{
  return partial apply for specialized closure #1 in static _VariadicView_UnaryViewRoot._makeViewList(root:inputs:body:)(a1, (uint64_t (*)(_OWORD *, uint64_t, uint64_t, uint64_t, uint64_t))specialized closure #1 in static _VariadicView_UnaryViewRoot._makeViewList(root:inputs:body:));
}

{
  return partial apply for specialized closure #1 in static _VariadicView_UnaryViewRoot._makeViewList(root:inputs:body:)(a1, (uint64_t (*)(_OWORD *, uint64_t, uint64_t, uint64_t, uint64_t))specialized closure #1 in static _VariadicView_UnaryViewRoot._makeViewList(root:inputs:body:));
}

void type metadata accessor for UnaryElements<BodyUnaryViewGenerator<_ZStackLayout>>(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;

  if (!*a2)
  {
    type metadata accessor for MutableBox<CachedEnvironment>(255, a3, a4, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for BodyUnaryViewGenerator);
    v8 = type metadata accessor for UnaryElements(a1, v6, (uint64_t)&protocol witness table for BodyUnaryViewGenerator<A>, v7);
    if (!v9)
      atomic_store(v8, a2);
  }
}

uint64_t partial apply for closure #1 in closure #1 in static _VariadicView_UnaryViewRoot._makeViewList(root:inputs:body:)(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;

  return closure #1 in closure #1 in static _VariadicView_UnaryViewRoot._makeViewList(root:inputs:body:)(a1, a2, *(void (**)(uint64_t, uint64_t *))(v2 + 16));
}

unint64_t type metadata accessor for _ShadowEffect.Type()
{
  unint64_t result;

  result = lazy cache variable for type metadata for _ShadowEffect.Type;
  if (!lazy cache variable for type metadata for _ShadowEffect.Type)
  {
    result = swift_getMetatypeMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for _ShadowEffect.Type);
  }
  return result;
}

unint64_t type metadata accessor for _ColorMonochromeEffect.Type()
{
  unint64_t result;

  result = lazy cache variable for type metadata for _ColorMonochromeEffect.Type;
  if (!lazy cache variable for type metadata for _ColorMonochromeEffect.Type)
  {
    result = swift_getMetatypeMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for _ColorMonochromeEffect.Type);
  }
  return result;
}

void type metadata accessor for TypedUnaryViewGenerator<_ShapeView<Rectangle, AngularGradient>>(uint64_t a1)
{
  type metadata accessor for InterpolatedDisplayList<ResolvedStyledText>(a1, &lazy cache variable for type metadata for TypedUnaryViewGenerator<_ShapeView<Rectangle, AngularGradient>>, (uint64_t (*)(uint64_t))type metadata accessor for _ShapeView<Rectangle, AngularGradient>, (uint64_t)&protocol witness table for _ShapeView<A, B>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for TypedUnaryViewGenerator);
}

unint64_t type metadata accessor for AngularGradient.Type()
{
  unint64_t result;

  result = lazy cache variable for type metadata for AngularGradient.Type;
  if (!lazy cache variable for type metadata for AngularGradient.Type)
  {
    result = swift_getMetatypeMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for AngularGradient.Type);
  }
  return result;
}

void type metadata accessor for TypedUnaryViewGenerator<_ShapeView<Rectangle, EllipticalGradient>>(uint64_t a1)
{
  type metadata accessor for InterpolatedDisplayList<ResolvedStyledText>(a1, &lazy cache variable for type metadata for TypedUnaryViewGenerator<_ShapeView<Rectangle, EllipticalGradient>>, (uint64_t (*)(uint64_t))type metadata accessor for _ShapeView<Rectangle, EllipticalGradient>, (uint64_t)&protocol witness table for _ShapeView<A, B>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for TypedUnaryViewGenerator);
}

unint64_t type metadata accessor for EllipticalGradient.Type()
{
  unint64_t result;

  result = lazy cache variable for type metadata for EllipticalGradient.Type;
  if (!lazy cache variable for type metadata for EllipticalGradient.Type)
  {
    result = swift_getMetatypeMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for EllipticalGradient.Type);
  }
  return result;
}

void type metadata accessor for TypedUnaryViewGenerator<_ShapeView<Rectangle, RadialGradient>>(uint64_t a1)
{
  type metadata accessor for InterpolatedDisplayList<ResolvedStyledText>(a1, &lazy cache variable for type metadata for TypedUnaryViewGenerator<_ShapeView<Rectangle, RadialGradient>>, (uint64_t (*)(uint64_t))type metadata accessor for _ShapeView<Rectangle, RadialGradient>, (uint64_t)&protocol witness table for _ShapeView<A, B>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for TypedUnaryViewGenerator);
}

unint64_t type metadata accessor for RadialGradient.Type()
{
  unint64_t result;

  result = lazy cache variable for type metadata for RadialGradient.Type;
  if (!lazy cache variable for type metadata for RadialGradient.Type)
  {
    result = swift_getMetatypeMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for RadialGradient.Type);
  }
  return result;
}

void type metadata accessor for TypedUnaryViewGenerator<_ShapeView<Rectangle, LinearGradient>>(uint64_t a1)
{
  type metadata accessor for InterpolatedDisplayList<ResolvedStyledText>(a1, &lazy cache variable for type metadata for TypedUnaryViewGenerator<_ShapeView<Rectangle, LinearGradient>>, (uint64_t (*)(uint64_t))type metadata accessor for _ShapeView<Rectangle, LinearGradient>, (uint64_t)&protocol witness table for _ShapeView<A, B>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for TypedUnaryViewGenerator);
}

uint64_t objectdestroy_23Tm()
{
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

unint64_t type metadata accessor for LinearGradient.Type()
{
  unint64_t result;

  result = lazy cache variable for type metadata for LinearGradient.Type;
  if (!lazy cache variable for type metadata for LinearGradient.Type)
  {
    result = swift_getMetatypeMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for LinearGradient.Type);
  }
  return result;
}

uint64_t sub_234DB0C14()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for specialized closure #1 in static _VariadicView_UnaryViewRoot._makeViewList(root:inputs:body:)(uint64_t a1, uint64_t (*a2)(_OWORD *, uint64_t, uint64_t, uint64_t, uint64_t))
{
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  _OWORD v11[5];
  int v12;

  v4 = v2[2];
  v5 = v2[3];
  v6 = v2[4];
  v7 = v2[5];
  v8 = *(_OWORD *)(a1 + 48);
  v11[2] = *(_OWORD *)(a1 + 32);
  v11[3] = v8;
  v11[4] = *(_OWORD *)(a1 + 64);
  v12 = *(_DWORD *)(a1 + 80);
  v9 = *(_OWORD *)(a1 + 16);
  v11[0] = *(_OWORD *)a1;
  v11[1] = v9;
  return a2(v11, v4, v5, v6, v7);
}

uint64_t objectdestroy_88Tm()
{
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

void type metadata accessor for GestureBodyAccessor<SingleTapGesture<TappableEvent>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for GestureBodyAccessor<SingleTapGesture<TappableEvent>>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for SingleTapGesture<TappableEvent>, (uint64_t)&type metadata for TappableEvent, (uint64_t)&protocol witness table for TappableEvent, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for SingleTapGesture);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type SingleTapGesture<TappableEvent> and conformance SingleTapGesture<A>();
    v6 = type metadata accessor for GestureBodyAccessor(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for GestureBodyAccessor<SingleTapGesture<TappableEvent>>);
  }
}

unint64_t lazy protocol witness table accessor for type SingleTapGesture<TappableEvent> and conformance SingleTapGesture<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type SingleTapGesture<TappableEvent> and conformance SingleTapGesture<A>;
  if (!lazy protocol witness table cache variable for type SingleTapGesture<TappableEvent> and conformance SingleTapGesture<A>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for SingleTapGesture<TappableEvent>, (uint64_t)&type metadata for TappableEvent, (uint64_t)&protocol witness table for TappableEvent, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for SingleTapGesture);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for SingleTapGesture<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SingleTapGesture<TappableEvent> and conformance SingleTapGesture<A>);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type DynamicBody<GestureBodyAccessor<SingleTapGesture<TappableEvent>>, AsyncThreadFlags> and conformance DynamicBody<A, B>(unint64_t *a1, unint64_t *a2, uint64_t (*a3)(uint64_t, _QWORD *), uint64_t a4)
{
  uint64_t result;
  uint64_t v7;

  result = *a1;
  if (!result)
  {
    type metadata accessor for StaticBody<GestureBodyAccessor<SingleTapGesture<TappableEvent>>, MainThreadFlags>(255, a2, (uint64_t)&type metadata for AsyncThreadFlags, (uint64_t)&protocol witness table for AsyncThreadFlags, a3);
    result = MEMORY[0x23B7C9C04](a4, v7);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t type metadata accessor for SingleTapGesture<TappableEvent>.Type()
{
  unint64_t result;

  result = lazy cache variable for type metadata for SingleTapGesture<TappableEvent>.Type;
  if (!lazy cache variable for type metadata for SingleTapGesture<TappableEvent>.Type)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for SingleTapGesture<TappableEvent>, (uint64_t)&type metadata for TappableEvent, (uint64_t)&protocol witness table for TappableEvent, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for SingleTapGesture);
    result = swift_getMetatypeMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for SingleTapGesture<TappableEvent>.Type);
  }
  return result;
}

void type metadata accessor for StaticBody<GestureBodyAccessor<SingleTapGesture<TappableEvent>>, MainThreadFlags>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t, _QWORD *))
{
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD v13[4];

  if (!*a2)
  {
    type metadata accessor for GestureBodyAccessor<SingleTapGesture<TappableEvent>>(255);
    v13[0] = v10;
    v13[1] = a3;
    v13[2] = lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type GestureBodyAccessor<SingleTapGesture<TappableEvent>> and conformance GestureBodyAccessor<A>, (uint64_t (*)(uint64_t))type metadata accessor for GestureBodyAccessor<SingleTapGesture<TappableEvent>>, (uint64_t)&protocol conformance descriptor for GestureBodyAccessor<A>);
    v13[3] = a4;
    v11 = a5(a1, v13);
    if (!v12)
      atomic_store(v11, a2);
  }
}

uint64_t lazy protocol witness table accessor for type StaticBody<GestureBodyAccessor<SingleTapGesture<TappableEvent>>, MainThreadFlags> and conformance StaticBody<A, B>(unint64_t *a1, unint64_t *a2, uint64_t (*a3)(uint64_t, _QWORD *), uint64_t a4)
{
  uint64_t result;
  uint64_t v7;

  result = *a1;
  if (!result)
  {
    type metadata accessor for StaticBody<GestureBodyAccessor<SingleTapGesture<TappableEvent>>, MainThreadFlags>(255, a2, (uint64_t)&type metadata for MainThreadFlags, (uint64_t)&protocol witness table for MainThreadFlags, a3);
    result = MEMORY[0x23B7C9C04](a4, v7);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t type metadata accessor for MakeModifiedRoot(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for MakeModifiedRoot);
}

uint64_t outlined release of MakeModifiedRoot<A>(uint64_t a1)
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t partial apply for closure #1 in closure #2 in static _VariadicView.Tree<>._makeViewList(view:inputs:)(uint64_t a1)
{
  uint64_t *v1;

  return closure #1 in closure #2 in static _VariadicView.Tree<>._makeView(view:inputs:)(a1, v1[2], v1[3], v1[4], v1[5], (uint64_t)partial apply for closure #1 in static PointerOffset.of(_:));
}

uint64_t partial apply for closure #1 in closure #2 in static _VariadicView.Tree<>._makeView(view:inputs:)(uint64_t a1)
{
  uint64_t *v1;

  return closure #1 in closure #2 in static _VariadicView.Tree<>._makeView(view:inputs:)(a1, v1[2], v1[3], v1[4], v1[5], (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply);
}

uint64_t type metadata accessor for ViewRootBodyAccessor(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ViewRootBodyAccessor);
}

uint64_t sub_234DB1020()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in static _VariadicView_MultiViewRoot._makeView(root:inputs:body:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return closure #1 in closure #1 in static _VariadicView_MultiViewRoot._makeView(root:inputs:body:)(a1, a2, *(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t *))(v2 + 32), *(_QWORD *)(v2 + 40), *(_QWORD *)(v2 + 48), *(_DWORD *)(v2 + 56), *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24));
}

ValueMetadata *type metadata accessor for ImplicitRootType()
{
  return &type metadata for ImplicitRootType;
}

uint64_t initializeBufferWithCopyOfBuffer for ViewRootBodyAccessor(uint64_t a1, uint64_t a2)
{
  void *v3;
  id v4;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  v3 = *(void **)(a2 + 8);
  *(_QWORD *)(a1 + 8) = v3;
  v4 = v3;
  return a1;
}

void destroy for ViewRootBodyAccessor(uint64_t a1)
{

}

uint64_t assignWithCopy for ViewRootBodyAccessor(uint64_t a1, uint64_t a2)
{
  void *v3;
  void *v4;
  id v5;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  v3 = *(void **)(a2 + 8);
  v4 = *(void **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v3;
  v5 = v3;

  return a1;
}

uint64_t assignWithTake for ViewRootBodyAccessor(uint64_t a1, uint64_t a2)
{
  void *v3;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  v3 = *(void **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);

  return a1;
}

uint64_t destroy for MakeModifiedRoot()
{
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for MakeModifiedRoot(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  v3 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v3;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  v4 = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = v4;
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for MakeModifiedRoot(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 84);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  v4 = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = v4;
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 120) = *(_DWORD *)(a2 + 120);
  *(_DWORD *)(a1 + 124) = *(_DWORD *)(a2 + 124);
  return a1;
}

uint64_t assignWithTake for MakeModifiedRoot(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_release();
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_release();
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  swift_release();
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  return a1;
}

uint64_t sub_234DB1404()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in MakeModifiedRoot.visit<A>(type:)(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;

  return closure #1 in MakeModifiedRoot.visit<A>(type:)(a1, a2, *(unsigned int *)(v2 + 48), *(_QWORD *)(v2 + 56), *(_QWORD *)(v2 + 64), *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32), *(_QWORD *)(v2 + 40));
}

uint64_t outlined destroy of _VariadicView_Children(uint64_t a1)
{
  destroy for _VariadicView_Children(a1);
  return a1;
}

void type metadata accessor for _ContiguousArrayStorage<CVarArg>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t))
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    v6 = type metadata accessor for ScrollStateRequest(255, (unint64_t *)&lazy cache variable for type metadata for CVarArg);
    v7 = a3(a1, v6);
    if (!v8)
      atomic_store(v7, a2);
  }
}

unint64_t type metadata accessor for ViewListArchivedAnimation.Effect.Type()
{
  unint64_t result;

  result = lazy cache variable for type metadata for ViewListArchivedAnimation.Effect.Type;
  if (!lazy cache variable for type metadata for ViewListArchivedAnimation.Effect.Type)
  {
    result = swift_getMetatypeMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for ViewListArchivedAnimation.Effect.Type);
  }
  return result;
}

BOOL static ContentStyle.Primitive.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

SwiftUI::ContentStyle::ID __swiftcall ContentStyle.ID.init(truncatingLevel:)(Swift::Int truncatingLevel)
{
  _BYTE *v1;

  if (truncatingLevel <= 4)
  {
    if (truncatingLevel > 4u)
      __break(1u);
    else
      *v1 = truncatingLevel;
  }
  else
  {
    LOBYTE(truncatingLevel) = 4;
    *v1 = 4;
  }
  return (char)truncatingLevel;
}

SwiftUI::ContentStyle::Primitive __swiftcall ContentStyle.Primitive.init(_:)(SwiftUI::ContentStyle::Primitive result)
{
  _BYTE *v1;

  *v1 = *(_BYTE *)result;
  return result;
}

SwiftUI::ContentStyle::Style __swiftcall ContentStyle.Style.init(id:primitive:)(SwiftUI::ContentStyle::ID id, SwiftUI::ContentStyle::Primitive primitive)
{
  _BYTE *v2;
  char v3;
  SwiftUI::ContentStyle::Style result;

  v3 = *(_BYTE *)primitive;
  *v2 = *(_BYTE *)id;
  v2[1] = v3;
  result.id = id;
  return result;
}

uint64_t ContentStyle.MaterialStyle.init(material:base:)@<X0>(uint64_t result@<X0>, __int16 *a2@<X1>, uint64_t a3@<X8>)
{
  int v3;
  __int16 v4;

  v3 = *(_DWORD *)(result + 8);
  v4 = *a2;
  *(_QWORD *)a3 = *(_QWORD *)result;
  *(_DWORD *)(a3 + 8) = v3;
  *(_WORD *)(a3 + 12) = v4;
  return result;
}

uint64_t static HierarchicalShapeStyle.primary.getter()
{
  return 0;
}

uint64_t static HierarchicalShapeStyle.secondary.getter()
{
  return 1;
}

uint64_t static HierarchicalShapeStyle.tertiary.getter()
{
  return 2;
}

uint64_t static HierarchicalShapeStyle.quaternary.getter()
{
  return 3;
}

uint64_t static HierarchicalShapeStyle.quinary.getter()
{
  return 4;
}

SwiftUI::ContentStyle::ID_optional __swiftcall ContentStyle.ID.init(rawValue:)(SwiftUI::ContentStyle::ID_optional rawValue)
{
  SwiftUI::ContentStyle::ID *v1;
  SwiftUI::ContentStyle::ID value;

  value = rawValue.value;
  if (rawValue.value >= SwiftUI_ContentStyle_ID_unknownDefault)
    value = SwiftUI_ContentStyle_ID_unknownDefault;
  *v1 = value;
  return rawValue;
}

uint64_t ContentStyle.ID.rawValue.getter()
{
  unsigned __int8 *v0;

  return *v0;
}

SwiftUI::ContentStyle::ID_optional protocol witness for RawRepresentable.init(rawValue:) in conformance ContentStyle.ID(Swift::Int8 *a1)
{
  return ContentStyle.ID.init(rawValue:)(*a1);
}

void ContentStyle.Primitive.hash(into:)()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0);
}

Swift::Int ContentStyle.Primitive.hashValue.getter()
{
  unsigned __int8 *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void ContentStyle.Style.id.getter(_BYTE *a1@<X8>)
{
  _BYTE *v1;

  *a1 = *v1;
}

_BYTE *ContentStyle.Style.id.setter(_BYTE *result)
{
  _BYTE *v1;

  *v1 = *result;
  return result;
}

uint64_t (*ContentStyle.Style.id.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

void ContentStyle.Style.primitive.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 1);
}

_BYTE *ContentStyle.Style.primitive.setter(_BYTE *result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 1) = *result;
  return result;
}

uint64_t (*ContentStyle.Style.primitive.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

void ContentStyle.Style.hash(into:)()
{
  Swift::UInt8 *v0;
  Swift::UInt v1;

  v1 = v0[1];
  Hasher._combine(_:)(*v0);
  Hasher._combine(_:)(v1);
}

BOOL static ContentStyle.Style.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2 && a1[1] == a2[1];
}

Swift::Int ContentStyle.Style.hashValue.getter()
{
  Swift::UInt8 *v0;
  Swift::UInt v1;
  Swift::UInt8 v2;

  v1 = v0[1];
  v2 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance ContentStyle.Style()
{
  Swift::UInt8 *v0;
  Swift::UInt v1;
  Swift::UInt8 v2;

  v1 = v0[1];
  v2 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance ContentStyle.Style()
{
  Swift::UInt8 *v0;
  Swift::UInt v1;

  v1 = v0[1];
  Hasher._combine(_:)(*v0);
  Hasher._combine(_:)(v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ContentStyle.Style()
{
  Swift::UInt8 *v0;
  Swift::UInt v1;

  Hasher.init(_seed:)();
  v1 = v0[1];
  Hasher._combine(_:)(*v0);
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

unint64_t ContentStyle.MaterialStyle.material.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  unint64_t v2;
  int v3;

  v2 = *(_QWORD *)v1;
  v3 = *(_DWORD *)(v1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)v1;
  *(_DWORD *)(a1 + 8) = v3;
  return outlined copy of Material.ID(v2);
}

unint64_t ContentStyle.MaterialStyle.material.setter(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  unint64_t result;

  v2 = *a1;
  v3 = *((_DWORD *)a1 + 2);
  result = outlined consume of Material.ID(*(_QWORD *)v1);
  *(_QWORD *)v1 = v2;
  *(_DWORD *)(v1 + 8) = v3;
  return result;
}

uint64_t (*ContentStyle.MaterialStyle.material.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

void ContentStyle.MaterialStyle.base.getter(_WORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_WORD *)(v1 + 12);
}

_WORD *ContentStyle.MaterialStyle.base.setter(_WORD *result)
{
  uint64_t v1;

  *(_WORD *)(v1 + 12) = *result;
  return result;
}

uint64_t (*ContentStyle.MaterialStyle.base.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

void ContentStyle.MaterialStyle.hash(into:)()
{
  uint64_t v0;
  Swift::UInt v1;
  Swift::UInt8 v2;

  v1 = *(unsigned __int8 *)(v0 + 13);
  v2 = *(_BYTE *)(v0 + 12);
  Material.ResolvedMaterial.hash(into:)();
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v1);
}

Swift::Int ContentStyle.MaterialStyle.hashValue.getter()
{
  uint64_t v0;
  Swift::UInt v1;
  Swift::UInt8 v2;

  v1 = *(unsigned __int8 *)(v0 + 13);
  v2 = *(_BYTE *)(v0 + 12);
  Hasher.init(_seed:)();
  Material.ResolvedMaterial.hash(into:)();
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance ContentStyle.MaterialStyle()
{
  uint64_t v0;
  Swift::UInt v1;
  Swift::UInt8 v2;

  v1 = *(unsigned __int8 *)(v0 + 13);
  v2 = *(_BYTE *)(v0 + 12);
  Hasher.init(_seed:)();
  Material.ResolvedMaterial.hash(into:)();
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance ContentStyle.MaterialStyle()
{
  uint64_t v0;
  Swift::UInt v1;
  Swift::UInt8 v2;

  v1 = *(unsigned __int8 *)(v0 + 13);
  v2 = *(_BYTE *)(v0 + 12);
  Material.ResolvedMaterial.hash(into:)();
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ContentStyle.MaterialStyle()
{
  uint64_t v0;
  Swift::UInt v1;
  Swift::UInt8 v2;

  Hasher.init(_seed:)();
  v1 = *(unsigned __int8 *)(v0 + 13);
  v2 = *(_BYTE *)(v0 + 12);
  Material.ResolvedMaterial.hash(into:)();
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t HierarchicalShapeStyle.id.setter(uint64_t result)
{
  _DWORD *v1;

  *v1 = result;
  return result;
}

uint64_t (*HierarchicalShapeStyle.id.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t one-time initialization function for sharedPrimary()
{
  uint64_t result;

  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for ShapeStyleBox<HierarchicalShapeStyle>, (uint64_t)&type metadata for HierarchicalShapeStyle, (uint64_t)&protocol witness table for HierarchicalShapeStyle, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ShapeStyleBox);
  result = swift_allocObject();
  *(_DWORD *)(result + 16) = 0;
  static HierarchicalShapeStyle.sharedPrimary = result;
  return result;
}

{
  void *v0;
  uint64_t v1;

  if (one-time initialization token for primary != -1)
    swift_once();
  v0 = static Color.primary;
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for ShapeStyleBox<LegacyContentStyle>, (uint64_t)&type metadata for LegacyContentStyle, (uint64_t)&protocol witness table for LegacyContentStyle, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ShapeStyleBox);
  v1 = swift_allocObject();
  *(_BYTE *)(v1 + 16) = 0;
  *(_QWORD *)(v1 + 24) = v0;
  static LegacyContentStyle.sharedPrimary = (_UNKNOWN *)v1;
  return swift_retain();
}

uint64_t static HierarchicalShapeStyle.sharedPrimary.getter()
{
  return static HierarchicalShapeStyle.sharedPrimary.getter(&one-time initialization token for sharedPrimary);
}

uint64_t HierarchicalShapeStyle.level.getter(uint64_t result)
{
  return result;
}

void HierarchicalShapeStyle._apply(to:)(uint64_t a1, unsigned int a2)
{
  int v4;
  BOOL v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  unint64_t v24;
  uint64_t v25;

  v4 = *(unsigned __int8 *)(a1 + 24);
  if (v4 == 5 && (*(_QWORD *)a1 == 1 ? (v5 = *(_OWORD *)(a1 + 8) == 0) : (v5 = 0), v5))
  {
    if (one-time initialization token for sharedPrimary != -1)
      swift_once();
    v11 = static HierarchicalShapeStyle.sharedPrimary;
    v12 = *(_QWORD *)(a1 + 32);
    v13 = *(_BYTE *)(a1 + 40);
    swift_retain();
    outlined consume of _ShapeStyle_Shape.Result(v12, v13);
    *(_QWORD *)(a1 + 32) = v11;
    *(_BYTE *)(a1 + 40) = 2;
  }
  else
  {
    if ((*(_BYTE *)(a1 + 106) & 1) == 0)
    {
      *(_BYTE *)(a1 + 106) |= 1u;
      v6 = *(_QWORD *)(a1 + 32);
      v7 = *(_BYTE *)(a1 + 40);
      v8 = *(_QWORD *)(a1 + 48);
      v9 = *(_QWORD *)(a1 + 56);
      if (*(_QWORD *)(a1 + 64))
      {
        v10 = *(_QWORD *)(a1 + 64);
      }
      else
      {
        v23 = *(unsigned __int8 *)(a1 + 105);
        v24 = *(_QWORD *)(a1 + 48);
        v25 = v9;
        outlined copy of _ShapeStyle_Shape.Result(v6, v7);
        swift_retain_n();
        swift_retain_n();
        v14 = EnvironmentValues.foregroundStyle.getter();
        if (v14)
        {
          v10 = v14;
          swift_release();
          swift_release();
          outlined consume of _ShapeStyle_Shape.Result(v6, v7);
          swift_release();
          swift_release();
        }
        else
        {
          v24 = v8;
          v25 = v9;
          v10 = EnvironmentValues.defaultForegroundStyle.getter();
          swift_release();
          swift_release();
          outlined consume of _ShapeStyle_Shape.Result(v6, v7);
          swift_release();
          swift_release();
          if (!v10)
          {
            if (v23 == 2)
            {
              SeparatorShapeStyle._apply(to:)(a1);
              goto LABEL_29;
            }
            swift_retain();
            if (v9)
            {
              swift_retain_n();
              v17 = swift_retain();
              specialized PropertyList.Tracker.value<A>(_:for:)(v17, (uint64_t)&v24);
              swift_release_n();
              swift_release_n();
              v18 = v24;
              v19 = v25;
            }
            else
            {
              swift_retain_n();
              swift_retain();
              v20 = specialized find<A>(_:key:)(v8);
              if (v20)
              {
                v18 = *(_QWORD *)(v20 + 72);
                v19 = *(_DWORD *)(v20 + 80);
                outlined copy of Material?(v18);
              }
              else
              {
                v19 = 0;
                v18 = 8;
              }
              swift_release();
              swift_release_n();
            }
            if (v18 == 8)
            {
              specialized HierarchicalShapeStyle.apply<A>(_:to:)(a1, a2);
              goto LABEL_29;
            }
            v24 = v18;
            LODWORD(v25) = v19;
            if (a2)
            {
              v21 = a2;
              if (v4 == 3)
              {
                type metadata accessor for ShapeStyleBox<OffsetShapeStyle<ForegroundMaterialStyle>>(0, &lazy cache variable for type metadata for ShapeStyleBox<OffsetShapeStyle<ForegroundMaterialStyle>>, &lazy cache variable for type metadata for OffsetShapeStyle<ForegroundMaterialStyle>, (uint64_t)&type metadata for ForegroundMaterialStyle, (uint64_t)&protocol witness table for ForegroundMaterialStyle);
                v22 = swift_allocObject();
                *(_QWORD *)(v22 + 16) = v18;
                *(_DWORD *)(v22 + 24) = v19;
                *(_QWORD *)(v22 + 32) = v21;
                outlined consume of _ShapeStyle_Shape.Result(v6, v7);
                *(_QWORD *)(a1 + 32) = v22;
                goto LABEL_26;
              }
              outlined copy of Material.ID(v18);
              specialized OffsetShapeStyle._apply(to:)(a1);
              outlined consume of Material?(v18);
            }
            else
            {
              if (v4 == 3)
              {
                type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for ShapeStyleBox<ForegroundMaterialStyle>, (uint64_t)&type metadata for ForegroundMaterialStyle, (uint64_t)&protocol witness table for ForegroundMaterialStyle, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ShapeStyleBox);
                v15 = swift_allocObject();
                *(_QWORD *)(v15 + 16) = v18;
                *(_DWORD *)(v15 + 24) = v19;
                outlined consume of _ShapeStyle_Shape.Result(v6, v7);
                goto LABEL_25;
              }
              ForegroundMaterialStyle._apply(to:)(a1);
            }
            outlined consume of Material?(v18);
            goto LABEL_29;
          }
        }
      }
      swift_retain();
      swift_retain();
      swift_retain();
      v15 = specialized ShapeStyle.primaryStyle(in:)(v8, v9, v10);
      swift_release();
      swift_release();
      if (v15)
      {
        if (a2)
        {
LABEL_20:
          if (v4 == 3)
          {
            type metadata accessor for ShapeStyleBox<OffsetShapeStyle<ForegroundMaterialStyle>>(0, &lazy cache variable for type metadata for ShapeStyleBox<OffsetShapeStyle<AnyShapeStyle>>, (unint64_t *)&lazy cache variable for type metadata for OffsetShapeStyle<AnyShapeStyle>, (uint64_t)&type metadata for AnyShapeStyle, (uint64_t)&protocol witness table for AnyShapeStyle);
            v16 = swift_allocObject();
            *(_QWORD *)(v16 + 16) = v15;
            *(_QWORD *)(v16 + 24) = a2;
            swift_retain();
            outlined consume of _ShapeStyle_Shape.Result(v6, v7);
            swift_release();
            swift_release();
            *(_QWORD *)(a1 + 32) = v16;
LABEL_26:
            *(_BYTE *)(a1 + 40) = 2;
            goto LABEL_29;
          }
          swift_retain();
          specialized OffsetShapeStyle._apply(to:)(a1);
          swift_release();
          swift_release_n();
LABEL_29:
          if ((*(_BYTE *)(a1 + 106) & 1) != 0)
            *(_BYTE *)(a1 + 106) &= ~1u;
          return;
        }
      }
      else
      {
        swift_retain();
        v15 = v10;
        if (a2)
          goto LABEL_20;
      }
      if (v4 != 3)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v15 + 80))(a1);
        swift_release();
        swift_release();
        goto LABEL_29;
      }
      swift_retain();
      outlined consume of _ShapeStyle_Shape.Result(v6, v7);
      swift_release();
      swift_release();
LABEL_25:
      *(_QWORD *)(a1 + 32) = v15;
      goto LABEL_26;
    }
    if (one-time initialization token for sharedPrimary != -1)
      swift_once();
    (*(void (**)(uint64_t))(*(_QWORD *)static LegacyContentStyle.sharedPrimary + 80))(a1);
  }
}

uint64_t specialized ShapeStyle.primaryStyle(in:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void (*v3)(_QWORD *);
  uint64_t v4;
  int v5;
  _QWORD v7[3];
  char v8;
  uint64_t v9;
  unsigned __int8 v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  char v16;
  __int16 v17;

  v7[1] = 0;
  v7[2] = 0;
  v7[0] = 1;
  v8 = 5;
  v9 = 0;
  v10 = 5;
  v11 = a1;
  v12 = a2;
  v13 = 0u;
  v14 = 0u;
  v15 = 0;
  v16 = 1;
  v17 = 0;
  v3 = *(void (**)(_QWORD *))(*(_QWORD *)a3 + 80);
  swift_retain();
  swift_retain();
  v3(v7);
  v4 = v9;
  v5 = v10;
  outlined copy of _ShapeStyle_Shape.Result(v9, v10);
  outlined consume of _ShapeStyle_Shape.Result(v4, v5);
  swift_release();
  swift_release();
  swift_release();
  if (v5 != 2)
  {
    outlined consume of _ShapeStyle_Shape.Result(v4, v5);
    return 0;
  }
  return v4;
}

void specialized HierarchicalShapeStyle.apply<A>(_:to:)(uint64_t a1, unsigned int a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *(unsigned __int8 *)(a1 + 24);
  if (a2)
  {
    v4 = a2;
    if (v3 == 3)
    {
      type metadata accessor for ShapeStyleBox<OffsetShapeStyle<ForegroundMaterialStyle>>(0, &lazy cache variable for type metadata for ShapeStyleBox<OffsetShapeStyle<SystemColorsStyle>>, &lazy cache variable for type metadata for OffsetShapeStyle<SystemColorsStyle>, (uint64_t)&type metadata for SystemColorsStyle, (uint64_t)&protocol witness table for SystemColorsStyle);
      v5 = swift_allocObject();
      *(_QWORD *)(v5 + 16) = v4;
      outlined consume of _ShapeStyle_Shape.Result(*(_QWORD *)(a1 + 32), *(_BYTE *)(a1 + 40));
      *(_QWORD *)(a1 + 32) = v5;
LABEL_6:
      *(_BYTE *)(a1 + 40) = 2;
      return;
    }
    specialized OffsetShapeStyle._apply(to:)(a1);
  }
  else
  {
    if (v3 == 3)
    {
      type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for ShapeStyleBox<SystemColorsStyle>, (uint64_t)&type metadata for SystemColorsStyle, (uint64_t)&protocol witness table for SystemColorsStyle, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ShapeStyleBox);
      v6 = swift_allocObject();
      outlined consume of _ShapeStyle_Shape.Result(*(_QWORD *)(a1 + 32), *(_BYTE *)(a1 + 40));
      *(_QWORD *)(a1 + 32) = v6;
      goto LABEL_6;
    }
    SystemColorsStyle._apply(to:)(a1);
  }
}

void specialized OffsetShapeStyle._apply(to:)(uint64_t a1)
{
  __asm { BR              X13 }
}

{
  __asm { BR              X13 }
}

{
  __asm { BR              X13 }
}

_BYTE *static HierarchicalShapeStyle._apply(to:)(_BYTE *result)
{
  *result = 1;
  return result;
}

void protocol witness for ShapeStyle._apply(to:) in conformance HierarchicalShapeStyle(uint64_t a1)
{
  unsigned int *v1;

  HierarchicalShapeStyle._apply(to:)(a1, *v1);
}

uint64_t static LegacyContentStyle.sharedPrimary.getter()
{
  return static HierarchicalShapeStyle.sharedPrimary.getter(&one-time initialization token for sharedPrimary);
}

uint64_t static HierarchicalShapeStyle.sharedPrimary.getter(_QWORD *a1)
{
  if (*a1 != -1)
    swift_once();
  return swift_retain();
}

void LegacyContentStyle.id.getter(_BYTE *a1@<X8>)
{
  _BYTE *v1;

  *a1 = *v1;
}

_BYTE *LegacyContentStyle.id.setter(_BYTE *result)
{
  _BYTE *v1;

  *v1 = *result;
  return result;
}

uint64_t (*LegacyContentStyle.id.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t LegacyContentStyle.color.getter()
{
  return swift_retain();
}

uint64_t LegacyContentStyle.color.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_release();
  *(_QWORD *)(v1 + 8) = a1;
  return result;
}

uint64_t (*LegacyContentStyle.color.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

void LegacyContentStyle._apply(to:)(uint64_t a1)
{
  char *v1;
  int v3;
  BOOL v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  char v12;
  unint64_t v13;
  int v14;

  v3 = *v1;
  if (*(_BYTE *)(a1 + 24) == 5 && (*(_QWORD *)a1 == 1 ? (v4 = *(_OWORD *)(a1 + 8) == 0) : (v4 = 0), v4))
  {
    if (one-time initialization token for sharedPrimary != -1)
      swift_once();
    v10 = static LegacyContentStyle.sharedPrimary;
    v11 = *(_QWORD *)(a1 + 32);
    v12 = *(_BYTE *)(a1 + 40);
    swift_retain();
    outlined consume of _ShapeStyle_Shape.Result(v11, v12);
    *(_QWORD *)(a1 + 32) = v10;
    *(_BYTE *)(a1 + 40) = 2;
  }
  else
  {
    v5 = *(_QWORD *)(a1 + 48);
    if (*(_QWORD *)(a1 + 56))
    {
      swift_retain_n();
      swift_retain_n();
      specialized PropertyList.Tracker.value<A>(_:for:)(v5, (uint64_t)&v13);
      swift_release_n();
      swift_release_n();
      v6 = v13;
      v7 = v14;
      if (v13 == 8)
      {
LABEL_8:
        if (v3)
          specialized OffsetShapeStyle._apply(to:)(a1);
        else
          SystemColorsStyle._apply(to:)(a1);
        return;
      }
    }
    else
    {
      v8 = swift_retain_n();
      v9 = specialized find<A>(_:key:)(v8);
      if (v9)
      {
        v6 = *(_QWORD *)(v9 + 72);
        v7 = *(_DWORD *)(v9 + 80);
        outlined copy of Material?(v6);
      }
      else
      {
        v7 = 0;
        v6 = 8;
      }
      swift_release_n();
      if (v6 == 8)
        goto LABEL_8;
    }
    v13 = v6;
    v14 = v7;
    if (v3)
    {
      outlined copy of Material.ID(v6);
      specialized OffsetShapeStyle._apply(to:)(a1);
      outlined consume of Material?(v6);
    }
    else
    {
      ForegroundMaterialStyle._apply(to:)(a1);
    }
    outlined consume of Material?(v6);
  }
}

uint64_t ContentStyle.ID.level.getter()
{
  char *v0;

  return *v0;
}

SwiftUI::SystemColorType __swiftcall SystemColorType.init(_:)(SwiftUI::SystemColorType result)
{
  _BYTE *v1;

  *v1 = *(_BYTE *)result + 13;
  return result;
}

void Color.init(_:)(uint64_t a1)
{
  __asm { BR              X10 }
}

uint64_t sub_234DB3BAC()
{
  if (one-time initialization token for primary != -1)
    swift_once();
  return swift_retain();
}

uint64_t ContentStyle.ID.resolve(in:)(uint64_t *a1)
{
  _BYTE *v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  char v7;
  _QWORD v8[2];

  v2 = *a1;
  v3 = a1[1];
  v4 = *v1 + 13;
  EnvironmentValues.systemColorDefinition.getter();
  v7 = v4;
  v8[0] = v2;
  v8[1] = v3;
  return (*(uint64_t (**)(char *, _QWORD *))(v5 + 8))(&v7, v8);
}

SwiftUI::ContentStyle::ID_optional __swiftcall ContentStyle.ID.init(level:)(Swift::Int level)
{
  char *v1;
  char v3;

  if (level < 5u && (char)level == level)
    v3 = level;
  else
    v3 = 5;
  *v1 = v3;
  return (SwiftUI::ContentStyle::ID_optional)level;
}

uint64_t HierarchicalShapeStyleModifier.base.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8) + 16))(a2, v2);
}

uint64_t HierarchicalShapeStyleModifier.base.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 40))(v2, a1);
}

uint64_t (*HierarchicalShapeStyleModifier.base.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t HierarchicalShapeStyleModifier.level.getter(uint64_t a1)
{
  uint64_t v1;

  return *(_QWORD *)(v1 + *(int *)(a1 + 36));
}

uint64_t HierarchicalShapeStyleModifier.level.setter(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + *(int *)(a2 + 36)) = result;
  return result;
}

uint64_t (*HierarchicalShapeStyleModifier.level.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t HierarchicalShapeStyleModifier._apply(to:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  __int128 v14;

  v7 = *(_QWORD *)(a2 + 16);
  v8 = *(_QWORD *)(a2 + 24);
  v9 = type metadata accessor for OffsetShapeStyle(0, v7, v8, a4);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v14 - v11;
  v14 = *(_OWORD *)(a1 + 48);
  if (ShapeStyle.primaryStyle(in:)((uint64_t *)&v14, v7, v8))
  {
    specialized OffsetShapeStyle._apply(to:)(a1);
    return swift_release();
  }
  else
  {
    ShapeStyle.offset(by:)(*(_QWORD *)(v4 + *(int *)(a2 + 36)), v7, v8, (uint64_t)v12);
    OffsetShapeStyle._apply(to:)(a1);
    return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  }
}

_BYTE *static HierarchicalShapeStyleModifier._apply(to:)(_BYTE *result)
{
  *result = 1;
  return result;
}

BOOL specialized static ContentStyle.MaterialStyle.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  _BOOL4 v10;
  _QWORD *v12;
  _QWORD *v13;

  v2 = *(_QWORD **)a1;
  v3 = *(_DWORD *)(a1 + 8);
  v4 = *(unsigned __int8 *)(a1 + 12);
  v5 = *(unsigned __int8 *)(a1 + 13);
  v6 = *(_DWORD *)(a2 + 8);
  v7 = *(unsigned __int8 *)(a2 + 12);
  v8 = *(unsigned __int8 *)(a2 + 13);
  v12 = *(_QWORD **)a2;
  v13 = v2;
  if (!specialized static Material.ID.== infix(_:_:)(&v13, &v12))
    return 0;
  v10 = v4 == v7 && v5 == v8;
  return v3 == v6 && v10;
}

void type metadata accessor for ShapeStyleBox<OffsetShapeStyle<ForegroundMaterialStyle>>(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;

  if (!*a2)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, a3, a4, a5, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for OffsetShapeStyle);
    v9 = type metadata accessor for ShapeStyleBox(a1, v7, (uint64_t)&protocol witness table for OffsetShapeStyle<A>, v8);
    if (!v10)
      atomic_store(v9, a2);
  }
}

unint64_t lazy protocol witness table accessor for type ContentStyle.ID and conformance ContentStyle.ID()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ContentStyle.ID and conformance ContentStyle.ID;
  if (!lazy protocol witness table cache variable for type ContentStyle.ID and conformance ContentStyle.ID)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ContentStyle.ID, &type metadata for ContentStyle.ID);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ContentStyle.ID and conformance ContentStyle.ID);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ContentStyle.ID and conformance ContentStyle.ID;
  if (!lazy protocol witness table cache variable for type ContentStyle.ID and conformance ContentStyle.ID)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ContentStyle.ID, &type metadata for ContentStyle.ID);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ContentStyle.ID and conformance ContentStyle.ID);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ContentStyle.Primitive and conformance ContentStyle.Primitive()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ContentStyle.Primitive and conformance ContentStyle.Primitive;
  if (!lazy protocol witness table cache variable for type ContentStyle.Primitive and conformance ContentStyle.Primitive)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ContentStyle.Primitive, &type metadata for ContentStyle.Primitive);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ContentStyle.Primitive and conformance ContentStyle.Primitive);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ContentStyle.Style and conformance ContentStyle.Style()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ContentStyle.Style and conformance ContentStyle.Style;
  if (!lazy protocol witness table cache variable for type ContentStyle.Style and conformance ContentStyle.Style)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ContentStyle.Style, &type metadata for ContentStyle.Style);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ContentStyle.Style and conformance ContentStyle.Style);
  }
  return result;
}

unint64_t instantiation function for generic protocol witness table for ContentStyle.ID(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type ContentStyle.ID and conformance ContentStyle.ID();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

ValueMetadata *type metadata accessor for ContentStyle()
{
  return &type metadata for ContentStyle;
}

uint64_t storeEnumTagSinglePayload for ContentStyle.ID(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_234DB41AC + 4 * byte_2352A0812[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_234DB41E0 + 4 * byte_2352A080D[v4]))();
}

uint64_t sub_234DB41E0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_234DB41E8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x234DB41F0);
  return result;
}

uint64_t sub_234DB41FC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x234DB4204);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_234DB4208(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_234DB4210(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ContentStyle.ID()
{
  return &type metadata for ContentStyle.ID;
}

uint64_t storeEnumTagSinglePayload for ContentStyle.Primitive(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_234DB4278 + 4 * byte_2352A081C[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_234DB42AC + 4 * byte_2352A0817[v4]))();
}

uint64_t sub_234DB42AC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_234DB42B4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x234DB42BCLL);
  return result;
}

uint64_t sub_234DB42C8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x234DB42D0);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_234DB42D4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_234DB42DC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ContentStyle.Primitive()
{
  return &type metadata for ContentStyle.Primitive;
}

uint64_t getEnumTagSinglePayload for ContentStyle.Style(unsigned __int16 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFE)
    goto LABEL_17;
  if (a2 + 65282 <= 0xFFFEFFFF)
    v2 = 2;
  else
    v2 = 4;
  if (a2 + 65282 < 0xFF0000)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 16)) - 65282;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = a1[1];
      if (!a1[1])
        goto LABEL_17;
      return (*a1 | (v4 << 16)) - 65282;
    }
    v4 = *((unsigned __int8 *)a1 + 2);
    if (*((_BYTE *)a1 + 2))
      return (*a1 | (v4 << 16)) - 65282;
  }
LABEL_17:
  v6 = *((unsigned __int8 *)a1 + 1);
  v7 = v6 >= 3;
  v8 = v6 - 3;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for ContentStyle.Style(_WORD *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 65282 <= 0xFFFEFFFF)
    v3 = 2;
  else
    v3 = 4;
  if (a3 + 65282 < 0xFF0000)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_234DB43D8 + 4 * byte_2352A0826[v4]))();
  *a1 = a2 - 254;
  return ((uint64_t (*)(void))((char *)sub_234DB440C + 4 * byte_2352A0821[v4]))();
}

uint64_t sub_234DB440C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 2) = v1;
  return result;
}

uint64_t sub_234DB4414(uint64_t result, int a2)
{
  *(_WORD *)(result + 2) = 0;
  if (a2)
    JUMPOUT(0x234DB441CLL);
  return result;
}

uint64_t sub_234DB4428(uint64_t result, int a2)
{
  *(_DWORD *)(result + 2) = 0;
  if (!a2)
    JUMPOUT(0x234DB4430);
  *(_BYTE *)(result + 1) = a2 + 2;
  return result;
}

uint64_t sub_234DB4434(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 2) = v1;
  return result;
}

uint64_t sub_234DB443C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 2) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ContentStyle.Style()
{
  return &type metadata for ContentStyle.Style;
}

uint64_t initializeBufferWithCopyOfBuffer for ContentStyle.MaterialStyle(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = *(_QWORD *)a2;
  if (*(_QWORD *)a2 >= 8uLL)
    v4 = swift_retain();
  *(_QWORD *)a1 = v4;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_WORD *)(a1 + 12) = *(_WORD *)(a2 + 12);
  return a1;
}

uint64_t assignWithCopy for ContentStyle.MaterialStyle(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;

  v4 = *(_QWORD *)a1;
  v5 = *(_QWORD *)a2;
  if (v4 >= 8)
  {
    if (v5 >= 8)
    {
      *(_QWORD *)a1 = v5;
      swift_retain();
      swift_release();
    }
    else
    {
      swift_release();
      *(_QWORD *)a1 = *(_QWORD *)a2;
    }
  }
  else
  {
    *(_QWORD *)a1 = v5;
    if (v5 >= 8)
      swift_retain();
  }
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(a2 + 12);
  *(_BYTE *)(a1 + 13) = *(_BYTE *)(a2 + 13);
  return a1;
}

_QWORD *__swift_memcpy14_8(_QWORD *result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *(_QWORD *)((char *)result + 6) = *(uint64_t *)((char *)a2 + 6);
  *result = v2;
  return result;
}

uint64_t assignWithTake for ContentStyle.MaterialStyle(uint64_t a1, uint64_t a2)
{
  unint64_t v4;

  v4 = *(_QWORD *)a2;
  if (*(_QWORD *)a1 >= 8uLL)
  {
    if (v4 >= 8)
    {
      *(_QWORD *)a1 = v4;
      swift_release();
      goto LABEL_6;
    }
    swift_release();
  }
  *(_QWORD *)a1 = v4;
LABEL_6:
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_WORD *)(a1 + 12) = *(_WORD *)(a2 + 12);
  return a1;
}

uint64_t getEnumTagSinglePayload for ContentStyle.MaterialStyle(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 > 0x7FFFFFF7 && *((_BYTE *)a1 + 14))
    return (*(_DWORD *)a1 + 2147483640);
  v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 8;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ContentStyle.MaterialStyle(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFF7)
  {
    *(_WORD *)(result + 12) = 0;
    *(_DWORD *)(result + 8) = 0;
    *(_QWORD *)result = a2 - 2147483640;
    if (a3 > 0x7FFFFFF7)
      *(_BYTE *)(result + 14) = 1;
  }
  else
  {
    if (a3 > 0x7FFFFFF7)
      *(_BYTE *)(result + 14) = 0;
    if (a2)
      *(_QWORD *)result = a2 + 7;
  }
  return result;
}

ValueMetadata *type metadata accessor for ContentStyle.MaterialStyle()
{
  return &type metadata for ContentStyle.MaterialStyle;
}

ValueMetadata *type metadata accessor for HierarchicalShapeStyle()
{
  return &type metadata for HierarchicalShapeStyle;
}

uint64_t initializeBufferWithCopyOfBuffer for LegacyContentStyle(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for LegacyContentStyle(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for LegacyContentStyle(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_release();
  return a1;
}

ValueMetadata *type metadata accessor for LegacyContentStyle()
{
  return &type metadata for LegacyContentStyle;
}

uint64_t type metadata completion function for HierarchicalShapeStyleModifier()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for HierarchicalShapeStyleModifier(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v9;

  v4 = a1;
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0 || ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 8 > 0x18)
  {
    v9 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
    swift_retain();
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    *(_QWORD *)(((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFF8);
  }
  return v4;
}

uint64_t initializeWithCopy for HierarchicalShapeStyleModifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 16))();
  *(_QWORD *)((*(_QWORD *)(v5 + 64) + 7 + a1) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((*(_QWORD *)(v5 + 64) + 7 + a2) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t assignWithCopy for HierarchicalShapeStyleModifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 24))();
  *(_QWORD *)((*(_QWORD *)(v5 + 64) + 7 + a1) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((*(_QWORD *)(v5 + 64) + 7 + a2) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t assignWithTake for HierarchicalShapeStyleModifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 40))();
  *(_QWORD *)((*(_QWORD *)(v5 + 64) + 7 + a1) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((*(_QWORD *)(v5 + 64) + 7 + a2) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t getEnumTagSinglePayload for HierarchicalShapeStyleModifier(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 >= a2)
  {
    if (v5)
      return (*(uint64_t (**)(void))(v4 + 48))();
    return 0;
  }
  if (((((*(_QWORD *)(v4 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 8) & 0xFFFFFFF8) != 0)
    v6 = 2;
  else
    v6 = a2 - v5 + 1;
  if (v6 >= 0x10000)
    v7 = 4;
  else
    v7 = 2;
  if (v6 < 0x100)
    v7 = 1;
  if (v6 >= 2)
    v8 = v7;
  else
    v8 = 0;
  return ((uint64_t (*)(void))((char *)&loc_234DB49FC + 4 * byte_2352A082B[v8]))();
}

void storeEnumTagSinglePayload for HierarchicalShapeStyleModifier(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  int v11;
  unsigned int v12;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  if (v7 >= a3)
  {
    v11 = 0;
    if (a2 <= v7)
      goto LABEL_14;
  }
  else
  {
    v8 = a3 - v7;
    if (((*(_DWORD *)(v6 + 64) + 7) & 0xFFFFFFF8) == 0xFFFFFFF8)
      v9 = v8 + 1;
    else
      v9 = 2;
    if (v9 >= 0x10000)
      v10 = 4;
    else
      v10 = 2;
    if (v9 < 0x100)
      v10 = 1;
    if (v9 >= 2)
      v11 = v10;
    else
      v11 = 0;
    if (a2 <= v7)
LABEL_14:
      __asm { BR              X11 }
  }
  if (((*(_DWORD *)(v6 + 64) + 7) & 0xFFFFFFF8) != 0xFFFFFFF8)
  {
    v12 = ~v7 + a2;
    bzero(a1, ((*(_QWORD *)(v6 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 8);
    *a1 = v12;
  }
  __asm { BR              X10 }
}

void sub_234DB4B3C()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
}

void sub_234DB4B44(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x234DB4B4CLL);
}

void sub_234DB4B68()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
}

void sub_234DB4B70()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
}

uint64_t sub_234DB4B78(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_WORD *)(v4 + v5) = 0;
  if (!a2)
    JUMPOUT(0x234DB4B80);
  return (*(uint64_t (**)(uint64_t))(v3 + 56))(v4);
}

uint64_t type metadata accessor for HierarchicalShapeStyleModifier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for HierarchicalShapeStyleModifier);
}

uint64_t static DynamicPropertyCache.fields(of:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v4;
  uint64_t v5;
  unint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  int v12;
  uint64_t result;
  uint64_t Kind;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned __int8 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v28;
  uint64_t v29;
  _QWORD v30[2];
  unsigned __int8 v31;
  unsigned int v32;

  if (one-time initialization token for cache != -1)
    swift_once();
  v4 = static DynamicPropertyCache.cache;
  swift_beginAccess();
  v5 = v4[2];
  if (*(_QWORD *)(v5 + 16))
  {
    v6 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
    if ((v7 & 1) != 0)
    {
      v8 = *(_QWORD *)(v5 + 56) + 24 * v6;
      v9 = *(_QWORD *)v8;
      v10 = *(_QWORD *)(v8 + 8);
      v11 = *(_BYTE *)(v8 + 16);
      v12 = *(_DWORD *)(v8 + 20);
      swift_endAccess();
      *(_QWORD *)a2 = v9;
      *(_QWORD *)(a2 + 8) = v10;
      *(_BYTE *)(a2 + 16) = v11;
      *(_DWORD *)(a2 + 20) = v12;
      return outlined copy of DynamicPropertyCache.Fields.Layout();
    }
  }
  swift_endAccess();
  Kind = AGTypeGetKind();
  v15 = MEMORY[0x24BEE4AF8];
  if ((Kind - 3) < 2)
  {
    v28 = MEMORY[0x24BEE4AF8];
    MEMORY[0x24BDAC7A8](Kind);
    AGTypeApplyFields2();
    DynamicPropertyCache.Fields.init(_:)(a1, v28, 1, (uint64_t)v30);
    v15 = v30[0];
    v19 = v30[1];
    v20 = v31;
    v17 = v32;
    goto LABEL_17;
  }
  if ((_DWORD)Kind == 5 || (_DWORD)Kind == 2)
  {
    v30[0] = MEMORY[0x24BEE4AF8];
    MEMORY[0x24BDAC7A8](Kind);
    AGTypeApplyFields2();
    v15 = v30[0];
    v16 = *(_QWORD *)(v30[0] + 16);
    if (v16)
    {
      swift_bridgeObjectRetain();
      LODWORD(v17) = 0;
      v18 = v30[0] + 40;
      do
      {
        v17 = (*(unsigned int (**)(void))(*(_QWORD *)v18 + 16))() | v17;
        v18 += 32;
        --v16;
      }
      while (v16);
      swift_bridgeObjectRelease();
    }
    else
    {
      v17 = 0;
    }
    v19 = 0;
    v20 = 0;
LABEL_17:
    if ((~(_DWORD)v17 & 3) == 0)
    {
      static os_log_type_t.fault.getter();
      if (one-time initialization token for runtimeIssuesLog != -1)
        swift_once();
      type metadata accessor for _ContiguousArrayStorage<CVarArg>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<CVarArg>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
      v21 = swift_allocObject();
      *(_OWORD *)(v21 + 16) = xmmword_23527E860;
      v22 = a1;
      v23 = _typeName(_:qualified:)();
      v25 = v24;
      *(_QWORD *)(v21 + 56) = MEMORY[0x24BEE0D00];
      *(_QWORD *)(v21 + 64) = lazy protocol witness table accessor for type String and conformance String();
      *(_QWORD *)(v21 + 32) = v23;
      *(_QWORD *)(v21 + 40) = v25;
      a1 = v22;
      os_log(_:dso:log:_:_:)();
      swift_bridgeObjectRelease();
      v17 = v17 & 0xFFFFFFFE;
    }
    goto LABEL_21;
  }
  v17 = 0;
  v19 = 0;
  v20 = 0;
LABEL_21:
  v26 = static DynamicPropertyCache.cache;
  swift_beginAccess();
  swift_retain();
  outlined copy of DynamicPropertyCache.Fields.Layout();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v29 = v26[2];
  v26[2] = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v15, v19, v20 | (unint64_t)(v17 << 32), a1, isUniquelyReferenced_nonNull_native);
  v26[2] = v29;
  swift_bridgeObjectRelease();
  swift_endAccess();
  result = swift_release();
  *(_QWORD *)a2 = v15;
  *(_QWORD *)(a2 + 8) = v19;
  *(_BYTE *)(a2 + 16) = v20;
  *(_DWORD *)(a2 + 20) = v17;
  return result;
}

uint64_t BodyAccessor.makeBody(container:inputs:fields:)(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t AssociatedTypeWitness;
  __int128 v14;
  char v15;
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t TupleTypeMetadata2;
  uint64_t v22;
  uint64_t result;
  char v24;
  Swift::String v25;
  _QWORD v26[4];
  __int128 v27;
  char v28;
  int v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  char v34;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  if (AssociatedTypeWitness == MEMORY[0x24BEE4078])
  {
    _StringGuts.grow(_:)(29);
    swift_getAssociatedTypeWitness();
    _typeName(_:qualified:)();
    swift_bridgeObjectRelease();
    v25._object = (void *)0x80000002352E10E0;
    v25._countAndFlagsBits = 0xD00000000000001BLL;
    String.append(_:)(v25);
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    *(double *)&v14 = MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
    v26[2] = a6;
    v26[3] = a7;
    v27 = v14;
    v28 = v15;
    v29 = v16;
    v30 = v17;
    v31 = v7;
    type metadata accessor for _GraphValue(255, v18, v19, v20);
    type metadata accessor for MutableBox<CachedEnvironment>(255, &lazy cache variable for type metadata for _DynamicPropertyBuffer?, (uint64_t)&type metadata for _DynamicPropertyBuffer, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1C68]);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    result = _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(a4, (uint64_t)partial apply for closure #1 in BodyAccessor.makeBody(container:inputs:fields:), (uint64_t)v26, (uint64_t)&type metadata for _GraphInputs, MEMORY[0x24BEE4078], TupleTypeMetadata2, MEMORY[0x24BEE40A8], v22);
    v24 = v34;
    *a1 = v32;
    *(_OWORD *)a2 = v33;
    *(_BYTE *)(a2 + 16) = v24;
  }
  return result;
}

uint64_t BodyAccessor.setBody(_:)(void (*a1)(void), uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t AssociatedTypeWitness;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  _OWORD *inited;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(char *, uint64_t, uint64_t);
  uint64_t v28;
  uint64_t v29;
  void (*v30)(char *, uint64_t);
  uint64_t v31;
  uint64_t v32;
  _QWORD v34[2];
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  char *v42;
  void (*v43)(void);
  uint64_t v44;
  __int128 v45;
  _BYTE v46[24];
  uint64_t v47;
  uint64_t v48;

  v43 = a1;
  v48 = *MEMORY[0x24BDAC8D0];
  v7 = type metadata accessor for OSSignpostID();
  v44 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)v34 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v10);
  v42 = (char *)v34 - v11;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v13 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v15 = (char *)v34 - v14;
  v41 = static os_signpost_type_t.begin.getter();
  static os_signpost_type_t.event.getter();
  if (kdebug_is_enabled())
  {
    v35 = v15;
    v36 = v13;
    v37 = a2;
    v38 = AssociatedTypeWitness;
    v39 = a3;
    v40 = a4;
    swift_getAssociatedTypeWitness();
    v16 = v42;
    static OSSignpostID.exclusive.getter();
    type metadata accessor for _ContiguousArrayStorage<CVarArg>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<CVarArg>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
    inited = (_OWORD *)swift_initStackObject();
    inited[1] = xmmword_2352828C0;
    v18 = AGTypeID.description.getter();
    v20 = v19;
    *((_QWORD *)inited + 7) = MEMORY[0x24BEE0D00];
    v21 = lazy protocol witness table accessor for type String and conformance String();
    *((_QWORD *)inited + 4) = v18;
    v22 = (_DWORD)inited + 32;
    *((_QWORD *)inited + 8) = v21;
    *((_QWORD *)inited + 5) = v20;
    *((_QWORD *)inited + 9) = specialized static Tracing.libraryName(defining:)();
    *((_QWORD *)inited + 12) = MEMORY[0x24BEE0D00];
    *((_QWORD *)inited + 13) = v21;
    *((_QWORD *)inited + 10) = v23;
    if (one-time initialization token for _signpostLog != -1)
      swift_once();
    (*(void (**)(char *, char *, uint64_t))(v44 + 16))(v9, v16, v7);
    type metadata accessor for _ContiguousArrayStorage<CVarArg?>();
    v24 = swift_initStackObject();
    v45 = xmmword_235283260;
    *(_OWORD *)(v24 + 16) = xmmword_235283260;
    if (*((_QWORD *)inited + 2))
    {
      v25 = v24;
      outlined init with copy of AnyTrackedValue((uint64_t)(inited + 2), v24 + 32);
      if (*((_QWORD *)inited + 2) >= 2uLL)
      {
        v34[1] = inited;
        v22 = v41 | 0x14110014;
        outlined init with copy of AnyTrackedValue((uint64_t)inited + 72, v25 + 72);
        *(_OWORD *)(v25 + 128) = 0u;
        *(_QWORD *)(v25 + 144) = 0;
        *(_OWORD *)(v25 + 112) = 0u;
        specialized withKDebugValues(_:_:closure:)(v22, v25, v22, (uint64_t)v9);
        outlined init with copy of CVarArg?(v25 + 112, (uint64_t)v46);
        swift_bridgeObjectRelease();
        if (!v47)
        {
LABEL_13:
          outlined destroy of CVarArg?((uint64_t)v46);
          swift_bridgeObjectRelease();
          v30 = *(void (**)(char *, uint64_t))(v44 + 8);
          v30(v42, v7);
          v30(v9, v7);
          a3 = v39;
          a4 = v40;
          AssociatedTypeWitness = v38;
          v15 = v35;
          v13 = v36;
          goto LABEL_14;
        }
        outlined destroy of CVarArg?((uint64_t)v46);
        inited = &unk_2561AC000;
        if (one-time initialization token for continuation == -1)
        {
LABEL_8:
          v26 = __swift_project_value_buffer(v7, (uint64_t)static OSSignpostID.continuation);
          v27 = *(void (**)(char *, uint64_t, uint64_t))(v44 + 24);
          while (1)
          {
            v27(v9, v26, v7);
            v28 = swift_initStackObject();
            *(_OWORD *)(v28 + 16) = v45;
            *(_OWORD *)(v28 + 32) = 0u;
            *(_OWORD *)(v28 + 48) = 0u;
            *(_OWORD *)(v28 + 64) = 0u;
            *(_OWORD *)(v28 + 80) = 0u;
            *(_OWORD *)(v28 + 96) = 0u;
            *(_OWORD *)(v28 + 128) = 0u;
            *(_QWORD *)(v28 + 144) = 0;
            *(_OWORD *)(v28 + 112) = 0u;
            v29 = v28 + 112;
            specialized withKDebugValues(_:_:closure:)(v22, v28, v22, (uint64_t)v9);
            outlined init with copy of CVarArg?(v29, (uint64_t)v46);
            swift_bridgeObjectRelease();
            if (!v47)
              break;
            outlined destroy of CVarArg?((uint64_t)v46);
            if (*((_QWORD *)inited + 291) != -1)
              swift_once();
            v26 = __swift_project_value_buffer(v7, (uint64_t)static OSSignpostID.continuation);
          }
          goto LABEL_13;
        }
LABEL_17:
        swift_once();
        goto LABEL_8;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_17;
  }
LABEL_14:
  AGGraphClearUpdate();
  v43();
  AGGraphSetUpdate();
  v31 = $defer #1 <A>() in traceRuleBody<A>(_:body:)();
  MEMORY[0x24BDAC7A8](v31);
  v34[-2] = a3;
  v34[-1] = a4;
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v15, (uint64_t)_s7SwiftUI12BodyAccessorPAAE03setC0yy0C0QzyXEFySPyAFGXEfU0_TA_0, (uint64_t)&v34[-4], AssociatedTypeWitness, MEMORY[0x24BEE4078], MEMORY[0x24BEE4AE0] + 8, MEMORY[0x24BEE40A8], v32);
  return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v15, AssociatedTypeWitness);
}

uint64_t protocol witness for DynamicPropertyBox.getState<A>(type:) in conformance Namespace.Box@<X0>(uint64_t a1@<X1>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  return DynamicPropertyBox.getState<A>(type:)(a1, a2, a3);
}

uint64_t DynamicPropertyBox.getState<A>(type:)@<X0>(uint64_t a1@<X2>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v4;

  v4 = type metadata accessor for Binding(0, a1, a1, a2);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a3, 1, 1, v4);
}

uint64_t static DynamicProperty._propertyBehaviors.getter()
{
  return 0;
}

uint64_t _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t (*v15)(uint64_t, char *);
  uint64_t result;
  uint64_t v17;

  v11 = *(_QWORD *)(a5 - 8);
  v12 = MEMORY[0x24BDAC7A8](a1);
  v14 = (char *)&v17 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = v15(v12, v14);
  if (v8)
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v11 + 32))(a8, v14, a5);
  return result;
}

void protocol witness for static DynamicProperty._makeProperty<A>(in:container:fieldOffset:inputs:) in conformance LinkDestination(uint64_t a1, int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  static DynamicProperty._makeProperty<A>(in:container:fieldOffset:inputs:)(a1, a2, a3, a4, a6, a5, a7);
}

void static DynamicProperty._makeProperty<A>(in:container:fieldOffset:inputs:)(uint64_t a1, int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;

  v13 = *a2;
  static DynamicProperty.makeEmbeddedProperties<A>(in:container:fieldOffset:inputs:)(a1, &v13, a3, a4, a5, a6);
  v11 = type metadata accessor for EmbeddedDynamicPropertyBox(0, a5, a7, v10);
  v12 = MEMORY[0x23B7C9C04](&protocol conformance descriptor for EmbeddedDynamicPropertyBox<A>, v11);
  _DynamicPropertyBuffer.append<A>(_:fieldOffset:)(v12, a3, v11, v12);
}

uint64_t static DynamicProperty.addTreeValue<A, B>(_:as:at:in:flags:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v8;

  result = AGSubgraphShouldRecordTree();
  if ((_DWORD)result)
    return static DynamicProperty.addTreeValueSlow<A>(_:as:in:fieldOffset:flags:)(a1, v8, a4, a3);
  return result;
}

uint64_t DynamicPropertyCache.Fields.init(_:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;

  v4 = a3;
  v5 = a2;
  v6 = result;
  if ((a3 & 1) != 0)
  {
    v8 = *(_QWORD *)(a2 + 16);
    if (v8)
    {
      v18 = a3;
      v9 = a2 + 32;
      v17 = a2;
      swift_bridgeObjectRetain();
      v10 = 0;
      v11 = 0;
      do
      {
        v12 = *(_QWORD *)(v9 + 16 * v10 + 8);
        v13 = *(_QWORD *)(v12 + 16);
        if (v13)
        {
          swift_bridgeObjectRetain();
          v14 = v12 + 40;
          do
          {
            v11 |= (*(uint64_t (**)(void))(*(_QWORD *)v14 + 16))();
            v14 += 32;
            --v13;
          }
          while (v13);
          swift_bridgeObjectRelease();
        }
        ++v10;
      }
      while (v10 != v8);
      goto LABEL_12;
    }
LABEL_13:
    v11 = 0;
    goto LABEL_14;
  }
  v15 = *(_QWORD *)(result + 16);
  if (!v15)
    goto LABEL_13;
  v17 = a2;
  v18 = a3;
  swift_bridgeObjectRetain();
  v11 = 0;
  v16 = v6 + 40;
  do
  {
    v11 |= (*(uint64_t (**)(void))(*(_QWORD *)v16 + 16))();
    v16 += 32;
    --v15;
  }
  while (v15);
LABEL_12:
  v4 = v18;
  v5 = v17;
  result = outlined consume of DynamicPropertyCache.Fields.Layout();
LABEL_14:
  *(_QWORD *)a4 = v6;
  *(_QWORD *)(a4 + 8) = v5;
  *(_BYTE *)(a4 + 16) = v4 & 1;
  *(_DWORD *)(a4 + 20) = v11;
  return result;
}

uint64_t DynamicPropertyBehaviors.rawValue.getter()
{
  unsigned int *v0;

  return *v0;
}

uint64_t DynamicPropertyBehaviors.init(rawValue:)@<X0>(uint64_t result@<X0>, _DWORD *a2@<X8>)
{
  *a2 = result;
  return result;
}

void static DynamicPropertyBehaviors.allowsAsync.getter(_DWORD *a1@<X8>)
{
  *a1 = 1;
}

void static DynamicPropertyBehaviors.requiresMainThread.getter(_DWORD *a1@<X8>)
{
  *a1 = 2;
}

uint64_t static DynamicProperty.makeEmbeddedProperties<A>(in:container:fieldOffset:inputs:)(uint64_t a1, int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  int v10;
  int v12;
  uint64_t v13;

  v10 = *a2;
  static DynamicPropertyCache.fields(of:)(v6, (uint64_t)&v13);
  v12 = v10;
  _DynamicPropertyBuffer.addFields<A>(_:container:inputs:baseOffset:)((uint64_t)&v13, &v12, a4, a3, a6);
  return outlined consume of DynamicPropertyCache.Fields.Layout();
}

uint64_t EmbeddedDynamicPropertyBox.update(property:phase:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  (*(void (**)(_QWORD))(*(_QWORD *)(a3 + 24) + 24))(*(_QWORD *)(a3 + 16));
  return 0;
}

void DynamicPropertyCache.Fields.behaviors.getter(_DWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_DWORD *)(v1 + 20);
}

_DWORD *DynamicPropertyCache.Fields.behaviors.setter(_DWORD *result)
{
  uint64_t v1;

  *(_DWORD *)(v1 + 20) = *result;
  return result;
}

uint64_t (*DynamicPropertyCache.Fields.behaviors.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

Swift::String_optional __swiftcall DynamicPropertyCache.Fields.name(at:)(Swift::Int at)
{
  _BYTE *v1;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  Swift::String_optional result;

  v3 = type metadata accessor for String.Encoding();
  MEMORY[0x24BDAC7A8](v3);
  v4 = 0;
  v5 = 0;
  if ((v1[16] & 1) == 0)
  {
    v6 = *(_QWORD **)v1;
    v7 = *(_QWORD *)(*(_QWORD *)v1 + 16);
    if (!v7)
      goto LABEL_11;
    if (v6[6] == at)
    {
      v8 = v6 + 7;
      goto LABEL_8;
    }
    if (v7 == 1)
      goto LABEL_11;
    if (v6[10] == at)
    {
      v8 = v6 + 11;
LABEL_8:
      if (*v8)
      {
        static String.Encoding.utf8.getter();
        v4 = String.init(cString:encoding:)();
        goto LABEL_19;
      }
LABEL_11:
      v4 = 0;
      v5 = 0;
      goto LABEL_19;
    }
    if (v7 == 2)
      goto LABEL_11;
    v8 = v6 + 15;
    v9 = 2;
    while (1)
    {
      v10 = v9 + 1;
      if (__OFADD__(v9, 1))
        break;
      if (*(v8 - 1) == at)
        goto LABEL_8;
      v4 = 0;
      v5 = 0;
      v8 += 4;
      ++v9;
      if (v10 == v7)
        goto LABEL_19;
    }
    __break(1u);
  }
LABEL_19:
  result.value._object = v5;
  result.value._countAndFlagsBits = v4;
  return result;
}

uint64_t DynamicPropertyCache.Fields._name(at:)(uint64_t result)
{
  _BYTE *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t i;
  uint64_t v6;

  if ((v1[16] & 1) != 0)
    return 0;
  v2 = *(_QWORD *)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 16);
  if (!v3)
    return 0;
  if (*(_QWORD *)(v2 + 48) == result)
    return *(_QWORD *)(v2 + 56);
  if (v3 == 1)
    return 0;
  v4 = v2 + 88;
  for (i = 1; ; ++i)
  {
    v6 = i + 1;
    if (__OFADD__(i, 1))
      break;
    if (*(_QWORD *)(v4 - 8) == result)
      return *(_QWORD *)v4;
    v4 += 32;
    if (v6 == v3)
      return 0;
  }
  __break(1u);
  return result;
}

uint64_t closure #1 in static DynamicPropertyCache.fields(of:)(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD **a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v13;
  unint64_t v14;
  _QWORD *v15;

  v8 = swift_conformsToProtocol2();
  if (v8)
    v9 = v8;
  else
    v9 = 0;
  if (v8)
    v10 = a3;
  else
    v10 = 0;
  if (v10)
  {
    v11 = *a4;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *a4 = v11;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v11[2] + 1, 1, v11);
      *a4 = v11;
    }
    v14 = v11[2];
    v13 = v11[3];
    if (v14 >= v13 >> 1)
      v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v13 > 1), v14 + 1, 1, v11);
    v11[2] = v14 + 1;
    v15 = &v11[4 * v14];
    v15[4] = v10;
    v15[5] = v9;
    v15[6] = a2;
    v15[7] = a1;
    *a4 = v11;
  }
  return 1;
}

uint64_t closure #2 in static DynamicPropertyCache.fields(of:)(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  _QWORD *v4;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  _QWORD **v25;
  uint64_t v26;

  v9 = AGTupleCount();
  if (v9 < 0)
  {
    __break(1u);
LABEL_26:
    a3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a3[2] + 1, 1, a3);
    *a4 = a3;
    goto LABEL_20;
  }
  v10 = v9;
  v25 = (_QWORD **)a4;
  v26 = a2;
  if (v9)
  {
    v11 = 0;
    v4 = (_QWORD *)MEMORY[0x24BEE4AF8];
    do
    {
      v13 = AGTupleElementType();
      v14 = swift_conformsToProtocol2();
      if (v14)
        v15 = v13;
      else
        v15 = 0;
      if (v14)
        v16 = v14;
      else
        v16 = 0;
      if (v15)
      {
        v17 = AGTupleElementOffset();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v4[2] + 1, 1, v4);
        v19 = v4[2];
        v18 = v4[3];
        if (v19 >= v18 >> 1)
          v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v18 > 1), v19 + 1, 1, v4);
        v4[2] = v19 + 1;
        v12 = &v4[4 * v19];
        v12[4] = v15;
        v12[5] = v16;
        v12[6] = v17;
        v12[7] = a1;
      }
      ++v11;
    }
    while (v10 != v11);
  }
  else
  {
    v4 = (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  if (!v4[2])
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  a4 = v25;
  a3 = *v25;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *v25 = a3;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    goto LABEL_26;
LABEL_20:
  v22 = a3[2];
  v21 = a3[3];
  if (v22 >= v21 >> 1)
  {
    a3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v21 > 1), v22 + 1, 1, a3);
    *a4 = a3;
  }
  a3[2] = v22 + 1;
  v23 = &a3[2 * v22];
  v23[4] = v26;
  v23[5] = v4;
  return 1;
}

uint64_t static DynamicProperty.addTreeValue<A>(_:at:in:flags:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v7;

  result = AGSubgraphShouldRecordTree();
  if ((_DWORD)result)
    return static DynamicProperty.addTreeValueSlow<A>(_:as:in:fieldOffset:flags:)(a1, v7, a3, a2);
  return result;
}

uint64_t static DynamicProperty.addTreeValueSlow<A>(_:as:in:fieldOffset:flags:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;

  static DynamicPropertyCache.fields(of:)(a3, (uint64_t)&v6);
  DynamicPropertyCache.Fields._name(at:)(a4);
  outlined consume of DynamicPropertyCache.Fields.Layout();
  return AGSubgraphAddTreeValue();
}

void closure #1 in BodyAccessor.makeBody(container:inputs:fields:)()
{
  project #1 <A><A1>(flags:) in closure #1 in BodyAccessor.makeBody(container:inputs:fields:)();
}

void project #1 <A><A1>(flags:) in closure #1 in BodyAccessor.makeBody(container:inputs:fields:)()
{
  type metadata accessor for StaticBody();
}

void sub_234DB60F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  *(_QWORD *)(v13 - 232) = *(_QWORD *)(a1 - 8);
  *(_QWORD *)(v13 - 224) = a1;
  MEMORY[0x24BDAC7A8](a1);
  *(_QWORD *)(v13 - 248) = (char *)&a9 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v15);
  *(_QWORD *)(v13 - 240) = (char *)&a9 - v16;
  MEMORY[0x24BDAC7A8](v17);
  *(_QWORD *)(v13 - 120) = v11;
  *(_QWORD *)(v13 - 112) = v12;
  *(_QWORD *)(v13 - 184) = v12;
  *(_QWORD *)(v13 - 176) = v9;
  *(_QWORD *)(v13 - 104) = v10;
  *(_QWORD *)(v13 - 96) = v9;
  type metadata accessor for DynamicBody();
}

void sub_234DB6190(uint64_t a1)
{
  int v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t AssociatedTypeWitness;
  double v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE v22[96];

  *(_QWORD *)(v9 - 208) = *(_QWORD *)(a1 - 8);
  MEMORY[0x24BDAC7A8](a1);
  *(_QWORD *)(v9 - 216) = &v22[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v11);
  v13 = &v22[-v12];
  *(_QWORD *)(v9 - 120) = v2;
  *(_QWORD *)(v9 - 112) = v8;
  *(_BYTE *)(v9 - 104) = v6;
  *(_DWORD *)(v9 - 100) = *(_QWORD *)(v9 - 168);
  *(_DWORD *)(v9 - 168) = v1;
  *(_DWORD *)(v9 - 140) = v1;
  v14 = *(_QWORD *)(v9 - 200);
  outlined copy of DynamicPropertyCache.Fields.Layout();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v16 = _DynamicPropertyBuffer.init<A>(fields:container:inputs:)((uint64_t *)(v9 - 120), (int *)(v9 - 140), v14, AssociatedTypeWitness, (double *)(v9 - 136));
  v17 = *(_DWORD *)(v9 - 128);
  if (*(_DWORD *)(v9 - 124))
  {
    (*(void (**)(uint64_t, _QWORD, uint64_t, double))(v7 + 16))(v5, *(_QWORD *)(v9 - 192), v4, v16);
    (*(void (**)(_BYTE *, uint64_t, uint64_t))(v7 + 32))(v13, v5, v4);
    v18 = *(_QWORD *)(v9 - 184);
    *(_QWORD *)(v9 - 120) = v4;
    *(_QWORD *)(v9 - 112) = v18;
    v19 = *(_QWORD *)(v9 - 176);
    *(_QWORD *)(v9 - 104) = v3;
    *(_QWORD *)(v9 - 96) = v19;
    type metadata accessor for DynamicBody();
  }
  *(_QWORD *)(v9 - 120) = *(_QWORD *)(v9 - 136);
  *(_DWORD *)(v9 - 112) = v17;
  *(_DWORD *)(v9 - 108) = 0;
  _DynamicPropertyBuffer.destroy()();
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v7 + 16))(v5, *(_QWORD *)(v9 - 192), v4);
  (*(void (**)(_QWORD, uint64_t, uint64_t))(v7 + 32))(*(_QWORD *)(v9 - 240), v5, v4);
  v20 = *(_QWORD *)(v9 - 184);
  *(_QWORD *)(v9 - 120) = v4;
  *(_QWORD *)(v9 - 112) = v20;
  v21 = *(_QWORD *)(v9 - 176);
  *(_QWORD *)(v9 - 104) = v3;
  *(_QWORD *)(v9 - 96) = v21;
  type metadata accessor for StaticBody();
}

void sub_234DB639C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t AssociatedTypeWitness;
  uint64_t v7;

  *(_DWORD *)(v1 + *(int *)(a1 + 52)) = *(_DWORD *)(v2 - 168);
  v4 = *(_QWORD *)(v2 - 232);
  v3 = *(_QWORD *)(v2 - 224);
  v5 = *(_QWORD *)(v2 - 248);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v5, v1, v3);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v7 = MEMORY[0x23B7C9C04](&protocol conformance descriptor for StaticBody<A, B>, v3);
  _GraphValue.init<A>(_:)(v5, AssociatedTypeWitness, v3, v7, *(_DWORD **)(v2 - 160));
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v1, v3);
  JUMPOUT(0x234DB6430);
}

uint64_t closure #2 in BodyAccessor.setBody(_:)()
{
  swift_getAssociatedTypeWitness();
  return AGGraphSetOutputValue();
}

uint64_t StaticBody.container.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t Value;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  Value = AGGraphGetValue();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 16))(a1, Value, AssociatedTypeWitness);
}

uint64_t static StaticBody.flags.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a4 + 8))(a2, a4);
}

void StaticBody.updateValue()(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  int CurrentAttribute;
  uint64_t v14;
  _QWORD v15[2];
  int v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  v2 = type metadata accessor for ObservationTracking._AccessList();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  MEMORY[0x24BDAC7A8](v4);
  v15[1] = (char *)v15 - v5;
  MEMORY[0x24BDAC7A8](v6);
  v15[0] = (char *)v15 - v7;
  type metadata accessor for [(_:)](0, (unint64_t *)&lazy cache variable for type metadata for ObservationTracking._AccessList?, v8, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v9);
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)v15 - v11;
  CurrentAttribute = AGGraphGetCurrentAttribute();
  if (CurrentAttribute == *MEMORY[0x24BE096C0])
  {
    __break(1u);
  }
  else
  {
    v16 = CurrentAttribute;
    if (one-time initialization token for lastestAccessLists == -1)
      goto LABEL_3;
  }
  swift_once();
LABEL_3:
  swift_beginAccess();
  v19 = static ObservationRegistrar.lastestAccessLists;
  static ObservationRegistrar.lastestAccessLists = (_UNKNOWN *)MEMORY[0x24BEE4AF8];
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 56))(v12, 1, 1, v2);
  *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 848) = v12;
  v14 = *(_QWORD *)(a1 + 16);
  v17 = *(_QWORD *)(a1 + 32);
  v18 = v14;
  closure #1 in StaticBody.updateValue()();
}

void closure #1 in StaticBody.updateValue()()
{
  uint64_t AssociatedTypeWitness;
  uint64_t v1;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  MEMORY[0x24BDAC7A8](v1);
  type metadata accessor for StaticBody();
}

uint64_t sub_234DB6A7C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  double v11;
  uint64_t v12;
  _BYTE *v13;
  void (*v14)(_BYTE *, uint64_t, uint64_t, double);
  _BYTE v16[96];

  v7 = *(_QWORD *)(a1 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v9 = &v16[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v11 = MEMORY[0x24BDAC7A8](v10);
  v13 = &v16[-v12];
  v14 = *(void (**)(_BYTE *, uint64_t, uint64_t, double))(v7 + 16);
  v14(&v16[-v12], v3, a1, v11);
  (*(void (**)(uint64_t, _BYTE *, uint64_t))(*(_QWORD *)(v5 - 72) + 32))(v4, v13, v1);
  ((void (*)(_BYTE *, uint64_t, uint64_t))v14)(v9, v3, a1);
  StaticBody.container.getter(v2);
  (*(void (**)(_BYTE *, uint64_t))(v7 + 8))(v9, a1);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 144) + 24))(v2, 1, v1);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v5 - 136) + 8))(v2, *(_QWORD *)(v5 - 128));
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 72) + 8))(v4, v1);
}

uint64_t static StaticBody.container.getter()
{
  return swift_getAssociatedTypeWitness();
}

uint64_t static StaticBody.metaProperties<A>(as:attribute:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  if (swift_getAssociatedTypeWitness() == a5)
  {
    AGGraphGetAttributeInfo();
    type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for _ContiguousArrayStorage<(String, AGAttribute)>, (uint64_t (*)(uint64_t))type metadata accessor for (String, AGAttribute), (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
    v5 = swift_allocObject();
    *(_OWORD *)(v5 + 16) = xmmword_23527E860;
    *(_QWORD *)(v5 + 32) = 0x666C657340;
    *(_QWORD *)(v5 + 40) = 0xE500000000000000;
    type metadata accessor for StaticBody();
  }
  return MEMORY[0x24BEE4AF8];
}

uint64_t protocol witness for static BodyAccessorRule.container.getter in conformance StaticBody<A, B>()
{
  return static StaticBody.container.getter();
}

uint64_t protocol witness for static BodyAccessorRule.value<A>(as:attribute:) in conformance StaticBody<A, B>@<X0>(uint64_t a1@<X2>, uint64_t *a2@<X3>, uint64_t a3@<X8>)
{
  return static StaticBody.value<A>(as:attribute:)(a2[2], a2[3], a1, a2[4], a2[5], (void (*)(_QWORD, _QWORD *))type metadata accessor for StaticBody, a3);
}

void protocol witness for static BodyAccessorRule.buffer<A>(as:attribute:) in conformance StaticBody<A, B>(uint64_t a1@<X8>)
{
  protocol witness for static Rule.initialValue.getter in conformance OffsetPosition(a1);
}

uint64_t protocol witness for static BodyAccessorRule.metaProperties<A>(as:attribute:) in conformance StaticBody<A, B>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return static StaticBody.metaProperties<A>(as:attribute:)(a1, a2, *(_QWORD *)(a4 + 16), *(_QWORD *)(a4 + 24), a3);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance StaticBody<A, B>()
{
  return specialized StaticBody.description.getter();
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance StaticBody<A, B>(uint64_t *a1)
{
  return static StaticBody.flags.getter(a1[2], a1[3], a1[4], a1[5]);
}

void DynamicBody.updateValue()(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t AssociatedTypeWitness;
  uint64_t v17;
  _DWORD *Value;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  char v24;
  int CurrentAttribute;
  char *v26;
  _QWORD v27[2];
  int v28;
  char *v29;
  void *v30;
  char *v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  v41 = *MEMORY[0x24BDAC8D0];
  v3 = type metadata accessor for ObservationTracking._AccessList();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v7);
  v27[1] = (char *)v27 - v8;
  MEMORY[0x24BDAC7A8](v9);
  v31 = (char *)v27 - v10;
  type metadata accessor for [(_:)](0, (unint64_t *)&lazy cache variable for type metadata for ObservationTracking._AccessList?, v11, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v12);
  MEMORY[0x24BDAC7A8](v13);
  v14 = *(_QWORD *)(a1 + 32);
  v32 = *(_QWORD *)(a1 + 16);
  v33 = (char *)v27 - v15;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v35 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v36 = AssociatedTypeWitness;
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v37 = (char *)v27 - v17;
  Value = (_DWORD *)AGGraphGetValue();
  v19 = *(int *)(a1 + 64);
  if (*(_DWORD *)(v1 + v19) != *Value >> 1)
  {
    v20 = (uint64_t *)(v1 + *(int *)(a1 + 60));
    v39 = *v20;
    v40 = v20[1];
    _DynamicPropertyBuffer.reset()();
    *(_DWORD *)(v1 + v19) = *(_DWORD *)AGGraphGetValue() >> 1;
  }
  v21 = v36;
  v22 = AGGraphGetValue();
  v24 = v23;
  (*(void (**)(char *, uint64_t, uint64_t))(v35 + 16))(v37, v22, v21);
  v38 = v24 & 1;
  CurrentAttribute = AGGraphGetCurrentAttribute();
  if (CurrentAttribute == *MEMORY[0x24BE096C0])
  {
    __break(1u);
  }
  else
  {
    v28 = CurrentAttribute;
    v29 = v6;
    v34 = v14;
    if (one-time initialization token for lastestAccessLists == -1)
      goto LABEL_5;
  }
  swift_once();
LABEL_5:
  swift_beginAccess();
  v30 = static ObservationRegistrar.lastestAccessLists;
  static ObservationRegistrar.lastestAccessLists = (_UNKNOWN *)MEMORY[0x24BEE4AF8];
  v26 = v33;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v4 + 56))(v33, 1, 1, v3);
  *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 848) = v26;
  closure #1 in DynamicBody.updateValue()();
}

void closure #1 in DynamicBody.updateValue()()
{
  uint64_t AssociatedTypeWitness;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  type metadata accessor for DynamicBody();
}

uint64_t sub_234DB7350(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;

  *(_QWORD *)(v8 - 192) = a1;
  v9 = *(_QWORD *)(a1 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v11 = (char *)&v19 - v10;
  *(_QWORD *)(v8 - 160) = v1;
  *(_QWORD *)(v8 - 152) = v5;
  *(_QWORD *)(v8 - 144) = v3;
  *(_QWORD *)(v8 - 136) = v2;
  *(_QWORD *)(v8 - 184) = v7;
  *(_QWORD *)(v8 - 128) = v7;
  v12 = *(_QWORD *)(v8 - 216);
  v13 = *(_BYTE **)(v8 - 208);
  *(_QWORD *)(v8 - 120) = v13;
  v14 = *(_QWORD *)(v8 - 200);
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v12, (uint64_t)partial apply for closure #1 in closure #1 in DynamicBody.updateValue(), v8 - 176, v4, MEMORY[0x24BEE4078], MEMORY[0x24BEE4AE0] + 8, MEMORY[0x24BEE40A8], v15);
  *(_QWORD *)(v8 - 200) = v14;
  if ((*v13 & 1) != 0 || (swift_getAssociatedTypeWitness(), !AGGraphGetOutputValue()))
    v16 = 1;
  else
    v16 = AGGraphCurrentAttributeWasModified();
  *v13 = v16;
  (*(void (**)(char *, _QWORD, _QWORD))(v9 + 16))(v11, *(_QWORD *)(v8 - 184), *(_QWORD *)(v8 - 192));
  v17 = *(_QWORD *)(v8 - 72);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v17 + 16))(v6, v12, v4);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v3 + 24))(v6, v16, v1, v3);
  (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v6, v4);
  return (*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v11, v1);
}

void closure #1 in closure #1 in DynamicBody.updateValue()()
{
  type metadata accessor for DynamicBody();
}

uint64_t sub_234DB74E0(uint64_t a1)
{
  uint64_t v1;
  _BYTE *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  _QWORD *v10;
  int v11;
  uint64_t result;
  uint64_t v13;

  v6 = *(_QWORD *)(a1 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v8 = (char *)&v13 - v7;
  v10 = (_QWORD *)(v1 + *(int *)(v9 + 60));
  *(_QWORD *)(v4 - 96) = *v10;
  *(_QWORD *)(v4 - 88) = v10[1];
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, v1, a1);
  v11 = *(_DWORD *)AGGraphGetValue();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, a1);
  *(_DWORD *)(v4 - 52) = v11;
  result = _DynamicPropertyBuffer.update(container:phase:)(v3, (int *)(v4 - 52));
  if ((result & 1) != 0)
    *v2 = 1;
  return result;
}

uint64_t static StaticBody.value<A>(as:attribute:)@<X0>(uint64_t a1@<X2>, uint64_t a2@<X3>, uint64_t a3@<X4>, uint64_t a4@<X5>, uint64_t a5@<X6>, void (*a6)(_QWORD, _QWORD *)@<X7>, uint64_t a7@<X8>)
{
  uint64_t Value;
  uint64_t v16;
  _QWORD v17[4];

  if (swift_getAssociatedTypeWitness() != a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 56))(a7, 1, 1, a3);
  AGGraphGetAttributeInfo();
  v17[0] = a1;
  v17[1] = a2;
  v17[2] = a4;
  v17[3] = a5;
  a6(0, v17);
  Value = AGGraphGetValue();
  v16 = *(_QWORD *)(a3 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v16 + 16))(a7, Value, a3);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v16 + 56))(a7, 0, 1, a3);
}

uint64_t static DynamicBody.buffer<A>(as:attribute:)@<X0>(uint64_t a1@<X4>, uint64_t a2@<X8>)
{
  uint64_t result;

  result = swift_getAssociatedTypeWitness();
  if (result == a1)
  {
    AGGraphGetAttributeInfo();
    type metadata accessor for DynamicBody();
  }
  *(_OWORD *)a2 = 0uLL;
  *(_BYTE *)(a2 + 16) = 1;
  return result;
}

uint64_t static DynamicBody.metaProperties<A>(as:attribute:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  if (swift_getAssociatedTypeWitness() == a5)
  {
    AGGraphGetAttributeInfo();
    type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for _ContiguousArrayStorage<(String, AGAttribute)>, (uint64_t (*)(uint64_t))type metadata accessor for (String, AGAttribute), (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
    v5 = swift_allocObject();
    *(_OWORD *)(v5 + 16) = xmmword_2352828C0;
    *(_QWORD *)(v5 + 32) = 0x666C657340;
    *(_QWORD *)(v5 + 40) = 0xE500000000000000;
    type metadata accessor for DynamicBody();
  }
  return MEMORY[0x24BEE4AF8];
}

void DynamicBody.destroy()()
{
  _DynamicPropertyBuffer.destroy()();
}

uint64_t protocol witness for static StatefulRule.initialValue.getter in conformance StaticBody<A, B>@<X0>(uint64_t a1@<X8>)
{
  uint64_t AssociatedTypeWitness;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 56))(a1, 1, 1, AssociatedTypeWitness);
}

uint64_t protocol witness for static BodyAccessorRule.value<A>(as:attribute:) in conformance DynamicBody<A, B>@<X0>(uint64_t a1@<X2>, uint64_t *a2@<X3>, uint64_t a3@<X8>)
{
  return static StaticBody.value<A>(as:attribute:)(a2[2], a2[3], a1, a2[4], a2[5], (void (*)(_QWORD, _QWORD *))type metadata accessor for DynamicBody, a3);
}

uint64_t protocol witness for static BodyAccessorRule.buffer<A>(as:attribute:) in conformance DynamicBody<A, B>@<X0>(uint64_t a1@<X2>, uint64_t a2@<X8>)
{
  return static DynamicBody.buffer<A>(as:attribute:)(a1, a2);
}

uint64_t protocol witness for static BodyAccessorRule.metaProperties<A>(as:attribute:) in conformance DynamicBody<A, B>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return static DynamicBody.metaProperties<A>(as:attribute:)(a1, a2, *(_QWORD *)(a4 + 16), *(_QWORD *)(a4 + 24), a3);
}

void protocol witness for static _AttributeBody._destroySelf(_:) in conformance DynamicBody<A, B>()
{
  DynamicBody.destroy()();
}

uint64_t changedBodyProperties<A>(of:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t inited;
  id v7;
  uint64_t v8;
  Class isa;
  id v10;
  _QWORD *v11;
  unint64_t v12;
  char v13;
  unint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t result;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  uint64_t v31;
  _QWORD *v32;
  unint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  char v42;
  unint64_t v43;
  char v44;
  _QWORD *v45;
  unint64_t v46;
  unint64_t v47;
  _QWORD *v48;
  unsigned int v49;
  uint64_t v50;
  uint64_t v51;
  __int128 v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unsigned int v58;
  unint64_t v61;
  _QWORD *v62;
  _QWORD *v63;
  _OWORD v64[2];
  __int128 v65;
  __int128 v66;

  type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for _ContiguousArrayStorage<(AGDescriptionOption, Any)>, (uint64_t (*)(uint64_t))type metadata accessor for (AGDescriptionOption, Any), (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
  v2 = 0;
  v3 = (void *)*MEMORY[0x24BE096F0];
  v4 = MEMORY[0x24BEE0D00];
  v5 = MEMORY[0x24BEE1768];
  while (1)
  {
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_2352828C0;
    *(_QWORD *)(inited + 64) = v4;
    *(_QWORD *)(inited + 32) = v3;
    *(_QWORD *)(inited + 40) = 0x72662F6B63617473;
    *(_QWORD *)(inited + 48) = 0xEB00000000656D61;
    v7 = v3;
    v8 = MEMORY[0x23B7C5DAC](0x6E695F656D617266, 0xEB00000000786564);
    *(_QWORD *)(inited + 104) = v5;
    *(_QWORD *)(inited + 72) = v8;
    *(_QWORD *)(inited + 80) = v2;
    specialized Dictionary.init(dictionaryLiteral:)(inited);
    type metadata accessor for AGDescriptionOption(0);
    lazy protocol witness table accessor for type AGDescriptionOption and conformance AGDescriptionOption();
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    v10 = (id)AGGraphDescription();

    if (v10)
    {
      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
    }
    else
    {
      memset(v64, 0, sizeof(v64));
    }
    outlined init with take of Any?((uint64_t)v64, (uint64_t)&v65);
    if (*((_QWORD *)&v66 + 1))
      break;
    outlined destroy of Any?((uint64_t)&v65, (uint64_t)&lazy cache variable for type metadata for Any?, MEMORY[0x24BEE4AD8] + 8, (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))type metadata accessor for MutableBox<CachedEnvironment>);
LABEL_3:
    if (++v2 == 32)
      return MEMORY[0x24BEE4AF8];
  }
  type metadata accessor for [String : Any](0, (unint64_t *)&lazy cache variable for type metadata for [String : Any]);
  if ((swift_dynamicCast() & 1) == 0)
    goto LABEL_3;
  v11 = v63;
  if (!v63[2])
    goto LABEL_16;
  v12 = specialized __RawDictionaryStorage.find<A>(_:)(0x64692D65646F6ELL, 0xE700000000000000);
  if ((v13 & 1) == 0
    || (outlined init with copy of Any(v63[7] + 32 * v12, (uint64_t)&v65), (swift_dynamicCast() & 1) == 0)
    || !v63[2]
    || (v58 = v64[0],
        v14 = specialized __RawDictionaryStorage.find<A>(_:)(0x7079742D666C6573, 0xE900000000000065),
        (v15 & 1) == 0)
    || (outlined init with copy of Any(v63[7] + 32 * v14, (uint64_t)&v65),
        type metadata accessor for BodyAccessorRule.Type(),
        (swift_dynamicCast() & 1) == 0)
    || (v57 = *((_QWORD *)&v64[0] + 1),
        v16 = *(_QWORD *)&v64[0],
        (*(uint64_t (**)(_QWORD))(*((_QWORD *)&v64[0] + 1) + 8))(*(_QWORD *)&v64[0]) != a1))
  {
LABEL_16:
    swift_bridgeObjectRelease();
    goto LABEL_3;
  }
  v53 = v16;
  v18 = (_QWORD *)MEMORY[0x24BEE4AF8];
  v63 = (_QWORD *)MEMORY[0x24BEE4AF8];
  if ((AGGraphGetValueState() & 0x80) == 0)
    goto LABEL_37;
  if (one-time initialization token for latestTriggers != -1)
    swift_once();
  swift_beginAccess();
  v19 = static ObservationRegistrar.latestTriggers;
  if ((unint64_t)static ObservationRegistrar.latestTriggers >> 62)
  {
    swift_bridgeObjectRetain_n();
    v26 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v26)
      goto LABEL_35;
    swift_bridgeObjectRetain();
    v20 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v20)
    {
LABEL_23:
      result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v20 & ~(v20 >> 63), 0);
      if (v20 < 0)
      {
LABEL_84:
        __break(1u);
        return result;
      }
      v21 = 0;
      v61 = v19 & 0xC000000000000001;
      v22 = v19;
      do
      {
        if (v61)
          MEMORY[0x23B7C6D9C](v21, v19);
        else
          swift_retain();
        *(_QWORD *)&v65 = 0;
        *((_QWORD *)&v65 + 1) = 0xE000000000000000;
        type metadata accessor for AnyKeyPath();
        _print_unlocked<A, B>(_:_:)();
        swift_release();
        v23 = v65;
        v62 = v18;
        v25 = v18[2];
        v24 = v18[3];
        if (v25 >= v24 >> 1)
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v24 > 1, v25 + 1, 1);
        ++v21;
        v18[2] = v25 + 1;
        *(_OWORD *)&v18[2 * v25 + 4] = v23;
        v19 = v22;
      }
      while (v20 != v21);
    }
    swift_bridgeObjectRelease();
    goto LABEL_36;
  }
  v20 = *(_QWORD *)((static ObservationRegistrar.latestTriggers & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (v20)
    goto LABEL_23;
LABEL_35:
  swift_bridgeObjectRelease();
  v18 = &outlined read-only object #0 of changedBodyProperties<A>(of:);
LABEL_36:
  specialized Array.append<A>(contentsOf:)((uint64_t)v18);
LABEL_37:
  v27 = v57;
  v28 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t, uint64_t))(v57 + 32))(a2, v58, a2, v16, v57);
  v56 = *(_QWORD *)(v28 + 16);
  if (!v56)
  {
    swift_bridgeObjectRelease();
    goto LABEL_80;
  }
  v54 = v28;
  if (v11[2]
    && (v29 = specialized __RawDictionaryStorage.find<A>(_:)(0x737475706E69, 0xE600000000000000), (v30 & 1) != 0))
  {
    outlined init with copy of Any(v11[7] + 32 * v29, (uint64_t)&v65);
  }
  else
  {
    v65 = 0u;
    v66 = 0u;
  }
  swift_bridgeObjectRelease();
  if (!*((_QWORD *)&v66 + 1))
  {
    result = outlined destroy of Any?((uint64_t)&v65, (uint64_t)&lazy cache variable for type metadata for Any?, MEMORY[0x24BEE4AD8] + 8, (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))type metadata accessor for MutableBox<CachedEnvironment>);
    v31 = v54;
    goto LABEL_48;
  }
  type metadata accessor for [[String : Any]]();
  result = swift_dynamicCast();
  v31 = v54;
  if ((result & 1) == 0)
  {
LABEL_48:
    v55 = v31 + 32;
    goto LABEL_49;
  }
  v55 = v54 + 32;
  v32 = v62;
  if (!v62)
LABEL_49:
    v32 = (_QWORD *)MEMORY[0x24BEE4AF8];
  v33 = 0;
  while (2)
  {
    if (v33 >= *(_QWORD *)(v31 + 16))
    {
      __break(1u);
      goto LABEL_84;
    }
    v34 = (uint64_t *)(v55 + 24 * v33);
    v36 = *v34;
    v35 = v34[1];
    v37 = *((_DWORD *)v34 + 4);
    v38 = v32[2];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (!v38)
    {
      swift_bridgeObjectRelease();
LABEL_66:
      result = swift_bridgeObjectRelease();
      goto LABEL_52;
    }
    v39 = 0;
    while (2)
    {
      v40 = v32[v39 + 4];
      if (!*(_QWORD *)(v40 + 16))
      {
LABEL_57:
        if (v38 == ++v39)
        {
          swift_bridgeObjectRelease();
          result = swift_bridgeObjectRelease();
          v31 = v54;
          goto LABEL_52;
        }
        continue;
      }
      break;
    }
    swift_bridgeObjectRetain();
    v41 = specialized __RawDictionaryStorage.find<A>(_:)(25705, 0xE200000000000000);
    if ((v42 & 1) == 0
      || (outlined init with copy of Any(*(_QWORD *)(v40 + 56) + 32 * v41, (uint64_t)&v65), (swift_dynamicCast() & 1) == 0)
      || (_DWORD)v62 != v37)
    {
      swift_bridgeObjectRelease();
      goto LABEL_57;
    }
    swift_bridgeObjectRelease();
    if (*(_QWORD *)(v40 + 16))
    {
      v43 = specialized __RawDictionaryStorage.find<A>(_:)(0x6465676E616863, 0xE700000000000000);
      v31 = v54;
      if ((v44 & 1) != 0)
      {
        outlined init with copy of Any(*(_QWORD *)(v40 + 56) + 32 * v43, (uint64_t)&v65);
      }
      else
      {
        v65 = 0u;
        v66 = 0u;
      }
    }
    else
    {
      v65 = 0u;
      v66 = 0u;
      v31 = v54;
    }
    swift_bridgeObjectRelease();
    if (!*((_QWORD *)&v66 + 1))
    {
      outlined destroy of Any?((uint64_t)&v65, (uint64_t)&lazy cache variable for type metadata for Any?, MEMORY[0x24BEE4AD8] + 8, (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))type metadata accessor for MutableBox<CachedEnvironment>);
      goto LABEL_66;
    }
    if (!swift_dynamicCast() || (v62 & 1) == 0)
      goto LABEL_66;
    v45 = v63;
    result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v63[2] + 1, 1, v63);
      v45 = (_QWORD *)result;
    }
    v47 = v45[2];
    v46 = v45[3];
    if (v47 >= v46 >> 1)
    {
      result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v46 > 1), v47 + 1, 1, v45);
      v45 = (_QWORD *)result;
    }
    v45[2] = v47 + 1;
    v48 = &v45[2 * v47];
    v48[4] = v36;
    v48[5] = v35;
    v63 = v45;
LABEL_52:
    if (++v33 != v56)
      continue;
    break;
  }
  swift_bridgeObjectRelease();
  v16 = v53;
  v27 = v57;
LABEL_80:
  swift_bridgeObjectRelease();
  (*(void (**)(__int128 *__return_ptr, uint64_t, _QWORD, uint64_t, uint64_t, uint64_t))(v27 + 24))(&v65, a2, v58, a2, v16, v27);
  if ((v66 & 1) == 0)
  {
    v49 = DWORD2(v65);
    v50 = v65;
    v51 = HIDWORD(*((_QWORD *)&v65 + 1));
    static DynamicPropertyCache.fields(of:)(a1, (uint64_t)&v65);
    v52 = v65;
    *(_QWORD *)&v65 = v50;
    *((_QWORD *)&v65 + 1) = __PAIR64__(v51, v49);
    specialized _DynamicPropertyBuffer.applyChanged(to:)((uint64_t)&v65, v52, *((uint64_t *)&v52 + 1), v66 | ((unint64_t)DWORD1(v66) << 32), (uint64_t *)&v63);
    outlined consume of DynamicPropertyCache.Fields.Layout();
  }
  return (uint64_t)v63;
}

uint64_t closure #2 in changedBodyProperties<A>(of:)(Swift::Int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  Swift::String_optional v6;
  void *object;
  _QWORD *v8;
  uint64_t result;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  Swift::String v14;
  _QWORD *v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;

  v6 = DynamicPropertyCache.Fields.name(at:)(a1);
  if (v6.value._object)
  {
    object = v6.value._object;
    v8 = (_QWORD *)*a5;
    result = swift_isUniquelyReferenced_nonNull_native();
    *a5 = (uint64_t)v8;
    if ((result & 1) == 0)
    {
      result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v8[2] + 1, 1, v8);
      v8 = (_QWORD *)result;
      *a5 = result;
    }
    v11 = v8[2];
    v10 = v8[3];
    if (v11 >= v10 >> 1)
    {
      result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v10 > 1), v11 + 1, 1, v8);
      v8 = (_QWORD *)result;
      *a5 = result;
    }
    v8[2] = v11 + 1;
    v12 = &v8[2 * v11];
    v12[4] = v6.value._countAndFlagsBits;
    v13 = v12 + 4;
  }
  else
  {
    v14._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v14);
    swift_bridgeObjectRelease();
    object = (void *)0xE100000000000000;
    v15 = (_QWORD *)*a5;
    result = swift_isUniquelyReferenced_nonNull_native();
    *a5 = (uint64_t)v15;
    if ((result & 1) == 0)
    {
      result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v15[2] + 1, 1, v15);
      v15 = (_QWORD *)result;
      *a5 = result;
    }
    v17 = v15[2];
    v16 = v15[3];
    if (v17 >= v16 >> 1)
    {
      result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v16 > 1), v17 + 1, 1, v15);
      v15 = (_QWORD *)result;
      *a5 = result;
    }
    v15[2] = v17 + 1;
    v18 = &v15[2 * v17];
    v18[4] = 64;
    v13 = v18 + 4;
  }
  v13[1] = object;
  return result;
}

uint64_t printChangedBodyProperties<A>(of:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  Swift::String v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  Swift::String v13;
  Swift::String v14;
  Swift::String v16;

  v2 = changedBodyProperties<A>(of:)(a1, a2);
  v3 = AGTypeID.description.getter();
  v5 = v4;
  if (*(_QWORD *)(v2 + 16))
  {
    type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Any>, MEMORY[0x24BEE4AD8] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
    v6 = swift_allocObject();
    *(_OWORD *)(v6 + 16) = xmmword_23527E860;
    v7._countAndFlagsBits = 8250;
    v7._object = (void *)0xE200000000000000;
    String.append(_:)(v7);
    v8 = v3;
    v9 = MEMORY[0x24BEE0D00];
    type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for [String], MEMORY[0x24BEE0D00], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1250]);
    lazy protocol witness table accessor for type [String] and conformance [A]();
    v10 = BidirectionalCollection<>.joined(separator:)();
    v12 = v11;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    v13._countAndFlagsBits = v10;
    v13._object = v12;
    String.append(_:)(v13);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    v14._countAndFlagsBits = 0x6465676E61686320;
    v14._object = (void *)0xE90000000000002ELL;
    String.append(_:)(v14);
    swift_bridgeObjectRelease();
    *(_QWORD *)(v6 + 56) = v9;
    *(_QWORD *)(v6 + 32) = v8;
  }
  else
  {
    swift_bridgeObjectRelease();
    type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Any>, MEMORY[0x24BEE4AD8] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
    v6 = swift_allocObject();
    *(_OWORD *)(v6 + 16) = xmmword_23527E860;
    v16._countAndFlagsBits = 0x6E6168636E75203ALL;
    v16._object = (void *)0xEC0000002E646567;
    String.append(_:)(v16);
    *(_QWORD *)(v6 + 56) = MEMORY[0x24BEE0D00];
    *(_QWORD *)(v6 + 32) = v3;
  }
  *(_QWORD *)(v6 + 40) = v5;
  print(_:separator:terminator:)();
  return swift_bridgeObjectRelease();
}

void logChangedBodyProperties<A>(of:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  uint64_t v17;
  uint64_t v18;

  v2 = changedBodyProperties<A>(of:)(a1, a2);
  v3 = AGTypeID.description.getter();
  v5 = v4;
  if (*(_QWORD *)(v2 + 16))
  {
    if (one-time initialization token for propertyChangeLog != -1)
      swift_once();
    v6 = type metadata accessor for Logger();
    __swift_project_value_buffer(v6, (uint64_t)static Log.propertyChangeLog);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v7 = Logger.logObject.getter();
    v8 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v7, v8))
    {
      v9 = swift_slowAlloc();
      v10 = swift_slowAlloc();
      v18 = v10;
      *(_DWORD *)v9 = 136446466;
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v3, v5, &v18);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v9 + 12) = 2082;
      type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for [String], MEMORY[0x24BEE0D00], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1250]);
      lazy protocol witness table accessor for type [String] and conformance [A]();
      v11 = BidirectionalCollection<>.joined(separator:)();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v11, v12, &v18);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_2349C4000, v7, v8, "%{public}s: %{public}s changed.", (uint8_t *)v9, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x23B7C9D54](v10, -1, -1);
      MEMORY[0x23B7C9D54](v9, -1, -1);

      return;
    }

    swift_bridgeObjectRelease_n();
  }
  else
  {
    swift_bridgeObjectRelease();
    if (one-time initialization token for propertyChangeLog != -1)
      swift_once();
    v13 = type metadata accessor for Logger();
    __swift_project_value_buffer(v13, (uint64_t)static Log.propertyChangeLog);
    swift_bridgeObjectRetain();
    v14 = Logger.logObject.getter();
    v15 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v14, v15))
    {
      v16 = (uint8_t *)swift_slowAlloc();
      v17 = swift_slowAlloc();
      v18 = v17;
      *(_DWORD *)v16 = 136446210;
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v3, v5, &v18);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_2349C4000, v14, v15, "%{public}s: unchanged.", v16, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x23B7C9D54](v17, -1, -1);
      MEMORY[0x23B7C9D54](v16, -1, -1);

      return;
    }

  }
  swift_bridgeObjectRelease_n();
}

uint64_t specialized static Array._adoptStorage(_:count:)(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 16) = a2;
  *(_QWORD *)(result + 24) = 2 * a2;
  return result;
}

uint64_t partial apply for closure #2 in static DynamicPropertyCache.fields(of:)(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;

  return closure #2 in static DynamicPropertyCache.fields(of:)(a1, a2, a3, *(_QWORD **)(v3 + 16));
}

uint64_t partial apply for closure #1 in static DynamicPropertyCache.fields(of:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return closure #1 in static DynamicPropertyCache.fields(of:)(a1, a2, a3, *(_QWORD ***)(v3 + 16));
}

void partial apply for closure #1 in BodyAccessor.makeBody(container:inputs:fields:)()
{
  closure #1 in BodyAccessor.makeBody(container:inputs:fields:)();
}

uint64_t _s7SwiftUI12BodyAccessorPAAE03setC0yy0C0QzyXEFySPyAFGXEfU0_TA_0()
{
  swift_getAssociatedTypeWitness();
  return AGGraphSetOutputValue();
}

uint64_t type metadata accessor for EmbeddedDynamicPropertyBox(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for EmbeddedDynamicPropertyBox);
}

void type metadata accessor for (AGDescriptionOption, Any)()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!lazy cache variable for type metadata for (AGDescriptionOption, Any))
  {
    type metadata accessor for AGDescriptionOption(255);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (AGDescriptionOption, Any));
  }
}

unint64_t type metadata accessor for BodyAccessorRule.Type()
{
  unint64_t result;

  result = lazy cache variable for type metadata for BodyAccessorRule.Type;
  if (!lazy cache variable for type metadata for BodyAccessorRule.Type)
  {
    type metadata accessor for ScrollStateRequest(255, &lazy cache variable for type metadata for BodyAccessorRule);
    result = swift_getExistentialMetatypeMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for BodyAccessorRule.Type);
  }
  return result;
}

uint64_t specialized StaticBody.description.getter()
{
  swift_getAssociatedTypeWitness();
  return _typeName(_:qualified:)();
}

void type metadata accessor for [[String : Any]]()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for [[String : Any]])
  {
    type metadata accessor for [String : Any](255, (unint64_t *)&lazy cache variable for type metadata for [String : Any]);
    v0 = type metadata accessor for Array();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for [[String : Any]]);
  }
}

unint64_t lazy protocol witness table accessor for type DynamicPropertyBehaviors and conformance DynamicPropertyBehaviors()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type DynamicPropertyBehaviors and conformance DynamicPropertyBehaviors;
  if (!lazy protocol witness table cache variable for type DynamicPropertyBehaviors and conformance DynamicPropertyBehaviors)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for DynamicPropertyBehaviors, &type metadata for DynamicPropertyBehaviors);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DynamicPropertyBehaviors and conformance DynamicPropertyBehaviors);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type DynamicPropertyBehaviors and conformance DynamicPropertyBehaviors;
  if (!lazy protocol witness table cache variable for type DynamicPropertyBehaviors and conformance DynamicPropertyBehaviors)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for DynamicPropertyBehaviors, &type metadata for DynamicPropertyBehaviors);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DynamicPropertyBehaviors and conformance DynamicPropertyBehaviors);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type DynamicPropertyBehaviors and conformance DynamicPropertyBehaviors;
  if (!lazy protocol witness table cache variable for type DynamicPropertyBehaviors and conformance DynamicPropertyBehaviors)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for DynamicPropertyBehaviors, &type metadata for DynamicPropertyBehaviors);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DynamicPropertyBehaviors and conformance DynamicPropertyBehaviors);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type DynamicPropertyBehaviors and conformance DynamicPropertyBehaviors;
  if (!lazy protocol witness table cache variable for type DynamicPropertyBehaviors and conformance DynamicPropertyBehaviors)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for DynamicPropertyBehaviors, &type metadata for DynamicPropertyBehaviors);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DynamicPropertyBehaviors and conformance DynamicPropertyBehaviors);
  }
  return result;
}

uint64_t dispatch thunk of static DynamicProperty._makeProperty<A>(in:container:fieldOffset:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return (*(uint64_t (**)(void))(a7 + 8))();
}

uint64_t dispatch thunk of static DynamicProperty._propertyBehaviors.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of DynamicProperty.update()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

ValueMetadata *type metadata accessor for DynamicPropertyBehaviors()
{
  return &type metadata for DynamicPropertyBehaviors;
}

uint64_t dispatch thunk of DynamicPropertyBox.reset()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of DynamicPropertyBox.update(property:phase:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 40))();
}

uint64_t dispatch thunk of DynamicPropertyBox.getState<A>(type:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 48))();
}

ValueMetadata *type metadata accessor for DynamicPropertyCache()
{
  return &type metadata for DynamicPropertyCache;
}

uint64_t initializeBufferWithCopyOfBuffer for DynamicPropertyCache.Fields(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  char v6;

  v4 = *a2;
  v5 = a2[1];
  v6 = *((_BYTE *)a2 + 16);
  outlined copy of DynamicPropertyCache.Fields.Layout();
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  *(_BYTE *)(a1 + 16) = v6;
  *(_DWORD *)(a1 + 20) = *((_DWORD *)a2 + 5);
  return a1;
}

uint64_t assignWithCopy for DynamicPropertyCache.Fields(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  char v6;

  v4 = *a2;
  v5 = a2[1];
  v6 = *((_BYTE *)a2 + 16);
  outlined copy of DynamicPropertyCache.Fields.Layout();
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  *(_BYTE *)(a1 + 16) = v6;
  outlined consume of DynamicPropertyCache.Fields.Layout();
  *(_DWORD *)(a1 + 20) = *((_DWORD *)a2 + 5);
  return a1;
}

uint64_t assignWithTake for DynamicPropertyCache.Fields(uint64_t a1, uint64_t a2)
{
  char v4;

  v4 = *(_BYTE *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = v4;
  outlined consume of DynamicPropertyCache.Fields.Layout();
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  return a1;
}

uint64_t getEnumTagSinglePayload for DynamicPropertyCache.Fields(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 24))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 1)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for DynamicPropertyCache.Fields(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 24) = 0;
    if (a2)
      *(_BYTE *)(result + 16) = -(char)a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for DynamicPropertyCache.Fields()
{
  return &type metadata for DynamicPropertyCache.Fields;
}

uint64_t dispatch thunk of BodyAccessor.updateBody(of:changed:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 24))();
}

uint64_t dispatch thunk of static BodyAccessorRule.container.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of static BodyAccessorRule.value<A>(as:attribute:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 16))();
}

uint64_t dispatch thunk of static BodyAccessorRule.buffer<A>(as:attribute:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 24))();
}

uint64_t dispatch thunk of static BodyAccessorRule.metaProperties<A>(as:attribute:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 32))();
}

uint64_t destroy for DynamicPropertyCache.Fields.Layout()
{
  return outlined consume of DynamicPropertyCache.Fields.Layout();
}

uint64_t initializeBufferWithCopyOfBuffer for DynamicPropertyCache.Fields.Layout(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;

  v3 = *a2;
  v4 = a2[1];
  v5 = *((_BYTE *)a2 + 16);
  outlined copy of DynamicPropertyCache.Fields.Layout();
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for DynamicPropertyCache.Fields.Layout(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;

  v3 = *a2;
  v4 = a2[1];
  v5 = *((_BYTE *)a2 + 16);
  outlined copy of DynamicPropertyCache.Fields.Layout();
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  outlined consume of DynamicPropertyCache.Fields.Layout();
  return a1;
}

uint64_t assignWithTake for DynamicPropertyCache.Fields.Layout(uint64_t a1, uint64_t a2)
{
  char v3;

  v3 = *(_BYTE *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = v3;
  outlined consume of DynamicPropertyCache.Fields.Layout();
  return a1;
}

ValueMetadata *type metadata accessor for DynamicPropertyCache.Fields.Layout()
{
  return &type metadata for DynamicPropertyCache.Fields.Layout;
}

void type metadata accessor for StaticBody()
{
  JUMPOUT(0x23B7C9B5CLL);
}

void type metadata accessor for DynamicBody()
{
  JUMPOUT(0x23B7C9B5CLL);
}

void partial apply for closure #1 in closure #1 in DynamicBody.updateValue()()
{
  closure #1 in closure #1 in DynamicBody.updateValue()();
}

ValueMetadata *type metadata accessor for MainThreadFlags()
{
  return &type metadata for MainThreadFlags;
}

uint64_t type metadata completion function for StaticBody()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t assignWithCopy for StaticBody(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 24))();
  *(_DWORD *)((*(_QWORD *)(v5 + 64) + 3 + a1) & 0xFFFFFFFFFFFFFCLL) = *(_DWORD *)((*(_QWORD *)(v5 + 64) + 3 + a2) & 0xFFFFFFFFFFFFFCLL);
  return a1;
}

uint64_t assignWithTake for StaticBody(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 40))();
  *(_DWORD *)((*(_QWORD *)(v5 + 64) + 3 + a1) & 0xFFFFFFFFFFFFFCLL) = *(_DWORD *)((*(_QWORD *)(v5 + 64) + 3 + a2) & 0xFFFFFFFFFFFFFCLL);
  return a1;
}

uint64_t getEnumTagSinglePayload for StaticBody(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 >= a2)
  {
    if (v5)
      return (*(uint64_t (**)(void))(v4 + 48))();
    return 0;
  }
  if (((((*(_QWORD *)(v4 + 64) + 3) & 0xFFFFFFFFFFFFFFFCLL) + 4) & 0xFFFFFFFC) != 0)
    v6 = 2;
  else
    v6 = a2 - v5 + 1;
  if (v6 >= 0x10000)
    v7 = 4;
  else
    v7 = 2;
  if (v6 < 0x100)
    v7 = 1;
  if (v6 >= 2)
    v8 = v7;
  else
    v8 = 0;
  return ((uint64_t (*)(void))((char *)&loc_234DB935C + 4 * byte_2352A0B90[v8]))();
}

void storeEnumTagSinglePayload for StaticBody(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  int v11;
  unsigned int v12;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  if (v7 >= a3)
  {
    v11 = 0;
    if (a2 <= v7)
      goto LABEL_14;
  }
  else
  {
    v8 = a3 - v7;
    if (((*(_DWORD *)(v6 + 64) + 3) & 0xFFFFFFFC) == 0xFFFFFFFC)
      v9 = v8 + 1;
    else
      v9 = 2;
    if (v9 >= 0x10000)
      v10 = 4;
    else
      v10 = 2;
    if (v9 < 0x100)
      v10 = 1;
    if (v9 >= 2)
      v11 = v10;
    else
      v11 = 0;
    if (a2 <= v7)
LABEL_14:
      __asm { BR              X11 }
  }
  if (((*(_DWORD *)(v6 + 64) + 3) & 0xFFFFFFFC) != 0xFFFFFFFC)
  {
    v12 = ~v7 + a2;
    bzero(a1, ((*(_QWORD *)(v6 + 64) + 3) & 0xFFFFFFFFFFFFFFFCLL) + 4);
    *a1 = v12;
  }
  __asm { BR              X10 }
}

void sub_234DB949C()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
}

void sub_234DB94A4(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x234DB94ACLL);
}

void sub_234DB94C8()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
}

void sub_234DB94D0()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
}

uint64_t sub_234DB94D8(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_WORD *)(v4 + v5) = 0;
  if (!a2)
    JUMPOUT(0x234DB94E0);
  return (*(uint64_t (**)(uint64_t))(v3 + 56))(v4);
}

ValueMetadata *type metadata accessor for AsyncThreadFlags()
{
  return &type metadata for AsyncThreadFlags;
}

uint64_t type metadata completion function for DynamicBody()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for DynamicBody(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v9;
  _DWORD *v10;
  _DWORD *v11;
  _DWORD *v12;
  _DWORD *v13;
  _OWORD *v14;
  _OWORD *v15;

  v4 = a1;
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0
    || ((((((((v6 + 3) & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL) + 11) & 0xFFFFFFFFFFFFFFF8) + 19) & 0xFFFFFFFFFFFFFFF8 | 4) > 0x18)
  {
    v9 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
    swift_retain();
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    v10 = (_DWORD *)(((unint64_t)v4 + v6 + 3) & 0xFFFFFFFFFFFFFCLL);
    v11 = (_DWORD *)(((unint64_t)a2 + v6 + 3) & 0xFFFFFFFFFFFFFCLL);
    *v10 = *v11;
    v12 = (_DWORD *)(((unint64_t)v10 + 7) & 0xFFFFFFFFFFFFFCLL);
    v13 = (_DWORD *)(((unint64_t)v11 + 7) & 0xFFFFFFFFFFFFFCLL);
    *v12 = *v13;
    v14 = (_OWORD *)(((unint64_t)v12 + 11) & 0xFFFFFFFFFFFFFFF8);
    v15 = (_OWORD *)(((unint64_t)v13 + 11) & 0xFFFFFFFFFFFFFFF8);
    *v14 = *v15;
    *(_DWORD *)(((unint64_t)v14 + 19) & 0xFFFFFFFFFFFFF8) = *(_DWORD *)(((unint64_t)v15 + 19) & 0xFFFFFFFFFFFFF8);
  }
  return v4;
}

uint64_t initializeWithCopy for DynamicBody(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _DWORD *v7;
  _DWORD *v8;
  _DWORD *v9;
  _DWORD *v10;
  _OWORD *v11;
  _OWORD *v12;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 16))();
  v6 = *(_QWORD *)(v5 + 64) + 3;
  v7 = (_DWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFFCLL);
  v8 = (_DWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFFCLL);
  *v7 = *v8;
  v9 = (_DWORD *)(((unint64_t)v7 + 7) & 0xFFFFFFFFFFFFFCLL);
  v10 = (_DWORD *)(((unint64_t)v8 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *v9 = *v10;
  v11 = (_OWORD *)(((unint64_t)v9 + 11) & 0xFFFFFFFFFFFFFFF8);
  v12 = (_OWORD *)(((unint64_t)v10 + 11) & 0xFFFFFFFFFFFFFFF8);
  *v11 = *v12;
  *(_DWORD *)(((unint64_t)v11 + 19) & 0xFFFFFFFFFFFFF8) = *(_DWORD *)(((unint64_t)v12 + 19) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t assignWithCopy for DynamicBody(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _DWORD *v8;
  _DWORD *v9;
  _DWORD *v10;
  unint64_t v11;
  unint64_t v12;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 24))();
  v6 = *(_QWORD *)(v5 + 64) + 3;
  v7 = v6 + a1;
  v8 = (_DWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFFCLL);
  v7 &= 0xFFFFFFFFFFFFFFFCLL;
  *(_DWORD *)v7 = *v8;
  v9 = (_DWORD *)(((unint64_t)v8 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  v10 = (_DWORD *)((v7 + 7) & 0xFFFFFFFFFFFFFCLL);
  *v10 = *v9;
  v11 = ((unint64_t)v10 + 11) & 0xFFFFFFFFFFFFFFF8;
  v12 = ((unint64_t)v9 + 11) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v11 = *(_QWORD *)v12;
  *(_DWORD *)(v11 + 8) = *(_DWORD *)(v12 + 8);
  *(_DWORD *)(v11 + 12) = *(_DWORD *)(v12 + 12);
  *(_DWORD *)((v11 + 19) & 0xFFFFFFFFFFFFF8) = *(_DWORD *)((v12 + 19) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t initializeWithTake for DynamicBody(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _DWORD *v7;
  _DWORD *v8;
  _DWORD *v9;
  _DWORD *v10;
  _OWORD *v11;
  _OWORD *v12;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 32))();
  v6 = *(_QWORD *)(v5 + 64) + 3;
  v7 = (_DWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFFCLL);
  v8 = (_DWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFFCLL);
  *v7 = *v8;
  v9 = (_DWORD *)(((unint64_t)v7 + 7) & 0xFFFFFFFFFFFFFCLL);
  v10 = (_DWORD *)(((unint64_t)v8 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *v9 = *v10;
  v11 = (_OWORD *)(((unint64_t)v9 + 11) & 0xFFFFFFFFFFFFFFF8);
  v12 = (_OWORD *)(((unint64_t)v10 + 11) & 0xFFFFFFFFFFFFFFF8);
  *v11 = *v12;
  *(_DWORD *)(((unint64_t)v11 + 19) & 0xFFFFFFFFFFFFF8) = *(_DWORD *)(((unint64_t)v12 + 19) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t assignWithTake for DynamicBody(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _DWORD *v8;
  _DWORD *v9;
  _DWORD *v10;
  unint64_t v11;
  unint64_t v12;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 40))();
  v6 = *(_QWORD *)(v5 + 64) + 3;
  v7 = v6 + a1;
  v8 = (_DWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFFCLL);
  v7 &= 0xFFFFFFFFFFFFFFFCLL;
  *(_DWORD *)v7 = *v8;
  v9 = (_DWORD *)(((unint64_t)v8 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  v10 = (_DWORD *)((v7 + 7) & 0xFFFFFFFFFFFFFCLL);
  *v10 = *v9;
  v11 = ((unint64_t)v10 + 11) & 0xFFFFFFFFFFFFFFF8;
  v12 = ((unint64_t)v9 + 11) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v11 = *(_QWORD *)v12;
  *(_DWORD *)(v11 + 8) = *(_DWORD *)(v12 + 8);
  *(_DWORD *)(v11 + 12) = *(_DWORD *)(v12 + 12);
  *(_DWORD *)((v11 + 19) & 0xFFFFFFFFFFFFF8) = *(_DWORD *)((v12 + 19) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t getEnumTagSinglePayload for DynamicBody(_DWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 < a2
    && *((_BYTE *)a1
       + ((((((((*(_QWORD *)(v4 + 64) + 3) & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL) + 11) & 0xFFFFFFFFFFFFFFF8)
         + 19) & 0xFFFFFFFFFFFFFFF8 | 4)))
  {
    return v5 + *a1 + 1;
  }
  if (v5)
    return (*(uint64_t (**)(void))(v4 + 48))();
  else
    return 0;
}

void storeEnumTagSinglePayload for DynamicBody(_BYTE *a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  int v9;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v7 = *(unsigned int *)(v6 + 84);
  v8 = (((((((*(_QWORD *)(v6 + 64) + 3) & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL) + 11) & 0xFFFFFFFFFFFFFFF8)
      + 19) & 0xFFFFFFFFFFFFFFF8 | 4;
  if (v7 >= a2)
  {
    if (v7 < a3)
      a1[v8] = 0;
    if ((_DWORD)a2)
      (*(void (**)(_BYTE *, uint64_t, uint64_t))(v6 + 56))(a1, a2, v7);
  }
  else
  {
    v9 = ~(_DWORD)v7 + a2;
    bzero(a1, v8);
    *(_DWORD *)a1 = v9;
    if (v7 < a3)
      a1[v8] = 1;
  }
}

ValueMetadata *type metadata accessor for DynamicPropertyCache.TaggedFields()
{
  return &type metadata for DynamicPropertyCache.TaggedFields;
}

ValueMetadata *type metadata accessor for DynamicPropertyCache.Field()
{
  return &type metadata for DynamicPropertyCache.Field;
}

void base witness table accessor for _AttributeBody in DynamicBody<A, B>()
{
  JUMPOUT(0x23B7C9C04);
}

void base witness table accessor for _AttributeBody in StaticBody<A, B>()
{
  JUMPOUT(0x23B7C9C04);
}

void type metadata accessor for (String, AGAttribute)()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!lazy cache variable for type metadata for (String, AGAttribute))
  {
    type metadata accessor for AGAttribute(255);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (String, AGAttribute));
  }
}

uint64_t static Update.enqueueAction(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;
  _QWORD *v9;

  specialized static Update.begin()();
  v4 = swift_allocObject();
  *(_QWORD *)(v4 + 16) = a1;
  *(_QWORD *)(v4 + 24) = a2;
  v5 = one-time initialization token for actions;
  swift_retain();
  if (v5 != -1)
    swift_once();
  v6 = static Update.actions;
  swift_bridgeObjectRetain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v6[2] + 1, 1, v6);
  v8 = v6[2];
  v7 = v6[3];
  if (v8 >= v7 >> 1)
    v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v7 > 1), v8 + 1, 1, v6);
  v6[2] = v8 + 1;
  v9 = &v6[2 * v8];
  v9[4] = partial apply for thunk for @callee_guaranteed (@guaranteed RBDisplayList) -> ();
  v9[5] = v4;
  static Update.actions = v6;
  swift_bridgeObjectRelease();
  return static Update.end()();
}

uint64_t static Update.threadIsUpdating.getter()
{
  uint64_t result;

  if (one-time initialization token for _lock != -1)
    swift_once();
  LODWORD(result) = _MovableLockIsOwner(static Update._lock);
  if (static Update.dispatchDepth < static Update.depth)
    return result;
  else
    return 0;
}

uint64_t static Update.ensure<A>(_:)(void (*a1)(uint64_t))
{
  uint64_t v2;

  if (one-time initialization token for _lock != -1)
    swift_once();
  v2 = static Update._lock;
  _MovableLockLock(static Update._lock);
  closure #1 in static Update.ensure<A>(_:)(a1);
  return _MovableLockUnlock(v2);
}

uint64_t static Update.locked<A>(_:)(void (*a1)(uint64_t))
{
  uint64_t v2;
  uint64_t v3;

  if (one-time initialization token for _lock != -1)
    swift_once();
  v2 = static Update._lock;
  v3 = _MovableLockLock(static Update._lock);
  a1(v3);
  return _MovableLockUnlock(v2);
}

BOOL static Update.isActive.getter()
{
  return static Update.depth != 0;
}

pthread_mutex_t *one-time initialization function for _lock()
{
  pthread_mutex_t *result;

  result = _MovableLockCreate();
  static Update._lock = (uint64_t)result;
  return result;
}

uint64_t static Update.lock()()
{
  return static Update.lock()(_MovableLockLock);
}

uint64_t static Update.unlock()()
{
  return static Update.lock()(_MovableLockUnlock);
}

BOOL static Update.isOwner.getter()
{
  if (one-time initialization token for _lock != -1)
    swift_once();
  return _MovableLockIsOwner(static Update._lock);
}

uint64_t static Update.wait()()
{
  return static Update.lock()(_MovableLockWait);
}

uint64_t static Update.broadcast()()
{
  return static Update.lock()(_MovableLockBroadcast);
}

uint64_t static Update.lock()(uint64_t (*a1)(uint64_t))
{
  if (one-time initialization token for _lock == -1)
    return a1(static Update._lock);
  swift_once();
  return a1(static Update._lock);
}

void static Update.assertIsLocked()()
{
  if (one-time initialization token for lockAssertionsAreEnabled != -1)
    swift_once();
  if (lockAssertionsAreEnabled)
  {
    if (one-time initialization token for _lock != -1)
      swift_once();
    if (!_MovableLockIsOwner(static Update._lock))
    {
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
    }
  }
}

void one-time initialization function for actions()
{
  static Update.actions = (_UNKNOWN *)MEMORY[0x24BEE4AF8];
}

uint64_t static Update.end()()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  unsigned __int8 v6;
  uint64_t v7;
  id v8;
  uint64_t (*v9)(uint64_t, uint64_t);
  uint64_t inited;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(char *, char *, uint64_t);
  uint64_t v15;
  char v16;
  unint64_t v17;
  _OWORD *v18;
  _OWORD *v19;
  _OWORD *v20;
  __int128 v21;
  uint64_t v22;
  uint64_t i;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  unint64_t v34;
  unint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  unint64_t v42;
  char *v43;
  unint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  void (*v49)(uint64_t);
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void (*v54)(char *, uint64_t);
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  __int128 v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _OWORD *v66;
  unsigned int v67;
  _QWORD v68[3];
  uint64_t v69;
  uint64_t v70;
  _QWORD v71[5];
  _QWORD *v72;

  v0 = type metadata accessor for OSSignpostID();
  v64 = *(_QWORD *)(v0 - 8);
  v65 = v0;
  MEMORY[0x24BDAC7A8](v0);
  v2 = (char *)&v56 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v56 - v4;
  if (static Update.depth != 1)
    goto LABEL_48;
  static Update.dispatchActions()();
  v6 = static os_signpost_type_t.end.getter();
  if (one-time initialization token for traceHost != -1)
    swift_once();
  static os_signpost_type_t.event.getter();
  if (!kdebug_is_enabled())
    goto LABEL_48;
  v7 = one-time initialization token for _signpostLog;
  swift_unknownObjectRetain();
  if (v7 != -1)
    swift_once();
  v8 = (id)_signpostLog;
  OSSignpostID.init(log:object:)();
  v9 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598];
  type metadata accessor for [(_:)](0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<CVarArg>, (uint64_t (*)(uint64_t))type metadata accessor for CVarArg, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
  inited = swift_initStackObject();
  *(_QWORD *)(inited + 32) = 0;
  v59 = inited + 32;
  v11 = MEMORY[0x24BEE17F0];
  *(_QWORD *)(inited + 56) = MEMORY[0x24BEE1768];
  *(_QWORD *)(inited + 64) = v11;
  *(_QWORD *)(inited + 72) = static Update.traceHost;
  v58 = inited + 72;
  v12 = MEMORY[0x24BEE1E88];
  v13 = MEMORY[0x24BEE1ED8];
  *(_OWORD *)(inited + 16) = xmmword_2352828C0;
  *(_QWORD *)(inited + 96) = v12;
  *(_QWORD *)(inited + 104) = v13;
  v60 = inited;
  v67 = v6 | 0x14110024;
  v14 = *(void (**)(char *, char *, uint64_t))(v64 + 16);
  v57 = v5;
  v14(v2, v5, v65);
  type metadata accessor for [(_:)](0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<CVarArg?>, (uint64_t (*)(uint64_t))type metadata accessor for CVarArg?, v9);
  v63 = v15;
  v16 = 0;
  v17 = 0;
  v62 = xmmword_235283260;
  v61 = v2;
  while (2)
  {
    v18 = (_OWORD *)swift_initStackObject();
    v19 = v18;
    v18[1] = v62;
    v20 = v18 + 2;
    if ((v16 & 1) != 0)
    {
      v21 = 0uLL;
      v18[5] = 0u;
      v18[6] = 0u;
      v18[3] = 0u;
      v18[4] = 0u;
      *v20 = 0u;
    }
    else
    {
      v22 = v60;
      if (v17 >= *(_QWORD *)(v60 + 16))
      {
LABEL_55:
        __break(1u);
        goto LABEL_56;
      }
      outlined init with copy of AnyTrackedValue(v59 + 40 * v17, (uint64_t)v20);
      if (*(_QWORD *)(v22 + 16) < 2uLL)
      {
LABEL_56:
        __break(1u);
LABEL_57:
        __break(1u);
        goto LABEL_58;
      }
      outlined init with copy of AnyTrackedValue(v58, (uint64_t)v19 + 72);
      v21 = 0uLL;
    }
    v19[7] = v21;
    *((_QWORD *)v19 + 18) = 0;
    v66 = v19 + 7;
    v19[8] = v21;
    v72 = (_QWORD *)MEMORY[0x24BEE4AF8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 3, 0);
    for (i = 32; i != 152; i += 40)
    {
      outlined init with copy of CVarArg?((uint64_t)v19 + i, (uint64_t)v71);
      outlined init with copy of CVarArg?((uint64_t)v71, (uint64_t)v68);
      v24 = v69;
      if (v69)
      {
        v25 = v70;
        __swift_project_boxed_opaque_existential_1(v68, v69);
        v26 = CVarArg.kdebugValue(_:)(v67, v24, v25);
        v28 = v27;
        v30 = v29;
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v68);
        if (v28)
        {
          v31 = swift_allocObject();
          *(_QWORD *)(v31 + 16) = v28;
          *(_QWORD *)(v31 + 24) = v30;
          v32 = (uint64_t)thunk for @callee_guaranteed (@guaranteed [NSAttributedStringKey : Any], @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ()partial apply;
        }
        else
        {
          v32 = 0;
          v31 = 0;
        }
      }
      else
      {
        outlined destroy of CVarArg?((uint64_t)v68);
        v26 = 0;
        v31 = 0;
        v32 = 1;
      }
      outlined destroy of CVarArg?((uint64_t)v71);
      v33 = v72;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v33[2] + 1, 1);
        v33 = v72;
      }
      v35 = v33[2];
      v34 = v33[3];
      if (v35 >= v34 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v34 > 1, v35 + 1, 1);
        v33 = v72;
      }
      v33[2] = v35 + 1;
      v36 = &v33[3 * v35];
      v36[4] = v26;
      v36[5] = v32;
      v36[6] = v31;
    }
    v71[0] = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v35 + 1, 0);
    v37 = v71[0];
    v38 = *(_QWORD *)(v71[0] + 16);
    v39 = v35 + 1;
    v40 = v33 + 5;
    do
    {
      if (*v40 == 1)
        v41 = 0;
      else
        v41 = *(v40 - 1);
      v71[0] = v37;
      v42 = *(_QWORD *)(v37 + 24);
      if (v38 >= v42 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v42 > 1, v38 + 1, 1);
        v37 = v71[0];
      }
      v40 += 3;
      *(_QWORD *)(v37 + 16) = v38 + 1;
      *(_QWORD *)(v37 + 8 * v38++ + 32) = v41;
      --v39;
    }
    while (v39);
    v43 = v61;
    OSSignpostID.rawValue.getter();
    v44 = *(_QWORD *)(v37 + 16);
    if (!v44)
    {
      __break(1u);
      goto LABEL_52;
    }
    if (v44 == 1)
    {
LABEL_52:
      __break(1u);
      goto LABEL_53;
    }
    if (v44 < 3)
    {
LABEL_53:
      __break(1u);
LABEL_54:
      __break(1u);
      goto LABEL_55;
    }
    kdebug_trace();
    swift_bridgeObjectRelease();
    v45 = v33[2];
    if (!v45)
      goto LABEL_42;
    swift_retain();
    v46 = v33 + 6;
    do
    {
      v48 = *(v46 - 2);
      v49 = (void (*)(uint64_t))*(v46 - 1);
      if (!v49)
        goto LABEL_36;
      if (v49 != (void (*)(uint64_t))1)
      {
        v47 = outlined copy of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed @escaping @callee_guaranteed (@unowned Bool) -> ()) -> ())?(*(v46 - 1));
        v49(v47);
LABEL_36:
        _ss6UInt64V3arg_xRi_zRi0_zlyytIsegr_Sg10destructortSgWOe(v48, (uint64_t)v49);
      }
      v46 += 3;
      --v45;
    }
    while (v45);
    swift_release();
LABEL_42:
    swift_release();
    if (*((_QWORD *)v19 + 2) < 3uLL)
      goto LABEL_54;
    outlined init with copy of CVarArg?((uint64_t)v66, (uint64_t)v71);
    swift_bridgeObjectRelease();
    v50 = v71[3];
    outlined destroy of CVarArg?((uint64_t)v71);
    if (v50)
    {
      if (one-time initialization token for continuation != -1)
        swift_once();
      v51 = v65;
      v52 = __swift_project_value_buffer(v65, (uint64_t)static OSSignpostID.continuation);
      (*(void (**)(char *, uint64_t, uint64_t))(v64 + 24))(v43, v52, v51);
      v16 = 1;
      v17 = 2;
      continue;
    }
    break;
  }
  swift_bridgeObjectRelease();
  v53 = v65;
  v54 = *(void (**)(char *, uint64_t))(v64 + 8);
  v54(v57, v65);
  v54(v43, v53);
LABEL_48:
  if (__OFSUB__(static Update.depth, 1))
    goto LABEL_57;
  --static Update.depth;
  if (one-time initialization token for _lock != -1)
LABEL_58:
    swift_once();
  return _MovableLockUnlock(static Update._lock);
}

void static Update.dispatchActions()()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  void *v5;
  id v6;
  uint64_t v7;
  id v8;
  Class isa;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  void (*v19)(uint64_t);
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  void (*v27)(uint64_t);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  __int128 v33;
  char *v34;
  _QWORD aBlock[6];

  v0 = type metadata accessor for OSSignpostID();
  v30 = *(_QWORD *)(v0 - 8);
  v31 = v0;
  MEMORY[0x24BDAC7A8](v0);
  v34 = (char *)&v29 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for lockAssertionsAreEnabled != -1)
    swift_once();
  if (lockAssertionsAreEnabled)
  {
    if (one-time initialization token for _lock != -1)
      swift_once();
    if (!_MovableLockIsOwner(static Update._lock))
      goto LABEL_41;
    if (lockAssertionsAreEnabled)
    {
      if (one-time initialization token for _lock != -1)
        swift_once();
      if (!_MovableLockIsOwner(static Update._lock))
      {
LABEL_41:
        while (1)
        {
LABEL_37:
          _assertionFailure(_:_:file:line:flags:)();
          __break(1u);
        }
      }
    }
  }
  if (static Update.depth == 1)
  {
    if (one-time initialization token for actions != -1)
      swift_once();
    v2 = &unk_254270000;
    v3 = static Update.actions;
    if (*((_QWORD *)static Update.actions + 2))
    {
      v4 = (void *)objc_opt_self();
      v5 = (void *)*MEMORY[0x24BDBCB80];
      v33 = xmmword_23527E860;
      v32 = v4;
      do
      {
        v2[227] = MEMORY[0x24BEE4AF8];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        v11 = swift_allocObject();
        *(_QWORD *)(v11 + 16) = v3;
        swift_bridgeObjectRetain();
        if (objc_msgSend(v4, sel_isMainThread))
        {
          if (one-time initialization token for traceHost != -1)
            swift_once();
          static os_signpost_type_t.event.getter();
          if ((kdebug_is_enabled() & 1) != 0)
          {
            v12 = one-time initialization token for _signpostLog;
            swift_unknownObjectRetain();
            if (v12 != -1)
              swift_once();
            v13 = (id)_signpostLog;
            OSSignpostID.init(log:object:)();
            static os_signpost_type_t.begin.getter();
            OSSignpostID.rawValue.getter();
            kdebug_trace();
            v14 = specialized static Update.begin()();
            v15 = static Update.dispatchDepth;
            v16 = static Update.depth;
            static Update.dispatchDepth = static Update.depth;
            v17 = v3[2];
            if (v17)
            {
              swift_bridgeObjectRetain();
              v18 = (char *)(v3 + 5);
              do
              {
                v19 = (void (*)(uint64_t))*((_QWORD *)v18 - 1);
                v20 = swift_retain();
                v19(v20);
                swift_release();
                if (static Update.depth != v16)
                  goto LABEL_37;
                v18 += 16;
                --v17;
              }
              while (v17);
              v14 = swift_bridgeObjectRelease();
              v2 = &unk_254270000;
            }
            static Update.dispatchDepth = v15;
            static Update.end()(v14);
            static os_signpost_type_t.end.getter();
            v21 = v34;
            OSSignpostID.rawValue.getter();
            kdebug_trace();
            (*(void (**)(char *, uint64_t))(v30 + 8))(v21, v31);
            swift_bridgeObjectRelease();
            swift_release();
            v4 = v32;
          }
          else
          {
            v22 = specialized static Update.begin()();
            v23 = static Update.dispatchDepth;
            v24 = static Update.depth;
            static Update.dispatchDepth = static Update.depth;
            v25 = v3[2];
            if (v25)
            {
              swift_bridgeObjectRetain();
              v26 = (char *)(v3 + 5);
              do
              {
                v27 = (void (*)(uint64_t))*((_QWORD *)v26 - 1);
                v28 = swift_retain();
                v27(v28);
                swift_release();
                if (static Update.depth != v24)
                  goto LABEL_37;
                v26 += 16;
                --v25;
              }
              while (v25);
              v22 = swift_bridgeObjectRelease();
              v2 = (_QWORD *)&unk_254270000;
              v4 = v32;
            }
            static Update.dispatchDepth = v23;
            static Update.end()(v22);
            swift_bridgeObjectRelease();
            swift_release();
          }
        }
        else
        {
          v6 = objc_msgSend((id)objc_opt_self(), sel_mainRunLoop);
          type metadata accessor for [(_:)](0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<NSRunLoopMode>, (uint64_t (*)(uint64_t))type metadata accessor for NSRunLoopMode, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
          v7 = swift_allocObject();
          *(_OWORD *)(v7 + 16) = v33;
          *(_QWORD *)(v7 + 32) = v5;
          type metadata accessor for NSRunLoopMode(0);
          v8 = v5;
          isa = Array._bridgeToObjectiveC()().super.isa;
          swift_bridgeObjectRelease();
          aBlock[4] = partial apply for closure #1 in static Update.dispatchActions();
          aBlock[5] = v11;
          aBlock[0] = MEMORY[0x24BDAC760];
          aBlock[1] = 1107296256;
          aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
          aBlock[3] = &block_descriptor_15;
          v10 = _Block_copy(aBlock);
          swift_retain();
          swift_release();
          objc_msgSend(v6, sel_performInModes_block_, isa, v10);
          _Block_release(v10);
          swift_bridgeObjectRelease();
          swift_release();

        }
        v3 = (_QWORD *)v2[227];
      }
      while (v3[2]);
    }
  }
}

uint64_t @objc closure #1 in closure #1 in closure #1 in static Update.syncMain(_:)()
{
  swift_retain();
  AGGraphWithUpdate();
  return swift_release();
}

uint64_t closure #1 in static Update.ensure<A>(_:)(void (*a1)(uint64_t))
{
  uint64_t v2;

  v2 = specialized static Update.begin()();
  a1(v2);
  return static Update.end()();
}

uint64_t static Update.canDispatch.getter()
{
  uint64_t result;

  if (one-time initialization token for lockAssertionsAreEnabled != -1)
    swift_once();
  if (!lockAssertionsAreEnabled)
    goto LABEL_7;
  if (one-time initialization token for _lock != -1)
    swift_once();
  if (!_MovableLockIsOwner(static Update._lock))
  {
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
LABEL_7:
    if (static Update.depth == 1)
    {
      if (one-time initialization token for actions != -1)
        swift_once();
      return *((_QWORD *)static Update.actions + 2) != 0;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t closure #1 in static Update.dispatchActions()(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t);
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v2 = type metadata accessor for OSSignpostID();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for traceHost != -1)
    swift_once();
  static os_signpost_type_t.event.getter();
  if ((kdebug_is_enabled() & 1) != 0)
  {
    v24 = v3;
    v6 = one-time initialization token for _signpostLog;
    swift_unknownObjectRetain();
    if (v6 != -1)
      swift_once();
    v7 = (id)_signpostLog;
    OSSignpostID.init(log:object:)();
    static os_signpost_type_t.begin.getter();
    OSSignpostID.rawValue.getter();
    kdebug_trace();
    v8 = specialized static Update.begin()();
    v9 = static Update.dispatchDepth;
    v10 = static Update.depth;
    static Update.dispatchDepth = static Update.depth;
    v11 = *(_QWORD *)(a1 + 16);
    if (!v11)
    {
LABEL_11:
      static Update.dispatchDepth = v9;
      static Update.end()(v8);
      static os_signpost_type_t.end.getter();
      OSSignpostID.rawValue.getter();
      kdebug_trace();
      return (*(uint64_t (**)(char *, uint64_t))(v24 + 8))(v5, v2);
    }
    v23 = v2;
    swift_bridgeObjectRetain();
    v12 = a1 + 40;
    while (1)
    {
      v13 = *(void (**)(uint64_t))(v12 - 8);
      v14 = swift_retain();
      v13(v14);
      swift_release();
      if (static Update.depth != v10)
        break;
      v12 += 16;
      if (!--v11)
      {
        v8 = swift_bridgeObjectRelease();
        v2 = v23;
        goto LABEL_11;
      }
    }
  }
  else
  {
    v16 = specialized static Update.begin()();
    v17 = static Update.dispatchDepth;
    v18 = static Update.depth;
    static Update.dispatchDepth = static Update.depth;
    v19 = *(_QWORD *)(a1 + 16);
    if (!v19)
    {
LABEL_17:
      static Update.dispatchDepth = v17;
      return static Update.end()(v16);
    }
    swift_bridgeObjectRetain();
    v20 = a1 + 40;
    while (1)
    {
      v21 = *(void (**)(uint64_t))(v20 - 8);
      v22 = swift_retain();
      v21(v22);
      swift_release();
      if (static Update.depth != v18)
        break;
      v20 += 16;
      if (!--v19)
      {
        v16 = swift_bridgeObjectRelease();
        goto LABEL_17;
      }
    }
  }
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t static Update.dispatchImmediately<A>(_:)(void (*a1)(uint64_t))
{
  uint64_t v2;
  uint64_t v3;

  v2 = specialized static Update.begin()();
  v3 = static Update.dispatchDepth;
  static Update.dispatchDepth = static Update.depth;
  a1(v2);
  static Update.dispatchDepth = v3;
  return static Update.end()();
}

uint64_t one-time initialization function for traceHost()
{
  uint64_t result;

  type metadata accessor for Update.TraceHost();
  result = swift_allocObject();
  static Update.traceHost = result;
  return result;
}

const char *one-time initialization function for lockAssertionsAreEnabled()
{
  const char *result;
  Swift::Bool v1;

  result = getenv("SWIFTUI_ASSERT_LOCKS");
  if (result)
  {
    result = (const char *)atoi(result);
    v1 = (_DWORD)result != 0;
  }
  else
  {
    v1 = 0;
  }
  lockAssertionsAreEnabled = v1;
  return result;
}

uint64_t specialized static Update.begin()()
{
  char v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t result;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  id v12;
  uint64_t (*v13)(uint64_t, uint64_t);
  uint64_t inited;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(char *, uint64_t, uint64_t);
  uint64_t v23;
  uint64_t v24;
  void (*v25)(char *, uint64_t);
  _QWORD v26[2];
  char *v27;
  uint64_t v28;
  __int128 v29;
  _BYTE v30[24];
  uint64_t v31;

  v1 = type metadata accessor for OSSignpostID();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x24BDAC7A8](v1);
  v4 = (char *)v26 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)v26 - v6;
  if (one-time initialization token for _lock != -1)
    swift_once();
  result = _MovableLockLock(static Update._lock);
  v9 = static Update.depth + 1;
  if (__OFADD__(static Update.depth, 1))
  {
    __break(1u);
LABEL_21:
    swift_once();
    goto LABEL_6;
  }
  ++static Update.depth;
  if (v9 != 1)
    return result;
  v0 = static os_signpost_type_t.begin.getter();
  if (one-time initialization token for traceHost != -1)
    goto LABEL_21;
LABEL_6:
  v10 = &unk_254287000;
  static os_signpost_type_t.event.getter();
  result = kdebug_is_enabled();
  if (!(_DWORD)result)
    return result;
  v11 = one-time initialization token for _signpostLog;
  swift_unknownObjectRetain();
  if (v11 != -1)
    swift_once();
  v12 = (id)_signpostLog;
  OSSignpostID.init(log:object:)();
  v13 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598];
  type metadata accessor for [(_:)](0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<CVarArg>, (uint64_t (*)(uint64_t))type metadata accessor for CVarArg, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
  inited = swift_initStackObject();
  *(_QWORD *)(inited + 32) = 0;
  *(_OWORD *)(inited + 16) = xmmword_2352828C0;
  v15 = MEMORY[0x24BEE1768];
  v16 = MEMORY[0x24BEE17F0];
  *(_QWORD *)(inited + 72) = static Update.traceHost;
  v17 = MEMORY[0x24BEE1E88];
  *(_QWORD *)(inited + 56) = v15;
  *(_QWORD *)(inited + 64) = v16;
  v18 = MEMORY[0x24BEE1ED8];
  *(_QWORD *)(inited + 96) = v17;
  *(_QWORD *)(inited + 104) = v18;
  v27 = v7;
  v28 = v2;
  (*(void (**)(char *))(v2 + 16))(v4);
  type metadata accessor for [(_:)](0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<CVarArg?>, (uint64_t (*)(uint64_t))type metadata accessor for CVarArg?, v13);
  v19 = swift_initStackObject();
  v29 = xmmword_235283260;
  *(_OWORD *)(v19 + 16) = xmmword_235283260;
  if (!*(_QWORD *)(inited + 16))
  {
    __break(1u);
    goto LABEL_23;
  }
  v20 = v19;
  outlined init with copy of AnyTrackedValue(inited + 32, v19 + 32);
  if (*(_QWORD *)(inited + 16) < 2uLL)
  {
LABEL_23:
    __break(1u);
LABEL_24:
    swift_once();
LABEL_13:
    v21 = __swift_project_value_buffer(v1, (uint64_t)static OSSignpostID.continuation);
    v22 = *(void (**)(char *, uint64_t, uint64_t))(inited + 24);
    while (1)
    {
      v22(v4, v21, v1);
      v23 = swift_initStackObject();
      *(_OWORD *)(v23 + 16) = v29;
      *(_OWORD *)(v23 + 32) = 0u;
      *(_OWORD *)(v23 + 48) = 0u;
      *(_OWORD *)(v23 + 64) = 0u;
      *(_OWORD *)(v23 + 80) = 0u;
      *(_OWORD *)(v23 + 96) = 0u;
      *(_OWORD *)(v23 + 128) = 0u;
      *(_QWORD *)(v23 + 144) = 0;
      *(_OWORD *)(v23 + 112) = 0u;
      v24 = v23 + 112;
      specialized withKDebugValues(_:_:closure:)(v0, v23, v0, (uint64_t)v4);
      outlined init with copy of CVarArg?(v24, (uint64_t)v30);
      swift_bridgeObjectRelease();
      if (!v31)
        break;
      outlined destroy of CVarArg?((uint64_t)v30);
      if (v10[291] != -1)
        swift_once();
      v21 = __swift_project_value_buffer(v1, (uint64_t)static OSSignpostID.continuation);
    }
    goto LABEL_18;
  }
  v26[1] = inited;
  v0 |= 0x24u;
  outlined init with copy of AnyTrackedValue(inited + 72, v20 + 72);
  *(_OWORD *)(v20 + 128) = 0u;
  *(_QWORD *)(v20 + 144) = 0;
  *(_OWORD *)(v20 + 112) = 0u;
  specialized withKDebugValues(_:_:closure:)(v0, v20, v0, (uint64_t)v4);
  outlined init with copy of CVarArg?(v20 + 112, (uint64_t)v30);
  swift_bridgeObjectRelease();
  if (v31)
  {
    outlined destroy of CVarArg?((uint64_t)v30);
    v10 = &unk_2561AC000;
    inited = v28;
    if (one-time initialization token for continuation == -1)
      goto LABEL_13;
    goto LABEL_24;
  }
LABEL_18:
  outlined destroy of CVarArg?((uint64_t)v30);
  swift_bridgeObjectRelease();
  v25 = *(void (**)(char *, uint64_t))(v28 + 8);
  v25(v27, v1);
  return ((uint64_t (*)(char *, uint64_t))v25)(v4, v1);
}

uint64_t sub_234DBB4FC()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t specialized static Update.syncMain(_:)(uint64_t (*a1)(void), uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  char isEscapingClosureAtFileLocation;
  _QWORD v8[2];
  int CurrentAttribute;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  if ((objc_msgSend((id)objc_opt_self(), sel_isMainThread) & 1) != 0)
    return a1();
  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = a1;
  *(_QWORD *)(v5 + 24) = a2;
  v8[0] = partial apply for thunk for @escaping @callee_guaranteed () -> ();
  v8[1] = v5;
  CurrentAttribute = AGGraphGetCurrentAttribute();
  v6 = one-time initialization token for _lock;
  swift_retain();
  if (v6 != -1)
    swift_once();
  _MovableLockSyncMain(static Update._lock, (uint64_t)v8, (void (*)(uint64_t))@objc closure #1 in closure #1 in closure #1 in static Update.syncMain(_:));
  swift_release();
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  result = swift_release();
  if ((isEscapingClosureAtFileLocation & 1) != 0)
    __break(1u);
  return result;
}

uint64_t sub_234DBB654()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in static Update.dispatchActions()()
{
  uint64_t v0;

  return closure #1 in static Update.dispatchActions()(*(_QWORD *)(v0 + 16));
}

uint64_t block_copy_helper_15(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_15()
{
  return swift_release();
}

ValueMetadata *type metadata accessor for Update()
{
  return &type metadata for Update;
}

uint64_t type metadata accessor for Update.TraceHost()
{
  return objc_opt_self();
}

uint64_t sub_234DBB6C8()
{
  return swift_deallocObject();
}

void DistanceGesture.StateType.init()(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 1;
  *(_QWORD *)(a1 + 24) = 0;
}

void protocol witness for GestureStateProtocol.init() in conformance DistanceGesture.StateType(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 1;
  *(_QWORD *)(a1 + 24) = 0;
}

double DistanceGesture.minimumDistance.getter()
{
  uint64_t v0;

  return *(double *)v0;
}

void DistanceGesture.minimumDistance.setter(double a1)
{
  double *v1;

  *v1 = a1;
}

uint64_t (*DistanceGesture.minimumDistance.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

double DistanceGesture.maximumDistance.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 8);
}

void DistanceGesture.maximumDistance.setter(double a1)
{
  uint64_t v1;

  *(double *)(v1 + 8) = a1;
}

uint64_t (*DistanceGesture.maximumDistance.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

void DistanceGesture.init(minimumDistance:maximumDistance:)(double *a1@<X8>, double a2@<D0>, double a3@<D1>)
{
  *a1 = a2;
  a1[1] = a3;
}

uint64_t DistanceGesture.body.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  v3 = *v1;
  v4 = v1[1];
  result = swift_allocObject();
  *(_QWORD *)(result + 16) = v4;
  *(_QWORD *)(result + 24) = v3;
  *(_BYTE *)a1 = 0;
  *(_QWORD *)(a1 + 8) = partial apply for closure #1 in DistanceGesture.body.getter;
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

uint64_t closure #1 in DistanceGesture.body.getter@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, double a4@<D0>, double a5@<D1>)
{
  uint64_t v6;
  float64x2_t v7;
  int v8;
  double v9;
  double v10;
  float64x2_t v11;
  double v12;
  __int16 v13;

  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(float64x2_t *)(a2 + 48);
  v8 = *(unsigned __int8 *)(a2 + 72);
  if ((v8 - 1) >= 2)
  {
    if (*(_BYTE *)(a2 + 72))
      goto LABEL_19;
    if (v6 == 1)
    {
      result = outlined consume of GesturePhase<SpatialEvent>(*(_QWORD *)a2, *(_QWORD *)(a2 + 8), 1, *(_QWORD *)(a2 + 24), *(_QWORD *)(a2 + 32), *(_QWORD *)(a2 + 40), *(uint64_t *)&v7.f64[0], *(uint64_t *)&v7.f64[1], *(_QWORD *)(a2 + 64), 0);
LABEL_15:
      *(_QWORD *)a3 = 0;
      v13 = 1;
LABEL_20:
      *(_WORD *)(a3 + 8) = v13;
      return result;
    }
  }
  if ((*(_BYTE *)(result + 16) & 1) != 0)
  {
    *(float64x2_t *)result = v7;
    *(_BYTE *)(result + 16) = 0;
    v9 = 0.0;
    if (v8)
      goto LABEL_7;
  }
  else
  {
    v11 = vsubq_f64(*(float64x2_t *)result, v7);
    v9 = sqrt(vaddvq_f64(vmulq_f64(v11, v11)));
    v12 = *(double *)(result + 24);
    if (v12 <= v9)
      v12 = v9;
    *(double *)(result + 24) = v12;
    if (v8)
    {
LABEL_7:
      if (v8 == 1)
      {
        if (v9 <= a4)
        {
          v10 = *(double *)(result + 24);
          *(double *)a3 = v9;
          *(_BYTE *)(a3 + 8) = 0;
          *(_BYTE *)(a3 + 9) = v10 >= a5;
          return result;
        }
      }
      else if (*(double *)(result + 24) >= a5 && v9 < a4)
      {
        *(double *)a3 = v9;
        v13 = 512;
        goto LABEL_20;
      }
LABEL_19:
      *(_QWORD *)a3 = 0;
      v13 = 768;
      goto LABEL_20;
    }
  }
  if (v6 == 1)
    goto LABEL_15;
  *(double *)a3 = v9;
  *(_WORD *)(a3 + 8) = 0;
  return result;
}

uint64_t sub_234DBB8D8()
{
  return swift_deallocObject();
}

uint64_t associated type witness table accessor for Gesture.Body : Gesture in DistanceGesture()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t protocol witness for Gesture.body.getter in conformance DistanceGesture@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  v3 = *v1;
  v4 = v1[1];
  result = swift_allocObject();
  *(_QWORD *)(result + 16) = v4;
  *(_QWORD *)(result + 24) = v3;
  *(_BYTE *)a1 = 0;
  *(_QWORD *)(a1 + 8) = closure #1 in DistanceGesture.body.getterpartial apply;
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

ValueMetadata *type metadata accessor for DistanceGesture()
{
  return &type metadata for DistanceGesture;
}

ValueMetadata *type metadata accessor for DistanceGesture.StateType()
{
  return &type metadata for DistanceGesture.StateType;
}

uint64_t sub_234DBB968()
{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type ModifierGesture<StateContainerGesture<DistanceGesture.StateType, SpatialEvent, CGFloat>, EventListener<SpatialEvent>> and conformance ModifierGesture<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifierGesture<StateContainerGesture<DistanceGesture.StateType, SpatialEvent, CGFloat>, EventListener<SpatialEvent>>, (uint64_t)&protocol conformance descriptor for ModifierGesture<A, B>);
}

uint64_t sub_234DBB994()
{
  return swift_deallocObject();
}

void SymbolRenderingMode.Storage.hash(into:)()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0);
}

BOOL static SymbolRenderingMode.Storage.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t SymbolRenderingMode.Storage.CodingKeys.stringValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_234DBBA1C
                                                            + 4 * asc_2352A1120[a1]))(0x6F7268636F6E6F6DLL, 0xEA0000000000656DLL);
}

uint64_t sub_234DBBA1C()
{
  return 0x6C6F6369746C756DLL;
}

uint64_t sub_234DBBA34()
{
  return 0x6863726172656968;
}

uint64_t sub_234DBBA54()
{
  return 0x657474656C6170;
}

uint64_t sub_234DBBA6C()
{
  return 0x6572726566657270;
}

unint64_t sub_234DBBA88()
{
  return 0xD000000000000019;
}

unint64_t sub_234DBBAC0()
{
  return 0xD000000000000011;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance SymbolRenderingMode.Storage.CodingKeys()
{
  unsigned __int8 *v0;

  return SymbolRenderingMode.Storage.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance SymbolRenderingMode.Storage.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = specialized SymbolRenderingMode.Storage.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance SymbolRenderingMode.Storage.CodingKeys()
{
  lazy protocol witness table accessor for type SymbolRenderingMode.Storage.CodingKeys and conformance SymbolRenderingMode.Storage.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance SymbolRenderingMode.Storage.CodingKeys()
{
  lazy protocol witness table accessor for type SymbolRenderingMode.Storage.CodingKeys and conformance SymbolRenderingMode.Storage.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance SymbolRenderingMode.Storage.HierarchicalCodingKeys()
{
  lazy protocol witness table accessor for type SymbolRenderingMode.Storage.HierarchicalCodingKeys and conformance SymbolRenderingMode.Storage.HierarchicalCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance SymbolRenderingMode.Storage.HierarchicalCodingKeys()
{
  lazy protocol witness table accessor for type SymbolRenderingMode.Storage.HierarchicalCodingKeys and conformance SymbolRenderingMode.Storage.HierarchicalCodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance SymbolRenderingMode.Storage.HierarchicalSlashBadgeCodingKeys()
{
  lazy protocol witness table accessor for type SymbolRenderingMode.Storage.HierarchicalSlashBadgeCodingKeys and conformance SymbolRenderingMode.Storage.HierarchicalSlashBadgeCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance SymbolRenderingMode.Storage.HierarchicalSlashBadgeCodingKeys()
{
  lazy protocol witness table accessor for type SymbolRenderingMode.Storage.HierarchicalSlashBadgeCodingKeys and conformance SymbolRenderingMode.Storage.HierarchicalSlashBadgeCodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance SymbolRenderingMode.Storage.HierarchicalUnlessSlashedCodingKeys()
{
  lazy protocol witness table accessor for type SymbolRenderingMode.Storage.HierarchicalUnlessSlashedCodingKeys and conformance SymbolRenderingMode.Storage.HierarchicalUnlessSlashedCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance SymbolRenderingMode.Storage.HierarchicalUnlessSlashedCodingKeys()
{
  lazy protocol witness table accessor for type SymbolRenderingMode.Storage.HierarchicalUnlessSlashedCodingKeys and conformance SymbolRenderingMode.Storage.HierarchicalUnlessSlashedCodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance SymbolRenderingMode.Storage.MonochromeCodingKeys()
{
  lazy protocol witness table accessor for type SymbolRenderingMode.Storage.MonochromeCodingKeys and conformance SymbolRenderingMode.Storage.MonochromeCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance SymbolRenderingMode.Storage.MonochromeCodingKeys()
{
  lazy protocol witness table accessor for type SymbolRenderingMode.Storage.MonochromeCodingKeys and conformance SymbolRenderingMode.Storage.MonochromeCodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance SymbolRenderingMode.Storage.MulticolorCodingKeys()
{
  lazy protocol witness table accessor for type SymbolRenderingMode.Storage.MulticolorCodingKeys and conformance SymbolRenderingMode.Storage.MulticolorCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance SymbolRenderingMode.Storage.MulticolorCodingKeys()
{
  lazy protocol witness table accessor for type SymbolRenderingMode.Storage.MulticolorCodingKeys and conformance SymbolRenderingMode.Storage.MulticolorCodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance SymbolRenderingMode.Storage.PaletteCodingKeys@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *a1 = 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance SymbolRenderingMode.Storage.PaletteCodingKeys()
{
  lazy protocol witness table accessor for type SymbolRenderingMode.Storage.PaletteCodingKeys and conformance SymbolRenderingMode.Storage.PaletteCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance SymbolRenderingMode.Storage.PaletteCodingKeys()
{
  lazy protocol witness table accessor for type SymbolRenderingMode.Storage.PaletteCodingKeys and conformance SymbolRenderingMode.Storage.PaletteCodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance SymbolRenderingMode.Storage.PaletteSlashBadgeCodingKeys()
{
  lazy protocol witness table accessor for type SymbolRenderingMode.Storage.PaletteSlashBadgeCodingKeys and conformance SymbolRenderingMode.Storage.PaletteSlashBadgeCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance SymbolRenderingMode.Storage.PaletteSlashBadgeCodingKeys()
{
  lazy protocol witness table accessor for type SymbolRenderingMode.Storage.PaletteSlashBadgeCodingKeys and conformance SymbolRenderingMode.Storage.PaletteSlashBadgeCodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance SymbolRenderingMode.Storage.PreferredCodingKeys()
{
  lazy protocol witness table accessor for type SymbolRenderingMode.Storage.PreferredCodingKeys and conformance SymbolRenderingMode.Storage.PreferredCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance SymbolRenderingMode.Storage.PreferredCodingKeys()
{
  lazy protocol witness table accessor for type SymbolRenderingMode.Storage.PreferredCodingKeys and conformance SymbolRenderingMode.Storage.PreferredCodingKeys();
  return CodingKey.debugDescription.getter();
}

Swift::Int SymbolRenderingMode.Storage.hashValue.getter()
{
  unsigned __int8 *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void SymbolRenderingMode.storage.getter(_BYTE *a1@<X8>)
{
  _BYTE *v1;

  *a1 = *v1;
}

_BYTE *SymbolRenderingMode.storage.setter(_BYTE *result)
{
  _BYTE *v1;

  *v1 = *result;
  return result;
}

uint64_t (*SymbolRenderingMode.storage.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

_BYTE *SymbolRenderingMode.init(storage:)@<X0>(_BYTE *result@<X0>, _BYTE *a2@<X8>)
{
  *a2 = *result;
  return result;
}

void static SymbolRenderingMode.monochrome.getter(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

void static SymbolRenderingMode.multicolor.getter(_BYTE *a1@<X8>)
{
  *a1 = 1;
}

void static SymbolRenderingMode.hierarchical.getter(_BYTE *a1@<X8>)
{
  *a1 = 2;
}

void static SymbolRenderingMode.palette.getter(_BYTE *a1@<X8>)
{
  *a1 = 3;
}

void static SymbolRenderingMode.preferred.getter(_BYTE *a1@<X8>)
{
  *a1 = 4;
}

uint64_t one-time initialization function for preferredIfEnabled()
{
  unsigned int v0;
  uint64_t result;
  char v2;

  if (one-time initialization token for v4 != -1)
    swift_once();
  v0 = static Semantics.v4;
  if (one-time initialization token for forced != -1)
    swift_once();
  swift_beginAccess();
  if ((byte_25426FAB4 & 1) != 0)
    result = dyld_program_sdk_at_least();
  else
    result = static Semantics.forced >= v0;
  if ((_DWORD)result)
    v2 = 4;
  else
    v2 = 8;
  static SymbolRenderingMode.preferredIfEnabled = v2;
  return result;
}

uint64_t static SymbolRenderingMode.preferredIfEnabled.getter@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  if (one-time initialization token for preferredIfEnabled != -1)
    result = swift_once();
  *a1 = static SymbolRenderingMode.preferredIfEnabled;
  return result;
}

void SymbolRenderingMode.Storage.encode(to:)(_QWORD *a1)
{
  unsigned __int8 *v1;
  unsigned __int8 *v2;
  uint64_t (*v4)(uint64_t, uint64_t, uint64_t);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD v22[24];

  v2 = v1;
  v4 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE3520];
  type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for KeyedEncodingContainer<SymbolRenderingMode.Storage.PaletteSlashBadgeCodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type SymbolRenderingMode.Storage.PaletteSlashBadgeCodingKeys and conformance SymbolRenderingMode.Storage.PaletteSlashBadgeCodingKeys, (uint64_t)&unk_25062DDB8, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE3520]);
  v22[20] = *(_QWORD *)(v5 - 8);
  v22[21] = v5;
  MEMORY[0x24BDAC7A8](v5);
  v22[19] = (char *)v22 - v6;
  type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for KeyedEncodingContainer<SymbolRenderingMode.Storage.HierarchicalSlashBadgeCodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type SymbolRenderingMode.Storage.HierarchicalSlashBadgeCodingKeys and conformance SymbolRenderingMode.Storage.HierarchicalSlashBadgeCodingKeys, (uint64_t)&unk_25062DDD8, v4);
  v22[17] = *(_QWORD *)(v7 - 8);
  v22[18] = v7;
  MEMORY[0x24BDAC7A8](v7);
  v22[16] = (char *)v22 - v8;
  type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for KeyedEncodingContainer<SymbolRenderingMode.Storage.HierarchicalUnlessSlashedCodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type SymbolRenderingMode.Storage.HierarchicalUnlessSlashedCodingKeys and conformance SymbolRenderingMode.Storage.HierarchicalUnlessSlashedCodingKeys, (uint64_t)&unk_25062DDF8, v4);
  v22[14] = *(_QWORD *)(v9 - 8);
  v22[15] = v9;
  MEMORY[0x24BDAC7A8](v9);
  v22[13] = (char *)v22 - v10;
  type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for KeyedEncodingContainer<SymbolRenderingMode.Storage.PreferredCodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type SymbolRenderingMode.Storage.PreferredCodingKeys and conformance SymbolRenderingMode.Storage.PreferredCodingKeys, (uint64_t)&unk_25062DD38, v4);
  v22[11] = *(_QWORD *)(v11 - 8);
  v22[12] = v11;
  MEMORY[0x24BDAC7A8](v11);
  v22[10] = (char *)v22 - v12;
  type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for KeyedEncodingContainer<SymbolRenderingMode.Storage.PaletteCodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type SymbolRenderingMode.Storage.PaletteCodingKeys and conformance SymbolRenderingMode.Storage.PaletteCodingKeys, (uint64_t)&unk_25062DD18, v4);
  v22[8] = *(_QWORD *)(v13 - 8);
  v22[9] = v13;
  MEMORY[0x24BDAC7A8](v13);
  v22[7] = (char *)v22 - v14;
  type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for KeyedEncodingContainer<SymbolRenderingMode.Storage.HierarchicalCodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type SymbolRenderingMode.Storage.HierarchicalCodingKeys and conformance SymbolRenderingMode.Storage.HierarchicalCodingKeys, (uint64_t)&unk_25062DD98, v4);
  v22[5] = *(_QWORD *)(v15 - 8);
  v22[6] = v15;
  MEMORY[0x24BDAC7A8](v15);
  v22[4] = (char *)v22 - v16;
  type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for KeyedEncodingContainer<SymbolRenderingMode.Storage.MulticolorCodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type SymbolRenderingMode.Storage.MulticolorCodingKeys and conformance SymbolRenderingMode.Storage.MulticolorCodingKeys, (uint64_t)&unk_25062DD78, v4);
  v22[3] = v17;
  v22[2] = *(_QWORD *)(v17 - 8);
  MEMORY[0x24BDAC7A8](v17);
  v22[1] = (char *)v22 - v18;
  type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for KeyedEncodingContainer<SymbolRenderingMode.Storage.MonochromeCodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type SymbolRenderingMode.Storage.MonochromeCodingKeys and conformance SymbolRenderingMode.Storage.MonochromeCodingKeys, (uint64_t)&unk_25062DD58, v4);
  MEMORY[0x24BDAC7A8](v19);
  type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for KeyedEncodingContainer<SymbolRenderingMode.Storage.CodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type SymbolRenderingMode.Storage.CodingKeys and conformance SymbolRenderingMode.Storage.CodingKeys, (uint64_t)&unk_25062DC88, v4);
  v22[22] = *(_QWORD *)(v20 - 8);
  v22[23] = v20;
  MEMORY[0x24BDAC7A8](v20);
  v21 = *v2;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type SymbolRenderingMode.Storage.CodingKeys and conformance SymbolRenderingMode.Storage.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  __asm { BR              X9 }
}

uint64_t sub_234DBC35C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_BYTE *)(v4 - 72) = 0;
  lazy protocol witness table accessor for type SymbolRenderingMode.Storage.MonochromeCodingKeys and conformance SymbolRenderingMode.Storage.MonochromeCodingKeys();
  v5 = *(_QWORD *)(v4 - 104);
  KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0, v3);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 112) + 8))(v1, v5);
}

unint64_t lazy protocol witness table accessor for type SymbolRenderingMode.Storage.PaletteSlashBadgeCodingKeys and conformance SymbolRenderingMode.Storage.PaletteSlashBadgeCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SymbolRenderingMode.Storage.PaletteSlashBadgeCodingKeys and conformance SymbolRenderingMode.Storage.PaletteSlashBadgeCodingKeys;
  if (!lazy protocol witness table cache variable for type SymbolRenderingMode.Storage.PaletteSlashBadgeCodingKeys and conformance SymbolRenderingMode.Storage.PaletteSlashBadgeCodingKeys)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for SymbolRenderingMode.Storage.PaletteSlashBadgeCodingKeys, &unk_25062DDB8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SymbolRenderingMode.Storage.PaletteSlashBadgeCodingKeys and conformance SymbolRenderingMode.Storage.PaletteSlashBadgeCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SymbolRenderingMode.Storage.PaletteSlashBadgeCodingKeys and conformance SymbolRenderingMode.Storage.PaletteSlashBadgeCodingKeys;
  if (!lazy protocol witness table cache variable for type SymbolRenderingMode.Storage.PaletteSlashBadgeCodingKeys and conformance SymbolRenderingMode.Storage.PaletteSlashBadgeCodingKeys)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for SymbolRenderingMode.Storage.PaletteSlashBadgeCodingKeys, &unk_25062DDB8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SymbolRenderingMode.Storage.PaletteSlashBadgeCodingKeys and conformance SymbolRenderingMode.Storage.PaletteSlashBadgeCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SymbolRenderingMode.Storage.PaletteSlashBadgeCodingKeys and conformance SymbolRenderingMode.Storage.PaletteSlashBadgeCodingKeys;
  if (!lazy protocol witness table cache variable for type SymbolRenderingMode.Storage.PaletteSlashBadgeCodingKeys and conformance SymbolRenderingMode.Storage.PaletteSlashBadgeCodingKeys)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for SymbolRenderingMode.Storage.PaletteSlashBadgeCodingKeys, &unk_25062DDB8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SymbolRenderingMode.Storage.PaletteSlashBadgeCodingKeys and conformance SymbolRenderingMode.Storage.PaletteSlashBadgeCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type SymbolRenderingMode.Storage.HierarchicalSlashBadgeCodingKeys and conformance SymbolRenderingMode.Storage.HierarchicalSlashBadgeCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SymbolRenderingMode.Storage.HierarchicalSlashBadgeCodingKeys and conformance SymbolRenderingMode.Storage.HierarchicalSlashBadgeCodingKeys;
  if (!lazy protocol witness table cache variable for type SymbolRenderingMode.Storage.HierarchicalSlashBadgeCodingKeys and conformance SymbolRenderingMode.Storage.HierarchicalSlashBadgeCodingKeys)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for SymbolRenderingMode.Storage.HierarchicalSlashBadgeCodingKeys, &unk_25062DDD8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SymbolRenderingMode.Storage.HierarchicalSlashBadgeCodingKeys and conformance SymbolRenderingMode.Storage.HierarchicalSlashBadgeCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SymbolRenderingMode.Storage.HierarchicalSlashBadgeCodingKeys and conformance SymbolRenderingMode.Storage.HierarchicalSlashBadgeCodingKeys;
  if (!lazy protocol witness table cache variable for type SymbolRenderingMode.Storage.HierarchicalSlashBadgeCodingKeys and conformance SymbolRenderingMode.Storage.HierarchicalSlashBadgeCodingKeys)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for SymbolRenderingMode.Storage.HierarchicalSlashBadgeCodingKeys, &unk_25062DDD8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SymbolRenderingMode.Storage.HierarchicalSlashBadgeCodingKeys and conformance SymbolRenderingMode.Storage.HierarchicalSlashBadgeCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SymbolRenderingMode.Storage.HierarchicalSlashBadgeCodingKeys and conformance SymbolRenderingMode.Storage.HierarchicalSlashBadgeCodingKeys;
  if (!lazy protocol witness table cache variable for type SymbolRenderingMode.Storage.HierarchicalSlashBadgeCodingKeys and conformance SymbolRenderingMode.Storage.HierarchicalSlashBadgeCodingKeys)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for SymbolRenderingMode.Storage.HierarchicalSlashBadgeCodingKeys, &unk_25062DDD8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SymbolRenderingMode.Storage.HierarchicalSlashBadgeCodingKeys and conformance SymbolRenderingMode.Storage.HierarchicalSlashBadgeCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type SymbolRenderingMode.Storage.HierarchicalUnlessSlashedCodingKeys and conformance SymbolRenderingMode.Storage.HierarchicalUnlessSlashedCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SymbolRenderingMode.Storage.HierarchicalUnlessSlashedCodingKeys and conformance SymbolRenderingMode.Storage.HierarchicalUnlessSlashedCodingKeys;
  if (!lazy protocol witness table cache variable for type SymbolRenderingMode.Storage.HierarchicalUnlessSlashedCodingKeys and conformance SymbolRenderingMode.Storage.HierarchicalUnlessSlashedCodingKeys)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for SymbolRenderingMode.Storage.HierarchicalUnlessSlashedCodingKeys, &unk_25062DDF8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SymbolRenderingMode.Storage.HierarchicalUnlessSlashedCodingKeys and conformance SymbolRenderingMode.Storage.HierarchicalUnlessSlashedCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SymbolRenderingMode.Storage.HierarchicalUnlessSlashedCodingKeys and conformance SymbolRenderingMode.Storage.HierarchicalUnlessSlashedCodingKeys;
  if (!lazy protocol witness table cache variable for type SymbolRenderingMode.Storage.HierarchicalUnlessSlashedCodingKeys and conformance SymbolRenderingMode.Storage.HierarchicalUnlessSlashedCodingKeys)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for SymbolRenderingMode.Storage.HierarchicalUnlessSlashedCodingKeys, &unk_25062DDF8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SymbolRenderingMode.Storage.HierarchicalUnlessSlashedCodingKeys and conformance SymbolRenderingMode.Storage.HierarchicalUnlessSlashedCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SymbolRenderingMode.Storage.HierarchicalUnlessSlashedCodingKeys and conformance SymbolRenderingMode.Storage.HierarchicalUnlessSlashedCodingKeys;
  if (!lazy protocol witness table cache variable for type SymbolRenderingMode.Storage.HierarchicalUnlessSlashedCodingKeys and conformance SymbolRenderingMode.Storage.HierarchicalUnlessSlashedCodingKeys)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for SymbolRenderingMode.Storage.HierarchicalUnlessSlashedCodingKeys, &unk_25062DDF8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SymbolRenderingMode.Storage.HierarchicalUnlessSlashedCodingKeys and conformance SymbolRenderingMode.Storage.HierarchicalUnlessSlashedCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type SymbolRenderingMode.Storage.PreferredCodingKeys and conformance SymbolRenderingMode.Storage.PreferredCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SymbolRenderingMode.Storage.PreferredCodingKeys and conformance SymbolRenderingMode.Storage.PreferredCodingKeys;
  if (!lazy protocol witness table cache variable for type SymbolRenderingMode.Storage.PreferredCodingKeys and conformance SymbolRenderingMode.Storage.PreferredCodingKeys)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for SymbolRenderingMode.Storage.PreferredCodingKeys, &unk_25062DD38);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SymbolRenderingMode.Storage.PreferredCodingKeys and conformance SymbolRenderingMode.Storage.PreferredCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SymbolRenderingMode.Storage.PreferredCodingKeys and conformance SymbolRenderingMode.Storage.PreferredCodingKeys;
  if (!lazy protocol witness table cache variable for type SymbolRenderingMode.Storage.PreferredCodingKeys and conformance SymbolRenderingMode.Storage.PreferredCodingKeys)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for SymbolRenderingMode.Storage.PreferredCodingKeys, &unk_25062DD38);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SymbolRenderingMode.Storage.PreferredCodingKeys and conformance SymbolRenderingMode.Storage.PreferredCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SymbolRenderingMode.Storage.PreferredCodingKeys and conformance SymbolRenderingMode.Storage.PreferredCodingKeys;
  if (!lazy protocol witness table cache variable for type SymbolRenderingMode.Storage.PreferredCodingKeys and conformance SymbolRenderingMode.Storage.PreferredCodingKeys)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for SymbolRenderingMode.Storage.PreferredCodingKeys, &unk_25062DD38);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SymbolRenderingMode.Storage.PreferredCodingKeys and conformance SymbolRenderingMode.Storage.PreferredCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type SymbolRenderingMode.Storage.PaletteCodingKeys and conformance SymbolRenderingMode.Storage.PaletteCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SymbolRenderingMode.Storage.PaletteCodingKeys and conformance SymbolRenderingMode.Storage.PaletteCodingKeys;
  if (!lazy protocol witness table cache variable for type SymbolRenderingMode.Storage.PaletteCodingKeys and conformance SymbolRenderingMode.Storage.PaletteCodingKeys)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for SymbolRenderingMode.Storage.PaletteCodingKeys, &unk_25062DD18);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SymbolRenderingMode.Storage.PaletteCodingKeys and conformance SymbolRenderingMode.Storage.PaletteCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SymbolRenderingMode.Storage.PaletteCodingKeys and conformance SymbolRenderingMode.Storage.PaletteCodingKeys;
  if (!lazy protocol witness table cache variable for type SymbolRenderingMode.Storage.PaletteCodingKeys and conformance SymbolRenderingMode.Storage.PaletteCodingKeys)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for SymbolRenderingMode.Storage.PaletteCodingKeys, &unk_25062DD18);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SymbolRenderingMode.Storage.PaletteCodingKeys and conformance SymbolRenderingMode.Storage.PaletteCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SymbolRenderingMode.Storage.PaletteCodingKeys and conformance SymbolRenderingMode.Storage.PaletteCodingKeys;
  if (!lazy protocol witness table cache variable for type SymbolRenderingMode.Storage.PaletteCodingKeys and conformance SymbolRenderingMode.Storage.PaletteCodingKeys)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for SymbolRenderingMode.Storage.PaletteCodingKeys, &unk_25062DD18);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SymbolRenderingMode.Storage.PaletteCodingKeys and conformance SymbolRenderingMode.Storage.PaletteCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type SymbolRenderingMode.Storage.HierarchicalCodingKeys and conformance SymbolRenderingMode.Storage.HierarchicalCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SymbolRenderingMode.Storage.HierarchicalCodingKeys and conformance SymbolRenderingMode.Storage.HierarchicalCodingKeys;
  if (!lazy protocol witness table cache variable for type SymbolRenderingMode.Storage.HierarchicalCodingKeys and conformance SymbolRenderingMode.Storage.HierarchicalCodingKeys)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for SymbolRenderingMode.Storage.HierarchicalCodingKeys, &unk_25062DD98);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SymbolRenderingMode.Storage.HierarchicalCodingKeys and conformance SymbolRenderingMode.Storage.HierarchicalCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SymbolRenderingMode.Storage.HierarchicalCodingKeys and conformance SymbolRenderingMode.Storage.HierarchicalCodingKeys;
  if (!lazy protocol witness table cache variable for type SymbolRenderingMode.Storage.HierarchicalCodingKeys and conformance SymbolRenderingMode.Storage.HierarchicalCodingKeys)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for SymbolRenderingMode.Storage.HierarchicalCodingKeys, &unk_25062DD98);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SymbolRenderingMode.Storage.HierarchicalCodingKeys and conformance SymbolRenderingMode.Storage.HierarchicalCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SymbolRenderingMode.Storage.HierarchicalCodingKeys and conformance SymbolRenderingMode.Storage.HierarchicalCodingKeys;
  if (!lazy protocol witness table cache variable for type SymbolRenderingMode.Storage.HierarchicalCodingKeys and conformance SymbolRenderingMode.Storage.HierarchicalCodingKeys)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for SymbolRenderingMode.Storage.HierarchicalCodingKeys, &unk_25062DD98);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SymbolRenderingMode.Storage.HierarchicalCodingKeys and conformance SymbolRenderingMode.Storage.HierarchicalCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type SymbolRenderingMode.Storage.MulticolorCodingKeys and conformance SymbolRenderingMode.Storage.MulticolorCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SymbolRenderingMode.Storage.MulticolorCodingKeys and conformance SymbolRenderingMode.Storage.MulticolorCodingKeys;
  if (!lazy protocol witness table cache variable for type SymbolRenderingMode.Storage.MulticolorCodingKeys and conformance SymbolRenderingMode.Storage.MulticolorCodingKeys)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for SymbolRenderingMode.Storage.MulticolorCodingKeys, &unk_25062DD78);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SymbolRenderingMode.Storage.MulticolorCodingKeys and conformance SymbolRenderingMode.Storage.MulticolorCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SymbolRenderingMode.Storage.MulticolorCodingKeys and conformance SymbolRenderingMode.Storage.MulticolorCodingKeys;
  if (!lazy protocol witness table cache variable for type SymbolRenderingMode.Storage.MulticolorCodingKeys and conformance SymbolRenderingMode.Storage.MulticolorCodingKeys)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for SymbolRenderingMode.Storage.MulticolorCodingKeys, &unk_25062DD78);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SymbolRenderingMode.Storage.MulticolorCodingKeys and conformance SymbolRenderingMode.Storage.MulticolorCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SymbolRenderingMode.Storage.MulticolorCodingKeys and conformance SymbolRenderingMode.Storage.MulticolorCodingKeys;
  if (!lazy protocol witness table cache variable for type SymbolRenderingMode.Storage.MulticolorCodingKeys and conformance SymbolRenderingMode.Storage.MulticolorCodingKeys)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for SymbolRenderingMode.Storage.MulticolorCodingKeys, &unk_25062DD78);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SymbolRenderingMode.Storage.MulticolorCodingKeys and conformance SymbolRenderingMode.Storage.MulticolorCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type SymbolRenderingMode.Storage.MonochromeCodingKeys and conformance SymbolRenderingMode.Storage.MonochromeCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SymbolRenderingMode.Storage.MonochromeCodingKeys and conformance SymbolRenderingMode.Storage.MonochromeCodingKeys;
  if (!lazy protocol witness table cache variable for type SymbolRenderingMode.Storage.MonochromeCodingKeys and conformance SymbolRenderingMode.Storage.MonochromeCodingKeys)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for SymbolRenderingMode.Storage.MonochromeCodingKeys, &unk_25062DD58);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SymbolRenderingMode.Storage.MonochromeCodingKeys and conformance SymbolRenderingMode.Storage.MonochromeCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SymbolRenderingMode.Storage.MonochromeCodingKeys and conformance SymbolRenderingMode.Storage.MonochromeCodingKeys;
  if (!lazy protocol witness table cache variable for type SymbolRenderingMode.Storage.MonochromeCodingKeys and conformance SymbolRenderingMode.Storage.MonochromeCodingKeys)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for SymbolRenderingMode.Storage.MonochromeCodingKeys, &unk_25062DD58);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SymbolRenderingMode.Storage.MonochromeCodingKeys and conformance SymbolRenderingMode.Storage.MonochromeCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SymbolRenderingMode.Storage.MonochromeCodingKeys and conformance SymbolRenderingMode.Storage.MonochromeCodingKeys;
  if (!lazy protocol witness table cache variable for type SymbolRenderingMode.Storage.MonochromeCodingKeys and conformance SymbolRenderingMode.Storage.MonochromeCodingKeys)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for SymbolRenderingMode.Storage.MonochromeCodingKeys, &unk_25062DD58);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SymbolRenderingMode.Storage.MonochromeCodingKeys and conformance SymbolRenderingMode.Storage.MonochromeCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type SymbolRenderingMode.Storage.CodingKeys and conformance SymbolRenderingMode.Storage.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SymbolRenderingMode.Storage.CodingKeys and conformance SymbolRenderingMode.Storage.CodingKeys;
  if (!lazy protocol witness table cache variable for type SymbolRenderingMode.Storage.CodingKeys and conformance SymbolRenderingMode.Storage.CodingKeys)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for SymbolRenderingMode.Storage.CodingKeys, &unk_25062DC88);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SymbolRenderingMode.Storage.CodingKeys and conformance SymbolRenderingMode.Storage.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SymbolRenderingMode.Storage.CodingKeys and conformance SymbolRenderingMode.Storage.CodingKeys;
  if (!lazy protocol witness table cache variable for type SymbolRenderingMode.Storage.CodingKeys and conformance SymbolRenderingMode.Storage.CodingKeys)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for SymbolRenderingMode.Storage.CodingKeys, &unk_25062DC88);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SymbolRenderingMode.Storage.CodingKeys and conformance SymbolRenderingMode.Storage.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SymbolRenderingMode.Storage.CodingKeys and conformance SymbolRenderingMode.Storage.CodingKeys;
  if (!lazy protocol witness table cache variable for type SymbolRenderingMode.Storage.CodingKeys and conformance SymbolRenderingMode.Storage.CodingKeys)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for SymbolRenderingMode.Storage.CodingKeys, &unk_25062DC88);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SymbolRenderingMode.Storage.CodingKeys and conformance SymbolRenderingMode.Storage.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SymbolRenderingMode.Storage.CodingKeys and conformance SymbolRenderingMode.Storage.CodingKeys;
  if (!lazy protocol witness table cache variable for type SymbolRenderingMode.Storage.CodingKeys and conformance SymbolRenderingMode.Storage.CodingKeys)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for SymbolRenderingMode.Storage.CodingKeys, &unk_25062DC88);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SymbolRenderingMode.Storage.CodingKeys and conformance SymbolRenderingMode.Storage.CodingKeys);
  }
  return result;
}

uint64_t SymbolRenderingMode.Storage.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t (*v3)(uint64_t, uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  _QWORD v34[25];
  _QWORD *v35;
  uint64_t v36;

  v34[21] = a2;
  v3 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE33E0];
  type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for KeyedDecodingContainer<SymbolRenderingMode.Storage.PaletteSlashBadgeCodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type SymbolRenderingMode.Storage.PaletteSlashBadgeCodingKeys and conformance SymbolRenderingMode.Storage.PaletteSlashBadgeCodingKeys, (uint64_t)&unk_25062DDB8, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE33E0]);
  v34[15] = *(_QWORD *)(v4 - 8);
  v34[16] = v4;
  MEMORY[0x24BDAC7A8](v4);
  v34[24] = (char *)v34 - v5;
  type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for KeyedDecodingContainer<SymbolRenderingMode.Storage.HierarchicalSlashBadgeCodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type SymbolRenderingMode.Storage.HierarchicalSlashBadgeCodingKeys and conformance SymbolRenderingMode.Storage.HierarchicalSlashBadgeCodingKeys, (uint64_t)&unk_25062DDD8, v3);
  v34[3] = v6;
  v34[2] = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v34[20] = (char *)v34 - v7;
  type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for KeyedDecodingContainer<SymbolRenderingMode.Storage.HierarchicalUnlessSlashedCodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type SymbolRenderingMode.Storage.HierarchicalUnlessSlashedCodingKeys and conformance SymbolRenderingMode.Storage.HierarchicalUnlessSlashedCodingKeys, (uint64_t)&unk_25062DDF8, v3);
  v34[13] = *(_QWORD *)(v8 - 8);
  v34[14] = v8;
  MEMORY[0x24BDAC7A8](v8);
  v34[23] = (char *)v34 - v9;
  type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for KeyedDecodingContainer<SymbolRenderingMode.Storage.PreferredCodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type SymbolRenderingMode.Storage.PreferredCodingKeys and conformance SymbolRenderingMode.Storage.PreferredCodingKeys, (uint64_t)&unk_25062DD38, v3);
  v34[11] = *(_QWORD *)(v10 - 8);
  v34[12] = v10;
  MEMORY[0x24BDAC7A8](v10);
  v34[19] = (char *)v34 - v11;
  type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for KeyedDecodingContainer<SymbolRenderingMode.Storage.PaletteCodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type SymbolRenderingMode.Storage.PaletteCodingKeys and conformance SymbolRenderingMode.Storage.PaletteCodingKeys, (uint64_t)&unk_25062DD18, v3);
  v34[9] = *(_QWORD *)(v12 - 8);
  v34[10] = v12;
  MEMORY[0x24BDAC7A8](v12);
  v34[22] = (char *)v34 - v13;
  type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for KeyedDecodingContainer<SymbolRenderingMode.Storage.HierarchicalCodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type SymbolRenderingMode.Storage.HierarchicalCodingKeys and conformance SymbolRenderingMode.Storage.HierarchicalCodingKeys, (uint64_t)&unk_25062DD98, v3);
  v34[7] = *(_QWORD *)(v14 - 8);
  v34[8] = v14;
  MEMORY[0x24BDAC7A8](v14);
  v34[18] = (char *)v34 - v15;
  type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for KeyedDecodingContainer<SymbolRenderingMode.Storage.MulticolorCodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type SymbolRenderingMode.Storage.MulticolorCodingKeys and conformance SymbolRenderingMode.Storage.MulticolorCodingKeys, (uint64_t)&unk_25062DD78, v3);
  v34[6] = v16;
  v34[5] = *(_QWORD *)(v16 - 8);
  MEMORY[0x24BDAC7A8](v16);
  v34[17] = (char *)v34 - v17;
  type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for KeyedDecodingContainer<SymbolRenderingMode.Storage.MonochromeCodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type SymbolRenderingMode.Storage.MonochromeCodingKeys and conformance SymbolRenderingMode.Storage.MonochromeCodingKeys, (uint64_t)&unk_25062DD58, v3);
  v34[4] = v18;
  v19 = *(_QWORD *)(v18 - 8);
  MEMORY[0x24BDAC7A8](v18);
  v21 = (char *)v34 - v20;
  type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for KeyedDecodingContainer<SymbolRenderingMode.Storage.CodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type SymbolRenderingMode.Storage.CodingKeys and conformance SymbolRenderingMode.Storage.CodingKeys, (uint64_t)&unk_25062DC88, v3);
  v23 = v22;
  v24 = *(_QWORD *)(v22 - 8);
  MEMORY[0x24BDAC7A8](v22);
  v26 = (char *)v34 - v25;
  v27 = a1[3];
  v35 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v27);
  lazy protocol witness table accessor for type SymbolRenderingMode.Storage.CodingKeys and conformance SymbolRenderingMode.Storage.CodingKeys();
  v28 = v36;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v28)
  {
    v34[1] = v21;
    v34[0] = v19;
    v36 = v24;
    v29 = KeyedDecodingContainer.allKeys.getter();
    if (*(_QWORD *)(v29 + 16) == 1)
      __asm { BR              X9 }
    v30 = type metadata accessor for DecodingError();
    swift_allocError();
    v32 = v31;
    type metadata accessor for (@thick Any.Type, DecodingError.Context)();
    *v32 = &type metadata for SymbolRenderingMode.Storage;
    KeyedDecodingContainer.codingPath.getter();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v30 - 8) + 104))(v32, *MEMORY[0x24BEE26D0], v30);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v36 + 8))(v26, v23);
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v35);
}

uint64_t protocol witness for Decodable.init(from:) in conformance SymbolRenderingMode.Storage@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return SymbolRenderingMode.Storage.init(from:)(a1, a2);
}

void protocol witness for Encodable.encode(to:) in conformance SymbolRenderingMode.Storage(_QWORD *a1)
{
  SymbolRenderingMode.Storage.encode(to:)(a1);
}

void static SymbolRenderingMode.hierarchicalUnlessSlashed.getter(_BYTE *a1@<X8>)
{
  *a1 = 5;
}

void static SymbolRenderingMode.hierarchicalSlashBadge.getter(_BYTE *a1@<X8>)
{
  *a1 = 6;
}

void static SymbolRenderingMode.paletteSlashBadge.getter(_BYTE *a1@<X8>)
{
  *a1 = 7;
}

uint64_t View.symbolRenderingMode(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *KeyPath;

  KeyPath = (uint64_t *)swift_getKeyPath();
  View.environment<A>(_:_:)(KeyPath, a1, a2, a3);
  return swift_release();
}

uint64_t EnvironmentValues.symbolRenderingMode.getter@<X0>(char *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;

  v3 = *v1;
  if (v1[1])
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v3, a1);
    swift_release_n();
  }
  else
  {
    v4 = swift_retain_n();
    specialized closure #1 in PropertyList.subscript.getter(v4, a1);
  }
  return swift_release_n();
}

uint64_t key path getter for EnvironmentValues.symbolRenderingMode : EnvironmentValues, serialized@<X0>(uint64_t *a1@<X0>, char *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *a1;
  if (a1[1])
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v3, a2);
    swift_release_n();
  }
  else
  {
    v4 = swift_retain_n();
    specialized closure #1 in PropertyList.subscript.getter(v4, a2);
  }
  return swift_release_n();
}

uint64_t sub_234DBD15C(char *a1)
{
  char v2;

  v2 = *a1;
  return EnvironmentValues.symbolRenderingMode.setter(&v2);
}

uint64_t EnvironmentValues.symbolRenderingMode.setter(char *a1)
{
  uint64_t *v1;
  uint64_t v2;
  char v3;
  uint64_t v4;

  v2 = *v1;
  v3 = *a1;
  swift_retain_n();
  specialized closure #1 in PropertyList.subscript.setter(v1, v3);
  swift_release();
  if (v1[1])
  {
    v4 = *v1;
    swift_retain();
    swift_retain();
    specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v2, v4);
    swift_release();
    swift_release();
  }
  return swift_release();
}

uint64_t Image.symbolRenderingMode(_:)(char *a1, uint64_t a2)
{
  char v3;
  uint64_t v4;

  v3 = *a1;
  type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for ImageProviderBox<Image.SymbolRenderingModeProvider>, (uint64_t (*)(void))lazy protocol witness table accessor for type Image.SymbolRenderingModeProvider and conformance Image.SymbolRenderingModeProvider, (uint64_t)&unk_25064BFA8, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ImageProviderBox);
  v4 = swift_allocObject();
  *(_QWORD *)(v4 + 16) = a2;
  *(_BYTE *)(v4 + 24) = v3;
  swift_retain();
  return v4;
}

uint64_t protocol witness for ImageProvider.resolve(in:) in conformance Image.SymbolRenderingModeProvider(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char v7;
  uint64_t v9;

  v3 = type metadata accessor for ImageResolutionContext();
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *v1;
  v7 = *((_BYTE *)v1 + 8);
  outlined init with copy of ImageResolutionContext(a1, (uint64_t)v5);
  v5[*(int *)(v3 + 32)] = v7;
  (*(void (**)(char *))(*(_QWORD *)v6 + 80))(v5);
  return outlined destroy of ImageResolutionContext((uint64_t)v5);
}

uint64_t protocol witness for ImageProvider.resolveNamedImage(in:) in conformance Image.SymbolRenderingModeProvider(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char v7;
  uint64_t v9;

  v3 = type metadata accessor for ImageResolutionContext();
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *v1;
  v7 = *((_BYTE *)v1 + 8);
  outlined init with copy of ImageResolutionContext(a1, (uint64_t)v5);
  v5[*(int *)(v3 + 32)] = v7;
  (*(void (**)(char *))(*(_QWORD *)v6 + 88))(v5);
  return outlined destroy of ImageResolutionContext((uint64_t)v5);
}

uint64_t key path getter for EnvironmentValues.symbolRenderingMode : EnvironmentValues@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  char v6;

  v3 = *a1;
  if (a1[1])
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v3, &v6);
    swift_release_n();
  }
  else
  {
    v4 = swift_retain_n();
    specialized closure #1 in PropertyList.subscript.getter(v4, &v6);
  }
  result = swift_release_n();
  *a2 = v6;
  return result;
}

uint64_t (*EnvironmentValues.symbolRenderingMode.modify(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4))(uint64_t a1)
{
  uint64_t *v4;
  char *v5;
  uint64_t v6;
  Swift::Int v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v12;

  v5 = (char *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = v4;
  v6 = *v4;
  if (v4[1])
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v6, v5);
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<SymbolRenderingModeKey>(0, a2, a3, a4);
    BloomFilter.init(hashValue:)(v7);
    v8 = swift_retain_n();
    v9 = specialized find1<A>(_:key:filter:)(v8, v12);
    if (v9)
      v10 = *(_BYTE *)(v9 + 72);
    else
      v10 = 8;
    *v5 = v10;
  }
  swift_release_n();
  return EnvironmentValues.symbolRenderingMode.modify;
}

uint64_t EnvironmentValues.symbolRenderingMode.modify(uint64_t a1)
{
  char v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_BYTE *)(a1 + 24);
  v3 = *(uint64_t **)(a1 + 16);
  v4 = *v3;
  swift_retain_n();
  specialized closure #1 in PropertyList.subscript.setter(v3, v2);
  swift_release();
  if (v3[1])
  {
    v5 = **(_QWORD **)(a1 + 16);
    swift_retain();
    swift_retain();
    specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v4, v5);
    swift_release();
    swift_release();
  }
  return swift_release();
}

uint64_t ImageResolutionContext.effectiveSymbolRenderingMode.getter@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  Swift::Int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  unsigned __int8 v22;

  v2 = v1;
  v4 = type metadata accessor for ImageResolutionContext();
  MEMORY[0x24BDAC7A8](v4);
  v6 = (uint64_t *)((char *)&v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v8 = *(unsigned __int8 *)(v1 + *(int *)(v7 + 32));
  outlined init with copy of ImageResolutionContext(v2, (uint64_t)v6);
  if (v8 == 8)
  {
    v12 = *v6;
    if (v6[1])
    {
      swift_retain_n();
      swift_retain_n();
      specialized PropertyList.Tracker.value<A>(_:for:)(v12, (char *)&v22);
      swift_release_n();
      swift_release_n();
      v8 = v22;
    }
    else
    {
      type metadata accessor for EnvironmentPropertyKey<SymbolRenderingModeKey>(0, v9, v10, v11);
      BloomFilter.init(hashValue:)(v14);
      v15 = v21;
      v16 = swift_retain_n();
      v17 = specialized find1<A>(_:key:filter:)(v16, v15);
      if (v17)
        v8 = *(unsigned __int8 *)(v17 + 72);
      else
        v8 = 8;
      swift_release_n();
    }
    result = outlined destroy of ImageResolutionContext((uint64_t)v6);
    if (v8 == 8)
    {
      v18 = *(_QWORD *)(v2 + 8);
      swift_retain();
      v19 = swift_retain();
      v20 = specialized ShapeStyle.isMultiLevel(in:)(v19, v18);
      swift_release();
      result = swift_release();
      if ((v20 & 1) != 0)
      {
        LOBYTE(v8) = 3;
      }
      else if ((*(_BYTE *)(v2 + *(int *)(v4 + 40)) & 1) != 0)
      {
        if (one-time initialization token for preferredIfEnabled != -1)
          result = swift_once();
        if (static SymbolRenderingMode.preferredIfEnabled == 8)
          LOBYTE(v8) = 0;
        else
          LOBYTE(v8) = static SymbolRenderingMode.preferredIfEnabled;
      }
      else
      {
        LOBYTE(v8) = 8;
      }
    }
  }
  else
  {
    result = outlined destroy of ImageResolutionContext((uint64_t)v6);
  }
  *a1 = v8;
  return result;
}

unint64_t lazy protocol witness table accessor for type Image.SymbolRenderingModeProvider and conformance Image.SymbolRenderingModeProvider()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Image.SymbolRenderingModeProvider and conformance Image.SymbolRenderingModeProvider;
  if (!lazy protocol witness table cache variable for type Image.SymbolRenderingModeProvider and conformance Image.SymbolRenderingModeProvider)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Image.SymbolRenderingModeProvider, &unk_25064BFA8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Image.SymbolRenderingModeProvider and conformance Image.SymbolRenderingModeProvider);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Image.SymbolRenderingModeProvider and conformance Image.SymbolRenderingModeProvider;
  if (!lazy protocol witness table cache variable for type Image.SymbolRenderingModeProvider and conformance Image.SymbolRenderingModeProvider)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Image.SymbolRenderingModeProvider, &unk_25064BFA8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Image.SymbolRenderingModeProvider and conformance Image.SymbolRenderingModeProvider);
  }
  return result;
}

void type metadata accessor for EnvironmentPropertyKey<SymbolRenderingModeKey>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  uint64_t v5;

  if (!lazy cache variable for type metadata for EnvironmentPropertyKey<SymbolRenderingModeKey>)
  {
    v4 = type metadata accessor for EnvironmentPropertyKey(0, (uint64_t)&type metadata for SymbolRenderingModeKey, (uint64_t)&protocol witness table for SymbolRenderingModeKey, a4);
    if (!v5)
      atomic_store(v4, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<SymbolRenderingModeKey>);
  }
}

unint64_t lazy protocol witness table accessor for type SymbolRenderingMode.Storage and conformance SymbolRenderingMode.Storage()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SymbolRenderingMode.Storage and conformance SymbolRenderingMode.Storage;
  if (!lazy protocol witness table cache variable for type SymbolRenderingMode.Storage and conformance SymbolRenderingMode.Storage)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for SymbolRenderingMode.Storage, &type metadata for SymbolRenderingMode.Storage);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SymbolRenderingMode.Storage and conformance SymbolRenderingMode.Storage);
  }
  return result;
}

uint64_t sub_234DBD8CC(char *a1)
{
  char v2;

  v2 = *a1;
  return EnvironmentValues.symbolRenderingMode.setter(&v2);
}

ValueMetadata *type metadata accessor for SymbolRenderingMode()
{
  return &type metadata for SymbolRenderingMode;
}

ValueMetadata *type metadata accessor for SymbolRenderingMode.Storage()
{
  return &type metadata for SymbolRenderingMode.Storage;
}

uint64_t sub_234DBD924(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[2];

  v1 = *a1;
  v2 = a1[1];
  type metadata accessor for _EnvironmentKeyWritingModifier<SymbolRenderingMode?>(255);
  v5 = type metadata accessor for ModifiedContent(255, v1, v3, v4);
  v7[0] = v2;
  v7[1] = &protocol witness table for _EnvironmentKeyWritingModifier<A>;
  return MEMORY[0x23B7C9C04]("I{:\x1B̧\t", v5, v7);
}

void type metadata accessor for _EnvironmentKeyWritingModifier<SymbolRenderingMode?>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  if (!lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<SymbolRenderingMode?>)
  {
    type metadata accessor for SymbolRenderingMode?();
    v5 = type metadata accessor for _EnvironmentKeyWritingModifier(a1, v2, v3, v4);
    if (!v6)
      atomic_store(v5, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<SymbolRenderingMode?>);
  }
}

void type metadata accessor for SymbolRenderingMode?()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for SymbolRenderingMode?)
  {
    v0 = type metadata accessor for Optional();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for SymbolRenderingMode?);
  }
}

ValueMetadata *type metadata accessor for SymbolRenderingModeKey()
{
  return &type metadata for SymbolRenderingModeKey;
}

void *type metadata accessor for Image.SymbolRenderingModeProvider()
{
  return &unk_25064BFA8;
}

uint64_t storeEnumTagSinglePayload for SymbolRenderingMode(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 7 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 7) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF9)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF8)
    return ((uint64_t (*)(void))((char *)&loc_234DBDA94 + 4 * byte_2352A113D[v4]))();
  *a1 = a2 + 7;
  return ((uint64_t (*)(void))((char *)sub_234DBDAC8 + 4 * byte_2352A1138[v4]))();
}

uint64_t sub_234DBDAC8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_234DBDAD0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x234DBDAD8);
  return result;
}

uint64_t sub_234DBDAE4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x234DBDAECLL);
  *(_BYTE *)result = a2 + 7;
  return result;
}

uint64_t sub_234DBDAF0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_234DBDAF8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for SymbolRenderingMode.Storage.CodingKeys()
{
  return &unk_25062DC88;
}

void *type metadata accessor for SymbolRenderingMode.Storage.MonochromeCodingKeys()
{
  return &unk_25062DD58;
}

void *type metadata accessor for SymbolRenderingMode.Storage.MulticolorCodingKeys()
{
  return &unk_25062DD78;
}

void *type metadata accessor for SymbolRenderingMode.Storage.HierarchicalCodingKeys()
{
  return &unk_25062DD98;
}

void *type metadata accessor for SymbolRenderingMode.Storage.PaletteCodingKeys()
{
  return &unk_25062DD18;
}

void *type metadata accessor for SymbolRenderingMode.Storage.PreferredCodingKeys()
{
  return &unk_25062DD38;
}

void *type metadata accessor for SymbolRenderingMode.Storage.HierarchicalUnlessSlashedCodingKeys()
{
  return &unk_25062DDF8;
}

void *type metadata accessor for SymbolRenderingMode.Storage.HierarchicalSlashBadgeCodingKeys()
{
  return &unk_25062DDD8;
}

void *type metadata accessor for SymbolRenderingMode.Storage.PaletteSlashBadgeCodingKeys()
{
  return &unk_25062DDB8;
}

unint64_t instantiation function for generic protocol witness table for Image.SymbolRenderingModeProvider(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type Image.SymbolRenderingModeProvider and conformance Image.SymbolRenderingModeProvider();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t specialized static Image.SymbolRenderingModeProvider.== infix(_:_:)(unsigned __int8 *a1, uint64_t a2)
{
  int v2;
  int v3;

  v2 = a1[8];
  v3 = *(unsigned __int8 *)(a2 + 8);
  if (*(_QWORD *)a1 != *(_QWORD *)a2 && ((*(uint64_t (**)(void))(**(_QWORD **)a1 + 96))() & 1) == 0)
    return 0;
  if (v2 == 8)
  {
    if (v3 != 8)
      return 0;
  }
  else if (v3 == 8 || v2 != v3)
  {
    return 0;
  }
  return 1;
}

uint64_t specialized SymbolRenderingMode.Storage.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x6F7268636F6E6F6DLL && a2 == 0xEA0000000000656DLL;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6C6F6369746C756DLL && a2 == 0xEA0000000000726FLL
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6863726172656968 && a2 == 0xEC0000006C616369
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x657474656C6170 && a2 == 0xE700000000000000
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x6572726566657270 && a2 == 0xE900000000000064
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0xD000000000000019 && a2 == 0x80000002352E3210
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0xD000000000000016 && a2 == 0x80000002352E3230
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x80000002352E3250)
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 7;
    else
      return 8;
  }
}

uint64_t outlined init with copy of ImageResolutionContext(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ImageResolutionContext();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void Shader.ResolvedShader.animatableData.getter(_QWORD *a1@<X8>)
{
  void **v1;
  void *v3;
  id v4;

  v3 = *v1;
  v4 = v3;
  ShaderVectorData.init(rbShader:)(v3, a1);
}

void static ShaderVectorData.zero.getter(_QWORD *a1@<X8>)
{
  *a1 = MEMORY[0x24BEE4AF8];
}

uint64_t static ShaderVectorData.- infix(_:_:)@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X8>)
{
  return static _ShapeStyle_Pack.AnimatableData.+ infix(_:_:)(a1, a2, (uint64_t (*)(_QWORD *, uint64_t *))specialized static ShaderVectorData.-= infix(_:_:), a3);
}

Swift::Void __swiftcall ShaderVectorData.scale(by:)(Swift::Double by)
{
  uint64_t v1;
  _QWORD *v2;

  v2 = *(_QWORD **)v1;
  if (*(_QWORD *)(*(_QWORD *)v1 + 16))
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      goto LABEL_7;
    while (1)
    {
      if (v2[2])
        __asm { BR              X8 }
      __break(1u);
LABEL_7:
      v2 = specialized _ArrayBuffer._consumeAndCreateNew()(v2);
    }
  }
}

double ShaderVectorData.magnitudeSquared.getter()
{
  uint64_t v0;
  double result;

  if (!*(_QWORD *)(*(_QWORD *)v0 + 16))
    return 0.0;
  ((void (*)(double, double))((char *)&loc_234DBE89C
                                       + dword_234DBEA1C[*(unsigned __int8 *)(*(_QWORD *)v0 + 48)]))(0.0, 0.0);
  return result;
}

uint64_t static ShaderVectorData.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  return specialized static Array<A>.== infix(_:_:)(*a1, *a2);
}

id one-time initialization function for default()
{
  id result;

  result = objc_msgSend((id)objc_opt_self(), sel_defaultLibrary);
  static ShaderLibrary.default = (uint64_t)result;
  return result;
}

id static ShaderLibrary.default.getter@<X0>(_QWORD *a1@<X8>)
{
  void *v2;

  if (one-time initialization token for default != -1)
    swift_once();
  v2 = (void *)static ShaderLibrary.default;
  *a1 = static ShaderLibrary.default;
  return v2;
}

id static ShaderLibrary.bundle(_:)@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  id result;

  result = objc_msgSend((id)objc_opt_self(), sel_defaultLibraryWithBundle_, a1);
  *a2 = result;
  return result;
}

void ShaderLibrary.init(data:)(uint64_t a1@<X0>, unint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  Class isa;
  id v7;

  isa = Data._bridgeToObjectiveC()().super.isa;
  v7 = objc_msgSend((id)objc_opt_self(), sel_libraryWithData_, isa);
  outlined consume of Data._Representation(a1, a2);

  *a3 = v7;
}

uint64_t ShaderLibrary.init(url:)@<X0>(uint64_t a1@<X0>, NSURL *a2@<X8>)
{
  void *v4;
  void *v5;
  objc_class *v6;
  uint64_t v7;
  uint64_t result;

  URL._bridgeToObjectiveC()(a2);
  v5 = v4;
  v6 = (objc_class *)objc_msgSend((id)objc_opt_self(), sel_libraryWithContentsOfURL_, v4);

  v7 = type metadata accessor for URL();
  result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(a1, v7);
  a2->super.isa = v6;
  return result;
}

uint64_t static ShaderLibrary.subscript.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  void *v6;
  id v7;

  if (one-time initialization token for default != -1)
    swift_once();
  v6 = (void *)static ShaderLibrary.default;
  *a3 = static ShaderLibrary.default;
  a3[1] = a1;
  a3[2] = a2;
  v7 = v6;
  return swift_bridgeObjectRetain();
}

_QWORD *ShaderFunction.init(library:name:)@<X0>(_QWORD *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  *a4 = *result;
  a4[1] = a2;
  a4[2] = a3;
  return result;
}

uint64_t ShaderLibrary.subscript.getter@<X0>(void *a1@<X0>, void *a2@<X1>, void **a3@<X8>)
{
  void **v3;
  void *v4;
  id v5;

  v4 = *v3;
  *a3 = *v3;
  a3[1] = a1;
  a3[2] = a2;
  v5 = v4;
  return swift_bridgeObjectRetain();
}

BOOL static ShaderLibrary.== infix(_:_:)(_QWORD *a1, _QWORD *a2)
{
  return *a1 == *a2;
}

id ShaderFunction.library.getter@<X0>(void **a1@<X8>)
{
  void **v1;
  void *v2;

  v2 = *v1;
  *a1 = *v1;
  return v2;
}

void ShaderFunction.library.setter(void **a1)
{
  id *v1;
  void *v2;

  v2 = *a1;

  *v1 = v2;
}

uint64_t (*ShaderFunction.library.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t ShaderFunction.name.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 8);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t ShaderFunction.name.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 8) = a1;
  *(_QWORD *)(v2 + 16) = a2;
  return result;
}

uint64_t (*ShaderFunction.name.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t ShaderFunction.dynamicallyCall(withArguments:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  id v6;

  v3 = *(void **)v2;
  v4 = *(_QWORD *)(v2 + 8);
  v5 = *(_QWORD *)(v2 + 16);
  *(_DWORD *)(a2 + 32) = 0;
  *(_QWORD *)a2 = v3;
  *(_QWORD *)(a2 + 8) = v4;
  *(_QWORD *)(a2 + 16) = v5;
  *(_QWORD *)(a2 + 24) = a1;
  v6 = v3;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

__n128 Shader.init(function:arguments:)@<Q0>(__n128 *a1@<X0>, unint64_t a2@<X1>, __n128 *a3@<X8>)
{
  __n128 result;
  unint64_t v4;

  result = *a1;
  v4 = a1[1].n128_u64[0];
  a3[2].n128_u32[0] = 0;
  *a3 = result;
  a3[1].n128_u64[0] = v4;
  a3[1].n128_u64[1] = a2;
  return result;
}

uint64_t static ShaderFunction.== infix(_:_:)(_QWORD *a1, _QWORD *a2)
{
  if (*a1 != *a2)
    return 0;
  if (a1[1] == a2[1] && a1[2] == a2[2])
    return 1;
  else
    return _stringCompareWithSmolCheck(_:_:expecting:)();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ShaderFunction(_QWORD *a1, _QWORD *a2)
{
  if (*a1 != *a2)
    return 0;
  if (a1[1] == a2[1] && a1[2] == a2[2])
    return 1;
  else
    return _stringCompareWithSmolCheck(_:_:expecting:)();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance Shader.Argument.Storage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static Equatable.== infix(_:_:) in conformance Shader.Argument.Storage(a1, a2, a3, a4, (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))specialized static Shader.Argument.Storage.== infix(_:_:));
}

void static Shader.Argument._float(_:)(uint64_t a1@<X8>, unsigned int a2@<S0>)
{
  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 0;
}

void static Shader.Argument._float2(_:_:)(uint64_t a1@<X8>, unsigned int a2@<S0>, unsigned int a3@<S1>)
{
  *(_QWORD *)a1 = a2 | ((unint64_t)a3 << 32);
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 1;
}

void static Shader.Argument._float3(_:_:_:)(uint64_t a1@<X8>, unsigned int a2@<S0>, unsigned int a3@<S1>, unsigned int a4@<S2>)
{
  *(_QWORD *)a1 = a2 | ((unint64_t)a3 << 32);
  *(_QWORD *)(a1 + 8) = a4;
  *(_BYTE *)(a1 + 16) = 2;
}

int8x16_t static Shader.Argument._float4(_:_:_:_:)@<Q0>(int8x16_t *a1@<X8>, unsigned int a2@<S0>, int32x2_t a3@<D1>, unsigned int a4@<S2>, __int32 a5@<S3>)
{
  int8x16_t v5;
  int8x16_t result;

  a3.i32[1] = a5;
  v5.i64[0] = a2;
  v5.i64[1] = a4;
  result = vorrq_s8((int8x16_t)vshll_n_s32(a3, 0x20uLL), v5);
  *a1 = result;
  a1[1].i8[0] = 3;
  return result;
}

uint64_t static Shader.Argument.floatArray(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = a1;
  *(_QWORD *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 16) = 4;
  return swift_bridgeObjectRetain();
}

void static Shader.Argument.boundingRect.getter(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 9;
}

uint64_t static Shader.Argument.color(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = a1;
  *(_QWORD *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 16) = 5;
  return swift_retain();
}

uint64_t static Shader.Argument.colorArray(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = a1;
  *(_QWORD *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 16) = 6;
  return swift_bridgeObjectRetain();
}

uint64_t static Shader.Argument.image(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = a1;
  *(_QWORD *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 16) = 7;
  return swift_retain();
}

uint64_t static Shader.Argument.data(_:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(_QWORD *)a3 = a1;
  *(_QWORD *)(a3 + 8) = a2;
  *(_BYTE *)(a3 + 16) = 8;
  return outlined copy of Data._Representation(a1, a2);
}

void static Shader.Argument.== infix(_:_:)(uint64_t a1)
{
  specialized static Shader.Argument.Storage.== infix(_:_:)(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance Shader.Argument(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static Equatable.== infix(_:_:) in conformance Shader.Argument.Storage(a1, a2, a3, a4, (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))static Shader.Argument.Storage.== infix(_:_:));
}

uint64_t Shader.Options.rawValue.getter()
{
  unsigned int *v0;

  return *v0;
}

uint64_t Shader.Options.init(rawValue:)@<X0>(uint64_t result@<X0>, _DWORD *a2@<X8>)
{
  *a2 = result;
  return result;
}

void static Shader.Options.dithersColor.getter(_DWORD *a1@<X8>)
{
  *a1 = 1;
}

void static Shader.Options.colorFilter.getter(_DWORD *a1@<X8>)
{
  *a1 = 2;
}

void static Shader.Options.distortionFilter.getter(_DWORD *a1@<X8>)
{
  *a1 = 4;
}

uint64_t Shader.function.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  id v5;

  v2 = *(void **)v1;
  v3 = *(_QWORD *)(v1 + 8);
  v4 = *(_QWORD *)(v1 + 16);
  *a1 = *(_QWORD *)v1;
  a1[1] = v3;
  a1[2] = v4;
  v5 = v2;
  return swift_bridgeObjectRetain();
}

__n128 Shader.function.setter(__n128 *a1)
{
  uint64_t v1;
  unint64_t v2;
  void *v3;
  __n128 result;
  __n128 v5;

  v5 = *a1;
  v2 = a1[1].n128_u64[0];
  v3 = *(void **)v1;
  swift_bridgeObjectRelease();

  result = v5;
  *(__n128 *)v1 = v5;
  *(_QWORD *)(v1 + 16) = v2;
  return result;
}

uint64_t (*Shader.function.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t Shader.arguments.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t Shader.arguments.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 24) = a1;
  return result;
}

uint64_t (*Shader.arguments.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

void Shader.options.getter(_DWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_DWORD *)(v1 + 32);
}

_DWORD *Shader.options.setter(_DWORD *result)
{
  uint64_t v1;

  *(_DWORD *)(v1 + 32) = *result;
  return result;
}

uint64_t (*Shader.options.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t Shader.dithersColor.getter()
{
  uint64_t v0;

  return *(_DWORD *)(v0 + 32) & 1;
}

uint64_t Shader.dithersColor.setter(uint64_t result)
{
  uint64_t v1;

  *(_DWORD *)(v1 + 32) = *(_DWORD *)(v1 + 32) & 0xFFFFFFFE | result & 1;
  return result;
}

unsigned __int8 *(*Shader.dithersColor.modify(uint64_t a1))(unsigned __int8 *result)
{
  uint64_t v1;

  *(_QWORD *)a1 = v1;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(v1 + 32) & 1;
  return Shader.dithersColor.modify;
}

unsigned __int8 *Shader.dithersColor.modify(unsigned __int8 *result)
{
  *(_DWORD *)(*(_QWORD *)result + 32) = *(_DWORD *)(*(_QWORD *)result + 32) & 0xFFFFFFFE | result[8];
  return result;
}

id Shader.ResolvedShader.rbShader.getter()
{
  id *v0;
  id v1;
  id v2;

  v1 = *v0;
  v2 = *v0;
  return v1;
}

void Shader.ResolvedShader.rbShader.setter(void *a1)
{
  id *v1;

  *v1 = a1;
}

uint64_t (*Shader.ResolvedShader.rbShader.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

double Shader.ResolvedShader.maxSampleOffset.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 8);
}

void Shader.ResolvedShader.maxSampleOffset.setter(double a1, double a2)
{
  uint64_t v2;

  *(double *)(v2 + 8) = a1;
  *(double *)(v2 + 16) = a2;
}

uint64_t (*Shader.ResolvedShader.maxSampleOffset.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

void Shader.ResolvedShader.options.getter(_DWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_DWORD *)(v1 + 24);
}

_DWORD *Shader.ResolvedShader.options.setter(_DWORD *result)
{
  uint64_t v1;

  *(_DWORD *)(v1 + 24) = *result;
  return result;
}

uint64_t (*Shader.ResolvedShader.options.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t Shader.ResolvedShader.init(rbShader:maxSampleOffset:options:)@<X0>(uint64_t result@<X0>, int *a2@<X1>, uint64_t a3@<X8>, double a4@<D0>, double a5@<D1>)
{
  int v5;

  v5 = *a2;
  *(_QWORD *)a3 = result;
  *(double *)(a3 + 8) = a4;
  *(double *)(a3 + 16) = a5;
  *(_DWORD *)(a3 + 24) = v5;
  return result;
}

id Shader.makeRBShader(in:)(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  id v15;
  void *v16;
  id v17;
  uint64_t v18;
  char *v19;
  _DWORD v21[4];
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v33 = *MEMORY[0x24BDAC8D0];
  type metadata accessor for Date?(0, (unint64_t *)&lazy cache variable for type metadata for Text.Style?, (void (*)(uint64_t))type metadata accessor for Text.Style);
  MEMORY[0x24BDAC7A8](v3);
  v26 = (char *)v21 - v4;
  v25 = type metadata accessor for ImageResolutionContext();
  MEMORY[0x24BDAC7A8](v25);
  v24 = (char *)v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v23 = (char *)v21 - v7;
  v9 = *a1;
  v8 = a1[1];
  v11 = *(void **)v1;
  v10 = *(_QWORD *)(v1 + 8);
  v12 = *(_QWORD *)(v1 + 16);
  v13 = *(_QWORD *)(v1 + 24);
  v14 = objc_allocWithZone(MEMORY[0x24BE7EF38]);
  v15 = v11;
  swift_bridgeObjectRetain();
  v16 = (void *)MEMORY[0x23B7C5DAC](v10, v12);
  swift_bridgeObjectRelease();
  v17 = objc_msgSend(v14, sel_initWithLibrary_function_, v15, v16);

  v18 = *(_QWORD *)(v13 + 16);
  if (v18)
  {
    v21[3] = *MEMORY[0x24BE096C0];
    swift_bridgeObjectRetain();
    v27 = v13;
    v28 = v8;
    v30 = v17;
    v31 = v9;
    v22 = v18;
    v29 = v13 + 32;
    if (*(_QWORD *)(v13 + 16))
    {
      v19 = (char *)&loc_234DBF3A0 + dword_234DBFD9C[*(unsigned __int8 *)(v13 + 48)];
      v32 = 1;
      __asm { BR              X9 }
    }
    __break(1u);
    JUMPOUT(0x234DBFD94);
  }
  return v17;
}

uint64_t Shader.compile(as:)(int *a1)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  __int128 v4;

  v3 = *a1;
  v4 = *(_OWORD *)(v1 + 16);
  *(_OWORD *)(v2 + 16) = *(_OWORD *)v1;
  *(_OWORD *)(v2 + 32) = v4;
  *(_DWORD *)(v2 + 48) = *(_DWORD *)(v1 + 32);
  *(_DWORD *)(v2 + 52) = v3;
  return swift_task_switch();
}

uint64_t Shader.compile(as:)()
{
  uint64_t v0;
  id v1;
  int v2;
  uint64_t v3;
  _QWORD *v4;

  v1 = objc_msgSend((id)objc_opt_self(), sel_sharedDefaultDevice);
  *(_QWORD *)(v0 + 56) = v1;
  if (!v1)
    return (*(uint64_t (**)(void))(v0 + 8))();
  v2 = *(_DWORD *)(v0 + 52);
  v3 = swift_task_alloc();
  *(_QWORD *)(v0 + 64) = v3;
  *(_QWORD *)(v3 + 16) = v0 + 16;
  *(_DWORD *)(v3 + 24) = v2;
  *(_QWORD *)(v3 + 32) = v1;
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 72) = v4;
  *v4 = v0;
  v4[1] = Shader.compile(as:);
  return withCheckedThrowingContinuation<A>(isolation:function:_:)();
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 80) = v0;
  swift_task_dealloc();
  if (!v0)
    swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;

  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void closure #1 in Shader.compile(as:)(uint64_t a1, __int128 *a2, uint64_t a3, void *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  id v13;
  void *v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  __int128 aBlock;
  __int128 v19;
  uint64_t (*v20)(void *);
  uint64_t v21;
  __int128 v22;

  type metadata accessor for CheckedContinuation<(), Error>();
  v9 = v8;
  v10 = *(_QWORD *)(v8 - 8);
  v11 = *(_QWORD *)(v10 + 64);
  MEMORY[0x24BDAC7A8](v8);
  v12 = a2[1];
  aBlock = *a2;
  v19 = v12;
  LODWORD(v20) = *((_DWORD *)a2 + 8);
  v22 = xmmword_235260EF0;
  v13 = Shader.makeRBShader(in:)((uint64_t *)&v22);
  objc_msgSend(v13, sel_setType_, a3, aBlock, v19, v20);
  type metadata accessor for CAPresentationModifier(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
  v14 = (void *)static OS_dispatch_queue.main.getter();
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))((char *)&aBlock - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v9);
  v15 = (*(unsigned __int8 *)(v10 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  v16 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v10 + 32))(v16 + v15, (char *)&aBlock - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), v9);
  v20 = partial apply for closure #1 in closure #1 in Shader.compile(as:);
  v21 = v16;
  *(_QWORD *)&aBlock = MEMORY[0x24BDAC760];
  *((_QWORD *)&aBlock + 1) = 1107296256;
  *(_QWORD *)&v19 = thunk for @escaping @callee_guaranteed (@guaranteed Error?) -> ();
  *((_QWORD *)&v19 + 1) = &block_descriptor_16;
  v17 = _Block_copy(&aBlock);
  swift_release();
  objc_msgSend(a4, sel_compileShader_completionQueue_handler_, v13, v14, v17);
  _Block_release(v17);

}

uint64_t closure #1 in closure #1 in Shader.compile(as:)(void *a1)
{
  id v1;

  if (a1)
  {
    v1 = a1;
    type metadata accessor for CheckedContinuation<(), Error>();
    return CheckedContinuation.resume(throwing:)();
  }
  else
  {
    type metadata accessor for CheckedContinuation<(), Error>();
    return CheckedContinuation.resume(returning:)();
  }
}

void thunk for @escaping @callee_guaranteed (@guaranteed Error?) -> ()(uint64_t a1, void *a2)
{
  void (*v3)(void *);
  id v4;

  v3 = *(void (**)(void *))(a1 + 32);
  swift_retain();
  v4 = a2;
  v3(a2);
  swift_release();

}

void static Shader.UsageType.shapeStyle.getter(_DWORD *a1@<X8>)
{
  *a1 = 0;
}

void static Shader.UsageType.colorEffect.getter(_DWORD *a1@<X8>)
{
  *a1 = 1;
}

void static Shader.UsageType.distortionEffect.getter(_DWORD *a1@<X8>)
{
  *a1 = 3;
}

void static Shader.UsageType.layerEffect.getter(_DWORD *a1@<X8>)
{
  *a1 = 2;
}

void Shader.UsageType.hash(into:)()
{
  Swift::UInt32 *v0;

  Hasher._combine(_:)(*v0);
}

BOOL static Shader.UsageType.== infix(_:_:)(_DWORD *a1, _DWORD *a2)
{
  return *a1 == *a2;
}

Swift::Int Shader.UsageType.hashValue.getter()
{
  Swift::UInt32 *v0;
  Swift::UInt32 v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t View.colorEffect(_:isEnabled:)(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  int v5;
  _QWORD v7[2];
  __int128 v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  char v12;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_DWORD *)(a1 + 32) | 2;
  v7[0] = *(_QWORD *)a1;
  v7[1] = v4;
  v8 = *(_OWORD *)(a1 + 16);
  v9 = v5;
  v10 = 0;
  v11 = 0;
  v12 = a2;
  return View.modifier<A>(_:)(v7, a3, &type metadata for _ShaderFilterEffect, a4);
}

uint64_t View.layerEffect(_:maxSampleOffset:isEnabled:)(uint64_t a1, char a2, uint64_t a3, uint64_t a4, double a5, double a6)
{
  uint64_t v6;
  int v7;
  _QWORD v9[2];
  __int128 v10;
  int v11;
  double v12;
  double v13;
  char v14;

  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 32);
  v9[0] = *(_QWORD *)a1;
  v9[1] = v6;
  v10 = *(_OWORD *)(a1 + 16);
  v11 = v7;
  v12 = a5;
  v13 = a6;
  v14 = a2;
  return View.modifier<A>(_:)(v9, a3, &type metadata for _ShaderFilterEffect, a4);
}

uint64_t View.distortionEffect(_:maxSampleOffset:isEnabled:)(uint64_t a1, char a2, uint64_t a3, uint64_t a4, double a5, double a6)
{
  uint64_t v6;
  int v7;
  _QWORD v9[2];
  __int128 v10;
  int v11;
  double v12;
  double v13;
  char v14;

  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 32) | 4;
  v9[0] = *(_QWORD *)a1;
  v9[1] = v6;
  v10 = *(_OWORD *)(a1 + 16);
  v11 = v7;
  v12 = a5;
  v13 = a6;
  v14 = a2;
  return View.modifier<A>(_:)(v9, a3, &type metadata for _ShaderFilterEffect, a4);
}

uint64_t _ShaderFilterEffect.init(shader:maxSampleOffset:enabled:)@<X0>(uint64_t result@<X0>, char a2@<W1>, uint64_t a3@<X8>, double a4@<D0>, double a5@<D1>)
{
  uint64_t v5;
  int v6;

  v5 = *(_QWORD *)(result + 8);
  v6 = *(_DWORD *)(result + 32);
  *(_QWORD *)a3 = *(_QWORD *)result;
  *(_QWORD *)(a3 + 8) = v5;
  *(_OWORD *)(a3 + 16) = *(_OWORD *)(result + 16);
  *(_DWORD *)(a3 + 32) = v6;
  *(double *)(a3 + 40) = a4;
  *(double *)(a3 + 48) = a5;
  *(_BYTE *)(a3 + 56) = a2;
  return result;
}

uint64_t _ShaderFilterEffect.shader.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  id v7;

  v2 = *(void **)v1;
  v3 = *(_QWORD *)(v1 + 8);
  v4 = *(_QWORD *)(v1 + 16);
  v5 = *(_QWORD *)(v1 + 24);
  v6 = *(_DWORD *)(v1 + 32);
  *(_QWORD *)a1 = *(_QWORD *)v1;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 24) = v5;
  *(_DWORD *)(a1 + 32) = v6;
  v7 = v2;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

__n128 _ShaderFilterEffect.shader.setter(__n128 *a1)
{
  uint64_t v1;
  unint64_t v3;
  unint64_t v4;
  unsigned __int32 v5;
  void *v6;
  __n128 result;

  v3 = a1->n128_u64[0];
  v4 = a1->n128_u64[1];
  v5 = a1[2].n128_u32[0];
  v6 = *(void **)v1;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  *(_QWORD *)v1 = v3;
  *(_QWORD *)(v1 + 8) = v4;
  result = a1[1];
  *(__n128 *)(v1 + 16) = result;
  *(_DWORD *)(v1 + 32) = v5;
  return result;
}

uint64_t (*_ShaderFilterEffect.shader.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

double _ShaderFilterEffect.maxSampleOffset.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 40);
}

void _ShaderFilterEffect.maxSampleOffset.setter(double a1, double a2)
{
  uint64_t v2;

  *(double *)(v2 + 40) = a1;
  *(double *)(v2 + 48) = a2;
}

uint64_t (*_ShaderFilterEffect.maxSampleOffset.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t _ShaderFilterEffect.enabled.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 56);
}

uint64_t _ShaderFilterEffect.enabled.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 56) = result;
  return result;
}

uint64_t (*_ShaderFilterEffect.enabled.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t static _ShaderFilterEffect._makeView(modifier:inputs:body:)@<X0>(uint64_t a1@<X1>, uint64_t (*a2)(void)@<X2>, _QWORD *a3@<X8>)
{
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  _OWORD v16[5];
  int v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  v5 = *(_OWORD *)(a1 + 48);
  v16[2] = *(_OWORD *)(a1 + 32);
  v16[3] = v5;
  v16[4] = *(_OWORD *)(a1 + 64);
  v17 = *(_DWORD *)(a1 + 80);
  v6 = *(_OWORD *)(a1 + 16);
  v16[0] = *(_OWORD *)a1;
  v16[1] = v6;
  swift_beginAccess();
  type metadata accessor for PropertyList.Tracker();
  v7 = swift_allocObject();
  type metadata accessor for AtomicBuffer<TrackerData>(0, v8, v9, v10);
  v11 = swift_allocObject();
  v12 = MEMORY[0x24BEE4B00];
  *(_DWORD *)(v11 + 16) = 0;
  *(_QWORD *)(v11 + 24) = 0;
  *(_QWORD *)(v11 + 32) = v12;
  v13 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v11 + 40) = v12;
  *(_QWORD *)(v11 + 48) = v13;
  *(_BYTE *)(v11 + 56) = 0;
  *(_QWORD *)(v7 + 16) = v11;
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  lazy protocol witness table accessor for type _ShaderFilterEffect.ResolvedEffect and conformance _ShaderFilterEffect.ResolvedEffect();
  v14 = Attribute.init<A>(body:value:flags:update:)();
  swift_release();
  return specialized static RendererEffect.makeRendererEffect(effect:inputs:body:)(v14, (uint64_t)v16, a2, a3);
}

void _ShaderFilterEffect.ResolvedEffect.updateValue()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t Value;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  char v9;
  uint64_t v10;
  char v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  int v18;
  id v19;
  __int128 v20;
  id v21;
  id v22;
  __int128 v23;
  uint64_t v24[2];
  id v25;
  __int128 v26;
  uint64_t v27;
  int v28;
  uint64_t v29;

  v1 = v0;
  v29 = *MEMORY[0x24BDAC8D0];
  Value = AGGraphGetValue();
  v4 = *(void **)Value;
  v3 = *(void **)(Value + 8);
  v5 = *(_QWORD *)(Value + 16);
  v6 = *(_QWORD *)(Value + 24);
  v7 = *(_DWORD *)(Value + 32);
  v23 = *(_OWORD *)(Value + 40);
  v8 = *(unsigned __int8 *)(Value + 56);
  if ((v9 & 1) != 0)
  {
    v12 = v4;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v10 = *(_QWORD *)AGGraphGetValue();
    swift_retain();
    v21 = v4;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v11 = PropertyList.Tracker.hasDifferentUsedValues(_:)(v10);
    swift_release();
    if ((v11 & 1) == 0)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      return;
    }
  }
  v22 = v3;
  v13 = *(_QWORD *)(v1 + 8);
  PropertyList.Tracker.reset()();
  v14 = *(_QWORD *)AGGraphGetValue();
  if (v14)
    v15 = *(_QWORD *)(v14 + 64);
  else
    v15 = 0;
  v16 = *(_QWORD *)(v13 + 16);
  swift_retain_n();
  swift_retain_n();
  v17 = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v16 + 16));
  *(_QWORD *)(v16 + 24) = v15;
  os_unfair_lock_unlock((os_unfair_lock_t)(v16 + 16));
  swift_release();
  swift_release();
  swift_release();
  if (v8)
  {
    v25 = v17;
    *(_QWORD *)&v26 = v22;
    *((_QWORD *)&v26 + 1) = v5;
    v27 = v6;
    v18 = v7;
    v28 = v7;
    v24[0] = v14;
    v24[1] = v13;
    v19 = Shader.makeRBShader(in:)(v24);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    swift_release();
    swift_release();
    v20 = v23;
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    swift_release();
    swift_release();
    v19 = 0;
    v18 = 0;
    v20 = 0uLL;
  }
  v25 = v19;
  v26 = v20;
  LODWORD(v27) = v18;
  AGGraphSetOutputValue();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

}

void protocol witness for static StatefulRule.initialValue.getter in conformance _ShaderFilterEffect.ResolvedEffect(uint64_t a1@<X8>)
{
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = 1;
  *(_DWORD *)(a1 + 24) = 0;
}

void Shader.ResolvedShader.encode(to:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  double v5;
  double v6;
  Swift::UInt v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  double v15;
  uint64_t v16;
  uint64_t v17;
  objc_class *v18;
  char *v19;
  double *v20;
  id v21;
  _QWORD *v22;
  id v23;
  unint64_t v24;
  unint64_t v25;
  objc_super v26;
  Swift::UInt v27;

  v3 = v1;
  v5 = *(double *)(v3 + 8);
  v6 = *(double *)(v3 + 16);
  v7 = *(unsigned int *)(v3 + 24);
  if (*(_QWORD *)v3)
  {
    v8 = *(id *)v3;
    ProtobufEncoder.encodeVarint(_:)(0xAuLL);
    v9 = *(_QWORD *)(a1 + 8);
    v10 = *(_QWORD **)(a1 + 24);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v10[2] + 1, 1, v10);
    v12 = v10[2];
    v11 = v10[3];
    v13 = v12 + 1;
    if (v12 >= v11 >> 1)
      v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v11 > 1), v12 + 1, 1, v10);
    v10[2] = v13;
    v10[v12 + 4] = v9;
    *(_QWORD *)(a1 + 24) = v10;
    v14 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
LABEL_21:
      v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v8[2] + 1, 1, v8);
      goto LABEL_13;
    }
    v27 = v7;
    *(_QWORD *)(a1 + 8) = v14;
    v15 = *(double *)a1;
    v16 = *(_QWORD *)(a1 + 16);
    v17 = *(_QWORD *)(a1 + 32);
    v18 = (objc_class *)type metadata accessor for RBDisplayListEncoderDelegate();
    v19 = (char *)objc_allocWithZone(v18);
    v20 = (double *)&v19[OBJC_IVAR____TtC7SwiftUI28RBDisplayListEncoderDelegate_encoder];
    *v20 = v15;
    *((_QWORD *)v20 + 1) = v14;
    *((_QWORD *)v20 + 2) = v16;
    *((_QWORD *)v20 + 3) = v10;
    *((_QWORD *)v20 + 4) = v17;
    v26.receiver = v19;
    v26.super_class = v18;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v21 = objc_msgSendSuper2(&v26, sel_init);
    v22 = v8;
    v23 = v21;
    specialized ProtobufEncoder.encodeAttachedValue<A>(key:data:)(v22, a1, v22, v23);
    if (v2)
    {

      return;
    }

    ProtobufEncoder.endLengthDelimited()();
    v7 = v27;
  }
  if (v5 == 0.0 && v6 == 0.0)
    goto LABEL_17;
  ProtobufEncoder.encodeVarint(_:)(0x12uLL);
  v13 = *(_QWORD *)(a1 + 8);
  v8 = *(_QWORD **)(a1 + 24);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    goto LABEL_21;
LABEL_13:
  v25 = v8[2];
  v24 = v8[3];
  if (v25 >= v24 >> 1)
    v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v24 > 1), v25 + 1, 1, v8);
  v8[2] = v25 + 1;
  v8[v25 + 4] = v13;
  *(_QWORD *)(a1 + 24) = v8;
  if (__OFADD__(v13, 1))
  {
    __break(1u);
    return;
  }
  *(_QWORD *)(a1 + 8) = v13 + 1;
  CGSize.encode(to:)((double *)a1, v5, v6);
  ProtobufEncoder.endLengthDelimited()();
LABEL_17:
  if ((_DWORD)v7)
  {
    ProtobufEncoder.encodeVarint(_:)(0x18uLL);
    ProtobufEncoder.encodeVarint(_:)(v7);
  }
}

void *closure #1 in closure #1 in Shader.ResolvedShader.encode(to:)(void *a1, uint64_t a2)
{
  id v2;
  id v3;
  void *v4;
  id v6[2];

  v6[1] = *(id *)MEMORY[0x24BDAC8D0];
  v6[0] = 0;
  v2 = objc_msgSend(a1, sel_encodedDataForDelegate_error_, a2, v6);
  v3 = v6[0];
  if (v2)
  {
    v4 = (void *)static Data._unconditionallyBridgeFromObjectiveC(_:)();

  }
  else
  {
    v4 = v3;
    _convertNSErrorToError(_:)();

    swift_willThrow();
  }
  return v4;
}

void Shader.ResolvedShader.init(from:)(_QWORD *a1@<X0>, double *a2@<X8>)
{
  uint64_t v2;
  _QWORD *v3;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  double v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  objc_class *v20;
  char *v21;
  char *v22;
  uint64_t v23;
  id v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  void *v29;
  _QWORD *v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  double v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  double *v56;
  uint64_t v57;
  void *v58;
  __int128 v59;
  objc_super v60;
  uint64_t v61;

  v6 = a1[1];
  v7 = a1[2];
  if (v6 >= v7)
  {
    LODWORD(v8) = 0;
    v9 = 0;
    v10 = 0;
    v11 = 0.0;
LABEL_4:
    a1[3] = 0;
    *(_QWORD *)a2 = v9;
    a2[1] = v11;
    *((_QWORD *)a2 + 2) = v10;
    *((_DWORD *)a2 + 6) = v8;
    return;
  }
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = 0.0;
  v56 = a2;
  while (1)
  {
    v13 = a1[3];
    if (v13)
    {
      v14 = a1[4];
      if (v6 < v14)
        goto LABEL_14;
      if (v14 < v6)
        goto LABEL_62;
      a1[3] = 0;
    }
    v15 = ProtobufDecoder.decodeVarint()();
    if (v2)
      goto LABEL_67;
    v13 = v15;
    if (v15 <= 7)
      goto LABEL_62;
LABEL_14:
    v16 = v13 >> 3;
    if (v13 >> 3 == 3)
    {
      if ((v13 & 7) != 0)
      {
        if ((v13 & 7) != 2)
          goto LABEL_62;
        v35 = ProtobufDecoder.decodeVarint()();
        if (v2)
          goto LABEL_67;
        if (v35 < 0)
          goto LABEL_73;
        v36 = a1[1] + v35;
        if (v7 < v36)
          goto LABEL_62;
        a1[3] = 24;
        a1[4] = v36;
      }
      v37 = ProtobufDecoder.decodeVarint()();
      if (v2)
        goto LABEL_67;
      v8 = v37;
      goto LABEL_7;
    }
    if (v16 != 2)
      break;
    if ((v13 & 7) != 2)
      goto LABEL_62;
    v3 = (_QWORD *)a1[5];
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3[2] + 1, 1, v3);
    v39 = v3[2];
    v38 = v3[3];
    if (v39 >= v38 >> 1)
      v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v38 > 1), v39 + 1, 1, v3);
    v3[2] = v39 + 1;
    v3[v39 + 4] = v7;
    a1[5] = v3;
    v40 = ProtobufDecoder.decodeVarint()();
    if (v2)
      goto LABEL_67;
    if (v40 < 0)
      goto LABEL_69;
    v41 = a1[1] + v40;
    if (v7 < v41)
      goto LABEL_62;
    a1[2] = v41;
    v42 = specialized CGPoint.init(from:)(a1);
    v3 = (_QWORD *)a1[5];
    if (!v3[2])
      goto LABEL_71;
    v11 = v42;
    v10 = v43;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
    {
      v44 = v3[2];
      if (!v44)
        goto LABEL_61;
    }
    else
    {
      v3 = specialized _ArrayBuffer._consumeAndCreateNew()(v3);
      v44 = v3[2];
      if (!v44)
      {
LABEL_61:
        __break(1u);
LABEL_62:
        lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
        swift_allocError();
        swift_willThrow();
        goto LABEL_67;
      }
    }
    v45 = v44 - 1;
    v46 = v3[v45 + 4];
    v3[2] = v45;
    a1[5] = v3;
    a1[2] = v46;
LABEL_7:
    v6 = a1[1];
    v7 = a1[2];
    if (v6 >= v7)
      goto LABEL_4;
  }
  if (v16 != 1)
  {
    switch(v13 & 7)
    {
      case 0uLL:
        ProtobufDecoder.decodeVarint()();
        if (v2)
          goto LABEL_67;
        goto LABEL_7;
      case 1uLL:
        v12 = a1[1] + 8;
        if (v7 < v12)
          goto LABEL_62;
        goto LABEL_6;
      case 2uLL:
        v47 = ProtobufDecoder.decodeVarint()();
        if (v2)
          goto LABEL_67;
        if (v47 < 0)
          goto LABEL_74;
        v12 = a1[1] + v47;
        if (v7 < v12)
          goto LABEL_62;
LABEL_6:
        a1[1] = v12;
        break;
      case 5uLL:
        v12 = a1[1] + 4;
        if (v7 < v12)
          goto LABEL_62;
        goto LABEL_6;
      default:
        goto LABEL_62;
    }
    goto LABEL_7;
  }
  v57 = v8;
  v58 = v9;
  v9 = (void *)a1[2];
  v61 = a1[3];
  v17 = a1[4];
  v18 = (_QWORD *)a1[5];
  v19 = a1[6];
  v20 = (objc_class *)type metadata accessor for RBDisplayListDecoderDelegate();
  v59 = *(_OWORD *)a1;
  v21 = (char *)objc_allocWithZone(v20);
  v22 = &v21[OBJC_IVAR____TtC7SwiftUI28RBDisplayListDecoderDelegate_decoder];
  *(_OWORD *)v22 = v59;
  a2 = (double *)v9;
  v23 = v61;
  *((_QWORD *)v22 + 2) = v9;
  *((_QWORD *)v22 + 3) = v23;
  *((_QWORD *)v22 + 4) = v17;
  *((_QWORD *)v22 + 5) = v18;
  *((_QWORD *)v22 + 6) = v19;
  v60.receiver = v21;
  v60.super_class = v20;
  v24 = (id)v59;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v3 = objc_msgSendSuper2(&v60, sel_init);
  if ((v13 & 7) != 2)
    goto LABEL_63;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v18 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v18[2] + 1, 1, v18);
  v8 = v57;
  v26 = v18[2];
  v25 = v18[3];
  if (v26 >= v25 >> 1)
    v18 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v25 > 1), v26 + 1, 1, v18);
  v18[2] = v26 + 1;
  v18[v26 + 4] = v9;
  a1[5] = v18;
  v27 = ProtobufDecoder.decodeVarint()();
  if (v2)
    goto LABEL_64;
  if ((v27 & 0x8000000000000000) == 0)
  {
    v28 = a1[1] + v27;
    if ((unint64_t)v9 < v28)
    {
LABEL_63:
      lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
      swift_allocError();
      swift_willThrow();
LABEL_64:

      v9 = v58;
      goto LABEL_67;
    }
    a1[2] = v28;
    v3 = v3;
    v29 = specialized ProtobufDecoder.decodeAttachedValue<A>(as:generator:)((uint64_t)a1, v3);
    v9 = v58;
    v30 = (_QWORD *)a1[5];
    if (!v30[2])
      goto LABEL_70;
    v31 = v29;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
    {
      v32 = v30[2];
      if (!v32)
        goto LABEL_72;
    }
    else
    {
      v30 = specialized _ArrayBuffer._consumeAndCreateNew()(v30);
      v32 = v30[2];
      if (!v32)
        goto LABEL_72;
    }
    v33 = v32 - 1;
    v34 = v30[v33 + 4];
    v30[2] = v33;

    a1[5] = v30;
    a1[2] = v34;

    v9 = v31;
    a2 = v56;
    goto LABEL_7;
  }
  __break(1u);
LABEL_69:
  __break(1u);
LABEL_70:
  __break(1u);
LABEL_71:
  __break(1u);
LABEL_72:
  __break(1u);
LABEL_73:
  __break(1u);
LABEL_74:
  __break(1u);
  __break(1u);
  v52 = specialized _ArrayBuffer._consumeAndCreateNew()(a2);
  v53 = v52[2];
  if (v53)
  {
    v48 = v53 - 1;
    v49 = v52[v48 + 4];
    v52[2] = v48;

    a1[5] = v52;
    a1[2] = v49;
  }
  else
  {
    __break(1u);
    __break(1u);
    v54 = specialized _ArrayBuffer._consumeAndCreateNew()(v52);
    v55 = v54[2];
    if (!v55)
    {
      __break(1u);
      JUMPOUT(0x234DC1250);
    }
    v50 = v55 - 1;
    v51 = v54[v50 + 4];
    v54[2] = v50;
    a1[5] = v54;
    a1[2] = v51;
  }
LABEL_67:

}

id closure #1 in closure #1 in Shader.ResolvedShader.init(from:)@<X0>(uint64_t a1@<X2>, _QWORD *a2@<X8>)
{
  void *v4;
  Class isa;
  id v6;
  id v7;
  id v9;
  id v10[2];

  v10[1] = *(id *)MEMORY[0x24BDAC8D0];
  v4 = (void *)objc_opt_self();
  isa = Data._bridgeToObjectiveC()().super.isa;
  v10[0] = 0;
  v6 = objc_msgSend(v4, sel_decodedObjectWithData_delegate_error_, isa, a1, v10);

  v7 = v10[0];
  if (v6)
  {
    *a2 = v6;
    return v7;
  }
  else
  {
    v9 = v10[0];
    _convertNSErrorToError(_:)();

    return (id)swift_willThrow();
  }
}

void protocol witness for ProtobufEncodableMessage.encode(to:) in conformance Shader.ResolvedShader(uint64_t a1)
{
  Shader.ResolvedShader.encode(to:)(a1);
}

void protocol witness for ProtobufDecodableMessage.init(from:) in conformance Shader.ResolvedShader(_QWORD *a1@<X0>, double *a2@<X8>)
{
  Shader.ResolvedShader.init(from:)(a1, a2);
}

void Shader.ResolvedShader.draw(path:style:in:bounds:)(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  char v26;
  _QWORD v28[5];
  char v29;
  _BYTE v30[160];
  _QWORD v31[3];
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD v37[5];
  _BYTE v38[48];

  outlined init with take of CGRect?(a4, (uint64_t)v37);
  v8 = v37[0];
  v9 = v37[1];
  v10 = v37[2];
  v11 = v37[3];
  v12 = *a2;
  v13 = a2[1];
  v14 = a2[2];
  v15 = a2[3];
  v16 = a2[4];
  v26 = *((_BYTE *)a2 + 40);
  v17 = *(void **)v4;
  v18 = *(_QWORD *)(v4 + 8);
  v19 = *(_QWORD *)(v4 + 16);
  v20 = *(_DWORD *)(v4 + 24);
  outlined init with take of CGRect?(a4, (uint64_t)v38);
  if (v38[32] == 1)
  {
    Path.boundingRect.getter();
    v8 = v21;
    v9 = v22;
    v10 = v23;
    v11 = v24;
  }
  v31[0] = v17;
  v31[1] = v18;
  v31[2] = v19;
  v32 = v20;
  v33 = v8;
  v34 = v9;
  v35 = v10;
  v36 = v11;
  _s7SwiftUI15GraphicsContextV15ResolvedShadingOWOi2_((uint64_t)v31);
  outlined init with take of GraphicsContext.ResolvedShading((uint64_t)v31, (uint64_t)v30);
  v28[0] = v12;
  v28[1] = v13;
  v28[2] = v14;
  v28[3] = v15;
  v28[4] = v16;
  v29 = v26;
  v25 = v17;
  GraphicsContext.draw(_:with:style:)(a1, (uint64_t)v30, (uint64_t)v28, a3);

}

uint64_t Shader.ResolvedShader.isCALayerCompatible.getter()
{
  return 0;
}

void static Shader.ResolvedShader.leafProtobufTag.getter(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 8;
  *(_BYTE *)(a1 + 8) = 0;
}

uint64_t Shader.ResolvedShader.rbFillFlags.getter()
{
  uint64_t v0;

  return *(_DWORD *)(v0 + 24) & 1;
}

void protocol witness for ResolvedPaint.draw(path:style:in:bounds:) in conformance Shader.ResolvedShader(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  char v26;
  _QWORD v28[5];
  char v29;
  _BYTE v30[160];
  _QWORD v31[3];
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD v37[5];
  _BYTE v38[48];

  outlined init with take of CGRect?(a4, (uint64_t)v37);
  v8 = v37[0];
  v9 = v37[1];
  v10 = v37[2];
  v11 = v37[3];
  v12 = *a2;
  v13 = a2[1];
  v14 = a2[2];
  v15 = a2[3];
  v16 = a2[4];
  v26 = *((_BYTE *)a2 + 40);
  v17 = *(void **)v4;
  v18 = *(_QWORD *)(v4 + 8);
  v19 = *(_QWORD *)(v4 + 16);
  v20 = *(_DWORD *)(v4 + 24);
  outlined init with take of CGRect?(a4, (uint64_t)v38);
  if (v38[32] == 1)
  {
    Path.boundingRect.getter();
    v8 = v21;
    v9 = v22;
    v10 = v23;
    v11 = v24;
  }
  v31[0] = v17;
  v31[1] = v18;
  v31[2] = v19;
  v32 = v20;
  v33 = v8;
  v34 = v9;
  v35 = v10;
  v36 = v11;
  _s7SwiftUI15GraphicsContextV15ResolvedShadingOWOi2_((uint64_t)v31);
  outlined init with take of GraphicsContext.ResolvedShading((uint64_t)v31, (uint64_t)v30);
  v28[0] = v12;
  v28[1] = v13;
  v28[2] = v14;
  v28[3] = v15;
  v28[4] = v16;
  v29 = v26;
  v25 = v17;
  GraphicsContext.draw(_:with:style:)(a1, (uint64_t)v30, (uint64_t)v28, a3);

}

void protocol witness for static ResolvedPaint.leafProtobufTag.getter in conformance Shader.ResolvedShader(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 8;
  *(_BYTE *)(a1 + 8) = 0;
}

void key path setter for Shader.ResolvedShader.animatableData : Shader.ResolvedShader(uint64_t a1, void **a2)
{
  void *v3;
  void *v4;

  v3 = *a2;
  swift_bridgeObjectRetain();
  v4 = ShaderVectorData.updating(rbShader:)(v3);
  swift_bridgeObjectRelease();

  *a2 = v4;
}

void Shader.ResolvedShader.animatableData.setter()
{
  void **v0;
  void **v1;
  void *v2;
  void *v3;

  v1 = v0;
  v2 = *v0;
  v3 = ShaderVectorData.updating(rbShader:)(*v0);
  swift_bridgeObjectRelease();

  *v1 = v3;
}

void ShaderVectorData.init(rbShader:)(void *a1@<X0>, _QWORD *a2@<X8>)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  int *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char v13;
  char *v14;
  unint64_t v15;
  int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t v22;
  int v23;
  uint64_t v24;
  unsigned int *v25;

  if (a1)
  {
    v4 = (unint64_t)objc_msgSend(a1, sel_numberOfArguments);
    if ((v4 & 0x8000000000000000) != 0)
      goto LABEL_42;
    v5 = v4;
    if (v4)
    {
      v6 = 0;
      v7 = (_QWORD *)MEMORY[0x24BEE4AF8];
      while (1)
      {
        if (v6 == v5)
        {
          __break(1u);
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          JUMPOUT(0x234DC19B8);
        }
        objc_msgSend(a1, sel_argumentAtIndex_, v6);
        v10 = v24;
        v9 = (int *)v25;
        if (v24 == 1)
        {
          switch(v23)
          {
            case 1:
              v12 = 0;
              v13 = 0;
              v11 = (char *)*v25;
              break;
            case 2:
              v12 = 0;
              v11 = *(char **)v25;
              v13 = 1;
              break;
            case 3:
              v11 = *(char **)v25;
              v12 = v25[2];
              v13 = 2;
              break;
            case 4:
            case 5:
              v11 = *(char **)v25;
              v12 = *((_QWORD *)v25 + 1);
              v13 = 3;
              break;
            default:
              v11 = 0;
              v12 = 0;
              v13 = 5;
              break;
          }
        }
        else
        {
          if (v23 != 1)
          {
            if (v23 != 5)
            {
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
                v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v7[2] + 1, 1, v7);
              v19 = v7[2];
              v18 = v7[3];
              if (v19 >= v18 >> 1)
                v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v18 > 1), v19 + 1, 1, v7);
              v7[2] = v19 + 1;
              v20 = &v7[3 * v19];
              v20[4] = 0;
              v20[5] = 0;
              *((_BYTE *)v20 + 48) = 5;
              goto LABEL_6;
            }
            if ((unint64_t)(v24 - 0x2000000000000000) >> 62 != 3)
              goto LABEL_41;
            v10 = 4 * v24;
          }
          v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v10 & ~(v10 >> 63), 0, MEMORY[0x24BEE4AF8]);
          if (v10 < 0)
            goto LABEL_40;
          v11 = v14;
          if (v10)
          {
            v15 = *((_QWORD *)v14 + 2);
            do
            {
              v16 = *v9;
              v17 = *((_QWORD *)v11 + 3);
              if (v15 >= v17 >> 1)
                v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v17 > 1), v15 + 1, 1, v11);
              *((_QWORD *)v11 + 2) = v15 + 1;
              *(_DWORD *)&v11[4 * v15 + 32] = v16;
              ++v9;
              ++v15;
              --v10;
            }
            while (v10);
          }
          v12 = 0;
          v13 = 4;
        }
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v7[2] + 1, 1, v7);
        v22 = v7[2];
        v21 = v7[3];
        if (v22 >= v21 >> 1)
          v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v21 > 1), v22 + 1, 1, v7);
        v7[2] = v22 + 1;
        v8 = &v7[3 * v22];
        v8[4] = v11;
        v8[5] = v12;
        *((_BYTE *)v8 + 48) = v13;
LABEL_6:
        if (++v6 == v5)
          goto LABEL_37;
      }
    }
    v7 = (_QWORD *)MEMORY[0x24BEE4AF8];
LABEL_37:

  }
  else
  {
    v7 = (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  *a2 = v7;
}

void *ShaderVectorData.updating(rbShader:)(void *a1)
{
  uint64_t *v1;
  uint64_t v2;
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  if (!a1)
    return 0;
  v2 = *v1;
  v3 = a1;
  objc_msgSend(v3, sel_copy);
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  type metadata accessor for CAPresentationModifier(0, &lazy cache variable for type metadata for RBShader);
  swift_dynamicCast();
  v4 = v15;
  v5 = *(_QWORD *)(v2 + 16);
  if (v5)
  {
    swift_bridgeObjectRetain();
    v6 = 0;
    v7 = (char *)(v2 + 48);
    do
    {
      v9 = *((_QWORD *)v7 - 2);
      v8 = *((_QWORD *)v7 - 1);
      v10 = *v7;
      outlined copy of ShaderVectorData.Element(v9, v8, *v7);
      objc_msgSend(v3, sel_argumentAtIndex_, v6);
      switch((int)v16)
      {
        case 1:
          if (v10 == 4)
          {
            objc_msgSend(v15, sel_setArgumentBytes_atIndex_type_count_flags_, v9 + 32, v6, 1, *(_QWORD *)(v9 + 16), HIDWORD(v16));
            goto LABEL_22;
          }
          if (v10 == 3)
          {
            v16 = v9;
            v17 = v8;
          }
          else
          {
            if (v10)
              goto LABEL_18;
            LODWORD(v16) = v9;
          }
          objc_msgSend(v15, sel_setArgumentBytes_atIndex_type_count_flags_, &v16, v6, 1, 1);
          break;
        case 2:
          if (v10 != 1)
            goto LABEL_18;
          v16 = v9;
          objc_msgSend(v15, sel_setArgumentBytes_atIndex_type_count_flags_, &v16, v6, 2, 1);
          break;
        case 3:
          if (v10 != 2)
            goto LABEL_18;
          v16 = v9;
          LODWORD(v17) = v8;
          objc_msgSend(v15, sel_setArgumentBytes_atIndex_type_count_flags_, &v16, v6, 3, 1);
          break;
        case 5:
          if (v10 == 4)
          {
            objc_msgSend(v15, sel_setArgumentBytes_atIndex_type_count_flags_, v9 + 32, v6, 5, *(_QWORD *)(v9 + 16) >> 2, HIDWORD(v16));
LABEL_22:
            v11 = v9;
            v12 = v8;
            v13 = 4;
            goto LABEL_19;
          }
          if (v10 != 3)
            goto LABEL_18;
          v16 = v9;
          v17 = v8;
          objc_msgSend(v15, sel_setArgumentBytes_atIndex_type_count_flags_, &v16, v6, 5, 1);
          break;
        default:
LABEL_18:
          v11 = v9;
          v12 = v8;
          v13 = v10;
LABEL_19:
          outlined consume of ShaderVectorData.Element(v11, v12, v13);
          break;
      }
      ++v6;
      v7 += 24;
    }
    while (v5 != v6);

    swift_bridgeObjectRelease();
  }
  else
  {

  }
  return v4;
}

void (*Shader.ResolvedShader.animatableData.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  void **v1;
  void *v3;
  id v4;

  a1[1] = v1;
  v3 = *v1;
  v4 = v3;
  ShaderVectorData.init(rbShader:)(v3, a1);
  return Shader.ResolvedShader.animatableData.modify;
}

void Shader.ResolvedShader.animatableData.modify(uint64_t a1, char a2)
{
  void **v2;
  void *v3;
  void *v4;
  void *v5;

  v2 = *(void ***)(a1 + 8);
  v3 = *v2;
  if ((a2 & 1) != 0)
  {
    swift_bridgeObjectRetain();
    v4 = ShaderVectorData.updating(rbShader:)(v3);
    swift_bridgeObjectRelease();

    *v2 = v4;
    swift_bridgeObjectRelease();
  }
  else
  {
    v5 = ShaderVectorData.updating(rbShader:)(*v2);
    swift_bridgeObjectRelease();

    *v2 = v5;
  }
}

void protocol witness for Animatable.animatableData.getter in conformance Shader.ResolvedShader(_QWORD *a1@<X8>)
{
  void **v1;
  void *v3;
  id v4;

  v3 = *v1;
  v4 = v3;
  ShaderVectorData.init(rbShader:)(v3, a1);
}

void protocol witness for Animatable.animatableData.setter in conformance Shader.ResolvedShader()
{
  void **v0;
  void **v1;
  void *v2;
  void *v3;

  v1 = v0;
  v2 = *v0;
  v3 = ShaderVectorData.updating(rbShader:)(*v0);
  swift_bridgeObjectRelease();

  *v1 = v3;
}

void (*protocol witness for Animatable.animatableData.modify in conformance Shader.ResolvedShader(_QWORD *a1))(_QWORD *a1)
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = Shader.ResolvedShader.animatableData.modify(v2);
  return protocol witness for Animatable.animatableData.modify in conformance LinearGradient._Paint;
}

id Shader.ResolvedShader.effectValue(size:)@<X0>(uint64_t a1@<X8>, double a2@<D0>, double a3@<D1>)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v12;

  v7 = *(_QWORD *)(v3 + 8);
  v12 = *(void **)v3;
  v8 = *(_QWORD *)(v3 + 16);
  v9 = *(unsigned int *)(v3 + 24);
  v10 = swift_allocObject();
  *(_QWORD *)(v10 + 16) = v12;
  *(_QWORD *)(v10 + 24) = v7;
  *(_QWORD *)(v10 + 32) = v8;
  *(_QWORD *)(v10 + 40) = v9;
  *(double *)(v10 + 48) = a2;
  *(double *)(v10 + 56) = a3;
  *(_OWORD *)(v10 + 64) = 0u;
  *(_OWORD *)(v10 + 80) = 0u;
  *(_OWORD *)(v10 + 96) = 0u;
  *(_OWORD *)(v10 + 112) = 0u;
  *(_DWORD *)(v10 + 128) = 0;
  *(_BYTE *)(v10 + 132) = 15;
  *(_QWORD *)a1 = v10;
  *(_DWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 12) = 9;
  return v12;
}

id protocol witness for _RendererEffect.effectValue(size:) in conformance Shader.ResolvedShader@<X0>(uint64_t a1@<X8>, double a2@<D0>, double a3@<D1>)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v12;

  v7 = *(_QWORD *)(v3 + 8);
  v12 = *(void **)v3;
  v8 = *(_QWORD *)(v3 + 16);
  v9 = *(unsigned int *)(v3 + 24);
  v10 = swift_allocObject();
  *(_QWORD *)(v10 + 16) = v12;
  *(_QWORD *)(v10 + 24) = v7;
  *(_QWORD *)(v10 + 32) = v8;
  *(_QWORD *)(v10 + 40) = v9;
  *(double *)(v10 + 48) = a2;
  *(double *)(v10 + 56) = a3;
  *(_OWORD *)(v10 + 64) = 0u;
  *(_OWORD *)(v10 + 80) = 0u;
  *(_OWORD *)(v10 + 96) = 0u;
  *(_OWORD *)(v10 + 112) = 0u;
  *(_DWORD *)(v10 + 128) = 0;
  *(_BYTE *)(v10 + 132) = 15;
  *(_QWORD *)a1 = v10;
  *(_DWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 12) = 9;
  return v12;
}

uint64_t static ShaderVectorData.+ infix(_:_:)@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X8>)
{
  return static _ShapeStyle_Pack.AnimatableData.+ infix(_:_:)(a1, a2, (uint64_t (*)(_QWORD *, uint64_t *))specialized static ShaderVectorData.+= infix(_:_:), a3);
}

Swift::Void __swiftcall ShaderVectorData.Element.scale(by:)(Swift::Double by)
{
  __asm { BR              X9 }
}

void sub_234DC1FCC(double a1, double a2, double a3, float a4)
{
  uint64_t v4;
  char v5;
  double v6;
  float v7;

  v7 = v6;
  *(_OWORD *)v4 = COERCE_UNSIGNED_INT(v7 * a4);
  *(_BYTE *)(v4 + 16) = v5;
}

uint64_t ShaderVectorData.Element.magnitudeSquared.getter(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  return ((uint64_t (*)(double))((char *)sub_234DC21B0 + 4 * byte_2352A1A4B[a3]))(0.0);
}

double sub_234DC21B0(int a1)
{
  return (float)(*(float *)&a1 * *(float *)&a1);
}

uint64_t protocol witness for static AdditiveArithmetic.+ infix(_:_:) in conformance ShaderVectorData@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X8>)
{
  return protocol witness for static AdditiveArithmetic.+ infix(_:_:) in conformance _ShapeStyle_Pack.AnimatableData(a1, a2, (uint64_t (*)(_QWORD *, uint64_t *))specialized static ShaderVectorData.+= infix(_:_:), a3);
}

uint64_t protocol witness for static AdditiveArithmetic.- infix(_:_:) in conformance ShaderVectorData@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X8>)
{
  return protocol witness for static AdditiveArithmetic.+ infix(_:_:) in conformance _ShapeStyle_Pack.AnimatableData(a1, a2, (uint64_t (*)(_QWORD *, uint64_t *))specialized static ShaderVectorData.-= infix(_:_:), a3);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ShaderVectorData(uint64_t *a1, uint64_t *a2)
{
  return specialized static Array<A>.== infix(_:_:)(*a1, *a2);
}

void protocol witness for static AdditiveArithmetic.zero.getter in conformance ShaderVectorData.Element(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 5;
}

double protocol witness for static AdditiveArithmetic.+ infix(_:_:) in conformance ShaderVectorData.Element@<D0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  return protocol witness for static AdditiveArithmetic.+ infix(_:_:) in conformance ShaderVectorData.Element(a1, a2, (void (*)(__int128 *, uint64_t, uint64_t, uint64_t))specialized static ShaderVectorData.Element.+= infix(_:_:), a3);
}

void protocol witness for static AdditiveArithmetic.+= infix(_:_:) in conformance ShaderVectorData.Element(uint64_t a1)
{
  specialized static ShaderVectorData.Element.+= infix(_:_:)(a1);
}

double protocol witness for static AdditiveArithmetic.- infix(_:_:) in conformance ShaderVectorData.Element@<D0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  return protocol witness for static AdditiveArithmetic.+ infix(_:_:) in conformance ShaderVectorData.Element(a1, a2, (void (*)(__int128 *, uint64_t, uint64_t, uint64_t))specialized static ShaderVectorData.Element.-= infix(_:_:), a3);
}

double protocol witness for static AdditiveArithmetic.+ infix(_:_:) in conformance ShaderVectorData.Element@<D0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, void (*a3)(__int128 *, uint64_t, uint64_t, uint64_t)@<X4>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  char v11;
  double result;
  __int128 v13;
  char v14;

  v6 = *(_QWORD *)(a1 + 8);
  v7 = *a2;
  v8 = a2[1];
  v9 = *(_BYTE *)(a1 + 16);
  v10 = *((unsigned __int8 *)a2 + 16);
  *(_QWORD *)&v13 = *(_QWORD *)a1;
  *((_QWORD *)&v13 + 1) = v6;
  v14 = v9;
  outlined copy of ShaderVectorData.Element(v13, v6, v9);
  a3(&v13, v7, v8, v10);
  v11 = v14;
  result = *(double *)&v13;
  *(_OWORD *)a4 = v13;
  *(_BYTE *)(a4 + 16) = v11;
  return result;
}

void protocol witness for static AdditiveArithmetic.-= infix(_:_:) in conformance ShaderVectorData.Element(uint64_t a1)
{
  specialized static ShaderVectorData.Element.-= infix(_:_:)(a1);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ShaderVectorData.Element(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static Equatable.== infix(_:_:) in conformance Shader.Argument.Storage(a1, a2, a3, a4, (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))specialized static ShaderVectorData.Element.== infix(_:_:));
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance Shader.Argument.Storage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  return a5(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(unsigned __int8 *)(a1 + 16), *(_QWORD *)a2, *(_QWORD *)(a2 + 8), *(unsigned __int8 *)(a2 + 16));
}

uint64_t protocol witness for VectorArithmetic.magnitudeSquared.getter in conformance ShaderVectorData.Element()
{
  uint64_t v0;

  return ShaderVectorData.Element.magnitudeSquared.getter(*(_QWORD *)v0, *(_QWORD *)(v0 + 8), *(_BYTE *)(v0 + 16));
}

uint64_t specialized static ShaderVectorData.Element.== infix(_:_:)(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  return ((uint64_t (*)(void))((char *)sub_234DC2438 + 4 * byte_2352A1A51[a3]))();
}

BOOL sub_234DC2438(int a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, char a6)
{
  return !a6 && *(float *)&a1 == *(float *)&a4;
}

BOOL specialized static Shader.ResolvedShader.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  void *v2;
  double v3;
  double v4;
  int v5;
  void *v6;
  double v7;
  double v8;
  int v9;
  id v10;
  id v11;
  char v12;
  _BOOL8 result;

  v2 = *(void **)a1;
  v4 = *(double *)(a1 + 8);
  v3 = *(double *)(a1 + 16);
  v5 = *(_DWORD *)(a1 + 24);
  v6 = *(void **)a2;
  v8 = *(double *)(a2 + 8);
  v7 = *(double *)(a2 + 16);
  v9 = *(_DWORD *)(a2 + 24);
  if (!*(_QWORD *)a1)
  {
    if (!v6 && v4 == v8 && v3 == v7)
      return v5 == v9;
    return 0;
  }
  if (!v6)
    return 0;
  type metadata accessor for CAPresentationModifier(0, &lazy cache variable for type metadata for RBShader);
  v10 = v6;
  v11 = v2;
  v12 = static NSObject.== infix(_:_:)();

  result = 0;
  if ((v12 & 1) != 0 && v4 == v8 && v3 == v7)
    return v5 == v9;
  return result;
}

void specialized static ShaderVectorData.Element.+= infix(_:_:)(uint64_t a1)
{
  __asm { BR              X10 }
}

uint64_t specialized static ShaderVectorData.+= infix(_:_:)(uint64_t result, uint64_t *a2)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;

  v2 = (_QWORD *)result;
  v3 = *a2;
  v4 = *(_QWORD **)result;
  v5 = *(_QWORD *)(*(_QWORD *)result + 16);
  if (v5 == *(_QWORD *)(*a2 + 16))
  {
    if (v5)
    {
      v6 = 0;
      v7 = 0;
      while (1)
      {
        v8 = *(_QWORD *)(v3 + v6 + 32);
        v9 = *(_QWORD *)(v3 + v6 + 40);
        v10 = *(_BYTE *)(v3 + v6 + 48);
        outlined copy of ShaderVectorData.Element(v8, v9, v10);
        result = swift_isUniquelyReferenced_nonNull_native();
        if ((result & 1) == 0)
        {
          result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v4);
          v4 = (_QWORD *)result;
        }
        if (v7 >= v4[2])
          break;
        ++v7;
        specialized static ShaderVectorData.Element.+= infix(_:_:)((uint64_t)&v4[v6 / 8 + 4]);
        result = outlined consume of ShaderVectorData.Element(v8, v9, v10);
        v6 += 24;
        if (v5 == v7)
        {
          *v2 = v4;
          return result;
        }
      }
      __break(1u);
    }
  }
  else if (!v5)
  {
    swift_bridgeObjectRelease();
    *v2 = v3;
    return swift_bridgeObjectRetain();
  }
  return result;
}

void specialized static ShaderVectorData.Element.-= infix(_:_:)(uint64_t a1)
{
  __asm { BR              X10 }
}

void specialized static ShaderVectorData.-= infix(_:_:)(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;

  v3 = *a2;
  v4 = *(_QWORD **)a1;
  v5 = *(_QWORD *)(*(_QWORD *)a1 + 16);
  if (v5 == *(_QWORD *)(*a2 + 16))
  {
    if (v5)
    {
      v6 = 0;
      v7 = 0;
      while (1)
      {
        v8 = *(_QWORD *)(v3 + v6 + 32);
        v9 = *(_QWORD *)(v3 + v6 + 40);
        v10 = *(_BYTE *)(v3 + v6 + 48);
        outlined copy of ShaderVectorData.Element(v8, v9, v10);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v4 = specialized _ArrayBuffer._consumeAndCreateNew()(v4);
        if (v7 >= v4[2])
          break;
        ++v7;
        specialized static ShaderVectorData.Element.-= infix(_:_:)((uint64_t)&v4[v6 / 8 + 4]);
        outlined consume of ShaderVectorData.Element(v8, v9, v10);
        v6 += 24;
        if (v5 == v7)
        {
          *(_QWORD *)a1 = v4;
          return;
        }
      }
      __break(1u);
    }
  }
  else if (!v5)
  {
    swift_bridgeObjectRelease();
    *(_QWORD *)a1 = v3;
    swift_bridgeObjectRetain();
    ShaderVectorData.scale(by:)(-1.0);
  }
}

uint64_t specialized static Shader.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v3;
  int v4;
  uint64_t v5;
  int v6;
  char v8;

  if (*(_QWORD *)a1 != *(_QWORD *)a2)
    return 0;
  v3 = *(_QWORD *)(a1 + 24);
  v4 = *(_DWORD *)(a1 + 32);
  v5 = *(_QWORD *)(a2 + 24);
  v6 = *(_DWORD *)(a2 + 32);
  if (*(_QWORD *)(a1 + 8) == *(_QWORD *)(a2 + 8) && *(_QWORD *)(a1 + 16) == *(_QWORD *)(a2 + 16))
    return specialized static Array<A>.== infix(_:_:)(v3, v5) & (v4 == v6);
  v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
  result = 0;
  if ((v8 & 1) != 0)
    return specialized static Array<A>.== infix(_:_:)(v3, v5) & (v4 == v6);
  return result;
}

void specialized static Shader.Argument.Storage.== infix(_:_:)(uint64_t a1, uint64_t a2, char a3)
{
  __asm { BR              X10 }
}

void partial apply for closure #1 in Shader.compile(as:)(uint64_t a1)
{
  uint64_t v1;

  closure #1 in Shader.compile(as:)(a1, *(__int128 **)(v1 + 16), *(unsigned int *)(v1 + 24), *(void **)(v1 + 32));
}

void type metadata accessor for AtomicBuffer<TrackerData>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  uint64_t v5;

  if (!lazy cache variable for type metadata for AtomicBuffer<TrackerData>)
  {
    v4 = type metadata accessor for AtomicBuffer(0, (uint64_t)&type metadata for TrackerData, a3, a4);
    if (!v5)
      atomic_store(v4, (unint64_t *)&lazy cache variable for type metadata for AtomicBuffer<TrackerData>);
  }
}

unint64_t lazy protocol witness table accessor for type _ShaderFilterEffect.ResolvedEffect and conformance _ShaderFilterEffect.ResolvedEffect()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _ShaderFilterEffect.ResolvedEffect and conformance _ShaderFilterEffect.ResolvedEffect;
  if (!lazy protocol witness table cache variable for type _ShaderFilterEffect.ResolvedEffect and conformance _ShaderFilterEffect.ResolvedEffect)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for _ShaderFilterEffect.ResolvedEffect, &unk_25062EC30);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ShaderFilterEffect.ResolvedEffect and conformance _ShaderFilterEffect.ResolvedEffect);
  }
  return result;
}

uint64_t _s7SwiftUI15GraphicsContextV15ResolvedShadingOWOi2_(uint64_t result)
{
  *(_QWORD *)(result + 96) = *(_QWORD *)(result + 96) & 0xFF0301FFLL | 0x3000000000000000;
  return result;
}

uint64_t sub_234DC3844()
{
  uint64_t v0;

  outlined consume of GraphicsFilter(*(void **)(v0 + 16), *(_QWORD *)(v0 + 24), *(id *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 88), *(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 104), *(_QWORD *)(v0 + 112), *(_QWORD *)(v0 + 120), *(_DWORD *)(v0 + 128), BYTE2(*(_DWORD *)(v0 + 128)));
  return swift_deallocObject();
}

unint64_t lazy protocol witness table accessor for type Shader.Options and conformance Shader.Options()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Shader.Options and conformance Shader.Options;
  if (!lazy protocol witness table cache variable for type Shader.Options and conformance Shader.Options)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Shader.Options, &type metadata for Shader.Options);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Shader.Options and conformance Shader.Options);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Shader.Options and conformance Shader.Options;
  if (!lazy protocol witness table cache variable for type Shader.Options and conformance Shader.Options)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Shader.Options, &type metadata for Shader.Options);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Shader.Options and conformance Shader.Options);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Shader.Options and conformance Shader.Options;
  if (!lazy protocol witness table cache variable for type Shader.Options and conformance Shader.Options)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Shader.Options, &type metadata for Shader.Options);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Shader.Options and conformance Shader.Options);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Shader.Options and conformance Shader.Options;
  if (!lazy protocol witness table cache variable for type Shader.Options and conformance Shader.Options)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Shader.Options, &type metadata for Shader.Options);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Shader.Options and conformance Shader.Options);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Shader.UsageType and conformance Shader.UsageType()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Shader.UsageType and conformance Shader.UsageType;
  if (!lazy protocol witness table cache variable for type Shader.UsageType and conformance Shader.UsageType)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Shader.UsageType, &type metadata for Shader.UsageType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Shader.UsageType and conformance Shader.UsageType);
  }
  return result;
}

unint64_t instantiation function for generic protocol witness table for Shader.ResolvedShader(uint64_t a1)
{
  unint64_t result;

  *(_QWORD *)(a1 + 8) = lazy protocol witness table accessor for type Shader.ResolvedShader and conformance Shader.ResolvedShader();
  result = lazy protocol witness table accessor for type Shader.ResolvedShader and conformance Shader.ResolvedShader();
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table accessor for type Shader.ResolvedShader and conformance Shader.ResolvedShader();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t instantiation function for generic protocol witness table for ShaderVectorData(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type ShaderVectorData and conformance ShaderVectorData();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_234DC3B50@<X0>(uint64_t result@<X0>, _BYTE *a2@<X8>)
{
  *a2 = *(_BYTE *)(result + 32) & 1;
  return result;
}

unsigned __int8 *sub_234DC3B60(unsigned __int8 *result, uint64_t a2)
{
  *(_DWORD *)(a2 + 32) = *(_DWORD *)(a2 + 32) & 0xFFFFFFFE | *result;
  return result;
}

void sub_234DC3B78(id *a1@<X0>, _QWORD *a2@<X8>)
{
  id v3;
  id v4;
  uint64_t v5;

  v3 = *a1;
  v4 = *a1;
  ShaderVectorData.init(rbShader:)(v3, &v5);
  *a2 = v5;
}

ValueMetadata *type metadata accessor for ShaderLibrary()
{
  return &type metadata for ShaderLibrary;
}

uint64_t destroy for ShaderFunction(id *a1)
{

  return swift_bridgeObjectRelease();
}

_QWORD *initializeBufferWithCopyOfBuffer for ShaderFunction(_QWORD *a1, uint64_t a2)
{
  void *v3;
  uint64_t v4;
  id v5;

  v3 = *(void **)a2;
  v4 = *(_QWORD *)(a2 + 8);
  *a1 = *(_QWORD *)a2;
  a1[1] = v4;
  a1[2] = *(_QWORD *)(a2 + 16);
  v5 = v3;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for ShaderFunction(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;

  v4 = *(void **)a2;
  v5 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = v4;

  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for ShaderFunction(uint64_t a1, _QWORD *a2)
{
  void *v4;
  uint64_t v5;

  v4 = *(void **)a1;
  *(_QWORD *)a1 = *a2;

  v5 = a2[2];
  *(_QWORD *)(a1 + 8) = a2[1];
  *(_QWORD *)(a1 + 16) = v5;
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for ShaderFunction()
{
  return &type metadata for ShaderFunction;
}

uint64_t initializeWithCopy for Shader(uint64_t a1, uint64_t a2)
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  id v6;

  v3 = *(void **)a2;
  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v5;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  v6 = v3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for Shader(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;

  v4 = *(void **)a2;
  v5 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = v4;

  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  return a1;
}

__n128 __swift_memcpy36_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for Shader(uint64_t a1, uint64_t a2)
{
  void *v4;

  v4 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;

  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  return a1;
}

uint64_t getEnumTagSinglePayload for Shader(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 36))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for Shader(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_DWORD *)(result + 32) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 36) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 36) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for Shader()
{
  return &type metadata for Shader;
}

uint64_t initializeBufferWithCopyOfBuffer for Shader.Argument(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  return initializeBufferWithCopyOfBuffer for Shader.Argument(a1, a2, a3, (void (*)(_QWORD, uint64_t, uint64_t))outlined copy of Shader.Argument.Storage);
}

uint64_t *assignWithCopy for Shader.Argument(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  return assignWithCopy for Shader.Argument(a1, a2, a3, (void (*)(_QWORD, uint64_t, uint64_t))outlined copy of Shader.Argument.Storage, (void (*)(uint64_t, uint64_t, uint64_t))outlined consume of Shader.Argument.Storage);
}

uint64_t *assignWithTake for Shader.Argument(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  return assignWithTake for Shader.Argument(a1, a2, a3, (void (*)(uint64_t, uint64_t, uint64_t))outlined consume of Shader.Argument.Storage);
}

ValueMetadata *type metadata accessor for Shader.Argument()
{
  return &type metadata for Shader.Argument;
}

ValueMetadata *type metadata accessor for Shader.Options()
{
  return &type metadata for Shader.Options;
}

uint64_t initializeWithCopy for Shader.ResolvedShader(uint64_t a1, uint64_t a2)
{
  void *v3;
  id v4;

  v3 = *(void **)a2;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  v4 = v3;
  return a1;
}

uint64_t assignWithCopy for Shader.ResolvedShader(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;

  v4 = *(void **)a1;
  v5 = *(void **)a2;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = v5;

  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  return a1;
}

uint64_t assignWithTake for Shader.ResolvedShader(uint64_t a1, uint64_t a2)
{
  void *v4;

  v4 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;

  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  return a1;
}

uint64_t getEnumTagSinglePayload for Shader.ResolvedShader(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *((_BYTE *)a1 + 28))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for Shader.ResolvedShader(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_DWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 28) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 28) = 0;
    if (a2)
      *(_QWORD *)result = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for Shader.ResolvedShader()
{
  return &type metadata for Shader.ResolvedShader;
}

ValueMetadata *type metadata accessor for Shader.UsageType()
{
  return &type metadata for Shader.UsageType;
}

uint64_t destroy for Shader(id *a1)
{

  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for _ShaderFilterEffect(uint64_t a1, uint64_t a2)
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  id v6;

  v3 = *(void **)a2;
  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v5;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  v6 = v3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for _ShaderFilterEffect(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;

  v4 = *(void **)a2;
  v5 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = v4;

  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  return a1;
}

uint64_t assignWithTake for _ShaderFilterEffect(uint64_t a1, uint64_t a2)
{
  void *v4;

  v4 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;

  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  return a1;
}

uint64_t getEnumTagSinglePayload for _ShaderFilterEffect(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 57))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for _ShaderFilterEffect(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 56) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 57) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 57) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for _ShaderFilterEffect()
{
  return &type metadata for _ShaderFilterEffect;
}

ValueMetadata *type metadata accessor for ShaderVectorData()
{
  return &type metadata for ShaderVectorData;
}

uint64_t sub_234DC431C(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[2];

  v4 = a1[1];
  v5 = type metadata accessor for ModifiedContent(255, *a1, (uint64_t)&type metadata for _ShaderFilterEffect, a4);
  v7[0] = v4;
  v7[1] = &protocol witness table for _ShaderFilterEffect;
  return MEMORY[0x23B7C9C04]("I{:\x1B̧\t", v5, v7);
}

uint64_t initializeBufferWithCopyOfBuffer for ShaderVectorData.Element(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  return initializeBufferWithCopyOfBuffer for Shader.Argument(a1, a2, a3, (void (*)(_QWORD, uint64_t, uint64_t))outlined copy of ShaderVectorData.Element);
}

uint64_t destroy for ShaderVectorData.Element(uint64_t a1)
{
  return outlined consume of ShaderVectorData.Element(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
}

uint64_t *assignWithCopy for ShaderVectorData.Element(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  return assignWithCopy for Shader.Argument(a1, a2, a3, (void (*)(_QWORD, uint64_t, uint64_t))outlined copy of ShaderVectorData.Element, (void (*)(uint64_t, uint64_t, uint64_t))outlined consume of ShaderVectorData.Element);
}

uint64_t *assignWithTake for ShaderVectorData.Element(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  return assignWithTake for Shader.Argument(a1, a2, a3, (void (*)(uint64_t, uint64_t, uint64_t))outlined consume of ShaderVectorData.Element);
}

uint64_t getEnumTagSinglePayload for ShaderVectorData.Element(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFB && *(_BYTE *)(a1 + 17))
    return (*(_DWORD *)a1 + 251);
  v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 5)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ShaderVectorData.Element(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFA)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 251;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFB)
      *(_BYTE *)(result + 17) = 1;
  }
  else
  {
    if (a3 >= 0xFB)
      *(_BYTE *)(result + 17) = 0;
    if (a2)
      *(_BYTE *)(result + 16) = -(char)a2;
  }
  return result;
}

uint64_t getEnumTag for ShaderVectorData.Element(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 16) <= 4u)
    return *(unsigned __int8 *)(a1 + 16);
  else
    return (*(_DWORD *)a1 + 5);
}

uint64_t destructiveInjectEnumTag for ShaderVectorData.Element(uint64_t result, unsigned int a2)
{
  if (a2 >= 5)
  {
    *(_QWORD *)result = a2 - 5;
    *(_QWORD *)(result + 8) = 0;
    LOBYTE(a2) = 5;
  }
  *(_BYTE *)(result + 16) = a2;
  return result;
}

ValueMetadata *type metadata accessor for ShaderVectorData.Element()
{
  return &type metadata for ShaderVectorData.Element;
}

uint64_t destroy for Shader.Argument.Storage(uint64_t a1)
{
  return outlined consume of Shader.Argument.Storage(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
}

uint64_t initializeBufferWithCopyOfBuffer for Shader.Argument(uint64_t a1, uint64_t *a2, uint64_t a3, void (*a4)(_QWORD, uint64_t, uint64_t))
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v5 = *a2;
  v6 = a2[1];
  v7 = *((unsigned __int8 *)a2 + 16);
  a4(*a2, v6, v7);
  *(_QWORD *)a1 = v5;
  *(_QWORD *)(a1 + 8) = v6;
  *(_BYTE *)(a1 + 16) = v7;
  return a1;
}

uint64_t *assignWithCopy for Shader.Argument(uint64_t *a1, uint64_t *a2, uint64_t a3, void (*a4)(_QWORD, uint64_t, uint64_t), void (*a5)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v7 = *a2;
  v8 = a2[1];
  v9 = *((unsigned __int8 *)a2 + 16);
  a4(*a2, v8, v9);
  v10 = *a1;
  v11 = a1[1];
  *a1 = v7;
  a1[1] = v8;
  v12 = *((unsigned __int8 *)a1 + 16);
  *((_BYTE *)a1 + 16) = v9;
  a5(v10, v11, v12);
  return a1;
}

uint64_t *assignWithTake for Shader.Argument(uint64_t *a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, uint64_t, uint64_t))
{
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v5 = *(_BYTE *)(a2 + 16);
  v6 = *a1;
  v7 = a1[1];
  *(_OWORD *)a1 = *(_OWORD *)a2;
  v8 = *((unsigned __int8 *)a1 + 16);
  *((_BYTE *)a1 + 16) = v5;
  a4(v6, v7, v8);
  return a1;
}

uint64_t getEnumTagSinglePayload for Shader.Argument(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xF7 && *(_BYTE *)(a1 + 17))
    return (*(_DWORD *)a1 + 247);
  v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 9)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for Shader.Argument(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xF6)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 247;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xF7)
      *(_BYTE *)(result + 17) = 1;
  }
  else
  {
    if (a3 >= 0xF7)
      *(_BYTE *)(result + 17) = 0;
    if (a2)
      *(_BYTE *)(result + 16) = -(char)a2;
  }
  return result;
}

uint64_t getEnumTag for Shader.Argument.Storage(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 16) <= 8u)
    return *(unsigned __int8 *)(a1 + 16);
  else
    return (*(_DWORD *)a1 + 9);
}

uint64_t destructiveInjectEnumTag for Shader.Argument.Storage(uint64_t result, unsigned int a2)
{
  if (a2 >= 9)
  {
    *(_QWORD *)result = a2 - 9;
    *(_QWORD *)(result + 8) = 0;
    LOBYTE(a2) = 9;
  }
  *(_BYTE *)(result + 16) = a2;
  return result;
}

ValueMetadata *type metadata accessor for Shader.Argument.Storage()
{
  return &type metadata for Shader.Argument.Storage;
}

void *type metadata accessor for _ShaderFilterEffect.ResolvedEffect()
{
  return &unk_25062EC30;
}

unint64_t instantiation function for generic protocol witness table for _ShaderFilterEffect.ResolvedEffect(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type _ShaderFilterEffect.ResolvedEffect and conformance _ShaderFilterEffect.ResolvedEffect();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t instantiation function for generic protocol witness table for ShaderVectorData.Element(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type ShaderVectorData.Element and conformance ShaderVectorData.Element();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type ShaderVectorData.Element and conformance ShaderVectorData.Element()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ShaderVectorData.Element and conformance ShaderVectorData.Element;
  if (!lazy protocol witness table cache variable for type ShaderVectorData.Element and conformance ShaderVectorData.Element)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ShaderVectorData.Element, &type metadata for ShaderVectorData.Element);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ShaderVectorData.Element and conformance ShaderVectorData.Element);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ShaderVectorData.Element and conformance ShaderVectorData.Element;
  if (!lazy protocol witness table cache variable for type ShaderVectorData.Element and conformance ShaderVectorData.Element)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ShaderVectorData.Element, &type metadata for ShaderVectorData.Element);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ShaderVectorData.Element and conformance ShaderVectorData.Element);
  }
  return result;
}

void type metadata accessor for CheckedContinuation<(), Error>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for CheckedContinuation<(), Error>)
  {
    type metadata accessor for Error();
    v0 = type metadata accessor for CheckedContinuation();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for CheckedContinuation<(), Error>);
  }
}

uint64_t sub_234DC4790()
{
  uint64_t v0;
  uint64_t v1;

  type metadata accessor for CheckedContinuation<(), Error>();
  (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80)), v1);
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in Shader.compile(as:)(void *a1)
{
  type metadata accessor for CheckedContinuation<(), Error>();
  return closure #1 in closure #1 in Shader.compile(as:)(a1);
}

uint64_t block_copy_helper_16(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_16()
{
  return swift_release();
}

uint64_t GraphicsImage.size.getter()
{
  uint64_t v0;
  uint64_t result;

  if (*(double *)(v0 + 16) != 0.0)
    return ((uint64_t (*)(double, double))((char *)sub_234DC4884
                                                   + 4 * byte_2352A2100[*(unsigned __int8 *)(v0 + 40)]))(*(double *)(v0 + 24), *(double *)(v0 + 32));
  return result;
}

double sub_234DC4884(double a1, double a2, double a3, double a4)
{
  return 1.0 / a3 * a4;
}

void GraphicsImage.styleResolverMode.getter(uint64_t a1@<X8>)
{
  unsigned __int8 *v1;
  int v3;
  void *v4;
  void *v5;
  id v6;
  id v7;
  __int16 v8;
  __int16 v9;
  void *v10;

  v3 = v1[8];
  if (v3 == 2)
  {
    v4 = *(void **)(*(_QWORD *)v1 + 16);
    v5 = *(void **)(*(_QWORD *)v1 + 32);
    v6 = v4;
    outlined copy of Image.Location(v5);
    v7 = v6;
    outlined copy of Image.Location(v5);
    v8 = (unsigned __int16)objc_msgSend(v7, sel_styleMask);
    v10 = v5;
    outlined copy of Image.Location(v5);
    _ShapeStyle_ResolverMode.init(rbSymbolStyleMask:location:)(v8, &v10, a1);

    outlined consume of Image.Location(v5);
    outlined consume of Image.Location(v5);
  }
  else
  {
    if (v3 == 255)
    {
      *(_QWORD *)a1 = 0;
      *(_WORD *)(a1 + 8) = 0;
    }
    else
    {
      v9 = (v1[60] & 1) == 0;
      *(_QWORD *)a1 = 0;
      *(_WORD *)(a1 + 8) = v9;
    }
    *(_BYTE *)(a1 + 10) = 0;
  }
}

BOOL GraphicsImage.isTemplate.getter()
{
  uint64_t v0;

  return (*(_BYTE *)(v0 + 60) & 1) == 0;
}

BOOL ResolvedVectorGlyph.isClear(styles:)(uint64_t *a1)
{
  id *v1;
  uint64_t v2;
  char v5;
  uint64_t v6;

  v2 = *a1;
  if ((objc_msgSend(*v1, sel_styleMask) & 0x1200) != 0)
  {
    return 0;
  }
  else
  {
    v6 = v2;
    v5 = 0;
    return _ShapeStyle_Pack.isClear(name:)((SwiftUI::_ShapeStyle_Name)&v5);
  }
}

__n128 GraphicsImage.init(contents:scale:unrotatedPixelSize:orientation:isTemplate:resizingInfo:antialiased:interpolation:)@<Q0>(uint64_t a1@<X0>, char a2@<W1>, char a3@<W2>, uint64_t a4@<X3>, char a5@<W4>, char *a6@<X5>, uint64_t a7@<X8>, double a8@<D0>, double a9@<D1>, double a10@<D2>)
{
  char v10;
  char v11;
  char v12;
  uint64_t v13;
  __n128 result;
  __int128 v15;

  v10 = *(_BYTE *)(a1 + 8);
  v11 = *(_BYTE *)(a4 + 32);
  v12 = *a6;
  *(_QWORD *)a7 = *(_QWORD *)a1;
  *(_BYTE *)(a7 + 8) = v10;
  v13 = 0x3F8000003F800000;
  if ((a3 & 1) == 0)
    v13 = 0;
  *(double *)(a7 + 16) = a8;
  *(double *)(a7 + 24) = a9;
  *(double *)(a7 + 32) = a10;
  *(_BYTE *)(a7 + 40) = a2;
  *(_QWORD *)(a7 + 44) = v13;
  *(_QWORD *)(a7 + 52) = v13;
  *(_BYTE *)(a7 + 60) = (a3 & 1) == 0;
  result = *(__n128 *)a4;
  v15 = *(_OWORD *)(a4 + 16);
  *(_OWORD *)(a7 + 64) = *(_OWORD *)a4;
  *(_OWORD *)(a7 + 80) = v15;
  *(_BYTE *)(a7 + 96) = v11;
  *(_BYTE *)(a7 + 97) = a5;
  *(_BYTE *)(a7 + 98) = v12;
  *(_BYTE *)(a7 + 99) = 3;
  return result;
}

id GraphicsImage.contents.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  void *v2;
  char v3;

  v2 = *(void **)v1;
  *(_QWORD *)a1 = *(_QWORD *)v1;
  v3 = *(_BYTE *)(v1 + 8);
  *(_BYTE *)(a1 + 8) = v3;
  return outlined copy of GraphicsImage.Contents?(v2, v3);
}

void GraphicsImage.contents.setter(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  char v3;

  v2 = *a1;
  v3 = *((_BYTE *)a1 + 8);
  outlined consume of GraphicsImage.Contents?(*(void **)v1, *(_BYTE *)(v1 + 8));
  *(_QWORD *)v1 = v2;
  *(_BYTE *)(v1 + 8) = v3;
}

uint64_t (*GraphicsImage.contents.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

double GraphicsImage.scale.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 16);
}

void GraphicsImage.scale.setter(double a1)
{
  uint64_t v1;

  *(double *)(v1 + 16) = a1;
}

uint64_t (*GraphicsImage.scale.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

double GraphicsImage.unrotatedPixelSize.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 24);
}

void GraphicsImage.unrotatedPixelSize.setter(double a1, double a2)
{
  uint64_t v2;

  *(double *)(v2 + 24) = a1;
  *(double *)(v2 + 32) = a2;
}

uint64_t (*GraphicsImage.unrotatedPixelSize.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t GraphicsImage.orientation.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 40);
}

uint64_t GraphicsImage.orientation.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 40) = result;
  return result;
}

uint64_t (*GraphicsImage.orientation.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t GraphicsImage.maskColor.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 44);
}

uint64_t GraphicsImage.maskColor.setter(uint64_t result, uint64_t a2, char a3)
{
  uint64_t v3;

  *(_QWORD *)(v3 + 44) = result;
  *(_QWORD *)(v3 + 52) = a2;
  *(_BYTE *)(v3 + 60) = a3 & 1;
  return result;
}

uint64_t (*GraphicsImage.maskColor.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

__n128 GraphicsImage.resizingInfo.getter@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  char v2;
  __n128 result;
  __int128 v4;

  v2 = *(_BYTE *)(v1 + 96);
  result = *(__n128 *)(v1 + 64);
  v4 = *(_OWORD *)(v1 + 80);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v4;
  *(_BYTE *)(a1 + 32) = v2;
  return result;
}

__n128 GraphicsImage.resizingInfo.setter(uint64_t a1)
{
  uint64_t v1;
  char v2;
  __n128 result;
  __int128 v4;

  v2 = *(_BYTE *)(a1 + 32);
  result = *(__n128 *)a1;
  v4 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v1 + 64) = *(_OWORD *)a1;
  *(_OWORD *)(v1 + 80) = v4;
  *(_BYTE *)(v1 + 96) = v2;
  return result;
}

uint64_t (*GraphicsImage.resizingInfo.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t GraphicsImage.isAntialiased.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 97);
}

uint64_t GraphicsImage.isAntialiased.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 97) = result;
  return result;
}

uint64_t (*GraphicsImage.isAntialiased.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

void GraphicsImage.interpolation.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 98);
}

_BYTE *GraphicsImage.interpolation.setter(_BYTE *result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 98) = *result;
  return result;
}

uint64_t (*GraphicsImage.interpolation.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

void GraphicsImage.allowedDynamicRange.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 99);
}

_BYTE *GraphicsImage.allowedDynamicRange.setter(_BYTE *result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 99) = *result;
  return result;
}

uint64_t (*GraphicsImage.allowedDynamicRange.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t GraphicsImage.pixelSize.getter()
{
  uint64_t v0;

  return ((uint64_t (*)(double, double))((char *)sub_234DC4C1C
                                                 + 4 * byte_2352A2108[*(unsigned __int8 *)(v0 + 40)]))(*(double *)(v0 + 24), *(double *)(v0 + 32));
}

double sub_234DC4C1C(double a1, double a2, double a3)
{
  return a3;
}

uint64_t GraphicsImage.slicesAndTiles(at:)@<X0>(uint64_t result@<X0>, double a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  double v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v12;
  BOOL v16;

  v5 = *(double *)(v4 + 16);
  v6 = *(_QWORD *)(v4 + 64);
  v7 = *(_QWORD *)(v4 + 72);
  v8 = *(_QWORD *)(v4 + 80);
  v9 = *(_QWORD *)(v4 + 88);
  v10 = *(unsigned __int8 *)(v4 + 96);
  if (v5 != 0.0)
  {
    *(double *)&result = COERCE_DOUBLE(((uint64_t (*)(double, double, double))((char *)&loc_234DC4C78+ 4* byte_2352A2110[*(unsigned __int8 *)(v4 + 40)]))(v5, *(double *)(v4 + 24), *(double *)(v4 + 32)));
    return result;
  }
  if ((a3 & 1) != 0 || *(double *)&result != 0.0)
  {
    if (v10 == 2)
    {
LABEL_28:
      *(_OWORD *)a4 = 0u;
      *(_OWORD *)(a4 + 16) = 0u;
      *(_BYTE *)(a4 + 32) = 2;
      return result;
    }
  }
  else if (a2 == 0.0 || v10 == 2)
  {
    goto LABEL_28;
  }
  v12 = v10 & 1;
  result = v9 & 0x7FFFFFFFFFFFFFFFLL;
  v16 = (v6 & 0x7FFFFFFFFFFFFFFFLL) != 0
     || (v7 & 0x7FFFFFFFFFFFFFFFLL) != 0
     || (v8 & 0x7FFFFFFFFFFFFFFFLL) != 0
     || result != 0
     || v12 == 0;
  if (!v16 || *(_BYTE *)(v4 + 8) == 4)
    goto LABEL_28;
  *(_QWORD *)a4 = v6;
  *(_QWORD *)(a4 + 8) = v7;
  *(_QWORD *)(a4 + 16) = v8;
  *(_QWORD *)(a4 + 24) = v9;
  *(_BYTE *)(a4 + 32) = v12;
  return result;
}

void *ResolvedVectorGlyph.styleResolverMode.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  void *v3;
  void *v4;
  __int16 v5;
  void *v7;

  v3 = *(void **)v1;
  v4 = *(void **)(v1 + 16);
  v5 = (unsigned __int16)objc_msgSend(v3, sel_styleMask);
  v7 = v4;
  outlined copy of Image.Location(v4);
  return _ShapeStyle_ResolverMode.init(rbSymbolStyleMask:location:)(v5, &v7, a1);
}

void GraphicsImage.headroom.getter(double *a1@<X8>)
{
  uint64_t v1;
  void *v3;
  CGColorSpace *v4;
  CGColorSpace *v5;
  uint64_t *v6;
  double v7;
  uint64_t v8;

  if (*(_BYTE *)(v1 + 8))
    goto LABEL_11;
  v3 = *(void **)v1;
  outlined copy of GraphicsImage.Contents(v3, 0);
  v4 = CGImageGetColorSpace((CGImageRef)v3);
  if (!v4)
  {
LABEL_10:
    outlined consume of GraphicsImage.Contents?(v3, 0);
LABEL_11:
    if (one-time initialization token for standard != -1)
      swift_once();
    v7 = *(double *)&static Image.Headroom.standard;
    goto LABEL_14;
  }
  v5 = v4;
  if (!CGColorSpaceUsesITUR_2100TF(v4))
  {

    goto LABEL_10;
  }
  if ((CGImageGetHeadroom() & 1) != 0)
  {
    outlined consume of GraphicsImage.Contents?(v3, 0);

    v7 = 0.0;
LABEL_14:
    *a1 = v7;
    return;
  }
  if (CGColorSpaceIsHLGBased(v5))
  {
    if (one-time initialization token for highHLG != -1)
      swift_once();
    v6 = &static Image.Headroom.highHLG;
  }
  else
  {
    if (one-time initialization token for high != -1)
      swift_once();
    v6 = &static Image.Headroom.high;
  }
  v8 = *v6;
  outlined consume of GraphicsImage.Contents?(v3, 0);

  *(_QWORD *)a1 = v8;
}

void GraphicsImage.encode(to:)(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  double v3;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  double v8;
  int v9;
  double v10;
  double v11;
  double v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  int v22;
  uint64_t v23;
  char v24;
  float v25;
  float v26;
  float v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  int64_t isUniquelyReferenced_nonNull_native;
  unint64_t v34;
  unint64_t v35;
  CGImageRef_optional v36;
  CGImageRef value;
  CGImage *v38;
  Swift::UInt v39;
  uint64_t v40;
  uint64_t v41;
  int64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  int v53;
  uint64_t v54;
  double v55;
  char v56;
  double v57;
  double v58;
  double v59;
  char v60;
  uint64_t v61;
  uint64_t v62;
  char v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char v68;
  char v69;
  char v70;
  char v71;

  v5 = type metadata accessor for NamedImage.Key(0);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v45 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *(double *)v1;
  v9 = *((unsigned __int8 *)v1 + 8);
  v11 = *((double *)v1 + 2);
  v10 = *((double *)v1 + 3);
  v12 = *((double *)v1 + 4);
  v13 = *((unsigned __int8 *)v1 + 40);
  v14 = *(uint64_t *)((char *)v1 + 44);
  v15 = *(uint64_t *)((char *)v1 + 52);
  v16 = *((unsigned __int8 *)v1 + 60);
  v17 = v1[8];
  v18 = v1[9];
  v19 = v1[10];
  v20 = v1[11];
  v21 = *((unsigned __int8 *)v1 + 96);
  v22 = *((unsigned __int8 *)v1 + 97);
  v23 = *((unsigned __int8 *)v1 + 98);
  v24 = *((_BYTE *)v1 + 99);
  v49 = v17;
  v48 = v18;
  v47 = v19;
  v46 = v20;
  v52 = v21;
  v51 = v15;
  v50 = v14;
  v53 = v16;
  v54 = v13;
  switch(v9)
  {
    case 3:
      LODWORD(v45) = v22;
      v28 = *(_QWORD *)(*(_QWORD *)&v8 + 16);
      v29 = *(void **)(*(_QWORD *)&v8 + 24);
      swift_retain();
      outlined copy of Image.Location?(v29);
      swift_bridgeObjectRetain();
      ProtobufEncoder.encodeVarint(_:)(0x1AuLL);
      specialized ProtobufEncoder.encodeMessage<A>(_:)(v28);
      swift_release();
      outlined consume of Image.Location?(v29);
      swift_bridgeObjectRelease();
      if (!v2)
        goto LABEL_20;
      break;
    case 5:
      v45 = v23;
      v30 = swift_projectBox();
      outlined init with copy of NamedImage.Key(v30, (uint64_t)v7);
      ProtobufEncoder.encodeVarint(_:)(0x22uLL);
      v31 = *(_QWORD *)(a1 + 8);
      v32 = *(_QWORD **)(a1 + 24);
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
        goto LABEL_9;
      goto LABEL_39;
    case 4:
      LODWORD(v3) = *(_DWORD *)(*(_QWORD *)&v8 + 16);
      v25 = *(float *)(*(_QWORD *)&v8 + 20);
      v26 = *(float *)(*(_QWORD *)&v8 + 24);
      v27 = *(float *)(*(_QWORD *)&v8 + 28);
      ProtobufEncoder.encodeVarint(_:)(0xAuLL);
      specialized ProtobufEncoder.encodeMessage<A>(_:)(*(float *)&v3, v25, v26, v27);
      if (!v2)
        goto LABEL_20;
      break;
    default:
      v55 = v8;
      v56 = v9;
      v57 = v11;
      v58 = v10;
      v59 = v12;
      v60 = v13;
      v61 = v14;
      v62 = v15;
      v63 = v16;
      v64 = v17;
      v65 = v18;
      v66 = v19;
      v67 = v20;
      v68 = v21;
      v69 = v22;
      v70 = v23;
      v71 = v24;
      if (v11 != 0.0)
        __asm { BR              X9 }
      v36.value = GraphicsImage.render(at:prefersMask:)((CGSize)0, 0).value;
      if (!v36.value)
        goto LABEL_47;
      value = v36.value;
      v55 = v8;
      v56 = v9;
      v57 = v11;
      v58 = v10;
      v59 = v12;
      v60 = v54;
      v61 = v50;
      v62 = v51;
      v63 = v53;
      v64 = v49;
      v65 = v48;
      v66 = v47;
      v67 = v46;
      v68 = v52;
      v69 = v22;
      v70 = v23;
      v71 = v24;
      v54 = GraphicsImage.bitmapOrientation.getter();
      v38 = value;
      ProtobufEncoder.encodeVarint(_:)(0x12uLL);
      specialized ProtobufEncoder.encodeMessage<A>(_:)((uint64_t)v38);

      if (!v2)
      {
LABEL_47:
        while (1)
        {
LABEL_20:
          if (v11 != 1.0)
          {
            v3 = fabs(v11);
            if (v3 >= 65536.0)
              v39 = 41;
            else
              v39 = 45;
            ProtobufEncoder.encodeVarint(_:)(v39);
            if (v3 >= 65536.0)
            {
              v41 = *(_QWORD *)(a1 + 8);
              v42 = v41 + 8;
              if (__OFADD__(v41, 8))
              {
                __break(1u);
              }
              else if (*(_QWORD *)(a1 + 16) >= v42)
              {
                *(_QWORD *)(a1 + 8) = v42;
                *(double *)(*(_QWORD *)a1 + v41) = v11;
                goto LABEL_31;
              }
              *(double *)ProtobufEncoder.growBufferSlow(to:)(v42) = v11;
              goto LABEL_31;
            }
            v40 = *(_QWORD *)(a1 + 8);
            isUniquelyReferenced_nonNull_native = v40 + 4;
            if (!__OFADD__(v40, 4))
            {
              *(float *)&v3 = v11;
              if (*(_QWORD *)(a1 + 16) >= isUniquelyReferenced_nonNull_native)
              {
                *(_QWORD *)(a1 + 8) = isUniquelyReferenced_nonNull_native;
                *(_DWORD *)(*(_QWORD *)a1 + v40) = LODWORD(v3);
                goto LABEL_31;
              }
              goto LABEL_42;
            }
            goto LABEL_41;
          }
          while (1)
          {
LABEL_31:
            ProtobufEncoder.encodeVarint(_:)(0x32uLL);
            v31 = *(_QWORD *)(a1 + 8);
            v32 = *(_QWORD **)(a1 + 24);
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
              v32 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v32[2] + 1, 1, v32);
            v44 = v32[2];
            v43 = v32[3];
            v7 = (char *)(v44 + 1);
            if (v44 >= v43 >> 1)
              v32 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v43 > 1), v44 + 1, 1, v32);
            v32[2] = v7;
            v32[v44 + 4] = v31;
            *(_QWORD *)(a1 + 24) = v32;
            if (!__OFADD__(v31, 1))
            {
              *(_QWORD *)(a1 + 8) = v31 + 1;
              CGSize.encode(to:)((double *)a1, v10, v12);
              ProtobufEncoder.endLengthDelimited()();
              __asm { BR              X10 }
            }
            __break(1u);
LABEL_39:
            isUniquelyReferenced_nonNull_native = (int64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v32[2] + 1, 1, v32);
            v32 = (_QWORD *)isUniquelyReferenced_nonNull_native;
LABEL_9:
            v35 = v32[2];
            v34 = v32[3];
            if (v35 >= v34 >> 1)
            {
              isUniquelyReferenced_nonNull_native = (int64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v34 > 1), v35 + 1, 1, v32);
              v32 = (_QWORD *)isUniquelyReferenced_nonNull_native;
            }
            v32[2] = v35 + 1;
            v32[v35 + 4] = v31;
            *(_QWORD *)(a1 + 24) = v32;
            if (!__OFADD__(v31, 1))
              break;
            __break(1u);
LABEL_41:
            __break(1u);
LABEL_42:
            *(_DWORD *)ProtobufEncoder.growBufferSlow(to:)(isUniquelyReferenced_nonNull_native) = LODWORD(v3);
          }
          *(_QWORD *)(a1 + 8) = v31 + 1;
          NamedImage.Key.encode(to:)((_QWORD *)a1);
          if (v2)
            break;
          ProtobufEncoder.endLengthDelimited()();
          outlined destroy of TypesettingConfiguration((uint64_t)v7, type metadata accessor for NamedImage.Key);
        }
        outlined destroy of TypesettingConfiguration((uint64_t)v7, type metadata accessor for NamedImage.Key);
      }
      break;
  }
}

CGImageRef_optional __swiftcall GraphicsImage.render(at:prefersMask:)(CGSize at, Swift::Bool prefersMask)
{
  uint64_t v2;
  __n128 v3;
  __n128 v4;
  __n128 v5;
  CGImageRef_optional result;
  CGImage *v8;
  double v9;
  double v10;
  double v11;
  void *v12;
  void *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  char v20;
  id v21;
  id v22;
  void *v23;
  int v24;
  uint64_t v25;
  double v26;
  unsigned int v27;
  uint64_t v28;
  CGImage *v29;
  void *v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  double v35;
  char v36;
  double v37;
  double v38;
  uint64_t (*v39)(Swift::Bool, double, double, double);
  CGImage *v40;

  result.value = 0;
  if (at.width > 0.0 && at.height > 0.0)
  {
    v8 = *(CGImage **)v2;
    v9 = *(double *)(v2 + 16);
    v10 = *(double *)(v2 + 24);
    v11 = *(double *)(v2 + 32);
    result.value = 0;
    switch(*(_BYTE *)(v2 + 8))
    {
      case 0:
        outlined copy of GraphicsImage.Contents?(*(id *)v2, 0);
        result.value = v8;
        break;
      case 2:
        v12 = (void *)*((_QWORD *)v8 + 2);
        v13 = (void *)*((_QWORD *)v8 + 4);
        v16 = GraphicsImage.renderedSize(at:)(2, *(_QWORD *)(v2 + 44), *(unsigned __int8 *)(v2 + 40), (__n128)__PAIR128__(v14, *(unint64_t *)&at.width), (__n128)__PAIR128__(v15, *(unint64_t *)&at.height), v3, v4, v5);
        v18 = v17;
        v20 = v19;
        outlined copy of GraphicsImage.Contents?(v8, 2);
        v21 = v12;
        outlined copy of Image.Location(v13);
        v22 = objc_msgSend(v21, sel_glyph);
        if (v22)
        {
          v23 = v22;
          v24 = v20 & 1;
          if (v24)
            v25 = 0;
          else
            v25 = *(_QWORD *)&v9;
          if (v24)
          {
            v18 = 0;
            v16 = 0;
          }
          objc_msgSend(v21, sel_variableValue);
          *(float *)&v27 = v26;
          v28 = v27;
          if ((*(_QWORD *)&v26 & 0x7FF0000000000000) == 0x7FF0000000000000)
            v28 = 0;
          v29 = (CGImage *)CUINamedVectorGlyph.image(at:value:)(v16, v18, v25, v24, v28 | ((unint64_t)((*(_QWORD *)&v26 & 0x7FF0000000000000) == 0x7FF0000000000000) << 32));

          outlined consume of Image.Location(v13);
          outlined consume of GraphicsImage.Contents?(v8, 2);
          result.value = v29;
        }
        else
        {

          outlined consume of Image.Location(v13);
          outlined consume of GraphicsImage.Contents?(v8, 2);
          result.value = 0;
        }
        break;
      case 3:
        v31 = *((_QWORD *)v8 + 2);
        v30 = (void *)*((_QWORD *)v8 + 3);
        *(double *)&v34 = COERCE_DOUBLE(GraphicsImage.renderedSize(at:)(3, *(_QWORD *)(v2 + 44), *(unsigned __int8 *)(v2 + 40), (__n128)__PAIR128__(v32, *(unint64_t *)&at.width), (__n128)__PAIR128__(v33, *(unint64_t *)&at.height), v3, v4, v5));
        if ((v36 & 1) != 0)
        {
          v37 = 0.0;
          v38 = 0.0;
          if (v9 != 0.0)
          {
            v37 = v10 * (1.0 / v9);
            v38 = 1.0 / v9 * v11;
          }
        }
        else
        {
          v37 = *(double *)&v34;
          v38 = v35;
        }
        v39 = *(uint64_t (**)(Swift::Bool, double, double, double))(*(_QWORD *)v31 + 104);
        outlined copy of GraphicsImage.Contents?(v8, 3);
        swift_retain();
        outlined copy of Image.Location?(v30);
        swift_bridgeObjectRetain();
        v40 = (CGImage *)v39(prefersMask, v37, v38, v9);
        swift_release();
        outlined consume of Image.Location?(v30);
        swift_bridgeObjectRelease();
        outlined consume of GraphicsImage.Contents?(v8, 3);
        result.value = v40;
        break;
      default:
        return result;
    }
  }
  return result;
}

uint64_t GraphicsImage.bitmapOrientation.getter()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = v0[40];
  if (v0[8] == 2)
  {
    if (objc_msgSend(*(id *)(*(_QWORD *)v0 + 16), sel_flipsRightToLeft))
      return (0x405060702030001uLL >> (8 * v1));
    else
      return v1;
  }
  return v1;
}

void GraphicsImage.init(from:)(id *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char v13;
  unint64_t v14;
  unint64_t v15;
  id v16;
  _QWORD **v17;
  uint64_t v18;
  uint64_t v19;
  double v20;
  uint64_t v21;
  double v22;
  double v23;
  double v24;
  uint64_t v25;
  unint64_t v26;
  id v27;
  unint64_t v28;
  _QWORD **v29;
  uint64_t v30;
  float *v31;
  _QWORD *v32;
  char v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  double v38;
  uint64_t v39;
  float v40;
  int v41;
  int v42;
  int v43;
  _QWORD **v44;
  _QWORD *v45;
  float v46;
  int v47;
  int v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  Class v53;
  Class v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  id v61;
  uint64_t v62;
  void *v63;
  _QWORD *v64;
  uint64_t v65;
  BOOL v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  char v72;
  unint64_t v73;
  double *v74;
  uint64_t v75;
  _QWORD **v76;
  _QWORD *v77;
  uint64_t v78;
  unint64_t v79;
  unint64_t v80;
  uint64_t v81;
  unint64_t v82;
  double v83;
  uint64_t v84;
  _QWORD *v85;
  uint64_t v86;
  uint64_t v87;
  void *v88;
  uint64_t v89;
  unint64_t v90;
  unint64_t v91;
  _QWORD **v92;
  _QWORD *v93;
  uint64_t v94;
  unint64_t v95;
  unint64_t v96;
  uint64_t v97;
  unint64_t v98;
  int8x16_t v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  _QWORD *v103;
  unsigned __int32 v104;
  int32x2_t v105;
  __int32 v106;
  uint64_t v107;
  uint64_t v108;
  void *v109;
  int8x16_t v110;
  _QWORD **v111;
  _QWORD *v112;
  uint64_t v113;
  unint64_t v114;
  unint64_t v115;
  uint64_t v116;
  unint64_t v117;
  _QWORD *v118;
  uint64_t v119;
  uint64_t v120;
  void *v121;
  uint64_t v122;
  unint64_t v123;
  uint64_t v124;
  uint64_t v125;
  unint64_t v126;
  uint64_t v127;
  int v128;
  uint64_t v129;
  unint64_t v130;
  uint64_t v131;
  void *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  char v136;
  uint64_t v137;
  float *v138;
  float v139;
  uint64_t v140;
  unint64_t v141;
  uint64_t v142;
  char *v143;
  char v144;
  int8x16_t v145;
  char v146;
  char v147;
  char v148;
  char v149;
  __int128 v150;
  __int128 v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  __int128 v159;
  __int128 v160;
  int8x16_t v161;
  int v162;
  int v163;
  char *v164;
  char *v165;
  int v166;
  id v167;
  uint64_t v168;
  uint64_t v169;
  __int128 v170;
  __int128 v171;
  __int128 v172;
  __int128 v173;
  uint64_t v174;
  unsigned __int8 v175;
  int v176;
  char v177;
  BOOL v178;
  uint64_t v179;
  uint64_t v180;

  v3 = v2;
  v6 = type metadata accessor for CodingUserInfoKey();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v152 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for NamedImage.Key(0);
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v152 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = 1;
  v177 = 1;
  v178 = 1;
  v14 = (unint64_t)a1[1];
  v15 = (unint64_t)a1[2];
  if (v14 >= v15)
  {
    v144 = 0;
    v16 = 0;
    v145 = 0uLL;
    LOBYTE(v19) = -1;
    v146 = 3;
    v20 = 1.0;
    v21 = 0;
    v147 = 2;
    v148 = 1;
    v149 = 1;
    v22 = 0.0;
    v150 = 0uLL;
    v151 = 0uLL;
    goto LABEL_175;
  }
  v165 = v12;
  v164 = v9;
  v157 = v7;
  v158 = v6;
  v155 = a2;
  v176 = 0;
  v16 = 0;
  v17 = (_QWORD **)(a1 + 5);
  v18 = 8;
  v19 = 255;
  v163 = 3;
  v20 = 1.0;
  v21 = 0;
  v166 = 1;
  v162 = 2;
  v156 = MEMORY[0x24BEE4AD8] + 8;
  v22 = 0.0;
  v23 = 0.0;
  v24 = 0.0;
  v25 = 0;
  v161 = 0u;
  v160 = 0u;
  v159 = 0u;
  while (2)
  {
    v26 = (unint64_t)a1[3];
    if (!v26)
      goto LABEL_9;
    v27 = a1[4];
    if (v14 >= (unint64_t)v27)
    {
      if ((unint64_t)v27 < v14)
        goto LABEL_176;
      a1[3] = 0;
LABEL_9:
      v28 = ProtobufDecoder.decodeVarint()();
      if (v3)
        goto LABEL_183;
      v26 = v28;
      if (v28 <= 7)
      {
LABEL_176:
        lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
        swift_allocError();
        swift_willThrow();
        goto LABEL_183;
      }
    }
    switch(v26 >> 3)
    {
      case 1uLL:
        v29 = v17;
        v30 = v18;
        v31 = (float *)swift_allocObject();
        if ((v26 & 7) != 2)
          goto LABEL_180;
        v167 = v16;
        *(_QWORD *)&v154 = v29;
        v32 = *v29;
        v33 = v19;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v32 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v32[2] + 1, 1, v32);
        v35 = v32[2];
        v34 = v32[3];
        if (v35 >= v34 >> 1)
          v32 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v34 > 1), v35 + 1, 1, v32);
        v32[2] = v35 + 1;
        v32[v35 + 4] = v15;
        a1[5] = v32;
        v36 = ProtobufDecoder.decodeVarint()();
        if (v3)
        {
          LOBYTE(v19) = v33;
          v16 = v167;
LABEL_182:
          swift_deallocUninitializedObject();
LABEL_183:
          outlined consume of GraphicsImage.Contents?(v16, v19);
          return;
        }
        if (v36 < 0)
        {
          __break(1u);
LABEL_185:
          __break(1u);
LABEL_186:
          __break(1u);
LABEL_187:
          __break(1u);
LABEL_188:
          __break(1u);
LABEL_189:
          __break(1u);
LABEL_190:
          __break(1u);
LABEL_191:
          __break(1u);
LABEL_192:
          __break(1u);
LABEL_193:
          __break(1u);
LABEL_194:
          __break(1u);
LABEL_195:
          __break(1u);
LABEL_196:
          __break(1u);
LABEL_197:
          __break(1u);
LABEL_198:
          __break(1u);
LABEL_199:
          __break(1u);
LABEL_200:
          __break(1u);
LABEL_201:
          __break(1u);
LABEL_202:
          __break(1u);
LABEL_203:
          __break(1u);
LABEL_204:
          __break(1u);
LABEL_205:
          __break(1u);
          __break(1u);
          __break(1u);
          __break(1u);
          __break(1u);
          JUMPOUT(0x234DC6C98);
        }
        LOBYTE(v19) = v33;
        v37 = (unint64_t)a1[1] + v36;
        v16 = v167;
        if (v15 < v37)
        {
LABEL_180:
          lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
          swift_allocError();
          swift_willThrow();
          goto LABEL_182;
        }
        *(double *)&v152 = v22;
        *(_QWORD *)&v153 = v21;
        v38 = v20;
        v39 = v25;
        a1[2] = (id)v37;
        v40 = specialized Color.Resolved.init(from:)(a1);
        v44 = (_QWORD **)v154;
        v45 = *(_QWORD **)v154;
        if (!*(_QWORD *)(*(_QWORD *)v154 + 16))
          goto LABEL_192;
        v46 = v40;
        v47 = v41;
        v48 = v42;
        v49 = v43;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
        {
          v50 = v45[2];
          if (!v50)
            goto LABEL_199;
        }
        else
        {
          v45 = specialized _ArrayBuffer._consumeAndCreateNew()(v45);
          v50 = v45[2];
          if (!v50)
            goto LABEL_199;
        }
        v51 = v50 - 1;
        v52 = (void *)v45[v51 + 4];
        v45[2] = v51;
        a1[5] = v45;
        a1[2] = v52;
        v31[4] = v46;
        *((_DWORD *)v31 + 5) = v47;
        *((_DWORD *)v31 + 6) = v48;
        *((_DWORD *)v31 + 7) = v49;
        outlined consume of GraphicsImage.Contents?(v16, v19);
        v19 = 4;
        v16 = v31;
        v18 = v30;
        v17 = v44;
        v25 = v39;
        v20 = v38;
        v21 = v153;
        v22 = *(double *)&v152;
LABEL_164:
        if ((_DWORD)v18 != 8)
        {
LABEL_3:
          v176 = v18;
          v21 = v25;
          v22 = v24;
          v20 = v23;
        }
        v14 = (unint64_t)a1[1];
        v15 = (unint64_t)a1[2];
        if (v14 < v15)
          continue;
        v148 = v177;
        v13 = v178;
        a2 = v155;
        v146 = v163;
        v149 = v166;
        v147 = v162;
        v145 = v161;
        v150 = v160;
        v151 = v159;
        v144 = v176;
LABEL_175:
        a1[3] = 0;
        *(_QWORD *)a2 = v16;
        *(_BYTE *)(a2 + 8) = v19;
        *(double *)(a2 + 16) = v20;
        *(double *)(a2 + 24) = v22;
        *(_QWORD *)(a2 + 32) = v21;
        *(_BYTE *)(a2 + 40) = v144;
        *(int8x16_t *)(a2 + 44) = v145;
        *(_BYTE *)(a2 + 60) = v148;
        *(_OWORD *)(a2 + 64) = v150;
        *(_OWORD *)(a2 + 80) = v151;
        *(_BYTE *)(a2 + 96) = v147;
        *(_BYTE *)(a2 + 97) = v13;
        *(_BYTE *)(a2 + 98) = v149;
        *(_BYTE *)(a2 + 99) = v146;
        return;
      case 2uLL:
        if ((v26 & 7) != 2)
          goto LABEL_176;
        ProtobufDecoder.beginMessage()();
        if (v3)
          goto LABEL_183;
        v53 = specialized ProtobufDecoder.decodeAttachedValue<A>(as:generator:)((uint64_t)a1);
        v3 = 0;
        if (!(*v17)[2])
          goto LABEL_188;
        v54 = v53;
        v55 = specialized Array._customRemoveLast()();
        if (!v55)
          v55 = specialized Array.remove(at:)((*v17)[2] - 1);
        a1[2] = (id)v55;
        outlined consume of GraphicsImage.Contents?(v16, v19);
        v19 = 0;
        v16 = v54;
        goto LABEL_164;
      case 3uLL:
        v56 = v18;
        v57 = swift_allocObject();
        if ((v26 & 7) != 2)
          goto LABEL_180;
        ProtobufDecoder.beginMessage()();
        if (v3)
          goto LABEL_182;
        VectorImageLayer.init(from:)(a1, (double **)(v57 + 16));
        v3 = 0;
        if (!(*v17)[2])
          goto LABEL_189;
        v58 = specialized Array._customRemoveLast()();
        if (!v58)
          v58 = specialized Array.remove(at:)((*v17)[2] - 1);
        a1[2] = (id)v58;
        outlined consume of GraphicsImage.Contents?(v16, v19);
        v19 = 3;
        v16 = (id)v57;
        v18 = v56;
        goto LABEL_164;
      case 4uLL:
        if ((v26 & 7) != 2)
          goto LABEL_176;
        ProtobufDecoder.beginMessage()();
        if (v3)
          goto LABEL_183;
        NamedImage.Key.init(from:)(a1, (uint64_t)v165);
        v3 = 0;
        v59 = *v17;
        if (!(*v17)[2])
          goto LABEL_190;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v59 = specialized _ArrayBuffer._consumeAndCreateNew()(v59);
        v176 = v19;
        v60 = v59[2];
        if (!v60)
          goto LABEL_191;
        v61 = v16;
        v62 = v60 - 1;
        v63 = (void *)v59[v62 + 4];
        v59[2] = v62;
        a1[5] = v59;
        a1[2] = v63;
        v64 = a1[6];
        v65 = one-time initialization token for namedImagesKey;
        v167 = *a1;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v66 = v65 == -1;
        v67 = v158;
        v68 = v157;
        if (!v66)
          swift_once();
        v69 = __swift_project_value_buffer(v67, (uint64_t)static ArchiveReader.namedImagesKey);
        v70 = (uint64_t)v164;
        (*(void (**)(char *, uint64_t, uint64_t))(v68 + 16))(v164, v69, v67);
        if (v64[2] && (v71 = specialized __RawDictionaryStorage.find<A>(_:)(v70), (v72 & 1) != 0))
        {
          outlined init with copy of Any(v64[7] + 32 * v71, (uint64_t)&v170);
        }
        else
        {
          v170 = 0u;
          v171 = 0u;
        }
        (*(void (**)(char *, uint64_t))(v68 + 8))(v164, v67);
        if (*((_QWORD *)&v171 + 1))
        {
          if ((swift_dynamicCast() & 1) != 0)
          {
            v132 = v61;
            v134 = v168;
            v133 = v169;
            goto LABEL_140;
          }
        }
        else
        {
          outlined destroy of TypesettingConfiguration((uint64_t)&v170, (uint64_t (*)(_QWORD))type metadata accessor for Any?);
        }
        v132 = v61;
        if (one-time initialization token for sharedCache != -1)
          swift_once();
        v134 = static NamedImage.sharedCache;
        v133 = unk_25426A178;
        swift_retain();
        swift_retain();
LABEL_140:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();

        *(_QWORD *)&v170 = v134;
        *((_QWORD *)&v170 + 1) = v133;
        v135 = (uint64_t)v165;
        NamedImage.Cache.decode(_:)((uint64_t)v165, (CGImage **)&v172);
        v136 = v176;
        swift_release();
        swift_release();
        outlined destroy of TypesettingConfiguration(v135, type metadata accessor for NamedImage.Key);
        v16 = (id)v172;
        v137 = BYTE8(v172);
        v24 = *((double *)&v173 + 1);
        v23 = *(double *)&v173;
        v25 = v174;
        v18 = v175;
        outlined consume of GraphicsImage.Contents?(v132, v136);
        v19 = v137;
        goto LABEL_3;
      case 5uLL:
        v73 = v26 & 7;
        if (v73 == 5)
        {
          v138 = (float *)a1[1];
          if (v15 < (unint64_t)(v138 + 1))
            goto LABEL_176;
          v139 = *v138;
          a1[1] = v138 + 1;
          v20 = v139;
        }
        else
        {
          if (v73 == 2)
          {
            v140 = ProtobufDecoder.decodeVarint()();
            if (v3)
              goto LABEL_183;
            if (v140 < 0)
              goto LABEL_204;
            v74 = (double *)a1[1];
            if (v15 < (unint64_t)v74 + v140)
              goto LABEL_176;
            a1[3] = (id)41;
            a1[4] = (char *)v74 + v140;
          }
          else
          {
            if (v73 != 1)
              goto LABEL_176;
            v74 = (double *)a1[1];
          }
          if (v15 < (unint64_t)(v74 + 1))
            goto LABEL_176;
          v20 = *v74;
          a1[1] = v74 + 1;
        }
        goto LABEL_164;
      case 6uLL:
        if ((v26 & 7) != 2)
          goto LABEL_176;
        v167 = v16;
        v75 = v19;
        v76 = v17;
        v77 = *v17;
        v78 = v18;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v77 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v77[2] + 1, 1, v77);
        v80 = v77[2];
        v79 = v77[3];
        if (v80 >= v79 >> 1)
          v77 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v79 > 1), v80 + 1, 1, v77);
        v77[2] = v80 + 1;
        v77[v80 + 4] = v15;
        a1[5] = v77;
        v81 = ProtobufDecoder.decodeVarint()();
        if (v3)
          goto LABEL_179;
        if (v81 < 0)
          goto LABEL_185;
        v82 = (unint64_t)a1[1] + v81;
        if (v15 < v82)
          goto LABEL_178;
        v18 = v78;
        a1[2] = (id)v82;
        v83 = specialized CGPoint.init(from:)(a1);
        v85 = *v76;
        if (!(*v76)[2])
          goto LABEL_193;
        v22 = v83;
        v21 = v84;
        v17 = v76;
        v19 = v75;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v85 = specialized _ArrayBuffer._consumeAndCreateNew()(v85);
        v16 = v167;
        v86 = v85[2];
        if (!v86)
          goto LABEL_196;
        v87 = v86 - 1;
        v88 = (void *)v85[v87 + 4];
        v85[2] = v87;
        a1[5] = v85;
        a1[2] = v88;
        goto LABEL_164;
      case 7uLL:
        if ((v26 & 7) == 0)
          goto LABEL_73;
        if ((v26 & 7) != 2)
          goto LABEL_176;
        v89 = ProtobufDecoder.decodeVarint()();
        if (v3)
          goto LABEL_183;
        if (v89 < 0)
          goto LABEL_200;
        v90 = (unint64_t)a1[1] + v89;
        if (v15 < v90)
          goto LABEL_176;
        a1[3] = (id)56;
        a1[4] = (id)v90;
LABEL_73:
        v91 = ProtobufDecoder.decodeVarint()();
        if (v3)
          goto LABEL_183;
        if (v91 <= 0xFF)
        {
          switch((char)v91)
          {
            case 1:
              v176 = 4;
              break;
            case 2:
              v176 = 1;
              break;
            case 3:
              v176 = 5;
              break;
            case 4:
              v176 = 3;
              break;
            case 5:
              v176 = 7;
              break;
            case 6:
              v176 = 2;
              break;
            case 7:
              v176 = 6;
              break;
            default:
              goto LABEL_75;
          }
        }
        else
        {
LABEL_75:
          v176 = 0;
        }
        goto LABEL_164;
      case 8uLL:
        if ((v26 & 7) != 2)
          goto LABEL_176;
        v167 = v16;
        v75 = v19;
        v92 = v17;
        v93 = *v17;
        v94 = v18;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v93 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v93[2] + 1, 1, v93);
        v96 = v93[2];
        v95 = v93[3];
        if (v96 >= v95 >> 1)
          v93 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v95 > 1), v96 + 1, 1, v93);
        v93[2] = v96 + 1;
        v93[v96 + 4] = v15;
        a1[5] = v93;
        v97 = ProtobufDecoder.decodeVarint()();
        if (v3)
          goto LABEL_179;
        if (v97 < 0)
          goto LABEL_186;
        v98 = (unint64_t)a1[1] + v97;
        if (v15 < v98)
          goto LABEL_178;
        v18 = v94;
        a1[2] = (id)v98;
        *(float *)v99.i32 = specialized Color.Resolved.init(from:)(a1);
        v152 = v100;
        v153 = v101;
        v154 = v102;
        v161 = v99;
        v103 = *v92;
        if (!(*v92)[2])
          goto LABEL_194;
        v17 = v92;
        v19 = v75;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v103 = specialized _ArrayBuffer._consumeAndCreateNew()(v103);
        v16 = v167;
        v104 = v161.i32[0];
        v105.i32[0] = v154;
        v106 = v153;
        v107 = v103[2];
        if (!v107)
          goto LABEL_197;
        v108 = v107 - 1;
        v109 = (void *)v103[v108 + 4];
        v103[2] = v108;
        a1[5] = v103;
        a1[2] = v109;
        v105.i32[1] = v106;
        v110.i64[0] = v104;
        v110.i64[1] = v152;
        v161 = vorrq_s8((int8x16_t)vshll_n_s32(v105, 0x20uLL), v110);
        v177 = 0;
        goto LABEL_164;
      case 9uLL:
        if ((v26 & 7) != 2)
          goto LABEL_176;
        v167 = v16;
        v75 = v19;
        v111 = v17;
        v112 = *v17;
        v113 = v18;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v112 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v112[2] + 1, 1, v112);
        v115 = v112[2];
        v114 = v112[3];
        if (v115 >= v114 >> 1)
          v112 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v114 > 1), v115 + 1, 1, v112);
        v112[2] = v115 + 1;
        v112[v115 + 4] = v15;
        a1[5] = v112;
        v116 = ProtobufDecoder.decodeVarint()();
        if (v3)
          goto LABEL_179;
        if (v116 < 0)
          goto LABEL_187;
        v117 = (unint64_t)a1[1] + v116;
        if (v15 >= v117)
        {
          v18 = v113;
          a1[2] = (id)v117;
          Image.ResizingInfo.init(from:)((unint64_t)a1, (uint64_t)&v172);
          v118 = *v111;
          if (!(*v111)[2])
            goto LABEL_195;
          v17 = v111;
          v19 = v75;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v118 = specialized _ArrayBuffer._consumeAndCreateNew()(v118);
          v16 = v167;
          v119 = v118[2];
          if (!v119)
            goto LABEL_198;
          v120 = v119 - 1;
          v121 = (void *)v118[v120 + 4];
          v118[2] = v120;
          a1[5] = v118;
          a1[2] = v121;
          v160 = v172;
          v159 = v173;
          v162 = v174;
          goto LABEL_164;
        }
LABEL_178:
        lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
        swift_allocError();
        swift_willThrow();
LABEL_179:
        LOBYTE(v19) = v75;
        v16 = v167;
        goto LABEL_183;
      case 0xAuLL:
        if ((v26 & 7) == 0)
          goto LABEL_108;
        if ((v26 & 7) != 2)
          goto LABEL_176;
        v122 = ProtobufDecoder.decodeVarint()();
        if (v3)
          goto LABEL_183;
        if (v122 < 0)
          goto LABEL_201;
        v123 = (unint64_t)a1[1] + v122;
        if (v15 < v123)
          goto LABEL_176;
        a1[3] = (id)80;
        a1[4] = (id)v123;
LABEL_108:
        v124 = ProtobufDecoder.decodeVarint()();
        if (v3)
          goto LABEL_183;
        v178 = v124 != 0;
        goto LABEL_164;
      case 0xBuLL:
        if ((v26 & 7) == 0)
          goto LABEL_116;
        if ((v26 & 7) != 2)
          goto LABEL_176;
        v125 = ProtobufDecoder.decodeVarint()();
        if (v3)
          goto LABEL_183;
        if (v125 < 0)
          goto LABEL_202;
        v126 = (unint64_t)a1[1] + v125;
        if (v15 < v126)
          goto LABEL_176;
        a1[3] = (id)88;
        a1[4] = (id)v126;
LABEL_116:
        v127 = ProtobufDecoder.decodeVarint()();
        if (v3)
          goto LABEL_183;
        v166 = 0;
        switch(v127)
        {
          case 0:
            goto LABEL_164;
          case 2:
            v128 = 2;
            goto LABEL_162;
          case 3:
            v128 = 3;
            goto LABEL_162;
          default:
            v128 = 1;
LABEL_162:
            v143 = (char *)&v180 + 4;
            break;
        }
        goto LABEL_163;
      case 0xCuLL:
        if ((v26 & 7) == 0)
          goto LABEL_125;
        if ((v26 & 7) != 2)
          goto LABEL_176;
        v129 = ProtobufDecoder.decodeVarint()();
        if (v3)
          goto LABEL_183;
        if (v129 < 0)
          goto LABEL_203;
        v130 = (unint64_t)a1[1] + v129;
        if (v15 < v130)
          goto LABEL_176;
        a1[3] = (id)96;
        a1[4] = (id)v130;
LABEL_125:
        v131 = ProtobufDecoder.decodeVarint()();
        if (v3)
          goto LABEL_183;
        if (v131)
        {
          if (v131 == 1)
          {
            v128 = 1;
          }
          else if (v131 == 2)
          {
            v128 = 2;
          }
          else
          {
            v128 = 3;
          }
          v143 = (char *)&v179 + 4;
LABEL_163:
          *((_DWORD *)v143 - 64) = v128;
        }
        else
        {
          v163 = 0;
        }
        goto LABEL_164;
      default:
        switch(v26 & 7)
        {
          case 0uLL:
            ProtobufDecoder.decodeVarint()();
            if (v3)
              goto LABEL_183;
            goto LABEL_164;
          case 1uLL:
            v141 = (unint64_t)a1[1] + 8;
            goto LABEL_154;
          case 2uLL:
            v142 = ProtobufDecoder.decodeVarint()();
            if (v3)
              goto LABEL_183;
            if (v142 < 0)
              goto LABEL_205;
            v141 = (unint64_t)a1[1] + v142;
LABEL_154:
            if (v15 < v141)
              goto LABEL_176;
            a1[1] = (id)v141;
            break;
          case 5uLL:
            v141 = (unint64_t)a1[1] + 4;
            goto LABEL_154;
          default:
            goto LABEL_176;
        }
        goto LABEL_164;
    }
  }
}

void protocol witness for ProtobufEncodableMessage.encode(to:) in conformance GraphicsImage(uint64_t a1)
{
  GraphicsImage.encode(to:)(a1);
}

void protocol witness for ProtobufDecodableMessage.init(from:) in conformance GraphicsImage(id *a1@<X0>, uint64_t a2@<X8>)
{
  GraphicsImage.init(from:)(a1, a2);
}

id ResolvedVectorGlyph.animator.getter()
{
  id *v0;

  return *v0;
}

void ResolvedVectorGlyph.layoutDirection.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 8);
}

id ResolvedVectorGlyph.location.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  void *v2;

  v2 = *(void **)(v1 + 16);
  *a1 = v2;
  return outlined copy of Image.Location(v2);
}

uint64_t ResolvedVectorGlyph.animatorVersion.getter()
{
  uint64_t v0;

  return *(unsigned int *)(v0 + 24);
}

uint64_t ResolvedVectorGlyph.animatorVersion.setter(uint64_t result)
{
  uint64_t v1;

  *(_DWORD *)(v1 + 24) = result;
  return result;
}

uint64_t (*ResolvedVectorGlyph.animatorVersion.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t ResolvedVectorGlyph.allowsContentTransitions.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 28);
}

uint64_t ResolvedVectorGlyph.allowsContentTransitions.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 28) = result;
  return result;
}

uint64_t (*ResolvedVectorGlyph.allowsContentTransitions.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t ResolvedVectorGlyph.preservesVectorRepresentation.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 29);
}

uint64_t ResolvedVectorGlyph.preservesVectorRepresentation.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 29) = result;
  return result;
}

uint64_t (*ResolvedVectorGlyph.preservesVectorRepresentation.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t ResolvedVectorGlyph.init(glyph:value:flipsRightToLeft:in:at:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t *a4@<X3>, uint64_t *a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v11;
  void *v12;
  double v13;
  id v14;
  char v15;
  id v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  char v22;
  uint64_t result;
  char v24;
  char v25;

  v11 = *a5;
  v12 = (void *)a4[2];
  if (v12)
  {
    if ((a2 & 0x100000000) != 0)
      v13 = INFINITY;
    else
      v13 = *(float *)&a2;
    v14 = v12;
    v15 = ImageResolutionContext.willUpdateVectorGlyph(to:variableValue:)(a1, v13);

  }
  else
  {
    v14 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BE7EF50]), sel_init);
    objc_msgSend(v14, sel_setAnchorPoint_, 0.0, 0.0);
    v15 = 0;
    if ((a2 & 0x100000000) != 0)
      v13 = INFINITY;
    else
      v13 = *(float *)&a2;
  }
  objc_msgSend(v14, sel_setGlyph_, a1);
  objc_msgSend(v14, sel_setVariableValue_, v13);
  objc_msgSend(v14, sel_setFlipsRightToLeft_, a3 & 1);
  v16 = v14;
  ImageResolutionContext.effectiveSymbolRenderingMode.getter(&v25);
  objc_msgSend(v16, sel_setRenderingMode_, dword_2352A2268[v25]);

  v17 = *a4;
  if (a4[1])
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v17, &v24);
    swift_release_n();
    swift_release_n();
    v18 = v24;
  }
  else
  {
    v19 = swift_retain_n();
    v20 = specialized find<A>(_:key:)(v19);
    if (v20)
      v18 = *(_BYTE *)(v20 + 72);
    else
      v18 = 0;
    swift_release_n();
  }
  v21 = objc_msgSend(v16, sel_version);

  v22 = *((_BYTE *)a4 + *(int *)(type metadata accessor for ImageResolutionContext() + 40));
  result = outlined destroy of TypesettingConfiguration((uint64_t)a4, (uint64_t (*)(_QWORD))type metadata accessor for ImageResolutionContext);
  *(_QWORD *)a6 = v16;
  *(_BYTE *)(a6 + 8) = v18;
  *(_QWORD *)(a6 + 16) = v11;
  *(_DWORD *)(a6 + 24) = v21;
  *(_BYTE *)(a6 + 28) = v15 & 1;
  *(_BYTE *)(a6 + 29) = (v22 & 0x10) != 0;
  return result;
}

id ResolvedVectorGlyph.glyph.getter()
{
  id *v0;

  return objc_msgSend(*v0, sel_glyph);
}

id ResolvedVectorGlyph.flipsRightToLeft.getter()
{
  id *v0;

  return objc_msgSend(*v0, sel_flipsRightToLeft);
}

unint64_t ResolvedVectorGlyph.value.getter()
{
  id *v0;
  double v1;
  unsigned int v2;
  uint64_t v3;

  objc_msgSend(*v0, sel_variableValue);
  *(float *)&v2 = v1;
  v3 = v2;
  if ((*(_QWORD *)&v1 & 0x7FF0000000000000) == 0x7FF0000000000000)
    v3 = 0;
  return v3 | ((unint64_t)((*(_QWORD *)&v1 & 0x7FF0000000000000) == 0x7FF0000000000000) << 32);
}

id ResolvedVectorGlyph.renderingMode.getter@<X0>(char *a1@<X8>)
{
  id *v1;
  id result;
  char v4;

  result = objc_msgSend(*v1, sel_renderingMode);
  switch((int)result)
  {
    case 0:
      v4 = 4;
      break;
    case 1:
      v4 = 0;
      break;
    case 2:
      v4 = 1;
      break;
    case 3:
      v4 = 2;
      break;
    case 4:
      v4 = 3;
      break;
    default:
      if ((_DWORD)result == 128)
        v4 = 5;
      else
        v4 = 8;
      break;
  }
  *a1 = v4;
  return result;
}

void ResolvedVectorGlyph.resolvedRenderingMode.getter(char *a1@<X8>)
{
  void **v1;
  void *v3;
  unsigned int v4;
  char v5;
  id v6;
  void *v7;
  id v8;

  v3 = *v1;
  v4 = objc_msgSend(v3, sel_renderingMode);
  v5 = 0;
  switch(v4)
  {
    case 0u:
      v6 = objc_msgSend(v3, sel_glyph);
      if (v6)
      {
        v7 = v6;
        v8 = objc_msgSend(v6, sel_preferredRenderingMode);

        if (v8 == (id)2)
          v5 = 1;
        else
          v5 = 8;
        if (v8 == (id)3)
          v5 = 2;
      }
      else
      {
        v5 = 4;
      }
      break;
    case 1u:
      break;
    case 2u:
      v5 = 1;
      break;
    case 3u:
      v5 = 2;
      break;
    case 4u:
      v5 = 3;
      break;
    default:
      if (v4 == 128)
        v5 = 5;
      else
        v5 = 8;
      break;
  }
  *a1 = v5;
}

id ResolvedVectorGlyph.alignmentRect.getter()
{
  id *v0;

  return objc_msgSend(*v0, sel_alignmentRect);
}

uint64_t GraphicsImage.renderedSize(at:)(uint64_t result, uint64_t a2, uint64_t a3, __n128 a4, __n128 a5, __n128 a6, __n128 a7, __n128 a8)
{
  uint64_t v8;
  int v9;

  v9 = *(unsigned __int8 *)(v8 + 96);
  if (v9 == 2
    || (result = 0,
        a3 = 1,
        a2 = 0,
        (vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vceqzq_f64(*(float64x2_t *)(v8 + 64)), (int32x4_t)vceqzq_f64(*(float64x2_t *)(v8 + 80)))))) & 1) == 0)&& (v9 & 1) != 0)
  {
    a6.n128_u64[0] = *(_QWORD *)(v8 + 16);
    a7.n128_u64[0] = *(_QWORD *)(v8 + 24);
    a8.n128_u64[0] = *(_QWORD *)(v8 + 32);
    return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, __n128, __n128, __n128, __n128, __n128, double))((char *)&loc_234DC728C + 4 * byte_2352A211D[*(unsigned __int8 *)(v8 + 40)]))(result, a2, a3, a4, a5, a6, a7, a8, a5.n128_f64[0]);
  }
  return result;
}

uint64_t specialized static ResolvedVectorGlyph.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  char v2;
  BOOL v3;
  void *v4;
  void *v5;
  uint64_t v6;

  v2 = 0;
  v3 = *(_QWORD *)a1 == *(_QWORD *)a2 && *(_DWORD *)(a1 + 24) == *(_DWORD *)(a2 + 24);
  if (v3 && ((*(unsigned __int8 *)(a1 + 8) ^ *(unsigned __int8 *)(a2 + 8)) & 1) == 0)
  {
    v4 = *(void **)(a1 + 16);
    v5 = *(void **)(a2 + 16);
    if (v4)
    {
      if (v4 == (void *)1)
      {
        if (v5 == (void *)1)
        {
          v6 = 1;
          v2 = 1;
LABEL_16:
          outlined consume of Image.Location((id)v6);
          outlined consume of Image.Location(v5);
          return v2 & 1;
        }
      }
      else if ((unint64_t)v5 >= 2)
      {
        type metadata accessor for NSObject();
        outlined copy of Image.Location(v5);
        outlined copy of Image.Location(v4);
        outlined copy of Image.Location(v5);
        outlined copy of Image.Location(v4);
        v2 = static NSObject.== infix(_:_:)();
        outlined consume of Image.Location(v4);
        outlined consume of Image.Location(v5);
        v6 = (uint64_t)v5;
        v5 = v4;
        goto LABEL_16;
      }
    }
    else if (!v5)
    {
      v6 = 0;
      v2 = 1;
      goto LABEL_16;
    }
    outlined copy of Image.Location(*(id *)(a2 + 16));
    outlined copy of Image.Location(v4);
    v2 = 0;
    v6 = (uint64_t)v4;
    goto LABEL_16;
  }
  return v2 & 1;
}

void specialized static GraphicsImage.Contents.== infix(_:_:)(uint64_t a1)
{
  __asm { BR              X9 }
}

BOOL sub_234DC743C()
{
  void *v0;
  void *v1;
  char v2;
  int v3;

  if (v3)
  {
    outlined copy of GraphicsImage.Contents(v0, v3);
    outlined copy of GraphicsImage.Contents(v1, v2);
    outlined consume of GraphicsImage.Contents(v1, v2);
    outlined consume of GraphicsImage.Contents(v0, v3);
    return 0;
  }
  else
  {
    outlined copy of GraphicsImage.Contents(v0, 0);
    outlined copy of GraphicsImage.Contents(v1, 0);
    outlined consume of GraphicsImage.Contents(v1, 0);
    outlined consume of GraphicsImage.Contents(v0, 0);
    return v1 == v0;
  }
}

uint64_t specialized static GraphicsImage.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  void *v2;
  int v3;
  double v4;
  double v5;
  double v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  int v11;
  int v12;
  int v13;
  int v14;
  void *v15;
  int v16;
  double v17;
  double v18;
  double v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  float64x2_t v24;
  float64x2_t v25;
  float64x2_t v26;
  float64x2_t v27;
  int v28;
  int v29;
  int v30;
  int v31;
  char v32;
  char v33;
  uint64_t result;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  char v43;
  uint64_t v44;
  float64x2_t v45;
  float64x2_t v46;
  float64x2_t v47;
  float64x2_t v48;
  void *v49;
  char v50;

  v2 = *(void **)a1;
  v3 = *(unsigned __int8 *)(a1 + 8);
  v5 = *(double *)(a1 + 16);
  v4 = *(double *)(a1 + 24);
  v6 = *(double *)(a1 + 32);
  v7 = *(_BYTE *)(a1 + 40);
  v8 = *(_QWORD *)(a1 + 44);
  v9 = *(_QWORD *)(a1 + 52);
  v10 = *(_BYTE *)(a1 + 60);
  v11 = *(unsigned __int8 *)(a1 + 96);
  v12 = *(unsigned __int8 *)(a1 + 97);
  v13 = *(unsigned __int8 *)(a1 + 98);
  v14 = *(unsigned __int8 *)(a1 + 99);
  v15 = *(void **)a2;
  v16 = *(unsigned __int8 *)(a2 + 8);
  v18 = *(double *)(a2 + 16);
  v17 = *(double *)(a2 + 24);
  v19 = *(double *)(a2 + 32);
  v20 = *(_BYTE *)(a2 + 40);
  v21 = *(_QWORD *)(a2 + 44);
  v22 = *(_QWORD *)(a2 + 52);
  v23 = *(unsigned __int8 *)(a2 + 60);
  v25 = *(float64x2_t *)(a1 + 64);
  v24 = *(float64x2_t *)(a1 + 80);
  v27 = *(float64x2_t *)(a2 + 64);
  v26 = *(float64x2_t *)(a2 + 80);
  v28 = *(unsigned __int8 *)(a2 + 96);
  v29 = *(unsigned __int8 *)(a2 + 97);
  v30 = *(unsigned __int8 *)(a2 + 98);
  v31 = *(unsigned __int8 *)(a2 + 99);
  if (v3 != 255)
  {
    v49 = *(void **)a1;
    v50 = v3;
    if (v16 != 255)
    {
      v42 = v23;
      v43 = v10;
      v44 = v21;
      v45 = v27;
      v46 = v26;
      v47 = v25;
      v48 = v24;
      v40 = v29;
      v41 = v28;
      v38 = v31;
      v39 = v30;
      v36 = v13;
      v37 = v12;
      v35 = v14;
      outlined copy of GraphicsImage.Contents?(v2, v3);
      outlined copy of GraphicsImage.Contents(v2, v3);
      specialized static GraphicsImage.Contents.== infix(_:_:)((uint64_t)&v49);
      v33 = v32;
      outlined consume of GraphicsImage.Contents(v49, v50);
      outlined consume of GraphicsImage.Contents?(v2, v3);
      result = 0;
      if ((v33 & 1) == 0)
        return result;
      if (v5 != v18)
        return result;
      if (v4 != v17)
        return result;
      v25 = v47;
      v24 = v48;
      v27 = v45;
      v26 = v46;
      v21 = v44;
      v23 = v42;
      v10 = v43;
      if (v6 != v19)
        return result;
LABEL_12:
      if (((0x507030104060200uLL >> (8 * v7)) & 7) == ((0x507030104060200uLL >> (8 * v20)) & 7))
      {
        if ((v10 & 1) != 0)
        {
          if (!v23)
            return 0;
        }
        else
        {
          if ((v23 & 1) != 0)
            return 0;
          result = 0;
          if (*(float *)&v8 != *(float *)&v21
            || *((float *)&v8 + 1) != *((float *)&v21 + 1)
            || *(float *)&v9 != *(float *)&v22
            || *((float *)&v9 + 1) != *((float *)&v22 + 1))
          {
            return result;
          }
        }
        if (v11 == 2)
        {
          if (v41 != 2)
            return 0;
        }
        else
        {
          if (v41 == 2)
            return 0;
          result = 0;
          if ((vmaxv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vceqq_f64(v25, v27), (int32x4_t)vceqq_f64(v24, v26)))), 0xFuLL))) & 1) != 0|| ((v41 ^ v11) & 1) != 0)
          {
            return result;
          }
        }
        result = 0;
        if (v37 != v40 || v36 != v39)
          return result;
        if (v35 == 3)
        {
          if (v38 == 3)
            return 1;
        }
        else if (v38 != 3 && v35 == v38)
        {
          return 1;
        }
      }
      return 0;
    }
    outlined copy of GraphicsImage.Contents(v2, v3);
    outlined copy of GraphicsImage.Contents(v2, v3);
    outlined consume of GraphicsImage.Contents(v2, v3);
LABEL_17:
    outlined copy of GraphicsImage.Contents?(v15, v16);
    outlined consume of GraphicsImage.Contents?(v2, v3);
    outlined consume of GraphicsImage.Contents?(v15, v16);
    return 0;
  }
  if (v16 != 255)
    goto LABEL_17;
  v40 = *(unsigned __int8 *)(a2 + 97);
  v41 = *(unsigned __int8 *)(a2 + 96);
  v38 = *(unsigned __int8 *)(a2 + 99);
  v39 = *(unsigned __int8 *)(a2 + 98);
  result = 0;
  if (v5 == v18 && v4 == v17)
  {
    v36 = v13;
    v37 = v12;
    v35 = v14;
    if (v6 == v19)
      goto LABEL_12;
  }
  return result;
}

uint64_t outlined init with copy of NamedImage.Key(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for NamedImage.Key(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

id outlined copy of Image.Location?(id result)
{
  if (result != (id)2)
    return outlined copy of Image.Location(result);
  return result;
}

void outlined consume of Image.Location?(id a1)
{
  if (a1 != (id)2)
    outlined consume of Image.Location(a1);
}

uint64_t sub_234DC7A0C()
{
  uint64_t v0;
  void *v1;

  swift_release();
  v1 = *(void **)(v0 + 24);
  if ((unint64_t)v1 >= 3)

  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_234DC7A48()
{
  return swift_deallocObject();
}

uint64_t initializeWithCopy for GraphicsImage(uint64_t a1, uint64_t *a2)
{
  int v4;
  uint64_t v5;
  __int128 v6;

  v4 = *((unsigned __int8 *)a2 + 8);
  if (v4 == 255)
  {
    *(_QWORD *)a1 = *a2;
    *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
  }
  else
  {
    v5 = *a2;
    outlined copy of GraphicsImage.Contents((id)*a2, *((_BYTE *)a2 + 8));
    *(_QWORD *)a1 = v5;
    *(_BYTE *)(a1 + 8) = v4;
  }
  *(_QWORD *)(a1 + 16) = a2[2];
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 3);
  *(_BYTE *)(a1 + 40) = *((_BYTE *)a2 + 40);
  *(_OWORD *)(a1 + 44) = *(_OWORD *)((char *)a2 + 44);
  *(_BYTE *)(a1 + 60) = *((_BYTE *)a2 + 60);
  v6 = *((_OWORD *)a2 + 5);
  *(_OWORD *)(a1 + 64) = *((_OWORD *)a2 + 4);
  *(_OWORD *)(a1 + 80) = v6;
  *(_WORD *)(a1 + 96) = *((_WORD *)a2 + 48);
  *(_BYTE *)(a1 + 98) = *((_BYTE *)a2 + 98);
  *(_BYTE *)(a1 + 99) = *((_BYTE *)a2 + 99);
  return a1;
}

uint64_t assignWithCopy for GraphicsImage(uint64_t a1, uint64_t a2)
{
  int v4;
  id v5;
  void *v6;
  char v7;
  id v8;
  char v9;
  id v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;

  v4 = *(unsigned __int8 *)(a2 + 8);
  if (*(unsigned __int8 *)(a1 + 8) == 255)
  {
    if (v4 == 255)
    {
      v10 = *(id *)a2;
      *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
      *(_QWORD *)a1 = v10;
    }
    else
    {
      v8 = *(id *)a2;
      outlined copy of GraphicsImage.Contents(*(id *)a2, *(_BYTE *)(a2 + 8));
      *(_QWORD *)a1 = v8;
      *(_BYTE *)(a1 + 8) = v4;
    }
  }
  else if (v4 == 255)
  {
    outlined destroy of GraphicsImage.Contents(a1);
    v9 = *(_BYTE *)(a2 + 8);
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_BYTE *)(a1 + 8) = v9;
  }
  else
  {
    v5 = *(id *)a2;
    outlined copy of GraphicsImage.Contents(*(id *)a2, *(_BYTE *)(a2 + 8));
    v6 = *(void **)a1;
    *(_QWORD *)a1 = v5;
    v7 = *(_BYTE *)(a1 + 8);
    *(_BYTE *)(a1 + 8) = v4;
    outlined consume of GraphicsImage.Contents(v6, v7);
  }
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  v11 = *(_OWORD *)(a2 + 44);
  *(_BYTE *)(a1 + 60) = *(_BYTE *)(a2 + 60);
  *(_OWORD *)(a1 + 44) = v11;
  v12 = *(_OWORD *)(a2 + 64);
  v13 = *(_OWORD *)(a2 + 80);
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  *(_OWORD *)(a1 + 64) = v12;
  *(_OWORD *)(a1 + 80) = v13;
  *(_BYTE *)(a1 + 97) = *(_BYTE *)(a2 + 97);
  *(_BYTE *)(a1 + 98) = *(_BYTE *)(a2 + 98);
  *(_BYTE *)(a1 + 99) = *(_BYTE *)(a2 + 99);
  return a1;
}

uint64_t assignWithTake for GraphicsImage(uint64_t a1, uint64_t a2)
{
  int v4;
  int v5;
  void *v6;
  __int128 v7;

  v4 = *(unsigned __int8 *)(a1 + 8);
  if (v4 == 255)
    goto LABEL_5;
  v5 = *(unsigned __int8 *)(a2 + 8);
  if (v5 == 255)
  {
    outlined destroy of GraphicsImage.Contents(a1);
LABEL_5:
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
    goto LABEL_6;
  }
  v6 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = v5;
  outlined consume of GraphicsImage.Contents(v6, v4);
LABEL_6:
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_OWORD *)(a1 + 44) = *(_OWORD *)(a2 + 44);
  *(_BYTE *)(a1 + 60) = *(_BYTE *)(a2 + 60);
  v7 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v7;
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  *(_BYTE *)(a1 + 97) = *(_BYTE *)(a2 + 97);
  *(_WORD *)(a1 + 98) = *(_WORD *)(a2 + 98);
  return a1;
}

uint64_t getEnumTagSinglePayload for GraphicsImage(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 100))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 97);
  v4 = v3 >= 2;
  v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for GraphicsImage(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_QWORD *)(result + 88) = 0;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_DWORD *)(result + 96) = 0;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 100) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 100) = 0;
    if (a2)
      *(_BYTE *)(result + 97) = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for GraphicsImage()
{
  return &type metadata for GraphicsImage;
}

uint64_t initializeBufferWithCopyOfBuffer for GraphicsImage.Contents(uint64_t a1, uint64_t a2)
{
  id v3;
  char v4;

  v3 = *(id *)a2;
  v4 = *(_BYTE *)(a2 + 8);
  outlined copy of GraphicsImage.Contents(*(id *)a2, v4);
  *(_QWORD *)a1 = v3;
  *(_BYTE *)(a1 + 8) = v4;
  return a1;
}

void destroy for GraphicsImage.Contents(uint64_t a1)
{
  outlined consume of GraphicsImage.Contents(*(void **)a1, *(_BYTE *)(a1 + 8));
}

uint64_t assignWithCopy for GraphicsImage.Contents(uint64_t a1, uint64_t a2)
{
  id v3;
  char v4;
  void *v5;
  char v6;

  v3 = *(id *)a2;
  v4 = *(_BYTE *)(a2 + 8);
  outlined copy of GraphicsImage.Contents(*(id *)a2, v4);
  v5 = *(void **)a1;
  *(_QWORD *)a1 = v3;
  v6 = *(_BYTE *)(a1 + 8);
  *(_BYTE *)(a1 + 8) = v4;
  outlined consume of GraphicsImage.Contents(v5, v6);
  return a1;
}

uint64_t assignWithTake for GraphicsImage.Contents(uint64_t a1, uint64_t a2)
{
  char v3;
  void *v4;
  char v5;

  v3 = *(_BYTE *)(a2 + 8);
  v4 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v5 = *(_BYTE *)(a1 + 8);
  *(_BYTE *)(a1 + 8) = v3;
  outlined consume of GraphicsImage.Contents(v4, v5);
  return a1;
}

uint64_t getEnumTagSinglePayload for GraphicsImage.Contents(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFB && *(_BYTE *)(a1 + 9))
    return (*(_DWORD *)a1 + 251);
  v3 = *(unsigned __int8 *)(a1 + 8);
  if (v3 <= 5)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for GraphicsImage.Contents(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFA)
  {
    *(_BYTE *)(result + 8) = 0;
    *(_QWORD *)result = a2 - 251;
    if (a3 >= 0xFB)
      *(_BYTE *)(result + 9) = 1;
  }
  else
  {
    if (a3 >= 0xFB)
      *(_BYTE *)(result + 9) = 0;
    if (a2)
      *(_BYTE *)(result + 8) = -(char)a2;
  }
  return result;
}

uint64_t destructiveInjectEnumTag for GraphicsImage.Contents(uint64_t result, char a2)
{
  *(_BYTE *)(result + 8) = a2;
  return result;
}

ValueMetadata *type metadata accessor for GraphicsImage.Contents()
{
  return &type metadata for GraphicsImage.Contents;
}

void destroy for ResolvedVectorGlyph(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 16);
  if ((unint64_t)v2 >= 2)

}

uint64_t initializeWithCopy for ResolvedVectorGlyph(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;
  id v7;

  v4 = *(void **)a2;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v5 = *(void **)(a2 + 16);
  v6 = v4;
  if ((unint64_t)v5 >= 2)
    v7 = v5;
  *(_QWORD *)(a1 + 16) = v5;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_WORD *)(a1 + 28) = *(_WORD *)(a2 + 28);
  return a1;
}

uint64_t assignWithCopy for ResolvedVectorGlyph(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;
  void *v7;
  void *v8;
  id v9;
  id v10;

  v4 = *(void **)a2;
  v5 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = v4;

  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v7 = *(void **)(a1 + 16);
  v8 = *(void **)(a2 + 16);
  if ((unint64_t)v7 >= 2)
  {
    if ((unint64_t)v8 >= 2)
    {
      *(_QWORD *)(a1 + 16) = v8;
      v10 = v8;

      goto LABEL_8;
    }

    v8 = *(void **)(a2 + 16);
    goto LABEL_6;
  }
  if ((unint64_t)v8 < 2)
  {
LABEL_6:
    *(_QWORD *)(a1 + 16) = v8;
    goto LABEL_8;
  }
  *(_QWORD *)(a1 + 16) = v8;
  v9 = v8;
LABEL_8:
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 28) = *(_BYTE *)(a2 + 28);
  *(_BYTE *)(a1 + 29) = *(_BYTE *)(a2 + 29);
  return a1;
}

__n128 __swift_memcpy30_8(uint64_t a1, uint64_t a2)
{
  __n128 result;

  result = *(__n128 *)a2;
  *(_OWORD *)(a1 + 14) = *(_OWORD *)(a2 + 14);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for ResolvedVectorGlyph(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  unint64_t v6;

  v4 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;

  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v5 = *(void **)(a1 + 16);
  v6 = *(_QWORD *)(a2 + 16);
  if ((unint64_t)v5 >= 2)
  {
    if (v6 >= 2)
    {
      *(_QWORD *)(a1 + 16) = v6;

      goto LABEL_6;
    }

  }
  *(_QWORD *)(a1 + 16) = v6;
LABEL_6:
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 28) = *(_BYTE *)(a2 + 28);
  *(_BYTE *)(a1 + 29) = *(_BYTE *)(a2 + 29);
  return a1;
}

uint64_t getEnumTagSinglePayload for ResolvedVectorGlyph(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 30))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ResolvedVectorGlyph(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_WORD *)(result + 28) = 0;
    *(_DWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 30) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 30) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for ResolvedVectorGlyph()
{
  return &type metadata for ResolvedVectorGlyph;
}

uint64_t static GraphicsContext.ClipOptions.inverse.getter()
{
  return 1;
}

_QWORD *GraphicsContext.draw(_:with:style:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  char v12;
  int v13;
  float *v14;
  float v15;
  float v16;
  float v17;
  float v18;
  void *v19;
  id v20;
  _QWORD *result;
  uint64_t v22;
  char v23;
  int v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  unsigned __int8 v32;
  void *v33;
  id v34;
  double v35;
  id v36;
  uint64_t v37;
  double v38;
  id v39;
  __int128 v40;
  double v41;
  double v42;
  double v43;
  char v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  char v50;
  int v51;
  uint64_t v52;
  char v53;
  uint64_t v54;
  double v55[20];
  _OWORD v56[2];
  char v57;
  _QWORD v58[20];
  _BYTE v59[168];

  outlined init with take of GraphicsContext.ResolvedShading(a2, (uint64_t)v58);
  v7 = *(double *)a3;
  v8 = *(double *)(a3 + 8);
  v10 = *(double *)(a3 + 16);
  v9 = *(double *)(a3 + 24);
  v11 = *(double *)(a3 + 32);
  v12 = *(_BYTE *)(a3 + 40);
  outlined init with take of GraphicsContext.ResolvedShading((uint64_t)v58, (uint64_t)v59);
  v13 = _s7SwiftUI15GraphicsContextV15ResolvedShadingOWOg((uint64_t)v59);
  if (v13 == 8)
  {
    result = (_QWORD *)_s7SwiftUI15GraphicsContextV15ResolvedShadingOWOj0_((uint64_t)v59);
    if (*(_QWORD *)(*result + 16))
    {
      outlined init with take of GraphicsContext.ResolvedShading(*result + 32, (uint64_t)v55);
      outlined init with take of GraphicsContext.ResolvedShading((uint64_t)v55, (uint64_t)&v45);
      *(double *)&v40 = v7;
      *((double *)&v40 + 1) = v8;
      v41 = v10;
      v42 = v9;
      v43 = v11;
      v44 = v12;
      outlined retain of GraphicsContext.ResolvedShading(v55, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of GraphicsContext.ResolvedShading);
      GraphicsContext.draw(_:with:style:)(a1, &v45, &v40, a4);
      return outlined retain of GraphicsContext.ResolvedShading(v55, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of GraphicsContext.ResolvedShading);
    }
    else
    {
      __break(1u);
    }
  }
  else if (v13 == 4)
  {
    v22 = _s7SwiftUI15GraphicsContextV15ResolvedShadingOWOj0_((uint64_t)v59);
    v23 = *(_BYTE *)(v22 + 80);
    v24 = *(_DWORD *)(v22 + 84);
    v25 = *(_QWORD *)(v22 + 88);
    v26 = *(_BYTE *)(v22 + 96);
    v27 = *(_QWORD *)(v22 + 104);
    v28 = *(_OWORD *)(v22 + 16);
    v45 = *(_OWORD *)v22;
    v46 = v28;
    v29 = *(_OWORD *)(v22 + 48);
    v47 = *(_OWORD *)(v22 + 32);
    v48 = v29;
    v49 = *(_OWORD *)(v22 + 64);
    v50 = v23;
    v51 = v24;
    v52 = v25;
    v53 = v26;
    v54 = v27;
    *(double *)&v40 = v7;
    *((double *)&v40 + 1) = v8;
    v41 = v10;
    v42 = v9;
    v43 = v11;
    v44 = v12;
    memset(v56, 0, sizeof(v56));
    v57 = 1;
    outlined init with take of GraphicsContext.ResolvedShading((uint64_t)v58, (uint64_t)v55);
    v30 = _s7SwiftUI15GraphicsContextV15ResolvedShadingOWOj0_((uint64_t)v55);
    v31 = *(_QWORD *)(v30 + 88);
    v32 = *(_BYTE *)(v30 + 96);
    outlined copy of _ShapeStyle_Pack.Fill(*(id *)v30, *(_QWORD *)(v30 + 8), *(void **)(v30 + 16), *(void **)(v30 + 24), *(_QWORD *)(v30 + 32), *(_QWORD *)(v30 + 40), *(_QWORD *)(v30 + 48), *(_QWORD *)(v30 + 56), *(_QWORD *)(v30 + 64), *(_QWORD *)(v30 + 72), *(_BYTE *)(v30 + 80));
    outlined copy of GraphicsBlendMode?(v31, v32);
    swift_bridgeObjectRetain();
    _ShapeStyle_Pack.Style.draw(_:style:in:bounds:)(a1, &v40, a4, (uint64_t)v56);
    return outlined retain of GraphicsContext.ResolvedShading(v58, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of GraphicsContext.ResolvedShading);
  }
  else if (v13)
  {
    v33 = *(void **)(*(_QWORD *)(a4 + 16) + 32);
    if ((v12 & 1) != 0)
    {
      *(double *)&v45 = v7;
      *((double *)&v45 + 1) = v8;
      *(double *)&v46 = v10;
      *((double *)&v46 + 1) = v9;
      *(double *)&v47 = v11;
      v34 = v33;
      RBShape.setStrokedPath(_:style:)(a1, (double *)&v45);
    }
    else
    {
      v38 = *(double *)(a4 + 40);
      v39 = v33;
      RBShape.setPath(_:style:shapeDistance:)(a1, LOBYTE(v7) & 1, v38);
    }

    outlined init with take of GraphicsContext.ResolvedShading((uint64_t)v58, (uint64_t)v55);
    GraphicsContext.Storage.Shared.setShading(_:)((uint64_t)v55);
    return (_QWORD *)RBDrawingStateDrawShape();
  }
  else
  {
    v14 = (float *)_s7SwiftUI15GraphicsContextV15ResolvedShadingOWOj0_((uint64_t)v59);
    v15 = *v14;
    v16 = v14[1];
    v17 = v14[2];
    v18 = v14[3];
    v19 = *(void **)(*(_QWORD *)(a4 + 16) + 32);
    if ((v12 & 1) != 0)
    {
      v55[0] = v7;
      v55[1] = v8;
      v55[2] = v10;
      v55[3] = v9;
      v55[4] = v11;
      v20 = v19;
      RBShape.setStrokedPath(_:style:)(a1, v55);
    }
    else
    {
      v35 = *(double *)(a4 + 40);
      v36 = v19;
      RBShape.setPath(_:style:shapeDistance:)(a1, LOBYTE(v7) & 1, v35);
    }

    v37 = RBDrawingStateInit();
    RBDrawingStateClipShape();
    GraphicsContext.beginLayerWithBackdrop(color:in:)(v15, v16, v17, v18, v37, a4);
    RBDrawingStateDrawLayer();
    return (_QWORD *)RBDrawingStateDestroy();
  }
  return result;
}

uint64_t GraphicsContext.identifier.getter()
{
  return RBDrawingStateGetIdentifier();
}

uint64_t GraphicsContext.identifier.setter()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;

  v1 = v0;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    v2 = RBDrawingStateInit();
    type metadata accessor for GraphicsContext.Storage();
    swift_allocObject();
    v3 = swift_retain();
    *v1 = GraphicsContext.Storage.init(_:state:ownsState:resetBlending:)(v3, v2, 1, 0);
    swift_release();
  }
  return RBDrawingStateSetIdentifier();
}

void GraphicsContext.addFilter(_:in:)(uint64_t a1)
{
  __asm { BR              X10 }
}

void sub_234DC8654()
{
  uint64_t *v0;
  double v1;
  uint64_t v2;
  uint64_t v3;

  if (v1 > 0.0)
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      v2 = RBDrawingStateInit();
      type metadata accessor for GraphicsContext.Storage();
      swift_allocObject();
      v3 = swift_retain();
      *v0 = GraphicsContext.Storage.init(_:state:ownsState:resetBlending:)(v3, v2, 1, 0);
      swift_release();
    }
    RBDrawingStateAddBlurFilter();
  }
}

void *GraphicsContext.fill(_:with:style:)(uint64_t a1, uint64_t a2, __int16 a3, uint64_t a4)
{
  uint64_t v4;
  char v5;
  __int128 v6;
  __int128 v7;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  char v12;
  _OWORD v13[4];
  uint64_t v14;
  char v15;

  v4 = *(_QWORD *)(a2 + 64);
  v5 = *(_BYTE *)(a2 + 72);
  v6 = *(_OWORD *)(a2 + 16);
  v13[0] = *(_OWORD *)a2;
  v13[1] = v6;
  v7 = *(_OWORD *)(a2 + 48);
  v13[2] = *(_OWORD *)(a2 + 32);
  v13[3] = v7;
  v14 = v4;
  v15 = v5;
  v9 = a3 & 0x101;
  v10 = 0u;
  v11 = 0u;
  v12 = 0;
  return GraphicsContext.draw(_:with:style:)(a1, (unint64_t *)v13, &v9, a4);
}

_QWORD *GraphicsContext.fill(_:with:style:)(uint64_t a1, uint64_t a2, __int16 a3, uint64_t a4)
{
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  char v11;
  _BYTE v12[160];
  _BYTE v13[160];

  outlined init with take of GraphicsContext.ResolvedShading(a2, (uint64_t)v13);
  outlined init with take of GraphicsContext.ResolvedShading((uint64_t)v13, (uint64_t)v12);
  v8 = a3 & 0x101;
  v9 = 0u;
  v10 = 0u;
  v11 = 0;
  return GraphicsContext.draw(_:with:style:)(a1, (uint64_t)v12, (uint64_t)&v8, a4);
}

void GraphicsContext.draw(_:in:style:shading:)(uint64_t a1, int a2, uint64_t a3, uint64_t a4, CGFloat a5, CGFloat a6, double a7, double a8)
{
  void *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  float64x2_t v19;
  float64x2_t v20;
  int v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  int v30;
  uint64_t v31;
  int v32;
  void *v33;
  uint64_t v34;
  BOOL v35;
  uint64_t v36;
  float v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  double v47;
  double v48;
  double v49;
  uint64_t v50;
  float v51;
  uint64_t v52;
  uint64_t v53;
  unsigned int v54;
  unsigned int v55;
  unsigned int v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  double v68;
  id v69;
  uint64_t v70;
  uint64_t v71;
  int v72;
  uint64_t v73;
  id v74;
  id v75;
  __n128 v76;
  __n128 v77;
  __n128 v78;
  __n128 v79;
  uint64_t v80;
  uint64_t v81;
  unsigned __int8 v82;
  char v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  float v90;
  uint64_t v91;
  uint64_t v92;
  int v93;
  void *v94;
  _QWORD v95[4];
  int v96;
  CGFloat v97;
  CGFloat v98;
  double v99;
  uint64_t v100;
  uint64_t v101;
  unsigned int v102;
  double v103;
  int v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  float v108;
  int v109;
  int v110;
  uint64_t v111;
  int v112;
  float64x2_t v113;
  float64x2_t v114;
  void *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  int v119;
  int v120;
  int v121;
  int v122;
  void *v123;
  uint64_t v124;
  float (*v125)(__int128 *);
  __int128 v126;
  uint64_t v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  float64x2_t v132;
  float64x2_t v133;
  int v134;
  __int128 v135;
  __int128 v136;
  _BYTE v137[32];
  float64x2_t v138;
  float64x2_t v139;
  int v140;

  v127 = a4;
  v112 = a2;
  v12 = *(void **)a1;
  v13 = *(unsigned __int8 *)(a1 + 8);
  v14 = *(_QWORD *)(a1 + 16);
  v15 = *(_QWORD *)(a1 + 24);
  v16 = *(_QWORD *)(a1 + 32);
  v122 = *(unsigned __int8 *)(a1 + 40);
  v17 = *(_QWORD *)(a1 + 44);
  v18 = *(_QWORD *)(a1 + 52);
  LODWORD(v125) = *(unsigned __int8 *)(a1 + 60);
  v20 = *(float64x2_t *)(a1 + 64);
  v19 = *(float64x2_t *)(a1 + 80);
  v21 = *(unsigned __int8 *)(a1 + 96);
  v121 = *(unsigned __int8 *)(a1 + 97);
  v120 = *(unsigned __int8 *)(a1 + 98);
  v119 = *(unsigned __int8 *)(a1 + 99);
  v22 = *(void **)a3;
  v23 = *(_QWORD *)(a3 + 8);
  v25 = *(_QWORD *)(a3 + 16);
  v24 = *(_QWORD *)(a3 + 24);
  v27 = *(_QWORD *)(a3 + 32);
  v26 = *(_QWORD *)(a3 + 40);
  *(_QWORD *)&v126 = *(_QWORD *)(a3 + 48);
  v28 = *(_QWORD *)(a3 + 64);
  *((_QWORD *)&v126 + 1) = *(_QWORD *)(a3 + 56);
  v29 = *(unsigned __int8 *)(a3 + 72);
  v123 = v22;
  v118 = v23;
  v117 = v25;
  v116 = v24;
  v114 = v19;
  v113 = v20;
  if ((v13 & 0xFE) != 2)
    goto LABEL_8;
  if (v21 != 2)
  {
    if (one-time initialization token for resizable != -1)
    {
      v93 = v21;
      LODWORD(v111) = v13;
      v94 = v12;
      v106 = v26;
      v107 = v27;
      v105 = v28;
      swift_once();
      v28 = v105;
      v26 = v106;
      v12 = v94;
      v13 = v111;
      v20 = v113;
      v21 = v93;
      v19 = v114;
    }
    if ((vminv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(vmovn_s32(vuzp1q_s32((int32x4_t)vceqq_f64((float64x2_t)static Image.ResizingInfo.resizable, v20), (int32x4_t)vceqq_f64((float64x2_t)xmmword_2561A7438, v19))), 0xFuLL))) & 1) == 0|| ((((v21 & 1) == 0) ^ byte_2561A7448) & 1) == 0)
    {
      goto LABEL_8;
    }
  }
  *(_QWORD *)&v135 = v12;
  BYTE8(v135) = v13;
  *(_QWORD *)&v136 = v14;
  *((_QWORD *)&v136 + 1) = v15;
  *(_QWORD *)v137 = v16;
  v137[8] = v122;
  *(_QWORD *)&v137[12] = v17;
  *(_QWORD *)&v137[20] = v18;
  v137[28] = (_BYTE)v125;
  v138 = v20;
  v139 = v19;
  LOBYTE(v140) = v21;
  BYTE1(v140) = v121;
  BYTE2(v140) = v120;
  HIBYTE(v140) = v119;
  *(_QWORD *)&v128 = v22;
  *((_QWORD *)&v128 + 1) = v23;
  *(_QWORD *)&v129 = v25;
  *((_QWORD *)&v129 + 1) = v24;
  *(_QWORD *)&v130 = v27;
  *((_QWORD *)&v130 + 1) = v26;
  v131 = v126;
  *(_QWORD *)&v132.f64[0] = v28;
  LOBYTE(v132.f64[1]) = v29;
  v30 = v21;
  v31 = v17;
  v32 = v13;
  v33 = v12;
  v34 = v26;
  v23 = v28;
  v35 = specialized GraphicsContext.drawAsVector(image:rect:style:shading:)((uint64_t)&v135, (uint64_t)&v128, v127, a5, a6, a7, a8);
  v28 = v23;
  v26 = v34;
  v12 = v33;
  v13 = v32;
  v17 = v31;
  v22 = v123;
  LOBYTE(v23) = v118;
  v25 = v117;
  v24 = v116;
  v21 = v30;
  if (!v35)
  {
LABEL_8:
    v36 = *(_QWORD *)(v127 + 24);
    v37 = *(float *)(v127 + 32);
    v38 = *(_DWORD *)(v127 + 36);
    v115 = v12;
    v107 = v27;
    v106 = v26;
    v105 = v28;
    v104 = v29;
    v110 = v21;
    if (v29 == 255)
    {
      v108 = v37;
      v109 = v38;
      v46 = v12;
      outlined copy of GraphicsImage.Contents?(v12, v13);
      v124 = v36;
      v61 = v36;
      v60 = v17;
    }
    else
    {
      v39 = v28;
      v111 = v36;
      if (v29 == 1)
      {
        v108 = v37;
        v109 = v38;
        v40 = *(_QWORD *)(v127 + 16);
        v41 = *(_QWORD *)(v40 + 56);
        v101 = *(_QWORD *)(v40 + 48);
        v42 = v22;
        v43 = v25;
        v44 = v27;
        v45 = v26;
        *(_QWORD *)&v135 = v101;
        *((_QWORD *)&v135 + 1) = v41;
        v125 = *(float (**)(__int128 *))(*(_QWORD *)v42 + 104);
        v46 = v12;
        outlined copy of GraphicsImage.Contents?(v12, v13);
        outlined copy of GraphicsContext.Shading?(v42, v23, v43, v24, v44, v45, v126, *((uint64_t *)&v126 + 1), v39, 1u);
        swift_retain();
        swift_retain();
        v103 = a5;
        v47 = a6;
        v48 = a7;
        v49 = a8;
        v50 = v14;
        v51 = v125(&v135);
        v52 = v16;
        v53 = v15;
        v55 = v54;
        v102 = v56;
        LODWORD(v124) = v57;
        outlined consume of GraphicsContext.Shading?(v42, v118, v43, v24, v44, v45, v126, *((uint64_t *)&v126 + 1), v39, 1u);
        swift_release();
        swift_release();
        LODWORD(v125) = 0;
        v58 = LODWORD(v51);
        v14 = v50;
        a8 = v49;
        a7 = v48;
        a6 = v47;
        a5 = v103;
        v59 = v55;
        v15 = v53;
        v16 = v52;
        v60 = v58 | (v59 << 32);
        v18 = v102 | ((unint64_t)v124 << 32);
        v61 = v111;
        v124 = v111;
      }
      else
      {
        v62 = v26;
        outlined copy of GraphicsImage.Contents?(v12, v13);
        v63 = v39;
        v100 = v39;
        v64 = v24;
        v65 = v24;
        v66 = v63;
        outlined copy of GraphicsContext.Shading?(v22, v23, v25, v64, v27, v62, v126, *((uint64_t *)&v126 + 1), v100, v29);
        v124 = RBDrawingStateInit();
        v100 = v66;
        v61 = RBDrawingStateBeginLayer();
        outlined consume of GraphicsContext.Shading?(v22, v23, v25, v65, v27, v62, v126, *((uint64_t *)&v126 + 1), v100, v29);
        v109 = 0;
        v60 = 0;
        v18 = 0;
        LODWORD(v125) = 1;
        v108 = 1.0;
        v46 = v115;
      }
    }
    v67 = *(_QWORD *)(v127 + 16);
    v68 = *(double *)(v127 + 40);
    v69 = *(id *)(v67 + 32);
    objc_msgSend(v69, sel_setRect_, a5, a6, a7, a8);
    RBShape.setRenderingMode(style:shapeDistance:)(v68);

    v137[8] = v122;
    *(_QWORD *)&v135 = v46;
    LODWORD(v111) = v13;
    BYTE8(v135) = v13;
    *(_QWORD *)&v136 = v14;
    *((_QWORD *)&v136 + 1) = v15;
    *(_QWORD *)v137 = v16;
    *(_QWORD *)&v137[12] = v60;
    *(_QWORD *)&v137[20] = v18;
    v137[28] = (_BYTE)v125;
    v138 = v113;
    v139 = v114;
    LOBYTE(v140) = v110;
    BYTE1(v140) = v121;
    BYTE2(v140) = v120;
    HIBYTE(v140) = v119;
    v132 = v113;
    v133 = v114;
    v134 = v140;
    v128 = v135;
    v129 = v136;
    v131 = *(_OWORD *)&v137[16];
    v130 = *(_OWORD *)v137;
    MEMORY[0x24BDAC7A8](v70);
    v95[2] = v71;
    v95[3] = &v135;
    v96 = v72;
    v97 = a5;
    v98 = a6;
    v99 = a7;
    v100 = *(_QWORD *)&a8;
    MEMORY[0x24BDAC7A8](v73);
    v75 = v74;
    GraphicsImage.withRBImage(image:color:)((void (*)(uint64_t))partial apply for closure #1 in RBFill.setImage(_:destRect:in:), v76, v77, v78, v79, (uint64_t)v95, (void (*)(__n128, __n128, __n128, __n128))closure #2 in RBFill.setImage(_:destRect:in:)partial apply);

    *(_QWORD *)(v67 + 264) = 0;
    swift_release();
    RBDrawingStateDrawShape();
    if (v61 != v124)
    {
      v80 = v127;
      v81 = *((_QWORD *)&v126 + 1);
      RBDrawingStateClipLayer();
      v82 = v104;
      if (v104 == 255)
      {
        __break(1u);
        return;
      }
      *(_QWORD *)&v128 = v123;
      v83 = v118;
      *((_QWORD *)&v128 + 1) = v118;
      v84 = v117;
      *(_QWORD *)&v129 = v117;
      v85 = v116;
      *((_QWORD *)&v129 + 1) = v116;
      v86 = v107;
      *(_QWORD *)&v130 = v107;
      v87 = v106;
      *((_QWORD *)&v130 + 1) = v106;
      v88 = v126;
      *(_QWORD *)&v131 = v126;
      *((_QWORD *)&v131 + 1) = v81;
      v89 = v105;
      *(_QWORD *)&v132.f64[0] = v105;
      LOBYTE(v132.f64[1]) = v104;
      v90 = *(float *)(v80 + 32);
      LODWORD(v125) = *(_DWORD *)(v80 + 36);
      outlined copy of GraphicsContext.Shading.Storage(v123, v118, v117, v116, v107, v106, v126, v81, v105, v104);
      GraphicsContext.draw(shading:bounds:in:alpha:blendMode:)((uint64_t)&v128, v124, v125, v80, v91, v92, a5, a6, a7, a8, v90);
      outlined consume of GraphicsContext.Shading?(v123, v83, v84, v85, v86, v87, v88, *((uint64_t *)&v126 + 1), v89, v82);
      RBDrawingStateDestroy();
    }
    outlined consume of GraphicsImage.Contents?(v115, v111);
  }
}

void GraphicsContext.translateBy(x:y:)(double a1, double a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;

  v3 = v2;
  if (a1 != 0.0 || a2 != 0.0)
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      v4 = RBDrawingStateInit();
      type metadata accessor for GraphicsContext.Storage();
      swift_allocObject();
      v5 = swift_retain();
      *v3 = GraphicsContext.Storage.init(_:state:ownsState:resetBlending:)(v5, v4, 1, 0);
      swift_release();
    }
    RBDrawingStateTranslateCTM();
  }
}

uint64_t GraphicsContext.blendMode.getter(uint64_t a1)
{
  return *(unsigned int *)(a1 + 36);
}

uint64_t static GraphicsContext.ShadowOptions.shadowOnly.getter()
{
  return 2;
}

void GraphicsContext.addFilter(_:options:)(uint64_t a1)
{
  __asm { BR              X10 }
}

uint64_t sub_234DCA5E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  *(_QWORD *)(v14 - 288) = v13;
  *(_QWORD *)(v14 - 280) = v12;
  *(_QWORD *)(v14 - 272) = v11;
  *(_QWORD *)(v14 - 264) = v5;
  *(_QWORD *)(v14 - 256) = a5;
  *(_QWORD *)(v14 - 248) = v9;
  *(_QWORD *)(v14 - 240) = v6;
  *(_QWORD *)(v14 - 232) = v10;
  *(_QWORD *)(v14 - 224) = v7;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    v15 = RBDrawingStateInit();
    type metadata accessor for GraphicsContext.Storage();
    swift_allocObject();
    v16 = swift_retain();
    *v8 = GraphicsContext.Storage.init(_:state:ownsState:resetBlending:)(v16, v15, 1, 0);
    swift_release();
  }
  return RBDrawingState.addProjectionTransform(_:)();
}

double GraphicsContext.userToDeviceScale.getter()
{
  double v0;
  double v1;
  BOOL v2;
  double v3;
  double v4;
  id v5;
  double v6;
  double v7;
  double v9;
  double v10;
  double v11;
  double v12;

  RBDrawingStateGetCTM();
  v0 = v9 * v9 + v10 * v10;
  v1 = v11 * v11 + v12 * v12;
  v2 = v1 == 1.0 && v0 == 1.0;
  v3 = (sqrt(v0) + sqrt(v1)) * 0.5;
  if (v2)
    v4 = 1.0;
  else
    v4 = v3;
  v5 = (id)RBDrawingStateGetDisplayList();
  objc_msgSend(v5, sel_deviceScale);
  v7 = v6;

  return v7 * v4;
}

uint64_t GraphicsContext.draw(contentsOf:)()
{
  return RBDrawingStateDrawDisplayList();
}

uint64_t GraphicsContext.drawLayer(content:)(void (*a1)(uint64_t *))
{
  return GraphicsContext.drawLayer(flags:content:)(0, a1);
}

uint64_t GraphicsContext.draw(displayList:)()
{
  return RBDrawingStateDrawDisplayList2();
}

void GraphicsContext.setTransition(_:)(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  Class isa;
  id v10;

  v2 = v1;
  v3 = *(_QWORD *)a1;
  v4 = *(unsigned int *)(a1 + 8) | ((unint64_t)(*(unsigned __int16 *)(a1 + 12) | (*(unsigned __int8 *)(a1 + 14) << 16)) << 32);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    v5 = RBDrawingStateInit();
    type metadata accessor for GraphicsContext.Storage();
    swift_allocObject();
    v6 = swift_retain();
    *v2 = GraphicsContext.Storage.init(_:state:ownsState:resetBlending:)(v6, v5, 1, 0);
    swift_release();
  }
  if (BYTE6(v4) == 2)
  {
    v10 = objc_msgSend((id)objc_opt_self(), sel_defaultTransition);
    RBDrawingStateSetTransition();
  }
  else
  {
    v10 = ContentTransition.rbTransition.getter();
    RBDrawingStateSetTransition();
    if ((v4 & 0xFF0000000000) == 0 && (v3 & 0xC000000000) == 0x4000000000 && (v3 & 0x100000000) != 0)
    {
      outlined copy of ContentTransition.Storage(v3, v4, 0);
      isa = Float._bridgeToObjectiveC()().super.super.isa;
      RBDrawingStateSetAttribute();

    }
  }

}

uint64_t GraphicsContext.drawLayer(flags:content:)(char a1, void (*a2)(uint64_t *))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v4 = RBDrawingStateBeginLayer();
  type metadata accessor for GraphicsContext.Storage();
  swift_allocObject();
  v5 = swift_retain();
  v7 = GraphicsContext.Storage.init(_:state:ownsState:resetBlending:)(v5, v4, 0, (a1 & 0x20) == 0);
  swift_retain();
  a2(&v7);
  swift_release();
  RBDrawingStateDrawLayer();
  return swift_release();
}

double GraphicsContext.opacity.getter(uint64_t a1)
{
  return *(float *)(a1 + 32);
}

uint64_t GraphicsContext.opacity.setter(double a1)
{
  uint64_t *v1;
  float v2;
  uint64_t result;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  v2 = a1;
  result = *v1;
  if (*(float *)(*v1 + 32) != v2)
  {
    v4 = v1;
    result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      v5 = RBDrawingStateInit();
      type metadata accessor for GraphicsContext.Storage();
      swift_allocObject();
      v6 = swift_retain();
      *v4 = GraphicsContext.Storage.init(_:state:ownsState:resetBlending:)(v6, v5, 1, 0);
      result = swift_release();
    }
    *(float *)(*v4 + 32) = v2;
  }
  return result;
}

uint64_t GraphicsContext.blendMode.setter(int a1)
{
  uint64_t *v1;
  uint64_t result;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  result = *v1;
  if (*(_DWORD *)(*v1 + 36) != a1)
  {
    v4 = v1;
    result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      v5 = RBDrawingStateInit();
      type metadata accessor for GraphicsContext.Storage();
      swift_allocObject();
      v6 = swift_retain();
      *v4 = GraphicsContext.Storage.init(_:state:ownsState:resetBlending:)(v6, v5, 1, 0);
      result = swift_release();
    }
    *(_DWORD *)(*v4 + 36) = a1;
  }
  return result;
}

uint64_t GraphicsContext.clip(to:style:options:)(uint64_t a1, __int16 a2)
{
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  char v6;

  v3 = a2 & 0x101;
  v4 = 0u;
  v5 = 0u;
  v6 = 0;
  return GraphicsContext.clip(to:style:options:)(a1, (uint64_t)&v3);
}

uint64_t GraphicsContext.clipToLayer(opacity:options:content:)(uint64_t a1, void (*a2)(uint64_t *))
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v3 = v2;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    v5 = RBDrawingStateInit();
    type metadata accessor for GraphicsContext.Storage();
    swift_allocObject();
    v6 = swift_retain();
    *v3 = GraphicsContext.Storage.init(_:state:ownsState:resetBlending:)(v6, v5, 1, 0);
    swift_release();
  }
  v7 = RBDrawingStateBeginLayer();
  type metadata accessor for GraphicsContext.Storage();
  swift_allocObject();
  v8 = swift_retain();
  v10 = GraphicsContext.Storage.init(_:state:ownsState:resetBlending:)(v8, v7, 0, 1);
  swift_retain();
  a2(&v10);
  swift_release();
  RBDrawingStateClipLayer();
  return swift_release();
}

Swift::Void __swiftcall GraphicsContext.concatenate(_:)(CGAffineTransform *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  CGFloat a;
  CGFloat b;
  CGFloat c;
  CGFloat d;
  CGFloat tx;
  CGFloat ty;
  uint64_t v9;
  uint64_t v10;
  CGAffineTransform v11;

  v2 = v1;
  a = a1->a;
  b = a1->b;
  c = a1->c;
  d = a1->d;
  tx = a1->tx;
  ty = a1->ty;
  v11.a = a1->a;
  v11.b = b;
  v11.c = c;
  v11.d = d;
  v11.tx = tx;
  v11.ty = ty;
  if (!CGAffineTransformIsIdentity(&v11))
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      v9 = RBDrawingStateInit();
      type metadata accessor for GraphicsContext.Storage();
      swift_allocObject();
      v10 = swift_retain();
      *v2 = GraphicsContext.Storage.init(_:state:ownsState:resetBlending:)(v10, v9, 1, 0);
      swift_release();
    }
    v11.a = a;
    v11.b = b;
    v11.c = c;
    v11.d = d;
    v11.tx = tx;
    v11.ty = ty;
    RBDrawingStateConcatCTM();
  }
}

__n128 static GraphicsContext.Filter.projectionTransform(_:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  __int128 v3;
  __n128 result;
  __int128 v5;

  v2 = *(_QWORD *)(a1 + 64);
  v3 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)a2 = *(_OWORD *)a1;
  *(_OWORD *)(a2 + 16) = v3;
  result = *(__n128 *)(a1 + 32);
  v5 = *(_OWORD *)(a1 + 48);
  *(__n128 *)(a2 + 32) = result;
  *(_OWORD *)(a2 + 48) = v5;
  *(_QWORD *)(a2 + 72) = 0;
  *(_QWORD *)(a2 + 80) = 0;
  *(_QWORD *)(a2 + 64) = v2;
  return result;
}

uint64_t GraphicsContext.clipBoundingRect.getter()
{
  return RBDrawingStateGetClipBoundingBox();
}

double static GraphicsContext.Shading.backdrop.getter@<D0>(_OWORD *a1@<X8>)
{
  double result;

  result = 0.0;
  *(_OWORD *)((char *)a1 + 57) = 0u;
  a1[2] = 0u;
  a1[3] = 0u;
  *a1 = 0u;
  a1[1] = 0u;
  return result;
}

void GraphicsContext._addAnimation(_:id:)(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  id v12;
  _QWORD v13[5];
  char v14;

  v2 = v1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    v4 = RBDrawingStateInit();
    type metadata accessor for GraphicsContext.Storage();
    swift_allocObject();
    v5 = swift_retain();
    *v2 = GraphicsContext.Storage.init(_:state:ownsState:resetBlending:)(v5, v4, 1, 0);
    swift_release();
  }
  if (a1)
  {
    v12 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BE7EEE8]), sel_init);
    (*(void (**)(_QWORD *__return_ptr))(*(_QWORD *)a1 + 96))(v13);
    v6 = v13[0];
    v7 = v13[1];
    v8 = v13[2];
    v9 = v13[3];
    v10 = v13[4];
    v11 = v14;
    Animation.Function.apply(to:)();
    outlined consume of Animation.Function(v6, v7, v8, v9, v10, v11);
  }
  else
  {
    v12 = 0;
  }
  RBDrawingStateAddAnimationStyle();

}

uint64_t static GraphicsContext.Shading.color(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = a1;
  *(_OWORD *)(a2 + 8) = 0u;
  *(_OWORD *)(a2 + 24) = 0u;
  *(_OWORD *)(a2 + 40) = 0u;
  *(_OWORD *)(a2 + 56) = 0u;
  *(_BYTE *)(a2 + 72) = 1;
  return swift_retain();
}

void *GraphicsContext.stroke(_:with:lineWidth:)(uint64_t a1, uint64_t a2, uint64_t a3, double a4)
{
  uint64_t v4;
  char v5;
  __int128 v6;
  __int128 v7;
  double v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  _OWORD v14[4];
  uint64_t v15;
  char v16;

  v4 = *(_QWORD *)(a2 + 64);
  v5 = *(_BYTE *)(a2 + 72);
  v6 = *(_OWORD *)(a2 + 16);
  v14[0] = *(_OWORD *)a2;
  v14[1] = v6;
  v7 = *(_OWORD *)(a2 + 48);
  v14[2] = *(_OWORD *)(a2 + 32);
  v14[3] = v7;
  v15 = v4;
  v16 = v5;
  v9 = a4;
  v10 = xmmword_2352826E0;
  v11 = MEMORY[0x24BEE4AF8];
  v12 = 0;
  v13 = 1;
  return GraphicsContext.draw(_:with:style:)(a1, (unint64_t *)v14, (uint64_t *)&v9, a3);
}

uint64_t GraphicsContext.init(displayList:environment:)(void *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  uint64_t State;
  uint64_t v9[2];

  v3 = *a2;
  v4 = a2[1];
  type metadata accessor for GraphicsContext.Storage();
  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 32) = 1065353216;
  *(_QWORD *)(v5 + 40) = 0x7FF8000000000000;
  v9[0] = v3;
  v9[1] = v4;
  type metadata accessor for GraphicsContext.Storage.Shared();
  swift_allocObject();
  v6 = a1;
  *(_QWORD *)(v5 + 16) = GraphicsContext.Storage.Shared.init(list:environment:)(v6, v9);
  State = RBDisplayListGetState();

  *(_QWORD *)(v5 + 24) = State;
  *(_BYTE *)(v5 + 48) = 0;
  return v5;
}

uint64_t static GraphicsContext.renderingTo(cgContext:environment:deviceScale:content:)(CGContext *a1, uint64_t *a2, uint64_t a3, char a4, void (*a5)(uint64_t *))
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  float v15;
  int v16;
  id v17;
  double v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  int v29;
  float v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  CGRect ClipBoundingBox;

  v33 = *MEMORY[0x24BDAC8D0];
  v10 = *a2;
  v9 = a2[1];
  v29 = 0;
  v30 = 1.0;
  v11 = MEMORY[0x23B7C8EA8](a1, &v30, &v29);
  if (v11)
  {
    v12 = v11;
    type metadata accessor for GraphicsContext.Storage();
    v13 = swift_allocObject();
    *(_QWORD *)(v13 + 32) = 1065353216;
    *(_QWORD *)(v13 + 40) = 0x7FF8000000000000;
    v14 = (id)RBDrawingStateGetDisplayList();
    v31 = v10;
    v32 = v9;
    type metadata accessor for GraphicsContext.Storage.Shared();
    swift_allocObject();
    swift_retain();
    swift_retain();
    *(_QWORD *)(v13 + 16) = GraphicsContext.Storage.Shared.init(list:environment:)(v14, &v31);
    *(_QWORD *)(v13 + 24) = v12;
    *(_BYTE *)(v13 + 48) = 0;
    v31 = v13;
    v15 = v30;
    if (v30 == 1.0)
    {
      v16 = 0;
    }
    else
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        v19 = RBDrawingStateInit();
        swift_allocObject();
        v20 = swift_retain();
        v21 = GraphicsContext.Storage.init(_:state:ownsState:resetBlending:)(v20, v19, 1, 0);
        v31 = v21;
        swift_release();
        v13 = v21;
      }
      *(float *)(v13 + 32) = v15;
      v16 = *(_DWORD *)(v13 + 36);
    }
    v22 = v29;
    if (v16 != v29)
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        v23 = RBDrawingStateInit();
        swift_allocObject();
        v24 = swift_retain();
        v31 = GraphicsContext.Storage.init(_:state:ownsState:resetBlending:)(v24, v23, 1, 0);
        swift_release();
      }
      *(_DWORD *)(v31 + 36) = v22;
    }
    a5(&v31);
  }
  else
  {
    v17 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BE7EEF8]), sel_init);
    objc_msgSend(v17, sel_setProfile_, 1);
    objc_msgSend(v17, sel_setDefaultColorSpace_, 1);
    ClipBoundingBox = CGContextGetClipBoundingBox(a1);
    objc_msgSend(v17, sel_setContentRect_, ClipBoundingBox.origin.x, ClipBoundingBox.origin.y, ClipBoundingBox.size.width, ClipBoundingBox.size.height);
    if ((a4 & 1) != 0)
    {
      if (v9)
      {
        swift_retain_n();
        swift_retain_n();
        v18 = specialized PropertyList.Tracker.value<A>(_:for:)(v10);
        swift_release_n();
      }
      else
      {
        v25 = swift_retain_n();
        v18 = specialized closure #1 in PropertyList.subscript.getter(v25);
      }
      swift_release_n();
    }
    else
    {
      v18 = *(double *)&a3;
    }
    objc_msgSend(v17, sel_setDeviceScale_, v18);
    type metadata accessor for GraphicsContext.Storage();
    v26 = swift_allocObject();
    *(_QWORD *)(v26 + 32) = 1065353216;
    *(_QWORD *)(v26 + 40) = 0x7FF8000000000000;
    v31 = v10;
    v32 = v9;
    type metadata accessor for GraphicsContext.Storage.Shared();
    swift_allocObject();
    swift_retain();
    v27 = v17;
    swift_retain();
    *(_QWORD *)(v26 + 16) = GraphicsContext.Storage.Shared.init(list:environment:)(v27, &v31);
    *(_QWORD *)(v26 + 24) = RBDisplayListGetState();
    *(_BYTE *)(v26 + 48) = 0;
    v31 = v26;
    a5(&v31);
    objc_msgSend(v27, sel_renderInContext_options_, a1, 0);

  }
  return swift_release();
}

void GraphicsContext.withCGContext(content:)(void (*a1)(CGContext *), uint64_t a2, uint64_t a3)
{
  CGContext *v5;
  CGContext *v6;
  CGBlendMode v7;

  v5 = (CGContext *)(id)RBDrawingStateBeginCGContext();
  v6 = v5;
  v7 = *(_DWORD *)(a3 + 36);
  if (v7)
    CGContextSetBlendMode(v5, v7);
  a1(v6);
  RBDrawingStateEndCGContext();

}

double GraphicsContext.transform.getter@<D0>(_OWORD *a1@<X8>)
{
  double result;
  __int128 v3;
  __int128 v4;
  __int128 v5;

  RBDrawingStateGetCTM();
  result = *(double *)&v3;
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v5;
  return result;
}

uint64_t GraphicsContext.drawingState.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = v0;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    v2 = RBDrawingStateInit();
    type metadata accessor for GraphicsContext.Storage();
    swift_allocObject();
    v3 = swift_retain();
    *(_QWORD *)v1 = GraphicsContext.Storage.init(_:state:ownsState:resetBlending:)(v3, v2, 1, 0);
    swift_release();
  }
  return *(_QWORD *)(*(_QWORD *)v1 + 24);
}

uint64_t static GraphicsContext.BlendMode.normal.getter()
{
  return 0;
}

uint64_t GraphicsContext.clip(to:style:options:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  id v14;
  double v15;
  id v16;
  double v18[5];

  v3 = v2;
  v5 = *(double *)a2;
  v6 = *(double *)(a2 + 8);
  v7 = *(double *)(a2 + 16);
  v8 = *(double *)(a2 + 24);
  v9 = *(double *)(a2 + 32);
  v10 = *(_BYTE *)(a2 + 40);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    v11 = RBDrawingStateInit();
    type metadata accessor for GraphicsContext.Storage();
    swift_allocObject();
    v12 = swift_retain();
    *(_QWORD *)v3 = GraphicsContext.Storage.init(_:state:ownsState:resetBlending:)(v12, v11, 1, 0);
    swift_release();
  }
  v13 = *(void **)(*(_QWORD *)(*(_QWORD *)v3 + 16) + 32);
  if ((v10 & 1) != 0)
  {
    v18[0] = v5;
    v18[1] = v6;
    v18[2] = v7;
    v18[3] = v8;
    v18[4] = v9;
    v14 = v13;
    RBShape.setStrokedPath(_:style:)(a1, v18);
  }
  else
  {
    v15 = *(double *)(*(_QWORD *)v3 + 40);
    v16 = v13;
    RBShape.setPath(_:style:shapeDistance:)(a1, LOBYTE(v5) & 1, v15);
  }

  return RBDrawingStateClipShape();
}

uint64_t specialized ShapeStyle.isMultiLevel(in:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void (*v3)(_QWORD *);
  uint64_t v4;
  int v5;
  _QWORD v7[3];
  char v8;
  uint64_t v9;
  unsigned __int8 v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  char v16;
  __int16 v17;

  memset(v7, 0, sizeof(v7));
  v8 = 5;
  v9 = 0;
  v10 = 5;
  v11 = a1;
  v12 = a2;
  v13 = 0u;
  v14 = 0u;
  v15 = 0;
  v16 = 1;
  v17 = 0;
  v3 = *(void (**)(_QWORD *))(*(_QWORD *)a3 + 80);
  swift_retain();
  swift_retain();
  v3(v7);
  v4 = v9;
  v5 = v10;
  outlined copy of _ShapeStyle_Shape.Result(v9, v10);
  outlined consume of _ShapeStyle_Shape.Result(v4, v5);
  swift_release();
  swift_release();
  swift_release();
  if (v5 == 4)
  {
    if ((v4 & 1) != 0)
      return 1;
  }
  else
  {
    outlined consume of _ShapeStyle_Shape.Result(v4, v5);
  }
  return 0;
}

void GraphicsImage.withRBImage(image:color:)(void (*a1)(uint64_t), __n128 a2, __n128 a3, __n128 a4, __n128 a5, uint64_t a6, void (*a7)(__n128, __n128, __n128, __n128))
{
  uint64_t v7;
  _DWORD *value;
  unsigned int v11;
  uint64_t IOSurface;
  CGImageRef_optional v13;
  uint64_t CGImage;
  _DWORD *v15;

  value = *(_DWORD **)v7;
  v11 = *(unsigned __int8 *)(v7 + 8);
  a4.n128_u64[0] = *(_QWORD *)(v7 + 16);
  a5.n128_u64[0] = *(_QWORD *)(v7 + 24);
  if (v11 <= 3)
  {
    if (!*(_BYTE *)(v7 + 8))
    {
      outlined copy of GraphicsImage.Contents?(*(id *)v7, 0);
      goto LABEL_13;
    }
    if (v11 == 1)
    {
      outlined copy of GraphicsImage.Contents?(*(id *)v7, 1);
      IOSurface = RBImageMakeIOSurface();
      a1(IOSurface);
      outlined consume of GraphicsImage.Contents?(value, 1);
      return;
    }
LABEL_7:
    if (a4.n128_f64[0] != 0.0)
      __asm { BR              X10 }
    v13.value = GraphicsImage.render(at:prefersMask:)((CGSize)0, 0).value;
    if (v13.value)
    {
      value = v13.value;
LABEL_13:
      v15 = value;
      CGImage = RBImageMakeCGImage();
      a1(CGImage);

      return;
    }
    goto LABEL_11;
  }
  if (v11 == 4)
  {
    a2.n128_u32[0] = value[4];
    a3.n128_u32[0] = value[5];
    a4.n128_u32[0] = value[6];
    a5.n128_u32[0] = value[7];
    if ((*(_BYTE *)(v7 + 60) & 1) == 0)
    {
      a5.n128_f32[0] = a5.n128_f32[0] * COERCE_FLOAT(HIDWORD(*(_QWORD *)(v7 + 52)));
      a4.n128_u32[0] = *(_QWORD *)(v7 + 52);
      a3.n128_u32[0] = HIDWORD(*(_QWORD *)(v7 + 44));
      a2.n128_u32[0] = *(_QWORD *)(v7 + 44);
    }
    goto LABEL_16;
  }
  if (v11 != 255)
    goto LABEL_7;
LABEL_11:
  a2.n128_u32[0] = 0;
  a3.n128_u32[0] = 0;
  a4.n128_u32[0] = 0;
  a5.n128_u32[0] = 0;
LABEL_16:
  a7(a2, a3, a4, a5);
}

uint64_t one-time initialization function for _textDrawingContext()
{
  uint64_t v0;
  id v1;
  uint64_t result;

  type metadata accessor for TextDrawingContext();
  v0 = swift_allocObject();
  v1 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BEBB4A8]), sel_init);
  objc_msgSend(v1, sel_setWrapsForTruncationMode_, 1);
  objc_msgSend(v1, sel_setWantsBaselineOffset_, 1);
  objc_msgSend(v1, sel_setWantsScaledLineHeight_, 1);
  objc_msgSend(v1, sel_setWantsScaledBaselineOffset_, 1);
  objc_msgSend(v1, sel_setCachesLayout_, 1);
  type metadata accessor for [(_:)](0, (unint64_t *)&lazy cache variable for type metadata for AtomicBuffer<NSStringDrawingContext>, (uint64_t (*)(uint64_t))type metadata accessor for NSStringDrawingContext, (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for AtomicBuffer);
  result = swift_allocObject();
  *(_DWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = v1;
  *(_QWORD *)(v0 + 16) = result;
  static GraphicsContext.Storage.Shared._textDrawingContext = v0;
  return result;
}

uint64_t GraphicsContext.Storage.Shared.init(list:environment:)(void *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  _BYTE v7[160];

  v4 = *a2;
  v5 = a2[1];
  *(_QWORD *)(v2 + 24) = 0;
  *(_QWORD *)(v2 + 32) = objc_msgSend(objc_allocWithZone(MEMORY[0x24BE7EF48]), sel_init);
  *(_QWORD *)(v2 + 40) = objc_msgSend(objc_allocWithZone(MEMORY[0x24BE7EF20]), sel_init);
  *(_QWORD *)(v2 + 72) = 0;
  _s7SwiftUI15GraphicsContextV15ResolvedShadingOSgWOi0_((uint64_t)v7);
  outlined init with take of GraphicsContext.ResolvedShading?((uint64_t)v7, v2 + 80, &lazy cache variable for type metadata for GraphicsContext.ResolvedShading?);
  *(_BYTE *)(v2 + 240) = 2;
  *(_QWORD *)(v2 + 256) = 0;
  *(_QWORD *)(v2 + 264) = 0;
  *(_QWORD *)(v2 + 248) = 0;
  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 48) = v4;
  *(_QWORD *)(v2 + 56) = v5;
  *(_DWORD *)(v2 + 64) = objc_msgSend(a1, sel_defaultColorSpace);
  return v2;
}

_QWORD *GraphicsContext.Storage.Shared.resolvedForeground.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *result;
  _BYTE v11[10];
  _QWORD v12[3];
  char v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  char v21;
  __int16 v22;
  _OWORD v23[5];
  char v24;
  int v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  _OWORD v29[5];
  char v30;
  int v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  _QWORD v35[20];
  _BYTE v36[160];
  _BYTE v37[160];

  v3 = v1 + 80;
  outlined init with take of GraphicsContext.ResolvedShading?(v1 + 80, (uint64_t)v36, &lazy cache variable for type metadata for GraphicsContext.ResolvedShading?);
  outlined init with take of GraphicsContext.ResolvedShading?((uint64_t)v36, (uint64_t)v37, &lazy cache variable for type metadata for GraphicsContext.ResolvedShading?);
  if (_s7SwiftUI15GraphicsContextV15ResolvedShadingOSgWOg((uint64_t)v37) == 1)
  {
    v5 = *(_QWORD *)(v1 + 48);
    v4 = *(_QWORD *)(v1 + 56);
    v12[0] = 0;
    v12[1] = 0;
    v12[2] = 1;
    v13 = 1;
    v14 = 0;
    v15 = 5;
    v16 = v5;
    v17 = v4;
    v18 = 0u;
    v19 = 0u;
    v20 = 0;
    v21 = 1;
    v22 = 0;
    swift_retain();
    swift_retain();
    specialized ForegroundStyle._apply(to:)((uint64_t)v12);
    v6 = v14;
    v7 = v15;
    if (v15 == 1)
    {
      swift_bridgeObjectRetain();
      v8 = v6;
    }
    else
    {
      v8 = MEMORY[0x24BEE4AF8];
    }
    v35[0] = v8;
    LOBYTE(v23[0]) = 0;
    _ShapeStyle_Pack.subscript.getter((unsigned __int8 *)v23, 0, (uint64_t)v29);
    swift_bridgeObjectRelease();
    v23[0] = v29[0];
    v23[1] = v29[1];
    v23[2] = v29[2];
    v23[3] = v29[3];
    v23[4] = v29[4];
    v24 = v30;
    v25 = v31;
    v26 = v32;
    v27 = v33;
    v28 = v34;
    GraphicsContext.ResolvedShading.init(_:)((uint64_t)v23, (uint64_t)v35);
    outlined init with take of GraphicsContext.ResolvedShading((uint64_t)v35, (uint64_t)v11);
    outlined init with take of GraphicsContext.ResolvedShading((uint64_t)v11, (uint64_t)v23);
    _ViewInputs.base.modify(v23, v9);
    outlined init with take of GraphicsContext.ResolvedShading?(v3, (uint64_t)v29, &lazy cache variable for type metadata for GraphicsContext.ResolvedShading?);
    outlined init with take of GraphicsContext.ResolvedShading?((uint64_t)v23, v3, &lazy cache variable for type metadata for GraphicsContext.ResolvedShading?);
    outlined retain of GraphicsContext.ResolvedShading(v29, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of GraphicsContext.ResolvedShading?);
    outlined consume of _ShapeStyle_Shape.Result(v6, v7);
    swift_release();
    swift_release();
    swift_release();
  }
  outlined init with take of GraphicsContext.ResolvedShading?(v3, (uint64_t)v29, &lazy cache variable for type metadata for GraphicsContext.ResolvedShading?);
  outlined init with take of GraphicsContext.ResolvedShading?((uint64_t)v29, (uint64_t)v35, &lazy cache variable for type metadata for GraphicsContext.ResolvedShading?);
  result = (_QWORD *)_s7SwiftUI15GraphicsContextV15ResolvedShadingOSgWOg((uint64_t)v35);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    outlined init with take of GraphicsContext.ResolvedShading((uint64_t)v35, a1);
    outlined init with take of GraphicsContext.ResolvedShading?((uint64_t)v29, (uint64_t)v23, &lazy cache variable for type metadata for GraphicsContext.ResolvedShading?);
    return outlined retain of GraphicsContext.ResolvedShading(v23, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of GraphicsContext.ResolvedShading);
  }
  return result;
}

uint64_t GraphicsContext.ResolvedShading.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  float v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  char v44;
  uint64_t v45;
  unsigned __int8 v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void *v57;
  void *v58;
  uint64_t v59;
  void *v60;
  void *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char v68;
  float v69;
  uint64_t v70;
  char v71;
  uint64_t v72;
  _BYTE v73[168];

  v3 = *(void **)a1;
  v4 = *(_QWORD *)(a1 + 8);
  v6 = *(void **)(a1 + 16);
  v5 = *(void **)(a1 + 24);
  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(_QWORD *)(a1 + 40);
  v9 = *(_QWORD *)(a1 + 48);
  v10 = *(_QWORD *)(a1 + 56);
  v11 = *(_QWORD *)(a1 + 64);
  v12 = *(_QWORD *)(a1 + 72);
  v13 = *(_BYTE *)(a1 + 80);
  v14 = *(float *)(a1 + 84);
  v15 = *(_QWORD *)(a1 + 88);
  v16 = *(unsigned __int8 *)(a1 + 96);
  v17 = *(_QWORD *)(a1 + 104);
  if (v13)
    goto LABEL_20;
  v44 = *(_BYTE *)(a1 + 80);
  v54 = *(_QWORD *)(a1 + 88);
  v45 = a2;
  v52 = *(_QWORD *)(a1 + 32);
  v53 = *(_QWORD *)(a1 + 8);
  v56 = *(_QWORD *)(a1 + 64);
  v57 = *(void **)a1;
  v49 = *(_QWORD *)(a1 + 48);
  v50 = *(_QWORD *)(a1 + 56);
  v47 = *(void **)(a1 + 24);
  v48 = *(_QWORD *)(a1 + 40);
  v51 = *(void **)(a1 + 16);
  v46 = *(_BYTE *)(a1 + 96);
  v55 = *(_QWORD *)(a1 + 72);
  if (v16 == 255)
  {
    v30 = *(_QWORD *)(a1 + 8);
    v31 = *(void **)(a1 + 24);
    v32 = *(_QWORD *)(a1 + 32);
    v33 = *(_QWORD *)(a1 + 40);
    v34 = *(_QWORD *)(a1 + 72);
    outlined copy of _ShapeStyle_Pack.Fill(v3, v30, v6, v5, v7, v8, v9, v10, v11, v12, 0);
    outlined copy of GraphicsBlendMode?(v15, 0xFFu);
    swift_bridgeObjectRetain();
    outlined copy of _ShapeStyle_Pack.Fill(v57, v30, v6, v31, v32, v33, v9, v10, v56, v34, 0);
    outlined copy of GraphicsBlendMode?(v15, 0xFFu);
    v35 = one-time initialization token for normal;
    swift_bridgeObjectRetain();
    if (v35 != -1)
      swift_once();
    v41 = static GraphicsBlendMode.normal;
    v42 = byte_254266040;
    outlined copy of GraphicsBlendMode(static GraphicsBlendMode.normal, byte_254266040);
    v27 = v52;
    v29 = v53;
    v25 = v47;
    v26 = v48;
    LOBYTE(v16) = -1;
  }
  else
  {
    v42 = v16 & 1;
    v18 = *(void **)(a1 + 24);
    v19 = *(_QWORD *)(a1 + 40);
    v20 = *(_QWORD *)(a1 + 48);
    v21 = *(_QWORD *)(a1 + 56);
    v22 = *(void **)a1;
    v23 = *(_QWORD *)(a1 + 64);
    v24 = *(_QWORD *)(a1 + 72);
    outlined copy of _ShapeStyle_Pack.Fill(v3, *(_QWORD *)(a1 + 8), *(void **)(a1 + 16), v5, v7, v8, v20, v21, v11, v12, 0);
    outlined copy of GraphicsBlendMode?(v15, v16);
    swift_bridgeObjectRetain();
    v39 = v23;
    v40 = v24;
    v25 = v18;
    v10 = v21;
    v9 = v20;
    v26 = v19;
    v6 = v51;
    v27 = v52;
    v28 = v22;
    v29 = v53;
    outlined copy of _ShapeStyle_Pack.Fill(v28, v53, v51, v25, v52, v26, v9, v10, v39, v40, 0);
    outlined copy of GraphicsBlendMode?(v15, v16);
    swift_bridgeObjectRetain();
    v41 = v15;
  }
  outlined copy of GraphicsBlendMode?(v15, v16);
  outlined consume of _ShapeStyle_Pack.Fill((unint64_t)v57, v29, (unint64_t)v6, v25, v27, v26, v9, v10, v56, v55, 0);
  outlined consume of GraphicsBlendMode?(v15, v16);
  swift_bridgeObjectRelease();
  if (one-time initialization token for normal != -1)
    swift_once();
  v36 = static GraphicsBlendMode.normal;
  v37 = byte_254266040;
  if ((v42 & 1) == 0)
  {
    if ((byte_254266040 & 1) == 0)
    {
      outlined consume of GraphicsBlendMode(v41, 0);
      outlined consume of GraphicsBlendMode(v36, 0);
      if ((_DWORD)v41 == (_DWORD)v36)
        goto LABEL_15;
LABEL_19:
      v10 = v50;
      v6 = v51;
      v9 = v49;
      outlined consume of _ShapeStyle_Pack.Fill((unint64_t)v57, v53, (unint64_t)v51, v47, v52, v48, v49, v50, v56, v55, 0);
      LOBYTE(v16) = v46;
      outlined consume of GraphicsBlendMode?(v15, v46);
      swift_bridgeObjectRelease();
      v12 = v55;
      v11 = v56;
      v5 = v47;
      v7 = v52;
      v8 = v48;
      v3 = v57;
      v4 = v53;
      a2 = v45;
      v13 = v44;
      goto LABEL_20;
    }
LABEL_18:
    outlined copy of GraphicsBlendMode(v36, v37);
    outlined consume of GraphicsBlendMode(v41, v42);
    outlined consume of GraphicsBlendMode(v36, v37);
    outlined consume of GraphicsBlendMode(v41, v42);
    goto LABEL_19;
  }
  if (!byte_254266040)
  {
    swift_unknownObjectRetain();
    goto LABEL_18;
  }
  swift_unknownObjectRetain();
  outlined consume of GraphicsBlendMode(v41, 1);
  outlined consume of GraphicsBlendMode(v36, 1);
  if (v41 != v36)
    goto LABEL_19;
LABEL_15:
  v43 = *(_QWORD *)(v17 + 16);
  v10 = v50;
  v6 = v51;
  v9 = v49;
  outlined consume of _ShapeStyle_Pack.Fill((unint64_t)v57, v53, (unint64_t)v51, v47, v52, v48, v49, v50, v56, v55, 0);
  LOBYTE(v16) = v46;
  outlined consume of GraphicsBlendMode?(v15, v46);
  swift_bridgeObjectRelease();
  v12 = v55;
  v11 = v56;
  v5 = v47;
  v7 = v52;
  v8 = v48;
  v3 = v57;
  v4 = v53;
  a2 = v45;
  v13 = v44;
  if (v43)
  {
LABEL_20:
    v58 = v3;
    v59 = v4;
    v60 = v6;
    v61 = v5;
    v62 = v7;
    v63 = v8;
    v64 = v9;
    v65 = v10;
    v66 = v11;
    v67 = v12;
    v68 = v13;
    v69 = v14;
    v70 = v15;
    v71 = v16;
    v72 = v17;
    _s7SwiftUI15GraphicsContextV15ResolvedShadingOWOi3_((uint64_t)&v58);
    goto LABEL_21;
  }
  outlined consume of _ShapeStyle_Pack.Fill((unint64_t)v57, v53, (unint64_t)v51, v47, v52, v48, v49, v50, v56, v55, 0);
  outlined consume of GraphicsBlendMode?(v54, v46);
  swift_bridgeObjectRelease();
  v58 = v57;
  LODWORD(v59) = v53;
  *((float *)&v59 + 1) = v14 * *((float *)&v53 + 1);
  _s7SwiftUI15GraphicsContextV15ResolvedShadingOWOi0_((uint64_t)&v58);
LABEL_21:
  outlined init with take of GraphicsContext.ResolvedShading((uint64_t)&v58, (uint64_t)v73);
  return outlined init with take of GraphicsContext.ResolvedShading((uint64_t)v73, a2);
}

id *GraphicsContext.Storage.Shared.deinit()
{
  id *v0;
  _QWORD v2[20];

  swift_release();
  swift_release();
  swift_release();
  swift_release();
  outlined init with take of GraphicsContext.ResolvedShading?((uint64_t)(v0 + 10), (uint64_t)v2, &lazy cache variable for type metadata for GraphicsContext.ResolvedShading?);
  outlined retain of GraphicsContext.ResolvedShading(v2, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of GraphicsContext.ResolvedShading?);

  swift_release();
  return v0;
}

uint64_t GraphicsContext.Storage.Shared.__deallocating_deinit()
{
  GraphicsContext.Storage.Shared.deinit();
  return swift_deallocClassInstance();
}

uint64_t GraphicsContext.Storage.init(_:state:ownsState:resetBlending:)(uint64_t a1, uint64_t a2, char a3, char a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v10;
  int v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v17[2];

  v5 = v4;
  *(_QWORD *)(v4 + 32) = 1065353216;
  *(_QWORD *)(v4 + 40) = 0x7FF8000000000000;
  v10 = *(_QWORD *)(a1 + 16);
  v11 = *(_DWORD *)(v10 + 64);
  if (v11 == RBDrawingStateGetDefaultColorSpace())
  {
    swift_retain();
  }
  else
  {
    v12 = (id)RBDrawingStateGetDisplayList();
    v14 = *(_QWORD *)(v10 + 48);
    v13 = *(_QWORD *)(v10 + 56);
    v17[0] = v14;
    v17[1] = v13;
    type metadata accessor for GraphicsContext.Storage.Shared();
    swift_allocObject();
    swift_retain();
    swift_retain();
    v10 = GraphicsContext.Storage.Shared.init(list:environment:)(v12, v17);
  }
  *(_QWORD *)(v5 + 16) = v10;
  *(_QWORD *)(v5 + 24) = a2;
  *(_BYTE *)(v5 + 48) = a3 & 1;
  if ((a4 & 1) != 0)
  {
    swift_release();
  }
  else
  {
    *(_DWORD *)(v5 + 32) = *(_DWORD *)(a1 + 32);
    v15 = *(_DWORD *)(a1 + 36);
    swift_release();
    *(_DWORD *)(v5 + 36) = v15;
  }
  return v5;
}

uint64_t GraphicsContext.Storage.deinit()
{
  uint64_t v0;

  if (*(_BYTE *)(v0 + 48) == 1)
    RBDrawingStateDestroy();
  swift_release();
  return v0;
}

uint64_t GraphicsContext.Storage.__deallocating_deinit()
{
  uint64_t v0;

  if (*(_BYTE *)(v0 + 48) == 1)
    RBDrawingStateDestroy();
  swift_release();
  return swift_deallocClassInstance();
}

uint64_t GraphicsContext.init(drawingState:environment:)(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  uint64_t v8[2];

  v3 = *a2;
  v4 = a2[1];
  type metadata accessor for GraphicsContext.Storage();
  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 32) = 1065353216;
  *(_QWORD *)(v5 + 40) = 0x7FF8000000000000;
  v6 = (id)RBDrawingStateGetDisplayList();
  v8[0] = v3;
  v8[1] = v4;
  type metadata accessor for GraphicsContext.Storage.Shared();
  swift_allocObject();
  *(_QWORD *)(v5 + 16) = GraphicsContext.Storage.Shared.init(list:environment:)(v6, v8);
  *(_QWORD *)(v5 + 24) = a1;
  *(_BYTE *)(v5 + 48) = 0;
  return v5;
}

uint64_t GraphicsContext.environment.getter@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD *)(v2 + 56);
  *a2 = *(_QWORD *)(v2 + 48);
  a2[1] = v3;
  swift_retain();
  return swift_retain();
}

id GraphicsContext.displayList.getter(uint64_t a1)
{
  return *(id *)(*(_QWORD *)(a1 + 16) + 16);
}

uint64_t static GraphicsContext.BlendMode.multiply.getter()
{
  return 1;
}

uint64_t static GraphicsContext.BlendMode.screen.getter()
{
  return 2;
}

uint64_t static GraphicsContext.BlendMode.overlay.getter()
{
  return 3;
}

uint64_t static GraphicsContext.BlendMode.darken.getter()
{
  return 4;
}

uint64_t static GraphicsContext.BlendMode.lighten.getter()
{
  return 5;
}

uint64_t static GraphicsContext.BlendMode.colorDodge.getter()
{
  return 6;
}

uint64_t static GraphicsContext.BlendMode.colorBurn.getter()
{
  return 7;
}

uint64_t static GraphicsContext.BlendMode.softLight.getter()
{
  return 8;
}

uint64_t static GraphicsContext.BlendMode.hardLight.getter()
{
  return 9;
}

uint64_t static GraphicsContext.BlendMode.difference.getter()
{
  return 10;
}

uint64_t static GraphicsContext.BlendMode.exclusion.getter()
{
  return 11;
}

uint64_t static GraphicsContext.BlendMode.hue.getter()
{
  return 12;
}

uint64_t static GraphicsContext.BlendMode.saturation.getter()
{
  return 13;
}

uint64_t static GraphicsContext.BlendMode.color.getter()
{
  return 14;
}

uint64_t static GraphicsContext.BlendMode.luminosity.getter()
{
  return 15;
}

uint64_t static GraphicsContext.BlendMode.clear.getter()
{
  return 16;
}

uint64_t static GraphicsContext.BlendMode.copy.getter()
{
  return 17;
}

uint64_t static GraphicsContext.BlendMode.sourceIn.getter()
{
  return 18;
}

uint64_t static GraphicsContext.BlendMode.sourceOut.getter()
{
  return 19;
}

uint64_t static GraphicsContext.BlendMode.sourceAtop.getter()
{
  return 20;
}

uint64_t static GraphicsContext.BlendMode.destinationOver.getter()
{
  return 21;
}

uint64_t static GraphicsContext.BlendMode.destinationIn.getter()
{
  return 22;
}

uint64_t static GraphicsContext.BlendMode.destinationOut.getter()
{
  return 23;
}

uint64_t static GraphicsContext.BlendMode.destinationAtop.getter()
{
  return 24;
}

uint64_t static GraphicsContext.BlendMode.xor.getter()
{
  return 25;
}

uint64_t static GraphicsContext.BlendMode.plusDarker.getter()
{
  return 26;
}

uint64_t static GraphicsContext.BlendMode.plusLighter.getter()
{
  return 27;
}

uint64_t (*GraphicsContext.opacity.modify(uint64_t a1))(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(a1 + 8) = v1;
  *(double *)a1 = *(float *)(*(_QWORD *)v1 + 32);
  return GraphicsContext.opacity.modify;
}

uint64_t GraphicsContext.opacity.modify(uint64_t a1)
{
  uint64_t *v1;
  float v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;

  v1 = *(uint64_t **)(a1 + 8);
  v2 = *(double *)a1;
  result = *v1;
  if (*(float *)(*v1 + 32) != v2)
  {
    result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      v4 = RBDrawingStateInit();
      type metadata accessor for GraphicsContext.Storage();
      swift_allocObject();
      v5 = swift_retain();
      *v1 = GraphicsContext.Storage.init(_:state:ownsState:resetBlending:)(v5, v4, 1, 0);
      result = swift_release();
    }
    *(float *)(*v1 + 32) = v2;
  }
  return result;
}

uint64_t (*GraphicsContext.blendMode.modify(uint64_t a1))(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)a1 = v1;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(*(_QWORD *)v1 + 36);
  return GraphicsContext.blendMode.modify;
}

uint64_t GraphicsContext.blendMode.modify(uint64_t a1)
{
  uint64_t *v1;
  int v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;

  v1 = *(uint64_t **)a1;
  v2 = *(_DWORD *)(a1 + 8);
  result = **(_QWORD **)a1;
  if (*(_DWORD *)(result + 36) != v2)
  {
    result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      v4 = RBDrawingStateInit();
      type metadata accessor for GraphicsContext.Storage();
      swift_allocObject();
      v5 = swift_retain();
      *v1 = GraphicsContext.Storage.init(_:state:ownsState:resetBlending:)(v5, v4, 1, 0);
      result = swift_release();
    }
    *(_DWORD *)(*v1 + 36) = v2;
  }
  return result;
}

void static GraphicsContext._ShapeRenderingMode.default.getter(uint64_t a1@<X8>)
{
  *(_DWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
}

void static GraphicsContext._ShapeRenderingMode.innerDistance(_:)(uint64_t a1@<X8>, double a2@<D0>)
{
  *(_DWORD *)a1 = 2;
  *(double *)(a1 + 8) = a2;
}

void static GraphicsContext._ShapeRenderingMode.outerDistance(_:)(uint64_t a1@<X8>, double a2@<D0>)
{
  *(_DWORD *)a1 = 3;
  *(double *)(a1 + 8) = a2;
}

void GraphicsContext._ShapeRenderingMode.hash(into:)()
{
  uint64_t v0;
  Swift::UInt64 v1;
  Swift::UInt64 v2;

  v1 = *(_QWORD *)(v0 + 8);
  Hasher._combine(_:)(*(_DWORD *)v0);
  if ((v1 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v2 = v1;
  else
    v2 = 0;
  Hasher._combine(_:)(v2);
}

BOOL static GraphicsContext._ShapeRenderingMode.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return *(_DWORD *)a1 == *(_DWORD *)a2 && *(double *)(a1 + 8) == *(double *)(a2 + 8);
}

Swift::Int GraphicsContext._ShapeRenderingMode.hashValue.getter()
{
  uint64_t v0;
  Swift::UInt32 v1;
  Swift::UInt64 v2;
  Swift::UInt64 v3;

  v1 = *(_DWORD *)v0;
  v2 = *(_QWORD *)(v0 + 8);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  if ((v2 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v3 = v2;
  else
    v3 = 0;
  Hasher._combine(_:)(v3);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance GraphicsContext._ShapeRenderingMode()
{
  uint64_t v0;
  Swift::UInt64 v1;
  Swift::UInt64 v2;

  v1 = *(_QWORD *)(v0 + 8);
  Hasher._combine(_:)(*(_DWORD *)v0);
  if ((v1 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v2 = v1;
  else
    v2 = 0;
  Hasher._combine(_:)(v2);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance GraphicsContext._ShapeRenderingMode()
{
  uint64_t v0;
  Swift::UInt64 v1;
  Swift::UInt64 v2;

  Hasher.init(_seed:)();
  v1 = *(_QWORD *)(v0 + 8);
  Hasher._combine(_:)(*(_DWORD *)v0);
  if ((v1 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v2 = v1;
  else
    v2 = 0;
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance GraphicsContext._ShapeRenderingMode(uint64_t a1, uint64_t a2)
{
  return *(_DWORD *)a1 == *(_DWORD *)a2 && *(double *)(a1 + 8) == *(double *)(a2 + 8);
}

uint64_t GraphicsContext._shapeRenderingMode.getter@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  double v2;
  uint64_t v3;
  _BOOL4 v4;
  int v5;
  double v6;

  v2 = fabs(*(double *)(result + 40));
  v3 = *(_QWORD *)(result + 40);
  v4 = (~v3 & 0x7FF0000000000000) != 0;
  if ((v3 & 0xFFFFFFFFFFFFFLL) == 0)
    v4 = 1;
  if (v3 >= 0)
    v5 = 2;
  else
    v5 = 3;
  if (!v4)
    v5 = 0;
  v6 = 0.0;
  if (v4)
    v6 = v2;
  *(_DWORD *)a2 = v5;
  *(double *)(a2 + 8) = v6;
  return result;
}

uint64_t GraphicsContext._shapeRenderingMode.setter(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  double v3;
  double v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;

  v2 = v1;
  v3 = *(double *)(a1 + 8);
  if (*(_DWORD *)a1 == 2)
  {
    if (v3 > 0.0)
      v4 = *(double *)(a1 + 8);
    else
      v4 = 0.0;
  }
  else
  {
    if (*(_DWORD *)a1 != 3)
    {
      v4 = NAN;
      result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) != 0)
        goto LABEL_12;
      goto LABEL_11;
    }
    if (v3 <= 0.0)
      v3 = 0.0;
    v4 = -v3;
  }
  result = *v1;
  if (*(double *)(*v1 + 40) == v4)
    return result;
  result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
  {
LABEL_11:
    v6 = RBDrawingStateInit();
    type metadata accessor for GraphicsContext.Storage();
    swift_allocObject();
    v7 = swift_retain();
    *v2 = GraphicsContext.Storage.init(_:state:ownsState:resetBlending:)(v7, v6, 1, 0);
    result = swift_release();
  }
LABEL_12:
  *(double *)(*v2 + 40) = v4;
  return result;
}

uint64_t (*GraphicsContext._shapeRenderingMode.modify(uint64_t a1))(int *a1, char a2)
{
  uint64_t v1;
  double v2;
  uint64_t v3;
  _BOOL4 v4;
  int v5;
  double v6;

  *(_QWORD *)(a1 + 16) = v1;
  v2 = fabs(*(double *)(*(_QWORD *)v1 + 40));
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 40);
  v4 = (~v3 & 0x7FF0000000000000) != 0;
  if ((v3 & 0xFFFFFFFFFFFFFLL) == 0)
    v4 = 1;
  if (v3 >= 0)
    v5 = 2;
  else
    v5 = 3;
  if (!v4)
    v5 = 0;
  v6 = 0.0;
  if (v4)
    v6 = v2;
  *(_DWORD *)a1 = v5;
  *(double *)(a1 + 8) = v6;
  return GraphicsContext._shapeRenderingMode.modify;
}

uint64_t GraphicsContext._shapeRenderingMode.modify(int *a1, char a2)
{
  uint64_t v2;
  int v4;
  uint64_t v5;

  if ((a2 & 1) != 0)
  {
    v2 = *((_QWORD *)a1 + 1);
    v4 = *a1;
    v5 = v2;
    a1 = &v4;
  }
  return GraphicsContext._shapeRenderingMode.setter((uint64_t)a1);
}

uint64_t (*GraphicsContext.identifier.modify(uint64_t a1))(uint64_t **a1)
{
  uint64_t v1;

  *(_QWORD *)a1 = v1;
  *(_DWORD *)(a1 + 8) = RBDrawingStateGetIdentifier();
  return GraphicsContext.identifier.modify;
}

uint64_t GraphicsContext.identifier.modify(uint64_t **a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    v2 = RBDrawingStateInit();
    type metadata accessor for GraphicsContext.Storage();
    swift_allocObject();
    v3 = swift_retain();
    *v1 = GraphicsContext.Storage.init(_:state:ownsState:resetBlending:)(v3, v2, 1, 0);
    swift_release();
  }
  return RBDrawingStateSetIdentifier();
}

uint64_t GraphicsContext.namespace.getter()
{
  RBDrawingStateGetIdentifierNamespace2();
  return UUID.init(uuid:)();
}

uint64_t GraphicsContext.setIdentifier(_:in:)()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;

  v1 = v0;
  UUID.uuid.getter();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    v2 = RBDrawingStateInit();
    type metadata accessor for GraphicsContext.Storage();
    swift_allocObject();
    v3 = swift_retain();
    *v1 = GraphicsContext.Storage.init(_:state:ownsState:resetBlending:)(v3, v2, 1, 0);
    swift_release();
  }
  return RBDrawingStateSetIdentifier2();
}

void GraphicsContext.addAnimation(_:id:)(uint64_t a1)
{
  UUID.uuid.getter();
  GraphicsContext._addAnimation(_:id:)(a1);
}

uint64_t GraphicsContext.transform.setter()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t result;
  uint64_t v3;
  uint64_t v4;

  v1 = v0;
  RBDrawingStateGetCTM();
  result = static CGAffineTransform.== infix(_:_:)();
  if ((result & 1) == 0)
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      v3 = RBDrawingStateInit();
      type metadata accessor for GraphicsContext.Storage();
      swift_allocObject();
      v4 = swift_retain();
      *v1 = GraphicsContext.Storage.init(_:state:ownsState:resetBlending:)(v4, v3, 1, 0);
      swift_release();
    }
    return RBDrawingStateSetCTM();
  }
  return result;
}

void (*GraphicsContext.transform.modify(_QWORD *a1))(_OWORD **a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  __int128 v5;
  __int128 v6;
  __int128 v7;

  v3 = malloc(0x98uLL);
  *a1 = v3;
  v3[18] = v1;
  RBDrawingStateGetCTM();
  *((_OWORD *)v3 + 6) = v5;
  *((_OWORD *)v3 + 7) = v6;
  *((_OWORD *)v3 + 8) = v7;
  return GraphicsContext.transform.modify;
}

void GraphicsContext.transform.modify(_OWORD **a1, char a2)
{
  _OWORD *v2;
  _OWORD *v3;
  __int128 v4;

  v2 = *a1;
  if ((a2 & 1) != 0)
    v3 = *a1;
  else
    v3 = *a1 + 3;
  v4 = v2[7];
  *v3 = v2[6];
  v3[1] = v4;
  v3[2] = v2[8];
  GraphicsContext.transform.setter();
  free(v2);
}

void GraphicsContext.scaleBy(x:y:)(double a1, double a2)
{
  uint64_t *v2;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  if (a1 != 1.0 || a2 != 1.0)
  {
    v4 = v2;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      v5 = RBDrawingStateInit();
      type metadata accessor for GraphicsContext.Storage();
      swift_allocObject();
      v6 = swift_retain();
      *v4 = GraphicsContext.Storage.init(_:state:ownsState:resetBlending:)(v6, v5, 1, 0);
      swift_release();
    }
    RBDrawingStateScaleCTM();
  }
}

Swift::Void __swiftcall GraphicsContext.rotate(by:)(SwiftUI::Angle by)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;

  if (by.radians != 0.0)
  {
    v2 = v1;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      v3 = RBDrawingStateInit();
      type metadata accessor for GraphicsContext.Storage();
      swift_allocObject();
      v4 = swift_retain();
      *v2 = GraphicsContext.Storage.init(_:state:ownsState:resetBlending:)(v4, v3, 1, 0);
      swift_release();
    }
    RBDrawingStateRotateCTM();
  }
}

uint64_t _s7SwiftUI15GraphicsContextV15ResolvedShadingOWOg(uint64_t a1)
{
  return *(_QWORD *)(a1 + 96) >> 60;
}

uint64_t static GraphicsContext.Filter.shadow(color:radius:x:y:blendMode:options:)@<X0>(uint64_t a1@<X0>, unsigned int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X8>, double a5@<D0>, double a6@<D1>, double a7@<D2>)
{
  *(_QWORD *)a4 = a1;
  *(double *)(a4 + 8) = a5;
  *(double *)(a4 + 16) = a6;
  *(double *)(a4 + 24) = a7;
  *(_QWORD *)(a4 + 32) = a2 | (unint64_t)(a3 << 32);
  *(_OWORD *)(a4 + 40) = 0u;
  *(_OWORD *)(a4 + 56) = 0u;
  *(_QWORD *)(a4 + 72) = 0;
  *(_QWORD *)(a4 + 80) = 402653184;
  return swift_retain();
}

uint64_t static GraphicsContext.Filter.pathProjection(startPoint:endPoint:path:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>, double a4@<D1>, double a5@<D2>, double a6@<D3>)
{
  uint64_t v6;
  __int128 v7;
  _BYTE v9[40];

  v6 = *(unsigned __int8 *)(a1 + 32);
  *(double *)a2 = a3;
  *(double *)(a2 + 8) = a4;
  *(double *)(a2 + 16) = a5;
  *(double *)(a2 + 24) = a6;
  v7 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(a2 + 32) = *(_OWORD *)a1;
  *(_OWORD *)(a2 + 48) = v7;
  *(_QWORD *)(a2 + 64) = v6;
  *(_OWORD *)(a2 + 72) = xmmword_2352A2F20;
  outlined init with take of Path.Storage(a1, (uint64_t)v9);
  return outlined retain of Path.Storage((uint64_t)v9);
}

uint64_t static GraphicsContext.Filter.colorMultiply(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = a1;
  *(_OWORD *)(a2 + 8) = 0u;
  *(_OWORD *)(a2 + 24) = 0u;
  *(_OWORD *)(a2 + 40) = 0u;
  *(_OWORD *)(a2 + 56) = 0u;
  *(_QWORD *)(a2 + 72) = 0;
  *(_QWORD *)(a2 + 80) = 805306368;
  return swift_retain();
}

uint64_t static GraphicsContext.Filter.alphaMultiply(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = a1;
  *(_OWORD *)(a2 + 8) = 0u;
  *(_OWORD *)(a2 + 24) = 0u;
  *(_OWORD *)(a2 + 40) = 0u;
  *(_OWORD *)(a2 + 56) = 0u;
  *(_QWORD *)(a2 + 72) = 0;
  *(_QWORD *)(a2 + 80) = 0x40000000;
  return swift_retain();
}

__n128 static GraphicsContext.Filter.colorMatrix(_:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  __int128 v2;
  __int128 v3;
  __n128 result;

  v2 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)a2 = *(_OWORD *)a1;
  *(_OWORD *)(a2 + 16) = v2;
  v3 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(a2 + 32) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(a2 + 48) = v3;
  result = *(__n128 *)(a1 + 64);
  *(__n128 *)(a2 + 64) = result;
  *(_QWORD *)(a2 + 80) = 1207959552;
  return result;
}

double static GraphicsContext.Filter.hueRotation(_:)@<D0>(uint64_t a1@<X8>, double a2@<D0>)
{
  double result;

  *(double *)a1 = a2;
  result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 1342177280;
  return result;
}

double static GraphicsContext.Filter.saturation(_:)@<D0>(uint64_t a1@<X8>, double a2@<D0>)
{
  unsigned int v2;
  double result;

  *(float *)&v2 = a2;
  *(_QWORD *)a1 = v2;
  result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 1476395008;
  return result;
}

double static GraphicsContext.Filter.brightness(_:)@<D0>(uint64_t a1@<X8>, double a2@<D0>)
{
  unsigned int v2;
  double result;

  *(float *)&v2 = a2;
  *(_QWORD *)a1 = v2;
  result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 1610612736;
  return result;
}

double static GraphicsContext.Filter.contrast(_:)@<D0>(uint64_t a1@<X8>, double a2@<D0>)
{
  unsigned int v2;
  double result;

  *(float *)&v2 = a2;
  *(_QWORD *)a1 = v2;
  result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 1744830464;
  return result;
}

double static GraphicsContext.Filter.colorInvert(_:)@<D0>(uint64_t a1@<X8>, double a2@<D0>)
{
  unsigned int v2;
  double result;

  *(float *)&v2 = a2;
  *(_QWORD *)a1 = v2;
  result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 1879048192;
  return result;
}

double static GraphicsContext.Filter.grayscale(_:)@<D0>(uint64_t a1@<X8>, double a2@<D0>)
{
  unsigned int v2;
  double result;

  *(float *)&v2 = a2;
  *(_QWORD *)a1 = v2;
  result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 2013265920;
  return result;
}

double static GraphicsContext.Filter.luminanceToAlpha.getter@<D0>(uint64_t a1@<X8>)
{
  double result;

  result = 0.0;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_QWORD *)(a1 + 80) = 3221225472;
  return result;
}

double static GraphicsContext.Filter.blur(radius:options:)@<D0>(char a1@<W0>, uint64_t a2@<X8>, double a3@<D0>)
{
  uint64_t v3;
  uint64_t v4;
  double result;

  v3 = a1 & 1;
  *(double *)a2 = a3;
  v4 = 8;
  if ((a1 & 1) != 0)
    v4 = 9;
  if ((a1 & 2) != 0)
    v3 = v4;
  *(_QWORD *)(a2 + 8) = v3;
  result = 0.0;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)(a2 + 64) = 0u;
  *(_QWORD *)(a2 + 80) = 0x80000000;
  return result;
}

void *static GraphicsContext.Filter.variableBlur(maxRadius:mask:options:)@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X8>, double a4@<D0>)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;

  v4 = *(void **)a1;
  v5 = *(_QWORD *)(a1 + 8);
  v6 = *(_QWORD *)(a1 + 16);
  v7 = *(_QWORD *)(a1 + 24);
  v8 = *(_QWORD *)(a1 + 32);
  v9 = *(_QWORD *)(a1 + 40);
  v10 = *(_QWORD *)(a1 + 48);
  v11 = *(_QWORD *)(a1 + 56);
  v12 = *(_QWORD *)(a1 + 64);
  v13 = *(unsigned __int8 *)(a1 + 72);
  v14 = (unint64_t)(a2 & 1) << 32;
  v15 = 0x900000000;
  if ((a2 & 1) == 0)
    v15 = 0x800000000;
  if ((a2 & 2) != 0)
    v14 = v15;
  *(double *)a3 = a4;
  *(_QWORD *)(a3 + 8) = v4;
  *(_QWORD *)(a3 + 16) = v5;
  *(_QWORD *)(a3 + 24) = v6;
  *(_QWORD *)(a3 + 32) = v7;
  *(_QWORD *)(a3 + 40) = v8;
  *(_QWORD *)(a3 + 48) = v9;
  *(_QWORD *)(a3 + 56) = v10;
  *(_QWORD *)(a3 + 64) = v11;
  *(_QWORD *)(a3 + 72) = v12;
  *(_QWORD *)(a3 + 80) = v14 | 0x88000000 | v13;
  return outlined copy of GraphicsContext.Shading.Storage(v4, v5, v6, v7, v8, v9, v10, v11, v12, v13);
}

uint64_t static GraphicsContext.Filter.alphaThreshold(min:max:color:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>, double a4@<D1>)
{
  unsigned int v4;
  unsigned int v5;
  uint64_t result;
  Swift::String v7;
  Swift::String v8;

  if (a3 >= a4)
  {
    _StringGuts.grow(_:)(28);
    v7._object = (void *)0x80000002352E32C0;
    v7._countAndFlagsBits = 0xD000000000000015;
    String.append(_:)(v7);
    Double.write<A>(to:)();
    v8._countAndFlagsBits = 3943982;
    v8._object = (void *)0xE300000000000000;
    String.append(_:)(v8);
    Double.write<A>(to:)();
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    *(float *)&v4 = a3;
    *(float *)&v5 = a4;
    *(_QWORD *)a2 = v4 | ((unint64_t)v5 << 32);
    *(_QWORD *)(a2 + 8) = a1;
    *(_OWORD *)(a2 + 16) = 0u;
    *(_OWORD *)(a2 + 32) = 0u;
    *(_OWORD *)(a2 + 48) = 0u;
    *(_OWORD *)(a2 + 64) = 0u;
    *(_QWORD *)(a2 + 80) = 2415919104;
    return swift_retain();
  }
  return result;
}

uint64_t static GraphicsContext.Filter.alphaGradient(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = a1;
  *(_OWORD *)(a2 + 8) = 0u;
  *(_OWORD *)(a2 + 24) = 0u;
  *(_OWORD *)(a2 + 40) = 0u;
  *(_OWORD *)(a2 + 56) = 0u;
  *(_QWORD *)(a2 + 72) = 0;
  *(_QWORD *)(a2 + 80) = 2550136832;
  return swift_bridgeObjectRetain();
}

{
  *(_QWORD *)a2 = a1;
  *(_QWORD *)(a2 + 8) = 1;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)(a2 + 64) = 0u;
  *(_QWORD *)(a2 + 80) = 2550136832;
  return swift_retain();
}

uint64_t static GraphicsContext.Filter.colorShader(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;

  v2 = *(void **)a1;
  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  v5 = *(_QWORD *)(a1 + 24);
  v6 = *(unsigned int *)(a1 + 32) | 2;
  *(_QWORD *)a2 = *(_QWORD *)a1;
  *(_QWORD *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 16) = v4;
  *(_QWORD *)(a2 + 24) = v5;
  *(_QWORD *)(a2 + 32) = v6;
  *(_OWORD *)(a2 + 40) = 0u;
  *(_OWORD *)(a2 + 56) = 0u;
  *(_QWORD *)(a2 + 72) = 0;
  *(_QWORD *)(a2 + 80) = 3087007744;
  v7 = v2;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

uint64_t static GraphicsContext.Filter.distortionShader(_:maxSampleOffset:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>, double a4@<D1>)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;

  v4 = *(void **)a1;
  v5 = *(_QWORD *)(a1 + 8);
  v6 = *(_QWORD *)(a1 + 16);
  v7 = *(_QWORD *)(a1 + 24);
  v8 = *(unsigned int *)(a1 + 32) | 4;
  *(_QWORD *)a2 = *(_QWORD *)a1;
  *(_QWORD *)(a2 + 8) = v5;
  *(_QWORD *)(a2 + 16) = v6;
  *(_QWORD *)(a2 + 24) = v7;
  *(_QWORD *)(a2 + 32) = v8;
  *(double *)(a2 + 40) = a3;
  *(double *)(a2 + 48) = a4;
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 64) = 0;
  *(_QWORD *)(a2 + 72) = 0;
  *(_QWORD *)(a2 + 80) = 3087007744;
  v9 = v4;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

uint64_t static GraphicsContext.Filter.layerShader(_:maxSampleOffset:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>, double a4@<D1>)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;

  v4 = *(void **)a1;
  v5 = *(_QWORD *)(a1 + 8);
  v6 = *(_QWORD *)(a1 + 16);
  v7 = *(_QWORD *)(a1 + 24);
  v8 = *(unsigned int *)(a1 + 32);
  *(_QWORD *)a2 = *(_QWORD *)a1;
  *(_QWORD *)(a2 + 8) = v5;
  *(_QWORD *)(a2 + 16) = v6;
  *(_QWORD *)(a2 + 24) = v7;
  *(_QWORD *)(a2 + 32) = v8;
  *(double *)(a2 + 40) = a3;
  *(double *)(a2 + 48) = a4;
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 64) = 0;
  *(_QWORD *)(a2 + 72) = 0;
  *(_QWORD *)(a2 + 80) = 3087007744;
  v9 = v4;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

uint64_t static GraphicsContext.ShadowOptions.shadowAbove.getter()
{
  return 1;
}

uint64_t static GraphicsContext.ShadowOptions.invertsAlpha.getter()
{
  return 4;
}

uint64_t static GraphicsContext.ShadowOptions.disablesGroup.getter()
{
  return 8;
}

uint64_t static GraphicsContext.BlurOptions.opaque.getter()
{
  return 1;
}

uint64_t static GraphicsContext.BlurOptions.dithersResult.getter()
{
  return 2;
}

uint64_t static GraphicsContext.FilterOptions.linearColor.getter()
{
  return 1;
}

uint64_t RBDrawingState.addProjectionTransform(_:)()
{
  return RBDrawingStateAddProjectionStyle();
}

_QWORD *GraphicsContext.addVariableBlurFilter(radius:mask:flags:)(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, double a7)
{
  uint64_t v7;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(_QWORD *);
  uint64_t v24;
  uint64_t v25;
  char v26;
  __int128 v27;
  __int128 v28;
  _QWORD *result;
  uint64_t v30;
  char v31;
  unsigned __int8 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  unsigned int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  uint64_t v58;
  uint64_t v59;
  char v60;
  int v61;
  uint64_t v62;
  unsigned __int8 v63;
  uint64_t v64;
  _QWORD v65[3];
  char v66;
  uint64_t v67;
  char v68;
  uint64_t v69;
  uint64_t v70;
  __int128 v71;
  __int128 v72;
  uint64_t v73;
  char v74;
  __int16 v75;
  unsigned __int8 v76[160];
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  uint64_t v81;
  uint64_t v82;
  char v83;
  int v84;
  uint64_t v85;
  unsigned __int8 v86;
  uint64_t v87;

  v10 = *a1;
  v11 = a1[1];
  v12 = a1[2];
  v13 = a1[3];
  v15 = a1[4];
  v14 = a1[5];
  v16 = a1[6];
  v17 = a1[7];
  v18 = a1[8];
  v19 = *((_BYTE *)a1 + 72);
  switch(v19)
  {
    case 0:
      *(_QWORD *)&v77 = *a1;
      *((_QWORD *)&v77 + 1) = v11;
      _s7SwiftUI15GraphicsContextV15ResolvedShadingOWOi0_((uint64_t)&v77);
      goto LABEL_8;
    case 4:
      v47 = a2;
      v20 = *(_QWORD *)(*(_QWORD *)v7 + 16);
      v21 = *(_QWORD *)(v20 + 48);
      v22 = *(_QWORD *)(v20 + 56);
      v65[0] = 0;
      v65[1] = 0;
      v65[2] = 1;
      v66 = 1;
      v67 = 0;
      v68 = 5;
      v69 = v21;
      v70 = v22;
      v71 = 0u;
      v72 = 0u;
      v73 = 0;
      v74 = 1;
      v75 = 0;
      v23 = *(void (**)(_QWORD *))(*(_QWORD *)v10 + 80);
      v48 = v18;
      v50 = v17;
      v52 = v16;
      outlined copy of GraphicsContext.Shading.Storage((void *)v10, v11, v12, v13, v15, v14, v16, v17, v18, 4);
      swift_retain();
      swift_retain();
      v23(v65);
      v24 = v67;
      v45 = v68;
      v44 = v67;
      if (v68 == 1)
        swift_bridgeObjectRetain();
      else
        v24 = MEMORY[0x24BEE4AF8];
      *(_QWORD *)&v77 = v24;
      v76[0] = 0;
      _ShapeStyle_Pack.subscript.getter(v76, 0, (uint64_t)&v54);
      swift_bridgeObjectRelease();
      v42 = *((_QWORD *)&v54 + 1);
      v43 = v54;
      v40 = (void *)*((_QWORD *)&v55 + 1);
      v41 = v55;
      v38 = *((_QWORD *)&v56 + 1);
      v39 = v56;
      v36 = *((_QWORD *)&v57 + 1);
      v37 = v57;
      v33 = v59;
      v34 = v58;
      v31 = v60;
      v35 = v62;
      v77 = v54;
      v78 = v55;
      v79 = v56;
      v80 = v57;
      v81 = v58;
      v82 = v59;
      v83 = v60;
      v84 = v61;
      v85 = v62;
      v32 = v63;
      v86 = v63;
      v87 = v64;
      _s7SwiftUI15GraphicsContextV15ResolvedShadingOWOi3_((uint64_t)&v77);
      outlined init with take of GraphicsContext.ResolvedShading((uint64_t)&v77, (uint64_t)v76);
      GraphicsContext.addVariableBlurFilter(radius:mask:flags:)((uint64_t)v76, v47, a7);
      outlined consume of GraphicsContext.Shading.Storage((void *)v10, v11, v12, v13, v15, v14, v52, v50, v48, 4);
      outlined consume of _ShapeStyle_Pack.Fill(v43, v42, v41, v40, v39, v38, v37, v36, v34, v33, v31);
      outlined consume of GraphicsBlendMode?(v35, v32);
      swift_bridgeObjectRelease();
      outlined consume of _ShapeStyle_Shape.Result(v44, v45);
      swift_release();
      swift_release();
      return (_QWORD *)swift_release();
    case 8:
      if (!*(_QWORD *)(v10 + 16))
      {
        __break(1u);
        JUMPOUT(0x234DCF9C8);
      }
      v25 = *(_QWORD *)(v10 + 96);
      v26 = *(_BYTE *)(v10 + 104);
      v27 = *(_OWORD *)(v10 + 48);
      v77 = *(_OWORD *)(v10 + 32);
      v78 = v27;
      v28 = *(_OWORD *)(v10 + 80);
      v79 = *(_OWORD *)(v10 + 64);
      v80 = v28;
      v81 = v25;
      LOBYTE(v82) = v26;
      return (_QWORD *)GraphicsContext.addVariableBlurFilter(radius:mask:flags:)(&v77, a2, a3, a4, a5, a6, v16, v17, a7);
    case 9:
      outlined init with take of GraphicsContext.ResolvedShading(v10 + 16, (uint64_t)&v77);
LABEL_8:
      outlined init with take of GraphicsContext.ResolvedShading((uint64_t)&v77, (uint64_t)v76);
      return GraphicsContext.addVariableBlurFilter(radius:mask:flags:)((uint64_t)v76, a2, a7);
    case 10:
      if (v11 | v10 | v12 | v13 | v15 | v14 | v16 | v17 | v18)
        goto LABEL_10;
      swift_retain();
      GraphicsContext.Storage.Shared.resolvedForeground.getter((uint64_t)v76);
      swift_release();
      outlined init with take of GraphicsContext.ResolvedShading((uint64_t)v76, (uint64_t)&v77);
      outlined init with take of GraphicsContext.ResolvedShading((uint64_t)&v77, (uint64_t)&v54);
      GraphicsContext.addVariableBlurFilter(radius:mask:flags:)((uint64_t)&v54, a2, a7);
      result = outlined retain of GraphicsContext.ResolvedShading(&v77, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of GraphicsContext.ResolvedShading);
      break;
    default:
LABEL_10:
      v49 = a1[8];
      v51 = a1[7];
      v53 = a1[6];
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        v46 = RBDrawingStateInit();
        type metadata accessor for GraphicsContext.Storage();
        swift_allocObject();
        v30 = swift_retain();
        *(_QWORD *)v7 = GraphicsContext.Storage.init(_:state:ownsState:resetBlending:)(v30, v46, 1, 0);
        swift_release();
      }
      *(_QWORD *)&v77 = v10;
      *((_QWORD *)&v77 + 1) = v11;
      *(_QWORD *)&v78 = v12;
      *((_QWORD *)&v78 + 1) = v13;
      *(_QWORD *)&v79 = v15;
      *((_QWORD *)&v79 + 1) = v14;
      *(_QWORD *)&v80 = v53;
      *((_QWORD *)&v80 + 1) = v51;
      v81 = v49;
      LOBYTE(v82) = v19;
      swift_retain();
      GraphicsContext.Storage.Shared.setShading(_:)((uint64_t)&v77);
      swift_release();
      result = (_QWORD *)RBDrawingStateAddVariableBlurFilter();
      break;
  }
  return result;
}

uint64_t withGradient(_:in:colorSpace:do:)(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  void (*v4)(uint64_t *__return_ptr, uint64_t *);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;

  v2 = *(_QWORD *)a1;
  v3 = a2[1];
  if ((*(_BYTE *)(a1 + 8) & 1) != 0)
  {
    v8 = *a2;
    v9 = v3;
    v4 = *(void (**)(uint64_t *__return_ptr, uint64_t *))(*(_QWORD *)v2 + 104);
    swift_retain();
    v4(&v10, &v8);
    outlined consume of EitherGradient(v2, 1);
    v8 = v10;
    LOBYTE(v9) = v11;
    withGradient(_:in:do:)((uint64_t)&v8);
    return swift_bridgeObjectRelease();
  }
  else
  {
    MEMORY[0x24BDAC7A8](a1);
    MEMORY[0x24BDAC7A8](v6);
    type metadata accessor for RBColor(0);
    MEMORY[0x24BDAC7A8](v7);
    return AGTupleWithBuffer();
  }
}

void GraphicsContext.addShaderFilter(_:size:)(id *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;

  if (*a1)
  {
    v2 = v1;
    v3 = *a1;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      v4 = RBDrawingStateInit();
      type metadata accessor for GraphicsContext.Storage();
      swift_allocObject();
      v5 = swift_retain();
      *v2 = GraphicsContext.Storage.init(_:state:ownsState:resetBlending:)(v5, v4, 1, 0);
      swift_release();
    }
    RBDrawingStateAddShaderFilter();

  }
}

void *GraphicsContext.Shading.storage.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;

  v2 = *(void **)v1;
  v3 = *(_QWORD *)(v1 + 8);
  v4 = *(_QWORD *)(v1 + 16);
  v5 = *(_QWORD *)(v1 + 24);
  v6 = *(_QWORD *)(v1 + 32);
  v7 = *(_QWORD *)(v1 + 40);
  v8 = *(_QWORD *)(v1 + 48);
  v9 = *(_QWORD *)(v1 + 56);
  v10 = *(_QWORD *)(v1 + 64);
  v11 = *(_BYTE *)(v1 + 72);
  *(_QWORD *)a1 = *(_QWORD *)v1;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 24) = v5;
  *(_QWORD *)(a1 + 32) = v6;
  *(_QWORD *)(a1 + 40) = v7;
  *(_QWORD *)(a1 + 48) = v8;
  *(_QWORD *)(a1 + 56) = v9;
  *(_QWORD *)(a1 + 64) = v10;
  *(_BYTE *)(a1 + 72) = v11;
  return outlined copy of GraphicsContext.Shading.Storage(v2, v3, v4, v5, v6, v7, v8, v9, v10, v11);
}

__n128 GraphicsContext.Shading.storage.setter(__int128 *a1)
{
  uint64_t v1;
  uint64_t v2;
  char v3;
  __n128 result;
  __n128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;

  v8 = *a1;
  v6 = a1[2];
  v7 = a1[1];
  v5 = (__n128)a1[3];
  v2 = *((_QWORD *)a1 + 8);
  v3 = *((_BYTE *)a1 + 72);
  outlined consume of GraphicsContext.Shading.Storage(*(void **)v1, *(_QWORD *)(v1 + 8), *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), *(_QWORD *)(v1 + 48), *(_QWORD *)(v1 + 56), *(_QWORD *)(v1 + 64), *(_BYTE *)(v1 + 72));
  *(_OWORD *)v1 = v8;
  *(_OWORD *)(v1 + 16) = v7;
  result = v5;
  *(_OWORD *)(v1 + 32) = v6;
  *(__n128 *)(v1 + 48) = v5;
  *(_QWORD *)(v1 + 64) = v2;
  *(_BYTE *)(v1 + 72) = v3;
  return result;
}

uint64_t (*GraphicsContext.Shading.storage.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

double static GraphicsContext.Shading.foreground.getter@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_QWORD *)(a1 + 64) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_BYTE *)(a1 + 72) = 10;
  return result;
}

uint64_t static GraphicsContext.Shading.palette(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;

  if (*(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)a2 = a1;
    *(_OWORD *)(a2 + 8) = 0u;
    *(_OWORD *)(a2 + 24) = 0u;
    *(_OWORD *)(a2 + 40) = 0u;
    *(_OWORD *)(a2 + 56) = 0u;
    *(_BYTE *)(a2 + 72) = 8;
    return swift_bridgeObjectRetain();
  }
  else
  {
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

double static GraphicsContext.Shading.color(_:red:green:blue:opacity:)@<D0>(_BYTE *a1@<X0>, uint64_t a2@<X8>, double a3@<D0>, double a4@<D1>, double a5@<D2>, double a6@<D3>)
{
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  double result;

  v7 = a3;
  v8 = a4;
  v9 = a5;
  v10 = a6;
  if (*a1)
  {
    if (*a1 != 1)
    {
      v11 = a3;
      v12 = specialized Color.Resolved.init(displayP3Red:green:blue:opacity:)(v11, v8, v9);
      Color.Resolved.displayP3Components.getter(v12, v13, v14);
    }
    RBColorFromLinear();
    v7 = v15;
    v10 = v16;
  }
  *(_QWORD *)a2 = LODWORD(v7) | ((unint64_t)LODWORD(v8) << 32);
  *(_QWORD *)(a2 + 8) = LODWORD(v9) | ((unint64_t)LODWORD(v10) << 32);
  result = 0.0;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_QWORD *)(a2 + 64) = 0;
  *(_BYTE *)(a2 + 72) = 2;
  return result;
}

double static GraphicsContext.Shading.color(_:white:opacity:)@<D0>(_BYTE *a1@<X0>, uint64_t a2@<X8>, double a3@<D0>, double a4@<D1>)
{
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  double result;

  v5 = a3;
  v6 = a4;
  if (*a1)
  {
    v7 = a3;
    if (*a1 != 1)
    {
      v10 = specialized Color.Resolved.init(displayP3Red:green:blue:opacity:)(v7, v5, v5);
      Color.Resolved.displayP3Components.getter(v10, v11, v12);
    }
    RBColorFromLinear();
    v5 = v13;
    v6 = v14;
  }
  else
  {
    v8 = a3;
    v9 = a3;
  }
  *(_QWORD *)a2 = LODWORD(v9) | ((unint64_t)LODWORD(v8) << 32);
  *(_QWORD *)(a2 + 8) = LODWORD(v5) | ((unint64_t)LODWORD(v6) << 32);
  result = 0.0;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_QWORD *)(a2 + 64) = 0;
  *(_BYTE *)(a2 + 72) = 2;
  return result;
}

uint64_t static GraphicsContext.Shading.shader(_:bounds:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>, double a4@<D1>, double a5@<D2>, double a6@<D3>)
{
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;

  v6 = *(void **)a1;
  v7 = *(_QWORD *)(a1 + 8);
  v8 = *(_QWORD *)(a1 + 16);
  v9 = *(_QWORD *)(a1 + 24);
  v10 = *(unsigned int *)(a1 + 32);
  *(_QWORD *)a2 = *(_QWORD *)a1;
  *(_QWORD *)(a2 + 8) = v7;
  *(_QWORD *)(a2 + 16) = v8;
  *(_QWORD *)(a2 + 24) = v9;
  *(_QWORD *)(a2 + 32) = v10;
  *(double *)(a2 + 40) = a3;
  *(double *)(a2 + 48) = a4;
  *(double *)(a2 + 56) = a5;
  *(double *)(a2 + 64) = a6;
  *(_BYTE *)(a2 + 72) = 3;
  v11 = v6;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

uint64_t static GraphicsContext.Shading.meshGradient(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(unsigned __int8 *)(a1 + 24);
  v4 = *(_QWORD *)(a1 + 32);
  v5 = *(unsigned __int8 *)(a1 + 40);
  v6 = *(_QWORD *)(a1 + 48);
  v7 = *(unsigned __int8 *)(a1 + 56) | ((unint64_t)*(unsigned __int8 *)(a1 + 57) << 8);
  *(_OWORD *)a2 = *(_OWORD *)a1;
  *(_QWORD *)(a2 + 16) = v2;
  *(_QWORD *)(a2 + 24) = v3;
  *(_QWORD *)(a2 + 32) = v4;
  *(_QWORD *)(a2 + 40) = v5;
  *(_QWORD *)(a2 + 48) = v6;
  *(_QWORD *)(a2 + 56) = v7;
  *(_QWORD *)(a2 + 64) = 0;
  *(_BYTE *)(a2 + 72) = 6;
  swift_bridgeObjectRetain();
  swift_retain();
  return swift_bridgeObjectRetain();
}

double static GraphicsContext.Shading.style<A>(_:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  double v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  double result;
  uint64_t v12;

  v7 = MEMORY[0x24BDAC7A8](a1);
  v9 = (char *)&v12 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, double))(v10 + 16))(v9, v7);
  *(_QWORD *)a4 = AnyShapeStyle.init<A>(_:)((uint64_t)v9, a2, a3);
  result = 0.0;
  *(_OWORD *)(a4 + 8) = 0u;
  *(_OWORD *)(a4 + 24) = 0u;
  *(_OWORD *)(a4 + 40) = 0u;
  *(_OWORD *)(a4 + 56) = 0u;
  *(_BYTE *)(a4 + 72) = 4;
  return result;
}

uint64_t static GraphicsContext.Shading.linearGradient(_:startPoint:endPoint:options:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, double a4@<D0>, double a5@<D1>, double a6@<D2>, double a7@<D3>)
{
  *(_QWORD *)a3 = a1;
  *(_QWORD *)(a3 + 8) = 0;
  *(double *)(a3 + 16) = a4;
  *(double *)(a3 + 24) = a5;
  *(double *)(a3 + 32) = a6;
  *(double *)(a3 + 40) = a7;
  *(_QWORD *)(a3 + 48) = 0;
  *(_QWORD *)(a3 + 56) = 0;
  *(_QWORD *)(a3 + 64) = a2 << 32;
  *(_BYTE *)(a3 + 72) = 5;
  return swift_bridgeObjectRetain();
}

{
  *(_QWORD *)a3 = a1;
  *(_QWORD *)(a3 + 8) = 1;
  *(double *)(a3 + 16) = a4;
  *(double *)(a3 + 24) = a5;
  *(double *)(a3 + 32) = a6;
  *(double *)(a3 + 40) = a7;
  *(_QWORD *)(a3 + 48) = 0;
  *(_QWORD *)(a3 + 56) = 0;
  *(_QWORD *)(a3 + 64) = a2 << 32;
  *(_BYTE *)(a3 + 72) = 5;
  return swift_retain();
}

uint64_t static GraphicsContext.Shading.radialGradient(_:center:startRadius:endRadius:options:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, double a4@<D0>, double a5@<D1>, double a6@<D2>, double a7@<D3>)
{
  *(_QWORD *)a3 = a1;
  *(_QWORD *)(a3 + 8) = 0;
  *(double *)(a3 + 16) = a4;
  *(double *)(a3 + 24) = a5;
  *(double *)(a3 + 32) = a6;
  *(double *)(a3 + 40) = a7;
  *(_QWORD *)(a3 + 48) = 0;
  *(_QWORD *)(a3 + 56) = 0;
  *(_QWORD *)(a3 + 64) = (a2 << 32) | 1;
  *(_BYTE *)(a3 + 72) = 5;
  return swift_bridgeObjectRetain();
}

{
  *(_QWORD *)a3 = a1;
  *(_QWORD *)(a3 + 8) = 1;
  *(double *)(a3 + 16) = a4;
  *(double *)(a3 + 24) = a5;
  *(double *)(a3 + 32) = a6;
  *(double *)(a3 + 40) = a7;
  *(_QWORD *)(a3 + 48) = 0;
  *(_QWORD *)(a3 + 56) = 0;
  *(_QWORD *)(a3 + 64) = (a2 << 32) | 1;
  *(_BYTE *)(a3 + 72) = 5;
  return swift_retain();
}

uint64_t static GraphicsContext.Shading.conicGradient(_:center:angle:options:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, double a4@<D0>, double a5@<D1>, double a6@<D2>)
{
  *(_QWORD *)a3 = a1;
  *(_QWORD *)(a3 + 8) = 0;
  *(double *)(a3 + 16) = a4;
  *(double *)(a3 + 24) = a5;
  *(double *)(a3 + 32) = a6;
  *(_QWORD *)(a3 + 40) = 0;
  *(_QWORD *)(a3 + 48) = 0;
  *(_QWORD *)(a3 + 56) = 0;
  *(_QWORD *)(a3 + 64) = (a2 << 32) | 3;
  *(_BYTE *)(a3 + 72) = 5;
  return swift_bridgeObjectRetain();
}

{
  *(_QWORD *)a3 = a1;
  *(_QWORD *)(a3 + 8) = 1;
  *(double *)(a3 + 16) = a4;
  *(double *)(a3 + 24) = a5;
  *(double *)(a3 + 32) = a6;
  *(_QWORD *)(a3 + 40) = 0;
  *(_QWORD *)(a3 + 48) = 0;
  *(_QWORD *)(a3 + 56) = 0;
  *(_QWORD *)(a3 + 64) = (a2 << 32) | 3;
  *(_BYTE *)(a3 + 72) = 5;
  return swift_retain();
}

uint64_t static GraphicsContext.Shading.angularGradient(_:center:startAngle:endAngle:options:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, double a4@<D0>, double a5@<D1>, double a6@<D2>, double a7@<D3>)
{
  *(_QWORD *)a3 = a1;
  *(_QWORD *)(a3 + 8) = 0;
  *(double *)(a3 + 16) = a4;
  *(double *)(a3 + 24) = a5;
  *(double *)(a3 + 32) = a6;
  *(double *)(a3 + 40) = a7;
  *(_QWORD *)(a3 + 48) = 0;
  *(_QWORD *)(a3 + 56) = 0;
  *(_QWORD *)(a3 + 64) = (a2 << 32) | 4;
  *(_BYTE *)(a3 + 72) = 5;
  return swift_bridgeObjectRetain();
}

{
  *(_QWORD *)a3 = a1;
  *(_QWORD *)(a3 + 8) = 1;
  *(double *)(a3 + 16) = a4;
  *(double *)(a3 + 24) = a5;
  *(double *)(a3 + 32) = a6;
  *(double *)(a3 + 40) = a7;
  *(_QWORD *)(a3 + 48) = 0;
  *(_QWORD *)(a3 + 56) = 0;
  *(_QWORD *)(a3 + 64) = (a2 << 32) | 4;
  *(_BYTE *)(a3 + 72) = 5;
  return swift_retain();
}

uint64_t static GraphicsContext.Shading.tiledImage(_:origin:sourceRect:scale:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>, double a4@<D1>, double a5@<D2>, double a6@<D3>, double a7@<D4>, double a8@<D5>, double a9@<D6>)
{
  *(_QWORD *)a2 = a1;
  *(double *)(a2 + 8) = a3;
  *(double *)(a2 + 16) = a4;
  *(double *)(a2 + 24) = a5;
  *(double *)(a2 + 32) = a6;
  *(double *)(a2 + 40) = a7;
  *(double *)(a2 + 48) = a8;
  *(double *)(a2 + 56) = a9;
  *(_QWORD *)(a2 + 64) = 0;
  *(_BYTE *)(a2 + 72) = 7;
  return swift_retain();
}

uint64_t static GraphicsContext.GradientOptions.repeat.getter()
{
  return 1;
}

uint64_t static GraphicsContext.GradientOptions.mirror.getter()
{
  return 2;
}

uint64_t static GraphicsContext.GradientOptions.linearColor.getter()
{
  return 4;
}

double GraphicsContext.resolve(_:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  char v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  double result;
  _QWORD v9[20];
  _OWORD v10[4];
  uint64_t v11;
  char v12;
  _BYTE v13[160];

  v3 = *(_QWORD *)(a1 + 64);
  v4 = *(_BYTE *)(a1 + 72);
  v5 = *(_OWORD *)(a1 + 16);
  v10[0] = *(_OWORD *)a1;
  v10[1] = v5;
  v6 = *(_OWORD *)(a1 + 48);
  v10[2] = *(_OWORD *)(a1 + 32);
  v10[3] = v6;
  v11 = v3;
  v12 = v4;
  GraphicsContext.Shading.resolve(in:levels:)();
  outlined init with take of GraphicsContext.ResolvedShading?((uint64_t)v13, (uint64_t)v10, &lazy cache variable for type metadata for GraphicsContext.ResolvedShading?);
  v7 = swift_allocObject();
  outlined init with take of GraphicsContext.ResolvedShading?((uint64_t)v10, (uint64_t)v13, &lazy cache variable for type metadata for GraphicsContext.ResolvedShading?);
  if (_s7SwiftUI15GraphicsContextV15ResolvedShadingOSgWOg((uint64_t)v13) == 1)
  {
    v9[0] = 0;
    v9[1] = 0;
    _s7SwiftUI15GraphicsContextV15ResolvedShadingOWOi0_((uint64_t)v9);
  }
  else
  {
    outlined init with take of GraphicsContext.ResolvedShading?((uint64_t)v10, (uint64_t)v9, &lazy cache variable for type metadata for GraphicsContext.ResolvedShading?);
  }
  outlined init with take of GraphicsContext.ResolvedShading((uint64_t)v9, v7 + 16);
  *(_QWORD *)a2 = v7;
  result = 0.0;
  *(_OWORD *)(a2 + 8) = 0u;
  *(_OWORD *)(a2 + 24) = 0u;
  *(_OWORD *)(a2 + 40) = 0u;
  *(_OWORD *)(a2 + 56) = 0u;
  *(_BYTE *)(a2 + 72) = 9;
  return result;
}

void GraphicsContext.Shading.resolve(in:levels:)()
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  type metadata accessor for [(_:)](0, (unint64_t *)&lazy cache variable for type metadata for Text.Style?, type metadata accessor for Text.Style, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v1);
  v2 = type metadata accessor for ImageResolutionContext();
  MEMORY[0x24BDAC7A8](v2);
  MEMORY[0x24BDAC7A8](v3);
  __asm { BR              X10 }
}

uint64_t sub_234DD0490()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v1[50] = v1[22];
  v1[51] = v0;
  _s7SwiftUI15GraphicsContextV15ResolvedShadingOWOi_((uint64_t)(v1 + 50));
  outlined init with take of GraphicsContext.ResolvedShading((uint64_t)(v1 + 50), (uint64_t)(v1 + 74));
  _ViewInputs.base.modify(v1 + 74, v2);
  return outlined init with take of GraphicsContext.ResolvedShading?((uint64_t)(v1 + 74), v1[21], &lazy cache variable for type metadata for GraphicsContext.ResolvedShading?);
}

void *GraphicsContext.draw(_:with:style:)(uint64_t a1, unint64_t *a2, uint64_t *a3, uint64_t a4)
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  void *v19;
  uint64_t v20;
  char v21;
  void *v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  void *result;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  unint64_t *v48;
  uint64_t *v49;
  void *v50;
  unint64_t v51;
  uint64_t v52;
  void *v53;
  id v54;
  double v55;
  char v56;
  id v57;
  double v58;
  char v59;
  id v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char v65;
  uint64_t v66;
  unsigned __int8 v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  void *v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  void (*v82)(uint64_t *);
  char v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  char v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  void *v107;
  uint64_t v108;
  char v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  _BYTE v113[88];
  unint64_t v114;
  uint64_t v115;
  unint64_t v116;
  void *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  char v124;
  int v125;
  uint64_t v126;
  unsigned __int8 v127;
  uint64_t v128;
  unint64_t v129;
  uint64_t v130;
  unint64_t v131;
  void *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  char v139;
  int v140;
  uint64_t v141;
  unsigned __int8 v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  char v149;
  _OWORD v150[2];
  char v151;

  v6 = *a2;
  v7 = a2[1];
  v8 = a2[2];
  v9 = a2[3];
  v11 = a2[4];
  v10 = a2[5];
  v12 = a2[6];
  v13 = a2[7];
  v14 = a2[8];
  v15 = *((_BYTE *)a2 + 72);
  v16 = *a3;
  v17 = a3[1];
  v18 = a3[2];
  v19 = (void *)a3[3];
  v20 = a3[4];
  v21 = *((_BYTE *)a3 + 40);
  switch(v15)
  {
    case 0:
      v22 = *(void **)(*(_QWORD *)(a4 + 16) + 32);
      if ((a3[5] & 1) != 0)
      {
        v129 = *a3;
        v130 = v17;
        v131 = v18;
        v132 = v19;
        v133 = v20;
        v23 = v22;
        RBShape.setStrokedPath(_:style:)(a1, (double *)&v129);
      }
      else
      {
        v58 = *(double *)(a4 + 40);
        v59 = v16 & 1;
        v60 = v22;
        RBShape.setPath(_:style:shapeDistance:)(a1, v59, v58);
      }

      v61 = RBDrawingStateInit();
      RBDrawingStateClipShape();
      GraphicsContext.beginLayerWithBackdrop(color:in:)(*(float *)&v6, *((float *)&v6 + 1), *(float *)&v7, *((float *)&v7 + 1), v61, a4);
      RBDrawingStateDrawLayer();
      return (void *)RBDrawingStateDestroy();
    case 4:
      v93 = a3[3];
      v94 = a1;
      v89 = *((_BYTE *)a3 + 40);
      v90 = a3[1];
      v91 = *a3;
      v92 = a3[2];
      v24 = *(_QWORD *)(a4 + 16);
      v25 = *(_QWORD *)(v24 + 48);
      v85 = a3[4];
      v80 = *(_QWORD *)(v24 + 56);
      memset(v150, 0, sizeof(v150));
      v151 = 1;
      v113[34] = 0;
      v104 = 0;
      v105 = 0;
      v106 = 1;
      LOBYTE(v107) = 1;
      v108 = 0;
      v109 = 5;
      v110 = v25;
      v111 = v80;
      v112 = 0;
      v26 = v8;
      v27 = v10;
      v28 = v14;
      outlined init with take of CGRect?((uint64_t)v150, (uint64_t)v113);
      v113[33] = 0;
      v82 = *(void (**)(uint64_t *))(*(_QWORD *)v6 + 80);
      v96 = v28;
      v98 = v7;
      v87 = v9;
      v88 = v26;
      v100 = v12;
      v86 = v13;
      outlined copy of GraphicsContext.Shading.Storage((void *)v6, v7, v26, v9, v11, v27, v12, v13, v28, 4);
      swift_retain();
      swift_retain();
      v82(&v104);
      v29 = v108;
      v83 = v109;
      v84 = v108;
      if (v109 == 1)
        swift_bridgeObjectRetain();
      else
        v29 = MEMORY[0x24BEE4AF8];
      v114 = v29;
      LOBYTE(v144) = 0;
      _ShapeStyle_Pack.subscript.getter((unsigned __int8 *)&v144, 0, (uint64_t)&v129);
      swift_bridgeObjectRelease();
      v62 = v129;
      v79 = v131;
      v81 = v130;
      v77 = v133;
      v78 = v132;
      v75 = v135;
      v76 = v134;
      v74 = v136;
      v63 = v137;
      v64 = v138;
      v65 = v139;
      v66 = v141;
      v67 = v142;
      v114 = v129;
      v115 = v130;
      v116 = v131;
      v117 = v132;
      v118 = v133;
      v119 = v134;
      v120 = v135;
      v121 = v136;
      v122 = v137;
      v123 = v138;
      v124 = v139;
      v125 = v140;
      v126 = v141;
      v127 = v142;
      v128 = v143;
      v144 = v91;
      v145 = v90;
      v146 = v92;
      v147 = v93;
      v148 = v85;
      v149 = v89;
      _ShapeStyle_Pack.Style.draw(_:style:in:bounds:)(v94, &v144, a4, v150);
      outlined consume of GraphicsContext.Shading.Storage((void *)v6, v98, v88, v87, v11, v27, v100, v86, v96, 4);
      outlined consume of _ShapeStyle_Pack.Fill(v62, v81, v79, v78, v77, v76, v75, v74, v63, v64, v65);
      outlined consume of GraphicsBlendMode?(v66, v67);
      swift_bridgeObjectRelease();
      outlined consume of _ShapeStyle_Shape.Result(v84, v83);
      swift_release();
      swift_release();
      return (void *)swift_release();
    case 8:
      v95 = a1;
      if (!*(_QWORD *)(v6 + 16))
      {
        __break(1u);
        JUMPOUT(0x234DD1EACLL);
      }
      v30 = (void *)a3[3];
      v31 = *(void **)(v6 + 32);
      v32 = *(_QWORD *)(v6 + 40);
      v33 = *(_QWORD *)(v6 + 48);
      v34 = *(_QWORD *)(v6 + 56);
      v35 = *(_QWORD *)(v6 + 64);
      v36 = *(_QWORD *)(v6 + 72);
      v37 = *(_QWORD *)(v6 + 80);
      v38 = *(_QWORD *)(v6 + 88);
      v39 = *(_QWORD *)(v6 + 96);
      v40 = *(_BYTE *)(v6 + 104);
      v129 = (unint64_t)v31;
      v130 = v32;
      v131 = v33;
      v132 = (void *)v34;
      v133 = v35;
      v134 = v36;
      v135 = v37;
      v136 = v38;
      v137 = v39;
      LOBYTE(v138) = v40;
      v114 = v16;
      v115 = v17;
      v116 = v18;
      v117 = v30;
      v118 = v20;
      LOBYTE(v119) = v21;
      outlined copy of GraphicsContext.Shading.Storage(v31, v32, v33, v34, v35, v36, v37, v38, v39, v40);
      GraphicsContext.draw(_:with:style:)(v95, &v129, &v114, a4);
      return outlined consume of GraphicsContext.Shading.Storage(v31, v32, v33, v34, v35, v36, v37, v38, v39, v40);
    case 9:
      v42 = a3[4];
      v43 = v6 + 16;
      v44 = a3[2];
      v45 = *a3;
      v46 = a3[1];
      v47 = *((_BYTE *)a3 + 40);
      outlined init with take of GraphicsContext.ResolvedShading(v43, (uint64_t)&v129);
      outlined init with take of GraphicsContext.ResolvedShading((uint64_t)&v129, (uint64_t)&v114);
      v104 = v45;
      v105 = v46;
      v106 = v44;
      v107 = v19;
      v108 = v42;
      v109 = v47;
      outlined retain of GraphicsContext.ResolvedShading(&v129, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of GraphicsContext.ResolvedShading);
      v48 = &v114;
      v49 = &v104;
      goto LABEL_19;
    case 10:
      if (v7 | v6 | v8 | v9 | v11 | v10 | v12 | v13 | v14)
        goto LABEL_10;
      v68 = a3[3];
      v69 = a3[2];
      v70 = *a3;
      v71 = a3[1];
      v72 = *((_BYTE *)a3 + 40);
      v73 = a3[4];
      GraphicsContext.Storage.Shared.resolvedForeground.getter((uint64_t)&v114);
      outlined init with take of GraphicsContext.ResolvedShading((uint64_t)&v114, (uint64_t)&v129);
      outlined init with take of GraphicsContext.ResolvedShading((uint64_t)&v129, (uint64_t)&v104);
      v144 = v70;
      v145 = v71;
      v146 = v69;
      v147 = v68;
      v148 = v73;
      v149 = v72;
      v48 = (unint64_t *)&v104;
      v49 = &v144;
LABEL_19:
      GraphicsContext.draw(_:with:style:)(a1, v48, v49, a4);
      result = outlined retain of GraphicsContext.ResolvedShading(&v129, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of GraphicsContext.ResolvedShading);
      break;
    default:
LABEL_10:
      v97 = a2[8];
      v99 = a2[1];
      v101 = a2[5];
      v103 = a2[4];
      v50 = (void *)a2[3];
      v51 = a2[2];
      v52 = a1;
      v53 = *(void **)(*(_QWORD *)(a4 + 16) + 32);
      if ((a3[5] & 1) != 0)
      {
        v114 = *a3;
        v115 = v17;
        v116 = v18;
        v117 = v19;
        v118 = v20;
        v54 = v53;
        RBShape.setStrokedPath(_:style:)(v52, (double *)&v114);
      }
      else
      {
        v55 = *(double *)(a4 + 40);
        v56 = v16 & 1;
        v57 = v53;
        RBShape.setPath(_:style:shapeDistance:)(v52, v56, v55);
      }

      v129 = v6;
      v130 = v99;
      v131 = v51;
      v132 = v50;
      v133 = v103;
      v134 = v101;
      v135 = v12;
      v136 = v13;
      v137 = v97;
      LOBYTE(v138) = v15;
      GraphicsContext.Storage.Shared.setShading(_:)((uint64_t)&v129);
      result = (void *)RBDrawingStateDrawShape();
      break;
  }
  return result;
}

uint64_t GraphicsContext.stroke(_:with:style:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  __int128 v12;
  __int128 v13;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  _OWORD v20[4];
  uint64_t v21;
  char v22;

  v8 = *(_QWORD *)(a3 + 16);
  v7 = *(_QWORD *)(a3 + 24);
  v9 = *(_QWORD *)(a3 + 32);
  v10 = *(_QWORD *)(a2 + 64);
  v11 = *(_BYTE *)(a2 + 72);
  v12 = *(_OWORD *)(a2 + 16);
  v20[0] = *(_OWORD *)a2;
  v20[1] = v12;
  v13 = *(_OWORD *)(a2 + 48);
  v20[2] = *(_OWORD *)(a2 + 32);
  v20[3] = v13;
  v21 = v10;
  v22 = v11;
  v15 = *(_OWORD *)a3;
  v16 = v8;
  v17 = v7;
  v18 = v9;
  v19 = 1;
  swift_bridgeObjectRetain();
  GraphicsContext.draw(_:with:style:)(a1, (unint64_t *)v20, (uint64_t *)&v15, a4);
  return outlined release of StrokeStyle(a3);
}

void GraphicsContext.Storage.Shared.setShading(_:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  type metadata accessor for [(_:)](0, (unint64_t *)&lazy cache variable for type metadata for Text.Style?, type metadata accessor for Text.Style, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v2);
  v3 = type metadata accessor for ImageResolutionContext();
  MEMORY[0x24BDAC7A8](v3);
  MEMORY[0x24BDAC7A8](v4);
  __asm { BR              X10 }
}

{
  char *v1;
  _BYTE v2[160];
  _QWORD v3[21];

  v3[20] = *MEMORY[0x24BDAC8D0];
  outlined init with take of GraphicsContext.ResolvedShading(a1, (uint64_t)v2);
  outlined init with take of GraphicsContext.ResolvedShading((uint64_t)v2, (uint64_t)v3);
  v1 = (char *)&loc_234DD5460
     + *((int *)qword_234DD5890 + _s7SwiftUI15GraphicsContextV15ResolvedShadingOWOg((uint64_t)v3));
  __asm { BR              X10 }
}

uint64_t sub_234DD2078(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  float (*v16)(uint64_t);
  float v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  double v24;
  double v25;
  double v26;
  double v27;
  uint64_t result;

  v12 = *(void **)(v8 + 264);
  if (!v12 || v12 != v9)
  {
    v13 = *(void **)(v8 + 40);
    v14 = *(_QWORD *)(v8 + 56);
    *(_QWORD *)(v7 + 216) = *(_QWORD *)(v8 + 48);
    *(_QWORD *)(v7 + 224) = v14;
    v15 = v11;
    v16 = *(float (**)(uint64_t))(*(_QWORD *)v9 + 104);
    outlined copy of GraphicsContext.Shading.Storage(v9, a2, a3, a4, a5, a6, v10, v15, v6, 1);
    swift_retain();
    swift_retain();
    v17 = v16(v7 + 216);
    v19 = v18;
    v21 = v20;
    v23 = v22;
    swift_release();
    swift_release();
    if (*(_DWORD *)(v8 + 64) != 2)
    {
      RBColorFromLinear();
      v17 = *(float *)&v24;
      v19 = LODWORD(v25);
      v21 = LODWORD(v26);
      v23 = LODWORD(v27);
    }
    *(float *)&v24 = v17;
    LODWORD(v25) = v19;
    LODWORD(v26) = v21;
    LODWORD(v27) = v23;
    objc_msgSend(v13, sel_setColor_, v24, v25, v26, v27);
    *(_QWORD *)(v8 + 264) = v9;
    return swift_release();
  }
  return result;
}

void sub_234DD288C()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t GraphicsContext.ResolvedImage.size.getter()
{
  uint64_t v0;
  uint64_t result;

  if (*(double *)(v0 + 16) != 0.0)
    return ((uint64_t (*)(double, double))((char *)sub_234DD2920
                                                   + 4 * byte_2352A2302[*(unsigned __int8 *)(v0 + 40)]))(*(double *)(v0 + 24), *(double *)(v0 + 32));
  return result;
}

double sub_234DD2920(double a1, double a2, double a3, double a4)
{
  return 1.0 / a3 * a4;
}

double GraphicsContext.ResolvedImage.baseline.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 104);
}

void *GraphicsContext.ResolvedImage.shading.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 v11;

  v2 = *(void **)(v1 + 112);
  v3 = *(_QWORD *)(v1 + 120);
  v4 = *(_QWORD *)(v1 + 128);
  v5 = *(_QWORD *)(v1 + 136);
  v6 = *(_QWORD *)(v1 + 144);
  v7 = *(_QWORD *)(v1 + 152);
  v8 = *(_QWORD *)(v1 + 160);
  v9 = *(_QWORD *)(v1 + 168);
  v10 = *(_QWORD *)(v1 + 176);
  v11 = *(_BYTE *)(v1 + 184);
  *(_QWORD *)a1 = v2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 24) = v5;
  *(_QWORD *)(a1 + 32) = v6;
  *(_QWORD *)(a1 + 40) = v7;
  *(_QWORD *)(a1 + 48) = v8;
  *(_QWORD *)(a1 + 56) = v9;
  *(_QWORD *)(a1 + 64) = v10;
  *(_BYTE *)(a1 + 72) = v11;
  return outlined copy of GraphicsContext.Shading?(v2, v3, v4, v5, v6, v7, v8, v9, v10, v11);
}

__n128 GraphicsContext.ResolvedImage.shading.setter(__int128 *a1)
{
  uint64_t v1;
  uint64_t v2;
  char v3;
  __n128 result;
  __n128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;

  v8 = *a1;
  v6 = a1[2];
  v7 = a1[1];
  v5 = (__n128)a1[3];
  v2 = *((_QWORD *)a1 + 8);
  v3 = *((_BYTE *)a1 + 72);
  outlined consume of GraphicsContext.Shading?(*(void **)(v1 + 112), *(_QWORD *)(v1 + 120), *(_QWORD *)(v1 + 128), *(_QWORD *)(v1 + 136), *(_QWORD *)(v1 + 144), *(_QWORD *)(v1 + 152), *(_QWORD *)(v1 + 160), *(_QWORD *)(v1 + 168), *(_QWORD *)(v1 + 176), *(_BYTE *)(v1 + 184));
  *(_OWORD *)(v1 + 112) = v8;
  *(_OWORD *)(v1 + 128) = v7;
  result = v5;
  *(_OWORD *)(v1 + 144) = v6;
  *(__n128 *)(v1 + 160) = v5;
  *(_QWORD *)(v1 + 176) = v2;
  *(_BYTE *)(v1 + 184) = v3;
  return result;
}

uint64_t (*GraphicsContext.ResolvedImage.shading.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

double GraphicsContext.resolve(_:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  int *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(char *, uint64_t, uint64_t, uint64_t);
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  char v24;
  double v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  char v29;
  char v30;
  double v31;
  char v32;
  char v33;
  char v34;
  char v35;
  __int128 v36;
  double result;
  uint64_t v38;
  uint64_t v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  char v43;
  id v44;
  char v45;
  double v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  __int128 v50;
  char v51;
  __int128 v52;
  __int128 v53;
  char v54;
  char v55;
  char v56;
  char v57;
  uint64_t v58;

  *(_QWORD *)&v42 = a1;
  type metadata accessor for [(_:)](0, (unint64_t *)&lazy cache variable for type metadata for Text.Style?, type metadata accessor for Text.Style, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v38 - v6;
  v8 = (int *)type metadata accessor for ImageResolutionContext();
  MEMORY[0x24BDAC7A8](v8);
  v10 = (uint64_t *)((char *)&v38 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x24BDAC7A8](v11);
  v39 = (uint64_t)&v38 - v12;
  v13 = *(_QWORD *)(a2 + 16);
  v14 = *(_QWORD *)(v13 + 48);
  v15 = *(_QWORD *)(v13 + 56);
  v16 = type metadata accessor for Text.Style(0);
  v17 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56);
  v17(v7, 1, 1, v16);
  v18 = *MEMORY[0x24BE096C0];
  v10[2] = 0;
  v19 = (uint64_t)v10 + v8[6];
  v17((char *)v19, 1, 1, v16);
  v20 = v8[7];
  *(_DWORD *)((char *)v10 + v20) = v18;
  *((_BYTE *)v10 + v8[8]) = 8;
  *((_BYTE *)v10 + v8[9]) = 3;
  *((_BYTE *)v10 + v8[10]) = 1;
  *v10 = v14;
  v10[1] = v15;
  swift_retain();
  swift_retain();
  outlined assign with take of Text.Style?((uint64_t)v7, v19);
  *(_DWORD *)((char *)v10 + v20) = v18;
  v21 = v39;
  outlined init with take of ImageResolutionContext((uint64_t)v10, v39);
  v22 = v8[10];
  if ((*(_BYTE *)(v21 + v22) & 1) != 0)
    *(_BYTE *)(v21 + v22) &= ~1u;
  (*(void (**)(id *__return_ptr, uint64_t))(*(_QWORD *)v42 + 80))(&v44, v21);
  v23 = v44;
  v24 = v45;
  v25 = v46;
  v26 = v47;
  v27 = v48;
  v28 = v49;
  v42 = v50;
  v29 = v51;
  v41 = v52;
  v40 = v53;
  v30 = v54;
  v31 = 0.0;
  v32 = v55;
  v33 = v56;
  v34 = v57;
  if (v46 != 0.0)
    __asm { BR              X9 }
  if (v58)
    v31 = *(double *)(v58 + 16);
  outlined copy of GraphicsImage.Contents?(v44, v45);
  outlined release of Image.Resolved((uint64_t)&v44);
  v43 = v29;
  outlined destroy of TypesettingConfiguration(v21, (uint64_t (*)(_QWORD))type metadata accessor for ImageResolutionContext);
  v35 = -1;
  if ((v29 & 1) == 0)
  {
    outlined consume of GraphicsContext.Shading?(0, 0, 0, 0, 0, 0, 0, 0, 0, 0xFFu);
    v35 = 10;
  }
  *(_QWORD *)a3 = v23;
  *(_BYTE *)(a3 + 8) = v24;
  *(double *)(a3 + 16) = v25;
  *(_QWORD *)(a3 + 24) = v26;
  *(_QWORD *)(a3 + 32) = v27;
  *(_BYTE *)(a3 + 40) = v28;
  *(_OWORD *)(a3 + 44) = v42;
  *(_BYTE *)(a3 + 60) = v29;
  v36 = v40;
  *(_OWORD *)(a3 + 64) = v41;
  *(_OWORD *)(a3 + 80) = v36;
  *(_BYTE *)(a3 + 96) = v30;
  *(_BYTE *)(a3 + 97) = v32;
  *(_BYTE *)(a3 + 98) = v33;
  *(_BYTE *)(a3 + 99) = v34;
  *(double *)(a3 + 104) = 0.0 - v31;
  result = 0.0;
  *(_OWORD *)(a3 + 112) = 0u;
  *(_OWORD *)(a3 + 128) = 0u;
  *(_OWORD *)(a3 + 144) = 0u;
  *(_OWORD *)(a3 + 160) = 0u;
  *(_QWORD *)(a3 + 176) = 0;
  *(_BYTE *)(a3 + 184) = v35;
  return result;
}

void sub_234DD2DAC()
{
  uint64_t v0;

  if (!*(_QWORD *)(v0 - 176))
    JUMPOUT(0x234DD2C94);
  JUMPOUT(0x234DD2C90);
}

void GraphicsContext.draw(_:in:style:)(uint64_t a1, __int16 a2, uint64_t a3, CGFloat a4, CGFloat a5, double a6, double a7)
{
  uint64_t v11;
  char v12;
  char v13;
  char v14;
  char v15;
  __int16 v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned __int8 v26;
  char v27;
  __int128 v28;
  char v29;
  id v30;
  _QWORD v33[9];
  unsigned __int8 v34;
  id v35;
  char v36;
  __int128 v37;
  uint64_t v38;
  char v39;
  __int128 v40;
  char v41;
  __int128 v42;
  __int128 v43;
  char v44;
  char v45;
  __int16 v46;

  v11 = *(_QWORD *)(a1 + 32);
  v12 = *(_BYTE *)(a1 + 40);
  v13 = *(_BYTE *)(a1 + 60);
  v14 = *(_BYTE *)(a1 + 96);
  v15 = *(_BYTE *)(a1 + 97);
  v16 = *(_WORD *)(a1 + 98);
  v17 = *(void **)(a1 + 112);
  v18 = *(_QWORD *)(a1 + 120);
  v19 = *(_QWORD *)(a1 + 128);
  v20 = *(_QWORD *)(a1 + 136);
  v21 = *(_QWORD *)(a1 + 144);
  v22 = *(_QWORD *)(a1 + 152);
  v24 = *(_QWORD *)(a1 + 160);
  v23 = *(_QWORD *)(a1 + 168);
  v25 = *(_QWORD *)(a1 + 176);
  v26 = *(_BYTE *)(a1 + 184);
  v27 = *(_BYTE *)(a1 + 8);
  v35 = *(id *)a1;
  v30 = v35;
  v36 = v27;
  v29 = v27;
  v37 = *(_OWORD *)(a1 + 16);
  v38 = v11;
  v39 = v12;
  v40 = *(_OWORD *)(a1 + 44);
  v41 = v13;
  v28 = *(_OWORD *)(a1 + 80);
  v42 = *(_OWORD *)(a1 + 64);
  v43 = v28;
  v44 = v14;
  v45 = v15;
  v46 = v16;
  v33[0] = v17;
  v33[1] = v18;
  v33[2] = v19;
  v33[3] = v20;
  v33[4] = v21;
  v33[5] = v22;
  v33[6] = v24;
  v33[7] = v23;
  v33[8] = v25;
  v34 = v26;
  outlined copy of GraphicsImage.Contents?(v35, v27);
  outlined copy of GraphicsContext.Shading?(v17, v18, v19, v20, v21, v22, v24, v23, v25, v26);
  GraphicsContext.draw(_:in:style:shading:)((uint64_t)&v35, a2 & 0x101, (uint64_t)v33, a3, a4, a5, a6, a7);
  outlined consume of GraphicsContext.Shading?(v17, v18, v19, v20, v21, v22, v24, v23, v25, v26);
  outlined consume of GraphicsImage.Contents?(v30, v29);
}

void GraphicsContext.draw(_:at:anchor:)(uint64_t a1, uint64_t a2, double a3, double a4, double a5, double a6)
{
  void *v6;
  char v7;
  double v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  char v13;
  __int128 v14;
  __int128 v15;
  char v16;
  char v17;
  char v18;
  char v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned __int8 v29;
  CGFloat v30;
  CGFloat v31;
  char v32;
  unsigned __int8 v33;
  void *v35;
  char v36;
  _QWORD v37[9];
  unsigned __int8 v38;
  void *v39;
  char v40;
  double v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  __int128 v45;
  char v46;
  __int128 v47;
  __int128 v48;
  char v49;
  char v50;
  char v51;
  char v52;

  v6 = *(void **)a1;
  v7 = *(_BYTE *)(a1 + 8);
  v8 = *(double *)(a1 + 16);
  v9 = *(_QWORD *)(a1 + 24);
  v10 = *(_QWORD *)(a1 + 32);
  v11 = *(unsigned __int8 *)(a1 + 40);
  v12 = *(_OWORD *)(a1 + 44);
  v13 = *(_BYTE *)(a1 + 60);
  v14 = *(_OWORD *)(a1 + 64);
  v15 = *(_OWORD *)(a1 + 80);
  v16 = *(_BYTE *)(a1 + 96);
  v17 = *(_BYTE *)(a1 + 97);
  v18 = *(_BYTE *)(a1 + 98);
  v19 = *(_BYTE *)(a1 + 99);
  v20 = *(void **)(a1 + 112);
  v21 = *(_QWORD *)(a1 + 120);
  v22 = *(_QWORD *)(a1 + 128);
  v23 = *(_QWORD *)(a1 + 136);
  v24 = *(_QWORD *)(a1 + 144);
  v25 = *(_QWORD *)(a1 + 152);
  v26 = *(_QWORD *)(a1 + 160);
  v27 = *(_QWORD *)(a1 + 168);
  v28 = *(_QWORD *)(a1 + 176);
  v29 = *(_BYTE *)(a1 + 184);
  if (v8 != 0.0)
    __asm { BR              X15 }
  v39 = *(void **)a1;
  v30 = a3 - 0.0 * a5;
  v40 = v7;
  v31 = a4 - 0.0 * a6;
  v41 = v8;
  v42 = v9;
  v43 = v10;
  v44 = v11;
  v45 = v12;
  v46 = v13;
  v47 = v14;
  v48 = v15;
  v49 = v16;
  v50 = v17;
  v51 = v18;
  v52 = v19;
  v37[0] = v20;
  v37[1] = v21;
  v37[2] = v22;
  v37[3] = v23;
  v37[4] = v24;
  v37[5] = v25;
  v37[6] = v26;
  v37[7] = v27;
  v37[8] = v28;
  v38 = v29;
  v36 = v7;
  v32 = v7;
  v35 = v6;
  v33 = v29;
  outlined copy of GraphicsImage.Contents?(v6, v32);
  outlined copy of GraphicsContext.Shading?(v20, v21, v22, v23, v24, v25, v26, v27, v28, v33);
  GraphicsContext.draw(_:in:style:shading:)((uint64_t)&v39, 256, (uint64_t)v37, a2, v30, v31, 0.0, 0.0);
  outlined consume of GraphicsContext.Shading?(v20, v21, v22, v23, v24, v25, v26, v27, v28, v33);
  outlined consume of GraphicsImage.Contents?(v35, v36);
}

uint64_t GraphicsContext.draw(_:in:style:)(uint64_t a1, __int16 a2, uint64_t a3, CGFloat a4, CGFloat a5, double a6, double a7)
{
  void *v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned __int8 v20;
  char v22;
  id v23;
  _QWORD v26[9];
  unsigned __int8 v27;
  id v28;
  char v29;
  __int128 v30;
  uint64_t v31;
  char v32;
  __int128 v33;
  char v34;
  __int128 v35;
  __int128 v36;
  char v37;
  char v38;
  __int16 v39;
  id v40;
  char v41;
  __int128 v42;
  uint64_t v43;
  char v44;
  __int128 v45;
  char v46;
  __int128 v47;
  __int128 v48;
  char v49;
  char v50;
  __int16 v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unsigned __int8 v61;

  GraphicsContext.resolve(_:)(a1, a3, (uint64_t)&v40);
  v11 = v52;
  v12 = v53;
  v13 = v54;
  v14 = v55;
  v15 = v56;
  v16 = v57;
  v18 = v58;
  v17 = v59;
  v19 = v60;
  v20 = v61;
  v28 = v40;
  v23 = v40;
  v29 = v41;
  v22 = v41;
  v30 = v42;
  v31 = v43;
  v32 = v44;
  v33 = v45;
  v34 = v46;
  v35 = v47;
  v36 = v48;
  v37 = v49;
  v38 = v50;
  v39 = v51;
  v26[0] = v52;
  v26[1] = v53;
  v26[2] = v54;
  v26[3] = v55;
  v26[4] = v56;
  v26[5] = v57;
  v26[6] = v58;
  v26[7] = v59;
  v26[8] = v60;
  v27 = v61;
  outlined copy of GraphicsImage.Contents?(v40, v41);
  outlined copy of GraphicsContext.Shading?(v11, v12, v13, v14, v15, v16, v18, v17, v19, v20);
  GraphicsContext.draw(_:in:style:shading:)((uint64_t)&v28, a2 & 0x101, (uint64_t)v26, a3, a4, a5, a6, a7);
  outlined consume of GraphicsContext.Shading?(v11, v12, v13, v14, v15, v16, v18, v17, v19, v20);
  outlined consume of GraphicsImage.Contents?(v23, v22);
  return outlined release of GraphicsContext.ResolvedImage((uint64_t)&v40);
}

uint64_t GraphicsContext.draw(_:at:anchor:)(uint64_t a1, uint64_t a2, double a3, double a4, double a5, double a6)
{
  _OWORD v12[10];
  _OWORD v13[2];
  _OWORD v14[10];
  _OWORD v15[2];

  GraphicsContext.resolve(_:)(a1, a2, (uint64_t)v14);
  v12[8] = v14[8];
  v12[9] = v14[9];
  v13[0] = v15[0];
  *(_OWORD *)((char *)v13 + 9) = *(_OWORD *)((char *)v15 + 9);
  v12[4] = v14[4];
  v12[5] = v14[5];
  v12[6] = v14[6];
  v12[7] = v14[7];
  v12[0] = v14[0];
  v12[1] = v14[1];
  v12[2] = v14[2];
  v12[3] = v14[3];
  GraphicsContext.draw(_:at:anchor:)((uint64_t)v12, a2, a3, a4, a5, a6);
  return outlined release of GraphicsContext.ResolvedImage((uint64_t)v14);
}

void *GraphicsContext.ResolvedText.shading.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;

  v2 = *(void **)(v1 + 16);
  v3 = *(_QWORD *)(v1 + 24);
  v4 = *(_QWORD *)(v1 + 32);
  v5 = *(_QWORD *)(v1 + 40);
  v6 = *(_QWORD *)(v1 + 48);
  v7 = *(_QWORD *)(v1 + 56);
  v8 = *(_QWORD *)(v1 + 64);
  v9 = *(_QWORD *)(v1 + 72);
  v10 = *(_QWORD *)(v1 + 80);
  v11 = *(_BYTE *)(v1 + 88);
  *(_QWORD *)a1 = v2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 24) = v5;
  *(_QWORD *)(a1 + 32) = v6;
  *(_QWORD *)(a1 + 40) = v7;
  *(_QWORD *)(a1 + 48) = v8;
  *(_QWORD *)(a1 + 56) = v9;
  *(_QWORD *)(a1 + 64) = v10;
  *(_BYTE *)(a1 + 72) = v11;
  return outlined copy of GraphicsContext.Shading.Storage(v2, v3, v4, v5, v6, v7, v8, v9, v10, v11);
}

__n128 GraphicsContext.ResolvedText.shading.setter(__int128 *a1)
{
  uint64_t v1;
  uint64_t v2;
  char v3;
  __n128 result;
  __n128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;

  v8 = *a1;
  v6 = a1[2];
  v7 = a1[1];
  v5 = (__n128)a1[3];
  v2 = *((_QWORD *)a1 + 8);
  v3 = *((_BYTE *)a1 + 72);
  outlined consume of GraphicsContext.Shading.Storage(*(void **)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), *(_QWORD *)(v1 + 48), *(_QWORD *)(v1 + 56), *(_QWORD *)(v1 + 64), *(_QWORD *)(v1 + 72), *(_QWORD *)(v1 + 80), *(_BYTE *)(v1 + 88));
  *(_OWORD *)(v1 + 16) = v8;
  *(_OWORD *)(v1 + 32) = v7;
  result = v5;
  *(_OWORD *)(v1 + 48) = v6;
  *(__n128 *)(v1 + 64) = v5;
  *(_QWORD *)(v1 + 80) = v2;
  *(_BYTE *)(v1 + 88) = v3;
  return result;
}

uint64_t (*GraphicsContext.ResolvedText.shading.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

CGSize __swiftcall GraphicsContext.ResolvedText.measure(in:)(CGSize in)
{
  uint64_t *v1;
  double height;
  double width;
  uint64_t v4;
  double (*v5)(uint64_t, double, double);
  uint64_t v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  CGSize result;

  height = in.height;
  width = in.width;
  v4 = *v1;
  if (one-time initialization token for _textDrawingContext != -1)
    swift_once();
  v5 = *(double (**)(uint64_t, double, double))(*(_QWORD *)v4 + 264);
  v6 = swift_retain();
  v7 = v5(v6, width, height);
  v9 = v8;
  swift_release();
  v10 = v7;
  v11 = v9;
  result.height = v11;
  result.width = v10;
  return result;
}

uint64_t GraphicsContext.ResolvedText.firstBaseline(in:)(double a1, double a2)
{
  uint64_t *v2;
  uint64_t v5;

  v5 = *v2;
  if (one-time initialization token for firstTextBaseline != -1)
    swift_once();
  return (*(uint64_t (**)(uint64_t, double, double))(*(_QWORD *)v5 + 272))(static VerticalAlignment.firstTextBaseline, a1, a2);
}

uint64_t GraphicsContext.ResolvedText.lastBaseline(in:)(double a1, double a2)
{
  uint64_t *v2;
  uint64_t v5;

  v5 = *v2;
  if (one-time initialization token for lastTextBaseline != -1)
    swift_once();
  return (*(uint64_t (**)(uint64_t, double, double))(*(_QWORD *)v5 + 272))(static VerticalAlignment.lastTextBaseline, a1, a2);
}

uint64_t GraphicsContext.resolve(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, _QWORD *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v22[2];
  uint64_t v23;
  __int128 v24;
  __int16 v25;
  unsigned __int8 v26;
  __int16 v27[5];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD v31[4];
  __int16 v32;
  uint64_t v33;
  uint64_t v34;

  v11 = *(_QWORD *)(a5 + 16);
  v12 = *(_QWORD *)(v11 + 56);
  *(_QWORD *)&v22[0] = *(_QWORD *)(v11 + 48);
  *((_QWORD *)&v22[0] + 1) = v12;
  v29 = 0;
  v30 = 2;
  v28 = 0;
  swift_retain();
  swift_retain();
  v13 = Text.resolveAttributedStringAndProperties(in:includeDefaultAttributes:options:idiom:)((uint64_t)v31, (uint64_t *)v22, 1, (float64_t *)&v30, &v28, a1, a2, a3 & 1, a4);
  swift_release();
  swift_release();
  v14 = *(_QWORD *)(v11 + 56);
  v28 = *(_QWORD *)(v11 + 48);
  v29 = v14;
  v15 = a4[2];
  if (v15)
  {
    v16 = a4 + 5;
    while (1)
    {
      if ((*v16 & 0xE0) == 0xC0)
      {
        type metadata accessor for CollapsibleTextModifier();
        if (swift_dynamicCastClass())
          break;
      }
      v16 += 16;
      if (!--v15)
        goto LABEL_7;
    }
    v17 = 1;
  }
  else
  {
LABEL_7:
    v17 = 0;
  }
  v27[0] = v32;
  v18 = v33;
  v19 = v34;
  v26 = 2;
  v25 = 512;
  v23 = 0;
  memset(v22, 0, sizeof(v22));
  v24 = xmmword_235260F00;
  v30 = MEMORY[0x24BEE4AF8];
  swift_retain();
  swift_retain();
  v20 = specialized static ResolvedStyledText.styledText(storage:stylePadding:environment:archiveOptions:isCollapsible:features:suffix:attachments:styles:transitions:writingMode:sizeFitting:)(v13, (unint64_t *)&v28, (char *)&v25, v17, v27, v22, &v30, v18, 0.0, 0.0, 0.0, 0.0, v19, &v26, 0);

  outlined release of Text.ResolvedProperties(v31);
  swift_release();
  swift_release();
  *(_QWORD *)a6 = v20;
  *(_QWORD *)(a6 + 8) = v11;
  *(_OWORD *)(a6 + 16) = 0u;
  *(_OWORD *)(a6 + 32) = 0u;
  *(_OWORD *)(a6 + 48) = 0u;
  *(_OWORD *)(a6 + 64) = 0u;
  *(_QWORD *)(a6 + 80) = 0;
  *(_BYTE *)(a6 + 88) = 10;
  return swift_retain();
}

uint64_t GraphicsContext.resolve(_:layoutProperties:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, _QWORD *a4@<X3>, __int128 *a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  _OWORD *v13;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  _OWORD *v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t result;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  void *v29;
  double v30;
  double v31;
  double v32;
  double v33;
  uint64_t v34;
  _BYTE *v35;
  char v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v43;
  _OWORD v44[2];
  uint64_t v45;
  __int128 v46;
  __int16 v47;
  __int16 v48;
  _OWORD v49[6];
  _OWORD v50[3];
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  _OWORD v57[3];
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  _OWORD v64[2];
  __int128 v65;
  float64_t v66[4];
  char v67;

  v10 = *(_QWORD **)(a6 + 16);
  v12 = v10[6];
  v11 = v10[7];
  *(_QWORD *)&v65 = v12;
  *((_QWORD *)&v65 + 1) = v11;
  v13 = (_OWORD *)v10[9];
  if (v13)
  {
    swift_retain();
    swift_retain();
    v15 = a5[5];
    v62 = a5[4];
    v63 = v15;
    v64[0] = a5[6];
    *(_OWORD *)((char *)v64 + 9) = *(__int128 *)((char *)a5 + 105);
    v16 = a5[1];
    v58 = *a5;
    v59 = v16;
    v17 = a5[3];
    v60 = a5[2];
    v61 = v17;
  }
  else
  {
    if (v11)
    {
      swift_retain_n();
      swift_retain_n();
      specialized PropertyList.Tracker.derivedValue<A>(_:for:)(v12, &v51);
      swift_release_n();
      swift_release_n();
    }
    else
    {
      v58 = v12;
      swift_retain_n();
      TextLayoutProperties.init(from:)((uint64_t *)&v58, (uint64_t)&v51);
    }
    v18 = (_OWORD *)swift_allocObject();
    v19 = v56;
    v18[5] = v55;
    v18[6] = v19;
    v18[7] = v57[0];
    *(_OWORD *)((char *)v18 + 121) = *(_OWORD *)((char *)v57 + 9);
    v20 = v52;
    v18[1] = v51;
    v18[2] = v20;
    v21 = v54;
    v18[3] = v53;
    v18[4] = v21;
    v10[9] = v18;
    result = swift_release();
    v13 = (_OWORD *)v10[9];
    v23 = a5[5];
    v62 = a5[4];
    v63 = v23;
    v64[0] = a5[6];
    *(_OWORD *)((char *)v64 + 9) = *(__int128 *)((char *)a5 + 105);
    v24 = a5[1];
    v58 = *a5;
    v59 = v24;
    v25 = a5[3];
    v60 = a5[2];
    v61 = v25;
    if (!v13)
    {
      __break(1u);
      return result;
    }
  }
  v26 = v13[6];
  v55 = v13[5];
  v56 = v26;
  v57[0] = v13[7];
  *(_OWORD *)((char *)v57 + 9) = *(_OWORD *)((char *)v13 + 121);
  v27 = v13[2];
  v51 = v13[1];
  v52 = v27;
  v28 = v13[4];
  v53 = v13[3];
  v54 = v28;
  TextLayoutProperties.update(_:from:)((uint64_t *)&v65, (uint64_t)&v51);
  v49[0] = v65;
  *(_QWORD *)&v66[0] = 2;
  v44[0] = 0uLL;
  swift_retain();
  swift_retain();
  v29 = Text.resolveAttributedStringAndProperties(in:includeDefaultAttributes:options:idiom:)((uint64_t)&v51, (uint64_t *)v49, 1, v66, (uint64_t *)v44, a1, a2, a3 & 1, a4);
  swift_release();
  swift_release();
  v34 = a4[2];
  if (v34)
  {
    v35 = a4 + 5;
    do
    {
      if ((*v35 & 0xE0) == 0xC0)
      {
        type metadata accessor for CollapsibleTextModifier();
        if (swift_dynamicCastClass())
        {
          v36 = 1;
          goto LABEL_16;
        }
      }
      v35 += 16;
      --v34;
    }
    while (v34);
    v36 = 0;
  }
  else
  {
    v36 = 0;
  }
LABEL_16:
  v37 = a5[5];
  v49[4] = a5[4];
  v49[5] = v37;
  v50[0] = a5[6];
  *(_OWORD *)((char *)v50 + 9) = *(__int128 *)((char *)a5 + 105);
  v38 = a5[1];
  v49[0] = *a5;
  v49[1] = v38;
  v39 = a5[3];
  v49[2] = a5[2];
  v49[3] = v39;
  memset(v66, 0, sizeof(v66));
  v67 = 1;
  v48 = 512;
  v47 = v53;
  v45 = 0;
  memset(v44, 0, sizeof(v44));
  v46 = xmmword_235260F00;
  v43 = MEMORY[0x24BEE4AF8];
  v40 = specialized static ResolvedStyledText.styledText(storage:layoutProperties:layoutMargins:stylePadding:archiveOptions:isCollapsible:features:suffix:attachments:styles:transitions:scaleFactorOverride:)(v29, v49, (uint64_t)v66, (char *)&v48, v36, &v47, (uint64_t)v44, &v43, 0.0, 0.0, 0.0, 0.0, v30, v31, v32, v33, *((uint64_t *)&v53 + 1), v54, 0.0,
          1);

  outlined release of Text.ResolvedProperties(&v51);
  swift_release();
  swift_release();
  *(_QWORD *)a7 = v40;
  *(_QWORD *)(a7 + 8) = v10;
  *(_OWORD *)(a7 + 16) = 0u;
  *(_OWORD *)(a7 + 32) = 0u;
  *(_OWORD *)(a7 + 48) = 0u;
  *(_OWORD *)(a7 + 64) = 0u;
  *(_QWORD *)(a7 + 80) = 0;
  *(_BYTE *)(a7 + 88) = 10;
  return swift_retain();
}

_QWORD *GraphicsContext.draw(_:in:)(uint64_t a1, uint64_t a2, double a3, double a4, double a5, double a6)
{
  _QWORD *v10;
  uint64_t v11;
  _QWORD *result;
  _QWORD *v13;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  _BYTE v25[160];
  _QWORD v26[20];
  _BYTE v27[176];

  v10 = *(_QWORD **)a1;
  if ((*(_WORD *)(*(_QWORD *)a1 + 236) & 1) != 0)
  {
    v13 = *(_QWORD **)a1;
    v16 = *(void **)(a1 + 16);
    v17 = *(_QWORD *)(a1 + 24);
    v18 = *(_QWORD *)(a1 + 32);
    v19 = *(_QWORD *)(a1 + 40);
    v20 = *(_QWORD *)(a1 + 48);
    v21 = *(_QWORD *)(a1 + 56);
    v22 = *(_QWORD *)(a1 + 64);
    v15 = *(_QWORD *)(a1 + 72);
    v23 = *(_QWORD *)(a1 + 80);
    v24 = *(_BYTE *)(a1 + 88);
    outlined copy of GraphicsContext.Shading.Storage(v16, v17, v18, v19, v20, v21, v22, v15, v23, v24);
    GraphicsContext.Shading.resolve(in:levels:)();
    outlined consume of GraphicsContext.Shading.Storage(v16, v17, v18, v19, v20, v21, v22, v15, v23, v24);
    outlined init with take of GraphicsContext.ResolvedShading?((uint64_t)v25, (uint64_t)v26, &lazy cache variable for type metadata for GraphicsContext.ResolvedShading?);
    outlined init with take of GraphicsContext.ResolvedShading?((uint64_t)v26, (uint64_t)v27, &lazy cache variable for type metadata for GraphicsContext.ResolvedShading?);
    result = (_QWORD *)_s7SwiftUI15GraphicsContextV15ResolvedShadingOSgWOg((uint64_t)v27);
    if ((_DWORD)result != 1)
    {
      outlined init with take of GraphicsContext.ResolvedShading((uint64_t)v27, (uint64_t)v25);
      GraphicsContext.draw(_:in:shading:)(v13, (uint64_t)v25, a2, a3, a4, a5, a6);
      return outlined retain of GraphicsContext.ResolvedShading(v26, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of GraphicsContext.ResolvedShading?);
    }
  }
  else
  {
    swift_retain();
    v11 = swift_retain();
    specialized GraphicsContext.withPlatformContext(content:)(v11, v10, a3, a4, a5, a6);
    swift_release();
    return (_QWORD *)swift_release();
  }
  return result;
}

uint64_t GraphicsContext.draw(_:in:)(_QWORD *a1, double a2, double a3, double a4, double a5)
{
  uint64_t v10;

  swift_retain();
  v10 = swift_retain();
  specialized GraphicsContext.withPlatformContext(content:)(v10, a1, a2, a3, a4, a5);
  swift_release();
  return swift_release();
}

void GraphicsContext.draw(_:in:shading:)(_QWORD *a1, uint64_t a2, uint64_t a3, double a4, double a5, double a6, double a7)
{
  int v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float *v19;
  id v20;
  double v21;
  id v22;
  id v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  void *v27;
  id v28;
  void *v29;
  double v30;
  double v31;
  double v32;
  double v33;
  void *v34;
  id v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _DWORD *v40;
  int v41;
  int v42;
  int v43;
  int v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  uint64_t v51;
  __int128 v52;
  __int128 v53;
  void *v54;
  uint64_t v55;
  __int128 v56;
  __int128 v57;
  uint64_t v58;
  char v59;
  uint64_t v60;
  unsigned __int8 v61;
  uint64_t v62;
  double v63;
  double v64;
  double v65;
  double v66;
  double v67;
  double v68;
  double v69;
  double v70;
  double v71;
  double v72;
  double v73;
  double v74;
  uint64_t v75;
  int v76;
  int v77;
  uint64_t v78;
  double v79;
  double v80;
  double v81;
  double v82;
  double v83;
  double v84;
  double v85;
  double v86;
  double v87;
  double v88;
  double v89;
  double v90;
  id v91;
  uint64_t i;
  id v93;
  id v94;
  id v95;
  uint64_t v99;
  uint64_t v100;
  void *v101;
  void *v102;
  uint64_t v103;
  uint64_t v104;
  _BYTE v105[160];
  _OWORD v106[2];
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  uint64_t v112;
  uint64_t v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  uint64_t v118;
  char v119;
  int v120;
  uint64_t v121;
  char v122;
  uint64_t v123;
  _BYTE v124[160];
  _BYTE v125[168];

  outlined init with take of GraphicsContext.ResolvedShading(a2, (uint64_t)v124);
  outlined init with take of GraphicsContext.ResolvedShading((uint64_t)v124, (uint64_t)v125);
  v10 = _s7SwiftUI15GraphicsContextV15ResolvedShadingOWOg((uint64_t)v125);
  if (v10 == 2)
  {
    v19 = (float *)_s7SwiftUI15GraphicsContextV15ResolvedShadingOWOj0_((uint64_t)v125);
    v12 = *v19;
    v14 = v19[1];
    v16 = v19[2];
    v18 = v19[3];
    goto LABEL_5;
  }
  if (v10 == 1)
  {
    _s7SwiftUI15GraphicsContextV15ResolvedShadingOWOj0_((uint64_t)v125);
    RBColorFromLinear();
    v12 = v11;
    v14 = v13;
    v16 = v15;
    v18 = v17;
LABEL_5:
    GraphicsContext.draw(_:in:sRGBColor:)(a1, a3, a4, a5, a6, a7, v12, v14, v16, v18);
    return;
  }
  v20 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BE7EEF8]), sel_init);
  objc_msgSend(v20, sel_setDefaultColorSpace_, 1);
  objc_msgSend(v20, sel_setDeviceScale_, GraphicsContext.userToDeviceScale.getter());
  LODWORD(v21) = 1.0;
  v22 = objc_msgSend(v20, sel_beginCGContextWithAlpha_flags_, 0, v21);
  v23 = objc_msgSend(objc_allocWithZone((Class)CoreGraphicsContext), sel_initWithCGContext_, v22);
  objc_msgSend(v23, sel_push);
  if (one-time initialization token for _textDrawingContext != -1)
    swift_once();
  v24 = static GraphicsContext.Storage.Shared._textDrawingContext;
  if (a1[24])
  {
    swift_retain();
    v25 = NSAttributedString.isDynamic.getter();
  }
  else
  {
    swift_retain();
    v25 = 0;
  }
  (*(void (**)(_QWORD, BOOL, uint64_t, _QWORD, double, double, double, double, double, double))(*a1 + 288))(0, v25, v24, 0, a4, a5, a6, a7, a6, a7);
  swift_release();
  objc_msgSend(v23, "pop");

  objc_msgSend(v20, sel_endCGContext);
  v95 = objc_msgSend(v20, sel_moveContents);
  v26 = *(_QWORD *)(a3 + 16);
  v27 = *(void **)(v26 + 248);
  if (v27)
  {
    v94 = v27;
    objc_msgSend(v94, sel_removeAll);
  }
  else
  {
    v28 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BE7EF08]), sel_init);
    v29 = *(void **)(v26 + 248);
    *(_QWORD *)(v26 + 248) = v28;
    v94 = v28;

  }
  RBDrawingStateBeginLayer();
  if (one-time initialization token for keyColorAnyAlpha != -1)
    swift_once();
  LODWORD(v31) = HIDWORD(static RBColor.keyColorAnyAlpha);
  LODWORD(v30) = static RBColor.keyColorAnyAlpha;
  LODWORD(v32) = dword_25622D100;
  LODWORD(v33) = unk_25622D104;
  objc_msgSend(v94, sel_addConditionWithFillColor_colorSpace_, 2, v30, v31, v32, v33);
  objc_msgSend(v94, sel_setInvertsResult_, 1);
  objc_msgSend(v94, sel_copyFilteredDisplayList_, v95);
  RBDrawingStateDrawDisplayList();
  swift_unknownObjectRelease();
  objc_msgSend(v94, sel_setInvertsResult_, 0);
  v34 = *(void **)(v26 + 256);
  if (v34)
  {
    v93 = v34;
    objc_msgSend(v93, sel_removeAll);
  }
  else
  {
    v35 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BE7EF10]), sel_init);
    v36 = *(void **)(v26 + 256);
    *(_QWORD *)(v26 + 256) = v35;
    v93 = v35;

  }
  v37 = swift_bridgeObjectRetain();
  v38 = specialized Sequence.reversed()(v37);
  v39 = *(_QWORD *)(v38 + 16);
  v40 = (_DWORD *)MEMORY[0x24BE7EF68];
  if (v39)
  {
    v91 = v20;
    v41 = *MEMORY[0x24BE7EF80];
    v42 = *MEMORY[0x24BE7EF68];
    v43 = *(_DWORD *)(MEMORY[0x24BE7EF68] + 4);
    v45 = *(_DWORD *)(MEMORY[0x24BE7EF68] + 8);
    v44 = *(_DWORD *)(MEMORY[0x24BE7EF68] + 12);
    v104 = v39 - 1;
    v46 = 32;
    for (i = v38; ; v38 = i)
    {
      v99 = v46;
      v47 = v38 + v46;
      v49 = *(_OWORD *)(v47 + 32);
      v48 = *(_OWORD *)(v47 + 48);
      v50 = *(_OWORD *)(v47 + 16);
      v106[0] = *(_OWORD *)v47;
      v106[1] = v50;
      v107 = v49;
      v108 = v48;
      v51 = *(_QWORD *)(v47 + 112);
      v53 = *(_OWORD *)(v47 + 80);
      v52 = *(_OWORD *)(v47 + 96);
      v109 = *(_OWORD *)(v47 + 64);
      v110 = v53;
      v111 = v52;
      v112 = v51;
      v54 = (void *)*((_QWORD *)&v106[0] + 1);
      v103 = *(_QWORD *)&v106[0];
      v55 = v50;
      v101 = (void *)v107;
      v102 = (void *)*((_QWORD *)&v50 + 1);
      v100 = *((_QWORD *)&v107 + 1);
      v56 = v108;
      v57 = v109;
      v58 = v53;
      v59 = BYTE8(v53);
      v60 = v52;
      v61 = BYTE8(v52);
      v113 = *((_QWORD *)&v106[0] + 1);
      v114 = v50;
      v115 = v107;
      v116 = v108;
      v117 = v109;
      v118 = v53;
      v119 = BYTE8(v53);
      v120 = HIDWORD(v53);
      v121 = v52;
      v122 = BYTE8(v52);
      v123 = v51;
      _s7SwiftUI15GraphicsContextV15ResolvedShadingOWOi3_((uint64_t)&v113);
      outlined retain of (key: _ShapeStyle_Pack.Key, style: _ShapeStyle_Pack.Style)((uint64_t)v106);
      outlined copy of _ShapeStyle_Pack.Fill(v54, v55, v102, v101, v100, v56, *((uint64_t *)&v56 + 1), v57, *((uint64_t *)&v57 + 1), v58, v59);
      outlined copy of GraphicsBlendMode?(v60, v61);
      swift_bridgeObjectRetain();
      v62 = RBDrawingStateInit();
      RBDrawingStateBeginLayer();
      LODWORD(v63) = -1.0;
      LODWORD(v64) = -1.0;
      *(float *)&v65 = (float)v103 * 0.00097656;
      LODWORD(v66) = v41;
      LODWORD(v67) = v42;
      LODWORD(v68) = v43;
      LODWORD(v69) = v45;
      LODWORD(v70) = v44;
      objc_msgSend(v93, sel_addColorReplacementFrom_to_colorSpace_, 2, v63, v64, v65, v66, v67, v68, v69, v70);
      RBDrawingStateAddTransformStyle();
      objc_msgSend(v94, sel_removeAll);
      LODWORD(v71) = -1.0;
      LODWORD(v72) = -1.0;
      *(float *)&v73 = (float)v103 * 0.00097656;
      LODWORD(v74) = v41;
      objc_msgSend(v94, sel_addConditionWithFillColor_colorSpace_, 2, v71, v72, v73, v74);
      objc_msgSend(v94, sel_copyFilteredDisplayList_, v95);
      RBDrawingStateDrawDisplayList();
      swift_unknownObjectRelease();
      RBDrawingStateClipLayer();
      outlined init with take of GraphicsContext.ResolvedShading((uint64_t)&v113, (uint64_t)v105);
      GraphicsContext.draw(shading:bounds:in:alpha:blendMode:)((uint64_t)v105, v62, 0, a3, a4, a5, a6, a7, 1.0);
      RBDrawingStateDestroy();
      outlined release of (key: _ShapeStyle_Pack.Key, style: _ShapeStyle_Pack.Style)((uint64_t)v106);
      outlined release of (key: _ShapeStyle_Pack.Key, style: _ShapeStyle_Pack.Style)((uint64_t)v106);
      if (!v104)
        break;
      --v104;
      v46 = v99 + 120;
    }
    swift_bridgeObjectRelease();
    v20 = v91;
    v40 = (_DWORD *)MEMORY[0x24BE7EF68];
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  if (one-time initialization token for foregroundKeyColorAnyAlpha != -1)
    swift_once();
  v75 = static RBColor.foregroundKeyColorAnyAlpha;
  v76 = dword_254287BD0;
  v77 = dword_254287BD4;
  v78 = RBDrawingStateInit();
  RBDrawingStateBeginLayer();
  LODWORD(v79) = *v40;
  LODWORD(v80) = v40[1];
  LODWORD(v81) = v40[2];
  LODWORD(v82) = v40[3];
  LODWORD(v84) = HIDWORD(v75);
  LODWORD(v83) = v75;
  LODWORD(v85) = v76;
  LODWORD(v86) = v77;
  objc_msgSend(v93, sel_addColorReplacementFrom_to_colorSpace_, 2, v83, v84, v85, v86, v79, v80, v81, v82);
  RBDrawingStateAddTransformStyle();
  objc_msgSend(v94, sel_removeAll);
  LODWORD(v88) = HIDWORD(v75);
  LODWORD(v87) = v75;
  LODWORD(v89) = v76;
  LODWORD(v90) = v77;
  objc_msgSend(v94, sel_addConditionWithFillColor_colorSpace_, 2, v87, v88, v89, v90);
  objc_msgSend(v94, sel_copyFilteredDisplayList_, v95);
  RBDrawingStateDrawDisplayList();
  swift_unknownObjectRelease();
  RBDrawingStateClipLayer();
  outlined init with take of GraphicsContext.ResolvedShading((uint64_t)v124, (uint64_t)&v113);
  GraphicsContext.draw(shading:bounds:in:alpha:blendMode:)((uint64_t)&v113, v78, 0, a3, a4, a5, a6, a7, 1.0);
  RBDrawingStateDestroy();
  RBDrawingStateDrawLayer();

  swift_unknownObjectRelease();
}

_QWORD *GraphicsContext.draw(_:at:anchor:)(uint64_t *a1, uint64_t a2, double a3, double a4, double a5, double a6)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  double (*v18)(uint64_t, double, double);
  uint64_t v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  uint64_t v25;
  _QWORD *result;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  _BYTE v31[160];
  _QWORD v32[20];
  _BYTE v33[176];

  v10 = *a1;
  v11 = a1[3];
  v12 = a1[4];
  v13 = a1[5];
  v14 = a1[6];
  v29 = a1[7];
  v15 = a1[8];
  v16 = a1[9];
  v27 = a1[10];
  v28 = (void *)a1[2];
  v17 = *((_BYTE *)a1 + 88);
  if (one-time initialization token for _textDrawingContext != -1)
    swift_once();
  v18 = *(double (**)(uint64_t, double, double))(*(_QWORD *)v10 + 264);
  v19 = swift_retain();
  v20 = v18(v19, INFINITY, INFINITY);
  v22 = v21;
  swift_release();
  v23 = a3 - v20 * a5;
  v24 = a4 - v22 * a6;
  if ((*(_WORD *)(v10 + 236) & 1) != 0)
  {
    outlined copy of GraphicsContext.Shading.Storage(v28, v11, v12, v13, v14, v29, v15, v16, v27, v17);
    GraphicsContext.Shading.resolve(in:levels:)();
    outlined consume of GraphicsContext.Shading.Storage(v28, v11, v12, v13, v14, v29, v15, v16, v27, v17);
    outlined init with take of GraphicsContext.ResolvedShading?((uint64_t)v31, (uint64_t)v32, &lazy cache variable for type metadata for GraphicsContext.ResolvedShading?);
    outlined init with take of GraphicsContext.ResolvedShading?((uint64_t)v32, (uint64_t)v33, &lazy cache variable for type metadata for GraphicsContext.ResolvedShading?);
    result = (_QWORD *)_s7SwiftUI15GraphicsContextV15ResolvedShadingOSgWOg((uint64_t)v33);
    if ((_DWORD)result != 1)
    {
      outlined init with take of GraphicsContext.ResolvedShading((uint64_t)v33, (uint64_t)v31);
      GraphicsContext.draw(_:in:shading:)((_QWORD *)v10, (uint64_t)v31, a2, v23, v24, v20, v22);
      return outlined retain of GraphicsContext.ResolvedShading(v32, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of GraphicsContext.ResolvedShading?);
    }
  }
  else
  {
    swift_retain();
    v25 = swift_retain();
    specialized GraphicsContext.withPlatformContext(content:)(v25, (_QWORD *)v10, v23, v24, v20, v22);
    swift_release();
    return (_QWORD *)swift_release();
  }
  return result;
}

void *GraphicsContext.draw(_:in:)(uint64_t a1, uint64_t a2, char a3, _QWORD *a4, uint64_t a5, double a6, double a7, double a8, double a9)
{
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  char v24;
  uint64_t v25;
  _QWORD *v26;
  char v27;
  uint64_t v28;
  void *v29;
  _BYTE v30[160];
  _QWORD v31[20];
  _BYTE v32[176];
  uint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;

  GraphicsContext.resolve(_:)(a1, a2, a3 & 1, a4, a5, (uint64_t)&v33);
  v14 = (_QWORD *)v33;
  v15 = v37;
  v17 = v38;
  v16 = v39;
  v19 = v40;
  v18 = v41;
  v20 = v42;
  v21 = v43;
  v28 = v36;
  v29 = v34;
  v27 = v35;
  if ((*(_WORD *)(v33 + 236) & 1) != 0)
  {
    v26 = (_QWORD *)v33;
    v24 = v35;
    v25 = v36;
    outlined copy of GraphicsContext.Shading.Storage(v34, v35, v36, v37, v38, v39, v40, v41, v42, v43);
    GraphicsContext.Shading.resolve(in:levels:)();
    outlined consume of GraphicsContext.Shading.Storage(v29, v24, v25, v15, v17, v16, v19, v18, v20, v21);
    outlined init with take of GraphicsContext.ResolvedShading?((uint64_t)v30, (uint64_t)v31, &lazy cache variable for type metadata for GraphicsContext.ResolvedShading?);
    outlined init with take of GraphicsContext.ResolvedShading?((uint64_t)v31, (uint64_t)v32, &lazy cache variable for type metadata for GraphicsContext.ResolvedShading?);
    if (_s7SwiftUI15GraphicsContextV15ResolvedShadingOSgWOg((uint64_t)v32) != 1)
    {
      outlined init with take of GraphicsContext.ResolvedShading((uint64_t)v32, (uint64_t)v30);
      GraphicsContext.draw(_:in:shading:)(v26, (uint64_t)v30, a5, a6, a7, a8, a9);
      outlined retain of GraphicsContext.ResolvedShading(v31, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of GraphicsContext.ResolvedShading?);
    }
    swift_release();
    swift_release();
    return outlined consume of GraphicsContext.Shading.Storage(v29, v27, v28, v15, v17, v16, v19, v18, v20, v21);
  }
  else
  {
    swift_retain();
    v22 = swift_retain();
    specialized GraphicsContext.withPlatformContext(content:)(v22, v14, a6, a7, a8, a9);
    swift_release();
    swift_release_n();
    swift_release();
    return outlined consume of GraphicsContext.Shading.Storage(v29, v27, v28, v15, v17, v16, v19, v18, v20, v21);
  }
}

void *GraphicsContext.draw(_:at:anchor:)(uint64_t a1, uint64_t a2, char a3, _QWORD *a4, uint64_t a5, double a6, double a7, double a8, double a9)
{
  uint64_t v14;
  void *v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  double (*v20)(uint64_t, double, double);
  uint64_t v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  uint64_t v27;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _BYTE v34[160];
  _QWORD v35[20];
  _BYTE v36[176];
  _QWORD v37[3];
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char v46;

  GraphicsContext.resolve(_:)(a1, a2, a3 & 1, a4, a5, (uint64_t)v37);
  v14 = v37[0];
  v15 = (void *)v37[2];
  v16 = v38;
  v18 = v39;
  v17 = v40;
  v19 = v41;
  v31 = v42;
  v32 = v43;
  v33 = v44;
  v30 = v45;
  v29 = v46;
  if (one-time initialization token for _textDrawingContext != -1)
    swift_once();
  v20 = *(double (**)(uint64_t, double, double))(*(_QWORD *)v14 + 264);
  v21 = swift_retain();
  v22 = v20(v21, INFINITY, INFINITY);
  v24 = v23;
  swift_release();
  v25 = a6 - v22 * a8;
  v26 = a7 - v24 * a9;
  if ((*(_WORD *)(v14 + 236) & 1) != 0)
  {
    outlined copy of GraphicsContext.Shading.Storage(v15, v16, v18, v17, v19, v31, v32, v33, v30, v29);
    GraphicsContext.Shading.resolve(in:levels:)();
    outlined consume of GraphicsContext.Shading.Storage(v15, v16, v18, v17, v19, v31, v32, v33, v30, v29);
    outlined init with take of GraphicsContext.ResolvedShading?((uint64_t)v34, (uint64_t)v35, &lazy cache variable for type metadata for GraphicsContext.ResolvedShading?);
    outlined init with take of GraphicsContext.ResolvedShading?((uint64_t)v35, (uint64_t)v36, &lazy cache variable for type metadata for GraphicsContext.ResolvedShading?);
    if (_s7SwiftUI15GraphicsContextV15ResolvedShadingOSgWOg((uint64_t)v36) != 1)
    {
      outlined init with take of GraphicsContext.ResolvedShading((uint64_t)v36, (uint64_t)v34);
      GraphicsContext.draw(_:in:shading:)((_QWORD *)v14, (uint64_t)v34, a5, v25, v26, v22, v24);
      outlined retain of GraphicsContext.ResolvedShading(v35, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of GraphicsContext.ResolvedShading?);
    }
    swift_release();
    swift_release();
    return outlined consume of GraphicsContext.Shading.Storage(v15, v16, v18, v17, v19, v31, v32, v33, v30, v29);
  }
  else
  {
    swift_retain();
    v27 = swift_retain();
    specialized GraphicsContext.withPlatformContext(content:)(v27, (_QWORD *)v14, v25, v26, v22, v24);
    swift_release();
    swift_release_n();
    swift_release();
    return outlined consume of GraphicsContext.Shading.Storage(v15, v16, v18, v17, v19, v31, v32, v33, v30, v29);
  }
}

uint64_t GraphicsContext.ResolvedSymbol.list.getter()
{
  return swift_unknownObjectRetain();
}

uint64_t GraphicsContext.ResolvedSymbol.list.setter(uint64_t a1)
{
  _QWORD *v1;
  uint64_t result;

  result = swift_unknownObjectRelease();
  *v1 = a1;
  return result;
}

uint64_t (*GraphicsContext.ResolvedSymbol.list.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

double GraphicsContext.ResolvedSymbol.size.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 8);
}

void GraphicsContext.ResolvedSymbol.size.setter(double a1, double a2)
{
  uint64_t v2;

  *(double *)(v2 + 8) = a1;
  *(double *)(v2 + 16) = a2;
}

uint64_t (*GraphicsContext.ResolvedSymbol.size.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t GraphicsContext.ResolvedSymbol.init(list:size:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>, double a3@<D0>, double a4@<D1>)
{
  *(_QWORD *)a2 = result;
  *(double *)(a2 + 8) = a3;
  *(double *)(a2 + 16) = a4;
  return result;
}

uint64_t GraphicsContext.resolveSymbol<A>(id:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v5;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t, uint64_t);

  v5 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 24);
  if (v5)
  {
    v8 = result;
    v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v5 + 80);
    swift_retain();
    v9(v8, a3, a4);
    return swift_release();
  }
  else
  {
    *a5 = 0;
    a5[1] = 0;
    a5[2] = 0;
  }
  return result;
}

uint64_t GraphicsContext.draw(_:in:)(uint64_t a1, double a2, double a3, double a4, double a5)
{
  if (a2 == 0.0 && a3 == 0.0 && a4 / *(double *)(a1 + 8) == 1.0 && a5 / *(double *)(a1 + 16) == 1.0)
    return RBDrawingStateDrawDisplayList2();
  RBDrawingStateInit();
  RBDrawingStateTranslateCTM();
  RBDrawingStateScaleCTM();
  RBDrawingStateDrawDisplayList2();
  return RBDrawingStateDestroy();
}

uint64_t GraphicsContext.draw(_:at:anchor:)(uint64_t a1, double a2, double a3, double a4, double a5)
{
  double v5;
  double v6;

  v5 = *(double *)(a1 + 8);
  v6 = *(double *)(a1 + 16);
  if (v5 / v5 == 1.0 && a2 - v5 * a4 == 0.0 && a3 - v6 * a5 == 0.0 && v6 / v6 == 1.0)
    return RBDrawingStateDrawDisplayList2();
  RBDrawingStateInit();
  RBDrawingStateTranslateCTM();
  RBDrawingStateScaleCTM();
  RBDrawingStateDrawDisplayList2();
  return RBDrawingStateDestroy();
}

void GraphicsContext.withPlatformContext(content:)(void (*a1)(id), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  CGContext *v6;
  CGContext *v7;
  CGBlendMode v8;
  uint64_t v9;
  _BOOL4 v10;
  id v11;

  v6 = (CGContext *)(id)RBDrawingStateBeginCGContext();
  v7 = v6;
  v8 = *(_DWORD *)(a3 + 36);
  if (v8)
    CGContextSetBlendMode(v6, v8);
  v9 = *(_QWORD *)(a3 + 40);
  v10 = (v9 & 0xFFFFFFFFFFFFFLL) == 0 || (~v9 & 0x7FF0000000000000) != 0;
  if (v10)
    _CGContextSetShapeDistance(*(double *)(a3 + 40));
  v11 = objc_msgSend(objc_allocWithZone((Class)CoreGraphicsContext), sel_initWithCGContext_, v7);
  a1(objc_msgSend(v11, sel_push));
  if (v3)
  {
    objc_msgSend(v11, "pop");

  }
  else
  {
    objc_msgSend(v11, "pop");

    if (v10)
      _CGContextSetShapeDistance(NAN);
  }
  RBDrawingStateEndCGContext();

}

void GraphicsContextSymbols.symbol<A>(for:)()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t GraphicsContextSymbols.deinit()
{
  uint64_t v0;

  return v0;
}

uint64_t GraphicsContextSymbols.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t GraphicsContext.init(rbDisplayList:environment:)(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  id v6;
  uint64_t State;
  uint64_t v9[2];

  v2 = *a2;
  v3 = a2[1];
  swift_unknownObjectRetain();
  objc_opt_self();
  v4 = (void *)swift_dynamicCastObjCClassUnconditional();
  type metadata accessor for GraphicsContext.Storage();
  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 32) = 1065353216;
  *(_QWORD *)(v5 + 40) = 0x7FF8000000000000;
  v9[0] = v2;
  v9[1] = v3;
  type metadata accessor for GraphicsContext.Storage.Shared();
  swift_allocObject();
  v6 = v4;
  *(_QWORD *)(v5 + 16) = GraphicsContext.Storage.Shared.init(list:environment:)(v6, v9);
  State = RBDisplayListGetState();
  swift_unknownObjectRelease();

  *(_QWORD *)(v5 + 24) = State;
  *(_BYTE *)(v5 + 48) = 0;
  return v5;
}

uint64_t GraphicsContext.rbDrawingState.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = v0;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    v2 = RBDrawingStateInit();
    type metadata accessor for GraphicsContext.Storage();
    swift_allocObject();
    v3 = swift_retain();
    *(_QWORD *)v1 = GraphicsContext.Storage.init(_:state:ownsState:resetBlending:)(v3, v2, 1, 0);
    swift_release();
  }
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    v4 = RBDrawingStateInit();
    type metadata accessor for GraphicsContext.Storage();
    swift_allocObject();
    v5 = swift_retain();
    *(_QWORD *)v1 = GraphicsContext.Storage.init(_:state:ownsState:resetBlending:)(v5, v4, 1, 0);
    swift_release();
  }
  return *(_QWORD *)(*(_QWORD *)v1 + 24);
}

uint64_t GraphicsContext.draw(rbDisplayList:)()
{
  swift_dynamicCastObjCProtocolUnconditional();
  return RBDrawingStateDrawDisplayList2();
}

uint64_t sub_234DD5470()
{
  uint64_t v0;
  uint64_t v1;
  _DWORD *v2;
  double v3;
  double v4;
  double v5;
  double v6;
  void *v7;

  v2 = (_DWORD *)_s7SwiftUI15GraphicsContextV15ResolvedShadingOWOj0_(v0 + 536);
  LODWORD(v3) = *v2;
  LODWORD(v4) = v2[1];
  LODWORD(v5) = v2[2];
  LODWORD(v6) = v2[3];
  v7 = *(void **)(v1 + 40);
  if (*(_DWORD *)(v1 + 64) != 2)
    RBColorFromLinear();
  objc_msgSend(v7, sel_setColor_, v3, v4, v5, v6);
  *(_QWORD *)(v1 + 264) = 0;
  return swift_release();
}

void sub_234DD5830()
{
  uint64_t v0;

  _s7SwiftUI15GraphicsContextV15ResolvedShadingOWOj0_(v0 + 536);
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  JUMPOUT(0x234DD5890);
}

void *GraphicsContext.draw(shading:bounds:in:alpha:blendMode:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, double a7, double a8, double a9, double a10, float a11)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v29;
  void *result;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(_QWORD *);
  uint64_t v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  uint64_t *v46;
  double v47;
  double v48;
  double v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  unsigned __int8 v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  void *v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  char v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v75;
  int v78;
  unsigned int v79;
  _QWORD v80[3];
  char v81;
  uint64_t v82;
  char v83;
  uint64_t v84;
  uint64_t v85;
  __int128 v86;
  __int128 v87;
  uint64_t v88;
  char v89;
  __int16 v90;
  uint64_t v91[10];
  char v92;
  int v93;
  uint64_t v94;
  char v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  char v107;
  int v108;
  uint64_t v109;
  char v110;
  uint64_t v111;
  _QWORD v112[4];
  char v113;

  v15 = *(_QWORD *)a1;
  v16 = *(_QWORD *)(a1 + 8);
  v17 = *(_QWORD *)(a1 + 16);
  v18 = *(_QWORD *)(a1 + 24);
  v20 = *(_QWORD *)(a1 + 32);
  v19 = *(_QWORD *)(a1 + 40);
  v21 = *(_QWORD *)(a1 + 48);
  v22 = *(_QWORD *)(a1 + 56);
  v23 = *(_QWORD *)(a1 + 64);
  v24 = *(_BYTE *)(a1 + 72);
  switch(v24)
  {
    case 0:
      objc_msgSend(*(id *)(*(_QWORD *)(a4 + 16) + 32), sel_setInfinite, a3, a4, a5, a6, v21, v22);
      v29 = RBDrawingStateInit();
      RBDrawingStateClipShape();
      GraphicsContext.beginLayerWithBackdrop(color:in:)(*(float *)&v15, *((float *)&v15 + 1), *(float *)&v16, *((float *)&v16 + 1), v29, a4);
      RBDrawingStateDrawLayer();
      return (void *)RBDrawingStateDestroy();
    case 4:
      v78 = a3;
      v31 = *(_QWORD *)(a4 + 16);
      v32 = *(_QWORD *)(v31 + 48);
      v33 = *(_QWORD *)(v31 + 56);
      v80[0] = 0;
      v80[1] = 0;
      v80[2] = 1;
      v81 = 1;
      v82 = 0;
      v83 = 5;
      v84 = v32;
      v85 = v33;
      v86 = 0u;
      v87 = 0u;
      v88 = 0;
      v89 = 1;
      v90 = 0;
      v34 = *(void (**)(_QWORD *))(*(_QWORD *)v15 + 80);
      v70 = v23;
      v71 = v22;
      v73 = v21;
      outlined copy of GraphicsContext.Shading.Storage((void *)v15, v16, v17, v18, v20, v19, v21, v22, v23, 4);
      swift_retain();
      swift_retain();
      v34(v80);
      v35 = v82;
      v69 = v83;
      v68 = v82;
      if (v83 == 1)
        swift_bridgeObjectRetain();
      else
        v35 = MEMORY[0x24BEE4AF8];
      v91[0] = v35;
      LOBYTE(v112[0]) = 0;
      _ShapeStyle_Pack.subscript.getter((unsigned __int8 *)v112, 0, (uint64_t)&v97);
      swift_bridgeObjectRelease();
      v66 = v98;
      v67 = v97;
      v64 = (void *)v100;
      v65 = v99;
      v62 = v102;
      v63 = v101;
      v60 = v104;
      v61 = v103;
      v54 = v105;
      v55 = v106;
      v56 = v107;
      v59 = v109;
      v91[0] = v97;
      v91[1] = v98;
      v91[2] = v99;
      v91[3] = v100;
      v91[4] = v101;
      v91[5] = v102;
      v91[6] = v103;
      v91[7] = v104;
      v91[8] = v105;
      v91[9] = v106;
      v92 = v107;
      v93 = v108;
      v94 = v109;
      v95 = v110;
      v96 = v111;
      *(double *)v112 = a7;
      *(double *)&v112[1] = a8;
      *(double *)&v112[2] = a9;
      *(double *)&v112[3] = a10;
      v113 = 0;
      GraphicsContext.draw(style:bounds:in:alpha:blendMode:)(v91, (uint64_t)v112, a2, v78, a4, a11);
      outlined consume of GraphicsContext.Shading.Storage((void *)v15, v16, v17, v18, v20, v19, v73, v71, v70, 4);
      outlined consume of _ShapeStyle_Pack.Fill(v67, v66, v65, v64, v63, v62, v61, v60, v54, v55, v56);
      outlined consume of GraphicsBlendMode?(v59, v58);
      swift_bridgeObjectRelease();
      outlined consume of _ShapeStyle_Shape.Result(v68, v69);
      swift_release();
      swift_release();
      return (void *)swift_release();
    case 8:
      v79 = a3;
      if (!*(_QWORD *)(v15 + 16))
      {
        __break(1u);
        JUMPOUT(0x234DD5E58);
      }
      v36 = *(void **)(v15 + 32);
      v37 = *(_QWORD *)(v15 + 40);
      v38 = *(_QWORD *)(v15 + 48);
      v39 = *(_QWORD *)(v15 + 56);
      v40 = *(_QWORD *)(v15 + 64);
      v41 = *(_QWORD *)(v15 + 72);
      v42 = *(_QWORD *)(v15 + 80);
      v43 = *(_QWORD *)(v15 + 88);
      v44 = *(_QWORD *)(v15 + 96);
      v45 = *(_BYTE *)(v15 + 104);
      v97 = (uint64_t)v36;
      v98 = v37;
      v99 = v38;
      v100 = v39;
      v101 = v40;
      v102 = v41;
      v103 = v42;
      v104 = v43;
      v105 = v44;
      LOBYTE(v106) = v45;
      outlined copy of GraphicsContext.Shading.Storage(v36, v37, v38, v39, v40, v41, v42, v43, v44, v45);
      GraphicsContext.draw(shading:bounds:in:alpha:blendMode:)(&v97, a2, v79, a4, a7, a8, a9, a10, a11);
      return outlined consume of GraphicsContext.Shading.Storage(v36, v37, v38, v39, v40, v41, v42, v43, v44, v45);
    case 9:
      outlined init with take of GraphicsContext.ResolvedShading(v15 + 16, (uint64_t)&v97);
      outlined init with take of GraphicsContext.ResolvedShading((uint64_t)&v97, (uint64_t)v91);
      outlined retain of GraphicsContext.ResolvedShading(&v97, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of GraphicsContext.ResolvedShading);
      v46 = v91;
      v47 = a7;
      v48 = a8;
      v49 = a9;
      v50 = a2;
      goto LABEL_13;
    case 10:
      if (v16 | v15 | v17 | v18 | v20 | v19 | v21 | v22 | v23)
        goto LABEL_9;
      GraphicsContext.Storage.Shared.resolvedForeground.getter((uint64_t)v91);
      outlined init with take of GraphicsContext.ResolvedShading((uint64_t)v91, (uint64_t)&v97);
      outlined init with take of GraphicsContext.ResolvedShading((uint64_t)&v97, (uint64_t)v80);
      v46 = v80;
      v47 = a7;
      v48 = a8;
      v49 = a9;
      v50 = a2;
LABEL_13:
      GraphicsContext.draw(shading:bounds:in:alpha:blendMode:)((uint64_t)v46, v50, a3, a4, v47, v48, v49, a10, a11);
      result = outlined retain of GraphicsContext.ResolvedShading(&v97, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of GraphicsContext.ResolvedShading);
      break;
    default:
LABEL_9:
      v72 = *(_QWORD *)(a1 + 32);
      v75 = *(_QWORD *)(a1 + 40);
      v51 = *(_QWORD *)(a1 + 48);
      v52 = *(_QWORD *)(a1 + 56);
      v53 = *(_QWORD *)(a1 + 64);
      objc_msgSend(*(id *)(*(_QWORD *)(a4 + 16) + 32), sel_setInfinite);
      v97 = v15;
      v98 = v16;
      v99 = v17;
      v100 = v18;
      v101 = v72;
      v102 = v75;
      v103 = v51;
      v104 = v52;
      v105 = v53;
      LOBYTE(v106) = v24;
      GraphicsContext.Storage.Shared.setShading(_:)((uint64_t)&v97);
      result = (void *)RBDrawingStateDrawShape();
      break;
  }
  return result;
}

void GraphicsContext.draw(_:in:sRGBColor:)(_QWORD *a1, uint64_t a2, double a3, double a4, double a5, double a6, float a7, float a8, float a9, float a10)
{
  uint64_t v20;
  void *v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  id v30;
  void *v31;
  id v32;
  id v33;
  uint64_t v34;
  BOOL v35;
  id v36;

  RBDrawingStateBeginLayer();
  v20 = *(_QWORD *)(a2 + 16);
  v21 = *(void **)(v20 + 256);
  if (v21)
  {
    v36 = v21;
    objc_msgSend(v36, sel_removeAll);
  }
  else
  {
    v30 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BE7EF10]), sel_init);
    v31 = *(void **)(v20 + 256);
    *(_QWORD *)(v20 + 256) = v30;
    v36 = v30;

  }
  if (one-time initialization token for foregroundKeyColorAnyAlpha != -1)
    swift_once();
  LODWORD(v23) = HIDWORD(static RBColor.foregroundKeyColorAnyAlpha);
  LODWORD(v22) = static RBColor.foregroundKeyColorAnyAlpha;
  LODWORD(v24) = dword_254287BD0;
  LODWORD(v25) = dword_254287BD4;
  *(float *)&v26 = a7;
  *(float *)&v27 = a8;
  *(float *)&v28 = a9;
  *(float *)&v29 = a10;
  objc_msgSend(v36, sel_addColorReplacementFrom_to_colorSpace_, 1, v22, v23, v24, v25, v26, v27, v28, v29);
  RBDrawingStateAddTransformStyle();
  v32 = (id)RBDrawingStateBeginCGContext();
  v33 = objc_msgSend(objc_allocWithZone((Class)CoreGraphicsContext), sel_initWithCGContext_, v32);
  objc_msgSend(v33, sel_push);
  if (one-time initialization token for _textDrawingContext != -1)
    swift_once();
  v34 = static GraphicsContext.Storage.Shared._textDrawingContext;
  if (a1[24])
  {
    swift_retain();
    v35 = NSAttributedString.isDynamic.getter();
  }
  else
  {
    swift_retain();
    v35 = 0;
  }
  (*(void (**)(_QWORD, BOOL, uint64_t, _QWORD, double, double, double, double, double, double))(*a1 + 288))(0, v35, v34, 0, a3, a4, a5, a6, a5, a6);
  swift_release();
  objc_msgSend(v33, "pop");

  RBDrawingStateEndCGContext();
  RBDrawingStateDrawLayer();

}

_QWORD *GraphicsContext.draw(shading:bounds:in:alpha:blendMode:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, double a5, double a6, double a7, double a8, float a9)
{
  int v17;
  float *v18;
  float v19;
  float v20;
  float v21;
  float v22;
  uint64_t v23;
  _QWORD *result;
  uint64_t v25;
  char v26;
  int v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  unsigned __int8 v35;
  _OWORD v36[5];
  char v37;
  int v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  _QWORD v42[20];
  _QWORD v43[4];
  char v44;
  _QWORD v45[20];
  _BYTE v46[160];

  outlined init with take of GraphicsContext.ResolvedShading(a1, (uint64_t)v45);
  outlined init with take of GraphicsContext.ResolvedShading((uint64_t)v45, (uint64_t)v46);
  v17 = _s7SwiftUI15GraphicsContextV15ResolvedShadingOWOg((uint64_t)v46);
  if (v17 == 8)
  {
    result = (_QWORD *)_s7SwiftUI15GraphicsContextV15ResolvedShadingOWOj0_((uint64_t)v46);
    if (*(_QWORD *)(*result + 16))
    {
      outlined init with take of GraphicsContext.ResolvedShading(*result + 32, (uint64_t)v42);
      outlined init with take of GraphicsContext.ResolvedShading((uint64_t)v42, (uint64_t)v36);
      outlined retain of GraphicsContext.ResolvedShading(v42, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of GraphicsContext.ResolvedShading);
      GraphicsContext.draw(shading:bounds:in:alpha:blendMode:)(v36, a2, a3, a4, a5, a6, a7, a8, a9);
      return outlined retain of GraphicsContext.ResolvedShading(v42, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of GraphicsContext.ResolvedShading);
    }
    else
    {
      __break(1u);
    }
  }
  else if (v17 == 4)
  {
    v25 = _s7SwiftUI15GraphicsContextV15ResolvedShadingOWOj0_((uint64_t)v46);
    v26 = *(_BYTE *)(v25 + 80);
    v27 = *(_DWORD *)(v25 + 84);
    v28 = *(_QWORD *)(v25 + 88);
    v29 = *(_BYTE *)(v25 + 96);
    v30 = *(_QWORD *)(v25 + 104);
    v31 = *(_OWORD *)(v25 + 16);
    v36[0] = *(_OWORD *)v25;
    v36[1] = v31;
    v32 = *(_OWORD *)(v25 + 48);
    v36[2] = *(_OWORD *)(v25 + 32);
    v36[3] = v32;
    v36[4] = *(_OWORD *)(v25 + 64);
    v37 = v26;
    v38 = v27;
    v39 = v28;
    v40 = v29;
    v41 = v30;
    *(double *)v43 = a5;
    *(double *)&v43[1] = a6;
    *(double *)&v43[2] = a7;
    *(double *)&v43[3] = a8;
    v44 = 0;
    outlined init with take of GraphicsContext.ResolvedShading((uint64_t)v45, (uint64_t)v42);
    v33 = _s7SwiftUI15GraphicsContextV15ResolvedShadingOWOj0_((uint64_t)v42);
    v34 = *(_QWORD *)(v33 + 88);
    v35 = *(_BYTE *)(v33 + 96);
    outlined copy of _ShapeStyle_Pack.Fill(*(id *)v33, *(_QWORD *)(v33 + 8), *(void **)(v33 + 16), *(void **)(v33 + 24), *(_QWORD *)(v33 + 32), *(_QWORD *)(v33 + 40), *(_QWORD *)(v33 + 48), *(_QWORD *)(v33 + 56), *(_QWORD *)(v33 + 64), *(_QWORD *)(v33 + 72), *(_BYTE *)(v33 + 80));
    outlined copy of GraphicsBlendMode?(v34, v35);
    swift_bridgeObjectRetain();
    GraphicsContext.draw(style:bounds:in:alpha:blendMode:)((uint64_t *)v36, (uint64_t)v43, a2, a3, a4, a9);
    return outlined retain of GraphicsContext.ResolvedShading(v45, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of GraphicsContext.ResolvedShading);
  }
  else if (v17)
  {
    objc_msgSend(*(id *)(*(_QWORD *)(a4 + 16) + 32), sel_setInfinite);
    outlined init with take of GraphicsContext.ResolvedShading((uint64_t)v45, (uint64_t)v42);
    GraphicsContext.Storage.Shared.setShading(_:)((uint64_t)v42);
    return (_QWORD *)RBDrawingStateDrawShape();
  }
  else
  {
    v18 = (float *)_s7SwiftUI15GraphicsContextV15ResolvedShadingOWOj0_((uint64_t)v46);
    v19 = *v18;
    v20 = v18[1];
    v21 = v18[2];
    v22 = v18[3];
    objc_msgSend(*(id *)(*(_QWORD *)(a4 + 16) + 32), sel_setInfinite);
    v23 = RBDrawingStateInit();
    RBDrawingStateClipShape();
    GraphicsContext.beginLayerWithBackdrop(color:in:)(v19, v20, v21, v22, v23, a4);
    RBDrawingStateDrawLayer();
    return (_QWORD *)RBDrawingStateDestroy();
  }
  return result;
}

uint64_t specialized Sequence.reversed()(uint64_t a1)
{
  _QWORD *v1;
  unint64_t v2;
  uint64_t result;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t i;
  unint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _QWORD *v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  char *v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  _OWORD v48[7];
  uint64_t v49;
  _OWORD v50[7];
  uint64_t v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  uint64_t v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  uint64_t v67;

  v1 = (_QWORD *)specialized _copySequenceToContiguousArray<A>(_:)(a1);
  v2 = v1[2];
  result = swift_bridgeObjectRelease();
  if (v2 < 2)
    return (uint64_t)v1;
  v4 = 0;
  v5 = v2 >> 1;
  v6 = v2 - 1;
  v7 = 120 * v2 - 88;
  for (i = 4; ; i += 15)
  {
    if (v4 == v6)
      goto LABEL_4;
    v9 = v1[2];
    if (v4 >= v9)
      break;
    v10 = *(_OWORD *)&v1[i];
    v11 = *(_OWORD *)&v1[i + 2];
    v12 = *(_OWORD *)&v1[i + 6];
    v54 = *(_OWORD *)&v1[i + 4];
    v55 = v12;
    v52 = v10;
    v53 = v11;
    v13 = *(_OWORD *)&v1[i + 8];
    v14 = *(_OWORD *)&v1[i + 10];
    v15 = *(_OWORD *)&v1[i + 12];
    v59 = v1[i + 14];
    v57 = v14;
    v58 = v15;
    v56 = v13;
    if (v6 >= v9)
      goto LABEL_13;
    v16 = *(_OWORD *)((char *)v1 + v7);
    v17 = *(_OWORD *)((char *)v1 + v7 + 16);
    v18 = *(_OWORD *)((char *)v1 + v7 + 48);
    v62 = *(_OWORD *)((char *)v1 + v7 + 32);
    v63 = v18;
    v60 = v16;
    v61 = v17;
    v19 = *(_OWORD *)((char *)v1 + v7 + 64);
    v20 = *(_OWORD *)((char *)v1 + v7 + 80);
    v21 = *(_OWORD *)((char *)v1 + v7 + 96);
    v67 = *(_QWORD *)((char *)v1 + v7 + 112);
    v65 = v20;
    v66 = v21;
    v64 = v19;
    outlined retain of (key: _ShapeStyle_Pack.Key, style: _ShapeStyle_Pack.Style)((uint64_t)&v52);
    outlined retain of (key: _ShapeStyle_Pack.Key, style: _ShapeStyle_Pack.Style)((uint64_t)&v60);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v1 = specialized _ArrayBuffer._consumeAndCreateNew()(v1);
    v22 = &v1[i];
    v23 = *(_OWORD *)&v1[i];
    v24 = *(_OWORD *)&v1[i + 2];
    v25 = *(_OWORD *)&v1[i + 6];
    v48[2] = *(_OWORD *)&v1[i + 4];
    v48[3] = v25;
    v48[0] = v23;
    v48[1] = v24;
    v26 = *(_OWORD *)&v1[i + 8];
    v27 = *(_OWORD *)&v1[i + 10];
    v28 = *(_OWORD *)&v1[i + 12];
    v49 = v1[i + 14];
    v48[5] = v27;
    v48[6] = v28;
    v48[4] = v26;
    result = outlined release of (key: _ShapeStyle_Pack.Key, style: _ShapeStyle_Pack.Style)((uint64_t)v48);
    v29 = v60;
    v30 = v61;
    v31 = v63;
    *((_OWORD *)v22 + 2) = v62;
    *((_OWORD *)v22 + 3) = v31;
    *(_OWORD *)v22 = v29;
    *((_OWORD *)v22 + 1) = v30;
    v32 = v64;
    v33 = v65;
    v34 = v66;
    v22[14] = v67;
    *((_OWORD *)v22 + 5) = v33;
    *((_OWORD *)v22 + 6) = v34;
    *((_OWORD *)v22 + 4) = v32;
    if (v6 >= v1[2])
      goto LABEL_14;
    v35 = (char *)v1 + v7;
    v36 = *(_OWORD *)((char *)v1 + v7);
    v37 = *(_OWORD *)((char *)v1 + v7 + 16);
    v38 = *(_OWORD *)((char *)v1 + v7 + 48);
    v50[2] = *(_OWORD *)((char *)v1 + v7 + 32);
    v50[3] = v38;
    v50[0] = v36;
    v50[1] = v37;
    v39 = *(_OWORD *)((char *)v1 + v7 + 64);
    v40 = *(_OWORD *)((char *)v1 + v7 + 80);
    v41 = *(_OWORD *)((char *)v1 + v7 + 96);
    v51 = *(_QWORD *)((char *)v1 + v7 + 112);
    v50[5] = v40;
    v50[6] = v41;
    v50[4] = v39;
    result = outlined release of (key: _ShapeStyle_Pack.Key, style: _ShapeStyle_Pack.Style)((uint64_t)v50);
    v42 = v55;
    v44 = v52;
    v43 = v53;
    *((_OWORD *)v35 + 2) = v54;
    *((_OWORD *)v35 + 3) = v42;
    *(_OWORD *)v35 = v44;
    *((_OWORD *)v35 + 1) = v43;
    v46 = v57;
    v45 = v58;
    v47 = v56;
    *((_QWORD *)v35 + 14) = v59;
    *((_OWORD *)v35 + 5) = v46;
    *((_OWORD *)v35 + 6) = v45;
    *((_OWORD *)v35 + 4) = v47;
LABEL_4:
    ++v4;
    --v6;
    v7 -= 120;
    if (v5 == v4)
      return (uint64_t)v1;
  }
  __break(1u);
LABEL_13:
  __break(1u);
LABEL_14:
  __break(1u);
  return result;
}

uint64_t GraphicsContext.draw(style:bounds:in:alpha:blendMode:)(uint64_t *a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, float a6)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  int v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  char v25;
  int v26;
  int v27;
  int v28;
  int v29;
  uint64_t v30;
  double v31;
  double v32;
  double v33;
  double v34;
  void *v35;
  uint64_t v37;
  uint64_t v38;
  CGFloat v39;
  uint64_t v40;
  CGFloat v41;
  CGFloat v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unsigned __int8 v47;
  uint64_t v48;
  char v49;
  uint64_t v50;
  char v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v57;
  __int128 v58;
  __int128 v59;
  char v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char v71;
  int v72;
  uint64_t v73;
  char v74;
  uint64_t v75;
  _QWORD v76[4];
  unsigned __int8 v77;
  CGRect v78;

  v8 = *a1;
  v9 = a1[1];
  v10 = a1[2];
  v11 = a1[3];
  v13 = a1[4];
  v12 = a1[5];
  v14 = a1[6];
  v15 = a1[7];
  v16 = a1[8];
  v17 = a1[9];
  v18 = *((_BYTE *)a1 + 80);
  v19 = *((_DWORD *)a1 + 21);
  v20 = a1[11];
  v21 = *((_BYTE *)a1 + 96);
  v22 = a1[13];
  v61 = *a1;
  v62 = v9;
  v63 = v10;
  v64 = v11;
  v65 = v13;
  v66 = v12;
  v67 = v14;
  v68 = v15;
  v52 = v17;
  v53 = v16;
  v69 = v16;
  v70 = v17;
  v51 = v18;
  v71 = v18;
  v72 = v19;
  v50 = v20;
  v73 = v20;
  v49 = v21;
  v74 = v21;
  v48 = v22;
  v75 = v22;
  v23 = _ShapeStyle_Pack.Style.color.getter();
  if ((v25 & 1) != 0)
  {
    type metadata accessor for GraphicsContext.Storage();
    swift_allocObject();
    v37 = swift_retain();
    v38 = GraphicsContext.Storage.init(_:state:ownsState:resetBlending:)(v37, a3, 0, 0);
    *(float *)(v38 + 32) = a6;
    *(_DWORD *)(v38 + 36) = a4;
    v61 = v8;
    v62 = v9;
    v63 = v10;
    v64 = v11;
    v65 = v13;
    v66 = v12;
    v67 = v14;
    v68 = v15;
    v69 = v53;
    v70 = v52;
    v71 = v51;
    v72 = v19;
    v73 = v50;
    v74 = v49;
    v75 = v48;
    v40 = *MEMORY[0x24BDBF028];
    v39 = *(double *)(MEMORY[0x24BDBF028] + 8);
    v42 = *(double *)(MEMORY[0x24BDBF028] + 16);
    v41 = *(double *)(MEMORY[0x24BDBF028] + 24);
    v78.origin.x = *(CGFloat *)MEMORY[0x24BDBF028];
    v78.origin.y = v39;
    v78.size.width = v42;
    v78.size.height = v41;
    if (CGRectIsNull(v78))
    {
      v43 = 0;
      v44 = 0;
      v45 = 0;
      v46 = 0;
      v47 = 6;
    }
    else
    {
      v47 = 0;
      v43 = v40;
      v44 = *(_QWORD *)&v39;
      v45 = *(_QWORD *)&v42;
      v46 = *(_QWORD *)&v41;
    }
    v76[0] = v43;
    v76[1] = v44;
    v76[2] = v45;
    v76[3] = v46;
    v77 = v47;
    v57 = 256;
    v58 = 0u;
    v59 = 0u;
    v60 = 0;
    swift_retain();
    _ShapeStyle_Pack.Style.draw(_:style:in:bounds:)(v76, &v57, v38, a2);
    outlined consume of Path.Storage(v43, v44, v45, v46, v47);
    return swift_release_n();
  }
  else
  {
    v27 = HIDWORD(v23);
    v26 = (int)v23;
    v29 = HIDWORD(v24);
    v28 = v24;
    v30 = *(_QWORD *)(a5 + 16);
    objc_msgSend(*(id *)(v30 + 32), sel_setInfinite);
    v35 = *(void **)(v30 + 40);
    if (*(_DWORD *)(v30 + 64) != 2)
    {
      RBColorFromLinear();
      v26 = LODWORD(v31);
      v27 = LODWORD(v32);
      v28 = LODWORD(v33);
      v29 = LODWORD(v34);
    }
    LODWORD(v31) = v26;
    LODWORD(v32) = v27;
    LODWORD(v33) = v28;
    LODWORD(v34) = v29;
    objc_msgSend(v35, sel_setColor_, v31, v32, v33, v34);
    *(_QWORD *)(v30 + 264) = 0;
    swift_release();
    return RBDrawingStateDrawShape();
  }
}

uint64_t GraphicsContext.beginLayerWithBackdrop(color:in:)(float a1, float a2, float a3, float a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11;
  uint64_t v12;
  double v13;
  double v14;
  double v15;
  double v16;
  void *v17;

  v11 = RBDrawingStateBeginLayer();
  if (a4 != 0.0)
  {
    v12 = *(_QWORD *)(a6 + 16);
    objc_msgSend(*(id *)(v12 + 32), sel_setInfinite);
    v17 = *(void **)(v12 + 40);
    if (*(_DWORD *)(v12 + 64) != 2)
    {
      RBColorFromLinear();
      a1 = *(float *)&v13;
      a2 = *(float *)&v14;
      a3 = *(float *)&v15;
      a4 = *(float *)&v16;
    }
    *(float *)&v13 = a1;
    *(float *)&v14 = a2;
    *(float *)&v15 = a3;
    *(float *)&v16 = a4;
    objc_msgSend(v17, sel_setColor_, v13, v14, v15, v16);
    *(_QWORD *)(v12 + 264) = 0;
    swift_release();
    RBDrawingStateDrawShape();
  }
  return v11;
}

uint64_t GraphicsContext.Shading.isMultiLevel(in:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  int v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;

  v3 = *(_QWORD *)v1;
  v4 = *(_QWORD *)(v1 + 8);
  v5 = *(_QWORD *)(v1 + 16);
  v6 = *(_QWORD *)(v1 + 24);
  v7 = *(_QWORD *)(v1 + 32);
  v8 = *(_QWORD *)(v1 + 40);
  v10 = *(_QWORD *)(v1 + 48);
  v9 = *(_QWORD *)(v1 + 56);
  v11 = *(_QWORD *)(v1 + 64);
  v12 = *(unsigned __int8 *)(v1 + 72);
  if (v12 == 4)
  {
    v14 = *(_QWORD *)(a1 + 56);
    v21 = *(_QWORD *)(v1 + 56);
    outlined copy of GraphicsContext.Shading.Storage((void *)v3, v4, v5, v6, v7, v8, v10, v9, v11, 4);
    swift_retain();
    v15 = swift_retain();
    v20 = specialized ShapeStyle.isMultiLevel(in:)(v15, v14, v3);
    swift_release();
    swift_release();
    outlined consume of GraphicsContext.Shading.Storage((void *)v3, v4, v5, v6, v7, v8, v10, v21, v11, 4);
    return v20 & 1;
  }
  else
  {
    if (v12 == 8)
    {
      v13 = *(_QWORD *)(v3 + 16) > 1uLL;
    }
    else if (v12 == 10 && !(v4 | v3 | v5 | v6 | v7 | v8 | v10 | v9 | v11))
    {
      v17 = *(unsigned __int8 *)(a1 + 240);
      if (v17 == 2)
      {
        v18 = *(_QWORD *)(a1 + 56);
        swift_retain();
        v19 = swift_retain();
        v13 = specialized ShapeStyle.isMultiLevel(in:)(v19, v18);
        swift_release();
        swift_release();
        *(_BYTE *)(a1 + 240) = v13 & 1;
      }
      else
      {
        v13 = v17 & 1;
      }
    }
    else
    {
      v13 = 0;
    }
    return v13 & 1;
  }
}

_QWORD *GraphicsContext.addVariableBlurFilter(radius:mask:flags:)(uint64_t a1, uint64_t a2, double a3)
{
  uint64_t *v3;
  uint64_t *v4;
  int v7;
  float *v8;
  float v9;
  float v10;
  float v11;
  float v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  int v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  unsigned __int8 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  _OWORD v35[4];
  uint64_t v36;
  uint64_t v37;
  char v38;
  int v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  _BYTE v43[160];
  _OWORD v44[2];
  char v45;
  _QWORD v46[20];
  _BYTE v47[168];

  v4 = v3;
  outlined init with take of GraphicsContext.ResolvedShading(a1, (uint64_t)v46);
  outlined init with take of GraphicsContext.ResolvedShading((uint64_t)v46, (uint64_t)v47);
  v7 = _s7SwiftUI15GraphicsContextV15ResolvedShadingOWOg((uint64_t)v47);
  if (v7 == 8)
  {
    result = (_QWORD *)_s7SwiftUI15GraphicsContextV15ResolvedShadingOWOj0_((uint64_t)v47);
    if (*(_QWORD *)(*result + 16))
    {
      outlined init with take of GraphicsContext.ResolvedShading(*result + 32, (uint64_t)v43);
      outlined init with take of GraphicsContext.ResolvedShading((uint64_t)v43, (uint64_t)v35);
      return (_QWORD *)GraphicsContext.addVariableBlurFilter(radius:mask:flags:)(v35, a2, a3);
    }
    else
    {
      __break(1u);
    }
  }
  else if (v7 == 4)
  {
    v16 = _s7SwiftUI15GraphicsContextV15ResolvedShadingOWOj0_((uint64_t)v47);
    v33 = *(_OWORD *)(v16 + 16);
    v34 = *(_OWORD *)v16;
    v31 = *(_OWORD *)(v16 + 48);
    v32 = *(_OWORD *)(v16 + 32);
    v17 = *(_QWORD *)(v16 + 64);
    v18 = *(_QWORD *)(v16 + 72);
    v19 = *(_BYTE *)(v16 + 80);
    v20 = *(_DWORD *)(v16 + 84);
    v21 = *(_QWORD *)(v16 + 88);
    v22 = *(_BYTE *)(v16 + 96);
    v30 = *(_QWORD *)(v16 + 104);
    outlined init with take of GraphicsContext.ResolvedShading((uint64_t)v46, (uint64_t)v43);
    v23 = _s7SwiftUI15GraphicsContextV15ResolvedShadingOWOj0_((uint64_t)v43);
    v24 = *(_QWORD *)(v23 + 88);
    v25 = *(_BYTE *)(v23 + 96);
    outlined copy of _ShapeStyle_Pack.Fill(*(id *)v23, *(_QWORD *)(v23 + 8), *(void **)(v23 + 16), *(void **)(v23 + 24), *(_QWORD *)(v23 + 32), *(_QWORD *)(v23 + 40), *(_QWORD *)(v23 + 48), *(_QWORD *)(v23 + 56), *(_QWORD *)(v23 + 64), *(_QWORD *)(v23 + 72), *(_BYTE *)(v23 + 80));
    outlined copy of GraphicsBlendMode?(v24, v25);
    swift_bridgeObjectRetain();
    v26 = RBDrawingStateBeginLayer();
    v27 = *v3;
    v35[0] = v34;
    v35[1] = v33;
    v35[2] = v32;
    v35[3] = v31;
    v36 = v17;
    v37 = v18;
    v38 = v19;
    v39 = v20;
    v40 = v21;
    v41 = v22;
    v42 = v30;
    memset(v44, 0, sizeof(v44));
    v45 = 1;
    GraphicsContext.draw(style:bounds:in:alpha:blendMode:)((uint64_t *)v35, (uint64_t)v44, v26, 0, v27, 1.0);
    RBDrawingStateAddVariableBlurLayer();
    return outlined retain of GraphicsContext.ResolvedShading(v46, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of GraphicsContext.ResolvedShading);
  }
  else if (v7)
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      v28 = RBDrawingStateInit();
      type metadata accessor for GraphicsContext.Storage();
      swift_allocObject();
      v29 = swift_retain();
      *v4 = GraphicsContext.Storage.init(_:state:ownsState:resetBlending:)(v29, v28, 1, 0);
      swift_release();
    }
    outlined init with take of GraphicsContext.ResolvedShading((uint64_t)v46, (uint64_t)v43);
    swift_retain();
    GraphicsContext.Storage.Shared.setShading(_:)((uint64_t)v43);
    swift_release();
    return (_QWORD *)RBDrawingStateAddVariableBlurFilter();
  }
  else
  {
    v8 = (float *)_s7SwiftUI15GraphicsContextV15ResolvedShadingOWOj0_((uint64_t)v47);
    v9 = *v8;
    v10 = v8[1];
    v11 = v8[2];
    v12 = v8[3];
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      v13 = RBDrawingStateInit();
      type metadata accessor for GraphicsContext.Storage();
      swift_allocObject();
      v14 = swift_retain();
      *v4 = GraphicsContext.Storage.init(_:state:ownsState:resetBlending:)(v14, v13, 1, 0);
      swift_release();
    }
    GraphicsContext.beginLayerWithBackdrop(color:in:)(v9, v10, v11, v12, *(_QWORD *)(*v4 + 24), *v4);
    return (_QWORD *)RBDrawingStateAddVariableBlurLayer();
  }
  return result;
}

id RBShape.setRenderingMode(style:shapeDistance:)(double a1)
{
  void *v1;
  uint64_t v4;

  if ((~*(_QWORD *)&a1 & 0x7FF0000000000000) == 0 && (*(_QWORD *)&a1 & 0xFFFFFFFFFFFFFLL) != 0)
    return objc_msgSend(v1, sel_setRenderingMode_, a1);
  if (a1 < 0.0)
    v4 = 3;
  else
    v4 = 2;
  objc_msgSend(v1, sel_setRenderingMode_, v4);
  return objc_msgSend(v1, sel_setRenderingModeArgument_, a1);
}

id RBShape.setPath(_:style:shapeDistance:)(uint64_t a1, char a2, double a3)
{
  void *v3;
  void *v4;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  uint64_t v13;
  double v14;
  double v15;
  double v16;
  double v17;
  int8x16_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD v22[6];
  _BYTE v23[40];
  int8x16_t v24;
  int8x16_t v25;
  char v26;
  CGRect v27;
  CGRect v28;

  v4 = v3;
  outlined init with take of Path.Storage(a1, (uint64_t)v23);
  outlined init with take of Path.Storage((uint64_t)v23, (uint64_t)&v24);
  switch(v26)
  {
    case 0:
      objc_msgSend(v3, sel_setRect_, *(_OWORD *)&v24, *(_OWORD *)&v25);
      break;
    case 1:
      objc_msgSend(v3, sel_setEllipseInRect_, *(_OWORD *)&v24, *(_OWORD *)&v25);
      break;
    case 2:
      v7 = *(double *)(v24.i64[0] + 16);
      v8 = *(double *)(v24.i64[0] + 24);
      v9 = *(double *)(v24.i64[0] + 32);
      v10 = *(double *)(v24.i64[0] + 40);
      v11 = *(double *)(v24.i64[0] + 48);
      v12 = *(double *)(v24.i64[0] + 56);
      v13 = *(unsigned __int8 *)(v24.i64[0] + 64);
      v27.origin.x = v7;
      v27.origin.y = v8;
      v27.size.width = v9;
      v27.size.height = v10;
      v14 = fabs(CGRectGetWidth(v27)) * 0.5;
      v28.origin.x = v7;
      v28.origin.y = v8;
      v28.size.width = v9;
      v28.size.height = v10;
      v15 = fabs(CGRectGetHeight(v28)) * 0.5;
      if (v15 >= v14)
        v15 = v14;
      if (v15 >= v11)
        v16 = v11;
      else
        v16 = v15;
      if (v15 >= v12)
        v17 = v12;
      else
        v17 = v15;
      objc_msgSend(v4, sel_setRoundedRect_cornerSize_cornerStyle_, v13, v7, v8, v9, v10, v16, v17);
      break;
    case 6:
      v18 = vorrq_s8(v24, v25);
      if (vorr_s8(*(int8x8_t *)v18.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v18, v18, 8uLL)))
        goto LABEL_15;
      objc_msgSend(v3, sel_setEmpty);
      break;
    default:
LABEL_15:
      Path.retainRBPath()();
      v22[0] = 0x3FF0000000000000;
      v22[1] = 0;
      v22[2] = 0;
      v22[3] = 0x3FF0000000000000;
      v22[4] = 0;
      v22[5] = 0;
      objc_msgSend(v3, sel_setRBPath_transform_, v19, v20, v22);
      objc_msgSend(v3, sel_setEOFill_, a2 & 1);
      RBPathRelease();
      break;
  }
  return RBShape.setRenderingMode(style:shapeDistance:)(a3);
}

id RBShape.setStrokedPath(_:style:)(uint64_t a1, double *a2)
{
  void *v2;
  void *v3;
  uint64_t v5;
  uint64_t v6;
  double v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  double v11;
  uint64_t v12;
  uint64_t v13;
  id result;
  CGPoint v15;
  CGSize v16;
  double Width;
  CGFloat v18;
  CGFloat v19;
  double v20;
  uint64_t v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double Height;
  double v28;
  double v29;
  int8x16_t v30;
  _QWORD v31[6];
  _BYTE v32[40];
  int8x16_t v33;
  int8x16_t v34;
  char v35;
  CGRect v36;
  CGRect v37;
  CGRect v38;
  CGRect v39;
  CGRect v40;
  CGRect v41;
  CGRect v42;

  v3 = v2;
  v5 = *((_QWORD *)a2 + 3);
  v6 = *(_QWORD *)(v5 + 16);
  if (v6)
  {
LABEL_2:
    Path.retainRBPath()();
    v7 = *a2;
    v8 = *((unsigned int *)a2 + 2);
    v9 = *((unsigned int *)a2 + 3);
    v10 = a2[2];
    v11 = a2[4];
    v31[0] = 0x3FF0000000000000;
    v31[1] = 0;
    v31[2] = 0;
    v31[3] = 0x3FF0000000000000;
    v31[4] = 0;
    v31[5] = 0;
    objc_msgSend(v2, sel_setStrokedRBPath_transform_lineWidth_lineCap_lineJoin_miterLimit_dashPhase_dashPattern_dashCount_, v12, v13, v31, v8, v9, v5 + 32, v7, v10, v11, v6);
    return (id)RBPathRelease();
  }
  else
  {
    outlined init with take of Path.Storage(a1, (uint64_t)v32);
    outlined init with take of Path.Storage((uint64_t)v32, (uint64_t)&v33);
    switch(v35)
    {
      case 0:
        if (*((_DWORD *)a2 + 3) || a2[2] < 1.4142)
          goto LABEL_2;
        result = objc_msgSend(v2, sel_setStrokedRect_lineWidth_, *(_OWORD *)&v33, *(_OWORD *)&v34, *a2);
        break;
      case 1:
        v15 = (CGPoint)v33;
        v16 = (CGSize)v34;
        v36.origin = (CGPoint)v33;
        v36.size = (CGSize)v34;
        Width = CGRectGetWidth(v36);
        v37.origin = v15;
        v37.size = v16;
        if (Width != CGRectGetHeight(v37))
          goto LABEL_2;
        v38.origin = v15;
        v38.size = v16;
        v18 = v15.x + CGRectGetWidth(v38) * 0.5;
        v39.origin = v15;
        v39.size = v16;
        v19 = v15.y + CGRectGetHeight(v39) * 0.5;
        v40.origin = v15;
        v40.size = v16;
        result = objc_msgSend(v2, sel_setStrokedCircleAtPoint_radius_lineWidth_, v18, v19, CGRectGetWidth(v40) * 0.5, *a2);
        break;
      case 2:
        v20 = *(double *)(v33.i64[0] + 48);
        if (v20 != *(double *)(v33.i64[0] + 56))
          goto LABEL_2;
        v21 = *(unsigned __int8 *)(v33.i64[0] + 64);
        v23 = *(double *)(v33.i64[0] + 32);
        v22 = *(double *)(v33.i64[0] + 40);
        v25 = *(double *)(v33.i64[0] + 16);
        v24 = *(double *)(v33.i64[0] + 24);
        v41.origin.x = v25;
        v41.origin.y = v24;
        v41.size.width = v23;
        v41.size.height = v22;
        v26 = CGRectGetWidth(v41);
        v42.origin.x = v25;
        v42.origin.y = v24;
        v42.size.width = v23;
        v42.size.height = v22;
        Height = CGRectGetHeight(v42);
        if (Height >= v26)
          Height = v26;
        v28 = Height * 0.5;
        if (v28 >= v20)
          v29 = v20;
        else
          v29 = v28;
        result = objc_msgSend(v3, sel_setStrokedRoundedRect_cornerRadius_cornerStyle_lineWidth_, v21, v25, v24, v23, v22, v29, *a2);
        break;
      case 6:
        v30 = vorrq_s8(v33, v34);
        if (vorr_s8(*(int8x8_t *)v30.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v30, v30, 8uLL)))
          goto LABEL_2;
        result = objc_msgSend(v2, sel_setEmpty);
        break;
      default:
        goto LABEL_2;
    }
  }
  return result;
}

id outlined copy of GraphicsContext.ResolvedShading(id result, uint64_t a2, void *a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, unint64_t a13)
{
  switch(a13 >> 60)
  {
    case 3uLL:
      return result;
    case 4uLL:
      outlined copy of _ShapeStyle_Pack.Fill(result, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
      outlined copy of GraphicsBlendMode?(a12, a13);
      goto LABEL_5;
    case 5uLL:
    case 8uLL:
      goto LABEL_5;
    case 6uLL:
      swift_bridgeObjectRetain();
LABEL_5:
      result = (id)swift_bridgeObjectRetain();
      break;
    case 7uLL:
      result = outlined copy of GraphicsImage.Contents?(result, a2);
      break;
    default:
      return result;
  }
  return result;
}

void outlined consume of GraphicsContext.ResolvedShading(void *a1, uint64_t a2, unint64_t a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, unint64_t a13)
{
  switch(a13 >> 60)
  {
    case 3uLL:

      return;
    case 4uLL:
      outlined consume of _ShapeStyle_Pack.Fill((unint64_t)a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
      outlined consume of GraphicsBlendMode?(a12, a13);
      goto LABEL_5;
    case 5uLL:
    case 8uLL:
      goto LABEL_5;
    case 6uLL:
      swift_bridgeObjectRelease();
LABEL_5:
      swift_bridgeObjectRelease();
      break;
    case 7uLL:
      outlined consume of GraphicsImage.Contents?(a1, a2);
      break;
    default:
      return;
  }
}

uint64_t type metadata accessor for GraphicsContext.Storage()
{
  return objc_opt_self();
}

id closure #1 in RBFill.setImage(_:destRect:in:)(unsigned int a1, uint64_t a2, void *a3, uint64_t a4, int a5, CGFloat a6, CGFloat a7, CGFloat a8, CGFloat a9)
{
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  int v24;
  double v25;
  int v26;
  double v27;
  double v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  char v32;
  double v33;
  double v34;
  double v35;
  double v36;
  CGFloat a;
  CGFloat b;
  CGFloat c;
  CGFloat d;
  CGFloat tx;
  CGFloat ty;
  uint64_t v43;
  CGFloat v45;
  CGFloat v46;
  CGFloat Height;
  uint64_t v48;
  double v49;
  CGFloat v50;
  CGFloat v51;
  CGFloat v52;
  CGFloat v53;
  CGFloat v54;
  double v55;
  double v56;
  unsigned int v57;
  unsigned int v58;
  unsigned int v59;
  double v60;
  CGAffineTransform v61;
  CGAffineTransform t2;
  CGAffineTransform t1;
  CGAffineTransform v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  int v68;
  _BYTE v69[20];
  _DWORD v70[4];
  char v71;
  CGRect v72;
  CGRect v73;

  outlined init with take of GraphicsContext.ResolvedShading?(a4 + 44, (uint64_t)v69, &lazy cache variable for type metadata for Color.Resolved?);
  outlined init with take of GraphicsContext.ResolvedShading?((uint64_t)v69, (uint64_t)v70, &lazy cache variable for type metadata for Color.Resolved?);
  if ((v71 & 1) != 0)
  {
    v18 = 0;
    v19 = *MEMORY[0x24BE7EFA0];
    v20 = *(_DWORD *)(MEMORY[0x24BE7EFA0] + 4);
    v21 = *(_DWORD *)(MEMORY[0x24BE7EFA0] + 8);
    v22 = *(_DWORD *)(MEMORY[0x24BE7EFA0] + 12);
  }
  else
  {
    v19 = v70[0];
    v20 = v70[1];
    v21 = v70[2];
    v22 = v70[3];
    if (a5 != 2)
    {
      RBColorFromLinear();
      v20 = v23;
    }
    v18 = 1;
  }
  v24 = *(unsigned __int8 *)(a4 + 96);
  v58 = v21;
  v59 = v19;
  v57 = v22;
  if (v24 == 2)
  {
    v25 = 0.0;
    v26 = 1;
    v60 = 0.0;
    v27 = 0.0;
    v28 = 0.0;
  }
  else
  {
    v27 = *(double *)(a4 + 80);
    v28 = *(double *)(a4 + 88);
    v26 = v24 & 1;
    v25 = *(double *)(a4 + 64);
    v60 = *(double *)(a4 + 72);
  }
  v29 = *(_OWORD *)(a4 + 80);
  v66 = *(_OWORD *)(a4 + 64);
  v67 = v29;
  v68 = *(_DWORD *)(a4 + 96);
  v30 = *(_OWORD *)(a4 + 16);
  *(_OWORD *)&v64.a = *(_OWORD *)a4;
  *(_OWORD *)&v64.c = v30;
  v31 = *(_OWORD *)(a4 + 48);
  *(_OWORD *)&v64.tx = *(_OWORD *)(a4 + 32);
  v65 = v31;
  v32 = GraphicsImage.bitmapOrientation.getter();
  if (v25 == 0.0 && v60 == 0.0 && v27 == 0.0 && v28 == 0.0)
  {
    if (!v26)
      __asm { BR              X10 }
    RBImageSimpleTransform();
    b = v64.b;
    a = v64.a;
    d = v64.d;
    c = v64.c;
    ty = v64.ty;
    tx = v64.tx;
    if (v32)
    {
      specialized CGAffineTransform.init(orientation:in:)(v32);
      t1 = v64;
      t2 = v64;
      CGAffineTransformConcat(&v61, &t1, &t2);
      a = v61.a;
      b = v61.b;
      c = v61.c;
      d = v61.d;
      tx = v61.tx;
      ty = v61.ty;
    }
    v43 = dword_2352A2F40[*(char *)(a4 + 98)];
    t1.a = a;
    t1.b = b;
    t1.c = c;
    t1.d = d;
    t1.tx = tx;
    t1.ty = ty;
    LODWORD(v35) = v58;
    LODWORD(v33) = v59;
    LODWORD(v34) = v20;
    LODWORD(v36) = v57;
    return objc_msgSend(a3, sel_setRBImage_transform_interpolation_tintColor_flags_, a1, a2, &t1, v43, v18, v33, v34, v35, v36);
  }
  else
  {
    v56 = v25;
    if (*(double *)(a4 + 16) != 0.0)
      __asm { BR              X10 }
    v55 = 1.0 / 0.0;
    v54 = a6;
    RBImageSimpleTransform();
    v45 = v64.b;
    v46 = v64.tx;
    if (v32)
    {
      specialized CGAffineTransform.init(orientation:in:)(v32);
      t1 = v64;
      t2 = v64;
      CGAffineTransformConcat(&v61, &t1, &t2);
      v45 = v61.b;
      v53 = v61.c;
      v46 = v61.tx;
      v51 = v61.a;
      v52 = v61.d;
      v50 = v61.ty;
    }
    else
    {
      v52 = v64.d;
      v53 = v64.c;
      v50 = v64.ty;
      v51 = v64.a;
    }
    v72.origin.x = v54;
    v72.origin.y = a7;
    v72.size.width = a8;
    v72.size.height = a9;
    v49 = v55 * CGRectGetWidth(v72);
    v73.origin.x = v54;
    v73.origin.y = a7;
    v73.size.width = a8;
    v73.size.height = a9;
    Height = CGRectGetHeight(v73);
    v48 = dword_2352A2F40[*(char *)(a4 + 98)];
    t1.a = v51;
    t1.b = v45;
    t1.c = v53;
    t1.d = v52;
    t1.tx = v46;
    t1.ty = v50;
    return objc_msgSend(a3, sel_set9PartRBImage_transform_destinationRect_capInsets_repeat_interpolation_tintColor_flags_, a1, a2, &t1, v26 ^ 1u, v48, v18, 0.0, 0.0, v49, 1.0 / 0.0 * Height, v56 * (1.0 / 0.0), v60 * v55, v27 * (1.0 / 0.0), v28 * v55, __PAIR64__(v20, v59), __PAIR64__(v57, v58));
  }
}

void closure #1 in RBFill.setRepeatedImage(_:origin:scale:sourceRect:in:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __asm { BR              X10 }
}

id sub_234DD7B3C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, CGAffineTransform *a7, CGAffineTransform *t2, double a9, double a10, double a11, double a12, double a13, double a14, double a15, CGAffineTransform *t1, __int128 a17, __int128 a18, __int128 a19, __int128 a20,__int128 a21,__int128 a22,int t2_8,uint64_t t2_16,uint64_t t2_24,uint64_t t2_32,uint64_t t2_40,uint64_t t1a,uint64_t t1_8,uint64_t t1_16,uint64_t t1_24,uint64_t t1_32,uint64_t t1_40,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42)
{
  void *v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int v45;
  int v46;
  double v47;
  double v48;
  CGFloat a;
  CGFloat b;
  CGFloat c;
  CGFloat d;
  CGFloat tx;
  CGFloat ty;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  char v58;
  double v59;
  double v60;
  double v61;
  double v62;
  uint64_t v63;
  int v64;
  int v65;
  int v66;
  int v67;
  uint64_t v68;
  CGAffineTransform v74;
  CGAffineTransform v75;
  CGAffineTransform v76;
  CGAffineTransform v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  int v81;

  RBTiledImageTransform();
  b = v77.b;
  a = v77.a;
  d = v77.d;
  c = v77.c;
  ty = v77.ty;
  tx = v77.tx;
  v55 = *(_OWORD *)(v44 + 80);
  v79 = *(_OWORD *)(v44 + 64);
  v80 = v55;
  v81 = *(_DWORD *)(v44 + 96);
  v56 = *(_OWORD *)(v44 + 16);
  *(_OWORD *)&v77.a = *(_OWORD *)v44;
  *(_OWORD *)&v77.c = v56;
  v57 = *(_OWORD *)(v44 + 48);
  *(_OWORD *)&v77.tx = *(_OWORD *)(v44 + 32);
  v78 = v57;
  v58 = GraphicsImage.bitmapOrientation.getter();
  if (v58)
  {
    specialized CGAffineTransform.init(orientation:in:)(v58);
    v76 = v77;
    v75.a = a;
    v75.b = b;
    v75.c = c;
    v75.d = d;
    v75.tx = tx;
    v75.ty = ty;
    CGAffineTransformConcat(&v74, &v76, &v75);
    a = v74.a;
    b = v74.b;
    c = v74.c;
    d = v74.d;
    tx = v74.tx;
    ty = v74.ty;
  }
  outlined init with take of GraphicsContext.ResolvedShading?(v44 + 44, (uint64_t)&v74, &lazy cache variable for type metadata for Color.Resolved?);
  outlined init with take of GraphicsContext.ResolvedShading?((uint64_t)&v74, (uint64_t)&v75, &lazy cache variable for type metadata for Color.Resolved?);
  if ((LOBYTE(v75.c) & 1) != 0)
  {
    v63 = 0;
    LODWORD(v59) = *MEMORY[0x24BE7EFA0];
    LODWORD(v60) = *(_DWORD *)(MEMORY[0x24BE7EFA0] + 4);
    LODWORD(v61) = *(_DWORD *)(MEMORY[0x24BE7EFA0] + 8);
    LODWORD(v62) = *(_DWORD *)(MEMORY[0x24BE7EFA0] + 12);
  }
  else
  {
    LODWORD(v60) = HIDWORD(v75.a);
    LODWORD(v59) = LODWORD(v75.a);
    LODWORD(v62) = HIDWORD(v75.b);
    LODWORD(v61) = LODWORD(v75.b);
    if (v46 != 2)
    {
      RBColorFromLinear();
      LODWORD(v59) = v64;
      LODWORD(v60) = v65;
      LODWORD(v61) = v66;
      LODWORD(v62) = v67;
    }
    v63 = 1;
  }
  v68 = dword_2352A2F40[*(char *)(v44 + 98)];
  v76.a = a;
  v76.b = b;
  v76.c = c;
  v76.d = d;
  v76.tx = tx;
  v76.ty = ty;
  return objc_msgSend(v42, sel_setTiledRBImage_transform_sourceRect_interpolation_tintColor_flags_, v45, v43, &v76, v68, v63, v48, v47, a14, a15, v59, v60, v61, v62, *(_QWORD *)&v48, *(_QWORD *)&v47, *(_QWORD *)&a14, *(_QWORD *)&a15);
}

id closure #2 in RBFill.setImage(_:destRect:in:)(id a1, int a2)
{
  if (a2 != 2)
    RBColorFromLinear();
  return objc_msgSend(a1, sel_setColor_);
}

uint64_t GraphicsContext.Storage.Shared.setColor(_:)(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  BOOL v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  float (*v8)(uint64_t *);
  float v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  double v16;
  double v17;
  double v18;
  double v19;
  uint64_t v20;
  uint64_t v21;

  v2 = v1;
  v3 = *(_QWORD *)(v1 + 264);
  if (v3)
    v4 = v3 == result;
  else
    v4 = 0;
  if (!v4)
  {
    v5 = result;
    v6 = *(void **)(v2 + 40);
    v7 = *(_QWORD *)(v2 + 56);
    v20 = *(_QWORD *)(v2 + 48);
    v21 = v7;
    v8 = *(float (**)(uint64_t *))(*(_QWORD *)result + 104);
    swift_retain();
    swift_retain();
    v9 = v8(&v20);
    v11 = v10;
    v13 = v12;
    v15 = v14;
    swift_release();
    swift_release();
    if (*(_DWORD *)(v2 + 64) != 2)
    {
      RBColorFromLinear();
      v9 = *(float *)&v16;
      v11 = LODWORD(v17);
      v13 = LODWORD(v18);
      v15 = LODWORD(v19);
    }
    *(float *)&v16 = v9;
    LODWORD(v17) = v11;
    LODWORD(v18) = v13;
    LODWORD(v19) = v15;
    objc_msgSend(v6, sel_setColor_, v16, v17, v18, v19, v20, v21);
    *(_QWORD *)(v2 + 264) = v5;
    swift_retain();
    return swift_release();
  }
  return result;
}

uint64_t GraphicsContext.Storage.Shared.setGradient(_:geometry:options:in:colorSpace:)(uint64_t a1, __int128 *a2, uint64_t a3, __int128 *a4)
{
  uint64_t v5;
  char v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13[3];
  uint64_t v14;
  char v15;
  _BYTE v16[56];

  v5 = *(_QWORD *)a1;
  v6 = *(_BYTE *)(a1 + 8);
  v7 = outlined init with take of GraphicsContext.GradientGeometry(a2, (uint64_t)v16);
  v8 = *a4;
  if ((v6 & 1) != 0)
    goto LABEL_7;
  v9 = *(_QWORD *)(v5 + 16);
  if (v9 != 1)
  {
    if (!v9)
    {
      v10 = one-time initialization token for clear;
      swift_bridgeObjectRetain();
      if (v10 != -1)
        swift_once();
      v11 = static Color.clear;
      swift_retain();
      outlined consume of EitherGradient(v5, 0);
      goto LABEL_9;
    }
LABEL_7:
    v14 = v5;
    v15 = v6;
    *(_OWORD *)v13 = v8;
    MEMORY[0x24BDAC7A8](v7);
    return withGradient(_:in:colorSpace:do:)((uint64_t)&v14, v13);
  }
  v11 = *(_QWORD *)(v5 + 32);
  swift_retain();
LABEL_9:
  GraphicsContext.Storage.Shared.setColor(_:)(v11);
  return swift_release();
}

_BYTE *GraphicsContext.Storage.Shared.setMeshGradient(locations:colors:width:height:background:flags:)(_BYTE *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if ((result[8] & 1) != 0)
  {
    if ((unsigned __int128)(a4 * (__int128)a5) >> 64 == (a4 * a5) >> 63)
    {
      v7 = 2;
LABEL_6:
      LODWORD(v8) = a6;
      return objc_msgSend(*(id *)(v6 + 40), sel_setMeshGradientType_positions_colors_count_width_background_colorSpace_flags_, v7, *(_QWORD *)result + 32, a2, a4 * a5, a4, 2, v8);
    }
    __break(1u);
  }
  else if ((unsigned __int128)(a4 * (__int128)a5) >> 64 == (a4 * a5) >> 63)
  {
    v7 = 1;
    goto LABEL_6;
  }
  __break(1u);
  return result;
}

uint64_t GraphicsContext.Storage.Shared.setGradient(_:geometry:options:in:)(uint64_t *a1, __int128 *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  double v8;
  double v9;
  double v10;
  double v11;
  char v12;
  void *v13;
  uint64_t v15;
  char v16;
  _BYTE v17[56];

  v3 = v2;
  v4 = *a1;
  v5 = *((_BYTE *)a1 + 8);
  outlined init with take of GraphicsContext.GradientGeometry(a2, (uint64_t)v17);
  v15 = v4;
  v16 = v5;
  v6 = ResolvedGradient.constantColor.getter();
  if ((v12 & 1) != 0)
  {
    v15 = v4;
    v16 = v5;
    MEMORY[0x24BDAC7A8](v6);
    return withGradient(_:in:do:)((uint64_t)&v15);
  }
  else
  {
    LODWORD(v9) = HIDWORD(v6);
    LODWORD(v8) = v6;
    LODWORD(v11) = HIDWORD(v7);
    LODWORD(v10) = v7;
    v13 = *(void **)(v2 + 40);
    if (*(_DWORD *)(v3 + 64) != 2)
      RBColorFromLinear();
    objc_msgSend(v13, sel_setColor_, v8, v9, v10, v11);
    *(_QWORD *)(v3 + 264) = 0;
    return swift_release();
  }
}

void GraphicsContext.Storage.Shared.setGradient(count:colors:locations:geometry:flags:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __asm { BR              X13 }
}

uint64_t sub_234DD8150@<X0>(uint64_t a1@<X2>, uint64_t a2@<X5>, uint64_t a3@<X6>, uint64_t a4@<X8>)
{
  double v4;
  double v5;
  uint64_t v6;
  double v7;
  double v8;

  objc_msgSend(*(id *)(v6 + 40), sel_setAxialGradientStartPoint_endPoint_stopCount_colors_locations_flags_, a1, a4, a2, a3, v8, v7, v4, v5);
  *(_QWORD *)(v6 + 264) = 0;
  return swift_release();
}

void closure #1 in GraphicsContext.Storage.Shared.setGradient(_:geometry:options:in:colorSpace:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, __int128 *a6)
{
  _BYTE v9[56];

  outlined init with take of GraphicsContext.GradientGeometry(a6, (uint64_t)v9);
  GraphicsContext.Storage.Shared.setGradient(count:colors:locations:geometry:flags:)(a1, a2, a3, (uint64_t)v9);
}

uint64_t withGradient(_:in:do:)(uint64_t a1)
{
  char v1;
  _BYTE *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  if (*(_QWORD *)(*(_QWORD *)a1 + 16))
  {
    v1 = 0;
    v2 = (_BYTE *)(*(_QWORD *)a1 + 72);
    v3 = *(_QWORD *)(*(_QWORD *)a1 + 16);
    do
    {
      if ((v1 & 1) != 0)
        v1 = 1;
      else
        v1 = *v2 ^ 1;
      v2 += 48;
      --v3;
    }
    while (v3);
  }
  MEMORY[0x24BDAC7A8](a1);
  MEMORY[0x24BDAC7A8](v4);
  type metadata accessor for RBColor(0);
  MEMORY[0x24BDAC7A8](v5);
  return AGTupleWithBuffer();
}

unint64_t closure #1 in withGradient(_:in:colorSpace:do:)(unint64_t result, float *a2, _QWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
  unint64_t v7;
  uint64_t v11;
  uint64_t v12;
  float (*v13)(_QWORD *);
  float v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  float v21;
  int v22;
  int v23;
  int v24;
  _QWORD v25[2];

  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_7;
  }
  v7 = result;
  if (*(_QWORD *)(a4 + 16) <= result)
  {
LABEL_7:
    __break(1u);
    return result;
  }
  v11 = a4 + 32;
  v12 = *(_QWORD *)(a4 + 32 + 16 * result);
  v25[0] = a5;
  v25[1] = a6;
  v13 = *(float (**)(_QWORD *))(*(_QWORD *)v12 + 104);
  swift_retain();
  v14 = v13(v25);
  v16 = v15;
  v18 = v17;
  v20 = v19;
  result = swift_release();
  if (a7 != 2)
  {
    result = RBColorFromLinear();
    v14 = v21;
    v16 = v22;
    v18 = v23;
    v20 = v24;
  }
  *a2 = v14;
  *((_DWORD *)a2 + 1) = v16;
  *((_DWORD *)a2 + 2) = v18;
  *((_DWORD *)a2 + 3) = v20;
  *a3 = *(_QWORD *)(v11 + 16 * v7 + 8);
  return result;
}

unint64_t closure #1 in withGradient(_:in:do:)(unint64_t result, _DWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, char a7)
{
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  int v14;
  int v15;
  double v16;
  double v17;
  double v18;
  double v19;

  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_12;
  }
  if (*(_QWORD *)(a4 + 16) <= result)
  {
LABEL_12:
    __break(1u);
    return result;
  }
  v10 = a4 + 48 * result;
  v12 = *(_DWORD *)(v10 + 32);
  v13 = *(_DWORD *)(v10 + 36);
  v11 = v10 + 32;
  v14 = *(_DWORD *)(v11 + 8);
  v15 = *(_DWORD *)(v11 + 12);
  if (a6 != 2)
    result = RBColorFromLinear();
  *a2 = v12;
  a2[1] = v13;
  a2[2] = v14;
  a2[3] = v15;
  *(_QWORD *)a3 = *(_QWORD *)(v11 + 16);
  if ((a7 & 1) != 0)
  {
    if ((*(_BYTE *)(v11 + 40) & 1) != 0)
    {
      v16 = 0.0;
      v17 = 1.0;
      v18 = 1.0;
      v19 = 0.0;
    }
    else
    {
      v19 = *(float *)(v11 + 24);
      v16 = *(float *)(v11 + 28);
      v18 = *(float *)(v11 + 32);
      v17 = *(float *)(v11 + 36);
    }
    *(double *)(a3 + 8) = v19;
    *(double *)(a3 + 16) = v16;
    *(double *)(a3 + 24) = v18;
    *(double *)(a3 + 32) = v17;
  }
  return result;
}

uint64_t closure #1 in withGradientStorage(count:valuesPerLocation:element:do:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if ((unsigned __int128)(a3 * (__int128)a4) >> 64 == (a3 * a4) >> 63)
  {
    MEMORY[0x24BDAC7A8](result);
    return AGTupleWithBuffer();
  }
  else
  {
    __break(1u);
  }
  return result;
}

void closure #1 in closure #1 in withGradientStorage(count:valuesPerLocation:element:do:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void (*a6)(void), uint64_t a7, uint64_t a8, void (*a9)(uint64_t, uint64_t))
{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  type metadata accessor for RBColor(0);
  if (v16 != a3)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  if (a1 != MEMORY[0x24BEE50B0])
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  if ((a5 & 0x8000000000000000) == 0)
  {
    if (!a5)
    {
LABEL_8:
      a9(a4, a2);
      return;
    }
    v17 = 0;
    v18 = a4;
    while ((unsigned __int128)(v17 * (__int128)a8) >> 64 == (v17 * a8) >> 63)
    {
      v19 = v17 + 1;
      a6();
      v18 += 16;
      v17 = v19;
      if (a5 == v19)
        goto LABEL_8;
    }
    __break(1u);
    goto LABEL_10;
  }
LABEL_12:
  __break(1u);
}

id partial apply for closure #1 in RBFill.setImage(_:destRect:in:)(unsigned int a1, uint64_t a2)
{
  uint64_t v2;

  return closure #1 in RBFill.setImage(_:destRect:in:)(a1, a2, *(void **)(v2 + 16), *(_QWORD *)(v2 + 24), *(_DWORD *)(v2 + 32), *(CGFloat *)(v2 + 40), *(CGFloat *)(v2 + 48), *(CGFloat *)(v2 + 56), *(CGFloat *)(v2 + 64));
}

void *outlined copy of GraphicsContext.Shading.Storage(void *result, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  id v10;

  switch(a10)
  {
    case 1:
    case 4:
    case 7:
    case 9:
      return (void *)swift_retain();
    case 3:
      v10 = result;
      swift_bridgeObjectRetain();
      goto LABEL_6;
    case 5:
      return (void *)outlined copy of EitherGradient((uint64_t)result, a2 & 1);
    case 6:
      swift_bridgeObjectRetain();
      swift_retain();
      goto LABEL_6;
    case 8:
LABEL_6:
      result = (void *)swift_bridgeObjectRetain();
      break;
    default:
      return result;
  }
  return result;
}

void *outlined consume of GraphicsContext.Shading?(void *result, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned __int8 a10)
{
  if (a10 != 255)
    return outlined consume of GraphicsContext.Shading.Storage(result, a2, a3, a4, a5, a6, a7, a8, a9, a10);
  return result;
}

void *outlined consume of GraphicsContext.Shading.Storage(void *result, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  switch(a10)
  {
    case 1:
    case 4:
    case 7:
    case 9:
      return (void *)swift_release();
    case 3:

      swift_bridgeObjectRelease();
      goto LABEL_6;
    case 5:
      return (void *)outlined consume of EitherGradient((uint64_t)result, a2 & 1);
    case 6:
      swift_release();
      swift_bridgeObjectRelease();
      goto LABEL_6;
    case 8:
LABEL_6:
      result = (void *)swift_bridgeObjectRelease();
      break;
    default:
      return result;
  }
  return result;
}

void *outlined copy of GraphicsContext.Shading?(void *result, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned __int8 a10)
{
  if (a10 != 255)
    return outlined copy of GraphicsContext.Shading.Storage(result, a2, a3, a4, a5, a6, a7, a8, a9, a10);
  return result;
}

uint64_t specialized ShapeStyle.isMultiLevel(in:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  _QWORD v5[3];
  char v6;
  uint64_t v7;
  unsigned __int8 v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  char v14;
  __int16 v15;

  memset(v5, 0, sizeof(v5));
  v6 = 5;
  v7 = 0;
  v8 = 5;
  v9 = a1;
  v10 = a2;
  v11 = 0u;
  v12 = 0u;
  v13 = 0;
  v14 = 1;
  v15 = 0;
  swift_retain();
  swift_retain();
  specialized ForegroundStyle._apply(to:)((uint64_t)v5);
  v2 = v7;
  v3 = v8;
  outlined copy of _ShapeStyle_Shape.Result(v7, v8);
  outlined consume of _ShapeStyle_Shape.Result(v2, v3);
  swift_release();
  swift_release();
  swift_release();
  if (v3 == 4)
  {
    if ((v2 & 1) != 0)
      return 1;
  }
  else
  {
    outlined consume of _ShapeStyle_Shape.Result(v2, v3);
  }
  return 0;
}

uint64_t specialized Sequence.compactMap<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  int64_t v4;
  _QWORD *v5;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  _BYTE v26[160];
  _BYTE v27[160];
  _BYTE v28[168];
  _QWORD *v29;

  v4 = a4 >> 1;
  if (a4 >> 1 == a3)
    return MEMORY[0x24BEE4AF8];
  result = swift_unknownObjectRetain();
  if (v4 > a3)
  {
    v9 = a3 + 1;
    v5 = (_QWORD *)MEMORY[0x24BEE4AF8];
    v10 = a2 + 80 * a3 + 40;
    v14 = v4;
    while (1)
    {
      v16 = v9;
      v29 = v5;
      v17 = *(void **)(v10 - 40);
      v18 = *(_QWORD *)(v10 - 32);
      v19 = *(_QWORD *)(v10 - 24);
      v20 = *(_QWORD *)(v10 - 16);
      v21 = *(_QWORD *)(v10 - 8);
      v15 = *(_QWORD *)v10;
      v22 = *(_QWORD *)(v10 + 8);
      v23 = *(_QWORD *)(v10 + 16);
      v24 = *(_QWORD *)(v10 + 24);
      v25 = *(_BYTE *)(v10 + 32);
      outlined copy of GraphicsContext.Shading.Storage(v17, v18, v19, v20, v21, *(_QWORD *)v10, v22, v23, v24, v25);
      GraphicsContext.Shading.resolve(in:levels:)();
      outlined consume of GraphicsContext.Shading.Storage(v17, v18, v19, v20, v21, v15, v22, v23, v24, v25);
      outlined init with take of GraphicsContext.ResolvedShading?((uint64_t)v26, (uint64_t)v27, &lazy cache variable for type metadata for GraphicsContext.ResolvedShading?);
      outlined init with take of GraphicsContext.ResolvedShading?((uint64_t)v27, (uint64_t)v28, &lazy cache variable for type metadata for GraphicsContext.ResolvedShading?);
      result = _s7SwiftUI15GraphicsContextV15ResolvedShadingOSgWOg((uint64_t)v28);
      if ((_DWORD)result == 1)
      {
        v11 = v14;
        v5 = v29;
      }
      else
      {
        v5 = v29;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5[2] + 1, 1, v5);
        v11 = v14;
        v13 = v5[2];
        v12 = v5[3];
        if (v13 >= v12 >> 1)
          v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v12 > 1), v13 + 1, 1, v5);
        outlined init with take of GraphicsContext.ResolvedShading?((uint64_t)v27, (uint64_t)v26, &lazy cache variable for type metadata for GraphicsContext.ResolvedShading?);
        v5[2] = v13 + 1;
        result = outlined init with take of GraphicsContext.ResolvedShading((uint64_t)v26, (uint64_t)&v5[20 * v13 + 4]);
      }
      if (v11 == v16)
        break;
      if (v16 >= a3)
      {
        v10 += 80;
        v9 = v16 + 1;
        if (v16 < v11)
          continue;
      }
      goto LABEL_18;
    }
    swift_unknownObjectRelease();
    return (uint64_t)v5;
  }
LABEL_18:
  __break(1u);
  return result;
}

BOOL specialized GraphicsContext.drawAsVector(image:rect:style:shading:)(uint64_t a1, uint64_t a2, uint64_t a3, CGFloat a4, CGFloat a5, double a6, double a7)
{
  int v7;
  int v8;
  _QWORD *v11;
  double v12;
  uint64_t v13;
  CGFloat v14;
  CGFloat v15;
  CGFloat v16;
  void *v17;
  CGFloat v18;
  CGFloat c;
  double a;
  double d;
  CGFloat v22;
  CGFloat v23;
  CGFloat tx;
  CGFloat ty;
  CGFloat b;
  CGFloat v27;
  CGFloat v28;
  uint64_t v29;
  void *v30;
  void *v31;
  id v32;
  id v33;
  double v34;
  CGFloat v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  CGFloat v39;
  CGFloat v40;
  uint64_t v41;
  void (*v42)(uint64_t);
  uint64_t v43;
  uint64_t v44;
  void (*v45)(uint64_t);
  uint64_t v46;
  uint64_t v47;
  uint64_t v52;
  CGFloat v53;
  uint64_t v54;
  int v55;
  unint64_t v56;
  int v57;
  uint64_t v58;
  id v59;
  CGFloat v60;
  CGFloat v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t updated;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  float v70;
  uint64_t v71;
  uint64_t v72;
  float v73;
  float v75;
  float v76;
  int v77;
  uint64_t v78;
  float v79;
  int v80;
  uint64_t v81;
  uint64_t v82;
  unsigned __int8 v83;
  uint64_t v84;
  unint64_t v85;
  unint64_t v86;
  int v87;
  CGAffineTransform *v88;
  id v89;
  void *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  id v94;
  unint64_t v95;
  float v96;
  float v97;
  char v98;
  float v99;
  float v100;
  float v101;
  uint64_t v102;
  uint64_t v103;
  unsigned __int8 v104;
  unsigned __int8 v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  unsigned __int8 v111;
  uint64_t v112;
  uint64_t v113;
  char v114;
  uint64_t v115;
  id v116;
  uint64_t v117;
  unint64_t v118;
  char v119;
  int v120;
  CGFloat v121;
  ValueMetadata *v122;
  _UNKNOWN **v123;
  _UNKNOWN **v124;
  CGFloat v125;
  CGFloat v126;
  id v127;
  id v128;
  uint64_t v129;
  char v130;
  char v131;
  double v132;
  uint64_t v133;
  uint64_t v134;
  float v135;
  float v136;
  float v137;
  uint64_t v139;
  unsigned __int8 v140;
  id v141;
  CGFloat v142;
  CGFloat v143;
  uint64_t v144;
  void *v145;
  id v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  id v152;
  uint64_t v153;
  void *v154;
  id v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  void *v159;
  void *v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  void *v165;
  uint64_t v166;
  char v167;
  uint64_t v168;
  uint64_t v169;
  char v170;
  uint64_t v171;
  char v172;
  uint64_t v173;
  uint64_t v174;
  CGFloat v175;
  CGFloat v176;
  CGFloat v177;
  CGFloat v178;
  CGFloat v179;
  CGFloat v180;
  CGFloat v181;
  unint64_t v183;
  double v184;
  __int128 v185;
  uint64_t v186;
  __int128 v187;
  uint64_t v188;
  __int128 v189;
  int v190;
  uint64_t v191;
  __int128 v192;
  unsigned __int8 v193;
  uint64_t v194;
  CGFloat v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  void *v199;
  void *v200;
  CGFloat v201;
  __int128 v202;
  __int128 v203;
  CGFloat v204;
  __int128 v205;
  __int128 v206;
  CGFloat v207;
  CGFloat v208;
  CGFloat v209;
  CGFloat v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  char v215;
  float v216;
  uint64_t v217;
  char v218;
  CGFloat v219;
  _QWORD v220[20];
  uint64_t v221[20];
  CGAffineTransform v222;
  CGAffineTransform t2;
  uint64_t v224;
  void *v225;
  uint64_t v226;
  unsigned __int8 v227;
  CGAffineTransform t1;
  uint64_t v229;
  void *v230;
  CGFloat v231;
  char v232;
  __int128 v233;
  __int128 v234;
  double v235;
  double v236;

  v7 = *(unsigned __int8 *)(a1 + 8);
  v8 = v7 & 0xFE;
  if (v8 == 2)
  {
    v11 = *(_QWORD **)a1;
    v12 = *(double *)(a1 + 16);
    v13 = *(unsigned __int8 *)(a1 + 40);
    v183 = *(_QWORD *)(a1 + 44);
    v184 = *(double *)(a1 + 52);
    LOBYTE(v198) = *(_BYTE *)(a1 + 60);
    v204 = *(double *)(a2 + 8);
    v14 = *(double *)(a2 + 32);
    v200 = *(void **)a2;
    v201 = *(double *)(a2 + 24);
    v15 = *(double *)(a2 + 40);
    *(_QWORD *)&v202 = *(_QWORD *)(a2 + 48);
    *((_QWORD *)&v202 + 1) = *(_QWORD *)(a2 + 16);
    v17 = *(void **)(a2 + 56);
    v16 = *(double *)(a2 + 64);
    LODWORD(v18) = *(unsigned __int8 *)(a2 + 72);
    *(double *)&v166 = COERCE_DOUBLE(RBDrawingStateBeginLayer());
    c = 0.0;
    if (v12 != 0.0)
      __asm { BR              X9 }
    v199 = v17;
    v171 = a3;
    a = a6 / 0.0;
    d = a7 / 0.0;
    if ((_DWORD)v13)
    {
      specialized CGAffineTransform.init(orientation:in:)(v13);
      v185 = v234;
      v187 = v233;
      v22 = v235;
      v23 = v236;
      CGAffineTransformMakeTranslation(&t1, a4, a5);
      v189 = *(_OWORD *)&t1.c;
      v192 = *(_OWORD *)&t1.a;
      tx = t1.tx;
      ty = t1.ty;
      CGAffineTransformMakeTranslation(&t1, -a4, -a5);
      *(_OWORD *)&t2.a = v187;
      *(_OWORD *)&t2.c = v185;
      t2.tx = v22;
      t2.ty = v23;
      CGAffineTransformConcat(&v222, &t1, &t2);
      t1 = v222;
      *(_OWORD *)&t2.a = v192;
      *(_OWORD *)&t2.c = v189;
      t2.tx = tx;
      t2.ty = ty;
      CGAffineTransformConcat(&v222, &t1, &t2);
      t1 = v222;
      CGAffineTransformInvert(&t2, &t1);
      t1.a = a6 / 0.0;
      t1.c = 0.0;
      t1.b = 0.0;
      t1.d = a7 / 0.0;
      t1.tx = a4;
      t1.ty = a5;
      CGAffineTransformConcat(&v222, &t1, &t2);
      a = v222.a;
      b = v222.b;
      c = v222.c;
      d = v222.d;
      v27 = v222.tx;
      v28 = v222.ty;
      if (v7 != 3)
      {
LABEL_6:
        v29 = a3;
        if (v7 != 2)
          goto LABEL_149;
        v30 = (void *)v11[2];
        v31 = (void *)v11[4];
        RBDrawingStateGetCTM();
        v180 = t1.b;
        v181 = t1.a;
        v178 = t1.d;
        v179 = t1.c;
        v176 = t1.ty;
        v177 = t1.tx;
        v32 = v30;
        v145 = v31;
        outlined copy of Image.Location(v31);
        t1.a = a;
        t1.b = b;
        t1.c = c;
        t1.d = d;
        t1.tx = v27;
        t1.ty = v28;
        RBDrawingStateConcatCTM();
        v33 = objc_msgSend(v32, sel_renderingMode);
        v34 = a6;
        v35 = v201;
        v141 = v32;
        if ((_DWORD)v33 != 255)
          goto LABEL_21;
        if (LODWORD(v18) != 255)
        {
          *(_QWORD *)&t1.a = v200;
          t1.b = v204;
          t1.c = *((CGFloat *)&v202 + 1);
          t1.d = v201;
          t1.tx = v14;
          t1.ty = v15;
          v229 = v202;
          v230 = v199;
          v231 = v16;
          v232 = LOBYTE(v18);
          v36 = *(_QWORD *)(v171 + 16);
          outlined copy of GraphicsContext.Shading.Storage(v200, SLOBYTE(v204), *((uint64_t *)&v202 + 1), *(uint64_t *)&v201, *(uint64_t *)&v14, *(uint64_t *)&v15, v202, (uint64_t)v199, *(uint64_t *)&v16, SLOBYTE(v18));
          LOBYTE(v36) = GraphicsContext.Shading.isMultiLevel(in:)(v36);
          outlined consume of GraphicsContext.Shading?(v200, SLOBYTE(v204), *((uint64_t *)&v202 + 1), *(uint64_t *)&v201, *(uint64_t *)&v14, *(uint64_t *)&v15, v202, (uint64_t)v199, *(uint64_t *)&v16, LOBYTE(v18));
          if ((v36 & 1) != 0)
          {
            v190 = 4;
            v32 = objc_msgSend(v32, sel_beginUpdateWithRenderingMode_, 4);
            goto LABEL_23;
          }
        }
        if (one-time initialization token for preferredIfEnabled != -1)
          goto LABEL_155;
        while (1)
        {
          v33 = (id)dword_2352A2EF0[static SymbolRenderingMode.preferredIfEnabled];
LABEL_21:
          v32 = objc_msgSend(v32, sel_beginUpdateWithRenderingMode_, v33, *(_QWORD *)&v35);
          if (LODWORD(v18) == 255)
          {
            if ((v198 & 1) != 0)
            {
              v55 = 1065353216;
              LODWORD(v56) = 1065353216;
              v57 = 1065353216;
              LODWORD(v58) = 1065353216;
            }
            else
            {
              v55 = v183;
              v57 = LODWORD(v184);
              v56 = HIDWORD(v183);
              v58 = HIDWORD(*(_QWORD *)&v184);
            }
            v15 = *(double *)&v166;
            *(_QWORD *)&t2.a = __PAIR64__(v56, v55);
            *(_QWORD *)&t2.b = __PAIR64__(v58, v57);
            _s7SwiftUI15GraphicsContextV15ResolvedShadingOWOi0_((uint64_t)&t2);
            outlined init with take of GraphicsContext.ResolvedShading((uint64_t)&t2, (uint64_t)&t1);
            if ((_DWORD)v33 != 2)
              goto LABEL_39;
          }
          else
          {
            v190 = (int)v33;
LABEL_23:
            LOWORD(v198) = MEMORY[0x23B7C91A8](v32);
            *(_QWORD *)&v222.a = v145;
            v140 = LOBYTE(v18);
            v174 = *(_QWORD *)&v16;
            v139 = *(_QWORD *)&v16;
            v193 = LOBYTE(v18);
            v18 = v14;
            v47 = *(_QWORD *)&v14;
            v16 = v15;
            v14 = *(double *)&v202;
            outlined copy of GraphicsContext.Shading?(v200, SLOBYTE(v204), *((uint64_t *)&v202 + 1), *(uint64_t *)&v201, v47, *(uint64_t *)&v15, v202, (uint64_t)v199, v139, v140);
            outlined copy of Image.Location(v145);
            _ShapeStyle_ResolverMode.init(rbSymbolStyleMask:location:)(v198, (void **)&v222, (uint64_t)&t2);
            v195 = t2.a;
            *(_QWORD *)&t2.a = v200;
            t2.b = v204;
            t2.c = *((CGFloat *)&v202 + 1);
            t2.d = v201;
            t2.tx = v18;
            LOBYTE(v198) = LOBYTE(v15);
            t2.ty = v15;
            v224 = v202;
            v225 = v199;
            v226 = v174;
            v227 = v193;
            GraphicsContext.Shading.resolve(in:levels:)();
            outlined init with take of GraphicsContext.ResolvedShading?((uint64_t)v220, (uint64_t)&v222, &lazy cache variable for type metadata for GraphicsContext.ResolvedShading?);
            outlined init with take of GraphicsContext.ResolvedShading?((uint64_t)&v222, (uint64_t)&t2, &lazy cache variable for type metadata for GraphicsContext.ResolvedShading?);
            if (_s7SwiftUI15GraphicsContextV15ResolvedShadingOSgWOg((uint64_t)&t2) == 1)
            {
              outlined consume of GraphicsContext.Shading?(v200, SLOBYTE(v204), *((uint64_t *)&v202 + 1), *(uint64_t *)&v201, *(uint64_t *)&v18, *(uint64_t *)&v15, v202, (uint64_t)v199, v174, v193);

              __asm { FMOV            V0.4S, #1.0 }
              v206 = _Q0;
              _s7SwiftUI15GraphicsContextV15ResolvedShadingOWOi0_((uint64_t)&v206);
            }
            else
            {
              outlined consume of GraphicsContext.Shading?(v200, SLOBYTE(v204), *((uint64_t *)&v202 + 1), *(uint64_t *)&v201, *(uint64_t *)&v18, *(uint64_t *)&v15, v202, (uint64_t)v199, v174, v193);

              outlined init with take of GraphicsContext.ResolvedShading?((uint64_t)&v222, (uint64_t)&v206, &lazy cache variable for type metadata for GraphicsContext.ResolvedShading?);
            }
            outlined init with take of GraphicsContext.ResolvedShading((uint64_t)&v206, (uint64_t)v221);
            outlined init with take of GraphicsContext.ResolvedShading((uint64_t)v221, (uint64_t)&t1);
            v29 = v171;
            v15 = *(double *)&v166;
            if (v190 != 2)
            {
LABEL_39:
              v60 = 0.0;
              v61 = 0.0;
              v65 = 0;
              *(_QWORD *)&v175 = 1;
              goto LABEL_40;
            }
          }
          v52 = *(_QWORD *)(v29 + 16);
          v53 = *(double *)(v52 + 56);
          v222.a = *(CGFloat *)(v52 + 48);
          v222.b = v53;
          v54 = (uint64_t)v145;
          if ((unint64_t)v145 >= 2)
            v59 = v145;
          else
            v54 = 0;
          swift_retain();
          swift_retain();
          ResolvedMulticolorStyle.init(in:bundle:)((uint64_t *)&v222, v54, (uint64_t)&t2);
          v60 = t2.a;
          v61 = t2.b;
          v175 = t2.d;
          v62 = 256;
          if (!BYTE1(t2.c))
            v62 = 0;
          v63 = v62 | LOBYTE(t2.c);
          v64 = 0x10000;
          if (!BYTE2(t2.c))
            v64 = 0;
          v65 = v63 | v64;
LABEL_40:
          v143 = v60;
          v144 = v65;
          v142 = v61;
          updated = RBSymbolUpdateGroupCount();
          if ((updated & 0x8000000000000000) == 0)
          {
            v67 = updated;
            if (!updated)
            {
LABEL_148:
              outlined retain of GraphicsContext.ResolvedShading(&t1, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of GraphicsContext.ResolvedShading);
              outlined consume of ResolvedMulticolorStyle?(*(uint64_t *)&v143, *(uint64_t *)&v142, v144, *(void **)&v175);
              objc_msgSend(v141, sel_endUpdate_, v32);

              outlined consume of Image.Location(v145);
              goto LABEL_149;
            }
            v18 = 0.0;
            v148 = v32;
            v149 = updated;
            while (1)
            {
              if (*(_QWORD *)&v18 == v67)
                goto LABEL_152;
              *(double *)&v68 = COERCE_DOUBLE(RBSymbolUpdateGroupSize());
              if (v68 < 0)
                break;
              v14 = *(double *)&v68;
              if (*(double *)&v68 != 0.0)
              {
                v16 = 0.0;
                v184 = *(double *)&v68;
                while (2)
                {
                  *(_QWORD *)&t2.a = v32;
                  t2.b = v18;
                  t2.c = v16;
                  LODWORD(v72) = RBSymbolUpdateLayerStyle();
                  *(_QWORD *)&t2.a = v32;
                  t2.b = v18;
                  t2.c = v16;
                  RBSymbolUpdateLayerDrawingOpacity();
                  if (v73 <= 0.0 || (_DWORD)v72 == 10)
                    goto LABEL_50;
                  v75 = v73;
                  v72 = v72;
                  v76 = 1.0;
                  switch((int)v72)
                  {
                    case 0:
                      goto LABEL_60;
                    case 5:
                      v76 = 0.5;
                      v72 = 1;
                      goto LABEL_60;
                    case 6:
                      v76 = 0.25;
                      v72 = 2;
                      goto LABEL_60;
                    case 7:
                      v76 = 0.25;
                      v72 = 3;
                      goto LABEL_60;
                    case 8:
                      v76 = 0.25;
                      v72 = 4;
LABEL_60:
                      outlined init with take of GraphicsContext.ResolvedShading((uint64_t)&t1, (uint64_t)&v222);
                      v77 = _s7SwiftUI15GraphicsContextV15ResolvedShadingOWOg((uint64_t)&v222);
                      if (v77 == 8)
                      {
                        v84 = _s7SwiftUI15GraphicsContextV15ResolvedShadingOWOj0_((uint64_t)&v222);
                        v85 = *(_QWORD *)(*(_QWORD *)v84 + 16);
                        v86 = v85 - 1;
                        if ((uint64_t)(v85 - 1) >= v72)
                          v86 = v72;
                        if (v86 >= v85)
                        {
                          __break(1u);
LABEL_152:
                          __break(1u);
                          goto LABEL_153;
                        }
                        outlined init with take of GraphicsContext.ResolvedShading(*(_QWORD *)v84 + 160 * v86 + 32, (uint64_t)&v206);
                        outlined init with take of GraphicsContext.ResolvedShading((uint64_t)&v206, (uint64_t)v220);
                        v76 = 1.0;
                        goto LABEL_69;
                      }
                      if (v77 != 4)
                      {
                        outlined init with take of GraphicsContext.ResolvedShading((uint64_t)&t1, (uint64_t)v220);
LABEL_69:
                        v75 = v75 * v76;
                        outlined init with take of GraphicsContext.ResolvedShading((uint64_t)v220, (uint64_t)&v206);
                        v87 = _s7SwiftUI15GraphicsContextV15ResolvedShadingOWOg((uint64_t)&v206);
                        if (v87 == 1)
                        {
                          _s7SwiftUI15GraphicsContextV15ResolvedShadingOWOj0_((uint64_t)&v206);
                          v88 = (CGAffineTransform *)v220;
LABEL_126:
                          outlined init with take of GraphicsContext.ResolvedShading((uint64_t)v88, (uint64_t)&t2);
                          if (*(_DWORD *)(*(_QWORD *)(v29 + 16) + 64) != 2)
                            RBColorFromLinear();
                          *(_QWORD *)&v222.a = v32;
                          v222.b = v18;
                          v222.c = v16;
                          RBSymbolUpdateLayerDraw();
                          outlined retain of GraphicsContext.ResolvedShading(&t2, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of GraphicsContext.ResolvedShading);
                          goto LABEL_50;
                        }
                        if (v87 == 2)
                        {
                          _s7SwiftUI15GraphicsContextV15ResolvedShadingOWOj0_((uint64_t)&v206);
                          if (*(_DWORD *)(*(_QWORD *)(v29 + 16) + 64) == 2)
                            RBColorToLinear();
                          RBSymbolUpdateLayerDraw();
                          goto LABEL_50;
                        }
                        outlined retain of GraphicsContext.ResolvedShading(v220, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of GraphicsContext.ResolvedShading);
                        outlined init with take of GraphicsContext.ResolvedShading((uint64_t)v220, (uint64_t)v221);
                        goto LABEL_49;
                      }
                      v78 = _s7SwiftUI15GraphicsContextV15ResolvedShadingOWOj0_((uint64_t)&v222);
                      v202 = *(_OWORD *)v78;
                      v199 = *(void **)(v78 + 24);
                      v200 = *(void **)(v78 + 16);
                      v197 = *(_QWORD *)(v78 + 40);
                      v198 = *(_QWORD *)(v78 + 32);
                      v196 = *(_QWORD *)(v78 + 48);
                      v194 = *(_QWORD *)(v78 + 56);
                      v191 = *(_QWORD *)(v78 + 64);
                      v188 = *(_QWORD *)(v78 + 72);
                      v79 = *(float *)(v78 + 84);
                      v80 = *(unsigned __int8 *)(v78 + 96);
                      v204 = *(double *)(v78 + 104);
                      LODWORD(v201) = v80;
                      LODWORD(v183) = *(unsigned __int8 *)(v78 + 80);
                      v186 = *(_QWORD *)(v78 + 88);
                      if (!*(_BYTE *)(v78 + 80))
                      {
                        if (v80 == 255)
                        {
                          outlined init with take of GraphicsContext.ResolvedShading((uint64_t)&t1, (uint64_t)&v206);
                          v108 = _s7SwiftUI15GraphicsContextV15ResolvedShadingOWOj0_((uint64_t)&v206);
                          v159 = *(void **)(v108 + 16);
                          v155 = *(id *)v108;
                          v157 = *(_QWORD *)(v108 + 32);
                          v109 = *(_QWORD *)(v108 + 64);
                          v173 = *(_QWORD *)(v108 + 72);
                          v170 = *(_BYTE *)(v108 + 80);
                          v110 = *(_QWORD *)(v108 + 88);
                          v153 = *(_QWORD *)(v108 + 40);
                          v111 = *(_BYTE *)(v108 + 96);
                          v168 = *(_QWORD *)(v108 + 8);
                          v163 = *(_QWORD *)(v108 + 56);
                          v165 = *(void **)(v108 + 24);
                          v161 = *(_QWORD *)(v108 + 48);
                          outlined copy of _ShapeStyle_Pack.Fill(*(id *)v108, v168, v159, v165, v157, v153, v161, v163, v109, v173, v170);
                          outlined copy of GraphicsBlendMode?(v110, v111);
                          swift_bridgeObjectRetain();
                          outlined copy of _ShapeStyle_Pack.Fill(v155, v168, v159, v165, v157, v153, v161, v163, v109, v173, v170);
                          outlined copy of GraphicsBlendMode?(v110, v111);
                          swift_bridgeObjectRetain();
                          outlined copy of _ShapeStyle_Pack.Fill(v155, v168, v159, v165, v157, v153, v161, v163, v109, v173, v170);
                          outlined copy of GraphicsBlendMode?(v110, v111);
                          swift_bridgeObjectRetain();
                          outlined copy of _ShapeStyle_Pack.Fill((id)v202, *((uint64_t *)&v202 + 1), v200, v199, v198, v197, v196, v194, v191, v188, 0);
                          v106 = v186;
                          outlined copy of GraphicsBlendMode?(v186, 0xFFu);
                          v112 = one-time initialization token for normal;
                          swift_bridgeObjectRetain();
                          if (v112 != -1)
                            swift_once();
                          v107 = static GraphicsBlendMode.normal;
                          v172 = byte_254266040;
                          outlined copy of GraphicsBlendMode(static GraphicsBlendMode.normal, byte_254266040);
                          v105 = LOBYTE(v201);
                        }
                        else
                        {
                          v172 = v80 & 1;
                          outlined init with take of GraphicsContext.ResolvedShading((uint64_t)&t1, (uint64_t)&v206);
                          v102 = _s7SwiftUI15GraphicsContextV15ResolvedShadingOWOj0_((uint64_t)&v206);
                          v154 = *(void **)(v102 + 24);
                          v151 = *(_QWORD *)(v102 + 48);
                          v152 = *(id *)v102;
                          v150 = *(_QWORD *)(v102 + 56);
                          v169 = *(_QWORD *)(v102 + 72);
                          v167 = *(_BYTE *)(v102 + 80);
                          v103 = *(_QWORD *)(v102 + 88);
                          v104 = *(_BYTE *)(v102 + 96);
                          v160 = *(void **)(v102 + 16);
                          v162 = *(_QWORD *)(v102 + 64);
                          v156 = *(_QWORD *)(v102 + 8);
                          v158 = *(_QWORD *)(v102 + 32);
                          v164 = *(_QWORD *)(v102 + 40);
                          outlined copy of _ShapeStyle_Pack.Fill(*(id *)v102, v156, v160, v154, v158, v164, v151, v150, v162, v169, v167);
                          outlined copy of GraphicsBlendMode?(v103, v104);
                          swift_bridgeObjectRetain();
                          outlined copy of _ShapeStyle_Pack.Fill(v152, v156, v160, v154, v158, v164, v151, v150, v162, v169, v167);
                          outlined copy of GraphicsBlendMode?(v103, v104);
                          swift_bridgeObjectRetain();
                          v105 = LOBYTE(v201);
                          outlined copy of _ShapeStyle_Pack.Fill(v152, v156, v160, v154, v158, v164, v151, v150, v162, v169, v167);
                          outlined copy of GraphicsBlendMode?(v103, v104);
                          swift_bridgeObjectRetain();
                          outlined copy of _ShapeStyle_Pack.Fill((id)v202, *((uint64_t *)&v202 + 1), v200, v199, v198, v197, v196, v194, v191, v188, 0);
                          v106 = v186;
                          outlined copy of GraphicsBlendMode?(v186, LOBYTE(v201));
                          swift_bridgeObjectRetain();
                          v107 = v186;
                        }
                        outlined copy of GraphicsBlendMode?(v106, v105);
                        outlined retain of GraphicsContext.ResolvedShading(&t1, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of GraphicsContext.ResolvedShading);
                        if (one-time initialization token for normal != -1)
                          swift_once();
                        v113 = static GraphicsBlendMode.normal;
                        v114 = byte_254266040;
                        v29 = v171;
                        v15 = *(double *)&v166;
                        v32 = v148;
                        v67 = v149;
                        v14 = v184;
                        if ((v172 & 1) != 0)
                        {
                          if (byte_254266040)
                          {
                            swift_unknownObjectRetain();
                            outlined consume of GraphicsBlendMode(v107, 1);
                            outlined consume of GraphicsBlendMode(v113, 1);
                            if (v107 == v113)
                              goto LABEL_107;
                            goto LABEL_113;
                          }
                          swift_unknownObjectRetain();
                        }
                        else if ((byte_254266040 & 1) == 0)
                        {
                          outlined consume of GraphicsBlendMode(v107, 0);
                          outlined consume of GraphicsBlendMode(v113, 0);
                          if ((_DWORD)v107 == (_DWORD)v113)
                          {
LABEL_107:
                            v115 = *(_QWORD *)(*(_QWORD *)&v204 + 16);
                            outlined retain of GraphicsContext.ResolvedShading(&t1, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of GraphicsContext.ResolvedShading);
                            outlined retain of GraphicsContext.ResolvedShading(&t1, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of GraphicsContext.ResolvedShading);
                            if (!v115)
                            {
                              outlined retain of GraphicsContext.ResolvedShading(&t1, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of GraphicsContext.ResolvedShading);
                              v34 = a6;
                              *(_QWORD *)&v206 = v202;
                              v67 = v149;
                              DWORD2(v206) = DWORD2(v202);
                              *((float *)&v206 + 3) = v79 * *((float *)&v202 + 3);
                              _s7SwiftUI15GraphicsContextV15ResolvedShadingOWOi0_((uint64_t)&v206);
                              v88 = (CGAffineTransform *)&v206;
                              goto LABEL_126;
                            }
                            goto LABEL_114;
                          }
                          goto LABEL_113;
                        }
                        outlined copy of GraphicsBlendMode(v113, v114);
                        outlined consume of GraphicsBlendMode(v107, v172);
                        outlined consume of GraphicsBlendMode(v113, v114);
                        outlined consume of GraphicsBlendMode(v107, v172);
LABEL_113:
                        outlined retain of GraphicsContext.ResolvedShading(&t1, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of GraphicsContext.ResolvedShading);
                        outlined retain of GraphicsContext.ResolvedShading(&t1, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of GraphicsContext.ResolvedShading);
                        goto LABEL_114;
                      }
                      outlined init with take of GraphicsContext.ResolvedShading((uint64_t)&t1, (uint64_t)&v206);
                      v81 = _s7SwiftUI15GraphicsContextV15ResolvedShadingOWOj0_((uint64_t)&v206);
                      v82 = *(_QWORD *)(v81 + 88);
                      v83 = *(_BYTE *)(v81 + 96);
                      outlined copy of _ShapeStyle_Pack.Fill(*(id *)v81, *(_QWORD *)(v81 + 8), *(void **)(v81 + 16), *(void **)(v81 + 24), *(_QWORD *)(v81 + 32), *(_QWORD *)(v81 + 40), *(_QWORD *)(v81 + 48), *(_QWORD *)(v81 + 56), *(_QWORD *)(v81 + 64), *(_QWORD *)(v81 + 72), *(_BYTE *)(v81 + 80));
                      outlined copy of GraphicsBlendMode?(v82, v83);
                      swift_bridgeObjectRetain();
LABEL_114:
                      v206 = v202;
                      v207 = *(double *)&v200;
                      v208 = *(double *)&v199;
                      v209 = *(double *)&v198;
                      v210 = *(double *)&v197;
                      v211 = v196;
                      v212 = v194;
                      v213 = v191;
                      v214 = v188;
                      v215 = v183;
                      v216 = v79;
                      v217 = v186;
                      v218 = LOBYTE(v201);
                      v219 = v204;
                      _s7SwiftUI15GraphicsContextV15ResolvedShadingOWOi3_((uint64_t)&v206);
                      outlined init with take of GraphicsContext.ResolvedShading((uint64_t)&v206, (uint64_t)v221);
LABEL_49:
                      v69 = RBDrawingStateInit();
                      *(_QWORD *)&v206 = v32;
                      *((CGFloat *)&v206 + 1) = v18;
                      v207 = v16;
                      RBSymbolUpdateLayerClip();
                      *(CGFloat *)&v206 = v181;
                      *((CGFloat *)&v206 + 1) = v180;
                      v207 = v179;
                      v208 = v178;
                      v209 = v177;
                      v210 = v176;
                      RBDrawingStateSetCTM();
                      outlined init with take of GraphicsContext.ResolvedShading((uint64_t)v221, (uint64_t)&v206);
                      v70 = v75 * *(float *)(v29 + 32);
                      v71 = *(unsigned int *)(v29 + 36);
                      outlined retain of GraphicsContext.ResolvedShading(v221, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of GraphicsContext.ResolvedShading);
                      GraphicsContext.draw(shading:bounds:in:alpha:blendMode:)((uint64_t)&v206, v69, v71, v29, a4, a5, v34, a7, v70);
                      outlined retain of GraphicsContext.ResolvedShading(v221, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of GraphicsContext.ResolvedShading);
                      RBDrawingStateDestroy();
                      outlined retain of GraphicsContext.ResolvedShading(v221, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of GraphicsContext.ResolvedShading);
                      v14 = v184;
LABEL_50:
                      if (*(_QWORD *)&v14 == ++*(_QWORD *)&v16)
                        break;
                      continue;
                    case 9:
                      *(_QWORD *)&v222.a = v32;
                      v222.b = v18;
                      v222.c = v16;
                      v89 = (id)RBSymbolUpdateLayerColorName();
                      if (!v89)
                        goto LABEL_50;
                      v90 = v89;
                      v91 = static String._unconditionallyBridgeFromObjectiveC(_:)();
                      v93 = v92;

                      if (*(_QWORD *)&v175 == 1)
                      {
                        swift_bridgeObjectRelease();
                      }
                      else
                      {
                        if (v91 == 0xD000000000000012 && v93 == 0x80000002352E2950
                          || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                        {
                          swift_bridgeObjectRelease();
                          v100 = *((float *)&v143 + 1);
                          v99 = *(float *)&v143;
                          v76 = *((float *)&v142 + 1);
                          v101 = *(float *)&v142;
LABEL_124:
                          v29 = v171;
                          goto LABEL_125;
                        }
                        if (v91 == 0x6574696877 && v93 == 0xE500000000000000
                          || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                        {
                          swift_bridgeObjectRelease();
                          v99 = 1.0;
                          v100 = 1.0;
                          v101 = 1.0;
                          goto LABEL_124;
                        }
                        if (v91 == 0x6B63616C62 && v93 == 0xE500000000000000
                          || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                        {
                          swift_bridgeObjectRelease();
                          v99 = 0.0;
                          v100 = 0.0;
                          v101 = 0.0;
                          goto LABEL_124;
                        }
                        v222.a = v143;
                        v222.b = v142;
                        LOWORD(v222.c) = v144 & 0x101;
                        BYTE2(v222.c) = BYTE2(v144);
                        v222.d = v175;
                        v116 = *(id *)&v175;
                        ResolvedMulticolorStyle.environment.getter(v221);
                        *((_QWORD *)&v202 + 1) = v221[0];
                        v204 = *(double *)&v221[1];
                        if (one-time initialization token for namedTypes != -1)
                          swift_once();
                        v117 = static SystemColorType.namedTypes;
                        if (*(_QWORD *)(static SystemColorType.namedTypes + 16))
                        {
                          swift_bridgeObjectRetain();
                          v118 = specialized __RawDictionaryStorage.find<A>(_:)(v91, v93);
                          if ((v119 & 1) != 0)
                          {
                            v120 = *(unsigned __int8 *)(*(_QWORD *)(v117 + 56) + v118);
                            swift_bridgeObjectRelease();
                            LODWORD(v202) = v120;
                            if (v204 == 0.0)
                            {
                              v121 = *((double *)&v202 + 1);
                              v133 = swift_retain_n();
                              v134 = specialized find<A>(_:key:)(v133);
                              if (v134)
                              {
                                v122 = *(ValueMetadata **)(v134 + 72);
                                v124 = *(_UNKNOWN ***)(v134 + 80);
                              }
                              else
                              {
                                v122 = &type metadata for CoreUIDefaultSystemColorDefinition;
                                v124 = &protocol witness table for CoreUIDefaultSystemColorDefinition;
                              }
                              swift_release_n();
                              v125 = 0.0;
                            }
                            else
                            {
                              v121 = *((double *)&v202 + 1);
                              swift_retain_n();
                              swift_retain_n();
                              v122 = (ValueMetadata *)specialized PropertyList.Tracker.value<A>(_:for:)(*((uint64_t *)&v202 + 1));
                              v124 = v123;
                              swift_release_n();
                              swift_release_n();
                              v125 = v204;
                            }
                            LOBYTE(v220[0]) = v202;
                            v222.a = v121;
                            v222.b = v125;
                            v99 = ((float (*)(_QWORD *, CGAffineTransform *, ValueMetadata *, _UNKNOWN **))v124[1])(v220, &v222, v122, v124);
                            v100 = v135;
                            v101 = v136;
                            v76 = v137;
                            swift_bridgeObjectRelease();
                            swift_release();
                            swift_release();
                            outlined consume of ResolvedMulticolorStyle?(*(uint64_t *)&v143, *(uint64_t *)&v142, v144, *(void **)&v175);
                            v29 = v171;
                            v15 = *(double *)&v166;
                            goto LABEL_125;
                          }
                          swift_bridgeObjectRelease();
                        }
                        v126 = v175;
                        if (v175 != 0.0)
                        {
                          v222.a = *((CGFloat *)&v202 + 1);
                          v222.b = v204;
                          outlined copy of ResolvedMulticolorStyle?(*(uint64_t *)&v143, *(uint64_t *)&v142, v144, *(void **)&v175);
                          swift_bridgeObjectRetain();
                          v127 = Color.NamedColor.resolveCGColor(in:)((uint64_t *)&v222, v91, v93, *(void **)&v175);
                          swift_bridgeObjectRelease();
                          if (v127)
                          {
                            v128 = v127;
                            v201 = COERCE_DOUBLE(specialized Color.Resolved.init(failableCGColor:)(v128));
                            *(_QWORD *)&v202 = v129;
                            v131 = v130;
                            outlined consume of ResolvedMulticolorStyle?(*(uint64_t *)&v143, *(uint64_t *)&v142, v144, *(void **)&v175);
                            swift_bridgeObjectRelease();

                            swift_release();
                            swift_release();
                            outlined consume of ResolvedMulticolorStyle?(*(uint64_t *)&v143, *(uint64_t *)&v142, v144, *(void **)&v175);
                            v99 = 0.0;
                            v100 = 0.0;
                            v101 = 0.0;
                            v76 = 0.0;
                            if ((v131 & 1) == 0)
                            {
                              v100 = *((float *)&v201 + 1);
                              v99 = *(float *)&v201;
                              v76 = *((float *)&v202 + 1);
                              LODWORD(v101) = v202;
                            }
                            v29 = v171;
                            v15 = *(double *)&v166;
                            v67 = v149;
                            v14 = v184;
                            goto LABEL_125;
                          }
                          outlined consume of ResolvedMulticolorStyle?(*(uint64_t *)&v143, *(uint64_t *)&v142, v144, *(void **)&v175);
                          v126 = v175;
                          v67 = v149;
                          v14 = v184;
                        }
                        v132 = v126;
                        swift_bridgeObjectRelease();
                        swift_release();
                        swift_release();
                        v175 = v132;
                        outlined consume of ResolvedMulticolorStyle?(*(uint64_t *)&v143, *(uint64_t *)&v142, v144, *(void **)&v132);
                      }
                      *(_QWORD *)&v222.a = v32;
                      v222.b = v18;
                      v222.c = v16;
                      v94 = (id)RBSymbolUpdateLayerDefaultColor();
                      v29 = v171;
                      if (v94)
                      {
                        v95 = specialized Color.Resolved.init(failableCGColor:)(v94);
                        if ((v98 & 1) != 0)
                          v99 = 0.0;
                        else
                          v99 = *(float *)&v95;
                        if ((v98 & 1) != 0)
                          v100 = 0.0;
                        else
                          v100 = *((float *)&v95 + 1);
                        if ((v98 & 1) != 0)
                          v101 = 0.0;
                        else
                          v101 = v96;
                        if ((v98 & 1) != 0)
                          v76 = 0.0;
                        else
                          v76 = v97;
                      }
                      else
                      {
                        v99 = 1.0;
                        v100 = 1.0;
                        v101 = 1.0;
                      }
LABEL_125:
                      *(_QWORD *)&v222.a = __PAIR64__(LODWORD(v100), LODWORD(v99));
                      *(_QWORD *)&v222.b = __PAIR64__(LODWORD(v76), LODWORD(v101));
                      _s7SwiftUI15GraphicsContextV15ResolvedShadingOWOi0_((uint64_t)&v222);
                      v88 = &v222;
                      goto LABEL_126;
                    default:
                      goto LABEL_50;
                  }
                  break;
                }
              }
              if (++*(_QWORD *)&v18 == v67)
                goto LABEL_148;
            }
LABEL_153:
            __break(1u);
          }
          __break(1u);
LABEL_155:
          swift_once();
        }
      }
    }
    else
    {
      v28 = a5;
      v27 = a4;
      b = 0.0;
      if (v7 != 3)
        goto LABEL_6;
    }
    v37 = v11[2];
    v38 = (void *)v11[3];
    t1.a = a;
    t1.b = b;
    t1.c = c;
    t1.d = d;
    t1.tx = v27;
    t1.ty = v28;
    CGAffineTransformTranslate(&t2, &t1, 0.0, 0.0);
    t1 = t2;
    CGAffineTransformScale(&t2, &t1, 1.0, -1.0);
    v203 = *(_OWORD *)&t2.c;
    v205 = *(_OWORD *)&t2.a;
    v39 = t2.tx;
    v40 = t2.ty;
    swift_retain();
    outlined copy of Image.Location?(v38);
    swift_bridgeObjectRetain();
    *(_OWORD *)&t1.a = v205;
    *(_OWORD *)&t1.c = v203;
    t1.tx = v39;
    t1.ty = v40;
    RBDrawingStateConcatCTM();
    v41 = RBDrawingStateInit();
    v42 = *(void (**)(uint64_t))(*(_QWORD *)v37 + 88);
    swift_retain();
    outlined copy of Image.Location?(v38);
    v43 = swift_bridgeObjectRetain();
    v42(v43);
    swift_release();
    outlined consume of Image.Location?(v38);
    swift_bridgeObjectRelease();
    RBDrawingStateScaleCTM();
    v44 = v41;
    if ((v198 & 1) == 0)
    {
      if (*(_DWORD *)(*(_QWORD *)(v171 + 16) + 64) != 2)
        RBColorFromLinear();
      RBDrawingStateAddAlphaMultiplyFilter2();
      v44 = RBDrawingStateBeginLayer();
    }
    v45 = *(void (**)(uint64_t))(*(_QWORD *)v37 + 96);
    swift_retain();
    outlined copy of Image.Location?(v38);
    v46 = swift_bridgeObjectRetain();
    v45(v46);
    swift_release();
    outlined consume of Image.Location?(v38);
    swift_bridgeObjectRelease();
    RBDrawingStateDrawDisplayList();
    swift_unknownObjectRelease();
    if (v44 != v41)
      RBDrawingStateDrawLayer();
    RBDrawingStateDestroy();
    swift_release();
    outlined consume of Image.Location?(v38);
    swift_bridgeObjectRelease();
LABEL_149:
    RBDrawingStateDrawLayer();
    v8 = 2;
  }
  return v8 == 2;
}

void *outlined consume of GraphicsContext.Filter.Storage(void *result, id a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  switch(a11 >> 27)
  {
    case 3u:
    case 6u:
    case 8u:
    case 0x12u:
      result = (void *)swift_release();
      break;
    case 5u:
      result = (void *)outlined consume of Path.Storage(a5, a6, a7, a8, a9);
      break;
    case 0x11u:
      result = outlined consume of GraphicsContext.Shading.Storage(a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
      break;
    case 0x13u:
      result = (void *)outlined consume of EitherGradient((uint64_t)result, a2 & 1);
      break;
    case 0x17u:

      swift_bridgeObjectRelease();
      result = (void *)swift_bridgeObjectRelease();
      break;
    default:
      return result;
  }
  return result;
}

uint64_t partial apply for closure #2 in GraphicsContext.addFilter(_:options:)()
{
  return RBDrawingStateAddAlphaGradientFilter();
}

void *outlined copy of GraphicsContext.Filter.Storage(void *result, id a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  id v11;

  switch(a11 >> 27)
  {
    case 3u:
    case 6u:
    case 8u:
    case 0x12u:
      result = (void *)swift_retain();
      break;
    case 5u:
      result = (void *)outlined copy of Path.Storage(a5, a6, a7, a8, a9);
      break;
    case 0x11u:
      result = outlined copy of GraphicsContext.Shading.Storage(a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
      break;
    case 0x13u:
      result = (void *)outlined copy of EitherGradient((uint64_t)result, a2 & 1);
      break;
    case 0x17u:
      v11 = result;
      swift_bridgeObjectRetain();
      result = (void *)swift_bridgeObjectRetain();
      break;
    default:
      return result;
  }
  return result;
}

uint64_t type metadata accessor for GraphicsContext.Storage.Shared()
{
  return objc_opt_self();
}

uint64_t outlined retain of Path.Storage(uint64_t a1)
{
  outlined copy of Path.Storage(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_BYTE *)(a1 + 32));
  return a1;
}

uint64_t _s7SwiftUI15GraphicsContextV15ResolvedShadingOWOi3_(uint64_t result)
{
  *(_QWORD *)(result + 96) = *(_QWORD *)(result + 96) & 0xFF0301FFLL | 0x4000000000000000;
  return result;
}

uint64_t sub_234DDA828()
{
  uint64_t v0;

  outlined consume of GraphicsContext.ResolvedShading(*(void **)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(void **)(v0 + 40), *(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 88), *(_OWORD *)(v0 + 96), *(_QWORD *)(v0 + 104), *(_QWORD *)(v0 + 112));
  return swift_deallocObject();
}

uint64_t _s7SwiftUI15GraphicsContextV15ResolvedShadingOSgWOg(uint64_t a1)
{
  unsigned int v1;

  v1 = (*(_QWORD *)(a1 + 96) >> 11) & 0x1F80 | ((unsigned __int16)*(_QWORD *)(a1 + 96) >> 9) | (*(_QWORD *)(a1 + 96) >> 19) & 0xFFFFE000;
  if (v1 > 0x80000000)
    return -v1;
  else
    return 0;
}

uint64_t outlined release of GraphicsContext.ResolvedImage(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 v10;
  void *v12;

  v2 = *(_QWORD *)(a1 + 120);
  v12 = *(void **)(a1 + 112);
  v3 = *(_QWORD *)(a1 + 128);
  v4 = *(_QWORD *)(a1 + 136);
  v5 = *(_QWORD *)(a1 + 144);
  v6 = *(_QWORD *)(a1 + 152);
  v7 = *(_QWORD *)(a1 + 160);
  v8 = *(_QWORD *)(a1 + 168);
  v9 = *(_QWORD *)(a1 + 176);
  v10 = *(_BYTE *)(a1 + 184);
  outlined consume of GraphicsImage.Contents?(*(void **)a1, *(_BYTE *)(a1 + 8));
  outlined consume of GraphicsContext.Shading?(v12, v2, v3, v4, v5, v6, v7, v8, v9, v10);
  return a1;
}

void specialized static GraphicsContext.renderingTo(cgContext:environment:deviceScale:content:)(CGContext *a1, uint64_t *a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6)
{
  double v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  float v16;
  int v17;
  id v18;
  double v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  const __CTLine *v25;
  CFIndex v26;
  double v27;
  double v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  id v32;
  const __CTLine *v33;
  CFIndex v34;
  double v35;
  double v36;
  void *v37;
  uint64_t v38;
  int v39;
  float v40;
  double v41;
  double v42;
  double v43;
  uint64_t v44;
  CGRect ClipBoundingBox;

  v44 = *MEMORY[0x24BDAC8D0];
  v11 = *a2;
  v10 = *((double *)a2 + 1);
  v39 = 0;
  v40 = 1.0;
  v12 = MEMORY[0x23B7C8EA8](a1, &v40, &v39);
  if (v12)
  {
    v13 = v12;
    type metadata accessor for GraphicsContext.Storage();
    v14 = swift_allocObject();
    *(_QWORD *)(v14 + 32) = 1065353216;
    *(_QWORD *)(v14 + 40) = 0x7FF8000000000000;
    v15 = (id)RBDrawingStateGetDisplayList();
    v41 = *(double *)&v11;
    v42 = v10;
    type metadata accessor for GraphicsContext.Storage.Shared();
    swift_allocObject();
    swift_retain();
    swift_retain();
    *(_QWORD *)(v14 + 16) = GraphicsContext.Storage.Shared.init(list:environment:)(v15, (uint64_t *)&v41);
    *(_QWORD *)(v14 + 24) = v13;
    *(_BYTE *)(v14 + 48) = 0;
    v38 = v14;
    v16 = v40;
    if (v40 == 1.0)
    {
      v17 = 0;
    }
    else
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        v20 = RBDrawingStateInit();
        swift_allocObject();
        v21 = swift_retain();
        v38 = GraphicsContext.Storage.init(_:state:ownsState:resetBlending:)(v21, v20, 1, 0);
        swift_release();
        v14 = v38;
      }
      *(float *)(v14 + 32) = v16;
      v17 = *(_DWORD *)(v14 + 36);
    }
    v22 = v39;
    if (v17 != v39)
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        v23 = RBDrawingStateInit();
        swift_allocObject();
        v24 = swift_retain();
        v38 = GraphicsContext.Storage.init(_:state:ownsState:resetBlending:)(v24, v23, 1, 0);
        swift_release();
      }
      *(_DWORD *)(v38 + 36) = v22;
    }
    v25 = *(const __CTLine **)a6;
    v26 = *(_QWORD *)(a6 + 8);
    v27 = *(double *)(a6 + 16);
    v28 = *(double *)(a6 + 24);
    outlined retain of Text.Layout.Run((void **)a6);
    v29 = (id)_CTLineGetRunAtIndex(v25, v26);
    specialized Text.Layout.TypographicBounds.init(run:range:)((const __CTRun *)v29, (CFRange)0, &v41);

    outlined release of Text.Layout.Run((id *)a6);
    SwiftUITextAttachment.draw(in:at:)(&v38, v27 + v41, v28 + v42 - v43);
    swift_release();
  }
  else
  {
    v18 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BE7EEF8]), sel_init);
    objc_msgSend(v18, sel_setProfile_, 1);
    objc_msgSend(v18, sel_setDefaultColorSpace_, 1);
    ClipBoundingBox = CGContextGetClipBoundingBox(a1);
    objc_msgSend(v18, sel_setContentRect_, ClipBoundingBox.origin.x, ClipBoundingBox.origin.y, ClipBoundingBox.size.width, ClipBoundingBox.size.height);
    if ((a4 & 1) != 0)
    {
      if (v10 == 0.0)
      {
        v30 = swift_retain_n();
        v19 = specialized closure #1 in PropertyList.subscript.getter(v30);
      }
      else
      {
        swift_retain_n();
        swift_retain_n();
        v19 = specialized PropertyList.Tracker.value<A>(_:for:)(v11);
        swift_release_n();
      }
      swift_release_n();
    }
    else
    {
      v19 = *(double *)&a3;
    }
    objc_msgSend(v18, sel_setDeviceScale_, v19);
    type metadata accessor for GraphicsContext.Storage();
    v31 = swift_allocObject();
    *(_QWORD *)(v31 + 32) = 1065353216;
    *(_QWORD *)(v31 + 40) = 0x7FF8000000000000;
    v41 = *(double *)&v11;
    v42 = v10;
    type metadata accessor for GraphicsContext.Storage.Shared();
    swift_allocObject();
    swift_retain();
    v32 = v18;
    swift_retain();
    *(_QWORD *)(v31 + 16) = GraphicsContext.Storage.Shared.init(list:environment:)(v32, (uint64_t *)&v41);
    *(_QWORD *)(v31 + 24) = RBDisplayListGetState();
    *(_BYTE *)(v31 + 48) = 0;
    v38 = v31;
    v33 = *(const __CTLine **)a6;
    v34 = *(_QWORD *)(a6 + 8);
    v35 = *(double *)(a6 + 16);
    v36 = *(double *)(a6 + 24);
    outlined retain of Text.Layout.Run((void **)a6);
    v37 = (id)_CTLineGetRunAtIndex(v33, v34);
    specialized Text.Layout.TypographicBounds.init(run:range:)((const __CTRun *)v37, (CFRange)0, &v41);

    outlined release of Text.Layout.Run((id *)a6);
    SwiftUITextAttachment.draw(in:at:)(&v38, v35 + v41, v36 + v42 - v43);
    objc_msgSend(v32, sel_renderInContext_options_, a1, 0);
    swift_release();

  }
}

{
  double v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  float v17;
  int v18;
  id v19;
  double v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  const __CTLine *v26;
  CFIndex v27;
  double v28;
  double v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  id v33;
  const __CTLine *v34;
  CFIndex v35;
  double v36;
  double v37;
  void *v38;
  uint64_t v39;
  int v40;
  float v41;
  double v42;
  double v43;
  __int128 v44;
  __int128 v45;
  double v46;
  double v47;
  __int128 v48;
  __int128 v49;
  uint64_t v50;
  CGRect ClipBoundingBox;

  v50 = *MEMORY[0x24BDAC8D0];
  v12 = *a2;
  v11 = *((double *)a2 + 1);
  v40 = 0;
  v41 = 1.0;
  v13 = MEMORY[0x23B7C8EA8](a1, &v41, &v40);
  if (v13)
  {
    v14 = v13;
    type metadata accessor for GraphicsContext.Storage();
    v15 = swift_allocObject();
    *(_QWORD *)(v15 + 32) = 1065353216;
    *(_QWORD *)(v15 + 40) = 0x7FF8000000000000;
    v16 = (id)RBDrawingStateGetDisplayList();
    v46 = *(double *)&v12;
    v47 = v11;
    type metadata accessor for GraphicsContext.Storage.Shared();
    swift_allocObject();
    swift_retain();
    swift_retain();
    *(_QWORD *)(v15 + 16) = GraphicsContext.Storage.Shared.init(list:environment:)(v16, (uint64_t *)&v46);
    *(_QWORD *)(v15 + 24) = v14;
    *(_BYTE *)(v15 + 48) = 0;
    v39 = v15;
    v17 = v41;
    if (v41 == 1.0)
    {
      v18 = 0;
    }
    else
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        v21 = RBDrawingStateInit();
        swift_allocObject();
        v22 = swift_retain();
        v39 = GraphicsContext.Storage.init(_:state:ownsState:resetBlending:)(v22, v21, 1, 0);
        swift_release();
        v15 = v39;
      }
      *(float *)(v15 + 32) = v17;
      v18 = *(_DWORD *)(v15 + 36);
    }
    v23 = v40;
    if (v18 != v40)
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        v24 = RBDrawingStateInit();
        swift_allocObject();
        v25 = swift_retain();
        v39 = GraphicsContext.Storage.init(_:state:ownsState:resetBlending:)(v25, v24, 1, 0);
        swift_release();
      }
      *(_DWORD *)(v39 + 36) = v23;
    }
    v26 = *(const __CTLine **)a6;
    v27 = *(_QWORD *)(a6 + 8);
    v28 = *(double *)(a6 + 16);
    v29 = *(double *)(a6 + 24);
    outlined retain of Text.Layout.Run((void **)a6);
    v30 = (id)_CTLineGetRunAtIndex(v26, v27);
    specialized Text.Layout.TypographicBounds.init(run:range:)((const __CTRun *)v30, (CFRange)0, &v42);

    outlined release of Text.Layout.Run((id *)a6);
    v46 = v28 + v42;
    v47 = v29 + v43;
    v48 = v44;
    v49 = v45;
    (*(void (**)(double *, uint64_t *))(*(_QWORD *)a5 + 104))(&v46, &v39);
    swift_release();
  }
  else
  {
    v19 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BE7EEF8]), sel_init);
    objc_msgSend(v19, sel_setProfile_, 1);
    objc_msgSend(v19, sel_setDefaultColorSpace_, 1);
    ClipBoundingBox = CGContextGetClipBoundingBox(a1);
    objc_msgSend(v19, sel_setContentRect_, ClipBoundingBox.origin.x, ClipBoundingBox.origin.y, ClipBoundingBox.size.width, ClipBoundingBox.size.height);
    if ((a4 & 1) != 0)
    {
      if (v11 == 0.0)
      {
        v31 = swift_retain_n();
        v20 = specialized closure #1 in PropertyList.subscript.getter(v31);
      }
      else
      {
        swift_retain_n();
        swift_retain_n();
        v20 = specialized PropertyList.Tracker.value<A>(_:for:)(v12);
        swift_release_n();
      }
      swift_release_n();
    }
    else
    {
      v20 = *(double *)&a3;
    }
    objc_msgSend(v19, sel_setDeviceScale_, v20);
    type metadata accessor for GraphicsContext.Storage();
    v32 = swift_allocObject();
    *(_QWORD *)(v32 + 32) = 1065353216;
    *(_QWORD *)(v32 + 40) = 0x7FF8000000000000;
    v46 = *(double *)&v12;
    v47 = v11;
    type metadata accessor for GraphicsContext.Storage.Shared();
    swift_allocObject();
    swift_retain();
    v33 = v19;
    swift_retain();
    *(_QWORD *)(v32 + 16) = GraphicsContext.Storage.Shared.init(list:environment:)(v33, (uint64_t *)&v46);
    *(_QWORD *)(v32 + 24) = RBDisplayListGetState();
    *(_BYTE *)(v32 + 48) = 0;
    v39 = v32;
    v34 = *(const __CTLine **)a6;
    v35 = *(_QWORD *)(a6 + 8);
    v36 = *(double *)(a6 + 16);
    v37 = *(double *)(a6 + 24);
    outlined retain of Text.Layout.Run((void **)a6);
    v38 = (id)_CTLineGetRunAtIndex(v34, v35);
    specialized Text.Layout.TypographicBounds.init(run:range:)((const __CTRun *)v38, (CFRange)0, &v42);

    outlined release of Text.Layout.Run((id *)a6);
    v46 = v36 + v42;
    v47 = v37 + v43;
    v48 = v44;
    v49 = v45;
    (*(void (**)(double *, uint64_t *))(*(_QWORD *)a5 + 104))(&v46, &v39);
    objc_msgSend(v33, sel_renderInContext_options_, a1, 0);
    swift_release();

  }
}

{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  float v17;
  int v18;
  id v19;
  double v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  id v29;
  int v30;
  float v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  CGRect ClipBoundingBox;

  v34 = *MEMORY[0x24BDAC8D0];
  v12 = *a2;
  v11 = a2[1];
  v30 = 0;
  v31 = 1.0;
  v13 = MEMORY[0x23B7C8EA8](a1, &v31, &v30);
  if (v13)
  {
    v14 = v13;
    type metadata accessor for GraphicsContext.Storage();
    v15 = swift_allocObject();
    *(_QWORD *)(v15 + 32) = 1065353216;
    *(_QWORD *)(v15 + 40) = 0x7FF8000000000000;
    v16 = (id)RBDrawingStateGetDisplayList();
    v32 = v12;
    v33 = v11;
    type metadata accessor for GraphicsContext.Storage.Shared();
    swift_allocObject();
    swift_retain();
    swift_retain();
    *(_QWORD *)(v15 + 16) = GraphicsContext.Storage.Shared.init(list:environment:)(v16, &v32);
    *(_QWORD *)(v15 + 24) = v14;
    *(_BYTE *)(v15 + 48) = 0;
    v32 = v15;
    v17 = v31;
    if (v31 == 1.0)
    {
      v18 = 0;
    }
    else
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        v21 = RBDrawingStateInit();
        swift_allocObject();
        v22 = swift_retain();
        v23 = GraphicsContext.Storage.init(_:state:ownsState:resetBlending:)(v22, v21, 1, 0);
        v32 = v23;
        swift_release();
        v15 = v23;
      }
      *(float *)(v15 + 32) = v17;
      v18 = *(_DWORD *)(v15 + 36);
    }
    v24 = v30;
    if (v18 != v30)
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        v25 = RBDrawingStateInit();
        swift_allocObject();
        v26 = swift_retain();
        v32 = GraphicsContext.Storage.init(_:state:ownsState:resetBlending:)(v26, v25, 1, 0);
        swift_release();
      }
      *(_DWORD *)(v32 + 36) = v24;
    }
    closure #1 in closure #1 in TextLinesLayer.draw(in:)(&v32, a5, a6);
    swift_release();
  }
  else
  {
    v19 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BE7EEF8]), sel_init);
    objc_msgSend(v19, sel_setProfile_, 1);
    objc_msgSend(v19, sel_setDefaultColorSpace_, 1);
    ClipBoundingBox = CGContextGetClipBoundingBox(a1);
    objc_msgSend(v19, sel_setContentRect_, ClipBoundingBox.origin.x, ClipBoundingBox.origin.y, ClipBoundingBox.size.width, ClipBoundingBox.size.height);
    if ((a4 & 1) != 0)
    {
      if (v11)
      {
        swift_retain_n();
        swift_retain_n();
        v20 = specialized PropertyList.Tracker.value<A>(_:for:)(v12);
        swift_release_n();
      }
      else
      {
        v27 = swift_retain_n();
        v20 = specialized closure #1 in PropertyList.subscript.getter(v27);
      }
      swift_release_n();
    }
    else
    {
      v20 = *(double *)&a3;
    }
    objc_msgSend(v19, sel_setDeviceScale_, v20);
    type metadata accessor for GraphicsContext.Storage();
    v28 = swift_allocObject();
    *(_QWORD *)(v28 + 32) = 1065353216;
    *(_QWORD *)(v28 + 40) = 0x7FF8000000000000;
    v32 = v12;
    v33 = v11;
    type metadata accessor for GraphicsContext.Storage.Shared();
    swift_allocObject();
    swift_retain();
    v29 = v19;
    swift_retain();
    *(_QWORD *)(v28 + 16) = GraphicsContext.Storage.Shared.init(list:environment:)(v29, &v32);
    *(_QWORD *)(v28 + 24) = RBDisplayListGetState();
    *(_BYTE *)(v28 + 48) = 0;
    v32 = v28;
    closure #1 in closure #1 in TextLinesLayer.draw(in:)(&v32, a5, a6);
    objc_msgSend(v29, sel_renderInContext_options_, a1, 0);
    swift_release();

  }
}

void specialized static GraphicsContext.renderingTo(cgContext:environment:deviceScale:content:)(CGContext *a1, uint64_t *a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  double v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  float v19;
  int v20;
  id v21;
  double v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  const __CTLine *v28;
  CFIndex v29;
  double v30;
  double v31;
  void *v32;
  double v33;
  double v34;
  double v35;
  double v36;
  void *v37;
  const __CFDictionary *v38;
  void *v39;
  CFRange StringRange;
  uint64_t v41;
  uint64_t inited;
  id v43;
  const __CTLine *v44;
  CFIndex v45;
  double v46;
  double v47;
  void *v48;
  double v49;
  double v50;
  double v51;
  double v52;
  void *v53;
  const __CFDictionary *v54;
  void *v55;
  CFRange v56;
  uint64_t v57;
  int v58;
  float v59;
  double v60;
  double v61;
  double v62;
  double v63;
  double v64;
  uint64_t v65;
  CGRect ClipBoundingBox;

  v65 = *MEMORY[0x24BDAC8D0];
  v14 = *a2;
  v13 = *((double *)a2 + 1);
  v58 = 0;
  v59 = 1.0;
  v15 = MEMORY[0x23B7C8EA8](a1, &v59, &v58);
  if (v15)
  {
    v16 = v15;
    type metadata accessor for GraphicsContext.Storage();
    v17 = swift_allocObject();
    *(_QWORD *)(v17 + 32) = 1065353216;
    *(_QWORD *)(v17 + 40) = 0x7FF8000000000000;
    v18 = (id)RBDrawingStateGetDisplayList();
    v60 = *(double *)&v14;
    v61 = v13;
    type metadata accessor for GraphicsContext.Storage.Shared();
    swift_allocObject();
    swift_retain();
    swift_retain();
    *(_QWORD *)(v17 + 16) = GraphicsContext.Storage.Shared.init(list:environment:)(v18, (uint64_t *)&v60);
    *(_QWORD *)(v17 + 24) = v16;
    *(_BYTE *)(v17 + 48) = 0;
    v57 = v17;
    v19 = v59;
    if (v59 == 1.0)
    {
      v20 = 0;
    }
    else
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        v23 = RBDrawingStateInit();
        swift_allocObject();
        v24 = swift_retain();
        v57 = GraphicsContext.Storage.init(_:state:ownsState:resetBlending:)(v24, v23, 1, 0);
        swift_release();
        v17 = v57;
      }
      *(float *)(v17 + 32) = v19;
      v20 = *(_DWORD *)(v17 + 36);
    }
    v25 = v58;
    if (v20 != v58)
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        v26 = RBDrawingStateInit();
        swift_allocObject();
        v27 = swift_retain();
        v57 = GraphicsContext.Storage.init(_:state:ownsState:resetBlending:)(v27, v26, 1, 0);
        swift_release();
      }
      *(_DWORD *)(v57 + 36) = v25;
    }
    v28 = *(const __CTLine **)a7;
    v29 = *(_QWORD *)(a7 + 8);
    v30 = *(double *)(a7 + 16);
    v31 = *(double *)(a7 + 24);
    outlined retain of Text.Layout.Run((void **)a7);
    v32 = (id)_CTLineGetRunAtIndex(v28, v29);
    specialized Text.Layout.TypographicBounds.init(run:range:)((const __CTRun *)v32, (CFRange)0, &v60);

    outlined release of Text.Layout.Run((id *)a7);
    v33 = v62;
    v34 = v30 + v60;
    v35 = v31 + v61 - v63;
    v36 = v63 + v64;
    outlined retain of Text.Layout.Run((void **)a7);
    v37 = (id)_CTLineGetRunAtIndex(v28, v29);
    v38 = CTRunGetAttributes((CTRunRef)v37);

    v39 = (id)_CTLineGetRunAtIndex(v28, v29);
    outlined release of Text.Layout.Run((id *)a7);
    StringRange = CTRunGetStringRange((CTRunRef)v39);

    (*(void (**)(uint64_t, const __CFDictionary *, CFIndex, CFIndex, uint64_t *, double, double, double, double))(*(_QWORD *)a5 + 80))(a6, v38, StringRange.location, StringRange.length, &v57, v34, v35, v33, v36);
    swift_release();
  }
  else
  {
    v21 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BE7EEF8]), sel_init);
    objc_msgSend(v21, sel_setProfile_, 1);
    objc_msgSend(v21, sel_setDefaultColorSpace_, 1);
    ClipBoundingBox = CGContextGetClipBoundingBox(a1);
    objc_msgSend(v21, sel_setContentRect_, ClipBoundingBox.origin.x, ClipBoundingBox.origin.y, ClipBoundingBox.size.width, ClipBoundingBox.size.height);
    if ((a4 & 1) != 0)
    {
      if (v13 == 0.0)
      {
        v41 = swift_retain_n();
        v22 = specialized closure #1 in PropertyList.subscript.getter(v41);
      }
      else
      {
        swift_retain_n();
        swift_retain_n();
        v22 = specialized PropertyList.Tracker.value<A>(_:for:)(v14);
        swift_release_n();
      }
      swift_release_n();
    }
    else
    {
      v22 = *(double *)&a3;
    }
    objc_msgSend(v21, sel_setDeviceScale_, v22);
    type metadata accessor for GraphicsContext.Storage();
    inited = swift_initStackObject();
    *(_QWORD *)(inited + 32) = 1065353216;
    *(_QWORD *)(inited + 40) = 0x7FF8000000000000;
    v60 = *(double *)&v14;
    v61 = v13;
    type metadata accessor for GraphicsContext.Storage.Shared();
    swift_allocObject();
    swift_retain();
    v43 = v21;
    swift_retain();
    *(_QWORD *)(inited + 16) = GraphicsContext.Storage.Shared.init(list:environment:)(v43, (uint64_t *)&v60);
    *(_QWORD *)(inited + 24) = RBDisplayListGetState();
    *(_BYTE *)(inited + 48) = 0;
    v57 = inited;
    v44 = *(const __CTLine **)a7;
    v45 = *(_QWORD *)(a7 + 8);
    v46 = *(double *)(a7 + 16);
    v47 = *(double *)(a7 + 24);
    outlined retain of Text.Layout.Run((void **)a7);
    v48 = (id)_CTLineGetRunAtIndex(v44, v45);
    specialized Text.Layout.TypographicBounds.init(run:range:)((const __CTRun *)v48, (CFRange)0, &v60);

    outlined release of Text.Layout.Run((id *)a7);
    v49 = v62;
    v50 = v46 + v60;
    v51 = v47 + v61 - v63;
    v52 = v63 + v64;
    outlined retain of Text.Layout.Run((void **)a7);
    v53 = (id)_CTLineGetRunAtIndex(v44, v45);
    v54 = CTRunGetAttributes((CTRunRef)v53);

    v55 = (id)_CTLineGetRunAtIndex(v44, v45);
    outlined release of Text.Layout.Run((id *)a7);
    v56 = CTRunGetStringRange((CTRunRef)v55);

    (*(void (**)(uint64_t, const __CFDictionary *, CFIndex, CFIndex, uint64_t *, double, double, double, double))(*(_QWORD *)a5 + 80))(a6, v54, v56.location, v56.length, &v57, v50, v51, v49, v52);
    objc_msgSend(v43, sel_renderInContext_options_, a1, 0);
    swift_release();

  }
}

uint64_t specialized static GraphicsContext.renderingTo(cgContext:environment:deviceScale:content:)(CGContext *a1, uint64_t *a2, uint64_t a3, char a4, uint64_t a5, _QWORD *a6, char a7, uint64_t a8)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  float v20;
  int v21;
  id v22;
  double v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  id v32;
  int v35;
  float v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  CGRect ClipBoundingBox;

  v39 = *MEMORY[0x24BDAC8D0];
  v15 = *a2;
  v14 = a2[1];
  v35 = 0;
  v36 = 1.0;
  v16 = MEMORY[0x23B7C8EA8](a1, &v36, &v35);
  if (v16)
  {
    v17 = v16;
    type metadata accessor for GraphicsContext.Storage();
    v18 = swift_allocObject();
    *(_QWORD *)(v18 + 32) = 1065353216;
    *(_QWORD *)(v18 + 40) = 0x7FF8000000000000;
    v19 = (id)RBDrawingStateGetDisplayList();
    v37 = v15;
    v38 = v14;
    type metadata accessor for GraphicsContext.Storage.Shared();
    swift_allocObject();
    swift_retain();
    swift_retain();
    *(_QWORD *)(v18 + 16) = GraphicsContext.Storage.Shared.init(list:environment:)(v19, &v37);
    *(_QWORD *)(v18 + 24) = v17;
    *(_BYTE *)(v18 + 48) = 0;
    v37 = v18;
    v20 = v36;
    if (v36 == 1.0)
    {
      v21 = 0;
    }
    else
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        v24 = RBDrawingStateInit();
        swift_allocObject();
        v25 = swift_retain();
        v26 = GraphicsContext.Storage.init(_:state:ownsState:resetBlending:)(v25, v24, 1, 0);
        v37 = v26;
        swift_release();
        v18 = v26;
      }
      *(float *)(v18 + 32) = v20;
      v21 = *(_DWORD *)(v18 + 36);
    }
    v27 = v35;
    if (v21 != v35)
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        v28 = RBDrawingStateInit();
        swift_allocObject();
        v29 = swift_retain();
        v37 = GraphicsContext.Storage.init(_:state:ownsState:resetBlending:)(v29, v28, 1, 0);
        swift_release();
      }
      *(_DWORD *)(v37 + 36) = v27;
    }
    specialized closure #2 in ResolvedStyledText.TextLayoutManager.draw(in:with:applyingMarginOffsets:containsResolvable:context:renderer:)(&v37, a5, a6, a7 & 1, a8);
  }
  else
  {
    v22 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BE7EEF8]), sel_init);
    objc_msgSend(v22, sel_setProfile_, 1);
    objc_msgSend(v22, sel_setDefaultColorSpace_, 1);
    ClipBoundingBox = CGContextGetClipBoundingBox(a1);
    objc_msgSend(v22, sel_setContentRect_, ClipBoundingBox.origin.x, ClipBoundingBox.origin.y, ClipBoundingBox.size.width, ClipBoundingBox.size.height);
    if ((a4 & 1) != 0)
    {
      if (v14)
      {
        swift_retain_n();
        swift_retain_n();
        v23 = specialized PropertyList.Tracker.value<A>(_:for:)(v15);
        swift_release_n();
      }
      else
      {
        v30 = swift_retain_n();
        v23 = specialized closure #1 in PropertyList.subscript.getter(v30);
      }
      swift_release_n();
    }
    else
    {
      v23 = *(double *)&a3;
    }
    objc_msgSend(v22, sel_setDeviceScale_, v23);
    type metadata accessor for GraphicsContext.Storage();
    v31 = swift_allocObject();
    *(_QWORD *)(v31 + 32) = 1065353216;
    *(_QWORD *)(v31 + 40) = 0x7FF8000000000000;
    v37 = v15;
    v38 = v14;
    type metadata accessor for GraphicsContext.Storage.Shared();
    swift_allocObject();
    swift_retain();
    v32 = v22;
    swift_retain();
    *(_QWORD *)(v31 + 16) = GraphicsContext.Storage.Shared.init(list:environment:)(v32, &v37);
    *(_QWORD *)(v31 + 24) = RBDisplayListGetState();
    *(_BYTE *)(v31 + 48) = 0;
    v37 = v31;
    specialized closure #2 in ResolvedStyledText.TextLayoutManager.draw(in:with:applyingMarginOffsets:containsResolvable:context:renderer:)(&v37, a5, a6, a7 & 1, a8);
    objc_msgSend(v32, sel_renderInContext_options_, a1, 0);

  }
  return swift_release();
}

uint64_t specialized GraphicsContext.drawLayer(flags:content:)(char a1, double a2, double a3, uint64_t a4, double *a5, _QWORD *a6, uint64_t a7, unsigned int a8, _QWORD *a9, uint64_t a10)
{
  uint64_t v16;
  uint64_t v17;
  uint64_t v22;

  v16 = RBDrawingStateBeginLayer();
  type metadata accessor for GraphicsContext.Storage();
  swift_allocObject();
  v17 = swift_retain();
  v22 = GraphicsContext.Storage.init(_:state:ownsState:resetBlending:)(v17, v16, 0, (a1 & 0x20) == 0);
  swift_retain();
  closure #2 in DisplayList.GraphicsRenderer.render(item:in:)((uint64_t)&v22, a5, a6, a2, a3, a7, a8, a9, a10);
  swift_release();
  RBDrawingStateDrawLayer();
  return swift_release();
}

uint64_t specialized GraphicsContext.clipToLayer(opacity:options:content:)(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, int a5)
{
  return specialized GraphicsContext.clipToLayer(opacity:options:content:)(a1, a2, a3, a4, a5);
}

{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  __int16 v14;
  char v15;
  uint64_t v16;

  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    v8 = RBDrawingStateInit();
    type metadata accessor for GraphicsContext.Storage();
    swift_allocObject();
    v9 = swift_retain();
    *a2 = GraphicsContext.Storage.init(_:state:ownsState:resetBlending:)(v9, v8, 1, 0);
    swift_release();
  }
  v10 = RBDrawingStateBeginLayer();
  type metadata accessor for GraphicsContext.Storage();
  swift_allocObject();
  v11 = swift_retain();
  v16 = GraphicsContext.Storage.init(_:state:ownsState:resetBlending:)(v11, v10, 0, 1);
  v13 = a4;
  v14 = a5;
  v15 = BYTE2(a5);
  swift_retain();
  DisplayList.GraphicsRenderer.render(list:in:)(&v13, &v16);
  swift_release();
  RBDrawingStateClipLayer();
  return swift_release();
}

uint64_t specialized GraphicsContext.drawLayer(flags:content:)(char a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5)
{
  __int16 v5;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  __int16 v13;
  char v14;
  uint64_t v15;

  v5 = a5;
  v8 = HIWORD(a5);
  v9 = RBDrawingStateBeginLayer();
  type metadata accessor for GraphicsContext.Storage();
  swift_allocObject();
  v10 = swift_retain();
  v15 = GraphicsContext.Storage.init(_:state:ownsState:resetBlending:)(v10, v9, 0, (a1 & 0x20) == 0);
  v12 = a4;
  v13 = v5;
  v14 = v8;
  swift_retain();
  DisplayList.GraphicsRenderer.render(list:in:)(&v12, &v15);
  swift_release();
  RBDrawingStateDrawLayer();
  return swift_release();
}

void specialized GraphicsContext.withPlatformContext(content:)(uint64_t a1, void (*a2)(id, double, double), double a3, double a4)
{
  CGContext *v8;
  CGContext *v9;
  CGBlendMode v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  id v15;
  id v16;

  v8 = (CGContext *)(id)RBDrawingStateBeginCGContext();
  v9 = v8;
  v10 = *(_DWORD *)(a1 + 36);
  if (v10)
    CGContextSetBlendMode(v8, v10);
  v11 = *(_QWORD *)(a1 + 40);
  v12 = ~v11 & 0x7FF0000000000000;
  v13 = v11 & 0xFFFFFFFFFFFFFLL;
  if (v12)
    v14 = 1;
  else
    v14 = v13 == 0;
  if (v14)
  {
    _CGContextSetShapeDistance(*(double *)(a1 + 40));
    v15 = objc_msgSend(objc_allocWithZone((Class)CoreGraphicsContext), sel_initWithCGContext_, v9);
    a2(objc_msgSend(v15, sel_push), a3, a4);
    objc_msgSend(v15, "pop");

    _CGContextSetShapeDistance(NAN);
  }
  else
  {
    v16 = objc_msgSend(objc_allocWithZone((Class)CoreGraphicsContext), sel_initWithCGContext_, v9);
    a2(objc_msgSend(v16, sel_push), a3, a4);
    objc_msgSend(v16, "pop");

  }
  RBDrawingStateEndCGContext();

}

uint64_t specialized static GraphicsContext.renderingTo(cgContext:environment:deviceScale:content:)(CGContext *a1, uint64_t *a2, uint64_t a3, char a4, void (*a5)(uint64_t *, double, double), double a6, double a7)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  float v19;
  int v20;
  id v21;
  double v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  id v31;
  int v33;
  float v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  CGRect ClipBoundingBox;

  v37 = *MEMORY[0x24BDAC8D0];
  v14 = *a2;
  v13 = a2[1];
  v33 = 0;
  v34 = 1.0;
  v15 = MEMORY[0x23B7C8EA8](a1, &v34, &v33);
  if (v15)
  {
    v16 = v15;
    type metadata accessor for GraphicsContext.Storage();
    v17 = swift_allocObject();
    *(_QWORD *)(v17 + 32) = 1065353216;
    *(_QWORD *)(v17 + 40) = 0x7FF8000000000000;
    v18 = (id)RBDrawingStateGetDisplayList();
    v35 = v14;
    v36 = v13;
    type metadata accessor for GraphicsContext.Storage.Shared();
    swift_allocObject();
    swift_retain();
    swift_retain();
    *(_QWORD *)(v17 + 16) = GraphicsContext.Storage.Shared.init(list:environment:)(v18, &v35);
    *(_QWORD *)(v17 + 24) = v16;
    *(_BYTE *)(v17 + 48) = 0;
    v35 = v17;
    v19 = v34;
    if (v34 == 1.0)
    {
      v20 = 0;
    }
    else
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        v23 = RBDrawingStateInit();
        swift_allocObject();
        v24 = swift_retain();
        v25 = GraphicsContext.Storage.init(_:state:ownsState:resetBlending:)(v24, v23, 1, 0);
        v35 = v25;
        swift_release();
        v17 = v25;
      }
      *(float *)(v17 + 32) = v19;
      v20 = *(_DWORD *)(v17 + 36);
    }
    v26 = v33;
    if (v20 != v33)
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        v27 = RBDrawingStateInit();
        swift_allocObject();
        v28 = swift_retain();
        v35 = GraphicsContext.Storage.init(_:state:ownsState:resetBlending:)(v28, v27, 1, 0);
        swift_release();
      }
      *(_DWORD *)(v35 + 36) = v26;
    }
    a5(&v35, a6, a7);
  }
  else
  {
    v21 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BE7EEF8]), sel_init);
    objc_msgSend(v21, sel_setProfile_, 1);
    objc_msgSend(v21, sel_setDefaultColorSpace_, 1);
    ClipBoundingBox = CGContextGetClipBoundingBox(a1);
    objc_msgSend(v21, sel_setContentRect_, ClipBoundingBox.origin.x, ClipBoundingBox.origin.y, ClipBoundingBox.size.width, ClipBoundingBox.size.height);
    if ((a4 & 1) != 0)
    {
      if (v13)
      {
        swift_retain_n();
        swift_retain_n();
        v22 = specialized PropertyList.Tracker.value<A>(_:for:)(v14);
        swift_release_n();
      }
      else
      {
        v29 = swift_retain_n();
        v22 = specialized closure #1 in PropertyList.subscript.getter(v29);
      }
      swift_release_n();
    }
    else
    {
      v22 = *(double *)&a3;
    }
    objc_msgSend(v21, sel_setDeviceScale_, v22);
    type metadata accessor for GraphicsContext.Storage();
    v30 = swift_allocObject();
    *(_QWORD *)(v30 + 32) = 1065353216;
    *(_QWORD *)(v30 + 40) = 0x7FF8000000000000;
    v35 = v14;
    v36 = v13;
    type metadata accessor for GraphicsContext.Storage.Shared();
    swift_allocObject();
    swift_retain();
    v31 = v21;
    swift_retain();
    *(_QWORD *)(v30 + 16) = GraphicsContext.Storage.Shared.init(list:environment:)(v31, &v35);
    *(_QWORD *)(v30 + 24) = RBDisplayListGetState();
    *(_BYTE *)(v30 + 48) = 0;
    v35 = v30;
    a5(&v35, a6, a7);
    objc_msgSend(v31, sel_renderInContext_options_, a1, 0);

  }
  return swift_release();
}

uint64_t specialized static GraphicsContext.renderingTo(cgContext:environment:deviceScale:content:)(CGContext *a1, uint64_t *a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, int a7, double a8, double a9, double a10)
{
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  float v24;
  int v25;
  id v26;
  double v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  __n128 *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  id v39;
  __n128 *v40;
  uint64_t v42;
  uint64_t v43;
  int v45;
  float v46;
  double v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  CGRect ClipBoundingBox;

  v50 = *MEMORY[0x24BDAC8D0];
  v19 = *a2;
  v18 = a2[1];
  v45 = 0;
  v46 = 1.0;
  v20 = MEMORY[0x23B7C8EA8](a1, &v46, &v45);
  if (!v20)
  {
    v26 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BE7EEF8]), sel_init);
    objc_msgSend(v26, sel_setProfile_, 1);
    objc_msgSend(v26, sel_setDefaultColorSpace_, 1);
    ClipBoundingBox = CGContextGetClipBoundingBox(a1);
    objc_msgSend(v26, sel_setContentRect_, ClipBoundingBox.origin.x, ClipBoundingBox.origin.y, ClipBoundingBox.size.width, ClipBoundingBox.size.height);
    if ((a4 & 1) != 0)
    {
      if (v18)
      {
        swift_retain_n();
        swift_retain_n();
        v27 = specialized PropertyList.Tracker.value<A>(_:for:)(v19);
        swift_release_n();
      }
      else
      {
        v37 = swift_retain_n();
        v27 = specialized closure #1 in PropertyList.subscript.getter(v37);
      }
      swift_release_n();
    }
    else
    {
      v27 = *(double *)&a3;
    }
    objc_msgSend(v26, sel_setDeviceScale_, v27);
    type metadata accessor for GraphicsContext.Storage();
    v38 = swift_allocObject();
    *(_QWORD *)(v38 + 32) = 1065353216;
    *(_QWORD *)(v38 + 40) = 0x7FF8000000000000;
    v48 = v19;
    v49 = v18;
    type metadata accessor for GraphicsContext.Storage.Shared();
    swift_allocObject();
    swift_retain();
    v39 = v26;
    swift_retain();
    *(_QWORD *)(v38 + 16) = GraphicsContext.Storage.Shared.init(list:environment:)(v39, &v48);
    *(_QWORD *)(v38 + 24) = RBDisplayListGetState();
    *(_BYTE *)(v38 + 48) = 0;
    v48 = v38;
    if (a8 == 0.0 && a9 == 0.0)
    {
      v40 = *(__n128 **)(a5 + 8);
      if (v40)
      {
LABEL_28:
        v47 = a10;
        swift_bridgeObjectRetain();
        swift_retain();
        specialized DisplayList.GraphicsRenderer.render(at:do:)((unint64_t *)&v47, v40, (uint64_t)v40, a6, a7 & 0xFFFFFF, &v48);
        swift_release();
        swift_bridgeObjectRelease();
        objc_msgSend(v39, sel_renderInContext_options_, a1, 0);

        return swift_release();
      }
    }
    else
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        v42 = RBDrawingStateInit();
        swift_allocObject();
        v43 = swift_retain();
        v48 = GraphicsContext.Storage.init(_:state:ownsState:resetBlending:)(v43, v42, 1, 0);
        swift_release();
      }
      RBDrawingStateTranslateCTM();
      v40 = *(__n128 **)(a5 + 8);
      if (v40)
        goto LABEL_28;
    }
    LOBYTE(v47) = *(_BYTE *)a5;
    type metadata accessor for DisplayList.GraphicsRenderer();
    swift_allocObject();
    v40 = (__n128 *)DisplayList.GraphicsRenderer.init(platformViewMode:)((char *)&v47);
    *(_QWORD *)(a5 + 8) = v40;
    goto LABEL_28;
  }
  v21 = v20;
  type metadata accessor for GraphicsContext.Storage();
  v22 = swift_allocObject();
  *(_QWORD *)(v22 + 32) = 1065353216;
  *(_QWORD *)(v22 + 40) = 0x7FF8000000000000;
  v23 = (id)RBDrawingStateGetDisplayList();
  v48 = v19;
  v49 = v18;
  type metadata accessor for GraphicsContext.Storage.Shared();
  swift_allocObject();
  swift_retain();
  swift_retain();
  *(_QWORD *)(v22 + 16) = GraphicsContext.Storage.Shared.init(list:environment:)(v23, &v48);
  *(_QWORD *)(v22 + 24) = v21;
  *(_BYTE *)(v22 + 48) = 0;
  v48 = v22;
  v24 = v46;
  if (v46 == 1.0)
  {
    v25 = 0;
  }
  else
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      v28 = RBDrawingStateInit();
      swift_allocObject();
      v29 = swift_retain();
      v30 = GraphicsContext.Storage.init(_:state:ownsState:resetBlending:)(v29, v28, 1, 0);
      v48 = v30;
      swift_release();
      v22 = v30;
    }
    *(float *)(v22 + 32) = v24;
    v25 = *(_DWORD *)(v22 + 36);
  }
  v31 = v45;
  if (v25 != v45)
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      v32 = RBDrawingStateInit();
      swift_allocObject();
      v33 = swift_retain();
      v48 = GraphicsContext.Storage.init(_:state:ownsState:resetBlending:)(v33, v32, 1, 0);
      swift_release();
    }
    *(_DWORD *)(v48 + 36) = v31;
  }
  if (a8 != 0.0 || a9 != 0.0)
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      v35 = RBDrawingStateInit();
      swift_allocObject();
      v36 = swift_retain();
      v48 = GraphicsContext.Storage.init(_:state:ownsState:resetBlending:)(v36, v35, 1, 0);
      swift_release();
    }
    RBDrawingStateTranslateCTM();
    v34 = *(__n128 **)(a5 + 8);
    if (v34)
      goto LABEL_16;
    goto LABEL_20;
  }
  v34 = *(__n128 **)(a5 + 8);
  if (!v34)
  {
LABEL_20:
    LOBYTE(v47) = *(_BYTE *)a5;
    type metadata accessor for DisplayList.GraphicsRenderer();
    swift_allocObject();
    v34 = (__n128 *)DisplayList.GraphicsRenderer.init(platformViewMode:)((char *)&v47);
    *(_QWORD *)(a5 + 8) = v34;
  }
LABEL_16:
  v47 = a10;
  swift_retain();
  swift_bridgeObjectRetain();
  specialized DisplayList.GraphicsRenderer.render(at:do:)((unint64_t *)&v47, v34, (uint64_t)v34, a6, a7 & 0xFFFFFF, &v48);
  swift_release();
  swift_bridgeObjectRelease();
  return swift_release();
}

void specialized static GraphicsContext.renderingTo(cgContext:environment:deviceScale:content:)(CGContext *a1, uint64_t *a2, uint64_t a3, char a4, void *a5, double a6, double a7, float a8)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  float v21;
  int v22;
  id v23;
  double v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  double v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  id v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  double v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  float v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  CGRect ClipBoundingBox;

  v53 = *MEMORY[0x24BDAC8D0];
  v16 = *a2;
  v15 = a2[1];
  v49 = 0;
  v50 = 1.0;
  v17 = MEMORY[0x23B7C8EA8](a1, &v50, &v49);
  if (v17)
  {
    v18 = v17;
    type metadata accessor for GraphicsContext.Storage();
    v19 = swift_allocObject();
    *(_QWORD *)(v19 + 32) = 1065353216;
    *(_QWORD *)(v19 + 40) = 0x7FF8000000000000;
    v20 = (id)RBDrawingStateGetDisplayList();
    v51 = v16;
    v52 = v15;
    type metadata accessor for GraphicsContext.Storage.Shared();
    swift_allocObject();
    swift_retain();
    swift_retain();
    *(_QWORD *)(v19 + 16) = GraphicsContext.Storage.Shared.init(list:environment:)(v20, &v51);
    *(_QWORD *)(v19 + 24) = v18;
    *(_BYTE *)(v19 + 48) = 0;
    v21 = v50;
    if (v50 == 1.0)
    {
      v22 = 0;
    }
    else
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        v25 = RBDrawingStateInit();
        swift_allocObject();
        v26 = swift_retain();
        v27 = GraphicsContext.Storage.init(_:state:ownsState:resetBlending:)(v26, v25, 1, 0);
        swift_release();
        v19 = v27;
      }
      *(float *)(v19 + 32) = v21;
      v22 = *(_DWORD *)(v19 + 36);
    }
    v28 = v49;
    if (v22 != v49)
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        v29 = RBDrawingStateInit();
        swift_allocObject();
        v30 = swift_retain();
        v31 = GraphicsContext.Storage.init(_:state:ownsState:resetBlending:)(v30, v29, 1, 0);
        swift_release();
        v19 = v31;
      }
      *(_DWORD *)(v19 + 36) = v28;
    }
    if (a6 != 0.0 || a7 != 0.0)
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        v32 = RBDrawingStateInit();
        swift_allocObject();
        v33 = swift_retain();
        v34 = GraphicsContext.Storage.init(_:state:ownsState:resetBlending:)(v33, v32, 1, 0);
        swift_release();
        v19 = v34;
      }
      RBDrawingStateTranslateCTM();
    }
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      v36 = RBDrawingStateInit();
      swift_allocObject();
      v37 = swift_retain();
      v38 = GraphicsContext.Storage.init(_:state:ownsState:resetBlending:)(v37, v36, 1, 0);
      swift_release();
      v19 = v38;
    }
    *(float *)&v35 = a8;
    objc_msgSend(a5, sel_drawInState_by_, *(_QWORD *)(v19 + 24), v35);
    swift_release();
  }
  else
  {
    v23 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BE7EEF8]), sel_init);
    objc_msgSend(v23, sel_setProfile_, 1);
    objc_msgSend(v23, sel_setDefaultColorSpace_, 1);
    ClipBoundingBox = CGContextGetClipBoundingBox(a1);
    objc_msgSend(v23, sel_setContentRect_, ClipBoundingBox.origin.x, ClipBoundingBox.origin.y, ClipBoundingBox.size.width, ClipBoundingBox.size.height);
    if ((a4 & 1) != 0)
    {
      if (v15)
      {
        swift_retain_n();
        swift_retain_n();
        v24 = specialized PropertyList.Tracker.value<A>(_:for:)(v16);
        swift_release_n();
      }
      else
      {
        v39 = swift_retain_n();
        v24 = specialized closure #1 in PropertyList.subscript.getter(v39);
      }
      swift_release_n();
    }
    else
    {
      v24 = *(double *)&a3;
    }
    objc_msgSend(v23, sel_setDeviceScale_, v24);
    type metadata accessor for GraphicsContext.Storage();
    v40 = swift_allocObject();
    *(_QWORD *)(v40 + 32) = 1065353216;
    *(_QWORD *)(v40 + 40) = 0x7FF8000000000000;
    v51 = v16;
    v52 = v15;
    type metadata accessor for GraphicsContext.Storage.Shared();
    swift_allocObject();
    swift_retain();
    v41 = v23;
    swift_retain();
    *(_QWORD *)(v40 + 16) = GraphicsContext.Storage.Shared.init(list:environment:)(v41, &v51);
    *(_QWORD *)(v40 + 24) = RBDisplayListGetState();
    *(_BYTE *)(v40 + 48) = 0;
    if (a6 != 0.0 || a7 != 0.0)
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        v42 = RBDrawingStateInit();
        swift_allocObject();
        v43 = swift_retain();
        v44 = GraphicsContext.Storage.init(_:state:ownsState:resetBlending:)(v43, v42, 1, 0);
        swift_release();
        v40 = v44;
      }
      RBDrawingStateTranslateCTM();
    }
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      v46 = RBDrawingStateInit();
      swift_allocObject();
      v47 = swift_retain();
      v48 = GraphicsContext.Storage.init(_:state:ownsState:resetBlending:)(v47, v46, 1, 0);
      swift_release();
      v40 = v48;
    }
    *(float *)&v45 = a8;
    objc_msgSend(a5, sel_drawInState_by_, *(_QWORD *)(v40 + 24), v45);
    objc_msgSend(v41, sel_renderInContext_options_, a1, 0);
    swift_release();

  }
}

uint64_t sub_234DDCF84()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t specialized GraphicsContext.drawLayer(flags:content:)(char a1, CGFloat a2, uint64_t a3, void *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  CGContext *v13;
  CGContext *v14;
  CGBlendMode v15;
  __int128 v17;
  CGAffineTransform v18;

  v7 = RBDrawingStateBeginLayer();
  type metadata accessor for GraphicsContext.Storage();
  swift_allocObject();
  v8 = swift_retain();
  v9 = GraphicsContext.Storage.init(_:state:ownsState:resetBlending:)(v8, v7, 0, (a1 & 0x20) == 0);
  swift_retain();
  v10 = v9;
  if (objc_msgSend(a4, sel_isGeometryFlipped))
  {
    v18.b = 0.0;
    v18.c = 0.0;
    v18.a = 1.0;
    v17 = xmmword_2352A2F30;
    *(_OWORD *)&v18.d = xmmword_2352A2F30;
    v18.ty = a2;
    v10 = v9;
    if (!CGAffineTransformIsIdentity(&v18))
    {
      v10 = v9;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        v11 = RBDrawingStateInit();
        swift_allocObject();
        v12 = swift_retain();
        v10 = GraphicsContext.Storage.init(_:state:ownsState:resetBlending:)(v12, v11, 1, 0);
        swift_release();
      }
      v18.b = 0.0;
      v18.c = 0.0;
      v18.a = 1.0;
      *(_OWORD *)&v18.d = xmmword_2352A2F30;
      v18.ty = a2;
      RBDrawingStateConcatCTM();
    }
  }
  v13 = (CGContext *)(id)RBDrawingStateBeginCGContext();
  v14 = v13;
  v15 = *(_DWORD *)(v10 + 36);
  if (v15)
    CGContextSetBlendMode(v13, v15);
  objc_msgSend(a4, sel_renderInContext_, v14, v17);
  RBDrawingStateEndCGContext();
  swift_release();

  RBDrawingStateDrawLayer();
  return swift_release();
}

uint64_t specialized static GraphicsContext.renderingTo(cgContext:environment:deviceScale:content:)(CGContext *a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, void *a6)
{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  double v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  float v23;
  int v24;
  id v25;
  double v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  char v37;
  int v38;
  char v39;
  int v40;
  uint64_t v41;
  id v42;
  uint64_t v43;
  uint64_t v44;
  id v45;
  void *v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  char v50;
  int v51;
  char v52;
  int v53;
  uint64_t v54;
  id v55;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  float v63;
  __int128 v64;
  char v65;
  __int128 v66;
  int v67;
  void *v68;
  uint64_t v69;
  char v70;
  __int128 v71;
  int v72;
  uint64_t v73;
  CGRect ClipBoundingBox;

  v57 = a6;
  v58 = a5;
  v73 = *MEMORY[0x24BDAC8D0];
  type metadata accessor for RangeSet<Text.Layout.CharacterIndex>();
  v60 = v10;
  v59 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v57 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for Text.Effect.RenderSegmentation.StaticRuns(0);
  v14 = MEMORY[0x24BDAC7A8](v13);
  v16 = (char *)&v57 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = *(void **)a2;
  v17 = *(_QWORD *)(a2 + 8);
  v62 = 0;
  v63 = 1.0;
  v19 = MEMORY[0x23B7C8EA8](a1, &v63, &v62, v14);
  if (v19)
  {
    v20 = v19;
    type metadata accessor for GraphicsContext.Storage();
    v21 = swift_allocObject();
    *(_QWORD *)(v21 + 32) = 1065353216;
    *(_QWORD *)(v21 + 40) = 0x7FF8000000000000;
    v22 = (id)RBDrawingStateGetDisplayList();
    v68 = v18;
    v69 = v17;
    type metadata accessor for GraphicsContext.Storage.Shared();
    swift_allocObject();
    swift_retain();
    swift_retain();
    *(_QWORD *)(v21 + 16) = GraphicsContext.Storage.Shared.init(list:environment:)(v22, (uint64_t *)&v68);
    *(_QWORD *)(v21 + 24) = v20;
    *(_BYTE *)(v21 + 48) = 0;
    v61 = v21;
    v23 = v63;
    if (v63 == 1.0)
    {
      v24 = 0;
    }
    else
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        v27 = RBDrawingStateInit();
        swift_allocObject();
        v28 = swift_retain();
        v29 = GraphicsContext.Storage.init(_:state:ownsState:resetBlending:)(v28, v27, 1, 0);
        v61 = v29;
        swift_release();
        v21 = v29;
      }
      *(float *)(v21 + 32) = v23;
      v24 = *(_DWORD *)(v21 + 36);
    }
    v30 = v62;
    if (v24 != v62)
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        v31 = RBDrawingStateInit();
        swift_allocObject();
        v32 = swift_retain();
        v61 = GraphicsContext.Storage.init(_:state:ownsState:resetBlending:)(v32, v31, 1, 0);
        swift_release();
      }
      *(_DWORD *)(v61 + 36) = v30;
    }
    v33 = v57;
    v34 = (uint64_t)v57 + OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D413TextRunsLayer_content;
    swift_beginAccess();
    v36 = *(_QWORD *)(v34 + 8);
    v37 = *(_BYTE *)(v34 + 16);
    v38 = *(_DWORD *)(v34 + 40);
    v68 = *(void **)v34;
    v35 = v68;
    v69 = v36;
    v70 = v37;
    v71 = *(_OWORD *)(v34 + 24);
    v72 = v38;
    outlined init with copy of Text.Effect.RenderSegmentation.StaticRuns(v34, (uint64_t)v16);
    v39 = v16[16];
    v40 = *((_DWORD *)v16 + 10);
    v64 = *(_OWORD *)v16;
    v65 = v39;
    v66 = *(_OWORD *)(v16 + 24);
    v67 = v40;
    v41 = (uint64_t)&v16[*(int *)(v13 + 24)];
    outlined copy of Text.Layout.Line.Line(v35, v36, v37);
    Text.Layout.Line.characterRanges(runIndices:)(v41, (uint64_t)v12);
    outlined destroy of TypesettingConfiguration((uint64_t)v16, type metadata accessor for Text.Effect.RenderSegmentation.StaticRuns);
    v42 = v33;
    specialized TextRenderLayer.draw(line:glyphOrigin:ranges:in:_:)((uint64_t *)&v68, (uint64_t)v12, &v61, v58, (uint64_t)v42);

    (*(void (**)(char *, uint64_t))(v59 + 8))(v12, v60);
    outlined consume of Text.Layout.Line.Line(v68, v69, v70);
  }
  else
  {
    v25 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BE7EEF8]), sel_init);
    objc_msgSend(v25, sel_setProfile_, 1);
    objc_msgSend(v25, sel_setDefaultColorSpace_, 1);
    ClipBoundingBox = CGContextGetClipBoundingBox(a1);
    objc_msgSend(v25, sel_setContentRect_, ClipBoundingBox.origin.x, ClipBoundingBox.origin.y, ClipBoundingBox.size.width, ClipBoundingBox.size.height);
    if ((a4 & 1) != 0)
    {
      if (v17)
      {
        swift_retain_n();
        swift_retain_n();
        v26 = specialized PropertyList.Tracker.value<A>(_:for:)((uint64_t)v18);
        swift_release_n();
      }
      else
      {
        v43 = swift_retain_n();
        v26 = specialized closure #1 in PropertyList.subscript.getter(v43);
      }
      swift_release_n();
    }
    else
    {
      v26 = *(double *)&a3;
    }
    objc_msgSend(v25, sel_setDeviceScale_, v26, v57);
    type metadata accessor for GraphicsContext.Storage();
    v44 = swift_allocObject();
    *(_QWORD *)(v44 + 32) = 1065353216;
    *(_QWORD *)(v44 + 40) = 0x7FF8000000000000;
    v68 = v18;
    v69 = v17;
    type metadata accessor for GraphicsContext.Storage.Shared();
    swift_allocObject();
    swift_retain();
    v45 = v25;
    swift_retain();
    *(_QWORD *)(v44 + 16) = GraphicsContext.Storage.Shared.init(list:environment:)(v45, (uint64_t *)&v68);
    *(_QWORD *)(v44 + 24) = RBDisplayListGetState();
    *(_BYTE *)(v44 + 48) = 0;
    v61 = v44;
    v46 = v57;
    v47 = (uint64_t)v57 + OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D413TextRunsLayer_content;
    swift_beginAccess();
    v49 = *(_QWORD *)(v47 + 8);
    v50 = *(_BYTE *)(v47 + 16);
    v51 = *(_DWORD *)(v47 + 40);
    v68 = *(void **)v47;
    v48 = v68;
    v69 = v49;
    v70 = v50;
    v71 = *(_OWORD *)(v47 + 24);
    v72 = v51;
    outlined init with copy of Text.Effect.RenderSegmentation.StaticRuns(v47, (uint64_t)v16);
    v52 = v16[16];
    v53 = *((_DWORD *)v16 + 10);
    v64 = *(_OWORD *)v16;
    v65 = v52;
    v66 = *(_OWORD *)(v16 + 24);
    v67 = v53;
    v54 = (uint64_t)&v16[*(int *)(v13 + 24)];
    outlined copy of Text.Layout.Line.Line(v48, v49, v50);
    Text.Layout.Line.characterRanges(runIndices:)(v54, (uint64_t)v12);
    outlined destroy of TypesettingConfiguration((uint64_t)v16, type metadata accessor for Text.Effect.RenderSegmentation.StaticRuns);
    v55 = v46;
    specialized TextRenderLayer.draw(line:glyphOrigin:ranges:in:_:)((uint64_t *)&v68, (uint64_t)v12, &v61, v58, (uint64_t)v55);

    (*(void (**)(char *, uint64_t))(v59 + 8))(v12, v60);
    outlined consume of Text.Layout.Line.Line(v68, v69, v70);
    objc_msgSend(v45, sel_renderInContext_options_, a1, 0);

  }
  return swift_release();
}

void specialized static GraphicsContext.renderingTo(cgContext:environment:deviceScale:content:)(CGContext *a1, uint64_t *a2, uint64_t a3, char a4, void *a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  float v15;
  int v16;
  id v17;
  double v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  void *v26;
  uint64_t v27;
  char *v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  id v32;
  id v33;
  void *v34;
  uint64_t v35;
  char *v36;
  id v37;
  int v38;
  float v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  CGRect ClipBoundingBox;

  v42 = *MEMORY[0x24BDAC8D0];
  v10 = *a2;
  v9 = a2[1];
  v38 = 0;
  v39 = 1.0;
  v11 = MEMORY[0x23B7C8EA8](a1, &v39, &v38);
  if (v11)
  {
    v12 = v11;
    type metadata accessor for GraphicsContext.Storage();
    v13 = swift_allocObject();
    *(_QWORD *)(v13 + 32) = 1065353216;
    *(_QWORD *)(v13 + 40) = 0x7FF8000000000000;
    v14 = (id)RBDrawingStateGetDisplayList();
    v40 = v10;
    v41 = v9;
    type metadata accessor for GraphicsContext.Storage.Shared();
    swift_allocObject();
    swift_retain();
    swift_retain();
    *(_QWORD *)(v13 + 16) = GraphicsContext.Storage.Shared.init(list:environment:)(v14, &v40);
    *(_QWORD *)(v13 + 24) = v12;
    *(_BYTE *)(v13 + 48) = 0;
    v40 = v13;
    v15 = v39;
    if (v39 == 1.0)
    {
      v16 = 0;
    }
    else
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        v19 = RBDrawingStateInit();
        swift_allocObject();
        v20 = swift_retain();
        v21 = GraphicsContext.Storage.init(_:state:ownsState:resetBlending:)(v20, v19, 1, 0);
        v40 = v21;
        swift_release();
        v13 = v21;
      }
      *(float *)(v13 + 32) = v15;
      v16 = *(_DWORD *)(v13 + 36);
    }
    v22 = v38;
    if (v16 != v38)
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        v23 = RBDrawingStateInit();
        swift_allocObject();
        v24 = swift_retain();
        v40 = GraphicsContext.Storage.init(_:state:ownsState:resetBlending:)(v24, v23, 1, 0);
        swift_release();
      }
      *(_DWORD *)(v40 + 36) = v22;
    }
    v25 = objc_msgSend(a5, sel_superlayer);
    if (v25)
    {
      v26 = v25;
      type metadata accessor for TextRenderLayer();
      v27 = swift_dynamicCastClass();
      if (v27)
      {
        v28 = (char *)v27;
        v29 = a5;
        specialized TextRenderLayer.drawContent(_:)(v28, (uint64_t)v29, (uint64_t)&v40);

      }
      else
      {

      }
    }
    swift_release();
  }
  else
  {
    v17 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BE7EEF8]), sel_init);
    objc_msgSend(v17, sel_setProfile_, 1);
    objc_msgSend(v17, sel_setDefaultColorSpace_, 1);
    ClipBoundingBox = CGContextGetClipBoundingBox(a1);
    objc_msgSend(v17, sel_setContentRect_, ClipBoundingBox.origin.x, ClipBoundingBox.origin.y, ClipBoundingBox.size.width, ClipBoundingBox.size.height);
    if ((a4 & 1) != 0)
    {
      if (v9)
      {
        swift_retain_n();
        swift_retain_n();
        v18 = specialized PropertyList.Tracker.value<A>(_:for:)(v10);
        swift_release_n();
      }
      else
      {
        v30 = swift_retain_n();
        v18 = specialized closure #1 in PropertyList.subscript.getter(v30);
      }
      swift_release_n();
    }
    else
    {
      v18 = *(double *)&a3;
    }
    objc_msgSend(v17, sel_setDeviceScale_, v18);
    type metadata accessor for GraphicsContext.Storage();
    v31 = swift_allocObject();
    *(_QWORD *)(v31 + 32) = 1065353216;
    *(_QWORD *)(v31 + 40) = 0x7FF8000000000000;
    v40 = v10;
    v41 = v9;
    type metadata accessor for GraphicsContext.Storage.Shared();
    swift_allocObject();
    swift_retain();
    v32 = v17;
    swift_retain();
    *(_QWORD *)(v31 + 16) = GraphicsContext.Storage.Shared.init(list:environment:)(v32, &v40);
    *(_QWORD *)(v31 + 24) = RBDisplayListGetState();
    *(_BYTE *)(v31 + 48) = 0;
    v40 = v31;
    v33 = objc_msgSend(a5, sel_superlayer);
    if (v33)
    {
      v34 = v33;
      type metadata accessor for TextRenderLayer();
      v35 = swift_dynamicCastClass();
      if (v35)
      {
        v36 = (char *)v35;
        v37 = a5;
        specialized TextRenderLayer.drawContent(_:)(v36, (uint64_t)v37, (uint64_t)&v40);

      }
      else
      {

      }
    }
    objc_msgSend(v32, sel_renderInContext_options_, a1, 0);
    swift_release();

  }
}

{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  float v15;
  int v16;
  id v17;
  double v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  id v30;
  unint64_t v31;
  unint64_t v32;
  int v33;
  float v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  CGRect ClipBoundingBox;

  v37 = *MEMORY[0x24BDAC8D0];
  v10 = *a2;
  v9 = a2[1];
  v33 = 0;
  v34 = 1.0;
  v11 = MEMORY[0x23B7C8EA8](a1, &v34, &v33);
  if (v11)
  {
    v12 = v11;
    type metadata accessor for GraphicsContext.Storage();
    v13 = swift_allocObject();
    *(_QWORD *)(v13 + 32) = 1065353216;
    *(_QWORD *)(v13 + 40) = 0x7FF8000000000000;
    v14 = (id)RBDrawingStateGetDisplayList();
    v35 = v10;
    v36 = v9;
    type metadata accessor for GraphicsContext.Storage.Shared();
    swift_allocObject();
    swift_retain();
    swift_retain();
    *(_QWORD *)(v13 + 16) = GraphicsContext.Storage.Shared.init(list:environment:)(v14, &v35);
    *(_QWORD *)(v13 + 24) = v12;
    *(_BYTE *)(v13 + 48) = 0;
    v15 = v34;
    if (v34 == 1.0)
    {
      v16 = 0;
    }
    else
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        v19 = RBDrawingStateInit();
        swift_allocObject();
        v20 = swift_retain();
        v21 = GraphicsContext.Storage.init(_:state:ownsState:resetBlending:)(v20, v19, 1, 0);
        swift_release();
        v13 = v21;
      }
      *(float *)(v13 + 32) = v15;
      v16 = *(_DWORD *)(v13 + 36);
    }
    v22 = v33;
    if (v16 != v33)
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        v23 = RBDrawingStateInit();
        swift_allocObject();
        v24 = swift_retain();
        v25 = GraphicsContext.Storage.init(_:state:ownsState:resetBlending:)(v24, v23, 1, 0);
        swift_release();
        v13 = v25;
      }
      *(_DWORD *)(v13 + 36) = v22;
    }
    objc_msgSend(a5, sel_bounds);
    GraphicsContext.renderMissingPlatformView(size:)((CGSize)__PAIR128__(v27, v26));
    swift_release();
  }
  else
  {
    v17 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BE7EEF8]), sel_init);
    objc_msgSend(v17, sel_setProfile_, 1);
    objc_msgSend(v17, sel_setDefaultColorSpace_, 1);
    ClipBoundingBox = CGContextGetClipBoundingBox(a1);
    objc_msgSend(v17, sel_setContentRect_, ClipBoundingBox.origin.x, ClipBoundingBox.origin.y, ClipBoundingBox.size.width, ClipBoundingBox.size.height);
    if ((a4 & 1) != 0)
    {
      if (v9)
      {
        swift_retain_n();
        swift_retain_n();
        v18 = specialized PropertyList.Tracker.value<A>(_:for:)(v10);
        swift_release_n();
      }
      else
      {
        v28 = swift_retain_n();
        v18 = specialized closure #1 in PropertyList.subscript.getter(v28);
      }
      swift_release_n();
    }
    else
    {
      v18 = *(double *)&a3;
    }
    objc_msgSend(v17, sel_setDeviceScale_, v18);
    type metadata accessor for GraphicsContext.Storage();
    v29 = swift_allocObject();
    *(_QWORD *)(v29 + 32) = 1065353216;
    *(_QWORD *)(v29 + 40) = 0x7FF8000000000000;
    v35 = v10;
    v36 = v9;
    type metadata accessor for GraphicsContext.Storage.Shared();
    swift_allocObject();
    swift_retain();
    v30 = v17;
    swift_retain();
    *(_QWORD *)(v29 + 16) = GraphicsContext.Storage.Shared.init(list:environment:)(v30, &v35);
    *(_QWORD *)(v29 + 24) = RBDisplayListGetState();
    *(_BYTE *)(v29 + 48) = 0;
    objc_msgSend(a5, sel_bounds);
    GraphicsContext.renderMissingPlatformView(size:)((CGSize)__PAIR128__(v32, v31));
    objc_msgSend(v30, sel_renderInContext_options_, a1, 0);
    swift_release();

  }
}

uint64_t specialized static GraphicsContext.renderingTo(cgContext:environment:deviceScale:content:)(CGContext *a1, CGFloat *a2, uint64_t a3, char a4, CGFloat *a5, double a6, double a7)
{
  CGFloat v12;
  CGFloat v13;
  CGFloat v14;
  CGFloat v15;
  CGFloat v16;
  CGFloat v17;
  CGFloat v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  float v23;
  int v24;
  id v25;
  double v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  id v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  CGFloat v44;
  uint64_t v45;
  int v46;
  float v47;
  CGAffineTransform v48;
  uint64_t v49;
  CGRect ClipBoundingBox;

  v49 = *MEMORY[0x24BDAC8D0];
  v12 = *a5;
  v13 = a5[1];
  v15 = a5[2];
  v14 = a5[3];
  v16 = a5[5];
  v44 = a5[4];
  v18 = *a2;
  v17 = a2[1];
  v46 = 0;
  v47 = 1.0;
  v19 = MEMORY[0x23B7C8EA8](a1, &v47, &v46);
  if (v19)
  {
    v20 = v19;
    type metadata accessor for GraphicsContext.Storage();
    v21 = swift_allocObject();
    *(_QWORD *)(v21 + 32) = 1065353216;
    *(_QWORD *)(v21 + 40) = 0x7FF8000000000000;
    v22 = (id)RBDrawingStateGetDisplayList();
    v48.a = v18;
    v48.b = v17;
    type metadata accessor for GraphicsContext.Storage.Shared();
    swift_allocObject();
    swift_retain();
    swift_retain();
    *(_QWORD *)(v21 + 16) = GraphicsContext.Storage.Shared.init(list:environment:)(v22, (uint64_t *)&v48);
    *(_QWORD *)(v21 + 24) = v20;
    *(_BYTE *)(v21 + 48) = 0;
    v45 = v21;
    v23 = v47;
    if (v47 == 1.0)
    {
      v24 = 0;
    }
    else
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        v27 = RBDrawingStateInit();
        swift_allocObject();
        v28 = swift_retain();
        v45 = GraphicsContext.Storage.init(_:state:ownsState:resetBlending:)(v28, v27, 1, 0);
        swift_release();
        v21 = v45;
      }
      *(float *)(v21 + 32) = v23;
      v24 = *(_DWORD *)(v21 + 36);
    }
    v29 = v46;
    if (v24 != v46)
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        v30 = RBDrawingStateInit();
        swift_allocObject();
        v31 = swift_retain();
        v45 = GraphicsContext.Storage.init(_:state:ownsState:resetBlending:)(v31, v30, 1, 0);
        swift_release();
      }
      *(_DWORD *)(v45 + 36) = v29;
    }
    if (a6 != 0.0 || a7 != 0.0)
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        v32 = RBDrawingStateInit();
        swift_allocObject();
        v33 = swift_retain();
        v45 = GraphicsContext.Storage.init(_:state:ownsState:resetBlending:)(v33, v32, 1, 0);
        swift_release();
      }
      RBDrawingStateTranslateCTM();
    }
    v48.a = v12;
    v48.b = v13;
    v48.c = v15;
    v48.d = v14;
    v48.tx = v44;
    v48.ty = v16;
    if (!CGAffineTransformIsIdentity(&v48))
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        v34 = RBDrawingStateInit();
        swift_allocObject();
        v35 = swift_retain();
        v45 = GraphicsContext.Storage.init(_:state:ownsState:resetBlending:)(v35, v34, 1, 0);
        swift_release();
      }
      v48.a = v12;
      v48.b = v13;
      v48.c = v15;
      v48.d = v14;
      v48.tx = v44;
      v48.ty = v16;
      RBDrawingStateConcatCTM();
    }
    TextEffectsRenderer.drawStatic(in:)((uint64_t)&v45);
  }
  else
  {
    v25 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BE7EEF8]), sel_init);
    objc_msgSend(v25, sel_setProfile_, 1);
    objc_msgSend(v25, sel_setDefaultColorSpace_, 1);
    ClipBoundingBox = CGContextGetClipBoundingBox(a1);
    objc_msgSend(v25, sel_setContentRect_, ClipBoundingBox.origin.x, ClipBoundingBox.origin.y, ClipBoundingBox.size.width, ClipBoundingBox.size.height);
    if ((a4 & 1) != 0)
    {
      if (v17 == 0.0)
      {
        v36 = swift_retain_n();
        v26 = specialized closure #1 in PropertyList.subscript.getter(v36);
      }
      else
      {
        swift_retain_n();
        swift_retain_n();
        v26 = specialized PropertyList.Tracker.value<A>(_:for:)(*(uint64_t *)&v18);
        swift_release_n();
      }
      swift_release_n();
    }
    else
    {
      v26 = *(double *)&a3;
    }
    objc_msgSend(v25, sel_setDeviceScale_, v26);
    type metadata accessor for GraphicsContext.Storage();
    v37 = swift_allocObject();
    *(_QWORD *)(v37 + 32) = 1065353216;
    *(_QWORD *)(v37 + 40) = 0x7FF8000000000000;
    v48.a = v18;
    v48.b = v17;
    type metadata accessor for GraphicsContext.Storage.Shared();
    swift_allocObject();
    swift_retain();
    v38 = v25;
    swift_retain();
    *(_QWORD *)(v37 + 16) = GraphicsContext.Storage.Shared.init(list:environment:)(v38, (uint64_t *)&v48);
    *(_QWORD *)(v37 + 24) = RBDisplayListGetState();
    *(_BYTE *)(v37 + 48) = 0;
    v45 = v37;
    if (a6 != 0.0 || a7 != 0.0)
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        v39 = RBDrawingStateInit();
        swift_allocObject();
        v40 = swift_retain();
        v45 = GraphicsContext.Storage.init(_:state:ownsState:resetBlending:)(v40, v39, 1, 0);
        swift_release();
      }
      RBDrawingStateTranslateCTM();
    }
    v48.a = v12;
    v48.b = v13;
    v48.c = v15;
    v48.d = v14;
    v48.tx = v44;
    v48.ty = v16;
    if (!CGAffineTransformIsIdentity(&v48))
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        v41 = RBDrawingStateInit();
        swift_allocObject();
        v42 = swift_retain();
        v45 = GraphicsContext.Storage.init(_:state:ownsState:resetBlending:)(v42, v41, 1, 0);
        swift_release();
      }
      v48.a = v12;
      v48.b = v13;
      v48.c = v15;
      v48.d = v14;
      v48.tx = v44;
      v48.ty = v16;
      RBDrawingStateConcatCTM();
    }
    TextEffectsRenderer.drawStatic(in:)((uint64_t)&v45);
    objc_msgSend(v38, sel_renderInContext_options_, a1, 0);

  }
  return swift_release();
}

uint64_t specialized static GraphicsContext.renderingTo(cgContext:environment:deviceScale:content:)(CGContext *a1, uint64_t *a2, uint64_t a3, char a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  float v15;
  int v16;
  id v17;
  double v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  int v29;
  float v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  CGRect ClipBoundingBox;

  v33 = *MEMORY[0x24BDAC8D0];
  v10 = *a2;
  v9 = a2[1];
  v29 = 0;
  v30 = 1.0;
  v11 = MEMORY[0x23B7C8EA8](a1, &v30, &v29);
  if (v11)
  {
    v12 = v11;
    type metadata accessor for GraphicsContext.Storage();
    v13 = swift_allocObject();
    *(_QWORD *)(v13 + 32) = 1065353216;
    *(_QWORD *)(v13 + 40) = 0x7FF8000000000000;
    v14 = (id)RBDrawingStateGetDisplayList();
    v31 = v10;
    v32 = v9;
    type metadata accessor for GraphicsContext.Storage.Shared();
    swift_allocObject();
    swift_retain();
    swift_retain();
    *(_QWORD *)(v13 + 16) = GraphicsContext.Storage.Shared.init(list:environment:)(v14, &v31);
    *(_QWORD *)(v13 + 24) = v12;
    *(_BYTE *)(v13 + 48) = 0;
    v31 = v13;
    v15 = v30;
    if (v30 == 1.0)
    {
      v16 = 0;
    }
    else
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        v19 = RBDrawingStateInit();
        swift_allocObject();
        v20 = swift_retain();
        v21 = GraphicsContext.Storage.init(_:state:ownsState:resetBlending:)(v20, v19, 1, 0);
        v31 = v21;
        swift_release();
        v13 = v21;
      }
      *(float *)(v13 + 32) = v15;
      v16 = *(_DWORD *)(v13 + 36);
    }
    v22 = v29;
    if (v16 != v29)
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        v23 = RBDrawingStateInit();
        swift_allocObject();
        v24 = swift_retain();
        v31 = GraphicsContext.Storage.init(_:state:ownsState:resetBlending:)(v24, v23, 1, 0);
        swift_release();
      }
      *(_DWORD *)(v31 + 36) = v22;
    }
    closure #1 in PaintShapeLayer.draw(in:)(&v31, a5);
  }
  else
  {
    v17 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BE7EEF8]), sel_init);
    objc_msgSend(v17, sel_setProfile_, 1);
    objc_msgSend(v17, sel_setDefaultColorSpace_, 1);
    ClipBoundingBox = CGContextGetClipBoundingBox(a1);
    objc_msgSend(v17, sel_setContentRect_, ClipBoundingBox.origin.x, ClipBoundingBox.origin.y, ClipBoundingBox.size.width, ClipBoundingBox.size.height);
    if ((a4 & 1) != 0)
    {
      if (v9)
      {
        swift_retain_n();
        swift_retain_n();
        v18 = specialized PropertyList.Tracker.value<A>(_:for:)(v10);
        swift_release_n();
      }
      else
      {
        v25 = swift_retain_n();
        v18 = specialized closure #1 in PropertyList.subscript.getter(v25);
      }
      swift_release_n();
    }
    else
    {
      v18 = *(double *)&a3;
    }
    objc_msgSend(v17, sel_setDeviceScale_, v18);
    type metadata accessor for GraphicsContext.Storage();
    v26 = swift_allocObject();
    *(_QWORD *)(v26 + 32) = 1065353216;
    *(_QWORD *)(v26 + 40) = 0x7FF8000000000000;
    v31 = v10;
    v32 = v9;
    type metadata accessor for GraphicsContext.Storage.Shared();
    swift_allocObject();
    swift_retain();
    v27 = v17;
    swift_retain();
    *(_QWORD *)(v26 + 16) = GraphicsContext.Storage.Shared.init(list:environment:)(v27, &v31);
    *(_QWORD *)(v26 + 24) = RBDisplayListGetState();
    *(_BYTE *)(v26 + 48) = 0;
    v31 = v26;
    closure #1 in PaintShapeLayer.draw(in:)(&v31, a5);
    objc_msgSend(v27, sel_renderInContext_options_, a1, 0);

  }
  return swift_release();
}

void specialized GraphicsContext.withPlatformContext(content:)(uint64_t a1, _QWORD *a2, double a3, double a4, double a5, double a6)
{
  CGContext *v12;
  CGContext *v13;
  CGBlendMode v14;
  uint64_t v15;
  _BOOL4 v16;
  id v17;
  uint64_t v18;
  BOOL v19;

  v12 = (CGContext *)(id)RBDrawingStateBeginCGContext();
  v13 = v12;
  v14 = *(_DWORD *)(a1 + 36);
  if (v14)
    CGContextSetBlendMode(v12, v14);
  v15 = *(_QWORD *)(a1 + 40);
  v16 = (v15 & 0xFFFFFFFFFFFFFLL) == 0 || (~v15 & 0x7FF0000000000000) != 0;
  if (v16)
    _CGContextSetShapeDistance(*(double *)(a1 + 40));
  v17 = objc_msgSend(objc_allocWithZone((Class)CoreGraphicsContext), sel_initWithCGContext_, v13);
  objc_msgSend(v17, sel_push);
  if (one-time initialization token for _textDrawingContext != -1)
    swift_once();
  v18 = static GraphicsContext.Storage.Shared._textDrawingContext;
  if (a2[24])
  {
    swift_retain();
    v19 = NSAttributedString.isDynamic.getter();
  }
  else
  {
    swift_retain();
    v19 = 0;
  }
  (*(void (**)(_QWORD, BOOL, uint64_t, _QWORD, double, double, double, double, double, double))(*a2 + 288))(0, v19, v18, 0, a3, a4, a5, a6, a5, a6);
  swift_release();
  objc_msgSend(v17, "pop");

  if (v16)
    _CGContextSetShapeDistance(NAN);
  RBDrawingStateEndCGContext();

}

_QWORD *outlined retain of GraphicsContext.ResolvedShading(_QWORD *a1, void (*a2)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  a2(*a1, a1[1], a1[2], a1[3], a1[4], a1[5], a1[6], a1[7], a1[8], a1[9], a1[10], a1[11], a1[12], a1[13], a1[14], a1[15], a1[16], a1[17], a1[18],
    a1[19]);
  return a1;
}

void outlined consume of GraphicsContext.ResolvedShading?(void *a1, uint64_t a2, unint64_t a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, unint64_t a13)
{
  if ((a13 & 0xFFFFFFFF00FCFE00) != 0x7FFFF00FCFE00)
    outlined consume of GraphicsContext.ResolvedShading(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13);
}

uint64_t _s7SwiftUI15GraphicsContextV15ResolvedShadingOWOj0_(uint64_t result)
{
  *(_QWORD *)(result + 96) &= 0xFFFFFFFFFFFFFFFuLL;
  return result;
}

unint64_t lazy protocol witness table accessor for type GraphicsContext._ShapeRenderingMode and conformance GraphicsContext._ShapeRenderingMode()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type GraphicsContext._ShapeRenderingMode and conformance GraphicsContext._ShapeRenderingMode;
  if (!lazy protocol witness table cache variable for type GraphicsContext._ShapeRenderingMode and conformance GraphicsContext._ShapeRenderingMode)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for GraphicsContext._ShapeRenderingMode, &type metadata for GraphicsContext._ShapeRenderingMode);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GraphicsContext._ShapeRenderingMode and conformance GraphicsContext._ShapeRenderingMode);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type GraphicsContext.ClipOptions and conformance GraphicsContext.ClipOptions()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type GraphicsContext.ClipOptions and conformance GraphicsContext.ClipOptions;
  if (!lazy protocol witness table cache variable for type GraphicsContext.ClipOptions and conformance GraphicsContext.ClipOptions)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for GraphicsContext.ClipOptions, &type metadata for GraphicsContext.ClipOptions);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GraphicsContext.ClipOptions and conformance GraphicsContext.ClipOptions);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type GraphicsContext.ClipOptions and conformance GraphicsContext.ClipOptions;
  if (!lazy protocol witness table cache variable for type GraphicsContext.ClipOptions and conformance GraphicsContext.ClipOptions)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for GraphicsContext.ClipOptions, &type metadata for GraphicsContext.ClipOptions);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GraphicsContext.ClipOptions and conformance GraphicsContext.ClipOptions);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type GraphicsContext.ClipOptions and conformance GraphicsContext.ClipOptions;
  if (!lazy protocol witness table cache variable for type GraphicsContext.ClipOptions and conformance GraphicsContext.ClipOptions)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for GraphicsContext.ClipOptions, &type metadata for GraphicsContext.ClipOptions);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GraphicsContext.ClipOptions and conformance GraphicsContext.ClipOptions);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type GraphicsContext.ClipOptions and conformance GraphicsContext.ClipOptions;
  if (!lazy protocol witness table cache variable for type GraphicsContext.ClipOptions and conformance GraphicsContext.ClipOptions)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for GraphicsContext.ClipOptions, &type metadata for GraphicsContext.ClipOptions);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GraphicsContext.ClipOptions and conformance GraphicsContext.ClipOptions);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type GraphicsContext.ShadowOptions and conformance GraphicsContext.ShadowOptions()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type GraphicsContext.ShadowOptions and conformance GraphicsContext.ShadowOptions;
  if (!lazy protocol witness table cache variable for type GraphicsContext.ShadowOptions and conformance GraphicsContext.ShadowOptions)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for GraphicsContext.ShadowOptions, &type metadata for GraphicsContext.ShadowOptions);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GraphicsContext.ShadowOptions and conformance GraphicsContext.ShadowOptions);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type GraphicsContext.ShadowOptions and conformance GraphicsContext.ShadowOptions;
  if (!lazy protocol witness table cache variable for type GraphicsContext.ShadowOptions and conformance GraphicsContext.ShadowOptions)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for GraphicsContext.ShadowOptions, &type metadata for GraphicsContext.ShadowOptions);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GraphicsContext.ShadowOptions and conformance GraphicsContext.ShadowOptions);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type GraphicsContext.ShadowOptions and conformance GraphicsContext.ShadowOptions;
  if (!lazy protocol witness table cache variable for type GraphicsContext.ShadowOptions and conformance GraphicsContext.ShadowOptions)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for GraphicsContext.ShadowOptions, &type metadata for GraphicsContext.ShadowOptions);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GraphicsContext.ShadowOptions and conformance GraphicsContext.ShadowOptions);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type GraphicsContext.ShadowOptions and conformance GraphicsContext.ShadowOptions;
  if (!lazy protocol witness table cache variable for type GraphicsContext.ShadowOptions and conformance GraphicsContext.ShadowOptions)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for GraphicsContext.ShadowOptions, &type metadata for GraphicsContext.ShadowOptions);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GraphicsContext.ShadowOptions and conformance GraphicsContext.ShadowOptions);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type GraphicsContext.BlurOptions and conformance GraphicsContext.BlurOptions()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type GraphicsContext.BlurOptions and conformance GraphicsContext.BlurOptions;
  if (!lazy protocol witness table cache variable for type GraphicsContext.BlurOptions and conformance GraphicsContext.BlurOptions)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for GraphicsContext.BlurOptions, &type metadata for GraphicsContext.BlurOptions);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GraphicsContext.BlurOptions and conformance GraphicsContext.BlurOptions);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type GraphicsContext.BlurOptions and conformance GraphicsContext.BlurOptions;
  if (!lazy protocol witness table cache variable for type GraphicsContext.BlurOptions and conformance GraphicsContext.BlurOptions)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for GraphicsContext.BlurOptions, &type metadata for GraphicsContext.BlurOptions);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GraphicsContext.BlurOptions and conformance GraphicsContext.BlurOptions);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type GraphicsContext.BlurOptions and conformance GraphicsContext.BlurOptions;
  if (!lazy protocol witness table cache variable for type GraphicsContext.BlurOptions and conformance GraphicsContext.BlurOptions)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for GraphicsContext.BlurOptions, &type metadata for GraphicsContext.BlurOptions);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GraphicsContext.BlurOptions and conformance GraphicsContext.BlurOptions);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type GraphicsContext.BlurOptions and conformance GraphicsContext.BlurOptions;
  if (!lazy protocol witness table cache variable for type GraphicsContext.BlurOptions and conformance GraphicsContext.BlurOptions)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for GraphicsContext.BlurOptions, &type metadata for GraphicsContext.BlurOptions);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GraphicsContext.BlurOptions and conformance GraphicsContext.BlurOptions);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type GraphicsContext.FilterOptions and conformance GraphicsContext.FilterOptions()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type GraphicsContext.FilterOptions and conformance GraphicsContext.FilterOptions;
  if (!lazy protocol witness table cache variable for type GraphicsContext.FilterOptions and conformance GraphicsContext.FilterOptions)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for GraphicsContext.FilterOptions, &type metadata for GraphicsContext.FilterOptions);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GraphicsContext.FilterOptions and conformance GraphicsContext.FilterOptions);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type GraphicsContext.FilterOptions and conformance GraphicsContext.FilterOptions;
  if (!lazy protocol witness table cache variable for type GraphicsContext.FilterOptions and conformance GraphicsContext.FilterOptions)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for GraphicsContext.FilterOptions, &type metadata for GraphicsContext.FilterOptions);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GraphicsContext.FilterOptions and conformance GraphicsContext.FilterOptions);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type GraphicsContext.FilterOptions and conformance GraphicsContext.FilterOptions;
  if (!lazy protocol witness table cache variable for type GraphicsContext.FilterOptions and conformance GraphicsContext.FilterOptions)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for GraphicsContext.FilterOptions, &type metadata for GraphicsContext.FilterOptions);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GraphicsContext.FilterOptions and conformance GraphicsContext.FilterOptions);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type GraphicsContext.FilterOptions and conformance GraphicsContext.FilterOptions;
  if (!lazy protocol witness table cache variable for type GraphicsContext.FilterOptions and conformance GraphicsContext.FilterOptions)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for GraphicsContext.FilterOptions, &type metadata for GraphicsContext.FilterOptions);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GraphicsContext.FilterOptions and conformance GraphicsContext.FilterOptions);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type GraphicsContext.GradientOptions and conformance GraphicsContext.GradientOptions()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type GraphicsContext.GradientOptions and conformance GraphicsContext.GradientOptions;
  if (!lazy protocol witness table cache variable for type GraphicsContext.GradientOptions and conformance GraphicsContext.GradientOptions)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for GraphicsContext.GradientOptions, &type metadata for GraphicsContext.GradientOptions);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GraphicsContext.GradientOptions and conformance GraphicsContext.GradientOptions);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type GraphicsContext.GradientOptions and conformance GraphicsContext.GradientOptions;
  if (!lazy protocol witness table cache variable for type GraphicsContext.GradientOptions and conformance GraphicsContext.GradientOptions)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for GraphicsContext.GradientOptions, &type metadata for GraphicsContext.GradientOptions);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GraphicsContext.GradientOptions and conformance GraphicsContext.GradientOptions);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type GraphicsContext.GradientOptions and conformance GraphicsContext.GradientOptions;
  if (!lazy protocol witness table cache variable for type GraphicsContext.GradientOptions and conformance GraphicsContext.GradientOptions)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for GraphicsContext.GradientOptions, &type metadata for GraphicsContext.GradientOptions);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GraphicsContext.GradientOptions and conformance GraphicsContext.GradientOptions);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type GraphicsContext.GradientOptions and conformance GraphicsContext.GradientOptions;
  if (!lazy protocol witness table cache variable for type GraphicsContext.GradientOptions and conformance GraphicsContext.GradientOptions)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for GraphicsContext.GradientOptions, &type metadata for GraphicsContext.GradientOptions);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GraphicsContext.GradientOptions and conformance GraphicsContext.GradientOptions);
  }
  return result;
}

double sub_234DDF584@<D0>(uint64_t a1@<X0>, double *a2@<X8>)
{
  double result;

  result = *(float *)(*(_QWORD *)a1 + 32);
  *a2 = result;
  return result;
}

uint64_t sub_234DDF598(double *a1)
{
  return GraphicsContext.opacity.setter(*a1);
}

uint64_t sub_234DDF5BC@<X0>(uint64_t result@<X0>, _DWORD *a2@<X8>)
{
  *a2 = *(_DWORD *)(*(_QWORD *)result + 36);
  return result;
}

uint64_t sub_234DDF5CC(int *a1)
{
  return GraphicsContext.blendMode.setter(*a1);
}

double sub_234DDF5F0@<D0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  double result;
  int v4;
  double v5;

  GraphicsContext._shapeRenderingMode.getter(*a1, (uint64_t)&v4);
  result = v5;
  *(_DWORD *)a2 = v4;
  *(double *)(a2 + 8) = result;
  return result;
}

uint64_t sub_234DDF630(int *a1)
{
  uint64_t v1;
  int v3;
  uint64_t v4;

  v1 = *((_QWORD *)a1 + 1);
  v3 = *a1;
  v4 = v1;
  return GraphicsContext._shapeRenderingMode.setter((uint64_t)&v3);
}

uint64_t sub_234DDF66C@<X0>(_DWORD *a1@<X8>)
{
  uint64_t result;

  result = RBDrawingStateGetIdentifier();
  *a1 = result;
  return result;
}

uint64_t sub_234DDF698()
{
  return GraphicsContext.identifier.setter();
}

double sub_234DDF6BC@<D0>(_OWORD *a1@<X8>)
{
  double result;
  __int128 v3;
  __int128 v4;
  __int128 v5;

  RBDrawingStateGetCTM();
  result = *(double *)&v3;
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v5;
  return result;
}

uint64_t sub_234DDF700()
{
  return GraphicsContext.transform.setter();
}

uint64_t destroy for PathDrawingStyle(uint64_t a1)
{
  return outlined consume of PathDrawingStyle(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_BYTE *)(a1 + 40));
}

uint64_t initializeWithCopy for PathDrawingStyle(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a2 + 32);
  v8 = *(_BYTE *)(a2 + 40);
  outlined copy of PathDrawingStyle(*(_QWORD *)a2, v4, v5, v6, v7, v8);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_QWORD *)(a1 + 32) = v7;
  *(_BYTE *)(a1 + 40) = v8;
  return a1;
}

uint64_t assignWithCopy for PathDrawingStyle(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a2 + 32);
  v8 = *(_BYTE *)(a2 + 40);
  outlined copy of PathDrawingStyle(*(_QWORD *)a2, v4, v5, v6, v7, v8);
  v9 = *(_QWORD *)a1;
  v10 = *(_QWORD *)(a1 + 8);
  v11 = *(_QWORD *)(a1 + 16);
  v12 = *(_QWORD *)(a1 + 24);
  v13 = *(_QWORD *)(a1 + 32);
  v14 = *(_BYTE *)(a1 + 40);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_QWORD *)(a1 + 32) = v7;
  *(_BYTE *)(a1 + 40) = v8;
  outlined consume of PathDrawingStyle(v9, v10, v11, v12, v13, v14);
  return a1;
}

uint64_t assignWithTake for PathDrawingStyle(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  __int128 v11;

  v3 = *(_QWORD *)(a2 + 32);
  v4 = *(_BYTE *)(a2 + 40);
  v5 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  v6 = *(_QWORD *)(a1 + 16);
  v8 = *(_QWORD *)(a1 + 24);
  v9 = *(_QWORD *)(a1 + 32);
  v10 = *(_BYTE *)(a1 + 40);
  v11 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v11;
  *(_QWORD *)(a1 + 32) = v3;
  *(_BYTE *)(a1 + 40) = v4;
  outlined consume of PathDrawingStyle(v5, v7, v6, v8, v9, v10);
  return a1;
}

uint64_t getEnumTagSinglePayload for PathDrawingStyle(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 41))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 40);
  if (v3 <= 1)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for PathDrawingStyle(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 40) = 0;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 41) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 41) = 0;
    if (a2)
      *(_BYTE *)(result + 40) = -(char)a2;
  }
  return result;
}

uint64_t getEnumTag for PathDrawingStyle(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 40);
}

uint64_t destructiveInjectEnumTag for PathDrawingStyle(uint64_t result, char a2)
{
  *(_BYTE *)(result + 40) = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for PathDrawingStyle()
{
  return &type metadata for PathDrawingStyle;
}

ValueMetadata *type metadata accessor for GraphicsContext()
{
  return &type metadata for GraphicsContext;
}

uint64_t method lookup function for GraphicsContext.Storage()
{
  return swift_lookUpClassMethod();
}

ValueMetadata *type metadata accessor for GraphicsContext.BlendMode()
{
  return &type metadata for GraphicsContext.BlendMode;
}

ValueMetadata *type metadata accessor for GraphicsContext._ShapeRenderingMode()
{
  return &type metadata for GraphicsContext._ShapeRenderingMode;
}

ValueMetadata *type metadata accessor for GraphicsContext.ClipOptions()
{
  return &type metadata for GraphicsContext.ClipOptions;
}

ValueMetadata *type metadata accessor for GraphicsContext.Filter()
{
  return &type metadata for GraphicsContext.Filter;
}

ValueMetadata *type metadata accessor for GraphicsContext.ShadowOptions()
{
  return &type metadata for GraphicsContext.ShadowOptions;
}

ValueMetadata *type metadata accessor for GraphicsContext.BlurOptions()
{
  return &type metadata for GraphicsContext.BlurOptions;
}

ValueMetadata *type metadata accessor for GraphicsContext.FilterOptions()
{
  return &type metadata for GraphicsContext.FilterOptions;
}

ValueMetadata *type metadata accessor for GraphicsContext.Shading()
{
  return &type metadata for GraphicsContext.Shading;
}

void *destroy for GraphicsContext.Shading(uint64_t a1)
{
  return outlined consume of GraphicsContext.Shading.Storage(*(void **)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_BYTE *)(a1 + 72));
}

uint64_t initializeWithCopy for GraphicsContext.Shading(uint64_t a1, uint64_t a2)
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v13;

  v3 = *(void **)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v9 = *(_QWORD *)(a2 + 48);
  v10 = *(_QWORD *)(a2 + 56);
  v11 = *(_QWORD *)(a2 + 64);
  outlined copy of GraphicsContext.Shading.Storage(*(void **)a2, v4, v5, v6, v7, v8, v9, v10, v11, *(_BYTE *)(a2 + 72));
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_QWORD *)(a1 + 32) = v7;
  *(_QWORD *)(a1 + 40) = v8;
  *(_QWORD *)(a1 + 48) = v9;
  *(_QWORD *)(a1 + 56) = v10;
  *(_QWORD *)(a1 + 64) = v11;
  *(_BYTE *)(a1 + 72) = v13;
  return a1;
}

uint64_t assignWithCopy for GraphicsContext.Shading(uint64_t a1, uint64_t a2)
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  char v23;

  v3 = *(void **)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v9 = *(_QWORD *)(a2 + 48);
  v10 = *(_QWORD *)(a2 + 56);
  v11 = *(_QWORD *)(a2 + 64);
  outlined copy of GraphicsContext.Shading.Storage(*(void **)a2, v4, v5, v6, v7, v8, v9, v10, v11, *(_BYTE *)(a2 + 72));
  v12 = *(void **)a1;
  v13 = *(_QWORD *)(a1 + 8);
  v14 = *(_QWORD *)(a1 + 16);
  v15 = *(_QWORD *)(a1 + 24);
  v16 = *(_QWORD *)(a1 + 32);
  v17 = *(_QWORD *)(a1 + 40);
  v18 = *(_QWORD *)(a1 + 48);
  v19 = *(_QWORD *)(a1 + 56);
  v20 = *(_QWORD *)(a1 + 64);
  v21 = *(_BYTE *)(a1 + 72);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_QWORD *)(a1 + 32) = v7;
  *(_QWORD *)(a1 + 40) = v8;
  *(_QWORD *)(a1 + 48) = v9;
  *(_QWORD *)(a1 + 56) = v10;
  *(_QWORD *)(a1 + 64) = v11;
  *(_BYTE *)(a1 + 72) = v23;
  outlined consume of GraphicsContext.Shading.Storage(v12, v13, v14, v15, v16, v17, v18, v19, v20, v21);
  return a1;
}

uint64_t assignWithTake for GraphicsContext.Shading(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  char v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  __int128 v15;
  __int128 v16;

  v3 = *(_QWORD *)(a2 + 64);
  v4 = *(_BYTE *)(a2 + 72);
  v5 = *(void **)a1;
  v7 = *(_QWORD *)(a1 + 8);
  v6 = *(_QWORD *)(a1 + 16);
  v8 = *(_QWORD *)(a1 + 24);
  v9 = *(_QWORD *)(a1 + 32);
  v10 = *(_QWORD *)(a1 + 40);
  v11 = *(_QWORD *)(a1 + 48);
  v12 = *(_QWORD *)(a1 + 56);
  v13 = *(_QWORD *)(a1 + 64);
  v14 = *(_BYTE *)(a1 + 72);
  v15 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v15;
  v16 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v16;
  *(_QWORD *)(a1 + 64) = v3;
  *(_BYTE *)(a1 + 72) = v4;
  outlined consume of GraphicsContext.Shading.Storage(v5, v7, v6, v8, v9, v10, v11, v12, v13, v14);
  return a1;
}

uint64_t getEnumTagSinglePayload for GraphicsContext.Shading(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xF6 && *(_BYTE *)(a1 + 73))
    return (*(_DWORD *)a1 + 246);
  v3 = *(unsigned __int8 *)(a1 + 72);
  if (v3 <= 0xA)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for GraphicsContext.Shading(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xF5)
  {
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 72) = 0;
    *(_QWORD *)result = a2 - 246;
    if (a3 >= 0xF6)
      *(_BYTE *)(result + 73) = 1;
  }
  else
  {
    if (a3 >= 0xF6)
      *(_BYTE *)(result + 73) = 0;
    if (a2)
      *(_BYTE *)(result + 72) = -(char)a2;
  }
  return result;
}

uint64_t getEnumTag for GraphicsContext.Shading.Storage(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 72) <= 9u)
    return *(unsigned __int8 *)(a1 + 72);
  else
    return (*(_DWORD *)a1 + 10);
}

uint64_t destructiveInjectEnumTag for GraphicsContext.Shading.Storage(uint64_t result, unsigned int a2)
{
  if (a2 >= 0xA)
  {
    *(_QWORD *)result = a2 - 10;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    LOBYTE(a2) = 10;
  }
  *(_BYTE *)(result + 72) = a2;
  return result;
}

ValueMetadata *type metadata accessor for GraphicsContext.Shading.Storage()
{
  return &type metadata for GraphicsContext.Shading.Storage;
}

uint64_t getEnumTagSinglePayload for GraphicsContext.GradientGeometry(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFC && *(_BYTE *)(a1 + 49))
    return (*(_DWORD *)a1 + 252);
  v3 = *(unsigned __int8 *)(a1 + 48);
  if (v3 <= 4)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for GraphicsContext.GradientGeometry(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFB)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 48) = 0;
    *(_QWORD *)result = a2 - 252;
    if (a3 >= 0xFC)
      *(_BYTE *)(result + 49) = 1;
  }
  else
  {
    if (a3 >= 0xFC)
      *(_BYTE *)(result + 49) = 0;
    if (a2)
      *(_BYTE *)(result + 48) = -(char)a2;
  }
  return result;
}

uint64_t getEnumTag for GraphicsContext.GradientGeometry(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 48);
}

uint64_t destructiveInjectEnumTag for GraphicsContext.GradientGeometry(uint64_t result, char a2)
{
  *(_BYTE *)(result + 48) = a2;
  return result;
}

ValueMetadata *type metadata accessor for GraphicsContext.GradientGeometry()
{
  return &type metadata for GraphicsContext.GradientGeometry;
}

void destroy for GraphicsContext.ResolvedShading(uint64_t a1)
{
  outlined consume of GraphicsContext.ResolvedShading(*(void **)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(void **)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_OWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96));
}

_QWORD *initializeWithCopy for GraphicsContext.ResolvedShading(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v3 = *(_QWORD *)(a2 + 8);
  v4 = *(void **)(a2 + 16);
  v5 = *(void **)(a2 + 24);
  v6 = *(_QWORD *)(a2 + 32);
  v7 = *(_QWORD *)(a2 + 40);
  v8 = *(_QWORD *)(a2 + 48);
  v9 = *(_QWORD *)(a2 + 56);
  v13 = *(_QWORD *)(a2 + 72);
  v14 = *(_QWORD *)(a2 + 80);
  v15 = *(_QWORD *)(a2 + 88);
  v16 = *(_QWORD *)(a2 + 96);
  v17 = *(_QWORD *)(a2 + 104);
  v18 = *(_QWORD *)(a2 + 112);
  v19 = *(_QWORD *)(a2 + 120);
  v20 = *(_QWORD *)(a2 + 128);
  v21 = *(_QWORD *)(a2 + 136);
  v22 = *(_QWORD *)(a2 + 144);
  v23 = *(_QWORD *)(a2 + 152);
  v10 = *(_QWORD *)(a2 + 64);
  v11 = *(id *)a2;
  outlined copy of GraphicsContext.ResolvedShading(*(id *)a2, v3, v4, v5, v6, v7, v8, v9, v10, v13, v14, v15, v16);
  *a1 = v11;
  a1[1] = v3;
  a1[2] = v4;
  a1[3] = v5;
  a1[4] = v6;
  a1[5] = v7;
  a1[6] = v8;
  a1[7] = v9;
  a1[8] = v10;
  a1[9] = v13;
  a1[10] = v14;
  a1[11] = v15;
  a1[12] = v16;
  a1[13] = v17;
  a1[14] = v18;
  a1[15] = v19;
  a1[16] = v20;
  a1[17] = v21;
  a1[18] = v22;
  a1[19] = v23;
  return a1;
}

uint64_t assignWithCopy for GraphicsContext.ResolvedShading(uint64_t a1, uint64_t a2)
{
  id v3;
  uint64_t v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v3 = *(id *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(void **)(a2 + 16);
  v6 = *(void **)(a2 + 24);
  v7 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v9 = *(_QWORD *)(a2 + 48);
  v10 = *(_QWORD *)(a2 + 56);
  v11 = *(_QWORD *)(a2 + 64);
  v24 = *(_QWORD *)(a2 + 72);
  v25 = *(_QWORD *)(a2 + 80);
  v26 = *(_QWORD *)(a2 + 88);
  v27 = *(_QWORD *)(a2 + 96);
  v28 = *(_QWORD *)(a2 + 104);
  v29 = *(_QWORD *)(a2 + 112);
  v30 = *(_QWORD *)(a2 + 120);
  v31 = *(_QWORD *)(a2 + 128);
  v32 = *(_QWORD *)(a2 + 136);
  v33 = *(_QWORD *)(a2 + 144);
  v34 = *(_QWORD *)(a2 + 152);
  outlined copy of GraphicsContext.ResolvedShading(*(id *)a2, v4, v5, v6, v7, v8, v9, v10, v11, v24, v25, v26, v27);
  v12 = *(void **)a1;
  v13 = *(_QWORD *)(a1 + 8);
  v14 = *(_QWORD *)(a1 + 16);
  v15 = *(void **)(a1 + 24);
  v16 = *(_QWORD *)(a1 + 32);
  v17 = *(_QWORD *)(a1 + 40);
  v18 = *(_QWORD *)(a1 + 48);
  v19 = *(_QWORD *)(a1 + 56);
  v20 = *(_OWORD *)(a1 + 64);
  v21 = *(_OWORD *)(a1 + 80);
  v22 = *(_OWORD *)(a1 + 96);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_QWORD *)(a1 + 32) = v7;
  *(_QWORD *)(a1 + 40) = v8;
  *(_QWORD *)(a1 + 48) = v9;
  *(_QWORD *)(a1 + 56) = v10;
  *(_QWORD *)(a1 + 64) = v11;
  *(_QWORD *)(a1 + 72) = v24;
  *(_QWORD *)(a1 + 80) = v25;
  *(_QWORD *)(a1 + 88) = v26;
  *(_QWORD *)(a1 + 96) = v27;
  *(_QWORD *)(a1 + 104) = v28;
  *(_QWORD *)(a1 + 112) = v29;
  *(_QWORD *)(a1 + 120) = v30;
  *(_QWORD *)(a1 + 128) = v31;
  *(_QWORD *)(a1 + 136) = v32;
  *(_QWORD *)(a1 + 144) = v33;
  *(_QWORD *)(a1 + 152) = v34;
  outlined consume of GraphicsContext.ResolvedShading(v12, v13, v14, v15, v16, v17, v18, v19, v20, *((uint64_t *)&v20 + 1), v21, *((uint64_t *)&v21 + 1), v22);
  return a1;
}

__n128 __swift_memcpy160_8(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __n128 result;
  __int128 v7;
  __int128 v8;

  v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  result = *(__n128 *)(a2 + 96);
  v7 = *(_OWORD *)(a2 + 112);
  v8 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v8;
  *(__n128 *)(a1 + 96) = result;
  *(_OWORD *)(a1 + 112) = v7;
  return result;
}

uint64_t assignWithTake for GraphicsContext.ResolvedShading(uint64_t a1, _OWORD *a2)
{
  void *v3;
  unint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;

  v3 = *(void **)a1;
  v5 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  v6 = *(void **)(a1 + 24);
  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(_QWORD *)(a1 + 40);
  v9 = *(_QWORD *)(a1 + 48);
  v10 = *(_QWORD *)(a1 + 56);
  v11 = *(_OWORD *)(a1 + 64);
  v12 = *(_OWORD *)(a1 + 80);
  v13 = *(_OWORD *)(a1 + 96);
  v14 = a2[1];
  *(_OWORD *)a1 = *a2;
  *(_OWORD *)(a1 + 16) = v14;
  v15 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v15;
  v16 = a2[5];
  *(_OWORD *)(a1 + 64) = a2[4];
  *(_OWORD *)(a1 + 80) = v16;
  v17 = a2[7];
  *(_OWORD *)(a1 + 96) = a2[6];
  *(_OWORD *)(a1 + 112) = v17;
  v18 = a2[9];
  *(_OWORD *)(a1 + 128) = a2[8];
  *(_OWORD *)(a1 + 144) = v18;
  outlined consume of GraphicsContext.ResolvedShading(v3, v5, v4, v6, v7, v8, v9, v10, v11, *((uint64_t *)&v11 + 1), v12, *((uint64_t *)&v12 + 1), v13);
  return a1;
}

uint64_t getEnumTagSinglePayload for GraphicsContext.ResolvedShading(uint64_t a1, int a2)
{
  unsigned int v2;
  int v3;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 160))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = (*(_QWORD *)(a1 + 96) >> 11) & 0x1F80 | ((unsigned __int16)*(_QWORD *)(a1 + 96) >> 9) | (*(_QWORD *)(a1 + 96) >> 19) & 0xFFFFE000;
  if (v2 > 0x80000000)
    v3 = ~v2;
  else
    v3 = -1;
  return (v3 + 1);
}

double storeEnumTagSinglePayload for GraphicsContext.ResolvedShading(uint64_t a1, int a2, int a3)
{
  double result;

  if (a2 < 0)
  {
    *(_QWORD *)(a1 + 152) = 0;
    result = 0.0;
    *(_OWORD *)(a1 + 136) = 0u;
    *(_OWORD *)(a1 + 120) = 0u;
    *(_OWORD *)(a1 + 104) = 0u;
    *(_OWORD *)(a1 + 88) = 0u;
    *(_OWORD *)(a1 + 72) = 0u;
    *(_OWORD *)(a1 + 56) = 0u;
    *(_OWORD *)(a1 + 40) = 0u;
    *(_OWORD *)(a1 + 24) = 0u;
    *(_OWORD *)(a1 + 8) = 0u;
    *(_QWORD *)a1 = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(a1 + 160) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      result = 0.0;
      *(_OWORD *)(a1 + 64) = 0u;
      *(_OWORD *)(a1 + 80) = 0u;
      *(_OWORD *)(a1 + 32) = 0u;
      *(_OWORD *)(a1 + 48) = 0u;
      *(_OWORD *)a1 = 0u;
      *(_OWORD *)(a1 + 16) = 0u;
      *(_QWORD *)(a1 + 96) = (-2048 * a2) & 0xFC0000 | ((-a2 & 0x7FLL) << 9) & 0xFFF80000FFFFFFFFLL | ((unint64_t)(-a2 >> 13) << 32);
      *(_OWORD *)(a1 + 104) = 0u;
      *(_OWORD *)(a1 + 120) = 0u;
      *(_OWORD *)(a1 + 136) = 0u;
      *(_QWORD *)(a1 + 152) = 0;
      return result;
    }
    *(_BYTE *)(a1 + 160) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t destructiveInjectEnumTag for GraphicsContext.ResolvedShading(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 96) = *(_QWORD *)(result + 96) & 0xFF0301FFLL | (a2 << 60);
  return result;
}

ValueMetadata *type metadata accessor for GraphicsContext.ResolvedShading()
{
  return &type metadata for GraphicsContext.ResolvedShading;
}

ValueMetadata *type metadata accessor for GraphicsContext.GradientOptions()
{
  return &type metadata for GraphicsContext.GradientOptions;
}

void destroy for GraphicsContext.ResolvedImage(uint64_t a1)
{
  int v2;

  v2 = *(unsigned __int8 *)(a1 + 8);
  if (v2 != 255)
    outlined consume of GraphicsImage.Contents(*(void **)a1, v2);
  if (*(unsigned __int8 *)(a1 + 184) != 255)
    outlined consume of GraphicsContext.Shading.Storage(*(void **)(a1 + 112), *(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 128), *(_QWORD *)(a1 + 136), *(_QWORD *)(a1 + 144), *(_QWORD *)(a1 + 152), *(_QWORD *)(a1 + 160), *(_QWORD *)(a1 + 168), *(_QWORD *)(a1 + 176), *(_BYTE *)(a1 + 184));
}

uint64_t initializeWithCopy for GraphicsContext.ResolvedImage(uint64_t a1, uint64_t *a2)
{
  int v4;
  uint64_t v5;
  __int128 v6;
  int v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  void *v20;

  v4 = *((unsigned __int8 *)a2 + 8);
  if (v4 == 255)
  {
    *(_QWORD *)a1 = *a2;
    *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
  }
  else
  {
    v5 = *a2;
    outlined copy of GraphicsImage.Contents((id)*a2, *((_BYTE *)a2 + 8));
    *(_QWORD *)a1 = v5;
    *(_BYTE *)(a1 + 8) = v4;
  }
  *(_QWORD *)(a1 + 16) = a2[2];
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 3);
  *(_BYTE *)(a1 + 40) = *((_BYTE *)a2 + 40);
  *(_OWORD *)(a1 + 44) = *(_OWORD *)((char *)a2 + 44);
  *(_BYTE *)(a1 + 60) = *((_BYTE *)a2 + 60);
  v6 = *((_OWORD *)a2 + 5);
  *(_OWORD *)(a1 + 64) = *((_OWORD *)a2 + 4);
  *(_OWORD *)(a1 + 80) = v6;
  *(_WORD *)(a1 + 96) = *((_WORD *)a2 + 48);
  *(_BYTE *)(a1 + 98) = *((_BYTE *)a2 + 98);
  *(_BYTE *)(a1 + 99) = *((_BYTE *)a2 + 99);
  *(_QWORD *)(a1 + 104) = a2[13];
  v7 = *((unsigned __int8 *)a2 + 184);
  if (v7 == 255)
  {
    v17 = *((_OWORD *)a2 + 10);
    *(_OWORD *)(a1 + 144) = *((_OWORD *)a2 + 9);
    *(_OWORD *)(a1 + 160) = v17;
    *(_OWORD *)(a1 + 169) = *(_OWORD *)((char *)a2 + 169);
    v18 = *((_OWORD *)a2 + 8);
    *(_OWORD *)(a1 + 112) = *((_OWORD *)a2 + 7);
    *(_OWORD *)(a1 + 128) = v18;
  }
  else
  {
    v8 = (void *)a2[14];
    v9 = a2[15];
    v20 = v8;
    v10 = a2[16];
    v11 = a2[17];
    v12 = a2[18];
    v13 = a2[19];
    v14 = a2[20];
    v15 = a2[21];
    v16 = a2[22];
    outlined copy of GraphicsContext.Shading.Storage(v8, v9, v10, v11, v12, v13, v14, v15, v16, v7);
    *(_QWORD *)(a1 + 112) = v20;
    *(_QWORD *)(a1 + 120) = v9;
    *(_QWORD *)(a1 + 128) = v10;
    *(_QWORD *)(a1 + 136) = v11;
    *(_QWORD *)(a1 + 144) = v12;
    *(_QWORD *)(a1 + 152) = v13;
    *(_QWORD *)(a1 + 160) = v14;
    *(_QWORD *)(a1 + 168) = v15;
    *(_QWORD *)(a1 + 176) = v16;
    *(_BYTE *)(a1 + 184) = v7;
  }
  return a1;
}

uint64_t assignWithCopy for GraphicsContext.ResolvedImage(uint64_t a1, uint64_t a2)
{
  int v4;
  id v5;
  void *v6;
  char v7;
  id v8;
  char v9;
  id v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _OWORD *v14;
  _OWORD *v15;
  int v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  uint64_t v52;
  uint64_t v53;

  v4 = *(unsigned __int8 *)(a2 + 8);
  if (*(unsigned __int8 *)(a1 + 8) == 255)
  {
    if (v4 == 255)
    {
      v10 = *(id *)a2;
      *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
      *(_QWORD *)a1 = v10;
    }
    else
    {
      v8 = *(id *)a2;
      outlined copy of GraphicsImage.Contents(*(id *)a2, *(_BYTE *)(a2 + 8));
      *(_QWORD *)a1 = v8;
      *(_BYTE *)(a1 + 8) = v4;
    }
  }
  else if (v4 == 255)
  {
    outlined destroy of GraphicsImage.Contents(a1);
    v9 = *(_BYTE *)(a2 + 8);
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_BYTE *)(a1 + 8) = v9;
  }
  else
  {
    v5 = *(id *)a2;
    outlined copy of GraphicsImage.Contents(*(id *)a2, *(_BYTE *)(a2 + 8));
    v6 = *(void **)a1;
    *(_QWORD *)a1 = v5;
    v7 = *(_BYTE *)(a1 + 8);
    *(_BYTE *)(a1 + 8) = v4;
    outlined consume of GraphicsImage.Contents(v6, v7);
  }
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  v11 = *(_OWORD *)(a2 + 44);
  *(_BYTE *)(a1 + 60) = *(_BYTE *)(a2 + 60);
  *(_OWORD *)(a1 + 44) = v11;
  v12 = *(_OWORD *)(a2 + 64);
  v13 = *(_OWORD *)(a2 + 80);
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  *(_OWORD *)(a1 + 64) = v12;
  *(_OWORD *)(a1 + 80) = v13;
  *(_BYTE *)(a1 + 97) = *(_BYTE *)(a2 + 97);
  *(_BYTE *)(a1 + 98) = *(_BYTE *)(a2 + 98);
  *(_BYTE *)(a1 + 99) = *(_BYTE *)(a2 + 99);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  v14 = (_OWORD *)(a1 + 112);
  v15 = (_OWORD *)(a2 + 112);
  v16 = *(unsigned __int8 *)(a2 + 184);
  if (*(unsigned __int8 *)(a1 + 184) == 255)
  {
    if (v16 == 255)
    {
      *v14 = *v15;
      v48 = *(_OWORD *)(a2 + 128);
      v49 = *(_OWORD *)(a2 + 144);
      v50 = *(_OWORD *)(a2 + 160);
      *(_OWORD *)(a1 + 169) = *(_OWORD *)(a2 + 169);
      *(_OWORD *)(a1 + 144) = v49;
      *(_OWORD *)(a1 + 160) = v50;
      *(_OWORD *)(a1 + 128) = v48;
    }
    else
    {
      v37 = *(void **)(a2 + 112);
      v36 = *(_QWORD *)(a2 + 120);
      v53 = v36;
      v38 = *(_QWORD *)(a2 + 128);
      v39 = *(_QWORD *)(a2 + 136);
      v40 = *(_QWORD *)(a2 + 144);
      v41 = *(_QWORD *)(a2 + 152);
      v42 = *(_QWORD *)(a2 + 160);
      v43 = *(_QWORD *)(a2 + 168);
      v44 = *(_QWORD *)(a2 + 176);
      outlined copy of GraphicsContext.Shading.Storage(v37, v36, v38, v39, v40, v41, v42, v43, v44, v16);
      *(_QWORD *)(a1 + 112) = v37;
      *(_QWORD *)(a1 + 120) = v53;
      *(_QWORD *)(a1 + 128) = v38;
      *(_QWORD *)(a1 + 136) = v39;
      *(_QWORD *)(a1 + 144) = v40;
      *(_QWORD *)(a1 + 152) = v41;
      *(_QWORD *)(a1 + 160) = v42;
      *(_QWORD *)(a1 + 168) = v43;
      *(_QWORD *)(a1 + 176) = v44;
      *(_BYTE *)(a1 + 184) = v16;
    }
  }
  else if (v16 == 255)
  {
    outlined destroy of GraphicsContext.Shading(a1 + 112);
    *v14 = *v15;
    v46 = *(_OWORD *)(a2 + 144);
    v45 = *(_OWORD *)(a2 + 160);
    v47 = *(_OWORD *)(a2 + 128);
    *(_OWORD *)(a1 + 169) = *(_OWORD *)(a2 + 169);
    *(_OWORD *)(a1 + 144) = v46;
    *(_OWORD *)(a1 + 160) = v45;
    *(_OWORD *)(a1 + 128) = v47;
  }
  else
  {
    v18 = *(void **)(a2 + 112);
    v17 = *(_QWORD *)(a2 + 120);
    v52 = v17;
    v19 = *(_QWORD *)(a2 + 128);
    v20 = *(_QWORD *)(a2 + 136);
    v21 = *(_QWORD *)(a2 + 144);
    v22 = *(_QWORD *)(a2 + 152);
    v23 = *(_QWORD *)(a2 + 160);
    v24 = *(_QWORD *)(a2 + 168);
    v25 = *(_QWORD *)(a2 + 176);
    outlined copy of GraphicsContext.Shading.Storage(v18, v17, v19, v20, v21, v22, v23, v24, v25, v16);
    v26 = *(void **)(a1 + 112);
    v27 = *(_QWORD *)(a1 + 120);
    v28 = *(_QWORD *)(a1 + 128);
    v29 = *(_QWORD *)(a1 + 136);
    v30 = *(_QWORD *)(a1 + 144);
    v31 = *(_QWORD *)(a1 + 152);
    v32 = *(_QWORD *)(a1 + 160);
    v33 = *(_QWORD *)(a1 + 168);
    v34 = *(_QWORD *)(a1 + 176);
    v35 = *(_BYTE *)(a1 + 184);
    *(_QWORD *)(a1 + 112) = v18;
    *(_QWORD *)(a1 + 120) = v52;
    *(_QWORD *)(a1 + 128) = v19;
    *(_QWORD *)(a1 + 136) = v20;
    *(_QWORD *)(a1 + 144) = v21;
    *(_QWORD *)(a1 + 152) = v22;
    *(_QWORD *)(a1 + 160) = v23;
    *(_QWORD *)(a1 + 168) = v24;
    *(_QWORD *)(a1 + 176) = v25;
    *(_BYTE *)(a1 + 184) = v16;
    outlined consume of GraphicsContext.Shading.Storage(v26, v27, v28, v29, v30, v31, v32, v33, v34, v35);
  }
  return a1;
}

uint64_t outlined destroy of GraphicsContext.Shading(uint64_t a1)
{
  destroy for GraphicsContext.Shading(a1, &type metadata for GraphicsContext.Shading);
  return a1;
}

__n128 __swift_memcpy185_8(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __n128 result;
  __int128 v9;
  __int128 v10;

  v2 = *a2;
  v3 = a2[1];
  v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  v5 = a2[4];
  v6 = a2[5];
  v7 = a2[7];
  *(_OWORD *)(a1 + 96) = a2[6];
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  result = (__n128)a2[8];
  v9 = a2[9];
  v10 = a2[10];
  *(_OWORD *)(a1 + 169) = *(__int128 *)((char *)a2 + 169);
  *(_OWORD *)(a1 + 144) = v9;
  *(_OWORD *)(a1 + 160) = v10;
  *(__n128 *)(a1 + 128) = result;
  return result;
}

uint64_t assignWithTake for GraphicsContext.ResolvedImage(uint64_t a1, uint64_t a2)
{
  int v4;
  int v5;
  void *v6;
  __int128 v7;
  int v8;
  int v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;

  v4 = *(unsigned __int8 *)(a1 + 8);
  if (v4 != 255)
  {
    v5 = *(unsigned __int8 *)(a2 + 8);
    if (v5 != 255)
    {
      v6 = *(void **)a1;
      *(_QWORD *)a1 = *(_QWORD *)a2;
      *(_BYTE *)(a1 + 8) = v5;
      outlined consume of GraphicsImage.Contents(v6, v4);
      goto LABEL_6;
    }
    outlined destroy of GraphicsImage.Contents(a1);
  }
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
LABEL_6:
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_OWORD *)(a1 + 44) = *(_OWORD *)(a2 + 44);
  *(_BYTE *)(a1 + 60) = *(_BYTE *)(a2 + 60);
  v7 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v7;
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  *(_BYTE *)(a1 + 97) = *(_BYTE *)(a2 + 97);
  *(_WORD *)(a1 + 98) = *(_WORD *)(a2 + 98);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  v8 = *(unsigned __int8 *)(a1 + 184);
  if (v8 == 255)
  {
LABEL_10:
    v22 = *(_OWORD *)(a2 + 160);
    *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
    *(_OWORD *)(a1 + 160) = v22;
    *(_OWORD *)(a1 + 169) = *(_OWORD *)(a2 + 169);
    v23 = *(_OWORD *)(a2 + 128);
    *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
    *(_OWORD *)(a1 + 128) = v23;
    return a1;
  }
  v9 = *(unsigned __int8 *)(a2 + 184);
  if (v9 == 255)
  {
    outlined destroy of GraphicsContext.Shading(a1 + 112);
    goto LABEL_10;
  }
  v10 = *(_QWORD *)(a2 + 176);
  v11 = *(void **)(a1 + 112);
  v12 = *(_QWORD *)(a1 + 120);
  v13 = *(_QWORD *)(a1 + 128);
  v14 = *(_QWORD *)(a1 + 136);
  v15 = *(_QWORD *)(a1 + 144);
  v16 = *(_QWORD *)(a1 + 152);
  v17 = *(_QWORD *)(a1 + 160);
  v18 = *(_QWORD *)(a1 + 168);
  v19 = *(_QWORD *)(a1 + 176);
  v20 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = v20;
  v21 = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 160) = v21;
  *(_QWORD *)(a1 + 176) = v10;
  *(_BYTE *)(a1 + 184) = v9;
  outlined consume of GraphicsContext.Shading.Storage(v11, v12, v13, v14, v15, v16, v17, v18, v19, v8);
  return a1;
}

uint64_t getEnumTagSinglePayload for GraphicsContext.ResolvedImage(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 185))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 97);
  v4 = v3 >= 2;
  v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for GraphicsContext.ResolvedImage(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 184) = 0;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 185) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 185) = 0;
    if (a2)
      *(_BYTE *)(result + 97) = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for GraphicsContext.ResolvedImage()
{
  return &type metadata for GraphicsContext.ResolvedImage;
}

void *destroy for GraphicsContext.ResolvedText(uint64_t a1)
{
  swift_release();
  swift_release();
  return outlined consume of GraphicsContext.Shading.Storage(*(void **)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_BYTE *)(a1 + 88));
}

uint64_t initializeWithCopy for GraphicsContext.ResolvedText(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  char v13;
  uint64_t v14;
  void *v15;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(_QWORD *)(a2 + 24);
  v5 = *(_QWORD *)(a2 + 32);
  v6 = *(_QWORD *)(a2 + 40);
  v7 = *(_QWORD *)(a2 + 48);
  v8 = *(_QWORD *)(a2 + 56);
  v9 = *(_QWORD *)(a2 + 64);
  v14 = *(_QWORD *)(a2 + 72);
  v15 = *(void **)(a2 + 16);
  v10 = *(_QWORD *)(a2 + 80);
  v11 = *(_BYTE *)(a2 + 88);
  swift_retain();
  swift_retain();
  outlined copy of GraphicsContext.Shading.Storage(v15, v4, v5, v6, v7, v8, v9, v14, v10, v11);
  *(_QWORD *)(a1 + 16) = v15;
  *(_QWORD *)(a1 + 24) = v4;
  *(_QWORD *)(a1 + 32) = v5;
  *(_QWORD *)(a1 + 40) = v6;
  *(_QWORD *)(a1 + 48) = v7;
  *(_QWORD *)(a1 + 56) = v8;
  *(_QWORD *)(a1 + 64) = v9;
  *(_QWORD *)(a1 + 72) = v14;
  *(_QWORD *)(a1 + 80) = v10;
  *(_BYTE *)(a1 + 88) = v13;
  return a1;
}

uint64_t assignWithCopy for GraphicsContext.ResolvedText(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v23;

  v2 = a2;
  *(_QWORD *)a1 = *a2;
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 8) = v2[1];
  swift_retain();
  swift_release();
  v4 = (void *)v2[2];
  v5 = v2[3];
  v6 = v2[4];
  v7 = v2[5];
  v8 = v2[6];
  v9 = v2[7];
  v10 = v2[8];
  v11 = v2[9];
  v23 = v2[10];
  LOBYTE(v2) = *((_BYTE *)v2 + 88);
  outlined copy of GraphicsContext.Shading.Storage(v4, v5, v6, v7, v8, v9, v10, v11, v23, (char)v2);
  v12 = *(void **)(a1 + 16);
  v13 = *(_QWORD *)(a1 + 24);
  v14 = *(_QWORD *)(a1 + 32);
  v15 = *(_QWORD *)(a1 + 40);
  v16 = *(_QWORD *)(a1 + 48);
  v17 = *(_QWORD *)(a1 + 56);
  v18 = *(_QWORD *)(a1 + 64);
  v19 = *(_QWORD *)(a1 + 72);
  v20 = *(_QWORD *)(a1 + 80);
  v21 = *(_BYTE *)(a1 + 88);
  *(_QWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 24) = v5;
  *(_QWORD *)(a1 + 32) = v6;
  *(_QWORD *)(a1 + 40) = v7;
  *(_QWORD *)(a1 + 48) = v8;
  *(_QWORD *)(a1 + 56) = v9;
  *(_QWORD *)(a1 + 64) = v10;
  *(_QWORD *)(a1 + 72) = v11;
  *(_QWORD *)(a1 + 80) = v23;
  *(_BYTE *)(a1 + 88) = (_BYTE)v2;
  outlined consume of GraphicsContext.Shading.Storage(v12, v13, v14, v15, v16, v17, v18, v19, v20, v21);
  return a1;
}

uint64_t assignWithTake for GraphicsContext.ResolvedText(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  char v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  __int128 v16;
  __int128 v17;

  swift_release();
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release();
  v4 = *(_QWORD *)(a2 + 80);
  v5 = *(_BYTE *)(a2 + 88);
  v6 = *(void **)(a1 + 16);
  v7 = *(_QWORD *)(a1 + 24);
  v8 = *(_QWORD *)(a1 + 32);
  v9 = *(_QWORD *)(a1 + 40);
  v10 = *(_QWORD *)(a1 + 48);
  v11 = *(_QWORD *)(a1 + 56);
  v12 = *(_QWORD *)(a1 + 64);
  v13 = *(_QWORD *)(a1 + 72);
  v14 = *(_QWORD *)(a1 + 80);
  v15 = *(_BYTE *)(a1 + 88);
  v16 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v16;
  v17 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v17;
  *(_QWORD *)(a1 + 80) = v4;
  *(_BYTE *)(a1 + 88) = v5;
  outlined consume of GraphicsContext.Shading.Storage(v6, v7, v8, v9, v10, v11, v12, v13, v14, v15);
  return a1;
}

uint64_t getEnumTagSinglePayload for GraphicsContext.ResolvedText(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 89))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for GraphicsContext.ResolvedText(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 88) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 89) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 89) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for GraphicsContext.ResolvedText()
{
  return &type metadata for GraphicsContext.ResolvedText;
}

uint64_t initializeBufferWithCopyOfBuffer for GraphicsContext.ResolvedSymbol(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_unknownObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for GraphicsContext.ResolvedSymbol(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  a1[1] = a2[1];
  a1[2] = a2[2];
  return a1;
}

uint64_t assignWithTake for GraphicsContext.ResolvedSymbol(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_unknownObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  return a1;
}

ValueMetadata *type metadata accessor for GraphicsContext.ResolvedSymbol()
{
  return &type metadata for GraphicsContext.ResolvedSymbol;
}

uint64_t type metadata accessor for GraphicsContextSymbols()
{
  return objc_opt_self();
}

uint64_t method lookup function for GraphicsContextSymbols()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of GraphicsContextSymbols.symbol<A>(for:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 80))();
}

void *destroy for GraphicsContext.Filter(uint64_t a1)
{
  return outlined consume of GraphicsContext.Filter.Storage(*(void **)a1, *(id *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80));
}

_QWORD *initializeWithCopy for GraphicsContext.Filter(_QWORD *a1, uint64_t a2)
{
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;

  v3 = *(void **)a2;
  v4 = *(void **)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v9 = *(_QWORD *)(a2 + 48);
  v10 = *(_QWORD *)(a2 + 56);
  v11 = *(_QWORD *)(a2 + 64);
  v13 = *(_QWORD *)(a2 + 72);
  v14 = *(_QWORD *)(a2 + 80);
  outlined copy of GraphicsContext.Filter.Storage(*(void **)a2, v4, v5, v6, v7, v8, v9, v10, v11, v13, v14);
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v5;
  a1[3] = v6;
  a1[4] = v7;
  a1[5] = v8;
  a1[6] = v9;
  a1[7] = v10;
  a1[8] = v11;
  a1[9] = v13;
  a1[10] = v14;
  return a1;
}

uint64_t assignWithCopy for GraphicsContext.Filter(uint64_t a1, uint64_t a2)
{
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;

  v3 = *(void **)a2;
  v4 = *(void **)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v9 = *(_QWORD *)(a2 + 48);
  v10 = *(_QWORD *)(a2 + 56);
  v11 = *(_QWORD *)(a2 + 64);
  v23 = *(_QWORD *)(a2 + 72);
  v24 = *(_QWORD *)(a2 + 80);
  outlined copy of GraphicsContext.Filter.Storage(*(void **)a2, v4, v5, v6, v7, v8, v9, v10, v11, v23, v24);
  v12 = *(void **)a1;
  v13 = *(void **)(a1 + 8);
  v14 = *(_QWORD *)(a1 + 16);
  v15 = *(_QWORD *)(a1 + 24);
  v16 = *(_QWORD *)(a1 + 32);
  v17 = *(_QWORD *)(a1 + 40);
  v18 = *(_QWORD *)(a1 + 48);
  v19 = *(_QWORD *)(a1 + 56);
  v20 = *(_OWORD *)(a1 + 64);
  v21 = *(_QWORD *)(a1 + 80);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_QWORD *)(a1 + 32) = v7;
  *(_QWORD *)(a1 + 40) = v8;
  *(_QWORD *)(a1 + 48) = v9;
  *(_QWORD *)(a1 + 56) = v10;
  *(_QWORD *)(a1 + 64) = v11;
  *(_QWORD *)(a1 + 72) = v23;
  *(_QWORD *)(a1 + 80) = v24;
  outlined consume of GraphicsContext.Filter.Storage(v12, v13, v14, v15, v16, v17, v18, v19, v20, *((uint64_t *)&v20 + 1), v21);
  return a1;
}

uint64_t assignWithTake for GraphicsContext.Filter(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;

  v3 = *(_QWORD *)(a2 + 80);
  v4 = *(void **)a1;
  v6 = *(void **)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  v7 = *(_QWORD *)(a1 + 24);
  v8 = *(_QWORD *)(a1 + 32);
  v9 = *(_QWORD *)(a1 + 40);
  v10 = *(_QWORD *)(a1 + 48);
  v11 = *(_QWORD *)(a1 + 56);
  v12 = *(_OWORD *)(a1 + 64);
  v13 = *(_QWORD *)(a1 + 80);
  v14 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v14;
  v15 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v15;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 80) = v3;
  outlined consume of GraphicsContext.Filter.Storage(v4, v6, v5, v7, v8, v9, v10, v11, v12, *((uint64_t *)&v12 + 1), v13);
  return a1;
}

uint64_t getEnumTagSinglePayload for GraphicsContext.Filter(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 > 0xFFFFFE7 && *(_BYTE *)(a1 + 88))
    return (*(_DWORD *)a1 + 268435432);
  if ((((*(_DWORD *)(a1 + 80) >> 27) & 0xF000001F | (32 * ((*(_DWORD *)(a1 + 80) >> 4) & 0x7FFFFF))) ^ 0xFFFFFFF) >= 0xFFFFFE7)
    v3 = -1;
  else
    v3 = ((*(_DWORD *)(a1 + 80) >> 27) & 0xF000001F | (32 * ((*(_DWORD *)(a1 + 80) >> 4) & 0x7FFFFF))) ^ 0xFFFFFFF;
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for GraphicsContext.Filter(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 >= 0xFFFFFE8)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 268435432;
    if (a3 > 0xFFFFFE7)
      *(_BYTE *)(result + 88) = 1;
  }
  else
  {
    if (a3 > 0xFFFFFE7)
      *(_BYTE *)(result + 88) = 0;
    if (a2)
    {
      *(_OWORD *)(result + 48) = 0u;
      *(_OWORD *)(result + 64) = 0u;
      *(_OWORD *)(result + 16) = 0u;
      *(_OWORD *)(result + 32) = 0u;
      *(_OWORD *)result = 0u;
      *(_QWORD *)(result + 80) = 16 * ((-a2 >> 5) & 0x7FFFFF) - (a2 << 27);
    }
  }
  return result;
}

uint64_t getEnumTag for GraphicsContext.Filter.Storage(_DWORD *a1)
{
  unsigned int v1;

  v1 = a1[20];
  if (v1 >> 30 == 3)
    return (*a1 + 24);
  else
    return v1 >> 27;
}

uint64_t destructiveProjectEnumData for GraphicsContext.Filter.Storage(uint64_t result)
{
  *(_QWORD *)(result + 80) &= 0xFFFFFFFF07FFFFFFLL;
  return result;
}

uint64_t destructiveInjectEnumTag for GraphicsContext.Filter.Storage(uint64_t result, unsigned int a2)
{
  if (a2 < 0x18)
  {
    *(_QWORD *)(result + 80) = *(_QWORD *)(result + 80) & 0xFFFFFFFF0000000FLL | (a2 << 27);
  }
  else
  {
    *(_QWORD *)result = a2 - 24;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_QWORD *)(result + 72) = 0;
    *(_QWORD *)(result + 80) = 3221225472;
  }
  return result;
}

ValueMetadata *type metadata accessor for GraphicsContext.Filter.Storage()
{
  return &type metadata for GraphicsContext.Filter.Storage;
}

void type metadata accessor for RangeSet<Text.Layout.CharacterIndex>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for RangeSet<Text.Layout.CharacterIndex>)
  {
    lazy protocol witness table accessor for type Text.Layout.CharacterIndex and conformance Text.Layout.CharacterIndex();
    v0 = type metadata accessor for RangeSet();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<Text.Layout.CharacterIndex>);
  }
}

uint64_t outlined init with copy of Text.Effect.RenderSegmentation.StaticRuns(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for Text.Effect.RenderSegmentation.StaticRuns(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t type metadata accessor for NSStringDrawingContext()
{
  unint64_t result;

  result = lazy cache variable for type metadata for NSStringDrawingContext;
  if (!lazy cache variable for type metadata for NSStringDrawingContext)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for NSStringDrawingContext);
  }
  return result;
}

uint64_t _s7SwiftUI15GraphicsContextV15ResolvedShadingOWOi7_(uint64_t result)
{
  *(_QWORD *)(result + 96) = *(_QWORD *)(result + 96) & 0xFF0301FFLL | 0x8000000000000000;
  return result;
}

uint64_t _s7SwiftUI15GraphicsContextV15ResolvedShadingOWOi5_(uint64_t result)
{
  *(_QWORD *)(result + 96) = *(_QWORD *)(result + 96) & 0xFF0301FFLL | 0x6000000000000000;
  return result;
}

uint64_t _s7SwiftUI15GraphicsContextV15ResolvedShadingOWOi1_(uint64_t result)
{
  *(_QWORD *)(result + 96) = *(_QWORD *)(result + 96) & 0xFF0301FFLL | 0x2000000000000000;
  return result;
}

uint64_t _s7SwiftUI15GraphicsContextV15ResolvedShadingOWOi_(uint64_t result)
{
  *(_QWORD *)(result + 96) &= 0xFF0301FFuLL;
  return result;
}

id partial apply for closure #2 in RBFill.setRepeatedImage(_:origin:scale:sourceRect:in:)()
{
  uint64_t v0;

  return closure #2 in RBFill.setImage(_:destRect:in:)(*(id *)(v0 + 16), *(_DWORD *)(v0 + 24));
}

uint64_t outlined init with take of GraphicsContext.GradientGeometry(__int128 *a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;

  v2 = *a1;
  v3 = a1[1];
  v4 = a1[2];
  *(_BYTE *)(a2 + 48) = *((_BYTE *)a1 + 48);
  *(_OWORD *)(a2 + 16) = v3;
  *(_OWORD *)(a2 + 32) = v4;
  *(_OWORD *)a2 = v2;
  return a2;
}

void partial apply for closure #1 in GraphicsContext.Storage.Shared.setGradient(_:geometry:options:in:colorSpace:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  closure #1 in GraphicsContext.Storage.Shared.setGradient(_:geometry:options:in:colorSpace:)(a1, a2, a3, a4, *(_QWORD *)(v4 + 16), *(__int128 **)(v4 + 24));
}

uint64_t outlined init with take of GraphicsContext.ResolvedShading?(uint64_t a1, uint64_t a2, unint64_t *a3)
{
  uint64_t v5;

  type metadata accessor for GraphicsContext.ResolvedShading?(0, a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

void **outlined retain of Text.Layout.Run(void **a1)
{
  void *v2;
  id v3;

  v2 = *a1;
  swift_retain();
  v3 = v2;
  return a1;
}

id *outlined release of Text.Layout.Run(id *a1)
{

  swift_release();
  return a1;
}

unint64_t partial apply for closure #1 in withGradient(_:in:colorSpace:do:)(unint64_t a1, float *a2, _QWORD *a3)
{
  uint64_t v3;

  return closure #1 in withGradient(_:in:colorSpace:do:)(a1, a2, a3, *(_QWORD *)(v3 + 16), *(_QWORD *)(v3 + 24), *(_QWORD *)(v3 + 32), *(_DWORD *)(v3 + 40));
}

uint64_t partial apply for closure #2 in withGradient(_:in:colorSpace:do:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, _QWORD))(v2 + 16))(*(_QWORD *)(v2 + 32), a1, a2, 0);
}

void partial apply for closure #1 in closure #1 in withGradientStorage(count:valuesPerLocation:element:do:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  closure #1 in closure #1 in withGradientStorage(count:valuesPerLocation:element:do:)(a1, a2, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32), *(void (**)(void))(v2 + 40), *(_QWORD *)(v2 + 48), *(_QWORD *)(v2 + 56), *(void (**)(uint64_t, uint64_t))(v2 + 64));
}

unint64_t partial apply for closure #1 in withGradient(_:in:do:)(unint64_t a1, _DWORD *a2, uint64_t a3)
{
  uint64_t v3;

  return closure #1 in withGradient(_:in:do:)(a1, a2, a3, *(_QWORD *)(v3 + 16), *(unsigned __int8 *)(v3 + 24), *(_DWORD *)(v3 + 28), *(_BYTE *)(v3 + 32));
}

uint64_t partial apply for closure #2 in withGradient(_:in:do:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  if (*(_BYTE *)(v2 + 24))
  {
    if (*(_BYTE *)(v2 + 24) == 1)
    {
      if ((*(_BYTE *)(v2 + 25) & 1) != 0)
        v3 = 576;
      else
        v3 = 64;
    }
    else if (*(_BYTE *)(v2 + 25))
    {
      v3 = 704;
    }
    else
    {
      v3 = 192;
    }
  }
  else if ((*(_BYTE *)(v2 + 25) & 1) != 0)
  {
    v3 = 640;
  }
  else
  {
    v3 = 128;
  }
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t))(v2 + 32))(*(_QWORD *)(v2 + 48), a1, a2, v3);
}

uint64_t partial apply for closure #1 in withGradientStorage(count:valuesPerLocation:element:do:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return closure #1 in withGradientStorage(count:valuesPerLocation:element:do:)(a1, a2, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24));
}

void outlined consume of ResolvedMulticolorStyle?(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  if (a4 != (void *)1)

}

id outlined copy of ResolvedMulticolorStyle?(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  id result;

  if (a4 != (void *)1)
    return a4;
  return result;
}

void partial apply for closure #1 in RBFill.setRepeatedImage(_:origin:scale:sourceRect:in:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  closure #1 in RBFill.setRepeatedImage(_:origin:scale:sourceRect:in:)(a1, a2, *(_QWORD *)(v2 + 16));
}

uint64_t getEnumTagSinglePayload for GraphicsContext.Filter.ResolvedShadow(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 52))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for GraphicsContext.Filter.ResolvedShadow(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_DWORD *)(result + 48) = 0;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 52) = v3;
  return result;
}

ValueMetadata *type metadata accessor for GraphicsContext.Filter.ResolvedShadow()
{
  return &type metadata for GraphicsContext.Filter.ResolvedShadow;
}

uint64_t initializeWithCopy for GraphicsContext.Filter.Shadow(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for GraphicsContext.Filter.Shadow(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  return a1;
}

uint64_t assignWithTake for GraphicsContext.Filter.Shadow(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_release();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  v4 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v4;
  return a1;
}

ValueMetadata *type metadata accessor for GraphicsContext.Filter.Shadow()
{
  return &type metadata for GraphicsContext.Filter.Shadow;
}

__C::CGRect __swiftcall CGSize.centeredIn(_:)(CGSize a1)
{
  double v1;
  double v2;
  double v3;
  double v4;
  __C::CGRect result;

  v3 = (a1.width - v1) * 0.5 + 0.0;
  v4 = (a1.height - v2) * 0.5 + 0.0;
  result.size.height = v2;
  result.size.width = v1;
  result.origin.y = v4;
  result.origin.x = v3;
  return result;
}

BOOL static ContentMode.== infix(_:_:)(int a1, int a2)
{
  return ((a2 ^ a1) & 1) == 0;
}

void ContentMode.hash(into:)(uint64_t a1, char a2)
{
  Hasher._combine(_:)(a2 & 1);
}

void *static ContentMode.allCases.getter()
{
  return &outlined read-only object #0 of static ContentMode.allCases.getter;
}

Swift::Int ContentMode.hashValue.getter(char a1)
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1 & 1);
  return Hasher._finalize()();
}

void protocol witness for static CaseIterable.allCases.getter in conformance ContentMode(_QWORD *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of protocol witness for static CaseIterable.allCases.getter in conformance ContentMode;
}

uint64_t _AspectRatioLayout.aspectRatio.setter(uint64_t result, char a2)
{
  uint64_t v2;

  *(_QWORD *)v2 = result;
  *(_BYTE *)(v2 + 8) = a2 & 1;
  return result;
}

uint64_t (*_AspectRatioLayout.aspectRatio.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t _AspectRatioLayout.contentMode.getter(uint64_t a1, unsigned int a2)
{
  return (a2 >> 8) & 1;
}

uint64_t _AspectRatioLayout.contentMode.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 9) = result & 1;
  return result;
}

uint64_t (*_AspectRatioLayout.contentMode.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

void _AspectRatioLayout.spaceOffered(to:in:)(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, __int16 a4@<W3>, uint64_t a5@<X8>)
{
  double v6;
  int v7;
  double v8;
  int v9;
  double v11;
  double v12;
  int v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  char v20;
  double v21;
  char v22;
  uint64_t v23;
  int v24;

  v6 = *(double *)a2;
  v7 = *(unsigned __int8 *)(a2 + 8);
  v8 = *(double *)(a2 + 16);
  v9 = *(unsigned __int8 *)(a2 + 24);
  if ((v7 & v9) != 1)
  {
    if ((a4 & 1) != 0)
    {
      v13 = *((_DWORD *)a1 + 2);
      v23 = *a1;
      v24 = v13;
      v19 = *(double *)&a3;
      v20 = 1;
      v21 = *(double *)&a3;
      v22 = 1;
      LayoutProxy.size(in:)((uint64_t *)&v19);
    }
    else
    {
      v11 = *(double *)&a3;
      v12 = 1.0;
    }
    if (v11 == v12)
    {
      v11 = 1.0;
      v12 = 1.0;
    }
    if ((a4 & 0x100) == 0)
    {
      v19 = v6;
      v20 = v7;
      v21 = v8;
      v22 = v9;
      v14 = CGSize.scaledToFit(_:)((uint64_t)&v19, v11, v12);
LABEL_28:
      *(double *)a5 = v14;
      *(_BYTE *)(a5 + 8) = 0;
      *(double *)(a5 + 16) = v15;
      goto LABEL_29;
    }
    if ((v7 & 1) != 0 || v11 == 0.0 && v6 == 0.0)
    {
      v16 = -INFINITY;
      if ((v9 & 1) != 0)
        goto LABEL_18;
    }
    else
    {
      v16 = v6 / v11;
      if ((v9 & 1) != 0)
        goto LABEL_18;
    }
    if (v12 != 0.0 || v8 != 0.0)
    {
      v17 = v8 / v12;
      goto LABEL_20;
    }
LABEL_18:
    v17 = -INFINITY;
LABEL_20:
    if (v16 <= v17)
      v16 = v17;
    if (v11 == 0.0)
      v14 = 0.0;
    else
      v14 = v11 * v16;
    v18 = v12 * v16;
    if (v12 == 0.0)
      v15 = 0.0;
    else
      v15 = v18;
    goto LABEL_28;
  }
  *(double *)a5 = v6;
  *(_BYTE *)(a5 + 8) = 1;
  *(double *)(a5 + 16) = v8;
LABEL_29:
  *(_BYTE *)(a5 + 24) = v7 & v9;
}

double CGSize.scaledToFit(_:)(uint64_t a1, double result, double a3)
{
  double v3;
  double v4;
  BOOL v5;
  double v6;
  double v7;

  v3 = *(double *)(a1 + 16);
  if ((*(_BYTE *)(a1 + 8) & 1) != 0)
  {
    if ((*(_BYTE *)(a1 + 24) & 1) != 0)
      return result;
    v4 = INFINITY;
  }
  else
  {
    v5 = *(double *)a1 == 0.0 && result == 0.0;
    v4 = *(double *)a1 / result;
    v6 = INFINITY;
    if (v5)
      v4 = INFINITY;
    if ((*(_BYTE *)(a1 + 24) & 1) != 0)
      goto LABEL_14;
  }
  if (a3 == 0.0 && v3 == 0.0)
    v6 = INFINITY;
  else
    v6 = v3 / a3;
LABEL_14:
  if (v6 >= v4)
    v7 = v4;
  else
    v7 = v6;
  if (result == 0.0)
    return 0.0;
  else
    return v7 * result;
}

double CGSize.scaledToFill(_:)(uint64_t a1, double result, double a3)
{
  double v3;
  int v4;
  double v5;
  double v6;
  double v7;

  v3 = *(double *)a1;
  v4 = *(unsigned __int8 *)(a1 + 8);
  if (v4 == 1 && (*(_BYTE *)(a1 + 24) & 1) != 0)
    return result;
  if ((v4 & 1) != 0 || result == 0.0 && v3 == 0.0)
  {
    v5 = -INFINITY;
    if ((*(_BYTE *)(a1 + 24) & 1) != 0)
      goto LABEL_11;
  }
  else
  {
    v5 = v3 / result;
    if ((*(_BYTE *)(a1 + 24) & 1) != 0)
      goto LABEL_11;
  }
  v6 = *(double *)(a1 + 16);
  if (a3 != 0.0 || v6 != 0.0)
  {
    v7 = v6 / a3;
    goto LABEL_13;
  }
LABEL_11:
  v7 = -INFINITY;
LABEL_13:
  if (v5 <= v7)
    v5 = v7;
  if (result == 0.0)
    return 0.0;
  else
    return v5 * result;
}

double _AspectRatioLayout.placement(of:in:)@<D0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, __int16 a4@<W3>, uint64_t a5@<X8>)
{
  int v8;
  int v9;
  double v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  char v14;
  double v15;
  char v16;
  double *InputValue;
  double v18;
  double v19;
  double result;
  double v21;
  __int128 v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  int v33;
  double v34;
  __int128 v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  int v43;

  v8 = *(_DWORD *)(a1 + 8);
  v9 = *((_DWORD *)a2 + 2);
  v10 = *((double *)a2 + 2);
  v11 = a2[5];
  v12 = *((_BYTE *)a2 + 48);
  v42 = *(_QWORD *)a1;
  v43 = v8;
  v32 = *a2;
  v33 = v9;
  v34 = v10;
  v27 = *(_OWORD *)(a2 + 3);
  v35 = v27;
  v36 = v11;
  v37 = v12;
  PlacementContext.proposedSize.getter((uint64_t)&v38);
  v28 = v38;
  v29 = v39;
  v30 = v40;
  v31 = v41;
  _AspectRatioLayout.spaceOffered(to:in:)(&v42, (uint64_t)&v28, a3, a4 & 0x101, (uint64_t)&v32);
  v13 = v32;
  v14 = v33;
  v15 = v34;
  v16 = v35;
  if ((v12 & 1) != 0)
  {
    InputValue = (double *)AGGraphGetInputValue();
    v18 = *InputValue;
    v19 = InputValue[1];
  }
  else
  {
    v18 = v10;
    v19 = *(double *)&v27;
  }
  result = v18 * 0.5;
  *(_QWORD *)a5 = v13;
  v21 = v19 * 0.5;
  *(_BYTE *)(a5 + 8) = v14;
  *(double *)(a5 + 16) = v15;
  *(_BYTE *)(a5 + 24) = v16;
  __asm { FMOV            V2.2D, #0.5 }
  *(_OWORD *)(a5 + 32) = _Q2;
  *(double *)(a5 + 48) = result;
  *(double *)(a5 + 56) = v21;
  return result;
}

uint64_t _AspectRatioLayout.sizeThatFits(in:context:child:)(uint64_t a1, uint64_t a2, unsigned int *a3, uint64_t a4, __int16 a5)
{
  uint64_t v5;
  char v6;
  uint64_t v7;
  char v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v12;
  char v13;
  uint64_t v14;
  char v15;
  unint64_t v16;
  unsigned int v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  char v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;

  v5 = *(_QWORD *)a1;
  v6 = *(_BYTE *)(a1 + 8);
  v7 = *(_QWORD *)(a1 + 16);
  v8 = *(_BYTE *)(a1 + 24);
  v9 = a3[1];
  v10 = a3[2];
  v22 = *a3;
  v23 = v9;
  v24 = v10;
  v16 = __PAIR64__(v9, v22);
  v17 = v10;
  v12 = v5;
  v13 = v6;
  v14 = v7;
  v15 = v8;
  _AspectRatioLayout.spaceOffered(to:in:)((uint64_t *)&v16, (uint64_t)&v12, a4, a5 & 0x101, (uint64_t)&v18);
  v12 = v18;
  v13 = v19;
  v14 = v20;
  v15 = v21;
  return LayoutProxy.size(in:)(&v12);
}

double protocol witness for UnaryLayout.placement(of:in:) in conformance _AspectRatioLayout@<D0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  __int16 v4;

  if (*(_BYTE *)(v3 + 9))
    v4 = 256;
  else
    v4 = 0;
  return _AspectRatioLayout.placement(of:in:)(a1, a2, *(_QWORD *)v3, v4 | *(unsigned __int8 *)(v3 + 8), a3);
}

uint64_t protocol witness for UnaryLayout.sizeThatFits(in:context:child:) in conformance _AspectRatioLayout(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  uint64_t v3;
  __int16 v4;

  if (*(_BYTE *)(v3 + 9))
    v4 = 256;
  else
    v4 = 0;
  return _AspectRatioLayout.sizeThatFits(in:context:child:)(a1, a2, a3, *(_QWORD *)v3, v4 | *(unsigned __int8 *)(v3 + 8));
}

double CGSize.scaleThatFits(_:)(uint64_t a1, double a2, double a3)
{
  double v3;
  double result;
  double v5;
  double v6;

  if ((*(_BYTE *)(a1 + 8) & 1) != 0 || (v3 = *(double *)a1, a2 == 0.0) && v3 == 0.0)
  {
    result = INFINITY;
    if ((*(_BYTE *)(a1 + 24) & 1) != 0)
      goto LABEL_9;
  }
  else
  {
    result = v3 / a2;
    if ((*(_BYTE *)(a1 + 24) & 1) != 0)
    {
LABEL_9:
      v6 = INFINITY;
      goto LABEL_11;
    }
  }
  v5 = *(double *)(a1 + 16);
  if (a3 == 0.0 && v5 == 0.0)
    goto LABEL_9;
  v6 = v5 / a3;
LABEL_11:
  if (v6 < result)
    return v6;
  return result;
}

double CGSize.scaleThatFills(_:)(uint64_t a1, double a2, double a3)
{
  double v3;
  double result;
  double v5;
  double v6;

  if ((*(_BYTE *)(a1 + 8) & 1) != 0 || (v3 = *(double *)a1, a2 == 0.0) && v3 == 0.0)
  {
    result = -INFINITY;
    if ((*(_BYTE *)(a1 + 24) & 1) != 0)
      goto LABEL_9;
  }
  else
  {
    result = v3 / a2;
    if ((*(_BYTE *)(a1 + 24) & 1) != 0)
    {
LABEL_9:
      v6 = -INFINITY;
      goto LABEL_11;
    }
  }
  v5 = *(double *)(a1 + 16);
  if (a3 == 0.0 && v5 == 0.0)
    goto LABEL_9;
  v6 = v5 / a3;
LABEL_11:
  if (result <= v6)
    return v6;
  return result;
}

__C::CGRect __swiftcall CGSize.centeredIn(_:)(__C::CGRect a1)
{
  double v1;
  double v2;
  double v3;
  double v4;
  double v5;
  double v6;
  __C::CGRect result;

  v3 = (a1.size.width - v1) * 0.5 + a1.origin.x;
  v4 = (a1.size.height - v2) * 0.5 + a1.origin.y;
  v5 = v1;
  v6 = v2;
  result.size.height = v6;
  result.size.width = v5;
  result.origin.y = v4;
  result.origin.x = v3;
  return result;
}

unint64_t lazy protocol witness table accessor for type ContentMode and conformance ContentMode()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ContentMode and conformance ContentMode;
  if (!lazy protocol witness table cache variable for type ContentMode and conformance ContentMode)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ContentMode, &type metadata for ContentMode);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ContentMode and conformance ContentMode);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type [ContentMode] and conformance [A]()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type [ContentMode] and conformance [A];
  if (!lazy protocol witness table cache variable for type [ContentMode] and conformance [A])
  {
    type metadata accessor for [ContentMode]();
    result = MEMORY[0x23B7C9C04](MEMORY[0x24BEE12E0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [ContentMode] and conformance [A]);
  }
  return result;
}

void type metadata accessor for [ContentMode]()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for [ContentMode])
  {
    v0 = type metadata accessor for Array();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for [ContentMode]);
  }
}

unint64_t instantiation function for generic protocol witness table for _AspectRatioLayout(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type _AspectRatioLayout and conformance _AspectRatioLayout();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t storeEnumTagSinglePayload for ContentMode(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_234DE1F44 + 4 * byte_2352A2F55[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_234DE1F78 + 4 * byte_2352A2F50[v4]))();
}

uint64_t sub_234DE1F78(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_234DE1F80(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x234DE1F88);
  return result;
}

uint64_t sub_234DE1F94(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x234DE1F9CLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_234DE1FA0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_234DE1FA8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ContentMode()
{
  return &type metadata for ContentMode;
}

uint64_t getEnumTagSinglePayload for _AspectRatioLayout(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 10))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 9);
  v4 = v3 >= 2;
  v5 = v3 - 2;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for _AspectRatioLayout(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_WORD *)(result + 8) = 0;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 10) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 10) = 0;
    if (a2)
      *(_BYTE *)(result + 9) = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for _AspectRatioLayout()
{
  return &type metadata for _AspectRatioLayout;
}

SwiftUI::BlendMode __swiftcall BlendMode.init(_:)(CGBlendMode a1)
{
  _BYTE *v1;

  if ((a1 - 1) > 0x1A)
    *v1 = 0;
  else
    *v1 = byte_2352A30AE[a1 - 1];
  return (char)a1;
}

void GraphicsFilter.makeCAFilter()()
{
  __asm { BR              X10 }
}

id sub_234DE20EC()
{
  id v0;
  Class isa;
  Class v2;
  Class v3;

  v0 = _CAFilterCreate(9u);
  isa = CGFloat._bridgeToObjectiveC()().super.super.isa;
  _CAFilterSetInput(v0, isa, 15);

  v2 = Bool._bridgeToObjectiveC()().super.super.isa;
  _CAFilterSetInput(v0, v2, 11);

  v3 = Bool._bridgeToObjectiveC()().super.super.isa;
  _CAFilterSetInput(v0, v3, 7);

  return v0;
}

void sub_234DE28B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,int a36,int a37,int a38,int a39,int a40,int a41,int a42,int a43,int a44,int a45,uint64_t a46,int a47,int a48)
{
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  int v59;
  int v60;
  void *v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  int v68;
  int v69;
  int v70;

  v62 = HIDWORD(v52);
  v63 = HIDWORD(v51);
  v64 = HIDWORD(v50);
  v65 = HIDWORD(v49);
  v66 = HIDWORD(v48);
  v67 = HIDWORD(v53);
  v69 = v48;
  v70 = v49;
  v58 = v50;
  v59 = v51;
  v60 = v52;
  v68 = v53;
  _CAFilterCreate(0xEu);
  v61 = (void *)objc_opt_self();
  a33 = v57;
  a34 = v55;
  a35 = v56;
  a36 = v60;
  a37 = v62;
  a38 = v59;
  a39 = v63;
  a40 = v58;
  a41 = v64;
  a42 = v70;
  a43 = v65;
  a44 = v69;
  a45 = v66;
  a46 = v54;
  a47 = v68;
  a48 = v67;
  if (!objc_msgSend(v61, sel_valueWithCAColorMatrix_, &a33))
    __break(1u);
  JUMPOUT(0x234DE2880);
}

void sub_234DE2A50()
{
  JUMPOUT(0x234DE2A68);
}

void sub_234DE2C28()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  JUMPOUT(0x234DE2C64);
}

CAFrameRateRange __swiftcall CAFrameRateRange.init(interval:)(Swift::Double interval)
{
  float v1;
  float v2;
  float v3;
  float v4;
  float v5;
  CAFrameRateRange result;

  if (interval == 0.0)
    goto LABEL_2;
  v4 = interval;
  v5 = roundf(1.0 / v4);
  if (v5 <= 40.0)
  {
    *(CAFrameRateRange *)&v1 = CAFrameRateRange.init(minimum:maximum:preferred:)(v5, 60.0, (Swift::Float_optional *)LODWORD(v5));
  }
  else
  {
    if (v5 < 80.0)
    {
LABEL_2:
      v1 = *MEMORY[0x24BDE5430];
      v2 = *(float *)(MEMORY[0x24BDE5430] + 4);
      v3 = *(float *)(MEMORY[0x24BDE5430] + 8);
      goto LABEL_8;
    }
    *(CAFrameRateRange *)&v1 = CAFrameRateRange.init(minimum:maximum:preferred:)(80.0, v5, (Swift::Float_optional *)LODWORD(v5));
  }
LABEL_8:
  result.preferred = v3;
  result.maximum = v2;
  result.minimum = v1;
  return result;
}

void Animation.Function.apply(to:)()
{
  __asm { BR              X10 }
}

id sub_234DE2DC4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30)
{
  void *v30;
  double v31;

  return objc_msgSend(v30, sel_addPreset_duration_, 0, v31);
}

id sub_234DE2E44()
{
  void *v0;
  double v1;
  double v2;
  double v3;
  double v4;
  double v5;

  return objc_msgSend(v0, sel_addBezierDuration_controlPoint1_controlPoint2_, v2, v1, v5, v4, v3);
}

uint64_t sub_234DE2EA8()
{
  void *v0;
  uint64_t v1;
  uint64_t (*v2)(_QWORD *);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  __int128 v7;
  uint64_t v8;
  char v9;
  float64_t v10;
  unint64_t v11;
  unint64_t v12;
  float64x2_t v13;
  _QWORD *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  double v18;
  float v19;
  uint64_t v20;
  float v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  float *v25;
  const float *v26;
  unsigned __int128 v27;
  float32x4_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v32;
  unint64_t v33;
  _QWORD *v34;
  __int128 v35;
  double v36;
  _QWORD v37[2];
  __int16 v38;

  v6 = (_QWORD *)MEMORY[0x24BEE4AF8];
  v37[0] = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  v37[1] = 0;
  v38 = 0;
  outlined copy of Animation.Function((uint64_t)v2, v1, v5, v4, v3, 6);
  *(_QWORD *)&v7 = 0;
  while (1)
  {
    v35 = v7;
    v8 = v2(v37);
    if ((v9 & 1) != 0)
      break;
    v10 = *(double *)&v8;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v6[2] + 1, 1, v6);
    v12 = v6[2];
    v11 = v6[3];
    v7 = v35;
    if (v12 >= v11 >> 1)
    {
      v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v11 > 1), v12 + 1, 1, v6);
      v7 = v35;
      v6 = v14;
    }
    *(_QWORD *)&v13.f64[0] = v7;
    v13.f64[1] = v10;
    v6[2] = v12 + 1;
    v6[v12 + 4] = vcvt_f32_f64(v13);
    *(double *)&v7 = *(double *)&v7 + 0.1;
    if (*(double *)&v7 >= 10.0)
      goto LABEL_10;
  }
  *(_QWORD *)&v7 = v35;
LABEL_10:
  v36 = *(double *)&v7;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v6[2] + 1, 1, v6);
  v15 = v6[2];
  v16 = v6[3];
  v17 = v15 + 1;
  v18 = v36;
  if (v15 >= v16 >> 1)
  {
    v32 = v6;
    v33 = v6[2];
    v34 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v16 > 1), v15 + 1, 1, v32);
    v18 = v36;
    v15 = v33;
    v6 = v34;
  }
  v19 = v18;
  v6[2] = v17;
  v20 = (uint64_t)&v6[v15 + 4];
  *(float *)v20 = v19;
  *(_DWORD *)(v20 + 4) = 1065353216;
  v21 = 1.0 / v18;
  if (v15 >= 4)
  {
    v23 = (v15 + 1) & 3;
    if (!v23)
      v23 = 4;
    v22 = v15 + 1 - v23;
    v24 = v22;
    v25 = (float *)(v6 + 4);
    v26 = (const float *)(v6 + 4);
    do
    {
      v27 = (unsigned __int128)vld2q_f32(v26);
      v26 += 8;
      v28 = vmulq_n_f32((float32x4_t)v27, v21);
      *v25 = v28.f32[0];
      v25[2] = v28.f32[1];
      v25[4] = v28.f32[2];
      v25[6] = v28.f32[3];
      v25 = (float *)v26;
      v24 -= 4;
    }
    while (v24);
  }
  else
  {
    v22 = 0;
  }
  v29 = v15 - v22 + 1;
  v30 = 8 * v22 + 32;
  do
  {
    *(float *)((char *)v6 + v30) = *(float *)((char *)v6 + v30) * v21;
    v30 += 8;
    --v29;
  }
  while (v29);
  swift_bridgeObjectRetain();
  objc_msgSend(v0, sel_addSampledFunctionWithDuration_count_values_, v17, v6 + 4, v36);
  outlined consume of Animation.Function((uint64_t)v2, v1, v5, v4, v3, 6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t specialized RBShadowFlags.init(_:)(char a1)
{
  uint64_t v1;

  if ((a1 & 1) != 0)
  {
    if ((a1 & 2) != 0)
    {
      v1 = 3;
      if ((a1 & 4) == 0)
        goto LABEL_5;
    }
    else
    {
      v1 = 1;
      if ((a1 & 4) == 0)
        goto LABEL_5;
    }
LABEL_4:
    v1 = v1 | 4;
    goto LABEL_5;
  }
  if ((a1 & 2) == 0)
  {
    v1 = 0;
    if ((a1 & 4) == 0)
      goto LABEL_5;
    goto LABEL_4;
  }
  v1 = 2;
  if ((a1 & 4) != 0)
    goto LABEL_4;
LABEL_5:
  if ((a1 & 8) != 0)
    return v1 | 8;
  return v1;
}

uint64_t specialized static GraphicsFilter.updateAsync(layer:oldFilters:newFilters:)(Class *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  double v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  void *v40;
  float v41;
  int v42;
  int v43;
  Class *v44;
  objc_class *v45;
  uint64_t v46;
  Swift::String v47;
  Swift::String v48;
  uint64_t v49;
  unint64_t v50;
  float v51;
  float v52;
  float v53;
  float v54;
  Swift::String v55;
  Swift::String v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  void *v60;
  objc_class *v61;
  Swift::String v62;
  Swift::String v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  unint64_t v71;
  void *v72;
  objc_class *v73;
  Swift::String v74;
  Swift::String v75;
  Swift::Bool v76;
  uint64_t countAndFlagsBits;
  NSObject v78;
  void *object;
  CALayer v80;
  double v81;
  void *v82;
  float v83;
  float v84;
  id v85;
  double v86;
  id v87;
  Swift::String v88;
  Swift::String v89;
  Swift::String v90;
  Swift::Bool v91;
  Swift::String v92;
  Swift::String v93;
  float v94;
  float v95;
  float v96;
  float v97;
  unint64_t v98;
  void *v99;
  Swift::String v100;
  Swift::String v101;
  Swift::String v102;
  Swift::Bool v103;
  id v104;
  double v105;
  id v106;
  Swift::String v107;
  Swift::String v108;
  Swift::String v109;
  Swift::Bool v110;
  id v111;
  double v112;
  Swift::String v113;
  Swift::String v114;
  void *v116;
  void *v117;
  uint64_t v119;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  unint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  int v140;
  double v141;
  Swift::String v142;
  unint64_t v143;
  uint64_t v144;
  uint64_t v145;
  unint64_t v146;
  uint64_t v147;
  unint64_t v148;
  uint64_t v149;
  uint64_t v150;
  _QWORD v151[14];
  int v152;
  char v153;
  double v154;
  unint64_t v155;
  unint64_t v156;
  uint64_t v157;
  uint64_t v158;
  unint64_t v159;
  uint64_t v160;
  unint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  int v168;
  char v169;
  CALayer v170;
  CALayer v171;
  CALayer v172;

  v3 = *(_QWORD *)(a2 + 16);
  if (v3 != *(_QWORD *)(a3 + 16))
    return 0;
  if (!v3)
    return 1;
  v4 = 0;
  v135 = 0;
  v119 = v3 - 1;
  while (2)
  {
    v5 = *(_QWORD *)(a2 + v4 + 40);
    v6 = *(_QWORD *)(a2 + v4 + 48);
    v7 = *(_QWORD *)(a2 + v4 + 56);
    v8 = *(_QWORD *)(a2 + v4 + 64);
    v9 = *(_QWORD *)(a2 + v4 + 72);
    v11 = *(_QWORD *)(a2 + v4 + 80);
    v10 = *(_QWORD *)(a2 + v4 + 88);
    v12 = *(_QWORD *)(a2 + v4 + 96);
    v13 = *(_QWORD *)(a2 + v4 + 104);
    v137 = *(_QWORD *)(a2 + v4 + 112);
    v138 = *(_QWORD *)(a2 + v4 + 120);
    v139 = *(_QWORD *)(a2 + v4 + 128);
    v136 = *(_QWORD *)(a2 + v4 + 136);
    v140 = *(_DWORD *)(a2 + v4 + 144);
    v14 = *(unsigned __int8 *)(a2 + v4 + 148);
    v15 = *(double *)(a3 + v4 + 32);
    v16 = *(_QWORD *)(a3 + v4 + 40);
    v18 = *(_QWORD *)(a3 + v4 + 48);
    v17 = *(_QWORD *)(a3 + v4 + 56);
    v20 = *(_QWORD *)(a3 + v4 + 64);
    v19 = *(_QWORD *)(a3 + v4 + 72);
    v21 = *(_QWORD *)(a3 + v4 + 80);
    v22 = *(_QWORD *)(a3 + v4 + 88);
    v24 = *(_QWORD *)(a3 + v4 + 96);
    v23 = *(_QWORD *)(a3 + v4 + 104);
    v25 = *(_QWORD *)(a3 + v4 + 112);
    v26 = *(_QWORD *)(a3 + v4 + 120);
    v27 = *(_QWORD *)(a3 + v4 + 128);
    v28 = *(_QWORD *)(a3 + v4 + 136);
    v29 = *(_DWORD *)(a3 + v4 + 144);
    v30 = *(unsigned __int8 *)(a3 + v4 + 148);
    v31 = *(uint64_t *)(a2 + v4 + 32);
    v151[0] = v31;
    v151[1] = v5;
    v32 = v5;
    v131 = v6;
    v151[2] = v6;
    v151[3] = v7;
    v125 = v7;
    v126 = v8;
    v34 = v136;
    v33 = v137;
    v151[4] = v8;
    v151[5] = v9;
    v127 = v9;
    v128 = v11;
    v35 = v138;
    v36 = v139;
    v151[6] = v11;
    v151[7] = v10;
    v129 = v10;
    v37 = v12;
    v151[8] = v12;
    v151[9] = v13;
    v38 = v13;
    v39 = v140;
    v151[10] = v137;
    v151[11] = v138;
    v151[12] = v139;
    v151[13] = v136;
    v152 = v140;
    v153 = v14;
    v141 = v15;
    v154 = v15;
    v155 = v16;
    v133 = v24;
    v40 = (void *)v18;
    v156 = v18;
    v122 = v17;
    v123 = v20;
    v157 = v17;
    v158 = v20;
    v124 = v19;
    v159 = v19;
    v130 = v21;
    v160 = v21;
    LODWORD(v41) = v22;
    v161 = v22;
    v162 = v24;
    v42 = v30;
    v132 = v23;
    v163 = v23;
    v164 = v25;
    v165 = v26;
    v166 = v27;
    v167 = v28;
    v168 = v29;
    v169 = v30;
    v134 = v4;
    v43 = v32;
    switch(v14)
    {
      case 0:
        if (v30)
          goto LABEL_119;
        if (((v32 & 1) == 0) == (v16 & 1))
          goto LABEL_120;
        if (v15 == *(double *)&v31)
          goto LABEL_107;
        v44 = a1;
        v45 = (objc_class *)objc_msgSend(objc_allocWithZone(MEMORY[0x24BDD16E0]), sel_initWithDouble_, v15);
        v142._countAndFlagsBits = 0;
        v142._object = (void *)0xE000000000000000;
        _StringGuts.grow(_:)(21);
        swift_bridgeObjectRelease();
        v142._countAndFlagsBits = 0x2E737265746C6966;
        v142._object = (void *)0xEF287865646E6940;
        v46 = v135;
        v47._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v47);
        swift_bridgeObjectRelease();
        v48._countAndFlagsBits = 11817;
        v48._object = (void *)0xE200000000000000;
        String.append(_:)(v48);
        v49 = 0x6461527475706E69;
        v50 = 0xEB00000000737569;
        goto LABEL_96;
      case 1:
      case 13:
      case 14:
      case 15:
        goto LABEL_119;
      case 2:
        if (v30 == 2)
          goto LABEL_114;
        goto LABEL_119;
      case 3:
        if (v30 != 3)
          goto LABEL_119;
LABEL_114:
        v116 = (void *)v18;
        outlined copy of GraphicsFilter((id)v31, v32, (id)v131, v125, v126, v127, v128, v129, v37, v38, v137, v138, v139, v136, v140, SBYTE2(v140));
        outlined copy of GraphicsFilter(*(id *)&v141, v16, v116, v122, v123, v124, v130, v22, v133, v132, v25, v26, v27, v28, v29, SBYTE2(v29));
        outlined release of (GraphicsFilter, GraphicsFilter)((uint64_t)v151);
        *(double *)&v31 = COERCE_DOUBLE(_assertionFailure(_:_:file:line:flags:)());
        __break(1u);
        goto LABEL_115;
      case 4:
        if (v30 != 4)
          goto LABEL_119;
        if (((v137 ^ v25) & 1) != 0)
          goto LABEL_120;
        v69 = HIDWORD(*(_QWORD *)&v15);
        v70 = HIDWORD(v22);
        if (*(float *)&v15 == *(float *)&v31
          && *((float *)&v15 + 1) == *((float *)&v31 + 1)
          && *(float *)&v16 == *(float *)&v32
          && *((float *)&v16 + 1) == *((float *)&v32 + 1)
          && *(float *)&v18 == *(float *)&v131
          && *((float *)&v18 + 1) == *((float *)&v131 + 1)
          && *(float *)&v17 == *(float *)&v125
          && *((float *)&v17 + 1) == *((float *)&v125 + 1)
          && *(float *)&v123 == *(float *)&v126
          && *((float *)&v123 + 1) == *((float *)&v126 + 1)
          && *(float *)&v19 == *(float *)&v127
          && *((float *)&v19 + 1) == *((float *)&v127 + 1)
          && *(float *)&v21 == *(float *)&v128
          && *((float *)&v21 + 1) == *((float *)&v128 + 1)
          && v41 == *(float *)&v129
          && *(float *)&v70 == *((float *)&v129 + 1)
          && *(float *)&v133 == *(float *)&v37
          && *((float *)&v133 + 1) == *((float *)&v37 + 1)
          && *(float *)&v23 == *(float *)&v38
          && *((float *)&v23 + 1) == *((float *)&v38 + 1))
        {
          goto LABEL_107;
        }
        v71 = v18;
        v72 = (void *)objc_opt_self();
        v142._countAndFlagsBits = __PAIR64__(v69, LODWORD(v141));
        v142._object = (void *)v16;
        v143 = v71;
        v144 = v122;
        v145 = v123;
        v146 = v124;
        v147 = v130;
        v148 = __PAIR64__(v70, LODWORD(v41));
        v149 = v133;
        v150 = v132;
        v73 = (objc_class *)objc_msgSend(v72, sel_valueWithCAColorMatrix_, &v142);
        if (!v73)
          goto LABEL_123;
        v45 = v73;
        v142._countAndFlagsBits = 0;
        v142._object = (void *)0xE000000000000000;
        _StringGuts.grow(_:)(21);
        swift_bridgeObjectRelease();
        v142._countAndFlagsBits = 0x2E737265746C6966;
        v142._object = (void *)0xEF287865646E6940;
        v46 = v135;
        v74._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v74);
        swift_bridgeObjectRelease();
        v75._countAndFlagsBits = 11817;
        v75._object = (void *)0xE200000000000000;
        String.append(_:)(v75);
        v65 = 0xD000000000000010;
        v64 = 0x80000002352E2130;
        goto LABEL_77;
      case 5:
        if (v30 != 5)
          goto LABEL_119;
        v52 = *((float *)&v15 + 1);
        v51 = *(float *)&v15;
        v54 = *((float *)&v16 + 1);
        v53 = *(float *)&v16;
        if (*(float *)&v15 == *(float *)&v31
          && *((float *)&v15 + 1) == *((float *)&v31 + 1)
          && *(float *)&v16 == *(float *)&v32
          && *((float *)&v16 + 1) == *((float *)&v32 + 1))
        {
          goto LABEL_107;
        }
        v44 = a1;
        v46 = v135;
        if (one-time initialization token for cache != -1)
        {
          swift_once();
          v54 = *((float *)&v16 + 1);
          v53 = *(float *)&v16;
          v52 = *((float *)&v141 + 1);
          v51 = *(float *)&v141;
        }
        v45 = (objc_class *)specialized ObjectCache.subscript.getter(v51, v52, v53, v54);
        v142._countAndFlagsBits = 0;
        v142._object = (void *)0xE000000000000000;
        _StringGuts.grow(_:)(21);
        swift_bridgeObjectRelease();
        v142._countAndFlagsBits = 0x2E737265746C6966;
        v142._object = (void *)0xEF287865646E6940;
        v55._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v55);
        swift_bridgeObjectRelease();
        v56._countAndFlagsBits = 11817;
        v56._object = (void *)0xE200000000000000;
        String.append(_:)(v56);
        v49 = 0x6C6F437475706E69;
        v50 = 0xEA0000000000726FLL;
        goto LABEL_96;
      case 6:
        if (v30 != 6)
          goto LABEL_119;
        if (v15 == *(double *)&v31)
          goto LABEL_107;
        v44 = a1;
        v45 = (objc_class *)objc_msgSend(objc_allocWithZone(MEMORY[0x24BDD16E0]), sel_initWithDouble_, v15);
        v142._countAndFlagsBits = 0;
        v142._object = (void *)0xE000000000000000;
        _StringGuts.grow(_:)(21);
        swift_bridgeObjectRelease();
        v142._countAndFlagsBits = 0x2E737265746C6966;
        v142._object = (void *)0xEF287865646E6940;
        v46 = v135;
        v92._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v92);
        swift_bridgeObjectRelease();
        v93._countAndFlagsBits = 11817;
        v93._object = (void *)0xE200000000000000;
        String.append(_:)(v93);
        v50 = 0xEA0000000000656CLL;
        v49 = 0x676E417475706E69;
        goto LABEL_96;
      case 7:
        if (v30 != 7)
          goto LABEL_119;
        goto LABEL_79;
      case 8:
        if (v30 == 8)
          goto LABEL_79;
        goto LABEL_119;
      case 9:
        if (v30 != 9)
          goto LABEL_119;
        goto LABEL_79;
      case 10:
        if (v30 != 10)
          goto LABEL_119;
LABEL_79:
        v81 = *(double *)&v31;
        v82 = (void *)v18;
        outlined copy of GraphicsFilter((id)v31, v32, (id)v131, v125, v126, v127, v128, v129, v37, v38, v137, v138, v139, v136, v140, SBYTE2(v140));
        outlined copy of GraphicsFilter(*(id *)&v141, v16, v82, v122, v123, v124, v130, v22, v133, v132, v25, v26, v27, v28, v29, SBYTE2(v29));
        outlined release of (GraphicsFilter, GraphicsFilter)((uint64_t)v151);
        v83 = v81;
        v84 = v141;
        v46 = v135;
        if (v84 != v83)
        {
          v85 = objc_allocWithZone(MEMORY[0x24BDD16E0]);
          *(float *)&v86 = v141;
          v87 = objc_msgSend(v85, sel_initWithFloat_, v86);
          v142._countAndFlagsBits = 0;
          v142._object = (void *)0xE000000000000000;
          _StringGuts.grow(_:)(21);
          swift_bridgeObjectRelease();
          v142._countAndFlagsBits = 0x2E737265746C6966;
          v142._object = (void *)0xEF287865646E6940;
          v88._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
          String.append(_:)(v88);
          swift_bridgeObjectRelease();
          v89._countAndFlagsBits = 11817;
          v89._object = (void *)0xE200000000000000;
          String.append(_:)(v89);
          v90._countAndFlagsBits = 0x6F6D417475706E69;
          v90._object = (void *)0xEB00000000746E75;
          String.append(_:)(v90);
          v170.super.isa = *a1;
          *(_QWORD *)&v170._attr.refcount = 1;
          DisplayList.ViewUpdater.ViewCache.setAsyncValue(_:for:in:usingPresentationModifier:)((NSObject)v87, v142, v170, v91);

          swift_bridgeObjectRelease();
        }
        goto LABEL_108;
      case 11:
        if (v30 != 11)
          goto LABEL_119;
        v95 = *((float *)&v15 + 1);
        v94 = *(float *)&v15;
        v97 = *((float *)&v16 + 1);
        v96 = *(float *)&v16;
        v46 = v135;
        v98 = v18;
        if (*(float *)&v15 != *(float *)&v31
          || *((float *)&v15 + 1) != *((float *)&v31 + 1)
          || *(float *)&v16 != *(float *)&v32
          || *((float *)&v16 + 1) != *((float *)&v32 + 1))
        {
          if (one-time initialization token for cache != -1)
          {
            swift_once();
            v97 = *((float *)&v16 + 1);
            v96 = *(float *)&v16;
            v95 = *((float *)&v141 + 1);
            v94 = *(float *)&v141;
          }
          v99 = (void *)specialized ObjectCache.subscript.getter(v94, v95, v96, v97);
          v142._countAndFlagsBits = 0;
          v142._object = (void *)0xE000000000000000;
          _StringGuts.grow(_:)(21);
          swift_bridgeObjectRelease();
          v142._countAndFlagsBits = 0x2E737265746C6966;
          v142._object = (void *)0xEF287865646E6940;
          v100._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
          String.append(_:)(v100);
          swift_bridgeObjectRelease();
          v101._countAndFlagsBits = 11817;
          v101._object = (void *)0xE200000000000000;
          String.append(_:)(v101);
          v102._countAndFlagsBits = 0x6C6F437475706E69;
          v102._object = (void *)0xEA0000000000726FLL;
          String.append(_:)(v102);
          v171.super.isa = *a1;
          *(_QWORD *)&v171._attr.refcount = 1;
          DisplayList.ViewUpdater.ViewCache.setAsyncValue(_:for:in:usingPresentationModifier:)((NSObject)v99, v142, v171, v103);

          swift_bridgeObjectRelease();
        }
        if (*(float *)&v98 != *(float *)&v131)
        {
          v104 = objc_allocWithZone(MEMORY[0x24BDD16E0]);
          LODWORD(v105) = v98;
          v106 = objc_msgSend(v104, sel_initWithFloat_, v105);
          v142._countAndFlagsBits = 0;
          v142._object = (void *)0xE000000000000000;
          _StringGuts.grow(_:)(21);
          swift_bridgeObjectRelease();
          v142._countAndFlagsBits = 0x2E737265746C6966;
          v142._object = (void *)0xEF287865646E6940;
          v107._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
          String.append(_:)(v107);
          swift_bridgeObjectRelease();
          v108._countAndFlagsBits = 11817;
          v108._object = (void *)0xE200000000000000;
          String.append(_:)(v108);
          v109._countAndFlagsBits = 0x6F6D417475706E69;
          v109._object = (void *)0xEB00000000746E75;
          String.append(_:)(v109);
          v172.super.isa = *a1;
          *(_QWORD *)&v172._attr.refcount = 1;
          DisplayList.ViewUpdater.ViewCache.setAsyncValue(_:for:in:usingPresentationModifier:)((NSObject)v106, v142, v172, v110);

          swift_bridgeObjectRelease();
        }
        if (*((float *)&v98 + 1) == *((float *)&v131 + 1))
          goto LABEL_98;
        v44 = a1;
        v111 = objc_allocWithZone(MEMORY[0x24BDD16E0]);
        LODWORD(v112) = HIDWORD(v98);
        v45 = (objc_class *)objc_msgSend(v111, sel_initWithFloat_, v112);
        v142._countAndFlagsBits = 0;
        v142._object = (void *)0xE000000000000000;
        _StringGuts.grow(_:)(21);
        swift_bridgeObjectRelease();
        v142._countAndFlagsBits = 0x2E737265746C6966;
        v142._object = (void *)0xEF287865646E6940;
        v113._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v113);
        swift_bridgeObjectRelease();
        v114._countAndFlagsBits = 11817;
        v114._object = (void *)0xE200000000000000;
        String.append(_:)(v114);
        v49 = 0x6169427475706E69;
        v50 = 0xE900000000000073;
LABEL_96:
        String.append(_:)(*(Swift::String *)&v49);
        countAndFlagsBits = v142._countAndFlagsBits;
        v80.super.isa = *v44;
        v78.isa = v45;
        object = v142._object;
        *(_QWORD *)&v80._attr.refcount = 1;
        goto LABEL_97;
      case 12:
        if (v30 != 12)
          goto LABEL_119;
        v57 = HIDWORD(*(_QWORD *)&v15);
        v58 = HIDWORD(v19);
        if (*(float *)&v15 == *(float *)&v31
          && *((float *)&v15 + 1) == *((float *)&v31 + 1)
          && *(float *)&v16 == *(float *)&v32
          && *((float *)&v16 + 1) == *((float *)&v32 + 1)
          && *(float *)&v18 == *(float *)&v131
          && *((float *)&v18 + 1) == *((float *)&v131 + 1)
          && *(float *)&v17 == *(float *)&v125
          && *((float *)&v17 + 1) == *((float *)&v125 + 1)
          && *(float *)&v123 == *(float *)&v126
          && *((float *)&v123 + 1) == *((float *)&v126 + 1)
          && *(float *)&v19 == *(float *)&v127
          && *((float *)&v19 + 1) == *((float *)&v127 + 1)
          && *(float *)&v21 == *(float *)&v128
          && *((float *)&v21 + 1) == *((float *)&v128 + 1)
          && *(float *)&v22 == *(float *)&v129
          && *((float *)&v22 + 1) == *((float *)&v129 + 1)
          && *(float *)&v133 == *(float *)&v37
          && *((float *)&v133 + 1) == *((float *)&v37 + 1)
          && *(float *)&v23 == *(float *)&v38
          && *((float *)&v23 + 1) == *((float *)&v38 + 1))
        {
          goto LABEL_107;
        }
        v59 = v18;
        v60 = (void *)objc_opt_self();
        v142._countAndFlagsBits = __PAIR64__(v57, LODWORD(v141));
        v142._object = (void *)v16;
        v143 = v59;
        v144 = v122;
        v145 = v123;
        v146 = __PAIR64__(v58, v124);
        v147 = v130;
        v148 = v22;
        v149 = v133;
        v150 = v132;
        v61 = (objc_class *)objc_msgSend(v60, sel_valueWithCAColorMatrix_, &v142);
        if (!v61)
        {
          __break(1u);
LABEL_123:
          __break(1u);
          JUMPOUT(0x234DE467CLL);
        }
        v45 = v61;
        v142._countAndFlagsBits = 0;
        v142._object = (void *)0xE000000000000000;
        _StringGuts.grow(_:)(21);
        swift_bridgeObjectRelease();
        v142._countAndFlagsBits = 0x2E737265746C6966;
        v142._object = (void *)0xEF287865646E6940;
        v46 = v135;
        v62._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v62);
        swift_bridgeObjectRelease();
        v63._countAndFlagsBits = 11817;
        v63._object = (void *)0xE200000000000000;
        String.append(_:)(v63);
        v64 = 0x80000002352E2130;
        v65 = 0xD000000000000010;
LABEL_77:
        String.append(_:)(*(Swift::String *)&v65);
        countAndFlagsBits = v142._countAndFlagsBits;
        v80.super.isa = *a1;
        v78.isa = v45;
        object = v142._object;
        *(_QWORD *)&v80._attr.refcount = 1;
LABEL_97:
        DisplayList.ViewUpdater.ViewCache.setAsyncValue(_:for:in:usingPresentationModifier:)(v78, *(Swift::String *)&countAndFlagsBits, v80, v76);

        swift_bridgeObjectRelease();
LABEL_98:
        outlined release of (GraphicsFilter, GraphicsFilter)((uint64_t)v151);
        goto LABEL_108;
      case 16:
        v66 = v131 | v32 | v125 | v126 | v127 | v128 | v129 | v37 | v38 | v137 | v138 | v139 | v136;
        if (v140 || v31 != 1 || v66)
        {
          if (v140 || v31 != 2 || v66 || v42 != 16)
            goto LABEL_119;
          v39 = 0;
          if (v29 || *(_QWORD *)&v15 != 2)
          {
            v31 = 2;
            goto LABEL_119;
          }
          v67 = v18 | v16 | v17 | v123 | v19 | v21 | v22 | v133 | v23 | v25 | v26;
          v68 = v27 | v28;
          v31 = 2;
LABEL_106:
          if (v67 | v68)
            goto LABEL_119;
LABEL_107:
          outlined release of (GraphicsFilter, GraphicsFilter)((uint64_t)v151);
          v46 = v135;
LABEL_108:
          if (v119 == v46)
            return 1;
          v4 = v134 + 120;
          v135 = v46 + 1;
          continue;
        }
        if (v42 == 16)
        {
          v39 = 0;
          if (v29 || *(_QWORD *)&v15 != 1)
            goto LABEL_117;
          v67 = v18 | v16 | v17 | v123 | v19 | v21 | v22 | v133 | v23 | v25 | v26;
          v68 = v27 | v28;
          v31 = 1;
          goto LABEL_106;
        }
        v39 = 0;
LABEL_117:
        v31 = 1;
LABEL_119:
        v117 = v40;
        outlined copy of GraphicsFilter((id)v31, v43, (id)v131, v125, v126, v127, v128, v129, v37, v38, v33, v35, v36, v34, v39, SBYTE2(v39));
        outlined copy of GraphicsFilter(*(id *)&v141, v16, v117, v122, v123, v124, v130, v22, v133, v132, v25, v26, v27, v28, v29, SBYTE2(v29));
LABEL_120:
        outlined release of (GraphicsFilter, GraphicsFilter)((uint64_t)v151);
        return 0;
      default:
LABEL_115:
        v43 = v32;
        goto LABEL_119;
    }
  }
}

uint64_t outlined release of (GraphicsFilter, GraphicsFilter)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  __int128 v11;
  uint64_t v12[3];
  id v13;
  uint64_t v14;
  void *v15;

  v14 = *(_QWORD *)(a1 + 128);
  v15 = *(void **)(a1 + 120);
  v2 = *(_QWORD *)(a1 + 144);
  v13 = *(id *)(a1 + 136);
  v3 = *(_QWORD *)(a1 + 152);
  v4 = *(_QWORD *)(a1 + 160);
  v5 = *(_QWORD *)(a1 + 168);
  v6 = *(_QWORD *)(a1 + 176);
  v11 = *(_OWORD *)(a1 + 200);
  *(_OWORD *)v12 = *(_OWORD *)(a1 + 184);
  v8 = *(_QWORD *)(a1 + 216);
  v7 = *(_QWORD *)(a1 + 224);
  v9 = *(_DWORD *)(a1 + 232);
  outlined consume of GraphicsFilter(*(void **)a1, *(_QWORD *)(a1 + 8), *(id *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_DWORD *)(a1 + 112), BYTE2(*(_DWORD *)(a1 + 112)));
  outlined consume of GraphicsFilter(v15, v14, v13, v2, v3, v4, v5, v6, v12[0], v12[1], v11, *((uint64_t *)&v11 + 1), v8, v7, v9, SBYTE2(v9));
  return a1;
}

unint64_t type metadata accessor for NSArray()
{
  unint64_t result;

  result = lazy cache variable for type metadata for NSArray;
  if (!lazy cache variable for type metadata for NSArray)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for NSArray);
  }
  return result;
}

unint64_t specialized EffectAnimation.init(from:)@<X0>(_QWORD *a1@<X0>, double *a2@<X8>)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  int v8;
  double v9;
  uint64_t v10;
  uint64_t v11;
  double v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t result;
  unint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  double v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  _QWORD *v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  double v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;

  v5 = a1[1];
  v6 = a1[2];
  if (v5 >= v6)
    goto LABEL_67;
  v7 = 0;
  v8 = 1;
  v9 = 0.0;
  v10 = 0;
  v11 = 0;
  v12 = 0.0;
  v13 = 0;
  v14 = 1;
  v15 = 0;
  while (1)
  {
    result = a1[3];
    if (result)
    {
      v19 = a1[4];
      if (v5 < v19)
        goto LABEL_11;
      if (v19 < v5)
        goto LABEL_68;
      a1[3] = 0;
    }
    result = ProtobufDecoder.decodeVarint()();
    if (v2)
      return swift_release();
    if (result < 8)
      goto LABEL_68;
LABEL_11:
    v20 = result >> 3;
    if (result >> 3 != 1)
      break;
    if ((result & 7) != 2)
      goto LABEL_68;
    v30 = (_QWORD *)a1[5];
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v30 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v30[2] + 1, 1, v30);
    v3 = v30[2];
    v31 = v30[3];
    if (v3 >= v31 >> 1)
      v30 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v31 > 1), v3 + 1, 1, v30);
    v30[2] = v3 + 1;
    v30[v3 + 4] = v6;
    a1[5] = v30;
    v32 = ProtobufDecoder.decodeVarint()();
    if (v2)
      return swift_release();
    if (v32 < 0)
      goto LABEL_81;
    v33 = a1[1] + v32;
    if (v6 < v33)
      goto LABEL_68;
    a1[2] = v33;
    v34 = specialized _RotationEffect.init(from:)(a1);
    v37 = (_QWORD *)a1[5];
    if (!v37[2])
      goto LABEL_84;
    v12 = v34;
    v13 = v35;
    v15 = v36;
    result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) != 0)
    {
      v38 = v37[2];
      if (!v38)
        goto LABEL_87;
    }
    else
    {
      result = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v37);
      v37 = (_QWORD *)result;
      v38 = *(_QWORD *)(result + 16);
      if (!v38)
        goto LABEL_87;
    }
    v14 = 0;
LABEL_3:
    v16 = v38 - 1;
    v17 = v37[v16 + 4];
    v37[2] = v16;
    a1[5] = v37;
    a1[2] = v17;
LABEL_4:
    v5 = a1[1];
    v6 = a1[2];
    if (v5 >= v6)
    {
      a1[3] = 0;
      if (((v14 | v8) & 1) == 0 && v7)
      {
        *a2 = v12;
        *((_QWORD *)a2 + 1) = v13;
        *((_QWORD *)a2 + 2) = v15;
        a2[3] = v9;
        *((_QWORD *)a2 + 4) = v10;
        *((_QWORD *)a2 + 5) = v11;
        *((_QWORD *)a2 + 6) = v7;
        return result;
      }
      goto LABEL_68;
    }
  }
  if (v20 == 2)
  {
    if ((result & 7) != 2)
      goto LABEL_68;
    v39 = (_QWORD *)a1[5];
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v39 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v39[2] + 1, 1, v39);
    v3 = v39[2];
    v40 = v39[3];
    if (v3 >= v40 >> 1)
      v39 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v40 > 1), v3 + 1, 1, v39);
    v39[2] = v3 + 1;
    v39[v3 + 4] = v6;
    a1[5] = v39;
    v41 = ProtobufDecoder.decodeVarint()();
    if (v2)
      return swift_release();
    if (v41 < 0)
      goto LABEL_82;
    v42 = a1[1] + v41;
    if (v6 < v42)
      goto LABEL_68;
    a1[2] = v42;
    v43 = specialized _RotationEffect.init(from:)(a1);
    v37 = (_QWORD *)a1[5];
    if (!v37[2])
      goto LABEL_85;
    v9 = v43;
    v10 = v44;
    v11 = v45;
    result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) != 0)
    {
      v38 = v37[2];
      if (!v38)
        goto LABEL_86;
    }
    else
    {
      result = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v37);
      v37 = (_QWORD *)result;
      v38 = *(_QWORD *)(result + 16);
      if (!v38)
        goto LABEL_86;
    }
    v8 = 0;
    goto LABEL_3;
  }
  if (v20 != 3)
  {
    switch(result & 7)
    {
      case 0uLL:
        result = ProtobufDecoder.decodeVarint()();
        if (v2)
          return swift_release();
        goto LABEL_4;
      case 1uLL:
        v46 = a1[1] + 8;
        if (v6 < v46)
          goto LABEL_68;
        goto LABEL_60;
      case 2uLL:
        result = ProtobufDecoder.decodeVarint()();
        if (v2)
          return swift_release();
        if ((result & 0x8000000000000000) != 0)
          goto LABEL_88;
        v46 = a1[1] + result;
        if (v6 < v46)
          goto LABEL_68;
LABEL_60:
        a1[1] = v46;
        break;
      case 5uLL:
        v46 = a1[1] + 4;
        if (v6 >= v46)
          goto LABEL_60;
        goto LABEL_68;
      default:
        goto LABEL_68;
    }
    goto LABEL_4;
  }
  if ((result & 7) != 2)
    goto LABEL_68;
  v21 = (_QWORD *)a1[5];
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v21 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v21[2] + 1, 1, v21);
  v3 = v21[2];
  v22 = v21[3];
  if (v3 >= v22 >> 1)
    v21 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v22 > 1), v3 + 1, 1, v21);
  v21[2] = v3 + 1;
  v21[v3 + 4] = v6;
  a1[5] = v21;
  v23 = ProtobufDecoder.decodeVarint()();
  if (v2)
    return swift_release();
  if ((v23 & 0x8000000000000000) == 0)
  {
    v24 = a1[1] + v23;
    if (v6 < v24)
      goto LABEL_68;
    a1[2] = v24;
    v25 = specialized CodableAnimation.init(from:)(a1);
    v26 = (_QWORD *)a1[5];
    if (!v26[2])
      goto LABEL_83;
    v27 = v25;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
    {
      v28 = v26[2];
      if (!v28)
        goto LABEL_66;
      goto LABEL_25;
    }
    v26 = specialized _ArrayBuffer._consumeAndCreateNew()(v26);
    v28 = v26[2];
    if (v28)
    {
LABEL_25:
      v29 = v28 - 1;
      v3 = v26[v29 + 4];
      v26[2] = v29;
      result = swift_release();
      a1[5] = v26;
      a1[2] = v3;
      v7 = v27;
      goto LABEL_4;
    }
LABEL_66:
    __break(1u);
LABEL_67:
    a1[3] = 0;
LABEL_68:
    lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
    swift_allocError();
    swift_willThrow();
    return swift_release();
  }
  __break(1u);
LABEL_81:
  __break(1u);
LABEL_82:
  __break(1u);
LABEL_83:
  __break(1u);
LABEL_84:
  __break(1u);
LABEL_85:
  __break(1u);
LABEL_86:
  __break(1u);
LABEL_87:
  __break(1u);
LABEL_88:
  __break(1u);
  __break(1u);
  v47 = specialized _ArrayBuffer._consumeAndCreateNew()((_QWORD *)v3);
  v48 = v47[2];
  if (v48)
    goto LABEL_79;
  __break(1u);
  v47 = (_QWORD *)a1[5];
  if (!v47[2])
  {
    __break(1u);
LABEL_91:
    v47 = specialized _ArrayBuffer._consumeAndCreateNew()(v47);
    v48 = v47[2];
    if (v48)
      goto LABEL_79;
LABEL_76:
    __break(1u);
    v47 = (_QWORD *)a1[5];
    if (v47[2])
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
      {
        v48 = v47[2];
        if (v48)
          goto LABEL_79;
        goto LABEL_95;
      }
    }
    else
    {
      __break(1u);
    }
    v47 = specialized _ArrayBuffer._consumeAndCreateNew()(v47);
    v48 = v47[2];
    if (v48)
      goto LABEL_79;
LABEL_95:
    __break(1u);
    JUMPOUT(0x234DE4E08);
  }
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    goto LABEL_91;
  v48 = v47[2];
  if (!v48)
    goto LABEL_76;
LABEL_79:
  v49 = v48 - 1;
  v50 = v47[v49 + 4];
  v47[2] = v49;
  result = swift_release();
  a1[5] = v47;
  a1[2] = v50;
  return result;
}

{
  uint64_t v2;
  unint64_t v3;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  double v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  double v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t result;
  unint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  double v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  _QWORD *v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  double v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;

  v5 = a1[1];
  v6 = a1[2];
  if (v5 >= v6)
    goto LABEL_67;
  v7 = 0;
  v8 = 0.0;
  v9 = 0;
  v10 = 1;
  v11 = 0;
  v12 = 0;
  v13 = 0.0;
  v14 = 0;
  v15 = 0;
  v16 = 1;
  v17 = 0;
  while (1)
  {
    result = a1[3];
    if (result)
    {
      v21 = a1[4];
      if (v5 < v21)
        goto LABEL_11;
      if (v21 < v5)
        goto LABEL_68;
      a1[3] = 0;
    }
    result = ProtobufDecoder.decodeVarint()();
    if (v2)
      return swift_release();
    if (result < 8)
      goto LABEL_68;
LABEL_11:
    v22 = result >> 3;
    if (result >> 3 != 1)
      break;
    if ((result & 7) != 2)
      goto LABEL_68;
    v32 = (_QWORD *)a1[5];
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v32 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v32[2] + 1, 1, v32);
    v3 = v32[2];
    v33 = v32[3];
    if (v3 >= v33 >> 1)
      v32 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v33 > 1), v3 + 1, 1, v32);
    v32[2] = v3 + 1;
    v32[v3 + 4] = v6;
    a1[5] = v32;
    v34 = ProtobufDecoder.decodeVarint()();
    if (v2)
      return swift_release();
    if (v34 < 0)
      goto LABEL_81;
    v35 = a1[1] + v34;
    if (v6 < v35)
      goto LABEL_68;
    a1[2] = v35;
    v36 = specialized _ScaleEffect.init(from:)(a1);
    v40 = (_QWORD *)a1[5];
    if (!v40[2])
      goto LABEL_84;
    v13 = v36;
    v14 = v37;
    v15 = v38;
    v17 = v39;
    result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) != 0)
    {
      v41 = v40[2];
      if (!v41)
        goto LABEL_87;
    }
    else
    {
      result = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v40);
      v40 = (_QWORD *)result;
      v41 = *(_QWORD *)(result + 16);
      if (!v41)
        goto LABEL_87;
    }
    v16 = 0;
LABEL_3:
    v18 = v41 - 1;
    v19 = v40[v18 + 4];
    v40[2] = v18;
    a1[5] = v40;
    a1[2] = v19;
LABEL_4:
    v5 = a1[1];
    v6 = a1[2];
    if (v5 >= v6)
    {
      a1[3] = 0;
      if (((v16 | v10) & 1) == 0 && v7)
      {
        *a2 = v13;
        *((_QWORD *)a2 + 1) = v14;
        *((_QWORD *)a2 + 2) = v15;
        *((_QWORD *)a2 + 3) = v17;
        a2[4] = v8;
        *((_QWORD *)a2 + 5) = v9;
        *((_QWORD *)a2 + 6) = v11;
        *((_QWORD *)a2 + 7) = v12;
        *((_QWORD *)a2 + 8) = v7;
        return result;
      }
      goto LABEL_68;
    }
  }
  if (v22 == 2)
  {
    if ((result & 7) != 2)
      goto LABEL_68;
    v42 = (_QWORD *)a1[5];
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v42 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v42[2] + 1, 1, v42);
    v3 = v42[2];
    v43 = v42[3];
    if (v3 >= v43 >> 1)
      v42 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v43 > 1), v3 + 1, 1, v42);
    v42[2] = v3 + 1;
    v42[v3 + 4] = v6;
    a1[5] = v42;
    v44 = ProtobufDecoder.decodeVarint()();
    if (v2)
      return swift_release();
    if (v44 < 0)
      goto LABEL_82;
    v45 = a1[1] + v44;
    if (v6 < v45)
      goto LABEL_68;
    a1[2] = v45;
    v46 = specialized _ScaleEffect.init(from:)(a1);
    v40 = (_QWORD *)a1[5];
    if (!v40[2])
      goto LABEL_85;
    v8 = v46;
    v9 = v47;
    v11 = v48;
    v12 = v49;
    result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) != 0)
    {
      v41 = v40[2];
      if (!v41)
        goto LABEL_86;
    }
    else
    {
      result = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v40);
      v40 = (_QWORD *)result;
      v41 = *(_QWORD *)(result + 16);
      if (!v41)
        goto LABEL_86;
    }
    v10 = 0;
    goto LABEL_3;
  }
  if (v22 != 3)
  {
    switch(result & 7)
    {
      case 0uLL:
        result = ProtobufDecoder.decodeVarint()();
        if (v2)
          return swift_release();
        goto LABEL_4;
      case 1uLL:
        v50 = a1[1] + 8;
        if (v6 < v50)
          goto LABEL_68;
        goto LABEL_60;
      case 2uLL:
        result = ProtobufDecoder.decodeVarint()();
        if (v2)
          return swift_release();
        if ((result & 0x8000000000000000) != 0)
          goto LABEL_88;
        v50 = a1[1] + result;
        if (v6 < v50)
          goto LABEL_68;
LABEL_60:
        a1[1] = v50;
        break;
      case 5uLL:
        v50 = a1[1] + 4;
        if (v6 >= v50)
          goto LABEL_60;
        goto LABEL_68;
      default:
        goto LABEL_68;
    }
    goto LABEL_4;
  }
  if ((result & 7) != 2)
    goto LABEL_68;
  v23 = (_QWORD *)a1[5];
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v23 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v23[2] + 1, 1, v23);
  v3 = v23[2];
  v24 = v23[3];
  if (v3 >= v24 >> 1)
    v23 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v24 > 1), v3 + 1, 1, v23);
  v23[2] = v3 + 1;
  v23[v3 + 4] = v6;
  a1[5] = v23;
  v25 = ProtobufDecoder.decodeVarint()();
  if (v2)
    return swift_release();
  if ((v25 & 0x8000000000000000) == 0)
  {
    v26 = a1[1] + v25;
    if (v6 < v26)
      goto LABEL_68;
    a1[2] = v26;
    v27 = specialized CodableAnimation.init(from:)(a1);
    v28 = (_QWORD *)a1[5];
    if (!v28[2])
      goto LABEL_83;
    v29 = v27;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
    {
      v30 = v28[2];
      if (!v30)
        goto LABEL_66;
      goto LABEL_25;
    }
    v28 = specialized _ArrayBuffer._consumeAndCreateNew()(v28);
    v30 = v28[2];
    if (v30)
    {
LABEL_25:
      v31 = v30 - 1;
      v3 = v28[v31 + 4];
      v28[2] = v31;
      result = swift_release();
      a1[5] = v28;
      a1[2] = v3;
      v7 = v29;
      goto LABEL_4;
    }
LABEL_66:
    __break(1u);
LABEL_67:
    a1[3] = 0;
LABEL_68:
    lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
    swift_allocError();
    swift_willThrow();
    return swift_release();
  }
  __break(1u);
LABEL_81:
  __break(1u);
LABEL_82:
  __break(1u);
LABEL_83:
  __break(1u);
LABEL_84:
  __break(1u);
LABEL_85:
  __break(1u);
LABEL_86:
  __break(1u);
LABEL_87:
  __break(1u);
LABEL_88:
  __break(1u);
  __break(1u);
  v51 = specialized _ArrayBuffer._consumeAndCreateNew()((_QWORD *)v3);
  v52 = v51[2];
  if (v52)
    goto LABEL_79;
  __break(1u);
  v51 = (_QWORD *)a1[5];
  if (!v51[2])
  {
    __break(1u);
LABEL_91:
    v51 = specialized _ArrayBuffer._consumeAndCreateNew()(v51);
    v52 = v51[2];
    if (v52)
      goto LABEL_79;
LABEL_76:
    __break(1u);
    v51 = (_QWORD *)a1[5];
    if (v51[2])
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
      {
        v52 = v51[2];
        if (v52)
          goto LABEL_79;
        goto LABEL_95;
      }
    }
    else
    {
      __break(1u);
    }
    v51 = specialized _ArrayBuffer._consumeAndCreateNew()(v51);
    v52 = v51[2];
    if (v52)
      goto LABEL_79;
LABEL_95:
    __break(1u);
    JUMPOUT(0x234DE545CLL);
  }
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    goto LABEL_91;
  v52 = v51[2];
  if (!v52)
    goto LABEL_76;
LABEL_79:
  v53 = v52 - 1;
  v54 = v51[v53 + 4];
  v51[2] = v53;
  result = swift_release();
  a1[5] = v51;
  a1[2] = v54;
  return result;
}

{
  uint64_t v2;
  unint64_t v3;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  int v8;
  double v9;
  uint64_t v10;
  double v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t result;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  double v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  _QWORD *v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  double v40;
  uint64_t v41;
  unint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;

  v5 = a1[1];
  v6 = a1[2];
  if (v5 >= v6)
    goto LABEL_67;
  v7 = 0;
  v8 = 1;
  v9 = 0.0;
  v10 = 0;
  v11 = 0.0;
  v12 = 0;
  v13 = 1;
  while (1)
  {
    result = a1[3];
    if (result)
    {
      v17 = a1[4];
      if (v5 < v17)
        goto LABEL_11;
      if (v17 < v5)
        goto LABEL_68;
      a1[3] = 0;
    }
    result = ProtobufDecoder.decodeVarint()();
    if (v2)
      return swift_release();
    if (result < 8)
      goto LABEL_68;
LABEL_11:
    v18 = result >> 3;
    if (result >> 3 != 1)
      break;
    if ((result & 7) != 2)
      goto LABEL_68;
    v28 = (_QWORD *)a1[5];
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v28 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v28[2] + 1, 1, v28);
    v3 = v28[2];
    v29 = v28[3];
    if (v3 >= v29 >> 1)
      v28 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v29 > 1), v3 + 1, 1, v28);
    v28[2] = v3 + 1;
    v28[v3 + 4] = v6;
    a1[5] = v28;
    v30 = ProtobufDecoder.decodeVarint()();
    if (v2)
      return swift_release();
    if (v30 < 0)
      goto LABEL_81;
    v31 = a1[1] + v30;
    if (v6 < v31)
      goto LABEL_68;
    a1[2] = v31;
    v32 = specialized _OffsetEffect.init(from:)(a1);
    v34 = (_QWORD *)a1[5];
    if (!v34[2])
      goto LABEL_84;
    v11 = v32;
    v12 = v33;
    result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) != 0)
    {
      v35 = v34[2];
      if (!v35)
        goto LABEL_87;
    }
    else
    {
      result = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v34);
      v34 = (_QWORD *)result;
      v35 = *(_QWORD *)(result + 16);
      if (!v35)
        goto LABEL_87;
    }
    v13 = 0;
LABEL_3:
    v14 = v35 - 1;
    v15 = v34[v14 + 4];
    v34[2] = v14;
    a1[5] = v34;
    a1[2] = v15;
LABEL_4:
    v5 = a1[1];
    v6 = a1[2];
    if (v5 >= v6)
    {
      a1[3] = 0;
      if (((v13 | v8) & 1) == 0 && v7)
      {
        *a2 = v11;
        *((_QWORD *)a2 + 1) = v12;
        a2[2] = v9;
        *((_QWORD *)a2 + 3) = v10;
        *((_QWORD *)a2 + 4) = v7;
        return result;
      }
      goto LABEL_68;
    }
  }
  if (v18 == 2)
  {
    if ((result & 7) != 2)
      goto LABEL_68;
    v36 = (_QWORD *)a1[5];
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v36 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v36[2] + 1, 1, v36);
    v3 = v36[2];
    v37 = v36[3];
    if (v3 >= v37 >> 1)
      v36 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v37 > 1), v3 + 1, 1, v36);
    v36[2] = v3 + 1;
    v36[v3 + 4] = v6;
    a1[5] = v36;
    v38 = ProtobufDecoder.decodeVarint()();
    if (v2)
      return swift_release();
    if (v38 < 0)
      goto LABEL_82;
    v39 = a1[1] + v38;
    if (v6 < v39)
      goto LABEL_68;
    a1[2] = v39;
    v40 = specialized _OffsetEffect.init(from:)(a1);
    v34 = (_QWORD *)a1[5];
    if (!v34[2])
      goto LABEL_85;
    v9 = v40;
    v10 = v41;
    result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) != 0)
    {
      v35 = v34[2];
      if (!v35)
        goto LABEL_86;
    }
    else
    {
      result = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v34);
      v34 = (_QWORD *)result;
      v35 = *(_QWORD *)(result + 16);
      if (!v35)
        goto LABEL_86;
    }
    v8 = 0;
    goto LABEL_3;
  }
  if (v18 != 3)
  {
    switch(result & 7)
    {
      case 0uLL:
        result = ProtobufDecoder.decodeVarint()();
        if (v2)
          return swift_release();
        goto LABEL_4;
      case 1uLL:
        v42 = a1[1] + 8;
        if (v6 < v42)
          goto LABEL_68;
        goto LABEL_60;
      case 2uLL:
        result = ProtobufDecoder.decodeVarint()();
        if (v2)
          return swift_release();
        if ((result & 0x8000000000000000) != 0)
          goto LABEL_88;
        v42 = a1[1] + result;
        if (v6 < v42)
          goto LABEL_68;
LABEL_60:
        a1[1] = v42;
        break;
      case 5uLL:
        v42 = a1[1] + 4;
        if (v6 >= v42)
          goto LABEL_60;
        goto LABEL_68;
      default:
        goto LABEL_68;
    }
    goto LABEL_4;
  }
  if ((result & 7) != 2)
    goto LABEL_68;
  v19 = (_QWORD *)a1[5];
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v19 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v19[2] + 1, 1, v19);
  v3 = v19[2];
  v20 = v19[3];
  if (v3 >= v20 >> 1)
    v19 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v20 > 1), v3 + 1, 1, v19);
  v19[2] = v3 + 1;
  v19[v3 + 4] = v6;
  a1[5] = v19;
  v21 = ProtobufDecoder.decodeVarint()();
  if (v2)
    return swift_release();
  if ((v21 & 0x8000000000000000) == 0)
  {
    v22 = a1[1] + v21;
    if (v6 < v22)
      goto LABEL_68;
    a1[2] = v22;
    v23 = specialized CodableAnimation.init(from:)(a1);
    v24 = (_QWORD *)a1[5];
    if (!v24[2])
      goto LABEL_83;
    v25 = v23;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
    {
      v26 = v24[2];
      if (!v26)
        goto LABEL_66;
      goto LABEL_25;
    }
    v24 = specialized _ArrayBuffer._consumeAndCreateNew()(v24);
    v26 = v24[2];
    if (v26)
    {
LABEL_25:
      v27 = v26 - 1;
      v3 = v24[v27 + 4];
      v24[2] = v27;
      result = swift_release();
      a1[5] = v24;
      a1[2] = v3;
      v7 = v25;
      goto LABEL_4;
    }
LABEL_66:
    __break(1u);
LABEL_67:
    a1[3] = 0;
LABEL_68:
    lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
    swift_allocError();
    swift_willThrow();
    return swift_release();
  }
  __break(1u);
LABEL_81:
  __break(1u);
LABEL_82:
  __break(1u);
LABEL_83:
  __break(1u);
LABEL_84:
  __break(1u);
LABEL_85:
  __break(1u);
LABEL_86:
  __break(1u);
LABEL_87:
  __break(1u);
LABEL_88:
  __break(1u);
  __break(1u);
  v43 = specialized _ArrayBuffer._consumeAndCreateNew()((_QWORD *)v3);
  v44 = v43[2];
  if (v44)
    goto LABEL_79;
  __break(1u);
  v43 = (_QWORD *)a1[5];
  if (!v43[2])
  {
    __break(1u);
LABEL_91:
    v43 = specialized _ArrayBuffer._consumeAndCreateNew()(v43);
    v44 = v43[2];
    if (v44)
      goto LABEL_79;
LABEL_76:
    __break(1u);
    v43 = (_QWORD *)a1[5];
    if (v43[2])
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
      {
        v44 = v43[2];
        if (v44)
          goto LABEL_79;
        goto LABEL_95;
      }
    }
    else
    {
      __break(1u);
    }
    v43 = specialized _ArrayBuffer._consumeAndCreateNew()(v43);
    v44 = v43[2];
    if (v44)
      goto LABEL_79;
LABEL_95:
    __break(1u);
    JUMPOUT(0x234DF2314);
  }
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    goto LABEL_91;
  v44 = v43[2];
  if (!v44)
    goto LABEL_76;
LABEL_79:
  v45 = v44 - 1;
  v46 = v43[v45 + 4];
  v43[2] = v45;
  result = swift_release();
  a1[5] = v43;
  a1[2] = v46;
  return result;
}

uint64_t DisplayList.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  int64_t v10;
  uint64_t v11;
  _QWORD *v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  _BYTE *v16;
  unint64_t v17;
  uint64_t v18;

  result = *v1;
  v5 = *(_QWORD *)(*v1 + 16);
  if (v5)
  {
    result = swift_bridgeObjectRetain();
    v6 = result + 100;
    while (1)
    {
      v7 = *(_QWORD *)(v6 - 28);
      v8 = *(_QWORD *)(v6 - 20);
      v9 = a1[1];
      v10 = a1[2];
      v18 = v7;
      if (v9 >= v10)
      {
        v15 = v9 + 1;
        if (__OFADD__(v9, 1))
          goto LABEL_21;
        if (v10 < v15)
        {
          outlined copy of DisplayList.Item.Value(v18, v8);
          v16 = (_BYTE *)ProtobufEncoder.growBufferSlow(to:)(v15);
        }
        else
        {
          a1[1] = v15;
          v16 = (_BYTE *)(*a1 + v9);
          outlined copy of DisplayList.Item.Value(v18, v8);
        }
        *v16 = 10;
      }
      else
      {
        *(_BYTE *)(*a1 + v9) = 10;
        a1[1] = v9 + 1;
        outlined copy of DisplayList.Item.Value(v7, v8);
      }
      v11 = a1[1];
      v12 = (_QWORD *)a1[3];
      result = swift_isUniquelyReferenced_nonNull_native();
      v17 = v8;
      if ((result & 1) == 0)
      {
        result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v12[2] + 1, 1, v12);
        v12 = (_QWORD *)result;
      }
      v14 = v12[2];
      v13 = v12[3];
      if (v14 >= v13 >> 1)
      {
        result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v13 > 1), v14 + 1, 1, v12);
        v12 = (_QWORD *)result;
      }
      v12[2] = v14 + 1;
      v12[v14 + 4] = v11;
      a1[3] = v12;
      if (__OFADD__(v11, 1))
        break;
      a1[1] = v11 + 1;
      DisplayList.Item.encode(to:)();
      if (v2)
      {
        swift_bridgeObjectRelease();
        return outlined consume of DisplayList.Item.Value(v18, v17);
      }
      v6 += 72;
      ProtobufEncoder.endLengthDelimited()();
      result = outlined consume of DisplayList.Item.Value(v18, v17);
      if (!--v5)
        return swift_bridgeObjectRelease();
    }
    __break(1u);
LABEL_21:
    __break(1u);
  }
  return result;
}

uint64_t DisplayList.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  unint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  uint64_t result;
  __int16 v8;
  char v9;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  int v30;
  char isUniquelyReferenced_nonNull_native;
  _QWORD *v32;
  unint64_t v33;
  _QWORD *v34;
  unint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unsigned __int16 v54;
  unsigned __int8 v55;
  int v56;
  uint64_t v57;

  v4 = a1[1];
  v5 = a1[2];
  v6 = (_QWORD *)MEMORY[0x24BEE4AF8];
  if (v4 >= v5)
  {
LABEL_2:
    a1[3] = 0;
    result = (uint64_t)DisplayList.init(_:)(v6, (uint64_t)&v46);
    v8 = v47;
    v9 = BYTE2(v47);
    *(_QWORD *)a2 = v46;
    *(_WORD *)(a2 + 8) = v8;
    *(_BYTE *)(a2 + 10) = v9;
    return result;
  }
  while (1)
  {
    v10 = a1[3];
    if (v10)
    {
      v11 = a1[4];
      if (v4 < v11)
        goto LABEL_11;
      if (v11 < v4)
        goto LABEL_38;
      a1[3] = 0;
    }
    v10 = ProtobufDecoder.decodeVarint()();
    if (v2)
      return swift_bridgeObjectRelease();
    if (v10 < 8)
    {
LABEL_38:
      lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
      swift_allocError();
      swift_willThrow();
      return swift_bridgeObjectRelease();
    }
LABEL_11:
    if ((v10 & 0xFFFFFFFFFFFFFFF8) != 8)
    {
      switch(v10 & 7)
      {
        case 0uLL:
          ProtobufDecoder.decodeVarint()();
          if (!v2)
            goto LABEL_4;
          return swift_bridgeObjectRelease();
        case 1uLL:
          v38 = a1[1] + 8;
          goto LABEL_34;
        case 2uLL:
          v39 = ProtobufDecoder.decodeVarint()();
          if (v2)
            return swift_bridgeObjectRelease();
          if (v39 < 0)
            goto LABEL_44;
          v38 = a1[1] + v39;
LABEL_34:
          if (v5 < v38)
            goto LABEL_38;
          a1[1] = v38;
          break;
        case 5uLL:
          v38 = a1[1] + 4;
          goto LABEL_34;
        default:
          goto LABEL_38;
      }
      goto LABEL_4;
    }
    if ((v10 & 7) != 2)
      goto LABEL_38;
    v12 = (_QWORD *)a1[5];
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v12[2] + 1, 1, v12);
    v14 = v12[2];
    v13 = v12[3];
    if (v14 >= v13 >> 1)
      v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v13 > 1), v14 + 1, 1, v12);
    v12[2] = v14 + 1;
    v12[v14 + 4] = v5;
    a1[5] = v12;
    v15 = ProtobufDecoder.decodeVarint()();
    if (v2)
      return swift_bridgeObjectRelease();
    if (v15 < 0)
      break;
    v16 = a1[1] + v15;
    if (v5 < v16)
      goto LABEL_38;
    a1[2] = v16;
    DisplayList.Item.init(from:)((unint64_t)a1, (uint64_t)&v46);
    v17 = (_QWORD *)a1[5];
    if (!v17[2])
      goto LABEL_42;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
    {
      v18 = v17[2];
      if (!v18)
        goto LABEL_43;
    }
    else
    {
      v17 = specialized _ArrayBuffer._consumeAndCreateNew()(v17);
      v18 = v17[2];
      if (!v18)
        goto LABEL_43;
    }
    v19 = v18 - 1;
    v20 = v17[v19 + 4];
    v17[2] = v19;
    a1[5] = v17;
    a1[2] = v20;
    v21 = v46;
    v22 = v47;
    v23 = v48;
    v24 = v49;
    v25 = v50;
    v26 = v51;
    v28 = v52;
    v27 = v53;
    v45 = v55;
    v29 = v54;
    v30 = v56;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v57 = v27;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v6[2] + 1, 1, v6);
    v32 = v6;
    v33 = v6[2];
    v34 = v32;
    v35 = v32[3];
    if (v33 >= v35 >> 1)
      v34 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v35 > 1), v33 + 1, 1, v34);
    v34[2] = v33 + 1;
    v36 = &v34[9 * v33];
    v6 = v34;
    v36[4] = v21;
    v36[5] = v22;
    v36[6] = v23;
    v36[7] = v24;
    v36[8] = v25;
    v36[9] = v26;
    v37 = v57;
    v36[10] = v28;
    v36[11] = v37;
    *((_BYTE *)v36 + 98) = (v29 | (v45 << 16)) >> 16;
    *((_WORD *)v36 + 48) = v29;
    *((_DWORD *)v36 + 25) = v30;
LABEL_4:
    v4 = a1[1];
    v5 = a1[2];
    if (v4 >= v5)
      goto LABEL_2;
  }
  __break(1u);
LABEL_42:
  __break(1u);
LABEL_43:
  __break(1u);
LABEL_44:
  __break(1u);
  __break(1u);
  v42 = specialized _ArrayBuffer._consumeAndCreateNew()(v6);
  v43 = v42[2];
  if (!v43)
  {
    __break(1u);
    JUMPOUT(0x234DE5AC0);
  }
  v40 = v43 - 1;
  v41 = v42[v40 + 4];
  v42[2] = v40;
  result = swift_bridgeObjectRelease();
  a1[5] = v42;
  a1[2] = v41;
  return result;
}

uint64_t protocol witness for ProtobufEncodableMessage.encode(to:) in conformance DisplayList(_QWORD *a1)
{
  return DisplayList.encode(to:)(a1);
}

uint64_t protocol witness for ProtobufDecodableMessage.init(from:) in conformance DisplayList@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return DisplayList.init(from:)(a1, a2);
}

void DisplayList.Item.encode(to:)()
{
  __asm { BR              X10 }
}

void sub_234DE5B74()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  double v4;
  double v5;
  double v6;
  double v7;
  uint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  unint64_t v11;
  Swift::UInt v12;

  outlined copy of DisplayList.Content.Value(v3);
  ProtobufEncoder.encodeVarint(_:)(0xAuLL);
  v8 = *(_QWORD *)(v1 + 8);
  v9 = *(_QWORD **)(v1 + 24);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v9[2] + 1, 1, v9);
  v11 = v9[2];
  v10 = v9[3];
  if (v11 >= v10 >> 1)
    v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v10 > 1), v11 + 1, 1, v9);
  v9[2] = v11 + 1;
  v9[v11 + 4] = v8;
  *(_QWORD *)(v1 + 24) = v9;
  if (__OFADD__(v8, 1))
  {
    __break(1u);
    JUMPOUT(0x234DE5E8CLL);
  }
  *(_QWORD *)(v1 + 8) = v8 + 1;
  outlined copy of DisplayList.Content.Value(v3);
  specialized ProtobufEncoder.messageField<A>(_:_:)(1, v3);
  outlined consume of DisplayList.Item.Value(v3, v2);
  if (v0)
  {
    outlined consume of DisplayList.Item.Value(v3, v2);
  }
  else
  {
    if ((_WORD)v2)
    {
      ProtobufEncoder.encodeVarint(_:)(0x10uLL);
      ProtobufEncoder.encodeVarint(_:)((unsigned __int16)v2);
    }
    ProtobufEncoder.endLengthDelimited()();
    outlined consume of DisplayList.Item.Value(v3, v2);
    ProtobufEncoder.encodeVarint(_:)(0x1AuLL);
    specialized ProtobufEncoder.encodeMessage<A>(_:)(v4, v5, v6, v7);
    if ((_DWORD)v12)
    {
      ProtobufEncoder.encodeVarint(_:)(0x20uLL);
      ProtobufEncoder.encodeVarint(_:)(v12);
    }
  }
}

uint64_t closure #3 in DisplayList.Item.encode(to:)(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v7;
  unsigned __int8 *i;
  int64_t v9;
  int64_t v10;
  int64_t v11;
  _QWORD *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  unint64_t v17;
  unint64_t v18;
  int64_t v19;
  _BYTE *v20;
  int v21;
  int v22;

  v4 = v2;
  v5 = *(_QWORD *)(a2 + 16);
  if (v5)
  {
    v7 = (_QWORD *)result;
    result = swift_bridgeObjectRetain();
    for (i = (unsigned __int8 *)(a2 + 66); ; i += 40)
    {
      v9 = v7[1];
      v10 = v7[2];
      v22 = *((unsigned __int16 *)i - 1);
      v21 = *i;
      if (v9 >= v10)
      {
        v19 = v9 + 1;
        if (__OFADD__(v9, 1))
          goto LABEL_28;
        if (v10 < v19)
        {
          swift_bridgeObjectRetain();
          v20 = (_BYTE *)ProtobufEncoder.growBufferSlow(to:)(v19);
        }
        else
        {
          v7[1] = v19;
          v20 = (_BYTE *)(*v7 + v9);
          swift_bridgeObjectRetain();
        }
        *v20 = 10;
        v11 = v7[1];
      }
      else
      {
        *(_BYTE *)(*v7 + v9) = 10;
        v11 = v9 + 1;
        v7[1] = v9 + 1;
        swift_bridgeObjectRetain();
      }
      v12 = (_QWORD *)v7[3];
      result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0)
      {
        result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v12[2] + 1, 1, v12);
        v12 = (_QWORD *)result;
      }
      v14 = v12[2];
      v13 = v12[3];
      if (v14 >= v13 >> 1)
      {
        result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v13 > 1), v14 + 1, 1, v12);
        v12 = (_QWORD *)result;
      }
      v12[2] = v14 + 1;
      v12[v14 + 4] = v11;
      v7[3] = v12;
      if (__OFADD__(v11, 1))
        break;
      v7[1] = v11 + 1;
      ProtobufEncoder.encodeVarint(_:)(0xAuLL);
      v15 = v7[1];
      v16 = (_QWORD *)v7[3];
      result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0)
      {
        result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v16[2] + 1, 1, v16);
        v16 = (_QWORD *)result;
      }
      v18 = v16[2];
      v17 = v16[3];
      if (v18 >= v17 >> 1)
      {
        result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v17 > 1), v18 + 1, 1, v16);
        v16 = (_QWORD *)result;
      }
      v16[2] = v18 + 1;
      v16[v18 + 4] = v15;
      v7[3] = v16;
      if (__OFADD__(v15, 1))
        goto LABEL_27;
      v7[1] = v15 + 1;
      StrongHash.encode(to:)(v7);
      ProtobufEncoder.endLengthDelimited()();
      v3 = v3 & 0xFF000000 | v22 | (v21 << 16);
      specialized ProtobufEncoder.messageField<A>(_:_:)(2);
      if (v4)
      {
        swift_bridgeObjectRelease();
        return swift_bridgeObjectRelease();
      }
      ProtobufEncoder.endLengthDelimited()();
      result = swift_bridgeObjectRelease();
      if (!--v5)
        return swift_bridgeObjectRelease();
    }
    __break(1u);
LABEL_27:
    __break(1u);
LABEL_28:
    __break(1u);
  }
  return result;
}

unint64_t DisplayList.Item.init(from:)@<X0>(unint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  _QWORD *v3;
  unint64_t v5;
  unint64_t v6;
  int v7;
  int v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  int v15;
  unint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  _QWORD *v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  _QWORD *v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  __int128 v49;
  __int128 v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  __int128 v55;
  __int128 v56;
  uint64_t v57;

  v3 = (_QWORD *)result;
  v57 = *MEMORY[0x24BDAC8D0];
  v48 = ++static DisplayList.Version.lastValue;
  v5 = *(_QWORD *)(result + 8);
  v6 = *(_QWORD *)(result + 16);
  if (v5 >= v6)
  {
    v7 = 0;
    v52 = 0;
    v53 = 0;
    v8 = 0;
    v49 = 0u;
    v50 = 0u;
    v51 = 0xC000000000000000;
LABEL_4:
    v3[3] = 0;
    *(_OWORD *)a2 = v50;
    *(_OWORD *)(a2 + 16) = v49;
    *(_QWORD *)(a2 + 32) = v48;
    *(_QWORD *)(a2 + 40) = v52;
    *(_QWORD *)(a2 + 48) = v51;
    *(_QWORD *)(a2 + 56) = v53;
    *(_WORD *)(a2 + 64) = v7;
    *(_BYTE *)(a2 + 66) = BYTE2(v7);
    *(_DWORD *)(a2 + 68) = v8;
    return result;
  }
  v7 = 0;
  v52 = 0;
  v53 = 0;
  v8 = 0;
  v51 = 0xC000000000000000;
  v49 = 0u;
  v50 = 0u;
  while (2)
  {
    result = v3[3];
    if (result)
    {
      v16 = v3[4];
      if (v5 < v16)
        goto LABEL_14;
      if (v16 < v5)
        goto LABEL_88;
      v3[3] = 0;
    }
    result = ProtobufDecoder.decodeVarint()();
    if (v2)
      return outlined consume of DisplayList.Item.Value(v52, v51);
    if (result <= 7)
      goto LABEL_88;
LABEL_14:
    switch(result >> 3)
    {
      case 1uLL:
        if ((result & 7) != 2)
          goto LABEL_88;
        v17 = (_QWORD *)v3[5];
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v17 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v17[2] + 1, 1, v17);
        v19 = v17[2];
        v18 = v17[3];
        if (v19 >= v18 >> 1)
          v17 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v18 > 1), v19 + 1, 1, v17);
        v17[2] = v19 + 1;
        v17[v19 + 4] = v6;
        v3[5] = v17;
        v20 = ProtobufDecoder.decodeVarint()();
        if (v2)
          return outlined consume of DisplayList.Item.Value(v52, v51);
        if ((v20 & 0x8000000000000000) == 0)
        {
          v21 = v3[1] + v20;
          if (v6 < v21)
            goto LABEL_88;
          v3[2] = v21;
          closure #1 in DisplayList.Item.init(from:)((uint64_t)v3, (uint64_t)&v55);
          v9 = (_QWORD *)v3[5];
          if (!v9[2])
            goto LABEL_104;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
          {
            v10 = v9[2];
            if (!v10)
              goto LABEL_108;
          }
          else
          {
            v9 = specialized _ArrayBuffer._consumeAndCreateNew()(v9);
            v10 = v9[2];
            if (!v10)
              goto LABEL_108;
          }
LABEL_6:
          v11 = v10 - 1;
          v12 = v9[v11 + 4];
          v9[2] = v11;
          v3[5] = v9;
          v3[2] = v12;
          v13 = v55;
          v14 = v56;
          v15 = WORD4(v56) | (BYTE10(v56) << 16);
          result = outlined consume of DisplayList.Item.Value(v52, v51);
          v7 = v15;
          v52 = v13;
          v53 = v14;
          v51 = *((_QWORD *)&v13 + 1);
LABEL_7:
          v5 = v3[1];
          v6 = v3[2];
          if (v5 >= v6)
            goto LABEL_4;
          continue;
        }
        __break(1u);
LABEL_101:
        __break(1u);
LABEL_102:
        __break(1u);
LABEL_103:
        __break(1u);
LABEL_104:
        __break(1u);
LABEL_105:
        __break(1u);
LABEL_106:
        __break(1u);
LABEL_107:
        __break(1u);
LABEL_108:
        __break(1u);
LABEL_109:
        __break(1u);
LABEL_110:
        __break(1u);
LABEL_111:
        __break(1u);
LABEL_112:
        __break(1u);
        __break(1u);
        v44 = specialized _ArrayBuffer._consumeAndCreateNew()((_QWORD *)a2);
        v45 = v44[2];
        if (v45)
          goto LABEL_99;
        __break(1u);
        v44 = (_QWORD *)v3[5];
        if (!v44[2])
        {
          __break(1u);
LABEL_115:
          v44 = specialized _ArrayBuffer._consumeAndCreateNew()(v44);
          v45 = v44[2];
          if (v45)
            goto LABEL_99;
LABEL_93:
          __break(1u);
          v44 = (_QWORD *)v3[5];
          if (v44[2])
          {
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
            {
              v45 = v44[2];
              if (v45)
                goto LABEL_99;
              goto LABEL_96;
            }
          }
          else
          {
            __break(1u);
          }
          v44 = specialized _ArrayBuffer._consumeAndCreateNew()(v44);
          v45 = v44[2];
          if (v45)
            goto LABEL_99;
LABEL_96:
          __break(1u);
          v44 = (_QWORD *)v3[5];
          if (v44[2])
          {
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
            {
              v45 = v44[2];
              if (v45)
                goto LABEL_99;
              goto LABEL_122;
            }
          }
          else
          {
            __break(1u);
          }
          v44 = specialized _ArrayBuffer._consumeAndCreateNew()(v44);
          v45 = v44[2];
          if (v45)
            goto LABEL_99;
LABEL_122:
          __break(1u);
        }
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          goto LABEL_115;
        v45 = v44[2];
        if (!v45)
          goto LABEL_93;
LABEL_99:
        v46 = v45 - 1;
        v47 = v44[v46 + 4];
        v44[2] = v46;
        v3[5] = v44;
        v3[2] = v47;
        return outlined consume of DisplayList.Item.Value(v52, v51);
      case 2uLL:
        if ((result & 7) != 2)
          goto LABEL_88;
        v22 = (_QWORD *)v3[5];
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v22 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v22[2] + 1, 1, v22);
        v24 = v22[2];
        v23 = v22[3];
        if (v24 >= v23 >> 1)
          v22 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v23 > 1), v24 + 1, 1, v22);
        v22[2] = v24 + 1;
        v22[v24 + 4] = v6;
        v3[5] = v22;
        v25 = ProtobufDecoder.decodeVarint()();
        if (v2)
          return outlined consume of DisplayList.Item.Value(v52, v51);
        if (v25 < 0)
          goto LABEL_101;
        v26 = v3[1] + v25;
        if (v6 < v26)
          goto LABEL_88;
        v3[2] = v26;
        closure #2 in DisplayList.Item.init(from:)((unint64_t)v3, (uint64_t)&v55);
        v9 = (_QWORD *)v3[5];
        if (!v9[2])
          goto LABEL_105;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
        {
          v10 = v9[2];
          if (!v10)
            goto LABEL_109;
        }
        else
        {
          v9 = specialized _ArrayBuffer._consumeAndCreateNew()(v9);
          v10 = v9[2];
          if (!v10)
            goto LABEL_109;
        }
        goto LABEL_6;
      case 3uLL:
        if ((result & 7) != 2)
          goto LABEL_88;
        v27 = (_QWORD *)v3[5];
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v27 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v27[2] + 1, 1, v27);
        v29 = v27[2];
        v28 = v27[3];
        if (v29 >= v28 >> 1)
          v27 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v28 > 1), v29 + 1, 1, v27);
        v27[2] = v29 + 1;
        v27[v29 + 4] = v6;
        v3[5] = v27;
        v30 = ProtobufDecoder.decodeVarint()();
        if (v2)
          return outlined consume of DisplayList.Item.Value(v52, v51);
        if (v30 < 0)
          goto LABEL_102;
        v31 = v3[1] + v30;
        if (v6 < v31)
          goto LABEL_88;
        v3[2] = v31;
        v55 = 0u;
        v56 = 0u;
        closure #1 in CGRect.init(from:)((unint64_t)&v55, v3, &v54);
        v32 = (_QWORD *)v3[5];
        if (!v32[2])
          goto LABEL_106;
        v49 = v56;
        v50 = v55;
        result = swift_isUniquelyReferenced_nonNull_native();
        if ((result & 1) != 0)
        {
          v33 = v32[2];
          if (!v33)
            goto LABEL_110;
        }
        else
        {
          result = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v32);
          v32 = (_QWORD *)result;
          v33 = *(_QWORD *)(result + 16);
          if (!v33)
            goto LABEL_110;
        }
        v34 = v33 - 1;
        v35 = v32[v34 + 4];
        v32[2] = v34;
        v3[5] = v32;
        v3[2] = v35;
        goto LABEL_7;
      case 4uLL:
        if ((result & 7) == 0)
          goto LABEL_60;
        if ((result & 7) != 2)
          goto LABEL_88;
        v36 = ProtobufDecoder.decodeVarint()();
        if (v2)
          return outlined consume of DisplayList.Item.Value(v52, v51);
        if (v36 < 0)
          goto LABEL_111;
        v37 = v3[1] + v36;
        if (v6 < v37)
          goto LABEL_88;
        v3[3] = 32;
        v3[4] = v37;
LABEL_60:
        result = ProtobufDecoder.decodeVarint()();
        if (v2)
          return outlined consume of DisplayList.Item.Value(v52, v51);
        v8 = result;
        goto LABEL_7;
      case 5uLL:
        if ((result & 7) != 2)
          goto LABEL_88;
        v38 = (_QWORD *)v3[5];
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v38 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v38[2] + 1, 1, v38);
        v40 = v38[2];
        v39 = v38[3];
        if (v40 >= v39 >> 1)
          v38 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v39 > 1), v40 + 1, 1, v38);
        v38[2] = v40 + 1;
        v38[v40 + 4] = v6;
        v3[5] = v38;
        v41 = ProtobufDecoder.decodeVarint()();
        if (v2)
          return outlined consume of DisplayList.Item.Value(v52, v51);
        if (v41 < 0)
          goto LABEL_103;
        v42 = v3[1] + v41;
        if (v6 < v42)
          goto LABEL_88;
        v3[2] = v42;
        closure #3 in DisplayList.Item.init(from:)((unint64_t)v3, &v55);
        v9 = (_QWORD *)v3[5];
        if (!v9[2])
          goto LABEL_107;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
        {
          v10 = v9[2];
          if (!v10)
            goto LABEL_87;
        }
        else
        {
          v9 = specialized _ArrayBuffer._consumeAndCreateNew()(v9);
          v10 = v9[2];
          if (!v10)
          {
LABEL_87:
            __break(1u);
LABEL_88:
            lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
            swift_allocError();
            swift_willThrow();
            return outlined consume of DisplayList.Item.Value(v52, v51);
          }
        }
        goto LABEL_6;
      default:
        switch(result & 7)
        {
          case 0uLL:
            result = ProtobufDecoder.decodeVarint()();
            if (v2)
              return outlined consume of DisplayList.Item.Value(v52, v51);
            goto LABEL_7;
          case 1uLL:
            v43 = v3[1] + 8;
            if (v6 < v43)
              goto LABEL_88;
            goto LABEL_81;
          case 2uLL:
            result = ProtobufDecoder.decodeVarint()();
            if (v2)
              return outlined consume of DisplayList.Item.Value(v52, v51);
            if ((result & 0x8000000000000000) != 0)
              goto LABEL_112;
            v43 = v3[1] + result;
            if (v6 < v43)
              goto LABEL_88;
LABEL_81:
            v3[1] = v43;
            break;
          case 5uLL:
            v43 = v3[1] + 4;
            if (v6 >= v43)
              goto LABEL_81;
            goto LABEL_88;
          default:
            goto LABEL_88;
        }
        goto LABEL_7;
    }
  }
}

unint64_t closure #1 in DisplayList.Item.init(from:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  unint64_t result;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unsigned __int16 v9;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  unint64_t v28;

  result = swift_allocObject();
  v6 = result | 0x1000000000000000;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = 0;
  v7 = *(_QWORD *)(a1 + 8);
  v8 = *(_QWORD *)(a1 + 16);
  if (v7 >= v8)
  {
    v9 = 0;
LABEL_4:
    *(_QWORD *)(a1 + 24) = 0;
    *(_QWORD *)a2 = v6;
    *(_QWORD *)(a2 + 8) = v9;
    *(_QWORD *)(a2 + 16) = 0;
    *(_BYTE *)(a2 + 26) = 0;
    *(_WORD *)(a2 + 24) = 0;
    return result;
  }
  v9 = 0;
  while (1)
  {
    result = *(_QWORD *)(a1 + 24);
    if (result)
    {
      v11 = *(_QWORD *)(a1 + 32);
      if (v7 < v11)
        goto LABEL_14;
      if (v11 < v7)
        goto LABEL_47;
      *(_QWORD *)(a1 + 24) = 0;
    }
    result = ProtobufDecoder.decodeVarint()();
    if (v2)
      return outlined consume of DisplayList.Content.Value(v6);
    if (result <= 7)
      goto LABEL_47;
LABEL_14:
    if (result >> 3 == 2)
    {
      if ((result & 7) != 0)
      {
        if ((result & 7) != 2)
          goto LABEL_47;
        v22 = ProtobufDecoder.decodeVarint()();
        if (v2)
          return outlined consume of DisplayList.Content.Value(v6);
        if (v22 < 0)
          goto LABEL_52;
        v23 = *(_QWORD *)(a1 + 8) + v22;
        if (v8 < v23)
          goto LABEL_47;
        *(_QWORD *)(a1 + 24) = 16;
        *(_QWORD *)(a1 + 32) = v23;
      }
      result = ProtobufDecoder.decodeVarint()();
      if (v2)
        return outlined consume of DisplayList.Content.Value(v6);
      v9 = result;
      goto LABEL_7;
    }
    if (result >> 3 != 1)
    {
      switch(result & 7)
      {
        case 0uLL:
          result = ProtobufDecoder.decodeVarint()();
          if (v2)
            return outlined consume of DisplayList.Content.Value(v6);
          goto LABEL_7;
        case 1uLL:
          v10 = *(_QWORD *)(a1 + 8) + 8;
          if (v8 < v10)
            goto LABEL_47;
          goto LABEL_6;
        case 2uLL:
          result = ProtobufDecoder.decodeVarint()();
          if (v2)
            return outlined consume of DisplayList.Content.Value(v6);
          if ((result & 0x8000000000000000) != 0)
            goto LABEL_53;
          v10 = *(_QWORD *)(a1 + 8) + result;
          if (v8 < v10)
            goto LABEL_47;
LABEL_6:
          *(_QWORD *)(a1 + 8) = v10;
          break;
        case 5uLL:
          v10 = *(_QWORD *)(a1 + 8) + 4;
          if (v8 < v10)
            goto LABEL_47;
          goto LABEL_6;
        default:
          goto LABEL_47;
      }
      goto LABEL_7;
    }
    if ((result & 7) != 2)
      goto LABEL_47;
    v12 = *(_QWORD **)(a1 + 40);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v12[2] + 1, 1, v12);
    v14 = v12[2];
    v13 = v12[3];
    if (v14 >= v13 >> 1)
      v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v13 > 1), v14 + 1, 1, v12);
    v12[2] = v14 + 1;
    v12[v14 + 4] = v8;
    *(_QWORD *)(a1 + 40) = v12;
    v15 = ProtobufDecoder.decodeVarint()();
    if (v2)
      return outlined consume of DisplayList.Content.Value(v6);
    if (v15 < 0)
      break;
    v16 = *(_QWORD *)(a1 + 8) + v15;
    if (v8 < v16)
      goto LABEL_47;
    *(_QWORD *)(a1 + 16) = v16;
    DisplayList.Content.Value.init(from:)((id *)a1, &v28);
    v17 = *(_QWORD **)(a1 + 40);
    if (!v17[2])
      goto LABEL_51;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
    {
      v18 = v17[2];
      if (!v18)
        goto LABEL_46;
    }
    else
    {
      v17 = specialized _ArrayBuffer._consumeAndCreateNew()(v17);
      v18 = v17[2];
      if (!v18)
      {
LABEL_46:
        __break(1u);
LABEL_47:
        lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
        swift_allocError();
        swift_willThrow();
        return outlined consume of DisplayList.Content.Value(v6);
      }
    }
    v19 = v18 - 1;
    v20 = v17[v19 + 4];
    v17[2] = v19;
    *(_QWORD *)(a1 + 40) = v17;
    *(_QWORD *)(a1 + 16) = v20;
    v21 = v28;
    result = outlined consume of DisplayList.Content.Value(v6);
    v6 = v21;
LABEL_7:
    v7 = *(_QWORD *)(a1 + 8);
    v8 = *(_QWORD *)(a1 + 16);
    if (v7 >= v8)
      goto LABEL_4;
  }
  __break(1u);
LABEL_51:
  __break(1u);
LABEL_52:
  __break(1u);
LABEL_53:
  __break(1u);
  __break(1u);
  v26 = specialized _ArrayBuffer._consumeAndCreateNew()((_QWORD *)a2);
  v27 = v26[2];
  if (!v27)
  {
    __break(1u);
    JUMPOUT(0x234DE6DB4);
  }
  v24 = v27 - 1;
  v25 = v26[v24 + 4];
  v26[2] = v24;
  *(_QWORD *)(a1 + 40) = v26;
  *(_QWORD *)(a1 + 16) = v25;
  return outlined consume of DisplayList.Content.Value(v6);
}

unint64_t closure #2 in DisplayList.Item.init(from:)@<X0>(unint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  __int16 v9;
  char v10;
  _QWORD *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  _QWORD *v35;
  unsigned int v36;
  unsigned __int8 v37;
  unsigned int v38;
  int v39;

  v3 = v2;
  v4 = (_QWORD *)result;
  v6 = *(_QWORD *)(result + 8);
  v7 = *(_QWORD *)(result + 16);
  if (v6 >= v7)
  {
    v8 = 0;
    v38 = 0;
    v9 = 0;
    v10 = 0;
    v11 = (_QWORD *)MEMORY[0x24BEE4AF8];
    v39 = 19;
LABEL_4:
    v4[3] = 0;
    v12 = v38 | ((unint64_t)v39 << 32) | 0x4000000000000000;
    *(_QWORD *)a2 = v8;
    *(_QWORD *)(a2 + 8) = v12;
    *(_QWORD *)(a2 + 16) = v11;
    *(_BYTE *)(a2 + 26) = v10;
    *(_WORD *)(a2 + 24) = v9;
    return result;
  }
  v8 = 0;
  v38 = 0;
  v9 = 0;
  v10 = 0;
  v11 = (_QWORD *)MEMORY[0x24BEE4AF8];
  v39 = 19;
  while (1)
  {
    v14 = v4[3];
    if (v14)
    {
      v15 = v4[4];
      if (v6 < v15)
        goto LABEL_14;
      if (v15 < v6)
        goto LABEL_47;
      v4[3] = 0;
    }
    result = ProtobufDecoder.decodeVarint()();
    if (v3)
      goto LABEL_48;
    v14 = result;
    if (result < 8)
      goto LABEL_47;
LABEL_14:
    if (v14 >> 3 == 2)
      break;
    if (v14 >> 3 == 1)
    {
      if ((v14 & 7) != 2)
        goto LABEL_47;
      ProtobufDecoder.beginMessage()();
      if (v3)
        goto LABEL_48;
      DisplayList.Effect.init(from:)(v4, (uint64_t)&v35);
      v3 = 0;
      v16 = (_QWORD *)v4[5];
      if (!v16[2])
        goto LABEL_54;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
      {
        v17 = v16[2];
        if (!v17)
          goto LABEL_55;
      }
      else
      {
        v16 = specialized _ArrayBuffer._consumeAndCreateNew()(v16);
        v17 = v16[2];
        if (!v17)
          goto LABEL_55;
      }
      v18 = v17 - 1;
      v19 = v16[v18 + 4];
      v16[2] = v18;
      result = outlined consume of DisplayList.Effect(v8, v38, v39);
      v4[5] = v16;
      v4[2] = v19;
      v8 = (uint64_t)v35;
      v38 = v36;
      v39 = v37;
    }
    else
    {
      switch(v14 & 7)
      {
        case 0uLL:
          result = ProtobufDecoder.decodeVarint()();
          if (v3)
            goto LABEL_48;
          break;
        case 1uLL:
          v13 = v4[1] + 8;
          if (v7 < v13)
            goto LABEL_47;
          goto LABEL_6;
        case 2uLL:
          result = ProtobufDecoder.decodeVarint()();
          if (v3)
            goto LABEL_48;
          if ((result & 0x8000000000000000) != 0)
            goto LABEL_57;
          v13 = v4[1] + result;
          if (v7 < v13)
            goto LABEL_47;
LABEL_6:
          v4[1] = v13;
          break;
        case 5uLL:
          v13 = v4[1] + 4;
          if (v7 < v13)
            goto LABEL_47;
          goto LABEL_6;
        default:
          goto LABEL_47;
      }
    }
LABEL_7:
    v6 = v4[1];
    v7 = v4[2];
    if (v6 >= v7)
      goto LABEL_4;
  }
  swift_bridgeObjectRelease();
  if ((v14 & 7) != 2)
    goto LABEL_50;
  v11 = (_QWORD *)v4[5];
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v11[2] + 1, 1, v11);
  v21 = v11[2];
  v20 = v11[3];
  if (v21 >= v20 >> 1)
    v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v20 > 1), v21 + 1, 1, v11);
  v11[2] = v21 + 1;
  v11[v21 + 4] = v7;
  v4[5] = v11;
  v22 = ProtobufDecoder.decodeVarint()();
  if (v3)
    return outlined consume of DisplayList.Effect(v8, v38, v39);
  if ((v22 & 0x8000000000000000) == 0)
  {
    v23 = v4[1] + v22;
    if (v7 < v23)
    {
LABEL_50:
      lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
      swift_allocError();
      swift_willThrow();
    }
    else
    {
      v4[2] = v23;
      DisplayList.init(from:)(&v35, v4);
      v11 = (_QWORD *)v4[5];
      if (!v11[2])
        goto LABEL_56;
      result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) != 0)
      {
        v24 = v11[2];
        if (!v24)
          goto LABEL_46;
        goto LABEL_33;
      }
      result = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v11);
      v11 = (_QWORD *)result;
      v24 = *(_QWORD *)(result + 16);
      if (v24)
      {
LABEL_33:
        v25 = v24 - 1;
        v26 = v11[v25 + 4];
        v11[2] = v25;
        v4[5] = v11;
        v4[2] = v26;
        v11 = v35;
        v9 = v36;
        v10 = BYTE2(v36);
        goto LABEL_7;
      }
LABEL_46:
      __break(1u);
LABEL_47:
      lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
      swift_allocError();
      swift_willThrow();
LABEL_48:
      swift_bridgeObjectRelease();
    }
    return outlined consume of DisplayList.Effect(v8, v38, v39);
  }
  __break(1u);
LABEL_54:
  __break(1u);
LABEL_55:
  __break(1u);
LABEL_56:
  __break(1u);
LABEL_57:
  __break(1u);
  __break(1u);
  v31 = specialized _ArrayBuffer._consumeAndCreateNew()((_QWORD *)a2);
  v32 = v31[2];
  if (v32)
  {
    v27 = v32 - 1;
    v28 = v31[v27 + 4];
    v31[2] = v27;
    swift_bridgeObjectRelease();
    result = outlined consume of DisplayList.Effect(v8, v38, v39);
    v4[5] = v31;
    v4[2] = v28;
  }
  else
  {
    __break(1u);
    __break(1u);
    v33 = specialized _ArrayBuffer._consumeAndCreateNew()(v11);
    v34 = v33[2];
    if (!v34)
    {
      __break(1u);
      JUMPOUT(0x234DE7290);
    }
    v29 = v34 - 1;
    v30 = v33[v29 + 4];
    v33[2] = v29;
    result = outlined consume of DisplayList.Effect(v8, v38, v39);
    v4[5] = v33;
    v4[2] = v30;
  }
  return result;
}

unint64_t closure #3 in DisplayList.Item.init(from:)@<X0>(unint64_t result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD *v4;
  unint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  __int16 v20;
  char v21;
  unint64_t v22;
  _QWORD *v23;
  unint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  int v32;
  uint64_t v33;
  __int16 v34;
  char v35;
  _QWORD *v36;

  v36 = a2;
  v4 = (_QWORD *)result;
  v5 = *(_QWORD *)(result + 8);
  v6 = *(_QWORD *)(result + 16);
  v7 = (_QWORD *)MEMORY[0x24BEE4AF8];
  while (1)
  {
    if (v5 >= v6)
    {
      v4[3] = 0;
      v25 = v36;
      *v36 = v7;
      *(_OWORD *)(v25 + 1) = xmmword_235260F00;
      *((_BYTE *)v25 + 26) = 0;
      *((_WORD *)v25 + 12) = 0;
      return result;
    }
    result = v4[3];
    if (result)
    {
      v8 = v4[4];
      if (v5 < v8)
        goto LABEL_11;
      if (v8 < v5)
        goto LABEL_39;
      v4[3] = 0;
    }
    result = ProtobufDecoder.decodeVarint()();
    if (v2)
      return swift_bridgeObjectRelease();
    if (result < 8)
    {
LABEL_39:
      lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
      swift_allocError();
      swift_willThrow();
      return swift_bridgeObjectRelease();
    }
LABEL_11:
    if ((result & 0xFFFFFFFFFFFFFFF8) != 8)
    {
      switch(result & 7)
      {
        case 0uLL:
          result = ProtobufDecoder.decodeVarint()();
          if (!v2)
            goto LABEL_3;
          return swift_bridgeObjectRelease();
        case 1uLL:
          v24 = v4[1] + 8;
          goto LABEL_34;
        case 2uLL:
          result = ProtobufDecoder.decodeVarint()();
          if (v2)
            return swift_bridgeObjectRelease();
          if ((result & 0x8000000000000000) != 0)
            goto LABEL_45;
          v24 = v4[1] + result;
LABEL_34:
          if (v6 < v24)
            goto LABEL_39;
          v4[1] = v24;
          break;
        case 5uLL:
          v24 = v4[1] + 4;
          goto LABEL_34;
        default:
          goto LABEL_39;
      }
      goto LABEL_3;
    }
    if ((result & 7) != 2)
      goto LABEL_39;
    v9 = (_QWORD *)v4[5];
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v9[2] + 1, 1, v9);
    v11 = v9[2];
    v10 = v9[3];
    if (v11 >= v10 >> 1)
      v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v10 > 1), v11 + 1, 1, v9);
    v9[2] = v11 + 1;
    v9[v11 + 4] = v6;
    v4[5] = v9;
    v12 = ProtobufDecoder.decodeVarint()();
    if (v2)
      return swift_bridgeObjectRelease();
    if (v12 < 0)
      break;
    v13 = v4[1] + v12;
    if (v6 < v13)
      goto LABEL_39;
    v4[2] = v13;
    closure #1 in closure #3 in DisplayList.Item.init(from:)((unint64_t)v4, &v31);
    v14 = (_QWORD *)v4[5];
    if (!v14[2])
      goto LABEL_43;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
    {
      v15 = v14[2];
      if (!v15)
        goto LABEL_44;
    }
    else
    {
      v14 = specialized _ArrayBuffer._consumeAndCreateNew()(v14);
      v15 = v14[2];
      if (!v15)
        goto LABEL_44;
    }
    v16 = v15 - 1;
    v17 = v14[v16 + 4];
    v14[2] = v16;
    v4[5] = v14;
    v4[2] = v17;
    v30 = v31;
    v18 = v32;
    v19 = v33;
    v20 = v34;
    v21 = v35;
    result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      result = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v7[2] + 1, 1, v7);
      v7 = (_QWORD *)result;
    }
    v3 = v7[2];
    v22 = v7[3];
    if (v3 >= v22 >> 1)
    {
      result = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v22 > 1), v3 + 1, 1, v7);
      v7 = (_QWORD *)result;
    }
    v7[2] = v3 + 1;
    v23 = &v7[5 * v3];
    *((_OWORD *)v23 + 2) = v30;
    *((_DWORD *)v23 + 12) = v18;
    v23[7] = v19;
    *((_WORD *)v23 + 32) = v20;
    *((_BYTE *)v23 + 66) = v21;
LABEL_3:
    v5 = v4[1];
    v6 = v4[2];
  }
  __break(1u);
LABEL_43:
  __break(1u);
LABEL_44:
  __break(1u);
LABEL_45:
  __break(1u);
  __break(1u);
  v28 = specialized _ArrayBuffer._consumeAndCreateNew()((_QWORD *)v3);
  v29 = v28[2];
  if (!v29)
  {
    __break(1u);
    JUMPOUT(0x234DE7638);
  }
  v26 = v29 - 1;
  v27 = v28[v26 + 4];
  v28[2] = v26;
  result = swift_bridgeObjectRelease();
  v4[5] = v28;
  v4[2] = v27;
  return result;
}

unint64_t closure #1 in closure #3 in DisplayList.Item.init(from:)@<X0>(unint64_t result@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  _QWORD *v3;
  unint64_t v4;
  unint64_t v5;
  __int16 v6;
  char v7;
  int v8;
  unint64_t v9;
  _OWORD *v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  int v36;
  _OWORD *v37;

  v37 = a2;
  v3 = (_QWORD *)result;
  v4 = *(_QWORD *)(result + 8);
  v5 = *(_QWORD *)(result + 16);
  if (v4 >= v5)
  {
    v6 = 0;
    v7 = 0;
    v8 = 0;
    v34 = 0u;
    v9 = MEMORY[0x24BEE4AF8];
LABEL_4:
    v3[3] = 0;
    v10 = v37;
    *v37 = v34;
    *((_DWORD *)v10 + 4) = v8;
    *((_QWORD *)v10 + 3) = v9;
    *((_WORD *)v10 + 16) = v6;
    *((_BYTE *)v10 + 34) = v7;
    return result;
  }
  v6 = 0;
  v7 = 0;
  v8 = 0;
  v34 = 0u;
  v9 = MEMORY[0x24BEE4AF8];
  while (1)
  {
    v12 = v3[3];
    if (v12)
    {
      v13 = v3[4];
      if (v4 < v13)
        goto LABEL_14;
      if (v13 < v4)
        goto LABEL_53;
      v3[3] = 0;
    }
    result = ProtobufDecoder.decodeVarint()();
    if (v2)
      return swift_bridgeObjectRelease();
    v12 = result;
    if (result < 8)
      goto LABEL_53;
LABEL_14:
    if (v12 >> 3 != 2)
      break;
    swift_bridgeObjectRelease();
    if ((v12 & 7) != 2)
      goto LABEL_56;
    v9 = v3[5];
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v9 = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v9 + 16) + 1, 1, (_QWORD *)v9);
    v22 = *(_QWORD *)(v9 + 16);
    v21 = *(_QWORD *)(v9 + 24);
    v12 = v22 + 1;
    if (v22 >= v21 >> 1)
      v9 = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v21 > 1), v22 + 1, 1, (_QWORD *)v9);
    *(_QWORD *)(v9 + 16) = v12;
    *(_QWORD *)(v9 + 8 * v22 + 32) = v5;
    v3[5] = v9;
    result = ProtobufDecoder.decodeVarint()();
    if (v2)
      return result;
    if ((result & 0x8000000000000000) != 0)
      goto LABEL_61;
    v23 = v3[1] + result;
    if (v5 < v23)
    {
LABEL_56:
      lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
      swift_allocError();
      return swift_willThrow();
    }
    v3[2] = v23;
    DisplayList.init(from:)(&v35, v3);
    v9 = v3[5];
    if (!*(_QWORD *)(v9 + 16))
      goto LABEL_63;
    result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) != 0)
    {
      v24 = *(_QWORD *)(v9 + 16);
      if (!v24)
        goto LABEL_52;
    }
    else
    {
      result = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew()((_QWORD *)v9);
      v9 = result;
      v24 = *(_QWORD *)(result + 16);
      if (!v24)
      {
LABEL_52:
        __break(1u);
LABEL_53:
        lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
        swift_allocError();
        swift_willThrow();
        return swift_bridgeObjectRelease();
      }
    }
    v25 = v24 - 1;
    v26 = *(_QWORD *)(v9 + 8 * v25 + 32);
    *(_QWORD *)(v9 + 16) = v25;
    v3[5] = v9;
    v3[2] = v26;
    v9 = v35;
    v6 = WORD4(v35);
    v7 = BYTE10(v35);
LABEL_7:
    v4 = v3[1];
    v5 = v3[2];
    if (v4 >= v5)
      goto LABEL_4;
  }
  if (v12 >> 3 != 1)
  {
    switch(v12 & 7)
    {
      case 0uLL:
        result = ProtobufDecoder.decodeVarint()();
        if (v2)
          return swift_bridgeObjectRelease();
        goto LABEL_7;
      case 1uLL:
        v11 = v3[1] + 8;
        if (v5 < v11)
          goto LABEL_53;
        goto LABEL_6;
      case 2uLL:
        result = ProtobufDecoder.decodeVarint()();
        if (v2)
          return swift_bridgeObjectRelease();
        if ((result & 0x8000000000000000) != 0)
          goto LABEL_65;
        v11 = v3[1] + result;
        if (v5 < v11)
          goto LABEL_53;
LABEL_6:
        v3[1] = v11;
        break;
      case 5uLL:
        v11 = v3[1] + 4;
        if (v5 < v11)
          goto LABEL_53;
        goto LABEL_6;
      default:
        goto LABEL_53;
    }
    goto LABEL_7;
  }
  if ((v12 & 7) != 2)
    goto LABEL_53;
  v12 = v3[5];
  v14 = (_QWORD *)v9;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v12 = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v12 + 16) + 1, 1, (_QWORD *)v12);
  v9 = *(_QWORD *)(v12 + 16);
  v15 = *(_QWORD *)(v12 + 24);
  if (v9 >= v15 >> 1)
    v12 = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v15 > 1), v9 + 1, 1, (_QWORD *)v12);
  *(_QWORD *)(v12 + 16) = v9 + 1;
  *(_QWORD *)(v12 + 8 * v9 + 32) = v5;
  v3[5] = v12;
  v16 = ProtobufDecoder.decodeVarint()();
  if (v2)
    return swift_bridgeObjectRelease();
  if ((v16 & 0x8000000000000000) == 0)
  {
    v9 = (unint64_t)v14;
    v17 = v3[1] + v16;
    if (v5 < v17)
      goto LABEL_53;
    v3[2] = v17;
    StrongHash.init(from:)((unint64_t)v3, &v35);
    v12 = v3[5];
    if (!*(_QWORD *)(v12 + 16))
      goto LABEL_62;
    result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) != 0)
    {
      v18 = *(_QWORD *)(v12 + 16);
      if (!v18)
        goto LABEL_64;
    }
    else
    {
      result = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew()((_QWORD *)v12);
      v12 = result;
      v18 = *(_QWORD *)(result + 16);
      if (!v18)
        goto LABEL_64;
    }
    v19 = v18 - 1;
    v20 = *(_QWORD *)(v12 + 8 * v19 + 32);
    *(_QWORD *)(v12 + 16) = v19;
    v3[5] = v12;
    v3[2] = v20;
    v34 = v35;
    v8 = v36;
    goto LABEL_7;
  }
  __break(1u);
LABEL_61:
  __break(1u);
LABEL_62:
  __break(1u);
LABEL_63:
  __break(1u);
LABEL_64:
  __break(1u);
LABEL_65:
  __break(1u);
  __break(1u);
  v31 = specialized _ArrayBuffer._consumeAndCreateNew()((_QWORD *)v12);
  v32 = v31[2];
  if (v32)
  {
    v27 = v32 - 1;
    v28 = v31[v27 + 4];
    v31[2] = v27;
    result = swift_bridgeObjectRelease();
    v3[5] = v31;
    v3[2] = v28;
  }
  else
  {
    __break(1u);
    __break(1u);
    result = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew()((_QWORD *)v9);
    v33 = *(_QWORD *)(result + 16);
    if (!v33)
    {
      __break(1u);
      JUMPOUT(0x234DE7B68);
    }
    v29 = v33 - 1;
    v30 = *(_QWORD *)(result + 8 * v29 + 32);
    *(_QWORD *)(result + 16) = v29;
    v3[5] = result;
    v3[2] = v30;
  }
  return result;
}

void protocol witness for ProtobufEncodableMessage.encode(to:) in conformance DisplayList.Item()
{
  DisplayList.Item.encode(to:)();
}

unint64_t protocol witness for ProtobufDecodableMessage.init(from:) in conformance DisplayList.Item@<X0>(unint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return DisplayList.Item.init(from:)(a1, a2);
}

void DisplayList.Content.Value.encode(to:)()
{
  __asm { BR              X10 }
}

void sub_234DE7BF8()
{
  specialized ProtobufEncoder.messageField<A>(_:_:)(11);
}

void closure #1 in DisplayList.Content.Value.encode(to:)(_QWORD *a1, uint64_t a2, float a3, float a4, float a5, float a6)
{
  uint64_t v6;
  uint64_t v7;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  int64_t v32;
  int64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  int64_t v40;
  _BYTE *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  int v53;
  id v54;
  char v55;

  v7 = v6;
  if (a3 == 0.0 && a4 == 0.0 && (a5 == 0.0 ? (v14 = a6 == 1.0) : (v14 = 0), v14)
    || (ProtobufEncoder.encodeVarint(_:)(0xAuLL), specialized ProtobufEncoder.encodeMessage<A>(_:)(a3, a4, a5, a6), !v6))
  {
    v15 = *(_QWORD *)(a2 + 16);
    if (v15)
    {
      swift_bridgeObjectRetain();
      v16 = a2 + 80;
      while (1)
      {
        v17 = *(void **)(v16 - 48);
        v18 = *(_QWORD *)(v16 - 40);
        v19 = *(void **)(v16 - 32);
        v20 = *(_QWORD *)(v16 - 24);
        v21 = *(_QWORD *)(v16 - 16);
        v22 = *(_QWORD *)(v16 - 8);
        v24 = *(_QWORD *)v16;
        v23 = *(_QWORD *)(v16 + 8);
        v26 = *(_QWORD *)(v16 + 16);
        v25 = *(_QWORD *)(v16 + 24);
        v27 = *(_QWORD *)(v16 + 32);
        v28 = *(_QWORD *)(v16 + 40);
        v29 = *(_QWORD *)(v16 + 48);
        v30 = *(_QWORD *)(v16 + 56);
        v31 = *(_DWORD *)(v16 + 64);
        v32 = a1[1];
        v33 = a1[2];
        v55 = v20;
        v53 = v18;
        v54 = v19;
        v51 = v27;
        v52 = v17;
        v49 = v29;
        v50 = v28;
        v48 = v30;
        v47 = v31;
        v45 = v7;
        v46 = v21;
        v44 = v26;
        if (v32 >= v33)
        {
          v40 = v32 + 1;
          if (__OFADD__(v32, 1))
            goto LABEL_28;
          v42 = *(_QWORD *)(v16 + 24);
          if (v33 < v40)
          {
            outlined copy of GraphicsFilter(v17, v18, v19, v20, v46, v22, v24, v23, v26, v25, v27, v28, v29, v30, v31, SBYTE2(v31));
            v41 = (_BYTE *)ProtobufEncoder.growBufferSlow(to:)(v40);
          }
          else
          {
            a1[1] = v40;
            v41 = (_BYTE *)(*a1 + v32);
            outlined copy of GraphicsFilter(v17, v18, v19, v20, v46, v22, v24, v23, v26, v25, v27, v28, v29, v30, v31, SBYTE2(v31));
          }
          *v41 = 18;
          v34 = v42;
        }
        else
        {
          *(_BYTE *)(*a1 + v32) = 18;
          a1[1] = v32 + 1;
          v34 = v25;
          outlined copy of GraphicsFilter(v17, v18, v19, v20, v21, v22, v24, v23, v26, v25, v27, v28, v29, v30, v31, SBYTE2(v31));
        }
        v43 = v22;
        v35 = a1[1];
        v36 = (_QWORD *)a1[3];
        v37 = v34;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v36 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v36[2] + 1, 1, v36);
        v39 = v36[2];
        v38 = v36[3];
        if (v39 >= v38 >> 1)
          v36 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v38 > 1), v39 + 1, 1, v36);
        v36[2] = v39 + 1;
        v36[v39 + 4] = v35;
        a1[3] = v36;
        if (__OFADD__(v35, 1))
          break;
        a1[1] = v35 + 1;
        GraphicsFilter.encode(to:)();
        v7 = v45;
        if (v45)
        {
          swift_bridgeObjectRelease();
          outlined consume of GraphicsFilter(v52, v53, v54, v55, v46, v43, v24, v23, v44, v37, v51, v50, v49, v48, v47, SBYTE2(v47));
          return;
        }
        v16 += 120;
        ProtobufEncoder.endLengthDelimited()();
        outlined consume of GraphicsFilter(v52, v53, v54, v55, v46, v43, v24, v23, v44, v37, v51, v50, v49, v48, v47, SBYTE2(v47));
        if (!--v15)
        {
          swift_bridgeObjectRelease();
          return;
        }
      }
      __break(1u);
LABEL_28:
      __break(1u);
    }
  }
}

void closure #2 in DisplayList.Content.Value.encode(to:)(uint64_t a1, uint64_t a2, uint64_t a3, __int16 a4)
{
  uint64_t v4;
  uint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int v15;

  ProtobufEncoder.encodeVarint(_:)(0xAuLL);
  v8 = *(_QWORD *)(a1 + 8);
  v9 = *(_QWORD **)(a1 + 24);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v9[2] + 1, 1, v9);
  v11 = v9[2];
  v10 = v9[3];
  v12 = v11 + 1;
  if (v11 >= v10 >> 1)
    v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v10 > 1), v11 + 1, 1, v9);
  v9[2] = v12;
  v9[v11 + 4] = v8;
  *(_QWORD *)(a1 + 24) = v9;
  if (__OFADD__(v8, 1))
  {
    __break(1u);
LABEL_17:
    v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v9[2] + 1, 1, v9);
    goto LABEL_8;
  }
  *(_QWORD *)(a1 + 8) = v8 + 1;
  Path.encode(to:)();
  if (v4)
    return;
  ProtobufEncoder.endLengthDelimited()();
  swift_retain();
  ProtobufEncoder.encodeVarint(_:)(0x12uLL);
  v12 = *(_QWORD *)(a1 + 8);
  v9 = *(_QWORD **)(a1 + 24);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    goto LABEL_17;
LABEL_8:
  v14 = v9[2];
  v13 = v9[3];
  if (v14 >= v13 >> 1)
    v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v13 > 1), v14 + 1, 1, v9);
  v9[2] = v14 + 1;
  v9[v14 + 4] = v12;
  *(_QWORD *)(a1 + 24) = v9;
  if (__OFADD__(v12, 1))
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a1 + 8) = v12 + 1;
    (*(void (**)(uint64_t))(*(_QWORD *)a3 + 152))(a1);
    if (v4)
    {
      swift_release();
    }
    else
    {
      ProtobufEncoder.endLengthDelimited()();
      swift_release();
      v15 = a4 & 0x101;
      if (v15 != 256)
      {
        ProtobufEncoder.encodeVarint(_:)(0x1AuLL);
        specialized ProtobufEncoder.encodeMessage<A>(_:)(v15);
      }
    }
  }
}

uint64_t closure #5 in DisplayList.Content.Value.encode(to:)(uint64_t a1, double a2, double a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7, char a8)
{
  uint64_t v8;
  uint64_t result;
  uint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  unint64_t v24;
  _QWORD *v25;
  unint64_t v26;

  result = specialized ProtobufEncoder.messageField<A>(_:_:)(1);
  if (v8)
    return result;
  if (a2 == 0.0 && a3 == 0.0)
  {
LABEL_10:
    if (!a6 && (a7 & 1) != 0 && HIDWORD(a7) == 160 && a8 == 3)
      return result;
    ProtobufEncoder.encodeVarint(_:)(0x1AuLL);
    a7 = *(_QWORD *)(a1 + 8);
    v17 = *(_QWORD **)(a1 + 24);
    result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) != 0)
      goto LABEL_15;
    goto LABEL_21;
  }
  ProtobufEncoder.encodeVarint(_:)(0x12uLL);
  v16 = *(_QWORD *)(a1 + 8);
  v17 = *(_QWORD **)(a1 + 24);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v17 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v17[2] + 1, 1, v17);
  v18 = v17[2];
  v19 = v17[3];
  v20 = v18 + 1;
  if (v18 >= v19 >> 1)
  {
    v26 = v18 + 1;
    v23 = v17;
    v24 = v17[2];
    v25 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v19 > 1), v18 + 1, 1, v23);
    v18 = v24;
    v20 = v26;
    v17 = v25;
  }
  v17[2] = v20;
  v17[v18 + 4] = v16;
  *(_QWORD *)(a1 + 24) = v17;
  if (!__OFADD__(v16, 1))
  {
    *(_QWORD *)(a1 + 8) = v16 + 1;
    CGPoint.encode(to:)((double *)a1, a2, a3);
    result = ProtobufEncoder.endLengthDelimited()();
    goto LABEL_10;
  }
  __break(1u);
LABEL_21:
  result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v17[2] + 1, 1, v17);
  v17 = (_QWORD *)result;
LABEL_15:
  v22 = v17[2];
  v21 = v17[3];
  if (v22 >= v21 >> 1)
  {
    result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v21 > 1), v22 + 1, 1, v17);
    v17 = (_QWORD *)result;
  }
  v17[2] = v22 + 1;
  v17[v22 + 4] = a7;
  *(_QWORD *)(a1 + 24) = v17;
  if (__OFADD__(a7, 1))
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a1 + 8) = a7 + 1;
    RasterizationOptions.encode(to:)();
    return ProtobufEncoder.endLengthDelimited()();
  }
  return result;
}

uint64_t closure #6 in DisplayList.Content.Value.encode(to:)(uint64_t a1, double a2, double a3, uint64_t a4, char a5, uint64_t a6, char a7)
{
  uint64_t v7;
  uint64_t result;
  uint64_t v15;
  _QWORD *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  unint64_t v23;
  _QWORD *v24;
  unint64_t v25;

  swift_unknownObjectRetain();
  specialized ProtobufEncoder.messageField<A>(_:_:)(1);
  result = swift_unknownObjectRelease();
  if (v7)
    return result;
  if (a2 == 0.0 && a3 == 0.0)
  {
LABEL_10:
    if (!a5 && (a6 & 1) != 0 && HIDWORD(a6) == 160 && a7 == 3)
      return result;
    ProtobufEncoder.encodeVarint(_:)(0x1AuLL);
    a6 = *(_QWORD *)(a1 + 8);
    v16 = *(_QWORD **)(a1 + 24);
    result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) != 0)
      goto LABEL_15;
    goto LABEL_21;
  }
  ProtobufEncoder.encodeVarint(_:)(0x12uLL);
  v15 = *(_QWORD *)(a1 + 8);
  v16 = *(_QWORD **)(a1 + 24);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v16[2] + 1, 1, v16);
  v17 = v16[2];
  v18 = v16[3];
  v19 = v17 + 1;
  if (v17 >= v18 >> 1)
  {
    v25 = v17 + 1;
    v22 = v16;
    v23 = v16[2];
    v24 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v18 > 1), v17 + 1, 1, v22);
    v17 = v23;
    v19 = v25;
    v16 = v24;
  }
  v16[2] = v19;
  v16[v17 + 4] = v15;
  *(_QWORD *)(a1 + 24) = v16;
  if (!__OFADD__(v15, 1))
  {
    *(_QWORD *)(a1 + 8) = v15 + 1;
    CGPoint.encode(to:)((double *)a1, a2, a3);
    result = ProtobufEncoder.endLengthDelimited()();
    goto LABEL_10;
  }
  __break(1u);
LABEL_21:
  result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v16[2] + 1, 1, v16);
  v16 = (_QWORD *)result;
LABEL_15:
  v21 = v16[2];
  v20 = v16[3];
  if (v21 >= v20 >> 1)
  {
    result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v20 > 1), v21 + 1, 1, v16);
    v16 = (_QWORD *)result;
  }
  v16[2] = v21 + 1;
  v16[v21 + 4] = a6;
  *(_QWORD *)(a1 + 24) = v16;
  if (__OFADD__(a6, 1))
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a1 + 8) = a6 + 1;
    RasterizationOptions.encode(to:)();
    return ProtobufEncoder.endLengthDelimited()();
  }
  return result;
}

unint64_t DisplayList.Content.Value.init(from:)@<X0>(id *a1@<X0>, unint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t result;
  unint64_t v6;
  id v7;
  unint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  unint64_t v14;
  id v15;
  uint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  float v22;
  int v23;
  int v24;
  int v25;
  _QWORD *v26;
  float v27;
  int v28;
  int v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  _QWORD *v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  __int128 v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  Swift::UInt32 v50;
  _QWORD *v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  _QWORD *v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t v60;
  _QWORD *v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  uint64_t v68;
  void *v69;
  uint64_t v70;
  _QWORD *v71;
  unint64_t v72;
  unint64_t v73;
  uint64_t v74;
  unint64_t v75;
  _QWORD *v76;
  unint64_t v77;
  unint64_t v78;
  uint64_t v79;
  unint64_t v80;
  _QWORD *v81;
  uint64_t v82;
  uint64_t v83;
  void *v84;
  uint64_t v85;
  _QWORD *v86;
  unint64_t v87;
  unint64_t v88;
  uint64_t v89;
  unint64_t v90;
  _QWORD *v91;
  uint64_t v92;
  uint64_t v93;
  void *v94;
  uint64_t v95;
  uint64_t v96;
  _QWORD *v97;
  unint64_t v98;
  unint64_t v99;
  uint64_t v100;
  unint64_t v101;
  _QWORD *v102;
  uint64_t v103;
  uint64_t v104;
  void *v105;
  _QWORD *v106;
  unint64_t v107;
  unint64_t v108;
  uint64_t v109;
  unint64_t v110;
  uint64_t v111;
  uint64_t v112;
  unint64_t v113;
  uint64_t v114;
  _QWORD *v115;
  unint64_t *v116;
  unint64_t *v117;
  _QWORD *v118;
  _QWORD *v119;
  __int128 v120;
  __int128 v121;
  uint64_t v122;
  _BYTE v123[40];
  __int128 v124;
  __int128 v125;
  unint64_t *v126;

  v3 = v2;
  v126 = a2;
  result = swift_allocObject();
  v6 = result | 0x1000000000000000;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = 0;
  v7 = a1[1];
  v8 = (unint64_t)a1[2];
  if ((unint64_t)v7 >= v8)
  {
LABEL_188:
    a1[3] = 0;
    *v126 = v6;
    return result;
  }
  v9 = a1 + 5;
  while (2)
  {
    v14 = (unint64_t)a1[3];
    if (v14)
    {
      v15 = a1[4];
      if (v7 < v15)
        goto LABEL_12;
      if (v15 < v7)
        goto LABEL_189;
      a1[3] = 0;
    }
    result = ProtobufDecoder.decodeVarint()();
    if (v3)
      return outlined consume of DisplayList.Content.Value(v6);
    v14 = result;
    if (result < 8)
    {
LABEL_189:
      lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
      swift_allocError();
      swift_willThrow();
      return outlined consume of DisplayList.Content.Value(v6);
    }
LABEL_12:
    switch(v14 >> 3)
    {
      case 1uLL:
        v16 = swift_allocObject();
        if ((v14 & 7) != 2)
          goto LABEL_191;
        v17 = (_QWORD *)*v9;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v17 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v17[2] + 1, 1, v17);
        v19 = v17[2];
        v18 = v17[3];
        if (v19 >= v18 >> 1)
          v17 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v18 > 1), v19 + 1, 1, v17);
        v17[2] = v19 + 1;
        v17[v19 + 4] = v8;
        a1[5] = v17;
        v20 = ProtobufDecoder.decodeVarint()();
        if (v3)
          goto LABEL_196;
        if (v20 < 0)
        {
          __break(1u);
LABEL_203:
          __break(1u);
LABEL_204:
          __break(1u);
LABEL_205:
          __break(1u);
LABEL_206:
          __break(1u);
LABEL_207:
          __break(1u);
LABEL_208:
          __break(1u);
LABEL_209:
          __break(1u);
LABEL_210:
          __break(1u);
LABEL_211:
          __break(1u);
LABEL_212:
          __break(1u);
LABEL_213:
          __break(1u);
LABEL_214:
          __break(1u);
LABEL_215:
          __break(1u);
LABEL_216:
          __break(1u);
LABEL_217:
          __break(1u);
LABEL_218:
          __break(1u);
LABEL_219:
          __break(1u);
LABEL_220:
          __break(1u);
LABEL_221:
          __break(1u);
LABEL_222:
          __break(1u);
LABEL_223:
          __break(1u);
LABEL_224:
          __break(1u);
LABEL_225:
          __break(1u);
LABEL_226:
          __break(1u);
LABEL_227:
          __break(1u);
LABEL_228:
          __break(1u);
LABEL_229:
          __break(1u);
LABEL_230:
          __break(1u);
LABEL_231:
          __break(1u);
LABEL_232:
          __break(1u);
LABEL_233:
          __break(1u);
LABEL_234:
          __break(1u);
LABEL_235:
          __break(1u);
          __break(1u);
          __break(1u);
          __break(1u);
          __break(1u);
          JUMPOUT(0x234DEA7DCLL);
        }
        v21 = (unint64_t)a1[1] + v20;
        if (v8 < v21)
        {
LABEL_191:
          lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
          swift_allocError();
          swift_willThrow();
          goto LABEL_196;
        }
        a1[2] = (id)v21;
        v22 = specialized Color.Resolved.init(from:)(a1);
        v26 = (_QWORD *)*v9;
        if (!*(_QWORD *)(*v9 + 16))
          goto LABEL_215;
        v27 = v22;
        v28 = v23;
        v29 = v24;
        v30 = v25;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
        {
          v31 = v26[2];
          if (!v31)
            goto LABEL_226;
        }
        else
        {
          v26 = specialized _ArrayBuffer._consumeAndCreateNew()(v26);
          v31 = v26[2];
          if (!v31)
            goto LABEL_226;
        }
        v32 = v31 - 1;
        v33 = (void *)v26[v32 + 4];
        v26[2] = v32;
        a1[5] = v26;
        a1[2] = v33;
        *(float *)(v16 + 16) = v27;
        *(_DWORD *)(v16 + 20) = v28;
        *(_DWORD *)(v16 + 24) = v29;
        *(_DWORD *)(v16 + 28) = v30;
        result = outlined consume of DisplayList.Content.Value(v6);
        v6 = v16 | 0x1000000000000000;
        goto LABEL_5;
      case 2uLL:
        v34 = swift_allocObject();
        if ((v14 & 7) != 2)
          goto LABEL_193;
        v35 = (_QWORD *)*v9;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v35 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v35[2] + 1, 1, v35);
        v37 = v35[2];
        v36 = v35[3];
        if (v37 >= v36 >> 1)
          v35 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v36 > 1), v37 + 1, 1, v35);
        v35[2] = v37 + 1;
        v35[v37 + 4] = v8;
        a1[5] = v35;
        v38 = ProtobufDecoder.decodeVarint()();
        if (v3)
          goto LABEL_196;
        if (v38 < 0)
          goto LABEL_203;
        v39 = (unint64_t)a1[1] + v38;
        if (v8 < v39)
        {
LABEL_193:
          lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
          swift_allocError();
          swift_willThrow();
LABEL_196:
          outlined consume of DisplayList.Content.Value(v6);
          return swift_deallocUninitializedObject();
        }
        a1[2] = (id)v39;
        GraphicsImage.init(from:)(a1, v34 + 16);
        v40 = (_QWORD *)*v9;
        if (!*(_QWORD *)(*v9 + 16))
          goto LABEL_216;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
        {
          v41 = v40[2];
          if (!v41)
            goto LABEL_227;
        }
        else
        {
          v40 = specialized _ArrayBuffer._consumeAndCreateNew()(v40);
          v41 = v40[2];
          if (!v41)
            goto LABEL_227;
        }
        v42 = v41 - 1;
        v43 = (void *)v40[v42 + 4];
        v40[2] = v42;
        result = outlined consume of DisplayList.Content.Value(v6);
        a1[5] = v40;
        a1[2] = v43;
        v6 = v34 | 0x3000000000000000;
        goto LABEL_5;
      case 3uLL:
        if ((v14 & 7) != 2)
          goto LABEL_189;
        ProtobufDecoder.beginMessage()();
        if (v3)
          return outlined consume of DisplayList.Content.Value(v6);
        closure #2 in DisplayList.Content.Value.init(from:)(a1, (uint64_t *)&v124);
        v3 = 0;
        if (!*(_QWORD *)(*v9 + 16))
          goto LABEL_212;
        goto LABEL_157;
      case 4uLL:
        if ((v14 & 7) != 2)
          goto LABEL_189;
        ProtobufDecoder.beginMessage()();
        if (v3)
          return outlined consume of DisplayList.Content.Value(v6);
        closure #4 in DisplayList.Content.Value.init(from:)(a1, (double *)&v124);
        v3 = 0;
        if (!*(_QWORD *)(*v9 + 16))
          goto LABEL_213;
        v44 = specialized Array._customRemoveLast()();
        if (!v44)
          v44 = specialized Array.remove(at:)(*(_QWORD *)(*v9 + 16) - 1);
        a1[2] = (id)v44;
        v46 = v124;
        v45 = v125;
        v47 = *(void **)(v124 + 192);
        if (!v47 || (uint64_t)objc_msgSend(*(id *)(v124 + 192), sel_length) <= 0)
          goto LABEL_169;
        if (one-time initialization token for updateSchedule != -1)
          swift_once();
        v48 = static NSAttributedStringKey.updateSchedule;
        objc_msgSend(v47, sel_length);
        if (objc_msgSend(v47, sel_attribute_atIndex_effectiveRange_, v48, 0, 0))
        {
          _bridgeAnyObjectToAny(_:)();
          swift_unknownObjectRelease();
          outlined destroy of TypesettingConfiguration((uint64_t)&v124, (uint64_t (*)(_QWORD))type metadata accessor for Any?);
          v49 = swift_allocObject();
          v50 = ++lastIdentity;
          outlined consume of DisplayList.Content.Value(v6);
          *(_QWORD *)(v49 + 40) = &type metadata for DynamicTextViewFactory;
          *(_QWORD *)(v49 + 48) = &protocol witness table for DynamicTextViewFactory;
          result = swift_allocObject();
          *(_QWORD *)(v49 + 16) = result;
          *(_OWORD *)(result + 16) = v46;
          *(_QWORD *)(result + 32) = v45;
          v6 = v49 | 0xB000000000000000;
          *(_DWORD *)(result + 40) = v50;
        }
        else
        {
          v124 = 0u;
          v125 = 0u;
          outlined destroy of TypesettingConfiguration((uint64_t)&v124, (uint64_t (*)(_QWORD))type metadata accessor for Any?);
LABEL_169:
          v114 = swift_allocObject();
          *(_QWORD *)(v114 + 16) = v46;
          *(_QWORD *)(v114 + 24) = 0;
          *(_BYTE *)(v114 + 32) = 0;
          result = outlined consume of DisplayList.Content.Value(v6);
          *(_QWORD *)(v114 + 40) = *((_QWORD *)&v46 + 1);
          *(_QWORD *)(v114 + 48) = v45;
          v6 = v114 | 0x8000000000000000;
        }
        goto LABEL_5;
      case 5uLL:
        if ((v14 & 7) != 2)
          goto LABEL_189;
        v51 = (_QWORD *)*v9;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v51 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v51[2] + 1, 1, v51);
        v53 = v51[2];
        v52 = v51[3];
        if (v53 >= v52 >> 1)
          v51 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v52 > 1), v53 + 1, 1, v51);
        v51[2] = v53 + 1;
        v51[v53 + 4] = v8;
        a1[5] = v51;
        v54 = ProtobufDecoder.decodeVarint()();
        if (v3)
          return outlined consume of DisplayList.Content.Value(v6);
        if (v54 < 0)
          goto LABEL_204;
        v55 = (unint64_t)a1[1] + v54;
        if (v8 < v55)
          goto LABEL_189;
        a1[2] = (id)v55;
        closure #3 in DisplayList.Content.Value.init(from:)(a1, (uint64_t *)&v124);
        v10 = (_QWORD *)*v9;
        if (!*(_QWORD *)(*v9 + 16))
          goto LABEL_217;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
        {
          v11 = v10[2];
          if (!v11)
            goto LABEL_225;
        }
        else
        {
          v10 = specialized _ArrayBuffer._consumeAndCreateNew()(v10);
          v11 = v10[2];
          if (!v11)
            goto LABEL_225;
        }
        goto LABEL_4;
      case 6uLL:
        if ((v14 & 7) != 2)
          goto LABEL_189;
        v56 = (_QWORD *)*v9;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v56 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v56[2] + 1, 1, v56);
        v58 = v56[2];
        v57 = v56[3];
        if (v58 >= v57 >> 1)
          v56 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v57 > 1), v58 + 1, 1, v56);
        v56[2] = v58 + 1;
        v56[v58 + 4] = v8;
        a1[5] = v56;
        v59 = ProtobufDecoder.decodeVarint()();
        if (v3)
          return outlined consume of DisplayList.Content.Value(v6);
        if (v59 < 0)
          goto LABEL_205;
        v60 = (unint64_t)a1[1] + v59;
        if (v8 < v60)
          goto LABEL_189;
        a1[2] = (id)v60;
        closure #5 in DisplayList.Content.Value.init(from:)(a1, (unint64_t *)&v124);
        v10 = (_QWORD *)*v9;
        if (!*(_QWORD *)(*v9 + 16))
          goto LABEL_218;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
        {
          v11 = v10[2];
          if (!v11)
            goto LABEL_228;
        }
        else
        {
          v10 = specialized _ArrayBuffer._consumeAndCreateNew()(v10);
          v11 = v10[2];
          if (!v11)
            goto LABEL_228;
        }
        goto LABEL_4;
      case 7uLL:
        if ((v14 & 7) != 2)
          goto LABEL_189;
        v61 = (_QWORD *)*v9;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v61 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v61[2] + 1, 1, v61);
        v63 = v61[2];
        v62 = v61[3];
        if (v63 >= v62 >> 1)
          v61 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v62 > 1), v63 + 1, 1, v61);
        v61[2] = v63 + 1;
        v61[v63 + 4] = v8;
        a1[5] = v61;
        v64 = ProtobufDecoder.decodeVarint()();
        if (v3)
          return outlined consume of DisplayList.Content.Value(v6);
        if (v64 < 0)
          goto LABEL_206;
        v65 = (unint64_t)a1[1] + v64;
        if (v8 < v65)
          goto LABEL_189;
        a1[2] = (id)v65;
        CodableViewFactory.init(from:)((uint64_t)a1, (uint64_t)&v124);
        v66 = (_QWORD *)*v9;
        if (!*(_QWORD *)(*v9 + 16))
          goto LABEL_219;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
        {
          v67 = v66[2];
          if (!v67)
            goto LABEL_229;
        }
        else
        {
          v66 = specialized _ArrayBuffer._consumeAndCreateNew()(v66);
          v67 = v66[2];
          if (!v67)
            goto LABEL_229;
        }
        v68 = v67 - 1;
        v69 = (void *)v66[v68 + 4];
        v66[2] = v68;
        a1[5] = v66;
        a1[2] = v69;
        v70 = swift_allocObject();
        outlined init with copy of AnyTrackedValue((uint64_t)&v124, (uint64_t)v123);
        type metadata accessor for ScrollStateRequest(0, &lazy cache variable for type metadata for AnyViewFactory);
        type metadata accessor for ScrollStateRequest(0, &lazy cache variable for type metadata for _DisplayList_ViewFactory);
        if ((swift_dynamicCast() & 1) == 0)
        {
          lazy protocol witness table accessor for type CodableViewFactory.Error and conformance CodableViewFactory.Error();
          v120 = 0u;
          v121 = 0u;
          v122 = 0;
          swift_allocError();
          *v115 = 0;
          v115[1] = 0;
          swift_willThrow();
          v116 = (unint64_t *)&lazy cache variable for type metadata for _DisplayList_ViewFactory?;
          v117 = &lazy cache variable for type metadata for _DisplayList_ViewFactory;
          goto LABEL_200;
        }
        outlined init with take of ScrollStateRequest(&v120, v70 + 16);
        outlined destroy of CodableViewFactory((uint64_t)&v124);
        result = outlined consume of DisplayList.Content.Value(v6);
        v6 = v70 | 0xB000000000000000;
        goto LABEL_5;
      case 8uLL:
        if ((v14 & 7) != 2)
          goto LABEL_189;
        v71 = (_QWORD *)*v9;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v71 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v71[2] + 1, 1, v71);
        v73 = v71[2];
        v72 = v71[3];
        if (v73 >= v72 >> 1)
          v71 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v72 > 1), v73 + 1, 1, v71);
        v71[2] = v73 + 1;
        v71[v73 + 4] = v8;
        a1[5] = v71;
        v74 = ProtobufDecoder.decodeVarint()();
        if (v3)
          return outlined consume of DisplayList.Content.Value(v6);
        if (v74 < 0)
          goto LABEL_207;
        v75 = (unint64_t)a1[1] + v74;
        if (v8 < v75)
          goto LABEL_189;
        a1[2] = (id)v75;
        closure #7 in DisplayList.Content.Value.init(from:)((unint64_t)a1, (unint64_t *)&v124);
        v10 = (_QWORD *)*v9;
        if (!*(_QWORD *)(*v9 + 16))
          goto LABEL_220;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
        {
          v11 = v10[2];
          if (!v11)
            goto LABEL_230;
        }
        else
        {
          v10 = specialized _ArrayBuffer._consumeAndCreateNew()(v10);
          v11 = v10[2];
          if (!v11)
            goto LABEL_230;
        }
        goto LABEL_4;
      case 9uLL:
        if ((v14 & 7) != 2)
          goto LABEL_189;
        v76 = (_QWORD *)*v9;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v76 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v76[2] + 1, 1, v76);
        v78 = v76[2];
        v77 = v76[3];
        if (v78 >= v77 >> 1)
          v76 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v77 > 1), v78 + 1, 1, v76);
        v76[2] = v78 + 1;
        v76[v78 + 4] = v8;
        a1[5] = v76;
        v79 = ProtobufDecoder.decodeVarint()();
        if (v3)
          return outlined consume of DisplayList.Content.Value(v6);
        if (v79 < 0)
          goto LABEL_208;
        v80 = (unint64_t)a1[1] + v79;
        if (v8 < v80)
          goto LABEL_189;
        a1[2] = (id)v80;
        CodableViewFactory.init(from:)((uint64_t)a1, (uint64_t)&v124);
        v81 = (_QWORD *)*v9;
        if (!*(_QWORD *)(*v9 + 16))
          goto LABEL_221;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
        {
          v82 = v81[2];
          if (!v82)
            goto LABEL_231;
        }
        else
        {
          v81 = specialized _ArrayBuffer._consumeAndCreateNew()(v81);
          v82 = v81[2];
          if (!v82)
            goto LABEL_231;
        }
        v83 = v82 - 1;
        v84 = (void *)v81[v83 + 4];
        v81[2] = v83;
        a1[5] = v81;
        a1[2] = v84;
        v85 = swift_allocObject();
        outlined init with copy of AnyTrackedValue((uint64_t)&v124, (uint64_t)v123);
        type metadata accessor for ScrollStateRequest(0, &lazy cache variable for type metadata for AnyViewFactory);
        type metadata accessor for ScrollStateRequest(0, &lazy cache variable for type metadata for PlatformViewFactory);
        if ((swift_dynamicCast() & 1) == 0)
        {
          lazy protocol witness table accessor for type CodableViewFactory.Error and conformance CodableViewFactory.Error();
          v120 = 0u;
          v121 = 0u;
          v122 = 0;
          swift_allocError();
          *v118 = 0;
          v118[1] = 0;
          swift_willThrow();
          v116 = (unint64_t *)&lazy cache variable for type metadata for PlatformViewFactory?;
          v117 = &lazy cache variable for type metadata for PlatformViewFactory;
          goto LABEL_200;
        }
        outlined init with take of ScrollStateRequest(&v120, v85 + 16);
        outlined destroy of CodableViewFactory((uint64_t)&v124);
        result = outlined consume of DisplayList.Content.Value(v6);
        v6 = v85 | 0x6000000000000000;
        goto LABEL_5;
      case 0xAuLL:
        if ((v14 & 7) != 2)
          goto LABEL_189;
        v86 = (_QWORD *)*v9;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v86 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v86[2] + 1, 1, v86);
        v88 = v86[2];
        v87 = v86[3];
        if (v88 >= v87 >> 1)
          v86 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v87 > 1), v88 + 1, 1, v86);
        v86[2] = v88 + 1;
        v86[v88 + 4] = v8;
        a1[5] = v86;
        v89 = ProtobufDecoder.decodeVarint()();
        if (v3)
          return outlined consume of DisplayList.Content.Value(v6);
        if (v89 < 0)
          goto LABEL_209;
        v90 = (unint64_t)a1[1] + v89;
        if (v8 < v90)
          goto LABEL_189;
        a1[2] = (id)v90;
        CodableViewFactory.init(from:)((uint64_t)a1, (uint64_t)&v124);
        v91 = (_QWORD *)*v9;
        if (!*(_QWORD *)(*v9 + 16))
          goto LABEL_222;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
        {
          v92 = v91[2];
          if (!v92)
            goto LABEL_232;
        }
        else
        {
          v91 = specialized _ArrayBuffer._consumeAndCreateNew()(v91);
          v92 = v91[2];
          if (!v92)
            goto LABEL_232;
        }
        v93 = v92 - 1;
        v94 = (void *)v91[v93 + 4];
        v91[2] = v93;
        a1[5] = v91;
        a1[2] = v94;
        v95 = swift_allocObject();
        outlined init with copy of AnyTrackedValue((uint64_t)&v124, (uint64_t)v123);
        type metadata accessor for ScrollStateRequest(0, &lazy cache variable for type metadata for AnyViewFactory);
        type metadata accessor for ScrollStateRequest(0, &lazy cache variable for type metadata for PlatformLayerFactory);
        if ((swift_dynamicCast() & 1) != 0)
        {
          outlined init with take of ScrollStateRequest(&v120, v95 + 16);
          outlined destroy of CodableViewFactory((uint64_t)&v124);
          result = outlined consume of DisplayList.Content.Value(v6);
          v6 = v95 | 0x7000000000000000;
LABEL_5:
          v7 = a1[1];
          v8 = (unint64_t)a1[2];
          if ((unint64_t)v7 >= v8)
            goto LABEL_188;
          continue;
        }
        lazy protocol witness table accessor for type CodableViewFactory.Error and conformance CodableViewFactory.Error();
        v120 = 0u;
        v121 = 0u;
        v122 = 0;
        swift_allocError();
        *v119 = 0;
        v119[1] = 0;
        swift_willThrow();
        v116 = (unint64_t *)&lazy cache variable for type metadata for PlatformLayerFactory?;
        v117 = &lazy cache variable for type metadata for PlatformLayerFactory;
LABEL_200:
        outlined destroy of AnyTrackedValue?((uint64_t)&v120, v116, v117);
        outlined destroy of CodableViewFactory((uint64_t)&v124);
        outlined consume of DisplayList.Content.Value(v6);
        return swift_deallocUninitializedObject();
      case 0xBuLL:
        v96 = swift_allocObject();
        if ((v14 & 7) != 2)
          goto LABEL_195;
        v97 = (_QWORD *)*v9;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v97 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v97[2] + 1, 1, v97);
        v99 = v97[2];
        v98 = v97[3];
        if (v99 >= v98 >> 1)
          v97 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v98 > 1), v99 + 1, 1, v97);
        v97[2] = v99 + 1;
        v97[v99 + 4] = v8;
        a1[5] = v97;
        v100 = ProtobufDecoder.decodeVarint()();
        if (v3)
          goto LABEL_196;
        if (v100 < 0)
          goto LABEL_210;
        v101 = (unint64_t)a1[1] + v100;
        if (v8 < v101)
        {
LABEL_195:
          lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
          swift_allocError();
          swift_willThrow();
          goto LABEL_196;
        }
        a1[2] = (id)v101;
        BackdropEffect.init(from:)((unint64_t)a1, v96 + 16);
        v102 = (_QWORD *)*v9;
        if (!*(_QWORD *)(*v9 + 16))
          goto LABEL_223;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
        {
          v103 = v102[2];
          if (!v103)
            goto LABEL_233;
        }
        else
        {
          v102 = specialized _ArrayBuffer._consumeAndCreateNew()(v102);
          v103 = v102[2];
          if (!v103)
            goto LABEL_233;
        }
        v104 = v103 - 1;
        v105 = (void *)v102[v104 + 4];
        v102[2] = v104;
        result = outlined consume of DisplayList.Content.Value(v6);
        a1[5] = v102;
        a1[2] = v105;
        v6 = v96;
        goto LABEL_5;
      case 0xCuLL:
        if ((v14 & 7) != 2)
          goto LABEL_189;
        v106 = (_QWORD *)*v9;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v106 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v106[2] + 1, 1, v106);
        v108 = v106[2];
        v107 = v106[3];
        if (v108 >= v107 >> 1)
          v106 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v107 > 1), v108 + 1, 1, v106);
        v106[2] = v108 + 1;
        v106[v108 + 4] = v8;
        a1[5] = v106;
        v109 = ProtobufDecoder.decodeVarint()();
        if (v3)
          return outlined consume of DisplayList.Content.Value(v6);
        if (v109 < 0)
          goto LABEL_211;
        v110 = (unint64_t)a1[1] + v109;
        if (v8 < v110)
          goto LABEL_189;
        a1[2] = (id)v110;
        closure #1 in DisplayList.Content.Value.init(from:)(a1, (uint64_t *)&v124);
        v10 = (_QWORD *)*v9;
        if (!*(_QWORD *)(*v9 + 16))
          goto LABEL_224;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
        {
          v11 = v10[2];
          if (!v11)
            goto LABEL_234;
        }
        else
        {
          v10 = specialized _ArrayBuffer._consumeAndCreateNew()(v10);
          v11 = v10[2];
          if (!v11)
            goto LABEL_234;
        }
LABEL_4:
        v12 = v11 - 1;
        v13 = (void *)v10[v12 + 4];
        v10[2] = v12;
        result = outlined consume of DisplayList.Content.Value(v6);
        a1[5] = v10;
        a1[2] = v13;
        v6 = v124;
        goto LABEL_5;
      case 0xDuLL:
        if ((v14 & 7) != 2)
          goto LABEL_189;
        ProtobufDecoder.beginMessage()();
        if (v3)
          return outlined consume of DisplayList.Content.Value(v6);
        closure #6 in DisplayList.Content.Value.init(from:)(a1, (unint64_t *)&v124);
        v3 = 0;
        if (!*(_QWORD *)(*v9 + 16))
          goto LABEL_214;
LABEL_157:
        v111 = specialized Array._customRemoveLast()();
        if (!v111)
          v111 = specialized Array.remove(at:)(*(_QWORD *)(*v9 + 16) - 1);
        v112 = v111;
        result = outlined consume of DisplayList.Content.Value(v6);
        a1[2] = (id)v112;
        v6 = v124;
        goto LABEL_5;
      default:
        switch(v14 & 7)
        {
          case 0uLL:
            result = ProtobufDecoder.decodeVarint()();
            if (v3)
              return outlined consume of DisplayList.Content.Value(v6);
            goto LABEL_5;
          case 1uLL:
            v113 = (unint64_t)a1[1] + 8;
            if (v8 < v113)
              goto LABEL_189;
            goto LABEL_167;
          case 2uLL:
            result = ProtobufDecoder.decodeVarint()();
            if (v3)
              return outlined consume of DisplayList.Content.Value(v6);
            if ((result & 0x8000000000000000) != 0)
              goto LABEL_235;
            v113 = (unint64_t)a1[1] + result;
            if (v8 < v113)
              goto LABEL_189;
LABEL_167:
            a1[1] = (id)v113;
            break;
          case 5uLL:
            v113 = (unint64_t)a1[1] + 4;
            if (v8 >= v113)
              goto LABEL_167;
            goto LABEL_189;
          default:
            goto LABEL_189;
        }
        goto LABEL_5;
    }
  }
}

uint64_t closure #1 in DisplayList.Content.Value.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  unint64_t v6;
  unint64_t v7;
  float v8;
  float v9;
  int v10;
  int v11;
  uint64_t result;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  float v21;
  int v22;
  int v23;
  float v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD v58[14];
  int v59;
  char v60;
  _QWORD *v61;

  v4 = v2;
  v6 = a1[1];
  v7 = a1[2];
  if (v6 >= v7)
  {
    v61 = (_QWORD *)MEMORY[0x24BEE4AF8];
    v8 = 1.0;
    v9 = 0.0;
    v10 = 0;
    v11 = 0;
LABEL_4:
    a1[3] = 0;
    result = swift_allocObject();
    *(float *)(result + 16) = v9;
    *(_DWORD *)(result + 20) = v10;
    *(_DWORD *)(result + 24) = v11;
    *(float *)(result + 28) = v8;
    *(_QWORD *)(result + 32) = v61;
    *a2 = result | 0x2000000000000000;
    return result;
  }
  v61 = (_QWORD *)MEMORY[0x24BEE4AF8];
  v8 = 1.0;
  v9 = 0.0;
  v10 = 0;
  v11 = 0;
  while (1)
  {
    v14 = a1[3];
    if (v14)
    {
      v15 = a1[4];
      if (v6 < v15)
        goto LABEL_14;
      if (v15 < v6)
        goto LABEL_51;
      a1[3] = 0;
    }
    v14 = ProtobufDecoder.decodeVarint()();
    if (v4)
      return swift_bridgeObjectRelease();
    if (v14 < 8)
      goto LABEL_51;
LABEL_14:
    if (v14 >> 3 == 2)
    {
      if ((v14 & 7) != 2)
        goto LABEL_51;
      ProtobufDecoder.beginMessage()();
      if (v4)
        return swift_bridgeObjectRelease();
      GraphicsFilter.init(from:)(a1, (uint64_t)v58);
      v4 = 0;
      v29 = (_QWORD *)a1[5];
      if (!v29[2])
        goto LABEL_58;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
      {
        v30 = v29[2];
        if (!v30)
          goto LABEL_59;
      }
      else
      {
        v29 = specialized _ArrayBuffer._consumeAndCreateNew()(v29);
        v30 = v29[2];
        if (!v30)
          goto LABEL_59;
      }
      v31 = v30 - 1;
      v32 = v29[v31 + 4];
      v29[2] = v31;
      a1[5] = v29;
      a1[2] = v32;
      v33 = v58[0];
      v34 = v58[1];
      v35 = v58[2];
      v36 = v58[3];
      v3 = (_QWORD *)v58[4];
      v56 = v58[6];
      v57 = v58[5];
      v54 = v58[8];
      v55 = v58[7];
      v52 = v58[10];
      v53 = v58[9];
      v50 = v58[12];
      v51 = v58[11];
      v49 = v58[13];
      v47 = v60;
      v48 = v59;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v61 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v61[2] + 1, 1, v61);
      v38 = v61[2];
      v37 = v61[3];
      if (v38 >= v37 >> 1)
        v61 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v37 > 1), v38 + 1, 1, v61);
      v39 = v61;
      v61[2] = v38 + 1;
      v40 = &v39[15 * v38];
      v40[4] = v33;
      v40[5] = v34;
      v40[6] = v35;
      v40[7] = v36;
      v40[8] = v3;
      v40[9] = v57;
      v40[10] = v56;
      v40[11] = v55;
      v40[12] = v54;
      v40[13] = v53;
      v40[14] = v52;
      v40[15] = v51;
      v40[16] = v50;
      v40[17] = v49;
      *((_DWORD *)v40 + 36) = v48;
      *((_BYTE *)v40 + 148) = v47;
      goto LABEL_7;
    }
    if (v14 >> 3 != 1)
    {
      switch(v14 & 7)
      {
        case 0uLL:
          ProtobufDecoder.decodeVarint()();
          if (v4)
            return swift_bridgeObjectRelease();
          goto LABEL_7;
        case 1uLL:
          v13 = a1[1] + 8;
          if (v7 >= v13)
            goto LABEL_6;
          goto LABEL_51;
        case 2uLL:
          v41 = ProtobufDecoder.decodeVarint()();
          if (v4)
            return swift_bridgeObjectRelease();
          if (v41 < 0)
            goto LABEL_61;
          v13 = a1[1] + v41;
          if (v7 < v13)
            goto LABEL_51;
LABEL_6:
          a1[1] = v13;
          break;
        case 5uLL:
          v13 = a1[1] + 4;
          if (v7 < v13)
            goto LABEL_51;
          goto LABEL_6;
        default:
          goto LABEL_51;
      }
      goto LABEL_7;
    }
    if ((v14 & 7) != 2)
      goto LABEL_51;
    v16 = (_QWORD *)a1[5];
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v16[2] + 1, 1, v16);
    v18 = v16[2];
    v17 = v16[3];
    if (v18 >= v17 >> 1)
      v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v17 > 1), v18 + 1, 1, v16);
    v16[2] = v18 + 1;
    v16[v18 + 4] = v7;
    a1[5] = v16;
    v19 = ProtobufDecoder.decodeVarint()();
    if (v4)
      return swift_bridgeObjectRelease();
    if (v19 < 0)
      break;
    v20 = a1[1] + v19;
    if (v7 < v20)
      goto LABEL_51;
    a1[2] = v20;
    v21 = specialized Color.Resolved.init(from:)(a1);
    v25 = (_QWORD *)a1[5];
    if (!v25[2])
      goto LABEL_60;
    v9 = v21;
    v10 = v22;
    v11 = v23;
    v8 = v24;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
    {
      v26 = v25[2];
      if (!v26)
        goto LABEL_50;
    }
    else
    {
      v25 = specialized _ArrayBuffer._consumeAndCreateNew()(v25);
      v26 = v25[2];
      if (!v26)
      {
LABEL_50:
        __break(1u);
LABEL_51:
        lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
        swift_allocError();
        swift_willThrow();
        return swift_bridgeObjectRelease();
      }
    }
    v27 = v26 - 1;
    v28 = v25[v27 + 4];
    v25[2] = v27;
    a1[5] = v25;
    a1[2] = v28;
LABEL_7:
    v6 = a1[1];
    v7 = a1[2];
    if (v6 >= v7)
      goto LABEL_4;
  }
  __break(1u);
LABEL_58:
  __break(1u);
LABEL_59:
  __break(1u);
LABEL_60:
  __break(1u);
LABEL_61:
  __break(1u);
  __break(1u);
  v42 = specialized _ArrayBuffer._consumeAndCreateNew()(v3);
  v43 = v42[2];
  if (!v43)
  {
    __break(1u);
    v42 = (_QWORD *)a1[5];
    if (v42[2])
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
      {
        v43 = v42[2];
        if (v43)
          goto LABEL_56;
LABEL_65:
        __break(1u);
        JUMPOUT(0x234DEAD7CLL);
      }
    }
    else
    {
      __break(1u);
    }
    v42 = specialized _ArrayBuffer._consumeAndCreateNew()(v42);
    v43 = v42[2];
    if (!v43)
      goto LABEL_65;
  }
LABEL_56:
  v44 = v43 - 1;
  v45 = v42[v44 + 4];
  v42[2] = v44;
  result = swift_bridgeObjectRelease();
  a1[5] = v42;
  a1[2] = v45;
  return result;
}

uint64_t closure #2 in DisplayList.Content.Value.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  _QWORD *v3;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned __int8 v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t result;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int v49;
  char v50;
  unsigned __int8 v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD v56[4];
  unsigned __int8 v57;
  uint64_t v58;

  v5 = a1[1];
  v6 = a1[2];
  if (v5 >= v6)
  {
    v11 = 0;
    v8 = 0;
    v9 = 0;
    a1[3] = 0;
    v12 = 0;
    v10 = 6;
LABEL_4:
    lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
    swift_allocError();
    swift_willThrow();
    v13 = v12;
    v14 = v11;
    return outlined consume of Path.Storage(v13, v14, v8, v9, v10);
  }
  v7 = v2;
  v54 = 0;
  v55 = 0;
  v53 = 0;
  v8 = 0;
  v9 = 0;
  v10 = 6;
  LOBYTE(v49) = 1;
  v50 = 0;
  while (1)
  {
    v16 = a1[3];
    if (v16)
    {
      v17 = a1[4];
      if (v5 < v17)
        goto LABEL_14;
      if (v17 < v5)
        goto LABEL_62;
      a1[3] = 0;
    }
    v16 = ProtobufDecoder.decodeVarint()();
    if (v7)
      goto LABEL_63;
    if (v16 < 8)
      goto LABEL_62;
LABEL_14:
    v18 = v16 >> 3;
    if (v16 >> 3 == 3)
    {
      if ((v16 & 7) != 2)
        goto LABEL_62;
      v3 = (_QWORD *)a1[5];
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3[2] + 1, 1, v3);
      v31 = v3[2];
      v30 = v3[3];
      if (v31 >= v30 >> 1)
        v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v30 > 1), v31 + 1, 1, v3);
      v3[2] = v31 + 1;
      v3[v31 + 4] = v6;
      a1[5] = v3;
      v32 = ProtobufDecoder.decodeVarint()();
      if (v7)
        goto LABEL_63;
      if (v32 < 0)
        goto LABEL_76;
      v33 = a1[1] + v32;
      if (v6 < v33)
        goto LABEL_62;
      a1[2] = v33;
      v34 = specialized FillStyle.init(from:)(a1);
      v35 = (_QWORD *)a1[5];
      if (!v35[2])
        goto LABEL_80;
      v3 = (_QWORD *)v34;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
      {
        v36 = v35[2];
        if (!v36)
          goto LABEL_61;
      }
      else
      {
        v35 = specialized _ArrayBuffer._consumeAndCreateNew()(v35);
        v36 = v35[2];
        if (!v36)
        {
LABEL_61:
          __break(1u);
LABEL_62:
          lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
          swift_allocError();
          swift_willThrow();
LABEL_63:
          swift_release();
          v13 = v53;
          v14 = v54;
          return outlined consume of Path.Storage(v13, v14, v8, v9, v10);
        }
      }
      v37 = v36 - 1;
      v38 = v35[v37 + 4];
      v35[2] = v37;
      v49 = (v3 >> 8) & 1;
      v50 = v3 & 1;
      a1[5] = v35;
      a1[2] = v38;
      goto LABEL_7;
    }
    if (v18 == 2)
    {
      if ((v16 & 7) != 2)
        goto LABEL_62;
      ProtobufDecoder.beginMessage()();
      if (v7)
        goto LABEL_63;
      CodableResolvedPaint.init(from:)(a1, &v58);
      v7 = 0;
      v3 = (_QWORD *)a1[5];
      if (!v3[2])
        goto LABEL_77;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
      {
        v39 = v3[2];
        if (!v39)
          goto LABEL_78;
      }
      else
      {
        v3 = specialized _ArrayBuffer._consumeAndCreateNew()(v3);
        v39 = v3[2];
        if (!v39)
          goto LABEL_78;
      }
      v40 = v39 - 1;
      v41 = v3[v40 + 4];
      v3[2] = v40;
      swift_release();
      a1[5] = v3;
      a1[2] = v41;
      v55 = v58;
      goto LABEL_7;
    }
    if (v18 == 1)
      break;
    switch(v16 & 7)
    {
      case 0uLL:
        ProtobufDecoder.decodeVarint()();
        if (v7)
          goto LABEL_63;
        break;
      case 1uLL:
        v15 = a1[1] + 8;
        if (v6 >= v15)
          goto LABEL_6;
        goto LABEL_62;
      case 2uLL:
        v42 = ProtobufDecoder.decodeVarint()();
        if (v7)
          goto LABEL_63;
        if (v42 < 0)
          goto LABEL_82;
        v15 = a1[1] + v42;
        if (v6 < v15)
          goto LABEL_62;
LABEL_6:
        a1[1] = v15;
        break;
      case 5uLL:
        v15 = a1[1] + 4;
        if (v6 < v15)
          goto LABEL_62;
        goto LABEL_6;
      default:
        goto LABEL_62;
    }
LABEL_7:
    v5 = a1[1];
    v6 = a1[2];
    if (v5 >= v6)
    {
      a1[3] = 0;
      if (v55)
      {
        result = swift_allocObject();
        *(_QWORD *)(result + 16) = v53;
        *(_QWORD *)(result + 24) = v54;
        *(_QWORD *)(result + 32) = v8;
        *(_QWORD *)(result + 40) = v9;
        *(_BYTE *)(result + 48) = v10;
        *(_QWORD *)(result + 56) = v55;
        *(_BYTE *)(result + 64) = v50 & 1;
        *(_BYTE *)(result + 65) = v49 & 1;
        *a2 = result | 0x4000000000000000;
        return result;
      }
      v12 = v53;
      v11 = v54;
      goto LABEL_4;
    }
  }
  if ((v16 & 7) != 2)
    goto LABEL_62;
  v3 = (_QWORD *)a1[5];
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3[2] + 1, 1, v3);
  v20 = v3[2];
  v19 = v3[3];
  if (v20 >= v19 >> 1)
    v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v19 > 1), v20 + 1, 1, v3);
  v3[2] = v20 + 1;
  v3[v20 + 4] = v6;
  a1[5] = v3;
  v21 = ProtobufDecoder.decodeVarint()();
  if (v7)
    goto LABEL_63;
  if ((v21 & 0x8000000000000000) == 0)
  {
    v22 = a1[1] + v21;
    if (v6 < v22)
      goto LABEL_62;
    a1[2] = v22;
    specialized Path.init(from:)((unint64_t)a1, (uint64_t)v56);
    v3 = (_QWORD *)a1[5];
    if (!v3[2])
      goto LABEL_79;
    v23 = v56[0];
    v24 = v56[1];
    v25 = v56[3];
    v52 = v56[2];
    v51 = v57;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
    {
      v26 = v3[2];
      if (!v26)
        goto LABEL_81;
    }
    else
    {
      v3 = specialized _ArrayBuffer._consumeAndCreateNew()(v3);
      v26 = v3[2];
      if (!v26)
        goto LABEL_81;
    }
    v27 = v26 - 1;
    v28 = v10;
    v29 = v3[v27 + 4];
    v3[2] = v27;
    outlined consume of Path.Storage(v53, v54, v8, v9, v28);
    v53 = v23;
    v54 = v24;
    a1[5] = v3;
    a1[2] = v29;
    v8 = v52;
    v9 = v25;
    v10 = v51;
    goto LABEL_7;
  }
  __break(1u);
LABEL_76:
  __break(1u);
LABEL_77:
  __break(1u);
LABEL_78:
  __break(1u);
LABEL_79:
  __break(1u);
LABEL_80:
  __break(1u);
LABEL_81:
  __break(1u);
LABEL_82:
  __break(1u);
  __break(1u);
  v44 = specialized _ArrayBuffer._consumeAndCreateNew()(v3);
  v45 = v44[2];
  if (v45)
    goto LABEL_74;
  __break(1u);
  v44 = (_QWORD *)a1[5];
  if (!v44[2])
  {
    __break(1u);
LABEL_85:
    v44 = specialized _ArrayBuffer._consumeAndCreateNew()(v44);
    v45 = v44[2];
    if (v45)
      goto LABEL_74;
LABEL_71:
    __break(1u);
    v44 = (_QWORD *)a1[5];
    if (v44[2])
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
      {
        v45 = v44[2];
        if (v45)
          goto LABEL_74;
        goto LABEL_89;
      }
    }
    else
    {
      __break(1u);
    }
    v44 = specialized _ArrayBuffer._consumeAndCreateNew()(v44);
    v45 = v44[2];
    if (v45)
      goto LABEL_74;
LABEL_89:
    __break(1u);
    JUMPOUT(0x234DEB404);
  }
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    goto LABEL_85;
  v45 = v44[2];
  if (!v45)
    goto LABEL_71;
LABEL_74:
  v46 = v45 - 1;
  v47 = v44[v46 + 4];
  v44[2] = v46;
  swift_release();
  result = outlined consume of Path.Storage(v53, v54, v8, v9, v10);
  a1[5] = v44;
  a1[2] = v47;
  return result;
}

uint64_t closure #3 in DisplayList.Content.Value.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  float v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unsigned __int8 v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  unsigned int v56;
  uint64_t v57;
  unsigned int v58;
  __int128 v59;
  uint64_t v60;
  __int128 v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  float v65;
  unsigned __int8 v66;
  _QWORD v67[4];
  unsigned __int8 v68;
  uint64_t v69;

  v4 = a1[1];
  v5 = a1[2];
  if (v4 >= v5)
  {
    v60 = 0;
    v6 = 0;
    v7 = 0;
    v8 = 0;
    LOBYTE(v9) = 0;
    v59 = xmmword_23528B790;
    v10 = 0.5;
    v11 = 0;
    LOBYTE(v12) = 6;
    v13 = 0;
    v14 = 0;
LABEL_4:
    a1[3] = 0;
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v60;
    *(_QWORD *)(result + 24) = v6;
    *(_QWORD *)(result + 32) = v7;
    *(_QWORD *)(result + 40) = v8;
    *(_BYTE *)(result + 48) = v12;
    *(_OWORD *)(result + 56) = v59;
    *(_QWORD *)(result + 72) = v11;
    *(_QWORD *)(result + 80) = v13;
    *(_QWORD *)(result + 88) = v14;
    *(float *)(result + 96) = v10;
    *(_BYTE *)(result + 100) = v9;
    *a2 = result | 0x5000000000000000;
    return result;
  }
  v60 = 0;
  v6 = 0;
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v59 = xmmword_23528B790;
  v10 = 0.5;
  v11 = 0;
  v12 = 6;
  v13 = 0;
  v14 = 0;
  while (1)
  {
    v17 = a1[3];
    if (v17)
    {
      v18 = a1[4];
      if (v4 < v18)
        goto LABEL_14;
      if (v18 < v4)
        goto LABEL_52;
      a1[3] = 0;
    }
    v17 = ProtobufDecoder.decodeVarint()();
    if (v2)
      goto LABEL_53;
    if (v17 < 8)
    {
LABEL_52:
      lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
      swift_allocError();
      swift_willThrow();
LABEL_53:
      v40 = v60;
      v41 = v6;
      v42 = v7;
      goto LABEL_54;
    }
LABEL_14:
    if (v17 >> 3 != 2)
      break;
    if ((v17 & 7) != 2)
      goto LABEL_52;
    v69 = v7;
    v7 = v8;
    v8 = v12;
    v31 = (_QWORD *)a1[5];
    v12 = v6;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v31 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v31[2] + 1, 1, v31);
    v6 = v31[2];
    v32 = v31[3];
    v9 = v6 + 1;
    if (v6 >= v32 >> 1)
      v31 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v32 > 1), v6 + 1, 1, v31);
    v31[2] = v9;
    v31[v6 + 4] = v5;
    a1[5] = v31;
    v33 = ProtobufDecoder.decodeVarint()();
    if (v2)
    {
      v40 = v60;
      v41 = v12;
      goto LABEL_59;
    }
    if (v33 < 0)
      goto LABEL_64;
    v6 = v12;
    v34 = a1[1] + v33;
    if (v5 < v34)
    {
      lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
      swift_allocError();
      swift_willThrow();
      v40 = v60;
      v41 = v12;
LABEL_59:
      v42 = v69;
      v43 = v7;
      v44 = v8;
      return outlined consume of Path.Storage(v40, v41, v42, v43, v44);
    }
    a1[2] = v34;
    ResolvedShadowStyle.init(from:)((unint64_t)a1, (unint64_t)&v61);
    v12 = v8;
    v35 = (_QWORD *)a1[5];
    if (!v35[2])
      goto LABEL_66;
    v8 = v7;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v35 = specialized _ArrayBuffer._consumeAndCreateNew()(v35);
    v7 = v69;
    v36 = v35[2];
    if (!v36)
      goto LABEL_67;
    v37 = v36 - 1;
    v38 = v35[v37 + 4];
    v35[2] = v37;
    a1[5] = v35;
    a1[2] = v38;
    v59 = v61;
    v11 = v62;
    v13 = v63;
    v14 = v64;
    v10 = v65;
    v9 = v66;
LABEL_7:
    v4 = a1[1];
    v5 = a1[2];
    if (v4 >= v5)
      goto LABEL_4;
  }
  if (v17 >> 3 != 1)
  {
    switch(v17 & 7)
    {
      case 0uLL:
        ProtobufDecoder.decodeVarint()();
        if (v2)
          goto LABEL_53;
        goto LABEL_7;
      case 1uLL:
        v16 = a1[1] + 8;
        if (v5 < v16)
          goto LABEL_52;
        goto LABEL_6;
      case 2uLL:
        v39 = ProtobufDecoder.decodeVarint()();
        if (v2)
          goto LABEL_53;
        if (v39 < 0)
          goto LABEL_69;
        v16 = a1[1] + v39;
        if (v5 < v16)
          goto LABEL_52;
LABEL_6:
        a1[1] = v16;
        break;
      case 5uLL:
        v16 = a1[1] + 4;
        if (v5 < v16)
          goto LABEL_52;
        goto LABEL_6;
      default:
        goto LABEL_52;
    }
    goto LABEL_7;
  }
  if ((v17 & 7) != 2)
    goto LABEL_52;
  v19 = (_QWORD *)a1[5];
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v69 = v7;
  v58 = v9;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    v19 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v19[2] + 1, 1, v19);
  v22 = v19[2];
  v21 = v19[3];
  v9 = v22 + 1;
  if (v22 >= v21 >> 1)
    v19 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v21 > 1), v22 + 1, 1, v19);
  v19[2] = v9;
  v19[v22 + 4] = v5;
  a1[5] = v19;
  v23 = ProtobufDecoder.decodeVarint()();
  if (v2)
  {
    v40 = v60;
    v41 = v6;
    v42 = v69;
LABEL_54:
    v43 = v8;
    v44 = v12;
    return outlined consume of Path.Storage(v40, v41, v42, v43, v44);
  }
  v7 = v69;
  if ((v23 & 0x8000000000000000) == 0)
  {
    v24 = a1[1] + v23;
    if (v5 < v24)
      goto LABEL_52;
    a1[2] = v24;
    specialized Path.init(from:)((unint64_t)a1, (uint64_t)v67);
    v25 = (_QWORD *)a1[5];
    if (!v25[2])
      goto LABEL_65;
    v26 = v67[0];
    v9 = v67[1];
    v7 = v67[2];
    v57 = v67[3];
    v56 = v68;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
    {
      v27 = v25[2];
      if (!v27)
        goto LABEL_68;
    }
    else
    {
      v25 = specialized _ArrayBuffer._consumeAndCreateNew()(v25);
      v27 = v25[2];
      if (!v27)
        goto LABEL_68;
    }
    v28 = v27 - 1;
    v29 = v6;
    v30 = v25[v28 + 4];
    v25[2] = v28;
    outlined consume of Path.Storage(v60, v29, v69, v8, v12);
    v60 = v26;
    a1[5] = v25;
    a1[2] = v30;
    v6 = v9;
    v8 = v57;
    v12 = v56;
    v9 = v58;
    goto LABEL_7;
  }
  __break(1u);
LABEL_64:
  __break(1u);
LABEL_65:
  __break(1u);
LABEL_66:
  __break(1u);
LABEL_67:
  __break(1u);
LABEL_68:
  __break(1u);
LABEL_69:
  __break(1u);
  __break(1u);
  v52 = specialized _ArrayBuffer._consumeAndCreateNew()((_QWORD *)v9);
  v53 = v52[2];
  if (v53)
  {
    v45 = v6;
    v46 = v53 - 1;
    v47 = v52[v46 + 4];
    v52[2] = v46;
    v48 = v60;
    v49 = v7;
    v50 = v8;
  }
  else
  {
    __break(1u);
    __break(1u);
    v52 = specialized _ArrayBuffer._consumeAndCreateNew()(v52);
    v54 = v52[2];
    if (!v54)
    {
      __break(1u);
      JUMPOUT(0x234DEBA48);
    }
    v45 = v6;
    v51 = v54 - 1;
    v47 = v52[v51 + 4];
    v52[2] = v51;
    v48 = v60;
    v49 = v69;
    v50 = v7;
  }
  result = outlined consume of Path.Storage(v48, v45, v49, v50, v12);
  a1[5] = v52;
  a1[2] = v47;
  return result;
}

unint64_t closure #4 in DisplayList.Content.Value.init(from:)@<X0>(_QWORD *a1@<X0>, double *a2@<X8>)
{
  uint64_t v2;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  double v8;
  uint64_t v9;
  unint64_t result;
  unint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  double v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v5 = a1[1];
  v6 = a1[2];
  if (v5 < v6)
  {
    v7 = 0;
    v8 = 0.0;
    v9 = 0;
    while (1)
    {
      result = a1[3];
      if (!result)
        goto LABEL_12;
      v12 = a1[4];
      if (v5 >= v12)
        break;
LABEL_14:
      if (result >> 3 == 2)
      {
        if ((result & 7) != 2)
          goto LABEL_53;
        v24 = (_QWORD *)a1[5];
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v24 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v24[2] + 1, 1, v24);
        v26 = v24[2];
        v25 = v24[3];
        if (v26 >= v25 >> 1)
          v24 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v25 > 1), v26 + 1, 1, v24);
        v24[2] = v26 + 1;
        v24[v26 + 4] = v6;
        a1[5] = v24;
        v27 = ProtobufDecoder.decodeVarint()();
        if (v2)
          return swift_release();
        if (v27 < 0)
          goto LABEL_62;
        v28 = a1[1] + v27;
        if (v6 < v28)
          goto LABEL_53;
        a1[2] = v28;
        v29 = specialized CGPoint.init(from:)(a1);
        v31 = (_QWORD *)a1[5];
        if (!v31[2])
          goto LABEL_64;
        v8 = v29;
        v9 = v30;
        result = swift_isUniquelyReferenced_nonNull_native();
        if ((result & 1) != 0)
        {
          v32 = v31[2];
          if (!v32)
            goto LABEL_52;
        }
        else
        {
          result = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v31);
          v31 = (_QWORD *)result;
          v32 = *(_QWORD *)(result + 16);
          if (!v32)
          {
LABEL_52:
            __break(1u);
LABEL_53:
            lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
            swift_allocError();
            swift_willThrow();
            return swift_release();
          }
        }
        v33 = v32 - 1;
        v34 = v31[v33 + 4];
        v31[2] = v33;
        a1[5] = v31;
        a1[2] = v34;
      }
      else if (result >> 3 == 1)
      {
        if ((result & 7) != 2)
          goto LABEL_53;
        v13 = (_QWORD *)a1[5];
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v13 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v13[2] + 1, 1, v13);
        v15 = v13[2];
        v14 = v13[3];
        if (v15 >= v14 >> 1)
          v13 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v14 > 1), v15 + 1, 1, v13);
        v13[2] = v15 + 1;
        v13[v15 + 4] = v6;
        a1[5] = v13;
        v16 = ProtobufDecoder.decodeVarint()();
        if (v2)
          return swift_release();
        if (v16 < 0)
        {
          __break(1u);
LABEL_62:
          __break(1u);
LABEL_63:
          __break(1u);
LABEL_64:
          __break(1u);
LABEL_65:
          __break(1u);
LABEL_66:
          __break(1u);
          __break(1u);
          v35 = specialized _ArrayBuffer._consumeAndCreateNew()(a2);
          v36 = v35[2];
          if (!v36)
          {
            __break(1u);
            v35 = (_QWORD *)a1[5];
            if (v35[2])
            {
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
              {
                v36 = v35[2];
                if (v36)
                  goto LABEL_60;
LABEL_70:
                __break(1u);
                JUMPOUT(0x234DEBF08);
              }
            }
            else
            {
              __break(1u);
            }
            v35 = specialized _ArrayBuffer._consumeAndCreateNew()(v35);
            v36 = v35[2];
            if (!v36)
              goto LABEL_70;
          }
LABEL_60:
          v37 = v36 - 1;
          v38 = v35[v37 + 4];
          v35[2] = v37;
          result = swift_release();
          a1[5] = v35;
          a1[2] = v38;
          return result;
        }
        v17 = a1[1] + v16;
        if (v6 < v17)
          goto LABEL_53;
        a1[2] = v17;
        v18 = specialized CodableResolvedStyledText.init(from:)((unint64_t)a1);
        v19 = (_QWORD *)a1[5];
        if (!v19[2])
          goto LABEL_63;
        v20 = v18;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
        {
          v21 = v19[2];
          if (!v21)
            goto LABEL_65;
        }
        else
        {
          v19 = specialized _ArrayBuffer._consumeAndCreateNew()(v19);
          v21 = v19[2];
          if (!v21)
            goto LABEL_65;
        }
        v22 = v21 - 1;
        v23 = v19[v22 + 4];
        v19[2] = v22;
        result = swift_release();
        a1[5] = v19;
        a1[2] = v23;
        v7 = v20;
      }
      else
      {
        switch(result & 7)
        {
          case 0uLL:
            result = ProtobufDecoder.decodeVarint()();
            if (v2)
              return swift_release();
            break;
          case 1uLL:
            v11 = a1[1] + 8;
            if (v6 >= v11)
              goto LABEL_6;
            goto LABEL_53;
          case 2uLL:
            result = ProtobufDecoder.decodeVarint()();
            if (v2)
              return swift_release();
            if ((result & 0x8000000000000000) != 0)
              goto LABEL_66;
            v11 = a1[1] + result;
            if (v6 < v11)
              goto LABEL_53;
LABEL_6:
            a1[1] = v11;
            break;
          case 5uLL:
            v11 = a1[1] + 4;
            if (v6 < v11)
              goto LABEL_53;
            goto LABEL_6;
          default:
            goto LABEL_53;
        }
      }
      v5 = a1[1];
      v6 = a1[2];
      if (v5 >= v6)
      {
        a1[3] = 0;
        if (!v7)
          goto LABEL_4;
        *(_QWORD *)a2 = v7;
        a2[1] = v8;
        *((_QWORD *)a2 + 2) = v9;
        return result;
      }
    }
    if (v12 < v5)
      goto LABEL_53;
    a1[3] = 0;
LABEL_12:
    result = ProtobufDecoder.decodeVarint()();
    if (v2)
      return swift_release();
    if (result < 8)
      goto LABEL_53;
    goto LABEL_14;
  }
  a1[3] = 0;
LABEL_4:
  lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
  swift_allocError();
  return swift_willThrow();
}

uint64_t closure #5 in DisplayList.Content.Value.init(from:)@<X0>(_QWORD *a1@<X0>, unint64_t *a2@<X8>)
{
  uint64_t v2;
  unint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  int v8;
  unint64_t v9;
  double v10;
  uint64_t v11;
  uint64_t result;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t *v34;
  _QWORD *v35;
  _QWORD *v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  double v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  char v55;
  int v56;
  char v57;
  _QWORD *v58;
  unsigned __int16 v59;
  unsigned __int8 v60;
  int v61;
  char v62;
  int v63;
  int v64;

  v5 = a1[1];
  v6 = (_QWORD *)a1[2];
  if (v5 >= (unint64_t)v6)
  {
    LOBYTE(v7) = 0;
    v8 = 0;
    v64 = 0;
    v63 = 0;
    v9 = MEMORY[0x24BEE4AF8];
    v10 = 0.0;
    v56 = 160;
    v57 = 3;
    v11 = 0;
    v55 = 1;
LABEL_4:
    a1[3] = 0;
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v9;
    *(_WORD *)(result + 24) = v64;
    *(_BYTE *)(result + 26) = v63;
    *(double *)(result + 32) = v10;
    *(_QWORD *)(result + 40) = v11;
    *(_BYTE *)(result + 48) = v7;
    *(_DWORD *)(result + 52) = v8;
    *(_BYTE *)(result + 56) = v55 & 1;
    *(_DWORD *)(result + 60) = v56;
    *(_BYTE *)(result + 64) = v57;
    *a2 = result | 0x9000000000000000;
    return result;
  }
  v7 = 0;
  v8 = 0;
  v64 = 0;
  v63 = 0;
  v9 = MEMORY[0x24BEE4AF8];
  v56 = 160;
  v57 = 3;
  v55 = 1;
  v10 = 0.0;
  v11 = 0;
  while (1)
  {
    v14 = a1[3];
    if (v14)
    {
      v15 = a1[4];
      if (v5 < v15)
        goto LABEL_14;
      if (v15 < v5)
        goto LABEL_67;
      a1[3] = 0;
    }
    v16 = ProtobufDecoder.decodeVarint()();
    if (v2)
      return swift_bridgeObjectRelease();
    v14 = v16;
    if (v16 < 8)
      goto LABEL_67;
LABEL_14:
    v17 = v14 >> 3;
    if (v14 >> 3 == 3)
    {
      if ((v14 & 7) != 2)
        goto LABEL_67;
      v24 = (_QWORD *)a1[5];
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v24 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v24[2] + 1, 1, v24);
      v26 = v24[2];
      v25 = v24[3];
      if (v26 >= v25 >> 1)
        v24 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v25 > 1), v26 + 1, 1, v24);
      v24[2] = v26 + 1;
      v24[v26 + 4] = v6;
      a1[5] = v24;
      v27 = ProtobufDecoder.decodeVarint()();
      if (v2)
        return swift_bridgeObjectRelease();
      if (v27 < 0)
        goto LABEL_78;
      v28 = a1[1] + v27;
      if ((unint64_t)v6 < v28)
        goto LABEL_67;
      a1[2] = v28;
      RasterizationOptions.init(from:)((uint64_t)a1, (uint64_t)&v58);
      v29 = (_QWORD *)a1[5];
      if (!v29[2])
        goto LABEL_81;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
      {
        v30 = v29[2];
        if (!v30)
          goto LABEL_84;
      }
      else
      {
        v29 = specialized _ArrayBuffer._consumeAndCreateNew()(v29);
        v30 = v29[2];
        if (!v30)
          goto LABEL_84;
      }
      v31 = v30 - 1;
      v32 = v29[v31 + 4];
      v29[2] = v31;
      a1[5] = v29;
      a1[2] = v32;
      v7 = v58;
      v8 = HIDWORD(v58);
      v55 = v59;
      v56 = v61;
      v57 = v62;
      goto LABEL_7;
    }
    if (v17 == 2)
      break;
    if (v17 != 1)
    {
      switch(v14 & 7)
      {
        case 0uLL:
          ProtobufDecoder.decodeVarint()();
          if (v2)
            return swift_bridgeObjectRelease();
          goto LABEL_7;
        case 1uLL:
          v13 = a1[1] + 8;
          if ((unint64_t)v6 >= v13)
            goto LABEL_6;
          goto LABEL_67;
        case 2uLL:
          v46 = ProtobufDecoder.decodeVarint()();
          if (v2)
            return swift_bridgeObjectRelease();
          if (v46 < 0)
            goto LABEL_86;
          v13 = a1[1] + v46;
          if ((unint64_t)v6 < v13)
            goto LABEL_67;
LABEL_6:
          a1[1] = v13;
          break;
        case 5uLL:
          v13 = a1[1] + 4;
          if ((unint64_t)v6 < v13)
            goto LABEL_67;
          goto LABEL_6;
        default:
          goto LABEL_67;
      }
      goto LABEL_7;
    }
    swift_bridgeObjectRelease();
    if ((v14 & 7) != 2)
      goto LABEL_70;
    v9 = a1[5];
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v9 = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v9 + 16) + 1, 1, (_QWORD *)v9);
    v19 = *(_QWORD *)(v9 + 16);
    v18 = *(_QWORD *)(v9 + 24);
    if (v19 >= v18 >> 1)
      v9 = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v18 > 1), v19 + 1, 1, (_QWORD *)v9);
    *(_QWORD *)(v9 + 16) = v19 + 1;
    *(_QWORD *)(v9 + 8 * v19 + 32) = v6;
    a1[5] = v9;
    result = ProtobufDecoder.decodeVarint()();
    if (v2)
      return result;
    if (result < 0)
    {
      __break(1u);
LABEL_78:
      __break(1u);
LABEL_79:
      __break(1u);
LABEL_80:
      __break(1u);
LABEL_81:
      __break(1u);
LABEL_82:
      __break(1u);
LABEL_83:
      __break(1u);
LABEL_84:
      __break(1u);
LABEL_85:
      __break(1u);
LABEL_86:
      __break(1u);
      __break(1u);
      result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()((_QWORD *)v9);
      v53 = *(_QWORD *)(result + 16);
      if (v53)
      {
        v47 = v53 - 1;
        v48 = *(_QWORD *)(result + 8 * v47 + 32);
        *(_QWORD *)(result + 16) = v47;
        a1[5] = result;
        a1[2] = v48;
        return result;
      }
      __break(1u);
      __break(1u);
      v49 = specialized _ArrayBuffer._consumeAndCreateNew()(v6);
      v50 = v49[2];
      if (v50)
        goto LABEL_76;
      __break(1u);
      v49 = (_QWORD *)a1[5];
      if (v49[2])
      {
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
        {
          v50 = v49[2];
          if (v50)
          {
LABEL_76:
            v51 = v50 - 1;
            v52 = v49[v51 + 4];
            v49[2] = v51;
            result = swift_bridgeObjectRelease();
            a1[5] = v49;
            a1[2] = v52;
            return result;
          }
LABEL_91:
          __break(1u);
          JUMPOUT(0x234DEC648);
        }
      }
      else
      {
        __break(1u);
      }
      v49 = specialized _ArrayBuffer._consumeAndCreateNew()(v49);
      v50 = v49[2];
      if (v50)
        goto LABEL_76;
      goto LABEL_91;
    }
    v20 = a1[1] + result;
    if ((unint64_t)v6 < v20)
    {
LABEL_70:
      lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
      swift_allocError();
      return swift_willThrow();
    }
    a1[2] = v20;
    DisplayList.init(from:)(&v58, a1);
    v9 = a1[5];
    if (!*(_QWORD *)(v9 + 16))
      goto LABEL_80;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
    {
      v21 = *(_QWORD *)(v9 + 16);
      if (!v21)
        goto LABEL_85;
    }
    else
    {
      v9 = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew()((_QWORD *)v9);
      v21 = *(_QWORD *)(v9 + 16);
      if (!v21)
        goto LABEL_85;
    }
    v22 = v21 - 1;
    v23 = *(_QWORD *)(v9 + 8 * v22 + 32);
    *(_QWORD *)(v9 + 16) = v22;
    a1[5] = v9;
    a1[2] = v23;
    v9 = (unint64_t)v58;
    v64 = v59;
    v63 = v60;
LABEL_7:
    v5 = a1[1];
    v6 = (_QWORD *)a1[2];
    if (v5 >= (unint64_t)v6)
      goto LABEL_4;
  }
  if ((v14 & 7) != 2)
    goto LABEL_67;
  v54 = v8;
  v33 = v7;
  v34 = a2;
  v35 = (_QWORD *)a1[5];
  v36 = (_QWORD *)v9;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v35 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v35[2] + 1, 1, v35);
  v9 = v35[2];
  v37 = v35[3];
  if (v9 >= v37 >> 1)
    v35 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v37 > 1), v9 + 1, 1, v35);
  v35[2] = v9 + 1;
  v35[v9 + 4] = v6;
  a1[5] = v35;
  v38 = ProtobufDecoder.decodeVarint()();
  if (v2)
    return swift_bridgeObjectRelease();
  if (v38 < 0)
    goto LABEL_79;
  v9 = (unint64_t)v36;
  v39 = a1[1] + v38;
  if ((unint64_t)v6 >= v39)
  {
    a1[2] = v39;
    v40 = specialized CGPoint.init(from:)(a1);
    v42 = (_QWORD *)a1[5];
    if (!v42[2])
      goto LABEL_82;
    v10 = v40;
    v11 = v41;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v42 = specialized _ArrayBuffer._consumeAndCreateNew()(v42);
    a2 = v34;
    v43 = v42[2];
    if (!v43)
      goto LABEL_83;
    v7 = v33;
    v44 = v43 - 1;
    v45 = v42[v44 + 4];
    v42[2] = v44;
    a1[5] = v42;
    a1[2] = v45;
    v8 = v54;
    goto LABEL_7;
  }
LABEL_67:
  lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
  swift_allocError();
  swift_willThrow();
  return swift_bridgeObjectRelease();
}

uint64_t closure #6 in DisplayList.Content.Value.init(from:)@<X0>(_QWORD *a1@<X0>, unint64_t *a2@<X8>)
{
  uint64_t v2;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  char v8;
  double v9;
  uint64_t v10;
  uint64_t result;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  double v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char v50;
  uint64_t v51;
  char v52;
  unsigned int v53;
  char v54;
  int v55;
  int v56;

  v4 = a1[1];
  v5 = a1[2];
  if (v4 >= v5)
  {
    a1[3] = 0;
    goto LABEL_4;
  }
  v6 = 0;
  v56 = 0;
  v55 = 0;
  v50 = 3;
  v7 = 160;
  v8 = 1;
  v9 = 0.0;
  v10 = 0;
  while (1)
  {
    v13 = a1[3];
    if (v13)
    {
      v14 = a1[4];
      if (v4 < v14)
        goto LABEL_14;
      if (v14 < v4)
        goto LABEL_68;
      a1[3] = 0;
    }
    v13 = ProtobufDecoder.decodeVarint()();
    if (v2)
      return swift_unknownObjectRelease();
    if (v13 < 8)
      goto LABEL_68;
LABEL_14:
    v15 = v13 >> 3;
    if (v13 >> 3 == 3)
    {
      if ((v13 & 7) != 2)
        goto LABEL_68;
      v25 = (_QWORD *)a1[5];
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v25 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v25[2] + 1, 1, v25);
      v7 = v25[2];
      v26 = v25[3];
      if (v7 >= v26 >> 1)
        v25 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v26 > 1), v7 + 1, 1, v25);
      v25[2] = v7 + 1;
      v25[v7 + 4] = v5;
      a1[5] = v25;
      v27 = ProtobufDecoder.decodeVarint()();
      if (v2)
        return swift_unknownObjectRelease();
      if (v27 < 0)
        goto LABEL_80;
      v28 = a1[1] + v27;
      if (v5 < v28)
        goto LABEL_68;
      a1[2] = v28;
      RasterizationOptions.init(from:)((uint64_t)a1, (uint64_t)&v51);
      v29 = (_QWORD *)a1[5];
      if (!v29[2])
        goto LABEL_83;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
      {
        v30 = v29[2];
        if (!v30)
          goto LABEL_86;
      }
      else
      {
        v29 = specialized _ArrayBuffer._consumeAndCreateNew()(v29);
        v30 = v29[2];
        if (!v30)
          goto LABEL_86;
      }
      v31 = v30 - 1;
      v32 = v29[v31 + 4];
      v29[2] = v31;
      a1[5] = v29;
      a1[2] = v32;
      v56 = v51;
      v55 = HIDWORD(v51);
      v8 = v52;
      v7 = v53;
      v50 = v54;
      goto LABEL_7;
    }
    if (v15 == 2)
    {
      if ((v13 & 7) != 2)
        goto LABEL_68;
      v33 = (_QWORD *)a1[5];
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v33 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v33[2] + 1, 1, v33);
      v35 = v33[2];
      v34 = v33[3];
      if (v35 >= v34 >> 1)
        v33 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v34 > 1), v35 + 1, 1, v33);
      v33[2] = v35 + 1;
      v33[v35 + 4] = v5;
      a1[5] = v33;
      v36 = ProtobufDecoder.decodeVarint()();
      if (v2)
        return swift_unknownObjectRelease();
      if (v36 < 0)
        goto LABEL_81;
      v37 = a1[1] + v36;
      if (v5 < v37)
        goto LABEL_68;
      a1[2] = v37;
      v38 = specialized CGPoint.init(from:)(a1);
      v40 = (_QWORD *)a1[5];
      if (!v40[2])
        goto LABEL_84;
      v9 = v38;
      v10 = v39;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
      {
        v41 = v40[2];
        if (!v41)
          goto LABEL_85;
      }
      else
      {
        v40 = specialized _ArrayBuffer._consumeAndCreateNew()(v40);
        v41 = v40[2];
        if (!v41)
          goto LABEL_85;
      }
      v42 = v41 - 1;
      v43 = v40[v42 + 4];
      v40[2] = v42;
      a1[5] = v40;
      a1[2] = v43;
      goto LABEL_7;
    }
    if (v15 == 1)
      break;
    switch(v13 & 7)
    {
      case 0uLL:
        ProtobufDecoder.decodeVarint()();
        if (v2)
          return swift_unknownObjectRelease();
        break;
      case 1uLL:
        v12 = a1[1] + 8;
        if (v5 >= v12)
          goto LABEL_6;
        goto LABEL_68;
      case 2uLL:
        v44 = ProtobufDecoder.decodeVarint()();
        if (v2)
          return swift_unknownObjectRelease();
        if (v44 < 0)
          goto LABEL_87;
        v12 = a1[1] + v44;
        if (v5 < v12)
          goto LABEL_68;
LABEL_6:
        a1[1] = v12;
        break;
      case 5uLL:
        v12 = a1[1] + 4;
        if (v5 < v12)
          goto LABEL_68;
        goto LABEL_6;
      default:
        goto LABEL_68;
    }
LABEL_7:
    v4 = a1[1];
    v5 = a1[2];
    if (v4 >= v5)
    {
      a1[3] = 0;
      if (v6)
      {
        result = swift_allocObject();
        *(_QWORD *)(result + 16) = v6;
        *(double *)(result + 24) = v9;
        *(_QWORD *)(result + 32) = v10;
        *(_BYTE *)(result + 40) = v56;
        *(_DWORD *)(result + 44) = v55;
        *(_BYTE *)(result + 48) = v8 & 1;
        *(_DWORD *)(result + 52) = v7;
        *(_BYTE *)(result + 56) = v50;
        *a2 = result | 0xA000000000000000;
        return result;
      }
LABEL_4:
      lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
      swift_allocError();
      return swift_willThrow();
    }
  }
  if ((v13 & 7) != 2)
    goto LABEL_68;
  v16 = (_QWORD *)a1[5];
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v16[2] + 1, 1, v16);
  v18 = v16[2];
  v17 = v16[3];
  if (v18 >= v17 >> 1)
    v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v17 > 1), v18 + 1, 1, v16);
  v16[2] = v18 + 1;
  v16[v18 + 4] = v5;
  a1[5] = v16;
  v19 = ProtobufDecoder.decodeVarint()();
  if (v2)
    return swift_unknownObjectRelease();
  if ((v19 & 0x8000000000000000) == 0)
  {
    v20 = a1[1] + v19;
    if (v5 < v20)
      goto LABEL_68;
    a1[2] = v20;
    CodableRBDisplayListContents.init(from:)((uint64_t)a1, &v51);
    v21 = (_QWORD *)a1[5];
    if (!v21[2])
      goto LABEL_82;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
    {
      v22 = v21[2];
      if (!v22)
        goto LABEL_67;
    }
    else
    {
      v21 = specialized _ArrayBuffer._consumeAndCreateNew()(v21);
      v22 = v21[2];
      if (!v22)
      {
LABEL_67:
        __break(1u);
LABEL_68:
        lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
        swift_allocError();
        swift_willThrow();
        return swift_unknownObjectRelease();
      }
    }
    v23 = v22 - 1;
    v24 = v21[v23 + 4];
    v21[2] = v23;
    swift_unknownObjectRelease();
    a1[5] = v21;
    a1[2] = v24;
    v6 = v51;
    goto LABEL_7;
  }
  __break(1u);
LABEL_80:
  __break(1u);
LABEL_81:
  __break(1u);
LABEL_82:
  __break(1u);
LABEL_83:
  __break(1u);
LABEL_84:
  __break(1u);
LABEL_85:
  __break(1u);
LABEL_86:
  __break(1u);
LABEL_87:
  __break(1u);
  __break(1u);
  v45 = specialized _ArrayBuffer._consumeAndCreateNew()((_QWORD *)v7);
  v46 = v45[2];
  if (v46)
    goto LABEL_78;
  __break(1u);
  v45 = (_QWORD *)a1[5];
  if (!v45[2])
  {
    __break(1u);
LABEL_90:
    v45 = specialized _ArrayBuffer._consumeAndCreateNew()(v45);
    v46 = v45[2];
    if (v46)
      goto LABEL_78;
LABEL_75:
    __break(1u);
    v45 = (_QWORD *)a1[5];
    if (v45[2])
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
      {
        v46 = v45[2];
        if (v46)
          goto LABEL_78;
        goto LABEL_94;
      }
    }
    else
    {
      __break(1u);
    }
    v45 = specialized _ArrayBuffer._consumeAndCreateNew()(v45);
    v46 = v45[2];
    if (v46)
      goto LABEL_78;
LABEL_94:
    __break(1u);
    JUMPOUT(0x234DECCF4);
  }
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    goto LABEL_90;
  v46 = v45[2];
  if (!v46)
    goto LABEL_75;
LABEL_78:
  v47 = v46 - 1;
  v48 = v45[v47 + 4];
  v45[2] = v47;
  result = swift_unknownObjectRelease();
  a1[5] = v45;
  a1[2] = v48;
  return result;
}

unint64_t closure #7 in DisplayList.Content.Value.init(from:)@<X0>(unint64_t result@<X0>, unint64_t *a2@<X8>)
{
  uint64_t v2;
  _QWORD *v3;
  unint64_t v5;
  unint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v3 = (_QWORD *)result;
  v5 = *(_QWORD *)(result + 8);
  v6 = *(_QWORD *)(result + 16);
  if (v5 < v6)
  {
    v7 = 0;
    while (1)
    {
      result = v3[3];
      if (result)
      {
        v9 = v3[4];
        if (v5 < v9)
          goto LABEL_14;
        if (v9 < v5)
          goto LABEL_31;
        v3[3] = 0;
      }
      result = ProtobufDecoder.decodeVarint()();
      if (v2)
        return result;
      if (result <= 7)
        goto LABEL_31;
LABEL_14:
      if ((result & 0xFFFFFFFFFFFFFFF8) == 8)
      {
        if ((result & 7) != 0)
        {
          if ((result & 7) != 2)
            goto LABEL_31;
          result = ProtobufDecoder.decodeVarint()();
          if (v2)
            return result;
          if ((result & 0x8000000000000000) != 0)
          {
            __break(1u);
LABEL_34:
            __break(1u);
            JUMPOUT(0x234DECECCLL);
          }
          v10 = v3[1] + result;
          if (v6 < v10)
          {
LABEL_31:
            lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
            swift_allocError();
            return swift_willThrow();
          }
          v3[3] = 8;
          v3[4] = v10;
        }
        result = ProtobufDecoder.decodeVarint()();
        if (v2)
          return result;
        v7 = result;
      }
      else
      {
        switch(result & 7)
        {
          case 0uLL:
            result = ProtobufDecoder.decodeVarint()();
            if (v2)
              return result;
            break;
          case 1uLL:
            v8 = v3[1] + 8;
            if (v6 >= v8)
              goto LABEL_6;
            goto LABEL_31;
          case 2uLL:
            result = ProtobufDecoder.decodeVarint()();
            if (v2)
              return result;
            if ((result & 0x8000000000000000) != 0)
              goto LABEL_34;
            v8 = v3[1] + result;
            if (v6 < v8)
              goto LABEL_31;
LABEL_6:
            v3[1] = v8;
            break;
          case 5uLL:
            v8 = v3[1] + 4;
            if (v6 < v8)
              goto LABEL_31;
            goto LABEL_6;
          default:
            goto LABEL_31;
        }
      }
      v5 = v3[1];
      v6 = v3[2];
      if (v5 >= v6)
        goto LABEL_4;
    }
  }
  v7 = 0;
LABEL_4:
  v3[3] = 0;
  *a2 = v7 | 0xC000000000000000;
  return result;
}

void protocol witness for ProtobufEncodableMessage.encode(to:) in conformance DisplayList.Content.Value()
{
  DisplayList.Content.Value.encode(to:)();
}

unint64_t protocol witness for ProtobufDecodableMessage.init(from:) in conformance DisplayList.Content.Value@<X0>(id *a1@<X0>, unint64_t *a2@<X8>)
{
  return DisplayList.Content.Value.init(from:)(a1, a2);
}

void DisplayList.Effect.encode(to:)()
{
  __asm { BR              X10 }
}

void sub_234DECF60()
{
  char v0;

  ProtobufEncoder.encodeVarint(_:)(0x78uLL);
  ProtobufEncoder.encodeVarint(_:)(v0 & 1);
}

void sub_234DED7AC(double a1@<X8>)
{
  double v1;
  double v2;
  double v3;
  double v4;

  v3 = v2;
  v4 = v1;
  ProtobufEncoder.encodeVarint(_:)(0xAAuLL);
  specialized ProtobufEncoder.encodeMessage<A>(_:)(v3, v4, a1);
  JUMPOUT(0x234DED780);
}

void sub_234DED7E0()
{
  specialized ProtobufEncoder.messageField<A>(_:_:)(22);
  JUMPOUT(0x234DED780);
}

void sub_234DED810(uint64_t a1@<X8>, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39)
{
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;

  a31 = v43;
  a32 = v40;
  a33 = a1;
  a34 = v42;
  a35 = v41;
  a36 = v39;
  a37 = v44;
  a38 = v45;
  a39 = v46;
  ProtobufEncoder.encodeVarint(_:)(0x42uLL);
  specialized ProtobufEncoder.encodeMessage<A>(_:)((uint64_t)&a31);
  JUMPOUT(0x234DED780);
}

void closure #2 in DisplayList.Effect.encode(to:)(uint64_t a1, uint64_t a2, __int16 a3, unsigned int a4)
{
  uint64_t v4;
  uint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  unint64_t v11;
  int v12;

  ProtobufEncoder.encodeVarint(_:)(0xAuLL);
  v8 = *(_QWORD *)(a1 + 8);
  v9 = *(_QWORD **)(a1 + 24);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v9[2] + 1, 1, v9);
  v11 = v9[2];
  v10 = v9[3];
  if (v11 >= v10 >> 1)
    v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v10 > 1), v11 + 1, 1, v9);
  v9[2] = v11 + 1;
  v9[v11 + 4] = v8;
  *(_QWORD *)(a1 + 24) = v9;
  if (__OFADD__(v8, 1))
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a1 + 8) = v8 + 1;
    Path.encode(to:)();
    if (!v4)
    {
      ProtobufEncoder.endLengthDelimited()();
      v12 = a3 & 0x101;
      if (v12 != 256)
      {
        ProtobufEncoder.encodeVarint(_:)(0x12uLL);
        specialized ProtobufEncoder.encodeMessage<A>(_:)(v12);
      }
      if (a4)
      {
        ProtobufEncoder.encodeVarint(_:)(0x18uLL);
        ProtobufEncoder.encodeVarint(_:)(a4);
      }
    }
  }
}

void closure #4 in DisplayList.Effect.encode(to:)(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  int64_t v11;
  int64_t v12;
  int64_t v13;
  _QWORD *v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  _BYTE *v18;
  _QWORD v19[2];
  uint64_t v20;

  v5 = type metadata accessor for AccessibilityNodeAttachment(0);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *(_QWORD *)(a2 + 16);
  if (v9)
  {
    v10 = a2 + ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
    v20 = *(_QWORD *)(v6 + 72);
    v19[1] = a2;
    swift_bridgeObjectRetain();
    while (1)
    {
      outlined init with copy of AccessibilityNodeAttachment(v10, (uint64_t)v8);
      v11 = a1[1];
      v12 = a1[2];
      if (v11 >= v12)
      {
        v17 = v11 + 1;
        if (__OFADD__(v11, 1))
          goto LABEL_22;
        if (v12 < v17)
        {
          v18 = (_BYTE *)ProtobufEncoder.growBufferSlow(to:)(v17);
        }
        else
        {
          a1[1] = v17;
          v18 = (_BYTE *)(*a1 + v11);
        }
        *v18 = 10;
        v13 = a1[1];
      }
      else
      {
        *(_BYTE *)(*a1 + v11) = 10;
        v13 = v11 + 1;
        a1[1] = v11 + 1;
      }
      v14 = (_QWORD *)a1[3];
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v14[2] + 1, 1, v14);
      v16 = v14[2];
      v15 = v14[3];
      if (v16 >= v15 >> 1)
        v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v15 > 1), v16 + 1, 1, v14);
      v14[2] = v16 + 1;
      v14[v16 + 4] = v13;
      a1[3] = v14;
      if (__OFADD__(v13, 1))
        break;
      a1[1] = v13 + 1;
      AccessibilityNodeAttachment.encode(to:)(a1);
      if (v2)
      {
        outlined destroy of TypesettingConfiguration((uint64_t)v8, type metadata accessor for AccessibilityNodeAttachment);
LABEL_19:
        swift_bridgeObjectRelease();
        return;
      }
      ProtobufEncoder.endLengthDelimited()();
      outlined destroy of TypesettingConfiguration((uint64_t)v8, type metadata accessor for AccessibilityNodeAttachment);
      v10 += v20;
      if (!--v9)
        goto LABEL_19;
    }
    __break(1u);
LABEL_22:
    __break(1u);
  }
}

void DisplayList.Effect.init(from:)(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v6;
  unint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  int v10;
  uint64_t v11;
  char v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unsigned int *v16;
  _QWORD *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  _QWORD *v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  char v42;
  uint64_t v43;
  _QWORD *v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  unsigned __int8 v67;
  uint64_t v68;
  _QWORD *v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  BOOL v76;
  unint64_t v77;
  uint64_t v78;
  _QWORD *v79;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  _QWORD *v91;
  unint64_t v92;
  unint64_t v93;
  uint64_t v94;
  unint64_t v95;
  _QWORD *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;
  unint64_t v106;
  uint64_t v107;
  _BOOL8 v108;
  uint64_t v109;
  _QWORD *v110;
  unint64_t v111;
  unint64_t v112;
  uint64_t v113;
  unint64_t v114;
  uint64_t v115;
  uint64_t v116;
  unint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  unint64_t v122;
  uint64_t v123;
  uint64_t v124;
  unint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  unint64_t v134;
  uint64_t v135;
  uint64_t v136;
  unint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  unint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  __int128 v145;
  __int128 v146;
  uint64_t v147;
  uint64_t v148;
  unint64_t v149;
  uint64_t v150;
  uint64_t v151;
  unint64_t v152;
  uint64_t v153;
  _QWORD *v154;
  unint64_t *v155;
  unint64_t *v156;
  _QWORD *v157;
  __int128 v158;
  __int128 v159;
  __int128 v160;
  __int128 v161;
  __int128 v162;
  __int128 v163;
  __int128 v164;
  uint64_t v165;
  __int128 v166;
  __int128 v167;
  uint64_t v168;
  uint64_t v169[5];
  __int128 v170;
  __int128 v171;
  __int128 v172;
  __int128 v173;
  uint64_t v174;
  uint64_t v175;
  int v176;
  char v177;
  uint64_t v178;

  v4 = v2;
  v178 = *MEMORY[0x24BDAC8D0];
  v175 = 0;
  v176 = 0;
  v6 = 19;
  v177 = 19;
  v7 = a1[1];
  v8 = a1[2];
  if (v7 >= v8)
  {
    v10 = 0;
    v11 = 0;
    goto LABEL_4;
  }
  v165 = a2;
  v9 = a1 + 5;
  while (2)
  {
    v13 = a1[3];
    if (!v13)
      goto LABEL_13;
    v14 = a1[4];
    if (v7 >= v14)
    {
      if (v14 < v7)
        goto LABEL_236;
      a1[3] = 0;
LABEL_13:
      v15 = ProtobufDecoder.decodeVarint()();
      if (v4)
        goto LABEL_254;
      v13 = v15;
      if (v15 <= 7)
        goto LABEL_236;
    }
    switch(v13 >> 3)
    {
      case 1uLL:
        switch(v13 & 7)
        {
          case 0uLL:
            ProtobufDecoder.decodeVarint()();
            if (v4)
              goto LABEL_254;
            goto LABEL_214;
          case 1uLL:
            v149 = a1[1] + 8;
            goto LABEL_212;
          case 2uLL:
            v150 = ProtobufDecoder.decodeVarint()();
            if (v4)
              goto LABEL_254;
            if (v150 < 0)
              goto LABEL_295;
            v149 = a1[1] + v150;
LABEL_212:
            if (v8 < v149)
              goto LABEL_236;
            a1[1] = v149;
LABEL_214:
            outlined consume of DisplayList.Effect(v175, v176, v177);
            v151 = 1;
            break;
          case 5uLL:
            v149 = a1[1] + 4;
            goto LABEL_212;
          default:
            goto LABEL_236;
        }
        goto LABEL_223;
      case 2uLL:
        switch(v13 & 7)
        {
          case 0uLL:
            ProtobufDecoder.decodeVarint()();
            if (v4)
              goto LABEL_254;
            goto LABEL_222;
          case 1uLL:
            v152 = a1[1] + 8;
            goto LABEL_220;
          case 2uLL:
            v153 = ProtobufDecoder.decodeVarint()();
            if (v4)
              goto LABEL_254;
            if (v153 < 0)
              goto LABEL_296;
            v152 = a1[1] + v153;
LABEL_220:
            if (v8 < v152)
              goto LABEL_236;
            a1[1] = v152;
LABEL_222:
            outlined consume of DisplayList.Effect(v175, v176, v177);
            v151 = 2;
            break;
          case 5uLL:
            v152 = a1[1] + 4;
            goto LABEL_220;
          default:
            goto LABEL_236;
        }
LABEL_223:
        v175 = v151;
        v176 = 0;
        v177 = 19;
        goto LABEL_8;
      case 3uLL:
        if ((v13 & 7) == 2)
        {
          v147 = ProtobufDecoder.decodeVarint()();
          if (v4)
            goto LABEL_254;
          if (v147 < 0)
            goto LABEL_287;
          v16 = (unsigned int *)a1[1];
          if (v8 < (unint64_t)v16 + v147)
            goto LABEL_236;
          a1[3] = 29;
          a1[4] = (char *)v16 + v147;
        }
        else
        {
          if ((v13 & 7) != 5)
            goto LABEL_236;
          v16 = (unsigned int *)a1[1];
        }
        if (v8 < (unint64_t)(v16 + 1))
          goto LABEL_236;
        v148 = *v16;
        a1[1] = v16 + 1;
        outlined consume of DisplayList.Effect(v175, v176, v177);
        v175 = v148;
        v176 = 0;
        v12 = 4;
        goto LABEL_7;
      case 4uLL:
        if ((v13 & 7) != 2)
          goto LABEL_236;
        v17 = (_QWORD *)*v9;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v17 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v17[2] + 1, 1, v17);
        v19 = v17[2];
        v18 = v17[3];
        if (v19 >= v18 >> 1)
          v17 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v18 > 1), v19 + 1, 1, v17);
        v17[2] = v19 + 1;
        v17[v19 + 4] = v8;
        a1[5] = v17;
        v20 = ProtobufDecoder.decodeVarint()();
        if (v4)
          goto LABEL_254;
        if (v20 < 0)
        {
          __break(1u);
LABEL_256:
          __break(1u);
LABEL_257:
          __break(1u);
LABEL_258:
          __break(1u);
LABEL_259:
          __break(1u);
LABEL_260:
          __break(1u);
LABEL_261:
          __break(1u);
LABEL_262:
          __break(1u);
LABEL_263:
          __break(1u);
LABEL_264:
          __break(1u);
LABEL_265:
          __break(1u);
LABEL_266:
          __break(1u);
LABEL_267:
          __break(1u);
LABEL_268:
          __break(1u);
LABEL_269:
          __break(1u);
LABEL_270:
          __break(1u);
LABEL_271:
          __break(1u);
LABEL_272:
          __break(1u);
LABEL_273:
          __break(1u);
LABEL_274:
          __break(1u);
LABEL_275:
          __break(1u);
LABEL_276:
          __break(1u);
LABEL_277:
          __break(1u);
LABEL_278:
          __break(1u);
LABEL_279:
          __break(1u);
LABEL_280:
          __break(1u);
LABEL_281:
          __break(1u);
LABEL_282:
          __break(1u);
LABEL_283:
          __break(1u);
LABEL_284:
          __break(1u);
LABEL_285:
          __break(1u);
LABEL_286:
          __break(1u);
LABEL_287:
          __break(1u);
LABEL_288:
          __break(1u);
LABEL_289:
          __break(1u);
LABEL_290:
          __break(1u);
LABEL_291:
          __break(1u);
LABEL_292:
          __break(1u);
LABEL_293:
          __break(1u);
LABEL_294:
          __break(1u);
LABEL_295:
          __break(1u);
LABEL_296:
          __break(1u);
          __break(1u);
          __break(1u);
          __break(1u);
          __break(1u);
          __break(1u);
          __break(1u);
          __break(1u);
          __break(1u);
          __break(1u);
        }
        v21 = a1[1] + v20;
        if (v8 < v21)
          goto LABEL_236;
        a1[2] = v21;
        closure #1 in DisplayList.Effect.init(from:)((Swift::UInt)a1, (uint64_t)&v175);
        v22 = (_QWORD *)*v9;
        if (!*(_QWORD *)(*v9 + 16))
          goto LABEL_270;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
        {
          v23 = v22[2];
          if (!v23)
            goto LABEL_280;
        }
        else
        {
          v22 = specialized _ArrayBuffer._consumeAndCreateNew()(v22);
          v23 = v22[2];
          if (!v23)
            goto LABEL_280;
        }
        v24 = v23 - 1;
        v25 = v22[v24 + 4];
        v22[2] = v24;
        a1[5] = v22;
        a1[2] = v25;
        goto LABEL_8;
      case 5uLL:
        if ((v13 & 7) != 2)
          goto LABEL_236;
        v26 = (_QWORD *)*v9;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v26 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v26[2] + 1, 1, v26);
        v28 = v26[2];
        v27 = v26[3];
        if (v28 >= v27 >> 1)
          v26 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v27 > 1), v28 + 1, 1, v26);
        v26[2] = v28 + 1;
        v26[v28 + 4] = v8;
        a1[5] = v26;
        v29 = ProtobufDecoder.decodeVarint()();
        if (v4)
          goto LABEL_254;
        if (v29 < 0)
          goto LABEL_256;
        v30 = a1[1] + v29;
        if (v8 < v30)
          goto LABEL_236;
        a1[2] = v30;
        closure #2 in DisplayList.Effect.init(from:)(a1, (uint64_t)&v170);
        v31 = (_QWORD *)*v9;
        if (!*(_QWORD *)(*v9 + 16))
          goto LABEL_271;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
        {
          v32 = v31[2];
          if (!v32)
            goto LABEL_281;
        }
        else
        {
          v31 = specialized _ArrayBuffer._consumeAndCreateNew()(v31);
          v32 = v31[2];
          if (!v32)
            goto LABEL_281;
        }
        goto LABEL_60;
      case 6uLL:
        if ((v13 & 7) != 2)
          goto LABEL_236;
        v33 = (_QWORD *)*v9;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v33 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v33[2] + 1, 1, v33);
        v35 = v33[2];
        v34 = v33[3];
        if (v35 >= v34 >> 1)
          v33 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v34 > 1), v35 + 1, 1, v33);
        v33[2] = v35 + 1;
        v33[v35 + 4] = v8;
        a1[5] = v33;
        v36 = ProtobufDecoder.decodeVarint()();
        if (v4)
          goto LABEL_254;
        if (v36 < 0)
          goto LABEL_257;
        v37 = a1[1] + v36;
        if (v8 < v37)
          goto LABEL_236;
        a1[2] = v37;
        closure #3 in DisplayList.Effect.init(from:)(a1, (uint64_t)&v170);
        v31 = (_QWORD *)*v9;
        if (!*(_QWORD *)(*v9 + 16))
          goto LABEL_272;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
        {
          v32 = v31[2];
          if (!v32)
            goto LABEL_282;
        }
        else
        {
          v31 = specialized _ArrayBuffer._consumeAndCreateNew()(v31);
          v32 = v31[2];
          if (!v32)
            goto LABEL_282;
        }
LABEL_60:
        v38 = v32 - 1;
        v39 = v31[v38 + 4];
        v31[2] = v38;
        a1[5] = v31;
        a1[2] = v39;
        v40 = v170;
        v41 = DWORD2(v170);
        v42 = BYTE12(v170);
        outlined consume of DisplayList.Effect(v175, v176, v177);
        v175 = v40;
        v176 = v41;
        v177 = v42;
        goto LABEL_8;
      case 7uLL:
        v43 = swift_allocObject();
        if ((v13 & 7) != 2)
          goto LABEL_241;
        v44 = (_QWORD *)*v9;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v44 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v44[2] + 1, 1, v44);
        v46 = v44[2];
        v45 = v44[3];
        if (v46 >= v45 >> 1)
          v44 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v45 > 1), v46 + 1, 1, v44);
        v44[2] = v46 + 1;
        v44[v46 + 4] = v8;
        a1[5] = v44;
        v47 = ProtobufDecoder.decodeVarint()();
        if (v4)
          goto LABEL_253;
        if (v47 < 0)
          goto LABEL_258;
        v48 = a1[1] + v47;
        if (v8 < v48)
          goto LABEL_241;
        a1[2] = v48;
        *(_QWORD *)&v171 = 0;
        v170 = 0x3FF0000000000000uLL;
        *((_QWORD *)&v171 + 1) = 0x3FF0000000000000;
        v172 = 0uLL;
        closure #1 in CGAffineTransform.init(from:)((unint64_t)&v170, a1, v169);
        v49 = (_QWORD *)*v9;
        if (!*(_QWORD *)(*v9 + 16))
          goto LABEL_273;
        v161 = v171;
        v163 = v170;
        v159 = v172;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
        {
          v50 = v49[2];
          if (!v50)
            goto LABEL_283;
        }
        else
        {
          v49 = specialized _ArrayBuffer._consumeAndCreateNew()(v49);
          v50 = v49[2];
          if (!v50)
            goto LABEL_283;
        }
        v51 = v50 - 1;
        v52 = v49[v51 + 4];
        v49[2] = v51;
        a1[5] = v49;
        a1[2] = v52;
        *(_OWORD *)(v43 + 16) = v163;
        *(_OWORD *)(v43 + 32) = v161;
        *(_OWORD *)(v43 + 48) = v159;
        *(_QWORD *)(v43 + 72) = 0;
        *(_QWORD *)(v43 + 80) = 0;
        *(_QWORD *)(v43 + 64) = 0;
        *(_BYTE *)(v43 + 88) = 0;
        goto LABEL_85;
      case 8uLL:
        v43 = swift_allocObject();
        if ((v13 & 7) != 2)
          goto LABEL_241;
        v53 = (_QWORD *)*v9;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v53 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v53[2] + 1, 1, v53);
        v55 = v53[2];
        v54 = v53[3];
        if (v55 >= v54 >> 1)
          v53 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v54 > 1), v55 + 1, 1, v53);
        v53[2] = v55 + 1;
        v53[v55 + 4] = v8;
        a1[5] = v53;
        v56 = ProtobufDecoder.decodeVarint()();
        if (v4)
          goto LABEL_253;
        if (v56 < 0)
          goto LABEL_259;
        v57 = a1[1] + v56;
        if (v8 < v57)
          goto LABEL_241;
        a1[2] = v57;
        v171 = 0uLL;
        v170 = 0x3FF0000000000000uLL;
        v172 = 0x3FF0000000000000uLL;
        v173 = 0uLL;
        v174 = 0x3FF0000000000000;
        closure #1 in ProjectionTransform.init(from:)((unint64_t)&v170, a1, v169);
        v58 = (_QWORD *)*v9;
        if (!*(_QWORD *)(*v9 + 16))
          goto LABEL_274;
        v162 = v171;
        v164 = v170;
        v158 = v173;
        v160 = v172;
        v59 = v174;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
        {
          v60 = v58[2];
          if (!v60)
            goto LABEL_284;
        }
        else
        {
          v58 = specialized _ArrayBuffer._consumeAndCreateNew()(v58);
          v60 = v58[2];
          if (!v60)
            goto LABEL_284;
        }
        v61 = v60 - 1;
        v62 = v58[v61 + 4];
        v58[2] = v61;
        a1[5] = v58;
        a1[2] = v62;
        *(_OWORD *)(v43 + 16) = v164;
        *(_OWORD *)(v43 + 32) = v162;
        *(_OWORD *)(v43 + 48) = v160;
        *(_OWORD *)(v43 + 64) = v158;
        *(_QWORD *)(v43 + 80) = v59;
        *(_BYTE *)(v43 + 88) = 1;
LABEL_85:
        outlined consume of DisplayList.Effect(v175, v176, v177);
        v175 = v43;
        goto LABEL_6;
      case 9uLL:
        v63 = swift_allocObject();
        if ((v13 & 7) != 2)
          goto LABEL_241;
        ProtobufDecoder.beginMessage()();
        if (v4)
          goto LABEL_253;
        GraphicsFilter.init(from:)(a1, v63 + 16);
        v4 = 0;
        if (!*(_QWORD *)(*v9 + 16))
          goto LABEL_266;
        v64 = specialized Array._customRemoveLast()();
        if (!v64)
          v64 = specialized Array.remove(at:)(*(_QWORD *)(*v9 + 16) - 1);
        a1[2] = v64;
        outlined consume of DisplayList.Effect(v175, v176, v177);
        v175 = v63;
        v176 = 0;
        v12 = 9;
        goto LABEL_7;
      case 0xAuLL:
        if ((v13 & 7) == 0)
          goto LABEL_98;
        if ((v13 & 7) != 2)
          goto LABEL_236;
        v65 = ProtobufDecoder.decodeVarint()();
        if (v4)
          goto LABEL_254;
        if (v65 < 0)
          goto LABEL_285;
        v66 = a1[1] + v65;
        if (v8 < v66)
          goto LABEL_236;
        a1[3] = 80;
        a1[4] = v66;
LABEL_98:
        v67 = ProtobufDecoder.decodeVarint()();
        if (v4)
          goto LABEL_254;
        v68 = v67;
        outlined consume of DisplayList.Effect(v175, v176, v177);
        v175 = v68;
        v176 = 0;
        v177 = 2;
        goto LABEL_8;
      case 0xBuLL:
        if ((v13 & 7) != 2)
          goto LABEL_236;
        v69 = (_QWORD *)*v9;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v69 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v69[2] + 1, 1, v69);
        v71 = v69[2];
        v70 = v69[3];
        if (v71 >= v70 >> 1)
          v69 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v70 > 1), v71 + 1, 1, v69);
        v69[2] = v71 + 1;
        v69[v71 + 4] = v8;
        a1[5] = v69;
        v72 = ProtobufDecoder.decodeVarint()();
        if (v4)
          goto LABEL_254;
        if (v72 < 0)
          goto LABEL_260;
        v73 = a1[1] + v72;
        if (v8 < v73)
          goto LABEL_236;
        a1[2] = v73;
        CodableEffectAnimation.init(from:)(a1, (uint64_t)&v170);
        if (!specialized Array._getCount()(*v9))
          goto LABEL_275;
        v74 = specialized Array._customRemoveLast()();
        if (v74)
          goto LABEL_112;
        v75 = specialized Array._getCount()(*v9);
        v76 = __OFSUB__(v75, 1);
        v77 = v75 - 1;
        if (v76)
          goto LABEL_291;
        v74 = specialized Array.remove(at:)(v77);
LABEL_112:
        a1[2] = v74;
        v78 = swift_allocObject();
        outlined init with take of ScrollStateRequest(&v170, v78 + 16);
        outlined consume of DisplayList.Effect(v175, v176, v177);
        v175 = v78;
        v176 = 0;
        v12 = 10;
        goto LABEL_7;
      case 0xCuLL:
        if ((v13 & 7) != 2)
          goto LABEL_236;
        v79 = (_QWORD *)*v9;
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        *v9 = v79;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          v79 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v79[2] + 1, 1, v79);
          *v9 = v79;
        }
        v82 = v79[2];
        v81 = v79[3];
        if (v82 >= v81 >> 1)
          *v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v81 > 1), v82 + 1, 1, v79);
        v83 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v82, v8);
        _ViewInputs.base.modify(v83, v84);
        v85 = ProtobufDecoder.decodeVarint()();
        if (v4)
          goto LABEL_254;
        if (v85 < 0)
          goto LABEL_261;
        v86 = a1[1] + v85;
        if (v8 < v86)
          goto LABEL_236;
        a1[2] = v86;
        CodableViewFactory.init(from:)((uint64_t)a1, (uint64_t)&v170);
        if (!specialized Array._getCount()(*v9))
          goto LABEL_276;
        v87 = specialized Array._customRemoveLast()();
        if (v87)
          goto LABEL_125;
        v88 = specialized Array._getCount()(*v9);
        v76 = __OFSUB__(v88, 1);
        v89 = v88 - 1;
        if (v76)
          goto LABEL_292;
        v87 = specialized Array.remove(at:)(v89);
LABEL_125:
        a1[2] = v87;
        v90 = swift_allocObject();
        outlined init with copy of AnyTrackedValue((uint64_t)&v170, (uint64_t)v169);
        type metadata accessor for ScrollStateRequest(0, &lazy cache variable for type metadata for AnyViewFactory);
        type metadata accessor for ScrollStateRequest(0, &lazy cache variable for type metadata for _DisplayList_ViewFactory);
        if ((swift_dynamicCast() & 1) == 0)
        {
          lazy protocol witness table accessor for type CodableViewFactory.Error and conformance CodableViewFactory.Error();
          v166 = 0u;
          v167 = 0u;
          v168 = 0;
          swift_allocError();
          *v154 = 0;
          v154[1] = 0;
          swift_willThrow();
          v155 = (unint64_t *)&lazy cache variable for type metadata for _DisplayList_ViewFactory?;
          v156 = &lazy cache variable for type metadata for _DisplayList_ViewFactory;
LABEL_252:
          outlined destroy of AnyTrackedValue?((uint64_t)&v166, v155, v156);
          outlined destroy of CodableViewFactory((uint64_t)&v170);
LABEL_253:
          swift_deallocUninitializedObject();
LABEL_254:
          outlined consume of DisplayList.Effect(v175, v176, v177);
          return;
        }
        outlined init with take of ScrollStateRequest(&v166, v90 + 16);
        outlined destroy of CodableViewFactory((uint64_t)&v170);
        outlined consume of DisplayList.Effect(v175, v176, v177);
        v175 = v90;
        v176 = 0;
        v12 = 12;
LABEL_7:
        v177 = v12;
LABEL_8:
        v7 = a1[1];
        v8 = a1[2];
        if (v7 < v8)
          continue;
        v11 = v175;
        v10 = v176;
        v6 = v177;
        a2 = v165;
LABEL_4:
        a1[3] = 0;
        *(_QWORD *)a2 = v11;
        *(_DWORD *)(a2 + 8) = v10;
        *(_BYTE *)(a2 + 12) = v6;
        return;
      case 0xDuLL:
        if ((v13 & 7) != 2)
          goto LABEL_236;
        v91 = (_QWORD *)*v9;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v91 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v91[2] + 1, 1, v91);
        v93 = v91[2];
        v92 = v91[3];
        if (v93 >= v92 >> 1)
          v91 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v92 > 1), v93 + 1, 1, v91);
        v91[2] = v93 + 1;
        v91[v93 + 4] = v8;
        a1[5] = v91;
        v94 = ProtobufDecoder.decodeVarint()();
        if (v4)
          goto LABEL_254;
        if (v94 < 0)
          goto LABEL_262;
        v95 = a1[1] + v94;
        if (v8 < v95)
          goto LABEL_236;
        a1[2] = v95;
        CodableViewFactory.init(from:)((uint64_t)a1, (uint64_t)&v170);
        v96 = (_QWORD *)*v9;
        if (!*(_QWORD *)(*v9 + 16))
          goto LABEL_277;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
        {
          v97 = v96[2];
          if (!v97)
            goto LABEL_235;
        }
        else
        {
          v96 = specialized _ArrayBuffer._consumeAndCreateNew()(v96);
          v97 = v96[2];
          if (!v97)
          {
LABEL_235:
            __break(1u);
LABEL_236:
            lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
            swift_allocError();
            swift_willThrow();
            goto LABEL_254;
          }
        }
        v98 = v97 - 1;
        v99 = v96[v98 + 4];
        v96[2] = v98;
        a1[5] = v96;
        a1[2] = v99;
        v100 = swift_allocObject();
        outlined init with copy of AnyTrackedValue((uint64_t)&v170, (uint64_t)v169);
        type metadata accessor for ScrollStateRequest(0, &lazy cache variable for type metadata for AnyViewFactory);
        type metadata accessor for ScrollStateRequest(0, &lazy cache variable for type metadata for PlatformGroupFactory);
        if ((swift_dynamicCast() & 1) != 0)
        {
          outlined init with take of ScrollStateRequest(&v166, v100 + 16);
          outlined destroy of CodableViewFactory((uint64_t)&v170);
          outlined consume of DisplayList.Effect(v175, v176, v177);
          v175 = v100;
          v176 = 0;
          v12 = 3;
          goto LABEL_7;
        }
        lazy protocol witness table accessor for type CodableViewFactory.Error and conformance CodableViewFactory.Error();
        v166 = 0u;
        v167 = 0u;
        v168 = 0;
        swift_allocError();
        *v157 = 0;
        v157[1] = 0;
        swift_willThrow();
        v155 = (unint64_t *)&lazy cache variable for type metadata for PlatformGroupFactory?;
        v156 = &lazy cache variable for type metadata for PlatformGroupFactory;
        goto LABEL_252;
      case 0xEuLL:
        *(_QWORD *)&v170 = MEMORY[0x24BEE4AF8];
        if ((v13 & 7) == 2)
        {
          ProtobufDecoder.beginMessage()();
          if (v4)
            goto LABEL_244;
          closure #4 in DisplayList.Effect.init(from:)((uint64_t)a1, (unint64_t *)&v170);
          v4 = 0;
          if (!specialized Array._getCount()(*v9))
            goto LABEL_267;
          v101 = specialized Array._customRemoveLast()();
          if (!v101)
          {
            v102 = specialized Array._getCount()(*v9);
            v76 = __OFSUB__(v102, 1);
            v103 = v102 - 1;
            if (v76)
              goto LABEL_288;
            v101 = specialized Array.remove(at:)(v103);
          }
          a1[2] = v101;
          v104 = swift_allocObject();
          *(_QWORD *)(v104 + 16) = v170;
          outlined consume of DisplayList.Effect(v175, v176, v177);
          v175 = v104;
          v176 = 0;
          v12 = 13;
          goto LABEL_7;
        }
        lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
        swift_allocError();
        swift_willThrow();
LABEL_244:
        swift_bridgeObjectRelease();
        goto LABEL_254;
      case 0xFuLL:
        if ((v13 & 7) == 0)
          goto LABEL_153;
        if ((v13 & 7) != 2)
          goto LABEL_236;
        v105 = ProtobufDecoder.decodeVarint()();
        if (v4)
          goto LABEL_254;
        if (v105 < 0)
          goto LABEL_286;
        v106 = a1[1] + v105;
        if (v8 < v106)
          goto LABEL_236;
        a1[3] = 120;
        a1[4] = v106;
LABEL_153:
        v107 = ProtobufDecoder.decodeVarint()();
        if (v4)
          goto LABEL_254;
        v108 = v107 != 0;
        outlined consume of DisplayList.Effect(v175, v176, v177);
        v175 = v108;
        v176 = 0;
        v177 = 0;
        goto LABEL_8;
      case 0x10uLL:
        v109 = swift_allocObject();
        if ((v13 & 7) != 2)
          goto LABEL_241;
        v110 = (_QWORD *)*v9;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v110 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v110[2] + 1, 1, v110);
        v112 = v110[2];
        v111 = v110[3];
        if (v112 >= v111 >> 1)
          v110 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v111 > 1), v112 + 1, 1, v110);
        v110[2] = v112 + 1;
        v110[v112 + 4] = v8;
        a1[5] = v110;
        v113 = ProtobufDecoder.decodeVarint()();
        if (v4)
          goto LABEL_253;
        if (v113 < 0)
          goto LABEL_263;
        v114 = a1[1] + v113;
        if (v8 < v114)
          goto LABEL_241;
        a1[2] = v114;
        ContentTransition.State.init(from:)((unint64_t)a1, v109 + 16);
        if (!specialized Array._getCount()(*v9))
          goto LABEL_278;
        v115 = specialized Array._customRemoveLast()();
        if (v115)
          goto LABEL_167;
        v116 = specialized Array._getCount()(*v9);
        v76 = __OFSUB__(v116, 1);
        v117 = v116 - 1;
        if (v76)
          goto LABEL_293;
        v115 = specialized Array.remove(at:)(v117);
LABEL_167:
        a1[2] = v115;
        outlined consume of DisplayList.Effect(v175, v176, v177);
        v175 = v109;
        v176 = 0;
        v12 = 11;
        goto LABEL_7;
      case 0x11uLL:
        if ((v13 & 7) != 2)
          goto LABEL_236;
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
        v118 = *(_QWORD *)(a1[5] + 16);
        specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(v118);
        v119 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v118, v8);
        _ViewInputs.base.modify(v119, v120);
        v121 = ProtobufDecoder.decodeVarint()();
        if (v4)
          goto LABEL_254;
        if (v121 < 0)
          goto LABEL_264;
        v122 = a1[1] + v121;
        if (v8 < v122)
          goto LABEL_236;
        a1[2] = v122;
        if (!specialized Array._getCount()(a1[5]))
          goto LABEL_268;
        v123 = specialized Array._customRemoveLast()();
        if (v123)
          goto LABEL_176;
        v124 = specialized Array._getCount()(*v9);
        v76 = __OFSUB__(v124, 1);
        v125 = v124 - 1;
        if (v76)
          goto LABEL_289;
        v123 = specialized Array.remove(at:)(v125);
LABEL_176:
        a1[2] = v123;
        v126 = swift_allocEmptyBox();
        outlined consume of DisplayList.Effect(v175, v176, v177);
        v175 = v126;
        v176 = 0;
        v12 = 14;
        goto LABEL_7;
      case 0x13uLL:
        v128 = swift_allocObject();
        if ((v13 & 7) != 2)
          goto LABEL_241;
        v129 = v3;
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
        v130 = *(_QWORD *)(a1[5] + 16);
        specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(v130);
        v131 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v130, v8);
        _ViewInputs.base.modify(v131, v132);
        v133 = ProtobufDecoder.decodeVarint()();
        if (v4)
          goto LABEL_253;
        if (v133 < 0)
          goto LABEL_265;
        v134 = a1[1] + v133;
        if (v8 >= v134)
        {
          v3 = v129;
          a1[2] = v134;
          StrongHash.init(from:)((unint64_t)a1, (_DWORD *)(v128 + 16));
          if (!specialized Array._getCount()(*v9))
            goto LABEL_279;
          v135 = specialized Array._customRemoveLast()();
          if (!v135)
          {
            v136 = specialized Array._getCount()(*v9);
            v76 = __OFSUB__(v136, 1);
            v137 = v136 - 1;
            if (v76)
              goto LABEL_294;
            v135 = specialized Array.remove(at:)(v137);
          }
          a1[2] = v135;
          outlined consume of DisplayList.Effect(v175, v176, v177);
          v175 = v128;
          v176 = 0;
          v12 = 15;
          goto LABEL_7;
        }
LABEL_241:
        lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
        swift_allocError();
        swift_willThrow();
        goto LABEL_253;
      case 0x14uLL:
        v138 = swift_allocObject();
        if ((v13 & 7) != 2)
          goto LABEL_241;
        ProtobufDecoder.beginMessage()();
        if (v4)
          goto LABEL_253;
        DisplayList.InterpolatorAnimation.init(from:)((unint64_t)a1, (_OWORD *)(v138 + 16));
        v4 = 0;
        if (!specialized Array._getCount()(*v9))
          goto LABEL_269;
        v139 = specialized Array._customRemoveLast()();
        if (v139)
          goto LABEL_194;
        v140 = specialized Array._getCount()(*v9);
        v76 = __OFSUB__(v140, 1);
        v141 = v140 - 1;
        if (v76)
          goto LABEL_290;
        v139 = specialized Array.remove(at:)(v141);
LABEL_194:
        a1[2] = v139;
        outlined consume of DisplayList.Effect(v175, v176, v177);
        v175 = v138;
        v176 = 0;
        v12 = 18;
        goto LABEL_7;
      case 0x15uLL:
        v142 = swift_allocObject();
        if ((v13 & 7) != 2)
          goto LABEL_239;
        specialized ProtobufDecoder.decodeMessage<A>()((double *)&v170);
        if (v4)
          goto LABEL_253;
        v143 = v171;
        *(_OWORD *)(v142 + 16) = v170;
        *(_QWORD *)(v142 + 32) = v143;
        *(_OWORD *)(v142 + 40) = 0u;
        *(_OWORD *)(v142 + 56) = 0u;
        *(_OWORD *)(v142 + 72) = 0u;
        *(_BYTE *)(v142 + 88) = 2;
        goto LABEL_5;
      case 0x16uLL:
        v142 = swift_allocObject();
        if ((v13 & 7) == 2)
        {
          specialized ProtobufDecoder.decodeMessage<A>()((double *)&v170);
          if (v4)
            goto LABEL_253;
          v144 = v174;
          v145 = v171;
          *(_OWORD *)(v142 + 16) = v170;
          *(_OWORD *)(v142 + 32) = v145;
          v146 = v173;
          *(_OWORD *)(v142 + 48) = v172;
          *(_OWORD *)(v142 + 64) = v146;
          *(_QWORD *)(v142 + 80) = v144;
          *(_BYTE *)(v142 + 88) = 3;
LABEL_5:
          outlined consume of DisplayList.Effect(v175, v176, v177);
          v175 = v142;
LABEL_6:
          v176 = 0;
          v12 = 8;
          goto LABEL_7;
        }
LABEL_239:
        lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
        swift_allocError();
        swift_willThrow();
        goto LABEL_253;
      default:
        *(_QWORD *)&v170 = v13;
        ProtobufDecoder.skipField(_:)((SwiftUI::ProtobufFormat::Field)&v170);
        v4 = v127;
        if (v127)
          goto LABEL_254;
        goto LABEL_8;
    }
  }
}

Swift::UInt closure #1 in DisplayList.Effect.init(from:)(Swift::UInt result, uint64_t a2)
{
  uint64_t v2;
  Swift::UInt v3;
  unint64_t v4;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  char v11;
  Swift::UInt v12;

  v3 = result;
  v4 = *(_QWORD *)(result + 8);
  if (v4 >= *(_QWORD *)(result + 16))
  {
    *(_QWORD *)(result + 24) = 0;
    return result;
  }
  result = *(_QWORD *)(result + 24);
  if (result)
  {
    v6 = *(_QWORD *)(v3 + 32);
    if (v4 < v6)
      goto LABEL_10;
    if (v6 < v4)
    {
LABEL_8:
      lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
      swift_allocError();
      return swift_willThrow();
    }
    *(_QWORD *)(v3 + 24) = 0;
  }
  result = ProtobufDecoder.decodeVarint()();
  if (v2)
    return result;
  if (result < 8)
    goto LABEL_8;
LABEL_10:
  if ((result & 0xFFFFFFFFFFFFFFF8) == 8)
  {
    v12 = result;
    result = ProtobufDecoder.uintField(_:)((SwiftUI::ProtobufFormat::Field)&v12);
    if (v7)
      return result;
    v8 = result;
    if (result >> 31)
      v8 = 0;
    v9 = *(_QWORD *)a2;
    v10 = *(_DWORD *)(a2 + 8);
    *(_QWORD *)a2 = v8;
  }
  else
  {
    v9 = *(_QWORD *)a2;
    v10 = *(_DWORD *)(a2 + 8);
    *(_QWORD *)a2 = 0;
  }
  *(_DWORD *)(a2 + 8) = 0;
  v11 = *(_BYTE *)(a2 + 12);
  *(_BYTE *)(a2 + 12) = 5;
  return outlined consume of DisplayList.Effect(v9, v10, v11);
}

uint64_t closure #2 in DisplayList.Effect.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  unint64_t v4;
  unint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned __int8 v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  int v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unsigned int v35;
  _QWORD *v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unsigned __int8 v46;
  uint64_t v47;
  unsigned int v48;
  int v49;
  int v51;
  uint64_t v52;
  _QWORD v53[4];
  unsigned __int8 v54;
  uint64_t v55;

  v4 = a1[1];
  v5 = a1[2];
  if (v4 >= v5)
  {
    v51 = 0;
    v52 = 0;
    LOBYTE(v6) = 0;
    v55 = 0;
    v7 = 0;
    v8 = 0;
    LOBYTE(v10) = 1;
    v9 = 6;
LABEL_4:
    a1[3] = 0;
    result = swift_allocObject();
    v12 = v55;
    *(_QWORD *)(result + 16) = v52;
    *(_QWORD *)(result + 24) = v12;
    *(_QWORD *)(result + 32) = v7;
    *(_QWORD *)(result + 40) = v8;
    *(_BYTE *)(result + 48) = v9;
    *(_BYTE *)(result + 49) = v6 & 1;
    *(_BYTE *)(result + 50) = v10 & 1;
    *(_DWORD *)(result + 52) = v51;
    *(_QWORD *)a2 = result;
    *(_DWORD *)(a2 + 8) = 0;
    *(_BYTE *)(a2 + 12) = 6;
    return result;
  }
  v51 = 0;
  v52 = 0;
  v6 = 0;
  v55 = 0;
  v7 = 0;
  v8 = 0;
  v9 = 6;
  v10 = 1;
  while (1)
  {
    v14 = a1[3];
    if (v14)
    {
      v15 = a1[4];
      if (v4 < v15)
        goto LABEL_14;
      if (v15 < v4)
        goto LABEL_62;
      a1[3] = 0;
    }
    v14 = ProtobufDecoder.decodeVarint()();
    if (v2)
      return outlined consume of Path.Storage(v52, v55, v7, v8, v9);
    if (v14 < 8)
      goto LABEL_62;
LABEL_14:
    v16 = v14 >> 3;
    if (v14 >> 3 == 3)
    {
      if ((v14 & 7) != 0)
      {
        if ((v14 & 7) != 2)
          goto LABEL_62;
        v28 = ProtobufDecoder.decodeVarint()();
        if (v2)
          return outlined consume of Path.Storage(v52, v55, v7, v8, v9);
        if (v28 < 0)
          goto LABEL_73;
        v29 = a1[1] + v28;
        if (v5 < v29)
          goto LABEL_62;
        a1[3] = 24;
        a1[4] = v29;
      }
      v30 = ProtobufDecoder.decodeVarint()();
      if (v2)
        return outlined consume of Path.Storage(v52, v55, v7, v8, v9);
      v51 = v30;
      goto LABEL_7;
    }
    if (v16 != 2)
      break;
    if ((v14 & 7) != 2)
      goto LABEL_62;
    v10 = a1[5];
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v10 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v10 + 16) + 1, 1, (_QWORD *)v10);
    v32 = *(_QWORD *)(v10 + 16);
    v31 = *(_QWORD *)(v10 + 24);
    if (v32 >= v31 >> 1)
      v10 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v31 > 1), v32 + 1, 1, (_QWORD *)v10);
    *(_QWORD *)(v10 + 16) = v32 + 1;
    *(_QWORD *)(v10 + 8 * v32 + 32) = v5;
    a1[5] = v10;
    v33 = ProtobufDecoder.decodeVarint()();
    if (v2)
      return outlined consume of Path.Storage(v52, v55, v7, v8, v9);
    if (v33 < 0)
      goto LABEL_69;
    v34 = a1[1] + v33;
    if (v5 < v34)
      goto LABEL_62;
    a1[2] = v34;
    v35 = specialized FillStyle.init(from:)(a1);
    v36 = (_QWORD *)a1[5];
    if (!v36[2])
      goto LABEL_71;
    v37 = v35;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
    {
      v38 = v36[2];
      if (!v38)
        goto LABEL_61;
    }
    else
    {
      v36 = specialized _ArrayBuffer._consumeAndCreateNew()(v36);
      v38 = v36[2];
      if (!v38)
      {
LABEL_61:
        __break(1u);
LABEL_62:
        lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
        swift_allocError();
        swift_willThrow();
        return outlined consume of Path.Storage(v52, v55, v7, v8, v9);
      }
    }
    v39 = v38 - 1;
    v40 = v36[v39 + 4];
    v36[2] = v39;
    v6 = v37 & 1;
    v10 = (v37 >> 8) & 1;
    a1[5] = v36;
    a1[2] = v40;
LABEL_7:
    v4 = a1[1];
    v5 = a1[2];
    if (v4 >= v5)
      goto LABEL_4;
  }
  if (v16 != 1)
  {
    switch(v14 & 7)
    {
      case 0uLL:
        ProtobufDecoder.decodeVarint()();
        if (v2)
          return outlined consume of Path.Storage(v52, v55, v7, v8, v9);
        goto LABEL_7;
      case 1uLL:
        v13 = a1[1] + 8;
        if (v5 >= v13)
          goto LABEL_6;
        goto LABEL_62;
      case 2uLL:
        v41 = ProtobufDecoder.decodeVarint()();
        if (v2)
          return outlined consume of Path.Storage(v52, v55, v7, v8, v9);
        if (v41 < 0)
          goto LABEL_74;
        v13 = a1[1] + v41;
        if (v5 < v13)
          goto LABEL_62;
LABEL_6:
        a1[1] = v13;
        break;
      case 5uLL:
        v13 = a1[1] + 4;
        if (v5 < v13)
          goto LABEL_62;
        goto LABEL_6;
      default:
        goto LABEL_62;
    }
    goto LABEL_7;
  }
  if ((v14 & 7) != 2)
    goto LABEL_62;
  v48 = v10;
  v10 = a1[5];
  v49 = v6;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v10 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v10 + 16) + 1, 1, (_QWORD *)v10);
  v18 = *(_QWORD *)(v10 + 16);
  v17 = *(_QWORD *)(v10 + 24);
  if (v18 >= v17 >> 1)
    v10 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v17 > 1), v18 + 1, 1, (_QWORD *)v10);
  *(_QWORD *)(v10 + 16) = v18 + 1;
  *(_QWORD *)(v10 + 8 * v18 + 32) = v5;
  a1[5] = v10;
  v19 = ProtobufDecoder.decodeVarint()();
  if (v2)
    return outlined consume of Path.Storage(v52, v55, v7, v8, v9);
  if ((v19 & 0x8000000000000000) == 0)
  {
    v20 = a1[1] + v19;
    if (v5 < v20)
      goto LABEL_62;
    a1[2] = v20;
    specialized Path.init(from:)((unint64_t)a1, (uint64_t)v53);
    v10 = a1[5];
    if (!*(_QWORD *)(v10 + 16))
      goto LABEL_70;
    v21 = v53[0];
    v22 = v53[1];
    v23 = v53[3];
    v47 = v53[2];
    v46 = v54;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
    {
      v24 = *(_QWORD *)(v10 + 16);
      if (!v24)
        goto LABEL_72;
    }
    else
    {
      v10 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()((_QWORD *)v10);
      v24 = *(_QWORD *)(v10 + 16);
      if (!v24)
        goto LABEL_72;
    }
    v25 = v24 - 1;
    v26 = v9;
    v27 = *(_QWORD *)(v10 + 8 * v25 + 32);
    *(_QWORD *)(v10 + 16) = v25;
    outlined consume of Path.Storage(v52, v55, v7, v8, v26);
    v52 = v21;
    a1[5] = v10;
    a1[2] = v27;
    v55 = v22;
    v7 = v47;
    v8 = v23;
    v9 = v46;
    v10 = v48;
    v6 = v49;
    goto LABEL_7;
  }
  __break(1u);
LABEL_69:
  __break(1u);
LABEL_70:
  __break(1u);
LABEL_71:
  __break(1u);
LABEL_72:
  __break(1u);
LABEL_73:
  __break(1u);
LABEL_74:
  __break(1u);
  __break(1u);
  v42 = specialized _ArrayBuffer._consumeAndCreateNew()((_QWORD *)v10);
  v43 = v42[2];
  if (!v43)
  {
    __break(1u);
    v42 = (_QWORD *)a1[5];
    if (v42[2])
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
      {
        v43 = v42[2];
        if (v43)
          goto LABEL_67;
LABEL_78:
        __break(1u);
        JUMPOUT(0x234DF00F0);
      }
    }
    else
    {
      __break(1u);
    }
    v42 = specialized _ArrayBuffer._consumeAndCreateNew()(v42);
    v43 = v42[2];
    if (!v43)
      goto LABEL_78;
  }
LABEL_67:
  v44 = v43 - 1;
  v45 = v42[v44 + 4];
  v42[2] = v44;
  result = outlined consume of Path.Storage(v52, v55, v7, v8, v9);
  a1[5] = v42;
  a1[2] = v45;
  return result;
}

uint64_t closure #3 in DisplayList.Effect.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  unint64_t v5;
  unint64_t v6;
  int v7;
  __int16 v8;
  char v9;
  _QWORD *v10;
  uint64_t result;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  __int16 v30;
  char v31;

  v5 = a1[1];
  v6 = a1[2];
  if (v5 >= v6)
  {
    v7 = 0;
    v8 = 0;
    v9 = 0;
    v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
LABEL_4:
    a1[3] = 0;
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v10;
    *(_WORD *)(result + 24) = v8;
    *(_BYTE *)(result + 26) = v9;
    *(_DWORD *)(result + 28) = v7;
    *(_QWORD *)a2 = result;
    *(_DWORD *)(a2 + 8) = 0;
    *(_BYTE *)(a2 + 12) = 7;
    return result;
  }
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
  while (1)
  {
    v13 = a1[3];
    if (v13)
    {
      v14 = a1[4];
      if (v5 < v14)
        goto LABEL_14;
      if (v14 < v5)
        goto LABEL_47;
      a1[3] = 0;
    }
    v15 = ProtobufDecoder.decodeVarint()();
    if (v2)
      return swift_bridgeObjectRelease();
    v13 = v15;
    if (v15 < 8)
      goto LABEL_47;
LABEL_14:
    if (v13 >> 3 == 2)
    {
      if ((v13 & 7) != 0)
      {
        if ((v13 & 7) != 2)
          goto LABEL_47;
        v22 = ProtobufDecoder.decodeVarint()();
        if (v2)
          return swift_bridgeObjectRelease();
        if (v22 < 0)
          goto LABEL_54;
        v23 = a1[1] + v22;
        if (v6 < v23)
          goto LABEL_47;
        a1[3] = 16;
        a1[4] = v23;
      }
      v24 = ProtobufDecoder.decodeVarint()();
      if (v2)
        return swift_bridgeObjectRelease();
      v7 = v24;
      goto LABEL_7;
    }
    if (v13 >> 3 != 1)
    {
      switch(v13 & 7)
      {
        case 0uLL:
          ProtobufDecoder.decodeVarint()();
          if (v2)
            return swift_bridgeObjectRelease();
          goto LABEL_7;
        case 1uLL:
          v12 = a1[1] + 8;
          if (v6 < v12)
            goto LABEL_47;
          goto LABEL_6;
        case 2uLL:
          v25 = ProtobufDecoder.decodeVarint()();
          if (v2)
            return swift_bridgeObjectRelease();
          if (v25 < 0)
            goto LABEL_55;
          v12 = a1[1] + v25;
          if (v6 < v12)
            goto LABEL_47;
LABEL_6:
          a1[1] = v12;
          break;
        case 5uLL:
          v12 = a1[1] + 4;
          if (v6 < v12)
            goto LABEL_47;
          goto LABEL_6;
        default:
          goto LABEL_47;
      }
      goto LABEL_7;
    }
    swift_bridgeObjectRelease();
    if ((v13 & 7) != 2)
      goto LABEL_50;
    v10 = (_QWORD *)a1[5];
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v10[2] + 1, 1, v10);
    v17 = v10[2];
    v16 = v10[3];
    if (v17 >= v16 >> 1)
      v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v16 > 1), v17 + 1, 1, v10);
    v10[2] = v17 + 1;
    v10[v17 + 4] = v6;
    a1[5] = v10;
    result = ProtobufDecoder.decodeVarint()();
    if (v2)
      return result;
    if (result < 0)
      break;
    v18 = a1[1] + result;
    if (v6 < v18)
    {
LABEL_50:
      lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
      swift_allocError();
      return swift_willThrow();
    }
    a1[2] = v18;
    DisplayList.init(from:)(&v29, a1);
    v10 = (_QWORD *)a1[5];
    if (!v10[2])
      goto LABEL_53;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
    {
      v19 = v10[2];
      if (!v19)
        goto LABEL_46;
    }
    else
    {
      v10 = specialized _ArrayBuffer._consumeAndCreateNew()(v10);
      v19 = v10[2];
      if (!v19)
      {
LABEL_46:
        __break(1u);
LABEL_47:
        lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
        swift_allocError();
        swift_willThrow();
        return swift_bridgeObjectRelease();
      }
    }
    v20 = v19 - 1;
    v21 = v10[v20 + 4];
    v10[2] = v20;
    a1[5] = v10;
    a1[2] = v21;
    v10 = v29;
    v8 = v30;
    v9 = v31;
LABEL_7:
    v5 = a1[1];
    v6 = a1[2];
    if (v5 >= v6)
      goto LABEL_4;
  }
  __break(1u);
LABEL_53:
  __break(1u);
LABEL_54:
  __break(1u);
LABEL_55:
  __break(1u);
  __break(1u);
  result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v10);
  v28 = *(_QWORD *)(result + 16);
  if (!v28)
  {
    __break(1u);
    JUMPOUT(0x234DF04ECLL);
  }
  v26 = v28 - 1;
  v27 = *(_QWORD *)(result + 8 * v26 + 32);
  *(_QWORD *)(result + 16) = v26;
  a1[5] = result;
  a1[2] = v27;
  return result;
}

void closure #4 in DisplayList.Effect.init(from:)(uint64_t a1, unint64_t *a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *i;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;

  v5 = type metadata accessor for AccessibilityNodeAttachment(0);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  for (i = (char *)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
        ;
        outlined init with take of AccessibilityNodeAttachment((uint64_t)i, v22+ ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))+ *(_QWORD *)(v6 + 72) * v25))
  {
    while (1)
    {
      v9 = *(_QWORD *)(a1 + 8);
      v10 = *(_QWORD *)(a1 + 16);
      if (v9 >= v10)
      {
        *(_QWORD *)(a1 + 24) = 0;
        return;
      }
      v11 = *(_QWORD *)(a1 + 24);
      if (v11)
      {
        v12 = *(_QWORD *)(a1 + 32);
        if (v9 < v12)
          goto LABEL_9;
        if (v12 < v9)
          goto LABEL_39;
        *(_QWORD *)(a1 + 24) = 0;
      }
      v11 = ProtobufDecoder.decodeVarint()();
      if (v2)
        return;
      if (v11 <= 7)
      {
LABEL_39:
        lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
        swift_allocError();
        swift_willThrow();
        return;
      }
LABEL_9:
      if ((v11 & 0xFFFFFFFFFFFFFFF8) == 8)
        break;
      switch(v11 & 7)
      {
        case 0uLL:
          ProtobufDecoder.decodeVarint()();
          if (!v2)
            continue;
          return;
        case 1uLL:
          v26 = *(_QWORD *)(a1 + 8) + 8;
          goto LABEL_34;
        case 2uLL:
          v27 = ProtobufDecoder.decodeVarint()();
          if (v2)
            return;
          if (v27 < 0)
            goto LABEL_45;
          v26 = *(_QWORD *)(a1 + 8) + v27;
LABEL_34:
          if (v10 < v26)
            goto LABEL_39;
          *(_QWORD *)(a1 + 8) = v26;
          break;
        case 5uLL:
          v26 = *(_QWORD *)(a1 + 8) + 4;
          goto LABEL_34;
        default:
          goto LABEL_39;
      }
    }
    if ((v11 & 7) != 2)
      goto LABEL_39;
    v13 = *(_QWORD **)(a1 + 40);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v13 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v13[2] + 1, 1, v13);
    v15 = v13[2];
    v14 = v13[3];
    if (v15 >= v14 >> 1)
      v13 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v14 > 1), v15 + 1, 1, v13);
    v13[2] = v15 + 1;
    v13[v15 + 4] = v10;
    *(_QWORD *)(a1 + 40) = v13;
    v16 = ProtobufDecoder.decodeVarint()();
    if (v2)
      return;
    if (v16 < 0)
      break;
    v17 = *(_QWORD *)(a1 + 8) + v16;
    if (v10 < v17)
      goto LABEL_39;
    *(_QWORD *)(a1 + 16) = v17;
    AccessibilityNodeAttachment.init(from:)((id *)a1, (uint64_t)i);
    v18 = *(_QWORD **)(a1 + 40);
    if (!v18[2])
      goto LABEL_43;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
    {
      v19 = v18[2];
      if (!v19)
        goto LABEL_44;
    }
    else
    {
      v18 = specialized _ArrayBuffer._consumeAndCreateNew()(v18);
      v19 = v18[2];
      if (!v19)
        goto LABEL_44;
    }
    v20 = v19 - 1;
    v21 = v18[v20 + 4];
    v18[2] = v20;
    *(_QWORD *)(a1 + 40) = v18;
    *(_QWORD *)(a1 + 16) = v21;
    v22 = *a2;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *a2 = v22;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      v22 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v22 + 16) + 1, 1, v22);
      *a2 = v22;
    }
    v25 = *(_QWORD *)(v22 + 16);
    v24 = *(_QWORD *)(v22 + 24);
    if (v25 >= v24 >> 1)
    {
      v22 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v24 > 1, v25 + 1, 1, v22);
      *a2 = v22;
    }
    *(_QWORD *)(v22 + 16) = v25 + 1;
  }
  __break(1u);
LABEL_43:
  __break(1u);
LABEL_44:
  __break(1u);
LABEL_45:
  __break(1u);
  __break(1u);
  v30 = specialized _ArrayBuffer._consumeAndCreateNew()(a2);
  v31 = v30[2];
  if (!v31)
  {
    __break(1u);
    JUMPOUT(0x234DF0884);
  }
  v28 = v31 - 1;
  v29 = v30[v28 + 4];
  v30[2] = v28;
  *(_QWORD *)(a1 + 40) = v30;
  *(_QWORD *)(a1 + 16) = v29;
}

void protocol witness for ProtobufEncodableMessage.encode(to:) in conformance DisplayList.Effect()
{
  DisplayList.Effect.encode(to:)();
}

void protocol witness for ProtobufDecodableMessage.init(from:) in conformance DisplayList.Effect(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  DisplayList.Effect.init(from:)(a1, a2);
}

uint64_t _DisplayList_AnyEffectAnimation.encodeAnimation(to:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v8;
  char v9;

  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(a3 + 24))(&v8, a2, a3);
  if ((v9 & 1) != 0)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a3 + 16) + 8))(a1, a2);
  else
    return ProtobufEncoder.messageField<A>(_:_:)(v8, v3, a2, *(_QWORD *)(a3 + 16));
}

uint64_t CodableEffectAnimation.Tag.rawValue.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

SwiftUI::CodableEffectAnimation::Tag __swiftcall CodableEffectAnimation.Tag.init(rawValue:)(SwiftUI::CodableEffectAnimation::Tag rawValue)
{
  SwiftUI::CodableEffectAnimation::Tag *v1;

  v1->rawValue = rawValue.rawValue;
  return rawValue;
}

BOOL static CodableEffectAnimation.Tag.== infix(_:_:)(_QWORD *a1, _QWORD *a2)
{
  return *a1 == *a2;
}

uint64_t CodableEffectAnimation.encode(to:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1[3];
  v4 = v1[4];
  __swift_project_boxed_opaque_existential_1(v1, v3);
  return _DisplayList_AnyEffectAnimation.encodeAnimation(to:)(a1, v3, v4);
}

uint64_t CodableEffectAnimation.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  __int128 v52;
  uint64_t v53;
  __int128 v54;
  _QWORD *v55;
  ValueMetadata *v56;
  _UNKNOWN **v57;
  _OWORD v58[2];
  uint64_t v59;
  _OWORD v60[2];
  uint64_t v61;
  uint64_t v62;

  v3 = v2;
  v59 = 0;
  memset(v58, 0, sizeof(v58));
  v6 = a1[1];
  v7 = a1[2];
  if (v6 >= v7)
    goto LABEL_66;
  v62 = a2;
  while (2)
  {
    v8 = a1[3];
    if (v8)
    {
      v9 = a1[4];
      if (v6 < v9)
        goto LABEL_9;
      if (v9 < v6)
        break;
      a1[3] = 0;
    }
    v10 = ProtobufDecoder.decodeVarint()();
    if (v3)
      return outlined destroy of AnyTrackedValue?((uint64_t)v58, (unint64_t *)&lazy cache variable for type metadata for _DisplayList_AnyEffectAnimation?, (unint64_t *)&lazy cache variable for type metadata for _DisplayList_AnyEffectAnimation);
    v8 = v10;
    if (v10 >= 8)
    {
LABEL_9:
      switch(v8 >> 3)
      {
        case 1uLL:
          v56 = &type metadata for DisplayList.OffsetAnimation;
          v57 = &protocol witness table for DisplayList.OffsetAnimation;
          v11 = swift_allocObject();
          *(_QWORD *)&v54 = v11;
          if ((v8 & 7) != 2)
            goto LABEL_71;
          v12 = v11;
          v13 = (_QWORD *)a1[5];
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v13 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v13[2] + 1, 1, v13);
          v15 = v13[2];
          v14 = v13[3];
          if (v15 >= v14 >> 1)
            v13 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v14 > 1), v15 + 1, 1, v13);
          v13[2] = v15 + 1;
          v13[v15 + 4] = v7;
          a1[5] = v13;
          v16 = a1;
          v17 = ProtobufDecoder.decodeVarint()();
          if (v3)
            goto LABEL_82;
          if (v17 < 0)
          {
            __break(1u);
LABEL_84:
            __break(1u);
LABEL_85:
            __break(1u);
LABEL_86:
            __break(1u);
LABEL_87:
            __break(1u);
LABEL_88:
            __break(1u);
LABEL_89:
            __break(1u);
LABEL_90:
            __break(1u);
LABEL_91:
            __break(1u);
LABEL_92:
            __break(1u);
            __break(1u);
            v48 = specialized _ArrayBuffer._consumeAndCreateNew()(v16);
            v49 = v48[2];
            if (v49)
              goto LABEL_81;
            __break(1u);
            v48 = (_QWORD *)a1[5];
            if (v48[2])
            {
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
              {
                v49 = v48[2];
                if (v49)
                  goto LABEL_81;
LABEL_75:
                __break(1u);
                v48 = (_QWORD *)a1[5];
                if (v48[2])
                {
                  if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
                  {
                    v49 = v48[2];
                    if (!v49)
                      goto LABEL_78;
LABEL_81:
                    v50 = v49 - 1;
                    v51 = v48[v50 + 4];
                    v48[2] = v50;
                    a1[5] = v48;
                    a1[2] = v51;
                    goto LABEL_82;
                  }
                }
                else
                {
                  __break(1u);
                }
                v48 = specialized _ArrayBuffer._consumeAndCreateNew()(v48);
                v49 = v48[2];
                if (v49)
                  goto LABEL_81;
LABEL_78:
                __break(1u);
                v48 = (_QWORD *)a1[5];
                if (v48[2])
                {
                  if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
                  {
                    v49 = v48[2];
                    if (v49)
                      goto LABEL_81;
LABEL_102:
                    __break(1u);
                    JUMPOUT(0x234DF122CLL);
                  }
                }
                else
                {
                  __break(1u);
                }
                v48 = specialized _ArrayBuffer._consumeAndCreateNew()(v48);
                v49 = v48[2];
                if (v49)
                  goto LABEL_81;
                goto LABEL_102;
              }
            }
            else
            {
              __break(1u);
            }
            v48 = specialized _ArrayBuffer._consumeAndCreateNew()(v48);
            v49 = v48[2];
            if (v49)
              goto LABEL_81;
            goto LABEL_75;
          }
          v18 = a1[1] + v17;
          if (v7 < v18)
          {
LABEL_71:
            lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
            swift_allocError();
            swift_willThrow();
LABEL_82:
            outlined destroy of AnyTrackedValue?((uint64_t)v58, (unint64_t *)&lazy cache variable for type metadata for _DisplayList_AnyEffectAnimation?, (unint64_t *)&lazy cache variable for type metadata for _DisplayList_AnyEffectAnimation);
            return __swift_deallocate_boxed_opaque_existential_1((uint64_t)&v54);
          }
          a1[2] = v18;
          specialized EffectAnimation.init(from:)(a1, (double *)v60);
          v16 = (_QWORD *)a1[5];
          if (!v16[2])
            goto LABEL_89;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v16 = specialized _ArrayBuffer._consumeAndCreateNew()(v16);
          a2 = v62;
          v19 = v16[2];
          if (!v19)
            goto LABEL_91;
          v20 = v19 - 1;
          v21 = v16[v20 + 4];
          v16[2] = v20;
          a1[5] = v16;
          a1[2] = v21;
          v22 = v60[1];
          *(_OWORD *)(v12 + 16) = v60[0];
          *(_OWORD *)(v12 + 32) = v22;
          *(_QWORD *)(v12 + 48) = v61;
LABEL_50:
          outlined destroy of AnyTrackedValue?((uint64_t)v58, (unint64_t *)&lazy cache variable for type metadata for _DisplayList_AnyEffectAnimation?, (unint64_t *)&lazy cache variable for type metadata for _DisplayList_AnyEffectAnimation);
          outlined init with take of _DisplayList_AnyEffectAnimation?((uint64_t)&v54, (uint64_t)v58);
LABEL_51:
          v6 = a1[1];
          v7 = a1[2];
          if (v6 >= v7)
            break;
          continue;
        case 2uLL:
          v56 = &type metadata for DisplayList.ScaleAnimation;
          v57 = &protocol witness table for DisplayList.ScaleAnimation;
          v23 = swift_allocObject();
          *(_QWORD *)&v54 = v23;
          if ((v8 & 7) != 2)
            goto LABEL_71;
          v24 = v23;
          ProtobufDecoder.beginMessage()();
          if (v3)
            goto LABEL_82;
          specialized EffectAnimation.init(from:)(a1, (double *)(v24 + 16));
          v3 = 0;
          v16 = (_QWORD *)a1[5];
          if (!v16[2])
            goto LABEL_85;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
          {
            v25 = v16[2];
            if (!v25)
              goto LABEL_87;
          }
          else
          {
            v16 = specialized _ArrayBuffer._consumeAndCreateNew()(v16);
            v25 = v16[2];
            if (!v25)
              goto LABEL_87;
          }
          goto LABEL_37;
        case 3uLL:
          v56 = &type metadata for DisplayList.RotationAnimation;
          v57 = &protocol witness table for DisplayList.RotationAnimation;
          v26 = swift_allocObject();
          *(_QWORD *)&v54 = v26;
          if ((v8 & 7) != 2)
            goto LABEL_71;
          v27 = v26;
          ProtobufDecoder.beginMessage()();
          if (v3)
            goto LABEL_82;
          specialized EffectAnimation.init(from:)(a1, (double *)(v27 + 16));
          v3 = 0;
          v16 = (_QWORD *)a1[5];
          if (!v16[2])
            goto LABEL_86;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
          {
            v25 = v16[2];
            if (!v25)
              goto LABEL_88;
          }
          else
          {
            v16 = specialized _ArrayBuffer._consumeAndCreateNew()(v16);
            v25 = v16[2];
            if (!v25)
              goto LABEL_88;
          }
LABEL_37:
          v28 = v25 - 1;
          v29 = v16[v28 + 4];
          v16[2] = v28;
          a1[5] = v16;
          a1[2] = v29;
          goto LABEL_50;
        case 4uLL:
          v56 = &type metadata for DisplayList.OpacityAnimation;
          v57 = &protocol witness table for DisplayList.OpacityAnimation;
          if ((v8 & 7) != 2)
            goto LABEL_71;
          v30 = (_QWORD *)a1[5];
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v30 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v30[2] + 1, 1, v30);
          v32 = v30[2];
          v31 = v30[3];
          if (v32 >= v31 >> 1)
            v30 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v31 > 1), v32 + 1, 1, v30);
          v30[2] = v32 + 1;
          v30[v32 + 4] = v7;
          a1[5] = v30;
          v16 = a1;
          v33 = ProtobufDecoder.decodeVarint()();
          if (v3)
            goto LABEL_82;
          if (v33 < 0)
            goto LABEL_84;
          v34 = a1[1] + v33;
          if (v7 < v34)
            goto LABEL_71;
          a1[2] = v34;
          v35 = specialized EffectAnimation.init(from:)(a1);
          v38 = (_QWORD *)a1[5];
          if (!v38[2])
            goto LABEL_90;
          v39 = v36;
          v40 = v37;
          v41 = v35;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
          {
            v42 = v38[2];
            if (!v42)
              goto LABEL_65;
            goto LABEL_49;
          }
          v38 = specialized _ArrayBuffer._consumeAndCreateNew()(v38);
          v42 = v38[2];
          if (v42)
          {
LABEL_49:
            v43 = v42 - 1;
            v44 = v38[v43 + 4];
            v38[2] = v43;
            a1[5] = v38;
            a1[2] = v44;
            *(_QWORD *)&v54 = v39;
            *((_QWORD *)&v54 + 1) = v40;
            v55 = v41;
            goto LABEL_50;
          }
LABEL_65:
          __break(1u);
          break;
        default:
          switch(v8 & 7)
          {
            case 0uLL:
              ProtobufDecoder.decodeVarint()();
              if (v3)
                return outlined destroy of AnyTrackedValue?((uint64_t)v58, (unint64_t *)&lazy cache variable for type metadata for _DisplayList_AnyEffectAnimation?, (unint64_t *)&lazy cache variable for type metadata for _DisplayList_AnyEffectAnimation);
              goto LABEL_51;
            case 1uLL:
              v45 = a1[1] + 8;
              goto LABEL_58;
            case 2uLL:
              v16 = a1;
              v46 = ProtobufDecoder.decodeVarint()();
              if (v3)
                return outlined destroy of AnyTrackedValue?((uint64_t)v58, (unint64_t *)&lazy cache variable for type metadata for _DisplayList_AnyEffectAnimation?, (unint64_t *)&lazy cache variable for type metadata for _DisplayList_AnyEffectAnimation);
              if (v46 < 0)
                goto LABEL_92;
              v45 = a1[1] + v46;
LABEL_58:
              if (v7 < v45)
                goto LABEL_69;
              a1[1] = v45;
              break;
            case 5uLL:
              v45 = a1[1] + 4;
              goto LABEL_58;
            default:
              goto LABEL_69;
          }
          goto LABEL_51;
      }
LABEL_66:
      a1[3] = 0;
      outlined init with copy of _DisplayList_AnyEffectAnimation?((uint64_t)v58, (uint64_t)&v52);
      if (v53)
      {
        outlined destroy of AnyTrackedValue?((uint64_t)v58, (unint64_t *)&lazy cache variable for type metadata for _DisplayList_AnyEffectAnimation?, (unint64_t *)&lazy cache variable for type metadata for _DisplayList_AnyEffectAnimation);
        outlined init with take of ScrollStateRequest(&v52, (uint64_t)&v54);
        return outlined init with take of ScrollStateRequest(&v54, a2);
      }
      else
      {
        outlined destroy of AnyTrackedValue?((uint64_t)&v52, (unint64_t *)&lazy cache variable for type metadata for _DisplayList_AnyEffectAnimation?, (unint64_t *)&lazy cache variable for type metadata for _DisplayList_AnyEffectAnimation);
        lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
        swift_allocError();
        swift_willThrow();
        return outlined destroy of AnyTrackedValue?((uint64_t)v58, (unint64_t *)&lazy cache variable for type metadata for _DisplayList_AnyEffectAnimation?, (unint64_t *)&lazy cache variable for type metadata for _DisplayList_AnyEffectAnimation);
      }
    }
    break;
  }
LABEL_69:
  lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
  swift_allocError();
  swift_willThrow();
  return outlined destroy of AnyTrackedValue?((uint64_t)v58, (unint64_t *)&lazy cache variable for type metadata for _DisplayList_AnyEffectAnimation?, (unint64_t *)&lazy cache variable for type metadata for _DisplayList_AnyEffectAnimation);
}

uint64_t protocol witness for ProtobufEncodableMessage.encode(to:) in conformance CodableEffectAnimation(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1[3];
  v4 = v1[4];
  __swift_project_boxed_opaque_existential_1(v1, v3);
  return _DisplayList_AnyEffectAnimation.encodeAnimation(to:)(a1, v3, v4);
}

uint64_t protocol witness for ProtobufDecodableMessage.init(from:) in conformance CodableEffectAnimation@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return CodableEffectAnimation.init(from:)(a1, a2);
}

uint64_t DisplayList.InterpolatorAnimation.encode(to:)(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;

  v3 = (_QWORD *)result;
  v4 = *(_BYTE *)(v1 + 20);
  v5 = *(_QWORD *)(v1 + 24);
  if (v5)
  {
    swift_retain();
    ProtobufEncoder.encodeVarint(_:)(0xAuLL);
    v6 = v3[1];
    v7 = (_QWORD *)v3[3];
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v7[2] + 1, 1, v7);
    v9 = v7[2];
    v8 = v7[3];
    v10 = v9 + 1;
    if (v9 >= v8 >> 1)
      v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v8 > 1), v9 + 1, 1, v7);
    v7[2] = v10;
    v7[v9 + 4] = v6;
    v3[3] = v7;
    if (__OFADD__(v6, 1))
    {
      __break(1u);
LABEL_18:
      result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v7[2] + 1, 1, v7);
      v7 = (_QWORD *)result;
      goto LABEL_12;
    }
    v3[1] = v6 + 1;
    CodableAnimation.encode(to:)((uint64_t)v3, v5);
    if (v2)
      return swift_release();
    ProtobufEncoder.endLengthDelimited()();
    result = swift_release();
  }
  if ((v4 & 1) != 0)
    return result;
  ProtobufEncoder.encodeVarint(_:)(0x12uLL);
  v10 = v3[1];
  v7 = (_QWORD *)v3[3];
  result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
    goto LABEL_18;
LABEL_12:
  v12 = v7[2];
  v11 = v7[3];
  if (v12 >= v11 >> 1)
  {
    result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v11 > 1), v12 + 1, 1, v7);
    v7 = (_QWORD *)result;
  }
  v7[2] = v12 + 1;
  v7[v12 + 4] = v10;
  v3[3] = v7;
  if (__OFADD__(v10, 1))
  {
    __break(1u);
  }
  else
  {
    v3[1] = v10 + 1;
    StrongHash.encode(to:)(v3);
    return ProtobufEncoder.endLengthDelimited()();
  }
  return result;
}

unint64_t DisplayList.InterpolatorAnimation.init(from:)@<X0>(unint64_t result@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  _QWORD *v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  _OWORD *v9;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  __int128 v36;
  __int128 v37;
  int v38;
  _OWORD *v39;

  v39 = a2;
  v3 = (_QWORD *)result;
  v4 = *(_QWORD *)(result + 8);
  v5 = *(_QWORD *)(result + 16);
  if (v4 >= v5)
  {
    v6 = 0;
    v7 = 0;
    v36 = 0u;
    LOBYTE(v8) = 1;
LABEL_4:
    v3[3] = 0;
    v9 = v39;
    *v39 = v36;
    *((_DWORD *)v9 + 4) = v7;
    *((_BYTE *)v9 + 20) = v8 & 1;
    *((_QWORD *)v9 + 3) = v6;
    return result;
  }
  v6 = 0;
  v7 = 0;
  v36 = 0u;
  v8 = 1;
  while (1)
  {
    result = v3[3];
    if (result)
    {
      v11 = v3[4];
      if (v4 < v11)
        goto LABEL_14;
      if (v11 < v4)
        goto LABEL_53;
      v3[3] = 0;
    }
    result = ProtobufDecoder.decodeVarint()();
    if (v2)
      return swift_release();
    if (result <= 7)
      goto LABEL_53;
LABEL_14:
    if (result >> 3 != 2)
      break;
    if ((result & 7) != 2)
      goto LABEL_53;
    v23 = (_QWORD *)v3[5];
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v23 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v23[2] + 1, 1, v23);
    v25 = v23[2];
    v24 = v23[3];
    if (v25 >= v24 >> 1)
      v23 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v24 > 1), v25 + 1, 1, v23);
    v23[2] = v25 + 1;
    v23[v25 + 4] = v5;
    v3[5] = v23;
    v26 = ProtobufDecoder.decodeVarint()();
    if (v2)
      return swift_release();
    if (v26 < 0)
      goto LABEL_61;
    v27 = v3[1] + v26;
    if (v5 < v27)
      goto LABEL_53;
    v3[2] = v27;
    StrongHash.init(from:)((unint64_t)v3, &v37);
    v28 = (_QWORD *)v3[5];
    if (!v28[2])
      goto LABEL_63;
    result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) != 0)
    {
      v29 = v28[2];
      if (!v29)
        goto LABEL_52;
    }
    else
    {
      result = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v28);
      v28 = (_QWORD *)result;
      v29 = *(_QWORD *)(result + 16);
      if (!v29)
      {
LABEL_52:
        __break(1u);
LABEL_53:
        lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
        swift_allocError();
        swift_willThrow();
        return swift_release();
      }
    }
    v8 = 0;
    v30 = v29 - 1;
    v31 = v28[v30 + 4];
    v28[2] = v30;
    v3[5] = v28;
    v3[2] = v31;
    v36 = v37;
    v7 = v38;
LABEL_7:
    v4 = v3[1];
    v5 = v3[2];
    if (v4 >= v5)
      goto LABEL_4;
  }
  if (result >> 3 != 1)
  {
    switch(result & 7)
    {
      case 0uLL:
        result = ProtobufDecoder.decodeVarint()();
        if (v2)
          return swift_release();
        goto LABEL_7;
      case 1uLL:
        v10 = v3[1] + 8;
        if (v5 >= v10)
          goto LABEL_6;
        goto LABEL_53;
      case 2uLL:
        result = ProtobufDecoder.decodeVarint()();
        if (v2)
          return swift_release();
        if ((result & 0x8000000000000000) != 0)
          goto LABEL_65;
        v10 = v3[1] + result;
        if (v5 < v10)
          goto LABEL_53;
LABEL_6:
        v3[1] = v10;
        break;
      case 5uLL:
        v10 = v3[1] + 4;
        if (v5 < v10)
          goto LABEL_53;
        goto LABEL_6;
      default:
        goto LABEL_53;
    }
    goto LABEL_7;
  }
  if ((result & 7) != 2)
    goto LABEL_53;
  v12 = (_QWORD *)v3[5];
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v12[2] + 1, 1, v12);
  v14 = v12[2];
  v13 = v12[3];
  if (v14 >= v13 >> 1)
    v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v13 > 1), v14 + 1, 1, v12);
  v12[2] = v14 + 1;
  v12[v14 + 4] = v5;
  v3[5] = v12;
  v15 = ProtobufDecoder.decodeVarint()();
  if (v2)
    return swift_release();
  if ((v15 & 0x8000000000000000) == 0)
  {
    v16 = v3[1] + v15;
    if (v5 < v16)
      goto LABEL_53;
    v3[2] = v16;
    v17 = specialized CodableAnimation.init(from:)(v3);
    v18 = (_QWORD *)v3[5];
    if (!v18[2])
      goto LABEL_62;
    v19 = v17;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
    {
      v20 = v18[2];
      if (!v20)
        goto LABEL_64;
    }
    else
    {
      v18 = specialized _ArrayBuffer._consumeAndCreateNew()(v18);
      v20 = v18[2];
      if (!v20)
        goto LABEL_64;
    }
    v21 = v20 - 1;
    v22 = v18[v21 + 4];
    v18[2] = v21;
    v3[5] = v18;
    v3[2] = v22;
    result = swift_release();
    v6 = v19;
    goto LABEL_7;
  }
  __break(1u);
LABEL_61:
  __break(1u);
LABEL_62:
  __break(1u);
LABEL_63:
  __break(1u);
LABEL_64:
  __break(1u);
LABEL_65:
  __break(1u);
  __break(1u);
  v32 = specialized _ArrayBuffer._consumeAndCreateNew()((_QWORD *)v8);
  v33 = v32[2];
  if (!v33)
  {
    __break(1u);
    v32 = (_QWORD *)v3[5];
    if (v32[2])
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
      {
        v33 = v32[2];
        if (v33)
          goto LABEL_59;
LABEL_69:
        __break(1u);
        JUMPOUT(0x234DF196CLL);
      }
    }
    else
    {
      __break(1u);
    }
    v32 = specialized _ArrayBuffer._consumeAndCreateNew()(v32);
    v33 = v32[2];
    if (!v33)
      goto LABEL_69;
  }
LABEL_59:
  v34 = v33 - 1;
  v35 = v32[v34 + 4];
  v32[2] = v34;
  v3[5] = v32;
  v3[2] = v35;
  return swift_release();
}

uint64_t protocol witness for ProtobufEncodableMessage.encode(to:) in conformance DisplayList.InterpolatorAnimation(uint64_t a1)
{
  return DisplayList.InterpolatorAnimation.encode(to:)(a1);
}

unint64_t protocol witness for ProtobufDecodableMessage.init(from:) in conformance DisplayList.InterpolatorAnimation@<X0>(unint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  return DisplayList.InterpolatorAnimation.init(from:)(a1, a2);
}

uint64_t outlined destroy of CodableViewFactory(uint64_t a1)
{
  destroy for TimeDataFormattingContainer(a1);
  return a1;
}

uint64_t sub_234DF19E0()
{
  return swift_deallocObject();
}

unint64_t lazy protocol witness table accessor for type CodableViewFactory.Error and conformance CodableViewFactory.Error()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CodableViewFactory.Error and conformance CodableViewFactory.Error;
  if (!lazy protocol witness table cache variable for type CodableViewFactory.Error and conformance CodableViewFactory.Error)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for CodableViewFactory.Error, &type metadata for CodableViewFactory.Error);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodableViewFactory.Error and conformance CodableViewFactory.Error);
  }
  return result;
}

uint64_t sub_234DF1A34()
{
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_234DF1A60()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_234DF1A84()
{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  return swift_deallocObject();
}

uint64_t sub_234DF1AA8()
{
  uint64_t v0;
  int v1;

  v1 = *(unsigned __int8 *)(v0 + 24);
  if (v1 != 255)
    outlined consume of GraphicsImage.Contents(*(void **)(v0 + 16), v1);
  return swift_deallocObject();
}

uint64_t sub_234DF1AD8()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t outlined destroy of CodableEffectAnimation(uint64_t a1)
{
  __swift_destroy_boxed_opaque_existential_1(a1);
  return a1;
}

uint64_t outlined retain of GraphicsFilter(uint64_t a1, void (*a2)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, uint64_t))
{
  uint64_t v4;

  BYTE4(v4) = *(_BYTE *)(a1 + 116);
  LODWORD(v4) = *(_DWORD *)(a1 + 112);
  a2(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), v4);
  return a1;
}

uint64_t sub_234DF1B84()
{
  return swift_deallocObject();
}

uint64_t sub_234DF1B94()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_234DF1BB8()
{
  return swift_deallocObject();
}

uint64_t sub_234DF1BC8()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_234DF1BEC()
{
  uint64_t v0;

  outlined consume of ContentTransition.Storage(*(_QWORD *)(v0 + 16), *(unsigned int *)(v0 + 24) | ((unint64_t)*(unsigned __int8 *)(v0 + 28) << 32), *(_BYTE *)(v0 + 29));
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_234DF1C28()
{
  uint64_t v0;

  outlined consume of GraphicsFilter(*(void **)(v0 + 16), *(_QWORD *)(v0 + 24), *(id *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 88), *(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 104), *(_QWORD *)(v0 + 112), *(_QWORD *)(v0 + 120), *(_DWORD *)(v0 + 128), BYTE2(*(_DWORD *)(v0 + 128)));
  return swift_deallocObject();
}

uint64_t outlined init with copy of _DisplayList_AnyEffectAnimation?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for AnyTrackedValue?(0, (unint64_t *)&lazy cache variable for type metadata for _DisplayList_AnyEffectAnimation?, (unint64_t *)&lazy cache variable for type metadata for _DisplayList_AnyEffectAnimation);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t __swift_deallocate_boxed_opaque_existential_1(uint64_t result)
{
  if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(result + 24) - 8) + 80) & 0x20000) != 0)
    JUMPOUT(0x23B7C9D54);
  return result;
}

_QWORD *specialized EffectAnimation.init(from:)(_QWORD *a1)
{
  uint64_t v1;
  _QWORD *v2;
  unint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v4 = a1[1];
  v5 = a1[2];
  if (v4 >= v5)
    goto LABEL_67;
  v6 = 0;
  v7 = 1;
  v8 = 1;
  while (1)
  {
    v11 = a1[3];
    if (v11)
    {
      v12 = a1[4];
      if (v4 < v12)
        goto LABEL_11;
      if (v12 < v4)
        goto LABEL_68;
      a1[3] = 0;
    }
    v11 = ProtobufDecoder.decodeVarint()();
    if (v1)
      goto LABEL_69;
    if (v11 < 8)
      goto LABEL_68;
LABEL_11:
    v13 = v11 >> 3;
    if (v11 >> 3 != 1)
      break;
    if ((v11 & 7) != 2)
      goto LABEL_68;
    v2 = (_QWORD *)a1[5];
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2[2] + 1, 1, v2);
    v24 = v2[2];
    v23 = v2[3];
    if (v24 >= v23 >> 1)
      v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v23 > 1), v24 + 1, 1, v2);
    v2[2] = v24 + 1;
    v2[v24 + 4] = v5;
    a1[5] = v2;
    v25 = ProtobufDecoder.decodeVarint()();
    if (v1)
      goto LABEL_69;
    if (v25 < 0)
      goto LABEL_82;
    v26 = a1[1] + v25;
    if (v5 < v26)
      goto LABEL_68;
    a1[2] = v26;
    specialized _OpacityEffect.init(from:)(a1);
    v2 = (_QWORD *)a1[5];
    if (!v2[2])
      goto LABEL_85;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
    {
      v27 = v2[2];
      if (!v27)
        goto LABEL_88;
    }
    else
    {
      v2 = specialized _ArrayBuffer._consumeAndCreateNew()(v2);
      v27 = v2[2];
      if (!v27)
        goto LABEL_88;
    }
    v8 = 0;
LABEL_3:
    v9 = v27 - 1;
    v10 = v2[v9 + 4];
    v2[2] = v9;
    a1[5] = v2;
    a1[2] = v10;
LABEL_4:
    v4 = a1[1];
    v5 = a1[2];
    if (v4 >= v5)
    {
      a1[3] = 0;
      if (((v8 | v7) & 1) == 0 && v6)
        return v6;
      goto LABEL_68;
    }
  }
  if (v13 == 2)
  {
    if ((v11 & 7) != 2)
      goto LABEL_68;
    v2 = (_QWORD *)a1[5];
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2[2] + 1, 1, v2);
    v29 = v2[2];
    v28 = v2[3];
    if (v29 >= v28 >> 1)
      v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v28 > 1), v29 + 1, 1, v2);
    v2[2] = v29 + 1;
    v2[v29 + 4] = v5;
    a1[5] = v2;
    v30 = ProtobufDecoder.decodeVarint()();
    if (v1)
      goto LABEL_69;
    if (v30 < 0)
      goto LABEL_83;
    v31 = a1[1] + v30;
    if (v5 < v31)
      goto LABEL_68;
    a1[2] = v31;
    specialized _OpacityEffect.init(from:)(a1);
    v2 = (_QWORD *)a1[5];
    if (!v2[2])
      goto LABEL_86;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
    {
      v27 = v2[2];
      if (!v27)
        goto LABEL_87;
    }
    else
    {
      v2 = specialized _ArrayBuffer._consumeAndCreateNew()(v2);
      v27 = v2[2];
      if (!v27)
        goto LABEL_87;
    }
    v7 = 0;
    goto LABEL_3;
  }
  if (v13 != 3)
  {
    switch(v11 & 7)
    {
      case 0uLL:
        ProtobufDecoder.decodeVarint()();
        if (v1)
          goto LABEL_69;
        goto LABEL_4;
      case 1uLL:
        v32 = a1[1] + 8;
        if (v5 < v32)
          goto LABEL_68;
        goto LABEL_60;
      case 2uLL:
        v33 = ProtobufDecoder.decodeVarint()();
        if (v1)
          goto LABEL_69;
        if (v33 < 0)
          goto LABEL_89;
        v32 = a1[1] + v33;
        if (v5 < v32)
          goto LABEL_68;
LABEL_60:
        a1[1] = v32;
        break;
      case 5uLL:
        v32 = a1[1] + 4;
        if (v5 >= v32)
          goto LABEL_60;
        goto LABEL_68;
      default:
        goto LABEL_68;
    }
    goto LABEL_4;
  }
  if ((v11 & 7) != 2)
    goto LABEL_68;
  v2 = (_QWORD *)a1[5];
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2[2] + 1, 1, v2);
  v15 = v2[2];
  v14 = v2[3];
  if (v15 >= v14 >> 1)
    v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v14 > 1), v15 + 1, 1, v2);
  v2[2] = v15 + 1;
  v2[v15 + 4] = v5;
  a1[5] = v2;
  v16 = ProtobufDecoder.decodeVarint()();
  if (v1)
    goto LABEL_69;
  if ((v16 & 0x8000000000000000) == 0)
  {
    v17 = a1[1] + v16;
    if (v5 < v17)
      goto LABEL_68;
    a1[2] = v17;
    v18 = specialized CodableAnimation.init(from:)(a1);
    v19 = (_QWORD *)a1[5];
    if (!v19[2])
      goto LABEL_84;
    v2 = (_QWORD *)v18;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
    {
      v20 = v19[2];
      if (!v20)
        goto LABEL_66;
      goto LABEL_25;
    }
    v19 = specialized _ArrayBuffer._consumeAndCreateNew()(v19);
    v20 = v19[2];
    if (v20)
    {
LABEL_25:
      v21 = v20 - 1;
      v22 = v19[v21 + 4];
      v19[2] = v21;
      swift_release();
      a1[5] = v19;
      a1[2] = v22;
      v6 = v2;
      goto LABEL_4;
    }
LABEL_66:
    __break(1u);
LABEL_67:
    v6 = 0;
    a1[3] = 0;
LABEL_68:
    lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
    swift_allocError();
    swift_willThrow();
LABEL_69:
    swift_release();
    return v6;
  }
  __break(1u);
LABEL_82:
  __break(1u);
LABEL_83:
  __break(1u);
LABEL_84:
  __break(1u);
LABEL_85:
  __break(1u);
LABEL_86:
  __break(1u);
LABEL_87:
  __break(1u);
LABEL_88:
  __break(1u);
LABEL_89:
  __break(1u);
  __break(1u);
  v35 = specialized _ArrayBuffer._consumeAndCreateNew()(v2);
  v36 = v35[2];
  if (v36)
    goto LABEL_80;
  __break(1u);
  v35 = (_QWORD *)a1[5];
  if (!v35[2])
  {
    __break(1u);
LABEL_92:
    v35 = specialized _ArrayBuffer._consumeAndCreateNew()(v35);
    v36 = v35[2];
    if (v36)
      goto LABEL_80;
LABEL_77:
    __break(1u);
    v35 = (_QWORD *)a1[5];
    if (v35[2])
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
      {
        v36 = v35[2];
        if (v36)
          goto LABEL_80;
        goto LABEL_96;
      }
    }
    else
    {
      __break(1u);
    }
    v35 = specialized _ArrayBuffer._consumeAndCreateNew()(v35);
    v36 = v35[2];
    if (v36)
      goto LABEL_80;
LABEL_96:
    __break(1u);
    JUMPOUT(0x234DF2910);
  }
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    goto LABEL_92;
  v36 = v35[2];
  if (!v36)
    goto LABEL_77;
LABEL_80:
  v37 = v36 - 1;
  v38 = v35[v37 + 4];
  v35[2] = v37;
  swift_release();
  a1[5] = v35;
  a1[2] = v38;
  return v6;
}

uint64_t outlined init with take of _DisplayList_AnyEffectAnimation?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for AnyTrackedValue?(0, (unint64_t *)&lazy cache variable for type metadata for _DisplayList_AnyEffectAnimation?, (unint64_t *)&lazy cache variable for type metadata for _DisplayList_AnyEffectAnimation);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_234DF2984()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_234DF29A8()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_234DF29CC()
{
  swift_release();
  return swift_deallocObject();
}

unint64_t instantiation function for generic protocol witness table for CodableEffectAnimation.Tag(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type CodableEffectAnimation.Tag and conformance CodableEffectAnimation.Tag();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type CodableEffectAnimation.Tag and conformance CodableEffectAnimation.Tag()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CodableEffectAnimation.Tag and conformance CodableEffectAnimation.Tag;
  if (!lazy protocol witness table cache variable for type CodableEffectAnimation.Tag and conformance CodableEffectAnimation.Tag)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for CodableEffectAnimation.Tag, &type metadata for CodableEffectAnimation.Tag);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodableEffectAnimation.Tag and conformance CodableEffectAnimation.Tag);
  }
  return result;
}

ValueMetadata *type metadata accessor for CodableEffectAnimation()
{
  return &type metadata for CodableEffectAnimation;
}

ValueMetadata *type metadata accessor for CodableEffectAnimation.Tag()
{
  return &type metadata for CodableEffectAnimation.Tag;
}

uint64_t sub_234DF2A78()
{
  return objectdestroy_62Tm_0();
}

uint64_t sub_234DF2A80()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t outlined init with take of AccessibilityNodeAttachment(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for AccessibilityNodeAttachment(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with copy of AccessibilityNodeAttachment(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for AccessibilityNodeAttachment(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_234DF2B2C()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_234DF2B50()
{
  uint64_t v0;

  outlined consume of Path.Storage(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_BYTE *)(v0 + 48));
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_234DF2B84()
{
  return objectdestroy_62Tm_0();
}

uint64_t objectdestroy_62Tm_0()
{
  uint64_t v0;

  outlined consume of Path.Storage(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_BYTE *)(v0 + 48));
  return swift_deallocObject();
}

uint64_t sub_234DF2BC4()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_234DF2BE8()
{
  swift_unknownObjectRelease();
  return swift_deallocObject();
}

BOOL GraphicsFilter.isIdentity.getter()
{
  _QWORD *v0;
  BOOL v1;
  uint64_t v2;
  double v3;
  uint64_t v5;

  v1 = 0;
  v3 = *(double *)v0;
  v2 = v0[1];
  switch(*((_BYTE *)v0 + 116))
  {
    case 0:
      return v3 <= 0.0;
    case 1:
      return v3 <= 0.0 || *((unsigned __int8 *)v0 + 113) << 8 == 512;
    case 4:
      return _ColorMatrix.isIdentity.getter();
    case 5:
      v5 = HIDWORD(*(_QWORD *)&v3);
      return COERCE_FLOAT(*v0) == 1.0 && *(float *)&v5 == 1.0 && *(float *)&v2 == 1.0 && *((float *)&v2 + 1) == 1.0;
    case 6:
    case 8:
    case 0xA:
      return (*(_QWORD *)&v3 & 0x7FFFFFFFFFFFFFFFLL) == 0;
    case 7:
    case 9:
      return v3 == 1.0;
    case 0xB:
    case 0xD:
      return (v0[2] & 0x7FFFFFFFLL) == 0;
    default:
      return v1;
  }
}

__C::CGRect __swiftcall GraphicsFilter.domainOfDefinition(for:)(__C::CGRect a1)
{
  uint64_t v1;
  CGFloat height;
  CGFloat width;
  CGFloat y;
  CGFloat x;
  uint64_t v6;
  int v7;
  char v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  CGRect v20;
  __C::CGRect result;
  CGRect v22;

  height = a1.size.height;
  width = a1.size.width;
  y = a1.origin.y;
  x = a1.origin.x;
  v6 = *(_QWORD *)(v1 + 8);
  v7 = *(unsigned __int8 *)(v1 + 116);
  if (v7 == 15)
  {
    v20 = CGRectInset((CGRect)a1, COERCE_CGFLOAT(v6 | 0x8000000000000000), COERCE_CGFLOAT(*(_QWORD *)(v1 + 16) | 0x8000000000000000));
    goto LABEL_11;
  }
  if (v7 == 2)
  {
    v8 = *(_BYTE *)(v1 + 44);
    v9 = 0.0;
    v10 = 0.0;
    v11 = 0.0;
    v12 = 0.0;
    if ((v8 & 1) == 0)
    {
      v14 = *(double *)(v1 + 24);
      v13 = *(double *)(v1 + 32);
      v15 = *(double *)(v1 + 16) * -2.8;
      v9 = v15 + v13;
      v10 = v15 + v14;
      v11 = v15 - v13;
      v12 = v15 - v14;
    }
    v20.origin.x = CGRect.inset(by:)(v9, v10, v11, v12, x, y, width, height);
    if ((v8 & 2) == 0)
    {
      v22.origin.x = x;
      v22.origin.y = y;
      v22.size.width = width;
      v22.size.height = height;
      v20 = CGRectUnion(v20, v22);
    }
    goto LABEL_11;
  }
  if (!*(_BYTE *)(v1 + 116) && (v6 & 1) == 0)
  {
    v20 = CGRectInset((CGRect)a1, *(double *)v1 * -2.8, *(double *)v1 * -2.8);
LABEL_11:
    x = v20.origin.x;
    y = v20.origin.y;
    width = v20.size.width;
    height = v20.size.height;
  }
  v16 = x;
  v17 = y;
  v18 = width;
  v19 = height;
  result.size.height = v19;
  result.size.width = v18;
  result.origin.y = v17;
  result.origin.x = v16;
  return result;
}

void GraphicsFilter.ColorMonochrome.init(color:amount:bias:)(float *a1@<X8>, float a2@<S0>, float a3@<S1>, float a4@<S2>, float a5@<S3>, float a6@<S4>, float a7@<S5>)
{
  *a1 = a2;
  a1[1] = a3;
  a1[2] = a4;
  a1[3] = a5;
  a1[4] = a6;
  a1[5] = a7;
}

char *GraphicsBlendMode.init(_:)@<X0>(char *result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = qword_2352A3480[*result];
  *(_BYTE *)(a2 + 8) = 0;
  return result;
}

void __swiftcall GraphicsFilter.LuminanceCurve.init(curve:amount:)(SwiftUI::GraphicsFilter::LuminanceCurve *__return_ptr retstr, SwiftUI::GraphicsFilter::Curve curve, Swift::Float amount)
{
  SwiftUI::GraphicsFilter::Curve *v3;

  retstr->curve = *v3;
  retstr->amount = curve.values._0;
}

void __swiftcall GraphicsFilter.ColorCurves.init(redCurve:greenCurve:blueCurve:opacityCurve:)(SwiftUI::GraphicsFilter::ColorCurves *__return_ptr retstr, SwiftUI::GraphicsFilter::Curve redCurve, SwiftUI::GraphicsFilter::Curve greenCurve, SwiftUI::GraphicsFilter::Curve blueCurve, SwiftUI::GraphicsFilter::Curve opacityCurve)
{
  SwiftUI::GraphicsFilter::Curve *v5;
  SwiftUI::GraphicsFilter::Curve *v6;
  SwiftUI::GraphicsFilter::Curve *v7;
  SwiftUI::GraphicsFilter::Curve *v8;
  SwiftUI::GraphicsFilter::Curve v9;
  SwiftUI::GraphicsFilter::Curve v10;

  v9 = *v6;
  retstr->redCurve = *v5;
  retstr->greenCurve = v9;
  v10 = *v8;
  retstr->blueCurve = *v7;
  retstr->opacityCurve = v10;
}

SwiftUI::GraphicsFilter::Curve __swiftcall GraphicsFilter.Curve.init(_:)(SwiftUI::GraphicsFilter::Curve result)
{
  SwiftUI::GraphicsFilter::Curve *v1;

  *v1 = result;
  return result;
}

uint64_t GraphicsFilter.ShaderFilter.init(shader:size:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>, double a3@<D0>, double a4@<D1>)
{
  int v4;

  v4 = *(_DWORD *)(result + 24);
  *(_QWORD *)a2 = *(_QWORD *)result;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(result + 8);
  *(_DWORD *)(a2 + 24) = v4;
  *(double *)(a2 + 32) = a3;
  *(double *)(a2 + 40) = a4;
  return result;
}

float GraphicsFilter.ColorMonochrome.color.getter()
{
  uint64_t v0;

  return *(float *)v0;
}

void GraphicsFilter.ColorMonochrome.color.setter(float a1, float a2, float a3, float a4)
{
  float *v4;

  *v4 = a1;
  v4[1] = a2;
  v4[2] = a3;
  v4[3] = a4;
}

uint64_t (*GraphicsFilter.ColorMonochrome.color.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

float GraphicsFilter.ColorMonochrome.amount.getter()
{
  uint64_t v0;

  return *(float *)(v0 + 16);
}

void GraphicsFilter.ColorMonochrome.amount.setter(float a1)
{
  uint64_t v1;

  *(float *)(v1 + 16) = a1;
}

uint64_t (*GraphicsFilter.ColorMonochrome.amount.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

float GraphicsFilter.ColorMonochrome.bias.getter()
{
  uint64_t v0;

  return *(float *)(v0 + 20);
}

void GraphicsFilter.ColorMonochrome.bias.setter(float a1)
{
  uint64_t v1;

  *(float *)(v1 + 20) = a1;
}

uint64_t (*GraphicsFilter.ColorMonochrome.bias.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

float GraphicsFilter.Curve.values.getter()
{
  uint64_t v0;

  return *(float *)v0;
}

void GraphicsFilter.Curve.values.setter(float a1, float a2, float a3, float a4)
{
  float *v4;

  *v4 = a1;
  v4[1] = a2;
  v4[2] = a3;
  v4[3] = a4;
}

uint64_t (*GraphicsFilter.Curve.values.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

BOOL static GraphicsFilter.Curve.== infix(_:_:)(float *a1, float *a2)
{
  return *a1 == *a2 && a1[1] == a2[1] && a1[2] == a2[2] && a1[3] == a2[3];
}

__n128 GraphicsFilter.LuminanceCurve.curve.getter@<Q0>(__n128 *a1@<X8>)
{
  __n128 *v1;
  __n128 result;

  result = *v1;
  *a1 = *v1;
  return result;
}

__n128 GraphicsFilter.LuminanceCurve.curve.setter(__n128 *a1)
{
  __n128 *v1;
  __n128 result;

  result = *a1;
  *v1 = *a1;
  return result;
}

uint64_t (*GraphicsFilter.LuminanceCurve.curve.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

float GraphicsFilter.LuminanceCurve.amount.getter()
{
  uint64_t v0;

  return *(float *)(v0 + 16);
}

void GraphicsFilter.LuminanceCurve.amount.setter(float a1)
{
  uint64_t v1;

  *(float *)(v1 + 16) = a1;
}

uint64_t (*GraphicsFilter.LuminanceCurve.amount.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

__n128 GraphicsFilter.ColorCurves.redCurve.getter@<Q0>(__n128 *a1@<X8>)
{
  __n128 *v1;
  __n128 result;

  result = *v1;
  *a1 = *v1;
  return result;
}

__n128 GraphicsFilter.ColorCurves.redCurve.setter(__n128 *a1)
{
  __n128 *v1;
  __n128 result;

  result = *a1;
  *v1 = *a1;
  return result;
}

uint64_t (*GraphicsFilter.ColorCurves.redCurve.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

__n128 GraphicsFilter.ColorCurves.greenCurve.getter@<Q0>(__n128 *a1@<X8>)
{
  __n128 *v1;
  __n128 result;

  result = v1[1];
  *a1 = result;
  return result;
}

__n128 GraphicsFilter.ColorCurves.greenCurve.setter(__n128 *a1)
{
  __n128 *v1;
  __n128 result;

  result = *a1;
  v1[1] = *a1;
  return result;
}

uint64_t (*GraphicsFilter.ColorCurves.greenCurve.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

__n128 GraphicsFilter.ColorCurves.blueCurve.getter@<Q0>(__n128 *a1@<X8>)
{
  __n128 *v1;
  __n128 result;

  result = v1[2];
  *a1 = result;
  return result;
}

__n128 GraphicsFilter.ColorCurves.blueCurve.setter(__n128 *a1)
{
  __n128 *v1;
  __n128 result;

  result = *a1;
  v1[2] = *a1;
  return result;
}

uint64_t (*GraphicsFilter.ColorCurves.blueCurve.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

__n128 GraphicsFilter.ColorCurves.opacityCurve.getter@<Q0>(__n128 *a1@<X8>)
{
  __n128 *v1;
  __n128 result;

  result = v1[3];
  *a1 = result;
  return result;
}

__n128 GraphicsFilter.ColorCurves.opacityCurve.setter(__n128 *a1)
{
  __n128 *v1;
  __n128 result;

  result = *a1;
  v1[3] = *a1;
  return result;
}

uint64_t (*GraphicsFilter.ColorCurves.opacityCurve.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

id GraphicsFilter.ShaderFilter.shader.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  void *v2;
  int v3;

  v2 = *(void **)v1;
  v3 = *(_DWORD *)(v1 + 24);
  *(_QWORD *)a1 = *(_QWORD *)v1;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(v1 + 8);
  *(_DWORD *)(a1 + 24) = v3;
  return v2;
}

__n128 GraphicsFilter.ShaderFilter.shader.setter(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v3;
  int v4;
  __n128 result;

  v3 = *a1;
  v4 = *((_DWORD *)a1 + 6);

  *(_QWORD *)v1 = v3;
  result = *(__n128 *)(a1 + 1);
  *(__n128 *)(v1 + 8) = result;
  *(_DWORD *)(v1 + 24) = v4;
  return result;
}

uint64_t (*GraphicsFilter.ShaderFilter.shader.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

double GraphicsFilter.ShaderFilter.size.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 32);
}

void GraphicsFilter.ShaderFilter.size.setter(double a1, double a2)
{
  uint64_t v2;

  *(double *)(v2 + 32) = a1;
  *(double *)(v2 + 40) = a2;
}

uint64_t (*GraphicsFilter.ShaderFilter.size.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

void one-time initialization function for normal()
{
  static GraphicsBlendMode.normal = 0;
  byte_254266040 = 0;
}

uint64_t static GraphicsBlendMode.normal.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  char v3;

  if (one-time initialization token for normal != -1)
    swift_once();
  v2 = static GraphicsBlendMode.normal;
  v3 = byte_254266040;
  *(_QWORD *)a1 = static GraphicsBlendMode.normal;
  *(_BYTE *)(a1 + 8) = v3;
  return outlined copy of GraphicsBlendMode(v2, v3);
}

uint64_t GraphicsFilter.changesDOD.getter()
{
  uint64_t v0;
  int v1;
  _BOOL4 v2;
  _BOOL4 v3;

  v1 = *(unsigned __int8 *)(v0 + 116);
  v2 = (*(_QWORD *)(v0 + 8) & 1) == 0;
  v3 = v2;
  if (*(_BYTE *)(v0 + 116))
    v3 = 0;
  if (v1 != 1)
    v2 = v3;
  return v1 == 2 || v2;
}

void GraphicsFilter.encode(to:)()
{
  __asm { BR              X10 }
}

uint64_t sub_234DF3294()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  unint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v8;

  v1 = v0;
  ProtobufEncoder.encodeVarint(_:)(0xAuLL);
  v2 = v1[1];
  v3 = (_QWORD *)v1[3];
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3[2] + 1, 1, v3);
  v5 = v3[2];
  v4 = v3[3];
  if (v5 >= v4 >> 1)
  {
    v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v4 > 1), v5 + 1, 1, v3);
    v6 = v1;
    v3 = v8;
  }
  else
  {
    v6 = v1;
  }
  v3[2] = v5 + 1;
  v3[v5 + 4] = v2;
  v6[3] = v3;
  if (__OFADD__(v2, 1))
  {
    __break(1u);
    JUMPOUT(0x234DF3A3CLL);
  }
  v6[1] = v2 + 1;
  BlurStyle.encode(to:)(v6);
  return ProtobufEncoder.endLengthDelimited()();
}

void GraphicsFilter.init(from:)(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  uint64_t v20;
  unint64_t v21;
  int v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  char v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  _QWORD *v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  unint64_t v68;
  float v69;
  unsigned int v70;
  unsigned int v71;
  unsigned int v72;
  _QWORD *v73;
  float v74;
  unsigned int v75;
  unsigned int v76;
  unsigned int v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  double *v82;
  char v83;
  double v84;
  unint64_t v85;
  double v86;
  double v87;
  unint64_t v88;
  double v89;
  double v90;
  unint64_t v91;
  double v92;
  double v93;
  unint64_t v94;
  double v95;
  _QWORD *v96;
  unint64_t v97;
  unint64_t v98;
  uint64_t v99;
  unint64_t v100;
  _QWORD *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  _QWORD *v105;
  unint64_t v106;
  unint64_t v107;
  uint64_t v108;
  unint64_t v109;
  _QWORD *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  _QWORD *v116;
  unint64_t v117;
  unint64_t v118;
  uint64_t v119;
  unint64_t v120;
  _QWORD *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  unint64_t v127;
  _QWORD *v128;
  unint64_t v129;
  unint64_t v130;
  uint64_t v131;
  unint64_t v132;
  _QWORD *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  float *v137;
  _QWORD *v138;
  float *v139;
  float v140;
  double v141;
  uint64_t v142;
  double *v143;
  unint64_t v144;
  uint64_t v145;
  unint64_t v146;
  unint64_t v147;
  uint64_t v148;
  unint64_t v149;
  unint64_t v150;
  uint64_t v151;
  unint64_t v152;
  unint64_t v153;
  uint64_t v154;
  unint64_t v155;
  void *v156;
  int v157;
  void *v158;
  char v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  int v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  int v172;
  uint64_t v173;
  uint64_t v174;
  char v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  unint64_t v180;
  uint64_t v182;
  _QWORD *v183;
  uint64_t v184;
  _QWORD *v185;
  char v186;
  uint64_t v187;
  char v188[4];
  int v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  void *v194;
  uint64_t v195;
  int v196[2];
  id v197;
  uint64_t v198;
  __int128 v199;
  void *v200;
  uint64_t v201;
  uint64_t v202;
  unint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  unint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  int v212;
  uint64_t v213;

  v3 = v2;
  v4 = a1;
  v213 = *MEMORY[0x24BDAC8D0];
  v5 = a1[1];
  v6 = a1[2];
  if (v5 >= v6)
  {
    v19 = 0;
    v18 = 0;
    v17 = 0;
    v16 = 0;
    v15 = 0;
    v14 = 0;
    v13 = 0;
    v12 = 0;
    v11 = 0;
    v10 = 0;
    v9 = 0;
    v8 = 0;
    v7 = 0;
    LOBYTE(v22) = 5;
    v23 = 0x3F8000003F800000;
    v21 = 0x3F8000003F800000;
LABEL_4:
    v4[3] = 0;
    *(_QWORD *)a2 = v23;
    *(_QWORD *)(a2 + 8) = v21;
    *(_QWORD *)(a2 + 16) = v19;
    *(_QWORD *)(a2 + 24) = v18;
    *(_QWORD *)(a2 + 32) = v17;
    *(_QWORD *)(a2 + 40) = v16;
    *(_QWORD *)(a2 + 48) = v15;
    *(_QWORD *)(a2 + 56) = v14;
    *(_QWORD *)(a2 + 64) = v13;
    *(_QWORD *)(a2 + 72) = v12;
    *(_QWORD *)(a2 + 80) = v11;
    *(_QWORD *)(a2 + 88) = v10;
    *(_QWORD *)(a2 + 96) = v9;
    *(_QWORD *)(a2 + 104) = v8;
    *(_DWORD *)(a2 + 112) = v7;
    *(_BYTE *)(a2 + 116) = v22;
    return;
  }
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = 0;
  v12 = 0;
  v13 = 0;
  v14 = 0;
  v15 = 0;
  v16 = 0;
  v17 = 0;
  v18 = 0;
  v19 = 0;
  LOBYTE(v20) = 0;
  v183 = v4 + 5;
  v21 = 0x3F8000003F800000;
  v22 = 5;
  v23 = 0x3F8000003F800000;
  v185 = v4;
  while (2)
  {
    v186 = v20;
    v30 = v4[3];
    *(_QWORD *)v196 = v21;
    v197 = v19;
    v194 = (void *)v23;
    v195 = v8;
    *(_DWORD *)v188 = v22;
    v189 = v7;
    v192 = v11;
    v193 = v12;
    v190 = v10;
    v191 = v13;
    v187 = v9;
    if (v30)
    {
      v31 = v4[4];
      if (v5 < v31)
        goto LABEL_16;
      if (v31 < v5)
      {
        v164 = v7;
        v165 = v9;
        lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
        swift_allocError();
        swift_willThrow();
        v172 = v164;
        v170 = v165;
        v171 = v195;
LABEL_250:
        v168 = v192;
        v169 = v190;
        v156 = v194;
        v166 = v191;
        v167 = v193;
        v157 = v196[0];
        v158 = v197;
        goto LABEL_251;
      }
      v4[3] = 0;
    }
    v32 = ProtobufDecoder.decodeVarint()();
    if (v3)
      goto LABEL_249;
    v30 = v32;
    if (v32 < 8)
    {
LABEL_248:
      lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
      swift_allocError();
      swift_willThrow();
LABEL_249:
      v172 = v189;
      v170 = v187;
      v171 = v195;
      goto LABEL_250;
    }
LABEL_16:
    switch(v30 >> 3)
    {
      case 1uLL:
        if ((v30 & 7) != 2)
          goto LABEL_248;
        v182 = v16;
        v33 = v15;
        v34 = v14;
        v35 = (_QWORD *)*v183;
        v36 = v18;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v35 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v35[2] + 1, 1, v35);
        v38 = v35[2];
        v37 = v35[3];
        if (v38 >= v37 >> 1)
          v35 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v37 > 1), v38 + 1, 1, v35);
        v35[2] = v38 + 1;
        v35[v38 + 4] = v6;
        v185[5] = v35;
        v39 = ProtobufDecoder.decodeVarint()();
        if (v3)
          goto LABEL_256;
        if (v39 < 0)
        {
          __break(1u);
LABEL_266:
          __break(1u);
LABEL_267:
          __break(1u);
LABEL_268:
          __break(1u);
LABEL_269:
          __break(1u);
LABEL_270:
          __break(1u);
LABEL_271:
          __break(1u);
LABEL_272:
          __break(1u);
LABEL_273:
          __break(1u);
LABEL_274:
          __break(1u);
LABEL_275:
          __break(1u);
LABEL_276:
          __break(1u);
LABEL_277:
          __break(1u);
LABEL_278:
          __break(1u);
LABEL_279:
          __break(1u);
LABEL_280:
          __break(1u);
LABEL_281:
          __break(1u);
LABEL_282:
          __break(1u);
LABEL_283:
          __break(1u);
LABEL_284:
          __break(1u);
LABEL_285:
          __break(1u);
LABEL_286:
          __break(1u);
LABEL_287:
          __break(1u);
LABEL_288:
          __break(1u);
LABEL_289:
          __break(1u);
LABEL_290:
          __break(1u);
LABEL_291:
          __break(1u);
LABEL_292:
          __break(1u);
LABEL_293:
          __break(1u);
LABEL_294:
          __break(1u);
LABEL_295:
          __break(1u);
          __break(1u);
          __break(1u);
          __break(1u);
        }
        v40 = v185[1] + v39;
        v14 = v34;
        if (v6 < v40)
          goto LABEL_258;
        v185[2] = v40;
        BlurStyle.init(from:)((unint64_t)v185, (uint64_t)&v199);
        v41 = (_QWORD *)*v183;
        if (!*(_QWORD *)(*v183 + 16))
          goto LABEL_274;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v41 = specialized _ArrayBuffer._consumeAndCreateNew()(v41);
        v184 = 0;
        v42 = v41[2];
        if (!v42)
          goto LABEL_282;
        v43 = v42 - 1;
        v44 = v41[v43 + 4];
        v41[2] = v43;
        outlined consume of GraphicsFilter(v194, v196[0], v197, v18, v17, v182, v33, v34, v13, v193, v192, v190, v187, v195, v189, SBYTE2(v189));
        v22 = 0;
        v8 = 0;
        v185[5] = v41;
        v185[2] = v44;
        v45 = 256;
        if (!BYTE9(v199))
          v45 = 0;
        v28 = v45 | BYTE8(v199);
        v7 = 0;
        v9 = 0;
        v10 = 0;
        v11 = 0;
        v29 = v199;
        v12 = 0;
        v13 = 0;
        v14 = 0;
        v24 = 0;
        v25 = 0;
        v17 = 0;
        v26 = 0;
        v27 = 0;
        if ((v186 & 1) != 0)
          goto LABEL_7;
        LOBYTE(v20) = 0;
        v23 = v199;
        v21 = v45 | BYTE8(v199);
        v19 = 0;
        v18 = 0;
        v17 = 0;
        v16 = 0;
        v15 = 0;
        v14 = 0;
        v13 = 0;
        v12 = 0;
        v11 = 0;
        v10 = 0;
        v9 = 0;
        v7 = 0;
        goto LABEL_8;
      case 2uLL:
        if ((v30 & 7) != 2)
          goto LABEL_248;
        v182 = v16;
        v33 = v15;
        v34 = v14;
        v46 = (_QWORD *)*v183;
        v36 = v18;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v46 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v46[2] + 1, 1, v46);
        v48 = v46[2];
        v47 = v46[3];
        if (v48 >= v47 >> 1)
          v46 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v47 > 1), v48 + 1, 1, v46);
        v46[2] = v48 + 1;
        v46[v48 + 4] = v6;
        v185[5] = v46;
        v49 = ProtobufDecoder.decodeVarint()();
        if (v3)
          goto LABEL_256;
        if (v49 < 0)
          goto LABEL_266;
        v50 = v185[1] + v49;
        v14 = v34;
        if (v6 < v50)
          goto LABEL_258;
        v185[2] = v50;
        ResolvedShadowStyle.init(from:)((unint64_t)v185, (unint64_t)&v199);
        v51 = (_QWORD *)*v183;
        if (!*(_QWORD *)(*v183 + 16))
          goto LABEL_275;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v51 = specialized _ArrayBuffer._consumeAndCreateNew()(v51);
        v184 = 0;
        v52 = v51[2];
        if (!v52)
          goto LABEL_283;
        v53 = v52 - 1;
        v54 = v51[v53 + 4];
        v51[2] = v53;
        outlined consume of GraphicsFilter(v194, v196[0], v197, v18, v17, v182, v33, v34, v13, v193, v192, v190, v187, v195, v189, SBYTE2(v189));
        v7 = 0;
        v8 = 0;
        v185[5] = v51;
        v185[2] = v54;
        v27 = (unint64_t)v200;
        v26 = v201;
        v17 = v202;
        v25 = v203 | ((unint64_t)BYTE4(v203) << 32);
        v22 = 2;
        v9 = 0;
        v10 = 0;
        v11 = 0;
        v28 = *((_QWORD *)&v199 + 1);
        v29 = v199;
        v12 = 0;
        v13 = 0;
        v14 = 0;
        v24 = 0;
        if ((v186 & 1) != 0)
          goto LABEL_7;
LABEL_152:
        LOBYTE(v20) = 0;
        v23 = v29;
        v21 = v28;
        v19 = (id)v27;
        v18 = v26;
        v16 = v25;
        goto LABEL_108;
      case 3uLL:
        if ((v30 & 7) != 2)
          goto LABEL_248;
        v179 = v17;
        v182 = v16;
        v33 = v15;
        v34 = v14;
        v55 = (_QWORD *)*v183;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v55 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v55[2] + 1, 1, v55);
        v57 = v55[2];
        v56 = v55[3];
        if (v57 >= v56 >> 1)
          v55 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v56 > 1), v57 + 1, 1, v55);
        v55[2] = v57 + 1;
        v55[v57 + 4] = v6;
        v185[5] = v55;
        v58 = ProtobufDecoder.decodeVarint()();
        if (!v3)
        {
          if (v58 < 0)
            goto LABEL_267;
          v59 = v185[1] + v58;
          if (v6 < v59)
          {
            lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
            swift_allocError();
            swift_willThrow();
            outlined consume of GraphicsFilter(v194, v196[0], v197, v18, v179, v182, v33, v14, v13, v193, v192, v190, v187, v195, v189, SBYTE2(v189));
            return;
          }
          v185[2] = v59;
          v200 = 0;
          v201 = 0;
          v199 = 0x3FF0000000000000uLL;
          v202 = 0x3FF0000000000000;
          v204 = 0;
          v205 = 0;
          v203 = 0;
          v206 = 0x3FF0000000000000;
          closure #1 in ProjectionTransform.init(from:)((unint64_t)&v199, v185, &v198);
          v175 = v18;
          v176 = v33;
          v177 = v14;
          v184 = 0;
          v60 = (_QWORD *)*v183;
          if (!*(_QWORD *)(*v183 + 16))
            goto LABEL_276;
          v28 = *((_QWORD *)&v199 + 1);
          v29 = v199;
          v27 = (unint64_t)v200;
          v26 = v201;
          v17 = v202;
          v25 = v203;
          v24 = v204;
          v14 = v205;
          v174 = v206;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v60 = specialized _ArrayBuffer._consumeAndCreateNew()(v60);
          v61 = v60[2];
          if (!v61)
            goto LABEL_284;
          v62 = v61 - 1;
          v173 = v60[v62 + 4];
          v60[2] = v62;
          outlined consume of GraphicsFilter(v194, v196[0], v197, v175, v179, v182, v176, v177, v13, v193, v192, v190, v187, v195, v189, SBYTE2(v189));
          v7 = 0;
          v8 = 0;
          v185[5] = v60;
          v22 = 3;
          v13 = v174;
          v185[2] = v173;
          v9 = 0;
          v10 = 0;
          v11 = 0;
          v12 = 0;
          if ((v186 & 1) != 0)
          {
LABEL_7:
            LOBYTE(v20) = 1;
            v23 = v29;
            v21 = v28;
            v19 = (id)v27;
            v18 = v26;
            v16 = v25;
            v15 = v24;
          }
          else
          {
            LOBYTE(v20) = 0;
            v23 = v29;
            v21 = v28;
            v19 = (id)v27;
            v18 = v26;
            v16 = v25;
            v15 = v24;
LABEL_109:
            v12 = 0;
            v11 = 0;
            v10 = 0;
            v9 = 0;
          }
LABEL_8:
          v3 = v184;
          v4 = v185;
LABEL_9:
          v5 = v4[1];
          v6 = v4[2];
          if (v5 >= v6)
            goto LABEL_4;
          continue;
        }
        v172 = v189;
        v156 = v194;
        v170 = v187;
        v171 = v195;
        v168 = v192;
        v169 = v190;
        v166 = v13;
        v167 = v193;
        v157 = v196[0];
        v158 = v197;
        v159 = v18;
        v160 = v179;
LABEL_257:
        v161 = v182;
        v162 = v33;
        v163 = v34;
LABEL_253:
        outlined consume of GraphicsFilter(v156, v157, v158, v159, v160, v161, v162, v163, v166, v167, v168, v169, v170, v171, v172, SBYTE2(v172));
        return;
      case 4uLL:
        if ((v30 & 7) != 2)
          goto LABEL_260;
        specialized ProtobufDecoder.decodeMessage<A>()(&v199);
        if (v3)
          goto LABEL_261;
        outlined consume of GraphicsFilter(v194, v196[0], v197, v18, v17, v16, v15, v14, v13, v193, v192, v190, v187, v195, v189, SBYTE2(v189));
        v21 = *((_QWORD *)&v199 + 1);
        v23 = v199;
        v19 = v200;
        v18 = v201;
        v17 = v202;
        v16 = v203;
        v15 = v204;
        v14 = v205;
        v11 = v178 & 0xFFFFFFFFFFFFFF00;
        v13 = v206;
        v12 = v207;
        v178 &= 0xFFFFFFFFFFFFFF00;
        if ((v186 & 1) != 0)
        {
          v63 = v180;
LABEL_216:
          v11 = v63 & 0xFFFFFFFFFFFFFF00 | 1;
          v22 = 4;
          LOBYTE(v20) = 1;
          v180 = v11;
        }
        else
        {
          LOBYTE(v20) = 0;
          v22 = 4;
        }
        goto LABEL_9;
      case 5uLL:
        if ((v30 & 7) != 2)
          goto LABEL_248;
        v182 = v16;
        v33 = v15;
        v34 = v14;
        v64 = (_QWORD *)*v183;
        v36 = v18;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v64 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v64[2] + 1, 1, v64);
        v66 = v64[2];
        v65 = v64[3];
        if (v66 >= v65 >> 1)
          v64 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v65 > 1), v66 + 1, 1, v64);
        v64[2] = v66 + 1;
        v64[v66 + 4] = v6;
        v185[5] = v64;
        v67 = ProtobufDecoder.decodeVarint()();
        if (v3)
          goto LABEL_256;
        if (v67 < 0)
          goto LABEL_268;
        v68 = v185[1] + v67;
        v14 = v34;
        if (v6 < v68)
          goto LABEL_258;
        v185[2] = v68;
        v69 = specialized Color.Resolved.init(from:)(v185);
        v73 = (_QWORD *)*v183;
        if (!*(_QWORD *)(*v183 + 16))
          goto LABEL_277;
        v74 = v69;
        v75 = v70;
        v76 = v71;
        v77 = v72;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v73 = specialized _ArrayBuffer._consumeAndCreateNew()(v73);
        v184 = 0;
        v78 = v73[2];
        if (!v78)
          goto LABEL_285;
        v79 = v78 - 1;
        v80 = v73[v79 + 4];
        v73[2] = v79;
        outlined consume of GraphicsFilter(v194, v196[0], v197, v18, v17, v182, v33, v34, v13, v193, v192, v190, v187, v195, v189, SBYTE2(v189));
        v7 = 0;
        v8 = 0;
        v185[5] = v73;
        v185[2] = v80;
        v29 = LODWORD(v74) | ((unint64_t)v75 << 32);
        v28 = v76 | ((unint64_t)v77 << 32);
        v22 = 5;
        v9 = 0;
        v10 = 0;
        v11 = 0;
        v12 = 0;
        v13 = 0;
        v14 = 0;
        v24 = 0;
        v25 = 0;
        v17 = 0;
        v26 = 0;
        v27 = 0;
        if ((v186 & 1) != 0)
          goto LABEL_7;
        LOBYTE(v20) = 0;
        v23 = LODWORD(v74) | ((unint64_t)v75 << 32);
        v21 = v76 | ((unint64_t)v77 << 32);
        goto LABEL_106;
      case 6uLL:
        v81 = v30 & 7;
        if (v81 == 5)
        {
          v137 = (float *)v4[1];
          v138 = v4;
          v139 = v137 + 1;
          if (v6 < (unint64_t)(v137 + 1))
            goto LABEL_248;
          v184 = v3;
          v140 = *v137;
          outlined consume of GraphicsFilter(v194, v196[0], v197, v18, v17, v16, v15, v14, v13, v193, v192, v190, v187, v195, v189, SBYTE2(v189));
          v138[1] = v139;
          v141 = v140;
          v83 = v186;
        }
        else
        {
          if (v81 == 2)
          {
            v142 = ProtobufDecoder.decodeVarint()();
            if (v3)
              goto LABEL_249;
            v83 = v186;
            if (v142 < 0)
              goto LABEL_291;
            v82 = (double *)v4[1];
            if (v6 < (unint64_t)v82 + v142)
              goto LABEL_248;
            v4[3] = 49;
            v4[4] = (char *)v82 + v142;
          }
          else
          {
            if (v81 != 1)
              goto LABEL_248;
            v82 = (double *)v4[1];
            v83 = v186;
          }
          v143 = v82 + 1;
          if (v6 < (unint64_t)(v82 + 1))
          {
            lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
            swift_allocError();
            swift_willThrow();
            v172 = v189;
            v156 = v194;
            v170 = v187;
            v171 = v195;
            v168 = v192;
            v169 = v190;
            v166 = v13;
            v167 = v193;
            v157 = v196[0];
            v158 = v197;
            goto LABEL_251;
          }
          v184 = v3;
          v141 = *v82;
          outlined consume of GraphicsFilter(v194, v196[0], v197, v18, v17, v16, v15, v14, v13, v193, v192, v190, v187, v195, v189, SBYTE2(v189));
          v185[1] = v143;
        }
        v7 = 0;
        v8 = 0;
        v29 = *(_QWORD *)&v141;
        v22 = 6;
        v9 = 0;
        v10 = 0;
        v11 = 0;
        v12 = 0;
        v13 = 0;
        v14 = 0;
        v24 = 0;
        v25 = 0;
        v17 = 0;
        v26 = 0;
        v27 = 0;
        v28 = 0;
        if ((v83 & 1) != 0)
          goto LABEL_7;
LABEL_104:
        LOBYTE(v20) = 0;
        v23 = v29;
        goto LABEL_105;
      case 7uLL:
        *(_QWORD *)&v199 = v30;
        v84 = ProtobufDecoder.doubleField(_:)((SwiftUI::ProtobufFormat::Field)&v199);
        v28 = v85;
        if (v85)
          goto LABEL_249;
        v86 = v84;
        v184 = 0;
        outlined consume of GraphicsFilter(v194, v196[0], v197, v18, v17, v16, v15, v14, v191, v193, v192, v190, v187, v195, v189, SBYTE2(v189));
        v7 = 0;
        v8 = 0;
        v29 = *(_QWORD *)&v86;
        v22 = 7;
        goto LABEL_103;
      case 8uLL:
        *(_QWORD *)&v199 = v30;
        v87 = ProtobufDecoder.doubleField(_:)((SwiftUI::ProtobufFormat::Field)&v199);
        v28 = v88;
        if (v88)
          goto LABEL_249;
        v89 = v87;
        v184 = 0;
        outlined consume of GraphicsFilter(v194, v196[0], v197, v18, v17, v16, v15, v14, v191, v193, v192, v190, v187, v195, v189, SBYTE2(v189));
        v7 = 0;
        v8 = 0;
        v29 = *(_QWORD *)&v89;
        v22 = 8;
        goto LABEL_103;
      case 9uLL:
        *(_QWORD *)&v199 = v30;
        v90 = ProtobufDecoder.doubleField(_:)((SwiftUI::ProtobufFormat::Field)&v199);
        v28 = v91;
        if (v91)
          goto LABEL_249;
        v92 = v90;
        v184 = 0;
        outlined consume of GraphicsFilter(v194, v196[0], v197, v18, v17, v16, v15, v14, v191, v193, v192, v190, v187, v195, v189, SBYTE2(v189));
        v7 = 0;
        v8 = 0;
        v29 = *(_QWORD *)&v92;
        v22 = 9;
        goto LABEL_103;
      case 0xAuLL:
        outlined consume of GraphicsFilter(v194, v196[0], v197, v18, v17, v16, v15, v14, v13, v193, v192, v190, v187, v195, v189, SBYTE2(v189));
        switch(v30 & 7)
        {
          case 0uLL:
            v13 = v3;
            ProtobufDecoder.decodeVarint()();
            if (v3)
              return;
            v21 = 0;
            v19 = 0;
            v18 = 0;
            v17 = 0;
            v16 = 0;
            v15 = 0;
            v14 = 0;
            v12 = 0;
            v11 = 0;
            v10 = 0;
            v9 = 0;
            v8 = 0;
            v7 = 0;
            v22 = 16;
            v23 = 1;
            if ((v186 & 1) != 0)
              goto LABEL_215;
            goto LABEL_192;
          case 1uLL:
            v147 = v4[1] + 8;
            goto LABEL_225;
          case 2uLL:
            v148 = ProtobufDecoder.decodeVarint()();
            if (v3)
              return;
            if (v148 < 0)
              goto LABEL_293;
            v149 = v4[1] + v148;
            if (v6 < v149)
              goto LABEL_259;
            v184 = 0;
            v7 = 0;
            v8 = 0;
            v4[1] = v149;
            v22 = 16;
            v9 = 0;
            v10 = 0;
            v11 = 0;
            v12 = 0;
            v13 = 0;
            v14 = 0;
            v24 = 0;
            v25 = 0;
            v17 = 0;
            v26 = 0;
            v27 = 0;
            v28 = 0;
            v29 = 1;
            if ((v186 & 1) != 0)
              goto LABEL_7;
LABEL_227:
            LOBYTE(v20) = 0;
            v23 = 1;
            break;
          case 5uLL:
            v147 = v4[1] + 4;
LABEL_225:
            if (v6 < v147)
              goto LABEL_259;
            v184 = v3;
            v7 = 0;
            v8 = 0;
            v4[1] = v147;
            v22 = 16;
            v9 = 0;
            v10 = 0;
            v11 = 0;
            v12 = 0;
            v13 = 0;
            v14 = 0;
            v24 = 0;
            v25 = 0;
            v17 = 0;
            v26 = 0;
            v27 = 0;
            v28 = 0;
            v29 = 1;
            if ((v186 & 1) == 0)
              goto LABEL_227;
            goto LABEL_7;
          default:
            goto LABEL_259;
        }
        goto LABEL_105;
      case 0xBuLL:
        outlined consume of GraphicsFilter(v194, v196[0], v197, v18, v17, v16, v15, v14, v13, v193, v192, v190, v187, v195, v189, SBYTE2(v189));
        switch(v30 & 7)
        {
          case 0uLL:
            v13 = v3;
            ProtobufDecoder.decodeVarint()();
            if (v3)
              return;
            v21 = 0;
            v19 = 0;
            v18 = 0;
            v17 = 0;
            v16 = 0;
            v15 = 0;
            v14 = 0;
            v12 = 0;
            v11 = 0;
            v10 = 0;
            v9 = 0;
            v8 = 0;
            v7 = 0;
            v22 = 16;
            v23 = 2;
            if ((v186 & 1) != 0)
              goto LABEL_215;
            goto LABEL_192;
          case 1uLL:
            v150 = v4[1] + 8;
            goto LABEL_235;
          case 2uLL:
            v151 = ProtobufDecoder.decodeVarint()();
            if (v3)
              return;
            if (v151 < 0)
              goto LABEL_294;
            v152 = v4[1] + v151;
            if (v6 < v152)
              goto LABEL_259;
            v184 = 0;
            v7 = 0;
            v8 = 0;
            v4[1] = v152;
            v22 = 16;
            v9 = 0;
            v10 = 0;
            v11 = 0;
            v12 = 0;
            v13 = 0;
            v14 = 0;
            v24 = 0;
            v25 = 0;
            v17 = 0;
            v26 = 0;
            v27 = 0;
            v28 = 0;
            v29 = 2;
            if ((v186 & 1) != 0)
              goto LABEL_7;
LABEL_237:
            LOBYTE(v20) = 0;
            v23 = 2;
            break;
          case 5uLL:
            v150 = v4[1] + 4;
LABEL_235:
            if (v6 < v150)
              goto LABEL_259;
            v184 = v3;
            v7 = 0;
            v8 = 0;
            v4[1] = v150;
            v22 = 16;
            v9 = 0;
            v10 = 0;
            v11 = 0;
            v12 = 0;
            v13 = 0;
            v14 = 0;
            v24 = 0;
            v25 = 0;
            v17 = 0;
            v26 = 0;
            v27 = 0;
            v28 = 0;
            v29 = 2;
            if ((v186 & 1) == 0)
              goto LABEL_237;
            goto LABEL_7;
          default:
            goto LABEL_259;
        }
        goto LABEL_105;
      case 0xCuLL:
        *(_QWORD *)&v199 = v30;
        v93 = ProtobufDecoder.doubleField(_:)((SwiftUI::ProtobufFormat::Field)&v199);
        v28 = v94;
        if (v94)
          goto LABEL_249;
        v95 = v93;
        v184 = 0;
        outlined consume of GraphicsFilter(v194, v196[0], v197, v18, v17, v16, v15, v14, v191, v193, v192, v190, v187, v195, v189, SBYTE2(v189));
        v7 = 0;
        v8 = 0;
        v29 = *(_QWORD *)&v95;
        v22 = 10;
LABEL_103:
        v9 = 0;
        v10 = 0;
        v11 = 0;
        v12 = 0;
        v13 = 0;
        v14 = 0;
        v24 = 0;
        v25 = 0;
        v17 = 0;
        v26 = 0;
        v27 = 0;
        if ((v186 & 1) == 0)
          goto LABEL_104;
        goto LABEL_7;
      case 0xDuLL:
        if ((v30 & 7) != 2)
          goto LABEL_248;
        v182 = v16;
        v33 = v15;
        v34 = v14;
        v96 = (_QWORD *)*v183;
        v36 = v18;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v96 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v96[2] + 1, 1, v96);
        v98 = v96[2];
        v97 = v96[3];
        if (v98 >= v97 >> 1)
          v96 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v97 > 1), v98 + 1, 1, v96);
        v96[2] = v98 + 1;
        v96[v98 + 4] = v6;
        v185[5] = v96;
        v99 = ProtobufDecoder.decodeVarint()();
        if (v3)
          goto LABEL_256;
        if (v99 < 0)
          goto LABEL_269;
        v100 = v185[1] + v99;
        v14 = v34;
        if (v6 < v100)
          goto LABEL_258;
        v185[2] = v100;
        GraphicsFilter.ColorMonochrome.init(from:)((unint64_t)v185, (uint64_t)&v199);
        v101 = (_QWORD *)*v183;
        if (!*(_QWORD *)(*v183 + 16))
          goto LABEL_278;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v101 = specialized _ArrayBuffer._consumeAndCreateNew()(v101);
        v184 = 0;
        v102 = v101[2];
        if (!v102)
          goto LABEL_286;
        v103 = v102 - 1;
        v104 = v101[v103 + 4];
        v101[2] = v103;
        outlined consume of GraphicsFilter(v194, v196[0], v197, v18, v17, v182, v33, v34, v13, v193, v192, v190, v187, v195, v189, SBYTE2(v189));
        v7 = 0;
        v8 = 0;
        v185[5] = v101;
        v185[2] = v104;
        v28 = *((_QWORD *)&v199 + 1);
        v29 = v199;
        v22 = 11;
        v9 = 0;
        v10 = 0;
        v11 = 0;
        v12 = 0;
        v13 = 0;
        v14 = 0;
        v27 = (unint64_t)v200;
        goto LABEL_140;
      case 0xEuLL:
        if ((v30 & 7) != 2)
        {
LABEL_260:
          lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
          swift_allocError();
          swift_willThrow();
LABEL_261:
          v157 = v196[0];
          v158 = v197;
          v172 = v189;
          v156 = v194;
          v170 = v187;
          v171 = v195;
          v168 = v192;
          v169 = v190;
          v166 = v13;
          v167 = v193;
LABEL_251:
          v159 = v18;
          v160 = v17;
          v161 = v16;
          v162 = v15;
LABEL_252:
          v163 = v14;
          goto LABEL_253;
        }
        specialized ProtobufDecoder.decodeMessage<A>()(&v199);
        if (v3)
          goto LABEL_261;
        outlined consume of GraphicsFilter(v194, v196[0], v197, v18, v17, v16, v15, v14, v13, v193, v192, v190, v187, v195, v189, SBYTE2(v189));
        v21 = *((_QWORD *)&v199 + 1);
        v23 = v199;
        v19 = v200;
        v18 = v201;
        v17 = v202;
        v16 = v203;
        v15 = v204;
        v14 = v205;
        v22 = 12;
        v13 = v206;
        v12 = v207;
        if ((v186 & 1) == 0)
        {
          LOBYTE(v20) = 0;
          goto LABEL_9;
        }
        v184 = 0;
LABEL_6:
        v24 = v15;
        v25 = v16;
        v26 = v18;
        v27 = (unint64_t)v19;
        v28 = v21;
        v29 = v23;
        goto LABEL_7;
      case 0xFuLL:
        if ((v30 & 7) != 2)
          goto LABEL_248;
        v182 = v16;
        v33 = v15;
        v34 = v14;
        v105 = (_QWORD *)*v183;
        v36 = v18;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v105 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v105[2] + 1, 1, v105);
        v107 = v105[2];
        v106 = v105[3];
        if (v107 >= v106 >> 1)
          v105 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v106 > 1), v107 + 1, 1, v105);
        v105[2] = v107 + 1;
        v105[v107 + 4] = v6;
        v185[5] = v105;
        v108 = ProtobufDecoder.decodeVarint()();
        if (v3)
          goto LABEL_256;
        if (v108 < 0)
          goto LABEL_270;
        v109 = v185[1] + v108;
        v14 = v34;
        if (v6 < v109)
          goto LABEL_258;
        v185[2] = v109;
        GraphicsFilter.LuminanceCurve.init(from:)((unint64_t)v185, (uint64_t)&v199);
        v110 = (_QWORD *)*v183;
        if (!*(_QWORD *)(*v183 + 16))
          goto LABEL_279;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v110 = specialized _ArrayBuffer._consumeAndCreateNew()(v110);
        v184 = 0;
        v111 = v110[2];
        if (!v111)
          goto LABEL_287;
        v112 = v111 - 1;
        v113 = v110[v112 + 4];
        v110[2] = v112;
        outlined consume of GraphicsFilter(v194, v196[0], v197, v18, v17, v182, v33, v34, v13, v193, v192, v190, v187, v195, v189, SBYTE2(v189));
        v7 = 0;
        v8 = 0;
        v185[5] = v110;
        v185[2] = v113;
        v22 = 13;
        v27 = v200;
        v9 = 0;
        v10 = 0;
        v11 = 0;
        v12 = 0;
        v13 = 0;
        v14 = 0;
        v28 = *((_QWORD *)&v199 + 1);
        v29 = v199;
LABEL_140:
        v24 = 0;
        v25 = 0;
        v17 = 0;
        v26 = 0;
        if ((v186 & 1) != 0)
          goto LABEL_7;
        LOBYTE(v20) = 0;
        v23 = v29;
        v21 = v28;
        v19 = (id)v27;
        goto LABEL_107;
      case 0x10uLL:
        outlined consume of GraphicsFilter(v194, v196[0], v197, v18, v17, v16, v15, v14, v13, v193, v192, v190, v187, v195, v189, SBYTE2(v189));
        switch(v30 & 7)
        {
          case 0uLL:
            v13 = v3;
            ProtobufDecoder.decodeVarint()();
            if (v3)
              return;
            v23 = 0;
            v21 = 0;
            v19 = 0;
            v18 = 0;
            v17 = 0;
            v16 = 0;
            v15 = 0;
            v14 = 0;
            v12 = 0;
            v11 = 0;
            v10 = 0;
            v9 = 0;
            v8 = 0;
            v7 = 0;
            v22 = 16;
            if ((v186 & 1) == 0)
              goto LABEL_192;
            goto LABEL_215;
          case 1uLL:
            v153 = v4[1] + 8;
            goto LABEL_245;
          case 2uLL:
            v154 = ProtobufDecoder.decodeVarint()();
            if (v3)
              return;
            if (v154 < 0)
              goto LABEL_295;
            v155 = v4[1] + v154;
            if (v6 < v155)
            {
LABEL_259:
              lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
              swift_allocError();
              swift_willThrow();
              return;
            }
            v184 = 0;
            v7 = 0;
            v8 = 0;
            v4[1] = v155;
            v22 = 16;
            v9 = 0;
            v10 = 0;
            v11 = 0;
            v12 = 0;
            v13 = 0;
            v14 = 0;
            v24 = 0;
            v25 = 0;
            v17 = 0;
            v26 = 0;
            v27 = 0;
            v28 = 0;
            v29 = 0;
            if ((v186 & 1) != 0)
              goto LABEL_7;
LABEL_247:
            LOBYTE(v20) = 0;
            v23 = 0;
LABEL_105:
            v21 = 0;
LABEL_106:
            v19 = 0;
LABEL_107:
            v18 = 0;
            v17 = 0;
            v16 = 0;
LABEL_108:
            v15 = 0;
            v14 = 0;
            v13 = 0;
            break;
          case 5uLL:
            v153 = v4[1] + 4;
LABEL_245:
            if (v6 < v153)
              goto LABEL_259;
            v184 = v3;
            v7 = 0;
            v8 = 0;
            v4[1] = v153;
            v22 = 16;
            v9 = 0;
            v10 = 0;
            v11 = 0;
            v12 = 0;
            v13 = 0;
            v14 = 0;
            v24 = 0;
            v25 = 0;
            v17 = 0;
            v26 = 0;
            v27 = 0;
            v28 = 0;
            v29 = 0;
            if ((v186 & 1) == 0)
              goto LABEL_247;
            goto LABEL_7;
          default:
            goto LABEL_259;
        }
        goto LABEL_109;
      case 0x11uLL:
        if ((v30 & 7) != 2)
          goto LABEL_248;
        ProtobufDecoder.beginMessage()();
        if (v3)
          goto LABEL_249;
        GraphicsFilter.ShaderFilter.init(from:)(v4, (uint64_t)&v199);
        if (!*(_QWORD *)(*v183 + 16))
          goto LABEL_273;
        v114 = specialized Array._customRemoveLast()();
        v184 = 0;
        if (!v114)
          v114 = specialized Array.remove(at:)(*(_QWORD *)(*v183 + 16) - 1);
        v115 = v114;
        outlined consume of GraphicsFilter(v194, v196[0], v197, v18, v17, v16, v15, v14, v13, v193, v192, v190, v187, v195, v189, SBYTE2(v189));
        v7 = 0;
        v8 = 0;
        v4[2] = v115;
        v28 = *((_QWORD *)&v199 + 1);
        v29 = v199;
        v27 = (unint64_t)v200;
        v22 = 15;
        v9 = 0;
        v10 = 0;
        v26 = v201;
        v11 = 0;
        v12 = 0;
        v13 = 0;
        v14 = 0;
        v24 = 0;
        v17 = v202;
        v25 = v203;
        if ((v186 & 1) == 0)
          goto LABEL_152;
        goto LABEL_7;
      case 0x12uLL:
        if ((v30 & 7) != 2)
          goto LABEL_248;
        v182 = v16;
        v33 = v15;
        v34 = v14;
        v116 = (_QWORD *)*v183;
        v36 = v18;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v116 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v116[2] + 1, 1, v116);
        v118 = v116[2];
        v117 = v116[3];
        if (v118 >= v117 >> 1)
          v116 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v117 > 1), v118 + 1, 1, v116);
        v116[2] = v118 + 1;
        v116[v118 + 4] = v6;
        v185[5] = v116;
        v119 = ProtobufDecoder.decodeVarint()();
        if (v3)
          goto LABEL_256;
        if (v119 < 0)
          goto LABEL_271;
        v120 = v185[1] + v119;
        v14 = v34;
        if (v6 < v120)
          goto LABEL_258;
        v185[2] = v120;
        VariableBlurStyle.init(from:)(v185, (uint64_t)&v199);
        v121 = (_QWORD *)*v183;
        if (!*(_QWORD *)(*v183 + 16))
          goto LABEL_280;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v121 = specialized _ArrayBuffer._consumeAndCreateNew()(v121);
        v122 = v121[2];
        if (!v122)
          goto LABEL_288;
        v123 = v122 - 1;
        v124 = v121[v123 + 4];
        v121[2] = v123;
        outlined consume of GraphicsFilter(v194, v196[0], v197, v18, v17, v182, v33, v34, v13, v193, v192, v190, v187, v195, v189, SBYTE2(v189));
        v185[5] = v121;
        v185[2] = v124;
        v4 = v185;
        v23 = v199;
        v19 = v200;
        v18 = v201;
        v17 = v202;
        v16 = v203;
        v15 = v204;
        v14 = v205;
        v13 = v206;
        v12 = v207;
        v11 = v208;
        v10 = v209;
        v9 = v210;
        v8 = v211;
        v125 = 256;
        if (!BYTE9(v199))
          v125 = 0;
        v21 = v125 | BYTE8(v199);
        v22 = 1;
        v7 = v212;
        if ((v186 & 1) != 0)
        {
          v184 = 0;
          goto LABEL_6;
        }
LABEL_192:
        LOBYTE(v20) = 0;
        goto LABEL_9;
      case 0x13uLL:
        if ((v30 & 7) == 0)
          goto LABEL_175;
        if ((v30 & 7) != 2)
          goto LABEL_248;
        v126 = ProtobufDecoder.decodeVarint()();
        if (v3)
          goto LABEL_249;
        if (v126 < 0)
          goto LABEL_290;
        v127 = v4[1] + v126;
        if (v6 < v127)
          goto LABEL_248;
        v4[3] = 152;
        v4[4] = v127;
LABEL_175:
        v20 = ProtobufDecoder.decodeVarint()();
        if (v3)
          goto LABEL_249;
        v21 = *(_QWORD *)v196;
        v19 = v197;
        v23 = (unint64_t)v194;
        v8 = v195;
        v22 = *(_DWORD *)v188;
        v7 = v189;
        v11 = v192;
        v12 = v193;
        v10 = v190;
        v9 = v187;
        if (!v20)
          goto LABEL_9;
LABEL_215:
        v63 = v180;
        if (v22 == 4)
          goto LABEL_216;
        LOBYTE(v20) = 1;
        goto LABEL_9;
      case 0x14uLL:
        if ((v30 & 7) != 2)
          goto LABEL_248;
        v182 = v16;
        v33 = v15;
        v34 = v14;
        v128 = (_QWORD *)*v183;
        v36 = v18;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v128 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v128[2] + 1, 1, v128);
        v130 = v128[2];
        v129 = v128[3];
        if (v130 >= v129 >> 1)
          v128 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v129 > 1), v130 + 1, 1, v128);
        v128[2] = v130 + 1;
        v128[v130 + 4] = v6;
        v185[5] = v128;
        v13 = v3;
        v131 = ProtobufDecoder.decodeVarint()();
        if (v3)
        {
LABEL_256:
          v172 = v189;
          v156 = v194;
          v170 = v187;
          v171 = v195;
          v168 = v192;
          v169 = v190;
          v166 = v191;
          v167 = v193;
          v157 = v196[0];
          v158 = v197;
          v159 = v36;
          v160 = v17;
          goto LABEL_257;
        }
        if (v131 < 0)
          goto LABEL_272;
        v132 = v185[1] + v131;
        v14 = v34;
        if (v6 < v132)
        {
LABEL_258:
          lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
          swift_allocError();
          swift_willThrow();
          v172 = v189;
          v156 = v194;
          v170 = v187;
          v171 = v195;
          v168 = v192;
          v169 = v190;
          v166 = v191;
          v167 = v193;
          v157 = v196[0];
          v158 = v197;
          v159 = v18;
          v160 = v17;
          v161 = v182;
          v162 = v33;
          goto LABEL_252;
        }
        v185[2] = v132;
        GraphicsFilter.ColorCurves.init(from:)((unint64_t)v185, &v199);
        v133 = (_QWORD *)*v183;
        if (!*(_QWORD *)(*v183 + 16))
          goto LABEL_281;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v133 = specialized _ArrayBuffer._consumeAndCreateNew()(v133);
        v134 = v133[2];
        if (!v134)
          goto LABEL_289;
        v135 = v134 - 1;
        v136 = v133[v135 + 4];
        v133[2] = v135;
        outlined consume of GraphicsFilter(v194, v196[0], v197, v18, v17, v182, v33, v34, v191, v193, v192, v190, v187, v195, v189, SBYTE2(v189));
        v185[5] = v133;
        v185[2] = v136;
        v4 = v185;
        v21 = *((_QWORD *)&v199 + 1);
        v23 = v199;
        v19 = v200;
        v18 = v201;
        v17 = v202;
        v16 = v203;
        v22 = 14;
        v15 = v204;
        v14 = v205;
        if ((v186 & 1) != 0)
        {
          v184 = 0;
          goto LABEL_6;
        }
        LOBYTE(v20) = 0;
        goto LABEL_9;
      default:
        switch(v30 & 7)
        {
          case 0uLL:
            ProtobufDecoder.decodeVarint()();
            if (v3)
              goto LABEL_249;
            v21 = *(_QWORD *)v196;
            v19 = v197;
            v23 = (unint64_t)v194;
            v8 = v195;
            v22 = *(_DWORD *)v188;
            v7 = v189;
            v11 = v192;
            v12 = v193;
            v10 = v190;
            v9 = v187;
            if ((v186 & 1) != 0)
              goto LABEL_215;
            goto LABEL_192;
          case 1uLL:
            v144 = v4[1] + 8;
            goto LABEL_212;
          case 2uLL:
            v145 = ProtobufDecoder.decodeVarint()();
            if (v3)
              goto LABEL_249;
            if (v145 < 0)
              goto LABEL_292;
            v146 = v4[1] + v145;
            if (v6 < v146)
              goto LABEL_248;
            v4[1] = v146;
            if ((v186 & 1) == 0)
            {
LABEL_210:
              LOBYTE(v20) = 0;
              v21 = *(_QWORD *)v196;
              v19 = v197;
              v23 = (unint64_t)v194;
              v8 = v195;
              v22 = *(_DWORD *)v188;
              v7 = v189;
              v11 = v192;
              v12 = v193;
              v10 = v190;
              v9 = v187;
              goto LABEL_9;
            }
LABEL_214:
            v21 = *(_QWORD *)v196;
            v19 = v197;
            v23 = (unint64_t)v194;
            v8 = v195;
            v22 = *(_DWORD *)v188;
            v7 = v189;
            v11 = v192;
            v12 = v193;
            v10 = v190;
            v9 = v187;
            break;
          case 5uLL:
            v144 = v4[1] + 4;
LABEL_212:
            if (v6 < v144)
              goto LABEL_248;
            v4[1] = v144;
            if ((v186 & 1) != 0)
              goto LABEL_214;
            goto LABEL_210;
          default:
            goto LABEL_248;
        }
        goto LABEL_215;
    }
  }
}

void protocol witness for ProtobufEncodableMessage.encode(to:) in conformance GraphicsFilter()
{
  GraphicsFilter.encode(to:)();
}

void protocol witness for ProtobufDecodableMessage.init(from:) in conformance GraphicsFilter(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  GraphicsFilter.init(from:)(a1, a2);
}

float *GraphicsFilter.ColorMonochrome.encode(to:)(_QWORD *a1)
{
  float *v1;
  uint64_t v2;
  float *v3;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float *result;
  uint64_t v12;
  uint64_t v13;

  v3 = v1;
  v5 = *v3;
  v6 = v3[1];
  v7 = v3[2];
  v8 = v3[3];
  v10 = v3[4];
  v9 = v3[5];
  ProtobufEncoder.encodeVarint(_:)(0xAuLL);
  result = (float *)specialized ProtobufEncoder.encodeMessage<A>(_:)(v5, v6, v7, v8);
  if (!v2)
  {
    if (v10 == 1.0)
      goto LABEL_6;
    ProtobufEncoder.encodeVarint(_:)(0x15uLL);
    v12 = a1[1];
    result = (float *)(v12 + 4);
    if (__OFADD__(v12, 4))
    {
      __break(1u);
    }
    else if (a1[2] >= (uint64_t)result)
    {
      a1[1] = result;
      *(float *)(*a1 + v12) = v10;
LABEL_6:
      if (v9 == 0.0)
        return result;
LABEL_7:
      ProtobufEncoder.encodeVarint(_:)(0x1DuLL);
      v13 = a1[1];
      result = (float *)(v13 + 4);
      if (__OFADD__(v13, 4))
      {
        __break(1u);
      }
      else if (a1[2] >= (uint64_t)result)
      {
        a1[1] = result;
        *(float *)(*a1 + v13) = v9;
        return result;
      }
      result = (float *)ProtobufEncoder.growBufferSlow(to:)((int64_t)result);
      *result = v9;
      return result;
    }
    result = (float *)ProtobufEncoder.growBufferSlow(to:)((int64_t)result);
    *result = v10;
    if (v9 != 0.0)
      goto LABEL_7;
  }
  return result;
}

unint64_t GraphicsFilter.ColorMonochrome.init(from:)@<X0>(unint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  _QWORD *v3;
  unint64_t v5;
  unint64_t v6;
  float v7;
  int v8;
  int v9;
  int v10;
  int v11;
  float v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  float v19;
  int v20;
  int v21;
  int v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int *v27;
  float *v28;
  _DWORD *v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v3 = (_QWORD *)result;
  v5 = *(_QWORD *)(result + 8);
  v6 = *(_QWORD *)(result + 16);
  v7 = 1.0;
  v8 = 0;
  if (v5 >= v6)
  {
LABEL_57:
    v9 = 0;
    v10 = 0;
    v11 = 0;
    v12 = 0.0;
LABEL_58:
    v3[3] = 0;
    *(float *)a2 = v12;
    *(_DWORD *)(a2 + 4) = v11;
    *(_DWORD *)(a2 + 8) = v10;
    *(_DWORD *)(a2 + 12) = v9;
    *(float *)(a2 + 16) = v7;
    *(_DWORD *)(a2 + 20) = v8;
    return result;
  }
  v9 = 0;
  v10 = 0;
  v11 = 0;
  v12 = 0.0;
  while (1)
  {
    result = v3[3];
    if (result)
    {
      v13 = v3[4];
      if (v5 < v13)
        goto LABEL_11;
      if (v13 < v5)
        goto LABEL_59;
      v3[3] = 0;
    }
    result = ProtobufDecoder.decodeVarint()();
    if (v2)
      return result;
    if (result <= 7)
    {
LABEL_59:
      lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
      swift_allocError();
      return swift_willThrow();
    }
LABEL_11:
    v14 = result >> 3;
    if (result >> 3 == 3)
    {
      if ((result & 7) == 2)
      {
        result = ProtobufDecoder.decodeVarint()();
        if (v2)
          return result;
        if ((result & 0x8000000000000000) != 0)
          goto LABEL_64;
        v27 = (int *)v3[1];
        if (v6 < (unint64_t)v27 + result)
          goto LABEL_59;
        v3[3] = 29;
        v3[4] = (char *)v27 + result;
      }
      else
      {
        if ((result & 7) != 5)
          goto LABEL_59;
        v27 = (int *)v3[1];
      }
      v29 = v27 + 1;
      if (v6 < (unint64_t)(v27 + 1))
        goto LABEL_59;
      v8 = *v27;
      goto LABEL_3;
    }
    if (v14 == 2)
    {
      if ((result & 7) == 2)
      {
        result = ProtobufDecoder.decodeVarint()();
        if (v2)
          return result;
        if ((result & 0x8000000000000000) != 0)
          goto LABEL_65;
        v28 = (float *)v3[1];
        if (v6 < (unint64_t)v28 + result)
          goto LABEL_59;
        v3[3] = 21;
        v3[4] = (char *)v28 + result;
      }
      else
      {
        if ((result & 7) != 5)
          goto LABEL_59;
        v28 = (float *)v3[1];
      }
      v29 = v28 + 1;
      if (v6 < (unint64_t)(v28 + 1))
        goto LABEL_59;
      v7 = *v28;
LABEL_3:
      v3[1] = v29;
      goto LABEL_4;
    }
    if (v14 != 1)
    {
      switch(result & 7)
      {
        case 0uLL:
          result = ProtobufDecoder.decodeVarint()();
          if (!v2)
            goto LABEL_4;
          return result;
        case 1uLL:
          v30 = v3[1] + 8;
          if (v6 < v30)
            goto LABEL_59;
          goto LABEL_54;
        case 2uLL:
          result = ProtobufDecoder.decodeVarint()();
          if (v2)
            return result;
          if ((result & 0x8000000000000000) != 0)
            goto LABEL_66;
          v30 = v3[1] + result;
          if (v6 < v30)
            goto LABEL_59;
LABEL_54:
          v3[1] = v30;
          break;
        case 5uLL:
          v30 = v3[1] + 4;
          if (v6 < v30)
            goto LABEL_59;
          goto LABEL_54;
        default:
          goto LABEL_59;
      }
      goto LABEL_4;
    }
    if ((result & 7) != 2)
      goto LABEL_59;
    v15 = (_QWORD *)v3[5];
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v15 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v15[2] + 1, 1, v15);
    v17 = v15[2];
    v16 = v15[3];
    if (v17 >= v16 >> 1)
      v15 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v16 > 1), v17 + 1, 1, v15);
    v15[2] = v17 + 1;
    v15[v17 + 4] = v6;
    v3[5] = v15;
    result = ProtobufDecoder.decodeVarint()();
    if (v2)
      return result;
    if ((result & 0x8000000000000000) != 0)
      break;
    v18 = v3[1] + result;
    if (v6 < v18)
      goto LABEL_59;
    v3[2] = v18;
    v19 = specialized Color.Resolved.init(from:)(v3);
    v23 = (_QWORD *)v3[5];
    if (!v23[2])
      goto LABEL_63;
    v12 = v19;
    v11 = v20;
    v10 = v21;
    v9 = v22;
    result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) != 0)
    {
      v24 = v23[2];
      if (!v24)
        goto LABEL_56;
    }
    else
    {
      result = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v23);
      v23 = (_QWORD *)result;
      v24 = *(_QWORD *)(result + 16);
      if (!v24)
      {
LABEL_56:
        __break(1u);
        goto LABEL_57;
      }
    }
    v25 = v24 - 1;
    v26 = v23[v25 + 4];
    v23[2] = v25;
    v3[5] = v23;
    v3[2] = v26;
LABEL_4:
    v5 = v3[1];
    v6 = v3[2];
    if (v5 >= v6)
      goto LABEL_58;
  }
  __break(1u);
LABEL_63:
  __break(1u);
LABEL_64:
  __break(1u);
LABEL_65:
  __break(1u);
LABEL_66:
  __break(1u);
  __break(1u);
  result = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew()((_QWORD *)a2);
  v33 = *(_QWORD *)(result + 16);
  if (!v33)
  {
    __break(1u);
    JUMPOUT(0x234DF6720);
  }
  v31 = v33 - 1;
  v32 = *(_QWORD *)(result + 8 * v31 + 32);
  *(_QWORD *)(result + 16) = v31;
  v3[5] = result;
  v3[2] = v32;
  return result;
}

float *protocol witness for ProtobufEncodableMessage.encode(to:) in conformance GraphicsFilter.ColorMonochrome(_QWORD *a1)
{
  float *v1;
  uint64_t v2;
  float *v3;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float *result;
  uint64_t v12;
  int64_t v13;
  uint64_t v14;

  v3 = v1;
  v5 = *v3;
  v6 = v3[1];
  v7 = v3[2];
  v8 = v3[3];
  v10 = v3[4];
  v9 = v3[5];
  ProtobufEncoder.encodeVarint(_:)(0xAuLL);
  result = (float *)specialized ProtobufEncoder.encodeMessage<A>(_:)(v5, v6, v7, v8);
  if (!v2)
  {
    if (v10 == 1.0)
    {
      if (v9 == 0.0)
        return result;
      goto LABEL_9;
    }
    ProtobufEncoder.encodeVarint(_:)(0x15uLL);
    v12 = a1[1];
    v13 = v12 + 4;
    if (__OFADD__(v12, 4))
    {
      __break(1u);
    }
    else if (a1[2] >= v13)
    {
      a1[1] = v13;
      result = (float *)(*a1 + v12);
      goto LABEL_8;
    }
    result = (float *)ProtobufEncoder.growBufferSlow(to:)(v13);
LABEL_8:
    *result = v10;
    if (v9 == 0.0)
      return result;
LABEL_9:
    ProtobufEncoder.encodeVarint(_:)(0x1DuLL);
    v14 = a1[1];
    result = (float *)(v14 + 4);
    if (__OFADD__(v14, 4))
    {
      __break(1u);
    }
    else if (a1[2] >= (uint64_t)result)
    {
      a1[1] = result;
      *(float *)(*a1 + v14) = v9;
      return result;
    }
    result = (float *)ProtobufEncoder.growBufferSlow(to:)((int64_t)result);
    *result = v9;
  }
  return result;
}

unint64_t protocol witness for ProtobufDecodableMessage.init(from:) in conformance GraphicsFilter.ColorMonochrome@<X0>(unint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return GraphicsFilter.ColorMonochrome.init(from:)(a1, a2);
}

float *GraphicsFilter.LuminanceCurve.encode(to:)(_QWORD *a1)
{
  float *v1;
  float *v2;
  int v4;
  float v5;
  int v6;
  int v7;
  float v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t isUniquelyReferenced_nonNull_native;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  float *v15;
  uint64_t v16;
  int64_t v17;
  _DWORD *v18;
  uint64_t v19;
  int64_t v20;
  _DWORD *v21;
  uint64_t v22;
  int64_t v23;
  _DWORD *v24;
  float *result;
  uint64_t v26;

  v2 = v1;
  v5 = *v2;
  v4 = *((_DWORD *)v2 + 1);
  v7 = *((_DWORD *)v2 + 2);
  v6 = *((_DWORD *)v2 + 3);
  v8 = v2[4];
  ProtobufEncoder.encodeVarint(_:)(0xAuLL);
  v9 = a1[1];
  v10 = (_QWORD *)a1[3];
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    isUniquelyReferenced_nonNull_native = (int64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v10[2] + 1, 1, v10);
    v10 = (_QWORD *)isUniquelyReferenced_nonNull_native;
  }
  v13 = v10[2];
  v12 = v10[3];
  if (v13 >= v12 >> 1)
  {
    isUniquelyReferenced_nonNull_native = (int64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v12 > 1), v13 + 1, 1, v10);
    v10 = (_QWORD *)isUniquelyReferenced_nonNull_native;
  }
  v10[2] = v13 + 1;
  v10[v13 + 4] = v9;
  a1[3] = v10;
  v14 = v9 + 1;
  if (__OFADD__(v9, 1))
  {
    __break(1u);
    goto LABEL_24;
  }
  a1[1] = v14;
  isUniquelyReferenced_nonNull_native = v9 + 5;
  if (__OFADD__(v14, 4))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  if (a1[2] >= isUniquelyReferenced_nonNull_native)
  {
    a1[1] = isUniquelyReferenced_nonNull_native;
    v15 = (float *)(*a1 + v14);
    goto LABEL_9;
  }
LABEL_25:
  v15 = (float *)ProtobufEncoder.growBufferSlow(to:)(isUniquelyReferenced_nonNull_native);
LABEL_9:
  *v15 = v5;
  v16 = a1[1];
  v17 = v16 + 4;
  if (__OFADD__(v16, 4))
  {
    __break(1u);
  }
  else if (a1[2] >= v17)
  {
    a1[1] = v17;
    v18 = (_DWORD *)(*a1 + v16);
    goto LABEL_12;
  }
  v18 = (_DWORD *)ProtobufEncoder.growBufferSlow(to:)(v17);
LABEL_12:
  *v18 = v4;
  v19 = a1[1];
  v20 = v19 + 4;
  if (__OFADD__(v19, 4))
  {
    __break(1u);
  }
  else if (a1[2] >= v20)
  {
    a1[1] = v20;
    v21 = (_DWORD *)(*a1 + v19);
    goto LABEL_15;
  }
  v21 = (_DWORD *)ProtobufEncoder.growBufferSlow(to:)(v20);
LABEL_15:
  *v21 = v7;
  v22 = a1[1];
  v23 = v22 + 4;
  if (__OFADD__(v22, 4))
  {
    __break(1u);
  }
  else if (a1[2] >= v23)
  {
    a1[1] = v23;
    v24 = (_DWORD *)(*a1 + v22);
    goto LABEL_18;
  }
  v24 = (_DWORD *)ProtobufEncoder.growBufferSlow(to:)(v23);
LABEL_18:
  *v24 = v6;
  result = (float *)ProtobufEncoder.endLengthDelimited()();
  if (v8 == 0.0)
    return result;
  ProtobufEncoder.encodeVarint(_:)(0x15uLL);
  v26 = a1[1];
  result = (float *)(v26 + 4);
  if (__OFADD__(v26, 4))
  {
    __break(1u);
    goto LABEL_33;
  }
  if (a1[2] < (uint64_t)result)
  {
LABEL_33:
    result = (float *)ProtobufEncoder.growBufferSlow(to:)((int64_t)result);
    *result = v8;
    return result;
  }
  a1[1] = result;
  *(float *)(*a1 + v26) = v8;
  return result;
}

unint64_t GraphicsFilter.LuminanceCurve.init(from:)@<X0>(unint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  _QWORD *v3;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  int v8;
  __int128 v9;
  unint64_t v10;
  int *v11;
  int *v12;
  int v13;
  __int128 v14;
  uint64_t v15;

  v3 = (_QWORD *)result;
  v14 = 0uLL;
  v15 = 0;
  v5 = *(_QWORD *)(result + 8);
  v6 = *(_QWORD *)(result + 16);
  if (v5 < v6)
  {
    v7 = 0;
    v8 = 0;
    while (1)
    {
      result = v3[3];
      if (!result)
        goto LABEL_12;
      v10 = v3[4];
      if (v5 >= v10)
        break;
LABEL_14:
      if (result >> 3 == 2)
      {
        if ((result & 7) == 2)
        {
          result = ProtobufDecoder.decodeVarint()();
          if (v2)
            return result;
          if ((result & 0x8000000000000000) != 0)
            goto LABEL_47;
          v12 = (int *)v3[1];
          if (v6 < (unint64_t)v12 + result)
            goto LABEL_43;
          v3[3] = 21;
          v3[4] = (char *)v12 + result;
        }
        else
        {
          if ((result & 7) != 5)
            goto LABEL_43;
          v12 = (int *)v3[1];
        }
        v5 = (unint64_t)(v12 + 1);
        if (v6 < (unint64_t)(v12 + 1))
          goto LABEL_43;
        v8 = *v12;
LABEL_6:
        v3[1] = v5;
      }
      else
      {
        if (result >> 3 != 1)
        {
          switch(result & 7)
          {
            case 0uLL:
              result = ProtobufDecoder.decodeVarint()();
              if (v2)
                return result;
              v5 = v3[1];
              goto LABEL_7;
            case 1uLL:
              v5 = v3[1] + 8;
              if (v6 < v5)
                goto LABEL_43;
              goto LABEL_6;
            case 2uLL:
              result = ProtobufDecoder.decodeVarint()();
              if (v2)
                return result;
              if ((result & 0x8000000000000000) != 0)
                goto LABEL_48;
              v5 = v3[1] + result;
              if (v6 < v5)
                goto LABEL_43;
              goto LABEL_6;
            case 5uLL:
              v5 = v3[1] + 4;
              if (v6 >= v5)
                goto LABEL_6;
              goto LABEL_43;
            default:
              goto LABEL_43;
          }
        }
        if ((result & 7) == 2)
        {
          result = ProtobufDecoder.decodeVarint()();
          if (v2)
            return result;
          if ((result & 0x8000000000000000) != 0)
          {
            __break(1u);
LABEL_47:
            __break(1u);
LABEL_48:
            __break(1u);
            JUMPOUT(0x234DF6CD8);
          }
          v11 = (int *)v3[1];
          if (v6 < (unint64_t)v11 + result)
            goto LABEL_43;
          v3[3] = 13;
          v3[4] = (char *)v11 + result;
        }
        else
        {
          if ((result & 7) != 5)
            goto LABEL_43;
          v11 = (int *)v3[1];
        }
        v5 = (unint64_t)(v11 + 1);
        if (v6 < (unint64_t)(v11 + 1))
          goto LABEL_43;
        v13 = *v11;
        v3[1] = v5;
        if (v7 < 4)
          *((_DWORD *)&v14 + v7++) = v13;
      }
LABEL_7:
      v6 = v3[2];
      if (v5 >= v6)
      {
        v9 = v14;
        goto LABEL_4;
      }
    }
    if (v10 < v5)
      goto LABEL_43;
    v3[3] = 0;
LABEL_12:
    result = ProtobufDecoder.decodeVarint()();
    if (v2)
      return result;
    if (result <= 7)
    {
LABEL_43:
      lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
      swift_allocError();
      return swift_willThrow();
    }
    goto LABEL_14;
  }
  v9 = 0uLL;
  v8 = 0;
LABEL_4:
  v3[3] = 0;
  *(_OWORD *)a2 = v9;
  *(_DWORD *)(a2 + 16) = v8;
  return result;
}

float *protocol witness for ProtobufEncodableMessage.encode(to:) in conformance GraphicsFilter.LuminanceCurve(_QWORD *a1)
{
  return GraphicsFilter.LuminanceCurve.encode(to:)(a1);
}

unint64_t protocol witness for ProtobufDecodableMessage.init(from:) in conformance GraphicsFilter.LuminanceCurve@<X0>(unint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return GraphicsFilter.LuminanceCurve.init(from:)(a1, a2);
}

uint64_t GraphicsFilter.ColorCurves.encode(to:)(_QWORD *a1)
{
  int *v1;
  int *v2;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  _QWORD *v13;
  int64_t isUniquelyReferenced_nonNull_native;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  _DWORD *v18;
  uint64_t v19;
  int64_t v20;
  _DWORD *v21;
  uint64_t v22;
  int64_t v23;
  _DWORD *v24;
  uint64_t v25;
  int64_t v26;
  _DWORD *v27;
  uint64_t v28;
  _QWORD *v29;
  int64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  _DWORD *v34;
  uint64_t v35;
  int64_t v36;
  _DWORD *v37;
  uint64_t v38;
  int64_t v39;
  _DWORD *v40;
  uint64_t v41;
  int64_t v42;
  _DWORD *v43;
  uint64_t v44;
  _QWORD *v45;
  int64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  _DWORD *v50;
  uint64_t v51;
  int64_t v52;
  _DWORD *v53;
  uint64_t v54;
  int64_t v55;
  _DWORD *v56;
  uint64_t v57;
  int64_t v58;
  _DWORD *v59;
  uint64_t v60;
  _QWORD *v61;
  int64_t v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  _DWORD *v66;
  uint64_t v67;
  int64_t v68;
  _DWORD *v69;
  uint64_t v70;
  int64_t v71;
  _DWORD *v72;
  uint64_t v73;
  int64_t v74;
  _DWORD *v75;
  int v77;
  int v78;
  int v79;
  int v80;
  int v81;
  int v82;
  int v83;
  int v84;

  v2 = v1;
  v5 = *v2;
  v4 = v2[1];
  v7 = v2[2];
  v6 = v2[3];
  v9 = v2[4];
  v8 = v2[5];
  v11 = v2[6];
  v10 = v2[7];
  v83 = v2[9];
  v84 = v2[8];
  v81 = v2[11];
  v82 = v2[10];
  v79 = v2[13];
  v80 = v2[12];
  v77 = v2[15];
  v78 = v2[14];
  ProtobufEncoder.encodeVarint(_:)(0xAuLL);
  v12 = a1[1];
  v13 = (_QWORD *)a1[3];
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    isUniquelyReferenced_nonNull_native = (int64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v13[2] + 1, 1, v13);
    v13 = (_QWORD *)isUniquelyReferenced_nonNull_native;
  }
  v16 = v13[2];
  v15 = v13[3];
  if (v16 >= v15 >> 1)
  {
    isUniquelyReferenced_nonNull_native = (int64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v15 > 1), v16 + 1, 1, v13);
    v13 = (_QWORD *)isUniquelyReferenced_nonNull_native;
  }
  v13[2] = v16 + 1;
  v13[v16 + 4] = v12;
  a1[3] = v13;
  v17 = v12 + 1;
  if (__OFADD__(v12, 1))
  {
    __break(1u);
    goto LABEL_71;
  }
  a1[1] = v17;
  isUniquelyReferenced_nonNull_native = v12 + 5;
  if (__OFADD__(v17, 4))
  {
LABEL_71:
    __break(1u);
    goto LABEL_72;
  }
  if (a1[2] >= isUniquelyReferenced_nonNull_native)
  {
    a1[1] = isUniquelyReferenced_nonNull_native;
    v18 = (_DWORD *)(*a1 + v17);
    goto LABEL_9;
  }
LABEL_72:
  v18 = (_DWORD *)ProtobufEncoder.growBufferSlow(to:)(isUniquelyReferenced_nonNull_native);
LABEL_9:
  *v18 = v5;
  v19 = a1[1];
  v20 = v19 + 4;
  if (__OFADD__(v19, 4))
  {
    __break(1u);
  }
  else if (a1[2] >= v20)
  {
    a1[1] = v20;
    v21 = (_DWORD *)(*a1 + v19);
    goto LABEL_12;
  }
  v21 = (_DWORD *)ProtobufEncoder.growBufferSlow(to:)(v20);
LABEL_12:
  *v21 = v4;
  v22 = a1[1];
  v23 = v22 + 4;
  if (__OFADD__(v22, 4))
  {
    __break(1u);
  }
  else if (a1[2] >= v23)
  {
    a1[1] = v23;
    v24 = (_DWORD *)(*a1 + v22);
    goto LABEL_15;
  }
  v24 = (_DWORD *)ProtobufEncoder.growBufferSlow(to:)(v23);
LABEL_15:
  *v24 = v7;
  v25 = a1[1];
  v26 = v25 + 4;
  if (__OFADD__(v25, 4))
  {
    __break(1u);
  }
  else if (a1[2] >= v26)
  {
    a1[1] = v26;
    v27 = (_DWORD *)(*a1 + v25);
    goto LABEL_18;
  }
  v27 = (_DWORD *)ProtobufEncoder.growBufferSlow(to:)(v26);
LABEL_18:
  *v27 = v6;
  ProtobufEncoder.endLengthDelimited()();
  ProtobufEncoder.encodeVarint(_:)(0x12uLL);
  v28 = a1[1];
  v29 = (_QWORD *)a1[3];
  v30 = swift_isUniquelyReferenced_nonNull_native();
  if ((v30 & 1) == 0)
  {
    v30 = (int64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v29[2] + 1, 1, v29);
    v29 = (_QWORD *)v30;
  }
  v32 = v29[2];
  v31 = v29[3];
  if (v32 >= v31 >> 1)
  {
    v30 = (int64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v31 > 1), v32 + 1, 1, v29);
    v29 = (_QWORD *)v30;
  }
  v29[2] = v32 + 1;
  v29[v32 + 4] = v28;
  a1[3] = v29;
  v33 = v28 + 1;
  if (__OFADD__(v28, 1))
  {
    __break(1u);
    goto LABEL_80;
  }
  a1[1] = v33;
  v30 = v28 + 5;
  if (__OFADD__(v33, 4))
  {
LABEL_80:
    __break(1u);
    goto LABEL_81;
  }
  if (a1[2] >= v30)
  {
    a1[1] = v30;
    v34 = (_DWORD *)(*a1 + v33);
    goto LABEL_26;
  }
LABEL_81:
  v34 = (_DWORD *)ProtobufEncoder.growBufferSlow(to:)(v30);
LABEL_26:
  *v34 = v9;
  v35 = a1[1];
  v36 = v35 + 4;
  if (__OFADD__(v35, 4))
  {
    __break(1u);
  }
  else if (a1[2] >= v36)
  {
    a1[1] = v36;
    v37 = (_DWORD *)(*a1 + v35);
    goto LABEL_29;
  }
  v37 = (_DWORD *)ProtobufEncoder.growBufferSlow(to:)(v36);
LABEL_29:
  *v37 = v8;
  v38 = a1[1];
  v39 = v38 + 4;
  if (__OFADD__(v38, 4))
  {
    __break(1u);
  }
  else if (a1[2] >= v39)
  {
    a1[1] = v39;
    v40 = (_DWORD *)(*a1 + v38);
    goto LABEL_32;
  }
  v40 = (_DWORD *)ProtobufEncoder.growBufferSlow(to:)(v39);
LABEL_32:
  *v40 = v11;
  v41 = a1[1];
  v42 = v41 + 4;
  if (__OFADD__(v41, 4))
  {
    __break(1u);
  }
  else if (a1[2] >= v42)
  {
    a1[1] = v42;
    v43 = (_DWORD *)(*a1 + v41);
    goto LABEL_35;
  }
  v43 = (_DWORD *)ProtobufEncoder.growBufferSlow(to:)(v42);
LABEL_35:
  *v43 = v10;
  ProtobufEncoder.endLengthDelimited()();
  ProtobufEncoder.encodeVarint(_:)(0x1AuLL);
  v44 = a1[1];
  v45 = (_QWORD *)a1[3];
  v46 = swift_isUniquelyReferenced_nonNull_native();
  if ((v46 & 1) == 0)
  {
    v46 = (int64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v45[2] + 1, 1, v45);
    v45 = (_QWORD *)v46;
  }
  v48 = v45[2];
  v47 = v45[3];
  if (v48 >= v47 >> 1)
  {
    v46 = (int64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v47 > 1), v48 + 1, 1, v45);
    v45 = (_QWORD *)v46;
  }
  v45[2] = v48 + 1;
  v45[v48 + 4] = v44;
  a1[3] = v45;
  v49 = v44 + 1;
  if (__OFADD__(v44, 1))
  {
    __break(1u);
    goto LABEL_89;
  }
  a1[1] = v49;
  v46 = v44 + 5;
  if (__OFADD__(v49, 4))
  {
LABEL_89:
    __break(1u);
    goto LABEL_90;
  }
  if (a1[2] >= v46)
  {
    a1[1] = v46;
    v50 = (_DWORD *)(*a1 + v49);
    goto LABEL_43;
  }
LABEL_90:
  v50 = (_DWORD *)ProtobufEncoder.growBufferSlow(to:)(v46);
LABEL_43:
  *v50 = v84;
  v51 = a1[1];
  v52 = v51 + 4;
  if (__OFADD__(v51, 4))
  {
    __break(1u);
  }
  else if (a1[2] >= v52)
  {
    a1[1] = v52;
    v53 = (_DWORD *)(*a1 + v51);
    goto LABEL_46;
  }
  v53 = (_DWORD *)ProtobufEncoder.growBufferSlow(to:)(v52);
LABEL_46:
  *v53 = v83;
  v54 = a1[1];
  v55 = v54 + 4;
  if (__OFADD__(v54, 4))
  {
    __break(1u);
  }
  else if (a1[2] >= v55)
  {
    a1[1] = v55;
    v56 = (_DWORD *)(*a1 + v54);
    goto LABEL_49;
  }
  v56 = (_DWORD *)ProtobufEncoder.growBufferSlow(to:)(v55);
LABEL_49:
  *v56 = v82;
  v57 = a1[1];
  v58 = v57 + 4;
  if (__OFADD__(v57, 4))
  {
    __break(1u);
  }
  else if (a1[2] >= v58)
  {
    a1[1] = v58;
    v59 = (_DWORD *)(*a1 + v57);
    goto LABEL_52;
  }
  v59 = (_DWORD *)ProtobufEncoder.growBufferSlow(to:)(v58);
LABEL_52:
  *v59 = v81;
  ProtobufEncoder.endLengthDelimited()();
  ProtobufEncoder.encodeVarint(_:)(0x22uLL);
  v60 = a1[1];
  v61 = (_QWORD *)a1[3];
  v62 = swift_isUniquelyReferenced_nonNull_native();
  if ((v62 & 1) == 0)
  {
    v62 = (int64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v61[2] + 1, 1, v61);
    v61 = (_QWORD *)v62;
  }
  v64 = v61[2];
  v63 = v61[3];
  if (v64 >= v63 >> 1)
  {
    v62 = (int64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v63 > 1), v64 + 1, 1, v61);
    v61 = (_QWORD *)v62;
  }
  v61[2] = v64 + 1;
  v61[v64 + 4] = v60;
  a1[3] = v61;
  v65 = v60 + 1;
  if (__OFADD__(v60, 1))
  {
    __break(1u);
    goto LABEL_98;
  }
  a1[1] = v65;
  v62 = v60 + 5;
  if (__OFADD__(v65, 4))
  {
LABEL_98:
    __break(1u);
    goto LABEL_99;
  }
  if (a1[2] >= v62)
  {
    a1[1] = v62;
    v66 = (_DWORD *)(*a1 + v65);
    goto LABEL_60;
  }
LABEL_99:
  v66 = (_DWORD *)ProtobufEncoder.growBufferSlow(to:)(v62);
LABEL_60:
  *v66 = v80;
  v67 = a1[1];
  v68 = v67 + 4;
  if (__OFADD__(v67, 4))
  {
    __break(1u);
  }
  else if (a1[2] >= v68)
  {
    a1[1] = v68;
    v69 = (_DWORD *)(*a1 + v67);
    goto LABEL_63;
  }
  v69 = (_DWORD *)ProtobufEncoder.growBufferSlow(to:)(v68);
LABEL_63:
  *v69 = v79;
  v70 = a1[1];
  v71 = v70 + 4;
  if (__OFADD__(v70, 4))
  {
    __break(1u);
  }
  else if (a1[2] >= v71)
  {
    a1[1] = v71;
    v72 = (_DWORD *)(*a1 + v70);
    goto LABEL_66;
  }
  v72 = (_DWORD *)ProtobufEncoder.growBufferSlow(to:)(v71);
LABEL_66:
  *v72 = v78;
  v73 = a1[1];
  v74 = v73 + 4;
  if (__OFADD__(v73, 4))
  {
    __break(1u);
    goto LABEL_105;
  }
  if (a1[2] < v74)
  {
LABEL_105:
    v75 = (_DWORD *)ProtobufEncoder.growBufferSlow(to:)(v74);
    goto LABEL_69;
  }
  a1[1] = v74;
  v75 = (_DWORD *)(*a1 + v73);
LABEL_69:
  *v75 = v77;
  return ProtobufEncoder.endLengthDelimited()();
}

unint64_t GraphicsFilter.ColorCurves.init(from:)@<X0>(unint64_t result@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  _QWORD *v3;
  __int128 v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  unint64_t v15;
  int *v16;
  int *v17;
  int *v18;
  int *v19;
  int v20;
  int v21;
  int v22;
  int v23;
  __int128 v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;

  v3 = (_QWORD *)result;
  v30 = 0uLL;
  v31 = 0;
  v28 = 0uLL;
  v29 = 0;
  v26 = 0uLL;
  v27 = 0;
  v24 = 0uLL;
  v25 = 0;
  v5 = 0uLL;
  v6 = *(_QWORD *)(result + 8);
  v7 = *(_QWORD *)(result + 16);
  if (v6 < v7)
  {
    v8 = 0;
    v9 = 0;
    v10 = 0;
    v11 = 0;
    while (1)
    {
      result = v3[3];
      if (!result)
        goto LABEL_12;
      v15 = v3[4];
      if (v6 >= v15)
        break;
LABEL_14:
      switch(result >> 3)
      {
        case 1uLL:
          if ((result & 7) == 2)
          {
            result = ProtobufDecoder.decodeVarint()();
            if (v2)
              return result;
            if ((result & 0x8000000000000000) != 0)
            {
              __break(1u);
LABEL_67:
              __break(1u);
LABEL_68:
              __break(1u);
LABEL_69:
              __break(1u);
LABEL_70:
              __break(1u);
              JUMPOUT(0x234DF771CLL);
            }
            v16 = (int *)v3[1];
            if (v7 < (unint64_t)v16 + result)
              goto LABEL_63;
            v3[3] = 13;
            v3[4] = (char *)v16 + result;
          }
          else
          {
            if ((result & 7) != 5)
              goto LABEL_63;
            v16 = (int *)v3[1];
          }
          v6 = (unint64_t)(v16 + 1);
          if (v7 < (unint64_t)(v16 + 1))
            goto LABEL_63;
          v20 = *v16;
          v3[1] = v6;
          if (v8 < 4)
          {
            *((_DWORD *)&v30 + v8++) = v20;
            v31 = v8;
          }
          break;
        case 2uLL:
          if ((result & 7) == 2)
          {
            result = ProtobufDecoder.decodeVarint()();
            if (v2)
              return result;
            if ((result & 0x8000000000000000) != 0)
              goto LABEL_67;
            v17 = (int *)v3[1];
            if (v7 < (unint64_t)v17 + result)
              goto LABEL_63;
            v3[3] = 21;
            v3[4] = (char *)v17 + result;
          }
          else
          {
            if ((result & 7) != 5)
              goto LABEL_63;
            v17 = (int *)v3[1];
          }
          v6 = (unint64_t)(v17 + 1);
          if (v7 < (unint64_t)(v17 + 1))
            goto LABEL_63;
          v21 = *v17;
          v3[1] = v6;
          if (v9 < 4)
          {
            *((_DWORD *)&v28 + v9++) = v21;
            v29 = v9;
          }
          break;
        case 3uLL:
          if ((result & 7) == 2)
          {
            result = ProtobufDecoder.decodeVarint()();
            if (v2)
              return result;
            if ((result & 0x8000000000000000) != 0)
              goto LABEL_68;
            v18 = (int *)v3[1];
            if (v7 < (unint64_t)v18 + result)
              goto LABEL_63;
            v3[3] = 29;
            v3[4] = (char *)v18 + result;
          }
          else
          {
            if ((result & 7) != 5)
              goto LABEL_63;
            v18 = (int *)v3[1];
          }
          v6 = (unint64_t)(v18 + 1);
          if (v7 < (unint64_t)(v18 + 1))
            goto LABEL_63;
          v22 = *v18;
          v3[1] = v6;
          if (v10 < 4)
          {
            *((_DWORD *)&v26 + v10++) = v22;
            v27 = v10;
          }
          break;
        case 4uLL:
          if ((result & 7) == 2)
          {
            result = ProtobufDecoder.decodeVarint()();
            if (v2)
              return result;
            if ((result & 0x8000000000000000) != 0)
              goto LABEL_69;
            v19 = (int *)v3[1];
            if (v7 < (unint64_t)v19 + result)
              goto LABEL_63;
            v3[3] = 37;
            v3[4] = (char *)v19 + result;
          }
          else
          {
            if ((result & 7) != 5)
              goto LABEL_63;
            v19 = (int *)v3[1];
          }
          v6 = (unint64_t)(v19 + 1);
          if (v7 < (unint64_t)(v19 + 1))
            goto LABEL_63;
          v23 = *v19;
          v3[1] = v6;
          if (v11 < 4)
          {
            *((_DWORD *)&v24 + v11++) = v23;
            v25 = v11;
          }
          break;
        default:
          switch(result & 7)
          {
            case 0uLL:
              result = ProtobufDecoder.decodeVarint()();
              if (v2)
                return result;
              v6 = v3[1];
              goto LABEL_7;
            case 1uLL:
              v6 = v3[1] + 8;
              if (v7 >= v6)
                goto LABEL_6;
              goto LABEL_63;
            case 2uLL:
              result = ProtobufDecoder.decodeVarint()();
              if (v2)
                return result;
              if ((result & 0x8000000000000000) != 0)
                goto LABEL_70;
              v6 = v3[1] + result;
              if (v7 < v6)
                goto LABEL_63;
LABEL_6:
              v3[1] = v6;
              break;
            case 5uLL:
              v6 = v3[1] + 4;
              if (v7 < v6)
                goto LABEL_63;
              goto LABEL_6;
            default:
              goto LABEL_63;
          }
          break;
      }
LABEL_7:
      v7 = v3[2];
      if (v6 >= v7)
      {
        v5 = v30;
        v12 = v28;
        v13 = v26;
        v14 = v24;
        goto LABEL_4;
      }
    }
    if (v15 < v6)
      goto LABEL_63;
    v3[3] = 0;
LABEL_12:
    result = ProtobufDecoder.decodeVarint()();
    if (v2)
      return result;
    if (result <= 7)
    {
LABEL_63:
      lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
      swift_allocError();
      return swift_willThrow();
    }
    goto LABEL_14;
  }
  v12 = 0uLL;
  v13 = 0uLL;
  v14 = 0uLL;
LABEL_4:
  v3[3] = 0;
  *a2 = v5;
  a2[1] = v12;
  a2[2] = v13;
  a2[3] = v14;
  return result;
}

uint64_t protocol witness for ProtobufEncodableMessage.encode(to:) in conformance GraphicsFilter.ColorCurves(_QWORD *a1)
{
  return GraphicsFilter.ColorCurves.encode(to:)(a1);
}

unint64_t protocol witness for ProtobufDecodableMessage.init(from:) in conformance GraphicsFilter.ColorCurves@<X0>(unint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  return GraphicsFilter.ColorCurves.init(from:)(a1, a2);
}

void GraphicsFilter.ShaderFilter.encode(to:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  double v5;
  double v6;
  id v7;
  uint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  _QWORD *v13;

  v3 = v1;
  v5 = *(double *)(v3 + 32);
  v6 = *(double *)(v3 + 40);
  v7 = *(id *)v3;
  specialized ProtobufEncoder.messageField<A>(_:_:)(1);

  if (!v2 && (v5 != 0.0 || v6 != 0.0))
  {
    ProtobufEncoder.encodeVarint(_:)(0x12uLL);
    v8 = *(_QWORD *)(a1 + 8);
    v9 = *(_QWORD **)(a1 + 24);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      goto LABEL_11;
    while (1)
    {
      v11 = v9[2];
      v10 = v9[3];
      v12 = v11 + 1;
      if (v11 >= v10 >> 1)
      {
        v13 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v10 > 1), v11 + 1, 1, v9);
        v12 = v11 + 1;
        v9 = v13;
      }
      v9[2] = v12;
      v9[v11 + 4] = v8;
      *(_QWORD *)(a1 + 24) = v9;
      if (!__OFADD__(v8, 1))
        break;
      __break(1u);
LABEL_11:
      v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v9[2] + 1, 1, v9);
    }
    *(_QWORD *)(a1 + 8) = v8 + 1;
    CGSize.encode(to:)((double *)a1, v5, v6);
    ProtobufEncoder.endLengthDelimited()();
  }
}

void GraphicsFilter.ShaderFilter.init(from:)(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  unint64_t v4;
  _QWORD *v5;
  double v6;
  double v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  double v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  double v40[3];
  int v41;
  int v42;

  v4 = a1[1];
  v5 = (_QWORD *)a1[2];
  if (v4 < (unint64_t)v5)
  {
    v6 = 0.0;
    v7 = 0.0;
    v42 = 0;
    v8 = 0;
    v9 = 1;
    v10 = 0.0;
    while (1)
    {
      v12 = a1[3];
      if (!v12)
        goto LABEL_12;
      v13 = a1[4];
      if (v4 >= v13)
        break;
LABEL_14:
      if (v12 >> 3 == 2)
      {
        if ((v12 & 7) != 2)
          goto LABEL_53;
        v23 = (_QWORD *)a1[5];
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v23 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v23[2] + 1, 1, v23);
        v25 = v23[2];
        v24 = v23[3];
        if (v25 >= v24 >> 1)
          v23 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v24 > 1), v25 + 1, 1, v23);
        v23[2] = v25 + 1;
        v23[v25 + 4] = v5;
        a1[5] = v23;
        v26 = ProtobufDecoder.decodeVarint()();
        if (v2)
          goto LABEL_54;
        if (v26 < 0)
          goto LABEL_62;
        v27 = a1[1] + v26;
        if ((unint64_t)v5 < v27)
          goto LABEL_53;
        a1[2] = v27;
        v28 = specialized CGPoint.init(from:)(a1);
        v30 = (_QWORD *)a1[5];
        if (!v30[2])
          goto LABEL_64;
        v10 = v28;
        v8 = v29;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
        {
          v31 = v30[2];
          if (!v31)
            goto LABEL_52;
        }
        else
        {
          v30 = specialized _ArrayBuffer._consumeAndCreateNew()(v30);
          v31 = v30[2];
          if (!v31)
          {
LABEL_52:
            __break(1u);
LABEL_53:
            lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
            swift_allocError();
            swift_willThrow();
LABEL_54:
            outlined consume of Shader.ResolvedShader?((id)v9);
            return;
          }
        }
        v32 = v31 - 1;
        v33 = v30[v32 + 4];
        v30[2] = v32;
        a1[5] = v30;
        a1[2] = v33;
      }
      else if (v12 >> 3 == 1)
      {
        if ((v12 & 7) != 2)
          goto LABEL_53;
        v14 = (_QWORD *)a1[5];
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v14[2] + 1, 1, v14);
        v16 = v14[2];
        v15 = v14[3];
        if (v16 >= v15 >> 1)
          v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v15 > 1), v16 + 1, 1, v14);
        v14[2] = v16 + 1;
        v14[v16 + 4] = v5;
        a1[5] = v14;
        v17 = ProtobufDecoder.decodeVarint()();
        if (v2)
          goto LABEL_54;
        if (v17 < 0)
        {
          __break(1u);
LABEL_62:
          __break(1u);
LABEL_63:
          __break(1u);
LABEL_64:
          __break(1u);
LABEL_65:
          __break(1u);
LABEL_66:
          __break(1u);
          __break(1u);
          v35 = specialized _ArrayBuffer._consumeAndCreateNew()(v5);
          v36 = v35[2];
          if (!v36)
          {
            __break(1u);
            v35 = (_QWORD *)a1[5];
            if (v35[2])
            {
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
              {
                v36 = v35[2];
                if (v36)
                  goto LABEL_60;
LABEL_70:
                __break(1u);
                JUMPOUT(0x234DF7DACLL);
              }
            }
            else
            {
              __break(1u);
            }
            v35 = specialized _ArrayBuffer._consumeAndCreateNew()(v35);
            v36 = v35[2];
            if (!v36)
              goto LABEL_70;
          }
LABEL_60:
          v37 = v36 - 1;
          v38 = v35[v37 + 4];
          v35[2] = v37;
          outlined consume of Shader.ResolvedShader?((id)v9);
          a1[5] = v35;
          a1[2] = v38;
          return;
        }
        v18 = a1[1] + v17;
        if ((unint64_t)v5 < v18)
          goto LABEL_53;
        a1[2] = v18;
        Shader.ResolvedShader.init(from:)(a1, v40);
        v19 = (_QWORD *)a1[5];
        if (!v19[2])
          goto LABEL_63;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
        {
          v20 = v19[2];
          if (!v20)
            goto LABEL_65;
        }
        else
        {
          v19 = specialized _ArrayBuffer._consumeAndCreateNew()(v19);
          v20 = v19[2];
          if (!v20)
            goto LABEL_65;
        }
        v21 = v20 - 1;
        v22 = v19[v21 + 4];
        v19[2] = v21;
        outlined consume of Shader.ResolvedShader?((id)v9);
        a1[5] = v19;
        a1[2] = v22;
        v9 = *(_QWORD *)&v40[0];
        v6 = v40[1];
        v7 = v40[2];
        v42 = v41;
      }
      else
      {
        switch(v12 & 7)
        {
          case 0uLL:
            ProtobufDecoder.decodeVarint()();
            if (v2)
              goto LABEL_54;
            break;
          case 1uLL:
            v11 = a1[1] + 8;
            if ((unint64_t)v5 >= v11)
              goto LABEL_6;
            goto LABEL_53;
          case 2uLL:
            v34 = ProtobufDecoder.decodeVarint()();
            if (v2)
              goto LABEL_54;
            if (v34 < 0)
              goto LABEL_66;
            v11 = a1[1] + v34;
            if ((unint64_t)v5 < v11)
              goto LABEL_53;
LABEL_6:
            a1[1] = v11;
            break;
          case 5uLL:
            v11 = a1[1] + 4;
            if ((unint64_t)v5 < v11)
              goto LABEL_53;
            goto LABEL_6;
          default:
            goto LABEL_53;
        }
      }
      v4 = a1[1];
      v5 = (_QWORD *)a1[2];
      if (v4 >= (unint64_t)v5)
      {
        a1[3] = 0;
        if (v9 == 1)
          goto LABEL_4;
        *(_QWORD *)a2 = v9;
        *(double *)(a2 + 8) = v6;
        *(double *)(a2 + 16) = v7;
        *(_DWORD *)(a2 + 24) = v42;
        *(double *)(a2 + 32) = v10;
        *(_QWORD *)(a2 + 40) = v8;
        return;
      }
    }
    if (v13 < v4)
      goto LABEL_53;
    a1[3] = 0;
LABEL_12:
    v12 = ProtobufDecoder.decodeVarint()();
    if (v2)
      goto LABEL_54;
    if (v12 < 8)
      goto LABEL_53;
    goto LABEL_14;
  }
  a1[3] = 0;
LABEL_4:
  lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
  swift_allocError();
  swift_willThrow();
}

void protocol witness for ProtobufEncodableMessage.encode(to:) in conformance GraphicsFilter.ShaderFilter(uint64_t a1)
{
  GraphicsFilter.ShaderFilter.encode(to:)(a1);
}

void protocol witness for ProtobufDecodableMessage.init(from:) in conformance GraphicsFilter.ShaderFilter(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  GraphicsFilter.ShaderFilter.init(from:)(a1, a2);
}

uint64_t specialized static GraphicsFilter.ColorCurves.== infix(_:_:)(float32x4_t *a1, float32x4_t *a2)
{
  char v2;

  v2 = 0;
  if ((vminv_u8((uint8x8_t)vcltz_s8(vshl_n_s8(vmovn_s16(vuzp1q_s16((int16x8_t)vceqq_f32(*a1, *a2), (int16x8_t)vceqq_f32(a1[1], a2[1]))), 7uLL))) & 1) != 0&& (~vaddvq_s32((int32x4_t)vandq_s8((int8x16_t)vcltzq_s32(vshlq_n_s32(vceqq_f32(a1[2], a2[2]), 0x1FuLL)), (int8x16_t)xmmword_2352A3530)) & 0xF) == 0)
  {
    v2 = vminv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(vmovn_s32(vceqq_f32(a1[3], a2[3])), 0xFuLL)));
  }
  return v2 & 1;
}

BOOL specialized static GraphicsFilter.LuminanceCurve.== infix(_:_:)(float32x4_t *a1, float32x4_t *a2)
{
  return (vminv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(vmovn_s32(vceqq_f32(*a1, *a2)), 0xFuLL))) & 1) != 0
      && a1[1].f32[0] == a2[1].f32[0];
}

BOOL specialized static GraphicsFilter.ColorMonochrome.== infix(_:_:)(float32x4_t *a1, float32x4_t *a2)
{
  _BOOL8 result;

  result = 0;
  if ((vminv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(vmovn_s32(vceqq_f32(*a1, *a2)), 0xFuLL))) & 1) != 0
    && a1[1].f32[0] == a2[1].f32[0])
  {
    return a1[1].f32[1] == a2[1].f32[1];
  }
  return result;
}

BOOL specialized static GraphicsBlendMode.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t v4;
  char v5;

  v2 = *(_QWORD *)a1;
  v3 = *(_BYTE *)(a1 + 8);
  v4 = *(_QWORD *)a2;
  v5 = *(_BYTE *)(a2 + 8);
  if ((v3 & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 8) & 1) != 0)
    {
      outlined copy of GraphicsBlendMode(*(_QWORD *)a2, 1);
      outlined copy of GraphicsBlendMode(v2, 1);
      outlined consume of GraphicsBlendMode(v2, 1);
      outlined consume of GraphicsBlendMode(v4, 1);
      return v2 == v4;
    }
    swift_unknownObjectRetain();
  }
  else if ((*(_BYTE *)(a2 + 8) & 1) == 0)
  {
    outlined consume of GraphicsBlendMode(*(_QWORD *)a1, 0);
    outlined consume of GraphicsBlendMode(v4, 0);
    return (_DWORD)v2 == (_DWORD)v4;
  }
  outlined copy of GraphicsBlendMode(v4, v5);
  outlined consume of GraphicsBlendMode(v2, v3);
  outlined consume of GraphicsBlendMode(v4, v5);
  return 0;
}

void outlined consume of Shader.ResolvedShader?(id a1)
{
  if (a1 != (id)1)

}

void destroy for GraphicsFilter(uint64_t a1)
{
  outlined consume of GraphicsFilter(*(void **)a1, *(_QWORD *)(a1 + 8), *(id *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_DWORD *)(a1 + 112), BYTE2(*(_DWORD *)(a1 + 112)));
}

uint64_t initializeWithCopy for GraphicsFilter(uint64_t a1, uint64_t a2)
{
  id v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  char v19;

  v3 = *(id *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(void **)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v9 = *(_QWORD *)(a2 + 48);
  v10 = *(_QWORD *)(a2 + 56);
  v11 = *(_QWORD *)(a2 + 64);
  v13 = *(_QWORD *)(a2 + 72);
  v14 = *(_QWORD *)(a2 + 80);
  v15 = *(_QWORD *)(a2 + 88);
  v16 = *(_QWORD *)(a2 + 96);
  v17 = *(_QWORD *)(a2 + 104);
  v18 = *(_DWORD *)(a2 + 112);
  v19 = *(_BYTE *)(a2 + 116);
  outlined copy of GraphicsFilter(*(id *)a2, v4, v5, v6, v7, v8, v9, v10, v11, v13, v14, v15, v16, v17, v18, SBYTE2(v18));
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_QWORD *)(a1 + 32) = v7;
  *(_QWORD *)(a1 + 40) = v8;
  *(_QWORD *)(a1 + 48) = v9;
  *(_QWORD *)(a1 + 56) = v10;
  *(_QWORD *)(a1 + 64) = v11;
  *(_QWORD *)(a1 + 72) = v13;
  *(_QWORD *)(a1 + 80) = v14;
  *(_QWORD *)(a1 + 88) = v15;
  *(_QWORD *)(a1 + 96) = v16;
  *(_QWORD *)(a1 + 104) = v17;
  *(_DWORD *)(a1 + 112) = v18;
  *(_BYTE *)(a1 + 116) = v19;
  return a1;
}

uint64_t assignWithCopy for GraphicsFilter(uint64_t a1, uint64_t a2)
{
  id v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  char v32;

  v3 = *(id *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(void **)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v9 = *(_QWORD *)(a2 + 48);
  v10 = *(_QWORD *)(a2 + 56);
  v11 = *(_QWORD *)(a2 + 64);
  v26 = *(_QWORD *)(a2 + 72);
  v27 = *(_QWORD *)(a2 + 80);
  v28 = *(_QWORD *)(a2 + 88);
  v29 = *(_QWORD *)(a2 + 96);
  v30 = *(_QWORD *)(a2 + 104);
  v31 = *(_DWORD *)(a2 + 112);
  v32 = *(_BYTE *)(a2 + 116);
  outlined copy of GraphicsFilter(*(id *)a2, v4, v5, v6, v7, v8, v9, v10, v11, v26, v27, v28, v29, v30, v31, SBYTE2(v31));
  v12 = *(void **)a1;
  v13 = *(_QWORD *)(a1 + 8);
  v14 = *(void **)(a1 + 16);
  v15 = *(_QWORD *)(a1 + 24);
  v16 = *(_QWORD *)(a1 + 32);
  v17 = *(_QWORD *)(a1 + 40);
  v18 = *(_QWORD *)(a1 + 48);
  v19 = *(_QWORD *)(a1 + 56);
  v20 = *(_OWORD *)(a1 + 64);
  v21 = *(_OWORD *)(a1 + 80);
  v22 = *(_QWORD *)(a1 + 96);
  v23 = *(_QWORD *)(a1 + 104);
  v24 = *(_DWORD *)(a1 + 112);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_QWORD *)(a1 + 32) = v7;
  *(_QWORD *)(a1 + 40) = v8;
  *(_QWORD *)(a1 + 48) = v9;
  *(_QWORD *)(a1 + 56) = v10;
  *(_QWORD *)(a1 + 64) = v11;
  *(_QWORD *)(a1 + 72) = v26;
  *(_QWORD *)(a1 + 80) = v27;
  *(_QWORD *)(a1 + 88) = v28;
  *(_QWORD *)(a1 + 96) = v29;
  *(_QWORD *)(a1 + 104) = v30;
  *(_DWORD *)(a1 + 112) = v31;
  *(_BYTE *)(a1 + 116) = v32;
  outlined consume of GraphicsFilter(v12, v13, v14, v15, v16, v17, v18, v19, v20, *((uint64_t *)&v20 + 1), v21, *((uint64_t *)&v21 + 1), v22, v23, v24, SBYTE2(v24));
  return a1;
}

__n128 __swift_memcpy117_8(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __n128 result;
  __int128 v6;
  __int128 v7;

  v2 = *a2;
  v3 = a2[1];
  v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  result = (__n128)a2[4];
  v6 = a2[5];
  v7 = a2[6];
  *(_QWORD *)(a1 + 109) = *(_QWORD *)((char *)a2 + 109);
  *(_OWORD *)(a1 + 80) = v6;
  *(_OWORD *)(a1 + 96) = v7;
  *(__n128 *)(a1 + 64) = result;
  return result;
}

uint64_t assignWithTake for GraphicsFilter(uint64_t a1, uint64_t a2)
{
  int v3;
  char v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;

  v3 = *(_DWORD *)(a2 + 112);
  v4 = *(_BYTE *)(a2 + 116);
  v5 = *(void **)a1;
  v7 = *(_QWORD *)(a1 + 8);
  v6 = *(void **)(a1 + 16);
  v8 = *(_QWORD *)(a1 + 24);
  v9 = *(_QWORD *)(a1 + 32);
  v10 = *(_QWORD *)(a1 + 40);
  v11 = *(_QWORD *)(a1 + 48);
  v12 = *(_QWORD *)(a1 + 56);
  v13 = *(_OWORD *)(a1 + 64);
  v14 = *(_OWORD *)(a1 + 80);
  v15 = *(_QWORD *)(a1 + 96);
  v16 = *(_QWORD *)(a1 + 104);
  v17 = *(_DWORD *)(a1 + 112);
  v18 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v18;
  v19 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v19;
  v20 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v20;
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_DWORD *)(a1 + 112) = v3;
  *(_BYTE *)(a1 + 116) = v4;
  outlined consume of GraphicsFilter(v5, v7, v6, v8, v9, v10, v11, v12, v13, *((uint64_t *)&v13 + 1), v14, *((uint64_t *)&v14 + 1), v15, v16, v17, SBYTE2(v17));
  return a1;
}

uint64_t getEnumTagSinglePayload for GraphicsFilter(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xF0 && *(_BYTE *)(a1 + 117))
    return (*(_DWORD *)a1 + 240);
  v3 = *(unsigned __int8 *)(a1 + 116);
  if (v3 <= 0x10)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for GraphicsFilter(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xEF)
  {
    *(_QWORD *)(result + 104) = 0;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 116) = 0;
    *(_DWORD *)(result + 112) = 0;
    *(_QWORD *)result = a2 - 240;
    if (a3 >= 0xF0)
      *(_BYTE *)(result + 117) = 1;
  }
  else
  {
    if (a3 >= 0xF0)
      *(_BYTE *)(result + 117) = 0;
    if (a2)
      *(_BYTE *)(result + 116) = -(char)a2;
  }
  return result;
}

uint64_t getEnumTag for GraphicsFilter(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 116) <= 0xFu)
    return *(unsigned __int8 *)(a1 + 116);
  else
    return (*(_DWORD *)a1 + 16);
}

uint64_t destructiveInjectEnumTag for GraphicsFilter(uint64_t result, unsigned int a2)
{
  if (a2 >= 0x10)
  {
    *(_QWORD *)result = a2 - 16;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    LOBYTE(a2) = 16;
    *(_OWORD *)(result + 100) = 0u;
  }
  *(_BYTE *)(result + 116) = a2;
  return result;
}

ValueMetadata *type metadata accessor for GraphicsFilter()
{
  return &type metadata for GraphicsFilter;
}

ValueMetadata *type metadata accessor for GraphicsFilter.ColorMonochrome()
{
  return &type metadata for GraphicsFilter.ColorMonochrome;
}

ValueMetadata *type metadata accessor for GraphicsFilter.Curve()
{
  return &type metadata for GraphicsFilter.Curve;
}

ValueMetadata *type metadata accessor for GraphicsFilter.LuminanceCurve()
{
  return &type metadata for GraphicsFilter.LuminanceCurve;
}

__n128 __swift_memcpy64_4(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

ValueMetadata *type metadata accessor for GraphicsFilter.ColorCurves()
{
  return &type metadata for GraphicsFilter.ColorCurves;
}

uint64_t initializeWithCopy for GraphicsFilter.ShaderFilter(uint64_t a1, uint64_t a2)
{
  void *v3;
  id v4;

  v3 = *(void **)a2;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  v4 = v3;
  return a1;
}

uint64_t assignWithCopy for GraphicsFilter.ShaderFilter(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;

  v4 = *(void **)a1;
  v5 = *(void **)a2;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = v5;

  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  return a1;
}

uint64_t assignWithTake for GraphicsFilter.ShaderFilter(uint64_t a1, uint64_t a2)
{
  void *v4;

  v4 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;

  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  return a1;
}

uint64_t getEnumTagSinglePayload for GraphicsFilter.ShaderFilter(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *((_BYTE *)a1 + 48))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for GraphicsFilter.ShaderFilter(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 48) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 48) = 0;
    if (a2)
      *(_QWORD *)result = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for GraphicsFilter.ShaderFilter()
{
  return &type metadata for GraphicsFilter.ShaderFilter;
}

ValueMetadata *type metadata accessor for GraphicsBlendMode()
{
  return &type metadata for GraphicsBlendMode;
}

uint64_t LocalizedStringKey.StringInterpolation.appendInterpolation(accessibilityName:)(uint64_t a1)
{
  uint64_t v2;

  type metadata accessor for AccessibilityColorStorage();
  v2 = swift_allocObject();
  *(_QWORD *)(v2 + 16) = a1;
  swift_retain();
  LocalizedStringKey.StringInterpolation.appendInterpolation(_:)(v2, 0, 1, MEMORY[0x24BEE4AF8]);
  return swift_release();
}

uint64_t type metadata accessor for AccessibilityColorStorage()
{
  return objc_opt_self();
}

uint64_t AccessibilityColorStorage.resolve<A>(into:in:with:)(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16[2];
  uint64_t v17;
  uint64_t v18;

  v8 = *a2;
  v9 = a2[1];
  v10 = *a3;
  v11 = *(_QWORD *)(v5 + 16);
  v17 = v8;
  v18 = v9;
  result = Color.resolveAccessibilityName(in:)(&v17, v11);
  if (v13)
  {
    v17 = result;
    v18 = v13;
    v16[0] = v8;
    v16[1] = v9;
    v15 = v10;
    v14 = lazy protocol witness table accessor for type String and conformance String();
    ResolvedTextContainer.append<A>(_:in:with:)((uint64_t)&v17, v16, &v15, a4, MEMORY[0x24BEE0D00], a5, v14);
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t Color.resolveAccessibilityName(in:)(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  double v6;
  uint64_t v7;
  char *v8;
  unint64_t v9;
  uint64_t v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  int v20;
  unsigned __int8 v21;
  float v22;
  float v23;
  int v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  void *v31;
  void *v32;
  Class isa;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  void *v40;
  void *v41;
  Class v42;
  void *v43;
  uint64_t v44;
  void *v45;
  void *v46;
  void *v47;
  Class v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  void *v57;
  void *v58;
  void *v59;
  Class v60;
  void *v61;
  uint64_t v62;
  void *v63;
  void *v64;
  void *v65;
  Class v66;
  void *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  void *v75;
  void *v76;
  void *v77;
  Class v78;
  void *v79;
  uint64_t v80;
  void *v81;
  void *v82;
  void *v83;
  Class v84;
  void *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  void *v90;
  void *v91;
  void *v92;
  Class v93;
  void *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  float v100;
  int v101;
  float v102;
  int v103;
  float v104;
  int v105;
  int v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  char *v111;
  unint64_t v112;
  unint64_t v113;
  float v114;
  int v115;
  float v116;
  int v117;
  char v118;

  v4 = type metadata accessor for Locale();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v107 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *a1;
  v9 = a1[1];
  v112 = v10;
  v113 = v9;
  v11 = (*(float (**)(unint64_t *, double))(*(_QWORD *)a2 + 104))(&v112, v6);
  v13 = v12;
  v15 = v14;
  v17 = v16;
  RGBToHSB(_:_:_:)(v11, v12, v14);
  v112 = __PAIR64__(LODWORD(v13), LODWORD(v11));
  v113 = __PAIR64__(LODWORD(v18), LODWORD(v15));
  v114 = v19;
  v115 = v20;
  v116 = v17;
  v117 = 0;
  v118 = 1;
  if (v17 == 0.0)
  {
    v21 = 0;
LABEL_5:
    v24 = 2;
    v25 = 2;
    goto LABEL_6;
  }
  v22 = v18;
  v23 = v19;
  if (AccessibilityColorValues.luma.getter() > 0.99)
  {
    v21 = 1;
    goto LABEL_5;
  }
  if (AccessibilityColorValues.luma.getter() >= 0.01)
  {
    v100 = AccessibilityColorValues.luma.getter();
    if (v23 >= 0.05)
    {
      v102 = AccessibilityColorValues.luma.getter();
      if (v102 > 0.85)
        v103 = 1;
      else
        v103 = 2;
      if (v102 >= 0.35)
        v25 = v103;
      else
        v25 = 0;
      v104 = AccessibilityColorValues.luma.getter();
      if (v100 >= 0.54 || v22 <= 0.056 || v22 >= 0.111)
      {
        if (v104 > 0.7)
          v105 = 1;
        else
          v105 = 2;
        if (v23 <= 0.9)
          v106 = 2;
        else
          v106 = v105;
        if (v23 >= 0.2)
          v24 = v106;
        else
          v24 = 0;
        v21 = specialized AccessibilityColorKey.init(hue:)(v22);
        if (v21 == 21)
          return 0;
      }
      else if (v23 >= 0.2)
      {
        v24 = 2;
        if (v23 > 0.9)
        {
          if (v104 > 0.7)
            v24 = 1;
          else
            v24 = 2;
        }
        v21 = 4;
      }
      else
      {
        v24 = 0;
        v21 = 4;
      }
    }
    else
    {
      if (v100 > 0.85)
        v101 = 1;
      else
        v101 = 2;
      v24 = 2;
      if (v100 >= 0.35)
        v25 = v101;
      else
        v25 = 0;
      v21 = 3;
    }
  }
  else
  {
    v24 = 2;
    v25 = 2;
    v21 = 2;
  }
LABEL_6:
  v110 = v5;
  v26 = AccessibilityColorKey.rawValue.getter(v21);
  v28 = v27;
  if (v9)
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v10, (uint64_t)v8);
  }
  else
  {
    v29 = swift_retain_n();
    specialized closure #1 in PropertyList.subscript.getter(v29, (uint64_t)v8);
  }
  swift_release_n();
  swift_release_n();
  if (one-time initialization token for accessibilityBundle != -1)
    swift_once();
  v30 = (void *)static AccessibilityLocalizedString.accessibilityBundle;
  v31 = (void *)MEMORY[0x23B7C5DAC](v26, v28);
  v32 = (void *)MEMORY[0x23B7C5DAC](0x6269737365636341, 0xED00007974696C69);
  v111 = v8;
  isa = Locale._bridgeToObjectiveC()().super.isa;
  v34 = (void *)_LocalizeString(v30, v31, v32, isa);

  v35 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v37 = v36;
  swift_bridgeObjectRelease();

  if (v25 != 2)
  {
    v109 = v4;
    if (v25)
      v55 = 0x746867696CLL;
    else
      v55 = 1802658148;
    if (v25)
      v56 = 0xE500000000000000;
    else
      v56 = 0xE400000000000000;
    if (v24 == 2)
    {
      v57 = (void *)static AccessibilityLocalizedString.accessibilityBundle;
      v58 = (void *)MEMORY[0x23B7C5DAC](0xD000000000000025, 0x80000002352E3570);
      v59 = (void *)MEMORY[0x23B7C5DAC](0x6269737365636341, 0xED00007974696C69);
      v108 = v35;
      v60 = Locale._bridgeToObjectiveC()().super.isa;
      v61 = (void *)_LocalizeString(v57, v58, v59, v60);

      v107 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      type metadata accessor for _ContiguousArrayStorage<CVarArg>();
      v62 = swift_allocObject();
      *(_OWORD *)(v62 + 16) = xmmword_2352828C0;
      v63 = (void *)static AccessibilityLocalizedString.accessibilityBundle;
      v64 = (void *)MEMORY[0x23B7C5DAC](v55, v56);
      v65 = (void *)MEMORY[0x23B7C5DAC](0x6269737365636341, 0xED00007974696C69);
      v66 = Locale._bridgeToObjectiveC()().super.isa;
      v67 = (void *)_LocalizeString(v63, v64, v65, v66);

      v68 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v70 = v69;
      swift_bridgeObjectRelease();

      v71 = MEMORY[0x24BEE0D00];
      *(_QWORD *)(v62 + 56) = MEMORY[0x24BEE0D00];
      v72 = lazy protocol witness table accessor for type String and conformance String();
      *(_QWORD *)(v62 + 32) = v68;
      *(_QWORD *)(v62 + 40) = v70;
      *(_QWORD *)(v62 + 96) = v71;
      *(_QWORD *)(v62 + 104) = v72;
      v73 = v108;
      *(_QWORD *)(v62 + 64) = v72;
      *(_QWORD *)(v62 + 72) = v73;
      *(_QWORD *)(v62 + 80) = v37;
    }
    else
    {
      v74 = 0x746E6172626976;
      if (!v24)
        v74 = 0x68736979617267;
      v107 = v74;
      v75 = (void *)static AccessibilityLocalizedString.accessibilityBundle;
      v76 = (void *)MEMORY[0x23B7C5DAC](0xD00000000000001BLL, 0x80000002352E3550);
      v77 = (void *)MEMORY[0x23B7C5DAC](0x6269737365636341, 0xED00007974696C69);
      v78 = Locale._bridgeToObjectiveC()().super.isa;
      v79 = (void *)_LocalizeString(v75, v76, v77, v78);

      v108 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      type metadata accessor for _ContiguousArrayStorage<CVarArg>();
      v80 = swift_allocObject();
      *(_OWORD *)(v80 + 16) = xmmword_235283260;
      v81 = (void *)static AccessibilityLocalizedString.accessibilityBundle;
      v82 = (void *)MEMORY[0x23B7C5DAC](v55, v56);
      v83 = (void *)MEMORY[0x23B7C5DAC](0x6269737365636341, 0xED00007974696C69);
      v84 = Locale._bridgeToObjectiveC()().super.isa;
      v85 = (void *)_LocalizeString(v81, v82, v83, v84);

      v86 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v88 = v87;
      swift_bridgeObjectRelease();

      *(_QWORD *)(v80 + 56) = MEMORY[0x24BEE0D00];
      v89 = lazy protocol witness table accessor for type String and conformance String();
      *(_QWORD *)(v80 + 64) = v89;
      *(_QWORD *)(v80 + 32) = v86;
      *(_QWORD *)(v80 + 40) = v88;
      v90 = (void *)static AccessibilityLocalizedString.accessibilityBundle;
      v91 = (void *)MEMORY[0x23B7C5DAC](v107, 0xE700000000000000);
      v92 = (void *)MEMORY[0x23B7C5DAC](0x6269737365636341, 0xED00007974696C69);
      v93 = Locale._bridgeToObjectiveC()().super.isa;
      v94 = (void *)_LocalizeString(v90, v91, v92, v93);

      v95 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v97 = v96;
      swift_bridgeObjectRelease();

      v98 = MEMORY[0x24BEE0D00];
      *(_QWORD *)(v80 + 96) = MEMORY[0x24BEE0D00];
      *(_QWORD *)(v80 + 104) = v89;
      *(_QWORD *)(v80 + 72) = v95;
      *(_QWORD *)(v80 + 80) = v97;
      *(_QWORD *)(v80 + 136) = v98;
      *(_QWORD *)(v80 + 144) = v89;
      *(_QWORD *)(v80 + 112) = v35;
      *(_QWORD *)(v80 + 120) = v37;
    }
    goto LABEL_28;
  }
  if (v24 != 2)
  {
    v109 = v4;
    if (v24)
      v38 = 0x746E6172626976;
    else
      v38 = 0x68736979617267;
    v39 = (void *)static AccessibilityLocalizedString.accessibilityBundle;
    v40 = (void *)MEMORY[0x23B7C5DAC](0xD000000000000026, 0x80000002352E35A0);
    v41 = (void *)MEMORY[0x23B7C5DAC](0x6269737365636341, 0xED00007974696C69);
    v42 = Locale._bridgeToObjectiveC()().super.isa;
    v43 = (void *)_LocalizeString(v39, v40, v41, v42);

    static String._unconditionallyBridgeFromObjectiveC(_:)();
    type metadata accessor for _ContiguousArrayStorage<CVarArg>();
    v44 = swift_allocObject();
    *(_OWORD *)(v44 + 16) = xmmword_2352828C0;
    v45 = (void *)static AccessibilityLocalizedString.accessibilityBundle;
    v46 = (void *)MEMORY[0x23B7C5DAC](v38, 0xE700000000000000);
    v47 = (void *)MEMORY[0x23B7C5DAC](0x6269737365636341, 0xED00007974696C69);
    v48 = Locale._bridgeToObjectiveC()().super.isa;
    v49 = (void *)_LocalizeString(v45, v46, v47, v48);

    v50 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v52 = v51;
    swift_bridgeObjectRelease();

    v53 = MEMORY[0x24BEE0D00];
    *(_QWORD *)(v44 + 56) = MEMORY[0x24BEE0D00];
    v54 = lazy protocol witness table accessor for type String and conformance String();
    *(_QWORD *)(v44 + 32) = v50;
    *(_QWORD *)(v44 + 40) = v52;
    *(_QWORD *)(v44 + 96) = v53;
    *(_QWORD *)(v44 + 104) = v54;
    *(_QWORD *)(v44 + 64) = v54;
    *(_QWORD *)(v44 + 72) = v35;
    *(_QWORD *)(v44 + 80) = v37;
LABEL_28:
    v35 = static String.localizedStringWithFormat(_:_:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v4 = v109;
  }
  (*(void (**)(char *, uint64_t))(v110 + 8))(v111, v4);
  return v35;
}

uint64_t AccessibilityColorStorage.isEqual(to:)()
{
  uint64_t v0;
  uint64_t result;
  uint64_t v2;
  uint64_t (*v3)(uint64_t);
  uint64_t v4;
  char v5;

  result = swift_dynamicCastClass();
  if (result)
  {
    v2 = *(_QWORD *)(result + 16);
    if (v2 == *(_QWORD *)(v0 + 16))
    {
      return 1;
    }
    else
    {
      v3 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 88);
      swift_retain();
      v4 = swift_retain();
      v5 = v3(v4);
      swift_release();
      swift_release();
      return v5 & 1;
    }
  }
  return result;
}

float AccessibilityColorValues.luma.getter()
{
  uint64_t v0;
  float v1;
  float result;

  if ((*(_BYTE *)(v0 + 32) & 1) == 0)
    return *(float *)(v0 + 28);
  v1 = *(float *)(v0 + 24)
     * (float)((float)((float)(*(float *)v0 * 0.2126) + (float)(*(float *)(v0 + 4) * 0.7152))
             + (float)(*(float *)(v0 + 8) * 0.0722));
  if (v1 < 0.0)
    v1 = 0.0;
  result = fminf(v1, 1.0);
  *(float *)(v0 + 28) = result;
  *(_BYTE *)(v0 + 32) = 0;
  return result;
}

uint64_t AccessibilityColorKey.rawValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_234DF9264 + 4 * byte_2352A3540[a1]))(0x726170736E617274, 0xEB00000000746E65);
}

uint64_t sub_234DF9264()
{
  return 0x6574696877;
}

uint64_t sub_234DF9278()
{
  return 0x6B63616C62;
}

uint64_t sub_234DF928C()
{
  return 2036429415;
}

uint64_t sub_234DF929C()
{
  return 0x6E776F7262;
}

uint64_t sub_234DF92B0()
{
  return 6579570;
}

uint64_t sub_234DF92C0()
{
  return 0x6E61726F20646572;
}

uint64_t sub_234DF92DC()
{
  return 0x65676E61726FLL;
}

uint64_t sub_234DF92F0()
{
  return 0x792065676E61726FLL;
}

uint64_t sub_234DF9314()
{
  return 0x776F6C6C6579;
}

uint64_t sub_234DF9328()
{
  return 0x6720776F6C6C6579;
}

uint64_t sub_234DF9348()
{
  return 0x6E65657267;
}

uint64_t sub_234DF935C()
{
  return 0x6572672065756C62;
}

uint64_t sub_234DF937C()
{
  return 1851881827;
}

uint64_t sub_234DF938C()
{
  return 0x756C62206E617963;
}

uint64_t sub_234DF93A8()
{
  return 1702194274;
}

uint64_t sub_234DF93B8()
{
  return 0x67616D2065756C62;
}

uint64_t sub_234DF93D8()
{
  return 0x61746E6567616DLL;
}

uint64_t sub_234DF93F0()
{
  return 0x2061746E6567616DLL;
}

uint64_t sub_234DF9410()
{
  return 1802398064;
}

uint64_t sub_234DF9420()
{
  return 0x646572206B6E6970;
}

id one-time initialization function for accessibilityBundle()
{
  uint64_t ObjCClassFromMetadata;
  id result;

  type metadata accessor for AXCustomContent();
  ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  result = objc_msgSend((id)objc_opt_self(), sel_bundleForClass_, ObjCClassFromMetadata);
  static AccessibilityLocalizedString.accessibilityBundle = (uint64_t)result;
  return result;
}

void RGBToHSB(_:_:_:)(float a1, float a2, float a3)
{
  float v4;
  float v5;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  BOOL v12;
  float v13;

  if (a2 > a1 || a3 > a1)
  {
    if (a2 >= a1)
      v4 = a1;
    else
      v4 = a2;
    if (a1 >= a3)
      v5 = a3;
    else
      v5 = a1;
    if (a1 > a2 || a3 > a2)
    {
      v5 = v4;
      v7 = a3;
    }
    else
    {
      v7 = a2;
    }
  }
  else
  {
    if (a2 >= a3)
      v5 = a3;
    else
      v5 = a2;
    v7 = a1;
  }
  v8 = 0.0;
  if (v7 > 0.0)
  {
    v9 = v7 - v5;
    if ((float)((float)(v7 - v5) / v7) != 0.0)
    {
      v10 = (float)(v7 - a2) / v9;
      v11 = (float)(v7 - a3) / v9;
      if (v7 == a1)
      {
        if (v5 == a2)
          v8 = v11 + 5.0;
        else
          v8 = 1.0 - v10;
      }
      else
      {
        v12 = v7 == a2;
        v13 = (float)(v7 - a1) / v9;
        if (v12)
        {
          if (v5 == a3)
            v8 = v13 + 1.0;
          else
            v8 = 3.0 - v11;
        }
        else if (v5 == a1)
        {
          v8 = v10 + 3.0;
        }
        else
        {
          v8 = 5.0 - v13;
        }
      }
    }
  }
  fmodf(v8 / 6.0, 1.0);
}

uint64_t specialized AccessibilityColorKey.init(hue:)(float a1)
{
  if (a1 < 0.0 || a1 > 1.0)
    return 21;
  if (a1 < 0.028)
    return 5;
  if (a1 < 0.056)
    return 6;
  if (a1 < 0.111)
    return 7;
  if (a1 < 0.129)
    return 8;
  if (a1 < 0.167)
    return 9;
  if (a1 < 0.222)
    return 10;
  if (a1 < 0.389)
    return 11;
  if (a1 < 0.469)
    return 12;
  if (a1 < 0.54)
    return 13;
  if (a1 < 0.611)
    return 14;
  if (a1 < 0.667)
    return 15;
  if (a1 < 0.8)
    return 16;
  if (a1 < 0.889)
    return 17;
  if (a1 < 0.917)
    return 18;
  if (a1 < 0.958)
    return 19;
  if (a1 >= 0.986)
    return 5;
  return 20;
}

unint64_t type metadata accessor for AXCustomContent()
{
  unint64_t result;

  result = lazy cache variable for type metadata for AXCustomContent;
  if (!lazy cache variable for type metadata for AXCustomContent)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, &lazy cache variable for type metadata for AXCustomContent);
  }
  return result;
}

uint64_t initializeWithCopy for AnyCodable(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  __int128 v4;

  v3 = *(_QWORD *)(a2 + 40);
  v4 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v4;
  *(_QWORD *)(a1 + 40) = v3;
  (**(void (***)(void))(v4 - 8))();
  return a1;
}

uint64_t *assignWithCopy for AnyCodable(uint64_t *a1, uint64_t *a2)
{
  __swift_assign_boxed_opaque_existential_2(a1, a2);
  return a1;
}

uint64_t *__swift_assign_boxed_opaque_existential_2(uint64_t *result, uint64_t *a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE v11[24];

  if (result != a2)
  {
    v3 = result;
    v4 = result[3];
    v5 = a2[3];
    if (v4 == v5)
    {
      v9 = *(_QWORD *)(v4 - 8);
      if ((*(_BYTE *)(v9 + 82) & 2) != 0)
      {
        v10 = *a2;
        swift_retain();
        result = (uint64_t *)swift_release();
        *v3 = v10;
      }
      else
      {
        return (uint64_t *)(*(uint64_t (**)(uint64_t *, uint64_t *, uint64_t))(v9 + 24))(result, a2, result[3]);
      }
    }
    else
    {
      result[3] = v5;
      result[4] = a2[4];
      result[5] = a2[5];
      v6 = *(_QWORD *)(v4 - 8);
      v7 = *(_QWORD *)(v5 - 8);
      v8 = *(_DWORD *)(v7 + 80);
      if ((*(_BYTE *)(v6 + 82) & 2) != 0)
      {
        if ((v8 & 0x20000) != 0)
        {
          *result = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(result, a2, v5);
        }
        return (uint64_t *)swift_release();
      }
      else
      {
        (*(void (**)(_BYTE *, uint64_t *, uint64_t))(v6 + 32))(v11, result, v4);
        if ((v8 & 0x20000) != 0)
        {
          *v3 = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(v3, a2, v5);
        }
        return (uint64_t *)(*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v11, v4);
      }
    }
  }
  return result;
}

_OWORD *assignWithTake for AnyCodable(_OWORD *a1, _OWORD *a2)
{
  __int128 v4;

  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  a1[2] = a2[2];
  return a1;
}

uint64_t type metadata accessor for AnyCodable(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AnyCodable);
}

uint64_t AnyCodable.init<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X4>, uint64_t a4@<X5>, uint64_t *a5@<X8>)
{
  uint64_t *boxed_opaque_existential_1;

  a5[3] = a2;
  a5[4] = a3;
  a5[5] = a4;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(a5);
  return (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 32))(boxed_opaque_existential_1, a1, a2);
}

uint64_t AnyCodable.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _OWORD *a5@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t (*v23)(uint64_t, uint64_t, uint64_t);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  _OWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t *v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  Swift::String v43;
  Swift::String v44;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  _QWORD *v49;
  _OWORD *v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  __int128 v54[3];
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _OWORD v58[3];
  char v59;

  v50 = a5;
  v52 = a2;
  v51 = a3;
  v6 = type metadata accessor for AnyCodable.CodingKeys(255, a2, a3, a4);
  v7 = MEMORY[0x23B7C9C04](&protocol conformance descriptor for AnyCodable<A>.CodingKeys, v6);
  v8 = type metadata accessor for KeyedDecodingContainer();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v46 - v10;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  v12 = v53;
  v13 = a1;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v12)
    goto LABEL_10;
  v53 = (char *)v7;
  v14 = v52;
  LOBYTE(v54[0]) = 0;
  v15 = KeyedDecodingContainer.decode(_:forKey:)();
  v16 = v8;
  v18 = v17;
  v49 = a1;
  v48 = v11;
  v19 = v15;
  v20 = _typeByName(_:)();
  if (!v20)
  {
    v33 = type metadata accessor for AnyCodable.Errors(0, v14, v51, v21);
    MEMORY[0x23B7C9C04](&protocol conformance descriptor for AnyCodable<A>.Errors, v33);
    swift_allocError();
    *(_QWORD *)v34 = v19;
    *(_QWORD *)(v34 + 8) = v18;
    *(_BYTE *)(v34 + 16) = 1;
    swift_willThrow();
    (*(void (**)(char *, uint64_t))(v9 + 8))(v48, v16);
LABEL_9:
    v13 = v49;
LABEL_10:
    v32 = (uint64_t)v13;
    return __swift_destroy_boxed_opaque_existential_1(v32);
  }
  v22 = v20;
  v47 = v16;
  swift_bridgeObjectRelease();
  v55 = 0;
  v56 = 0;
  v57 = 0;
  v23 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v51 + 8);
  v46 = v22;
  v24 = v23(v22, v22, v14);
  v26 = v25;
  v28 = v27;
  swift_beginAccess();
  v55 = v24;
  v56 = v26;
  v57 = v28;
  swift_beginAccess();
  if (!v55)
  {
    v35 = type metadata accessor for DecodingError();
    swift_allocError();
    v37 = v36;
    type metadata accessor for (@thick Any.Type, DecodingError.Context)();
    v53 = (char *)v37 + *(int *)(v38 + 48);
    *v37 = v46;
    v39 = v48;
    v51 = KeyedDecodingContainer.codingPath.getter();
    *(_QWORD *)&v54[0] = 0;
    *((_QWORD *)&v54[0] + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(25);
    v40 = _typeName(_:qualified:)();
    v42 = v41;
    swift_bridgeObjectRelease();
    *(_QWORD *)&v54[0] = v40;
    *((_QWORD *)&v54[0] + 1) = v42;
    v43._object = (void *)0x80000002352E35D0;
    v43._countAndFlagsBits = 0xD000000000000015;
    String.append(_:)(v43);
    v44._countAndFlagsBits = _typeName(_:qualified:)();
    String.append(_:)(v44);
    swift_bridgeObjectRelease();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t *, _QWORD, uint64_t))(*(_QWORD *)(v35 - 8) + 104))(v37, *MEMORY[0x24BEE26D0], v35);
    swift_willThrow();
    (*(void (**)(char *, uint64_t))(v9 + 8))(v39, v47);
    goto LABEL_9;
  }
  v59 = 1;
  v29 = v48;
  static Decodable<>.decode<A>(from:in:)(v55, v56, v57, (uint64_t *)v54);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v29, v47);
  outlined init with take of Decodable & Encodable(v54, v58);
  v30 = v58[1];
  v31 = v50;
  *v50 = v58[0];
  v31[1] = v30;
  v31[2] = v58[2];
  v32 = (uint64_t)v49;
  return __swift_destroy_boxed_opaque_existential_1(v32);
}

uint64_t static Decodable<>.decode<A>(from:in:)@<X0>(uint64_t a1@<X2>, uint64_t a2@<X4>, uint64_t a3@<X5>, uint64_t *a4@<X8>)
{
  uint64_t v4;
  uint64_t result;

  a4[3] = a1;
  a4[4] = a2;
  a4[5] = a3;
  __swift_allocate_boxed_opaque_existential_1(a4);
  type metadata accessor for KeyedDecodingContainer();
  result = KeyedDecodingContainer.decode<A>(_:forKey:)();
  if (v4)
    return __swift_deallocate_boxed_opaque_existential_1((uint64_t)a4);
  return result;
}

uint64_t AnyCodable.encode(to:)(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t DynamicType;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD v22[8];

  v5 = v4;
  v7 = *(_QWORD *)(a2 + 16);
  v20 = *(_QWORD *)(a2 + 24);
  v21 = v7;
  v8 = type metadata accessor for AnyCodable.CodingKeys(255, v7, v20, a4);
  MEMORY[0x23B7C9C04](&protocol conformance descriptor for AnyCodable<A>.CodingKeys, v8);
  v9 = type metadata accessor for KeyedEncodingContainer();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v20 - v11;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  outlined init with copy of Decodable & Encodable((uint64_t)v5, (uint64_t)v22);
  __swift_project_boxed_opaque_existential_1(v22, v22[3]);
  DynamicType = swift_getDynamicType();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v22);
  _mangledTypeName(_:)();
  if (v15)
  {
    LOBYTE(v22[0]) = 0;
    v16 = v22[7];
    KeyedEncodingContainer.encode(_:forKey:)();
    if (v16)
    {
      (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
      return swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    __swift_project_boxed_opaque_existential_1(v5, v5[3]);
    LOBYTE(v22[0]) = 1;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  else
  {
    v18 = type metadata accessor for AnyCodable.Errors(0, v21, v20, v14);
    MEMORY[0x23B7C9C04](&protocol conformance descriptor for AnyCodable<A>.Errors, v18);
    swift_allocError();
    *(_QWORD *)v19 = DynamicType;
    *(_QWORD *)(v19 + 8) = 0;
    *(_BYTE *)(v19 + 16) = 0;
    swift_willThrow();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
}

uint64_t AnyCodable.CodingKeys.init(rawValue:)(uint64_t a1)
{
  unsigned int v1;

  if (a1 == 1)
    v1 = 1;
  else
    v1 = 2;
  if (a1)
    return v1;
  else
    return 0;
}

uint64_t AnyCodable.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 1701869940 && a2 == 0xE400000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x65756C6176 && a2 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t AnyCodable.CodingKeys.intValue.getter(char a1)
{
  return a1 & 1;
}

uint64_t AnyCodable.CodingKeys.rawValue.getter(char a1)
{
  return a1 & 1;
}

uint64_t AnyCodable.CodingKeys.stringValue.getter(char a1)
{
  if ((a1 & 1) != 0)
    return 0x65756C6176;
  else
    return 1701869940;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance AnyCodable<A>.CodingKeys(uint64_t a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x23B7C9C04](&protocol conformance descriptor for AnyCodable<A>.CodingKeys, a3);
  return == infix<A>(_:_:)();
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance AnyCodable<A>.CodingKeys(uint64_t a1)
{
  MEMORY[0x23B7C9C04](&protocol conformance descriptor for AnyCodable<A>.CodingKeys, a1);
  return RawRepresentable<>.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AnyCodable<A>.CodingKeys()
{
  MEMORY[0x23B7C9C04](&protocol conformance descriptor for AnyCodable<A>.CodingKeys);
  return RawRepresentable<>.hash(into:)();
}

uint64_t protocol witness for Hashable._rawHashValue(seed:) in conformance AnyCodable<A>.CodingKeys()
{
  MEMORY[0x23B7C9C04](&protocol conformance descriptor for AnyCodable<A>.CodingKeys);
  return RawRepresentable<>._rawHashValue(seed:)();
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance AnyCodable<A>.CodingKeys@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = AnyCodable.CodingKeys.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance AnyCodable<A>.CodingKeys@<X0>(uint64_t *a1@<X8>)
{
  char *v1;
  uint64_t result;

  result = AnyCodable.CodingKeys.rawValue.getter(*v1);
  *a1 = result;
  return result;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance AnyCodable<A>.CodingKeys()
{
  char *v0;

  return AnyCodable.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance AnyCodable<A>.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = AnyCodable.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CodingKey.intValue.getter in conformance AnyCodable<A>.CodingKeys()
{
  char *v0;

  return AnyCodable.CodingKeys.intValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance AnyCodable<A>.CodingKeys@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = AnyCodable.CodingKeys.init(rawValue:)(a1);
  *a2 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AnyCodable<A>.CodingKeys(uint64_t a1)
{
  MEMORY[0x23B7C9C04](&protocol conformance descriptor for AnyCodable<A>.CodingKeys, a1);
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AnyCodable<A>.CodingKeys(uint64_t a1)
{
  MEMORY[0x23B7C9C04](&protocol conformance descriptor for AnyCodable<A>.CodingKeys, a1);
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for Decodable.init(from:) in conformance AnyCodable<A>@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, _OWORD *a4@<X8>)
{
  return AnyCodable.init(from:)(a1, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), a3, a4);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance AnyCodable<A>(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return AnyCodable.encode(to:)(a1, a2, a3, a4);
}

uint64_t type metadata accessor for AnyCodable.CodingKeys(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AnyCodable.CodingKeys);
}

uint64_t type metadata accessor for AnyCodable.Errors(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AnyCodable.Errors);
}

_OWORD *outlined init with take of Decodable & Encodable(__int128 *a1, _OWORD *a2)
{
  __int128 v2;
  __int128 v3;

  v2 = *a1;
  v3 = a1[2];
  a2[1] = a1[1];
  a2[2] = v3;
  *a2 = v2;
  return a2;
}

uint64_t outlined copy of AnyCodable<A>.Errors<A>(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result;

  if (a3 == 1)
    return swift_bridgeObjectRetain();
  return result;
}

uint64_t destroy for AnyCodable.Errors(uint64_t a1)
{
  return outlined consume of AnyCodable<A>.Errors<A>(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
}

uint64_t outlined consume of AnyCodable<A>.Errors<A>(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result;

  if (a3 == 1)
    return swift_bridgeObjectRelease();
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for AnyCodable.Errors(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  outlined copy of AnyCodable<A>.Errors<A>(*(_QWORD *)a2, v4, v5);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for AnyCodable.Errors(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  outlined copy of AnyCodable<A>.Errors<A>(*(_QWORD *)a2, v4, v5);
  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  v8 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v5;
  outlined consume of AnyCodable<A>.Errors<A>(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for AnyCodable.Errors(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  char v6;

  v3 = *(_BYTE *)(a2 + 16);
  v4 = *(_QWORD *)a1;
  v5 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  v6 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v3;
  outlined consume of AnyCodable<A>.Errors<A>(v4, v5, v6);
  return a1;
}

uint64_t storeEnumTagSinglePayload for AnyCodable.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_234DFA68C + 4 * byte_2352A3585[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_234DFA6C0 + 4 * asc_2352A3580[v4]))();
}

uint64_t sub_234DFA6C0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_234DFA6C8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x234DFA6D0);
  return result;
}

uint64_t sub_234DFA6DC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x234DFA6E4);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_234DFA6E8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_234DFA6F0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void base witness table accessor for Equatable in AnyCodable<A>.CodingKeys()
{
  JUMPOUT(0x23B7C9C04);
}

void base witness table accessor for CustomDebugStringConvertible in AnyCodable<A>.CodingKeys()
{
  JUMPOUT(0x23B7C9C04);
}

void base witness table accessor for CustomStringConvertible in AnyCodable<A>.CodingKeys()
{
  JUMPOUT(0x23B7C9C04);
}

void Text.init<A>(_:format:)()
{
  Text.init<A>(_:format:)();
}

{
  Text.init<A>(_:format:)();
}

{
  type metadata accessor for FormatStyleStorage();
  swift_allocObject();
  FormatStyleStorage.init<A>(input:format:)();
}

uint64_t type metadata accessor for FormatStyleStorage()
{
  return objc_opt_self();
}

uint64_t Text.init<A>(_:formatter:)(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;

  swift_getAssociatedTypeWitness();
  swift_dynamicCast();
  type metadata accessor for FormatterTextStorage();
  result = swift_allocObject();
  *(_QWORD *)(result + 16) = v4;
  *(_QWORD *)(result + 24) = a2;
  return result;
}

{
  uint64_t result;

  type metadata accessor for FormatterTextStorage();
  result = swift_allocObject();
  *(_QWORD *)(result + 16) = a1;
  *(_QWORD *)(result + 24) = a2;
  return result;
}

void FormatStyleStorage.__allocating_init<A>(input:format:)()
{
  swift_allocObject();
  FormatStyleStorage.init<A>(input:format:)();
}

uint64_t type metadata accessor for FormatterTextStorage()
{
  return objc_opt_self();
}

id FormatterTextStorage.resolve<A>(into:in:with:)(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t ObjectType;
  id result;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24[2];
  uint64_t v25;
  uint64_t v26;

  v6 = v5;
  v9 = *a2;
  v10 = a2[1];
  v11 = *a3;
  v12 = *(void **)(v5 + 24);
  swift_getObjectType();
  v13 = swift_conformsToProtocol2();
  if (v13)
    v14 = v13;
  else
    v14 = 0;
  if (v13)
    v15 = v12;
  else
    v15 = 0;
  if (v15)
  {
    ObjectType = swift_getObjectType();
    v25 = v9;
    v26 = v10;
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(v14 + 8))(&v25, ObjectType, v14);
  }
  result = objc_msgSend(v12, sel_stringForObjectValue_, *(_QWORD *)(v6 + 16));
  if (result)
  {
    v18 = result;
    v19 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v21 = v20;

    v25 = v19;
    v26 = v21;
    v24[0] = v9;
    v24[1] = v10;
    v23 = v11;
    v22 = lazy protocol witness table accessor for type String and conformance String();
    ResolvedTextContainer.append<A>(_:in:with:)((uint64_t)&v25, v24, &v23, a4, MEMORY[0x24BEE0D00], a5, v22);
    return (id)swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t FormatterTextStorage.isEqual(to:)()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;
  char v4;
  id v5;
  char v6;

  v0 = swift_dynamicCastClass();
  if (v0)
  {
    v1 = v0;
    type metadata accessor for CAPresentationModifier(0, (unint64_t *)&lazy cache variable for type metadata for NSObject);
    v2 = *(void **)(v1 + 16);
    swift_retain();
    v3 = v2;
    v4 = static NSObject.== infix(_:_:)();

    if ((v4 & 1) != 0)
    {
      v5 = *(id *)(v1 + 24);
      v6 = static NSObject.== infix(_:_:)();
      swift_release();

      return v6 & 1;
    }
    swift_release();
  }
  return 0;
}

void FormatterTextStorage.__ivar_destroyer()
{
  uint64_t v0;

}

uint64_t FormatterTextStorage.__deallocating_deinit()
{
  uint64_t v0;

  return swift_deallocClassInstance();
}

void FormatStyleBoxBase.isEqual(to:)()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void FormatStyleBoxBase.format(in:idiom:)()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t type metadata accessor for FormatStyleBoxBase()
{
  return objc_opt_self();
}

uint64_t type metadata completion function for FormatStyleBox()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = swift_getAssociatedTypeWitness();
  if (v1 <= 0x3F)
  {
    result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      result = swift_initClassMetadata2();
      if (!result)
        return 0;
    }
  }
  return result;
}

uint64_t FormatStyleBox.__allocating_init(input:format:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = swift_allocObject();
  FormatStyleBox.init(input:format:)(a1, a2);
  return v4;
}

uint64_t FormatStyleBox.init(input:format:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t AssociatedTypeWitness;

  v5 = v2 + *(_QWORD *)(*(_QWORD *)v2 + 136);
  v6 = *(_QWORD *)(*(_QWORD *)v2 + 104);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 32))(v5, a1, AssociatedTypeWitness);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(v2 + *(_QWORD *)(*(_QWORD *)v2 + 144), a2, v6);
  return v2;
}

uint64_t FormatStyleBox.isEqual(to:)()
{
  char v0;

  if (swift_dynamicCastClass())
  {
    swift_getAssociatedTypeWitness();
    swift_retain();
    if ((dispatch thunk of static Equatable.== infix(_:_:)() & 1) != 0)
      v0 = dispatch thunk of static Equatable.== infix(_:_:)();
    else
      v0 = 0;
    swift_release();
  }
  else
  {
    v0 = 0;
  }
  return v0 & 1;
}

uint64_t FormatStyleBox.format(in:idiom:)(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _DWORD *v40;
  unsigned int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  void (*v48)(char *, uint64_t);
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void (*v52)(char *, char *, uint64_t);
  char v53;
  uint64_t v54;
  uint64_t v55;
  _UNKNOWN **v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  void (*v60)(_QWORD *, uint64_t, uint64_t);
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  void (*v66)(uint64_t, uint64_t, uint64_t);
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  void (*v72)(uint64_t, uint64_t, uint64_t);
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  Swift::Int v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  char *v82;
  char v83;
  void (*v84)(char *, uint64_t);
  char *v85;
  uint64_t v86;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  _UNKNOWN **v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  char *v103;
  uint64_t v104;
  char *v105;
  char *v106;
  char *v107;
  char *v108;
  uint64_t v109;
  uint64_t AssociatedTypeWitness;
  char *v111;
  char *v112;
  void (*v113)(char *, char *, uint64_t);
  uint64_t v114;
  uint64_t v115;
  _QWORD v116[2];
  __int128 v117;
  __int128 v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;

  v101 = a1;
  v7 = *(_QWORD *)(*v3 + 104);
  v6 = *(_QWORD *)(*v3 + 112);
  v100 = *v3;
  v114 = v6;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v109 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v108 = (char *)&v88 - v8;
  v91 = type metadata accessor for FormatStyleCapitalizationContext();
  v90 = *(_QWORD *)(v91 - 8);
  MEMORY[0x24BDAC7A8](v91);
  v89 = (uint64_t)&v88 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v97 = type metadata accessor for TimeZone();
  v96 = *(_QWORD *)(v97 - 8);
  MEMORY[0x24BDAC7A8](v97);
  v113 = (void (*)(char *, char *, uint64_t))((char *)&v88 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  v93 = type metadata accessor for Calendar();
  v94 = *(_QWORD *)(v93 - 8);
  MEMORY[0x24BDAC7A8](v93);
  v103 = (char *)&v88 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for Locale();
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v15 = (char *)&v88 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v115 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v16);
  v112 = (char *)&v88 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v18);
  v107 = (char *)&v88 - v19;
  MEMORY[0x24BDAC7A8](v20);
  v98 = (char *)&v88 - v21;
  MEMORY[0x24BDAC7A8](v22);
  v106 = (char *)&v88 - v23;
  MEMORY[0x24BDAC7A8](v24);
  v111 = (char *)&v88 - v25;
  MEMORY[0x24BDAC7A8](v26);
  v105 = (char *)&v88 - v27;
  MEMORY[0x24BDAC7A8](v28);
  v102 = (char *)&v88 - v29;
  MEMORY[0x24BDAC7A8](v30);
  v104 = (uint64_t)&v88 - v31;
  MEMORY[0x24BDAC7A8](v32);
  v95 = (uint64_t)&v88 - v33;
  MEMORY[0x24BDAC7A8](v34);
  v36 = (char *)&v88 - v35;
  v37 = *a2;
  v38 = a2[1];
  v99 = *a3;
  v92 = (_UNKNOWN **)a3[1];
  if (v38)
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v37, (uint64_t)v15);
  }
  else
  {
    v39 = swift_retain_n();
    specialized closure #1 in PropertyList.subscript.getter(v39, (uint64_t)v15);
  }
  swift_release_n();
  swift_release_n();
  dispatch thunk of FormatStyle.locale(_:)();
  (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
  if (one-time initialization token for v6 != -1)
    swift_once();
  v40 = &unk_25426D000;
  v41 = static Semantics.v6;
  v42 = (uint64_t)v113;
  v43 = (uint64_t)v103;
  if (one-time initialization token for forced != -1)
    swift_once();
  swift_beginAccess();
  if (byte_25426FAB4 != 1)
  {
    if (static Semantics.forced < v41)
      goto LABEL_10;
LABEL_12:
    (*(void (**)(char *, char *, uint64_t))(v115 + 16))(v102, v36, v7);
    if (v38)
    {
      swift_retain_n();
      swift_retain_n();
      specialized PropertyList.Tracker.value<A>(_:for:)(v37, v43);
    }
    else
    {
      v45 = swift_retain_n();
      specialized closure #1 in PropertyList.subscript.getter(v45, v43);
    }
    v46 = v93;
    swift_release_n();
    swift_release_n();
    v47 = v102;
    FormatStyle.calendar(_:)(v43, v7, v104);
    (*(void (**)(uint64_t, uint64_t))(v94 + 8))(v43, v46);
    v48 = *(void (**)(char *, uint64_t))(v115 + 8);
    v48(v47, v7);
    if (v38)
    {
      swift_retain_n();
      swift_retain_n();
      specialized PropertyList.Tracker.value<A>(_:for:)(v37, v42);
    }
    else
    {
      v49 = swift_retain_n();
      specialized closure #1 in PropertyList.subscript.getter(v49, v42);
    }
    swift_release_n();
    swift_release_n();
    v50 = v95;
    v51 = v104;
    FormatStyle.timeZone(_:)(v42, v7, v95);
    (*(void (**)(uint64_t, uint64_t))(v96 + 8))(v42, v97);
    v48((char *)v51, v7);
    v48(v36, v7);
    v44 = v115;
    (*(void (**)(char *, uint64_t, uint64_t))(v115 + 32))(v36, v50, v7);
    goto LABEL_19;
  }
  if ((dyld_program_sdk_at_least() & 1) != 0)
    goto LABEL_12;
LABEL_10:
  v44 = v115;
LABEL_19:
  v52 = *(void (**)(char *, char *, uint64_t))(v44 + 16);
  v52(v105, v36, v7);
  type metadata accessor for ScrollStateRequest(0, &lazy cache variable for type metadata for InterfaceIdiomDependentFormatStyle);
  v53 = swift_dynamicCast();
  v113 = v52;
  if ((v53 & 1) != 0)
  {
    v105 = 0;
    v54 = outlined init with take of ScrollStateRequest(&v117, (uint64_t)&v120);
    if (v99)
    {
      v55 = v99;
      v56 = v92;
    }
    else
    {
      MEMORY[0x24BDAC7A8](v54);
      *(&v88 - 2) = 0xD00000000000002ELL;
      *(&v88 - 1) = 0x80000002352E36D0;
      specialized static Log.internalWarning(_:file:line:)((uint64_t)"SwiftUICore/Logging.swift", 25, 2, 84, partial apply for implicit closure #2 in FormatStyleBox.format(in:idiom:));
      type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, (unint64_t *)&lazy cache variable for type metadata for InterfaceIdiomBox<PhoneInterfaceIdiom>, (uint64_t)&type metadata for PhoneInterfaceIdiom, (uint64_t)&protocol witness table for PhoneInterfaceIdiom, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for InterfaceIdiomBox);
      v55 = v57;
      v56 = &protocol witness table for InterfaceIdiomBox<A>;
    }
    v58 = v121;
    v59 = v122;
    __swift_project_boxed_opaque_existential_1(&v120, v121);
    v116[0] = v55;
    v116[1] = v56;
    v60 = *(void (**)(_QWORD *, uint64_t, uint64_t))(v59 + 16);
    *((_QWORD *)&v118 + 1) = v58;
    v119 = v59;
    __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v117);
    v60(v116, v58, v59);
    v44 = v115;
    (*(void (**)(char *, uint64_t))(v115 + 8))(v36, v7);
    v61 = v111;
    swift_dynamicCast();
    (*(void (**)(char *, char *, uint64_t))(v44 + 32))(v36, v61, v7);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v120);
    v52 = v113;
    v40 = (_DWORD *)&unk_25426D000;
  }
  else
  {
    v119 = 0;
    v117 = 0u;
    v118 = 0u;
    outlined destroy of AnyTrackedValue?((uint64_t)&v117, &lazy cache variable for type metadata for InterfaceIdiomDependentFormatStyle?, &lazy cache variable for type metadata for InterfaceIdiomDependentFormatStyle);
  }
  v52(v106, v36, v7);
  type metadata accessor for ScrollStateRequest(0, &lazy cache variable for type metadata for TextAlignmentDependentFormatStyle);
  if ((swift_dynamicCast() & 1) != 0)
  {
    outlined init with take of ScrollStateRequest(&v117, (uint64_t)&v120);
    v62 = v121;
    v63 = v122;
    __swift_project_boxed_opaque_existential_1(&v120, v121);
    if (v38)
    {
      swift_retain_n();
      swift_retain_n();
      LODWORD(v64) = specialized PropertyList.Tracker.value<A>(_:for:)(v37);
    }
    else
    {
      v65 = swift_retain_n();
      LODWORD(v64) = specialized closure #1 in PropertyList.subscript.getter(v65);
    }
    swift_release_n();
    swift_release_n();
    v66 = *(void (**)(uint64_t, uint64_t, uint64_t))(v63 + 16);
    if (v64 == 3)
      v64 = 0;
    else
      v64 = v64;
    *((_QWORD *)&v118 + 1) = v62;
    v119 = v63;
    __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v117);
    v66(v64, v62, v63);
    v44 = v115;
    (*(void (**)(char *, uint64_t))(v115 + 8))(v36, v7);
    v67 = v111;
    swift_dynamicCast();
    (*(void (**)(char *, char *, uint64_t))(v44 + 32))(v36, v67, v7);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v120);
    v52 = v113;
    v40 = &unk_25426D000;
  }
  else
  {
    v119 = 0;
    v117 = 0u;
    v118 = 0u;
    outlined destroy of AnyTrackedValue?((uint64_t)&v117, &lazy cache variable for type metadata for TextAlignmentDependentFormatStyle?, &lazy cache variable for type metadata for TextAlignmentDependentFormatStyle);
  }
  if (byte_25426FAB4 == 1)
  {
    if ((dyld_program_sdk_at_least() & 1) == 0)
      goto LABEL_41;
  }
  else if (static Semantics.forced < v40[638])
  {
    goto LABEL_41;
  }
  v52(v98, v36, v7);
  v68 = type metadata accessor for ScrollStateRequest(0, &lazy cache variable for type metadata for CapitalizationContextDependentFormatStyle);
  if ((swift_dynamicCast() & 1) != 0)
  {
    outlined init with take of ScrollStateRequest(&v117, (uint64_t)&v120);
    v69 = v121;
    v70 = v122;
    __swift_project_boxed_opaque_existential_1(&v120, v121);
    *(_QWORD *)&v117 = v37;
    *((_QWORD *)&v117 + 1) = v38;
    v106 = (char *)v68;
    v71 = v89;
    EnvironmentValues.capitalizationContext.getter(v89);
    v72 = *(void (**)(uint64_t, uint64_t, uint64_t))(v70 + 16);
    *((_QWORD *)&v118 + 1) = v69;
    v119 = v70;
    __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v117);
    v44 = v115;
    v73 = v70;
    v52 = v113;
    v72(v71, v69, v73);
    (*(void (**)(uint64_t, uint64_t))(v90 + 8))(v71, v91);
    (*(void (**)(char *, uint64_t))(v44 + 8))(v36, v7);
    v74 = v111;
    swift_dynamicCast();
    (*(void (**)(char *, char *, uint64_t))(v44 + 32))(v36, v74, v7);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v120);
  }
  else
  {
    v119 = 0;
    v117 = 0u;
    v118 = 0u;
    outlined destroy of AnyTrackedValue?((uint64_t)&v117, &lazy cache variable for type metadata for CapitalizationContextDependentFormatStyle?, &lazy cache variable for type metadata for CapitalizationContextDependentFormatStyle);
  }
LABEL_41:
  v52(v112, v36, v7);
  if (v38)
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v37, &v120);
    swift_release_n();
    swift_release_n();
    v75 = v120;
    v76 = v100;
  }
  else
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.TextSizeVariantKey>, (uint64_t)&type metadata for EnvironmentValues.TextSizeVariantKey, (uint64_t)&protocol witness table for EnvironmentValues.TextSizeVariantKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    BloomFilter.init(hashValue:)(v77);
    v78 = v120;
    v79 = swift_retain_n();
    v80 = specialized find1<A>(_:key:filter:)(v79, v78);
    if (v80)
      v75 = *(_QWORD *)(v80 + 72);
    else
      v75 = 0;
    v76 = v100;
    swift_release_n();
  }
  *(_QWORD *)&v117 = v75;
  v81 = v107;
  v82 = v112;
  v83 = FormatStyle.exactSizeVariant(_:)(v107, (uint64_t *)&v117, v7);
  v84 = *(void (**)(char *, uint64_t))(v44 + 8);
  v84(v82, v7);
  v84(v36, v7);
  v113(v36, v81, v7);
  v85 = v108;
  dispatch thunk of FormatStyle.format(_:)();
  v86 = AssociatedTypeWitness;
  (*(void (**)(uint64_t))(*(_QWORD *)(v76 + 128) + 8))(AssociatedTypeWitness);
  (*(void (**)(char *, uint64_t))(v109 + 8))(v85, v86);
  v84(v81, v7);
  v84(v36, v7);
  return v83 & 1;
}

uint64_t FormatStyleBox.__ivar_destroyer()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t AssociatedTypeWitness;

  v1 = v0 + *(_QWORD *)(*(_QWORD *)v0 + 136);
  v2 = *(_QWORD *)(*(_QWORD *)v0 + 104);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 8))(v1, AssociatedTypeWitness);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v0 + *(_QWORD *)(*(_QWORD *)v0 + 144), v2);
}

uint64_t FormatStyleBox.deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t AssociatedTypeWitness;

  v1 = v0 + *(_QWORD *)(*(_QWORD *)v0 + 136);
  v2 = *(_QWORD *)(*(_QWORD *)v0 + 104);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 8))(v1, AssociatedTypeWitness);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v0 + *(_QWORD *)(*(_QWORD *)v0 + 144), v2);
  return v0;
}

uint64_t FormatStyleBox.__deallocating_deinit()
{
  FormatStyleBox.deinit();
  return swift_deallocClassInstance();
}

void type metadata accessor for FormatStyleBox()
{
  JUMPOUT(0x23B7C9B5CLL);
}

void FormatStyleStorage.init<A>(input:format:)()
{
  type metadata accessor for FormatStyleBox();
}

uint64_t sub_234DFBD98()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v3 = swift_allocObject();
  FormatStyleBox.init(input:format:)(v2, v1);
  *(_QWORD *)(v0 + 16) = v3;
  return v0;
}

uint64_t FormatStyleStorage.resolve<A>(into:in:with:)(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  double v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;

  v26 = a1;
  v27 = a4;
  v10 = type metadata accessor for AttributedString();
  v28 = *(_QWORD *)(v10 - 8);
  v29 = v10;
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = MEMORY[0x24BDAC7A8](v13);
  v16 = (char *)&v24 - v15;
  v17 = *a2;
  v18 = a2[1];
  v25 = *a3;
  v19 = *(_QWORD *)(v5 + 16);
  v32 = v17;
  v33 = v18;
  (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t, double))(a5 + 32))(&v31, a4, a5, v14);
  v30 = v31;
  LOBYTE(v19) = (*(uint64_t (**)(char *, uint64_t *, __int128 *))(*(_QWORD *)v19 + 88))(v16, &v32, &v30);
  type metadata accessor for CAPresentationModifier(0, (unint64_t *)&lazy cache variable for type metadata for NSAttributedString);
  v21 = v28;
  v20 = v29;
  (*(void (**)(char *, char *, uint64_t))(v28 + 16))(v12, v16, v29);
  v22 = (void *)NSAttributedString.init(_:)();
  v32 = v17;
  v33 = v18;
  *(_QWORD *)&v31 = v25;
  (*(void (**)(void *, uint64_t *, __int128 *, uint64_t, uint64_t, uint64_t))(a5 + 48))(v22, &v32, &v31, v19 & 1, v27, a5);

  return (*(uint64_t (**)(char *, uint64_t))(v21 + 8))(v16, v20);
}

uint64_t FormatStyleStorage.isEqual(to:)()
{
  uint64_t v0;
  uint64_t result;
  uint64_t (*v2)(uint64_t);
  uint64_t v3;
  char v4;

  result = swift_dynamicCastClass();
  if (result)
  {
    v2 = *(uint64_t (**)(uint64_t))(**(_QWORD **)(v0 + 16) + 80);
    swift_retain();
    v3 = swift_retain();
    v4 = v2(v3);
    swift_release();
    swift_release();
    return v4 & 1;
  }
  return result;
}

uint64_t partial apply for implicit closure #2 in FormatStyleBox.format(in:idiom:)()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t type metadata accessor for AttachmentTextStorage()
{
  return objc_opt_self();
}

uint64_t AttachmentTextStorage.resolve<A>(into:in:with:)(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(uint64_t, uint64_t);
  uint64_t v19;
  void (*v20)(char *, uint64_t, uint64_t, uint64_t);
  int v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD v41[3];
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD v49[2];
  _OWORD v50[10];
  _BYTE v51[19];
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  _OWORD v62[2];

  v44 = a5;
  v47 = a4;
  v41[2] = a1;
  type metadata accessor for Text.Style?();
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)v41 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = (int *)type metadata accessor for ImageResolutionContext();
  MEMORY[0x24BDAC7A8](v11);
  v13 = (_QWORD *)((char *)v41 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x24BDAC7A8](v14);
  v46 = (uint64_t)v41 - v15;
  v16 = *a2;
  v17 = a2[1];
  v42 = *a3;
  v18 = *(void (**)(uint64_t, uint64_t))(a5 + 8);
  swift_retain();
  swift_retain();
  v18(v47, a5);
  v19 = type metadata accessor for Text.Style(0);
  v20 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 56);
  v20(v10, 0, 1, v19);
  v21 = *MEMORY[0x24BE096C0];
  v13[2] = 0;
  v22 = (char *)v13 + v11[6];
  v20(v22, 1, 1, v19);
  v23 = v11[7];
  *(_DWORD *)((char *)v13 + v23) = v21;
  *((_BYTE *)v13 + v11[8]) = 8;
  *((_BYTE *)v13 + v11[9]) = 3;
  v24 = v11[10];
  v25 = v46;
  *((_BYTE *)v13 + v24) = 1;
  v45 = v16;
  *v13 = v16;
  v13[1] = v17;
  v26 = (uint64_t)v10;
  v27 = (uint64_t)v22;
  v28 = v42;
  v29 = v43;
  outlined assign with take of Text.Style?(v26, v27);
  *(_DWORD *)((char *)v13 + v23) = v21;
  v30 = (uint64_t)v13;
  v31 = v47;
  outlined init with take of ImageResolutionContext(v30, v25);
  if ((v28 & 4) != 0)
  {
    v32 = v17;
    v34 = v44;
    v33 = v45;
    (*(void (**)(__int128 *__return_ptr, uint64_t))(**(_QWORD **)(v29 + 16) + 88))(&v52, v25);
    v35 = *((_QWORD *)&v52 + 1);
    if (*((_QWORD *)&v52 + 1))
    {
      v43 = *((_QWORD *)&v54 + 1);
      v41[1] = v54;
      v36 = (void *)v53;
      v37 = HIDWORD(v53);
      v38 = v28;
      v39 = v52;
      BYTE12(v53) &= 1u;
      BYTE13(v53) = BYTE1(v37);
      BYTE14(v53) = BYTE2(v37) & 1;
      *(_QWORD *)&v50[0] = v33;
      *((_QWORD *)&v50[0] + 1) = v32;
      v49[0] = v38;
      (*(void (**)(__int128 *, _OWORD *, _QWORD *, uint64_t, uint64_t))(v34 + 64))(&v52, v50, v49, v47, v34);
      outlined consume of Image.NamedResolved?(v39, v35, v36);
      return outlined destroy of ImageResolutionContext(v46);
    }
    v31 = v47;
    v17 = v32;
  }
  (*(void (**)(__int128 *__return_ptr, uint64_t))(**(_QWORD **)(v29 + 16) + 80))(&v52, v25);
  v50[9] = v61;
  *(_OWORD *)v51 = v62[0];
  v50[4] = v56;
  v50[5] = v57;
  v50[6] = v58;
  *(_DWORD *)&v51[15] = *(_DWORD *)((char *)v62 + 15);
  v50[7] = v59;
  v50[8] = v60;
  v50[0] = v52;
  v50[1] = v53;
  v50[2] = v54;
  v50[3] = v55;
  v49[0] = v45;
  v49[1] = v17;
  v48 = v28;
  (*(void (**)(_OWORD *, _QWORD *, uint64_t *, uint64_t))(v44 + 56))(v50, v49, &v48, v31);
  outlined destroy of ImageResolutionContext(v25);
  return outlined release of Image.Resolved((uint64_t)&v52);
}

uint64_t AttachmentTextStorage.isEqual(to:)()
{
  uint64_t v0;
  uint64_t result;
  uint64_t v2;
  uint64_t (*v3)(uint64_t);
  uint64_t v4;
  char v5;

  result = swift_dynamicCastClass();
  if (result)
  {
    v2 = *(_QWORD *)(v0 + 16);
    if (v2 == *(_QWORD *)(result + 16))
    {
      return 1;
    }
    else
    {
      v3 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 96);
      swift_retain();
      v4 = swift_retain();
      v5 = v3(v4);
      swift_release();
      swift_release();
      return v5 & 1;
    }
  }
  return result;
}

void type metadata accessor for Text.Style?()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for Text.Style?)
  {
    type metadata accessor for Text.Style(255);
    v0 = type metadata accessor for Optional();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Text.Style?);
  }
}

uint64_t outlined consume of Image.NamedResolved?(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t result;

  if (a2)
  {
    swift_bridgeObjectRelease();
    outlined consume of Image.Location(a3);
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t static Text.DateStyle.timer(units:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_BYTE *)a2 = 4;
  *(_QWORD *)(a2 + 8) = result;
  *(_BYTE *)(a2 + 16) = 2;
  return result;
}

uint64_t Text.DateStyle.UnitsConfiguration.init(units:style:)@<X0>(uint64_t result@<X0>, char *a2@<X1>, uint64_t a3@<X8>)
{
  char v3;

  v3 = *a2;
  *(_QWORD *)a3 = result;
  *(_BYTE *)(a3 + 8) = v3;
  return result;
}

void one-time initialization function for time()
{
  static Text.DateStyle.time = 0;
  qword_2561A4E68 = 0;
  byte_2561A4E70 = 3;
}

uint64_t static Text.DateStyle.time.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  char v3;
  uint64_t result;

  if (one-time initialization token for time != -1)
    result = swift_once();
  v2 = qword_2561A4E68;
  v3 = byte_2561A4E70;
  *(_BYTE *)a1 = static Text.DateStyle.time;
  *(_QWORD *)(a1 + 8) = v2;
  *(_BYTE *)(a1 + 16) = v3;
  return result;
}

void one-time initialization function for date()
{
  static Text.DateStyle.date = 1;
  qword_2561B5C70 = 0;
  byte_2561B5C78 = 3;
}

uint64_t static Text.DateStyle.date.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  char v3;
  uint64_t result;

  if (one-time initialization token for date != -1)
    result = swift_once();
  v2 = qword_2561B5C70;
  v3 = byte_2561B5C78;
  *(_BYTE *)a1 = static Text.DateStyle.date;
  *(_QWORD *)(a1 + 8) = v2;
  *(_BYTE *)(a1 + 16) = v3;
  return result;
}

void one-time initialization function for relative()
{
  static Text.DateStyle.relative = 2;
  qword_2561B5C88 = 0;
  byte_2561B5C90 = 3;
}

uint64_t static Text.DateStyle.relative.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  char v3;
  uint64_t result;

  if (one-time initialization token for relative != -1)
    result = swift_once();
  v2 = qword_2561B5C88;
  v3 = byte_2561B5C90;
  *(_BYTE *)a1 = static Text.DateStyle.relative;
  *(_QWORD *)(a1 + 8) = v2;
  *(_BYTE *)(a1 + 16) = v3;
  return result;
}

void one-time initialization function for offset()
{
  static Text.DateStyle.offset = 3;
  qword_2561B5CA0 = 0;
  byte_2561B5CA8 = 3;
}

uint64_t static Text.DateStyle.offset.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  char v3;
  uint64_t result;

  if (one-time initialization token for offset != -1)
    result = swift_once();
  v2 = qword_2561B5CA0;
  v3 = byte_2561B5CA8;
  *(_BYTE *)a1 = static Text.DateStyle.offset;
  *(_QWORD *)(a1 + 8) = v2;
  *(_BYTE *)(a1 + 16) = v3;
  return result;
}

void one-time initialization function for timer()
{
  static Text.DateStyle.timer = 4;
  qword_2561B5CB8 = 0;
  byte_2561B5CC0 = 3;
}

uint64_t static Text.DateStyle.timer.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  char v3;
  uint64_t result;

  if (one-time initialization token for timer != -1)
    result = swift_once();
  v2 = qword_2561B5CB8;
  v3 = byte_2561B5CC0;
  *(_BYTE *)a1 = static Text.DateStyle.timer;
  *(_QWORD *)(a1 + 8) = v2;
  *(_BYTE *)(a1 + 16) = v3;
  return result;
}

uint64_t *static Text.DateStyle.relative(unitConfiguration:)@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  char v3;

  v2 = *result;
  v3 = *((_BYTE *)result + 8);
  *(_BYTE *)a2 = 2;
  *(_QWORD *)(a2 + 8) = v2;
  *(_BYTE *)(a2 + 16) = v3;
  return result;
}

unint64_t Text.DateStyle.UnitsConfiguration.Style.init(rawValue:)@<X0>(unint64_t result@<X0>, char *a2@<X8>)
{
  char v2;

  v2 = 3;
  if (result < 3)
    v2 = result;
  *a2 = v2;
  return result;
}

uint64_t Text.DateStyle.UnitsConfiguration.Style.rawValue.getter()
{
  unsigned __int8 *v0;

  return *v0;
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance Text.DateStyle.UnitsConfiguration.Style@<X0>(unint64_t *a1@<X0>, char *a2@<X8>)
{
  return Text.DateStyle.UnitsConfiguration.Style.init(rawValue:)(*a1, a2);
}

uint64_t protocol witness for Decodable.init(from:) in conformance Text.DateStyle.UnitsConfiguration.Style()
{
  lazy protocol witness table accessor for type Text.DateStyle.UnitsConfiguration.Style and conformance Text.DateStyle.UnitsConfiguration.Style();
  return RawRepresentable<>.init(from:)();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Text.DateStyle.UnitsConfiguration.Style()
{
  lazy protocol witness table accessor for type Text.DateStyle.UnitsConfiguration.Style and conformance Text.DateStyle.UnitsConfiguration.Style();
  return RawRepresentable<>.encode(to:)();
}

uint64_t property wrapper backing initializer of Text.DateStyle.UnitsConfiguration.units@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = result;
  return result;
}

uint64_t Text.DateStyle.UnitsConfiguration.units.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t Text.DateStyle.UnitsConfiguration.units.setter(uint64_t result)
{
  _QWORD *v1;

  *v1 = result;
  return result;
}

uint64_t (*Text.DateStyle.UnitsConfiguration.units.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

void Text.DateStyle.UnitsConfiguration.style.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 8);
}

_BYTE *Text.DateStyle.UnitsConfiguration.style.setter(_BYTE *result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 8) = *result;
  return result;
}

uint64_t (*Text.DateStyle.UnitsConfiguration.style.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

BOOL static Text.DateStyle.UnitsConfiguration.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)a1 == *(_QWORD *)a2
      && *(unsigned __int8 *)(a1 + 8) == (unint64_t)*(unsigned __int8 *)(a2 + 8);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance Text.DateStyle.UnitsConfiguration.CodingKeys()
{
  _BYTE *v0;

  if (*v0)
    return 0x656C797473;
  else
    return 0x7374696E75;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance Text.DateStyle.UnitsConfiguration.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = specialized Text.DateStyle.UnitsConfiguration.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Text.DateStyle.UnitsConfiguration.CodingKeys()
{
  lazy protocol witness table accessor for type Text.DateStyle.UnitsConfiguration.CodingKeys and conformance Text.DateStyle.UnitsConfiguration.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Text.DateStyle.UnitsConfiguration.CodingKeys()
{
  lazy protocol witness table accessor for type Text.DateStyle.UnitsConfiguration.CodingKeys and conformance Text.DateStyle.UnitsConfiguration.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t Text.DateStyle.UnitsConfiguration.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  int v12;
  uint64_t v13;
  char v14;
  char v15;
  char v16;
  uint64_t v17;

  type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for KeyedEncodingContainer<Text.DateStyle.UnitsConfiguration.CodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type Text.DateStyle.UnitsConfiguration.CodingKeys and conformance Text.DateStyle.UnitsConfiguration.CodingKeys, (uint64_t)&unk_250646BD0, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE3520]);
  v4 = v3;
  v5 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v7 = (char *)&v11 - v6;
  v8 = *v1;
  v12 = *((unsigned __int8 *)v1 + 8);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type Text.DateStyle.UnitsConfiguration.CodingKeys and conformance Text.DateStyle.UnitsConfiguration.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v17 = v8;
  v16 = 0;
  type metadata accessor for CodableRawRepresentable<NSCalendarUnit>();
  lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type CodableRawRepresentable<NSCalendarUnit> and conformance CodableRawRepresentable<A>, (uint64_t (*)(uint64_t))type metadata accessor for CodableRawRepresentable<NSCalendarUnit>, (uint64_t)")\x1B=\x1Bе\v");
  v9 = v13;
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v9)
  {
    v15 = v12;
    v14 = 1;
    lazy protocol witness table accessor for type Text.DateStyle.UnitsConfiguration.Style and conformance Text.DateStyle.UnitsConfiguration.Style();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t Text.DateStyle.UnitsConfiguration.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char v12;
  uint64_t v13;
  char v14;
  char v15;
  char v16;
  uint64_t v17;

  v13 = a2;
  type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for KeyedDecodingContainer<Text.DateStyle.UnitsConfiguration.CodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type Text.DateStyle.UnitsConfiguration.CodingKeys and conformance Text.DateStyle.UnitsConfiguration.CodingKeys, (uint64_t)&unk_250646BD0, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE33E0]);
  v5 = v4;
  v6 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v13 - v7;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type Text.DateStyle.UnitsConfiguration.CodingKeys and conformance Text.DateStyle.UnitsConfiguration.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    v9 = v13;
    type metadata accessor for CodableRawRepresentable<NSCalendarUnit>();
    v16 = 0;
    lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type CodableRawRepresentable<NSCalendarUnit> and conformance CodableRawRepresentable<A>, (uint64_t (*)(uint64_t))type metadata accessor for CodableRawRepresentable<NSCalendarUnit>, (uint64_t)&protocol conformance descriptor for CodableRawRepresentable<A>);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    v10 = v17;
    v14 = 1;
    lazy protocol witness table accessor for type Text.DateStyle.UnitsConfiguration.Style and conformance Text.DateStyle.UnitsConfiguration.Style();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    v12 = v15;
    *(_QWORD *)v9 = v10;
    *(_BYTE *)(v9 + 8) = v12;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance Text.DateStyle.UnitsConfiguration(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)a1 == *(_QWORD *)a2
      && *(unsigned __int8 *)(a1 + 8) == (unint64_t)*(unsigned __int8 *)(a2 + 8);
}

uint64_t protocol witness for Decodable.init(from:) in conformance Text.DateStyle.UnitsConfiguration@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return Text.DateStyle.UnitsConfiguration.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Text.DateStyle.UnitsConfiguration(_QWORD *a1)
{
  return Text.DateStyle.UnitsConfiguration.encode(to:)(a1);
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance Text.DateStyle.Storage@<X0>(unint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = specialized Text.DateStyle.Storage.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

void Text.DateStyle.unitConfiguration.getter(uint64_t a1@<X8>)
{
  uint64_t v1;
  char v2;

  v2 = *(_BYTE *)(v1 + 16);
  *(_QWORD *)a1 = *(_QWORD *)(v1 + 8);
  *(_BYTE *)(a1 + 8) = v2;
}

uint64_t Text.DateStyle.unitConfiguration.setter(uint64_t result)
{
  uint64_t v1;
  char v2;

  v2 = *(_BYTE *)(result + 8);
  *(_QWORD *)(v1 + 8) = *(_QWORD *)result;
  *(_BYTE *)(v1 + 16) = v2;
  return result;
}

uint64_t (*Text.DateStyle.unitConfiguration.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t Text.DateStyle.units.getter()
{
  unsigned __int8 *v0;
  int v1;
  uint64_t v2;
  BOOL v3;
  uint64_t v4;

  v1 = *v0;
  v2 = 252;
  if (v1 == 1)
    v2 = 28;
  v3 = v1 == 4;
  v4 = 224;
  if (!v3)
    v4 = v2;
  if (v0[16] == 3)
    return v4;
  else
    return *((_QWORD *)v0 + 1);
}

uint64_t Text.DateStyle.text(for:)(uint64_t a1)
{
  unsigned __int8 *v1;
  uint64_t (*v2)(uint64_t, uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  unsigned __int8 v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t result;
  _QWORD *v56;
  char *v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  char *v63;
  char *v64;
  char *v65;
  uint64_t (*v66)(char *, uint64_t);
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  void (*v77)(char *, uint64_t, uint64_t);
  void (*v78)(char *, _QWORD, uint64_t, uint64_t);
  char *v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  char *v88;
  char *v89;
  char *v90;
  uint64_t (*v91)(char *, uint64_t);
  uint64_t v92;
  uint64_t v93;
  char *v94;
  char *v95;
  uint64_t v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  char *v104;
  uint64_t v105;
  char *v106;
  char *v107;
  char *v108;
  char *v109;
  char *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  char *v115;
  uint64_t v116;
  uint64_t v117;
  char *v118;
  uint64_t v119;
  uint64_t v120;
  char *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  char *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  char *v129;
  uint64_t v130;
  uint64_t v131;
  char *v132;
  char *v133;
  char *v134;
  char *v135;
  char *v136;
  char *v137;
  uint64_t v138;
  char v139;
  uint64_t v140;
  unsigned __int8 v141;

  v138 = a1;
  v2 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
  type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for SystemFormatStyle.DateOffset?, (uint64_t (*)(uint64_t))type metadata accessor for SystemFormatStyle.DateOffset, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v3);
  v137 = (char *)&v102 - v4;
  type metadata accessor for TimeDataSource<Date><A>.DateStorage(0, &lazy cache variable for type metadata for TimeDataSource<Date><A>.DateStorage, (uint64_t (*)(_QWORD))type metadata accessor for TimeDataSource<A>.DateStorage);
  MEMORY[0x24BDAC7A8](v5);
  v136 = (char *)&v102 - v6;
  v7 = type metadata accessor for Date.FormatStyle.Symbol.Day();
  v127 = *(_QWORD *)(v7 - 8);
  v128 = v7;
  MEMORY[0x24BDAC7A8](v7);
  v125 = (char *)&v102 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Date.FormatStyle.Symbol.Month();
  v122 = *(_QWORD *)(v9 - 8);
  v123 = v9;
  MEMORY[0x24BDAC7A8](v9);
  v121 = (char *)&v102 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v120 = type metadata accessor for Date.FormatStyle.Symbol.Year();
  v119 = *(_QWORD *)(v120 - 8);
  MEMORY[0x24BDAC7A8](v120);
  v118 = (char *)&v102 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for Date();
  v130 = *(_QWORD *)(v12 - 8);
  v131 = v12;
  MEMORY[0x24BDAC7A8](v12);
  v129 = (char *)&v102 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v126 = type metadata accessor for Date.FormatStyle.Attributed();
  v124 = *(_QWORD *)(v126 - 8);
  MEMORY[0x24BDAC7A8](v126);
  v108 = (char *)&v102 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v117 = type metadata accessor for Date.FormatStyle.Symbol.Minute();
  v116 = *(_QWORD *)(v117 - 8);
  MEMORY[0x24BDAC7A8](v117);
  v115 = (char *)&v102 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v114 = type metadata accessor for Date.FormatStyle.Symbol.Hour.AMPMStyle();
  v111 = *(_QWORD *)(v114 - 8);
  MEMORY[0x24BDAC7A8](v114);
  v109 = (char *)&v102 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v113 = type metadata accessor for Date.FormatStyle.Symbol.Hour();
  v112 = *(_QWORD *)(v113 - 8);
  MEMORY[0x24BDAC7A8](v113);
  v110 = (char *)&v102 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for FormatStyleCapitalizationContext();
  MEMORY[0x24BDAC7A8](v18);
  v135 = (char *)&v102 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = type metadata accessor for TimeZone();
  MEMORY[0x24BDAC7A8](v20);
  v134 = (char *)&v102 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = type metadata accessor for Calendar();
  MEMORY[0x24BDAC7A8](v22);
  v133 = (char *)&v102 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = type metadata accessor for Locale();
  MEMORY[0x24BDAC7A8](v24);
  v132 = (char *)&v102 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for Date.FormatStyle.TimeStyle?, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDEE8], v2);
  MEMORY[0x24BDAC7A8](v26);
  v28 = (char *)&v102 - v27;
  type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for Date.FormatStyle.DateStyle?, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDF30], v2);
  MEMORY[0x24BDAC7A8](v29);
  v31 = (char *)&v102 - v30;
  v32 = type metadata accessor for Date.FormatStyle();
  v33 = *(char **)(v32 - 8);
  MEMORY[0x24BDAC7A8](v32);
  v35 = (char *)&v102 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v36);
  v38 = (char *)&v102 - v37;
  MEMORY[0x24BDAC7A8](v39);
  v41 = (char *)&v102 - v40;
  MEMORY[0x24BDAC7A8](v42);
  v44 = (char *)&v102 - v43;
  v45 = type metadata accessor for WhitespaceRemovingFormatStyle<Date.FormatStyle.Attributed, AttributeScopes.FoundationAttributes.DateFieldAttribute>();
  MEMORY[0x24BDAC7A8](v45);
  v48 = *v1;
  if ((v48 - 2) >= 3)
  {
    v103 = v35;
    v104 = v28;
    v106 = v38;
    v107 = v41;
    v136 = v33;
    v137 = v44;
    v105 = v32;
    if (v48)
    {
      v84 = type metadata accessor for Date.FormatStyle.DateStyle();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v84 - 8) + 56))(v31, 1, 1, v84);
      v85 = type metadata accessor for Date.FormatStyle.TimeStyle();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v85 - 8) + 56))(v104, 1, 1, v85);
      static Locale.autoupdatingCurrent.getter();
      static Calendar.autoupdatingCurrent.getter();
      v86 = static TimeZone.autoupdatingCurrent.getter();
      MEMORY[0x23B7C4858](v86);
      v87 = v103;
      Date.FormatStyle.init(date:time:locale:calendar:timeZone:capitalizationContext:)();
      v88 = v118;
      static Date.FormatStyle.Symbol.Year.defaultDigits.getter();
      v89 = v106;
      Date.FormatStyle.year(_:)();
      (*(void (**)(char *, uint64_t))(v119 + 8))(v88, v120);
      v90 = v136;
      v91 = (uint64_t (*)(char *, uint64_t))*((_QWORD *)v136 + 1);
      v92 = v105;
      v93 = v91(v87, v105);
      v94 = v121;
      MEMORY[0x23B7C4C6C](v93);
      v95 = v107;
      Date.FormatStyle.month(_:)();
      (*(void (**)(char *, uint64_t))(v122 + 8))(v94, v123);
      v96 = v91(v89, v92);
      v97 = v125;
      MEMORY[0x23B7C4B4C](v96);
      v98 = (uint64_t)v137;
      Date.FormatStyle.day(_:)();
      (*(void (**)(char *, uint64_t))(v127 + 8))(v97, v128);
      v91(v95, v92);
      v100 = v129;
      v99 = v130;
      v101 = v131;
      (*(void (**)(char *, uint64_t, uint64_t))(v130 + 16))(v129, v138, v131);
      type metadata accessor for FormatStyleStorage();
      v56 = (_QWORD *)swift_allocObject();
      type metadata accessor for FormatStyleBox<Date.FormatStyle>();
      v83 = swift_allocObject();
      (*(void (**)(uint64_t, char *, uint64_t))(v99 + 32))(v83 + *(_QWORD *)(*(_QWORD *)v83 + 136), v100, v101);
      (*((void (**)(uint64_t, uint64_t, uint64_t))v90 + 4))(v83 + *(_QWORD *)(*(_QWORD *)v83 + 144), v98, v92);
    }
    else
    {
      v58 = (char *)&v102 - ((v47 + 15) & 0xFFFFFFFFFFFFFFF0);
      v128 = v46;
      v59 = type metadata accessor for Date.FormatStyle.DateStyle();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v59 - 8) + 56))(v31, 1, 1, v59);
      v60 = type metadata accessor for Date.FormatStyle.TimeStyle();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v60 - 8) + 56))(v104, 1, 1, v60);
      static Locale.autoupdatingCurrent.getter();
      static Calendar.autoupdatingCurrent.getter();
      v61 = static TimeZone.autoupdatingCurrent.getter();
      MEMORY[0x23B7C4858](v61);
      v62 = v106;
      Date.FormatStyle.init(date:time:locale:calendar:timeZone:capitalizationContext:)();
      v63 = v109;
      static Date.FormatStyle.Symbol.Hour.AMPMStyle.abbreviated.getter();
      v64 = v110;
      static Date.FormatStyle.Symbol.Hour.defaultDigits(amPM:)();
      (*(void (**)(char *, uint64_t))(v111 + 8))(v63, v114);
      v65 = v107;
      Date.FormatStyle.hour(_:)();
      (*(void (**)(char *, uint64_t))(v112 + 8))(v64, v113);
      v66 = (uint64_t (*)(char *, uint64_t))*((_QWORD *)v136 + 1);
      v67 = v105;
      v68 = v66(v62, v105);
      v69 = v115;
      MEMORY[0x23B7C4C90](v68);
      v70 = (uint64_t)v137;
      Date.FormatStyle.minute(_:)();
      (*(void (**)(char *, uint64_t))(v116 + 8))(v69, v117);
      v66(v65, v67);
      v71 = v108;
      Date.FormatStyle.attributedStyle.getter();
      v66((char *)v70, v67);
      v72 = v128;
      v73 = &v58[*(int *)(v128 + 76)];
      v74 = *MEMORY[0x24BDCC108];
      v75 = type metadata accessor for AttributeScopes.FoundationAttributes.DateFieldAttribute.Field();
      v76 = *(_QWORD *)(v75 - 8);
      v77 = *(void (**)(char *, uint64_t, uint64_t))(v76 + 104);
      v77(v73, v74, v75);
      v78 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v76 + 56);
      v78(v73, 0, 1, v75);
      v79 = &v58[*(int *)(v72 + 80)];
      v77(v79, *MEMORY[0x24BDCC0E8], v75);
      v78(v79, 0, 1, v75);
      (*(void (**)(char *, char *, uint64_t))(v124 + 32))(v58, v71, v126);
      v81 = v129;
      v80 = v130;
      v82 = v131;
      (*(void (**)(char *, uint64_t, uint64_t))(v130 + 16))(v129, v138, v131);
      type metadata accessor for FormatStyleStorage();
      v56 = (_QWORD *)swift_allocObject();
      type metadata accessor for FormatStyleBox<WhitespaceRemovingFormatStyle<Date.FormatStyle.Attributed, AttributeScopes.FoundationAttributes.DateFieldAttribute>>();
      v83 = swift_allocObject();
      (*(void (**)(uint64_t, char *, uint64_t))(v80 + 32))(v83 + *(_QWORD *)(*(_QWORD *)v83 + 136), v81, v82);
      outlined init with take of LocalizedStringKey.FormatArgument((uint64_t)v58, v83 + *(_QWORD *)(*(_QWORD *)v83 + 144), (uint64_t (*)(_QWORD))type metadata accessor for WhitespaceRemovingFormatStyle<Date.FormatStyle.Attributed, AttributeScopes.FoundationAttributes.DateFieldAttribute>);
    }
    v56[2] = v83;
    return (uint64_t)v56;
  }
  v49 = v1[16];
  v50 = *((_QWORD *)v1 + 1);
  type metadata accessor for TimeDataSource<Date><A>.DateStorage(0, &lazy cache variable for type metadata for (pauseDate: Date), (uint64_t (*)(_QWORD))MEMORY[0x24BDCE900]);
  v52 = (uint64_t)v136;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v51 - 8) + 56))(v136, 1, 1, v51);
  v139 = v48;
  v140 = v50;
  v141 = v49;
  v53 = (uint64_t)v137;
  Text.DateStyle.format(for:)(v138, (uint64_t)v137);
  v54 = type metadata accessor for SystemFormatStyle.DateOffset();
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v54 - 8) + 48))(v53, 1, v54);
  if ((_DWORD)result != 1)
  {
    type metadata accessor for TimeDataFormattingStorage<TimeDataSource<Date><A>.DateStorage, SystemFormatStyle.Timer>(0, &lazy cache variable for type metadata for TimeDataFormattingStorage<TimeDataSource<Date><A>.DateStorage, SystemFormatStyle.DateOffset>, (uint64_t (*)(uint64_t))type metadata accessor for SystemFormatStyle.DateOffset, &lazy protocol witness table cache variable for type SystemFormatStyle.DateOffset and conformance SystemFormatStyle.DateOffset, (uint64_t)&protocol conformance descriptor for SystemFormatStyle.DateOffset);
    v56 = (_QWORD *)swift_allocObject();
    v57 = (char *)v56 + *(_QWORD *)(*v56 + 192);
    *(_QWORD *)v57 = 0;
    v57[8] = 1;
    outlined init with take of TimeDataSource<Date><A>.DateStorage(v52, (uint64_t)v56 + *(_QWORD *)(*v56 + 176));
    outlined init with take of LocalizedStringKey.FormatArgument(v53, (uint64_t)v56 + *(_QWORD *)(*v56 + 184), (uint64_t (*)(_QWORD))type metadata accessor for SystemFormatStyle.DateOffset);
    *(_QWORD *)v57 = 0;
    v57[8] = 1;
    return (uint64_t)v56;
  }
  __break(1u);
  return result;
}

uint64_t Text.DateStyle.format(for:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unsigned __int8 *v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  int *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  double v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _BOOL8 v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;

  v63 = a1;
  v4 = type metadata accessor for NumberFormatStyleConfiguration.SignDisplayStrategy();
  v64 = *(_QWORD *)(v4 - 8);
  v65 = v4;
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v56 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v56 - v8;
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v56 - v11;
  v13 = (int *)type metadata accessor for SystemFormatStyle.DateOffset();
  MEMORY[0x24BDAC7A8](v13);
  v15 = (char *)&v56 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v16);
  MEMORY[0x24BDAC7A8](v17);
  v19 = (char *)&v56 - v18;
  MEMORY[0x24BDAC7A8](v20);
  v22 = (char *)&v56 - v21;
  v26 = MEMORY[0x24BDAC7A8](v23);
  v62 = (uint64_t)&v56 - v27;
  v28 = *v2;
  if (v28 < 2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, int *, double))(v24 + 56))(a2, 1, 1, v13, v26);
  v60 = v24;
  v61 = a2;
  v29 = *((_QWORD *)v2 + 1);
  v30 = v2[16];
  v59 = v2[16];
  if (v28 - 2 >= 2)
  {
    type metadata accessor for [(_:)](0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Date.ComponentsFormatStyle.Field>, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE6C8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
    type metadata accessor for Date.ComponentsFormatStyle.Field();
    v33 = swift_allocObject();
    *(_OWORD *)(v33 + 16) = xmmword_235283260;
    static Date.ComponentsFormatStyle.Style.spellOut.getter();
    static Date.ComponentsFormatStyle.Field.minute.getter();
    static Date.ComponentsFormatStyle.Field.second.getter();
    v34 = specialized Set.init(_nonEmptyArrayLiteral:)(v33);
    swift_setDeallocating();
    swift_arrayDestroy();
    swift_deallocClassInstance();
    if ((_DWORD)v59 != 3)
    {
      v35 = specialized Set<>.init(_:)(v29, 0);
      v34 = specialized _NativeSet.intersection(_:)(v35, v34);
      swift_bridgeObjectRelease();
    }
    v36 = *(_QWORD *)(v34 + 16);
    static NumberFormatStyleConfiguration.SignDisplayStrategy.never.getter();
    v37 = type metadata accessor for Date();
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v37 - 8) + 16))(v22, v63, v37);
    v39 = v64;
    v38 = v65;
    (*(void (**)(char *, char *, uint64_t))(v64 + 16))(&v22[v13[7]], v12, v65);
    *(_QWORD *)&v22[v13[8]] = 0;
    swift_bridgeObjectRetain();
    static Locale.autoupdatingCurrent.getter();
    static Calendar.autoupdatingCurrent.getter();
    swift_bridgeObjectRelease();
    v22[v13[11]] = 0;
    v22[v13[12]] = 0;
    v22[v13[13]] = 0;
    *(_QWORD *)&v22[v13[5]] = v34;
    *(_QWORD *)&v22[v13[6]] = v36;
    (*(void (**)(char *, uint64_t))(v39 + 8))(v12, v38);
    v40 = v62;
    outlined init with take of LocalizedStringKey.FormatArgument((uint64_t)v22, v62, (uint64_t (*)(_QWORD))type metadata accessor for SystemFormatStyle.DateOffset);
    *(_BYTE *)(v40 + v13[13]) = 1;
  }
  else
  {
    v58 = v25;
    if (v30 == 3)
    {
      v31 = 1;
      if (v28 == 2)
        v31 = 2;
      v57 = v31;
      if (v28 == 2)
        static NumberFormatStyleConfiguration.SignDisplayStrategy.never.getter();
      else
        static NumberFormatStyleConfiguration.SignDisplayStrategy.always(includingZero:)();
      type metadata accessor for [(_:)](0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Date.ComponentsFormatStyle.Field>, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE6C8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
      type metadata accessor for Date.ComponentsFormatStyle.Field();
      v43 = swift_allocObject();
      *(_OWORD *)(v43 + 16) = xmmword_235283240;
      static Date.ComponentsFormatStyle.Style.wide.getter();
      static Date.ComponentsFormatStyle.Style.narrow.getter();
      static Date.ComponentsFormatStyle.Style.condensedAbbreviated.getter();
      static Date.ComponentsFormatStyle.Style.spellOut.getter();
      static Date.ComponentsFormatStyle.Field.minute.getter();
      static Date.ComponentsFormatStyle.Field.second.getter();
      v44 = specialized Set.init(_nonEmptyArrayLiteral:)(v43);
      swift_setDeallocating();
      swift_arrayDestroy();
      swift_deallocClassInstance();
      v45 = type metadata accessor for Date();
      (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v45 - 8) + 16))(v19, v63, v45);
      v47 = v64;
      v46 = v65;
      (*(void (**)(char *, char *, uint64_t))(v64 + 16))(&v19[v13[7]], v6, v65);
      *(_QWORD *)&v19[v13[8]] = 0;
      swift_bridgeObjectRetain();
      static Locale.autoupdatingCurrent.getter();
      static Calendar.autoupdatingCurrent.getter();
      swift_bridgeObjectRelease();
      v19[v13[11]] = 0;
      v19[v13[12]] = 0;
      v19[v13[13]] = 0;
      *(_QWORD *)&v19[v13[5]] = v44;
      *(_QWORD *)&v19[v13[6]] = v57;
      (*(void (**)(char *, uint64_t))(v47 + 8))(v6, v46);
      v48 = 0;
      v49 = v59;
    }
    else
    {
      v41 = specialized Set<>.init(_:)(v29, 0);
      if (v28 == 2)
        v42 = 2;
      else
        v42 = 1;
      if (v28 == 2)
        static NumberFormatStyleConfiguration.SignDisplayStrategy.never.getter();
      else
        static NumberFormatStyleConfiguration.SignDisplayStrategy.always(includingZero:)();
      v50 = type metadata accessor for Date();
      (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v50 - 8) + 16))(v19, v63, v50);
      v52 = v64;
      v51 = v65;
      (*(void (**)(char *, char *, uint64_t))(v64 + 16))(&v19[v13[7]], v9, v65);
      *(_QWORD *)&v19[v13[8]] = 0;
      swift_bridgeObjectRetain();
      static Locale.autoupdatingCurrent.getter();
      static Calendar.autoupdatingCurrent.getter();
      swift_bridgeObjectRelease();
      v19[v13[11]] = 0;
      v19[v13[12]] = 0;
      v19[v13[13]] = 0;
      *(_QWORD *)&v19[v13[5]] = v41;
      *(_QWORD *)&v19[v13[6]] = v42;
      (*(void (**)(char *, uint64_t))(v52 + 8))(v9, v51);
      v49 = v59;
      v48 = 2 - v59;
    }
    outlined init with copy of TypesettingLanguage((uint64_t)v19, (uint64_t)v15, (uint64_t (*)(_QWORD))type metadata accessor for SystemFormatStyle.DateOffset);
    if (v49 == 3)
      v53 = v28 == 2;
    else
      v53 = v48;
    v54 = v58;
    specialized FormatStyle.exactSizeVariant(_:)(v58, v53);
    outlined destroy of TypesettingConfiguration((uint64_t)v15, (uint64_t (*)(_QWORD))type metadata accessor for SystemFormatStyle.DateOffset);
    outlined destroy of TypesettingConfiguration((uint64_t)v19, (uint64_t (*)(_QWORD))type metadata accessor for SystemFormatStyle.DateOffset);
    v40 = v62;
    outlined init with take of LocalizedStringKey.FormatArgument(v54, v62, (uint64_t (*)(_QWORD))type metadata accessor for SystemFormatStyle.DateOffset);
  }
  v55 = v61;
  outlined init with take of LocalizedStringKey.FormatArgument(v40, v61, (uint64_t (*)(_QWORD))type metadata accessor for SystemFormatStyle.DateOffset);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, int *))(v60 + 56))(v55, 0, 1, v13);
}

uint64_t Text.init(_:style:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = Text.DateStyle.text(for:)(a1);
  v3 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  return v2;
}

uint64_t Text.init(dateFormat:timeZone:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  type metadata accessor for DateTextStorage(0);
  v6 = swift_allocObject();
  v7 = v6 + OBJC_IVAR____TtC7SwiftUIP33_AEE0E21EC7C6B2D1204F94F94CBF738915DateTextStorage_storage;
  type metadata accessor for (dateFormat: ResolvableCurrentDate.DateFormat, timeZone: TimeZone?)();
  v9 = v7 + *(int *)(v8 + 48);
  *(_QWORD *)v7 = a1;
  *(_QWORD *)(v7 + 8) = a2;
  *(_BYTE *)(v7 + 16) = 0;
  outlined init with take of TimeZone?(a3, v9);
  type metadata accessor for DateTextStorage.Storage(0);
  swift_storeEnumTagMultiPayload();
  return v6;
}

uint64_t Text.init(dateFormatTemplate:timeZone:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  type metadata accessor for DateTextStorage(0);
  v6 = swift_allocObject();
  v7 = v6 + OBJC_IVAR____TtC7SwiftUIP33_AEE0E21EC7C6B2D1204F94F94CBF738915DateTextStorage_storage;
  type metadata accessor for (dateFormat: ResolvableCurrentDate.DateFormat, timeZone: TimeZone?)();
  v9 = v7 + *(int *)(v8 + 48);
  *(_QWORD *)v7 = a1;
  *(_QWORD *)(v7 + 8) = a2;
  *(_BYTE *)(v7 + 16) = 1;
  outlined init with take of TimeZone?(a3, v9);
  type metadata accessor for DateTextStorage.Storage(0);
  swift_storeEnumTagMultiPayload();
  return v6;
}

uint64_t Text.init(timerInterval:pauseTime:countsDown:showsHours:)(uint64_t a1, uint64_t a2, int a3, int a4)
{
  uint64_t (*v8)(uint64_t);
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  _BYTE v17[16];

  v8 = (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900];
  type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for Date?, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v9);
  v11 = &v17[-v10];
  type metadata accessor for ClosedRange<Date>();
  MEMORY[0x24BDAC7A8](v12);
  v14 = &v17[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  outlined init with copy of TypesettingLanguage(a1, (uint64_t)v14, (uint64_t (*)(_QWORD))type metadata accessor for ClosedRange<Date>);
  outlined init with copy of TimeZone?(a2, (uint64_t)v11, &lazy cache variable for type metadata for Date?, v8);
  v15 = specialized Text.init(timerInterval:pauseTime:countsDown:showsHours:animateSecondCounting:)((uint64_t)v14, (uint64_t)v11, a3, a4);
  outlined destroy of (style: Duration.TimeFormatStyle.Attributed, smallestField: Date.ComponentsFormatStyle.Field)?(a2, &lazy cache variable for type metadata for Date?, v8);
  outlined destroy of TypesettingConfiguration(a1, (uint64_t (*)(_QWORD))type metadata accessor for ClosedRange<Date>);
  return v15;
}

uint64_t Text.init(interval:pauseAt:countdown:units:)(uint64_t a1, uint64_t a2, char a3, int a4, uint64_t a5, char a6)
{
  char v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  double v19;
  uint64_t v20;
  char *v21;
  void (*v22)(char *, uint64_t, uint64_t, double);
  uint64_t v23;
  uint64_t v24;
  uint64_t v26[2];

  v26[0] = a5;
  v9 = a3 & 1;
  v10 = a6 & 1;
  v11 = type metadata accessor for Date();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v11);
  v14 = (char *)v26 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v15);
  v17 = (char *)v26 - v16;
  v18 = type metadata accessor for DateInterval();
  v19 = MEMORY[0x24BDAC7A8](v18);
  v21 = (char *)v26 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = *(void (**)(char *, uint64_t, uint64_t, double))(v12 + 16);
  v22(v17, a1, v11, v19);
  type metadata accessor for ClosedRange<Date>();
  ((void (*)(char *, uint64_t, uint64_t))v22)(v14, a1 + *(int *)(v23 + 36), v11);
  DateInterval.init(start:end:)();
  v24 = specialized Text.init(interval:pauseAt:countdown:units:)((uint64_t)v21, a2, v9, a4, v26[0], v10);
  outlined destroy of TypesettingConfiguration(a1, (uint64_t (*)(_QWORD))type metadata accessor for ClosedRange<Date>);
  return v24;
}

{
  return specialized Text.init(interval:pauseAt:countdown:units:)(a1, a2, a3 & 1, a4, a5, a6 & 1);
}

uint64_t LocalizedStringKey.StringInterpolation.appendInterpolation(_:style:)(uint64_t a1, char *a2)
{
  uint64_t v4;
  uint64_t v5;
  double v6;
  uint64_t v7;
  _BYTE *v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  char v13;
  _BYTE v15[16];
  uint64_t v16;
  char v17;

  v4 = type metadata accessor for Date();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x24BDAC7A8](v4);
  v8 = &v15[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v9 = *a2;
  v10 = *((_QWORD *)a2 + 1);
  LOBYTE(a2) = a2[16];
  (*(void (**)(_BYTE *, uint64_t, uint64_t, double))(v5 + 16))(v8, a1, v4, v6);
  v15[8] = v9;
  v16 = v10;
  v17 = (char)a2;
  v11 = Text.DateStyle.text(for:)((uint64_t)v8);
  v13 = v12 & 1;
  (*(void (**)(_BYTE *, uint64_t))(v5 + 8))(v8, v4);
  LocalizedStringKey.StringInterpolation.appendInterpolation(_:)(v11, 0, v13, MEMORY[0x24BEE4AF8]);
  outlined consume of Text.Storage(v11, 0, v13);
  return swift_bridgeObjectRelease();
}

uint64_t LocalizedStringKey.StringInterpolation.appendInterpolation(interval:pauseAt:countdown:units:)(uint64_t a1, uint64_t a2, char a3, int a4, uint64_t a5, char a6)
{
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  void (*v22)(char *, char *, uint64_t);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v30;
  uint64_t v31;
  int v32;
  int v33;
  uint64_t v34;

  v34 = a5;
  v31 = a2;
  v7 = a3 & 1;
  v32 = a6 & 1;
  v33 = a4;
  v8 = type metadata accessor for Date();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v30 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)&v30 - v13;
  v15 = type metadata accessor for DateInterval();
  MEMORY[0x24BDAC7A8](v15);
  v17 = (char *)&v30 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for ClosedRange<Date>();
  v19 = v18;
  MEMORY[0x24BDAC7A8](v18);
  v21 = (char *)&v30 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of TypesettingLanguage(a1, (uint64_t)v21, (uint64_t (*)(_QWORD))type metadata accessor for ClosedRange<Date>);
  v22 = *(void (**)(char *, char *, uint64_t))(v9 + 16);
  v22(v14, v21, v8);
  v22(v11, &v21[*(int *)(v19 + 36)], v8);
  DateInterval.init(start:end:)();
  v23 = specialized Text.init(interval:pauseAt:countdown:units:)((uint64_t)v17, v31, v7, v33, v34, v32);
  v25 = v24;
  v27 = v26;
  LOBYTE(v8) = v28 & 1;
  outlined destroy of TypesettingConfiguration((uint64_t)v21, (uint64_t (*)(_QWORD))type metadata accessor for ClosedRange<Date>);
  LocalizedStringKey.StringInterpolation.appendInterpolation(_:)(v23, v25, v8, v27);
  outlined consume of Text.Storage(v23, v25, v8);
  return swift_bridgeObjectRelease();
}

{
  char v10;
  char v11;
  uint64_t v12;
  double v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v23;

  v10 = a3 & 1;
  v11 = a6 & 1;
  v12 = type metadata accessor for DateInterval();
  v13 = MEMORY[0x24BDAC7A8](v12);
  v15 = (char *)&v23 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, double))(v16 + 16))(v15, a1, v13);
  v17 = specialized Text.init(interval:pauseAt:countdown:units:)((uint64_t)v15, a2, v10, a4, a5, v11);
  v19 = v18;
  LOBYTE(a1) = v20 & 1;
  LocalizedStringKey.StringInterpolation.appendInterpolation(_:)(v17, v18, v20 & 1, v21);
  outlined consume of Text.Storage(v17, v19, a1);
  return swift_bridgeObjectRelease();
}

uint64_t LocalizedStringKey.StringInterpolation.appendInterpolation(timerInterval:pauseTime:countsDown:showsHours:)(uint64_t a1, uint64_t a2, int a3, int a4)
{
  uint64_t (*v7)(uint64_t);
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  _BYTE v27[12];
  int v28;

  v28 = a4;
  v7 = (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900];
  type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for Date?, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v8);
  v10 = &v27[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v11);
  v13 = &v27[-v12];
  type metadata accessor for ClosedRange<Date>();
  MEMORY[0x24BDAC7A8](v14);
  v16 = &v27[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v17);
  v19 = &v27[-v18];
  outlined init with copy of TypesettingLanguage(a1, (uint64_t)&v27[-v18], (uint64_t (*)(_QWORD))type metadata accessor for ClosedRange<Date>);
  outlined init with copy of TimeZone?(a2, (uint64_t)v13, &lazy cache variable for type metadata for Date?, v7);
  outlined init with copy of TypesettingLanguage((uint64_t)v19, (uint64_t)v16, (uint64_t (*)(_QWORD))type metadata accessor for ClosedRange<Date>);
  outlined init with copy of TimeZone?((uint64_t)v13, (uint64_t)v10, &lazy cache variable for type metadata for Date?, v7);
  v20 = specialized Text.init(timerInterval:pauseTime:countsDown:showsHours:animateSecondCounting:)((uint64_t)v16, (uint64_t)v10, a3, v28);
  v22 = v21;
  v24 = v23;
  LOBYTE(v10) = v25 & 1;
  outlined destroy of (style: Duration.TimeFormatStyle.Attributed, smallestField: Date.ComponentsFormatStyle.Field)?((uint64_t)v13, &lazy cache variable for type metadata for Date?, v7);
  outlined destroy of TypesettingConfiguration((uint64_t)v19, (uint64_t (*)(_QWORD))type metadata accessor for ClosedRange<Date>);
  LocalizedStringKey.StringInterpolation.appendInterpolation(_:)(v20, v22, (char)v10, v24);
  outlined consume of Text.Storage(v20, v22, (char)v10);
  return swift_bridgeObjectRelease();
}

uint64_t Text.init(progressInterval:countsDown:)(uint64_t a1, char a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  type metadata accessor for DateTextStorage(0);
  v4 = swift_allocObject();
  v5 = v4 + OBJC_IVAR____TtC7SwiftUIP33_AEE0E21EC7C6B2D1204F94F94CBF738915DateTextStorage_storage;
  type metadata accessor for (interval: ClosedRange<Date>, countdown: Bool)();
  v7 = *(int *)(v6 + 48);
  outlined init with take of LocalizedStringKey.FormatArgument(a1, v5, (uint64_t (*)(_QWORD))type metadata accessor for ClosedRange<Date>);
  *(_BYTE *)(v5 + v7) = a2;
  type metadata accessor for DateTextStorage.Storage(0);
  swift_storeEnumTagMultiPayload();
  return v4;
}

uint64_t View.referenceDate(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v10;

  v6 = type metadata accessor for ReferenceDateModifier(0);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of TimeZone?(a1, (uint64_t)v8, &lazy cache variable for type metadata for Date?, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900]);
  View.modifier<A>(_:)(v8, a2, v6, a3);
  return outlined destroy of TypesettingConfiguration((uint64_t)v8, type metadata accessor for ReferenceDateModifier);
}

uint64_t static ReferenceDateInput.defaultValue.getter()
{
  return 0;
}

uint64_t ReferenceDateModifier.date.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of TimeZone?(v1, a1, &lazy cache variable for type metadata for Date?, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900]);
}

uint64_t ReferenceDateModifier.date.setter(uint64_t a1)
{
  uint64_t v1;

  return outlined assign with take of Date?(a1, v1);
}

uint64_t (*ReferenceDateModifier.date.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t DateTextStorage.resolve<A>(into:in:with:)(uint64_t a1, uint64_t *a2, _QWORD *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t (*v29)(_QWORD);
  int EnumCaseMultiPayload;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  void (*v41)(uint64_t, uint64_t *, _QWORD *, uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v42;
  uint64_t v44;
  void (*v45)(char *, uint64_t *, uint64_t *, uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v46;
  uint64_t v47;
  char v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  void (*v55)(uint64_t, uint64_t *, _QWORD *, uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char v74;
  uint64_t v75;
  int v76;
  __int16 v77;
  char v78;
  _QWORD v79[2];

  v65 = a3;
  v68 = a4;
  v69 = a5;
  v67 = a1;
  v63 = type metadata accessor for ResolvableProgress();
  MEMORY[0x24BDAC7A8](v63);
  v64 = (uint64_t)&v57 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for ClosedRange<Date>();
  MEMORY[0x24BDAC7A8](v7);
  v61 = (uint64_t)&v57 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v60 = type metadata accessor for ResolvableCurrentDate();
  MEMORY[0x24BDAC7A8](v60);
  v62 = (uint64_t)&v57 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for TimeZone?, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v57 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v13);
  v59 = (uint64_t)&v57 - v14;
  v58 = type metadata accessor for ResolvableDateInterval();
  MEMORY[0x24BDAC7A8](v58);
  v16 = (char *)&v57 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for DateInterval();
  v18 = *(_QWORD *)(v17 - 8);
  MEMORY[0x24BDAC7A8](v17);
  v20 = (char *)&v57 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v21);
  v23 = (char *)&v57 - v22;
  v24 = type metadata accessor for DateTextStorage.Storage(0);
  MEMORY[0x24BDAC7A8](v24);
  v26 = (char *)&v57 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = *a2;
  v28 = a2[1];
  v65 = (_QWORD *)*v65;
  outlined init with copy of TypesettingLanguage(v66 + OBJC_IVAR____TtC7SwiftUIP33_AEE0E21EC7C6B2D1204F94F94CBF738915DateTextStorage_storage, (uint64_t)v26, v29);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      v31 = *(_QWORD *)v26;
      v32 = *((_QWORD *)v26 + 1);
      v33 = v26[16];
      type metadata accessor for (dateFormat: ResolvableCurrentDate.DateFormat, timeZone: TimeZone?)();
      v35 = (uint64_t)&v26[*(int *)(v34 + 48)];
      v36 = v59;
      outlined init with take of TimeZone?(v35, v59);
      v72 = v31;
      v73 = v32;
      v74 = v33;
      outlined init with copy of TimeZone?(v36, (uint64_t)v12, &lazy cache variable for type metadata for TimeZone?, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510]);
      v70 = v27;
      v71 = v28;
      swift_retain();
      swift_retain();
      v37 = v62;
      ResolvableCurrentDate.init(dateFormat:timeZone:in:)((uint64_t)&v72, (uint64_t)v12, &v70, v62);
      v72 = v27;
      v73 = v28;
      v79[0] = v65;
      defaultContentTransition #1 <A>(_:) in DateTextStorage.resolve<A>(into:in:with:)(0, (uint64_t)&v70);
      v39 = v69;
      v38 = v70;
      v40 = v71 | ((unint64_t)(WORD2(v71) | (BYTE6(v71) << 16)) << 32);
      v75 = v70;
      v76 = v71;
      v78 = BYTE6(v71);
      v77 = WORD2(v71);
      v41 = *(void (**)(uint64_t, uint64_t *, _QWORD *, uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t))(v69 + 72);
      v42 = lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type ResolvableCurrentDate and conformance ResolvableCurrentDate, (uint64_t (*)(uint64_t))type metadata accessor for ResolvableCurrentDate, (uint64_t)&protocol conformance descriptor for ResolvableCurrentDate);
      v41(v37, &v72, v79, &v75, v60, v42, v68, v39);
      outlined consume of ContentTransition?(v38, v40);
      outlined destroy of TypesettingConfiguration(v37, (uint64_t (*)(_QWORD))type metadata accessor for ResolvableCurrentDate);
      return outlined destroy of (style: Duration.TimeFormatStyle.Attributed, smallestField: Date.ComponentsFormatStyle.Field)?(v36, &lazy cache variable for type metadata for TimeZone?, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510]);
    }
    else
    {
      type metadata accessor for (interval: ClosedRange<Date>, countdown: Bool)();
      v48 = v26[*(int *)(v47 + 48)];
      v49 = v61;
      outlined init with take of LocalizedStringKey.FormatArgument((uint64_t)v26, v61, (uint64_t (*)(_QWORD))type metadata accessor for ClosedRange<Date>);
      v50 = v64;
      outlined init with copy of TypesettingLanguage(v49, v64, (uint64_t (*)(_QWORD))type metadata accessor for ClosedRange<Date>);
      v51 = v63;
      *(_BYTE *)(v50 + *(int *)(v63 + 20)) = v48;
      v72 = v27;
      v73 = v28;
      v79[0] = v65;
      defaultContentTransition #1 <A>(_:) in DateTextStorage.resolve<A>(into:in:with:)(v48, (uint64_t)&v70);
      v53 = v69;
      v52 = v70;
      v54 = v71 | ((unint64_t)(WORD2(v71) | (BYTE6(v71) << 16)) << 32);
      v75 = v70;
      v76 = v71;
      v78 = BYTE6(v71);
      v77 = WORD2(v71);
      v55 = *(void (**)(uint64_t, uint64_t *, _QWORD *, uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t))(v69 + 72);
      v56 = lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type ResolvableProgress and conformance ResolvableProgress, (uint64_t (*)(uint64_t))type metadata accessor for ResolvableProgress, (uint64_t)&protocol conformance descriptor for ResolvableProgress);
      v55(v50, &v72, v79, &v75, v51, v56, v68, v53);
      outlined consume of ContentTransition?(v52, v54);
      outlined destroy of TypesettingConfiguration(v50, (uint64_t (*)(_QWORD))type metadata accessor for ResolvableProgress);
      return outlined destroy of TypesettingConfiguration(v49, (uint64_t (*)(_QWORD))type metadata accessor for ClosedRange<Date>);
    }
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v18 + 32))(v23, v26, v17);
    (*(void (**)(char *, char *, uint64_t))(v18 + 16))(v20, v23, v17);
    v72 = v27;
    v73 = v28;
    swift_retain();
    swift_retain();
    ResolvableDateInterval.init(_:in:)((uint64_t)v20, &v72, (uint64_t)v16);
    v72 = v27;
    v73 = v28;
    v75 = (uint64_t)v65;
    v70 = 0;
    BYTE6(v71) = 2;
    WORD2(v71) = 0;
    LODWORD(v71) = 0;
    v44 = v69;
    v45 = *(void (**)(char *, uint64_t *, uint64_t *, uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t))(v69 + 72);
    v46 = lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type ResolvableDateInterval and conformance ResolvableDateInterval, (uint64_t (*)(uint64_t))type metadata accessor for ResolvableDateInterval, (uint64_t)&protocol conformance descriptor for ResolvableDateInterval);
    v45(v16, &v72, &v75, &v70, v58, v46, v68, v44);
    outlined destroy of TypesettingConfiguration((uint64_t)v16, (uint64_t (*)(_QWORD))type metadata accessor for ResolvableDateInterval);
    return (*(uint64_t (**)(char *, uint64_t))(v18 + 8))(v23, v17);
  }
}

uint64_t defaultContentTransition #1 <A>(_:) in DateTextStorage.resolve<A>(into:in:with:)@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  BOOL v9;
  unint64_t v10;
  char v11;

  EnvironmentValues.contentTransitionStyle.getter(&v11);
  if (v11 == 1)
  {
    if (one-time initialization token for v6 != -1)
      swift_once();
    v4 = static Semantics.v6;
    if (one-time initialization token for forced != -1)
      swift_once();
    swift_beginAccess();
    if ((byte_25426FABC & 1) != 0)
    {
LABEL_20:
      result = dyld_program_minos_at_least();
LABEL_25:
      v6 = (result ^ ~a1) & 1 | 0x1202024000000000;
      v8 = 34807859;
      goto LABEL_26;
    }
    v9 = dword_25426FAB8 >= v4;
LABEL_22:
    result = v9;
    goto LABEL_25;
  }
  if (one-time initialization token for introduced != -1)
    swift_once();
  v5 = static _SemanticFeature_v5_2.introduced;
  if (one-time initialization token for forced != -1)
    swift_once();
  v6 = 0x8000000001;
  result = swift_beginAccess();
  if (byte_25426FAB4 != 1)
  {
    if (static Semantics.forced >= v5)
      goto LABEL_14;
LABEL_17:
    if (one-time initialization token for v6 != -1)
      swift_once();
    if ((byte_25426FABC & 1) != 0)
      goto LABEL_20;
    v9 = dword_25426FAB8 >= static Semantics.v6;
    goto LABEL_22;
  }
  result = dyld_program_sdk_at_least();
  if ((result & 1) == 0)
    goto LABEL_17;
LABEL_14:
  v8 = 0x2000000;
LABEL_26:
  v10 = v8 & 0xFFFF0000FFFFFFFFLL | 0x300000000;
  *(_QWORD *)a2 = v6;
  *(_BYTE *)(a2 + 14) = 0;
  *(_DWORD *)(a2 + 8) = v10;
  *(_WORD *)(a2 + 12) = WORD2(v10);
  return result;
}

uint64_t DateTextStorage.isEqual(to:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v11;

  v1 = type metadata accessor for DateTextStorage.Storage(0);
  MEMORY[0x24BDAC7A8](v1);
  v3 = (char *)&v11 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v11 - v5;
  v7 = swift_dynamicCastClass();
  if (v7)
  {
    v8 = v7;
    outlined init with copy of TypesettingLanguage(v0 + OBJC_IVAR____TtC7SwiftUIP33_AEE0E21EC7C6B2D1204F94F94CBF738915DateTextStorage_storage, (uint64_t)v6, type metadata accessor for DateTextStorage.Storage);
    outlined init with copy of TypesettingLanguage(v8 + OBJC_IVAR____TtC7SwiftUIP33_AEE0E21EC7C6B2D1204F94F94CBF738915DateTextStorage_storage, (uint64_t)v3, type metadata accessor for DateTextStorage.Storage);
    v9 = specialized static DateTextStorage.Storage.== infix(_:_:)((uint64_t)v6, (uint64_t)v3);
    outlined destroy of TypesettingConfiguration((uint64_t)v3, type metadata accessor for DateTextStorage.Storage);
    outlined destroy of TypesettingConfiguration((uint64_t)v6, type metadata accessor for DateTextStorage.Storage);
  }
  else
  {
    v9 = 0;
  }
  return v9 & 1;
}

uint64_t DateTextStorage.__ivar_destroyer()
{
  uint64_t v0;

  return outlined destroy of TypesettingConfiguration(v0 + OBJC_IVAR____TtC7SwiftUIP33_AEE0E21EC7C6B2D1204F94F94CBF738915DateTextStorage_storage, type metadata accessor for DateTextStorage.Storage);
}

uint64_t DateTextStorage.__deallocating_deinit()
{
  uint64_t v0;

  outlined destroy of TypesettingConfiguration(v0 + OBJC_IVAR____TtC7SwiftUIP33_AEE0E21EC7C6B2D1204F94F94CBF738915DateTextStorage_storage, type metadata accessor for DateTextStorage.Storage);
  return swift_deallocClassInstance();
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance Text.DateStyle.CodingKeys()
{
  _BYTE *v0;

  if (*v0)
    return 0xD000000000000011;
  else
    return 0x656761726F7473;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance Text.DateStyle.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = specialized Text.DateStyle.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Text.DateStyle.CodingKeys()
{
  lazy protocol witness table accessor for type Text.DateStyle.CodingKeys and conformance Text.DateStyle.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Text.DateStyle.CodingKeys()
{
  lazy protocol witness table accessor for type Text.DateStyle.CodingKeys and conformance Text.DateStyle.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t Text.DateStyle.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  _QWORD v10[3];
  char v11;
  int v12;
  char v13;
  char v14;

  type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for KeyedEncodingContainer<Text.DateStyle.CodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type Text.DateStyle.CodingKeys and conformance Text.DateStyle.CodingKeys, (uint64_t)&type metadata for Text.DateStyle.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE3520]);
  v4 = v3;
  v5 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v7 = (char *)v10 - v6;
  v10[0] = *(_QWORD *)(v1 + 8);
  v12 = *(unsigned __int8 *)(v1 + 16);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type Text.DateStyle.CodingKeys and conformance Text.DateStyle.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v14 = 0;
  v8 = v10[1];
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v8)
  {
    v10[2] = v10[0];
    v11 = v12;
    v13 = 1;
    lazy protocol witness table accessor for type Text.DateStyle.UnitsConfiguration and conformance Text.DateStyle.UnitsConfiguration();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t Text.DateStyle.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  char v21;
  char v22;

  v18 = a2;
  type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for KeyedDecodingContainer<Text.DateStyle.CodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type Text.DateStyle.CodingKeys and conformance Text.DateStyle.CodingKeys, (uint64_t)&type metadata for Text.DateStyle.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE33E0]);
  v5 = v4;
  v6 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v17 - v7;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type Text.DateStyle.CodingKeys and conformance Text.DateStyle.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    v9 = v6;
    v10 = v18;
    v22 = 0;
    v11 = KeyedDecodingContainer.decode(_:forKey:)();
    v12 = v5;
    v13 = v11;
    if (v11 >= 5)
    {
      lazy protocol witness table accessor for type Text.DateStyle.Errors and conformance Text.DateStyle.Errors();
      swift_allocError();
      swift_willThrow();
      (*(void (**)(char *, uint64_t))(v9 + 8))(v8, v5);
    }
    else
    {
      v21 = 1;
      lazy protocol witness table accessor for type Text.DateStyle.UnitsConfiguration and conformance Text.DateStyle.UnitsConfiguration();
      KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
      v15 = v19;
      v16 = v20;
      (*(void (**)(char *, uint64_t))(v9 + 8))(v8, v12);
      *(_BYTE *)v10 = v13;
      *(_QWORD *)(v10 + 8) = v15;
      *(_BYTE *)(v10 + 16) = v16;
    }
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t protocol witness for Decodable.init(from:) in conformance Text.DateStyle@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return Text.DateStyle.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Text.DateStyle(_QWORD *a1)
{
  return Text.DateStyle.encode(to:)(a1);
}

unint64_t lazy protocol witness table accessor for type Text.DateStyle.UnitsConfiguration.CodingKeys and conformance Text.DateStyle.UnitsConfiguration.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Text.DateStyle.UnitsConfiguration.CodingKeys and conformance Text.DateStyle.UnitsConfiguration.CodingKeys;
  if (!lazy protocol witness table cache variable for type Text.DateStyle.UnitsConfiguration.CodingKeys and conformance Text.DateStyle.UnitsConfiguration.CodingKeys)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Text.DateStyle.UnitsConfiguration.CodingKeys, &unk_250646BD0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.DateStyle.UnitsConfiguration.CodingKeys and conformance Text.DateStyle.UnitsConfiguration.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Text.DateStyle.UnitsConfiguration.CodingKeys and conformance Text.DateStyle.UnitsConfiguration.CodingKeys;
  if (!lazy protocol witness table cache variable for type Text.DateStyle.UnitsConfiguration.CodingKeys and conformance Text.DateStyle.UnitsConfiguration.CodingKeys)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Text.DateStyle.UnitsConfiguration.CodingKeys, &unk_250646BD0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.DateStyle.UnitsConfiguration.CodingKeys and conformance Text.DateStyle.UnitsConfiguration.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Text.DateStyle.UnitsConfiguration.CodingKeys and conformance Text.DateStyle.UnitsConfiguration.CodingKeys;
  if (!lazy protocol witness table cache variable for type Text.DateStyle.UnitsConfiguration.CodingKeys and conformance Text.DateStyle.UnitsConfiguration.CodingKeys)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Text.DateStyle.UnitsConfiguration.CodingKeys, &unk_250646BD0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.DateStyle.UnitsConfiguration.CodingKeys and conformance Text.DateStyle.UnitsConfiguration.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Text.DateStyle.UnitsConfiguration.CodingKeys and conformance Text.DateStyle.UnitsConfiguration.CodingKeys;
  if (!lazy protocol witness table cache variable for type Text.DateStyle.UnitsConfiguration.CodingKeys and conformance Text.DateStyle.UnitsConfiguration.CodingKeys)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Text.DateStyle.UnitsConfiguration.CodingKeys, &unk_250646BD0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.DateStyle.UnitsConfiguration.CodingKeys and conformance Text.DateStyle.UnitsConfiguration.CodingKeys);
  }
  return result;
}

uint64_t type metadata accessor for CodableRawRepresentable<NSCalendarUnit>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for CodableRawRepresentable<NSCalendarUnit>;
  if (!lazy cache variable for type metadata for CodableRawRepresentable<NSCalendarUnit>)
  {
    type metadata accessor for NSCalendarUnit(255);
    lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type NSCalendarUnit and conformance NSCalendarUnit, (uint64_t (*)(uint64_t))type metadata accessor for NSCalendarUnit, (uint64_t)&protocol conformance descriptor for NSCalendarUnit);
    type metadata accessor for CodableRawRepresentable();
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Text.DateStyle.UnitsConfiguration.Style and conformance Text.DateStyle.UnitsConfiguration.Style()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Text.DateStyle.UnitsConfiguration.Style and conformance Text.DateStyle.UnitsConfiguration.Style;
  if (!lazy protocol witness table cache variable for type Text.DateStyle.UnitsConfiguration.Style and conformance Text.DateStyle.UnitsConfiguration.Style)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Text.DateStyle.UnitsConfiguration.Style, &type metadata for Text.DateStyle.UnitsConfiguration.Style);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.DateStyle.UnitsConfiguration.Style and conformance Text.DateStyle.UnitsConfiguration.Style);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Text.DateStyle.UnitsConfiguration.Style and conformance Text.DateStyle.UnitsConfiguration.Style;
  if (!lazy protocol witness table cache variable for type Text.DateStyle.UnitsConfiguration.Style and conformance Text.DateStyle.UnitsConfiguration.Style)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Text.DateStyle.UnitsConfiguration.Style, &type metadata for Text.DateStyle.UnitsConfiguration.Style);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.DateStyle.UnitsConfiguration.Style and conformance Text.DateStyle.UnitsConfiguration.Style);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Text.DateStyle.UnitsConfiguration.Style and conformance Text.DateStyle.UnitsConfiguration.Style;
  if (!lazy protocol witness table cache variable for type Text.DateStyle.UnitsConfiguration.Style and conformance Text.DateStyle.UnitsConfiguration.Style)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Text.DateStyle.UnitsConfiguration.Style, &type metadata for Text.DateStyle.UnitsConfiguration.Style);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.DateStyle.UnitsConfiguration.Style and conformance Text.DateStyle.UnitsConfiguration.Style);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Text.DateStyle.UnitsConfiguration.Style and conformance Text.DateStyle.UnitsConfiguration.Style;
  if (!lazy protocol witness table cache variable for type Text.DateStyle.UnitsConfiguration.Style and conformance Text.DateStyle.UnitsConfiguration.Style)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Text.DateStyle.UnitsConfiguration.Style, &type metadata for Text.DateStyle.UnitsConfiguration.Style);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.DateStyle.UnitsConfiguration.Style and conformance Text.DateStyle.UnitsConfiguration.Style);
  }
  return result;
}

uint64_t type metadata accessor for DateTextStorage(uint64_t a1)
{
  return type metadata accessor for TimerTimelineSchedule(a1, (uint64_t *)&type metadata singleton initialization cache for DateTextStorage);
}

uint64_t type metadata accessor for DateTextStorage.Storage(uint64_t a1)
{
  return type metadata accessor for TimerTimelineSchedule(a1, (uint64_t *)&type metadata singleton initialization cache for DateTextStorage.Storage);
}

void type metadata accessor for (dateFormat: ResolvableCurrentDate.DateFormat, timeZone: TimeZone?)()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!lazy cache variable for type metadata for (dateFormat: ResolvableCurrentDate.DateFormat, timeZone: TimeZone?))
  {
    type metadata accessor for [(_:)](255, &lazy cache variable for type metadata for TimeZone?, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (dateFormat: ResolvableCurrentDate.DateFormat, timeZone: TimeZone?));
  }
}

uint64_t outlined init with take of TimeZone?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for TimeZone?, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with copy of TimeZone?(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t (*a4)(uint64_t))
{
  uint64_t v6;

  type metadata accessor for [(_:)](0, a3, a4, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a2, a1, v6);
  return a2;
}

uint64_t specialized static Text.DateStyle.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  int v2;
  int v3;

  if (*a1 != *a2)
    return 0;
  v2 = a1[16];
  v3 = a2[16];
  if (v2 == 3)
  {
    if (v3 != 3)
      return 0;
  }
  else if (v3 == 3 || *((_QWORD *)a1 + 1) != *((_QWORD *)a2 + 1) || v2 != v3)
  {
    return 0;
  }
  return 1;
}

uint64_t specialized static ReferenceDateModifier._makeViewInputs(modifier:inputs:)(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for Date?, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  AGGraphCreateOffsetAttribute2();
  v3 = AGCreateWeakAttribute();
  swift_retain();
  specialized closure #1 in PropertyList.subscript.setter(a2, v3);
  return swift_release();
}

uint64_t specialized static DateTextStorage.Storage.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  int EnumCaseMultiPayload;
  uint64_t v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  char v55;
  uint64_t v56;
  char v57;
  uint64_t v58;
  uint64_t v59;
  char v60;
  char v61;
  char v62;
  uint64_t (*v63)(_QWORD);
  void (*v64)(char *, uint64_t);
  uint64_t (*v65)(uint64_t);
  uint64_t v66;
  void (*v67)();
  char v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t (*v71)(uint64_t);
  uint64_t v72;
  unsigned int (*v73)(uint64_t, uint64_t, uint64_t);
  uint64_t v74;
  uint64_t (*v75)(uint64_t);
  uint64_t v76;
  uint64_t (*v77)(uint64_t);
  char *v79;
  uint64_t (*v80)(uint64_t);
  char v81;
  void (*v82)(char *, uint64_t);
  char *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;

  v95 = a1;
  v96 = a2;
  type metadata accessor for ClosedRange<Date>();
  v89 = v2;
  MEMORY[0x24BDAC7A8](v2);
  v90 = (uint64_t)&v83 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v4);
  v91 = (uint64_t)&v83 - v5;
  MEMORY[0x24BDAC7A8](v6);
  v92 = (uint64_t)&v83 - v7;
  v8 = type metadata accessor for TimeZone();
  v9 = (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510];
  v88 = v8;
  v86 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v83 = (char *)&v83 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for (TimeZone?, TimeZone?)();
  v85 = v11;
  MEMORY[0x24BDAC7A8](v11);
  v87 = (uint64_t)&v83 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for TimeZone?, v9, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v13);
  v84 = (uint64_t)&v83 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v15);
  v94 = (uint64_t)&v83 - v16;
  MEMORY[0x24BDAC7A8](v17);
  v93 = (uint64_t)&v83 - v18;
  v19 = type metadata accessor for DateInterval();
  v20 = *(_QWORD *)(v19 - 8);
  MEMORY[0x24BDAC7A8](v19);
  v22 = (char *)&v83 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = type metadata accessor for DateTextStorage.Storage(0);
  MEMORY[0x24BDAC7A8](v23);
  v25 = (char *)&v83 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v26);
  v28 = (char *)&v83 - v27;
  MEMORY[0x24BDAC7A8](v29);
  v31 = (char *)&v83 - v30;
  type metadata accessor for (DateTextStorage.Storage, DateTextStorage.Storage)();
  MEMORY[0x24BDAC7A8](v32);
  v34 = (char *)&v83 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  v36 = (uint64_t)&v34[*(int *)(v35 + 48)];
  outlined init with copy of TypesettingLanguage(v95, (uint64_t)v34, type metadata accessor for DateTextStorage.Storage);
  outlined init with copy of TypesettingLanguage(v96, v36, type metadata accessor for DateTextStorage.Storage);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      outlined init with copy of TypesettingLanguage((uint64_t)v34, (uint64_t)v28, type metadata accessor for DateTextStorage.Storage);
      v39 = *(_QWORD *)v28;
      v38 = *((_QWORD *)v28 + 1);
      v40 = v28[16];
      type metadata accessor for (dateFormat: ResolvableCurrentDate.DateFormat, timeZone: TimeZone?)();
      v42 = *(int *)(v41 + 48);
      v43 = (uint64_t)&v28[v42];
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        v45 = *(_QWORD *)v36;
        v44 = *(_QWORD *)(v36 + 8);
        v46 = v36 + v42;
        v47 = *(_BYTE *)(v36 + 16);
        v48 = v43;
        v49 = v93;
        outlined init with take of TimeZone?(v48, v93);
        v50 = v46;
        v51 = v94;
        outlined init with take of TimeZone?(v50, v94);
        if ((v40 & 1) != 0)
        {
          if ((v47 & 1) != 0)
          {
            if (v39 != v45 || v38 != v44)
              goto LABEL_26;
            goto LABEL_25;
          }
        }
        else if ((v47 & 1) == 0)
        {
          if (v39 != v45 || v38 != v44)
          {
LABEL_26:
            v68 = _stringCompareWithSmolCheck(_:_:expecting:)();
            outlined consume of ResolvableCurrentDate.DateFormat();
            outlined consume of ResolvableCurrentDate.DateFormat();
            if ((v68 & 1) != 0)
              goto LABEL_27;
            goto LABEL_21;
          }
LABEL_25:
          outlined consume of ResolvableCurrentDate.DateFormat();
          outlined consume of ResolvableCurrentDate.DateFormat();
LABEL_27:
          v69 = v87;
          v70 = v87 + *(int *)(v85 + 48);
          v71 = (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510];
          outlined init with copy of TimeZone?(v49, v87, &lazy cache variable for type metadata for TimeZone?, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510]);
          outlined init with copy of TimeZone?(v51, v70, &lazy cache variable for type metadata for TimeZone?, v71);
          v72 = v86;
          v73 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v86 + 48);
          v74 = v88;
          if (v73(v69, 1, v88) == 1)
          {
            v75 = (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510];
            outlined destroy of (style: Duration.TimeFormatStyle.Attributed, smallestField: Date.ComponentsFormatStyle.Field)?(v51, &lazy cache variable for type metadata for TimeZone?, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510]);
            outlined destroy of (style: Duration.TimeFormatStyle.Attributed, smallestField: Date.ComponentsFormatStyle.Field)?(v49, &lazy cache variable for type metadata for TimeZone?, v75);
            if (v73(v70, 1, v74) == 1)
            {
              outlined destroy of (style: Duration.TimeFormatStyle.Attributed, smallestField: Date.ComponentsFormatStyle.Field)?(v69, &lazy cache variable for type metadata for TimeZone?, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510]);
LABEL_38:
              outlined destroy of TypesettingConfiguration((uint64_t)v34, type metadata accessor for DateTextStorage.Storage);
              v62 = 1;
              return v62 & 1;
            }
          }
          else
          {
            v76 = v84;
            outlined init with copy of TimeZone?(v69, v84, &lazy cache variable for type metadata for TimeZone?, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510]);
            if (v73(v70, 1, v74) != 1)
            {
              v79 = v83;
              (*(void (**)(char *, uint64_t, uint64_t))(v72 + 32))(v83, v70, v74);
              v80 = (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510];
              lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type TimeZone and conformance TimeZone, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], MEMORY[0x24BDCF538]);
              v81 = dispatch thunk of static Equatable.== infix(_:_:)();
              v82 = *(void (**)(char *, uint64_t))(v72 + 8);
              v82(v79, v74);
              outlined destroy of (style: Duration.TimeFormatStyle.Attributed, smallestField: Date.ComponentsFormatStyle.Field)?(v94, &lazy cache variable for type metadata for TimeZone?, v80);
              outlined destroy of (style: Duration.TimeFormatStyle.Attributed, smallestField: Date.ComponentsFormatStyle.Field)?(v49, &lazy cache variable for type metadata for TimeZone?, v80);
              v82((char *)v76, v74);
              outlined destroy of (style: Duration.TimeFormatStyle.Attributed, smallestField: Date.ComponentsFormatStyle.Field)?(v69, &lazy cache variable for type metadata for TimeZone?, v80);
              if ((v81 & 1) != 0)
                goto LABEL_38;
              goto LABEL_34;
            }
            v77 = (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510];
            outlined destroy of (style: Duration.TimeFormatStyle.Attributed, smallestField: Date.ComponentsFormatStyle.Field)?(v51, &lazy cache variable for type metadata for TimeZone?, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510]);
            outlined destroy of (style: Duration.TimeFormatStyle.Attributed, smallestField: Date.ComponentsFormatStyle.Field)?(v49, &lazy cache variable for type metadata for TimeZone?, v77);
            (*(void (**)(uint64_t, uint64_t))(v72 + 8))(v76, v74);
          }
          v67 = type metadata accessor for (TimeZone?, TimeZone?);
          v66 = v69;
          goto LABEL_33;
        }
        outlined consume of ResolvableCurrentDate.DateFormat();
        outlined consume of ResolvableCurrentDate.DateFormat();
LABEL_21:
        v65 = (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510];
        outlined destroy of (style: Duration.TimeFormatStyle.Attributed, smallestField: Date.ComponentsFormatStyle.Field)?(v51, &lazy cache variable for type metadata for TimeZone?, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510]);
        outlined destroy of (style: Duration.TimeFormatStyle.Attributed, smallestField: Date.ComponentsFormatStyle.Field)?(v49, &lazy cache variable for type metadata for TimeZone?, v65);
        goto LABEL_34;
      }
      outlined destroy of (style: Duration.TimeFormatStyle.Attributed, smallestField: Date.ComponentsFormatStyle.Field)?(v43, &lazy cache variable for type metadata for TimeZone?, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510]);
      outlined consume of ResolvableCurrentDate.DateFormat();
LABEL_17:
      v63 = (uint64_t (*)(_QWORD))type metadata accessor for (DateTextStorage.Storage, DateTextStorage.Storage);
LABEL_35:
      outlined destroy of TypesettingConfiguration((uint64_t)v34, v63);
      v62 = 0;
      return v62 & 1;
    }
    outlined init with copy of TypesettingLanguage((uint64_t)v34, (uint64_t)v25, type metadata accessor for DateTextStorage.Storage);
    type metadata accessor for (interval: ClosedRange<Date>, countdown: Bool)();
    v53 = *(int *)(v52 + 48);
    v54 = v25[v53];
    if (swift_getEnumCaseMultiPayload() != 2)
    {
      outlined destroy of TypesettingConfiguration((uint64_t)v25, (uint64_t (*)(_QWORD))type metadata accessor for ClosedRange<Date>);
      goto LABEL_17;
    }
    LODWORD(v96) = v54;
    v55 = *(_BYTE *)(v36 + v53);
    v56 = v92;
    outlined init with take of LocalizedStringKey.FormatArgument(v36, v92, (uint64_t (*)(_QWORD))type metadata accessor for ClosedRange<Date>);
    type metadata accessor for Date();
    lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type Date and conformance Date, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], MEMORY[0x24BDCE958]);
    v57 = dispatch thunk of static Equatable.== infix(_:_:)();
    v58 = v91;
    outlined init with copy of TypesettingLanguage((uint64_t)v25, v91, (uint64_t (*)(_QWORD))type metadata accessor for ClosedRange<Date>);
    v59 = v90;
    outlined init with copy of TypesettingLanguage(v56, v90, (uint64_t (*)(_QWORD))type metadata accessor for ClosedRange<Date>);
    if ((v57 & 1) == 0)
    {
      outlined destroy of TypesettingConfiguration(v59, (uint64_t (*)(_QWORD))type metadata accessor for ClosedRange<Date>);
      outlined destroy of TypesettingConfiguration(v58, (uint64_t (*)(_QWORD))type metadata accessor for ClosedRange<Date>);
      outlined destroy of TypesettingConfiguration(v56, (uint64_t (*)(_QWORD))type metadata accessor for ClosedRange<Date>);
      v66 = (uint64_t)v25;
      v67 = type metadata accessor for ClosedRange<Date>;
LABEL_33:
      outlined destroy of TypesettingConfiguration(v66, (uint64_t (*)(_QWORD))v67);
      goto LABEL_34;
    }
    v60 = dispatch thunk of static Equatable.== infix(_:_:)();
    outlined destroy of TypesettingConfiguration(v59, (uint64_t (*)(_QWORD))type metadata accessor for ClosedRange<Date>);
    outlined destroy of TypesettingConfiguration(v58, (uint64_t (*)(_QWORD))type metadata accessor for ClosedRange<Date>);
    outlined destroy of TypesettingConfiguration(v56, (uint64_t (*)(_QWORD))type metadata accessor for ClosedRange<Date>);
    outlined destroy of TypesettingConfiguration((uint64_t)v25, (uint64_t (*)(_QWORD))type metadata accessor for ClosedRange<Date>);
    if ((v60 & 1) == 0)
    {
LABEL_34:
      v63 = type metadata accessor for DateTextStorage.Storage;
      goto LABEL_35;
    }
    v61 = v96 ^ v55;
    outlined destroy of TypesettingConfiguration((uint64_t)v34, type metadata accessor for DateTextStorage.Storage);
    v62 = v61 ^ 1;
  }
  else
  {
    outlined init with copy of TypesettingLanguage((uint64_t)v34, (uint64_t)v31, type metadata accessor for DateTextStorage.Storage);
    if (swift_getEnumCaseMultiPayload())
    {
      (*(void (**)(char *, uint64_t))(v20 + 8))(v31, v19);
      goto LABEL_17;
    }
    (*(void (**)(char *, uint64_t, uint64_t))(v20 + 32))(v22, v36, v19);
    v62 = static DateInterval.== infix(_:_:)();
    v64 = *(void (**)(char *, uint64_t))(v20 + 8);
    v64(v22, v19);
    v64(v31, v19);
    outlined destroy of TypesettingConfiguration((uint64_t)v34, type metadata accessor for DateTextStorage.Storage);
  }
  return v62 & 1;
}

unint64_t specialized Text.DateStyle.Storage.init(rawValue:)(unint64_t result)
{
  if (result >= 5)
    return 5;
  return result;
}

uint64_t specialized Text.DateStyle.UnitsConfiguration.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x7374696E75 && a2 == 0xE500000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x656C797473 && a2 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t specialized Text.init(timerInterval:pauseTime:countsDown:showsHours:animateSecondCounting:)(uint64_t a1, uint64_t a2, int a3, int a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char v25;
  int v26;
  void (*v27)(char *, uint64_t, uint64_t);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(__int128 *);
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v41;
  uint64_t v42;
  int v43;
  int v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51[3];
  __int128 v52;

  v43 = a4;
  v44 = a3;
  v6 = type metadata accessor for SystemFormatStyle.Timer();
  MEMORY[0x24BDAC7A8](v6);
  v48 = (uint64_t)&v41 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for TimeDataSource<Date><A>.DateStorage(0, &lazy cache variable for type metadata for TimeDataSource<Date><A>.DateStorage, (uint64_t (*)(_QWORD))type metadata accessor for TimeDataSource<A>.DateStorage);
  MEMORY[0x24BDAC7A8](v8);
  v45 = (char *)&v41 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v10);
  v47 = (uint64_t)&v41 - v11;
  v12 = type metadata accessor for Date();
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v15 = (char *)&v41 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v16);
  v18 = (char *)&v41 - v17;
  v19 = type metadata accessor for DateInterval();
  MEMORY[0x24BDAC7A8](v19);
  v21 = (char *)&v41 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = type metadata accessor for ResolvableTimer();
  MEMORY[0x24BDAC7A8](v22);
  v24 = (char *)&v41 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v50 = a1;
  v46 = a2;
  v42 = _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF10Foundation4DateV_s5NeverOSdTg5((void (*)(_QWORD *__return_ptr, char *))partial apply for closure #1 in Text.init(timerInterval:pauseTime:countsDown:showsHours:animateSecondCounting:));
  v26 = v25 & 1;
  v41 = v13;
  v27 = *(void (**)(char *, uint64_t, uint64_t))(v13 + 16);
  v27(v18, a1, v12);
  type metadata accessor for ClosedRange<Date>();
  v29 = *(int *)(v28 + 36);
  v49 = a1;
  v27(v15, a1 + v29, v12);
  DateInterval.init(start:end:)();
  if ((v43 & 1) != 0)
    v30 = 224;
  else
    v30 = 192;
  v52 = 0uLL;
  if (one-time initialization token for shared != -1)
    swift_once();
  swift_beginAccess();
  v31 = *(void (**)(__int128 *))((*MEMORY[0x24BEE4EA0] & *(_QWORD *)static CoreGlue2.shared) + 0x68);
  v32 = static CoreGlue2.shared;
  v31(&v52);

  *(_OWORD *)v51 = v52;
  ResolvableTimer.init(interval:pause:countdown:units:in:)((uint64_t)v21, v42, v26, v44 & 1, v30, 0, v51, (uint64_t)v24);
  if ((v24[*(int *)(v22 + 20) + 8] & 1) != 0)
  {
    type metadata accessor for TimeDataSource<Date><A>.DateStorage(0, &lazy cache variable for type metadata for (pauseDate: Date), (uint64_t (*)(_QWORD))MEMORY[0x24BDCE900]);
    v34 = (uint64_t)v45;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v33 - 8) + 56))(v45, 1, 1, v33);
  }
  else
  {
    v34 = (uint64_t)v45;
    if ((v24[*(int *)(v22 + 24)] & 1) != 0)
    {
      DateInterval.end.getter();
      static Date.- infix(_:_:)();
    }
    else
    {
      DateInterval.start.getter();
      static Date.+ infix(_:_:)();
    }
    (*(void (**)(char *, uint64_t))(v41 + 8))(v18, v12);
    type metadata accessor for TimeDataSource<Date><A>.DateStorage(0, &lazy cache variable for type metadata for (pauseDate: Date), (uint64_t (*)(_QWORD))MEMORY[0x24BDCE900]);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v35 - 8) + 56))(v34, 0, 1, v35);
  }
  v36 = v47;
  outlined init with take of TimeDataSource<Date><A>.DateStorage(v34, v47);
  v37 = v48;
  ResolvableTimer.format.getter(v48);
  outlined destroy of (style: Duration.TimeFormatStyle.Attributed, smallestField: Date.ComponentsFormatStyle.Field)?(v46, &lazy cache variable for type metadata for Date?, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900]);
  outlined destroy of TypesettingConfiguration((uint64_t)v24, (uint64_t (*)(_QWORD))type metadata accessor for ResolvableTimer);
  type metadata accessor for TimeDataFormattingStorage<TimeDataSource<Date><A>.DateStorage, SystemFormatStyle.Timer>(0, &lazy cache variable for type metadata for TimeDataFormattingStorage<TimeDataSource<Date><A>.DateStorage, SystemFormatStyle.Timer>, (uint64_t (*)(uint64_t))type metadata accessor for SystemFormatStyle.Timer, &lazy protocol witness table cache variable for type SystemFormatStyle.Timer and conformance SystemFormatStyle.Timer, (uint64_t)&protocol conformance descriptor for SystemFormatStyle.Timer);
  v38 = swift_allocObject();
  v39 = v38 + *(_QWORD *)(*(_QWORD *)v38 + 192);
  *(_QWORD *)v39 = 0;
  *(_BYTE *)(v39 + 8) = 1;
  outlined init with take of TimeDataSource<Date><A>.DateStorage(v36, v38 + *(_QWORD *)(*(_QWORD *)v38 + 176));
  outlined init with take of LocalizedStringKey.FormatArgument(v37, v38 + *(_QWORD *)(*(_QWORD *)v38 + 184), (uint64_t (*)(_QWORD))type metadata accessor for SystemFormatStyle.Timer);
  *(_QWORD *)v39 = 0x404E000000000000;
  *(_BYTE *)(v39 + 8) = 0;
  outlined destroy of TypesettingConfiguration(v49, (uint64_t (*)(_QWORD))type metadata accessor for ClosedRange<Date>);
  return v38;
}

uint64_t specialized Text.init(interval:pauseAt:countdown:units:)(uint64_t a1, uint64_t a2, char a3, int a4, uint64_t a5, char a6)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  double v23;
  uint64_t v24;
  char *v25;
  void (*v26)(char *, uint64_t, uint64_t, double);
  void (*v27)(__int128 *);
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  int v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45[3];
  __int128 v46;

  v41 = a2;
  v42 = a5;
  v40 = a3 & 1;
  v38 = a4;
  v39 = a6 & 1;
  v7 = type metadata accessor for SystemFormatStyle.Timer();
  MEMORY[0x24BDAC7A8](v7);
  v44 = (uint64_t)&v35 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Date();
  v36 = *(_QWORD *)(v9 - 8);
  v37 = v9;
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v35 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for TimeDataSource<Date><A>.DateStorage(0, &lazy cache variable for type metadata for TimeDataSource<Date><A>.DateStorage, (uint64_t (*)(_QWORD))type metadata accessor for TimeDataSource<A>.DateStorage);
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)&v35 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v15);
  v17 = (char *)&v35 - v16;
  v18 = type metadata accessor for DateInterval();
  v19 = *(_QWORD *)(v18 - 8);
  MEMORY[0x24BDAC7A8](v18);
  v21 = (char *)&v35 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = type metadata accessor for ResolvableTimer();
  v23 = MEMORY[0x24BDAC7A8](v22);
  v25 = (char *)&v35 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = *(void (**)(char *, uint64_t, uint64_t, double))(v19 + 16);
  v43 = a1;
  v26(v21, a1, v18, v23);
  v46 = 0uLL;
  if (one-time initialization token for shared != -1)
    swift_once();
  swift_beginAccess();
  v27 = *(void (**)(__int128 *))((*MEMORY[0x24BEE4EA0] & *(_QWORD *)static CoreGlue2.shared) + 0x68);
  v28 = static CoreGlue2.shared;
  v27(&v46);

  *(_OWORD *)v45 = v46;
  ResolvableTimer.init(interval:pause:countdown:units:in:)((uint64_t)v21, v41, v40, v38 & 1, v42, v39, v45, (uint64_t)v25);
  if ((v25[*(int *)(v22 + 20) + 8] & 1) != 0)
  {
    type metadata accessor for TimeDataSource<Date><A>.DateStorage(0, &lazy cache variable for type metadata for (pauseDate: Date), (uint64_t (*)(_QWORD))MEMORY[0x24BDCE900]);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 56))(v14, 1, 1, v29);
  }
  else
  {
    if ((v25[*(int *)(v22 + 24)] & 1) != 0)
    {
      DateInterval.end.getter();
      static Date.- infix(_:_:)();
    }
    else
    {
      DateInterval.start.getter();
      static Date.+ infix(_:_:)();
    }
    (*(void (**)(char *, uint64_t))(v36 + 8))(v11, v37);
    type metadata accessor for TimeDataSource<Date><A>.DateStorage(0, &lazy cache variable for type metadata for (pauseDate: Date), (uint64_t (*)(_QWORD))MEMORY[0x24BDCE900]);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 56))(v14, 0, 1, v30);
  }
  outlined init with take of TimeDataSource<Date><A>.DateStorage((uint64_t)v14, (uint64_t)v17);
  v31 = v44;
  ResolvableTimer.format.getter(v44);
  (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v43, v18);
  outlined destroy of TypesettingConfiguration((uint64_t)v25, (uint64_t (*)(_QWORD))type metadata accessor for ResolvableTimer);
  type metadata accessor for TimeDataFormattingStorage<TimeDataSource<Date><A>.DateStorage, SystemFormatStyle.Timer>(0, &lazy cache variable for type metadata for TimeDataFormattingStorage<TimeDataSource<Date><A>.DateStorage, SystemFormatStyle.Timer>, (uint64_t (*)(uint64_t))type metadata accessor for SystemFormatStyle.Timer, &lazy protocol witness table cache variable for type SystemFormatStyle.Timer and conformance SystemFormatStyle.Timer, (uint64_t)&protocol conformance descriptor for SystemFormatStyle.Timer);
  v32 = swift_allocObject();
  v33 = v32 + *(_QWORD *)(*(_QWORD *)v32 + 192);
  *(_QWORD *)v33 = 0;
  *(_BYTE *)(v33 + 8) = 1;
  outlined init with take of TimeDataSource<Date><A>.DateStorage((uint64_t)v17, v32 + *(_QWORD *)(*(_QWORD *)v32 + 176));
  outlined init with take of LocalizedStringKey.FormatArgument(v31, v32 + *(_QWORD *)(*(_QWORD *)v32 + 184), (uint64_t (*)(_QWORD))type metadata accessor for SystemFormatStyle.Timer);
  *(_QWORD *)v33 = 0x404E000000000000;
  *(_BYTE *)(v33 + 8) = 0;
  return v32;
}

void type metadata accessor for (interval: ClosedRange<Date>, countdown: Bool)()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!lazy cache variable for type metadata for (interval: ClosedRange<Date>, countdown: Bool))
  {
    type metadata accessor for ClosedRange<Date>();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (interval: ClosedRange<Date>, countdown: Bool));
  }
}

uint64_t type metadata accessor for ReferenceDateModifier(uint64_t a1)
{
  return type metadata accessor for TimerTimelineSchedule(a1, (uint64_t *)&type metadata singleton initialization cache for ReferenceDateModifier);
}

unint64_t lazy protocol witness table accessor for type Text.DateStyle.CodingKeys and conformance Text.DateStyle.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Text.DateStyle.CodingKeys and conformance Text.DateStyle.CodingKeys;
  if (!lazy protocol witness table cache variable for type Text.DateStyle.CodingKeys and conformance Text.DateStyle.CodingKeys)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Text.DateStyle.CodingKeys, &type metadata for Text.DateStyle.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.DateStyle.CodingKeys and conformance Text.DateStyle.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Text.DateStyle.CodingKeys and conformance Text.DateStyle.CodingKeys;
  if (!lazy protocol witness table cache variable for type Text.DateStyle.CodingKeys and conformance Text.DateStyle.CodingKeys)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Text.DateStyle.CodingKeys, &type metadata for Text.DateStyle.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.DateStyle.CodingKeys and conformance Text.DateStyle.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Text.DateStyle.CodingKeys and conformance Text.DateStyle.CodingKeys;
  if (!lazy protocol witness table cache variable for type Text.DateStyle.CodingKeys and conformance Text.DateStyle.CodingKeys)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Text.DateStyle.CodingKeys, &type metadata for Text.DateStyle.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.DateStyle.CodingKeys and conformance Text.DateStyle.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Text.DateStyle.CodingKeys and conformance Text.DateStyle.CodingKeys;
  if (!lazy protocol witness table cache variable for type Text.DateStyle.CodingKeys and conformance Text.DateStyle.CodingKeys)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Text.DateStyle.CodingKeys, &type metadata for Text.DateStyle.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.DateStyle.CodingKeys and conformance Text.DateStyle.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Text.DateStyle.UnitsConfiguration and conformance Text.DateStyle.UnitsConfiguration()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Text.DateStyle.UnitsConfiguration and conformance Text.DateStyle.UnitsConfiguration;
  if (!lazy protocol witness table cache variable for type Text.DateStyle.UnitsConfiguration and conformance Text.DateStyle.UnitsConfiguration)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Text.DateStyle.UnitsConfiguration, &type metadata for Text.DateStyle.UnitsConfiguration);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.DateStyle.UnitsConfiguration and conformance Text.DateStyle.UnitsConfiguration);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Text.DateStyle.UnitsConfiguration and conformance Text.DateStyle.UnitsConfiguration;
  if (!lazy protocol witness table cache variable for type Text.DateStyle.UnitsConfiguration and conformance Text.DateStyle.UnitsConfiguration)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Text.DateStyle.UnitsConfiguration, &type metadata for Text.DateStyle.UnitsConfiguration);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.DateStyle.UnitsConfiguration and conformance Text.DateStyle.UnitsConfiguration);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Text.DateStyle.Errors and conformance Text.DateStyle.Errors()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Text.DateStyle.Errors and conformance Text.DateStyle.Errors;
  if (!lazy protocol witness table cache variable for type Text.DateStyle.Errors and conformance Text.DateStyle.Errors)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Text.DateStyle.Errors, &type metadata for Text.DateStyle.Errors);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.DateStyle.Errors and conformance Text.DateStyle.Errors);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Text.DateStyle.Errors and conformance Text.DateStyle.Errors;
  if (!lazy protocol witness table cache variable for type Text.DateStyle.Errors and conformance Text.DateStyle.Errors)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Text.DateStyle.Errors, &type metadata for Text.DateStyle.Errors);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.DateStyle.Errors and conformance Text.DateStyle.Errors);
  }
  return result;
}

_QWORD *sub_234E016EC@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *result;
  return result;
}

_QWORD *sub_234E016F8(_QWORD *result, _QWORD *a2)
{
  *a2 = *result;
  return result;
}

uint64_t getEnumTagSinglePayload for Text.DateStyle(uint64_t a1, unsigned int a2)
{
  int v3;
  int v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFD && *(_BYTE *)(a1 + 17))
    return (*(_DWORD *)a1 + 253);
  if (*(unsigned __int8 *)(a1 + 16) <= 3u)
    v3 = 3;
  else
    v3 = *(unsigned __int8 *)(a1 + 16);
  v4 = v3 - 4;
  if (*(unsigned __int8 *)(a1 + 16) < 3u)
    v5 = -1;
  else
    v5 = v4;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for Text.DateStyle(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFC)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 253;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFD)
      *(_BYTE *)(result + 17) = 1;
  }
  else
  {
    if (a3 >= 0xFD)
      *(_BYTE *)(result + 17) = 0;
    if (a2)
      *(_BYTE *)(result + 16) = a2 + 3;
  }
  return result;
}

ValueMetadata *type metadata accessor for Text.DateStyle()
{
  return &type metadata for Text.DateStyle;
}

uint64_t getEnumTagSinglePayload for Text.DateStyle.UnitsConfiguration(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFE && *(_BYTE *)(a1 + 9))
    return (*(_DWORD *)a1 + 254);
  v3 = *(unsigned __int8 *)(a1 + 8);
  v4 = v3 >= 3;
  v5 = v3 - 3;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for Text.DateStyle.UnitsConfiguration(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_BYTE *)(result + 8) = 0;
    *(_QWORD *)result = a2 - 254;
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 9) = 1;
  }
  else
  {
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 9) = 0;
    if (a2)
      *(_BYTE *)(result + 8) = a2 + 2;
  }
  return result;
}

ValueMetadata *type metadata accessor for Text.DateStyle.UnitsConfiguration()
{
  return &type metadata for Text.DateStyle.UnitsConfiguration;
}

uint64_t storeEnumTagSinglePayload for Text.DateStyle.UnitsConfiguration.Style(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_234E01890 + 4 * byte_2352A38B5[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_234E018C4 + 4 * asc_2352A38B0[v4]))();
}

uint64_t sub_234E018C4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_234E018CC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x234E018D4);
  return result;
}

uint64_t sub_234E018E0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x234E018E8);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_234E018EC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_234E018F4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for Text.DateStyle.UnitsConfiguration.Style()
{
  return &type metadata for Text.DateStyle.UnitsConfiguration.Style;
}

ValueMetadata *type metadata accessor for ReferenceDateInput()
{
  return &type metadata for ReferenceDateInput;
}

uint64_t *initializeBufferWithCopyOfBuffer for ReferenceDateModifier(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for Date?, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v6 + 16) & ~(unint64_t)v6));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for Date();
    v8 = *(_QWORD *)(v7 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
    {
      memcpy(a1, a2, *(_QWORD *)(v5 + 64));
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(a1, a2, v7);
      (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
    }
  }
  return a1;
}

void *initializeWithCopy for ReferenceDateModifier(void *a1, const void *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = type metadata accessor for Date();
  v5 = *(_QWORD *)(v4 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v5 + 48))(a2, 1, v4))
  {
    type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for Date?, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v5 + 16))(a1, a2, v4);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v5 + 56))(a1, 0, 1, v4);
  }
  return a1;
}

void *assignWithCopy for ReferenceDateModifier(void *a1, void *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(void *, uint64_t, uint64_t);
  int v7;
  int v8;
  uint64_t v9;

  v4 = type metadata accessor for Date();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v5 + 48);
  v7 = v6(a1, 1, v4);
  v8 = v6(a2, 1, v4);
  if (!v7)
  {
    if (!v8)
    {
      (*(void (**)(void *, void *, uint64_t))(v5 + 24))(a1, a2, v4);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v5 + 8))(a1, v4);
    goto LABEL_6;
  }
  if (v8)
  {
LABEL_6:
    type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for Date?, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v5 + 16))(a1, a2, v4);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v5 + 56))(a1, 0, 1, v4);
  return a1;
}

void *initializeWithTake for ReferenceDateModifier(void *a1, const void *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = type metadata accessor for Date();
  v5 = *(_QWORD *)(v4 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v5 + 48))(a2, 1, v4))
  {
    type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for Date?, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v5 + 32))(a1, a2, v4);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v5 + 56))(a1, 0, 1, v4);
  }
  return a1;
}

void *assignWithTake for ReferenceDateModifier(void *a1, void *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(void *, uint64_t, uint64_t);
  int v7;
  int v8;
  uint64_t v9;

  v4 = type metadata accessor for Date();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v5 + 48);
  v7 = v6(a1, 1, v4);
  v8 = v6(a2, 1, v4);
  if (!v7)
  {
    if (!v8)
    {
      (*(void (**)(void *, void *, uint64_t))(v5 + 40))(a1, a2, v4);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v5 + 8))(a1, v4);
    goto LABEL_6;
  }
  if (v8)
  {
LABEL_6:
    type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for Date?, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v5 + 32))(a1, a2, v4);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v5 + 56))(a1, 0, 1, v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for ReferenceDateModifier()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_234E01D8C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for Date?, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for ReferenceDateModifier()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_234E01DEC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for Date?, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

void type metadata completion function for ReferenceDateModifier()
{
  unint64_t v0;

  type metadata accessor for [(_:)](319, &lazy cache variable for type metadata for Date?, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  if (v0 <= 0x3F)
    swift_initStructMetadata();
}

uint64_t ObjC metadata update function for DateTextStorage()
{
  return type metadata accessor for DateTextStorage(0);
}

uint64_t type metadata completion function for DateTextStorage()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for DateTextStorage.Storage(319);
  if (v1 <= 0x3F)
  {
    result = swift_updateClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t sub_234E01F38(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[2];

  v1 = *a1;
  v2 = a1[1];
  v3 = type metadata accessor for ReferenceDateModifier(255);
  v5 = type metadata accessor for ModifiedContent(255, v1, v3, v4);
  v7[0] = v2;
  v7[1] = &protocol witness table for ReferenceDateModifier;
  return MEMORY[0x23B7C9C04]("I{:\x1B̧\t", v5, v7);
}

uint64_t storeEnumTagSinglePayload for Text.DateStyle.Storage(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_234E01FE0 + 4 * byte_2352A38BF[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_234E02014 + 4 * byte_2352A38BA[v4]))();
}

uint64_t sub_234E02014(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_234E0201C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x234E02024);
  return result;
}

uint64_t sub_234E02030(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x234E02038);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_234E0203C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_234E02044(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for Text.DateStyle.Storage()
{
  return &type metadata for Text.DateStyle.Storage;
}

uint64_t storeEnumTagSinglePayload for Text.DateStyle.Errors(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_234E020A0 + 4 * byte_2352A38C4[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_234E020C0 + 4 * byte_2352A38C9[v4]))();
}

_BYTE *sub_234E020A0(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_234E020C0(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_234E020C8(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_234E020D0(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_234E020D8(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_234E020E0(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for Text.DateStyle.Errors()
{
  return &type metadata for Text.DateStyle.Errors;
}

ValueMetadata *type metadata accessor for Text.DateStyle.CodingKeys()
{
  return &type metadata for Text.DateStyle.CodingKeys;
}

uint64_t initializeBufferWithCopyOfBuffer for DateTextStorage.Storage(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  int EnumCaseMultiPayload;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(uint64_t, uint64_t *, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v17 = *a2;
    *(_QWORD *)a1 = *a2;
    a1 = v17 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      v18 = type metadata accessor for Date();
      v19 = *(void (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)(v18 - 8) + 16);
      v19(a1, a2, v18);
      type metadata accessor for ClosedRange<Date>();
      v19(a1 + *(int *)(v20 + 36), (uint64_t *)((char *)a2 + *(int *)(v20 + 36)), v18);
      type metadata accessor for (interval: ClosedRange<Date>, countdown: Bool)();
      *(_BYTE *)(a1 + *(int *)(v21 + 48)) = *((_BYTE *)a2 + *(int *)(v21 + 48));
    }
    else if (EnumCaseMultiPayload == 1)
    {
      v7 = *a2;
      v8 = a2[1];
      v9 = *((_BYTE *)a2 + 16);
      outlined copy of ResolvableCurrentDate.DateFormat();
      *(_QWORD *)a1 = v7;
      *(_QWORD *)(a1 + 8) = v8;
      *(_BYTE *)(a1 + 16) = v9;
      type metadata accessor for (dateFormat: ResolvableCurrentDate.DateFormat, timeZone: TimeZone?)();
      v11 = *(int *)(v10 + 48);
      v12 = (void *)(a1 + v11);
      v13 = (char *)a2 + v11;
      v14 = type metadata accessor for TimeZone();
      v15 = *(_QWORD *)(v14 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
      {
        type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for TimeZone?, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
        memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, char *, uint64_t))(v15 + 16))(v12, v13, v14);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
      }
    }
    else
    {
      v22 = type metadata accessor for DateInterval();
      (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)(v22 - 8) + 16))(a1, a2, v22);
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t outlined copy of ResolvableCurrentDate.DateFormat()
{
  return swift_bridgeObjectRetain();
}

uint64_t destroy for DateTextStorage.Storage(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t (*v4)(uint64_t, uint64_t);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t);

  result = swift_getEnumCaseMultiPayload();
  switch((_DWORD)result)
  {
    case 2:
      v6 = type metadata accessor for Date();
      v12 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8);
      v12(a1, v6);
      type metadata accessor for ClosedRange<Date>();
      v5 = a1 + *(int *)(v7 + 36);
      v3 = v6;
      v4 = (uint64_t (*)(uint64_t, uint64_t))v12;
      return v4(v5, v3);
    case 1:
      outlined consume of ResolvableCurrentDate.DateFormat();
      type metadata accessor for (dateFormat: ResolvableCurrentDate.DateFormat, timeZone: TimeZone?)();
      v9 = a1 + *(int *)(v8 + 48);
      v10 = type metadata accessor for TimeZone();
      v11 = *(_QWORD *)(v10 - 8);
      result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10);
      if (!(_DWORD)result)
      {
        v4 = *(uint64_t (**)(uint64_t, uint64_t))(v11 + 8);
        v5 = v9;
        v3 = v10;
        return v4(v5, v3);
      }
      break;
    case 0:
      v3 = type metadata accessor for DateInterval();
      v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8);
      v5 = a1;
      return v4(v5, v3);
  }
  return result;
}

uint64_t outlined consume of ResolvableCurrentDate.DateFormat()
{
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for DateTextStorage.Storage(uint64_t a1, uint64_t *a2)
{
  int EnumCaseMultiPayload;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t *, uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    v15 = type metadata accessor for Date();
    v16 = *(void (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)(v15 - 8) + 16);
    v16(a1, a2, v15);
    type metadata accessor for ClosedRange<Date>();
    v16(a1 + *(int *)(v17 + 36), (uint64_t *)((char *)a2 + *(int *)(v17 + 36)), v15);
    type metadata accessor for (interval: ClosedRange<Date>, countdown: Bool)();
    *(_BYTE *)(a1 + *(int *)(v18 + 48)) = *((_BYTE *)a2 + *(int *)(v18 + 48));
  }
  else if (EnumCaseMultiPayload == 1)
  {
    v5 = *a2;
    v6 = a2[1];
    v7 = *((_BYTE *)a2 + 16);
    outlined copy of ResolvableCurrentDate.DateFormat();
    *(_QWORD *)a1 = v5;
    *(_QWORD *)(a1 + 8) = v6;
    *(_BYTE *)(a1 + 16) = v7;
    type metadata accessor for (dateFormat: ResolvableCurrentDate.DateFormat, timeZone: TimeZone?)();
    v9 = *(int *)(v8 + 48);
    v10 = (void *)(a1 + v9);
    v11 = (char *)a2 + v9;
    v12 = type metadata accessor for TimeZone();
    v13 = *(_QWORD *)(v12 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12))
    {
      type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for TimeZone?, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, char *, uint64_t))(v13 + 16))(v10, v11, v12);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
    }
  }
  else
  {
    v19 = type metadata accessor for DateInterval();
    (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)(v19 - 8) + 16))(a1, a2, v19);
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t assignWithCopy for DateTextStorage.Storage(uint64_t a1, uint64_t *a2)
{
  int EnumCaseMultiPayload;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t *, uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  if ((uint64_t *)a1 != a2)
  {
    outlined destroy of TypesettingConfiguration(a1, type metadata accessor for DateTextStorage.Storage);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      v15 = type metadata accessor for Date();
      v16 = *(void (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)(v15 - 8) + 16);
      v16(a1, a2, v15);
      type metadata accessor for ClosedRange<Date>();
      v16(a1 + *(int *)(v17 + 36), (uint64_t *)((char *)a2 + *(int *)(v17 + 36)), v15);
      type metadata accessor for (interval: ClosedRange<Date>, countdown: Bool)();
      *(_BYTE *)(a1 + *(int *)(v18 + 48)) = *((_BYTE *)a2 + *(int *)(v18 + 48));
    }
    else if (EnumCaseMultiPayload == 1)
    {
      v5 = *a2;
      v6 = a2[1];
      v7 = *((_BYTE *)a2 + 16);
      outlined copy of ResolvableCurrentDate.DateFormat();
      *(_QWORD *)a1 = v5;
      *(_QWORD *)(a1 + 8) = v6;
      *(_BYTE *)(a1 + 16) = v7;
      type metadata accessor for (dateFormat: ResolvableCurrentDate.DateFormat, timeZone: TimeZone?)();
      v9 = *(int *)(v8 + 48);
      v10 = (void *)(a1 + v9);
      v11 = (char *)a2 + v9;
      v12 = type metadata accessor for TimeZone();
      v13 = *(_QWORD *)(v12 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12))
      {
        type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for TimeZone?, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
        memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, char *, uint64_t))(v13 + 16))(v10, v11, v12);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
      }
    }
    else
    {
      v19 = type metadata accessor for DateInterval();
      (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)(v19 - 8) + 16))(a1, a2, v19);
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t initializeWithTake for DateTextStorage.Storage(uint64_t a1, uint64_t a2)
{
  int EnumCaseMultiPayload;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  const void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    v12 = type metadata accessor for Date();
    v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 32);
    v13(a1, a2, v12);
    type metadata accessor for ClosedRange<Date>();
    v13(a1 + *(int *)(v14 + 36), a2 + *(int *)(v14 + 36), v12);
    type metadata accessor for (interval: ClosedRange<Date>, countdown: Bool)();
    *(_BYTE *)(a1 + *(int *)(v15 + 48)) = *(_BYTE *)(a2 + *(int *)(v15 + 48));
  }
  else if (EnumCaseMultiPayload == 1)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
    type metadata accessor for (dateFormat: ResolvableCurrentDate.DateFormat, timeZone: TimeZone?)();
    v6 = *(int *)(v5 + 48);
    v7 = (void *)(a1 + v6);
    v8 = (const void *)(a2 + v6);
    v9 = type metadata accessor for TimeZone();
    v10 = *(_QWORD *)(v9 - 8);
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
    {
      type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for TimeZone?, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v10 + 32))(v7, v8, v9);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
    }
  }
  else
  {
    v16 = type metadata accessor for DateInterval();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 32))(a1, a2, v16);
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t assignWithTake for DateTextStorage.Storage(uint64_t a1, uint64_t a2)
{
  int EnumCaseMultiPayload;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  const void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  if (a1 != a2)
  {
    outlined destroy of TypesettingConfiguration(a1, type metadata accessor for DateTextStorage.Storage);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      v12 = type metadata accessor for Date();
      v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 32);
      v13(a1, a2, v12);
      type metadata accessor for ClosedRange<Date>();
      v13(a1 + *(int *)(v14 + 36), a2 + *(int *)(v14 + 36), v12);
      type metadata accessor for (interval: ClosedRange<Date>, countdown: Bool)();
      *(_BYTE *)(a1 + *(int *)(v15 + 48)) = *(_BYTE *)(a2 + *(int *)(v15 + 48));
    }
    else if (EnumCaseMultiPayload == 1)
    {
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
      type metadata accessor for (dateFormat: ResolvableCurrentDate.DateFormat, timeZone: TimeZone?)();
      v6 = *(int *)(v5 + 48);
      v7 = (void *)(a1 + v6);
      v8 = (const void *)(a2 + v6);
      v9 = type metadata accessor for TimeZone();
      v10 = *(_QWORD *)(v9 - 8);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
      {
        type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for TimeZone?, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
        memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v10 + 32))(v7, v8, v9);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
      }
    }
    else
    {
      v16 = type metadata accessor for DateInterval();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 32))(a1, a2, v16);
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

void type metadata completion function for DateTextStorage.Storage()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  char v4;
  char v5;
  uint64_t v6;
  char *v7;
  char *v8;

  v0 = type metadata accessor for DateInterval();
  if (v1 <= 0x3F)
  {
    v6 = *(_QWORD *)(v0 - 8) + 64;
    type metadata accessor for [(_:)](319, &lazy cache variable for type metadata for TimeZone?, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    if (v2 <= 0x3F)
    {
      swift_getTupleTypeLayout2();
      v7 = &v5;
      type metadata accessor for ClosedRange<Date>();
      if (v3 <= 0x3F)
      {
        swift_getTupleTypeLayout2();
        v8 = &v4;
        swift_initEnumMetadataMultiPayload();
      }
    }
  }
}

uint64_t storeEnumTagSinglePayload for Text.DateStyle.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_234E02C24 + 4 * byte_2352A38D3[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_234E02C58 + 4 * byte_2352A38CE[v4]))();
}

uint64_t sub_234E02C58(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_234E02C60(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x234E02C68);
  return result;
}

uint64_t sub_234E02C74(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x234E02C7CLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_234E02C80(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_234E02C88(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for Text.DateStyle.UnitsConfiguration.CodingKeys()
{
  return &unk_250646BD0;
}

unint64_t lazy protocol witness table accessor for type Text.DateStyle.Storage and conformance Text.DateStyle.Storage()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Text.DateStyle.Storage and conformance Text.DateStyle.Storage;
  if (!lazy protocol witness table cache variable for type Text.DateStyle.Storage and conformance Text.DateStyle.Storage)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Text.DateStyle.Storage, &type metadata for Text.DateStyle.Storage);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.DateStyle.Storage and conformance Text.DateStyle.Storage);
  }
  return result;
}

uint64_t specialized Text.DateStyle.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x656761726F7473 && a2 == 0xE700000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x80000002352E3810)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

void type metadata accessor for (TimeZone?, TimeZone?)()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!lazy cache variable for type metadata for (TimeZone?, TimeZone?))
  {
    type metadata accessor for [(_:)](255, &lazy cache variable for type metadata for TimeZone?, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (TimeZone?, TimeZone?));
  }
}

void type metadata accessor for (DateTextStorage.Storage, DateTextStorage.Storage)()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!lazy cache variable for type metadata for (DateTextStorage.Storage, DateTextStorage.Storage))
  {
    type metadata accessor for DateTextStorage.Storage(255);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (DateTextStorage.Storage, DateTextStorage.Storage));
  }
}

uint64_t outlined consume of ContentTransition?(uint64_t result, uint64_t a2)
{
  if (BYTE6(a2) != 2)
    return outlined consume of ContentTransition.Storage(result, a2, SBYTE5(a2));
  return result;
}

void type metadata accessor for TimeDataSource<Date><A>.DateStorage(uint64_t a1, unint64_t *a2, uint64_t (*a3)(_QWORD))
{
  unint64_t v4;
  uint64_t v5;

  if (!*a2)
  {
    v4 = a3(0);
    if (!v5)
      atomic_store(v4, a2);
  }
}

uint64_t outlined init with take of TimeDataSource<Date><A>.DateStorage(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for TimeDataSource<Date><A>.DateStorage(0, &lazy cache variable for type metadata for TimeDataSource<Date><A>.DateStorage, (uint64_t (*)(_QWORD))type metadata accessor for TimeDataSource<A>.DateStorage);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t lazy protocol witness table accessor for type TimeDataSource<Date><A>.DateStorage and conformance TimeDataSource<A><A>.DateStorage()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type TimeDataSource<Date><A>.DateStorage and conformance TimeDataSource<A><A>.DateStorage;
  if (!lazy protocol witness table cache variable for type TimeDataSource<Date><A>.DateStorage and conformance TimeDataSource<A><A>.DateStorage)
  {
    type metadata accessor for TimeDataSource<Date><A>.DateStorage(255, &lazy cache variable for type metadata for TimeDataSource<Date><A>.DateStorage, (uint64_t (*)(_QWORD))type metadata accessor for TimeDataSource<A>.DateStorage);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for TimeDataSource<A><A>.DateStorage, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TimeDataSource<Date><A>.DateStorage and conformance TimeDataSource<A><A>.DateStorage);
  }
  return result;
}

uint64_t partial apply for closure #1 in Text.init(timerInterval:pauseTime:countsDown:showsHours:animateSecondCounting:)@<X0>(_QWORD *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = Date.timeIntervalSince(_:)();
  *a1 = v3;
  return result;
}

uint64_t type metadata accessor for WhitespaceRemovingFormatStyle<Date.FormatStyle.Attributed, AttributeScopes.FoundationAttributes.DateFieldAttribute>()
{
  uint64_t result;
  uint64_t (*v1)(uint64_t);

  result = lazy cache variable for type metadata for WhitespaceRemovingFormatStyle<Date.FormatStyle.Attributed, AttributeScopes.FoundationAttributes.DateFieldAttribute>;
  if (!lazy cache variable for type metadata for WhitespaceRemovingFormatStyle<Date.FormatStyle.Attributed, AttributeScopes.FoundationAttributes.DateFieldAttribute>)
  {
    type metadata accessor for Date.FormatStyle.Attributed();
    lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type Date.FormatStyle.Attributed and conformance Date.FormatStyle.Attributed, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDFD8], MEMORY[0x24BDCDFD0]);
    lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.DateFieldAttribute and conformance AttributeScopes.FoundationAttributes.DateFieldAttribute();
    lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.DateFieldAttribute and conformance AttributeScopes.FoundationAttributes.DateFieldAttribute();
    v1 = (uint64_t (*)(uint64_t))MEMORY[0x24BDCC138];
    lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.DateFieldAttribute.Field and conformance AttributeScopes.FoundationAttributes.DateFieldAttribute.Field, (uint64_t (*)(uint64_t))MEMORY[0x24BDCC138], MEMORY[0x24BDCC148]);
    lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.DateFieldAttribute.Field and conformance AttributeScopes.FoundationAttributes.DateFieldAttribute.Field, v1, MEMORY[0x24BDCC140]);
    type metadata accessor for WhitespaceRemovingFormatStyle();
  }
  return result;
}

uint64_t type metadata accessor for TimeDataFormattingStorage<TimeDataSource<Date><A>.DateStorage, SystemFormatStyle.Timer>(uint64_t a1, uint64_t *a2, uint64_t (*a3)(uint64_t), unint64_t *a4, uint64_t a5)
{
  uint64_t result;

  result = *a2;
  if (!*a2)
  {
    type metadata accessor for TimeDataSource<Date><A>.DateStorage(255, &lazy cache variable for type metadata for TimeDataSource<Date><A>.DateStorage, (uint64_t (*)(_QWORD))type metadata accessor for TimeDataSource<A>.DateStorage);
    a3(255);
    lazy protocol witness table accessor for type TimeDataSource<Date><A>.DateStorage and conformance TimeDataSource<A><A>.DateStorage();
    lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(a4, a3, a5);
    type metadata accessor for TimeDataFormattingStorage();
  }
  return result;
}

uint64_t type metadata accessor for FormatStyleBox<Date.FormatStyle>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for FormatStyleBox<Date.FormatStyle>;
  if (!lazy cache variable for type metadata for FormatStyleBox<Date.FormatStyle>)
  {
    type metadata accessor for Date.FormatStyle();
    lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type Date.FormatStyle and conformance Date.FormatStyle, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE2A0], MEMORY[0x24BDCE290]);
    lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type Date and conformance Date, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], MEMORY[0x24BDCE958]);
    type metadata accessor for FormatStyleBox();
  }
  return result;
}

uint64_t type metadata accessor for FormatStyleBox<WhitespaceRemovingFormatStyle<Date.FormatStyle.Attributed, AttributeScopes.FoundationAttributes.DateFieldAttribute>>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for FormatStyleBox<WhitespaceRemovingFormatStyle<Date.FormatStyle.Attributed, AttributeScopes.FoundationAttributes.DateFieldAttribute>>;
  if (!lazy cache variable for type metadata for FormatStyleBox<WhitespaceRemovingFormatStyle<Date.FormatStyle.Attributed, AttributeScopes.FoundationAttributes.DateFieldAttribute>>)
  {
    type metadata accessor for WhitespaceRemovingFormatStyle<Date.FormatStyle.Attributed, AttributeScopes.FoundationAttributes.DateFieldAttribute>();
    lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type WhitespaceRemovingFormatStyle<Date.FormatStyle.Attributed, AttributeScopes.FoundationAttributes.DateFieldAttribute> and conformance WhitespaceRemovingFormatStyle<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for WhitespaceRemovingFormatStyle<Date.FormatStyle.Attributed, AttributeScopes.FoundationAttributes.DateFieldAttribute>, (uint64_t)&protocol conformance descriptor for WhitespaceRemovingFormatStyle<A, B>);
    lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type Date and conformance Date, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], MEMORY[0x24BDCE958]);
    type metadata accessor for FormatStyleBox();
  }
  return result;
}

float static SystemColorDefinition.systemRGB(_:_:_:_:)(float a1, float a2, float a3)
{
  return specialized Color.Resolved.init(red:green:blue:opacity:)(a1 / 255.0, a2 / 255.0, a3 / 255.0);
}

float static SystemColorDefinition.opacity(at:environment:)(uint64_t a1)
{
  float result;

  result = 0.18;
  if (a1 == 2)
    result = 0.25;
  if (a1 == 1)
    result = 0.5;
  if (a1 <= 0)
    return 1.0;
  return result;
}

{
  return static SystemColorDefinition.opacity(at:environment:)(a1);
}

void specialized ColorProvider._apply(color:to:)(uint64_t a1, uint64_t a2)
{
  __asm { BR              X11 }
}

{
  __asm { BR              X11 }
}

{
  __asm { BR              X11 }
}

{
  specialized ColorProvider._apply(color:to:)(a1, a2);
}

{
  __asm { BR              X11 }
}

{
  __asm { BR              X11 }
}

{
  __asm { BR              X11 }
}

{
  __asm { BR              X11 }
}

{
  specialized ColorProvider._apply(color:to:)(a1, a2);
}

{
  __asm { BR              X11 }
}

{
  __asm { BR              X11 }
}

{
  __asm { BR              X11 }
}

{
  __asm { BR              X11 }
}

{
  __asm { BR              X11 }
}

{
  __asm { BR              X11 }
}

{
  __asm { BR              X11 }
}

{
  __asm { BR              X11 }
}

uint64_t sub_234E03690()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  float (*v6)(uint64_t, _QWORD *);
  float v7;
  uint64_t v8;
  uint64_t result;
  _QWORD v10[30];

  v3 = *(_QWORD *)(v0 + 32);
  v4 = *(_BYTE *)(v0 + 40);
  v5 = *(_QWORD *)(v0 + 56);
  if (v2 < 1)
  {
    outlined copy of _ShapeStyle_Shape.Result(*(_QWORD *)(v0 + 32), *(_BYTE *)(v0 + 40));
    swift_retain();
    swift_retain();
    swift_retain();
    v8 = v1;
  }
  else
  {
    v10[0] = *(_QWORD *)(v0 + 48);
    v10[1] = v5;
    v6 = *(float (**)(uint64_t, _QWORD *))(*(_QWORD *)v1 + 152);
    outlined copy of _ShapeStyle_Shape.Result(v3, v4);
    swift_retain();
    swift_retain_n();
    swift_retain_n();
    v7 = v6(v2, v10);
    swift_release();
    swift_release();
    type metadata accessor for ColorBox<Color.AccentColorProvider>(0, (unint64_t *)&lazy cache variable for type metadata for ColorBox<Color.OpacityColor>, (uint64_t (*)(void))lazy protocol witness table accessor for type Color.OpacityColor and conformance Color.OpacityColor, (uint64_t)&type metadata for Color.OpacityColor);
    v8 = swift_allocObject();
    *(_QWORD *)(v8 + 16) = v1;
    *(double *)(v8 + 24) = v7;
  }
  swift_retain();
  outlined consume of _ShapeStyle_Shape.Result(v3, v4);
  swift_release();
  swift_release();
  swift_release();
  result = outlined consume of _ShapeStyle_Shape.Result(v3, v4);
  *(_QWORD *)(v0 + 32) = v8;
  *(_BYTE *)(v0 + 40) = 0;
  return result;
}

uint64_t sub_234E03B38()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  float (*v6)(uint64_t, _QWORD *);
  float v7;
  uint64_t v8;
  uint64_t result;
  _QWORD v10[30];

  v3 = *(_QWORD *)(v0 + 32);
  v4 = *(_BYTE *)(v0 + 40);
  v5 = *(_QWORD *)(v0 + 56);
  if (v2 < 1)
  {
    outlined copy of _ShapeStyle_Shape.Result(*(_QWORD *)(v0 + 32), *(_BYTE *)(v0 + 40));
    swift_retain();
    swift_retain();
    swift_retain();
    v8 = v1;
  }
  else
  {
    v10[0] = *(_QWORD *)(v0 + 48);
    v10[1] = v5;
    v6 = *(float (**)(uint64_t, _QWORD *))(*(_QWORD *)v1 + 152);
    outlined copy of _ShapeStyle_Shape.Result(v3, v4);
    swift_retain();
    swift_retain_n();
    swift_retain_n();
    v7 = v6(v2, v10);
    swift_release();
    swift_release();
    type metadata accessor for ColorBox<Color.AccentColorProvider>(0, (unint64_t *)&lazy cache variable for type metadata for ColorBox<Color.OpacityColor>, (uint64_t (*)(void))lazy protocol witness table accessor for type Color.OpacityColor and conformance Color.OpacityColor, (uint64_t)&type metadata for Color.OpacityColor);
    v8 = swift_allocObject();
    *(_QWORD *)(v8 + 16) = v1;
    *(double *)(v8 + 24) = v7;
  }
  swift_retain();
  outlined consume of _ShapeStyle_Shape.Result(v3, v4);
  swift_release();
  swift_release();
  swift_release();
  result = outlined consume of _ShapeStyle_Shape.Result(v3, v4);
  *(_QWORD *)(v0 + 32) = v8;
  *(_BYTE *)(v0 + 40) = 0;
  return result;
}

uint64_t sub_234E03F80()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  float (*v6)(uint64_t, _QWORD *);
  float v7;
  uint64_t v8;
  uint64_t result;
  _QWORD v10[31];

  v3 = *(_QWORD *)(v0 + 32);
  v4 = *(_BYTE *)(v0 + 40);
  v5 = *(_QWORD *)(v0 + 56);
  if (v2 < 1)
  {
    outlined copy of _ShapeStyle_Shape.Result(*(_QWORD *)(v0 + 32), *(_BYTE *)(v0 + 40));
    swift_retain();
    swift_retain();
    swift_retain();
    v8 = v1;
  }
  else
  {
    v10[0] = *(_QWORD *)(v0 + 48);
    v10[1] = v5;
    v6 = *(float (**)(uint64_t, _QWORD *))(*(_QWORD *)v1 + 152);
    outlined copy of _ShapeStyle_Shape.Result(v3, v4);
    swift_retain();
    swift_retain_n();
    swift_retain_n();
    v7 = v6(v2, v10);
    swift_release();
    swift_release();
    type metadata accessor for ColorBox<Color.AccentColorProvider>(0, (unint64_t *)&lazy cache variable for type metadata for ColorBox<Color.OpacityColor>, (uint64_t (*)(void))lazy protocol witness table accessor for type Color.OpacityColor and conformance Color.OpacityColor, (uint64_t)&type metadata for Color.OpacityColor);
    v8 = swift_allocObject();
    *(_QWORD *)(v8 + 16) = v1;
    *(double *)(v8 + 24) = v7;
  }
  swift_retain();
  outlined consume of _ShapeStyle_Shape.Result(v3, v4);
  swift_release();
  swift_release();
  swift_release();
  result = outlined consume of _ShapeStyle_Shape.Result(v3, v4);
  *(_QWORD *)(v0 + 32) = v8;
  *(_BYTE *)(v0 + 40) = 0;
  return result;
}

uint64_t sub_234E04418()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  float (*v6)(uint64_t, _QWORD *);
  float v7;
  uint64_t v8;
  uint64_t result;
  _QWORD v10[30];

  v3 = *(_QWORD *)(v0 + 32);
  v4 = *(_BYTE *)(v0 + 40);
  v5 = *(_QWORD *)(v0 + 56);
  if (v2 < 1)
  {
    outlined copy of _ShapeStyle_Shape.Result(*(_QWORD *)(v0 + 32), *(_BYTE *)(v0 + 40));
    swift_retain();
    swift_retain();
    swift_retain();
    v8 = v1;
  }
  else
  {
    v10[0] = *(_QWORD *)(v0 + 48);
    v10[1] = v5;
    v6 = *(float (**)(uint64_t, _QWORD *))(*(_QWORD *)v1 + 152);
    outlined copy of _ShapeStyle_Shape.Result(v3, v4);
    swift_retain();
    swift_retain_n();
    swift_retain_n();
    v7 = v6(v2, v10);
    swift_release();
    swift_release();
    type metadata accessor for ColorBox<Color.AccentColorProvider>(0, (unint64_t *)&lazy cache variable for type metadata for ColorBox<Color.OpacityColor>, (uint64_t (*)(void))lazy protocol witness table accessor for type Color.OpacityColor and conformance Color.OpacityColor, (uint64_t)&type metadata for Color.OpacityColor);
    v8 = swift_allocObject();
    *(_QWORD *)(v8 + 16) = v1;
    *(double *)(v8 + 24) = v7;
  }
  swift_retain();
  outlined consume of _ShapeStyle_Shape.Result(v3, v4);
  swift_release();
  swift_release();
  swift_release();
  result = outlined consume of _ShapeStyle_Shape.Result(v3, v4);
  *(_QWORD *)(v0 + 32) = v8;
  *(_BYTE *)(v0 + 40) = 0;
  return result;
}

uint64_t sub_234E0481C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  float (*v6)(uint64_t, _QWORD *);
  float v7;
  uint64_t v8;
  uint64_t result;
  _QWORD v10[32];

  v3 = *(_QWORD *)(v0 + 32);
  v4 = *(_BYTE *)(v0 + 40);
  v5 = *(_QWORD *)(v0 + 56);
  if (v2 < 1)
  {
    outlined copy of _ShapeStyle_Shape.Result(*(_QWORD *)(v0 + 32), *(_BYTE *)(v0 + 40));
    swift_retain();
    swift_retain();
    swift_retain();
    v8 = v1;
  }
  else
  {
    v10[0] = *(_QWORD *)(v0 + 48);
    v10[1] = v5;
    v6 = *(float (**)(uint64_t, _QWORD *))(*(_QWORD *)v1 + 152);
    outlined copy of _ShapeStyle_Shape.Result(v3, v4);
    swift_retain();
    swift_retain_n();
    swift_retain_n();
    v7 = v6(v2, v10);
    swift_release();
    swift_release();
    type metadata accessor for ColorBox<Color.AccentColorProvider>(0, (unint64_t *)&lazy cache variable for type metadata for ColorBox<Color.OpacityColor>, (uint64_t (*)(void))lazy protocol witness table accessor for type Color.OpacityColor and conformance Color.OpacityColor, (uint64_t)&type metadata for Color.OpacityColor);
    v8 = swift_allocObject();
    *(_QWORD *)(v8 + 16) = v1;
    *(double *)(v8 + 24) = v7;
  }
  swift_retain();
  outlined consume of _ShapeStyle_Shape.Result(v3, v4);
  swift_release();
  swift_release();
  swift_release();
  result = outlined consume of _ShapeStyle_Shape.Result(v3, v4);
  *(_QWORD *)(v0 + 32) = v8;
  *(_BYTE *)(v0 + 40) = 0;
  return result;
}

uint64_t sub_234E04CAC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  float (*v6)(uint64_t, _QWORD *);
  float v7;
  uint64_t v8;
  uint64_t result;
  _QWORD v10[34];

  v3 = *(_QWORD *)(v0 + 32);
  v4 = *(_BYTE *)(v0 + 40);
  v5 = *(_QWORD *)(v0 + 56);
  if (v2 < 1)
  {
    outlined copy of _ShapeStyle_Shape.Result(*(_QWORD *)(v0 + 32), *(_BYTE *)(v0 + 40));
    swift_retain();
    swift_retain();
    swift_retain();
    v8 = v1;
  }
  else
  {
    v10[0] = *(_QWORD *)(v0 + 48);
    v10[1] = v5;
    v6 = *(float (**)(uint64_t, _QWORD *))(*(_QWORD *)v1 + 152);
    outlined copy of _ShapeStyle_Shape.Result(v3, v4);
    swift_retain();
    swift_retain_n();
    swift_retain_n();
    v7 = v6(v2, v10);
    swift_release();
    swift_release();
    type metadata accessor for ColorBox<Color.AccentColorProvider>(0, (unint64_t *)&lazy cache variable for type metadata for ColorBox<Color.OpacityColor>, (uint64_t (*)(void))lazy protocol witness table accessor for type Color.OpacityColor and conformance Color.OpacityColor, (uint64_t)&type metadata for Color.OpacityColor);
    v8 = swift_allocObject();
    *(_QWORD *)(v8 + 16) = v1;
    *(double *)(v8 + 24) = v7;
  }
  swift_retain();
  outlined consume of _ShapeStyle_Shape.Result(v3, v4);
  swift_release();
  swift_release();
  swift_release();
  result = outlined consume of _ShapeStyle_Shape.Result(v3, v4);
  *(_QWORD *)(v0 + 32) = v8;
  *(_BYTE *)(v0 + 40) = 0;
  return result;
}

uint64_t sub_234E05158()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  float (*v6)(uint64_t, _QWORD *);
  float v7;
  uint64_t v8;
  uint64_t result;
  _QWORD v10[30];

  v3 = *(_QWORD *)(v0 + 32);
  v4 = *(_BYTE *)(v0 + 40);
  v5 = *(_QWORD *)(v0 + 56);
  if (v2 < 1)
  {
    outlined copy of _ShapeStyle_Shape.Result(*(_QWORD *)(v0 + 32), *(_BYTE *)(v0 + 40));
    swift_retain();
    swift_retain();
    swift_retain();
    v8 = v1;
  }
  else
  {
    v10[0] = *(_QWORD *)(v0 + 48);
    v10[1] = v5;
    v6 = *(float (**)(uint64_t, _QWORD *))(*(_QWORD *)v1 + 152);
    outlined copy of _ShapeStyle_Shape.Result(v3, v4);
    swift_retain();
    swift_retain_n();
    swift_retain_n();
    v7 = v6(v2, v10);
    swift_release();
    swift_release();
    type metadata accessor for ColorBox<Color.AccentColorProvider>(0, (unint64_t *)&lazy cache variable for type metadata for ColorBox<Color.OpacityColor>, (uint64_t (*)(void))lazy protocol witness table accessor for type Color.OpacityColor and conformance Color.OpacityColor, (uint64_t)&type metadata for Color.OpacityColor);
    v8 = swift_allocObject();
    *(_QWORD *)(v8 + 16) = v1;
    *(double *)(v8 + 24) = v7;
  }
  swift_retain();
  outlined consume of _ShapeStyle_Shape.Result(v3, v4);
  swift_release();
  swift_release();
  swift_release();
  result = outlined consume of _ShapeStyle_Shape.Result(v3, v4);
  *(_QWORD *)(v0 + 32) = v8;
  *(_BYTE *)(v0 + 40) = 0;
  return result;
}

uint64_t sub_234E055B4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  float (*v6)(uint64_t, _QWORD *);
  float v7;
  uint64_t v8;
  uint64_t result;
  _QWORD v10[30];

  v3 = *(_QWORD *)(v0 + 32);
  v4 = *(_BYTE *)(v0 + 40);
  v5 = *(_QWORD *)(v0 + 56);
  if (v2 < 1)
  {
    outlined copy of _ShapeStyle_Shape.Result(*(_QWORD *)(v0 + 32), *(_BYTE *)(v0 + 40));
    swift_retain();
    swift_retain();
    swift_retain();
    v8 = v1;
  }
  else
  {
    v10[0] = *(_QWORD *)(v0 + 48);
    v10[1] = v5;
    v6 = *(float (**)(uint64_t, _QWORD *))(*(_QWORD *)v1 + 152);
    outlined copy of _ShapeStyle_Shape.Result(v3, v4);
    swift_retain();
    swift_retain_n();
    swift_retain_n();
    v7 = v6(v2, v10);
    swift_release();
    swift_release();
    type metadata accessor for ColorBox<Color.AccentColorProvider>(0, (unint64_t *)&lazy cache variable for type metadata for ColorBox<Color.OpacityColor>, (uint64_t (*)(void))lazy protocol witness table accessor for type Color.OpacityColor and conformance Color.OpacityColor, (uint64_t)&type metadata for Color.OpacityColor);
    v8 = swift_allocObject();
    *(_QWORD *)(v8 + 16) = v1;
    *(double *)(v8 + 24) = v7;
  }
  swift_retain();
  outlined consume of _ShapeStyle_Shape.Result(v3, v4);
  swift_release();
  swift_release();
  swift_release();
  result = outlined consume of _ShapeStyle_Shape.Result(v3, v4);
  *(_QWORD *)(v0 + 32) = v8;
  *(_BYTE *)(v0 + 40) = 0;
  return result;
}

uint64_t sub_234E059B0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  float (*v6)(uint64_t, _QWORD *);
  float v7;
  uint64_t v8;
  uint64_t result;
  _QWORD v10[30];

  v3 = *(_QWORD *)(v0 + 32);
  v4 = *(_BYTE *)(v0 + 40);
  v5 = *(_QWORD *)(v0 + 56);
  if (v2 < 1)
  {
    outlined copy of _ShapeStyle_Shape.Result(*(_QWORD *)(v0 + 32), *(_BYTE *)(v0 + 40));
    swift_retain();
    swift_retain();
    swift_retain();
    v8 = v1;
  }
  else
  {
    v10[0] = *(_QWORD *)(v0 + 48);
    v10[1] = v5;
    v6 = *(float (**)(uint64_t, _QWORD *))(*(_QWORD *)v1 + 152);
    outlined copy of _ShapeStyle_Shape.Result(v3, v4);
    swift_retain();
    swift_retain_n();
    swift_retain_n();
    v7 = v6(v2, v10);
    swift_release();
    swift_release();
    type metadata accessor for ColorBox<Color.AccentColorProvider>(0, (unint64_t *)&lazy cache variable for type metadata for ColorBox<Color.OpacityColor>, (uint64_t (*)(void))lazy protocol witness table accessor for type Color.OpacityColor and conformance Color.OpacityColor, (uint64_t)&type metadata for Color.OpacityColor);
    v8 = swift_allocObject();
    *(_QWORD *)(v8 + 16) = v1;
    *(double *)(v8 + 24) = v7;
  }
  swift_retain();
  outlined consume of _ShapeStyle_Shape.Result(v3, v4);
  swift_release();
  swift_release();
  swift_release();
  result = outlined consume of _ShapeStyle_Shape.Result(v3, v4);
  *(_QWORD *)(v0 + 32) = v8;
  *(_BYTE *)(v0 + 40) = 0;
  return result;
}

uint64_t sub_234E05DEC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  float (*v6)(uint64_t, _QWORD *);
  float v7;
  uint64_t v8;
  uint64_t result;
  _QWORD v10[30];

  v3 = *(_QWORD *)(v0 + 32);
  v4 = *(_BYTE *)(v0 + 40);
  v5 = *(_QWORD *)(v0 + 56);
  if (v2 < 1)
  {
    outlined copy of _ShapeStyle_Shape.Result(*(_QWORD *)(v0 + 32), *(_BYTE *)(v0 + 40));
    swift_retain();
    swift_retain();
    swift_retain();
    v8 = v1;
  }
  else
  {
    v10[0] = *(_QWORD *)(v0 + 48);
    v10[1] = v5;
    v6 = *(float (**)(uint64_t, _QWORD *))(*(_QWORD *)v1 + 152);
    outlined copy of _ShapeStyle_Shape.Result(v3, v4);
    swift_retain();
    swift_retain_n();
    swift_retain_n();
    v7 = v6(v2, v10);
    swift_release();
    swift_release();
    type metadata accessor for ColorBox<Color.AccentColorProvider>(0, (unint64_t *)&lazy cache variable for type metadata for ColorBox<Color.OpacityColor>, (uint64_t (*)(void))lazy protocol witness table accessor for type Color.OpacityColor and conformance Color.OpacityColor, (uint64_t)&type metadata for Color.OpacityColor);
    v8 = swift_allocObject();
    *(_QWORD *)(v8 + 16) = v1;
    *(double *)(v8 + 24) = v7;
  }
  swift_retain();
  outlined consume of _ShapeStyle_Shape.Result(v3, v4);
  swift_release();
  swift_release();
  swift_release();
  result = outlined consume of _ShapeStyle_Shape.Result(v3, v4);
  *(_QWORD *)(v0 + 32) = v8;
  *(_BYTE *)(v0 + 40) = 0;
  return result;
}

uint64_t sub_234E06254()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  float (*v6)(uint64_t, _QWORD *);
  float v7;
  uint64_t v8;
  uint64_t result;
  _QWORD v10[30];

  v3 = *(_QWORD *)(v0 + 32);
  v4 = *(_BYTE *)(v0 + 40);
  v5 = *(_QWORD *)(v0 + 56);
  if (v2 < 1)
  {
    outlined copy of _ShapeStyle_Shape.Result(*(_QWORD *)(v0 + 32), *(_BYTE *)(v0 + 40));
    swift_retain();
    swift_retain();
    swift_retain();
    v8 = v1;
  }
  else
  {
    v10[0] = *(_QWORD *)(v0 + 48);
    v10[1] = v5;
    v6 = *(float (**)(uint64_t, _QWORD *))(*(_QWORD *)v1 + 152);
    outlined copy of _ShapeStyle_Shape.Result(v3, v4);
    swift_retain();
    swift_retain_n();
    swift_retain_n();
    v7 = v6(v2, v10);
    swift_release();
    swift_release();
    type metadata accessor for ColorBox<Color.AccentColorProvider>(0, (unint64_t *)&lazy cache variable for type metadata for ColorBox<Color.OpacityColor>, (uint64_t (*)(void))lazy protocol witness table accessor for type Color.OpacityColor and conformance Color.OpacityColor, (uint64_t)&type metadata for Color.OpacityColor);
    v8 = swift_allocObject();
    *(_QWORD *)(v8 + 16) = v1;
    *(double *)(v8 + 24) = v7;
  }
  swift_retain();
  outlined consume of _ShapeStyle_Shape.Result(v3, v4);
  swift_release();
  swift_release();
  swift_release();
  result = outlined consume of _ShapeStyle_Shape.Result(v3, v4);
  *(_QWORD *)(v0 + 32) = v8;
  *(_BYTE *)(v0 + 40) = 0;
  return result;
}

uint64_t sub_234E06650()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  float (*v6)(uint64_t, _QWORD *);
  float v7;
  uint64_t v8;
  uint64_t result;
  _QWORD v10[32];

  v3 = *(_QWORD *)(v0 + 32);
  v4 = *(_BYTE *)(v0 + 40);
  v5 = *(_QWORD *)(v0 + 56);
  if (v2 < 1)
  {
    outlined copy of _ShapeStyle_Shape.Result(*(_QWORD *)(v0 + 32), *(_BYTE *)(v0 + 40));
    swift_retain();
    swift_retain();
    swift_retain();
    v8 = v1;
  }
  else
  {
    v10[0] = *(_QWORD *)(v0 + 48);
    v10[1] = v5;
    v6 = *(float (**)(uint64_t, _QWORD *))(*(_QWORD *)v1 + 152);
    outlined copy of _ShapeStyle_Shape.Result(v3, v4);
    swift_retain();
    swift_retain_n();
    swift_retain_n();
    v7 = v6(v2, v10);
    swift_release();
    swift_release();
    type metadata accessor for ColorBox<Color.AccentColorProvider>(0, (unint64_t *)&lazy cache variable for type metadata for ColorBox<Color.OpacityColor>, (uint64_t (*)(void))lazy protocol witness table accessor for type Color.OpacityColor and conformance Color.OpacityColor, (uint64_t)&type metadata for Color.OpacityColor);
    v8 = swift_allocObject();
    *(_QWORD *)(v8 + 16) = v1;
    *(double *)(v8 + 24) = v7;
  }
  swift_retain();
  outlined consume of _ShapeStyle_Shape.Result(v3, v4);
  swift_release();
  swift_release();
  swift_release();
  result = outlined consume of _ShapeStyle_Shape.Result(v3, v4);
  *(_QWORD *)(v0 + 32) = v8;
  *(_BYTE *)(v0 + 40) = 0;
  return result;
}

uint64_t sub_234E06A64()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  float (*v6)(uint64_t, _QWORD *);
  float v7;
  uint64_t v8;
  uint64_t result;
  _QWORD v10[30];

  v3 = *(_QWORD *)(v0 + 32);
  v4 = *(_BYTE *)(v0 + 40);
  v5 = *(_QWORD *)(v0 + 56);
  if (v2 < 1)
  {
    outlined copy of _ShapeStyle_Shape.Result(*(_QWORD *)(v0 + 32), *(_BYTE *)(v0 + 40));
    swift_retain();
    swift_retain();
    swift_retain();
    v8 = v1;
  }
  else
  {
    v10[0] = *(_QWORD *)(v0 + 48);
    v10[1] = v5;
    v6 = *(float (**)(uint64_t, _QWORD *))(*(_QWORD *)v1 + 152);
    outlined copy of _ShapeStyle_Shape.Result(v3, v4);
    swift_retain();
    swift_retain_n();
    swift_retain_n();
    v7 = v6(v2, v10);
    swift_release();
    swift_release();
    type metadata accessor for ColorBox<Color.AccentColorProvider>(0, (unint64_t *)&lazy cache variable for type metadata for ColorBox<Color.OpacityColor>, (uint64_t (*)(void))lazy protocol witness table accessor for type Color.OpacityColor and conformance Color.OpacityColor, (uint64_t)&type metadata for Color.OpacityColor);
    v8 = swift_allocObject();
    *(_QWORD *)(v8 + 16) = v1;
    *(double *)(v8 + 24) = v7;
  }
  swift_retain();
  outlined consume of _ShapeStyle_Shape.Result(v3, v4);
  swift_release();
  swift_release();
  swift_release();
  result = outlined consume of _ShapeStyle_Shape.Result(v3, v4);
  *(_QWORD *)(v0 + 32) = v8;
  *(_BYTE *)(v0 + 40) = 0;
  return result;
}

uint64_t sub_234E06EC8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  float (*v6)(uint64_t, _QWORD *);
  float v7;
  uint64_t v8;
  uint64_t result;
  _QWORD v10[30];

  v3 = *(_QWORD *)(v0 + 32);
  v4 = *(_BYTE *)(v0 + 40);
  v5 = *(_QWORD *)(v0 + 56);
  if (v2 <= 0)
  {
    outlined copy of _ShapeStyle_Shape.Result(*(_QWORD *)(v0 + 32), *(_BYTE *)(v0 + 40));
    swift_retain();
    swift_retain();
    swift_retain();
    v8 = v1;
  }
  else
  {
    v10[0] = *(_QWORD *)(v0 + 48);
    v10[1] = v5;
    v6 = *(float (**)(uint64_t, _QWORD *))(*(_QWORD *)v1 + 152);
    outlined copy of _ShapeStyle_Shape.Result(v3, v4);
    swift_retain();
    swift_retain_n();
    swift_retain_n();
    v7 = v6(v2, v10);
    swift_release();
    swift_release();
    type metadata accessor for ColorBox<Color.AccentColorProvider>(0, (unint64_t *)&lazy cache variable for type metadata for ColorBox<Color.OpacityColor>, (uint64_t (*)(void))lazy protocol witness table accessor for type Color.OpacityColor and conformance Color.OpacityColor, (uint64_t)&type metadata for Color.OpacityColor);
    v8 = swift_allocObject();
    *(_QWORD *)(v8 + 16) = v1;
    *(double *)(v8 + 24) = v7;
  }
  swift_retain();
  outlined consume of _ShapeStyle_Shape.Result(v3, v4);
  swift_release();
  swift_release();
  swift_release();
  result = outlined consume of _ShapeStyle_Shape.Result(v3, v4);
  *(_QWORD *)(v0 + 32) = v8;
  *(_BYTE *)(v0 + 40) = 0;
  return result;
}

void SystemColorsStyle._apply(to:)(uint64_t a1)
{
  __asm { BR              X10 }
}

ValueMetadata *EnvironmentValues.systemColorDefinition.getter()
{
  uint64_t *v0;
  uint64_t v1;
  ValueMetadata *v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *v0;
  if (v0[1])
  {
    swift_retain_n();
    swift_retain_n();
    v2 = (ValueMetadata *)specialized PropertyList.Tracker.value<A>(_:for:)(v1);
    swift_release_n();
  }
  else
  {
    v3 = swift_retain_n();
    v4 = specialized find<A>(_:key:)(v3);
    if (v4)
      v2 = *(ValueMetadata **)(v4 + 72);
    else
      v2 = &type metadata for CoreUIDefaultSystemColorDefinition;
  }
  swift_release_n();
  return v2;
}

uint64_t SystemColorType.resolve(in:)(uint64_t *a1)
{
  char *v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  char v7;
  _QWORD v8[2];

  v2 = *a1;
  v3 = a1[1];
  v4 = *v1;
  EnvironmentValues.systemColorDefinition.getter();
  v7 = v4;
  v8[0] = v2;
  v8[1] = v3;
  return (*(uint64_t (**)(char *, _QWORD *))(v5 + 8))(&v7, v8);
}

uint64_t static Color.black.getter()
{
  return static HierarchicalShapeStyle.sharedPrimary.getter(&one-time initialization token for black);
}

uint64_t one-time initialization function for red()
{
  uint64_t result;

  type metadata accessor for ColorBox<Color.AccentColorProvider>(0, &lazy cache variable for type metadata for ColorBox<SystemColorType>, (uint64_t (*)(void))lazy protocol witness table accessor for type SystemColorType and conformance SystemColorType, (uint64_t)&type metadata for SystemColorType);
  result = swift_allocObject();
  *(_BYTE *)(result + 16) = 0;
  static Color.red = result;
  return result;
}

uint64_t static Color.red.getter()
{
  return static HierarchicalShapeStyle.sharedPrimary.getter(&one-time initialization token for red);
}

uint64_t one-time initialization function for orange()
{
  uint64_t result;

  type metadata accessor for ColorBox<Color.AccentColorProvider>(0, &lazy cache variable for type metadata for ColorBox<SystemColorType>, (uint64_t (*)(void))lazy protocol witness table accessor for type SystemColorType and conformance SystemColorType, (uint64_t)&type metadata for SystemColorType);
  result = swift_allocObject();
  *(_BYTE *)(result + 16) = 1;
  static Color.orange = result;
  return result;
}

uint64_t static Color.orange.getter()
{
  return static HierarchicalShapeStyle.sharedPrimary.getter(&one-time initialization token for orange);
}

uint64_t one-time initialization function for yellow()
{
  uint64_t result;

  type metadata accessor for ColorBox<Color.AccentColorProvider>(0, &lazy cache variable for type metadata for ColorBox<SystemColorType>, (uint64_t (*)(void))lazy protocol witness table accessor for type SystemColorType and conformance SystemColorType, (uint64_t)&type metadata for SystemColorType);
  result = swift_allocObject();
  *(_BYTE *)(result + 16) = 2;
  static Color.yellow = result;
  return result;
}

uint64_t static Color.yellow.getter()
{
  return static HierarchicalShapeStyle.sharedPrimary.getter(&one-time initialization token for yellow);
}

uint64_t one-time initialization function for green()
{
  uint64_t result;

  type metadata accessor for ColorBox<Color.AccentColorProvider>(0, &lazy cache variable for type metadata for ColorBox<SystemColorType>, (uint64_t (*)(void))lazy protocol witness table accessor for type SystemColorType and conformance SystemColorType, (uint64_t)&type metadata for SystemColorType);
  result = swift_allocObject();
  *(_BYTE *)(result + 16) = 3;
  static Color.green = result;
  return result;
}

uint64_t static Color.green.getter()
{
  return static HierarchicalShapeStyle.sharedPrimary.getter(&one-time initialization token for green);
}

uint64_t one-time initialization function for mint()
{
  uint64_t result;

  type metadata accessor for ColorBox<Color.AccentColorProvider>(0, &lazy cache variable for type metadata for ColorBox<SystemColorType>, (uint64_t (*)(void))lazy protocol witness table accessor for type SystemColorType and conformance SystemColorType, (uint64_t)&type metadata for SystemColorType);
  result = swift_allocObject();
  *(_BYTE *)(result + 16) = 5;
  static Color.mint = result;
  return result;
}

uint64_t static Color.mint.getter()
{
  return static HierarchicalShapeStyle.sharedPrimary.getter(&one-time initialization token for mint);
}

uint64_t one-time initialization function for teal()
{
  uint64_t result;

  type metadata accessor for ColorBox<Color.AccentColorProvider>(0, &lazy cache variable for type metadata for ColorBox<SystemColorType>, (uint64_t (*)(void))lazy protocol witness table accessor for type SystemColorType and conformance SystemColorType, (uint64_t)&type metadata for SystemColorType);
  result = swift_allocObject();
  *(_BYTE *)(result + 16) = 4;
  static Color.teal = result;
  return result;
}

uint64_t static Color.teal.getter()
{
  return static HierarchicalShapeStyle.sharedPrimary.getter(&one-time initialization token for teal);
}

uint64_t one-time initialization function for cyan()
{
  uint64_t result;

  type metadata accessor for ColorBox<Color.AccentColorProvider>(0, &lazy cache variable for type metadata for ColorBox<SystemColorType>, (uint64_t (*)(void))lazy protocol witness table accessor for type SystemColorType and conformance SystemColorType, (uint64_t)&type metadata for SystemColorType);
  result = swift_allocObject();
  *(_BYTE *)(result + 16) = 6;
  static Color.cyan = result;
  return result;
}

uint64_t static Color.cyan.getter()
{
  return static HierarchicalShapeStyle.sharedPrimary.getter(&one-time initialization token for cyan);
}

uint64_t one-time initialization function for blue()
{
  uint64_t result;

  type metadata accessor for ColorBox<Color.AccentColorProvider>(0, &lazy cache variable for type metadata for ColorBox<SystemColorType>, (uint64_t (*)(void))lazy protocol witness table accessor for type SystemColorType and conformance SystemColorType, (uint64_t)&type metadata for SystemColorType);
  result = swift_allocObject();
  *(_BYTE *)(result + 16) = 7;
  static Color.blue = (_UNKNOWN *)result;
  return result;
}

uint64_t static Color.blue.getter()
{
  return static HierarchicalShapeStyle.sharedPrimary.getter(&one-time initialization token for blue);
}

uint64_t one-time initialization function for indigo()
{
  uint64_t result;

  type metadata accessor for ColorBox<Color.AccentColorProvider>(0, &lazy cache variable for type metadata for ColorBox<SystemColorType>, (uint64_t (*)(void))lazy protocol witness table accessor for type SystemColorType and conformance SystemColorType, (uint64_t)&type metadata for SystemColorType);
  result = swift_allocObject();
  *(_BYTE *)(result + 16) = 8;
  static Color.indigo = result;
  return result;
}

uint64_t static Color.indigo.getter()
{
  return static HierarchicalShapeStyle.sharedPrimary.getter(one-time initialization token for indigo);
}

uint64_t one-time initialization function for purple()
{
  uint64_t result;

  type metadata accessor for ColorBox<Color.AccentColorProvider>(0, &lazy cache variable for type metadata for ColorBox<SystemColorType>, (uint64_t (*)(void))lazy protocol witness table accessor for type SystemColorType and conformance SystemColorType, (uint64_t)&type metadata for SystemColorType);
  result = swift_allocObject();
  *(_BYTE *)(result + 16) = 9;
  static Color.purple = result;
  return result;
}

uint64_t static Color.purple.getter()
{
  return static HierarchicalShapeStyle.sharedPrimary.getter(&one-time initialization token for purple);
}

uint64_t one-time initialization function for pink()
{
  uint64_t result;

  type metadata accessor for ColorBox<Color.AccentColorProvider>(0, &lazy cache variable for type metadata for ColorBox<SystemColorType>, (uint64_t (*)(void))lazy protocol witness table accessor for type SystemColorType and conformance SystemColorType, (uint64_t)&type metadata for SystemColorType);
  result = swift_allocObject();
  *(_BYTE *)(result + 16) = 10;
  static Color.pink = result;
  return result;
}

uint64_t static Color.pink.getter()
{
  return static HierarchicalShapeStyle.sharedPrimary.getter(&one-time initialization token for pink);
}

uint64_t one-time initialization function for brown()
{
  uint64_t result;

  type metadata accessor for ColorBox<Color.AccentColorProvider>(0, &lazy cache variable for type metadata for ColorBox<SystemColorType>, (uint64_t (*)(void))lazy protocol witness table accessor for type SystemColorType and conformance SystemColorType, (uint64_t)&type metadata for SystemColorType);
  result = swift_allocObject();
  *(_BYTE *)(result + 16) = 11;
  static Color.brown = result;
  return result;
}

uint64_t static Color.brown.getter()
{
  return static HierarchicalShapeStyle.sharedPrimary.getter(one-time initialization token for brown);
}

__n128 one-time initialization function for white()
{
  __n128 *v0;
  __n128 result;

  type metadata accessor for ColorBox<Color.AccentColorProvider>(0, (unint64_t *)&lazy cache variable for type metadata for ColorBox<ResolvedColorProvider>, (uint64_t (*)(void))lazy protocol witness table accessor for type ResolvedColorProvider and conformance ResolvedColorProvider, (uint64_t)&type metadata for ResolvedColorProvider);
  v0 = (__n128 *)swift_allocObject();
  __asm { FMOV            V0.4S, #1.0 }
  v0[1] = result;
  static Color.white = (uint64_t)v0;
  return result;
}

uint64_t static Color.white.getter()
{
  return static HierarchicalShapeStyle.sharedPrimary.getter(&one-time initialization token for white);
}

uint64_t one-time initialization function for gray()
{
  uint64_t result;

  type metadata accessor for ColorBox<Color.AccentColorProvider>(0, &lazy cache variable for type metadata for ColorBox<SystemColorType>, (uint64_t (*)(void))lazy protocol witness table accessor for type SystemColorType and conformance SystemColorType, (uint64_t)&type metadata for SystemColorType);
  result = swift_allocObject();
  *(_BYTE *)(result + 16) = 12;
  static Color.gray = result;
  return result;
}

uint64_t static Color.gray.getter()
{
  return static HierarchicalShapeStyle.sharedPrimary.getter(one-time initialization token for gray);
}

double one-time initialization function for black()
{
  uint64_t v0;
  double result;

  type metadata accessor for ColorBox<Color.AccentColorProvider>(0, (unint64_t *)&lazy cache variable for type metadata for ColorBox<ResolvedColorProvider>, (uint64_t (*)(void))lazy protocol witness table accessor for type ResolvedColorProvider and conformance ResolvedColorProvider, (uint64_t)&type metadata for ResolvedColorProvider);
  v0 = swift_allocObject();
  result = 0.0;
  *(_OWORD *)(v0 + 16) = xmmword_23528B790;
  static Color.black = (_UNKNOWN *)v0;
  return result;
}

uint64_t one-time initialization function for clear()
{
  uint64_t result;

  type metadata accessor for ColorBox<Color.AccentColorProvider>(0, (unint64_t *)&lazy cache variable for type metadata for ColorBox<ResolvedColorProvider>, (uint64_t (*)(void))lazy protocol witness table accessor for type ResolvedColorProvider and conformance ResolvedColorProvider, (uint64_t)&type metadata for ResolvedColorProvider);
  result = swift_allocObject();
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = 0;
  static Color.clear = result;
  return result;
}

uint64_t static Color.clear.getter()
{
  return static HierarchicalShapeStyle.sharedPrimary.getter(&one-time initialization token for clear);
}

uint64_t one-time initialization function for primary()
{
  uint64_t result;

  type metadata accessor for ColorBox<Color.AccentColorProvider>(0, &lazy cache variable for type metadata for ColorBox<SystemColorType>, (uint64_t (*)(void))lazy protocol witness table accessor for type SystemColorType and conformance SystemColorType, (uint64_t)&type metadata for SystemColorType);
  result = swift_allocObject();
  *(_BYTE *)(result + 16) = 13;
  static Color.primary = (_UNKNOWN *)result;
  return result;
}

uint64_t static Color.primary.getter()
{
  return static HierarchicalShapeStyle.sharedPrimary.getter(&one-time initialization token for primary);
}

uint64_t one-time initialization function for secondary()
{
  uint64_t result;

  type metadata accessor for ColorBox<Color.AccentColorProvider>(0, &lazy cache variable for type metadata for ColorBox<SystemColorType>, (uint64_t (*)(void))lazy protocol witness table accessor for type SystemColorType and conformance SystemColorType, (uint64_t)&type metadata for SystemColorType);
  result = swift_allocObject();
  *(_BYTE *)(result + 16) = 14;
  static Color.secondary = result;
  return result;
}

uint64_t static Color.secondary.getter()
{
  return static HierarchicalShapeStyle.sharedPrimary.getter(&one-time initialization token for secondary);
}

uint64_t one-time initialization function for primarySystemFill()
{
  uint64_t result;

  type metadata accessor for ColorBox<Color.AccentColorProvider>(0, &lazy cache variable for type metadata for ColorBox<SystemColorType>, (uint64_t (*)(void))lazy protocol witness table accessor for type SystemColorType and conformance SystemColorType, (uint64_t)&type metadata for SystemColorType);
  result = swift_allocObject();
  *(_BYTE *)(result + 16) = 18;
  static Color.primarySystemFill = result;
  return result;
}

uint64_t static Color.primarySystemFill.getter()
{
  return static HierarchicalShapeStyle.sharedPrimary.getter(one-time initialization token for primarySystemFill);
}

uint64_t one-time initialization function for secondarySystemFill()
{
  uint64_t result;

  type metadata accessor for ColorBox<Color.AccentColorProvider>(0, &lazy cache variable for type metadata for ColorBox<SystemColorType>, (uint64_t (*)(void))lazy protocol witness table accessor for type SystemColorType and conformance SystemColorType, (uint64_t)&type metadata for SystemColorType);
  result = swift_allocObject();
  *(_BYTE *)(result + 16) = 19;
  static Color.secondarySystemFill = result;
  return result;
}

uint64_t static Color.secondarySystemFill.getter()
{
  return static HierarchicalShapeStyle.sharedPrimary.getter(&one-time initialization token for secondarySystemFill);
}

uint64_t one-time initialization function for tertiarySystemFill()
{
  uint64_t result;

  type metadata accessor for ColorBox<Color.AccentColorProvider>(0, &lazy cache variable for type metadata for ColorBox<SystemColorType>, (uint64_t (*)(void))lazy protocol witness table accessor for type SystemColorType and conformance SystemColorType, (uint64_t)&type metadata for SystemColorType);
  result = swift_allocObject();
  *(_BYTE *)(result + 16) = 20;
  static Color.tertiarySystemFill = result;
  return result;
}

uint64_t static Color.tertiarySystemFill.getter()
{
  return static HierarchicalShapeStyle.sharedPrimary.getter(&one-time initialization token for tertiarySystemFill);
}

uint64_t one-time initialization function for quaternarySystemFill()
{
  uint64_t result;

  type metadata accessor for ColorBox<Color.AccentColorProvider>(0, &lazy cache variable for type metadata for ColorBox<SystemColorType>, (uint64_t (*)(void))lazy protocol witness table accessor for type SystemColorType and conformance SystemColorType, (uint64_t)&type metadata for SystemColorType);
  result = swift_allocObject();
  *(_BYTE *)(result + 16) = 21;
  static Color.quaternarySystemFill = result;
  return result;
}

uint64_t static Color.quaternarySystemFill.getter()
{
  return static HierarchicalShapeStyle.sharedPrimary.getter(&one-time initialization token for quaternarySystemFill);
}

uint64_t one-time initialization function for tertiary()
{
  uint64_t result;

  type metadata accessor for ColorBox<Color.AccentColorProvider>(0, &lazy cache variable for type metadata for ColorBox<SystemColorType>, (uint64_t (*)(void))lazy protocol witness table accessor for type SystemColorType and conformance SystemColorType, (uint64_t)&type metadata for SystemColorType);
  result = swift_allocObject();
  *(_BYTE *)(result + 16) = 15;
  static Color.tertiary = result;
  return result;
}

uint64_t static Color.tertiary.getter()
{
  return static HierarchicalShapeStyle.sharedPrimary.getter(&one-time initialization token for tertiary);
}

uint64_t one-time initialization function for quaternary()
{
  uint64_t result;

  type metadata accessor for ColorBox<Color.AccentColorProvider>(0, &lazy cache variable for type metadata for ColorBox<SystemColorType>, (uint64_t (*)(void))lazy protocol witness table accessor for type SystemColorType and conformance SystemColorType, (uint64_t)&type metadata for SystemColorType);
  result = swift_allocObject();
  *(_BYTE *)(result + 16) = 16;
  static Color.quaternary = result;
  return result;
}

uint64_t static Color.quaternary.getter()
{
  return static HierarchicalShapeStyle.sharedPrimary.getter(&one-time initialization token for quaternary);
}

uint64_t one-time initialization function for quinary()
{
  uint64_t result;

  type metadata accessor for ColorBox<Color.AccentColorProvider>(0, &lazy cache variable for type metadata for ColorBox<SystemColorType>, (uint64_t (*)(void))lazy protocol witness table accessor for type SystemColorType and conformance SystemColorType, (uint64_t)&type metadata for SystemColorType);
  result = swift_allocObject();
  *(_BYTE *)(result + 16) = 17;
  static Color.quinary = result;
  return result;
}

uint64_t static Color.quinary.getter()
{
  return static HierarchicalShapeStyle.sharedPrimary.getter(&one-time initialization token for quinary);
}

void SystemColorType.apply(color:to:)(uint64_t a1, uint64_t a2)
{
  unsigned __int8 *v2;
  int v5;
  unsigned int v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  char v19;
  _BYTE v20[16];

  v5 = *v2;
  if (one-time initialization token for v3 != -1)
    swift_once();
  v6 = static Semantics.v3;
  if (one-time initialization token for forced != -1)
    swift_once();
  swift_beginAccess();
  if (byte_25426FAB4 == 1)
  {
    if ((dyld_program_sdk_at_least() & 1) == 0)
      goto LABEL_22;
  }
  else if (static Semantics.forced < v6)
  {
    goto LABEL_22;
  }
  if ((v5 - 13) < 5)
  {
    LOBYTE(v17) = v5 - 13;
    v18 = a1;
    LegacyContentStyle._apply(to:)(a2);
    return;
  }
  v7 = *(_QWORD *)(a2 + 48);
  if (*(_QWORD *)(a2 + 56))
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v7, (uint64_t)&v17);
    swift_release_n();
    swift_release_n();
    v8 = v17;
    if (v17 == 8)
      goto LABEL_22;
    v9 = v18;
    swift_retain_n();
    swift_retain_n();
    v10 = specialized PropertyList.Tracker.value<A>(_:for:)(v7);
    v12 = v11;
    swift_release_n();
  }
  else
  {
    v13 = swift_retain_n();
    v14 = specialized find<A>(_:key:)(v13);
    if (v14)
    {
      v8 = *(_QWORD *)(v14 + 72);
      v9 = *(_DWORD *)(v14 + 80);
      outlined copy of Material?(v8);
    }
    else
    {
      v9 = 0;
      v8 = 8;
    }
    swift_release_n();
    if (v8 == 8)
      goto LABEL_22;
    v15 = swift_retain_n();
    v10 = specialized closure #1 in PropertyList.subscript.getter(v15, (uint64_t)v20);
    v12 = v16;
    swift_release();
  }
  swift_release_n();
  if (v10)
  {
    v19 = v5;
    v17 = v8;
    LODWORD(v18) = v9;
    (*(void (**)(char *, uint64_t, unint64_t *, uint64_t, uint64_t, uint64_t))(v12 + 8))(&v19, a1, &v17, a2, v10, v12);
    outlined consume of Material?(v8);
    return;
  }
  outlined consume of Material?(v8);
LABEL_22:
  specialized ColorProvider._apply(color:to:)(a1, a2);
}

unint64_t one-time initialization function for namedTypes()
{
  unint64_t result;

  result = specialized Dictionary.init(dictionaryLiteral:)((uint64_t)&outlined read-only object #0 of one-time initialization function for namedTypes);
  static SystemColorType.namedTypes = result;
  return result;
}

id SystemColorType.kitColor.getter()
{
  char *v0;
  unint64_t v1;

  v1 = *v0;
  if (v1 > 0xC)
    return 0;
  else
    return objc_msgSend((id)objc_opt_self(), *off_2506651F8[v1], 0);
}

BOOL static SystemColorType.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

void SystemColorType.hash(into:)()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0);
}

Swift::Int SystemColorType.hashValue.getter()
{
  unsigned __int8 *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t protocol witness for ColorProvider.resolve(in:) in conformance SystemColorType(uint64_t *a1)
{
  char *v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  char v7;
  _QWORD v8[2];

  v2 = *a1;
  v3 = a1[1];
  v4 = *v1;
  EnvironmentValues.systemColorDefinition.getter();
  v7 = v4;
  v8[0] = v2;
  v8[1] = v3;
  return (*(uint64_t (**)(char *, _QWORD *))(v5 + 8))(&v7, v8);
}

void protocol witness for static EnvironmentKey.defaultValue.getter in conformance SystemColorDefinitionKey(_QWORD *a1@<X8>)
{
  *a1 = &type metadata for CoreUIDefaultSystemColorDefinition;
  a1[1] = &protocol witness table for CoreUIDefaultSystemColorDefinition;
}

void protocol witness for ShapeStyle._apply(to:) in conformance SystemColorsStyle(uint64_t a1)
{
  SystemColorsStyle._apply(to:)(a1);
}

ValueMetadata *specialized EnvironmentValues.getValue<A>(for:)(uint64_t a1, uint64_t a2)
{
  ValueMetadata *v3;
  uint64_t v4;
  uint64_t v5;

  if (a2)
  {
    swift_retain();
    swift_retain();
    v3 = (ValueMetadata *)specialized PropertyList.Tracker.value<A>(_:for:)(a1);
    swift_release();
  }
  else
  {
    v4 = swift_retain();
    v5 = specialized find<A>(_:key:)(v4);
    if (v5)
      v3 = *(ValueMetadata **)(v5 + 72);
    else
      v3 = &type metadata for CoreUIDefaultSystemColorDefinition;
  }
  swift_release();
  return v3;
}

float protocol witness for static SystemColorDefinition.opacity(at:environment:) in conformance CoreUIDefaultSystemColorDefinition(uint64_t a1)
{
  float result;

  result = 0.18;
  if (a1 == 2)
    result = 0.25;
  if (a1 == 1)
    result = 0.5;
  if (a1 <= 0)
    return 1.0;
  return result;
}

unint64_t lazy protocol witness table accessor for type SystemColorType and conformance SystemColorType()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SystemColorType and conformance SystemColorType;
  if (!lazy protocol witness table cache variable for type SystemColorType and conformance SystemColorType)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for SystemColorType, &type metadata for SystemColorType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SystemColorType and conformance SystemColorType);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SystemColorType and conformance SystemColorType;
  if (!lazy protocol witness table cache variable for type SystemColorType and conformance SystemColorType)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for SystemColorType, &type metadata for SystemColorType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SystemColorType and conformance SystemColorType);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SystemColorType and conformance SystemColorType;
  if (!lazy protocol witness table cache variable for type SystemColorType and conformance SystemColorType)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for SystemColorType, &type metadata for SystemColorType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SystemColorType and conformance SystemColorType);
  }
  return result;
}

unint64_t instantiation function for generic protocol witness table for SystemColorType(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type SystemColorType and conformance SystemColorType();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t getEnumTagSinglePayload for SystemColorType(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xEB)
    goto LABEL_17;
  if (a2 + 21 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 21) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 21;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 21;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 21;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0x16;
  v8 = v6 - 22;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for SystemColorType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 21 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 21) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xEB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xEA)
    return ((uint64_t (*)(void))((char *)&loc_234E08858 + 4 * byte_2352A3FF5[v4]))();
  *a1 = a2 + 21;
  return ((uint64_t (*)(void))((char *)sub_234E0888C + 4 * byte_2352A3FF0[v4]))();
}

uint64_t sub_234E0888C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_234E08894(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x234E0889CLL);
  return result;
}

uint64_t sub_234E088A8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x234E088B0);
  *(_BYTE *)result = a2 + 21;
  return result;
}

uint64_t sub_234E088B4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_234E088BC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SystemColorType()
{
  return &type metadata for SystemColorType;
}

uint64_t dispatch thunk of static SystemColorDefinition.value(for:environment:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 8))();
}

uint64_t dispatch thunk of static SystemColorDefinition.opacity(at:environment:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 16))();
}

ValueMetadata *type metadata accessor for SystemColorsStyle()
{
  return &type metadata for SystemColorsStyle;
}

uint64_t sub_234E08948()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  float (*v6)(uint64_t, _QWORD *);
  float v7;
  uint64_t v8;
  uint64_t result;
  _QWORD v10[30];

  v3 = *(_QWORD *)(v0 + 32);
  v4 = *(_BYTE *)(v0 + 40);
  v5 = *(_QWORD *)(v0 + 56);
  if (v2 < 1)
  {
    outlined copy of _ShapeStyle_Shape.Result(*(_QWORD *)(v0 + 32), *(_BYTE *)(v0 + 40));
    swift_retain();
    swift_retain();
    swift_retain();
    v8 = v1;
  }
  else
  {
    v10[0] = *(_QWORD *)(v0 + 48);
    v10[1] = v5;
    v6 = *(float (**)(uint64_t, _QWORD *))(*(_QWORD *)v1 + 152);
    outlined copy of _ShapeStyle_Shape.Result(v3, v4);
    swift_retain();
    swift_retain_n();
    swift_retain_n();
    v7 = v6(v2, v10);
    swift_release();
    swift_release();
    type metadata accessor for ColorBox<Color.AccentColorProvider>(0, (unint64_t *)&lazy cache variable for type metadata for ColorBox<Color.OpacityColor>, (uint64_t (*)(void))lazy protocol witness table accessor for type Color.OpacityColor and conformance Color.OpacityColor, (uint64_t)&type metadata for Color.OpacityColor);
    v8 = swift_allocObject();
    *(_QWORD *)(v8 + 16) = v1;
    *(double *)(v8 + 24) = v7;
  }
  swift_retain();
  outlined consume of _ShapeStyle_Shape.Result(v3, v4);
  swift_release();
  swift_release();
  swift_release();
  result = outlined consume of _ShapeStyle_Shape.Result(v3, v4);
  *(_QWORD *)(v0 + 32) = v8;
  *(_BYTE *)(v0 + 40) = 0;
  return result;
}

ValueMetadata *type metadata accessor for SystemColorDefinitionType()
{
  return &type metadata for SystemColorDefinitionType;
}

ValueMetadata *type metadata accessor for SystemColorDefinitionKey()
{
  return &type metadata for SystemColorDefinitionKey;
}

uint64_t AttributeDynamicLookup.subscript.getter()
{
  return AttributeDynamicLookup.subscript.getter();
}

{
  return MEMORY[0x24BDCD2D0]();
}

{
  return MEMORY[0x24BDCD2E0]();
}

id NSAttributedString.init(swiftUIAttributedString:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  void (*v9)(uint64_t);
  void *v10;
  void *v11;
  id v12;
  id v13;
  void (*v14)(uint64_t, uint64_t);
  uint64_t v16;

  v16 = type metadata accessor for AttributedString.CharacterView();
  MEMORY[0x24BDAC7A8](v16);
  v2 = type metadata accessor for AttributedString();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v16 - v7;
  if (one-time initialization token for shared != -1)
    swift_once();
  swift_beginAccess();
  v9 = *(void (**)(uint64_t))((*MEMORY[0x24BEE4EA0] & *(_QWORD *)static CoreGlue2.shared) + 0x98);
  v10 = static CoreGlue2.shared;
  v9(a1);

  type metadata accessor for CAPresentationModifier(0, (unint64_t *)&lazy cache variable for type metadata for NSAttributedString);
  (*(void (**)(char *, char *, uint64_t))(v3 + 16))(v5, v8, v2);
  swift_getKeyPath();
  type metadata accessor for AttributeScopes.SwiftUIAttributes(0);
  lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type AttributeScopes.SwiftUIAttributes and conformance AttributeScopes.SwiftUIAttributes, type metadata accessor for AttributeScopes.SwiftUIAttributes, (uint64_t)&protocol conformance descriptor for AttributeScopes.SwiftUIAttributes);
  v11 = (void *)NSAttributedString.init<A>(_:including:)();
  v12 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  v13 = objc_msgSend(v12, sel_initWithAttributedString_, v11, v16);

  v14 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
  v14(a1, v2);
  v14((uint64_t)v8, v2);
  return v13;
}

uint64_t AttributedString.isStyled.getter()
{
  uint64_t v0;
  uint64_t (*v1)(uint64_t);
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  void (*v21)(char *, uint64_t, uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  char *v31;
  char v32;
  void (*v33)(char *, uint64_t);
  void (*v34)(char *, _QWORD);
  uint64_t v35;
  void (*v36)(char *);
  uint64_t v37;
  char *v38;
  char *v39;
  char *v40;
  void (*v41)(char *, uint64_t);
  void (*v42)(char *, char *, uint64_t);
  uint64_t v43;
  uint64_t v44;
  char v45;
  char v46;
  uint64_t v47;
  uint64_t result;
  uint64_t v49;
  char *v50;
  char *v51;
  void (*v52)(char *, uint64_t, uint64_t);
  char *v53;
  void (*v54)(char *);
  uint64_t v55;
  char *v56;
  char *v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char v63[40];

  v0 = type metadata accessor for AttributedString.Runs.Run();
  v1 = (uint64_t (*)(uint64_t))MEMORY[0x24BDCC480];
  v49 = *(_QWORD *)(v0 - 8);
  MEMORY[0x24BDAC7A8](v0);
  v3 = (char *)&v49 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v55 = type metadata accessor for AttributedString.Runs.Index();
  v61 = *(_QWORD *)(v55 - 8);
  MEMORY[0x24BDAC7A8](v55);
  v57 = (char *)&v49 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v56 = (char *)&v49 - v6;
  type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for AttributedString.Runs.Run?, v1, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v49 - v8;
  type metadata accessor for IndexingIterator<AttributedString.Runs>(0);
  v11 = v10;
  MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)&v49 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for AttributedString.Runs();
  v15 = *(_QWORD *)(v14 - 8);
  MEMORY[0x24BDAC7A8](v14);
  v17 = (char *)&v49 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v18);
  v20 = (char *)&v49 - v19;
  AttributedString.runs.getter();
  v60 = v15;
  v21 = *(void (**)(char *, uint64_t, uint64_t))(v15 + 16);
  v50 = v20;
  v52 = v21;
  v21(v17, (uint64_t)v20, v14);
  lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type AttributedString.Runs and conformance AttributedString.Runs, (uint64_t (*)(uint64_t))MEMORY[0x24BDCC4A8], MEMORY[0x24BDCC4C0]);
  v53 = v17;
  v22 = v49;
  dispatch thunk of Sequence.makeIterator()();
  v23 = *(int *)(v11 + 36);
  v24 = (uint64_t)v13;
  v25 = &v13[v23];
  v54 = *(void (**)(char *))(v61 + 16);
  v51 = v3;
  v58 = v9;
  v59 = v0;
  while (1)
  {
    v62 = 0;
    v26 = v22;
    v27 = v55;
    v28 = v56;
    v29 = v25;
    v30 = v24;
    v54(v56);
    lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type AttributedString.Runs and conformance AttributedString.Runs, (uint64_t (*)(uint64_t))MEMORY[0x24BDCC4A8], MEMORY[0x24BDCC4C8]);
    v31 = v57;
    dispatch thunk of Collection.endIndex.getter();
    lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type AttributedString.Runs.Index and conformance AttributedString.Runs.Index, (uint64_t (*)(uint64_t))MEMORY[0x24BDCC498], MEMORY[0x24BDCC4A0]);
    v32 = dispatch thunk of static Equatable.== infix(_:_:)();
    v33 = *(void (**)(char *, uint64_t))(v61 + 8);
    v33(v31, v27);
    v33(v28, v27);
    if ((v32 & 1) != 0)
    {
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v26 + 56))(v58, 1, 1, v59);
      v24 = v30;
LABEL_8:
      outlined destroy of TypesettingConfiguration(v24, (uint64_t (*)(_QWORD))type metadata accessor for IndexingIterator<AttributedString.Runs>);
      v47 = 0;
      v41 = *(void (**)(char *, uint64_t))(v60 + 8);
LABEL_9:
      v41(v50, v14);
      return v47;
    }
    v34 = (void (*)(char *, _QWORD))dispatch thunk of Collection.subscript.read();
    v35 = v26;
    v36 = *(void (**)(char *))(v26 + 16);
    v38 = v58;
    v37 = v59;
    v36(v58);
    v34(v63, 0);
    v39 = v53;
    v52(v53, v30, v14);
    v40 = v29;
    v22 = v35;
    dispatch thunk of Collection.formIndex(after:)();
    v41 = *(void (**)(char *, uint64_t))(v60 + 8);
    v41(v39, v14);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v35 + 56))(v38, 0, 1, v37);
    v24 = v30;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v35 + 48))(v38, 1, v37) == 1)
      goto LABEL_8;
    v42 = *(void (**)(char *, char *, uint64_t))(v35 + 32);
    v43 = (uint64_t)v51;
    v42(v51, v38, v37);
    v44 = v62;
    v45 = closure #1 in AttributedString.isStyled.getter(v43);
    if (v44)
      break;
    v46 = v45;
    (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v43, v37);
    v25 = v40;
    if ((v46 & 1) != 0)
    {
      outlined destroy of TypesettingConfiguration(v24, (uint64_t (*)(_QWORD))type metadata accessor for IndexingIterator<AttributedString.Runs>);
      v47 = 1;
      goto LABEL_9;
    }
  }
  (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v43, v37);
  result = outlined destroy of TypesettingConfiguration(v24, (uint64_t (*)(_QWORD))type metadata accessor for IndexingIterator<AttributedString.Runs>);
  __break(1u);
  return result;
}

uint64_t type metadata accessor for AttributedStringTextStorage(uint64_t a1)
{
  return type metadata accessor for TimerTimelineSchedule(a1, (uint64_t *)&type metadata singleton initialization cache for AttributedStringTextStorage);
}

void AttributedStringTextStorage.resolve<A>(into:in:with:)(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19[2];

  v17 = a5;
  v9 = type metadata accessor for AttributedString();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v17 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = *a2;
  v13 = a2[1];
  v15 = *a3;
  type metadata accessor for CAPresentationModifier(0, (unint64_t *)&lazy cache variable for type metadata for NSAttributedString);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, v5 + OBJC_IVAR____TtC7SwiftUI27AttributedStringTextStorage_str, v9);
  v16 = NSAttributedString.init(swiftUIAttributedString:)((uint64_t)v12);
  v19[0] = v14;
  v19[1] = v13;
  v18 = v15;
  ResolvedTextContainer.append(_:in:with:)((uint64_t)v16, v19, &v18, a4, v17);

}

uint64_t AttributedStringTextStorage.resolvesToEmpty(in:with:)()
{
  uint64_t v0;
  uint64_t (*v1)(uint64_t);
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t);
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char v13;
  void (*v14)(char *, uint64_t);
  uint64_t v16;

  v0 = type metadata accessor for AttributedString.Index();
  v1 = (uint64_t (*)(uint64_t))MEMORY[0x24BDCC4F0];
  v2 = *(_QWORD *)(v0 - 8);
  MEMORY[0x24BDAC7A8](v0);
  v4 = (char *)&v16 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v16 - v6;
  v8 = type metadata accessor for AttributedString.CharacterView();
  v9 = (uint64_t (*)(uint64_t))MEMORY[0x24BDCC290];
  v10 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v12 = (char *)&v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  AttributedString.characters.getter();
  lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type AttributedString.CharacterView and conformance AttributedString.CharacterView, v9, MEMORY[0x24BDCC2B0]);
  dispatch thunk of Collection.startIndex.getter();
  dispatch thunk of Collection.endIndex.getter();
  lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type AttributedString.Index and conformance AttributedString.Index, v1, MEMORY[0x24BDCC508]);
  v13 = dispatch thunk of static Equatable.== infix(_:_:)();
  v14 = *(void (**)(char *, uint64_t))(v2 + 8);
  v14(v4, v0);
  v14(v7, v0);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v8);
  return v13 & 1;
}

uint64_t AttributedStringTextStorage.isEqual(to:)()
{
  uint64_t result;
  char v1;

  result = swift_dynamicCastClass();
  if (result)
  {
    swift_retain();
    v1 = static AttributedString.== infix(_:_:)();
    swift_release();
    return v1 & 1;
  }
  return result;
}

Swift::Bool __swiftcall AttributedStringTextStorage.isStyled(options:)(SwiftUI::Text::ResolveOptions options)
{
  return AttributedString.isStyled.getter() & 1;
}

double AttributedStringTextStorage.localizationInfo.getter@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_QWORD *)(a1 + 32) = 0;
  result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_BYTE *)(a1 + 40) = 0x80;
  return result;
}

uint64_t AttributedStringTextStorage.__ivar_destroyer()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + OBJC_IVAR____TtC7SwiftUI27AttributedStringTextStorage_str;
  v2 = type metadata accessor for AttributedString();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
}

uint64_t AttributedStringTextStorage.__deallocating_deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + OBJC_IVAR____TtC7SwiftUI27AttributedStringTextStorage_str;
  v2 = type metadata accessor for AttributedString();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  return swift_deallocClassInstance();
}

uint64_t AttributeScopes.SwiftUIAttributes.accessibility.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for AttributeScopes.SwiftUIAttributes(0) + 92);
  v4 = type metadata accessor for AttributeScopes.AccessibilityAttributes();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t type metadata accessor for AttributeScopes.SwiftUIAttributes(uint64_t a1)
{
  return type metadata accessor for TimerTimelineSchedule(a1, (uint64_t *)&type metadata singleton initialization cache for AttributeScopes.SwiftUIAttributes);
}

uint64_t AttributeScopes.SwiftUIAttributes.foundation.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for AttributeScopes.SwiftUIAttributes(0) + 96);
  v4 = type metadata accessor for AttributeScopes.FoundationAttributes();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

void protocol witness for static DecodingConfigurationProviding.decodingConfiguration.getter in conformance AttributeScopes.SwiftUIAttributes()
{
  lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type AttributeScopes.SwiftUIAttributes and conformance AttributeScopes.SwiftUIAttributes, type metadata accessor for AttributeScopes.SwiftUIAttributes, (uint64_t)&protocol conformance descriptor for AttributeScopes.SwiftUIAttributes);
  JUMPOUT(0x23B7C4210);
}

void protocol witness for static EncodingConfigurationProviding.encodingConfiguration.getter in conformance AttributeScopes.SwiftUIAttributes()
{
  lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type AttributeScopes.SwiftUIAttributes and conformance AttributeScopes.SwiftUIAttributes, type metadata accessor for AttributeScopes.SwiftUIAttributes, (uint64_t)&protocol conformance descriptor for AttributeScopes.SwiftUIAttributes);
  JUMPOUT(0x23B7C421CLL);
}

uint64_t static AttributeScopes.SwiftUIAttributes.FontAttribute.name.getter()
{
  return 0x2E49557466697753;
}

uint64_t protocol witness for static AttributedStringKey.name.getter in conformance AttributeScopes.SwiftUIAttributes.FontAttribute()
{
  return 0x2E49557466697753;
}

unint64_t static AttributeScopes.SwiftUIAttributes.ForegroundColorAttribute.name.getter()
{
  return 0xD000000000000017;
}

unint64_t protocol witness for static AttributedStringKey.name.getter in conformance AttributeScopes.SwiftUIAttributes.ForegroundColorAttribute()
{
  return 0xD000000000000017;
}

unint64_t static AttributeScopes.SwiftUIAttributes.BackgroundColorAttribute.name.getter()
{
  return 0xD000000000000017;
}

unint64_t protocol witness for static AttributedStringKey.name.getter in conformance AttributeScopes.SwiftUIAttributes.BackgroundColorAttribute()
{
  return 0xD000000000000017;
}

unint64_t static AttributeScopes.SwiftUIAttributes.StrikethroughStyleAttribute.name.getter()
{
  return 0xD00000000000001ALL;
}

unint64_t protocol witness for static AttributedStringKey.name.getter in conformance AttributeScopes.SwiftUIAttributes.StrikethroughStyleAttribute()
{
  return 0xD00000000000001ALL;
}

unint64_t static AttributeScopes.SwiftUIAttributes.StrikethroughColorAttribute.name.getter()
{
  return 0xD00000000000001ALL;
}

unint64_t protocol witness for static AttributedStringKey.name.getter in conformance AttributeScopes.SwiftUIAttributes.StrikethroughColorAttribute()
{
  return 0xD00000000000001ALL;
}

unint64_t static AttributeScopes.SwiftUIAttributes.UnderlineStyleAttribute.name.getter()
{
  return 0xD000000000000016;
}

unint64_t protocol witness for static AttributedStringKey.name.getter in conformance AttributeScopes.SwiftUIAttributes.UnderlineStyleAttribute()
{
  return 0xD000000000000016;
}

unint64_t static AttributeScopes.SwiftUIAttributes.UnderlineColorAttribute.name.getter()
{
  return 0xD000000000000016;
}

unint64_t protocol witness for static AttributedStringKey.name.getter in conformance AttributeScopes.SwiftUIAttributes.UnderlineColorAttribute()
{
  return 0xD000000000000016;
}

unint64_t static AttributeScopes.SwiftUIAttributes.EncapsulationAttribute.name.getter()
{
  return 0xD000000000000015;
}

unint64_t protocol witness for static AttributedStringKey.name.getter in conformance AttributeScopes.SwiftUIAttributes.EncapsulationAttribute()
{
  return 0xD000000000000015;
}

uint64_t static AttributeScopes.SwiftUIAttributes.KerningAttribute.name.getter()
{
  return 0x2E49557466697753;
}

uint64_t protocol witness for static AttributedStringKey.name.getter in conformance AttributeScopes.SwiftUIAttributes.KerningAttribute()
{
  return 0x2E49557466697753;
}

unint64_t static AttributeScopes.SwiftUIAttributes.TrackingAttribute.name.getter()
{
  return 0xD000000000000010;
}

unint64_t protocol witness for static AttributedStringKey.name.getter in conformance AttributeScopes.SwiftUIAttributes.TrackingAttribute()
{
  return 0xD000000000000010;
}

unint64_t static AttributeScopes.SwiftUIAttributes.BaselineOffsetAttribute.name.getter()
{
  return 0xD000000000000016;
}

uint64_t protocol witness for static DecodableAttributedStringKey.decode(from:) in conformance AttributeScopes.SwiftUIAttributes.BaselineOffsetAttribute()
{
  lazy protocol witness table accessor for type CGFloat and conformance CGFloat();
  return static DecodableAttributedStringKey<>.decode(from:)();
}

uint64_t protocol witness for static EncodableAttributedStringKey.encode(_:to:) in conformance AttributeScopes.SwiftUIAttributes.BaselineOffsetAttribute()
{
  lazy protocol witness table accessor for type CGFloat and conformance CGFloat();
  return static EncodableAttributedStringKey<>.encode(_:to:)();
}

unint64_t protocol witness for static AttributedStringKey.name.getter in conformance AttributeScopes.SwiftUIAttributes.BaselineOffsetAttribute()
{
  return 0xD000000000000016;
}

unint64_t static AttributeScopes.SwiftUIAttributes.GlyphInfoAttribute.name.getter()
{
  return 0xD000000000000011;
}

unint64_t protocol witness for static AttributedStringKey.name.getter in conformance AttributeScopes.SwiftUIAttributes.GlyphInfoAttribute()
{
  return 0xD000000000000011;
}

unint64_t static AttributeScopes.SwiftUIAttributes.TextScaleAttribute.name.getter()
{
  return 0xD000000000000011;
}

unint64_t protocol witness for static AttributedStringKey.name.getter in conformance AttributeScopes.SwiftUIAttributes.TextScaleAttribute()
{
  return 0xD000000000000011;
}

unint64_t static AttributeScopes.SwiftUIAttributes.SuperscriptAttribute.name.getter()
{
  return 0xD000000000000013;
}

unint64_t protocol witness for static AttributedStringKey.name.getter in conformance AttributeScopes.SwiftUIAttributes.SuperscriptAttribute()
{
  return 0xD000000000000013;
}

unint64_t static AttributeScopes.SwiftUIAttributes.CustomContainerAttribute.name.getter()
{
  return 0xD000000000000018;
}

unint64_t protocol witness for static AttributedStringKey.name.getter in conformance AttributeScopes.SwiftUIAttributes.CustomContainerAttribute()
{
  return 0xD000000000000018;
}

uint64_t AttributeScopes.SwiftUIAttributes.InterpolationStrategy.encode(to:)(_QWORD *a1, int a2)
{
  uint64_t (*v3)(uint64_t, uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  char v22;
  char v23;

  v21 = a2;
  v3 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE3520];
  type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for KeyedEncodingContainer<AttributeScopes.SwiftUIAttributes.InterpolationStrategy.UnanimatedCodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type AttributeScopes.SwiftUIAttributes.InterpolationStrategy.UnanimatedCodingKeys and conformance AttributeScopes.SwiftUIAttributes.InterpolationStrategy.UnanimatedCodingKeys, (uint64_t)&unk_25060C820, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE3520]);
  v19 = *(_QWORD *)(v4 - 8);
  v20 = v4;
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v16 - v5;
  type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for KeyedEncodingContainer<AttributeScopes.SwiftUIAttributes.InterpolationStrategy.AnimatedCodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type AttributeScopes.SwiftUIAttributes.InterpolationStrategy.AnimatedCodingKeys and conformance AttributeScopes.SwiftUIAttributes.InterpolationStrategy.AnimatedCodingKeys, (uint64_t)&unk_25060C800, v3);
  v17 = *(_QWORD *)(v7 - 8);
  v18 = v7;
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v16 - v8;
  type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for KeyedEncodingContainer<AttributeScopes.SwiftUIAttributes.InterpolationStrategy.CodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type AttributeScopes.SwiftUIAttributes.InterpolationStrategy.CodingKeys and conformance AttributeScopes.SwiftUIAttributes.InterpolationStrategy.CodingKeys, (uint64_t)&unk_25060C770, v3);
  v11 = v10;
  v12 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v14 = (char *)&v16 - v13;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type AttributeScopes.SwiftUIAttributes.InterpolationStrategy.CodingKeys and conformance AttributeScopes.SwiftUIAttributes.InterpolationStrategy.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  if ((v21 & 1) != 0)
  {
    v23 = 1;
    lazy protocol witness table accessor for type AttributeScopes.SwiftUIAttributes.InterpolationStrategy.UnanimatedCodingKeys and conformance AttributeScopes.SwiftUIAttributes.InterpolationStrategy.UnanimatedCodingKeys();
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    (*(void (**)(char *, uint64_t))(v19 + 8))(v6, v20);
  }
  else
  {
    v22 = 0;
    lazy protocol witness table accessor for type AttributeScopes.SwiftUIAttributes.InterpolationStrategy.AnimatedCodingKeys and conformance AttributeScopes.SwiftUIAttributes.InterpolationStrategy.AnimatedCodingKeys();
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    (*(void (**)(char *, uint64_t))(v17 + 8))(v9, v18);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v14, v11);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AttributeScopes.SwiftUIAttributes.InterpolationStrategy.AnimatedCodingKeys()
{
  lazy protocol witness table accessor for type AttributeScopes.SwiftUIAttributes.InterpolationStrategy.AnimatedCodingKeys and conformance AttributeScopes.SwiftUIAttributes.InterpolationStrategy.AnimatedCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AttributeScopes.SwiftUIAttributes.InterpolationStrategy.AnimatedCodingKeys()
{
  lazy protocol witness table accessor for type AttributeScopes.SwiftUIAttributes.InterpolationStrategy.AnimatedCodingKeys and conformance AttributeScopes.SwiftUIAttributes.InterpolationStrategy.AnimatedCodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance AttributeScopes.SwiftUIAttributes.InterpolationStrategy.CodingKeys()
{
  _BYTE *v0;

  if (*v0)
    return 0x74616D696E616E75;
  else
    return 0x646574616D696E61;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance AttributeScopes.SwiftUIAttributes.InterpolationStrategy.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = specialized AttributeScopes.SwiftUIAttributes.InterpolationStrategy.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AttributeScopes.SwiftUIAttributes.InterpolationStrategy.CodingKeys()
{
  lazy protocol witness table accessor for type AttributeScopes.SwiftUIAttributes.InterpolationStrategy.CodingKeys and conformance AttributeScopes.SwiftUIAttributes.InterpolationStrategy.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AttributeScopes.SwiftUIAttributes.InterpolationStrategy.CodingKeys()
{
  lazy protocol witness table accessor for type AttributeScopes.SwiftUIAttributes.InterpolationStrategy.CodingKeys and conformance AttributeScopes.SwiftUIAttributes.InterpolationStrategy.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AttributeScopes.SwiftUIAttributes.InterpolationStrategy.UnanimatedCodingKeys()
{
  lazy protocol witness table accessor for type AttributeScopes.SwiftUIAttributes.InterpolationStrategy.UnanimatedCodingKeys and conformance AttributeScopes.SwiftUIAttributes.InterpolationStrategy.UnanimatedCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AttributeScopes.SwiftUIAttributes.InterpolationStrategy.UnanimatedCodingKeys()
{
  lazy protocol witness table accessor for type AttributeScopes.SwiftUIAttributes.InterpolationStrategy.UnanimatedCodingKeys and conformance AttributeScopes.SwiftUIAttributes.InterpolationStrategy.UnanimatedCodingKeys();
  return CodingKey.debugDescription.getter();
}

_QWORD *protocol witness for Decodable.init(from:) in conformance AttributeScopes.SwiftUIAttributes.InterpolationStrategy@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  _QWORD *result;

  result = specialized AttributeScopes.SwiftUIAttributes.InterpolationStrategy.init(from:)(a1);
  if (!v2)
    *a2 = result & 1;
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance AttributeScopes.SwiftUIAttributes.InterpolationStrategy(_QWORD *a1)
{
  unsigned __int8 *v1;

  return AttributeScopes.SwiftUIAttributes.InterpolationStrategy.encode(to:)(a1, *v1);
}

uint64_t protocol witness for static DecodableAttributedStringKey.decode(from:) in conformance AttributeScopes.SwiftUIAttributes.InterpolationStrategy()
{
  lazy protocol witness table accessor for type AttributeScopes.SwiftUIAttributes.InterpolationStrategy and conformance AttributeScopes.SwiftUIAttributes.InterpolationStrategy();
  return static DecodableAttributedStringKey<>.decode(from:)();
}

uint64_t protocol witness for static EncodableAttributedStringKey.encode(_:to:) in conformance AttributeScopes.SwiftUIAttributes.InterpolationStrategy()
{
  lazy protocol witness table accessor for type AttributeScopes.SwiftUIAttributes.InterpolationStrategy and conformance AttributeScopes.SwiftUIAttributes.InterpolationStrategy();
  return static EncodableAttributedStringKey<>.encode(_:to:)();
}

unint64_t protocol witness for static AttributedStringKey.name.getter in conformance AttributeScopes.SwiftUIAttributes.InterpolationStrategy()
{
  return 0xD00000000000001DLL;
}

unint64_t static AttributeScopes.SwiftUIAttributes.FontModifiersAttribute.name.getter()
{
  return 0xD000000000000015;
}

unint64_t protocol witness for static AttributedStringKey.name.getter in conformance AttributeScopes.SwiftUIAttributes.FontModifiersAttribute()
{
  return 0xD000000000000015;
}

unint64_t static AttributeScopes.SwiftUIAttributes.EmojiTextAttachmentAttribute.name.getter()
{
  return 0xD00000000000001BLL;
}

unint64_t protocol witness for static AttributedStringKey.name.getter in conformance AttributeScopes.SwiftUIAttributes.EmojiTextAttachmentAttribute()
{
  return 0xD00000000000001BLL;
}

unint64_t static AttributeScopes.SwiftUIAttributes.AdaptiveImageGlyphAttribute.name.getter()
{
  return 0xD00000000000001ALL;
}

uint64_t static AttributeScopes.SwiftUIAttributes.AdaptiveImageGlyphAttribute.inheritedByAddedText.getter()
{
  swift_beginAccess();
  return static AttributeScopes.SwiftUIAttributes.AdaptiveImageGlyphAttribute.inheritedByAddedText;
}

uint64_t static AttributeScopes.SwiftUIAttributes.AdaptiveImageGlyphAttribute.inheritedByAddedText.setter(char a1)
{
  uint64_t result;

  result = swift_beginAccess();
  static AttributeScopes.SwiftUIAttributes.AdaptiveImageGlyphAttribute.inheritedByAddedText = a1;
  return result;
}

uint64_t (*static AttributeScopes.SwiftUIAttributes.AdaptiveImageGlyphAttribute.inheritedByAddedText.modify())()
{
  swift_beginAccess();
  return DisplayList.GraphicsRenderer.platformViewMode.modify;
}

uint64_t static AttributeScopes.SwiftUIAttributes.EmojiTextAttachmentAttribute.runBoundaries.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *a1 = 12369903;
  a1[1] = 0xA300000000000000;
  v2 = *MEMORY[0x24BDCC3B0];
  v3 = type metadata accessor for AttributedString.AttributeRunBoundaries();
  v4 = *(_QWORD *)(v3 - 8);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(v4 + 104))(a1, v2, v3);
  return (*(uint64_t (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v4 + 56))(a1, 0, 1, v3);
}

unint64_t protocol witness for static AttributedStringKey.name.getter in conformance AttributeScopes.SwiftUIAttributes.AdaptiveImageGlyphAttribute()
{
  return 0xD00000000000001ALL;
}

uint64_t protocol witness for static AttributedStringKey.inheritedByAddedText.getter in conformance AttributeScopes.SwiftUIAttributes.AdaptiveImageGlyphAttribute()
{
  swift_beginAccess();
  return static AttributeScopes.SwiftUIAttributes.AdaptiveImageGlyphAttribute.inheritedByAddedText;
}

uint64_t closure #1 in AttributedString.isStyled.getter(uint64_t a1)
{
  uint64_t (*v2)(uint64_t, uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t (*v42)(uint64_t);
  int v43;
  uint64_t v44;
  id v45;
  void (*v46)(char *, uint64_t, uint64_t);
  void (*v47)(char *, uint64_t);
  uint64_t v48;
  id v49;
  char *v50;
  char *v51;
  char *v52;
  char *v53;
  char *v54;
  char *v55;
  char *v56;
  char *v57;
  char *v58;
  char *v59;
  char *v60;
  char *v61;
  uint64_t result;
  uint64_t v63;
  id v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char v72;
  uint64_t v73;
  char v74;
  uint64_t v75;
  char v76;
  uint64_t v77;
  int v78;
  uint64_t v79;
  char v80;
  id v81;
  id v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  uint64_t (*v89)(uint64_t);
  uint64_t v90;
  int v91;
  _BOOL4 v92;
  char *v93;
  char *v94;
  char *v95;
  char *v96;
  char *v97;
  char *v98;
  char *v99;
  char *v100;
  char *v101;
  char *v102;
  char *v103;
  char *v104;
  char *v105;
  uint64_t KeyPath;
  id v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;

  v2 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
  type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for URL?, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v3);
  v93 = (char *)&v90 - v4;
  v5 = type metadata accessor for AttributedString.Runs.Run();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v104 = (char *)&v90 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8);
  v105 = (char *)&v90 - v9;
  MEMORY[0x24BDAC7A8](v10);
  v103 = (char *)&v90 - v11;
  MEMORY[0x24BDAC7A8](v12);
  v96 = (char *)&v90 - v13;
  MEMORY[0x24BDAC7A8](v14);
  v102 = (char *)&v90 - v15;
  MEMORY[0x24BDAC7A8](v16);
  v94 = (char *)&v90 - v17;
  MEMORY[0x24BDAC7A8](v18);
  v99 = (char *)&v90 - v19;
  MEMORY[0x24BDAC7A8](v20);
  v98 = (char *)&v90 - v21;
  MEMORY[0x24BDAC7A8](v22);
  v101 = (char *)&v90 - v23;
  MEMORY[0x24BDAC7A8](v24);
  v95 = (char *)&v90 - v25;
  MEMORY[0x24BDAC7A8](v26);
  v97 = (char *)&v90 - v27;
  MEMORY[0x24BDAC7A8](v28);
  v100 = (char *)&v90 - v29;
  MEMORY[0x24BDAC7A8](v30);
  v32 = (char *)&v90 - v31;
  MEMORY[0x24BDAC7A8](v33);
  v35 = (char *)&v90 - v34;
  type metadata accessor for [(_:)](0, (unint64_t *)&lazy cache variable for type metadata for AttributedString.AdaptiveImageGlyph?, (uint64_t (*)(uint64_t))MEMORY[0x24BDC46B0], v2);
  MEMORY[0x24BDAC7A8](v36);
  v38 = (char *)&v90 - v37;
  KeyPath = swift_getKeyPath();
  swift_getKeyPath();
  lazy protocol witness table accessor for type AttributeScopes.SwiftUIAttributes.EmojiTextAttachmentAttribute and conformance AttributeScopes.SwiftUIAttributes.EmojiTextAttachmentAttribute();
  v116 = a1;
  AttributedString.Runs.Run.subscript.getter();
  swift_release();
  v92 = v107 != 0;
  if (v107)

  v39 = swift_getKeyPath();
  MEMORY[0x24BDAC7A8](v39);
  swift_getKeyPath();
  lazy protocol witness table accessor for type AttributeScopes.SwiftUIAttributes.AdaptiveImageGlyphAttribute and conformance AttributeScopes.SwiftUIAttributes.AdaptiveImageGlyphAttribute();
  v40 = v116;
  AttributedString.Runs.Run.subscript.getter();
  swift_release();
  v41 = type metadata accessor for AttributedString.AdaptiveImageGlyph();
  v42 = (uint64_t (*)(uint64_t))MEMORY[0x24BDC46B0];
  v43 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v41 - 8) + 48))(v38, 1, v41);
  outlined destroy of (style: Duration.TimeFormatStyle.Attributed, smallestField: Date.ComponentsFormatStyle.Field)?((uint64_t)v38, (unint64_t *)&lazy cache variable for type metadata for AttributedString.AdaptiveImageGlyph?, v42);
  v44 = swift_getKeyPath();
  MEMORY[0x24BDAC7A8](v44);
  swift_getKeyPath();
  lazy protocol witness table accessor for type AttributeScopes.SwiftUIAttributes.FontAttribute and conformance AttributeScopes.SwiftUIAttributes.FontAttribute();
  AttributedString.Runs.Run.subscript.getter();
  swift_release();
  v45 = v107;
  swift_release();
  v46 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 16);
  v46(v35, v40, v5);
  if (v45)
  {
    v47 = *(void (**)(char *, uint64_t))(v6 + 8);
    v47(v35, v5);
    v46(v32, v40, v5);
LABEL_6:
    v47(v32, v5);
    v50 = v100;
    v46(v100, v40, v5);
LABEL_7:
    v51 = v104;
    v52 = v94;
    v53 = v98;
    v54 = v95;
    v47(v50, v5);
    v55 = v97;
    v46(v97, v40, v5);
LABEL_8:
    v47(v55, v5);
    v46(v54, v40, v5);
LABEL_9:
    v47(v54, v5);
    v56 = v101;
    v46(v101, v40, v5);
LABEL_10:
    v47(v56, v5);
    v46(v53, v40, v5);
LABEL_11:
    v57 = v96;
    v47(v53, v5);
    v58 = v99;
    v46(v99, v40, v5);
LABEL_12:
    v47(v58, v5);
    v46(v52, v40, v5);
LABEL_13:
    v47(v52, v5);
    v59 = v102;
    v46(v102, v40, v5);
    v60 = v103;
LABEL_14:
    v47(v59, v5);
    v46(v57, v40, v5);
LABEL_15:
    v47(v57, v5);
    v46(v60, v40, v5);
LABEL_16:
    v61 = v105;
    v47(v60, v5);
    v46(v61, v40, v5);
LABEL_17:
    v47(v61, v5);
    v46(v51, v40, v5);
LABEL_18:
    v47(v51, v5);
    return 1;
  }
  v91 = v43;
  v48 = swift_getKeyPath();
  MEMORY[0x24BDAC7A8](v48);
  swift_getKeyPath();
  lazy protocol witness table accessor for type AttributeScopes.SwiftUIAttributes.ForegroundColorAttribute and conformance AttributeScopes.SwiftUIAttributes.ForegroundColorAttribute();
  AttributedString.Runs.Run.subscript.getter();
  swift_release();
  v47 = *(void (**)(char *, uint64_t))(v6 + 8);
  v47(v35, v5);
  v49 = v107;
  swift_release();
  v46(v32, v40, v5);
  if (v49)
    goto LABEL_6;
  v63 = swift_getKeyPath();
  MEMORY[0x24BDAC7A8](v63);
  swift_getKeyPath();
  lazy protocol witness table accessor for type AttributeScopes.SwiftUIAttributes.BackgroundColorAttribute and conformance AttributeScopes.SwiftUIAttributes.BackgroundColorAttribute();
  AttributedString.Runs.Run.subscript.getter();
  swift_release();
  v47(v32, v5);
  v64 = v107;
  swift_release();
  v50 = v100;
  v46(v100, v40, v5);
  if (v64)
    goto LABEL_7;
  v65 = swift_getKeyPath();
  MEMORY[0x24BDAC7A8](v65);
  swift_getKeyPath();
  lazy protocol witness table accessor for type AttributeScopes.SwiftUIAttributes.StrikethroughStyleAttribute and conformance AttributeScopes.SwiftUIAttributes.StrikethroughStyleAttribute();
  AttributedString.Runs.Run.subscript.getter();
  swift_release();
  v47(v50, v5);
  v66 = v108;
  outlined consume of Text.LineStyle?((uint64_t)v107, v108);
  v55 = v97;
  v46(v97, v40, v5);
  v53 = v98;
  if (v66 != 1)
  {
    v51 = v104;
    v52 = v94;
    v54 = v95;
    goto LABEL_8;
  }
  v67 = swift_getKeyPath();
  MEMORY[0x24BDAC7A8](v67);
  swift_getKeyPath();
  lazy protocol witness table accessor for type AttributeScopes.SwiftUIAttributes.UnderlineStyleAttribute and conformance AttributeScopes.SwiftUIAttributes.UnderlineStyleAttribute();
  AttributedString.Runs.Run.subscript.getter();
  swift_release();
  v47(v55, v5);
  v68 = v108;
  outlined consume of Text.LineStyle?((uint64_t)v107, v108);
  v54 = v95;
  v46(v95, v40, v5);
  if (v68 != 1)
  {
    v51 = v104;
    v52 = v94;
    goto LABEL_9;
  }
  v69 = swift_getKeyPath();
  MEMORY[0x24BDAC7A8](v69);
  swift_getKeyPath();
  lazy protocol witness table accessor for type AttributeScopes.SwiftUIAttributes.EncapsulationAttribute and conformance AttributeScopes.SwiftUIAttributes.EncapsulationAttribute();
  AttributedString.Runs.Run.subscript.getter();
  swift_release();
  v47(v54, v5);
  v70 = v115;
  outlined consume of Text.Encapsulation?((uint64_t)v107, v108, v109, v110, v111, v112, v113, v114, v115);
  v56 = v101;
  v46(v101, v40, v5);
  if (v70 != 1)
  {
    v51 = v104;
    v52 = v94;
    goto LABEL_10;
  }
  v71 = swift_getKeyPath();
  MEMORY[0x24BDAC7A8](v71);
  swift_getKeyPath();
  lazy protocol witness table accessor for type AttributeScopes.SwiftUIAttributes.KerningAttribute and conformance AttributeScopes.SwiftUIAttributes.KerningAttribute();
  AttributedString.Runs.Run.subscript.getter();
  v40 = v116;
  swift_release();
  v47(v56, v5);
  v72 = v108;
  v46(v53, v40, v5);
  if ((v72 & 1) == 0)
  {
    v51 = v104;
    v52 = v94;
    goto LABEL_11;
  }
  v73 = swift_getKeyPath();
  MEMORY[0x24BDAC7A8](v73);
  swift_getKeyPath();
  lazy protocol witness table accessor for type AttributeScopes.SwiftUIAttributes.TrackingAttribute and conformance AttributeScopes.SwiftUIAttributes.TrackingAttribute();
  AttributedString.Runs.Run.subscript.getter();
  v40 = v116;
  swift_release();
  v47(v53, v5);
  v74 = v108;
  v58 = v99;
  v46(v99, v40, v5);
  v57 = v96;
  if ((v74 & 1) == 0)
  {
    v51 = v104;
    v52 = v94;
    goto LABEL_12;
  }
  v75 = swift_getKeyPath();
  MEMORY[0x24BDAC7A8](v75);
  swift_getKeyPath();
  lazy protocol witness table accessor for type AttributeScopes.SwiftUIAttributes.BaselineOffsetAttribute and conformance AttributeScopes.SwiftUIAttributes.BaselineOffsetAttribute();
  AttributedString.Runs.Run.subscript.getter();
  swift_release();
  v47(v58, v5);
  v76 = v108;
  v52 = v94;
  v46(v94, v40, v5);
  if ((v76 & 1) == 0)
  {
    v51 = v104;
    goto LABEL_13;
  }
  v77 = swift_getKeyPath();
  MEMORY[0x24BDAC7A8](v77);
  swift_getKeyPath();
  lazy protocol witness table accessor for type AttributeScopes.SwiftUIAttributes.TextScaleAttribute and conformance AttributeScopes.SwiftUIAttributes.TextScaleAttribute();
  AttributedString.Runs.Run.subscript.getter();
  swift_release();
  v47(v52, v5);
  v78 = v107;
  v59 = v102;
  v46(v102, v40, v5);
  if (v78 != 2)
  {
    v60 = v103;
    v51 = v104;
    goto LABEL_14;
  }
  v79 = swift_getKeyPath();
  MEMORY[0x24BDAC7A8](v79);
  swift_getKeyPath();
  lazy protocol witness table accessor for type AttributeScopes.SwiftUIAttributes.SuperscriptAttribute and conformance AttributeScopes.SwiftUIAttributes.SuperscriptAttribute();
  AttributedString.Runs.Run.subscript.getter();
  swift_release();
  v47(v59, v5);
  v80 = (char)v107;
  v46(v57, v40, v5);
  if ((v80 & 1) == 0)
  {
    v60 = v103;
    v51 = v104;
    goto LABEL_15;
  }
  lazy protocol witness table accessor for type AttributeScopes.SwiftUIAttributes.PrivateStrikethroughColorAttribute and conformance AttributeScopes.SwiftUIAttributes.PrivateStrikethroughColorAttribute();
  AttributedString.Runs.Run.subscript.getter();
  v40 = v116;
  v47(v57, v5);
  v81 = v107;
  swift_release();
  v60 = v103;
  v46(v103, v40, v5);
  if (v81)
  {
    v51 = v104;
    goto LABEL_16;
  }
  lazy protocol witness table accessor for type AttributeScopes.SwiftUIAttributes.PrivateUnderlineColorAttribute and conformance AttributeScopes.SwiftUIAttributes.PrivateUnderlineColorAttribute();
  AttributedString.Runs.Run.subscript.getter();
  v47(v60, v5);
  v82 = v107;
  swift_release();
  v61 = v105;
  v46(v105, v40, v5);
  if (v82)
  {
    v51 = v104;
    v40 = v116;
    goto LABEL_17;
  }
  v83 = swift_getKeyPath();
  MEMORY[0x24BDAC7A8](v83);
  swift_getKeyPath();
  lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.InlinePresentationIntentAttribute and conformance AttributeScopes.FoundationAttributes.InlinePresentationIntentAttribute();
  AttributedString.Runs.Run.subscript.getter();
  swift_release();
  if ((v108 & 1) != 0)
  {
    v47(v105, v5);
    v46(v104, v116, v5);
  }
  else
  {
    v84 = v107 & 0x27;
    v47(v105, v5);
    v46(v104, v116, v5);
    if (v84)
    {
      v51 = v104;
      goto LABEL_18;
    }
  }
  v85 = swift_getKeyPath();
  MEMORY[0x24BDAC7A8](v85);
  swift_getKeyPath();
  lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.LinkAttribute and conformance AttributeScopes.FoundationAttributes.LinkAttribute();
  v86 = (uint64_t)v93;
  v87 = v104;
  AttributedString.Runs.Run.subscript.getter();
  swift_release();
  v47(v87, v5);
  v88 = type metadata accessor for URL();
  v89 = (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0];
  LODWORD(v87) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v88 - 8) + 48))(v86, 1, v88);
  outlined destroy of (style: Duration.TimeFormatStyle.Attributed, smallestField: Date.ComponentsFormatStyle.Field)?(v86, &lazy cache variable for type metadata for URL?, v89);
  result = v92;
  if ((_DWORD)v87 != 1 || v91 != 1)
    return 1;
  return result;
}

uint64_t Dictionary<>.transferAttributedStringStyles(to:)(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  unint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  id v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  id v36;
  uint64_t v37;
  char v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  id v45;
  uint64_t v46;
  char v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  id v54;
  uint64_t v55;
  char v56;
  __int128 v57;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  id v63;
  uint64_t v64;
  char v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  void *v69;
  uint64_t v70;
  uint64_t v71;
  id v72;
  uint64_t v73;
  char v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  id v80;
  id v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  void *v86;
  uint64_t v87;
  uint64_t v88;
  id v89;
  uint64_t v90;
  char v91;
  void *v92;
  uint64_t v93;
  uint64_t v94;
  id v95;
  uint64_t v96;
  char v97;
  void *v98;
  uint64_t v99;
  uint64_t v100;
  id v101;
  uint64_t v102;
  char v103;
  void *v104;
  uint64_t v105;
  uint64_t v106;
  id v107;
  uint64_t v108;
  char v109;
  uint64_t v110;
  void *v111;
  uint64_t v112;
  uint64_t v113;
  id v114;
  uint64_t v115;
  char v116;
  void *v117;
  uint64_t v118;
  uint64_t v119;
  id v120;
  uint64_t v121;
  char v122;
  char *v123;
  char *v124;
  uint64_t v125;
  char *v126;
  uint64_t v127;
  char v128;
  unint64_t v129;
  void *v130;
  void *v131;
  uint64_t v132;
  id v133;
  uint64_t v134;
  char v135;
  uint64_t v136;
  id v137;
  uint64_t v138;
  char v139;
  id v140;
  char v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  BOOL v146;
  uint64_t v147;
  id v148;
  uint64_t v149;
  char v150;
  id v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  void *v155;
  char *v156;
  void (*v157)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v158;
  uint64_t v159;
  void *v160;
  void *v161;
  uint64_t v162;
  id v163;
  uint64_t v164;
  char v165;
  uint64_t v166;
  uint64_t v167;
  int v168;
  void (**v169)(char *, uint64_t, uint64_t);
  void (*v170)(uint64_t, _QWORD, uint64_t, uint64_t);
  char *v171;
  char *v172;
  uint64_t v173;
  uint64_t v174;
  __int128 v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  int v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  char *v189;
  char *v190;
  char *v191;
  id v192;
  id v193;
  id v194;
  id v195;
  id v196;
  id v197;
  id v198;
  id v199;
  id v200;
  id v201;
  id v202;
  uint64_t v203;
  char *v204;
  id v205;
  id v206;
  uint64_t v207;
  id v208;
  uint64_t v209;
  __int128 v210;
  __int128 v211;
  void *v212;
  unsigned __int8 v213;
  uint64_t v214;
  unsigned __int8 v215;
  uint64_t v216;
  uint64_t v217;
  unsigned __int8 v218;
  uint64_t v219;
  unsigned __int8 v220;
  uint64_t v221;
  __int128 v222;
  __int128 v223;

  v2 = v1;
  type metadata accessor for [(_:)](0, (unint64_t *)&lazy cache variable for type metadata for AttributedString.AdaptiveImageGlyph?, (uint64_t (*)(uint64_t))MEMORY[0x24BDC46B0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v4);
  v191 = (char *)&v176 - v5;
  v207 = type metadata accessor for AttributedString.AdaptiveImageGlyph();
  v6 = *(id *)(v207 - 8);
  MEMORY[0x24BDAC7A8](v207);
  v190 = (char *)&v176 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v203 = type metadata accessor for TypesettingLanguage(0);
  MEMORY[0x24BDAC7A8](v203);
  v189 = (char *)&v176 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = MEMORY[0x24BDAC7A8](v9);
  v204 = (char *)&v176 - v11;
  v12 = (void *)MEMORY[0x23B7C5DAC](0x2E49557466697753, 0xEC000000746E6F46, v10);
  v13 = *v1;
  v14 = *(_QWORD *)(v13 + 16);
  v206 = v12;
  if (!v14)
  {
    v210 = 0u;
    v211 = 0u;
    goto LABEL_8;
  }
  v15 = v12;
  v16 = specialized __RawDictionaryStorage.find<A>(_:)(v15);
  if ((v17 & 1) == 0)
  {
    v210 = 0u;
    v211 = 0u;

    goto LABEL_8;
  }
  outlined init with copy of Any(*(_QWORD *)(v13 + 56) + 32 * v16, (uint64_t)&v210);

  if (!*((_QWORD *)&v211 + 1))
  {
LABEL_8:
    outlined destroy of TypesettingConfiguration((uint64_t)&v210, (uint64_t (*)(_QWORD))type metadata accessor for Any?);
    goto LABEL_9;
  }
  if ((swift_dynamicCast() & 1) != 0)
  {
    v18 = v222;
    v19 = *(_QWORD *)a1;
    swift_retain();
    outlined consume of EffectAnimator<A>.State<A>(v19);
    *(_QWORD *)a1 = v18;
    v210 = 0u;
    v211 = 0u;
    specialized Dictionary.subscript.setter((uint64_t)&v210, v15);
    swift_release();
  }
LABEL_9:
  v20 = (void *)MEMORY[0x23B7C5DAC](0xD000000000000017, 0x80000002352E3830);
  v21 = *v2;
  v22 = *(_QWORD *)(*v2 + 16);
  v205 = v20;
  if (!v22)
  {
    v210 = 0u;
    v211 = 0u;
LABEL_17:
    outlined destroy of TypesettingConfiguration((uint64_t)&v210, (uint64_t (*)(_QWORD))type metadata accessor for Any?);
    goto LABEL_18;
  }
  v23 = v20;
  v24 = specialized __RawDictionaryStorage.find<A>(_:)(v23);
  if ((v25 & 1) != 0)
  {
    outlined init with copy of Any(*(_QWORD *)(v21 + 56) + 32 * v24, (uint64_t)&v210);
  }
  else
  {
    v210 = 0u;
    v211 = 0u;
  }

  if (!*((_QWORD *)&v211 + 1))
    goto LABEL_17;
  if ((swift_dynamicCast() & 1) != 0)
  {
    v26 = v222;
    v27 = *(_QWORD *)(a1 + 16);
    swift_retain();
    outlined consume of Text.Style.TextStyleColor(v27);
    *(_QWORD *)(a1 + 16) = v26;
    v210 = 0u;
    v211 = 0u;
    specialized Dictionary.subscript.setter((uint64_t)&v210, v23);
    swift_release();
  }
LABEL_18:
  v208 = (id)MEMORY[0x23B7C5DAC](0xD000000000000017, 0x80000002352E3850);
  v28 = *v2;
  if (!*(_QWORD *)(*v2 + 16))
  {
    v210 = 0u;
    v211 = 0u;
LABEL_26:
    outlined destroy of TypesettingConfiguration((uint64_t)&v210, (uint64_t (*)(_QWORD))type metadata accessor for Any?);
    goto LABEL_27;
  }
  v29 = v208;
  v30 = specialized __RawDictionaryStorage.find<A>(_:)(v29);
  if ((v31 & 1) != 0)
  {
    outlined init with copy of Any(*(_QWORD *)(v28 + 56) + 32 * v30, (uint64_t)&v210);
  }
  else
  {
    v210 = 0u;
    v211 = 0u;
  }

  if (!*((_QWORD *)&v211 + 1))
    goto LABEL_26;
  if ((swift_dynamicCast() & 1) != 0)
  {
    v32 = v222;
    swift_retain();
    swift_release();
    *(_QWORD *)(a1 + 24) = v32;
    v210 = 0u;
    v211 = 0u;
    specialized Dictionary.subscript.setter((uint64_t)&v210, v29);
    swift_release();
  }
LABEL_27:
  v33 = (void *)MEMORY[0x23B7C5DAC](0xD00000000000001ALL, 0x80000002352E3870);
  v34 = *v2;
  v35 = *(_QWORD *)(*v2 + 16);
  v202 = v33;
  if (!v35)
  {
    v210 = 0u;
    v211 = 0u;
LABEL_35:
    outlined destroy of TypesettingConfiguration((uint64_t)&v210, (uint64_t (*)(_QWORD))type metadata accessor for Any?);
    goto LABEL_36;
  }
  v36 = v33;
  v37 = specialized __RawDictionaryStorage.find<A>(_:)(v36);
  if ((v38 & 1) != 0)
  {
    outlined init with copy of Any(*(_QWORD *)(v34 + 56) + 32 * v37, (uint64_t)&v210);
  }
  else
  {
    v210 = 0u;
    v211 = 0u;
  }

  if (!*((_QWORD *)&v211 + 1))
    goto LABEL_35;
  if ((swift_dynamicCast() & 1) != 0)
  {
    v39 = v222;
    v40 = *(_QWORD *)(a1 + 80);
    v41 = *(_QWORD *)(a1 + 88);
    swift_retain();
    outlined consume of Text.Style.LineStyle(v40, v41);
    *(_OWORD *)(a1 + 80) = v39;
    v210 = 0u;
    v211 = 0u;
    specialized Dictionary.subscript.setter((uint64_t)&v210, v36);
    swift_release();
  }
LABEL_36:
  v42 = (void *)MEMORY[0x23B7C5DAC](0xD00000000000001ALL, 0x80000002352E3890);
  v43 = *v2;
  v44 = *(_QWORD *)(*v2 + 16);
  v201 = v42;
  if (!v44)
  {
    v210 = 0u;
    v211 = 0u;
LABEL_46:
    outlined destroy of TypesettingConfiguration((uint64_t)&v210, (uint64_t (*)(_QWORD))type metadata accessor for Any?);
    goto LABEL_47;
  }
  v45 = v42;
  v46 = specialized __RawDictionaryStorage.find<A>(_:)(v45);
  if ((v47 & 1) != 0)
  {
    outlined init with copy of Any(*(_QWORD *)(v43 + 56) + 32 * v46, (uint64_t)&v210);
  }
  else
  {
    v210 = 0u;
    v211 = 0u;
  }

  if (!*((_QWORD *)&v211 + 1))
    goto LABEL_46;
  if ((swift_dynamicCast() & 1) != 0)
  {
    v48 = v222;
    v49 = *(_QWORD *)(a1 + 88);
    if ((unint64_t)(v49 - 1) <= 1)
    {
      v50 = *(_QWORD *)(a1 + 80);
      swift_retain();
      outlined consume of Text.Style.LineStyle(v50, v49);
      *(_QWORD *)(a1 + 80) = 1;
      *(_QWORD *)(a1 + 88) = v48;
    }
    v210 = 0u;
    v211 = 0u;
    specialized Dictionary.subscript.setter((uint64_t)&v210, v45);
    swift_release();
  }
LABEL_47:
  v51 = (void *)MEMORY[0x23B7C5DAC](0xD000000000000016, 0x80000002352E38B0);
  v52 = *v2;
  v53 = *(_QWORD *)(*v2 + 16);
  v200 = v51;
  if (!v53)
  {
    v210 = 0u;
    v211 = 0u;
LABEL_55:
    outlined destroy of TypesettingConfiguration((uint64_t)&v210, (uint64_t (*)(_QWORD))type metadata accessor for Any?);
    goto LABEL_56;
  }
  v54 = v51;
  v55 = specialized __RawDictionaryStorage.find<A>(_:)(v54);
  if ((v56 & 1) != 0)
  {
    outlined init with copy of Any(*(_QWORD *)(v52 + 56) + 32 * v55, (uint64_t)&v210);
  }
  else
  {
    v210 = 0u;
    v211 = 0u;
  }

  if (!*((_QWORD *)&v211 + 1))
    goto LABEL_55;
  if ((swift_dynamicCast() & 1) != 0)
  {
    v57 = v222;
    v58 = *(_QWORD *)(a1 + 96);
    v59 = *(_QWORD *)(a1 + 104);
    swift_retain();
    outlined consume of Text.Style.LineStyle(v58, v59);
    *(_OWORD *)(a1 + 96) = v57;
    v210 = 0u;
    v211 = 0u;
    specialized Dictionary.subscript.setter((uint64_t)&v210, v54);
    swift_release();
  }
LABEL_56:
  v60 = (void *)MEMORY[0x23B7C5DAC](0xD000000000000016, 0x80000002352E38D0);
  v61 = *v2;
  v62 = *(_QWORD *)(*v2 + 16);
  v199 = v60;
  if (!v62)
  {
    v210 = 0u;
    v211 = 0u;
LABEL_66:
    outlined destroy of TypesettingConfiguration((uint64_t)&v210, (uint64_t (*)(_QWORD))type metadata accessor for Any?);
    goto LABEL_67;
  }
  v63 = v60;
  v64 = specialized __RawDictionaryStorage.find<A>(_:)(v63);
  if ((v65 & 1) != 0)
  {
    outlined init with copy of Any(*(_QWORD *)(v61 + 56) + 32 * v64, (uint64_t)&v210);
  }
  else
  {
    v210 = 0u;
    v211 = 0u;
  }

  if (!*((_QWORD *)&v211 + 1))
    goto LABEL_66;
  if ((swift_dynamicCast() & 1) != 0)
  {
    v66 = v222;
    v67 = *(_QWORD *)(a1 + 104);
    if ((unint64_t)(v67 - 1) <= 1)
    {
      v68 = *(_QWORD *)(a1 + 96);
      swift_retain();
      outlined consume of Text.Style.LineStyle(v68, v67);
      *(_QWORD *)(a1 + 96) = 1;
      *(_QWORD *)(a1 + 104) = v66;
    }
    v210 = 0u;
    v211 = 0u;
    specialized Dictionary.subscript.setter((uint64_t)&v210, v63);
    swift_release();
  }
LABEL_67:
  v69 = (void *)MEMORY[0x23B7C5DAC](0xD000000000000015, 0x80000002352E38F0);
  v70 = *v2;
  v71 = *(_QWORD *)(*v2 + 16);
  v209 = a1;
  v198 = v69;
  if (!v71)
  {
    v222 = 0u;
    v223 = 0u;
LABEL_75:
    outlined destroy of TypesettingConfiguration((uint64_t)&v222, (uint64_t (*)(_QWORD))type metadata accessor for Any?);
    goto LABEL_76;
  }
  v72 = v69;
  v73 = specialized __RawDictionaryStorage.find<A>(_:)(v72);
  if ((v74 & 1) != 0)
  {
    outlined init with copy of Any(*(_QWORD *)(v70 + 56) + 32 * v73, (uint64_t)&v222);
  }
  else
  {
    v222 = 0u;
    v223 = 0u;
  }

  if (!*((_QWORD *)&v223 + 1))
    goto LABEL_75;
  if ((swift_dynamicCast() & 1) != 0)
  {
    v196 = (id)v210;
    v195 = (id)BYTE8(v210);
    v194 = (id)v211;
    v193 = (id)BYTE8(v211);
    v192 = v212;
    v188 = v213;
    v187 = v214;
    v186 = v215;
    v75 = v216;
    v185 = v217;
    v184 = v218;
    v183 = v219;
    v182 = v220;
    v181 = *(_QWORD *)(a1 + 112);
    v180 = *(_QWORD *)(a1 + 120);
    v179 = *(_QWORD *)(a1 + 128);
    v76 = *(_QWORD *)(v209 + 136);
    v77 = *(_QWORD *)(v209 + 144);
    v78 = *(_QWORD *)(v209 + 152);
    v197 = v6;
    v178 = *(_QWORD *)(v209 + 160);
    v177 = *(_QWORD *)(v209 + 168);
    v176 = *(_OWORD *)(v209 + 176);
    swift_retain();
    v79 = v76;
    a1 = v209;
    v6 = v197;
    outlined consume of Text.Encapsulation?(v181, v180, v179, v79, v77, v78, v178, v177, v176);
    v80 = v195;
    *(_QWORD *)(a1 + 112) = v196;
    *(_QWORD *)(a1 + 120) = v80;
    v81 = v193;
    *(_QWORD *)(a1 + 128) = v194;
    *(_QWORD *)(a1 + 136) = v81;
    v82 = v188;
    *(_QWORD *)(a1 + 144) = v192;
    *(_QWORD *)(a1 + 152) = v82;
    v83 = v186;
    *(_QWORD *)(a1 + 160) = v187;
    *(_QWORD *)(a1 + 168) = v83;
    v84 = v185;
    *(_QWORD *)(a1 + 176) = v75;
    *(_QWORD *)(a1 + 184) = v84;
    v85 = v183;
    *(_QWORD *)(a1 + 192) = v184;
    *(_QWORD *)(a1 + 200) = v85;
    *(_BYTE *)(a1 + 208) = v182;
    v210 = 0u;
    v211 = 0u;
    specialized Dictionary.subscript.setter((uint64_t)&v210, v72);
    swift_release();
  }
LABEL_76:
  v86 = (void *)MEMORY[0x23B7C5DAC](0x2E49557466697753, 0xEC0000006E72654BLL);
  v87 = *v2;
  v88 = *(_QWORD *)(*v2 + 16);
  v197 = v86;
  if (!v88)
  {
    v210 = 0u;
    v211 = 0u;
LABEL_84:
    outlined destroy of TypesettingConfiguration((uint64_t)&v210, (uint64_t (*)(_QWORD))type metadata accessor for Any?);
    goto LABEL_85;
  }
  v89 = v86;
  v90 = specialized __RawDictionaryStorage.find<A>(_:)(v89);
  if ((v91 & 1) != 0)
  {
    outlined init with copy of Any(*(_QWORD *)(v87 + 56) + 32 * v90, (uint64_t)&v210);
  }
  else
  {
    v210 = 0u;
    v211 = 0u;
  }

  if (!*((_QWORD *)&v211 + 1))
    goto LABEL_84;
  if ((swift_dynamicCast() & 1) != 0)
  {
    *(_QWORD *)(a1 + 48) = v222;
    *(_BYTE *)(a1 + 56) = 0;
    v210 = 0u;
    v211 = 0u;
    specialized Dictionary.subscript.setter((uint64_t)&v210, v89);
  }
LABEL_85:
  v92 = (void *)MEMORY[0x23B7C5DAC](0xD000000000000010, 0x80000002352E3910);
  v93 = *v2;
  v94 = *(_QWORD *)(*v2 + 16);
  v196 = v92;
  if (!v94)
  {
    v210 = 0u;
    v211 = 0u;
LABEL_93:
    outlined destroy of TypesettingConfiguration((uint64_t)&v210, (uint64_t (*)(_QWORD))type metadata accessor for Any?);
    goto LABEL_94;
  }
  v95 = v92;
  v96 = specialized __RawDictionaryStorage.find<A>(_:)(v95);
  if ((v97 & 1) != 0)
  {
    outlined init with copy of Any(*(_QWORD *)(v93 + 56) + 32 * v96, (uint64_t)&v210);
  }
  else
  {
    v210 = 0u;
    v211 = 0u;
  }

  if (!*((_QWORD *)&v211 + 1))
    goto LABEL_93;
  if ((swift_dynamicCast() & 1) != 0)
  {
    *(_QWORD *)(a1 + 64) = v222;
    *(_BYTE *)(a1 + 72) = 0;
    v210 = 0u;
    v211 = 0u;
    specialized Dictionary.subscript.setter((uint64_t)&v210, v95);
  }
LABEL_94:
  v98 = (void *)MEMORY[0x23B7C5DAC](0xD000000000000016, 0x80000002352E3930);
  v99 = *v2;
  v100 = *(_QWORD *)(*v2 + 16);
  v195 = v98;
  if (!v100)
  {
    v210 = 0u;
    v211 = 0u;
LABEL_102:
    outlined destroy of TypesettingConfiguration((uint64_t)&v210, (uint64_t (*)(_QWORD))type metadata accessor for Any?);
    goto LABEL_103;
  }
  v101 = v98;
  v102 = specialized __RawDictionaryStorage.find<A>(_:)(v101);
  if ((v103 & 1) != 0)
  {
    outlined init with copy of Any(*(_QWORD *)(v99 + 56) + 32 * v102, (uint64_t)&v210);
  }
  else
  {
    v210 = 0u;
    v211 = 0u;
  }

  if (!*((_QWORD *)&v211 + 1))
    goto LABEL_102;
  if ((swift_dynamicCast() & 1) != 0)
  {
    *(_QWORD *)(a1 + 32) = v222;
    *(_BYTE *)(a1 + 40) = 0;
    v210 = 0u;
    v211 = 0u;
    specialized Dictionary.subscript.setter((uint64_t)&v210, v101);
  }
LABEL_103:
  v104 = (void *)MEMORY[0x23B7C5DAC](0xD000000000000011, 0x80000002352E3950);
  v105 = *v2;
  v106 = *(_QWORD *)(*v2 + 16);
  v194 = v104;
  if (v106)
  {
    v107 = v104;
    v108 = specialized __RawDictionaryStorage.find<A>(_:)(v107);
    if ((v109 & 1) != 0)
    {
      outlined init with copy of Any(*(_QWORD *)(v105 + 56) + 32 * v108, (uint64_t)&v222);
    }
    else
    {
      v222 = 0u;
      v223 = 0u;
    }

    if (*((_QWORD *)&v223 + 1))
    {
      outlined init with take of Any(&v222, &v210);
      outlined init with copy of Any((uint64_t)&v210, (uint64_t)&v222);
      type metadata accessor for CTGlyphInfoRef(0);
      swift_dynamicCast();
      v110 = v221;

      *(_QWORD *)(a1 + 296) = v110;
      v222 = 0u;
      v223 = 0u;
      specialized Dictionary.subscript.setter((uint64_t)&v222, v107);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v210);
      goto LABEL_111;
    }
  }
  else
  {
    v222 = 0u;
    v223 = 0u;
  }
  outlined destroy of TypesettingConfiguration((uint64_t)&v222, (uint64_t (*)(_QWORD))type metadata accessor for Any?);
LABEL_111:
  v111 = (void *)MEMORY[0x23B7C5DAC](0xD000000000000011, 0x80000002352E3970);
  v112 = *v2;
  v113 = *(_QWORD *)(*v2 + 16);
  v193 = v111;
  if (!v113)
  {
    v210 = 0u;
    v211 = 0u;
LABEL_119:
    outlined destroy of TypesettingConfiguration((uint64_t)&v210, (uint64_t (*)(_QWORD))type metadata accessor for Any?);
    goto LABEL_120;
  }
  v114 = v111;
  v115 = specialized __RawDictionaryStorage.find<A>(_:)(v114);
  if ((v116 & 1) != 0)
  {
    outlined init with copy of Any(*(_QWORD *)(v112 + 56) + 32 * v115, (uint64_t)&v210);
  }
  else
  {
    v210 = 0u;
    v211 = 0u;
  }

  if (!*((_QWORD *)&v211 + 1))
    goto LABEL_119;
  if ((swift_dynamicCast() & 1) != 0)
  {
    *(_BYTE *)(a1 + 320) = v222;
    v210 = 0u;
    v211 = 0u;
    specialized Dictionary.subscript.setter((uint64_t)&v210, v114);
  }
LABEL_120:
  v117 = (void *)MEMORY[0x23B7C5DAC](0xD000000000000013, 0x80000002352E3990);
  v118 = *v2;
  v119 = *(_QWORD *)(*v2 + 16);
  v192 = v117;
  if (!v119)
  {
    v210 = 0u;
    v211 = 0u;
LABEL_128:
    outlined destroy of TypesettingConfiguration((uint64_t)&v210, (uint64_t (*)(_QWORD))type metadata accessor for Any?);
    goto LABEL_129;
  }
  v120 = v117;
  v121 = specialized __RawDictionaryStorage.find<A>(_:)(v120);
  if ((v122 & 1) != 0)
  {
    outlined init with copy of Any(*(_QWORD *)(v118 + 56) + 32 * v121, (uint64_t)&v210);
  }
  else
  {
    v210 = 0u;
    v211 = 0u;
  }

  if (!*((_QWORD *)&v211 + 1))
    goto LABEL_128;
  if (swift_dynamicCast())
  {
    *(_BYTE *)(a1 + 321) = 0;
    v210 = 0u;
    v211 = 0u;
    specialized Dictionary.subscript.setter((uint64_t)&v210, v120);
  }
LABEL_129:
  v123 = (char *)MEMORY[0x23B7C5DAC](0xD000000000000018, 0x80000002352E39B0);
  v124 = v123;
  v125 = *v2;
  if (!*(_QWORD *)(*v2 + 16))
  {
    v210 = 0u;
    v211 = 0u;
LABEL_137:
    outlined destroy of TypesettingConfiguration((uint64_t)&v210, (uint64_t (*)(_QWORD))type metadata accessor for Any?);
    goto LABEL_138;
  }
  v126 = v123;
  v127 = specialized __RawDictionaryStorage.find<A>(_:)(v126);
  if ((v128 & 1) != 0)
  {
    outlined init with copy of Any(*(_QWORD *)(v125 + 56) + 32 * v127, (uint64_t)&v210);
  }
  else
  {
    v210 = 0u;
    v211 = 0u;
  }

  if (!*((_QWORD *)&v211 + 1))
    goto LABEL_137;
  if ((swift_dynamicCast() & 1) != 0)
  {
    v129 = v222;
    type metadata accessor for Text.Style(0);
    specialized Array.replaceSubrange<A>(_:with:)(0, 0, v129);
    v210 = 0u;
    v211 = 0u;
    specialized Dictionary.subscript.setter((uint64_t)&v210, v126);
  }
LABEL_138:
  v130 = (void *)MEMORY[0x23B7C5DAC](0xD000000000000015, 0x80000002352E39D0);
  v131 = v130;
  v132 = *v2;
  if (!*(_QWORD *)(*v2 + 16))
  {
    v210 = 0u;
    v211 = 0u;
LABEL_146:
    outlined destroy of TypesettingConfiguration((uint64_t)&v210, (uint64_t (*)(_QWORD))type metadata accessor for Any?);
    goto LABEL_147;
  }
  v133 = v130;
  v134 = specialized __RawDictionaryStorage.find<A>(_:)(v133);
  if ((v135 & 1) != 0)
  {
    outlined init with copy of Any(*(_QWORD *)(v132 + 56) + 32 * v134, (uint64_t)&v210);
  }
  else
  {
    v210 = 0u;
    v211 = 0u;
  }

  if (!*((_QWORD *)&v211 + 1))
    goto LABEL_146;
  type metadata accessor for [(_:)](0, (unint64_t *)&lazy cache variable for type metadata for [AnyFontModifier], (uint64_t (*)(uint64_t))type metadata accessor for AnyFontModifier, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1250]);
  if ((swift_dynamicCast() & 1) != 0)
  {
    specialized Array.append<A>(contentsOf:)(v222);
    v210 = 0u;
    v211 = 0u;
    specialized Dictionary.subscript.setter((uint64_t)&v210, v133);
  }
LABEL_147:
  v136 = *v2;
  if (*(_QWORD *)(*v2 + 16))
  {
    v137 = (id)*MEMORY[0x24BDD0DF0];
    v138 = specialized __RawDictionaryStorage.find<A>(_:)(v137);
    if ((v139 & 1) != 0)
    {
      outlined init with copy of Any(*(_QWORD *)(v136 + 56) + 32 * v138, (uint64_t)&v210);
    }
    else
    {
      v210 = 0u;
      v211 = 0u;
    }

    if (*((_QWORD *)&v211 + 1))
    {
      if ((swift_dynamicCast() & 1) == 0)
        goto LABEL_161;
      v140 = v6;
      v141 = v222;
      if ((v222 & 1) != 0)
      {
        specialized static AnyFontModifier.static<A>(_:)();
        MEMORY[0x23B7C61A8]();
        if (*(_QWORD *)((*(_QWORD *)(a1 + 8) & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((*(_QWORD *)(a1 + 8) & 0xFFFFFFFFFFFFFF8)
                                                                                          + 0x18) >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
        a1 = v209;
        if ((v141 & 2) == 0)
        {
LABEL_156:
          if ((v141 & 4) == 0)
            goto LABEL_157;
          goto LABEL_189;
        }
      }
      else if ((v222 & 2) == 0)
      {
        goto LABEL_156;
      }
      specialized static AnyFontModifier.static<A>(_:)();
      MEMORY[0x23B7C61A8]();
      if (*(_QWORD *)((*(_QWORD *)(a1 + 8) & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((*(_QWORD *)(a1 + 8) & 0xFFFFFFFFFFFFFF8)
                                                                                        + 0x18) >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      a1 = v209;
      if ((v141 & 4) == 0)
      {
LABEL_157:
        if ((v141 & 0x20) == 0)
        {
LABEL_159:
          v210 = 0u;
          v211 = 0u;
          specialized Dictionary.subscript.setter((uint64_t)&v210, v137);
          v6 = v140;
          goto LABEL_161;
        }
LABEL_158:
        outlined consume of Text.Style.LineStyle(*(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88));
        *(_OWORD *)(a1 + 80) = xmmword_235260EF0;
        goto LABEL_159;
      }
LABEL_189:
      specialized static AnyFontModifier.static<A>(_:)();
      MEMORY[0x23B7C61A8]();
      if (*(_QWORD *)((*(_QWORD *)(a1 + 8) & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((*(_QWORD *)(a1 + 8) & 0xFFFFFFFFFFFFFF8)
                                                                                        + 0x18) >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      a1 = v209;
      if ((v141 & 0x20) == 0)
        goto LABEL_159;
      goto LABEL_158;
    }
  }
  else
  {
    v210 = 0u;
    v211 = 0u;
  }
  outlined destroy of TypesettingConfiguration((uint64_t)&v210, (uint64_t (*)(_QWORD))type metadata accessor for Any?);
LABEL_161:
  v142 = type metadata accessor for Text.Style(0);
  v143 = a1 + *(int *)(v142 + 84);
  if (one-time initialization token for automatic != -1)
    swift_once();
  v144 = __swift_project_value_buffer(v203, (uint64_t)static TypesettingLanguage.automatic);
  v145 = (uint64_t)v204;
  outlined init with copy of TypesettingLanguage(v144, (uint64_t)v204, type metadata accessor for TypesettingLanguage);
  v146 = specialized static TypesettingLanguage.Storage.== infix(_:_:)(v143, v145);
  outlined destroy of TypesettingConfiguration(v145, type metadata accessor for TypesettingLanguage);
  if (v146)
  {
    v147 = *v2;
    if (*(_QWORD *)(*v2 + 16))
    {
      v148 = (id)*MEMORY[0x24BDD0E98];
      v149 = specialized __RawDictionaryStorage.find<A>(_:)(v148);
      if ((v150 & 1) != 0)
      {
        outlined init with copy of Any(*(_QWORD *)(v147 + 56) + 32 * v149, (uint64_t)&v210);
      }
      else
      {
        v210 = 0u;
        v211 = 0u;
      }

      if (*((_QWORD *)&v211 + 1))
      {
        if ((swift_dynamicCast() & 1) != 0)
        {
          type metadata accessor for (Locale.Language, TypesettingLanguage.Flags)();
          v204 = v124;
          v151 = v6;
          v153 = v152;
          v154 = *(int *)(v152 + 48);
          swift_bridgeObjectRetain();
          v155 = v131;
          v156 = v189;
          Locale.Language.init(identifier:)();
          v156[v154] = 0;
          v157 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v153 - 8) + 56);
          v158 = v153;
          v6 = v151;
          v124 = v204;
          v157(v156, 0, 2, v158);
          swift_bridgeObjectRelease();
          v159 = (uint64_t)v156;
          v131 = v155;
          outlined assign with take of TypesettingLanguage(v159, v143);
        }
        goto LABEL_173;
      }
    }
    else
    {
      v210 = 0u;
      v211 = 0u;
    }
    outlined destroy of TypesettingConfiguration((uint64_t)&v210, (uint64_t (*)(_QWORD))type metadata accessor for Any?);
  }
LABEL_173:
  v160 = (void *)MEMORY[0x23B7C5DAC](0xD00000000000001ALL, 0x80000002352E3A10);
  v161 = v160;
  v162 = *v2;
  if (!*(_QWORD *)(*v2 + 16))
  {
    v210 = 0u;
    v211 = 0u;
    v166 = (uint64_t)v191;
LABEL_181:
    outlined destroy of TypesettingConfiguration((uint64_t)&v210, (uint64_t (*)(_QWORD))type metadata accessor for Any?);
    (*((void (**)(uint64_t, uint64_t, uint64_t, uint64_t))v6 + 7))(v166, 1, 1, v207);
    goto LABEL_182;
  }
  v163 = v160;
  v164 = specialized __RawDictionaryStorage.find<A>(_:)(v163);
  if ((v165 & 1) != 0)
  {
    outlined init with copy of Any(*(_QWORD *)(v162 + 56) + 32 * v164, (uint64_t)&v210);
  }
  else
  {
    v210 = 0u;
    v211 = 0u;
  }
  v166 = (uint64_t)v191;

  if (!*((_QWORD *)&v211 + 1))
    goto LABEL_181;
  v167 = v207;
  v168 = swift_dynamicCast();
  v169 = (void (**)(char *, uint64_t, uint64_t))v6;
  v170 = (void (*)(uint64_t, _QWORD, uint64_t, uint64_t))*((_QWORD *)v6 + 7);
  v170(v166, v168 ^ 1u, 1, v167);
  if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v169[6])(v166, 1, v167) != 1)
  {
    v171 = v124;
    v172 = v190;
    v173 = v207;
    v169[4](v190, v166, v207);
    v174 = v209 + *(int *)(v142 + 92);
    outlined destroy of (style: Duration.TimeFormatStyle.Attributed, smallestField: Date.ComponentsFormatStyle.Field)?(v174, (unint64_t *)&lazy cache variable for type metadata for AttributedString.AdaptiveImageGlyph?, (uint64_t (*)(uint64_t))MEMORY[0x24BDC46B0]);
    v169[2]((char *)v174, (uint64_t)v172, v173);
    v170(v174, 0, 1, v173);
    v210 = 0u;
    v211 = 0u;
    specialized Dictionary.subscript.setter((uint64_t)&v210, v163);

    return ((uint64_t (*)(char *, uint64_t))v169[1])(v172, v173);
  }
LABEL_182:

  return outlined destroy of (style: Duration.TimeFormatStyle.Attributed, smallestField: Date.ComponentsFormatStyle.Field)?(v166, (unint64_t *)&lazy cache variable for type metadata for AttributedString.AdaptiveImageGlyph?, (uint64_t (*)(uint64_t))MEMORY[0x24BDC46B0]);
}

uint64_t AttributedString.nsAttributedString(in:)(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  char v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  void *v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  id v31;
  uint64_t result;
  uint64_t v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  id v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  uint64_t v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  _OWORD v57[3];
  __int128 v58;
  __int128 v59;
  uint64_t v60;

  v43 = 0;
  v3 = type metadata accessor for Text.Style(0);
  v41 = *(_QWORD *)(v3 - 8);
  v4 = *(_QWORD *)(v41 + 64);
  MEMORY[0x24BDAC7A8](v3);
  v42 = (uint64_t)&v37 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v37 - v6;
  v8 = type metadata accessor for AttributedString();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v37 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *a1;
  v13 = a1[1];
  type metadata accessor for CAPresentationModifier(0, (unint64_t *)&lazy cache variable for type metadata for NSMutableAttributedString);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, v1, v8);
  v14 = (void *)NSAttributedString.init(_:)();
  LOWORD(v56) = 0;
  v54 = 0u;
  v55 = 0u;
  *((_QWORD *)&v56 + 1) = MEMORY[0x24BEE4AF8];
  *(_QWORD *)&v57[0] = MEMORY[0x24BEE4AF8];
  *(_OWORD *)((char *)v57 + 8) = 0u;
  *(_OWORD *)((char *)&v57[1] + 8) = 0u;
  *((_QWORD *)&v57[2] + 1) = 0;
  v58 = xmmword_235260F00;
  v60 = 0;
  v59 = MEMORY[0x24BEE4AF8];
  Text.Style.init()((uint64_t)v7);
  v44 = v13;
  if (v13)
  {
    swift_retain_n();
    swift_retain_n();
    v15 = specialized PropertyList.Tracker.value<A>(_:for:)(v12);
    swift_release();
    swift_release();
    swift_retain_n();
    swift_retain_n();
    v16 = specialized PropertyList.Tracker.value<A>(_:for:)(v12);
    swift_release_n();
    v40 = v13;
  }
  else
  {
    v17 = swift_retain_n();
    v18 = v43;
    v15 = specialized closure #1 in PropertyList.subscript.getter(v17);
    swift_release_n();
    v19 = swift_retain_n();
    v16 = specialized closure #1 in PropertyList.subscript.getter(v19);
    v43 = v18;
    swift_release();
    v40 = 0;
  }
  swift_release_n();
  v20 = v15 & 1;
  if ((v16 & 1) != 0)
    v20 = v15 & 1 | 0x10;
  v38 = v20;
  v39 = objc_msgSend(v14, sel_length);
  v37 = v7;
  v21 = v42;
  outlined init with copy of TypesettingLanguage((uint64_t)v7, v42, type metadata accessor for Text.Style);
  v22 = (*(unsigned __int8 *)(v41 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v41 + 80);
  v23 = v14;
  v24 = (v4 + v22 + 7) & 0xFFFFFFFFFFFFFFF8;
  v25 = (v24 + 39) & 0xFFFFFFFFFFFFFFF8;
  v26 = swift_allocObject();
  outlined init with take of Text.Style(v21, v26 + v22);
  *(_QWORD *)(v26 + v24) = v23;
  v27 = v26 + ((v24 + 15) & 0xFFFFFFFFFFFFFFF8);
  v28 = v44;
  *(_QWORD *)v27 = v12;
  *(_QWORD *)(v27 + 8) = v28;
  *(_BYTE *)(v27 + 16) = 0;
  *(_QWORD *)(v26 + v25) = v38;
  *(_QWORD *)(v26 + ((v25 + 15) & 0xFFFFFFFFFFFFFFF8)) = &v54;
  v29 = swift_allocObject();
  *(_QWORD *)(v29 + 16) = partial apply for closure #1 in NSMutableAttributedString.convertToPlatformStyled(style:environment:includeDefaultAttributes:options:properties:);
  *(_QWORD *)(v29 + 24) = v26;
  *(_QWORD *)&v47 = partial apply for thunk for @callee_guaranteed (@guaranteed [NSAttributedStringKey : Any], @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ();
  *((_QWORD *)&v47 + 1) = v29;
  *(_QWORD *)&v45 = MEMORY[0x24BDAC760];
  *((_QWORD *)&v45 + 1) = 1107296256;
  *(_QWORD *)&v46 = thunk for @escaping @callee_guaranteed (@guaranteed [NSAttributedStringKey : Any], @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ();
  *((_QWORD *)&v46 + 1) = &block_descriptor_17;
  v30 = _Block_copy(&v45);
  swift_retain();
  swift_retain();
  v31 = v23;
  swift_retain();
  swift_release();
  objc_msgSend(v31, sel_enumerateAttributesInRange_options_usingBlock_, 0, v39, 0, v30);
  _Block_release(v30);
  LOBYTE(v25) = swift_isEscapingClosureAtFileLocation();
  result = swift_release();
  if ((v25 & 1) != 0)
  {
    __break(1u);
  }
  else
  {
    swift_retain();
    swift_retain_n();
    if (v44)
    {
      v33 = swift_retain();
      v34 = specialized PropertyList.Tracker.value<A>(_:for:)(v33);
    }
    else
    {
      v35 = swift_retain_n();
      v34 = specialized closure #1 in PropertyList.subscript.getter(v35);
    }
    swift_release_n();
    swift_release_n();
    v36 = (uint64_t)v37;
    if ((v34 & 1) != 0 && (v56 & 4) == 0)
      LOWORD(v56) = v56 | 4;
    swift_release();
    outlined destroy of TypesettingConfiguration(v36, type metadata accessor for Text.Style);
    v51 = v58;
    v52 = v59;
    v53 = v60;
    v47 = v56;
    v48 = v57[0];
    v49 = v57[1];
    v50 = v57[2];
    v45 = v54;
    v46 = v55;
    outlined release of Text.ResolvedProperties(&v45);
    return (uint64_t)v31;
  }
  return result;
}

uint64_t closure #1 in NSMutableAttributedString.convertToPlatformStyled(style:environment:includeDefaultAttributes:options:properties:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7, uint64_t a8, unsigned __int8 a9, uint64_t a10, uint64_t a11)
{
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t (*v24)(_QWORD);
  id v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char isUniquelyReferenced_nonNull_native;
  Class isa;
  id v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  id v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;

  v52 = a9;
  v51 = a11;
  v18 = type metadata accessor for Text.Style(0);
  MEMORY[0x24BDAC7A8](v18);
  v20 = (char *)&v51 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v21);
  v23 = (char *)&v51 - v22;
  outlined init with copy of TypesettingLanguage(a5, (uint64_t)&v51 - v22, v24);
  v59 = a1;
  swift_bridgeObjectRetain();
  Dictionary<>.transferAttributedStringStyles(to:)((uint64_t)v23);
  v54 = a6;
  v55 = a2;
  v53 = a3;
  v25 = objc_msgSend(a6, sel_attributedSubstringFromRange_, a2, a3);
  v26 = objc_msgSend(v25, sel_string);

  v27 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v29 = v28;

  outlined init with copy of TypesettingLanguage((uint64_t)v23, (uint64_t)v20, type metadata accessor for Text.Style);
  v30 = swift_allocObject();
  *(_QWORD *)(v30 + 16) = v27;
  *(_QWORD *)(v30 + 24) = v29;
  v57 = a7;
  v58 = a8;
  v56 = a10;
  swift_bridgeObjectRetain();
  v31 = Text.Style.nsAttributes(content:environment:includeDefaultAttributes:with:properties:)((uint64_t)partial apply for implicit closure #2 in FormatStyleBox.format(in:idiom:), v30, &v57, v52, &v56, v51);
  swift_release();
  outlined destroy of TypesettingConfiguration((uint64_t)v20, type metadata accessor for Text.Style);
  v32 = v59;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v57 = v32;
  specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(v31, (uint64_t)specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A, @in_guaranteed B) -> (@out A, @out B), 0, isUniquelyReferenced_nonNull_native, (uint64_t)&v57);
  v59 = v57;
  swift_bridgeObjectRelease();
  type metadata accessor for NSAttributedStringKey(0);
  lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type NSAttributedStringKey and conformance NSAttributedStringKey, (uint64_t (*)(uint64_t))type metadata accessor for NSAttributedStringKey, (uint64_t)&protocol conformance descriptor for NSAttributedStringKey);
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v35 = v54;
  v36 = v53;
  objc_msgSend(v54, sel_setAttributes_range_, isa, v55, v53);

  v57 = a7;
  v58 = a8;
  v37 = String.caseConvertedIfNeeded(_:)(&v57, v27, v29);
  v39 = v38;
  swift_bridgeObjectRelease();
  if (!a8)
  {
    v57 = a7;
    v58 = 0;
    swift_retain();
    v50 = specialized static ShouldRedactContentKey.value(in:)(&v57, v47, v48, v49);
    swift_release();
    if ((v50 & 1) == 0)
      goto LABEL_4;
    goto LABEL_3;
  }
  swift_retain_n();
  swift_retain_n();
  v40 = specialized PropertyList.Tracker.derivedValue<A>(_:for:)(a7);
  swift_release_n();
  swift_release_n();
  if ((v40 & 1) != 0)
  {
LABEL_3:
    v41 = String.count.getter();
    v37 = MEMORY[0x23B7C5FA4](3081666804, 0xA400000000000000, v41);
    v43 = v42;
    swift_bridgeObjectRelease();
    v39 = v43;
  }
LABEL_4:
  v44 = v55;
  v45 = (void *)MEMORY[0x23B7C5DAC](v37, v39);
  swift_bridgeObjectRelease();
  objc_msgSend(v35, sel_replaceCharactersInRange_withString_, v44, v36, v45);

  return outlined destroy of TypesettingConfiguration((uint64_t)v23, type metadata accessor for Text.Style);
}

uint64_t sub_234E0D6A8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v1 = type metadata accessor for Text.Style(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = *(_QWORD *)(v2 + 64);
  v5 = v0 + v3;
  if (*(_QWORD *)(v0 + v3) >= 2uLL)
    swift_release();
  swift_bridgeObjectRelease();
  outlined consume of Text.Style.TextStyleColor(*(_QWORD *)(v5 + 16));
  swift_release();
  if ((unint64_t)(*(_QWORD *)(v5 + 88) - 1) >= 2)
    swift_release();
  if ((unint64_t)(*(_QWORD *)(v5 + 104) - 1) >= 2)
    swift_release();
  if (*(_QWORD *)(v5 + 176) != 1)
    swift_release();
  if (*(_QWORD *)(v5 + 248) != 1)
    swift_bridgeObjectRelease();
  if (*(_QWORD *)(v5 + 288) >= 2uLL)
  {
    outlined consume of Text.Storage(*(_QWORD *)(v5 + 264), *(_QWORD *)(v5 + 272), *(_BYTE *)(v5 + 280));
    swift_bridgeObjectRelease();
  }

  swift_release();
  swift_release();
  v6 = v5 + *(int *)(v1 + 84);
  type metadata accessor for (Locale.Language, TypesettingLanguage.Flags)();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v6, 2, v7))
  {
    v8 = type metadata accessor for Locale.Language();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v6, v8);
  }
  swift_bridgeObjectRelease();
  v9 = v5 + *(int *)(v1 + 92);
  v10 = type metadata accessor for AttributedString.AdaptiveImageGlyph();
  v11 = *(_QWORD *)(v10 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v9, v10);
  swift_bridgeObjectRelease();

  swift_release();
  swift_release();
  return swift_deallocObject();
}

unint64_t outlined consume of Text.Style.TextStyleColor(unint64_t result)
{
  if ((result >> 62) <= 1)
    return swift_release();
  return result;
}

void type metadata accessor for (Locale.Language, TypesettingLanguage.Flags)()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!lazy cache variable for type metadata for (Locale.Language, TypesettingLanguage.Flags))
  {
    type metadata accessor for Locale.Language();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (Locale.Language, TypesettingLanguage.Flags));
  }
}

uint64_t outlined init with take of Text.Style(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for Text.Style(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t partial apply for closure #1 in NSMutableAttributedString.convertToPlatformStyled(style:environment:includeDefaultAttributes:options:properties:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;

  v9 = *(_QWORD *)(type metadata accessor for Text.Style(0) - 8);
  v10 = (*(unsigned __int8 *)(v9 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  v11 = (*(_QWORD *)(v9 + 64) + v10 + 7) & 0xFFFFFFFFFFFFFFF8;
  return closure #1 in NSMutableAttributedString.convertToPlatformStyled(style:environment:includeDefaultAttributes:options:properties:)(a1, a2, a3, a4, v4 + v10, *(void **)(v4 + v11), *(_QWORD *)(v4 + ((v11 + 15) & 0xFFFFFFFFFFFFFFF8)), *(_QWORD *)(v4 + ((v11 + 15) & 0xFFFFFFFFFFFFFFF8) + 8), *(_BYTE *)(v4 + ((v11 + 15) & 0xFFFFFFFFFFFFFFF8) + 16), *(_QWORD *)(v4 + ((v11 + 39) & 0xFFFFFFFFFFFFFFF8)), *(_QWORD *)(v4 + ((((v11 + 39) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFF8)));
}

uint64_t sub_234E0DA1C()
{
  return swift_deallocObject();
}

uint64_t block_copy_helper_17(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_17()
{
  return swift_release();
}

uint64_t base witness table accessor for DecodingConfigurationProviding in AttributeScopes.SwiftUIAttributes()
{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type AttributeScopes.SwiftUIAttributes and conformance AttributeScopes.SwiftUIAttributes, type metadata accessor for AttributeScopes.SwiftUIAttributes, (uint64_t)&protocol conformance descriptor for AttributeScopes.SwiftUIAttributes);
}

uint64_t base witness table accessor for EncodingConfigurationProviding in AttributeScopes.SwiftUIAttributes()
{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type AttributeScopes.SwiftUIAttributes and conformance AttributeScopes.SwiftUIAttributes, type metadata accessor for AttributeScopes.SwiftUIAttributes, (uint64_t)&protocol conformance descriptor for AttributeScopes.SwiftUIAttributes);
}

unint64_t lazy protocol witness table accessor for type Color and conformance Color()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Color and conformance Color;
  if (!lazy protocol witness table cache variable for type Color and conformance Color)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Color, &type metadata for Color);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Color and conformance Color);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Color and conformance Color;
  if (!lazy protocol witness table cache variable for type Color and conformance Color)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Color, &type metadata for Color);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Color and conformance Color);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Text.Encapsulation and conformance Text.Encapsulation()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Text.Encapsulation and conformance Text.Encapsulation;
  if (!lazy protocol witness table cache variable for type Text.Encapsulation and conformance Text.Encapsulation)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Text.Encapsulation, &type metadata for Text.Encapsulation);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.Encapsulation and conformance Text.Encapsulation);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Text.Encapsulation and conformance Text.Encapsulation;
  if (!lazy protocol witness table cache variable for type Text.Encapsulation and conformance Text.Encapsulation)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Text.Encapsulation, &type metadata for Text.Encapsulation);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.Encapsulation and conformance Text.Encapsulation);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AttributeScopes.SwiftUIAttributes.KerningAttribute and conformance AttributeScopes.SwiftUIAttributes.KerningAttribute()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AttributeScopes.SwiftUIAttributes.KerningAttribute and conformance AttributeScopes.SwiftUIAttributes.KerningAttribute;
  if (!lazy protocol witness table cache variable for type AttributeScopes.SwiftUIAttributes.KerningAttribute and conformance AttributeScopes.SwiftUIAttributes.KerningAttribute)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for AttributeScopes.SwiftUIAttributes.KerningAttribute, &type metadata for AttributeScopes.SwiftUIAttributes.KerningAttribute);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.SwiftUIAttributes.KerningAttribute and conformance AttributeScopes.SwiftUIAttributes.KerningAttribute);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AttributeScopes.SwiftUIAttributes.TrackingAttribute and conformance AttributeScopes.SwiftUIAttributes.TrackingAttribute()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AttributeScopes.SwiftUIAttributes.TrackingAttribute and conformance AttributeScopes.SwiftUIAttributes.TrackingAttribute;
  if (!lazy protocol witness table cache variable for type AttributeScopes.SwiftUIAttributes.TrackingAttribute and conformance AttributeScopes.SwiftUIAttributes.TrackingAttribute)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for AttributeScopes.SwiftUIAttributes.TrackingAttribute, &type metadata for AttributeScopes.SwiftUIAttributes.TrackingAttribute);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.SwiftUIAttributes.TrackingAttribute and conformance AttributeScopes.SwiftUIAttributes.TrackingAttribute);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AttributeScopes.SwiftUIAttributes.BaselineOffsetAttribute and conformance AttributeScopes.SwiftUIAttributes.BaselineOffsetAttribute()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AttributeScopes.SwiftUIAttributes.BaselineOffsetAttribute and conformance AttributeScopes.SwiftUIAttributes.BaselineOffsetAttribute;
  if (!lazy protocol witness table cache variable for type AttributeScopes.SwiftUIAttributes.BaselineOffsetAttribute and conformance AttributeScopes.SwiftUIAttributes.BaselineOffsetAttribute)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for AttributeScopes.SwiftUIAttributes.BaselineOffsetAttribute, &type metadata for AttributeScopes.SwiftUIAttributes.BaselineOffsetAttribute);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.SwiftUIAttributes.BaselineOffsetAttribute and conformance AttributeScopes.SwiftUIAttributes.BaselineOffsetAttribute);
  }
  return result;
}

uint64_t associated type witness table accessor for AttributedStringKey.Value : Hashable in AttributeScopes.SwiftUIAttributes.GlyphInfoAttribute()
{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type CTGlyphInfoRef and conformance CTGlyphInfoRef, (uint64_t (*)(uint64_t))type metadata accessor for CTGlyphInfoRef, (uint64_t)&protocol conformance descriptor for CTGlyphInfoRef);
}

unint64_t lazy protocol witness table accessor for type Text.Scale and conformance Text.Scale()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Text.Scale and conformance Text.Scale;
  if (!lazy protocol witness table cache variable for type Text.Scale and conformance Text.Scale)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Text.Scale, &type metadata for Text.Scale);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.Scale and conformance Text.Scale);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Text.Scale and conformance Text.Scale;
  if (!lazy protocol witness table cache variable for type Text.Scale and conformance Text.Scale)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Text.Scale, &type metadata for Text.Scale);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.Scale and conformance Text.Scale);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Text.Superscript and conformance Text.Superscript()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Text.Superscript and conformance Text.Superscript;
  if (!lazy protocol witness table cache variable for type Text.Superscript and conformance Text.Superscript)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Text.Superscript, &type metadata for Text.Superscript);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.Superscript and conformance Text.Superscript);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Text.Superscript and conformance Text.Superscript;
  if (!lazy protocol witness table cache variable for type Text.Superscript and conformance Text.Superscript)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Text.Superscript, &type metadata for Text.Superscript);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.Superscript and conformance Text.Superscript);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Text.CustomAttributes and conformance Text.CustomAttributes()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Text.CustomAttributes and conformance Text.CustomAttributes;
  if (!lazy protocol witness table cache variable for type Text.CustomAttributes and conformance Text.CustomAttributes)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Text.CustomAttributes, &type metadata for Text.CustomAttributes);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.CustomAttributes and conformance Text.CustomAttributes);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Text.CustomAttributes and conformance Text.CustomAttributes;
  if (!lazy protocol witness table cache variable for type Text.CustomAttributes and conformance Text.CustomAttributes)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Text.CustomAttributes, &type metadata for Text.CustomAttributes);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.CustomAttributes and conformance Text.CustomAttributes);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type [AnyFontModifier] and conformance <A> [A]()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  result = lazy protocol witness table cache variable for type [AnyFontModifier] and conformance <A> [A];
  if (!lazy protocol witness table cache variable for type [AnyFontModifier] and conformance <A> [A])
  {
    type metadata accessor for [(_:)](255, (unint64_t *)&lazy cache variable for type metadata for [AnyFontModifier], (uint64_t (*)(uint64_t))type metadata accessor for AnyFontModifier, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1250]);
    v2 = v1;
    v3 = lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type AnyFontModifier and conformance AnyFontModifier, (uint64_t (*)(uint64_t))type metadata accessor for AnyFontModifier, (uint64_t)&protocol conformance descriptor for AnyFontModifier);
    result = MEMORY[0x23B7C9C04](MEMORY[0x24BEE12A8], v2, &v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [AnyFontModifier] and conformance <A> [A]);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type NSEmojiImageTextAttachment and conformance NSObject()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type NSEmojiImageTextAttachment and conformance NSObject;
  if (!lazy protocol witness table cache variable for type NSEmojiImageTextAttachment and conformance NSObject)
  {
    v1 = type metadata accessor for CAPresentationModifier(255, &lazy cache variable for type metadata for NSEmojiImageTextAttachment);
    result = MEMORY[0x23B7C9C04](MEMORY[0x24BEE5BD8], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NSEmojiImageTextAttachment and conformance NSObject);
  }
  return result;
}

uint64_t associated type witness table accessor for AttributedStringKey.Value : Hashable in AttributeScopes.SwiftUIAttributes.AdaptiveImageGlyphAttribute()
{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type AttributedString.AdaptiveImageGlyph and conformance AttributedString.AdaptiveImageGlyph, (uint64_t (*)(uint64_t))MEMORY[0x24BDC46B0], MEMORY[0x24BDC46C0]);
}

uint64_t ObjC metadata update function for AttributedStringTextStorage()
{
  return type metadata accessor for AttributedStringTextStorage(0);
}

uint64_t type metadata completion function for AttributedStringTextStorage()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for AttributedString();
  if (v1 <= 0x3F)
  {
    result = swift_updateClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for AttributeScopes.SwiftUIAttributes(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  int v5;
  uint64_t v7;
  _BYTE *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;

  v4 = a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v15 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *(_BYTE *)a1 = *(_BYTE *)a2;
    v7 = *(int *)(a3 + 92);
    v8 = (char *)a1 + v7;
    v9 = (char *)a2 + v7;
    v10 = type metadata accessor for AttributeScopes.AccessibilityAttributes();
    (*(void (**)(_BYTE *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
    v11 = *(int *)(a3 + 96);
    v12 = (char *)v4 + v11;
    v13 = (char *)a2 + v11;
    v14 = type metadata accessor for AttributeScopes.FoundationAttributes();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v12, v13, v14);
  }
  return v4;
}

uint64_t destroy for AttributeScopes.SwiftUIAttributes(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = a1 + *(int *)(a2 + 92);
  v5 = type metadata accessor for AttributeScopes.AccessibilityAttributes();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  v6 = a1 + *(int *)(a2 + 96);
  v7 = type metadata accessor for AttributeScopes.FoundationAttributes();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v6, v7);
}

_BYTE *initializeWithCopy for AttributeScopes.SwiftUIAttributes(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  _BYTE *v12;
  uint64_t v13;

  *a1 = *a2;
  v6 = *(int *)(a3 + 92);
  v7 = &a1[v6];
  v8 = &a2[v6];
  v9 = type metadata accessor for AttributeScopes.AccessibilityAttributes();
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(v7, v8, v9);
  v10 = *(int *)(a3 + 96);
  v11 = &a1[v10];
  v12 = &a2[v10];
  v13 = type metadata accessor for AttributeScopes.FoundationAttributes();
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(v11, v12, v13);
  return a1;
}

_BYTE *assignWithCopy for AttributeScopes.SwiftUIAttributes(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  _BYTE *v12;
  uint64_t v13;

  *a1 = *a2;
  v6 = *(int *)(a3 + 92);
  v7 = &a1[v6];
  v8 = &a2[v6];
  v9 = type metadata accessor for AttributeScopes.AccessibilityAttributes();
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v9 - 8) + 24))(v7, v8, v9);
  v10 = *(int *)(a3 + 96);
  v11 = &a1[v10];
  v12 = &a2[v10];
  v13 = type metadata accessor for AttributeScopes.FoundationAttributes();
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v13 - 8) + 24))(v11, v12, v13);
  return a1;
}

_BYTE *initializeWithTake for AttributeScopes.SwiftUIAttributes(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  _BYTE *v12;
  uint64_t v13;

  *a1 = *a2;
  v6 = *(int *)(a3 + 92);
  v7 = &a1[v6];
  v8 = &a2[v6];
  v9 = type metadata accessor for AttributeScopes.AccessibilityAttributes();
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
  v10 = *(int *)(a3 + 96);
  v11 = &a1[v10];
  v12 = &a2[v10];
  v13 = type metadata accessor for AttributeScopes.FoundationAttributes();
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v13 - 8) + 32))(v11, v12, v13);
  return a1;
}

_BYTE *assignWithTake for AttributeScopes.SwiftUIAttributes(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  _BYTE *v12;
  uint64_t v13;

  *a1 = *a2;
  v6 = *(int *)(a3 + 92);
  v7 = &a1[v6];
  v8 = &a2[v6];
  v9 = type metadata accessor for AttributeScopes.AccessibilityAttributes();
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v9 - 8) + 40))(v7, v8, v9);
  v10 = *(int *)(a3 + 96);
  v11 = &a1[v10];
  v12 = &a2[v10];
  v13 = type metadata accessor for AttributeScopes.FoundationAttributes();
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v13 - 8) + 40))(v11, v12, v13);
  return a1;
}

uint64_t getEnumTagSinglePayload for AttributeScopes.SwiftUIAttributes()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_234E0E30C(unsigned __int8 *a1, uint64_t a2, uint64_t a3)
{
  unsigned int v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if ((_DWORD)a2 == 254)
  {
    v4 = *a1;
    if (v4 >= 2)
      return v4 - 1;
    else
      return 0;
  }
  else
  {
    v8 = type metadata accessor for AttributeScopes.AccessibilityAttributes();
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      v10 = v8;
      v11 = *(int *)(a3 + 92);
    }
    else
    {
      v10 = type metadata accessor for AttributeScopes.FoundationAttributes();
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a3 + 96);
    }
    return (*(uint64_t (**)(unsigned __int8 *, uint64_t, uint64_t))(v9 + 48))(&a1[v11], a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for AttributeScopes.SwiftUIAttributes()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

_BYTE *sub_234E0E3B0(_BYTE *result, uint64_t a2, int a3, uint64_t a4)
{
  _BYTE *v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = result;
  if (a3 == 254)
  {
    *result = a2 + 1;
  }
  else
  {
    v8 = type metadata accessor for AttributeScopes.AccessibilityAttributes();
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = *(int *)(a4 + 92);
    }
    else
    {
      v10 = type metadata accessor for AttributeScopes.FoundationAttributes();
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a4 + 96);
    }
    return (_BYTE *)(*(uint64_t (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v9 + 56))(&v5[v11], a2, a2, v10);
  }
  return result;
}

uint64_t type metadata completion function for AttributeScopes.SwiftUIAttributes()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = type metadata accessor for AttributeScopes.AccessibilityAttributes();
  if (v1 <= 0x3F)
  {
    result = type metadata accessor for AttributeScopes.FoundationAttributes();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AttributeScopes.SwiftUIAttributes.FontAttribute()
{
  return &type metadata for AttributeScopes.SwiftUIAttributes.FontAttribute;
}

ValueMetadata *type metadata accessor for AttributeScopes.SwiftUIAttributes.ForegroundColorAttribute()
{
  return &type metadata for AttributeScopes.SwiftUIAttributes.ForegroundColorAttribute;
}

ValueMetadata *type metadata accessor for AttributeScopes.SwiftUIAttributes.BackgroundColorAttribute()
{
  return &type metadata for AttributeScopes.SwiftUIAttributes.BackgroundColorAttribute;
}

ValueMetadata *type metadata accessor for AttributeScopes.SwiftUIAttributes.StrikethroughStyleAttribute()
{
  return &type metadata for AttributeScopes.SwiftUIAttributes.StrikethroughStyleAttribute;
}

ValueMetadata *type metadata accessor for AttributeScopes.SwiftUIAttributes.StrikethroughColorAttribute()
{
  return &type metadata for AttributeScopes.SwiftUIAttributes.StrikethroughColorAttribute;
}

ValueMetadata *type metadata accessor for AttributeScopes.SwiftUIAttributes.UnderlineStyleAttribute()
{
  return &type metadata for AttributeScopes.SwiftUIAttributes.UnderlineStyleAttribute;
}

ValueMetadata *type metadata accessor for AttributeScopes.SwiftUIAttributes.UnderlineColorAttribute()
{
  return &type metadata for AttributeScopes.SwiftUIAttributes.UnderlineColorAttribute;
}

ValueMetadata *type metadata accessor for AttributeScopes.SwiftUIAttributes.EncapsulationAttribute()
{
  return &type metadata for AttributeScopes.SwiftUIAttributes.EncapsulationAttribute;
}

ValueMetadata *type metadata accessor for AttributeScopes.SwiftUIAttributes.KerningAttribute()
{
  return &type metadata for AttributeScopes.SwiftUIAttributes.KerningAttribute;
}

ValueMetadata *type metadata accessor for AttributeScopes.SwiftUIAttributes.TrackingAttribute()
{
  return &type metadata for AttributeScopes.SwiftUIAttributes.TrackingAttribute;
}

ValueMetadata *type metadata accessor for AttributeScopes.SwiftUIAttributes.BaselineOffsetAttribute()
{
  return &type metadata for AttributeScopes.SwiftUIAttributes.BaselineOffsetAttribute;
}

ValueMetadata *type metadata accessor for AttributeScopes.SwiftUIAttributes.GlyphInfoAttribute()
{
  return &type metadata for AttributeScopes.SwiftUIAttributes.GlyphInfoAttribute;
}

ValueMetadata *type metadata accessor for AttributeScopes.SwiftUIAttributes.TextScaleAttribute()
{
  return &type metadata for AttributeScopes.SwiftUIAttributes.TextScaleAttribute;
}

ValueMetadata *type metadata accessor for AttributeScopes.SwiftUIAttributes.SuperscriptAttribute()
{
  return &type metadata for AttributeScopes.SwiftUIAttributes.SuperscriptAttribute;
}

ValueMetadata *type metadata accessor for AttributeScopes.SwiftUIAttributes.CustomContainerAttribute()
{
  return &type metadata for AttributeScopes.SwiftUIAttributes.CustomContainerAttribute;
}

ValueMetadata *type metadata accessor for AttributeScopes.SwiftUIAttributes.FontModifiersAttribute()
{
  return &type metadata for AttributeScopes.SwiftUIAttributes.FontModifiersAttribute;
}

ValueMetadata *type metadata accessor for AttributeScopes.SwiftUIAttributes.EmojiTextAttachmentAttribute()
{
  return &type metadata for AttributeScopes.SwiftUIAttributes.EmojiTextAttachmentAttribute;
}

ValueMetadata *type metadata accessor for AttributeScopes.SwiftUIAttributes.AdaptiveImageGlyphAttribute()
{
  return &type metadata for AttributeScopes.SwiftUIAttributes.AdaptiveImageGlyphAttribute;
}

ValueMetadata *type metadata accessor for AttributeScopes.SwiftUIAttributes.InterpolationStrategy()
{
  return &type metadata for AttributeScopes.SwiftUIAttributes.InterpolationStrategy;
}

uint64_t specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  _QWORD *v13;
  char v14;
  unint64_t v15;
  uint64_t v16;
  _BOOL8 v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  char v21;
  _OWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  void *i;
  uint64_t v28;
  _OWORD *v29;
  _QWORD *v30;
  unint64_t v31;
  char v32;
  uint64_t v33;
  _BOOL8 v34;
  uint64_t v35;
  char v36;
  char v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t result;
  _BYTE v42[32];
  _OWORD v43[2];
  _OWORD v44[2];
  void *v45;
  _OWORD v46[2];
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;

  v7 = -1 << *(_BYTE *)(a1 + 32);
  v8 = ~v7;
  v9 = *(_QWORD *)(a1 + 64);
  v10 = -v7;
  v47 = a1;
  v48 = a1 + 64;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  else
    v11 = -1;
  v49 = v8;
  v50 = 0;
  v51 = v11 & v9;
  v52 = a2;
  v53 = a3;
  swift_bridgeObjectRetain();
  swift_retain();
  specialized LazyMapSequence.Iterator.next()((uint64_t)&v45);
  v12 = v45;
  if (!v45)
    goto LABEL_26;
  outlined init with take of Any(v46, v44);
  v13 = *(_QWORD **)a5;
  v15 = specialized __RawDictionaryStorage.find<A>(_:)(v12);
  v16 = v13[2];
  v17 = (v14 & 1) == 0;
  v18 = v16 + v17;
  if (__OFADD__(v16, v17))
  {
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  v19 = v14;
  if (v13[3] >= v18)
  {
    if ((a4 & 1) != 0)
    {
      if ((v14 & 1) != 0)
        goto LABEL_12;
    }
    else
    {
      specialized _NativeDictionary.copy()();
      if ((v19 & 1) != 0)
        goto LABEL_12;
    }
LABEL_14:
    v23 = *(_QWORD **)a5;
    *(_QWORD *)(*(_QWORD *)a5 + 8 * (v15 >> 6) + 64) |= 1 << v15;
    *(_QWORD *)(v23[6] + 8 * v15) = v12;
    outlined init with take of Any(v44, (_OWORD *)(v23[7] + 32 * v15));
    v24 = v23[2];
    v25 = __OFADD__(v24, 1);
    v26 = v24 + 1;
    if (v25)
    {
LABEL_28:
      __break(1u);
      goto LABEL_29;
    }
    v23[2] = v26;
LABEL_16:
    specialized LazyMapSequence.Iterator.next()((uint64_t)&v45);
    for (i = v45; v45; i = v45)
    {
      outlined init with take of Any(v46, v44);
      v30 = *(_QWORD **)a5;
      v31 = specialized __RawDictionaryStorage.find<A>(_:)(i);
      v33 = v30[2];
      v34 = (v32 & 1) == 0;
      v25 = __OFADD__(v33, v34);
      v35 = v33 + v34;
      if (v25)
        goto LABEL_27;
      v36 = v32;
      if (v30[3] < v35)
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v35, 1);
        v31 = specialized __RawDictionaryStorage.find<A>(_:)(i);
        if ((v36 & 1) != (v37 & 1))
          goto LABEL_29;
      }
      if ((v36 & 1) != 0)
      {
        v28 = 32 * v31;
        outlined init with copy of Any(*(_QWORD *)(*(_QWORD *)a5 + 56) + 32 * v31, (uint64_t)v42);
        outlined init with copy of Any((uint64_t)v42, (uint64_t)v43);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v42);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v44);

        v29 = (_OWORD *)(*(_QWORD *)(*(_QWORD *)a5 + 56) + v28);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v29);
        outlined init with take of Any(v43, v29);
      }
      else
      {
        v38 = *(_QWORD **)a5;
        *(_QWORD *)(*(_QWORD *)a5 + 8 * (v31 >> 6) + 64) |= 1 << v31;
        *(_QWORD *)(v38[6] + 8 * v31) = i;
        outlined init with take of Any(v44, (_OWORD *)(v38[7] + 32 * v31));
        v39 = v38[2];
        v25 = __OFADD__(v39, 1);
        v40 = v39 + 1;
        if (v25)
          goto LABEL_28;
        v38[2] = v40;
      }
      specialized LazyMapSequence.Iterator.next()((uint64_t)&v45);
    }
LABEL_26:
    swift_release();
    swift_bridgeObjectRelease();
    outlined consume of Set<EventID>.Iterator._Variant();
    return swift_release();
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v18, a4 & 1);
  v20 = specialized __RawDictionaryStorage.find<A>(_:)(v12);
  if ((v19 & 1) == (v21 & 1))
  {
    v15 = v20;
    if ((v19 & 1) == 0)
      goto LABEL_14;
LABEL_12:
    outlined init with copy of Any(*(_QWORD *)(*(_QWORD *)a5 + 56) + 32 * v15, (uint64_t)v42);
    outlined init with copy of Any((uint64_t)v42, (uint64_t)v43);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v42);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v44);

    v22 = (_OWORD *)(*(_QWORD *)(*(_QWORD *)a5 + 56) + 32 * v15);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v22);
    outlined init with take of Any(v43, v22);
    goto LABEL_16;
  }
LABEL_29:
  type metadata accessor for NSAttributedStringKey(0);
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  _QWORD *v13;
  char v14;
  unint64_t v15;
  uint64_t v16;
  _BOOL8 v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  char v21;
  _OWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  void *i;
  _OWORD *v28;
  _QWORD *v29;
  char v30;
  unint64_t v31;
  uint64_t v32;
  _BOOL8 v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  char v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t result;
  _OWORD v42[2];
  _OWORD v43[2];
  void *v44;
  _OWORD v45[2];
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;

  v7 = -1 << *(_BYTE *)(a1 + 32);
  v8 = ~v7;
  v9 = *(_QWORD *)(a1 + 64);
  v10 = -v7;
  v46 = a1;
  v47 = a1 + 64;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  else
    v11 = -1;
  v48 = v8;
  v49 = 0;
  v50 = v11 & v9;
  v51 = a2;
  v52 = a3;
  swift_bridgeObjectRetain();
  swift_retain();
  specialized LazyMapSequence.Iterator.next()((uint64_t)&v44);
  v12 = v44;
  if (!v44)
    goto LABEL_27;
  outlined init with take of Any(v45, v43);
  v13 = *(_QWORD **)a5;
  v15 = specialized __RawDictionaryStorage.find<A>(_:)(v12);
  v16 = v13[2];
  v17 = (v14 & 1) == 0;
  v18 = v16 + v17;
  if (__OFADD__(v16, v17))
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  v19 = v14;
  if (v13[3] >= v18)
  {
    if ((a4 & 1) != 0)
    {
      if ((v14 & 1) != 0)
        goto LABEL_12;
    }
    else
    {
      specialized _NativeDictionary.copy()();
      if ((v19 & 1) != 0)
        goto LABEL_12;
    }
LABEL_14:
    v23 = *(_QWORD **)a5;
    *(_QWORD *)(*(_QWORD *)a5 + 8 * (v15 >> 6) + 64) |= 1 << v15;
    *(_QWORD *)(v23[6] + 8 * v15) = v12;
    outlined init with take of Any(v43, (_OWORD *)(v23[7] + 32 * v15));
    v24 = v23[2];
    v25 = __OFADD__(v24, 1);
    v26 = v24 + 1;
    if (v25)
    {
LABEL_29:
      __break(1u);
      goto LABEL_30;
    }
    v23[2] = v26;
LABEL_16:
    specialized LazyMapSequence.Iterator.next()((uint64_t)&v44);
    for (i = v44; v44; i = v44)
    {
      outlined init with take of Any(v45, v43);
      v29 = *(_QWORD **)a5;
      v31 = specialized __RawDictionaryStorage.find<A>(_:)(i);
      v32 = v29[2];
      v33 = (v30 & 1) == 0;
      v34 = v32 + v33;
      if (__OFADD__(v32, v33))
        goto LABEL_28;
      v35 = v30;
      if (v29[3] < v34)
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v34, 1);
        v36 = specialized __RawDictionaryStorage.find<A>(_:)(i);
        if ((v35 & 1) != (v37 & 1))
          goto LABEL_30;
        v31 = v36;
      }
      if ((v35 & 1) != 0)
      {
        outlined init with copy of Any((uint64_t)v43, (uint64_t)v42);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v43);

        v28 = (_OWORD *)(*(_QWORD *)(*(_QWORD *)a5 + 56) + 32 * v31);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v28);
        outlined init with take of Any(v42, v28);
      }
      else
      {
        v38 = *(_QWORD **)a5;
        *(_QWORD *)(*(_QWORD *)a5 + 8 * (v31 >> 6) + 64) |= 1 << v31;
        *(_QWORD *)(v38[6] + 8 * v31) = i;
        outlined init with take of Any(v43, (_OWORD *)(v38[7] + 32 * v31));
        v39 = v38[2];
        v25 = __OFADD__(v39, 1);
        v40 = v39 + 1;
        if (v25)
          goto LABEL_29;
        v38[2] = v40;
      }
      specialized LazyMapSequence.Iterator.next()((uint64_t)&v44);
    }
LABEL_27:
    swift_release();
    swift_bridgeObjectRelease();
    outlined consume of Set<EventID>.Iterator._Variant();
    return swift_release();
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v18, a4 & 1);
  v20 = specialized __RawDictionaryStorage.find<A>(_:)(v12);
  if ((v19 & 1) == (v21 & 1))
  {
    v15 = v20;
    if ((v19 & 1) == 0)
      goto LABEL_14;
LABEL_12:
    outlined init with copy of Any((uint64_t)v43, (uint64_t)v42);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v43);

    v22 = (_OWORD *)(*(_QWORD *)(*(_QWORD *)a5 + 56) + 32 * v15);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v22);
    outlined init with take of Any(v42, v22);
    goto LABEL_16;
  }
LABEL_30:
  type metadata accessor for NSAttributedStringKey(0);
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t specialized AttributeScopes.SwiftUIAttributes.InterpolationStrategy.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x646574616D696E61 && a2 == 0xE800000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x74616D696E616E75 && a2 == 0xEA00000000006465)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

_QWORD *specialized AttributeScopes.SwiftUIAttributes.InterpolationStrategy.init(from:)(_QWORD *a1)
{
  uint64_t (*v2)(uint64_t, uint64_t, uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  _QWORD *v31;
  char v32;
  char v33;

  v2 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE33E0];
  type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for KeyedDecodingContainer<AttributeScopes.SwiftUIAttributes.InterpolationStrategy.UnanimatedCodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type AttributeScopes.SwiftUIAttributes.InterpolationStrategy.UnanimatedCodingKeys and conformance AttributeScopes.SwiftUIAttributes.InterpolationStrategy.UnanimatedCodingKeys, (uint64_t)&unk_25060C820, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE33E0]);
  v26 = *(_QWORD *)(v3 - 8);
  v27 = v3;
  MEMORY[0x24BDAC7A8](v3);
  v30 = (char *)&v24 - v4;
  type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for KeyedDecodingContainer<AttributeScopes.SwiftUIAttributes.InterpolationStrategy.AnimatedCodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type AttributeScopes.SwiftUIAttributes.InterpolationStrategy.AnimatedCodingKeys and conformance AttributeScopes.SwiftUIAttributes.InterpolationStrategy.AnimatedCodingKeys, (uint64_t)&unk_25060C800, v2);
  v6 = *(_QWORD *)(v5 - 8);
  v28 = v5;
  v29 = v6;
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v24 - v7;
  type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for KeyedDecodingContainer<AttributeScopes.SwiftUIAttributes.InterpolationStrategy.CodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type AttributeScopes.SwiftUIAttributes.InterpolationStrategy.CodingKeys and conformance AttributeScopes.SwiftUIAttributes.InterpolationStrategy.CodingKeys, (uint64_t)&unk_25060C770, v2);
  v10 = v9;
  v11 = *(_QWORD **)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v13 = (char *)&v24 - v12;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type AttributeScopes.SwiftUIAttributes.InterpolationStrategy.CodingKeys and conformance AttributeScopes.SwiftUIAttributes.InterpolationStrategy.CodingKeys();
  v14 = v31;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v14)
    goto LABEL_7;
  v16 = v29;
  v15 = v30;
  v31 = v11;
  v25 = a1;
  v17 = v13;
  v18 = KeyedDecodingContainer.allKeys.getter();
  if (*(_QWORD *)(v18 + 16) != 1)
  {
    v21 = type metadata accessor for DecodingError();
    swift_allocError();
    v11 = v22;
    type metadata accessor for (@thick Any.Type, DecodingError.Context)();
    *v11 = &type metadata for AttributeScopes.SwiftUIAttributes.InterpolationStrategy;
    KeyedDecodingContainer.codingPath.getter();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v21 - 8) + 104))(v11, *MEMORY[0x24BEE26D0], v21);
    swift_willThrow();
    swift_bridgeObjectRelease();
    ((void (*)(char *, uint64_t))v31[1])(v13, v10);
    a1 = v25;
LABEL_7:
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    return v11;
  }
  v11 = (_QWORD *)*(unsigned __int8 *)(v18 + 32);
  if ((v11 & 1) != 0)
  {
    v33 = 1;
    lazy protocol witness table accessor for type AttributeScopes.SwiftUIAttributes.InterpolationStrategy.UnanimatedCodingKeys and conformance AttributeScopes.SwiftUIAttributes.InterpolationStrategy.UnanimatedCodingKeys();
    v19 = v15;
    KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    v20 = v31;
    (*(void (**)(char *, uint64_t))(v26 + 8))(v19, v27);
  }
  else
  {
    v32 = 0;
    lazy protocol witness table accessor for type AttributeScopes.SwiftUIAttributes.InterpolationStrategy.AnimatedCodingKeys and conformance AttributeScopes.SwiftUIAttributes.InterpolationStrategy.AnimatedCodingKeys();
    KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    v20 = v31;
    (*(void (**)(char *, uint64_t))(v16 + 8))(v8, v28);
  }
  swift_bridgeObjectRelease();
  ((void (*)(char *, uint64_t))v20[1])(v17, v10);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v25);
  return v11;
}

unint64_t lazy protocol witness table accessor for type AttributeScopes.SwiftUIAttributes.InterpolationStrategy.UnanimatedCodingKeys and conformance AttributeScopes.SwiftUIAttributes.InterpolationStrategy.UnanimatedCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AttributeScopes.SwiftUIAttributes.InterpolationStrategy.UnanimatedCodingKeys and conformance AttributeScopes.SwiftUIAttributes.InterpolationStrategy.UnanimatedCodingKeys;
  if (!lazy protocol witness table cache variable for type AttributeScopes.SwiftUIAttributes.InterpolationStrategy.UnanimatedCodingKeys and conformance AttributeScopes.SwiftUIAttributes.InterpolationStrategy.UnanimatedCodingKeys)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for AttributeScopes.SwiftUIAttributes.InterpolationStrategy.UnanimatedCodingKeys, &unk_25060C820);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.SwiftUIAttributes.InterpolationStrategy.UnanimatedCodingKeys and conformance AttributeScopes.SwiftUIAttributes.InterpolationStrategy.UnanimatedCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AttributeScopes.SwiftUIAttributes.InterpolationStrategy.UnanimatedCodingKeys and conformance AttributeScopes.SwiftUIAttributes.InterpolationStrategy.UnanimatedCodingKeys;
  if (!lazy protocol witness table cache variable for type AttributeScopes.SwiftUIAttributes.InterpolationStrategy.UnanimatedCodingKeys and conformance AttributeScopes.SwiftUIAttributes.InterpolationStrategy.UnanimatedCodingKeys)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for AttributeScopes.SwiftUIAttributes.InterpolationStrategy.UnanimatedCodingKeys, &unk_25060C820);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.SwiftUIAttributes.InterpolationStrategy.UnanimatedCodingKeys and conformance AttributeScopes.SwiftUIAttributes.InterpolationStrategy.UnanimatedCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AttributeScopes.SwiftUIAttributes.InterpolationStrategy.UnanimatedCodingKeys and conformance AttributeScopes.SwiftUIAttributes.InterpolationStrategy.UnanimatedCodingKeys;
  if (!lazy protocol witness table cache variable for type AttributeScopes.SwiftUIAttributes.InterpolationStrategy.UnanimatedCodingKeys and conformance AttributeScopes.SwiftUIAttributes.InterpolationStrategy.UnanimatedCodingKeys)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for AttributeScopes.SwiftUIAttributes.InterpolationStrategy.UnanimatedCodingKeys, &unk_25060C820);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.SwiftUIAttributes.InterpolationStrategy.UnanimatedCodingKeys and conformance AttributeScopes.SwiftUIAttributes.InterpolationStrategy.UnanimatedCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AttributeScopes.SwiftUIAttributes.InterpolationStrategy.AnimatedCodingKeys and conformance AttributeScopes.SwiftUIAttributes.InterpolationStrategy.AnimatedCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AttributeScopes.SwiftUIAttributes.InterpolationStrategy.AnimatedCodingKeys and conformance AttributeScopes.SwiftUIAttributes.InterpolationStrategy.AnimatedCodingKeys;
  if (!lazy protocol witness table cache variable for type AttributeScopes.SwiftUIAttributes.InterpolationStrategy.AnimatedCodingKeys and conformance AttributeScopes.SwiftUIAttributes.InterpolationStrategy.AnimatedCodingKeys)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for AttributeScopes.SwiftUIAttributes.InterpolationStrategy.AnimatedCodingKeys, &unk_25060C800);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.SwiftUIAttributes.InterpolationStrategy.AnimatedCodingKeys and conformance AttributeScopes.SwiftUIAttributes.InterpolationStrategy.AnimatedCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AttributeScopes.SwiftUIAttributes.InterpolationStrategy.AnimatedCodingKeys and conformance AttributeScopes.SwiftUIAttributes.InterpolationStrategy.AnimatedCodingKeys;
  if (!lazy protocol witness table cache variable for type AttributeScopes.SwiftUIAttributes.InterpolationStrategy.AnimatedCodingKeys and conformance AttributeScopes.SwiftUIAttributes.InterpolationStrategy.AnimatedCodingKeys)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for AttributeScopes.SwiftUIAttributes.InterpolationStrategy.AnimatedCodingKeys, &unk_25060C800);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.SwiftUIAttributes.InterpolationStrategy.AnimatedCodingKeys and conformance AttributeScopes.SwiftUIAttributes.InterpolationStrategy.AnimatedCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AttributeScopes.SwiftUIAttributes.InterpolationStrategy.AnimatedCodingKeys and conformance AttributeScopes.SwiftUIAttributes.InterpolationStrategy.AnimatedCodingKeys;
  if (!lazy protocol witness table cache variable for type AttributeScopes.SwiftUIAttributes.InterpolationStrategy.AnimatedCodingKeys and conformance AttributeScopes.SwiftUIAttributes.InterpolationStrategy.AnimatedCodingKeys)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for AttributeScopes.SwiftUIAttributes.InterpolationStrategy.AnimatedCodingKeys, &unk_25060C800);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.SwiftUIAttributes.InterpolationStrategy.AnimatedCodingKeys and conformance AttributeScopes.SwiftUIAttributes.InterpolationStrategy.AnimatedCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AttributeScopes.SwiftUIAttributes.InterpolationStrategy.CodingKeys and conformance AttributeScopes.SwiftUIAttributes.InterpolationStrategy.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AttributeScopes.SwiftUIAttributes.InterpolationStrategy.CodingKeys and conformance AttributeScopes.SwiftUIAttributes.InterpolationStrategy.CodingKeys;
  if (!lazy protocol witness table cache variable for type AttributeScopes.SwiftUIAttributes.InterpolationStrategy.CodingKeys and conformance AttributeScopes.SwiftUIAttributes.InterpolationStrategy.CodingKeys)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for AttributeScopes.SwiftUIAttributes.InterpolationStrategy.CodingKeys, &unk_25060C770);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.SwiftUIAttributes.InterpolationStrategy.CodingKeys and conformance AttributeScopes.SwiftUIAttributes.InterpolationStrategy.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AttributeScopes.SwiftUIAttributes.InterpolationStrategy.CodingKeys and conformance AttributeScopes.SwiftUIAttributes.InterpolationStrategy.CodingKeys;
  if (!lazy protocol witness table cache variable for type AttributeScopes.SwiftUIAttributes.InterpolationStrategy.CodingKeys and conformance AttributeScopes.SwiftUIAttributes.InterpolationStrategy.CodingKeys)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for AttributeScopes.SwiftUIAttributes.InterpolationStrategy.CodingKeys, &unk_25060C770);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.SwiftUIAttributes.InterpolationStrategy.CodingKeys and conformance AttributeScopes.SwiftUIAttributes.InterpolationStrategy.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AttributeScopes.SwiftUIAttributes.InterpolationStrategy.CodingKeys and conformance AttributeScopes.SwiftUIAttributes.InterpolationStrategy.CodingKeys;
  if (!lazy protocol witness table cache variable for type AttributeScopes.SwiftUIAttributes.InterpolationStrategy.CodingKeys and conformance AttributeScopes.SwiftUIAttributes.InterpolationStrategy.CodingKeys)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for AttributeScopes.SwiftUIAttributes.InterpolationStrategy.CodingKeys, &unk_25060C770);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.SwiftUIAttributes.InterpolationStrategy.CodingKeys and conformance AttributeScopes.SwiftUIAttributes.InterpolationStrategy.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AttributeScopes.SwiftUIAttributes.InterpolationStrategy.CodingKeys and conformance AttributeScopes.SwiftUIAttributes.InterpolationStrategy.CodingKeys;
  if (!lazy protocol witness table cache variable for type AttributeScopes.SwiftUIAttributes.InterpolationStrategy.CodingKeys and conformance AttributeScopes.SwiftUIAttributes.InterpolationStrategy.CodingKeys)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for AttributeScopes.SwiftUIAttributes.InterpolationStrategy.CodingKeys, &unk_25060C770);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.SwiftUIAttributes.InterpolationStrategy.CodingKeys and conformance AttributeScopes.SwiftUIAttributes.InterpolationStrategy.CodingKeys);
  }
  return result;
}

void sub_234E0EFD4()
{
  lazy protocol witness table accessor for type AttributeScopes.SwiftUIAttributes.EmojiTextAttachmentAttribute and conformance AttributeScopes.SwiftUIAttributes.EmojiTextAttachmentAttribute();
  AttributeDynamicLookup.subscript.getter();
  __break(1u);
}

uint64_t sub_234E0EFF8()
{
  return 8;
}

uint64_t sub_234E0F004()
{
  return swift_release();
}

uint64_t sub_234E0F00C(_QWORD *a1, _QWORD *a2)
{
  *a2 = *a1;
  return swift_retain();
}

uint64_t sub_234E0F018(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return key path index equality operator for (KeyPath<AttributeScopes.SwiftUIAttributes, AttributeScopes.SwiftUIAttributes.InterpolationStrategy>)(a1, a2, a3, &lazy cache variable for type metadata for KeyPath<AttributeScopes.SwiftUIAttributes, AttributeScopes.SwiftUIAttributes.EmojiTextAttachmentAttribute>, (void (*)(uint64_t))type metadata accessor for AttributeScopes.SwiftUIAttributes) & 1;
}

uint64_t sub_234E0F048(uint64_t a1, uint64_t a2)
{
  return keypath_hash_37Tm(a1, a2, &lazy cache variable for type metadata for KeyPath<AttributeScopes.SwiftUIAttributes, AttributeScopes.SwiftUIAttributes.EmojiTextAttachmentAttribute>, (void (*)(uint64_t))type metadata accessor for AttributeScopes.SwiftUIAttributes);
}

_QWORD *sub_234E0F064(_QWORD *result, _QWORD *a2)
{
  *a2 = *result;
  return result;
}

unint64_t lazy protocol witness table accessor for type AttributeScopes.SwiftUIAttributes.EmojiTextAttachmentAttribute and conformance AttributeScopes.SwiftUIAttributes.EmojiTextAttachmentAttribute()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AttributeScopes.SwiftUIAttributes.EmojiTextAttachmentAttribute and conformance AttributeScopes.SwiftUIAttributes.EmojiTextAttachmentAttribute;
  if (!lazy protocol witness table cache variable for type AttributeScopes.SwiftUIAttributes.EmojiTextAttachmentAttribute and conformance AttributeScopes.SwiftUIAttributes.EmojiTextAttachmentAttribute)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for AttributeScopes.SwiftUIAttributes.EmojiTextAttachmentAttribute, &type metadata for AttributeScopes.SwiftUIAttributes.EmojiTextAttachmentAttribute);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.SwiftUIAttributes.EmojiTextAttachmentAttribute and conformance AttributeScopes.SwiftUIAttributes.EmojiTextAttachmentAttribute);
  }
  return result;
}

void sub_234E0F0B4()
{
  lazy protocol witness table accessor for type AttributeScopes.SwiftUIAttributes.AdaptiveImageGlyphAttribute and conformance AttributeScopes.SwiftUIAttributes.AdaptiveImageGlyphAttribute();
  AttributeDynamicLookup.subscript.getter();
  __break(1u);
}

uint64_t sub_234E0F0D8()
{
  return 8;
}

uint64_t sub_234E0F0E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return key path index equality operator for (KeyPath<AttributeScopes.SwiftUIAttributes, AttributeScopes.SwiftUIAttributes.InterpolationStrategy>)(a1, a2, a3, &lazy cache variable for type metadata for KeyPath<AttributeScopes.SwiftUIAttributes, AttributeScopes.SwiftUIAttributes.AdaptiveImageGlyphAttribute>, (void (*)(uint64_t))type metadata accessor for AttributeScopes.SwiftUIAttributes) & 1;
}

uint64_t sub_234E0F114(uint64_t a1, uint64_t a2)
{
  return keypath_hash_37Tm(a1, a2, &lazy cache variable for type metadata for KeyPath<AttributeScopes.SwiftUIAttributes, AttributeScopes.SwiftUIAttributes.AdaptiveImageGlyphAttribute>, (void (*)(uint64_t))type metadata accessor for AttributeScopes.SwiftUIAttributes);
}

unint64_t lazy protocol witness table accessor for type AttributeScopes.SwiftUIAttributes.AdaptiveImageGlyphAttribute and conformance AttributeScopes.SwiftUIAttributes.AdaptiveImageGlyphAttribute()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AttributeScopes.SwiftUIAttributes.AdaptiveImageGlyphAttribute and conformance AttributeScopes.SwiftUIAttributes.AdaptiveImageGlyphAttribute;
  if (!lazy protocol witness table cache variable for type AttributeScopes.SwiftUIAttributes.AdaptiveImageGlyphAttribute and conformance AttributeScopes.SwiftUIAttributes.AdaptiveImageGlyphAttribute)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for AttributeScopes.SwiftUIAttributes.AdaptiveImageGlyphAttribute, &type metadata for AttributeScopes.SwiftUIAttributes.AdaptiveImageGlyphAttribute);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.SwiftUIAttributes.AdaptiveImageGlyphAttribute and conformance AttributeScopes.SwiftUIAttributes.AdaptiveImageGlyphAttribute);
  }
  return result;
}

void sub_234E0F174()
{
  lazy protocol witness table accessor for type AttributeScopes.SwiftUIAttributes.FontAttribute and conformance AttributeScopes.SwiftUIAttributes.FontAttribute();
  AttributeDynamicLookup.subscript.getter();
  __break(1u);
}

uint64_t sub_234E0F198()
{
  return 8;
}

uint64_t sub_234E0F1A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return key path index equality operator for (KeyPath<AttributeScopes.SwiftUIAttributes, AttributeScopes.SwiftUIAttributes.InterpolationStrategy>)(a1, a2, a3, &lazy cache variable for type metadata for KeyPath<AttributeScopes.SwiftUIAttributes, AttributeScopes.SwiftUIAttributes.FontAttribute>, (void (*)(uint64_t))type metadata accessor for AttributeScopes.SwiftUIAttributes) & 1;
}

uint64_t sub_234E0F1D4(uint64_t a1, uint64_t a2)
{
  return keypath_hash_37Tm(a1, a2, &lazy cache variable for type metadata for KeyPath<AttributeScopes.SwiftUIAttributes, AttributeScopes.SwiftUIAttributes.FontAttribute>, (void (*)(uint64_t))type metadata accessor for AttributeScopes.SwiftUIAttributes);
}

unint64_t lazy protocol witness table accessor for type AttributeScopes.SwiftUIAttributes.FontAttribute and conformance AttributeScopes.SwiftUIAttributes.FontAttribute()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AttributeScopes.SwiftUIAttributes.FontAttribute and conformance AttributeScopes.SwiftUIAttributes.FontAttribute;
  if (!lazy protocol witness table cache variable for type AttributeScopes.SwiftUIAttributes.FontAttribute and conformance AttributeScopes.SwiftUIAttributes.FontAttribute)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for AttributeScopes.SwiftUIAttributes.FontAttribute, &type metadata for AttributeScopes.SwiftUIAttributes.FontAttribute);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.SwiftUIAttributes.FontAttribute and conformance AttributeScopes.SwiftUIAttributes.FontAttribute);
  }
  return result;
}

void sub_234E0F234()
{
  lazy protocol witness table accessor for type AttributeScopes.SwiftUIAttributes.ForegroundColorAttribute and conformance AttributeScopes.SwiftUIAttributes.ForegroundColorAttribute();
  AttributeDynamicLookup.subscript.getter();
  __break(1u);
}

uint64_t sub_234E0F258()
{
  return 8;
}

uint64_t sub_234E0F264(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return key path index equality operator for (KeyPath<AttributeScopes.SwiftUIAttributes, AttributeScopes.SwiftUIAttributes.InterpolationStrategy>)(a1, a2, a3, &lazy cache variable for type metadata for KeyPath<AttributeScopes.SwiftUIAttributes, AttributeScopes.SwiftUIAttributes.ForegroundColorAttribute>, (void (*)(uint64_t))type metadata accessor for AttributeScopes.SwiftUIAttributes) & 1;
}

uint64_t sub_234E0F294(uint64_t a1, uint64_t a2)
{
  return keypath_hash_37Tm(a1, a2, &lazy cache variable for type metadata for KeyPath<AttributeScopes.SwiftUIAttributes, AttributeScopes.SwiftUIAttributes.ForegroundColorAttribute>, (void (*)(uint64_t))type metadata accessor for AttributeScopes.SwiftUIAttributes);
}

unint64_t lazy protocol witness table accessor for type AttributeScopes.SwiftUIAttributes.ForegroundColorAttribute and conformance AttributeScopes.SwiftUIAttributes.ForegroundColorAttribute()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AttributeScopes.SwiftUIAttributes.ForegroundColorAttribute and conformance AttributeScopes.SwiftUIAttributes.ForegroundColorAttribute;
  if (!lazy protocol witness table cache variable for type AttributeScopes.SwiftUIAttributes.ForegroundColorAttribute and conformance AttributeScopes.SwiftUIAttributes.ForegroundColorAttribute)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for AttributeScopes.SwiftUIAttributes.ForegroundColorAttribute, &type metadata for AttributeScopes.SwiftUIAttributes.ForegroundColorAttribute);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.SwiftUIAttributes.ForegroundColorAttribute and conformance AttributeScopes.SwiftUIAttributes.ForegroundColorAttribute);
  }
  return result;
}

void sub_234E0F2F4()
{
  lazy protocol witness table accessor for type AttributeScopes.SwiftUIAttributes.BackgroundColorAttribute and conformance AttributeScopes.SwiftUIAttributes.BackgroundColorAttribute();
  AttributeDynamicLookup.subscript.getter();
  __break(1u);
}

uint64_t sub_234E0F318()
{
  return 8;
}

uint64_t sub_234E0F324(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return key path index equality operator for (KeyPath<AttributeScopes.SwiftUIAttributes, AttributeScopes.SwiftUIAttributes.InterpolationStrategy>)(a1, a2, a3, &lazy cache variable for type metadata for KeyPath<AttributeScopes.SwiftUIAttributes, AttributeScopes.SwiftUIAttributes.BackgroundColorAttribute>, (void (*)(uint64_t))type metadata accessor for AttributeScopes.SwiftUIAttributes) & 1;
}

uint64_t sub_234E0F354(uint64_t a1, uint64_t a2)
{
  return keypath_hash_37Tm(a1, a2, &lazy cache variable for type metadata for KeyPath<AttributeScopes.SwiftUIAttributes, AttributeScopes.SwiftUIAttributes.BackgroundColorAttribute>, (void (*)(uint64_t))type metadata accessor for AttributeScopes.SwiftUIAttributes);
}

unint64_t lazy protocol witness table accessor for type AttributeScopes.SwiftUIAttributes.BackgroundColorAttribute and conformance AttributeScopes.SwiftUIAttributes.BackgroundColorAttribute()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AttributeScopes.SwiftUIAttributes.BackgroundColorAttribute and conformance AttributeScopes.SwiftUIAttributes.BackgroundColorAttribute;
  if (!lazy protocol witness table cache variable for type AttributeScopes.SwiftUIAttributes.BackgroundColorAttribute and conformance AttributeScopes.SwiftUIAttributes.BackgroundColorAttribute)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for AttributeScopes.SwiftUIAttributes.BackgroundColorAttribute, &type metadata for AttributeScopes.SwiftUIAttributes.BackgroundColorAttribute);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.SwiftUIAttributes.BackgroundColorAttribute and conformance AttributeScopes.SwiftUIAttributes.BackgroundColorAttribute);
  }
  return result;
}

void sub_234E0F3B4()
{
  lazy protocol witness table accessor for type AttributeScopes.SwiftUIAttributes.StrikethroughStyleAttribute and conformance AttributeScopes.SwiftUIAttributes.StrikethroughStyleAttribute();
  AttributeDynamicLookup.subscript.getter();
  __break(1u);
}

uint64_t sub_234E0F3D8()
{
  return 8;
}

uint64_t sub_234E0F3E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return key path index equality operator for (KeyPath<AttributeScopes.SwiftUIAttributes, AttributeScopes.SwiftUIAttributes.InterpolationStrategy>)(a1, a2, a3, &lazy cache variable for type metadata for KeyPath<AttributeScopes.SwiftUIAttributes, AttributeScopes.SwiftUIAttributes.StrikethroughStyleAttribute>, (void (*)(uint64_t))type metadata accessor for AttributeScopes.SwiftUIAttributes) & 1;
}

uint64_t sub_234E0F414(uint64_t a1, uint64_t a2)
{
  return keypath_hash_37Tm(a1, a2, &lazy cache variable for type metadata for KeyPath<AttributeScopes.SwiftUIAttributes, AttributeScopes.SwiftUIAttributes.StrikethroughStyleAttribute>, (void (*)(uint64_t))type metadata accessor for AttributeScopes.SwiftUIAttributes);
}

unint64_t lazy protocol witness table accessor for type AttributeScopes.SwiftUIAttributes.StrikethroughStyleAttribute and conformance AttributeScopes.SwiftUIAttributes.StrikethroughStyleAttribute()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AttributeScopes.SwiftUIAttributes.StrikethroughStyleAttribute and conformance AttributeScopes.SwiftUIAttributes.StrikethroughStyleAttribute;
  if (!lazy protocol witness table cache variable for type AttributeScopes.SwiftUIAttributes.StrikethroughStyleAttribute and conformance AttributeScopes.SwiftUIAttributes.StrikethroughStyleAttribute)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for AttributeScopes.SwiftUIAttributes.StrikethroughStyleAttribute, &type metadata for AttributeScopes.SwiftUIAttributes.StrikethroughStyleAttribute);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.SwiftUIAttributes.StrikethroughStyleAttribute and conformance AttributeScopes.SwiftUIAttributes.StrikethroughStyleAttribute);
  }
  return result;
}

void sub_234E0F474()
{
  lazy protocol witness table accessor for type AttributeScopes.SwiftUIAttributes.UnderlineStyleAttribute and conformance AttributeScopes.SwiftUIAttributes.UnderlineStyleAttribute();
  AttributeDynamicLookup.subscript.getter();
  __break(1u);
}

uint64_t sub_234E0F498()
{
  return 8;
}

uint64_t sub_234E0F4A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return key path index equality operator for (KeyPath<AttributeScopes.SwiftUIAttributes, AttributeScopes.SwiftUIAttributes.InterpolationStrategy>)(a1, a2, a3, &lazy cache variable for type metadata for KeyPath<AttributeScopes.SwiftUIAttributes, AttributeScopes.SwiftUIAttributes.UnderlineStyleAttribute>, (void (*)(uint64_t))type metadata accessor for AttributeScopes.SwiftUIAttributes) & 1;
}

uint64_t sub_234E0F4D4(uint64_t a1, uint64_t a2)
{
  return keypath_hash_37Tm(a1, a2, &lazy cache variable for type metadata for KeyPath<AttributeScopes.SwiftUIAttributes, AttributeScopes.SwiftUIAttributes.UnderlineStyleAttribute>, (void (*)(uint64_t))type metadata accessor for AttributeScopes.SwiftUIAttributes);
}

unint64_t lazy protocol witness table accessor for type AttributeScopes.SwiftUIAttributes.UnderlineStyleAttribute and conformance AttributeScopes.SwiftUIAttributes.UnderlineStyleAttribute()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AttributeScopes.SwiftUIAttributes.UnderlineStyleAttribute and conformance AttributeScopes.SwiftUIAttributes.UnderlineStyleAttribute;
  if (!lazy protocol witness table cache variable for type AttributeScopes.SwiftUIAttributes.UnderlineStyleAttribute and conformance AttributeScopes.SwiftUIAttributes.UnderlineStyleAttribute)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for AttributeScopes.SwiftUIAttributes.UnderlineStyleAttribute, &type metadata for AttributeScopes.SwiftUIAttributes.UnderlineStyleAttribute);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.SwiftUIAttributes.UnderlineStyleAttribute and conformance AttributeScopes.SwiftUIAttributes.UnderlineStyleAttribute);
  }
  return result;
}

void sub_234E0F534()
{
  lazy protocol witness table accessor for type AttributeScopes.SwiftUIAttributes.EncapsulationAttribute and conformance AttributeScopes.SwiftUIAttributes.EncapsulationAttribute();
  AttributeDynamicLookup.subscript.getter();
  __break(1u);
}

uint64_t sub_234E0F558()
{
  return 8;
}

uint64_t sub_234E0F564(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return key path index equality operator for (KeyPath<AttributeScopes.SwiftUIAttributes, AttributeScopes.SwiftUIAttributes.InterpolationStrategy>)(a1, a2, a3, &lazy cache variable for type metadata for KeyPath<AttributeScopes.SwiftUIAttributes, AttributeScopes.SwiftUIAttributes.EncapsulationAttribute>, (void (*)(uint64_t))type metadata accessor for AttributeScopes.SwiftUIAttributes) & 1;
}

uint64_t sub_234E0F594(uint64_t a1, uint64_t a2)
{
  return keypath_hash_37Tm(a1, a2, &lazy cache variable for type metadata for KeyPath<AttributeScopes.SwiftUIAttributes, AttributeScopes.SwiftUIAttributes.EncapsulationAttribute>, (void (*)(uint64_t))type metadata accessor for AttributeScopes.SwiftUIAttributes);
}

unint64_t lazy protocol witness table accessor for type AttributeScopes.SwiftUIAttributes.EncapsulationAttribute and conformance AttributeScopes.SwiftUIAttributes.EncapsulationAttribute()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AttributeScopes.SwiftUIAttributes.EncapsulationAttribute and conformance AttributeScopes.SwiftUIAttributes.EncapsulationAttribute;
  if (!lazy protocol witness table cache variable for type AttributeScopes.SwiftUIAttributes.EncapsulationAttribute and conformance AttributeScopes.SwiftUIAttributes.EncapsulationAttribute)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for AttributeScopes.SwiftUIAttributes.EncapsulationAttribute, &type metadata for AttributeScopes.SwiftUIAttributes.EncapsulationAttribute);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.SwiftUIAttributes.EncapsulationAttribute and conformance AttributeScopes.SwiftUIAttributes.EncapsulationAttribute);
  }
  return result;
}

void sub_234E0F5F4()
{
  lazy protocol witness table accessor for type AttributeScopes.SwiftUIAttributes.KerningAttribute and conformance AttributeScopes.SwiftUIAttributes.KerningAttribute();
  AttributeDynamicLookup.subscript.getter();
  __break(1u);
}

uint64_t sub_234E0F618()
{
  return 8;
}

uint64_t sub_234E0F624(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return key path index equality operator for (KeyPath<AttributeScopes.SwiftUIAttributes, AttributeScopes.SwiftUIAttributes.InterpolationStrategy>)(a1, a2, a3, &lazy cache variable for type metadata for KeyPath<AttributeScopes.SwiftUIAttributes, AttributeScopes.SwiftUIAttributes.KerningAttribute>, (void (*)(uint64_t))type metadata accessor for AttributeScopes.SwiftUIAttributes) & 1;
}

uint64_t sub_234E0F654(uint64_t a1, uint64_t a2)
{
  return keypath_hash_37Tm(a1, a2, &lazy cache variable for type metadata for KeyPath<AttributeScopes.SwiftUIAttributes, AttributeScopes.SwiftUIAttributes.KerningAttribute>, (void (*)(uint64_t))type metadata accessor for AttributeScopes.SwiftUIAttributes);
}

void sub_234E0F670()
{
  lazy protocol witness table accessor for type AttributeScopes.SwiftUIAttributes.TrackingAttribute and conformance AttributeScopes.SwiftUIAttributes.TrackingAttribute();
  AttributeDynamicLookup.subscript.getter();
  __break(1u);
}

uint64_t sub_234E0F694()
{
  return 8;
}

uint64_t sub_234E0F6A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return key path index equality operator for (KeyPath<AttributeScopes.SwiftUIAttributes, AttributeScopes.SwiftUIAttributes.InterpolationStrategy>)(a1, a2, a3, &lazy cache variable for type metadata for KeyPath<AttributeScopes.SwiftUIAttributes, AttributeScopes.SwiftUIAttributes.TrackingAttribute>, (void (*)(uint64_t))type metadata accessor for AttributeScopes.SwiftUIAttributes) & 1;
}

uint64_t sub_234E0F6D0(uint64_t a1, uint64_t a2)
{
  return keypath_hash_37Tm(a1, a2, &lazy cache variable for type metadata for KeyPath<AttributeScopes.SwiftUIAttributes, AttributeScopes.SwiftUIAttributes.TrackingAttribute>, (void (*)(uint64_t))type metadata accessor for AttributeScopes.SwiftUIAttributes);
}

void sub_234E0F6EC()
{
  lazy protocol witness table accessor for type AttributeScopes.SwiftUIAttributes.BaselineOffsetAttribute and conformance AttributeScopes.SwiftUIAttributes.BaselineOffsetAttribute();
  AttributeDynamicLookup.subscript.getter();
  __break(1u);
}

uint64_t sub_234E0F710()
{
  return 8;
}

uint64_t sub_234E0F71C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return key path index equality operator for (KeyPath<AttributeScopes.SwiftUIAttributes, AttributeScopes.SwiftUIAttributes.InterpolationStrategy>)(a1, a2, a3, &lazy cache variable for type metadata for KeyPath<AttributeScopes.SwiftUIAttributes, AttributeScopes.SwiftUIAttributes.BaselineOffsetAttribute>, (void (*)(uint64_t))type metadata accessor for AttributeScopes.SwiftUIAttributes) & 1;
}

uint64_t sub_234E0F74C(uint64_t a1, uint64_t a2)
{
  return keypath_hash_37Tm(a1, a2, &lazy cache variable for type metadata for KeyPath<AttributeScopes.SwiftUIAttributes, AttributeScopes.SwiftUIAttributes.BaselineOffsetAttribute>, (void (*)(uint64_t))type metadata accessor for AttributeScopes.SwiftUIAttributes);
}

void sub_234E0F768()
{
  lazy protocol witness table accessor for type AttributeScopes.SwiftUIAttributes.TextScaleAttribute and conformance AttributeScopes.SwiftUIAttributes.TextScaleAttribute();
  AttributeDynamicLookup.subscript.getter();
  __break(1u);
}

uint64_t sub_234E0F78C()
{
  return 8;
}

uint64_t sub_234E0F798(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return key path index equality operator for (KeyPath<AttributeScopes.SwiftUIAttributes, AttributeScopes.SwiftUIAttributes.InterpolationStrategy>)(a1, a2, a3, &lazy cache variable for type metadata for KeyPath<AttributeScopes.SwiftUIAttributes, AttributeScopes.SwiftUIAttributes.TextScaleAttribute>, (void (*)(uint64_t))type metadata accessor for AttributeScopes.SwiftUIAttributes) & 1;
}

uint64_t sub_234E0F7C8(uint64_t a1, uint64_t a2)
{
  return keypath_hash_37Tm(a1, a2, &lazy cache variable for type metadata for KeyPath<AttributeScopes.SwiftUIAttributes, AttributeScopes.SwiftUIAttributes.TextScaleAttribute>, (void (*)(uint64_t))type metadata accessor for AttributeScopes.SwiftUIAttributes);
}

unint64_t lazy protocol witness table accessor for type AttributeScopes.SwiftUIAttributes.TextScaleAttribute and conformance AttributeScopes.SwiftUIAttributes.TextScaleAttribute()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AttributeScopes.SwiftUIAttributes.TextScaleAttribute and conformance AttributeScopes.SwiftUIAttributes.TextScaleAttribute;
  if (!lazy protocol witness table cache variable for type AttributeScopes.SwiftUIAttributes.TextScaleAttribute and conformance AttributeScopes.SwiftUIAttributes.TextScaleAttribute)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for AttributeScopes.SwiftUIAttributes.TextScaleAttribute, &type metadata for AttributeScopes.SwiftUIAttributes.TextScaleAttribute);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.SwiftUIAttributes.TextScaleAttribute and conformance AttributeScopes.SwiftUIAttributes.TextScaleAttribute);
  }
  return result;
}

uint64_t sub_234E0F82C()
{
  return 8;
}

unint64_t lazy protocol witness table accessor for type AttributeScopes.SwiftUIAttributes.SuperscriptAttribute and conformance AttributeScopes.SwiftUIAttributes.SuperscriptAttribute()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AttributeScopes.SwiftUIAttributes.SuperscriptAttribute and conformance AttributeScopes.SwiftUIAttributes.SuperscriptAttribute;
  if (!lazy protocol witness table cache variable for type AttributeScopes.SwiftUIAttributes.SuperscriptAttribute and conformance AttributeScopes.SwiftUIAttributes.SuperscriptAttribute)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for AttributeScopes.SwiftUIAttributes.SuperscriptAttribute, &type metadata for AttributeScopes.SwiftUIAttributes.SuperscriptAttribute);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.SwiftUIAttributes.SuperscriptAttribute and conformance AttributeScopes.SwiftUIAttributes.SuperscriptAttribute);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AttributeScopes.SwiftUIAttributes.PrivateStrikethroughColorAttribute and conformance AttributeScopes.SwiftUIAttributes.PrivateStrikethroughColorAttribute()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AttributeScopes.SwiftUIAttributes.PrivateStrikethroughColorAttribute and conformance AttributeScopes.SwiftUIAttributes.PrivateStrikethroughColorAttribute;
  if (!lazy protocol witness table cache variable for type AttributeScopes.SwiftUIAttributes.PrivateStrikethroughColorAttribute and conformance AttributeScopes.SwiftUIAttributes.PrivateStrikethroughColorAttribute)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for AttributeScopes.SwiftUIAttributes.PrivateStrikethroughColorAttribute, &type metadata for AttributeScopes.SwiftUIAttributes.PrivateStrikethroughColorAttribute);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.SwiftUIAttributes.PrivateStrikethroughColorAttribute and conformance AttributeScopes.SwiftUIAttributes.PrivateStrikethroughColorAttribute);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AttributeScopes.SwiftUIAttributes.PrivateUnderlineColorAttribute and conformance AttributeScopes.SwiftUIAttributes.PrivateUnderlineColorAttribute()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AttributeScopes.SwiftUIAttributes.PrivateUnderlineColorAttribute and conformance AttributeScopes.SwiftUIAttributes.PrivateUnderlineColorAttribute;
  if (!lazy protocol witness table cache variable for type AttributeScopes.SwiftUIAttributes.PrivateUnderlineColorAttribute and conformance AttributeScopes.SwiftUIAttributes.PrivateUnderlineColorAttribute)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for AttributeScopes.SwiftUIAttributes.PrivateUnderlineColorAttribute, &type metadata for AttributeScopes.SwiftUIAttributes.PrivateUnderlineColorAttribute);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.SwiftUIAttributes.PrivateUnderlineColorAttribute and conformance AttributeScopes.SwiftUIAttributes.PrivateUnderlineColorAttribute);
  }
  return result;
}

void sub_234E0F90C()
{
  AttributeScopes.FoundationAttributes.inlinePresentationIntent.getter();
  __break(1u);
}

void sub_234E0F928()
{
  lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.InlinePresentationIntentAttribute and conformance AttributeScopes.FoundationAttributes.InlinePresentationIntentAttribute();
  AttributeDynamicLookup.subscript.getter();
  __break(1u);
}

uint64_t sub_234E0F94C()
{
  return 8;
}

uint64_t sub_234E0F958(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return key path index equality operator for (KeyPath<AttributeScopes.SwiftUIAttributes, AttributeScopes.SwiftUIAttributes.InterpolationStrategy>)(a1, a2, a3, &lazy cache variable for type metadata for KeyPath<AttributeScopes.FoundationAttributes, AttributeScopes.FoundationAttributes.InlinePresentationIntentAttribute>, (void (*)(uint64_t))MEMORY[0x24BDCC1B8]) & 1;
}

uint64_t sub_234E0F988(uint64_t a1, uint64_t a2)
{
  return keypath_hash_37Tm(a1, a2, &lazy cache variable for type metadata for KeyPath<AttributeScopes.FoundationAttributes, AttributeScopes.FoundationAttributes.InlinePresentationIntentAttribute>, (void (*)(uint64_t))MEMORY[0x24BDCC1B8]);
}

void sub_234E0F9A4()
{
  AttributeScopes.FoundationAttributes.link.getter();
  __break(1u);
}

void sub_234E0F9C0()
{
  lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.LinkAttribute and conformance AttributeScopes.FoundationAttributes.LinkAttribute();
  AttributeDynamicLookup.subscript.getter();
  __break(1u);
}

uint64_t sub_234E0F9E4()
{
  return 8;
}

uint64_t sub_234E0F9F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return key path index equality operator for (KeyPath<AttributeScopes.SwiftUIAttributes, AttributeScopes.SwiftUIAttributes.InterpolationStrategy>)(a1, a2, a3, &lazy cache variable for type metadata for KeyPath<AttributeScopes.FoundationAttributes, AttributeScopes.FoundationAttributes.LinkAttribute>, (void (*)(uint64_t))MEMORY[0x24BDCC1B8]) & 1;
}

uint64_t sub_234E0FA20(uint64_t a1, uint64_t a2)
{
  return keypath_hash_37Tm(a1, a2, &lazy cache variable for type metadata for KeyPath<AttributeScopes.FoundationAttributes, AttributeScopes.FoundationAttributes.LinkAttribute>, (void (*)(uint64_t))MEMORY[0x24BDCC1B8]);
}

uint64_t sub_234E0FA3C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = type metadata accessor for AttributeScopes.SwiftUIAttributes(0);
  *a1 = result;
  return result;
}

uint64_t outlined consume of Text.Style.LineStyle(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if ((unint64_t)(a2 - 1) >= 2)
    return swift_release();
  return result;
}

uint64_t sub_234E0FB04()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

ValueMetadata *type metadata accessor for AttributeScopes.SwiftUIAttributes.PrivateUnderlineColorAttribute()
{
  return &type metadata for AttributeScopes.SwiftUIAttributes.PrivateUnderlineColorAttribute;
}

ValueMetadata *type metadata accessor for AttributeScopes.SwiftUIAttributes.PrivateStrikethroughColorAttribute()
{
  return &type metadata for AttributeScopes.SwiftUIAttributes.PrivateStrikethroughColorAttribute;
}

uint64_t storeEnumTagSinglePayload for AttributeScopes.SwiftUIAttributes.InterpolationStrategy(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_234E0FB94 + 4 * byte_2352A41E5[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_234E0FBC8 + 4 * byte_2352A41E0[v4]))();
}

uint64_t sub_234E0FBC8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_234E0FBD0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x234E0FBD8);
  return result;
}

uint64_t sub_234E0FBE4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x234E0FBECLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_234E0FBF0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_234E0FBF8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for AttributeScopes.SwiftUIAttributes.InterpolationStrategy.CodingKeys()
{
  return &unk_25060C770;
}

void *type metadata accessor for AttributeScopes.SwiftUIAttributes.InterpolationStrategy.AnimatedCodingKeys()
{
  return &unk_25060C800;
}

void *type metadata accessor for AttributeScopes.SwiftUIAttributes.InterpolationStrategy.UnanimatedCodingKeys()
{
  return &unk_25060C820;
}

uint64_t protocol witness for static DecodableAttributedStringKey.decode(from:) in conformance AttributeScopes.SwiftUIAttributes.TrackingAttribute()
{
  return protocol witness for static DecodableAttributedStringKey.decode(from:) in conformance AttributeScopes.SwiftUIAttributes.BaselineOffsetAttribute();
}

uint64_t protocol witness for static EncodableAttributedStringKey.encode(_:to:) in conformance AttributeScopes.SwiftUIAttributes.TrackingAttribute()
{
  return protocol witness for static EncodableAttributedStringKey.encode(_:to:) in conformance AttributeScopes.SwiftUIAttributes.BaselineOffsetAttribute();
}

uint64_t DynamicContainerItem.needsTransitions.getter()
{
  return 0;
}

double DynamicContainerItem.zIndex.getter()
{
  return 0.0;
}

uint64_t static DynamicContainerItem.supportsReuse.getter()
{
  return 0;
}

uint64_t DynamicContainerItem.canBeReused(by:)()
{
  return 0;
}

uint64_t DynamicContainerItem.list.getter()
{
  return 0x100000000;
}

{
  return 0x100000000;
}

void DynamicContainerItem.viewID.getter(_QWORD *a1@<X8>)
{
  DynamicContainerItem.viewID.getter(a1);
}

{
  *a1 = 0;
  a1[1] = 0;
}

uint64_t DynamicContainerID.uniqueId.getter()
{
  unsigned int *v0;

  return *v0;
}

uint64_t DynamicContainerID.uniqueId.setter(uint64_t result)
{
  _DWORD *v1;

  *v1 = result;
  return result;
}

uint64_t (*DynamicContainerID.uniqueId.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t DynamicContainerID.viewIndex.getter()
{
  uint64_t v0;

  return *(unsigned int *)(v0 + 4);
}

uint64_t DynamicContainerID.viewIndex.setter(uint64_t result)
{
  uint64_t v1;

  *(_DWORD *)(v1 + 4) = result;
  return result;
}

uint64_t (*DynamicContainerID.viewIndex.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t DynamicContainerID.init(uniqueId:viewIndex:)@<X0>(uint64_t result@<X0>, int a2@<W1>, _DWORD *a3@<X8>)
{
  *a3 = result;
  a3[1] = a2;
  return result;
}

BOOL static DynamicContainerID.< infix(_:_:)(_DWORD *a1, _DWORD *a2)
{
  if (*a1 < *a2)
    return 1;
  return *a1 == *a2 && a1[1] < a2[1];
}

void DynamicContainerID.hash(into:)()
{
  Swift::UInt32 *v0;
  Swift::UInt32 v1;

  v1 = v0[1];
  Hasher._combine(_:)(*v0);
  Hasher._combine(_:)(v1);
}

BOOL static DynamicContainerID.== infix(_:_:)(_QWORD *a1, _QWORD *a2)
{
  return *a1 == *a2;
}

Swift::Int DynamicContainerID.hashValue.getter()
{
  Swift::UInt32 *v0;
  Swift::UInt32 v1;
  Swift::UInt32 v2;

  v1 = *v0;
  v2 = v0[1];
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance DynamicContainerID()
{
  Swift::UInt32 *v0;
  Swift::UInt32 v1;
  Swift::UInt32 v2;

  v1 = *v0;
  v2 = v0[1];
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance DynamicContainerID()
{
  Swift::UInt32 *v0;
  Swift::UInt32 v1;

  v1 = v0[1];
  Hasher._combine(_:)(*v0);
  Hasher._combine(_:)(v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance DynamicContainerID()
{
  Swift::UInt32 *v0;
  Swift::UInt32 v1;

  Hasher.init(_seed:)();
  v1 = v0[1];
  Hasher._combine(_:)(*v0);
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

BOOL protocol witness for static Comparable.< infix(_:_:) in conformance DynamicContainerID(_DWORD *a1, _DWORD *a2)
{
  if (*a1 < *a2)
    return 1;
  return *a1 == *a2 && a1[1] < a2[1];
}

BOOL protocol witness for static Comparable.<= infix(_:_:) in conformance DynamicContainerID(_DWORD *a1, _DWORD *a2)
{
  if (*a2 < *a1)
    return 0;
  return *a2 != *a1 || a2[1] >= a1[1];
}

BOOL protocol witness for static Comparable.>= infix(_:_:) in conformance DynamicContainerID(_DWORD *a1, _DWORD *a2)
{
  if (*a1 < *a2)
    return 0;
  return *a1 != *a2 || a1[1] >= a2[1];
}

BOOL protocol witness for static Comparable.> infix(_:_:) in conformance DynamicContainerID(_DWORD *a1, _DWORD *a2)
{
  if (*a2 < *a1)
    return 1;
  return *a2 == *a1 && a2[1] < a1[1];
}

uint64_t DynamicContainer.Info.items.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t DynamicContainer.Info.indexMap.getter()
{
  return swift_bridgeObjectRetain();
}

BOOL static DynamicContainer.Info.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return *(_DWORD *)(a1 + 44) == *(_DWORD *)(a2 + 44);
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance DynamicContainer.Info(uint64_t a1, uint64_t a2)
{
  return *(_DWORD *)(a1 + 44) == *(_DWORD *)(a2 + 44);
}

uint64_t DynamicContainer.ItemInfo.uniqueId.getter()
{
  uint64_t v0;

  return *(unsigned int *)(v0 + 24);
}

uint64_t DynamicContainer.ItemInfo.phase.getter()
{
  uint64_t v0;

  swift_beginAccess();
  return *(unsigned __int8 *)(v0 + 84);
}

uint64_t DynamicContainer.ItemInfo.for<A>(_:)()
{
  specialized DynamicContainer.ItemInfo.for<A>(_:)();
  return swift_retain();
}

uint64_t DynamicContainer.ItemInfo.__allocating_init(subgraph:uniqueId:viewCount:phase:needsTransitions:outputs:)(uint64_t a1, int a2, int a3, char a4, char a5, uint64_t *a6)
{
  uint64_t v12;
  uint64_t v13;

  v12 = swift_allocObject();
  v13 = *a6;
  *(_QWORD *)(v12 + 64) = 0;
  *(_QWORD *)(v12 + 72) = 0;
  *(_QWORD *)(v12 + 56) = 0;
  *(_DWORD *)(v12 + 80) = 0;
  *(_BYTE *)(v12 + 84) = 3;
  *(_QWORD *)(v12 + 16) = a1;
  *(_DWORD *)(v12 + 24) = a2;
  *(_DWORD *)(v12 + 28) = a3;
  *(_QWORD *)(v12 + 32) = v13;
  *(_QWORD *)(v12 + 40) = a6[1];
  *(_BYTE *)(v12 + 48) = a5;
  swift_beginAccess();
  *(_BYTE *)(v12 + 84) = a4;
  return v12;
}

uint64_t DynamicContainer.ItemInfo.init(subgraph:uniqueId:viewCount:phase:needsTransitions:outputs:)(uint64_t a1, int a2, int a3, char a4, char a5, uint64_t *a6)
{
  uint64_t v6;
  uint64_t v8;

  v8 = *a6;
  *(_QWORD *)(v6 + 64) = 0;
  *(_QWORD *)(v6 + 72) = 0;
  *(_QWORD *)(v6 + 56) = 0;
  *(_DWORD *)(v6 + 80) = 0;
  *(_BYTE *)(v6 + 84) = 3;
  *(_QWORD *)(v6 + 16) = a1;
  *(_DWORD *)(v6 + 24) = a2;
  *(_DWORD *)(v6 + 28) = a3;
  *(_QWORD *)(v6 + 32) = v8;
  *(_QWORD *)(v6 + 40) = a6[1];
  *(_BYTE *)(v6 + 48) = a5;
  swift_beginAccess();
  *(_BYTE *)(v6 + 84) = a4;
  return v6;
}

uint64_t DynamicContainer.ItemInfo.list.getter()
{
  return 0x100000000;
}

void DynamicContainer.ItemInfo.id.getter(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

uint64_t DynamicContainer.ItemInfo.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_release();
  return v0;
}

uint64_t DynamicContainer.ItemInfo.__deallocating_deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocClassInstance();
}

uint64_t DynamicContainer._ItemInfo.item.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t AssociatedTypeWitness;

  v3 = v1 + *(_QWORD *)(*(_QWORD *)v1 + 208);
  swift_beginAccess();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 16))(a1, v3, AssociatedTypeWitness);
}

uint64_t DynamicContainer._ItemInfo.itemLayout.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t AssociatedTypeWitness;

  v3 = v1 + *(_QWORD *)(*(_QWORD *)v1 + 216);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 16))(a1, v3, AssociatedTypeWitness);
}

uint64_t DynamicContainer._ItemInfo.__allocating_init(item:itemLayout:subgraph:uniqueId:viewCount:phase:needsTransitions:outputs:)(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5, char a6, char a7, uint64_t *a8)
{
  uint64_t v16;

  v16 = swift_allocObject();
  DynamicContainer._ItemInfo.init(item:itemLayout:subgraph:uniqueId:viewCount:phase:needsTransitions:outputs:)(a1, a2, a3, a4, a5, a6, a7, a8);
  return v16;
}

uint64_t DynamicContainer._ItemInfo.init(item:itemLayout:subgraph:uniqueId:viewCount:phase:needsTransitions:outputs:)(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5, char a6, char a7, uint64_t *a8)
{
  uint64_t v8;
  uint64_t v13;
  uint64_t v14;
  uint64_t AssociatedTypeWitness;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v13 = *a8;
  v14 = v8 + *(_QWORD *)(*(_QWORD *)v8 + 208);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v16 = a8[1];
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 32))(v14, a1, AssociatedTypeWitness);
  v17 = v8 + *(_QWORD *)(*(_QWORD *)v8 + 216);
  v18 = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 32))(v17, a2, v18);
  *(_QWORD *)(v8 + 64) = 0;
  *(_QWORD *)(v8 + 72) = 0;
  *(_QWORD *)(v8 + 56) = 0;
  *(_DWORD *)(v8 + 80) = 0;
  *(_BYTE *)(v8 + 84) = 3;
  *(_QWORD *)(v8 + 16) = a3;
  *(_DWORD *)(v8 + 24) = a4;
  *(_DWORD *)(v8 + 28) = a5;
  *(_QWORD *)(v8 + 32) = v13;
  *(_QWORD *)(v8 + 40) = v16;
  *(_BYTE *)(v8 + 48) = a7;
  swift_beginAccess();
  *(_BYTE *)(v8 + 84) = a6;
  return v8;
}

uint64_t DynamicContainer._ItemInfo.list.getter()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t AssociatedTypeWitness;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t AssociatedConformanceWitness;
  unint64_t v8;
  uint64_t v10;

  v1 = *v0;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v3 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v5 = (char *)&v10 - v4;
  v6 = (char *)v0 + *(_QWORD *)(v1 + 208);
  swift_beginAccess();
  (*(void (**)(char *, char *, uint64_t))(v3 + 16))(v5, v6, AssociatedTypeWitness);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v8 = (*(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 56))(AssociatedTypeWitness, AssociatedConformanceWitness);
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, AssociatedTypeWitness);
  return v8 | ((HIDWORD(v8) & 1) << 32);
}

uint64_t DynamicContainer._ItemInfo.id.getter()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t AssociatedTypeWitness;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t AssociatedConformanceWitness;
  uint64_t v9;

  v1 = *v0;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v3 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v5 = (char *)&v9 - v4;
  v6 = (char *)v0 + *(_QWORD *)(v1 + 208);
  swift_beginAccess();
  (*(void (**)(char *, char *, uint64_t))(v3 + 16))(v5, v6, AssociatedTypeWitness);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  (*(void (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 64))(AssociatedTypeWitness, AssociatedConformanceWitness);
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, AssociatedTypeWitness);
}

void DynamicContainer._ItemInfo.__allocating_init(subgraph:uniqueId:viewCount:phase:needsTransitions:outputs:)()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

void DynamicContainer._ItemInfo.init(subgraph:uniqueId:viewCount:phase:needsTransitions:outputs:)()
{
  specialized DynamicContainer._ItemInfo.init(subgraph:uniqueId:viewCount:phase:needsTransitions:outputs:)();
}

uint64_t DynamicContainer._ItemInfo.__ivar_destroyer()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t AssociatedTypeWitness;
  uint64_t v3;
  uint64_t v4;

  v1 = v0 + *(_QWORD *)(*(_QWORD *)v0 + 208);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 8))(v1, AssociatedTypeWitness);
  v3 = v0 + *(_QWORD *)(*(_QWORD *)v0 + 216);
  v4 = swift_getAssociatedTypeWitness();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v3, v4);
}

id *DynamicContainer._ItemInfo.deinit()
{
  id *v0;
  char *v1;
  uint64_t AssociatedTypeWitness;
  char *v3;
  uint64_t v4;

  swift_bridgeObjectRelease();
  swift_release();
  v1 = (char *)v0 + *((_QWORD *)*v0 + 26);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 8))(v1, AssociatedTypeWitness);
  v3 = (char *)v0 + *((_QWORD *)*v0 + 27);
  v4 = swift_getAssociatedTypeWitness();
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v3, v4);
  return v0;
}

uint64_t DynamicContainer._ItemInfo.__deallocating_deinit()
{
  DynamicContainer._ItemInfo.deinit();
  return swift_deallocClassInstance();
}

uint64_t static DynamicContainer.makeContainer<A>(adaptor:inputs:)(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  char *v24;
  id v25;
  double v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _DWORD *v34;
  uint64_t v35;
  unsigned int v36;
  uint64_t *v37;
  char v39[8];
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  int v46;
  uint64_t v47;
  char *v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t v54[2];
  uint64_t v55;
  uint64_t v56;
  __int128 v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char v61;
  int v62;
  unint64_t v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  int v73;
  uint64_t v74;

  v53 = a1;
  v74 = *MEMORY[0x24BDAC8D0];
  v47 = *(_QWORD *)(a4 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v10 = (char *)&v43 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for DynamicContainerInfo(0, v11, v12, v11);
  v52 = *(_QWORD *)(v13 - 8);
  MEMORY[0x24BDAC7A8](v13);
  v48 = (char *)&v43 - v14;
  v49 = *(_QWORD *)a3;
  v46 = *(_DWORD *)(a3 + 8);
  v50 = *(_QWORD *)(a3 + 16);
  v15 = *(_QWORD *)(a3 + 24);
  v16 = *(_QWORD *)(a3 + 32);
  v17 = *(_QWORD *)(a3 + 48);
  v51 = *(_QWORD *)(a3 + 40);
  v18 = *(_QWORD *)(a3 + 56);
  v19 = *(_QWORD *)(a3 + 64);
  v20 = *(_QWORD *)(a3 + 72);
  v45 = *(_DWORD *)(a3 + 80);
  LODWORD(v14) = *MEMORY[0x24BE096C0];
  v55 = MEMORY[0x24BEE4AF8];
  LODWORD(v56) = 0;
  HIDWORD(v56) = v14;
  v21 = *(_QWORD *)(v17 + 16);
  if (v21)
  {
    v43 = a2;
    v44 = a5;
    swift_bridgeObjectRetain();
    v22 = v17 + 40;
    do
    {
      (*(void (**)(uint64_t *, ValueMetadata *, _UNKNOWN **))(*(_QWORD *)v22 + 16))(&v55, &type metadata for DynamicContainer.AddCombinerVisitor, &protocol witness table for DynamicContainer.AddCombinerVisitor);
      v22 += 16;
      --v21;
    }
    while (v21);
    swift_bridgeObjectRelease();
    a5 = v44;
    a2 = v43;
  }
  type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for External<()>, MEMORY[0x24BEE4AE0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BE09670]);
  lazy protocol witness table accessor for type External<()> and conformance External<A>();
  v23 = Attribute.init<A>(body:value:flags:update:)();
  LODWORD(v44) = v23;
  (*(void (**)(char *, uint64_t, uint64_t))(v47 + 16))(v10, a2, a4);
  v63 = v49;
  v64 = v46;
  v65 = v50;
  v66 = v15;
  v67 = v16;
  v68 = v51;
  v69 = v17;
  v70 = v18;
  v71 = v19;
  v72 = v20;
  v73 = v45;
  v54[0] = v55;
  v54[1] = v56;
  v57 = MEMORY[0x24BEE4AF8];
  v59 = 0;
  v60 = 0;
  v58 = 0;
  v61 = 1;
  v62 = 0;
  v40 = a4;
  v24 = v48;
  v25 = DynamicContainerInfo.init(asyncSignal:adaptor:inputs:outputs:info:lastUniqueId:lastRemoved:lastResetSeed:needsPhaseUpdate:)(v23, (uint64_t)v10, (uint64_t *)&v63, v54, &v57, 0, 0, -1, v48, 0, v40, a5);
  v26 = MEMORY[0x24BDAC7A8](v25);
  v41 = v13;
  v42 = MEMORY[0x23B7C9C04](&protocol conformance descriptor for DynamicContainerInfo<A>, v13, v26);
  type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for Attribute<DynamicContainer.Info>, (uint64_t)&type metadata for DynamicContainer.Info, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BE095F0]);
  v28 = v27;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v24, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA12StatefulRuleRd__lufcADSPyqd__GXEfU_TA_3, (uint64_t)v39, v13, MEMORY[0x24BEE4078], v28, MEMORY[0x24BEE40A8], v29);
  (*(void (**)(char *, uint64_t))(v52 + 8))(v24, v13);
  v30 = v63;
  AGGraphAddInput();
  AGGraphSetFlags();
  v31 = v55;
  v32 = v56;
  v33 = *(_QWORD *)(v55 + 16);
  if (v33)
  {
    swift_bridgeObjectRetain();
    v34 = (_DWORD *)(v31 + 48);
    do
    {
      v35 = *((_QWORD *)v34 - 1);
      v36 = *v34;
      v34 += 6;
      v63 = __PAIR64__(v30, v36);
      (*(void (**)(unint64_t *, ValueMetadata *, _UNKNOWN **))(v35 + 16))(&v63, &type metadata for DynamicContainer.AttachCombinerVisitor, &protocol witness table for DynamicContainer.AttachCombinerVisitor);
      --v33;
    }
    while (v33);
    swift_bridgeObjectRelease();
  }
  v37 = v53;
  *v53 = v31;
  v37[1] = v32;
  return v30;
}

id DynamicContainerInfo.init(asyncSignal:adaptor:inputs:outputs:info:lastUniqueId:lastRemoved:lastResetSeed:needsPhaseUpdate:)@<X0>(int a1@<W0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X3>, __int128 *a5@<X4>, int a6@<W5>, int a7@<W6>, int a8@<W7>, char *a9@<X8>, char a10, uint64_t a11, uint64_t a12)
{
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  int *v20;
  char *v21;
  char *v22;
  id result;
  char *v24;
  int v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v34;

  v16 = *a3;
  v17 = *((_DWORD *)a3 + 2);
  v18 = a3[2];
  v19 = *((_DWORD *)a3 + 20);
  v34 = *a4;
  v30 = *a5;
  v28 = *((_QWORD *)a5 + 3);
  v29 = *((_QWORD *)a5 + 2);
  v27 = *((_QWORD *)a5 + 4);
  v25 = *((_DWORD *)a5 + 11);
  v26 = *((_BYTE *)a5 + 40);
  *(_DWORD *)a9 = a1;
  v20 = (int *)type metadata accessor for DynamicContainerInfo(0, a11, a12, (uint64_t)a4);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(a11 - 8) + 32))(&a9[v20[9]], a2, a11);
  v21 = &a9[v20[10]];
  *(_QWORD *)v21 = v16;
  *((_DWORD *)v21 + 2) = v17;
  *((_QWORD *)v21 + 2) = v18;
  *(_OWORD *)(v21 + 24) = *(_OWORD *)(a3 + 3);
  *(_OWORD *)(v21 + 40) = *(_OWORD *)(a3 + 5);
  *(_OWORD *)(v21 + 56) = *(_OWORD *)(a3 + 7);
  *((_QWORD *)v21 + 9) = a3[9];
  *((_DWORD *)v21 + 20) = v19;
  v22 = &a9[v20[11]];
  *(_QWORD *)v22 = v34;
  *((_QWORD *)v22 + 1) = a4[1];
  result = (id)AGSubgraphGetCurrent();
  if (result)
  {
    *(_QWORD *)&a9[v20[12]] = result;
    v24 = &a9[v20[13]];
    *(_OWORD *)v24 = v30;
    *((_QWORD *)v24 + 2) = v29;
    *((_QWORD *)v24 + 3) = v28;
    *((_QWORD *)v24 + 4) = v27;
    v24[40] = v26;
    *((_DWORD *)v24 + 11) = v25;
    *(_DWORD *)&a9[v20[14]] = a6;
    *(_DWORD *)&a9[v20[15]] = a7;
    *(_DWORD *)&a9[v20[16]] = a8;
    a9[v20[17]] = a10 & 1;
  }
  else
  {
    __break(1u);
  }
  return result;
}

void DynamicContainer.AddCombinerVisitor.visit<A>(key:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  int v9;
  _BYTE v10[16];
  uint64_t AssociatedTypeWitness;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  v9 = *MEMORY[0x24BE096C0];
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v12 = type metadata accessor for DynamicPreferenceCombiner(0, a2, a3, v5);
  v13 = MEMORY[0x23B7C9C04](&protocol conformance descriptor for DynamicPreferenceCombiner<A>, v12);
  v6 = type metadata accessor for Attribute();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v9, (uint64_t)partial apply for closure #1 in Attribute.init<A>(_:), (uint64_t)v10, v12, MEMORY[0x24BEE4078], v6, MEMORY[0x24BEE40A8], v7);
  LOBYTE(v9) = 0;
  _ViewOutputs.subscript.setter(v8, a2, a2, a3);
}

uint64_t DynamicContainer.AttachCombinerVisitor.visit<A>(key:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  type metadata accessor for DynamicPreferenceCombiner(0, a2, a3, a4);
  return AGGraphMutateAttribute();
}

unint64_t DynamicContainer.Info.viewIndex(id:)(unsigned int *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  unint64_t v6;
  char v7;
  unint64_t result;
  uint64_t v9;
  int v10;

  v2 = v1;
  v3 = v1[1];
  if (!*(_QWORD *)(v3 + 16))
    return 0;
  v4 = *v2;
  v5 = a1[1];
  v6 = specialized __RawDictionaryStorage.find<A>(_:)(*a1);
  if ((v7 & 1) == 0)
    return 0;
  result = *(_QWORD *)(*(_QWORD *)(v3 + 56) + 8 * v6);
  if ((v4 & 0xC000000000000001) != 0)
  {
    v9 = MEMORY[0x23B7C6D9C](result, v4);
LABEL_7:
    v10 = *(_DWORD *)(v9 + 76);
    result = swift_release();
    if (!__OFADD__(v10, v5))
      return (int)(v10 + v5);
    goto LABEL_12;
  }
  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  if (result < *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v9 = swift_retain();
    goto LABEL_7;
  }
LABEL_13:
  __break(1u);
  return result;
}

Swift::Void __swiftcall DynamicContainerInfo.updateValue()()
{
  int *v0;
  uint64_t v1;
  uint64_t v2;
  Swift::Int v3;
  unint64_t v4;
  unint64_t v5;
  int *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t isUniquelyReferenced_nonNull_native;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  Swift::Int v22;
  Swift::Int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  int64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  Swift::Int v35;
  Swift::Int v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  BOOL v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  _BOOL8 v51;
  uint64_t v52;
  unint64_t v53;
  char v54;
  _QWORD *v55;
  uint64_t v56;
  BOOL v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int64_t v62;
  char *v63;
  char *v64;
  int v65;
  unint64_t v66;
  uint64_t i;
  unint64_t v68;
  uint64_t v69;
  unsigned int v70;
  unint64_t v71;
  uint64_t v72;
  char *v73;
  unint64_t v74;
  unint64_t v75;
  int64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  int v82;
  uint64_t v83;
  char v84;
  __int128 v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  id v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  int v101;
  int v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  int *v109;
  uint64_t v110;
  unint64_t v111;
  __int128 v112;
  __int128 v113;
  uint64_t v114;
  char v115;
  int v116;
  uint64_t v117;

  v6 = v0;
  v117 = *MEMORY[0x24BDAC8D0];
  v7 = v1 + v0[10];
  v8 = *(_DWORD *)AGGraphGetValue() >> 1;
  v9 = v6[16];
  v10 = v8 == *(_DWORD *)(v1 + v9);
  v108 = v1;
  v109 = v6;
  if (!v10)
  {
    *(_DWORD *)(v1 + v9) = v8;
    v11 = 1;
    if ((*(_BYTE *)(v1 + v6[17]) & 1) != 0)
      goto LABEL_6;
LABEL_4:
    v5 = 0;
    goto LABEL_28;
  }
  v11 = *(_DWORD *)(v7 + 36) & 1;
  *(_DWORD *)(v1 + v9) = v8;
  if (*(_BYTE *)(v1 + v6[17]) != 1)
    goto LABEL_4;
LABEL_6:
  v1 = *(_QWORD *)(v1 + v6[13]);
  if ((unint64_t)v1 >> 62)
    goto LABEL_232;
  isUniquelyReferenced_nonNull_native = *(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10);
LABEL_8:
  v5 = 0;
  if (!isUniquelyReferenced_nonNull_native)
  {
LABEL_27:
    v6 = v109;
    v1 = v108;
    *(_BYTE *)(v108 + v109[17]) = 0;
LABEL_28:
    v4 = DynamicContainerInfo.updateItems(disableTransitions:)(v11, (uint64_t)v6);
    if ((v4 & 1) == 0)
    {
      v7 = v109[13];
      v15 = *(_QWORD *)(v1 + v7);
      if (!(v15 >> 62))
      {
        isUniquelyReferenced_nonNull_native = *(_QWORD *)((v15 & 0xFFFFFFFFFFFFF8) + 0x10);
        goto LABEL_31;
      }
      goto LABEL_234;
    }
    goto LABEL_45;
  }
  v3 = 0;
  v7 = v1 & 0xC000000000000001;
  v4 = v1 + 32;
  v110 = isUniquelyReferenced_nonNull_native - 1;
LABEL_10:
  v111 = v5;
  if (v3 <= isUniquelyReferenced_nonNull_native)
    v5 = isUniquelyReferenced_nonNull_native;
  else
    v5 = v3;
  v2 = v3;
  while (1)
  {
    if (v5 == v2)
      goto LABEL_214;
    if (v7)
    {
      v13 = MEMORY[0x23B7C6D9C](v2, v1);
      goto LABEL_19;
    }
    if ((unint64_t)v2 >= *(_QWORD *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10))
      break;
    v13 = *(_QWORD *)(v4 + 8 * v2);
    swift_retain();
LABEL_19:
    swift_beginAccess();
    v3 = *(unsigned __int8 *)(v13 + 84);
    swift_release();
    if (!(_DWORD)v3)
    {
      if (v7)
      {
        v14 = MEMORY[0x23B7C6D9C](v2, v1);
      }
      else
      {
        if ((unint64_t)v2 >= *(_QWORD *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10))
          goto LABEL_248;
        v14 = *(_QWORD *)(v4 + 8 * v2);
        swift_retain();
      }
      v3 = v2 + 1;
      v5 = 1;
      swift_beginAccess();
      *(_BYTE *)(v14 + 84) = 1;
      swift_release();
      if (v110 == v2)
        goto LABEL_27;
      goto LABEL_10;
    }
    if (isUniquelyReferenced_nonNull_native == ++v2)
    {
      v5 = v111;
      goto LABEL_27;
    }
  }
  while (2)
  {
    __break(1u);
LABEL_221:
    __break(1u);
    while (2)
    {
      __break(1u);
LABEL_223:
      __break(1u);
LABEL_224:
      __break(1u);
LABEL_225:
      if (isUniquelyReferenced_nonNull_native < 0)
        v1 = isUniquelyReferenced_nonNull_native;
      else
        v1 = isUniquelyReferenced_nonNull_native & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain();
      v93 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      v94 = *(_QWORD *)(v4 + 24);
      v95 = *(_QWORD *)(v4 + 32);
      v104 = v93;
      v103 = v95;
      v11 = v93 - v95;
      v107 = v94;
      v20 = v93 - v95 - v94;
      if (v11 - v94 < v11)
      {
        swift_bridgeObjectRetain();
        v1 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (v1 >= v20)
        {
LABEL_48:
          if (v20 < 0)
            goto LABEL_236;
          if (v7)
          {
            swift_bridgeObjectRetain();
            v1 = _CocoaArrayWrapper.endIndex.getter();
            swift_bridgeObjectRelease();
          }
          else
          {
            v1 = *(_QWORD *)((isUniquelyReferenced_nonNull_native & 0xFFFFFFFFFFFFF8) + 0x10);
          }
          if (v1 < v11)
            goto LABEL_237;
          if (v11 < 0)
            goto LABEL_238;
          if ((isUniquelyReferenced_nonNull_native & 0xC000000000000001) != 0 && v107)
          {
            type metadata accessor for DynamicContainer.ItemInfo();
            v22 = v20;
            do
            {
              v23 = v22 + 1;
              _ArrayBuffer._typeCheckSlowPath(_:)(v22);
              v22 = v23;
            }
            while (v11 != v23);
          }
          v111 = v11;
          v106 = v20;
          if (v7)
          {
            swift_bridgeObjectRetain();
            v3 = _CocoaArrayWrapper.subscript.getter();
            v24 = v25;
            v20 = v26;
            v4 = v27;
            swift_bridgeObjectRelease();
          }
          else
          {
            v3 = isUniquelyReferenced_nonNull_native & 0xFFFFFFFFFFFFFF8;
            v24 = (isUniquelyReferenced_nonNull_native & 0xFFFFFFFFFFFFFF8) + 32;
            v4 = (2 * v11) | 1;
            swift_bridgeObjectRetain();
          }
          if (v20 == v4 >> 1)
            goto LABEL_94;
          v7 = v20 + 1;
          if (__OFADD__(v20, 1))
            goto LABEL_247;
          if (v7 == v4 >> 1)
          {
LABEL_94:
            v40 = v24;
            v41 = v20;
            v42 = v4;
            v20 = v106;
            v11 = v111;
            v4 = v110;
            v1 = v110;
            specialized Array.subscript.setter(v3, v40, v41, v42, v106, v111);
            goto LABEL_95;
          }
          while (v7 >= v20 && v7 < (uint64_t)(v4 >> 1))
          {
            isUniquelyReferenced_nonNull_native = *(_QWORD *)(v24 + 8 * v7);
            swift_retain();
            v105 = v7;
            while (1)
            {
              v2 = v7 - 1;
              if (__OFSUB__(v7, 1))
                goto LABEL_202;
              if (v2 < v20)
                goto LABEL_203;
              v28 = v4 >> 1;
              if (v2 >= (uint64_t)(v4 >> 1))
                goto LABEL_203;
              v29 = *(_QWORD *)(v24 + 8 * v2);
              if (*(_DWORD *)(isUniquelyReferenced_nonNull_native + 72) >= *(_DWORD *)(v29 + 72))
                break;
              swift_retain_n();
              if ((v4 & 1) == 0 || (swift_isUniquelyReferenced_nonNull() & 1) == 0)
              {
                specialized _ArrayBufferProtocol.init(copying:)(v24, v20, v4);
                v5 = v30;
                v24 = v31;
                v20 = v32;
                v4 = v33;
                swift_unknownObjectRelease();
                v28 = v4 >> 1;
                v3 = v5;
              }
              if (v7 < v20 || v7 >= v28)
                goto LABEL_204;
              v5 = *(_QWORD *)(v24 + 8 * v7);
              *(_QWORD *)(v24 + 8 * v7) = v29;
              swift_release();
              swift_release();
              --v7;
              v34 = v2;
              if (v2 == v20)
                goto LABEL_83;
            }
            v2 = v7;
            v34 = v20;
LABEL_83:
            v7 = v105;
            if (v2 == v105)
            {
              swift_release();
              v20 = v34;
            }
            else
            {
              swift_retain();
              if ((v4 & 1) != 0 && (swift_isUniquelyReferenced_nonNull() & 1) != 0)
              {
                v20 = v34;
              }
              else
              {
                specialized _ArrayBufferProtocol.init(copying:)(v24, v34, v4);
                v36 = v35;
                v24 = v37;
                v20 = v38;
                v4 = v39;
                swift_unknownObjectRelease();
                v3 = v36;
              }
              if (v2 < v20 || v2 >= (uint64_t)(v4 >> 1))
                goto LABEL_224;
              *(_QWORD *)(v24 + 8 * v2) = isUniquelyReferenced_nonNull_native;
              swift_release();
              swift_release();
            }
            if (__OFADD__(v7, 1))
              goto LABEL_223;
            if (++v7 == v4 >> 1)
              goto LABEL_94;
          }
          continue;
        }
        goto LABEL_230;
      }
      break;
    }
    while (1)
    {
LABEL_95:
      if (*(_QWORD *)(*(_QWORD *)(v4 + 8) + 16))
      {
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        *(_QWORD *)&v112 = *(_QWORD *)(v4 + 8);
        *(_QWORD *)(v4 + 8) = 0x8000000000000000;
        type metadata accessor for _NativeDictionary<UInt32, Int>();
        v1 = (uint64_t)&v112;
        _NativeDictionary.removeAll(isUnique:)(isUniquelyReferenced_nonNull_native);
        *(_QWORD *)(v4 + 8) = v112;
        swift_bridgeObjectRelease();
      }
      *(_BYTE *)(v4 + 40) = 1;
      if ((v11 & 0x8000000000000000) == 0)
        break;
      while (2)
      {
        __break(1u);
LABEL_232:
        swift_bridgeObjectRetain();
        isUniquelyReferenced_nonNull_native = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if ((isUniquelyReferenced_nonNull_native & 0x8000000000000000) == 0)
          goto LABEL_8;
        __break(1u);
LABEL_234:
        swift_bridgeObjectRetain();
        isUniquelyReferenced_nonNull_native = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (isUniquelyReferenced_nonNull_native < 0)
        {
          __break(1u);
LABEL_236:
          __break(1u);
LABEL_237:
          __break(1u);
LABEL_238:
          __break(1u);
LABEL_239:
          __break(1u);
LABEL_240:
          swift_bridgeObjectRetain();
          v96 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
          if (!v96)
            goto LABEL_53;
          goto LABEL_171;
        }
LABEL_31:
        if (isUniquelyReferenced_nonNull_native)
        {
          v2 = isUniquelyReferenced_nonNull_native;
          do
          {
            while (1)
            {
              if (isUniquelyReferenced_nonNull_native < v2)
              {
                __break(1u);
LABEL_201:
                __break(1u);
LABEL_202:
                __break(1u);
LABEL_203:
                __break(1u);
LABEL_204:
                __break(1u);
LABEL_205:
                __break(1u);
LABEL_206:
                __break(1u);
LABEL_207:
                __break(1u);
LABEL_208:
                __break(1u);
LABEL_209:
                __break(1u);
LABEL_210:
                __break(1u);
                goto LABEL_211;
              }
              v16 = v2 - 1;
              v17 = *(_QWORD *)(v1 + v7);
              if ((v17 & 0xC000000000000001) != 0)
              {
                v18 = MEMORY[0x23B7C6D9C](v2 - 1);
              }
              else
              {
                if (v16 >= *(_QWORD *)((v17 & 0xFFFFFFFFFFFFF8) + 0x10))
                  goto LABEL_201;
                v18 = *(_QWORD *)(v17 + 8 * v2 + 24);
                swift_retain();
              }
              swift_beginAccess();
              v3 = *(unsigned __int8 *)(v18 + 84);
              swift_release();
              if ((_DWORD)v3 != 3)
              {
                if ((_DWORD)v3 != 2)
                  goto LABEL_44;
                if (DynamicContainerInfo.tryRemovingItem(at:disableTransitions:)(v2 - 1, v11))
                  break;
              }
              --v2;
              if (!v16)
                goto LABEL_44;
            }
            v5 = 1;
            --v2;
          }
          while (v2);
        }
        else
        {
LABEL_44:
          if ((v5 & 1) == 0)
          {
            v21 = *(_QWORD *)(v1 + v7);
            if (v21 >> 62)
              goto LABEL_240;
            if (!*(_QWORD *)((v21 & 0xFFFFFFFFFFFFF8) + 0x10))
            {
LABEL_53:
              if (AGGraphGetOutputValue())
                return;
            }
LABEL_171:
            v81 = v1 + v109[13];
            v82 = *(_DWORD *)(v81 + 44) + 1;
            *(_DWORD *)(v81 + 44) = v82;
            v83 = *(_QWORD *)(v81 + 32);
            v84 = *(_BYTE *)(v81 + 40);
            v85 = *(_OWORD *)(v81 + 16);
            v112 = *(_OWORD *)v81;
            v113 = v85;
            v114 = v83;
            v115 = v84;
            v116 = v82;
            AGGraphSetOutputValue();
            return;
          }
        }
LABEL_45:
        v102 = v4;
        v4 = v1 + v109[13];
        isUniquelyReferenced_nonNull_native = *(_QWORD *)v4;
        v7 = *(_QWORD *)v4 >> 62;
        v110 = v4;
        if (v7)
          goto LABEL_225;
        v1 = *(_QWORD *)((isUniquelyReferenced_nonNull_native & 0xFFFFFFFFFFFFF8) + 0x10);
        v19 = *(_QWORD *)(v4 + 24);
        v103 = *(_QWORD *)(v4 + 32);
        v11 = v1 - v103;
        v107 = v19;
        v20 = v1 - v103 - v19;
        v104 = v1;
        if (v20 < v1 - v103)
        {
          if (v1 >= v20)
            goto LABEL_48;
LABEL_230:
          __break(1u);
          continue;
        }
        break;
      }
    }
    v106 = v20;
    v111 = v11;
    if (v104 != v103)
    {
      v2 = 0;
      v44 = 0;
      v3 = 0x8000000000000000;
      do
      {
        if ((*(_QWORD *)v4 & 0xC000000000000001) != 0)
        {
          v46 = MEMORY[0x23B7C6D9C](v44);
        }
        else
        {
          if ((v44 & 0x8000000000000000) != 0)
            goto LABEL_205;
          if (v44 >= *(_QWORD *)((*(_QWORD *)v4 & 0xFFFFFFFFFFFFF8) + 0x10))
            goto LABEL_207;
          v46 = swift_retain();
        }
        isUniquelyReferenced_nonNull_native = *(unsigned int *)(v46 + 24);
        swift_release();
        v5 = swift_isUniquelyReferenced_nonNull_native();
        *(_QWORD *)&v112 = *(_QWORD *)(v4 + 8);
        v47 = v112;
        *(_QWORD *)(v4 + 8) = 0x8000000000000000;
        v49 = specialized __RawDictionaryStorage.find<A>(_:)(isUniquelyReferenced_nonNull_native);
        v50 = *(_QWORD *)(v47 + 16);
        v51 = (v48 & 1) == 0;
        v52 = v50 + v51;
        if (__OFADD__(v50, v51))
          goto LABEL_206;
        v4 = v48;
        if (*(_QWORD *)(v47 + 24) >= v52)
        {
          if ((v5 & 1) != 0)
          {
            v55 = (_QWORD *)v112;
            if ((v48 & 1) != 0)
              goto LABEL_118;
          }
          else
          {
            specialized _NativeDictionary.copy()();
            v55 = (_QWORD *)v112;
            if ((v4 & 1) != 0)
              goto LABEL_118;
          }
        }
        else
        {
          specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v52, v5);
          v53 = specialized __RawDictionaryStorage.find<A>(_:)(isUniquelyReferenced_nonNull_native);
          if ((v4 & 1) != (v54 & 1))
            goto LABEL_249;
          v49 = v53;
          v55 = (_QWORD *)v112;
          if ((v4 & 1) != 0)
          {
LABEL_118:
            *(_QWORD *)(v55[7] + 8 * v49) = v44;
            goto LABEL_119;
          }
        }
        v55[(v49 >> 6) + 8] |= 1 << v49;
        *(_DWORD *)(v55[6] + 4 * v49) = isUniquelyReferenced_nonNull_native;
        *(_QWORD *)(v55[7] + 8 * v49) = v44;
        v56 = v55[2];
        v57 = __OFADD__(v56, 1);
        v58 = v56 + 1;
        if (v57)
          goto LABEL_215;
        v55[2] = v58;
LABEL_119:
        v4 = v110;
        *(_QWORD *)(v110 + 8) = v55;
        swift_bridgeObjectRelease();
        v59 = *(_QWORD *)v4;
        if ((*(_QWORD *)v4 & 0xC000000000000001) != 0)
        {
          *(_DWORD *)(MEMORY[0x23B7C6D9C](v44, *(_QWORD *)v4) + 76) = v2;
          swift_release();
          v7 = *(unsigned int *)(MEMORY[0x23B7C6D9C](v44, v59) + 28);
          swift_unknownObjectRelease();
          if (*(_BYTE *)(v4 + 40) != 1)
            goto LABEL_124;
        }
        else
        {
          if ((v44 & 0x8000000000000000) != 0)
            goto LABEL_208;
          if (v44 >= *(_QWORD *)((v59 & 0xFFFFFFFFFFFFFF8) + 0x10))
            goto LABEL_209;
          v60 = v59 + 8 * v44;
          *(_DWORD *)(*(_QWORD *)(v60 + 32) + 76) = v2;
          if (v44 >= *(_QWORD *)((v59 & 0xFFFFFFFFFFFFFF8) + 0x10))
            goto LABEL_210;
          v7 = *(unsigned int *)(*(_QWORD *)(v60 + 32) + 28);
          if ((*(_BYTE *)(v4 + 40) & 1) == 0)
          {
LABEL_124:
            v45 = 0;
            goto LABEL_105;
          }
        }
        v45 = (_DWORD)v7 == 1;
LABEL_105:
        ++v44;
        *(_BYTE *)(v4 + 40) = v45;
        v2 = (v7 + v2);
      }
      while (v111 != v44);
    }
    v7 = v111;
    if (*(_QWORD *)(*(_QWORD *)(v4 + 8) + 16) != v111)
      goto LABEL_250;
    v1 = v108;
    v43 = v106;
    if ((v102 & 0x100) == 0)
    {
      swift_bridgeObjectRelease();
      *(_QWORD *)(v4 + 16) = 0;
      if (v104 == v103)
        goto LABEL_171;
LABEL_173:
      v86 = 0;
      v2 = v7 & ~(v7 >> 63);
      while (v2 != v86)
      {
        isUniquelyReferenced_nonNull_native = *(_QWORD *)v4;
        v3 = *(_QWORD *)(v4 + 8);
        v87 = *(_QWORD *)(v4 + 16);
        v7 = *(_QWORD *)(v4 + 24);
        v4 = *(_QWORD *)(v4 + 32);
        if (v87)
        {
          if (v107)
          {
            if ((unint64_t)isUniquelyReferenced_nonNull_native >> 62)
            {
              swift_bridgeObjectRetain_n();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              v88 = _CocoaArrayWrapper.endIndex.getter();
              swift_bridgeObjectRelease();
            }
            else
            {
              v88 = *(_QWORD *)((isUniquelyReferenced_nonNull_native & 0xFFFFFFFFFFFFF8) + 0x10);
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
            }
            v89 = v86 + v88 - v7 - v4;
            if (v89 < 0)
              goto LABEL_218;
            if ((unint64_t)v89 >= *(_QWORD *)(v87 + 16))
              goto LABEL_219;
            v90 = *(unsigned int *)(v87 + 4 * v89 + 32);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
          }
          else
          {
            if (v86 >= *(_QWORD *)(v87 + 16))
              goto LABEL_221;
            v90 = *(unsigned int *)(v87 + 4 * v86 + 32);
          }
          v1 = v108;
        }
        else
        {
          v90 = v86;
          v1 = v108;
          if (v107)
          {
            if ((unint64_t)isUniquelyReferenced_nonNull_native >> 62)
            {
              swift_bridgeObjectRetain_n();
              swift_bridgeObjectRetain();
              v91 = _CocoaArrayWrapper.endIndex.getter();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease_n();
            }
            else
            {
              v91 = *(_QWORD *)((isUniquelyReferenced_nonNull_native & 0xFFFFFFFFFFFFF8) + 0x10);
            }
            if ((uint64_t)v86 < v7)
              v90 = v86 + v91 - v7 - v4;
            else
              v90 = v86 - v7;
          }
        }
        if ((isUniquelyReferenced_nonNull_native & 0xC000000000000001) != 0)
        {
          isUniquelyReferenced_nonNull_native = MEMORY[0x23B7C6D9C](v90, isUniquelyReferenced_nonNull_native);
          v4 = v110;
          v3 = v111;
        }
        else
        {
          v4 = v110;
          v3 = v111;
          if ((v90 & 0x8000000000000000) != 0)
            goto LABEL_212;
          if (v90 >= *(_QWORD *)((isUniquelyReferenced_nonNull_native & 0xFFFFFFFFFFFFF8) + 0x10))
            goto LABEL_213;
          isUniquelyReferenced_nonNull_native = *(_QWORD *)(isUniquelyReferenced_nonNull_native + 8 * v90 + 32);
          swift_retain();
        }
        v92 = *(id *)(isUniquelyReferenced_nonNull_native + 16);
        swift_release();
        AGSubgraphSetIndex();

        v7 = ++v86;
        if (v3 == v86)
          goto LABEL_171;
      }
LABEL_211:
      __break(1u);
LABEL_212:
      __break(1u);
LABEL_213:
      __break(1u);
LABEL_214:
      __break(1u);
LABEL_215:
      __break(1u);
LABEL_216:
      __break(1u);
LABEL_217:
      __break(1u);
LABEL_218:
      __break(1u);
LABEL_219:
      __break(1u);
      continue;
    }
    break;
  }
  v61 = v106;
  if (v107)
  {
    v61 = v106 + v111;
    if (__OFADD__(v106, v111))
    {
      __break(1u);
      goto LABEL_243;
    }
  }
  v62 = v61 & ~(v61 >> 63);
  v5 = swift_allocObject();
  v63 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v62, 0, MEMORY[0x24BEE4AF8]);
  *(_QWORD *)(v5 + 16) = v63;
  v4 = v5 + 16;
  if (v43 < 0)
    goto LABEL_239;
  if (!v43)
    goto LABEL_141;
  v64 = v63;
  v65 = 0;
  v66 = *((_QWORD *)v63 + 2);
  for (i = 1; i != 0x100000001; ++i)
  {
    v68 = *((_QWORD *)v64 + 3);
    if (v66 >= v68 >> 1)
    {
      v63 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v68 > 1), v66 + 1, 1, v64);
      v64 = v63;
    }
    *((_QWORD *)v64 + 2) = v66 + 1;
    *(_DWORD *)&v64[4 * v66 + 32] = v65;
    if (i == v43)
    {
      *(_QWORD *)v4 = v64;
LABEL_141:
      MEMORY[0x24BDAC7A8](v63);
      v2 = *(_QWORD *)(v69 + 16);
      v3 = *(_QWORD *)(v69 + 24);
      v98 = v2;
      v99 = v3;
      v100 = v1;
      isUniquelyReferenced_nonNull_native = 0;
      if (v104 > 31)
        specialized MutableCollection<>.sort(by:)((char **)(v5 + 16), (uint64_t (*)(Swift::Int, _QWORD))partial apply for lessThan #1 <A>(_:_:) in DynamicContainerInfo.updateValue());
      else
        specialized BidirectionalCollection<>.insertionSort(by:)(v5 + 16, (uint64_t (*)(uint64_t, _QWORD))lessThan #1 <A>(_:_:) in DynamicContainerInfo.updateValue()partial apply, (unint64_t)&v97);
      if (!v107)
        goto LABEL_170;
      v105 = 0;
      if (one-time initialization token for v5 == -1)
      {
LABEL_146:
        v70 = static Semantics.v5;
        if (one-time initialization token for forced != -1)
          swift_once();
        swift_beginAccess();
        if (byte_25426FAB4 == 1)
        {
          if ((dyld_program_sdk_at_least() & 1) == 0)
          {
LABEL_150:
            if (!v43)
            {
LABEL_164:
              v72 = addRemoved #1 <A>() in DynamicContainerInfo.updateValue()(v43, v111, v5);
              goto LABEL_165;
            }
            v71 = v5;
            v102 = 0;
LABEL_155:
            swift_beginAccess();
            v5 = 0;
            v7 = v43 & ~(v43 >> 63);
            do
            {
              if (v7 == v5)
                goto LABEL_216;
              if (v5 >= *(_QWORD *)(*(_QWORD *)v4 + 16))
                goto LABEL_217;
              isUniquelyReferenced_nonNull_native = *(unsigned int *)(*(_QWORD *)v4 + 4 * v5 + 32);
              swift_beginAccess();
              v73 = *(char **)v4;
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
                v73 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v73 + 2) + 1, 1, v73);
              v75 = *((_QWORD *)v73 + 2);
              v74 = *((_QWORD *)v73 + 3);
              if (v75 >= v74 >> 1)
                v73 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v74 > 1), v75 + 1, 1, v73);
              ++v5;
              *((_QWORD *)v73 + 2) = v75 + 1;
              *(_DWORD *)&v73[4 * v75 + 32] = isUniquelyReferenced_nonNull_native;
              *(_QWORD *)v4 = v73;
              v72 = swift_endAccess();
              v43 = v106;
            }
            while (v106 != v5);
            v5 = v71;
            if ((v102 & 1) != 0)
              goto LABEL_165;
            goto LABEL_164;
          }
        }
        else if (static Semantics.forced < v70)
        {
          goto LABEL_150;
        }
        v72 = addRemoved #1 <A>() in DynamicContainerInfo.updateValue()(v43, v111, v5);
        if (!v43)
        {
LABEL_165:
          v76 = v43 + v111;
          if (__OFADD__(v43, v111))
          {
            __break(1u);
LABEL_245:
            __break(1u);
LABEL_246:
            __break(1u);
LABEL_247:
            __break(1u);
LABEL_248:
            __break(1u);
          }
          if (v76 < v43)
            goto LABEL_245;
          MEMORY[0x24BDAC7A8](v72);
          v98 = v2;
          v99 = v3;
          v100 = v108;
          swift_beginAccess();
          v77 = *(_QWORD *)v4;
          v78 = *(_QWORD *)(*(_QWORD *)v4 + 16);
          if (v78 < v43 || v78 < v76)
            goto LABEL_246;
          *(_QWORD *)&v112 = *(_QWORD *)v4;
          *((_QWORD *)&v112 + 1) = v77 + 32;
          v79 = v106;
          *(_QWORD *)&v113 = v106;
          *((_QWORD *)&v113 + 1) = (2 * v76) | 1;
          swift_bridgeObjectRetain();
          specialized BidirectionalCollection<>.insertionSort(by:)((uint64_t)&v112, (uint64_t (*)(_QWORD, _QWORD))lessThan #1 <A>(_:_:) in DynamicContainerInfo.updateValue()partial apply);
          specialized Array.subscript.setter((char *)v112, *((uint64_t *)&v112 + 1), v113, *((unint64_t *)&v113 + 1), v79, v76);
          swift_endAccess();
          swift_unknownObjectRelease();
          v1 = v108;
LABEL_170:
          swift_beginAccess();
          v80 = *(_QWORD *)(v5 + 16);
          v4 = v110;
          isUniquelyReferenced_nonNull_native = *(_QWORD *)(v110 + 16);
          swift_bridgeObjectRetain();
          swift_release();
          swift_bridgeObjectRelease();
          *(_QWORD *)(v4 + 16) = v80;
          v7 = v111;
          if (v104 == v103)
            goto LABEL_171;
          goto LABEL_173;
        }
        v71 = v5;
        v102 = 1;
        goto LABEL_155;
      }
LABEL_243:
      swift_once();
      goto LABEL_146;
    }
    ++v65;
    ++v66;
  }
  LODWORD(v100) = 0;
  v99 = 3455;
  LOBYTE(v98) = 2;
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
LABEL_249:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
LABEL_250:
  v101 = 0;
  v100 = 374;
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t DynamicContainerInfo.updateItems(disableTransitions:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t AssociatedTypeWitness;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  void (*v19)(unint64_t, uint64_t, double);
  int v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  unint64_t v25;
  uint64_t v26;
  double v27;
  uint64_t v28;
  char v29;
  void (*v30)(char *, uint64_t (*)(uint64_t), double);
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  double v41;
  unsigned __int8 v42;
  double v43;
  uint64_t v44;
  double v45;
  double v46;
  int v47;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  unsigned __int8 v61[10];

  v3 = v2;
  v4 = a2;
  v58 = a1;
  v5 = *(_QWORD *)(a2 + 16);
  v55 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v54 = (char *)&v49 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *(_QWORD *)(v7 + 24);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v57 = type metadata accessor for Optional();
  v10 = *(_QWORD *)(v57 - 8);
  MEMORY[0x24BDAC7A8](v57);
  v12 = (char *)&v49 - v11;
  v13 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v15 = MEMORY[0x24BDAC7A8](v14);
  v17 = (char *)&v49 - v16;
  *(_WORD *)v61 = 0;
  v18 = v2 + *(int *)(v4 + 36);
  v19 = *(void (**)(unint64_t, uint64_t, double))(v8 + 48);
  v56 = v5;
  v53 = v8;
  v19(v5, v8, v15);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v12, 1, AssociatedTypeWitness) == 1)
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v57);
    v20 = *(_QWORD *)(v3 + *(int *)(v4 + 52) + 16) != 0;
    goto LABEL_36;
  }
  (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v17, v12, AssociatedTypeWitness);
  v60 = 0;
  v57 = *(int *)(v4 + 52);
  v21 = *(_QWORD *)(v3 + v57);
  v51 = v13;
  v52 = AssociatedTypeWitness;
  if (v21 >> 62)
    goto LABEL_49;
  v22 = *(_QWORD *)((v21 & 0xFFFFFFFFFFFFF8) + 0x10);
LABEL_5:
  v59 = v22;
  v24 = v54;
  v23 = v55;
  v25 = v56;
  v26 = (*(uint64_t (**)(char *, uint64_t, unint64_t))(v55 + 16))(v54, v18, v56);
  v27 = MEMORY[0x24BDAC7A8](v26);
  v28 = v53;
  *(&v49 - 10) = v25;
  *(&v49 - 9) = v28;
  *(&v49 - 8) = (uint64_t)&v60;
  *(&v49 - 7) = (uint64_t)&v59;
  *(&v49 - 6) = v3;
  *(&v49 - 5) = (uint64_t)&v61[1];
  *(&v49 - 4) = (uint64_t)v17;
  v29 = v58;
  *((_BYTE *)&v49 - 24) = v58 & 1;
  *(&v49 - 2) = (uint64_t)v61;
  v30 = *(void (**)(char *, uint64_t (*)(uint64_t), double))(v28 + 56);
  v50 = v17;
  v18 = (uint64_t)v24;
  v30(v17, partial apply for closure #1 in DynamicContainerInfo.updateItems(disableTransitions:), v27);
  (*(void (**)(char *, unint64_t))(v23 + 8))(v24, v25);
  v31 = v59;
  v32 = v60;
  v33 = v57;
  if (v60 < v59)
  {
    v56 = v60;
    do
    {
      if (v32 >= v31)
      {
        __break(1u);
LABEL_41:
        __break(1u);
LABEL_42:
        __break(1u);
LABEL_43:
        __break(1u);
LABEL_44:
        __break(1u);
LABEL_45:
        __break(1u);
LABEL_46:
        __break(1u);
LABEL_47:
        __break(1u);
LABEL_48:
        __break(1u);
LABEL_49:
        swift_bridgeObjectRetain();
        v22 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        goto LABEL_5;
      }
      v34 = v31 - 1;
      v35 = *(_QWORD *)(v3 + v33);
      if ((v35 & 0xC000000000000001) != 0)
      {
        v36 = MEMORY[0x23B7C6D9C](v31 - 1);
      }
      else
      {
        if (v31 < 1)
          goto LABEL_41;
        if (v34 >= *(_QWORD *)((v35 & 0xFFFFFFFFFFFFF8) + 0x10))
          goto LABEL_42;
        v36 = *(_QWORD *)(v35 + 8 * v31 + 24);
        swift_retain();
      }
      swift_beginAccess();
      v17 = (char *)*(unsigned __int8 *)(v36 + 84);
      swift_release();
      v18 = v3;
      if (!DynamicContainerInfo.tryRemovingItem(at:disableTransitions:)(v31 - 1, v29 & 1))
      {
        v37 = *(_QWORD *)(v3 + v33);
        if ((v37 & 0xC000000000000001) != 0)
        {
          v45 = *(double *)(MEMORY[0x23B7C6D9C](v31 - 1, *(_QWORD *)(v3 + v33)) + 64);
          v61[0] = v61[0] & 1 | (v45 != 0.0);
          v46 = *(double *)(MEMORY[0x23B7C6D9C](v56, v37) + 64);
          swift_release();
          if (v45 != v46)
          {
            *(double *)(MEMORY[0x23B7C6D9C](v31 - 1, v37) + 64) = v45;
            swift_release();
            v61[1] = 1;
          }
          v44 = MEMORY[0x23B7C6D9C](v31 - 1, v37);
          v32 = v56;
        }
        else
        {
          if (v31 < 1)
            goto LABEL_43;
          v38 = v3;
          v3 = v4;
          v4 = v37 & 0xFFFFFFFFFFFFFF8;
          v39 = *(_QWORD *)((v37 & 0xFFFFFFFFFFFFFF8) + 0x10);
          if (v34 >= v39)
            goto LABEL_44;
          v40 = v37 + 8 * v31;
          v18 = *(_QWORD *)(v40 + 24);
          v41 = *(double *)(v18 + 64);
          v42 = v61[0];
          swift_retain();
          v61[0] = v42 & 1 | (v41 != 0.0);
          if ((v56 & 0x8000000000000000) != 0)
            goto LABEL_45;
          if (v56 >= v39)
            goto LABEL_46;
          v43 = *(double *)(*(_QWORD *)(v37 + 32 + 8 * v56) + 64);
          v32 = v56;
          if (v41 != v43)
          {
            if (v34 >= *(_QWORD *)(v4 + 16))
              goto LABEL_48;
            *(double *)(*(_QWORD *)(v40 + 24) + 64) = v41;
            v61[1] = 1;
          }
          if (v34 >= *(_QWORD *)(v4 + 16))
            goto LABEL_47;
          v44 = *(_QWORD *)(v40 + 24);
          swift_retain();
          v4 = v3;
          v3 = v38;
          v29 = v58;
          v33 = v57;
        }
        swift_release();
        swift_beginAccess();
        v18 = *(unsigned __int8 *)(v44 + 84);
        swift_release();
        if ((_DWORD)v18 == 3)
        {
          if ((_DWORD)v17 == 3)
            goto LABEL_8;
        }
        else if ((_DWORD)v17 != 3 && (_DWORD)v18 == (_DWORD)v17)
        {
          goto LABEL_8;
        }
      }
      v61[1] = 1;
LABEL_8:
      v31 = v34;
    }
    while (v32 != v34);
  }
  (*(void (**)(char *, uint64_t))(v51 + 8))(v50, v52);
  v20 = v61[0];
LABEL_36:
  if (v20)
    v47 = 256;
  else
    v47 = 0;
  return v47 | v61[1];
}

Swift::Bool __swiftcall DynamicContainerInfo.tryRemovingItem(at:disableTransitions:)(Swift::Int at, Swift::Bool disableTransitions)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  Swift::Bool result;

  v4 = *(int *)(v2 + 52);
  v5 = *(_QWORD *)(v3 + v4);
  if ((v5 & 0xC000000000000001) == 0)
  {
    if (at < 0)
    {
      __break(1u);
    }
    else if (*(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10) > (unint64_t)at)
    {
      v6 = *(_QWORD *)(v5 + 8 * at + 32);
      swift_retain();
      goto LABEL_5;
    }
    __break(1u);
    JUMPOUT(0x234E12FA0);
  }
  v6 = MEMORY[0x23B7C6D9C](at, *(_QWORD *)(v3 + v4));
LABEL_5:
  swift_beginAccess();
  v7 = *(unsigned __int8 *)(v6 + 84);
  swift_release();
  __asm { BR              X9 }
  return result;
}

void sub_234E13038()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  JUMPOUT(0x234E13074);
}

Swift::Int specialized Array.subscript.setter(Swift::Int result, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6)
{
  uint64_t *v6;
  Swift::Int v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  Swift::Int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v11 = result;
  v12 = *v6;
  v13 = (unint64_t)*v6 >> 62;
  if (!v13)
  {
    if (*(_QWORD *)((v12 & 0xFFFFFFFFFFFFF8) + 0x10) >= a5)
      goto LABEL_3;
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  v22 = a2;
  swift_bridgeObjectRetain();
  v23 = _CocoaArrayWrapper.endIndex.getter();
  result = swift_bridgeObjectRelease();
  a2 = v22;
  if (v23 < a5)
    goto LABEL_25;
LABEL_3:
  if (a5 < 0)
  {
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  v14 = a2;
  if (v13)
  {
    swift_bridgeObjectRetain();
    v15 = _CocoaArrayWrapper.endIndex.getter();
    result = swift_bridgeObjectRelease();
  }
  else
  {
    v15 = *(_QWORD *)((v12 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  if (v15 < (uint64_t)a6)
    goto LABEL_27;
  if ((a6 & 0x8000000000000000) != 0)
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  v16 = v11;
  if ((v12 & 0xC000000000000001) == 0)
    goto LABEL_15;
  if (a6 < a5)
  {
LABEL_29:
    __break(1u);
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  if (a5 != a6)
  {
    if (a5 >= a6)
    {
LABEL_31:
      __break(1u);
      return result;
    }
    type metadata accessor for DynamicContainer.ItemInfo();
    result = a5;
    do
    {
      v17 = result + 1;
      _ArrayBuffer._typeCheckSlowPath(_:)(result);
      result = v17;
    }
    while (a6 != v17);
  }
LABEL_15:
  if (v13)
  {
    swift_bridgeObjectRetain();
    _CocoaArrayWrapper.subscript.getter();
    v18 = v20;
    v19 = v21;
    swift_bridgeObjectRelease();
    result = swift_unknownObjectRelease();
  }
  else
  {
    v18 = (v12 & 0xFFFFFFFFFFFFFF8) + 32;
    v19 = a5;
  }
  if (v18 + 8 * v19 != v14 + 8 * a3)
    return specialized Array.replaceSubrange<A>(_:with:)(a5, a6, v16, v14, a3, a4);
  if ((uint64_t)(a4 >> 1) < a3)
    goto LABEL_30;
  if (a5 != a3 || a4 >> 1 != a6)
    return specialized Array.replaceSubrange<A>(_:with:)(a5, a6, v16, v14, a3, a4);
  return swift_unknownObjectRelease();
}

uint64_t lessThan #1 <A>(_:_:) in DynamicContainerInfo.updateValue()(unsigned int a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  double v5;
  unint64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  double v15;

  v8 = a1;
  result = type metadata accessor for DynamicContainerInfo(0, a4, a5, a4);
  v10 = *(int *)(result + 52);
  v11 = *(_QWORD *)(a3 + v10);
  if ((v11 & 0xC000000000000001) != 0)
  {
    v12 = MEMORY[0x23B7C6D9C](v8);
  }
  else
  {
    if (*(_QWORD *)((v11 & 0xFFFFFFFFFFFFF8) + 0x10) <= v8)
    {
      __break(1u);
      goto LABEL_10;
    }
    v12 = swift_retain();
  }
  v5 = *(double *)(v12 + 64);
  swift_release();
  result = a2;
  v13 = *(_QWORD *)(a3 + v10);
  if ((v13 & 0xC000000000000001) != 0)
  {
LABEL_10:
    v14 = MEMORY[0x23B7C6D9C](result);
    goto LABEL_7;
  }
  if (*(_QWORD *)((v13 & 0xFFFFFFFFFFFFF8) + 0x10) > (unint64_t)a2)
  {
    v14 = swift_retain();
LABEL_7:
    v15 = *(double *)(v14 + 64);
    swift_release();
    return v5 < v15;
  }
  __break(1u);
  return result;
}

uint64_t addRemoved #1 <A>() in DynamicContainerInfo.updateValue()(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  char **v5;
  char *v6;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;

  if (a2 < result)
  {
LABEL_22:
    __break(1u);
  }
  else
  {
    v3 = a2;
    v4 = result;
    if (result == a2)
      return result;
    if (result < a2)
    {
      if (result < 0 || HIDWORD(result))
      {
        while (1)
        {
LABEL_25:
          _assertionFailure(_:_:file:line:flags:)();
          __break(1u);
        }
      }
      v5 = (char **)(a3 + 16);
      swift_beginAccess();
      v6 = *v5;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *v5 = v6;
      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
        goto LABEL_7;
      goto LABEL_24;
    }
  }
  __break(1u);
LABEL_24:
  v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v6 + 2) + 1, 1, v6);
LABEL_7:
  if (v4 <= 0xFFFFFFFFLL)
    v8 = 0xFFFFFFFFLL;
  else
    v8 = v4;
  v9 = v4;
  while (1)
  {
    *v5 = v6;
    v11 = *((_QWORD *)v6 + 2);
    v10 = *((_QWORD *)v6 + 3);
    if (v11 >= v10 >> 1)
    {
      v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v10 > 1), v11 + 1, 1, v6);
      *v5 = v6;
    }
    v12 = v9 + 1;
    *((_QWORD *)v6 + 2) = v11 + 1;
    *(_DWORD *)&v6[4 * v11 + 32] = v9;
    if (v9 + 1 == v3)
      return swift_endAccess();
    if (v12 < v4 || v12 >= v3)
    {
      __break(1u);
      goto LABEL_22;
    }
    v6 = *v5;
    if (v9++ == v8)
    {
      swift_endAccess();
      goto LABEL_25;
    }
  }
}

uint64_t closure #1 in DynamicContainerInfo.updateItems(disableTransitions:)(uint64_t a1, Swift::Int *a2, uint64_t a3, _BYTE *a4, uint64_t a5, uint64_t a6, int a7, _BYTE *a8, uint64_t a9, uint64_t a10)
{
  uint64_t AssociatedConformanceWitness;
  _BYTE *v11;
  uint64_t v12;
  double v13;
  uint64_t AssociatedTypeWitness;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  Swift::Int v20;
  Swift::Int *v21;
  uint64_t v22;
  uint64_t result;
  uint64_t v24;
  _BYTE *v25;
  uint64_t v26;
  void (*v27)(char *, _BYTE *, _BYTE *);
  uint64_t v28;
  _BYTE *v29;
  _BYTE *v30;
  _BYTE *v31;
  _BYTE *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void (*v36)(char *, uint64_t);
  _BYTE *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _BYTE *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unsigned int v49;
  unsigned int CurrentAttribute;
  _QWORD *v51;
  unint64_t *v52;
  unint64_t v53;
  unint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  double v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  Swift::Int **v65;
  uint64_t v66;
  _BYTE *v67;
  uint64_t v68;
  unint64_t *v69;
  uint64_t v70;
  uint64_t v71;
  _BYTE *v72;
  uint64_t (*v73)(uint64_t, uint64_t, uint64_t);
  uint64_t v74;
  uint64_t v75;
  _BYTE *v76;
  uint64_t v77;
  uint64_t v78;

  v67 = a8;
  v64 = a7;
  v66 = a6;
  v68 = a5;
  v72 = a4;
  v77 = a1;
  v71 = a10;
  v70 = a9;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v75 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v19 = (char *)&v62 - v18;
  v69 = (unint64_t *)a2;
  v20 = *a2;
  v65 = (Swift::Int **)a3;
  v21 = *(Swift::Int **)a3;
  if (*(_QWORD *)a3 < v20)
    goto LABEL_74;
  v76 = (_BYTE *)AssociatedTypeWitness;
  if ((Swift::Int *)v20 == v21)
  {
    AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    v12 = -1;
    goto LABEL_4;
  }
  AssociatedConformanceWitness = v70;
  a3 = v71;
  v63 = type metadata accessor for DynamicContainerInfo(0, v70, v71, v17);
  v74 = (uint64_t)&v72[*(int *)(v63 + 52)];
  v33 = swift_getAssociatedConformanceWitness();
  v73 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v33 + 32);
  v78 = -1;
  AssociatedTypeWitness = (uint64_t)v76;
  do
  {
    if (v20 >= (uint64_t)v21)
    {
      __break(1u);
LABEL_69:
      __break(1u);
LABEL_70:
      __break(1u);
LABEL_71:
      __break(1u);
LABEL_72:
      __break(1u);
LABEL_73:
      __break(1u);
LABEL_74:
      __break(1u);
      goto LABEL_75;
    }
    v34 = *(_QWORD *)v74;
    if ((*(_QWORD *)v74 & 0xC000000000000001) != 0)
    {
      v12 = MEMORY[0x23B7C6D9C](v20);
    }
    else
    {
      if (v20 < 0)
        goto LABEL_69;
      if ((unint64_t)v20 >= *(_QWORD *)((v34 & 0xFFFFFFFFFFFFF8) + 0x10))
        goto LABEL_70;
      v12 = *(_QWORD *)(v34 + 8 * v20 + 32);
      swift_retain();
    }
    v11 = (_BYTE *)(v12 + *(_QWORD *)(*(_QWORD *)v12 + 208));
    swift_beginAccess();
    v35 = v75;
    AssociatedConformanceWitness = *(_QWORD *)(v75 + 16);
    ((void (*)(char *, _BYTE *, uint64_t))AssociatedConformanceWitness)(v19, v11, AssociatedTypeWitness);
    a3 = v73(v77, AssociatedTypeWitness, v33);
    v36 = *(void (**)(char *, uint64_t))(v35 + 8);
    v36(v19, AssociatedTypeWitness);
    if ((a3 & 1) != 0)
    {
      v21 = (Swift::Int *)v69;
      AssociatedConformanceWitness = v68;
      if (*v69 != v20)
      {
        specialized MutableCollection.swapAt(_:_:)(*v69, v20);
        *(_BYTE *)AssociatedConformanceWitness = 1;
      }
      swift_beginAccess();
      (*(void (**)(_BYTE *, uint64_t, _BYTE *))(v75 + 24))(v11, v77, v76);
      swift_endAccess();
      swift_beginAccess();
      v11 = v72;
      v39 = v71;
      v40 = v70;
      if (*(_BYTE *)(v12 + 84) == 1)
      {
        swift_release();
      }
      else
      {
        DynamicContainerInfo.unremoveItem(at:)(*v21);
        swift_release();
        *(_BYTE *)AssociatedConformanceWitness = 1;
      }
      v41 = v67;
      v42 = v33;
      AssociatedTypeWitness = (uint64_t)v76;
      goto LABEL_57;
    }
    if (v78 < 0 && (swift_beginAccess(), *(_BYTE *)(v12 + 84) == 3))
    {
      v37 = v11;
      v11 = v76;
      ((void (*)(char *, _BYTE *, _BYTE *))AssociatedConformanceWitness)(v19, v37, v76);
      a3 = (*(uint64_t (**)(uint64_t, _BYTE *, uint64_t))(v33 + 48))(v77, v11, v33);
      swift_release();
      result = ((uint64_t (*)(char *, _BYTE *))v36)(v19, v11);
      v38 = v78;
      if ((a3 & 1) != 0)
        v38 = v20;
      v78 = v38;
    }
    else
    {
      result = swift_release();
    }
    ++v20;
  }
  while (v21 != (Swift::Int *)v20);
  AssociatedConformanceWitness = v33;
  v12 = v78;
  AssociatedTypeWitness = (uint64_t)v76;
  if ((v78 & 0x8000000000000000) == 0)
  {
LABEL_44:
    v11 = v72;
    v43 = *(_QWORD *)&v72[*(int *)(v63 + 52)];
    if ((v43 & 0xC000000000000001) != 0)
      goto LABEL_84;
    v44 = v68;
    v39 = v71;
    v40 = v70;
    if ((unint64_t)v12 < *(_QWORD *)((v43 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      v45 = *(_QWORD *)(v43 + 8 * v12 + 32);
      swift_retain();
      goto LABEL_47;
    }
    __break(1u);
    return result;
  }
LABEL_4:
  a3 = AssociatedTypeWitness;
  if (((*(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 40))(AssociatedTypeWitness, AssociatedConformanceWitness) & 1) == 0)goto LABEL_51;
  v20 = *v69;
  v21 = *v65;
  if ((uint64_t)*v65 < (uint64_t)*v69)
    goto LABEL_83;
  if ((Swift::Int *)v20 == v21)
    goto LABEL_51;
  v74 = AssociatedConformanceWitness;
  v63 = type metadata accessor for DynamicContainerInfo(0, v70, v71, v22);
  AssociatedTypeWitness = *(int *)(v63 + 52);
  v78 = v12;
  while (2)
  {
    if (v20 >= (uint64_t)v21)
      goto LABEL_71;
    v24 = *(_QWORD *)&v72[AssociatedTypeWitness];
    if ((v24 & 0xC000000000000001) != 0)
    {
      v11 = (_BYTE *)MEMORY[0x23B7C6D9C](v20);
      if ((v11[48] & 1) == 0)
        goto LABEL_15;
      goto LABEL_8;
    }
    if (v20 < 0)
      goto LABEL_72;
    if ((unint64_t)v20 >= *(_QWORD *)((v24 & 0xFFFFFFFFFFFFF8) + 0x10))
      goto LABEL_73;
    v11 = *(_BYTE **)(v24 + 8 * v20 + 32);
    swift_retain();
    if ((v11[48] & 1) != 0)
    {
LABEL_8:
      result = swift_release();
      v12 = v78;
      goto LABEL_9;
    }
LABEL_15:
    v25 = &v11[*(_QWORD *)(*(_QWORD *)v11 + 208)];
    swift_beginAccess();
    v26 = v75;
    v27 = *(void (**)(char *, _BYTE *, _BYTE *))(v75 + 16);
    v28 = AssociatedTypeWitness;
    v29 = v76;
    v27(v19, v25, v76);
    a3 = (*(uint64_t (**)(uint64_t, _BYTE *))(v74 + 48))(v77, v29);
    AssociatedConformanceWitness = *(_QWORD *)(v26 + 8);
    v30 = v29;
    AssociatedTypeWitness = v28;
    ((void (*)(char *, _BYTE *))AssociatedConformanceWitness)(v19, v30);
    if ((a3 & 1) == 0)
      goto LABEL_8;
    v31 = v25;
    v32 = v76;
    v27(v19, v31, v76);
    a3 = (*(uint64_t (**)(uint64_t, char *))(v71 + 64))(v66, v19);
    swift_release();
    result = ((uint64_t (*)(char *, _BYTE *))AssociatedConformanceWitness)(v19, v32);
    v12 = v78;
    if ((a3 & 1) != 0)
    {
LABEL_9:
      if (v21 == (Swift::Int *)++v20)
      {
        AssociatedTypeWitness = (uint64_t)v76;
        if (v12 < 0)
          goto LABEL_51;
        goto LABEL_44;
      }
      continue;
    }
    break;
  }
  v12 = v20;
  AssociatedTypeWitness = (uint64_t)v76;
  if ((v20 & 0x8000000000000000) == 0)
    goto LABEL_44;
LABEL_51:
  v40 = v70;
  v39 = v71;
  v47 = type metadata accessor for DynamicContainerInfo(0, v70, v71, v22);
  v48 = *(int *)(v47 + 56);
  v11 = v72;
  v49 = *(_DWORD *)&v72[v48] + 1;
  *(_DWORD *)&v72[v48] = v49;
  CurrentAttribute = AGGraphGetCurrentAttribute();
  if (CurrentAttribute == *MEMORY[0x24BE096C0])
  {
LABEL_78:
    __break(1u);
    goto LABEL_79;
  }
  DynamicContainerInfo.makeItem(_:uniqueId:container:disableTransitions:)(v77, v49, CurrentAttribute, v64 & 1, v47);
  v51 = &v11[*(int *)(v47 + 52)];
  MEMORY[0x23B7C61A8]();
  if (*(_QWORD *)((*v51 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((*v51 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
LABEL_79:
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  v21 = (Swift::Int *)v69;
  v52 = (unint64_t *)v65;
  v53 = (unint64_t)*v65;
  AssociatedConformanceWitness = v68;
  if ((uint64_t)*v69 < (uint64_t)*v65)
  {
    specialized MutableCollection.swapAt(_:_:)(*v69, v53);
    v53 = *v52;
  }
  v54 = v52;
  v41 = v67;
  *v54 = v53 + 1;
  while (1)
  {
    *(_BYTE *)AssociatedConformanceWitness = 1;
    v42 = swift_getAssociatedConformanceWitness();
LABEL_57:
    v13 = (*(double (**)(uint64_t))(v42 + 24))(AssociatedTypeWitness);
    *v41 = *v41 & 1 | (v13 != 0.0);
    v20 = *v21;
    a3 = *(int *)(type metadata accessor for DynamicContainerInfo(0, v40, v39, v55) + 52);
    v56 = *(_QWORD *)&v11[a3];
    if ((v56 & 0xC000000000000001) != 0)
    {
LABEL_75:
      v57 = MEMORY[0x23B7C6D9C](v20);
    }
    else
    {
      if (v20 < 0)
      {
        __break(1u);
LABEL_77:
        __break(1u);
        goto LABEL_78;
      }
      if ((unint64_t)v20 >= *(_QWORD *)((v56 & 0xFFFFFFFFFFFFF8) + 0x10))
        goto LABEL_77;
      v57 = swift_retain();
    }
    v58 = *(double *)(v57 + 64);
    result = swift_release();
    if (v13 == v58)
      goto LABEL_67;
    v59 = *v21;
    v60 = *(_QWORD *)&v11[a3];
    if ((v60 & 0xC000000000000001) != 0)
      break;
    if ((v59 & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else if (v59 < *(_QWORD *)((v60 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      v61 = swift_retain();
      goto LABEL_66;
    }
    __break(1u);
LABEL_83:
    __break(1u);
LABEL_84:
    v45 = MEMORY[0x23B7C6D9C](v12);
    v44 = v68;
    v39 = v71;
    v40 = v70;
LABEL_47:
    v46 = v45 + *(_QWORD *)(*(_QWORD *)v45 + 208);
    swift_beginAccess();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v75 + 24))(v46, v77, AssociatedTypeWitness);
    swift_endAccess();
    DynamicContainerInfo.unremoveItem(at:)(v12);
    v21 = (Swift::Int *)v69;
    if ((uint64_t)*v69 < v12)
      specialized MutableCollection.swapAt(_:_:)(*v69, v12);
    swift_release();
    v41 = v67;
    AssociatedConformanceWitness = v44;
  }
  v61 = MEMORY[0x23B7C6D9C](v59);
LABEL_66:
  *(double *)(v61 + 64) = v13;
  result = swift_release();
  *(_BYTE *)AssociatedConformanceWitness = 1;
LABEL_67:
  ++*v21;
  return result;
}

Swift::Void __swiftcall DynamicContainerInfo.unremoveItem(at:)(Swift::Int at)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int v16;
  uint64_t v17;
  int v18;
  id v19;
  uint64_t v20;
  id v21;
  void *v22;
  id v23;
  uint64_t v24;

  v3 = v1;
  v5 = *(int *)(v1 + 52);
  v6 = v2 + v5;
  v7 = *(_QWORD *)(v2 + v5);
  v8 = v7 & 0xC000000000000001;
  if ((v7 & 0xC000000000000001) == 0)
  {
    if (at < 0)
    {
      __break(1u);
    }
    else if (*(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10) > (unint64_t)at)
    {
      v9 = *(_QWORD *)(v7 + 8 * at + 32);
      swift_retain();
      goto LABEL_5;
    }
    __break(1u);
    goto LABEL_43;
  }
  v9 = MEMORY[0x23B7C6D9C](at, *(_QWORD *)(v2 + v5));
LABEL_5:
  swift_beginAccess();
  v10 = *(unsigned __int8 *)(v9 + 84);
  swift_release();
  if (v10 < 2)
  {
    if (v8)
    {
      v11 = MEMORY[0x23B7C6D9C](at, v7);
      v12 = MEMORY[0x23B7C6D9C](at, v7);
    }
    else
    {
      if (at < 0)
      {
LABEL_45:
        __break(1u);
        goto LABEL_46;
      }
      if (*(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10) <= (unint64_t)at)
      {
LABEL_46:
        __break(1u);
        goto LABEL_47;
      }
      v12 = swift_retain_n();
      v11 = v12;
    }
    v15 = *(_DWORD *)(v12 + 80);
    swift_release();
    *(_DWORD *)(v11 + 80) = v15 + 1;
    swift_release();
    goto LABEL_28;
  }
  if (v10 != 2)
  {
    --*(_QWORD *)(v6 + 32);
    if (v8)
    {
      v14 = MEMORY[0x23B7C6D9C](at, v7);
    }
    else
    {
      if (at < 0)
      {
LABEL_48:
        __break(1u);
        goto LABEL_49;
      }
      if (*(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10) <= (unint64_t)at)
      {
LABEL_50:
        __break(1u);
        goto LABEL_51;
      }
      v14 = *(_QWORD *)(v7 + 8 * at + 32);
      swift_retain();
    }
    v19 = *(id *)(v14 + 16);
    swift_release();
    AGSubgraphAddChild();
    AGSubgraphApply();

LABEL_28:
    v16 = 0;
    if (v8)
      goto LABEL_29;
    goto LABEL_21;
  }
  --*(_QWORD *)(v6 + 24);
  if (v8)
  {
    v13 = MEMORY[0x23B7C6D9C](at, v7);
  }
  else
  {
    if (at < 0)
    {
LABEL_47:
      __break(1u);
      goto LABEL_48;
    }
    if (*(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10) <= (unint64_t)at)
    {
LABEL_49:
      __break(1u);
      goto LABEL_50;
    }
    v13 = swift_retain();
  }
  *(_DWORD *)(v13 + 72) = 0;
  swift_release();
  v16 = 1;
  if (!v8)
  {
LABEL_21:
    if ((at & 0x8000000000000000) == 0)
    {
      if (*(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10) > (unint64_t)at)
      {
        v17 = *(_QWORD *)(v7 + 8 * at + 32);
        v18 = *(unsigned __int8 *)(v17 + 48);
        swift_retain();
        goto LABEL_30;
      }
      goto LABEL_44;
    }
LABEL_43:
    __break(1u);
LABEL_44:
    __break(1u);
    goto LABEL_45;
  }
LABEL_29:
  v18 = *(unsigned __int8 *)(MEMORY[0x23B7C6D9C](at, v7) + 48);
  swift_unknownObjectRelease();
  v17 = MEMORY[0x23B7C6D9C](at, v7);
LABEL_30:
  if (!v18)
    v16 = 1;
  swift_beginAccess();
  *(_BYTE *)(v17 + 84) = v16;
  swift_release();
  if (!v16)
  {
    *(_BYTE *)(v2 + *(int *)(v3 + 68)) = 1;
    v20 = AGCreateWeakAttribute();
    if (AGGraphGetCurrentAttribute() == *MEMORY[0x24BE096C0])
    {
      v21 = (id)AGSubgraphGetCurrent();
      if (!v21)
      {
LABEL_52:
        _assertionFailure(_:_:file:line:flags:)();
        __break(1u);
        return;
      }
      v22 = v21;
      v23 = (id)AGSubgraphGetGraph();

    }
    else
    {
      v23 = (id)AGGraphGetAttributeGraph();
    }
    if (AGGraphGetContext())
    {
      swift_retain();

      v24 = swift_allocObject();
      *(_QWORD *)(v24 + 16) = v20;
      GraphHost.continueTransaction(_:)((uint64_t)partial apply for closure #1 in DynamicContainerInfo.unremoveItem(at:), v24);
      swift_release();
      swift_release();
      return;
    }
LABEL_51:
    __break(1u);
    goto LABEL_52;
  }
}

uint64_t DynamicContainerInfo.makeItem(_:uniqueId:container:disableTransitions:)(uint64_t a1, unsigned int a2, unsigned int a3, char a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t AssociatedConformanceWitness;
  uint64_t (*v12)(uint64_t, uint64_t);
  uint64_t v13;
  char v14;
  id v15;
  void *v16;
  id v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  id v21;
  void *v22;
  id v23;
  uint64_t result;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v30;

  v9 = *(_QWORD *)(a5 + 16);
  v10 = *(_QWORD *)(a5 + 24);
  swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v12 = *(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 16);
  v13 = swift_checkMetadataState();
  v14 = v12(v13, AssociatedConformanceWitness);
  v27 = v14;
  v26 = v9;
  if ((a4 & 1) != 0 || (v14 & 1) == 0)
  {
    v18 = v5;
    v19 = 1;
LABEL_10:
    v21 = (id)AGSubgraphGetGraph();
    (*(void (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 56))(v13, AssociatedConformanceWitness);
    v22 = (void *)AGSubgraphCreate2();

    AGSubgraphAddChild();
    AGGraphClearUpdate();
    v23 = (id)AGSubgraphGetCurrent();
    AGSubgraphSetCurrent();
    closure #3 in DynamicContainerInfo.makeItem(_:uniqueId:container:disableTransitions:)(v18, a1, a2, a3, v22, v19, v27 & 1, v26, &v30, v10);
    AGSubgraphSetCurrent();

    AGGraphSetUpdate();
    return v30;
  }
  v25 = AGCreateWeakAttribute();
  if (AGGraphGetCurrentAttribute() == *MEMORY[0x24BE096C0])
  {
    v15 = (id)AGSubgraphGetCurrent();
    if (!v15)
      goto LABEL_12;
    v16 = v15;
    v17 = (id)AGSubgraphGetGraph();

  }
  else
  {
    v17 = (id)AGGraphGetAttributeGraph();
  }
  if (AGGraphGetContext())
  {
    swift_retain();

    v20 = swift_allocObject();
    *(_QWORD *)(v20 + 16) = v25;
    GraphHost.continueTransaction(_:)((uint64_t)partial apply for closure #1 in DynamicAnimationListener.animationWasRemoved(), v20);
    swift_release();
    swift_release();
    v19 = 0;
    *(_BYTE *)(v5 + *(int *)(a5 + 68)) = 1;
    v18 = v5;
    goto LABEL_10;
  }
  __break(1u);
LABEL_12:
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t closure #3 in DynamicContainerInfo.makeItem(_:uniqueId:container:disableTransitions:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned int a3@<W2>, unsigned int a4@<W3>, void *a5@<X4>, int a6@<W5>, int a7@<W6>, uint64_t a8@<X7>, uint64_t *a9@<X8>, uint64_t a10)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  uint64_t v35;
  _BYTE *v36;
  uint64_t v37;
  uint64_t v38;
  void (*v39)(_QWORD *, _BYTE *, uint64_t, uint64_t, uint64_t *, uint64_t, uint64_t (*)(_DWORD *), char *, uint64_t, uint64_t);
  uint64_t v40;
  uint64_t v41;
  _BYTE *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _BYTE *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t AssociatedConformanceWitness;
  uint64_t (*v51)(uint64_t, uint64_t);
  uint64_t result;
  uint64_t v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _BYTE v58[12];
  int v59;
  uint64_t *v60;
  int v61;
  int v62;
  __int128 v63;
  __int128 v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  __int128 v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  _BYTE *v72;
  _BYTE *v73;
  unsigned int v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t AssociatedTypeWitness;
  id v80;
  unsigned int v81;
  _BYTE *v82;
  _BYTE *v83;
  uint64_t v84;
  char v85[16];
  unsigned int v86;
  int v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  __int128 v95;
  uint64_t v96;
  int v97;
  _QWORD v98[2];

  v59 = a7;
  v61 = a6;
  v80 = a5;
  v74 = a4;
  v81 = a3;
  v77 = a2;
  v67 = a1;
  v60 = a9;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v78 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v83 = &v58[-v12];
  v84 = *(_QWORD *)(a8 - 8);
  MEMORY[0x24BDAC7A8](v13);
  v72 = &v58[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v65 = a10;
  v70 = a8;
  v76 = swift_getAssociatedTypeWitness();
  v75 = *(_QWORD *)(v76 - 8);
  MEMORY[0x24BDAC7A8](v76);
  v82 = &v58[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v16);
  v73 = &v58[-v17];
  v66 = type metadata accessor for DynamicContainerInfo(0, a8, a10, v18);
  v19 = a1 + *(int *)(v66 + 40);
  v20 = *(_QWORD *)v19;
  LODWORD(v69) = *(_DWORD *)(v19 + 8);
  v21 = *(_QWORD *)(v19 + 16);
  v22 = *(_QWORD *)(v19 + 40);
  v23 = *(_QWORD *)(v19 + 48);
  LODWORD(v71) = *(_DWORD *)(v19 + 80);
  v24 = *(_QWORD *)(v19 + 24);
  v25 = *(_QWORD *)(v19 + 32);
  v68 = *(_OWORD *)(v19 + 56);
  v26 = *(_QWORD *)(v19 + 72);
  swift_beginAccess();
  LODWORD(a8) = *(_DWORD *)(v21 + 16);
  v27 = *(_QWORD *)(v21 + 24);
  v64 = *(_OWORD *)(v21 + 32);
  v63 = *(_OWORD *)(v21 + 48);
  v28 = *(_QWORD *)(v21 + 64);
  v29 = *(_QWORD *)(v21 + 72);
  v62 = *(unsigned __int8 *)(v21 + 80);
  v30 = *(_BYTE *)(v21 + 81);
  v31 = *(_QWORD *)(v21 + 88);
  type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for MutableBox<CachedEnvironment>, (uint64_t)&type metadata for CachedEnvironment, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for MutableBox);
  v32 = swift_allocObject();
  *(_DWORD *)(v32 + 16) = a8;
  *(_QWORD *)(v32 + 24) = v27;
  v33 = v63;
  *(_OWORD *)(v32 + 32) = v64;
  *(_OWORD *)(v32 + 48) = v33;
  *(_QWORD *)(v32 + 64) = v28;
  *(_QWORD *)(v32 + 72) = v29;
  v34 = v81;
  v35 = v65;
  *(_BYTE *)(v32 + 80) = v62;
  *(_BYTE *)(v32 + 81) = v30;
  *(_QWORD *)(v32 + 88) = v31;
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v36 = v72;
  v37 = v70;
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v84 + 16))(v72, v67 + *(int *)(v66 + 36), v70);
  v88 = v20;
  LODWORD(v89) = v69;
  v90 = v32;
  v91 = v24;
  v92 = v25;
  v93 = v22;
  v94 = v23;
  v95 = v68;
  v96 = v26;
  v97 = v71;
  v38 = v74;
  v86 = v74;
  v87 = v34;
  v39 = *(void (**)(_QWORD *, _BYTE *, uint64_t, uint64_t, uint64_t *, uint64_t, uint64_t (*)(_DWORD *), char *, uint64_t, uint64_t))(v35 + 72);
  v71 = v20;
  v40 = v37;
  swift_retain();
  swift_retain();
  v69 = v22;
  swift_bridgeObjectRetain();
  *(_QWORD *)&v68 = v23;
  swift_bridgeObjectRetain();
  v56 = v37;
  v57 = v35;
  v41 = v35;
  v42 = v73;
  v43 = v77;
  v39(v98, v73, v77, v34, &v88, v38, partial apply for closure #1 in closure #3 in DynamicContainerInfo.makeItem(_:uniqueId:container:disableTransitions:), v85, v56, v57);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  (*(void (**)(_BYTE *, uint64_t))(v84 + 8))(v36, v40);
  v84 = v98[0];
  v44 = v98[1];
  v45 = AssociatedTypeWitness;
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v78 + 16))(v83, v43, AssociatedTypeWitness);
  v46 = v75;
  v47 = v42;
  v48 = v76;
  (*(void (**)(_BYTE *, _BYTE *))(v75 + 16))(v82, v42);
  v49 = v41;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v51 = *(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 8);
  v80 = v80;
  result = v51(v45, AssociatedConformanceWitness);
  if (result < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
  }
  else
  {
    v54 = result;
    if (result <= 0x7FFFFFFF)
    {
      type metadata accessor for DynamicContainer._ItemInfo(0, v40, v49, v53);
      (*(void (**)(_BYTE *, uint64_t))(v46 + 8))(v47, v48);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
      v88 = v84;
      v89 = v44;
      v55 = swift_allocObject();
      result = DynamicContainer._ItemInfo.init(item:itemLayout:subgraph:uniqueId:viewCount:phase:needsTransitions:outputs:)((uint64_t)v83, (uint64_t)v82, (uint64_t)v80, v81, v54, v61, v59 & 1, &v88);
      *v60 = v55;
      return result;
    }
  }
  __break(1u);
  return result;
}

uint64_t closure #1 in closure #3 in DynamicContainerInfo.makeItem(_:uniqueId:container:disableTransitions:)(_DWORD *a1)
{
  uint64_t result;
  int v3;

  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  lazy protocol witness table accessor for type DynamicTransaction and conformance DynamicTransaction();
  a1[7] = Attribute.init<A>(body:value:flags:update:)();
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  lazy protocol witness table accessor for type DynamicViewPhase and conformance DynamicViewPhase();
  result = Attribute.init<A>(body:value:flags:update:)();
  a1[6] = result;
  v3 = a1[8];
  if ((v3 & 0x40) == 0)
    a1[8] = v3 | 0x40;
  return result;
}

Swift::Void __swiftcall DynamicContainerInfo.eraseItem(at:)(Swift::Int at)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(_QWORD *)(v2 + *(int *)(v1 + 52));
  if ((v3 & 0xC000000000000001) != 0)
  {
    v4 = MEMORY[0x23B7C6D9C](at);
  }
  else
  {
    if (at < 0)
    {
      __break(1u);
      JUMPOUT(0x234E14DECLL);
    }
    if (*(_QWORD *)((v3 & 0xFFFFFFFFFFFFF8) + 0x10) <= (unint64_t)at)
    {
      __break(1u);
      JUMPOUT(0x234E14F0CLL);
    }
    v4 = *(_QWORD *)(v3 + 8 * at + 32);
    swift_retain();
  }
  swift_beginAccess();
  v5 = *(unsigned __int8 *)(v4 + 84);
  swift_release();
  __asm { BR              X9 }
}

void sub_234E14F68()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  JUMPOUT(0x234E14FACLL);
}

void DynamicAnimationListener.animationWasAdded()()
{
  uint64_t v0;

  ++*(_QWORD *)(v0 + 32);
}

uint64_t closure #1 in DynamicContainerInfo.tryRemovingItem(at:disableTransitions:)(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(result + 32) - 1;
  *(_QWORD *)(result + 32) = v1;
  if (!v1)
  {
    v2 = result;
    result = swift_weakLoadStrong();
    if (result)
    {
      v3 = swift_allocObject();
      *(_QWORD *)(v3 + 16) = *(_QWORD *)(v2 + 24);
      GraphHost.continueTransaction(_:)((uint64_t)partial apply for closure #1 in DynamicAnimationListener.animationWasRemoved(), v3);
      swift_release();
      return swift_release();
    }
  }
  return result;
}

void DynamicAnimationListener.animationWasRemoved()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 32) - 1;
  *(_QWORD *)(v0 + 32) = v1;
  if (!v1)
  {
    if (swift_weakLoadStrong())
    {
      v2 = swift_allocObject();
      *(_QWORD *)(v2 + 16) = *(_QWORD *)(v0 + 24);
      GraphHost.continueTransaction(_:)((uint64_t)partial apply for closure #1 in DynamicAnimationListener.animationWasRemoved(), v2);
      swift_release();
      swift_release();
    }
  }
}

Swift::Void __swiftcall DynamicContainerInfo.destroy()()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  id v8;

  v2 = *(_QWORD *)(v1 + *(int *)(v0 + 52));
  if (v2 >> 62)
  {
    swift_bridgeObjectRetain();
    v3 = _CocoaArrayWrapper.endIndex.getter();
    if (v3)
      goto LABEL_3;
LABEL_15:
    swift_bridgeObjectRelease();
    return;
  }
  v3 = *(_QWORD *)((v2 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (!v3)
    goto LABEL_15;
LABEL_3:
  if (v3 >= 1)
  {
    v4 = 0;
    while ((v2 & 0xC000000000000001) != 0)
    {
      v5 = MEMORY[0x23B7C6D9C](v4, v2);
      if (*(_QWORD *)(v5 + 56))
        goto LABEL_8;
LABEL_9:
      v6 = swift_beginAccess();
      if (*(_BYTE *)(v5 + 84) == 3)
      {
        MEMORY[0x24BDAC7A8](v6);
        v8 = v7;
        AGSubgraphApply();

        AGSubgraphInvalidate();
      }
      ++v4;
      swift_release();
      if (v3 == v4)
        goto LABEL_15;
    }
    v5 = *(_QWORD *)(v2 + 8 * v4 + 32);
    swift_retain();
    if (!*(_QWORD *)(v5 + 56))
      goto LABEL_9;
LABEL_8:
    swift_weakAssign();
    goto LABEL_9;
  }
  __break(1u);
}

unint64_t protocol witness for CustomStringConvertible.description.getter in conformance DynamicContainerInfo<A>()
{
  return specialized DynamicContainerInfo.description.getter();
}

void protocol witness for static _AttributeBody._destroySelf(_:) in conformance DynamicContainerInfo<A>()
{
  DynamicContainerInfo.destroy()();
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance DynamicContainerInfo<A>(uint64_t a1)
{
  MEMORY[0x23B7C9C04](&protocol conformance descriptor for DynamicContainerInfo<A>, a1);
  return static AsyncAttribute.flags.getter();
}

uint64_t DynamicTransaction.updateValue()()
{
  unsigned int *v0;
  unsigned int *v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  Swift::Int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18[2];

  v1 = v0;
  v18[1] = *MEMORY[0x24BDAC8D0];
  v2 = *v0;
  v3 = *(_QWORD *)(AGGraphGetValue() + 8);
  if (!*(_QWORD *)(v3 + 16))
    goto LABEL_8;
  v4 = specialized __RawDictionaryStorage.find<A>(_:)(v1[2]);
  if ((v5 & 1) == 0)
    goto LABEL_8;
  v6 = *(_QWORD *)(*(_QWORD *)(v3 + 56) + 8 * v4);
  v7 = *(_QWORD *)AGGraphGetValue();
  if ((v7 & 0xC000000000000001) == 0)
  {
    if ((v6 & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else if (v6 < *(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      v8 = *(_QWORD *)(v7 + 8 * v6 + 32);
      swift_retain();
      goto LABEL_7;
    }
    __break(1u);
    goto LABEL_29;
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v8 = MEMORY[0x23B7C6D9C](v6, v7);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
LABEL_7:
  swift_beginAccess();
  v9 = *(unsigned __int8 *)(v8 + 84);
  swift_release();
  if (v9 == 3)
  {
LABEL_8:
    v18[0] = 0;
    return AGGraphSetOutputValue();
  }
  v11 = *(_QWORD *)AGGraphGetValue();
  v18[0] = v11;
  v12 = *((_BYTE *)v1 + 12);
  *((_BYTE *)v1 + 12) = 0;
  if (!v9)
  {
    v13 = swift_retain_n();
    v14 = specialized find<A>(_:key:)(v13);
    if (!v14 || *(_QWORD *)(v14 + 72))
    {
      type metadata accessor for TypedElement<TransactionPropertyKey<AnimationKey>>(0);
      *(_QWORD *)(swift_allocObject() + 72) = 0;
      type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, (unint64_t *)&lazy cache variable for type metadata for TransactionPropertyKey<AnimationKey>, (uint64_t)&type metadata for AnimationKey, (uint64_t)&protocol witness table for AnimationKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for TransactionPropertyKey);
      v18[0] = PropertyList.Element.init(keyType:before:after:)(v15, 0, v11).value;
    }
    swift_release();
    swift_retain();
    specialized closure #1 in PropertyList.subscript.setter(v18, 1);
    swift_release();
    goto LABEL_25;
  }
  if (v9 != 1)
  {
    if ((v12 & 1) != 0)
    {
      swift_retain();
LABEL_23:
      *((_BYTE *)v1 + 12) = 1;
      goto LABEL_25;
    }
    v2 = *(_QWORD *)AGGraphGetValue();
    if ((v2 & 0xC000000000000001) == 0)
    {
      if ((v6 & 0x8000000000000000) != 0)
      {
        __break(1u);
      }
      else if (v6 < *(_QWORD *)((v2 & 0xFFFFFFFFFFFFF8) + 0x10))
      {
        v16 = *(_QWORD *)(v2 + 8 * v6 + 32);
        swift_retain();
        swift_retain();
        goto LABEL_21;
      }
      __break(1u);
    }
LABEL_29:
    swift_bridgeObjectRetain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v16 = MEMORY[0x23B7C6D9C](v6, v2);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_21:
    v17 = *(_QWORD *)(v16 + 56);
    swift_retain();
    swift_release();
    if (v17)
    {
      Transaction.addAnimationListener(_:)(v17);
      swift_release();
    }
    goto LABEL_23;
  }
  swift_retain();
LABEL_25:
  AGGraphSetOutputValue();
  return swift_release();
}

unint64_t DynamicViewPhase.value.getter@<X0>(uint64_t a1@<X0>, unsigned int a2@<W1>, int *a3@<X8>)
{
  int v3;
  int v7;
  unint64_t result;
  uint64_t v9;
  char v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;

  v7 = *(_DWORD *)AGGraphGetValue();
  result = AGGraphGetValue();
  v9 = *(_QWORD *)(result + 8);
  if (!*(_QWORD *)(v9 + 16))
    goto LABEL_12;
  result = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  if ((v10 & 1) == 0)
    goto LABEL_12;
  v11 = *(_QWORD *)(*(_QWORD *)(v9 + 56) + 8 * result);
  v12 = *(_QWORD *)AGGraphGetValue();
  if ((v12 & 0xC000000000000001) == 0)
  {
    if ((v11 & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else if (v11 < *(_QWORD *)((v12 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      v13 = *(_QWORD *)(v12 + 8 * v11 + 32);
      swift_retain();
      goto LABEL_7;
    }
    __break(1u);
    goto LABEL_16;
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v13 = MEMORY[0x23B7C6D9C](v11, v12);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
LABEL_7:
  v3 = *(_DWORD *)(v13 + 80);
  swift_release();
  result = AGGraphGetValue();
  a1 = *(_QWORD *)result;
  if ((*(_QWORD *)result & 0xC000000000000001) != 0)
  {
LABEL_16:
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v14 = MEMORY[0x23B7C6D9C](v11, a1);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_11;
  }
  if ((v11 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (v11 < *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v14 = *(_QWORD *)(a1 + 8 * v11 + 32);
    swift_retain();
LABEL_11:
    swift_beginAccess();
    v15 = *(unsigned __int8 *)(v14 + 84);
    result = swift_release();
    v7 = (v7 + 2 * v3) | (v15 == 2);
LABEL_12:
    *a3 = v7;
    return result;
  }
  __break(1u);
  return result;
}

uint64_t DynamicPreferenceCombiner.info.getter@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t Value;
  uint64_t v4;
  uint64_t v5;
  char v6;
  int v7;

  if (*MEMORY[0x24BE096C0] == (_DWORD)result)
  {
    *(_OWORD *)(a2 + 16) = 0u;
    *(_OWORD *)(a2 + 32) = 0u;
    *(_OWORD *)a2 = 0u;
  }
  else
  {
    Value = AGGraphGetValue();
    v4 = *(_QWORD *)(Value + 8);
    v5 = *(_QWORD *)(Value + 32);
    v6 = *(_BYTE *)(Value + 40);
    v7 = *(_DWORD *)(Value + 44);
    *(_QWORD *)a2 = *(_QWORD *)Value;
    *(_QWORD *)(a2 + 8) = v4;
    *(_OWORD *)(a2 + 16) = *(_OWORD *)(Value + 16);
    *(_QWORD *)(a2 + 32) = v5;
    *(_BYTE *)(a2 + 40) = v6;
    *(_DWORD *)(a2 + 44) = v7;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

unint64_t protocol witness for Rule.value.getter in conformance DynamicViewPhase@<X0>(int *a1@<X8>)
{
  uint64_t v1;

  return DynamicViewPhase.value.getter(*(_QWORD *)v1, *(_DWORD *)(v1 + 8), a1);
}

uint64_t DynamicPreferenceCombiner.value.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  BOOL v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t Value;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  double v36;
  _QWORD v37[3];
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  int v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;

  v48 = a4;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v40 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v41 = AssociatedTypeWitness;
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v39 = (char *)v37 - v8;
  result = DynamicPreferenceCombiner.info.getter(a1, (uint64_t)&v52);
  v10 = v52;
  if (!v52)
    goto LABEL_48;
  v11 = v53;
  v12 = v54;
  v13 = v56;
  v45 = v55;
  v14 = v57;
  v42 = v52 & 0xFFFFFFFFFFFFFF8;
  if (v52 >> 62)
    goto LABEL_43;
  v15 = *(_QWORD *)((v52 & 0xFFFFFFFFFFFFFF8) + 0x10);
  v16 = v15 - v56;
  if (__OFSUB__(v15, v56))
    goto LABEL_45;
LABEL_4:
  v37[2] = v14;
  v14 = v16 - v45;
  if (__OFSUB__(v16, v45))
  {
LABEL_46:
    __break(1u);
LABEL_47:
    __break(1u);
LABEL_48:
    __break(1u);
    return result;
  }
  v38 = v13;
  if (v16 == v14)
  {
    result = (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 16))(a2, a3);
    v51 = 0;
    v14 = v16;
  }
  else
  {
    v17 = v11;
    v18 = (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 32))(a2, a3);
    result = (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 16))(a2, a3);
    v51 = v18;
    v19 = (v18 & 1) == 0;
    v11 = v17;
    v13 = v38;
    if (!v19)
      v14 = v16;
  }
  if (v14 < 0)
    goto LABEL_47;
  if (v14)
  {
    v37[1] = v11;
    v20 = 0;
    v47 = v15 - (v13 + v45);
    v46 = v10 + 32;
    v43 = v12 + 32 - 4 * (v13 + v45) + 4 * v15;
    v44 = v12 + 32;
    v49 = v14 - 1;
    v50 = v10 & 0xC000000000000001;
    v13 = 1;
    v11 = v42;
    while (1)
    {
      if (v12)
      {
        if ((v51 & 1) != 0)
        {
          if ((uint64_t)(v47 + v20) < 0)
            goto LABEL_40;
          if (v47 + v20 >= *(_QWORD *)(v12 + 16))
            goto LABEL_42;
          v28 = v43;
        }
        else
        {
          if (v20 >= *(_QWORD *)(v12 + 16))
            goto LABEL_41;
          v28 = v44;
        }
        v29 = *(unsigned int *)(v28 + 4 * v20);
        if (v50)
        {
LABEL_25:
          v30 = MEMORY[0x23B7C6D9C](v29, v10);
          goto LABEL_32;
        }
      }
      else
      {
        v29 = v20;
        if ((v51 & 1) != 0)
        {
          if ((uint64_t)v20 < v45)
            v29 = v47 + v20;
          else
            v29 = v20 - v45;
        }
        if (v50)
          goto LABEL_25;
      }
      if ((v29 & 0x8000000000000000) != 0)
        goto LABEL_38;
      if (v29 >= *(_QWORD *)(v11 + 16))
        goto LABEL_39;
      v30 = *(_QWORD *)(v46 + 8 * v29);
      swift_retain();
LABEL_32:
      v31 = *(_QWORD *)(v30 + 32);
      swift_bridgeObjectRetain();
      v32 = *(_QWORD *)(v30 + 40);
      swift_release();
      v52 = v31;
      v53 = v32;
      v34 = _ViewOutputs.subscript.getter(a2, a2, a3, v33);
      v35 = swift_bridgeObjectRelease();
      if ((v34 & 0x100000000) == 0)
      {
        if ((v13 & 1) == 0)
        {
          v36 = MEMORY[0x24BDAC7A8](v35);
          v37[-4] = a2;
          v37[-3] = a3;
          LODWORD(v37[-2]) = v34;
          (*(void (**)(uint64_t, uint64_t (*)@<X0>(uint64_t@<X8>), double))(a3 + 24))(v48, partial apply for closure #1 in DynamicPreferenceCombiner.value.getter, v36);
          if (v49 == v20)
            return outlined consume of DynamicContainer.Info?(v10);
          v13 = 0;
          goto LABEL_14;
        }
        v21 = v41;
        Value = AGGraphGetValue();
        v23 = v40;
        v24 = v10;
        v25 = v39;
        (*(void (**)(char *, uint64_t, uint64_t))(v40 + 16))(v39, Value, v21);
        v26 = v48;
        (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v48, v21);
        v27 = v25;
        v10 = v24;
        v11 = v42;
        (*(void (**)(uint64_t, char *, uint64_t))(v23 + 32))(v26, v27, v21);
        v13 = 0;
      }
      if (v49 == v20)
        return outlined consume of DynamicContainer.Info?(v10);
LABEL_14:
      if (v14 == ++v20)
      {
        __break(1u);
LABEL_38:
        __break(1u);
LABEL_39:
        __break(1u);
LABEL_40:
        __break(1u);
LABEL_41:
        __break(1u);
LABEL_42:
        __break(1u);
LABEL_43:
        swift_bridgeObjectRetain();
        v15 = _CocoaArrayWrapper.endIndex.getter();
        result = swift_bridgeObjectRelease();
        v16 = v15 - v13;
        if (!__OFSUB__(v15, v13))
          goto LABEL_4;
LABEL_45:
        __break(1u);
        goto LABEL_46;
      }
    }
  }
  return outlined consume of DynamicContainer.Info?(v10);
}

uint64_t closure #1 in DynamicPreferenceCombiner.value.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t Value;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  Value = AGGraphGetValue();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 16))(a1, Value, AssociatedTypeWitness);
}

uint64_t protocol witness for static Rule.initialValue.getter in conformance DynamicPreferenceCombiner<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return static PreferenceCombiner.initialValue.getter(*(_QWORD *)(a1 + 24), a2);
}

uint64_t protocol witness for Rule.value.getter in conformance DynamicPreferenceCombiner<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unsigned int *v2;

  return DynamicPreferenceCombiner.value.getter(*v2, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance DynamicPreferenceCombiner<A>()
{
  return specialized DynamicPreferenceCombiner.description.getter();
}

uint64_t protocol witness for static _AttributeBody._updateDefault(_:) in conformance DynamicPreferenceCombiner<A>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v14;
  double v15;
  uint64_t v16;
  _QWORD v17[2];

  v17[1] = *MEMORY[0x24BDAC8D0];
  v3 = *(_QWORD *)(a2 + 24);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = type metadata accessor for Optional();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)v17 - v7;
  v9 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)v17 - v11;
  static PreferenceCombiner.initialValue.getter(v3, (uint64_t)v8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v8, 1, AssociatedTypeWitness) == 1)
    return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  v14 = (*(uint64_t (**)(char *, char *, uint64_t))(v9 + 32))(v12, v8, AssociatedTypeWitness);
  v15 = MEMORY[0x24BDAC7A8](v14);
  v17[-2] = a2;
  v17[-1] = MEMORY[0x23B7C9C04](&protocol conformance descriptor for DynamicPreferenceCombiner<A>, a2, v15);
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v12, (uint64_t)partial apply for closure #1 in static Rule._updateDefault(_:), (uint64_t)&v17[-4], AssociatedTypeWitness, MEMORY[0x24BEE4078], MEMORY[0x24BEE4AE0] + 8, MEMORY[0x24BEE40A8], v16);
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v12, AssociatedTypeWitness);
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance DynamicPreferenceCombiner<A>(uint64_t a1)
{
  MEMORY[0x23B7C9C04](&protocol conformance descriptor for DynamicPreferenceCombiner<A>, a1);
  return static AsyncAttribute.flags.getter();
}

void DynamicAnimationListener.__allocating_init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

uint64_t DynamicAnimationListener.__ivar_destroyer()
{
  return swift_weakDestroy();
}

uint64_t DynamicAnimationListener.__deallocating_deinit()
{
  swift_weakDestroy();
  return swift_deallocClassInstance();
}

uint64_t specialized _merge<A>(low:mid:high:buffer:by:)(char *__src, char *a2, unint64_t a3, char *__dst, uint64_t (*a5)(_QWORD, _QWORD))
{
  uint64_t v5;
  char *v6;
  char *v7;
  char *v8;
  int64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  unsigned int v21;
  char v22;
  char *v23;
  uint64_t result;
  char *v27;
  char *v28;
  char *v29;

  v6 = __dst;
  v7 = a2;
  v8 = __src;
  v9 = a2 - __src;
  v10 = a2 - __src + 3;
  if (a2 - __src >= 0)
    v10 = a2 - __src;
  v11 = v10 >> 2;
  v12 = a3 - (_QWORD)a2;
  v13 = a3 - (_QWORD)a2 + 3;
  if ((uint64_t)(a3 - (_QWORD)a2) >= 0)
    v13 = a3 - (_QWORD)a2;
  v14 = v13 >> 2;
  v29 = __src;
  v28 = __dst;
  if (v11 >= v13 >> 2)
  {
    if (v12 >= -3)
    {
      if (__dst != a2 || &a2[4 * v14] <= __dst)
        memmove(__dst, a2, 4 * v14);
      v18 = &v6[4 * v14];
      v27 = v18;
      v29 = v7;
      if (v8 < v7 && v12 >= 4)
      {
        v19 = (char *)(a3 - 4);
        v20 = v7;
        while (1)
        {
          v21 = *((_DWORD *)v20 - 1);
          v20 -= 4;
          v22 = a5(*((unsigned int *)v18 - 1), v21);
          if (v5)
            break;
          v23 = v19 + 4;
          if ((v22 & 1) != 0)
          {
            if (v23 != v7 || v19 >= v7)
              *(_DWORD *)v19 = *(_DWORD *)v20;
            v29 = v20;
            if (v20 <= v8)
              goto LABEL_44;
          }
          else
          {
            v27 = v18 - 4;
            if (v23 < v18 || v19 >= v18 || v23 != v18)
              *(_DWORD *)v19 = *((_DWORD *)v18 - 1);
            v20 = v7;
            v18 -= 4;
            if (v7 <= v8)
              goto LABEL_44;
          }
          v19 -= 4;
          v7 = v20;
          if (v18 <= v6)
            goto LABEL_44;
        }
      }
      goto LABEL_44;
    }
  }
  else if (v9 >= -3)
  {
    if (__dst != __src || &__src[4 * v11] <= __dst)
      memmove(__dst, __src, 4 * v11);
    v15 = &v6[4 * v11];
    v27 = v15;
    if ((unint64_t)v7 < a3 && v9 >= 4)
    {
      do
      {
        v16 = a5(*(unsigned int *)v7, *(unsigned int *)v6);
        if (v5)
          break;
        if ((v16 & 1) != 0)
        {
          v17 = v7 + 4;
          if (v8 < v7 || v8 >= v17 || v8 != v7)
            *(_DWORD *)v8 = *(_DWORD *)v7;
        }
        else
        {
          if (v8 != v6)
            *(_DWORD *)v8 = *(_DWORD *)v6;
          v6 += 4;
          v28 = v6;
          v17 = v7;
        }
        v8 += 4;
        v29 = v8;
        if (v6 >= v15)
          break;
        v7 = v17;
      }
      while ((unint64_t)v17 < a3);
    }
LABEL_44:
    specialized $defer #1 <A>() in _merge<A>(low:mid:high:buffer:by:)((void **)&v29, (const void **)&v28, &v27);
    return 1;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

char *specialized $defer #1 <A>() in _merge<A>(low:mid:high:buffer:by:)(void **a1, const void **a2, _QWORD *a3)
{
  char *v3;
  uint64_t v4;
  char *result;
  size_t v6;

  v3 = (char *)*a2;
  v4 = *a3 - (_QWORD)v3;
  if (v4 <= -16)
  {
    result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    result = (char *)*a1;
    v6 = (v4 + (v4 < 0 ? 0xFuLL : 0)) & 0xFFFFFFFFFFFFFFF0;
    if (result != v3 || result >= &v3[v6])
      return (char *)memmove(result, v3, v6);
  }
  return result;
}

{
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *result;
  uint64_t v7;

  v3 = (char *)*a2;
  v4 = *a3 - (_QWORD)v3;
  v5 = v4 + 15;
  if (v4 >= 0)
    v5 = *a3 - (_QWORD)v3;
  if (v4 <= -16)
  {
    result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    result = (char *)*a1;
    v7 = v5 >> 4;
    if (result != v3 || result >= &v3[16 * v7])
      return (char *)memmove(result, v3, 16 * v7);
  }
  return result;
}

{
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *result;
  uint64_t v7;

  v3 = (char *)*a2;
  v4 = *a3 - (_QWORD)v3;
  v5 = v4 + 7;
  if (v4 >= 0)
    v5 = *a3 - (_QWORD)v3;
  if (v4 <= -8)
  {
    result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    result = (char *)*a1;
    v7 = v5 >> 3;
    if (result != v3 || result >= &v3[8 * v7])
      return (char *)memmove(result, v3, 8 * v7);
  }
  return result;
}

{
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *result;
  uint64_t v7;

  v3 = (char *)*a2;
  v4 = *a3 - (_QWORD)v3;
  v5 = v4 + 3;
  if (v4 >= 0)
    v5 = *a3 - (_QWORD)v3;
  if (v4 <= -4)
  {
    result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    result = (char *)*a1;
    v7 = v5 >> 2;
    if (result != v3 || result >= &v3[4 * v7])
      return (char *)memmove(result, v3, 4 * v7);
  }
  return result;
}

{
  char *v3;
  uint64_t v4;
  char *result;
  uint64_t v6;

  v3 = (char *)*a2;
  v4 = *a3 - (_QWORD)v3;
  if (v4 <= -96)
  {
    result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    result = (char *)*a1;
    v6 = v4 / 96;
    if (result != v3 || result >= &v3[96 * v6])
      return (char *)memmove(result, v3, 96 * v6);
  }
  return result;
}

{
  char *v3;
  uint64_t v4;
  char *result;
  uint64_t v6;

  v3 = (char *)*a2;
  v4 = *a3 - (_QWORD)v3;
  if (v4 <= -24)
  {
    result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    result = (char *)*a1;
    v6 = v4 / 24;
    if (result != v3 || result >= &v3[24 * v6])
      return (char *)memmove(result, v3, 24 * v6);
  }
  return result;
}

{
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *result;
  uint64_t v7;

  v3 = (char *)*a2;
  v4 = *a3 - (_QWORD)v3;
  v5 = v4 + 31;
  if (v4 >= 0)
    v5 = *a3 - (_QWORD)v3;
  if (v4 <= -32)
  {
    result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    result = (char *)*a1;
    v7 = v5 >> 5;
    if (result != v3 || result >= &v3[32 * v7])
      return (char *)memmove(result, v3, 32 * v7);
  }
  return result;
}

uint64_t specialized $defer #1 <A>() in _merge<A>(low:mid:high:buffer:by:)(unint64_t *a1, unint64_t *a2, uint64_t *a3)
{
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;

  v3 = *a1;
  v4 = *a2;
  v5 = *a3;
  result = type metadata accessor for Date.ComponentsFormatStyle.Field();
  v7 = *(_QWORD *)(*(_QWORD *)(result - 8) + 72);
  if (!v7)
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v8 = v5 - v4;
  if (v5 - v4 == 0x8000000000000000 && v7 == -1)
    goto LABEL_14;
  if (v8 / v7 < 0)
  {
LABEL_15:
    result = _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  if (v3 < v4 || v3 >= v4 + v8 / v7 * v7)
    return swift_arrayInitWithTakeFrontToBack();
  if (v3 != v4)
    return swift_arrayInitWithTakeBackToFront();
  return result;
}

uint64_t specialized _ContiguousArrayBuffer._consumeAndCreateNew()(uint64_t a1)
{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

uint64_t specialized _ContiguousArrayBuffer._consumeAndCreateNew()(_QWORD *a1)
{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

unint64_t specialized DynamicContainerInfo.description.getter()
{
  Swift::String v0;
  Swift::String v1;

  _StringGuts.grow(_:)(20);
  swift_bridgeObjectRelease();
  v0._countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  v1._countAndFlagsBits = 62;
  v1._object = (void *)0xE100000000000000;
  String.append(_:)(v1);
  return 0xD000000000000011;
}

uint64_t specialized DynamicPreferenceCombiner.description.getter()
{
  Swift::String v0;

  v0._countAndFlagsBits = static PreferenceKey.readableName.getter();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  return 0x202BAA88E2;
}

Swift::Int specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(uint64_t *a1, uint64_t (*a2)(Swift::Int, _QWORD))
{
  uint64_t v2;
  Swift::Int v4;
  Swift::Int result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  Swift::Int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int *v14;
  char *v15;
  Swift::Int v16;
  uint64_t v17;
  Swift::Int v18;
  int v19;
  int v20;
  unsigned int *v21;
  Swift::Int v22;
  Swift::Int v23;
  int v24;
  Swift::Int v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char *v29;
  char *v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  BOOL v42;
  unint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  BOOL v52;
  uint64_t v53;
  char v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  BOOL v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  Swift::Int v71;
  char *v72;
  char *v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  unint64_t v77;
  unsigned int *v78;
  Swift::Int v79;
  Swift::Int v80;
  unsigned int *v81;
  char v82;
  unsigned int v83;
  char *v84;
  uint64_t v85;
  unint64_t v86;
  char *v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  char *v92;
  char *v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t *v96;
  uint64_t v97;
  Swift::Int v98;
  Swift::Int v99;
  uint64_t v100;
  char *__dst;
  uint64_t v102;

  v4 = a1[1];
  result = _minimumMergeRunLength(_:)(v4);
  if (result >= v4)
  {
    if (v4 < 0)
      goto LABEL_142;
    if ((unint64_t)v4 >= 2)
    {
      v9 = v4;
      v10 = 0;
      v11 = *a1;
      v12 = 1;
LABEL_11:
      result = *(unsigned int *)(v11 + 4 * v12);
      v13 = v10;
      while (1)
      {
        v14 = (unsigned int *)(v11 + 4 * v13);
        result = a2(result, *v14);
        if (v2)
          break;
        if ((result & 1) != 0)
        {
          if (!v11)
            goto LABEL_147;
          result = v14[1];
          v14[1] = *(_DWORD *)(v11 + 4 * v13);
          *(_DWORD *)(v11 + 4 * v13--) = result;
          if (v13 != -1)
            continue;
        }
        ++v12;
        ++v10;
        if (v12 != v9)
          goto LABEL_11;
        return result;
      }
    }
    return result;
  }
  if (v4 >= 0)
    v6 = v4;
  else
    v6 = v4 + 1;
  if (v4 < -1)
    goto LABEL_152;
  v99 = result;
  v96 = a1;
  if (v4 < 2)
  {
    v15 = (char *)MEMORY[0x24BEE4AF8];
    v100 = MEMORY[0x24BEE4AF8];
    __dst = (char *)(MEMORY[0x24BEE4AF8] + 32);
    if (v4 != 1)
    {
      v28 = *(_QWORD *)(MEMORY[0x24BEE4AF8] + 16);
LABEL_108:
      if (v28 >= 2)
      {
        v85 = *v96;
        do
        {
          v86 = v28 - 2;
          if (v28 < 2)
            goto LABEL_137;
          if (!v85)
            goto LABEL_151;
          v87 = v15;
          v88 = v15 + 32;
          v89 = *(_QWORD *)&v15[16 * v86 + 32];
          v90 = *(_QWORD *)&v15[16 * v28 + 24];
          specialized _merge<A>(low:mid:high:buffer:by:)((char *)(v85 + 4 * v89), (char *)(v85 + 4 * *(_QWORD *)&v88[16 * v28 - 16]), v85 + 4 * v90, __dst, a2);
          if (v2)
            goto LABEL_106;
          if (v90 < v89)
            goto LABEL_138;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v87 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v87);
          if (v86 >= *((_QWORD *)v87 + 2))
            goto LABEL_139;
          v91 = v87;
          v92 = v87 + 32;
          v93 = &v87[16 * v86 + 32];
          *(_QWORD *)v93 = v89;
          *((_QWORD *)v93 + 1) = v90;
          v94 = *((_QWORD *)v87 + 2);
          if (v28 > v94)
            goto LABEL_140;
          v15 = v91;
          memmove(&v92[16 * v28 - 16], &v92[16 * v28], 16 * (v94 - v28));
          *((_QWORD *)v15 + 2) = v94 - 1;
          v28 = v94 - 1;
        }
        while (v94 > 2);
      }
      swift_bridgeObjectRelease();
      *(_QWORD *)(v100 + 16) = 0;
      return swift_bridgeObjectRelease();
    }
  }
  else
  {
    v7 = v6 >> 1;
    v8 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(_QWORD *)(v8 + 16) = v7;
    v100 = v8;
    __dst = (char *)(v8 + 32);
  }
  v16 = 0;
  v17 = *a1;
  v97 = *a1 + 8;
  v95 = *a1 - 4;
  v15 = (char *)MEMORY[0x24BEE4AF8];
  v102 = *a1;
  v98 = v4;
  while (1)
  {
    v18 = v16++;
    if (v16 < v4)
    {
      v19 = a2(*(unsigned int *)(v17 + 4 * v16), *(unsigned int *)(v17 + 4 * v18));
      if (v2)
      {
LABEL_106:
        swift_bridgeObjectRelease();
        *(_QWORD *)(v100 + 16) = 0;
        return swift_bridgeObjectRelease();
      }
      v20 = v19;
      v16 = v18 + 2;
      if (v18 + 2 < v4)
      {
        v21 = (unsigned int *)(v97 + 4 * v18);
        while (((v20 ^ a2(*v21, *(v21 - 1))) & 1) == 0)
        {
          ++v21;
          if (v4 == ++v16)
          {
            v16 = v4;
            break;
          }
        }
      }
      v17 = v102;
      if ((v20 & 1) != 0)
      {
        if (v16 < v18)
          goto LABEL_146;
        if (v18 < v16)
        {
          v22 = v16 - 1;
          v23 = v18;
          do
          {
            if (v23 != v22)
            {
              if (!v102)
                goto LABEL_150;
              v24 = *(_DWORD *)(v102 + 4 * v23);
              *(_DWORD *)(v102 + 4 * v23) = *(_DWORD *)(v102 + 4 * v22);
              *(_DWORD *)(v102 + 4 * v22) = v24;
            }
            v59 = ++v23 < v22--;
          }
          while (v59);
        }
      }
    }
    if (v16 >= v4)
      goto LABEL_45;
    if (__OFSUB__(v16, v18))
      goto LABEL_143;
    if (v16 - v18 >= v99)
      goto LABEL_45;
    if (__OFADD__(v18, v99))
      goto LABEL_144;
    v25 = v18 + v99 >= v4 ? v4 : v18 + v99;
    if (v25 < v18)
      break;
    if (v16 != v25)
    {
      v78 = (unsigned int *)(v95 + 4 * v16);
      do
      {
        v79 = *(unsigned int *)(v17 + 4 * v16);
        v80 = v18;
        v81 = v78;
        while (1)
        {
          v82 = a2(v79, *v81);
          if (v2)
            goto LABEL_106;
          if ((v82 & 1) == 0)
            break;
          v17 = v102;
          if (!v102)
            goto LABEL_149;
          v83 = *v81;
          v79 = v81[1];
          *v81 = v79;
          v81[1] = v83;
          --v81;
          if (v16 == ++v80)
            goto LABEL_103;
        }
        v17 = v102;
LABEL_103:
        ++v16;
        ++v78;
      }
      while (v16 != v25);
      v16 = v25;
      if (v25 < v18)
        goto LABEL_141;
      goto LABEL_46;
    }
LABEL_45:
    if (v16 < v18)
      goto LABEL_141;
LABEL_46:
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v15 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v15 + 2) + 1, 1, v15);
    v27 = *((_QWORD *)v15 + 2);
    v26 = *((_QWORD *)v15 + 3);
    v28 = v27 + 1;
    v17 = v102;
    if (v27 >= v26 >> 1)
    {
      v84 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v26 > 1), v27 + 1, 1, v15);
      v17 = v102;
      v15 = v84;
    }
    *((_QWORD *)v15 + 2) = v28;
    v29 = v15 + 32;
    v30 = &v15[16 * v27 + 32];
    *(_QWORD *)v30 = v18;
    *((_QWORD *)v30 + 1) = v16;
    if (v27)
    {
      while (1)
      {
        v31 = v28 - 1;
        if (v28 >= 4)
        {
          v36 = &v29[16 * v28];
          v37 = *((_QWORD *)v36 - 8);
          v38 = *((_QWORD *)v36 - 7);
          v42 = __OFSUB__(v38, v37);
          v39 = v38 - v37;
          if (v42)
            goto LABEL_126;
          v41 = *((_QWORD *)v36 - 6);
          v40 = *((_QWORD *)v36 - 5);
          v42 = __OFSUB__(v40, v41);
          v34 = v40 - v41;
          v35 = v42;
          if (v42)
            goto LABEL_127;
          v43 = v28 - 2;
          v44 = &v29[16 * v28 - 32];
          v46 = *(_QWORD *)v44;
          v45 = *((_QWORD *)v44 + 1);
          v42 = __OFSUB__(v45, v46);
          v47 = v45 - v46;
          if (v42)
            goto LABEL_129;
          v42 = __OFADD__(v34, v47);
          v48 = v34 + v47;
          if (v42)
            goto LABEL_132;
          if (v48 >= v39)
          {
            v66 = &v29[16 * v31];
            v68 = *(_QWORD *)v66;
            v67 = *((_QWORD *)v66 + 1);
            v42 = __OFSUB__(v67, v68);
            v69 = v67 - v68;
            if (v42)
              goto LABEL_136;
            v59 = v34 < v69;
            goto LABEL_82;
          }
        }
        else
        {
          if (v28 != 3)
          {
            v60 = *((_QWORD *)v15 + 4);
            v61 = *((_QWORD *)v15 + 5);
            v42 = __OFSUB__(v61, v60);
            v53 = v61 - v60;
            v54 = v42;
            goto LABEL_76;
          }
          v33 = *((_QWORD *)v15 + 4);
          v32 = *((_QWORD *)v15 + 5);
          v42 = __OFSUB__(v32, v33);
          v34 = v32 - v33;
          v35 = v42;
        }
        if ((v35 & 1) != 0)
          goto LABEL_128;
        v43 = v28 - 2;
        v49 = &v29[16 * v28 - 32];
        v51 = *(_QWORD *)v49;
        v50 = *((_QWORD *)v49 + 1);
        v52 = __OFSUB__(v50, v51);
        v53 = v50 - v51;
        v54 = v52;
        if (v52)
          goto LABEL_131;
        v55 = &v29[16 * v31];
        v57 = *(_QWORD *)v55;
        v56 = *((_QWORD *)v55 + 1);
        v42 = __OFSUB__(v56, v57);
        v58 = v56 - v57;
        if (v42)
          goto LABEL_134;
        if (__OFADD__(v53, v58))
          goto LABEL_135;
        if (v53 + v58 >= v34)
        {
          v59 = v34 < v58;
LABEL_82:
          if (v59)
            v31 = v43;
          goto LABEL_84;
        }
LABEL_76:
        if ((v54 & 1) != 0)
          goto LABEL_130;
        v62 = &v29[16 * v31];
        v64 = *(_QWORD *)v62;
        v63 = *((_QWORD *)v62 + 1);
        v42 = __OFSUB__(v63, v64);
        v65 = v63 - v64;
        if (v42)
          goto LABEL_133;
        if (v65 < v53)
          goto LABEL_93;
LABEL_84:
        v70 = v31 - 1;
        if (v31 - 1 >= v28)
        {
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
LABEL_142:
          __break(1u);
LABEL_143:
          __break(1u);
LABEL_144:
          __break(1u);
          goto LABEL_145;
        }
        if (!v17)
          goto LABEL_148;
        v71 = v16;
        v72 = v15;
        v73 = &v29[16 * v70];
        v74 = *(_QWORD *)v73;
        v75 = &v29[16 * v31];
        v76 = *((_QWORD *)v75 + 1);
        specialized _merge<A>(low:mid:high:buffer:by:)((char *)(v17 + 4 * *(_QWORD *)v73), (char *)(v17 + 4 * *(_QWORD *)v75), v17 + 4 * v76, __dst, a2);
        if (v2)
          goto LABEL_106;
        if (v76 < v74)
          goto LABEL_123;
        if (v31 > *((_QWORD *)v72 + 2))
          goto LABEL_124;
        *(_QWORD *)v73 = v74;
        *(_QWORD *)&v29[16 * v70 + 8] = v76;
        v77 = *((_QWORD *)v72 + 2);
        if (v31 >= v77)
          goto LABEL_125;
        v15 = v72;
        v28 = v77 - 1;
        memmove(&v29[16 * v31], v75 + 16, 16 * (v77 - 1 - v31));
        *((_QWORD *)v72 + 2) = v77 - 1;
        v17 = v102;
        v16 = v71;
        if (v77 <= 2)
          goto LABEL_93;
      }
    }
    v28 = 1;
LABEL_93:
    v4 = v98;
    if (v16 >= v98)
      goto LABEL_108;
  }
LABEL_145:
  __break(1u);
LABEL_146:
  __break(1u);
LABEL_147:
  __break(1u);
LABEL_148:
  __break(1u);
LABEL_149:
  __break(1u);
LABEL_150:
  __break(1u);
LABEL_151:
  __break(1u);
LABEL_152:
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

Swift::Int specialized MutableCollection<>.sort(by:)(char **a1, uint64_t (*a2)(Swift::Int, _QWORD))
{
  char *v4;
  uint64_t v5;
  Swift::Int result;
  uint64_t v7[2];

  v4 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v4 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v4);
  v5 = *((_QWORD *)v4 + 2);
  v7[0] = (uint64_t)(v4 + 32);
  v7[1] = v5;
  result = specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(v7, a2);
  *a1 = v4;
  return result;
}

uint64_t specialized _ArrayBufferProtocol.init(copying:)(uint64_t result, uint64_t a2, unint64_t a3)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;

  v3 = a3 >> 1;
  v4 = (a3 >> 1) - a2;
  if (__OFSUB__(a3 >> 1, a2))
    goto LABEL_13;
  v6 = result;
  if (!v4)
  {
    v7 = (_QWORD *)MEMORY[0x24BEE4AF8];
    if (v3 >= a2)
      goto LABEL_6;
    goto LABEL_12;
  }
  type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<UInt32>, MEMORY[0x24BEE44F0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
  v7 = (_QWORD *)swift_allocObject();
  result = _swift_stdlib_malloc_size(v7);
  v8 = result - 32;
  if (result < 32)
    v8 = result - 29;
  v7[2] = v4;
  v7[3] = 2 * (v8 >> 2);
  if (v3 < a2)
  {
LABEL_12:
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
LABEL_6:
  result = (uint64_t)memcpy(v7 + 4, (const void *)(v6 + 4 * a2), 4 * v4);
  if (__OFSUB__(0, a2))
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v9 = v7[2];
  v10 = __OFADD__(a2, v9);
  v11 = a2 + v9;
  if (v10)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  if (v11 < a2)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  if ((v11 & 0x8000000000000000) == 0)
    return (uint64_t)v7;
LABEL_17:
  __break(1u);
  return result;
}

uint64_t specialized DynamicContainer.ItemInfo.for<A>(_:)()
{
  uint64_t v0;

  return v0;
}

void specialized DynamicContainer._ItemInfo.init(subgraph:uniqueId:viewCount:phase:needsTransitions:outputs:)()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

uint64_t type metadata accessor for DynamicContainerInfo(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for DynamicContainerInfo);
}

uint64_t _s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA12StatefulRuleRd__lufcADSPyqd__GXEfU_TA_3@<X0>(_DWORD *a1@<X8>)
{
  return closure #1 in Attribute.init<A>(_:)(a1);
}

unint64_t lazy protocol witness table accessor for type DynamicContainerID and conformance DynamicContainerID()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type DynamicContainerID and conformance DynamicContainerID;
  if (!lazy protocol witness table cache variable for type DynamicContainerID and conformance DynamicContainerID)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for DynamicContainerID, &type metadata for DynamicContainerID);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DynamicContainerID and conformance DynamicContainerID);
  }
  return result;
}

uint64_t dispatch thunk of DynamicContainerItem.count.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of DynamicContainerItem.needsTransitions.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of DynamicContainerItem.zIndex.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of DynamicContainerItem.matchesIdentity(of:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 32))();
}

uint64_t dispatch thunk of static DynamicContainerItem.supportsReuse.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t dispatch thunk of DynamicContainerItem.canBeReused(by:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 48))();
}

uint64_t dispatch thunk of DynamicContainerItem.list.getter(uint64_t a1, uint64_t a2)
{
  unint64_t v2;

  v2 = (*(uint64_t (**)(void))(a2 + 56))();
  return v2 | ((HIDWORD(v2) & 1) << 32);
}

uint64_t dispatch thunk of DynamicContainerItem.viewID.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 64))();
}

ValueMetadata *type metadata accessor for DynamicContainerID()
{
  return &type metadata for DynamicContainerID;
}

ValueMetadata *type metadata accessor for DynamicContainer()
{
  return &type metadata for DynamicContainer;
}

uint64_t initializeWithCopy for DynamicContainer.Info(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for DynamicContainer.Info(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  return a1;
}

uint64_t assignWithTake for DynamicContainer.Info(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  return a1;
}

ValueMetadata *type metadata accessor for DynamicContainer.Info()
{
  return &type metadata for DynamicContainer.Info;
}

uint64_t type metadata accessor for DynamicContainer.ItemInfo()
{
  return objc_opt_self();
}

uint64_t method lookup function for DynamicContainer.ItemInfo()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of DynamicContainer.ItemInfo.__allocating_init(subgraph:uniqueId:viewCount:phase:needsTransitions:outputs:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 168))();
}

uint64_t dispatch thunk of DynamicContainer.ItemInfo.list.getter()
{
  uint64_t v0;
  unint64_t v1;

  v1 = (*(uint64_t (**)(void))(*(_QWORD *)v0 + 176))();
  return v1 | ((HIDWORD(v1) & 1) << 32);
}

uint64_t dispatch thunk of DynamicContainer.ItemInfo.id.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 184))();
}

uint64_t type metadata completion function for DynamicContainer._ItemInfo()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = swift_getAssociatedTypeWitness();
  if (v1 <= 0x3F)
  {
    result = swift_getAssociatedTypeWitness();
    if (v2 <= 0x3F)
    {
      result = swift_initClassMetadata2();
      if (!result)
        return 0;
    }
  }
  return result;
}

uint64_t type metadata accessor for DynamicContainer._ItemInfo(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for DynamicContainer._ItemInfo);
}

uint64_t method lookup function for DynamicContainer._ItemInfo()
{
  return swift_lookUpClassMethod();
}

uint64_t type metadata accessor for DynamicAnimationListener()
{
  return objc_opt_self();
}

ValueMetadata *type metadata accessor for DynamicContainer.AttachCombinerVisitor()
{
  return &type metadata for DynamicContainer.AttachCombinerVisitor;
}

ValueMetadata *type metadata accessor for DynamicContainer.AddCombinerVisitor()
{
  return &type metadata for DynamicContainer.AddCombinerVisitor;
}

uint64_t type metadata completion function for DynamicContainerInfo()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

_QWORD *initializeBufferWithCopyOfBuffer for DynamicContainerInfo(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  void **v15;
  void *v16;
  unint64_t v17;
  unint64_t v18;
  _DWORD *v19;
  _DWORD *v20;
  unint64_t v21;
  unint64_t v22;
  id v23;
  uint64_t v24;

  v3 = a1;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 80);
  v6 = v5 <= 7 && (*(_DWORD *)(v4 + 80) & 0x100000) == 0;
  if (v6
    && (v7 = *(_QWORD *)(v4 + 64) + 7,
        ((((((((((((v7 + ((v5 + 4) & ~v5)) & 0xFFFFFFFFFFFFFFF8) + 91) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)
            + 15) & 0xFFFFFFFFFFFFFFF8)
          + 51) & 0xFFFFFFFFFFFFFFF8)
        + 11) & 0xFFFFFFFFFFFFFFF8 | 5) <= 0x18))
  {
    *a1 = *a2;
    v8 = ((unint64_t)a1 + v5 + 4) & ~v5;
    v9 = ((unint64_t)a2 + v5 + 4) & ~v5;
    (*(void (**)(uint64_t, uint64_t))(v4 + 16))(v8, v9);
    v10 = (v7 + v8) & 0xFFFFFFFFFFFFFFF8;
    v11 = (v7 + v9) & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)v10 = *(_QWORD *)v11;
    *(_DWORD *)(v10 + 8) = *(_DWORD *)(v11 + 8);
    *(_QWORD *)(v10 + 16) = *(_QWORD *)(v11 + 16);
    *(_DWORD *)(v10 + 24) = *(_DWORD *)(v11 + 24);
    *(_DWORD *)(v10 + 28) = *(_DWORD *)(v11 + 28);
    *(_DWORD *)(v10 + 32) = *(_DWORD *)(v11 + 32);
    *(_DWORD *)(v10 + 36) = *(_DWORD *)(v11 + 36);
    *(_QWORD *)(v10 + 40) = *(_QWORD *)(v11 + 40);
    *(_QWORD *)(v10 + 48) = *(_QWORD *)(v11 + 48);
    *(_DWORD *)(v10 + 56) = *(_DWORD *)(v11 + 56);
    *(_DWORD *)(v10 + 60) = *(_DWORD *)(v11 + 60);
    *(_DWORD *)(v10 + 64) = *(_DWORD *)(v11 + 64);
    *(_DWORD *)(v10 + 68) = *(_DWORD *)(v11 + 68);
    *(_DWORD *)(v10 + 72) = *(_DWORD *)(v11 + 72);
    *(_DWORD *)(v10 + 76) = *(_DWORD *)(v11 + 76);
    *(_DWORD *)(v10 + 80) = *(_DWORD *)(v11 + 80);
    v12 = (v10 + 91) & 0xFFFFFFFFFFFFFFF8;
    v13 = (v11 + 91) & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)v12 = *(_QWORD *)v13;
    *(_DWORD *)(v12 + 8) = *(_DWORD *)(v13 + 8);
    *(_DWORD *)(v12 + 12) = *(_DWORD *)(v13 + 12);
    v14 = (_QWORD *)((v12 + 23) & 0xFFFFFFFFFFFFF8);
    v15 = (void **)((v13 + 23) & 0xFFFFFFFFFFFFF8);
    v16 = *v15;
    *v14 = *v15;
    v17 = ((unint64_t)v14 + 15) & 0xFFFFFFFFFFFFFFF8;
    v18 = ((unint64_t)v15 + 15) & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)v17 = *(_QWORD *)v18;
    *(_QWORD *)(v17 + 8) = *(_QWORD *)(v18 + 8);
    *(_QWORD *)(v17 + 16) = *(_QWORD *)(v18 + 16);
    *(_QWORD *)(v17 + 24) = *(_QWORD *)(v18 + 24);
    *(_QWORD *)(v17 + 32) = *(_QWORD *)(v18 + 32);
    *(_BYTE *)(v17 + 40) = *(_BYTE *)(v18 + 40);
    *(_DWORD *)(v17 + 44) = *(_DWORD *)(v18 + 44);
    v19 = (_DWORD *)((v18 + 51) & 0xFFFFFFFFFFFFFFF8);
    v20 = (_DWORD *)((v17 + 51) & 0xFFFFFFFFFFFFFFF8);
    *v20 = *v19;
    v20[1] = v19[1];
    v21 = ((unint64_t)v20 + 11) & 0xFFFFFFFFFFFFFFF8;
    v22 = ((unint64_t)v19 + 11) & 0xFFFFFFFFFFFFFFF8;
    *(_DWORD *)v21 = *(_DWORD *)v22;
    *(_BYTE *)(v21 + 4) = *(_BYTE *)(v22 + 4);
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v23 = v16;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v24 = *(_QWORD *)a2;
    *v3 = *(_QWORD *)a2;
    v3 = (_QWORD *)(v24 + ((v5 & 0xF8 ^ 0x1F8) & (v5 + 16)));
    swift_retain();
  }
  return v3;
}

uint64_t destroy for DynamicContainerInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  v3 = (a1 + *(unsigned __int8 *)(v2 + 80) + 4) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  (*(void (**)(unint64_t))(v2 + 8))(v3);
  v4 = (*(_QWORD *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

_DWORD *initializeWithCopy for DynamicContainerInfo(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  void **v14;
  void *v15;
  unint64_t v16;
  unint64_t v17;
  _DWORD *v18;
  unint64_t v19;
  _DWORD *v20;
  unint64_t v21;
  id v22;

  *a1 = *a2;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(unsigned __int8 *)(v4 + 80);
  v6 = ((unint64_t)a1 + v5 + 4) & ~v5;
  v7 = ((unint64_t)a2 + v5 + 4) & ~v5;
  (*(void (**)(uint64_t, uint64_t))(v4 + 16))(v6, v7);
  v8 = *(_QWORD *)(v4 + 64) + 7;
  v9 = (v8 + v6) & 0xFFFFFFFFFFFFFFF8;
  v10 = (v8 + v7) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v9 = *(_QWORD *)v10;
  *(_DWORD *)(v9 + 8) = *(_DWORD *)(v10 + 8);
  *(_QWORD *)(v9 + 16) = *(_QWORD *)(v10 + 16);
  *(_DWORD *)(v9 + 24) = *(_DWORD *)(v10 + 24);
  *(_DWORD *)(v9 + 28) = *(_DWORD *)(v10 + 28);
  *(_DWORD *)(v9 + 32) = *(_DWORD *)(v10 + 32);
  *(_DWORD *)(v9 + 36) = *(_DWORD *)(v10 + 36);
  *(_QWORD *)(v9 + 40) = *(_QWORD *)(v10 + 40);
  *(_QWORD *)(v9 + 48) = *(_QWORD *)(v10 + 48);
  *(_DWORD *)(v9 + 56) = *(_DWORD *)(v10 + 56);
  *(_DWORD *)(v9 + 60) = *(_DWORD *)(v10 + 60);
  *(_DWORD *)(v9 + 64) = *(_DWORD *)(v10 + 64);
  *(_DWORD *)(v9 + 68) = *(_DWORD *)(v10 + 68);
  *(_DWORD *)(v9 + 72) = *(_DWORD *)(v10 + 72);
  *(_DWORD *)(v9 + 76) = *(_DWORD *)(v10 + 76);
  *(_DWORD *)(v9 + 80) = *(_DWORD *)(v10 + 80);
  v11 = (v9 + 91) & 0xFFFFFFFFFFFFFFF8;
  v12 = (v10 + 91) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v11 = *(_QWORD *)v12;
  *(_DWORD *)(v11 + 8) = *(_DWORD *)(v12 + 8);
  *(_DWORD *)(v11 + 12) = *(_DWORD *)(v12 + 12);
  v13 = (_QWORD *)((v11 + 23) & 0xFFFFFFFFFFFFF8);
  v14 = (void **)((v12 + 23) & 0xFFFFFFFFFFFFF8);
  v15 = *v14;
  *v13 = *v14;
  v16 = ((unint64_t)v13 + 15) & 0xFFFFFFFFFFFFFFF8;
  v17 = ((unint64_t)v14 + 15) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v16 = *(_QWORD *)v17;
  *(_QWORD *)(v16 + 8) = *(_QWORD *)(v17 + 8);
  *(_QWORD *)(v16 + 16) = *(_QWORD *)(v17 + 16);
  *(_QWORD *)(v16 + 24) = *(_QWORD *)(v17 + 24);
  *(_QWORD *)(v16 + 32) = *(_QWORD *)(v17 + 32);
  *(_BYTE *)(v16 + 40) = *(_BYTE *)(v17 + 40);
  *(_DWORD *)(v16 + 44) = *(_DWORD *)(v17 + 44);
  v18 = (_DWORD *)((v17 + 51) & 0xFFFFFFFFFFFFFFF8);
  v19 = (unint64_t)v18 + 11;
  v20 = (_DWORD *)((v16 + 51) & 0xFFFFFFFFFFFFFFF8);
  *v20 = *v18;
  v20[1] = v18[1];
  v21 = ((unint64_t)v20 + 11) & 0xFFFFFFFFFFFFFFF8;
  *(_DWORD *)v21 = *(_DWORD *)(v19 & 0xFFFFFFFFFFFFFFF8);
  *(_BYTE *)(v21 + 4) = *(_BYTE *)((v19 & 0xFFFFFFFFFFFFFFF8) + 4);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v22 = v15;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_DWORD *assignWithCopy for DynamicContainerInfo(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  void **v13;
  void **v14;
  void *v15;
  void *v16;
  id v17;
  unint64_t v18;
  unint64_t v19;
  _DWORD *v20;
  _DWORD *v21;
  unint64_t v22;
  unint64_t v23;

  *a1 = *a2;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(unsigned __int8 *)(v4 + 80);
  v6 = ((unint64_t)a1 + v5 + 4) & ~v5;
  v7 = ((unint64_t)a2 + v5 + 4) & ~v5;
  (*(void (**)(uint64_t, uint64_t))(v4 + 24))(v6, v7);
  v8 = *(_QWORD *)(v4 + 64) + 7;
  v9 = (v8 + v6) & 0xFFFFFFFFFFFFFFF8;
  v10 = (v8 + v7) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v9 = *(_QWORD *)v10;
  swift_retain();
  swift_release();
  *(_DWORD *)(v9 + 8) = *(_DWORD *)(v10 + 8);
  *(_QWORD *)(v9 + 16) = *(_QWORD *)(v10 + 16);
  swift_retain();
  swift_release();
  *(_DWORD *)(v9 + 24) = *(_DWORD *)(v10 + 24);
  *(_DWORD *)(v9 + 28) = *(_DWORD *)(v10 + 28);
  *(_DWORD *)(v9 + 32) = *(_DWORD *)(v10 + 32);
  *(_DWORD *)(v9 + 36) = *(_DWORD *)(v10 + 36);
  *(_QWORD *)(v9 + 40) = *(_QWORD *)(v10 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v9 + 48) = *(_QWORD *)(v10 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(v9 + 56) = *(_DWORD *)(v10 + 56);
  *(_DWORD *)(v9 + 60) = *(_DWORD *)(v10 + 60);
  *(_DWORD *)(v9 + 64) = *(_DWORD *)(v10 + 64);
  *(_DWORD *)(v9 + 68) = *(_DWORD *)(v10 + 68);
  *(_DWORD *)(v9 + 72) = *(_DWORD *)(v10 + 72);
  *(_DWORD *)(v9 + 76) = *(_DWORD *)(v10 + 76);
  *(_DWORD *)(v9 + 80) = *(_DWORD *)(v10 + 80);
  v11 = (v9 + 91) & 0xFFFFFFFFFFFFFFF8;
  v12 = (v10 + 91) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v11 = *(_QWORD *)v12;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(v11 + 8) = *(_DWORD *)(v12 + 8);
  *(_DWORD *)(v11 + 12) = *(_DWORD *)(v12 + 12);
  v13 = (void **)((v11 + 23) & 0xFFFFFFFFFFFFFFF8);
  v14 = (void **)((v12 + 23) & 0xFFFFFFFFFFFFF8);
  v15 = *v14;
  v16 = *v13;
  *v13 = *v14;
  v17 = v15;

  v18 = ((unint64_t)v13 + 15) & 0xFFFFFFFFFFFFFFF8;
  v19 = ((unint64_t)v14 + 15) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v18 = *(_QWORD *)v19;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v18 + 8) = *(_QWORD *)(v19 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v18 + 16) = *(_QWORD *)(v19 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v18 + 24) = *(_QWORD *)(v19 + 24);
  *(_QWORD *)(v18 + 32) = *(_QWORD *)(v19 + 32);
  *(_BYTE *)(v18 + 40) = *(_BYTE *)(v19 + 40);
  *(_DWORD *)(v18 + 44) = *(_DWORD *)(v19 + 44);
  v20 = (_DWORD *)((v19 + 51) & 0xFFFFFFFFFFFFFFF8);
  v21 = (_DWORD *)((v18 + 51) & 0xFFFFFFFFFFFFFFF8);
  *v21 = *v20;
  v21[1] = v20[1];
  v22 = ((unint64_t)v21 + 11) & 0xFFFFFFFFFFFFFFF8;
  v23 = ((unint64_t)v20 + 11) & 0xFFFFFFFFFFFFFFF8;
  *(_DWORD *)v22 = *(_DWORD *)v23;
  *(_BYTE *)(v22 + 4) = *(_BYTE *)(v23 + 4);
  return a1;
}

_DWORD *initializeWithTake for DynamicContainerInfo(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _OWORD *v15;
  _OWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _OWORD *v19;
  __int128 *v20;
  __int128 v21;
  __int128 v22;
  _DWORD *v23;
  _DWORD *v24;
  unint64_t v25;
  unint64_t v26;

  *a1 = *a2;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(unsigned __int8 *)(v4 + 80);
  v6 = ((unint64_t)a1 + v5 + 4) & ~v5;
  v7 = ((unint64_t)a2 + v5 + 4) & ~v5;
  (*(void (**)(uint64_t, uint64_t))(v4 + 32))(v6, v7);
  v8 = *(_QWORD *)(v4 + 64) + 7;
  v9 = (v8 + v6) & 0xFFFFFFFFFFFFFFF8;
  v10 = (v8 + v7) & 0xFFFFFFFFFFFFFFF8;
  v11 = *(_OWORD *)(v10 + 16);
  *(_OWORD *)v9 = *(_OWORD *)v10;
  *(_OWORD *)(v9 + 16) = v11;
  v13 = *(_OWORD *)(v10 + 48);
  v12 = *(_OWORD *)(v10 + 64);
  v14 = *(_OWORD *)(v10 + 32);
  *(_DWORD *)(v9 + 80) = *(_DWORD *)(v10 + 80);
  *(_OWORD *)(v9 + 48) = v13;
  *(_OWORD *)(v9 + 64) = v12;
  *(_OWORD *)(v9 + 32) = v14;
  v15 = (_OWORD *)((v9 + 91) & 0xFFFFFFFFFFFFFFF8);
  v16 = (_OWORD *)((v10 + 91) & 0xFFFFFFFFFFFFFFF8);
  *v15 = *v16;
  v17 = (_QWORD *)(((unint64_t)v16 + 23) & 0xFFFFFFFFFFFFF8);
  v18 = (_QWORD *)(((unint64_t)v15 + 23) & 0xFFFFFFFFFFFFF8);
  *v18 = *v17;
  v19 = (_OWORD *)(((unint64_t)v18 + 15) & 0xFFFFFFFFFFFFFFF8);
  v20 = (__int128 *)(((unint64_t)v17 + 15) & 0xFFFFFFFFFFFFFFF8);
  v21 = *v20;
  v22 = v20[2];
  v19[1] = v20[1];
  v19[2] = v22;
  *v19 = v21;
  v23 = (_DWORD *)(((unint64_t)v19 + 51) & 0xFFFFFFFFFFFFFFF8);
  v24 = (_DWORD *)(((unint64_t)v20 + 51) & 0xFFFFFFFFFFFFFFF8);
  v25 = (unint64_t)v24 + 11;
  *v23 = *v24;
  v23[1] = v24[1];
  v26 = ((unint64_t)v23 + 11) & 0xFFFFFFFFFFFFFFF8;
  *(_DWORD *)v26 = *(_DWORD *)(v25 & 0xFFFFFFFFFFFFFFF8);
  *(_BYTE *)(v26 + 4) = *(_BYTE *)((v25 & 0xFFFFFFFFFFFFFFF8) + 4);
  return a1;
}

_DWORD *assignWithTake for DynamicContainerInfo(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  void **v13;
  void **v14;
  void *v15;
  unint64_t v16;
  unint64_t v17;
  _DWORD *v18;
  _DWORD *v19;
  unint64_t v20;
  unint64_t v21;

  *a1 = *a2;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(unsigned __int8 *)(v4 + 80);
  v6 = ((unint64_t)a1 + v5 + 4) & ~v5;
  v7 = ((unint64_t)a2 + v5 + 4) & ~v5;
  (*(void (**)(uint64_t, uint64_t))(v4 + 40))(v6, v7);
  v8 = *(_QWORD *)(v4 + 64) + 7;
  v9 = (v8 + v6) & 0xFFFFFFFFFFFFFFF8;
  v10 = (v8 + v7) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v9 = *(_QWORD *)v10;
  swift_release();
  *(_DWORD *)(v9 + 8) = *(_DWORD *)(v10 + 8);
  *(_QWORD *)(v9 + 16) = *(_QWORD *)(v10 + 16);
  swift_release();
  *(_DWORD *)(v9 + 24) = *(_DWORD *)(v10 + 24);
  *(_DWORD *)(v9 + 28) = *(_DWORD *)(v10 + 28);
  *(_DWORD *)(v9 + 32) = *(_DWORD *)(v10 + 32);
  *(_DWORD *)(v9 + 36) = *(_DWORD *)(v10 + 36);
  *(_QWORD *)(v9 + 40) = *(_QWORD *)(v10 + 40);
  swift_bridgeObjectRelease();
  *(_QWORD *)(v9 + 48) = *(_QWORD *)(v10 + 48);
  swift_bridgeObjectRelease();
  *(_DWORD *)(v9 + 56) = *(_DWORD *)(v10 + 56);
  *(_DWORD *)(v9 + 60) = *(_DWORD *)(v10 + 60);
  *(_DWORD *)(v9 + 64) = *(_DWORD *)(v10 + 64);
  *(_DWORD *)(v9 + 68) = *(_DWORD *)(v10 + 68);
  *(_DWORD *)(v9 + 72) = *(_DWORD *)(v10 + 72);
  *(_DWORD *)(v9 + 76) = *(_DWORD *)(v10 + 76);
  *(_DWORD *)(v9 + 80) = *(_DWORD *)(v10 + 80);
  v11 = (v9 + 91) & 0xFFFFFFFFFFFFFFF8;
  v12 = (v10 + 91) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v11 = *(_QWORD *)v12;
  swift_bridgeObjectRelease();
  *(_DWORD *)(v11 + 8) = *(_DWORD *)(v12 + 8);
  *(_DWORD *)(v11 + 12) = *(_DWORD *)(v12 + 12);
  v13 = (void **)((v11 + 23) & 0xFFFFFFFFFFFFFFF8);
  v14 = (void **)((v12 + 23) & 0xFFFFFFFFFFFFF8);
  v15 = *v13;
  *v13 = *v14;

  v16 = ((unint64_t)v13 + 15) & 0xFFFFFFFFFFFFFFF8;
  v17 = ((unint64_t)v14 + 15) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v16 = *(_QWORD *)v17;
  swift_bridgeObjectRelease();
  *(_QWORD *)(v16 + 8) = *(_QWORD *)(v17 + 8);
  swift_bridgeObjectRelease();
  *(_QWORD *)(v16 + 16) = *(_QWORD *)(v17 + 16);
  swift_bridgeObjectRelease();
  *(_QWORD *)(v16 + 24) = *(_QWORD *)(v17 + 24);
  *(_QWORD *)(v16 + 32) = *(_QWORD *)(v17 + 32);
  *(_BYTE *)(v16 + 40) = *(_BYTE *)(v17 + 40);
  *(_DWORD *)(v16 + 44) = *(_DWORD *)(v17 + 44);
  v18 = (_DWORD *)((v17 + 51) & 0xFFFFFFFFFFFFFFF8);
  v19 = (_DWORD *)((v16 + 51) & 0xFFFFFFFFFFFFFFF8);
  *v19 = *v18;
  v19[1] = v18[1];
  v20 = ((unint64_t)v19 + 11) & 0xFFFFFFFFFFFFFFF8;
  v21 = ((unint64_t)v18 + 11) & 0xFFFFFFFFFFFFFFF8;
  *(_DWORD *)v20 = *(_DWORD *)v21;
  *(_BYTE *)(v20 + 4) = *(_BYTE *)(v21 + 4);
  return a1;
}

uint64_t getEnumTagSinglePayload for DynamicContainerInfo(_DWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  unint64_t v11;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(unsigned __int8 *)(v4 + 80);
  v8 = *(_QWORD *)(v4 + 64) + 7;
  if (v6 < a2
    && *((_BYTE *)a1
       + ((((((((((((v8 + ((v7 + 4) & ~v7)) & 0xFFFFFFFFFFFFFFF8) + 91) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)
             + 15) & 0xFFFFFFFFFFFFFFF8)
           + 51) & 0xFFFFFFFFFFFFFFF8)
         + 11) & 0xFFFFFFFFFFFFFFF8 | 5)))
  {
    return v6 + *a1 + 1;
  }
  v10 = ((unint64_t)a1 + v7 + 4) & ~v7;
  if (v5 >= 0x7FFFFFFF)
    return (*(uint64_t (**)(uint64_t))(v4 + 48))(v10);
  v11 = *(_QWORD *)(((v8 + v10) & 0xFFFFFFFFFFFFF8) + 0x10);
  if (v11 >= 0xFFFFFFFF)
    LODWORD(v11) = -1;
  return (v11 + 1);
}

double storeEnumTagSinglePayload for DynamicContainerInfo(_BYTE *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int v12;
  double result;
  unint64_t v14;
  unint64_t v15;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFF)
    v8 = 0x7FFFFFFF;
  else
    v8 = *(_DWORD *)(v6 + 84);
  v9 = *(unsigned __int8 *)(v6 + 80);
  v10 = *(_QWORD *)(v6 + 64) + 7;
  v11 = (((((((((((v10 + ((v9 + 4) & ~v9)) & 0xFFFFFFFFFFFFFFF8) + 91) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)
           + 15) & 0xFFFFFFFFFFFFFFF8)
         + 51) & 0xFFFFFFFFFFFFFFF8)
       + 11) & 0xFFFFFFFFFFFFFFF8 | 5;
  if (v8 >= a2)
  {
    if (v8 < a3)
      a1[v11] = 0;
    if (a2)
    {
      v14 = (unint64_t)&a1[v9 + 4] & ~v9;
      if (v7 < 0x7FFFFFFF)
      {
        v15 = (v10 + v14) & 0xFFFFFFFFFFFFFFF8;
        if ((a2 & 0x80000000) != 0)
        {
          *(_QWORD *)(v15 + 72) = 0;
          result = 0.0;
          *(_OWORD *)(v15 + 56) = 0u;
          *(_OWORD *)(v15 + 40) = 0u;
          *(_OWORD *)(v15 + 24) = 0u;
          *(_OWORD *)(v15 + 8) = 0u;
          *(_DWORD *)(v15 + 80) = 0;
          *(_QWORD *)v15 = a2 ^ 0x80000000;
        }
        else
        {
          *(_QWORD *)(v15 + 16) = a2 - 1;
        }
      }
      else
      {
        (*(void (**)(unint64_t))(v6 + 56))(v14);
      }
    }
  }
  else
  {
    v12 = ~v8 + a2;
    bzero(a1, (((((((((((v10 + ((v9 + 4) & ~v9)) & 0xFFFFFFFFFFFFFFF8) + 91) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)+ 15) & 0xFFFFFFFFFFFFFFF8)+ 51) & 0xFFFFFFFFFFFFFFF8)+ 11) & 0xFFFFFFFFFFFFFFF8 | 5);
    *(_DWORD *)a1 = v12;
    if (v8 < a3)
      a1[v11] = 1;
  }
  return result;
}

void base witness table accessor for _AttributeBody in DynamicContainerInfo<A>()
{
  JUMPOUT(0x23B7C9C04);
}

uint64_t instantiation function for generic protocol witness table for DynamicContainerInfo<A>(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for DynamicContainerInfo<A>);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t type metadata accessor for DynamicPreferenceCombiner(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for DynamicPreferenceCombiner);
}

uint64_t sub_234E185C4()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t partial apply for lessThan #1 <A>(_:_:) in DynamicContainerInfo.updateValue()(unsigned int a1, unsigned int a2)
{
  uint64_t *v2;

  return lessThan #1 <A>(_:_:) in DynamicContainerInfo.updateValue()(a1, a2, v2[4], v2[2], v2[3]);
}

char *specialized Array.subscript.setter(char *result, uint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5, int64_t a6)
{
  uint64_t v6;
  unint64_t v7;

  if ((a5 & 0x8000000000000000) != 0)
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v7 = *(_QWORD *)(*(_QWORD *)v6 + 16);
  if (v7 < a5 || (uint64_t)v7 < a6)
    goto LABEL_14;
  if (a6 < 0)
  {
LABEL_15:
    __break(1u);
LABEL_16:
    __break(1u);
    return result;
  }
  if (*(_QWORD *)v6 + 4 * a5 + 32 != a2 + 4 * a3)
    return specialized Array.replaceSubrange<A>(_:with:)(a5, a6, (uint64_t)result, a2, a3, a4);
  if ((uint64_t)(a4 >> 1) < a3)
    goto LABEL_16;
  if (a5 != a3 || a4 >> 1 != a6)
    return specialized Array.replaceSubrange<A>(_:with:)(a5, a6, (uint64_t)result, a2, a3, a4);
  return result;
}

void specialized _ArrayBufferProtocol.init(copying:)(uint64_t a1, uint64_t a2, unint64_t a3)
{
  int64_t v3;
  uint64_t v4;
  _QWORD *v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;

  v3 = a3 >> 1;
  v4 = (a3 >> 1) - a2;
  if (__OFSUB__(a3 >> 1, a2))
    goto LABEL_13;
  if (!v4)
  {
    v6 = (_QWORD *)MEMORY[0x24BEE4AF8];
    if (v3 >= a2)
      goto LABEL_6;
    goto LABEL_12;
  }
  type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>, MEMORY[0x24BEE4AD0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
  v6 = (_QWORD *)swift_allocObject();
  v7 = _swift_stdlib_malloc_size(v6);
  v8 = v7 - 32;
  if (v7 < 32)
    v8 = v7 - 25;
  v6[2] = v4;
  v6[3] = (2 * (v8 >> 3)) | 1;
  if (v3 < a2)
  {
LABEL_12:
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
LABEL_6:
  type metadata accessor for DynamicContainer.ItemInfo();
  swift_arrayInitWithCopy();
  if (__OFSUB__(0, a2))
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v9 = v6[2];
  v10 = __OFADD__(a2, v9);
  v11 = a2 + v9;
  if (v10)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  if (v11 < a2)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  if (v11 < 0)
LABEL_17:
    __break(1u);
}

uint64_t sub_234E18794()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_234E187B8()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in DynamicContainerInfo.updateItems(disableTransitions:)(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in DynamicContainerInfo.updateItems(disableTransitions:)(a1, *(Swift::Int **)(v1 + 32), *(_QWORD *)(v1 + 40), *(_BYTE **)(v1 + 48), *(_QWORD *)(v1 + 56), *(_QWORD *)(v1 + 64), *(unsigned __int8 *)(v1 + 72), *(_BYTE **)(v1 + 80), *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_234E18800()
{
  return swift_deallocObject();
}

unint64_t lazy protocol witness table accessor for type DynamicTransaction and conformance DynamicTransaction()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type DynamicTransaction and conformance DynamicTransaction;
  if (!lazy protocol witness table cache variable for type DynamicTransaction and conformance DynamicTransaction)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for DynamicTransaction, &unk_250628A18);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DynamicTransaction and conformance DynamicTransaction);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type DynamicViewPhase and conformance DynamicViewPhase()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type DynamicViewPhase and conformance DynamicViewPhase;
  if (!lazy protocol witness table cache variable for type DynamicViewPhase and conformance DynamicViewPhase)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for DynamicViewPhase, &unk_250620D70);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DynamicViewPhase and conformance DynamicViewPhase);
  }
  return result;
}

uint64_t sub_234E18898()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in DynamicContainerInfo.unremoveItem(at:)()
{
  return closure #4 in MatchedGeometryScope.frame<A>(index:for:view:)();
}

uint64_t partial apply for closure #1 in DynamicContainer.AttachCombinerVisitor.visit<A>(key:)(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t result;

  v6 = v4[2];
  v7 = v4[3];
  v8 = *(_DWORD *)(v4[4] + 4);
  result = type metadata accessor for DynamicPreferenceCombiner(0, v6, v7, a4);
  *a1 = v8;
  return result;
}

uint64_t sub_234E18910()
{
  return swift_deallocObject();
}

void *type metadata accessor for DynamicViewPhase()
{
  return &unk_250620D70;
}

void *type metadata accessor for DynamicTransaction()
{
  return &unk_250628A18;
}

uint64_t instantiation function for generic protocol witness table for DynamicPreferenceCombiner<A>(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for DynamicPreferenceCombiner<A>);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t instantiation function for generic protocol witness table for DynamicTransaction(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type DynamicTransaction and conformance DynamicTransaction();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t instantiation function for generic protocol witness table for DynamicViewPhase(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type DynamicViewPhase and conformance DynamicViewPhase();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

void base witness table accessor for _AttributeBody in DynamicPreferenceCombiner<A>()
{
  JUMPOUT(0x23B7C9C04);
}

uint64_t outlined consume of DynamicContainer.Info?(uint64_t result)
{
  if (result)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t partial apply for closure #1 in DynamicPreferenceCombiner.value.getter@<X0>(uint64_t a1@<X8>)
{
  return closure #1 in DynamicPreferenceCombiner.value.getter(a1);
}

unint64_t SeparatorShapeStyle._apply(to:)(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  Swift::Int v9;
  uint64_t v10;
  uint64_t v11;
  Swift::Int v13;
  uint64_t v14;
  uint64_t v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  uint64_t v21;
  unsigned __int8 v22;
  unint64_t v23;
  int v24;

  v2 = *(_QWORD *)(a1 + 48);
  if (!*(_QWORD *)(a1 + 56))
  {
    v6 = swift_retain_n();
    v7 = specialized find<A>(_:key:)(v6);
    if (v7)
    {
      v3 = *(_QWORD *)(v7 + 72);
      v8 = *(_DWORD *)(v7 + 80);
      outlined copy of Material?(v3);
    }
    else
    {
      v8 = 0;
      v3 = 8;
    }
    swift_release_n();
    if (v3 == 8)
    {
      type metadata accessor for EnvironmentPropertyKey<ColorSchemeKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ColorSchemeKey>, (uint64_t)&type metadata for ColorSchemeKey, (uint64_t)&protocol witness table for ColorSchemeKey);
      BloomFilter.init(hashValue:)(v9);
      v10 = swift_retain_n();
      v11 = specialized find1<A>(_:key:filter:)(v10, v23);
      if (v11)
        v4 = *(unsigned __int8 *)(v11 + 72);
      else
        v4 = 0;
      swift_release_n();
      type metadata accessor for EnvironmentPropertyKey<ColorSchemeKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<ColorSchemeContrastKey>, (uint64_t)&type metadata for ColorSchemeContrastKey, (uint64_t)&protocol witness table for ColorSchemeContrastKey);
      BloomFilter.init(hashValue:)(v13);
      v14 = swift_retain_n();
      v15 = specialized find1<A>(_:key:filter:)(v14, v23);
      if (v15)
        v5 = *(unsigned __int8 *)(v15 + 72);
      else
        v5 = 0;
      swift_release_n();
      goto LABEL_17;
    }
LABEL_11:
    *(_BYTE *)(a1 + 105) = 2;
    v23 = v3;
    v24 = v8;
    ForegroundMaterialStyle._apply(to:)(a1);
    return outlined consume of Material?(v3);
  }
  swift_retain_n();
  swift_retain_n();
  specialized PropertyList.Tracker.value<A>(_:for:)(v2, (uint64_t)&v23);
  swift_release_n();
  swift_release_n();
  v3 = v23;
  if (v23 != 8)
  {
    v8 = v24;
    goto LABEL_11;
  }
  swift_retain_n();
  swift_retain_n();
  specialized PropertyList.Tracker.value<A>(_:for:)(v2, (char *)&v22);
  swift_release_n();
  swift_release_n();
  v4 = v22;
  swift_retain_n();
  swift_retain_n();
  specialized PropertyList.Tracker.value<A>(_:for:)(v2, (char *)&v22);
  swift_release_n();
  swift_release_n();
  v5 = v22;
LABEL_17:
  v16 = 0.08;
  if (!v5)
    v16 = 0.0;
  v17 = 0.29;
  if (v4)
    v17 = 0.6;
  v18 = v17 + v16;
  v19 = 0.235294118;
  if (v4)
    v19 = 0.329411765;
  v20 = 0.345098039;
  if (!v4)
    v20 = 0.262745098;
  LOBYTE(v23) = 0;
  v21 = specialized Color.init(_:red:green:blue:opacity:)(&v23, v19, v19, v20, v18);
  Color._apply(to:)(a1, v21);
  return swift_release();
}

double static SeparatorShapeStyle._makeView<A>(view:inputs:)@<D0>(int *a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  int v8;
  __int128 v9;
  double result;
  uint64_t v11;
  int v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  int v18;
  int v19;

  v5 = *(_QWORD *)a2;
  v6 = *(_DWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a2 + 16);
  v8 = *(_DWORD *)(a2 + 80);
  v19 = *a1;
  v11 = v5;
  v12 = v6;
  v13 = v7;
  v9 = *(_OWORD *)(a2 + 40);
  v14 = *(_OWORD *)(a2 + 24);
  v15 = v9;
  v16 = *(_OWORD *)(a2 + 56);
  v17 = *(_QWORD *)(a2 + 72);
  v18 = v8;
  *(_QWORD *)&result = static ShapeStyle.legacyMakeShapeView<A>(view:inputs:)(&v19, &v11, &type metadata for SeparatorShapeStyle, a3, (uint64_t)&protocol witness table for SeparatorShapeStyle, a4, a5).n128_u64[0];
  return result;
}

unint64_t protocol witness for ShapeStyle._apply(to:) in conformance SeparatorShapeStyle(uint64_t a1)
{
  return SeparatorShapeStyle._apply(to:)(a1);
}

_BYTE *static SeparatorShapeStyle._apply(to:)(_BYTE *result)
{
  *result = 1;
  return result;
}

uint64_t EnvironmentValues.defaultSeparatorShapeStyle.getter()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v1 = *v0;
  if (v0[1])
  {
    swift_retain_n();
    swift_retain_n();
    v2 = specialized PropertyList.Tracker.value<A>(_:for:)(v1);
    swift_release_n();
    swift_release_n();
    return v2;
  }
  else
  {
    v4 = swift_retain_n();
    v5 = specialized closure #1 in PropertyList.subscript.getter(v4);
    swift_release_n();
    return v5;
  }
}

uint64_t key path getter for EnvironmentValues.defaultSeparatorShapeStyle : EnvironmentValues@<X0>(uint64_t *a1@<X0>, _DWORD *a2@<X8>)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t result;

  v3 = *a1;
  if (a1[1])
  {
    swift_retain_n();
    swift_retain_n();
    v4 = specialized PropertyList.Tracker.value<A>(_:for:)(v3);
    swift_release_n();
  }
  else
  {
    v5 = swift_retain_n();
    v4 = specialized closure #1 in PropertyList.subscript.getter(v5);
  }
  result = swift_release_n();
  *a2 = v4;
  return result;
}

uint64_t EnvironmentValues.defaultSeparatorShapeStyle.setter(int a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;

  v3 = *v1;
  swift_retain_n();
  specialized closure #1 in PropertyList.subscript.setter(v1, a1);
  swift_release();
  if (v1[1])
  {
    v4 = *v1;
    swift_retain();
    swift_retain();
    specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v3, v4);
    swift_release();
    swift_release();
  }
  return swift_release();
}

void (*EnvironmentValues.defaultSeparatorShapeStyle.modify(_QWORD *a1))(uint64_t a1)
{
  uint64_t *v1;
  _QWORD *v3;
  uint64_t v4;
  int v5;
  uint64_t v6;

  v3 = malloc(0x30uLL);
  *a1 = v3;
  v3[3] = v1;
  v4 = *v1;
  if (v1[1])
  {
    swift_retain_n();
    swift_retain_n();
    v5 = specialized PropertyList.Tracker.value<A>(_:for:)(v4);
    swift_release_n();
  }
  else
  {
    v6 = swift_retain_n();
    v5 = specialized closure #1 in PropertyList.subscript.getter(v6);
  }
  swift_release_n();
  v3[4] = 0;
  *((_DWORD *)v3 + 10) = v5;
  return EnvironmentValues.defaultSeparatorShapeStyle.modify;
}

void EnvironmentValues.defaultSeparatorShapeStyle.modify(uint64_t a1)
{
  _QWORD **v1;
  int v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *(_QWORD ***)a1;
  v2 = *(_DWORD *)(*(_QWORD *)a1 + 40);
  v3 = *(uint64_t **)(*(_QWORD *)a1 + 24);
  v4 = *v3;
  swift_retain_n();
  specialized closure #1 in PropertyList.subscript.setter(v3, v2);
  swift_release();
  if (v3[1])
  {
    v5 = *v1[3];
    swift_retain();
    swift_retain();
    specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v4, v5);
    swift_release();
    swift_release();
  }
  swift_release();
  free(v1);
}

void protocol witness for static EnvironmentKey.defaultValue.getter in conformance EnvironmentValues.DefaultSeparatorShapeStyleKey(_DWORD *a1@<X8>)
{
  *a1 = 3;
}

uint64_t sub_234E19114(int *a1)
{
  return EnvironmentValues.defaultSeparatorShapeStyle.setter(*a1);
}

ValueMetadata *type metadata accessor for SeparatorShapeStyle()
{
  return &type metadata for SeparatorShapeStyle;
}

ValueMetadata *type metadata accessor for EnvironmentValues.DefaultSeparatorShapeStyleKey()
{
  return &type metadata for EnvironmentValues.DefaultSeparatorShapeStyleKey;
}

uint64_t key path getter for EnvironmentValues.layoutDirection : EnvironmentValues@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  char v6;

  v3 = *(_QWORD *)(a1 + 8);
  swift_retain();
  v4 = swift_retain();
  specialized EnvironmentValues.subscript.getter(v4, v3, &v6);
  swift_release();
  result = swift_release();
  *a2 = v6;
  return result;
}

uint64_t key path setter for EnvironmentValues.layoutDirection : EnvironmentValues(char *a1)
{
  char v2;

  v2 = *a1;
  return EnvironmentValues.layoutDirection.setter(&v2);
}

BOOL _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF7SwiftUI11ColorSchemeO_s5NeverOytTB503_s7c45UI26_PreferenceWritingModifierVA2A23PreferredeF98KeyVRszrlE0gH3Env33_E52508E85535897B9A366B470195B29DLLV5valueAA17EnvironmentValuesVvgyAA0gH0OXEfU_AD17EnvironmentValuesVTf1cn_n(unsigned __int8 a1, uint64_t *a2)
{
  int v2;
  char v4;
  uint64_t v5;
  uint64_t v6;

  v2 = a1;
  if (a1 != 2)
  {
    v4 = a1 & 1;
    v5 = *a2;
    swift_retain_n();
    specialized closure #1 in PropertyList.subscript.setter(a2, v4);
    swift_release();
    if (a2[1])
    {
      v6 = *a2;
      swift_retain();
      swift_retain();
      specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v5, v6);
      swift_release();
      swift_release();
    }
    swift_release();
  }
  return v2 == 2;
}

uint64_t protocol witness for static UnaryLayout.makeViewImpl(modifier:inputs:body:) in conformance IgnoresAutomaticPaddingLayout@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(uint64_t *__return_ptr, uint64_t, __int128 *)@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  _OWORD v8[5];
  int v9;

  v4 = *a1;
  v5 = *(_OWORD *)(a2 + 48);
  v8[2] = *(_OWORD *)(a2 + 32);
  v8[3] = v5;
  v8[4] = *(_OWORD *)(a2 + 64);
  v9 = *(_DWORD *)(a2 + 80);
  v6 = *(_OWORD *)(a2 + 16);
  v8[0] = *(_OWORD *)a2;
  v8[1] = v6;
  return specialized static UnaryLayout<>.makeViewImpl(modifier:inputs:body:)(v4, (uint64_t)v8, a3, a4);
}

uint64_t specialized static UnaryLayout<>.makeViewImpl(modifier:inputs:body:)@<X0>(unsigned int a1@<W0>, uint64_t a2@<X1>, void (*a3)(uint64_t *__return_ptr, uint64_t, uint64_t *)@<X3>, uint64_t a4@<X8>)
{
  __int128 v5;
  int v6;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int OffsetAttribute2;
  uint64_t v17;
  int v18;
  int v19;
  __int128 v20;
  __int128 v21;
  uint64_t result;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t KeyPath;
  uint64_t v27;
  uint64_t v28;
  int v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int v34;
  int v35;
  int v36;
  uint64_t v37;
  int v38;
  int v39;
  unsigned int v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  unsigned int v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  _BYTE v51[20];
  __int128 v52;
  __int128 v53;
  __int128 v54;
  uint64_t v55;

  v55 = *MEMORY[0x24BDAC8D0];
  v5 = *(_OWORD *)(a2 + 32);
  v53 = *(_OWORD *)(a2 + 16);
  v54 = v5;
  v52 = *(_OWORD *)a2;
  v6 = DWORD1(v5);
  if ((BYTE4(v5) & 0x22) != 0)
  {
    swift_beginAccess();
    v8 = *MEMORY[0x24BE096C0];
    *(_QWORD *)&v47 = __PAIR64__(*(_DWORD *)(v53 + 16), a1);
    DWORD2(v47) = v8;
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for UnaryLayoutComputer<AutomaticPaddingViewModifier.PaddingLayout.WrappedLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type AutomaticPaddingViewModifier.PaddingLayout.WrappedLayout and conformance AutomaticPaddingViewModifier.PaddingLayout.WrappedLayout, (uint64_t)&type metadata for AutomaticPaddingViewModifier.PaddingLayout.WrappedLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UnaryLayoutComputer);
    lazy protocol witness table accessor for type UnaryLayoutComputer<AutomaticPaddingViewModifier.PaddingLayout.WrappedLayout> and conformance UnaryLayoutComputer<A>();
    v9 = Attribute.init<A>(body:value:flags:update:)();
    v10 = *(_QWORD *)a2;
    v38 = *(_DWORD *)(a2 + 8);
    v11 = *(_QWORD *)(a2 + 16);
    v12 = *(_QWORD *)(a2 + 24);
    v13 = *(_QWORD *)(a2 + 40);
    v43 = *(_QWORD *)(a2 + 48);
    v14 = *(_QWORD *)(a2 + 56);
    v15 = *(_DWORD *)(a2 + 64);
    OffsetAttribute2 = *(_DWORD *)(a2 + 72);
    v39 = *(_DWORD *)(a2 + 68);
    v17 = *(_QWORD *)(a2 + 76);
    v42 = v9;
    if ((v6 & 0x20) != 0)
    {
      v36 = *(_DWORD *)(a2 + 36);
      v35 = *(_DWORD *)(a2 + 32);
      v37 = *(_QWORD *)(a2 + 40);
      v23 = *(_QWORD *)(a2 + 16);
      v24 = *(_QWORD *)a2;
      v25 = v9;
      KeyPath = swift_getKeyPath();
      swift_beginAccess();
      outlined retain of _ViewInputs(a2);
      outlined retain of _GraphInputs((uint64_t)&v52);
      specialized CachedEnvironment.attribute<A>(keyPath:)(KeyPath);
      swift_endAccess();
      outlined release of _GraphInputs((uint64_t)&v52);
      swift_release();
      *((_QWORD *)&v47 + 1) = __PAIR64__(v8, v25);
      v10 = v24;
      v11 = v23;
      v13 = v37;
      protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
      type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for UnaryChildGeometry<AutomaticPaddingViewModifier.PaddingLayout.WrappedLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type AutomaticPaddingViewModifier.PaddingLayout.WrappedLayout and conformance AutomaticPaddingViewModifier.PaddingLayout.WrappedLayout, (uint64_t)&type metadata for AutomaticPaddingViewModifier.PaddingLayout.WrappedLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UnaryChildGeometry);
      lazy protocol witness table accessor for type UnaryChildGeometry<AutomaticPaddingViewModifier.PaddingLayout.WrappedLayout> and conformance UnaryChildGeometry<A>();
      Attribute.init<A>(body:value:flags:update:)();
      OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
      LODWORD(v47) = v15;
      DWORD1(v47) = AGGraphCreateOffsetAttribute2();
      protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
      lazy protocol witness table accessor for type LayoutPositionQuery and conformance LayoutPositionQuery();
      v15 = Attribute.init<A>(body:value:flags:update:)();
      v18 = v35 | 0x18;
      v19 = v36 | 2;
    }
    else
    {
      v18 = v54;
      outlined retain of _ViewInputs(a2);
      v19 = v6;
    }
    *(_QWORD *)&v47 = v10;
    DWORD2(v47) = v38;
    *(_QWORD *)&v48 = v11;
    *((_QWORD *)&v48 + 1) = v12;
    *(_QWORD *)&v49 = __PAIR64__(v19, v18);
    *((_QWORD *)&v49 + 1) = v13;
    *(_QWORD *)&v50 = v43;
    *((_QWORD *)&v50 + 1) = v14;
    *(_DWORD *)v51 = v15;
    *(_DWORD *)&v51[4] = v39;
    *(_DWORD *)&v51[8] = OffsetAttribute2;
    *(_QWORD *)&v51[12] = v17;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    closure #1 in static AutomaticPaddingViewModifier._makeView(modifier:inputs:body:)((uint64_t *)&v47, a3, (uint64_t)&v44);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    v27 = swift_release();
    v28 = v44;
    v29 = v45;
    v30 = v46;
    if ((v6 & 0x20) != 0)
    {
      MEMORY[0x24BDAC7A8](v27);
      MEMORY[0x24BDAC7A8](v31);
      v32 = AGGraphMutateAttribute();
      MEMORY[0x24BDAC7A8](v32);
      type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for UnaryChildGeometry<AutomaticPaddingViewModifier.PaddingLayout.WrappedLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type AutomaticPaddingViewModifier.PaddingLayout.WrappedLayout and conformance AutomaticPaddingViewModifier.PaddingLayout.WrappedLayout, (uint64_t)&type metadata for AutomaticPaddingViewModifier.PaddingLayout.WrappedLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UnaryChildGeometry);
      MEMORY[0x24BDAC7A8](v33);
      AGGraphMutateAttribute();
    }
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    result = swift_release();
    v34 = v42;
    if ((v6 & 2) == 0)
      v34 = v30;
    *(_QWORD *)a4 = v28;
    *(_DWORD *)(a4 + 8) = v29 | ((v6 & 2) << 6);
    *(_DWORD *)(a4 + 12) = v34;
  }
  else
  {
    v20 = *(_OWORD *)(a2 + 48);
    v49 = *(_OWORD *)(a2 + 32);
    v50 = v20;
    *(_OWORD *)v51 = *(_OWORD *)(a2 + 64);
    *(_DWORD *)&v51[16] = *(_DWORD *)(a2 + 80);
    v21 = *(_OWORD *)(a2 + 16);
    v47 = *(_OWORD *)a2;
    v48 = v21;
    closure #1 in static AutomaticPaddingViewModifier._makeView(modifier:inputs:body:)((uint64_t *)&v47, a3, a4);
    return swift_release();
  }
  return result;
}

uint64_t static UnaryLayout<>.makeViewImpl(modifier:inputs:body:)@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(uint64_t *__return_ptr, uint64_t, unint64_t *)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t *a7@<X8>)
{
  unint64_t v7;
  int v8;
  uint64_t v9;
  int v10;
  int v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int v17;
  int v18;
  unsigned int v19;
  int v20;
  int v21;
  int v22;
  uint64_t v23;
  unsigned int v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  unint64_t v33;
  uint64_t v34;
  int v35;
  int v36;
  int v37;
  unsigned int v38;
  int OffsetAttribute2;
  uint64_t result;
  uint64_t KeyPath;
  unsigned int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unsigned int v51;
  unsigned int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unsigned int v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unsigned int v69;
  int v70;
  unsigned int v71;
  int v72;
  int v73;
  int v74;
  int v75;
  int v76;
  int v77;
  int v78;
  int v79;
  uint64_t v80;
  void (*v81)(uint64_t *__return_ptr, uint64_t, unint64_t *);
  uint64_t *v82;
  unsigned int v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unsigned int v87;
  unsigned int v88;
  unsigned int v89[6];
  unint64_t v90;
  int v91;
  int v92;
  uint64_t v93;
  int v94;
  int v95;
  int v96;
  int v97;
  uint64_t v98;
  uint64_t v99;
  int v100;
  int v101;
  unsigned int v102;
  int v103;
  int v104;
  int v105;
  int v106;
  uint64_t v107;

  v107 = *MEMORY[0x24BDAC8D0];
  v7 = *(_QWORD *)a2;
  v8 = *(_DWORD *)(a2 + 8);
  v9 = *(_QWORD *)(a2 + 16);
  v11 = *(_DWORD *)(a2 + 24);
  v10 = *(_DWORD *)(a2 + 28);
  v12 = *(_DWORD *)(a2 + 32);
  v13 = *(_DWORD *)(a2 + 36);
  v15 = *(_QWORD *)(a2 + 40);
  v14 = *(_QWORD *)(a2 + 48);
  v17 = *(_DWORD *)(a2 + 56);
  v16 = *(_DWORD *)(a2 + 60);
  v19 = *(_DWORD *)(a2 + 64);
  v18 = *(_DWORD *)(a2 + 68);
  v21 = *(_DWORD *)(a2 + 72);
  v20 = *(_DWORD *)(a2 + 76);
  v22 = *(_DWORD *)(a2 + 80);
  if ((v13 & 0x22) != 0)
  {
    v69 = *(_DWORD *)(a2 + 72);
    v71 = v19;
    v75 = v17;
    v76 = v16;
    v77 = v18;
    v78 = v20;
    v79 = v22;
    v80 = a4;
    v81 = a3;
    v85 = v14;
    v82 = a7;
    v89[0] = *a1;
    v90 = v7;
    v72 = v8;
    v91 = v8;
    v93 = v9;
    v73 = v11;
    v94 = v11;
    v95 = v10;
    v74 = v10;
    v96 = v12;
    v97 = v13;
    v98 = v15;
    v23 = *(_QWORD *)(a6 + 8);
    v84 = v7;
    v70 = v12;
    v26 = static Animatable.makeAnimatable(value:inputs:)(v89, (uint64_t *)&v90, a5, v23);
    v27 = swift_beginAccess();
    v28 = *MEMORY[0x24BE096C0];
    v90 = __PAIR64__(*(_DWORD *)(v9 + 16), v26);
    v65 = v28;
    v91 = v28;
    MEMORY[0x24BDAC7A8](v27);
    v63 = type metadata accessor for UnaryLayoutComputer(0, a5, a6, v29);
    v64 = MEMORY[0x23B7C9C04](&protocol conformance descriptor for UnaryLayoutComputer<A>, v63);
    type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for Attribute<LayoutComputer>, (uint64_t)&type metadata for LayoutComputer, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BE095F0]);
    v66 = v63;
    _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v90, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA12StatefulRuleRd__lufcADSPyqd__GXEfU_TA_4, (uint64_t)&v61, v63, MEMORY[0x24BEE4078], v30, MEMORY[0x24BEE40A8], v31);
    v32 = v86;
    v68 = a6;
    v67 = a5;
    v83 = v86;
    if ((v13 & 0x20) != 0)
    {
      KeyPath = swift_getKeyPath();
      swift_beginAccess();
      swift_retain_n();
      swift_retain_n();
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain();
      v42 = specialized CachedEnvironment.attribute<A>(keyPath:)(KeyPath);
      swift_endAccess();
      swift_release();
      swift_bridgeObjectRelease();
      swift_release();
      v43 = swift_release();
      v90 = __PAIR64__(v42, v69);
      v91 = v32;
      v92 = v65;
      MEMORY[0x24BDAC7A8](v43);
      v45 = type metadata accessor for UnaryChildGeometry(0, a5, a6, v44);
      v63 = v45;
      v64 = MEMORY[0x23B7C9C04](&protocol conformance descriptor for UnaryChildGeometry<A>, v45);
      type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for Attribute<ViewGeometry>, (uint64_t)&type metadata for ViewGeometry, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BE095F0]);
      _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v90, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TA_9, (uint64_t)&v61, v45, MEMORY[0x24BEE4078], v46, MEMORY[0x24BEE40A8], v47);
      v34 = v85;
      v35 = v86;
      OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
      v90 = __PAIR64__(AGGraphCreateOffsetAttribute2(), v71);
      protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
      lazy protocol witness table accessor for type LayoutPositionQuery and conformance LayoutPositionQuery();
      v38 = Attribute.init<A>(body:value:flags:update:)();
      v37 = v70 | 0x18;
      v36 = v13 | 2;
      v33 = v84;
    }
    else
    {
      v33 = v84;
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
      v34 = v85;
      swift_bridgeObjectRetain();
      v35 = 0;
      v36 = v13;
      v37 = v70;
      v38 = v71;
      OffsetAttribute2 = v69;
    }
    v90 = v33;
    v91 = v72;
    v93 = v9;
    v94 = v73;
    v95 = v74;
    v96 = v37;
    v97 = v36;
    v98 = v15;
    v99 = v34;
    v100 = v75;
    v101 = v76;
    v102 = v38;
    v103 = v77;
    v104 = OffsetAttribute2;
    v105 = v78;
    v106 = v79;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    v48 = swift_bridgeObjectRetain();
    v81(&v86, v48, &v90);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    v49 = swift_release();
    v50 = v86;
    v51 = v87;
    v52 = v88;
    if ((v13 & 0x20) != 0)
    {
      MEMORY[0x24BDAC7A8](v49);
      v53 = v67;
      LODWORD(v81) = v35;
      v54 = v68;
      v61 = v67;
      v62 = v68;
      v63 = v50;
      v64 = __PAIR64__(v52, v51);
      MEMORY[0x24BDAC7A8](v55);
      v56 = AGGraphMutateAttribute();
      MEMORY[0x24BDAC7A8](v56);
      v61 = v53;
      v62 = v54;
      v63 = v50;
      v64 = __PAIR64__(v52, v51);
      v58 = type metadata accessor for UnaryChildGeometry(0, v53, v54, v57);
      MEMORY[0x24BDAC7A8](v58);
      AGGraphMutateAttribute();
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    result = swift_release();
    v59 = v83;
    if ((v13 & 2) == 0)
      v59 = v52;
    v60 = v82;
    *v82 = v50;
    *((_DWORD *)v60 + 2) = v51 | ((v13 & 2) << 6);
    *((_DWORD *)v60 + 3) = v59;
  }
  else
  {
    v90 = *(_QWORD *)a2;
    v91 = v8;
    v93 = v9;
    v94 = v11;
    v95 = v10;
    v96 = v12;
    v97 = v13;
    v98 = v15;
    v99 = v14;
    v100 = v17;
    v101 = v16;
    v102 = v19;
    v103 = v18;
    v104 = v21;
    v105 = v20;
    v106 = v22;
    return ((uint64_t (*)(unsigned int *, unint64_t *))a3)(a1, &v90);
  }
  return result;
}

uint64_t protocol witness for static UnaryLayout.makeViewImpl(modifier:inputs:body:) in conformance AutomaticPaddingViewModifier.PaddingLayout.WrappedLayout@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(uint64_t *__return_ptr, uint64_t, __int128 *)@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  _OWORD v8[5];
  int v9;

  v4 = *a1;
  v5 = *(_OWORD *)(a2 + 48);
  v8[2] = *(_OWORD *)(a2 + 32);
  v8[3] = v5;
  v8[4] = *(_OWORD *)(a2 + 64);
  v9 = *(_DWORD *)(a2 + 80);
  v6 = *(_OWORD *)(a2 + 16);
  v8[0] = *(_OWORD *)a2;
  v8[1] = v6;
  return specialized static UnaryLayout<>.makeViewImpl(modifier:inputs:body:)(v4, (uint64_t)v8, a3, a4);
}

uint64_t protocol witness for static UnaryLayout.makeViewImpl(modifier:inputs:body:) in conformance _FixedSizeLayout@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(uint64_t *__return_ptr, uint64_t, __int128 *)@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  _OWORD v8[5];
  int v9;

  v4 = *a1;
  v5 = *(_OWORD *)(a2 + 48);
  v8[2] = *(_OWORD *)(a2 + 32);
  v8[3] = v5;
  v8[4] = *(_OWORD *)(a2 + 64);
  v9 = *(_DWORD *)(a2 + 80);
  v6 = *(_OWORD *)(a2 + 16);
  v8[0] = *(_OWORD *)a2;
  v8[1] = v6;
  return specialized static UnaryLayout<>.makeViewImpl(modifier:inputs:body:)(v4, (uint64_t)v8, a3, a4);
}

uint64_t protocol witness for static UnaryLayout.makeViewImpl(modifier:inputs:body:) in conformance _PaddingLayout@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(uint64_t *__return_ptr, uint64_t, __int128 *)@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  _OWORD v8[5];
  int v9;

  v4 = *a1;
  v5 = *(_OWORD *)(a2 + 48);
  v8[2] = *(_OWORD *)(a2 + 32);
  v8[3] = v5;
  v8[4] = *(_OWORD *)(a2 + 64);
  v9 = *(_DWORD *)(a2 + 80);
  v6 = *(_OWORD *)(a2 + 16);
  v8[0] = *(_OWORD *)a2;
  v8[1] = v6;
  return specialized static UnaryLayout<>.makeViewImpl(modifier:inputs:body:)(v4, (uint64_t)v8, a3, a4);
}

uint64_t protocol witness for static UnaryLayout.makeViewImpl(modifier:inputs:body:) in conformance MoveTransition.MoveLayout@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(uint64_t *__return_ptr, uint64_t, __int128 *)@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  _OWORD v8[5];
  int v9;

  v4 = *a1;
  v5 = *(_OWORD *)(a2 + 48);
  v8[2] = *(_OWORD *)(a2 + 32);
  v8[3] = v5;
  v8[4] = *(_OWORD *)(a2 + 64);
  v9 = *(_DWORD *)(a2 + 80);
  v6 = *(_OWORD *)(a2 + 16);
  v8[0] = *(_OWORD *)a2;
  v8[1] = v6;
  return specialized static UnaryLayout<>.makeViewImpl(modifier:inputs:body:)(v4, (uint64_t)v8, a3, a4);
}

uint64_t specialized static DefaultGeometryEffectProvider.resolve(effect:origin:size:layoutDirection:)@<X0>(double *a1@<X0>, char a2@<W1>, uint64_t a3@<X8>, CGFloat a4@<D0>, CGFloat a5@<D1>, double a6@<D2>, double a7@<D3>, double a8@<D4>, double a9@<D5>)
{
  CGFloat v15;
  double v18;
  double v19;
  CGFloat tx;
  CGFloat ty;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  CGFloat v25;
  CGFloat v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  double b;
  double a;
  double d;
  double c;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  uint64_t result;
  double v40;
  char v41;
  Swift::String v42;
  double v43;
  double v44;
  double v45;
  double v46;
  double v47;
  double v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  double v53;
  double v54[9];
  CGAffineTransform v55;
  double v56;
  double v57;
  double v58;
  CGAffineTransform t2;
  double v60;
  __int128 v61;
  CGAffineTransform t1;
  CGFloat v63;
  CGFloat v64;
  uint64_t v65;

  v15 = a4;
  if (a4 == 0.0)
  {
    if (one-time initialization token for leastNonzeroScaleFactor != -1)
      swift_once();
    v15 = *(double *)&static CGFloat.leastNonzeroScaleFactor;
  }
  v18 = a6 * a8;
  v19 = a7 * a9;
  if (a5 == 0.0)
  {
    if (one-time initialization token for leastNonzeroScaleFactor != -1)
      swift_once();
    a5 = *(double *)&static CGFloat.leastNonzeroScaleFactor;
  }
  CGAffineTransformMakeTranslation(&t1, -v18, -v19);
  v49 = *(_OWORD *)&t1.c;
  v51 = *(_OWORD *)&t1.a;
  tx = t1.tx;
  ty = t1.ty;
  CGAffineTransformMakeScale(&t1, v15, a5);
  v22 = *(_OWORD *)&t1.a;
  v23 = *(_OWORD *)&t1.c;
  v24 = *(_OWORD *)&t1.tx;
  *(_OWORD *)&t1.a = v51;
  *(_OWORD *)&t1.c = v49;
  t1.tx = tx;
  t1.ty = ty;
  *(_OWORD *)&t2.a = v22;
  *(_OWORD *)&t2.c = v23;
  *(_OWORD *)&t2.tx = v24;
  CGAffineTransformConcat(&v55, &t1, &t2);
  v50 = *(_OWORD *)&v55.c;
  v52 = *(_OWORD *)&v55.a;
  v25 = v55.tx;
  v26 = v55.ty;
  CGAffineTransformMakeTranslation(&t1, v18, v19);
  v27 = *(_OWORD *)&t1.a;
  v28 = *(_OWORD *)&t1.c;
  v29 = *(_OWORD *)&t1.tx;
  *(_OWORD *)&t1.a = v52;
  *(_OWORD *)&t1.c = v50;
  t1.tx = v25;
  t1.ty = v26;
  *(_OWORD *)&t2.a = v27;
  *(_OWORD *)&t2.c = v28;
  *(_OWORD *)&t2.tx = v29;
  CGAffineTransformConcat(&v55, &t1, &t2);
  a = v55.a;
  b = v55.b;
  c = v55.c;
  d = v55.d;
  v35 = v55.tx;
  v34 = v55.ty;
  t1.a = v55.a;
  t1.b = v55.b;
  t1.c = 0.0;
  t1.d = v55.c;
  t1.tx = v55.d;
  t1.ty = 0.0;
  v63 = v55.tx;
  v64 = v55.ty;
  v65 = 0x3FF0000000000000;
  if ((a2 & 1) != 0)
  {
    t2.a = -1.0;
    memset(&t2.b, 0, 24);
    *(_OWORD *)&t2.tx = xmmword_235281560;
    v60 = a8;
    v61 = xmmword_23528A280;
    ProjectionTransform.concatenating(_:)(&t1.a, v54);
    ProjectionTransform.concatenating(_:)(&t2.a, &v55.a);
    a = v55.a;
    b = v55.b;
    v37 = v55.c;
    c = v55.d;
    d = v55.tx;
    v38 = v55.ty;
    v35 = v56;
    v34 = v57;
    v36 = v58;
    if (v55.c != 0.0)
      goto LABEL_20;
  }
  else
  {
    v36 = 1.0;
    v37 = 0.0;
    v38 = 0.0;
  }
  if (v38 != 0.0 || v36 != 1.0)
  {
LABEL_20:
    if (v37 * (c * v34 - d * v35) + a * (d * v36 - v38 * v34) - b * (c * v36 - v38 * v35) != 0.0)
    {
      v43 = v35;
      v53 = v34;
      v44 = d;
      v45 = a;
      v46 = b;
      v47 = v36;
      result = swift_allocObject();
      *(double *)(result + 16) = v45;
      *(double *)(result + 24) = v46;
      *(double *)(result + 32) = v37;
      *(double *)(result + 40) = c;
      *(double *)(result + 48) = v44;
      *(double *)(result + 56) = v38;
      *(double *)(result + 64) = v43;
      *(double *)(result + 72) = v53;
      *(double *)(result + 80) = v47;
      v41 = 8;
      *(_BYTE *)(result + 88) = 1;
      goto LABEL_24;
    }
    goto LABEL_21;
  }
  if (a * d - b * c == 0.0)
  {
LABEL_21:
    _StringGuts.grow(_:)(28);
    v42._object = (void *)0x80000002352E1010;
    v42._countAndFlagsBits = 0xD00000000000001ALL;
    String.append(_:)(v42);
    _print_unlocked<A, B>(_:_:)();
    specialized static Log.externalWarning(_:)(0, 0xE000000000000000);
    swift_bridgeObjectRelease();
    result = 0;
    v41 = 19;
    goto LABEL_24;
  }
  if (a == 1.0 && b == 0.0 && c == 0.0 && d == 1.0)
  {
    result = 0;
    v40 = v34 + a1[1];
    *a1 = v35 + *a1;
    a1[1] = v40;
    v41 = 19;
  }
  else
  {
    v48 = v34;
    result = swift_allocObject();
    *(double *)(result + 16) = a;
    *(double *)(result + 24) = b;
    *(double *)(result + 32) = c;
    *(double *)(result + 40) = d;
    *(double *)(result + 48) = v35;
    *(double *)(result + 56) = v48;
    *(_QWORD *)(result + 72) = 0;
    *(_QWORD *)(result + 80) = 0;
    *(_QWORD *)(result + 64) = 0;
    v41 = 8;
    *(_BYTE *)(result + 88) = 0;
  }
LABEL_24:
  *(_QWORD *)a3 = result;
  *(_DWORD *)(a3 + 8) = 0;
  *(_BYTE *)(a3 + 12) = v41;
  return result;
}

uint64_t specialized GeometryEffectDisplayList.value.getter@<X0>(int a1@<W0>, unint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v6;
  unsigned __int16 v7;
  unsigned __int8 v8;
  uint64_t v9;
  double *v10;
  double v11;
  double v12;
  double *v13;
  double v14;
  double v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  double v19;
  double v20;
  uint64_t v21;
  double v22;
  double *v23;
  double v24;
  double v25;
  int v26;
  double v27;
  double v28;
  double v29;
  double v30;
  uint64_t v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  __int128 v35;
  double v36;
  double v37;
  __int128 v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  int v43;
  int v44;
  unint64_t v45;
  uint64_t result;
  uint64_t Value;
  uint64_t v48;
  __int128 v49;
  unint64_t v50;
  unsigned __int16 v51;
  uint64_t v52;
  __int128 v53;
  double v54;
  double v55;
  __int128 v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  unsigned __int16 v61;
  unsigned __int8 v62;
  int v63;

  v6 = MEMORY[0x24BEE4AF8];
  if (*MEMORY[0x24BE096C0] != (_DWORD)a2)
  {
    Value = AGGraphGetValue();
    v9 = *(_QWORD *)Value;
    v7 = *(_WORD *)(Value + 8);
    v8 = *(_BYTE *)(Value + 10);
    swift_bridgeObjectRetain();
    if (*(_QWORD *)(v9 + 16))
      goto LABEL_3;
LABEL_14:
    result = swift_bridgeObjectRelease();
    *(_QWORD *)a3 = v6;
    *(_WORD *)(a3 + 8) = 0;
    *(_BYTE *)(a3 + 10) = 0;
    return result;
  }
  v7 = 0;
  v8 = 0;
  v9 = MEMORY[0x24BEE4AF8];
  if (!*(_QWORD *)(MEMORY[0x24BEE4AF8] + 16))
    goto LABEL_14;
LABEL_3:
  v52 = a3;
  v51 = v7;
  v50 = HIDWORD(a2);
  v10 = (double *)AGGraphGetValue();
  v11 = *v10;
  v12 = v10[1];
  v13 = (double *)AGGraphGetValue();
  v14 = v11 - *v13;
  v15 = v12 - v13[1];
  v16 = AGGraphGetValue();
  v49 = *(_OWORD *)v16;
  v17 = *(_QWORD *)(v16 + 16);
  v18 = *(_QWORD *)(v16 + 24);
  v19 = *(double *)(v16 + 32);
  v20 = *(double *)(v16 + 40);
  v21 = *(_QWORD *)(v16 + 48);
  v22 = *(double *)(v16 + 56);
  type metadata accessor for CGSize(0);
  v23 = (double *)AGGraphGetValue();
  v24 = *v23;
  v25 = v23[1];
  v26 = *(unsigned __int8 *)AGGraphGetValue();
  v27 = v19 * v24;
  v28 = v20 * v25;
  if (v24 > v25)
    v29 = v24;
  else
    v29 = v25;
  v30 = v29 / v22;
  v31 = swift_allocObject();
  *(_OWORD *)(v31 + 16) = v49;
  v32 = v26 == 0;
  v33 = v31;
  v34 = 0x7FF8000000000000;
  if (!v32)
    v34 = *(_QWORD *)&v24;
  *(_QWORD *)(v31 + 32) = v17;
  *(_QWORD *)(v31 + 40) = v18;
  *(double *)(v31 + 48) = v27;
  *(double *)(v31 + 56) = v28;
  *(_QWORD *)(v31 + 64) = v21;
  *(double *)(v31 + 72) = v30;
  *(_QWORD *)(v31 + 80) = v34;
  *(_BYTE *)(v31 + 88) = 3;
  v54 = v14;
  v55 = v15;
  v35 = *(_OWORD *)AGGraphGetValue();
  ++static DisplayList.Version.lastValue;
  v56 = v35;
  v57 = static DisplayList.Version.lastValue;
  v58 = v33;
  v59 = 0x4000000800000000;
  v60 = v9;
  v62 = v8;
  v61 = v51;
  v63 = a1;
  LOBYTE(v53) = v50;
  swift_retain();
  DisplayList.Item.canonicalize(options:)((char *)&v53);
  v36 = v54;
  v37 = v55;
  v38 = v56;
  v40 = v57;
  v39 = v58;
  v42 = v59;
  v41 = v60;
  v43 = v61 | (v62 << 16);
  v44 = v63;
  v45 = v59 >> 62;
  if (v59 >> 62 != 3 || (v43 & 0xFFFFFF) != 0 || v59 != 0xC000000000000000 || v60 | v58)
  {
    type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<DisplayList.Item>, (uint64_t)&type metadata for DisplayList.Item, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
    v48 = swift_allocObject();
    *(_OWORD *)(v48 + 16) = xmmword_23527E860;
    *(double *)(v48 + 32) = v36;
    *(double *)(v48 + 40) = v37;
    *(_OWORD *)(v48 + 48) = v38;
    *(_QWORD *)(v48 + 64) = v40;
    *(_QWORD *)(v48 + 72) = v39;
    *(_QWORD *)(v48 + 80) = v42;
    *(_QWORD *)(v48 + 88) = v41;
    *(_BYTE *)(v48 + 98) = BYTE2(v43);
    *(_WORD *)(v48 + 96) = v43;
    *(_DWORD *)(v48 + 100) = v44;
    __asm { BR              X10 }
  }
  swift_release();
  result = outlined consume of DisplayList.Item.Value(0, 0xC000000000000000);
  *(_QWORD *)v52 = MEMORY[0x24BEE4AF8];
  *(_WORD *)(v52 + 8) = 0;
  *(_BYTE *)(v52 + 10) = 0;
  return result;
}

{
  uint64_t v6;
  unsigned __int16 v7;
  unsigned __int8 v8;
  uint64_t v9;
  float64x2_t *v10;
  double *v11;
  CGFloat v12;
  CGFloat v13;
  double v14;
  double v15;
  double *v16;
  double v17;
  double v18;
  char *v19;
  uint64_t v20;
  char v21;
  char v22;
  unint64_t v23;
  float64x2_t v24;
  __int128 *v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  float64x2_t v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  int v35;
  int v36;
  unint64_t v37;
  uint64_t result;
  uint64_t Value;
  uint64_t v40;
  unint64_t v41;
  char v42;
  uint64_t v43;
  __int128 v44;
  float64x2_t v45;
  __int128 v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unsigned __int16 v51;
  unsigned __int8 v52;
  int v53;
  float64x2_t v54[2];

  v6 = MEMORY[0x24BEE4AF8];
  if (*MEMORY[0x24BE096C0] == (_DWORD)a2)
  {
    v7 = 0;
    v8 = 0;
    v9 = MEMORY[0x24BEE4AF8];
    if (*(_QWORD *)(MEMORY[0x24BEE4AF8] + 16))
      goto LABEL_3;
LABEL_9:
    result = swift_bridgeObjectRelease();
    *(_QWORD *)a3 = v6;
    *(_WORD *)(a3 + 8) = 0;
    *(_BYTE *)(a3 + 10) = 0;
    return result;
  }
  Value = AGGraphGetValue();
  v9 = *(_QWORD *)Value;
  v7 = *(_WORD *)(Value + 8);
  v8 = *(_BYTE *)(Value + 10);
  swift_bridgeObjectRetain();
  if (!*(_QWORD *)(v9 + 16))
    goto LABEL_9;
LABEL_3:
  v43 = a3;
  v41 = HIDWORD(a2);
  v10 = (float64x2_t *)AGGraphGetValue();
  v54[0] = vsubq_f64(*v10, *(float64x2_t *)AGGraphGetValue());
  v11 = (double *)AGGraphGetValue();
  v12 = *v11;
  v13 = v11[1];
  v14 = v11[2];
  v15 = v11[3];
  type metadata accessor for CGSize(0);
  v16 = (double *)AGGraphGetValue();
  v17 = *v16;
  v18 = v16[1];
  v19 = (char *)AGGraphGetValue();
  specialized static DefaultGeometryEffectProvider.resolve(effect:origin:size:layoutDirection:)(v54[0].f64, *v19, (uint64_t)&v45, v12, v13, v14, v15, v17, v18);
  v20 = *(_QWORD *)&v45.f64[0];
  v21 = LOBYTE(v45.f64[1]);
  v22 = BYTE4(v45.f64[1]);
  v23 = LODWORD(v45.f64[1]) | ((unint64_t)BYTE4(v45.f64[1]) << 32) | 0x4000000000000000;
  v24 = v54[0];
  v25 = (__int128 *)AGGraphGetValue();
  v45 = v24;
  v26 = *v25;
  ++static DisplayList.Version.lastValue;
  v46 = v26;
  v47 = static DisplayList.Version.lastValue;
  v48 = v20;
  v49 = v23;
  v50 = v9;
  v52 = v8;
  v51 = v7;
  v53 = a1;
  LOBYTE(v44) = v41;
  v42 = v21;
  outlined copy of DisplayList.Effect(v20, v21, v22);
  DisplayList.Item.canonicalize(options:)((char *)&v44);
  v29 = v45;
  v28 = *(_OWORD *)&v29 >> 64;
  v27 = (uint64_t)v29;
  v30 = v46;
  v31 = v47;
  v32 = v48;
  v34 = v49;
  v33 = v50;
  v35 = v51 | (v52 << 16);
  v36 = v53;
  v37 = v49 >> 62;
  if (v49 >> 62 != 3 || (v35 & 0xFFFFFF) != 0 || v49 != 0xC000000000000000 || v50 | v48)
  {
    type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<DisplayList.Item>, (uint64_t)&type metadata for DisplayList.Item, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
    v40 = swift_allocObject();
    *(_OWORD *)(v40 + 16) = xmmword_23527E860;
    *(_QWORD *)(v40 + 32) = v27;
    *(_QWORD *)(v40 + 40) = v28;
    *(_OWORD *)(v40 + 48) = v30;
    *(_QWORD *)(v40 + 64) = v31;
    *(_QWORD *)(v40 + 72) = v32;
    *(_QWORD *)(v40 + 80) = v34;
    *(_QWORD *)(v40 + 88) = v33;
    *(_BYTE *)(v40 + 98) = BYTE2(v35);
    *(_WORD *)(v40 + 96) = v35;
    *(_DWORD *)(v40 + 100) = v36;
    __asm { BR              X10 }
  }
  outlined consume of DisplayList.Effect(v20, v42, v22);
  result = outlined consume of DisplayList.Item.Value(0, 0xC000000000000000);
  *(_QWORD *)v43 = MEMORY[0x24BEE4AF8];
  *(_WORD *)(v43 + 8) = 0;
  *(_BYTE *)(v43 + 10) = 0;
  return result;
}

uint64_t specialized GeometryEffectDisplayList.value.getter@<X0>(int a1@<W0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  char v3;
  uint64_t v6;
  unsigned __int16 v7;
  unsigned __int8 v8;
  uint64_t v9;
  double *v10;
  double v11;
  double v12;
  double *v13;
  double v14;
  double v15;
  double *v16;
  double v17;
  double v18;
  double v19;
  double *v20;
  double v21;
  double v22;
  _BYTE *v23;
  double v24;
  double v25;
  double v26;
  uint64_t v27;
  __int128 v28;
  double v29;
  double v30;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  int v36;
  int v37;
  unint64_t v38;
  uint64_t result;
  uint64_t Value;
  uint64_t v41;
  __int128 v42;
  double v43;
  double v44;
  __int128 v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unsigned __int16 v50;
  unsigned __int8 v51;
  int v52;

  v3 = BYTE4(a2);
  v6 = MEMORY[0x24BEE4AF8];
  if (*MEMORY[0x24BE096C0] != (_DWORD)a2)
  {
    Value = AGGraphGetValue();
    v9 = *(_QWORD *)Value;
    v7 = *(_WORD *)(Value + 8);
    v8 = *(_BYTE *)(Value + 10);
    swift_bridgeObjectRetain();
    if (*(_QWORD *)(v9 + 16))
      goto LABEL_3;
LABEL_14:
    result = swift_bridgeObjectRelease();
    *(_QWORD *)a3 = v6;
    *(_WORD *)(a3 + 8) = 0;
    *(_BYTE *)(a3 + 10) = 0;
    return result;
  }
  v7 = 0;
  v8 = 0;
  v9 = MEMORY[0x24BEE4AF8];
  if (!*(_QWORD *)(MEMORY[0x24BEE4AF8] + 16))
    goto LABEL_14;
LABEL_3:
  v10 = (double *)AGGraphGetValue();
  v11 = *v10;
  v12 = v10[1];
  v13 = (double *)AGGraphGetValue();
  v14 = v11 - *v13;
  v15 = v12 - v13[1];
  v16 = (double *)AGGraphGetValue();
  v17 = *v16;
  v18 = v16[1];
  v19 = v16[2];
  type metadata accessor for CGSize(0);
  v20 = (double *)AGGraphGetValue();
  v21 = *v20;
  v22 = v20[1];
  v23 = (_BYTE *)AGGraphGetValue();
  v24 = v18 * v21;
  v25 = v19 * v22;
  if (*v23)
    v26 = v21 - v24;
  else
    v26 = v24;
  if (*v23)
    v17 = (v17 * -128.0 + 0.0) * 0.0078125;
  v27 = swift_allocObject();
  *(double *)(v27 + 16) = v17;
  *(double *)(v27 + 24) = v26;
  *(double *)(v27 + 32) = v25;
  *(_OWORD *)(v27 + 40) = 0u;
  *(_OWORD *)(v27 + 56) = 0u;
  *(_OWORD *)(v27 + 72) = 0u;
  *(_BYTE *)(v27 + 88) = 2;
  v43 = v14;
  v44 = v15;
  v28 = *(_OWORD *)AGGraphGetValue();
  ++static DisplayList.Version.lastValue;
  v45 = v28;
  v46 = static DisplayList.Version.lastValue;
  v47 = v27;
  v48 = 0x4000000800000000;
  v49 = v9;
  v51 = v8;
  v50 = v7;
  v52 = a1;
  LOBYTE(v42) = v3;
  swift_retain();
  DisplayList.Item.canonicalize(options:)((char *)&v42);
  v29 = v43;
  v30 = v44;
  v31 = v45;
  v33 = v46;
  v32 = v47;
  v35 = v48;
  v34 = v49;
  v36 = v50 | (v51 << 16);
  v37 = v52;
  v38 = v48 >> 62;
  if (v48 >> 62 != 3 || (v36 & 0xFFFFFF) != 0 || v48 != 0xC000000000000000 || v49 | v47)
  {
    type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<DisplayList.Item>, (uint64_t)&type metadata for DisplayList.Item, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
    v41 = swift_allocObject();
    *(_OWORD *)(v41 + 16) = xmmword_23527E860;
    *(double *)(v41 + 32) = v29;
    *(double *)(v41 + 40) = v30;
    *(_OWORD *)(v41 + 48) = v31;
    *(_QWORD *)(v41 + 64) = v33;
    *(_QWORD *)(v41 + 72) = v32;
    *(_QWORD *)(v41 + 80) = v35;
    *(_QWORD *)(v41 + 88) = v34;
    *(_BYTE *)(v41 + 98) = BYTE2(v36);
    *(_WORD *)(v41 + 96) = v36;
    *(_DWORD *)(v41 + 100) = v37;
    __asm { BR              X10 }
  }
  swift_release();
  result = outlined consume of DisplayList.Item.Value(0, 0xC000000000000000);
  *(_QWORD *)a3 = MEMORY[0x24BEE4AF8];
  *(_WORD *)(a3 + 8) = 0;
  *(_BYTE *)(a3 + 10) = 0;
  return result;
}

void specialized GeometryEffectTransform.value.getter(uint64_t a1@<X8>)
{
  uint64_t Value;
  uint64_t v3;
  double v4;
  double v5;
  double *v6;
  double v7;
  double v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double v12;
  double v13;
  double v14;
  uint64_t v15;
  double *v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  uint64_t v25;
  float64x2_t v26;
  float64x2_t v27;
  double v28;
  double v29;
  float64x2_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  BOOL v34;
  Swift::String v35;
  uint64_t v36;
  int8x16_t v37;
  int8x16_t v38;
  double v39;
  double v40;
  __int128 v41;
  float64x2_t v42;
  float64x2_t v43;
  int8x16_t v44;
  double v45;
  float64x2_t v46;
  double v47;
  double v48;
  double v49;
  double v50;
  double v51[9];
  int8x16_t v52;
  double v53;
  float64x2_t v54;
  double v55;
  double v56;
  double v57;
  double v58;
  __int128 v59;
  uint64_t v60;
  uint64_t v61;
  __int128 v62;
  uint64_t v63;
  __int128 v64;

  Value = AGGraphGetValue();
  v3 = *(_QWORD *)Value;
  v4 = *(double *)(Value + 8);
  v5 = *(double *)(Value + 16);
  v39 = *(double *)(Value + 32);
  v40 = *(double *)(Value + 24);
  v6 = (double *)AGGraphGetValue();
  v7 = *v6 - v4;
  v8 = v6[1] - v5;
  v9 = AGGraphGetValue();
  v41 = *(_OWORD *)v9;
  v10 = *(_QWORD *)(v9 + 16);
  v11 = *(_QWORD *)(v9 + 24);
  v12 = *(double *)(v9 + 32);
  v13 = *(double *)(v9 + 40);
  v15 = *(_QWORD *)(v9 + 48);
  v14 = *(double *)(v9 + 56);
  type metadata accessor for CGSize(0);
  v16 = (double *)AGGraphGetValue();
  v17 = *v16;
  v18 = v16[1];
  v19 = v12 * *v16;
  if (*v16 <= v18)
    v17 = v16[1];
  v59 = v41;
  v60 = v10;
  v61 = v11;
  *(double *)&v62 = v19;
  *((double *)&v62 + 1) = v13 * v18;
  v63 = v15;
  *(double *)&v64 = v17 / v14;
  *((_QWORD *)&v64 + 1) = 0x7FF8000000000000;
  swift_retain();
  _Rotation3DEffect.Data.transform.getter((CGFloat *)v44.i64);
  v37 = v44;
  v20 = v45;
  v42 = v46;
  v22 = v47;
  v21 = v48;
  v23 = v49;
  v24 = v50;
  if (*(_BYTE *)AGGraphGetValue() == 1)
  {
    v25 = *(_QWORD *)AGGraphGetValue();
    v59 = 0xBFF0000000000000;
    v60 = 0;
    v61 = 0;
    v62 = xmmword_235281560;
    v63 = v25;
    v64 = xmmword_23528A280;
    ProjectionTransform.concatenating(_:)((double *)v44.i64, v51);
    ProjectionTransform.concatenating(_:)((double *)&v59, (double *)v52.i64);
    v26 = v54;
    v20 = v53;
    v22 = v55;
    v21 = v56;
    v23 = v57;
    v24 = v58;
    v27 = (float64x2_t)vextq_s8(v52, v52, 8uLL);
  }
  else
  {
    v27 = (float64x2_t)vextq_s8(v37, v37, 8uLL);
    v26 = v42;
  }
  v28 = v40 - v7;
  v29 = v39 - v8;
  v43 = v26;
  v38 = (int8x16_t)v27;
  if (v20 == 0.0 && v22 == 0.0 && v24 == 1.0)
  {
    v30 = vmulq_f64(v27, v26);
    if (vsubq_f64((float64x2_t)vextq_s8((int8x16_t)v30, (int8x16_t)v30, 8uLL), v30).f64[0] == 0.0)
    {
LABEL_16:
      _StringGuts.grow(_:)(28);
      v35._object = (void *)0x80000002352E1010;
      v35._countAndFlagsBits = 0xD00000000000001ALL;
      String.append(_:)(v35);
      _print_unlocked<A, B>(_:_:)();
      specialized static Log.externalWarning(_:)(0, 0xE000000000000000);
      swift_bridgeObjectRelease();
LABEL_20:
      *(_QWORD *)(a1 + 8) = 0;
      *(_QWORD *)(a1 + 16) = 0;
      *(_QWORD *)a1 = v3;
      *(double *)(a1 + 24) = v28;
      *(double *)(a1 + 32) = v29;
      return;
    }
    if ((vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vceqq_f64(v27, (float64x2_t)xmmword_23528A280), (int32x4_t)vceqq_f64(v26, (float64x2_t)xmmword_23528A280))))) & 1) == 0)
    {
      v28 = v28 - v21;
      v29 = v29 - v23;
      goto LABEL_20;
    }
    type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for Element<AffineTransformElement>, (uint64_t (*)(void))lazy protocol witness table accessor for type AffineTransformElement and conformance AffineTransformElement, (uint64_t)&type metadata for AffineTransformElement, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for Element);
    v31 = swift_allocObject();
    *(double *)(v31 + 32) = v28;
    *(double *)(v31 + 40) = v29;
    *(int8x16_t *)(v31 + 48) = vextq_s8(v38, v38, 8uLL);
    *(float64x2_t *)(v31 + 64) = v43;
    *(double *)(v31 + 80) = v21;
    *(double *)(v31 + 88) = v23;
    v32 = 1;
    *(_BYTE *)(v31 + 96) = 1;
    *(_QWORD *)(v31 + 16) = v3;
    if (!v3)
      goto LABEL_19;
    v33 = *(_QWORD *)(v3 + 24);
    v34 = __OFADD__(v33, 1);
    v32 = v33 + 1;
    if (!v34)
      goto LABEL_19;
    __break(1u);
  }
  if (v20 * (v23 * v26.f64[0] - vmuld_lane_f64(v21, v26, 1))
     + vmuld_lane_f64(vmuld_lane_f64(v24, v26, 1) - v22 * v23, v27, 1)
     - (v24 * v26.f64[0] - v22 * v21) * v27.f64[0] == 0.0)
    goto LABEL_16;
  type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for Element<ProjectionTransformElement>, (uint64_t (*)(void))lazy protocol witness table accessor for type ProjectionTransformElement and conformance ProjectionTransformElement, (uint64_t)&type metadata for ProjectionTransformElement, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for Element);
  v31 = swift_allocObject();
  *(double *)(v31 + 32) = v28;
  *(double *)(v31 + 40) = v29;
  *(int8x16_t *)(v31 + 48) = vextq_s8(v38, v38, 8uLL);
  *(double *)(v31 + 64) = v20;
  *(float64x2_t *)(v31 + 72) = v43;
  *(double *)(v31 + 88) = v22;
  *(double *)(v31 + 96) = v21;
  *(double *)(v31 + 104) = v23;
  *(double *)(v31 + 112) = v24;
  v32 = 1;
  *(_BYTE *)(v31 + 120) = 1;
  *(_QWORD *)(v31 + 16) = v3;
  if (!v3 || (v36 = *(_QWORD *)(v3 + 24), v34 = __OFADD__(v36, 1), v32 = v36 + 1, !v34))
  {
LABEL_19:
    *(_QWORD *)(v31 + 24) = v32;
    v28 = 0.0;
    v3 = v31;
    v29 = 0.0;
    goto LABEL_20;
  }
  __break(1u);
}

{
  uint64_t Value;
  uint64_t v3;
  double *v4;
  double v5;
  double v6;
  double *v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double *v12;
  double v13;
  double v14;
  uint64_t v15;
  double v16;
  double v17;
  CGFloat tx;
  CGFloat ty;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  CGFloat v23;
  CGFloat v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  double b;
  double a;
  double d;
  double c;
  CGFloat v32;
  double v33;
  uint64_t v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  Swift::String v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  BOOL v46;
  double v47;
  double v48;
  uint64_t v49;
  double v50;
  double v51;
  __int128 v52;
  __int128 v53;
  double v54;
  double v55;
  double v56;
  double v57;
  __int128 v58;
  __int128 v59;
  double v60;
  double v61[9];
  CGAffineTransform v62;
  double v63;
  double v64;
  double v65;
  CGAffineTransform t2;
  uint64_t v67;
  __int128 v68;
  CGAffineTransform t1;
  CGFloat v70;
  CGFloat v71;
  uint64_t v72;

  Value = AGGraphGetValue();
  v3 = *(_QWORD *)Value;
  v57 = *(double *)(Value + 8);
  v54 = *(double *)(Value + 16);
  v50 = *(double *)(Value + 32);
  v51 = *(double *)(Value + 24);
  v4 = (double *)AGGraphGetValue();
  v5 = *v4;
  v6 = v4[1];
  v7 = (double *)AGGraphGetValue();
  v9 = *v7;
  v8 = v7[1];
  v10 = v7[2];
  v11 = v7[3];
  type metadata accessor for CGSize(0);
  v12 = (double *)AGGraphGetValue();
  v13 = *v12;
  v14 = v12[1];
  if (v9 == 0.0)
  {
    v15 = one-time initialization token for leastNonzeroScaleFactor;
    swift_retain();
    if (v15 != -1)
      swift_once();
    v9 = *(double *)&static CGFloat.leastNonzeroScaleFactor;
  }
  else
  {
    swift_retain();
  }
  v16 = v10 * v13;
  v17 = v11 * v14;
  if (v8 == 0.0)
  {
    if (one-time initialization token for leastNonzeroScaleFactor != -1)
      swift_once();
    v8 = *(double *)&static CGFloat.leastNonzeroScaleFactor;
  }
  v55 = v6 - v54;
  v56 = v5 - v57;
  CGAffineTransformMakeTranslation(&t1, -v16, -v17);
  v58 = *(_OWORD *)&t1.a;
  v52 = *(_OWORD *)&t1.c;
  tx = t1.tx;
  ty = t1.ty;
  CGAffineTransformMakeScale(&t1, v9, v8);
  v20 = *(_OWORD *)&t1.a;
  v21 = *(_OWORD *)&t1.c;
  v22 = *(_OWORD *)&t1.tx;
  *(_OWORD *)&t1.a = v58;
  *(_OWORD *)&t1.c = v52;
  t1.tx = tx;
  t1.ty = ty;
  *(_OWORD *)&t2.a = v20;
  *(_OWORD *)&t2.c = v21;
  *(_OWORD *)&t2.tx = v22;
  CGAffineTransformConcat(&v62, &t1, &t2);
  v59 = *(_OWORD *)&v62.a;
  v53 = *(_OWORD *)&v62.c;
  v23 = v62.tx;
  v24 = v62.ty;
  CGAffineTransformMakeTranslation(&t1, v16, v17);
  v25 = *(_OWORD *)&t1.a;
  v26 = *(_OWORD *)&t1.c;
  v27 = *(_OWORD *)&t1.tx;
  *(_OWORD *)&t1.a = v59;
  *(_OWORD *)&t1.c = v53;
  t1.tx = v23;
  t1.ty = v24;
  *(_OWORD *)&t2.a = v25;
  *(_OWORD *)&t2.c = v26;
  *(_OWORD *)&t2.tx = v27;
  CGAffineTransformConcat(&v62, &t1, &t2);
  a = v62.a;
  b = v62.b;
  c = v62.c;
  d = v62.d;
  v33 = v62.tx;
  v32 = v62.ty;
  t1.a = v62.a;
  t1.b = v62.b;
  t1.c = 0.0;
  t1.d = v62.c;
  t1.tx = v62.d;
  t1.ty = 0.0;
  v70 = v62.tx;
  v71 = v62.ty;
  v72 = 0x3FF0000000000000;
  if (*(_BYTE *)AGGraphGetValue() == 1)
  {
    v34 = *(_QWORD *)AGGraphGetValue();
    t2.a = -1.0;
    memset(&t2.b, 0, 24);
    *(_OWORD *)&t2.tx = xmmword_235281560;
    v67 = v34;
    v68 = xmmword_23528A280;
    ProjectionTransform.concatenating(_:)(&t1.a, v61);
    ProjectionTransform.concatenating(_:)(&t2.a, &v62.a);
    a = v62.a;
    b = v62.b;
    v35 = v62.c;
    c = v62.d;
    d = v62.tx;
    v36 = v62.ty;
    v33 = v63;
    v60 = v64;
    v37 = v65;
  }
  else
  {
    v60 = v32;
    v37 = 1.0;
    v35 = 0.0;
    v36 = 0.0;
  }
  v38 = v51 - v56;
  v39 = v50 - v55;
  if (v35 == 0.0 && v36 == 0.0 && v37 == 1.0)
  {
    if (a * d - b * c != 0.0)
    {
      if (a == 1.0 && b == 0.0 && c == 0.0 && d == 1.0)
      {
        v40 = v38 - v33;
        v41 = v39 - v60;
LABEL_31:
        *(_QWORD *)(a1 + 8) = 0;
        *(_QWORD *)(a1 + 16) = 0;
        *(_QWORD *)a1 = v3;
        *(double *)(a1 + 24) = v40;
        *(double *)(a1 + 32) = v41;
        return;
      }
      goto LABEL_28;
    }
LABEL_23:
    _StringGuts.grow(_:)(28);
    v42._object = (void *)0x80000002352E1010;
    v42._countAndFlagsBits = 0xD00000000000001ALL;
    String.append(_:)(v42);
    _print_unlocked<A, B>(_:_:)();
    specialized static Log.externalWarning(_:)(0, 0xE000000000000000);
    swift_bridgeObjectRelease();
    v41 = v50 - v55;
    v40 = v51 - v56;
    goto LABEL_31;
  }
  if (v35 * (c * v60 - d * v33) + a * (d * v37 - v36 * v60) - b * (c * v37 - v36 * v33) == 0.0)
    goto LABEL_23;
  type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for Element<ProjectionTransformElement>, (uint64_t (*)(void))lazy protocol witness table accessor for type ProjectionTransformElement and conformance ProjectionTransformElement, (uint64_t)&type metadata for ProjectionTransformElement, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for Element);
  v43 = swift_allocObject();
  *(double *)(v43 + 32) = v51 - v56;
  *(double *)(v43 + 40) = v50 - v55;
  *(double *)(v43 + 48) = a;
  *(double *)(v43 + 56) = b;
  *(double *)(v43 + 64) = v35;
  *(double *)(v43 + 72) = c;
  *(double *)(v43 + 80) = d;
  *(double *)(v43 + 88) = v36;
  *(double *)(v43 + 96) = v33;
  *(double *)(v43 + 104) = v60;
  *(double *)(v43 + 112) = v37;
  v44 = 1;
  *(_BYTE *)(v43 + 120) = 1;
  *(_QWORD *)(v43 + 16) = v3;
  if (!v3)
    goto LABEL_30;
  v45 = *(_QWORD *)(v3 + 24);
  v46 = __OFADD__(v45, 1);
  v44 = v45 + 1;
  if (!v46)
    goto LABEL_30;
  __break(1u);
LABEL_28:
  v47 = v38;
  v48 = v39;
  type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for Element<AffineTransformElement>, (uint64_t (*)(void))lazy protocol witness table accessor for type AffineTransformElement and conformance AffineTransformElement, (uint64_t)&type metadata for AffineTransformElement, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for Element);
  v43 = swift_allocObject();
  *(double *)(v43 + 32) = v47;
  *(double *)(v43 + 40) = v48;
  *(double *)(v43 + 48) = a;
  *(double *)(v43 + 56) = b;
  *(double *)(v43 + 64) = c;
  *(double *)(v43 + 72) = d;
  *(double *)(v43 + 80) = v33;
  *(double *)(v43 + 88) = v60;
  v44 = 1;
  *(_BYTE *)(v43 + 96) = 1;
  *(_QWORD *)(v43 + 16) = v3;
  if (!v3 || (v49 = *(_QWORD *)(v3 + 24), v46 = __OFADD__(v49, 1), v44 = v49 + 1, !v46))
  {
LABEL_30:
    *(_QWORD *)(v43 + 24) = v44;
    v40 = 0.0;
    v3 = v43;
    v41 = 0.0;
    goto LABEL_31;
  }
  __break(1u);
}

