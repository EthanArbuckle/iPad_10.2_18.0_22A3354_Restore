_BYTE *sub_235094114(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_235094134(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_23509413C(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_235094144(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_23509414C(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_235094154(_DWORD *result)
{
  *result = 0;
  return result;
}

uint64_t base witness table accessor for Equatable in TimeDataSource<A><A>.DateStorage.IdentityWithPauseCodingKeys()
{
  return lazy protocol witness table accessor for type TimeDataSource<Date><A>.DateStorage and conformance TimeDataSource<A><A>.DateStorage(&lazy protocol witness table cache variable for type TimeDataSource<Date><A>.DateStorage.IdentityWithPauseCodingKeys and conformance TimeDataSource<A><A>.DateStorage.IdentityWithPauseCodingKeys, &lazy cache variable for type metadata for TimeDataSource<Date><A>.DateStorage.IdentityWithPauseCodingKeys, (uint64_t (*)(_QWORD))type metadata accessor for TimeDataSource<A>.DateStorage.IdentityWithPauseCodingKeys, (uint64_t)&protocol conformance descriptor for TimeDataSource<A><A>.DateStorage.IdentityWithPauseCodingKeys);
}

uint64_t base witness table accessor for Equatable in TimeDataSource<A><A>.DateStorage.CodingKeys()
{
  return lazy protocol witness table accessor for type TimeDataSource<Date><A>.DateStorage and conformance TimeDataSource<A><A>.DateStorage(&lazy protocol witness table cache variable for type TimeDataSource<Date><A>.DateStorage.CodingKeys and conformance TimeDataSource<A><A>.DateStorage.CodingKeys, &lazy cache variable for type metadata for TimeDataSource<Date><A>.DateStorage.CodingKeys, (uint64_t (*)(_QWORD))type metadata accessor for TimeDataSource<A>.DateStorage.CodingKeys, (uint64_t)&protocol conformance descriptor for TimeDataSource<A><A>.DateStorage.CodingKeys);
}

uint64_t base witness table accessor for Equatable in TimeDataSource<A><A>.DurationStorage.DurationOffsetCodingKeys()
{
  return lazy protocol witness table accessor for type TimeDataSource<Date><A>.DateStorage and conformance TimeDataSource<A><A>.DateStorage(&lazy protocol witness table cache variable for type TimeDataSource<Duration><A>.DurationStorage.DurationOffsetCodingKeys and conformance TimeDataSource<A><A>.DurationStorage.DurationOffsetCodingKeys, &lazy cache variable for type metadata for TimeDataSource<Duration><A>.DurationStorage.DurationOffsetCodingKeys, (uint64_t (*)(_QWORD))type metadata accessor for TimeDataSource<A>.DurationStorage.DurationOffsetCodingKeys, (uint64_t)&protocol conformance descriptor for TimeDataSource<A><A>.DurationStorage.DurationOffsetCodingKeys);
}

uint64_t base witness table accessor for Equatable in TimeDataSource<A><A>.DurationStorage.CodingKeys()
{
  return lazy protocol witness table accessor for type TimeDataSource<Date><A>.DateStorage and conformance TimeDataSource<A><A>.DateStorage(&lazy protocol witness table cache variable for type TimeDataSource<Duration><A>.DurationStorage.CodingKeys and conformance TimeDataSource<A><A>.DurationStorage.CodingKeys, &lazy cache variable for type metadata for TimeDataSource<Duration><A>.DurationStorage.CodingKeys, (uint64_t (*)(_QWORD))type metadata accessor for TimeDataSource<A>.DurationStorage.CodingKeys, (uint64_t)&protocol conformance descriptor for TimeDataSource<A><A>.DurationStorage.CodingKeys);
}

uint64_t base witness table accessor for Equatable in TimeDataSource<A><A>.DateRangeStorage.DateRangeEndingAtCodingKeys()
{
  return lazy protocol witness table accessor for type TimeDataSource<Date><A>.DateStorage and conformance TimeDataSource<A><A>.DateStorage(&lazy protocol witness table cache variable for type TimeDataSource<Range<Date>><A>.DateRangeStorage.DateRangeEndingAtCodingKeys and conformance TimeDataSource<A><A>.DateRangeStorage.DateRangeEndingAtCodingKeys, &lazy cache variable for type metadata for TimeDataSource<Range<Date>><A>.DateRangeStorage.DateRangeEndingAtCodingKeys, (uint64_t (*)(_QWORD))type metadata accessor for TimeDataSource<A>.DateRangeStorage.DateRangeEndingAtCodingKeys, (uint64_t)&protocol conformance descriptor for TimeDataSource<A><A>.DateRangeStorage.DateRangeEndingAtCodingKeys);
}

uint64_t base witness table accessor for Equatable in TimeDataSource<A><A>.DateRangeStorage.DateRangeStartingAtCodingKeys()
{
  return lazy protocol witness table accessor for type TimeDataSource<Date><A>.DateStorage and conformance TimeDataSource<A><A>.DateStorage(&lazy protocol witness table cache variable for type TimeDataSource<Range<Date>><A>.DateRangeStorage.DateRangeStartingAtCodingKeys and conformance TimeDataSource<A><A>.DateRangeStorage.DateRangeStartingAtCodingKeys, &lazy cache variable for type metadata for TimeDataSource<Range<Date>><A>.DateRangeStorage.DateRangeStartingAtCodingKeys, (uint64_t (*)(_QWORD))type metadata accessor for TimeDataSource<A>.DateRangeStorage.DateRangeStartingAtCodingKeys, (uint64_t)&protocol conformance descriptor for TimeDataSource<A><A>.DateRangeStorage.DateRangeStartingAtCodingKeys);
}

uint64_t base witness table accessor for Equatable in TimeDataSource<A><A>.DateRangeStorage.CodingKeys()
{
  return lazy protocol witness table accessor for type TimeDataSource<Date><A>.DateStorage and conformance TimeDataSource<A><A>.DateStorage(&lazy protocol witness table cache variable for type TimeDataSource<Range<Date>><A>.DateRangeStorage.CodingKeys and conformance TimeDataSource<A><A>.DateRangeStorage.CodingKeys, &lazy cache variable for type metadata for TimeDataSource<Range<Date>><A>.DateRangeStorage.CodingKeys, (uint64_t (*)(_QWORD))type metadata accessor for TimeDataSource<A>.DateRangeStorage.CodingKeys, (uint64_t)&protocol conformance descriptor for TimeDataSource<A><A>.DateRangeStorage.CodingKeys);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in TimeDataSource<A><A>.DateRangeStorage.CodingKeys()
{
  return lazy protocol witness table accessor for type TimeDataSource<Date><A>.DateStorage and conformance TimeDataSource<A><A>.DateStorage(&lazy protocol witness table cache variable for type TimeDataSource<Range<Date>><A>.DateRangeStorage.CodingKeys and conformance TimeDataSource<A><A>.DateRangeStorage.CodingKeys, &lazy cache variable for type metadata for TimeDataSource<Range<Date>><A>.DateRangeStorage.CodingKeys, (uint64_t (*)(_QWORD))type metadata accessor for TimeDataSource<A>.DateRangeStorage.CodingKeys, (uint64_t)&protocol conformance descriptor for TimeDataSource<A><A>.DateRangeStorage.CodingKeys);
}

uint64_t base witness table accessor for CustomStringConvertible in TimeDataSource<A><A>.DateRangeStorage.CodingKeys()
{
  return lazy protocol witness table accessor for type TimeDataSource<Date><A>.DateStorage and conformance TimeDataSource<A><A>.DateStorage(&lazy protocol witness table cache variable for type TimeDataSource<Range<Date>><A>.DateRangeStorage.CodingKeys and conformance TimeDataSource<A><A>.DateRangeStorage.CodingKeys, &lazy cache variable for type metadata for TimeDataSource<Range<Date>><A>.DateRangeStorage.CodingKeys, (uint64_t (*)(_QWORD))type metadata accessor for TimeDataSource<A>.DateRangeStorage.CodingKeys, (uint64_t)&protocol conformance descriptor for TimeDataSource<A><A>.DateRangeStorage.CodingKeys);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in TimeDataSource<A><A>.DateRangeStorage.DateRangeStartingAtCodingKeys()
{
  return lazy protocol witness table accessor for type TimeDataSource<Date><A>.DateStorage and conformance TimeDataSource<A><A>.DateStorage(&lazy protocol witness table cache variable for type TimeDataSource<Range<Date>><A>.DateRangeStorage.DateRangeStartingAtCodingKeys and conformance TimeDataSource<A><A>.DateRangeStorage.DateRangeStartingAtCodingKeys, &lazy cache variable for type metadata for TimeDataSource<Range<Date>><A>.DateRangeStorage.DateRangeStartingAtCodingKeys, (uint64_t (*)(_QWORD))type metadata accessor for TimeDataSource<A>.DateRangeStorage.DateRangeStartingAtCodingKeys, (uint64_t)&protocol conformance descriptor for TimeDataSource<A><A>.DateRangeStorage.DateRangeStartingAtCodingKeys);
}

uint64_t base witness table accessor for CustomStringConvertible in TimeDataSource<A><A>.DateRangeStorage.DateRangeStartingAtCodingKeys()
{
  return lazy protocol witness table accessor for type TimeDataSource<Date><A>.DateStorage and conformance TimeDataSource<A><A>.DateStorage(&lazy protocol witness table cache variable for type TimeDataSource<Range<Date>><A>.DateRangeStorage.DateRangeStartingAtCodingKeys and conformance TimeDataSource<A><A>.DateRangeStorage.DateRangeStartingAtCodingKeys, &lazy cache variable for type metadata for TimeDataSource<Range<Date>><A>.DateRangeStorage.DateRangeStartingAtCodingKeys, (uint64_t (*)(_QWORD))type metadata accessor for TimeDataSource<A>.DateRangeStorage.DateRangeStartingAtCodingKeys, (uint64_t)&protocol conformance descriptor for TimeDataSource<A><A>.DateRangeStorage.DateRangeStartingAtCodingKeys);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in TimeDataSource<A><A>.DateRangeStorage.DateRangeEndingAtCodingKeys()
{
  return lazy protocol witness table accessor for type TimeDataSource<Date><A>.DateStorage and conformance TimeDataSource<A><A>.DateStorage(&lazy protocol witness table cache variable for type TimeDataSource<Range<Date>><A>.DateRangeStorage.DateRangeEndingAtCodingKeys and conformance TimeDataSource<A><A>.DateRangeStorage.DateRangeEndingAtCodingKeys, &lazy cache variable for type metadata for TimeDataSource<Range<Date>><A>.DateRangeStorage.DateRangeEndingAtCodingKeys, (uint64_t (*)(_QWORD))type metadata accessor for TimeDataSource<A>.DateRangeStorage.DateRangeEndingAtCodingKeys, (uint64_t)&protocol conformance descriptor for TimeDataSource<A><A>.DateRangeStorage.DateRangeEndingAtCodingKeys);
}

uint64_t base witness table accessor for CustomStringConvertible in TimeDataSource<A><A>.DateRangeStorage.DateRangeEndingAtCodingKeys()
{
  return lazy protocol witness table accessor for type TimeDataSource<Date><A>.DateStorage and conformance TimeDataSource<A><A>.DateStorage(&lazy protocol witness table cache variable for type TimeDataSource<Range<Date>><A>.DateRangeStorage.DateRangeEndingAtCodingKeys and conformance TimeDataSource<A><A>.DateRangeStorage.DateRangeEndingAtCodingKeys, &lazy cache variable for type metadata for TimeDataSource<Range<Date>><A>.DateRangeStorage.DateRangeEndingAtCodingKeys, (uint64_t (*)(_QWORD))type metadata accessor for TimeDataSource<A>.DateRangeStorage.DateRangeEndingAtCodingKeys, (uint64_t)&protocol conformance descriptor for TimeDataSource<A><A>.DateRangeStorage.DateRangeEndingAtCodingKeys);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in TimeDataSource<A><A>.DurationStorage.CodingKeys()
{
  return lazy protocol witness table accessor for type TimeDataSource<Date><A>.DateStorage and conformance TimeDataSource<A><A>.DateStorage(&lazy protocol witness table cache variable for type TimeDataSource<Duration><A>.DurationStorage.CodingKeys and conformance TimeDataSource<A><A>.DurationStorage.CodingKeys, &lazy cache variable for type metadata for TimeDataSource<Duration><A>.DurationStorage.CodingKeys, (uint64_t (*)(_QWORD))type metadata accessor for TimeDataSource<A>.DurationStorage.CodingKeys, (uint64_t)&protocol conformance descriptor for TimeDataSource<A><A>.DurationStorage.CodingKeys);
}

uint64_t base witness table accessor for CustomStringConvertible in TimeDataSource<A><A>.DurationStorage.CodingKeys()
{
  return lazy protocol witness table accessor for type TimeDataSource<Date><A>.DateStorage and conformance TimeDataSource<A><A>.DateStorage(&lazy protocol witness table cache variable for type TimeDataSource<Duration><A>.DurationStorage.CodingKeys and conformance TimeDataSource<A><A>.DurationStorage.CodingKeys, &lazy cache variable for type metadata for TimeDataSource<Duration><A>.DurationStorage.CodingKeys, (uint64_t (*)(_QWORD))type metadata accessor for TimeDataSource<A>.DurationStorage.CodingKeys, (uint64_t)&protocol conformance descriptor for TimeDataSource<A><A>.DurationStorage.CodingKeys);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in TimeDataSource<A><A>.DurationStorage.DurationOffsetCodingKeys()
{
  return lazy protocol witness table accessor for type TimeDataSource<Date><A>.DateStorage and conformance TimeDataSource<A><A>.DateStorage(&lazy protocol witness table cache variable for type TimeDataSource<Duration><A>.DurationStorage.DurationOffsetCodingKeys and conformance TimeDataSource<A><A>.DurationStorage.DurationOffsetCodingKeys, &lazy cache variable for type metadata for TimeDataSource<Duration><A>.DurationStorage.DurationOffsetCodingKeys, (uint64_t (*)(_QWORD))type metadata accessor for TimeDataSource<A>.DurationStorage.DurationOffsetCodingKeys, (uint64_t)&protocol conformance descriptor for TimeDataSource<A><A>.DurationStorage.DurationOffsetCodingKeys);
}

uint64_t base witness table accessor for CustomStringConvertible in TimeDataSource<A><A>.DurationStorage.DurationOffsetCodingKeys()
{
  return lazy protocol witness table accessor for type TimeDataSource<Date><A>.DateStorage and conformance TimeDataSource<A><A>.DateStorage(&lazy protocol witness table cache variable for type TimeDataSource<Duration><A>.DurationStorage.DurationOffsetCodingKeys and conformance TimeDataSource<A><A>.DurationStorage.DurationOffsetCodingKeys, &lazy cache variable for type metadata for TimeDataSource<Duration><A>.DurationStorage.DurationOffsetCodingKeys, (uint64_t (*)(_QWORD))type metadata accessor for TimeDataSource<A>.DurationStorage.DurationOffsetCodingKeys, (uint64_t)&protocol conformance descriptor for TimeDataSource<A><A>.DurationStorage.DurationOffsetCodingKeys);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in TimeDataSource<A><A>.DateStorage.CodingKeys()
{
  return lazy protocol witness table accessor for type TimeDataSource<Date><A>.DateStorage and conformance TimeDataSource<A><A>.DateStorage(&lazy protocol witness table cache variable for type TimeDataSource<Date><A>.DateStorage.CodingKeys and conformance TimeDataSource<A><A>.DateStorage.CodingKeys, &lazy cache variable for type metadata for TimeDataSource<Date><A>.DateStorage.CodingKeys, (uint64_t (*)(_QWORD))type metadata accessor for TimeDataSource<A>.DateStorage.CodingKeys, (uint64_t)&protocol conformance descriptor for TimeDataSource<A><A>.DateStorage.CodingKeys);
}

uint64_t base witness table accessor for CustomStringConvertible in TimeDataSource<A><A>.DateStorage.CodingKeys()
{
  return lazy protocol witness table accessor for type TimeDataSource<Date><A>.DateStorage and conformance TimeDataSource<A><A>.DateStorage(&lazy protocol witness table cache variable for type TimeDataSource<Date><A>.DateStorage.CodingKeys and conformance TimeDataSource<A><A>.DateStorage.CodingKeys, &lazy cache variable for type metadata for TimeDataSource<Date><A>.DateStorage.CodingKeys, (uint64_t (*)(_QWORD))type metadata accessor for TimeDataSource<A>.DateStorage.CodingKeys, (uint64_t)&protocol conformance descriptor for TimeDataSource<A><A>.DateStorage.CodingKeys);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in TimeDataSource<A><A>.DateStorage.IdentityCodingKeys()
{
  return lazy protocol witness table accessor for type TimeDataSource<Date><A>.DateStorage and conformance TimeDataSource<A><A>.DateStorage(&lazy protocol witness table cache variable for type TimeDataSource<Date><A>.DateStorage.IdentityCodingKeys and conformance TimeDataSource<A><A>.DateStorage.IdentityCodingKeys, &lazy cache variable for type metadata for TimeDataSource<Date><A>.DateStorage.IdentityCodingKeys, (uint64_t (*)(_QWORD))type metadata accessor for TimeDataSource<A>.DateStorage.IdentityCodingKeys, (uint64_t)&protocol conformance descriptor for TimeDataSource<A><A>.DateStorage.IdentityCodingKeys);
}

uint64_t base witness table accessor for CustomStringConvertible in TimeDataSource<A><A>.DateStorage.IdentityCodingKeys()
{
  return lazy protocol witness table accessor for type TimeDataSource<Date><A>.DateStorage and conformance TimeDataSource<A><A>.DateStorage(&lazy protocol witness table cache variable for type TimeDataSource<Date><A>.DateStorage.IdentityCodingKeys and conformance TimeDataSource<A><A>.DateStorage.IdentityCodingKeys, &lazy cache variable for type metadata for TimeDataSource<Date><A>.DateStorage.IdentityCodingKeys, (uint64_t (*)(_QWORD))type metadata accessor for TimeDataSource<A>.DateStorage.IdentityCodingKeys, (uint64_t)&protocol conformance descriptor for TimeDataSource<A><A>.DateStorage.IdentityCodingKeys);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in TimeDataSource<A><A>.DateStorage.IdentityWithPauseCodingKeys()
{
  return lazy protocol witness table accessor for type TimeDataSource<Date><A>.DateStorage and conformance TimeDataSource<A><A>.DateStorage(&lazy protocol witness table cache variable for type TimeDataSource<Date><A>.DateStorage.IdentityWithPauseCodingKeys and conformance TimeDataSource<A><A>.DateStorage.IdentityWithPauseCodingKeys, &lazy cache variable for type metadata for TimeDataSource<Date><A>.DateStorage.IdentityWithPauseCodingKeys, (uint64_t (*)(_QWORD))type metadata accessor for TimeDataSource<A>.DateStorage.IdentityWithPauseCodingKeys, (uint64_t)&protocol conformance descriptor for TimeDataSource<A><A>.DateStorage.IdentityWithPauseCodingKeys);
}

uint64_t base witness table accessor for CustomStringConvertible in TimeDataSource<A><A>.DateStorage.IdentityWithPauseCodingKeys()
{
  return lazy protocol witness table accessor for type TimeDataSource<Date><A>.DateStorage and conformance TimeDataSource<A><A>.DateStorage(&lazy protocol witness table cache variable for type TimeDataSource<Date><A>.DateStorage.IdentityWithPauseCodingKeys and conformance TimeDataSource<A><A>.DateStorage.IdentityWithPauseCodingKeys, &lazy cache variable for type metadata for TimeDataSource<Date><A>.DateStorage.IdentityWithPauseCodingKeys, (uint64_t (*)(_QWORD))type metadata accessor for TimeDataSource<A>.DateStorage.IdentityWithPauseCodingKeys, (uint64_t)&protocol conformance descriptor for TimeDataSource<A><A>.DateStorage.IdentityWithPauseCodingKeys);
}

void type metadata accessor for (TimeDataSource<Duration><A>.DurationStorage, TimeDataSource<Duration><A>.DurationStorage)(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t (*a4)(_QWORD))
{
  unint64_t TupleTypeMetadata2;
  uint64_t v6;

  if (!*a2)
  {
    type metadata accessor for TimeDataSource<Date><A>.DateStorage(255, a3, a4);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v6)
      atomic_store(TupleTypeMetadata2, a2);
  }
}

uint64_t static HermiteCurve.linear(start:end:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  double v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  void (*v23)(char *, uint64_t, uint64_t, double);
  uint64_t v25;
  uint64_t v26;

  v26 = a5;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)&v25 - v13;
  MEMORY[0x24BDAC7A8](v15);
  v17 = (char *)&v25 - v16;
  v19 = MEMORY[0x24BDAC7A8](v18);
  v21 = (char *)&v25 - v20;
  v23 = *(void (**)(char *, uint64_t, uint64_t, double))(v22 + 16);
  v23((char *)&v25 - v20, a1, AssociatedTypeWitness, v19);
  ((void (*)(char *, uint64_t, uint64_t))v23)(v17, a2, AssociatedTypeWitness);
  swift_getAssociatedConformanceWitness();
  dispatch thunk of static AdditiveArithmetic.- infix(_:_:)();
  dispatch thunk of static AdditiveArithmetic.- infix(_:_:)();
  return HermiteCurve.init(start:end:startTangent:endTangent:)((uint64_t)v21, (uint64_t)v17, (uint64_t)v14, (uint64_t)v11, a3, a4, v26);
}

uint64_t static HermiteCurve.hermite(start:end:startTangent:endTangent:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  double v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  void (*v25)(char *, uint64_t, uint64_t, double);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v28 = a3;
  v29 = a4;
  v30 = a7;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v13 = (char *)&v27 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v14);
  v16 = (char *)&v27 - v15;
  MEMORY[0x24BDAC7A8](v17);
  v19 = (char *)&v27 - v18;
  v21 = MEMORY[0x24BDAC7A8](v20);
  v23 = (char *)&v27 - v22;
  v25 = *(void (**)(char *, uint64_t, uint64_t, double))(v24 + 16);
  v25((char *)&v27 - v22, a1, AssociatedTypeWitness, v21);
  ((void (*)(char *, uint64_t, uint64_t))v25)(v19, a2, AssociatedTypeWitness);
  ((void (*)(char *, uint64_t, uint64_t))v25)(v16, v28, AssociatedTypeWitness);
  ((void (*)(char *, uint64_t, uint64_t))v25)(v13, v29, AssociatedTypeWitness);
  return HermiteCurve.init(start:end:startTangent:endTangent:)((uint64_t)v23, (uint64_t)v19, (uint64_t)v16, (uint64_t)v13, a5, a6, v30);
}

uint64_t HermiteCurve.init(start:end:startTangent:endTangent:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v15;
  int *v16;
  void (*v18)(uint64_t, uint64_t, uint64_t);

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v18 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 32);
  v18(a7, a1, AssociatedTypeWitness);
  v16 = (int *)type metadata accessor for HermiteCurve(0, a5, a6, v15);
  v18(a7 + v16[9], a2, AssociatedTypeWitness);
  v18(a7 + v16[10], a3, AssociatedTypeWitness);
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v18)(a7 + v16[11], a4, AssociatedTypeWitness);
}

uint64_t HermiteCurve.value(at:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  double v28;
  uint64_t v29;
  double v30;
  uint64_t v31;
  void (*v32)(double);
  uint64_t v33;
  uint64_t AssociatedConformanceWitness;
  char *v35;
  uint64_t v36;
  void (*v37)(char *, uint64_t);
  char *v38;
  uint64_t v39;
  char *v40;
  char *v42;
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;

  v49 = a2;
  v6 = *(_QWORD *)(a1 + 24);
  v46 = *(_QWORD *)(a1 + 16);
  v47 = v6;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v43 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v9 = (char *)&v42 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v42 - v11;
  MEMORY[0x24BDAC7A8](v13);
  v15 = (char *)&v42 - v14;
  MEMORY[0x24BDAC7A8](v16);
  v48 = (char *)&v42 - v17;
  MEMORY[0x24BDAC7A8](v18);
  v20 = (char *)&v42 - v19;
  v45 = (char *)&v42 - v19;
  MEMORY[0x24BDAC7A8](v21);
  v23 = (char *)&v42 - v22;
  MEMORY[0x24BDAC7A8](v24);
  v26 = (char *)&v42 - v25;
  v28 = MEMORY[0x24BDAC7A8](v27);
  v42 = (char *)&v42 - v29;
  v30 = a3 * a3 * a3;
  v32 = *(void (**)(double))(v31 + 16);
  v32(v28);
  ((void (*)(char *, uint64_t, uint64_t))v32)(v26, v3 + *(int *)(a1 + 40), AssociatedTypeWitness);
  v33 = v3 + *(int *)(a1 + 36);
  v44 = v23;
  ((void (*)(char *, uint64_t, uint64_t))v32)(v23, v33, AssociatedTypeWitness);
  ((void (*)(char *, uint64_t, uint64_t))v32)(v20, v3 + *(int *)(a1 + 44), AssociatedTypeWitness);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v35 = v42;
  VectorArithmetic.scaled(by:)(AssociatedTypeWitness, AssociatedConformanceWitness, (uint64_t)v12, v30 + v30 - a3 * a3 * 3.0 + 1.0);
  VectorArithmetic.scaled(by:)(AssociatedTypeWitness, AssociatedConformanceWitness, (uint64_t)v9, a3 * a3 * 3.0 - (v30 + v30));
  v36 = *(_QWORD *)(AssociatedConformanceWitness + 8);
  MEMORY[0x23B7C7090](v12, v9, AssociatedTypeWitness, v36);
  v37 = *(void (**)(char *, uint64_t))(v43 + 8);
  v37(v9, AssociatedTypeWitness);
  v37(v12, AssociatedTypeWitness);
  VectorArithmetic.scaled(by:)(AssociatedTypeWitness, AssociatedConformanceWitness, (uint64_t)v12, v30 - (a3 * a3 + a3 * a3) + a3);
  v38 = v48;
  MEMORY[0x23B7C7090](v15, v12, AssociatedTypeWitness, v36);
  v37(v12, AssociatedTypeWitness);
  v37(v15, AssociatedTypeWitness);
  v39 = AssociatedConformanceWitness;
  v40 = v45;
  VectorArithmetic.scaled(by:)(AssociatedTypeWitness, v39, (uint64_t)v15, v30 - a3 * a3);
  MEMORY[0x23B7C7090](v38, v15, AssociatedTypeWitness, v36);
  v37(v15, AssociatedTypeWitness);
  v37(v38, AssociatedTypeWitness);
  v37(v40, AssociatedTypeWitness);
  v37(v44, AssociatedTypeWitness);
  v37(v26, AssociatedTypeWitness);
  return ((uint64_t (*)(char *, uint64_t))v37)(v35, AssociatedTypeWitness);
}

uint64_t HermiteCurve.velocity(at:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  double v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(double);
  uint64_t v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  uint64_t AssociatedConformanceWitness;
  char *v39;
  uint64_t v40;
  void (*v41)(char *, uint64_t);
  char *v42;
  uint64_t v43;
  char *v44;
  char *v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;

  v53 = a2;
  v6 = *(_QWORD *)(a1 + 24);
  v50 = *(_QWORD *)(a1 + 16);
  v51 = v6;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v47 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v9 = (char *)&v46 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v46 - v11;
  MEMORY[0x24BDAC7A8](v13);
  v15 = (char *)&v46 - v14;
  MEMORY[0x24BDAC7A8](v16);
  v52 = (char *)&v46 - v17;
  MEMORY[0x24BDAC7A8](v18);
  v20 = (char *)&v46 - v19;
  v49 = (char *)&v46 - v19;
  MEMORY[0x24BDAC7A8](v21);
  v23 = (char *)&v46 - v22;
  MEMORY[0x24BDAC7A8](v24);
  v26 = (char *)&v46 - v25;
  v28 = MEMORY[0x24BDAC7A8](v27);
  v46 = (char *)&v46 - v29;
  v31 = *(void (**)(double))(v30 + 16);
  v31(v28);
  ((void (*)(char *, uint64_t, uint64_t))v31)(v26, v3 + *(int *)(a1 + 40), AssociatedTypeWitness);
  v32 = v3 + *(int *)(a1 + 36);
  v48 = v23;
  ((void (*)(char *, uint64_t, uint64_t))v31)(v23, v32, AssociatedTypeWitness);
  ((void (*)(char *, uint64_t, uint64_t))v31)(v20, v3 + *(int *)(a1 + 44), AssociatedTypeWitness);
  v33 = a3 * a3 * 6.0 - a3 * 6.0;
  v34 = a3 * 6.0 - a3 * a3 * 6.0;
  v35 = a3 * a3 * 3.0;
  v36 = v35 + a3 * -4.0 + 1.0;
  v37 = v35 - (a3 + a3);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v39 = v46;
  VectorArithmetic.scaled(by:)(AssociatedTypeWitness, AssociatedConformanceWitness, (uint64_t)v12, v33);
  VectorArithmetic.scaled(by:)(AssociatedTypeWitness, AssociatedConformanceWitness, (uint64_t)v9, v34);
  v40 = *(_QWORD *)(AssociatedConformanceWitness + 8);
  MEMORY[0x23B7C7090](v12, v9, AssociatedTypeWitness, v40);
  v41 = *(void (**)(char *, uint64_t))(v47 + 8);
  v41(v9, AssociatedTypeWitness);
  v41(v12, AssociatedTypeWitness);
  VectorArithmetic.scaled(by:)(AssociatedTypeWitness, AssociatedConformanceWitness, (uint64_t)v12, v36);
  v42 = v52;
  MEMORY[0x23B7C7090](v15, v12, AssociatedTypeWitness, v40);
  v41(v12, AssociatedTypeWitness);
  v41(v15, AssociatedTypeWitness);
  v43 = AssociatedConformanceWitness;
  v44 = v49;
  VectorArithmetic.scaled(by:)(AssociatedTypeWitness, v43, (uint64_t)v15, v37);
  MEMORY[0x23B7C7090](v42, v15, AssociatedTypeWitness, v40);
  v41(v15, AssociatedTypeWitness);
  v41(v42, AssociatedTypeWitness);
  v41(v44, AssociatedTypeWitness);
  v41(v48, AssociatedTypeWitness);
  v41(v26, AssociatedTypeWitness);
  return ((uint64_t (*)(char *, uint64_t))v41)(v39, AssociatedTypeWitness);
}

uint64_t HermiteCurve.value(atArcLength:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, Swift::Double a3@<D0>)
{
  double v5;

  v5 = HermiteCurve.parametricTime(forArcLength:)(a3);
  return HermiteCurve.value(at:)(a1, a2, v5);
}

Swift::Double __swiftcall HermiteCurve.parametricTime(forArcLength:)(Swift::Double forArcLength)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  double v8;
  double v9;
  double v10;
  double v11;
  uint64_t AssociatedConformanceWitness;
  double (*v13)(uint64_t, uint64_t);
  uint64_t v14;
  double v15;
  uint64_t v17;

  v2 = v1;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v7 = (char *)&v17 - v6;
  v8 = HermiteCurve.arcLength(at:)(1.0);
  if (v8 <= 0.0)
    return 0.0;
  v9 = forArcLength / v8;
  v10 = HermiteCurve.arcLength(at:)(forArcLength / v8);
  if (vabdd_f64(v10, forArcLength) >= 0.1)
  {
    v11 = v10 - forArcLength;
    AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    v13 = *(double (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 24);
    v14 = 10;
    do
    {
      HermiteCurve.velocity(at:)(v2, (uint64_t)v7, v9);
      v9 = v9 - v11 / sqrt(v13(AssociatedTypeWitness, AssociatedConformanceWitness));
      if ((~*(_QWORD *)&v9 & 0x7FF0000000000000) != 0)
      {
        (*(void (**)(char *, uint64_t))(v5 + 8))(v7, AssociatedTypeWitness);
        if (!--v14)
          return v9;
      }
      else
      {
        (*(void (**)(char *, uint64_t))(v5 + 8))(v7, AssociatedTypeWitness);
        if ((*(_QWORD *)&v9 & 0xFFFFFFFFFFFFFLL) != 0)
          return 0.0;
        if (!--v14)
          return v9;
      }
      v15 = HermiteCurve.arcLength(at:)(v9);
      v11 = v15 - forArcLength;
    }
    while (vabdd_f64(v15, forArcLength) >= 0.1);
  }
  return v9;
}

uint64_t HermiteCurve.velocity(atArcLength:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, Swift::Double a3@<D0>)
{
  double v5;

  v5 = HermiteCurve.parametricTime(forArcLength:)(a3);
  return HermiteCurve.velocity(at:)(a1, a2, v5);
}

double HermiteCurve.arcLength.getter()
{
  return HermiteCurve.arcLength(at:)(1.0);
}

Swift::Double __swiftcall HermiteCurve.arcLength(at:)(Swift::Double at)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __n128 v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t AssociatedConformanceWitness;
  char *v27;
  double v28;
  double v29;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v4 = *(_QWORD *)(v1 + 16);
  v3 = *(_QWORD *)(v1 + 24);
  v31 = v1;
  v5 = v3;
  v6 = v4;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v33 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v32 = (char *)&v31 - v8;
  type metadata accessor for Result<(integralResult: Double, estimatedAbsoluteError: Double), Quadrature.Error>();
  MEMORY[0x24BDAC7A8](v9);
  v11 = (double *)((char *)&v31 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)&v31 - v13;
  v15 = type metadata accessor for Quadrature.Integrator();
  v16 = *(_QWORD *)(v15 - 8);
  MEMORY[0x24BDAC7A8](v15);
  v18 = (uint64_t *)((char *)&v31 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  v19 = type metadata accessor for Quadrature();
  v22.n128_f64[0] = MEMORY[0x24BDAC7A8](v19);
  v24 = (char *)&v31 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (at < 0.0)
  {
    if (at <= 0.0)
      goto LABEL_5;
    __break(1u);
  }
  if (at < 0.0)
  {
    __break(1u);
    return v22.n128_f64[0];
  }
LABEL_5:
  v34 = v21;
  v35 = v20;
  *v18 = 8;
  (*(void (**)(_QWORD *, _QWORD, uint64_t, __n128))(v16 + 104))(v18, *MEMORY[0x24BEDF4C8], v15, v22);
  v25 = Quadrature.init(integrator:absoluteTolerance:relativeTolerance:)();
  MEMORY[0x24BDAC7A8](v25);
  *(&v31 - 4) = v6;
  *(&v31 - 3) = v5;
  *(&v31 - 2) = v36;
  Quadrature.integrate(over:integrand:)();
  outlined init with copy of Result<(integralResult: Double, estimatedAbsoluteError: Double), Quadrature.Error>((uint64_t)v14, (uint64_t)v11);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    v27 = v32;
    dispatch thunk of static AdditiveArithmetic.- infix(_:_:)();
    v28 = (*(double (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 24))(AssociatedTypeWitness, AssociatedConformanceWitness);
    (*(void (**)(char *, uint64_t))(v33 + 8))(v27, AssociatedTypeWitness);
    v29 = sqrt(v28);
    outlined destroy of Result<(integralResult: Double, estimatedAbsoluteError: Double), Quadrature.Error>((uint64_t)v14);
    (*(void (**)(char *, uint64_t))(v34 + 8))(v24, v35);
    outlined destroy of Result<(integralResult: Double, estimatedAbsoluteError: Double), Quadrature.Error>((uint64_t)v11);
  }
  else
  {
    outlined destroy of Result<(integralResult: Double, estimatedAbsoluteError: Double), Quadrature.Error>((uint64_t)v14);
    (*(void (**)(char *, uint64_t))(v34 + 8))(v24, v35);
    if (at < 0.0)
      v29 = -*v11;
    else
      v29 = *v11;
  }
  v22.n128_f64[0] = v29;
  return v22.n128_f64[0];
}

double closure #1 in HermiteCurve.arcLength(at:)(double a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t AssociatedConformanceWitness;
  double v14;
  uint64_t v16;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v8 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v10 = (char *)&v16 - v9;
  v12 = type metadata accessor for HermiteCurve(0, a3, a4, v11);
  HermiteCurve.velocity(at:)(v12, (uint64_t)v10, a1);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v14 = (*(double (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 24))(AssociatedTypeWitness, AssociatedConformanceWitness);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, AssociatedTypeWitness);
  return sqrt(v14);
}

double partial apply for closure #1 in HermiteCurve.arcLength(at:)(double a1)
{
  uint64_t *v1;

  return closure #1 in HermiteCurve.arcLength(at:)(a1, v1[4], v1[2], v1[3]);
}

uint64_t outlined init with copy of Result<(integralResult: Double, estimatedAbsoluteError: Double), Quadrature.Error>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for Result<(integralResult: Double, estimatedAbsoluteError: Double), Quadrature.Error>();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of Result<(integralResult: Double, estimatedAbsoluteError: Double), Quadrature.Error>(uint64_t a1)
{
  uint64_t v2;

  type metadata accessor for Result<(integralResult: Double, estimatedAbsoluteError: Double), Quadrature.Error>();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t type metadata accessor for HermiteCurve(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for HermiteCurve);
}

uint64_t type metadata completion function for HermiteCurve()
{
  uint64_t result;
  unint64_t v1;

  result = swift_getAssociatedTypeWitness();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for HermiteCurve(uint64_t *a1, uint64_t *a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t *, uint64_t *, uint64_t);
  unint64_t v16;
  unint64_t v17;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = *(_DWORD *)(v5 + 80);
  v8 = ~v7;
  v9 = v6 + v7;
  v10 = ((v6 + v7 + ((v6 + v7 + ((v6 + v7) & ~v7)) & ~v7)) & ~v7) + v6;
  if (v7 > 7 || (*(_DWORD *)(v5 + 80) & 0x100000) != 0 || v10 > 0x18)
  {
    v13 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v13 + ((v7 + 16) & v8));
    swift_retain();
  }
  else
  {
    v14 = AssociatedTypeWitness;
    v15 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v5 + 16);
    v15(a1, a2, AssociatedTypeWitness);
    v16 = ((unint64_t)a2 + v9) & v8;
    v15((uint64_t *)(((unint64_t)a1 + v9) & v8), (uint64_t *)v16, v14);
    v17 = (v9 + v16) & v8;
    v15((uint64_t *)((v9 + (((unint64_t)a1 + v9) & v8)) & v8), (uint64_t *)v17, v14);
    v15((uint64_t *)((v9 + ((v9 + (((unint64_t)a1 + v9) & v8)) & v8)) & v8), (uint64_t *)((v9 + v17) & v8), v14);
  }
  return a1;
}

uint64_t destroy for HermiteCurve(uint64_t a1)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v10)(uint64_t, uint64_t);

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v3 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v10 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
  v10(a1, AssociatedTypeWitness);
  v4 = *(_QWORD *)(v3 + 64);
  v5 = *(unsigned __int8 *)(v3 + 80);
  v6 = v4 + v5;
  v7 = (v4 + v5 + a1) & ~v5;
  v10(v7, AssociatedTypeWitness);
  v8 = (v6 + v7) & ~v5;
  v10(v8, AssociatedTypeWitness);
  return ((uint64_t (*)(uint64_t, uint64_t))v10)((v6 + v8) & ~v5, AssociatedTypeWitness);
}

uint64_t initializeWithCopy for HermiteCurve(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
  v6(a1, a2, AssociatedTypeWitness);
  v7 = *(unsigned __int8 *)(v5 + 80);
  v8 = *(_QWORD *)(v5 + 64) + v7;
  v9 = (v8 + a2) & ~v7;
  v6((v8 + a1) & ~v7, v9, AssociatedTypeWitness);
  v10 = (v8 + v9) & ~v7;
  v6((v8 + ((v8 + a1) & ~v7)) & ~v7, v10, AssociatedTypeWitness);
  v6((v8 + ((v8 + ((v8 + a1) & ~v7)) & ~v7)) & ~v7, (v8 + v10) & ~v7, AssociatedTypeWitness);
  return a1;
}

uint64_t assignWithCopy for HermiteCurve(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 24);
  v6(a1, a2, AssociatedTypeWitness);
  v7 = *(unsigned __int8 *)(v5 + 80);
  v8 = *(_QWORD *)(v5 + 64) + v7;
  v9 = (v8 + a2) & ~v7;
  v6((v8 + a1) & ~v7, v9, AssociatedTypeWitness);
  v10 = (v8 + v9) & ~v7;
  v6((v8 + ((v8 + a1) & ~v7)) & ~v7, v10, AssociatedTypeWitness);
  v6((v8 + ((v8 + ((v8 + a1) & ~v7)) & ~v7)) & ~v7, (v8 + v10) & ~v7, AssociatedTypeWitness);
  return a1;
}

uint64_t initializeWithTake for HermiteCurve(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 32);
  v6(a1, a2, AssociatedTypeWitness);
  v7 = *(unsigned __int8 *)(v5 + 80);
  v8 = *(_QWORD *)(v5 + 64) + v7;
  v9 = (v8 + a2) & ~v7;
  v6((v8 + a1) & ~v7, v9, AssociatedTypeWitness);
  v10 = (v8 + v9) & ~v7;
  v6((v8 + ((v8 + a1) & ~v7)) & ~v7, v10, AssociatedTypeWitness);
  v6((v8 + ((v8 + ((v8 + a1) & ~v7)) & ~v7)) & ~v7, (v8 + v10) & ~v7, AssociatedTypeWitness);
  return a1;
}

uint64_t assignWithTake for HermiteCurve(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 40);
  v6(a1, a2, AssociatedTypeWitness);
  v7 = *(unsigned __int8 *)(v5 + 80);
  v8 = *(_QWORD *)(v5 + 64) + v7;
  v9 = (v8 + a2) & ~v7;
  v6((v8 + a1) & ~v7, v9, AssociatedTypeWitness);
  v10 = (v8 + v9) & ~v7;
  v6((v8 + ((v8 + a1) & ~v7)) & ~v7, v10, AssociatedTypeWitness);
  v6((v8 + ((v8 + ((v8 + a1) & ~v7)) & ~v7)) & ~v7, (v8 + v10) & ~v7, AssociatedTypeWitness);
  return a1;
}

uint64_t getEnumTagSinglePayload for HermiteCurve(uint64_t a1, unsigned int a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  int v10;
  unsigned int v11;
  int v12;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  if (!a2)
    return 0;
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = *(unsigned int *)(v5 + 84);
  if (a2 <= v6)
    goto LABEL_18;
  v7 = *(unsigned __int8 *)(v5 + 80);
  v8 = ((*(_QWORD *)(v5 + 64) + v7 + ((*(_QWORD *)(v5 + 64) + v7 + ((*(_QWORD *)(v5 + 64) + v7) & ~v7)) & ~v7)) & ~v7)
     + *(_QWORD *)(v5 + 64);
  v9 = 8 * v8;
  if (v8 <= 3)
  {
    v11 = ((a2 - v6 + ~(-1 << v9)) >> v9) + 1;
    if (HIWORD(v11))
    {
      v10 = *(_DWORD *)(a1 + v8);
      if (!v10)
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v11 > 0xFF)
    {
      v10 = *(unsigned __int16 *)(a1 + v8);
      if (!*(_WORD *)(a1 + v8))
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v11 < 2)
    {
LABEL_18:
      if ((_DWORD)v6)
        return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(a1, v6, AssociatedTypeWitness);
      return 0;
    }
  }
  v10 = *(unsigned __int8 *)(a1 + v8);
  if (!*(_BYTE *)(a1 + v8))
    goto LABEL_18;
LABEL_11:
  v12 = (v10 - 1) << v9;
  if (v8 > 3)
    v12 = 0;
  if ((_DWORD)v8)
  {
    if (v8 > 3)
      LODWORD(v8) = 4;
    __asm { BR              X11 }
  }
  return (v6 + v12 + 1);
}

void storeEnumTagSinglePayload for HermiteCurve(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  size_t v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  int v13;

  v6 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = *(unsigned __int8 *)(v6 + 80);
  v9 = ((*(_QWORD *)(v6 + 64) + v8 + ((*(_QWORD *)(v6 + 64) + v8 + ((*(_QWORD *)(v6 + 64) + v8) & ~v8)) & ~v8)) & ~v8)
     + *(_QWORD *)(v6 + 64);
  if (a3 <= v7)
  {
    v10 = 0;
  }
  else if (v9 <= 3)
  {
    v12 = ((a3 - v7 + ~(-1 << (8 * v9))) >> (8 * v9)) + 1;
    if (HIWORD(v12))
    {
      v10 = 4u;
    }
    else if (v12 >= 0x100)
    {
      v10 = 2;
    }
    else
    {
      v10 = v12 > 1;
    }
  }
  else
  {
    v10 = 1u;
  }
  if (v7 < a2)
  {
    v11 = ~v7 + a2;
    if (v9 < 4)
    {
      if ((_DWORD)v9)
      {
        v13 = v11 & ~(-1 << (8 * v9));
        bzero(a1, v9);
        if ((_DWORD)v9 == 3)
        {
          *(_WORD *)a1 = v13;
          a1[2] = BYTE2(v13);
        }
        else if ((_DWORD)v9 == 2)
        {
          *(_WORD *)a1 = v13;
        }
        else
        {
          *a1 = v13;
        }
      }
    }
    else
    {
      bzero(a1, v9);
      *(_DWORD *)a1 = v11;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X11 }
}

uint64_t static HermiteCurve.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;

  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  if ((dispatch thunk of static Equatable.== infix(_:_:)() & 1) != 0
    && (type metadata accessor for HermiteCurve(0, a3, a4, v6),
        (dispatch thunk of static Equatable.== infix(_:_:)() & 1) != 0)
    && (dispatch thunk of static Equatable.== infix(_:_:)() & 1) != 0)
  {
    return dispatch thunk of static Equatable.== infix(_:_:)() & 1;
  }
  else
  {
    return 0;
  }
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance HermiteCurve<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return static HermiteCurve.== infix(_:_:)(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24));
}

double ContainerRelativeShape.path(in:)@<D0>(uint64_t a1@<X8>, __n128 a2@<Q0>, __n128 a3@<Q1>, __n128 a4@<Q2>, __n128 a5@<Q3>)
{
  double result;
  __int128 v7;
  _OWORD v8[2];
  char v9;

  specialized ContainerRelativeShape.path(in:)((uint64_t)v8, a2, a3, a4, a5);
  result = *(double *)v8;
  v7 = v8[1];
  *(_OWORD *)a1 = v8[0];
  *(_OWORD *)(a1 + 16) = v7;
  *(_BYTE *)(a1 + 32) = v9;
  return result;
}

double protocol witness for Shape.path(in:) in conformance ContainerRelativeShape@<D0>(uint64_t a1@<X8>, __n128 a2@<Q0>, __n128 a3@<Q1>, __n128 a4@<Q2>, __n128 a5@<Q3>)
{
  double result;
  __int128 v7;
  _OWORD v8[2];
  char v9;

  specialized ContainerRelativeShape.path(in:)((uint64_t)v8, a2, a3, a4, a5);
  result = *(double *)v8;
  v7 = v8[1];
  *(_OWORD *)a1 = v8[0];
  *(_OWORD *)(a1 + 16) = v7;
  *(_BYTE *)(a1 + 32) = v9;
  return result;
}

void ContainerRelativeShape.inset(by:)(double *a1@<X8>, double a2@<D0>)
{
  *a1 = a2;
}

void ContainerRelativeShape._Inset.amount.setter(double a1)
{
  double *v1;

  *v1 = a1;
}

uint64_t (*ContainerRelativeShape._Inset.amount.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

double ContainerRelativeShape._Inset.path(in:)@<D0>(uint64_t a1@<X8>, double a2@<D0>, CGFloat a3@<D4>)
{
  double result;
  __int128 v8;
  _OWORD v9[2];
  char v10;
  CGRect v11;

  v11 = CGRectInset(*(CGRect *)&a2, a3, a3);
  specialized ContainerRelativeShape.path(in:)((uint64_t)v9, (__n128)v11.origin, *(__n128 *)&v11.origin.y, (__n128)v11.size, *(__n128 *)&v11.size.height);
  result = *(double *)v9;
  v8 = v9[1];
  *(_OWORD *)a1 = v9[0];
  *(_OWORD *)(a1 + 16) = v8;
  *(_BYTE *)(a1 + 32) = v10;
  return result;
}

void ContainerRelativeShape._Inset.animatableData.setter(double a1)
{
  double *v1;

  *v1 = a1;
}

double (*ContainerRelativeShape._Inset.animatableData.modify(_QWORD *a1))(uint64_t a1)
{
  _QWORD *v1;

  a1[1] = v1;
  *a1 = *v1;
  return ViewOrigin.x.modify;
}

double ContainerRelativeShape._Inset.inset(by:)(double a1, double a2)
{
  return a1 + a2;
}

double protocol witness for Shape.path(in:) in conformance ContainerRelativeShape._Inset@<D0>(uint64_t a1@<X8>, double a2@<D0>)
{
  CGFloat *v5;
  double result;
  __int128 v8;
  _OWORD v9[2];
  char v10;
  CGRect v11;

  v11 = CGRectInset(*(CGRect *)&a2, *v5, *v5);
  specialized ContainerRelativeShape.path(in:)((uint64_t)v9, (__n128)v11.origin, *(__n128 *)&v11.origin.y, (__n128)v11.size, *(__n128 *)&v11.size.height);
  result = *(double *)v9;
  v8 = v9[1];
  *(_OWORD *)a1 = v9[0];
  *(_OWORD *)(a1 + 16) = v8;
  *(_BYTE *)(a1 + 32) = v10;
  return result;
}

void ShapeStyle._fillingContainerShape()(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;

  lazy protocol witness table accessor for type ContainerRelativeShape and conformance ContainerRelativeShape();
  Shape.fill<A>(_:style:)(v3, (uint64_t)&type metadata for ContainerRelativeShape, a1, a2, a3);
}

uint64_t View.containerShape<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  double v16;
  uint64_t v17;
  char *v18;
  uint64_t v20;

  v8 = *(_QWORD *)(a3 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v10 = (char *)&v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for _ContainerShapeModifier(0, v11, v13, v12);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = MEMORY[0x24BDAC7A8](v14);
  v18 = (char *)&v20 - v17;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v8 + 16))(v10, a1, a3, v16);
  (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v18, v10, a3);
  View.modifier<A>(_:)(v18, a2, v14, a4);
  return (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v18, v14);
}

uint64_t _ContainerShapeModifier.init(shape:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 32))(a3, a1);
}

uint64_t View._containerShape<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  double v16;
  uint64_t v17;
  char *v18;
  uint64_t v20;

  v8 = *(_QWORD *)(a3 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v10 = (char *)&v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for SystemContainerShapeModifier(0, v11, v13, v12);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = MEMORY[0x24BDAC7A8](v14);
  v18 = (char *)&v20 - v17;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v8 + 16))(v10, a1, a3, v16);
  (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v18, v10, a3);
  View.modifier<A>(_:)(v18, a2, v14, a4);
  return (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v18, v14);
}

uint64_t _ContainerShapeModifier.shape.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8) + 16))(a2, v2);
}

uint64_t _ContainerShapeModifier.shape.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 40))(v2, a1);
}

uint64_t (*_ContainerShapeModifier.shape.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t static _ContainerShapeModifier._makeView(modifier:inputs:body:)(uint64_t a1, uint64_t a2, void (*a3)(uint64_t, uint64_t *), uint64_t a4, ValueMetadata *a5, uint64_t a6)
{
  uint64_t v8;
  int v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v22;
  unsigned int v23;
  uint64_t v25;
  int v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;
  int v33;
  unsigned int v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  __int128 v38;
  uint64_t v39;
  uint64_t v40;
  __int128 v41;
  uint64_t v42;
  int v43;

  v9 = *(_DWORD *)(a2 + 8);
  v10 = *(_QWORD *)(a2 + 16);
  v12 = *(_DWORD *)(a2 + 24);
  v11 = *(_DWORD *)(a2 + 28);
  v22 = *(_DWORD *)(a2 + 36);
  v23 = *(_DWORD *)(a2 + 32);
  v14 = *(_QWORD *)(a2 + 40);
  v13 = *(_QWORD *)(a2 + 48);
  v15 = *(_DWORD *)(a2 + 80);
  v35 = *(_QWORD *)a2;
  v8 = v35;
  v36 = v9;
  v37 = v10;
  *(_QWORD *)&v38 = __PAIR64__(v11, v12);
  *((_QWORD *)&v38 + 1) = __PAIR64__(v22, v23);
  v39 = v14;
  v40 = v13;
  v41 = *(_OWORD *)(a2 + 56);
  v42 = *(_QWORD *)(a2 + 72);
  v43 = v15;
  v16 = type metadata accessor for _ContainerShapeModifier(255, (uint64_t)a5, a6, a4);
  type metadata accessor for _GraphValue(0, v16, v17, v18);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  _GraphValue.subscript.getter((void (*)(uint64_t))partial apply for closure #1 in static _ContainerShapeModifier._makeView(modifier:inputs:body:), (uint64_t)a5, &v34);
  v25 = v8;
  v26 = v9;
  v27 = v10;
  *(_QWORD *)&v28 = __PAIR64__(v11, v12);
  *((_QWORD *)&v28 + 1) = __PAIR64__(v22, v23);
  v29 = v14;
  v19 = static Animatable.makeAnimatable(value:inputs:)(&v34, &v25, (uint64_t)a5, *(_QWORD *)(*(_QWORD *)(a6 + 8) + 8));
  _ViewInputs.setContainerShape<A>(_:isSystemShape:)(v19, 0, a5, a6);
  v25 = v35;
  v26 = v36;
  v27 = v37;
  v28 = v38;
  v29 = v39;
  v30 = v40;
  v31 = v41;
  v32 = v42;
  v33 = v43;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  v20 = swift_bridgeObjectRetain();
  a3(v20, &v25);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  return swift_release_n();
}

uint64_t _ViewInputs.setContainerShape<A>(_:isSystemShape:)(uint64_t a1, char a2, ValueMetadata *a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  unsigned int v13;
  int v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t KeyPath;
  int v19;
  __int128 v20;
  uint64_t v21;
  unsigned __int8 v22;
  unint64_t v23;
  unint64_t v24;
  int v25;
  unsigned int v26;
  int v27;
  unint64_t v28;
  int v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unsigned int v33;
  uint64_t v34;
  int v35;
  __int128 v36;
  uint64_t v37;
  unsigned __int8 v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unsigned int v44;
  unsigned int v45;
  unint64_t v46;
  unint64_t v47;
  int v48;
  int v49;
  int v50;
  unsigned int v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  unsigned __int8 v55;
  unint64_t v56;
  unint64_t v57;
  __int128 v58;
  unint64_t v59;
  unsigned int v60;
  unint64_t v61;
  unint64_t v62;
  int v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  unsigned int v68;
  unint64_t v69;
  uint64_t v70;
  int v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t result;
  int v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t v84;
  int v85;
  int v86;
  int v87;
  int v88;
  int v89;
  unsigned int v90;
  int v91;
  unsigned int v92;
  int v93;
  unint64_t v94;
  int v95;
  int v96;
  int v97;
  unint64_t v98;
  int v99;
  unsigned int v100;
  int v101;
  unint64_t v102;
  unint64_t v103;
  uint64_t v107;
  int v108;
  int v109;
  unsigned int v110;
  __int128 v111;
  __int128 v112;
  unsigned __int8 v113;
  unsigned int v114;
  unsigned __int8 v115;
  unsigned int v116;
  unsigned __int8 v117;
  unint64_t v118;
  uint64_t v119;
  _UNKNOWN **v120;
  unint64_t v121;
  unint64_t v122;
  unint64_t v123;
  unint64_t v124;
  int v125;
  int v126;
  int v127;
  int v128;
  unsigned int v129;
  int v130;
  int v131;
  uint64_t v132;

  v132 = *MEMORY[0x24BDAC8D0];
  if (a3 != &type metadata for ContainerRelativeShape)
  {
    v5 = v4;
    v6 = AGMakeUniqueID();
    v7 = *(_QWORD *)v5;
    v101 = *(_DWORD *)(v5 + 8);
    v8 = *(_QWORD *)(v5 + 16);
    v98 = *(_QWORD *)(v5 + 24);
    v10 = *(_DWORD *)(v5 + 32);
    v9 = *(_DWORD *)(v5 + 36);
    v12 = *(_QWORD *)(v5 + 40);
    v11 = *(_QWORD *)(v5 + 48);
    v14 = *(_DWORD *)(v5 + 56);
    v13 = *(_DWORD *)(v5 + 60);
    v108 = *(_DWORD *)(v5 + 64);
    v95 = *(_DWORD *)(v5 + 68);
    v89 = *(_DWORD *)(v5 + 76);
    v92 = *(_DWORD *)(v5 + 72);
    v86 = *(_DWORD *)(v5 + 80);
    swift_beginAccess();
    v107 = v6;
    if ((v9 & 0x20) == 0)
    {
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      LODWORD(v15) = v108;
      v16 = v13;
      goto LABEL_16;
    }
    v118 = v7;
    LODWORD(v119) = v101;
    v120 = (_UNKNOWN **)v8;
    v121 = v98;
    v122 = __PAIR64__(v9, v10);
    v123 = v12;
    v124 = v11;
    v125 = v14;
    v126 = v13;
    v127 = v108;
    v128 = v95;
    v129 = v92;
    v130 = v89;
    v131 = v86;
    swift_retain_n();
    swift_retain_n();
    swift_bridgeObjectRetain_n();
    v80 = v11;
    swift_bridgeObjectRetain_n();
    v17 = _ViewInputs.geometryTransaction()();
    KeyPath = swift_getKeyPath();
    v19 = specialized CachedEnvironment.attribute<A>(keyPath:)(KeyPath);
    swift_release();
    if ((*(_BYTE *)(v8 + 81) & 1) == 0
      && v108 == *(_DWORD *)(v8 + 32)
      && v92 == *(_DWORD *)(v8 + 36)
      && v19 == *(_DWORD *)(v8 + 40)
      && v101 == *(_DWORD *)(v8 + 44)
      && v17 == *(_DWORD *)(v8 + 48)
      && (_DWORD)v98 == *(_DWORD *)(v8 + 52))
    {
      v16 = v13;
      if ((*(_BYTE *)(v8 + 64) & 1) == 0)
      {
        LODWORD(v15) = *(_DWORD *)(v8 + 60);
        goto LABEL_15;
      }
    }
    else
    {
      v118 = v7;
      LODWORD(v119) = v101;
      v120 = (_UNKNOWN **)v8;
      v121 = __PAIR64__(v17, v98);
      v122 = __PAIR64__(v9, v10);
      v123 = v12;
      v124 = v80;
      v16 = v13;
      v125 = v14;
      v126 = v13;
      v127 = v108;
      v128 = v95;
      v129 = v92;
      v130 = v89;
      v131 = v86;
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      CachedEnvironment.AnimatedFrame.init(inputs:pixelLength:environment:)(&v118, v19, (uint64_t)&v111);
      v20 = v112;
      v21 = v113;
      v22 = v117;
      v23 = v113 | ((unint64_t)v114 << 32);
      v24 = v115 | ((unint64_t)v116 << 32);
      *(_OWORD *)(v8 + 32) = v111;
      *(_OWORD *)(v8 + 48) = v20;
      *(_QWORD *)(v8 + 64) = v23;
      *(_QWORD *)(v8 + 72) = v24;
      *(_WORD *)(v8 + 80) = v22;
      if (v21 != 1)
      {
        v15 = HIDWORD(*((_QWORD *)&v20 + 1));
LABEL_15:
        v6 = v107;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release();
        swift_release();
LABEL_16:
        swift_endAccess();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release();
        swift_release();
        v118 = __PAIR64__(v15, v16);
        v119 = v6;
        protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
        lazy protocol witness table accessor for type ContainerShapeTransform and conformance ContainerShapeTransform();
        v25 = Attribute.init<A>(body:value:flags:update:)();
        *(_DWORD *)(v5 + 60) = v25;
        v26 = *(_DWORD *)(v5 + 36);
        v27 = *(_DWORD *)(v5 + 32) | 4;
        *(_DWORD *)(v5 + 32) = v27;
        v28 = *(_QWORD *)v5;
        v29 = *(_DWORD *)(v5 + 8);
        v30 = *(_QWORD *)(v5 + 16);
        v102 = *(_QWORD *)(v5 + 24);
        v31 = *(_QWORD *)(v5 + 40);
        v32 = *(_QWORD *)(v5 + 48);
        v109 = *(_DWORD *)(v5 + 64);
        v96 = *(_DWORD *)(v5 + 68);
        v99 = *(_DWORD *)(v5 + 56);
        v87 = *(_DWORD *)(v5 + 76);
        v90 = *(_DWORD *)(v5 + 72);
        v93 = *(_DWORD *)(v5 + 80);
        swift_beginAccess();
        if ((v26 & 0x20) == 0)
        {
          swift_retain();
          swift_retain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          goto LABEL_30;
        }
        v118 = v28;
        LODWORD(v119) = v29;
        v120 = (_UNKNOWN **)v30;
        v121 = v102;
        v122 = __PAIR64__(v26, v27);
        v123 = v31;
        v124 = v32;
        v125 = v99;
        v126 = v25;
        v127 = v109;
        v128 = v96;
        v129 = v90;
        v130 = v87;
        v131 = v93;
        v82 = v28;
        swift_retain_n();
        swift_retain_n();
        v84 = v31;
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain_n();
        v33 = _ViewInputs.geometryTransaction()();
        v34 = swift_getKeyPath();
        v35 = specialized CachedEnvironment.attribute<A>(keyPath:)(v34);
        swift_release();
        if ((*(_BYTE *)(v30 + 81) & 1) == 0
          && v109 == *(_DWORD *)(v30 + 32)
          && v90 == *(_DWORD *)(v30 + 36)
          && v35 == *(_DWORD *)(v30 + 40)
          && v29 == *(_DWORD *)(v30 + 44)
          && v33 == *(_DWORD *)(v30 + 48)
          && (_DWORD)v102 == *(_DWORD *)(v30 + 52))
        {
          if ((*(_BYTE *)(v30 + 64) & 1) == 0)
            goto LABEL_29;
        }
        else
        {
          v118 = v82;
          LODWORD(v119) = v29;
          v120 = (_UNKNOWN **)v30;
          v121 = __PAIR64__(v33, v102);
          v122 = __PAIR64__(v26, v27);
          v123 = v84;
          v124 = v32;
          v125 = v99;
          v126 = v25;
          v127 = v109;
          v128 = v96;
          v129 = v90;
          v130 = v87;
          v131 = v93;
          swift_retain();
          swift_retain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          CachedEnvironment.AnimatedFrame.init(inputs:pixelLength:environment:)(&v118, v35, (uint64_t)&v111);
          v36 = v112;
          v37 = v113;
          v38 = v117;
          v39 = v113 | ((unint64_t)v114 << 32);
          v40 = v115 | ((unint64_t)v116 << 32);
          *(_OWORD *)(v30 + 32) = v111;
          *(_OWORD *)(v30 + 48) = v36;
          *(_QWORD *)(v30 + 64) = v39;
          *(_QWORD *)(v30 + 72) = v40;
          *(_WORD *)(v30 + 80) = v38;
          if (v37 != 1)
            goto LABEL_29;
        }
        *(_DWORD *)(v30 + 60) = AGGraphCreateOffsetAttribute2();
        *(_BYTE *)(v30 + 64) = 0;
LABEL_29:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release();
        swift_release();
LABEL_30:
        swift_endAccess();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release();
        swift_release();
        v41 = AGCreateWeakAttribute();
        v42 = *(_QWORD *)v5;
        v110 = v41;
        v103 = HIDWORD(v41);
        v97 = *(_DWORD *)(v5 + 8);
        v43 = *(_QWORD *)(v5 + 16);
        v94 = *(_QWORD *)(v5 + 24);
        v44 = *(_DWORD *)(v5 + 32);
        v45 = *(_DWORD *)(v5 + 36);
        v47 = *(_QWORD *)(v5 + 40);
        v46 = *(_QWORD *)(v5 + 48);
        v48 = *(_DWORD *)(v5 + 56);
        v49 = *(_DWORD *)(v5 + 60);
        v50 = *(_DWORD *)(v5 + 68);
        v85 = *(_DWORD *)(v5 + 64);
        v100 = *(_DWORD *)(v5 + 72);
        v88 = *(_DWORD *)(v5 + 80);
        v91 = *(_DWORD *)(v5 + 76);
        swift_beginAccess();
        if ((v45 & 0x20) == 0)
        {
          swift_retain();
          swift_retain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          goto LABEL_43;
        }
        v118 = v42;
        LODWORD(v119) = v97;
        v120 = (_UNKNOWN **)v43;
        v121 = v94;
        v122 = __PAIR64__(v45, v44);
        v123 = v47;
        v124 = v46;
        v125 = v48;
        v126 = v49;
        v127 = v85;
        v128 = v50;
        v129 = v100;
        v130 = v91;
        v131 = v88;
        v83 = v42;
        swift_retain_n();
        swift_retain_n();
        swift_bridgeObjectRetain_n();
        v81 = v46;
        swift_bridgeObjectRetain_n();
        v51 = _ViewInputs.geometryTransaction()();
        v52 = swift_getKeyPath();
        v53 = specialized CachedEnvironment.attribute<A>(keyPath:)(v52);
        swift_release();
        if ((*(_BYTE *)(v43 + 81) & 1) == 0
          && v85 == *(_DWORD *)(v43 + 32)
          && __PAIR64__(v53, v100) == *(_QWORD *)(v43 + 36)
          && v97 == *(_DWORD *)(v43 + 44)
          && v51 == *(_DWORD *)(v43 + 48)
          && (_DWORD)v94 == *(_DWORD *)(v43 + 52))
        {
          if ((*(_BYTE *)(v43 + 72) & 1) == 0)
            goto LABEL_42;
        }
        else
        {
          v118 = v83;
          LODWORD(v119) = v97;
          v120 = (_UNKNOWN **)v43;
          v121 = __PAIR64__(v51, v94);
          v122 = __PAIR64__(v45, v44);
          v123 = v47;
          v124 = v81;
          v125 = v48;
          v126 = v49;
          v127 = v85;
          v128 = v50;
          v129 = v100;
          v130 = v91;
          v131 = v88;
          swift_retain();
          swift_retain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          CachedEnvironment.AnimatedFrame.init(inputs:pixelLength:environment:)(&v118, v53, (uint64_t)&v111);
          v54 = v115;
          v55 = v117;
          v56 = v113 | ((unint64_t)v114 << 32);
          v57 = v115 | ((unint64_t)v116 << 32);
          v58 = v112;
          *(_OWORD *)(v43 + 32) = v111;
          *(_OWORD *)(v43 + 48) = v58;
          *(_QWORD *)(v43 + 64) = v56;
          *(_QWORD *)(v43 + 72) = v57;
          *(_WORD *)(v43 + 80) = v55;
          if (v54 != 1)
            goto LABEL_42;
        }
        *(_DWORD *)(v43 + 68) = AGGraphCreateOffsetAttribute2();
        *(_BYTE *)(v43 + 72) = 0;
LABEL_42:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release();
        swift_release();
LABEL_43:
        swift_endAccess();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release();
        swift_release();
        v59 = AGCreateWeakAttribute();
        v60 = v59;
        v61 = HIDWORD(v59);
        v62 = AGCreateWeakAttribute();
        v63 = v62;
        v64 = HIDWORD(v62);
        v66 = type metadata accessor for ContainerShapeType(0, (uint64_t)a3, a4, v65);
        v67 = AGCreateWeakAttribute();
        v68 = v67;
        v69 = HIDWORD(v67);
        v70 = *(_QWORD *)(v5 + 16);
        swift_beginAccess();
        LODWORD(v118) = *(_DWORD *)(v70 + 16);
        v119 = v66;
        v120 = &protocol witness table for ContainerShapeType<A>;
        v121 = __PAIR64__(v69, v68);
        v122 = v107;
        v123 = __PAIR64__(v103, v110);
        v124 = __PAIR64__(v61, v60);
        v125 = v63;
        v126 = v64;
        LOBYTE(v127) = a2 & 1;
        protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
        lazy protocol witness table accessor for type ContainerShapeEnvironment and conformance ContainerShapeEnvironment();
        v71 = Attribute.init<A>(body:value:flags:update:)();
        v72 = MEMORY[0x24BEE4AF8];
        v73 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
        type metadata accessor for MutableBox<CachedEnvironment>(0, v74, v75, v76);
        v77 = swift_allocObject();
        *(_DWORD *)(v77 + 16) = v71;
        *(_QWORD *)(v77 + 24) = v72;
        *(_OWORD *)(v77 + 32) = 0u;
        *(_OWORD *)(v77 + 48) = 0u;
        *(_OWORD *)(v77 + 64) = 0u;
        *(_WORD *)(v77 + 80) = 256;
        *(_QWORD *)(v77 + 88) = v73;
        result = swift_release();
        *(_QWORD *)(v5 + 16) = v77;
        v79 = *(_DWORD *)(v5 + 32);
        if ((v79 & 0x20) == 0)
          *(_DWORD *)(v5 + 32) = v79 | 0x20;
        return result;
      }
    }
    LODWORD(v15) = AGGraphCreateOffsetAttribute2();
    *(_DWORD *)(v8 + 60) = v15;
    *(_BYTE *)(v8 + 64) = 0;
    goto LABEL_15;
  }
  return result;
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance _ContainerShapeModifier<A>(uint64_t a1, uint64_t a2, void (*a3)(uint64_t, uint64_t *), uint64_t a4, uint64_t a5)
{
  return static _ContainerShapeModifier._makeView(modifier:inputs:body:)(a1, a2, a3, a4, *(ValueMetadata **)(a5 + 16), *(_QWORD *)(a5 + 24));
}

uint64_t static SystemContainerShapeModifier._makeView(modifier:inputs:body:)(uint64_t a1, uint64_t a2, void (*a3)(uint64_t, uint64_t *), uint64_t a4, ValueMetadata *a5, uint64_t a6)
{
  uint64_t v8;
  int v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v22;
  unsigned int v23;
  uint64_t v25;
  int v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;
  int v33;
  unsigned int v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  __int128 v38;
  uint64_t v39;
  uint64_t v40;
  __int128 v41;
  uint64_t v42;
  int v43;

  v9 = *(_DWORD *)(a2 + 8);
  v10 = *(_QWORD *)(a2 + 16);
  v12 = *(_DWORD *)(a2 + 24);
  v11 = *(_DWORD *)(a2 + 28);
  v22 = *(_DWORD *)(a2 + 36);
  v23 = *(_DWORD *)(a2 + 32);
  v14 = *(_QWORD *)(a2 + 40);
  v13 = *(_QWORD *)(a2 + 48);
  v15 = *(_DWORD *)(a2 + 80);
  v35 = *(_QWORD *)a2;
  v8 = v35;
  v36 = v9;
  v37 = v10;
  *(_QWORD *)&v38 = __PAIR64__(v11, v12);
  *((_QWORD *)&v38 + 1) = __PAIR64__(v22, v23);
  v39 = v14;
  v40 = v13;
  v41 = *(_OWORD *)(a2 + 56);
  v42 = *(_QWORD *)(a2 + 72);
  v43 = v15;
  v16 = type metadata accessor for SystemContainerShapeModifier(255, (uint64_t)a5, a6, a4);
  type metadata accessor for _GraphValue(0, v16, v17, v18);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  _GraphValue.subscript.getter((void (*)(uint64_t))partial apply for closure #1 in static SystemContainerShapeModifier._makeView(modifier:inputs:body:), (uint64_t)a5, &v34);
  v25 = v8;
  v26 = v9;
  v27 = v10;
  *(_QWORD *)&v28 = __PAIR64__(v11, v12);
  *((_QWORD *)&v28 + 1) = __PAIR64__(v22, v23);
  v29 = v14;
  v19 = static Animatable.makeAnimatable(value:inputs:)(&v34, &v25, (uint64_t)a5, *(_QWORD *)(*(_QWORD *)(a6 + 8) + 8));
  _ViewInputs.setContainerShape<A>(_:isSystemShape:)(v19, 1, a5, a6);
  v25 = v35;
  v26 = v36;
  v27 = v37;
  v28 = v38;
  v29 = v39;
  v30 = v40;
  v31 = v41;
  v32 = v42;
  v33 = v43;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  v20 = swift_bridgeObjectRetain();
  a3(v20, &v25);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  return swift_release_n();
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance SystemContainerShapeModifier<A>(uint64_t a1, uint64_t a2, void (*a3)(uint64_t, uint64_t *), uint64_t a4, uint64_t a5)
{
  return static SystemContainerShapeModifier._makeView(modifier:inputs:body:)(a1, a2, a3, a4, *(ValueMetadata **)(a5 + 16), *(_QWORD *)(a5 + 24));
}

double ContainerShapeContext.convert(_:to:)(uint64_t *a1, __n128 a2, double a3, double a4, double a5)
{
  double v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t WeakValue;
  double *v17;
  double *v18;
  double v19;
  uint64_t v20;
  unsigned __int8 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD v27[4];
  __n128 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  int v33;
  int v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD v38[4];
  _BYTE v39[48];

  v8 = a2.n128_f64[0];
  v9 = *a1;
  v10 = a1[1];
  v11 = a1[2];
  v12 = *((_DWORD *)a1 + 6);
  v13 = *((_DWORD *)a1 + 7);
  v14 = *((_DWORD *)a1 + 8);
  a2.n128_u64[0] = *(uint64_t *)((char *)a1 + 36);
  v28 = a2;
  v15 = *(uint64_t *)((char *)a1 + 44);
  if ((static WeakAttribute.== infix(_:_:)() & 1) != 0)
  {
    WeakValue = AGGraphGetWeakValue();
    if (WeakValue)
    {
      v17 = (double *)WeakValue;
      v18 = (double *)AGGraphGetWeakValue();
      if (v18)
        return *v17 - *v18 + v8;
    }
  }
  lazy protocol witness table accessor for type UniqueID and conformance UniqueID();
  AnyHashable.init<A>(_:)();
  v39[40] = 0;
  *(double *)v38 = v8;
  *(double *)&v38[1] = a3;
  *(double *)&v38[2] = a4;
  *(double *)&v38[3] = a5;
  v29 = v9;
  v30 = v10;
  v31 = v11;
  v32 = v12;
  v33 = v13;
  v34 = v14;
  v35 = v28.n128_u64[0];
  v36 = v15;
  v20 = GeometryProxy.placementContext.getter((uint64_t)&v37);
  MEMORY[0x24BDAC7A8](v20);
  v27[2] = v38;
  v27[3] = v39;
  LOBYTE(v29) = v21;
  _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF7SwiftUI30_PositionAwarePlacementContextV_s5NeverOytTB5((_QWORD *(*)(uint64_t *__return_ptr, _QWORD *))partial apply for closure #1 in GeometryProxy.rect(_:in:), (uint64_t)v27, v23, v24, v25, v22 | ((unint64_t)v21 << 32));
  v19 = *(double *)v38;
  outlined destroy of CoordinateSpace((uint64_t)v39);
  return v19;
}

uint64_t static ContainerShapeType.path(in:proxy:shape:context:)()
{
  uint64_t result;

  AGWeakAttributeGetAttribute();
  result = AGGraphWithUpdate();
  __break(1u);
  return result;
}

uint64_t closure #1 in static ContainerShapeType.path(in:proxy:shape:context:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, CGFloat a5, double a6, double a7, double a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t WeakValue;
  CGFloat *v29;
  uint64_t v30;
  CGFloat v31;
  CGFloat v32;
  void (*v33)(char *, uint64_t, uint64_t);
  int v34;
  uint64_t v35;
  __int128 v36;
  __n128 v37;
  CGFloat x;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  CGFloat MinX;
  double v43;
  double MinY;
  double v45;
  CGFloat v46;
  double v47;
  double MaxY;
  double v49;
  double v50;
  double v51;
  double v52;
  char *v53;
  double v54;
  double v55;
  double v56;
  double v57;
  uint64_t v58;
  uint64_t AssociatedConformanceWitness;
  uint64_t v60;
  char v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unsigned __int8 v67;
  char v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unsigned __int8 v74;
  CGFloat MaxX;
  CGFloat v76;
  double v77;
  CGFloat v78;
  uint64_t v79;
  uint64_t v80;
  CGFloat v81;
  CGFloat v82;
  __int128 v83;
  char *v84;
  uint64_t v85;
  _BYTE v86[32];
  __int128 v87;
  int v88;
  CGFloat v89;
  uint64_t v90;
  uint64_t v91;
  int v92;
  int v93;
  CGRect v94;
  CGRect v95;
  CGRect v96;
  CGRect v97;
  CGRect v98;
  CGRect v99;
  CGRect v100;
  CGRect v101;
  CGRect v102;
  CGRect v103;
  CGRect v104;

  v82 = *(double *)&a4;
  v81 = *(double *)&a1;
  *(_QWORD *)&v83 = a13;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v85 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v84 = (char *)&MaxX - v23;
  v24 = *(_QWORD *)(a12 - 8);
  MEMORY[0x24BDAC7A8](v25);
  v27 = (char *)&MaxX - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  WeakValue = AGGraphGetWeakValue();
  if (WeakValue && (v29 = (CGFloat *)WeakValue, (v30 = AGGraphGetWeakValue()) != 0))
  {
    v79 = AssociatedTypeWitness;
    v32 = *v29;
    v31 = v29[1];
    v80 = v24;
    v33 = *(void (**)(char *, uint64_t, uint64_t))(v24 + 16);
    v34 = LODWORD(v82);
    v35 = HIDWORD(*(_QWORD *)&v82);
    v33(v27, v30, a12);
    v89 = v81;
    v90 = a2;
    v91 = a3;
    v92 = v34;
    v93 = v35;
    v36 = *(_OWORD *)(a11 + 16);
    *(_OWORD *)v86 = *(_OWORD *)a11;
    *(_OWORD *)&v86[16] = v36;
    v87 = *(_OWORD *)(a11 + 32);
    v37.n128_u64[1] = *((_QWORD *)&v87 + 1);
    v88 = *(_DWORD *)(a11 + 48);
    v37.n128_f64[0] = a5;
    v94.origin.x = ContainerShapeContext.convert(_:to:)((uint64_t *)v86, v37, a6, a7, a8);
    x = v94.origin.x;
    y = v94.origin.y;
    v82 = a8;
    width = v94.size.width;
    v81 = a7;
    height = v94.size.height;
    MinX = CGRectGetMinX(v94);
    v78 = a6;
    v43 = MinX;
    v95.origin.x = 0.0;
    v95.origin.y = 0.0;
    v95.size.width = v32;
    v95.size.height = v31;
    v77 = v43 - CGRectGetMinX(v95);
    v96.origin.x = x;
    v96.origin.y = y;
    v96.size.width = width;
    v96.size.height = height;
    MinY = CGRectGetMinY(v96);
    v97.origin.x = 0.0;
    v97.origin.y = 0.0;
    v97.size.width = v32;
    v97.size.height = v31;
    v45 = MinY - CGRectGetMinY(v97);
    v98.origin.x = 0.0;
    v98.origin.y = 0.0;
    v98.size.width = v32;
    v98.size.height = v31;
    MaxX = CGRectGetMaxX(v98);
    v99.origin.x = x;
    v99.origin.y = y;
    v99.size.width = width;
    v99.size.height = height;
    v46 = CGRectGetMaxX(v99);
    v76 = a5;
    v47 = v46;
    v100.origin.x = 0.0;
    v100.origin.y = 0.0;
    v100.size.width = v32;
    v100.size.height = v31;
    MaxY = CGRectGetMaxY(v100);
    v101.origin.x = x;
    v101.origin.y = y;
    v101.size.width = width;
    v101.size.height = height;
    v49 = CGRectGetMaxY(v101);
    v50 = v77;
    if (v45 < v77)
      v50 = v45;
    if (MaxX - v47 < v50)
      v50 = MaxX - v47;
    v51 = MaxY - v49;
    if (v51 >= v50)
      v51 = v50;
    if (v51 < 0.0)
      v52 = 0.0;
    else
      v52 = v51;
    v53 = v84;
    (*(void (**)(uint64_t, _QWORD, double))(v83 + 32))(a12, v83, v52);
    v102.origin.x = v76;
    v102.origin.y = v78;
    v102.size.width = v81;
    v102.size.height = v82;
    v103 = CGRectInset(v102, -v52, -v52);
    v54 = v103.origin.x;
    v55 = v103.origin.y;
    v56 = v103.size.width;
    v57 = v103.size.height;
    v58 = v79;
    AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    (*(void (**)(_BYTE *__return_ptr, uint64_t, double, double, double, double))(*(_QWORD *)(AssociatedConformanceWitness + 8)
                                                                                         + 24))(v86, v58, v54, v55, v56, v57);
    v83 = *(_OWORD *)&v86[8];
    v60 = *(_QWORD *)&v86[24];
    v61 = v87;
    v62 = *(_QWORD *)v86;
    (*(void (**)(char *, uint64_t))(v85 + 8))(v53, v58);
    (*(void (**)(char *, uint64_t))(v80 + 8))(v27, a12);
    v63 = *(_QWORD *)a10;
    v64 = *(_QWORD *)(a10 + 8);
    v65 = *(_QWORD *)(a10 + 16);
    v66 = *(_QWORD *)(a10 + 24);
    *(_QWORD *)a10 = v62;
    *(_OWORD *)(a10 + 8) = v83;
    *(_QWORD *)(a10 + 24) = v60;
    v67 = *(_BYTE *)(a10 + 32);
    *(_BYTE *)(a10 + 32) = v61;
    return outlined consume of Path?(v63, v64, v65, v66, v67);
  }
  else
  {
    v104.origin.x = a5;
    v104.origin.y = a6;
    v104.size.width = a7;
    v104.size.height = a8;
    if (CGRectIsNull(v104))
    {
      v69 = 6;
      a5 = 0.0;
      a6 = 0.0;
      a7 = 0.0;
      a8 = 0.0;
    }
    else
    {
      v69 = 0;
    }
    v70 = *(_QWORD *)a10;
    v71 = *(_QWORD *)(a10 + 8);
    v72 = *(_QWORD *)(a10 + 16);
    v73 = *(_QWORD *)(a10 + 24);
    *(CGFloat *)a10 = a5;
    *(double *)(a10 + 8) = a6;
    *(double *)(a10 + 16) = a7;
    *(double *)(a10 + 24) = a8;
    v74 = *(_BYTE *)(a10 + 32);
    *(_BYTE *)(a10 + 32) = v69;
    return outlined consume of Path?(v70, v71, v72, v73, v74);
  }
}

double protocol witness for static AnyContainerShapeType.path(in:proxy:shape:context:) in conformance ContainerShapeType<A>@<D0>(uint64_t a1@<X8>)
{
  double result;
  __int128 v3;
  __int128 v4;
  char v5;

  static ContainerShapeType.path(in:proxy:shape:context:)();
  result = *(double *)&v3;
  *(_OWORD *)a1 = v3;
  *(_OWORD *)(a1 + 16) = v4;
  *(_BYTE *)(a1 + 32) = v5;
  return result;
}

uint64_t protocol witness for Rule.value.getter in conformance ContainerShapeEnvironment@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  __int128 v3;
  uint64_t *Value;
  uint64_t v5;
  uint64_t v6;
  _OWORD v8[2];
  _OWORD v9[2];

  v3 = *(_OWORD *)(v1 + 24);
  v8[0] = *(_OWORD *)(v1 + 8);
  v8[1] = v3;
  v9[0] = *(_OWORD *)(v1 + 40);
  *(_OWORD *)((char *)v9 + 9) = *(_OWORD *)(v1 + 49);
  Value = (uint64_t *)AGGraphGetValue();
  v6 = *Value;
  v5 = Value[1];
  *a1 = v6;
  a1[1] = v5;
  swift_retain();
  swift_retain();
  return specialized EnvironmentValues.subscript.setter(v8);
}

uint64_t ContainerShapeTransform.value.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t Value;
  double v3;
  double v4;
  double v5;
  double v6;
  uint64_t v7;
  double v8;
  double v9;
  _BYTE v11[40];

  Value = AGGraphGetValue();
  v3 = *(double *)(Value + 8);
  v4 = *(double *)(Value + 16);
  v5 = *(double *)(Value + 24);
  v6 = *(double *)(Value + 32);
  *(_QWORD *)a1 = *(_QWORD *)Value;
  v7 = AGGraphGetValue();
  v8 = *(double *)v7;
  v9 = *(double *)(v7 + 8);
  *(double *)(a1 + 24) = v5 - (*(double *)v7 - v3);
  *(double *)(a1 + 32) = v6 - (v9 - v4);
  *(double *)(a1 + 8) = v8;
  *(double *)(a1 + 16) = v9;
  lazy protocol witness table accessor for type UniqueID and conformance UniqueID();
  swift_retain();
  AnyHashable.init<A>(_:)();
  ViewTransform.appendCoordinateSpace(name:)((uint64_t)v11);
  return outlined destroy of AnyHashable((uint64_t)v11);
}

double protocol witness for static EnvironmentKey.defaultValue.getter in conformance ContainerShapeKey@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_QWORD *)a1 = &type metadata for DefaultContainerShapeType;
  *(_QWORD *)(a1 + 8) = &protocol witness table for DefaultContainerShapeType;
  result = 0.0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 41) = 0u;
  return result;
}

_QWORD *specialized ContainerRelativeShape.path(in:)@<X0>(uint64_t a1@<X8>, __n128 a2@<Q0>, __n128 a3@<Q1>, __n128 a4@<Q2>, __n128 a5@<Q3>)
{
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  ValueMetadata *v21;
  _UNKNOWN **v22;
  unint64_t v23;
  unsigned int v24;
  unsigned int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  _QWORD *result;
  __int128 v31;
  char v32;
  __int128 v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char v37;
  unint64_t v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int v46;
  unsigned int v47;
  unsigned int v48;
  unsigned int v49;
  unsigned int v50;
  unsigned int v51;
  unint64_t v56;
  unsigned int v57;
  unsigned int v58;
  int v59;
  int v60;
  int v61;
  int v62;
  _DWORD v63[13];
  ValueMetadata *v64;
  _UNKNOWN **v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  unsigned int v69;
  unsigned int v70;
  unsigned int v71;
  int v72;
  char v73;
  _QWORD v74[2];
  _OWORD v75[2];
  char v76;
  CGRect v77;

  v6 = (unsigned int *)_threadGeometryProxyData();
  if (v6)
  {
    v7 = *v6;
    v8 = v6[1];
    v9 = v6[2];
    v10 = v6[3];
    v11 = v6[4];
    v12 = v6[5];
    v13 = v6[6];
    v14 = v6[7];
    v15 = v6[8];
    v16 = v6[9];
    v17 = v6[10];
    v18 = v6[11];
    v19 = v6[12];
    v50 = v8;
    v51 = v7;
    v64 = (ValueMetadata *)__PAIR64__(v8, v7);
    v48 = v10;
    v49 = v9;
    v65 = (_UNKNOWN **)__PAIR64__(v10, v9);
    v46 = v12;
    v47 = v11;
    v66 = __PAIR64__(v12, v11);
    v44 = v14;
    v45 = v13;
    v67 = __PAIR64__(v14, v13);
    v42 = v16;
    v43 = v15;
    v68 = __PAIR64__(v16, v15);
    v40 = v18;
    v41 = v17;
    v69 = v17;
    v70 = v18;
    v39 = v19;
    v71 = v19;
    GeometryProxy.environment.getter(v74);
    v20 = v74[0];
    if (v74[1])
    {
      swift_retain_n();
      swift_retain_n();
      specialized PropertyList.Tracker.value<A>(_:for:)(v20, (uint64_t)&v64);
      swift_release_n();
      swift_release_n();
      v21 = v64;
      v22 = v65;
      v23 = v67;
      v24 = v68;
      v25 = HIDWORD(v68);
      v26 = v69;
      v27 = v70;
      v28 = v71;
      v29 = v72;
    }
    else
    {
      v34 = swift_retain_n();
      v35 = specialized find<A>(_:key:)(v34);
      if (v35)
      {
        v21 = *(ValueMetadata **)(v35 + 72);
        v22 = *(_UNKNOWN ***)(v35 + 80);
        v36 = *(_QWORD *)(v35 + 96);
        v24 = *(_DWORD *)(v35 + 104);
        v25 = *(_DWORD *)(v35 + 108);
        v26 = *(_DWORD *)(v35 + 112);
        v27 = *(_DWORD *)(v35 + 116);
        v28 = *(_DWORD *)(v35 + 120);
        v29 = *(_DWORD *)(v35 + 124);
        v37 = *(_BYTE *)(v35 + 128);
        v64 = v21;
        v65 = v22;
        v66 = *(_QWORD *)(v35 + 88);
        v38 = v36;
        v67 = v36;
        v68 = __PAIR64__(v25, v24);
        v73 = v37;
      }
      else
      {
        v25 = 0;
        v24 = 0;
        v38 = 0;
        v26 = 0;
        v27 = 0;
        v28 = 0;
        v29 = 0;
        v21 = &type metadata for DefaultContainerShapeType;
        v22 = &protocol witness table for DefaultContainerShapeType;
        v64 = &type metadata for DefaultContainerShapeType;
        v65 = &protocol witness table for DefaultContainerShapeType;
        v67 = 0;
        v68 = 0;
        v66 = 0;
      }
      v69 = v26;
      v70 = v27;
      v71 = v28;
      v72 = v29;
      swift_release_n();
      v23 = v38;
    }
    v63[0] = v51;
    v63[1] = v50;
    v63[2] = v49;
    v63[3] = v48;
    v63[4] = v47;
    v63[5] = v46;
    v63[6] = v45;
    v63[7] = v44;
    v63[8] = v43;
    v63[9] = v42;
    v63[10] = v41;
    v63[11] = v40;
    v63[12] = v39;
    v56 = v23;
    v57 = v24;
    v58 = v25;
    v59 = v26;
    v60 = v27;
    v61 = v28;
    v62 = v29;
    result = ((_QWORD *(*)(_OWORD *__return_ptr, _DWORD *, unint64_t, unint64_t *, ValueMetadata *, _UNKNOWN **, __n128, __n128, __n128, __n128))v22[1])(v75, v63, v66, &v56, v21, v22, a2, a3, a4, a5);
    v31 = v75[0];
    v33 = v75[1];
    v32 = v76;
  }
  else
  {
    *(_QWORD *)&v77.size.width = a4.n128_u64[0];
    *(_QWORD *)&v77.origin.x = a2.n128_u64[0];
    *(_QWORD *)&v77.origin.y = a3.n128_u64[0];
    *(_QWORD *)&v77.size.height = a5.n128_u64[0];
    result = (_QWORD *)CGRectIsNull(v77);
    if ((result & 1) != 0)
    {
      v31 = 0uLL;
      v32 = 6;
      v33 = 0uLL;
    }
    else
    {
      v32 = 0;
      *(_QWORD *)&v31 = a2.n128_u64[0];
      *((_QWORD *)&v31 + 1) = a3.n128_u64[0];
      *(_QWORD *)&v33 = a4.n128_u64[0];
      *((_QWORD *)&v33 + 1) = a5.n128_u64[0];
    }
  }
  *(_OWORD *)a1 = v31;
  *(_OWORD *)(a1 + 16) = v33;
  *(_BYTE *)(a1 + 32) = v32;
  return result;
}

uint64_t type metadata accessor for _ContainerShapeModifier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for _ContainerShapeModifier);
}

uint64_t type metadata accessor for SystemContainerShapeModifier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for SystemContainerShapeModifier);
}

uint64_t partial apply for closure #1 in static _ContainerShapeModifier._makeView(modifier:inputs:body:)(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in static GeometryVisualEffect._makeVisualEffect(effect:inputs:body:)(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), (uint64_t (*)(_QWORD))type metadata accessor for _ContainerShapeModifier, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply);
}

unint64_t instantiation function for generic protocol witness table for ContainerRelativeShape(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type ContainerRelativeShape and conformance ContainerRelativeShape();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table accessor for type ContainerRelativeShape and conformance ContainerRelativeShape();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t instantiation function for generic protocol witness table for ContainerRelativeShape._Inset(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type ContainerRelativeShape._Inset and conformance ContainerRelativeShape._Inset();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table accessor for type ContainerRelativeShape._Inset and conformance ContainerRelativeShape._Inset();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t associated type witness table accessor for InsettableShape.InsetShape : InsettableShape in ContainerRelativeShape()
{
  return swift_getOpaqueTypeConformance2();
}

double sub_2350982F8@<D0>(double *a1@<X0>, _QWORD *a2@<X8>)
{
  double result;

  result = *a1;
  *a2 = *(_QWORD *)a1;
  return result;
}

double sub_235098304(double *a1, _QWORD *a2)
{
  double result;

  result = *a1;
  *a2 = *(_QWORD *)a1;
  return result;
}

ValueMetadata *type metadata accessor for ContainerRelativeShape()
{
  return &type metadata for ContainerRelativeShape;
}

ValueMetadata *type metadata accessor for ContainerRelativeShape._Inset()
{
  return &type metadata for ContainerRelativeShape._Inset;
}

_UNKNOWN **sub_23509833C()
{
  return &protocol witness table for _ShapeView<A, B>;
}

uint64_t sub_235098348(uint64_t *a1)
{
  return get_witness_table_7SwiftUI4ViewRzAaBRd__r__lAA15ModifiedContentVyxAA16_OverlayModifierVyqd__GGAaBHPxAaBHD1__AgA0cG0HPyHCHCTm(a1, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _ContainerShapeModifier, (uint64_t)&protocol witness table for _ContainerShapeModifier<A>);
}

uint64_t sub_23509835C(uint64_t *a1)
{
  return get_witness_table_7SwiftUI4ViewRzAaBRd__r__lAA15ModifiedContentVyxAA16_OverlayModifierVyqd__GGAaBHPxAaBHD1__AgA0cG0HPyHCHCTm(a1, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for SystemContainerShapeModifier, (uint64_t)&protocol witness table for SystemContainerShapeModifier<A>);
}

uint64_t getEnumTagSinglePayload for _ContainerShapeModifier(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  char v8;
  int v9;
  unsigned int v10;
  int v11;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = a2 - v5;
  if (a2 <= v5)
    goto LABEL_18;
  v7 = *(_QWORD *)(v4 + 64);
  v8 = 8 * v7;
  if (v7 <= 3)
  {
    v10 = ((v6 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      v9 = *(_DWORD *)(a1 + v7);
      if (!v9)
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      v9 = *(unsigned __int16 *)(a1 + v7);
      if (!*(_WORD *)(a1 + v7))
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_18:
      if (v5)
        return (*(uint64_t (**)(void))(v4 + 48))();
      return 0;
    }
  }
  v9 = *(unsigned __int8 *)(a1 + v7);
  if (!*(_BYTE *)(a1 + v7))
    goto LABEL_18;
LABEL_11:
  v11 = (v9 - 1) << v8;
  if (v7 > 3)
    v11 = 0;
  if (!(_DWORD)v7)
    return v5 + v11 + 1;
  if (v7 > 3)
    LODWORD(v7) = 4;
  return ((uint64_t (*)(void))((char *)&loc_235098420 + 4 * byte_2352C4020[(v7 - 1)]))();
}

void storeEnumTagSinglePayload for _ContainerShapeModifier(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  BOOL v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = a3 >= v7;
  v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      v13 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v13))
      {
        v11 = 4u;
      }
      else if (v13 >= 0x100)
      {
        v11 = 2;
      }
      else
      {
        v11 = v13 > 1;
      }
    }
    else
    {
      v11 = 1u;
    }
  }
  else
  {
    v11 = 0;
  }
  if (v7 < a2)
  {
    v12 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        v14 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v14;
          *((_BYTE *)a1 + 2) = BYTE2(v14);
        }
        else if ((_DWORD)v8 == 2)
        {
          *a1 = v14;
        }
        else
        {
          *(_BYTE *)a1 = v14;
        }
      }
    }
    else
    {
      bzero(a1, *(_QWORD *)(v6 + 64));
      *(_DWORD *)a1 = v12;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X11 }
}

uint64_t partial apply for closure #1 in static SystemContainerShapeModifier._makeView(modifier:inputs:body:)(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in static GeometryVisualEffect._makeVisualEffect(effect:inputs:body:)(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), (uint64_t (*)(_QWORD))type metadata accessor for SystemContainerShapeModifier, (uint64_t)partial apply for closure #1 in static PointerOffset.of(_:));
}

_QWORD *specialized ImplicitContainerShape.path(in:)@<X0>(uint64_t a1@<X8>, CGFloat a2@<D0>, CGFloat a3@<D1>, CGFloat a4@<D2>, CGFloat a5@<D3>)
{
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  ValueMetadata *v23;
  _UNKNOWN **v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  _QWORD *result;
  char v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  char v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unsigned int v48;
  unsigned int v49;
  unsigned int v50;
  unsigned int v51;
  unsigned int v52;
  unsigned int v53;
  unsigned int v54;
  unsigned int v55;
  _QWORD v56[4];
  ValueMetadata *v57;
  _UNKNOWN **v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  char v64;
  double v65;
  double v66;
  double v67;
  double v68;
  char v69;
  CGRect v70;
  CGRect v71;

  v10 = (unsigned int *)_threadGeometryProxyData();
  if (v10)
  {
    v11 = v10[1];
    v12 = v10[2];
    v13 = v10[3];
    v14 = v10[4];
    v15 = v10[5];
    v16 = v10[7];
    v17 = v10[8];
    v18 = v10[9];
    v19 = v10[10];
    v20 = v10[11];
    v21 = v10[12];
    v54 = v10[6];
    v55 = *v10;
    LODWORD(v57) = *v10;
    HIDWORD(v57) = v11;
    v58 = (_UNKNOWN **)__PAIR64__(v13, v12);
    v59 = __PAIR64__(v15, v14);
    v60 = __PAIR64__(v16, v54);
    v52 = v17;
    v53 = v16;
    v61 = __PAIR64__(v18, v17);
    v50 = v19;
    v51 = v18;
    v62 = __PAIR64__(v20, v19);
    v48 = v21;
    v49 = v20;
    LODWORD(v63) = v21;
    GeometryProxy.environment.getter(&v65);
    v22 = *(_QWORD *)&v65;
    if (v66 == 0.0)
    {
      v40 = swift_retain_n();
      v41 = specialized find<A>(_:key:)(v40);
      if (v41)
      {
        v23 = *(ValueMetadata **)(v41 + 72);
        v24 = *(_UNKNOWN ***)(v41 + 80);
        v47 = *(_QWORD *)(v41 + 96);
        v46 = *(_QWORD *)(v41 + 104);
        v45 = *(_QWORD *)(v41 + 112);
        v44 = *(_QWORD *)(v41 + 120);
        v42 = *(_BYTE *)(v41 + 128);
        v57 = v23;
        v58 = v24;
        v43 = v42 ^ 1;
        v59 = *(_QWORD *)(v41 + 88);
      }
      else
      {
        v47 = 0;
        v23 = &type metadata for DefaultContainerShapeType;
        v24 = &protocol witness table for DefaultContainerShapeType;
        v57 = &type metadata for DefaultContainerShapeType;
        v58 = &protocol witness table for DefaultContainerShapeType;
        v60 = 0;
        v61 = 0;
        v59 = 0;
        LODWORD(v62) = 0;
        v45 = 0;
        v46 = 0;
        v43 = 1;
        v44 = 0;
      }
      swift_release_n();
      if ((v43 & 1) != 0)
      {
        v28 = v59;
        v31 = v54;
        v30 = v55;
        v33 = v52;
        v32 = v53;
        v35 = v50;
        v34 = v51;
        v37 = v48;
        v36 = v49;
        v29 = v47;
        v26 = v45;
        v25 = v46;
        v27 = v44;
        goto LABEL_13;
      }
    }
    else
    {
      swift_retain_n();
      swift_retain_n();
      specialized PropertyList.Tracker.value<A>(_:for:)(v22, (uint64_t)&v57);
      swift_release_n();
      swift_release_n();
      if ((v64 & 1) == 0)
      {
        v23 = v57;
        v24 = v58;
        v25 = v61;
        v26 = v62;
        v27 = v63;
        v28 = v59;
        v29 = v60;
        v31 = v54;
        v30 = v55;
        v33 = v52;
        v32 = v53;
        v35 = v50;
        v34 = v51;
        v37 = v48;
        v36 = v49;
LABEL_13:
        v57 = (ValueMetadata *)__PAIR64__(v11, v30);
        v58 = (_UNKNOWN **)__PAIR64__(v13, v12);
        v59 = __PAIR64__(v15, v14);
        v60 = __PAIR64__(v32, v31);
        v61 = __PAIR64__(v34, v33);
        v62 = __PAIR64__(v36, v35);
        LODWORD(v63) = v37;
        v56[0] = v29;
        v56[1] = v25;
        v56[2] = v26;
        v56[3] = v27;
        result = ((_QWORD *(*)(double *__return_ptr, ValueMetadata **, unint64_t, _QWORD *, ValueMetadata *, _UNKNOWN **, CGFloat, CGFloat, CGFloat, CGFloat))v24[1])(&v65, &v57, v28, v56, v23, v24, a2, a3, a4, a5);
        a2 = v65;
        a3 = v66;
        a4 = v67;
        a5 = v68;
        v39 = v69;
        goto LABEL_17;
      }
    }
    v71.origin.x = a2;
    v71.origin.y = a3;
    v71.size.width = a4;
    v71.size.height = a5;
    result = (_QWORD *)CGRectIsNull(v71);
    if ((result & 1) != 0)
    {
      v39 = 6;
      a2 = 0.0;
      a3 = 0.0;
      a4 = 0.0;
      a5 = 0.0;
    }
    else
    {
      v39 = 0;
    }
  }
  else
  {
    v70.origin.x = a2;
    v70.origin.y = a3;
    v70.size.width = a4;
    v70.size.height = a5;
    result = (_QWORD *)CGRectIsNull(v70);
    if ((result & 1) != 0)
    {
      a2 = 0.0;
      a3 = 0.0;
      a4 = 0.0;
      a5 = 0.0;
      v39 = 6;
    }
    else
    {
      v39 = 0;
    }
  }
LABEL_17:
  *(CGFloat *)a1 = a2;
  *(CGFloat *)(a1 + 8) = a3;
  *(CGFloat *)(a1 + 16) = a4;
  *(CGFloat *)(a1 + 24) = a5;
  *(_BYTE *)(a1 + 32) = v39;
  return result;
}

unint64_t lazy protocol witness table accessor for type ContainerShapeTransform and conformance ContainerShapeTransform()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ContainerShapeTransform and conformance ContainerShapeTransform;
  if (!lazy protocol witness table cache variable for type ContainerShapeTransform and conformance ContainerShapeTransform)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ContainerShapeTransform, &unk_250637550);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ContainerShapeTransform and conformance ContainerShapeTransform);
  }
  return result;
}

uint64_t type metadata accessor for ContainerShapeType(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ContainerShapeType);
}

unint64_t lazy protocol witness table accessor for type ContainerShapeEnvironment and conformance ContainerShapeEnvironment()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ContainerShapeEnvironment and conformance ContainerShapeEnvironment;
  if (!lazy protocol witness table cache variable for type ContainerShapeEnvironment and conformance ContainerShapeEnvironment)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ContainerShapeEnvironment, &unk_25063AF58);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ContainerShapeEnvironment and conformance ContainerShapeEnvironment);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for ContainerShapeEnvironment(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 65))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ContainerShapeEnvironment(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 64) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 65) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 65) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

void *type metadata accessor for ContainerShapeEnvironment()
{
  return &unk_25063AF58;
}

void *type metadata accessor for ContainerShapeTransform()
{
  return &unk_250637550;
}

ValueMetadata *type metadata accessor for ContainerShapeData()
{
  return &type metadata for ContainerShapeData;
}

ValueMetadata *type metadata accessor for ContainerShapeKey()
{
  return &type metadata for ContainerShapeKey;
}

ValueMetadata *type metadata accessor for DefaultContainerShapeType()
{
  return &type metadata for DefaultContainerShapeType;
}

unint64_t instantiation function for generic protocol witness table for ContainerShapeTransform(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type ContainerShapeTransform and conformance ContainerShapeTransform();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t instantiation function for generic protocol witness table for ContainerShapeEnvironment(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type ContainerShapeEnvironment and conformance ContainerShapeEnvironment();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t partial apply for closure #1 in static ContainerShapeType.path(in:proxy:shape:context:)()
{
  uint64_t v0;

  return closure #1 in static ContainerShapeType.path(in:proxy:shape:context:)(*(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56), *(CGFloat *)(v0 + 80), *(double *)(v0 + 88), *(double *)(v0 + 96), *(double *)(v0 + 104), *(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 112), *(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t outlined consume of Path?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int8 a5)
{
  if (a5 != 0xFF)
    return outlined consume of Path.Storage(a1, a2, a3, a4, a5);
  return a1;
}

uint64_t partial apply for closure #1 in GeometryProxy.rect(_:in:)(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in GeometryProxy.rect(_:in:)(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

void *type metadata accessor for ContainerShapeContext()
{
  return &unk_250632168;
}

uint64_t _ResolvedKeyframeTrackContent.init()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t *a4@<X8>)
{
  uint64_t result;

  type metadata accessor for _ResolvedKeyframeTrackContent.Segment(0, a1, a2, a3);
  result = static Array._allocateUninitialized(_:)();
  *a4 = result;
  return result;
}

void _ResolvedKeyframeTrackContent.Segment.end.getter(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  double v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  _QWORD v17[6];

  v17[4] = a3;
  v4 = *(_QWORD *)(a1 + 16);
  v5 = *(_QWORD *)(a1 + 24);
  v6 = type metadata accessor for _ResolvedKeyframeTrackContent.Linear(0, v4, v5, a2);
  v17[1] = *(_QWORD *)(v6 - 8);
  v17[2] = v6;
  MEMORY[0x24BDAC7A8](v6);
  v17[3] = (char *)v17 - v7;
  v9 = type metadata accessor for _ResolvedKeyframeTrackContent._Spring(0, v4, v5, v8);
  MEMORY[0x24BDAC7A8](v9);
  v11 = type metadata accessor for _ResolvedKeyframeTrackContent.Cubic(0, v4, v5, v10);
  MEMORY[0x24BDAC7A8](v11);
  v13 = MEMORY[0x24BDAC7A8](v12);
  (*(void (**)(char *, _QWORD, uint64_t, double))(v15 + 16))((char *)v17 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0), v17[5], a1, v13);
  v16 = (char *)sub_235098CE0 + 4 * byte_2352C44B0[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

uint64_t sub_235098CE0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t AssociatedTypeWitness;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 32))(*(_QWORD *)(v1 - 96), v0, AssociatedTypeWitness);
}

void MergedKeyframeTrackContent.init(first:second:)(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 32))(a3, a1, a2);
  type metadata accessor for MergedKeyframeTrackContent();
}

uint64_t sub_235098EAC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 32))(v3 + *(int *)(a1 + 60), v2, v1);
}

void LinearKeyframe.init(_:duration:timingCurve:)(uint64_t a1@<X0>, __n128 *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>, double a6@<D0>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v13;
  char *v14;
  unint64_t v15;
  unint64_t v16;
  unsigned __int8 v17;
  __n128 v18;
  __n128 v19;
  unint64_t v20;
  unint64_t v21;
  unsigned __int8 v22;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v14 = (char *)&v18 - v13;
  v18 = *a2;
  v15 = a2[1].n128_u64[0];
  v16 = a2[1].n128_u64[1];
  v17 = a2[2].n128_u8[0];
  (*(void (**)(uint64_t, uint64_t))(a4 + 24))(a3, a4);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 8))(a1, a3);
  v19 = v18;
  v20 = v15;
  v21 = v16;
  v22 = v17;
  _ResolvedKeyframeTrackContent.Linear.init(to:duration:timingCurve:)((uint64_t)v14, &v19, a3, a4, a5, a6);
}

void PrimitiveKeyframeTrackContent.body.getter()
{
  specialized PrimitiveKeyframeTrackContent.bodyError()();
}

uint64_t KeyframeTrackContent<>._resolve(into:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  double v8;
  uint64_t v9;
  char *v10;
  uint64_t AssociatedConformanceWitness;
  uint64_t v13;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v7 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v8 = MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v10 = (char *)&v13 - v9;
  (*(void (**)(uint64_t, uint64_t, double))(a3 + 40))(a2, a3, v8);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(AssociatedConformanceWitness + 48))(a1, AssociatedTypeWitness, AssociatedConformanceWitness);
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v10, AssociatedTypeWitness);
}

uint64_t _ResolvedKeyframeTrackContent.append(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  double v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v5 = type metadata accessor for _ResolvedKeyframeTrackContent.Segment(0, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), a4);
  v6 = MEMORY[0x24BDAC7A8](v5);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v7 + 16))((char *)&v10 - v8, a1, v5, v6);
  type metadata accessor for Array();
  return Array.append(_:)();
}

uint64_t _ResolvedKeyframeTrackContent.Cubic.init(to:startVelocity:endVelocity:duration:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>, double a7@<D0>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v15;
  int *v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(uint64_t, uint64_t, uint64_t);
  uint64_t result;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 32))(a6, a1, AssociatedTypeWitness);
  v16 = (int *)type metadata accessor for _ResolvedKeyframeTrackContent.Cubic(0, a4, a5, v15);
  v17 = a6 + v16[9];
  v18 = type metadata accessor for Optional();
  v19 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 32);
  v19(v17, a2, v18);
  result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v19)(a6 + v16[10], a3, v18);
  *(double *)(a6 + v16[11]) = a7;
  return result;
}

uint64_t _ResolvedKeyframeTrackContent._Spring.init(to:spring:startVelocity:duration:)@<X0>(uint64_t a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char a5@<W4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v15;
  uint64_t AssociatedTypeWitness;
  uint64_t v17;
  int *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t result;
  uint64_t v23;
  __int128 v24;

  v24 = *a2;
  v15 = *((_QWORD *)a2 + 2);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 32))(a8, a1, AssociatedTypeWitness);
  v18 = (int *)type metadata accessor for _ResolvedKeyframeTrackContent._Spring(0, a6, a7, v17);
  v19 = a8 + v18[9];
  *(_OWORD *)v19 = v24;
  *(_QWORD *)(v19 + 16) = v15;
  v20 = a8 + v18[10];
  v21 = type metadata accessor for Optional();
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 32))(v20, a3, v21);
  v23 = a8 + v18[11];
  *(_QWORD *)v23 = a4;
  *(_BYTE *)(v23 + 8) = a5 & 1;
  return result;
}

__n128 _ResolvedKeyframeTrackContent.Linear.init(to:duration:timingCurve:)@<Q0>(uint64_t a1@<X0>, __n128 *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>, double a6@<D0>)
{
  unint64_t v11;
  unint64_t v12;
  unsigned __int8 v13;
  uint64_t AssociatedTypeWitness;
  uint64_t v15;
  uint64_t v16;
  __n128 *v17;
  __n128 result;
  __n128 v19;

  v19 = *a2;
  v11 = a2[1].n128_u64[0];
  v12 = a2[1].n128_u64[1];
  v13 = a2[2].n128_u8[0];
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 32))(a5, a1, AssociatedTypeWitness);
  v16 = type metadata accessor for _ResolvedKeyframeTrackContent.Linear(0, a3, a4, v15);
  *(double *)(a5 + *(int *)(v16 + 36)) = a6;
  v17 = (__n128 *)(a5 + *(int *)(v16 + 40));
  result = v19;
  *v17 = v19;
  v17[1].n128_u64[0] = v11;
  v17[1].n128_u64[1] = v12;
  v17[2].n128_u8[0] = v13;
  return result;
}

uint64_t CubicKeyframe.init(_:duration:startVelocity:endVelocity:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>, double a7@<D0>)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t AssociatedTypeWitness;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  double v27;
  uint64_t v28;
  void (*v29)(uint64_t, uint64_t, double);
  uint64_t v30;
  void (*v31)(char *, uint64_t, uint64_t);
  uint64_t v32;
  int v33;
  void (*v34)(char *, uint64_t, uint64_t, uint64_t);
  void (*v35)(uint64_t, uint64_t);
  char *v36;
  uint64_t v37;
  void (*v38)(uint64_t, uint64_t);
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void (*v43)(uint64_t, uint64_t);
  void (*v44)(uint64_t, uint64_t);
  void (*v45)(uint64_t, uint64_t);
  uint64_t v46;
  uint64_t (*v48)(char *, uint64_t, uint64_t);
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  char *v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;

  v58 = a3;
  v63 = a2;
  v61 = a6;
  v11 = type metadata accessor for Optional();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v11);
  v59 = (char *)&v48 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v14);
  v16 = (char *)&v48 - v15;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v18 = type metadata accessor for Optional();
  MEMORY[0x24BDAC7A8](v18);
  v57 = (char *)&v48 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v20);
  v22 = (char *)&v48 - v21;
  v49 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](v23);
  v25 = (char *)&v48 - v24;
  v54 = type metadata accessor for _ResolvedKeyframeTrackContent.Cubic(0, a4, a5, v26);
  v52 = *(_QWORD *)(v54 - 8);
  v27 = MEMORY[0x24BDAC7A8](v54);
  v51 = (uint64_t)&v48 - v28;
  v29 = *(void (**)(uint64_t, uint64_t, double))(a5 + 24);
  v53 = v25;
  v60 = a1;
  v29(a4, a5, v27);
  v30 = v12;
  v31 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 16);
  v31(v16, v63, v11);
  v32 = *(_QWORD *)(a4 - 8);
  v48 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v32 + 48);
  v33 = v48(v16, 1, a4);
  v62 = AssociatedTypeWitness;
  v55 = a5;
  v56 = v22;
  v50 = v32;
  if (v33 == 1)
  {
    (*(void (**)(char *, uint64_t))(v30 + 8))(v16, v11);
    v34 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v49 + 56);
    v34(v22, 1, 1, AssociatedTypeWitness);
  }
  else
  {
    ((void (*)(uint64_t, uint64_t))v29)(a4, a5);
    (*(void (**)(char *, uint64_t))(v32 + 8))(v16, a4);
    v34 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v49 + 56);
    v34(v22, 0, 1, v62);
  }
  v35 = (void (*)(uint64_t, uint64_t))v29;
  v37 = v58;
  v36 = v59;
  v31(v59, v58, v11);
  if (v48(v36, 1, a4) == 1)
  {
    v38 = *(void (**)(uint64_t, uint64_t))(v30 + 8);
    v38(v37, v11);
    v38(v63, v11);
    (*(void (**)(uint64_t, uint64_t))(v50 + 8))(v60, a4);
    v38((uint64_t)v36, v11);
    v39 = 1;
    v40 = (uint64_t)v56;
    v41 = (uint64_t)v57;
    v42 = v55;
  }
  else
  {
    v41 = (uint64_t)v57;
    v43 = v35;
    v42 = v55;
    v43(a4, v55);
    v44 = *(void (**)(uint64_t, uint64_t))(v30 + 8);
    v44(v37, v11);
    v44(v63, v11);
    v45 = *(void (**)(uint64_t, uint64_t))(v50 + 8);
    v45(v60, a4);
    v45((uint64_t)v36, a4);
    v39 = 0;
    v40 = (uint64_t)v56;
  }
  v34((char *)v41, v39, 1, v62);
  v46 = v51;
  _ResolvedKeyframeTrackContent.Cubic.init(to:startVelocity:endVelocity:duration:)((uint64_t)v53, v40, v41, a4, v42, v51, a7);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v52 + 32))(v61, v46, v54);
}

uint64_t type metadata accessor for _ResolvedKeyframeTrackContent.Cubic(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for _ResolvedKeyframeTrackContent.Cubic);
}

uint64_t CubicKeyframe._resolve(into:)(uint64_t a1, uint64_t a2)
{
  return CubicKeyframe._resolve(into:)(a1, a2, (uint64_t (*)(_QWORD, uint64_t, uint64_t, double))type metadata accessor for _ResolvedKeyframeTrackContent.Cubic, 1);
}

uint64_t type metadata accessor for _ResolvedKeyframeTrackContent.Segment(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for _ResolvedKeyframeTrackContent.Segment);
}

uint64_t type metadata accessor for _ResolvedKeyframeTrackContent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for _ResolvedKeyframeTrackContent);
}

void protocol witness for KeyframeTrackContent.body.getter in conformance CubicKeyframe<A>(uint64_t a1)
{
  MEMORY[0x23B7C9C04](&protocol conformance descriptor for CubicKeyframe<A>, a1);
  PrimitiveKeyframeTrackContent.body.getter();
}

uint64_t SpringKeyframe.init(_:duration:spring:startVelocity:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t AssociatedTypeWitness;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(uint64_t, uint64_t);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(uint64_t, uint64_t);
  uint64_t v33;
  uint64_t v34;
  void (*v35)(uint64_t, uint64_t);
  uint64_t v36;
  __int128 v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  __int128 v50;
  uint64_t v51;

  v47 = a3;
  v48 = a2;
  v49 = a8;
  v13 = type metadata accessor for Optional();
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x24BDAC7A8](v13);
  v16 = (char *)&v38 - v15;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v18 = type metadata accessor for Optional();
  MEMORY[0x24BDAC7A8](v18);
  v41 = (char *)&v38 - v19;
  v45 = AssociatedTypeWitness;
  v40 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](v20);
  v22 = (char *)&v38 - v21;
  v44 = type metadata accessor for _ResolvedKeyframeTrackContent._Spring(0, a6, a7, v23);
  v42 = *(_QWORD *)(v44 - 8);
  MEMORY[0x24BDAC7A8](v44);
  v39 = (uint64_t)&v38 - v24;
  v38 = *(_OWORD *)a4;
  v25 = *(_QWORD *)(a4 + 16);
  v26 = *(void (**)(uint64_t, uint64_t))(a7 + 24);
  v43 = v22;
  v46 = a1;
  v26(a6, a7);
  v50 = v38;
  v51 = v25;
  v27 = v14;
  v28 = a5;
  v29 = a5;
  v30 = v13;
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v16, v29, v13);
  v31 = *(_QWORD *)(a6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v31 + 48))(v16, 1, a6) == 1)
  {
    v32 = *(void (**)(uint64_t, uint64_t))(v27 + 8);
    v32(v28, v13);
    (*(void (**)(uint64_t, uint64_t))(v31 + 8))(v46, a6);
    v32((uint64_t)v16, v13);
    v33 = 1;
    v34 = (uint64_t)v41;
  }
  else
  {
    v34 = (uint64_t)v41;
    v26(a6, a7);
    (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v28, v30);
    v35 = *(void (**)(uint64_t, uint64_t))(v31 + 8);
    v35(v46, a6);
    v35((uint64_t)v16, a6);
    v33 = 0;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v40 + 56))(v34, v33, 1, v45);
  v36 = v39;
  _ResolvedKeyframeTrackContent._Spring.init(to:spring:startVelocity:duration:)((uint64_t)v43, &v50, v34, v48, v47 & 1, a6, a7, v39);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v42 + 32))(v49, v36, v44);
}

uint64_t type metadata accessor for _ResolvedKeyframeTrackContent._Spring(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for _ResolvedKeyframeTrackContent._Spring);
}

uint64_t SpringKeyframe._resolve(into:)(uint64_t a1, uint64_t a2)
{
  return CubicKeyframe._resolve(into:)(a1, a2, (uint64_t (*)(_QWORD, uint64_t, uint64_t, double))type metadata accessor for _ResolvedKeyframeTrackContent._Spring, 2);
}

void protocol witness for KeyframeTrackContent.body.getter in conformance SpringKeyframe<A>(uint64_t a1)
{
  MEMORY[0x23B7C9C04](&protocol conformance descriptor for SpringKeyframe<A>, a1);
  PrimitiveKeyframeTrackContent.body.getter();
}

uint64_t LinearKeyframe._resolve(into:)(uint64_t a1, uint64_t a2)
{
  return CubicKeyframe._resolve(into:)(a1, a2, (uint64_t (*)(_QWORD, uint64_t, uint64_t, double))type metadata accessor for _ResolvedKeyframeTrackContent.Linear, 3);
}

uint64_t CubicKeyframe._resolve(into:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD, uint64_t, uint64_t, double), uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;

  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a2 + 24);
  v8 = type metadata accessor for _ResolvedKeyframeTrackContent.Segment(0, v6, v7, a4);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = MEMORY[0x24BDAC7A8](v8);
  v12 = (char *)&v19 - v11;
  v13 = a3(0, v6, v7, v10);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(v12, v4, v13);
  swift_storeEnumTagMultiPayload();
  v15 = type metadata accessor for _ResolvedKeyframeTrackContent(0, v6, v7, v14);
  _ResolvedKeyframeTrackContent.append(_:)((uint64_t)v12, v15, v16, v17);
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v12, v8);
}

uint64_t type metadata accessor for _ResolvedKeyframeTrackContent.Linear(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for _ResolvedKeyframeTrackContent.Linear);
}

void protocol witness for KeyframeTrackContent.body.getter in conformance LinearKeyframe<A>(uint64_t a1)
{
  MEMORY[0x23B7C9C04](&protocol conformance descriptor for LinearKeyframe<A>, a1);
  PrimitiveKeyframeTrackContent.body.getter();
}

uint64_t MoveKeyframe.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 32))(a3, a1);
}

uint64_t MoveKeyframe._resolve(into:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(a2 + 24);
  v6 = type metadata accessor for _ResolvedKeyframeTrackContent.Segment(0, v4, v5, a4);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)&v16 - v9;
  (*(void (**)(uint64_t, uint64_t, double))(v5 + 24))(v4, v5, v8);
  swift_storeEnumTagMultiPayload();
  v12 = type metadata accessor for _ResolvedKeyframeTrackContent(0, v4, v5, v11);
  _ResolvedKeyframeTrackContent.append(_:)((uint64_t)v10, v12, v13, v14);
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v10, v6);
}

void protocol witness for KeyframeTrackContent.body.getter in conformance MoveKeyframe<A>(uint64_t a1)
{
  MEMORY[0x23B7C9C04](&protocol conformance descriptor for MoveKeyframe<A>, a1);
  PrimitiveKeyframeTrackContent.body.getter();
}

uint64_t MergedKeyframeTrackContent._resolve(into:)(uint64_t a1, _QWORD *a2)
{
  (*(void (**)(uint64_t, _QWORD))(a2[5] + 48))(a1, a2[3]);
  return (*(uint64_t (**)(uint64_t, _QWORD))(a2[6] + 48))(a1, a2[4]);
}

void protocol witness for KeyframeTrackContent.body.getter in conformance MergedKeyframeTrackContent<A, B, C>(uint64_t a1)
{
  MEMORY[0x23B7C9C04](&protocol conformance descriptor for MergedKeyframeTrackContent<A, B, C>, a1);
  PrimitiveKeyframeTrackContent.body.getter();
}

void protocol witness for KeyframeTrackContent.body.getter in conformance EmptyKeyframeTrackContent<A>(uint64_t a1)
{
  MEMORY[0x23B7C9C04](&protocol conformance descriptor for EmptyKeyframeTrackContent<A>, a1);
  PrimitiveKeyframeTrackContent.body.getter();
}

uint64_t protocol witness for KeyframeTrackContent._resolve(into:) in conformance EmptyKeyframeTrackContent<A>(uint64_t a1, uint64_t a2)
{
  return _ViewInputs.base.modify(a1, *(_QWORD *)(a2 + 16));
}

uint64_t ArrayKeyframeTrackContent._resolve(into:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t, uint64_t);
  Swift::Bool IsNativeType;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;

  v9 = *(_QWORD *)(a4 - 8);
  v10 = *(_QWORD *)(v9 + 64);
  MEMORY[0x24BDAC7A8](a1);
  swift_bridgeObjectRetain();
  if (!MEMORY[0x23B7C6298](a2, a4))
    return swift_bridgeObjectRelease();
  v11 = 0;
  v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(a5 + 48);
  while (1)
  {
    IsNativeType = Array._hoistableIsNativeTypeChecked()();
    Array._checkSubscript(_:wasNativeTypeChecked:)();
    if (IsNativeType)
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v9 + 16))((char *)&v16 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), a2+ ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80))+ *(_QWORD *)(v9 + 72) * v11, a4);
      v14 = v11 + 1;
      if (__OFADD__(v11, 1))
        goto LABEL_10;
      goto LABEL_5;
    }
    result = _ArrayBuffer._getElementSlowPath(_:)();
    if (v10 != 8)
      break;
    v17 = result;
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v9 + 16))(&v16 - 2, &v17, a4);
    swift_unknownObjectRelease();
    v14 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
LABEL_10:
      __break(1u);
      return swift_bridgeObjectRelease();
    }
LABEL_5:
    v12(a1, a4, a5);
    (*(void (**)(char *, uint64_t))(v9 + 8))((char *)&v16 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), a4);
    ++v11;
    if (v14 == MEMORY[0x23B7C6298](a2, a4))
      return swift_bridgeObjectRelease();
  }
  __break(1u);
  return result;
}

void protocol witness for KeyframeTrackContent.body.getter in conformance ArrayKeyframeTrackContent<A, B>(uint64_t a1)
{
  MEMORY[0x23B7C9C04](&protocol conformance descriptor for ArrayKeyframeTrackContent<A, B>, a1);
  PrimitiveKeyframeTrackContent.body.getter();
}

uint64_t protocol witness for KeyframeTrackContent._resolve(into:) in conformance ArrayKeyframeTrackContent<A, B>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;

  return ArrayKeyframeTrackContent._resolve(into:)(a1, *v3, a3, *(_QWORD *)(a2 + 24), *(_QWORD *)(a2 + 32));
}

void protocol witness for KeyframeTrackContent.body.getter in conformance KeyframeTrackContentBuilder<A>.Conditional<A1, B1, C1>(uint64_t a1)
{
  MEMORY[0x23B7C9C04](&protocol conformance descriptor for KeyframeTrackContentBuilder<A>.Conditional<A1, B1, C1>, a1);
  PrimitiveKeyframeTrackContent.body.getter();
}

void associated type witness table accessor for KeyframeTrackContent.Body : KeyframeTrackContent in CubicKeyframe<A>()
{
  JUMPOUT(0x23B7C9C04);
}

uint64_t instantiation function for generic protocol witness table for CubicKeyframe<A>(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for CubicKeyframe<A>);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

void associated type witness table accessor for KeyframeTrackContent.Body : KeyframeTrackContent in SpringKeyframe<A>()
{
  JUMPOUT(0x23B7C9C04);
}

uint64_t instantiation function for generic protocol witness table for SpringKeyframe<A>(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for SpringKeyframe<A>);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

void associated type witness table accessor for KeyframeTrackContent.Body : KeyframeTrackContent in LinearKeyframe<A>()
{
  JUMPOUT(0x23B7C9C04);
}

uint64_t instantiation function for generic protocol witness table for LinearKeyframe<A>(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for LinearKeyframe<A>);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

void associated type witness table accessor for KeyframeTrackContent.Body : KeyframeTrackContent in MoveKeyframe<A>()
{
  JUMPOUT(0x23B7C9C04);
}

uint64_t instantiation function for generic protocol witness table for MoveKeyframe<A>(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for MoveKeyframe<A>);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t default associated conformance accessor for KeyframeTrackContent.KeyframeTrackContent.Value: Animatable()
{
  swift_getAssociatedTypeWitness();
  return swift_getAssociatedConformanceWitness();
}

uint64_t dispatch thunk of KeyframeTrackContent.body.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t dispatch thunk of KeyframeTrackContent._resolve(into:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 48))();
}

uint64_t type metadata completion function for CubicKeyframe(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return type metadata completion function for CubicKeyframe(a1, a2, a3, (uint64_t (*)(uint64_t, _QWORD, _QWORD))type metadata accessor for _ResolvedKeyframeTrackContent.Cubic);
}

uint64_t getEnumTagSinglePayload for CubicKeyframe(uint64_t a1, unsigned int a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = *(unsigned int *)(v5 + 84);
  v7 = *(_QWORD *)(v5 + 64);
  if ((_DWORD)v6)
    v8 = *(_QWORD *)(v5 + 64);
  else
    v8 = v7 + 1;
  if (!a2)
    return 0;
  if (v6 < a2)
  {
    if (((((v8
           + ((v8
             + *(unsigned __int8 *)(v5 + 80)
             + ((v7 + *(unsigned __int8 *)(v5 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))
           + 7) & 0xFFFFFFFFFFFFFFF8)
         + 8) & 0xFFFFFFF8) != 0)
      v9 = 2;
    else
      v9 = a2 - v6 + 1;
    if (v9 >= 0x10000)
      v10 = 4;
    else
      v10 = 2;
    if (v9 < 0x100)
      v10 = 1;
    if (v9 >= 2)
      v11 = v10;
    else
      v11 = 0;
    __asm { BR              X13 }
  }
  if ((_DWORD)v6)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(a1, v6, AssociatedTypeWitness);
  else
    return 0;
}

void storeEnumTagSinglePayload for CubicKeyframe(unsigned int *a1, unsigned int a2, unsigned int a3)
{
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  size_t v11;
  unsigned int v12;
  int v13;
  int v14;
  unsigned int v15;

  v6 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = *(unsigned __int8 *)(v6 + 80);
  v10 = (v8 + v9) & ~v9;
  if (!v7)
    ++v8;
  v11 = ((v8 + ((v8 + v9 + v10) & ~v9) + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  if (v7 >= a3)
  {
    v14 = 0;
    if (a2 <= v7)
      goto LABEL_16;
  }
  else
  {
    if ((((_DWORD)v8 + (((_DWORD)v8 + (_DWORD)v9 + (_DWORD)v10) & ~(_DWORD)v9) + 7) & 0xFFFFFFF8) == 0xFFFFFFF8)
      v12 = a3 - v7 + 1;
    else
      v12 = 2;
    if (v12 >= 0x10000)
      v13 = 4;
    else
      v13 = 2;
    if (v12 < 0x100)
      v13 = 1;
    if (v12 >= 2)
      v14 = v13;
    else
      v14 = 0;
    if (a2 <= v7)
LABEL_16:
      __asm { BR              X11 }
  }
  if ((_DWORD)v11)
  {
    v15 = ~v7 + a2;
    bzero(a1, v11);
    *a1 = v15;
  }
  __asm { BR              X10 }
}

void sub_23509A528()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
}

void sub_23509A530()
{
  uint64_t v0;
  int v1;
  uint64_t v2;

  *(_DWORD *)(v0 + v2) = 0;
  if (v1)
    JUMPOUT(0x23509A538);
}

void sub_23509A558()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
}

void sub_23509A560()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
}

uint64_t sub_23509A568@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_WORD *)(v2 + v4) = 0;
  if (!(_DWORD)v3)
    JUMPOUT(0x23509A570);
  return (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 56))(v2, v3);
}

uint64_t type metadata accessor for CubicKeyframe(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for CubicKeyframe);
}

uint64_t type metadata completion function for SpringKeyframe(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return type metadata completion function for CubicKeyframe(a1, a2, a3, (uint64_t (*)(uint64_t, _QWORD, _QWORD))type metadata accessor for _ResolvedKeyframeTrackContent._Spring);
}

uint64_t getEnumTagSinglePayload for SpringKeyframe(uint64_t a1, unsigned int a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = *(unsigned int *)(v5 + 84);
  v7 = *(_QWORD *)(v5 + 64);
  v8 = v7 + 7;
  v9 = v7 + 8;
  if ((_DWORD)v6)
    v9 = v8;
  if (!a2)
    return 0;
  if (v6 < a2)
  {
    v10 = ((v9 + (((v8 & 0xFFFFFFF8) + *(unsigned __int8 *)(v5 + 80) + 24) & ~*(unsigned __int8 *)(v5 + 80))) & 0xFFFFFFF8)
        + 9;
    if (v10 < 4)
      v11 = ((a2 - v6 + 255) >> (8 * v10)) + 1;
    else
      v11 = 2;
    if (v11 >= 0x10000)
      v12 = 4;
    else
      v12 = 2;
    if (v11 < 0x100)
      v12 = 1;
    if (v11 >= 2)
      v13 = v12;
    else
      v13 = 0;
    __asm { BR              X13 }
  }
  if ((_DWORD)v6)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(a1, v6, AssociatedTypeWitness);
  else
    return 0;
}

void storeEnumTagSinglePayload for SpringKeyframe(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  size_t v12;
  unsigned int v13;
  int v14;
  int v15;
  unsigned int v16;

  v6 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = v8 + 7;
  v10 = (((v8 + 7) & 0xFFFFFFFFFFFFFFF8) + *(unsigned __int8 *)(v6 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  v11 = v8 + 8;
  if (v7)
    v11 = v9;
  v12 = ((v11 + v10) & 0xFFFFFFFFFFFFFFF8) + 9;
  if (v7 >= a3)
  {
    v15 = 0;
    if (v7 >= a2)
      goto LABEL_16;
  }
  else
  {
    if (v12 <= 3)
      v13 = ((a3 - v7 + 255) >> (8 * v12)) + 1;
    else
      v13 = 2;
    if (v13 >= 0x10000)
      v14 = 4;
    else
      v14 = 2;
    if (v13 < 0x100)
      v14 = 1;
    if (v13 >= 2)
      v15 = v14;
    else
      v15 = 0;
    if (v7 >= a2)
LABEL_16:
      __asm { BR              X11 }
  }
  if (v12 >= 4)
    v16 = ~v7 + a2;
  else
    v16 = (~(_BYTE)v7 + a2);
  bzero(a1, v12);
  if ((_DWORD)v12 == 1)
    *a1 = v16;
  else
    *(_DWORD *)a1 = v16;
  __asm { BR              X10 }
}

void sub_23509A854()
{
  uint64_t v0;
  char v1;
  uint64_t v2;

  *(_BYTE *)(v0 + v2) = v1;
}

void sub_23509A85C()
{
  uint64_t v0;
  int v1;
  uint64_t v2;

  *(_DWORD *)(v0 + v2) = 0;
  if (v1)
    JUMPOUT(0x23509A864);
}

void sub_23509A884()
{
  uint64_t v0;
  __int16 v1;
  uint64_t v2;

  *(_WORD *)(v0 + v2) = v1;
}

void sub_23509A88C()
{
  uint64_t v0;
  int v1;
  uint64_t v2;

  *(_DWORD *)(v0 + v2) = v1;
}

uint64_t sub_23509A894@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_WORD *)(v2 + v4) = 0;
  if (!(_DWORD)v3)
    JUMPOUT(0x23509A89CLL);
  return (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 56))(v2, v3);
}

uint64_t type metadata accessor for SpringKeyframe(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for SpringKeyframe);
}

uint64_t type metadata completion function for LinearKeyframe(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return type metadata completion function for CubicKeyframe(a1, a2, a3, (uint64_t (*)(uint64_t, _QWORD, _QWORD))type metadata accessor for _ResolvedKeyframeTrackContent.Linear);
}

uint64_t type metadata completion function for CubicKeyframe(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, _QWORD, _QWORD))
{
  uint64_t result;
  unint64_t v5;

  result = a4(319, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24));
  if (v5 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for LinearKeyframe(uint64_t a1, unsigned int a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  if (!a2)
    return 0;
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = *(unsigned int *)(v5 + 84);
  if (v6 < a2)
  {
    v7 = ((((*(_QWORD *)(v5 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 33;
    if (v7 < 4)
      v8 = ((a2 - v6 + 255) >> (8 * v7)) + 1;
    else
      v8 = 2;
    if (v8 >= 0x10000)
      v9 = 4;
    else
      v9 = 2;
    if (v8 < 0x100)
      v9 = 1;
    if (v8 >= 2)
      v10 = v9;
    else
      v10 = 0;
    __asm { BR              X13 }
  }
  if ((_DWORD)v6)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(a1, v6, AssociatedTypeWitness);
  else
    return 0;
}

void storeEnumTagSinglePayload for LinearKeyframe(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  unsigned int v9;
  int v10;
  int v11;
  unsigned int v12;

  v6 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = ((((*(_QWORD *)(v6 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 33;
  if (v7 >= a3)
  {
    v11 = 0;
    if (v7 >= a2)
      goto LABEL_14;
  }
  else
  {
    if (v8 <= 3)
      v9 = ((a3 - v7 + 255) >> (8 * v8)) + 1;
    else
      v9 = 2;
    if (v9 >= 0x10000)
      v10 = 4;
    else
      v10 = 2;
    if (v9 < 0x100)
      v10 = 1;
    if (v9 >= 2)
      v11 = v10;
    else
      v11 = 0;
    if (v7 >= a2)
LABEL_14:
      __asm { BR              X11 }
  }
  if (v8 >= 4)
    v12 = ~v7 + a2;
  else
    v12 = (~(_BYTE)v7 + a2);
  bzero(a1, v8);
  if ((_DWORD)v8 == 1)
    *a1 = v12;
  else
    *(_DWORD *)a1 = v12;
  __asm { BR              X10 }
}

void sub_23509ABB4()
{
  uint64_t v0;
  char v1;
  uint64_t v2;

  *(_BYTE *)(v0 + v2) = v1;
}

void sub_23509ABBC()
{
  uint64_t v0;
  int v1;
  uint64_t v2;

  *(_DWORD *)(v0 + v2) = 0;
  if (v1)
    JUMPOUT(0x23509ABC4);
}

void sub_23509ABE4()
{
  uint64_t v0;
  __int16 v1;
  uint64_t v2;

  *(_WORD *)(v0 + v2) = v1;
}

void sub_23509ABEC()
{
  uint64_t v0;
  int v1;
  uint64_t v2;

  *(_DWORD *)(v0 + v2) = v1;
}

uint64_t sub_23509ABF4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_WORD *)(v2 + v4) = 0;
  if (!(_DWORD)v3)
    JUMPOUT(0x23509ABFCLL);
  return (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 56))(v2, v3);
}

uint64_t type metadata accessor for LinearKeyframe(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for LinearKeyframe);
}

uint64_t getEnumTagSinglePayload for MoveKeyframe(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  char v8;
  int v9;
  unsigned int v10;
  int v11;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = a2 - v5;
  if (a2 <= v5)
    goto LABEL_18;
  v7 = *(_QWORD *)(v4 + 64);
  v8 = 8 * v7;
  if (v7 <= 3)
  {
    v10 = ((v6 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      v9 = *(_DWORD *)(a1 + v7);
      if (!v9)
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      v9 = *(unsigned __int16 *)(a1 + v7);
      if (!*(_WORD *)(a1 + v7))
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_18:
      if (v5)
        return (*(uint64_t (**)(void))(v4 + 48))();
      return 0;
    }
  }
  v9 = *(unsigned __int8 *)(a1 + v7);
  if (!*(_BYTE *)(a1 + v7))
    goto LABEL_18;
LABEL_11:
  v11 = (v9 - 1) << v8;
  if (v7 > 3)
    v11 = 0;
  if (!(_DWORD)v7)
    return v5 + v11 + 1;
  if (v7 > 3)
    LODWORD(v7) = 4;
  return ((uint64_t (*)(void))((char *)&loc_23509ACD0 + 4 * byte_2352C44E1[(v7 - 1)]))();
}

void storeEnumTagSinglePayload for MoveKeyframe(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  BOOL v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = a3 >= v7;
  v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      v13 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v13))
      {
        v11 = 4u;
      }
      else if (v13 >= 0x100)
      {
        v11 = 2;
      }
      else
      {
        v11 = v13 > 1;
      }
    }
    else
    {
      v11 = 1u;
    }
  }
  else
  {
    v11 = 0;
  }
  if (v7 < a2)
  {
    v12 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        v14 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v14;
          *((_BYTE *)a1 + 2) = BYTE2(v14);
        }
        else if ((_DWORD)v8 == 2)
        {
          *a1 = v14;
        }
        else
        {
          *(_BYTE *)a1 = v14;
        }
      }
    }
    else
    {
      bzero(a1, *(_QWORD *)(v6 + 64));
      *(_DWORD *)a1 = v12;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X11 }
}

uint64_t type metadata accessor for MoveKeyframe(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for MoveKeyframe);
}

uint64_t type metadata accessor for EmptyKeyframeTrackContent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for EmptyKeyframeTrackContent);
}

uint64_t getEnumTagSinglePayload for MergedKeyframeTrackContent(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  char v13;
  int v14;
  unsigned int v15;
  int v16;
  int v17;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 32) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= v5)
    v8 = *(_DWORD *)(v4 + 84);
  else
    v8 = *(_DWORD *)(v6 + 84);
  if (!a2)
    return 0;
  v9 = *(unsigned __int8 *)(v6 + 80);
  v10 = *(_QWORD *)(v4 + 64) + v9;
  v11 = a2 - v8;
  if (a2 <= v8)
    goto LABEL_23;
  v12 = (v10 & ~v9) + *(_QWORD *)(v6 + 64);
  v13 = 8 * v12;
  if (v12 <= 3)
  {
    v15 = ((v11 + ~(-1 << v13)) >> v13) + 1;
    if (HIWORD(v15))
    {
      v14 = *(_DWORD *)(a1 + v12);
      if (!v14)
        goto LABEL_23;
      goto LABEL_14;
    }
    if (v15 > 0xFF)
    {
      v14 = *(unsigned __int16 *)(a1 + v12);
      if (!*(_WORD *)(a1 + v12))
        goto LABEL_23;
      goto LABEL_14;
    }
    if (v15 < 2)
    {
LABEL_23:
      if (v8)
      {
        if (v5 >= v7)
          return (*(uint64_t (**)(void))(v4 + 48))();
        else
          return (*(uint64_t (**)(uint64_t))(v6 + 48))((v10 + a1) & ~v9);
      }
      return 0;
    }
  }
  v14 = *(unsigned __int8 *)(a1 + v12);
  if (!*(_BYTE *)(a1 + v12))
    goto LABEL_23;
LABEL_14:
  v16 = (v14 - 1) << v13;
  if (v12 > 3)
    v16 = 0;
  if (!(_DWORD)v12)
    return v8 + v16 + 1;
  if (v12 <= 3)
    v17 = (v10 & ~(_DWORD)v9) + *(_DWORD *)(v6 + 64);
  else
    v17 = 4;
  return ((uint64_t (*)(void))((char *)&loc_23509AFC4 + 4 * byte_2352C44EF[v17 - 1]))();
}

void storeEnumTagSinglePayload for MergedKeyframeTrackContent(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  int v12;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 24) - 8);
  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 32) - 8);
  if (*(_DWORD *)(v6 + 84) <= *(_DWORD *)(v5 + 84))
    v7 = *(_DWORD *)(v5 + 84);
  else
    v7 = *(_DWORD *)(v6 + 84);
  v8 = ((*(_QWORD *)(v5 + 64) + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))
     + *(_QWORD *)(v6 + 64);
  if (a3 > v7)
  {
    if (v8 <= 3)
    {
      v11 = ((a3 - v7 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v11))
      {
        v9 = 4u;
      }
      else if (v11 >= 0x100)
      {
        v9 = 2;
      }
      else
      {
        v9 = v11 > 1;
      }
    }
    else
    {
      v9 = 1u;
    }
  }
  else
  {
    v9 = 0;
  }
  if (v7 < a2)
  {
    v10 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        v12 = v10 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v12;
          *((_BYTE *)a1 + 2) = BYTE2(v12);
        }
        else if ((_DWORD)v8 == 2)
        {
          *a1 = v12;
        }
        else
        {
          *(_BYTE *)a1 = v12;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v10;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X16 }
}

void type metadata accessor for MergedKeyframeTrackContent()
{
  JUMPOUT(0x23B7C9B5CLL);
}

uint64_t type metadata accessor for ArrayKeyframeTrackContent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ArrayKeyframeTrackContent);
}

uint64_t type metadata completion function for _ResolvedKeyframeTrackContent.Linear()
{
  uint64_t result;
  unint64_t v1;

  result = swift_getAssociatedTypeWitness();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for LinearKeyframe(uint64_t *a1, uint64_t *a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  unint64_t v12;
  __int128 v13;
  __int128 v14;
  unint64_t v15;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0 || ((((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 33 > 0x18)
  {
    v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
    swift_retain();
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
    v10 = (_QWORD *)(((unint64_t)a1 + v6 + 7) & 0xFFFFFFFFFFFFF8);
    v11 = (_QWORD *)(((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFF8);
    *v10 = *v11;
    v12 = ((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFFFF8;
    v14 = *(_OWORD *)v12;
    v13 = *(_OWORD *)(v12 + 16);
    v15 = ((unint64_t)v10 + 15) & 0xFFFFFFFFFFFFFFF8;
    *(_BYTE *)(v15 + 32) = *(_BYTE *)(v12 + 32);
    *(_OWORD *)v15 = v14;
    *(_OWORD *)(v15 + 16) = v13;
  }
  return a1;
}

uint64_t destroy for LinearKeyframe(uint64_t a1)
{
  uint64_t AssociatedTypeWitness;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 8))(a1, AssociatedTypeWitness);
}

uint64_t initializeWithCopy for LinearKeyframe(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  __int128 v11;
  __int128 v12;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = v6 + a1;
  v8 = (_QWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  v7 &= 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v7 = *v8;
  v9 = (v7 + 15) & 0xFFFFFFFFFFFFFFF8;
  v10 = ((unint64_t)v8 + 15) & 0xFFFFFFFFFFFFFFF8;
  v12 = *(_OWORD *)v10;
  v11 = *(_OWORD *)(v10 + 16);
  *(_BYTE *)(v9 + 32) = *(_BYTE *)(v10 + 32);
  *(_OWORD *)v9 = v12;
  *(_OWORD *)(v9 + 16) = v11;
  return a1;
}

uint64_t assignWithCopy for LinearKeyframe(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  __int128 v11;
  __int128 v12;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 24))(a1, a2, AssociatedTypeWitness);
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = v6 + a1;
  v8 = (_QWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  v7 &= 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v7 = *v8;
  v9 = (v7 + 15) & 0xFFFFFFFFFFFFFFF8;
  v10 = ((unint64_t)v8 + 15) & 0xFFFFFFFFFFFFFFF8;
  v12 = *(_OWORD *)v10;
  v11 = *(_OWORD *)(v10 + 16);
  *(_BYTE *)(v9 + 32) = *(_BYTE *)(v10 + 32);
  *(_OWORD *)v9 = v12;
  *(_OWORD *)(v9 + 16) = v11;
  return a1;
}

uint64_t initializeWithTake for LinearKeyframe(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  __int128 v11;
  __int128 v12;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 32))(a1, a2, AssociatedTypeWitness);
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = v6 + a1;
  v8 = (_QWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  v7 &= 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v7 = *v8;
  v9 = (v7 + 15) & 0xFFFFFFFFFFFFFFF8;
  v10 = ((unint64_t)v8 + 15) & 0xFFFFFFFFFFFFFFF8;
  v12 = *(_OWORD *)v10;
  v11 = *(_OWORD *)(v10 + 16);
  *(_BYTE *)(v9 + 32) = *(_BYTE *)(v10 + 32);
  *(_OWORD *)v9 = v12;
  *(_OWORD *)(v9 + 16) = v11;
  return a1;
}

uint64_t assignWithTake for LinearKeyframe(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  __int128 v11;
  __int128 v12;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 40))(a1, a2, AssociatedTypeWitness);
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = v6 + a1;
  v8 = (_QWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  v7 &= 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v7 = *v8;
  v9 = (v7 + 15) & 0xFFFFFFFFFFFFFFF8;
  v10 = ((unint64_t)v8 + 15) & 0xFFFFFFFFFFFFFFF8;
  v12 = *(_OWORD *)v10;
  v11 = *(_OWORD *)(v10 + 16);
  *(_BYTE *)(v9 + 32) = *(_BYTE *)(v10 + 32);
  *(_OWORD *)v9 = v12;
  *(_OWORD *)(v9 + 16) = v11;
  return a1;
}

uint64_t getEnumTagSinglePayload for _ResolvedKeyframeTrackContent.Linear(uint64_t a1, unsigned int a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  if (!a2)
    return 0;
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = *(unsigned int *)(v5 + 84);
  if (v6 < a2)
  {
    v7 = ((((*(_QWORD *)(v5 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 33;
    if (v7 < 4)
      v8 = ((a2 - v6 + 255) >> (8 * v7)) + 1;
    else
      v8 = 2;
    if (v8 >= 0x10000)
      v9 = 4;
    else
      v9 = 2;
    if (v8 < 0x100)
      v9 = 1;
    if (v8 >= 2)
      v10 = v9;
    else
      v10 = 0;
    __asm { BR              X13 }
  }
  if ((_DWORD)v6)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(a1, v6, AssociatedTypeWitness);
  else
    return 0;
}

void storeEnumTagSinglePayload for _ResolvedKeyframeTrackContent.Linear(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  unsigned int v9;
  int v10;
  int v11;
  unsigned int v12;

  v6 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = ((((*(_QWORD *)(v6 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 33;
  if (v7 >= a3)
  {
    v11 = 0;
    if (v7 >= a2)
      goto LABEL_14;
  }
  else
  {
    if (v8 <= 3)
      v9 = ((a3 - v7 + 255) >> (8 * v8)) + 1;
    else
      v9 = 2;
    if (v9 >= 0x10000)
      v10 = 4;
    else
      v10 = 2;
    if (v9 < 0x100)
      v10 = 1;
    if (v9 >= 2)
      v11 = v10;
    else
      v11 = 0;
    if (v7 >= a2)
LABEL_14:
      __asm { BR              X11 }
  }
  if (v8 >= 4)
    v12 = ~v7 + a2;
  else
    v12 = (~(_BYTE)v7 + a2);
  bzero(a1, v8);
  if ((_DWORD)v8 == 1)
    *a1 = v12;
  else
    *(_DWORD *)a1 = v12;
  __asm { BR              X10 }
}

void sub_23509B8E8()
{
  uint64_t v0;
  char v1;
  uint64_t v2;

  *(_BYTE *)(v0 + v2) = v1;
}

void sub_23509B8F0()
{
  uint64_t v0;
  int v1;
  uint64_t v2;

  *(_DWORD *)(v0 + v2) = 0;
  if (v1)
    JUMPOUT(0x23509B8F8);
}

void sub_23509B918()
{
  uint64_t v0;
  __int16 v1;
  uint64_t v2;

  *(_WORD *)(v0 + v2) = v1;
}

void sub_23509B920()
{
  uint64_t v0;
  int v1;
  uint64_t v2;

  *(_DWORD *)(v0 + v2) = v1;
}

uint64_t sub_23509B928@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_WORD *)(v2 + v4) = 0;
  if (!(_DWORD)v3)
    JUMPOUT(0x23509B930);
  return (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 56))(v2, v3);
}

uint64_t type metadata completion function for _ResolvedKeyframeTrackContent._Spring()
{
  uint64_t AssociatedTypeWitness;
  unint64_t v1;
  unint64_t v2;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  if (v1 <= 0x3F)
  {
    AssociatedTypeWitness = type metadata accessor for Optional();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return AssociatedTypeWitness;
}

uint64_t *initializeBufferWithCopyOfBuffer for SpringKeyframe(uint64_t *a1, uint64_t *a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  size_t v9;
  size_t v10;
  int v11;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t *, uint64_t *, uint64_t);
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = *(_DWORD *)(v5 + 80);
  v8 = v7;
  if (*(_DWORD *)(v5 + 84))
    v9 = *(_QWORD *)(v5 + 64);
  else
    v9 = v6 + 1;
  v10 = v9 + 7;
  v11 = v7 & 0x100000;
  if (v8 > 7
    || v11 != 0
    || ((v9 + 7 + ((v8 + ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 24) & ~v8)) & 0xFFFFFFFFFFFFFFF8) + 9 > 0x18)
  {
    v14 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v14 + ((v8 & 0xF8 ^ 0x1F8) & (v8 + 16)));
    swift_retain();
  }
  else
  {
    v15 = AssociatedTypeWitness;
    v16 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v5 + 16);
    v16(a1, a2, AssociatedTypeWitness);
    v17 = ((unint64_t)a1 + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
    v18 = ((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
    v19 = *(_QWORD *)(v18 + 16);
    *(_OWORD *)v17 = *(_OWORD *)v18;
    *(_QWORD *)(v17 + 16) = v19;
    v20 = (_QWORD *)((v17 + v8 + 24) & ~v8);
    v21 = (_QWORD *)((v18 + v8 + 24) & ~v8);
    if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v5 + 48))(v21, 1, v15))
    {
      memcpy(v20, v21, v9);
    }
    else
    {
      v16(v20, v21, v15);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v5 + 56))(v20, 0, 1, v15);
    }
    v22 = ((unint64_t)v21 + v10) & 0xFFFFFFFFFFFFFFF8;
    v23 = *(_QWORD *)v22;
    v24 = ((unint64_t)v20 + v10) & 0xFFFFFFFFFFFFFFF8;
    *(_BYTE *)(v24 + 8) = *(_BYTE *)(v22 + 8);
    *(_QWORD *)v24 = v23;
  }
  return a1;
}

uint64_t destroy for SpringKeyframe(unint64_t a1)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v3;
  unint64_t v4;
  uint64_t result;
  uint64_t (*v6)(unint64_t, uint64_t);

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v3 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = *(uint64_t (**)(unint64_t, uint64_t))(v3 + 8);
  v6(a1, AssociatedTypeWitness);
  v4 = (((a1 + *(_QWORD *)(v3 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + *(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v3 + 48))(v4, 1, AssociatedTypeWitness);
  if (!(_DWORD)result)
    return v6(v4, AssociatedTypeWitness);
  return result;
}

uint64_t initializeWithCopy for SpringKeyframe(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t, uint64_t);
  size_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  const void *v13;
  int v14;
  size_t v15;
  size_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
  v6(a1, a2, AssociatedTypeWitness);
  v7 = *(_QWORD *)(v5 + 64);
  v8 = (v7 + 7 + a1) & 0xFFFFFFFFFFFFFFF8;
  v9 = (v7 + 7 + a2) & 0xFFFFFFFFFFFFFFF8;
  v10 = *(_QWORD *)(v9 + 16);
  *(_OWORD *)v8 = *(_OWORD *)v9;
  *(_QWORD *)(v8 + 16) = v10;
  v11 = *(unsigned __int8 *)(v5 + 80);
  v12 = (void *)((v11 + 24 + v8) & ~v11);
  v13 = (const void *)((v11 + 24 + v9) & ~v11);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v5 + 48))(v13, 1, AssociatedTypeWitness))
  {
    v14 = *(_DWORD *)(v5 + 84);
    if (v14)
      v15 = v7;
    else
      v15 = v7 + 1;
    memcpy(v12, v13, v15);
  }
  else
  {
    v6((uint64_t)v12, (uint64_t)v13, AssociatedTypeWitness);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v5 + 56))(v12, 0, 1, AssociatedTypeWitness);
    v14 = *(_DWORD *)(v5 + 84);
  }
  if (v14)
    v16 = v7;
  else
    v16 = v7 + 1;
  v17 = (uint64_t)v12 + v16 + 7;
  v18 = ((unint64_t)v13 + v16 + 7) & 0xFFFFFFFFFFFFFFF8;
  v19 = *(_QWORD *)v18;
  v17 &= 0xFFFFFFFFFFFFFFF8;
  *(_BYTE *)(v17 + 8) = *(_BYTE *)(v18 + 8);
  *(_QWORD *)v17 = v19;
  return a1;
}

uint64_t assignWithCopy for SpringKeyframe(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t, uint64_t);
  size_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  void *v11;
  void *v12;
  uint64_t (*v13)(void *, uint64_t, uint64_t);
  int v14;
  int v15;
  size_t v16;
  size_t v17;
  uint64_t v18;
  unint64_t v19;
  char v20;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 24);
  v6(a1, a2, AssociatedTypeWitness);
  v7 = *(_QWORD *)(v5 + 64);
  v8 = (_QWORD *)((v7 + 7 + a1) & 0xFFFFFFFFFFFFFFF8);
  v9 = (_QWORD *)((v7 + 7 + a2) & 0xFFFFFFFFFFFFFFF8);
  *v8 = *v9;
  v8[1] = v9[1];
  v8[2] = v9[2];
  v10 = *(unsigned __int8 *)(v5 + 80);
  v11 = (void *)(((unint64_t)v8 + v10 + 24) & ~v10);
  v12 = (void *)(((unint64_t)v9 + v10 + 24) & ~v10);
  v13 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v5 + 48);
  v14 = v13(v11, 1, AssociatedTypeWitness);
  v15 = v13(v12, 1, AssociatedTypeWitness);
  if (v14)
  {
    if (!v15)
    {
      (*(void (**)(void *, void *, uint64_t))(v5 + 16))(v11, v12, AssociatedTypeWitness);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v5 + 56))(v11, 0, 1, AssociatedTypeWitness);
      goto LABEL_10;
    }
  }
  else
  {
    if (!v15)
    {
      v6((uint64_t)v11, (uint64_t)v12, AssociatedTypeWitness);
      goto LABEL_10;
    }
    (*(void (**)(void *, uint64_t))(v5 + 8))(v11, AssociatedTypeWitness);
  }
  if (*(_DWORD *)(v5 + 84))
    v16 = v7;
  else
    v16 = v7 + 1;
  memcpy(v11, v12, v16);
LABEL_10:
  if (*(_DWORD *)(v5 + 84))
    v17 = v7;
  else
    v17 = v7 + 1;
  v18 = (uint64_t)v11 + v17 + 7;
  v19 = ((unint64_t)v12 + v17 + 7) & 0xFFFFFFFFFFFFFFF8;
  v20 = *(_BYTE *)(v19 + 8);
  v18 &= 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v18 = *(_QWORD *)v19;
  *(_BYTE *)(v18 + 8) = v20;
  return a1;
}

uint64_t initializeWithTake for SpringKeyframe(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t, uint64_t);
  size_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  const void *v13;
  int v14;
  size_t v15;
  size_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 32);
  v6(a1, a2, AssociatedTypeWitness);
  v7 = *(_QWORD *)(v5 + 64);
  v8 = (v7 + 7 + a1) & 0xFFFFFFFFFFFFFFF8;
  v9 = (v7 + 7 + a2) & 0xFFFFFFFFFFFFFFF8;
  v10 = *(_QWORD *)(v9 + 16);
  *(_OWORD *)v8 = *(_OWORD *)v9;
  *(_QWORD *)(v8 + 16) = v10;
  v11 = *(unsigned __int8 *)(v5 + 80);
  v12 = (void *)((v11 + 24 + v8) & ~v11);
  v13 = (const void *)((v11 + 24 + v9) & ~v11);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v5 + 48))(v13, 1, AssociatedTypeWitness))
  {
    v14 = *(_DWORD *)(v5 + 84);
    if (v14)
      v15 = v7;
    else
      v15 = v7 + 1;
    memcpy(v12, v13, v15);
  }
  else
  {
    v6((uint64_t)v12, (uint64_t)v13, AssociatedTypeWitness);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v5 + 56))(v12, 0, 1, AssociatedTypeWitness);
    v14 = *(_DWORD *)(v5 + 84);
  }
  if (v14)
    v16 = v7;
  else
    v16 = v7 + 1;
  v17 = (uint64_t)v12 + v16 + 7;
  v18 = ((unint64_t)v13 + v16 + 7) & 0xFFFFFFFFFFFFFFF8;
  v19 = *(_QWORD *)v18;
  v17 &= 0xFFFFFFFFFFFFFFF8;
  *(_BYTE *)(v17 + 8) = *(_BYTE *)(v18 + 8);
  *(_QWORD *)v17 = v19;
  return a1;
}

uint64_t assignWithTake for SpringKeyframe(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t, uint64_t);
  size_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  void *v11;
  void *v12;
  uint64_t (*v13)(void *, uint64_t, uint64_t);
  int v14;
  int v15;
  size_t v16;
  size_t v17;
  uint64_t v18;
  unint64_t v19;
  char v20;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 40);
  v6(a1, a2, AssociatedTypeWitness);
  v7 = *(_QWORD *)(v5 + 64);
  v8 = (_QWORD *)((v7 + 7 + a1) & 0xFFFFFFFFFFFFFFF8);
  v9 = (_QWORD *)((v7 + 7 + a2) & 0xFFFFFFFFFFFFFFF8);
  *v8 = *v9;
  v8[1] = v9[1];
  v8[2] = v9[2];
  v10 = *(unsigned __int8 *)(v5 + 80);
  v11 = (void *)(((unint64_t)v8 + v10 + 24) & ~v10);
  v12 = (void *)(((unint64_t)v9 + v10 + 24) & ~v10);
  v13 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v5 + 48);
  v14 = v13(v11, 1, AssociatedTypeWitness);
  v15 = v13(v12, 1, AssociatedTypeWitness);
  if (v14)
  {
    if (!v15)
    {
      (*(void (**)(void *, void *, uint64_t))(v5 + 32))(v11, v12, AssociatedTypeWitness);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v5 + 56))(v11, 0, 1, AssociatedTypeWitness);
      goto LABEL_10;
    }
  }
  else
  {
    if (!v15)
    {
      v6((uint64_t)v11, (uint64_t)v12, AssociatedTypeWitness);
      goto LABEL_10;
    }
    (*(void (**)(void *, uint64_t))(v5 + 8))(v11, AssociatedTypeWitness);
  }
  if (*(_DWORD *)(v5 + 84))
    v16 = v7;
  else
    v16 = v7 + 1;
  memcpy(v11, v12, v16);
LABEL_10:
  if (*(_DWORD *)(v5 + 84))
    v17 = v7;
  else
    v17 = v7 + 1;
  v18 = (uint64_t)v11 + v17 + 7;
  v19 = ((unint64_t)v12 + v17 + 7) & 0xFFFFFFFFFFFFFFF8;
  v20 = *(_BYTE *)(v19 + 8);
  v18 &= 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v18 = *(_QWORD *)v19;
  *(_BYTE *)(v18 + 8) = v20;
  return a1;
}

uint64_t getEnumTagSinglePayload for _ResolvedKeyframeTrackContent._Spring(uint64_t a1, unsigned int a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = *(unsigned int *)(v5 + 84);
  v7 = *(_QWORD *)(v5 + 64);
  v8 = v7 + 7;
  v9 = v7 + 8;
  if ((_DWORD)v6)
    v9 = v8;
  if (!a2)
    return 0;
  if (v6 < a2)
  {
    v10 = ((v9 + (((v8 & 0xFFFFFFF8) + *(unsigned __int8 *)(v5 + 80) + 24) & ~*(unsigned __int8 *)(v5 + 80))) & 0xFFFFFFF8)
        + 9;
    if (v10 < 4)
      v11 = ((a2 - v6 + 255) >> (8 * v10)) + 1;
    else
      v11 = 2;
    if (v11 >= 0x10000)
      v12 = 4;
    else
      v12 = 2;
    if (v11 < 0x100)
      v12 = 1;
    if (v11 >= 2)
      v13 = v12;
    else
      v13 = 0;
    __asm { BR              X13 }
  }
  if ((_DWORD)v6)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(a1, v6, AssociatedTypeWitness);
  else
    return 0;
}

void storeEnumTagSinglePayload for _ResolvedKeyframeTrackContent._Spring(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  size_t v12;
  unsigned int v13;
  int v14;
  int v15;
  unsigned int v16;

  v6 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = v8 + 7;
  v10 = (((v8 + 7) & 0xFFFFFFFFFFFFFFF8) + *(unsigned __int8 *)(v6 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  v11 = v8 + 8;
  if (v7)
    v11 = v9;
  v12 = ((v11 + v10) & 0xFFFFFFFFFFFFFFF8) + 9;
  if (v7 >= a3)
  {
    v15 = 0;
    if (v7 >= a2)
      goto LABEL_16;
  }
  else
  {
    if (v12 <= 3)
      v13 = ((a3 - v7 + 255) >> (8 * v12)) + 1;
    else
      v13 = 2;
    if (v13 >= 0x10000)
      v14 = 4;
    else
      v14 = 2;
    if (v13 < 0x100)
      v14 = 1;
    if (v13 >= 2)
      v15 = v14;
    else
      v15 = 0;
    if (v7 >= a2)
LABEL_16:
      __asm { BR              X11 }
  }
  if (v12 >= 4)
    v16 = ~v7 + a2;
  else
    v16 = (~(_BYTE)v7 + a2);
  bzero(a1, v12);
  if ((_DWORD)v12 == 1)
    *a1 = v16;
  else
    *(_DWORD *)a1 = v16;
  __asm { BR              X10 }
}

void sub_23509C4B8()
{
  uint64_t v0;
  char v1;
  uint64_t v2;

  *(_BYTE *)(v0 + v2) = v1;
}

void sub_23509C4C0()
{
  uint64_t v0;
  int v1;
  uint64_t v2;

  *(_DWORD *)(v0 + v2) = 0;
  if (v1)
    JUMPOUT(0x23509C4C8);
}

void sub_23509C4E8()
{
  uint64_t v0;
  __int16 v1;
  uint64_t v2;

  *(_WORD *)(v0 + v2) = v1;
}

void sub_23509C4F0()
{
  uint64_t v0;
  int v1;
  uint64_t v2;

  *(_DWORD *)(v0 + v2) = v1;
}

uint64_t sub_23509C4F8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_WORD *)(v2 + v4) = 0;
  if (!(_DWORD)v3)
    JUMPOUT(0x23509C500);
  return (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 56))(v2, v3);
}

uint64_t type metadata completion function for _ResolvedKeyframeTrackContent.Cubic()
{
  uint64_t AssociatedTypeWitness;
  unint64_t v1;
  unint64_t v2;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  if (v1 <= 0x3F)
  {
    AssociatedTypeWitness = type metadata accessor for Optional();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return AssociatedTypeWitness;
}

uint64_t *initializeBufferWithCopyOfBuffer for CubicKeyframe(uint64_t *a1, uint64_t *a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  size_t v10;
  unint64_t v11;
  int v12;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(uint64_t *, uint64_t *, uint64_t);
  unint64_t v20;
  void *v21;
  void *v22;
  unsigned int (*v23)(const void *, uint64_t, uint64_t);
  void *v24;
  unint64_t v26;
  uint64_t *v27;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = *(_DWORD *)(v5 + 80);
  v8 = v7;
  v9 = v6 + v7;
  if (*(_DWORD *)(v5 + 84))
    v10 = *(_QWORD *)(v5 + 64);
  else
    v10 = v6 + 1;
  v11 = ((v10
        + 7
        + ((v10 + v7 + ((v6 + v7) & ~(unint64_t)v7)) & ~(unint64_t)v7)) & 0xFFFFFFFFFFFFFFF8)
      + 8;
  v12 = v7 & 0x100000;
  if (v8 > 7 || v12 != 0 || v11 > 0x18)
  {
    v15 = *a2;
    *a1 = *a2;
    v16 = (uint64_t *)(v15 + ((v8 & 0xF8 ^ 0x1F8) & (v8 + 16)));
    swift_retain();
  }
  else
  {
    v17 = AssociatedTypeWitness;
    v18 = ~v8;
    v19 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v5 + 16);
    v19(a1, a2, AssociatedTypeWitness);
    v27 = a1;
    v20 = (unint64_t)a1 + v9;
    v21 = (void *)(((unint64_t)a1 + v9) & ~v8);
    v26 = (unint64_t)a2 + v9;
    v22 = (const void *)(((unint64_t)a2 + v9) & ~v8);
    v23 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v5 + 48);
    if (v23(v22, 1, v17))
    {
      memcpy(v21, v22, v10);
    }
    else
    {
      v19((uint64_t *)v21, (uint64_t *)v22, v17);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v5 + 56))(v21, 0, 1, v17);
    }
    v24 = (const void *)(((v26 | v8) + v10) & v18);
    if (v23(v24, 1, v17))
    {
      memcpy((void *)(((v20 | v8) + v10) & v18), v24, v10);
    }
    else
    {
      v19((uint64_t *)(((v20 | v8) + v10) & v18), (uint64_t *)v24, v17);
      (*(void (**)(unint64_t, _QWORD, uint64_t, uint64_t))(v5 + 56))(((v20 | v8) + v10) & v18, 0, 1, v17);
    }
    v16 = v27;
    *(_QWORD *)((v10 + 7 + (((v20 | v8) + v10) & v18)) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v24
                                                                                          + v10
                                                                                          + 7) & 0xFFFFFFFFFFFFF8);
  }
  return v16;
}

uint64_t destroy for CubicKeyframe(uint64_t a1)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int (*v8)(uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  void (*v12)(uint64_t, uint64_t);

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v3 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v12 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
  v12(a1, AssociatedTypeWitness);
  v4 = *(unsigned __int8 *)(v3 + 80);
  v5 = *(_QWORD *)(v3 + 64) + v4;
  v6 = ~v4;
  v7 = (v5 + a1) & ~v4;
  v8 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48);
  if (!v8(v7, 1, AssociatedTypeWitness))
    v12(v7, AssociatedTypeWitness);
  v9 = v5 + v7;
  if (!*(_DWORD *)(v3 + 84))
    ++v9;
  v10 = v9 & v6;
  result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v8)(v9 & v6, 1, AssociatedTypeWitness);
  if (!(_DWORD)result)
    return ((uint64_t (*)(uint64_t, uint64_t))v12)(v10, AssociatedTypeWitness);
  return result;
}

uint64_t initializeWithCopy for CubicKeyframe(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t, uint64_t);
  size_t v7;
  uint64_t v8;
  size_t v9;
  uint64_t v10;
  size_t v11;
  int v12;
  size_t v13;
  size_t v14;
  void *v15;
  const void *v16;
  void (*v18)(void *, const void *, uint64_t);
  unsigned int (*v19)(size_t, uint64_t, uint64_t);
  uint64_t v20;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
  v6(a1, a2, AssociatedTypeWitness);
  v7 = *(_QWORD *)(v5 + 64);
  v8 = *(unsigned __int8 *)(v5 + 80);
  v20 = a1;
  v9 = v7 + v8 + a1;
  v10 = ~v8;
  v11 = v7 + v8 + a2;
  v19 = *(unsigned int (**)(size_t, uint64_t, uint64_t))(v5 + 48);
  v18 = (void (*)(void *, const void *, uint64_t))v6;
  if (v19(v11 & ~v8, 1, AssociatedTypeWitness))
  {
    v12 = *(_DWORD *)(v5 + 84);
    if (v12)
      v13 = v7;
    else
      v13 = v7 + 1;
    memcpy((void *)(v9 & ~v8), (const void *)(v11 & ~v8), v13);
  }
  else
  {
    v6(v9 & ~v8, v11 & ~v8, AssociatedTypeWitness);
    (*(void (**)(size_t, _QWORD, uint64_t, uint64_t))(v5 + 56))(v9 & ~v8, 0, 1, AssociatedTypeWitness);
    v12 = *(_DWORD *)(v5 + 84);
  }
  if (v12)
    v14 = v7;
  else
    v14 = v7 + 1;
  v15 = (void *)(((v9 | v8) + v14) & v10);
  v16 = (const void *)(((v11 | v8) + v14) & v10);
  if (v19((size_t)v16, 1, AssociatedTypeWitness))
  {
    memcpy(v15, v16, v14);
  }
  else
  {
    v18(v15, v16, AssociatedTypeWitness);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v5 + 56))(v15, 0, 1, AssociatedTypeWitness);
  }
  *(_QWORD *)(((unint64_t)v15 + v14 + 7) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v16 + v14 + 7) & 0xFFFFFFFFFFFFF8);
  return v20;
}

uint64_t assignWithCopy for CubicKeyframe(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  size_t v6;
  uint64_t v7;
  size_t v8;
  size_t v9;
  uint64_t (*v10)(size_t, uint64_t, uint64_t);
  int v11;
  int v12;
  size_t v13;
  size_t v14;
  void *v15;
  const void *v16;
  int v17;
  int v18;
  void (*v20)(uint64_t, uint64_t, uint64_t);
  uint64_t v21;
  uint64_t v22;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v20 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 24);
  v20(a1, a2, AssociatedTypeWitness);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = *(unsigned __int8 *)(v5 + 80);
  v22 = a1;
  v8 = v6 + v7 + a1;
  v21 = ~v7;
  v9 = v6 + v7 + a2;
  v10 = *(uint64_t (**)(size_t, uint64_t, uint64_t))(v5 + 48);
  v11 = v10(v8 & ~v7, 1, AssociatedTypeWitness);
  v12 = v10(v9 & ~v7, 1, AssociatedTypeWitness);
  if (v11)
  {
    if (!v12)
    {
      (*(void (**)(size_t, size_t, uint64_t))(v5 + 16))(v8 & ~v7, v9 & ~v7, AssociatedTypeWitness);
      (*(void (**)(size_t, _QWORD, uint64_t, uint64_t))(v5 + 56))(v8 & ~v7, 0, 1, AssociatedTypeWitness);
      goto LABEL_10;
    }
  }
  else
  {
    if (!v12)
    {
      v20(v8 & ~v7, v9 & ~v7, AssociatedTypeWitness);
      goto LABEL_10;
    }
    (*(void (**)(size_t, uint64_t))(v5 + 8))(v8 & ~v7, AssociatedTypeWitness);
  }
  if (*(_DWORD *)(v5 + 84))
    v13 = v6;
  else
    v13 = v6 + 1;
  memcpy((void *)(v8 & ~v7), (const void *)(v9 & ~v7), v13);
LABEL_10:
  if (*(_DWORD *)(v5 + 84))
    v14 = v6;
  else
    v14 = v6 + 1;
  v15 = (void *)(((v8 | v7) + v14) & v21);
  v16 = (const void *)(((v9 | v7) + v14) & v21);
  v17 = v10((size_t)v15, 1, AssociatedTypeWitness);
  v18 = v10((size_t)v16, 1, AssociatedTypeWitness);
  if (!v17)
  {
    if (!v18)
    {
      v20((uint64_t)v15, (uint64_t)v16, AssociatedTypeWitness);
      goto LABEL_19;
    }
    (*(void (**)(void *, uint64_t))(v5 + 8))(v15, AssociatedTypeWitness);
    goto LABEL_18;
  }
  if (v18)
  {
LABEL_18:
    memcpy(v15, v16, v14);
    goto LABEL_19;
  }
  (*(void (**)(void *, const void *, uint64_t))(v5 + 16))(v15, v16, AssociatedTypeWitness);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v5 + 56))(v15, 0, 1, AssociatedTypeWitness);
LABEL_19:
  *(_QWORD *)(((unint64_t)v15 + v14 + 7) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v16 + v14 + 7) & 0xFFFFFFFFFFFFF8);
  return v22;
}

uint64_t initializeWithTake for CubicKeyframe(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t, uint64_t);
  size_t v7;
  uint64_t v8;
  size_t v9;
  uint64_t v10;
  size_t v11;
  int v12;
  size_t v13;
  size_t v14;
  void *v15;
  const void *v16;
  void (*v18)(void *, const void *, uint64_t);
  unsigned int (*v19)(size_t, uint64_t, uint64_t);
  uint64_t v20;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 32);
  v6(a1, a2, AssociatedTypeWitness);
  v7 = *(_QWORD *)(v5 + 64);
  v8 = *(unsigned __int8 *)(v5 + 80);
  v20 = a1;
  v9 = v7 + v8 + a1;
  v10 = ~v8;
  v11 = v7 + v8 + a2;
  v19 = *(unsigned int (**)(size_t, uint64_t, uint64_t))(v5 + 48);
  v18 = (void (*)(void *, const void *, uint64_t))v6;
  if (v19(v11 & ~v8, 1, AssociatedTypeWitness))
  {
    v12 = *(_DWORD *)(v5 + 84);
    if (v12)
      v13 = v7;
    else
      v13 = v7 + 1;
    memcpy((void *)(v9 & ~v8), (const void *)(v11 & ~v8), v13);
  }
  else
  {
    v6(v9 & ~v8, v11 & ~v8, AssociatedTypeWitness);
    (*(void (**)(size_t, _QWORD, uint64_t, uint64_t))(v5 + 56))(v9 & ~v8, 0, 1, AssociatedTypeWitness);
    v12 = *(_DWORD *)(v5 + 84);
  }
  if (v12)
    v14 = v7;
  else
    v14 = v7 + 1;
  v15 = (void *)(((v9 | v8) + v14) & v10);
  v16 = (const void *)(((v11 | v8) + v14) & v10);
  if (v19((size_t)v16, 1, AssociatedTypeWitness))
  {
    memcpy(v15, v16, v14);
  }
  else
  {
    v18(v15, v16, AssociatedTypeWitness);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v5 + 56))(v15, 0, 1, AssociatedTypeWitness);
  }
  *(_QWORD *)(((unint64_t)v15 + v14 + 7) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v16 + v14 + 7) & 0xFFFFFFFFFFFFF8);
  return v20;
}

uint64_t assignWithTake for CubicKeyframe(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  size_t v6;
  uint64_t v7;
  size_t v8;
  size_t v9;
  uint64_t (*v10)(size_t, uint64_t, uint64_t);
  int v11;
  int v12;
  size_t v13;
  size_t v14;
  void *v15;
  const void *v16;
  int v17;
  int v18;
  void (*v20)(uint64_t, uint64_t, uint64_t);
  uint64_t v21;
  uint64_t v22;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v20 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 40);
  v20(a1, a2, AssociatedTypeWitness);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = *(unsigned __int8 *)(v5 + 80);
  v22 = a1;
  v8 = v6 + v7 + a1;
  v21 = ~v7;
  v9 = v6 + v7 + a2;
  v10 = *(uint64_t (**)(size_t, uint64_t, uint64_t))(v5 + 48);
  v11 = v10(v8 & ~v7, 1, AssociatedTypeWitness);
  v12 = v10(v9 & ~v7, 1, AssociatedTypeWitness);
  if (v11)
  {
    if (!v12)
    {
      (*(void (**)(size_t, size_t, uint64_t))(v5 + 32))(v8 & ~v7, v9 & ~v7, AssociatedTypeWitness);
      (*(void (**)(size_t, _QWORD, uint64_t, uint64_t))(v5 + 56))(v8 & ~v7, 0, 1, AssociatedTypeWitness);
      goto LABEL_10;
    }
  }
  else
  {
    if (!v12)
    {
      v20(v8 & ~v7, v9 & ~v7, AssociatedTypeWitness);
      goto LABEL_10;
    }
    (*(void (**)(size_t, uint64_t))(v5 + 8))(v8 & ~v7, AssociatedTypeWitness);
  }
  if (*(_DWORD *)(v5 + 84))
    v13 = v6;
  else
    v13 = v6 + 1;
  memcpy((void *)(v8 & ~v7), (const void *)(v9 & ~v7), v13);
LABEL_10:
  if (*(_DWORD *)(v5 + 84))
    v14 = v6;
  else
    v14 = v6 + 1;
  v15 = (void *)(((v8 | v7) + v14) & v21);
  v16 = (const void *)(((v9 | v7) + v14) & v21);
  v17 = v10((size_t)v15, 1, AssociatedTypeWitness);
  v18 = v10((size_t)v16, 1, AssociatedTypeWitness);
  if (!v17)
  {
    if (!v18)
    {
      v20((uint64_t)v15, (uint64_t)v16, AssociatedTypeWitness);
      goto LABEL_19;
    }
    (*(void (**)(void *, uint64_t))(v5 + 8))(v15, AssociatedTypeWitness);
    goto LABEL_18;
  }
  if (v18)
  {
LABEL_18:
    memcpy(v15, v16, v14);
    goto LABEL_19;
  }
  (*(void (**)(void *, const void *, uint64_t))(v5 + 32))(v15, v16, AssociatedTypeWitness);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v5 + 56))(v15, 0, 1, AssociatedTypeWitness);
LABEL_19:
  *(_QWORD *)(((unint64_t)v15 + v14 + 7) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v16 + v14 + 7) & 0xFFFFFFFFFFFFF8);
  return v22;
}

uint64_t getEnumTagSinglePayload for _ResolvedKeyframeTrackContent.Cubic(uint64_t a1, unsigned int a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = *(unsigned int *)(v5 + 84);
  v7 = *(_QWORD *)(v5 + 64);
  if ((_DWORD)v6)
    v8 = *(_QWORD *)(v5 + 64);
  else
    v8 = v7 + 1;
  if (!a2)
    return 0;
  if (v6 < a2)
  {
    if (((((v8
           + ((v8
             + *(unsigned __int8 *)(v5 + 80)
             + ((v7 + *(unsigned __int8 *)(v5 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))
           + 7) & 0xFFFFFFFFFFFFFFF8)
         + 8) & 0xFFFFFFF8) != 0)
      v9 = 2;
    else
      v9 = a2 - v6 + 1;
    if (v9 >= 0x10000)
      v10 = 4;
    else
      v10 = 2;
    if (v9 < 0x100)
      v10 = 1;
    if (v9 >= 2)
      v11 = v10;
    else
      v11 = 0;
    __asm { BR              X13 }
  }
  if ((_DWORD)v6)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(a1, v6, AssociatedTypeWitness);
  else
    return 0;
}

void storeEnumTagSinglePayload for _ResolvedKeyframeTrackContent.Cubic(unsigned int *a1, unsigned int a2, unsigned int a3)
{
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  size_t v11;
  unsigned int v12;
  int v13;
  int v14;
  unsigned int v15;

  v6 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = *(unsigned __int8 *)(v6 + 80);
  v10 = (v8 + v9) & ~v9;
  if (!v7)
    ++v8;
  v11 = ((v8 + ((v8 + v9 + v10) & ~v9) + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  if (v7 >= a3)
  {
    v14 = 0;
    if (a2 <= v7)
      goto LABEL_16;
  }
  else
  {
    if ((((_DWORD)v8 + (((_DWORD)v8 + (_DWORD)v9 + (_DWORD)v10) & ~(_DWORD)v9) + 7) & 0xFFFFFFF8) == 0xFFFFFFF8)
      v12 = a3 - v7 + 1;
    else
      v12 = 2;
    if (v12 >= 0x10000)
      v13 = 4;
    else
      v13 = 2;
    if (v12 < 0x100)
      v13 = 1;
    if (v12 >= 2)
      v14 = v13;
    else
      v14 = 0;
    if (a2 <= v7)
LABEL_16:
      __asm { BR              X11 }
  }
  if ((_DWORD)v11)
  {
    v15 = ~v7 + a2;
    bzero(a1, v11);
    *a1 = v15;
  }
  __asm { BR              X10 }
}

void sub_23509D2BC()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
}

void sub_23509D2C4()
{
  uint64_t v0;
  int v1;
  uint64_t v2;

  *(_DWORD *)(v0 + v2) = 0;
  if (v1)
    JUMPOUT(0x23509D2CCLL);
}

void sub_23509D2EC()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
}

void sub_23509D2F4()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
}

uint64_t sub_23509D2FC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_WORD *)(v2 + v4) = 0;
  if (!(_DWORD)v3)
    JUMPOUT(0x23509D304);
  return (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 56))(v2, v3);
}

uint64_t type metadata completion function for _ResolvedKeyframeTrackContent.Segment(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v2 = *(_QWORD *)(a1 + 16);
  v1 = *(_QWORD *)(a1 + 24);
  result = swift_getAssociatedTypeWitness();
  if (v5 <= 0x3F)
  {
    result = type metadata accessor for _ResolvedKeyframeTrackContent.Cubic(319, v2, v1, v4);
    if (v7 <= 0x3F)
    {
      result = type metadata accessor for _ResolvedKeyframeTrackContent._Spring(319, v2, v1, v6);
      if (v9 <= 0x3F)
      {
        result = type metadata accessor for _ResolvedKeyframeTrackContent.Linear(319, v2, v1, v8);
        if (v10 <= 0x3F)
        {
          swift_initEnumMetadataMultiPayload();
          return 0;
        }
      }
    }
  }
  return result;
}

_QWORD *initializeBufferWithCopyOfBuffer for _ResolvedKeyframeTrackContent.Segment(_QWORD *a1, _QWORD *a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v4;
  unint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  size_t v9;
  size_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *result;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  const void *v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  const void *v32;
  void *v33;
  _QWORD *v34;
  _QWORD *v35;
  unint64_t v36;
  __int128 v37;
  __int128 v38;
  unint64_t v39;
  void *v40;
  const void *v41;
  void (*v42)(void *, _QWORD, uint64_t, uint64_t);
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  void (*v50)(void *, const void *, uint64_t);
  unsigned int (*v51)(const void *, uint64_t, uint64_t);
  unint64_t v52;
  void (*v53)(void *, const void *, uint64_t);
  int __dst;
  void *__dsta;
  uint64_t v56;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v4 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v5 = *(_QWORD *)(v4 + 64);
  v6 = *(_DWORD *)(v4 + 80);
  v7 = *(_DWORD *)(v4 + 84);
  v8 = v6;
  if (v7)
    v9 = *(_QWORD *)(v4 + 64);
  else
    v9 = v5 + 1;
  v10 = v9 + v6;
  v11 = ((v9
        + 7
        + ((v10 + ((v5 + v6) & ~(unint64_t)v6)) & ~(unint64_t)v6)) & 0xFFFFFFFFFFFFFFF8)
      + 8;
  if (v11 <= v5)
    v11 = *(_QWORD *)(v4 + 64);
  v12 = (v5 + 7) & 0xFFFFFFFFFFFFFFF8;
  v13 = (v9 + 7 + ((v6 + v12 + 24) & ~(unint64_t)v6)) & 0xFFFFFFFFFFFFFFF8;
  v14 = v13 + 9;
  if (v13 + 9 > v11)
    v11 = v13 + 9;
  v15 = (v12 + 15) & 0xFFFFFFFFFFFFFFF8;
  v16 = v15 + 33;
  if (v15 + 33 <= v11)
    v17 = v11;
  else
    v17 = v15 + 33;
  v18 = v6 & 0x100000;
  v19 = v8 <= 7 && v18 == 0;
  if (v19 && v17 + 1 <= 0x18)
  {
    v56 = ~v8;
    switch(*((_BYTE *)a2 + v17))
    {
      case 0:
        v22 = a1;
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v4 + 16))(a1, a2, AssociatedTypeWitness);
        *((_BYTE *)a1 + v17) = 0;
        break;
      case 1:
        v52 = v13 + 9;
        __dst = *(_DWORD *)(v4 + 84);
        v24 = AssociatedTypeWitness;
        v50 = *(void (**)(void *, const void *, uint64_t))(v4 + 16);
        ((void (*)(_QWORD *, _QWORD *))v50)(a1, a2);
        v25 = (void *)(((unint64_t)a1 + v5 + v8) & v56);
        v26 = v24;
        v27 = (const void *)(((unint64_t)a2 + v5 + v8) & v56);
        v51 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v4 + 48);
        if (v51(v27, 1, v24))
        {
          memcpy(v25, v27, v9);
        }
        else
        {
          v50(v25, v27, v24);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v4 + 56))(v25, 0, 1, v24);
        }
        v40 = (void *)(((unint64_t)v25 + v10) & v56);
        v41 = (const void *)(((unint64_t)v27 + v10) & v56);
        if (v51(v41, 1, v26))
        {
          memcpy(v40, v41, v9);
        }
        else
        {
          v50(v40, v41, v26);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v4 + 56))(v40, 0, 1, v26);
        }
        v48 = v5 + 8;
        if (__dst)
          v48 = v5 + 7;
        *(_QWORD *)(((unint64_t)v40 + v48) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v41 + v48) & 0xFFFFFFFFFFFFF8);
        v22 = a1;
        v49 = ((v9 + 7 + ((((v5 + v8) | v8) + v9) & v56)) & 0xFFFFFFFFFFFFFFF8) + 8;
        if (v49 <= v5)
          v49 = v5;
        if (v52 > v49)
          v49 = v52;
        if (v16 > v49)
          v49 = v16;
        *((_BYTE *)a1 + v49) = 1;
        break;
      case 2:
        v22 = a1;
        v28 = AssociatedTypeWitness;
        v53 = *(void (**)(void *, const void *, uint64_t))(v4 + 16);
        ((void (*)(_QWORD *, _QWORD *))v53)(a1, a2);
        v29 = ((unint64_t)a1 + v5 + 7) & 0xFFFFFFFFFFFFFFF8;
        v30 = ((unint64_t)a2 + v5 + 7) & 0xFFFFFFFFFFFFFFF8;
        v31 = *(_QWORD *)(v30 + 16);
        *(_OWORD *)v29 = *(_OWORD *)v30;
        *(_QWORD *)(v29 + 16) = v31;
        __dsta = (void *)((v29 + v8 + 24) & v56);
        v32 = (const void *)((v30 + v8 + 24) & v56);
        if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v4 + 48))(v32, 1, v28))
        {
          v33 = __dsta;
          memcpy(__dsta, v32, v9);
        }
        else
        {
          v53(__dsta, v32, v28);
          v42 = *(void (**)(void *, _QWORD, uint64_t, uint64_t))(v4 + 56);
          v33 = __dsta;
          v42(__dsta, 0, 1, v28);
        }
        v43 = v5 + 8;
        if (v7)
          v43 = v5 + 7;
        v44 = ((unint64_t)v33 + v43) & 0xFFFFFFFFFFFFFFF8;
        v45 = ((unint64_t)v32 + v43) & 0xFFFFFFFFFFFFFFF8;
        v46 = *(_QWORD *)v45;
        *(_BYTE *)(v44 + 8) = *(_BYTE *)(v45 + 8);
        *(_QWORD *)v44 = v46;
        v47 = ((v9 + 7 + ((((v5 + v8) | v8) + v9) & v56)) & 0xFFFFFFFFFFFFFFF8) + 8;
        if (v47 <= v5)
          v47 = v5;
        if (v14 > v47)
          v47 = v14;
        if (v16 > v47)
          v47 = v16;
        *((_BYTE *)a1 + v47) = 2;
        break;
      case 3:
        v22 = a1;
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v4 + 16))(a1, a2, AssociatedTypeWitness);
        v34 = (_QWORD *)(((unint64_t)a1 + v5 + 7) & 0xFFFFFFFFFFFFF8);
        v35 = (_QWORD *)(((unint64_t)a2 + v5 + 7) & 0xFFFFFFFFFFFFF8);
        *v34 = *v35;
        v36 = ((unint64_t)v35 + 15) & 0xFFFFFFFFFFFFFFF8;
        v38 = *(_OWORD *)v36;
        v37 = *(_OWORD *)(v36 + 16);
        v39 = ((unint64_t)v34 + 15) & 0xFFFFFFFFFFFFFFF8;
        *(_BYTE *)(v39 + 32) = *(_BYTE *)(v36 + 32);
        *(_OWORD *)v39 = v38;
        *(_OWORD *)(v39 + 16) = v37;
        *((_BYTE *)a1 + v17) = 3;
        break;
      default:
        if (v17 <= 3)
          v20 = v17;
        else
          v20 = 4;
        __asm { BR              X12 }
        return result;
    }
  }
  else
  {
    v21 = *a2;
    *a1 = *a2;
    v22 = (_QWORD *)(v21 + ((v8 & 0xF8 ^ 0x1F8) & (v8 + 16)));
    swift_retain();
  }
  return v22;
}

uint64_t destroy for _ResolvedKeyframeTrackContent.Segment(unint64_t a1)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t (*v16)(unint64_t, uint64_t);
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unsigned int (*v21)(unint64_t, uint64_t, uint64_t);
  unint64_t v22;
  uint64_t result;
  void (*v24)(unint64_t, uint64_t);

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v3 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v4 = *(_QWORD *)(v3 + 64);
  v5 = *(unsigned __int8 *)(v3 + 80);
  v6 = v4 + v5;
  if (*(_DWORD *)(v3 + 84))
    v7 = *(_QWORD *)(v3 + 64);
  else
    v7 = v4 + 1;
  v8 = ((v7 + 7 + ((v7 + v5 + ((v4 + v5) & ~v5)) & ~v5)) & 0xFFFFFFFFFFFFFFF8) + 8;
  if (v8 <= v4)
    v8 = *(_QWORD *)(v3 + 64);
  v9 = (v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v10 = (v5 + v9 + 24) & ~v5;
  v11 = ((v9 + 15) & 0xFFFFFFFFFFFFFFF8) + 33;
  if (((v7 + 7 + v10) & 0xFFFFFFFFFFFFFFF8) + 9 > v8)
    v8 = ((v7 + 7 + v10) & 0xFFFFFFFFFFFFFFF8) + 9;
  if (v11 > v8)
    v8 = v11;
  v12 = *(unsigned __int8 *)(a1 + v8);
  v14 = ~v5;
  v15 = *(unsigned __int8 *)(a1 + v8);
  switch(v12)
  {
    case 0:
    case 3:
      v16 = *(uint64_t (**)(unint64_t, uint64_t))(v3 + 8);
      v17 = a1;
      v18 = AssociatedTypeWitness;
      return v16(v17, v18);
    case 1:
      v24 = *(void (**)(unint64_t, uint64_t))(v3 + 8);
      v24(a1, AssociatedTypeWitness);
      v19 = v6 + a1;
      v20 = (v6 + a1) & v14;
      v21 = *(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v3 + 48);
      if (!v21(v20, 1, AssociatedTypeWitness))
        v24(v20, AssociatedTypeWitness);
      v22 = ((v19 | v5) + v7) & v14;
      result = ((uint64_t (*)(unint64_t, uint64_t, uint64_t))v21)(v22, 1, AssociatedTypeWitness);
      if (!(_DWORD)result)
        goto LABEL_20;
      return result;
    case 2:
      v24 = *(void (**)(unint64_t, uint64_t))(v3 + 8);
      v24(a1, AssociatedTypeWitness);
      v22 = (((a1 + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + v5 + 24) & v14;
      result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v3 + 48))(v22, 1, AssociatedTypeWitness);
      if ((_DWORD)result)
        return result;
LABEL_20:
      v17 = v22;
      v18 = AssociatedTypeWitness;
      v16 = (uint64_t (*)(unint64_t, uint64_t))v24;
      return v16(v17, v18);
    default:
      if (v15 <= 3)
        v13 = v15;
      else
        v13 = 4;
      __asm { BR              X13 }
      return result;
  }
}

uint64_t initializeWithCopy for _ResolvedKeyframeTrackContent.Segment(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  size_t v7;
  size_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(uint64_t, uint64_t, uint64_t);
  uint64_t v18;
  char v19;
  void (*v20)(uint64_t, uint64_t, uint64_t);
  const void *v21;
  void (*v22)(uint64_t, uint64_t, uint64_t);
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  void *v26;
  const void *v27;
  void (*v28)(uint64_t, uint64_t, uint64_t);
  _QWORD *v29;
  _QWORD *v30;
  unint64_t v31;
  __int128 v32;
  __int128 v33;
  unint64_t v34;
  void *v35;
  const void *v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t result;
  unsigned int (*v45)(const void *, uint64_t, uint64_t);
  unint64_t v46;
  void *v47;
  int v48;
  int v49;
  unint64_t v50;
  unint64_t v51;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v4 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v5 = *(_QWORD *)(v4 + 64);
  v6 = *(unsigned __int8 *)(v4 + 80);
  if (*(_DWORD *)(v4 + 84))
    v7 = *(_QWORD *)(v4 + 64);
  else
    v7 = v5 + 1;
  v8 = v7 + v6;
  v9 = ((v7 + 7 + ((v7 + v6 + ((v5 + v6) & ~v6)) & ~v6)) & 0xFFFFFFFFFFFFFFF8) + 8;
  if (v9 <= v5)
    v9 = *(_QWORD *)(v4 + 64);
  v10 = (v5 + 7) & 0xFFFFFFFFFFFFFFF8;
  v11 = ((v10 + 15) & 0xFFFFFFFFFFFFFFF8) + 33;
  v12 = (v7 + 7 + ((v6 + v10 + 24) & ~v6)) & 0xFFFFFFFFFFFFFFF8;
  v13 = v12 + 9;
  if (v12 + 9 > v9)
    v9 = v12 + 9;
  if (v11 <= v9)
    v14 = v9;
  else
    v14 = v11;
  v16 = ~v6;
  switch(*(_BYTE *)(a2 + v14))
  {
    case 0:
      v17 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
      v18 = a1;
      v17(a1, a2, AssociatedTypeWitness);
      v19 = 0;
      break;
    case 1:
      v46 = v12 + 9;
      v48 = *(_DWORD *)(v4 + 84);
      v50 = v11;
      v20 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
      v20(a1, a2, AssociatedTypeWitness);
      v47 = (void *)((v5 + v6 + a1) & v16);
      v21 = (const void *)((v5 + v6 + a2) & v16);
      v45 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v4 + 48);
      if (v45(v21, 1, AssociatedTypeWitness))
      {
        memcpy(v47, v21, v7);
      }
      else
      {
        v20((uint64_t)v47, (uint64_t)v21, AssociatedTypeWitness);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v4 + 56))(v47, 0, 1, AssociatedTypeWitness);
      }
      v35 = (void *)((v8 + ((v5 + v6 + a1) & v16)) & v16);
      v36 = (const void *)(((unint64_t)v21 + v8) & v16);
      if (v45(v36, 1, AssociatedTypeWitness))
      {
        memcpy(v35, v36, v7);
      }
      else
      {
        v20((uint64_t)v35, (uint64_t)v36, AssociatedTypeWitness);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v4 + 56))(v35, 0, 1, AssociatedTypeWitness);
      }
      v18 = a1;
      v42 = v5 + 8;
      if (v48)
        v42 = v5 + 7;
      *(_QWORD *)(((unint64_t)v35 + v42) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v36 + v42) & 0xFFFFFFFFFFFFF8);
      v43 = ((v7 + 7 + ((((v5 + v6) | v6) + v7) & v16)) & 0xFFFFFFFFFFFFFFF8) + 8;
      if (v43 <= v5)
        v43 = v5;
      if (v46 > v43)
        v43 = v46;
      if (v50 <= v43)
        v14 = v43;
      else
        v14 = v50;
      v19 = 1;
      break;
    case 2:
      v49 = *(_DWORD *)(v4 + 84);
      v51 = v11;
      v22 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
      v22(a1, a2, AssociatedTypeWitness);
      v23 = (a1 + v5 + 7) & 0xFFFFFFFFFFFFFFF8;
      v24 = (a2 + v5 + 7) & 0xFFFFFFFFFFFFFFF8;
      v25 = *(_QWORD *)(v24 + 16);
      *(_OWORD *)v23 = *(_OWORD *)v24;
      *(_QWORD *)(v23 + 16) = v25;
      v26 = (void *)((v23 + v6 + 24) & v16);
      v27 = (const void *)((v24 + v6 + 24) & v16);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v4 + 48))(v27, 1, AssociatedTypeWitness))
      {
        memcpy(v26, v27, v7);
      }
      else
      {
        v22((uint64_t)v26, (uint64_t)v27, AssociatedTypeWitness);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v4 + 56))(v26, 0, 1, AssociatedTypeWitness);
      }
      v37 = v5 + 8;
      if (v49)
        v37 = v5 + 7;
      v38 = ((unint64_t)v26 + v37) & 0xFFFFFFFFFFFFFFF8;
      v39 = ((unint64_t)v27 + v37) & 0xFFFFFFFFFFFFFFF8;
      v40 = *(_QWORD *)v39;
      *(_BYTE *)(v38 + 8) = *(_BYTE *)(v39 + 8);
      *(_QWORD *)v38 = v40;
      v41 = ((v7 + 7 + ((((v5 + v6) | v6) + v7) & v16)) & 0xFFFFFFFFFFFFFFF8) + 8;
      if (v41 <= v5)
        v41 = v5;
      if (v13 > v41)
        v41 = v13;
      v18 = a1;
      if (v51 <= v41)
        v14 = v41;
      else
        v14 = v51;
      v19 = 2;
      break;
    case 3:
      v28 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
      v18 = a1;
      v28(a1, a2, AssociatedTypeWitness);
      v29 = (_QWORD *)((a2 + v5 + 7) & 0xFFFFFFFFFFFFF8);
      v30 = (_QWORD *)((a1 + v5 + 7) & 0xFFFFFFFFFFFFF8);
      *v30 = *v29;
      v31 = ((unint64_t)v29 + 15) & 0xFFFFFFFFFFFFFFF8;
      v33 = *(_OWORD *)v31;
      v32 = *(_OWORD *)(v31 + 16);
      v34 = ((unint64_t)v30 + 15) & 0xFFFFFFFFFFFFFFF8;
      *(_BYTE *)(v34 + 32) = *(_BYTE *)(v31 + 32);
      *(_OWORD *)v34 = v33;
      *(_OWORD *)(v34 + 16) = v32;
      v19 = 3;
      break;
    default:
      if (v14 <= 3)
        v15 = v14;
      else
        v15 = 4;
      __asm { BR              X12 }
      return result;
  }
  *(_BYTE *)(v18 + v14) = v19;
  return v18;
}

uint64_t assignWithCopy for _ResolvedKeyframeTrackContent.Segment(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  size_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int (*v16)(uint64_t, uint64_t, uint64_t);
  size_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  void (*v21)(uint64_t, uint64_t, uint64_t);
  void *v22;
  const void *v23;
  unsigned int (*v24)(const void *, uint64_t, uint64_t);
  void (*v25)(uint64_t, uint64_t, uint64_t);
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  void *v29;
  const void *v30;
  size_t v31;
  _QWORD *v32;
  _QWORD *v33;
  unint64_t v34;
  __int128 v35;
  __int128 v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  char v43;
  unsigned int (*v44)(const void *, uint64_t, uint64_t);
  void *v45;
  const void *v46;
  size_t v47;
  unint64_t v48;
  uint64_t result;
  void (*v50)(uint64_t, uint64_t);
  unint64_t v51;
  void (*v52)(uint64_t, uint64_t);
  uint64_t v53;
  size_t v54;
  int v55;
  size_t __n;
  uint64_t v57;
  size_t v58;
  uint64_t v59;

  if (a1 != a2)
  {
    AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
    v6 = *(_QWORD *)(v5 + 64);
    v7 = *(unsigned __int8 *)(v5 + 80);
    v57 = v6 + v7;
    v55 = *(_DWORD *)(v5 + 84);
    if (v55)
      v8 = *(_QWORD *)(v5 + 64);
    else
      v8 = v6 + 1;
    v54 = v8 + v7;
    v9 = ((v8 + 7 + ((v8 + v7 + ((v6 + v7) & ~v7)) & ~v7)) & 0xFFFFFFFFFFFFFFF8) + 8;
    if (v9 <= v6)
      v9 = *(_QWORD *)(v5 + 64);
    v10 = (v6 + 7) & 0xFFFFFFFFFFFFFFF8;
    v11 = ((v10 + 15) & 0xFFFFFFFFFFFFFFF8) + 33;
    v58 = v8 + 7;
    v12 = ((v8 + 7 + ((v7 + v10 + 24) & ~v7)) & 0xFFFFFFFFFFFFFFF8) + 9;
    if (v12 > v9)
      v9 = ((v8 + 7 + ((v7 + v10 + 24) & ~v7)) & 0xFFFFFFFFFFFFFFF8) + 9;
    if (v11 <= v9)
      v13 = v9;
    else
      v13 = ((v10 + 15) & 0xFFFFFFFFFFFFFFF8) + 33;
    v59 = ~v7;
    __n = v8;
    switch(*(_BYTE *)(a1 + v13))
    {
      case 0:
      case 3:
        (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a1, AssociatedTypeWitness);
        goto LABEL_27;
      case 1:
        v51 = ((v10 + 15) & 0xFFFFFFFFFFFFFFF8) + 33;
        v50 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
        v50(a1, AssociatedTypeWitness);
        v15 = (v57 + a1) & v59;
        v16 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
        if (!v16(v15, 1, AssociatedTypeWitness))
          v50(v15, AssociatedTypeWitness);
        v17 = (v54 + v15) & v59;
        if (!v16(v17, 1, AssociatedTypeWitness))
          v50(v17, AssociatedTypeWitness);
        v18 = v6;
        v11 = v51;
        goto LABEL_26;
      case 2:
        v52 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
        v52(a1, AssociatedTypeWitness);
        if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v5 + 48))((((a1 + v6 + 7) & 0xFFFFFFFFFFFFFFF8) + v7 + 24) & v59, 1, AssociatedTypeWitness))v52((((a1 + v6 + 7) & 0xFFFFFFFFFFFFFFF8) + v7 + 24) & v59, AssociatedTypeWitness);
        v18 = v6;
LABEL_26:
        v8 = __n;
        if (!v55)
LABEL_27:
          v18 = v8;
        v19 = ((v58 + (((v57 | v7) + v18) & v59)) & 0xFFFFFFFFFFFFFFF8) + 8;
        if (v19 <= v6)
          v19 = v6;
        if (v12 > v19)
          v19 = v12;
        if (v11 > v19)
          v19 = v11;
        switch(*(_BYTE *)(a2 + v19))
        {
          case 0:
            (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
            *(_BYTE *)(a1 + v13) = 0;
            return a1;
          case 1:
            v53 = v57 | v7;
            v21 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
            v21(a1, a2, AssociatedTypeWitness);
            v22 = (void *)((v57 + a1) & v59);
            v23 = (const void *)((v57 + a2) & v59);
            v24 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v5 + 48);
            if (v24(v23, 1, AssociatedTypeWitness))
            {
              memcpy(v22, v23, __n);
            }
            else
            {
              v21((uint64_t)v22, (uint64_t)v23, AssociatedTypeWitness);
              (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v5 + 56))(v22, 0, 1, AssociatedTypeWitness);
            }
            v44 = v24;
            v45 = (void *)(((unint64_t)v22 + v54) & v59);
            v46 = (const void *)(((unint64_t)v23 + v54) & v59);
            if (v44(v46, 1, AssociatedTypeWitness))
            {
              v47 = __n;
              memcpy(v45, v46, __n);
            }
            else
            {
              v21((uint64_t)v45, (uint64_t)v46, AssociatedTypeWitness);
              (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v5 + 56))(v45, 0, 1, AssociatedTypeWitness);
              v47 = __n;
            }
            v48 = v6 + 8;
            if (v55)
              v48 = v6 + 7;
            *(_QWORD *)(((unint64_t)v45 + v48) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v46 + v48) & 0xFFFFFFFFFFFFF8);
            v42 = ((v58 + ((v53 + v47) & v59)) & 0xFFFFFFFFFFFFFFF8) + 8;
            if (v42 <= v6)
              v42 = v6;
            if (v12 > v42)
              v42 = v12;
            if (v11 > v42)
              v42 = v11;
            v43 = 1;
            goto LABEL_69;
          case 2:
            v25 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
            v25(a1, a2, AssociatedTypeWitness);
            v26 = (a1 + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
            v27 = (a2 + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
            v28 = *(_QWORD *)(v27 + 16);
            *(_OWORD *)v26 = *(_OWORD *)v27;
            *(_QWORD *)(v26 + 16) = v28;
            v29 = (void *)((v26 + v7 + 24) & v59);
            v30 = (const void *)((v27 + v7 + 24) & v59);
            if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v5 + 48))(v30, 1, AssociatedTypeWitness))
            {
              v31 = __n;
              memcpy(v29, v30, __n);
            }
            else
            {
              v25((uint64_t)v29, (uint64_t)v30, AssociatedTypeWitness);
              (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v5 + 56))(v29, 0, 1, AssociatedTypeWitness);
              v31 = __n;
            }
            v38 = v6 + 8;
            if (v55)
              v38 = v6 + 7;
            v39 = ((unint64_t)v29 + v38) & 0xFFFFFFFFFFFFFFF8;
            v40 = ((unint64_t)v30 + v38) & 0xFFFFFFFFFFFFFFF8;
            v41 = *(_QWORD *)v40;
            *(_BYTE *)(v39 + 8) = *(_BYTE *)(v40 + 8);
            *(_QWORD *)v39 = v41;
            v42 = ((v58 + (((v57 | v7) + v31) & v59)) & 0xFFFFFFFFFFFFFFF8) + 8;
            if (v42 <= v6)
              v42 = v6;
            if (v12 > v42)
              v42 = v12;
            if (v11 > v42)
              v42 = v11;
            v43 = 2;
LABEL_69:
            *(_BYTE *)(a1 + v42) = v43;
            break;
          case 3:
            (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
            v32 = (_QWORD *)((a1 + v6 + 7) & 0xFFFFFFFFFFFFF8);
            v33 = (_QWORD *)((a2 + v6 + 7) & 0xFFFFFFFFFFFFF8);
            *v32 = *v33;
            v34 = ((unint64_t)v33 + 15) & 0xFFFFFFFFFFFFFFF8;
            v36 = *(_OWORD *)v34;
            v35 = *(_OWORD *)(v34 + 16);
            v37 = ((unint64_t)v32 + 15) & 0xFFFFFFFFFFFFFFF8;
            *(_BYTE *)(v37 + 32) = *(_BYTE *)(v34 + 32);
            *(_OWORD *)v37 = v36;
            *(_OWORD *)(v37 + 16) = v35;
            *(_BYTE *)(a1 + v13) = 3;
            break;
          default:
            if (v13 <= 3)
              v20 = v13;
            else
              v20 = 4;
            __asm { BR              X12 }
            return result;
        }
        return result;
      default:
        if (v13 <= 3)
          v14 = v13;
        else
          v14 = 4;
        __asm { BR              X12 }
        return result;
    }
  }
  return a1;
}

uint64_t initializeWithTake for _ResolvedKeyframeTrackContent.Segment(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  size_t v7;
  size_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(uint64_t, uint64_t, uint64_t);
  uint64_t v18;
  char v19;
  void (*v20)(uint64_t, uint64_t, uint64_t);
  const void *v21;
  void (*v22)(uint64_t, uint64_t, uint64_t);
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  void *v26;
  const void *v27;
  void (*v28)(uint64_t, uint64_t, uint64_t);
  _QWORD *v29;
  _QWORD *v30;
  unint64_t v31;
  __int128 v32;
  __int128 v33;
  unint64_t v34;
  void *v35;
  const void *v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t result;
  unsigned int (*v45)(const void *, uint64_t, uint64_t);
  unint64_t v46;
  void *v47;
  int v48;
  int v49;
  unint64_t v50;
  unint64_t v51;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v4 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v5 = *(_QWORD *)(v4 + 64);
  v6 = *(unsigned __int8 *)(v4 + 80);
  if (*(_DWORD *)(v4 + 84))
    v7 = *(_QWORD *)(v4 + 64);
  else
    v7 = v5 + 1;
  v8 = v7 + v6;
  v9 = ((v7 + 7 + ((v7 + v6 + ((v5 + v6) & ~v6)) & ~v6)) & 0xFFFFFFFFFFFFFFF8) + 8;
  if (v9 <= v5)
    v9 = *(_QWORD *)(v4 + 64);
  v10 = (v5 + 7) & 0xFFFFFFFFFFFFFFF8;
  v11 = ((v10 + 15) & 0xFFFFFFFFFFFFFFF8) + 33;
  v12 = (v7 + 7 + ((v6 + v10 + 24) & ~v6)) & 0xFFFFFFFFFFFFFFF8;
  v13 = v12 + 9;
  if (v12 + 9 > v9)
    v9 = v12 + 9;
  if (v11 <= v9)
    v14 = v9;
  else
    v14 = v11;
  v16 = ~v6;
  switch(*(_BYTE *)(a2 + v14))
  {
    case 0:
      v17 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 32);
      v18 = a1;
      v17(a1, a2, AssociatedTypeWitness);
      v19 = 0;
      break;
    case 1:
      v46 = v12 + 9;
      v48 = *(_DWORD *)(v4 + 84);
      v50 = v11;
      v20 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 32);
      v20(a1, a2, AssociatedTypeWitness);
      v47 = (void *)((v5 + v6 + a1) & v16);
      v21 = (const void *)((v5 + v6 + a2) & v16);
      v45 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v4 + 48);
      if (v45(v21, 1, AssociatedTypeWitness))
      {
        memcpy(v47, v21, v7);
      }
      else
      {
        v20((uint64_t)v47, (uint64_t)v21, AssociatedTypeWitness);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v4 + 56))(v47, 0, 1, AssociatedTypeWitness);
      }
      v35 = (void *)((v8 + ((v5 + v6 + a1) & v16)) & v16);
      v36 = (const void *)(((unint64_t)v21 + v8) & v16);
      if (v45(v36, 1, AssociatedTypeWitness))
      {
        memcpy(v35, v36, v7);
      }
      else
      {
        v20((uint64_t)v35, (uint64_t)v36, AssociatedTypeWitness);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v4 + 56))(v35, 0, 1, AssociatedTypeWitness);
      }
      v18 = a1;
      v42 = v5 + 8;
      if (v48)
        v42 = v5 + 7;
      *(_QWORD *)(((unint64_t)v35 + v42) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v36 + v42) & 0xFFFFFFFFFFFFF8);
      v43 = ((v7 + 7 + ((((v5 + v6) | v6) + v7) & v16)) & 0xFFFFFFFFFFFFFFF8) + 8;
      if (v43 <= v5)
        v43 = v5;
      if (v46 > v43)
        v43 = v46;
      if (v50 <= v43)
        v14 = v43;
      else
        v14 = v50;
      v19 = 1;
      break;
    case 2:
      v49 = *(_DWORD *)(v4 + 84);
      v51 = v11;
      v22 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 32);
      v22(a1, a2, AssociatedTypeWitness);
      v23 = (a1 + v5 + 7) & 0xFFFFFFFFFFFFFFF8;
      v24 = (a2 + v5 + 7) & 0xFFFFFFFFFFFFFFF8;
      v25 = *(_QWORD *)(v24 + 16);
      *(_OWORD *)v23 = *(_OWORD *)v24;
      *(_QWORD *)(v23 + 16) = v25;
      v26 = (void *)((v23 + v6 + 24) & v16);
      v27 = (const void *)((v24 + v6 + 24) & v16);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v4 + 48))(v27, 1, AssociatedTypeWitness))
      {
        memcpy(v26, v27, v7);
      }
      else
      {
        v22((uint64_t)v26, (uint64_t)v27, AssociatedTypeWitness);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v4 + 56))(v26, 0, 1, AssociatedTypeWitness);
      }
      v37 = v5 + 8;
      if (v49)
        v37 = v5 + 7;
      v38 = ((unint64_t)v26 + v37) & 0xFFFFFFFFFFFFFFF8;
      v39 = ((unint64_t)v27 + v37) & 0xFFFFFFFFFFFFFFF8;
      v40 = *(_QWORD *)v39;
      *(_BYTE *)(v38 + 8) = *(_BYTE *)(v39 + 8);
      *(_QWORD *)v38 = v40;
      v41 = ((v7 + 7 + ((((v5 + v6) | v6) + v7) & v16)) & 0xFFFFFFFFFFFFFFF8) + 8;
      if (v41 <= v5)
        v41 = v5;
      if (v13 > v41)
        v41 = v13;
      v18 = a1;
      if (v51 <= v41)
        v14 = v41;
      else
        v14 = v51;
      v19 = 2;
      break;
    case 3:
      v28 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 32);
      v18 = a1;
      v28(a1, a2, AssociatedTypeWitness);
      v29 = (_QWORD *)((a2 + v5 + 7) & 0xFFFFFFFFFFFFF8);
      v30 = (_QWORD *)((a1 + v5 + 7) & 0xFFFFFFFFFFFFF8);
      *v30 = *v29;
      v31 = ((unint64_t)v29 + 15) & 0xFFFFFFFFFFFFFFF8;
      v33 = *(_OWORD *)v31;
      v32 = *(_OWORD *)(v31 + 16);
      v34 = ((unint64_t)v30 + 15) & 0xFFFFFFFFFFFFFFF8;
      *(_BYTE *)(v34 + 32) = *(_BYTE *)(v31 + 32);
      *(_OWORD *)v34 = v33;
      *(_OWORD *)(v34 + 16) = v32;
      v19 = 3;
      break;
    default:
      if (v14 <= 3)
        v15 = v14;
      else
        v15 = 4;
      __asm { BR              X12 }
      return result;
  }
  *(_BYTE *)(v18 + v14) = v19;
  return v18;
}

uint64_t assignWithTake for _ResolvedKeyframeTrackContent.Segment(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  size_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int (*v16)(uint64_t, uint64_t, uint64_t);
  size_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  void (*v21)(uint64_t, uint64_t, uint64_t);
  void *v22;
  const void *v23;
  unsigned int (*v24)(const void *, uint64_t, uint64_t);
  void (*v25)(uint64_t, uint64_t, uint64_t);
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  void *v29;
  const void *v30;
  size_t v31;
  _QWORD *v32;
  _QWORD *v33;
  unint64_t v34;
  __int128 v35;
  __int128 v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  char v43;
  unsigned int (*v44)(const void *, uint64_t, uint64_t);
  void *v45;
  const void *v46;
  size_t v47;
  unint64_t v48;
  uint64_t result;
  void (*v50)(uint64_t, uint64_t);
  unint64_t v51;
  void (*v52)(uint64_t, uint64_t);
  uint64_t v53;
  size_t v54;
  int v55;
  size_t __n;
  uint64_t v57;
  size_t v58;
  uint64_t v59;

  if (a1 != a2)
  {
    AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
    v6 = *(_QWORD *)(v5 + 64);
    v7 = *(unsigned __int8 *)(v5 + 80);
    v57 = v6 + v7;
    v55 = *(_DWORD *)(v5 + 84);
    if (v55)
      v8 = *(_QWORD *)(v5 + 64);
    else
      v8 = v6 + 1;
    v54 = v8 + v7;
    v9 = ((v8 + 7 + ((v8 + v7 + ((v6 + v7) & ~v7)) & ~v7)) & 0xFFFFFFFFFFFFFFF8) + 8;
    if (v9 <= v6)
      v9 = *(_QWORD *)(v5 + 64);
    v10 = (v6 + 7) & 0xFFFFFFFFFFFFFFF8;
    v11 = ((v10 + 15) & 0xFFFFFFFFFFFFFFF8) + 33;
    v58 = v8 + 7;
    v12 = ((v8 + 7 + ((v7 + v10 + 24) & ~v7)) & 0xFFFFFFFFFFFFFFF8) + 9;
    if (v12 > v9)
      v9 = ((v8 + 7 + ((v7 + v10 + 24) & ~v7)) & 0xFFFFFFFFFFFFFFF8) + 9;
    if (v11 <= v9)
      v13 = v9;
    else
      v13 = ((v10 + 15) & 0xFFFFFFFFFFFFFFF8) + 33;
    v59 = ~v7;
    __n = v8;
    switch(*(_BYTE *)(a1 + v13))
    {
      case 0:
      case 3:
        (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a1, AssociatedTypeWitness);
        goto LABEL_27;
      case 1:
        v51 = ((v10 + 15) & 0xFFFFFFFFFFFFFFF8) + 33;
        v50 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
        v50(a1, AssociatedTypeWitness);
        v15 = (v57 + a1) & v59;
        v16 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
        if (!v16(v15, 1, AssociatedTypeWitness))
          v50(v15, AssociatedTypeWitness);
        v17 = (v54 + v15) & v59;
        if (!v16(v17, 1, AssociatedTypeWitness))
          v50(v17, AssociatedTypeWitness);
        v18 = v6;
        v11 = v51;
        goto LABEL_26;
      case 2:
        v52 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
        v52(a1, AssociatedTypeWitness);
        if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v5 + 48))((((a1 + v6 + 7) & 0xFFFFFFFFFFFFFFF8) + v7 + 24) & v59, 1, AssociatedTypeWitness))v52((((a1 + v6 + 7) & 0xFFFFFFFFFFFFFFF8) + v7 + 24) & v59, AssociatedTypeWitness);
        v18 = v6;
LABEL_26:
        v8 = __n;
        if (!v55)
LABEL_27:
          v18 = v8;
        v19 = ((v58 + (((v57 | v7) + v18) & v59)) & 0xFFFFFFFFFFFFFFF8) + 8;
        if (v19 <= v6)
          v19 = v6;
        if (v12 > v19)
          v19 = v12;
        if (v11 > v19)
          v19 = v11;
        switch(*(_BYTE *)(a2 + v19))
        {
          case 0:
            (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 32))(a1, a2, AssociatedTypeWitness);
            *(_BYTE *)(a1 + v13) = 0;
            return a1;
          case 1:
            v53 = v57 | v7;
            v21 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 32);
            v21(a1, a2, AssociatedTypeWitness);
            v22 = (void *)((v57 + a1) & v59);
            v23 = (const void *)((v57 + a2) & v59);
            v24 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v5 + 48);
            if (v24(v23, 1, AssociatedTypeWitness))
            {
              memcpy(v22, v23, __n);
            }
            else
            {
              v21((uint64_t)v22, (uint64_t)v23, AssociatedTypeWitness);
              (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v5 + 56))(v22, 0, 1, AssociatedTypeWitness);
            }
            v44 = v24;
            v45 = (void *)(((unint64_t)v22 + v54) & v59);
            v46 = (const void *)(((unint64_t)v23 + v54) & v59);
            if (v44(v46, 1, AssociatedTypeWitness))
            {
              v47 = __n;
              memcpy(v45, v46, __n);
            }
            else
            {
              v21((uint64_t)v45, (uint64_t)v46, AssociatedTypeWitness);
              (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v5 + 56))(v45, 0, 1, AssociatedTypeWitness);
              v47 = __n;
            }
            v48 = v6 + 8;
            if (v55)
              v48 = v6 + 7;
            *(_QWORD *)(((unint64_t)v45 + v48) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v46 + v48) & 0xFFFFFFFFFFFFF8);
            v42 = ((v58 + ((v53 + v47) & v59)) & 0xFFFFFFFFFFFFFFF8) + 8;
            if (v42 <= v6)
              v42 = v6;
            if (v12 > v42)
              v42 = v12;
            if (v11 > v42)
              v42 = v11;
            v43 = 1;
            goto LABEL_69;
          case 2:
            v25 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 32);
            v25(a1, a2, AssociatedTypeWitness);
            v26 = (a1 + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
            v27 = (a2 + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
            v28 = *(_QWORD *)(v27 + 16);
            *(_OWORD *)v26 = *(_OWORD *)v27;
            *(_QWORD *)(v26 + 16) = v28;
            v29 = (void *)((v26 + v7 + 24) & v59);
            v30 = (const void *)((v27 + v7 + 24) & v59);
            if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v5 + 48))(v30, 1, AssociatedTypeWitness))
            {
              v31 = __n;
              memcpy(v29, v30, __n);
            }
            else
            {
              v25((uint64_t)v29, (uint64_t)v30, AssociatedTypeWitness);
              (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v5 + 56))(v29, 0, 1, AssociatedTypeWitness);
              v31 = __n;
            }
            v38 = v6 + 8;
            if (v55)
              v38 = v6 + 7;
            v39 = ((unint64_t)v29 + v38) & 0xFFFFFFFFFFFFFFF8;
            v40 = ((unint64_t)v30 + v38) & 0xFFFFFFFFFFFFFFF8;
            v41 = *(_QWORD *)v40;
            *(_BYTE *)(v39 + 8) = *(_BYTE *)(v40 + 8);
            *(_QWORD *)v39 = v41;
            v42 = ((v58 + (((v57 | v7) + v31) & v59)) & 0xFFFFFFFFFFFFFFF8) + 8;
            if (v42 <= v6)
              v42 = v6;
            if (v12 > v42)
              v42 = v12;
            if (v11 > v42)
              v42 = v11;
            v43 = 2;
LABEL_69:
            *(_BYTE *)(a1 + v42) = v43;
            break;
          case 3:
            (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 32))(a1, a2, AssociatedTypeWitness);
            v32 = (_QWORD *)((a1 + v6 + 7) & 0xFFFFFFFFFFFFF8);
            v33 = (_QWORD *)((a2 + v6 + 7) & 0xFFFFFFFFFFFFF8);
            *v32 = *v33;
            v34 = ((unint64_t)v33 + 15) & 0xFFFFFFFFFFFFFFF8;
            v36 = *(_OWORD *)v34;
            v35 = *(_OWORD *)(v34 + 16);
            v37 = ((unint64_t)v32 + 15) & 0xFFFFFFFFFFFFFFF8;
            *(_BYTE *)(v37 + 32) = *(_BYTE *)(v34 + 32);
            *(_OWORD *)v37 = v36;
            *(_OWORD *)(v37 + 16) = v35;
            *(_BYTE *)(a1 + v13) = 3;
            break;
          default:
            if (v13 <= 3)
              v20 = v13;
            else
              v20 = 4;
            __asm { BR              X12 }
            return result;
        }
        return result;
      default:
        if (v13 <= 3)
          v14 = v13;
        else
          v14 = 4;
        __asm { BR              X12 }
        return result;
    }
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for _ResolvedKeyframeTrackContent.Segment(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  BOOL v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char v14;
  int v15;
  unsigned int v17;
  int v18;
  unsigned int v19;

  v4 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v5 = *(_QWORD *)(v4 + 64);
  v6 = *(unsigned __int8 *)(v4 + 80);
  v7 = *(_DWORD *)(v4 + 84) == 0;
  v8 = (v5 + 7) & 0xFFFFFFFFFFFFFFF8;
  v9 = (v8 + v6 + 24) & ~v6;
  v10 = ((v8 + 15) & 0xFFFFFFFFFFFFFFF8) + 33;
  if (v7)
    v11 = v5 + 1;
  else
    v11 = v5;
  v12 = ((v11 + 7 + ((v11 + v6 + ((v5 + v6) & ~v6)) & ~v6)) & 0xFFFFFFFFFFFFFFF8) + 8;
  if (v12 > v5)
    v5 = v12;
  if (((v11 + 7 + v9) & 0xFFFFFFFFFFFFFFF8) + 9 > v5)
    v5 = ((v11 + 7 + v9) & 0xFFFFFFFFFFFFFFF8) + 9;
  if (v10 > v5)
    v5 = v10;
  if (!a2)
    return 0;
  if (a2 < 0xFD)
    goto LABEL_28;
  v13 = v5 + 1;
  v14 = 8 * (v5 + 1);
  if ((v5 + 1) <= 3)
  {
    v17 = ((a2 + ~(-1 << v14) - 252) >> v14) + 1;
    if (HIWORD(v17))
    {
      v15 = *(_DWORD *)(a1 + v13);
      if (!v15)
        goto LABEL_28;
      goto LABEL_21;
    }
    if (v17 > 0xFF)
    {
      v15 = *(unsigned __int16 *)(a1 + v13);
      if (!*(_WORD *)(a1 + v13))
        goto LABEL_28;
      goto LABEL_21;
    }
    if (v17 < 2)
    {
LABEL_28:
      v19 = *(unsigned __int8 *)(a1 + v5);
      if (v19 >= 4)
        return (v19 ^ 0xFF) + 1;
      else
        return 0;
    }
  }
  v15 = *(unsigned __int8 *)(a1 + v13);
  if (!*(_BYTE *)(a1 + v13))
    goto LABEL_28;
LABEL_21:
  v18 = (v15 - 1) << v14;
  if (v13 > 3)
    v18 = 0;
  if ((_DWORD)v13)
  {
    if (v13 > 3)
      LODWORD(v13) = 4;
    __asm { BR              X11 }
  }
  return (v18 + 253);
}

void storeEnumTagSinglePayload for _ResolvedKeyframeTrackContent.Segment(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  BOOL v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  size_t v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  int v19;

  v6 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v7 = *(_QWORD *)(v6 + 64);
  v8 = *(unsigned __int8 *)(v6 + 80);
  v9 = *(_DWORD *)(v6 + 84) == 0;
  v10 = (v7 + 7) & 0xFFFFFFFFFFFFFFF8;
  v11 = (v10 + v8 + 24) & ~v8;
  v12 = ((v10 + 15) & 0xFFFFFFFFFFFFFFF8) + 33;
  if (v9)
    v13 = v7 + 1;
  else
    v13 = v7;
  v14 = ((v13 + 7 + ((v13 + v8 + ((v7 + v8) & ~v8)) & ~v8)) & 0xFFFFFFFFFFFFFFF8) + 8;
  if (v14 > v7)
    v7 = v14;
  if (((v13 + 7 + v11) & 0xFFFFFFFFFFFFFFF8) + 9 > v7)
    v7 = ((v13 + 7 + v11) & 0xFFFFFFFFFFFFFFF8) + 9;
  if (v12 <= v7)
    v12 = v7;
  v15 = v12 + 1;
  if (a3 < 0xFD)
  {
    v16 = 0;
  }
  else if (v15 <= 3)
  {
    v18 = ((a3 + ~(-1 << (8 * v15)) - 252) >> (8 * v15)) + 1;
    if (HIWORD(v18))
    {
      v16 = 4u;
    }
    else if (v18 >= 0x100)
    {
      v16 = 2;
    }
    else
    {
      v16 = v18 > 1;
    }
  }
  else
  {
    v16 = 1u;
  }
  if (a2 <= 0xFC)
    __asm { BR              X11 }
  v17 = a2 - 253;
  if (v15 < 4)
  {
    if ((_DWORD)v12 != -1)
    {
      v19 = v17 & ~(-1 << (8 * v15));
      bzero(a1, v15);
      if ((_DWORD)v15 == 3)
      {
        *(_WORD *)a1 = v19;
        a1[2] = BYTE2(v19);
      }
      else if ((_DWORD)v15 == 2)
      {
        *(_WORD *)a1 = v19;
      }
      else
      {
        *a1 = v19;
      }
    }
  }
  else
  {
    bzero(a1, v12 + 1);
    *(_DWORD *)a1 = v17;
  }
  __asm { BR              X10 }
}

uint64_t getEnumTag for _ResolvedKeyframeTrackContent.Segment(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t result;
  uint64_t v14;

  v2 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v3 = *(_QWORD *)(v2 + 64);
  v4 = *(unsigned __int8 *)(v2 + 80);
  if (*(_DWORD *)(v2 + 84))
    v5 = *(_QWORD *)(v2 + 64);
  else
    v5 = v3 + 1;
  v6 = (v5 + v4 + ((v3 + v4) & ~v4)) & ~v4;
  v7 = v5 + 7;
  v8 = ((v7 + v6) & 0xFFFFFFFFFFFFFFF8) + 8;
  if (v8 <= v3)
    v8 = v3;
  v9 = (v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  v10 = (v9 + v4 + 24) & ~v4;
  v11 = ((v9 + 15) & 0xFFFFFFFFFFFFFFF8) + 33;
  v12 = ((v7 + v10) & 0xFFFFFFFFFFFFFFF8) + 9;
  if (v12 <= v8)
    v12 = v8;
  if (v11 > v12)
    v12 = v11;
  result = *(unsigned __int8 *)(a1 + v12);
  if (result >= 4)
  {
    if (v12 <= 3)
      v14 = v12;
    else
      v14 = 4;
    __asm { BR              X12 }
  }
  return result;
}

uint64_t destructiveInjectEnumTag for _ResolvedKeyframeTrackContent.Segment(_BYTE *a1, unsigned int a2)
{
  uint64_t result;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  size_t v16;
  unsigned int v17;
  int v18;

  result = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(result - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = *(unsigned __int8 *)(v5 + 80);
  if (*(_DWORD *)(v5 + 84))
    v8 = *(_QWORD *)(v5 + 64);
  else
    v8 = v6 + 1;
  v9 = v8 + 7;
  v10 = ((v8 + 7 + ((v8 + v7 + ((v6 + v7) & ~v7)) & ~v7)) & 0xFFFFFFFFFFFFFFF8) + 8;
  if (v10 <= v6)
    v10 = v6;
  v11 = (v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  v12 = (v11 + v7 + 24) & ~v7;
  if (a2 > 3)
  {
    v15 = ((v9 + v12) & 0xFFFFFFFFFFFFFFF8) + 9;
    if (v15 > v10)
      v10 = v15;
    if (((v11 + 15) & 0xFFFFFFFFFFFFFFF8) + 33 <= v10)
      v16 = v10;
    else
      v16 = ((v11 + 15) & 0xFFFFFFFFFFFFFFF8) + 33;
    v17 = ((a2 - 4) >> (8 * v16)) + 4;
    if (v16 > 3)
      LOBYTE(v17) = 4;
    a1[v16] = v17;
    if (v16 >= 4)
      v18 = 4;
    else
      v18 = v16;
    bzero(a1, v16);
    __asm { BR              X10 }
  }
  v13 = ((v11 + 15) & 0xFFFFFFFFFFFFFFF8) + 33;
  v14 = ((v9 + v12) & 0xFFFFFFFFFFFFFFF8) + 9;
  if (v14 > v10)
    v10 = v14;
  if (v13 > v10)
    v10 = v13;
  a1[v10] = a2;
  return result;
}

uint64_t instantiation function for generic protocol witness table for ArrayKeyframeTrackContent<A, B>(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ArrayKeyframeTrackContent<A, B>);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t instantiation function for generic protocol witness table for MergedKeyframeTrackContent<A, B, C>(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for MergedKeyframeTrackContent<A, B, C>);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t instantiation function for generic protocol witness table for EmptyKeyframeTrackContent<A>(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for EmptyKeyframeTrackContent<A>);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

void associated type witness table accessor for KeyframeTrackContent.Body : KeyframeTrackContent in EmptyKeyframeTrackContent<A>()
{
  JUMPOUT(0x23B7C9C04);
}

void associated type witness table accessor for KeyframeTrackContent.Body : KeyframeTrackContent in MergedKeyframeTrackContent<A, B, C>()
{
  JUMPOUT(0x23B7C9C04);
}

uint64_t associated type witness table accessor for KeyframeTrackContent.Value : Animatable in MergedKeyframeTrackContent<A, B, C>()
{
  return swift_getAssociatedConformanceWitness();
}

void associated type witness table accessor for KeyframeTrackContent.Body : KeyframeTrackContent in ArrayKeyframeTrackContent<A, B>()
{
  JUMPOUT(0x23B7C9C04);
}

uint64_t associated type witness table accessor for KeyframeTrackContent.Value : Animatable in ArrayKeyframeTrackContent<A, B>()
{
  return swift_getAssociatedConformanceWitness();
}

void specialized PrimitiveKeyframeTrackContent.bodyError()()
{
  Swift::String v0;
  Swift::String v1;

  _StringGuts.grow(_:)(34);
  swift_bridgeObjectRelease();
  v0._countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  v1._countAndFlagsBits = 46;
  v1._object = (void *)0xE100000000000000;
  String.append(_:)(v1);
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t protocol witness for SerialExecutor.enqueue(_:) in conformance _ImpossibleExecutor()
{
  lazy protocol witness table accessor for type AnyTextSizingModifier and conformance AnyTextSizingModifier(&lazy protocol witness table cache variable for type _ImpossibleExecutor and conformance _ImpossibleExecutor, 255, (uint64_t (*)(uint64_t))type metadata accessor for _ImpossibleExecutor, (uint64_t)&protocol conformance descriptor for _ImpossibleExecutor);
  return Executor.enqueue(_:)();
}

{
  lazy protocol witness table accessor for type AnyTextSizingModifier and conformance AnyTextSizingModifier(&lazy protocol witness table cache variable for type _ImpossibleExecutor and conformance _ImpossibleExecutor, 255, (uint64_t (*)(uint64_t))type metadata accessor for _ImpossibleExecutor, (uint64_t)&protocol conformance descriptor for _ImpossibleExecutor);
  return Executor.enqueue(_:)();
}

uint64_t protocol witness for SerialExecutor.asUnownedSerialExecutor() in conformance _ImpossibleExecutor()
{
  return SerialExecutor.asUnownedSerialExecutor()();
}

uint64_t protocol witness for SerialExecutor.isSameExclusiveExecutionContext(other:) in conformance _ImpossibleExecutor()
{
  return SerialExecutor.isSameExclusiveExecutionContext(other:)();
}

void protocol witness for SerialExecutor.checkIsolated() in conformance _ImpossibleExecutor()
{
  JUMPOUT(0x23B7C6340);
}

uint64_t protocol witness for Executor.enqueue(_:) in conformance _ImpossibleExecutor()
{
  return Executor.enqueue(_:)();
}

{
  return Executor.enqueue(_:)();
}

void protocol witness for Executor.enqueue(_:) in conformance _ImpossibleExecutor()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t static _ImpossibleActor.shared.getter()
{
  if (one-time initialization token for shared != -1)
    swift_once();
  swift_beginAccess();
  return swift_retain();
}

uint64_t static _ImpossibleActor.shared.setter(uint64_t a1)
{
  if (one-time initialization token for shared != -1)
    swift_once();
  swift_beginAccess();
  static _ImpossibleActor.shared = a1;
  return swift_release();
}

uint64_t (*static _ImpossibleActor.shared.modify())()
{
  if (one-time initialization token for shared != -1)
    swift_once();
  swift_beginAccess();
  return DisplayList.GraphicsRenderer.platformViewMode.modify;
}

uint64_t _ImpossibleActor.unownedExecutor.getter()
{
  type metadata accessor for _ImpossibleExecutor();
  swift_initStaticObject();
  lazy protocol witness table accessor for type AnyTextSizingModifier and conformance AnyTextSizingModifier(&lazy protocol witness table cache variable for type _ImpossibleExecutor and conformance _ImpossibleExecutor, 255, (uint64_t (*)(uint64_t))type metadata accessor for _ImpossibleExecutor, (uint64_t)&protocol conformance descriptor for _ImpossibleExecutor);
  return SerialExecutor.asUnownedSerialExecutor()();
}

uint64_t type metadata accessor for _ImpossibleExecutor()
{
  return objc_opt_self();
}

uint64_t _ImpossibleActor.deinit()
{
  uint64_t v0;

  return v0;
}

uint64_t _ImpossibleActor.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t protocol witness for Actor.unownedExecutor.getter in conformance _ImpossibleActor()
{
  type metadata accessor for _ImpossibleExecutor();
  swift_initStaticObject();
  lazy protocol witness table accessor for type AnyTextSizingModifier and conformance AnyTextSizingModifier(&lazy protocol witness table cache variable for type _ImpossibleExecutor and conformance _ImpossibleExecutor, 255, (uint64_t (*)(uint64_t))type metadata accessor for _ImpossibleExecutor, (uint64_t)&protocol conformance descriptor for _ImpossibleExecutor);
  return SerialExecutor.asUnownedSerialExecutor()();
}

uint64_t associated type witness table accessor for GlobalActor.ActorType : Actor in _ImpossibleActor(uint64_t a1, uint64_t a2)
{
  return lazy protocol witness table accessor for type AnyTextSizingModifier and conformance AnyTextSizingModifier(&lazy protocol witness table cache variable for type _ImpossibleActor and conformance _ImpossibleActor, a2, (uint64_t (*)(uint64_t))type metadata accessor for _ImpossibleActor, (uint64_t)&protocol conformance descriptor for _ImpossibleActor);
}

uint64_t type metadata accessor for _ImpossibleActor()
{
  return objc_opt_self();
}

uint64_t protocol witness for static GlobalActor.shared.getter in conformance _ImpossibleActor()
{
  if (one-time initialization token for shared != -1)
    swift_once();
  swift_beginAccess();
  return swift_retain();
}

uint64_t protocol witness for static GlobalActor.sharedUnownedExecutor.getter in conformance _ImpossibleActor()
{
  type metadata accessor for _ImpossibleActor();
  return static GlobalActor.sharedUnownedExecutor.getter();
}

uint64_t method lookup function for _ImpossibleActor()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of _ImpossibleActor.unownedExecutor.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 88))();
}

uint64_t base witness table accessor for Executor in _ImpossibleExecutor()
{
  return lazy protocol witness table accessor for type AnyTextSizingModifier and conformance AnyTextSizingModifier(&lazy protocol witness table cache variable for type _ImpossibleExecutor and conformance _ImpossibleExecutor, 255, (uint64_t (*)(uint64_t))type metadata accessor for _ImpossibleExecutor, (uint64_t)&protocol conformance descriptor for _ImpossibleExecutor);
}

BOOL static PhaseAnimator.Behavior.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t);

  v2 = *a1;
  v3 = *a2;
  if (*a1)
  {
    if (v3)
    {
      if (v2 != v3)
      {
        v4 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 80);
        swift_retain_n();
        swift_retain_n();
        LOBYTE(v4) = v4(v3);
        swift_release_n();
        swift_release_n();
        return v4 & 1;
      }
      return 1;
    }
    return 0;
  }
  return !v3;
}

double PhaseAnimator.init<A, B>(_:trigger:content:animation:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v16;
  double v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  double result;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v28 = a5;
  v29 = a6;
  v26 = a3;
  v27 = a4;
  v16 = *(_QWORD *)(a8 - 8);
  v17 = MEMORY[0x24BDAC7A8](a1);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v16 + 16))((char *)&v25 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0), a1, a8, v17);
  v19 = Array.init<A>(_:)();
  (*(void (**)(uint64_t, uint64_t))(v16 + 8))(a1, a8);
  AnyEquatable.init<A>(_:)(a2, a9, a13, v20, &v30);
  v21 = v26;
  *(_QWORD *)a7 = v19;
  *(_QWORD *)(a7 + 8) = v21;
  v22 = v28;
  *(_QWORD *)(a7 + 16) = v27;
  *(_QWORD *)(a7 + 24) = v22;
  v23 = v30;
  *(_QWORD *)(a7 + 32) = v29;
  *(_QWORD *)(a7 + 40) = v23;
  result = 0.0;
  *(_OWORD *)(a7 + 48) = 0u;
  *(_OWORD *)(a7 + 64) = 0u;
  return result;
}

double PhaseAnimator.init<A>(_:content:animation:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X7>, uint64_t a7@<X8>)
{
  uint64_t v13;
  double v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  double result;
  uint64_t v19;
  uint64_t v20;

  v20 = a5;
  v13 = *(_QWORD *)(a6 - 8);
  v14 = MEMORY[0x24BDAC7A8](a1);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v13 + 16))((char *)&v19 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v16, v14);
  v17 = Array.init<A>(_:)();
  (*(void (**)(uint64_t, uint64_t))(v13 + 8))(a1, a6);
  *(_QWORD *)a7 = v17;
  *(_QWORD *)(a7 + 8) = a2;
  *(_QWORD *)(a7 + 16) = a3;
  *(_QWORD *)(a7 + 24) = a4;
  *(_QWORD *)(a7 + 32) = v20;
  result = 0.0;
  *(_OWORD *)(a7 + 40) = 0u;
  *(_OWORD *)(a7 + 56) = 0u;
  *(_QWORD *)(a7 + 72) = 0;
  return result;
}

void PhaseAnimator.body.getter()
{
  uint64_t v0;

  v0 = type metadata accessor for Array();
  MEMORY[0x23B7C9C04](MEMORY[0x24BEE12E0], v0);
  if ((Collection.isEmpty.getter() & 1) != 0)
    type metadata accessor for PhaseAnimator.EmptyPhasesView();
  type metadata accessor for PhaseAnimator.StateTransitioningContainer();
}

void sub_2350A03FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,__int128 a31)
{
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v37;
  uint64_t v38;
  __int128 v39;

  static ViewBuilder.buildExpression<A>(_:)(v35 - 208, a1, &protocol witness table for PhaseAnimator<A, B>.StateTransitioningContainer);
  v37 = *(_QWORD *)(v35 - 112);
  v38 = *(_QWORD *)(v35 - 104);
  v39 = *(_OWORD *)(v35 - 128);
  *(_OWORD *)(v35 - 208) = *(_OWORD *)(v35 - 144);
  *(_OWORD *)(v35 - 192) = v39;
  *(_QWORD *)(v35 - 176) = v37;
  *(_QWORD *)(v35 - 168) = v38;
  static ViewBuilder.buildBlock<A>(_:)(v35 - 208, a1, (uint64_t)&a31);
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  *(_QWORD *)(v35 - 208) = v32;
  *(_QWORD *)(v35 - 200) = v31;
  *(_QWORD *)(v35 - 192) = v33;
  *(_QWORD *)(v35 - 184) = v34;
  type metadata accessor for PhaseAnimator.EmptyPhasesView();
}

void sub_2350A0494(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, ...)
{
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  va_list va;
  uint64_t v25;
  va_list va1;

  va_start(va1, a18);
  va_start(va, a18);
  v23 = va_arg(va1, _QWORD);
  v25 = va_arg(va1, _QWORD);
  v21 = type metadata accessor for ModifiedContent(0, a1, (uint64_t)&type metadata for _AppearanceActionModifier, a4);
  v23 = MEMORY[0x23B7C9C04](&protocol conformance descriptor for PhaseAnimator<A, B>.EmptyPhasesView, a1);
  v22 = MEMORY[0x23B7C9C04]("I{:\x1B̧\t", v21, (uint64_t *)va);
  static ViewBuilder.buildEither<A, B>(second:)((uint64_t)va1, v21, v18, v22, v19 - 208);
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  JUMPOUT(0x2350A051CLL);
}

void sub_2350A0564(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  type metadata accessor for ModifiedContent(255, a1, (uint64_t)&type metadata for _AppearanceActionModifier, a4);
  *(_QWORD *)(v8 - 144) = v7;
  *(_QWORD *)(v8 - 136) = v5;
  *(_QWORD *)(v8 - 128) = v4;
  *(_QWORD *)(v8 - 120) = v6;
  type metadata accessor for PhaseAnimator.StateTransitioningContainer();
}

uint64_t sub_2350A0594(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  _QWORD v17[2];
  _QWORD v18[44];

  v11 = type metadata accessor for _ConditionalContent(0, v4, a1, a4);
  v18[0] = MEMORY[0x23B7C9C04](&protocol conformance descriptor for PhaseAnimator<A, B>.EmptyPhasesView, v5);
  v18[1] = &protocol witness table for _AppearanceActionModifier;
  v17[0] = MEMORY[0x23B7C9C04]("I{:\x1B̧\t", v4, v18);
  v17[1] = &protocol witness table for PhaseAnimator<A, B>.StateTransitioningContainer;
  MEMORY[0x23B7C9C04](&protocol conformance descriptor for <> _ConditionalContent<A, B>, v11, v17);
  static ViewBuilder.buildBlock<A>(_:)(v10 - 208, v11, v16);
  return outlined consume of _ConditionalContent<ModifiedContent<PhaseAnimator<A, B>.EmptyPhasesView, _AppearanceActionModifier>, PhaseAnimator<A, B>.StateTransitioningContainer>.Storage<A, B>(v6, v7, v8, v9, v13, v14, v15);
}

uint64_t closure #1 in PhaseAnimator.body.getter()
{
  static os_log_type_t.fault.getter();
  if (one-time initialization token for runtimeIssuesLog != -1)
    swift_once();
  return os_log(_:dso:log:_:_:)();
}

void type metadata accessor for PhaseAnimator.StateTransitioningContainer()
{
  JUMPOUT(0x23B7C9B5CLL);
}

void type metadata accessor for PhaseAnimator.EmptyPhasesView()
{
  JUMPOUT(0x23B7C9B5CLL);
}

uint64_t outlined consume of _ConditionalContent<ModifiedContent<PhaseAnimator<A, B>.EmptyPhasesView, _AppearanceActionModifier>, PhaseAnimator<A, B>.StateTransitioningContainer>.Storage<A, B>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7)
{
  if ((a7 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    return swift_release();
  }
  else
  {
    outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed @escaping @callee_guaranteed (@unowned Bool) -> ()) -> ())?(a1);
    return outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed @escaping @callee_guaranteed (@unowned Bool) -> ()) -> ())?(a3);
  }
}

void static PhaseAnimator.StateTransitioningContainer._makeView(view:inputs:)()
{
  uint64_t v0;

  v0 = MEMORY[0x24BEE1328];
  type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for External<Bool>, MEMORY[0x24BEE1328], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BE09670]);
  lazy protocol witness table accessor for type External<PreferenceKeys> and conformance External<A>(&lazy protocol witness table cache variable for type External<Bool> and conformance External<A>, &lazy cache variable for type metadata for External<Bool>, v0);
  Attribute.init<A>(body:value:flags:update:)();
  AGCreateWeakAttribute();
  type metadata accessor for PhaseAnimator.StateTransitioningContainer.AnimationCompletion();
}

void sub_2350A089C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int CurrentAttribute;
  int v13;
  id v14;
  void *v15;
  id v16;
  uint64_t Context;
  uint64_t v18;
  int v19;
  uint64_t v20;
  __int128 v21;
  int v22;

  *(_QWORD *)(v7 - 304) = a1;
  v9 = type metadata accessor for Attribute();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v7 - 288, (uint64_t)partial apply for closure #1 in Attribute.init(value:), v7 - 320, a1, MEMORY[0x24BEE4078], v9, MEMORY[0x24BEE40A8], v10);
  v11 = AGCreateWeakAttribute();
  CurrentAttribute = AGGraphGetCurrentAttribute();
  v13 = *MEMORY[0x24BE096C0];
  *(_DWORD *)(v7 - 372) = *MEMORY[0x24BE096C0];
  if (CurrentAttribute == v13)
  {
    v14 = (id)AGSubgraphGetCurrent();
    if (!v14)
    {
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      goto LABEL_9;
    }
    v15 = v14;
    v16 = (id)AGSubgraphGetGraph();

  }
  else
  {
    v16 = (id)AGGraphGetAttributeGraph();
  }
  *(_QWORD *)(v7 - 392) = v5;
  Context = AGGraphGetContext();
  if (Context)
  {
    v18 = Context;
    swift_retain();

    swift_beginAccess();
    v19 = *(_DWORD *)(v18 + 68);
    v20 = swift_release();
    *(_DWORD *)(v7 - 256) = *(_DWORD *)(v7 - 384);
    v21 = *(_OWORD *)(v7 - 368);
    *(_DWORD *)(v7 - 252) = v21;
    *(_DWORD *)(v7 - 452) = v21;
    v22 = *(_DWORD *)(v7 - 348);
    *(_DWORD *)(v7 - 248) = v19;
    *(_DWORD *)(v7 - 244) = v22;
    *(_QWORD *)(v7 - 240) = v11;
    *(_QWORD *)(v7 - 384) = v6;
    *(_QWORD *)(v7 - 232) = v6;
    *(_QWORD *)(v7 - 200) = 0;
    *(_QWORD *)(v7 - 224) = 0;
    *(_QWORD *)(v7 - 216) = 0;
    *(_DWORD *)(v7 - 208) = 0;
    *(_BYTE *)(v7 - 192) = 1;
    *(_OWORD *)(v7 - 184) = xmmword_235260EF0;
    *(_DWORD *)(v7 - 168) = 0;
    *(_BYTE *)(v7 - 164) = 1;
    MEMORY[0x24BDAC7A8](v20);
    *(_QWORD *)(v7 - 288) = v4;
    *(_QWORD *)(v7 - 280) = v3;
    *(_QWORD *)(v7 - 272) = v2;
    *(_QWORD *)(v7 - 264) = v1;
    type metadata accessor for PhaseAnimator.StateTransitioningContainer.Child.Value();
  }
  __break(1u);
LABEL_9:
  JUMPOUT(0x2350A0ED0);
}

void closure #1 in static PhaseAnimator.StateTransitioningContainer._makeView(view:inputs:)()
{
  type metadata accessor for PhaseAnimator.StateTransitioningContainer.Child.Value();
}

uint64_t sub_2350A0F58(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[14];

  v2 = v1 + *(int *)(a1 + 52);
  v6[2] = a1;
  v3 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v2, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply, (uint64_t)v6, (uint64_t)&type metadata for Transaction, MEMORY[0x24BEE4078], v3, MEMORY[0x24BEE40A8], v4);
  return v6[4];
}

void closure #2 in static PhaseAnimator.StateTransitioningContainer._makeView(view:inputs:)()
{
  type metadata accessor for PhaseAnimator.StateTransitioningContainer.Child.Value();
}

uint64_t sub_2350A0FF4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[14];

  v2 = v1 + *(int *)(a1 + 56);
  v8[2] = a1;
  type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for UInt32?, MEMORY[0x24BEE44F0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1C68]);
  v4 = v3;
  v5 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v2, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply, (uint64_t)v8, v4, MEMORY[0x24BEE4078], v5, MEMORY[0x24BEE40A8], v6);
  return v8[4];
}

uint64_t static PhaseAnimator.StateTransitioningContainer.appearanceHandler(_:_:)(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  id v11;
  void *v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;

  if (AGGraphGetCurrentAttribute() == *MEMORY[0x24BE096C0])
  {
    v11 = (id)AGSubgraphGetCurrent();
    if (!v11)
      goto LABEL_8;
    v12 = v11;
    v13 = (id)AGSubgraphGetGraph();

  }
  else
  {
    v13 = (id)AGGraphGetAttributeGraph();
  }
  v14 = a5;
  if (AGGraphGetContext())
  {
    v15 = swift_allocObject();
    swift_retain();

    swift_weakInit();
    swift_release();
    v16 = swift_allocObject();
    *(_QWORD *)(v16 + 16) = a3;
    *(_QWORD *)(v16 + 24) = a4;
    *(_QWORD *)(v16 + 32) = v14;
    *(_QWORD *)(v16 + 40) = a6;
    *(_QWORD *)(v16 + 48) = v15;
    result = (uint64_t)partial apply for closure #1 in static PhaseAnimator.StateTransitioningContainer.appearanceHandler(_:_:);
    *(_QWORD *)(v16 + 56) = a1;
    *(_BYTE *)(v16 + 64) = a2 & 1;
    return result;
  }
  __break(1u);
LABEL_8:
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t closure #3 in static PhaseAnimator.StateTransitioningContainer._makeView(view:inputs:)(uint64_t a1, uint64_t *a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t OffsetAttribute2;
  int v23;
  int v24;
  int v25;
  uint64_t v27;
  int v28;
  uint64_t v29;
  int v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  int v39;

  v12 = *a2;
  v25 = *((_DWORD *)a2 + 2);
  v13 = a2[2];
  v14 = a2[4];
  v15 = a2[5];
  v16 = a2[6];
  v17 = a2[7];
  v18 = a2[8];
  v19 = a2[9];
  v23 = *((_DWORD *)a2 + 20);
  v24 = *((_DWORD *)a2 + 6);
  v20 = *(_QWORD *)(*(_QWORD *)(a6 - 8) + 64);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v20)
    closure #1 in closure #3 in static PhaseAnimator.StateTransitioningContainer._makeView(view:inputs:)(1, a5, a6, a7, a8, (uint64_t (*)(_QWORD, _QWORD *))type metadata accessor for PhaseAnimator.StateTransitioningContainer.Child.Value, (uint64_t)partial apply for closure #1 in static PointerOffset.of(_:));
  OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
  _GraphValue.init(_:)(OffsetAttribute2, &v39);
  v27 = v12;
  v28 = v25;
  v29 = v13;
  v30 = v24;
  v31 = a3;
  v32 = v14;
  v33 = v15;
  v34 = v16;
  v35 = v17;
  v36 = v18;
  v37 = v19;
  v38 = v23;
  (*(void (**)(int *, uint64_t *, uint64_t, uint64_t))(a8 + 24))(&v39, &v27, a6, a8);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

void PhaseAnimator.StateTransitioningContainer.Child.view.getter()
{
  type metadata accessor for PhaseAnimator.StateTransitioningContainer();
}

uint64_t sub_2350A13BC()
{
  uint64_t v0;
  uint64_t Value;
  uint64_t v2;
  uint64_t v3;
  __int128 v5;

  Value = AGGraphGetValue();
  v3 = *(_QWORD *)(Value + 32);
  v2 = *(_QWORD *)(Value + 40);
  v5 = *(_OWORD *)(Value + 16);
  *(_OWORD *)v0 = *(_OWORD *)Value;
  *(_OWORD *)(v0 + 16) = v5;
  *(_QWORD *)(v0 + 32) = v3;
  *(_QWORD *)(v0 + 40) = v2;
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  return swift_retain();
}

void protocol witness for static View._makeView(view:inputs:) in conformance PhaseAnimator<A, B>.StateTransitioningContainer()
{
  static PhaseAnimator.StateTransitioningContainer._makeView(view:inputs:)();
}

uint64_t PhaseAnimator.StateTransitioningContainer.Child.clampedIndex.getter()
{
  uint64_t v0;

  if (*(_BYTE *)(v0 + 64) != 1 || *(_QWORD *)(v0 + 56) == 0)
    PhaseAnimator.StateTransitioningContainer.Child.view.getter();
  return 0;
}

uint64_t static PhaseAnimator.StateTransitioningContainer.Child.EndlessLoopState.== infix(_:_:)(uint64_t a1, char a2, uint64_t a3, char a4)
{
  _BOOL4 v5;
  unsigned int v6;
  int v7;

  v5 = (a4 & 1) == 0 && a1 == a3;
  v6 = a4 & 1;
  if (a3)
    v7 = a4 & 1;
  else
    v7 = 0;
  if (a3)
    v6 = 0;
  if (a1)
    v6 = v7;
  if ((a2 & 1) != 0)
    return v6;
  else
    return v5;
}

Swift::Void __swiftcall PhaseAnimator.StateTransitioningContainer.Child.updateValue()()
{
  uint64_t v0;
  uint64_t v1;
  int v2;
  int v3;

  v1 = v0;
  v2 = *(_DWORD *)(v0 + 48);
  v3 = *(_DWORD *)AGGraphGetValue() >> 1;
  if (v3 != v2)
  {
    *(_DWORD *)(v1 + 48) = v3;
    *(_QWORD *)(v1 + 32) = 0;
    outlined consume of Transaction?(*(_QWORD *)(v1 + 72));
    *(_QWORD *)(v1 + 72) = 1;
    *(_QWORD *)(v1 + 56) = 0;
    *(_BYTE *)(v1 + 64) = 1;
    ++*(_QWORD *)(v1 + 40);
  }
  type metadata accessor for PhaseAnimator.StateTransitioningContainer();
}

void sub_2350A15D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, __int128 a15, __int128 a16, __int128 a17)
{
  uint64_t v17;
  __int128 *Value;
  char v19;
  char v20;
  __int128 v21;
  __int128 v22;
  int Attribute;
  int v24;
  _BYTE *v25;
  char v26;
  uint64_t v27;
  int v28;
  uint64_t v29;

  Value = (__int128 *)AGGraphGetValue();
  v20 = v19;
  v22 = Value[1];
  v21 = Value[2];
  a15 = *Value;
  a16 = v22;
  a17 = v21;
  Attribute = AGWeakAttributeGetAttribute();
  v24 = *MEMORY[0x24BE096C0];
  if (Attribute == *MEMORY[0x24BE096C0])
  {
    outlined retain of PhaseAnimator<A, B>.StateTransitioningContainer((uint64_t)&a15);
  }
  else
  {
    v25 = (_BYTE *)AGGraphGetValue();
    if ((v26 & 1) != 0)
    {
      if (*v25 == 1)
        type metadata accessor for PhaseAnimator.Behavior();
      outlined retain of PhaseAnimator<A, B>.StateTransitioningContainer((uint64_t)&a15);
      *(_QWORD *)(v17 + 32) = 0;
      outlined consume of Transaction?(*(_QWORD *)(v17 + 72));
      *(_QWORD *)(v17 + 72) = 1;
      *(_QWORD *)(v17 + 56) = 0;
      *(_BYTE *)(v17 + 64) = 1;
      ++*(_QWORD *)(v17 + 40);
    }
    else
    {
      outlined retain of PhaseAnimator<A, B>.StateTransitioningContainer((uint64_t)&a15);
    }
    if ((v20 & 1) != 0)
    {
      v27 = *(_QWORD *)(v17 + 56);
      v28 = *(unsigned __int8 *)(v17 + 64);
      *(_QWORD *)(v17 + 56) = 0;
      *(_BYTE *)(v17 + 64) = 1;
      if (v28 == 1)
      {
        if (v27)
          type metadata accessor for PhaseAnimator.Behavior();
      }
    }
    if (*(_QWORD *)(v17 + 72) != 1)
      type metadata accessor for PhaseAnimator.Behavior();
    v29 = *(_QWORD *)(v17 + 72);
    *(_QWORD *)(v17 + 72) = *((_QWORD *)&a17 + 1);
    swift_retain();
    outlined consume of Transaction?(v29);
    if (AGWeakAttributeGetAttribute() != v24)
      type metadata accessor for PhaseAnimator.StateTransitioningContainer.AnimationCompletion();
  }
  $defer #1 <A, B>() in PhaseAnimator.StateTransitioningContainer.Child.updateValue()(v17);
}

uint64_t sub_2350A197C()
{
  uint64_t v1;

  return outlined release of PhaseAnimator<A, B>.StateTransitioningContainer((uint64_t)&v1);
}

void $defer #1 <A, B>() in PhaseAnimator.StateTransitioningContainer.Child.updateValue()(uint64_t a1)
{
  uint64_t v1;

  MEMORY[0x24BDAC7A8](a1);
  MEMORY[0x24BDAC7A8](v1);
  type metadata accessor for PhaseAnimator.StateTransitioningContainer.Child.Value();
}

void sub_2350A1A8C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  char v10;
  int v11;
  char v12;
  __int128 v13;
  uint64_t v14;

  *(_QWORD *)(v7 - 304) = a1;
  *(_QWORD *)(v7 - 296) = *(_QWORD *)(a1 - 8);
  MEMORY[0x24BDAC7A8](a1);
  *(_QWORD *)(v7 - 336) = *(_QWORD *)(v2 + 16);
  *(_QWORD *)(v7 - 328) = *(_QWORD *)(v2 + 8);
  v8 = *(_DWORD *)(v6 + 48);
  v9 = *(_QWORD *)(v6 + 56);
  v10 = *(_BYTE *)(v6 + 64);
  v11 = *(_DWORD *)(v6 + 88);
  v12 = *(_BYTE *)(v6 + 92);
  v13 = *(_OWORD *)(v6 + 16);
  *(_OWORD *)(v7 - 208) = *(_OWORD *)v6;
  *(_OWORD *)(v7 - 192) = v13;
  *(_OWORD *)(v7 - 176) = *(_OWORD *)(v6 + 32);
  *(_DWORD *)(v7 - 160) = v8;
  v14 = v7 - 208;
  *(_QWORD *)(v14 + 56) = v9;
  *(_BYTE *)(v7 - 144) = v10;
  *(_OWORD *)(v14 + 72) = *(_OWORD *)(v6 + 72);
  *(_DWORD *)(v7 - 120) = v11;
  *(_BYTE *)(v7 - 116) = v12;
  *(_QWORD *)(v7 - 240) = v5;
  *(_QWORD *)(v7 - 232) = v4;
  *(_QWORD *)(v7 - 224) = v1;
  *(_QWORD *)(v7 - 216) = v3;
  type metadata accessor for PhaseAnimator.StateTransitioningContainer.Child();
}

void sub_2350A1B34()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  PhaseAnimator.StateTransitioningContainer.Child.clampedIndex.getter();
  Array.subscript.getter();
  (*(void (**)(uint64_t))(v5 - 328))(v3);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 312) + 8))(v3, v1);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 320) + 32))(v2, v4, v0);
  *(_QWORD *)(v5 - 208) = v1;
  *(_QWORD *)(v5 - 200) = v0;
  v6 = *(_QWORD *)(v5 - 344);
  *(_QWORD *)(v5 - 192) = *(_QWORD *)(v5 - 352);
  *(_QWORD *)(v5 - 184) = v6;
  type metadata accessor for PhaseAnimator.StateTransitioningContainer.Child.Value();
}

uint64_t sub_2350A1BD0(uint64_t a1)
{
  uint64_t v1;
  int v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)(v5 + *(int *)(a1 + 52)) = v1;
  v7 = v5 + *(int *)(a1 + 56);
  *(_DWORD *)v7 = v2;
  *(_BYTE *)(v7 + 4) = v3;
  *(_QWORD *)(v6 - 256) = v4;
  *(_QWORD *)(v6 - 248) = MEMORY[0x23B7C9C04](&protocol conformance descriptor for PhaseAnimator<A, B>.StateTransitioningContainer.Child, v4);
  swift_retain();
  v8 = *(_QWORD *)(v6 - 304);
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v5, (uint64_t)partial apply for closure #1 in StatefulRule.value.setter, v6 - 272, v8, MEMORY[0x24BEE4078], MEMORY[0x24BEE4AE0] + 8, MEMORY[0x24BEE40A8], v9);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 296) + 8))(v5, v8);
}

Swift::Void __swiftcall PhaseAnimator.StateTransitioningContainer.Child.advance(from:)(Swift::Int from)
{
  PhaseAnimator.StateTransitioningContainer.Child.view.getter();
}

uint64_t sub_2350A1D4C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  v2 = *(_QWORD *)(v1 - 136);
  swift_release();
  swift_release();
  swift_release();
  v3 = MEMORY[0x23B7C6268](v2, *(_QWORD *)(v0 + 16));
  result = swift_bridgeObjectRelease();
  if (v3 >= 2)
    PhaseAnimator.StateTransitioningContainer.Child.view.getter();
  return result;
}

void sub_2350A1EF8()
{
  uint64_t v0;
  Swift::Int v1;
  uint64_t v2;
  Swift::Int v3;
  uint64_t v4;

  swift_release();
  swift_release();
  swift_release();
  v2 = MEMORY[0x23B7C6268](v4, v0);
  swift_bridgeObjectRelease();
  if (v1 >= v2)
    v3 = 0;
  else
    v3 = v1;
  PhaseAnimator.StateTransitioningContainer.Child.advance(to:)(v3);
}

Swift::Void __swiftcall PhaseAnimator.StateTransitioningContainer.Child.advance(to:)(Swift::Int to)
{
  int *v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int v21;
  _QWORD v22[4];
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  int v35;
  char *v36;
  int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  char v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  char v53;

  MEMORY[0x24BDAC7A8](to);
  v5 = (char *)v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *((_QWORD *)v1 + 7);
  v7 = *((unsigned __int8 *)v1 + 64);
  if (v7 == 1)
  {
    if (!v6)
    {
LABEL_6:
      v36 = v5;
      v22[2] = v3;
      v8 = v1[1];
      v9 = v1[2];
      v10 = v1[3];
      v11 = v1[4];
      v12 = v1[5];
      v13 = v1[6];
      v14 = v1[7];
      v16 = *((_QWORD *)v1 + 4);
      v15 = *((_QWORD *)v1 + 5);
      v17 = v1[12];
      v18 = *((_QWORD *)v1 + 9);
      v19 = *((_QWORD *)v1 + 10);
      v20 = v1[22];
      v21 = *((unsigned __int8 *)v1 + 92);
      v29 = *v1;
      v37 = v29;
      v38 = v8;
      v28 = v8;
      v27 = v9;
      v39 = v9;
      v40 = v10;
      v26 = v10;
      v35 = v11;
      v41 = v11;
      v42 = v12;
      v34 = v12;
      v25 = v13;
      v43 = v13;
      v44 = v14;
      v24 = v14;
      v45 = v16;
      v46 = v15;
      v22[3] = v15;
      v23 = v17;
      v47 = v17;
      v48 = v6;
      v49 = v7;
      v33 = v18;
      v50 = v18;
      v51 = v19;
      v32 = v19;
      v31 = v20;
      v52 = v20;
      v30 = v21;
      v53 = v21;
      PhaseAnimator.StateTransitioningContainer.Child.view.getter();
    }
  }
  else
  {
    if (v6 != to)
      goto LABEL_6;
    *((_QWORD *)v1 + 7) = 1;
    *((_BYTE *)v1 + 64) = 1;
    *((_QWORD *)v1 + 4) = 0;
  }
}

void closure #1 in PhaseAnimator.StateTransitioningContainer.Child.advance(to:)()
{
  type metadata accessor for PhaseAnimator.StateTransitioningContainer.Child();
}

uint64_t sub_2350A284C()
{
  _QWORD *v0;

  *v0 = *(_QWORD *)AGGraphGetValue();
  return swift_retain();
}

uint64_t closure #2 in PhaseAnimator.StateTransitioningContainer.Child.advance(to:)(char a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v16;

  if (one-time initialization token for _lock != -1)
    swift_once();
  v16 = static Update._lock;
  _MovableLockLock(static Update._lock);
  specialized static Update.begin()();
  closure #1 in closure #2 in PhaseAnimator.StateTransitioningContainer.Child.advance(to:)(a2, a3, a4, a1 & 1, a5, a6, a7, a8);
  static Update.end()();
  return _MovableLockUnlock(v16);
}

uint64_t closure #1 in closure #2 in PhaseAnimator.StateTransitioningContainer.Child.advance(to:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  int v18;

  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    v16 = result;
    swift_beginAccess();
    if (*(_BYTE *)(v16 + 128) == 1)
    {
      v17 = swift_allocObject();
      *(_QWORD *)(v17 + 16) = a5;
      *(_QWORD *)(v17 + 24) = a6;
      *(_QWORD *)(v17 + 32) = a7;
      *(_QWORD *)(v17 + 40) = a8;
      *(_QWORD *)(v17 + 48) = a2;
      *(_QWORD *)(v17 + 56) = a3;
      *(_BYTE *)(v17 + 64) = a4 & 1;
      v18 = _threadTransactionID();
      swift_retain();
      specialized GraphHost.asyncTransaction<A>(_:id:mutation:style:mayDeferUpdate:)(0, v18, partial apply for closure #1 in closure #1 in closure #2 in PhaseAnimator.StateTransitioningContainer.Child.advance(to:), v17, 1, 1);
      swift_release();
      return swift_release_n();
    }
    else
    {
      return swift_release();
    }
  }
  return result;
}

uint64_t closure #1 in closure #1 in closure #2 in PhaseAnimator.StateTransitioningContainer.Child.advance(to:)()
{
  uint64_t result;

  result = AGWeakAttributeGetAttribute();
  if ((_DWORD)result != *MEMORY[0x24BE096C0])
  {
    MEMORY[0x24BDAC7A8](result);
    type metadata accessor for PhaseAnimator.StateTransitioningContainer.AnimationCompletion();
  }
  return result;
}

uint64_t closure #4 in PhaseAnimator.StateTransitioningContainer.Child.advance(to:)()
{
  uint64_t result;

  result = AGWeakAttributeGetAttribute();
  if ((_DWORD)result != *MEMORY[0x24BE096C0])
  {
    MEMORY[0x24BDAC7A8](result);
    type metadata accessor for PhaseAnimator.StateTransitioningContainer.AnimationCompletion();
  }
  return result;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance PhaseAnimator<A, B>.StateTransitioningContainer.Child.EndlessLoopState(uint64_t a1, uint64_t a2)
{
  return static PhaseAnimator.StateTransitioningContainer.Child.EndlessLoopState.== infix(_:_:)(*(_QWORD *)a1, *(_BYTE *)(a1 + 8), *(_QWORD *)a2, *(_BYTE *)(a2 + 8));
}

void protocol witness for static StatefulRule.initialValue.getter in conformance PhaseAnimator<A, B>.StateTransitioningContainer.Child()
{
  type metadata accessor for PhaseAnimator.StateTransitioningContainer.Child.Value();
}

uint64_t sub_2350A2D08(uint64_t a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 56))(v1, 1, 1, a1);
}

Swift::Void __swiftcall PhaseAnimator.StateTransitioningContainer.TransactionRule.updateValue()()
{
  uint64_t Value;
  int v1;
  char v2;
  int v3;

  AGGraphGetValue();
  AGGraphGetValue();
  type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for UInt32?, MEMORY[0x24BEE44F0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1C68]);
  Value = AGGraphGetValue();
  v1 = *(_DWORD *)Value;
  v2 = *(_BYTE *)(Value + 4);
  swift_retain();
  swift_retain();
  if ((v2 & 1) == 0)
  {
    AGGraphClearUpdate();
    v3 = *(_DWORD *)AGGraphGetValue();
    AGGraphSetUpdate();
    if (v3 == v1)
    {
      swift_release();
      swift_retain();
    }
  }
  AGGraphSetOutputValue();
  swift_release();
  swift_release();
}

void protocol witness for StatefulRule.updateValue() in conformance PhaseAnimator<A, B>.StateTransitioningContainer.TransactionRule()
{
  PhaseAnimator.StateTransitioningContainer.TransactionRule.updateValue()();
}

uint64_t PhaseAnimator.StateTransitioningContainer.VisibilityMutation.apply()()
{
  uint64_t result;

  result = AGWeakAttributeGetAttribute();
  if ((_DWORD)result != *MEMORY[0x24BE096C0])
    return AGGraphSetValue();
  return result;
}

uint64_t PhaseAnimator.StateTransitioningContainer.VisibilityMutation.combine<A>(with:)(uint64_t a1)
{
  uint64_t v1;
  double v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  int Attribute;
  int v7;
  BOOL v8;
  int v9;
  BOOL v10;
  _BOOL4 v11;
  int v12;
  uint64_t result;
  int v14;
  _BYTE v16[32];

  v2 = MEMORY[0x24BDAC7A8](a1);
  (*(void (**)(_BYTE *, double))(v4 + 16))(&v16[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)], v2);
  if ((swift_dynamicCast() & 1) == 0)
    return 0;
  v5 = v16[16];
  Attribute = AGWeakAttributeGetAttribute();
  v7 = *MEMORY[0x24BE096C0];
  v8 = Attribute == *MEMORY[0x24BE096C0];
  v9 = AGWeakAttributeGetAttribute();
  v10 = v9 == v7;
  v11 = v9 == v7;
  if (v8)
  {
    if (v9 == v7)
    {
LABEL_14:
      *(_BYTE *)(v1 + 8) = v5;
      return 1;
    }
    return 0;
  }
  v12 = v9;
  result = 0;
  if (v10)
    v12 = 0;
  if (Attribute == v7)
    v14 = 0;
  else
    v14 = Attribute;
  if (!v11 && v14 == v12)
    goto LABEL_14;
  return result;
}

uint64_t protocol witness for GraphMutation.apply() in conformance PhaseAnimator<A, B>.StateTransitioningContainer.VisibilityMutation()
{
  return PhaseAnimator.StateTransitioningContainer.VisibilityMutation.apply()();
}

uint64_t protocol witness for GraphMutation.combine<A>(with:) in conformance PhaseAnimator<A, B>.StateTransitioningContainer.VisibilityMutation(uint64_t a1)
{
  return PhaseAnimator.StateTransitioningContainer.VisibilityMutation.combine<A>(with:)(a1);
}

uint64_t closure #1 in static PhaseAnimator.StateTransitioningContainer.appearanceHandler(_:_:)()
{
  uint64_t v0;

  if (one-time initialization token for _lock != -1)
    swift_once();
  v0 = static Update._lock;
  _MovableLockLock(static Update._lock);
  specialized static Update.begin()();
  closure #1 in closure #1 in static PhaseAnimator.StateTransitioningContainer.appearanceHandler(_:_:)();
  static Update.end()();
  return _MovableLockUnlock(v0);
}

uint64_t closure #1 in closure #1 in static PhaseAnimator.StateTransitioningContainer.appearanceHandler(_:_:)()
{
  uint64_t result;

  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    if (_threadTransactionData())
    {
      type metadata accessor for PropertyList.Element();
      swift_unknownObjectRetain();
      swift_dynamicCastClassUnconditional();
    }
    type metadata accessor for PhaseAnimator.StateTransitioningContainer.VisibilityMutation();
  }
  return result;
}

uint64_t PhaseAnimator.EmptyPhasesView.body.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for ImageProviderBox<Image.NamedImageProvider>, (uint64_t (*)(void))lazy protocol witness table accessor for type Image.NamedImageProvider and conformance Image.NamedImageProvider, (uint64_t)&type metadata for Image.NamedImageProvider, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ImageProviderBox);
  v2 = swift_allocObject();
  *(_QWORD *)(v2 + 16) = 0xD00000000000001BLL;
  *(_QWORD *)(v2 + 24) = 0x80000002352E6F70;
  *(_DWORD *)(v2 + 32) = 0;
  *(_BYTE *)(v2 + 36) = 1;
  *(_OWORD *)(v2 + 40) = xmmword_2352AA850;
  *(_QWORD *)(v2 + 56) = 0xD00000000000001BLL;
  *(_QWORD *)(v2 + 64) = 0x80000002352E6F70;
  *(_OWORD *)(v2 + 72) = xmmword_235260F00;
  *(_BYTE *)(v2 + 88) = 0;
  type metadata accessor for FontBox<Font.SystemProvider>(0, (unint64_t *)&lazy cache variable for type metadata for FontBox<Font.SystemProvider>, (uint64_t (*)(void))lazy protocol witness table accessor for type Font.SystemProvider and conformance Font.SystemProvider, (uint64_t)&type metadata for Font.SystemProvider, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for FontBox);
  v3 = swift_allocObject();
  *(_QWORD *)(v3 + 16) = 0x4040000000000000;
  *(_QWORD *)(v3 + 24) = 0;
  *(_BYTE *)(v3 + 32) = 1;
  *(_WORD *)(v3 + 33) = 3588;
  *(_QWORD *)(v3 + 40) = 0;
  *(_BYTE *)(v3 + 48) = 1;
  KeyPath = swift_getKeyPath();
  if (one-time initialization token for red != -1)
    swift_once();
  v5 = static Color.red;
  v6 = one-time initialization token for yellow;
  swift_retain();
  if (v6 != -1)
    swift_once();
  v7 = static Color.yellow;
  *(_QWORD *)a1 = v2;
  *(_QWORD *)(a1 + 8) = KeyPath;
  *(_QWORD *)(a1 + 16) = v3;
  *(_BYTE *)(a1 + 24) = 15;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_BYTE *)(a1 + 64) = 1;
  *(_QWORD *)(a1 + 72) = v5;
  *(_QWORD *)(a1 + 80) = v7;
  *(_BYTE *)(a1 + 88) = 15;
  return swift_retain();
}

void View.phaseAnimator<A, B, C, D>(_:trigger:content:animation:)()
{
  type metadata accessor for PhaseAnimator();
}

#error "2350A3484: call analysis failed (funcsize=19)"

void sub_2350A3488()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;

  v1 = *(_QWORD *)(v0 - 144);
  v2 = *(_QWORD *)(v0 - 104);
  v3 = *(_OWORD *)(v0 - 136);
  v5 = *(_OWORD *)(v0 - 120);
  v4 = *(_OWORD *)(v0 - 160);
  *(_OWORD *)(v0 - 176) = *(_OWORD *)(v0 - 176);
  *(_OWORD *)(v0 - 160) = v4;
  *(_QWORD *)(v0 - 144) = v1;
  *(_OWORD *)(v0 - 136) = v3;
  *(_OWORD *)(v0 - 120) = v5;
  *(_QWORD *)(v0 - 104) = v2;
  type metadata accessor for CustomModifier();
}

uint64_t sub_2350A34CC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  View.modifier<A>(_:)(v3 - 176, v1, a1, v2);
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return swift_release();
}

void closure #1 in View.phaseAnimator<A, B, C, D>(_:trigger:content:animation:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  double v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  uint64_t v50;
  uint64_t v51;
  __int128 v52;
  __int128 v53;
  uint64_t v54;
  __int128 v55;
  __int128 v56;
  uint64_t v57;
  __int128 v58;
  __int128 v59;
  uint64_t v60;
  __int128 v61;
  __int128 v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;

  v51 = a8;
  v40 = a7;
  *(_QWORD *)&v49 = a6;
  *(_QWORD *)&v48 = a5;
  *(_QWORD *)&v47 = a4;
  *(_QWORD *)&v46 = a3;
  v50 = a9;
  v43 = a17;
  v42 = a16;
  v38 = a15;
  v39 = a13;
  v19 = *(_QWORD *)(a11 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v21 = (char *)&v38 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v44 = v21;
  v23 = MEMORY[0x24BDAC7A8](v22);
  v45 = (uint64_t)&v38 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(double))(v25 + 16))(v23);
  (*(void (**)(char *, uint64_t, uint64_t))(v19 + 16))(v21, a2, a11);
  v26 = (_QWORD *)swift_allocObject();
  v27 = v51;
  v26[2] = a7;
  v26[3] = v27;
  v26[4] = a10;
  v26[5] = a11;
  v41 = a12;
  v26[6] = a12;
  v26[7] = a13;
  v26[8] = a14;
  v26[9] = a15;
  v28 = v42;
  v29 = v43;
  v26[10] = v42;
  v26[11] = v29;
  v30 = v47;
  v26[12] = v46;
  v26[13] = v30;
  v31 = (_QWORD *)swift_allocObject();
  v31[2] = v40;
  v31[3] = v27;
  v31[4] = a10;
  v31[5] = a11;
  v32 = v39;
  v31[6] = a12;
  v31[7] = v32;
  v33 = v38;
  v31[8] = a14;
  v31[9] = v33;
  v31[10] = v28;
  v31[11] = v29;
  v34 = v49;
  v31[12] = v48;
  v31[13] = v34;
  swift_retain();
  swift_retain();
  v35 = v51;
  PhaseAnimator.init<A, B>(_:trigger:content:animation:)(v45, (uint64_t)v44, (uint64_t)partial apply for closure #1 in closure #1 in View.phaseAnimator<A, B, C, D>(_:trigger:content:animation:), (uint64_t)v26, (uint64_t)partial apply for closure #2 in closure #1 in View.phaseAnimator<A, B, C, D>(_:trigger:content:animation:), (uint64_t)v31, (uint64_t)&v58, a10, a11, v36, v37, v33, v28);
  v47 = v58;
  v46 = v59;
  v52 = v58;
  v53 = v59;
  v54 = v60;
  v48 = v61;
  v55 = v61;
  v49 = v62;
  v56 = v62;
  v57 = v63;
  v64 = v35;
  v65 = v41;
  v66 = a14;
  v67 = v29;
  type metadata accessor for PhaseAnimator();
}

uint64_t sub_2350A3808(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;

  v3 = MEMORY[0x23B7C9C04](&protocol conformance descriptor for PhaseAnimator<A, B>, a1);
  static ViewBuilder.buildExpression<A>(_:)(v1 - 336, a1, v3);
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  v4 = *(_QWORD *)(v1 - 144);
  v5 = *(_QWORD *)(v1 - 104);
  v6 = *(_OWORD *)(v1 - 176);
  v7 = *(_OWORD *)(v1 - 160);
  *(_OWORD *)(v1 - 400) = v6;
  *(_OWORD *)(v1 - 416) = v7;
  *(_OWORD *)(v1 - 256) = v6;
  *(_OWORD *)(v1 - 240) = v7;
  *(_QWORD *)(v1 - 224) = v4;
  v8 = *(_OWORD *)(v1 - 136);
  *(_OWORD *)(v1 - 384) = v8;
  *(_OWORD *)(v1 - 216) = v8;
  v9 = *(_OWORD *)(v1 - 120);
  *(_OWORD *)(v1 - 352) = v9;
  *(_OWORD *)(v1 - 200) = v9;
  *(_QWORD *)(v1 - 184) = v5;
  static ViewBuilder.buildBlock<A>(_:)(v1 - 256, a1, *(_QWORD *)(v1 - 360));
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t closure #1 in closure #1 in View.phaseAnimator<A, B, C, D>(_:trigger:content:animation:)@<X0>(uint64_t a1@<X0>, void (*a2)(uint64_t, uint64_t)@<X1>, uint64_t a3@<X7>, uint64_t a4@<X8>, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(char *, uint64_t);
  uint64_t v23;

  v13 = *(_QWORD *)(a3 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v15 = (char *)&v23 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v16);
  v18 = (char *)&v23 - v17;
  v20 = PlaceholderContentView.init()(v19);
  a2(v20, a1);
  static ViewBuilder.buildExpression<A>(_:)(v15, a3, a9);
  v21 = *(void (**)(char *, uint64_t))(v13 + 8);
  v21(v15, a3);
  static ViewBuilder.buildBlock<A>(_:)((uint64_t)v18, a3, a4);
  return ((uint64_t (*)(char *, uint64_t))v21)(v18, a3);
}

void type metadata accessor for PhaseAnimator()
{
  JUMPOUT(0x23B7C9B5CLL);
}

void View.phaseAnimator<A, B, C>(_:content:animation:)()
{
  type metadata accessor for PhaseAnimator();
}

#error "2350A3B08: call analysis failed (funcsize=17)"

void sub_2350A3B0C()
{
  type metadata accessor for CustomModifier();
}

uint64_t sub_2350A3B50(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  View.modifier<A>(_:)(&v4, v1, a1, v2);
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return swift_release();
}

void closure #1 in View.phaseAnimator<A, B, C>(_:content:animation:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  double v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;
  __int128 v43;
  __int128 v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;

  *(_QWORD *)&v32 = a5;
  *(_QWORD *)&v31 = a4;
  *(_QWORD *)&v29 = a3;
  v28 = a2;
  v33 = a9;
  v26 = a11;
  v17 = MEMORY[0x24BDAC7A8](a1);
  *(_QWORD *)&v30 = (char *)&v25 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(double))(v19 + 16))(v17);
  v20 = (_QWORD *)swift_allocObject();
  v20[2] = a6;
  v20[3] = a7;
  v27 = a7;
  v20[4] = a8;
  v20[5] = a10;
  v20[6] = a11;
  v20[7] = a12;
  v20[8] = a13;
  v20[9] = a14;
  v21 = v29;
  v20[10] = v28;
  v20[11] = v21;
  v22 = (_QWORD *)swift_allocObject();
  v22[2] = a6;
  v22[3] = a7;
  v22[4] = a8;
  v22[5] = a10;
  v22[6] = v26;
  v22[7] = a12;
  v22[8] = a13;
  v22[9] = a14;
  v23 = v32;
  v22[10] = v31;
  v22[11] = v23;
  swift_retain();
  swift_retain();
  v24 = v27;
  PhaseAnimator.init<A>(_:content:animation:)(v30, (uint64_t)partial apply for closure #1 in closure #1 in View.phaseAnimator<A, B, C>(_:content:animation:), (uint64_t)v20, (uint64_t)partial apply for closure #2 in closure #1 in View.phaseAnimator<A, B, C>(_:content:animation:), (uint64_t)v22, a8, (uint64_t)&v40);
  v30 = v40;
  v29 = v41;
  v34 = v40;
  v35 = v41;
  v36 = v42;
  v31 = v43;
  v37 = v43;
  v32 = v44;
  v38 = v44;
  v39 = v45;
  v46 = v24;
  v47 = a10;
  v48 = a12;
  v49 = a14;
  type metadata accessor for PhaseAnimator();
}

uint64_t sub_2350A3DCC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;

  v3 = MEMORY[0x23B7C9C04](&protocol conformance descriptor for PhaseAnimator<A, B>, a1);
  static ViewBuilder.buildExpression<A>(_:)(v1 - 336, a1, v3);
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  v4 = *(_QWORD *)(v1 - 144);
  v5 = *(_QWORD *)(v1 - 104);
  v6 = *(_OWORD *)(v1 - 176);
  v7 = *(_OWORD *)(v1 - 160);
  *(_OWORD *)(v1 - 400) = v6;
  *(_OWORD *)(v1 - 416) = v7;
  *(_OWORD *)(v1 - 256) = v6;
  *(_OWORD *)(v1 - 240) = v7;
  *(_QWORD *)(v1 - 224) = v4;
  v8 = *(_OWORD *)(v1 - 136);
  *(_OWORD *)(v1 - 384) = v8;
  *(_OWORD *)(v1 - 216) = v8;
  v9 = *(_OWORD *)(v1 - 120);
  *(_OWORD *)(v1 - 368) = v9;
  *(_OWORD *)(v1 - 200) = v9;
  *(_QWORD *)(v1 - 184) = v5;
  static ViewBuilder.buildBlock<A>(_:)(v1 - 256, a1, *(_QWORD *)(v1 - 344));
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t associated type witness table accessor for View.Body : View in PhaseAnimator<A, B>()
{
  return associated type witness table accessor for View.Body : View in PhaseAnimator<A, B>();
}

{
  return swift_getOpaqueTypeConformance2();
}

uint64_t destroy for PhaseAnimator()
{
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t initializeWithCopy for PhaseAnimator(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v3;
  v4 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v4;
  v5 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v5;
  v6 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v6;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

_QWORD *assignWithCopy for PhaseAnimator(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;

  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = a2[2];
  a1[1] = a2[1];
  a1[2] = v4;
  swift_retain();
  swift_release();
  v5 = a2[4];
  a1[3] = a2[3];
  a1[4] = v5;
  swift_retain();
  swift_release();
  a1[5] = a2[5];
  swift_retain();
  swift_release();
  a1[6] = a2[6];
  a1[7] = a2[7];
  swift_retain();
  swift_release();
  a1[8] = a2[8];
  a1[9] = a2[9];
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for PhaseAnimator(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_bridgeObjectRelease();
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  swift_release();
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  swift_release();
  v4 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v4;
  swift_release();
  v5 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v5;
  swift_release();
  return a1;
}

uint64_t sub_2350A4248(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  int ShouldRecordTree;
  void (*v15)(_QWORD *__return_ptr, int *, uint64_t *);
  uint64_t result;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  uint64_t v26;
  _QWORD *v27;
  int v28;
  int v29;
  _QWORD v30[2];
  int v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  int v35;
  int v36;
  int v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  int v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  _DWORD v48[74];

  type metadata accessor for _GraphValue(0, a1, a3, a4);
  _GraphValue.subscript.getter((void (*)(uint64_t))partial apply for closure #1 in static CustomModifier._makeView(modifier:inputs:body:), v4, &v31);
  v28 = v31;
  v7 = v5[11];
  v8 = v5[13];
  v24 = *(_DWORD *)(v6 - 168);
  v22 = *(_DWORD *)(v6 - 184);
  v23 = *(_DWORD *)(v6 - 164);
  v9 = *(_DWORD *)(v6 - 156);
  v25 = *(_DWORD *)(v6 - 160);
  v10 = v5[16];
  v11 = v5[17];
  v12 = *(_DWORD *)(v6 - 136);
  v20 = *(_DWORD *)(v6 - 128);
  v21 = *(_DWORD *)(v6 - 132);
  v13 = *(_DWORD *)(v6 - 120);
  v18 = *(_DWORD *)(v6 - 116);
  v19 = *(_DWORD *)(v6 - 124);
  v17 = *(_DWORD *)(v6 - 112);
  ShouldRecordTree = AGSubgraphShouldRecordTree();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (ShouldRecordTree)
    AGSubgraphBeginTreeElement();
  *v5 = v7;
  v5[2] = v8;
  v48[2] = v22;
  v48[6] = v24;
  v48[7] = v23;
  v48[9] = v9;
  v5[5] = v10;
  v5[6] = v11;
  v48[14] = v12;
  v48[15] = v21;
  v48[16] = v20;
  v48[17] = v19;
  v48[18] = v13;
  v48[19] = v18;
  v48[20] = v17;
  v29 = v28;
  v32 = v7;
  v33 = v22;
  v34 = v8;
  v35 = v24;
  v36 = v23;
  v37 = 0;
  v38 = v9;
  v39 = v10;
  v40 = v11;
  v41 = v12;
  v42 = v21;
  v43 = v20;
  v44 = v19;
  v45 = v13;
  v46 = v18;
  v47 = v17;
  v15 = *(void (**)(_QWORD *__return_ptr, int *, uint64_t *))(v26 + 24);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v15(v30, &v29, &v32);
  v48[8] = v25;
  if ((ShouldRecordTree & 1) != 0)
  {
    specialized static _ViewDebug.reallyWrap<A>(_:value:inputs:)((uint64_t)v30, (uint64_t)v48);
    AGSubgraphEndTreeElement();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_release_n();
    swift_release_n();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_release_n();
    swift_release();
  }
  swift_release();
  result = swift_release();
  *v27 = v30[0];
  v27[1] = v30[1];
  return result;
}

uint64_t closure #1 in closure #3 in static PhaseAnimator.StateTransitioningContainer._makeView(view:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(_QWORD, _QWORD *), uint64_t a7)
{
  uint64_t v10;
  uint64_t v11;
  _QWORD v13[6];
  _QWORD v14[4];

  v14[0] = a2;
  v14[1] = a3;
  v14[2] = a4;
  v14[3] = a5;
  v13[2] = a6(0, v14);
  v13[3] = a3;
  v10 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(a1, a7, (uint64_t)v13, a3, MEMORY[0x24BEE4078], v10, MEMORY[0x24BEE40A8], v11);
  return v14[0];
}

void CompletionListener.animationWasAdded()()
{
  uint64_t v0;

  ++*(_QWORD *)(v0 + 32);
  *(_BYTE *)(v0 + 40) = 1;
}

uint64_t CompletionListener.animationWasRemoved()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;

  v1 = *(_QWORD *)(v0 + 32) - 1;
  *(_QWORD *)(v0 + 32) = v1;
  if (!v1 && (*(_BYTE *)(v0 + 41) & 1) == 0)
  {
    result = (*(uint64_t (**)(uint64_t))(v0 + 16))(1);
    *(_BYTE *)(v0 + 41) = 1;
  }
  return result;
}

void CompletionListener.__allocating_init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

uint64_t CompletionListener.__deallocating_deinit()
{
  swift_release();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for CompletionListener()
{
  return objc_opt_self();
}

void sub_2350A4650()
{
  type metadata accessor for PhaseAnimator.EmptyPhasesView();
}

void sub_2350A4684(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  type metadata accessor for ModifiedContent(255, a1, (uint64_t)&type metadata for _AppearanceActionModifier, a4);
  type metadata accessor for PhaseAnimator.StateTransitioningContainer();
}

uint64_t sub_2350A46B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[2];
  _QWORD v9[14];

  v6 = type metadata accessor for _ConditionalContent(255, v5, a1, a4);
  v9[0] = MEMORY[0x23B7C9C04](&protocol conformance descriptor for PhaseAnimator<A, B>.EmptyPhasesView, v4);
  v9[1] = &protocol witness table for _AppearanceActionModifier;
  v8[0] = MEMORY[0x23B7C9C04]("I{:\x1B̧\t", v5, v9);
  v8[1] = &protocol witness table for PhaseAnimator<A, B>.StateTransitioningContainer;
  return MEMORY[0x23B7C9C04](&protocol conformance descriptor for <> _ConditionalContent<A, B>, v6, v8);
}

void sub_2350A4730()
{
  type metadata accessor for PhaseAnimator();
}

void sub_2350A4768(uint64_t a1)
{
  MEMORY[0x23B7C9C04](&protocol conformance descriptor for PhaseAnimator<A, B>, a1);
  type metadata accessor for CustomModifier();
}

uint64_t sub_2350A4790(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[12];

  v6 = type metadata accessor for ModifiedContent(255, v4, a1, a4);
  v8[0] = v5;
  v8[1] = &protocol witness table for CustomModifier<A, B>;
  return MEMORY[0x23B7C9C04]("I{:\x1B̧\t", v6, v8);
}

void sub_2350A47D4()
{
  type metadata accessor for PhaseAnimator();
}

void sub_2350A480C(uint64_t a1)
{
  MEMORY[0x23B7C9C04](&protocol conformance descriptor for PhaseAnimator<A, B>, a1);
  type metadata accessor for CustomModifier();
}

uint64_t sub_2350A4834(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[12];

  v6 = type metadata accessor for ModifiedContent(255, v4, a1, a4);
  v8[0] = v5;
  v8[1] = &protocol witness table for CustomModifier<A, B>;
  return MEMORY[0x23B7C9C04]("I{:\x1B̧\t", v6, v8);
}

void type metadata accessor for PhaseAnimator.Behavior()
{
  JUMPOUT(0x23B7C9B5CLL);
}

uint64_t destroy for PhaseAnimator.StateTransitioningContainer()
{
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t initializeWithCopy for PhaseAnimator.StateTransitioningContainer(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  uint64_t v4;

  v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v3;
  v4 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v4;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

_QWORD *assignWithCopy for PhaseAnimator.StateTransitioningContainer(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;

  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = a2[2];
  a1[1] = a2[1];
  a1[2] = v4;
  swift_retain();
  swift_release();
  v5 = a2[4];
  a1[3] = a2[3];
  a1[4] = v5;
  swift_retain();
  swift_release();
  a1[5] = a2[5];
  swift_retain();
  swift_release();
  return a1;
}

_OWORD *assignWithTake for PhaseAnimator.StateTransitioningContainer(_OWORD *a1, _OWORD *a2)
{
  swift_bridgeObjectRelease();
  *a1 = *a2;
  swift_release();
  a1[1] = a2[1];
  swift_release();
  a1[2] = a2[2];
  swift_release();
  return a1;
}

uint64_t associated type witness table accessor for View.Body : View in PhaseAnimator<A, B>.EmptyPhasesView()
{
  return associated type witness table accessor for View.Body : View in PhaseAnimator<A, B>();
}

uint64_t closure #1 in Attribute.init(value:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[6];

  v6[5] = *MEMORY[0x24BDAC8D0];
  v6[2] = a2;
  v6[3] = a1;
  v2 = type metadata accessor for External();
  v3 = type metadata accessor for Attribute();
  return _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v3, (uint64_t)partial apply for closure #1 in closure #1 in Attribute.init(value:), (uint64_t)v6, v2, MEMORY[0x24BEE4078], v3, MEMORY[0x24BEE40A8], v4);
}

uint64_t closure #1 in closure #1 in Attribute.init(value:)@<X0>(_DWORD *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  v2 = type metadata accessor for External();
  MEMORY[0x23B7C9C04](MEMORY[0x24BE09678], v2);
  result = Attribute.init<A>(body:value:flags:update:)();
  *a1 = result;
  return result;
}

void type metadata accessor for PhaseAnimator.StateTransitioningContainer.AnimationCompletion()
{
  JUMPOUT(0x23B7C9B5CLL);
}

void type metadata accessor for PhaseAnimator.StateTransitioningContainer.Child.Value()
{
  JUMPOUT(0x23B7C9B5CLL);
}

void type metadata accessor for PhaseAnimator.StateTransitioningContainer.Child()
{
  JUMPOUT(0x23B7C9B5CLL);
}

void type metadata accessor for PhaseAnimator.StateTransitioningContainer.TransactionRule()
{
  JUMPOUT(0x23B7C9B5CLL);
}

uint64_t sub_2350A4E90()
{
  swift_weakDestroy();
  return swift_deallocObject();
}

uint64_t sub_2350A4EB4()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in static PhaseAnimator.StateTransitioningContainer.appearanceHandler(_:_:)()
{
  return partial apply for closure #1 in static PhaseAnimator.StateTransitioningContainer.appearanceHandler(_:_:)((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))closure #1 in static PhaseAnimator.StateTransitioningContainer.appearanceHandler(_:_:));
}

void type metadata accessor for PhaseAnimator.StateTransitioningContainer.VisibilityMutation()
{
  JUMPOUT(0x23B7C9B5CLL);
}

uint64_t partial apply for closure #1 in closure #1 in Attribute.init(value:)@<X0>(_DWORD *a1@<X8>)
{
  return closure #1 in closure #1 in Attribute.init(value:)(a1);
}

uint64_t (*partial apply for closure #1 in closure #1 in closure #1 in Attribute.init(value:)())()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  *(_QWORD *)(swift_allocObject() + 16) = v1;
  return partial apply for implicit closure #1 in closure #1 in closure #1 in closure #1 in Attribute.init(value:);
}

uint64_t sub_2350A4FE8()
{
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #1 in closure #1 in closure #1 in closure #1 in Attribute.init(value:)()
{
  return static External._update(_:attribute:)();
}

uint64_t partial apply for closure #1 in static CustomModifier._makeView(modifier:inputs:body:)(uint64_t a1)
{
  uint64_t *v1;

  return closure #1 in closure #3 in static PhaseAnimator.StateTransitioningContainer._makeView(view:inputs:)(a1, v1[2], v1[3], v1[4], v1[5], (uint64_t (*)(_QWORD, _QWORD *))type metadata accessor for CustomModifier, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply);
}

{
  uint64_t *v1;

  return closure #1 in static CustomModifier._makeView(modifier:inputs:body:)(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_2350A5034()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in View.phaseAnimator<A, B, C>(_:content:animation:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return closure #1 in closure #1 in View.keyframeAnimator<A, B, C, D>(initialValue:trigger:content:keyframes:)(a1, *(void (**)(uint64_t, uint64_t))(v2 + 80), *(_QWORD *)(v2 + 40), a2, *(_QWORD *)(v2 + 56), *(_QWORD *)(v2 + 64), *(_QWORD *)(v2 + 72));
}

uint64_t partial apply for closure #2 in closure #1 in View.phaseAnimator<A, B, C>(_:content:animation:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 80))();
}

uint64_t sub_2350A50B4()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in View.phaseAnimator<A, B, C, D>(_:trigger:content:animation:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return closure #1 in closure #1 in View.phaseAnimator<A, B, C, D>(_:trigger:content:animation:)(a1, *(void (**)(uint64_t, uint64_t))(v2 + 96), *(_QWORD *)(v2 + 48), a2, *(_QWORD *)(v2 + 56), *(_QWORD *)(v2 + 64), *(_QWORD *)(v2 + 72), *(_QWORD *)(v2 + 80), *(_QWORD *)(v2 + 88));
}

uint64_t partial apply for closure #2 in closure #1 in View.phaseAnimator<A, B, C, D>(_:trigger:content:animation:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 96))();
}

uint64_t type metadata instantiation function for PhaseAnimator.StateTransitioningContainer.Child()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t destroy for PhaseAnimator.StateTransitioningContainer.Child(uint64_t a1)
{
  if (*(_QWORD *)(a1 + 72) != 1)
    swift_release();
  return swift_release();
}

uint64_t initializeWithCopy for PhaseAnimator.StateTransitioningContainer.Child(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  v5 = *(_QWORD *)(a2 + 72);
  if (v5 != 1)
    v5 = swift_retain();
  v6 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 72) = v5;
  *(_QWORD *)(a1 + 80) = v6;
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(_BYTE *)(a1 + 92) = *(_BYTE *)(a2 + 92);
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for PhaseAnimator.StateTransitioningContainer.Child(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  int v8;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  v4 = *(_QWORD *)(a2 + 56);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = v4;
  v5 = (_QWORD *)(a1 + 72);
  v6 = *(_QWORD *)(a1 + 72);
  v7 = *(_QWORD *)(a2 + 72);
  if (v6 == 1)
  {
    if (v7 == 1)
    {
      *v5 = 1;
    }
    else
    {
      *v5 = v7;
      swift_retain();
    }
  }
  else
  {
    if (v7 == 1)
      type metadata accessor for PhaseAnimator.Behavior();
    *v5 = v7;
    swift_retain();
    swift_release();
  }
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  swift_retain();
  swift_release();
  v8 = *(_DWORD *)(a2 + 88);
  *(_BYTE *)(a1 + 92) = *(_BYTE *)(a2 + 92);
  *(_DWORD *)(a1 + 88) = v8;
  return a1;
}

__n128 __swift_memcpy93_8(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __n128 result;
  __int128 v4;
  __int128 v5;

  v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  result = *(__n128 *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 77) = *(_OWORD *)(a2 + 77);
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  *(__n128 *)(a1 + 32) = result;
  return result;
}

uint64_t assignWithTake for PhaseAnimator.StateTransitioningContainer.Child(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  _QWORD *v5;
  uint64_t v6;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  v5 = (_QWORD *)(a1 + 72);
  v6 = *(_QWORD *)(a2 + 72);
  if (*(_QWORD *)(a1 + 72) == 1)
  {
    *v5 = v6;
  }
  else
  {
    if (v6 == 1)
      type metadata accessor for PhaseAnimator.Behavior();
    *v5 = v6;
    swift_release();
  }
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  swift_release();
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(_BYTE *)(a1 + 92) = *(_BYTE *)(a2 + 92);
  return a1;
}

uint64_t getEnumTagSinglePayload for PhaseAnimator.StateTransitioningContainer.Child(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 93))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 80);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for PhaseAnimator.StateTransitioningContainer.Child(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 92) = 0;
    *(_DWORD *)(result + 88) = 0;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 93) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 93) = 0;
    if (a2)
      *(_QWORD *)(result + 80) = a2;
  }
  return result;
}

uint64_t type metadata completion function for PhaseAnimator.StateTransitioningContainer.Child.Value()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for PhaseAnimator.StateTransitioningContainer.Child.Value(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  unint64_t v12;
  int v13;
  unint64_t v14;

  v4 = a1;
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0 || ((((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 11) & 0xFFFFFFFFFFFFFFF8 | 5) > 0x18)
  {
    v9 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    v10 = (_QWORD *)(((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFF8);
    v11 = (_QWORD *)(((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFF8);
    *v10 = *v11;
    v12 = ((unint64_t)v11 + 11) & 0xFFFFFFFFFFFFFFF8;
    v13 = *(_DWORD *)v12;
    v14 = ((unint64_t)v10 + 11) & 0xFFFFFFFFFFFFFFF8;
    *(_BYTE *)(v14 + 4) = *(_BYTE *)(v12 + 4);
    *(_DWORD *)v14 = v13;
  }
  swift_retain();
  return v4;
}

uint64_t destroy for PhaseAnimator.StateTransitioningContainer.Child.Value(uint64_t a1, uint64_t a2)
{
  (*(void (**)(void))(*(_QWORD *)(*(_QWORD *)(a2 + 24) - 8) + 8))();
  return swift_release();
}

uint64_t initializeWithCopy for PhaseAnimator.StateTransitioningContainer.Child.Value(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  char v11;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  (*(void (**)(void))(v5 + 16))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (_QWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = (_QWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *v7 = *v8;
  v9 = ((unint64_t)v7 + 11) & 0xFFFFFFFFFFFFFFF8;
  v10 = ((unint64_t)v8 + 11) & 0xFFFFFFFFFFFFFFF8;
  v11 = *(_BYTE *)(v10 + 4);
  *(_DWORD *)v9 = *(_DWORD *)v10;
  *(_BYTE *)(v9 + 4) = v11;
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for PhaseAnimator.StateTransitioningContainer.Child.Value(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  int v11;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  (*(void (**)(void))(v5 + 24))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (_QWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = v6 + a2;
  v9 = (v8 & 0xFFFFFFFFFFFFFFF8) + 11;
  *v7 = *(_QWORD *)(v8 & 0xFFFFFFFFFFFFFFF8);
  swift_retain();
  swift_release();
  v10 = ((unint64_t)v7 + 11) & 0xFFFFFFFFFFFFFFF8;
  v11 = *(_DWORD *)(v9 & 0xFFFFFFFFFFFFFFF8);
  *(_BYTE *)(v10 + 4) = *(_BYTE *)((v9 & 0xFFFFFFFFFFFFFFF8) + 4);
  *(_DWORD *)v10 = v11;
  return a1;
}

uint64_t initializeWithTake for PhaseAnimator.StateTransitioningContainer.Child.Value(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  char v11;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  (*(void (**)(void))(v5 + 32))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (_QWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = (_QWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *v7 = *v8;
  v9 = ((unint64_t)v7 + 11) & 0xFFFFFFFFFFFFFFF8;
  v10 = ((unint64_t)v8 + 11) & 0xFFFFFFFFFFFFFFF8;
  v11 = *(_BYTE *)(v10 + 4);
  *(_DWORD *)v9 = *(_DWORD *)v10;
  *(_BYTE *)(v9 + 4) = v11;
  return a1;
}

uint64_t assignWithTake for PhaseAnimator.StateTransitioningContainer.Child.Value(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int v11;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  (*(void (**)(void))(v5 + 40))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (_QWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  v9 = *(_QWORD *)v8;
  v8 += 11;
  *v7 = v9;
  swift_release();
  v10 = ((unint64_t)v7 + 11) & 0xFFFFFFFFFFFFFFF8;
  v11 = *(_DWORD *)(v8 & 0xFFFFFFFFFFFFFFF8);
  *(_BYTE *)(v10 + 4) = *(_BYTE *)((v8 & 0xFFFFFFFFFFFFFFF8) + 4);
  *(_DWORD *)v10 = v11;
  return a1;
}

uint64_t getEnumTagSinglePayload for PhaseAnimator.StateTransitioningContainer.Child.Value(_DWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unint64_t v9;
  int v10;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFE)
    v6 = 2147483646;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(_QWORD *)(v4 + 64);
  if (v6 < a2 && *((_BYTE *)a1 + ((((v7 + 7) & 0xFFFFFFFFFFFFFFF8) + 11) & 0xFFFFFFFFFFFFFFF8 | 5)))
    return v6 + *a1 + 1;
  if (v5 >= 0x7FFFFFFE)
    return (*(uint64_t (**)(void))(v4 + 48))();
  v9 = *(_QWORD *)(((unint64_t)a1 + v7 + 7) & 0xFFFFFFFFFFFFF8);
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  v10 = v9 - 1;
  if (v10 < 0)
    v10 = -1;
  return (v10 + 1);
}

void storeEnumTagSinglePayload for PhaseAnimator.StateTransitioningContainer.Child.Value(_BYTE *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  unint64_t v10;
  unsigned int v11;
  _QWORD *v12;
  uint64_t v13;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 24) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFE)
    v8 = 2147483646;
  else
    v8 = *(_DWORD *)(v6 + 84);
  v9 = *(_QWORD *)(v6 + 64);
  v10 = (((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 11) & 0xFFFFFFFFFFFFFFF8 | 5;
  if (v8 >= a2)
  {
    if (v8 < a3)
      a1[v10] = 0;
    if (a2)
    {
      if (v7 < 0x7FFFFFFE)
      {
        v12 = (_QWORD *)((unint64_t)&a1[v9 + 7] & 0xFFFFFFFFFFFFFFF8);
        if (a2 > 0x7FFFFFFE)
          v13 = a2 - 0x7FFFFFFF;
        else
          v13 = a2;
        *v12 = v13;
      }
      else
      {
        (*(void (**)(_BYTE *))(v6 + 56))(a1);
      }
    }
  }
  else
  {
    v11 = ~v8 + a2;
    bzero(a1, (((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 11) & 0xFFFFFFFFFFFFFFF8 | 5);
    *(_DWORD *)a1 = v11;
    if (v8 < a3)
      a1[v10] = 1;
  }
}

uint64_t sub_2350A5A0C()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<SummarySymbol, _ValueTransactionModifier<Double>>, _OffsetEffect> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Font?>>, _PaddingLayout>, _ForegroundStyleModifier<Color>>, _BackgroundStyleModifier<Color>> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Font?>>, _PaddingLayout>, _ForegroundStyleModifier<Color>>, _BackgroundStyleModifier<Color>>, lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Font?>>, _PaddingLayout>, _ForegroundStyleModifier<Color>> and conformance <> ModifiedContent<A, B>, (uint64_t)&protocol witness table for _BackgroundStyleModifier<A>);
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Font?>>, _PaddingLayout>, _ForegroundStyleModifier<Color>>, _BackgroundStyleModifier<Color>>(uint64_t a1)
{
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Font?>>, _PaddingLayout>, _ForegroundStyleModifier<Color>>, _BackgroundStyleModifier<Color>>(a1, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Font?>>, _PaddingLayout>, _ForegroundStyleModifier<Color>>, _BackgroundStyleModifier<Color>>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Font?>>, _PaddingLayout>, _ForegroundStyleModifier<Color>>, &lazy cache variable for type metadata for _BackgroundStyleModifier<Color>, (uint64_t (*)(_QWORD, ValueMetadata *, _UNKNOWN **))type metadata accessor for _BackgroundStyleModifier);
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Font?>>, _PaddingLayout>, _ForegroundStyleModifier<Color>>(uint64_t a1)
{
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Font?>>, _PaddingLayout>, _ForegroundStyleModifier<Color>>, _BackgroundStyleModifier<Color>>(a1, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Font?>>, _PaddingLayout>, _ForegroundStyleModifier<Color>>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Font?>>, _PaddingLayout>, &lazy cache variable for type metadata for _ForegroundStyleModifier<Color>, (uint64_t (*)(_QWORD, ValueMetadata *, _UNKNOWN **))type metadata accessor for _ForegroundStyleModifier);
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Font?>>, _PaddingLayout>, _ForegroundStyleModifier<Color>>, _BackgroundStyleModifier<Color>>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), unint64_t *a4, uint64_t (*a5)(_QWORD, ValueMetadata *, _UNKNOWN **))
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;

  if (!*a2)
  {
    v9 = a3(255);
    type metadata accessor for _ForegroundStyleModifier<Color>(255, a4, a5);
    v12 = type metadata accessor for ModifiedContent(a1, v9, v10, v11);
    if (!v13)
      atomic_store(v12, a2);
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Font?>>, _PaddingLayout>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Font?>>, _PaddingLayout>)
  {
    type metadata accessor for ModifiedContent<Image, _EnvironmentKeyWritingModifier<Font?>>(255);
    v4 = type metadata accessor for ModifiedContent(a1, v2, (uint64_t)&type metadata for _PaddingLayout, v3);
    if (!v5)
      atomic_store(v4, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Font?>>, _PaddingLayout>);
  }
}

void type metadata accessor for ModifiedContent<Image, _EnvironmentKeyWritingModifier<Font?>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  if (!lazy cache variable for type metadata for ModifiedContent<Image, _EnvironmentKeyWritingModifier<Font?>>)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Font?>(255);
    v4 = type metadata accessor for ModifiedContent(a1, (uint64_t)&type metadata for Image, v2, v3);
    if (!v5)
      atomic_store(v4, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<Image, _EnvironmentKeyWritingModifier<Font?>>);
  }
}

void type metadata accessor for _ForegroundStyleModifier<Color>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(_QWORD, ValueMetadata *, _UNKNOWN **))
{
  unint64_t v4;
  uint64_t v5;

  if (!*a2)
  {
    v4 = a3(0, &type metadata for Color, &protocol witness table for Color);
    if (!v5)
      atomic_store(v4, a2);
  }
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Font?>>, _PaddingLayout>, _ForegroundStyleModifier<Color>> and conformance <> ModifiedContent<A, B>()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<SummarySymbol, _ValueTransactionModifier<Double>>, _OffsetEffect> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Font?>>, _PaddingLayout>, _ForegroundStyleModifier<Color>> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Font?>>, _PaddingLayout>, _ForegroundStyleModifier<Color>>, lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Font?>>, _PaddingLayout> and conformance <> ModifiedContent<A, B>, (uint64_t)&protocol witness table for _ForegroundStyleModifier<A>);
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Font?>>, _PaddingLayout> and conformance <> ModifiedContent<A, B>()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<SummarySymbol, _ValueTransactionModifier<Double>>, _OffsetEffect> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Font?>>, _PaddingLayout> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Font?>>, _PaddingLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type ModifiedContent<Image, _EnvironmentKeyWritingModifier<Font?>> and conformance <> ModifiedContent<A, B>, (uint64_t)&protocol witness table for _PaddingLayout);
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<Image, _EnvironmentKeyWritingModifier<Font?>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<Image, _EnvironmentKeyWritingModifier<Font?>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<Image, _EnvironmentKeyWritingModifier<Font?>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<Image, _EnvironmentKeyWritingModifier<Font?>>(255);
    v2[0] = &protocol witness table for Image;
    v2[1] = &protocol witness table for _EnvironmentKeyWritingModifier<A>;
    result = MEMORY[0x23B7C9C04]("I{:\x1B̧\t", v1, v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<Image, _EnvironmentKeyWritingModifier<Font?>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void base witness table accessor for _AttributeBody in PhaseAnimator<A, B>.StateTransitioningContainer.TransactionRule()
{
  JUMPOUT(0x23B7C9C04);
}

void base witness table accessor for _AttributeBody in PhaseAnimator<A, B>.StateTransitioningContainer.Child()
{
  JUMPOUT(0x23B7C9C04);
}

uint64_t outlined retain of PhaseAnimator<A, B>.StateTransitioningContainer(uint64_t a1)
{
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t outlined release of PhaseAnimator<A, B>.StateTransitioningContainer(uint64_t a1)
{
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  return a1;
}

void type metadata accessor for PhaseAnimator.StateTransitioningContainer.Child.EndlessLoopState()
{
  JUMPOUT(0x23B7C9B5CLL);
}

uint64_t sub_2350A5D88()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #4 in PhaseAnimator.StateTransitioningContainer.Child.advance(to:)()
{
  return closure #4 in PhaseAnimator.StateTransitioningContainer.Child.advance(to:)();
}

uint64_t sub_2350A5DA8()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in PhaseAnimator.StateTransitioningContainer.Child.advance(to:)(char a1)
{
  uint64_t *v1;

  return closure #2 in PhaseAnimator.StateTransitioningContainer.Child.advance(to:)(a1, v1[6], v1[7], v1[8], v1[2], v1[3], v1[4], v1[5]);
}

uint64_t partial apply for closure #3 in PhaseAnimator.StateTransitioningContainer.Child.advance(to:)()
{
  uint64_t v0;
  uint64_t result;

  if ((*(_BYTE *)(v0 + 40) & 1) == 0)
  {
    result = (*(uint64_t (**)(_QWORD))(v0 + 16))(0);
    *(_BYTE *)(v0 + 41) = 1;
  }
  return result;
}

uint64_t sub_2350A5E18()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2350A5E3C()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in closure #2 in PhaseAnimator.StateTransitioningContainer.Child.advance(to:)()
{
  return partial apply for closure #1 in static PhaseAnimator.StateTransitioningContainer.appearanceHandler(_:_:)((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))closure #1 in closure #1 in closure #2 in PhaseAnimator.StateTransitioningContainer.Child.advance(to:));
}

uint64_t partial apply for closure #1 in static PhaseAnimator.StateTransitioningContainer.appearanceHandler(_:_:)(uint64_t (*a1)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  uint64_t v1;

  return a1(*(_QWORD *)(v1 + 48), *(_QWORD *)(v1 + 56), *(unsigned __int8 *)(v1 + 64), *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40));
}

uint64_t type metadata completion function for TimeDataFormatting.Configuration()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for TimeDataFormatting.Configuration(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  __int128 v16;
  __int128 v17;

  v4 = a1;
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0 || ((((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 47) & 0xFFFFFFFFFFFFFFF8) + 40 > 0x18)
  {
    v9 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
    swift_retain();
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    v10 = ((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
    v11 = ((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
    v12 = *(_QWORD *)(v11 + 24);
    *(_QWORD *)(v10 + 24) = v12;
    *(_QWORD *)(v10 + 32) = *(_QWORD *)(v11 + 32);
    (**(void (***)(unint64_t, unint64_t))(v12 - 8))(v10, v11);
    v13 = (v10 + 47) & 0xFFFFFFFFFFFFFFF8;
    v14 = (v11 + 47) & 0xFFFFFFFFFFFFFFF8;
    v15 = *(_QWORD *)(v14 + 24);
    if (v15 < 0xFFFFFFFF)
    {
      v16 = *(_OWORD *)v14;
      v17 = *(_OWORD *)(v14 + 16);
      *(_QWORD *)(v13 + 32) = *(_QWORD *)(v14 + 32);
      *(_OWORD *)v13 = v16;
      *(_OWORD *)(v13 + 16) = v17;
    }
    else
    {
      *(_QWORD *)(v13 + 24) = v15;
      *(_QWORD *)(v13 + 32) = *(_QWORD *)(v14 + 32);
      (**(void (***)(void))(v15 - 8))();
    }
  }
  return v4;
}

unint64_t destroy for TimeDataFormatting.Configuration(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t result;

  v3 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  (*(void (**)(void))(v3 + 8))();
  v4 = (a1 + *(_QWORD *)(v3 + 64) + 7) & 0xFFFFFFFFFFFFFFF8;
  __swift_destroy_boxed_opaque_existential_1(v4);
  result = (v4 + 47) & 0xFFFFFFFFFFFFFFF8;
  if (*(_QWORD *)(result + 24) >= 0xFFFFFFFFuLL)
    return __swift_destroy_boxed_opaque_existential_1(result);
  return result;
}

uint64_t initializeWithCopy for TimeDataFormatting.Configuration(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  __int128 v13;
  __int128 v14;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 16))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  v9 = *(_QWORD *)(v8 + 24);
  *(_QWORD *)(v7 + 24) = v9;
  *(_QWORD *)(v7 + 32) = *(_QWORD *)(v8 + 32);
  (**(void (***)(unint64_t, unint64_t))(v9 - 8))(v7, v8);
  v10 = (v7 + 47) & 0xFFFFFFFFFFFFFFF8;
  v11 = (v8 + 47) & 0xFFFFFFFFFFFFFFF8;
  v12 = *(_QWORD *)(v11 + 24);
  if (v12 < 0xFFFFFFFF)
  {
    v13 = *(_OWORD *)v11;
    v14 = *(_OWORD *)(v11 + 16);
    *(_QWORD *)(v10 + 32) = *(_QWORD *)(v11 + 32);
    *(_OWORD *)v10 = v13;
    *(_OWORD *)(v10 + 16) = v14;
  }
  else
  {
    *(_QWORD *)(v10 + 24) = v12;
    *(_QWORD *)(v10 + 32) = *(_QWORD *)(v11 + 32);
    (**(void (***)(void))(v12 - 8))();
  }
  return a1;
}

uint64_t assignWithCopy for TimeDataFormatting.Configuration(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  __int128 v12;
  __int128 v13;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 24))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (uint64_t *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = (uint64_t *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  __swift_assign_boxed_opaque_existential_1(v7, v8);
  v9 = ((unint64_t)v7 + 47) & 0xFFFFFFFFFFFFFFF8;
  v10 = ((unint64_t)v8 + 47) & 0xFFFFFFFFFFFFFFF8;
  v11 = *(_QWORD *)(v10 + 24);
  if (*(_QWORD *)(v9 + 24) < 0xFFFFFFFFuLL)
  {
    if (v11 >= 0xFFFFFFFF)
    {
      *(_QWORD *)(v9 + 24) = v11;
      *(_QWORD *)(v9 + 32) = *(_QWORD *)(v10 + 32);
      (**(void (***)(unint64_t, unint64_t))(v11 - 8))(v9, ((unint64_t)v8 + 47) & 0xFFFFFFFFFFFFFFF8);
      return a1;
    }
LABEL_7:
    v12 = *(_OWORD *)v10;
    v13 = *(_OWORD *)(v10 + 16);
    *(_QWORD *)(v9 + 32) = *(_QWORD *)(v10 + 32);
    *(_OWORD *)v9 = v12;
    *(_OWORD *)(v9 + 16) = v13;
    return a1;
  }
  if (v11 < 0xFFFFFFFF)
  {
    __swift_destroy_boxed_opaque_existential_1(v9);
    goto LABEL_7;
  }
  __swift_assign_boxed_opaque_existential_1((uint64_t *)v9, (uint64_t *)(((unint64_t)v8 + 47) & 0xFFFFFFFFFFFFFFF8));
  return a1;
}

uint64_t initializeWithTake for TimeDataFormatting.Configuration(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  __int128 v9;
  __int128 v10;
  unint64_t v11;
  unint64_t v12;
  __int128 v13;
  __int128 v14;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 32))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  v9 = *(_OWORD *)v8;
  v10 = *(_OWORD *)(v8 + 16);
  *(_QWORD *)(v7 + 32) = *(_QWORD *)(v8 + 32);
  *(_OWORD *)v7 = v9;
  *(_OWORD *)(v7 + 16) = v10;
  v11 = (v7 + 47) & 0xFFFFFFFFFFFFFFF8;
  v12 = (v8 + 47) & 0xFFFFFFFFFFFFFFF8;
  v13 = *(_OWORD *)v12;
  v14 = *(_OWORD *)(v12 + 16);
  *(_QWORD *)(v11 + 32) = *(_QWORD *)(v12 + 32);
  *(_OWORD *)v11 = v13;
  *(_OWORD *)(v11 + 16) = v14;
  return a1;
}

uint64_t assignWithTake for TimeDataFormatting.Configuration(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  __int128 v9;
  __int128 v10;
  unint64_t v11;
  unint64_t v12;
  __int128 v13;
  __int128 v14;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 40))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  __swift_destroy_boxed_opaque_existential_1(v7);
  v9 = *(_OWORD *)v8;
  v10 = *(_OWORD *)(v8 + 16);
  *(_QWORD *)(v7 + 32) = *(_QWORD *)(v8 + 32);
  *(_OWORD *)v7 = v9;
  *(_OWORD *)(v7 + 16) = v10;
  v11 = (v7 + 47) & 0xFFFFFFFFFFFFFFF8;
  if (*(_QWORD *)(v11 + 24) >= 0xFFFFFFFFuLL)
    __swift_destroy_boxed_opaque_existential_1((v7 + 47) & 0xFFFFFFFFFFFFFFF8);
  v12 = (v8 + 47) & 0xFFFFFFFFFFFFFFF8;
  v13 = *(_OWORD *)v12;
  v14 = *(_OWORD *)(v12 + 16);
  *(_QWORD *)(v11 + 32) = *(_QWORD *)(v12 + 32);
  *(_OWORD *)v11 = v13;
  *(_OWORD *)(v11 + 16) = v14;
  return a1;
}

uint64_t getEnumTagSinglePayload for TimeDataFormatting.Configuration(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v12;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(_QWORD *)(v4 + 64);
  if (v6 >= a2)
  {
    if (v5 < 0x7FFFFFFF)
    {
      v12 = *(_QWORD *)(((a1 + v7 + 7) & 0xFFFFFFFFFFFFF8) + 0x18);
      if (v12 >= 0xFFFFFFFF)
        LODWORD(v12) = -1;
      return (v12 + 1);
    }
    else
    {
      return (*(uint64_t (**)(void))(v4 + 48))();
    }
  }
  else
  {
    if (((((((v7 + 7) & 0xFFFFFFFFFFFFFFF8) + 47) & 0xFFFFFFFFFFFFFFF8) + 40) & 0xFFFFFFF8) != 0)
      v8 = 2;
    else
      v8 = a2 - v6 + 1;
    if (v8 >= 0x10000)
      v9 = 4;
    else
      v9 = 2;
    if (v8 < 0x100)
      v9 = 1;
    if (v8 >= 2)
      v10 = v9;
    else
      v10 = 0;
    return ((uint64_t (*)(void))((char *)&loc_2350A63D4 + 4 * byte_2352C4FB0[v10]))();
  }
}

void storeEnumTagSinglePayload for TimeDataFormatting.Configuration(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  int v9;
  unsigned int v10;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v5 + 84);
  if (v6 >= a3)
  {
    v9 = 0;
    if (a2 <= v6)
      goto LABEL_17;
  }
  else
  {
    if (((((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) + 47) & 0xFFFFFFF8) == 0xFFFFFFD8)
      v7 = a3 - v6 + 1;
    else
      v7 = 2;
    if (v7 >= 0x10000)
      v8 = 4;
    else
      v8 = 2;
    if (v7 < 0x100)
      v8 = 1;
    if (v7 >= 2)
      v9 = v8;
    else
      v9 = 0;
    if (a2 <= v6)
LABEL_17:
      __asm { BR              X12 }
  }
  if (((((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) + 47) & 0xFFFFFFF8) != 0xFFFFFFD8)
  {
    v10 = ~v6 + a2;
    bzero(a1, ((((*(_QWORD *)(v5 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 47) & 0xFFFFFFFFFFFFFFF8) + 40);
    *a1 = v10;
  }
  __asm { BR              X10 }
}

void sub_2350A6554()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
  JUMPOUT(0x2350A65D8);
}

void sub_2350A655C(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x2350A6564);
  JUMPOUT(0x2350A65D8);
}

void sub_2350A65A8()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x2350A65D8);
}

void sub_2350A65B0()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x2350A65D8);
}

uint64_t sub_2350A65B8(uint64_t a1, int a2, unsigned int a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_WORD *)(v6 + v7) = 0;
  if (!a2)
    goto LABEL_6;
  if (a3 < 0x7FFFFFFF)
  {
    if (a2 < 0)
      JUMPOUT(0x2350A65C4);
    *(_QWORD *)(((v6 + v5 + 7) & 0xFFFFFFFFFFFFFFF8) + 24) = (a2 - 1);
LABEL_6:
    JUMPOUT(0x2350A65D8);
  }
  return (*(uint64_t (**)(uint64_t))(v4 + 56))(v6);
}

void type metadata accessor for TimeDataFormatting.Configuration()
{
  JUMPOUT(0x23B7C9B5CLL);
}

void static TimeDataFormatting.Configuration.makeConfiguration(from:format:sizeVariant:secondsUpdateFrequencyBudget:)(uint64_t a1, uint64_t a2, double a3, uint64_t a4, uint64_t *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t TupleTypeMetadata2;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD v27[4];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30[6];
  __int128 v31;
  _BYTE v32[25];
  _OWORD v33[2];
  uint64_t v34;
  __int128 v35;
  unint64_t v36;
  _BYTE v37[17];

  v29 = a8;
  v28 = a1;
  v15 = *(_QWORD *)(a6 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v17 = (char *)v27 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v27[2] = *(_QWORD *)(TupleTypeMetadata2 - 8);
  MEMORY[0x24BDAC7A8](TupleTypeMetadata2);
  v20 = (char *)v27 - v19;
  v21 = *a5;
  v27[3] = v22;
  v23 = *(int *)(v22 + 48);
  *(_QWORD *)&v35 = v21;
  v24 = FormatStyle.exactSizeVariant(_:)((char *)v27 - v19, (uint64_t *)&v35, a7);
  v27[1] = v23;
  v20[v23] = v24 & 1;
  *(_QWORD *)&v31 = v21;
  v25 = a9;
  v26 = v29;
  DiscreteFormatStyle.alwaysOnDisplayFormat<A>(source:secondsUpdateFrequencyBudget:sizeVariant:)(a2, (uint64_t *)&v31, a7, a6, v25, v29, (uint64_t *)&v35, a3);
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v17, a2, a6);
  DiscreteFormatStyle.paused<A>(accordingTo:)(a2, a7, a6, v26, v30);
  if (*(_QWORD *)v37)
  {
    outlined init with copy of AnyTrackedValue((uint64_t)&v35, (uint64_t)&v31);
    v32[24] = v37[16];
  }
  else
  {
    v31 = v35;
    *(_OWORD *)v32 = v36;
    *(_OWORD *)&v32[9] = *(_OWORD *)&v37[1];
  }
  if (*(_QWORD *)&v32[8])
  {
    outlined init with take of ScrollStateRequest(&v31, (uint64_t)v33);
  }
  else
  {
    memset(v33, 0, sizeof(v33));
    v34 = 0;
  }
  TimeDataFormatting.Configuration.init(source:highFrequencyFormat:lowFrequencyFormat:)((uint64_t)v17, a6, v28);
}

uint64_t sub_2350A6804()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  __int128 v7;
  uint64_t v8;
  __int128 v9;

  v6 = *(unsigned __int8 *)(v3 + v4);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v3, v1);
  v7 = *(_OWORD *)(v5 - 144);
  *(_OWORD *)(v5 - 256) = *(_OWORD *)(v5 - 160);
  *(_OWORD *)(v5 - 240) = v7;
  *(_OWORD *)(v5 - 231) = *(_OWORD *)(v0 + 25);
  if (v6 == 1)
  {
    if (*(_QWORD *)(v5 - 232))
      __swift_destroy_boxed_opaque_existential_1(v5 - 256);
    return 1;
  }
  else
  {
    *(_OWORD *)(v5 - 279) = *(_OWORD *)(v5 - 231);
    v9 = *(_OWORD *)(v5 - 256);
    *(_OWORD *)(v5 - 288) = *(_OWORD *)(v5 - 240);
    *(_OWORD *)(v5 - 304) = v9;
    if (*(_QWORD *)(v5 - 280))
    {
      v8 = *(unsigned __int8 *)(v5 - 264);
      __swift_destroy_boxed_opaque_existential_1(v5 - 304);
    }
    else
    {
      return 0;
    }
  }
  return v8;
}

uint64_t TimeDataFormatting.Configuration.formatAndFrequency(for:)(uint64_t a1, char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t *v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v17;
  char v18;

  v8 = type metadata accessor for Date();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = (uint64_t *)(a3 + *(int *)(type metadata accessor for ResolvableStringResolutionContext() + 20));
  v13 = *v12;
  if (v12[1])
  {
    swift_retain_n();
    swift_retain_n();
    v14 = specialized PropertyList.Tracker.value<A>(_:for:)(v13);
    swift_release_n();
  }
  else
  {
    v15 = swift_retain_n();
    v14 = specialized closure #1 in PropertyList.subscript.getter(v15);
  }
  swift_release_n();
  ResolvableStringResolutionContext.date.getter((uint64_t)v11);
  v18 = v14 & 1;
  TimeDataFormatting.Configuration.formatAndFrequency(for:mode:)(a1, a2, (uint64_t)v11, &v18, a4);
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
}

void static TimeDataFormatting.Configuration.== infix(_:_:)()
{
  type metadata accessor for TimeDataFormatting.Configuration();
}

uint64_t sub_2350A6A50(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t *v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;
  uint64_t v38;

  *(_QWORD *)(v5 - 248) = *(_QWORD *)(a1 - 8);
  MEMORY[0x24BDAC7A8](a1);
  *(_QWORD *)(v5 - 256) = (char *)&v38 - v7;
  v9 = *(int *)(v8 + 52);
  *(_QWORD *)(v5 - 240) = v2;
  v10 = *(_QWORD *)(v2 + v9 + 24);
  v11 = __swift_project_boxed_opaque_existential_1((_QWORD *)(v2 + v9), v10);
  v12 = *(int *)(a1 + 52);
  *(_QWORD *)(v5 - 232) = v1;
  v13 = (_QWORD *)(v1 + v12);
  v14 = *(_QWORD *)(v1 + v12 + 24);
  v15 = __swift_project_boxed_opaque_existential_1(v13, v14);
  *(_QWORD *)(v5 - 104) = v14;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v5 - 128));
  (*(void (**)(uint64_t *, _QWORD *, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(boxed_opaque_existential_1, v15, v14);
  v17 = (uint64_t)v11;
  v18 = v4;
  LOBYTE(v14) = equals #1 <A, B><A1>(lhs:rhs:) in static TimeDataFormatting.Configuration.== infix(_:_:)(v17, v5 - 128, v3, v4, v10);
  __swift_destroy_boxed_opaque_existential_1(v5 - 128);
  if ((v14 & 1) != 0)
  {
    v19 = *(_QWORD *)(v5 - 240);
    v20 = v19 + *(int *)(a1 + 56);
    if (*(_QWORD *)(v20 + 24))
    {
      outlined init with copy of AnyTrackedValue(v19 + *(int *)(a1 + 56), v5 - 176);
    }
    else
    {
      v22 = *(_OWORD *)(v20 + 16);
      *(_OWORD *)(v5 - 176) = *(_OWORD *)v20;
      *(_OWORD *)(v5 - 160) = v22;
      *(_QWORD *)(v5 - 144) = *(_QWORD *)(v20 + 32);
    }
    v23 = *(_QWORD *)(v5 - 232);
    if (*(_QWORD *)(v5 - 152))
    {
      outlined init with take of ScrollStateRequest((__int128 *)(v5 - 176), v5 - 128);
      v24 = v23 + *(int *)(a1 + 56);
      if (*(_QWORD *)(v24 + 24))
      {
        outlined init with copy of AnyTrackedValue(v24, v5 - 224);
        if (*(_QWORD *)(v5 - 200))
        {
LABEL_9:
          outlined init with take of ScrollStateRequest((__int128 *)(v5 - 224), v5 - 176);
          v25 = *(_QWORD *)(v5 - 104);
          v26 = __swift_project_boxed_opaque_existential_1((_QWORD *)(v5 - 128), v25);
          v27 = *(_QWORD *)(v5 - 152);
          v28 = __swift_project_boxed_opaque_existential_1((_QWORD *)(v5 - 176), v27);
          *(_QWORD *)(v5 - 200) = v27;
          v29 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v5 - 224));
          (*(void (**)(uint64_t *, _QWORD *, uint64_t))(*(_QWORD *)(v27 - 8) + 16))(v29, v28, v27);
          v21 = equals #1 <A, B><A1>(lhs:rhs:) in static TimeDataFormatting.Configuration.== infix(_:_:)((uint64_t)v26, v5 - 224, v3, v18, v25);
          __swift_destroy_boxed_opaque_existential_1(v5 - 224);
          __swift_destroy_boxed_opaque_existential_1(v5 - 176);
LABEL_20:
          __swift_destroy_boxed_opaque_existential_1(v5 - 128);
          return v21 & 1;
        }
      }
      else
      {
        v30 = *(_OWORD *)(v24 + 16);
        *(_OWORD *)(v5 - 224) = *(_OWORD *)v24;
        *(_OWORD *)(v5 - 208) = v30;
        *(_QWORD *)(v5 - 192) = *(_QWORD *)(v24 + 32);
        if (*(_QWORD *)(v5 - 200))
          goto LABEL_9;
      }
      __swift_destroy_boxed_opaque_existential_1(v5 - 128);
    }
    v32 = *(_QWORD *)(v5 - 256);
    v31 = *(_QWORD *)(v5 - 248);
    if (*(_QWORD *)(v20 + 24))
    {
      outlined init with copy of AnyTrackedValue(v20, v5 - 128);
      if (*(_QWORD *)(v5 - 104))
      {
LABEL_14:
        __swift_destroy_boxed_opaque_existential_1(v5 - 128);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v31 + 16))(v32, v23, a1);
        (*(void (**)(uint64_t, uint64_t))(v31 + 8))(v32, a1);
        v21 = 0;
        return v21 & 1;
      }
    }
    else
    {
      v33 = *(_OWORD *)(v20 + 16);
      *(_OWORD *)(v5 - 128) = *(_OWORD *)v20;
      *(_OWORD *)(v5 - 112) = v33;
      *(_QWORD *)(v5 - 96) = *(_QWORD *)(v20 + 32);
      if (*(_QWORD *)(v5 - 104))
        goto LABEL_14;
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v31 + 16))(v32, v23, a1);
    v34 = v32 + *(int *)(a1 + 56);
    if (*(_QWORD *)(v34 + 24))
    {
      outlined init with copy of AnyTrackedValue(v34, v5 - 128);
    }
    else
    {
      v35 = *(_OWORD *)(v34 + 16);
      *(_OWORD *)(v5 - 128) = *(_OWORD *)v34;
      *(_OWORD *)(v5 - 112) = v35;
      *(_QWORD *)(v5 - 96) = *(_QWORD *)(v34 + 32);
    }
    (*(void (**)(uint64_t, uint64_t))(v31 + 8))(v32, a1);
    v36 = *(_QWORD *)(v5 - 104);
    v21 = v36 == 0;
    if (v36)
      goto LABEL_20;
  }
  else
  {
    v21 = 0;
  }
  return v21 & 1;
}

uint64_t TimeDataFormatting.Configuration.formatAndFrequency(for:mode:)(uint64_t a1, char *a2, uint64_t a3, _BYTE *a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t result;
  __int128 v27;
  char v28;
  _QWORD v29[2];
  uint64_t v30;
  uint64_t v31;
  char *v32;
  _BYTE *v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;

  v32 = a2;
  v33 = a4;
  v29[1] = a3;
  v31 = a1;
  v7 = *(_QWORD *)(a5 + 32);
  v8 = *(_QWORD *)(a5 + 16);
  swift_getAssociatedTypeWitness();
  v9 = type metadata accessor for Optional();
  v30 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)v29 - v10;
  type metadata accessor for Date?(0, &lazy cache variable for type metadata for Date?, (void (*)(uint64_t))MEMORY[0x24BDCE900]);
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)v29 - v13;
  v15 = type metadata accessor for Date();
  v16 = *(_QWORD *)(v15 - 8);
  v17 = MEMORY[0x24BDAC7A8](v15);
  v19 = (char *)v29 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*v33 != 1)
    goto LABEL_7;
  v20 = (*(uint64_t (**)(uint64_t, uint64_t, double))(v7 + 72))(v8, v7, v17);
  v33 = v29;
  MEMORY[0x24BDAC7A8](v20);
  v21 = *(_QWORD *)(a5 + 24);
  v29[-6] = v8;
  v29[-5] = v21;
  v22 = *(_QWORD *)(a5 + 40);
  v29[-4] = v7;
  v29[-3] = v22;
  v29[0] = v5;
  v29[-2] = v5;
  _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF((void (*)(char *, char *))partial apply for closure #1 in TimeDataFormatting.Configuration.formatAndFrequency(for:mode:), (uint64_t)&v29[-8], MEMORY[0x24BEE4078], v15, v23, (uint64_t)v14);
  (*(void (**)(char *, uint64_t))(v30 + 8))(v11, v9);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15) != 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v19, v14, v15);
    lazy protocol witness table accessor for type Date and conformance Date();
    v24 = dispatch thunk of static Comparable.< infix(_:_:)();
    (*(void (**)(char *, uint64_t))(v16 + 8))(v19, v15);
    v5 = v29[0];
    if ((v24 & 1) != 0)
      goto LABEL_5;
LABEL_7:
    result = outlined init with copy of AnyTrackedValue(v5 + *(int *)(a5 + 52), v31);
    goto LABEL_11;
  }
  outlined destroy of ResolvableTextSegmentAttribute.Value?((uint64_t)v14, &lazy cache variable for type metadata for Date?, (void (*)(uint64_t))MEMORY[0x24BDCE900]);
  v5 = v29[0];
LABEL_5:
  v25 = v5 + *(int *)(a5 + 56);
  if (*(_QWORD *)(v25 + 24))
  {
    outlined init with copy of AnyTrackedValue(v25, (uint64_t)&v34);
  }
  else
  {
    v27 = *(_OWORD *)(v25 + 16);
    v34 = *(_OWORD *)v25;
    v35 = v27;
    v36 = *(_QWORD *)(v25 + 32);
  }
  if (!*((_QWORD *)&v35 + 1))
  {
    result = outlined init with copy of AnyTrackedValue(v5 + *(int *)(a5 + 52), v31);
    v28 = 2;
    goto LABEL_12;
  }
  result = outlined init with take of ScrollStateRequest(&v34, v31);
LABEL_11:
  v28 = 3;
LABEL_12:
  *v32 = v28;
  return result;
}

uint64_t DiscreteFormatStyle.alwaysOnDisplayFormat<A>(source:secondsUpdateFrequencyBudget:sizeVariant:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t *a7@<X8>, double a8@<D0>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  double v24;
  uint64_t v25;
  char *v26;
  void (*v27)(char *, uint64_t, uint64_t, double);
  void (*v28)(char *, char *, uint64_t);
  uint64_t AssociatedTypeWitness;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t result;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void (*v40)(__int128 *, uint64_t, uint64_t);
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  char v47;
  uint64_t *boxed_opaque_existential_1;
  char *v49;
  uint64_t v50;
  char *v51;
  char *v52;
  void (*v53)(char *, char *, uint64_t);
  char *v54;
  uint64_t TupleTypeMetadata2;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t *v63;
  uint64_t v64;
  uint64_t v65[3];
  uint64_t v66;
  uint64_t v67;
  __int128 v68;
  __int128 v69;
  uint64_t v70;
  char v71;
  __int128 v72;
  uint64_t v73;
  uint64_t v74;

  v9 = v8;
  v61 = a6;
  v60 = a4;
  v59 = a1;
  v63 = a7;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  MEMORY[0x24BDAC7A8](TupleTypeMetadata2);
  v54 = (char *)&v52 - v14;
  v15 = *(_QWORD *)(a3 - 8);
  MEMORY[0x24BDAC7A8](v16);
  v18 = (char *)&v52 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v19);
  v21 = (char *)&v52 - v20;
  v23 = type metadata accessor for _MixedAoDFrequencyFormatInitializer(0, a3, a5, v22);
  v24 = MEMORY[0x24BDAC7A8](v23);
  v26 = (char *)&v52 - v25;
  v62 = *a2;
  v27 = *(void (**)(char *, uint64_t, uint64_t, double))(v15 + 16);
  v58 = v9;
  v27(v21, v9, a3, v24);
  v56 = v15;
  v28 = *(void (**)(char *, char *, uint64_t))(v15 + 32);
  v52 = v21;
  v53 = v28;
  v28(v26, v21, a3);
  v57 = a5;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v30 = swift_getAssociatedTypeWitness();
  v65[0] = AssociatedTypeWitness;
  v65[1] = v30;
  swift_getExtendedExistentialTypeMetadata_unique();
  if (swift_dynamicCast())
  {
    outlined init with take of ScrollStateRequest(&v72, (uint64_t)&v68);
    v31 = *((_QWORD *)&v69 + 1);
    v32 = v70;
    __swift_project_boxed_opaque_existential_1(&v68, *((uint64_t *)&v69 + 1));
    v65[0] = v62;
    LOBYTE(v31) = (*(uint64_t (**)(__int128 *, uint64_t *, uint64_t, uint64_t, double))(v32 + 24))(&v72, v65, v31, v32, a8);
    v33 = v73;
    __swift_project_boxed_opaque_existential_1(&v72, v73);
    v34 = v63;
    DiscreteFormatStyle.paused<A>(accordingTo:)(v59, v33, v60, v61, v63);
    *((_BYTE *)v34 + 40) = v31 & 1;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v72);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)&v68);
  }
  else
  {
    v37 = v62;
    v36 = v63;
    ((void (*)(char *, uint64_t, uint64_t))v27)(v18, v58, a3);
    type metadata accessor for UpdateFrequencyDependentFormatStyle();
    if (swift_dynamicCast())
    {
      outlined init with take of ScrollStateRequest(&v68, (uint64_t)&v72);
      v38 = v73;
      v39 = v74;
      __swift_project_boxed_opaque_existential_1(&v72, v73);
      LOBYTE(v68) = 2;
      v40 = *(void (**)(__int128 *, uint64_t, uint64_t))(v39 + 16);
      v66 = v38;
      v67 = v39;
      __swift_allocate_boxed_opaque_existential_1(v65);
      v40(&v68, v38, v39);
      v41 = v66;
      v42 = v67;
      v43 = __swift_project_boxed_opaque_existential_1(v65, v66);
      v64 = v37;
      v44 = *(_QWORD *)(v41 - 8);
      MEMORY[0x24BDAC7A8](v43);
      v46 = (char *)&v52 - ((v45 + 15) & 0xFFFFFFFFFFFFFFF0);
      v47 = FormatStyle.exactSizeVariant(_:)(v46, &v64, v41);
      *((_QWORD *)&v69 + 1) = v41;
      v70 = v42;
      boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v68);
      (*(void (**)(uint64_t *, char *, uint64_t))(v44 + 32))(boxed_opaque_existential_1, v46, v41);
      v71 = v47 & 1;
      type metadata accessor for (style: UpdateFrequencyDependentFormatStyle, exact: Bool)();
      v49 = v54;
      v50 = TupleTypeMetadata2;
      swift_dynamicCast();
      LOBYTE(v50) = v49[*(int *)(v50 + 48)];
      v51 = v52;
      v53(v52, v49, a3);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v65);
      DiscreteFormatStyle.paused<A>(accordingTo:)(v59, a3, v60, v61, v36);
      (*(void (**)(char *, uint64_t))(v56 + 8))(v51, a3);
      *((_BYTE *)v36 + 40) = v50;
      return __swift_destroy_boxed_opaque_existential_1((uint64_t)&v72);
    }
    else
    {
      v70 = 0;
      v68 = 0u;
      v69 = 0u;
      result = outlined destroy of ResolvableTextSegmentAttribute.Value?((uint64_t)&v68, &lazy cache variable for type metadata for UpdateFrequencyDependentFormatStyle?, (void (*)(uint64_t))type metadata accessor for UpdateFrequencyDependentFormatStyle);
      *(_OWORD *)((char *)v36 + 25) = 0u;
      *(_OWORD *)v36 = 0u;
      *((_OWORD *)v36 + 1) = 0u;
    }
  }
  return result;
}

uint64_t DiscreteFormatStyle.paused<A>(accordingTo:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X4>, uint64_t *a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t AssociatedTypeWitness;
  uint64_t v17;
  uint64_t v18;
  double v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v30 = *(_QWORD *)(a2 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v27 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)&v25 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = v15;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v17 = type metadata accessor for Optional();
  v18 = *(_QWORD *)(v17 - 8);
  v19 = MEMORY[0x24BDAC7A8](v17);
  v21 = (char *)&v25 - v20;
  (*(void (**)(uint64_t, uint64_t, double))(a4 + 72))(a3, a4, v19);
  LODWORD(AssociatedTypeWitness) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8)
                                                                                       + 48))(v21, 1, AssociatedTypeWitness);
  (*(void (**)(char *, uint64_t))(v18 + 8))(v21, v17);
  if ((_DWORD)AssociatedTypeWitness != 1)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v26 + 16))(v14, a1, a3);
    (*(void (**)(char *, uint64_t, uint64_t))(v30 + 16))(v27, v28, a2);
    v31 = a3;
    v32 = a2;
    v33 = a4;
    v34 = v29;
    type metadata accessor for PausedFormatStyle();
  }
  v22 = v29;
  a5[3] = a2;
  a5[4] = v22;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(a5);
  return (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v30 + 16))(boxed_opaque_existential_1, v28, a2);
}

void TimeDataFormatting.Configuration.init(source:highFrequencyFormat:lowFrequencyFormat:)(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 32))(a3, a1, a2);
  type metadata accessor for TimeDataFormatting.Configuration();
}

uint64_t sub_2350A776C(uint64_t a1)
{
  uint64_t v1;
  __int128 *v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v6;
  __int128 v7;

  result = outlined init with take of ScrollStateRequest(v2, v3 + *(int *)(a1 + 52));
  v6 = v3 + *(int *)(a1 + 56);
  if (*(_QWORD *)(v1 + 24))
    return outlined init with take of ScrollStateRequest((__int128 *)v1, v6);
  v7 = *(_OWORD *)(v1 + 16);
  *(_OWORD *)v6 = *(_OWORD *)v1;
  *(_OWORD *)(v6 + 16) = v7;
  *(_QWORD *)(v6 + 32) = *(_QWORD *)(v1 + 32);
  return result;
}

__n128 TimeDataFormatting.Configuration.hash(into:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  __n128 result;
  __int128 v6;
  __n128 v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v10[4];

  __swift_project_boxed_opaque_existential_1((_QWORD *)(v2 + *(int *)(a2 + 52)), *(_QWORD *)(v2 + *(int *)(a2 + 52) + 24));
  dispatch thunk of Hashable.hash(into:)();
  v4 = v2 + *(int *)(a2 + 56);
  if (*(_QWORD *)(v4 + 24))
  {
    outlined init with copy of AnyTrackedValue(v4, (uint64_t)&v7);
    if (!*((_QWORD *)&v8 + 1))
      return result;
  }
  else
  {
    result = *(__n128 *)v4;
    v6 = *(_OWORD *)(v4 + 16);
    v7 = *(__n128 *)v4;
    v8 = v6;
    v9 = *(_QWORD *)(v4 + 32);
    if (!*((_QWORD *)&v6 + 1))
      return result;
  }
  outlined init with take of ScrollStateRequest((__int128 *)&v7, (uint64_t)v10);
  __swift_project_boxed_opaque_existential_1(v10, v10[3]);
  dispatch thunk of Hashable.hash(into:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v10);
  return result;
}

uint64_t equals #1 <A, B><A1>(lhs:rhs:) in static TimeDataFormatting.Configuration.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  int v15;
  void (*v16)(_BYTE *, uint64_t, uint64_t, uint64_t);
  char v17;
  _BYTE v19[32];

  v7 = type metadata accessor for Optional();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = &v19[-v9];
  v11 = *(_QWORD *)(a5 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v14 = &v19[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  outlined init with copy of Any(a2, (uint64_t)v19);
  v15 = swift_dynamicCast();
  v16 = *(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v11 + 56);
  if (v15)
  {
    v16(v10, 0, 1, a5);
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v11 + 32))(v14, v10, a5);
    v17 = dispatch thunk of static Equatable.== infix(_:_:)();
    (*(void (**)(_BYTE *, uint64_t))(v11 + 8))(v14, a5);
  }
  else
  {
    v16(v10, 1, 1, a5);
    (*(void (**)(_BYTE *, uint64_t))(v8 + 8))(v10, v7);
    v17 = 0;
  }
  return v17 & 1;
}

Swift::Int TimeDataFormatting.Configuration.hashValue.getter(uint64_t a1)
{
  _BYTE v3[72];

  Hasher.init(_seed:)();
  TimeDataFormatting.Configuration.hash(into:)((uint64_t)v3, a1);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance TimeDataFormatting.Configuration<A, B>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance TimeDataFormatting.Configuration<A, B>(a1, a2, a3, (void (*)(_BYTE *, uint64_t))TimeDataFormatting.Configuration.hash(into:));
}

void protocol witness for static Equatable.== infix(_:_:) in conformance TimeDataFormatting.Configuration<A, B>()
{
  static TimeDataFormatting.Configuration.== infix(_:_:)();
}

uint64_t PausedFormatStyle.endDate.getter@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE v17[16];
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v5 = a1[4];
  v6 = a1[2];
  swift_getAssociatedTypeWitness();
  v7 = type metadata accessor for Optional();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = MEMORY[0x24BDAC7A8](v7);
  v11 = &v17[-v10];
  (*(void (**)(uint64_t, uint64_t, double))(v5 + 72))(v6, v5, v9);
  v12 = a1[3];
  v18 = v6;
  v19 = v12;
  v13 = a1[5];
  v20 = v5;
  v21 = v13;
  v22 = v2;
  v14 = type metadata accessor for Date();
  _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF((void (*)(char *, char *))partial apply for closure #1 in TimeDataFormatting.Configuration.formatAndFrequency(for:mode:), (uint64_t)v17, MEMORY[0x24BEE4078], v14, v15, a2);
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v8 + 8))(v11, v7);
}

uint64_t PausedFormatStyle.format(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t AssociatedTypeWitness;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  uint64_t v18;
  char *v19;
  void (*v20)(uint64_t, uint64_t, uint64_t);
  char *v21;
  char *v22;
  char v23;
  void (*v24)(char *, uint64_t);
  char *v25;
  uint64_t v26;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v32 = a3;
  v33 = a1;
  v4 = type metadata accessor for Date();
  v30 = *(_QWORD *)(v4 - 8);
  v31 = v4;
  MEMORY[0x24BDAC7A8](v4);
  v29 = (char *)&v28 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v28 = (char *)&v28 - v7;
  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a2 + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v11 = type metadata accessor for Optional();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v11);
  v14 = (char *)&v28 - v13;
  v15 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v17 = MEMORY[0x24BDAC7A8](v16);
  v19 = (char *)&v28 - v18;
  (*(void (**)(uint64_t, uint64_t, double))(v8 + 72))(v9, v8, v17);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v14, 1, AssociatedTypeWitness) == 1)
  {
    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v19, v14, AssociatedTypeWitness);
    v20 = *(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 48);
    v21 = v28;
    v20(v33, v9, v8);
    v22 = v29;
    v20((uint64_t)v19, v9, v8);
    v23 = static Date.> infix(_:_:)();
    v24 = *(void (**)(char *, uint64_t))(v30 + 8);
    v25 = v22;
    v26 = v31;
    v24(v25, v31);
    v24(v21, v26);
    if ((v23 & 1) != 0)
    {
      dispatch thunk of FormatStyle.format(_:)();
      return (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v19, AssociatedTypeWitness);
    }
    (*(void (**)(char *, uint64_t))(v15 + 8))(v19, AssociatedTypeWitness);
  }
  return dispatch thunk of FormatStyle.format(_:)();
}

uint64_t PausedFormatStyle.discreteInput(before:)@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v24;
  uint64_t v25;
  void (*v26)(uint64_t, uint64_t);
  char *v27;
  char v28;
  void (*v29)(char *, uint64_t);
  char *v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(char *, uint64_t);
  char *v36;
  char *v37;
  uint64_t v38;
  char *v39;
  char v40;
  char *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD v46[2];
  char *v47;
  char *v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;

  v57 = a3;
  v58 = a1;
  v5 = a2[2];
  v55 = a2[4];
  v56 = v5;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v51 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v50 = (char *)v46 - v7;
  type metadata accessor for Date?(0, &lazy cache variable for type metadata for Date?, (void (*)(uint64_t))MEMORY[0x24BDCE900]);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)v46 - v9;
  v11 = type metadata accessor for Date();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v11);
  v52 = (char *)v46 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v14);
  v53 = AssociatedTypeWitness;
  v54 = (char *)v46 - v15;
  v16 = type metadata accessor for Optional();
  v17 = *(_QWORD *)(v16 - 8);
  MEMORY[0x24BDAC7A8](v16);
  v19 = (char *)v46 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v20);
  v22 = (char *)v46 - v21;
  dispatch thunk of DiscreteFormatStyle.discreteInput(before:)();
  PausedFormatStyle.endDate.getter(a2, (uint64_t)v10);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11) == 1)
  {
    outlined destroy of ResolvableTextSegmentAttribute.Value?((uint64_t)v10, &lazy cache variable for type metadata for Date?, (void (*)(uint64_t))MEMORY[0x24BDCE900]);
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v17 + 32))(v57, v22, v16);
  }
  else
  {
    v47 = v19;
    v48 = v22;
    v49 = v16;
    v25 = v53;
    v24 = v54;
    (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v54, v10, v11);
    v26 = *(void (**)(uint64_t, uint64_t))(v55 + 48);
    v27 = v52;
    v26(v58, v56);
    v28 = static Date.< infix(_:_:)();
    v29 = *(void (**)(char *, uint64_t))(v12 + 8);
    v29(v27, v11);
    if ((v28 & 1) != 0)
    {
      v30 = v27;
      v58 = v11;
      v46[1] = v3;
      v32 = v47;
      v31 = v48;
      v33 = v49;
      (*(void (**)(char *, char *, uint64_t))(v17 + 16))(v47, v48, v49);
      v34 = v51;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v51 + 48))(v32, 1, v25) == 1)
      {
        v29(v54, v58);
        v35 = *(void (**)(char *, uint64_t))(v17 + 8);
        v35(v31, v33);
        v35(v32, v33);
        return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v34 + 56))(v57, 1, 1, v25);
      }
      else
      {
        v36 = v50;
        v47 = *(char **)(v34 + 32);
        ((void (*)(char *, char *, uint64_t))v47)(v50, v32, v25);
        v37 = v30;
        v38 = v55;
        ((void (*)(char *, uint64_t, uint64_t))v26)(v36, v56, v55);
        v39 = v54;
        v40 = static Date.> infix(_:_:)();
        v41 = v37;
        v42 = v36;
        v43 = v58;
        v29(v41, v58);
        v44 = v57;
        if ((v40 & 1) != 0)
        {
          v29(v39, v43);
          (*(void (**)(char *, uint64_t))(v17 + 8))(v31, v49);
          v45 = v53;
          ((void (*)(uint64_t, char *, uint64_t))v47)(v44, v42, v53);
          return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v51 + 56))(v44, 0, 1, v45);
        }
        else
        {
          (*(void (**)(uint64_t, uint64_t))(v38 + 72))(v56, v38);
          (*(void (**)(char *, uint64_t))(v51 + 8))(v42, v53);
          v29(v39, v43);
          return (*(uint64_t (**)(char *, uint64_t))(v17 + 8))(v31, v49);
        }
      }
    }
    else
    {
      (*(void (**)(uint64_t))(v55 + 72))(v56);
      v29(v24, v11);
      return (*(uint64_t (**)(char *, uint64_t))(v17 + 8))(v48, v49);
    }
  }
}

uint64_t PausedFormatStyle.discreteInput(after:)@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t AssociatedTypeWitness;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v23;
  char *v24;
  void (*v25)(uint64_t, uint64_t);
  char *v26;
  char v27;
  void (*v28)(char *, uint64_t);
  char *v29;
  uint64_t v30;
  void (*v31)(_QWORD, _QWORD, _QWORD);
  char *v32;
  uint64_t v33;
  char *v34;
  void (*v35)(_QWORD, _QWORD);
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char v41;
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void (*v47)(_QWORD, _QWORD, _QWORD);
  uint64_t v48;
  char *v49;
  char *v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;

  v57 = a3;
  v58 = a1;
  v4 = a2[4];
  v55 = a2[2];
  v56 = v4;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v52 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v50 = (char *)&v47 - v6;
  type metadata accessor for Date?(0, &lazy cache variable for type metadata for Date?, (void (*)(uint64_t))MEMORY[0x24BDCE900]);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v47 - v8;
  v10 = type metadata accessor for Date();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v51 = (char *)&v47 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v13);
  v53 = AssociatedTypeWitness;
  v54 = (char *)&v47 - v14;
  v15 = type metadata accessor for Optional();
  v16 = *(_QWORD *)(v15 - 8);
  MEMORY[0x24BDAC7A8](v15);
  v18 = (char *)&v47 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v19);
  v21 = (char *)&v47 - v20;
  dispatch thunk of DiscreteFormatStyle.discreteInput(after:)();
  PausedFormatStyle.endDate.getter(a2, (uint64_t)v9);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10) == 1)
  {
    outlined destroy of ResolvableTextSegmentAttribute.Value?((uint64_t)v9, &lazy cache variable for type metadata for Date?, (void (*)(uint64_t))MEMORY[0x24BDCE900]);
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v16 + 32))(v57, v21, v15);
  }
  else
  {
    v47 = (void (*)(_QWORD, _QWORD, _QWORD))v18;
    v48 = v16;
    v49 = v21;
    v23 = v53;
    v24 = v54;
    (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v54, v9, v10);
    v25 = *(void (**)(uint64_t, uint64_t))(v56 + 48);
    v26 = v51;
    v25(v58, v55);
    v27 = static Date.< infix(_:_:)();
    v28 = *(void (**)(char *, uint64_t))(v11 + 8);
    v28(v26, v10);
    if ((v27 & 1) != 0)
    {
      v58 = v10;
      v29 = v26;
      v31 = v47;
      v30 = v48;
      v32 = v49;
      (*(void (**)(_QWORD, char *, uint64_t))(v48 + 16))(v47, v49, v15);
      v33 = v52;
      if ((*(unsigned int (**)(_QWORD, uint64_t, uint64_t))(v52 + 48))(v31, 1, v23) == 1)
      {
        v34 = v32;
        v35 = *(void (**)(_QWORD, _QWORD))(v30 + 8);
        v35(v31, v15);
        (*(void (**)(uint64_t))(v56 + 72))(v55);
        v28(v54, v58);
        return ((uint64_t (*)(char *, uint64_t))v35)(v34, v15);
      }
      else
      {
        v36 = v50;
        v47 = *(void (**)(_QWORD, _QWORD, _QWORD))(v33 + 32);
        v47(v50, v31, v23);
        v37 = v29;
        v39 = v55;
        v38 = v56;
        ((void (*)(char *, uint64_t, uint64_t))v25)(v36, v55, v56);
        v40 = v54;
        v41 = static Date.< infix(_:_:)();
        v42 = v37;
        v43 = v36;
        v44 = v58;
        v28(v42, v58);
        v45 = v57;
        if ((v41 & 1) != 0)
        {
          v28(v40, v44);
          (*(void (**)(char *, uint64_t))(v48 + 8))(v49, v15);
          v46 = v53;
          v47(v45, v43, v53);
          return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v52 + 56))(v45, 0, 1, v46);
        }
        else
        {
          (*(void (**)(uint64_t, uint64_t))(v38 + 72))(v39, v38);
          (*(void (**)(char *, uint64_t))(v52 + 8))(v43, v53);
          v28(v40, v44);
          return (*(uint64_t (**)(char *, uint64_t))(v48 + 8))(v49, v15);
        }
      }
    }
    else
    {
      v28(v24, v10);
      (*(void (**)(char *, uint64_t))(v48 + 8))(v49, v15);
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v52 + 56))(v57, 1, 1, v23);
    }
  }
}

uint64_t PausedFormatStyle.input(before:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, _QWORD, _QWORD))
{
  return a3(a1, *(_QWORD *)(a2 + 24), *(_QWORD *)(a2 + 40));
}

uint64_t PausedFormatStyle.hash(into:)()
{
  dispatch thunk of Hashable.hash(into:)();
  return dispatch thunk of Hashable.hash(into:)();
}

uint64_t static PausedFormatStyle.== infix(_:_:)()
{
  if ((dispatch thunk of static Equatable.== infix(_:_:)() & 1) != 0)
    type metadata accessor for PausedFormatStyle();
  return 0;
}

uint64_t PausedFormatStyle.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x656372756F73 && a2 == 0xE600000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 1702060386 && a2 == 0xE400000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t PausedFormatStyle.CodingKeys.stringValue.getter(char a1)
{
  if ((a1 & 1) != 0)
    return 1702060386;
  else
    return 0x656372756F73;
}

void PausedFormatStyle.encode(to:)()
{
  type metadata accessor for PausedFormatStyle.CodingKeys();
}

uint64_t sub_2350A88CC(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v9;

  MEMORY[0x23B7C9C04](&protocol conformance descriptor for PausedFormatStyle<A, B>.CodingKeys, a1);
  v3 = type metadata accessor for KeyedEncodingContainer();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v9 - v5;
  __swift_project_boxed_opaque_existential_1(v1, v1[3]);
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  *(_BYTE *)(v2 - 112) = 0;
  v7 = *(_QWORD *)(v2 - 72);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v7)
  {
    *(_BYTE *)(v2 - 112) = 1;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

void PausedFormatStyle.init(from:)(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v11[18];

  v11[3] = a3;
  v11[2] = *(_QWORD *)(a2 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v11[5] = (char *)v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11[4] = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v11[9] = (char *)v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11[14] = v7;
  v11[15] = v8;
  v11[16] = v9;
  v11[17] = v10;
  type metadata accessor for PausedFormatStyle.CodingKeys();
}

void sub_2350A8AA4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  MEMORY[0x23B7C9C04](&protocol conformance descriptor for PausedFormatStyle<A, B>.CodingKeys, a1);
  v6 = type metadata accessor for KeyedDecodingContainer();
  *(_QWORD *)(v5 - 120) = v6;
  *(_QWORD *)(v5 - 144) = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  *(_QWORD *)(v5 - 136) = v3;
  *(_QWORD *)(v5 - 112) = v3;
  *(_QWORD *)(v5 - 104) = v4;
  *(_QWORD *)(v5 - 176) = v4;
  *(_QWORD *)(v5 - 168) = v2;
  *(_QWORD *)(v5 - 160) = v1;
  *(_QWORD *)(v5 - 96) = v1;
  *(_QWORD *)(v5 - 88) = v2;
  type metadata accessor for PausedFormatStyle();
}

uint64_t sub_2350A8B1C(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;

  v5 = *(_QWORD *)(a1 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v7 = (char *)&v18 - v6;
  __swift_project_boxed_opaque_existential_1(v2, v2[3]);
  *(_QWORD *)(v3 - 128) = v1;
  v8 = *(_QWORD *)(v3 - 72);
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v8)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v2);
  *(_QWORD *)(v3 - 224) = v5;
  *(_QWORD *)(v3 - 216) = a1;
  v9 = v7;
  *(_QWORD *)(v3 - 72) = v2;
  v10 = *(_QWORD *)(v3 - 176);
  v12 = *(_QWORD *)(v3 - 192);
  v11 = *(_QWORD *)(v3 - 184);
  *(_BYTE *)(v3 - 112) = 0;
  v13 = *(_QWORD *)(v3 - 152);
  v14 = *(_QWORD *)(v3 - 136);
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 32))(v9, v13, v14);
  *(_BYTE *)(v3 - 112) = 1;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v3 - 144) + 8))(*(_QWORD *)(v3 - 128), *(_QWORD *)(v3 - 120));
  v15 = *(_QWORD *)(v3 - 216);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v3 - 208) + 32))(&v9[*(int *)(v15 + 52)], v11, v10);
  v16 = *(_QWORD *)(v3 - 224);
  (*(void (**)(_QWORD, char *, uint64_t))(v16 + 16))(*(_QWORD *)(v3 - 200), v9, v15);
  __swift_destroy_boxed_opaque_existential_1(*(_QWORD *)(v3 - 72));
  return (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v9, v15);
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance PausedFormatStyle<A, B>.CodingKeys(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return static Pair.CodingKeys.== infix(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance PausedFormatStyle<A, B>.CodingKeys()
{
  char *v0;

  return Pair.CodingKeys.hashValue.getter(*v0);
}

void protocol witness for Hashable.hash(into:) in conformance PausedFormatStyle<A, B>.CodingKeys(uint64_t a1)
{
  char *v1;

  Pair.CodingKeys.hash(into:)(a1, *v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance PausedFormatStyle<A, B>.CodingKeys()
{
  char *v0;
  _BYTE v2[72];

  Hasher.init(_seed:)();
  Pair.CodingKeys.hash(into:)((uint64_t)v2, *v0);
  return Hasher._finalize()();
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance PausedFormatStyle<A, B>.CodingKeys()
{
  char *v0;

  return PausedFormatStyle.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance PausedFormatStyle<A, B>.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = PausedFormatStyle.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance PausedFormatStyle<A, B>.CodingKeys@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = protocol witness for static _AttributeBody.comparisonMode.getter in conformance ResetDeltaModifier.ChildPhase();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance PausedFormatStyle<A, B>.CodingKeys(uint64_t a1)
{
  MEMORY[0x23B7C9C04](&protocol conformance descriptor for PausedFormatStyle<A, B>.CodingKeys, a1);
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PausedFormatStyle<A, B>.CodingKeys(uint64_t a1)
{
  MEMORY[0x23B7C9C04](&protocol conformance descriptor for PausedFormatStyle<A, B>.CodingKeys, a1);
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for DiscreteFormatStyle.input(before:) in conformance PausedFormatStyle<A, B>(uint64_t a1, uint64_t a2)
{
  return PausedFormatStyle.input(before:)(a1, a2, (uint64_t (*)(uint64_t, _QWORD, _QWORD))MEMORY[0x24BDCC9C8]);
}

uint64_t protocol witness for DiscreteFormatStyle.input(after:) in conformance PausedFormatStyle<A, B>(uint64_t a1, uint64_t a2)
{
  return PausedFormatStyle.input(before:)(a1, a2, (uint64_t (*)(uint64_t, _QWORD, _QWORD))MEMORY[0x24BDCC9C0]);
}

void protocol witness for Decodable.init(from:) in conformance PausedFormatStyle<A, B>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  PausedFormatStyle.init(from:)(a1, *(_QWORD *)(a2 + 24), a3);
}

void protocol witness for Encodable.encode(to:) in conformance PausedFormatStyle<A, B>()
{
  PausedFormatStyle.encode(to:)();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance PausedFormatStyle<A, B>(uint64_t a1)
{
  return PausedFormatStyle.hashValue.getter(a1, (void (*)(_BYTE *, uint64_t))PausedFormatStyle.hash(into:));
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance PausedFormatStyle<A, B>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance TimeDataFormatting.Configuration<A, B>(a1, a2, a3, (void (*)(_BYTE *, uint64_t))PausedFormatStyle.hash(into:));
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance PausedFormatStyle<A, B>()
{
  return static PausedFormatStyle.== infix(_:_:)();
}

uint64_t MixedFormatStyle.base(for:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;

  v3 = v2;
  v6 = *(_QWORD *)(a1 + 16);
  swift_getAssociatedTypeWitness();
  type metadata accessor for ClosedRange();
  if ((ClosedRange.contains(_:)() & 1) == 0)
    v3 = v2 + *(int *)(a1 + 72);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a2, v3, v6);
}

uint64_t MixedFormatStyle.effectiveInput(for:)@<X0>(char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  void (*v3)(char *, uint64_t);
  void (*v4)(char *, uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t AssociatedTypeWitness;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  void (*v23)(char *, char *, uint64_t);
  char *v24;
  uint64_t v25;
  void (*v26)(char *, char *, uint64_t);
  uint64_t v27;
  uint64_t v28;
  void (*v29)(char *, uint64_t);
  void (*v30)(char *, uint64_t);
  char *v31;
  char *v32;
  void (*v33)(char *, char *, uint64_t);
  char *v34;
  void (*v35)(char *, char *, uint64_t);
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void (*v42)(char *, uint64_t);
  _QWORD v44[2];
  char *v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  void (*v50)(char *, uint64_t);
  char *v51;
  uint64_t v52;
  char *v53;
  char *v54;
  void (*v55)(char *, char *, uint64_t);
  uint64_t v56;
  uint64_t v57;
  __int128 v58;
  uint64_t v59;

  v4 = v3;
  v46 = a3;
  v49 = *(_QWORD *)(a2 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v44[0] = (char *)v44 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8);
  v54 = (char *)v44 - v9;
  MEMORY[0x24BDAC7A8](v10);
  v48 = (char *)v44 - v11;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v13 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v45 = (char *)v44 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v15);
  v53 = (char *)v44 - v16;
  MEMORY[0x24BDAC7A8](v17);
  v19 = (char *)v44 - v18;
  v20 = (uint64_t)v3 + *(int *)(a2 + 68);
  v21 = *(_QWORD *)(a2 + 32);
  type metadata accessor for ClosedRange();
  v22 = dispatch thunk of static Comparable.> infix(_:_:)();
  v47 = v13;
  v23 = *(void (**)(char *, char *, uint64_t))(v13 + 16);
  v24 = v48;
  v51 = a1;
  v55 = v23;
  v23(v19, a1, AssociatedTypeWitness);
  v25 = v49;
  v26 = *(void (**)(char *, char *, uint64_t))(v49 + 16);
  v50 = v4;
  v26(v24, (char *)v4, a2);
  v44[1] = v20;
  v52 = v21;
  if ((v22 & 1) != 0)
  {
    v27 = *(_QWORD *)(a2 + 56);
    v56 = AssociatedTypeWitness;
    v57 = v21;
    v58 = *(_OWORD *)(a2 + 40);
    v59 = v27;
    type metadata accessor for TimeDataFormatting.FormatTransition();
  }
  v28 = v47;
  v29 = *(void (**)(char *, uint64_t))(v25 + 8);
  v29(v24, a2);
  v30 = *(void (**)(char *, uint64_t))(v28 + 8);
  v30(v19, AssociatedTypeWitness);
  v31 = v53;
  v32 = v51;
  v33 = v55;
  v55(v53, v51, AssociatedTypeWitness);
  v34 = v54;
  v26(v54, (char *)v50, a2);
  v50 = v30;
  v35 = v26;
  v36 = v52;
  v37 = v31;
  LOBYTE(v31) = dispatch thunk of static Comparable.< infix(_:_:)();
  v33(v45, v37, AssociatedTypeWitness);
  v38 = (char *)v44[0];
  v35((char *)v44[0], v34, a2);
  if ((v31 & 1) != 0)
  {
    v39 = *(_QWORD *)(a2 + 40);
    v40 = *(_QWORD *)(a2 + 48);
    v41 = *(_QWORD *)(a2 + 56);
    v56 = AssociatedTypeWitness;
    v57 = v36;
    v49 = v39;
    *(_QWORD *)&v58 = v39;
    *((_QWORD *)&v58 + 1) = v40;
    v59 = v41;
    type metadata accessor for TimeDataFormatting.FormatTransition();
  }
  v29(v38, a2);
  v42 = v50;
  v50(v45, AssociatedTypeWitness);
  v29(v34, a2);
  v42(v37, AssociatedTypeWitness);
  return ((uint64_t (*)(uint64_t, char *, uint64_t))v55)(v46, v32, AssociatedTypeWitness);
}

uint64_t MixedFormatStyle.format(_:)@<X0>(char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t AssociatedTypeWitness;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  _QWORD v14[2];

  v14[1] = a3;
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v8 = (char *)v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v10 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v12 = (char *)v14 - v11;
  MixedFormatStyle.effectiveInput(for:)(a1, a2, (uint64_t)v14 - v11);
  MixedFormatStyle.base(for:)(a2, (uint64_t)v8);
  dispatch thunk of FormatStyle.format(_:)();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, AssociatedTypeWitness);
}

uint64_t MixedFormatStyle.discreteInput(before:)@<X0>(char *a1@<X0>, uint64_t a2@<X1>, char *a3@<X8>)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  char *v41;
  char *v42;
  char v43;
  uint64_t v44;
  void (*v45)(char *, char *, uint64_t);
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  void (*v57)(char *, char *, uint64_t);
  uint64_t v58;
  uint64_t (*v59)(char *, uint64_t, uint64_t);
  uint64_t v60;
  void (*v61)(char *, uint64_t);
  void (*v62)(char *, char *, uint64_t);
  uint64_t v63;
  uint64_t v64;
  char *v65;
  char *v66;
  unsigned int v67;
  uint64_t v68;
  char *v69;
  void (*v70)(char *, uint64_t);
  uint64_t v71;
  char *v72;
  uint64_t (*v73)(uint64_t, _QWORD, uint64_t, uint64_t);
  char *v74;
  char *v76;
  char *v77;
  void (*v78)(char *, uint64_t);
  void (*v79)(char *, char *, uint64_t);
  char *v80;
  char *v81;
  uint64_t v82;
  char *v83;
  int v84;
  char *v85;
  char *v86;
  void (*v87)(char *, uint64_t);
  uint64_t v88;
  void (*v89)(char *, char *, uint64_t);
  char *v90;
  char *v91;
  char *v92;
  uint64_t v93;
  char *v94;
  char *v95;
  char *v96;
  void (*v97)(char *, uint64_t);
  void (*v98)(char *, uint64_t);
  char *v99;
  char *v100;
  char *v101;
  char *v102;
  char *v103;
  char *v104;
  char *v105;
  char *v106;
  char *v107;
  char *v108;
  char *v109;
  char *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  char *v114;
  uint64_t v115;
  uint64_t v116;
  char *v117;
  uint64_t v118;
  uint64_t v119;
  char *v120;
  __int128 v121;
  uint64_t v122;

  v110 = a3;
  v6 = *(_QWORD *)(a2 + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v113 = type metadata accessor for Optional();
  v115 = *(_QWORD *)(v113 - 8);
  MEMORY[0x24BDAC7A8](v113);
  v103 = (char *)&v99 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9);
  v104 = (char *)&v99 - v10;
  MEMORY[0x24BDAC7A8](v11);
  v101 = (char *)&v99 - v12;
  MEMORY[0x24BDAC7A8](v13);
  v107 = (char *)&v99 - v14;
  MEMORY[0x24BDAC7A8](v15);
  v109 = (char *)&v99 - v16;
  MEMORY[0x24BDAC7A8](v17);
  v105 = (char *)&v99 - v18;
  MEMORY[0x24BDAC7A8](v19);
  v108 = (char *)&v99 - v20;
  MEMORY[0x24BDAC7A8](v21);
  v23 = (char *)&v99 - v22;
  v24 = v6;
  v111 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v25);
  v27 = (char *)&v99 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v112 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](v28);
  v99 = (char *)&v99 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v30);
  v100 = (char *)&v99 - v31;
  MEMORY[0x24BDAC7A8](v32);
  v102 = (char *)&v99 - v33;
  MEMORY[0x24BDAC7A8](v34);
  v36 = (char *)&v99 - v35;
  MEMORY[0x24BDAC7A8](v37);
  v39 = (char *)&v99 - v38;
  MixedFormatStyle.effectiveInput(for:)(a1, a2, (uint64_t)&v99 - v38);
  MixedFormatStyle.base(for:)(a2, (uint64_t)v27);
  v114 = v27;
  v116 = v24;
  dispatch thunk of DiscreteFormatStyle.discreteInput(before:)();
  v40 = (char *)(v3 + *(int *)(a2 + 68));
  v41 = *(char **)(a2 + 32);
  v42 = &v40[*(int *)(type metadata accessor for ClosedRange() + 36)];
  v118 = AssociatedTypeWitness;
  v43 = dispatch thunk of static Comparable.> infix(_:_:)();
  v117 = v23;
  if ((v43 & 1) != 0)
  {
    v106 = v39;
    v107 = v40;
    v109 = v42;
    v44 = v115;
    v45 = *(void (**)(char *, char *, uint64_t))(v115 + 16);
    v46 = v108;
    v47 = v23;
    v48 = v113;
    v45(v108, v47, v113);
    v49 = v112;
    v50 = *(char **)(v112 + 48);
    if (((unsigned int (*)(char *, uint64_t, uint64_t))v50)(v46, 1, v118) != 1)
    {
      v62 = *(void (**)(char *, char *, uint64_t))(v49 + 32);
      v104 = v50;
      v63 = v118;
      v62(v36, v46, v118);
      v64 = *(_QWORD *)(a2 + 56);
      v119 = v63;
      v120 = v41;
      v121 = *(_OWORD *)(a2 + 40);
      v122 = v64;
      type metadata accessor for TimeDataFormatting.FormatTransition();
    }
    (*(void (**)(char *, uint64_t))(v44 + 8))(v46, v48);
    v65 = v105;
    v66 = v117;
    v45(v105, v117, v48);
    v67 = ((uint64_t (*)(char *, uint64_t, uint64_t))v50)(v65, 1, v118);
    v68 = v116;
    v69 = v109;
    if (v67 == 1)
    {
      v70 = *(void (**)(char *, uint64_t))(v44 + 8);
      v70(v66, v48);
      (*(void (**)(char *, uint64_t))(v111 + 8))(v114, v68);
      v71 = v118;
      (*(void (**)(char *, uint64_t))(v49 + 8))(v106, v118);
      v70(v65, v48);
      v72 = v110;
      (*(void (**)(char *, char *, uint64_t))(v49 + 16))(v110, v69, v71);
      v73 = *(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v49 + 56);
      v74 = v72;
    }
    else
    {
      v76 = v102;
      v71 = v118;
      (*(void (**)(char *, char *, uint64_t))(v49 + 32))(v102, v65, v118);
      v77 = v110;
      max<A>(_:_:)();
      v78 = *(void (**)(char *, uint64_t))(v49 + 8);
      v78(v76, v71);
      (*(void (**)(char *, uint64_t))(v44 + 8))(v66, v48);
      (*(void (**)(char *, uint64_t))(v111 + 8))(v114, v116);
      v78(v106, v71);
      v73 = *(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v49 + 56);
      v74 = v77;
    }
    return v73((uint64_t)v74, 0, 1, v71);
  }
  v51 = v107;
  v52 = v112;
  v53 = v113;
  if ((dispatch thunk of static Comparable.> infix(_:_:)() & 1) == 0)
  {
    (*(void (**)(char *, uint64_t))(v111 + 8))(v114, v116);
    (*(void (**)(char *, uint64_t))(v52 + 8))(v39, v118);
    return (*(uint64_t (**)(char *, char *, uint64_t))(v115 + 32))(v110, v117, v53);
  }
  v108 = v41;
  v106 = v39;
  v54 = v114;
  v55 = v116;
  dispatch thunk of DiscreteFormatStyle.input(before:)();
  v56 = v115;
  v57 = *(void (**)(char *, char *, uint64_t))(v115 + 16);
  v58 = v53;
  v57(v51, v117, v53);
  v59 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v52 + 48);
  if (v59(v51, 1, v118) == 1)
  {
    (*(void (**)(char *, uint64_t))(v111 + 8))(v54, v55);
    v60 = v52;
    (*(void (**)(char *, uint64_t))(v52 + 8))(v106, v118);
    v61 = *(void (**)(char *, uint64_t))(v56 + 8);
    v61(v51, v58);
  }
  else
  {
    v79 = *(void (**)(char *, char *, uint64_t))(v52 + 32);
    v80 = v100;
    v81 = v51;
    v82 = v118;
    v79(v100, v81, v118);
    v83 = v101;
    v57(v101, v109, v58);
    v84 = v59(v83, 1, v82);
    v85 = v106;
    if (v84 != 1)
    {
      v94 = v99;
      v71 = v118;
      v79(v99, v83, v118);
      v95 = v110;
      max<A>(_:_:)();
      v96 = v80;
      v97 = *(void (**)(char *, uint64_t))(v52 + 8);
      v97(v94, v71);
      v97(v96, v71);
      v98 = *(void (**)(char *, uint64_t))(v115 + 8);
      v98(v109, v58);
      v98(v117, v58);
      (*(void (**)(char *, uint64_t))(v111 + 8))(v114, v55);
      v97(v85, v71);
      v73 = *(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v52 + 56);
      v74 = v95;
      return v73((uint64_t)v74, 0, 1, v71);
    }
    v86 = v83;
    v60 = v52;
    v87 = *(void (**)(char *, uint64_t))(v52 + 8);
    v88 = v118;
    v87(v80, v118);
    (*(void (**)(char *, uint64_t))(v111 + 8))(v114, v55);
    v87(v85, v88);
    v56 = v115;
    v61 = *(void (**)(char *, uint64_t))(v115 + 8);
    v61(v86, v58);
  }
  v89 = *(void (**)(char *, char *, uint64_t))(v56 + 32);
  v90 = v104;
  v89(v104, v117, v58);
  v91 = v103;
  v89(v103, v109, v58);
  if (v59(v90, 1, v118) == 1)
  {
    v89(v110, v91, v58);
    return ((uint64_t (*)(char *, uint64_t))v61)(v90, v58);
  }
  else
  {
    v61(v91, v58);
    v92 = v110;
    v93 = v118;
    (*(void (**)(char *, char *, uint64_t))(v60 + 32))(v110, v90, v118);
    return (*(uint64_t (**)(char *, _QWORD, uint64_t, uint64_t))(v60 + 56))(v92, 0, 1, v93);
  }
}

uint64_t MixedFormatStyle.discreteInput(after:)@<X0>(char *a1@<X0>, uint64_t a2@<X1>, char *a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t AssociatedTypeWitness;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  char v44;
  uint64_t v45;
  void (*v46)(char *, char *, uint64_t);
  char *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t (*v51)(char *, uint64_t, uint64_t);
  int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  void (*v64)(char *, char *, uint64_t);
  uint64_t v65;
  uint64_t (*v66)(char *, uint64_t, uint64_t);
  uint64_t v67;
  void (*v68)(char *, uint64_t);
  void (*v69)(char *, char *, uint64_t);
  uint64_t v70;
  char *v71;
  char *v72;
  int v73;
  uint64_t v74;
  void (*v75)(char *, uint64_t);
  char *v76;
  uint64_t (*v77)(uint64_t, _QWORD, uint64_t, uint64_t);
  char *v79;
  char *v80;
  void (*v81)(char *, uint64_t);
  char *v82;
  void (*v83)(char *, char *, uint64_t);
  char *v84;
  char *v85;
  uint64_t v86;
  char *v87;
  int v88;
  char *v89;
  void (*v90)(char *, uint64_t);
  void (*v91)(char *, char *, uint64_t);
  char *v92;
  char *v93;
  char *v94;
  char *v95;
  void (*v96)(char *, uint64_t);
  void (*v97)(char *, uint64_t);
  uint64_t v98;
  char *v99;
  char *v100;
  char *v101;
  char *v102;
  char *v103;
  char *v104;
  char *v105;
  char *v106;
  char *v107;
  char *v108;
  char *v109;
  uint64_t v110;
  char *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t (*v114)(char *, uint64_t, uint64_t);
  uint64_t v115;
  char *v116;
  uint64_t v117;
  uint64_t v118;
  char *v119;
  __int128 v120;
  uint64_t v121;

  v4 = v3;
  v109 = a3;
  v7 = *(_QWORD *)(a2 + 16);
  v114 = *(uint64_t (**)(char *, uint64_t, uint64_t))(a2 + 24);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v113 = type metadata accessor for Optional();
  v117 = *(_QWORD *)(v113 - 8);
  MEMORY[0x24BDAC7A8](v113);
  v102 = (char *)&v98 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v10);
  v103 = (char *)&v98 - v11;
  MEMORY[0x24BDAC7A8](v12);
  v101 = (char *)&v98 - v13;
  MEMORY[0x24BDAC7A8](v14);
  v107 = (char *)&v98 - v15;
  MEMORY[0x24BDAC7A8](v16);
  v105 = (char *)&v98 - v17;
  MEMORY[0x24BDAC7A8](v18);
  v104 = (char *)&v98 - v19;
  MEMORY[0x24BDAC7A8](v20);
  v108 = (char *)&v98 - v21;
  MEMORY[0x24BDAC7A8](v22);
  v24 = (char *)&v98 - v23;
  v110 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v25);
  v27 = (char *)&v98 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v112 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](v28);
  v99 = (char *)&v98 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v30);
  v100 = (char *)&v98 - v31;
  MEMORY[0x24BDAC7A8](v32);
  v34 = (char *)&v98 - v33;
  MEMORY[0x24BDAC7A8](v35);
  v37 = (char *)&v98 - v36;
  MEMORY[0x24BDAC7A8](v38);
  v40 = (char *)&v98 - v39;
  MixedFormatStyle.effectiveInput(for:)(a1, a2, (uint64_t)&v98 - v39);
  MixedFormatStyle.base(for:)(a2, (uint64_t)v27);
  v111 = v27;
  v41 = AssociatedTypeWitness;
  v115 = v7;
  dispatch thunk of DiscreteFormatStyle.discreteInput(after:)();
  v42 = v4 + *(int *)(a2 + 68);
  v43 = *(char **)(a2 + 32);
  v44 = dispatch thunk of static Comparable.< infix(_:_:)();
  v116 = v24;
  if ((v44 & 1) != 0)
  {
    v106 = v40;
    v107 = v34;
    v45 = v42;
    v46 = *(void (**)(char *, char *, uint64_t))(v117 + 16);
    v47 = v108;
    v48 = v24;
    v49 = v113;
    v46(v108, v48, v113);
    v50 = v112;
    v51 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v112 + 48);
    v52 = v51(v47, 1, v41);
    v114 = v51;
    if (v52 != 1)
    {
      v69 = *(void (**)(char *, char *, uint64_t))(v50 + 32);
      v105 = (char *)v46;
      v69(v37, v47, v41);
      v70 = *(_QWORD *)(a2 + 56);
      v118 = v41;
      v119 = v43;
      v120 = *(_OWORD *)(a2 + 40);
      v121 = v70;
      type metadata accessor for TimeDataFormatting.FormatTransition();
    }
    v53 = v117;
    (*(void (**)(char *, uint64_t))(v117 + 8))(v47, v49);
    v54 = v49;
    v55 = v53;
    v56 = v45;
    v71 = v104;
    v72 = v116;
    v46(v104, v116, v54);
    v73 = v114(v71, 1, v41);
    v74 = v115;
    if (v73 != 1)
    {
      v79 = v107;
      (*(void (**)(char *, char *, uint64_t))(v50 + 32))(v107, v71, v41);
      v80 = v109;
      min<A>(_:_:)();
      v81 = *(void (**)(char *, uint64_t))(v50 + 8);
      v81(v79, v41);
      (*(void (**)(char *, uint64_t))(v55 + 8))(v72, v54);
      (*(void (**)(char *, uint64_t))(v110 + 8))(v111, v74);
      v81(v106, v41);
      return (*(uint64_t (**)(char *, _QWORD, uint64_t, uint64_t))(v50 + 56))(v80, 0, 1, v41);
    }
    v75 = *(void (**)(char *, uint64_t))(v55 + 8);
    v75(v72, v54);
    (*(void (**)(char *, uint64_t))(v110 + 8))(v111, v74);
    (*(void (**)(char *, uint64_t))(v50 + 8))(v106, v41);
    v75(v71, v54);
    v76 = v109;
    (*(void (**)(char *, uint64_t, uint64_t))(v50 + 16))(v109, v56, v41);
    v77 = *(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v50 + 56);
  }
  else
  {
    v57 = v107;
    v58 = v112;
    v59 = v113;
    type metadata accessor for ClosedRange();
    if ((dispatch thunk of static Comparable.< infix(_:_:)() & 1) == 0)
    {
      (*(void (**)(char *, uint64_t))(v110 + 8))(v111, v115);
      (*(void (**)(char *, uint64_t))(v58 + 8))(v40, AssociatedTypeWitness);
      return (*(uint64_t (**)(char *, char *, uint64_t))(v117 + 32))(v109, v116, v59);
    }
    v108 = v43;
    v106 = v40;
    v60 = v105;
    v61 = v111;
    v62 = v115;
    dispatch thunk of DiscreteFormatStyle.input(after:)();
    v63 = v117;
    v64 = *(void (**)(char *, char *, uint64_t))(v117 + 16);
    v65 = v59;
    v64(v57, v116, v59);
    v66 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v58 + 48);
    if (v66(v57, 1, v41) == 1)
    {
      (*(void (**)(char *, uint64_t))(v110 + 8))(v61, v62);
      v67 = v58;
      (*(void (**)(char *, uint64_t))(v58 + 8))(v106, v41);
      v68 = *(void (**)(char *, uint64_t))(v63 + 8);
      v68(v57, v65);
    }
    else
    {
      v82 = v57;
      v83 = *(void (**)(char *, char *, uint64_t))(v58 + 32);
      v84 = v100;
      v83(v100, v82, v41);
      v85 = v101;
      v64(v101, v60, v65);
      v86 = v58;
      v87 = v85;
      v88 = v66(v85, 1, v41);
      v89 = v61;
      if (v88 != 1)
      {
        v94 = v99;
        v83(v99, v87, v41);
        v95 = v109;
        min<A>(_:_:)();
        v96 = *(void (**)(char *, uint64_t))(v86 + 8);
        v96(v94, v41);
        v96(v84, v41);
        v97 = *(void (**)(char *, uint64_t))(v117 + 8);
        v97(v60, v65);
        v97(v116, v65);
        (*(void (**)(char *, uint64_t))(v110 + 8))(v89, v115);
        v96(v106, v41);
        return (*(uint64_t (**)(char *, _QWORD, uint64_t, uint64_t))(v86 + 56))(v95, 0, 1, v41);
      }
      v67 = v86;
      v90 = *(void (**)(char *, uint64_t))(v86 + 8);
      v90(v84, v41);
      (*(void (**)(char *, uint64_t))(v110 + 8))(v61, v115);
      v90(v106, v41);
      v63 = v117;
      v68 = *(void (**)(char *, uint64_t))(v117 + 8);
      v68(v87, v65);
    }
    v91 = *(void (**)(char *, char *, uint64_t))(v63 + 32);
    v92 = v103;
    v91(v103, v116, v65);
    v93 = v102;
    v91(v102, v105, v65);
    if (v66(v92, 1, v41) == 1)
    {
      v91(v109, v93, v65);
      return ((uint64_t (*)(char *, uint64_t))v68)(v92, v65);
    }
    v68(v93, v65);
    v76 = v109;
    (*(void (**)(char *, char *, uint64_t))(v67 + 32))(v109, v92, v41);
    v77 = *(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v67 + 56);
  }
  return v77((uint64_t)v76, 0, 1, v41);
}

uint64_t MixedFormatStyle.input(before:)@<X0>(char *a1@<X0>, uint64_t a2@<X1>, void (*a3)(char *, uint64_t, uint64_t)@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t AssociatedTypeWitness;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v17;
  void (*v18)(char *, uint64_t, uint64_t);

  v17 = a4;
  v18 = a3;
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v9 = (char *)&v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *(_QWORD *)(v10 + 24);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v13 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v15 = (char *)&v17 - v14;
  MixedFormatStyle.effectiveInput(for:)(a1, a2, (uint64_t)&v17 - v14);
  MixedFormatStyle.base(for:)(a2, (uint64_t)v9);
  v18(v15, v6, v11);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v15, AssociatedTypeWitness);
}

void MixedFormatStyle.hash(into:)()
{
  dispatch thunk of Hashable.hash(into:)();
  swift_getAssociatedTypeWitness();
  type metadata accessor for TimeDataFormatting.FormatTransition();
}

uint64_t sub_2350AA6F0(uint64_t a1)
{
  uint64_t v1;

  TimeDataFormatting.FormatTransition.hash(into:)(v1, a1);
  return dispatch thunk of Hashable.hash(into:)();
}

uint64_t static MixedFormatStyle.== infix(_:_:)()
{
  if ((dispatch thunk of static Equatable.== infix(_:_:)() & 1) != 0)
    type metadata accessor for MixedFormatStyle();
  return 0;
}

uint64_t MixedFormatStyle.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x6572726566657270 && a2 == 0xE900000000000064;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x697469736E617274 && a2 == 0xEA00000000006E6FLL
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6B6361626C6C6166 && a2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t MixedFormatStyle.CodingKeys.stringValue.getter(char a1)
{
  if (!a1)
    return 0x6572726566657270;
  if (a1 == 1)
    return 0x697469736E617274;
  return 0x6B6361626C6C6166;
}

void MixedFormatStyle.encode(to:)()
{
  type metadata accessor for MixedFormatStyle.CodingKeys();
}

uint64_t sub_2350AAA64(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t AssociatedTypeWitness;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  MEMORY[0x23B7C9C04](&protocol conformance descriptor for MixedFormatStyle<A>.CodingKeys, a1);
  v3 = type metadata accessor for KeyedEncodingContainer();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v13 - v5;
  __swift_project_boxed_opaque_existential_1(v1, v1[3]);
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  *(_BYTE *)(v2 - 128) = 0;
  v7 = *(_QWORD *)(v2 - 136);
  v8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 - 160) + 8) + 16);
  *(_QWORD *)(v2 - 160) = v3;
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v7)
  {
    *(_QWORD *)(v2 - 200) = v8;
    *(_QWORD *)(v2 - 136) = v4;
    *(_BYTE *)(v2 - 65) = 1;
    AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    v10 = *(_QWORD *)(v2 - 168);
    *(_QWORD *)(v2 - 128) = AssociatedTypeWitness;
    *(_QWORD *)(v2 - 120) = v10;
    v11 = *(_QWORD *)(v2 - 184);
    *(_QWORD *)(v2 - 112) = *(_QWORD *)(v2 - 176);
    *(_QWORD *)(v2 - 104) = v11;
    *(_QWORD *)(v2 - 96) = *(_QWORD *)(v2 - 192);
    type metadata accessor for TimeDataFormatting.FormatTransition();
  }
  return (*(uint64_t (**)(char *, _QWORD))(v4 + 8))(v6, *(_QWORD *)(v2 - 160));
}

Swift::Int PausedFormatStyle.hashValue.getter(uint64_t a1, void (*a2)(_BYTE *, uint64_t))
{
  _BYTE v5[72];

  Hasher.init(_seed:)();
  a2(v5, a1);
  return Hasher._finalize()();
}

void MixedFormatStyle.init(from:)()
{
  swift_getAssociatedTypeWitness();
  type metadata accessor for TimeDataFormatting.FormatTransition();
}

void sub_2350AAD0C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  *(_QWORD *)(v15 - 208) = a1;
  *(_QWORD *)(v15 - 224) = *(_QWORD *)(a1 - 8);
  MEMORY[0x24BDAC7A8](a1);
  *(_QWORD *)(v15 - 192) = (char *)&a9 - v16;
  *(_QWORD *)(v15 - 216) = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v17);
  *(_QWORD *)(v15 - 232) = (char *)&a9 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v19);
  *(_QWORD *)(v15 - 184) = (char *)&a9 - v20;
  *(_QWORD *)(v15 - 136) = v10;
  *(_QWORD *)(v15 - 128) = v11;
  *(_QWORD *)(v15 - 120) = v14;
  *(_QWORD *)(v15 - 112) = v12;
  *(_QWORD *)(v15 - 104) = v9;
  *(_QWORD *)(v15 - 96) = v13;
  type metadata accessor for MixedFormatStyle.CodingKeys();
}

void sub_2350AADAC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *(_QWORD *)(v7 - 144) = MEMORY[0x23B7C9C04](&protocol conformance descriptor for MixedFormatStyle<A>.CodingKeys, a1);
  v8 = type metadata accessor for KeyedDecodingContainer();
  *(_QWORD *)(v7 - 160) = v8;
  *(_QWORD *)(v7 - 200) = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  *(_QWORD *)(v7 - 168) = v2;
  *(_QWORD *)(v7 - 136) = v2;
  *(_QWORD *)(v7 - 128) = v3;
  *(_QWORD *)(v7 - 120) = v6;
  *(_QWORD *)(v7 - 112) = v4;
  *(_QWORD *)(v7 - 104) = v1;
  *(_QWORD *)(v7 - 96) = v5;
  type metadata accessor for MixedFormatStyle();
}

uint64_t sub_2350AAE20(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(char *, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;

  v5 = *(_QWORD *)(a1 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v7 = (char *)&v20 - v6;
  __swift_project_boxed_opaque_existential_1(v2, v2[3]);
  *(_QWORD *)(v3 - 152) = v1;
  v8 = *(_QWORD *)(v3 - 72);
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v8)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v2);
  *(_QWORD *)(v3 - 248) = v5;
  v9 = v7;
  *(_QWORD *)(v3 - 144) = a1;
  *(_QWORD *)(v3 - 72) = v2;
  *(_BYTE *)(v3 - 136) = 0;
  v10 = *(_QWORD *)(v3 - 168);
  v11 = *(_QWORD *)(v3 - 192);
  v12 = *(_QWORD *)(v3 - 184);
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  v13 = *(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v3 - 216) + 32);
  v13(v7, v12, v10);
  *(_BYTE *)(v3 - 136) = 1;
  v14 = *(_QWORD *)(v3 - 208);
  MEMORY[0x23B7C9C04](&protocol conformance descriptor for TimeDataFormatting.FormatTransition<A>, v14);
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  *(_QWORD *)(v3 - 176) = v13;
  v15 = *(_QWORD *)(v3 - 144);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v3 - 224) + 32))(&v7[*(int *)(v15 + 68)], v11, v14);
  *(_BYTE *)(v3 - 136) = 2;
  v16 = *(_QWORD *)(v3 - 232);
  v17 = *(_QWORD *)(v3 - 160);
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)(v3 - 200) + 8))(*(_QWORD *)(v3 - 152), v17);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 - 176))(&v9[*(int *)(v15 + 72)], v16, v10);
  v18 = *(_QWORD *)(v3 - 248);
  (*(void (**)(_QWORD, char *, uint64_t))(v18 + 16))(*(_QWORD *)(v3 - 240), v9, v15);
  __swift_destroy_boxed_opaque_existential_1(*(_QWORD *)(v3 - 72));
  return (*(uint64_t (**)(char *, uint64_t))(v18 + 8))(v9, v15);
}

void MixedFormatStyle.init(preferred:transition:fallback:)(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 32))(a3, a1, a2);
  type metadata accessor for MixedFormatStyle();
}

void sub_2350AB114()
{
  swift_getAssociatedTypeWitness();
  type metadata accessor for TimeDataFormatting.FormatTransition();
}

uint64_t sub_2350AB158(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t, uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;

  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 32))(v5, v7, a1);
  return v2(v3 + *(int *)(v4 + 72), v8, v1);
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance MixedFormatStyle<A>.CodingKeys(char *a1, char *a2)
{
  return static EventListenerPhase.FailureReason.== infix(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance MixedFormatStyle<A>.CodingKeys()
{
  unsigned __int8 *v0;

  return EventListenerPhase.FailureReason.hashValue.getter(*v0);
}

void protocol witness for Hashable.hash(into:) in conformance MixedFormatStyle<A>.CodingKeys(uint64_t a1)
{
  unsigned __int8 *v1;

  EventListenerPhase.FailureReason.hash(into:)(a1, *v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance MixedFormatStyle<A>.CodingKeys()
{
  unsigned __int8 *v0;
  _BYTE v2[72];

  Hasher.init(_seed:)();
  EventListenerPhase.FailureReason.hash(into:)((uint64_t)v2, *v0);
  return Hasher._finalize()();
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance MixedFormatStyle<A>.CodingKeys()
{
  char *v0;

  return MixedFormatStyle.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance MixedFormatStyle<A>.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = MixedFormatStyle.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance MixedFormatStyle<A>.CodingKeys@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = specialized TimeDataFormatting.Resolvable.CodingKeys.init(intValue:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance MixedFormatStyle<A>.CodingKeys(uint64_t a1)
{
  MEMORY[0x23B7C9C04](&protocol conformance descriptor for MixedFormatStyle<A>.CodingKeys, a1);
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance MixedFormatStyle<A>.CodingKeys(uint64_t a1)
{
  MEMORY[0x23B7C9C04](&protocol conformance descriptor for MixedFormatStyle<A>.CodingKeys, a1);
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for DiscreteFormatStyle.input(before:) in conformance MixedFormatStyle<A>@<X0>(char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return MixedFormatStyle.input(before:)(a1, a2, (void (*)(char *, uint64_t, uint64_t))MEMORY[0x24BDCC9C8], a3);
}

uint64_t protocol witness for DiscreteFormatStyle.input(after:) in conformance MixedFormatStyle<A>@<X0>(char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return MixedFormatStyle.input(before:)(a1, a2, (void (*)(char *, uint64_t, uint64_t))MEMORY[0x24BDCC9C0], a3);
}

void protocol witness for Decodable.init(from:) in conformance MixedFormatStyle<A>()
{
  MixedFormatStyle.init(from:)();
}

void protocol witness for Encodable.encode(to:) in conformance MixedFormatStyle<A>()
{
  MixedFormatStyle.encode(to:)();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance MixedFormatStyle<A>(uint64_t a1)
{
  return PausedFormatStyle.hashValue.getter(a1, (void (*)(_BYTE *, uint64_t))MixedFormatStyle.hash(into:));
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance MixedFormatStyle<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance TimeDataFormatting.Configuration<A, B>(a1, a2, a3, (void (*)(_BYTE *, uint64_t))MixedFormatStyle.hash(into:));
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance TimeDataFormatting.Configuration<A, B>(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(_BYTE *, uint64_t))
{
  _BYTE v7[72];

  Hasher.init(_seed:)();
  a4(v7, a2);
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance MixedFormatStyle<A>()
{
  return static MixedFormatStyle.== infix(_:_:)();
}

void _MixedAoDFrequencyFormatInitializer<>.alwaysOnDisplayFormat(secondsUpdateFrequencyBudget:sizeVariant:)()
{
  swift_getAssociatedTypeWitness();
  type metadata accessor for TimeDataFormatting.FormatTransition();
}

uint64_t sub_2350AB4CC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  double v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t TupleTypeMetadata2;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  double v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(uint64_t, uint64_t, uint64_t, double);
  int v32;
  uint64_t v33;
  void (*v34)(_BYTE *, uint64_t);
  char v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  void (*v43)(uint64_t, uint64_t, uint64_t);
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  int v51;
  void (*v52)(_QWORD, _QWORD, uint64_t);
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t *boxed_opaque_existential_1;
  _BYTE v63[96];

  *(_QWORD *)(v5 - 344) = a1;
  *(_QWORD *)(v5 - 352) = *(_QWORD *)(a1 - 8);
  MEMORY[0x24BDAC7A8](a1);
  *(_QWORD *)(v5 - 312) = &v63[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v8);
  *(_QWORD *)(v5 - 360) = &v63[-v9];
  v10 = *(_QWORD *)(v1 - 8);
  MEMORY[0x24BDAC7A8](v11);
  *(_QWORD *)(v5 - 272) = &v63[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v13);
  v15 = &v63[-v14];
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  *(_QWORD *)(v5 - 248) = *(_QWORD *)(TupleTypeMetadata2 - 8);
  MEMORY[0x24BDAC7A8](TupleTypeMetadata2);
  *(_QWORD *)(v5 - 320) = &v63[-((v17 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v18);
  *(_QWORD *)(v5 - 368) = &v63[-v19];
  MEMORY[0x24BDAC7A8](v20);
  v22 = &v63[-v21];
  MEMORY[0x24BDAC7A8](v23);
  *(_QWORD *)(v5 - 376) = &v63[-v24];
  v26 = MEMORY[0x24BDAC7A8](v25);
  v28 = &v63[-v27];
  v29 = **(_QWORD **)(v5 - 216);
  *(_QWORD *)(v5 - 216) = *(int *)(v30 + 48);
  *(_QWORD *)(v5 - 208) = v30;
  *(_BYTE *)(v5 - 200) = 2;
  v31 = *(void (**)(uint64_t, uint64_t, uint64_t, double))(v3 + 16);
  *(_QWORD *)(v5 - 256) = v2;
  *(_QWORD *)(v5 - 336) = v3;
  v31(v5 - 200, v1, v3, v26);
  *(_QWORD *)(v5 - 200) = v29;
  *(_QWORD *)(v5 - 328) = v4;
  v32 = FormatStyle.exactSizeVariant(_:)(v28, (uint64_t *)(v5 - 200), v1);
  v33 = v10;
  v34 = *(void (**)(_BYTE *, uint64_t))(v10 + 8);
  v34(v15, v1);
  *(_DWORD *)(v5 - 236) = v32;
  v35 = v32 & 1;
  v28[*(_QWORD *)(v5 - 216)] = v35;
  if (v6 >= 60.0)
  {
    *(_QWORD *)(v5 - 400) = v31;
    *(_QWORD *)(v5 - 392) = v34;
    *(_QWORD *)(v5 - 216) = v22;
    v41 = *(_QWORD *)(v5 - 208);
    v42 = v33;
    v43 = *(void (**)(uint64_t, uint64_t, uint64_t))(v33 + 16);
    v44 = *(_QWORD *)(v5 - 272);
    v45 = *(_QWORD *)(v5 - 256);
    *(_QWORD *)(v5 - 384) = v43;
    v43(v44, v45, v1);
    *(_QWORD *)(v5 - 152) = *(_QWORD *)(v5 - 264);
    swift_getExtendedExistentialTypeMetadata();
    if (swift_dynamicCast())
    {
      outlined init with take of ScrollStateRequest((__int128 *)(v5 - 200), v5 - 144);
      *(_QWORD *)(v5 - 264) = v28;
      v46 = *(_QWORD *)(v5 - 120);
      v47 = *(_QWORD *)(v5 - 112);
      __swift_project_boxed_opaque_existential_1((_QWORD *)(v5 - 144), v46);
      v48 = *(_QWORD *)(v5 - 360);
      (*(void (**)(uint64_t, uint64_t))(v47 + 48))(v46, v47);
      v49 = *(int *)(v41 + 48);
      *(_BYTE *)(v5 - 200) = 1;
      (*(void (**)(uint64_t, uint64_t, _QWORD))(v5 - 400))(v5 - 200, v1, *(_QWORD *)(v5 - 336));
      *(_QWORD *)(v5 - 200) = v29;
      v50 = *(char **)(v5 - 376);
      v51 = FormatStyle.exactSizeVariant(_:)(v50, (uint64_t *)(v5 - 200), v1);
      (*(void (**)(_BYTE *, uint64_t))(v5 - 392))(v15, v1);
      *(_DWORD *)(v5 - 328) = v51;
      *(_DWORD *)(v5 - 256) = v51 & 1;
      v50[v49] = v51 & 1;
      (*(void (**)(_QWORD, char *, uint64_t))(v5 - 384))(*(_QWORD *)(v5 - 216), v50, v1);
      (*(void (**)(_QWORD, uint64_t, _QWORD))(*(_QWORD *)(v5 - 352) + 32))(*(_QWORD *)(v5 - 312), v48, *(_QWORD *)(v5 - 344));
      v52 = *(void (**)(_QWORD, _QWORD, uint64_t))(v42 + 32);
      *(_QWORD *)(v5 - 272) = v52;
      v52(*(_QWORD *)(v5 - 368), *(_QWORD *)(v5 - 264), v1);
      v53 = *(_QWORD *)(v5 - 224);
      *(_QWORD *)(v5 - 200) = v1;
      *(_QWORD *)(v5 - 192) = v53;
      v54 = *(_QWORD *)(v5 - 288);
      *(_QWORD *)(v5 - 184) = *(_QWORD *)(v5 - 296);
      *(_QWORD *)(v5 - 176) = v54;
      v55 = *(_QWORD *)(v5 - 304);
      *(_QWORD *)(v5 - 168) = *(_QWORD *)(v5 - 280);
      *(_QWORD *)(v5 - 160) = v55;
      type metadata accessor for MixedFormatStyle();
    }
    v56 = *(int *)(v41 + 48);
    v57 = v28;
    v58 = *(_QWORD *)(v5 - 216);
    (*(void (**)(uint64_t, char *, uint64_t))(v5 - 384))(v58, v57, v1);
    *(_BYTE *)(v58 + v56) = v35;
    v59 = *(uint64_t **)(v5 - 232);
    v60 = *(_QWORD *)(v5 - 224);
    v59[3] = v1;
    v59[4] = v60;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v59);
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(v42 + 32))(boxed_opaque_existential_1, v58, v1);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v5 - 248) + 8))(v57, v41);
  }
  else
  {
    v36 = *(_QWORD *)(v5 - 208);
    v37 = *(int *)(v36 + 48);
    (*(void (**)(_BYTE *, char *, uint64_t))(v33 + 16))(v22, v28, v1);
    v22[v37] = v35;
    v38 = *(uint64_t **)(v5 - 232);
    v39 = *(_QWORD *)(v5 - 224);
    v38[3] = v1;
    v38[4] = v39;
    v40 = __swift_allocate_boxed_opaque_existential_1(v38);
    (*(void (**)(uint64_t *, _BYTE *, uint64_t))(v33 + 32))(v40, v22, v1);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v5 - 248) + 8))(v28, v36);
  }
  return *(_DWORD *)(v5 - 236) & 1;
}

void protocol witness for MixedAoDFrequencyFormatInitializer.alwaysOnDisplayFormat(secondsUpdateFrequencyBudget:sizeVariant:) in conformance <> _MixedAoDFrequencyFormatInitializer<A>()
{
  _MixedAoDFrequencyFormatInitializer<>.alwaysOnDisplayFormat(secondsUpdateFrequencyBudget:sizeVariant:)();
}

void base witness table accessor for Equatable in TimeDataFormatting.Configuration<A, B>()
{
  JUMPOUT(0x23B7C9C04);
}

void type metadata accessor for MixedFormatStyle()
{
  JUMPOUT(0x23B7C9B5CLL);
}

void type metadata accessor for PausedFormatStyle()
{
  JUMPOUT(0x23B7C9B5CLL);
}

uint64_t partial apply for closure #1 in TimeDataFormatting.Configuration.formatAndFrequency(for:mode:)(uint64_t a1)
{
  return partial apply for closure #1 in TimeDataFormatting.Configuration.formatAndFrequency(for:mode:)(a1);
}

{
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(v1 + 32) + 48))(a1, *(_QWORD *)(v1 + 16));
}

uint64_t type metadata accessor for _MixedAoDFrequencyFormatInitializer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for _MixedAoDFrequencyFormatInitializer);
}

unint64_t type metadata accessor for UpdateFrequencyDependentFormatStyle()
{
  unint64_t result;

  result = lazy cache variable for type metadata for UpdateFrequencyDependentFormatStyle;
  if (!lazy cache variable for type metadata for UpdateFrequencyDependentFormatStyle)
  {
    result = swift_getExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for UpdateFrequencyDependentFormatStyle);
  }
  return result;
}

void type metadata accessor for (style: UpdateFrequencyDependentFormatStyle, exact: Bool)()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!lazy cache variable for type metadata for (style: UpdateFrequencyDependentFormatStyle, exact: Bool))
  {
    type metadata accessor for UpdateFrequencyDependentFormatStyle();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (style: UpdateFrequencyDependentFormatStyle, exact: Bool));
  }
}

uint64_t getEnumTagSinglePayload for PausedFormatStyle(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  char v13;
  int v14;
  unsigned int v15;
  int v16;
  int v17;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= v5)
    v8 = *(_DWORD *)(v4 + 84);
  else
    v8 = *(_DWORD *)(v6 + 84);
  if (!a2)
    return 0;
  v9 = *(unsigned __int8 *)(v6 + 80);
  v10 = *(_QWORD *)(v4 + 64) + v9;
  v11 = a2 - v8;
  if (a2 <= v8)
    goto LABEL_23;
  v12 = (v10 & ~v9) + *(_QWORD *)(v6 + 64);
  v13 = 8 * v12;
  if (v12 <= 3)
  {
    v15 = ((v11 + ~(-1 << v13)) >> v13) + 1;
    if (HIWORD(v15))
    {
      v14 = *(_DWORD *)(a1 + v12);
      if (!v14)
        goto LABEL_23;
      goto LABEL_14;
    }
    if (v15 > 0xFF)
    {
      v14 = *(unsigned __int16 *)(a1 + v12);
      if (!*(_WORD *)(a1 + v12))
        goto LABEL_23;
      goto LABEL_14;
    }
    if (v15 < 2)
    {
LABEL_23:
      if (v8)
      {
        if (v5 >= v7)
          return (*(uint64_t (**)(void))(v4 + 48))();
        else
          return (*(uint64_t (**)(uint64_t))(v6 + 48))((v10 + a1) & ~v9);
      }
      return 0;
    }
  }
  v14 = *(unsigned __int8 *)(a1 + v12);
  if (!*(_BYTE *)(a1 + v12))
    goto LABEL_23;
LABEL_14:
  v16 = (v14 - 1) << v13;
  if (v12 > 3)
    v16 = 0;
  if (!(_DWORD)v12)
    return v8 + v16 + 1;
  if (v12 <= 3)
    v17 = (v10 & ~(_DWORD)v9) + *(_DWORD *)(v6 + 64);
  else
    v17 = 4;
  return ((uint64_t (*)(void))((char *)&loc_2350ABC9C + 4 * byte_2352C4FBF[v17 - 1]))();
}

void storeEnumTagSinglePayload for PausedFormatStyle(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  int v12;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 24) - 8);
  if (*(_DWORD *)(v6 + 84) <= *(_DWORD *)(v5 + 84))
    v7 = *(_DWORD *)(v5 + 84);
  else
    v7 = *(_DWORD *)(v6 + 84);
  v8 = ((*(_QWORD *)(v5 + 64) + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))
     + *(_QWORD *)(v6 + 64);
  if (a3 > v7)
  {
    if (v8 <= 3)
    {
      v11 = ((a3 - v7 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v11))
      {
        v9 = 4u;
      }
      else if (v11 >= 0x100)
      {
        v9 = 2;
      }
      else
      {
        v9 = v11 > 1;
      }
    }
    else
    {
      v9 = 1u;
    }
  }
  else
  {
    v9 = 0;
  }
  if (v7 < a2)
  {
    v10 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        v12 = v10 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v12;
          *((_BYTE *)a1 + 2) = BYTE2(v12);
        }
        else if ((_DWORD)v8 == 2)
        {
          *a1 = v12;
        }
        else
        {
          *(_BYTE *)a1 = v12;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v10;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X16 }
}

uint64_t type metadata completion function for MixedFormatStyle()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_getAssociatedTypeWitness();
    type metadata accessor for TimeDataFormatting.FormatTransition();
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for MixedFormatStyle(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  void (*v22)(unint64_t, unint64_t, uint64_t);
  unint64_t v24;
  uint64_t v25;
  void (*v26)(uint64_t *, uint64_t *, uint64_t);
  unint64_t v28;
  uint64_t v29;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_QWORD *)(v4 + 64);
  v29 = *(_QWORD *)(a3 + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v7 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v8 = *(_DWORD *)(v7 + 80);
  v9 = v5 + v8;
  v10 = *(_QWORD *)(v7 + 64);
  v11 = v10 + v8;
  v12 = ((v10 + v8) & ~v8) + v10;
  v13 = *(_DWORD *)(v4 + 80);
  v14 = ((v12 + v8) & ~v8) + v10 + v13;
  if ((v13 | v8) > 7
    || ((*(_DWORD *)(v4 + 80) | *(_DWORD *)(v7 + 80)) & 0x100000) != 0
    || ((v14 + ((v5 + v8) & ~v8)) & ~v13) + v5 > 0x18)
  {
    v17 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v17 + (((v13 | v8) + 16) & ~(v13 | v8)));
    swift_retain();
  }
  else
  {
    v18 = AssociatedTypeWitness;
    v19 = ~v8;
    v25 = ~v13;
    v26 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v4 + 16);
    v26(a1, a2, v29);
    v24 = (unint64_t)a1 + v9;
    v20 = ((unint64_t)a1 + v9) & ~v8;
    v28 = (unint64_t)a2 + v9;
    v21 = v28 & ~v8;
    v22 = *(void (**)(unint64_t, unint64_t, uint64_t))(v7 + 16);
    v22(v20, v21, v18);
    v22((v11 + v20) & v19, (v11 + v21) & v19, v18);
    v22(((v24 | v8) + v12) & v19, ((v28 | v8) + v12) & v19, v18);
    v26((uint64_t *)((v14 + v20) & v25), (uint64_t *)((v14 + v21) & v25), v29);
  }
  return a1;
}

uint64_t destroy for MixedFormatStyle(unint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v15)(unint64_t, uint64_t);

  v3 = *(_QWORD *)(a2 + 16);
  v4 = *(_QWORD *)(v3 - 8);
  v15 = *(uint64_t (**)(unint64_t, uint64_t))(v4 + 8);
  v15(a1, v3);
  v5 = *(_QWORD *)(v4 + 64) + a1;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v7 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = v5 + v8;
  v10 = (v5 + v8) & ~v8;
  v11 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
  v11(v10, AssociatedTypeWitness);
  v12 = *(_QWORD *)(v7 + 64);
  v11((v12 + v8 + v10) & ~v8, AssociatedTypeWitness);
  v13 = ((v12 + v8) & ~v8) + v12;
  v11(((v9 | v8) + v13) & ~v8, AssociatedTypeWitness);
  return v15((v10 + v12 + *(unsigned __int8 *)(v4 + 80) + ((v13 + v8) & ~v8)) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80), v3);
}

unint64_t initializeWithCopy for MixedFormatStyle(unint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t AssociatedTypeWitness;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  void (*v14)(unint64_t, unint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  void (*v18)(unint64_t, unint64_t, uint64_t);

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v18 = *(void (**)(unint64_t, unint64_t, uint64_t))(v6 + 16);
  v18(a1, a2, v5);
  v7 = *(_QWORD *)(v6 + 64);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v9 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v10 = *(unsigned __int8 *)(v9 + 80);
  v11 = v7 + v10;
  v12 = (v7 + v10 + a1) & ~v10;
  v13 = (v11 + a2) & ~v10;
  v14 = *(void (**)(unint64_t, unint64_t, uint64_t))(v9 + 16);
  v14(v12, v13, AssociatedTypeWitness);
  v15 = *(_QWORD *)(v9 + 64);
  v14((v15 + v10 + v12) & ~v10, (v15 + v10 + v13) & ~v10, AssociatedTypeWitness);
  v16 = v15 + v10 + ((v15 + v10) & ~v10);
  v14((v16 + v12) & ~v10, (v16 + v13) & ~v10, AssociatedTypeWitness);
  v18(((v16 & ~v10) + v15 + *(unsigned __int8 *)(v6 + 80) + v12) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80), ((v16 & ~v10) + v15 + *(unsigned __int8 *)(v6 + 80) + v13) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80), v5);
  return a1;
}

unint64_t assignWithCopy for MixedFormatStyle(unint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t AssociatedTypeWitness;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  void (*v14)(unint64_t, unint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  void (*v18)(unint64_t, unint64_t, uint64_t);

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v18 = *(void (**)(unint64_t, unint64_t, uint64_t))(v6 + 24);
  v18(a1, a2, v5);
  v7 = *(_QWORD *)(v6 + 64);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v9 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v10 = *(unsigned __int8 *)(v9 + 80);
  v11 = v7 + v10;
  v12 = (v7 + v10 + a1) & ~v10;
  v13 = (v11 + a2) & ~v10;
  v14 = *(void (**)(unint64_t, unint64_t, uint64_t))(v9 + 24);
  v14(v12, v13, AssociatedTypeWitness);
  v15 = *(_QWORD *)(v9 + 64);
  v14((v15 + v10 + v12) & ~v10, (v15 + v10 + v13) & ~v10, AssociatedTypeWitness);
  v16 = v15 + v10 + ((v15 + v10) & ~v10);
  v14((v16 + v12) & ~v10, (v16 + v13) & ~v10, AssociatedTypeWitness);
  v18(((v16 & ~v10) + v15 + *(unsigned __int8 *)(v6 + 80) + v12) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80), ((v16 & ~v10) + v15 + *(unsigned __int8 *)(v6 + 80) + v13) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80), v5);
  return a1;
}

unint64_t initializeWithTake for MixedFormatStyle(unint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t AssociatedTypeWitness;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  void (*v14)(unint64_t, unint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  void (*v18)(unint64_t, unint64_t, uint64_t);

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v18 = *(void (**)(unint64_t, unint64_t, uint64_t))(v6 + 32);
  v18(a1, a2, v5);
  v7 = *(_QWORD *)(v6 + 64);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v9 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v10 = *(unsigned __int8 *)(v9 + 80);
  v11 = v7 + v10;
  v12 = (v7 + v10 + a1) & ~v10;
  v13 = (v11 + a2) & ~v10;
  v14 = *(void (**)(unint64_t, unint64_t, uint64_t))(v9 + 32);
  v14(v12, v13, AssociatedTypeWitness);
  v15 = *(_QWORD *)(v9 + 64);
  v14((v15 + v10 + v12) & ~v10, (v15 + v10 + v13) & ~v10, AssociatedTypeWitness);
  v16 = v15 + v10 + ((v15 + v10) & ~v10);
  v14((v16 + v12) & ~v10, (v16 + v13) & ~v10, AssociatedTypeWitness);
  v18(((v16 & ~v10) + v15 + *(unsigned __int8 *)(v6 + 80) + v12) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80), ((v16 & ~v10) + v15 + *(unsigned __int8 *)(v6 + 80) + v13) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80), v5);
  return a1;
}

unint64_t assignWithTake for MixedFormatStyle(unint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t AssociatedTypeWitness;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  void (*v14)(unint64_t, unint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  void (*v18)(unint64_t, unint64_t, uint64_t);

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v18 = *(void (**)(unint64_t, unint64_t, uint64_t))(v6 + 40);
  v18(a1, a2, v5);
  v7 = *(_QWORD *)(v6 + 64);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v9 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v10 = *(unsigned __int8 *)(v9 + 80);
  v11 = v7 + v10;
  v12 = (v7 + v10 + a1) & ~v10;
  v13 = (v11 + a2) & ~v10;
  v14 = *(void (**)(unint64_t, unint64_t, uint64_t))(v9 + 40);
  v14(v12, v13, AssociatedTypeWitness);
  v15 = *(_QWORD *)(v9 + 64);
  v14((v15 + v10 + v12) & ~v10, (v15 + v10 + v13) & ~v10, AssociatedTypeWitness);
  v16 = v15 + v10 + ((v15 + v10) & ~v10);
  v14((v16 + v12) & ~v10, (v16 + v13) & ~v10, AssociatedTypeWitness);
  v18(((v16 & ~v10) + v15 + *(unsigned __int8 *)(v6 + 80) + v12) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80), ((v16 & ~v10) + v15 + *(unsigned __int8 *)(v6 + 80) + v13) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80), v5);
  return a1;
}

uint64_t getEnumTagSinglePayload for MixedFormatStyle(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t AssociatedTypeWitness;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  int v17;
  unsigned int v18;
  int v19;
  int v20;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned int *)(v6 + 84);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v9 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v10 = *(unsigned int *)(v9 + 84);
  if (v10 <= v7)
    v11 = v7;
  else
    v11 = *(_DWORD *)(v9 + 84);
  if (!a2)
    return 0;
  v12 = *(_QWORD *)(v6 + 64);
  v13 = *(unsigned __int8 *)(v9 + 80);
  v14 = v12 + v13;
  if (a2 <= v11)
    goto LABEL_23;
  v15 = (((v14 & ~v13)
        + *(_QWORD *)(v9 + 64)
        + *(unsigned __int8 *)(v6 + 80)
        + ((*(_QWORD *)(v9 + 64) + v13 + ((*(_QWORD *)(v9 + 64) + v13) & ~v13)) & ~v13)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))
      + v12;
  v16 = 8 * v15;
  if (v15 <= 3)
  {
    v18 = ((a2 - v11 + ~(-1 << v16)) >> v16) + 1;
    if (HIWORD(v18))
    {
      v17 = *(_DWORD *)(a1 + v15);
      if (!v17)
        goto LABEL_23;
      goto LABEL_14;
    }
    if (v18 > 0xFF)
    {
      v17 = *(unsigned __int16 *)(a1 + v15);
      if (!*(_WORD *)(a1 + v15))
        goto LABEL_23;
      goto LABEL_14;
    }
    if (v18 < 2)
    {
LABEL_23:
      if (v11)
      {
        if (v7 >= v10)
          return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(a1, v7, v5);
        else
          return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))((v14 + a1) & ~v13, v10, AssociatedTypeWitness);
      }
      return 0;
    }
  }
  v17 = *(unsigned __int8 *)(a1 + v15);
  if (!*(_BYTE *)(a1 + v15))
    goto LABEL_23;
LABEL_14:
  v19 = (v17 - 1) << v16;
  if (v15 > 3)
    v19 = 0;
  if ((_DWORD)v15)
  {
    if (v15 <= 3)
      v20 = v15;
    else
      v20 = 4;
    __asm { BR              X12 }
  }
  return v11 + v19 + 1;
}

void storeEnumTagSinglePayload for MixedFormatStyle(_BYTE *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  size_t v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  int v16;

  v7 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v8 = *(_DWORD *)(v7 + 84);
  v9 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  if (*(_DWORD *)(v9 + 84) <= v8)
    v10 = v8;
  else
    v10 = *(_DWORD *)(v9 + 84);
  v11 = *(unsigned __int8 *)(v9 + 80);
  v12 = ((((*(_QWORD *)(v7 + 64) + v11) & ~v11)
        + *(unsigned __int8 *)(v7 + 80)
        + ((*(_QWORD *)(v9 + 64) + v11 + ((*(_QWORD *)(v9 + 64) + v11) & ~v11)) & ~v11)
        + *(_QWORD *)(v9 + 64)) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))
      + *(_QWORD *)(v7 + 64);
  if (a3 <= v10)
  {
    v13 = 0;
  }
  else if (v12 <= 3)
  {
    v15 = ((a3 - v10 + ~(-1 << (8 * v12))) >> (8 * v12)) + 1;
    if (HIWORD(v15))
    {
      v13 = 4u;
    }
    else if (v15 >= 0x100)
    {
      v13 = 2;
    }
    else
    {
      v13 = v15 > 1;
    }
  }
  else
  {
    v13 = 1u;
  }
  if (v10 < a2)
  {
    v14 = ~v10 + a2;
    if (v12 < 4)
    {
      if ((_DWORD)v12)
      {
        v16 = v14 & ~(-1 << (8 * v12));
        bzero(a1, v12);
        if ((_DWORD)v12 == 3)
        {
          *(_WORD *)a1 = v16;
          a1[2] = BYTE2(v16);
        }
        else if ((_DWORD)v12 == 2)
        {
          *(_WORD *)a1 = v16;
        }
        else
        {
          *a1 = v16;
        }
      }
    }
    else
    {
      bzero(a1, v12);
      *(_DWORD *)a1 = v14;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X13 }
}

void sub_2350ACC00()
{
  uint64_t v0;
  int v1;

  *(_WORD *)v0 = v1;
  *(_BYTE *)(v0 + 2) = BYTE2(v1);
  JUMPOUT(0x2350ACBE8);
}

void sub_2350ACC10()
{
  _WORD *v0;
  __int16 v1;

  *v0 = v1;
  JUMPOUT(0x2350ACBE8);
}

void sub_2350ACC18()
{
  _DWORD *v0;
  int v1;

  *v0 = v1;
  JUMPOUT(0x2350ACBE8);
}

uint64_t getEnumTagSinglePayload for _MixedAoDFrequencyFormatInitializer(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  char v8;
  int v9;
  unsigned int v10;
  int v11;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = a2 - v5;
  if (a2 <= v5)
    goto LABEL_18;
  v7 = *(_QWORD *)(v4 + 64);
  v8 = 8 * v7;
  if (v7 <= 3)
  {
    v10 = ((v6 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      v9 = *(_DWORD *)(a1 + v7);
      if (!v9)
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      v9 = *(unsigned __int16 *)(a1 + v7);
      if (!*(_WORD *)(a1 + v7))
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_18:
      if (v5)
        return (*(uint64_t (**)(void))(v4 + 48))();
      return 0;
    }
  }
  v9 = *(unsigned __int8 *)(a1 + v7);
  if (!*(_BYTE *)(a1 + v7))
    goto LABEL_18;
LABEL_11:
  v11 = (v9 - 1) << v8;
  if (v7 > 3)
    v11 = 0;
  if (!(_DWORD)v7)
    return v5 + v11 + 1;
  if (v7 > 3)
    LODWORD(v7) = 4;
  return ((uint64_t (*)(void))((char *)&loc_2350ACCD4 + 4 * byte_2352C4FDF[(v7 - 1)]))();
}

void storeEnumTagSinglePayload for _MixedAoDFrequencyFormatInitializer(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  BOOL v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = a3 >= v7;
  v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      v13 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v13))
      {
        v11 = 4u;
      }
      else if (v13 >= 0x100)
      {
        v11 = 2;
      }
      else
      {
        v11 = v13 > 1;
      }
    }
    else
    {
      v11 = 1u;
    }
  }
  else
  {
    v11 = 0;
  }
  if (v7 < a2)
  {
    v12 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        v14 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v14;
          *((_BYTE *)a1 + 2) = BYTE2(v14);
        }
        else if ((_DWORD)v8 == 2)
        {
          *a1 = v14;
        }
        else
        {
          *(_BYTE *)a1 = v14;
        }
      }
    }
    else
    {
      bzero(a1, *(_QWORD *)(v6 + 64));
      *(_DWORD *)a1 = v12;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X11 }
}

void base witness table accessor for Equatable in MixedFormatStyle<A>()
{
  JUMPOUT(0x23B7C9C04);
}

void base witness table accessor for Decodable in MixedFormatStyle<A>()
{
  JUMPOUT(0x23B7C9C04);
}

void base witness table accessor for Encodable in MixedFormatStyle<A>()
{
  JUMPOUT(0x23B7C9C04);
}

void base witness table accessor for Hashable in MixedFormatStyle<A>()
{
  JUMPOUT(0x23B7C9C04);
}

void base witness table accessor for Equatable in PausedFormatStyle<A, B>()
{
  JUMPOUT(0x23B7C9C04);
}

void base witness table accessor for Decodable in PausedFormatStyle<A, B>()
{
  JUMPOUT(0x23B7C9C04);
}

void base witness table accessor for Encodable in PausedFormatStyle<A, B>()
{
  JUMPOUT(0x23B7C9C04);
}

void base witness table accessor for Hashable in PausedFormatStyle<A, B>()
{
  JUMPOUT(0x23B7C9C04);
}

void base witness table accessor for FormatStyle in PausedFormatStyle<A, B>()
{
  JUMPOUT(0x23B7C9C04);
}

void base witness table accessor for FormatStyle in MixedFormatStyle<A>()
{
  JUMPOUT(0x23B7C9C04);
}

void type metadata accessor for PausedFormatStyle.CodingKeys()
{
  JUMPOUT(0x23B7C9B5CLL);
}

void type metadata accessor for MixedFormatStyle.CodingKeys()
{
  JUMPOUT(0x23B7C9B5CLL);
}

uint64_t storeEnumTagSinglePayload for MixedFormatStyle.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_2350AD00C + 4 * byte_2352C4FF2[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_2350AD040 + 4 * byte_2352C4FED[v4]))();
}

uint64_t sub_2350AD040(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_2350AD048(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x2350AD050);
  return result;
}

uint64_t sub_2350AD05C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x2350AD064);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_2350AD068(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_2350AD070(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t storeEnumTagSinglePayload for PausedFormatStyle.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_2350AD0C8 + 4 * byte_2352C4FFC[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_2350AD0FC + 4 * byte_2352C4FF7[v4]))();
}

uint64_t sub_2350AD0FC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_2350AD104(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x2350AD10CLL);
  return result;
}

uint64_t sub_2350AD118(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x2350AD120);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_2350AD124(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_2350AD12C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void base witness table accessor for Equatable in PausedFormatStyle<A, B>.CodingKeys()
{
  JUMPOUT(0x23B7C9C04);
}

void base witness table accessor for Equatable in MixedFormatStyle<A>.CodingKeys()
{
  JUMPOUT(0x23B7C9C04);
}

void base witness table accessor for CustomDebugStringConvertible in MixedFormatStyle<A>.CodingKeys()
{
  JUMPOUT(0x23B7C9C04);
}

void base witness table accessor for CustomStringConvertible in MixedFormatStyle<A>.CodingKeys()
{
  JUMPOUT(0x23B7C9C04);
}

void base witness table accessor for CustomDebugStringConvertible in PausedFormatStyle<A, B>.CodingKeys()
{
  JUMPOUT(0x23B7C9C04);
}

void base witness table accessor for CustomStringConvertible in PausedFormatStyle<A, B>.CodingKeys()
{
  JUMPOUT(0x23B7C9C04);
}

_QWORD *_RendererConfiguration.init(renderer:)@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *result;
  a2[1] = 0;
  return result;
}

double _RendererConfiguration.RasterizationOptions.init()@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_BYTE *)a1 = 0;
  *(_DWORD *)(a1 + 4) = 0;
  *(_BYTE *)(a1 + 8) = 1;
  *(_QWORD *)&result = 65792;
  *(_DWORD *)(a1 + 9) = 65792;
  *(_QWORD *)(a1 + 16) = 3;
  return result;
}

uint64_t _RendererConfiguration.renderer.getter@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v1;

  *a1 = *v1;
  return swift_retain();
}

uint64_t _RendererConfiguration.renderer.setter(uint64_t *a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t result;

  v2 = *a1;
  result = swift_release();
  *v1 = v2;
  return result;
}

uint64_t (*_RendererConfiguration.renderer.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

double _RendererConfiguration.minFrameInterval.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 8);
}

void _RendererConfiguration.minFrameInterval.setter(double a1)
{
  uint64_t v1;

  *(double *)(v1 + 8) = a1;
}

uint64_t (*_RendererConfiguration.minFrameInterval.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t static _RendererConfiguration.rasterized(_:)@<X0>(char *a1@<X0>, uint64_t *a2@<X8>)
{
  char v3;
  int v4;
  char v5;
  char v6;
  char v7;
  char v8;
  char v9;
  uint64_t v10;
  uint64_t result;

  v3 = *a1;
  v4 = *((_DWORD *)a1 + 1);
  v5 = a1[8];
  v6 = a1[9];
  v7 = a1[10];
  v8 = a1[11];
  v9 = a1[12];
  v10 = *((_QWORD *)a1 + 2);
  result = swift_allocObject();
  *(_BYTE *)(result + 16) = v3;
  *(_DWORD *)(result + 20) = v4;
  *(_BYTE *)(result + 24) = v5;
  *(_BYTE *)(result + 25) = v6;
  *(_BYTE *)(result + 26) = v7;
  *(_BYTE *)(result + 27) = v8;
  *(_BYTE *)(result + 28) = v9;
  *(_QWORD *)(result + 32) = v10;
  *a2 = result;
  a2[1] = 0;
  return result;
}

uint64_t sub_2350AD2C4()
{
  return swift_deallocObject();
}

void _RendererConfiguration.RasterizationOptions.colorMode.getter(_BYTE *a1@<X8>)
{
  _BYTE *v1;

  *a1 = *v1;
}

_BYTE *_RendererConfiguration.RasterizationOptions.colorMode.setter(_BYTE *result)
{
  _BYTE *v1;

  *v1 = *result;
  return result;
}

uint64_t (*_RendererConfiguration.RasterizationOptions.colorMode.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

unint64_t _RendererConfiguration.RasterizationOptions.rbColorMode.getter()
{
  uint64_t v0;

  return *(unsigned int *)(v0 + 4) | ((unint64_t)*(unsigned __int8 *)(v0 + 8) << 32);
}

uint64_t _RendererConfiguration.RasterizationOptions.rbColorMode.setter(uint64_t result)
{
  uint64_t v1;

  *(_DWORD *)(v1 + 4) = result;
  *(_BYTE *)(v1 + 8) = BYTE4(result) & 1;
  return result;
}

uint64_t (*_RendererConfiguration.RasterizationOptions.rbColorMode.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t _RendererConfiguration.RasterizationOptions.rendersAsynchronously.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 9);
}

uint64_t _RendererConfiguration.RasterizationOptions.rendersAsynchronously.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 9) = result;
  return result;
}

uint64_t (*_RendererConfiguration.RasterizationOptions.rendersAsynchronously.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t _RendererConfiguration.RasterizationOptions.isOpaque.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 10);
}

uint64_t _RendererConfiguration.RasterizationOptions.isOpaque.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 10) = result;
  return result;
}

uint64_t (*_RendererConfiguration.RasterizationOptions.isOpaque.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t _RendererConfiguration.RasterizationOptions.drawsPlatformViews.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 11);
}

uint64_t _RendererConfiguration.RasterizationOptions.drawsPlatformViews.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 11) = result;
  return result;
}

uint64_t (*_RendererConfiguration.RasterizationOptions.drawsPlatformViews.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t _RendererConfiguration.RasterizationOptions.prefersDisplayCompositing.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 12);
}

uint64_t _RendererConfiguration.RasterizationOptions.prefersDisplayCompositing.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 12) = result;
  return result;
}

uint64_t (*_RendererConfiguration.RasterizationOptions.prefersDisplayCompositing.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t _RendererConfiguration.RasterizationOptions.maxDrawableCount.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 16);
}

uint64_t _RendererConfiguration.RasterizationOptions.maxDrawableCount.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = result;
  return result;
}

uint64_t (*_RendererConfiguration.RasterizationOptions.maxDrawableCount.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

_QWORD *assignWithCopy for _RendererConfiguration(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  return a1;
}

_QWORD *assignWithTake for _RendererConfiguration(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_release();
  a1[1] = a2[1];
  return a1;
}

ValueMetadata *type metadata accessor for _RendererConfiguration()
{
  return &type metadata for _RendererConfiguration;
}

ValueMetadata *type metadata accessor for _RendererConfiguration.Renderer()
{
  return &type metadata for _RendererConfiguration.Renderer;
}

uint64_t getEnumTagSinglePayload for _RendererConfiguration.RasterizationOptions(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 24))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 9);
  v4 = v3 >= 2;
  v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for _RendererConfiguration.RasterizationOptions(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 24) = 0;
    if (a2)
      *(_BYTE *)(result + 9) = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for _RendererConfiguration.RasterizationOptions()
{
  return &type metadata for _RendererConfiguration.RasterizationOptions;
}

uint64_t key path getter for _ViewInputs.position : _ViewInputs@<X0>(uint64_t result@<X0>, _DWORD *a2@<X8>)
{
  *a2 = *(_DWORD *)(result + 64);
  return result;
}

_QWORD *specialized Sequence._copyContents(initializing:)(_QWORD *result, _BYTE *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  unint64_t v12;
  __int128 *v13;
  _OWORD *v14;
  __int128 v15;
  _BYTE *v16;

  if (!a2)
  {
    a3 = 0;
    goto LABEL_21;
  }
  if (!a3)
  {
LABEL_21:
    *result = a4;
    result[1] = a5;
    result[2] = a3;
    return (_QWORD *)a3;
  }
  if ((a3 & 0x8000000000000000) == 0)
  {
    v5 = *(_QWORD *)(a4 + 16);
    if (!v5)
    {
LABEL_20:
      a3 = v5;
      goto LABEL_21;
    }
    *a2 = *(_BYTE *)(a4 + 32);
    if (a3 != 1)
    {
      if (v5 != 1)
      {
        v6 = v5 - 2;
        if (v5 - 2 >= (unint64_t)(a3 - 2))
          v6 = a3 - 2;
        v7 = v6 + 1;
        if (v7 < 0x21 || ((unint64_t)&a2[-a4] & 0xFFFFFFFFFFFFFFE0) == 0x20)
        {
          v8 = 2;
          v9 = 1;
          v10 = a2;
        }
        else
        {
          v11 = v7 & 0x1F;
          if ((v7 & 0x1F) == 0)
            v11 = 32;
          v12 = v7 - v11;
          v9 = v7 - v11 + 1;
          v10 = &a2[v12];
          v8 = v12 + 2;
          v13 = (__int128 *)(a4 + 49);
          v14 = a2 + 17;
          do
          {
            v15 = *v13;
            *(v14 - 1) = *(v13 - 1);
            *v14 = v15;
            v13 += 2;
            v14 += 2;
            v12 -= 32;
          }
          while (v12);
        }
        v16 = v10 + 1;
        while (1)
        {
          *v16 = *(_BYTE *)(a4 + 32 + v9);
          if (a3 == v8)
            goto LABEL_21;
          v9 = v8;
          ++v16;
          if (v5 + 1 == ++v8)
            goto LABEL_20;
        }
      }
      goto LABEL_20;
    }
    goto LABEL_21;
  }
  __break(1u);
  return result;
}

uint64_t specialized Sequence._copyContents(initializing:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char v4;
  uint64_t v5;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  char v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  unint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;

  v7 = (_QWORD *)result;
  if (!a2)
  {
    v8 = 0;
    goto LABEL_11;
  }
  v8 = a3;
  if (!a3)
  {
LABEL_11:
    *v7 = a4;
    v7[1] = v8;
    return v8;
  }
  if ((a3 & 0x8000000000000000) == 0)
  {
    v9 = *(_QWORD *)(a4 + 16);
    if (!v9)
    {
LABEL_10:
      v8 = v9;
      goto LABEL_11;
    }
    result = *(_QWORD *)(a4 + 32);
    v11 = *(_BYTE *)(a4 + 40);
    v12 = *(_OWORD *)(a4 + 48);
    *(_QWORD *)a2 = result;
    *(_BYTE *)(a2 + 8) = v11;
    *(_OWORD *)(a2 + 16) = v12;
    if (a3 == 1)
    {
      outlined copy of Text.Effect.Markers.MarkerType(result, v11);
      goto LABEL_11;
    }
    v22 = v9 - 1;
    if (v9 == 1)
    {
      outlined copy of Text.Effect.Markers.MarkerType(result, v11);
      goto LABEL_10;
    }
    v19 = result;
    v20 = v11;
    v21 = v9;
    if (*(_QWORD *)(a4 + 16) < 2uLL)
    {
LABEL_18:
      __break(1u);
LABEL_19:
      outlined copy of Text.Effect.Markers.MarkerType(v19, v20);
      outlined copy of Text.Effect.Markers.MarkerType(v5, v4);
      goto LABEL_11;
    }
    v13 = 0;
    v14 = 0;
    v15 = a3 - 2;
    while (v22 != v14)
    {
      v16 = a2 + v13;
      v5 = *(_QWORD *)(a4 + v13 + 64);
      v4 = *(_BYTE *)(a4 + v13 + 72);
      v17 = *(_OWORD *)(a4 + v13 + 80);
      *(_QWORD *)(v16 + 32) = v5;
      *(_BYTE *)(v16 + 40) = v4;
      *(_OWORD *)(v16 + 48) = v17;
      if (v15 == v14)
        goto LABEL_19;
      if (v21 - 2 == v14)
      {
        outlined copy of Text.Effect.Markers.MarkerType(v19, v20);
        outlined copy of Text.Effect.Markers.MarkerType(v5, v4);
        v8 = v21;
        goto LABEL_11;
      }
      result = outlined copy of Text.Effect.Markers.MarkerType(v5, v4);
      v18 = v14 + 2;
      ++v14;
      v13 += 32;
      if (v18 >= *(_QWORD *)(a4 + 16))
        goto LABEL_18;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v5 = (_QWORD *)result;
  if (!a2)
  {
    v6 = 0;
    goto LABEL_20;
  }
  v6 = a3;
  if (!a3)
  {
LABEL_20:
    *v5 = a4;
    v5[1] = v6;
    return v6;
  }
  if (a3 < 0)
    goto LABEL_22;
  v7 = *(_QWORD *)(a4 + 16);
  if (!v7)
  {
    v6 = 0;
    goto LABEL_20;
  }
  v9 = *(_QWORD *)(a4 + 40);
  v10 = *(_BYTE *)(a4 + 48);
  *(_QWORD *)a2 = *(_QWORD *)(a4 + 32);
  *(_QWORD *)(a2 + 8) = v9;
  *(_BYTE *)(a2 + 16) = v10;
  if (a3 == 1)
  {
LABEL_19:
    swift_bridgeObjectRetain();
    goto LABEL_20;
  }
  v21 = v7 - 1;
  if (v7 == 1)
  {
    v6 = 1;
    goto LABEL_19;
  }
  v20 = v7;
  if (*(_QWORD *)(a4 + 16) < 2uLL)
  {
LABEL_16:
    __break(1u);
LABEL_17:
    v6 = v20;
LABEL_18:
    swift_bridgeObjectRetain();
    goto LABEL_19;
  }
  v11 = 0;
  v12 = 0;
  v13 = a3 - 2;
  v14 = v7 - 2;
  while (v21 != v12)
  {
    v15 = a2 + v11;
    v16 = *(_BYTE *)(a4 + v11 + 72);
    v17 = *(_QWORD *)(a4 + v11 + 64);
    *(_QWORD *)(v15 + 24) = *(_QWORD *)(a4 + v11 + 56);
    *(_QWORD *)(v15 + 32) = v17;
    *(_BYTE *)(v15 + 40) = v16;
    if (v13 == v12)
      goto LABEL_18;
    if (v14 == v12)
      goto LABEL_17;
    v18 = *(_QWORD *)(a4 + 16);
    result = swift_bridgeObjectRetain();
    v19 = v12 + 2;
    ++v12;
    v11 += 24;
    if (v19 >= v18)
      goto LABEL_16;
  }
  __break(1u);
LABEL_22:
  __break(1u);
  return result;
}

_QWORD *specialized Sequence._copyContents(initializing:)(_QWORD *result, _OWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _OWORD *v13;
  uint64_t v14;
  __int128 *v15;
  _OWORD *v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  _OWORD *v21;

  if (!a2)
  {
    a3 = 0;
    goto LABEL_29;
  }
  if (!a3)
  {
LABEL_29:
    *result = a4;
    result[1] = a3;
    return (_QWORD *)a3;
  }
  if ((a3 & 0x8000000000000000) == 0)
  {
    v4 = *(_QWORD *)(a4 + 16);
    if (!v4)
    {
LABEL_28:
      a3 = v4;
      goto LABEL_29;
    }
    *a2 = *(_OWORD *)(a4 + 32);
    if (a3 != 1)
    {
      if (v4 != 1)
      {
        v5 = v4 - 2;
        if (v4 - 2 >= (unint64_t)(a3 - 2))
          v6 = a3 - 2;
        else
          v6 = v4 - 2;
        v7 = v6 + 1;
        if (v7 < 0xB)
          goto LABEL_24;
        if (v5 >= a3 - 2)
          v5 = a3 - 2;
        v8 = v5;
        if ((unint64_t)(a2 + 1) >= v8 * 16 + a4 + 64 || a4 + 48 >= (unint64_t)&a2[v8 + 2])
        {
          v10 = v7 & 3;
          if ((v7 & 3) == 0)
            v10 = 4;
          v11 = v7 - v10;
          v12 = v7 - v10 + 1;
          v13 = &a2[v11];
          v14 = v11 + 2;
          v15 = (__int128 *)(a4 + 80);
          v16 = a2 + 3;
          do
          {
            v18 = *(v15 - 2);
            v17 = *(v15 - 1);
            v20 = *v15;
            v19 = v15[1];
            v15 += 4;
            *(v16 - 2) = v18;
            *(v16 - 1) = v17;
            *v16 = v20;
            v16[1] = v19;
            v16 += 4;
            v11 -= 4;
          }
          while (v11);
        }
        else
        {
LABEL_24:
          v14 = 2;
          v12 = 1;
          v13 = a2;
        }
        v21 = v13 + 1;
        while (1)
        {
          *v21 = *(_OWORD *)(a4 + 32 + 16 * v12);
          if (a3 == v14)
            goto LABEL_29;
          v12 = v14;
          ++v21;
          if (v4 + 1 == ++v14)
            goto LABEL_28;
        }
      }
      goto LABEL_28;
    }
    goto LABEL_29;
  }
  __break(1u);
  return result;
}

{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  __int128 *v7;
  _OWORD *v8;
  __int128 v9;

  if (!a2)
  {
    a3 = 0;
    goto LABEL_13;
  }
  if (!a3)
    goto LABEL_13;
  if ((a3 & 0x8000000000000000) == 0)
  {
    v4 = *(_QWORD *)(a4 + 16);
    if (!v4)
    {
LABEL_11:
      a3 = v4;
      goto LABEL_13;
    }
    v5 = *(_OWORD *)(a4 + 48);
    *a2 = *(_OWORD *)(a4 + 32);
    a2[1] = v5;
    if (a3 != 1)
    {
      if (v4 != 1)
      {
        v6 = 0;
        v7 = (__int128 *)(a4 + 80);
        v8 = a2 + 3;
        while ((unint64_t)(v6 + 1) < *(_QWORD *)(a4 + 16))
        {
          v9 = *v7;
          *(v8 - 1) = *(v7 - 1);
          *v8 = v9;
          if (a3 - 2 == v6)
            goto LABEL_13;
          ++v6;
          v7 += 2;
          v8 += 2;
          if (v4 - 1 == v6)
            goto LABEL_11;
        }
        __break(1u);
        goto LABEL_15;
      }
      goto LABEL_11;
    }
LABEL_13:
    *result = a4;
    result[1] = a3;
    return (_QWORD *)a3;
  }
LABEL_15:
  __break(1u);
  return result;
}

uint64_t specialized Sequence._copyContents(initializing:)(uint64_t result, _QWORD *a2, uint64_t a3, _QWORD *a4, char a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;

  v7 = result;
  if (!a2)
  {
    v8 = 0;
    goto LABEL_18;
  }
  v8 = a3;
  if (!a3)
  {
LABEL_18:
    *(_QWORD *)v7 = a4;
    *(_BYTE *)(v7 + 8) = a5;
    *(_QWORD *)(v7 + 16) = v8;
    return v8;
  }
  if ((a3 & 0x8000000000000000) == 0)
  {
    v9 = a4[2];
    if (v9)
    {
      *a2 = a4[4];
      if (a3 != 1)
      {
        if (v9 == 1)
        {
          v8 = 1;
        }
        else
        {
          a2[1] = a4[5];
          v10 = a3 - 2;
          if (a3 != 2)
          {
            v11 = 0;
            v12 = a2 + 2;
            while (v9 - 2 != v11)
            {
              swift_retain();
              v12[v11] = a4[v11 + 6];
              if (v10 == ++v11)
                goto LABEL_16;
            }
            v8 = v9;
          }
LABEL_16:
          swift_retain();
        }
      }
      swift_retain();
    }
    else
    {
      v8 = 0;
    }
    goto LABEL_18;
  }
  __break(1u);
  return result;
}

void specialized Sequence._copyContents(initializing:)(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  int v12;
  id v13;
  id v14;
  uint64_t v15;
  _QWORD *v16;
  __int128 v17;

  v5 = *(_QWORD *)(a4 + 16);
  if (!a2 || !a3)
    goto LABEL_16;
  if ((a3 & 0x8000000000000000) == 0)
  {
    if (v5 == *(_QWORD *)(a4 + 24))
    {
LABEL_16:
      *a1 = a4;
      a1[1] = v5;
      return;
    }
    v6 = a2;
    v16 = a1;
    v7 = 0;
    v8 = a3 - 1;
    while (1)
    {
      v9 = v7;
      v11 = *(void **)(a4 + 32);
      v10 = *(_QWORD *)(a4 + 40);
      v17 = *(_OWORD *)(a4 + 56);
      v12 = *(_DWORD *)(a4 + 72);
      if ((*(_BYTE *)(a4 + 48) & 1) != 0)
      {
        outlined copy of Text.Layout.Line.Line(v11, v10, 1);
        v13 = (id)_NSTextLineFragmentGetCTLine(v11);
        if (!v13)
          goto LABEL_19;
        v14 = v13;
        outlined consume of Text.Layout.Line.Line(v11, v10, 1);
        v10 = 0;
        v11 = v14;
      }
      else
      {
        outlined copy of Text.Layout.Line.Line(v11, v10, 0);
        outlined copy of Text.Layout.Line.Line(v11, v10, 0);

        swift_release();
      }
      v15 = v5 + v9;
      if (v5 + v9 < *(_QWORD *)(a4 + 16) || v15 >= *(_QWORD *)(a4 + 24))
        break;
      *(_QWORD *)v6 = v11;
      *(_QWORD *)(v6 + 8) = v15;
      *(_OWORD *)(v6 + 16) = v17;
      *(_DWORD *)(v6 + 32) = v12;
      *(_QWORD *)(v6 + 40) = v10;
      if (v8 != v9)
      {
        v7 = v9 + 1;
        v6 += 48;
        if (v5 + v9 + 1 != *(_QWORD *)(a4 + 24))
          continue;
      }
      v5 += v9 + 1;
      a1 = v16;
      goto LABEL_16;
    }
    __break(1u);
  }
  __break(1u);
LABEL_19:
  __break(1u);
}

_QWORD *specialized Sequence._copyContents(initializing:)(_QWORD *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t i;
  uint64_t v7;
  uint64_t v8;
  char v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;

  if (!a2)
  {
    a3 = 0;
    goto LABEL_11;
  }
  if (!a3)
  {
LABEL_11:
    *result = a4;
    result[1] = a3;
    return (_QWORD *)a3;
  }
  if ((a3 & 0x8000000000000000) == 0)
  {
    v4 = *(_QWORD *)(a4 + 16);
    if (v4)
    {
      v5 = 0;
      for (i = 1; ; ++i)
      {
        v7 = *(_QWORD *)(a4 + v5 + 96);
        v8 = a2 + v5;
        v9 = *(_BYTE *)(a4 + v5 + 104);
        v10 = *(_OWORD *)(a4 + v5 + 48);
        v11 = *(_OWORD *)(a4 + v5 + 64);
        v12 = *(_OWORD *)(a4 + v5 + 80);
        v13 = *(_OWORD *)(a4 + v5 + 112);
        *(_OWORD *)v8 = *(_OWORD *)(a4 + v5 + 32);
        *(_OWORD *)(v8 + 16) = v10;
        *(_OWORD *)(v8 + 32) = v11;
        *(_OWORD *)(v8 + 48) = v12;
        *(_QWORD *)(v8 + 64) = v7;
        *(_BYTE *)(v8 + 72) = v9;
        *(_OWORD *)(v8 + 80) = v13;
        if (a3 == i)
          break;
        if (v4 == i)
          goto LABEL_10;
        v5 += 96;
      }
    }
    else
    {
LABEL_10:
      a3 = v4;
    }
    goto LABEL_11;
  }
  __break(1u);
  return result;
}

_QWORD *specialized Sequence._copyContents(initializing:)(_QWORD *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  void *v16;
  __int128 v17;
  __int128 v18;
  unint64_t v19;
  id v20;
  id v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;

  if (!a2)
  {
LABEL_11:
    v7 = 0;
    goto LABEL_15;
  }
  v7 = a3;
  if (!a3)
  {
LABEL_15:
    *result = a4;
    result[1] = a5;
    result[2] = a6;
    result[3] = v7;
    return (_QWORD *)v7;
  }
  if ((a3 & 0x8000000000000000) == 0)
  {
    v8 = *(_QWORD *)(a6 + 16);
    if (v8)
    {
      v23 = a4;
      v24 = result;
      v25 = a5;
      v10 = 0;
      v11 = 1;
      while (1)
      {
        v12 = *(_QWORD *)(a6 + v10 + 88);
        v13 = a2 + v10;
        v14 = *(_DWORD *)(a6 + v10 + 64);
        v16 = *(void **)(a6 + v10 + 32);
        v15 = *(_QWORD *)(a6 + v10 + 40);
        v17 = *(_OWORD *)(a6 + v10 + 48);
        v18 = *(_OWORD *)(a6 + v10 + 72);
        *(_QWORD *)v13 = v16;
        *(_QWORD *)(v13 + 8) = v15;
        *(_OWORD *)(v13 + 16) = v17;
        *(_DWORD *)(v13 + 32) = v14;
        *(_OWORD *)(v13 + 40) = v18;
        *(_QWORD *)(v13 + 56) = v12;
        if (v7 == v11)
          break;
        if (v8 == v11)
        {
          v7 = v8;
          break;
        }
        v19 = *(_QWORD *)(a6 + 16);
        v20 = v16;
        result = (_QWORD *)swift_retain();
        v10 += 64;
        if (v11++ >= v19)
        {
          __break(1u);
          goto LABEL_11;
        }
      }
      swift_retain();
      v22 = v16;
      result = v24;
      a5 = v25;
      a4 = v23;
    }
    else
    {
      v7 = 0;
    }
    goto LABEL_15;
  }
  __break(1u);
  return result;
}

uint64_t specialized Sequence._copyContents(initializing:)(uint64_t a1, char *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t (*v18)(_QWORD);
  uint64_t result;
  uint64_t v20;
  void (*v21)(char *, char *, uint64_t);
  uint64_t v22;
  uint64_t v23;

  v4 = v3;
  type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for Date?, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v22 - v9;
  v11 = type metadata accessor for Date();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v11);
  v14 = (char *)&v22 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for TimerIntervalTimelineSchedule.CountdownReducedFrequencyEntries(0);
  MEMORY[0x24BDAC7A8](v15);
  v17 = (char *)&v22 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = outlined init with take of LocalizedStringKey.FormatArgument(v4, (uint64_t)v17, v18);
  if (!a2)
  {
    a3 = 0;
    goto LABEL_12;
  }
  if (!a3)
  {
LABEL_12:
    outlined init with take of LocalizedStringKey.FormatArgument((uint64_t)v17, a1, type metadata accessor for TimerIntervalTimelineSchedule.CountdownReducedFrequencyEntries);
    return a3;
  }
  if ((a3 & 0x8000000000000000) == 0)
  {
    v23 = a1;
    TimerIntervalTimelineSchedule.CountdownReducedFrequencyEntries.next()(v10);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11) == 1)
    {
      v20 = 0;
LABEL_10:
      outlined destroy of Date?((uint64_t)v10);
      a3 = v20;
    }
    else
    {
      v20 = 0;
      v21 = *(void (**)(char *, char *, uint64_t))(v12 + 32);
      while (1)
      {
        v21(v14, v10, v11);
        v21(a2, v14, v11);
        if (a3 - 1 == v20)
          break;
        a2 += *(_QWORD *)(v12 + 72);
        TimerIntervalTimelineSchedule.CountdownReducedFrequencyEntries.next()(v10);
        ++v20;
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11) == 1)
          goto LABEL_10;
      }
    }
    a1 = v23;
    goto LABEL_12;
  }
  __break(1u);
  return result;
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t (*v18)(_QWORD);
  uint64_t result;
  uint64_t v20;
  void (*v21)(char *, char *, uint64_t);
  uint64_t v22;
  void (*v23)(char *, char *, uint64_t);
  uint64_t v24;
  uint64_t v25;

  v4 = v3;
  type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for Date?, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v24 - v9;
  v11 = type metadata accessor for Date();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v11);
  v14 = (char *)&v24 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for PeriodicTimelineSchedule.Entries(0);
  MEMORY[0x24BDAC7A8](v15);
  v17 = (char *)&v24 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = outlined init with take of LocalizedStringKey.FormatArgument(v4, (uint64_t)v17, v18);
  if (!a2)
  {
    v20 = 0;
LABEL_13:
    outlined init with take of LocalizedStringKey.FormatArgument((uint64_t)v17, a1, type metadata accessor for PeriodicTimelineSchedule.Entries);
    return v20;
  }
  if (!a3)
  {
    v20 = 0;
    goto LABEL_13;
  }
  if ((a3 & 0x8000000000000000) == 0)
  {
    v24 = a3;
    v25 = a1;
    v20 = 0;
    v21 = *(void (**)(char *, char *, uint64_t))(v12 + 16);
    v22 = a3 - 1;
    while (1)
    {
      v21(v10, v17, v11);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v10, 0, 1, v11);
      static Date.+= infix(_:_:)();
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11) == 1)
      {
        outlined destroy of Date?((uint64_t)v10);
        goto LABEL_12;
      }
      v23 = *(void (**)(char *, char *, uint64_t))(v12 + 32);
      v23(v14, v10, v11);
      v23(a2, v14, v11);
      if (v22 == v20)
        break;
      a2 += *(_QWORD *)(v12 + 72);
      ++v20;
    }
    v20 = v24;
LABEL_12:
    a1 = v25;
    goto LABEL_13;
  }
  __break(1u);
  return result;
}

uint64_t specialized Sequence._copyContents(initializing:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t (*v34)(_QWORD);
  uint64_t result;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  char *v47;
  unsigned int (*v48)(char *, uint64_t, uint64_t);
  uint64_t v49;
  void (*v50)(uint64_t, uint64_t, uint64_t, uint64_t);
  void (*v51)(uint64_t, char *, uint64_t);
  char *v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  unsigned int v64;
  unsigned int v65;
  unsigned int v66;
  uint64_t v67;
  char *v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  void (*v82)(char *, char *, uint64_t);
  unsigned int (*v83)(char *, uint64_t, uint64_t);
  uint64_t v84;
  char *v85;
  uint64_t v86;

  v4 = v3;
  v8 = type metadata accessor for Calendar.SearchDirection();
  v78 = *(_QWORD *)(v8 - 8);
  v79 = v8;
  MEMORY[0x24BDAC7A8](v8);
  v77 = (char *)&v57 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for Calendar.RepeatedTimePolicy();
  v75 = *(_QWORD *)(v10 - 8);
  v76 = v10;
  MEMORY[0x24BDAC7A8](v10);
  v74 = (char *)&v57 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v73 = type metadata accessor for Calendar.MatchingPolicy();
  v84 = *(_QWORD *)(v73 - 8);
  MEMORY[0x24BDAC7A8](v73);
  v72 = (char *)&v57 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for Calendar();
  v70 = *(_QWORD *)(v13 - 8);
  v71 = v13;
  MEMORY[0x24BDAC7A8](v13);
  v15 = (char *)&v57 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for Date?, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v16);
  v18 = (char *)&v57 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v19);
  v21 = (char *)&v57 - v20;
  MEMORY[0x24BDAC7A8](v22);
  v24 = (char *)&v57 - v23;
  v25 = type metadata accessor for Date();
  v26 = *(_QWORD *)(v25 - 8);
  MEMORY[0x24BDAC7A8](v25);
  v59 = (char *)&v57 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v28);
  v85 = (char *)&v57 - v29;
  MEMORY[0x24BDAC7A8](v30);
  v69 = (char *)&v57 - v31;
  v32 = type metadata accessor for EveryMinuteTimelineSchedule.Entries(0);
  MEMORY[0x24BDAC7A8](v32);
  v86 = (uint64_t)&v57 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = outlined init with take of LocalizedStringKey.FormatArgument(v4, v86, v34);
  if (!a2)
  {
    a3 = 0;
    goto LABEL_20;
  }
  if (!a3)
  {
LABEL_20:
    outlined init with take of LocalizedStringKey.FormatArgument(v86, a1, type metadata accessor for EveryMinuteTimelineSchedule.Entries);
    return a3;
  }
  if ((a3 & 0x8000000000000000) == 0)
  {
    v58 = a1;
    outlined init with copy of Date?(v86, (uint64_t)v21);
    v83 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v26 + 48);
    if (v83(v21, 1, v25) == 1)
    {
      a3 = 0;
LABEL_6:
      outlined destroy of Date?((uint64_t)v21);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v26 + 56))(v24, 1, 1, v25);
      a1 = v58;
LABEL_19:
      outlined destroy of Date?((uint64_t)v24);
    }
    else
    {
      v36 = a3;
      a3 = 0;
      v66 = *MEMORY[0x24BDCF020];
      v65 = *MEMORY[0x24BDCF0B0];
      v64 = *MEMORY[0x24BDCF068];
      v82 = *(void (**)(char *, char *, uint64_t))(v26 + 32);
      v57 = v36;
      v61 = v36 - 1;
      v37 = v85;
      v68 = v24;
      v60 = v21;
      v67 = v26;
      v63 = v15;
      v62 = v25;
      while (1)
      {
        v80 = a2;
        v81 = a3;
        v82(v37, v21, v25);
        static Calendar.current.getter();
        if (one-time initialization token for zeroSecondComponents != -1)
          swift_once();
        v38 = type metadata accessor for DateComponents();
        __swift_project_value_buffer(v38, (uint64_t)static EveryMinuteTimelineSchedule.Entries.zeroSecondComponents);
        v40 = v72;
        v39 = v73;
        (*(void (**)(char *, _QWORD, uint64_t))(v84 + 104))(v72, v66, v73);
        v41 = v74;
        v42 = v75;
        v43 = v76;
        (*(void (**)(char *, _QWORD, uint64_t))(v75 + 104))(v74, v65, v76);
        v45 = v77;
        v44 = v78;
        v46 = v79;
        (*(void (**)(char *, _QWORD, uint64_t))(v78 + 104))(v77, v64, v79);
        v47 = v63;
        Calendar.nextDate(after:matching:matchingPolicy:repeatedTimePolicy:direction:)();
        (*(void (**)(char *, uint64_t))(v44 + 8))(v45, v46);
        (*(void (**)(char *, uint64_t))(v42 + 8))(v41, v43);
        (*(void (**)(char *, uint64_t))(v84 + 8))(v40, v39);
        (*(void (**)(char *, uint64_t))(v70 + 8))(v47, v71);
        v25 = v62;
        v48 = v83;
        if (v83(v18, 1, v62) == 1)
        {
          outlined destroy of Date?((uint64_t)v18);
          v49 = v86;
          outlined destroy of Date?(v86);
          v26 = v67;
          v50 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v67 + 56);
          v50(v49, 1, 1, v25);
          v24 = v68;
          v51 = (void (*)(uint64_t, char *, uint64_t))v82;
        }
        else
        {
          v52 = v59;
          v51 = (void (*)(uint64_t, char *, uint64_t))v82;
          v82(v59, v18, v25);
          v53 = v86;
          outlined destroy of Date?(v86);
          v51(v53, v52, v25);
          v26 = v67;
          v50 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v67 + 56);
          v50(v53, 0, 1, v25);
          v24 = v68;
        }
        v37 = v85;
        v51((uint64_t)v24, v85, v25);
        v50((uint64_t)v24, 0, 1, v25);
        if (v48(v24, 1, v25) == 1)
        {
          a1 = v58;
          a3 = v81;
          goto LABEL_19;
        }
        v54 = v69;
        v51((uint64_t)v69, v24, v25);
        v55 = v80;
        v51(v80, v54, v25);
        v56 = v81;
        if (v61 == v81)
          break;
        a2 = v55 + *(_QWORD *)(v26 + 72);
        v21 = v60;
        outlined init with copy of Date?(v86, (uint64_t)v60);
        v83 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v26 + 48);
        a3 = v56 + 1;
        if (v83(v21, 1, v25) == 1)
          goto LABEL_6;
      }
      a1 = v58;
      a3 = v57;
    }
    goto LABEL_20;
  }
  __break(1u);
  return result;
}

uint64_t specialized Sequence._copyContents(initializing:)(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v3;
  int *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  __int128 v20;
  char *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  Swift::UInt64 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  BOOL v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  BOOL v44;
  uint64_t v45;
  uint64_t result;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  char *v51;
  char *v52;
  uint64_t v53;

  v7 = (int *)type metadata accessor for ClusterIndexSequence.Iterator(0);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (uint64_t *)((char *)&v47 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v47 - v11;
  outlined init with copy of TypesettingLanguage(v3, (uint64_t)&v47 - v11, type metadata accessor for Text.Effect.BaseContent);
  v13 = type metadata accessor for ClusterIndexSequence(0);
  v14 = *(int *)(v13 + 24);
  v15 = (uint64_t *)(v3 + *(int *)(v13 + 20));
  v17 = *v15;
  v16 = v15[1];
  v18 = &v12[v7[5]];
  *(_QWORD *)v18 = v17;
  *((_QWORD *)v18 + 1) = v16;
  v19 = v7[6];
  v20 = *(_OWORD *)(v3 + v14);
  v51 = v12;
  v52 = &v12[v19];
  *(_OWORD *)&v12[v19] = v20;
  v21 = &v12[v7[7]];
  *(_QWORD *)v21 = v17;
  *((_QWORD *)v21 + 1) = v16;
  outlined destroy of TypesettingConfiguration(v3, type metadata accessor for ClusterIndexSequence);
  if (!a2)
  {
    a3 = 0;
    goto LABEL_29;
  }
  if (!a3)
  {
LABEL_29:
    outlined init with take of LocalizedStringKey.FormatArgument((uint64_t)v51, a1, type metadata accessor for ClusterIndexSequence.Iterator);
    return a3;
  }
  if (a3 < 0)
  {
LABEL_39:
    __break(1u);
LABEL_40:
    swift_retain();
    swift_retain();
  }
  else
  {
    v48 = a1;
    v49 = a3;
    v22 = 0;
    v50 = v21;
    while (1)
    {
      v23 = *(_QWORD *)v21;
      v24 = *(_QWORD *)v52;
      if (*(_QWORD *)v21 >= *(_QWORD *)v52)
      {
        if (__OFSUB__(v24, v23))
          goto LABEL_37;
        if (v24 != v23 || *((_QWORD *)v21 + 1) >= *((_QWORD *)v52 + 1))
        {
          a3 = v22;
LABEL_28:
          a1 = v48;
          goto LABEL_29;
        }
      }
      v53 = v22;
      outlined init with copy of TypesettingLanguage((uint64_t)v51, (uint64_t)v9, type metadata accessor for ClusterIndexSequence.Iterator);
      v26 = *v9;
      v25 = v9[1];
      v27 = v9[2];
      swift_beginAccess();
      v28 = *(_QWORD *)(v26 + 48);
      if (!*(_QWORD *)(v28 + 16))
        goto LABEL_40;
      v29 = (uint64_t)v9;
      swift_retain_n();
      swift_retain();
      v30 = specialized __RawDictionaryStorage.find<A>(_:)(v25, v27);
      if ((v31 & 1) == 0)
        break;
      v32 = *(_QWORD *)(*(_QWORD *)(v28 + 56) + 16 * v30);
      swift_endAccess();
      swift_bridgeObjectRetain();
      swift_release();
      if ((v23 & 0x8000000000000000) != 0)
        goto LABEL_31;
      v33 = *(_QWORD *)(v32 + 16);
      if (v23 >= v33)
        goto LABEL_32;
      v34 = v32 + 32;
      v35 = *(_QWORD *)(v32 + 32 + 8 * v23);
      v36 = 0;
      if (v23)
      {
        v37 = v23;
        while (1)
        {
          v38 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v34 + 96) + 16);
          v39 = __OFADD__(v36, v38);
          v36 += v38;
          if (v39)
            break;
          v34 += 8;
          if (!--v37)
            goto LABEL_18;
        }
        __break(1u);
LABEL_31:
        __break(1u);
LABEL_32:
        __break(1u);
LABEL_33:
        __break(1u);
LABEL_34:
        __break(1u);
LABEL_35:
        __break(1u);
LABEL_36:
        __break(1u);
LABEL_37:
        __break(1u);
LABEL_38:
        __break(1u);
        goto LABEL_39;
      }
LABEL_18:
      swift_retain();
      swift_bridgeObjectRelease();
      v9 = (uint64_t *)v29;
      outlined destroy of TypesettingConfiguration(v29, type metadata accessor for Text.Effect.BaseContent);
      v21 = v50;
      v40 = *((_QWORD *)v50 + 1);
      v41 = v40 + 1;
      if (__OFADD__(v40, 1))
        goto LABEL_33;
      *((_QWORD *)v50 + 1) = v41;
      v42 = *(_QWORD *)(*(_QWORD *)(v35 + 96) + 16);
      v39 = __OFADD__(v36, v42);
      v43 = v36 + v42;
      if (v39)
        goto LABEL_34;
      if (v43 < v36)
        goto LABEL_35;
      v44 = v43 == v41;
      if (__OFSUB__(v43, v41))
        goto LABEL_36;
      v45 = v53;
      if (v44)
      {
        if (__OFADD__(*(_QWORD *)v21, 1))
          goto LABEL_38;
        ++*(_QWORD *)v21;
      }
      v22 = v45 + 1;
      *a2 = v26;
      a2[1] = v25;
      a2[2] = v27;
      a2[3] = v35;
      a2[4] = v23;
      a2[5] = v33;
      a2[6] = v36;
      a2[7] = v40;
      a2 += 8;
      a3 = v49;
      if (v22 == v49)
        goto LABEL_28;
    }
    swift_release();
  }
  swift_endAccess();
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

_QWORD *specialized Sequence._copyContents(initializing:)(_QWORD *result, _QWORD *a2, uint64_t a3, _QWORD *a4, _QWORD *a5)
{
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = result;
  if (!a2)
  {
LABEL_9:
    v7 = 0;
    goto LABEL_10;
  }
  v7 = a3;
  if (!a3)
  {
LABEL_10:
    *v6 = a4;
    v6[1] = a5;
    return (_QWORD *)v7;
  }
  if ((a3 & 0x8000000000000000) == 0)
  {
    if (a4)
    {
      v8 = a2;
      v9 = 0;
      v10 = a3 - 1;
      if (a4 == a5)
      {
LABEL_8:
        v7 = v9;
      }
      else
      {
        while (1)
        {
          v11 = a4 + 4;
          v12 = a4[1];
          v13 = a4[2];
          v14 = a4[3];
          *v8 = *a4;
          v8[1] = v12;
          v8[2] = v13;
          v8[3] = v14;
          if (v10 == v9)
            break;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          ++v9;
          v8 += 4;
          a4 = v11;
          if (v11 == a5)
            goto LABEL_8;
        }
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        a4 = v11;
      }
      goto LABEL_10;
    }
    goto LABEL_9;
  }
  __break(1u);
  return result;
}

uint64_t specialized Sequence._copyContents(initializing:)(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t i;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  char v27;

  v6 = *(_QWORD *)(a4 + 16);
  if (!a2)
  {
    v11 = *(_QWORD *)(a4 + 16);
    v6 = 0;
    goto LABEL_13;
  }
  if (!a3)
  {
    v11 = *(_QWORD *)(a4 + 16);
    v6 = 0;
    goto LABEL_13;
  }
  if (a3 < 0)
  {
    __break(1u);
    goto LABEL_15;
  }
  if (!v6)
  {
LABEL_15:
    v11 = 0;
    goto LABEL_13;
  }
  v8 = a2;
  v9 = a4 + 120 * v6 - 88;
  for (i = -1; ; --i)
  {
    v11 = v6 + i;
    v12 = *(void **)v9;
    v13 = *(_QWORD *)(v9 + 8);
    v14 = *(void **)(v9 + 16);
    v15 = *(_QWORD *)(v9 + 24);
    v16 = *(_QWORD *)(v9 + 32);
    v17 = *(_QWORD *)(v9 + 40);
    v18 = *(_QWORD *)(v9 + 48);
    v19 = *(_QWORD *)(v9 + 56);
    v20 = *(_QWORD *)(v9 + 64);
    v21 = *(_QWORD *)(v9 + 72);
    v22 = *(_QWORD *)(v9 + 80);
    v23 = *(_QWORD *)(v9 + 88);
    v24 = *(_QWORD *)(v9 + 96);
    v25 = *(_QWORD *)(v9 + 104);
    v26 = *(_DWORD *)(v9 + 112);
    v27 = *(_BYTE *)(v9 + 116);
    *(_QWORD *)v8 = *(_QWORD *)v9;
    *(_QWORD *)(v8 + 8) = v13;
    *(_QWORD *)(v8 + 16) = v14;
    *(_QWORD *)(v8 + 24) = v15;
    *(_QWORD *)(v8 + 32) = v16;
    *(_QWORD *)(v8 + 40) = v17;
    *(_QWORD *)(v8 + 48) = v18;
    *(_QWORD *)(v8 + 56) = v19;
    *(_QWORD *)(v8 + 64) = v20;
    *(_QWORD *)(v8 + 72) = v21;
    *(_QWORD *)(v8 + 80) = v22;
    *(_QWORD *)(v8 + 88) = v23;
    *(_QWORD *)(v8 + 96) = v24;
    *(_QWORD *)(v8 + 104) = v25;
    *(_DWORD *)(v8 + 112) = v26;
    *(_BYTE *)(v8 + 116) = v27;
    if (!(a3 + i))
      break;
    if (!v11)
      goto LABEL_10;
    v9 -= 120;
    v8 += 120;
    outlined copy of GraphicsFilter(v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, SBYTE2(v26));
  }
  v6 = a3;
LABEL_10:
  outlined copy of GraphicsFilter(v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, SBYTE2(v26));
LABEL_13:
  *a1 = a4;
  a1[1] = v11;
  return v6;
}

void *specialized ArrayWith2Inline.init<A>(_:)@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  unint64_t v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  _OWORD __src[19];

  v3 = *(_QWORD *)(a1 + 16);
  if (v3 < 3)
  {
    if (v3)
    {
      v4 = *(_OWORD *)(a1 + 144);
      v28 = *(_OWORD *)(a1 + 128);
      v29 = v4;
      v30 = *(_OWORD *)(a1 + 160);
      v5 = *(_OWORD *)(a1 + 80);
      v24 = *(_OWORD *)(a1 + 64);
      v25 = v5;
      v6 = *(_OWORD *)(a1 + 112);
      v26 = *(_OWORD *)(a1 + 96);
      v27 = v6;
      v7 = *(_OWORD *)(a1 + 48);
      v22 = *(_OWORD *)(a1 + 32);
      v23 = v7;
      if (v3 != 1)
      {
        v9 = *(_OWORD *)(a1 + 288);
        v19 = *(_OWORD *)(a1 + 272);
        v20 = v9;
        v21 = *(_OWORD *)(a1 + 304);
        v10 = *(_OWORD *)(a1 + 224);
        v15 = *(_OWORD *)(a1 + 208);
        v16 = v10;
        v11 = *(_OWORD *)(a1 + 256);
        v17 = *(_OWORD *)(a1 + 240);
        v18 = v11;
        v12 = *(_OWORD *)(a1 + 192);
        v13 = *(_OWORD *)(a1 + 176);
        v14 = v12;
        outlined retain of GestureDebug.Data((uint64_t)&v22);
        outlined retain of GestureDebug.Data((uint64_t)&v13);
        swift_bridgeObjectRelease();
        __src[6] = v28;
        __src[7] = v29;
        __src[2] = v24;
        __src[3] = v25;
        __src[4] = v26;
        __src[5] = v27;
        __src[0] = v22;
        __src[1] = v23;
        __src[14] = v18;
        __src[15] = v19;
        __src[16] = v20;
        __src[17] = v21;
        __src[10] = v14;
        __src[11] = v15;
        __src[12] = v16;
        __src[13] = v17;
        __src[8] = v30;
        __src[9] = v13;
        _s7SwiftUI16ArrayWith2InlineV7StorageOyAA12GestureDebugO4DataV_GWOi0_((uint64_t)__src);
        return memcpy(a2, __src, 0x121uLL);
      }
      outlined retain of GestureDebug.Data((uint64_t)&v22);
      swift_bridgeObjectRelease();
      v19 = v28;
      v20 = v29;
      v21 = v30;
      v15 = v24;
      v16 = v25;
      v17 = v26;
      v18 = v27;
      v13 = v22;
      v14 = v23;
      _s7SwiftUI16ArrayWith2InlineV7StorageOyAA12GestureDebugO4DataV_GWOi_((uint64_t)&v13);
    }
    else
    {
      swift_bridgeObjectRelease();
      _s7SwiftUI16ArrayWith2InlineV7StorageOyAA12GestureDebugO4DataV_GWOi2_((uint64_t)&v13);
    }
  }
  else
  {
    *(_QWORD *)&v13 = a1;
    _s7SwiftUI16ArrayWith2InlineV7StorageOyAA12GestureDebugO4DataV_GWOi1_((uint64_t)&v13);
  }
  outlined init with take of Image.ResizingInfo?((uint64_t)&v13, (uint64_t)__src, &lazy cache variable for type metadata for ArrayWith2Inline<GestureDebug.Data>.Storage, (uint64_t)&type metadata for GestureDebug.Data, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for ArrayWith2Inline.Storage);
  return memcpy(a2, __src, 0x121uLL);
}

uint64_t *specialized ArrayWith2Inline.init<A>(_:)@<X0>(uint64_t *result@<X0>, int64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;

  v4 = result;
  if (a2 <= 2)
  {
    if (!result || !a2)
    {
      v6 = 0;
      v7 = 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      v12 = 0;
      v13 = 0;
      v14 = 3;
      goto LABEL_11;
    }
    v13 = *result;
    v12 = result[1];
    v10 = result[3];
    if (a2 == 1)
    {
      v15 = result[2];
      swift_bridgeObjectRetain();
      result = (uint64_t *)swift_bridgeObjectRetain();
      v11 = v15;
      v14 = 0;
      v6 = 0;
      v7 = 0;
      v8 = 0;
      v9 = 0;
      goto LABEL_11;
    }
    v23 = result[2];
    v9 = result[4];
    v8 = result[5];
    v7 = result[6];
    v6 = result[7];
    if (a2 == 2)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      result = (uint64_t *)swift_bridgeObjectRetain();
      v14 = 1;
      v11 = v23;
      goto LABEL_11;
    }
    v21 = result + 12;
    v22 = &result[4 * a2];
    v16 = result[9];
    v17 = result[11];
    v19 = result[10];
    v20 = result[8];
    type metadata accessor for [(_:)](0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<(String, String)>, (uint64_t (*)(uint64_t))type metadata accessor for (String, String), (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
    v18 = swift_allocObject();
    *(_OWORD *)(v18 + 16) = xmmword_235283260;
    *(_QWORD *)(v18 + 32) = v13;
    *(_QWORD *)(v18 + 40) = v12;
    *(_QWORD *)(v18 + 48) = v23;
    *(_QWORD *)(v18 + 56) = v10;
    *(_QWORD *)(v18 + 64) = v9;
    *(_QWORD *)(v18 + 72) = v8;
    *(_QWORD *)(v18 + 80) = v7;
    *(_QWORD *)(v18 + 88) = v6;
    *(_QWORD *)(v18 + 96) = v20;
    *(_QWORD *)(v18 + 104) = v16;
    *(_QWORD *)(v18 + 112) = v19;
    *(_QWORD *)(v18 + 120) = v17;
    v24 = v18;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    result = (uint64_t *)specialized ContiguousArray.append<A>(contentsOf:)(v21, v22);
  }
  else
  {
    v24 = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, a2, 0);
    result = specialized ContiguousArray.append<A>(contentsOf:)(v4, a2);
  }
  v6 = 0;
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = 0;
  v12 = 0;
  v13 = v24;
  v14 = 2;
LABEL_11:
  *(_QWORD *)a3 = v13;
  *(_QWORD *)(a3 + 8) = v12;
  *(_QWORD *)(a3 + 16) = v11;
  *(_QWORD *)(a3 + 24) = v10;
  *(_QWORD *)(a3 + 32) = v9;
  *(_QWORD *)(a3 + 40) = v8;
  *(_QWORD *)(a3 + 48) = v7;
  *(_QWORD *)(a3 + 56) = v6;
  *(_BYTE *)(a3 + 64) = v14;
  return result;
}

uint64_t *specialized ContiguousArray.append<A>(contentsOf:)(uint64_t *result, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  int64_t v4;
  int64_t v5;
  unint64_t v7;
  int isUniquelyReferenced_nonNull_native;
  int64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t *v40;

  v3 = *v2;
  v4 = *(_QWORD *)(*v2 + 16);
  v5 = v4 + a2;
  if (__OFADD__(v4, a2))
  {
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  v7 = (unint64_t)result;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *v2 = v3;
  if (!isUniquelyReferenced_nonNull_native || (v9 = *(_QWORD *)(v3 + 24) >> 1, v9 < v5))
  {
    if (v4 <= v5)
      v10 = v5;
    else
      v10 = v4;
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v10, 1);
    v3 = *v2;
    v9 = *(_QWORD *)(*v2 + 24) >> 1;
  }
  v11 = *(_QWORD *)(v3 + 16);
  v12 = v9 - v11;
  result = (uint64_t *)specialized UnsafeBufferPointer._copyContents(initializing:)(v3 + 32 * v11 + 32, v9 - v11, v7, a2);
  if (v14 < a2)
    goto LABEL_34;
  v15 = v13;
  if (v14 < 1)
    goto LABEL_12;
  v16 = *(_QWORD *)(v3 + 16);
  v17 = __OFADD__(v16, v14);
  v18 = v16 + v14;
  if (v17)
  {
LABEL_35:
    __break(1u);
    return result;
  }
  *(_QWORD *)(v3 + 16) = v18;
LABEL_12:
  if (v14 == v12 && result && result != v13)
  {
    v20 = *(_QWORD *)(v3 + 16);
    v38 = result + 4;
    v21 = *result;
    v22 = result[1];
    v23 = result[2];
    v24 = result[3];
    swift_bridgeObjectRetain();
    result = (uint64_t *)swift_bridgeObjectRetain();
    v25 = v20;
    v37 = v2;
    v40 = v15;
    while (1)
    {
      while (1)
      {
        v27 = *(_QWORD *)(v3 + 24);
        v28 = v25 + 1;
        if (v25 + 1 > (uint64_t)(v27 >> 1))
        {
          v36 = v25;
          result = (uint64_t *)specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v27 > 1, v25 + 1, 1);
          v25 = v36;
        }
        v3 = *v2;
        v29 = *(_QWORD *)(*v2 + 24) >> 1;
        if (v25 < v29)
          break;
        v26 = v25;
        swift_retain();
        outlined copy of (String, String)?(v21, v22);
        swift_release();
        swift_bridgeObjectRelease();
        result = (uint64_t *)swift_bridgeObjectRelease();
        v25 = v26;
        *(_QWORD *)(v3 + 16) = v26;
      }
      v30 = (_QWORD *)(v3 + 32 * v25);
      v30[4] = v21;
      v30[5] = v22;
      v30[6] = v23;
      v30[7] = v24;
      if (v38 == v15)
        break;
      v39 = v3;
      v31 = v38 + 4;
      v21 = *v38;
      v32 = v38[1];
      v23 = v38[2];
      v33 = v38[3];
      if (v28 < v29)
      {
        v34 = (uint64_t *)(v39 + 32 * v25 + 88);
        while (1)
        {
          *(v34 - 3) = v21;
          *(v34 - 2) = v32;
          *(v34 - 1) = v23;
          *v34 = v33;
          ++v28;
          if (v31 == v40)
            break;
          v35 = v31 + 4;
          v21 = *v31;
          v22 = v31[1];
          v23 = v31[2];
          v24 = v31[3];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          v34 += 4;
          v33 = v24;
          v32 = v22;
          v31 += 4;
          if (v29 == v28)
          {
            v31 = v35;
            v15 = v40;
            goto LABEL_29;
          }
        }
        swift_bridgeObjectRetain();
        result = (uint64_t *)swift_bridgeObjectRetain();
        v2 = v37;
        v3 = v39;
        break;
      }
      v29 = v28;
      v22 = v38[1];
      v24 = v38[3];
LABEL_29:
      swift_bridgeObjectRetain();
      result = (uint64_t *)swift_bridgeObjectRetain();
      v3 = v39;
      *(_QWORD *)(v39 + 16) = v29;
      v25 = v29;
      v38 = v31;
      v2 = v37;
    }
    *(_QWORD *)(v3 + 16) = v28;
  }
  *v2 = v3;
  return result;
}

uint64_t specialized ContiguousArray.append<A>(contentsOf:)(_QWORD *a1, _QWORD *a2)
{
  uint64_t *v2;
  uint64_t v5;
  int64_t v6;
  int isUniquelyReferenced_nonNull_native;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t *v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t *v34;
  uint64_t *v35;

  v5 = *v2;
  v6 = *(_QWORD *)(*v2 + 16);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *v2 = v5;
  if (!isUniquelyReferenced_nonNull_native || (v8 = *(_QWORD *)(v5 + 24) >> 1, v8 < v6))
  {
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v6, 1);
    v5 = *v2;
    v8 = *(_QWORD *)(*v2 + 24) >> 1;
  }
  v9 = *(_QWORD *)(v5 + 16);
  v10 = v8 - v9;
  result = (uint64_t)specialized Sequence._copyContents(initializing:)(&v34, (_QWORD *)(v5 + 32 * v9 + 32), v8 - v9, a1, a2);
  if (result < 0)
  {
    __break(1u);
    goto LABEL_28;
  }
  if (!result)
    goto LABEL_8;
  v12 = *(_QWORD *)(v5 + 16);
  v13 = __OFADD__(v12, result);
  v14 = v12 + result;
  if (v13)
  {
LABEL_28:
    __break(1u);
    return result;
  }
  *(_QWORD *)(v5 + 16) = v14;
LABEL_8:
  if (result == v10)
  {
    if (v34)
    {
      v33 = v35;
      if (v34 != v35)
      {
        v15 = *(_QWORD *)(v5 + 16);
        v16 = v34 + 4;
        v17 = *v34;
        v18 = v34[1];
        v19 = v34[2];
        v20 = v34[3];
        swift_bridgeObjectRetain();
        result = swift_bridgeObjectRetain();
        v31 = v2;
        while (1)
        {
          while (1)
          {
            v21 = *(_QWORD *)(v5 + 24);
            v22 = v15 + 1;
            if (v15 + 1 > (uint64_t)(v21 >> 1))
              result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v21 > 1, v15 + 1, 1);
            v5 = *v2;
            v23 = *(_QWORD *)(*v2 + 24) >> 1;
            if (v15 < v23)
              break;
            swift_retain();
            outlined copy of (String, String)?(v17, v18);
            swift_release();
            swift_bridgeObjectRelease();
            result = swift_bridgeObjectRelease();
            *(_QWORD *)(v5 + 16) = v15;
          }
          v24 = (_QWORD *)(v5 + 32 * v15);
          v24[4] = v17;
          v24[5] = v18;
          v24[6] = v19;
          v24[7] = v20;
          if (v16 == v33)
            break;
          v25 = v15;
          v26 = v16;
          v16 += 4;
          v17 = *v26;
          v27 = v26[1];
          v19 = v26[2];
          v28 = v26[3];
          if (v22 < v23)
          {
            v32 = v5;
            v29 = (uint64_t *)(v5 + 32 * v25 + 88);
            while (1)
            {
              *(v29 - 3) = v17;
              *(v29 - 2) = v27;
              *(v29 - 1) = v19;
              *v29 = v28;
              ++v22;
              if (v16 == v33)
                break;
              v30 = v16 + 4;
              v17 = *v16;
              v18 = v16[1];
              v19 = v16[2];
              v20 = v16[3];
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              v29 += 4;
              v28 = v20;
              v27 = v18;
              v16 += 4;
              if (v23 == v22)
              {
                v16 = v30;
                v2 = v31;
                v5 = v32;
                goto LABEL_23;
              }
            }
            swift_bridgeObjectRetain();
            result = swift_bridgeObjectRetain();
            v2 = v31;
            v5 = v32;
            break;
          }
          v23 = v22;
          v18 = v26[1];
          v20 = v26[3];
LABEL_23:
          swift_bridgeObjectRetain();
          result = swift_bridgeObjectRetain();
          *(_QWORD *)(v5 + 16) = v23;
          v15 = v23;
        }
        *(_QWORD *)(v5 + 16) = v22;
      }
    }
  }
  *v2 = v5;
  return result;
}

uint64_t specialized static LayoutGesture._makeGesture(gesture:inputs:)@<X0>(unsigned int a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  __int128 v5;
  __int128 v6;
  __int128 v7;
  id v8;
  unsigned int v9;
  unsigned int v10;
  int v11;
  unsigned int v12;
  id v13;
  id v14;
  int v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t result;
  unint64_t v23;
  int v24;
  unsigned int IndirectAttribute2;
  ValueMetadata *v27;
  int v28;
  unsigned int v29;
  unint64_t v30;
  int v31;
  int v32;
  uint64_t v33;
  int v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  _OWORD v41[2];
  uint64_t v42;

  v42 = *MEMORY[0x24BDAC8D0];
  v5 = *(_OWORD *)(a2 + 80);
  v39 = *(_OWORD *)(a2 + 64);
  v40 = v5;
  v41[0] = *(_OWORD *)(a2 + 96);
  *(_OWORD *)((char *)v41 + 12) = *(_OWORD *)(a2 + 108);
  v6 = *(_OWORD *)(a2 + 16);
  v35 = *(_OWORD *)a2;
  v36 = v6;
  v7 = *(_OWORD *)(a2 + 48);
  v37 = *(_OWORD *)(a2 + 32);
  v38 = v7;
  type metadata accessor for LayoutGestureBox();
  swift_allocObject();
  outlined retain of _GestureInputs(a2);
  v8 = LayoutGestureBox.init(inputs:)(&v35);
  v9 = *(_DWORD *)(a2 + 112);
  *(_QWORD *)&v35 = __PAIR64__(*(_DWORD *)(a2 + 108), a1);
  DWORD2(v35) = v9;
  *(_QWORD *)&v36 = v8;
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for UpdateLayoutGestureBox<DefaultLayoutGesture>, (uint64_t)&type metadata for DefaultLayoutGesture, (uint64_t)&protocol witness table for DefaultLayoutGesture, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for UpdateLayoutGestureBox);
  lazy protocol witness table accessor for type LayoutDebug<DefaultLayoutGesture> and conformance LayoutDebug<A>(&lazy protocol witness table cache variable for type UpdateLayoutGestureBox<DefaultLayoutGesture> and conformance UpdateLayoutGestureBox<A>, &lazy cache variable for type metadata for UpdateLayoutGestureBox<DefaultLayoutGesture>, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for UpdateLayoutGestureBox, (uint64_t)&protocol conformance descriptor for UpdateLayoutGestureBox<A>);
  v10 = Attribute.init<A>(body:value:flags:update:)();
  *(_QWORD *)&v35 = __PAIR64__(v10, a1);
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for GesturePhase<()>, MEMORY[0x24BEE4AE0] + 8, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for GesturePhase);
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for LayoutPhase<DefaultLayoutGesture>, (uint64_t)&type metadata for DefaultLayoutGesture, (uint64_t)&protocol witness table for DefaultLayoutGesture, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for LayoutPhase);
  lazy protocol witness table accessor for type LayoutDebug<DefaultLayoutGesture> and conformance LayoutDebug<A>(&lazy protocol witness table cache variable for type LayoutPhase<DefaultLayoutGesture> and conformance LayoutPhase<A>, &lazy cache variable for type metadata for LayoutPhase<DefaultLayoutGesture>, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for LayoutPhase, (uint64_t)&protocol conformance descriptor for LayoutPhase<A>);
  v11 = Attribute.init<A>(body:value:flags:update:)();
  if ((*(_BYTE *)(a2 + 120) & 8) != 0)
  {
    outlined retain of _GestureInputs(a2);
    specialized _GestureInputs.intern<A>(_:id:)(0);
    AGGraphClearUpdate();
    v13 = (id)AGSubgraphGetCurrent();
    AGSubgraphSetCurrent();
    IndirectAttribute2 = AGGraphCreateIndirectAttribute2();
    AGGraphSetIndirectAttribute();
    AGSubgraphSetCurrent();

    AGGraphSetUpdate();
    specialized _GestureInputs.intern<A>(_:id:)(0);
    AGGraphClearUpdate();
    v14 = (id)AGSubgraphGetCurrent();
    AGSubgraphSetCurrent();
    v15 = AGGraphCreateIndirectAttribute2();
    AGGraphSetIndirectAttribute();
    AGSubgraphSetCurrent();

    AGGraphSetUpdate();
    *(_QWORD *)&v37 = 0;
    v35 = 0u;
    v36 = 0u;
    specialized _GestureInputs.intern<A>(_:id:)((uint64_t)&v35, 0);
    AGGraphClearUpdate();
    v16 = (id)AGSubgraphGetCurrent();
    AGSubgraphSetCurrent();
    LODWORD(v14) = AGGraphCreateIndirectAttribute2();
    AGGraphSetIndirectAttribute();
    AGSubgraphSetCurrent();

    AGGraphSetUpdate();
    outlined release of _GestureInputs(a2);
    v27 = &type metadata for DefaultLayoutGesture;
    v28 = v11;
    v29 = v10;
    v30 = __PAIR64__(IndirectAttribute2, v9);
    v31 = v15;
    v32 = (int)v14;
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for LayoutDebug<DefaultLayoutGesture>, (uint64_t)&type metadata for DefaultLayoutGesture, (uint64_t)&protocol witness table for DefaultLayoutGesture, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for LayoutDebug);
    lazy protocol witness table accessor for type LayoutDebug<DefaultLayoutGesture> and conformance LayoutDebug<A>(&lazy protocol witness table cache variable for type LayoutDebug<DefaultLayoutGesture> and conformance LayoutDebug<A>, &lazy cache variable for type metadata for LayoutDebug<DefaultLayoutGesture>, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for LayoutDebug, (uint64_t)&protocol conformance descriptor for LayoutDebug<A>);
    v12 = Attribute.init<A>(body:value:flags:update:)();
  }
  else
  {
    v12 = *MEMORY[0x24BE096C0];
  }
  v27 = (ValueMetadata *)__PAIR64__(v10, a1);
  v28 = v11;
  v29 = v12;
  v30 = MEMORY[0x24BEE4AF8];
  v31 = 0;
  v17 = *(_QWORD *)(a2 + 96);
  v33 = v17;
  v34 = *(_DWORD *)(a2 + 104);
  v18 = *(_QWORD *)(v17 + 16);
  if (v18)
  {
    outlined retain of LinearGradient((uint64_t)&v33);
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for CombinePreferenceVisitor<DefaultLayoutGesture>, (uint64_t)&type metadata for DefaultLayoutGesture, (uint64_t)&protocol witness table for DefaultLayoutGesture, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for CombinePreferenceVisitor);
    v20 = v19;
    v21 = v17 + 40;
    do
    {
      (*(void (**)(ValueMetadata **, uint64_t, _UNKNOWN **))(*(_QWORD *)v21 + 16))(&v27, v20, &protocol witness table for CombinePreferenceVisitor<A>);
      v21 += 16;
      --v18;
    }
    while (v18);
    outlined release of LinearGradient((uint64_t)&v33);
    result = swift_release();
    v11 = v28;
    v12 = v29;
    v23 = v30;
    v24 = v31;
  }
  else
  {
    result = swift_release();
    v24 = 0;
    v23 = MEMORY[0x24BEE4AF8];
  }
  *(_DWORD *)a3 = v11;
  *(_DWORD *)(a3 + 4) = v12;
  *(_QWORD *)(a3 + 8) = v23;
  *(_DWORD *)(a3 + 16) = v24;
  return result;
}

uint64_t static LayoutGesture._makeGesture(gesture:inputs:)@<X0>(unsigned int *a1@<X0>, _OWORD *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  unsigned int v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  id v32;
  unsigned int IndirectAttribute2;
  id v34;
  int v35;
  id v36;
  int v37;
  uint64_t v38;
  unsigned int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t result;
  unint64_t v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t v60;
  unsigned int v61;
  unsigned int v62;
  unsigned int v63;
  id v64;
  int v65;
  unint64_t v66;
  int v67;
  unsigned int v68;
  unint64_t v69;
  int v70;
  int v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t updated;
  uint64_t v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  _OWORD v84[2];
  _OWORD v85[2];
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  _BYTE v90[28];
  uint64_t v91;

  v91 = *MEMORY[0x24BDAC8D0];
  v8 = a2[5];
  v9 = a2[3];
  v88 = a2[4];
  v89 = v8;
  v10 = a2[5];
  *(_OWORD *)v90 = a2[6];
  *(_OWORD *)&v90[12] = *(_OWORD *)((char *)a2 + 108);
  v11 = a2[1];
  v85[0] = *a2;
  v85[1] = v11;
  v12 = a2[3];
  v14 = *a2;
  v13 = a2[1];
  v86 = a2[2];
  v87 = v12;
  v82 = v88;
  v83 = v10;
  v84[0] = a2[6];
  *(_OWORD *)((char *)v84 + 12) = *(_OWORD *)((char *)a2 + 108);
  v78 = v14;
  v79 = v13;
  v15 = *a1;
  v80 = v86;
  v81 = v9;
  type metadata accessor for LayoutGestureBox();
  swift_allocObject();
  outlined retain of _GestureInputs((uint64_t)v85);
  v16 = LayoutGestureBox.init(inputs:)(&v78);
  LODWORD(v78) = v15;
  *(_QWORD *)((char *)&v78 + 4) = *(_QWORD *)&v90[12];
  v61 = *(_DWORD *)&v90[16];
  *(_QWORD *)&v79 = v16;
  updated = type metadata accessor for UpdateLayoutGestureBox(0, a3, a4, v17);
  v77 = MEMORY[0x23B7C9C04](&protocol conformance descriptor for UpdateLayoutGestureBox<A>, updated);
  type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for Attribute<LayoutGestureBox.Value>, (uint64_t)&type metadata for LayoutGestureBox.Value, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BE095F0]);
  v19 = v18;
  v64 = v16;
  swift_retain();
  v20 = MEMORY[0x24BEE4078];
  v21 = MEMORY[0x24BEE40A8];
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v78, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TA_14, (uint64_t)&v75, updated, MEMORY[0x24BEE4078], v19, MEMORY[0x24BEE40A8], v22);
  swift_release();
  v62 = v66;
  v63 = v15;
  *(_QWORD *)&v78 = __PAIR64__(v66, v15);
  v73 = type metadata accessor for LayoutPhase(0, a3, a4, v23);
  v74 = MEMORY[0x23B7C9C04](&protocol conformance descriptor for LayoutPhase<A>, v73);
  type metadata accessor for Attribute<GesturePhase<()>>();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v78, (uint64_t)closure #1 in Attribute.init<A>(_:)partial apply, (uint64_t)&v72, v73, v20, v24, v21, v25);
  v27 = v66;
  if ((v90[24] & 8) != 0)
  {
    outlined retain of _GestureInputs((uint64_t)v85);
    specialized _GestureInputs.intern<A>(_:id:)(0);
    AGGraphClearUpdate();
    v60 = a5;
    v32 = (id)AGSubgraphGetCurrent();
    AGSubgraphSetCurrent();
    IndirectAttribute2 = AGGraphCreateIndirectAttribute2();
    v59 = 0;
    AGGraphSetIndirectAttribute();
    AGSubgraphSetCurrent();

    AGGraphSetUpdate();
    specialized _GestureInputs.intern<A>(_:id:)(0);
    AGGraphClearUpdate();
    v56 = a3;
    v57 = a4;
    v34 = (id)AGSubgraphGetCurrent();
    AGSubgraphSetCurrent();
    v35 = AGGraphCreateIndirectAttribute2();
    AGGraphSetIndirectAttribute();
    AGSubgraphSetCurrent();

    AGGraphSetUpdate();
    *(_QWORD *)&v80 = 0;
    v78 = 0u;
    v79 = 0u;
    specialized _GestureInputs.intern<A>(_:id:)((uint64_t)&v78, 0);
    AGGraphClearUpdate();
    v36 = (id)AGSubgraphGetCurrent();
    AGSubgraphSetCurrent();
    v37 = AGGraphCreateIndirectAttribute2();
    AGGraphSetIndirectAttribute();
    AGSubgraphSetCurrent();

    AGGraphSetUpdate();
    v38 = outlined release of _GestureInputs((uint64_t)v85);
    v58 = &v56;
    v66 = a3;
    v39 = v62;
    v67 = v27;
    v68 = v62;
    v69 = __PAIR64__(IndirectAttribute2, v61);
    v70 = v35;
    v71 = v37;
    a5 = v60;
    MEMORY[0x24BDAC7A8](v38);
    v41 = v40;
    v42 = v57;
    v54 = type metadata accessor for LayoutDebug(0, v40, v57, v43);
    v55 = MEMORY[0x23B7C9C04](&protocol conformance descriptor for LayoutDebug<A>, v54);
    type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for Attribute<GestureDebug.Data>, (uint64_t)&type metadata for GestureDebug.Data, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BE095F0]);
    _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v66, (uint64_t)closure #1 in Attribute.init<A>(_:)partial apply, (uint64_t)&v53, v54, MEMORY[0x24BEE4078], v44, MEMORY[0x24BEE40A8], v45);
    v28 = v65;
    v29 = v42;
    v30 = v41;
    v31 = v39;
  }
  else
  {
    v28 = *MEMORY[0x24BE096C0];
    v29 = a4;
    v30 = a3;
    v31 = v62;
  }
  v66 = __PAIR64__(v31, v63);
  v67 = v27;
  v68 = v28;
  v69 = MEMORY[0x24BEE4AF8];
  v70 = 0;
  v46 = *(_QWORD *)v90;
  v47 = *(_QWORD *)(*(_QWORD *)v90 + 16);
  if (v47)
  {
    v48 = type metadata accessor for CombinePreferenceVisitor(0, v30, v29, v26);
    swift_bridgeObjectRetain();
    v49 = v46 + 40;
    do
    {
      (*(void (**)(unint64_t *, uint64_t, _UNKNOWN **))(*(_QWORD *)v49 + 16))(&v66, v48, &protocol witness table for CombinePreferenceVisitor<A>);
      v49 += 16;
      --v47;
    }
    while (v47);
    swift_release();
    result = swift_bridgeObjectRelease();
    v27 = v67;
    v28 = v68;
    v51 = v69;
    v52 = v70;
  }
  else
  {
    result = swift_release();
    v52 = 0;
    v51 = MEMORY[0x24BEE4AF8];
  }
  *(_DWORD *)a5 = v27;
  *(_DWORD *)(a5 + 4) = v28;
  *(_QWORD *)(a5 + 8) = v51;
  *(_DWORD *)(a5 + 16) = v52;
  return result;
}

uint64_t LayoutGestureBox.Child.binds(_:)(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(uint64_t);
  uint64_t v6;
  uint64_t v7;

  v2 = *a1;
  v3 = *v1;
  swift_retain_n();
  if (v3 == v2)
  {
    swift_release_n();
    return 1;
  }
  else
  {
    v4 = v2;
    while (1)
    {
      v5 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 88);
      v6 = swift_retain();
      v7 = v5(v6);
      swift_retain();
      swift_release_n();
      if (!v7)
        break;
      swift_release();
      v4 = v7;
      if (v3 == v7)
      {
        swift_release();
        swift_release();
        return 1;
      }
    }
    swift_release();
    return 0;
  }
}

uint64_t specialized Collection<>.merged()@<X0>(uint64_t result@<X0>, _BYTE *a2@<X8>)
{
  if (*(_QWORD *)(result + 16))
    return ((uint64_t (*)(_QWORD, uint64_t))((char *)&loc_2350B027C
                                                    + dword_2350B03BC[*(unsigned __int8 *)(result + 33)]))(*(_QWORD *)(result + 16), 1);
  *a2 = 0;
  a2[1] = 3;
  return result;
}

uint64_t LayoutGesture.preferenceValue<A>(key:box:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  double v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t, double);
  uint64_t v15;
  uint64_t result;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _OWORD *v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t Value;
  uint64_t v35;
  void (*v36)(uint64_t, uint64_t);
  uint64_t v37;
  double v38;
  int v39;
  _BYTE v40[4];
  int v41;
  uint64_t AssociatedTypeWitness;
  uint64_t v43;
  uint64_t v44;
  _BYTE *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  _OWORD v51[2];
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  _OWORD v61[2];

  v43 = a3;
  v44 = a5;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v46 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v12 = MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v45 = &v40[-v13];
  v14 = *(void (**)(uint64_t, uint64_t, double))(a6 + 16);
  v47 = a7;
  v14(a4, a6, v12);
  v15 = a2 + 160;
  result = swift_beginAccess();
  v17 = *(_QWORD *)(*(_QWORD *)(a2 + 160) + 16);
  if (!v17)
    return result;
  v18 = 0;
  v19 = v17 - 1;
  v41 = 1;
  v48 = 32;
  while (2)
  {
    v20 = v48 + 208 * v18;
    while (1)
    {
      if (v18 >= *(_QWORD *)(*(_QWORD *)v15 + 16))
      {
        __break(1u);
        return result;
      }
      v21 = (_OWORD *)(*(_QWORD *)v15 + v20);
      v51[0] = *v21;
      v22 = v21[1];
      v23 = v21[2];
      v24 = v21[4];
      v53 = v21[3];
      v54 = v24;
      v51[1] = v22;
      v52 = v23;
      v25 = v21[5];
      v26 = v21[6];
      v27 = v21[8];
      v57 = v21[7];
      v58 = v27;
      v55 = v25;
      v56 = v26;
      v28 = v21[9];
      v29 = v21[10];
      v30 = v21[11];
      *(_OWORD *)((char *)v61 + 12) = *(_OWORD *)((char *)v21 + 188);
      v60 = v29;
      v61[0] = v30;
      v59 = v28;
      if (*(_QWORD *)(*((_QWORD *)&v52 + 1) + 16))
      {
        if (*(_QWORD *)&v61[1])
          break;
      }
LABEL_9:
      if (v19 == v18)
        return result;
      ++v18;
      v20 += 208;
      if (v18 >= v17)
        goto LABEL_17;
    }
    v49 = *(_QWORD *)&v61[1];
    v50 = DWORD2(v61[1]);
    outlined retain of LayoutGestureBox.Child((uint64_t)v51);
    v32 = PreferencesOutputs.subscript.getter(a1, a4, a6, v31);
    if ((v32 & 0x100000000) != 0)
    {
      result = outlined release of LayoutGestureBox.Child((uint64_t)v51);
      goto LABEL_9;
    }
    if ((v41 & 1) != 0)
    {
      v33 = AssociatedTypeWitness;
      Value = AGGraphGetValue();
      v35 = v46;
      (*(void (**)(_BYTE *, uint64_t, uint64_t))(v46 + 16))(v45, Value, v33);
      outlined release of LayoutGestureBox.Child((uint64_t)v51);
      v36 = *(void (**)(uint64_t, uint64_t))(v35 + 8);
      v37 = v47;
      v36(v47, v33);
      result = (*(uint64_t (**)(uint64_t, _BYTE *, uint64_t))(v46 + 32))(v37, v45, v33);
    }
    else
    {
      v38 = MEMORY[0x24BDAC7A8](v32);
      *(_QWORD *)&v40[-48] = v43;
      *(_QWORD *)&v40[-40] = a4;
      *(_QWORD *)&v40[-32] = v44;
      *(_QWORD *)&v40[-24] = a6;
      *(_DWORD *)&v40[-16] = v39;
      (*(void (**)(uint64_t, uint64_t (*)@<X0>(uint64_t@<X8>), double))(a6 + 24))(v47, partial apply for closure #1 in LayoutGesture.preferenceValue<A>(key:box:), v38);
      result = outlined release of LayoutGestureBox.Child((uint64_t)v51);
    }
    if (v19 != v18)
    {
      v41 = 0;
      if (++v18 < v17)
        continue;
LABEL_17:
      __break(1u);
    }
    return result;
  }
}

uint64_t DefaultLayoutGesture.responder.getter()
{
  return swift_retain();
}

uint64_t DefaultLayoutGesture.responder.setter(uint64_t a1)
{
  _QWORD *v1;
  uint64_t result;

  result = swift_release();
  *v1 = a1;
  return result;
}

uint64_t (*DefaultLayoutGesture.responder.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t protocol witness for static Gesture._makeGesture(gesture:inputs:) in conformance DefaultLayoutGesture@<X0>(unsigned int *a1@<X0>, _OWORD *a2@<X1>, uint64_t a3@<X8>)
{
  unsigned int v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  _OWORD v8[6];
  _OWORD v9[2];

  v3 = *a1;
  v4 = a2[5];
  v8[4] = a2[4];
  v8[5] = v4;
  v9[0] = a2[6];
  *(_OWORD *)((char *)v9 + 12) = *(_OWORD *)((char *)a2 + 108);
  v5 = a2[1];
  v8[0] = *a2;
  v8[1] = v5;
  v6 = a2[3];
  v8[2] = a2[2];
  v8[3] = v6;
  return specialized static LayoutGesture._makeGesture(gesture:inputs:)(v3, (uint64_t)v8, a3);
}

id LayoutGestureBox.init(inputs:)(_OWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t ObjectType;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  id result;
  _QWORD v17[2];

  v2 = v1;
  swift_weakInit();
  *(_QWORD *)(v2 + 160) = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v2 + 168) = 0;
  *(_DWORD *)(v2 + 176) = 0;
  v4 = a1[5];
  *(_OWORD *)(v2 + 80) = a1[4];
  *(_OWORD *)(v2 + 96) = v4;
  *(_OWORD *)(v2 + 112) = a1[6];
  *(_OWORD *)(v2 + 124) = *(_OWORD *)((char *)a1 + 108);
  v5 = a1[1];
  *(_OWORD *)(v2 + 16) = *a1;
  *(_OWORD *)(v2 + 32) = v5;
  v6 = a1[3];
  *(_OWORD *)(v2 + 48) = a1[2];
  *(_OWORD *)(v2 + 64) = v6;
  v7 = specialized static ViewGraph.current.getter() + 200;
  swift_beginAccess();
  v8 = MEMORY[0x23B7C9E44](v7);
  swift_release();
  if (v8)
  {
    swift_getObjectType();
    v9 = swift_conformsToProtocol2();
    if (v9)
      v10 = v9;
    else
      v10 = 0;
    if (v9)
      v11 = v8;
    else
      v11 = 0;
    if (v11)
    {
      ObjectType = swift_getObjectType();
      v13 = type metadata accessor for AnyPreferenceKey(0, (unint64_t *)&lazy cache variable for type metadata for EventGraphHost);
      (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 + 8) + 16))(v17, v13, v13, ObjectType);
      swift_unknownObjectRelease();
      if (v17[0])
      {
        v14 = v17[1];
        v15 = swift_getObjectType();
        (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v15, v14);
        swift_unknownObjectRelease();
      }
    }
    else
    {
      swift_unknownObjectRelease();
    }
  }
  swift_weakAssign();
  swift_release();
  result = (id)AGSubgraphGetCurrent();
  if (result)
  {
    *(_QWORD *)(v2 + 152) = result;
    return (id)v2;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t LayoutGestureBox.updateResetSeed(_:)(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  int v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t (*v13)(void);
  unint64_t *v14;
  __int128 *Value;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  char v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  char v31;
  char v32;
  uint64_t v33;
  __int8 v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  int8x16_t v41;
  char v42;
  char v43;
  uint64_t v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  char v51;
  uint64_t v52;
  _BYTE v53[144];
  _BYTE v54[144];
  _BYTE v55[144];
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  unint64_t v65[18];
  _BYTE v66[144];

  if (*(_DWORD *)(v1 + 176) != (_DWORD)result)
  {
    v2 = v1;
    *(_DWORD *)(v1 + 176) = result;
    v3 = (uint64_t *)(v1 + 160);
    result = swift_beginAccess();
    v4 = *(_QWORD *)(v1 + 160);
    v5 = *(_QWORD *)(v4 + 16);
    if (v5)
    {
      v6 = 0;
      v7 = MEMORY[0x24BEE4B00];
      v8 = 10;
      v40 = *(_QWORD *)(v4 + 16);
      while (1)
      {
        swift_beginAccess();
        v11 = (_QWORD *)*v3;
        result = swift_isUniquelyReferenced_nonNull_native();
        *v3 = (uint64_t)v11;
        if ((result & 1) == 0)
        {
          result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v11);
          v11 = (_QWORD *)result;
          *v3 = result;
        }
        if (v6 >= v11[2])
          break;
        v12 = &v11[v8];
        if (*(_QWORD *)(v11[v8 - 1] + 16))
        {
          if ((*((_BYTE *)v12 - 20) & 1) == 0)
          {
            v13 = MEMORY[0x24BEE1C68];
            outlined init with take of Image.ResizingInfo?((uint64_t)&v11[v8], (uint64_t)v65, &lazy cache variable for type metadata for LayoutGestureBox.Child.DebugData?, (uint64_t)&type metadata for LayoutGestureBox.Child.DebugData, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1C68]);
            outlined init with take of Image.ResizingInfo?((uint64_t)v65, (uint64_t)v66, &lazy cache variable for type metadata for LayoutGestureBox.Child.DebugData?, (uint64_t)&type metadata for LayoutGestureBox.Child.DebugData, (uint64_t (*)(_QWORD, uint64_t))v13);
            if (_s7SwiftUI16LayoutGestureBox33_05F3243F43C616B77CCF383885E80E96LLC5ChildV9DebugDataOSgWOg((uint64_t)v66) == 1)
            {
              v14 = v65;
            }
            else
            {
              outlined init with take of Image.ResizingInfo?((uint64_t)v65, (uint64_t)v54, &lazy cache variable for type metadata for LayoutGestureBox.Child.DebugData?, (uint64_t)&type metadata for LayoutGestureBox.Child.DebugData, (uint64_t (*)(_QWORD, uint64_t))v13);
              outlined init with take of LayoutGestureBox.Child.DebugData((uint64_t)v54, (uint64_t)v55);
              if (_s7SwiftUI16LayoutGestureBox33_05F3243F43C616B77CCF383885E80E96LLC5ChildV9DebugDataOWOg((uint64_t)v55) == 1)
              {
                _s7SwiftUI16LayoutGestureBox33_05F3243F43C616B77CCF383885E80E96LLC5ChildV9DebugDataOWOj0_((uint64_t)v55);
                Value = (__int128 *)AGGraphGetValue();
                v56 = *Value;
                v16 = Value[4];
                v18 = Value[1];
                v17 = Value[2];
                v59 = Value[3];
                v60 = v16;
                v57 = v18;
                v58 = v17;
                v19 = Value[8];
                v21 = Value[5];
                v20 = Value[6];
                v63 = Value[7];
                v64 = v19;
                v61 = v21;
                v62 = v20;
                outlined retain of GestureDebug.Data((uint64_t)&v56);
                outlined release of LayoutGestureBox.Child.DebugData?(v65);
                v22 = *((_QWORD *)&v64 + 1);
                v23 = v60;
                v24 = v61;
                v25 = v62;
                v26 = v63;
                v27 = v64;
                v28 = v58;
                v29 = v59;
                v30 = *(_QWORD *)((char *)&v57 + 4);
                v31 = v57;
                v32 = BYTE1(v57);
                v33 = *((_QWORD *)&v56 + 1);
                v34 = v56;
              }
              else
              {
                v35 = _s7SwiftUI16LayoutGestureBox33_05F3243F43C616B77CCF383885E80E96LLC5ChildV9DebugDataOWOj0_((uint64_t)v55);
                v22 = *(_QWORD *)(v35 + 136);
                v23 = *(_OWORD *)(v35 + 64);
                v24 = *(_OWORD *)(v35 + 80);
                v25 = *(_OWORD *)(v35 + 96);
                v26 = *(_OWORD *)(v35 + 112);
                v27 = *(_BYTE *)(v35 + 128);
                v28 = *(_OWORD *)(v35 + 32);
                v29 = *(_OWORD *)(v35 + 48);
                v30 = *(_QWORD *)(v35 + 20);
                v31 = *(_BYTE *)(v35 + 16);
                v32 = *(_BYTE *)(v35 + 17);
                v33 = *(_QWORD *)(v35 + 8);
                v34 = *(_BYTE *)v35;
              }
              v41.i8[0] = v34;
              v41.i64[1] = v33;
              v42 = v31;
              v43 = v32;
              v44 = v30;
              v45 = v28;
              v46 = v29;
              v47 = v23;
              v48 = v24;
              v49 = v25;
              v50 = v26;
              v51 = v27;
              v52 = v22;
              _s7SwiftUI16LayoutGestureBox33_05F3243F43C616B77CCF383885E80E96LLC5ChildV9DebugDataOWOi_(&v41);
              outlined init with take of LayoutGestureBox.Child.DebugData((uint64_t)&v41, (uint64_t)v53);
              _ViewInputs.base.modify(v53, v36);
              v14 = (unint64_t *)v53;
            }
            outlined init with take of Image.ResizingInfo?((uint64_t)v14, (uint64_t)&v56, &lazy cache variable for type metadata for LayoutGestureBox.Child.DebugData?, (uint64_t)&type metadata for LayoutGestureBox.Child.DebugData, (uint64_t (*)(_QWORD, uint64_t))v13);
            outlined init with take of Image.ResizingInfo?((uint64_t)&v56, (uint64_t)&v11[v8], &lazy cache variable for type metadata for LayoutGestureBox.Child.DebugData?, (uint64_t)&type metadata for LayoutGestureBox.Child.DebugData, (uint64_t (*)(_QWORD, uint64_t))v13);
            *((_DWORD *)v12 - 6) = 0;
            *((_BYTE *)v12 - 20) = 1;
            v37 = &v11[v8];
            v38 = v11[v8 - 4];
            if (v38)
            {
              MEMORY[0x24BDAC7A8](v38);
              AGSubgraphApply();
              v39 = (void *)*(v37 - 4);
              if (v39)
              {
                AGSubgraphInvalidate();

              }
            }
            *(v37 - 4) = 0;
            (*(void (**)(void))(*(_QWORD *)*(v12 - 6) + 120))();
            v7 = MEMORY[0x24BEE4B00];
            v5 = v40;
          }
          v9 = &v11[v8];
          swift_bridgeObjectRelease();
          *(v9 - 2) = v7;
          swift_bridgeObjectRelease();
          *(v12 - 1) = MEMORY[0x24BEE4B08];
          ++*((_DWORD *)v9 - 9);
        }
        ++v6;
        result = swift_endAccess();
        v10 = *(_DWORD *)(v2 + 172) + 1;
        *(_DWORD *)(v2 + 172) = v10;
        v8 += 26;
        if (v5 == v6)
          goto LABEL_22;
      }
      __break(1u);
    }
    else
    {
      v10 = *(_DWORD *)(v1 + 172);
LABEL_22:
      *(_DWORD *)(v2 + 172) = v10 + 1;
    }
  }
  return result;
}

uint64_t LayoutGestureBox.updateResponder(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  char v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  int v13;
  _QWORD *v14;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v16;
  unint64_t v17;
  _OWORD *v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  _QWORD *v28;
  unint64_t v29;
  uint64_t v30;
  __int128 *v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;
  __int128 *v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  _OWORD *v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  _OWORD *v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  uint64_t v91;
  uint64_t result;
  uint64_t v93;
  _QWORD *v94;
  uint64_t (*v95)(void);
  unint64_t v96;
  char *v97;
  BOOL v98;
  __int128 *v99;
  __int128 *Value;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  uint64_t v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  char v112;
  __int128 v113;
  __int128 v114;
  uint64_t v115;
  char v116;
  char v117;
  uint64_t v118;
  __int8 v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  char *v123;
  uint64_t v124;
  void *v125;
  char *v126;
  uint64_t v127;
  uint64_t v128;
  _QWORD *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t (*v132)(void);
  uint64_t v133;
  uint64_t v134;
  unint64_t v135;
  uint64_t v136;
  __int128 v137;
  unint64_t v138;
  char v139;
  unint64_t v140;
  int v141;
  unint64_t v142;
  uint64_t v143;
  uint64_t v144;
  _QWORD *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  _OWORD v149[11];
  _OWORD v150[2];
  _OWORD v151[11];
  _OWORD v152[2];
  __int128 v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  __int128 v158;
  __int128 v159;
  __int128 v160;
  __int128 v161;
  __int128 v162;
  __int128 v163;
  _OWORD v164[2];
  __int128 v165;
  __int128 v166;
  __int128 v167;
  __int128 v168;
  __int128 v169;
  __int128 v170;
  __int128 v171;
  __int128 v172;
  __int128 v173;
  __int128 v174;
  __int128 v175;
  _OWORD v176[2];
  int8x16_t v177;
  char v178;
  char v179;
  uint64_t v180;
  __int128 v181;
  __int128 v182;
  __int128 v183;
  __int128 v184;
  __int128 v185;
  __int128 v186;
  char v187;
  uint64_t v188;
  _BYTE v189[144];
  _OWORD v190[2];
  __int128 v191;
  _OWORD v192[8];
  _OWORD v193[2];

  v3 = v1 + 160;
  swift_beginAccess();
  v148 = v1;
  v4 = *(_QWORD *)(*(_QWORD *)(v1 + 160) + 16);
  swift_beginAccess();
  v5 = *(_QWORD *)(a1 + 40);
  if (!(v5 >> 62))
  {
    v6 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    v147 = v6;
    if (v6)
      goto LABEL_3;
LABEL_53:
    result = swift_bridgeObjectRelease();
    if (!v4)
      return result;
    goto LABEL_54;
  }
LABEL_52:
  swift_bridgeObjectRetain();
  v147 = _CocoaArrayWrapper.endIndex.getter();
  if (!v147)
    goto LABEL_53;
LABEL_3:
  v7 = 0;
  v8 = 0;
  v138 = v5;
  v140 = v5 & 0xC000000000000001;
  v135 = v5 + 32;
  v136 = v5 & 0xFFFFFFFFFFFFFF8;
  v144 = -v4;
  v5 = 208;
  while (1)
  {
LABEL_4:
    v9 = 208 * v7 + 32;
    v10 = v7;
    v142 = v4;
LABEL_5:
    if (v140)
    {
      v11 = MEMORY[0x23B7C6D9C](v10, v138);
      if (__OFADD__(v10, 1))
        goto LABEL_45;
    }
    else
    {
      if (v10 >= *(_QWORD *)(v136 + 16))
        goto LABEL_48;
      v11 = *(_QWORD *)(v135 + 8 * v10);
      swift_retain();
      if (__OFADD__(v10, 1))
      {
LABEL_45:
        __break(1u);
LABEL_46:
        __break(1u);
LABEL_47:
        __break(1u);
LABEL_48:
        __break(1u);
LABEL_49:
        __break(1u);
LABEL_50:
        __break(1u);
LABEL_51:
        __break(1u);
        goto LABEL_52;
      }
    }
    if (v4 < (uint64_t)v10)
      goto LABEL_46;
    v7 = v10 + 1;
    if (v10 != v4)
      break;
    v10 = v4;
LABEL_23:
    v13 = *(_DWORD *)(v148 + 168);
    swift_beginAccess();
    v14 = *(_QWORD **)(v148 + 160);
    swift_retain();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(_QWORD *)(v148 + 160) = v14;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v14[2] + 1, 1, v14);
      *(_QWORD *)v3 = v14;
    }
    v17 = v14[2];
    v16 = v14[3];
    if (v17 >= v16 >> 1)
    {
      v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v16 > 1), v17 + 1, 1, v14);
      *(_QWORD *)v3 = v14;
    }
    _s7SwiftUI16LayoutGestureBox33_05F3243F43C616B77CCF383885E80E96LLC5ChildV9DebugDataOSgWOi0_((uint64_t)v189);
    *(_QWORD *)&v190[0] = v11;
    DWORD2(v190[0]) = v13;
    *(_QWORD *)((char *)v190 + 12) = 0;
    *(_QWORD *)((char *)&v190[1] + 4) = 0;
    BYTE12(v190[1]) = 1;
    v191 = MEMORY[0x24BEE4B00];
    outlined init with take of Image.ResizingInfo?((uint64_t)v189, (uint64_t)v192, &lazy cache variable for type metadata for LayoutGestureBox.Child.DebugData?, (uint64_t)&type metadata for LayoutGestureBox.Child.DebugData, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1C68]);
    *(_QWORD *)&v193[1] = 0;
    DWORD2(v193[1]) = 0;
    v14[2] = v17 + 1;
    v18 = &v14[26 * v17];
    v5 = 208;
    v18[2] = v190[0];
    v19 = v192[1];
    v20 = v191;
    v21 = v190[1];
    v18[5] = v192[0];
    v18[6] = v19;
    v18[3] = v21;
    v18[4] = v20;
    v22 = v192[5];
    v23 = v192[3];
    v24 = v192[2];
    v18[9] = v192[4];
    v18[10] = v22;
    v18[7] = v24;
    v18[8] = v23;
    v25 = v193[0];
    v26 = v192[7];
    v27 = v192[6];
    *(_OWORD *)((char *)v18 + 220) = *(_OWORD *)((char *)v193 + 12);
    v18[12] = v26;
    v18[13] = v25;
    v18[11] = v27;
    swift_endAccess();
    ++*(_DWORD *)(v148 + 168);
    v4 = v142;
    if ((uint64_t)v10 < (uint64_t)v142)
    {
      swift_beginAccess();
      v28 = *(_QWORD **)v3;
      v29 = *(_QWORD *)(*(_QWORD *)v3 + 16);
      if (v10 >= v29)
        goto LABEL_49;
      v30 = 26 * v10;
      v31 = (__int128 *)&v28[26 * v10 + 4];
      v153 = *v31;
      v32 = v31[1];
      v33 = v31[2];
      v34 = v31[4];
      v156 = v31[3];
      v157 = v34;
      v154 = v32;
      v155 = v33;
      v35 = v31[5];
      v36 = v31[6];
      v37 = v31[8];
      v160 = v31[7];
      v161 = v37;
      v158 = v35;
      v159 = v36;
      v38 = v31[9];
      v39 = v31[10];
      v40 = v31[11];
      *(_OWORD *)((char *)v164 + 12) = *(__int128 *)((char *)v31 + 188);
      v163 = v39;
      v164[0] = v40;
      v162 = v38;
      if (v142 >= v29)
        goto LABEL_50;
      v41 = 208 * v142;
      v42 = (__int128 *)&v28[26 * v142 + 4];
      v165 = *v42;
      v43 = v42[1];
      v44 = v42[2];
      v45 = v42[4];
      v168 = v42[3];
      v169 = v45;
      v166 = v43;
      v167 = v44;
      v46 = v42[5];
      v47 = v42[6];
      v48 = v42[8];
      v172 = v42[7];
      v173 = v48;
      v170 = v46;
      v171 = v47;
      v49 = v42[9];
      v50 = v42[10];
      v51 = v42[11];
      *(_OWORD *)((char *)v176 + 12) = *(__int128 *)((char *)v42 + 188);
      v175 = v50;
      v176[0] = v51;
      v174 = v49;
      outlined retain of LayoutGestureBox.Child((uint64_t)&v153);
      outlined retain of LayoutGestureBox.Child((uint64_t)&v165);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v28 = specialized _ArrayBuffer._consumeAndCreateNew()(v28);
      v4 = (uint64_t)(v28 + 4);
      v52 = &v28[v30 + 4];
      v149[0] = *v52;
      v53 = v52[1];
      v54 = v52[2];
      v55 = v52[4];
      v149[3] = v52[3];
      v149[4] = v55;
      v149[1] = v53;
      v149[2] = v54;
      v56 = v52[5];
      v57 = v52[6];
      v58 = v52[8];
      v149[7] = v52[7];
      v149[8] = v58;
      v149[5] = v56;
      v149[6] = v57;
      v59 = v52[9];
      v60 = v52[10];
      v61 = v52[11];
      *(_OWORD *)((char *)v150 + 12) = *(_OWORD *)((char *)v52 + 188);
      v149[10] = v60;
      v150[0] = v61;
      v149[9] = v59;
      *v52 = v165;
      v62 = v166;
      v63 = v167;
      v64 = v169;
      v52[3] = v168;
      v52[4] = v64;
      v52[1] = v62;
      v52[2] = v63;
      v65 = v170;
      v66 = v171;
      v67 = v173;
      v52[7] = v172;
      v52[8] = v67;
      v52[5] = v65;
      v52[6] = v66;
      v68 = v174;
      v69 = v175;
      v70 = v176[0];
      *(_OWORD *)((char *)v52 + 188) = *(_OWORD *)((char *)v176 + 12);
      v52[10] = v69;
      v52[11] = v70;
      v52[9] = v68;
      outlined release of LayoutGestureBox.Child((uint64_t)v149);
      if (v142 >= v28[2])
        goto LABEL_51;
      v71 = (_OWORD *)(v4 + v41);
      v151[0] = *(_OWORD *)(v4 + 208 * v142);
      v72 = *(_OWORD *)(v4 + v41 + 16);
      v73 = *(_OWORD *)(v4 + v41 + 32);
      v74 = *(_OWORD *)(v4 + v41 + 64);
      v151[3] = *(_OWORD *)(v4 + v41 + 48);
      v151[4] = v74;
      v151[1] = v72;
      v151[2] = v73;
      v75 = *(_OWORD *)(v4 + v41 + 80);
      v76 = *(_OWORD *)(v4 + v41 + 96);
      v77 = *(_OWORD *)(v4 + v41 + 128);
      v151[7] = *(_OWORD *)(v4 + v41 + 112);
      v151[8] = v77;
      v151[5] = v75;
      v151[6] = v76;
      v78 = *(_OWORD *)(v4 + v41 + 144);
      v79 = *(_OWORD *)(v4 + v41 + 160);
      v80 = *(_OWORD *)(v4 + v41 + 176);
      *(_OWORD *)((char *)v152 + 12) = *(_OWORD *)(v4 + v41 + 188);
      v151[10] = v79;
      v152[0] = v80;
      v151[9] = v78;
      *v71 = v153;
      v81 = v154;
      v82 = v155;
      v83 = v157;
      v71[3] = v156;
      v71[4] = v83;
      v71[1] = v81;
      v71[2] = v82;
      v84 = v158;
      v85 = v159;
      v86 = v161;
      v71[7] = v160;
      v71[8] = v86;
      v71[5] = v84;
      v71[6] = v85;
      v87 = v162;
      v88 = v163;
      v89 = v164[0];
      *(_OWORD *)((char *)v71 + 188) = *(_OWORD *)((char *)v164 + 12);
      v71[10] = v88;
      v71[11] = v89;
      v71[9] = v87;
      outlined release of LayoutGestureBox.Child((uint64_t)v151);
      *(_QWORD *)v3 = v28;
      swift_endAccess();
      v4 = v142;
    }
    swift_release();
    if (__OFADD__(v4++, 1))
      goto LABEL_47;
    v91 = v147;
    if (v7 == v147)
      goto LABEL_38;
    --v144;
    v8 = 1;
  }
  v5 = 0;
  v12 = (_QWORD *)(*(_QWORD *)v3 + v9);
  while (1)
  {
    if ((uint64_t)(v10 + v5) >= v4)
    {
      __break(1u);
LABEL_44:
      __break(1u);
      goto LABEL_45;
    }
    if ((int64_t)(v10 + v5) >= *(_QWORD *)(*(_QWORD *)v3 + 16))
      goto LABEL_44;
    if (*v12 == v11)
      break;
    ++v5;
    v12 += 26;
    if (!(v144 + v10 + v5))
      goto LABEL_23;
  }
  if (v5)
  {
    swift_beginAccess();
    specialized MutableCollection.swapAt(_:_:)(v10, v10 + v5);
    swift_endAccess();
    swift_release();
    v8 = 1;
    v91 = v147;
    v5 = 208;
    if (v7 != v147)
      goto LABEL_4;
LABEL_38:
    result = swift_bridgeObjectRelease();
    if (v91 < v4)
      goto LABEL_54;
LABEL_42:
    ++*(_DWORD *)(v148 + 172);
    return result;
  }
  swift_release();
  v9 += 208;
  ++v10;
  v5 = v147;
  if (v7 != v147)
    goto LABEL_5;
  result = swift_bridgeObjectRelease();
  if (v147 >= v4)
  {
    if ((v8 & 1) == 0)
      return result;
    goto LABEL_42;
  }
LABEL_54:
  v93 = 208 * v4 - 176;
  while (1)
  {
    swift_beginAccess();
    v94 = *(_QWORD **)v3;
    result = swift_isUniquelyReferenced_nonNull_native();
    *(_QWORD *)v3 = v94;
    if ((result & 1) == 0)
    {
      result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v94);
      v94 = (_QWORD *)result;
      *(_QWORD *)v3 = result;
    }
    v95 = MEMORY[0x24BEE1C68];
    if (v4 < 1)
      break;
    v96 = v4 - 1;
    if (v96 >= v94[2])
      goto LABEL_80;
    v97 = (char *)v94 + v93;
    if (*(_QWORD *)(*(_QWORD *)((char *)v94 + v93 + 40) + 16))
    {
      if ((v97[28] & 1) == 0)
      {
        outlined init with take of Image.ResizingInfo?((uint64_t)v94 + v93 + 48, (uint64_t)&v165, &lazy cache variable for type metadata for LayoutGestureBox.Child.DebugData?, (uint64_t)&type metadata for LayoutGestureBox.Child.DebugData, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1C68]);
        outlined init with take of Image.ResizingInfo?((uint64_t)&v165, (uint64_t)v190, &lazy cache variable for type metadata for LayoutGestureBox.Child.DebugData?, (uint64_t)&type metadata for LayoutGestureBox.Child.DebugData, (uint64_t (*)(_QWORD, uint64_t))v95);
        v98 = _s7SwiftUI16LayoutGestureBox33_05F3243F43C616B77CCF383885E80E96LLC5ChildV9DebugDataOSgWOg((uint64_t)v190) == 1;
        v145 = v94;
        v99 = &v165;
        if (!v98)
        {
          outlined init with take of Image.ResizingInfo?((uint64_t)&v165, (uint64_t)v149, &lazy cache variable for type metadata for LayoutGestureBox.Child.DebugData?, (uint64_t)&type metadata for LayoutGestureBox.Child.DebugData, (uint64_t (*)(_QWORD, uint64_t))v95);
          outlined init with take of LayoutGestureBox.Child.DebugData((uint64_t)v149, (uint64_t)v151);
          if (_s7SwiftUI16LayoutGestureBox33_05F3243F43C616B77CCF383885E80E96LLC5ChildV9DebugDataOWOg((uint64_t)v151) == 1)
          {
            _s7SwiftUI16LayoutGestureBox33_05F3243F43C616B77CCF383885E80E96LLC5ChildV9DebugDataOWOj0_((uint64_t)v151);
            Value = (__int128 *)AGGraphGetValue();
            v153 = *Value;
            v101 = Value[4];
            v103 = Value[1];
            v102 = Value[2];
            v156 = Value[3];
            v157 = v101;
            v154 = v103;
            v155 = v102;
            v104 = Value[8];
            v106 = Value[5];
            v105 = Value[6];
            v160 = Value[7];
            v161 = v104;
            v158 = v106;
            v159 = v105;
            outlined retain of GestureDebug.Data((uint64_t)&v153);
            outlined release of LayoutGestureBox.Child.DebugData?((unint64_t *)&v165);
            v107 = *((_QWORD *)&v161 + 1);
            v108 = v157;
            v109 = v158;
            v110 = v159;
            v111 = v160;
            v112 = v161;
            v113 = v155;
            v114 = v156;
            v115 = *(_QWORD *)((char *)&v154 + 4);
            v116 = v154;
            v117 = BYTE1(v154);
            v118 = *((_QWORD *)&v153 + 1);
            v119 = v153;
          }
          else
          {
            v120 = _s7SwiftUI16LayoutGestureBox33_05F3243F43C616B77CCF383885E80E96LLC5ChildV9DebugDataOWOj0_((uint64_t)v151);
            v107 = *(_QWORD *)(v120 + 136);
            v108 = *(_OWORD *)(v120 + 64);
            v109 = *(_OWORD *)(v120 + 80);
            v110 = *(_OWORD *)(v120 + 96);
            v111 = *(_OWORD *)(v120 + 112);
            v112 = *(_BYTE *)(v120 + 128);
            v113 = *(_OWORD *)(v120 + 32);
            v114 = *(_OWORD *)(v120 + 48);
            v115 = *(_QWORD *)(v120 + 20);
            v116 = *(_BYTE *)(v120 + 16);
            v117 = *(_BYTE *)(v120 + 17);
            v118 = *(_QWORD *)(v120 + 8);
            v119 = *(_BYTE *)v120;
          }
          v177.i8[0] = v119;
          v177.i64[1] = v118;
          v178 = v116;
          v179 = v117;
          v180 = v115;
          v181 = v113;
          v182 = v114;
          v183 = v108;
          v184 = v109;
          v185 = v110;
          v186 = v111;
          v187 = v112;
          v188 = v107;
          _s7SwiftUI16LayoutGestureBox33_05F3243F43C616B77CCF383885E80E96LLC5ChildV9DebugDataOWOi_(&v177);
          outlined init with take of LayoutGestureBox.Child.DebugData((uint64_t)&v177, (uint64_t)v189);
          _ViewInputs.base.modify(v189, v121);
          v99 = (__int128 *)v189;
        }
        outlined init with take of Image.ResizingInfo?((uint64_t)v99, (uint64_t)&v153, &lazy cache variable for type metadata for LayoutGestureBox.Child.DebugData?, (uint64_t)&type metadata for LayoutGestureBox.Child.DebugData, (uint64_t (*)(_QWORD, uint64_t))v95);
        outlined init with take of Image.ResizingInfo?((uint64_t)&v153, (uint64_t)v94 + v93 + 48, &lazy cache variable for type metadata for LayoutGestureBox.Child.DebugData?, (uint64_t)&type metadata for LayoutGestureBox.Child.DebugData, (uint64_t (*)(_QWORD, uint64_t))v95);
        *((_DWORD *)v97 + 6) = 0;
        v97[28] = 1;
        v122 = v93;
        v123 = (char *)v145 + v93;
        v124 = *((_QWORD *)v123 + 2);
        if (v124)
        {
          MEMORY[0x24BDAC7A8](v124);
          AGSubgraphApply();
          v125 = (void *)*((_QWORD *)v123 + 2);
          if (v125)
          {
            AGSubgraphInvalidate();

          }
        }
        *((_QWORD *)v123 + 2) = 0;
        (*(void (**)(void))(**(_QWORD **)v97 + 120))();
        v93 = v122;
        v94 = v145;
      }
      v126 = (char *)v94 + v93;
      swift_bridgeObjectRelease();
      *((_QWORD *)v126 + 4) = MEMORY[0x24BEE4B00];
      result = swift_bridgeObjectRelease();
      *((_QWORD *)v97 + 5) = MEMORY[0x24BEE4B08];
      ++*((_DWORD *)v126 + 3);
      v94 = *(_QWORD **)v3;
    }
    ++*(_DWORD *)(v148 + 172);
    if (!v94[2])
      goto LABEL_81;
    result = swift_isUniquelyReferenced_nonNull_native();
    *(_QWORD *)v3 = v94;
    if ((result & 1) != 0)
    {
      v127 = v94[2];
      if (!v127)
        goto LABEL_77;
    }
    else
    {
      result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v94);
      v94 = (_QWORD *)result;
      *(_QWORD *)v3 = result;
      v127 = *(_QWORD *)(result + 16);
      if (!v127)
      {
LABEL_77:
        __break(1u);
        return result;
      }
    }
    v128 = v127 - 1;
    v146 = v93;
    v129 = &v94[26 * v127 - 26];
    v130 = v129[4];
    v143 = v129[6];
    v141 = *((_DWORD *)v129 + 14);
    v139 = *((_BYTE *)v129 + 60);
    v131 = v129[5];
    v137 = *((_OWORD *)v129 + 4);
    outlined init with take of Image.ResizingInfo?((uint64_t)(v129 + 10), (uint64_t)&v165, &lazy cache variable for type metadata for LayoutGestureBox.Child.DebugData?, (uint64_t)&type metadata for LayoutGestureBox.Child.DebugData, (uint64_t (*)(_QWORD, uint64_t))v95);
    v132 = v95;
    v133 = v96;
    v134 = v129[28];
    LODWORD(v129) = *((_DWORD *)v129 + 58);
    v94[2] = v128;
    *(_QWORD *)v3 = v94;
    *(_QWORD *)&v190[0] = v130;
    *((_QWORD *)&v190[0] + 1) = v131;
    *(_QWORD *)&v190[1] = v143;
    DWORD2(v190[1]) = v141;
    BYTE12(v190[1]) = v139;
    v191 = v137;
    outlined init with take of Image.ResizingInfo?((uint64_t)&v165, (uint64_t)v192, &lazy cache variable for type metadata for LayoutGestureBox.Child.DebugData?, (uint64_t)&type metadata for LayoutGestureBox.Child.DebugData, (uint64_t (*)(_QWORD, uint64_t))v132);
    *(_QWORD *)&v193[1] = v134;
    v4 = v133;
    DWORD2(v193[1]) = (_DWORD)v129;
    swift_endAccess();
    result = outlined release of LayoutGestureBox.Child((uint64_t)v190);
    v93 = v146 - 208;
    if (v147 >= v133)
      goto LABEL_42;
  }
  __break(1u);
LABEL_80:
  __break(1u);
LABEL_81:
  __break(1u);
  return result;
}

uint64_t LayoutGestureBox.willSendEvents<A>(_:gesture:boxValueAttribute:)(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  void (*v17)(uint64_t *, _QWORD *, uint64_t, uint64_t);
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t v27;
  id v28;
  void *v29;
  id v30;
  int v31;
  __int32 v32;
  _QWORD *v33;
  id v34;
  _QWORD *v35;
  void *v36;
  _QWORD *v37;
  _QWORD *v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t (*v43)(void);
  _DWORD *v44;
  __int32 v47;
  uint64_t v49;
  int v50;
  uint64_t v51;
  int8x16_t v52[9];
  unint64_t v53[18];
  _QWORD v54[2];
  int v55;
  uint64_t v56;

  v6 = v5;
  v8 = v5 + 160;
  result = swift_beginAccess();
  v10 = *(_QWORD *)(v5 + 160);
  v11 = *(_QWORD *)(v10 + 16);
  if (v11)
  {
    v12 = 0;
    v13 = 8;
    v14 = MEMORY[0x24BEE4B00];
    while (v12 < *(_QWORD *)(v10 + 16))
    {
      if (*(_QWORD *)(*(_QWORD *)(v10 + v13 * 8) + 16))
      {
        swift_beginAccess();
        v15 = *(_QWORD **)v8;
        result = swift_isUniquelyReferenced_nonNull_native();
        *(_QWORD *)v8 = v15;
        if ((result & 1) == 0)
        {
          result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v15);
          v15 = (_QWORD *)result;
          *(_QWORD *)v8 = result;
        }
        if (v12 >= v15[2])
          goto LABEL_43;
        v15[v13] = v14;
        v10 = *(_QWORD *)(v5 + 160);
        swift_endAccess();
        result = swift_bridgeObjectRelease();
        ++*(_DWORD *)(v5 + 172);
      }
      ++v12;
      v13 += 26;
      if (v11 == v12)
        goto LABEL_10;
    }
    __break(1u);
LABEL_43:
    __break(1u);
LABEL_44:
    __break(1u);
LABEL_45:
    __break(1u);
LABEL_46:
    __break(1u);
LABEL_47:
    __break(1u);
LABEL_48:
    __break(1u);
LABEL_49:
    __break(1u);
LABEL_50:
    __break(1u);
LABEL_51:
    __break(1u);
  }
  else
  {
LABEL_10:
    if (*(_QWORD *)(a1 + 16))
    {
      v56 = a1;
      v54[0] = v5;
      v16 = a5;
      v17 = *(void (**)(uint64_t *, _QWORD *, uint64_t, uint64_t))(a5 + 32);
      swift_bridgeObjectRetain();
      v17(&v56, v54, a4, a5);
      v51 = *(_QWORD *)(*(_QWORD *)(v5 + 160) + 16);
      if (v51)
      {
        v18 = 0;
        v47 = *MEMORY[0x24BE096C0];
        v19 = 29;
        do
        {
          v20 = swift_bridgeObjectRetain();
          v21 = specialized LayoutGesture.childEvents(events:index:box:)(v20, v18, v6);
          result = swift_bridgeObjectRelease();
          if (*(_QWORD *)(v21 + 16))
          {
            if (v18 >= *(_QWORD *)(*(_QWORD *)v8 + 16))
              goto LABEL_44;
            swift_beginAccess();
            v22 = *(_QWORD **)v8;
            swift_bridgeObjectRetain();
            result = swift_isUniquelyReferenced_nonNull_native();
            *(_QWORD *)v8 = v22;
            if ((result & 1) == 0)
            {
              result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v22);
              v22 = (_QWORD *)result;
              *(_QWORD *)v8 = result;
            }
            if (v18 >= v22[2])
              goto LABEL_45;
            specialized Set.formUnion<A>(_:)(v21);
            v23 = *(_QWORD *)v8;
            v24 = *(_QWORD *)(*(_QWORD *)v8 + 16);
            result = swift_bridgeObjectRetain();
            if (v18 >= v24)
              goto LABEL_46;
            *(_QWORD *)(v23 + v19 * 8 - 168) = v21;
            swift_endAccess();
            swift_bridgeObjectRelease();
            result = swift_bridgeObjectRelease();
            ++*(_DWORD *)(v6 + 172);
            v25 = *(_QWORD *)(v6 + 160);
            if (v18 >= *(_QWORD *)(v25 + 16))
              goto LABEL_47;
            if ((*(_BYTE *)(v25 + v19 * 8 - 172) & 1) != 0)
            {
              if (AGSubgraphIsValid())
              {
                v26 = *(_DWORD *)(v25 + v19 * 8 - 192);
                v27 = v16;
                v28 = (id)AGSubgraphGetGraph();
                v29 = (void *)AGSubgraphCreate();

                AGSubgraphAddChild();
                AGGraphClearUpdate();
                v30 = (id)AGSubgraphGetCurrent();
                AGSubgraphSetCurrent();
                closure #1 in LayoutGestureBox.willSendEvents<A>(_:gesture:boxValueAttribute:)(v6, a3, v26, v18, a4, v27);
                AGSubgraphSetCurrent();

                AGGraphSetUpdate();
                v31 = v54[0];
                v32 = HIDWORD(v54[0]);
                v49 = v54[1];
                v50 = v55;
                swift_beginAccess();
                v33 = *(_QWORD **)(v6 + 160);
                v34 = v29;
                result = swift_isUniquelyReferenced_nonNull_native();
                *(_QWORD *)(v6 + 160) = v33;
                if ((result & 1) == 0)
                {
                  result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v33);
                  v33 = (_QWORD *)result;
                  *(_QWORD *)v8 = result;
                }
                if (v18 >= v33[2])
                  goto LABEL_51;
                v35 = &v33[v19];
                v36 = (void *)v33[v19 - 23];
                *(v35 - 23) = v29;
                swift_endAccess();

                v16 = a5;
              }
              else
              {
                v31 = specialized _GestureInputs.intern<A>(_:id:)(768, 4);
                v50 = 0;
                v32 = v47;
                v49 = MEMORY[0x24BEE4AF8];
              }
              swift_beginAccess();
              v37 = *(_QWORD **)v8;
              result = swift_isUniquelyReferenced_nonNull_native();
              *(_QWORD *)v8 = v37;
              if ((result & 1) == 0)
              {
                result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v37);
                v37 = (_QWORD *)result;
                *(_QWORD *)v8 = result;
              }
              if (v18 >= v37[2])
                goto LABEL_48;
              v38 = &v37[v19];
              *((_DWORD *)v38 - 44) = v31;
              *((_BYTE *)v38 - 172) = 0;
              v39 = *(_QWORD **)v8;
              if (v32 == v47)
              {
                _s7SwiftUI16LayoutGestureBox33_05F3243F43C616B77CCF383885E80E96LLC5ChildV9DebugDataOSgWOi0_((uint64_t)v53);
              }
              else
              {
                v52[0].i32[0] = v32;
                _s7SwiftUI16LayoutGestureBox33_05F3243F43C616B77CCF383885E80E96LLC5ChildV9DebugDataOWOi0_(v52);
                outlined init with take of LayoutGestureBox.Child.DebugData((uint64_t)v52, (uint64_t)v53);
                _ViewInputs.base.modify(v53, v40);
              }
              outlined init with take of Image.ResizingInfo?((uint64_t)v53, (uint64_t)v54, &lazy cache variable for type metadata for LayoutGestureBox.Child.DebugData?, (uint64_t)&type metadata for LayoutGestureBox.Child.DebugData, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1C68]);
              result = swift_isUniquelyReferenced_nonNull_native();
              *(_QWORD *)v8 = v39;
              if ((result & 1) == 0)
              {
                result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v39);
                v39 = (_QWORD *)result;
                *(_QWORD *)v8 = result;
              }
              if (v18 >= v39[2])
                goto LABEL_49;
              v41 = v16;
              v42 = (uint64_t)&v39[v19 - 19];
              v43 = MEMORY[0x24BEE1C68];
              outlined init with take of Image.ResizingInfo?(v42, (uint64_t)v53, &lazy cache variable for type metadata for LayoutGestureBox.Child.DebugData?, (uint64_t)&type metadata for LayoutGestureBox.Child.DebugData, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1C68]);
              outlined init with take of Image.ResizingInfo?((uint64_t)v54, v42, &lazy cache variable for type metadata for LayoutGestureBox.Child.DebugData?, (uint64_t)&type metadata for LayoutGestureBox.Child.DebugData, (uint64_t (*)(_QWORD, uint64_t))v43);
              result = (uint64_t)outlined release of LayoutGestureBox.Child.DebugData?(v53);
              if (v18 >= *(_QWORD *)(*(_QWORD *)v8 + 16))
                goto LABEL_50;
              v44 = (_DWORD *)(*(_QWORD *)v8 + v19 * 8);
              *((_QWORD *)v44 - 1) = v49;
              *v44 = v50;
              swift_endAccess();
              swift_bridgeObjectRelease();
              v16 = v41;
            }
          }
          else
          {
            swift_bridgeObjectRelease();
          }
          ++v18;
          v19 += 26;
        }
        while (v51 != v18);
      }
      return swift_bridgeObjectRelease();
    }
  }
  return result;
}

uint64_t closure #1 in LayoutGestureBox.willSendEvents<A>(_:gesture:boxValueAttribute:)(uint64_t a1, unsigned int a2, unsigned int a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t (*v25)(void);
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(_OWORD *);
  int v37;
  uint64_t v38;
  int v39;
  int v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  unint64_t v45;
  _BYTE v49[16];
  uint64_t v50;
  uint64_t v51;
  _BYTE v52[16];
  uint64_t v53;
  uint64_t v54;
  _OWORD v55[6];
  _BYTE v56[28];
  _OWORD v57[2];
  _BYTE v58[32];
  __int128 v59;
  _BYTE v60[44];
  __int128 v61;
  __int128 v62;
  _BYTE v63[32];
  __int128 v64;
  _BYTE v65[44];
  uint64_t v66;

  v45 = __PAIR64__(a3, a2);
  v66 = *MEMORY[0x24BDAC8D0];
  v7 = *(_OWORD *)(a1 + 32);
  v57[0] = *(_OWORD *)(a1 + 16);
  v57[1] = v7;
  v8 = *(_OWORD *)(a1 + 64);
  *(_OWORD *)v58 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)&v58[16] = v8;
  v9 = *(_OWORD *)(a1 + 96);
  v59 = *(_OWORD *)(a1 + 80);
  *(_OWORD *)v60 = v9;
  *(_OWORD *)&v60[16] = *(_OWORD *)(a1 + 112);
  *(_OWORD *)&v60[28] = *(_OWORD *)(a1 + 124);
  v10 = v7;
  v38 = *(_QWORD *)&v57[0];
  v37 = DWORD2(v57[0]);
  v11 = *((_QWORD *)&v7 + 1);
  v12 = *(_QWORD *)v58;
  v13 = *(_QWORD *)&v58[24];
  v14 = v59;
  v41 = *(_OWORD *)&v60[8];
  v42 = *(_OWORD *)&v58[8];
  v39 = *(_DWORD *)&v60[24];
  v40 = v9;
  v15 = *(_QWORD *)&v60[36];
  swift_beginAccess();
  v16 = *(_DWORD *)(v10 + 16);
  v17 = *(_QWORD *)(v10 + 24);
  v43 = *(_OWORD *)(v10 + 48);
  v44 = *(_OWORD *)(v10 + 32);
  v18 = *(_QWORD *)(v10 + 64);
  v19 = *(_QWORD *)(v10 + 72);
  v20 = *(_BYTE *)(v10 + 80);
  v21 = *(_BYTE *)(v10 + 81);
  v22 = *(_QWORD *)(v10 + 88);
  type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for MutableBox<CachedEnvironment>, (uint64_t)&type metadata for CachedEnvironment, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for MutableBox);
  v23 = swift_allocObject();
  *(_DWORD *)(v23 + 16) = v16;
  *(_QWORD *)(v23 + 24) = v17;
  *(_OWORD *)(v23 + 32) = v44;
  *(_OWORD *)(v23 + 48) = v43;
  *(_QWORD *)(v23 + 64) = v18;
  *(_QWORD *)(v23 + 72) = v19;
  *(_BYTE *)(v23 + 80) = v20;
  *(_BYTE *)(v23 + 81) = v21;
  *(_QWORD *)(v23 + 88) = v22;
  outlined retain of _GestureInputs((uint64_t)v57);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_release();
  *(_QWORD *)&v61 = v45;
  v53 = type metadata accessor for LayoutChildEvents(0, a5, a6, v24);
  v54 = MEMORY[0x23B7C9C04](&protocol conformance descriptor for LayoutChildEvents<A>, v53);
  v25 = MEMORY[0x24BE095F0];
  type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for Attribute<[EventID : EventType]>, (uint64_t (*)(uint64_t))type metadata accessor for [EventID : EventType], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BE095F0]);
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v61, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TA_5, (uint64_t)v52, v53, MEMORY[0x24BEE4078], v26, MEMORY[0x24BEE40A8], v27);
  v28 = v55[0];
  *(_QWORD *)&v61 = v45;
  v50 = type metadata accessor for LayoutChildSeed(0, a5, a6, v29);
  v51 = MEMORY[0x23B7C9C04](&protocol conformance descriptor for LayoutChildSeed<A>, v50);
  type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for Attribute<UInt32>, MEMORY[0x24BEE44F0], (uint64_t (*)(_QWORD, uint64_t))v25);
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v61, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TA_11, (uint64_t)v49, v50, MEMORY[0x24BEE4078], v30, MEMORY[0x24BEE40A8], v31);
  v32 = v55[0];
  swift_beginAccess();
  if ((a4 & 0x8000000000000000) != 0)
  {
    __break(1u);
LABEL_5:
    __break(1u);
  }
  v33 = *(_QWORD *)(a1 + 160);
  if (*(_QWORD *)(v33 + 16) <= a4)
    goto LABEL_5;
  v34 = *(_QWORD *)(v33 + 208 * a4 + 32);
  *(_QWORD *)&v61 = v38;
  DWORD2(v61) = v37;
  *(_QWORD *)&v62 = v23;
  *((_QWORD *)&v62 + 1) = v11;
  *(_QWORD *)v63 = v12;
  *(_OWORD *)&v63[8] = v42;
  *(_QWORD *)&v63[24] = v13;
  v64 = v14;
  *(_OWORD *)&v65[8] = v41;
  *(_DWORD *)v65 = v40;
  *(_DWORD *)&v65[24] = v39;
  *(_DWORD *)&v65[28] = v28;
  *(_DWORD *)&v65[32] = v32;
  *(_QWORD *)&v65[36] = v15;
  v55[4] = v14;
  v55[5] = *(_OWORD *)v65;
  *(_OWORD *)v56 = *(_OWORD *)&v65[16];
  *(_OWORD *)&v56[12] = *(_OWORD *)&v65[28];
  v55[0] = v61;
  v55[1] = v62;
  v55[2] = *(_OWORD *)v63;
  v55[3] = *(_OWORD *)&v63[16];
  v35 = *(void (**)(_OWORD *))(*(_QWORD *)v34 + 112);
  swift_retain();
  outlined retain of _GestureInputs((uint64_t)&v61);
  v35(v55);
  swift_release();
  outlined release of _GestureInputs((uint64_t)&v61);
  return outlined release of _GestureInputs((uint64_t)&v61);
}

uint64_t LayoutGestureBox.__deallocating_deinit()
{
  uint64_t v0;
  __int128 v1;
  __int128 v2;
  __int128 v3;
  _OWORD v5[6];
  _OWORD v6[2];

  v1 = *(_OWORD *)(v0 + 96);
  v5[4] = *(_OWORD *)(v0 + 80);
  v5[5] = v1;
  v6[0] = *(_OWORD *)(v0 + 112);
  *(_OWORD *)((char *)v6 + 12) = *(_OWORD *)(v0 + 124);
  v2 = *(_OWORD *)(v0 + 32);
  v5[0] = *(_OWORD *)(v0 + 16);
  v5[1] = v2;
  v3 = *(_OWORD *)(v0 + 64);
  v5[2] = *(_OWORD *)(v0 + 48);
  v5[3] = v3;
  outlined release of _GestureInputs((uint64_t)v5);
  swift_weakDestroy();

  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t LayoutGestureChildProxy.Child.binds(_:)(uint64_t *a1)
{
  __int128 *v1;
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _OWORD v22[2];

  v2 = *a1;
  v3 = v1[11];
  v21 = v1[10];
  v22[0] = v3;
  *(_OWORD *)((char *)v22 + 12) = *(__int128 *)((char *)v1 + 188);
  v4 = v1[7];
  v17 = v1[6];
  v18 = v4;
  v5 = v1[9];
  v19 = v1[8];
  v20 = v5;
  v6 = v1[3];
  v13 = v1[2];
  v14 = v6;
  v7 = v1[5];
  v15 = v1[4];
  v16 = v7;
  v8 = v1[1];
  v11 = *v1;
  v12 = v8;
  v10 = v2;
  return LayoutGestureBox.Child.binds(_:)(&v10) & 1;
}

Swift::Bool __swiftcall LayoutGestureChildProxy.Child.containsGlobalLocation(_:)(CGPoint a1)
{
  _OWORD *v1;
  CGFloat y;
  CGFloat x;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(int *, uint64_t, uint64_t, uint64_t *);
  uint64_t v14;
  int v15;
  _OWORD v16[11];
  _OWORD v17[2];

  y = a1.y;
  x = a1.x;
  v4 = v1[11];
  v16[10] = v1[10];
  v17[0] = v4;
  *(_OWORD *)((char *)v17 + 12) = *(_OWORD *)((char *)v1 + 188);
  v5 = v1[7];
  v16[6] = v1[6];
  v16[7] = v5;
  v6 = v1[9];
  v16[8] = v1[8];
  v16[9] = v6;
  v7 = v1[3];
  v16[2] = v1[2];
  v16[3] = v7;
  v8 = v1[5];
  v16[4] = v1[4];
  v16[5] = v8;
  v9 = v1[1];
  v16[0] = *v1;
  v16[1] = v9;
  v10 = *(_QWORD *)&v16[0];
  type metadata accessor for [(_:)](0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<CGPoint>, (uint64_t (*)(uint64_t))type metadata accessor for CGPoint, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
  v11 = swift_allocObject();
  *(_OWORD *)(v11 + 16) = xmmword_23527E860;
  *(CGFloat *)(v11 + 32) = x;
  *(CGFloat *)(v11 + 40) = y;
  v14 = 0;
  v12 = *(void (**)(int *, uint64_t, uint64_t, uint64_t *))(*(_QWORD *)v10 + 168);
  outlined retain of LayoutGestureBox.Child((uint64_t)v16);
  LOBYTE(v15) = 1;
  v12(&v15, v11, 0x100000000, &v14);
  swift_bridgeObjectRelease();
  outlined release of LayoutGestureBox.Child((uint64_t)v16);
  return v15 & 1;
}

uint64_t LayoutGestureChildProxy.startIndex.getter()
{
  return 0;
}

uint64_t LayoutGestureChildProxy.endIndex.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_beginAccess();
  return *(_QWORD *)(*(_QWORD *)(v1 + 160) + 16);
}

uint64_t LayoutGestureChildProxy.subscript.getter@<X0>(unint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t *v2;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  _OWORD *v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  _OWORD v24[11];
  _OWORD v25[2];

  v5 = *v2;
  result = swift_beginAccess();
  if ((a1 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else
  {
    v7 = *(_QWORD *)(v5 + 160);
    if (*(_QWORD *)(v7 + 16) > a1)
    {
      v8 = (_OWORD *)(v7 + 208 * a1);
      v24[0] = v8[2];
      v9 = v8[3];
      v10 = v8[4];
      v11 = v8[6];
      v24[3] = v8[5];
      v24[4] = v11;
      v24[1] = v9;
      v24[2] = v10;
      v12 = v8[7];
      v13 = v8[8];
      v14 = v8[10];
      v24[7] = v8[9];
      v24[8] = v14;
      v24[5] = v12;
      v24[6] = v13;
      v15 = v8[11];
      v16 = v8[12];
      v17 = v8[13];
      *(_OWORD *)((char *)v25 + 12) = *(_OWORD *)((char *)v8 + 220);
      v24[10] = v16;
      v25[0] = v17;
      v24[9] = v15;
      v18 = v8[13];
      a2[10] = v8[12];
      a2[11] = v18;
      *(_OWORD *)((char *)a2 + 188) = *(_OWORD *)((char *)v8 + 220);
      v19 = v8[9];
      a2[6] = v8[8];
      a2[7] = v19;
      v20 = v8[11];
      a2[8] = v8[10];
      a2[9] = v20;
      v21 = v8[5];
      a2[2] = v8[4];
      a2[3] = v21;
      v22 = v8[7];
      a2[4] = v8[6];
      a2[5] = v22;
      v23 = v8[3];
      *a2 = v8[2];
      a2[1] = v23;
      return outlined retain of LayoutGestureBox.Child((uint64_t)v24);
    }
  }
  __break(1u);
  return result;
}

uint64_t LayoutGestureChildProxy.bindChild(index:event:id:)@<X0>(unint64_t a1@<X0>, uint64_t a2@<X1>, Swift::UInt *a3@<X2>, __int128 *a4@<X8>)
{
  _QWORD *v4;
  Swift::UInt v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _OWORD *v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  uint64_t Strong;
  __int128 *v28;
  uint64_t result;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  Swift::UInt v33;
  uint64_t (*v34)(uint64_t);
  uint64_t v35;
  uint64_t v36;
  __int128 *v37;
  __int128 v38;
  uint64_t v39;
  Swift::UInt v40[5];
  __int128 v41;
  uint64_t v42;
  double v43;
  double v44;
  double v45;
  _OWORD v46[11];
  _OWORD v47[3];

  v8 = *a3;
  v9 = a3[1];
  v10 = *v4;
  v11 = *v4 + 160;
  swift_beginAccess();
  if ((a1 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_29;
  }
  v12 = *(_QWORD *)(v10 + 160);
  if (*(_QWORD *)(v12 + 16) <= a1)
  {
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  v13 = (_OWORD *)(v12 + 208 * a1);
  v46[0] = v13[2];
  v14 = v13[3];
  v15 = v13[4];
  v16 = v13[6];
  v46[3] = v13[5];
  v46[4] = v16;
  v46[1] = v14;
  v46[2] = v15;
  v17 = v13[7];
  v18 = v13[8];
  v19 = v13[10];
  v46[7] = v13[9];
  v46[8] = v19;
  v46[5] = v17;
  v46[6] = v18;
  v20 = v13[11];
  v21 = v13[12];
  v22 = v13[13];
  *(_OWORD *)((char *)v47 + 12) = *(_OWORD *)((char *)v13 + 220);
  v46[10] = v21;
  v47[0] = v22;
  v46[9] = v20;
  v23 = *(_QWORD *)&v46[0];
  outlined init with copy of AnyTrackedValue(a2, (uint64_t)v40);
  swift_retain_n();
  outlined retain of LayoutGestureBox.Child((uint64_t)v46);
  HitTestableEvent.init(_:)((uint64_t)v40, (uint64_t)&v41);
  v24 = v42;
  if (v42 == 1)
  {
    swift_release();
    outlined release of LayoutGestureBox.Child((uint64_t)v46);
  }
  else
  {
    v25 = v41;
    *(_QWORD *)&v41 = 0;
    v26 = ViewResponder.hitTest(globalPoint:radius:options:)((uint64_t *)&v41, v43, v44, v45);
    swift_release();
    outlined consume of HitTestableEvent?(v25, *((uint64_t *)&v25 + 1), v24);
    if (v26)
    {
      swift_release();
      outlined release of LayoutGestureBox.Child((uint64_t)v46);
      v23 = v26;
    }
    else
    {
      outlined release of LayoutGestureBox.Child((uint64_t)v46);
    }
  }
  Strong = swift_weakLoadStrong();
  if (!Strong)
    goto LABEL_10;
  v4 = (_QWORD *)Strong;
  v40[0] = v8;
  v40[1] = v9;
  swift_retain();
  EventBindingManager.rebindEvent(_:to:)(v40, v23, (uint64_t *)&v41);
  swift_release();
  swift_release();
  v28 = (__int128 *)v41;
  if ((_QWORD)v41 == 1)
  {
LABEL_10:
    result = swift_release();
    v30 = xmmword_235260EF0;
LABEL_11:
    *a4 = v30;
    return result;
  }
  v38 = v41;
  swift_retain();
  if (!v28)
  {
    result = swift_release();
    v30 = v38;
    goto LABEL_11;
  }
  v37 = a4;
  v31 = *(_QWORD *)(*(_QWORD *)v11 + 16);
  if (!v31)
  {
LABEL_22:
    swift_release();
    result = swift_release();
    a4 = v37;
    v30 = v38;
    goto LABEL_11;
  }
  v39 = v10;
  v8 = 0;
  while (v8 < *(_QWORD *)(*(_QWORD *)v11 + 16))
  {
    v9 = 208 * v8;
    a4 = *(__int128 **)(*(_QWORD *)v11 + 208 * v8 + 32);
    swift_retain_n();
    swift_retain();
    if (a4 == v28)
    {
LABEL_24:
      swift_release_n();
      swift_release_n();
      swift_beginAccess();
      v4 = *(_QWORD **)v11;
      result = swift_isUniquelyReferenced_nonNull_native();
      *(_QWORD *)v11 = v4;
      a4 = v37;
      if ((result & 1) == 0)
        goto LABEL_31;
      goto LABEL_25;
    }
    v32 = v11;
    v33 = v8 + 1;
    v4 = v28;
    while (1)
    {
      v34 = *(uint64_t (**)(uint64_t))(*v4 + 88);
      v35 = swift_retain();
      v36 = v34(v35);
      swift_retain();
      swift_release_n();
      if (!v36)
        break;
      swift_release();
      v4 = (_QWORD *)v36;
      if (a4 == (__int128 *)v36)
      {
        v11 = v32;
        goto LABEL_24;
      }
    }
    swift_release();
    swift_release_n();
    ++v8;
    v11 = v32;
    if (v33 == v31)
      goto LABEL_22;
  }
LABEL_30:
  __break(1u);
LABEL_31:
  result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v4);
  v4 = (_QWORD *)result;
  *(_QWORD *)v11 = result;
LABEL_25:
  if (v8 < v4[2])
  {
    ++*(_DWORD *)((char *)v4 + v9 + 44);
    swift_endAccess();
    swift_release();
    result = swift_release();
    ++*(_DWORD *)(v39 + 172);
    v30 = v38;
    goto LABEL_11;
  }
  __break(1u);
  return result;
}

_QWORD *protocol witness for BidirectionalCollection.index(before:) in conformance LayoutGestureChildProxy@<X0>(_QWORD *result@<X0>, unint64_t *a2@<X8>)
{
  uint64_t *v2;
  unint64_t v4;
  uint64_t v5;

  v4 = *result - 1;
  if (__OFSUB__(*result, 1))
  {
    __break(1u);
  }
  else
  {
    v5 = *v2;
    result = (_QWORD *)swift_beginAccess();
    if (v4 < *(_QWORD *)(*(_QWORD *)(v5 + 160) + 16))
    {
      *a2 = v4;
      return result;
    }
  }
  __break(1u);
  return result;
}

unint64_t *protocol witness for BidirectionalCollection.formIndex(before:) in conformance LayoutGestureChildProxy(unint64_t *result)
{
  uint64_t *v1;
  unint64_t v2;
  unint64_t *v3;
  uint64_t v4;

  v2 = *result - 1;
  if (__OFSUB__(*result, 1))
  {
    __break(1u);
  }
  else
  {
    v3 = result;
    v4 = *v1;
    result = (unint64_t *)swift_beginAccess();
    if (v2 < *(_QWORD *)(*(_QWORD *)(v4 + 160) + 16))
    {
      *v3 = v2;
      return result;
    }
  }
  __break(1u);
  return result;
}

uint64_t protocol witness for BidirectionalCollection.distance(from:to:) in conformance LayoutGestureChildProxy(unint64_t *a1, unint64_t *a2)
{
  return specialized RandomAccessCollection<>.distance(from:to:)(*a1, *a2);
}

uint64_t protocol witness for Collection.endIndex.getter in conformance LayoutGestureChildProxy@<X0>(_QWORD *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t result;

  v3 = *v1;
  result = swift_beginAccess();
  *a1 = *(_QWORD *)(*(_QWORD *)(v3 + 160) + 16);
  return result;
}

void (*protocol witness for Collection.subscript.read in conformance LayoutGestureChildProxy(_QWORD *a1, unint64_t *a2))(_QWORD *a1)
{
  _QWORD *v4;

  v4 = malloc(0x28uLL);
  *a1 = v4;
  v4[4] = LayoutGestureChildProxy.subscript.read(v4, *a2);
  return protocol witness for Animatable.animatableData.modify in conformance LinearGradient._Paint;
}

void (*LayoutGestureChildProxy.subscript.read(_QWORD *a1, unint64_t a2))(_OWORD **a1)
{
  uint64_t *v2;
  _OWORD *v5;
  uint64_t v6;
  void (*result)(_OWORD **);
  uint64_t v8;
  _OWORD *v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;

  v5 = malloc(0x288uLL);
  *a1 = v5;
  v6 = *v2;
  result = (void (*)(_OWORD **))swift_beginAccess();
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else
  {
    v8 = *(_QWORD *)(v6 + 160);
    if (*(_QWORD *)(v8 + 16) > a2)
    {
      v9 = (_OWORD *)(v8 + 208 * a2);
      *v5 = v9[2];
      v10 = v9[3];
      v11 = v9[4];
      v12 = v9[6];
      v5[3] = v9[5];
      v5[4] = v12;
      v5[1] = v10;
      v5[2] = v11;
      v13 = v9[7];
      v14 = v9[8];
      v15 = v9[10];
      v5[7] = v9[9];
      v5[8] = v15;
      v5[5] = v13;
      v5[6] = v14;
      v16 = v9[11];
      v17 = v9[12];
      v18 = v9[13];
      *(_OWORD *)((char *)v5 + 188) = *(_OWORD *)((char *)v9 + 220);
      v5[10] = v17;
      v5[11] = v18;
      v5[9] = v16;
      memmove(v5 + 13, v9 + 2, 0xCCuLL);
      outlined retain of LayoutGestureBox.Child((uint64_t)v5);
      return LayoutGestureChildProxy.subscript.read;
    }
  }
  __break(1u);
  return result;
}

void LayoutGestureChildProxy.subscript.read(_OWORD **a1)
{
  _OWORD *v1;
  uint64_t v2;
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;

  v1 = *a1;
  v2 = (uint64_t)(*a1 + 13);
  v3 = (uint64_t)(*a1 + 26);
  v4 = v1[24];
  v1[36] = v1[23];
  v1[37] = v4;
  v5 = v1[20];
  v1[32] = v1[19];
  v1[33] = v5;
  v6 = v1[22];
  v1[34] = v1[21];
  v1[35] = v6;
  v7 = v1[16];
  v1[28] = v1[15];
  v1[29] = v7;
  v8 = v1[18];
  v1[30] = v1[17];
  v1[31] = v8;
  v9 = v1[14];
  v1[26] = v1[13];
  v1[27] = v9;
  *(_OWORD *)(v3 + 188) = *(_OWORD *)(v2 + 188);
  outlined release of LayoutGestureBox.Child(v3);
  free(v1);
}

uint64_t protocol witness for Collection.subscript.getter in conformance LayoutGestureChildProxy@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  v4 = *a1;
  v5 = a1[1];
  v6 = *v2;
  result = swift_beginAccess();
  if (v4 < 0 || *(_QWORD *)(*(_QWORD *)(v6 + 160) + 16) < v5)
  {
    __break(1u);
  }
  else
  {
    a2[1] = v5;
    a2[2] = v6;
    *a2 = v4;
    return swift_retain();
  }
  return result;
}

uint64_t protocol witness for Collection.indices.getter in conformance LayoutGestureChildProxy@<X0>(_QWORD *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;

  v3 = *v1;
  result = swift_beginAccess();
  v5 = *(_QWORD *)(*(_QWORD *)(v3 + 160) + 16);
  *a1 = 0;
  a1[1] = v5;
  return result;
}

BOOL protocol witness for Collection.isEmpty.getter in conformance LayoutGestureChildProxy()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_beginAccess();
  return *(_QWORD *)(*(_QWORD *)(v1 + 160) + 16) == 0;
}

_QWORD *protocol witness for RandomAccessCollection.index(_:offsetBy:) in conformance LayoutGestureChildProxy@<X0>(_QWORD *result@<X0>, uint64_t a2@<X1>, unint64_t *a3@<X8>)
{
  uint64_t *v3;
  unint64_t v5;
  uint64_t v6;

  v5 = *result + a2;
  if (__OFADD__(*result, a2))
  {
    __break(1u);
  }
  else
  {
    v6 = *v3;
    result = (_QWORD *)swift_beginAccess();
    if (v5 <= *(_QWORD *)(*(_QWORD *)(v6 + 160) + 16))
    {
      *a3 = v5;
      return result;
    }
  }
  __break(1u);
  return result;
}

unint64_t protocol witness for RandomAccessCollection.index(_:offsetBy:limitedBy:) in conformance LayoutGestureChildProxy@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X1>, unint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  unint64_t result;
  char v6;

  result = specialized RandomAccessCollection.index(_:offsetBy:limitedBy:)(*a1, a2, *a3);
  *(_QWORD *)a4 = result;
  *(_BYTE *)(a4 + 8) = v6 & 1;
  return result;
}

uint64_t protocol witness for Collection.index(after:) in conformance LayoutGestureChildProxy@<X0>(unint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t *v2;
  unint64_t v4;
  uint64_t v5;
  uint64_t result;

  v4 = *a1;
  v5 = *v2;
  result = swift_beginAccess();
  if (v4 >= *(_QWORD *)(*(_QWORD *)(v5 + 160) + 16))
    __break(1u);
  else
    *a2 = v4 + 1;
  return result;
}

uint64_t protocol witness for Collection.formIndex(after:) in conformance LayoutGestureChildProxy(unint64_t *a1)
{
  uint64_t *v1;
  unint64_t v3;
  uint64_t v4;
  uint64_t result;

  v3 = *a1;
  v4 = *v1;
  result = swift_beginAccess();
  if (v3 >= *(_QWORD *)(*(_QWORD *)(v4 + 160) + 16))
    __break(1u);
  else
    *a1 = v3 + 1;
  return result;
}

uint64_t protocol witness for Sequence.underestimatedCount.getter in conformance LayoutGestureChildProxy()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_beginAccess();
  return *(_QWORD *)(*(_QWORD *)(v1 + 160) + 16);
}

_OWORD *protocol witness for Sequence._copyToContiguousArray() in conformance LayoutGestureChildProxy()
{
  _QWORD *v0;
  _OWORD *v1;

  v1 = specialized _copyCollectionToContiguousArray<A>(_:)(v0);
  swift_release();
  return v1;
}

void protocol witness for static Rule.initialValue.getter in conformance UpdateLayoutGestureBox<A>(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_DWORD *)(a1 + 8) = 0;
}

uint64_t protocol witness for Rule.value.getter in conformance UpdateLayoutGestureBox<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  int v4;

  *(_QWORD *)a2 = specialized UpdateLayoutGestureBox.value.getter(*(_QWORD *)v2, *(unsigned int *)(v2 + 8), *(_QWORD *)(v2 + 16), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24));
  *(_DWORD *)(a2 + 8) = v4;
  return swift_retain();
}

uint64_t LayoutChildEvents.value.getter(uint64_t a1)
{
  int v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t i;

  v1 = HIDWORD(a1);
  v2 = *(_QWORD *)AGGraphGetValue();
  swift_beginAccess();
  v3 = *(_QWORD *)(v2 + 160);
  v4 = *(_QWORD *)(v3 + 16);
  if (!v4)
    return specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  for (i = v3 + 64; *(_DWORD *)(i - 24) != v1; i += 208)
  {
    if (!--v4)
      return specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  }
  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for Rule.value.getter in conformance LayoutChildEvents<A>@<X0>(uint64_t *a1@<X8>)
{
  uint64_t *v1;
  uint64_t result;

  result = LayoutChildEvents.value.getter(*v1);
  *a1 = result;
  return result;
}

uint64_t LayoutChildSeed.value.getter(uint64_t a1)
{
  int v1;
  uint64_t Value;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  int *v7;
  int v8;

  v1 = HIDWORD(a1);
  Value = AGGraphGetValue();
  v3 = *(_QWORD *)Value;
  v4 = *(_DWORD *)(*(_QWORD *)Value + 176);
  swift_beginAccess();
  v5 = *(_QWORD *)(v3 + 160);
  v6 = *(_QWORD *)(v5 + 16);
  if (v6)
  {
    v7 = (int *)(v5 + 44);
    while (*(v7 - 1) != v1)
    {
      v7 += 52;
      if (!--v6)
        goto LABEL_5;
    }
    v8 = *v7;
  }
  else
  {
LABEL_5:
    v8 = 0x10000;
  }
  return (v8 + v4);
}

uint64_t protocol witness for Rule.value.getter in conformance LayoutChildSeed<A>@<X0>(_DWORD *a1@<X8>)
{
  uint64_t *v1;
  uint64_t result;

  result = LayoutChildSeed.value.getter(*v1);
  *a1 = result;
  return result;
}

uint64_t LayoutPhase.value.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _WORD *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t Value;
  void (*v9)(char *, uint64_t, uint64_t);
  uint64_t v10;
  void (*v11)(char *, uint64_t);
  __int16 v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;
  __int16 v16;

  v5 = *(_QWORD *)(a2 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  AGGraphGetValue();
  Value = AGGraphGetValue();
  v9 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v9(v7, Value, a2);
  v10 = swift_retain();
  specialized LayoutGesture.phase(box:)(v10, &v16);
  v11 = *(void (**)(char *, uint64_t))(v5 + 8);
  v11(v7, a2);
  v12 = v16;
  v13 = AGGraphGetValue();
  v9(v7, v13, a2);
  specialized LayoutGestureBox.resetTerminalChildren<A>(gesture:)();
  swift_release();
  result = ((uint64_t (*)(char *, uint64_t))v11)(v7, a2);
  *a3 = v12;
  return result;
}

uint64_t protocol witness for Rule.value.getter in conformance LayoutPhase<A>@<X0>(uint64_t a1@<X0>, _WORD *a2@<X8>)
{
  uint64_t *v2;

  return LayoutPhase.value.getter(*v2, *(_QWORD *)(a1 + 16), a2);
}

void CombinePreferenceVisitor.visit<A>(key:)()
{
  swift_getAssociatedTypeWitness();
  type metadata accessor for LayoutGesturePreferenceCombiner();
}

void sub_2350B30E4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v9[5];
  unsigned int v10;

  v9[3] = a1;
  v9[4] = MEMORY[0x23B7C9C04](&protocol conformance descriptor for LayoutGesturePreferenceCombiner<A, B>, a1);
  v4 = type metadata accessor for Attribute();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v8, (uint64_t)partial apply for closure #1 in Attribute.init<A>(_:), (uint64_t)v9, a1, MEMORY[0x24BEE4078], v4, MEMORY[0x24BEE40A8], v5);
  v6 = v10;
  type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for _GestureOutputs<()>, MEMORY[0x24BEE4AE0] + 8, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for _GestureOutputs);
  LOBYTE(v10) = 0;
  _GestureOutputs.subscript.setter(v6, v2, v7, v2, v1);
}

void protocol witness for PreferenceKeyVisitor.visit<A>(key:) in conformance CombinePreferenceVisitor<A>()
{
  CombinePreferenceVisitor.visit<A>(key:)();
}

uint64_t static LayoutGesturePreferenceCombiner.initialValue.getter@<X0>(uint64_t a1@<X1>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t AssociatedTypeWitness;

  (*(void (**)(uint64_t, uint64_t))(a2 + 16))(a1, a2);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 56))(a3, 0, 1, AssociatedTypeWitness);
}

uint64_t LayoutGesturePreferenceCombiner.value.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t Value;
  uint64_t v15;
  uint64_t v17;

  v11 = *(_QWORD *)(a2 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v13 = (char *)&v17 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  Value = AGGraphGetValue();
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, Value, a2);
  v15 = *(_QWORD *)AGGraphGetValue();
  swift_retain();
  LayoutGesture.preferenceValue<A>(key:box:)(a3, v15, a2, a3, a4, a5, a6);
  swift_release();
  return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v13, a2);
}

uint64_t protocol witness for static Rule.initialValue.getter in conformance LayoutGesturePreferenceCombiner<A, B>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return static LayoutGesturePreferenceCombiner.initialValue.getter(*(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 40), a2);
}

uint64_t protocol witness for Rule.value.getter in conformance LayoutGesturePreferenceCombiner<A, B>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;

  return LayoutGesturePreferenceCombiner.value.getter(*v2, a1[2], a1[3], a1[4], a1[5], a2);
}

uint64_t protocol witness for static _AttributeBody._updateDefault(_:) in conformance LayoutGesturePreferenceCombiner<A, B>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t AssociatedTypeWitness;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v15;
  double v16;
  uint64_t v17;
  _QWORD v18[2];

  v18[1] = *MEMORY[0x24BDAC8D0];
  v3 = *(_QWORD *)(a2 + 40);
  v4 = *(_QWORD *)(a2 + 24);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v6 = type metadata accessor for Optional();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)v18 - v8;
  v10 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)v18 - v12;
  static LayoutGesturePreferenceCombiner.initialValue.getter(v4, v3, (uint64_t)v9);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v9, 1, AssociatedTypeWitness) == 1)
    return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  v15 = (*(uint64_t (**)(char *, char *, uint64_t))(v10 + 32))(v13, v9, AssociatedTypeWitness);
  v16 = MEMORY[0x24BDAC7A8](v15);
  v18[-2] = a2;
  v18[-1] = MEMORY[0x23B7C9C04](&protocol conformance descriptor for LayoutGesturePreferenceCombiner<A, B>, a2, v16);
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v13, (uint64_t)partial apply for closure #1 in static Rule._updateDefault(_:), (uint64_t)&v18[-4], AssociatedTypeWitness, MEMORY[0x24BEE4078], MEMORY[0x24BEE4AE0] + 8, MEMORY[0x24BEE40A8], v17);
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v13, AssociatedTypeWitness);
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance LayoutGesturePreferenceCombiner<A, B>(uint64_t a1)
{
  MEMORY[0x23B7C9C04](&protocol conformance descriptor for LayoutGesturePreferenceCombiner<A, B>, a1);
  return static AsyncAttribute.flags.getter();
}

double LayoutDebug.value.getter@<D0>(unint64_t a1@<X1>, uint64_t a2@<X4>, uint64_t a3@<X8>)
{
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t (*v11)(void);
  uint64_t i;
  __int128 *Value;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  char v20;
  uint64_t v21;
  char v22;
  char v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  _QWORD *v29;
  int v30;
  uint64_t v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  __int16 v40;
  int v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  double result;
  int v47;
  uint64_t v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  uint64_t v55;
  _BYTE v56[7];
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  uint64_t v66;
  uint64_t v67;
  double __src[37];
  unint64_t v69[5];
  char v70;
  char v71;

  v5 = HIDWORD(a1);
  v6 = *(_QWORD *)AGGraphGetValue();
  swift_beginAccess();
  v7 = *(_QWORD *)(v6 + 160);
  v8 = *(_QWORD *)(v7 + 16);
  if (v8)
  {
    v47 = v5;
    v48 = a3;
    v9 = v7 + 80;
    swift_bridgeObjectRetain_n();
    v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
    v11 = MEMORY[0x24BEE1C68];
    for (i = v8 - 1; ; --i)
    {
      outlined init with take of Image.ResizingInfo?(v9, (uint64_t)v69, &lazy cache variable for type metadata for LayoutGestureBox.Child.DebugData?, (uint64_t)&type metadata for LayoutGestureBox.Child.DebugData, (uint64_t (*)(_QWORD, uint64_t))v11);
      outlined init with take of Image.ResizingInfo?((uint64_t)v69, (uint64_t)__src, &lazy cache variable for type metadata for LayoutGestureBox.Child.DebugData?, (uint64_t)&type metadata for LayoutGestureBox.Child.DebugData, (uint64_t (*)(_QWORD, uint64_t))v11);
      if (_s7SwiftUI16LayoutGestureBox33_05F3243F43C616B77CCF383885E80E96LLC5ChildV9DebugDataOSgWOg((uint64_t)__src) != 1)
      {
        outlined init with take of LayoutGestureBox.Child.DebugData((uint64_t)__src, (uint64_t)&v66);
        if (_s7SwiftUI16LayoutGestureBox33_05F3243F43C616B77CCF383885E80E96LLC5ChildV9DebugDataOWOg((uint64_t)&v66) == 1)
        {
          _s7SwiftUI16LayoutGestureBox33_05F3243F43C616B77CCF383885E80E96LLC5ChildV9DebugDataOWOj0_((uint64_t)&v66);
          Value = (__int128 *)AGGraphGetValue();
          v57 = *Value;
          v14 = Value[4];
          v16 = Value[1];
          v15 = Value[2];
          v60 = Value[3];
          v61 = v14;
          v58 = v16;
          v59 = v15;
          v17 = Value[7];
          v19 = Value[5];
          v18 = Value[6];
          v65 = Value[8];
          v63 = v18;
          v64 = v17;
          v62 = v19;
          outlined retain of GestureDebug.Data((uint64_t)&v57);
          outlined release of LayoutGestureBox.Child.DebugData?(v69);
          v55 = *((_QWORD *)&v65 + 1);
          v53 = v62;
          v54 = v61;
          v51 = v64;
          v52 = v63;
          v20 = v65;
          v49 = v60;
          v50 = v59;
          v21 = *(_QWORD *)((char *)&v58 + 4);
          v22 = v58;
          v23 = BYTE1(v58);
          v24 = *((_QWORD *)&v57 + 1);
          v25 = v57;
        }
        else
        {
          v26 = _s7SwiftUI16LayoutGestureBox33_05F3243F43C616B77CCF383885E80E96LLC5ChildV9DebugDataOWOj0_((uint64_t)&v66);
          v55 = *(_QWORD *)(v26 + 136);
          v53 = *(_OWORD *)(v26 + 80);
          v54 = *(_OWORD *)(v26 + 64);
          v51 = *(_OWORD *)(v26 + 112);
          v52 = *(_OWORD *)(v26 + 96);
          v20 = *(_BYTE *)(v26 + 128);
          v49 = *(_OWORD *)(v26 + 48);
          v50 = *(_OWORD *)(v26 + 32);
          v21 = *(_QWORD *)(v26 + 20);
          v22 = *(_BYTE *)(v26 + 16);
          v23 = *(_BYTE *)(v26 + 17);
          v24 = *(_QWORD *)(v26 + 8);
          v25 = *(_BYTE *)v26;
          outlined init with take of Image.ResizingInfo?((uint64_t)v69, (uint64_t)&v57, &lazy cache variable for type metadata for LayoutGestureBox.Child.DebugData?, (uint64_t)&type metadata for LayoutGestureBox.Child.DebugData, (uint64_t (*)(_QWORD, uint64_t))v11);
          outlined retain of LayoutGestureBox.Child.DebugData((uint64_t *)&v57);
        }
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v10[2] + 1, 1, v10);
        v28 = v10[2];
        v27 = v10[3];
        if (v28 >= v27 >> 1)
          v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v27 > 1), v28 + 1, 1, v10);
        v10[2] = v28 + 1;
        v29 = &v10[18 * v28];
        *((_BYTE *)v29 + 32) = v25;
        v30 = *(_DWORD *)((char *)&v57 + 3);
        *(_DWORD *)((char *)v29 + 33) = v57;
        *((_DWORD *)v29 + 9) = v30;
        v29[5] = v24;
        *((_BYTE *)v29 + 48) = v22;
        *((_BYTE *)v29 + 49) = v23;
        *(_QWORD *)((char *)v29 + 52) = v21;
        *((_OWORD *)v29 + 4) = v50;
        *((_OWORD *)v29 + 5) = v49;
        *((_OWORD *)v29 + 6) = v54;
        *((_OWORD *)v29 + 7) = v53;
        *((_OWORD *)v29 + 8) = v52;
        *((_OWORD *)v29 + 9) = v51;
        *((_BYTE *)v29 + 160) = v20;
        *((_DWORD *)v29 + 41) = *(_DWORD *)&v56[3];
        *(_DWORD *)((char *)v29 + 161) = *(_DWORD *)v56;
        v29[21] = v55;
        v11 = MEMORY[0x24BEE1C68];
      }
      if (!i)
        break;
      v9 += 208;
    }
    swift_bridgeObjectRelease_n();
    a3 = v48;
    LODWORD(v5) = v47;
  }
  else
  {
    v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  v31 = AGGraphGetValue();
  v32 = *(double *)v31;
  v33 = *(double *)(v31 + 8);
  v34 = *(double *)(v31 + 16);
  v35 = *(double *)(v31 + 24);
  v36 = *(double *)(v31 + 32);
  swift_retain();
  memset(v69, 0, sizeof(v69));
  v70 = 2;
  v71 = 2;
  v37 = (uint64_t *)AGGraphGetValue();
  v38 = *v37;
  v39 = v37[1];
  if (v32 != 0.0 || v35 != 0.0 || v36 != 0.0)
  {
    v66 = *v37;
    v67 = v39;
    __src[0] = v32;
    __src[1] = v33;
    __src[2] = v34;
    __src[3] = v35;
    __src[4] = v36;
    specialized ViewTransform.convert(_:_:)((uint64_t)v69, (uint64_t)__src);
    v38 = v66;
    v39 = v67;
  }
  outlined destroy of ViewTransform.Conversion((uint64_t)v69);
  swift_release();
  specialized ArrayWith2Inline.init<A>(_:)((uint64_t)v10, __src);
  type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for GesturePhase<()>, MEMORY[0x24BEE4AE0] + 8, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for GesturePhase);
  v40 = *(_WORD *)AGGraphGetValue();
  v41 = *(_DWORD *)AGGraphGetValue();
  v42 = (uint64_t *)AGGraphGetValue();
  v43 = *v42;
  v44 = v42[1];
  v45 = swift_allocObject();
  memcpy((void *)(v45 + 16), __src, 0x121uLL);
  *(_BYTE *)a3 = 4;
  *(_DWORD *)(a3 + 1) = v66;
  *(_DWORD *)(a3 + 4) = *(_DWORD *)((char *)&v66 + 3);
  *(_QWORD *)(a3 + 8) = a2;
  *(_WORD *)(a3 + 16) = v40;
  *(_DWORD *)(a3 + 20) = v5;
  *(_DWORD *)(a3 + 24) = v41;
  *(_QWORD *)(a3 + 32) = v38;
  *(_QWORD *)(a3 + 40) = v39;
  *(_QWORD *)(a3 + 48) = v43;
  *(_QWORD *)(a3 + 56) = v44;
  result = 0.0;
  *(_OWORD *)(a3 + 64) = 0u;
  *(_OWORD *)(a3 + 80) = 0u;
  *(_OWORD *)(a3 + 96) = 0u;
  *(_OWORD *)(a3 + 112) = 0u;
  *(_BYTE *)(a3 + 128) = 3;
  *(_DWORD *)(a3 + 129) = v57;
  *(_DWORD *)(a3 + 132) = *(_DWORD *)((char *)&v57 + 3);
  *(_QWORD *)(a3 + 136) = v45;
  return result;
}

double protocol witness for Rule.value.getter in conformance LayoutDebug<A>@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return LayoutDebug.value.getter(*(_QWORD *)(v2 + 8), *(_QWORD *)(a1 + 16), a2);
}

uint64_t type metadata accessor for LayoutGestureBox()
{
  return objc_opt_self();
}

uint64_t type metadata accessor for UpdateLayoutGestureBox(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for UpdateLayoutGestureBox);
}

uint64_t _s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TA_14@<X0>(_DWORD *a1@<X8>)
{
  return closure #1 in Attribute.init<A>(_:)(a1);
}

uint64_t type metadata accessor for LayoutPhase(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for LayoutPhase);
}

void type metadata accessor for Attribute<GesturePhase<()>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for Attribute<GesturePhase<()>>)
  {
    type metadata accessor for MutableBox<CachedEnvironment>(255, (unint64_t *)&lazy cache variable for type metadata for GesturePhase<()>, MEMORY[0x24BEE4AE0] + 8, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for GesturePhase);
    v0 = type metadata accessor for Attribute();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Attribute<GesturePhase<()>>);
  }
}

uint64_t type metadata accessor for CombinePreferenceVisitor(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for CombinePreferenceVisitor);
}

uint64_t specialized UnsafeBufferPointer._copyContents(initializing:)(unint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t result;

  v4 = a3;
  if (!a4 || !a2)
    return v4;
  if (a4 >= a2)
    v5 = a2;
  else
    v5 = a4;
  if ((v5 & 0x8000000000000000) == 0 && (a1 + 32 * v5 <= a3 || a3 + 32 * v5 <= a1))
  {
    type metadata accessor for (String, String)();
    swift_arrayInitWithCopy();
    v4 += 32 * v5;
    return v4;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t type metadata accessor for LayoutDebug(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for LayoutDebug);
}

unint64_t lazy protocol witness table accessor for type LayoutGestureChildProxy and conformance LayoutGestureChildProxy()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type LayoutGestureChildProxy and conformance LayoutGestureChildProxy;
  if (!lazy protocol witness table cache variable for type LayoutGestureChildProxy and conformance LayoutGestureChildProxy)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for LayoutGestureChildProxy, &type metadata for LayoutGestureChildProxy);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LayoutGestureChildProxy and conformance LayoutGestureChildProxy);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type LayoutGestureChildProxy and conformance LayoutGestureChildProxy;
  if (!lazy protocol witness table cache variable for type LayoutGestureChildProxy and conformance LayoutGestureChildProxy)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for LayoutGestureChildProxy, &type metadata for LayoutGestureChildProxy);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LayoutGestureChildProxy and conformance LayoutGestureChildProxy);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type LayoutGestureChildProxy and conformance LayoutGestureChildProxy;
  if (!lazy protocol witness table cache variable for type LayoutGestureChildProxy and conformance LayoutGestureChildProxy)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for LayoutGestureChildProxy, &type metadata for LayoutGestureChildProxy);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LayoutGestureChildProxy and conformance LayoutGestureChildProxy);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type LayoutGestureChildProxy and conformance LayoutGestureChildProxy;
  if (!lazy protocol witness table cache variable for type LayoutGestureChildProxy and conformance LayoutGestureChildProxy)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for LayoutGestureChildProxy, &type metadata for LayoutGestureChildProxy);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LayoutGestureChildProxy and conformance LayoutGestureChildProxy);
  }
  return result;
}

uint64_t associated type witness table accessor for Collection.SubSequence : RandomAccessCollection in LayoutGestureChildProxy()
{
  return lazy protocol witness table accessor for type Slice<LayoutGestureChildProxy> and conformance <> Slice<A>(&lazy protocol witness table cache variable for type Slice<LayoutGestureChildProxy> and conformance <> Slice<A>, (uint64_t (*)(void))lazy protocol witness table accessor for type LayoutGestureChildProxy and conformance LayoutGestureChildProxy, MEMORY[0x24BEE4230]);
}

uint64_t associated type witness table accessor for Collection.SubSequence : BidirectionalCollection in LayoutGestureChildProxy()
{
  return lazy protocol witness table accessor for type Slice<LayoutGestureChildProxy> and conformance <> Slice<A>(&lazy protocol witness table cache variable for type Slice<LayoutGestureChildProxy> and conformance <> Slice<A>, (uint64_t (*)(void))lazy protocol witness table accessor for type LayoutGestureChildProxy and conformance LayoutGestureChildProxy, MEMORY[0x24BEE4218]);
}

uint64_t lazy protocol witness table accessor for type Slice<LayoutGestureChildProxy> and conformance <> Slice<A>(unint64_t *a1, uint64_t (*a2)(void), uint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  result = *a1;
  if (!result)
  {
    type metadata accessor for Slice<LayoutGestureChildProxy>(255, &lazy cache variable for type metadata for Slice<LayoutGestureChildProxy>, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x24BEE41D8]);
    v8 = v7;
    v9 = a2();
    result = MEMORY[0x23B7C9C04](a3, v8, &v9);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t associated type witness table accessor for Collection.SubSequence : Collection in LayoutGestureChildProxy()
{
  return lazy protocol witness table accessor for type Slice<LayoutGestureChildProxy> and conformance Slice<A>(&lazy protocol witness table cache variable for type Slice<LayoutGestureChildProxy> and conformance Slice<A>, &lazy cache variable for type metadata for Slice<LayoutGestureChildProxy>, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x24BEE41D8], MEMORY[0x24BEE4238]);
}

uint64_t associated type witness table accessor for Sequence.Iterator : IteratorProtocol in LayoutGestureChildProxy()
{
  return lazy protocol witness table accessor for type Slice<LayoutGestureChildProxy> and conformance Slice<A>(&lazy protocol witness table cache variable for type IndexingIterator<LayoutGestureChildProxy> and conformance IndexingIterator<A>, &lazy cache variable for type metadata for IndexingIterator<LayoutGestureChildProxy>, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x24BEE2C00], MEMORY[0x24BEE2C18]);
}

uint64_t lazy protocol witness table accessor for type Slice<LayoutGestureChildProxy> and conformance Slice<A>(unint64_t *a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, unint64_t), uint64_t a4)
{
  uint64_t result;
  uint64_t v7;

  result = *a1;
  if (!result)
  {
    type metadata accessor for Slice<LayoutGestureChildProxy>(255, a2, a3);
    result = MEMORY[0x23B7C9C04](a4, v7);
    atomic_store(result, a1);
  }
  return result;
}

void type metadata accessor for Slice<LayoutGestureChildProxy>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, unint64_t))
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    v6 = lazy protocol witness table accessor for type LayoutGestureChildProxy and conformance LayoutGestureChildProxy();
    v7 = a3(a1, &type metadata for LayoutGestureChildProxy, v6);
    if (!v8)
      atomic_store(v7, a2);
  }
}

uint64_t dispatch thunk of LayoutGesture.responder.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of LayoutGesture.updateEventBindings(_:proxy:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 32))();
}

ValueMetadata *type metadata accessor for DefaultLayoutGesture()
{
  return &type metadata for DefaultLayoutGesture;
}

ValueMetadata *type metadata accessor for LayoutGestureChildProxy()
{
  return &type metadata for LayoutGestureChildProxy;
}

uint64_t *outlined destroy of LayoutGestureBox.Child.DebugData(uint64_t *a1)
{
  destroy for LayoutGestureBox.Child.DebugData(a1);
  return a1;
}

__n128 __swift_memcpy204_8(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __n128 result;
  __int128 v9;
  __int128 v10;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v2 = *(_OWORD *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(_OWORD *)(a1 + 16) = v2;
  *(_OWORD *)(a1 + 32) = v3;
  v5 = *(_OWORD *)(a2 + 80);
  v6 = *(_OWORD *)(a2 + 96);
  v7 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = v7;
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + 96) = v6;
  result = *(__n128 *)(a2 + 144);
  v9 = *(_OWORD *)(a2 + 160);
  v10 = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 188) = *(_OWORD *)(a2 + 188);
  *(_OWORD *)(a1 + 160) = v9;
  *(_OWORD *)(a1 + 176) = v10;
  *(__n128 *)(a1 + 144) = result;
  return result;
}

ValueMetadata *type metadata accessor for LayoutGestureChildProxy.Child()
{
  return &type metadata for LayoutGestureChildProxy.Child;
}

uint64_t destroy for LayoutGestureBox.Child.DebugData(uint64_t *a1)
{
  return outlined consume of LayoutGestureBox.Child.DebugData(*a1, a1[1], a1[2], a1[3], a1[4], a1[5], a1[6], a1[7], a1[8], a1[9], a1[10], a1[11], a1[12], a1[13], a1[14], a1[15], a1[16], a1[17]);
}

uint64_t *initializeWithCopy for LayoutGestureBox.Child.DebugData(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v3 = *a2;
  v4 = a2[1];
  v5 = a2[2];
  v6 = a2[3];
  v7 = a2[4];
  v8 = a2[5];
  v9 = a2[6];
  v10 = a2[7];
  v11 = a2[8];
  v13 = a2[9];
  v14 = a2[10];
  v15 = a2[11];
  v16 = a2[12];
  v17 = a2[13];
  v18 = a2[14];
  v19 = a2[15];
  v20 = a2[16];
  v21 = a2[17];
  outlined copy of LayoutGestureBox.Child.DebugData(*a2, v4, v5, v6, v7, v8, v9, v10, v11, v13, v14, v15, v16, v17, v18, v19, v20, v21);
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v5;
  a1[3] = v6;
  a1[4] = v7;
  a1[5] = v8;
  a1[6] = v9;
  a1[7] = v10;
  a1[8] = v11;
  a1[9] = v13;
  a1[10] = v14;
  a1[11] = v15;
  a1[12] = v16;
  a1[13] = v17;
  a1[14] = v18;
  a1[15] = v19;
  a1[16] = v20;
  a1[17] = v21;
  return a1;
}

uint64_t assignWithCopy for LayoutGestureBox.Child.DebugData(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v3 = *a2;
  v4 = a2[1];
  v5 = a2[2];
  v6 = a2[3];
  v7 = a2[4];
  v8 = a2[5];
  v9 = a2[6];
  v10 = a2[7];
  v11 = a2[8];
  v27 = a2[9];
  v28 = a2[10];
  v29 = a2[11];
  v30 = a2[12];
  v31 = a2[13];
  v32 = a2[14];
  v33 = a2[15];
  v34 = a2[16];
  v35 = a2[17];
  outlined copy of LayoutGestureBox.Child.DebugData(*a2, v4, v5, v6, v7, v8, v9, v10, v11, v27, v28, v29, v30, v31, v32, v33, v34, v35);
  v12 = *(_QWORD *)a1;
  v13 = *(_QWORD *)(a1 + 8);
  v14 = *(_QWORD *)(a1 + 16);
  v15 = *(_QWORD *)(a1 + 24);
  v16 = *(_QWORD *)(a1 + 32);
  v17 = *(_QWORD *)(a1 + 40);
  v18 = *(_QWORD *)(a1 + 48);
  v19 = *(_QWORD *)(a1 + 56);
  v20 = *(_OWORD *)(a1 + 64);
  v21 = *(_OWORD *)(a1 + 80);
  v22 = *(_OWORD *)(a1 + 96);
  v23 = *(_OWORD *)(a1 + 112);
  v24 = *(_QWORD *)(a1 + 128);
  v25 = *(_QWORD *)(a1 + 136);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_QWORD *)(a1 + 32) = v7;
  *(_QWORD *)(a1 + 40) = v8;
  *(_QWORD *)(a1 + 48) = v9;
  *(_QWORD *)(a1 + 56) = v10;
  *(_QWORD *)(a1 + 64) = v11;
  *(_QWORD *)(a1 + 72) = v27;
  *(_QWORD *)(a1 + 80) = v28;
  *(_QWORD *)(a1 + 88) = v29;
  *(_QWORD *)(a1 + 96) = v30;
  *(_QWORD *)(a1 + 104) = v31;
  *(_QWORD *)(a1 + 112) = v32;
  *(_QWORD *)(a1 + 120) = v33;
  *(_QWORD *)(a1 + 128) = v34;
  *(_QWORD *)(a1 + 136) = v35;
  outlined consume of LayoutGestureBox.Child.DebugData(v12, v13, v14, v15, v16, v17, v18, v19, v20, *((uint64_t *)&v20 + 1), v21, *((uint64_t *)&v21 + 1), v22, *((uint64_t *)&v22 + 1), v23, *((uint64_t *)&v23 + 1), v24, v25);
  return a1;
}

uint64_t assignWithTake for LayoutGestureBox.Child.DebugData(uint64_t a1, _OWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;

  v3 = *(_QWORD *)a1;
  v5 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  v6 = *(_QWORD *)(a1 + 24);
  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(_QWORD *)(a1 + 40);
  v9 = *(_QWORD *)(a1 + 48);
  v10 = *(_QWORD *)(a1 + 56);
  v11 = *(_OWORD *)(a1 + 64);
  v12 = *(_OWORD *)(a1 + 80);
  v13 = *(_OWORD *)(a1 + 96);
  v14 = *(_OWORD *)(a1 + 112);
  v15 = *(_QWORD *)(a1 + 128);
  v16 = *(_QWORD *)(a1 + 136);
  v17 = a2[1];
  *(_OWORD *)a1 = *a2;
  *(_OWORD *)(a1 + 16) = v17;
  v18 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v18;
  v19 = a2[5];
  *(_OWORD *)(a1 + 64) = a2[4];
  *(_OWORD *)(a1 + 80) = v19;
  v20 = a2[7];
  *(_OWORD *)(a1 + 96) = a2[6];
  *(_OWORD *)(a1 + 112) = v20;
  *(_OWORD *)(a1 + 128) = a2[8];
  outlined consume of LayoutGestureBox.Child.DebugData(v3, v5, v4, v6, v7, v8, v9, v10, v11, *((uint64_t *)&v11 + 1), v12, *((uint64_t *)&v12 + 1), v13, *((uint64_t *)&v13 + 1), v14, *((uint64_t *)&v14 + 1), v15, v16);
  return a1;
}

uint64_t getEnumTagSinglePayload for LayoutGestureBox.Child.DebugData(uint64_t a1, int a2)
{
  unsigned int v2;
  int v3;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 144))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_DWORD *)(a1 + 4);
  if (v2 > 0x80000000)
    v3 = ~v2;
  else
    v3 = -1;
  return (v3 + 1);
}

double storeEnumTagSinglePayload for LayoutGestureBox.Child.DebugData(uint64_t a1, int a2, int a3)
{
  double result;

  if (a2 < 0)
  {
    *(_QWORD *)(a1 + 136) = 0;
    result = 0.0;
    *(_OWORD *)(a1 + 120) = 0u;
    *(_OWORD *)(a1 + 104) = 0u;
    *(_OWORD *)(a1 + 88) = 0u;
    *(_OWORD *)(a1 + 72) = 0u;
    *(_OWORD *)(a1 + 56) = 0u;
    *(_OWORD *)(a1 + 40) = 0u;
    *(_OWORD *)(a1 + 24) = 0u;
    *(_OWORD *)(a1 + 8) = 0u;
    *(_QWORD *)a1 = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(a1 + 144) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)a1 = (unint64_t)-a2 << 32;
      result = 0.0;
      *(_OWORD *)(a1 + 8) = 0u;
      *(_OWORD *)(a1 + 24) = 0u;
      *(_OWORD *)(a1 + 40) = 0u;
      *(_OWORD *)(a1 + 56) = 0u;
      *(_OWORD *)(a1 + 72) = 0u;
      *(_OWORD *)(a1 + 88) = 0u;
      *(_OWORD *)(a1 + 104) = 0u;
      *(_OWORD *)(a1 + 120) = 0u;
      *(_QWORD *)(a1 + 136) = 0;
      return result;
    }
    *(_BYTE *)(a1 + 144) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

int8x16_t destructiveInjectEnumTag for LayoutGestureBox.Child.DebugData(int8x16_t *a1, uint64_t a2)
{
  int8x16_t result;
  int8x16_t v3;
  uint64_t v4;
  uint64_t v5;

  result = vandq_s8(*a1, (int8x16_t)xmmword_2352A5DB0);
  v3 = vandq_s8(a1[1], (int8x16_t)xmmword_2352A5DC0);
  v4 = a1[8].i64[0] & 3;
  v5 = a1[8].i64[1] & 0xFFFFFFFFFFFFFF8 | (a2 << 63);
  *a1 = result;
  a1[1] = v3;
  a1[8].i64[0] = v4;
  a1[8].i64[1] = v5;
  return result;
}

ValueMetadata *type metadata accessor for LayoutGestureBox.Child.DebugData()
{
  return &type metadata for LayoutGestureBox.Child.DebugData;
}

uint64_t destroy for LayoutGestureChildProxy.Child(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  swift_release();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v2 = *(_QWORD *)(a1 + 48);
  v3 = *(_QWORD *)(a1 + 56);
  v4 = *(_QWORD *)(a1 + 72);
  v5 = *(_QWORD *)(a1 + 184);
  if ((v5 & 0xF000000000000007) != 0
    || *(_QWORD *)(a1 + 176) > 3uLL
    || HIDWORD(v4) != 0
    || v2 < 0xFFFFFFFF00000000
    || (*(_QWORD *)(a1 + 64) & 0xFFFFFC00 | v3 & 0xF000000000000007) != 0)
  {
    outlined consume of LayoutGestureBox.Child.DebugData(v2, v3, *(_QWORD *)(a1 + 64), v4, *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 128), *(_QWORD *)(a1 + 136), *(_QWORD *)(a1 + 144), *(_QWORD *)(a1 + 152), *(_QWORD *)(a1 + 160), *(_QWORD *)(a1 + 168), *(_QWORD *)(a1 + 176), v5);
  }
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for LayoutGestureChildProxy.Child(uint64_t a1, uint64_t a2)
{
  void *v4;
  uint64_t v5;
  _OWORD *v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  id v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v4 = *(void **)(a2 + 16);
  *(_QWORD *)(a1 + 16) = v4;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 28) = *(_BYTE *)(a2 + 28);
  v5 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v5;
  v6 = (_OWORD *)(a2 + 48);
  v33 = *(_QWORD *)(a2 + 56);
  v34 = *(_QWORD *)(a2 + 48);
  v7 = *(_QWORD *)(a2 + 72);
  v32 = *(_QWORD *)(a2 + 64);
  v8 = *(_QWORD *)(a2 + 176);
  v9 = *(_QWORD *)(a2 + 184);
  swift_retain();
  v10 = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if ((v9 & 0xF000000000000007) != 0
    || v8 > 3
    || HIDWORD(v7)
    || v34 < 0xFFFFFFFF00000000
    || v32 & 0xFFFFFC00 | v33 & 0xF000000000000007)
  {
    v15 = *(_QWORD *)(a2 + 80);
    v16 = *(_QWORD *)(a2 + 96);
    v22 = *(_QWORD *)(a2 + 112);
    v23 = *(_QWORD *)(a2 + 120);
    v25 = *(_QWORD *)(a2 + 128);
    v26 = *(_QWORD *)(a2 + 136);
    v27 = *(_QWORD *)(a2 + 144);
    v28 = *(_QWORD *)(a2 + 152);
    v29 = *(_QWORD *)(a2 + 160);
    v30 = *(_QWORD *)(a2 + 168);
    v21 = v9;
    v31 = v8;
    v20 = v8;
    v24 = v9;
    v17 = *(_QWORD *)(a2 + 88);
    v18 = *(_QWORD *)(a2 + 104);
    outlined copy of LayoutGestureBox.Child.DebugData(v34, v33, v32, v7, v15, v17, v16, v18, v22, v23, v25, v26, v27, v28, v29, v30, v20, v21);
    *(_QWORD *)(a1 + 48) = v34;
    *(_QWORD *)(a1 + 56) = v33;
    *(_QWORD *)(a1 + 64) = v32;
    *(_QWORD *)(a1 + 72) = v7;
    *(_QWORD *)(a1 + 80) = v15;
    *(_QWORD *)(a1 + 88) = v17;
    *(_QWORD *)(a1 + 96) = v16;
    *(_QWORD *)(a1 + 104) = v18;
    *(_QWORD *)(a1 + 112) = v22;
    *(_QWORD *)(a1 + 120) = v23;
    *(_QWORD *)(a1 + 128) = v25;
    *(_QWORD *)(a1 + 136) = v26;
    *(_QWORD *)(a1 + 144) = v27;
    *(_QWORD *)(a1 + 152) = v28;
    *(_QWORD *)(a1 + 160) = v29;
    *(_QWORD *)(a1 + 168) = v30;
    *(_QWORD *)(a1 + 176) = v31;
    *(_QWORD *)(a1 + 184) = v24;
  }
  else
  {
    v11 = v6[7];
    *(_OWORD *)(a1 + 144) = v6[6];
    *(_OWORD *)(a1 + 160) = v11;
    *(_OWORD *)(a1 + 176) = v6[8];
    v12 = v6[3];
    *(_OWORD *)(a1 + 80) = v6[2];
    *(_OWORD *)(a1 + 96) = v12;
    v13 = v6[5];
    *(_OWORD *)(a1 + 112) = v6[4];
    *(_OWORD *)(a1 + 128) = v13;
    v14 = v6[1];
    *(_OWORD *)(a1 + 48) = *v6;
    *(_OWORD *)(a1 + 64) = v14;
  }
  *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
  *(_DWORD *)(a1 + 200) = *(_DWORD *)(a2 + 200);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for LayoutGestureChildProxy.Child(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;
  int v7;
  _OWORD *v8;
  unint64_t v9;
  uint64_t v10;
  _OWORD *v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  BOOL v16;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  v4 = *(void **)(a1 + 16);
  v5 = *(void **)(a2 + 16);
  *(_QWORD *)(a1 + 16) = v5;
  v6 = v5;

  v7 = *(_DWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 28) = *(_BYTE *)(a2 + 28);
  *(_DWORD *)(a1 + 24) = v7;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v8 = (_OWORD *)(a1 + 48);
  v9 = *(_QWORD *)(a2 + 48);
  v10 = *(_QWORD *)(a2 + 56);
  v11 = (_OWORD *)(a2 + 48);
  v12 = *(_QWORD *)(a2 + 64);
  v13 = *(_QWORD *)(a2 + 72);
  v14 = *(_QWORD *)(a2 + 176);
  v15 = *(_QWORD *)(a2 + 184);
  v16 = (v15 & 0xF000000000000007) == 0;
  if (v9 <= 0xFFFFFFFEFFFFFFFFLL
    || (*(_QWORD *)(a2 + 64) & 0xFFFFFC00 | v10 & 0xF000000000000007) != 0
    || HIDWORD(v13) != 0
    || v14 >= 4)
  {
    v16 = 0;
  }
  if ((*(_QWORD *)(a1 + 184) & 0xF000000000000007) != 0
    || *(_QWORD *)(a1 + 176) > 3uLL
    || HIDWORD(*(_QWORD *)(a1 + 72))
    || *(_QWORD *)(a1 + 48) < 0xFFFFFFFF00000000
    || *(_QWORD *)(a1 + 64) & 0xFFFFFC00 | *(_QWORD *)(a1 + 56) & 0xF000000000000007)
  {
    if (v16)
    {
      outlined destroy of LayoutGestureBox.Child.DebugData((uint64_t *)(a1 + 48));
      *v8 = *v11;
      v26 = *(_OWORD *)(a2 + 112);
      v28 = *(_OWORD *)(a2 + 64);
      v27 = *(_OWORD *)(a2 + 80);
      *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
      *(_OWORD *)(a1 + 112) = v26;
      *(_OWORD *)(a1 + 64) = v28;
      *(_OWORD *)(a1 + 80) = v27;
      v29 = *(_OWORD *)(a2 + 176);
      v31 = *(_OWORD *)(a2 + 128);
      v30 = *(_OWORD *)(a2 + 144);
      *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
      *(_OWORD *)(a1 + 176) = v29;
      *(_OWORD *)(a1 + 128) = v31;
      *(_OWORD *)(a1 + 144) = v30;
    }
    else
    {
      v35 = *(_QWORD *)(a2 + 80);
      v34 = *(_QWORD *)(a2 + 88);
      v52 = *(_QWORD *)(a2 + 104);
      v54 = *(_QWORD *)(a2 + 96);
      v56 = *(_QWORD *)(a2 + 112);
      v58 = *(_QWORD *)(a2 + 120);
      v60 = *(_QWORD *)(a2 + 128);
      v62 = *(_QWORD *)(a2 + 136);
      v64 = *(_QWORD *)(a2 + 144);
      v66 = *(_QWORD *)(a2 + 152);
      v68 = *(_QWORD *)(a2 + 160);
      v70 = *(_QWORD *)(a2 + 168);
      outlined copy of LayoutGestureBox.Child.DebugData(v9, v10, v12, v13, v35, v34, v54, v52, v56, v58, v60, v62, v64, v66, v68, v70, v14, v15);
      v36 = *(_QWORD *)(a1 + 48);
      v37 = *(_QWORD *)(a1 + 56);
      v38 = *(_QWORD *)(a1 + 64);
      v39 = *(_QWORD *)(a1 + 72);
      v40 = *(_QWORD *)(a1 + 80);
      v41 = *(_QWORD *)(a1 + 88);
      v42 = *(_QWORD *)(a1 + 96);
      v43 = *(_QWORD *)(a1 + 104);
      v44 = *(_OWORD *)(a1 + 112);
      v45 = *(_OWORD *)(a1 + 128);
      v46 = *(_OWORD *)(a1 + 144);
      v47 = *(_OWORD *)(a1 + 160);
      v48 = *(_QWORD *)(a1 + 176);
      v49 = *(_QWORD *)(a1 + 184);
      *(_QWORD *)(a1 + 48) = v9;
      *(_QWORD *)(a1 + 56) = v10;
      *(_QWORD *)(a1 + 64) = v12;
      *(_QWORD *)(a1 + 72) = v13;
      *(_QWORD *)(a1 + 80) = v35;
      *(_QWORD *)(a1 + 88) = v34;
      *(_QWORD *)(a1 + 96) = v54;
      *(_QWORD *)(a1 + 104) = v52;
      *(_QWORD *)(a1 + 112) = v56;
      *(_QWORD *)(a1 + 120) = v58;
      *(_QWORD *)(a1 + 128) = v60;
      *(_QWORD *)(a1 + 136) = v62;
      *(_QWORD *)(a1 + 144) = v64;
      *(_QWORD *)(a1 + 152) = v66;
      *(_QWORD *)(a1 + 160) = v68;
      *(_QWORD *)(a1 + 168) = v70;
      *(_QWORD *)(a1 + 176) = v14;
      *(_QWORD *)(a1 + 184) = v15;
      outlined consume of LayoutGestureBox.Child.DebugData(v36, v37, v38, v39, v40, v41, v42, v43, v44, *((uint64_t *)&v44 + 1), v45, *((uint64_t *)&v45 + 1), v46, *((uint64_t *)&v46 + 1), v47, *((uint64_t *)&v47 + 1), v48, v49);
    }
  }
  else if (v16)
  {
    *v8 = *v11;
    v20 = *(_OWORD *)(a2 + 64);
    v21 = *(_OWORD *)(a2 + 80);
    v22 = *(_OWORD *)(a2 + 112);
    *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
    *(_OWORD *)(a1 + 112) = v22;
    *(_OWORD *)(a1 + 64) = v20;
    *(_OWORD *)(a1 + 80) = v21;
    v23 = *(_OWORD *)(a2 + 128);
    v24 = *(_OWORD *)(a2 + 144);
    v25 = *(_OWORD *)(a2 + 176);
    *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
    *(_OWORD *)(a1 + 176) = v25;
    *(_OWORD *)(a1 + 128) = v23;
    *(_OWORD *)(a1 + 144) = v24;
  }
  else
  {
    v33 = *(_QWORD *)(a2 + 80);
    v32 = *(_QWORD *)(a2 + 88);
    v51 = *(_QWORD *)(a2 + 104);
    v53 = *(_QWORD *)(a2 + 96);
    v55 = *(_QWORD *)(a2 + 112);
    v57 = *(_QWORD *)(a2 + 120);
    v59 = *(_QWORD *)(a2 + 128);
    v61 = *(_QWORD *)(a2 + 136);
    v63 = *(_QWORD *)(a2 + 144);
    v65 = *(_QWORD *)(a2 + 152);
    v67 = *(_QWORD *)(a2 + 160);
    v69 = *(_QWORD *)(a2 + 168);
    outlined copy of LayoutGestureBox.Child.DebugData(v9, v10, v12, v13, v33, v32, v53, v51, v55, v57, v59, v61, v63, v65, v67, v69, v14, v15);
    *(_QWORD *)(a1 + 48) = v9;
    *(_QWORD *)(a1 + 56) = v10;
    *(_QWORD *)(a1 + 64) = v12;
    *(_QWORD *)(a1 + 72) = v13;
    *(_QWORD *)(a1 + 80) = v33;
    *(_QWORD *)(a1 + 88) = v32;
    *(_QWORD *)(a1 + 96) = v53;
    *(_QWORD *)(a1 + 104) = v51;
    *(_QWORD *)(a1 + 112) = v55;
    *(_QWORD *)(a1 + 120) = v57;
    *(_QWORD *)(a1 + 128) = v59;
    *(_QWORD *)(a1 + 136) = v61;
    *(_QWORD *)(a1 + 144) = v63;
    *(_QWORD *)(a1 + 152) = v65;
    *(_QWORD *)(a1 + 160) = v67;
    *(_QWORD *)(a1 + 168) = v69;
    *(_QWORD *)(a1 + 176) = v14;
    *(_QWORD *)(a1 + 184) = v15;
  }
  *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 200) = *(_DWORD *)(a2 + 200);
  return a1;
}

uint64_t assignWithTake for LayoutGestureChildProxy.Child(uint64_t a1, uint64_t a2)
{
  void *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_release();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v4 = *(void **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);

  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 28) = *(_BYTE *)(a2 + 28);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRelease();
  v5 = *(_QWORD *)(a1 + 48);
  v6 = *(_QWORD *)(a1 + 56);
  v7 = *(_QWORD *)(a2 + 48);
  v8 = *(_QWORD *)(a2 + 56);
  v9 = *(_QWORD *)(a1 + 64);
  v10 = *(_QWORD *)(a1 + 72);
  v11 = *(_QWORD *)(a1 + 176);
  v12 = *(_QWORD *)(a1 + 184);
  v13 = *(_QWORD *)(a2 + 64);
  v14 = *(_QWORD *)(a2 + 72);
  v15 = *(_QWORD *)(a2 + 176);
  v16 = *(_QWORD *)(a2 + 184);
  if ((v12 & 0xF000000000000007) != 0
    || v11 > 3
    || HIDWORD(v10)
    || v5 < 0xFFFFFFFF00000000
    || *(_QWORD *)(a1 + 64) & 0xFFFFFC00 | v6 & 0xF000000000000007)
  {
    if ((v16 & 0xF000000000000007) != 0
      || v15 > 3
      || HIDWORD(v14)
      || v7 < 0xFFFFFFFF00000000
      || *(_QWORD *)(a2 + 64) & 0xFFFFFC00 | v8 & 0xF000000000000007)
    {
      v21 = *(_QWORD *)(a1 + 80);
      v22 = *(_QWORD *)(a1 + 88);
      v23 = *(_QWORD *)(a1 + 96);
      v24 = *(_QWORD *)(a1 + 104);
      v25 = *(_OWORD *)(a1 + 112);
      v26 = *(_OWORD *)(a1 + 128);
      v27 = *(_OWORD *)(a1 + 144);
      v28 = *(_QWORD *)(a1 + 160);
      v29 = *(_QWORD *)(a1 + 168);
      *(_QWORD *)(a1 + 48) = v7;
      *(_QWORD *)(a1 + 56) = v8;
      *(_QWORD *)(a1 + 64) = v13;
      *(_QWORD *)(a1 + 72) = v14;
      v30 = *(_OWORD *)(a2 + 96);
      *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
      *(_OWORD *)(a1 + 96) = v30;
      v31 = *(_OWORD *)(a2 + 128);
      *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
      *(_OWORD *)(a1 + 128) = v31;
      v32 = *(_OWORD *)(a2 + 160);
      *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
      *(_OWORD *)(a1 + 160) = v32;
      *(_QWORD *)(a1 + 176) = v15;
      *(_QWORD *)(a1 + 184) = v16;
      outlined consume of LayoutGestureBox.Child.DebugData(v5, v6, v9, v10, v21, v22, v23, v24, v25, *((uint64_t *)&v25 + 1), v26, *((uint64_t *)&v26 + 1), v27, *((uint64_t *)&v27 + 1), v28, v29, v11, v12);
      goto LABEL_14;
    }
    outlined destroy of LayoutGestureBox.Child.DebugData((uint64_t *)(a1 + 48));
  }
  v17 = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 160) = v17;
  *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 176);
  v18 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 96) = v18;
  v19 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = v19;
  v20 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v20;
LABEL_14:
  *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 200) = *(_DWORD *)(a2 + 200);
  return a1;
}

uint64_t getEnumTagSinglePayload for LayoutGestureChildProxy.Child(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 204))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for LayoutGestureChildProxy.Child(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_DWORD *)(result + 200) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 204) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 204) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for LayoutGestureBox.Child()
{
  return &type metadata for LayoutGestureBox.Child;
}

uint64_t initializeWithCopy for CombinePreferenceVisitor(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for CombinePreferenceVisitor(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  return a1;
}

uint64_t assignWithTake for CombinePreferenceVisitor(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  return a1;
}

uint64_t getEnumTagSinglePayload for CombinePreferenceVisitor(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 28))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for CombinePreferenceVisitor(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_DWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 28) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 16) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 28) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for LayoutGestureBox.Value()
{
  return &type metadata for LayoutGestureBox.Value;
}

void base witness table accessor for _AttributeBody in LayoutDebug<A>()
{
  JUMPOUT(0x23B7C9C04);
}

void base witness table accessor for _AttributeBody in LayoutPhase<A>()
{
  JUMPOUT(0x23B7C9C04);
}

void base witness table accessor for _AttributeBody in UpdateLayoutGestureBox<A>()
{
  JUMPOUT(0x23B7C9C04);
}

uint64_t specialized UpdateLayoutGestureBox.value.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  unsigned int *Value;
  uint64_t v12;
  char v13;
  char v14;
  uint64_t v15;
  uint64_t result;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;

  v8 = *(_QWORD *)(a4 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v10 = (char *)&v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  Value = (unsigned int *)AGGraphGetValue();
  LayoutGestureBox.updateResetSeed(_:)(*Value);
  v12 = AGGraphGetValue();
  v14 = v13;
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, v12, a4);
  if ((v14 & 1) != 0)
  {
    v15 = (*(uint64_t (**)(uint64_t, uint64_t))(a5 + 24))(a4, a5);
    LayoutGestureBox.updateResponder(_:)(v15);
    swift_release();
  }
  type metadata accessor for [EventID : EventType]();
  result = AGGraphGetCurrentAttribute();
  if ((_DWORD)result == *MEMORY[0x24BE096C0])
  {
    __break(1u);
  }
  else
  {
    v17 = result;
    AGGraphGetValue();
    v18 = swift_bridgeObjectRetain();
    LayoutGestureBox.willSendEvents<A>(_:gesture:boxValueAttribute:)(v18, (uint64_t)v10, v17, a4, a5);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, a4);
    return a3;
  }
  return result;
}

uint64_t type metadata accessor for LayoutChildEvents(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for LayoutChildEvents);
}

uint64_t type metadata accessor for LayoutChildSeed(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for LayoutChildSeed);
}

void type metadata accessor for LayoutGesturePreferenceCombiner()
{
  JUMPOUT(0x23B7C9B5CLL);
}

uint64_t sub_2350B5AEC()
{
  uint64_t v0;
  __int128 v2;
  __int128 v3;
  __int128 v4;

  v3 = *(_OWORD *)(v0 + 256);
  v4 = *(_OWORD *)(v0 + 272);
  v2 = *(_OWORD *)(v0 + 224);
  outlined consume of ArrayWith2Inline<GestureDebug.Data>.Storage(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 88), *(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 104), *(_QWORD *)(v0 + 112), *(_QWORD *)(v0 + 120), *(_QWORD *)(v0 + 128), *(_QWORD *)(v0 + 136), *(_OWORD *)(v0 + 144), *(_QWORD *)(v0 + 152), *(_QWORD *)(v0 + 160),
    *(_QWORD *)(v0 + 168),
    *(_QWORD *)(v0 + 176),
    *(_QWORD *)(v0 + 184),
    *(_QWORD *)(v0 + 192),
    *(_QWORD *)(v0 + 200),
    *(_QWORD *)(v0 + 208),
    *(_QWORD *)(v0 + 216),
    v2,
    *((uint64_t *)&v2 + 1),
    *(_QWORD *)(v0 + 240),
    *(_QWORD *)(v0 + 248),
    v3,
    *((uint64_t *)&v3 + 1),
    v4,
    *((uint64_t *)&v4 + 1),
    *(_QWORD *)(v0 + 288),
    *(_QWORD *)(v0 + 296),
    *(_BYTE *)(v0 + 304));
  return swift_deallocObject();
}

uint64_t outlined copy of (String, String)?(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (a2)
  {
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t _s7SwiftUI16ArrayWith2InlineV7StorageOyAA12GestureDebugO4DataV_GWOi1_(uint64_t result)
{
  *(_BYTE *)(result + 288) = 2;
  return result;
}

uint64_t lazy protocol witness table accessor for type LayoutDebug<DefaultLayoutGesture> and conformance LayoutDebug<A>(unint64_t *a1, unint64_t *a2, uint64_t (*a3)(_QWORD, uint64_t, uint64_t), uint64_t a4)
{
  uint64_t result;
  uint64_t v7;

  result = *a1;
  if (!result)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, a2, (uint64_t)&type metadata for DefaultLayoutGesture, (uint64_t)&protocol witness table for DefaultLayoutGesture, a3);
    result = MEMORY[0x23B7C9C04](a4, v7);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t instantiation function for generic protocol witness table for LayoutGesturePreferenceCombiner<A, B>(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for LayoutGesturePreferenceCombiner<A, B>);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

void base witness table accessor for _AttributeBody in LayoutGesturePreferenceCombiner<A, B>()
{
  JUMPOUT(0x23B7C9C04);
}

void base witness table accessor for _AttributeBody in LayoutChildSeed<A>()
{
  JUMPOUT(0x23B7C9C04);
}

void base witness table accessor for _AttributeBody in LayoutChildEvents<A>()
{
  JUMPOUT(0x23B7C9C04);
}

uint64_t partial apply for closure #1 in LayoutGesture.preferenceValue<A>(key:box:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t Value;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  Value = AGGraphGetValue();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 16))(a1, Value, AssociatedTypeWitness);
}

uint64_t KeyframeTimeline.init<A>(initialValue:content:)@<X0>(uint64_t a1@<X0>, void (*a2)(void)@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  double v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD v28[2];
  void (*v29)(void);
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v29 = a2;
  v30 = a6;
  v28[1] = a3;
  v31 = type metadata accessor for Optional();
  v11 = *(_QWORD *)(v31 - 8);
  MEMORY[0x24BDAC7A8](v31);
  v13 = (char *)v28 - v12;
  v14 = *(_QWORD *)(a5 - 8);
  v16 = MEMORY[0x24BDAC7A8](v15);
  v18 = (char *)v28 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = *(_QWORD *)(a4 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t, double))(v19 + 16))(a7, a1, a4, v16);
  type metadata accessor for _ResolvedKeyframes.Track(0, a4, v20, v21);
  v22 = static Array._allocateUninitialized(_:)();
  protocol witness for ProtobufTag.init(rawValue:) in conformance CodableResolvedPaint.Tag(v22, &v32);
  v23 = v32;
  v26 = (_QWORD *)(a7 + *(int *)(type metadata accessor for KeyframeTimeline(0, a4, v24, v25) + 28));
  *v26 = v23;
  v29();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v19 + 56))(v13, 1, 1, a4);
  (*(void (**)(_QWORD *, uint64_t, char *, uint64_t))(v30 + 40))(v26, a1, v13, a5);
  (*(void (**)(uint64_t, uint64_t))(v19 + 8))(a1, a4);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v31);
  return (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v18, a5);
}

double KeyframeTimeline.duration.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  v4 = type metadata accessor for _ResolvedKeyframes(0, *(_QWORD *)(a1 + 16), a3, a4);
  return _ResolvedKeyframes.duration.getter(v4);
}

uint64_t KeyframeTimeline.value(progress:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  uint64_t v11;
  uint64_t v12;

  v6 = *(_QWORD *)(a1 + 16);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a2, v3, v6);
  swift_bridgeObjectRetain();
  v9 = type metadata accessor for _ResolvedKeyframes(0, v6, v7, v8);
  v10 = _ResolvedKeyframes.duration.getter(v9);
  _ResolvedKeyframes.update(value:time:)(a2, v9, v11, v12, v10 * a3);
  return swift_bridgeObjectRelease();
}

uint64_t KeyframeTimeline.value(time:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>)
{
  return KeyframeTimeline.value(time:)(a1, (uint64_t (*)(uint64_t, uint64_t, double))_ResolvedKeyframes.update(value:time:), a2, a3);
}

uint64_t KeyframeTimeline.velocity(time:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>)
{
  return KeyframeTimeline.value(time:)(a1, (uint64_t (*)(uint64_t, uint64_t, double))_ResolvedKeyframes.update(velocity:time:), a2, a3);
}

uint64_t KeyframeTimeline.value(time:)@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t, double)@<X1>, uint64_t a3@<X8>, double a4@<D0>)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v8 = *(_QWORD *)(a1 + 16);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a3, v4, v8);
  v11 = type metadata accessor for _ResolvedKeyframes(0, v8, v9, v10);
  return a2(a3, v11, a4);
}

uint64_t KeyframeTimeline.init<A>(initialValue:initialVelocity:content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void (*a3)(uint64_t, uint64_t)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  double v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  void (*v20)(uint64_t, uint64_t, uint64_t, double);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(uint64_t, uint64_t);
  uint64_t v33;
  void (*v34)(uint64_t, uint64_t);
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v37 = a7;
  v33 = a4;
  v34 = a3;
  v35 = a2;
  v12 = type metadata accessor for Optional();
  v38 = *(_QWORD *)(v12 - 8);
  v39 = v12;
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)&v33 - v13;
  v36 = *(_QWORD *)(a6 - 8);
  v16 = MEMORY[0x24BDAC7A8](v15);
  v18 = (char *)&v33 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = *(_QWORD *)(a5 - 8);
  v20 = *(void (**)(uint64_t, uint64_t, uint64_t, double))(v19 + 16);
  v20(a8, a1, a5, v16);
  type metadata accessor for _ResolvedKeyframes.Track(0, a5, v21, v22);
  v23 = static Array._allocateUninitialized(_:)();
  protocol witness for ProtobufTag.init(rawValue:) in conformance CodableResolvedPaint.Tag(v23, &v40);
  v24 = v40;
  v27 = type metadata accessor for KeyframeTimeline(0, a5, v25, v26);
  v28 = (_QWORD *)(a8 + *(int *)(v27 + 28));
  *v28 = v24;
  v34(v27, v29);
  v30 = v35;
  ((void (*)(char *, uint64_t, uint64_t))v20)(v14, v35, a5);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v14, 0, 1, a5);
  (*(void (**)(_QWORD *, uint64_t, char *, uint64_t))(v37 + 40))(v28, a1, v14, a6);
  v31 = *(void (**)(uint64_t, uint64_t))(v19 + 8);
  v31(v30, a5);
  v31(a1, a5);
  (*(void (**)(char *, uint64_t))(v38 + 8))(v14, v39);
  return (*(uint64_t (**)(char *, uint64_t))(v36 + 8))(v18, a6);
}

uint64_t KeyframeTimeline.initialValue.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8) + 16))(a2, v2);
}

uint64_t KeyframeTimeline.initialValue.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 40))(v2, a1);
}

uint64_t (*KeyframeTimeline.initialValue.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t KeyframeTimeline.content.getter@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  *a2 = *(_QWORD *)(v2 + *(int *)(a1 + 28));
  return swift_bridgeObjectRetain();
}

uint64_t KeyframeTimeline.content.setter(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  v3 = *a1;
  v4 = *(int *)(a2 + 28);
  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + v4) = v3;
  return result;
}

uint64_t (*KeyframeTimeline.content.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t KeyframeTimeline.update(value:time:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, double a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v7 = type metadata accessor for _ResolvedKeyframes(0, *(_QWORD *)(a2 + 16), a3, a4);
  return _ResolvedKeyframes.update(value:time:)(a1, v7, v8, v9, a5);
}

uint64_t type metadata accessor for KeyframeTimeline(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for KeyframeTimeline);
}

uint64_t type metadata completion function for KeyframeTimeline()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for KeyframeTimeline(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v12;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(_QWORD *)(v4 + 64);
  if (v6 >= a2)
  {
    if (v5 < 0x7FFFFFFF)
    {
      v12 = *(_QWORD *)((a1 + v7 + 7) & 0xFFFFFFFFFFFFF8);
      if (v12 >= 0xFFFFFFFF)
        LODWORD(v12) = -1;
      return (v12 + 1);
    }
    else
    {
      return (*(uint64_t (**)(void))(v4 + 48))();
    }
  }
  else
  {
    if (((((v7 + 7) & 0xFFFFFFFFFFFFFFF8) + 8) & 0xFFFFFFF8) != 0)
      v8 = 2;
    else
      v8 = a2 - v6 + 1;
    if (v8 >= 0x10000)
      v9 = 4;
    else
      v9 = 2;
    if (v8 < 0x100)
      v9 = 1;
    if (v8 >= 2)
      v10 = v9;
    else
      v10 = 0;
    return ((uint64_t (*)(void))((char *)&loc_2350B6394 + 4 * byte_2352C5FF0[v10]))();
  }
}

void storeEnumTagSinglePayload for KeyframeTimeline(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  int v9;
  unsigned int v10;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v5 + 84);
  if (v6 >= a3)
  {
    v9 = 0;
    if (a2 <= v6)
      goto LABEL_17;
  }
  else
  {
    if (((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) == 0xFFFFFFF8)
      v7 = a3 - v6 + 1;
    else
      v7 = 2;
    if (v7 >= 0x10000)
      v8 = 4;
    else
      v8 = 2;
    if (v7 < 0x100)
      v8 = 1;
    if (v7 >= 2)
      v9 = v8;
    else
      v9 = 0;
    if (a2 <= v6)
LABEL_17:
      __asm { BR              X12 }
  }
  if (((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) != 0xFFFFFFF8)
  {
    v10 = ~v6 + a2;
    bzero(a1, ((*(_QWORD *)(v5 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 8);
    *a1 = v10;
  }
  __asm { BR              X10 }
}

void sub_2350B650C()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
  JUMPOUT(0x2350B6580);
}

void sub_2350B6514(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x2350B651CLL);
  JUMPOUT(0x2350B6580);
}

void sub_2350B655C()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x2350B6580);
}

void sub_2350B6564()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x2350B6580);
}

uint64_t sub_2350B656C(uint64_t a1, int a2, unsigned int a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_WORD *)(v5 + v6) = 0;
  if (!a2)
    JUMPOUT(0x2350B6580);
  if (a3 < 0x7FFFFFFF)
  {
    if ((a2 & 0x80000000) == 0)
      JUMPOUT(0x2350B657CLL);
    JUMPOUT(0x2350B6578);
  }
  return (*(uint64_t (**)(uint64_t))(v4 + 56))(v5);
}

void specialized static ModifierGesture._makeGesture(gesture:inputs:)(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  int OffsetAttribute2;
  unsigned int v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  int v14;
  uint64_t v15;
  _DWORD *v16;
  int v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  unsigned int v24;
  uint64_t v25;
  int v26;
  int v27;
  int v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  int v32;
  uint64_t v33;

  v33 = *MEMORY[0x24BDAC8D0];
  type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for RequiredTapCountWriter<TappableEvent>, (uint64_t)&type metadata for TappableEvent, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for RequiredTapCountWriter);
  OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
  AGGraphCreateOffsetAttribute2();
  specialized static ModifierGesture._makeGesture(gesture:inputs:)(a1, (uint64_t)&v27);
  v6 = v27;
  v5 = v28;
  v7 = v29;
  v8 = v30;
  v23 = v27;
  v24 = v28;
  v25 = v29;
  v26 = v30;
  v31 = *(_QWORD *)(a1 + 96);
  v9 = v31;
  v32 = *(_DWORD *)(a1 + 104);
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for _AnyPreferenceKey<RequiredTapCountKey>, (uint64_t)&type metadata for RequiredTapCountKey, (uint64_t)&protocol witness table for RequiredTapCountKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for _AnyPreferenceKey);
  v11 = *(_QWORD *)(v9 + 16);
  if (v11)
  {
    v12 = v10;
    v13 = (_QWORD *)(v9 + 32);
    while (*v13 != v10)
    {
      v13 += 2;
      if (!--v11)
        goto LABEL_13;
    }
    v27 = OffsetAttribute2;
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    outlined retain of LinearGradient((uint64_t)&v31);
    type metadata accessor for (_:)();
    type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for RequiredTapCountWriter<TappableEvent>.Child, (uint64_t)&type metadata for TappableEvent, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for RequiredTapCountWriter.Child);
    lazy protocol witness table accessor for type EventFilter<TappableEvent> and conformance EventFilter<A>(&lazy protocol witness table cache variable for type RequiredTapCountWriter<TappableEvent>.Child and conformance RequiredTapCountWriter<A>.Child, &lazy cache variable for type metadata for RequiredTapCountWriter<TappableEvent>.Child, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for RequiredTapCountWriter.Child, (uint64_t)&protocol conformance descriptor for RequiredTapCountWriter<A>.Child);
    v14 = Attribute.init<A>(body:value:flags:update:)();
    v15 = *(_QWORD *)(v7 + 16);
    if (v15)
    {
      v16 = (_DWORD *)(v7 + 48);
      while (*((_QWORD *)v16 - 2) != v12)
      {
        v16 += 6;
        if (!--v15)
        {
          v16 = (_DWORD *)MEMORY[0x24BE096C0];
          break;
        }
      }
    }
    else
    {
      v16 = (_DWORD *)MEMORY[0x24BE096C0];
    }
    v17 = *v16;
    v27 = v14;
    v28 = v17;
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for Int?, MEMORY[0x24BEE1768], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1C68]);
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for PreferenceTransform<RequiredTapCountKey>, (uint64_t)&type metadata for RequiredTapCountKey, (uint64_t)&protocol witness table for RequiredTapCountKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for PreferenceTransform);
    lazy protocol witness table accessor for type PreferenceTransform<RequiredTapCountKey> and conformance PreferenceTransform<A>();
    v18 = Attribute.init<A>(body:value:flags:update:)();
    LOBYTE(v27) = 0;
    PreferencesOutputs.subscript.setter(v18, v12, (uint64_t)&protocol witness table for _AnyPreferenceKey<A>, v19);
    outlined release of LinearGradient((uint64_t)&v31);
    v6 = v23;
    v5 = v24;
    v7 = v25;
    v8 = v26;
  }
LABEL_13:
  v27 = v6;
  v28 = v5;
  v29 = v7;
  v30 = v8;
  if ((*(_BYTE *)(a1 + 120) & 8) != 0)
  {
    _gestureModifierProtocolDescriptor();
    v20 = swift_conformsToProtocol();
    if (v5 == *MEMORY[0x24BE096C0])
      v21 = 0;
    else
      v21 = v5;
    if (v20)
      v22 = 2;
    else
      v22 = 1;
    specialized _GestureOutputs.reallyWrap<A>(_:kind:properties:inputs:data:)(v22, 0x100000000, a1, v21 | ((unint64_t)(v5 == *MEMORY[0x24BE096C0]) << 32), 0x100000000);
    v6 = v27;
    v5 = v28;
    v7 = v29;
    v8 = v30;
  }
  *(_DWORD *)a2 = v6;
  *(_DWORD *)(a2 + 4) = v5;
  *(_QWORD *)(a2 + 8) = v7;
  *(_DWORD *)(a2 + 16) = v8;
}

{
  uint64_t v4;
  uint64_t v5;
  int OffsetAttribute2;
  unsigned int v7;
  int v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _DWORD *v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  unsigned int v26;
  uint64_t v27;
  int v28;
  int v29;
  unsigned int v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  int v34;
  uint64_t v35;

  v35 = *MEMORY[0x24BDAC8D0];
  type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for CategoryGesture<TappableEvent>, (uint64_t)&type metadata for TappableEvent, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for CategoryGesture);
  v5 = v4;
  OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
  AGGraphCreateOffsetAttribute2();
  specialized static ModifierGesture._makeGesture(gesture:inputs:)(a1, (uint64_t)&v29);
  v8 = v29;
  v7 = v30;
  v9 = v31;
  v10 = v32;
  v25 = v29;
  v26 = v30;
  v27 = v31;
  v28 = v32;
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, (unint64_t *)&lazy cache variable for type metadata for _AnyPreferenceKey<GestureCategory.Key>, (uint64_t)&type metadata for GestureCategory.Key, (uint64_t)&protocol witness table for GestureCategory.Key, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for _AnyPreferenceKey);
  v12 = v11;
  v13 = *(_QWORD *)(v9 + 16);
  if (v13)
  {
    v14 = (_DWORD *)(v9 + 48);
    while (*((_QWORD *)v14 - 2) != v11)
    {
      v14 += 6;
      if (!--v13)
        goto LABEL_5;
    }
    v15 = 0;
    LODWORD(v13) = *v14;
  }
  else
  {
LABEL_5:
    v15 = 1;
  }
  v16 = *(_QWORD *)(a1 + 96);
  v33 = v16;
  v34 = *(_DWORD *)(a1 + 104);
  v17 = *(_QWORD *)(v16 + 16);
  if (v17)
  {
    v18 = (_QWORD *)(v16 + 32);
    while (*v18 != v11)
    {
      v18 += 2;
      if (!--v17)
        goto LABEL_15;
    }
    if (v15)
      LODWORD(v13) = *MEMORY[0x24BE096C0];
    v29 = OffsetAttribute2;
    v30 = v13;
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    outlined retain of LinearGradient((uint64_t)&v33);
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for CategoryGesture<TappableEvent>.Combiner<TappableEvent>, (uint64_t)&type metadata for TappableEvent, (uint64_t)&type metadata for TappableEvent, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for CategoryGesture.Combiner);
    lazy protocol witness table accessor for type CategoryGesture<TappableEvent>.Combiner<TappableEvent> and conformance CategoryGesture<A>.Combiner<A1>();
    v19 = Attribute.init<A>(body:value:flags:update:)();
    LOBYTE(v29) = 0;
    PreferencesOutputs.subscript.setter(v19, v12, (uint64_t)&protocol witness table for _AnyPreferenceKey<A>, v20);
    outlined release of LinearGradient((uint64_t)&v33);
    v8 = v25;
    v7 = v26;
    v9 = v27;
    v10 = v28;
  }
LABEL_15:
  v29 = v8;
  v30 = v7;
  v31 = v9;
  v32 = v10;
  if ((*(_BYTE *)(a1 + 120) & 8) != 0 && !(swift_conformsToProtocol2() ? v5 : 0))
  {
    _gestureModifierProtocolDescriptor();
    v22 = swift_conformsToProtocol();
    if (v7 == *MEMORY[0x24BE096C0])
      v23 = 0;
    else
      v23 = v7;
    if (v22)
      v24 = 2;
    else
      v24 = 1;
    specialized _GestureOutputs.reallyWrap<A>(_:kind:properties:inputs:data:)(v24, 0x100000000, a1, v23 | ((unint64_t)(v7 == *MEMORY[0x24BE096C0]) << 32), 0x100000000);
    v8 = v29;
    v7 = v30;
    v9 = v31;
    v10 = v32;
  }
  *(_DWORD *)a2 = v8;
  *(_DWORD *)(a2 + 4) = v7;
  *(_QWORD *)(a2 + 8) = v9;
  *(_DWORD *)(a2 + 16) = v10;
}

{
  int OffsetAttribute2;
  int v5;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  int v23;
  int v24;
  int v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  int v29;
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for DependentGesture<TappableEvent>, (uint64_t)&type metadata for TappableEvent, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for DependentGesture);
  OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
  AGGraphCreateOffsetAttribute2();
  specialized static ModifierGesture._makeGesture(gesture:inputs:)(a1, (uint64_t)&v24);
  v5 = v24;
  v21 = v25;
  v22 = v26;
  v23 = v27;
  v6 = *(_DWORD *)(a1 + 116);
  v24 = OffsetAttribute2;
  v25 = v5;
  LODWORD(v26) = v6;
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for GesturePhase<TappableEvent>, (uint64_t)&type metadata for TappableEvent, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for GesturePhase);
  type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for DependentPhase<TappableEvent>, (uint64_t)&type metadata for TappableEvent, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for DependentPhase);
  lazy protocol witness table accessor for type EventFilter<TappableEvent> and conformance EventFilter<A>(&lazy protocol witness table cache variable for type DependentPhase<TappableEvent> and conformance DependentPhase<A>, &lazy cache variable for type metadata for DependentPhase<TappableEvent>, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for DependentPhase, (uint64_t)&protocol conformance descriptor for DependentPhase<A>);
  v7 = Attribute.init<A>(body:value:flags:update:)();
  v28 = *(_QWORD *)(a1 + 96);
  v8 = v28;
  v29 = *(_DWORD *)(a1 + 104);
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, (unint64_t *)&lazy cache variable for type metadata for _AnyPreferenceKey<GestureDependency.Key>, (uint64_t)&type metadata for GestureDependency.Key, (uint64_t)&protocol witness table for GestureDependency.Key, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for _AnyPreferenceKey);
  v10 = *(_QWORD *)(v8 + 16);
  if (v10)
  {
    v11 = v9;
    v12 = (_QWORD *)(v8 + 32);
    while (*v12 != v9)
    {
      v12 += 2;
      if (!--v10)
        goto LABEL_7;
    }
    outlined retain of LinearGradient((uint64_t)&v28);
    v13 = AGGraphCreateOffsetAttribute2();
    LOBYTE(v24) = 0;
    PreferencesOutputs.subscript.setter(v13, v11, (uint64_t)&protocol witness table for _AnyPreferenceKey<A>, v14);
    outlined release of LinearGradient((uint64_t)&v28);
  }
LABEL_7:
  v15 = v21;
  v16 = v22;
  v17 = v23;
  v24 = v7;
  v25 = v21;
  v26 = v22;
  v27 = v23;
  if ((*(_BYTE *)(a1 + 120) & 8) != 0)
  {
    _gestureModifierProtocolDescriptor();
    v18 = swift_conformsToProtocol();
    if (v21 == *MEMORY[0x24BE096C0])
      v19 = 0;
    else
      v19 = v21;
    if (v18)
      v20 = 2;
    else
      v20 = 1;
    specialized _GestureOutputs.reallyWrap<A>(_:kind:properties:inputs:data:)(v20, 0x100000000, a1, v19 | ((unint64_t)(v21 == *MEMORY[0x24BE096C0]) << 32), 0x100000000);
    v7 = v24;
    v15 = v25;
    v16 = v26;
    v17 = v27;
  }
  *(_DWORD *)a2 = v7;
  *(_DWORD *)(a2 + 4) = v15;
  *(_QWORD *)(a2 + 8) = v16;
  *(_DWORD *)(a2 + 16) = v17;
}

uint64_t specialized static ModifierGesture._makeGesture(gesture:inputs:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  id v10;
  int v11;
  uint64_t result;
  unsigned int v13;
  uint64_t v14;
  int v15;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  unsigned int v23;
  int v24;
  int v25;
  int v26;
  unsigned int OffsetAttribute2;
  int v29;
  unsigned int v30;
  int v31;
  int v32;
  int v33;
  uint64_t v34;
  int v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int v43;
  uint64_t v44;
  int v45;
  int v46;
  unsigned int v47;
  uint64_t v48;
  int v49;
  _OWORD v50[6];
  _OWORD v51[2];
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  _BYTE v58[28];
  unint64_t v59;
  int v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  unsigned int v64;
  _DWORD v65[13];
  id v66;
  uint64_t v67;
  int v68;
  int v69;
  int v70;
  int v71;
  int v72;
  uint64_t v73;

  v73 = *MEMORY[0x24BDAC8D0];
  type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for RepeatGesture<TappableEvent>, (uint64_t)&type metadata for TappableEvent, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for RepeatGesture);
  v21 = v3;
  OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
  LODWORD(v59) = 0;
  type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for External<UInt32>, MEMORY[0x24BEE44F0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BE09670]);
  lazy protocol witness table accessor for type External<UInt32> and conformance External<A>();
  v25 = Attribute.init<A>(body:value:flags:update:)();
  v4 = *(_QWORD *)a1;
  v5 = *(_QWORD *)(a1 + 16);
  v34 = *(_QWORD *)(a1 + 24);
  v30 = *(_DWORD *)(a1 + 32);
  v22 = *(_DWORD *)(a1 + 8);
  v23 = *(_DWORD *)(a1 + 36);
  v7 = *(_QWORD *)(a1 + 40);
  v6 = *(_QWORD *)(a1 + 48);
  v40 = *(_DWORD *)(a1 + 60);
  v41 = *(_DWORD *)(a1 + 56);
  v38 = *(_DWORD *)(a1 + 68);
  v39 = *(_DWORD *)(a1 + 64);
  v36 = *(_DWORD *)(a1 + 76);
  v37 = *(_DWORD *)(a1 + 72);
  v35 = *(_DWORD *)(a1 + 80);
  v8 = *(void **)(a1 + 88);
  v9 = *(_QWORD *)(a1 + 96);
  v32 = *(_DWORD *)(a1 + 108);
  v33 = *(_DWORD *)(a1 + 104);
  v29 = *(_DWORD *)(a1 + 120);
  v31 = *(_DWORD *)(a1 + 116);
  LODWORD(v59) = *(_DWORD *)(a1 + 112);
  v24 = v59;
  HIDWORD(v59) = v25;
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  outlined retain of _GestureInputs(a1);
  lazy protocol witness table accessor for type RepeatResetSeed and conformance RepeatResetSeed();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v10 = v8;
  swift_bridgeObjectRetain();
  v26 = Attribute.init<A>(body:value:flags:update:)();
  *(_QWORD *)&v52 = v4;
  DWORD2(v52) = v22;
  *(_QWORD *)&v53 = v5;
  *((_QWORD *)&v53 + 1) = v34;
  *(_QWORD *)&v54 = __PAIR64__(v23, v30);
  *((_QWORD *)&v54 + 1) = v7;
  *(_QWORD *)&v55 = v6;
  *((_QWORD *)&v55 + 1) = __PAIR64__(v40, v41);
  *(_QWORD *)&v56 = __PAIR64__(v38, v39);
  *((_QWORD *)&v56 + 1) = __PAIR64__(v36, v37);
  LODWORD(v57) = v35;
  *((_QWORD *)&v57 + 1) = v10;
  *(_QWORD *)v58 = v9;
  *(_DWORD *)&v58[8] = v33;
  *(_DWORD *)&v58[12] = v32;
  *(_DWORD *)&v58[16] = v26;
  *(_DWORD *)&v58[20] = v31;
  *(_DWORD *)&v58[24] = v29;
  v50[2] = v54;
  v50[3] = v55;
  v50[0] = v52;
  v50[1] = v53;
  *(_OWORD *)((char *)v51 + 12) = *(_OWORD *)&v58[12];
  v50[5] = v57;
  v51[0] = *(_OWORD *)v58;
  v50[4] = v56;
  outlined retain of _GestureInputs((uint64_t)&v52);
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  specialized closure #2 in static ModifierGesture._makeGesture(gesture:inputs:)((uint64_t)v50, (uint64_t)&v42);
  outlined release of _GestureInputs((uint64_t)&v52);
  v59 = __PAIR64__(v42, OffsetAttribute2);
  v60 = v22;
  v61 = v24;
  LODWORD(v62) = v25;
  BYTE4(v62) = (v29 & 0x10) != 0;
  v63 = 0;
  LOBYTE(v64) = 1;
  *(_QWORD *)v65 = 0;
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for GesturePhase<TappableEvent>, (uint64_t)&type metadata for TappableEvent, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for GesturePhase);
  type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for RepeatPhase<TappableEvent>, (uint64_t)&type metadata for TappableEvent, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for RepeatPhase);
  lazy protocol witness table accessor for type EventFilter<TappableEvent> and conformance EventFilter<A>(&lazy protocol witness table cache variable for type RepeatPhase<TappableEvent> and conformance RepeatPhase<A>, &lazy cache variable for type metadata for RepeatPhase<TappableEvent>, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for RepeatPhase, (uint64_t)&protocol conformance descriptor for RepeatPhase<A>);
  v11 = Attribute.init<A>(body:value:flags:update:)();
  v59 = v4;
  v60 = v22;
  v62 = v5;
  v63 = v34;
  v64 = v30;
  v65[0] = v23;
  *(_QWORD *)&v65[1] = v7;
  *(_QWORD *)&v65[3] = v6;
  v65[5] = v41;
  v65[6] = v40;
  v65[7] = v39;
  v65[8] = v38;
  v65[9] = v37;
  v65[10] = v36;
  v65[11] = v35;
  v66 = v10;
  v67 = v9;
  v68 = v33;
  v69 = v32;
  v70 = v26;
  v71 = v31;
  v72 = v29;
  result = outlined release of _GestureInputs((uint64_t)&v59);
  v13 = v43;
  v14 = v44;
  v15 = v45;
  v46 = v11;
  v47 = v43;
  v48 = v44;
  v49 = v45;
  if ((v29 & 8) != 0)
  {
    result = swift_conformsToProtocol2();
    if (!(result ? v21 : 0))
    {
      _gestureModifierProtocolDescriptor();
      v17 = swift_conformsToProtocol();
      v18 = v13 == *MEMORY[0x24BE096C0];
      if (v13 == *MEMORY[0x24BE096C0])
        v19 = 0;
      else
        v19 = v13;
      LOBYTE(v42) = 1;
      if (v17)
        v20 = 2;
      else
        v20 = 1;
      result = specialized _GestureOutputs.reallyWrap<A>(_:kind:properties:inputs:data:)(v20, 0x100000000, a1, v19 | ((unint64_t)v18 << 32), 0x100000000);
      v11 = v46;
      v13 = v47;
      v14 = v48;
      v15 = v49;
    }
  }
  *(_DWORD *)a2 = v11;
  *(_DWORD *)(a2 + 4) = v13;
  *(_QWORD *)(a2 + 8) = v14;
  *(_DWORD *)(a2 + 16) = v15;
  return result;
}

{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  int v10;
  id v11;
  int v12;
  unsigned int v13;
  uint64_t v14;
  int v15;
  int v16;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  unint64_t v27;
  int OffsetAttribute2;
  int v30;
  unsigned int v31;
  int v32;
  int v33;
  int v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  int v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int v44;
  _OWORD v45[6];
  _OWORD v46[2];
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  _BYTE v53[28];
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unsigned int v57;
  unsigned int v58;
  unsigned int v59;
  unsigned int v60;
  uint64_t v61;
  uint64_t v62;
  unsigned int v63;
  unsigned int v64;
  unsigned int v65;
  unsigned int v66;
  unsigned int v67;
  unsigned int v68;
  int v69;
  id v70;
  uint64_t v71;
  int v72;
  int v73;
  int v74;
  int v75;
  int v76;
  uint64_t v77;

  v77 = *MEMORY[0x24BDAC8D0];
  type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for EventFilter<TappableEvent>, (uint64_t)&type metadata for TappableEvent, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EventFilter);
  v22 = v3;
  v54 = __PAIR64__(*(_DWORD *)(a1 + 108), AGGraphCreateOffsetAttribute2());
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for EventFilterEvents<TappableEvent>, (uint64_t)&type metadata for TappableEvent, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EventFilterEvents);
  lazy protocol witness table accessor for type EventFilter<TappableEvent> and conformance EventFilter<A>(&lazy protocol witness table cache variable for type EventFilterEvents<TappableEvent> and conformance EventFilterEvents<A>, &lazy cache variable for type metadata for EventFilterEvents<TappableEvent>, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EventFilterEvents, (uint64_t)"ў;\x1B0}\n");
  v23 = Attribute.init<A>(body:value:flags:update:)();
  v4 = *(_QWORD *)a1;
  v5 = *(_QWORD *)(a1 + 16);
  v31 = *(_DWORD *)(a1 + 24);
  v43 = *(_DWORD *)(a1 + 32);
  v44 = *(_DWORD *)(a1 + 28);
  v41 = *(_DWORD *)(a1 + 8);
  v42 = *(_DWORD *)(a1 + 36);
  v6 = *(_QWORD *)(a1 + 40);
  v7 = *(_QWORD *)(a1 + 48);
  v39 = *(_DWORD *)(a1 + 60);
  v40 = *(_DWORD *)(a1 + 56);
  v37 = *(_DWORD *)(a1 + 68);
  v38 = *(_DWORD *)(a1 + 64);
  v35 = *(_DWORD *)(a1 + 76);
  v36 = *(_DWORD *)(a1 + 72);
  v9 = *(void **)(a1 + 88);
  v8 = *(_QWORD *)(a1 + 96);
  v32 = *(_DWORD *)(a1 + 104);
  v10 = *(_DWORD *)(a1 + 116);
  v30 = *(_DWORD *)(a1 + 112);
  v33 = *(_DWORD *)(a1 + 120);
  v34 = *(_DWORD *)(a1 + 80);
  outlined retain of _GestureInputs(a1);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v11 = v9;
  v24 = v8;
  swift_bridgeObjectRetain();
  OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
  *(_QWORD *)&v47 = v4;
  v27 = v4;
  *(_QWORD *)&v48 = v5;
  v25 = v5;
  DWORD2(v47) = v41;
  *((_QWORD *)&v48 + 1) = __PAIR64__(v44, v31);
  *(_QWORD *)&v49 = __PAIR64__(v42, v43);
  *((_QWORD *)&v49 + 1) = v6;
  *(_QWORD *)&v50 = v7;
  *((_QWORD *)&v50 + 1) = __PAIR64__(v39, v40);
  *(_QWORD *)&v51 = __PAIR64__(v37, v38);
  *((_QWORD *)&v51 + 1) = __PAIR64__(v35, v36);
  LODWORD(v52) = v34;
  *((_QWORD *)&v52 + 1) = v11;
  *(_QWORD *)v53 = v8;
  v26 = v11;
  *(_DWORD *)&v53[8] = v32;
  *(_DWORD *)&v53[12] = OffsetAttribute2;
  *(_DWORD *)&v53[16] = v30;
  *(_DWORD *)&v53[20] = v10;
  *(_DWORD *)&v53[24] = v33;
  v45[2] = v49;
  v45[3] = v50;
  v45[0] = v47;
  v45[1] = v48;
  *(_OWORD *)((char *)v46 + 12) = *(_OWORD *)&v53[12];
  v45[5] = v52;
  v46[0] = *(_OWORD *)v53;
  v45[4] = v51;
  outlined retain of _GestureInputs((uint64_t)&v47);
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  AGGraphCreateOffsetAttribute2();
  v12 = AGGraphCreateOffsetAttribute2();
  specialized static Map2Gesture._makeGesture(modifier:inputs:body:)(v12, (uint64_t)v45, (uint64_t)&v54);
  outlined release of _GestureInputs((uint64_t)&v47);
  v13 = HIDWORD(v54);
  v14 = v55;
  v15 = v56;
  HIDWORD(v54) = v23;
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for GesturePhase<TappableEvent>, (uint64_t)&type metadata for TappableEvent, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for GesturePhase);
  type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for EventFilterPhase<TappableEvent>, (uint64_t)&type metadata for TappableEvent, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EventFilterPhase);
  lazy protocol witness table accessor for type EventFilter<TappableEvent> and conformance EventFilter<A>(&lazy protocol witness table cache variable for type EventFilterPhase<TappableEvent> and conformance EventFilterPhase<A>, &lazy cache variable for type metadata for EventFilterPhase<TappableEvent>, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EventFilterPhase, (uint64_t)&protocol conformance descriptor for EventFilterPhase<A>);
  v16 = Attribute.init<A>(body:value:flags:update:)();
  v54 = v27;
  v56 = v25;
  LODWORD(v55) = v41;
  v57 = v31;
  v58 = v44;
  v61 = v6;
  v62 = v7;
  v59 = v43;
  v60 = v42;
  v63 = v40;
  v64 = v39;
  v65 = v38;
  v66 = v37;
  v67 = v36;
  v68 = v35;
  v69 = v34;
  v70 = v26;
  v71 = v24;
  v72 = v32;
  v73 = OffsetAttribute2;
  v74 = v30;
  v75 = v10;
  v76 = v33;
  result = outlined release of _GestureInputs((uint64_t)&v54);
  if ((v33 & 8) != 0)
  {
    result = swift_conformsToProtocol2();
    if (!(result ? v22 : 0))
    {
      _gestureModifierProtocolDescriptor();
      v19 = swift_conformsToProtocol();
      if (v13 == *MEMORY[0x24BE096C0])
        v20 = 0;
      else
        v20 = v13;
      if (v19)
        v21 = 2;
      else
        v21 = 1;
      result = specialized _GestureOutputs.reallyWrap<A>(_:kind:properties:inputs:data:)(v21, 0x100000000, a1, v20 | ((unint64_t)(v13 == *MEMORY[0x24BE096C0]) << 32), 0x100000000);
    }
  }
  *(_DWORD *)a2 = v16;
  *(_DWORD *)(a2 + 4) = v13;
  *(_QWORD *)(a2 + 8) = v14;
  *(_DWORD *)(a2 + 16) = v15;
  return result;
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int OffsetAttribute2;
  unsigned int v8;
  int v9;
  int v10;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t result;
  int v15;
  uint64_t v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  int v25;
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  v4 = MEMORY[0x24BEE50B0];
  type metadata accessor for StateContainerGesture<DistanceGesture.StateType, SpatialEvent, CGFloat>(0, (unint64_t *)&lazy cache variable for type metadata for StateContainerGesture<DistanceGesture.StateType, SpatialEvent, CGFloat>, (uint64_t)&type metadata for SpatialEvent, MEMORY[0x24BEE50B0], (uint64_t (*)(_QWORD, _QWORD *))type metadata accessor for StateContainerGesture);
  v6 = v5;
  OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
  v8 = AGGraphCreateOffsetAttribute2();
  specialized static EventListener._makeGesture(gesture:inputs:)(v8, a1, (uint64_t)&v18);
  v9 = v18;
  v10 = v19;
  v11 = v20;
  v12 = v21;
  v13 = *(_DWORD *)(a1 + 112);
  v18 = OffsetAttribute2;
  v19 = v9;
  LODWORD(v20) = v13;
  v21 = 0;
  v22 = 0;
  v23 = 1;
  v24 = 0;
  v25 = 0;
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for GesturePhase<CGFloat>, v4, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for GesturePhase);
  type metadata accessor for StateContainerGesture<DistanceGesture.StateType, SpatialEvent, CGFloat>(0, &lazy cache variable for type metadata for StateContainerPhase<DistanceGesture.StateType, CGFloat, SpatialEvent>, v4, (uint64_t)&type metadata for SpatialEvent, (uint64_t (*)(_QWORD, _QWORD *))type metadata accessor for StateContainerPhase);
  lazy protocol witness table accessor for type StateContainerPhase<DistanceGesture.StateType, CGFloat, SpatialEvent> and conformance StateContainerPhase<A, B, C>();
  result = Attribute.init<A>(body:value:flags:update:)();
  v15 = result;
  v18 = result;
  v19 = v10;
  v20 = v11;
  LODWORD(v21) = v12;
  if ((*(_BYTE *)(a1 + 120) & 8) != 0)
  {
    result = swift_conformsToProtocol2();
    if (!(result ? v6 : 0))
    {
      _gestureModifierProtocolDescriptor();
      if (swift_conformsToProtocol())
        v17 = 2;
      else
        v17 = 1;
      result = specialized _GestureOutputs.reallyWrap<A>(_:kind:properties:inputs:data:)(v17, 0x100000000, a1);
      v15 = v18;
      v10 = v19;
      v11 = v20;
      v12 = v21;
    }
  }
  *(_DWORD *)a2 = v15;
  *(_DWORD *)(a2 + 4) = v10;
  *(_QWORD *)(a2 + 8) = v11;
  *(_DWORD *)(a2 + 16) = v12;
  return result;
}

{
  uint64_t v4;
  uint64_t v5;
  int OffsetAttribute2;
  unsigned int v7;
  int v8;
  unsigned int v9;
  uint64_t v10;
  int v11;
  unsigned int v12;
  uint64_t result;
  int v14;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int v21;
  uint64_t v22;
  int v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for MapGesture<TappableEvent, TappableEvent>, (uint64_t)&type metadata for TappableEvent, (uint64_t)&type metadata for TappableEvent, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for MapGesture);
  v5 = v4;
  OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
  v7 = AGGraphCreateOffsetAttribute2();
  specialized static EventListener._makeGesture(gesture:inputs:)(v7, a1, (uint64_t)&v20);
  v8 = v20;
  v9 = v21;
  v10 = v22;
  v11 = v23;
  v12 = *(_DWORD *)(a1 + 112);
  v20 = OffsetAttribute2;
  v21 = v8;
  v22 = v12;
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for GesturePhase<TappableEvent>, (uint64_t)&type metadata for TappableEvent, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for GesturePhase);
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for MapPhase<TappableEvent, TappableEvent>, (uint64_t)&type metadata for TappableEvent, (uint64_t)&type metadata for TappableEvent, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for MapPhase);
  lazy protocol witness table accessor for type MapPhase<TappableEvent, TappableEvent> and conformance MapPhase<A, B>();
  result = Attribute.init<A>(body:value:flags:update:)();
  v14 = result;
  v20 = result;
  v21 = v9;
  v22 = v10;
  v23 = v11;
  if ((*(_BYTE *)(a1 + 120) & 8) != 0)
  {
    result = swift_conformsToProtocol2();
    if (!(result ? v5 : 0))
    {
      v16 = *MEMORY[0x24BE096C0];
      _gestureModifierProtocolDescriptor();
      v17 = swift_conformsToProtocol();
      if (v9 == v16)
        v18 = 0;
      else
        v18 = v9;
      if (v17)
        v19 = 2;
      else
        v19 = 1;
      result = specialized _GestureOutputs.reallyWrap<A>(_:kind:properties:inputs:data:)(v19, 0x100000000, a1, v18 | ((unint64_t)(v9 == v16) << 32), 0x100000000);
      v14 = v20;
      v9 = v21;
      v10 = v22;
      v11 = v23;
    }
  }
  *(_DWORD *)a2 = v14;
  *(_DWORD *)(a2 + 4) = v9;
  *(_QWORD *)(a2 + 8) = v10;
  *(_DWORD *)(a2 + 16) = v11;
  return result;
}

double specialized static ModifierGesture._makeGesture(gesture:inputs:)@<D0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v3;
  unsigned int OffsetAttribute2;
  uint64_t v5;
  int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  id v14;
  unsigned int IndirectAttribute2;
  int v16;
  uint64_t v17;
  int v18;
  uint64_t v20;
  uint64_t v21;
  int v22;
  double result;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  id v27;
  uint64_t v28;
  unsigned int v29;
  unsigned int v30;
  int v31;
  unsigned int v32;
  int v33;
  uint64_t v35;
  unsigned int v36;
  int v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  _QWORD v41[2];
  int v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  _BYTE v49[28];
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  _OWORD v56[2];
  _BYTE v57[32];
  uint64_t v58;
  uint64_t v59;

  v59 = *MEMORY[0x24BDAC8D0];
  type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for CoordinateSpaceGesture<CGFloat>, MEMORY[0x24BEE50B0], (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for CoordinateSpaceGesture);
  v24 = v3;
  OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
  v28 = *(_QWORD *)(a1 + 88);
  v5 = *(_QWORD *)a1;
  v6 = *(_DWORD *)(a1 + 8);
  v30 = OffsetAttribute2;
  v31 = v6;
  v7 = *(_QWORD *)(a1 + 16);
  v8 = *(_DWORD *)(a1 + 24);
  v9 = *(_DWORD *)(a1 + 28);
  v11 = *(_DWORD *)(a1 + 32);
  v10 = *(_DWORD *)(a1 + 36);
  v25 = *(_QWORD *)(a1 + 40);
  v35 = *(_QWORD *)(a1 + 48);
  v12 = *(_DWORD *)(a1 + 56);
  v32 = v12;
  v26 = *(_DWORD *)(a1 + 60);
  v39 = *(_DWORD *)(a1 + 72);
  v40 = *(_DWORD *)(a1 + 68);
  v38 = *(_DWORD *)(a1 + 76);
  v36 = *(_DWORD *)(a1 + 64);
  v37 = *(_DWORD *)(a1 + 80);
  v33 = *(_DWORD *)(a1 + 120);
  v29 = *(_DWORD *)(a1 + 108);
  outlined retain of _GestureInputs(a1);
  AGGraphClearUpdate();
  v27 = (id)AGSubgraphGetCurrent();
  AGSubgraphSetCurrent();
  *(_QWORD *)&v50 = v5;
  *(_QWORD *)&v51 = v7;
  DWORD2(v50) = v6;
  *((_QWORD *)&v51 + 1) = __PAIR64__(v9, v8);
  *(_QWORD *)&v52 = __PAIR64__(v10, v11);
  *((_QWORD *)&v52 + 1) = v25;
  *(_QWORD *)&v53 = v35;
  *((_QWORD *)&v53 + 1) = __PAIR64__(v26, v12);
  *(_QWORD *)&v54 = __PAIR64__(v40, v36);
  *((_QWORD *)&v54 + 1) = __PAIR64__(v38, v39);
  LODWORD(v55) = v37;
  swift_beginAccess();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v13 = CachedEnvironment.animatedPosition(for:)((uint64_t *)&v50);
  swift_endAccess();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  AGSubgraphSetCurrent();

  AGGraphSetUpdate();
  v58 = 0;
  memset(v57, 0, sizeof(v57));
  outlined retain of _GestureInputs(a1);
  specialized _GestureInputs.intern<A>(_:id:)((uint64_t)v57, 0);
  AGGraphClearUpdate();
  v14 = (id)AGSubgraphGetCurrent();
  AGSubgraphSetCurrent();
  IndirectAttribute2 = AGGraphCreateIndirectAttribute2();
  AGGraphSetIndirectAttribute();
  AGSubgraphSetCurrent();

  AGGraphSetUpdate();
  outlined release of _GestureInputs(a1);
  *(_QWORD *)&v50 = __PAIR64__(v29, v30);
  *((_QWORD *)&v50 + 1) = __PAIR64__(IndirectAttribute2, v13);
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  type metadata accessor for [EventID : EventType]();
  type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for CoordinateSpaceEvents<CGFloat>, MEMORY[0x24BEE50B0], (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for CoordinateSpaceEvents);
  lazy protocol witness table accessor for type CoordinateSpaceEvents<CGFloat> and conformance CoordinateSpaceEvents<A>();
  v16 = Attribute.init<A>(body:value:flags:update:)();
  v17 = *(_QWORD *)(a1 + 96);
  v18 = *(_DWORD *)(a1 + 104);
  *(_QWORD *)&v43 = v5;
  DWORD2(v43) = v31;
  *(_QWORD *)&v44 = v7;
  *((_QWORD *)&v44 + 1) = __PAIR64__(v9, v8);
  *(_QWORD *)&v45 = __PAIR64__(v10, v11);
  *((_QWORD *)&v45 + 1) = v25;
  *(_QWORD *)&v46 = v35;
  *((_QWORD *)&v46 + 1) = __PAIR64__(v26, v32);
  *(_QWORD *)&v47 = __PAIR64__(v40, v36);
  *((_QWORD *)&v47 + 1) = __PAIR64__(v38, v39);
  LODWORD(v48) = v37;
  *((_QWORD *)&v48 + 1) = v28;
  *(_QWORD *)v49 = v17;
  *(_DWORD *)&v49[8] = v18;
  *(_DWORD *)&v49[12] = v16;
  *(_QWORD *)&v49[16] = *(_QWORD *)(a1 + 112);
  *(_DWORD *)&v49[24] = v33 | 1;
  v52 = v45;
  v53 = v46;
  v50 = v43;
  v51 = v44;
  *(_OWORD *)((char *)v56 + 12) = *(_OWORD *)&v49[12];
  v55 = v48;
  v56[0] = *(_OWORD *)v49;
  v54 = v47;
  specialized closure #2 in static ModifierGesture._makeGesture(gesture:inputs:)((uint64_t)&v50, (uint64_t)v41);
  outlined release of _GestureInputs((uint64_t)&v43);
  if ((v33 & 8) != 0 && !(swift_conformsToProtocol2() ? v24 : 0))
  {
    _gestureModifierProtocolDescriptor();
    if (swift_conformsToProtocol())
      v20 = 2;
    else
      v20 = 1;
    specialized _GestureOutputs.reallyWrap<A>(_:kind:properties:inputs:data:)(v20, 0x100000000, a1);
  }
  v21 = v41[1];
  v22 = v42;
  result = *(double *)v41;
  *(_QWORD *)a2 = v41[0];
  *(_QWORD *)(a2 + 8) = v21;
  *(_DWORD *)(a2 + 16) = v22;
  return result;
}

uint64_t specialized static ModifierGesture._makeGesture(gesture:inputs:)@<X0>(_DWORD *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v3;
  int OffsetAttribute2;
  unsigned int v5;
  int v6;
  int v7;
  unint64_t v8;
  int v9;
  unsigned int v10;
  unsigned int v11;
  int v12;
  uint64_t result;
  int v14;
  uint64_t v16;
  uint64_t v17;
  int v19;
  int v20;
  unint64_t v21;
  int v22;
  uint64_t v23;
  char v24;
  int v25;
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for DurationGesture<TappableEvent>, (uint64_t)&type metadata for TappableEvent, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for DurationGesture);
  v17 = v3;
  OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
  v5 = AGGraphCreateOffsetAttribute2();
  specialized static EventListener._makeGesture(gesture:inputs:)(v5, (uint64_t)a1, (uint64_t)&v19);
  v6 = v19;
  v7 = v20;
  v8 = v21;
  v9 = v22;
  v10 = a1[2];
  v11 = a1[28];
  v12 = a1[30];
  v19 = OffsetAttribute2;
  v20 = v6;
  v21 = __PAIR64__(v11, v10);
  LOBYTE(v22) = (v12 & 0x10) != 0;
  v23 = 0;
  v24 = 1;
  v25 = 0;
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for GesturePhase<Double>, MEMORY[0x24BEE13C8], (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for GesturePhase);
  type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for DurationPhase<TappableEvent>, (uint64_t)&type metadata for TappableEvent, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for DurationPhase);
  lazy protocol witness table accessor for type EventFilter<TappableEvent> and conformance EventFilter<A>(&lazy protocol witness table cache variable for type DurationPhase<TappableEvent> and conformance DurationPhase<A>, &lazy cache variable for type metadata for DurationPhase<TappableEvent>, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for DurationPhase, (uint64_t)&protocol conformance descriptor for DurationPhase<A>);
  result = Attribute.init<A>(body:value:flags:update:)();
  v14 = result;
  v19 = result;
  v20 = v7;
  v21 = v8;
  v22 = v9;
  if ((v12 & 8) != 0)
  {
    result = swift_conformsToProtocol2();
    if (!(result ? v17 : 0))
    {
      _gestureModifierProtocolDescriptor();
      if (swift_conformsToProtocol())
        v16 = 2;
      else
        v16 = 1;
      result = specialized _GestureOutputs.reallyWrap<A>(_:kind:properties:inputs:data:)(v16, 0x100000000, (uint64_t)a1);
      v14 = v19;
      v7 = v20;
      v8 = v21;
      v9 = v22;
    }
  }
  *(_DWORD *)a2 = v14;
  *(_DWORD *)(a2 + 4) = v7;
  *(_QWORD *)(a2 + 8) = v8;
  *(_DWORD *)(a2 + 16) = v9;
  return result;
}

double specialized closure #2 in static ModifierGesture._makeGesture(gesture:inputs:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int OffsetAttribute2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  double result;
  _QWORD v14[2];
  int v15;

  OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for SingleTapGesture<TappableEvent>, (uint64_t)&type metadata for TappableEvent, (uint64_t)&protocol witness table for TappableEvent, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for SingleTapGesture);
  v6 = v5;
  specialized static Gesture<>._makeGesture(gesture:inputs:)(OffsetAttribute2, (__int128 *)a1, (uint64_t)v14);
  if ((*(_BYTE *)(a1 + 120) & 8) != 0 && !(swift_conformsToProtocol2() ? v6 : 0))
  {
    _gestureModifierProtocolDescriptor();
    v8 = swift_conformsToProtocol();
    if (HIDWORD(v14[0]) == *MEMORY[0x24BE096C0])
      v9 = 0;
    else
      v9 = HIDWORD(v14[0]);
    if (v8)
      v10 = 2;
    else
      v10 = 1;
    specialized _GestureOutputs.reallyWrap<A>(_:kind:properties:inputs:data:)(v10, 0x100000000, a1, v9 | ((unint64_t)(HIDWORD(v14[0]) == *MEMORY[0x24BE096C0]) << 32), 0x100000000);
  }
  v11 = v14[1];
  v12 = v15;
  result = *(double *)v14;
  *(_QWORD *)a2 = v14[0];
  *(_QWORD *)(a2 + 8) = v11;
  *(_DWORD *)(a2 + 16) = v12;
  return result;
}

{
  int OffsetAttribute2;
  uint64_t v6;
  uint64_t v7;
  int v8;
  double result;
  _QWORD v10[2];
  int v11;

  OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
  specialized static Gesture<>._makeGesture(gesture:inputs:)(OffsetAttribute2, (__int128 *)a1, (uint64_t)v10);
  if ((*(_BYTE *)(a1 + 120) & 8) != 0 && !(swift_conformsToProtocol2() ? &type metadata for DistanceGesture : 0))
  {
    _gestureModifierProtocolDescriptor();
    if (swift_conformsToProtocol())
      v6 = 2;
    else
      v6 = 1;
    specialized _GestureOutputs.reallyWrap<A>(_:kind:properties:inputs:data:)(v6, 0x100000000, a1);
  }
  v7 = v10[1];
  v8 = v11;
  result = *(double *)v10;
  *(_QWORD *)a2 = v10[0];
  *(_QWORD *)(a2 + 8) = v7;
  *(_DWORD *)(a2 + 16) = v8;
  return result;
}

uint64_t specialized static EventListener._makeGesture(gesture:inputs:)@<X0>(unsigned int a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unsigned int v6;
  __int128 v7;
  __int128 v8;
  id v9;
  unsigned int v10;
  id v11;
  unsigned int IndirectAttribute2;
  int v13;
  int v14;
  int OffsetAttribute2;
  int v16;
  uint64_t KeyPath;
  unsigned int v18;
  uint64_t result;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  int v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  int v33;
  _OWORD v34[2];
  uint64_t v35;
  uint64_t v36;

  v36 = *MEMORY[0x24BDAC8D0];
  v6 = *(_DWORD *)(a2 + 108);
  v7 = *(_OWORD *)(a2 + 48);
  v30 = *(_OWORD *)(a2 + 32);
  v31 = v7;
  v32 = *(_OWORD *)(a2 + 64);
  v33 = *(_DWORD *)(a2 + 80);
  v8 = *(_OWORD *)(a2 + 16);
  v28 = *(_OWORD *)a2;
  v29 = v8;
  AGGraphClearUpdate();
  v9 = (id)AGSubgraphGetCurrent();
  AGSubgraphSetCurrent();
  v24 = v30;
  v25 = v31;
  v26 = v32;
  v27 = v33;
  v22 = v28;
  v23 = v29;
  swift_beginAccess();
  outlined retain of _ViewInputs((uint64_t)&v28);
  v10 = CachedEnvironment.animatedPosition(for:)((uint64_t *)&v22);
  swift_endAccess();
  outlined release of _ViewInputs((uint64_t)&v28);
  AGSubgraphSetCurrent();

  AGGraphSetUpdate();
  v35 = 0;
  memset(v34, 0, sizeof(v34));
  outlined retain of _GestureInputs(a2);
  specialized _GestureInputs.intern<A>(_:id:)((uint64_t)v34, 0);
  AGGraphClearUpdate();
  v11 = (id)AGSubgraphGetCurrent();
  AGSubgraphSetCurrent();
  IndirectAttribute2 = AGGraphCreateIndirectAttribute2();
  AGGraphSetIndirectAttribute();
  AGSubgraphSetCurrent();

  AGGraphSetUpdate();
  outlined release of _GestureInputs(a2);
  v13 = *(_DWORD *)(a2 + 112);
  v14 = *(_DWORD *)(a2 + 120);
  *(_QWORD *)&v22 = __PAIR64__(v6, a1);
  *((_QWORD *)&v22 + 1) = __PAIR64__(IndirectAttribute2, v10);
  LODWORD(v23) = v13;
  BYTE4(v23) = v14 & 1;
  BYTE5(v23) = (v14 & 2) != 0;
  *((_QWORD *)&v23 + 1) = 0;
  *(_QWORD *)&v24 = 0;
  DWORD2(v24) = 0;
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EventListenerPhase<SpatialEvent>.Value, (uint64_t)&type metadata for SpatialEvent, (uint64_t)&protocol witness table for SpatialEvent, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EventListenerPhase.Value);
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EventListenerPhase<SpatialEvent>, (uint64_t)&type metadata for SpatialEvent, (uint64_t)&protocol witness table for SpatialEvent, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EventListenerPhase);
  lazy protocol witness table accessor for type EventListenerPhase<SpatialEvent> and conformance EventListenerPhase<A>();
  LODWORD(v9) = Attribute.init<A>(body:value:flags:update:)();
  OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
  v16 = *MEMORY[0x24BE096C0];
  *(_QWORD *)(a3 + 8) = MEMORY[0x24BEE4AF8];
  *(_DWORD *)(a3 + 16) = 0;
  *(_DWORD *)a3 = OffsetAttribute2;
  *(_DWORD *)(a3 + 4) = v16;
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EventListener<SpatialEvent>, (uint64_t)&type metadata for SpatialEvent, (uint64_t)&protocol witness table for SpatialEvent, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EventListener);
  KeyPath = swift_getKeyPath();
  LODWORD(v22) = (_DWORD)v9;
  *((_QWORD *)&v22 + 1) = KeyPath;
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  type metadata accessor for ArrayWith2Inline<(String, String)>(0);
  type metadata accessor for Focus<EventListenerPhase<SpatialEvent>.Value, ArrayWith2Inline<(String, String)>>(0, &lazy cache variable for type metadata for Focus<EventListenerPhase<SpatialEvent>.Value, ArrayWith2Inline<(String, String)>>, &lazy cache variable for type metadata for EventListenerPhase<SpatialEvent>.Value, (uint64_t)&type metadata for SpatialEvent, (uint64_t)&protocol witness table for SpatialEvent);
  lazy protocol witness table accessor for type Focus<EventListenerPhase<SpatialEvent>.Value, ArrayWith2Inline<(String, String)>> and conformance Focus<A, B>();
  v18 = Attribute.init<A>(body:value:flags:update:)();
  result = swift_release();
  if ((v14 & 8) != 0)
  {
    _gestureModifierProtocolDescriptor();
    v20 = swift_conformsToProtocol();
    LOBYTE(v22) = 1;
    if (v20)
      v21 = 2;
    else
      v21 = 1;
    return specialized _GestureOutputs.reallyWrap<A>(_:kind:properties:inputs:data:)(v21, v18, a2);
  }
  return result;
}

{
  unsigned int v6;
  __int128 v7;
  __int128 v8;
  id v9;
  unsigned int v10;
  id v11;
  unsigned int IndirectAttribute2;
  int v13;
  int v14;
  int OffsetAttribute2;
  int v16;
  uint64_t KeyPath;
  unsigned int v18;
  uint64_t result;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  int v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  int v35;
  _OWORD v36[2];
  uint64_t v37;
  uint64_t v38;

  v38 = *MEMORY[0x24BDAC8D0];
  v6 = *(_DWORD *)(a2 + 108);
  v7 = *(_OWORD *)(a2 + 48);
  v32 = *(_OWORD *)(a2 + 32);
  v33 = v7;
  v34 = *(_OWORD *)(a2 + 64);
  v35 = *(_DWORD *)(a2 + 80);
  v8 = *(_OWORD *)(a2 + 16);
  v30 = *(_OWORD *)a2;
  v31 = v8;
  AGGraphClearUpdate();
  v9 = (id)AGSubgraphGetCurrent();
  AGSubgraphSetCurrent();
  v26 = v32;
  v27 = v33;
  v28 = v34;
  v29 = v35;
  v24 = v30;
  v25 = v31;
  swift_beginAccess();
  outlined retain of _ViewInputs((uint64_t)&v30);
  v10 = CachedEnvironment.animatedPosition(for:)((uint64_t *)&v24);
  swift_endAccess();
  outlined release of _ViewInputs((uint64_t)&v30);
  AGSubgraphSetCurrent();

  AGGraphSetUpdate();
  v37 = 0;
  memset(v36, 0, sizeof(v36));
  outlined retain of _GestureInputs(a2);
  specialized _GestureInputs.intern<A>(_:id:)((uint64_t)v36, 0);
  AGGraphClearUpdate();
  v11 = (id)AGSubgraphGetCurrent();
  AGSubgraphSetCurrent();
  IndirectAttribute2 = AGGraphCreateIndirectAttribute2();
  AGGraphSetIndirectAttribute();
  AGSubgraphSetCurrent();

  AGGraphSetUpdate();
  outlined release of _GestureInputs(a2);
  v13 = *(_DWORD *)(a2 + 112);
  v14 = *(_DWORD *)(a2 + 120);
  *(_QWORD *)&v24 = __PAIR64__(v6, a1);
  *((_QWORD *)&v24 + 1) = __PAIR64__(IndirectAttribute2, v10);
  LODWORD(v25) = v13;
  BYTE4(v25) = v14 & 1;
  BYTE5(v25) = (v14 & 2) != 0;
  *((_QWORD *)&v25 + 1) = 0;
  *(_QWORD *)&v26 = 0;
  DWORD2(v26) = 0;
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EventListenerPhase<TappableEvent>.Value, (uint64_t)&type metadata for TappableEvent, (uint64_t)&protocol witness table for TappableEvent, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EventListenerPhase.Value);
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EventListenerPhase<TappableEvent>, (uint64_t)&type metadata for TappableEvent, (uint64_t)&protocol witness table for TappableEvent, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EventListenerPhase);
  lazy protocol witness table accessor for type EventListenerPhase<TappableEvent> and conformance EventListenerPhase<A>();
  LODWORD(v9) = Attribute.init<A>(body:value:flags:update:)();
  OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
  v16 = *MEMORY[0x24BE096C0];
  *(_QWORD *)(a3 + 8) = MEMORY[0x24BEE4AF8];
  *(_DWORD *)(a3 + 16) = 0;
  *(_DWORD *)a3 = OffsetAttribute2;
  *(_DWORD *)(a3 + 4) = v16;
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EventListener<TappableEvent>, (uint64_t)&type metadata for TappableEvent, (uint64_t)&protocol witness table for TappableEvent, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EventListener);
  KeyPath = swift_getKeyPath();
  LODWORD(v24) = (_DWORD)v9;
  *((_QWORD *)&v24 + 1) = KeyPath;
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  type metadata accessor for ArrayWith2Inline<(String, String)>(0);
  type metadata accessor for Focus<EventListenerPhase<SpatialEvent>.Value, ArrayWith2Inline<(String, String)>>(0, &lazy cache variable for type metadata for Focus<EventListenerPhase<TappableEvent>.Value, ArrayWith2Inline<(String, String)>>, &lazy cache variable for type metadata for EventListenerPhase<TappableEvent>.Value, (uint64_t)&type metadata for TappableEvent, (uint64_t)&protocol witness table for TappableEvent);
  lazy protocol witness table accessor for type Focus<EventListenerPhase<TappableEvent>.Value, ArrayWith2Inline<(String, String)>> and conformance Focus<A, B>();
  v18 = Attribute.init<A>(body:value:flags:update:)();
  result = swift_release();
  if ((v14 & 8) != 0)
  {
    _gestureModifierProtocolDescriptor();
    v20 = swift_conformsToProtocol();
    LODWORD(v21) = *(_DWORD *)(a3 + 4);
    v22 = (_DWORD)v21 == v16;
    if ((_DWORD)v21 == v16)
      v21 = 0;
    else
      v21 = v21;
    LOBYTE(v24) = 1;
    if (v20)
      v23 = 2;
    else
      v23 = 1;
    return specialized _GestureOutputs.reallyWrap<A>(_:kind:properties:inputs:data:)(v23, v18, a2, v21 | ((unint64_t)v22 << 32), 0x100000000);
  }
  return result;
}

uint64_t TapGesture.count.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t TapGesture.count.setter(uint64_t result)
{
  _QWORD *v1;

  *v1 = result;
  return result;
}

uint64_t (*TapGesture.count.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

SwiftUI::TapGesture __swiftcall TapGesture.init(count:)(SwiftUI::TapGesture count)
{
  SwiftUI::TapGesture *v1;

  v1->count = count.count;
  return count;
}

uint64_t static TapGesture._makeGesture(gesture:inputs:)@<X0>(int *a1@<X0>, _OWORD *a2@<X1>, uint64_t a3@<X8>)
{
  int v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  int v8;
  uint64_t v9;
  int v10;
  uint64_t result;
  _DWORD v12[2];
  uint64_t v13;
  int v14;
  _OWORD v15[6];
  _OWORD v16[2];
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  v4 = *a1;
  v5 = a2[5];
  v15[4] = a2[4];
  v15[5] = v5;
  v16[0] = a2[6];
  *(_OWORD *)((char *)v16 + 12) = *(_OWORD *)((char *)a2 + 108);
  v6 = a2[1];
  v15[0] = *a2;
  v15[1] = v6;
  v7 = a2[3];
  v15[2] = a2[2];
  v15[3] = v7;
  v12[0] = v4;
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  type metadata accessor for ModifierGesture<RequiredTapCountWriter<TappableEvent>, ModifierGesture<CategoryGesture<TappableEvent>, ModifierGesture<RepeatGesture<TappableEvent>, SingleTapGesture<TappableEvent>>>>();
  lazy protocol witness table accessor for type TapGesture.Child and conformance TapGesture.Child();
  Attribute.init<A>(body:value:flags:update:)();
  specialized static ModifierGesture._makeGesture(gesture:inputs:)((uint64_t)v15, (uint64_t)v12);
  v8 = v12[1];
  v9 = v13;
  v10 = v14;
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for GesturePhase<()>, MEMORY[0x24BEE4AE0] + 8, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for GesturePhase);
  lazy protocol witness table accessor for type TapGesture.Phase and conformance TapGesture.Phase();
  result = Attribute.init<A>(body:value:flags:update:)();
  *(_DWORD *)a3 = result;
  *(_DWORD *)(a3 + 4) = v8;
  *(_QWORD *)(a3 + 8) = v9;
  *(_DWORD *)(a3 + 16) = v10;
  return result;
}

uint64_t *TapGesture.Child.value.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t *result;
  uint64_t v3;

  result = (uint64_t *)AGGraphGetValue();
  v3 = *result;
  if (*result <= 0)
  {
    result = (uint64_t *)_assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    *(_QWORD *)a1 = v3;
    *(_QWORD *)(a1 + 8) = 0x3FD6666666666666;
    *(_QWORD *)(a1 + 16) = 8 * (v3 == 1);
    *(_BYTE *)(a1 + 24) = 1;
    *(_QWORD *)(a1 + 32) = v3;
    *(_BYTE *)(a1 + 40) = 0;
  }
  return result;
}

double protocol witness for static Rule.initialValue.getter in conformance TapGesture.Child@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)&result = 2;
  *(_OWORD *)(a1 + 24) = xmmword_23528B9A0;
  *(_BYTE *)(a1 + 40) = 0;
  return result;
}

uint64_t *protocol witness for Rule.value.getter in conformance TapGesture.Child@<X0>(uint64_t a1@<X8>)
{
  return TapGesture.Child.value.getter(a1);
}

uint64_t protocol witness for Rule.value.getter in conformance TapGesture.Phase@<X0>(_BYTE *a1@<X8>)
{
  uint64_t Value;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;

  type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for GesturePhase<TappableEvent>, (uint64_t)&type metadata for TappableEvent, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for GesturePhase);
  Value = AGGraphGetValue();
  v3 = *(_QWORD *)Value;
  v4 = *(_QWORD *)(Value + 8);
  v5 = *(_QWORD *)(Value + 16);
  v6 = *(_BYTE *)(Value + 24);
  outlined copy of GesturePhase<TappableEvent>(*(_QWORD *)Value, v4, v5, v6);
  specialized GesturePhase.withValue<A>(_:)(v3, v4, v5, v6, a1);
  return outlined consume of GesturePhase<TappableEvent>(v3, v4, v5, v6);
}

uint64_t View.onTapGesture(count:perform:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _QWORD v15[3];

  v10 = swift_allocObject();
  *(_QWORD *)(v10 + 16) = a2;
  *(_QWORD *)(v10 + 24) = a3;
  v15[0] = a1;
  v15[1] = partial apply for thunk for @callee_guaranteed (@guaranteed RBDisplayList) -> ();
  v15[2] = v10;
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for _EndedGesture<TapGesture>, (uint64_t)&type metadata for TapGesture, (uint64_t)&protocol witness table for TapGesture, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for _EndedGesture);
  v12 = v11;
  v13 = lazy protocol witness table accessor for type _EndedGesture<TapGesture> and conformance _EndedGesture<A>();
  swift_retain();
  View.gesture<A>(_:including:)((uint64_t)v15, 3, a4, v12, a5, v13);
  return swift_release();
}

void one-time initialization function for tapMovementThreshold()
{
  tapMovementThreshold = 0x4046800000000000;
}

double tapDurationThreshold.getter()
{
  return 0.75;
}

void SingleTapGesture.body.getter(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _OWORD v9[2];
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  if (one-time initialization token for tapMovementThreshold != -1)
    swift_once();
  v2 = tapMovementThreshold;
  v10 = 0;
  memset(v9, 0, sizeof(v9));
  v11 = 2;
  outlined init with copy of CoordinateSpace((uint64_t)v9, (uint64_t)&v8);
  outlined init with copy of CoordinateSpaceGesture<CGFloat>((uint64_t)&v8, (uint64_t)&v14);
  v12 = 0;
  v13 = v2;
  outlined destroy of CoordinateSpaceGesture<CGFloat>((uint64_t)&v8);
  outlined destroy of CoordinateSpace((uint64_t)v9);
  v3 = *(_QWORD *)(a1 + 16);
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8);
  EventListener.init(ignoresOtherEvents:)(0, v9);
  v6 = type metadata accessor for EventListener(0, v3, v4, v5);
  v7 = MEMORY[0x23B7C9C04](&protocol conformance descriptor for EventListener<A>, v6);
  Gesture.discrete(_:)(1, v6, v7, (uint64_t)&v8);
}

BOOL closure #1 in SingleTapGesture.body.getter(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16) == 1;
}

void protocol witness for Gesture.body.getter in conformance SingleTapGesture<A>(uint64_t a1)
{
  SingleTapGesture.body.getter(a1);
}

uint64_t type metadata accessor for SingleTapGesture(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for SingleTapGesture);
}

unint64_t lazy protocol witness table accessor for type TapGesture.Child and conformance TapGesture.Child()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TapGesture.Child and conformance TapGesture.Child;
  if (!lazy protocol witness table cache variable for type TapGesture.Child and conformance TapGesture.Child)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for TapGesture.Child, &unk_25060E5E8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TapGesture.Child and conformance TapGesture.Child);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type TapGesture.Phase and conformance TapGesture.Phase()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TapGesture.Phase and conformance TapGesture.Phase;
  if (!lazy protocol witness table cache variable for type TapGesture.Phase and conformance TapGesture.Phase)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for TapGesture.Phase, &unk_25060E610);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TapGesture.Phase and conformance TapGesture.Phase);
  }
  return result;
}

uint64_t sub_2350B96E8()
{
  swift_release();
  return swift_deallocObject();
}

unint64_t lazy protocol witness table accessor for type _EndedGesture<TapGesture> and conformance _EndedGesture<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type _EndedGesture<TapGesture> and conformance _EndedGesture<A>;
  if (!lazy protocol witness table cache variable for type _EndedGesture<TapGesture> and conformance _EndedGesture<A>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for _EndedGesture<TapGesture>, (uint64_t)&type metadata for TapGesture, (uint64_t)&protocol witness table for TapGesture, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for _EndedGesture);
    result = MEMORY[0x23B7C9C04]("!q<\x1Bx/\v", v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _EndedGesture<TapGesture> and conformance _EndedGesture<A>);
  }
  return result;
}

uint64_t outlined init with copy of CoordinateSpaceGesture<CGFloat>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for CoordinateSpaceGesture<CGFloat>, MEMORY[0x24BEE50B0], (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for CoordinateSpaceGesture);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of CoordinateSpaceGesture<CGFloat>(uint64_t a1)
{
  uint64_t v2;

  type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for CoordinateSpaceGesture<CGFloat>, MEMORY[0x24BEE50B0], (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for CoordinateSpaceGesture);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t outlined destroy of ModifierGesture<CoordinateSpaceGesture<CGFloat>, DistanceGesture>(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for ModifierGesture<CoordinateSpaceGesture<CGFloat>, DistanceGesture>();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t associated type witness table accessor for Gesture.Body : Gesture in SingleTapGesture<A>()
{
  return swift_getOpaqueTypeConformance2();
}

ValueMetadata *type metadata accessor for TapGesture()
{
  return &type metadata for TapGesture;
}

uint64_t sub_2350B98A4(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[2];

  v1 = *a1;
  v2 = a1[1];
  type metadata accessor for AddGestureModifier<_EndedGesture<TapGesture>>(255);
  v5 = type metadata accessor for ModifiedContent(255, v1, v3, v4);
  v7[0] = v2;
  v7[1] = &protocol witness table for AddGestureModifier<A>;
  return MEMORY[0x23B7C9C04]("I{:\x1B̧\t", v5, v7);
}

void type metadata accessor for AddGestureModifier<_EndedGesture<TapGesture>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for AddGestureModifier<_EndedGesture<TapGesture>>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for _EndedGesture<TapGesture>, (uint64_t)&type metadata for TapGesture, (uint64_t)&protocol witness table for TapGesture, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for _EndedGesture);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type _EndedGesture<TapGesture> and conformance _EndedGesture<A>();
    v6 = type metadata accessor for AddGestureModifier(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for AddGestureModifier<_EndedGesture<TapGesture>>);
  }
}

void sub_2350B9980(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  type metadata accessor for EventFilter(255, *a1, a3, a4);
  type metadata accessor for ModifierGesture<CoordinateSpaceGesture<CGFloat>, DistanceGesture>();
  lazy protocol witness table accessor for type ModifierGesture<CategoryGesture<TappableEvent>, ModifierGesture<RepeatGesture<TappableEvent>, SingleTapGesture<TappableEvent>>> and conformance ModifierGesture<A, B>(&lazy protocol witness table cache variable for type ModifierGesture<CoordinateSpaceGesture<CGFloat>, DistanceGesture> and conformance ModifierGesture<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifierGesture<CoordinateSpaceGesture<CGFloat>, DistanceGesture>);
  type metadata accessor for Map2Gesture();
}

void sub_2350B99E4()
{
  type metadata accessor for ModifierGesture<DurationGesture<TappableEvent>, EventListener<TappableEvent>>();
  lazy protocol witness table accessor for type ModifierGesture<CategoryGesture<TappableEvent>, ModifierGesture<RepeatGesture<TappableEvent>, SingleTapGesture<TappableEvent>>> and conformance ModifierGesture<A, B>(&lazy protocol witness table cache variable for type ModifierGesture<DurationGesture<TappableEvent>, EventListener<TappableEvent>> and conformance ModifierGesture<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifierGesture<DurationGesture<TappableEvent>, EventListener<TappableEvent>>);
  type metadata accessor for Map2Gesture();
}

void sub_2350B9A1C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  type metadata accessor for DependentGesture(255, v4, a3, a4);
  v8 = type metadata accessor for MapGesture(255, v4, v4, v6);
  v9 = type metadata accessor for EventListener(255, v4, *(_QWORD *)(v5 + 8), v7);
  MEMORY[0x23B7C9C04]("ɜ;\x1B\b}\n", v8);
  MEMORY[0x23B7C9C04](&protocol conformance descriptor for EventListener<A>, v9);
  type metadata accessor for ModifierGesture();
}

void sub_2350B9A90(uint64_t a1)
{
  uint64_t v1;

  MEMORY[0x23B7C9C04](&protocol conformance descriptor for DependentGesture<A>, v1);
  MEMORY[0x23B7C9C04](&protocol conformance descriptor for ModifierGesture<A, B>, a1);
  type metadata accessor for ModifierGesture();
}

void sub_2350B9AD0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  MEMORY[0x23B7C9C04](&protocol conformance descriptor for Map2Gesture<A, B, C>, v2);
  MEMORY[0x23B7C9C04](v1, a1);
  type metadata accessor for ModifierGesture();
}

void sub_2350B9B0C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  MEMORY[0x23B7C9C04](v3, v1);
  MEMORY[0x23B7C9C04](v2, a1);
  type metadata accessor for ModifierGesture();
}

void sub_2350B9B40(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  MEMORY[0x23B7C9C04](&protocol conformance descriptor for EventFilter<A>, v1);
  MEMORY[0x23B7C9C04](v2, a1);
  type metadata accessor for ModifierGesture();
}

void *type metadata accessor for TapGesture.Phase()
{
  return &unk_25060E610;
}

void *type metadata accessor for TapGesture.Child()
{
  return &unk_25060E5E8;
}

void type metadata accessor for StateContainerGesture<DistanceGesture.StateType, SpatialEvent, CGFloat>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD, _QWORD *))
{
  unint64_t v6;
  uint64_t v7;
  _QWORD v8[4];

  if (!*a2)
  {
    v8[0] = &type metadata for DistanceGesture.StateType;
    v8[1] = a3;
    v8[2] = a4;
    v8[3] = &protocol witness table for DistanceGesture.StateType;
    v6 = a5(0, v8);
    if (!v7)
      atomic_store(v6, a2);
  }
}

unint64_t lazy protocol witness table accessor for type StateContainerPhase<DistanceGesture.StateType, CGFloat, SpatialEvent> and conformance StateContainerPhase<A, B, C>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type StateContainerPhase<DistanceGesture.StateType, CGFloat, SpatialEvent> and conformance StateContainerPhase<A, B, C>;
  if (!lazy protocol witness table cache variable for type StateContainerPhase<DistanceGesture.StateType, CGFloat, SpatialEvent> and conformance StateContainerPhase<A, B, C>)
  {
    type metadata accessor for StateContainerGesture<DistanceGesture.StateType, SpatialEvent, CGFloat>(255, &lazy cache variable for type metadata for StateContainerPhase<DistanceGesture.StateType, CGFloat, SpatialEvent>, MEMORY[0x24BEE50B0], (uint64_t)&type metadata for SpatialEvent, (uint64_t (*)(_QWORD, _QWORD *))type metadata accessor for StateContainerPhase);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for StateContainerPhase<A, B, C>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StateContainerPhase<DistanceGesture.StateType, CGFloat, SpatialEvent> and conformance StateContainerPhase<A, B, C>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type EventListenerPhase<SpatialEvent> and conformance EventListenerPhase<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type EventListenerPhase<SpatialEvent> and conformance EventListenerPhase<A>;
  if (!lazy protocol witness table cache variable for type EventListenerPhase<SpatialEvent> and conformance EventListenerPhase<A>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EventListenerPhase<SpatialEvent>, (uint64_t)&type metadata for SpatialEvent, (uint64_t)&protocol witness table for SpatialEvent, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EventListenerPhase);
    result = MEMORY[0x23B7C9C04]("Io<\x1B(0\v", v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EventListenerPhase<SpatialEvent> and conformance EventListenerPhase<A>);
  }
  return result;
}

uint64_t sub_2350B9D00()
{
  return 16;
}

__n128 sub_2350B9D0C(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

unint64_t lazy protocol witness table accessor for type Focus<EventListenerPhase<SpatialEvent>.Value, ArrayWith2Inline<(String, String)>> and conformance Focus<A, B>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type Focus<EventListenerPhase<SpatialEvent>.Value, ArrayWith2Inline<(String, String)>> and conformance Focus<A, B>;
  if (!lazy protocol witness table cache variable for type Focus<EventListenerPhase<SpatialEvent>.Value, ArrayWith2Inline<(String, String)>> and conformance Focus<A, B>)
  {
    type metadata accessor for Focus<EventListenerPhase<SpatialEvent>.Value, ArrayWith2Inline<(String, String)>>(255, &lazy cache variable for type metadata for Focus<EventListenerPhase<SpatialEvent>.Value, ArrayWith2Inline<(String, String)>>, &lazy cache variable for type metadata for EventListenerPhase<SpatialEvent>.Value, (uint64_t)&type metadata for SpatialEvent, (uint64_t)&protocol witness table for SpatialEvent);
    result = MEMORY[0x23B7C9C04](MEMORY[0x24BE09658], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Focus<EventListenerPhase<SpatialEvent>.Value, ArrayWith2Inline<(String, String)>> and conformance Focus<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type CategoryGesture<TappableEvent>.Combiner<TappableEvent> and conformance CategoryGesture<A>.Combiner<A1>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type CategoryGesture<TappableEvent>.Combiner<TappableEvent> and conformance CategoryGesture<A>.Combiner<A1>;
  if (!lazy protocol witness table cache variable for type CategoryGesture<TappableEvent>.Combiner<TappableEvent> and conformance CategoryGesture<A>.Combiner<A1>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for CategoryGesture<TappableEvent>.Combiner<TappableEvent>, (uint64_t)&type metadata for TappableEvent, (uint64_t)&type metadata for TappableEvent, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for CategoryGesture.Combiner);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for CategoryGesture<A>.Combiner<A1>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CategoryGesture<TappableEvent>.Combiner<TappableEvent> and conformance CategoryGesture<A>.Combiner<A1>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type CoordinateSpaceEvents<CGFloat> and conformance CoordinateSpaceEvents<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type CoordinateSpaceEvents<CGFloat> and conformance CoordinateSpaceEvents<A>;
  if (!lazy protocol witness table cache variable for type CoordinateSpaceEvents<CGFloat> and conformance CoordinateSpaceEvents<A>)
  {
    type metadata accessor for MutableBox<CachedEnvironment>(255, &lazy cache variable for type metadata for CoordinateSpaceEvents<CGFloat>, MEMORY[0x24BEE50B0], (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for CoordinateSpaceEvents);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for CoordinateSpaceEvents<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CoordinateSpaceEvents<CGFloat> and conformance CoordinateSpaceEvents<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type EventListenerPhase<TappableEvent> and conformance EventListenerPhase<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type EventListenerPhase<TappableEvent> and conformance EventListenerPhase<A>;
  if (!lazy protocol witness table cache variable for type EventListenerPhase<TappableEvent> and conformance EventListenerPhase<A>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for EventListenerPhase<TappableEvent>, (uint64_t)&type metadata for TappableEvent, (uint64_t)&protocol witness table for TappableEvent, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EventListenerPhase);
    result = MEMORY[0x23B7C9C04]("Io<\x1B(0\v", v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EventListenerPhase<TappableEvent> and conformance EventListenerPhase<A>);
  }
  return result;
}

void type metadata accessor for Focus<EventListenerPhase<SpatialEvent>.Value, ArrayWith2Inline<(String, String)>>(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t a4, uint64_t a5)
{
  unint64_t v6;
  uint64_t v7;

  if (!*a2)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, a3, a4, a5, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EventListenerPhase.Value);
    type metadata accessor for ArrayWith2Inline<(String, String)>(255);
    v6 = type metadata accessor for Focus();
    if (!v7)
      atomic_store(v6, a2);
  }
}

unint64_t lazy protocol witness table accessor for type Focus<EventListenerPhase<TappableEvent>.Value, ArrayWith2Inline<(String, String)>> and conformance Focus<A, B>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type Focus<EventListenerPhase<TappableEvent>.Value, ArrayWith2Inline<(String, String)>> and conformance Focus<A, B>;
  if (!lazy protocol witness table cache variable for type Focus<EventListenerPhase<TappableEvent>.Value, ArrayWith2Inline<(String, String)>> and conformance Focus<A, B>)
  {
    type metadata accessor for Focus<EventListenerPhase<SpatialEvent>.Value, ArrayWith2Inline<(String, String)>>(255, &lazy cache variable for type metadata for Focus<EventListenerPhase<TappableEvent>.Value, ArrayWith2Inline<(String, String)>>, &lazy cache variable for type metadata for EventListenerPhase<TappableEvent>.Value, (uint64_t)&type metadata for TappableEvent, (uint64_t)&protocol witness table for TappableEvent);
    result = MEMORY[0x23B7C9C04](MEMORY[0x24BE09658], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Focus<EventListenerPhase<TappableEvent>.Value, ArrayWith2Inline<(String, String)>> and conformance Focus<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type MapPhase<TappableEvent, TappableEvent> and conformance MapPhase<A, B>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type MapPhase<TappableEvent, TappableEvent> and conformance MapPhase<A, B>;
  if (!lazy protocol witness table cache variable for type MapPhase<TappableEvent, TappableEvent> and conformance MapPhase<A, B>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for MapPhase<TappableEvent, TappableEvent>, (uint64_t)&type metadata for TappableEvent, (uint64_t)&type metadata for TappableEvent, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for MapPhase);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for MapPhase<A, B>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MapPhase<TappableEvent, TappableEvent> and conformance MapPhase<A, B>);
  }
  return result;
}

void AnyTextFilterEffect.apply(_:at:to:context:in:)()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void AnyTextFilterEffect.drawingOutsets.getter()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

id AnyTextFilterEffect.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for AnyTextFilterEffect();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for AnyTextFilterEffect()
{
  return objc_opt_self();
}

uint64_t type metadata completion function for TextFilterEffect()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    result = swift_initClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t TextFilterEffect.AnimationInfo.updateLayout(effect:identifier:context:)(uint64_t a1, Swift::UInt64 a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v10;
  uint64_t v11;
  uint64_t AssociatedTypeWitness;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  uint64_t v25;
  int64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  Swift::UInt64 v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t AssociatedConformanceWitness;
  uint64_t (*v42)(uint64_t, uint64_t);
  uint64_t v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t result;
  _QWORD v48[2];
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  Swift::UInt64 v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  char *v66;
  double v67[3];
  uint64_t v68[8];
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;

  v7 = v6;
  v60 = a6;
  v54 = a4;
  v53 = a3;
  v58 = a1;
  v10 = *(_QWORD *)(*v6 + 112);
  v11 = *(_QWORD *)(*(_QWORD *)(*v6 + 120) + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v13 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v56 = (char *)v48 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v15);
  v61 = (char *)v48 - v16;
  v59 = type metadata accessor for Text.Effect.DrawableContent(0, v10, v11, v17);
  v57 = *(_QWORD *)(v59 - 8);
  MEMORY[0x24BDAC7A8](v59);
  v66 = (char *)v48 - v18;
  type metadata accessor for Text.Effect.ConcreteLayoutState(0, v10, v11, v19);
  v20 = (*(uint64_t (**)(uint64_t, uint64_t))(v11 + 128))(v10, v11);
  v21 = Text.Effect.ConcreteLayoutState.__allocating_init(state:)(v20);
  swift_beginAccess();
  v55 = a5;
  v22 = *(_QWORD *)(a5 + 48);
  if (!*(_QWORD *)(v22 + 16))
    goto LABEL_15;
  swift_retain();
  v23 = specialized __RawDictionaryStorage.find<A>(_:)(a2, v21);
  if ((v24 & 1) == 0)
  {
    swift_release();
LABEL_15:
    swift_endAccess();
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  v62 = v13;
  v63 = AssociatedTypeWitness;
  v25 = *(_QWORD *)(*(_QWORD *)(v22 + 56) + 16 * v23);
  swift_bridgeObjectRetain();
  swift_endAccess();
  swift_release();
  v26 = *(_QWORD *)(v25 + 16);
  v64 = v21;
  v65 = v7;
  if (v26)
  {
    v52 = a2;
    v68[0] = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v26, 0);
    v27 = 0;
    v28 = v68[0];
    v29 = *(_QWORD *)(v68[0] + 16);
    do
    {
      v30 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v25 + 8 * v27 + 32) + 96) + 16);
      v68[0] = v28;
      v31 = *(_QWORD *)(v28 + 24);
      if (v29 >= v31 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v31 > 1, v29 + 1, 1);
        v28 = v68[0];
      }
      ++v27;
      *(_QWORD *)(v28 + 16) = v29 + 1;
      *(_QWORD *)(v28 + 8 * v29++ + 32) = v30;
    }
    while (v26 != v27);
    swift_bridgeObjectRelease();
    v21 = v64;
    v7 = v65;
    v32 = v60;
    a2 = v52;
  }
  else
  {
    swift_bridgeObjectRelease();
    v28 = MEMORY[0x24BEE4AF8];
    v32 = v60;
  }
  LODWORD(v60) = specialized static Array<A>.== infix(_:_:)(v28, v7[2]);
  if ((v60 & 1) != 0)
  {
    Text.Effect.BaseContext.content<A>(for:key:)(v10, a2, v21, v53, v54, v55, v32, v10, v11);
    v67[0] = *(double *)(v32 + 56);
    TextEffectsAnimationController.state(for:time:)(a2, v67, (uint64_t)v68);
    v54 = v69;
    v55 = v70;
    v33 = v71;
    v34 = v72;
    v48[1] = v71;
    v51 = _ViewInputs.base.modify(v69, v70);
    v52 = v35;
    v48[0] = v34;
    v49 = _ViewInputs.base.modify(v33, v34);
    v50 = v36;
    v53 = (uint64_t)v7 + *(_QWORD *)(*v7 + 136);
    v37 = v53;
    swift_beginAccess();
    v38 = v63;
    v39 = v62;
    v40 = v56;
    (*(void (**)(char *, uint64_t, uint64_t))(v62 + 16))(v56, v37, v63);
    AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    v42 = *(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 8);
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    v43 = v42(v38, AssociatedConformanceWitness);
    v45 = v44 & 1;
    (*(void (**)(char *, uint64_t))(v39 + 8))(v40, v38);
    (*(void (**)(char *, uint64_t, Swift::UInt64, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v11 + 136))(v66, v51, v52, v49, v50, v43, v45, v10, v11);
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    (*(void (**)(char *, uint64_t))(v57 + 8))(v66, v59);
    v46 = v53;
    swift_beginAccess();
    (*(void (**)(uint64_t, char *, uint64_t))(v62 + 40))(v46, v61, v63);
    swift_endAccess();
    v65[2] = v28;
  }
  else
  {
    swift_release();
  }
  swift_bridgeObjectRelease();
  return v60 & 1;
}

uint64_t TextFilterEffect.AnimationInfo.clearFrameCache()()
{
  swift_beginAccess();
  swift_retain();
  Text.Effect.AttributeTracker.Tracker.commitUpdates()();
  swift_endAccess();
  return swift_release();
}

BOOL TextFilterEffect.AnimationInfo.isSettled.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(_QWORD *)(*(_QWORD *)v0 + 144));
  swift_beginAccess();
  return *(_QWORD *)(v1 + 32) == 0;
}

Swift::UInt TextFilterEffect.AnimationInfo.needsUpdate(for:state:)(Swift::UInt a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  char v7;
  __int128 v8;
  uint64_t AssociatedConformanceWitness;
  uint64_t (*v10)(Swift::UInt, uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  _BYTE v17[8];
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  char v23;
  __int128 v24;
  __int128 v25;

  v3 = *(_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 32);
  v5 = *(_BYTE *)(a2 + 40);
  v6 = *(_QWORD *)(a2 + 48);
  v7 = *(_BYTE *)(a2 + 56);
  v17[0] = *(_BYTE *)a2;
  v18 = *(_OWORD *)(a2 + 8);
  v19 = v3;
  v20 = v4;
  v21 = v5;
  v22 = v6;
  v23 = v7;
  v8 = *(_OWORD *)(a2 + 80);
  v24 = *(_OWORD *)(a2 + 64);
  v25 = v8;
  swift_beginAccess();
  swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v10 = *(uint64_t (**)(Swift::UInt, uint64_t, uint64_t))(AssociatedConformanceWitness + 16);
  v11 = swift_checkMetadataState();
  v12 = v10(a1, v11, AssociatedConformanceWitness);
  v14 = v13;
  LOBYTE(v10) = v15 & 1;
  swift_retain();
  LOBYTE(a1) = Text.Effect.AttributeTracker.needsUpdate(for:state:interval:)(a1, (uint64_t)v17, v12, v14, (char)v10);
  swift_release();
  return a1 & 1;
}

uint64_t TextFilterEffect.AnimationInfo.__ivar_destroyer()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t AssociatedTypeWitness;

  swift_bridgeObjectRelease();
  v1 = v0 + *(_QWORD *)(*(_QWORD *)v0 + 136);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 8))(v1, AssociatedTypeWitness);
  return swift_release();
}

uint64_t TextFilterEffect.AnimationInfo.deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t AssociatedTypeWitness;

  swift_bridgeObjectRelease();
  v1 = v0 + *(_QWORD *)(*(_QWORD *)v0 + 136);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 8))(v1, AssociatedTypeWitness);
  swift_release();
  return v0;
}

uint64_t TextFilterEffect.AnimationInfo.__deallocating_deinit()
{
  TextFilterEffect.AnimationInfo.deinit();
  return swift_deallocClassInstance();
}

uint64_t TextFilterEffect.animationInfo(persist:from:to:variant:duration:context:)(char a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  v2 = *v1;
  v3 = *MEMORY[0x24BEE4EA0];
  if (TextEffectsAnimationController.animationInfo(for:persist:default:)(*(uint64_t *)((char *)v1 + OBJC_IVAR____TtC7SwiftUI16AnyTextAnimation_id), a1, (uint64_t (*)(uint64_t))partial apply for implicit closure #1 in TextFilterEffect.animationInfo(persist:from:to:variant:duration:context:)))
  {
    type metadata accessor for TextFilterEffect.AnimationInfo(0, *(_QWORD *)((v3 & v2) + 0xE8), *(_QWORD *)((v3 & v2) + 0xF0), v4);
    result = swift_dynamicCastClass();
    if (result)
      return result;
    swift_release();
  }
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t implicit closure #1 in TextFilterEffect.animationInfo(persist:from:to:variant:duration:context:)(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  double v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD v34[2];
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  Swift::UInt64 v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  uint64_t v44;

  v44 = a7;
  v34[1] = a3;
  v40 = a11;
  v41 = a12;
  v42 = a10;
  v38 = a9;
  v43 = a8 & 1;
  v17 = (_QWORD *)(*MEMORY[0x24BEE4EA0] & *a1);
  v18 = v17[29];
  v19 = *(_QWORD *)(v18 - 8);
  v20 = MEMORY[0x24BDAC7A8](a1);
  v22 = (char *)v34 - v21;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v19 + 16))((char *)v34 - v21, v23 + v17[31], v18, v20);
  v39 = *(_QWORD *)((char *)a1 + OBJC_IVAR____TtC7SwiftUI16AnyTextAnimation_id);
  v24 = v17[30];
  v25 = _ViewInputs.base.modify(a2, a3);
  v36 = v26;
  v37 = v25;
  v27 = _ViewInputs.base.modify(a4, a5);
  v35 = v28;
  swift_retain();
  v29 = v38;
  swift_bridgeObjectRetain();
  v30 = v40;
  swift_retain();
  v31 = v41;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  v32 = specialized TextFilterEffect.AnimationInfo.__allocating_init(effect:identifier:from:to:variant:duration:context:)((uint64_t)v22, v39, v37, v36, v27, v35, v44, v43, v29, v42, v30, v31, v18, v24);
  (*(void (**)(char *, uint64_t))(v19 + 8))(v22, v18);
  return v32;
}

uint64_t TextFilterEffect.updateInfo(_:context:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  char *v5;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  Swift::UInt64 v15;
  char v16;
  uint64_t v18;
  uint64_t v19;

  v19 = a5;
  v9 = (_QWORD *)(*MEMORY[0x24BEE4EA0] & *(_QWORD *)v5);
  v10 = v9[29];
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v13 = (char *)&v18 - v12;
  type metadata accessor for TextFilterEffect.AnimationInfo(0, v10, v9[30], v14);
  if (swift_dynamicCastClass())
  {
    (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v13, &v5[v9[31]], v10);
    v15 = *(_QWORD *)&v5[OBJC_IVAR____TtC7SwiftUI16AnyTextAnimation_id];
    swift_retain();
    v16 = TextFilterEffect.AnimationInfo.updateLayout(effect:identifier:context:)((uint64_t)v13, v15, a2, a3, a4, v19);
    swift_release();
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  }
  else
  {
    v16 = 0;
  }
  return v16 & 1;
}

uint64_t TextFilterEffect.duration(from:to:variant:context:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t AssociatedConformanceWitness;
  uint64_t v15;
  _DWORD v17[2];
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v18 = a8;
  v19 = a7;
  v20 = a3;
  v21 = a4;
  v17[1] = a5 & 1;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v9 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v11 = (char *)v17 - v10;
  v12 = TextFilterEffect.animationInfo(persist:from:to:variant:duration:context:)(1);
  v13 = v12 + *(_QWORD *)(*(_QWORD *)v12 + 136);
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, v13, AssociatedTypeWitness);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v15 = (*(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 8))(AssociatedTypeWitness, AssociatedConformanceWitness);
  swift_release();
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, AssociatedTypeWitness);
  return v15;
}

uint64_t TextFilterEffect.delay(for:duration:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)(*(_QWORD *)((*MEMORY[0x24BEE4EA0] & *v0) + 0xF0) + 8) + 144))();
}

uint64_t TextFilterEffect.apply(_:at:to:context:in:)(Swift::UInt64 a1, unint64_t a2, double *a3, double *a4, uint64_t *a5, uint64_t a6)
{
  char *v6;
  char *v7;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  double v16;
  double v17;
  uint64_t v18;
  char v19;
  double v20;
  double v21;
  double v22;
  double v23;
  uint64_t v24;
  uint64_t v25;
  double v26;
  int v27;
  char v28;
  char v29;
  uint64_t v30;
  char v31;
  Swift::UInt64 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  double v48;
  int v49;
  uint64_t v50;
  unint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t AssociatedTypeWitness;
  uint64_t v56;
  uint64_t v57;
  double v58;
  double v59;
  double v60;
  double v61;
  double v62;
  double v63;
  double v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  double v68[8];
  double v69;
  double v70;
  double v71;
  double v72;
  double v73;
  double v74;
  double v75;
  double v76;
  uint64_t v77;
  uint64_t v78;
  double v79;
  uint64_t v80;
  char v81[8];

  v7 = v6;
  v65 = a6;
  v51 = a2;
  v12 = *(_QWORD *)((*MEMORY[0x24BEE4EA0] & *(_QWORD *)v7) + 0xE8);
  v56 = *(_QWORD *)((*MEMORY[0x24BEE4EA0] & *(_QWORD *)v7) + 0xF0);
  v50 = *(_QWORD *)(v56 + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v54 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v53 = (char *)&v43 - v13;
  v66 = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v14);
  v52 = (char *)&v43 - v15;
  v16 = *a3;
  v17 = *a4;
  v58 = a4[1];
  v59 = a4[2];
  v60 = a4[3];
  v61 = a4[4];
  v62 = a4[5];
  v63 = a4[6];
  v64 = a4[7];
  v57 = *a5;
  v45 = a5[1];
  v46 = a5[2];
  v68[0] = v16;
  v18 = TextEffectsAnimationController.state(for:time:)(a1, v68, (uint64_t)&v69);
  v19 = LOBYTE(v69);
  v20 = v70;
  v21 = v71;
  v22 = v72;
  v23 = v75;
  v25 = v77;
  v24 = v78;
  v26 = v79;
  v27 = LOBYTE(v76) & 0xFE;
  v49 = LOBYTE(v76);
  v67 = v80;
  v48 = v73;
  v47 = LOBYTE(v74);
  if (v27 != 2
    && (v79 == 0.0
     || (v28 = LOBYTE(v69),
         v29 = (*(uint64_t (**)(uint64_t))(**(_QWORD **)&v79 + 104))(v18),
         v19 = v28,
         (v29 & 1) != 0)))
  {
    v69 = v17;
    v70 = v58;
    v71 = v59;
    v72 = v60;
    v73 = v61;
    v74 = v62;
    v75 = v63;
    v76 = v64;
    Text.Effect.DrawingContent.draw(options:in:)(0, 0, 1, v65);
    swift_release();
    swift_release();
    swift_release();
  }
  else
  {
    v30 = v46;
    v44 = v25;
    v43 = v24;
    v31 = v19;
    v57 = TextFilterEffect.animationInfo(persist:from:to:variant:duration:context:)(v27 == 2);
    v32 = *(_QWORD *)&v7[OBJC_IVAR____TtC7SwiftUI16AnyTextAnimation_id];
    v33 = v56;
    v36 = specialized TextFilterEffect.defaultDrawingState.getter(v12, v56, v34, v35);
    specialized Text.Effect.BaseContext.fragment<A>(for:key:fragment:)(v32, v36, v51, v30, (uint64_t)v81);
    swift_release();
    v37 = v52;
    (*(void (**)(char *, char *, uint64_t))(v66 + 16))(v52, &v7[*(_QWORD *)((*MEMORY[0x24BEE4EA0] & *(_QWORD *)v7) + 0xF8)], v12);
    v68[0] = v17;
    v68[1] = v58;
    v68[2] = v59;
    v68[3] = v60;
    v68[4] = v61;
    v68[5] = v62;
    v68[6] = v63;
    v68[7] = v64;
    v38 = v57 + *(_QWORD *)(*(_QWORD *)v57 + 136);
    swift_beginAccess();
    v39 = v54;
    v40 = v53;
    v41 = AssociatedTypeWitness;
    (*(void (**)(char *, uint64_t, uint64_t))(v54 + 16))(v53, v38, AssociatedTypeWitness);
    LOBYTE(v69) = v31;
    v70 = v20;
    v71 = v21;
    v72 = v22;
    v73 = v48;
    LOBYTE(v74) = v47;
    v75 = v23;
    LOBYTE(v76) = v49;
    v77 = v44;
    v78 = v43;
    v79 = v26;
    v64 = v26;
    v80 = v67;
    (*(void (**)(double *, char *, char *, double *, uint64_t *, uint64_t, uint64_t, uint64_t))(v33 + 24))(v68, v81, v40, &v69, a5, v65, v12, v33);
    outlined release of Text.Effect.BaseFragment((uint64_t)v81);
    swift_release();
    (*(void (**)(char *, uint64_t))(v39 + 8))(v40, v41);
    (*(void (**)(char *, uint64_t))(v66 + 8))(v37, v12);
    swift_release();
    swift_release();
    swift_release();
  }
  return swift_release();
}

uint64_t TextFilterEffect.defaultDrawingState.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;

  return specialized TextFilterEffect.defaultDrawingState.getter(*(_QWORD *)((*MEMORY[0x24BEE4EA0] & *v4) + 0xE8), *(_QWORD *)((*MEMORY[0x24BEE4EA0] & *v4) + 0xF0), a3, a4);
}

uint64_t TextFilterEffect.needsUpdate(_:at:context:)(Swift::UInt64 a1, Swift::UInt a2, uint64_t *a3)
{
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  char v16;
  uint64_t v17;
  Swift::UInt v18;
  uint64_t v19;
  _BYTE v20[8];
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v19 = *a3;
  TextEffectsAnimationController.state(for:time:)(a1, (double *)&v19, (uint64_t)v20);
  v4 = v27;
  v6 = v28;
  v5 = v29;
  v8 = v30;
  v7 = v31;
  if ((v27 & 0xFE) == 2)
  {
    v18 = a2;
    v9 = v20[0];
    v10 = v21;
    v11 = v22;
    v12 = v23;
    v17 = v24;
    v16 = v25;
    v13 = v26;
    TextFilterEffect.animationInfo(persist:from:to:variant:duration:context:)(1);
    v20[0] = v9;
    v21 = v10;
    v22 = v11;
    v23 = v12;
    v24 = v17;
    v25 = v16;
    v26 = v13;
    v27 = v4;
    v28 = v6;
    v29 = v5;
    v30 = v8;
    v31 = v7;
    v14 = TextFilterEffect.AnimationInfo.needsUpdate(for:state:)(v18, (uint64_t)v20);
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
  }
  else
  {
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    v14 = 0;
  }
  return v14 & 1;
}

double TextFilterEffect.drawingOutsets.getter(uint64_t a1)
{
  char *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  double v7;
  uint64_t v9;

  v2 = (_QWORD *)(*MEMORY[0x24BEE4EA0] & *(_QWORD *)v1);
  v3 = v2[29];
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v6 = (char *)&v9 - v5;
  (*(void (**)(char *, char *, uint64_t))(v4 + 16))((char *)&v9 - v5, &v1[v2[31]], v3);
  v7 = (*(double (**)(uint64_t))(v2[30] + 32))(v3);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  return v7;
}

uint64_t TextFilterEffect.phase(from:)(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  double v17;
  uint64_t v18;
  char *v19;
  void (*v21)(char *, char *, uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v24 = a2;
  v4 = *MEMORY[0x24BEE4EA0] & *v2;
  v5 = *(_QWORD *)(v4 + 0xE8);
  v6 = *(_QWORD *)(*(_QWORD *)(v4 + 240) + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v8 = type metadata accessor for Optional();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v23 - v10;
  v12 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](v13);
  v15 = (char *)&v23 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = MEMORY[0x24BDAC7A8](v16);
  v19 = (char *)&v23 - v18;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, double))(v6 + 88))(a1, v24, v5, v6, v17);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v11, 1, AssociatedTypeWitness) == 1)
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    return 0;
  }
  else
  {
    v21 = *(void (**)(char *, char *, uint64_t))(v12 + 32);
    v21(v19, v11, AssociatedTypeWitness);
    type metadata accessor for Text.Effect.ConcretePhase(0, v5, v6, v22);
    v21(v15, v19, AssociatedTypeWitness);
    return Text.Effect.ConcretePhase.__allocating_init(_:)((uint64_t)v15);
  }
}

uint64_t TextFilterEffect.defaultAnimatorPhase.getter()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v9;

  v1 = *MEMORY[0x24BEE4EA0] & *v0;
  v2 = *(_QWORD *)(v1 + 0xE8);
  v3 = *(_QWORD *)(*(_QWORD *)(v1 + 240) + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v6 = (char *)&v9 - v5;
  type metadata accessor for Text.Effect.ConcretePhase(0, v2, v3, v7);
  (*(void (**)(uint64_t, uint64_t))(v3 + 72))(v2, v3);
  return Text.Effect.ConcretePhase.__allocating_init(_:)((uint64_t)v6);
}

uint64_t TextFilterEffect.configuration(from:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  double v16;
  uint64_t v17;
  char *v18;
  void (*v20)(char *, char *, uint64_t);
  uint64_t v21;
  uint64_t v22;

  v3 = *MEMORY[0x24BEE4EA0] & *v1;
  v4 = *(_QWORD *)(v3 + 0xE8);
  v5 = *(_QWORD *)(*(_QWORD *)(v3 + 240) + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v7 = type metadata accessor for Optional();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v22 - v9;
  v11 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)&v22 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = MEMORY[0x24BDAC7A8](v15);
  v18 = (char *)&v22 - v17;
  if (!a1)
    return 0;
  (*(void (**)(uint64_t, uint64_t, uint64_t, double))(v5 + 64))(a1, v4, v5, v16);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v10, 1, AssociatedTypeWitness) == 1)
  {
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    return 0;
  }
  v20 = *(void (**)(char *, char *, uint64_t))(v11 + 32);
  v20(v18, v10, AssociatedTypeWitness);
  type metadata accessor for Text.Effect.ConcreteConfiguration(0, v4, v5, v21);
  v20(v14, v18, AssociatedTypeWitness);
  return Text.Effect.ConcreteConfiguration.__allocating_init(_:)((uint64_t)v14);
}

uint64_t TextFilterEffect.states.getter()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v1 = *(_QWORD *)((*MEMORY[0x24BEE4EA0] & *v0) + 0xE8);
  v2 = *(_QWORD *)(*(_QWORD *)((*MEMORY[0x24BEE4EA0] & *v0) + 0xF0) + 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 112))(v1, v2);
  if (!result)
    return 0;
  v4 = result;
  v5 = *(_QWORD *)(result + 16);
  if (!v5)
  {
LABEL_6:
    swift_bridgeObjectRelease();
    v7 = *(_QWORD *)(MEMORY[0x24BEE4AF8] + 16);
    if (v7)
    {
      v11 = MEMORY[0x24BEE4AF8];
      specialized ContiguousArray.reserveCapacity(_:)();
      v9 = type metadata accessor for Text.Effect.ConcreteLayoutState(0, v1, v2, v8);
      do
      {
        Text.Effect.ConcreteLayoutState.__allocating_init(state:)(v9);
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        v9 = specialized ContiguousArray._endMutation()();
        --v7;
      }
      while (v7);
      v10 = v11;
    }
    else
    {
      v10 = MEMORY[0x24BEE4AF8];
    }
    swift_release();
    return v10;
  }
  v6 = 0;
  while (v6 < *(_QWORD *)(v4 + 16))
  {
    ++v6;
    result = (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 120))(v1, v2);
    if (v5 == v6)
      goto LABEL_6;
  }
  __break(1u);
  return result;
}

uint64_t TextFilterEffect.lineBreakingState.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v5 = *MEMORY[0x24BEE4EA0] & *v4;
  v6 = *(_QWORD *)(v5 + 0xE8);
  v7 = *(_QWORD *)(*(_QWORD *)(v5 + 240) + 8);
  type metadata accessor for Text.Effect.ConcreteLayoutState(0, v6, v7, a4);
  v8 = (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 120))(v6, v7);
  return Text.Effect.ConcreteLayoutState.__allocating_init(state:)(v8);
}

void @objc TextFilterEffect.init()()
{
  specialized TextFilterEffect.init()();
}

uint64_t TextFilterEffect.__ivar_destroyer()
{
  char *v0;

  return (*(uint64_t (**)(char *))(*(_QWORD *)(*(_QWORD *)((*MEMORY[0x24BEE4EA0] & *(_QWORD *)v0) + 0xE8)
                                                       - 8)
                                           + 8))(&v0[*(_QWORD *)((*MEMORY[0x24BEE4EA0] & *(_QWORD *)v0) + 0xF8)]);
}

uint64_t @objc TextFilterEffect.__ivar_destroyer(char *a1)
{
  return (*(uint64_t (**)(char *))(*(_QWORD *)(*(_QWORD *)((*MEMORY[0x24BEE4EA0] & *(_QWORD *)a1) + 0xE8)
                                                       - 8)
                                           + 8))(&a1[*(_QWORD *)((*MEMORY[0x24BEE4EA0] & *(_QWORD *)a1) + 0xF8)]);
}

uint64_t type metadata accessor for TextFilterEffect(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for TextFilterEffect);
}

uint64_t type metadata completion function for TextFilterEffect.AnimationInfo()
{
  uint64_t result;
  unint64_t v1;

  result = swift_getAssociatedTypeWitness();
  if (v1 <= 0x3F)
  {
    result = swift_initClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t type metadata accessor for TextFilterEffect.AnimationInfo(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for TextFilterEffect.AnimationInfo);
}

uint64_t specialized TextFilterEffect.defaultDrawingState.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;

  v5 = *(_QWORD *)(a2 + 8);
  type metadata accessor for Text.Effect.ConcreteLayoutState(0, a1, v5, a4);
  v6 = (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 128))(a1, v5);
  return Text.Effect.ConcreteLayoutState.__allocating_init(state:)(v6);
}

uint64_t partial apply for implicit closure #1 in TextFilterEffect.animationInfo(persist:from:to:variant:duration:context:)()
{
  uint64_t v0;

  return implicit closure #1 in TextFilterEffect.animationInfo(persist:from:to:variant:duration:context:)(*(_QWORD **)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48), *(unsigned __int8 *)(v0 + 56), *(_QWORD *)(v0 + 64), *(_BYTE *)(v0 + 72), *(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 88), *(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 104));
}

uint64_t specialized TextFilterEffect.AnimationInfo.init(effect:identifier:from:to:variant:duration:context:)(uint64_t a1, Swift::UInt64 a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char *a13)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t AssociatedTypeWitness;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t (*v26)(uint64_t, uint64_t);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  void (*v37)(char *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  char *v38;
  char *v39;
  int64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t result;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  Swift::UInt64 v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;

  LODWORD(v50) = a8;
  v54 = a1;
  v55 = a7;
  v60 = a5;
  v61 = a6;
  v62 = a3;
  v63 = a4;
  v58 = a2;
  v13 = *(_QWORD *)a13;
  v14 = *(_QWORD *)(*(_QWORD *)a13 + 112);
  v15 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a13 + 120) + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v52 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v53 = AssociatedTypeWitness;
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v51 = (char *)&v48 - v17;
  v19 = type metadata accessor for Text.Effect.DrawableContent(0, v14, v15, v18);
  v56 = *(_QWORD *)(v19 - 8);
  v57 = v19;
  MEMORY[0x24BDAC7A8](v19);
  v21 = (char *)&v48 - v20;
  v22 = *(_QWORD *)(v13 + 144);
  type metadata accessor for Text.Effect.AttributeTracker();
  v23 = (_QWORD *)swift_allocObject();
  v24 = MEMORY[0x24BEE4B00];
  v23[2] = MEMORY[0x24BEE4B00];
  v23[3] = v24;
  v23[4] = 0;
  v23[5] = v24;
  v23[6] = MEMORY[0x24BEE4B08];
  *(_QWORD *)&a13[v22] = v23;
  type metadata accessor for Text.Effect.ConcreteLayoutState(0, v14, v15, v25);
  v26 = *(uint64_t (**)(uint64_t, uint64_t))(v15 + 128);
  swift_retain();
  v27 = v26(v14, v15);
  v28 = Text.Effect.ConcreteLayoutState.__allocating_init(state:)(v27);
  swift_beginAccess();
  v59 = a11;
  v29 = *(_QWORD *)(a11 + 48);
  v30 = *(_QWORD *)(v29 + 16);
  swift_retain();
  if (!v30)
    goto LABEL_12;
  v49 = a13;
  swift_retain();
  v31 = specialized __RawDictionaryStorage.find<A>(_:)(v58, v28);
  if ((v32 & 1) == 0)
  {
    swift_release();
LABEL_12:
    swift_endAccess();
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  v33 = v50 & 1;
  v34 = *(_QWORD *)(*(_QWORD *)(v29 + 56) + 16 * v31);
  swift_bridgeObjectRetain();
  swift_endAccess();
  swift_release();
  v35 = v58;
  v58 = a9;
  v36 = v21;
  v50 = a12;
  Text.Effect.BaseContext.content<A>(for:key:)(v14, v35, v28, a9, a10, v59, a12, v14, v15);
  v37 = *(void (**)(char *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v15 + 136);
  v47 = v15;
  v38 = v51;
  v37(v21, v62, v63, v60, v61, v55, v33, v14, v47);
  v39 = v49;
  (*(void (**)(char *, char *, uint64_t))(v52 + 32))(&v39[*(_QWORD *)(*(_QWORD *)v39 + 136)], v38, v53);
  v40 = *(_QWORD *)(v34 + 16);
  if (v40)
  {
    v64 = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v40, 0);
    v41 = v64;
    v42 = v34 + 32;
    v43 = *(_QWORD *)(v64 + 16);
    do
    {
      v44 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v42 + 96) + 16);
      v64 = v41;
      v45 = *(_QWORD *)(v41 + 24);
      if (v43 >= v45 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v45 > 1, v43 + 1, 1);
        v41 = v64;
      }
      *(_QWORD *)(v41 + 16) = v43 + 1;
      *(_QWORD *)(v41 + 8 * v43 + 32) = v44;
      v42 += 8;
      ++v43;
      --v40;
    }
    while (v40);
    swift_release();
  }
  else
  {
    swift_release();
    v41 = MEMORY[0x24BEE4AF8];
  }
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  (*(void (**)(char *, uint64_t))(v56 + 8))(v36, v57);
  swift_bridgeObjectRelease();
  *((_QWORD *)v39 + 2) = v41;
  return (uint64_t)v39;
}

uint64_t specialized TextFilterEffect.AnimationInfo.__allocating_init(effect:identifier:from:to:variant:duration:context:)(uint64_t a1, Swift::UInt64 a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  int v20;
  char *v21;
  uint64_t v22;

  v20 = a8 & 1;
  type metadata accessor for TextFilterEffect.AnimationInfo(0, a13, a14, a4);
  v21 = (char *)swift_allocObject();
  v22 = specialized TextFilterEffect.AnimationInfo.init(effect:identifier:from:to:variant:duration:context:)(a1, a2, a3, a4, a5, a6, a7, v20, a9, a10, a11, a12, v21);
  swift_release();
  return v22;
}

void specialized TextFilterEffect.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

void KeyframeTrackContentBuilder.Conditional.init(first:)(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 32))(a3, a1, a2);
  type metadata accessor for KeyframeTrackContentBuilder.Conditional.Storage();
}

uint64_t sub_2350BC544()
{
  return swift_storeEnumTagMultiPayload();
}

void KeyframeTrackContentBuilder.Conditional.init(second:)(uint64_t a1@<X0>, uint64_t a2@<X4>, uint64_t a3@<X8>)
{
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 32))(a3, a1, a2);
  type metadata accessor for KeyframeTrackContentBuilder.Conditional.Storage();
}

uint64_t sub_2350BC5E0()
{
  return swift_storeEnumTagMultiPayload();
}

uint64_t static KeyframeTrackContentBuilder.buildExpression<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 16))(a3, a1);
}

uint64_t static KeyframeTrackContentBuilder.buildArray<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  *a3 = _ViewInputs.base.modify(a1, a2);
  return swift_bridgeObjectRetain();
}

void static KeyframeTrackContentBuilder.buildEither<A, B>(first:)(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  double v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;

  v5 = MEMORY[0x24BDAC7A8](a1);
  v7 = (char *)&v9 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, double))(v8 + 16))(v7, v5);
  swift_getAssociatedConformanceWitness();
  KeyframeTrackContentBuilder.Conditional.init(first:)((uint64_t)v7, a2, a3);
}

void static KeyframeTrackContentBuilder.buildEither<A, B>(second:)(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  double v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;

  v5 = MEMORY[0x24BDAC7A8](a1);
  v7 = (char *)&v9 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, double))(v8 + 16))(v7, v5);
  swift_getAssociatedConformanceWitness();
  KeyframeTrackContentBuilder.Conditional.init(second:)((uint64_t)v7, a2, a3);
}

void static KeyframeTrackContentBuilder.buildPartialBlock<A, B>(accumulated:next:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  double v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;

  v9 = *(_QWORD *)(a4 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v11 = (char *)&v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = MEMORY[0x24BDAC7A8](v12);
  v15 = (char *)&v17 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, double))(v16 + 16))(v15, v13);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, a4);
  MergedKeyframeTrackContent.init(first:second:)((uint64_t)v15, a3, a5);
}

void KeyframeTrackContentBuilder.Conditional._resolve(into:)(uint64_t a1)
{
  uint64_t v1;

  MEMORY[0x24BDAC7A8](a1);
  MEMORY[0x24BDAC7A8](v1);
  type metadata accessor for KeyframeTrackContentBuilder.Conditional.Storage();
}

uint64_t sub_2350BC99C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  _BYTE v16[96];

  v11 = MEMORY[0x24BDAC7A8](a1);
  v13 = &v16[-v12];
  (*(void (**)(_BYTE *, _QWORD, uint64_t, double))(v14 + 16))(&v16[-v12], *(_QWORD *)(v9 - 160), a1, v11);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    (*(void (**)(uint64_t, _BYTE *, uint64_t))(v1 + 32))(v2, v13, v3);
    (*(void (**)(_QWORD, uint64_t, uint64_t))(v7 + 48))(*(_QWORD *)(v9 - 152), v3, v7);
    return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8))(v2, v3);
  }
  else
  {
    (*(void (**)(uint64_t, _BYTE *, uint64_t))(v8 + 32))(v5, v13, v4);
    (*(void (**)(_QWORD, uint64_t, uint64_t))(v6 + 48))(*(_QWORD *)(v9 - 152), v4, v6);
    return (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 8))(v5, v4);
  }
}

void type metadata accessor for KeyframeTrackContentBuilder.Conditional.Storage()
{
  JUMPOUT(0x23B7C9B5CLL);
}

void associated type witness table accessor for KeyframeTrackContent.Body : KeyframeTrackContent in KeyframeTrackContentBuilder<A>.Conditional<A1, B1, C1>()
{
  JUMPOUT(0x23B7C9C04);
}

uint64_t associated type witness table accessor for KeyframeTrackContent.Value : Animatable in KeyframeTrackContentBuilder<A>.Conditional<A1, B1, C1>()
{
  return swift_getAssociatedConformanceWitness();
}

uint64_t instantiation function for generic protocol witness table for KeyframeTrackContentBuilder<A>.Conditional<A1, B1, C1>(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for KeyframeTrackContentBuilder<A>.Conditional<A1, B1, C1>);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t type metadata accessor for KeyframeTrackContentBuilder(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for KeyframeTrackContentBuilder);
}

void type metadata completion function for KeyframeTrackContentBuilder.Conditional()
{
  type metadata accessor for KeyframeTrackContentBuilder.Conditional.Storage();
}

void type metadata accessor for KeyframeTrackContentBuilder.Conditional()
{
  JUMPOUT(0x23B7C9B5CLL);
}

uint64_t type metadata completion function for KeyframeTrackContentBuilder.Conditional.Storage()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      swift_initEnumMetadataMultiPayload();
      return 0;
    }
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for KeyframeTrackContentBuilder.Conditional(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;

  v3 = a1;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 32) - 8);
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 40) - 8);
  if (*(_QWORD *)(v5 + 64) <= *(_QWORD *)(v4 + 64))
    v6 = *(_QWORD *)(v4 + 64);
  else
    v6 = *(_QWORD *)(v5 + 64);
  v7 = (*(_BYTE *)(v5 + 80) | *(_BYTE *)(v4 + 80));
  if (v7 <= 7
    && (unint64_t)(v6 + 1) <= 0x18
    && ((*(_DWORD *)(v5 + 80) | *(_DWORD *)(v4 + 80)) & 0x100000) == 0)
  {
    v11 = *((unsigned __int8 *)a2 + v6);
    if (v11 >= 2)
    {
      if (v6 <= 3)
        v12 = v6;
      else
        v12 = 4;
      __asm { BR              X15 }
    }
    if (v11 == 1)
    {
      (*(void (**)(uint64_t *))(v5 + 16))(a1);
      *((_BYTE *)v3 + v6) = 1;
    }
    else
    {
      (*(void (**)(uint64_t *))(v4 + 16))(a1);
      *((_BYTE *)v3 + v6) = 0;
    }
  }
  else
  {
    v10 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v10 + ((v7 + 16) & ~v7));
    swift_retain();
  }
  return v3;
}

uint64_t destroy for KeyframeTrackContentBuilder.Conditional(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;

  v2 = *(_QWORD *)(a2 + 40);
  v3 = *(_QWORD *)(*(_QWORD *)(a2 + 32) - 8);
  v4 = *(_QWORD *)(v3 + 64);
  v5 = *(_QWORD *)(v2 - 8);
  if (*(_QWORD *)(v5 + 64) > v4)
    v4 = *(_QWORD *)(v5 + 64);
  v6 = *(unsigned __int8 *)(a1 + v4);
  if (v6 < 2)
  {
    if (v6 == 1)
      v3 = *(_QWORD *)(v2 - 8);
    return (*(uint64_t (**)(void))(v3 + 8))();
  }
  else
  {
    if (v4 <= 3)
      v7 = v4;
    else
      v7 = 4;
    return ((uint64_t (*)(void))((char *)&loc_2350BCDAC + 4 * byte_2352C62E5[v7]))();
  }
}

uint64_t initializeWithCopy for KeyframeTrackContentBuilder.Conditional(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  BOOL v10;

  v4 = *(_QWORD *)(a3 + 40);
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 32) - 8);
  v6 = *(_QWORD *)(v4 - 8);
  if (*(_QWORD *)(v6 + 64) <= *(_QWORD *)(v5 + 64))
    v7 = *(_QWORD *)(v5 + 64);
  else
    v7 = *(_QWORD *)(v6 + 64);
  v8 = *(unsigned __int8 *)(a2 + v7);
  if (v8 >= 2)
  {
    if (v7 <= 3)
      v9 = v7;
    else
      v9 = 4;
    __asm { BR              X16 }
  }
  v10 = v8 == 1;
  if (v8 == 1)
    v5 = *(_QWORD *)(v4 - 8);
  (*(void (**)(uint64_t))(v5 + 16))(a1);
  *(_BYTE *)(a1 + v7) = v10;
  return a1;
}

uint64_t assignWithCopy for KeyframeTrackContentBuilder.Conditional(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;

  if (a1 != a2)
  {
    v5 = *(_QWORD *)(a3 + 32);
    v6 = *(_QWORD *)(a3 + 40);
    v7 = *(_QWORD *)(v5 - 8);
    v8 = *(_QWORD *)(v6 - 8);
    if (*(_QWORD *)(v8 + 64) <= *(_QWORD *)(v7 + 64))
      v9 = *(_QWORD *)(v7 + 64);
    else
      v9 = *(_QWORD *)(v8 + 64);
    v10 = *(unsigned __int8 *)(a1 + v9);
    if (v10 >= 2)
    {
      if (v9 <= 3)
        v11 = v9;
      else
        v11 = 4;
      __asm { BR              X12 }
    }
    if (v10 == 1)
      v12 = *(_QWORD *)(v6 - 8);
    else
      v12 = *(_QWORD *)(v5 - 8);
    if (v10 == 1)
      v13 = *(_QWORD *)(a3 + 40);
    else
      v13 = *(_QWORD *)(a3 + 32);
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(a1, v13);
    v14 = *(unsigned __int8 *)(a2 + v9);
    if (v14 >= 2)
    {
      if (v9 <= 3)
        v15 = v9;
      else
        v15 = 4;
      __asm { BR              X12 }
    }
    v16 = v14 == 1;
    if (v14 == 1)
      v17 = v8;
    else
      v17 = v7;
    if (v14 == 1)
      v18 = v6;
    else
      v18 = v5;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v17 + 16))(a1, a2, v18);
    *(_BYTE *)(a1 + v9) = v16;
  }
  return a1;
}

uint64_t initializeWithTake for KeyframeTrackContentBuilder.Conditional(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  BOOL v10;

  v4 = *(_QWORD *)(a3 + 40);
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 32) - 8);
  v6 = *(_QWORD *)(v4 - 8);
  if (*(_QWORD *)(v6 + 64) <= *(_QWORD *)(v5 + 64))
    v7 = *(_QWORD *)(v5 + 64);
  else
    v7 = *(_QWORD *)(v6 + 64);
  v8 = *(unsigned __int8 *)(a2 + v7);
  if (v8 >= 2)
  {
    if (v7 <= 3)
      v9 = v7;
    else
      v9 = 4;
    __asm { BR              X16 }
  }
  v10 = v8 == 1;
  if (v8 == 1)
    v5 = *(_QWORD *)(v4 - 8);
  (*(void (**)(uint64_t))(v5 + 32))(a1);
  *(_BYTE *)(a1 + v7) = v10;
  return a1;
}

uint64_t assignWithTake for KeyframeTrackContentBuilder.Conditional(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;

  if (a1 != a2)
  {
    v5 = *(_QWORD *)(a3 + 32);
    v6 = *(_QWORD *)(a3 + 40);
    v7 = *(_QWORD *)(v5 - 8);
    v8 = *(_QWORD *)(v6 - 8);
    if (*(_QWORD *)(v8 + 64) <= *(_QWORD *)(v7 + 64))
      v9 = *(_QWORD *)(v7 + 64);
    else
      v9 = *(_QWORD *)(v8 + 64);
    v10 = *(unsigned __int8 *)(a1 + v9);
    if (v10 >= 2)
    {
      if (v9 <= 3)
        v11 = v9;
      else
        v11 = 4;
      __asm { BR              X12 }
    }
    if (v10 == 1)
      v12 = *(_QWORD *)(v6 - 8);
    else
      v12 = *(_QWORD *)(v5 - 8);
    if (v10 == 1)
      v13 = *(_QWORD *)(a3 + 40);
    else
      v13 = *(_QWORD *)(a3 + 32);
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(a1, v13);
    v14 = *(unsigned __int8 *)(a2 + v9);
    if (v14 >= 2)
    {
      if (v9 <= 3)
        v15 = v9;
      else
        v15 = 4;
      __asm { BR              X12 }
    }
    v16 = v14 == 1;
    if (v14 == 1)
      v17 = v8;
    else
      v17 = v7;
    if (v14 == 1)
      v18 = v6;
    else
      v18 = v5;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v17 + 32))(a1, a2, v18);
    *(_BYTE *)(a1 + v9) = v16;
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for KeyframeTrackContentBuilder.Conditional(uint64_t a1, unsigned int a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  char v5;
  int v6;
  unsigned int v8;
  int v9;
  unsigned int v10;

  v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 40) - 8) + 64);
  if (v3 <= *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 32) - 8) + 64))
    v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 32) - 8) + 64);
  if (!a2)
    return 0;
  if (a2 < 0xFF)
    goto LABEL_21;
  v4 = v3 + 1;
  v5 = 8 * (v3 + 1);
  if ((v3 + 1) <= 3)
  {
    v8 = ((a2 + ~(-1 << v5) - 254) >> v5) + 1;
    if (HIWORD(v8))
    {
      v6 = *(_DWORD *)(a1 + v4);
      if (!v6)
        goto LABEL_21;
      goto LABEL_14;
    }
    if (v8 > 0xFF)
    {
      v6 = *(unsigned __int16 *)(a1 + v4);
      if (!*(_WORD *)(a1 + v4))
        goto LABEL_21;
      goto LABEL_14;
    }
    if (v8 < 2)
    {
LABEL_21:
      v10 = *(unsigned __int8 *)(a1 + v3);
      if (v10 >= 2)
        return (v10 ^ 0xFF) + 1;
      else
        return 0;
    }
  }
  v6 = *(unsigned __int8 *)(a1 + v4);
  if (!*(_BYTE *)(a1 + v4))
    goto LABEL_21;
LABEL_14:
  v9 = (v6 - 1) << v5;
  if (v4 > 3)
    v9 = 0;
  if (!(_DWORD)v4)
    return (v9 + 255);
  if (v4 > 3)
    LODWORD(v4) = 4;
  return ((uint64_t (*)(void))((char *)&loc_2350BD368 + 4 * byte_2352C6308[(v4 - 1)]))();
}

void storeEnumTagSinglePayload for KeyframeTrackContentBuilder.Conditional(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  unint64_t v5;
  size_t v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  int v10;

  v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a4 + 32) - 8) + 64);
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a4 + 40) - 8) + 64) > v5)
    v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a4 + 40) - 8) + 64);
  v6 = v5 + 1;
  if (a3 < 0xFF)
  {
    v7 = 0;
  }
  else if (v6 <= 3)
  {
    v9 = ((a3 + ~(-1 << (8 * v6)) - 254) >> (8 * v6)) + 1;
    if (HIWORD(v9))
    {
      v7 = 4u;
    }
    else if (v9 >= 0x100)
    {
      v7 = 2;
    }
    else
    {
      v7 = v9 > 1;
    }
  }
  else
  {
    v7 = 1u;
  }
  if (a2 <= 0xFE)
    __asm { BR              X11 }
  v8 = a2 - 255;
  if (v6 < 4)
  {
    if ((_DWORD)v5 != -1)
    {
      v10 = v8 & ~(-1 << (8 * v6));
      bzero(a1, v6);
      if ((_DWORD)v6 == 3)
      {
        *a1 = v10;
        *((_BYTE *)a1 + 2) = BYTE2(v10);
      }
      else if ((_DWORD)v6 == 2)
      {
        *a1 = v10;
      }
      else
      {
        *(_BYTE *)a1 = v10;
      }
    }
  }
  else
  {
    bzero(a1, v5 + 1);
    *(_DWORD *)a1 = v8;
  }
  __asm { BR              X10 }
}

uint64_t getEnumTag for KeyframeTrackContentBuilder.Conditional.Storage(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 40) - 8) + 64);
  if (v2 <= *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 32) - 8) + 64))
    v2 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 32) - 8) + 64);
  if (*(unsigned __int8 *)(a1 + v2) < 2u)
    return *(unsigned __int8 *)(a1 + v2);
  if (v2 <= 3)
    v3 = v2;
  else
    v3 = 4;
  return ((uint64_t (*)(void))((char *)&loc_2350BD5AC + 4 * byte_2352C6316[v3]))();
}

void destructiveInjectEnumTag for KeyframeTrackContentBuilder.Conditional.Storage(_BYTE *a1, unsigned int a2, uint64_t a3)
{
  unint64_t v4;
  size_t v5;
  unsigned int v6;
  unsigned int v7;
  int v8;

  if (a2 > 1)
  {
    if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 40) - 8) + 64) <= *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 32)
                                                                                              - 8)
                                                                                  + 64))
      v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 32) - 8) + 64);
    else
      v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 40) - 8) + 64);
    v6 = a2 - 2;
    if (v5 < 4)
    {
      v7 = v6 >> (8 * v5);
      v8 = v6 & ~(-1 << (8 * v5));
      a1[v5] = v7 + 2;
      bzero(a1, v5);
      if ((_DWORD)v5 == 3)
      {
        *(_WORD *)a1 = v8;
        a1[2] = BYTE2(v8);
      }
      else if ((_DWORD)v5 == 2)
      {
        *(_WORD *)a1 = v8;
      }
      else
      {
        *a1 = v8;
      }
    }
    else
    {
      a1[v5] = 2;
      bzero(a1, v5);
      *(_DWORD *)a1 = v6;
    }
  }
  else
  {
    v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 40) - 8) + 64);
    if (v4 <= *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 32) - 8) + 64))
      v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 32) - 8) + 64);
    a1[v4] = a2;
  }
}

uint64_t AnimationPath.append(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  double v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v5 = type metadata accessor for AnimationPath.Element(0, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), a4);
  v6 = MEMORY[0x24BDAC7A8](v5);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v7 + 16))((char *)&v10 - v8, a1, v5, v6);
  type metadata accessor for Array();
  return Array.append(_:)();
}

uint64_t AnimationPath.Element.endVelocity.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t AssociatedTypeWitness;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  double v21;
  uint64_t v22;
  char *v23;
  int EnumCaseMultiPayload;
  uint64_t v25;
  uint64_t v26;
  uint64_t AssociatedConformanceWitness;
  uint64_t v28;
  uint64_t v30;
  char *v31;
  int *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  double v37;
  uint64_t v38;
  uint64_t v39;
  double v40;
  void (*v41)(uint64_t, uint64_t);
  char *v42;
  char v43;
  __int128 v44;
  double v45;
  char *v46;
  char v47;
  __int128 v48;
  double v49;
  uint64_t v50;
  uint64_t v51;
  void (*v52)(uint64_t, uint64_t);
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  __int128 v61;
  __int128 v62;
  char v63;

  v60 = a3;
  v4 = *(_QWORD *)(a1 + 16);
  v5 = *(_QWORD *)(a1 + 24);
  v6 = type metadata accessor for AnimationPath.SpringElement(0, v4, v5, a2);
  v54 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v53 - v7;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v57 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v11 = (char *)&v53 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v12);
  v58 = (char *)&v53 - v13;
  MEMORY[0x24BDAC7A8](v14);
  v56 = (uint64_t)&v53 - v15;
  v53 = type metadata accessor for AnimationPath.CurveElement(0, v4, v5, v16);
  v55 = *(_QWORD *)(v53 - 8);
  MEMORY[0x24BDAC7A8](v53);
  v18 = (char *)&v53 - v17;
  v19 = *(_QWORD *)(a1 - 8);
  v21 = MEMORY[0x24BDAC7A8](v20);
  v23 = (char *)&v53 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v19 + 16))(v23, v59, a1, v21);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      v25 = v54;
      (*(void (**)(char *, char *, uint64_t))(v54 + 32))(v8, v23, v6);
      v26 = *((_QWORD *)v8 + 2);
      v61 = *(_OWORD *)v8;
      *(_QWORD *)&v62 = v26;
      AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
      v28 = (uint64_t)v58;
      dispatch thunk of static AdditiveArithmetic.- infix(_:_:)();
      Spring.velocity<A>(target:initialVelocity:time:)(v28, AssociatedTypeWitness, AssociatedConformanceWitness, v60, *(double *)&v8[*(int *)(v6 + 52)]);
      (*(void (**)(uint64_t, uint64_t))(v57 + 8))(v28, AssociatedTypeWitness);
      return (*(uint64_t (**)(char *, uint64_t))(v25 + 8))(v8, v6);
    }
    else
    {
      swift_getAssociatedConformanceWitness();
      dispatch thunk of IteratorProtocol.next()();
      return (*(uint64_t (**)(char *, uint64_t))(v19 + 8))(v23, a1);
    }
  }
  else
  {
    v30 = (uint64_t)v11;
    v31 = v18;
    v32 = (int *)v53;
    (*(void (**)(char *, char *, uint64_t))(v55 + 32))(v18, v23, v53);
    v34 = type metadata accessor for HermiteCurve(0, v4, v5, v33);
    HermiteCurve.velocity(at:)(v34, v56, 1.0);
    v35 = v57;
    v36 = (uint64_t)v58;
    if (v18[v32[10]] == 1)
    {
      v37 = HermiteCurve.arcLength.getter();
      v38 = swift_getAssociatedConformanceWitness();
      v39 = v56;
      v40 = (*(double (**)(uint64_t, uint64_t))(v38 + 24))(AssociatedTypeWitness, v38);
      VectorArithmetic.scaled(by:)(AssociatedTypeWitness, v38, v30, 1.0 / sqrt(v40));
      VectorArithmetic.scaled(by:)(AssociatedTypeWitness, v38, v36, v37 / *(double *)&v18[v32[9]]);
      v41 = *(void (**)(uint64_t, uint64_t))(v35 + 8);
      v41(v30, AssociatedTypeWitness);
      v42 = &v18[v32[11]];
      v43 = v42[32];
      v44 = *((_OWORD *)v42 + 1);
      v61 = *(_OWORD *)v42;
      v62 = v44;
      v63 = v43;
      v45 = UnitCurve.velocity(at:)(1.0);
      VectorArithmetic.scaled(by:)(AssociatedTypeWitness, v38, v60, v45);
      v41(v36, AssociatedTypeWitness);
      v41(v39, AssociatedTypeWitness);
    }
    else
    {
      v46 = &v18[v32[11]];
      v47 = v46[32];
      v48 = *((_OWORD *)v46 + 1);
      v61 = *(_OWORD *)v46;
      v62 = v48;
      v63 = v47;
      v49 = UnitCurve.velocity(at:)(1.0);
      v50 = swift_getAssociatedConformanceWitness();
      v51 = v56;
      VectorArithmetic.scaled(by:)(AssociatedTypeWitness, v50, v36, v49);
      VectorArithmetic.scaled(by:)(AssociatedTypeWitness, v50, v60, 1.0 / *(double *)&v18[v32[9]]);
      v52 = *(void (**)(uint64_t, uint64_t))(v35 + 8);
      v52(v36, AssociatedTypeWitness);
      v52(v51, AssociatedTypeWitness);
    }
    return (*(uint64_t (**)(char *, int *))(v55 + 8))(v31, v32);
  }
}

uint64_t AnimationPath.Element.end.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  double v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  int EnumCaseMultiPayload;
  uint64_t v22;
  char *v23;
  uint64_t AssociatedTypeWitness;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v4 = v3;
  v32 = a3;
  v6 = *(_QWORD *)(a1 + 16);
  v7 = *(_QWORD *)(a1 + 24);
  v8 = type metadata accessor for AnimationPath.SpringElement(0, v6, v7, a2);
  v31 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v31 - v9;
  v12 = type metadata accessor for AnimationPath.CurveElement(0, v6, v7, v11);
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v15 = (char *)&v31 - v14;
  v17 = MEMORY[0x24BDAC7A8](v16);
  v19 = (char *)&v31 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v20 + 16))(v19, v4, a1, v17);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      v22 = v31;
      (*(void (**)(char *, char *, uint64_t))(v31 + 32))(v10, v19, v8);
      v23 = &v10[*(int *)(v8 + 48)];
      AssociatedTypeWitness = swift_getAssociatedTypeWitness();
      (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 16))(v32, v23, AssociatedTypeWitness);
      return (*(uint64_t (**)(char *, uint64_t))(v22 + 8))(v10, v8);
    }
    else
    {
      v30 = swift_getAssociatedTypeWitness();
      return (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v30 - 8) + 32))(v32, v19, v30);
    }
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v15, v19, v12);
    v27 = type metadata accessor for HermiteCurve(0, v6, v7, v26);
    v28 = &v15[*(int *)(v27 + 36)];
    v29 = swift_getAssociatedTypeWitness();
    (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v29 - 8) + 16))(v32, v28, v29);
    return (*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)(v27 - 8) + 8))(v15, v27);
  }
}

uint64_t AnimationPath.SpringElement.init(spring:from:to:initialVelocity:end:duration:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>, double a9@<D0>)
{
  uint64_t v15;
  int *v16;
  uint64_t v17;
  uint64_t AssociatedTypeWitness;
  void (*v19)(uint64_t, uint64_t, uint64_t);
  uint64_t result;

  v15 = *(_QWORD *)(a1 + 16);
  *(_OWORD *)a8 = *(_OWORD *)a1;
  *(_QWORD *)(a8 + 16) = v15;
  v16 = (int *)type metadata accessor for AnimationPath.SpringElement(0, a6, a7, a4);
  v17 = a8 + v16[9];
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v19 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 32);
  v19(v17, a2, AssociatedTypeWitness);
  v19(a8 + v16[10], a3, AssociatedTypeWitness);
  v19(a8 + v16[11], a4, AssociatedTypeWitness);
  result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v19)(a8 + v16[12], a5, AssociatedTypeWitness);
  *(double *)(a8 + v16[13]) = a9;
  return result;
}

__n128 AnimationPath.CurveElement.init(curve:duration:constantVelocity:timingCurve:)@<Q0>(uint64_t a1@<X0>, char a2@<W1>, __n128 *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>, double a7@<D0>)
{
  unint64_t v13;
  unint64_t v14;
  unsigned __int8 v15;
  uint64_t v16;
  uint64_t v17;
  int *v18;
  __n128 *v19;
  __n128 result;
  __n128 v21;

  v21 = *a3;
  v13 = a3[1].n128_u64[0];
  v14 = a3[1].n128_u64[1];
  v15 = a3[2].n128_u8[0];
  v16 = type metadata accessor for HermiteCurve(0, a4, a5, a4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 32))(a6, a1, v16);
  v18 = (int *)type metadata accessor for AnimationPath.CurveElement(0, a4, a5, v17);
  *(double *)(a6 + v18[9]) = a7;
  *(_BYTE *)(a6 + v18[10]) = a2;
  v19 = (__n128 *)(a6 + v18[11]);
  result = v21;
  *v19 = v21;
  v19[1].n128_u64[0] = v13;
  v19[1].n128_u64[1] = v14;
  v19[2].n128_u8[0] = v15;
  return result;
}

uint64_t AnimationPath.currentVelocity.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t AssociatedTypeWitness;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v20 = a5;
  v6 = type metadata accessor for AnimationPath.Element(255, a2, a3, a4);
  v19 = type metadata accessor for Optional();
  v7 = *(_QWORD *)(v19 - 8);
  MEMORY[0x24BDAC7A8](v19);
  v9 = (char *)&v18 - v8;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v11 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v13 = (char *)&v18 - v12;
  v21 = a1;
  v14 = type metadata accessor for Array();
  MEMORY[0x23B7C9C04](MEMORY[0x24BEE12B0], v14);
  BidirectionalCollection.last.getter();
  v15 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v9, 1, v6) == 1)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v19);
    swift_getAssociatedConformanceWitness();
    return dispatch thunk of IteratorProtocol.next()();
  }
  else
  {
    AnimationPath.Element.endVelocity.getter(v6, v16, (uint64_t)v13);
    (*(void (**)(char *, uint64_t))(v15 + 8))(v9, v6);
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v11 + 32))(v20, v13, AssociatedTypeWitness);
  }
}

uint64_t AnimationPath.init(_:)(void (*a1)(uint64_t *), uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;

  type metadata accessor for AnimationPath.Element(0, a3, a4, a4);
  v6 = static Array._allocateUninitialized(_:)();
  a1(&v6);
  return v6;
}

uint64_t AnimationPath.duration.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v5 = type metadata accessor for AnimationPath.Element(0, a2, a3, a4);
  v6 = swift_bridgeObjectRetain();
  if (!MEMORY[0x23B7C6298](v6, v5))
    return swift_bridgeObjectRelease();
  v7 = 0;
  v8 = 0.0;
  while (1)
  {
    result = Array._checkSubscript(_:wasNativeTypeChecked:)();
    v13 = v7 + 1;
    if (__OFADD__(v7, 1))
      break;
    v8 = v8 + AnimationPath.Element.duration.getter(v5, v10, v11, v12);
    ++v7;
    if (v13 == MEMORY[0x23B7C6298](a1, v5))
      return swift_bridgeObjectRelease();
  }
  __break(1u);
  return result;
}

uint64_t AnimationPath.update(value:time:)(double a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;
  _QWORD v16[2];

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v11 = (char *)v16 - v10;
  v16[1] = a3;
  type metadata accessor for AnimationPath.Element(255, a4, a5, v12);
  v13 = type metadata accessor for Array();
  MEMORY[0x23B7C9C04](MEMORY[0x24BEE12E0], v13);
  result = Collection.isEmpty.getter();
  if ((result & 1) == 0)
  {
    AnimationPath.animatableData(at:)(a3, a4, a5, v15, (uint64_t)v11, a1);
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(a5 + 32))(v11, a4, a5);
  }
  return result;
}

uint64_t AnimationPath.update(velocity:time:)(double a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v14;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v11 = (char *)&v14 - v10;
  AnimationPath.velocity(at:)(a3, a4, a5, v12, (uint64_t)&v14 - v10, a1);
  return (*(uint64_t (**)(char *, uint64_t, uint64_t))(a5 + 32))(v11, a4, a5);
}

double AnimationPath.Element.duration.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  double v20;
  uint64_t v21;
  char *v22;
  int EnumCaseMultiPayload;
  double v24;
  uint64_t v26;

  v5 = v4;
  v7 = *(_QWORD *)(a1 + 16);
  v8 = *(_QWORD *)(a1 + 24);
  v9 = type metadata accessor for AnimationPath.SpringElement(0, v7, v8, a4);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v26 - v11;
  v14 = type metadata accessor for AnimationPath.CurveElement(0, v7, v8, v13);
  v15 = *(_QWORD *)(v14 - 8);
  MEMORY[0x24BDAC7A8](v14);
  v17 = (char *)&v26 - v16;
  v18 = *(_QWORD *)(a1 - 8);
  v20 = MEMORY[0x24BDAC7A8](v19);
  v22 = (char *)&v26 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v18 + 16))(v22, v5, a1, v20);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v12, v22, v9);
      v24 = *(double *)&v12[*(int *)(v9 + 52)];
      (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v18 + 8))(v22, a1);
      return 0.0;
    }
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v17, v22, v14);
    v24 = *(double *)&v17[*(int *)(v14 + 36)];
    (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v14);
  }
  return v24;
}

uint64_t AnimationPath.animatableData(at:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>, double a6@<D0>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t AssociatedTypeWitness;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t result;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  double v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD v35[2];
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  v10 = type metadata accessor for AnimationPath.Element(255, a2, a3, a4);
  v11 = type metadata accessor for Optional();
  v39 = *(_QWORD *)(v11 - 8);
  v40 = v11;
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)v35 - v12;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v38 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v37 = (uint64_t)v35 - v15;
  v16 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v17);
  v19 = (char *)v35 - v18;
  v20 = swift_bridgeObjectRetain();
  if (MEMORY[0x23B7C6298](v20, v10))
  {
    v35[1] = a2;
    v36 = a5;
    v21 = 0;
    v22 = a1 + ((*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80));
    while (1)
    {
      result = Array._checkSubscript(_:wasNativeTypeChecked:)();
      v24 = v21 + 1;
      if (__OFADD__(v21, 1))
        break;
      (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v19, v22 + *(_QWORD *)(v16 + 72) * v21, v10);
      if (a6 <= AnimationPath.Element.duration.getter(v10, v25, v26, v27))
      {
        swift_bridgeObjectRelease();
        AnimationPath.Element.animatableData(at:)(v10, v36, a6);
        return (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v19, v10);
      }
      v31 = AnimationPath.Element.duration.getter(v10, v28, v29, v30);
      (*(void (**)(char *, uint64_t))(v16 + 8))(v19, v10);
      a6 = a6 - v31;
      ++v21;
      if (v24 == MEMORY[0x23B7C6298](a1, v10))
      {
        swift_bridgeObjectRelease();
        a5 = v36;
        goto LABEL_8;
      }
    }
    __break(1u);
  }
  else
  {
    swift_bridgeObjectRelease();
LABEL_8:
    v41 = a1;
    v32 = type metadata accessor for Array();
    MEMORY[0x23B7C9C04](MEMORY[0x24BEE12B0], v32);
    BidirectionalCollection.last.getter();
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v13, 1, v10) == 1)
    {
      (*(void (**)(char *, uint64_t))(v39 + 8))(v13, v40);
      swift_getAssociatedConformanceWitness();
      return dispatch thunk of IteratorProtocol.next()();
    }
    else
    {
      v34 = v37;
      AnimationPath.Element.end.getter(v10, v33, v37);
      (*(void (**)(char *, uint64_t))(v16 + 8))(v13, v10);
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v38 + 32))(a5, v34, AssociatedTypeWitness);
    }
  }
  return result;
}

uint64_t AnimationPath.velocity(at:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>, double a6@<D0>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  double v24;
  uint64_t v25;
  uint64_t v26;

  v9 = type metadata accessor for AnimationPath.Element(0, a2, a3, a4);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v26 - v11;
  v13 = swift_bridgeObjectRetain();
  if (MEMORY[0x23B7C6298](v13, v9))
  {
    v14 = 0;
    v15 = a1 + ((*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80));
    while (1)
    {
      result = Array._checkSubscript(_:wasNativeTypeChecked:)();
      v17 = v14 + 1;
      if (__OFADD__(v14, 1))
        break;
      (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, v15 + *(_QWORD *)(v10 + 72) * v14, v9);
      if (a6 <= AnimationPath.Element.duration.getter(v9, v18, v19, v20))
      {
        swift_bridgeObjectRelease();
        AnimationPath.Element.velocity(at:)(v9, v25, a5, a6);
        return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
      }
      v24 = AnimationPath.Element.duration.getter(v9, v21, v22, v23);
      (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
      a6 = a6 - v24;
      ++v14;
      if (v17 == MEMORY[0x23B7C6298](a1, v9))
        goto LABEL_6;
    }
    __break(1u);
  }
  else
  {
LABEL_6:
    swift_bridgeObjectRelease();
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    return dispatch thunk of IteratorProtocol.next()();
  }
  return result;
}

uint64_t type metadata accessor for AnimationPath.Element(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AnimationPath.Element);
}

uint64_t AnimationPath.Element.animatableData(at:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t AssociatedTypeWitness;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  int *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  double v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  int EnumCaseMultiPayload;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t AssociatedConformanceWitness;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  void (*v35)(uint64_t, uint64_t);
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  char v45;
  __int128 v46;
  double v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  double v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  char *v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  __int128 v62;
  __int128 v63;
  char v64;

  v60 = a2;
  v7 = *(_QWORD *)(a1 + 16);
  v6 = *(_QWORD *)(a1 + 24);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v61 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v56 = (char *)&v54 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v10);
  v58 = (char *)&v54 - v11;
  MEMORY[0x24BDAC7A8](v12);
  v57 = (char *)&v54 - v13;
  v55 = type metadata accessor for AnimationPath.SpringElement(0, v7, v6, v14);
  v59 = *(_QWORD *)(v55 - 8);
  MEMORY[0x24BDAC7A8](v55);
  v16 = (char *)&v54 - v15;
  v18 = (int *)type metadata accessor for AnimationPath.CurveElement(0, v7, v6, v17);
  v19 = *((_QWORD *)v18 - 1);
  MEMORY[0x24BDAC7A8](v18);
  v21 = (char *)&v54 - v20;
  v23 = MEMORY[0x24BDAC7A8](v22);
  v25 = (char *)&v54 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v26 + 16))(v25, v3, a1, v23);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      v28 = v55;
      (*(void (**)(char *, char *, uint64_t))(v59 + 32))(v16, v25, v55);
      v29 = v57;
      (*(void (**)(char *, char *, uint64_t))(v61 + 16))(v57, &v16[*(int *)(v28 + 36)], AssociatedTypeWitness);
      v30 = *((_QWORD *)v16 + 2);
      v62 = *(_OWORD *)v16;
      *(_QWORD *)&v63 = v30;
      AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
      v32 = *(_QWORD *)(AssociatedConformanceWitness + 8);
      v33 = (uint64_t)v56;
      dispatch thunk of static AdditiveArithmetic.- infix(_:_:)();
      v34 = v58;
      Spring.value<A>(target:initialVelocity:time:)(v33, a3, (uint64_t)&v16[*(int *)(v28 + 44)], AssociatedTypeWitness, AssociatedConformanceWitness);
      v35 = *(void (**)(uint64_t, uint64_t))(v61 + 8);
      v35(v33, AssociatedTypeWitness);
      MEMORY[0x23B7C7090](v29, v34, AssociatedTypeWitness, v32);
      v35((uint64_t)v34, AssociatedTypeWitness);
      v35((uint64_t)v29, AssociatedTypeWitness);
      return (*(uint64_t (**)(char *, uint64_t))(v59 + 8))(v16, v28);
    }
    else
    {
      return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v61 + 32))(v60, v25, AssociatedTypeWitness);
    }
  }
  else
  {
    (*(void (**)(char *, char *, int *))(v19 + 32))(v21, v25, v18);
    if (a3 >= 0.0)
    {
      if (AnimationPath.Element.duration.getter(a1, v37, v38, v39) >= a3)
      {
        v44 = &v21[v18[11]];
        v45 = v44[32];
        v46 = *((_OWORD *)v44 + 1);
        v62 = *(_OWORD *)v44;
        v63 = v46;
        v64 = v45;
        v47 = UnitCurve.value(at:)(a3 / *(double *)&v21[v18[9]]);
        v48 = v21[v18[10]];
        v50 = type metadata accessor for HermiteCurve(0, v7, v6, v49);
        v51 = v50;
        v52 = v60;
        if (v48 == 1)
        {
          v53 = HermiteCurve.arcLength.getter();
          HermiteCurve.value(atArcLength:)(v51, v52, v47 * v53);
        }
        else
        {
          HermiteCurve.value(at:)(v50, v60, v47);
        }
        return (*(uint64_t (**)(char *, int *))(v19 + 8))(v21, v18);
      }
      else
      {
        v43 = type metadata accessor for HermiteCurve(0, v7, v6, v42);
        (*(void (**)(uint64_t, char *, uint64_t))(v61 + 16))(v60, &v21[*(int *)(v43 + 36)], AssociatedTypeWitness);
        return (*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)(v43 - 8) + 8))(v21, v43);
      }
    }
    else
    {
      (*(void (**)(uint64_t, char *, uint64_t))(v61 + 16))(v60, v21, AssociatedTypeWitness);
      v41 = type metadata accessor for HermiteCurve(0, v7, v6, v40);
      return (*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)(v41 - 8) + 8))(v21, v41);
    }
  }
}

uint64_t AnimationPath.Element.velocity(at:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>, double a4@<D0>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t AssociatedTypeWitness;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  double v23;
  uint64_t v24;
  char *v25;
  int EnumCaseMultiPayload;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t AssociatedConformanceWitness;
  uint64_t v32;
  double v34;
  uint64_t (*v35)(char *, int *);
  char *v36;
  int *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  Swift::Double v44;
  double v45;
  uint64_t v46;
  double v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  double v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  void (*v59)(char *, uint64_t);
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  __int128 v68;
  uint64_t v69;
  uint64_t v70;
  char v71;

  v66 = a3;
  v6 = *(_QWORD *)(a1 + 16);
  v7 = *(_QWORD *)(a1 + 24);
  v8 = type metadata accessor for AnimationPath.SpringElement(0, v6, v7, a2);
  v61 = *(_QWORD *)(v8 - 8);
  v62 = (char *)v8;
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v60 - v9;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v64 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v65 = AssociatedTypeWitness;
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v13 = (char *)&v60 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v14);
  v63 = (uint64_t)&v60 - v15;
  v17 = (int *)type metadata accessor for AnimationPath.CurveElement(0, v6, v7, v16);
  v18 = *((_QWORD *)v17 - 1);
  MEMORY[0x24BDAC7A8](v17);
  v20 = (char *)&v60 - v19;
  v21 = *(_QWORD *)(a1 - 8);
  v23 = MEMORY[0x24BDAC7A8](v22);
  v25 = (char *)&v60 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v21 + 16))(v25, v67, a1, v23);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      v28 = v61;
      v27 = v62;
      (*(void (**)(char *, char *, char *))(v61 + 32))(v10, v25, v62);
      v29 = *((_QWORD *)v10 + 2);
      v68 = *(_OWORD *)v10;
      v69 = v29;
      v30 = v65;
      AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
      v32 = v63;
      dispatch thunk of static AdditiveArithmetic.- infix(_:_:)();
      Spring.velocity<A>(target:initialVelocity:time:)(v32, v30, AssociatedConformanceWitness, v66, a4);
      (*(void (**)(uint64_t, uint64_t))(v64 + 8))(v32, v30);
      return (*(uint64_t (**)(char *, char *))(v28 + 8))(v10, v27);
    }
    swift_getAssociatedConformanceWitness();
    dispatch thunk of IteratorProtocol.next()();
    v35 = *(uint64_t (**)(char *, int *))(v21 + 8);
    v36 = v25;
    v37 = (int *)a1;
  }
  else
  {
    (*(void (**)(char *, char *, int *))(v18 + 32))(v20, v25, v17);
    v34 = *(double *)&v20[v17[9]];
    if (v34 > 0.0 && a4 >= 0.0 && v34 >= a4)
    {
      v38 = &v20[v17[11]];
      v39 = *(_QWORD *)v38;
      v40 = *((_QWORD *)v38 + 1);
      v62 = v20;
      v41 = *((_QWORD *)v38 + 2);
      v42 = *((_QWORD *)v38 + 3);
      v67 = v18;
      *(_QWORD *)&v68 = v39;
      v43 = v38[32];
      *((_QWORD *)&v68 + 1) = v40;
      v69 = v41;
      v44 = a4 / v34;
      v70 = v42;
      v71 = v43;
      v45 = UnitCurve.value(at:)(v44);
      *(_QWORD *)&v68 = v39;
      *((_QWORD *)&v68 + 1) = v40;
      v69 = v41;
      v70 = v42;
      v20 = v62;
      v71 = v43;
      v46 = v67;
      v47 = UnitCurve.velocity(at:)(v44);
      v48 = v20[v17[10]];
      v50 = type metadata accessor for HermiteCurve(0, v6, v7, v49);
      v51 = v50;
      v52 = v66;
      if (v48 == 1)
      {
        v53 = HermiteCurve.arcLength.getter();
        HermiteCurve.velocity(atArcLength:)(v51, v52, v45 * v53);
        v35 = *(uint64_t (**)(char *, int *))(v46 + 8);
      }
      else
      {
        v54 = v13;
        HermiteCurve.velocity(at:)(v50, (uint64_t)v13, v45);
        v55 = v65;
        v56 = swift_getAssociatedConformanceWitness();
        v57 = v63;
        VectorArithmetic.scaled(by:)(v55, v56, v63, 1.0 / v34);
        v58 = v46;
        v59 = *(void (**)(char *, uint64_t))(v64 + 8);
        v59(v54, v55);
        VectorArithmetic.scaled(by:)(v55, v56, v52, v47);
        v59((char *)v57, v55);
        v35 = *(uint64_t (**)(char *, int *))(v58 + 8);
      }
    }
    else
    {
      swift_getAssociatedConformanceWitness();
      dispatch thunk of IteratorProtocol.next()();
      v35 = *(uint64_t (**)(char *, int *))(v18 + 8);
    }
    v36 = v20;
    v37 = v17;
  }
  return v35(v36, v37);
}

uint64_t static AnimationPath.CurveElement.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  int *v9;
  uint64_t v10;
  float64x2_t *v11;
  int v12;
  uint64_t v13;
  float64x2_t v14;
  float64x2_t v15;
  float64x2_t v16;
  float64x2_t v17;
  int v18;
  int8x16_t v19;
  uint64_t v20;
  int8x16_t v21;
  BOOL v22;
  uint64_t result;
  int8x16_t v25;
  uint64_t v26;
  int8x16_t v27;

  if ((static HermiteCurve.== infix(_:_:)(a1, a2, a3, a4) & 1) == 0)
    return 0;
  v9 = (int *)type metadata accessor for AnimationPath.CurveElement(0, a3, a4, v8);
  if (*(double *)(a1 + v9[9]) != *(double *)(a2 + v9[9])
    || *(unsigned __int8 *)(a1 + v9[10]) != *(unsigned __int8 *)(a2 + v9[10]))
  {
    return 0;
  }
  v10 = v9[11];
  v11 = (float64x2_t *)(a1 + v10);
  v12 = *(unsigned __int8 *)(a1 + v10 + 32);
  v13 = a2 + v10;
  v15 = *v11;
  v14 = v11[1];
  v17 = *(float64x2_t *)v13;
  v16 = *(float64x2_t *)(v13 + 16);
  v18 = *(unsigned __int8 *)(v13 + 32);
  if (v12 != 1)
    return (v18 & 1) == 0
        && (vminv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(vmovn_s32(vuzp1q_s32((int32x4_t)vceqq_f64(v15, v17), (int32x4_t)vceqq_f64(v14, v16))), 0xFuLL))) & 1) != 0;
  v19 = vorrq_s8((int8x16_t)vdupq_lane_s64(*(uint64_t *)&v14.f64[0], 0), (int8x16_t)v15);
  if (!(v19.i64[1] | *(_QWORD *)&v15.f64[0] | *(_QWORD *)&v14.f64[1]))
    return v18
        && !(vorrq_s8((int8x16_t)vdupq_lane_s64(*(uint64_t *)&v16, 0), *(int8x16_t *)&v17).i64[1] | *(_QWORD *)&v17.f64[0] | *(_QWORD *)&v16.f64[1]);
  v20 = v19.i64[1] | *(_QWORD *)&v14.f64[1];
  if (*(_QWORD *)&v15.f64[0] == 1 && !v20)
  {
    if (!v18)
      return 0;
    v21 = vorrq_s8((int8x16_t)vdupq_lane_s64(*(uint64_t *)&v16.f64[0], 0), (int8x16_t)v17);
    v22 = v21.i64[1] | *(_QWORD *)&v17.f64[0] | *(_QWORD *)&v16.f64[1] && *(_QWORD *)&v17.f64[0] == 1;
    return v22 && (v21.i64[1] | *(_QWORD *)&v16.f64[1]) == 0;
  }
  if (*(_QWORD *)&v15.f64[0] == 2 && !v20)
  {
    if (!v18)
      return 0;
    v25 = vorrq_s8((int8x16_t)vdupq_lane_s64(*(uint64_t *)&v16.f64[0], 0), (int8x16_t)v17);
    if (!(v25.i64[1] | *(_QWORD *)&v17.f64[0] | *(_QWORD *)&v16.f64[1]))
      return 0;
    v26 = v25.i64[1] | *(_QWORD *)&v16.f64[1];
    if (*(_QWORD *)&v17.f64[0] == 1 && !v26)
      return 0;
    return *(_QWORD *)&v17.f64[0] == 2 && !v26;
  }
  if ((v18 & 1) == 0)
    return 0;
  v27 = vorrq_s8((int8x16_t)vdupq_lane_s64(*(uint64_t *)&v16.f64[0], 0), (int8x16_t)v17);
  if (!(v27.i64[1] | *(_QWORD *)&v17.f64[0] | *(_QWORD *)&v16.f64[1]))
    return 0;
  result = 1;
  if ((unint64_t)(*(_QWORD *)&v17.f64[0] - 1) <= 1 && !(v27.i64[1] | *(_QWORD *)&v16.f64[1]))
    return 0;
  return result;
}

BOOL static AnimationPath.SpringElement.== infix(_:_:)(double *a1, double *a2, uint64_t a3, uint64_t a4)
{
  BOOL v5;
  uint64_t v10;
  uint64_t v11;

  v5 = *a1 == *a2 && a1[1] == a2[1] && a1[2] == a2[2];
  if (v5
    && (swift_getAssociatedTypeWitness(),
        v11 = type metadata accessor for AnimationPath.SpringElement(0, a3, a4, v10),
        swift_getAssociatedConformanceWitness(),
        (dispatch thunk of static Equatable.== infix(_:_:)() & 1) != 0)
    && (dispatch thunk of static Equatable.== infix(_:_:)() & 1) != 0
    && (dispatch thunk of static Equatable.== infix(_:_:)() & 1) != 0
    && (dispatch thunk of static Equatable.== infix(_:_:)() & 1) != 0)
  {
    return *(double *)((char *)a1 + *(int *)(v11 + 52)) == *(double *)((char *)a2 + *(int *)(v11 + 52));
  }
  else
  {
    return 0;
  }
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance AnimationPath<A>.CurveElement(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return static AnimationPath.CurveElement.== infix(_:_:)(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24));
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance AnimationPath<A>.SpringElement(double *a1, double *a2, uint64_t a3)
{
  return static AnimationPath.SpringElement.== infix(_:_:)(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24));
}

uint64_t type metadata accessor for AnimationPath.SpringElement(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AnimationPath.SpringElement);
}

uint64_t type metadata accessor for AnimationPath.CurveElement(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AnimationPath.CurveElement);
}

uint64_t type metadata accessor for AnimationPath(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AnimationPath);
}

uint64_t type metadata completion function for AnimationPath.CurveElement(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  unint64_t v5;

  result = type metadata accessor for HermiteCurve(319, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a4);
  if (v5 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for AnimationPath.CurveElement(uint64_t *a1, uint64_t *a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t *, uint64_t *, uint64_t);
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  __int128 v21;
  __int128 v22;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = *(_DWORD *)(v5 + 80);
  v8 = v6 + v7;
  v9 = ((v6 + v7 + ((v6 + v7 + ((v6 + v7) & ~v7)) & ~v7)) & ~v7) + v6;
  if (v7 > 7 || (*(_DWORD *)(v5 + 80) & 0x100000) != 0 || ((v9 + 23) & 0xFFFFFFFFFFFFFFF8) + 33 > 0x18)
  {
    v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v7 & 0xF8 ^ 0x1F8) & (v7 + 16)));
    swift_retain();
  }
  else
  {
    v13 = AssociatedTypeWitness;
    v14 = ~v7;
    v15 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v5 + 16);
    v15(a1, a2, AssociatedTypeWitness);
    v15((uint64_t *)(((unint64_t)a1 + v8) & v14), (uint64_t *)(((unint64_t)a2 + v8) & v14), v13);
    v16 = (v8 + (((unint64_t)a2 + v8) & v14)) & v14;
    v15((uint64_t *)((v8 + (((unint64_t)a1 + v8) & v14)) & v14), (uint64_t *)v16, v13);
    v15((uint64_t *)((v8 + ((v8 + (((unint64_t)a1 + v8) & v14)) & v14)) & v14), (uint64_t *)((v8 + v16) & v14), v13);
    v17 = ((unint64_t)a1 + v9 + 7) & 0xFFFFFFFFFFFFFFF8;
    v18 = ((unint64_t)a2 + v9 + 7) & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)v17 = *(_QWORD *)v18;
    *(_BYTE *)(v17 + 8) = *(_BYTE *)(v18 + 8);
    v19 = ((unint64_t)a1 + v9 + 23) & 0xFFFFFFFFFFFFFFF8;
    v20 = ((unint64_t)a2 + v9 + 23) & 0xFFFFFFFFFFFFFFF8;
    v22 = *(_OWORD *)v20;
    v21 = *(_OWORD *)(v20 + 16);
    *(_BYTE *)(v19 + 32) = *(_BYTE *)(v20 + 32);
    *(_OWORD *)v19 = v22;
    *(_OWORD *)(v19 + 16) = v21;
  }
  return a1;
}

uint64_t initializeWithCopy for AnimationPath.CurveElement(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  __int128 v17;
  __int128 v18;
  unint64_t v19;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
  v6(a1, a2, AssociatedTypeWitness);
  v7 = *(_QWORD *)(v5 + 64);
  v8 = *(unsigned __int8 *)(v5 + 80);
  v9 = v7 + v8;
  v6((v7 + v8 + a1) & ~v8, (v7 + v8 + a2) & ~v8, AssociatedTypeWitness);
  v10 = (v7 + v8 + ((v7 + v8 + a2) & ~v8)) & ~v8;
  v6((v7 + v8 + ((v7 + v8 + a1) & ~v8)) & ~v8, v10, AssociatedTypeWitness);
  v6((v9 + ((v9 + ((v7 + v8 + a1) & ~v8)) & ~v8)) & ~v8, (v9 + v10) & ~v8, AssociatedTypeWitness);
  v11 = ((v9 + ((v9 + (v9 & ~v8)) & ~v8)) & ~v8) + v7;
  v12 = v11 + a1;
  v13 = v11 + a2;
  v14 = (v12 + 7) & 0xFFFFFFFFFFFFFFF8;
  v15 = (v13 + 7) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v14 = *(_QWORD *)v15;
  *(_BYTE *)(v14 + 8) = *(_BYTE *)(v15 + 8);
  v16 = (v13 + 23) & 0xFFFFFFFFFFFFFFF8;
  v18 = *(_OWORD *)v16;
  v17 = *(_OWORD *)(v16 + 16);
  v19 = (v12 + 23) & 0xFFFFFFFFFFFFFFF8;
  *(_BYTE *)(v19 + 32) = *(_BYTE *)(v16 + 32);
  *(_OWORD *)v19 = v18;
  *(_OWORD *)(v19 + 16) = v17;
  return a1;
}

uint64_t assignWithCopy for AnimationPath.CurveElement(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  __int128 v17;
  __int128 v18;
  unint64_t v19;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 24);
  v6(a1, a2, AssociatedTypeWitness);
  v7 = *(_QWORD *)(v5 + 64);
  v8 = *(unsigned __int8 *)(v5 + 80);
  v9 = v7 + v8;
  v6((v7 + v8 + a1) & ~v8, (v7 + v8 + a2) & ~v8, AssociatedTypeWitness);
  v10 = (v7 + v8 + ((v7 + v8 + a2) & ~v8)) & ~v8;
  v6((v7 + v8 + ((v7 + v8 + a1) & ~v8)) & ~v8, v10, AssociatedTypeWitness);
  v6((v9 + ((v9 + ((v7 + v8 + a1) & ~v8)) & ~v8)) & ~v8, (v9 + v10) & ~v8, AssociatedTypeWitness);
  v11 = ((v9 + ((v9 + (v9 & ~v8)) & ~v8)) & ~v8) + v7;
  v12 = v11 + a1;
  v13 = v11 + a2;
  v14 = (v12 + 7) & 0xFFFFFFFFFFFFFFF8;
  v15 = (v13 + 7) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v14 = *(_QWORD *)v15;
  *(_BYTE *)(v14 + 8) = *(_BYTE *)(v15 + 8);
  v16 = (v13 + 23) & 0xFFFFFFFFFFFFFFF8;
  v18 = *(_OWORD *)v16;
  v17 = *(_OWORD *)(v16 + 16);
  v19 = (v12 + 23) & 0xFFFFFFFFFFFFFFF8;
  *(_BYTE *)(v19 + 32) = *(_BYTE *)(v16 + 32);
  *(_OWORD *)v19 = v18;
  *(_OWORD *)(v19 + 16) = v17;
  return a1;
}

uint64_t initializeWithTake for AnimationPath.CurveElement(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  __int128 v17;
  __int128 v18;
  unint64_t v19;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 32);
  v6(a1, a2, AssociatedTypeWitness);
  v7 = *(_QWORD *)(v5 + 64);
  v8 = *(unsigned __int8 *)(v5 + 80);
  v9 = v7 + v8;
  v6((v7 + v8 + a1) & ~v8, (v7 + v8 + a2) & ~v8, AssociatedTypeWitness);
  v10 = (v7 + v8 + ((v7 + v8 + a2) & ~v8)) & ~v8;
  v6((v7 + v8 + ((v7 + v8 + a1) & ~v8)) & ~v8, v10, AssociatedTypeWitness);
  v6((v9 + ((v9 + ((v7 + v8 + a1) & ~v8)) & ~v8)) & ~v8, (v9 + v10) & ~v8, AssociatedTypeWitness);
  v11 = ((v9 + ((v9 + (v9 & ~v8)) & ~v8)) & ~v8) + v7;
  v12 = v11 + a1;
  v13 = v11 + a2;
  v14 = (v12 + 7) & 0xFFFFFFFFFFFFFFF8;
  v15 = (v13 + 7) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v14 = *(_QWORD *)v15;
  *(_BYTE *)(v14 + 8) = *(_BYTE *)(v15 + 8);
  v16 = (v13 + 23) & 0xFFFFFFFFFFFFFFF8;
  v18 = *(_OWORD *)v16;
  v17 = *(_OWORD *)(v16 + 16);
  v19 = (v12 + 23) & 0xFFFFFFFFFFFFFFF8;
  *(_BYTE *)(v19 + 32) = *(_BYTE *)(v16 + 32);
  *(_OWORD *)v19 = v18;
  *(_OWORD *)(v19 + 16) = v17;
  return a1;
}

uint64_t assignWithTake for AnimationPath.CurveElement(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  __int128 v17;
  __int128 v18;
  unint64_t v19;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 40);
  v6(a1, a2, AssociatedTypeWitness);
  v7 = *(_QWORD *)(v5 + 64);
  v8 = *(unsigned __int8 *)(v5 + 80);
  v9 = v7 + v8;
  v6((v7 + v8 + a1) & ~v8, (v7 + v8 + a2) & ~v8, AssociatedTypeWitness);
  v10 = (v7 + v8 + ((v7 + v8 + a2) & ~v8)) & ~v8;
  v6((v7 + v8 + ((v7 + v8 + a1) & ~v8)) & ~v8, v10, AssociatedTypeWitness);
  v6((v9 + ((v9 + ((v7 + v8 + a1) & ~v8)) & ~v8)) & ~v8, (v9 + v10) & ~v8, AssociatedTypeWitness);
  v11 = ((v9 + ((v9 + (v9 & ~v8)) & ~v8)) & ~v8) + v7;
  v12 = v11 + a1;
  v13 = v11 + a2;
  v14 = (v12 + 7) & 0xFFFFFFFFFFFFFFF8;
  v15 = (v13 + 7) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v14 = *(_QWORD *)v15;
  *(_BYTE *)(v14 + 8) = *(_BYTE *)(v15 + 8);
  v16 = (v13 + 23) & 0xFFFFFFFFFFFFFFF8;
  v18 = *(_OWORD *)v16;
  v17 = *(_OWORD *)(v16 + 16);
  v19 = (v12 + 23) & 0xFFFFFFFFFFFFFFF8;
  *(_BYTE *)(v19 + 32) = *(_BYTE *)(v16 + 32);
  *(_OWORD *)v19 = v18;
  *(_OWORD *)(v19 + 16) = v17;
  return a1;
}

uint64_t getEnumTagSinglePayload for AnimationPath.CurveElement(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int v14;

  v4 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0xFE)
    v6 = 254;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(unsigned __int8 *)(v4 + 80);
  v8 = ((*(_QWORD *)(v4 + 64) + v7 + ((*(_QWORD *)(v4 + 64) + v7 + ((*(_QWORD *)(v4 + 64) + v7) & ~v7)) & ~v7)) & ~v7)
     + *(_QWORD *)(v4 + 64);
  if (v6 < a2)
  {
    v9 = ((v8 + 23) & 0xFFFFFFF8) + 33;
    if (v9 < 4)
      v10 = ((a2 - v6 + 255) >> (8 * v9)) + 1;
    else
      v10 = 2;
    if (v10 >= 0x10000)
      v11 = 4;
    else
      v11 = 2;
    if (v10 < 0x100)
      v11 = 1;
    if (v10 >= 2)
      v12 = v11;
    else
      v12 = 0;
    __asm { BR              X15 }
  }
  if (v5 >= 0xFE)
    return (*(uint64_t (**)(uint64_t))(v4 + 48))(a1);
  v14 = *(unsigned __int8 *)(((a1 + v8 + 7) & 0xFFFFFFFFFFFFF8) + 8);
  if (v14 >= 2)
    return ((v14 + 2147483646) & 0x7FFFFFFF) + 1;
  else
    return 0;
}

void storeEnumTagSinglePayload for AnimationPath.CurveElement(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  size_t v9;
  unsigned int v10;
  int v11;
  int v12;
  unsigned int v13;

  v6 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  if (*(_DWORD *)(v6 + 84) <= 0xFEu)
    v7 = 254;
  else
    v7 = *(_DWORD *)(v6 + 84);
  v8 = *(unsigned __int8 *)(v6 + 80);
  v9 = ((((*(_QWORD *)(v6 + 64) + v8 + ((*(_QWORD *)(v6 + 64) + v8 + ((*(_QWORD *)(v6 + 64) + v8) & ~v8)) & ~v8)) & ~v8)
       + *(_QWORD *)(v6 + 64)
       + 23) & 0xFFFFFFFFFFFFFFF8)
     + 33;
  if (v7 >= a3)
  {
    v12 = 0;
    if (v7 >= a2)
      goto LABEL_17;
  }
  else
  {
    if (v9 <= 3)
      v10 = ((a3 - v7 + 255) >> (8 * v9)) + 1;
    else
      v10 = 2;
    if (v10 >= 0x10000)
      v11 = 4;
    else
      v11 = 2;
    if (v10 < 0x100)
      v11 = 1;
    if (v10 >= 2)
      v12 = v11;
    else
      v12 = 0;
    if (v7 >= a2)
LABEL_17:
      __asm { BR              X11 }
  }
  if (v9 >= 4)
    v13 = ~v7 + a2;
  else
    v13 = (~(_BYTE)v7 + a2);
  bzero(a1, v9);
  if ((_DWORD)v9 == 1)
    *a1 = v13;
  else
    *(_DWORD *)a1 = v13;
  __asm { BR              X10 }
}

void sub_2350C0164()
{
  uint64_t v0;
  char v1;
  uint64_t v2;

  *(_BYTE *)(v0 + v2) = v1;
}

void sub_2350C016C()
{
  uint64_t v0;
  int v1;
  uint64_t v2;

  *(_DWORD *)(v0 + v2) = 0;
  if (v1)
    JUMPOUT(0x2350C0174);
}

void sub_2350C01D8()
{
  _BYTE *v0;
  char v1;

  *v0 = v1;
}

void sub_2350C01FC()
{
  uint64_t v0;
  __int16 v1;
  uint64_t v2;

  *(_WORD *)(v0 + v2) = v1;
}

void sub_2350C0204()
{
  uint64_t v0;
  int v1;
  uint64_t v2;

  *(_DWORD *)(v0 + v2) = v1;
}

void sub_2350C020C(uint64_t a1, size_t a2, unsigned int a3)
{
  int v3;
  char *v4;
  unsigned int v5;
  uint64_t v6;

  *(_WORD *)&v4[v6] = 0;
  if (v5)
  {
    if (a3 < 0xFE)
      JUMPOUT(0x2350C01E0);
    if (a3 >= v5)
      JUMPOUT(0x2350C0218);
    if ((_DWORD)a2)
    {
      if (a2 <= 3)
        v3 = a2;
      else
        v3 = 4;
      bzero(v4, a2);
      __asm { BR              X10 }
    }
  }
}

void sub_2350C0238()
{
  uint64_t v0;
  int v1;

  *(_WORD *)v0 = v1;
  *(_BYTE *)(v0 + 2) = BYTE2(v1);
}

void sub_2350C0248()
{
  _WORD *v0;
  __int16 v1;

  *v0 = v1;
}

uint64_t type metadata completion function for AnimationPath.SpringElement()
{
  uint64_t result;
  unint64_t v1;

  result = swift_getAssociatedTypeWitness();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for AnimationPath.SpringElement(uint64_t *a1, uint64_t *a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(uint64_t, uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = *(_DWORD *)(v5 + 80);
  v7 = *(_QWORD *)(v5 + 64);
  v8 = v7 + v6;
  v9 = v7 + 7;
  if (v6 > 7
    || (*(_DWORD *)(v5 + 80) & 0x100000) != 0
    || ((v7 + 7 + ((v7 + v6 + ((v7 + v6 + ((v7 + v6 + ((v6 + 24) & ~v6)) & ~v6)) & ~v6)) & ~v6)) & 0xFFFFFFFFFFFFFFF8)
     + 8 > 0x18)
  {
    v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v6 & 0xF8 ^ 0x1F8) & (v6 + 16)));
    swift_retain();
  }
  else
  {
    v13 = AssociatedTypeWitness;
    v14 = ~v6;
    *(_OWORD *)a1 = *(_OWORD *)a2;
    a1[2] = a2[2];
    v15 = (char *)a1 + v6;
    v16 = (char *)a2 + v6;
    v17 = (unint64_t)(v15 + 24) & v14;
    v18 = (unint64_t)(v16 + 24) & v14;
    v19 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
    v19(v17, v18, AssociatedTypeWitness);
    v20 = (v8 + v17) & v14;
    v21 = (v8 + v18) & v14;
    v19(v20, v21, v13);
    v22 = (v8 + v20) & v14;
    v23 = (v8 + v21) & v14;
    v19(v22, v23, v13);
    v24 = (v8 + v22) & v14;
    v25 = (v8 + v23) & v14;
    v19(v24, v25, v13);
    *(_QWORD *)((v9 + v24) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((v9 + v25) & 0xFFFFFFFFFFFFF8);
  }
  return a1;
}

uint64_t destroy for AnimationPath.SpringElement(uint64_t a1)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v10)(uint64_t, uint64_t);

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v3 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v4 = *(unsigned __int8 *)(v3 + 80);
  v5 = (a1 + v4 + 24) & ~v4;
  v10 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
  v10(v5, AssociatedTypeWitness);
  v6 = *(_QWORD *)(v3 + 64) + v4;
  v7 = (v6 + v5) & ~v4;
  v10(v7, AssociatedTypeWitness);
  v8 = (v6 + v7) & ~v4;
  v10(v8, AssociatedTypeWitness);
  return ((uint64_t (*)(uint64_t, uint64_t))v10)((v6 + v8) & ~v4, AssociatedTypeWitness);
}

uint64_t initializeWithCopy for AnimationPath.SpringElement(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = *(unsigned __int8 *)(v5 + 80);
  v7 = (v6 + 24 + a2) & ~v6;
  v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
  v8((v6 + 24 + a1) & ~v6, v7, AssociatedTypeWitness);
  v9 = *(_QWORD *)(v5 + 64);
  v10 = (v9 + v6 + ((v6 + 24 + a1) & ~v6)) & ~v6;
  v11 = (v9 + v6 + v7) & ~v6;
  v8(v10, v11, AssociatedTypeWitness);
  v12 = (v9 + v6 + v10) & ~v6;
  v13 = (v9 + v6 + v11) & ~v6;
  v8(v12, v13, AssociatedTypeWitness);
  v14 = (v9 + v6 + v12) & ~v6;
  v15 = (v9 + v6 + v13) & ~v6;
  v8(v14, v15, AssociatedTypeWitness);
  *(_QWORD *)((v9 + 7 + v14) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((v9 + 7 + v15) & 0xFFFFFFFFFFFFF8);
  return a1;
}

_QWORD *assignWithCopy for AnimationPath.SpringElement(_QWORD *a1, _QWORD *a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(unint64_t, uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = *(unsigned __int8 *)(v5 + 80);
  v7 = ((unint64_t)a2 + v6 + 24) & ~v6;
  v8 = *(void (**)(unint64_t, uint64_t, uint64_t))(v5 + 24);
  v8(((unint64_t)a1 + v6 + 24) & ~v6, v7, AssociatedTypeWitness);
  v9 = *(_QWORD *)(v5 + 64);
  v10 = (v9 + v6 + (((unint64_t)a1 + v6 + 24) & ~v6)) & ~v6;
  v11 = (v9 + v6 + v7) & ~v6;
  v8(v10, v11, AssociatedTypeWitness);
  v12 = (v9 + v6 + v10) & ~v6;
  v13 = (v9 + v6 + v11) & ~v6;
  v8(v12, v13, AssociatedTypeWitness);
  v14 = (v9 + v6 + v12) & ~v6;
  v15 = (v9 + v6 + v13) & ~v6;
  v8(v14, v15, AssociatedTypeWitness);
  *(_QWORD *)((v9 + 7 + v14) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((v9 + 7 + v15) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t initializeWithTake for AnimationPath.SpringElement(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = *(unsigned __int8 *)(v5 + 80);
  v7 = (v6 + 24 + a2) & ~v6;
  v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 32);
  v8((v6 + 24 + a1) & ~v6, v7, AssociatedTypeWitness);
  v9 = *(_QWORD *)(v5 + 64);
  v10 = (v9 + v6 + ((v6 + 24 + a1) & ~v6)) & ~v6;
  v11 = (v9 + v6 + v7) & ~v6;
  v8(v10, v11, AssociatedTypeWitness);
  v12 = (v9 + v6 + v10) & ~v6;
  v13 = (v9 + v6 + v11) & ~v6;
  v8(v12, v13, AssociatedTypeWitness);
  v14 = (v9 + v6 + v12) & ~v6;
  v15 = (v9 + v6 + v13) & ~v6;
  v8(v14, v15, AssociatedTypeWitness);
  *(_QWORD *)((v9 + 7 + v14) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((v9 + 7 + v15) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t assignWithTake for AnimationPath.SpringElement(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = *(unsigned __int8 *)(v5 + 80);
  v7 = (v6 + 24 + a2) & ~v6;
  v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 40);
  v8((v6 + 24 + a1) & ~v6, v7, AssociatedTypeWitness);
  v9 = *(_QWORD *)(v5 + 64);
  v10 = (v9 + v6 + ((v6 + 24 + a1) & ~v6)) & ~v6;
  v11 = (v9 + v6 + v7) & ~v6;
  v8(v10, v11, AssociatedTypeWitness);
  v12 = (v9 + v6 + v10) & ~v6;
  v13 = (v9 + v6 + v11) & ~v6;
  v8(v12, v13, AssociatedTypeWitness);
  v14 = (v9 + v6 + v12) & ~v6;
  v15 = (v9 + v6 + v13) & ~v6;
  v8(v14, v15, AssociatedTypeWitness);
  *(_QWORD *)((v9 + 7 + v14) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((v9 + 7 + v15) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t getEnumTagSinglePayload for AnimationPath.SpringElement(uint64_t a1, unsigned int a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  if (!a2)
    return 0;
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = *(unsigned int *)(v5 + 84);
  v7 = *(unsigned __int8 *)(v5 + 80);
  if (v6 < a2)
  {
    if (((((*(_QWORD *)(v5 + 64)
           + ((*(_QWORD *)(v5 + 64)
             + v7
             + ((*(_QWORD *)(v5 + 64) + v7 + ((*(_QWORD *)(v5 + 64) + v7 + ((v7 + 24) & ~v7)) & ~v7)) & ~v7)) & ~v7)
           + 7) & 0xFFFFFFFFFFFFFFF8)
         + 8) & 0xFFFFFFF8) != 0)
      v8 = 2;
    else
      v8 = a2 - v6 + 1;
    if (v8 >= 0x10000)
      v9 = 4;
    else
      v9 = 2;
    if (v8 < 0x100)
      v9 = 1;
    if (v8 >= 2)
      v10 = v9;
    else
      v10 = 0;
    __asm { BR              X14 }
  }
  if ((_DWORD)v6)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))((a1 + v7 + 24) & ~v7, v6, AssociatedTypeWitness);
  else
    return 0;
}

void storeEnumTagSinglePayload for AnimationPath.SpringElement(unsigned int *a1, unsigned int a2, unsigned int a3)
{
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  int v10;
  int v11;
  unsigned int v12;

  v6 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = *(unsigned __int8 *)(v6 + 80);
  if (v7 >= a3)
  {
    v11 = 0;
    if (a2 <= v7)
      goto LABEL_14;
  }
  else
  {
    if (((*(_DWORD *)(v6 + 64)
         + ((*(_DWORD *)(v6 + 64)
           + (_DWORD)v8
           + ((*(_DWORD *)(v6 + 64)
             + (_DWORD)v8
             + ((*(_DWORD *)(v6 + 64) + (_DWORD)v8 + (((_DWORD)v8 + 24) & ~(_DWORD)v8)) & ~(_DWORD)v8)) & ~(_DWORD)v8)) & ~(_DWORD)v8)
         + 7) & 0xFFFFFFF8) == 0xFFFFFFF8)
      v9 = a3 - v7 + 1;
    else
      v9 = 2;
    if (v9 >= 0x10000)
      v10 = 4;
    else
      v10 = 2;
    if (v9 < 0x100)
      v10 = 1;
    if (v9 >= 2)
      v11 = v10;
    else
      v11 = 0;
    if (a2 <= v7)
LABEL_14:
      __asm { BR              X13 }
  }
  if (((*(_DWORD *)(v6 + 64)
       + ((*(_DWORD *)(v6 + 64)
         + (_DWORD)v8
         + ((*(_DWORD *)(v6 + 64)
           + (_DWORD)v8
           + ((*(_DWORD *)(v6 + 64) + (_DWORD)v8 + (((_DWORD)v8 + 24) & ~(_DWORD)v8)) & ~(_DWORD)v8)) & ~(_DWORD)v8)) & ~(_DWORD)v8)
       + 7) & 0xFFFFFFF8) != 0xFFFFFFF8)
  {
    v12 = ~v7 + a2;
    bzero(a1, ((*(_QWORD *)(v6 + 64)+ ((*(_QWORD *)(v6 + 64)+ v8+ ((*(_QWORD *)(v6 + 64) + v8 + ((*(_QWORD *)(v6 + 64) + v8 + ((v8 + 24) & ~v8)) & ~v8)) & ~v8)) & ~v8)+ 7) & 0xFFFFFFFFFFFFFFF8)+ 8);
    *a1 = v12;
  }
  __asm { BR              X10 }
}

void sub_2350C0C64()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
}

void sub_2350C0C6C()
{
  uint64_t v0;
  int v1;
  uint64_t v2;

  *(_DWORD *)(v0 + v2) = 0;
  if (v1)
    JUMPOUT(0x2350C0C74);
}

void sub_2350C0C9C()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
}

void sub_2350C0CA4()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
}

uint64_t sub_2350C0CAC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_WORD *)(v4 + v6) = 0;
  if (!(_DWORD)v5)
    JUMPOUT(0x2350C0CB4);
  return (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 56))((v4 + v2 + 24) & v3, v5);
}

uint64_t type metadata completion function for AnimationPath.Element(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v4 = *(_QWORD *)(a1 + 16);
  v5 = *(_QWORD *)(a1 + 24);
  result = type metadata accessor for AnimationPath.CurveElement(319, v4, v5, a4);
  if (v8 <= 0x3F)
  {
    result = type metadata accessor for AnimationPath.SpringElement(319, v4, v5, v7);
    if (v9 <= 0x3F)
    {
      result = swift_getAssociatedTypeWitness();
      if (v10 <= 0x3F)
      {
        swift_initEnumMetadataMultiPayload();
        return 0;
      }
    }
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for AnimationPath.Element(uint64_t a1, uint64_t *a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  unint64_t v6;
  int v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  BOOL v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(uint64_t, uint64_t, uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  char v31;
  void (*v32)(uint64_t, uint64_t *, uint64_t);
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  __int128 v38;
  __int128 v39;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = *(_DWORD *)(v5 + 80);
  v8 = v7;
  v9 = v6 + v7;
  v10 = ((v6 + v8 + ((v6 + v8 + ((v6 + v8) & ~v8)) & ~v8)) & ~v8) + v6;
  v11 = ((v10 + 23) & 0xFFFFFFFFFFFFFFF8) + 33;
  v12 = v6 + 7;
  if (((v6 + 7 + ((v6 + v8 + ((v6 + v8 + ((v6 + v8 + ((v8 + 24) & ~v8)) & ~v8)) & ~v8)) & ~v8)) & 0xFFFFFFFFFFFFFFF8)
     + 8 > v11)
    v11 = ((v6
          + 7
          + ((v6
            + v7
            + ((v6
              + v7
              + ((v6 + v7 + ((v7 + 24) & ~(unint64_t)v7)) & ~(unint64_t)v7)) & ~(unint64_t)v7)) & ~(unint64_t)v7)) & 0xFFFFFFFFFFFFFFF8)
        + 8;
  if (v6 <= v11)
    v13 = v11;
  else
    v13 = *(_QWORD *)(v5 + 64);
  v14 = v7 <= 7u && (v7 & 0x100000) == 0;
  if (v14 && v13 + 1 <= 0x18)
  {
    v15 = AssociatedTypeWitness;
    v16 = *((unsigned __int8 *)a2 + v13);
    if (v16 >= 3)
    {
      if (v13 <= 3)
        v17 = v13;
      else
        v17 = 4;
      __asm { BR              X14 }
    }
    if (v16 == 2)
    {
      (*(void (**)(uint64_t, uint64_t *, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
      v31 = 2;
      goto LABEL_23;
    }
    v19 = ~v8;
    if (v16 == 1)
    {
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_QWORD *)(a1 + 16) = a2[2];
      v20 = a1 + v8;
      v21 = (uint64_t)a2 + v8;
      v22 = (v20 + 24) & v19;
      v23 = (v21 + 24) & v19;
      v24 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
      v24(v22, v23, AssociatedTypeWitness);
      v25 = (v9 + v22) & v19;
      v26 = (v9 + v23) & v19;
      v24(v25, v26, v15);
      v27 = (v9 + v25) & v19;
      v28 = (v9 + v26) & v19;
      v24(v27, v28, v15);
      v29 = (v9 + v27) & v19;
      v30 = (v9 + v28) & v19;
      v24(v29, v30, v15);
      *(_QWORD *)((v12 + v29) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((v12 + v30) & 0xFFFFFFFFFFFFF8);
      v31 = 1;
LABEL_23:
      *(_BYTE *)(a1 + v13) = v31;
      return a1;
    }
    v32 = *(void (**)(uint64_t, uint64_t *, uint64_t))(v5 + 16);
    v32(a1, a2, AssociatedTypeWitness);
    v32((v9 + a1) & v19, (uint64_t *)(((unint64_t)a2 + v9) & v19), v15);
    v33 = (v9 + (((unint64_t)a2 + v9) & v19)) & v19;
    v32((v9 + ((v9 + a1) & v19)) & v19, (uint64_t *)v33, v15);
    v32((v9 + ((v9 + ((v9 + a1) & v19)) & v19)) & v19, (uint64_t *)((v9 + v33) & v19), v15);
    v34 = (v10 + a1 + 7) & 0xFFFFFFFFFFFFFFF8;
    v35 = ((unint64_t)a2 + v10 + 7) & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)v34 = *(_QWORD *)v35;
    *(_BYTE *)(v34 + 8) = *(_BYTE *)(v35 + 8);
    v36 = (v10 + a1 + 23) & 0xFFFFFFFFFFFFFFF8;
    v37 = ((unint64_t)a2 + v10 + 23) & 0xFFFFFFFFFFFFFFF8;
    v39 = *(_OWORD *)v37;
    v38 = *(_OWORD *)(v37 + 16);
    *(_BYTE *)(v36 + 32) = *(_BYTE *)(v37 + 32);
    *(_OWORD *)v36 = v39;
    *(_OWORD *)(v36 + 16) = v38;
    *(_BYTE *)(a1 + v13) = 0;
  }
  else
  {
    v18 = *a2;
    *(_QWORD *)a1 = *a2;
    a1 = v18 + ((v7 & 0xF8 ^ 0x1F8u) & (v7 + 16));
    swift_retain();
  }
  return a1;
}

uint64_t destroy for AnimationPath.Element(uint64_t a1)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(uint64_t, uint64_t);
  void (*v17)(uint64_t, uint64_t);

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v3 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v4 = *(_QWORD *)(v3 + 64);
  v5 = *(unsigned __int8 *)(v3 + 80);
  v6 = v4 + v5;
  v7 = ((v4 + ((v4 + v5 + ((v4 + v5 + ((v4 + v5) & ~v5)) & ~v5)) & ~v5) + 23) & 0xFFFFFFFFFFFFFFF8) + 33;
  if (((v4 + ((v4 + v5 + ((v4 + v5 + ((v4 + v5 + ((v5 + 24) & ~v5)) & ~v5)) & ~v5)) & ~v5) + 7) & 0xFFFFFFFFFFFFFFF8)
     + 8 > v7)
    v7 = ((v4 + ((v4 + v5 + ((v4 + v5 + ((v4 + v5 + ((v5 + 24) & ~v5)) & ~v5)) & ~v5)) & ~v5) + 7) & 0xFFFFFFFFFFFFFFF8)
       + 8;
  if (v4 <= v7)
    v4 = v7;
  v8 = *(unsigned __int8 *)(a1 + v4);
  if (v8 >= 3)
  {
    if (v4 <= 3)
      v9 = v4;
    else
      v9 = 4;
    __asm { BR              X15 }
  }
  if (v8 == 2)
  {
    v15 = *(uint64_t (**)(uint64_t, uint64_t))(v3 + 8);
    v13 = a1;
    v14 = AssociatedTypeWitness;
  }
  else
  {
    v10 = ~v5;
    if (v8 == 1)
      a1 = (a1 + v5 + 24) & v10;
    v17 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
    v17(a1, AssociatedTypeWitness);
    v11 = (v6 + a1) & v10;
    v17(v11, AssociatedTypeWitness);
    v12 = (v6 + v11) & v10;
    v17(v12, AssociatedTypeWitness);
    v13 = (v6 + v12) & v10;
    v14 = AssociatedTypeWitness;
    v15 = (uint64_t (*)(uint64_t, uint64_t))v17;
  }
  return v15(v13, v14);
}

uint64_t initializeWithCopy for AnimationPath.Element(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(uint64_t, uint64_t, uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  void (*v28)(uint64_t, uint64_t, uint64_t);
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  __int128 v34;
  __int128 v35;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = *(unsigned __int8 *)(v5 + 80);
  v8 = v6 + v7;
  v9 = ((v6 + v7 + ((v6 + v7 + ((v6 + v7) & ~v7)) & ~v7)) & ~v7) + v6;
  v10 = ((v9 + 23) & 0xFFFFFFFFFFFFFFF8) + 33;
  v11 = v6 + 7;
  if (((v6 + 7 + ((v6 + v7 + ((v6 + v7 + ((v6 + v7 + ((v7 + 24) & ~v7)) & ~v7)) & ~v7)) & ~v7)) & 0xFFFFFFFFFFFFFFF8)
     + 8 > v10)
    v10 = ((v6 + 7 + ((v6 + v7 + ((v6 + v7 + ((v6 + v7 + ((v7 + 24) & ~v7)) & ~v7)) & ~v7)) & ~v7)) & 0xFFFFFFFFFFFFFFF8)
        + 8;
  if (v6 <= v10)
    v12 = v10;
  else
    v12 = *(_QWORD *)(v5 + 64);
  v13 = *(unsigned __int8 *)(a2 + v12);
  if (v13 >= 3)
  {
    if (v12 <= 3)
      v14 = v12;
    else
      v14 = 4;
    __asm { BR              X14 }
  }
  if (v13 == 2)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
    v27 = 2;
  }
  else
  {
    v15 = ~v7;
    if (v13 == 1)
    {
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
      v16 = a1 + v7;
      v17 = a2 + v7;
      v18 = (v16 + 24) & v15;
      v19 = (v17 + 24) & v15;
      v20 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
      v20(v18, v19, AssociatedTypeWitness);
      v21 = (v8 + v18) & v15;
      v22 = (v8 + v19) & v15;
      v20(v21, v22, AssociatedTypeWitness);
      v23 = (v8 + v21) & v15;
      v24 = (v8 + v22) & v15;
      v20(v23, v24, AssociatedTypeWitness);
      v25 = (v8 + v23) & v15;
      v26 = (v8 + v24) & v15;
      v20(v25, v26, AssociatedTypeWitness);
      *(_QWORD *)((v11 + v25) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((v11 + v26) & 0xFFFFFFFFFFFFF8);
      v27 = 1;
    }
    else
    {
      v28 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
      v28(a1, a2, AssociatedTypeWitness);
      v28((v8 + a1) & v15, (v8 + a2) & v15, AssociatedTypeWitness);
      v29 = (v8 + ((v8 + a2) & v15)) & v15;
      v28((v8 + ((v8 + a1) & v15)) & v15, v29, AssociatedTypeWitness);
      v28((v8 + ((v8 + ((v8 + a1) & v15)) & v15)) & v15, (v8 + v29) & v15, AssociatedTypeWitness);
      v27 = 0;
      v30 = (v9 + a1 + 7) & 0xFFFFFFFFFFFFFFF8;
      v31 = (v9 + a2 + 7) & 0xFFFFFFFFFFFFFFF8;
      *(_QWORD *)v30 = *(_QWORD *)v31;
      *(_BYTE *)(v30 + 8) = *(_BYTE *)(v31 + 8);
      v32 = (v9 + a1 + 23) & 0xFFFFFFFFFFFFFFF8;
      v33 = (v9 + a2 + 23) & 0xFFFFFFFFFFFFFFF8;
      v35 = *(_OWORD *)v33;
      v34 = *(_OWORD *)(v33 + 16);
      *(_BYTE *)(v32 + 32) = *(_BYTE *)(v33 + 32);
      *(_OWORD *)v32 = v35;
      *(_OWORD *)(v32 + 16) = v34;
    }
  }
  *(_BYTE *)(a1 + v12) = v27;
  return a1;
}

uint64_t assignWithCopy for AnimationPath.Element(uint64_t a1, __int128 *a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  __int128 v20;
  void (*v21)(uint64_t, unint64_t, uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  void (*v26)(uint64_t, __int128 *, uint64_t);
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  __int128 v32;
  __int128 v33;
  unint64_t v35;
  unint64_t v36;

  if ((__int128 *)a1 != a2)
  {
    AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
    v6 = *(_QWORD *)(v5 + 64);
    v7 = *(unsigned __int8 *)(v5 + 80);
    v8 = v6 + v7;
    v9 = ((((v6 + v7 + ((v6 + v7 + ((v6 + v7) & ~v7)) & ~v7)) & ~v7) + v6 + 23) & 0xFFFFFFFFFFFFFFF8) + 33;
    if (((v6 + 7 + ((v6 + v7 + ((v6 + v7 + ((v6 + v7 + ((v7 + 24) & ~v7)) & ~v7)) & ~v7)) & ~v7)) & 0xFFFFFFFFFFFFFFF8)
       + 8 > v9)
      v9 = ((v6 + 7 + ((v6 + v7 + ((v6 + v7 + ((v6 + v7 + ((v7 + 24) & ~v7)) & ~v7)) & ~v7)) & ~v7)) & 0xFFFFFFFFFFFFFFF8)
         + 8;
    if (v6 <= v9)
      v10 = v9;
    else
      v10 = *(_QWORD *)(v5 + 64);
    v11 = *(unsigned __int8 *)(a1 + v10);
    if (v11 >= 3)
    {
      if (v10 <= 3)
        v12 = v10;
      else
        v12 = 4;
      __asm { BR              X12 }
    }
    v13 = ~v7;
    v35 = v6 + 7;
    v36 = ((v6 + v7 + ((v6 + v7 + ((v6 + v7) & ~v7)) & ~v7)) & ~v7) + v6;
    if (v11 == 2)
    {
      (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a1, AssociatedTypeWitness);
    }
    else
    {
      v14 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
      if (v11 == 1)
      {
        v14((a1 + v7 + 24) & v13, AssociatedTypeWitness);
        v15 = v8 + ((a1 + v7 + 24) & v13);
      }
      else
      {
        v14(a1, AssociatedTypeWitness);
        v15 = v8 + a1;
      }
      v16 = v15 & v13;
      v14(v15 & v13, AssociatedTypeWitness);
      v17 = (v8 + v16) & v13;
      v14(v17, AssociatedTypeWitness);
      v14((v8 + v17) & v13, AssociatedTypeWitness);
    }
    v18 = *((unsigned __int8 *)a2 + v10);
    if (v18 >= 3)
    {
      if (v10 <= 3)
        v19 = v10;
      else
        v19 = 4;
      __asm { BR              X12 }
    }
    if (v18 == 2)
    {
      (*(void (**)(uint64_t, __int128 *, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
      v25 = 2;
    }
    else if (v18 == 1)
    {
      v20 = *a2;
      *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
      *(_OWORD *)a1 = v20;
      v21 = *(void (**)(uint64_t, unint64_t, uint64_t))(v5 + 16);
      v21((a1 + v7 + 24) & v13, ((unint64_t)a2 + v7 + 24) & v13, AssociatedTypeWitness);
      v22 = (v8 + (((unint64_t)a2 + v7 + 24) & v13)) & v13;
      v21((v8 + ((a1 + v7 + 24) & v13)) & v13, v22, AssociatedTypeWitness);
      v23 = (v8 + v22) & v13;
      v21((v8 + ((v8 + ((a1 + v7 + 24) & v13)) & v13)) & v13, v23, AssociatedTypeWitness);
      v24 = (v8 + v23) & v13;
      v21((v8 + ((v8 + ((v8 + ((a1 + v7 + 24) & v13)) & v13)) & v13)) & v13, v24, AssociatedTypeWitness);
      *(_QWORD *)((v35 + ((v8 + ((v8 + ((v8 + ((a1 + v7 + 24) & v13)) & v13)) & v13)) & v13)) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((v35 + v24) & 0xFFFFFFFFFFFFF8);
      v25 = 1;
    }
    else
    {
      v26 = *(void (**)(uint64_t, __int128 *, uint64_t))(v5 + 16);
      v26(a1, a2, AssociatedTypeWitness);
      v26((v8 + a1) & v13, (__int128 *)(((unint64_t)a2 + v8) & v13), AssociatedTypeWitness);
      v27 = (v8 + (((unint64_t)a2 + v8) & v13)) & v13;
      v26((v8 + ((v8 + a1) & v13)) & v13, (__int128 *)v27, AssociatedTypeWitness);
      v26((v8 + ((v8 + ((v8 + a1) & v13)) & v13)) & v13, (__int128 *)((v8 + v27) & v13), AssociatedTypeWitness);
      v25 = 0;
      v28 = (v36 + a1 + 7) & 0xFFFFFFFFFFFFFFF8;
      v29 = ((unint64_t)a2 + v36 + 7) & 0xFFFFFFFFFFFFFFF8;
      *(_QWORD *)v28 = *(_QWORD *)v29;
      *(_BYTE *)(v28 + 8) = *(_BYTE *)(v29 + 8);
      v30 = (v36 + a1 + 23) & 0xFFFFFFFFFFFFFFF8;
      v31 = ((unint64_t)a2 + v36 + 23) & 0xFFFFFFFFFFFFFFF8;
      v33 = *(_OWORD *)v31;
      v32 = *(_OWORD *)(v31 + 16);
      *(_BYTE *)(v30 + 32) = *(_BYTE *)(v31 + 32);
      *(_OWORD *)v30 = v33;
      *(_OWORD *)(v30 + 16) = v32;
    }
    *(_BYTE *)(a1 + v10) = v25;
  }
  return a1;
}

uint64_t initializeWithTake for AnimationPath.Element(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(uint64_t, uint64_t, uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  void (*v28)(uint64_t, uint64_t, uint64_t);
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  __int128 v34;
  __int128 v35;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = *(unsigned __int8 *)(v5 + 80);
  v8 = v6 + v7;
  v9 = ((v6 + v7 + ((v6 + v7 + ((v6 + v7) & ~v7)) & ~v7)) & ~v7) + v6;
  v10 = ((v9 + 23) & 0xFFFFFFFFFFFFFFF8) + 33;
  v11 = v6 + 7;
  if (((v6 + 7 + ((v6 + v7 + ((v6 + v7 + ((v6 + v7 + ((v7 + 24) & ~v7)) & ~v7)) & ~v7)) & ~v7)) & 0xFFFFFFFFFFFFFFF8)
     + 8 > v10)
    v10 = ((v6 + 7 + ((v6 + v7 + ((v6 + v7 + ((v6 + v7 + ((v7 + 24) & ~v7)) & ~v7)) & ~v7)) & ~v7)) & 0xFFFFFFFFFFFFFFF8)
        + 8;
  if (v6 <= v10)
    v12 = v10;
  else
    v12 = *(_QWORD *)(v5 + 64);
  v13 = *(unsigned __int8 *)(a2 + v12);
  if (v13 >= 3)
  {
    if (v12 <= 3)
      v14 = v12;
    else
      v14 = 4;
    __asm { BR              X14 }
  }
  if (v13 == 2)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 32))(a1, a2, AssociatedTypeWitness);
    v27 = 2;
  }
  else
  {
    v15 = ~v7;
    if (v13 == 1)
    {
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
      v16 = a1 + v7;
      v17 = a2 + v7;
      v18 = (v16 + 24) & v15;
      v19 = (v17 + 24) & v15;
      v20 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 32);
      v20(v18, v19, AssociatedTypeWitness);
      v21 = (v8 + v18) & v15;
      v22 = (v8 + v19) & v15;
      v20(v21, v22, AssociatedTypeWitness);
      v23 = (v8 + v21) & v15;
      v24 = (v8 + v22) & v15;
      v20(v23, v24, AssociatedTypeWitness);
      v25 = (v8 + v23) & v15;
      v26 = (v8 + v24) & v15;
      v20(v25, v26, AssociatedTypeWitness);
      *(_QWORD *)((v11 + v25) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((v11 + v26) & 0xFFFFFFFFFFFFF8);
      v27 = 1;
    }
    else
    {
      v28 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 32);
      v28(a1, a2, AssociatedTypeWitness);
      v28((v8 + a1) & v15, (v8 + a2) & v15, AssociatedTypeWitness);
      v29 = (v8 + ((v8 + a2) & v15)) & v15;
      v28((v8 + ((v8 + a1) & v15)) & v15, v29, AssociatedTypeWitness);
      v28((v8 + ((v8 + ((v8 + a1) & v15)) & v15)) & v15, (v8 + v29) & v15, AssociatedTypeWitness);
      v27 = 0;
      v30 = (v9 + a1 + 7) & 0xFFFFFFFFFFFFFFF8;
      v31 = (v9 + a2 + 7) & 0xFFFFFFFFFFFFFFF8;
      *(_QWORD *)v30 = *(_QWORD *)v31;
      *(_BYTE *)(v30 + 8) = *(_BYTE *)(v31 + 8);
      v32 = (v9 + a1 + 23) & 0xFFFFFFFFFFFFFFF8;
      v33 = (v9 + a2 + 23) & 0xFFFFFFFFFFFFFFF8;
      v35 = *(_OWORD *)v33;
      v34 = *(_OWORD *)(v33 + 16);
      *(_BYTE *)(v32 + 32) = *(_BYTE *)(v33 + 32);
      *(_OWORD *)v32 = v35;
      *(_OWORD *)(v32 + 16) = v34;
    }
  }
  *(_BYTE *)(a1 + v12) = v27;
  return a1;
}

uint64_t assignWithTake for AnimationPath.Element(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  void (*v20)(uint64_t, uint64_t, uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  void (*v25)(uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  __int128 v31;
  __int128 v32;
  unint64_t v34;
  unint64_t v35;

  if (a1 != a2)
  {
    AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
    v6 = *(_QWORD *)(v5 + 64);
    v7 = *(unsigned __int8 *)(v5 + 80);
    v8 = v6 + v7;
    v9 = ((((v6 + v7 + ((v6 + v7 + ((v6 + v7) & ~v7)) & ~v7)) & ~v7) + v6 + 23) & 0xFFFFFFFFFFFFFFF8) + 33;
    if (((v6 + 7 + ((v6 + v7 + ((v6 + v7 + ((v6 + v7 + ((v7 + 24) & ~v7)) & ~v7)) & ~v7)) & ~v7)) & 0xFFFFFFFFFFFFFFF8)
       + 8 > v9)
      v9 = ((v6 + 7 + ((v6 + v7 + ((v6 + v7 + ((v6 + v7 + ((v7 + 24) & ~v7)) & ~v7)) & ~v7)) & ~v7)) & 0xFFFFFFFFFFFFFFF8)
         + 8;
    if (v6 <= v9)
      v10 = v9;
    else
      v10 = *(_QWORD *)(v5 + 64);
    v11 = *(unsigned __int8 *)(a1 + v10);
    if (v11 >= 3)
    {
      if (v10 <= 3)
        v12 = v10;
      else
        v12 = 4;
      __asm { BR              X12 }
    }
    v13 = ~v7;
    v34 = v6 + 7;
    v35 = ((v6 + v7 + ((v6 + v7 + ((v6 + v7) & ~v7)) & ~v7)) & ~v7) + v6;
    if (v11 == 2)
    {
      (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a1, AssociatedTypeWitness);
    }
    else
    {
      v14 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
      if (v11 == 1)
      {
        v14((a1 + v7 + 24) & v13, AssociatedTypeWitness);
        v15 = v8 + ((a1 + v7 + 24) & v13);
      }
      else
      {
        v14(a1, AssociatedTypeWitness);
        v15 = v8 + a1;
      }
      v16 = v15 & v13;
      v14(v15 & v13, AssociatedTypeWitness);
      v17 = (v8 + v16) & v13;
      v14(v17, AssociatedTypeWitness);
      v14((v8 + v17) & v13, AssociatedTypeWitness);
    }
    v18 = *(unsigned __int8 *)(a2 + v10);
    if (v18 >= 3)
    {
      if (v10 <= 3)
        v19 = v10;
      else
        v19 = 4;
      __asm { BR              X12 }
    }
    if (v18 == 2)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 32))(a1, a2, AssociatedTypeWitness);
      v24 = 2;
    }
    else if (v18 == 1)
    {
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
      v20 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 32);
      v20((a1 + v7 + 24) & v13, (a2 + v7 + 24) & v13, AssociatedTypeWitness);
      v21 = (v8 + ((a2 + v7 + 24) & v13)) & v13;
      v20((v8 + ((a1 + v7 + 24) & v13)) & v13, v21, AssociatedTypeWitness);
      v22 = (v8 + v21) & v13;
      v20((v8 + ((v8 + ((a1 + v7 + 24) & v13)) & v13)) & v13, v22, AssociatedTypeWitness);
      v23 = (v8 + v22) & v13;
      v20((v8 + ((v8 + ((v8 + ((a1 + v7 + 24) & v13)) & v13)) & v13)) & v13, v23, AssociatedTypeWitness);
      *(_QWORD *)((v34 + ((v8 + ((v8 + ((v8 + ((a1 + v7 + 24) & v13)) & v13)) & v13)) & v13)) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((v34 + v23) & 0xFFFFFFFFFFFFF8);
      v24 = 1;
    }
    else
    {
      v25 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 32);
      v25(a1, a2, AssociatedTypeWitness);
      v25((v8 + a1) & v13, (v8 + a2) & v13, AssociatedTypeWitness);
      v26 = (v8 + ((v8 + a2) & v13)) & v13;
      v25((v8 + ((v8 + a1) & v13)) & v13, v26, AssociatedTypeWitness);
      v25((v8 + ((v8 + ((v8 + a1) & v13)) & v13)) & v13, (v8 + v26) & v13, AssociatedTypeWitness);
      v24 = 0;
      v27 = (v35 + a1 + 7) & 0xFFFFFFFFFFFFFFF8;
      v28 = (v35 + a2 + 7) & 0xFFFFFFFFFFFFFFF8;
      *(_QWORD *)v27 = *(_QWORD *)v28;
      *(_BYTE *)(v27 + 8) = *(_BYTE *)(v28 + 8);
      v29 = (v35 + a1 + 23) & 0xFFFFFFFFFFFFFFF8;
      v30 = (v35 + a2 + 23) & 0xFFFFFFFFFFFFFFF8;
      v32 = *(_OWORD *)v30;
      v31 = *(_OWORD *)(v30 + 16);
      *(_BYTE *)(v29 + 32) = *(_BYTE *)(v30 + 32);
      *(_OWORD *)v29 = v32;
      *(_OWORD *)(v29 + 16) = v31;
    }
    *(_BYTE *)(a1 + v10) = v24;
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for AnimationPath.Element(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char v10;
  int v11;
  unsigned int v13;
  int v14;
  unsigned int v15;

  v4 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v5 = *(_QWORD *)(v4 + 64);
  v6 = *(unsigned __int8 *)(v4 + 80);
  v7 = ((v5 + ((v5 + v6 + ((v5 + v6 + ((v5 + v6) & ~v6)) & ~v6)) & ~v6) + 23) & 0xFFFFFFFFFFFFFFF8) + 33;
  v8 = ((v5 + ((v5 + v6 + ((v5 + v6 + ((v5 + v6 + ((v6 + 24) & ~v6)) & ~v6)) & ~v6)) & ~v6) + 7) & 0xFFFFFFFFFFFFFFF8)
     + 8;
  if (v8 <= v7)
    v8 = v7;
  if (v5 <= v8)
    v5 = v8;
  if (!a2)
    return 0;
  if (a2 < 0xFE)
    goto LABEL_23;
  v9 = v5 + 1;
  v10 = 8 * (v5 + 1);
  if ((v5 + 1) <= 3)
  {
    v13 = ((a2 + ~(-1 << v10) - 253) >> v10) + 1;
    if (HIWORD(v13))
    {
      v11 = *(_DWORD *)(a1 + v9);
      if (!v11)
        goto LABEL_23;
      goto LABEL_16;
    }
    if (v13 > 0xFF)
    {
      v11 = *(unsigned __int16 *)(a1 + v9);
      if (!*(_WORD *)(a1 + v9))
        goto LABEL_23;
      goto LABEL_16;
    }
    if (v13 < 2)
    {
LABEL_23:
      v15 = *(unsigned __int8 *)(a1 + v5);
      if (v15 >= 3)
        return (v15 ^ 0xFF) + 1;
      else
        return 0;
    }
  }
  v11 = *(unsigned __int8 *)(a1 + v9);
  if (!*(_BYTE *)(a1 + v9))
    goto LABEL_23;
LABEL_16:
  v14 = (v11 - 1) << v10;
  if (v9 > 3)
    v14 = 0;
  if ((_DWORD)v9)
  {
    if (v9 > 3)
      LODWORD(v9) = 4;
    __asm { BR              X11 }
  }
  return (v14 + 254);
}

void storeEnumTagSinglePayload for AnimationPath.Element(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  size_t v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  int v15;

  v6 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v7 = *(_QWORD *)(v6 + 64);
  v8 = *(unsigned __int8 *)(v6 + 80);
  v9 = ((v7 + ((v7 + v8 + ((v7 + v8 + ((v7 + v8) & ~v8)) & ~v8)) & ~v8) + 23) & 0xFFFFFFFFFFFFFFF8) + 33;
  v10 = ((v7 + ((v7 + v8 + ((v7 + v8 + ((v7 + v8 + ((v8 + 24) & ~v8)) & ~v8)) & ~v8)) & ~v8) + 7) & 0xFFFFFFFFFFFFFFF8)
      + 8;
  if (v10 <= v9)
    v10 = v9;
  if (v7 > v10)
    v10 = v7;
  v11 = v10 + 1;
  if (a3 < 0xFE)
  {
    v12 = 0;
  }
  else if (v11 <= 3)
  {
    v14 = ((a3 + ~(-1 << (8 * v11)) - 253) >> (8 * v11)) + 1;
    if (HIWORD(v14))
    {
      v12 = 4u;
    }
    else if (v14 >= 0x100)
    {
      v12 = 2;
    }
    else
    {
      v12 = v14 > 1;
    }
  }
  else
  {
    v12 = 1u;
  }
  if (a2 <= 0xFD)
    __asm { BR              X11 }
  v13 = a2 - 254;
  if (v11 < 4)
  {
    if ((_DWORD)v10 != -1)
    {
      v15 = v13 & ~(-1 << (8 * v11));
      bzero(a1, v11);
      if ((_DWORD)v11 == 3)
      {
        *(_WORD *)a1 = v15;
        a1[2] = BYTE2(v15);
      }
      else if ((_DWORD)v11 == 2)
      {
        *(_WORD *)a1 = v15;
      }
      else
      {
        *a1 = v15;
      }
    }
  }
  else
  {
    bzero(a1, v10 + 1);
    *(_DWORD *)a1 = v13;
  }
  __asm { BR              X10 }
}

uint64_t getEnumTag for AnimationPath.Element(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;
  uint64_t v8;

  v2 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v3 = *(_QWORD *)(v2 + 64);
  v4 = *(unsigned __int8 *)(v2 + 80);
  v5 = ((v3 + ((v3 + v4 + ((v3 + v4 + ((v3 + v4) & ~v4)) & ~v4)) & ~v4) + 23) & 0xFFFFFFFFFFFFFFF8) + 33;
  v6 = ((v3 + ((v3 + v4 + ((v3 + v4 + ((v3 + v4 + ((v4 + 24) & ~v4)) & ~v4)) & ~v4)) & ~v4) + 7) & 0xFFFFFFFFFFFFFFF8)
     + 8;
  if (v6 <= v5)
    v6 = v5;
  if (v3 > v6)
    v6 = v3;
  result = *(unsigned __int8 *)(a1 + v6);
  if (result >= 3)
  {
    if (v6 <= 3)
      v8 = v6;
    else
      v8 = 4;
    __asm { BR              X12 }
  }
  return result;
}

void destructiveInjectEnumTag for AnimationPath.Element(_BYTE *a1, unsigned int a2)
{
  uint64_t v4;
  size_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  size_t v11;
  unsigned int v12;
  unsigned int v13;
  int v14;

  v4 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v5 = *(_QWORD *)(v4 + 64);
  v6 = *(unsigned __int8 *)(v4 + 80);
  if (a2 > 2)
  {
    v9 = ((v5 + ((v5 + v6 + ((v5 + v6 + ((v5 + v6) & ~v6)) & ~v6)) & ~v6) + 23) & 0xFFFFFFFFFFFFFFF8) + 33;
    v10 = ((v5 + ((v5 + v6 + ((v5 + v6 + ((v5 + v6 + ((v6 + 24) & ~v6)) & ~v6)) & ~v6)) & ~v6) + 7) & 0xFFFFFFFFFFFFFFF8)
        + 8;
    if (v10 <= v9)
      v10 = v9;
    if (v5 <= v10)
      v11 = v10;
    else
      v11 = v5;
    v12 = a2 - 3;
    if (v11 < 4)
    {
      v13 = v12 >> (8 * v11);
      v14 = v12 & ~(-1 << (8 * v11));
      a1[v11] = v13 + 3;
      bzero(a1, v11);
      if ((_DWORD)v11 == 3)
      {
        *(_WORD *)a1 = v14;
        a1[2] = BYTE2(v14);
      }
      else if ((_DWORD)v11 == 2)
      {
        *(_WORD *)a1 = v14;
      }
      else
      {
        *a1 = v14;
      }
    }
    else
    {
      a1[v11] = 3;
      bzero(a1, v11);
      *(_DWORD *)a1 = v12;
    }
  }
  else
  {
    v7 = ((v5 + ((v5 + v6 + ((v5 + v6 + ((v5 + v6 + ((v6 + 24) & ~v6)) & ~v6)) & ~v6)) & ~v6) + 7) & 0xFFFFFFFFFFFFFFF8)
       + 8;
    v8 = ((v5 + ((v5 + v6 + ((v5 + v6 + ((v5 + v6) & ~v6)) & ~v6)) & ~v6) + 23) & 0xFFFFFFFFFFFFFFF8) + 33;
    if (v7 > v8)
      v8 = v7;
    if (v5 <= v8)
      v5 = v8;
    a1[v5] = a2;
  }
}

uint64_t EnvironmentValues.paragraphTypesetting.getter@<X0>(char *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;

  v3 = *v1;
  if (v1[1])
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v3, a1);
    swift_release_n();
  }
  else
  {
    v4 = swift_retain_n();
    specialized closure #1 in PropertyList.subscript.getter(v4, a1);
  }
  return swift_release_n();
}

void static ParagraphTypesetting.automatic.getter(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

void static ParagraphTypesetting.balanced.getter(_BYTE *a1@<X8>)
{
  *a1 = 1;
}

BOOL static ParagraphTypesetting.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

uint64_t EnvironmentValues.paragraphTypesetting.setter(char *a1)
{
  uint64_t *v1;
  char v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *a1;
  v3 = *v1;
  swift_retain_n();
  specialized closure #1 in PropertyList.subscript.setter(v1, v2);
  swift_release();
  if (v1[1])
  {
    v4 = *v1;
    swift_retain();
    swift_retain();
    specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v3, v4);
    swift_release();
    swift_release();
  }
  return swift_release();
}

uint64_t View.paragraphTypesetting(_:isEnabled:)(char *a1, char a2, uint64_t a3, uint64_t a4)
{
  char v7;
  uint64_t *KeyPath;
  uint64_t v9;

  v7 = *a1;
  KeyPath = (uint64_t *)swift_getKeyPath();
  v9 = swift_allocObject();
  *(_BYTE *)(v9 + 16) = a2;
  *(_BYTE *)(v9 + 17) = v7;
  View.transformEnvironment<A>(_:transform:)(KeyPath, (uint64_t)partial apply for closure #1 in View.textScale(_:isEnabled:), v9, a3, a4);
  swift_release();
  return swift_release();
}

uint64_t key path getter for EnvironmentValues.paragraphTypesetting : EnvironmentValues@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  char v6;

  v3 = *a1;
  if (a1[1])
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v3, &v6);
    swift_release_n();
  }
  else
  {
    v4 = swift_retain_n();
    specialized closure #1 in PropertyList.subscript.getter(v4, &v6);
  }
  result = swift_release_n();
  *a2 = v6;
  return result;
}

uint64_t sub_2350C2AB0(char *a1)
{
  char v2;

  v2 = *a1;
  return EnvironmentValues.paragraphTypesetting.setter(&v2);
}

uint64_t sub_2350C2AE4()
{
  return swift_deallocObject();
}

ValueMetadata *type metadata accessor for ParagraphTypesetting()
{
  return &type metadata for ParagraphTypesetting;
}

uint64_t sub_2350C2B08(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[2];

  v4 = *a1;
  v5 = a1[1];
  type metadata accessor for _EnvironmentKeyTransformModifier<ParagraphTypesetting>(255, a2, a3, a4);
  v8 = type metadata accessor for ModifiedContent(255, v4, v6, v7);
  v10[0] = v5;
  v10[1] = &protocol witness table for _EnvironmentKeyTransformModifier<A>;
  return MEMORY[0x23B7C9C04]("I{:\x1B̧\t", v8, v10);
}

void type metadata accessor for _EnvironmentKeyTransformModifier<ParagraphTypesetting>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  uint64_t v5;

  if (!lazy cache variable for type metadata for _EnvironmentKeyTransformModifier<ParagraphTypesetting>)
  {
    v4 = type metadata accessor for _EnvironmentKeyTransformModifier(0, (uint64_t)&type metadata for ParagraphTypesetting, a3, a4);
    if (!v5)
      atomic_store(v4, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyTransformModifier<ParagraphTypesetting>);
  }
}

uint64_t storeEnumTagSinglePayload for ParagraphTypesetting(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_2350C2C04 + 4 * byte_2352C6555[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_2350C2C38 + 4 * byte_2352C6550[v4]))();
}

uint64_t sub_2350C2C38(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_2350C2C40(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x2350C2C48);
  return result;
}

uint64_t sub_2350C2C54(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x2350C2C5CLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_2350C2C60(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_2350C2C68(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ParagraphTypesetting.Storage()
{
  return &type metadata for ParagraphTypesetting.Storage;
}

ValueMetadata *type metadata accessor for ParagraphTypesettingKey()
{
  return &type metadata for ParagraphTypesettingKey;
}

unint64_t lazy protocol witness table accessor for type ParagraphTypesetting.Storage and conformance ParagraphTypesetting.Storage()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ParagraphTypesetting.Storage and conformance ParagraphTypesetting.Storage;
  if (!lazy protocol witness table cache variable for type ParagraphTypesetting.Storage and conformance ParagraphTypesetting.Storage)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ParagraphTypesetting.Storage, &type metadata for ParagraphTypesetting.Storage);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParagraphTypesetting.Storage and conformance ParagraphTypesetting.Storage);
  }
  return result;
}

uint64_t ResolvableProgress.interval.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of TypesettingLanguage(v1, a1, (uint64_t (*)(_QWORD))type metadata accessor for ClosedRange<Date>);
}

uint64_t ResolvableProgress.interval.setter(uint64_t a1)
{
  uint64_t v1;

  return outlined assign with take of ClosedRange<Date>(a1, v1);
}

uint64_t outlined assign with take of ClosedRange<Date>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for ClosedRange<Date>();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t (*ResolvableProgress.interval.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t ResolvableProgress.countdown.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for ResolvableProgress() + 20));
}

uint64_t type metadata accessor for ResolvableProgress()
{
  uint64_t result;

  result = type metadata singleton initialization cache for ResolvableProgress;
  if (!type metadata singleton initialization cache for ResolvableProgress)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t ResolvableProgress.countdown.setter(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for ResolvableProgress();
  *(_BYTE *)(v1 + *(int *)(result + 20)) = a1;
  return result;
}

uint64_t (*ResolvableProgress.countdown.modify())(_QWORD, _QWORD)
{
  type metadata accessor for ResolvableProgress();
  return _ViewInputs.base.modify;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance ResolvableProgress.CodingKeys()
{
  _BYTE *v0;

  if (*v0)
    return 0x776F64746E756F63;
  else
    return 0x6C61767265746E69;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance ResolvableProgress.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = specialized ResolvableProgress.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ResolvableProgress.CodingKeys()
{
  lazy protocol witness table accessor for type ResolvableProgress.CodingKeys and conformance ResolvableProgress.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ResolvableProgress.CodingKeys()
{
  lazy protocol witness table accessor for type ResolvableProgress.CodingKeys and conformance ResolvableProgress.CodingKeys();
  return CodingKey.debugDescription.getter();
}

id static ResolvableProgress.attribute.getter()
{
  if (one-time initialization token for attribute != -1)
    swift_once();
  swift_beginAccess();
  return (id)static ResolvableProgress.attribute;
}

void static ResolvableProgress.attribute.setter(uint64_t a1)
{
  void *v2;

  if (one-time initialization token for attribute != -1)
    swift_once();
  swift_beginAccess();
  v2 = (void *)static ResolvableProgress.attribute;
  static ResolvableProgress.attribute = a1;

}

uint64_t (*static ResolvableProgress.attribute.modify())()
{
  if (one-time initialization token for attribute != -1)
    swift_once();
  swift_beginAccess();
  return DisplayList.GraphicsRenderer.platformViewMode.modify;
}

uint64_t ResolvableProgress.resolve(in:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(char *, uint64_t);
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v34 = a1;
  v1 = MEMORY[0x24BEE13C8];
  type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for FloatingPointFormatStyle<Double>.Attributed, (uint64_t (*)(void))lazy protocol witness table accessor for type Double and conformance Double, MEMORY[0x24BEE13C8], MEMORY[0x24BDCD3F8]);
  v3 = *(_QWORD *)(v2 - 8);
  v32 = v2;
  v33 = v3;
  MEMORY[0x24BDAC7A8](v2);
  v31 = (char *)&v29 - v4;
  v30 = type metadata accessor for FloatingPointRoundingRule();
  v5 = *(_QWORD *)(v30 - 8);
  MEMORY[0x24BDAC7A8](v30);
  v7 = (char *)&v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for Locale();
  MEMORY[0x24BDAC7A8](v8);
  type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for FloatingPointFormatStyle<Double>.Percent, (uint64_t (*)(void))lazy protocol witness table accessor for type Double and conformance Double, v1, MEMORY[0x24BDCD460]);
  v10 = v9;
  v29 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v29 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v13);
  v15 = (char *)&v29 - v14;
  v16 = type metadata accessor for Date();
  v17 = *(_QWORD *)(v16 - 8);
  MEMORY[0x24BDAC7A8](v16);
  v19 = (char *)&v29 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  ResolvableStringResolutionContext.date.getter((uint64_t)v19);
  type metadata accessor for ResolvableProgress();
  ClosedRange<>.progress(at:countdown:)();
  v21 = v20;
  (*(void (**)(char *, uint64_t))(v17 + 8))(v19, v16);
  v35 = v21;
  static Locale.autoupdatingCurrent.getter();
  lazy protocol witness table accessor for type Double and conformance Double();
  FloatingPointFormatStyle.Percent.init(locale:)();
  v22 = v30;
  (*(void (**)(char *, _QWORD, uint64_t))(v5 + 104))(v7, *MEMORY[0x24BEE38D0], v30);
  MEMORY[0x23B7C4798](v7, 0x3FF0000000000000, 0, v10);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v22);
  v23 = *(void (**)(char *, uint64_t))(v29 + 8);
  v23(v12, v10);
  v24 = v31;
  FloatingPointFormatStyle.Percent.attributed.getter();
  v23(v15, v10);
  lazy protocol witness table accessor for type FloatingPointFormatStyle<Double>.Attributed and conformance FloatingPointFormatStyle<A>.Attributed();
  v25 = v34;
  v26 = v32;
  BinaryFloatingPoint.formatted<A>(_:)();
  (*(void (**)(char *, uint64_t))(v33 + 8))(v24, v26);
  v27 = type metadata accessor for AttributedString();
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 56))(v25, 0, 1, v27);
}

unint64_t lazy protocol witness table accessor for type FloatingPointFormatStyle<Double>.Attributed and conformance FloatingPointFormatStyle<A>.Attributed()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type FloatingPointFormatStyle<Double>.Attributed and conformance FloatingPointFormatStyle<A>.Attributed;
  if (!lazy protocol witness table cache variable for type FloatingPointFormatStyle<Double>.Attributed and conformance FloatingPointFormatStyle<A>.Attributed)
  {
    type metadata accessor for FontBox<Font.SystemProvider>(255, &lazy cache variable for type metadata for FloatingPointFormatStyle<Double>.Attributed, (uint64_t (*)(void))lazy protocol witness table accessor for type Double and conformance Double, MEMORY[0x24BEE13C8], MEMORY[0x24BDCD3F8]);
    result = MEMORY[0x23B7C9C04](MEMORY[0x24BDCD400], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FloatingPointFormatStyle<Double>.Attributed and conformance FloatingPointFormatStyle<A>.Attributed);
  }
  return result;
}

uint64_t ResolvableProgress.invalidationConfiguration.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(char *, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v15;

  v3 = type metadata accessor for Date();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v15 - v8;
  type metadata accessor for (interval: DateInterval, countdown: Bool)();
  v11 = *(int *)(v10 + 48);
  v12 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 16);
  v12(v9, v1, v3);
  type metadata accessor for ClosedRange<Date>();
  v12(v6, v1 + *(int *)(v13 + 36), v3);
  DateInterval.init(start:end:)();
  *(_BYTE *)(a1 + v11) = *(_BYTE *)(v1 + *(int *)(type metadata accessor for ResolvableProgress() + 20));
  type metadata accessor for ResolvableAttributeConfiguration(0);
  return swift_storeEnumTagMultiPayload();
}

uint64_t ResolvableProgress.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v9;
  char v10;
  char v11;

  type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for KeyedEncodingContainer<ResolvableProgress.CodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type ResolvableProgress.CodingKeys and conformance ResolvableProgress.CodingKeys, (uint64_t)&unk_250629DA8, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE3520]);
  v4 = v3;
  v5 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v7 = (char *)&v9 - v6;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type ResolvableProgress.CodingKeys and conformance ResolvableProgress.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v11 = 0;
  type metadata accessor for ClosedRange<Date>();
  lazy protocol witness table accessor for type ClosedRange<Date> and conformance <> ClosedRange<A>(&lazy protocol witness table cache variable for type ClosedRange<Date> and conformance <> ClosedRange<A>, &lazy protocol witness table cache variable for type Date and conformance Date, MEMORY[0x24BDCE920], MEMORY[0x24BEE08E0]);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v1)
  {
    type metadata accessor for ResolvableProgress();
    v10 = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

unint64_t lazy protocol witness table accessor for type ResolvableProgress.CodingKeys and conformance ResolvableProgress.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ResolvableProgress.CodingKeys and conformance ResolvableProgress.CodingKeys;
  if (!lazy protocol witness table cache variable for type ResolvableProgress.CodingKeys and conformance ResolvableProgress.CodingKeys)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ResolvableProgress.CodingKeys, &unk_250629DA8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ResolvableProgress.CodingKeys and conformance ResolvableProgress.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ResolvableProgress.CodingKeys and conformance ResolvableProgress.CodingKeys;
  if (!lazy protocol witness table cache variable for type ResolvableProgress.CodingKeys and conformance ResolvableProgress.CodingKeys)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ResolvableProgress.CodingKeys, &unk_250629DA8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ResolvableProgress.CodingKeys and conformance ResolvableProgress.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ResolvableProgress.CodingKeys and conformance ResolvableProgress.CodingKeys;
  if (!lazy protocol witness table cache variable for type ResolvableProgress.CodingKeys and conformance ResolvableProgress.CodingKeys)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ResolvableProgress.CodingKeys, &unk_250629DA8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ResolvableProgress.CodingKeys and conformance ResolvableProgress.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ResolvableProgress.CodingKeys and conformance ResolvableProgress.CodingKeys;
  if (!lazy protocol witness table cache variable for type ResolvableProgress.CodingKeys and conformance ResolvableProgress.CodingKeys)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ResolvableProgress.CodingKeys, &unk_250629DA8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ResolvableProgress.CodingKeys and conformance ResolvableProgress.CodingKeys);
  }
  return result;
}

uint64_t ResolvableProgress.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  char v25;

  v19 = a2;
  type metadata accessor for ClosedRange<Date>();
  v20 = v3;
  MEMORY[0x24BDAC7A8](v3);
  v21 = (char *)&v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for KeyedDecodingContainer<ResolvableProgress.CodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type ResolvableProgress.CodingKeys and conformance ResolvableProgress.CodingKeys, (uint64_t)&unk_250629DA8, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE33E0]);
  v22 = v5;
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v18 - v7;
  v9 = type metadata accessor for ResolvableProgress();
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type ResolvableProgress.CodingKeys and conformance ResolvableProgress.CodingKeys();
  v12 = v23;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v12)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  v13 = v6;
  v25 = 0;
  lazy protocol witness table accessor for type ClosedRange<Date> and conformance <> ClosedRange<A>(&lazy protocol witness table cache variable for type ClosedRange<Date> and conformance <> ClosedRange<A>, &lazy protocol witness table cache variable for type Date and conformance Date, MEMORY[0x24BDCE960], MEMORY[0x24BEE0900]);
  v14 = (uint64_t)v21;
  v15 = v22;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  outlined init with take of ClosedRange<Date>(v14, (uint64_t)v11);
  v24 = 1;
  v16 = KeyedDecodingContainer.decode(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v13 + 8))(v8, v15);
  v11[*(int *)(v9 + 20)] = v16 & 1;
  outlined init with copy of TypesettingLanguage((uint64_t)v11, v19, (uint64_t (*)(_QWORD))type metadata accessor for ResolvableProgress);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  return outlined destroy of TypesettingConfiguration((uint64_t)v11, (uint64_t (*)(_QWORD))type metadata accessor for ResolvableProgress);
}

uint64_t lazy protocol witness table accessor for type ClosedRange<Date> and conformance <> ClosedRange<A>(unint64_t *a1, unint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  result = *a1;
  if (!result)
  {
    type metadata accessor for ClosedRange<Date>();
    v10 = v9;
    v11 = lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(a2, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], a3);
    result = MEMORY[0x23B7C9C04](a4, v10, &v11);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t outlined init with take of ClosedRange<Date>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for ClosedRange<Date>();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t protocol witness for ConfigurationBasedResolvableStringAttributeRepresentation.invalidationConfiguration.getter in conformance ResolvableProgress@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(char *, uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v17;

  v5 = type metadata accessor for Date();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v17 - v10;
  type metadata accessor for (interval: DateInterval, countdown: Bool)();
  v13 = *(int *)(v12 + 48);
  v14 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 16);
  v14(v11, v2, v5);
  type metadata accessor for ClosedRange<Date>();
  v14(v8, v2 + *(int *)(v15 + 36), v5);
  DateInterval.init(start:end:)();
  *(_BYTE *)(a2 + v13) = *(_BYTE *)(v2 + *(int *)(a1 + 20));
  type metadata accessor for ResolvableAttributeConfiguration(0);
  return swift_storeEnumTagMultiPayload();
}

id protocol witness for static ResolvableStringAttributeFamily.attribute.getter in conformance ResolvableProgress()
{
  if (one-time initialization token for attribute != -1)
    swift_once();
  swift_beginAccess();
  return (id)static ResolvableProgress.attribute;
}

uint64_t protocol witness for Decodable.init(from:) in conformance ResolvableProgress@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return ResolvableProgress.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance ResolvableProgress(_QWORD *a1)
{
  return ResolvableProgress.encode(to:)(a1);
}

uint64_t ResolvableProgress.debugDescription.getter()
{
  uint64_t v0;
  Swift::String v1;
  Swift::String v2;
  Swift::String v3;
  Swift::String v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  Swift::String v10;

  _StringGuts.grow(_:)(55);
  v1._countAndFlagsBits = 0xD000000000000021;
  v1._object = (void *)0x80000002352E7100;
  String.append(_:)(v1);
  type metadata accessor for Date();
  _print_unlocked<A, B>(_:_:)();
  v2._countAndFlagsBits = 3026478;
  v2._object = (void *)0xE300000000000000;
  String.append(_:)(v2);
  type metadata accessor for ClosedRange<Date>();
  _print_unlocked<A, B>(_:_:)();
  v3._countAndFlagsBits = 0;
  v3._object = (void *)0xE000000000000000;
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  v4._object = (void *)0x80000002352E7130;
  v4._countAndFlagsBits = 0xD000000000000010;
  String.append(_:)(v4);
  v5 = type metadata accessor for ResolvableProgress();
  v6 = *(_BYTE *)(v0 + *(int *)(v5 + 20)) == 0;
  if (*(_BYTE *)(v0 + *(int *)(v5 + 20)))
    v7 = 1702195828;
  else
    v7 = 0x65736C6166;
  if (v6)
    v8 = 0xE500000000000000;
  else
    v8 = 0xE400000000000000;
  v9 = v8;
  String.append(_:)(*(Swift::String *)&v7);
  swift_bridgeObjectRelease();
  v10._countAndFlagsBits = 8745;
  v10._object = (void *)0xE200000000000000;
  String.append(_:)(v10);
  return 0;
}

uint64_t specialized static ResolvableProgress.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char v10;
  char v11;
  uint64_t v12;
  char v13;
  uint64_t v15;

  type metadata accessor for ClosedRange<Date>();
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v15 - v8;
  type metadata accessor for Date();
  lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type Date and conformance Date, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], MEMORY[0x24BDCE958]);
  v10 = dispatch thunk of static Equatable.== infix(_:_:)();
  outlined init with copy of TypesettingLanguage(a1, (uint64_t)v9, (uint64_t (*)(_QWORD))type metadata accessor for ClosedRange<Date>);
  outlined init with copy of TypesettingLanguage(a2, (uint64_t)v6, (uint64_t (*)(_QWORD))type metadata accessor for ClosedRange<Date>);
  if ((v10 & 1) == 0)
  {
    outlined destroy of TypesettingConfiguration((uint64_t)v6, (uint64_t (*)(_QWORD))type metadata accessor for ClosedRange<Date>);
    outlined destroy of TypesettingConfiguration((uint64_t)v9, (uint64_t (*)(_QWORD))type metadata accessor for ClosedRange<Date>);
    goto LABEL_5;
  }
  v11 = dispatch thunk of static Equatable.== infix(_:_:)();
  outlined destroy of TypesettingConfiguration((uint64_t)v6, (uint64_t (*)(_QWORD))type metadata accessor for ClosedRange<Date>);
  outlined destroy of TypesettingConfiguration((uint64_t)v9, (uint64_t (*)(_QWORD))type metadata accessor for ClosedRange<Date>);
  if ((v11 & 1) == 0)
  {
LABEL_5:
    v13 = 0;
    return v13 & 1;
  }
  v12 = type metadata accessor for ResolvableProgress();
  v13 = *(_BYTE *)(a1 + *(int *)(v12 + 20)) ^ *(_BYTE *)(a2 + *(int *)(v12 + 20)) ^ 1;
  return v13 & 1;
}

uint64_t instantiation function for generic protocol witness table for ResolvableProgress(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return instantiation function for generic protocol witness table for ResolvableProgress(a1, a2, a3, &lazy protocol witness table cache variable for type ResolvableProgress and conformance ResolvableProgress, (uint64_t)&protocol conformance descriptor for ResolvableProgress, &lazy protocol witness table cache variable for type ResolvableProgress and conformance ResolvableProgress, (uint64_t)&protocol conformance descriptor for ResolvableProgress);
}

{
  return instantiation function for generic protocol witness table for ResolvableProgress(a1, a2, a3, &lazy protocol witness table cache variable for type ResolvableProgress and conformance ResolvableProgress, (uint64_t)&protocol conformance descriptor for ResolvableProgress, &lazy protocol witness table cache variable for type ResolvableProgress and conformance ResolvableProgress, (uint64_t)&protocol conformance descriptor for ResolvableProgress);
}

uint64_t instantiation function for generic protocol witness table for ResolvableProgress(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t *a4, uint64_t a5, unint64_t *a6, uint64_t a7)
{
  uint64_t result;

  *(_QWORD *)(a1 + 8) = lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(a4, (uint64_t (*)(uint64_t))type metadata accessor for ResolvableProgress, a5);
  result = lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(a6, (uint64_t (*)(uint64_t))type metadata accessor for ResolvableProgress, a7);
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

uint64_t associated type witness table accessor for ResolvableStringAttribute.Schedule : TimelineSchedule in ResolvableProgress()
{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type ResolvableAttributeConfiguration.Schedule and conformance ResolvableAttributeConfiguration.Schedule, type metadata accessor for ResolvableAttributeConfiguration.Schedule, (uint64_t)&protocol conformance descriptor for ResolvableAttributeConfiguration.Schedule);
}

uint64_t instantiation function for generic protocol witness table for ResolvableProgress(uint64_t a1)
{
  uint64_t result;

  result = lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type ResolvableProgress and conformance ResolvableProgress, (uint64_t (*)(uint64_t))type metadata accessor for ResolvableProgress, (uint64_t)&protocol conformance descriptor for ResolvableProgress);
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

_UNKNOWN **associated type witness table accessor for ResolvableStringAttributeRepresentation.Family : ResolvableStringAttributeFamily in ResolvableProgress()
{
  return &protocol witness table for ResolvableProgress;
}

uint64_t associated type witness table accessor for TimelineSchedule.Entries : Sequence in ResolvableProgress()
{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID((unint64_t *)&lazy protocol witness table cache variable for type AnySequence<Date> and conformance AnySequence<A>, (uint64_t (*)(uint64_t))type metadata accessor for AnySequence<Date>, MEMORY[0x24BEE2440]);
}

void type metadata accessor for AnySequence<Date>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for AnySequence<Date>)
  {
    type metadata accessor for Date();
    v0 = type metadata accessor for AnySequence();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for AnySequence<Date>);
  }
}

_QWORD *initializeBufferWithCopyOfBuffer for ResolvableProgress(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  void (*v8)(_QWORD *, _QWORD *, uint64_t);
  uint64_t v9;
  uint64_t v10;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v10 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v10 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for Date();
    v8 = *(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    type metadata accessor for ClosedRange<Date>();
    v8((_QWORD *)((char *)a1 + *(int *)(v9 + 36)), (_QWORD *)((char *)a2 + *(int *)(v9 + 36)), v7);
    *((_BYTE *)a1 + *(int *)(a3 + 20)) = *((_BYTE *)a2 + *(int *)(a3 + 20));
  }
  return a1;
}

uint64_t destroy for ResolvableProgress(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void (*v5)(uint64_t, uint64_t);

  v2 = type metadata accessor for Date();
  v5 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8);
  v5(a1, v2);
  type metadata accessor for ClosedRange<Date>();
  return ((uint64_t (*)(uint64_t, uint64_t))v5)(a1 + *(int *)(v3 + 36), v2);
}

uint64_t initializeWithCopy for ResolvableProgress(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;

  v6 = type metadata accessor for Date();
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  type metadata accessor for ClosedRange<Date>();
  v7(a1 + *(int *)(v8 + 36), a2 + *(int *)(v8 + 36), v6);
  *(_BYTE *)(a1 + *(int *)(a3 + 20)) = *(_BYTE *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t assignWithCopy for ResolvableProgress(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;

  v6 = type metadata accessor for Date();
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24);
  v7(a1, a2, v6);
  type metadata accessor for ClosedRange<Date>();
  v7(a1 + *(int *)(v8 + 36), a2 + *(int *)(v8 + 36), v6);
  *(_BYTE *)(a1 + *(int *)(a3 + 20)) = *(_BYTE *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t initializeWithTake for ResolvableProgress(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;

  v6 = type metadata accessor for Date();
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  type metadata accessor for ClosedRange<Date>();
  v7(a1 + *(int *)(v8 + 36), a2 + *(int *)(v8 + 36), v6);
  *(_BYTE *)(a1 + *(int *)(a3 + 20)) = *(_BYTE *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t assignWithTake for ResolvableProgress(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;

  v6 = type metadata accessor for Date();
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40);
  v7(a1, a2, v6);
  type metadata accessor for ClosedRange<Date>();
  v7(a1 + *(int *)(v8 + 36), a2 + *(int *)(v8 + 36), v6);
  *(_BYTE *)(a1 + *(int *)(a3 + 20)) = *(_BYTE *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t getEnumTagSinglePayload for ResolvableProgress()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_2350C432C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int v9;

  type metadata accessor for ClosedRange<Date>();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 20));
  if (v9 >= 2)
    return ((v9 + 2147483646) & 0x7FFFFFFF) + 1;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for ResolvableProgress()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

void sub_2350C43C4(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;

  type metadata accessor for ClosedRange<Date>();
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, v8);
  else
    *(_BYTE *)(a1 + *(int *)(a4 + 20)) = a2 + 1;
}

void type metadata completion function for ResolvableProgress()
{
  unint64_t v0;

  type metadata accessor for ClosedRange<Date>();
  if (v0 <= 0x3F)
    swift_initStructMetadata();
}

uint64_t storeEnumTagSinglePayload for ResolvableProgress.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_2350C44F8 + 4 * byte_2352C6665[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_2350C452C + 4 * byte_2352C6660[v4]))();
}

uint64_t sub_2350C452C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_2350C4534(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x2350C453CLL);
  return result;
}

uint64_t sub_2350C4548(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x2350C4550);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_2350C4554(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_2350C455C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for ResolvableProgress.CodingKeys()
{
  return &unk_250629DA8;
}

uint64_t specialized ResolvableProgress.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x6C61767265746E69 && a2 == 0xE800000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x776F64746E756F63 && a2 == 0xE90000000000006ELL)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

ValueMetadata *type metadata accessor for Text.Effect.FragmentIdentifier()
{
  return &type metadata for Text.Effect.FragmentIdentifier;
}

ValueMetadata *type metadata accessor for Text.Effect.BaseFragmentIdentifierMap()
{
  return &type metadata for Text.Effect.BaseFragmentIdentifierMap;
}

uint64_t Text.Effect.RelativeIdentifierKey.identifierKey(base:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  char v8;

  v6 = *(_QWORD *)(result + 16);
  if (v6)
  {
    v7 = result;
    result = specialized __RawDictionaryStorage.find<A>(_:)(a3);
    if ((v8 & 1) != 0)
      v6 = *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * result);
    else
      v6 = 0;
  }
  if (!__OFADD__(v6, a4))
    return a3;
  __break(1u);
  return result;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance Text.Effect.BaseFragmentIdentifierMap(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1[1];
  v3 = a2[1];
  return specialized static Dictionary<>.== infix(_:_:)(*a1, *a2) & (v2 == v3);
}

unint64_t specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, _QWORD *a5)
{
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  unint64_t result;
  char v14;
  uint64_t v15;
  _BOOL8 v16;
  BOOL v17;
  uint64_t v18;
  char v19;
  char v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  _QWORD *v36;
  char v37;
  uint64_t v38;
  _BOOL8 v39;
  uint64_t v40;
  char v41;
  _QWORD *v42;

  swift_bridgeObjectRetain();
  swift_retain();
  v7 = specialized LazyMapSequence.Iterator.next()();
  if ((v9 & 1) != 0)
    goto LABEL_24;
  v10 = v7;
  v11 = v8;
  v12 = (_QWORD *)*a5;
  result = specialized __RawDictionaryStorage.find<A>(_:)(v7);
  v15 = v12[2];
  v16 = (v14 & 1) == 0;
  v17 = __OFADD__(v15, v16);
  v18 = v15 + v16;
  if (v17)
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  v19 = v14;
  if (v12[3] < v18)
  {
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v18, a4 & 1);
    result = specialized __RawDictionaryStorage.find<A>(_:)(v10);
    if ((v19 & 1) == (v20 & 1))
      goto LABEL_7;
LABEL_5:
    result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
  }
  if ((a4 & 1) != 0)
  {
LABEL_7:
    v21 = (_QWORD *)*a5;
    if ((v19 & 1) != 0)
      goto LABEL_8;
    goto LABEL_12;
  }
  v24 = result;
  specialized _NativeDictionary.copy()();
  result = v24;
  v21 = (_QWORD *)*a5;
  if ((v19 & 1) != 0)
  {
LABEL_8:
    v22 = (_QWORD *)(v21[7] + 8 * result);
    v23 = *v22 + v11;
    if (__OFADD__(*v22, v11))
    {
LABEL_23:
      __break(1u);
      goto LABEL_24;
    }
LABEL_13:
    *v22 = v23;
    v27 = specialized LazyMapSequence.Iterator.next()();
    if ((v29 & 1) == 0)
    {
      v10 = v27;
      v11 = v28;
      v19 = 1;
      do
      {
        v36 = (_QWORD *)*a5;
        result = specialized __RawDictionaryStorage.find<A>(_:)(v10);
        v38 = v36[2];
        v39 = (v37 & 1) == 0;
        v17 = __OFADD__(v38, v39);
        v40 = v38 + v39;
        if (v17)
          goto LABEL_25;
        a4 = v37;
        if (v36[3] < v40)
        {
          specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v40, 1);
          result = specialized __RawDictionaryStorage.find<A>(_:)(v10);
          if ((a4 & 1) != (v41 & 1))
            goto LABEL_5;
        }
        v42 = (_QWORD *)*a5;
        if ((a4 & 1) != 0)
        {
          v31 = (_QWORD *)(v42[7] + 8 * result);
          v33 = *v31 + v11;
          if (__OFADD__(*v31, v11))
            goto LABEL_23;
        }
        else
        {
          v42[(result >> 6) + 8] |= 1 << result;
          v30 = 8 * result;
          *(_QWORD *)(v42[6] + v30) = v10;
          *(_QWORD *)(v42[7] + v30) = v11;
          v32 = v42[2];
          v31 = v42 + 2;
          v33 = v32 + 1;
          if (__OFADD__(v32, 1))
            goto LABEL_26;
        }
        *v31 = v33;
        v10 = specialized LazyMapSequence.Iterator.next()();
        v11 = v34;
      }
      while ((v35 & 1) == 0);
    }
LABEL_24:
    swift_release();
    swift_bridgeObjectRelease();
    outlined consume of Set<EventID>.Iterator._Variant();
    return swift_release();
  }
LABEL_12:
  v21[(result >> 6) + 8] |= 1 << result;
  v25 = 8 * result;
  *(_QWORD *)(v21[6] + v25) = v10;
  *(_QWORD *)(v21[7] + v25) = v11;
  v26 = v21[2];
  v22 = v21 + 2;
  v23 = v26 + 1;
  if (!__OFADD__(v26, 1))
    goto LABEL_13;
LABEL_26:
  __break(1u);
  return result;
}

uint64_t specialized Text.Effect.BaseFragmentIdentifierMap.updateKeyframes(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  char isUniquelyReferenced_nonNull_native;
  uint64_t result;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;

  swift_bridgeObjectRetain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v10 = *v2;
  *v2 = 0x8000000000000000;
  specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(a1, (uint64_t)protocol witness for static CodableByProxy.unwrap(codingProxy:) in conformance UnitPoint, 0, isUniquelyReferenced_nonNull_native, &v10);
  *v2 = v10;
  result = swift_bridgeObjectRelease();
  v7 = v2[1];
  v8 = __OFADD__(v7, a2);
  v9 = v7 + a2;
  if (v8)
    __break(1u);
  else
    v2[1] = v9;
  return result;
}

ValueMetadata *type metadata accessor for Text.Effect.RelativeFragmentIdentifier()
{
  return &type metadata for Text.Effect.RelativeFragmentIdentifier;
}

unint64_t lazy protocol witness table accessor for type Text.Effect.RelativeFragmentIdentifier and conformance Text.Effect.RelativeFragmentIdentifier()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Text.Effect.RelativeFragmentIdentifier and conformance Text.Effect.RelativeFragmentIdentifier;
  if (!lazy protocol witness table cache variable for type Text.Effect.RelativeFragmentIdentifier and conformance Text.Effect.RelativeFragmentIdentifier)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Text.Effect.RelativeFragmentIdentifier, &type metadata for Text.Effect.RelativeFragmentIdentifier);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.Effect.RelativeFragmentIdentifier and conformance Text.Effect.RelativeFragmentIdentifier);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Text.Effect.RelativeFragmentIdentifier and conformance Text.Effect.RelativeFragmentIdentifier;
  if (!lazy protocol witness table cache variable for type Text.Effect.RelativeFragmentIdentifier and conformance Text.Effect.RelativeFragmentIdentifier)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Text.Effect.RelativeFragmentIdentifier, &type metadata for Text.Effect.RelativeFragmentIdentifier);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.Effect.RelativeFragmentIdentifier and conformance Text.Effect.RelativeFragmentIdentifier);
  }
  return result;
}

uint64_t ResolvableDateInterval.init(_:in:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v6 = type metadata accessor for TimeZone();
  v30 = *(_QWORD *)(v6 - 8);
  v31 = v6;
  MEMORY[0x24BDAC7A8](v6);
  v29 = (uint64_t)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for Locale();
  v25 = *(_QWORD *)(v8 - 8);
  v26 = v8;
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for Calendar();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v11);
  v14 = (char *)&v24 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = *a2;
  v15 = a2[1];
  v17 = type metadata accessor for DateInterval();
  v27 = *(_QWORD *)(v17 - 8);
  v28 = a1;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v27 + 16))(a3, a1, v17);
  if (v15)
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v16, (uint64_t)v14);
  }
  else
  {
    v18 = swift_retain_n();
    specialized closure #1 in PropertyList.subscript.getter(v18, (uint64_t)v14);
  }
  swift_release_n();
  swift_release_n();
  v19 = (int *)type metadata accessor for ResolvableDateInterval();
  (*(void (**)(uint64_t, char *, uint64_t))(v12 + 32))(a3 + v19[5], v14, v11);
  if (v15)
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v16, (uint64_t)v10);
    swift_release_n();
    swift_release_n();
    (*(void (**)(uint64_t, char *, uint64_t))(v25 + 32))(a3 + v19[6], v10, v26);
    swift_retain_n();
    swift_retain_n();
    v20 = v29;
    specialized PropertyList.Tracker.value<A>(_:for:)(v16, v29);
    swift_release_n();
  }
  else
  {
    v21 = swift_retain_n();
    specialized closure #1 in PropertyList.subscript.getter(v21, (uint64_t)v10);
    swift_release_n();
    (*(void (**)(uint64_t, char *, uint64_t))(v25 + 32))(a3 + v19[6], v10, v26);
    v22 = swift_retain_n();
    v20 = v29;
    specialized closure #1 in PropertyList.subscript.getter(v22, v29);
    swift_release();
  }
  swift_release_n();
  (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v28, v17);
  swift_release();
  swift_release();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v30 + 32))(a3 + v19[7], v20, v31);
}

uint64_t ResolvableDateInterval.interval.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for DateInterval();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v1, v3);
}

uint64_t ResolvableDateInterval.interval.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for DateInterval();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 40))(v1, a1, v3);
}

uint64_t (*ResolvableDateInterval.interval.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t ResolvableDateInterval.calendar.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for ResolvableDateInterval() + 20);
  v4 = type metadata accessor for Calendar();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t ResolvableDateInterval.locale.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for ResolvableDateInterval() + 24);
  v4 = type metadata accessor for Locale();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t ResolvableDateInterval.timeZone.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for ResolvableDateInterval() + 28);
  v4 = type metadata accessor for TimeZone();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance ResolvableDateInterval.CodingKeys()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_2350C50AC + 4 * byte_2352C6BA0[*v0]))(0x6C61767265746E69, 0xE800000000000000);
}

uint64_t sub_2350C50AC()
{
  return 0x7261646E656C6163;
}

uint64_t sub_2350C50C0()
{
  return 0x656C61636F6CLL;
}

uint64_t sub_2350C50D4()
{
  return 0x656E6F5A656D6974;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance ResolvableDateInterval.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = specialized ResolvableDateInterval.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ResolvableDateInterval.CodingKeys()
{
  lazy protocol witness table accessor for type ResolvableDateInterval.CodingKeys and conformance ResolvableDateInterval.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ResolvableDateInterval.CodingKeys()
{
  lazy protocol witness table accessor for type ResolvableDateInterval.CodingKeys and conformance ResolvableDateInterval.CodingKeys();
  return CodingKey.debugDescription.getter();
}

id static ResolvableDateInterval.attribute.getter()
{
  if (one-time initialization token for attribute != -1)
    swift_once();
  return (id)static ResolvableDateInterval.attribute;
}

uint64_t ResolvableDateInterval.resolve(in:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  id v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;
  _QWORD v31[2];
  uint64_t v32;
  uint64_t v33;

  v33 = a1;
  v2 = type metadata accessor for AttributeContainer();
  MEMORY[0x24BDAC7A8](v2);
  v31[1] = (char *)v31 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for TimeZone?, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)v31 - v5;
  v32 = type metadata accessor for Locale();
  v7 = *(_QWORD *)(v32 - 8);
  MEMORY[0x24BDAC7A8](v32);
  v9 = (char *)v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for Calendar();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)v31 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for Date();
  MEMORY[0x24BDAC7A8](v14);
  v16 = (char *)v31 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v17);
  v19 = (char *)v31 - v18;
  DateInterval.start.getter();
  DateInterval.end.getter();
  v20 = (int *)type metadata accessor for ResolvableDateInterval();
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, v1 + v20[5], v10);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, v1 + v20[6], v32);
  v21 = v1 + v20[7];
  v22 = type metadata accessor for TimeZone();
  v23 = *(_QWORD *)(v22 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v23 + 16))(v6, v21, v22);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v23 + 56))(v6, 0, 1, v22);
  v24 = objc_allocWithZone((Class)TimeIntervalProvider);
  v25 = @nonobjc TimeIntervalProvider.init(start:end:calendar:locale:timeZone:)((uint64_t)v19, (uint64_t)v16, (uint64_t)v13, (uint64_t)v9, (uint64_t)v6);
  v26 = objc_msgSend(v25, sel_formattedString);

  if (v26)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();

    swift_bridgeObjectRetain();
    AttributeContainer.init()();
    v27 = v33;
    AttributedString.init(_:attributes:)();
    v28 = type metadata accessor for AttributedString();
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 56))(v27, 0, 1, v28);
    return swift_bridgeObjectRelease();
  }
  else
  {
    v30 = type metadata accessor for AttributedString();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 56))(v33, 1, 1, v30);
  }
}

void ResolvableDateInterval.schedule.getter(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t ResolvableDateInterval.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  _BYTE v9[16];

  type metadata accessor for KeyedEncodingContainer<ResolvableDateInterval.CodingKeys>(0, &lazy cache variable for type metadata for KeyedEncodingContainer<ResolvableDateInterval.CodingKeys>, (uint64_t (*)(uint64_t, void *, unint64_t))MEMORY[0x24BEE3520]);
  v4 = v3;
  v5 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v7 = &v9[-v6];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type ResolvableDateInterval.CodingKeys and conformance ResolvableDateInterval.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v9[15] = 0;
  type metadata accessor for DateInterval();
  lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type DateInterval and conformance DateInterval, (uint64_t (*)(uint64_t))MEMORY[0x24BDCB878], MEMORY[0x24BDCB888]);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v1)
  {
    type metadata accessor for ResolvableDateInterval();
    v9[14] = 1;
    type metadata accessor for Calendar();
    lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type Calendar and conformance Calendar, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF2D8], MEMORY[0x24BDCF2F8]);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    v9[13] = 2;
    type metadata accessor for Locale();
    lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type Locale and conformance Locale, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEEA8], MEMORY[0x24BDCEEC8]);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    v9[12] = 3;
    type metadata accessor for TimeZone();
    lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type TimeZone and conformance TimeZone, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], MEMORY[0x24BDCF528]);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t ResolvableDateInterval.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  _QWORD *v47;
  char v48;
  char v49;
  char v50;
  char v51;

  v34 = a2;
  v36 = type metadata accessor for TimeZone();
  v33 = *(_QWORD *)(v36 - 8);
  MEMORY[0x24BDAC7A8](v36);
  v35 = (char *)&v30 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v42 = type metadata accessor for Locale();
  v38 = *(_QWORD *)(v42 - 8);
  MEMORY[0x24BDAC7A8](v42);
  v37 = (char *)&v30 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for Calendar();
  v40 = *(_QWORD *)(v5 - 8);
  v41 = v5;
  MEMORY[0x24BDAC7A8](v5);
  v39 = (char *)&v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v44 = type metadata accessor for DateInterval();
  v7 = *(_QWORD *)(v44 - 8);
  MEMORY[0x24BDAC7A8](v44);
  v45 = (char *)&v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for KeyedEncodingContainer<ResolvableDateInterval.CodingKeys>(0, &lazy cache variable for type metadata for KeyedDecodingContainer<ResolvableDateInterval.CodingKeys>, (uint64_t (*)(uint64_t, void *, unint64_t))MEMORY[0x24BEE33E0]);
  v43 = v9;
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v30 - v11;
  v13 = type metadata accessor for ResolvableDateInterval();
  MEMORY[0x24BDAC7A8](v13);
  v15 = (char *)&v30 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type ResolvableDateInterval.CodingKeys and conformance ResolvableDateInterval.CodingKeys();
  v46 = v12;
  v16 = (uint64_t)v47;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v16)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  v31 = v7;
  v32 = v10;
  v30 = v13;
  v17 = v15;
  v19 = v39;
  v18 = v40;
  v47 = a1;
  v20 = v41;
  v21 = v42;
  v51 = 0;
  lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type DateInterval and conformance DateInterval, (uint64_t (*)(uint64_t))MEMORY[0x24BDCB878], MEMORY[0x24BDCB8A8]);
  v22 = v44;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(char *, char *, uint64_t))(v31 + 32))(v17, v45, v22);
  v50 = 1;
  lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type Calendar and conformance Calendar, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF2D8], MEMORY[0x24BDCF310]);
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  v23 = *(int *)(v30 + 20);
  v45 = v17;
  (*(void (**)(char *, char *, uint64_t))(v18 + 32))(&v17[v23], v19, v20);
  v49 = 2;
  lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type Locale and conformance Locale, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEEA8], MEMORY[0x24BDCEEE8]);
  v24 = v37;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  v25 = v30;
  (*(void (**)(char *, char *, uint64_t))(v38 + 32))(&v45[*(int *)(v30 + 24)], v24, v21);
  v48 = 3;
  lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type TimeZone and conformance TimeZone, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], MEMORY[0x24BDCF540]);
  v26 = v35;
  v27 = v36;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v32 + 8))(v46, v43);
  v28 = (uint64_t)v45;
  (*(void (**)(char *, char *, uint64_t))(v33 + 32))(&v45[*(int *)(v25 + 28)], v26, v27);
  outlined init with copy of ResolvableDateInterval(v28, v34);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v47);
  return outlined destroy of ResolvableDateInterval(v28);
}

id protocol witness for static ResolvableStringAttributeFamily.attribute.getter in conformance ResolvableDateInterval()
{
  if (one-time initialization token for attribute != -1)
    swift_once();
  return (id)static ResolvableDateInterval.attribute;
}

uint64_t protocol witness for Decodable.init(from:) in conformance ResolvableDateInterval@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return ResolvableDateInterval.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance ResolvableDateInterval(_QWORD *a1)
{
  return ResolvableDateInterval.encode(to:)(a1);
}

uint64_t static ResolvableDateInterval.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  if ((static DateInterval.== infix(_:_:)() & 1) != 0)
  {
    v4 = type metadata accessor for ResolvableDateInterval();
    if ((MEMORY[0x23B7C5374](a1 + *(int *)(v4 + 20), a2 + *(int *)(v4 + 20)) & 1) != 0
      && (MEMORY[0x23B7C526C](a1 + *(int *)(v4 + 24), a2 + *(int *)(v4 + 24)) & 1) != 0)
    {
      JUMPOUT(0x23B7C5488);
    }
  }
  return 0;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ResolvableDateInterval(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((static DateInterval.== infix(_:_:)() & 1) != 0
    && (MEMORY[0x23B7C5374](a1 + *(int *)(a3 + 20), a2 + *(int *)(a3 + 20)) & 1) != 0
    && (MEMORY[0x23B7C526C](a1 + *(int *)(a3 + 24), a2 + *(int *)(a3 + 24)) & 1) != 0)
  {
    JUMPOUT(0x23B7C5488);
  }
  return 0;
}

uint64_t type metadata accessor for ResolvableDateInterval()
{
  uint64_t result;

  result = type metadata singleton initialization cache for ResolvableDateInterval;
  if (!type metadata singleton initialization cache for ResolvableDateInterval)
    return swift_getSingletonMetadata();
  return result;
}

id @nonobjc TimeIntervalProvider.init(start:end:calendar:locale:timeZone:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  NSDate v9;
  NSDate v10;
  NSCalendar v11;
  NSLocale v12;
  uint64_t v13;
  uint64_t v14;
  Class isa;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(uint64_t, uint64_t);
  id v22;
  uint64_t v23;
  uint64_t v24;

  v9.super.isa = Date._bridgeToObjectiveC()().super.isa;
  v24 = a2;
  v10.super.isa = Date._bridgeToObjectiveC()().super.isa;
  v23 = a3;
  v11.super.isa = Calendar._bridgeToObjectiveC()().super.isa;
  v12.super.isa = Locale._bridgeToObjectiveC()().super.isa;
  v13 = type metadata accessor for TimeZone();
  v14 = *(_QWORD *)(v13 - 8);
  isa = 0;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v14 + 48))(a5, 1, v13) != 1)
  {
    isa = TimeZone._bridgeToObjectiveC()().super.isa;
    (*(void (**)(uint64_t, uint64_t))(v14 + 8))(a5, v13);
  }
  v16 = objc_msgSend(v22, sel_initWithStartDate_endDate_calendar_locale_timeZone_, v9.super.isa, v10.super.isa, v11.super.isa, v12.super.isa, isa);

  v17 = type metadata accessor for Locale();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 8))(a4, v17);
  v18 = type metadata accessor for Calendar();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 8))(v23, v18);
  v19 = type metadata accessor for Date();
  v20 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 8);
  v20(v24, v19);
  v20(a1, v19);
  return v16;
}

unint64_t lazy protocol witness table accessor for type ResolvableDateInterval.CodingKeys and conformance ResolvableDateInterval.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ResolvableDateInterval.CodingKeys and conformance ResolvableDateInterval.CodingKeys;
  if (!lazy protocol witness table cache variable for type ResolvableDateInterval.CodingKeys and conformance ResolvableDateInterval.CodingKeys)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ResolvableDateInterval.CodingKeys, &unk_250635330);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ResolvableDateInterval.CodingKeys and conformance ResolvableDateInterval.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ResolvableDateInterval.CodingKeys and conformance ResolvableDateInterval.CodingKeys;
  if (!lazy protocol witness table cache variable for type ResolvableDateInterval.CodingKeys and conformance ResolvableDateInterval.CodingKeys)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ResolvableDateInterval.CodingKeys, &unk_250635330);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ResolvableDateInterval.CodingKeys and conformance ResolvableDateInterval.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ResolvableDateInterval.CodingKeys and conformance ResolvableDateInterval.CodingKeys;
  if (!lazy protocol witness table cache variable for type ResolvableDateInterval.CodingKeys and conformance ResolvableDateInterval.CodingKeys)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ResolvableDateInterval.CodingKeys, &unk_250635330);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ResolvableDateInterval.CodingKeys and conformance ResolvableDateInterval.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ResolvableDateInterval.CodingKeys and conformance ResolvableDateInterval.CodingKeys;
  if (!lazy protocol witness table cache variable for type ResolvableDateInterval.CodingKeys and conformance ResolvableDateInterval.CodingKeys)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ResolvableDateInterval.CodingKeys, &unk_250635330);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ResolvableDateInterval.CodingKeys and conformance ResolvableDateInterval.CodingKeys);
  }
  return result;
}

void type metadata accessor for KeyedEncodingContainer<ResolvableDateInterval.CodingKeys>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, void *, unint64_t))
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    v6 = lazy protocol witness table accessor for type ResolvableDateInterval.CodingKeys and conformance ResolvableDateInterval.CodingKeys();
    v7 = a3(a1, &unk_250635330, v6);
    if (!v8)
      atomic_store(v7, a2);
  }
}

uint64_t outlined init with copy of ResolvableDateInterval(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ResolvableDateInterval();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of ResolvableDateInterval(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for ResolvableDateInterval();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t associated type witness table accessor for ResolvableStringAttribute.Schedule : TimelineSchedule in ResolvableDateInterval()
{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID((unint64_t *)&lazy protocol witness table cache variable for type ExplicitTimelineSchedule<[Date]> and conformance ExplicitTimelineSchedule<A>, (uint64_t (*)(uint64_t))type metadata accessor for ExplicitTimelineSchedule<[Date]>, (uint64_t)&protocol conformance descriptor for ExplicitTimelineSchedule<A>);
}

uint64_t instantiation function for generic protocol witness table for ResolvableDateInterval(uint64_t a1)
{
  uint64_t result;

  result = lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type ResolvableDateInterval and conformance ResolvableDateInterval, (uint64_t (*)(uint64_t))type metadata accessor for ResolvableDateInterval, (uint64_t)&protocol conformance descriptor for ResolvableDateInterval);
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

_UNKNOWN **associated type witness table accessor for ResolvableStringAttributeRepresentation.Family : ResolvableStringAttributeFamily in ResolvableDateInterval()
{
  return &protocol witness table for ResolvableDateInterval;
}

uint64_t associated type witness table accessor for TimelineSchedule.Entries : Sequence in ResolvableDateInterval()
{
  return lazy protocol witness table accessor for type [Date] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type AnySequence<Date> and conformance AnySequence<A>, (unint64_t *)&lazy cache variable for type metadata for AnySequence<Date>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE2428], MEMORY[0x24BEE2440]);
}

uint64_t *initializeBufferWithCopyOfBuffer for ResolvableDateInterval(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v20 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v20 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for DateInterval();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[5];
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = type metadata accessor for Calendar();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
    v12 = a3[6];
    v13 = (char *)a1 + v12;
    v14 = (char *)a2 + v12;
    v15 = type metadata accessor for Locale();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v13, v14, v15);
    v16 = a3[7];
    v17 = (char *)a1 + v16;
    v18 = (char *)a2 + v16;
    v19 = type metadata accessor for TimeZone();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 16))(v17, v18, v19);
  }
  return a1;
}

uint64_t destroy for ResolvableDateInterval(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = type metadata accessor for DateInterval();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  v5 = a1 + a2[5];
  v6 = type metadata accessor for Calendar();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  v7 = a1 + a2[6];
  v8 = type metadata accessor for Locale();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
  v9 = a1 + a2[7];
  v10 = type metadata accessor for TimeZone();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v9, v10);
}

uint64_t initializeWithCopy for ResolvableDateInterval(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v6 = type metadata accessor for DateInterval();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for Calendar();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = type metadata accessor for Locale();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v12, v13, v14);
  v15 = a3[7];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = type metadata accessor for TimeZone();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 16))(v16, v17, v18);
  return a1;
}

uint64_t assignWithCopy for ResolvableDateInterval(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v6 = type metadata accessor for DateInterval();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for Calendar();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 24))(v8, v9, v10);
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = type metadata accessor for Locale();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 24))(v12, v13, v14);
  v15 = a3[7];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = type metadata accessor for TimeZone();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 24))(v16, v17, v18);
  return a1;
}

uint64_t initializeWithTake for ResolvableDateInterval(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v6 = type metadata accessor for DateInterval();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for Calendar();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = type metadata accessor for Locale();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v12, v13, v14);
  v15 = a3[7];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = type metadata accessor for TimeZone();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 32))(v16, v17, v18);
  return a1;
}

uint64_t assignWithTake for ResolvableDateInterval(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v6 = type metadata accessor for DateInterval();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for Calendar();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = type metadata accessor for Locale();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 40))(v12, v13, v14);
  v15 = a3[7];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = type metadata accessor for TimeZone();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 40))(v16, v17, v18);
  return a1;
}

uint64_t getEnumTagSinglePayload for ResolvableDateInterval()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_2350C6640(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = type metadata accessor for DateInterval();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
  }
  else
  {
    v11 = type metadata accessor for Calendar();
    v12 = *(_QWORD *)(v11 - 8);
    if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
    {
      v8 = v11;
      v13 = a3[5];
    }
    else
    {
      v14 = type metadata accessor for Locale();
      v12 = *(_QWORD *)(v14 - 8);
      if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
      {
        v8 = v14;
        v13 = a3[6];
      }
      else
      {
        v8 = type metadata accessor for TimeZone();
        v12 = *(_QWORD *)(v8 - 8);
        v13 = a3[7];
      }
    }
    v10 = a1 + v13;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
  }
  return v9(v10, a2, v8);
}

uint64_t storeEnumTagSinglePayload for ResolvableDateInterval()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_2350C6708(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v8 = type metadata accessor for DateInterval();
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    v13 = type metadata accessor for Calendar();
    v14 = *(_QWORD *)(v13 - 8);
    if (*(_DWORD *)(v14 + 84) == a3)
    {
      v10 = v13;
      v15 = a4[5];
    }
    else
    {
      v16 = type metadata accessor for Locale();
      v14 = *(_QWORD *)(v16 - 8);
      if (*(_DWORD *)(v14 + 84) == a3)
      {
        v10 = v16;
        v15 = a4[6];
      }
      else
      {
        v10 = type metadata accessor for TimeZone();
        v14 = *(_QWORD *)(v10 - 8);
        v15 = a4[7];
      }
    }
    v12 = a1 + v15;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }
  return v11(v12, a2, a2, v10);
}

uint64_t type metadata completion function for ResolvableDateInterval()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;

  result = type metadata accessor for DateInterval();
  if (v1 <= 0x3F)
  {
    result = type metadata accessor for Calendar();
    if (v2 <= 0x3F)
    {
      result = type metadata accessor for Locale();
      if (v3 <= 0x3F)
      {
        result = type metadata accessor for TimeZone();
        if (v4 <= 0x3F)
        {
          swift_initStructMetadata();
          return 0;
        }
      }
    }
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for ResolvableDateInterval.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_2350C68D4 + 4 * byte_2352C6BA9[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_2350C6908 + 4 * byte_2352C6BA4[v4]))();
}

uint64_t sub_2350C6908(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_2350C6910(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x2350C6918);
  return result;
}

uint64_t sub_2350C6924(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x2350C692CLL);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_2350C6930(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_2350C6938(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for ResolvableDateInterval.CodingKeys()
{
  return &unk_250635330;
}

uint64_t specialized ResolvableDateInterval.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x6C61767265746E69 && a2 == 0xE800000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x7261646E656C6163 && a2 == 0xE800000000000000
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x656C61636F6CLL && a2 == 0xE600000000000000
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x656E6F5A656D6974 && a2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 3;
    else
      return 4;
  }
}

uint64_t ResolvableCurrentDate.init(dateFormat:timeZone:in:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(uint64_t, char *, uint64_t);
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v30 = a2;
  type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for TimeZone?, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v30 - v8;
  v32 = type metadata accessor for TimeZone();
  v35 = *(_QWORD *)(v32 - 8);
  MEMORY[0x24BDAC7A8](v32);
  v31 = (char *)&v30 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for Locale();
  v33 = *(_QWORD *)(v11 - 8);
  v34 = v11;
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)&v30 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for Calendar();
  v15 = *(_QWORD *)(v14 - 8);
  MEMORY[0x24BDAC7A8](v14);
  v17 = (char *)&v30 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  LOBYTE(v16) = *(_BYTE *)(a1 + 16);
  v19 = *a3;
  v18 = a3[1];
  *(_OWORD *)a4 = *(_OWORD *)a1;
  *(_BYTE *)(a4 + 16) = v16;
  if (v18)
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v19, (uint64_t)v17);
  }
  else
  {
    v20 = swift_retain_n();
    specialized closure #1 in PropertyList.subscript.getter(v20, (uint64_t)v17);
  }
  swift_release_n();
  swift_release_n();
  v21 = (int *)type metadata accessor for ResolvableCurrentDate();
  (*(void (**)(uint64_t, char *, uint64_t))(v15 + 32))(a4 + v21[5], v17, v14);
  if (v18)
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v19, (uint64_t)v13);
  }
  else
  {
    v22 = swift_retain_n();
    specialized closure #1 in PropertyList.subscript.getter(v22, (uint64_t)v13);
  }
  v24 = (uint64_t)v31;
  v23 = v32;
  v25 = v30;
  swift_release_n();
  swift_release_n();
  (*(void (**)(uint64_t, char *, uint64_t))(v33 + 32))(a4 + v21[6], v13, v34);
  outlined init with copy of TimeZone?(v25, (uint64_t)v9);
  v26 = v35;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v35 + 48))(v9, 1, v23) == 1)
  {
    if (v18)
    {
      swift_retain_n();
      swift_retain_n();
      specialized PropertyList.Tracker.value<A>(_:for:)(v19, v24);
    }
    else
    {
      v29 = swift_retain_n();
      specialized closure #1 in PropertyList.subscript.getter(v29, v24);
    }
    swift_release_n();
    swift_release_n();
    outlined destroy of TimeZone?(v25);
    swift_release();
    swift_release();
    outlined destroy of TimeZone?((uint64_t)v9);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v26 + 32))(a4 + v21[7], v24, v23);
  }
  else
  {
    outlined destroy of TimeZone?(v25);
    swift_release();
    swift_release();
    v27 = *(void (**)(uint64_t, char *, uint64_t))(v26 + 32);
    v27(v24, v9, v23);
    return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v27)(a4 + v21[7], v24, v23);
  }
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance ResolvableCurrentDate.DateFormat.CodingKeys()
{
  _BYTE *v0;

  if (*v0)
    return 0x6574616C706D6574;
  else
    return 0x74616D726F66;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance ResolvableCurrentDate.DateFormat.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = specialized ResolvableCurrentDate.DateFormat.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ResolvableCurrentDate.DateFormat.CodingKeys()
{
  lazy protocol witness table accessor for type ResolvableCurrentDate.DateFormat.CodingKeys and conformance ResolvableCurrentDate.DateFormat.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ResolvableCurrentDate.DateFormat.CodingKeys()
{
  lazy protocol witness table accessor for type ResolvableCurrentDate.DateFormat.CodingKeys and conformance ResolvableCurrentDate.DateFormat.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ResolvableCurrentDate.DateFormat.FormatCodingKeys()
{
  lazy protocol witness table accessor for type ResolvableCurrentDate.DateFormat.FormatCodingKeys and conformance ResolvableCurrentDate.DateFormat.FormatCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ResolvableCurrentDate.DateFormat.FormatCodingKeys()
{
  lazy protocol witness table accessor for type ResolvableCurrentDate.DateFormat.FormatCodingKeys and conformance ResolvableCurrentDate.DateFormat.FormatCodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ResolvableCurrentDate.DateFormat.TemplateCodingKeys()
{
  lazy protocol witness table accessor for type ResolvableCurrentDate.DateFormat.TemplateCodingKeys and conformance ResolvableCurrentDate.DateFormat.TemplateCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ResolvableCurrentDate.DateFormat.TemplateCodingKeys()
{
  lazy protocol witness table accessor for type ResolvableCurrentDate.DateFormat.TemplateCodingKeys and conformance ResolvableCurrentDate.DateFormat.TemplateCodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t ResolvableCurrentDate.DateFormat.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t (*v3)(uint64_t, uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  char v29;

  v3 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE3520];
  type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for KeyedEncodingContainer<ResolvableCurrentDate.DateFormat.TemplateCodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type ResolvableCurrentDate.DateFormat.TemplateCodingKeys and conformance ResolvableCurrentDate.DateFormat.TemplateCodingKeys, (uint64_t)&unk_250632E58, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE3520]);
  v23 = *(_QWORD *)(v4 - 8);
  v24 = v4;
  MEMORY[0x24BDAC7A8](v4);
  v22 = (char *)&v19 - v5;
  type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for KeyedEncodingContainer<ResolvableCurrentDate.DateFormat.FormatCodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type ResolvableCurrentDate.DateFormat.FormatCodingKeys and conformance ResolvableCurrentDate.DateFormat.FormatCodingKeys, (uint64_t)&unk_250632D38, v3);
  v20 = *(_QWORD *)(v6 - 8);
  v21 = v6;
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v19 - v7;
  type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for KeyedEncodingContainer<ResolvableCurrentDate.DateFormat.CodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type ResolvableCurrentDate.DateFormat.CodingKeys and conformance ResolvableCurrentDate.DateFormat.CodingKeys, (uint64_t)&unk_250632DC8, v3);
  v10 = v9;
  v25 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v19 - v11;
  v13 = *v1;
  v26 = v1[1];
  v27 = v13;
  v14 = *((_BYTE *)v1 + 16);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type ResolvableCurrentDate.DateFormat.CodingKeys and conformance ResolvableCurrentDate.DateFormat.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  if ((v14 & 1) != 0)
  {
    v29 = 1;
    lazy protocol witness table accessor for type ResolvableCurrentDate.DateFormat.TemplateCodingKeys and conformance ResolvableCurrentDate.DateFormat.TemplateCodingKeys();
    v15 = v22;
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    v16 = v24;
    KeyedEncodingContainer.encode(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v23 + 8))(v15, v16);
  }
  else
  {
    v28 = 0;
    lazy protocol witness table accessor for type ResolvableCurrentDate.DateFormat.FormatCodingKeys and conformance ResolvableCurrentDate.DateFormat.FormatCodingKeys();
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    v17 = v21;
    KeyedEncodingContainer.encode(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v20 + 8))(v8, v17);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v25 + 8))(v12, v10);
}

uint64_t ResolvableCurrentDate.DateFormat.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t (*v3)(uint64_t, uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  _QWORD *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  char *v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  _QWORD *v39;
  int v40;
  char v41;
  char v42;

  v33 = a2;
  v3 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE33E0];
  type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for KeyedDecodingContainer<ResolvableCurrentDate.DateFormat.TemplateCodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type ResolvableCurrentDate.DateFormat.TemplateCodingKeys and conformance ResolvableCurrentDate.DateFormat.TemplateCodingKeys, (uint64_t)&unk_250632E58, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE33E0]);
  v34 = v4;
  v36 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v38 = (char *)&v32 - v5;
  type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for KeyedDecodingContainer<ResolvableCurrentDate.DateFormat.FormatCodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type ResolvableCurrentDate.DateFormat.FormatCodingKeys and conformance ResolvableCurrentDate.DateFormat.FormatCodingKeys, (uint64_t)&unk_250632D38, v3);
  v37 = v6;
  v35 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v32 - v7;
  type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for KeyedDecodingContainer<ResolvableCurrentDate.DateFormat.CodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type ResolvableCurrentDate.DateFormat.CodingKeys and conformance ResolvableCurrentDate.DateFormat.CodingKeys, (uint64_t)&unk_250632DC8, v3);
  v10 = v9;
  v11 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v13 = (char *)&v32 - v12;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type ResolvableCurrentDate.DateFormat.CodingKeys and conformance ResolvableCurrentDate.DateFormat.CodingKeys();
  v14 = v39;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v14)
    goto LABEL_7;
  v15 = v37;
  v16 = v38;
  v39 = a1;
  v17 = KeyedDecodingContainer.allKeys.getter();
  if (*(_QWORD *)(v17 + 16) != 1)
  {
    v19 = type metadata accessor for DecodingError();
    swift_allocError();
    v20 = v10;
    v22 = v21;
    type metadata accessor for (@thick Any.Type, DecodingError.Context)();
    *v22 = &type metadata for ResolvableCurrentDate.DateFormat;
    KeyedDecodingContainer.codingPath.getter();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v19 - 8) + 104))(v22, *MEMORY[0x24BEE26D0], v19);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v20);
    a1 = v39;
LABEL_7:
    v24 = (uint64_t)a1;
    return __swift_destroy_boxed_opaque_existential_1(v24);
  }
  v40 = *(unsigned __int8 *)(v17 + 32);
  if ((v40 & 1) != 0)
  {
    v42 = 1;
    lazy protocol witness table accessor for type ResolvableCurrentDate.DateFormat.TemplateCodingKeys and conformance ResolvableCurrentDate.DateFormat.TemplateCodingKeys();
    KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    v18 = v34;
    v26 = KeyedDecodingContainer.decode(_:forKey:)();
    v28 = v27;
    (*(void (**)(char *, uint64_t))(v36 + 8))(v16, v18);
  }
  else
  {
    v41 = 0;
    lazy protocol witness table accessor for type ResolvableCurrentDate.DateFormat.FormatCodingKeys and conformance ResolvableCurrentDate.DateFormat.FormatCodingKeys();
    v23 = v8;
    KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    v29 = KeyedDecodingContainer.decode(_:forKey:)();
    v28 = v30;
    (*(void (**)(char *, uint64_t))(v35 + 8))(v23, v15);
    v26 = v29;
  }
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  v31 = v33;
  *v33 = v26;
  v31[1] = v28;
  *((_BYTE *)v31 + 16) = v40;
  v24 = (uint64_t)v39;
  return __swift_destroy_boxed_opaque_existential_1(v24);
}

uint64_t protocol witness for Decodable.init(from:) in conformance ResolvableCurrentDate.DateFormat@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return ResolvableCurrentDate.DateFormat.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance ResolvableCurrentDate.DateFormat(_QWORD *a1)
{
  return ResolvableCurrentDate.DateFormat.encode(to:)(a1);
}

uint64_t ResolvableCurrentDate.dateFormat.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  char v3;

  v2 = *(_QWORD *)(v1 + 8);
  v3 = *(_BYTE *)(v1 + 16);
  *(_QWORD *)a1 = *(_QWORD *)v1;
  *(_QWORD *)(a1 + 8) = v2;
  *(_BYTE *)(a1 + 16) = v3;
  return outlined copy of ResolvableCurrentDate.DateFormat();
}

uint64_t ResolvableCurrentDate.calendar.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for ResolvableCurrentDate() + 20);
  v4 = type metadata accessor for Calendar();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t ResolvableCurrentDate.locale.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for ResolvableCurrentDate() + 24);
  v4 = type metadata accessor for Locale();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t ResolvableCurrentDate.timeZone.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for ResolvableCurrentDate() + 28);
  v4 = type metadata accessor for TimeZone();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance ResolvableCurrentDate.CodingKeys()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_2350C7824 + 4 * byte_2352C6DE0[*v0]))(0x6D726F4665746164, 0xEA00000000007461);
}

uint64_t sub_2350C7824()
{
  return 0x7261646E656C6163;
}

uint64_t sub_2350C783C()
{
  return 0x656C61636F6CLL;
}

uint64_t sub_2350C7850()
{
  return 0x656E6F5A656D6974;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance ResolvableCurrentDate.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = specialized ResolvableCurrentDate.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ResolvableCurrentDate.CodingKeys()
{
  lazy protocol witness table accessor for type ResolvableCurrentDate.CodingKeys and conformance ResolvableCurrentDate.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ResolvableCurrentDate.CodingKeys()
{
  lazy protocol witness table accessor for type ResolvableCurrentDate.CodingKeys and conformance ResolvableCurrentDate.CodingKeys();
  return CodingKey.debugDescription.getter();
}

id static ResolvableCurrentDate.attribute.getter()
{
  if (one-time initialization token for attribute != -1)
    swift_once();
  return (id)static ResolvableCurrentDate.attribute;
}

id ResolvableCurrentDate.provider.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char **v17;
  _QWORD v19[2];
  int v20;
  uint64_t v21;

  type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for TimeZone?, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v1);
  v3 = (char *)v19 - v2;
  v4 = type metadata accessor for Locale();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for Calendar();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *(_QWORD *)(v0 + 8);
  v21 = *(_QWORD *)v0;
  v20 = *(unsigned __int8 *)(v0 + 16);
  v19[1] = type metadata accessor for CAPresentationModifier(0, &lazy cache variable for type metadata for DateProvider);
  v13 = (int *)type metadata accessor for ResolvableCurrentDate();
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, v0 + v13[5], v8);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v0 + v13[6], v4);
  v14 = v0 + v13[7];
  v15 = type metadata accessor for TimeZone();
  v16 = *(_QWORD *)(v15 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v3, v14, v15);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v3, 0, 1, v15);
  swift_bridgeObjectRetain();
  if (v20)
    v17 = &selRef_initWithDateFormatTemplate_calendar_locale_timeZone_;
  else
    v17 = &selRef_initWithDateFormat_calendar_locale_timeZone_;
  return DateProvider.__allocating_init(dateFormat:calendar:locale:timeZone:)(v21, v12, (uint64_t)v11, (uint64_t)v7, (uint64_t)v3, (SEL *)v17);
}

id DateProvider.__allocating_init(dateFormat:calendar:locale:timeZone:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, SEL *a6)
{
  void *v9;
  NSCalendar v10;
  NSLocale v11;
  uint64_t v12;
  uint64_t v13;
  Class isa;
  id v15;
  uint64_t v16;
  uint64_t v17;

  v9 = (void *)MEMORY[0x23B7C5DAC]();
  swift_bridgeObjectRelease();
  v10.super.isa = Calendar._bridgeToObjectiveC()().super.isa;
  v11.super.isa = Locale._bridgeToObjectiveC()().super.isa;
  v12 = type metadata accessor for TimeZone();
  v13 = *(_QWORD *)(v12 - 8);
  isa = 0;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v13 + 48))(a5, 1, v12) != 1)
  {
    isa = TimeZone._bridgeToObjectiveC()().super.isa;
    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(a5, v12);
  }
  v15 = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), *a6, v9, v10.super.isa, v11.super.isa, isa);

  v16 = type metadata accessor for Locale();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 8))(a4, v16);
  v17 = type metadata accessor for Calendar();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 8))(a3, v17);
  return v15;
}

uint64_t ResolvableCurrentDate.resolve(in:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  id v8;
  void *v9;
  id v10;
  id v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;

  v4 = type metadata accessor for AttributeContainer();
  MEMORY[0x24BDAC7A8](v4);
  v5 = type metadata accessor for ResolvableStringResolutionContext();
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = ResolvableCurrentDate.provider.getter();
  if (v8
    && (v9 = v8,
        type metadata accessor for CAPresentationModifier(0, &lazy cache variable for type metadata for DateFormattingContext), outlined init with copy of TypesettingLanguage(a1, (uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for ResolvableStringResolutionContext), v10 = DateFormattingContext.init(_:)((uint64_t)v7), v11 = objc_msgSend(v9, sel_formattedStringInContext_, v10), v9, v10, v11))
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();

    swift_bridgeObjectRetain();
    AttributeContainer.init()();
    AttributedString.init(_:attributes:)();
    v12 = type metadata accessor for AttributedString();
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(a2, 0, 1, v12);
    return swift_bridgeObjectRelease();
  }
  else
  {
    v14 = type metadata accessor for AttributedString();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(a2, 1, 1, v14);
  }
}

uint64_t ResolvableCurrentDate.encode(to:)(_QWORD *a1)
{
  __int128 *v1;
  uint64_t v2;
  __int128 *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char v10;
  __int128 v12;
  char v13;
  char v14;

  v3 = v1;
  type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for KeyedEncodingContainer<ResolvableCurrentDate.CodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type ResolvableCurrentDate.CodingKeys and conformance ResolvableCurrentDate.CodingKeys, (uint64_t)&unk_250632F78, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE3520]);
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v9 = (char *)&v12 - v8;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type ResolvableCurrentDate.CodingKeys and conformance ResolvableCurrentDate.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v10 = *((_BYTE *)v3 + 16);
  v12 = *v3;
  v13 = v10;
  v14 = 0;
  lazy protocol witness table accessor for type ResolvableCurrentDate.DateFormat and conformance ResolvableCurrentDate.DateFormat();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    type metadata accessor for ResolvableCurrentDate();
    LOBYTE(v12) = 1;
    type metadata accessor for Calendar();
    lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type Calendar and conformance Calendar, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF2D8], MEMORY[0x24BDCF2F8]);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    LOBYTE(v12) = 2;
    type metadata accessor for Locale();
    lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type Locale and conformance Locale, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEEA8], MEMORY[0x24BDCEEC8]);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    LOBYTE(v12) = 3;
    type metadata accessor for TimeZone();
    lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type TimeZone and conformance TimeZone, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], MEMORY[0x24BDCF528]);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

uint64_t ResolvableCurrentDate.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v26;
  int *v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  __int128 v42;
  char v43;
  char v44;

  v30 = a2;
  v31 = type metadata accessor for TimeZone();
  v29 = *(_QWORD *)(v31 - 8);
  MEMORY[0x24BDAC7A8](v31);
  v32 = (char *)&v26 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for Locale();
  v37 = *(_QWORD *)(v4 - 8);
  v38 = v4;
  MEMORY[0x24BDAC7A8](v4);
  v33 = (char *)&v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Calendar();
  v35 = *(_QWORD *)(v6 - 8);
  v36 = v6;
  MEMORY[0x24BDAC7A8](v6);
  v34 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for KeyedDecodingContainer<ResolvableCurrentDate.CodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type ResolvableCurrentDate.CodingKeys and conformance ResolvableCurrentDate.CodingKeys, (uint64_t)&unk_250632F78, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE33E0]);
  v40 = v8;
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v26 - v10;
  v12 = type metadata accessor for ResolvableCurrentDate();
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)&v26 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type ResolvableCurrentDate.CodingKeys and conformance ResolvableCurrentDate.CodingKeys();
  v39 = v11;
  v15 = v41;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v15)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  v16 = v34;
  v17 = v35;
  v41 = v9;
  v27 = (int *)v12;
  v28 = a1;
  v18 = v36;
  v19 = v37;
  v20 = v38;
  v44 = 0;
  lazy protocol witness table accessor for type ResolvableCurrentDate.DateFormat and conformance ResolvableCurrentDate.DateFormat();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  v21 = v43;
  v22 = (uint64_t)v14;
  *(_OWORD *)v14 = v42;
  v14[16] = v21;
  LOBYTE(v42) = 1;
  lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type Calendar and conformance Calendar, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF2D8], MEMORY[0x24BDCF310]);
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(char *, char *, uint64_t))(v17 + 32))(&v14[v27[5]], v16, v18);
  LOBYTE(v42) = 2;
  lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type Locale and conformance Locale, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEEA8], MEMORY[0x24BDCEEE8]);
  v23 = v33;
  v34 = 0;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(uint64_t, char *, uint64_t))(v19 + 32))(v22 + v27[6], v23, v20);
  LOBYTE(v42) = 3;
  lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type TimeZone and conformance TimeZone, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], MEMORY[0x24BDCF540]);
  v24 = v31;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v41 + 8))(v39, v40);
  (*(void (**)(uint64_t, char *, uint64_t))(v29 + 32))(v22 + v27[7], v32, v24);
  outlined init with copy of TypesettingLanguage(v22, v30, (uint64_t (*)(_QWORD))type metadata accessor for ResolvableCurrentDate);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v28);
  return outlined destroy of ResolvableCurrentDate(v22);
}

id protocol witness for static ResolvableStringAttributeFamily.attribute.getter in conformance ResolvableCurrentDate()
{
  if (one-time initialization token for attribute != -1)
    swift_once();
  return (id)static ResolvableCurrentDate.attribute;
}

uint64_t protocol witness for Decodable.init(from:) in conformance ResolvableCurrentDate@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return ResolvableCurrentDate.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance ResolvableCurrentDate(_QWORD *a1)
{
  return ResolvableCurrentDate.encode(to:)(a1);
}

uint64_t type metadata accessor for ResolvableCurrentDate()
{
  uint64_t result;

  result = type metadata singleton initialization cache for ResolvableCurrentDate;
  if (!type metadata singleton initialization cache for ResolvableCurrentDate)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t outlined init with copy of TimeZone?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for TimeZone?, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of TimeZone?(uint64_t a1)
{
  uint64_t v2;

  type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for TimeZone?, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t specialized static ResolvableCurrentDate.DateFormat.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v7;

  v2 = *a1;
  v3 = a1[1];
  v4 = *a2;
  v5 = a2[1];
  if ((a1[2] & 1) != 0)
  {
    if ((a2[2] & 1) != 0)
    {
      if (v2 != v4 || v3 != v5)
      {
LABEL_15:
        v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
        goto LABEL_17;
      }
LABEL_16:
      v7 = 1;
      goto LABEL_17;
    }
  }
  else if ((a2[2] & 1) == 0)
  {
    if (v2 != v4 || v3 != v5)
      goto LABEL_15;
    goto LABEL_16;
  }
  v7 = 0;
LABEL_17:
  outlined copy of ResolvableCurrentDate.DateFormat();
  outlined copy of ResolvableCurrentDate.DateFormat();
  outlined consume of ResolvableCurrentDate.DateFormat();
  outlined consume of ResolvableCurrentDate.DateFormat();
  return v7 & 1;
}

unint64_t lazy protocol witness table accessor for type ResolvableCurrentDate.DateFormat.TemplateCodingKeys and conformance ResolvableCurrentDate.DateFormat.TemplateCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ResolvableCurrentDate.DateFormat.TemplateCodingKeys and conformance ResolvableCurrentDate.DateFormat.TemplateCodingKeys;
  if (!lazy protocol witness table cache variable for type ResolvableCurrentDate.DateFormat.TemplateCodingKeys and conformance ResolvableCurrentDate.DateFormat.TemplateCodingKeys)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ResolvableCurrentDate.DateFormat.TemplateCodingKeys, &unk_250632E58);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ResolvableCurrentDate.DateFormat.TemplateCodingKeys and conformance ResolvableCurrentDate.DateFormat.TemplateCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ResolvableCurrentDate.DateFormat.TemplateCodingKeys and conformance ResolvableCurrentDate.DateFormat.TemplateCodingKeys;
  if (!lazy protocol witness table cache variable for type ResolvableCurrentDate.DateFormat.TemplateCodingKeys and conformance ResolvableCurrentDate.DateFormat.TemplateCodingKeys)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ResolvableCurrentDate.DateFormat.TemplateCodingKeys, &unk_250632E58);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ResolvableCurrentDate.DateFormat.TemplateCodingKeys and conformance ResolvableCurrentDate.DateFormat.TemplateCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ResolvableCurrentDate.DateFormat.TemplateCodingKeys and conformance ResolvableCurrentDate.DateFormat.TemplateCodingKeys;
  if (!lazy protocol witness table cache variable for type ResolvableCurrentDate.DateFormat.TemplateCodingKeys and conformance ResolvableCurrentDate.DateFormat.TemplateCodingKeys)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ResolvableCurrentDate.DateFormat.TemplateCodingKeys, &unk_250632E58);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ResolvableCurrentDate.DateFormat.TemplateCodingKeys and conformance ResolvableCurrentDate.DateFormat.TemplateCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ResolvableCurrentDate.DateFormat.TemplateCodingKeys and conformance ResolvableCurrentDate.DateFormat.TemplateCodingKeys;
  if (!lazy protocol witness table cache variable for type ResolvableCurrentDate.DateFormat.TemplateCodingKeys and conformance ResolvableCurrentDate.DateFormat.TemplateCodingKeys)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ResolvableCurrentDate.DateFormat.TemplateCodingKeys, &unk_250632E58);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ResolvableCurrentDate.DateFormat.TemplateCodingKeys and conformance ResolvableCurrentDate.DateFormat.TemplateCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ResolvableCurrentDate.DateFormat.FormatCodingKeys and conformance ResolvableCurrentDate.DateFormat.FormatCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ResolvableCurrentDate.DateFormat.FormatCodingKeys and conformance ResolvableCurrentDate.DateFormat.FormatCodingKeys;
  if (!lazy protocol witness table cache variable for type ResolvableCurrentDate.DateFormat.FormatCodingKeys and conformance ResolvableCurrentDate.DateFormat.FormatCodingKeys)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ResolvableCurrentDate.DateFormat.FormatCodingKeys, &unk_250632D38);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ResolvableCurrentDate.DateFormat.FormatCodingKeys and conformance ResolvableCurrentDate.DateFormat.FormatCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ResolvableCurrentDate.DateFormat.FormatCodingKeys and conformance ResolvableCurrentDate.DateFormat.FormatCodingKeys;
  if (!lazy protocol witness table cache variable for type ResolvableCurrentDate.DateFormat.FormatCodingKeys and conformance ResolvableCurrentDate.DateFormat.FormatCodingKeys)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ResolvableCurrentDate.DateFormat.FormatCodingKeys, &unk_250632D38);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ResolvableCurrentDate.DateFormat.FormatCodingKeys and conformance ResolvableCurrentDate.DateFormat.FormatCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ResolvableCurrentDate.DateFormat.FormatCodingKeys and conformance ResolvableCurrentDate.DateFormat.FormatCodingKeys;
  if (!lazy protocol witness table cache variable for type ResolvableCurrentDate.DateFormat.FormatCodingKeys and conformance ResolvableCurrentDate.DateFormat.FormatCodingKeys)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ResolvableCurrentDate.DateFormat.FormatCodingKeys, &unk_250632D38);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ResolvableCurrentDate.DateFormat.FormatCodingKeys and conformance ResolvableCurrentDate.DateFormat.FormatCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ResolvableCurrentDate.DateFormat.FormatCodingKeys and conformance ResolvableCurrentDate.DateFormat.FormatCodingKeys;
  if (!lazy protocol witness table cache variable for type ResolvableCurrentDate.DateFormat.FormatCodingKeys and conformance ResolvableCurrentDate.DateFormat.FormatCodingKeys)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ResolvableCurrentDate.DateFormat.FormatCodingKeys, &unk_250632D38);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ResolvableCurrentDate.DateFormat.FormatCodingKeys and conformance ResolvableCurrentDate.DateFormat.FormatCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ResolvableCurrentDate.DateFormat.CodingKeys and conformance ResolvableCurrentDate.DateFormat.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ResolvableCurrentDate.DateFormat.CodingKeys and conformance ResolvableCurrentDate.DateFormat.CodingKeys;
  if (!lazy protocol witness table cache variable for type ResolvableCurrentDate.DateFormat.CodingKeys and conformance ResolvableCurrentDate.DateFormat.CodingKeys)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ResolvableCurrentDate.DateFormat.CodingKeys, &unk_250632DC8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ResolvableCurrentDate.DateFormat.CodingKeys and conformance ResolvableCurrentDate.DateFormat.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ResolvableCurrentDate.DateFormat.CodingKeys and conformance ResolvableCurrentDate.DateFormat.CodingKeys;
  if (!lazy protocol witness table cache variable for type ResolvableCurrentDate.DateFormat.CodingKeys and conformance ResolvableCurrentDate.DateFormat.CodingKeys)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ResolvableCurrentDate.DateFormat.CodingKeys, &unk_250632DC8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ResolvableCurrentDate.DateFormat.CodingKeys and conformance ResolvableCurrentDate.DateFormat.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ResolvableCurrentDate.DateFormat.CodingKeys and conformance ResolvableCurrentDate.DateFormat.CodingKeys;
  if (!lazy protocol witness table cache variable for type ResolvableCurrentDate.DateFormat.CodingKeys and conformance ResolvableCurrentDate.DateFormat.CodingKeys)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ResolvableCurrentDate.DateFormat.CodingKeys, &unk_250632DC8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ResolvableCurrentDate.DateFormat.CodingKeys and conformance ResolvableCurrentDate.DateFormat.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ResolvableCurrentDate.DateFormat.CodingKeys and conformance ResolvableCurrentDate.DateFormat.CodingKeys;
  if (!lazy protocol witness table cache variable for type ResolvableCurrentDate.DateFormat.CodingKeys and conformance ResolvableCurrentDate.DateFormat.CodingKeys)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ResolvableCurrentDate.DateFormat.CodingKeys, &unk_250632DC8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ResolvableCurrentDate.DateFormat.CodingKeys and conformance ResolvableCurrentDate.DateFormat.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ResolvableCurrentDate.CodingKeys and conformance ResolvableCurrentDate.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ResolvableCurrentDate.CodingKeys and conformance ResolvableCurrentDate.CodingKeys;
  if (!lazy protocol witness table cache variable for type ResolvableCurrentDate.CodingKeys and conformance ResolvableCurrentDate.CodingKeys)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ResolvableCurrentDate.CodingKeys, &unk_250632F78);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ResolvableCurrentDate.CodingKeys and conformance ResolvableCurrentDate.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ResolvableCurrentDate.CodingKeys and conformance ResolvableCurrentDate.CodingKeys;
  if (!lazy protocol witness table cache variable for type ResolvableCurrentDate.CodingKeys and conformance ResolvableCurrentDate.CodingKeys)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ResolvableCurrentDate.CodingKeys, &unk_250632F78);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ResolvableCurrentDate.CodingKeys and conformance ResolvableCurrentDate.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ResolvableCurrentDate.CodingKeys and conformance ResolvableCurrentDate.CodingKeys;
  if (!lazy protocol witness table cache variable for type ResolvableCurrentDate.CodingKeys and conformance ResolvableCurrentDate.CodingKeys)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ResolvableCurrentDate.CodingKeys, &unk_250632F78);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ResolvableCurrentDate.CodingKeys and conformance ResolvableCurrentDate.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ResolvableCurrentDate.CodingKeys and conformance ResolvableCurrentDate.CodingKeys;
  if (!lazy protocol witness table cache variable for type ResolvableCurrentDate.CodingKeys and conformance ResolvableCurrentDate.CodingKeys)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ResolvableCurrentDate.CodingKeys, &unk_250632F78);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ResolvableCurrentDate.CodingKeys and conformance ResolvableCurrentDate.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ResolvableCurrentDate.DateFormat and conformance ResolvableCurrentDate.DateFormat()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ResolvableCurrentDate.DateFormat and conformance ResolvableCurrentDate.DateFormat;
  if (!lazy protocol witness table cache variable for type ResolvableCurrentDate.DateFormat and conformance ResolvableCurrentDate.DateFormat)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ResolvableCurrentDate.DateFormat, &type metadata for ResolvableCurrentDate.DateFormat);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ResolvableCurrentDate.DateFormat and conformance ResolvableCurrentDate.DateFormat);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ResolvableCurrentDate.DateFormat and conformance ResolvableCurrentDate.DateFormat;
  if (!lazy protocol witness table cache variable for type ResolvableCurrentDate.DateFormat and conformance ResolvableCurrentDate.DateFormat)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ResolvableCurrentDate.DateFormat, &type metadata for ResolvableCurrentDate.DateFormat);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ResolvableCurrentDate.DateFormat and conformance ResolvableCurrentDate.DateFormat);
  }
  return result;
}

uint64_t outlined destroy of ResolvableCurrentDate(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for ResolvableCurrentDate();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t specialized static ResolvableCurrentDate.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v10;
  uint64_t v11;

  v5 = *a1;
  v4 = a1[1];
  v7 = *a2;
  v6 = a2[1];
  if ((a1[2] & 1) != 0)
  {
    if ((a2[2] & 1) != 0)
    {
      if (v5 != v7 || v4 != v6)
        goto LABEL_14;
      goto LABEL_16;
    }
LABEL_9:
    outlined copy of ResolvableCurrentDate.DateFormat();
    outlined copy of ResolvableCurrentDate.DateFormat();
    outlined consume of ResolvableCurrentDate.DateFormat();
    outlined consume of ResolvableCurrentDate.DateFormat();
    return 0;
  }
  if ((a2[2] & 1) != 0)
    goto LABEL_9;
  if (v5 != v7 || v4 != v6)
  {
LABEL_14:
    v10 = _stringCompareWithSmolCheck(_:_:expecting:)();
    outlined copy of ResolvableCurrentDate.DateFormat();
    outlined copy of ResolvableCurrentDate.DateFormat();
    outlined consume of ResolvableCurrentDate.DateFormat();
    outlined consume of ResolvableCurrentDate.DateFormat();
    if ((v10 & 1) == 0)
      return 0;
    goto LABEL_17;
  }
LABEL_16:
  outlined copy of ResolvableCurrentDate.DateFormat();
  outlined copy of ResolvableCurrentDate.DateFormat();
  outlined consume of ResolvableCurrentDate.DateFormat();
  outlined consume of ResolvableCurrentDate.DateFormat();
LABEL_17:
  v11 = type metadata accessor for ResolvableCurrentDate();
  if ((MEMORY[0x23B7C5374]((char *)a1 + *(int *)(v11 + 20), (char *)a2 + *(int *)(v11 + 20)) & 1) != 0
    && (MEMORY[0x23B7C526C]((char *)a1 + *(int *)(v11 + 24), (char *)a2 + *(int *)(v11 + 24)) & 1) != 0)
  {
    JUMPOUT(0x23B7C5488);
  }
  return 0;
}

uint64_t instantiation function for generic protocol witness table for ResolvableCurrentDate(uint64_t a1)
{
  uint64_t result;

  result = lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type ResolvableCurrentDate and conformance ResolvableCurrentDate, (uint64_t (*)(uint64_t))type metadata accessor for ResolvableCurrentDate, (uint64_t)&protocol conformance descriptor for ResolvableCurrentDate);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

{
  uint64_t result;

  result = lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type ResolvableCurrentDate and conformance ResolvableCurrentDate, (uint64_t (*)(uint64_t))type metadata accessor for ResolvableCurrentDate, (uint64_t)&protocol conformance descriptor for ResolvableCurrentDate);
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

uint64_t instantiation function for generic protocol witness table for ResolvableCurrentDate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return instantiation function for generic protocol witness table for ResolvableCurrentDate(a1, a2, a3, &lazy protocol witness table cache variable for type ResolvableCurrentDate and conformance ResolvableCurrentDate, (uint64_t)&protocol conformance descriptor for ResolvableCurrentDate, &lazy protocol witness table cache variable for type ResolvableCurrentDate and conformance ResolvableCurrentDate, (uint64_t)&protocol conformance descriptor for ResolvableCurrentDate);
}

{
  return instantiation function for generic protocol witness table for ResolvableCurrentDate(a1, a2, a3, &lazy protocol witness table cache variable for type ResolvableCurrentDate and conformance ResolvableCurrentDate, (uint64_t)&protocol conformance descriptor for ResolvableCurrentDate, &lazy protocol witness table cache variable for type ResolvableCurrentDate and conformance ResolvableCurrentDate, (uint64_t)&protocol conformance descriptor for ResolvableCurrentDate);
}

uint64_t instantiation function for generic protocol witness table for ResolvableCurrentDate(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t *a4, uint64_t a5, unint64_t *a6, uint64_t a7)
{
  uint64_t result;

  *(_QWORD *)(a1 + 8) = lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(a4, (uint64_t (*)(uint64_t))type metadata accessor for ResolvableCurrentDate, a5);
  result = lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(a6, (uint64_t (*)(uint64_t))type metadata accessor for ResolvableCurrentDate, a7);
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

_UNKNOWN **associated type witness table accessor for ResolvableStringAttributeRepresentation.Family : ResolvableStringAttributeFamily in ResolvableCurrentDate()
{
  return &protocol witness table for ResolvableCurrentDate;
}

uint64_t initializeBufferWithCopyOfBuffer for ResolvableCurrentDate(uint64_t a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v22 = *a2;
    *(_QWORD *)a1 = *a2;
    a1 = v22 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    v7 = *a2;
    v8 = a2[1];
    v9 = *((_BYTE *)a2 + 16);
    outlined copy of ResolvableCurrentDate.DateFormat();
    *(_QWORD *)a1 = v7;
    *(_QWORD *)(a1 + 8) = v8;
    *(_BYTE *)(a1 + 16) = v9;
    v10 = a3[5];
    v11 = a1 + v10;
    v12 = (uint64_t)a2 + v10;
    v13 = type metadata accessor for Calendar();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(v11, v12, v13);
    v14 = a3[6];
    v15 = a1 + v14;
    v16 = (uint64_t)a2 + v14;
    v17 = type metadata accessor for Locale();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 16))(v15, v16, v17);
    v18 = a3[7];
    v19 = a1 + v18;
    v20 = (uint64_t)a2 + v18;
    v21 = type metadata accessor for TimeZone();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 16))(v19, v20, v21);
  }
  return a1;
}

uint64_t destroy for ResolvableCurrentDate(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  outlined consume of ResolvableCurrentDate.DateFormat();
  v4 = a1 + a2[5];
  v5 = type metadata accessor for Calendar();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  v6 = a1 + a2[6];
  v7 = type metadata accessor for Locale();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v6, v7);
  v8 = a1 + a2[7];
  v9 = type metadata accessor for TimeZone();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v8, v9);
}

uint64_t initializeWithCopy for ResolvableCurrentDate(uint64_t a1, uint64_t *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v6 = *a2;
  v7 = a2[1];
  v8 = *((_BYTE *)a2 + 16);
  outlined copy of ResolvableCurrentDate.DateFormat();
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + 8) = v7;
  *(_BYTE *)(a1 + 16) = v8;
  v9 = a3[5];
  v10 = a1 + v9;
  v11 = (uint64_t)a2 + v9;
  v12 = type metadata accessor for Calendar();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(v10, v11, v12);
  v13 = a3[6];
  v14 = a1 + v13;
  v15 = (uint64_t)a2 + v13;
  v16 = type metadata accessor for Locale();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(v14, v15, v16);
  v17 = a3[7];
  v18 = a1 + v17;
  v19 = (uint64_t)a2 + v17;
  v20 = type metadata accessor for TimeZone();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 16))(v18, v19, v20);
  return a1;
}

uint64_t assignWithCopy for ResolvableCurrentDate(uint64_t a1, uint64_t *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v6 = *a2;
  v7 = a2[1];
  v8 = *((_BYTE *)a2 + 16);
  outlined copy of ResolvableCurrentDate.DateFormat();
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + 8) = v7;
  *(_BYTE *)(a1 + 16) = v8;
  outlined consume of ResolvableCurrentDate.DateFormat();
  v9 = a3[5];
  v10 = a1 + v9;
  v11 = (uint64_t)a2 + v9;
  v12 = type metadata accessor for Calendar();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 24))(v10, v11, v12);
  v13 = a3[6];
  v14 = a1 + v13;
  v15 = (uint64_t)a2 + v13;
  v16 = type metadata accessor for Locale();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 24))(v14, v15, v16);
  v17 = a3[7];
  v18 = a1 + v17;
  v19 = (uint64_t)a2 + v17;
  v20 = type metadata accessor for TimeZone();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 24))(v18, v19, v20);
  return a1;
}

uint64_t initializeWithTake for ResolvableCurrentDate(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v6 = a3[5];
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = type metadata accessor for Calendar();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
  v10 = a3[6];
  v11 = a1 + v10;
  v12 = a2 + v10;
  v13 = type metadata accessor for Locale();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 32))(v11, v12, v13);
  v14 = a3[7];
  v15 = a1 + v14;
  v16 = a2 + v14;
  v17 = type metadata accessor for TimeZone();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 32))(v15, v16, v17);
  return a1;
}

uint64_t assignWithTake for ResolvableCurrentDate(uint64_t a1, uint64_t a2, int *a3)
{
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v6 = *(_BYTE *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = v6;
  outlined consume of ResolvableCurrentDate.DateFormat();
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for Calendar();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = type metadata accessor for Locale();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 40))(v12, v13, v14);
  v15 = a3[7];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = type metadata accessor for TimeZone();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 40))(v16, v17, v18);
  return a1;
}

uint64_t getEnumTagSinglePayload for ResolvableCurrentDate()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_2350C91C8(uint64_t a1, uint64_t a2, int *a3)
{
  unsigned int v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if ((_DWORD)a2 == 254)
  {
    v4 = *(unsigned __int8 *)(a1 + 16);
    if (v4 > 1)
      return (v4 ^ 0xFF) + 1;
    else
      return 0;
  }
  else
  {
    v8 = type metadata accessor for Calendar();
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      v10 = v8;
      v11 = a3[5];
    }
    else
    {
      v12 = type metadata accessor for Locale();
      v9 = *(_QWORD *)(v12 - 8);
      if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
      {
        v10 = v12;
        v11 = a3[6];
      }
      else
      {
        v10 = type metadata accessor for TimeZone();
        v9 = *(_QWORD *)(v10 - 8);
        v11 = a3[7];
      }
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(a1 + v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for ResolvableCurrentDate()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_2350C9290(uint64_t result, uint64_t a2, int a3, int *a4)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v5 = result;
  if (a3 == 254)
  {
    *(_BYTE *)(result + 16) = -(char)a2;
  }
  else
  {
    v8 = type metadata accessor for Calendar();
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = a4[5];
    }
    else
    {
      v12 = type metadata accessor for Locale();
      v9 = *(_QWORD *)(v12 - 8);
      if (*(_DWORD *)(v9 + 84) == a3)
      {
        v10 = v12;
        v11 = a4[6];
      }
      else
      {
        v10 = type metadata accessor for TimeZone();
        v9 = *(_QWORD *)(v10 - 8);
        v11 = a4[7];
      }
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v5 + v11, a2, a2, v10);
  }
  return result;
}

uint64_t type metadata completion function for ResolvableCurrentDate()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;

  result = type metadata accessor for Calendar();
  if (v1 <= 0x3F)
  {
    result = type metadata accessor for Locale();
    if (v2 <= 0x3F)
    {
      result = type metadata accessor for TimeZone();
      if (v3 <= 0x3F)
      {
        swift_initStructMetadata();
        return 0;
      }
    }
  }
  return result;
}

uint64_t destroy for ResolvableCurrentDate.DateFormat()
{
  return outlined consume of ResolvableCurrentDate.DateFormat();
}

uint64_t initializeBufferWithCopyOfBuffer for ResolvableCurrentDate.DateFormat(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;

  v3 = *a2;
  v4 = a2[1];
  v5 = *((_BYTE *)a2 + 16);
  outlined copy of ResolvableCurrentDate.DateFormat();
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for ResolvableCurrentDate.DateFormat(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;

  v3 = *a2;
  v4 = a2[1];
  v5 = *((_BYTE *)a2 + 16);
  outlined copy of ResolvableCurrentDate.DateFormat();
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  outlined consume of ResolvableCurrentDate.DateFormat();
  return a1;
}

uint64_t assignWithTake for ResolvableCurrentDate.DateFormat(uint64_t a1, uint64_t a2)
{
  char v3;

  v3 = *(_BYTE *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = v3;
  outlined consume of ResolvableCurrentDate.DateFormat();
  return a1;
}

ValueMetadata *type metadata accessor for ResolvableCurrentDate.DateFormat()
{
  return &type metadata for ResolvableCurrentDate.DateFormat;
}

uint64_t storeEnumTagSinglePayload for ResolvableCurrentDate.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_2350C9548 + 4 * byte_2352C6DE9[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_2350C957C + 4 * byte_2352C6DE4[v4]))();
}

uint64_t sub_2350C957C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_2350C9584(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x2350C958CLL);
  return result;
}

uint64_t sub_2350C9598(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x2350C95A0);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_2350C95A4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_2350C95AC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for ResolvableCurrentDate.CodingKeys()
{
  return &unk_250632F78;
}

uint64_t storeEnumTagSinglePayload for ResolvableCurrentDate.DateFormat.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_2350C9614 + 4 * byte_2352C6DF3[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_2350C9648 + 4 * byte_2352C6DEE[v4]))();
}

uint64_t sub_2350C9648(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_2350C9650(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x2350C9658);
  return result;
}

uint64_t sub_2350C9664(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x2350C966CLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_2350C9670(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_2350C9678(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for ResolvableCurrentDate.DateFormat.CodingKeys()
{
  return &unk_250632DC8;
}

void *type metadata accessor for ResolvableCurrentDate.DateFormat.FormatCodingKeys()
{
  return &unk_250632D38;
}

uint64_t storeEnumTagSinglePayload for ResolvableCurrentDate.DateFormat.FormatCodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_2350C96E8 + 4 * byte_2352C6DF8[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_2350C9708 + 4 * byte_2352C6DFD[v4]))();
}

_BYTE *sub_2350C96E8(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_2350C9708(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_2350C9710(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_2350C9718(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_2350C9720(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_2350C9728(_DWORD *result)
{
  *result = 0;
  return result;
}

void *type metadata accessor for ResolvableCurrentDate.DateFormat.TemplateCodingKeys()
{
  return &unk_250632E58;
}

uint64_t specialized ResolvableCurrentDate.DateFormat.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x74616D726F66 && a2 == 0xE600000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6574616C706D6574 && a2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t specialized ResolvableCurrentDate.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x6D726F4665746164 && a2 == 0xEA00000000007461;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x7261646E656C6163 && a2 == 0xE800000000000000
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x656C61636F6CLL && a2 == 0xE600000000000000
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x656E6F5A656D6974 && a2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 3;
    else
      return 4;
  }
}

uint64_t StateObject.storage.getter(uint64_t a1, uint64_t a2, char a3)
{
  outlined copy of StateObject<A>.Storage<A>(a1, a2, a3 & 1);
  return a1;
}

uint64_t outlined copy of StateObject<A>.Storage<A>(uint64_t a1, uint64_t a2, char a3)
{
  if ((a3 & 1) != 0)
    return swift_unknownObjectRetain();
  else
    return swift_retain();
}

uint64_t StateObject.storage.setter(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3;
  uint64_t result;

  result = outlined consume of StateObject<A>.Storage<A>(*(_QWORD *)v3, *(_QWORD *)(v3 + 8), *(_BYTE *)(v3 + 16));
  *(_QWORD *)v3 = a1;
  *(_QWORD *)(v3 + 8) = a2;
  *(_BYTE *)(v3 + 16) = a3 & 1;
  return result;
}

uint64_t outlined consume of StateObject<A>.Storage<A>(uint64_t a1, uint64_t a2, char a3)
{
  if ((a3 & 1) != 0)
    return swift_unknownObjectRelease();
  else
    return swift_release();
}

uint64_t (*StateObject.storage.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t StateObject.objectValue.getter(void (*a1)(uint64_t), uint64_t a2, char a3)
{
  uint64_t v5;

  if ((a3 & 1) != 0)
  {
    swift_unknownObjectRetain();
  }
  else
  {
    swift_retain();
    static os_log_type_t.fault.getter();
    if (one-time initialization token for runtimeIssuesLog != -1)
      swift_once();
    v5 = os_log(_:dso:log:_:_:)();
    a1(v5);
    outlined consume of StateObject<A>.Storage<A>((uint64_t)a1, a2, 0);
    return ObservedObject.init(wrappedValue:)();
  }
  return (uint64_t)a1;
}

uint64_t StateObject.wrappedValue.getter(void (*a1)(uint64_t), uint64_t a2, char a3)
{
  uint64_t v3;

  StateObject.objectValue.getter(a1, a2, a3 & 1);
  return v3;
}

uint64_t StateObject.projectedValue.getter(void (*a1)(uint64_t), uint64_t a2, char a3)
{
  uint64_t v3;

  StateObject.objectValue.getter(a1, a2, a3 & 1);
  v3 = ObservedObject.projectedValue.getter();
  swift_unknownObjectRelease();
  return v3;
}

void static StateObject._makeProperty<A>(in:container:fieldOffset:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  specialized static StateObject._makeProperty<A>(in:container:fieldOffset:inputs:)(a1, a3, a4, a5, a6, a7);
}

void StateObject.Box.destroy()()
{
  _DynamicPropertyBuffer.destroy()();
}

uint64_t StateObject.Box.reset()()
{
  uint64_t *v0;
  uint64_t *v1;
  int v2;
  uint64_t v3;
  int v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t result;
  uint64_t *v10;

  v1 = v0;
  v2 = *((_DWORD *)v0 + 3);
  if (!v2)
  {
LABEL_8:
    result = swift_unknownObjectRelease();
    v1[2] = 0;
    v1[3] = 0;
    return result;
  }
  v3 = *v0;
  if (*v0)
  {
    v4 = 0;
    v5 = v2 - 1;
    do
    {
      v8 = (uint64_t *)(v3 + v4);
      if (v5)
        v4 += *((_DWORD *)v8 + 2);
      else
        v4 = 0;
      v6 = v5 | v4;
      v7 = *v8;
      v10 = v8;
      (*(void (**)(uint64_t **))(v7 + 112))(&v10);
      --v5;
    }
    while (v6);
    goto LABEL_8;
  }
  __break(1u);
  return result;
}

uint64_t StateObject.Box.update(property:phase:)(uint64_t a1, int *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  int v7;
  uint64_t v8;
  void (*v9)(uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(uint64_t);
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  char *v25;
  unsigned __int8 v26;
  void (*v27)(uint64_t);
  uint64_t v28;
  char v29;
  uint64_t v30;

  v4 = v3;
  v6 = a1;
  v30 = *MEMORY[0x24BDAC8D0];
  v7 = *a2;
  v29 = 0;
  v8 = *(_QWORD *)(v3 + 24);
  if (v8)
  {
    v9 = *(void (**)(uint64_t))(v4 + 16);
  }
  else
  {
    v9 = *(void (**)(uint64_t))a1;
    v8 = *(_QWORD *)(a1 + 8);
    if ((*(_BYTE *)(a1 + 16) & 1) != 0)
    {
      a1 = swift_unknownObjectRetain();
    }
    else
    {
      v10 = swift_retain();
      v9(v10);
      outlined consume of StateObject<A>.Storage<A>((uint64_t)v9, v8, 0);
      a1 = ObservedObject.init(wrappedValue:)();
      v9 = (void (*)(uint64_t))a1;
      v8 = v11;
    }
    *(_QWORD *)(v4 + 16) = v9;
    *(_QWORD *)(v4 + 24) = v8;
    v29 = 1;
  }
  v27 = v9;
  v28 = v8;
  MEMORY[0x24BDAC7A8](a1);
  v12 = *(_QWORD *)(a3 + 24);
  v21 = *(_QWORD *)(a3 + 16);
  v22 = v12;
  v23 = v4;
  v24 = v7;
  v25 = &v29;
  v14 = type metadata accessor for ObservedObject(0, v21, v12, v13);
  swift_unknownObjectRetain();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v27, (uint64_t)partial apply for closure #1 in StateObject.Box.update(property:phase:), (uint64_t)&v20, v14, MEMORY[0x24BEE4078], MEMORY[0x24BEE1328], MEMORY[0x24BEE40A8], v15);
  v16 = v26;
  v17 = v27;
  v18 = v28;
  outlined consume of StateObject<A>.Storage<A>(*(_QWORD *)v6, *(_QWORD *)(v6 + 8), *(_BYTE *)(v6 + 16));
  *(_QWORD *)v6 = v17;
  *(_QWORD *)(v6 + 8) = v18;
  *(_BYTE *)(v6 + 16) = 1;
  return v16;
}

void protocol witness for static DynamicProperty._makeProperty<A>(in:container:fieldOffset:inputs:) in conformance StateObject<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  specialized static StateObject._makeProperty<A>(in:container:fieldOffset:inputs:)(a1, a3, a4, *(_QWORD *)(a6 + 16), a5, *(_QWORD *)(a6 + 24));
}

uint64_t static StateObject._propertyBehaviors.getter()
{
  return 2;
}

void specialized static StateObject._makeProperty<A>(in:container:fieldOffset:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v12[4];
  uint64_t v13;
  uint64_t v14;

  v13 = 0;
  v14 = 0;
  specialized static ObservedObject._makeProperty<A>(in:container:fieldOffset:inputs:)((uint64_t)&v13, 0, a3, a4, a5, a6);
  v12[0] = v13;
  v12[1] = v14;
  v10 = type metadata accessor for StateObject.Box(0, a4, a6, v9);
  v12[2] = 0;
  v12[3] = 0;
  v11 = MEMORY[0x23B7C9C04](&protocol conformance descriptor for StateObject<A>.Box, v10);
  _DynamicPropertyBuffer.append<A>(_:fieldOffset:)((uint64_t)v12, a2, v10, v11);
}

uint64_t type metadata accessor for StateObject(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for StateObject);
}

uint64_t destroy for StateObject.Storage(uint64_t a1)
{
  return outlined consume of StateObject<A>.Storage<A>(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
}

uint64_t initializeBufferWithCopyOfBuffer for StateObject(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  outlined copy of StateObject<A>.Storage<A>(*(_QWORD *)a2, v4, v5);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for StateObject(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  outlined copy of StateObject<A>.Storage<A>(*(_QWORD *)a2, v4, v5);
  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  v8 = *(_BYTE *)(a1 + 16);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  outlined consume of StateObject<A>.Storage<A>(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for StateObject(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  char v6;

  v3 = *(_BYTE *)(a2 + 16);
  v4 = *(_QWORD *)a1;
  v5 = *(_QWORD *)(a1 + 8);
  v6 = *(_BYTE *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = v3;
  outlined consume of StateObject<A>.Storage<A>(v4, v5, v6);
  return a1;
}

uint64_t type metadata accessor for StateObject.Storage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for StateObject.Storage);
}

uint64_t type metadata accessor for StateObject.Box(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for StateObject.Box);
}

uint64_t destroy for StateObject.Box()
{
  return swift_unknownObjectRelease();
}

uint64_t initializeWithCopy for StateObject.Box(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v3 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v3;
  swift_unknownObjectRetain();
  return a1;
}

uint64_t assignWithCopy for StateObject.Box(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  return a1;
}

_QWORD *assignWithTake for StateObject.Box(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  *a1 = *a2;
  a1[1] = a2[1];
  v3 = a2[3];
  a1[2] = a2[2];
  a1[3] = v3;
  swift_unknownObjectRelease();
  return a1;
}

_UNKNOWN **associated type witness table accessor for DynamicPropertyBox.Property : DynamicProperty in StateObject<A>.Box()
{
  return &protocol witness table for StateObject<A>;
}

uint64_t partial apply for closure #1 in StateObject.Box.update(property:phase:)@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  uint64_t *v4;
  int v5;
  _BYTE *v6;
  uint64_t result;
  int v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *(uint64_t **)(v2 + 32);
  v5 = *(_DWORD *)(v2 + 40);
  v6 = *(_BYTE **)(v2 + 48);
  v9 = *v4;
  v10 = v4[1];
  v8 = v5;
  result = _DynamicPropertyBuffer.update(container:phase:)(a1, &v8);
  *a2 = (result | *v6) & 1;
  return result;
}

uint64_t View.layoutPriority(_:)(uint64_t a1, uint64_t a2, double a3)
{
  double v4;

  v4 = a3;
  return View._trait<A>(_:_:)((uint64_t)&type metadata for LayoutPriorityTraitKey, (uint64_t)&v4, a1, (uint64_t)&type metadata for LayoutPriorityTraitKey, a2, (uint64_t)&protocol witness table for LayoutPriorityTraitKey);
}

double static LayoutPriorityTraitKey.defaultValue.getter()
{
  return 0.0;
}

SwiftUI::LayoutPriorityLayout __swiftcall LayoutPriorityLayout.init(priority:)(SwiftUI::LayoutPriorityLayout priority)
{
  SwiftUI::LayoutPriorityLayout *v1;

  v1->priority = priority.priority;
  return priority;
}

double LayoutPriorityLayout.placement(of:in:)@<D0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  double v3;
  char v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  char v8;
  double *InputValue;
  double v10;
  double v11;
  double result;
  double v13;
  __int128 v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  char v23;

  v3 = *(double *)(a1 + 16);
  v4 = *(_BYTE *)(a1 + 48);
  v19 = *(_OWORD *)(a1 + 24);
  PlacementContext.proposedSize.getter((uint64_t)&v20);
  v5 = v20;
  v6 = v21;
  v7 = v22;
  v8 = v23;
  if ((v4 & 1) != 0)
  {
    InputValue = (double *)AGGraphGetInputValue();
    v10 = *InputValue;
    v11 = InputValue[1];
  }
  else
  {
    v10 = v3;
    v11 = *(double *)&v19;
  }
  result = v10 * 0.5;
  *(_QWORD *)a2 = v5;
  v13 = v11 * 0.5;
  *(_BYTE *)(a2 + 8) = v6;
  *(_QWORD *)(a2 + 16) = v7;
  *(_BYTE *)(a2 + 24) = v8;
  __asm { FMOV            V2.2D, #0.5 }
  *(_OWORD *)(a2 + 32) = _Q2;
  *(double *)(a2 + 48) = result;
  *(double *)(a2 + 56) = v13;
  return result;
}

uint64_t LayoutPriorityLayout.sizeThatFits(in:context:child:)(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  char v4;
  uint64_t v5;
  char v6;
  int v7;
  uint64_t v9;
  char v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  int v14;

  v3 = *(_QWORD *)a1;
  v4 = *(_BYTE *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  v6 = *(_BYTE *)(a1 + 24);
  v7 = *((_DWORD *)a3 + 2);
  v13 = *a3;
  v14 = v7;
  v9 = v3;
  v10 = v4;
  v11 = v5;
  v12 = v6;
  return LayoutProxy.size(in:)(&v9);
}

uint64_t LayoutPriorityLayout.spacing(in:child:)(uint64_t a1, uint64_t a2)
{
  __int128 *InputValue;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  if (*(_DWORD *)(a2 + 4) == *MEMORY[0x24BE096C0])
  {
    if (one-time initialization token for defaultValue != -1)
      swift_once();
    InputValue = &static LayoutComputer.defaultValue;
  }
  else
  {
    InputValue = (__int128 *)AGGraphGetInputValue();
  }
  v3 = *(_QWORD *)InputValue;
  v4 = one-time initialization token for lockAssertionsAreEnabled;
  swift_retain();
  if (v4 != -1)
    swift_once();
  if (!lockAssertionsAreEnabled)
    goto LABEL_12;
  if (one-time initialization token for _lock != -1)
    swift_once();
  if (!_MovableLockIsOwner(static Update._lock))
  {
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
LABEL_12:
    (*(void (**)(void))(*(_QWORD *)v3 + 112))();
    return swift_release();
  }
  return result;
}

double LayoutPriorityLayout.layoutPriority(child:)()
{
  uint64_t v0;

  return *(double *)v0;
}

uint64_t LayoutPriorityLayout.ignoresAutomaticPadding(child:)(uint64_t a1)
{
  __int128 *InputValue;
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t result;

  if (*(_DWORD *)(a1 + 4) == *MEMORY[0x24BE096C0])
  {
    if (one-time initialization token for defaultValue != -1)
      swift_once();
    InputValue = &static LayoutComputer.defaultValue;
  }
  else
  {
    InputValue = (__int128 *)AGGraphGetInputValue();
  }
  v2 = *(_QWORD *)InputValue;
  v3 = one-time initialization token for lockAssertionsAreEnabled;
  swift_retain();
  if (v3 != -1)
    swift_once();
  if (!lockAssertionsAreEnabled)
    goto LABEL_12;
  if (one-time initialization token for _lock != -1)
    swift_once();
  if (!_MovableLockIsOwner(static Update._lock))
  {
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
LABEL_12:
    v4 = (*(uint64_t (**)(void))(*(_QWORD *)v2 + 96))();
    swift_release();
    return v4 & 1;
  }
  return result;
}

double LayoutPriorityLayout.priority.getter()
{
  uint64_t v0;

  return *(double *)v0;
}

void LayoutPriorityLayout.priority.setter(double a1)
{
  double *v1;

  *v1 = a1;
}

uint64_t (*LayoutPriorityLayout.priority.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t protocol witness for UnaryLayout.spacing(in:child:) in conformance LayoutPriorityLayout(uint64_t a1, uint64_t a2)
{
  return LayoutPriorityLayout.spacing(in:child:)(a1, a2);
}

double protocol witness for UnaryLayout.placement(of:in:) in conformance LayoutPriorityLayout@<D0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  return LayoutPriorityLayout.placement(of:in:)(a1, a2);
}

double protocol witness for UnaryLayout.layoutPriority(child:) in conformance LayoutPriorityLayout()
{
  uint64_t v0;

  return *(double *)v0;
}

uint64_t protocol witness for UnaryLayout.ignoresAutomaticPadding(child:) in conformance LayoutPriorityLayout(uint64_t a1)
{
  return LayoutPriorityLayout.ignoresAutomaticPadding(child:)(a1) & 1;
}

unint64_t instantiation function for generic protocol witness table for LayoutPriorityLayout(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type LayoutPriorityLayout and conformance LayoutPriorityLayout();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

ValueMetadata *type metadata accessor for LayoutPriorityTraitKey()
{
  return &type metadata for LayoutPriorityTraitKey;
}

ValueMetadata *type metadata accessor for LayoutPriorityLayout()
{
  return &type metadata for LayoutPriorityLayout;
}

uint64_t sub_2350CAA60(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[2];

  v4 = *a1;
  v5 = a1[1];
  type metadata accessor for _TraitWritingModifier<LayoutPriorityTraitKey>(255, a2, a3, a4);
  v8 = type metadata accessor for ModifiedContent(255, v4, v6, v7);
  v10[0] = v5;
  v10[1] = &protocol witness table for _TraitWritingModifier<A>;
  return MEMORY[0x23B7C9C04]("I{:\x1B̧\t", v8, v10);
}

void type metadata accessor for _TraitWritingModifier<LayoutPriorityTraitKey>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  uint64_t v5;

  if (!lazy cache variable for type metadata for _TraitWritingModifier<LayoutPriorityTraitKey>)
  {
    v4 = type metadata accessor for _TraitWritingModifier(0, (uint64_t)&type metadata for LayoutPriorityTraitKey, (uint64_t)&protocol witness table for LayoutPriorityTraitKey, a4);
    if (!v5)
      atomic_store(v4, (unint64_t *)&lazy cache variable for type metadata for _TraitWritingModifier<LayoutPriorityTraitKey>);
  }
}

uint64_t _GraphInputs.imageAccessibilityProvider.getter()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  __int128 *v3;
  uint64_t v4;

  v1 = *v0;
  swift_retain_n();
  swift_retain();
  swift_bridgeObjectRetain();
  v2 = specialized find<A>(_:key:)(v1);
  if (v2)
  {
    v3 = (__int128 *)(v2 + 72);
  }
  else
  {
    v3 = &static _GraphInputs.ImageAccessibilityProviderKey.defaultValue;
    if (one-time initialization token for defaultValue != -1)
      swift_once();
  }
  v4 = *(_QWORD *)v3;
  swift_bridgeObjectRelease();
  swift_release();
  swift_release_n();
  return v4;
}

uint64_t key path getter for _GraphInputs.imageAccessibilityProvider : _GraphInputs@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = _GraphInputs.imageAccessibilityProvider.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t key path setter for _GraphInputs.imageAccessibilityProvider : _GraphInputs(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *a1;
  v4 = a1[1];
  swift_retain();
  specialized closure #1 in PropertyList.subscript.setter(a2, v3, v4);
  return swift_release();
}

uint64_t _GraphInputs.imageAccessibilityProvider.setter(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;

  swift_retain();
  specialized closure #1 in PropertyList.subscript.setter(v2, a1, a2);
  return swift_release();
}

void (*_GraphInputs.imageAccessibilityProvider.modify(_QWORD *a1))(uint64_t **a1)
{
  uint64_t *v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  __int128 *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;

  v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = v1;
  v4 = *v1;
  swift_retain_n();
  swift_retain();
  swift_bridgeObjectRetain();
  v5 = specialized find<A>(_:key:)(v4);
  if (v5)
  {
    v6 = (__int128 *)(v5 + 72);
    v7 = (uint64_t *)(v5 + 80);
  }
  else
  {
    v6 = &static _GraphInputs.ImageAccessibilityProviderKey.defaultValue;
    v7 = (uint64_t *)&static _GraphInputs.ImageAccessibilityProviderKey.defaultValue + 1;
    if (one-time initialization token for defaultValue != -1)
      swift_once();
  }
  v8 = *v7;
  v9 = *(_QWORD *)v6;
  swift_release_n();
  swift_release();
  swift_bridgeObjectRelease();
  *v3 = v9;
  v3[1] = v8;
  return _GraphInputs.imageAccessibilityProvider.modify;
}

void _GraphInputs.imageAccessibilityProvider.modify(uint64_t **a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *a1;
  v2 = (uint64_t *)(*a1)[4];
  v3 = **a1;
  v4 = (*a1)[1];
  swift_retain();
  specialized closure #1 in PropertyList.subscript.setter(v2, v3, v4);
  swift_release();
  free(v1);
}

double protocol witness for static PropertyKey.defaultValue.getter in conformance _GraphInputs.ImageAccessibilityProviderKey@<D0>(_OWORD *a1@<X8>)
{
  double result;

  if (one-time initialization token for defaultValue != -1)
    swift_once();
  result = *(double *)&static _GraphInputs.ImageAccessibilityProviderKey.defaultValue;
  *a1 = static _GraphInputs.ImageAccessibilityProviderKey.defaultValue;
  return result;
}

uint64_t _ViewInputs.imageAccessibilityProvider.getter()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  __int128 *v3;
  uint64_t v4;

  v1 = *v0;
  swift_retain_n();
  swift_retain();
  swift_bridgeObjectRetain();
  v2 = specialized find<A>(_:key:)(v1);
  if (v2)
  {
    v3 = (__int128 *)(v2 + 72);
  }
  else
  {
    v3 = &static _GraphInputs.ImageAccessibilityProviderKey.defaultValue;
    if (one-time initialization token for defaultValue != -1)
      swift_once();
  }
  v4 = *(_QWORD *)v3;
  swift_bridgeObjectRelease();
  swift_release();
  swift_release_n();
  return v4;
}

uint64_t key path getter for _ViewInputs.imageAccessibilityProvider : _ViewInputs@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = _ViewInputs.imageAccessibilityProvider.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t _ViewInputs.imageAccessibilityProvider.setter(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;

  swift_retain();
  specialized closure #1 in PropertyList.subscript.setter(v2, a1, a2);
  return swift_release();
}

void (*_ViewInputs.imageAccessibilityProvider.modify(_QWORD *a1))(uint64_t **a1)
{
  uint64_t *v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  __int128 *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;

  v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = v1;
  v4 = *v1;
  swift_retain_n();
  swift_retain();
  swift_bridgeObjectRetain();
  v5 = specialized find<A>(_:key:)(v4);
  if (v5)
  {
    v6 = (__int128 *)(v5 + 72);
    v7 = (uint64_t *)(v5 + 80);
  }
  else
  {
    v6 = &static _GraphInputs.ImageAccessibilityProviderKey.defaultValue;
    v7 = (uint64_t *)&static _GraphInputs.ImageAccessibilityProviderKey.defaultValue + 1;
    if (one-time initialization token for defaultValue != -1)
      swift_once();
  }
  v8 = *v7;
  v9 = *(_QWORD *)v6;
  swift_release_n();
  swift_release();
  swift_bridgeObjectRelease();
  *v3 = v9;
  v3[1] = v8;
  return _GraphInputs.imageAccessibilityProvider.modify;
}

uint64_t protocol witness for static ImageAccessibilityProvider.makeView(image:resolved:) in conformance EmptyImageAccessibilityProvider@<X0>(__int128 *a1@<X1>, uint64_t a2@<X8>)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  _OWORD v17[2];
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  _OWORD v26[2];

  v2 = a1[9];
  v3 = a1[7];
  v24 = a1[8];
  v25 = v2;
  v4 = a1[9];
  v26[0] = a1[10];
  v5 = a1[5];
  v7 = a1[3];
  v20 = a1[4];
  v6 = v20;
  v21 = v5;
  v8 = a1[5];
  v9 = a1[7];
  v22 = a1[6];
  v10 = v22;
  v23 = v9;
  v11 = a1[1];
  v17[0] = *a1;
  v17[1] = v11;
  v12 = a1[3];
  v14 = *a1;
  v13 = a1[1];
  v18 = a1[2];
  v15 = v18;
  v19 = v12;
  *(_OWORD *)(a2 + 128) = v24;
  *(_OWORD *)(a2 + 144) = v4;
  *(_OWORD *)(a2 + 160) = a1[10];
  *(_OWORD *)(a2 + 64) = v6;
  *(_OWORD *)(a2 + 80) = v8;
  *(_OWORD *)(a2 + 96) = v10;
  *(_OWORD *)(a2 + 112) = v3;
  *(_OWORD *)a2 = v14;
  *(_OWORD *)(a2 + 16) = v13;
  *(_DWORD *)((char *)v26 + 15) = *(_DWORD *)((char *)a1 + 175);
  *(_DWORD *)(a2 + 175) = *(_DWORD *)((char *)a1 + 175);
  *(_OWORD *)(a2 + 32) = v15;
  *(_OWORD *)(a2 + 48) = v7;
  return outlined retain of Image.Resolved((uint64_t)v17);
}

uint64_t dispatch thunk of static ImageAccessibilityProvider.makeView(image:resolved:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 24))();
}

unint64_t lazy protocol witness table accessor for type EmptyImageAccessibilityProvider and conformance EmptyImageAccessibilityProvider()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type EmptyImageAccessibilityProvider and conformance EmptyImageAccessibilityProvider;
  if (!lazy protocol witness table cache variable for type EmptyImageAccessibilityProvider and conformance EmptyImageAccessibilityProvider)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for EmptyImageAccessibilityProvider, &type metadata for EmptyImageAccessibilityProvider);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EmptyImageAccessibilityProvider and conformance EmptyImageAccessibilityProvider);
  }
  return result;
}

ValueMetadata *type metadata accessor for EmptyImageAccessibilityProvider()
{
  return &type metadata for EmptyImageAccessibilityProvider;
}

ValueMetadata *type metadata accessor for _GraphInputs.ImageAccessibilityProviderKey()
{
  return &type metadata for _GraphInputs.ImageAccessibilityProviderKey;
}

uint64_t associated type witness table accessor for ImageAccessibilityProvider.Body : View in EmptyImageAccessibilityProvider()
{
  return swift_getOpaqueTypeConformance2();
}

_UNKNOWN **sub_2350CB264()
{
  return &protocol witness table for Image.Resolved;
}

uint64_t *Environment.init<A>(_:)(uint64_t a1, uint64_t a2)
{
  return Environment.init<A>(_:)(a1, a2);
}

{
  return Environment.init<A>(_:)(a1, a2);
}

{
  uint64_t *KeyPath;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v6;

  EnvironmentObjectKey.init()(a2);
  KeyPath = (uint64_t *)swift_getKeyPath();
  Environment.init(_:)(KeyPath, v3, v4, &v6);
  return v6;
}

uint64_t sub_2350CB27C@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t *a4@<X8>)
{
  uint64_t result;

  result = specialized EnvironmentValues.subscript.getter(*(_QWORD *)(a2 + a1 - 16), a1, a2, a3);
  *a4 = result;
  return result;
}

uint64_t sub_2350CB2C4()
{
  return 16;
}

uint64_t sub_2350CB2D0()
{
  return 1;
}

Swift::Int sub_2350CB2D8(uint64_t a1, uint64_t a2)
{
  return specialized EnvironmentObjectKey.hashValue.getter(*(_QWORD *)(a2 + a1 - 16));
}

__n128 sub_2350CB2E4(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_2350CB358@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t *a4@<X8>)
{
  uint64_t result;

  result = specialized EnvironmentValues.subscript.getter(*(_QWORD *)(a2 + a1 - 16), a1, a2, a3);
  *a4 = result;
  return result;
}

uint64_t sub_2350CB3A0()
{
  return 16;
}

uint64_t sub_2350CB3AC()
{
  return 1;
}

__n128 sub_2350CB3B4(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t View.environment<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *KeyPath;
  uint64_t v9;

  EnvironmentObjectKey.init()(a3);
  KeyPath = (uint64_t *)swift_getKeyPath();
  v9 = a1;
  View.environment<A>(_:_:)(KeyPath, (uint64_t)&v9, a2, a4);
  return swift_release();
}

uint64_t key path setter for EnvironmentValues.subscript<A>(_:) : <A><A1>EnvironmentValuesA1(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *(_QWORD *)(a4 + a3 - 24);
  v5 = swift_unknownObjectRetain();
  specialized EnvironmentValues.subscript.setter(v5, v4, v6, v7);
  return swift_unknownObjectRelease();
}

uint64_t sub_2350CB540@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t *a4@<X8>)
{
  uint64_t result;

  result = specialized EnvironmentValues.subscript.getter(*(_QWORD *)(a2 + a1 - 24), a1, a2, a3);
  *a4 = result;
  return result;
}

uint64_t sub_2350CB588()
{
  return 32;
}

uint64_t sub_2350CB594()
{
  return 1;
}

Swift::Int sub_2350CB59C(uint64_t a1, uint64_t a2)
{
  return specialized EnvironmentObjectKey.hashValue.getter(*(_QWORD *)(a2 + a1 - 24));
}

__n128 sub_2350CB5A8(uint64_t a1, _OWORD *a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a1;
  v3 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  return result;
}

uint64_t sub_2350CB5B4(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[2];

  v1 = *a1;
  v2 = a1[2];
  v3 = type metadata accessor for Optional();
  v6 = type metadata accessor for _EnvironmentKeyWritingModifier(255, v3, v4, v5);
  v8 = type metadata accessor for ModifiedContent(255, v1, v6, v7);
  v10[0] = v2;
  v10[1] = &protocol witness table for _EnvironmentKeyWritingModifier<A>;
  return MEMORY[0x23B7C9C04]("I{:\x1B̧\t", v8, v10);
}

uint64_t AnyView.init<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  double v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[2];

  v6 = *(_QWORD *)(a2 - 8);
  v7 = MEMORY[0x24BDAC7A8](a1);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v6 + 16))((char *)v12 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), a1, a2, v7);
  if ((swift_dynamicCast() & 1) != 0)
  {
    v10 = v12[1];
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(a1, a2);
  }
  else
  {
    type metadata accessor for AnyViewStorage(0, a2, a3, v9);
    v10 = swift_allocObject();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v10 + 128) - 8) + 32))(v10 + *(_QWORD *)(*(_QWORD *)v10 + 144), a1);
  }
  return v10;
}

uint64_t type metadata accessor for AnyViewStorage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AnyViewStorage);
}

uint64_t specialized static DynamicView.makeDynamicView(metadata:view:inputs:)@<X0>(int a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  int v13;
  int v14;
  id v15;
  void *v16;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;
  int v20;
  __int128 v21;
  __int128 v22;
  uint64_t v25;
  int v26;
  int v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  int v36;
  int v37;
  id v38;
  uint64_t v39;

  v39 = *MEMORY[0x24BDAC8D0];
  v4 = *(_QWORD *)a2;
  v20 = *(_DWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a2 + 40);
  v6 = *(_QWORD *)(a2 + 48);
  v21 = *(_OWORD *)(a2 + 56);
  v22 = *(_OWORD *)(a2 + 24);
  v8 = *(_QWORD *)(a2 + 72);
  v9 = *(_DWORD *)(a2 + 80);
  v10 = *(_OWORD *)(a2 + 48);
  v30 = *(_OWORD *)(a2 + 32);
  v31 = v10;
  v32 = *(_OWORD *)(a2 + 64);
  LODWORD(v33) = *(_DWORD *)(a2 + 80);
  v11 = *(_OWORD *)(a2 + 16);
  v28 = *(_OWORD *)a2;
  v29 = v11;
  _ViewInputs.makeIndirectOutputs()((uint64_t)&v25);
  v12 = v25;
  v13 = v26;
  v14 = v27;
  v15 = (id)AGSubgraphGetCurrent();
  if (!v15)
    __break(1u);
  v16 = v15;
  LODWORD(v28) = a1;
  *((_QWORD *)&v28 + 1) = v4;
  LODWORD(v29) = v20;
  *((_QWORD *)&v29 + 1) = v5;
  v30 = v22;
  *(_QWORD *)&v31 = v7;
  *((_QWORD *)&v31 + 1) = v6;
  v32 = v21;
  v33 = v8;
  v34 = v9;
  v35 = v12;
  v36 = v13;
  v37 = v14;
  v38 = v15;
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  outlined retain of _ViewInputs(a2);
  type metadata accessor for DynamicViewList<AnyView>.Item(0, &lazy cache variable for type metadata for DynamicViewContainer<AnyView>.Value, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))type metadata accessor for DynamicViewContainer.Value);
  type metadata accessor for DynamicViewList<AnyView>.Item(0, &lazy cache variable for type metadata for DynamicViewContainer<AnyView>, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))type metadata accessor for DynamicViewContainer);
  lazy protocol witness table accessor for type DynamicViewList<AnyView> and conformance DynamicViewList<A>(&lazy protocol witness table cache variable for type DynamicViewContainer<AnyView> and conformance DynamicViewContainer<A>, &lazy cache variable for type metadata for DynamicViewContainer<AnyView>, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))type metadata accessor for DynamicViewContainer, (uint64_t)&protocol conformance descriptor for DynamicViewContainer<A>);
  swift_bridgeObjectRetain();
  Attribute.init<A>(body:value:flags:update:)();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  result = AGGraphSetFlags();
  v18 = *(_QWORD *)(v12 + 16);
  if (v18)
  {
    swift_bridgeObjectRetain();
    v19 = 48;
    do
    {
      AGGraphSetIndirectDependency();
      v19 += 24;
      --v18;
    }
    while (v18);
    result = swift_bridgeObjectRelease();
  }
  if (v14 != *MEMORY[0x24BE096C0])
    result = AGGraphSetIndirectDependency();
  *(_QWORD *)a3 = v12;
  *(_DWORD *)(a3 + 8) = v13;
  *(_DWORD *)(a3 + 12) = v14;
  return result;
}

uint64_t specialized static DynamicView.makeDynamicViewList(metadata:view:inputs:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  id v4;
  void *v5;
  int v6;
  uint64_t result;

  v4 = (id)AGSubgraphGetCurrent();
  if (!v4)
    __break(1u);
  v5 = v4;
  type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for MutableBox<[Unmanaged<DynamicViewList<AnyView>.Item>]>, (uint64_t (*)(uint64_t))type metadata accessor for [Unmanaged<DynamicViewList<AnyView>.Item>], (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for MutableBox);
  *(_QWORD *)(swift_allocObject() + 16) = MEMORY[0x24BEE4AF8];
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  outlined retain of _ViewListInputs(a1);
  type metadata accessor for ScrollStateRequest(0, (unint64_t *)&lazy cache variable for type metadata for ViewList);
  type metadata accessor for DynamicViewList<AnyView>.Item(0, &lazy cache variable for type metadata for DynamicViewList<AnyView>, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))type metadata accessor for DynamicViewList);
  lazy protocol witness table accessor for type DynamicViewList<AnyView> and conformance DynamicViewList<A>((unint64_t *)&lazy protocol witness table cache variable for type DynamicViewList<AnyView> and conformance DynamicViewList<A>, &lazy cache variable for type metadata for DynamicViewList<AnyView>, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))type metadata accessor for DynamicViewList, (uint64_t)&protocol conformance descriptor for DynamicViewList<A>);
  v6 = Attribute.init<A>(body:value:flags:update:)();
  swift_release();

  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  result = swift_bridgeObjectRelease();
  *(_DWORD *)a2 = v6;
  *(_QWORD *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 40) = 1;
  *(_QWORD *)(a2 + 48) = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a2 + 56) = 0;
  *(_BYTE *)(a2 + 64) = 1;
  return result;
}

uint64_t AnyView.init(_fromValue:)(_QWORD *a1)
{
  uint64_t DynamicType;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  _BYTE v7[32];
  uint64_t v8;

  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  DynamicType = swift_getDynamicType();
  _viewProtocolDescriptor();
  v3 = swift_conformsToProtocol();
  if (!v3)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    return 0;
  }
  v4 = v3;
  outlined init with copy of Any((uint64_t)a1, (uint64_t)v7);
  v8 = 0;
  result = visit<A>(type:) in Visitor #1 in AnyView.init(_fromValue:)(DynamicType, DynamicType, v4);
  v6 = v8;
  if (v8)
  {
    swift_retain();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    outlined destroy of Visitor #1 in AnyView.init(_fromValue:)((uint64_t)v7);
    return v6;
  }
  __break(1u);
  return result;
}

uint64_t static AnyView._makeView(view:inputs:)@<X0>(int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v3;
  __int128 v4;
  __int128 v5;
  _OWORD v7[5];
  int v8;

  v3 = *a1;
  v4 = *(_OWORD *)(a2 + 48);
  v7[2] = *(_OWORD *)(a2 + 32);
  v7[3] = v4;
  v7[4] = *(_OWORD *)(a2 + 64);
  v8 = *(_DWORD *)(a2 + 80);
  v5 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v5;
  return specialized static DynamicView.makeDynamicView(metadata:view:inputs:)(v3, (uint64_t)v7, a3);
}

uint64_t static AnyView._makeViewList(view:inputs:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  __int128 v2;
  __int128 v3;
  _OWORD v5[5];
  char v6;

  v2 = *(_OWORD *)(a1 + 48);
  v5[2] = *(_OWORD *)(a1 + 32);
  v5[3] = v2;
  v5[4] = *(_OWORD *)(a1 + 64);
  v6 = *(_BYTE *)(a1 + 80);
  v3 = *(_OWORD *)(a1 + 16);
  v5[0] = *(_OWORD *)a1;
  v5[1] = v3;
  return specialized static DynamicView.makeDynamicViewList(metadata:view:inputs:)((uint64_t)v5, a2);
}

uint64_t AnyView.visitContent<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 104))(a1, a3, a4);
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance AnyView@<X0>(int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v3;
  __int128 v4;
  __int128 v5;
  _OWORD v7[5];
  int v8;

  v3 = *a1;
  v4 = *(_OWORD *)(a2 + 48);
  v7[2] = *(_OWORD *)(a2 + 32);
  v7[3] = v4;
  v7[4] = *(_OWORD *)(a2 + 64);
  v8 = *(_DWORD *)(a2 + 80);
  v5 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v5;
  return specialized static DynamicView.makeDynamicView(metadata:view:inputs:)(v3, (uint64_t)v7, a3);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance AnyView@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  __int128 v2;
  __int128 v3;
  _OWORD v5[5];
  char v6;

  v2 = *(_OWORD *)(a1 + 48);
  v5[2] = *(_OWORD *)(a1 + 32);
  v5[3] = v2;
  v5[4] = *(_OWORD *)(a1 + 64);
  v6 = *(_BYTE *)(a1 + 80);
  v3 = *(_OWORD *)(a1 + 16);
  v5[0] = *(_OWORD *)a1;
  v5[1] = v3;
  return specialized static DynamicView.makeDynamicViewList(metadata:view:inputs:)((uint64_t)v5, a2);
}

uint64_t AnyView.debugDescription.getter(uint64_t a1)
{
  Swift::String v2;
  Swift::String v3;
  _QWORD v5[5];
  uint64_t v6;
  unint64_t v7;

  v6 = 0;
  v7 = 0xE000000000000000;
  v2._countAndFlagsBits = 0x2877656956796E41;
  v2._object = (void *)0xE800000000000000;
  String.append(_:)(v2);
  (*(void (**)(_QWORD *__return_ptr))(*(_QWORD *)a1 + 112))(v5);
  type metadata accessor for ScrollStateRequest(0, &lazy cache variable for type metadata for View);
  _print_unlocked<A, B>(_:_:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v5);
  v3._countAndFlagsBits = 41;
  v3._object = (void *)0xE100000000000000;
  String.append(_:)(v3);
  return v6;
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AnyView()
{
  uint64_t *v0;
  uint64_t v1;
  Swift::String v2;
  Swift::String v3;
  _QWORD v5[5];
  uint64_t v6;
  unint64_t v7;

  v1 = *v0;
  v6 = 0;
  v7 = 0xE000000000000000;
  v2._countAndFlagsBits = 0x2877656956796E41;
  v2._object = (void *)0xE800000000000000;
  String.append(_:)(v2);
  (*(void (**)(_QWORD *__return_ptr))(*(_QWORD *)v1 + 112))(v5);
  type metadata accessor for ScrollStateRequest(0, &lazy cache variable for type metadata for View);
  _print_unlocked<A, B>(_:_:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v5);
  v3._countAndFlagsBits = 41;
  v3._object = (void *)0xE100000000000000;
  String.append(_:)(v3);
  return v6;
}

uint64_t static AnyView.canTransition.getter()
{
  return 0;
}

uint64_t AnyView.childInfo(metadata:)(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(*(_QWORD *)a2 + 80))();
  *(_QWORD *)a1 = 0;
  *(_BYTE *)(a1 + 8) = 1;
  return result;
}

uint64_t AnyView.makeChildView(metadata:view:inputs:)(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v3;
  uint64_t v4;
  int v5;
  __int128 v6;
  uint64_t v8;
  int v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  int v15;

  v3 = *((_DWORD *)a2 + 2);
  v4 = a2[2];
  v5 = *((_DWORD *)a2 + 20);
  v8 = *a2;
  v9 = v3;
  v10 = v4;
  v6 = *(_OWORD *)(a2 + 5);
  v11 = *(_OWORD *)(a2 + 3);
  v12 = v6;
  v13 = *(_OWORD *)(a2 + 7);
  v14 = a2[9];
  v15 = v5;
  return (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)a3 + 88))(a1, &v8);
}

uint64_t AnyView.makeChildViewList(metadata:view:inputs:)(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  char v8;
  uint64_t v10;
  int v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  __int128 v15;
  int v16;
  uint64_t v17;
  char v18;

  v3 = *((_DWORD *)a2 + 2);
  v4 = a2[2];
  v5 = a2[5];
  v6 = *((_DWORD *)a2 + 16);
  v7 = a2[9];
  v8 = *((_BYTE *)a2 + 80);
  v10 = *a2;
  v11 = v3;
  v12 = v4;
  v13 = *(_OWORD *)(a2 + 3);
  v14 = v5;
  v15 = *((_OWORD *)a2 + 3);
  v16 = v6;
  v17 = v7;
  v18 = v8;
  return (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)a3 + 96))(a1, &v10);
}

uint64_t protocol witness for DynamicView.childInfo(metadata:) in conformance AnyView(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)v1 + 80))();
  *(_QWORD *)a1 = 0;
  *(_BYTE *)(a1 + 8) = 1;
  return result;
}

uint64_t protocol witness for DynamicView.makeChildView(metadata:view:inputs:) in conformance AnyView(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t *v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  int v7;
  __int128 v8;
  uint64_t v10;
  int v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  int v17;

  v4 = *v3;
  v5 = *((_DWORD *)a3 + 2);
  v6 = a3[2];
  v7 = *((_DWORD *)a3 + 20);
  v10 = *a3;
  v11 = v5;
  v12 = v6;
  v8 = *(_OWORD *)(a3 + 5);
  v13 = *(_OWORD *)(a3 + 3);
  v14 = v8;
  v15 = *(_OWORD *)(a3 + 7);
  v16 = a3[9];
  v17 = v7;
  return (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v4 + 88))(a2, &v10);
}

uint64_t protocol witness for DynamicView.makeChildViewList(metadata:view:inputs:) in conformance AnyView(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t *v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  char v10;
  uint64_t v12;
  int v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  __int128 v17;
  int v18;
  uint64_t v19;
  char v20;

  v4 = *v3;
  v5 = *((_DWORD *)a3 + 2);
  v6 = a3[2];
  v7 = a3[5];
  v8 = *((_DWORD *)a3 + 16);
  v9 = a3[9];
  v10 = *((_BYTE *)a3 + 80);
  v12 = *a3;
  v13 = v5;
  v14 = v6;
  v15 = *(_OWORD *)(a3 + 3);
  v16 = v7;
  v17 = *((_OWORD *)a3 + 3);
  v18 = v8;
  v19 = v9;
  v20 = v10;
  return (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v4 + 96))(a2, &v12);
}

void AnyViewStorageBase.childType.getter()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void AnyViewStorageBase.makeChildView(view:inputs:)()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void AnyViewStorageBase.makeChildViewList(view:inputs:)()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void AnyViewStorageBase.visitContent<A>(_:)()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void AnyViewStorageBase.content.getter()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t AnyViewStorageBase.deinit()
{
  uint64_t v0;

  return v0;
}

uint64_t AnyViewStorageBase.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t AnyViewStorage.childType.getter()
{
  uint64_t v0;

  return *(_QWORD *)(*(_QWORD *)v0 + 128);
}

uint64_t AnyViewStorage.makeChildView(view:inputs:)@<X0>(int a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  int v28;
  int v29;
  uint64_t v30;
  void (*v31)(int *, uint64_t *, uint64_t, uint64_t);
  uint64_t v32;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  unsigned int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  int v52;
  int v53[3];
  uint64_t v54;
  int v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  int v63;
  int v64;
  int v65;
  int v66;
  int v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  int v72;
  unsigned int v73;
  int v74;
  int v75;
  uint64_t v76;
  uint64_t v77;
  int v78;
  int v79;
  int v80;
  int v81;
  int v82;
  int v83;
  int v84;
  uint64_t v85;
  int v86;
  uint64_t v87;
  __int128 v88;
  uint64_t v89;
  uint64_t v90;
  __int128 v91;
  uint64_t v92;
  int v93;
  uint64_t v94;

  v4 = v3;
  v50 = a3;
  v94 = *MEMORY[0x24BDAC8D0];
  v6 = *v3;
  v7 = *(_DWORD *)(a2 + 8);
  v8 = *(_QWORD *)(a2 + 16);
  v9 = *(_QWORD *)(a2 + 40);
  v10 = *(_QWORD *)(a2 + 48);
  v11 = *(_DWORD *)(a2 + 80);
  v85 = *(_QWORD *)a2;
  v86 = v7;
  v88 = *(_OWORD *)(a2 + 24);
  v87 = v8;
  v89 = v9;
  v90 = v10;
  v91 = *(_OWORD *)(a2 + 56);
  v92 = *(_QWORD *)(a2 + 72);
  v93 = v11;
  v12 = *(_QWORD *)(v6 + 128);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  v13 = swift_bridgeObjectRetain();
  if ((WORD6(v88) & 0x100) != 0)
  {
    AGTypeGetSignature();
    v13 = specialized _GraphInputs.pushScope<A>(id:)(v69, v70, (_QWORD *)v71);
  }
  LODWORD(v69) = a1;
  MEMORY[0x24BDAC7A8](v13);
  v35 = v12;
  v49 = v14;
  v36 = type metadata accessor for AnyViewChild(0, v12, v14, v15);
  v37 = MEMORY[0x23B7C9C04](&protocol conformance descriptor for AnyViewChild<A>, v36);
  v16 = type metadata accessor for Attribute();
  v17 = MEMORY[0x24BEE4078];
  v18 = MEMORY[0x24BEE40A8];
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v69, (uint64_t)closure #1 in Attribute.init<A>(_:)partial apply, (uint64_t)&v34, v36, MEMORY[0x24BEE4078], v16, MEMORY[0x24BEE40A8], v19);
  v20 = v54;
  MEMORY[0x24BDAC7A8]((char *)v4 + *(_QWORD *)(*v4 + 144));
  v37 = v12;
  v38 = v20;
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v21, (uint64_t)closure #1 in Attribute.setValue(_:)partial apply, (uint64_t)&v35, v12, v17, MEMORY[0x24BEE1328], v18, v22);
  _GraphValue.init(_:)(v20, v53);
  v51 = v53[0];
  v23 = v85;
  v24 = v87;
  v43 = DWORD1(v88);
  v44 = v88;
  v45 = HIDWORD(v88);
  v48 = DWORD2(v88);
  v46 = v86;
  v25 = v89;
  v26 = v90;
  v27 = DWORD1(v91);
  v28 = DWORD2(v91);
  v29 = HIDWORD(v91);
  v41 = v92;
  v42 = v91;
  v39 = v93;
  v40 = HIDWORD(v92);
  LODWORD(v20) = AGSubgraphShouldRecordTree();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v47 = v20;
  if ((_DWORD)v20)
    AGSubgraphBeginTreeElement();
  v69 = v23;
  LODWORD(v70) = v46;
  v71 = v24;
  v72 = v44;
  v73 = v43;
  v75 = v45;
  v76 = v25;
  v77 = v26;
  v78 = v42;
  v79 = v27;
  v80 = v28;
  v81 = v29;
  v82 = v41;
  v83 = v40;
  v84 = v39;
  v52 = v51;
  v54 = v23;
  v55 = v46;
  v56 = v24;
  v57 = v44;
  v58 = v43;
  v59 = v45;
  v60 = v25;
  v61 = v26;
  v62 = v42;
  v63 = v27;
  v64 = v28;
  v65 = v29;
  v66 = v41;
  v67 = v40;
  v68 = v39;
  v30 = v49;
  v31 = *(void (**)(int *, uint64_t *, uint64_t, uint64_t))(v49 + 24);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v32 = v50;
  v31(&v52, &v54, v12, v30);
  v74 = v48;
  if ((v47 & 1) != 0)
  {
    specialized static _ViewDebug.reallyWrap<A>(_:value:inputs:)(v32, (uint64_t)&v69);
    AGSubgraphEndTreeElement();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_release_n();
    swift_release_n();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_release_n();
    swift_release();
  }
  swift_release();
  return swift_release();
}

uint64_t AnyViewStorage.makeChildViewList(view:inputs:)@<X0>(int a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  int v44[4];
  unsigned int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  __int128 v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  char v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  __int128 v59;
  uint64_t v60;
  __int128 v61;
  int v62;
  uint64_t v63;
  char v64;
  uint64_t v65;

  v4 = v3;
  v43 = a3;
  v65 = *MEMORY[0x24BDAC8D0];
  v6 = *v3;
  v7 = *(_DWORD *)(a2 + 8);
  v8 = *(_QWORD *)(a2 + 16);
  v9 = *(_QWORD *)(a2 + 40);
  v10 = *(_DWORD *)(a2 + 64);
  v11 = *(_QWORD *)(a2 + 72);
  v12 = *(_BYTE *)(a2 + 80);
  v56 = *(_QWORD *)a2;
  v57 = v7;
  v58 = v8;
  v59 = *(_OWORD *)(a2 + 24);
  v60 = v9;
  v61 = *(_OWORD *)(a2 + 48);
  v62 = v10;
  v63 = v11;
  v64 = v12;
  v13 = *(_QWORD *)(v6 + 128);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  v14 = swift_bridgeObjectRetain();
  if ((WORD6(v59) & 0x100) != 0)
  {
    AGTypeGetSignature();
    v14 = specialized _GraphInputs.pushScope<A>(id:)(v46, v47, (_QWORD *)v48);
  }
  LODWORD(v46) = a1;
  MEMORY[0x24BDAC7A8](v14);
  v36 = v13;
  v42 = v15;
  v37 = type metadata accessor for AnyViewChild(0, v13, v15, v16);
  v38 = MEMORY[0x23B7C9C04](&protocol conformance descriptor for AnyViewChild<A>, v37);
  v17 = type metadata accessor for Attribute();
  v18 = MEMORY[0x24BEE4078];
  v19 = MEMORY[0x24BEE40A8];
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v46, (uint64_t)partial apply for closure #1 in Attribute.init<A>(_:), (uint64_t)&v35, v37, MEMORY[0x24BEE4078], v17, MEMORY[0x24BEE40A8], v20);
  v21 = v45;
  MEMORY[0x24BDAC7A8]((char *)v4 + *(_QWORD *)(*v4 + 144));
  v38 = v13;
  v39 = v21;
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v22, (uint64_t)partial apply for closure #1 in Attribute.setValue(_:), (uint64_t)&v36, v13, v18, MEMORY[0x24BEE1328], v19, v23);
  _GraphValue.init(_:)(v21, &v45);
  v24 = v45;
  v25 = v56;
  v41 = v57;
  v26 = v58;
  v27 = v59;
  v28 = v60;
  v29 = *((_QWORD *)&v61 + 1);
  v40 = v61;
  v30 = v62;
  v31 = v63;
  v32 = v64;
  LODWORD(v21) = AGSubgraphShouldRecordTree();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  if ((_DWORD)v21)
    AGSubgraphBeginTreeElement();
  v44[0] = v24;
  v46 = v25;
  LODWORD(v47) = v41;
  v48 = v26;
  v49 = v27;
  v50 = v28;
  v51 = v40;
  v52 = v29;
  v53 = v30;
  v54 = v31;
  v55 = v32;
  v33 = v42;
  (*(void (**)(int *, uint64_t *, uint64_t, uint64_t))(v42 + 32))(v44, &v46, v13, v42);
  $defer #1 <A>() in static ViewModifier.makeDebuggableViewList(modifier:inputs:body:)(v24, v13, v33);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  return swift_release_n();
}

uint64_t AnyViewStorage.visitContent<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, uint64_t, uint64_t))(a3 + 8))(v3 + *(_QWORD *)(*(_QWORD *)v3 + 144), *(_QWORD *)(*(_QWORD *)v3 + 128), *(_QWORD *)(*(_QWORD *)v3 + 136), a2, a3);
}

uint64_t AnyViewChild.updateValue()(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  double v7;
  uint64_t v8;
  _QWORD v9[6];

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD *)(a1 + 24);
  AGGraphGetValue();
  type metadata accessor for AnyViewStorage(0, v2, v3, v4);
  result = swift_dynamicCastClass();
  if (result)
  {
    v6 = result + *(_QWORD *)(*(_QWORD *)result + 144);
    v7 = MEMORY[0x24BDAC7A8](result);
    v9[2] = a1;
    v9[3] = MEMORY[0x23B7C9C04](&protocol conformance descriptor for AnyViewChild<A>, a1, v7);
    swift_retain();
    _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v6, (uint64_t)partial apply for closure #1 in StatefulRule.value.setter, (uint64_t)v9, v2, MEMORY[0x24BEE4078], MEMORY[0x24BEE4AE0] + 8, MEMORY[0x24BEE40A8], v8);
    return swift_release();
  }
  return result;
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance AnyViewChild<A>(uint64_t a1)
{
  MEMORY[0x23B7C9C04](&protocol conformance descriptor for AnyViewChild<A>, a1);
  return static AsyncAttribute.flags.getter();
}

uint64_t visit<A>(type:) in Visitor #1 in AnyView.init(_fromValue:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t result;
  _BYTE v10[32];

  MEMORY[0x24BDAC7A8](a1);
  v7 = &v10[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  outlined init with copy of Any(v3, (uint64_t)v10);
  swift_dynamicCast();
  v8 = AnyView.init<A>(_:)((uint64_t)v7, a2, a3);
  result = swift_release();
  *(_QWORD *)(v3 + 32) = v8;
  return result;
}

uint64_t outlined destroy of Visitor #1 in AnyView.init(_fromValue:)(uint64_t a1)
{
  __swift_destroy_boxed_opaque_existential_1(a1);
  swift_release();
  return a1;
}

ValueMetadata *type metadata accessor for AnyView()
{
  return &type metadata for AnyView;
}

uint64_t type metadata accessor for AnyViewStorageBase()
{
  return objc_opt_self();
}

uint64_t method lookup function for AnyViewStorageBase()
{
  return swift_lookUpClassMethod();
}

uint64_t destroy for Visitor #1 in AnyView.init(_fromValue:)(uint64_t a1)
{
  __swift_destroy_boxed_opaque_existential_1(a1);
  return swift_release();
}

uint64_t initializeWithCopy for Visitor #1 in AnyView.init(_fromValue:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 24) = v4;
  (**(void (***)(void))(v4 - 8))();
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_retain();
  return a1;
}

uint64_t *assignWithCopy for Visitor #1 in AnyView.init(_fromValue:)(uint64_t *a1, uint64_t *a2)
{
  __swift_assign_boxed_opaque_existential_0(a1, a2);
  a1[4] = a2[4];
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for Visitor #1 in AnyView.init(_fromValue:)(uint64_t a1, uint64_t a2)
{
  __int128 v4;

  __swift_destroy_boxed_opaque_existential_1(a1);
  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_release();
  return a1;
}

void *type metadata accessor for Visitor #1 in AnyView.init(_fromValue:)()
{
  return &unk_25064D260;
}

uint64_t type metadata accessor for AnyViewChild(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AnyViewChild);
}

void type metadata accessor for DynamicViewList<AnyView>.Item(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, unint64_t))
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    v6 = lazy protocol witness table accessor for type AnyView and conformance AnyView();
    v7 = a3(a1, &type metadata for AnyView, v6);
    if (!v8)
      atomic_store(v7, a2);
  }
}

uint64_t lazy protocol witness table accessor for type DynamicViewList<AnyView> and conformance DynamicViewList<A>(unint64_t *a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, unint64_t), uint64_t a4)
{
  uint64_t result;
  uint64_t v7;

  result = *a1;
  if (!result)
  {
    type metadata accessor for DynamicViewList<AnyView>.Item(255, a2, a3);
    result = MEMORY[0x23B7C9C04](a4, v7);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t instantiation function for generic protocol witness table for AnyViewChild<A>(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for AnyViewChild<A>);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

void base witness table accessor for _AttributeBody in AnyViewChild<A>()
{
  JUMPOUT(0x23B7C9C04);
}

BOOL static Time.== infix(_:_:)(double *a1, double *a2)
{
  return *a1 == *a2;
}

SwiftUI::Time __swiftcall Time.init()()
{
  _QWORD *v0;
  SwiftUI::Time result;

  *v0 = 0;
  return result;
}

double static Time.- infix(_:_:)(double *a1, double *a2)
{
  return *a1 - *a2;
}

BOOL static Time.< infix(_:_:)(double *a1, double *a2)
{
  return *a1 < *a2;
}

double static Time.+= infix(_:_:)(double *a1, double a2)
{
  double result;

  result = *a1 + a2;
  *a1 = result;
  return result;
}

double static Time.+ infix(_:_:)@<D0>(double *a1@<X0>, double *a2@<X8>, double a3@<D0>)
{
  double result;

  result = *a1 + a3;
  *a2 = result;
  return result;
}

{
  double result;

  result = *a1 + a3;
  *a2 = result;
  return result;
}

void static Time.systemUptime.getter(CFTimeInterval *a1@<X8>)
{
  *a1 = CACurrentMediaTime();
}

SwiftUI::Time __swiftcall Time.init(seconds:)(SwiftUI::Time seconds)
{
  SwiftUI::Time *v1;

  v1->seconds = seconds.seconds;
  return seconds;
}

double static Time.- infix(_:_:)@<D0>(double *a1@<X0>, double *a2@<X8>, double a3@<D0>)
{
  double result;

  result = *a1 - a3;
  *a2 = result;
  return result;
}

double static Time.- prefix(_:)@<D0>(double *a1@<X0>, double *a2@<X8>)
{
  double result;

  result = -*a1;
  *a2 = result;
  return result;
}

double Time.seconds.getter()
{
  uint64_t v0;

  return *(double *)v0;
}

void Time.seconds.setter(double a1)
{
  double *v1;

  *v1 = a1;
}

uint64_t (*Time.seconds.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

void static Time.zero.getter(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

double static Time.infinity.getter@<D0>(_QWORD *a1@<X8>)
{
  double result;

  if (one-time initialization token for infinity != -1)
    swift_once();
  result = *(double *)&static Time.infinity;
  *a1 = static Time.infinity;
  return result;
}

double static Time.* infix(_:_:)@<D0>(double *a1@<X0>, double *a2@<X8>, double a3@<D0>)
{
  double result;

  result = *a1 * a3;
  *a2 = result;
  return result;
}

double static Time./ infix(_:_:)@<D0>(double *a1@<X0>, double *a2@<X8>, double a3@<D0>)
{
  double result;

  result = *a1 / a3;
  *a2 = result;
  return result;
}

double static Time.-= infix(_:_:)(double *a1, double a2)
{
  double result;

  result = *a1 - a2;
  *a1 = result;
  return result;
}

double static Time.*= infix(_:_:)(double *a1, double a2)
{
  double result;

  result = *a1 * a2;
  *a1 = result;
  return result;
}

double static Time./= infix(_:_:)(double *a1, double a2)
{
  double result;

  result = *a1 / a2;
  *a1 = result;
  return result;
}

void Time.hash(into:)()
{
  Swift::UInt64 *v0;
  Swift::UInt64 v1;

  if ((*v0 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v1 = *v0;
  else
    v1 = 0;
  Hasher._combine(_:)(v1);
}

Swift::Int Time.hashValue.getter()
{
  Swift::UInt64 *v0;
  Swift::UInt64 v1;
  Swift::UInt64 v2;

  v1 = *v0;
  Hasher.init(_seed:)();
  if ((v1 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v2 = v1;
  else
    v2 = 0;
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

unint64_t lazy protocol witness table accessor for type Time and conformance Time()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Time and conformance Time;
  if (!lazy protocol witness table cache variable for type Time and conformance Time)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Time, &type metadata for Time);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Time and conformance Time);
  }
  return result;
}

ValueMetadata *type metadata accessor for Time()
{
  return &type metadata for Time;
}

uint64_t static _VectorMath.+ infix(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  return static _VectorMath.+ infix(_:_:)(a1, a2, a3, a4, static _VectorMath.+= infix(_:_:), a5);
}

void static _VectorMath.- prefix(_:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 16))(a3, a1, a2);
  _VectorMath.negate()();
}

double _VectorMath.magnitude.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  double v6;
  uint64_t v7;
  char *v8;
  uint64_t AssociatedConformanceWitness;
  double v10;
  uint64_t v12;

  v3 = *(_QWORD *)(a2 + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v8 = (char *)&v12 - v7;
  (*(void (**)(uint64_t, uint64_t, double))(v3 + 24))(a1, v3, v6);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v10 = (*(double (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 24))(AssociatedTypeWitness, AssociatedConformanceWitness);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v8, AssociatedTypeWitness);
  return sqrt(v10);
}

Swift::Void __swiftcall _VectorMath.negate()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  void (*v14)(char *, uint64_t);
  uint64_t v15;

  v2 = v0;
  v3 = *(_QWORD *)(v1 + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v15 - v9;
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)&v15 - v12;
  swift_getAssociatedConformanceWitness();
  dispatch thunk of IteratorProtocol.next()();
  (*(void (**)(uint64_t, uint64_t))(v3 + 24))(v2, v3);
  dispatch thunk of static AdditiveArithmetic.- infix(_:_:)();
  v14 = *(void (**)(char *, uint64_t))(v5 + 8);
  v14(v7, AssociatedTypeWitness);
  v14(v10, AssociatedTypeWitness);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 32))(v13, v2, v3);
}

uint64_t static _VectorMath.+= infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return static _VectorMath.+= infix(_:_:)(a1, a2, a3, a4, (void (*)(uint64_t, _BYTE *, uint64_t, _QWORD))MEMORY[0x24BEE2F78]);
}

uint64_t static _VectorMath.-= infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return static _VectorMath.+= infix(_:_:)(a1, a2, a3, a4, (void (*)(uint64_t, _BYTE *, uint64_t, _QWORD))MEMORY[0x24BEE2F80]);
}

uint64_t static _VectorMath.+= infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t, _BYTE *, uint64_t, _QWORD))
{
  uint64_t v7;
  uint64_t AssociatedTypeWitness;
  uint64_t v9;
  double v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t (*v13)(_BYTE *, _QWORD);
  uint64_t v14;
  uint64_t v15;
  uint64_t AssociatedConformanceWitness;
  _BYTE v18[32];

  v7 = *(_QWORD *)(a4 + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v9 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v10 = MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v12 = &v18[-v11];
  (*(void (**)(uint64_t, uint64_t, double))(v7 + 24))(a3, v7, v10);
  v13 = (uint64_t (*)(_BYTE *, _QWORD))(*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v7 + 40))(v18, a3, v7);
  v15 = v14;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  a5(v15, v12, AssociatedTypeWitness, *(_QWORD *)(AssociatedConformanceWitness + 8));
  (*(void (**)(_BYTE *, uint64_t))(v9 + 8))(v12, AssociatedTypeWitness);
  return v13(v18, 0);
}

uint64_t static _VectorMath.- infix(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  return static _VectorMath.+ infix(_:_:)(a1, a2, a3, a4, static _VectorMath.-= infix(_:_:), a5);
}

uint64_t static _VectorMath.+ infix(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t (*a5)(uint64_t, uint64_t, uint64_t, uint64_t)@<X4>, uint64_t a6@<X8>)
{
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 16))(a6, a1);
  return a5(a6, a2, a3, a4);
}

uint64_t static _VectorMath.*= infix(_:_:)(double a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t (*v5)(_BYTE *, _QWORD);
  uint64_t AssociatedConformanceWitness;
  void (*v7)(uint64_t, uint64_t, double);
  uint64_t v8;
  _BYTE v10[32];

  v5 = (uint64_t (*)(_BYTE *, _QWORD))(*(uint64_t (**)(_BYTE *))(*(_QWORD *)(a4 + 8) + 40))(v10);
  swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v7 = *(void (**)(uint64_t, uint64_t, double))(AssociatedConformanceWitness + 16);
  v8 = swift_checkMetadataState();
  v7(v8, AssociatedConformanceWitness, a1);
  return v5(v10, 0);
}

uint64_t static _VectorMath.* infix(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>, double a5@<D0>)
{
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 16))(a4, a1, a2);
  return static _VectorMath.*= infix(_:_:)(a5, a4, a2, a3);
}

uint64_t static _VectorMath./= infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, double a4)
{
  return static _VectorMath.*= infix(_:_:)(1.0 / a4, a1, a2, a3);
}

uint64_t static _VectorMath./ infix(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>, double a5@<D0>)
{
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 16))(a4, a1, a2);
  return static _VectorMath.*= infix(_:_:)(1.0 / a5, a4, a2, a3);
}

Swift::Void __swiftcall _VectorMath.normalize()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  double v8;
  uint64_t v9;
  char *v10;
  uint64_t AssociatedConformanceWitness;
  double v12;
  uint64_t v13;

  v3 = v1;
  v4 = v0;
  v5 = *(_QWORD *)(v1 + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v7 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v8 = MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v10 = (char *)&v13 - v9;
  (*(void (**)(uint64_t, uint64_t, double))(v5 + 24))(v4, v5, v8);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v12 = (*(double (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 24))(AssociatedTypeWitness, AssociatedConformanceWitness);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v10, AssociatedTypeWitness);
  if (v12 != 0.0)
    static _VectorMath.*= infix(_:_:)(1.0 / sqrt(v12), v2, v4, v3);
}

void _VectorMath.normalized()(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 16))(a2, v2, a1);
  _VectorMath.normalize()();
}

BOOL static Prominence.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

void Prominence.hash(into:)()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0);
}

Swift::Int Prominence.hashValue.getter()
{
  unsigned __int8 *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t EnvironmentValues.headerProminence.getter@<X0>(char *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;

  v3 = *v1;
  if (v1[1])
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v3, a1);
    swift_release_n();
  }
  else
  {
    v4 = swift_retain_n();
    specialized closure #1 in PropertyList.subscript.getter(v4, a1);
  }
  return swift_release_n();
}

uint64_t key path getter for EnvironmentValues.headerProminence : EnvironmentValues@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  char v6;

  v3 = *a1;
  if (a1[1])
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v3, &v6);
    swift_release_n();
  }
  else
  {
    v4 = swift_retain_n();
    specialized closure #1 in PropertyList.subscript.getter(v4, &v6);
  }
  result = swift_release_n();
  *a2 = v6;
  return result;
}

uint64_t key path setter for EnvironmentValues.headerProminence : EnvironmentValues(char *a1)
{
  char v2;

  v2 = *a1;
  return EnvironmentValues.headerProminence.setter(&v2);
}

uint64_t EnvironmentValues.headerProminence.setter(char *a1)
{
  uint64_t *v1;
  char v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *a1;
  v3 = *v1;
  swift_retain_n();
  specialized closure #1 in PropertyList.subscript.setter(v1, v2);
  swift_release();
  if (v1[1])
  {
    v4 = *v1;
    swift_retain();
    swift_retain();
    specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v3, v4);
    swift_release();
    swift_release();
  }
  return swift_release();
}

uint64_t (*EnvironmentValues.headerProminence.modify(uint64_t a1))(uint64_t a1)
{
  uint64_t *v1;
  char *v2;
  uint64_t v3;
  Swift::Int v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v9;

  v2 = (char *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = v1;
  v3 = *v1;
  if (v1[1])
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v3, v2);
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<HeaderProminenceKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<HeaderProminenceKey>, (uint64_t)&protocol witness table for HeaderProminenceKey, (uint64_t (*)(_QWORD, ValueMetadata *))type metadata accessor for EnvironmentPropertyKey);
    BloomFilter.init(hashValue:)(v4);
    v5 = swift_retain_n();
    v6 = specialized find1<A>(_:key:filter:)(v5, v9);
    if (v6)
      v7 = *(_BYTE *)(v6 + 72);
    else
      v7 = 0;
    *v2 = v7;
  }
  swift_release_n();
  return EnvironmentValues.headerProminence.modify;
}

uint64_t EnvironmentValues.headerProminence.modify(uint64_t a1)
{
  uint64_t *v2;
  char v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *(uint64_t **)(a1 + 16);
  v3 = *(_BYTE *)(a1 + 24);
  v4 = *v2;
  swift_retain_n();
  specialized closure #1 in PropertyList.subscript.setter(v2, v3);
  swift_release();
  if (v2[1])
  {
    v5 = **(_QWORD **)(a1 + 16);
    swift_retain();
    swift_retain();
    specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v4, v5);
    swift_release();
    swift_release();
  }
  return swift_release();
}

uint64_t View.headerProminence(_:)(char *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char v13;
  uint64_t *KeyPath;
  uint64_t v15;
  _QWORD v18[2];
  char v19;

  type metadata accessor for _EnvironmentKeyWritingModifier<Prominence>(255, a2, a3, a4);
  v9 = type metadata accessor for ModifiedContent(0, a2, v7, v8);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v18[-1] - v11;
  v13 = *a1;
  KeyPath = (uint64_t *)swift_getKeyPath();
  v19 = v13;
  View.environment<A>(_:_:)(KeyPath, (uint64_t)&v19, a2, a3);
  swift_release();
  v19 = v13;
  v18[0] = a3;
  v18[1] = &protocol witness table for _EnvironmentKeyWritingModifier<A>;
  v15 = MEMORY[0x23B7C9C04]("I{:\x1B̧\t", v9, v18);
  View._trait<A>(_:_:)((uint64_t)&type metadata for HeaderProminenceKey, (uint64_t)&v19, v9, (uint64_t)&type metadata for HeaderProminenceKey, v15, (uint64_t)&protocol witness table for HeaderProminenceKey);
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
}

void static HeaderProminenceKey.defaultValue.getter(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

uint64_t View.controlProminence(_:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 16))(a2, v2, a1);
}

void EnvironmentValues.controlProminence.getter(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

uint64_t (*EnvironmentValues.controlProminence.modify(_BYTE *a1))(_QWORD, _QWORD)
{
  *a1 = 0;
  return _ViewInputs.base.modify;
}

uint64_t View.prominence(_:)(char *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char v5;

  v5 = *a1;
  return View.headerProminence(_:)(&v5, a2, a3, a4);
}

void type metadata accessor for _EnvironmentKeyWritingModifier<Prominence>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  uint64_t v5;

  if (!lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Prominence>)
  {
    v4 = type metadata accessor for _EnvironmentKeyWritingModifier(0, (uint64_t)&type metadata for Prominence, a3, a4);
    if (!v5)
      atomic_store(v4, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Prominence>);
  }
}

uint64_t sub_2350CDF3C(char *a1)
{
  char v2;

  v2 = *a1;
  return EnvironmentValues.headerProminence.setter(&v2);
}

unint64_t lazy protocol witness table accessor for type Prominence and conformance Prominence()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Prominence and conformance Prominence;
  if (!lazy protocol witness table cache variable for type Prominence and conformance Prominence)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Prominence, &type metadata for Prominence);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Prominence and conformance Prominence);
  }
  return result;
}

void sub_2350CDFB8(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

uint64_t storeEnumTagSinglePayload for Prominence(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_2350CE010 + 4 * byte_2352C79F5[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_2350CE044 + 4 * asc_2352C79F0[v4]))();
}

uint64_t sub_2350CE044(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_2350CE04C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x2350CE054);
  return result;
}

uint64_t sub_2350CE060(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x2350CE068);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_2350CE06C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_2350CE074(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for Prominence()
{
  return &type metadata for Prominence;
}

ValueMetadata *type metadata accessor for HeaderProminenceKey()
{
  return &type metadata for HeaderProminenceKey;
}

uint64_t sub_2350CE0A0(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v13[2];
  _QWORD v14[2];

  v4 = *a1;
  v5 = a1[1];
  type metadata accessor for _EnvironmentKeyWritingModifier<Prominence>(255, a2, a3, a4);
  v8 = type metadata accessor for ModifiedContent(255, v4, v6, v7);
  type metadata accessor for EnvironmentPropertyKey<HeaderProminenceKey>(255, &lazy cache variable for type metadata for _TraitWritingModifier<HeaderProminenceKey>, (uint64_t)&protocol witness table for HeaderProminenceKey, (uint64_t (*)(_QWORD, ValueMetadata *))type metadata accessor for _TraitWritingModifier);
  v11 = type metadata accessor for ModifiedContent(255, v8, v9, v10);
  v14[0] = v5;
  v14[1] = &protocol witness table for _EnvironmentKeyWritingModifier<A>;
  v13[0] = MEMORY[0x23B7C9C04]("I{:\x1B̧\t", v8, v14);
  v13[1] = &protocol witness table for _TraitWritingModifier<A>;
  return MEMORY[0x23B7C9C04]("I{:\x1B̧\t", v11, v13);
}

void type metadata accessor for EnvironmentPropertyKey<HeaderProminenceKey>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(_QWORD, ValueMetadata *))
{
  unint64_t v5;
  uint64_t v6;

  if (!*a2)
  {
    v5 = a4(0, &type metadata for HeaderProminenceKey);
    if (!v6)
      atomic_store(v5, a2);
  }
}

uint64_t sub_2350CE1A4(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

uint64_t *printGestures(data:host:)(void (*a1)(_QWORD *__return_ptr, uint64_t *), uint64_t a2, uint64_t a3)
{
  uint64_t *result;
  Swift::String v6;
  Swift::String v7;
  _QWORD v8[2];
  char v9;
  _BYTE v10[144];
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  _OWORD v20[9];
  _QWORD v21[18];
  uint64_t v22[18];
  _OWORD v23[9];

  if (one-time initialization token for _eventDebugTriggers != -1)
    swift_once();
  result = (uint64_t *)swift_beginAccess();
  if ((_eventDebugTriggers.rawValue & 0x20) != 0)
  {
    a1(v21, result);
    outlined init with take of GestureDebug.Data?((uint64_t)v21, (uint64_t)v22);
    outlined init with take of GestureDebug.Data?((uint64_t)v22, (uint64_t)v23);
    result = (uint64_t *)_s7SwiftUI12GestureDebugO4DataVSgWOg((uint64_t)v23);
    if ((_DWORD)result != 1)
    {
      *(_QWORD *)&v20[0] = 0x5345525554534547;
      *((_QWORD *)&v20[0] + 1) = 0xEA00000000002820;
      v6._countAndFlagsBits = succinctDescription(of:)(a3);
      String.append(_:)(v6);
      swift_bridgeObjectRelease();
      v7._countAndFlagsBits = 41;
      v7._object = (void *)0xE100000000000000;
      String.append(_:)(v7);
      specialized static Log.eventDebug(_:)(0x5345525554534547, 0xEA00000000002820);
      swift_bridgeObjectRelease();
      v17 = v23[6];
      v18 = v23[7];
      v19 = v23[8];
      v13 = v23[2];
      v14 = v23[3];
      v15 = v23[4];
      v16 = v23[5];
      v11 = v23[0];
      v12 = v23[1];
      _s7SwiftUI15TextRenderLayer33_FB86B422571764190CF2C7C4C92612D4LLC6LayoutVSgWOi0_(v20);
      outlined init with take of GestureDebug.Data?((uint64_t)v20, (uint64_t)v10);
      v8[0] = 0;
      v8[1] = 0xE000000000000000;
      v9 = v23[0];
      GestureDebug.Data.printSubtree(parent:indent:)((uint64_t)v10, (uint64_t)v8);
      specialized static Log.eventDebug(_:)(0, 0xE000000000000000);
      return outlined release of GestureDebug.Data?(v22);
    }
  }
  return result;
}

uint64_t specialized Sequence.forEach(_:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int64_t v7;
  uint64_t result;
  int64_t v9;
  unint64_t v10;
  unint64_t v11;
  int64_t v12;
  unint64_t v13;
  int64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  __int128 v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  _OWORD *v40;
  char v41;
  uint64_t v42;
  _QWORD v43[3];
  uint64_t v44;
  uint64_t v45;
  __int128 v46;
  _OWORD v47[2];
  uint64_t v48;
  __int128 v49;
  _OWORD v50[2];
  uint64_t v51;
  _OWORD *v52;

  v38 = type metadata accessor for OSSignpostID();
  v37 = *(_QWORD *)(v38 - 8);
  MEMORY[0x24BDAC7A8](v38);
  v39 = (char *)&v33 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = a1 + 64;
  v4 = 1 << *(_BYTE *)(a1 + 32);
  v5 = -1;
  if (v4 < 64)
    v5 = ~(-1 << v4);
  v6 = v5 & *(_QWORD *)(a1 + 64);
  v7 = (unint64_t)(v4 + 63) >> 6;
  v52 = v50;
  v40 = v47;
  result = swift_bridgeObjectRetain();
  v9 = 0;
  v34 = xmmword_235283260;
  v36 = a1;
  v35 = a1 + 64;
  while (1)
  {
    if (v6)
    {
      v10 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      v11 = v10 | (v9 << 6);
      goto LABEL_23;
    }
    v12 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v12 >= v7)
      return swift_release();
    v13 = *(_QWORD *)(v3 + 8 * v12);
    ++v9;
    if (!v13)
    {
      v9 = v12 + 1;
      if (v12 + 1 >= v7)
        return swift_release();
      v13 = *(_QWORD *)(v3 + 8 * v9);
      if (!v13)
      {
        v9 = v12 + 2;
        if (v12 + 2 >= v7)
          return swift_release();
        v13 = *(_QWORD *)(v3 + 8 * v9);
        if (!v13)
        {
          v9 = v12 + 3;
          if (v12 + 3 >= v7)
            return swift_release();
          v13 = *(_QWORD *)(v3 + 8 * v9);
          if (!v13)
            break;
        }
      }
    }
LABEL_22:
    v6 = (v13 - 1) & v13;
    v11 = __clz(__rbit64(v13)) + (v9 << 6);
LABEL_23:
    v15 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * v11);
    v16 = *v15;
    v17 = v15[1];
    outlined init with copy of AnyTrackedValue(*(_QWORD *)(a1 + 56) + 40 * v11, (uint64_t)v52);
    *(_QWORD *)&v49 = v16;
    *((_QWORD *)&v49 + 1) = v17;
    v46 = v49;
    v47[0] = v50[0];
    v47[1] = v50[1];
    v48 = v51;
    static os_signpost_type_t.event.getter();
    outlined init with copy of AnyTrackedValue((uint64_t)v40, (uint64_t)v43);
    static os_signpost_type_t.event.getter();
    if (kdebug_is_enabled())
    {
      if (one-time initialization token for _signpostLog != -1)
        swift_once();
      if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
      {
        static OSSignpostID.exclusive.getter();
        _sSay7SwiftUI20ScrollableCollection_pGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<CVarArg>, (unint64_t *)&lazy cache variable for type metadata for CVarArg, MEMORY[0x24BEE45D0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
        v18 = swift_allocObject();
        *(_OWORD *)(v18 + 16) = v34;
        v42 = v16;
        type metadata accessor for Any.Type();
        v19 = String.init<A>(describing:)();
        v20 = v7;
        v22 = v21;
        *(_QWORD *)(v18 + 56) = MEMORY[0x24BEE0D00];
        v23 = lazy protocol witness table accessor for type String and conformance String();
        *(_QWORD *)(v18 + 64) = v23;
        *(_QWORD *)(v18 + 32) = v19;
        *(_QWORD *)(v18 + 40) = v22;
        v25 = v44;
        v24 = v45;
        __swift_project_boxed_opaque_existential_1(v43, v44);
        v26 = v25;
        v7 = v20;
        (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v24 + 8))(&v42, v26, v24);
        v41 = v42;
        v27 = String.init<A>(describing:)();
        *(_QWORD *)(v18 + 96) = MEMORY[0x24BEE0D00];
        *(_QWORD *)(v18 + 104) = v23;
        *(_QWORD *)(v18 + 72) = v27;
        *(_QWORD *)(v18 + 80) = v28;
        v29 = v44;
        v30 = v45;
        __swift_project_boxed_opaque_existential_1(v43, v44);
        (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v30 + 16))(&v42, v29, v30);
        v31 = v42;
        *(_QWORD *)(v18 + 136) = MEMORY[0x24BEE13C8];
        *(_QWORD *)(v18 + 144) = MEMORY[0x24BEE1448];
        *(_QWORD *)(v18 + 112) = v31;
        v32 = v39;
        os_signpost(_:dso:log:name:signpostID:_:_:)();
        a1 = v36;
        (*(void (**)(char *, uint64_t))(v37 + 8))(v32, v38);
        v3 = v35;
        swift_bridgeObjectRelease();
      }
    }
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v43);
    result = outlined destroy of (key: EventID, value: EventType)((uint64_t)&v46);
  }
  v14 = v12 + 4;
  if (v14 >= v7)
    return swift_release();
  v13 = *(_QWORD *)(v3 + 8 * v14);
  if (v13)
  {
    v9 = v14;
    goto LABEL_22;
  }
  while (1)
  {
    v9 = v14 + 1;
    if (__OFADD__(v14, 1))
      break;
    if (v9 >= v7)
      return swift_release();
    v13 = *(_QWORD *)(v3 + 8 * v9);
    ++v14;
    if (v13)
      goto LABEL_22;
  }
LABEL_30:
  __break(1u);
  return result;
}

Swift::Void __swiftcall printEvents(_:)(Swift::OpaquePointer a1)
{
  Swift::String v1;
  Swift::String v2;

  specialized Sequence.forEach(_:)((uint64_t)a1._rawValue);
  if (one-time initialization token for _eventDebugTriggers != -1)
    swift_once();
  swift_beginAccess();
  if ((_eventDebugTriggers.rawValue & 4) != 0)
  {
    type metadata accessor for ScrollStateRequest(0, (unint64_t *)&lazy cache variable for type metadata for EventType);
    lazy protocol witness table accessor for type EventID and conformance EventID();
    v1._countAndFlagsBits = Dictionary.description.getter();
    String.append(_:)(v1);
    swift_bridgeObjectRelease();
    v2._countAndFlagsBits = 10;
    v2._object = (void *)0xE100000000000000;
    String.append(_:)(v2);
    specialized static Log.eventDebug(_:)(0x2053544E455645, 0xE700000000000000);
    swift_bridgeObjectRelease();
  }
}

Swift::Void __swiftcall printEventBindings(_:)(Swift::OpaquePointer a1)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  int64_t v4;
  unint64_t *v5;
  unint64_t v6;
  int64_t v7;
  unint64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  Swift::String v14;
  Swift::String v15;
  Swift::String v16;
  char v17;
  uint64_t v18;
  uint64_t (*v19)(uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  void *v24;
  void *v25;
  Swift::String v26;
  Swift::String v27;
  unint64_t v28;
  uint64_t v29;
  void *v30;
  NSObject *v31;
  os_log_type_t v32;
  uint64_t v33;
  unint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  int64_t v38;
  uint64_t v40;
  int64_t v41;
  __int128 v42[2];
  uint64_t v43;
  uint64_t v44;
  Swift::String v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;

  if (one-time initialization token for _eventDebugTriggers != -1)
    goto LABEL_42;
  while (1)
  {
    swift_beginAccess();
    if ((_eventDebugTriggers.rawValue & 8) == 0)
      return;
    specialized static Log.eventDebug(_:)(0x53474E49444E4942, 0xE800000000000000);
    v37 = (char *)a1._rawValue + 64;
    v1 = 1 << *((_BYTE *)a1._rawValue + 32);
    v2 = -1;
    if (v1 < 64)
      v2 = ~(-1 << v1);
    v3 = v2 & *((_QWORD *)a1._rawValue + 8);
    v38 = (unint64_t)(v1 + 63) >> 6;
    swift_bridgeObjectRetain();
    v4 = 0;
    v5 = &lazy cache variable for type metadata for CustomStringConvertible;
LABEL_7:
    if (v3)
    {
      v40 = (v3 - 1) & v3;
      v41 = v4;
      v6 = __clz(__rbit64(v3)) | (v4 << 6);
      goto LABEL_23;
    }
    v7 = v4 + 1;
    if (__OFADD__(v4, 1))
    {
      __break(1u);
      goto LABEL_41;
    }
    if (v7 >= v38)
      break;
    v8 = *(_QWORD *)&v37[8 * v7];
    v9 = v4 + 1;
    if (v8)
      goto LABEL_22;
    v9 = v4 + 2;
    if (v4 + 2 >= v38)
      break;
    v8 = *(_QWORD *)&v37[8 * v9];
    if (v8)
      goto LABEL_22;
    v9 = v4 + 3;
    if (v4 + 3 >= v38)
      break;
    v8 = *(_QWORD *)&v37[8 * v9];
    if (v8)
      goto LABEL_22;
    v10 = v4 + 4;
    if (v4 + 4 >= v38)
      break;
    v8 = *(_QWORD *)&v37[8 * v10];
    if (v8)
    {
      v9 = v4 + 4;
LABEL_22:
      v40 = (v8 - 1) & v8;
      v41 = v9;
      v6 = __clz(__rbit64(v8)) + (v9 << 6);
LABEL_23:
      v11 = *(_QWORD *)(*((_QWORD *)a1._rawValue + 6) + 16 * v6 + 8);
      v12 = *(_QWORD *)(*((_QWORD *)a1._rawValue + 7) + 8 * v6);
      swift_retain();
      v45._countAndFlagsBits = _typeName(_:qualified:)();
      v45._object = v13;
      v14._countAndFlagsBits = 35;
      v14._object = (void *)0xE100000000000000;
      String.append(_:)(v14);
      *(_QWORD *)&v42[0] = v11;
      v15._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v15);
      swift_bridgeObjectRelease();
      v16._countAndFlagsBits = 0x5B203E2D20;
      v16._object = (void *)0xE500000000000000;
      String.append(_:)(v16);
      specialized static Log.eventDebug(_:)(v45._countAndFlagsBits, (unint64_t)v45._object);
      swift_bridgeObjectRelease();
      swift_retain();
      v17 = 1;
      v18 = v12;
      while (1)
      {
        if ((v17 & 1) != 0)
        {
          swift_retain();
          if (!v18)
            goto LABEL_6;
        }
        else if (!v18
               || (v19 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 88),
                   v20 = swift_retain(),
                   v21 = v19(v20),
                   swift_retain(),
                   swift_release_n(),
                   (v18 = v21) == 0))
        {
LABEL_6:
          specialized static Log.eventDebug(_:)(2653, 0xE200000000000000);
          swift_release();
          v3 = v40;
          v4 = v41;
          goto LABEL_7;
        }
        v47 = 8224;
        v48 = 0xE200000000000000;
        v44 = v18;
        type metadata accessor for ScrollStateRequest(0, v5);
        swift_retain_n();
        if (swift_dynamicCast())
        {
          outlined init with take of ScrollStateRequest(v42, (uint64_t)&v45);
          __swift_project_boxed_opaque_existential_1(&v45, v46);
          v22 = dispatch thunk of CustomStringConvertible.description.getter();
          v24 = v23;
          __swift_destroy_boxed_opaque_existential_1((uint64_t)&v45);
        }
        else
        {
          v43 = 0;
          memset(v42, 0, sizeof(v42));
          outlined destroy of CustomStringConvertible?((uint64_t)v42);
          swift_getObjectType();
          v22 = AGTypeID.description.getter();
          v24 = v25;
        }
        v45._countAndFlagsBits = 0;
        v45._object = (void *)0xE000000000000000;
        v26._countAndFlagsBits = v22;
        v26._object = v24;
        String.append(_:)(v26);
        swift_bridgeObjectRelease();
        v27._countAndFlagsBits = 32;
        v27._object = (void *)0xE100000000000000;
        String.append(_:)(v27);
        *(_QWORD *)&v42[0] = v18;
        _print_unlocked<A, B>(_:_:)();
        swift_release_n();
        String.append(_:)(v45);
        swift_bridgeObjectRelease();
        v29 = v47;
        v28 = v48;
        if (one-time initialization token for eventDebuggingLog != -1)
          swift_once();
        swift_beginAccess();
        v30 = (void *)static Log.eventDebuggingLog;
        swift_bridgeObjectRetain_n();
        v31 = v30;
        v32 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v31, v32))
        {
          v33 = swift_slowAlloc();
          v34 = v5;
          v35 = swift_slowAlloc();
          v45._countAndFlagsBits = v35;
          *(_DWORD *)v33 = 136315138;
          swift_bridgeObjectRetain();
          *(_QWORD *)(v33 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v29, v28, &v45._countAndFlagsBits);
          swift_bridgeObjectRelease_n();
          _os_log_impl(&dword_2349C4000, v31, v32, "%s", (uint8_t *)v33, 0xCu);
          swift_arrayDestroy();
          v36 = v35;
          v5 = v34;
          MEMORY[0x23B7C9D54](v36, -1, -1);
          MEMORY[0x23B7C9D54](v33, -1, -1);
          swift_release();
          swift_bridgeObjectRelease();
        }
        else
        {
          swift_release();
          swift_bridgeObjectRelease_n();
        }

        v17 = 0;
      }
    }
    while (1)
    {
      v9 = v10 + 1;
      if (__OFADD__(v10, 1))
        break;
      if (v9 >= v38)
        goto LABEL_38;
      v8 = *(_QWORD *)&v37[8 * v9];
      ++v10;
      if (v8)
        goto LABEL_22;
    }
LABEL_41:
    __break(1u);
LABEL_42:
    swift_once();
  }
LABEL_38:
  swift_release();
}

uint64_t ResponderNode.log(action:data:)(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  Swift::String v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  Swift::String v14;
  Swift::String v15;
  Swift::String v16;
  Swift::String v17;
  Swift::String v18;
  Swift::String v19;
  Swift::String v20;
  Swift::String v21;
  Swift::String v22;
  uint64_t v23;
  _OWORD v24[2];
  uint64_t v25;
  unint64_t v26;

  v4 = v3;
  v25 = a1;
  v26 = a2;
  swift_bridgeObjectRetain();
  if (String.count.getter() <= 11)
  {
    result = String.count.getter();
    if (__OFSUB__(12, result))
    {
      __break(1u);
      return result;
    }
    v7._countAndFlagsBits = MEMORY[0x23B7C5FA4](32, 0xE100000000000000, 12 - result);
    String.append(_:)(v7);
    swift_bridgeObjectRelease();
  }
  type metadata accessor for ViewResponder();
  v8 = swift_dynamicCastClass();
  if (v8)
  {
    v9 = v8 + 16;
    swift_beginAccess();
    v10 = MEMORY[0x23B7C9E44](v9);
    swift_retain();
    v11 = succinctDescription(of:)(v10);
    v13 = v12;
    swift_unknownObjectRelease();
    swift_release();
  }
  else
  {
    v13 = (void *)0xE300000000000000;
    v11 = 7104878;
  }
  *(_QWORD *)&v24[0] = 0;
  *((_QWORD *)&v24[0] + 1) = 0xE000000000000000;
  v14._countAndFlagsBits = 32;
  v14._object = (void *)0xE100000000000000;
  String.append(_:)(v14);
  v15._countAndFlagsBits = v11;
  v15._object = v13;
  String.append(_:)(v15);
  swift_bridgeObjectRelease();
  v16._countAndFlagsBits = 540945696;
  v16._object = (void *)0xE400000000000000;
  String.append(_:)(v16);
  v17._countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v17);
  swift_bridgeObjectRelease();
  v18._countAndFlagsBits = 32;
  v18._object = (void *)0xE100000000000000;
  String.append(_:)(v18);
  v22._countAndFlagsBits = v4;
  _print_unlocked<A, B>(_:_:)();
  v19._countAndFlagsBits = 32;
  v19._object = (void *)0xE100000000000000;
  String.append(_:)(v19);
  v20._countAndFlagsBits = 0;
  v20._object = (void *)0xE000000000000000;
  String.append(_:)(v20);
  swift_bridgeObjectRelease();
  outlined init with copy of Any?(a3, (uint64_t)&v22);
  if (v23)
  {
    outlined init with take of Any(&v22, v24);
    v22._countAndFlagsBits = 0;
    v22._object = (void *)0xE000000000000000;
    v21._countAndFlagsBits = 32;
    v21._object = (void *)0xE100000000000000;
    String.append(_:)(v21);
    _print_unlocked<A, B>(_:_:)();
    String.append(_:)(v22);
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v24);
  }
  else
  {
    outlined destroy of Any?((uint64_t)&v22);
  }
  specialized static Log.eventDebug(_:)(v25, v26);
  return swift_bridgeObjectRelease();
}

uint64_t _EventDebugTriggers.rawValue.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

SwiftUI::_EventDebugTriggers __swiftcall _EventDebugTriggers.init(rawValue:)(SwiftUI::_EventDebugTriggers rawValue)
{
  SwiftUI::_EventDebugTriggers *v1;

  v1->rawValue = rawValue.rawValue;
  return rawValue;
}

void static _EventDebugTriggers.responders.getter(_QWORD *a1@<X8>)
{
  *a1 = 2;
}

void static _EventDebugTriggers.sendEvents.getter(_QWORD *a1@<X8>)
{
  *a1 = 4;
}

void static _EventDebugTriggers.eventBindings.getter(_QWORD *a1@<X8>)
{
  *a1 = 8;
}

void static _EventDebugTriggers.eventPhases.getter(_QWORD *a1@<X8>)
{
  *a1 = 16;
}

void static _EventDebugTriggers.gestures.getter(_QWORD *a1@<X8>)
{
  *a1 = 32;
}

void static _EventDebugTriggers.hitTest.getter(_QWORD *a1@<X8>)
{
  *a1 = 64;
}

void static _EventDebugTriggers.all.getter(_QWORD *a1@<X8>)
{
  *a1 = -1;
}

SwiftUI::_EventDebugTriggers __swiftcall _EventDebugTriggers.init(environmentString:)(Swift::String environmentString)
{
  uint64_t *v1;
  uint64_t *v2;
  Swift::String_optional v3;
  uint64_t countAndFlagsBits;
  void *object;
  uint64_t v6;
  Swift::String_optional v7;
  char v8;
  SwiftUI::_EventDebugTriggers result;

  v2 = v1;
  String.lowercased()();
  swift_bridgeObjectRelease();
  v3 = String.Iterator.next()();
  if (v3.value._object)
  {
    countAndFlagsBits = v3.value._countAndFlagsBits;
    object = v3.value._object;
    v6 = 0;
    while (1)
    {
      if (countAndFlagsBits == 42 && object == (void *)0xE100000000000000
        || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        v6 = -1;
      }
      else if (countAndFlagsBits == 114 && object == (void *)0xE100000000000000
             || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        v6 |= 2uLL;
      }
      else if (countAndFlagsBits == 101 && object == (void *)0xE100000000000000
             || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        v6 |= 4uLL;
      }
      else if (countAndFlagsBits == 98 && object == (void *)0xE100000000000000
             || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        v6 |= 8uLL;
      }
      else if (countAndFlagsBits == 112 && object == (void *)0xE100000000000000
             || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        v6 |= 0x10uLL;
      }
      else if (countAndFlagsBits == 103 && object == (void *)0xE100000000000000
             || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        v6 |= 0x20uLL;
      }
      else
      {
        if (countAndFlagsBits == 104 && object == (void *)0xE100000000000000)
        {
          swift_bridgeObjectRelease();
LABEL_32:
          v6 |= 0x40uLL;
          goto LABEL_4;
        }
        v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if ((v8 & 1) != 0)
          goto LABEL_32;
      }
LABEL_4:
      v7 = String.Iterator.next()();
      countAndFlagsBits = v7.value._countAndFlagsBits;
      object = v7.value._object;
      if (!v7.value._object)
        goto LABEL_34;
    }
  }
  v6 = 0;
LABEL_34:
  result.rawValue = swift_bridgeObjectRelease();
  *v2 = v6;
  return result;
}

void one-time initialization function for _eventDebugTriggers()
{
  uint64_t v0;
  uint64_t v1;
  id v2;
  void *v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  Swift::Int v8;
  Swift::Int v9;

  if (getenv("SWIFTUI_EVENT_DEBUG"))
  {
    v0 = String.init(cString:)();
  }
  else
  {
    v2 = objc_msgSend((id)objc_opt_self(), sel_standardUserDefaults);
    v3 = (void *)MEMORY[0x23B7C5DAC](0xD000000000000024, 0x80000002352E72C0);
    v4 = objc_msgSend(v2, sel_stringForKey_, v3);

    if (!v4)
    {
      v8 = 0;
      goto LABEL_6;
    }
    v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v7 = v6;

    v0 = v5;
    v1 = v7;
  }
  _EventDebugTriggers.init(environmentString:)(*(Swift::String *)&v0);
  v8 = v9;
LABEL_6:
  _eventDebugTriggers.rawValue = v8;
}

uint64_t outlined init with take of GestureDebug.Data?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for GraphicsContext.ResolvedShading?(0, &lazy cache variable for type metadata for GestureDebug.Data?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t _eventDebugTriggers.getter@<X0>(SwiftUI::_EventDebugTriggers *a1@<X8>)
{
  uint64_t result;

  if (one-time initialization token for _eventDebugTriggers != -1)
    swift_once();
  result = swift_beginAccess();
  a1->rawValue = _eventDebugTriggers.rawValue;
  return result;
}

uint64_t _eventDebugTriggers.setter(Swift::Int *a1)
{
  Swift::Int v1;
  uint64_t result;

  v1 = *a1;
  if (one-time initialization token for _eventDebugTriggers != -1)
    swift_once();
  result = swift_beginAccess();
  _eventDebugTriggers.rawValue = v1;
  return result;
}

uint64_t (*_eventDebugTriggers.modify())()
{
  if (one-time initialization token for _eventDebugTriggers != -1)
    swift_once();
  swift_beginAccess();
  return DisplayList.GraphicsRenderer.platformViewMode.modify;
}

uint64_t succinctDescription(of:)(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  void *v4;
  void *v6;
  Swift::String v7;
  Swift::String v8;
  __int128 v9[2];
  uint64_t v10;
  uint64_t v11;
  _QWORD v12[4];

  if (!a1)
    return 0x736F68206C696E28;
  v11 = a1;
  type metadata accessor for ScrollStateRequest(0, &lazy cache variable for type metadata for CustomStringConvertible);
  swift_unknownObjectRetain_n();
  if (swift_dynamicCast())
  {
    outlined init with take of ScrollStateRequest(v9, (uint64_t)v12);
    __swift_project_boxed_opaque_existential_1(v12, v12[3]);
    v2 = dispatch thunk of CustomStringConvertible.description.getter();
    v4 = v3;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v12);
  }
  else
  {
    v10 = 0;
    memset(v9, 0, sizeof(v9));
    outlined destroy of CustomStringConvertible?((uint64_t)v9);
    swift_getObjectType();
    v2 = AGTypeID.description.getter();
    v4 = v6;
  }
  v12[0] = 0;
  v12[1] = 0xE000000000000000;
  v7._countAndFlagsBits = v2;
  v7._object = v4;
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  v8._countAndFlagsBits = 32;
  v8._object = (void *)0xE100000000000000;
  String.append(_:)(v8);
  *(_QWORD *)&v9[0] = a1;
  _print_unlocked<A, B>(_:_:)();
  swift_unknownObjectRelease();
  return v12[0];
}

uint64_t _GestureInputs.InheritedPhase.description.getter()
{
  uint64_t *v0;
  uint64_t v1;
  Swift::String v2;
  Swift::String v3;
  Swift::String v4;

  v1 = *v0;
  if ((*v0 & 1) != 0)
  {
    v2._countAndFlagsBits = 0x2064656C696166;
    v2._object = (void *)0xE700000000000000;
    String.append(_:)(v2);
  }
  if ((v1 & 2) != 0)
  {
    v3._countAndFlagsBits = 0x20657669746361;
    v3._object = (void *)0xE700000000000000;
    String.append(_:)(v3);
  }
  swift_bridgeObjectRetain();
  v4._countAndFlagsBits = 93;
  v4._object = (void *)0xE100000000000000;
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  return 8283;
}

uint64_t outlined destroy of CustomStringConvertible?(uint64_t a1)
{
  uint64_t v2;

  _sSay7SwiftUI20ScrollableCollection_pGMaTm_0(0, &lazy cache variable for type metadata for CustomStringConvertible?, &lazy cache variable for type metadata for CustomStringConvertible, MEMORY[0x24BEE3560], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t lazy protocol witness table accessor for type _EventDebugTriggers and conformance _EventDebugTriggers()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _EventDebugTriggers and conformance _EventDebugTriggers;
  if (!lazy protocol witness table cache variable for type _EventDebugTriggers and conformance _EventDebugTriggers)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for _EventDebugTriggers, &type metadata for _EventDebugTriggers);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _EventDebugTriggers and conformance _EventDebugTriggers);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _EventDebugTriggers and conformance _EventDebugTriggers;
  if (!lazy protocol witness table cache variable for type _EventDebugTriggers and conformance _EventDebugTriggers)
  {
    result = MEMORY[0x23B7C9C04]("і:\x1BԽ\t", &type metadata for _EventDebugTriggers);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _EventDebugTriggers and conformance _EventDebugTriggers);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _EventDebugTriggers and conformance _EventDebugTriggers;
  if (!lazy protocol witness table cache variable for type _EventDebugTriggers and conformance _EventDebugTriggers)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for _EventDebugTriggers, &type metadata for _EventDebugTriggers);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _EventDebugTriggers and conformance _EventDebugTriggers);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _EventDebugTriggers and conformance _EventDebugTriggers;
  if (!lazy protocol witness table cache variable for type _EventDebugTriggers and conformance _EventDebugTriggers)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for _EventDebugTriggers, &type metadata for _EventDebugTriggers);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _EventDebugTriggers and conformance _EventDebugTriggers);
  }
  return result;
}

ValueMetadata *type metadata accessor for _EventDebugTriggers()
{
  return &type metadata for _EventDebugTriggers;
}

uint64_t specialized printGestures(data:host:)(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  __int128 *Value;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  Swift::String v12;
  Swift::String v13;
  _QWORD v14[2];
  char v15;
  _BYTE v16[144];
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  _OWORD v35[9];

  if (one-time initialization token for _eventDebugTriggers != -1)
    swift_once();
  result = swift_beginAccess();
  if ((_eventDebugTriggers.rawValue & 0x20) != 0)
  {
    result = *(unsigned int *)(a2 + 236);
    if ((_DWORD)result != *MEMORY[0x24BE096C0])
    {
      Value = (__int128 *)AGGraphGetValue();
      v26 = *Value;
      v6 = Value[4];
      v8 = Value[1];
      v7 = Value[2];
      v29 = Value[3];
      v30 = v6;
      v27 = v8;
      v28 = v7;
      v9 = Value[8];
      v11 = Value[5];
      v10 = Value[6];
      v33 = Value[7];
      v34 = v9;
      v31 = v11;
      v32 = v10;
      *(_QWORD *)&v35[0] = 0x5345525554534547;
      *((_QWORD *)&v35[0] + 1) = 0xEA00000000002820;
      outlined retain of GestureDebug.Data((uint64_t)&v26);
      v12._countAndFlagsBits = succinctDescription(of:)(a1);
      String.append(_:)(v12);
      swift_bridgeObjectRelease();
      v13._countAndFlagsBits = 41;
      v13._object = (void *)0xE100000000000000;
      String.append(_:)(v13);
      specialized static Log.eventDebug(_:)(*(uint64_t *)&v35[0], *((unint64_t *)&v35[0] + 1));
      swift_bridgeObjectRelease();
      v23 = v32;
      v24 = v33;
      v25 = v34;
      v19 = v28;
      v20 = v29;
      v21 = v30;
      v22 = v31;
      v17 = v26;
      v18 = v27;
      _s7SwiftUI15TextRenderLayer33_FB86B422571764190CF2C7C4C92612D4LLC6LayoutVSgWOi0_(v35);
      outlined init with take of GestureDebug.Data?((uint64_t)v35, (uint64_t)v16);
      v14[0] = 0;
      v14[1] = 0xE000000000000000;
      v15 = v26;
      GestureDebug.Data.printSubtree(parent:indent:)((uint64_t)v16, (uint64_t)v14);
      specialized static Log.eventDebug(_:)(0, 0xE000000000000000);
      return outlined release of GestureDebug.Data((uint64_t)&v26);
    }
  }
  return result;
}

{
  uint64_t result;
  __int128 *Value;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  Swift::String v12;
  Swift::String v13;
  _QWORD v14[2];
  char v15;
  _BYTE v16[144];
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  _OWORD v35[9];

  if (one-time initialization token for _eventDebugTriggers != -1)
    swift_once();
  result = swift_beginAccess();
  if ((_eventDebugTriggers.rawValue & 0x20) != 0)
  {
    result = *(unsigned int *)(a2 + 296);
    if ((_DWORD)result != *MEMORY[0x24BE096C0])
    {
      Value = (__int128 *)AGGraphGetValue();
      v26 = *Value;
      v6 = Value[4];
      v8 = Value[1];
      v7 = Value[2];
      v29 = Value[3];
      v30 = v6;
      v27 = v8;
      v28 = v7;
      v9 = Value[8];
      v11 = Value[5];
      v10 = Value[6];
      v33 = Value[7];
      v34 = v9;
      v31 = v11;
      v32 = v10;
      *(_QWORD *)&v35[0] = 0x5345525554534547;
      *((_QWORD *)&v35[0] + 1) = 0xEA00000000002820;
      outlined retain of GestureDebug.Data((uint64_t)&v26);
      v12._countAndFlagsBits = succinctDescription(of:)(a1);
      String.append(_:)(v12);
      swift_bridgeObjectRelease();
      v13._countAndFlagsBits = 41;
      v13._object = (void *)0xE100000000000000;
      String.append(_:)(v13);
      specialized static Log.eventDebug(_:)(*(uint64_t *)&v35[0], *((unint64_t *)&v35[0] + 1));
      swift_bridgeObjectRelease();
      v23 = v32;
      v24 = v33;
      v25 = v34;
      v19 = v28;
      v20 = v29;
      v21 = v30;
      v22 = v31;
      v17 = v26;
      v18 = v27;
      _s7SwiftUI15TextRenderLayer33_FB86B422571764190CF2C7C4C92612D4LLC6LayoutVSgWOi0_(v35);
      outlined init with take of GestureDebug.Data?((uint64_t)v35, (uint64_t)v16);
      v14[0] = 0;
      v14[1] = 0xE000000000000000;
      v15 = v26;
      GestureDebug.Data.printSubtree(parent:indent:)((uint64_t)v16, (uint64_t)v14);
      specialized static Log.eventDebug(_:)(0, 0xE000000000000000);
      return outlined release of GestureDebug.Data((uint64_t)&v26);
    }
  }
  return result;
}

uint64_t _ColorMatrix.init(_:premultiplied:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _BYTE v4[84];

  specialized _ColorMatrix.init(_:premultiplied:)(a1);
  return outlined init with take of _ColorMatrix?((uint64_t)v4, a2);
}

__n128 static _ColorMatrix.* infix(_:_:)@<Q0>(_OWORD *a1@<X0>, _OWORD *a2@<X1>, uint64_t a3@<X8>, int8x16_t a4@<Q0>, int32x4_t a5@<Q2>, int32x4_t a6@<Q6>, int32x4_t a7@<Q7>)
{
  __int128 v8;
  __n128 result;
  _OWORD v10[5];

  specialized static _ColorMatrix.* infix(_:_:)(a1, a2, (uint64_t)v10, a4, a5, a6, a7);
  v8 = v10[3];
  *(_OWORD *)(a3 + 32) = v10[2];
  *(_OWORD *)(a3 + 48) = v8;
  *(_OWORD *)(a3 + 64) = v10[4];
  result = (__n128)v10[1];
  *(_OWORD *)a3 = v10[0];
  *(__n128 *)(a3 + 16) = result;
  return result;
}

BOOL _ColorMatrix.isIdentity.getter()
{
  float *v0;

  return *v0 == 1.0
      && v0[1] == 0.0
      && v0[2] == 0.0
      && v0[3] == 0.0
      && v0[4] == 0.0
      && v0[5] == 0.0
      && v0[6] == 1.0
      && v0[7] == 0.0
      && v0[8] == 0.0
      && v0[9] == 0.0
      && v0[10] == 0.0
      && v0[11] == 0.0
      && v0[12] == 1.0
      && v0[13] == 0.0
      && v0[14] == 0.0
      && v0[15] == 0.0
      && v0[16] == 0.0
      && v0[17] == 0.0
      && v0[18] == 1.0
      && v0[19] == 0.0;
}

BOOL static _ColorMatrix.== infix(_:_:)(float *a1, float *a2)
{
  return specialized static ColorMatrix.== infix(_:_:)(a1, a2);
}

Swift::Void __swiftcall _ColorMatrix.add(_:)(SwiftUI::_ColorMatrix *a1)
{
  float32x4_t *v1;
  float32x4_t v2;
  float32x4_t v3;

  v2 = vaddq_f32(*(float32x4_t *)&a1->m15, v1[1]);
  *v1 = vaddq_f32(*(float32x4_t *)&a1->m11, *v1);
  v1[1] = v2;
  v3 = vaddq_f32(*(float32x4_t *)&a1->m33, v1[3]);
  v1[2] = vaddq_f32(*(float32x4_t *)&a1->m24, v1[2]);
  v1[3] = v3;
  v1[4] = vaddq_f32(*(float32x4_t *)&a1->m42, v1[4]);
}

Swift::Void __swiftcall _ColorMatrix.subtract(_:)(SwiftUI::_ColorMatrix *a1)
{
  float32x4_t *v1;
  float32x4_t v2;
  float32x4_t v3;

  v2 = vsubq_f32(v1[1], *(float32x4_t *)&a1->m15);
  *v1 = vsubq_f32(*v1, *(float32x4_t *)&a1->m11);
  v1[1] = v2;
  v3 = vsubq_f32(v1[3], *(float32x4_t *)&a1->m33);
  v1[2] = vsubq_f32(v1[2], *(float32x4_t *)&a1->m24);
  v1[3] = v3;
  v1[4] = vsubq_f32(v1[4], *(float32x4_t *)&a1->m42);
}

Swift::Void __swiftcall _ColorMatrix.negate()()
{
  float32x4_t *v0;
  float32x4_t v1;
  float32x4_t v2;

  v1 = vnegq_f32(v0[1]);
  *v0 = vnegq_f32(*v0);
  v0[1] = v1;
  v2 = vnegq_f32(v0[3]);
  v0[2] = vnegq_f32(v0[2]);
  v0[3] = v2;
  v0[4] = vnegq_f32(v0[4]);
}

Swift::Void __swiftcall _ColorMatrix.scale(by:)(Swift::Double by)
{
  float32x4_t *v1;
  float v2;
  float32x4_t v3;
  float32x4_t v4;

  v2 = by;
  v3 = vmulq_n_f32(v1[1], v2);
  *v1 = vmulq_n_f32(*v1, v2);
  v1[1] = v3;
  v4 = vmulq_n_f32(v1[3], v2);
  v1[2] = vmulq_n_f32(v1[2], v2);
  v1[3] = v4;
  v1[4] = vmulq_n_f32(v1[4], v2);
}

double _ColorMatrix.magnitudeSquared.getter()
{
  float *v0;

  return (float)((float)((float)((float)((float)((float)((float)((float)(*v0 * *v0) + (float)(v0[1] * v0[1]))
                                                       + (float)(v0[2] * v0[2]))
                                               + (float)(v0[3] * v0[3]))
                                       + (float)(v0[4] * v0[4]))
                               + (float)((float)((float)((float)((float)(v0[5] * v0[5]) + (float)(v0[6] * v0[6]))
                                                       + (float)(v0[7] * v0[7]))
                                               + (float)(v0[8] * v0[8]))
                                       + (float)(v0[9] * v0[9])))
                       + (float)((float)((float)((float)((float)(v0[10] * v0[10]) + (float)(v0[11] * v0[11]))
                                               + (float)(v0[12] * v0[12]))
                                       + (float)(v0[13] * v0[13]))
                               + (float)(v0[14] * v0[14])))
               + (float)((float)((float)((float)((float)(v0[15] * v0[15]) + (float)(v0[16] * v0[16]))
                                       + (float)(v0[17] * v0[17]))
                               + (float)(v0[18] * v0[18]))
                       + (float)(v0[19] * v0[19])));
}

void __swiftcall _ColorMatrix.init(_:)(SwiftUI::_ColorMatrix *__return_ptr retstr, SwiftUI::ColorMatrix *a2)
{
  __int128 v2;
  __int128 v3;

  v2 = *(_OWORD *)&a2->r5;
  *(_OWORD *)&retstr->m11 = *(_OWORD *)&a2->r1;
  *(_OWORD *)&retstr->m15 = v2;
  v3 = *(_OWORD *)&a2->b3;
  *(_OWORD *)&retstr->m24 = *(_OWORD *)&a2->g4;
  *(_OWORD *)&retstr->m33 = v3;
  *(_OWORD *)&retstr->m42 = *(_OWORD *)&a2->a2;
}

float ColorMatrix.r1.getter()
{
  uint64_t v0;

  return *(float *)v0;
}

void ColorMatrix.r1.setter(float a1)
{
  float *v1;

  *v1 = a1;
}

uint64_t (*ColorMatrix.r1.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

float ColorMatrix.r2.getter()
{
  uint64_t v0;

  return *(float *)(v0 + 4);
}

void ColorMatrix.r2.setter(float a1)
{
  uint64_t v1;

  *(float *)(v1 + 4) = a1;
}

uint64_t (*ColorMatrix.r2.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

float ColorMatrix.r3.getter()
{
  uint64_t v0;

  return *(float *)(v0 + 8);
}

void ColorMatrix.r3.setter(float a1)
{
  uint64_t v1;

  *(float *)(v1 + 8) = a1;
}

uint64_t (*ColorMatrix.r3.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

float ColorMatrix.r4.getter()
{
  uint64_t v0;

  return *(float *)(v0 + 12);
}

void ColorMatrix.r4.setter(float a1)
{
  uint64_t v1;

  *(float *)(v1 + 12) = a1;
}

uint64_t (*ColorMatrix.r4.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

float ColorMatrix.r5.getter()
{
  uint64_t v0;

  return *(float *)(v0 + 16);
}

void ColorMatrix.r5.setter(float a1)
{
  uint64_t v1;

  *(float *)(v1 + 16) = a1;
}

uint64_t (*ColorMatrix.r5.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

float ColorMatrix.g1.getter()
{
  uint64_t v0;

  return *(float *)(v0 + 20);
}

void ColorMatrix.g1.setter(float a1)
{
  uint64_t v1;

  *(float *)(v1 + 20) = a1;
}

uint64_t (*ColorMatrix.g1.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

float ColorMatrix.g2.getter()
{
  uint64_t v0;

  return *(float *)(v0 + 24);
}

void ColorMatrix.g2.setter(float a1)
{
  uint64_t v1;

  *(float *)(v1 + 24) = a1;
}

uint64_t (*ColorMatrix.g2.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

float ColorMatrix.g3.getter()
{
  uint64_t v0;

  return *(float *)(v0 + 28);
}

void ColorMatrix.g3.setter(float a1)
{
  uint64_t v1;

  *(float *)(v1 + 28) = a1;
}

uint64_t (*ColorMatrix.g3.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

float ColorMatrix.g4.getter()
{
  uint64_t v0;

  return *(float *)(v0 + 32);
}

void ColorMatrix.g4.setter(float a1)
{
  uint64_t v1;

  *(float *)(v1 + 32) = a1;
}

uint64_t (*ColorMatrix.g4.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

float ColorMatrix.g5.getter()
{
  uint64_t v0;

  return *(float *)(v0 + 36);
}

void ColorMatrix.g5.setter(float a1)
{
  uint64_t v1;

  *(float *)(v1 + 36) = a1;
}

uint64_t (*ColorMatrix.g5.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

float ColorMatrix.b1.getter()
{
  uint64_t v0;

  return *(float *)(v0 + 40);
}

void ColorMatrix.b1.setter(float a1)
{
  uint64_t v1;

  *(float *)(v1 + 40) = a1;
}

uint64_t (*ColorMatrix.b1.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

float ColorMatrix.b2.getter()
{
  uint64_t v0;

  return *(float *)(v0 + 44);
}

void ColorMatrix.b2.setter(float a1)
{
  uint64_t v1;

  *(float *)(v1 + 44) = a1;
}

uint64_t (*ColorMatrix.b2.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

float ColorMatrix.b3.getter()
{
  uint64_t v0;

  return *(float *)(v0 + 48);
}

void ColorMatrix.b3.setter(float a1)
{
  uint64_t v1;

  *(float *)(v1 + 48) = a1;
}

uint64_t (*ColorMatrix.b3.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

float ColorMatrix.b4.getter()
{
  uint64_t v0;

  return *(float *)(v0 + 52);
}

void ColorMatrix.b4.setter(float a1)
{
  uint64_t v1;

  *(float *)(v1 + 52) = a1;
}

uint64_t (*ColorMatrix.b4.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

float ColorMatrix.b5.getter()
{
  uint64_t v0;

  return *(float *)(v0 + 56);
}

void ColorMatrix.b5.setter(float a1)
{
  uint64_t v1;

  *(float *)(v1 + 56) = a1;
}

uint64_t (*ColorMatrix.b5.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

float ColorMatrix.a1.getter()
{
  uint64_t v0;

  return *(float *)(v0 + 60);
}

void ColorMatrix.a1.setter(float a1)
{
  uint64_t v1;

  *(float *)(v1 + 60) = a1;
}

uint64_t (*ColorMatrix.a1.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

float ColorMatrix.a2.getter()
{
  uint64_t v0;

  return *(float *)(v0 + 64);
}

void ColorMatrix.a2.setter(float a1)
{
  uint64_t v1;

  *(float *)(v1 + 64) = a1;
}

uint64_t (*ColorMatrix.a2.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

float ColorMatrix.a3.getter()
{
  uint64_t v0;

  return *(float *)(v0 + 68);
}

void ColorMatrix.a3.setter(float a1)
{
  uint64_t v1;

  *(float *)(v1 + 68) = a1;
}

uint64_t (*ColorMatrix.a3.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

float ColorMatrix.a4.getter()
{
  uint64_t v0;

  return *(float *)(v0 + 72);
}

void ColorMatrix.a4.setter(float a1)
{
  uint64_t v1;

  *(float *)(v1 + 72) = a1;
}

uint64_t (*ColorMatrix.a4.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

float ColorMatrix.a5.getter()
{
  uint64_t v0;

  return *(float *)(v0 + 76);
}

void ColorMatrix.a5.setter(float a1)
{
  uint64_t v1;

  *(float *)(v1 + 76) = a1;
}

uint64_t (*ColorMatrix.a5.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

double _ColorMatrix.init()@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_DWORD *)a1 = 1065353216;
  *(_QWORD *)(a1 + 12) = 0;
  *(_QWORD *)(a1 + 4) = 0;
  *(_QWORD *)(a1 + 20) = 0x3F80000000000000;
  *(_QWORD *)(a1 + 36) = 0;
  *(_QWORD *)(a1 + 28) = 0;
  *(_QWORD *)(a1 + 44) = 0x3F80000000000000;
  *(_QWORD *)(a1 + 60) = 0;
  *(_QWORD *)(a1 + 52) = 0;
  *(_DWORD *)(a1 + 68) = 0;
  *(_QWORD *)&result = 1065353216;
  *(_QWORD *)(a1 + 72) = 1065353216;
  return result;
}

BOOL static ColorMatrix.== infix(_:_:)(float *a1, float *a2)
{
  return specialized static ColorMatrix.== infix(_:_:)(a1, a2);
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance ColorMatrix(_OWORD *a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  _OWORD v8[5];
  _OWORD v9[5];

  v2 = a1[3];
  v8[2] = a1[2];
  v8[3] = v2;
  v3 = a1[4];
  v4 = a1[1];
  v8[0] = *a1;
  v8[1] = v4;
  v5 = a2[3];
  v9[2] = a2[2];
  v9[3] = v5;
  v9[4] = a2[4];
  v6 = *a2;
  v9[1] = a2[1];
  v8[4] = v3;
  v9[0] = v6;
  return specialized static ColorMatrix.== infix(_:_:)((float *)v8, (float *)v9);
}

float _ColorMatrix.m11.getter()
{
  uint64_t v0;

  return *(float *)v0;
}

void _ColorMatrix.m11.setter(float a1)
{
  float *v1;

  *v1 = a1;
}

uint64_t (*_ColorMatrix.m11.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t (*_ColorMatrix.m12.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t (*_ColorMatrix.m13.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t (*_ColorMatrix.m14.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t (*_ColorMatrix.m15.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t (*_ColorMatrix.m21.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t (*_ColorMatrix.m22.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t (*_ColorMatrix.m23.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t (*_ColorMatrix.m24.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t (*_ColorMatrix.m25.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t (*_ColorMatrix.m31.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t (*_ColorMatrix.m32.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t (*_ColorMatrix.m33.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t (*_ColorMatrix.m34.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t (*_ColorMatrix.m35.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t (*_ColorMatrix.m41.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t (*_ColorMatrix.m42.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t (*_ColorMatrix.m43.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t (*_ColorMatrix.m44.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t (*_ColorMatrix.m45.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

void _ColorMatrix.init(color:in:)(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  int v10;
  int v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  _QWORD v20[2];

  v4 = a2[1];
  v20[0] = *a2;
  v20[1] = v4;
  v5 = (*(float (**)(_QWORD *))(*(_QWORD *)a1 + 104))(v20);
  v7 = v6;
  v9 = v8;
  v11 = v10;
  swift_release();
  swift_release();
  v12 = -v5;
  if (v5 > 0.0)
    v12 = v5;
  if (v12 <= 0.0031308)
  {
    v13 = v12 * 12.92;
  }
  else
  {
    v13 = 1.0;
    if (v12 != 1.0)
      v13 = (float)(powf(v12, 0.41667) * 1.055) + -0.055;
  }
  v14 = -v7;
  if (v7 > 0.0)
    v14 = v7;
  if (v14 <= 0.0031308)
  {
    v15 = v14 * 12.92;
  }
  else
  {
    v15 = 1.0;
    if (v14 != 1.0)
      v15 = (float)(powf(v14, 0.41667) * 1.055) + -0.055;
  }
  if (v9 <= 0.0)
    v16 = -v9;
  else
    v16 = v9;
  if (v16 <= 0.0031308)
  {
    swift_release();
    v17 = v16 * 12.92;
  }
  else
  {
    swift_release();
    v17 = 1.0;
    if (v16 != 1.0)
      v17 = (float)(powf(v16, 0.41667) * 1.055) + -0.055;
  }
  v18 = -v15;
  if (v7 > 0.0)
    v18 = v15;
  v19 = -v13;
  if (v5 > 0.0)
    v19 = v13;
  *(float *)a3 = v19;
  *(_QWORD *)(a3 + 12) = 0;
  *(_QWORD *)(a3 + 4) = 0;
  *(_DWORD *)(a3 + 20) = 0;
  *(float *)(a3 + 24) = v18;
  if (v9 <= 0.0)
    v17 = -v17;
  *(_QWORD *)(a3 + 36) = 0;
  *(_QWORD *)(a3 + 28) = 0;
  *(_DWORD *)(a3 + 44) = 0;
  *(float *)(a3 + 48) = v17;
  *(_QWORD *)(a3 + 60) = 0;
  *(_QWORD *)(a3 + 52) = 0;
  *(_DWORD *)(a3 + 68) = 0;
  *(_DWORD *)(a3 + 72) = v11;
  *(_DWORD *)(a3 + 76) = 0;
}

uint64_t _ColorMatrix.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  _BYTE v3[24];
  uint64_t v4;

  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Encoder.unkeyedContainer()();
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v3, v4);
  UnkeyedEncodingContainer.encodeRow(_:)();
  if (!v1)
  {
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v3, v4);
    UnkeyedEncodingContainer.encodeRow(_:)();
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v3, v4);
    UnkeyedEncodingContainer.encodeRow(_:)();
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v3, v4);
    UnkeyedEncodingContainer.encodeRow(_:)();
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v3);
}

uint64_t UnkeyedEncodingContainer.encodeRow(_:)()
{
  uint64_t v0;
  uint64_t result;

  result = dispatch thunk of UnkeyedEncodingContainer.encode(_:)();
  if (!v0)
  {
    dispatch thunk of UnkeyedEncodingContainer.encode(_:)();
    dispatch thunk of UnkeyedEncodingContainer.encode(_:)();
    dispatch thunk of UnkeyedEncodingContainer.encode(_:)();
    return dispatch thunk of UnkeyedEncodingContainer.encode(_:)();
  }
  return result;
}

__n128 _ColorMatrix.init(from:)@<Q0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  __n128 result;
  __int128 v5;
  _OWORD v6[5];

  specialized _ColorMatrix.init(from:)(a1, (uint64_t)v6);
  if (!v2)
  {
    v5 = v6[3];
    *(_OWORD *)(a2 + 32) = v6[2];
    *(_OWORD *)(a2 + 48) = v5;
    *(_OWORD *)(a2 + 64) = v6[4];
    result = (__n128)v6[1];
    *(_OWORD *)a2 = v6[0];
    *(__n128 *)(a2 + 16) = result;
  }
  return result;
}

{
  uint64_t v2;
  __n128 result;
  __int128 v5;
  uint64_t v6;
  _BYTE v7[80];
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  *(_DWORD *)v7 = 1065353216;
  *(_OWORD *)&v7[4] = 0uLL;
  *(_QWORD *)&v7[20] = 0x3F80000000000000;
  *(_OWORD *)&v7[28] = 0uLL;
  *(_OWORD *)&v7[44] = 0x3F80000000000000uLL;
  *(_QWORD *)&v7[60] = 0;
  *(_DWORD *)&v7[68] = 0;
  *(_QWORD *)&v7[72] = 1065353216;
  closure #1 in _ColorMatrix.init(from:)((unint64_t)v7, a1, &v6);
  if (!v2)
  {
    v5 = *(_OWORD *)&v7[48];
    *(_OWORD *)(a2 + 32) = *(_OWORD *)&v7[32];
    *(_OWORD *)(a2 + 48) = v5;
    *(_OWORD *)(a2 + 64) = *(_OWORD *)&v7[64];
    result = *(__n128 *)&v7[16];
    *(_OWORD *)a2 = *(_OWORD *)v7;
    *(__n128 *)(a2 + 16) = result;
  }
  return result;
}

uint64_t UnkeyedDecodingContainer.decodeRow()@<X0>(_DWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;

  result = dispatch thunk of UnkeyedDecodingContainer.decode(_:)();
  if (!v1)
  {
    v5 = v4;
    dispatch thunk of UnkeyedDecodingContainer.decode(_:)();
    v7 = v6;
    dispatch thunk of UnkeyedDecodingContainer.decode(_:)();
    v9 = v8;
    dispatch thunk of UnkeyedDecodingContainer.decode(_:)();
    v11 = v10;
    result = dispatch thunk of UnkeyedDecodingContainer.decode(_:)();
    *a1 = v5;
    a1[1] = v7;
    a1[2] = v9;
    a1[3] = v11;
    a1[4] = v12;
  }
  return result;
}

__n128 protocol witness for Decodable.init(from:) in conformance _ColorMatrix@<Q0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  __n128 result;
  __int128 v5;
  _OWORD v6[5];

  specialized _ColorMatrix.init(from:)(a1, (uint64_t)v6);
  if (!v2)
  {
    v5 = v6[3];
    *(_OWORD *)(a2 + 32) = v6[2];
    *(_OWORD *)(a2 + 48) = v5;
    *(_OWORD *)(a2 + 64) = v6[4];
    result = (__n128)v6[1];
    *(_OWORD *)a2 = v6[0];
    *(__n128 *)(a2 + 16) = result;
  }
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance _ColorMatrix(_QWORD *a1)
{
  uint64_t v1;
  _BYTE v3[24];
  uint64_t v4;

  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Encoder.unkeyedContainer()();
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v3, v4);
  UnkeyedEncodingContainer.encodeRow(_:)();
  if (!v1)
  {
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v3, v4);
    UnkeyedEncodingContainer.encodeRow(_:)();
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v3, v4);
    UnkeyedEncodingContainer.encodeRow(_:)();
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v3, v4);
    UnkeyedEncodingContainer.encodeRow(_:)();
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v3);
}

void __swiftcall _ColorMatrix.init(row1:row2:row3:row4:)(SwiftUI::_ColorMatrix *__return_ptr retstr, Swift::tuple_Float_Float_Float_Float_Float *row1, Swift::tuple_Float_Float_Float_Float_Float *row2, Swift::tuple_Float_Float_Float_Float_Float *row3, Swift::tuple_Float_Float_Float_Float_Float *row4)
{
  Swift::Float v5;
  Swift::Float v6;
  Swift::Float v7;
  Swift::Float v8;
  Swift::Float v9;
  Swift::Float v10;
  Swift::Float v11;
  Swift::Float v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;

  retstr->m11 = v5;
  retstr->m12 = v6;
  retstr->m13 = v7;
  retstr->m14 = v8;
  retstr->m15 = v9;
  retstr->m21 = v10;
  retstr->m22 = v11;
  retstr->m23 = v12;
  *(_OWORD *)&retstr->m24 = v13;
  *(_OWORD *)&retstr->m33 = v14;
  *(_OWORD *)&retstr->m42 = v15;
}

__n128 _ColorMatrix.init(colorMultiply:premultiplied:)@<Q0>(char a1@<W0>, uint64_t a2@<X8>, float a3@<S0>, float a4@<S1>, float a5@<S2>, float a6@<S3>)
{
  __int128 v7;
  __n128 result;
  _OWORD v9[5];

  specialized _ColorMatrix.init(colorMultiply:premultiplied:)(a1, (uint64_t)v9, a3, a4, a5, a6);
  v7 = v9[3];
  *(_OWORD *)(a2 + 32) = v9[2];
  *(_OWORD *)(a2 + 48) = v7;
  *(_OWORD *)(a2 + 64) = v9[4];
  result = (__n128)v9[1];
  *(_OWORD *)a2 = v9[0];
  *(__n128 *)(a2 + 16) = result;
  return result;
}

void __swiftcall _ColorMatrix.init(hueRotation:)(SwiftUI::_ColorMatrix *__return_ptr retstr, SwiftUI::Angle hueRotation)
{
  __int128 v3;
  __int128 v4;
  _OWORD v5[5];

  specialized _ColorMatrix.init(hueRotation:)((uint64_t)v5, hueRotation.radians);
  v3 = v5[3];
  *(_OWORD *)&retstr->m24 = v5[2];
  *(_OWORD *)&retstr->m33 = v3;
  *(_OWORD *)&retstr->m42 = v5[4];
  v4 = v5[1];
  *(_OWORD *)&retstr->m11 = v5[0];
  *(_OWORD *)&retstr->m15 = v4;
}

void __swiftcall _ColorMatrix.init(brightness:)(SwiftUI::_ColorMatrix *__return_ptr retstr, Swift::Double brightness)
{
  Swift::Float v2;

  v2 = brightness;
  *(_OWORD *)&retstr->m11 = xmmword_2352B1C50;
  retstr->m15 = v2;
  *(_OWORD *)&retstr->m21 = xmmword_2352C7CF0;
  retstr->m25 = v2;
  *(_OWORD *)&retstr->m31 = xmmword_2352C7D00;
  retstr->m35 = v2;
  *(_OWORD *)&retstr->m41 = xmmword_23528B790;
  retstr->m45 = 0.0;
}

void __swiftcall _ColorMatrix.init(contrast:)(SwiftUI::_ColorMatrix *__return_ptr retstr, Swift::Double contrast)
{
  Swift::Float v2;
  Swift::Float v3;

  v2 = contrast;
  retstr->m11 = v2;
  v3 = (float)(1.0 - v2) * 0.5;
  *(_QWORD *)&retstr->m12 = 0;
  retstr->m14 = 0.0;
  retstr->m15 = v3;
  retstr->m21 = 0.0;
  retstr->m22 = v2;
  *(_QWORD *)&retstr->m23 = 0;
  retstr->m25 = v3;
  *(_QWORD *)&retstr->m31 = 0;
  retstr->m33 = v2;
  retstr->m34 = 0.0;
  retstr->m35 = v3;
  *(_OWORD *)&retstr->m41 = xmmword_23528B790;
  retstr->m45 = 0.0;
}

double _ColorMatrix.init(luminanceToAlpha:)@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_OWORD *)(a1 + 44) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  result = 0.000352343834;
  *(_OWORD *)(a1 + 60) = xmmword_2352C7D10;
  *(_DWORD *)(a1 + 76) = 0;
  return result;
}

void __swiftcall _ColorMatrix.init(colorInvert:)(SwiftUI::_ColorMatrix *__return_ptr retstr, Swift::Float colorInvert)
{
  Swift::Float v2;

  v2 = 1.0 - (float)(colorInvert + colorInvert);
  retstr->m11 = v2;
  *(_QWORD *)&retstr->m12 = 0;
  retstr->m14 = 0.0;
  retstr->m15 = colorInvert;
  retstr->m21 = 0.0;
  retstr->m22 = v2;
  *(_QWORD *)&retstr->m23 = 0;
  retstr->m25 = colorInvert;
  *(_QWORD *)&retstr->m31 = 0;
  retstr->m33 = v2;
  retstr->m34 = 0.0;
  retstr->m35 = colorInvert;
  *(_OWORD *)&retstr->m41 = xmmword_23528B790;
  retstr->m45 = 0.0;
}

__n128 _ColorMatrix.init(colorMonochrome:amount:bias:)@<Q0>(uint64_t a1@<X8>, float a2@<S0>, float a3@<S1>, float a4@<S2>, float a5@<S3>, float a6@<S4>, float a7@<S5>)
{
  __int128 v8;
  __n128 result;
  _OWORD v10[5];

  specialized _ColorMatrix.init(colorMonochrome:amount:bias:)((uint64_t)v10, a2, a3, a4, a5, a6, a7);
  v8 = v10[3];
  *(_OWORD *)(a1 + 32) = v10[2];
  *(_OWORD *)(a1 + 48) = v8;
  *(_OWORD *)(a1 + 64) = v10[4];
  result = (__n128)v10[1];
  *(_OWORD *)a1 = v10[0];
  *(__n128 *)(a1 + 16) = result;
  return result;
}

void __swiftcall _ColorMatrix.init(floatArray:)(SwiftUI::_ColorMatrix *__return_ptr retstr, Swift::OpaquePointer floatArray)
{
  unint64_t v3;
  Swift::Float v4;
  Swift::Float v5;
  Swift::Float v6;
  Swift::Float v7;
  Swift::Float v8;
  Swift::Float v9;
  Swift::Float v10;
  Swift::Float v11;
  uint64_t v12;
  Swift::Float v13;
  Swift::Float v14;
  Swift::Float v15;
  Swift::Float v16;
  Swift::Float v17;
  Swift::Float v18;
  Swift::Float v19;
  Swift::Float v20;
  Swift::Float v21;
  Swift::Float v22;

  v3 = *((_QWORD *)floatArray._rawValue + 2);
  if (!v3)
  {
    __break(1u);
    goto LABEL_23;
  }
  if (v3 == 1)
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  if (v3 < 3)
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  if (v3 == 3)
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  if (v3 < 5)
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  if (v3 == 5)
  {
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  if (v3 < 7)
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  if (v3 == 7)
  {
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  if (v3 < 9)
  {
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  if (v3 == 9)
  {
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }
  if (v3 < 0xB)
  {
LABEL_32:
    __break(1u);
    goto LABEL_33;
  }
  if (v3 == 11)
  {
LABEL_33:
    __break(1u);
    goto LABEL_34;
  }
  if (v3 < 0xD)
  {
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  if (v3 == 13)
  {
LABEL_35:
    __break(1u);
    goto LABEL_36;
  }
  if (v3 < 0xF)
  {
LABEL_36:
    __break(1u);
    goto LABEL_37;
  }
  if (v3 == 15)
  {
LABEL_37:
    __break(1u);
    goto LABEL_38;
  }
  if (v3 < 0x11)
  {
LABEL_38:
    __break(1u);
    goto LABEL_39;
  }
  if (v3 == 17)
  {
LABEL_39:
    __break(1u);
    goto LABEL_40;
  }
  if (v3 < 0x13)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  if (v3 != 19)
  {
    v4 = *((float *)floatArray._rawValue + 8);
    v5 = *((float *)floatArray._rawValue + 9);
    v6 = *((float *)floatArray._rawValue + 10);
    v7 = *((float *)floatArray._rawValue + 11);
    v8 = *((float *)floatArray._rawValue + 12);
    v9 = *((float *)floatArray._rawValue + 13);
    v10 = *((float *)floatArray._rawValue + 14);
    v11 = *((float *)floatArray._rawValue + 15);
    v21 = *((float *)floatArray._rawValue + 17);
    v22 = *((float *)floatArray._rawValue + 16);
    v19 = *((float *)floatArray._rawValue + 19);
    v20 = *((float *)floatArray._rawValue + 18);
    v17 = *((float *)floatArray._rawValue + 21);
    v18 = *((float *)floatArray._rawValue + 20);
    v15 = *((float *)floatArray._rawValue + 23);
    v16 = *((float *)floatArray._rawValue + 22);
    v13 = *((float *)floatArray._rawValue + 25);
    v14 = *((float *)floatArray._rawValue + 24);
    v12 = *((_QWORD *)floatArray._rawValue + 13);
    swift_bridgeObjectRelease();
    retstr->m11 = v4;
    retstr->m12 = v5;
    retstr->m13 = v6;
    retstr->m14 = v7;
    retstr->m15 = v8;
    retstr->m21 = v9;
    retstr->m22 = v10;
    retstr->m23 = v11;
    retstr->m24 = v22;
    retstr->m25 = v21;
    retstr->m31 = v20;
    retstr->m32 = v19;
    retstr->m33 = v18;
    retstr->m34 = v17;
    retstr->m35 = v16;
    retstr->m41 = v15;
    retstr->m42 = v14;
    retstr->m43 = v13;
    *(_QWORD *)&retstr->m44 = v12;
    return;
  }
LABEL_41:
  __break(1u);
}

__n128 _ColorMatrix.floatArray.getter()
{
  __int128 *v0;
  uint64_t v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __n128 result;

  type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<Float>, MEMORY[0x24BEE14E8], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
  v1 = swift_allocObject();
  v2 = *v0;
  v3 = v0[1];
  *(_OWORD *)(v1 + 16) = xmmword_2352C7D20;
  *(_OWORD *)(v1 + 32) = v2;
  v4 = v0[2];
  v5 = v0[3];
  *(_OWORD *)(v1 + 48) = v3;
  *(_OWORD *)(v1 + 64) = v4;
  result = (__n128)v0[4];
  *(_OWORD *)(v1 + 80) = v5;
  *(__n128 *)(v1 + 96) = result;
  return result;
}

void _ColorMatrix._apply(to:)(uint64_t a1)
{
  __asm { BR              X12 }
}

float *_ColorMatrix.encode(to:)(_QWORD *a1)
{
  _OWORD *v1;
  __int128 v2;
  __int128 v3;
  _OWORD v5[5];
  uint64_t v6;

  v6 = *MEMORY[0x24BDAC8D0];
  v2 = v1[3];
  v5[2] = v1[2];
  v5[3] = v2;
  v5[4] = v1[4];
  v3 = v1[1];
  v5[0] = *v1;
  v5[1] = v3;
  return closure #1 in _ColorMatrix.encode(to:)((float *)v5, a1);
}

float *closure #1 in _ColorMatrix.encode(to:)(float *result, _QWORD *a2)
{
  float *v3;
  unint64_t v4;
  unint64_t v5;
  float v6;
  unint64_t v8;
  float v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  unint64_t v15;
  char v16;
  BOOL v17;

  v3 = result;
  v4 = 0;
  v5 = 1;
  while (1)
  {
    v8 = __ROR8__(v4, 1);
    v9 = 0.0;
    if (v8 <= 9)
      v9 = flt_2352C7EE8[v8];
    v6 = v3[v4];
    if (v6 == v9)
      goto LABEL_3;
    v10 = (8 * v5) | 5;
    v11 = a2[1];
    if (v10 > 0x7F)
    {
      result = (float *)(v11 + 2);
      if (__OFADD__(v11, 2))
        goto LABEL_27;
    }
    else
    {
      if (v11 < a2[2])
      {
        *(_BYTE *)(*a2 + v11) = v10;
        v12 = v11 + 1;
        a2[1] = v12;
        goto LABEL_16;
      }
      result = (float *)(v11 + 1);
      if (__OFADD__(v11, 1))
        goto LABEL_27;
    }
    if (a2[2] < (uint64_t)result)
    {
      v13 = (_BYTE *)ProtobufEncoder.growBufferSlow(to:)((int64_t)result);
    }
    else
    {
      a2[1] = result;
      v13 = (_BYTE *)(*a2 + v11);
    }
    LOBYTE(v14) = (8 * v5) & 0x78 | 5;
    if (v5 >= 0x10)
    {
      v15 = 8 * v5;
      do
      {
        v16 = v14 | 0x80;
        v14 = (v15 >> 7) & 0x7F;
        *v13++ = v16;
        v17 = v15 >= 0x4000;
        v15 >>= 7;
      }
      while (v17);
    }
    *v13 = v14;
    v12 = a2[1];
LABEL_16:
    result = (float *)(v12 + 4);
    if (__OFADD__(v12, 4))
      break;
    if (a2[2] < (uint64_t)result)
    {
      result = (float *)ProtobufEncoder.growBufferSlow(to:)((int64_t)result);
    }
    else
    {
      a2[1] = result;
      result = (float *)(*a2 + v12);
    }
    *result = v6;
LABEL_3:
    v4 = v5;
    if (v5++ == 20)
      return result;
  }
  __break(1u);
LABEL_27:
  __break(1u);
  return result;
}

unint64_t closure #1 in _ColorMatrix.init(from:)(unint64_t result, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v6;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int *v13;
  unint64_t v14;
  int v15;

  v4 = v3;
  v6 = a2[1];
  if (v6 >= a2[2])
  {
LABEL_34:
    a2[3] = 0;
    return result;
  }
  v8 = result;
  while (1)
  {
    v10 = a2[3];
    if (v10)
    {
      v11 = a2[4];
      if (v6 < v11)
        goto LABEL_12;
      if (v11 < v6)
        break;
      a2[3] = 0;
    }
    result = ProtobufDecoder.decodeVarint()();
    if (v3)
      goto LABEL_33;
    v10 = result;
    if (result <= 7)
      break;
LABEL_12:
    if (v10 <= 0xA7)
    {
      v12 = (v10 >> 3) - 1;
      if (!(v10 >> 3))
      {
        __break(1u);
LABEL_36:
        __break(1u);
LABEL_37:
        __break(1u);
LABEL_38:
        __break(1u);
        JUMPOUT(0x2350D1630);
      }
      if (v12 < 0)
        goto LABEL_36;
      if ((v10 & 7) == 2)
      {
        result = ProtobufDecoder.decodeVarint()();
        if (v3)
          goto LABEL_33;
        if ((result & 0x8000000000000000) != 0)
          goto LABEL_37;
        v13 = (int *)a2[1];
        v14 = a2[2];
        if (v14 < (unint64_t)v13 + result)
          break;
        a2[3] = v10 & 0xFFFFFFFFFFFFFFF8 | 5;
        a2[4] = (char *)v13 + result;
      }
      else
      {
        if ((v10 & 7) != 5)
          break;
        v13 = (int *)a2[1];
        v14 = a2[2];
      }
      if (v14 < (unint64_t)(v13 + 1))
        break;
      v15 = *v13;
      a2[1] = v13 + 1;
      *(_DWORD *)(v8 + 4 * v12) = v15;
    }
    else
    {
      switch(v10 & 7)
      {
        case 0uLL:
          result = ProtobufDecoder.decodeVarint()();
          if (v3)
            goto LABEL_33;
          break;
        case 1uLL:
          v9 = a2[1] + 8;
          if (a2[2] >= v9)
            goto LABEL_4;
          goto LABEL_32;
        case 2uLL:
          result = ProtobufDecoder.decodeVarint()();
          if (v3)
            goto LABEL_33;
          if ((result & 0x8000000000000000) != 0)
            goto LABEL_38;
          v9 = a2[1] + result;
          if (a2[2] < v9)
            goto LABEL_32;
LABEL_4:
          a2[1] = v9;
          break;
        case 5uLL:
          v9 = a2[1] + 4;
          if (a2[2] < v9)
            goto LABEL_32;
          goto LABEL_4;
        default:
          goto LABEL_32;
      }
    }
    v6 = a2[1];
    if (v6 >= a2[2])
      goto LABEL_34;
  }
LABEL_32:
  lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
  v4 = swift_allocError();
  result = swift_willThrow();
LABEL_33:
  *a3 = v4;
  return result;
}

float *protocol witness for ProtobufEncodableMessage.encode(to:) in conformance _ColorMatrix(_QWORD *a1)
{
  _OWORD *v1;
  __int128 v2;
  __int128 v3;
  _OWORD v5[5];
  uint64_t v6;

  v6 = *MEMORY[0x24BDAC8D0];
  v2 = v1[3];
  v5[2] = v1[2];
  v5[3] = v2;
  v5[4] = v1[4];
  v3 = v1[1];
  v5[0] = *v1;
  v5[1] = v3;
  return closure #1 in _ColorMatrix.encode(to:)((float *)v5, a1);
}

__n128 protocol witness for ProtobufDecodableMessage.init(from:) in conformance _ColorMatrix@<Q0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  __n128 result;
  __int128 v5;
  uint64_t v6;
  _BYTE v7[80];
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  *(_DWORD *)v7 = 1065353216;
  *(_OWORD *)&v7[4] = 0uLL;
  *(_QWORD *)&v7[20] = 0x3F80000000000000;
  *(_OWORD *)&v7[28] = 0uLL;
  *(_OWORD *)&v7[44] = 0x3F80000000000000uLL;
  *(_QWORD *)&v7[60] = 0;
  *(_DWORD *)&v7[68] = 0;
  *(_QWORD *)&v7[72] = 1065353216;
  closure #1 in _ColorMatrix.init(from:)((unint64_t)v7, a1, &v6);
  if (!v2)
  {
    v5 = *(_OWORD *)&v7[48];
    *(_OWORD *)(a2 + 32) = *(_OWORD *)&v7[32];
    *(_OWORD *)(a2 + 48) = v5;
    *(_OWORD *)(a2 + 64) = *(_OWORD *)&v7[64];
    result = *(__n128 *)&v7[16];
    *(_OWORD *)a2 = *(_OWORD *)v7;
    *(__n128 *)(a2 + 16) = result;
  }
  return result;
}

BOOL specialized static ColorMatrix.== infix(_:_:)(float *a1, float *a2)
{
  return *a1 == *a2
      && a1[1] == a2[1]
      && a1[2] == a2[2]
      && a1[3] == a2[3]
      && a1[4] == a2[4]
      && a1[5] == a2[5]
      && a1[6] == a2[6]
      && a1[7] == a2[7]
      && a1[8] == a2[8]
      && a1[9] == a2[9]
      && a1[10] == a2[10]
      && a1[11] == a2[11]
      && a1[12] == a2[12]
      && a1[13] == a2[13]
      && a1[14] == a2[14]
      && a1[15] == a2[15]
      && a1[16] == a2[16]
      && a1[17] == a2[17]
      && a1[18] == a2[18]
      && a1[19] == a2[19];
}

float specialized static _ColorMatrix.* infix(_:_:)@<S0>(_OWORD *a1@<X0>, _OWORD *a2@<X1>, uint64_t a3@<X8>, int8x16_t a4@<Q0>, int32x4_t a5@<Q2>, int32x4_t a6@<Q6>, int32x4_t a7@<Q7>)
{
  float v7;
  float v8;
  int32x4_t v9;
  int32x4_t v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float32_t v20;
  float v21;
  float v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float v28;
  float v29;
  float32x4_t v30;
  float32x4_t v31;
  float v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  unsigned __int32 v36;
  float32x4_t v37;
  float v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32_t v44;
  float32_t v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  float32_t v50;
  float32x4_t v51;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  float result;

  v7 = *((float *)a1 + 2);
  v8 = *((float *)a1 + 3);
  v9 = *(int32x4_t *)((char *)a1 + 4);
  v10 = *(int32x4_t *)a1;
  v11 = *((float *)a1 + 7);
  v12 = *((float *)a1 + 8);
  a6.i32[0] = *((_DWORD *)a1 + 5);
  a7.i32[0] = *((_DWORD *)a1 + 6);
  v13 = *((float *)a1 + 12);
  v14 = *((float *)a1 + 13);
  a4.i32[0] = *((_DWORD *)a1 + 10);
  a5.i32[0] = *((_DWORD *)a1 + 11);
  v15 = *((float *)a1 + 17);
  v16 = *((float *)a1 + 18);
  v18 = *((float *)a1 + 15);
  v17 = *((float *)a1 + 16);
  v19 = *((float *)a2 + 19);
  v20 = v8 * v19;
  v21 = *((float *)a2 + 14);
  v22 = (float)((float)((float)((float)(v16 * v19) + (float)(v15 * v21)) + (float)(v17 * *((float *)a2 + 9)))
              + (float)(v18 * *((float *)a2 + 4)))
      + *((float *)a1 + 19);
  v23 = *(float32x4_t *)((char *)a2 + 60);
  v24 = *(float32x4_t *)((char *)a2 + 40);
  v25 = *(float32x4_t *)((char *)a2 + 20);
  v26 = *(float32x4_t *)a2;
  v27 = vaddq_f32(vaddq_f32(vaddq_f32(vmulq_n_f32(v23, v8), vmulq_n_f32(v24, v7)), vmulq_n_f32(v25, *(float *)v9.i32)), vmulq_n_f32(*(float32x4_t *)a2, COERCE_FLOAT(*a1)));
  v28 = (float)((float)(vmuls_lane_f32(v12, v23, 3) + vmuls_lane_f32(v11, v24, 3))
              + vmuls_lane_f32(*(float *)a7.i32, v25, 3))
      + vmuls_lane_f32(*(float *)a6.i32, *(float32x4_t *)a2, 3);
  v29 = (float)((float)(vmuls_lane_f32(v14, v23, 3) + vmuls_lane_f32(v13, v24, 3))
              + vmuls_lane_f32(*(float *)a5.i32, v25, 3))
      + vmuls_lane_f32(*(float *)a4.i32, *(float32x4_t *)a2, 3);
  v30 = (float32x4_t)vextq_s8(a4, (int8x16_t)v23, 0xCuLL);
  v31 = v30;
  v31.f32[0] = v20;
  v32 = vmuls_lane_f32(v16, v23, 3) + vmuls_lane_f32(v15, v24, 3);
  v33 = v31;
  v33.f32[3] = v12;
  v34 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v33, 3);
  v34.i32[3] = *(_QWORD *)((char *)a2 + 68);
  v35 = vmulq_f32(v33, v34);
  v34.f32[0] = v7 * v21;
  v36 = vaddq_f32(v31, v34).u32[0];
  v37 = *((float32x4_t *)a1 + 1);
  v35.i32[0] = v36;
  v38 = v32 + vmuls_lane_f32(v17, v25, 3);
  *(float *)&v9.i32[1] = v11;
  v39 = (float32x4_t)vzip1q_s32(v9, vdupq_lane_s32(*(int32x2_t *)v9.i8, 1));
  v10.i32[1] = a7.i32[0];
  v40 = (float32x4_t)vzip1q_s32(v10, vdupq_lane_s32(*(int32x2_t *)v10.i8, 1));
  v41 = *(float32x4_t *)((char *)a2 + 36);
  v42 = *((float32x4_t *)a2 + 1);
  v43 = vaddq_f32(vaddq_f32(v35, vmulq_f32(v41, v39)), vmulq_f32(v42, v40));
  *(int8x8_t *)v40.f32 = vext_s8(*(int8x8_t *)a2, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v26, (int8x16_t)v26, 8uLL), 4uLL);
  v37.f32[1] = *(float *)a6.i32 * COERCE_FLOAT(*a2);
  *(float32x2_t *)&v37.u32[2] = vmul_n_f32(*(float32x2_t *)v40.f32, *(float *)a6.i32);
  *(float32x4_t *)a3 = v27;
  *(float32x4_t *)(a3 + 16) = vaddq_f32(v37, v43);
  v44 = v12 * v19;
  v45 = v14 * v19;
  v46 = v30;
  v46.f32[0] = v44;
  v47 = v46;
  v47.f32[3] = v14;
  *(float *)(a3 + 32) = v28;
  v48 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v47, 3);
  v48.i32[3] = v23.i32[2];
  v49 = vmulq_f32(v47, v48);
  v48.f32[0] = v11 * v21;
  v49.i32[0] = vaddq_f32(v46, v48).u32[0];
  v50 = v13 * v21;
  *(float *)&a7.i32[1] = v13;
  a6.i32[1] = a5.i32[0];
  v51 = *(float32x4_t *)((char *)a1 + 36);
  v51.f32[1] = *(float *)a4.i32 * v26.f32[0];
  *(float32x2_t *)&v51.u32[2] = vmul_n_f32(*(float32x2_t *)v40.f32, *(float *)a4.i32);
  *(float32x4_t *)(a3 + 36) = vaddq_f32(vaddq_f32(vaddq_f32(v49, vmulq_f32(v41, (float32x4_t)vzip1q_s32(a7, vdupq_lane_s32(*(int32x2_t *)a7.i8, 1)))), vmulq_f32(v42, (float32x4_t)vzip1q_s32(a6, vdupq_lane_s32(*(int32x2_t *)a6.i8, 1)))), v51);
  *(float *)(a3 + 52) = v29;
  v30.f32[0] = v45;
  v52 = v30;
  v52.f32[3] = v16;
  v53 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v52, 3);
  v53.i32[3] = v23.i32[2];
  v54 = vmulq_f32(v52, v53);
  v53.f32[0] = v50;
  v54.i32[0] = vaddq_f32(v30, v53).u32[0];
  *(float *)&a5.i32[1] = v15;
  *(float *)&a4.i32[1] = v17;
  v55 = vaddq_f32(v54, vmulq_f32(v41, (float32x4_t)vzip1q_s32(a5, vdupq_lane_s32(*(int32x2_t *)a5.i8, 1))));
  v56 = *(float32x4_t *)((char *)a1 + 56);
  v56.f32[1] = v18 * v26.f32[0];
  *(float32x2_t *)&v56.u32[2] = vmul_n_f32(*(float32x2_t *)v40.f32, v18);
  *(float32x4_t *)(a3 + 56) = vaddq_f32(vaddq_f32(v55, vmulq_f32(v42, (float32x4_t)vzip1q_s32((int32x4_t)a4, vdupq_lane_s32(*(int32x2_t *)a4.i8, 1)))), v56);
  result = v38 + vmuls_lane_f32(v18, v26, 3);
  *(float *)(a3 + 72) = result;
  *(float *)(a3 + 76) = v22;
  return result;
}

float specialized _ColorMatrix.init(colorMultiply:premultiplied:)@<S0>(char a1@<W0>, uint64_t a2@<X8>, float a3@<S0>, float a4@<S1>, float a5@<S2>, float a6@<S3>)
{
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float result;

  v12 = -a3;
  if (a3 > 0.0)
    v12 = a3;
  if (v12 <= 0.0031308)
  {
    v13 = v12 * 12.92;
  }
  else
  {
    v13 = 1.0;
    if (v12 != 1.0)
      v13 = (float)(powf(v12, 0.41667) * 1.055) + -0.055;
  }
  v14 = -a4;
  if (a4 > 0.0)
    v14 = a4;
  if (v14 <= 0.0031308)
  {
    v15 = v14 * 12.92;
  }
  else
  {
    v15 = 1.0;
    if (v14 != 1.0)
      v15 = (float)(powf(v14, 0.41667) * 1.055) + -0.055;
  }
  v16 = -a5;
  if (a5 > 0.0)
    v16 = a5;
  if (v16 <= 0.0031308)
  {
    v17 = v16 * 12.92;
  }
  else
  {
    v17 = 1.0;
    if (v16 != 1.0)
      v17 = (float)(powf(v16, 0.41667) * 1.055) + -0.055;
  }
  v18 = -v15;
  if (a4 > 0.0)
    v18 = v15;
  v19 = -v13;
  if (a3 > 0.0)
    v19 = v13;
  if (a5 <= 0.0)
    v17 = -v17;
  v20 = 1.0;
  if ((a1 & 1) != 0)
    v20 = a6;
  *(float *)a2 = v20 * v19;
  *(_QWORD *)(a2 + 12) = 0;
  *(_QWORD *)(a2 + 4) = 0;
  *(_DWORD *)(a2 + 20) = 0;
  *(float *)(a2 + 24) = v20 * v18;
  *(_QWORD *)(a2 + 36) = 0;
  *(_QWORD *)(a2 + 28) = 0;
  *(_DWORD *)(a2 + 44) = 0;
  result = v20 * v17;
  *(float *)(a2 + 48) = v20 * v17;
  *(_QWORD *)(a2 + 60) = 0;
  *(_QWORD *)(a2 + 52) = 0;
  *(_DWORD *)(a2 + 68) = 0;
  *(float *)(a2 + 72) = a6;
  *(_DWORD *)(a2 + 76) = 0;
  return result;
}

double specialized _ColorMatrix.init(hueRotation:)@<D0>(uint64_t a1@<X8>, double a2@<D0>)
{
  __double2 v3;
  float cosval;
  float sinval;
  float32x2_t v6;
  float v7;
  float v8;
  float32x2_t v9;
  float32x2_t v10;
  float32x2_t v11;
  float32x2_t v12;
  double result;

  v3 = __sincos_stret(a2);
  cosval = v3.__cosval;
  sinval = v3.__sinval;
  v6.i32[0] = 1046066128;
  v7 = (float)((float)(cosval * 0.7873) + 0.2126) - (float)(sinval * 0.2126);
  v8 = 0.0722 - (float)(cosval * 0.0722);
  *(float *)(a1 + 8) = (float)(sinval * 0.9278) + v8;
  v9 = vmul_n_f32((float32x2_t)0x3E91D14E3E59B3D0, cosval);
  v6.f32[0] = vsub_f32(v6, v9).f32[0];
  v6.i32[1] = vadd_f32(v9, (float32x2_t)vdup_n_s32(0x3F371759u)).i32[1];
  *(_QWORD *)(a1 + 12) = 0;
  *(float32x2_t *)(a1 + 20) = vadd_f32(vmul_n_f32((float32x2_t)0x3E0F5C293E126E98, sinval), v6);
  *(float *)(a1 + 28) = v8 + (float)(sinval * -0.283);
  *(_QWORD *)(a1 + 32) = 0;
  *(float *)(a1 + 40) = v6.f32[0] - (float)(sinval * 0.7873);
  v10 = vmul_n_f32((float32x2_t)0x3F6D844D3F371759, cosval);
  v11 = vsub_f32((float32x2_t)0x3F6D844D3F371759, v10);
  v12 = vmul_n_f32((float32x2_t)0x3D93DD983F371759, sinval);
  v6.i32[0] = vsub_f32(v11, v12).u32[0];
  v11.i32[1] = vadd_f32(v10, (float32x2_t)vdup_n_s32(0x3D93DD98u)).i32[1];
  *(float *)a1 = v7;
  *(_DWORD *)(a1 + 4) = v6.i32[0];
  *(float32x2_t *)(a1 + 44) = vadd_f32(v12, v11);
  *(_QWORD *)(a1 + 60) = 0;
  *(_QWORD *)(a1 + 52) = 0;
  *(_DWORD *)(a1 + 68) = 0;
  *(_QWORD *)&result = 1065353216;
  *(_QWORD *)(a1 + 72) = 1065353216;
  return result;
}

float specialized _ColorMatrix.init(colorMonochrome:amount:bias:)@<S0>(uint64_t a1@<X8>, float a2@<S0>, float a3@<S1>, float a4@<S2>, float a5@<S3>, float a6@<S4>, float a7@<S5>)
{
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float v55;
  float v56;
  float v57;
  float v58;
  float v59;
  float v60;
  float v61;
  float result;
  float v63;
  float v64;
  float v65;
  float v66;
  float v67;
  float v68;
  float v69;

  v12 = -a2;
  if (a2 <= 0.0)
    v13 = -a2;
  else
    v13 = a2;
  if (v13 > 0.0031308)
  {
    v14 = 1.0;
    if (v13 == 1.0)
    {
      if (a2 <= 0.0)
        goto LABEL_14;
    }
    else
    {
      v14 = (float)(powf(v13, 0.41667) * 1.055) + -0.055;
      if (a2 <= 0.0)
        goto LABEL_14;
    }
LABEL_9:
    v68 = (float)(v14 * 0.7152) * a6;
    if (a2 > 0.0031308)
    {
      v15 = 1.0;
      v12 = a2;
      if (a2 == 1.0)
        goto LABEL_20;
      goto LABEL_16;
    }
    v12 = a2;
LABEL_17:
    v12 = v12 * 12.92;
LABEL_18:
    v15 = v12;
    if (a2 > 0.0)
      goto LABEL_20;
    goto LABEL_19;
  }
  v14 = v13 * 12.92;
  if (a2 > 0.0)
    goto LABEL_9;
LABEL_14:
  v68 = (float)(v14 * -0.7152) * a6;
  if (a2 >= -0.0031308)
    goto LABEL_17;
  if (a2 != -1.0)
  {
LABEL_16:
    v12 = (float)(powf(v12, 0.41667) * 1.055) + -0.055;
    goto LABEL_18;
  }
LABEL_19:
  v15 = -v12;
LABEL_20:
  v65 = v15;
  if (a3 <= 0.0)
    v16 = -a3;
  else
    v16 = a3;
  if (v16 > 0.0031308)
  {
    v17 = 1.0;
    if (v16 != 1.0)
      v17 = (float)(powf(v16, 0.41667) * 1.055) + -0.055;
  }
  else
  {
    v17 = v16 * 12.92;
  }
  v64 = v17;
  if (v16 <= 0.0031308)
  {
    v18 = v16 * 12.92;
  }
  else
  {
    v18 = 1.0;
    if (v16 != 1.0)
      v18 = (float)(powf(v16, 0.41667) * 1.055) + -0.055;
  }
  v63 = v18;
  v66 = v14;
  if (v16 > 0.0031308)
  {
    v19 = 1.0;
    if (v16 != 1.0)
      v19 = (float)(powf(v16, 0.41667) * 1.055) + -0.055;
  }
  else
  {
    v19 = v16 * 12.92;
  }
  if (a4 <= 0.0)
    v20 = -a4;
  else
    v20 = a4;
  if (v20 > 0.0031308)
  {
    v21 = 1.0;
    if (v20 != 1.0)
      v21 = (float)(powf(v20, 0.41667) * 1.055) + -0.055;
  }
  else
  {
    v21 = v20 * 12.92;
  }
  v67 = a3;
  if (v20 <= 0.0031308)
  {
    v22 = v20 * 12.92;
  }
  else
  {
    v22 = 1.0;
    if (v20 == 1.0)
    {
      if (a4 <= 0.0)
        v23 = -0.7152;
      else
        v23 = 0.7152;
      goto LABEL_52;
    }
    v24 = v21;
    v25 = powf(v20, 0.41667);
    v21 = v24;
    v22 = (float)(v25 * 1.055) + -0.055;
  }
  v26 = -0.7152;
  if (a4 > 0.0)
    v26 = 0.7152;
  v23 = v26 * v22;
LABEL_52:
  v69 = a4;
  if (v13 > 0.0031308)
  {
    v27 = 1.0;
    if (v13 != 1.0)
    {
      v28 = v13;
      v29 = v21;
      v30 = v23;
      v31 = powf(v28, 0.41667);
      v23 = v30;
      v21 = v29;
      v27 = (float)(v31 * 1.055) + -0.055;
    }
  }
  else
  {
    v27 = v13 * 12.92;
  }
  if (v16 > 0.0031308)
  {
    v32 = 1.0;
    if (v16 != 1.0)
    {
      v33 = v16;
      v34 = v21;
      v35 = v23;
      v36 = powf(v33, 0.41667);
      v23 = v35;
      v21 = v34;
      v32 = (float)(v36 * 1.055) + -0.055;
    }
  }
  else
  {
    v32 = v16 * 12.92;
  }
  if (v20 > 0.0031308)
  {
    v37 = 1.0;
    if (v20 != 1.0)
    {
      v38 = v20;
      v39 = v21;
      v40 = v23;
      v41 = powf(v38, 0.41667);
      v23 = v40;
      v21 = v39;
      v37 = (float)(v41 * 1.055) + -0.055;
    }
  }
  else
  {
    v37 = v20 * 12.92;
  }
  v42 = -0.2126;
  if (v67 <= 0.0)
    v43 = -0.2126;
  else
    v43 = 0.2126;
  v44 = -v32;
  if (v67 > 0.0)
    v44 = v32;
  v45 = -v27;
  v46 = -v19;
  if (v67 > 0.0)
    v46 = v19;
  v47 = -v63;
  if (v67 > 0.0)
    v47 = v63;
  if (a2 > 0.0)
    v45 = v27;
  v48 = -v66;
  if (a2 > 0.0)
    v48 = v66;
  if (v69 > 0.0)
    v42 = 0.2126;
  v49 = v42 * v21;
  v50 = v43 * v64;
  v51 = (float)(v44 * a7) * a6;
  v52 = (float)(v45 * a7) * a6;
  v53 = a5 * a6;
  v54 = 1.0 - a6;
  v55 = -v22;
  if (v69 > 0.0)
    v55 = v22;
  v56 = v54 + (float)((float)(v55 * 0.0722) * a6);
  v57 = v23 * a6;
  v58 = v49 * a6;
  v59 = (float)(v46 * 0.0722) * a6;
  v60 = v54 + (float)((float)(v47 * 0.7152) * a6);
  v61 = v50 * a6;
  *(float *)a1 = v54 + (float)((float)(v48 * 0.2126) * a6);
  *(float *)(a1 + 4) = v68;
  if (v69 <= 0.0)
    v37 = -v37;
  *(float *)(a1 + 8) = (float)(v65 * 0.0722) * a6;
  *(_DWORD *)(a1 + 12) = 0;
  *(float *)(a1 + 16) = v52;
  *(float *)(a1 + 20) = v61;
  *(float *)(a1 + 24) = v60;
  *(float *)(a1 + 28) = v59;
  *(_DWORD *)(a1 + 32) = 0;
  *(float *)(a1 + 36) = v51;
  *(float *)(a1 + 40) = v58;
  *(float *)(a1 + 44) = v57;
  *(float *)(a1 + 48) = v56;
  *(_DWORD *)(a1 + 52) = 0;
  *(float *)(a1 + 56) = (float)(v37 * a7) * a6;
  *(_QWORD *)(a1 + 64) = 0;
  *(_DWORD *)(a1 + 60) = 0;
  result = v53 + v54;
  *(float *)(a1 + 72) = v53 + v54;
  *(_DWORD *)(a1 + 76) = 0;
  return result;
}

uint64_t specialized _ColorMatrix.init(_:premultiplied:)(uint64_t a1)
{
  return *(_QWORD *)a1;
}

void sub_2350D2614(void *a1@<X0>, int a2@<W1>, void *a3@<X2>, char a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, int a16, char a17, uint64_t a18, int a19, int a20,int a21,int a22,int a23,int a24,int a25,int a26,int a27,int a28,int a29,int a30,int a31,int a32,int a33,int a34,int a35,int a36,int a37,int a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50)
{
  uint64_t v50;
  uint64_t v51;
  char v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int v57;

  outlined consume of GraphicsFilter(a1, a2, a3, a4, a5, a6, a7, a8, a9, v50, v53, v54, v55, v56, v57, SBYTE2(v57));
  *(_QWORD *)v51 = 0;
  *(_QWORD *)(v51 + 8) = 0;
  *(_QWORD *)(v51 + 16) = 0;
  *(_QWORD *)(v51 + 24) = 0;
  *(_QWORD *)(v51 + 32) = 0;
  *(_QWORD *)(v51 + 40) = 0;
  *(_QWORD *)(v51 + 48) = 0;
  *(_QWORD *)(v51 + 56) = 0;
  *(_QWORD *)(v51 + 64) = 0;
  *(_QWORD *)(v51 + 72) = 0;
  *(_BYTE *)(v51 + 80) = v52;
}

uint64_t specialized _ColorMatrix.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  int v5;
  int v6;
  int v7;
  int v8;
  uint64_t result;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  int v15;
  _BYTE v16[24];
  uint64_t v17;

  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Decoder.unkeyedContainer()();
  if (v2)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v16, v17);
  UnkeyedDecodingContainer.decodeRow()(&v14);
  v13 = v14;
  v5 = v15;
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v16, v17);
  UnkeyedDecodingContainer.decodeRow()(&v14);
  v12 = v14;
  v6 = v15;
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v16, v17);
  UnkeyedDecodingContainer.decodeRow()(&v14);
  v11 = v14;
  v7 = v15;
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v16, v17);
  UnkeyedDecodingContainer.decodeRow()(&v14);
  v10 = v14;
  v8 = v15;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v16);
  result = __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  *(_OWORD *)a2 = v13;
  *(_DWORD *)(a2 + 16) = v5;
  *(_OWORD *)(a2 + 20) = v12;
  *(_DWORD *)(a2 + 36) = v6;
  *(_OWORD *)(a2 + 40) = v11;
  *(_DWORD *)(a2 + 56) = v7;
  *(_OWORD *)(a2 + 60) = v10;
  *(_DWORD *)(a2 + 76) = v8;
  return result;
}

ValueMetadata *type metadata accessor for ColorMatrix()
{
  return &type metadata for ColorMatrix;
}

ValueMetadata *type metadata accessor for _ColorMatrix()
{
  return &type metadata for _ColorMatrix;
}

void Text.Effect.TransformContext.update(target:for:spring:)(uint64_t a1@<X0>, uint64_t a2@<X1>, double *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  char v5;
  uint64_t v6;
  double v7;
  double v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  double v12;
  uint64_t v13;
  double v16;
  uint64_t v17;
  double v18;
  double v19;
  double v20;
  uint64_t v21;
  double v22;
  double v23;
  double v24;
  double v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  char v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  double v38;
  double v39;
  uint64_t v40;
  uint64_t v41;
  double v47;
  double v48;
  __int128 v49;
  double v50;
  double v51;
  double v52;
  uint64_t v53;
  uint64_t v54;
  double v55;
  double v56;
  uint64_t v57;
  uint64_t v58;
  char v59;
  double v60;
  double v61;
  double v62;
  __int128 v63;
  double v64;
  double v65;
  uint64_t v66;
  uint64_t v67;
  char v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  uint64_t v87;
  char v88;
  __int128 v89;
  uint64_t v90;
  uint64_t v91;
  char v92;
  uint64_t v93;
  char v94;
  __int128 v95;
  __int128 v96;
  uint64_t v97;
  uint64_t v98;
  __int128 v99;
  uint64_t v100;
  char v101;

  if (__OFSUB__(*(_QWORD *)v4, a2))
  {
    __break(1u);
    goto LABEL_16;
  }
  v16 = *(double *)a1;
  v7 = *(double *)(a1 + 8);
  v8 = *(double *)(a1 + 16);
  v9 = *(_QWORD *)(a1 + 24);
  v10 = *(_QWORD *)(a1 + 32);
  v11 = *(double *)(a1 + 40);
  v12 = *(double *)(a1 + 48);
  v13 = *(_QWORD *)(a1 + 56);
  v6 = *(_QWORD *)(a1 + 64);
  v5 = *(_BYTE *)(a1 + 72);
  if (*(_QWORD *)v4 == a2)
  {
    if ((*(_BYTE *)(v4 + 16) & 1) != 0)
    {
      v17 = *(_QWORD *)(v4 + 8);
      *(_QWORD *)&v95 = &type metadata for Text.Effect.DrawingStateAttribute;
      *((_QWORD *)&v95 + 1) = v17;
      v96 = (unint64_t)a2;
      LOBYTE(v4) = 1;
      LOBYTE(v97) = 1;
      v98 = 0;
      LOBYTE(v99) = 1;
      v48 = v16;
      if (one-time initialization token for zero == -1)
      {
LABEL_5:
        LOBYTE(v89) = v4;
        v60 = v16;
        v61 = v7;
        v62 = v8;
        *(_QWORD *)&v63 = v9;
        *((_QWORD *)&v63 + 1) = v10;
        v64 = v11;
        v65 = v12;
        v66 = v13;
        v67 = v6;
        v68 = v5;
        *(double *)&v69 = v16;
        *((double *)&v69 + 1) = v7;
        *(double *)&v70 = v8;
        *((_QWORD *)&v70 + 1) = v9;
        *(_QWORD *)&v71 = v10;
        *((double *)&v71 + 1) = v11;
        *(double *)&v72 = v12;
        *((_QWORD *)&v72 + 1) = v13;
        *(_QWORD *)&v73 = v6;
        BYTE8(v73) = v5;
        v74 = static Text.Effect.DrawingState.zero;
        v75 = *(_OWORD *)algn_25622D270;
        v76 = xmmword_25622D280;
        v77 = unk_25622D290;
        *(_QWORD *)&v78 = qword_25622D2A0;
        BYTE8(v78) = byte_25622D2A8;
        *(_QWORD *)&v80 = 0;
        v79 = 0uLL;
        BYTE8(v80) = v4;
        *(_QWORD *)&v81 = 0;
        BYTE8(v81) = v4;
        *(_QWORD *)&v82 = 0;
        BYTE8(v82) = v4;
        swift_beginAccess();
        specialized Text.Effect.AttributeTracker.Tracker.subscript.setter((uint64_t)&v60, (uint64_t)&v95);
        swift_endAccess();
        v16 = v48;
        goto LABEL_14;
      }
LABEL_16:
      swift_once();
      v16 = v48;
      goto LABEL_5;
    }
    if ((*(_BYTE *)(v4 + 56) & 1) != 0)
    {
      v18 = *a3;
      v19 = a3[1];
      v20 = a3[2];
      v21 = *(_QWORD *)(v4 + 8);
      v22 = *(double *)(v4 + 40) - *(double *)(v4 + 24);
      if (v22 < 0.0)
        v22 = 0.0;
      *(_QWORD *)&v95 = &type metadata for Text.Effect.DrawingStateAttribute;
      *((_QWORD *)&v95 + 1) = v21;
      v96 = (unint64_t)a2;
      LOBYTE(v97) = 1;
      v98 = 0;
      LOBYTE(v99) = 1;
      specialized Text.Effect.AttributeTracker.update<A>(for:target:spring:at:)((uint64_t)&v95, a1, (uint64_t)&v60, v18, v19, v20, v22);
      v16 = v60;
      v7 = v61;
      v8 = v62;
      v10 = *((_QWORD *)&v63 + 1);
      v9 = v63;
      v11 = v64;
      v12 = v65;
      v13 = v66;
      v6 = v67;
      v5 = v68;
    }
    else
    {
      v23 = *(double *)(v4 + 48);
      v24 = *(double *)(v4 + 8);
      v25 = *(double *)(v4 + 40);
      v26 = *(_QWORD *)(v4 + 64);
      v27 = *(_BYTE *)(v4 + 72);
      v28 = *(_QWORD *)(v4 + 368);
      v29 = *(_BYTE *)(v4 + 376);
      v60 = *(double *)&a2;
      v61 = v24;
      LOBYTE(v62) = 0;
      v63 = *(_OWORD *)(v4 + 24);
      v64 = v25;
      v65 = v23;
      LOBYTE(v66) = 0;
      v67 = v26;
      v68 = v27;
      v30 = *(_OWORD *)(v4 + 96);
      v69 = *(_OWORD *)(v4 + 80);
      v70 = v30;
      v31 = *(_OWORD *)(v4 + 128);
      v71 = *(_OWORD *)(v4 + 112);
      v72 = v31;
      v32 = *(_OWORD *)(v4 + 160);
      v73 = *(_OWORD *)(v4 + 144);
      v74 = v32;
      v33 = *(_OWORD *)(v4 + 192);
      v75 = *(_OWORD *)(v4 + 176);
      v76 = v33;
      v34 = *(_OWORD *)(v4 + 224);
      v77 = *(_OWORD *)(v4 + 208);
      v78 = v34;
      v49 = *(_OWORD *)(v4 + 256);
      v79 = *(_OWORD *)(v4 + 240);
      v80 = v49;
      v35 = *(_OWORD *)(v4 + 288);
      v81 = *(_OWORD *)(v4 + 272);
      v82 = v35;
      v36 = *(_OWORD *)(v4 + 320);
      v83 = *(_OWORD *)(v4 + 304);
      v84 = v36;
      v37 = *(_OWORD *)(v4 + 352);
      v85 = *(_OWORD *)(v4 + 336);
      v86 = v37;
      v87 = v28;
      v88 = v29;
      v38 = v25 - v23;
      if (v38 < 0.0)
        v39 = 0.0;
      else
        v39 = v38;
      v40 = *(_QWORD *)(a1 + 32);
      v41 = *(_QWORD *)(a1 + 40);
      outlined retain of Text.Effect.TransformContext((uint64_t)&v60);
      v95 = 0u;
      v96 = 0u;
      v97 = v40;
      v98 = v41;
      __asm { FMOV            V0.2D, #1.0 }
      v99 = _Q0;
      v100 = 0x3FF0000000000000;
      v101 = 0;
      specialized Spring.settlingDuration<A>(target:initialVelocity:epsilon:)(1.0, 0.0, 0.001, 0.0, 10.0);
      v89 = xmmword_2352826E0;
      v90 = 0x3FF0000000000000;
      Spring.scaledResponse(_:)(0.2 / v47);
      outlined release of Text.Effect.TransformContext((uint64_t)&v60);
      *(_QWORD *)&v89 = &type metadata for Text.Effect.DrawingStateAttribute;
      *((double *)&v89 + 1) = v24;
      v90 = a2;
      v91 = 0;
      v92 = 1;
      v93 = 0;
      v94 = 1;
      specialized Text.Effect.AttributeTracker.update<A>(for:target:spring:at:)((uint64_t)&v89, (uint64_t)&v95, (uint64_t)&v50, v50, v51, v52, v39);
      v16 = v50;
      v7 = v51;
      v8 = v52;
      v9 = v53;
      v10 = v54;
      v11 = v55;
      v12 = v56;
      v13 = v57;
      v6 = v58;
      v5 = v59;
    }
  }
LABEL_14:
  *(double *)a4 = v16;
  *(double *)(a4 + 8) = v7;
  *(double *)(a4 + 16) = v8;
  *(_QWORD *)(a4 + 24) = v9;
  *(_QWORD *)(a4 + 32) = v10;
  *(double *)(a4 + 40) = v11;
  *(double *)(a4 + 48) = v12;
  *(_QWORD *)(a4 + 56) = v13;
  *(_QWORD *)(a4 + 64) = v6;
  *(_BYTE *)(a4 + 72) = v5;
}

void specialized Spring.velocity<A>(target:initialVelocity:time:)(uint64_t a1@<X0>, float64x2_t *a2@<X1>, uint64_t a3@<X8>, double a4@<D0>, double a5@<D1>, double a6@<D2>)
{
  double v11;
  long double v12;
  long double v13;
  double v14;
  double v15;
  double v16;
  float64x2_t v17;
  float64x2_t v18;
  float64x2_t v19;
  float64x2_t v20;
  float64x2_t v21;
  double v22;
  float64x2_t v23;
  float64x2_t v24;
  float64x2_t v25;
  float64x2_t v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  __double2 v32;
  double v33;
  double v34;
  float64x2_t v35;
  float64x2_t v36;
  float64x2_t v37;
  float64x2_t v38;
  float64x2_t v39;
  double v40;
  float64x2_t v41;
  float64x2_t v42;
  float64x2_t v43;
  float64x2_t v44;
  float64x2_t v45;
  float64x2_t v46;
  float64x2_t v47;
  double v48;
  double v49;
  double v50;
  long double v51;
  float64x2_t v52;
  float64x2_t v53;
  float64x2_t v54;
  float64x2_t v55;
  float64x2_t v56;
  double v57;
  double v58;
  float64x2_t v59;
  char v60;

  if (a5 >= 0.0)
  {
    if (a5 <= 0.0)
    {
      v49 = *(double *)(a1 + 64);
      v50 = v49 * a6 - a2[4].f64[0];
      v51 = exp(-(a6 * a4));
      v52 = *(float64x2_t *)(a1 + 16);
      v53 = vsubq_f64(vmulq_n_f64(v52, a6), a2[1]);
      v54 = *(float64x2_t *)(a1 + 32);
      v55 = *(float64x2_t *)(a1 + 48);
      v56 = vsubq_f64(vmulq_n_f64(v54, a6), a2[2]);
      v57 = (a4 * a6 + -1.0) * v51;
      v58 = v51 * a6;
      v40 = v58 * v49;
      v41 = vmulq_n_f64(v52, v58);
      v42 = vmulq_n_f64(v53, v57);
      v43 = vmulq_n_f64(v54, v58);
      v44 = vmulq_n_f64(v56, v57);
      v59 = vsubq_f64(vmulq_n_f64(v55, a6), a2[3]);
      v46 = vmulq_n_f64(v55, v58);
      v47 = vmulq_n_f64(v59, v57);
      v48 = v57 * v50;
      v23 = vaddq_f64(vmulq_n_f64(*(float64x2_t *)a1, v58), vmulq_n_f64(vsubq_f64(vmulq_n_f64(*(float64x2_t *)a1, a6), *a2), v57));
    }
    else
    {
      v28 = exp(-(a6 * a4));
      v29 = a4 * a5;
      v30 = *(double *)(a1 + 64);
      v31 = v30 * a6 - a2[4].f64[0];
      v32 = __sincos_stret(v29);
      v33 = v28 * (v32.__sinval * a5 + v32.__cosval * a6);
      v34 = v28 * (v32.__sinval * a6 - v32.__cosval * a5) / a5;
      v35 = *(float64x2_t *)(a1 + 16);
      v36 = vsubq_f64(vmulq_n_f64(v35, a6), a2[1]);
      v37 = *(float64x2_t *)(a1 + 32);
      v38 = *(float64x2_t *)(a1 + 48);
      v39 = vsubq_f64(vmulq_n_f64(v37, a6), a2[2]);
      v40 = v33 * v30;
      v41 = vmulq_n_f64(v35, v33);
      v42 = vmulq_n_f64(v36, v34);
      v43 = vmulq_n_f64(v37, v33);
      v44 = vmulq_n_f64(v39, v34);
      v45 = vsubq_f64(vmulq_n_f64(v38, a6), a2[3]);
      v46 = vmulq_n_f64(v38, v33);
      v47 = vmulq_n_f64(v45, v34);
      v48 = v34 * v31;
      v23 = vaddq_f64(vmulq_n_f64(*(float64x2_t *)a1, v33), vmulq_n_f64(vsubq_f64(vmulq_n_f64(*(float64x2_t *)a1, a6), *a2), v34));
    }
    v24 = vaddq_f64(v41, v42);
    v25 = vaddq_f64(v43, v44);
    v26 = vaddq_f64(v46, v47);
    v27 = v40 + v48;
  }
  else
  {
    v11 = -a5 - a6;
    v12 = v11 * exp(v11 * a4);
    v13 = (a5 - a6) * exp((a5 - a6) * a4);
    v14 = ((a6 - a5) * v12 + v11 * v13) / (a5 + a5) + 1.0;
    v15 = v14 * *(double *)(a1 + 64);
    v16 = (v12 - v13) / (a5 + a5);
    v17 = vmulq_n_f64(a2[1], v16);
    v18 = vmulq_n_f64(*(float64x2_t *)(a1 + 32), v14);
    v19 = vmulq_n_f64(*(float64x2_t *)(a1 + 48), v14);
    v20 = vmulq_n_f64(a2[2], v16);
    v21 = vmulq_n_f64(a2[3], v16);
    v22 = v16 * a2[4].f64[0];
    v23 = vsubq_f64(vmulq_n_f64(*(float64x2_t *)a1, v14), vmulq_n_f64(*a2, v16));
    v24 = vsubq_f64(vmulq_n_f64(*(float64x2_t *)(a1 + 16), v14), v17);
    v25 = vsubq_f64(v18, v20);
    v26 = vsubq_f64(v19, v21);
    v27 = v15 - v22;
  }
  v60 = *(_BYTE *)(a1 + 72);
  *(float64x2_t *)a3 = v23;
  *(float64x2_t *)(a3 + 16) = v24;
  *(float64x2_t *)(a3 + 32) = v25;
  *(float64x2_t *)(a3 + 48) = v26;
  *(double *)(a3 + 64) = v27;
  *(_BYTE *)(a3 + 72) = v60;
}

void specialized Spring.velocity<A>(target:initialVelocity:time:)(double a1, double a2, double a3, double a4, double a5)
{
  if (a4 >= 0.0)
  {
    if (a4 <= 0.0)
    {
      exp(-(a5 * a3));
    }
    else
    {
      exp(-(a5 * a3));
      __sincos_stret(a3 * a4);
    }
  }
  else
  {
    exp((-a4 - a5) * a3);
    exp((a4 - a5) * a3);
  }
}

void specialized Text.Effect.AttributeTracker.Value.updateSettlingTime(spring:target:at:)(uint64_t a1, double a2, double a3, double a4, double a5)
{
  uint64_t v5;
  float64x2_t v10;
  float64x2_t v11;
  float64x2_t v12;
  float64x2_t v13;
  float64x2_t v14;
  float64x2_t v15;
  float64x2_t v16;
  float64x2_t v17;
  float64x2_t v18;
  float64x2_t v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  int v25;
  __int128 v26;
  __int128 v27;
  BOOL v28;
  int v29;
  __int128 v33;
  __int128 v34;
  char v35;
  float64x2_t v36;
  float64x2_t v37;
  __int128 v38;
  float64x2_t v39;
  double v40;
  float64x2_t v41;
  float64x2_t v42;
  float64x2_t v43;
  float64x2_t v44;
  _OWORD v46[4];
  uint64_t v47;
  char v48;
  float64x2_t v49[3];
  _OWORD v50[2];
  __int128 v51;
  __int128 v52;
  __int128 v53;
  _BYTE v54[25];

  v10 = *(float64x2_t *)a1;
  v11 = *(float64x2_t *)(a1 + 16);
  v12 = vmulq_f64(v10, v10);
  v13 = vmulq_f64(v11, v11);
  v14 = vaddq_f64(vaddq_f64(vaddq_f64(v12, (float64x2_t)vdupq_laneq_s64((int64x2_t)v12, 1)), v13), (float64x2_t)vdupq_laneq_s64((int64x2_t)v13, 1));
  v15 = *(float64x2_t *)(a1 + 32);
  v16 = *(float64x2_t *)(a1 + 48);
  v17 = vmulq_f64(v15, v15);
  v18 = vaddq_f64(vaddq_f64(v14, v17), (float64x2_t)vdupq_laneq_s64((int64x2_t)v17, 1));
  v19 = vmulq_f64(v16, v16);
  v20 = *(double *)(a1 + 64);
  v21 = vaddq_f64(vaddq_f64(v18, v19), (float64x2_t)vdupq_laneq_s64((int64x2_t)v19, 1)).f64[0] + v20 * v20;
  v22 = *(double *)(v5 + 240);
  v23 = *(double *)(v5 + 248);
  v24 = *(double *)(v5 + 256);
  v25 = *(unsigned __int8 *)(v5 + 264);
  if (v25 != 1)
    goto LABEL_4;
  v26 = *(_OWORD *)(v5 + 128);
  v53 = *(_OWORD *)(v5 + 112);
  *(_OWORD *)v54 = v26;
  *(_OWORD *)&v54[9] = *(_OWORD *)(v5 + 137);
  v27 = *(_OWORD *)(v5 + 96);
  v51 = *(_OWORD *)(v5 + 80);
  v52 = v27;
  v43 = v15;
  v44 = v10;
  v41 = v16;
  v42 = v11;
  v28 = specialized static Text.Effect.DrawingState.== infix(_:_:)((uint64_t)&v51, a1);
  v16 = v41;
  v11 = v42;
  v15 = v43;
  v10 = v44;
  if (v28
    || vabdd_f64(v21, *(double *)&v51 * *(double *)&v51+ *((double *)&v51 + 1) * *((double *)&v51 + 1)+ *(double *)&v52 * *(double *)&v52+ *((double *)&v52 + 1) * *((double *)&v52 + 1)+ *(double *)&v53 * *(double *)&v53+ *((double *)&v53 + 1) * *((double *)&v53 + 1)+ *(double *)v54 * *(double *)v54+ *(double *)&v54[8] * *(double *)&v54[8]+ *(double *)&v54[16] * *(double *)&v54[16]) <= 0.001)
  {
    *(_QWORD *)(v5 + 288) = 0;
    *(_BYTE *)(v5 + 296) = 1;
  }
  else
  {
LABEL_4:
    if (vabdd_f64(v21, *(double *)v5 * *(double *)v5+ *(double *)(v5 + 8) * *(double *)(v5 + 8)+ *(double *)(v5 + 16) * *(double *)(v5 + 16)+ *(double *)(v5 + 24) * *(double *)(v5 + 24)+ *(double *)(v5 + 32) * *(double *)(v5 + 32)+ *(double *)(v5 + 40) * *(double *)(v5 + 40)+ *(double *)(v5 + 48) * *(double *)(v5 + 48)+ *(double *)(v5 + 56) * *(double *)(v5 + 56)+ *(double *)(v5 + 64) * *(double *)(v5 + 64)) > 0.001)v29 = 1;
    else
      v29 = v25;
    if (v29 == 1 || v22 != a2 || v23 != a3 || v24 != a4)
    {
      v33 = *(_OWORD *)(a1 + 48);
      *(_OWORD *)(v5 + 32) = *(_OWORD *)(a1 + 32);
      *(_OWORD *)(v5 + 48) = v33;
      *(_OWORD *)(v5 + 57) = *(_OWORD *)(a1 + 57);
      v34 = *(_OWORD *)(a1 + 16);
      *(_OWORD *)v5 = *(_OWORD *)a1;
      *(_OWORD *)(v5 + 16) = v34;
      *(double *)&v34 = v20 - *(double *)(v5 + 144);
      v35 = *(_BYTE *)(a1 + 72);
      v36 = vsubq_f64(v11, *(float64x2_t *)(v5 + 96));
      v46[0] = vsubq_f64(v10, *(float64x2_t *)(v5 + 80));
      v46[1] = v36;
      v37 = vsubq_f64(v16, *(float64x2_t *)(v5 + 128));
      v46[2] = vsubq_f64(v15, *(float64x2_t *)(v5 + 112));
      v46[3] = v37;
      v47 = v34;
      v48 = v35;
      v38 = *(_OWORD *)(v5 + 208);
      v49[2] = *(float64x2_t *)(v5 + 192);
      v50[0] = v38;
      *(_OWORD *)((char *)v50 + 9) = *(_OWORD *)(v5 + 217);
      v39 = *(float64x2_t *)(v5 + 176);
      v49[0] = *(float64x2_t *)(v5 + 160);
      v49[1] = v39;
      specialized Spring.settlingDuration<A>(target:initialVelocity:epsilon:)((double *)v46, v49, 0.01, a2, a3);
      *(double *)(v5 + 288) = v40 + a5;
      *(_BYTE *)(v5 + 296) = 0;
      *(double *)(v5 + 240) = a2;
      *(double *)(v5 + 248) = a3;
      *(double *)(v5 + 256) = a4;
      *(_BYTE *)(v5 + 264) = 0;
    }
  }
}

void specialized Text.Effect.AttributeTracker.Value.updateSettlingTime(spring:target:at:)(double a1, double a2, double a3, double a4, double a5)
{
  uint64_t v5;
  double v10;
  int v11;
  double v12;
  double v16;

  v10 = a4 * a4;
  v11 = *(unsigned __int8 *)(v5 + 48);
  if (v11 == 1 && ((v12 = *(double *)(v5 + 8), v12 == a4) || vabdd_f64(v10, v12 * v12) <= 0.001))
  {
    *(_QWORD *)(v5 + 72) = 0;
    *(_BYTE *)(v5 + 80) = 1;
  }
  else
  {
    if (vabdd_f64(v10, *(double *)v5 * *(double *)v5) > 0.001)
      v11 = 1;
    if (v11 == 1 || *(double *)(v5 + 24) != a1 || *(double *)(v5 + 32) != a2 || *(double *)(v5 + 40) != a3)
    {
      *(double *)v5 = a4;
      specialized Spring.settlingDuration<A>(target:initialVelocity:epsilon:)(a4 - *(double *)(v5 + 8), *(double *)(v5 + 16), 0.01, a1, a2);
      *(double *)(v5 + 72) = v16 + a5;
      *(_BYTE *)(v5 + 80) = 0;
      *(double *)(v5 + 24) = a1;
      *(double *)(v5 + 32) = a2;
      *(double *)(v5 + 40) = a3;
      *(_BYTE *)(v5 + 48) = 0;
    }
  }
}

uint64_t specialized Text.Effect.AttributeTracker.Tracker.subscript.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  double *v4;
  __int128 v6;
  char v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char isUniquelyReferenced_nonNull_native;
  uint64_t result;
  double v13;
  char v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  char v18;
  double v19;
  __n128 v20;
  __n128 v21;
  __n128 v22;
  __n128 v23;
  char v24;
  uint64_t v25;
  _BOOL8 v26;
  uint64_t v27;
  __n128 v28;
  __n128 v29;
  __n128 v30;
  __n128 v31;
  uint64_t v32;
  char v33;
  double v34;
  void (*v35)(_QWORD *@<X8>);
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  __n128 v43;
  __n128 v44;
  __n128 v45;
  __n128 v46;
  char v47;
  uint64_t v48;
  _BOOL8 v49;
  uint64_t v50;
  __n128 v51;
  __n128 v52;
  __n128 v53;
  __n128 v54;
  uint64_t v55;
  char v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _BYTE v61[16];
  _BYTE v62[16];
  _OWORD v63[3];
  char v64;
  double v65;
  char v66;
  double v67;
  char v68;

  v4 = (double *)v2;
  v6 = *(_OWORD *)(a2 + 16);
  v63[0] = *(_OWORD *)a2;
  v63[1] = v6;
  v63[2] = *(_OWORD *)(a2 + 32);
  v64 = *(_BYTE *)(a2 + 48);
  v9 = !*(_QWORD *)(*(_QWORD *)(v2 + 8) + 16)
    || (specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v63), (v7 & 1) == 0)
    || (type metadata accessor for Text.Effect.AttributeTracker.ValueBox<Text.Effect.DrawingStateAttribute>(0, &lazy cache variable for type metadata for Text.Effect.AttributeTracker.ValueBox<Text.Effect.DrawingStateAttribute>, (uint64_t (*)(void))lazy protocol witness table accessor for type Text.Effect.DrawingStateAttribute and conformance Text.Effect.DrawingStateAttribute, (uint64_t)&type metadata for Text.Effect.DrawingStateAttribute), (v8 = swift_dynamicCastClass()) == 0)|| (*(_BYTE *)(v8 + 296) & 1) != 0|| (*(_BYTE *)(v8 + 312) & 1) != 0|| *(double *)(v8 + 304) <= *(double *)(v8 + 288);
  type metadata accessor for Text.Effect.AttributeTracker.ValueBox<Text.Effect.DrawingStateAttribute>(0, &lazy cache variable for type metadata for Text.Effect.AttributeTracker.ValueBox<Text.Effect.DrawingStateAttribute>, (uint64_t (*)(void))lazy protocol witness table accessor for type Text.Effect.DrawingStateAttribute and conformance Text.Effect.DrawingStateAttribute, (uint64_t)&type metadata for Text.Effect.DrawingStateAttribute);
  v10 = swift_allocObject();
  memcpy((void *)(v10 + 16), (const void *)a1, 0x129uLL);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v67 = *(double *)(v2 + 8);
  *(_QWORD *)(v2 + 8) = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v10, (uint64_t)v63, isUniquelyReferenced_nonNull_native);
  *(double *)(v2 + 8) = v67;
  result = swift_bridgeObjectRelease();
  v13 = *(double *)(a1 + 272);
  v14 = *(_BYTE *)(a1 + 280);
  if ((v14 & 1) != 0
    || (outlined init with take of Double?(a1 + 288, (uint64_t)v62),
        result = outlined init with take of Double?((uint64_t)v62, (uint64_t)&v65),
        (v66 & 1) != 0))
  {
    if ((v9 & 1) != 0)
      return result;
  }
  else
  {
    v34 = v13;
    if (((v9 ^ (v65 > v13)) & 1) != 0)
      return result;
    if ((v9 & 1) != 0)
    {
      v35 = 0;
LABEL_24:
      outlined init with take of Double?(a1 + 288, (uint64_t)v61);
      outlined init with take of Double?((uint64_t)v61, (uint64_t)&v67);
      if ((v68 & 1) != 0 || v67 <= v34)
        return outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed @escaping @callee_guaranteed (@unowned Bool) -> ()) -> ())?((uint64_t)v35);
      v39 = *((_QWORD *)v4 + 2);
      v16 = __OFADD__(v39, 1);
      v40 = v39 + 1;
      if (v16)
      {
        __break(1u);
      }
      else
      {
        *((_QWORD *)v4 + 2) = v40;
        a1 = *((_QWORD *)&v63[0] + 1);
        v41 = swift_isUniquelyReferenced_nonNull_native();
        v42 = *((_QWORD *)v4 + 3);
        v60 = v42;
        v4[3] = -0.0;
        v9 = specialized __RawDictionaryStorage.find<A>(_:)(v43, v44, v45, v46);
        v48 = *(_QWORD *)(v42 + 16);
        v49 = (v47 & 1) == 0;
        v50 = v48 + v49;
        if (!__OFADD__(v48, v49))
        {
          v3 = v47;
          if (*(_QWORD *)(v42 + 24) >= v50)
          {
            if ((v41 & 1) == 0)
              goto LABEL_46;
            goto LABEL_32;
          }
          specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v50, v41);
          v55 = specialized __RawDictionaryStorage.find<A>(_:)(v51, v52, v53, v54);
          if ((v3 & 1) == (v56 & 1))
          {
            v9 = v55;
            while (1)
            {
LABEL_32:
              *((_QWORD *)v4 + 3) = v42;
              swift_bridgeObjectRelease();
              v4 = (double *)*((_QWORD *)v4 + 3);
              swift_bridgeObjectRetain();
              if ((v3 & 1) == 0)
                specialized _NativeDictionary._insert(at:key:value:)(v9, a1, 0, v4);
              v57 = *((_QWORD *)v4 + 7);
              swift_bridgeObjectRelease();
              v58 = *(_QWORD *)(v57 + 8 * v9);
              v16 = __OFADD__(v58, 1);
              v59 = v58 + 1;
              if (!v16)
                break;
LABEL_45:
              __break(1u);
LABEL_46:
              specialized _NativeDictionary.copy()();
              v42 = v60;
            }
            *(_QWORD *)(v57 + 8 * v9) = v59;
            return outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed @escaping @callee_guaranteed (@unowned Bool) -> ()) -> ())?((uint64_t)v35);
          }
LABEL_47:
          result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
          __break(1u);
          return result;
        }
      }
      __break(1u);
      goto LABEL_45;
    }
  }
  v15 = *(_QWORD *)(v2 + 16);
  v16 = __OFSUB__(v15, 1);
  v17 = v15 - 1;
  if (v16)
  {
    __break(1u);
    goto LABEL_40;
  }
  *(_QWORD *)(v2 + 16) = v17;
  v10 = *((_QWORD *)&v63[0] + 1);
  v18 = swift_isUniquelyReferenced_nonNull_native();
  v67 = *(double *)(v2 + 24);
  v19 = v67;
  v4[3] = -0.0;
  v9 = specialized __RawDictionaryStorage.find<A>(_:)(v20, v21, v22, v23);
  v25 = *(_QWORD *)(*(_QWORD *)&v19 + 16);
  v26 = (v24 & 1) == 0;
  v27 = v25 + v26;
  if (__OFADD__(v25, v26))
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  v3 = v24;
  if (*(_QWORD *)(*(_QWORD *)&v19 + 24) >= v27)
  {
    if ((v18 & 1) == 0)
      goto LABEL_42;
  }
  else
  {
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v27, v18);
    v19 = v67;
    v32 = specialized __RawDictionaryStorage.find<A>(_:)(v28, v29, v30, v31);
    if ((v3 & 1) != (v33 & 1))
      goto LABEL_47;
    v9 = v32;
  }
  while (1)
  {
    v4[3] = v19;
    swift_bridgeObjectRelease();
    v36 = (_QWORD *)*((_QWORD *)v4 + 3);
    swift_bridgeObjectRetain();
    if ((v3 & 1) == 0)
      specialized _NativeDictionary._insert(at:key:value:)(v9, v10, 0, v36);
    v10 = v36[7];
    result = swift_bridgeObjectRelease();
    v37 = *(_QWORD *)(v10 + 8 * v9);
    v16 = __OFSUB__(v37, 1);
    v38 = v37 - 1;
    if (!v16)
      break;
LABEL_41:
    __break(1u);
LABEL_42:
    specialized _NativeDictionary.copy()();
    v19 = v67;
  }
  *(_QWORD *)(v10 + 8 * v9) = v38;
  if ((v14 & 1) == 0)
  {
    v34 = v13;
    v35 = protocol witness for SetAlgebra.init() in conformance NSCalendarUnit;
    goto LABEL_24;
  }
  return result;
}

{
  uint64_t v2;
  char v3;
  double *v4;
  __int128 v6;
  char v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  char isUniquelyReferenced_nonNull_native;
  uint64_t result;
  double v15;
  char v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  char v20;
  double v21;
  __n128 v22;
  __n128 v23;
  __n128 v24;
  __n128 v25;
  char v26;
  uint64_t v27;
  _BOOL8 v28;
  uint64_t v29;
  __n128 v30;
  __n128 v31;
  __n128 v32;
  __n128 v33;
  uint64_t v34;
  char v35;
  double v36;
  void (*v37)(_QWORD *@<X8>);
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  __n128 v45;
  __n128 v46;
  __n128 v47;
  __n128 v48;
  char v49;
  uint64_t v50;
  _BOOL8 v51;
  uint64_t v52;
  __n128 v53;
  __n128 v54;
  __n128 v55;
  __n128 v56;
  uint64_t v57;
  char v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _BYTE v63[16];
  _BYTE v64[16];
  _OWORD v65[3];
  char v66;
  double v67;
  char v68;
  double v69;
  char v70;

  v4 = (double *)v2;
  v6 = *(_OWORD *)(a2 + 16);
  v65[0] = *(_OWORD *)a2;
  v65[1] = v6;
  v65[2] = *(_OWORD *)(a2 + 32);
  v66 = *(_BYTE *)(a2 + 48);
  v9 = !*(_QWORD *)(*(_QWORD *)(v2 + 8) + 16)
    || (specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v65), (v7 & 1) == 0)
    || (type metadata accessor for Text.Effect.AttributeTracker.ValueBox<Text.Effect.DrawingStateAttribute>(0, &lazy cache variable for type metadata for Text.Effect.AttributeTracker.ValueBox<Text.Effect.WidthMultiplierAttribute>, (uint64_t (*)(void))lazy protocol witness table accessor for type Text.Effect.WidthMultiplierAttribute and conformance Text.Effect.WidthMultiplierAttribute, (uint64_t)&type metadata for Text.Effect.WidthMultiplierAttribute), (v8 = swift_dynamicCastClass()) == 0)|| (*(_BYTE *)(v8 + 80) & 1) != 0|| (*(_BYTE *)(v8 + 96) & 1) != 0|| *(double *)(v8 + 88) <= *(double *)(v8 + 72);
  type metadata accessor for Text.Effect.AttributeTracker.ValueBox<Text.Effect.DrawingStateAttribute>(0, &lazy cache variable for type metadata for Text.Effect.AttributeTracker.ValueBox<Text.Effect.WidthMultiplierAttribute>, (uint64_t (*)(void))lazy protocol witness table accessor for type Text.Effect.WidthMultiplierAttribute and conformance Text.Effect.WidthMultiplierAttribute, (uint64_t)&type metadata for Text.Effect.WidthMultiplierAttribute);
  v10 = swift_allocObject();
  v11 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(v10 + 48) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(v10 + 64) = v11;
  *(_OWORD *)(v10 + 80) = *(_OWORD *)(a1 + 64);
  *(_BYTE *)(v10 + 96) = *(_BYTE *)(a1 + 80);
  v12 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v10 + 16) = *(_OWORD *)a1;
  *(_OWORD *)(v10 + 32) = v12;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v69 = *(double *)(v2 + 8);
  *(_QWORD *)(v2 + 8) = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v10, (uint64_t)v65, isUniquelyReferenced_nonNull_native);
  *(double *)(v2 + 8) = v69;
  result = swift_bridgeObjectRelease();
  v15 = *(double *)(a1 + 56);
  v16 = *(_BYTE *)(a1 + 64);
  if ((v16 & 1) != 0
    || (outlined init with take of Double?(a1 + 72, (uint64_t)v64),
        result = outlined init with take of Double?((uint64_t)v64, (uint64_t)&v67),
        (v68 & 1) != 0))
  {
    if ((v9 & 1) != 0)
      return result;
  }
  else
  {
    v36 = v15;
    if (((v9 ^ (v67 > v15)) & 1) != 0)
      return result;
    if ((v9 & 1) != 0)
    {
      v37 = 0;
LABEL_24:
      outlined init with take of Double?(a1 + 72, (uint64_t)v63);
      outlined init with take of Double?((uint64_t)v63, (uint64_t)&v69);
      if ((v70 & 1) != 0 || v69 <= v36)
        return outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed @escaping @callee_guaranteed (@unowned Bool) -> ()) -> ())?((uint64_t)v37);
      v41 = *((_QWORD *)v4 + 2);
      v18 = __OFADD__(v41, 1);
      v42 = v41 + 1;
      if (v18)
      {
        __break(1u);
      }
      else
      {
        *((_QWORD *)v4 + 2) = v42;
        a1 = *((_QWORD *)&v65[0] + 1);
        v43 = swift_isUniquelyReferenced_nonNull_native();
        v44 = *((_QWORD *)v4 + 3);
        v62 = v44;
        v4[3] = -0.0;
        v9 = specialized __RawDictionaryStorage.find<A>(_:)(v45, v46, v47, v48);
        v50 = *(_QWORD *)(v44 + 16);
        v51 = (v49 & 1) == 0;
        v52 = v50 + v51;
        if (!__OFADD__(v50, v51))
        {
          v3 = v49;
          if (*(_QWORD *)(v44 + 24) >= v52)
          {
            if ((v43 & 1) == 0)
              goto LABEL_46;
            goto LABEL_32;
          }
          specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v52, v43);
          v57 = specialized __RawDictionaryStorage.find<A>(_:)(v53, v54, v55, v56);
          if ((v3 & 1) == (v58 & 1))
          {
            v9 = v57;
            while (1)
            {
LABEL_32:
              *((_QWORD *)v4 + 3) = v44;
              swift_bridgeObjectRelease();
              v4 = (double *)*((_QWORD *)v4 + 3);
              swift_bridgeObjectRetain();
              if ((v3 & 1) == 0)
                specialized _NativeDictionary._insert(at:key:value:)(v9, a1, 0, v4);
              v59 = *((_QWORD *)v4 + 7);
              swift_bridgeObjectRelease();
              v60 = *(_QWORD *)(v59 + 8 * v9);
              v18 = __OFADD__(v60, 1);
              v61 = v60 + 1;
              if (!v18)
                break;
LABEL_45:
              __break(1u);
LABEL_46:
              specialized _NativeDictionary.copy()();
              v44 = v62;
            }
            *(_QWORD *)(v59 + 8 * v9) = v61;
            return outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed @escaping @callee_guaranteed (@unowned Bool) -> ()) -> ())?((uint64_t)v37);
          }
LABEL_47:
          result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
          __break(1u);
          return result;
        }
      }
      __break(1u);
      goto LABEL_45;
    }
  }
  v17 = *(_QWORD *)(v2 + 16);
  v18 = __OFSUB__(v17, 1);
  v19 = v17 - 1;
  if (v18)
  {
    __break(1u);
    goto LABEL_40;
  }
  *(_QWORD *)(v2 + 16) = v19;
  v10 = *((_QWORD *)&v65[0] + 1);
  v20 = swift_isUniquelyReferenced_nonNull_native();
  v69 = *(double *)(v2 + 24);
  v21 = v69;
  v4[3] = -0.0;
  v9 = specialized __RawDictionaryStorage.find<A>(_:)(v22, v23, v24, v25);
  v27 = *(_QWORD *)(*(_QWORD *)&v21 + 16);
  v28 = (v26 & 1) == 0;
  v29 = v27 + v28;
  if (__OFADD__(v27, v28))
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  v3 = v26;
  if (*(_QWORD *)(*(_QWORD *)&v21 + 24) >= v29)
  {
    if ((v20 & 1) == 0)
      goto LABEL_42;
  }
  else
  {
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v29, v20);
    v21 = v69;
    v34 = specialized __RawDictionaryStorage.find<A>(_:)(v30, v31, v32, v33);
    if ((v3 & 1) != (v35 & 1))
      goto LABEL_47;
    v9 = v34;
  }
  while (1)
  {
    v4[3] = v21;
    swift_bridgeObjectRelease();
    v38 = (_QWORD *)*((_QWORD *)v4 + 3);
    swift_bridgeObjectRetain();
    if ((v3 & 1) == 0)
      specialized _NativeDictionary._insert(at:key:value:)(v9, v10, 0, v38);
    v10 = v38[7];
    result = swift_bridgeObjectRelease();
    v39 = *(_QWORD *)(v10 + 8 * v9);
    v18 = __OFSUB__(v39, 1);
    v40 = v39 - 1;
    if (!v18)
      break;
LABEL_41:
    __break(1u);
LABEL_42:
    specialized _NativeDictionary.copy()();
    v21 = v69;
  }
  *(_QWORD *)(v10 + 8 * v9) = v40;
  if ((v16 & 1) == 0)
  {
    v36 = v15;
    v37 = protocol witness for SetAlgebra.init() in conformance NSCalendarUnit;
    goto LABEL_24;
  }
  return result;
}

__n128 specialized Text.Effect.AttributeTracker.update<A>(for:target:spring:at:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, double a4@<D0>, double a5@<D1>, double a6@<D2>, double a7@<D3>)
{
  uint64_t v7;
  __int128 v15;
  char v16;
  uint64_t v17;
  __int128 v23;
  __int128 v24;
  double v25;
  double v26;
  double v27;
  double v28;
  char v29;
  double v30;
  float64x2_t v31;
  __int128 v32;
  __n128 result;
  float64x2_t v34;
  float64x2_t v35;
  float64x2_t v36;
  float64x2_t v37;
  _OWORD __dst[19];
  _OWORD v39[3];
  char v40;
  _OWORD v41[19];
  float64x2_t v42[2];
  double v43;
  double v44;
  float64x2_t v45;
  double v46;
  char v47;
  float64x2_t v48[3];
  _OWORD v49[2];
  float64x2_t v50;
  float64x2_t v51;
  _OWORD v52[4];

  swift_beginAccess();
  if (!*(_QWORD *)(*(_QWORD *)(v7 + 16) + 16))
    goto LABEL_5;
  v15 = *(_OWORD *)(a1 + 16);
  v39[0] = *(_OWORD *)a1;
  v39[1] = v15;
  v39[2] = *(_OWORD *)(a1 + 32);
  v40 = *(_BYTE *)(a1 + 48);
  specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v39);
  if ((v16 & 1) == 0)
    goto LABEL_5;
  type metadata accessor for Text.Effect.AttributeTracker.ValueBox<Text.Effect.DrawingStateAttribute>(0, &lazy cache variable for type metadata for Text.Effect.AttributeTracker.ValueBox<Text.Effect.DrawingStateAttribute>, (uint64_t (*)(void))lazy protocol witness table accessor for type Text.Effect.DrawingStateAttribute and conformance Text.Effect.DrawingStateAttribute, (uint64_t)&type metadata for Text.Effect.DrawingStateAttribute);
  v17 = swift_dynamicCastClass();
  if (v17)
  {
    memmove(__dst, (const void *)(v17 + 16), 0x129uLL);
  }
  else
  {
LABEL_5:
    if (one-time initialization token for zero != -1)
      swift_once();
    memset(__dst, 0, 48);
    __asm { FMOV            V2.2D, #1.0 }
    __dst[3] = _Q2;
    *(_QWORD *)&__dst[4] = 0x3FF0000000000000;
    BYTE8(__dst[4]) = 0;
    memset(&__dst[5], 0, 48);
    __dst[8] = _Q2;
    *(_QWORD *)&__dst[9] = 0x3FF0000000000000;
    BYTE8(__dst[9]) = 0;
    __dst[10] = static Text.Effect.DrawingState.zero;
    __dst[11] = *(_OWORD *)algn_25622D270;
    __dst[12] = xmmword_25622D280;
    __dst[13] = unk_25622D290;
    *(_QWORD *)&__dst[14] = qword_25622D2A0;
    BYTE8(__dst[14]) = byte_25622D2A8;
    memset(&__dst[15], 0, 24);
    BYTE8(__dst[16]) = 1;
    *(_QWORD *)&__dst[17] = 0;
    BYTE8(__dst[17]) = 1;
    *(_QWORD *)&__dst[18] = 0;
    BYTE8(__dst[18]) = 1;
  }
  swift_endAccess();
  if (((~*(_QWORD *)&a4 & 0x7FF0000000000000) != 0 || (*(_QWORD *)&a4 & 0xFFFFFFFFFFFFFLL) == 0)
    && (~*(_QWORD *)&a5 & 0x7FF0000000000000) != 0)
  {
    v25 = *(double *)(a2 + 32);
    v26 = *(double *)(a2 + 40);
    *(double *)&__dst[7] = v25;
    *((double *)&__dst[7] + 1) = v26;
    *(double *)&__dst[2] = v25;
    *((double *)&__dst[2] + 1) = v26;
    __dst[12] = 0uLL;
    specialized Text.Effect.AttributeTracker.Value.updateSettlingTime(spring:target:at:)(a2, a4, a5, a6, a7);
    if ((BYTE8(__dst[17]) & 1) != 0)
    {
      if (a7 < 0.0)
        v27 = 0.0;
      else
        v27 = a7;
    }
    else
    {
      v27 = a7 - *(double *)&__dst[17];
      if (a7 - *(double *)&__dst[17] < 0.0)
        v27 = 0.0;
    }
    v28 = *(double *)&__dst[7];
    v29 = *(_BYTE *)(a2 + 72);
    v30 = *(double *)(a2 + 64) - *(double *)&__dst[9];
    v36 = (float64x2_t)__dst[5];
    v37 = (float64x2_t)__dst[6];
    v31 = vsubq_f64(*(float64x2_t *)(a2 + 16), (float64x2_t)__dst[6]);
    v42[0] = vsubq_f64(*(float64x2_t *)a2, (float64x2_t)__dst[5]);
    v42[1] = v31;
    v43 = v25 - *(double *)&__dst[7];
    v44 = v26 - *((double *)&__dst[7] + 1);
    v45 = vsubq_f64(*(float64x2_t *)(a2 + 48), (float64x2_t)__dst[8]);
    v46 = v30;
    v47 = v29;
    v48[1] = (float64x2_t)__dst[11];
    v48[2] = (float64x2_t)__dst[12];
    v34 = *(float64x2_t *)((char *)&__dst[8] + 8);
    v35 = *(float64x2_t *)((char *)&__dst[7] + 8);
    v49[0] = __dst[13];
    *(_OWORD *)((char *)v49 + 9) = *(_OWORD *)((char *)&__dst[13] + 9);
    v48[0] = (float64x2_t)__dst[10];
    specialized Spring.velocity<A>(target:initialVelocity:time:)((uint64_t)v42, v48, (uint64_t)v41, v27, a4, a5);
    specialized Spring.value<A>(target:initialVelocity:time:)((uint64_t)v42, v48, (uint64_t)&v50, v27, a4, a5);
    __dst[5] = vaddq_f64(v36, v50);
    __dst[6] = vaddq_f64(v37, v51);
    *(float64x2_t *)((char *)&__dst[7] + 8) = vaddq_f64(v35, *(float64x2_t *)((char *)v52 + 8));
    *(float64x2_t *)((char *)&__dst[8] + 8) = vaddq_f64(v34, *(float64x2_t *)((char *)&v52[1] + 8));
    __dst[10] = v41[0];
    __dst[11] = v41[1];
    __dst[12] = v41[2];
    __dst[13] = v41[3];
    *(double *)&__dst[7] = v28 + *(double *)v52;
    *(_QWORD *)&__dst[14] = *(_QWORD *)&v41[4];
    BYTE8(__dst[14]) = BYTE8(v41[4]);
    *(double *)&__dst[17] = a7;
    BYTE8(__dst[17]) = 0;
  }
  else
  {
    if (one-time initialization token for zero != -1)
      swift_once();
    v23 = *(_OWORD *)(a2 + 48);
    __dst[2] = *(_OWORD *)(a2 + 32);
    __dst[3] = v23;
    *(_OWORD *)((char *)&__dst[3] + 9) = *(_OWORD *)(a2 + 57);
    v24 = *(_OWORD *)(a2 + 16);
    __dst[0] = *(_OWORD *)a2;
    __dst[1] = v24;
    *(_OWORD *)((char *)&__dst[8] + 9) = *(_OWORD *)((char *)&__dst[3] + 9);
    __dst[7] = __dst[2];
    __dst[8] = v23;
    __dst[5] = __dst[0];
    __dst[6] = v24;
    __dst[10] = static Text.Effect.DrawingState.zero;
    __dst[11] = *(_OWORD *)algn_25622D270;
    __dst[12] = xmmword_25622D280;
    __dst[13] = unk_25622D290;
    *(_QWORD *)&__dst[14] = qword_25622D2A0;
    BYTE8(__dst[14]) = byte_25622D2A8;
    *(double *)&__dst[15] = a4;
    *((double *)&__dst[15] + 1) = a5;
    *(double *)&__dst[16] = a6;
    BYTE8(__dst[16]) = 0;
    BYTE8(__dst[17]) = 1;
    *(_QWORD *)&__dst[17] = 0;
    *(_QWORD *)&__dst[18] = 0;
    BYTE8(__dst[18]) = 1;
  }
  memcpy(v41, __dst, 0x129uLL);
  v52[0] = v41[7];
  v52[1] = v41[8];
  *(_OWORD *)((char *)&v52[1] + 9) = *(_OWORD *)((char *)&v41[8] + 9);
  v50 = (float64x2_t)v41[5];
  v51 = (float64x2_t)v41[6];
  swift_beginAccess();
  specialized Text.Effect.AttributeTracker.Tracker.subscript.setter((uint64_t)v41, a1);
  swift_endAccess();
  v32 = v52[1];
  *(_OWORD *)(a3 + 32) = v52[0];
  *(_OWORD *)(a3 + 48) = v32;
  *(_OWORD *)(a3 + 57) = *(_OWORD *)((char *)&v52[1] + 9);
  result = (__n128)v51;
  *(float64x2_t *)a3 = v50;
  *(__n128 *)(a3 + 16) = result;
  return result;
}

double specialized Text.Effect.AttributeTracker.update<A>(for:target:spring:at:)(uint64_t a1, double a2, double a3, double a4, double a5, double a6)
{
  uint64_t v6;
  __int128 v13;
  __int128 v14;
  char v15;
  uint64_t v16;
  char v17;
  double v23;
  double v24;
  uint64_t v25;
  uint64_t v26;
  double v27;
  __int128 v29;
  _OWORD v30[2];
  __int128 v31;
  __int128 v32;
  char v33;
  _OWORD v34[3];
  char v35;
  _OWORD v36[5];
  char v37;

  swift_beginAccess();
  if (!*(_QWORD *)(*(_QWORD *)(v6 + 16) + 16))
    goto LABEL_5;
  v13 = *(_OWORD *)(a1 + 16);
  v34[0] = *(_OWORD *)a1;
  v14 = *(_OWORD *)(a1 + 32);
  v34[1] = v13;
  v34[2] = v14;
  v35 = *(_BYTE *)(a1 + 48);
  specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v34);
  if ((v15 & 1) == 0)
    goto LABEL_5;
  type metadata accessor for Text.Effect.AttributeTracker.ValueBox<Text.Effect.DrawingStateAttribute>(0, &lazy cache variable for type metadata for Text.Effect.AttributeTracker.ValueBox<Text.Effect.WidthMultiplierAttribute>, (uint64_t (*)(void))lazy protocol witness table accessor for type Text.Effect.WidthMultiplierAttribute and conformance Text.Effect.WidthMultiplierAttribute, (uint64_t)&type metadata for Text.Effect.WidthMultiplierAttribute);
  v16 = swift_dynamicCastClass();
  if (v16)
  {
    v17 = *(_BYTE *)(v16 + 96);
    v29 = *(_OWORD *)(v16 + 16);
    *(_QWORD *)&v30[0] = *(_QWORD *)(v16 + 32);
    *(_OWORD *)((char *)v30 + 8) = *(_OWORD *)(v16 + 40);
    *((_QWORD *)&v30[1] + 1) = *(_QWORD *)(v16 + 56);
    LOBYTE(v31) = *(_BYTE *)(v16 + 64);
    *((_QWORD *)&v31 + 1) = *(_QWORD *)(v16 + 72);
    LOBYTE(v32) = *(_BYTE *)(v16 + 80);
    *((_QWORD *)&v32 + 1) = *(_QWORD *)(v16 + 88);
  }
  else
  {
LABEL_5:
    __asm { FMOV            V0.2D, #1.0 }
    v29 = _Q0;
    memset(v30, 0, sizeof(v30));
    v17 = 1;
    LOBYTE(v31) = 1;
    *((_QWORD *)&v31 + 1) = 0;
    LOBYTE(v32) = 1;
    *((_QWORD *)&v32 + 1) = 0;
  }
  v33 = v17;
  swift_endAccess();
  if (((~*(_QWORD *)&a3 & 0x7FF0000000000000) != 0 || (*(_QWORD *)&a3 & 0xFFFFFFFFFFFFFLL) == 0)
    && (~*(_QWORD *)&a4 & 0x7FF0000000000000) != 0)
  {
    specialized Text.Effect.AttributeTracker.Value.updateSettlingTime(spring:target:at:)(a3, a4, a5, a2, a6);
    if ((v32 & 1) != 0)
    {
      if (a6 < 0.0)
        v23 = 0.0;
      else
        v23 = a6;
    }
    else
    {
      v23 = a6 - *((double *)&v31 + 1);
      if (a6 - *((double *)&v31 + 1) < 0.0)
        v23 = 0.0;
    }
    v24 = a2 - *((double *)&v29 + 1);
    specialized Spring.velocity<A>(target:initialVelocity:time:)(v24, *(double *)v30, v23, a3, a4);
    v26 = v25;
    specialized Spring.value<A>(target:initialVelocity:time:)(v24, *(double *)v30, v23, a3, a4);
    *((double *)&v29 + 1) = *((double *)&v29 + 1) + v27;
    *(_QWORD *)&v30[0] = v26;
    *((double *)&v31 + 1) = a6;
    LOBYTE(v32) = 0;
  }
  else
  {
    *(double *)&v29 = a2;
    *((double *)&v29 + 1) = a2;
    *(_QWORD *)&v30[0] = 0;
    *((double *)v30 + 1) = a3;
    *(double *)&v30[1] = a4;
    *((double *)&v30[1] + 1) = a5;
    LOBYTE(v31) = 0;
    *((_QWORD *)&v31 + 1) = 0;
    LOBYTE(v32) = 1;
    *((_QWORD *)&v32 + 1) = 0;
    v33 = 1;
  }
  v36[2] = v30[1];
  v36[3] = v31;
  v36[4] = v32;
  v37 = v33;
  v36[0] = v29;
  v36[1] = v30[0];
  swift_beginAccess();
  specialized Text.Effect.AttributeTracker.Tracker.subscript.setter((uint64_t)v36, a1);
  swift_endAccess();
  return *((double *)&v29 + 1);
}

uint64_t Text.Effect.TransformContext.subcomponents(for:)(uint64_t a1)
{
  _QWORD *v1;
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t *v14;
  _QWORD *v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t result;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;

  v2 = v1[34];
  if (!v2)
    goto LABEL_28;
  v3 = v1[42];
  v4 = a1 - v3;
  if (__OFSUB__(a1, v3))
    goto LABEL_25;
  if ((v4 & 0x8000000000000000) != 0)
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  v5 = v1[43];
  if (v4 < *(_QWORD *)(v5 + 16))
  {
    v6 = *(_QWORD *)(v5 + 56 * v4 + 56);
    v31 = v1[44];
    v32 = v1[41];
    v39 = v1[43];
    v40 = v1[42];
    v41 = v1[34];
    v37 = v1[36];
    v38 = v1[35];
    v35 = v1[38];
    v36 = v1[37];
    v33 = v1[40];
    v34 = v1[39];
    outlined copy of Text.Effect.TransformContext.DrawingMode(v2, v38, v37, v36, v35, v34, v33, v32, v3, v5, v31);
    swift_bridgeObjectRetain();
    v7 = 0;
    v8 = v6 + 72;
    v9 = (_QWORD *)MEMORY[0x24BEE4AF8];
    v42 = v6 + 72;
    v43 = v6;
LABEL_6:
    v10 = *(_QWORD *)(v6 + 16);
    if (v7 <= v10)
      v11 = *(_QWORD *)(v6 + 16);
    else
      v11 = v7;
    v12 = v8 + 120 * v7;
    while (1)
    {
      if (v10 == v7)
      {
        swift_bridgeObjectRelease();
        outlined consume of Text.Effect.TransformContext.DrawingMode(v41, v38, v37, v36, v35, v34, v33, v32, v40, v39, v31);
        return (uint64_t)v9;
      }
      v13 = v7;
      if (v11 == v7)
        break;
      v14 = (uint64_t *)v12;
      v15 = *(_QWORD **)(v12 - 40);
      v16 = *(_BYTE *)(v12 + 72);
      if ((v16 - 3) > 1u)
      {
        v17 = 1;
LABEL_16:
        v18 = *(v14 - 4);
        v19 = *(v14 - 3);
        v20 = *(v14 - 2);
        v21 = *(v14 - 1);
        v22 = *v14;
        v45 = v14[8];
        v46 = v14[7];
        v47 = v14[6];
        v48 = v14[5];
        v49 = v14[4];
        v50 = v14[3];
        v51 = v14[2];
        v52 = v14[1];
        outlined copy of Text.Effect.PathInterpolator.Glyph(v15, v18, v19, v20, v21, *v14, v52, v51, v50, v49, v48, v47, v46, v45, v16);
        v56 = v18;
        v54 = v21;
        v55 = v20;
        v53 = v22;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v9[2] + 1, 1, v9);
        v23 = 0;
        v7 = v13 + 1;
        v24 = v9[2];
        v25 = 3 * v24;
        v26 = a1;
        do
        {
          v27 = v9[3];
          if (v24 + v23 >= v27 >> 1)
          {
            v29 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v27 > 1), v24 + v23 + 1, 1, v9);
            v26 = a1;
            v9 = v29;
          }
          v9[2] = v24 + v23 + 1;
          v28 = &v9[v25];
          v28[5] = v13;
          v28[6] = v23;
          v28[4] = v26;
          v25 += 3;
          ++v23;
        }
        while (v17 != v23);
        outlined consume of Text.Effect.PathInterpolator.Glyph(v15, v56, v19, v55, v54, v53, v52, v51, v50, v49, v48, v47, v46, v45, v16);
        v8 = v42;
        v6 = v43;
        goto LABEL_6;
      }
      v17 = v15[2];
      v12 += 120;
      ++v7;
      if (v17)
        goto LABEL_16;
    }
    __break(1u);
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
LABEL_27:
  __break(1u);
LABEL_28:
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void Text.Effect.TransformContext.subcomponentBounds(for:)(uint64_t a1, unint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  BOOL v4;
  unint64_t v5;
  uint64_t v6;

  if (!v2[34])
    goto LABEL_13;
  v3 = v2[42];
  v4 = __OFSUB__(a1, v3);
  v5 = a1 - v3;
  if (v4)
  {
    __break(1u);
    goto LABEL_9;
  }
  if ((v5 & 0x8000000000000000) != 0)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  v6 = v2[43];
  if (v5 >= *(_QWORD *)(v6 + 16))
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  if ((a2 & 0x8000000000000000) == 0)
  {
    if (*(_QWORD *)(*(_QWORD *)(v6 + 56 * v5 + 56) + 16) > a2)
    {
      Text.Effect.PathInterpolator.Glyph.bounds(for:)();
      return;
    }
    goto LABEL_12;
  }
LABEL_11:
  __break(1u);
LABEL_12:
  __break(1u);
LABEL_13:
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

unint64_t Text.Effect.TransformContext.draw(position:for:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  double v9;
  double v10;
  double v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  double v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  double v19;
  uint64_t v20;
  double v21;
  char v22;
  double v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  char v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  double v36;
  double v37;
  uint64_t v38;
  uint64_t v39;
  double v45;
  uint64_t v46;
  __int128 v48;
  double v49;
  double v50;
  double v51;
  double v52;
  __int128 v53;
  double v54;
  double v55;
  uint64_t v56;
  uint64_t v57;
  char v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  uint64_t v77;
  char v78;
  char v79;
  char v80;
  char v81;
  double v82;
  double v83;
  double v84;
  uint64_t v85;
  uint64_t v86;
  double v87;
  double v88;
  uint64_t v89;
  uint64_t v90;
  char v91;
  _QWORD v92[4];
  char v93;
  uint64_t v94;
  char v95;
  __int128 v96;
  uint64_t v97;
  uint64_t v98;
  char v99;
  uint64_t v100;
  char v101;
  _BYTE v102[32];
  uint64_t v103;
  uint64_t v104;
  __int128 v105;
  uint64_t v106;
  char v107;

  v5 = v4;
  if ((*(_BYTE *)(v4 + 56) & 1) != 0)
  {
    v9 = *(double *)a1;
    v10 = *(double *)(a1 + 8);
    v11 = *(double *)(a1 + 16);
    v12 = *(_QWORD *)(a1 + 24);
    v13 = *(_QWORD *)(a1 + 32);
    v14 = *(double *)(a1 + 40);
    v15 = *(double *)(a1 + 48);
    v16 = *(_QWORD *)(a1 + 56);
    v17 = *(_QWORD *)(a1 + 64);
    v18 = *(_BYTE *)(a1 + 72);
  }
  else
  {
    v19 = *(double *)(v4 + 48);
    v20 = *(_QWORD *)v4;
    v21 = *(double *)(v4 + 8);
    v22 = *(_BYTE *)(v4 + 16);
    v23 = *(double *)(v4 + 40);
    v24 = *(_QWORD *)(v4 + 64);
    v25 = *(_BYTE *)(v4 + 72);
    v26 = *(_QWORD *)(v4 + 368);
    v27 = *(_BYTE *)(v4 + 376);
    v50 = *(double *)v4;
    v51 = v21;
    LOBYTE(v52) = v22;
    v53 = *(_OWORD *)(v4 + 24);
    v54 = v23;
    v55 = v19;
    LOBYTE(v56) = 0;
    v57 = v24;
    v58 = v25;
    v28 = *(_OWORD *)(v4 + 96);
    v59 = *(_OWORD *)(v4 + 80);
    v60 = v28;
    v29 = *(_OWORD *)(v4 + 128);
    v61 = *(_OWORD *)(v4 + 112);
    v62 = v29;
    v30 = *(_OWORD *)(v4 + 160);
    v63 = *(_OWORD *)(v4 + 144);
    v64 = v30;
    v31 = *(_OWORD *)(v4 + 192);
    v65 = *(_OWORD *)(v4 + 176);
    v66 = v31;
    v32 = *(_OWORD *)(v4 + 224);
    v67 = *(_OWORD *)(v4 + 208);
    v68 = v32;
    v48 = *(_OWORD *)(v4 + 256);
    v69 = *(_OWORD *)(v4 + 240);
    v70 = v48;
    v33 = *(_OWORD *)(v4 + 288);
    v71 = *(_OWORD *)(v4 + 272);
    v72 = v33;
    v34 = *(_OWORD *)(v4 + 320);
    v73 = *(_OWORD *)(v4 + 304);
    v74 = v34;
    v35 = *(_OWORD *)(v4 + 352);
    v75 = *(_OWORD *)(v4 + 336);
    v76 = v35;
    v77 = v26;
    v78 = v27;
    v36 = v23 - v19;
    if (v36 < 0.0)
      v37 = 0.0;
    else
      v37 = v36;
    v38 = *(_QWORD *)(a1 + 32);
    v39 = *(_QWORD *)(a1 + 40);
    outlined retain of Text.Effect.TransformContext((uint64_t)&v50);
    memset(v102, 0, sizeof(v102));
    v103 = v38;
    v104 = v39;
    __asm { FMOV            V0.2D, #1.0 }
    v105 = _Q0;
    v106 = 0x3FF0000000000000;
    v107 = 0;
    specialized Spring.settlingDuration<A>(target:initialVelocity:epsilon:)(1.0, 0.0, 0.001, 0.0, 10.0);
    v96 = xmmword_2352826E0;
    v97 = 0x3FF0000000000000;
    Spring.scaledResponse(_:)(0.2 / v45);
    outlined release of Text.Effect.TransformContext((uint64_t)&v50);
    *(_QWORD *)&v96 = &type metadata for Text.Effect.DrawingStateAttribute;
    *((double *)&v96 + 1) = v21;
    v97 = v20;
    v98 = 0;
    v99 = 1;
    v100 = 0;
    v101 = 1;
    specialized Text.Effect.AttributeTracker.update<A>(for:target:spring:at:)((uint64_t)&v96, (uint64_t)v102, (uint64_t)&v82, v82, v83, v84, v37);
    v9 = v82;
    v10 = v83;
    v11 = v84;
    v12 = v85;
    v13 = v86;
    v14 = v87;
    v15 = v88;
    v16 = v89;
    v17 = v90;
    v18 = v91;
  }
  v82 = v9;
  v83 = v10;
  v84 = v11;
  v85 = v12;
  v86 = v13;
  v87 = v14;
  v88 = v15;
  v89 = v16;
  v90 = v17;
  v91 = v18;
  v46 = *(_QWORD *)(v5 + 8);
  v92[0] = &type metadata for Text.Effect.DrawingStateAttribute;
  v92[1] = v46;
  v92[2] = a2;
  v92[3] = a3;
  v93 = 0;
  v94 = a4;
  v95 = 0;
  if (one-time initialization token for zero != -1)
  {
    v49 = v9;
    swift_once();
    v9 = v49;
  }
  v81 = 1;
  v80 = 1;
  v79 = 1;
  v50 = v9;
  v51 = v10;
  v52 = v11;
  *(_QWORD *)&v53 = v12;
  *((_QWORD *)&v53 + 1) = v13;
  v54 = v14;
  v55 = v15;
  v56 = v16;
  v57 = v17;
  v58 = v18;
  *(double *)&v59 = v9;
  *((double *)&v59 + 1) = v10;
  *(double *)&v60 = v11;
  *((_QWORD *)&v60 + 1) = v12;
  *(_QWORD *)&v61 = v13;
  *((double *)&v61 + 1) = v14;
  *(double *)&v62 = v15;
  *((_QWORD *)&v62 + 1) = v16;
  *(_QWORD *)&v63 = v17;
  BYTE8(v63) = v18;
  v64 = static Text.Effect.DrawingState.zero;
  v65 = *(_OWORD *)algn_25622D270;
  v66 = xmmword_25622D280;
  v67 = unk_25622D290;
  *(_QWORD *)&v68 = qword_25622D2A0;
  BYTE8(v68) = byte_25622D2A8;
  *(_QWORD *)&v70 = 0;
  v69 = 0uLL;
  BYTE8(v70) = 1;
  *(_QWORD *)&v71 = 0;
  BYTE8(v71) = 1;
  *(_QWORD *)&v72 = 0;
  BYTE8(v72) = 1;
  swift_beginAccess();
  specialized Text.Effect.AttributeTracker.Tracker.subscript.setter((uint64_t)&v50, (uint64_t)v92);
  swift_endAccess();
  return Text.Effect.TransformContext.draw(state:keyPath:)((uint64_t)&v82, a2, a3, a4, 0);
}

void Text.Effect.TransformContext.record(target:for:spring:)(uint64_t a1@<X0>, double a2@<X1>, double *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  double v9;
  uint64_t v11;
  ValueMetadata *v12;
  double v13;
  uint64_t v14;
  uint64_t v15;
  double v16;
  double v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  double v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  ValueMetadata *v32;
  _QWORD *v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  ValueMetadata *v42;
  double v43;
  double v44;
  double v45;
  uint64_t v46;
  double v47;
  unint64_t v48;
  double v49;
  uint64_t v50;
  double v51;
  uint64_t v52;
  char v53;
  uint64_t v54;
  char v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  double v64;
  double v65;
  uint64_t v66;
  uint64_t v67;
  double v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  _QWORD *v78;
  uint64_t v79;
  uint64_t v80;
  _QWORD *v81;
  unint64_t v82;
  unint64_t v83;
  ValueMetadata *v84;
  _QWORD *v85;
  double v86;
  ValueMetadata *v87;
  _QWORD *v88;
  _QWORD *v89;
  _QWORD *v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  double v101;
  uint64_t v102;
  uint64_t v103;
  double v104;
  uint64_t v105;
  _QWORD *v106;
  uint64_t v107;
  _QWORD *v108;
  unint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  double v113;
  uint64_t v114;
  uint64_t v115;
  double v116;
  unint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  char v123;
  ValueMetadata *v124;
  ValueMetadata *v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  uint64_t v129;
  uint64_t v130;
  __int128 v131;
  uint64_t v132;
  uint64_t v133;
  unint64_t v134;
  ValueMetadata *v135;
  double v136;
  double v137;
  uint64_t v138;
  uint64_t v139;
  double v140;
  double v141;
  uint64_t v142;
  uint64_t v143;
  char v144;
  char v145;
  char v146;
  ValueMetadata *v147;
  double v148;
  double v149;
  uint64_t v150;
  uint64_t v151;
  double v152;
  double v153;
  uint64_t v154;
  uint64_t v155;
  char v156;
  unint64_t v157;
  uint64_t v158;
  uint64_t v159;
  __int128 v160;
  double v161;
  double v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  __int128 v166;
  __int128 v167;
  __int128 v168;
  __int128 v169;
  __int128 v170;
  __int128 v171;
  __int128 v172;
  __int128 v173;
  __int128 v174;
  __int128 v175;
  __int128 v176;
  __int128 v177;
  __int128 v178;
  __int128 v179;
  __int128 v180;
  __int128 v181;
  __int128 v182;
  __int128 v183;
  uint64_t v184;
  char v185;
  __int128 v186;
  uint64_t v187;
  uint64_t v188;
  char v189;
  uint64_t v190;
  char v191;

  v11 = a4;
  if (__OFSUB__(*(_QWORD *)v4, *(_QWORD *)&a2))
  {
    __break(1u);
LABEL_35:
    v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v8[2] + 1, 1, v8);
LABEL_14:
    v41 = v8[2];
    v40 = v8[3];
    v42 = v124;
    if (v41 >= v40 >> 1)
    {
      v85 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v40 > 1), v41 + 1, 1, v8);
      v42 = v124;
      v90 = v85;
    }
    else
    {
      v90 = v8;
    }
    v157 = v117;
    v158 = v6;
    v159 = v7;
    *(_QWORD *)&v160 = v4;
    *((_QWORD *)&v160 + 1) = v96;
    v161 = *(double *)&v95;
    v162 = *(double *)&v93;
    v163 = v120;
    v164 = v94;
    v165 = v92;
    *(_QWORD *)&v166 = v91;
    *((_QWORD *)&v166 + 1) = v42;
    *(double *)&v167 = v9;
    v14 = v110;
    v13 = v113;
    *((double *)&v167 + 1) = v113;
    *(_QWORD *)&v168 = v110;
    v16 = v104;
    v15 = v107;
    *((_QWORD *)&v168 + 1) = v107;
    *(double *)&v169 = v104;
    v18 = v99;
    v17 = v101;
    *((double *)&v169 + 1) = v101;
    *(_QWORD *)&v170 = v99;
    v19 = v98;
    *((_QWORD *)&v170 + 1) = v98;
    v20 = v123;
    LOBYTE(v171) = v123;
    _s7SwiftUI4TextVAAE6EffectO11DisplayInfoV13DrawOperationOWOi1_((uint64_t)&v157);
    v90[2] = v41 + 1;
    outlined init with take of Text.Effect.DisplayInfo.DrawOperation((uint64_t)&v157, (uint64_t)&v90[27 * v41 + 4]);
    outlined consume of Text.Effect.TransformContext.DrawingMode(v117, v6, v7, v4, v96, v95, v93, v120, v94, v92, v91);
    v12 = v124;
    v5[33] = v90;
    v11 = v97;
    goto LABEL_33;
  }
  v5 = (_QWORD *)v4;
  v12 = *(ValueMetadata **)a1;
  v9 = *(double *)(a1 + 8);
  v13 = *(double *)(a1 + 16);
  v14 = *(_QWORD *)(a1 + 24);
  v15 = *(_QWORD *)(a1 + 32);
  v16 = *(double *)(a1 + 40);
  v17 = *(double *)(a1 + 48);
  v18 = *(_QWORD *)(a1 + 56);
  v19 = *(_QWORD *)(a1 + 64);
  v20 = *(_BYTE *)(a1 + 72);
  if (*(_QWORD *)v4 != *(_QWORD *)&a2)
  {
    v34 = *(_QWORD *)(v4 + 272);
    if (!v34)
      goto LABEL_33;
    v97 = a4;
    v98 = *(_QWORD *)(a1 + 64);
    v99 = *(_QWORD *)(a1 + 56);
    v101 = *(double *)(a1 + 48);
    v104 = *(double *)(a1 + 40);
    v107 = *(_QWORD *)(a1 + 32);
    v110 = *(_QWORD *)(a1 + 24);
    v113 = *(double *)(a1 + 16);
    v124 = *(ValueMetadata **)a1;
    v36 = v5[35];
    v35 = v5[36];
    v37 = v5[37];
    v39 = v5[43];
    v38 = v5[44];
    v8 = (_QWORD *)v5[33];
    v94 = v5[42];
    v95 = v5[39];
    v96 = v5[38];
    v93 = v5[40];
    v120 = v5[41];
    outlined copy of Text.Effect.TransformContext.DrawingMode(v34, v36, v35, v37, v96, v95, v93, v120, v94, v39, v38);
    v117 = v34;
    swift_retain();
    v7 = v35;
    swift_retain();
    v4 = v37;
    swift_retain();
    v92 = v39;
    swift_bridgeObjectRetain();
    v91 = v38;
    outlined copy of Text.Effect.PathInterpolator.MapKeys(v38);
    v123 = v20;
    v6 = v36;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
      goto LABEL_14;
    goto LABEL_35;
  }
  if ((*(_BYTE *)(v4 + 16) & 1) != 0)
  {
    v21 = *(double *)(v4 + 8);
    v147 = &type metadata for Text.Effect.DrawingStateAttribute;
    v148 = v21;
    v149 = a2;
    v150 = 0;
    LOBYTE(v151) = 1;
    v152 = 0.0;
    LOBYTE(v153) = 1;
    if (one-time initialization token for zero != -1)
    {
      v116 = v13;
      v86 = v9;
      v87 = v12;
      swift_once();
      v12 = v87;
      v9 = v86;
      v13 = v116;
    }
    LOBYTE(v186) = 1;
    v146 = 1;
    v145 = 1;
    v157 = (unint64_t)v12;
    *(double *)&v158 = v9;
    *(double *)&v159 = v13;
    *(_QWORD *)&v160 = v14;
    *((_QWORD *)&v160 + 1) = v15;
    v161 = v16;
    v162 = v17;
    v163 = v18;
    v164 = v19;
    LOBYTE(v165) = v20;
    v125 = v12;
    *(_QWORD *)&v166 = v12;
    *((double *)&v166 + 1) = v9;
    *(double *)&v167 = v13;
    *((_QWORD *)&v167 + 1) = v14;
    *(_QWORD *)&v168 = v15;
    *((double *)&v168 + 1) = v16;
    *(double *)&v169 = v17;
    *((_QWORD *)&v169 + 1) = v18;
    *(_QWORD *)&v170 = v19;
    BYTE8(v170) = v20;
    v171 = static Text.Effect.DrawingState.zero;
    v172 = *(_OWORD *)algn_25622D270;
    v173 = xmmword_25622D280;
    v174 = unk_25622D290;
    *(_QWORD *)&v175 = qword_25622D2A0;
    BYTE8(v175) = byte_25622D2A8;
    *(_QWORD *)&v177 = 0;
    v176 = 0uLL;
    BYTE8(v177) = 1;
    *(_QWORD *)&v178 = 0;
    BYTE8(v178) = 1;
    *(_QWORD *)&v179 = 0;
    BYTE8(v179) = 1;
    swift_beginAccess();
    specialized Text.Effect.AttributeTracker.Tracker.subscript.setter((uint64_t)&v157, (uint64_t)&v147);
    swift_endAccess();
    if (!*(_QWORD *)(v4 + 272))
    {
      v12 = v125;
      goto LABEL_33;
    }
    v22 = *(_QWORD *)(v4 + 272);
    v23 = *(_QWORD *)(v4 + 288);
    v24 = *(_QWORD *)(v4 + 296);
    v26 = *(_QWORD *)(v4 + 344);
    v25 = *(_QWORD *)(v4 + 352);
    v27 = *(_QWORD **)(v4 + 264);
    v102 = *(_QWORD *)(v4 + 304);
    v105 = *(_QWORD *)(v4 + 336);
    v118 = *(_QWORD *)(v4 + 312);
    v121 = *(_QWORD *)(v4 + 280);
    v111 = *(_QWORD *)(v4 + 328);
    v114 = *(_QWORD *)(v4 + 320);
    outlined copy of Text.Effect.TransformContext.DrawingMode(v22, v121, v23, v24, v102, v118, v114, v111, v105, v26, v25);
    v28 = v27;
    swift_retain();
    v29 = v23;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    outlined copy of Text.Effect.PathInterpolator.MapKeys(v25);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v28 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v28[2] + 1, 1, v28);
    v31 = v28[2];
    v30 = v28[3];
    v32 = v125;
    if (v31 >= v30 >> 1)
    {
      v88 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v30 > 1), v31 + 1, 1, v28);
      v32 = v125;
      v108 = v88;
    }
    else
    {
      v108 = v28;
    }
    *(_QWORD *)&v127 = v22;
    *((_QWORD *)&v127 + 1) = v121;
    *(_QWORD *)&v128 = v29;
    *((_QWORD *)&v128 + 1) = v24;
    v129 = v102;
    v130 = v118;
    *(_QWORD *)&v131 = v114;
    *((_QWORD *)&v131 + 1) = v111;
    v132 = v105;
    v133 = v26;
    v134 = v25;
    v135 = v32;
    v136 = v9;
    v137 = v13;
    v138 = v14;
    v139 = v15;
    v140 = v16;
    v141 = v17;
    v142 = v18;
    v143 = v19;
    v144 = v20;
    _s7SwiftUI4TextVAAE6EffectO11DisplayInfoV13DrawOperationOWOi1_((uint64_t)&v127);
    v33 = v108;
    v108[2] = v31 + 1;
    outlined init with take of Text.Effect.DisplayInfo.DrawOperation((uint64_t)&v127, (uint64_t)&v108[27 * v31 + 4]);
    outlined consume of Text.Effect.TransformContext.DrawingMode(v22, v121, v29, v24, v102, v118, v114, v111, v105, v26, v25);
    goto LABEL_31;
  }
  if ((*(_BYTE *)(v4 + 56) & 1) == 0)
  {
    v49 = *(double *)(v4 + 48);
    v50 = *(uint64_t *)(v4 + 8);
    v51 = *(double *)(v4 + 40);
    v52 = *(_QWORD *)(v4 + 64);
    v53 = *(_BYTE *)(v4 + 72);
    v54 = *(_QWORD *)(v4 + 368);
    v55 = *(_BYTE *)(v4 + 376);
    v157 = *(_QWORD *)&a2;
    v158 = v50;
    LOBYTE(v159) = 0;
    v160 = *(_OWORD *)(v4 + 24);
    v161 = v51;
    v162 = v49;
    LOBYTE(v163) = 0;
    v164 = v52;
    LOBYTE(v165) = v53;
    v56 = *(_OWORD *)(v4 + 96);
    v166 = *(_OWORD *)(v4 + 80);
    v167 = v56;
    v57 = *(_OWORD *)(v4 + 128);
    v168 = *(_OWORD *)(v4 + 112);
    v169 = v57;
    v58 = *(_OWORD *)(v4 + 160);
    v170 = *(_OWORD *)(v4 + 144);
    v171 = v58;
    v59 = *(_OWORD *)(v4 + 192);
    v172 = *(_OWORD *)(v4 + 176);
    v173 = v59;
    v60 = *(_OWORD *)(v4 + 224);
    v174 = *(_OWORD *)(v4 + 208);
    v175 = v60;
    v126 = *(_OWORD *)(v4 + 256);
    v176 = *(_OWORD *)(v4 + 240);
    v177 = v126;
    v61 = *(_OWORD *)(v4 + 288);
    v178 = *(_OWORD *)(v4 + 272);
    v179 = v61;
    v62 = *(_OWORD *)(v4 + 320);
    v180 = *(_OWORD *)(v4 + 304);
    v181 = v62;
    v63 = *(_OWORD *)(v4 + 352);
    v182 = *(_OWORD *)(v4 + 336);
    v183 = v63;
    v184 = v54;
    v185 = v55;
    v64 = v51 - v49;
    if (v64 < 0.0)
      v65 = 0.0;
    else
      v65 = v64;
    v66 = *(_QWORD *)(a1 + 32);
    v67 = *(_QWORD *)(a1 + 40);
    outlined retain of Text.Effect.TransformContext((uint64_t)&v157);
    v127 = 0u;
    v128 = 0u;
    v129 = v66;
    v130 = v67;
    __asm { FMOV            V0.2D, #1.0 }
    v131 = _Q0;
    v132 = 0x3FF0000000000000;
    LOBYTE(v133) = 0;
    specialized Spring.settlingDuration<A>(target:initialVelocity:epsilon:)(1.0, 0.0, 0.001, 0.0, 10.0);
    v186 = xmmword_2352826E0;
    v187 = 0x3FF0000000000000;
    Spring.scaledResponse(_:)(0.2 / v73);
    outlined release of Text.Effect.TransformContext((uint64_t)&v157);
    *(_QWORD *)&v186 = &type metadata for Text.Effect.DrawingStateAttribute;
    *((_QWORD *)&v186 + 1) = v50;
    v187 = *(_QWORD *)&a2;
    v188 = 0;
    v189 = 1;
    v190 = 0;
    v191 = 1;
    specialized Text.Effect.AttributeTracker.update<A>(for:target:spring:at:)((uint64_t)&v186, (uint64_t)&v127, (uint64_t)&v147, *(double *)&v147, v148, v149, v65);
    v12 = v147;
    v9 = v148;
    v13 = v149;
    v14 = v150;
    v15 = v151;
    v16 = v152;
    v17 = v153;
    v18 = v154;
    v19 = v155;
    v20 = v156;
    v48 = *(_QWORD *)(v4 + 272);
    if (!v48)
      goto LABEL_33;
LABEL_26:
    v125 = v12;
    v74 = *(_QWORD *)(v4 + 288);
    v75 = *(_QWORD *)(v4 + 296);
    v77 = *(_QWORD *)(v4 + 344);
    v76 = *(_QWORD *)(v4 + 352);
    v78 = *(_QWORD **)(v4 + 264);
    v100 = v5[38];
    v103 = v5[42];
    v119 = v5[40];
    v122 = v5[35];
    v112 = v5[39];
    v115 = v5[41];
    outlined copy of Text.Effect.TransformContext.DrawingMode(v48, v122, v5[36], v5[37], v100, v112, v119, v115, v103, v5[43], v5[44]);
    v109 = v48;
    swift_retain();
    v79 = v74;
    swift_retain();
    v80 = v75;
    v81 = v78;
    swift_retain();
    swift_bridgeObjectRetain();
    outlined copy of Text.Effect.PathInterpolator.MapKeys(v76);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v81 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v78[2] + 1, 1, v78);
    v83 = v81[2];
    v82 = v81[3];
    v84 = v125;
    if (v83 >= v82 >> 1)
    {
      v89 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v82 > 1), v83 + 1, 1, v81);
      v84 = v125;
      v106 = v89;
    }
    else
    {
      v106 = v81;
    }
    v157 = v109;
    v158 = v122;
    v159 = v79;
    *(_QWORD *)&v160 = v80;
    *((_QWORD *)&v160 + 1) = v100;
    v161 = *(double *)&v112;
    v162 = *(double *)&v119;
    v163 = v115;
    v164 = v103;
    v165 = v77;
    *(_QWORD *)&v166 = v76;
    *((_QWORD *)&v166 + 1) = v84;
    *(double *)&v167 = v9;
    *((double *)&v167 + 1) = v13;
    *(_QWORD *)&v168 = v14;
    *((_QWORD *)&v168 + 1) = v15;
    *(double *)&v169 = v16;
    *((double *)&v169 + 1) = v17;
    *(_QWORD *)&v170 = v18;
    *((_QWORD *)&v170 + 1) = v19;
    LOBYTE(v171) = v20;
    _s7SwiftUI4TextVAAE6EffectO11DisplayInfoV13DrawOperationOWOi1_((uint64_t)&v157);
    v33 = v106;
    v106[2] = v83 + 1;
    outlined init with take of Text.Effect.DisplayInfo.DrawOperation((uint64_t)&v157, (uint64_t)&v106[27 * v83 + 4]);
    outlined consume of Text.Effect.TransformContext.DrawingMode(v109, v122, v79, v80, v100, v112, v119, v115, v103, v77, v76);
LABEL_31:
    v12 = v125;
    v5[33] = v33;
    goto LABEL_33;
  }
  v43 = *a3;
  v44 = a3[1];
  v45 = a3[2];
  v46 = *(_QWORD *)(v4 + 8);
  v47 = *(double *)(v4 + 40) - *(double *)(v4 + 24);
  if (v47 < 0.0)
    v47 = 0.0;
  *(_QWORD *)&v127 = &type metadata for Text.Effect.DrawingStateAttribute;
  *((_QWORD *)&v127 + 1) = v46;
  v128 = *(unint64_t *)&a2;
  LOBYTE(v129) = 1;
  v130 = 0;
  LOBYTE(v131) = 1;
  specialized Text.Effect.AttributeTracker.update<A>(for:target:spring:at:)((uint64_t)&v127, a1, (uint64_t)&v157, v43, v44, v45, v47);
  v12 = (ValueMetadata *)v157;
  v9 = *(double *)&v158;
  v13 = *(double *)&v159;
  v15 = *((_QWORD *)&v160 + 1);
  v14 = v160;
  v16 = v161;
  v17 = v162;
  v18 = v163;
  v19 = v164;
  v20 = v165;
  v48 = *(_QWORD *)(v4 + 272);
  if (v48)
    goto LABEL_26;
LABEL_33:
  *(_QWORD *)v11 = v12;
  *(double *)(v11 + 8) = v9;
  *(double *)(v11 + 16) = v13;
  *(_QWORD *)(v11 + 24) = v14;
  *(_QWORD *)(v11 + 32) = v15;
  *(double *)(v11 + 40) = v16;
  *(double *)(v11 + 48) = v17;
  *(_QWORD *)(v11 + 56) = v18;
  *(_QWORD *)(v11 + 64) = v19;
  *(_BYTE *)(v11 + 72) = v20;
}

unint64_t Text.Effect.TransformContext.draw(state:keyPath:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t result;
  uint64_t v25;
  uint64_t v26;
  char v27;
  _QWORD *v28;
  unint64_t v29;
  unint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v35;
  uint64_t v36;
  uint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _BYTE v54[24];
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char v63;
  uint64_t v64;
  uint64_t v65;
  char v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char v70;

  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  v9 = *(_QWORD *)(a1 + 16);
  v8 = *(_QWORD *)(a1 + 24);
  v11 = *(_QWORD *)(a1 + 32);
  v10 = *(_QWORD *)(a1 + 40);
  v13 = *(_QWORD *)(a1 + 48);
  v12 = *(_QWORD *)(a1 + 56);
  v44 = *(_QWORD *)(a1 + 64);
  v14 = *(_BYTE *)(a1 + 72);
  v15 = *(_QWORD *)(v5 + 272);
  if (v15)
  {
    v16 = *(_QWORD *)(v5 + 280);
    v17 = *(_QWORD *)(v5 + 288);
    v18 = *(_QWORD *)(v5 + 296);
    v20 = *(_QWORD *)(v5 + 344);
    v19 = *(_QWORD *)(v5 + 352);
    v32 = *(_QWORD *)(v5 + 368);
    v33 = *(_QWORD *)(v5 + 360);
    v31 = *(_BYTE *)(v5 + 376);
    v21 = *(_QWORD **)(v5 + 264);
    v35 = *(_QWORD *)(v5 + 320);
    v36 = *(_QWORD *)(v5 + 336);
    v40 = *(_QWORD *)(v5 + 304);
    v42 = *(_QWORD *)(v5 + 328);
    v43 = *(_QWORD *)(v5 + 312);
    outlined copy of Text.Effect.TransformContext.DrawingMode(v15, v16, v17, v18, v40, v43, v35, v42, v36, v20, v19);
    swift_retain();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    outlined copy of Text.Effect.PathInterpolator.MapKeys(v19);
    v41 = v14;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v21 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v21[2] + 1, 1, v21);
    v23 = v21[2];
    v22 = v21[3];
    if (v23 >= v22 >> 1)
      v21 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v22 > 1), v23 + 1, 1, v21);
    v45 = v15;
    v46 = v16;
    v47 = v17;
    v48 = v18;
    v49 = v40;
    v50 = v43;
    v51 = v35;
    v52 = v42;
    v53 = v36;
    *(_QWORD *)v54 = v20;
    *(_QWORD *)&v54[8] = v19;
    *(_QWORD *)&v54[16] = v6;
    v55 = v7;
    v56 = v9;
    v57 = v8;
    v58 = v11;
    v59 = v10;
    v60 = v13;
    v61 = v12;
    v62 = v44;
    v63 = v41;
    v64 = v33;
    v65 = v32;
    v66 = v31;
    v67 = a2;
    v68 = a3;
    v69 = a4;
    v70 = a5 & 1;
    _s7SwiftUI4TextVAAE6EffectO11DisplayInfoV13DrawOperationOWOi0_((uint64_t)&v45);
    v21[2] = v23 + 1;
    outlined init with take of Text.Effect.DisplayInfo.DrawOperation((uint64_t)&v45, (uint64_t)&v21[27 * v23 + 4]);
    result = outlined consume of Text.Effect.TransformContext.DrawingMode(v15, v16, v17, v18, v40, v43, v35, v42, v36, v20, v19);
    *(_QWORD *)(v5 + 264) = v21;
  }
  else
  {
    v25 = *(_QWORD *)(v5 + 360);
    v26 = *(_QWORD *)(v5 + 368);
    v27 = *(_BYTE *)(v5 + 376);
    v28 = *(_QWORD **)(v5 + 264);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v28 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v28[2] + 1, 1, v28);
    v30 = v28[2];
    v29 = v28[3];
    if (v30 >= v29 >> 1)
      v28 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v29 > 1), v30 + 1, 1, v28);
    v45 = v6;
    v46 = v7;
    v47 = v9;
    v48 = v8;
    v49 = v11;
    v50 = v10;
    v51 = v13;
    v52 = v12;
    v53 = v44;
    v54[0] = v14;
    *(_QWORD *)&v54[4] = v25;
    *(_QWORD *)&v54[12] = v26;
    v54[20] = v27;
    _s7SwiftUI4TextVAAE6EffectO11DisplayInfoV13DrawOperationOWOi_((uint64_t)&v45);
    v28[2] = v30 + 1;
    result = outlined init with take of Text.Effect.DisplayInfo.DrawOperation((uint64_t)&v45, (uint64_t)&v28[27 * v30 + 4]);
    *(_QWORD *)(v5 + 264) = v28;
  }
  return result;
}

unint64_t Text.Effect.TransformContext.record(position:for:)@<X0>(unint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD *v3;
  _QWORD *v4;
  char v5;
  char v6;
  uint64_t v7;
  double v8;
  double v9;
  uint64_t v10;
  uint64_t v11;
  double v12;
  double v13;
  uint64_t v14;
  double v16;
  double v18;
  uint64_t v19;
  char v20;
  double v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  char v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  double v34;
  double v35;
  uint64_t v36;
  uint64_t v37;
  double v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  _QWORD *v52;
  unint64_t v53;
  unint64_t v54;
  double v55;
  _QWORD *v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  double v65;
  _QWORD *v66;
  _QWORD *v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char v84;
  char v85;
  double v86;
  __int128 v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  __int128 v91;
  double v92;
  double v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  uint64_t v115;
  char v116;
  double v117;
  double v118;
  double v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  unint64_t v127;
  double v128;
  double v129;
  double v130;
  uint64_t v131;
  uint64_t v132;
  double v133;
  double v134;
  uint64_t v135;
  uint64_t v136;
  char v137;
  char v138;
  char v139;
  char v140;
  _QWORD v141[4];
  char v142;
  uint64_t v143;
  char v144;
  __int128 v145;
  uint64_t v146;
  uint64_t v147;
  char v148;
  uint64_t v149;
  char v150;
  _BYTE v151[32];
  uint64_t v152;
  uint64_t v153;
  __int128 v154;
  uint64_t v155;
  char v156;

  if (__OFSUB__(*v3, a2))
  {
    __break(1u);
LABEL_25:
    swift_once();
    v16 = v86;
LABEL_9:
    v140 = v5;
    v139 = v5;
    v138 = v5;
    v88 = *(_QWORD *)&v16;
    v89 = *(_QWORD *)&v8;
    v90 = *(_QWORD *)&v9;
    *(_QWORD *)&v91 = v10;
    *((_QWORD *)&v91 + 1) = v11;
    v92 = v12;
    v93 = v13;
    v94 = v14;
    v95 = v7;
    LOBYTE(v96) = v6;
    *(double *)&v97 = v16;
    *((double *)&v97 + 1) = v8;
    *(double *)&v98 = v9;
    *((_QWORD *)&v98 + 1) = v10;
    *(_QWORD *)&v99 = v11;
    *((double *)&v99 + 1) = v12;
    *(double *)&v100 = v13;
    *((_QWORD *)&v100 + 1) = v14;
    *(_QWORD *)&v101 = v7;
    BYTE8(v101) = v6;
    v102 = static Text.Effect.DrawingState.zero;
    v103 = *(_OWORD *)algn_25622D270;
    v104 = xmmword_25622D280;
    v105 = unk_25622D290;
    *(_QWORD *)&v106 = qword_25622D2A0;
    BYTE8(v106) = byte_25622D2A8;
    *(_QWORD *)&v108 = 0;
    v107 = 0uLL;
    BYTE8(v108) = v5;
    *(_QWORD *)&v109 = 0;
    BYTE8(v109) = v5;
    *(_QWORD *)&v110 = 0;
    BYTE8(v110) = v5;
    swift_beginAccess();
    specialized Text.Effect.AttributeTracker.Tracker.subscript.setter((uint64_t)&v88, (uint64_t)v141);
    result = swift_endAccess();
    if (!v4[34])
    {
      v16 = v86;
      goto LABEL_23;
    }
    v45 = v4[34];
    v84 = v6;
    v46 = v4[36];
    v47 = v4[37];
    v49 = v4[43];
    v48 = v4[44];
    v50 = (_QWORD *)v4[33];
    v78 = v4[42];
    v80 = v4[38];
    v82 = v4[35];
    v51 = v4[39];
    v72 = v4[40];
    v74 = v4[41];
    outlined copy of Text.Effect.TransformContext.DrawingMode(v45, v82, v46, v47, v80, v51, v72, v74, v78, v49, v48);
    v52 = v50;
    swift_retain();
    swift_retain();
    swift_retain();
    v76 = v49;
    swift_bridgeObjectRetain();
    outlined copy of Text.Effect.PathInterpolator.MapKeys(v48);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v52 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v50[2] + 1, 1, v50);
    v54 = v52[2];
    v53 = v52[3];
    v55 = v86;
    if (v54 >= v53 >> 1)
    {
      v66 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v53 > 1), v54 + 1, 1, v52);
      v55 = v86;
      v71 = v66;
    }
    else
    {
      v71 = v52;
    }
    v70 = v45;
    v117 = *(double *)&v45;
    v118 = *(double *)&v82;
    v119 = *(double *)&v46;
    v120 = v47;
    v121 = v80;
    v122 = v51;
    v123 = v72;
    v124 = v74;
    v125 = v78;
    v126 = v76;
    v127 = v48;
    v128 = v55;
    v129 = v8;
    v130 = v9;
    v131 = v10;
    v132 = v11;
    v133 = v12;
    v134 = v13;
    v135 = v14;
    v136 = v7;
    v68 = v47;
    v6 = v84;
    v137 = v84;
    _s7SwiftUI4TextVAAE6EffectO11DisplayInfoV13DrawOperationOWOi1_((uint64_t)&v117);
    v56 = v71;
    v71[2] = v54 + 1;
    outlined init with take of Text.Effect.DisplayInfo.DrawOperation((uint64_t)&v117, (uint64_t)&v71[27 * v54 + 4]);
    result = outlined consume of Text.Effect.TransformContext.DrawingMode(v70, v82, v46, v68, v80, v51, v72, v74, v78, v76, v48);
    goto LABEL_21;
  }
  v4 = v3;
  v16 = *(double *)result;
  v8 = *(double *)(result + 8);
  v9 = *(double *)(result + 16);
  v10 = *(_QWORD *)(result + 24);
  v11 = *(_QWORD *)(result + 32);
  v12 = *(double *)(result + 40);
  v13 = *(double *)(result + 48);
  v14 = *(_QWORD *)(result + 56);
  v7 = *(_QWORD *)(result + 64);
  v6 = *(_BYTE *)(result + 72);
  if (*v3 == a2)
  {
    if ((v3[7] & 1) == 0)
    {
      v18 = *((double *)v3 + 6);
      v19 = v3[1];
      v20 = *((_BYTE *)v3 + 16);
      v21 = *((double *)v3 + 5);
      v22 = v3[8];
      v23 = *((_BYTE *)v3 + 72);
      v24 = v3[46];
      v25 = *((_BYTE *)v3 + 376);
      v88 = a2;
      v89 = v19;
      LOBYTE(v90) = v20;
      v91 = *(_OWORD *)(v3 + 3);
      v92 = v21;
      v93 = v18;
      LOBYTE(v94) = 0;
      v95 = v22;
      LOBYTE(v96) = v23;
      v26 = *((_OWORD *)v3 + 6);
      v97 = *((_OWORD *)v3 + 5);
      v98 = v26;
      v27 = *((_OWORD *)v3 + 8);
      v99 = *((_OWORD *)v3 + 7);
      v100 = v27;
      v28 = *((_OWORD *)v3 + 10);
      v101 = *((_OWORD *)v3 + 9);
      v102 = v28;
      v29 = *((_OWORD *)v3 + 12);
      v103 = *((_OWORD *)v3 + 11);
      v104 = v29;
      v30 = *((_OWORD *)v3 + 14);
      v105 = *((_OWORD *)v3 + 13);
      v106 = v30;
      v87 = *((_OWORD *)v3 + 16);
      v107 = *((_OWORD *)v3 + 15);
      v108 = v87;
      v31 = *((_OWORD *)v3 + 18);
      v109 = *((_OWORD *)v3 + 17);
      v110 = v31;
      v32 = *((_OWORD *)v3 + 20);
      v111 = *((_OWORD *)v3 + 19);
      v112 = v32;
      v33 = *((_OWORD *)v3 + 22);
      v113 = *((_OWORD *)v3 + 21);
      v114 = v33;
      v115 = v24;
      v116 = v25;
      v34 = v21 - v18;
      if (v34 < 0.0)
        v35 = 0.0;
      else
        v35 = v34;
      v36 = *(_QWORD *)(result + 32);
      v37 = *(_QWORD *)(result + 40);
      outlined retain of Text.Effect.TransformContext((uint64_t)&v88);
      memset(v151, 0, sizeof(v151));
      v152 = v36;
      v153 = v37;
      __asm { FMOV            V0.2D, #1.0 }
      v154 = _Q0;
      v155 = 0x3FF0000000000000;
      v156 = 0;
      specialized Spring.settlingDuration<A>(target:initialVelocity:epsilon:)(1.0, 0.0, 0.001, 0.0, 10.0);
      v145 = xmmword_2352826E0;
      v146 = 0x3FF0000000000000;
      Spring.scaledResponse(_:)(0.2 / v43);
      outlined release of Text.Effect.TransformContext((uint64_t)&v88);
      *(_QWORD *)&v145 = &type metadata for Text.Effect.DrawingStateAttribute;
      *((_QWORD *)&v145 + 1) = v19;
      v146 = a2;
      v147 = 0;
      v148 = 1;
      v149 = 0;
      v150 = 1;
      specialized Text.Effect.AttributeTracker.update<A>(for:target:spring:at:)((uint64_t)&v145, (uint64_t)v151, (uint64_t)&v117, v117, v118, v119, v35);
      v16 = v117;
      v8 = v118;
      v9 = v119;
      v10 = v120;
      v11 = v121;
      v12 = *(double *)&v122;
      v13 = *(double *)&v123;
      v14 = v124;
      v7 = v125;
      v6 = v126;
    }
    v44 = v3[1];
    v141[0] = &type metadata for Text.Effect.DrawingStateAttribute;
    v141[1] = v44;
    v141[2] = a2;
    v141[3] = 0;
    v5 = 1;
    v142 = 1;
    v143 = 0;
    v144 = 1;
    v86 = v16;
    if (one-time initialization token for zero == -1)
      goto LABEL_9;
    goto LABEL_25;
  }
  v57 = v3[34];
  if (v57)
  {
    v85 = *(_BYTE *)(result + 72);
    v86 = *(double *)result;
    v58 = v4[36];
    v59 = v4[37];
    v61 = v4[43];
    v60 = v4[44];
    v56 = (_QWORD *)v4[33];
    v79 = v4[42];
    v81 = v4[38];
    v83 = v4[35];
    v62 = v4[39];
    v73 = v4[40];
    v75 = v4[41];
    outlined copy of Text.Effect.TransformContext.DrawingMode(v57, v83, v58, v59, v81, v62, v73, v75, v79, v61, v60);
    swift_retain();
    swift_retain();
    swift_retain();
    v77 = v61;
    swift_bridgeObjectRetain();
    outlined copy of Text.Effect.PathInterpolator.MapKeys(v60);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v56 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v56[2] + 1, 1, v56);
    v64 = v56[2];
    v63 = v56[3];
    v65 = v86;
    if (v64 >= v63 >> 1)
    {
      v67 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v63 > 1), v64 + 1, 1, v56);
      v65 = v86;
      v56 = v67;
    }
    v88 = v57;
    v89 = v83;
    v90 = v58;
    *(_QWORD *)&v91 = v59;
    *((_QWORD *)&v91 + 1) = v81;
    v92 = *(double *)&v62;
    v93 = *(double *)&v73;
    v94 = v75;
    v95 = v79;
    v96 = v77;
    *(_QWORD *)&v97 = v60;
    *((double *)&v97 + 1) = v65;
    *(double *)&v98 = v8;
    *((double *)&v98 + 1) = v9;
    *(_QWORD *)&v99 = v10;
    *((_QWORD *)&v99 + 1) = v11;
    *(double *)&v100 = v12;
    *((double *)&v100 + 1) = v13;
    *(_QWORD *)&v101 = v14;
    *((_QWORD *)&v101 + 1) = v7;
    v69 = v59;
    v6 = v85;
    LOBYTE(v102) = v85;
    _s7SwiftUI4TextVAAE6EffectO11DisplayInfoV13DrawOperationOWOi1_((uint64_t)&v88);
    v56[2] = v64 + 1;
    outlined init with take of Text.Effect.DisplayInfo.DrawOperation((uint64_t)&v88, (uint64_t)&v56[27 * v64 + 4]);
    result = outlined consume of Text.Effect.TransformContext.DrawingMode(v57, v83, v58, v69, v81, v62, v73, v75, v79, v77, v60);
LABEL_21:
    v16 = v86;
    v4[33] = v56;
  }
LABEL_23:
  *(double *)a3 = v16;
  *(double *)(a3 + 8) = v8;
  *(double *)(a3 + 16) = v9;
  *(_QWORD *)(a3 + 24) = v10;
  *(_QWORD *)(a3 + 32) = v11;
  *(double *)(a3 + 40) = v12;
  *(double *)(a3 + 48) = v13;
  *(_QWORD *)(a3 + 56) = v14;
  *(_QWORD *)(a3 + 64) = v7;
  *(_BYTE *)(a3 + 72) = v6;
  return result;
}

uint64_t outlined retain of Text.Effect.TransformContext(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;

  v2 = *(_QWORD *)(a1 + 280);
  v3 = *(_QWORD *)(a1 + 288);
  v4 = *(_QWORD *)(a1 + 296);
  v11 = *(_QWORD *)(a1 + 304);
  v12 = *(_QWORD *)(a1 + 272);
  v9 = *(_QWORD *)(a1 + 320);
  v10 = *(_QWORD *)(a1 + 312);
  v8 = *(_QWORD *)(a1 + 328);
  v7 = *(_OWORD *)(a1 + 336);
  v5 = *(_QWORD *)(a1 + 352);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_retain();
  outlined copy of Text.Effect.TransformContext.DrawingMode(v12, v2, v3, v4, v11, v10, v9, v8, v7, *((uint64_t *)&v7 + 1), v5);
  return a1;
}

uint64_t outlined release of Text.Effect.TransformContext(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;

  v2 = *(_QWORD *)(a1 + 280);
  v3 = *(_QWORD *)(a1 + 288);
  v4 = *(_QWORD *)(a1 + 296);
  v11 = *(_QWORD *)(a1 + 304);
  v12 = *(_QWORD *)(a1 + 272);
  v9 = *(_QWORD *)(a1 + 320);
  v10 = *(_QWORD *)(a1 + 312);
  v8 = *(_QWORD *)(a1 + 328);
  v7 = *(_OWORD *)(a1 + 336);
  v5 = *(_QWORD *)(a1 + 352);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  outlined consume of Text.Effect.TransformContext.DrawingMode(v12, v2, v3, v4, v11, v10, v9, v8, v7, *((uint64_t *)&v7 + 1), v5);
  return a1;
}

unint64_t lazy protocol witness table accessor for type Text.Effect.DrawingStateAttribute and conformance Text.Effect.DrawingStateAttribute()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Text.Effect.DrawingStateAttribute and conformance Text.Effect.DrawingStateAttribute;
  if (!lazy protocol witness table cache variable for type Text.Effect.DrawingStateAttribute and conformance Text.Effect.DrawingStateAttribute)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Text.Effect.DrawingStateAttribute, &type metadata for Text.Effect.DrawingStateAttribute);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.Effect.DrawingStateAttribute and conformance Text.Effect.DrawingStateAttribute);
  }
  return result;
}

uint64_t _s7SwiftUI4TextVAAE6EffectO11DisplayInfoV13DrawOperationOWOi0_(uint64_t result)
{
  char v1;
  uint64_t v2;

  v1 = *(_BYTE *)(result + 208);
  v2 = *(_QWORD *)(result + 176) & 0x1FFFFFFFFLL;
  *(_QWORD *)(result + 160) &= 0xFFFFFFFF000000FFLL;
  *(_QWORD *)(result + 176) = v2;
  *(_BYTE *)(result + 208) = v1 & 1 | 0x40;
  return result;
}

uint64_t _s7SwiftUI4TextVAAE6EffectO11DisplayInfoV13DrawOperationOWOi_(uint64_t result)
{
  uint64_t v1;
  char v2;

  v1 = *(_QWORD *)(result + 176) & 0x1FFFFFFFFLL;
  v2 = *(_BYTE *)(result + 208) & 1;
  *(_QWORD *)(result + 160) &= 0xFFFFFFFF000000FFLL;
  *(_QWORD *)(result + 176) = v1;
  *(_BYTE *)(result + 208) = v2;
  return result;
}

uint64_t outlined init with take of Double?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for Double?(0, (unint64_t *)&lazy cache variable for type metadata for Double?, (uint64_t (*)(_QWORD, _QWORD))MEMORY[0x24BEE1C68]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void type metadata accessor for Text.Effect.AttributeTracker.ValueBox<Text.Effect.DrawingStateAttribute>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void), uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;

  if (!*a2)
  {
    v7 = a3();
    v9 = type metadata accessor for Text.Effect.AttributeTracker.ValueBox(a1, a4, v7, v8);
    if (!v10)
      atomic_store(v9, a2);
  }
}

unint64_t lazy protocol witness table accessor for type Text.Effect.WidthMultiplierAttribute and conformance Text.Effect.WidthMultiplierAttribute()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Text.Effect.WidthMultiplierAttribute and conformance Text.Effect.WidthMultiplierAttribute;
  if (!lazy protocol witness table cache variable for type Text.Effect.WidthMultiplierAttribute and conformance Text.Effect.WidthMultiplierAttribute)
  {
    result = MEMORY[0x23B7C9C04]("lW\v", &type metadata for Text.Effect.WidthMultiplierAttribute);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.Effect.WidthMultiplierAttribute and conformance Text.Effect.WidthMultiplierAttribute);
  }
  return result;
}

unint64_t destroy for Text.Effect.TransformContext.DrawingMode(unint64_t *a1)
{
  unint64_t result;

  result = *a1;
  if (result >= 0xFFFFFFFF)
  {
    swift_release();
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    result = a1[10];
    if (result >= 3)
      return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t initializeWithCopy for Text.Effect.TransformContext.DrawingMode(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  unint64_t v8;
  __int128 v9;
  __int128 v10;

  if (*(_QWORD *)a2 < 0xFFFFFFFFuLL)
  {
    v9 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 48) = v9;
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
    v10 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v10;
  }
  else
  {
    v3 = *(_QWORD *)(a2 + 8);
    v4 = *(_QWORD *)(a2 + 16);
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_QWORD *)(a1 + 8) = v3;
    v5 = *(_QWORD *)(a2 + 24);
    *(_QWORD *)(a1 + 16) = v4;
    *(_QWORD *)(a1 + 24) = v5;
    v6 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 48) = v6;
    v7 = *(_QWORD *)(a2 + 72);
    *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
    *(_QWORD *)(a1 + 72) = v7;
    v8 = *(_QWORD *)(a2 + 80);
    swift_retain();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    if (v8 >= 3)
      swift_bridgeObjectRetain();
    *(_QWORD *)(a1 + 80) = v8;
  }
  return a1;
}

unint64_t *assignWithCopy for Text.Effect.TransformContext.DrawingMode(unint64_t *a1, unint64_t *a2)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  unint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;

  v4 = *a1;
  v5 = *a2;
  if (v4 >= 0xFFFFFFFF)
  {
    if (v5 >= 0xFFFFFFFF)
    {
      *a1 = v5;
      swift_retain();
      swift_release();
      a1[1] = a2[1];
      a1[2] = a2[2];
      swift_retain();
      swift_release();
      a1[3] = a2[3];
      swift_retain();
      swift_release();
      a1[4] = a2[4];
      a1[5] = a2[5];
      a1[6] = a2[6];
      a1[7] = a2[7];
      a1[8] = a2[8];
      a1[9] = a2[9];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v6 = a1 + 10;
      v7 = a2[10];
      if (a1[10] >= 3)
      {
        if (v7 >= 3)
        {
          *v6 = v7;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
        }
        else
        {
          outlined destroy of [Double]((uint64_t)(a1 + 10));
          *v6 = a2[10];
        }
      }
      else
      {
        *v6 = v7;
        if (v7 >= 3)
          swift_bridgeObjectRetain();
      }
      return a1;
    }
    swift_release();
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    if (a1[10] >= 3)
      swift_bridgeObjectRelease();
LABEL_12:
    v9 = *((_OWORD *)a2 + 1);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *((_OWORD *)a1 + 1) = v9;
    v10 = *((_OWORD *)a2 + 2);
    v11 = *((_OWORD *)a2 + 3);
    v12 = *((_OWORD *)a2 + 4);
    a1[10] = a2[10];
    *((_OWORD *)a1 + 3) = v11;
    *((_OWORD *)a1 + 4) = v12;
    *((_OWORD *)a1 + 2) = v10;
    return a1;
  }
  if (v5 < 0xFFFFFFFF)
    goto LABEL_12;
  *a1 = v5;
  a1[1] = a2[1];
  a1[2] = a2[2];
  a1[3] = a2[3];
  a1[4] = a2[4];
  a1[5] = a2[5];
  a1[6] = a2[6];
  a1[7] = a2[7];
  a1[8] = a2[8];
  a1[9] = a2[9];
  v8 = a2[10];
  swift_retain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  if (v8 >= 3)
    swift_bridgeObjectRetain();
  a1[10] = v8;
  return a1;
}

uint64_t outlined destroy of [Double](uint64_t a1)
{
  uint64_t v2;

  type metadata accessor for Double?(0, &lazy cache variable for type metadata for [Double], (uint64_t (*)(_QWORD, _QWORD))MEMORY[0x24BEE1250]);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void type metadata accessor for Double?(uint64_t a1, unint64_t *a2, uint64_t (*a3)(_QWORD, _QWORD))
{
  unint64_t v4;
  uint64_t v5;

  if (!*a2)
  {
    v4 = a3(0, MEMORY[0x24BEE13C8]);
    if (!v5)
      atomic_store(v4, a2);
  }
}

uint64_t assignWithTake for Text.Effect.TransformContext.DrawingMode(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  __int128 v8;
  __int128 v9;

  if (*(_QWORD *)a1 < 0xFFFFFFFFuLL)
  {
LABEL_9:
    v8 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 48) = v8;
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
    v9 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v9;
    return a1;
  }
  if (*(_QWORD *)a2 < 0xFFFFFFFFuLL)
  {
    swift_release();
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    if (*(_QWORD *)(a1 + 80) >= 3uLL)
      swift_bridgeObjectRelease();
    goto LABEL_9;
  }
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_release();
  v4 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v4;
  swift_release();
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_release();
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  v5 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v5;
  swift_bridgeObjectRelease();
  v6 = (unint64_t *)(a1 + 80);
  v7 = *(_QWORD *)(a2 + 80);
  if (*(_QWORD *)(a1 + 80) >= 3uLL)
  {
    if (v7 >= 3)
    {
      *v6 = v7;
      swift_bridgeObjectRelease();
      return a1;
    }
    outlined destroy of [Double](a1 + 80);
  }
  *v6 = v7;
  return a1;
}

uint64_t getEnumTagSinglePayload for Text.Effect.TransformContext.DrawingMode(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *((_BYTE *)a1 + 88))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  if ((v3 + 1) >= 2)
    return v3;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for Text.Effect.TransformContext.DrawingMode(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 80) = 0;
    *(_OWORD *)(result + 48) = 0u;
    *(_OWORD *)(result + 64) = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_OWORD *)(result + 32) = 0u;
    *(_OWORD *)result = 0u;
    *(_DWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 88) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 88) = 0;
    if (a2)
      *(_QWORD *)result = a2;
  }
  return result;
}

uint64_t destructiveInjectEnumTag for Text.Effect.TransformContext.DrawingMode(uint64_t result, int a2)
{
  uint64_t v2;

  if (a2 < 0)
  {
    *(_OWORD *)(result + 72) = 0u;
    v2 = a2 ^ 0x80000000;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
  }
  else
  {
    if (!a2)
      return result;
    v2 = (a2 - 1);
  }
  *(_QWORD *)result = v2;
  return result;
}

void *type metadata accessor for Text.Effect.TransformContext.DrawingMode()
{
  return &unk_250648810;
}

unint64_t destroy for Text.Effect.TransformContext(uint64_t a1)
{
  unint64_t result;

  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  result = *(_QWORD *)(a1 + 272);
  if (result)
  {
    swift_release();
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    result = *(_QWORD *)(a1 + 352);
    if (result >= 3)
      return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t initializeWithCopy for Text.Effect.TransformContext(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  unint64_t v17;
  __int128 v18;
  __int128 v19;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  v4 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = v4;
  v5 = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = v5;
  v6 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = v6;
  v7 = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 160) = v7;
  v8 = *(_OWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 192) = v8;
  v9 = *(_OWORD *)(a2 + 224);
  *(_OWORD *)(a1 + 208) = *(_OWORD *)(a2 + 208);
  *(_OWORD *)(a1 + 224) = v9;
  *(_OWORD *)(a1 + 240) = *(_OWORD *)(a2 + 240);
  v10 = *(_QWORD *)(a2 + 264);
  *(_QWORD *)(a1 + 256) = *(_QWORD *)(a2 + 256);
  *(_QWORD *)(a1 + 264) = v10;
  v11 = *(_QWORD *)(a2 + 272);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  if (v11)
  {
    v12 = *(_QWORD *)(a2 + 280);
    v13 = *(_QWORD *)(a2 + 288);
    *(_QWORD *)(a1 + 272) = v11;
    *(_QWORD *)(a1 + 280) = v12;
    v14 = *(_QWORD *)(a2 + 296);
    *(_QWORD *)(a1 + 288) = v13;
    *(_QWORD *)(a1 + 296) = v14;
    v15 = *(_OWORD *)(a2 + 320);
    *(_OWORD *)(a1 + 304) = *(_OWORD *)(a2 + 304);
    *(_OWORD *)(a1 + 320) = v15;
    v16 = *(_QWORD *)(a2 + 344);
    *(_QWORD *)(a1 + 336) = *(_QWORD *)(a2 + 336);
    *(_QWORD *)(a1 + 344) = v16;
    v17 = *(_QWORD *)(a2 + 352);
    swift_retain();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    *(_QWORD *)(a1 + 352) = v17;
    if (v17 >= 3)
      swift_bridgeObjectRetain();
  }
  else
  {
    v18 = *(_OWORD *)(a2 + 320);
    *(_OWORD *)(a1 + 304) = *(_OWORD *)(a2 + 304);
    *(_OWORD *)(a1 + 320) = v18;
    *(_OWORD *)(a1 + 336) = *(_OWORD *)(a2 + 336);
    *(_QWORD *)(a1 + 352) = *(_QWORD *)(a2 + 352);
    v19 = *(_OWORD *)(a2 + 288);
    *(_OWORD *)(a1 + 272) = *(_OWORD *)(a2 + 272);
    *(_OWORD *)(a1 + 288) = v19;
  }
  *(_BYTE *)(a1 + 376) = *(_BYTE *)(a2 + 376);
  *(_OWORD *)(a1 + 360) = *(_OWORD *)(a2 + 360);
  return a1;
}

uint64_t assignWithCopy for Text.Effect.TransformContext(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _OWORD *v5;
  _OWORD *v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  unint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  v4 = *(_QWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = v4;
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
  *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
  *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
  *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
  *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
  *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
  *(_QWORD *)(a1 + 216) = *(_QWORD *)(a2 + 216);
  *(_QWORD *)(a1 + 224) = *(_QWORD *)(a2 + 224);
  *(_QWORD *)(a1 + 232) = *(_QWORD *)(a2 + 232);
  *(_QWORD *)(a1 + 240) = *(_QWORD *)(a2 + 240);
  *(_QWORD *)(a1 + 248) = *(_QWORD *)(a2 + 248);
  *(_QWORD *)(a1 + 256) = *(_QWORD *)(a2 + 256);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 264) = *(_QWORD *)(a2 + 264);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v5 = (_OWORD *)(a1 + 272);
  v6 = (_OWORD *)(a2 + 272);
  v7 = *(_QWORD *)(a2 + 272);
  if (*(_QWORD *)(a1 + 272))
  {
    if (v7)
    {
      *(_QWORD *)(a1 + 272) = v7;
      swift_retain();
      swift_release();
      *(_QWORD *)(a1 + 280) = *(_QWORD *)(a2 + 280);
      *(_QWORD *)(a1 + 288) = *(_QWORD *)(a2 + 288);
      swift_retain();
      swift_release();
      *(_QWORD *)(a1 + 296) = *(_QWORD *)(a2 + 296);
      swift_retain();
      swift_release();
      *(_QWORD *)(a1 + 304) = *(_QWORD *)(a2 + 304);
      *(_QWORD *)(a1 + 312) = *(_QWORD *)(a2 + 312);
      *(_QWORD *)(a1 + 320) = *(_QWORD *)(a2 + 320);
      *(_QWORD *)(a1 + 328) = *(_QWORD *)(a2 + 328);
      *(_QWORD *)(a1 + 336) = *(_QWORD *)(a2 + 336);
      *(_QWORD *)(a1 + 344) = *(_QWORD *)(a2 + 344);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v8 = (unint64_t *)(a1 + 352);
      v9 = *(_QWORD *)(a2 + 352);
      if (*(_QWORD *)(a1 + 352) < 3uLL)
      {
        *v8 = v9;
        if (v9 < 3)
          goto LABEL_16;
        goto LABEL_13;
      }
      if (v9 >= 3)
      {
        *v8 = v9;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
      }
      else
      {
        outlined destroy of [Double](a1 + 352);
        *v8 = *(_QWORD *)(a2 + 352);
      }
    }
    else
    {
      outlined destroy of Text.Effect.PathInterpolator(a1 + 272);
      v11 = *(_OWORD *)(a2 + 288);
      *v5 = *v6;
      *(_OWORD *)(a1 + 288) = v11;
      v13 = *(_OWORD *)(a2 + 320);
      v12 = *(_OWORD *)(a2 + 336);
      v14 = *(_OWORD *)(a2 + 304);
      *(_QWORD *)(a1 + 352) = *(_QWORD *)(a2 + 352);
      *(_OWORD *)(a1 + 320) = v13;
      *(_OWORD *)(a1 + 336) = v12;
      *(_OWORD *)(a1 + 304) = v14;
    }
  }
  else
  {
    if (v7)
    {
      *(_QWORD *)(a1 + 272) = v7;
      *(_QWORD *)(a1 + 280) = *(_QWORD *)(a2 + 280);
      *(_QWORD *)(a1 + 288) = *(_QWORD *)(a2 + 288);
      *(_QWORD *)(a1 + 296) = *(_QWORD *)(a2 + 296);
      *(_QWORD *)(a1 + 304) = *(_QWORD *)(a2 + 304);
      *(_QWORD *)(a1 + 312) = *(_QWORD *)(a2 + 312);
      *(_QWORD *)(a1 + 320) = *(_QWORD *)(a2 + 320);
      *(_QWORD *)(a1 + 328) = *(_QWORD *)(a2 + 328);
      *(_QWORD *)(a1 + 336) = *(_QWORD *)(a2 + 336);
      *(_QWORD *)(a1 + 344) = *(_QWORD *)(a2 + 344);
      v10 = *(_QWORD *)(a2 + 352);
      swift_retain();
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
      *(_QWORD *)(a1 + 352) = v10;
      if (v10 < 3)
        goto LABEL_16;
LABEL_13:
      swift_bridgeObjectRetain();
      goto LABEL_16;
    }
    v15 = *(_OWORD *)(a2 + 288);
    *v5 = *v6;
    *(_OWORD *)(a1 + 288) = v15;
    v16 = *(_OWORD *)(a2 + 304);
    v17 = *(_OWORD *)(a2 + 320);
    v18 = *(_OWORD *)(a2 + 336);
    *(_QWORD *)(a1 + 352) = *(_QWORD *)(a2 + 352);
    *(_OWORD *)(a1 + 320) = v17;
    *(_OWORD *)(a1 + 336) = v18;
    *(_OWORD *)(a1 + 304) = v16;
  }
LABEL_16:
  v19 = *(_OWORD *)(a2 + 360);
  *(_BYTE *)(a1 + 376) = *(_BYTE *)(a2 + 376);
  *(_OWORD *)(a1 + 360) = v19;
  return a1;
}

uint64_t outlined destroy of Text.Effect.PathInterpolator(uint64_t a1)
{
  destroy for Text.Effect.PathInterpolator(a1);
  return a1;
}

void *__swift_memcpy377_8(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x179uLL);
}

uint64_t assignWithTake for Text.Effect.TransformContext(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  __int128 v13;
  __int128 v14;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  swift_release();
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  swift_release();
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  swift_release();
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  swift_release();
  v4 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = v4;
  v5 = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 160) = v5;
  v6 = *(_OWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 192) = v6;
  v7 = *(_OWORD *)(a2 + 224);
  *(_OWORD *)(a1 + 208) = *(_OWORD *)(a2 + 208);
  *(_OWORD *)(a1 + 224) = v7;
  *(_OWORD *)(a1 + 240) = *(_OWORD *)(a2 + 240);
  *(_QWORD *)(a1 + 256) = *(_QWORD *)(a2 + 256);
  swift_release();
  *(_QWORD *)(a1 + 264) = *(_QWORD *)(a2 + 264);
  swift_bridgeObjectRelease();
  if (!*(_QWORD *)(a1 + 272))
    goto LABEL_8;
  v8 = *(_QWORD *)(a2 + 272);
  if (!v8)
  {
    outlined destroy of Text.Effect.PathInterpolator(a1 + 272);
LABEL_8:
    v13 = *(_OWORD *)(a2 + 320);
    *(_OWORD *)(a1 + 304) = *(_OWORD *)(a2 + 304);
    *(_OWORD *)(a1 + 320) = v13;
    *(_OWORD *)(a1 + 336) = *(_OWORD *)(a2 + 336);
    *(_QWORD *)(a1 + 352) = *(_QWORD *)(a2 + 352);
    v14 = *(_OWORD *)(a2 + 288);
    *(_OWORD *)(a1 + 272) = *(_OWORD *)(a2 + 272);
    *(_OWORD *)(a1 + 288) = v14;
    goto LABEL_9;
  }
  *(_QWORD *)(a1 + 272) = v8;
  swift_release();
  v9 = *(_QWORD *)(a2 + 288);
  *(_QWORD *)(a1 + 280) = *(_QWORD *)(a2 + 280);
  *(_QWORD *)(a1 + 288) = v9;
  swift_release();
  *(_QWORD *)(a1 + 296) = *(_QWORD *)(a2 + 296);
  swift_release();
  *(_OWORD *)(a1 + 304) = *(_OWORD *)(a2 + 304);
  *(_QWORD *)(a1 + 320) = *(_QWORD *)(a2 + 320);
  *(_QWORD *)(a1 + 328) = *(_QWORD *)(a2 + 328);
  v10 = *(_QWORD *)(a2 + 344);
  *(_QWORD *)(a1 + 336) = *(_QWORD *)(a2 + 336);
  *(_QWORD *)(a1 + 344) = v10;
  swift_bridgeObjectRelease();
  v11 = (unint64_t *)(a1 + 352);
  v12 = *(_QWORD *)(a2 + 352);
  if (*(_QWORD *)(a1 + 352) >= 3uLL)
  {
    if (v12 >= 3)
    {
      *v11 = v12;
      swift_bridgeObjectRelease();
      goto LABEL_9;
    }
    outlined destroy of [Double](a1 + 352);
  }
  *v11 = v12;
LABEL_9:
  *(_BYTE *)(a1 + 376) = *(_BYTE *)(a2 + 376);
  *(_OWORD *)(a1 + 360) = *(_OWORD *)(a2 + 360);
  return a1;
}

uint64_t getEnumTagSinglePayload for Text.Effect.TransformContext(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 377))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 256);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for Text.Effect.TransformContext(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 376) = 0;
    *(_OWORD *)(result + 360) = 0u;
    *(_OWORD *)(result + 344) = 0u;
    *(_OWORD *)(result + 328) = 0u;
    *(_OWORD *)(result + 312) = 0u;
    *(_OWORD *)(result + 296) = 0u;
    *(_OWORD *)(result + 280) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 377) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 256) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 377) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for Text.Effect.TransformContext()
{
  return &type metadata for Text.Effect.TransformContext;
}

void specialized == infix<A>(_:_:)(char a1)
{
  __asm { BR              X10 }
}

{
  __asm { BR              X10 }
}

uint64_t sub_2350D7558(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_2350D75F0 + 4 * byte_2352C7F37[a2]))(1635017060);
}

uint64_t sub_2350D75F0(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 1635017060 && v1 == 0xE400000000000000)
    v2 = 1;
  else
    v2 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

uint64_t specialized == infix<A>(_:_:)(unsigned __int8 a1, unsigned __int8 a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  char v8;

  v2 = 0xEB000000006E6F69;
  v3 = 0x74616C736E617274;
  v4 = a1;
  if (a1)
  {
    if (a1 == 1)
      v5 = 0x7254656E69666661;
    else
      v5 = 0xD000000000000013;
    if (v4 == 1)
      v6 = 0xEF6D726F66736E61;
    else
      v6 = 0x80000002352DD5E0;
    v7 = a2;
    if (!a2)
      goto LABEL_15;
    goto LABEL_9;
  }
  v5 = 0x74616C736E617274;
  v6 = 0xEB000000006E6F69;
  v7 = a2;
  if (a2)
  {
LABEL_9:
    if (v7 == 1)
      v3 = 0x7254656E69666661;
    else
      v3 = 0xD000000000000013;
    if (v7 == 1)
      v2 = 0xEF6D726F66736E61;
    else
      v2 = 0x80000002352DD5E0;
  }
LABEL_15:
  if (v5 == v3 && v6 == v2)
    v8 = 1;
  else
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

uint64_t sub_2350D7858(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_2350D78EC + 4 * byte_2352C7F44[a2]))(1701869940);
}

uint64_t sub_2350D78EC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  char v3;

  if (a1 == 1701869940 && v1 == v2)
    v3 = 1;
  else
    v3 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v3 & 1;
}

uint64_t specialized == infix<A>(_:_:)(char a1, char a2)
{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 0x6E6572646C696863;
  else
    v3 = 0x69747265706F7270;
  if (v2)
    v4 = 0xEA00000000007365;
  else
    v4 = 0xE800000000000000;
  if ((a2 & 1) != 0)
    v5 = 0x6E6572646C696863;
  else
    v5 = 0x69747265706F7270;
  if ((a2 & 1) != 0)
    v6 = 0xE800000000000000;
  else
    v6 = 0xEA00000000007365;
  if (v3 == v5 && v4 == v6)
    v7 = 1;
  else
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

uint64_t static View.makeDebuggableView(view:inputs:)@<X0>(int *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  void (*v15)(int *, uint64_t *, uint64_t, uint64_t);
  int v17;
  int ShouldRecordTree;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v25;
  int v27;
  int v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  int v32;
  int v33;
  int v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  int v48;
  int v49;
  int v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  int v55;
  int v56;
  int v57;
  int v58;
  int v59;
  int v60;
  uint64_t v61;

  v61 = *MEMORY[0x24BDAC8D0];
  v27 = *a1;
  v25 = *a2;
  v5 = *((_DWORD *)a2 + 2);
  v23 = a2[2];
  v6 = *((_DWORD *)a2 + 6);
  v7 = *((_DWORD *)a2 + 7);
  v8 = *((_DWORD *)a2 + 9);
  v19 = *((_DWORD *)a2 + 8);
  v20 = a2[6];
  v21 = a2[5];
  v10 = *((_DWORD *)a2 + 14);
  v9 = *((_DWORD *)a2 + 15);
  v11 = *((_DWORD *)a2 + 16);
  v12 = *((_DWORD *)a2 + 17);
  v13 = *((_DWORD *)a2 + 19);
  v17 = *((_DWORD *)a2 + 18);
  v14 = *((_DWORD *)a2 + 20);
  ShouldRecordTree = AGSubgraphShouldRecordTree();
  if (ShouldRecordTree)
    AGSubgraphBeginTreeElement();
  v45 = v25;
  v46 = v5;
  v47 = v23;
  v48 = v6;
  v49 = v7;
  v52 = v21;
  v53 = v20;
  v51 = v8;
  v54 = v10;
  v55 = v9;
  v56 = v11;
  v57 = v12;
  v58 = v17;
  v59 = v13;
  v60 = v14;
  v28 = v27;
  v29 = v25;
  v30 = v5;
  v31 = v23;
  v32 = v6;
  v33 = v7;
  v34 = 0;
  v35 = v8;
  v36 = v21;
  v37 = v20;
  v38 = v10;
  v39 = v9;
  v40 = v11;
  v41 = v12;
  v42 = v17;
  v43 = v13;
  v44 = v14;
  v15 = *(void (**)(int *, uint64_t *, uint64_t, uint64_t))(a4 + 24);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v15(&v28, &v29, a3, a4);
  v50 = v19;
  if ((ShouldRecordTree & 1) != 0)
  {
    specialized static _ViewDebug.reallyWrap<A>(_:value:inputs:)(a5, (uint64_t)&v45);
    AGSubgraphEndTreeElement();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

uint64_t static View.makeDebuggableViewList(view:inputs:)(int *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  int v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int ShouldRecordTree;
  uint64_t result;
  char v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v19;
  int v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  char v28;
  int v29;

  v5 = *a1;
  v6 = *a2;
  v7 = *((_DWORD *)a2 + 2);
  v8 = a2[2];
  v17 = *(_OWORD *)(a2 + 3);
  v10 = a2[5];
  v9 = a2[6];
  v11 = a2[7];
  v12 = *((_DWORD *)a2 + 16);
  v16 = a2[9];
  v15 = *((_BYTE *)a2 + 80);
  ShouldRecordTree = AGSubgraphShouldRecordTree();
  if (ShouldRecordTree)
    AGSubgraphBeginTreeElement();
  v29 = v5;
  v19 = v6;
  v20 = v7;
  v21 = v8;
  v22 = v17;
  v23 = v10;
  v24 = v9;
  v25 = v11;
  v26 = v12;
  v27 = v16;
  v28 = v15;
  result = (*(uint64_t (**)(int *, uint64_t *, uint64_t, uint64_t))(a4 + 32))(&v29, &v19, a3, a4);
  if (ShouldRecordTree)
    return AGSubgraphEndTreeElement();
  return result;
}

uint64_t static ViewModifier.makeDebuggableView(modifier:inputs:body:)@<X0>(int *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  int v8;
  uint64_t v9;
  int v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int v16;
  void (*v17)(int *, uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t);
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int ShouldRecordTree;
  int v28;
  uint64_t v30;
  int v31;
  int v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  int v36;
  int v37;
  int v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  int v52;
  int v53;
  int v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  int v59;
  int v60;
  int v61;
  int v62;
  int v63;
  int v64;
  uint64_t v65;

  v65 = *MEMORY[0x24BDAC8D0];
  v31 = *a1;
  v30 = *a2;
  v8 = *((_DWORD *)a2 + 2);
  v9 = a2[2];
  v11 = *((_DWORD *)a2 + 6);
  v10 = *((_DWORD *)a2 + 7);
  v12 = *((_DWORD *)a2 + 9);
  v28 = *((_DWORD *)a2 + 8);
  v13 = a2[5];
  v14 = a2[6];
  v15 = *((_DWORD *)a2 + 16);
  v22 = *((_DWORD *)a2 + 15);
  v23 = *((_DWORD *)a2 + 14);
  v16 = *((_DWORD *)a2 + 18);
  v20 = *((_DWORD *)a2 + 19);
  v21 = *((_DWORD *)a2 + 17);
  v19 = *((_DWORD *)a2 + 20);
  ShouldRecordTree = AGSubgraphShouldRecordTree();
  if (ShouldRecordTree)
    AGSubgraphBeginTreeElement();
  v49 = v30;
  v50 = v8;
  v51 = v9;
  v52 = v11;
  v53 = v10;
  v56 = v13;
  v57 = v14;
  v55 = v12;
  v58 = v23;
  v59 = v22;
  v60 = v15;
  v61 = v21;
  v62 = v16;
  v63 = v20;
  v64 = v19;
  v32 = v31;
  v33 = v30;
  v34 = v8;
  v35 = v9;
  v36 = v11;
  v37 = v10;
  v38 = 0;
  v39 = v12;
  v40 = v13;
  v41 = v14;
  v42 = v23;
  v43 = v22;
  v44 = v15;
  v45 = v21;
  v46 = v16;
  v47 = v20;
  v48 = v19;
  v17 = *(void (**)(int *, uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t))(a6 + 24);
  swift_retain_n();
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  v17(&v32, &v33, a3, a4, a5, a6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  v54 = v28;
  if ((ShouldRecordTree & 1) != 0)
  {
    specialized static _ViewDebug.reallyWrap<A>(_:value:inputs:)(a7, (uint64_t)&v49);
    AGSubgraphEndTreeElement();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

uint64_t static ViewModifier.makeDebuggableViewList(modifier:inputs:body:)(int *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  char v14;
  int ShouldRecordTree;
  uint64_t result;
  __int128 v17;
  int v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  char v32;
  _DWORD v33[3];

  v22 = *a1;
  v6 = *a2;
  v7 = *((_DWORD *)a2 + 2);
  v8 = a2[2];
  v17 = *(_OWORD *)(a2 + 3);
  v9 = a2[5];
  v10 = a2[6];
  v11 = a2[7];
  v12 = *((_DWORD *)a2 + 16);
  v13 = a2[9];
  v14 = *((_BYTE *)a2 + 80);
  ShouldRecordTree = AGSubgraphShouldRecordTree();
  if (ShouldRecordTree)
    AGSubgraphBeginTreeElement();
  v33[0] = v22;
  v23 = v6;
  v24 = v7;
  v25 = v8;
  v26 = v17;
  v27 = v9;
  v28 = v10;
  v29 = v11;
  v30 = v12;
  v31 = v13;
  v32 = v14;
  result = (*(uint64_t (**)(_DWORD *, uint64_t *, uint64_t, uint64_t, uint64_t))(a6 + 32))(v33, &v23, a3, a4, a5);
  if (ShouldRecordTree)
    return AGSubgraphEndTreeElement();
  return result;
}

uint64_t handleTraceNotification(graph:token:)(void *a1, int token)
{
  uint64_t result;
  void (*v4)(void *, uint64_t *);
  uint64_t v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  uint64_t state64[5];

  state64[4] = *MEMORY[0x24BDAC8D0];
  state64[0] = 0;
  result = notify_get_state(token, state64);
  if (state64[0] == 1)
  {
    result = (uint64_t)dlopen("/AppleInternal/Library/Frameworks/SwiftUITracingSupport.framework/SwiftUITracingSupport", 4);
    if (result)
    {
      result = (uint64_t)dlsym((void *)result, "swiftUITraceRegister");
      if (result)
      {
        v4 = (void (*)(void *, uint64_t *))result;
        if (one-time initialization token for _lock != -1)
          swift_once();
        v5 = static Update._lock;
        _MovableLockLock(static Update._lock);
        v8 = 0;
        v4(a1, &v8);
        if ((v8 & 1) != 0)
        {
          type metadata accessor for ReuseTrace.Recorder();
          v6 = swift_allocObject();
          *(_BYTE *)(v6 + 24) = 0;
          *(_QWORD *)(v6 + 16) = a1;
          swift_beginAccess();
          static ReuseTrace.recorder = (_UNKNOWN *)v6;
          v7 = a1;
          swift_release();
        }
        return _MovableLockUnlock(v5);
      }
    }
  }
  return result;
}

SwiftUI::_ViewDebug::Property_optional __swiftcall _ViewDebug.Property.init(rawValue:)(Swift::UInt32 rawValue)
{
  char *v1;
  char v2;

  if (rawValue >= 9)
    v2 = 9;
  else
    v2 = rawValue;
  *v1 = v2;
  return (SwiftUI::_ViewDebug::Property_optional)rawValue;
}

uint64_t _ViewDebug.Property.rawValue.getter()
{
  unsigned __int8 *v0;

  return *v0;
}

SwiftUI::_ViewDebug::Property_optional protocol witness for RawRepresentable.init(rawValue:) in conformance _ViewDebug.Property(Swift::UInt32 *a1)
{
  return _ViewDebug.Property.init(rawValue:)(*a1);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance _ViewDebug.Property()
{
  unsigned __int8 *v0;

  Hasher.init(_seed:)();
  Hasher._combine(_:)(*v0);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance _ViewDebug.Property()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance _ViewDebug.Property()
{
  unsigned __int8 *v0;

  Hasher.init(_seed:)();
  Hasher._combine(_:)(*v0);
  return Hasher._finalize()();
}

uint64_t _ViewDebug.Properties.rawValue.getter()
{
  unsigned int *v0;

  return *v0;
}

uint64_t _ViewDebug.Properties.init(rawValue:)@<X0>(uint64_t result@<X0>, _DWORD *a2@<X8>)
{
  *a2 = result;
  return result;
}

unsigned __int8 *_ViewDebug.Properties.init(_:)@<X0>(unsigned __int8 *result@<X0>, int *a2@<X8>)
{
  unsigned int v2;
  int v3;

  v2 = *result;
  if (v2 >= 0x20)
    v3 = 0;
  else
    v3 = 1 << v2;
  *a2 = v3;
  return result;
}

void static _ViewDebug.Properties.type.getter(_DWORD *a1@<X8>)
{
  *a1 = 1;
}

void static _ViewDebug.Properties.value.getter(_DWORD *a1@<X8>)
{
  *a1 = 2;
}

void static _ViewDebug.Properties.transform.getter(_DWORD *a1@<X8>)
{
  *a1 = 4;
}

void static _ViewDebug.Properties.position.getter(_DWORD *a1@<X8>)
{
  *a1 = 8;
}

void static _ViewDebug.Properties.size.getter(_DWORD *a1@<X8>)
{
  *a1 = 16;
}

void static _ViewDebug.Properties.environment.getter(_DWORD *a1@<X8>)
{
  *a1 = 32;
}

void static _ViewDebug.Properties.phase.getter(_DWORD *a1@<X8>)
{
  *a1 = 64;
}

void static _ViewDebug.Properties.layoutComputer.getter(_DWORD *a1@<X8>)
{
  *a1 = 128;
}

void static _ViewDebug.Properties.displayList.getter(_DWORD *a1@<X8>)
{
  *a1 = 256;
}

void static _ViewDebug.Properties.all.getter(_DWORD *a1@<X8>)
{
  *a1 = -1;
}

uint64_t static _ViewDebug.properties.getter@<X0>(_DWORD *a1@<X8>)
{
  uint64_t result;

  result = swift_beginAccess();
  *a1 = static _ViewDebug.properties;
  return result;
}

uint64_t static _ViewDebug.properties.setter(int *a1)
{
  int v1;
  uint64_t result;

  v1 = *a1;
  result = swift_beginAccess();
  static _ViewDebug.properties = v1;
  return result;
}

uint64_t (*static _ViewDebug.properties.modify())()
{
  swift_beginAccess();
  return DisplayList.GraphicsRenderer.platformViewMode.modify;
}

uint64_t _ViewDebug.Data.data.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t _ViewDebug.Data.data.setter(uint64_t a1)
{
  _QWORD *v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v1 = a1;
  return result;
}

uint64_t (*_ViewDebug.Data.data.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t _ViewDebug.Data.childData.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t _ViewDebug.Data.childData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 8) = a1;
  return result;
}

uint64_t (*_ViewDebug.Data.childData.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

SwiftUI::_ViewDebug::Data __swiftcall _ViewDebug.Data.init()()
{
  _QWORD *v0;
  uint64_t v1;
  SwiftUI::_ViewDebug::Data result;

  v1 = MEMORY[0x24BEE4AF8];
  *v0 = MEMORY[0x24BEE4B00];
  v0[1] = v1;
  return result;
}

uint64_t static _ViewDebug.isInitialized.getter()
{
  swift_beginAccess();
  return static _ViewDebug.isInitialized;
}

uint64_t static _ViewDebug.isInitialized.setter(char a1)
{
  uint64_t result;

  result = swift_beginAccess();
  static _ViewDebug.isInitialized = a1;
  return result;
}

uint64_t (*static _ViewDebug.isInitialized.modify())()
{
  swift_beginAccess();
  return CAHostingLayer.propertiesNeedingUpdate.modify;
}

uint64_t static _ViewDebug.initialize(inputs:)()
{
  char *v0;
  int v1;
  uint64_t result;

  swift_beginAccess();
  if ((static _ViewDebug.isInitialized & 1) == 0)
  {
    v0 = getenv("SWIFTUI_VIEW_DEBUG");
    if (v0)
    {
      v1 = atoi(v0);
      swift_beginAccess();
      static _ViewDebug.properties = v1;
    }
    static _ViewDebug.isInitialized = 1;
  }
  result = swift_beginAccess();
  if (static _ViewDebug.properties)
    return AGSubgraphSetShouldRecordTree();
  return result;
}

uint64_t $defer #1 <A>() in static ViewModifier.makeDebuggableViewList(modifier:inputs:body:)()
{
  uint64_t result;

  result = AGSubgraphShouldRecordTree();
  if ((_DWORD)result)
    return AGSubgraphEndTreeElement();
  return result;
}

uint64_t static _ViewDebug.makeDebugData(subgraph:)()
{
  uint64_t v0;
  uint64_t TreeRoot;
  uint64_t v3;

  v0 = MEMORY[0x24BEE4AF8];
  v3 = MEMORY[0x24BEE4AF8];
  TreeRoot = AGSubgraphGetTreeRoot();
  if (TreeRoot)
  {
    static _ViewDebug.appendDebugData(from:to:)(TreeRoot, &v3);
    return v3;
  }
  return v0;
}

uint64_t static _ViewDebug.appendDebugData(from:to:)(uint64_t a1, _QWORD *a2)
{
  uint64_t Value;
  uint64_t v4;
  uint64_t Type;
  uint64_t v6;
  uint64_t v7;
  uint64_t NextValue;
  uint64_t v9;
  _OWORD *v10;
  const char *Key;
  __int16 v12;
  _QWORD *v13;
  void (*v14)(_OWORD *, uint64_t);
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  char isUniquelyReferenced_nonNull_native;
  _QWORD *v19;
  char v20;
  unint64_t v21;
  uint64_t v22;
  _BOOL8 v23;
  uint64_t v24;
  char v25;
  unint64_t v26;
  char v27;
  _QWORD *v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  ValueMetadata *v32;
  char v33;
  char v34;
  uint64_t v35;
  _BOOL8 v36;
  uint64_t v37;
  char v38;
  unint64_t v39;
  char v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  ValueMetadata *v44;
  char v45;
  char v46;
  uint64_t v47;
  _BOOL8 v48;
  uint64_t v49;
  char v50;
  unint64_t v51;
  char v52;
  char v53;
  char v54;
  uint64_t v55;
  _BOOL8 v56;
  uint64_t v57;
  char v58;
  unint64_t v59;
  char v60;
  uint64_t v61;
  BOOL v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  __int128 v66;
  __int128 v67;
  char v68;
  char v69;
  uint64_t v70;
  _BOOL8 v71;
  uint64_t v72;
  char v73;
  unint64_t v74;
  char v75;
  uint64_t v76;
  _QWORD *v77;
  uint64_t v78;
  char v79;
  char v80;
  uint64_t v81;
  _BOOL8 v82;
  uint64_t v83;
  char v84;
  unint64_t v85;
  char v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t result;
  uint64_t i;
  unint64_t v93;
  unint64_t v94;
  __int128 v95;
  _QWORD *v96;
  __int128 v97;
  uint64_t ValueIterator;
  uint64_t v99;
  __int128 v100;
  ValueMetadata *MetatypeMetadata;
  _OWORD v102[2];

  if ((AGTreeElementGetFlags() & 1) != 0)
  {
    AGTreeElementMakeChildIterator();
    while (1)
    {
      result = AGTreeElementGetNextChild();
      if (!result)
        break;
      static _ViewDebug.appendDebugData(from:to:)(result, a2);
    }
    return result;
  }
  Value = AGTreeElementGetValue();
  if ((_DWORD)Value == *MEMORY[0x24BE096C0] || (v4 = Value, (Type = AGTreeElementGetType()) == 0))
  {
    AGTreeElementMakeChildIterator();
    while (1)
    {
      result = AGTreeElementGetNextChild();
      if (!result)
        break;
      static _ViewDebug.appendDebugData(from:to:)(result, a2);
    }
    return result;
  }
  v6 = Type;
  *(_QWORD *)&v102[0] = MEMORY[0x24BEE4B00];
  *((_QWORD *)&v102[0] + 1) = MEMORY[0x24BEE4AF8];
  MetatypeMetadata = (ValueMetadata *)swift_getMetatypeMetadata();
  *(_QWORD *)&v100 = v6;
  specialized Dictionary.subscript.setter((uint64_t)&v100, 0);
  specialized project #1 <A>(type:) in static _ViewDebug.appendDebugData(from:to:)(v6, (uint64_t)v102, v4, v6);
  ValueIterator = AGTreeElementMakeValueIterator();
  v99 = v7;
  NextValue = AGTreeElementGetNextValue();
  if (!NextValue)
  {
LABEL_103:
    swift_beginAccess();
    AGTreeElementMakeChildIterator();
    for (i = AGTreeElementGetNextChild(); i; i = AGTreeElementGetNextChild())
      static _ViewDebug.appendDebugData(from:to:)(i, (char *)v102 + 8);
    swift_endAccess();
    v95 = v102[0];
    v19 = (_QWORD *)*a2;
    result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
LABEL_119:
      result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v19[2] + 1, 1, v19);
      v19 = (_QWORD *)result;
    }
    v94 = v19[2];
    v93 = v19[3];
    if (v94 >= v93 >> 1)
    {
      result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v93 > 1), v94 + 1, 1, v19);
      v19 = (_QWORD *)result;
    }
    v19[2] = v94 + 1;
    *(_OWORD *)&v19[2 * v94 + 4] = v95;
    *a2 = v19;
    return result;
  }
  v9 = NextValue;
  while (1)
  {
    Key = (const char *)AGTreeValueGetKey();
    swift_beginAccess();
    v12 = static _ViewDebug.properties;
    if ((static _ViewDebug.properties & 0x20) == 0 || strcmp(Key, "environment"))
      break;
    AGTreeValueGetValue();
    MetatypeMetadata = &type metadata for EnvironmentValues;
    v16 = (_QWORD *)AGGraphGetValue();
    v17 = v16[1];
    *(_QWORD *)&v100 = *v16;
    *((_QWORD *)&v100 + 1) = v17;
    swift_beginAccess();
    outlined init with take of Any(&v100, &v97);
    swift_retain();
    swift_retain();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v19 = *(_QWORD **)&v102[0];
    v96 = *(_QWORD **)&v102[0];
    *(_QWORD *)&v102[0] = 0x8000000000000000;
    v21 = specialized __RawDictionaryStorage.find<A>(_:)(5u);
    v22 = v19[2];
    v23 = (v20 & 1) == 0;
    v24 = v22 + v23;
    if (__OFADD__(v22, v23))
    {
      __break(1u);
LABEL_111:
      __break(1u);
LABEL_112:
      __break(1u);
LABEL_113:
      __break(1u);
LABEL_114:
      __break(1u);
LABEL_115:
      __break(1u);
LABEL_116:
      __break(1u);
LABEL_117:
      __break(1u);
LABEL_118:
      __break(1u);
      goto LABEL_119;
    }
    v25 = v20;
    if (v19[3] >= v24)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      {
        v28 = v96;
        if ((v20 & 1) == 0)
          goto LABEL_48;
      }
      else
      {
        v19 = &v96;
        specialized _NativeDictionary.copy()();
        v28 = v96;
        if ((v25 & 1) == 0)
          goto LABEL_48;
      }
    }
    else
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v24, isUniquelyReferenced_nonNull_native);
      v19 = v96;
      v26 = specialized __RawDictionaryStorage.find<A>(_:)(5u);
      if ((v25 & 1) != (v27 & 1))
        goto LABEL_122;
      v21 = v26;
      v28 = v96;
      if ((v25 & 1) == 0)
      {
LABEL_48:
        v28[(v21 >> 6) + 8] |= 1 << v21;
        *(_BYTE *)(v28[6] + v21) = 5;
        outlined init with take of Any(&v97, (_OWORD *)(v28[7] + 32 * v21));
        v61 = v28[2];
        v62 = __OFADD__(v61, 1);
        v63 = v61 + 1;
        if (v62)
          goto LABEL_114;
        goto LABEL_84;
      }
    }
LABEL_6:
    v10 = (_OWORD *)(v28[7] + 32 * v21);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v10);
    outlined init with take of Any(&v97, v10);
LABEL_7:
    *(_QWORD *)&v102[0] = v28;
    swift_bridgeObjectRelease();
    swift_endAccess();
LABEL_8:
    v9 = AGTreeElementGetNextValue();
    if (!v9)
      goto LABEL_103;
  }
  if ((v12 & 8) != 0 && !strcmp(Key, "position"))
  {
    AGTreeValueGetValue();
    v29 = (uint64_t *)AGGraphGetValue();
    v30 = *v29;
    v31 = v29[1];
    type metadata accessor for CGPoint(0);
    MetatypeMetadata = v32;
    *(_QWORD *)&v100 = v30;
    *((_QWORD *)&v100 + 1) = v31;
    swift_beginAccess();
    outlined init with take of Any(&v100, &v97);
    v33 = swift_isUniquelyReferenced_nonNull_native();
    v19 = *(_QWORD **)&v102[0];
    v96 = *(_QWORD **)&v102[0];
    *(_QWORD *)&v102[0] = 0x8000000000000000;
    v21 = specialized __RawDictionaryStorage.find<A>(_:)(3u);
    v35 = v19[2];
    v36 = (v34 & 1) == 0;
    v37 = v35 + v36;
    if (__OFADD__(v35, v36))
      goto LABEL_111;
    v38 = v34;
    if (v19[3] >= v37)
    {
      if ((v33 & 1) != 0)
      {
        v28 = v96;
        if ((v34 & 1) == 0)
          goto LABEL_58;
      }
      else
      {
        v19 = &v96;
        specialized _NativeDictionary.copy()();
        v28 = v96;
        if ((v38 & 1) == 0)
          goto LABEL_58;
      }
    }
    else
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v37, v33);
      v19 = v96;
      v39 = specialized __RawDictionaryStorage.find<A>(_:)(3u);
      if ((v38 & 1) != (v40 & 1))
        goto LABEL_122;
      v21 = v39;
      v28 = v96;
      if ((v38 & 1) == 0)
      {
LABEL_58:
        v28[(v21 >> 6) + 8] |= 1 << v21;
        *(_BYTE *)(v28[6] + v21) = 3;
        outlined init with take of Any(&v97, (_OWORD *)(v28[7] + 32 * v21));
        v76 = v28[2];
        v62 = __OFADD__(v76, 1);
        v63 = v76 + 1;
        if (v62)
          goto LABEL_116;
        goto LABEL_84;
      }
    }
    goto LABEL_6;
  }
  if ((v12 & 0x10) != 0 && !strcmp(Key, "size"))
  {
    AGTreeValueGetValue();
    v41 = (uint64_t *)AGGraphGetValue();
    v42 = *v41;
    v43 = v41[1];
    type metadata accessor for CGSize(0);
    MetatypeMetadata = v44;
    *(_QWORD *)&v100 = v42;
    *((_QWORD *)&v100 + 1) = v43;
    swift_beginAccess();
    outlined init with take of Any(&v100, &v97);
    v45 = swift_isUniquelyReferenced_nonNull_native();
    v19 = *(_QWORD **)&v102[0];
    v96 = *(_QWORD **)&v102[0];
    *(_QWORD *)&v102[0] = 0x8000000000000000;
    v21 = specialized __RawDictionaryStorage.find<A>(_:)(4u);
    v47 = v19[2];
    v48 = (v46 & 1) == 0;
    v49 = v47 + v48;
    if (__OFADD__(v47, v48))
      goto LABEL_112;
    v50 = v46;
    if (v19[3] >= v49)
    {
      if ((v45 & 1) != 0)
      {
        v28 = v96;
        if ((v46 & 1) == 0)
          goto LABEL_68;
      }
      else
      {
        v19 = &v96;
        specialized _NativeDictionary.copy()();
        v28 = v96;
        if ((v50 & 1) == 0)
          goto LABEL_68;
      }
    }
    else
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v49, v45);
      v19 = v96;
      v51 = specialized __RawDictionaryStorage.find<A>(_:)(4u);
      if ((v50 & 1) != (v52 & 1))
        goto LABEL_122;
      v21 = v51;
      v28 = v96;
      if ((v50 & 1) == 0)
      {
LABEL_68:
        v28[(v21 >> 6) + 8] |= 1 << v21;
        *(_BYTE *)(v28[6] + v21) = 4;
        outlined init with take of Any(&v97, (_OWORD *)(v28[7] + 32 * v21));
        v87 = v28[2];
        v62 = __OFADD__(v87, 1);
        v63 = v87 + 1;
        if (v62)
          goto LABEL_118;
        goto LABEL_84;
      }
    }
    goto LABEL_6;
  }
  if ((v12 & 0x40) == 0 || strcmp(Key, "phase"))
  {
    if ((v12 & 4) != 0 && !strcmp(Key, "transform"))
    {
      AGTreeValueGetValue();
      MetatypeMetadata = &type metadata for ViewTransform;
      v64 = swift_allocObject();
      *(_QWORD *)&v100 = v64;
      v65 = AGGraphGetValue();
      v66 = *(_OWORD *)(v65 + 8);
      v67 = *(_OWORD *)(v65 + 24);
      *(_QWORD *)(v64 + 16) = *(_QWORD *)v65;
      *(_OWORD *)(v64 + 24) = v66;
      *(_OWORD *)(v64 + 40) = v67;
      swift_beginAccess();
      outlined init with take of Any(&v100, &v97);
      swift_retain();
      v68 = swift_isUniquelyReferenced_nonNull_native();
      v19 = *(_QWORD **)&v102[0];
      v96 = *(_QWORD **)&v102[0];
      *(_QWORD *)&v102[0] = 0x8000000000000000;
      v21 = specialized __RawDictionaryStorage.find<A>(_:)(2u);
      v70 = v19[2];
      v71 = (v69 & 1) == 0;
      v72 = v70 + v71;
      if (__OFADD__(v70, v71))
        goto LABEL_115;
      v73 = v69;
      if (v19[3] >= v72)
      {
        if ((v68 & 1) != 0)
        {
          v28 = v96;
          if ((v69 & 1) == 0)
            goto LABEL_78;
        }
        else
        {
          specialized _NativeDictionary.copy()();
          v28 = v96;
          if ((v73 & 1) == 0)
            goto LABEL_78;
        }
      }
      else
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v72, v68);
        v74 = specialized __RawDictionaryStorage.find<A>(_:)(2u);
        if ((v73 & 1) != (v75 & 1))
          goto LABEL_122;
        v21 = v74;
        v28 = v96;
        if ((v73 & 1) == 0)
        {
LABEL_78:
          v28[(v21 >> 6) + 8] |= 1 << v21;
          *(_BYTE *)(v28[6] + v21) = 2;
          outlined init with take of Any(&v97, (_OWORD *)(v28[7] + 32 * v21));
          v89 = v28[2];
          v62 = __OFADD__(v89, 1);
          v63 = v89 + 1;
          if (v62)
            goto LABEL_120;
          goto LABEL_84;
        }
      }
    }
    else
    {
      if ((v12 & 0x80) == 0 || strcmp(Key, "layoutComputer"))
      {
        if ((v12 & 0x100) != 0 && !strcmp(Key, "displayList"))
        {
          if (one-time initialization token for shared != -1)
            swift_once();
          swift_beginAccess();
          v13 = static CoreGlue.shared;
          swift_beginAccess();
          v14 = *(void (**)(_OWORD *, uint64_t))((*MEMORY[0x24BEE4EA0] & *v13) + 0xC0);
          v15 = v13;
          v14(v102, v9);
          swift_endAccess();

        }
        goto LABEL_8;
      }
      AGTreeValueGetValue();
      MetatypeMetadata = &type metadata for LayoutComputer;
      v77 = (_QWORD *)AGGraphGetValue();
      v78 = v77[1];
      *(_QWORD *)&v100 = *v77;
      *((_QWORD *)&v100 + 1) = v78;
      swift_beginAccess();
      outlined init with take of Any(&v100, &v97);
      swift_retain();
      v79 = swift_isUniquelyReferenced_nonNull_native();
      v19 = *(_QWORD **)&v102[0];
      v96 = *(_QWORD **)&v102[0];
      *(_QWORD *)&v102[0] = 0x8000000000000000;
      v21 = specialized __RawDictionaryStorage.find<A>(_:)(7u);
      v81 = v19[2];
      v82 = (v80 & 1) == 0;
      v83 = v81 + v82;
      if (__OFADD__(v81, v82))
        goto LABEL_117;
      v84 = v80;
      if (v19[3] >= v83)
      {
        if ((v79 & 1) != 0)
        {
          v28 = v96;
          if ((v80 & 1) == 0)
            goto LABEL_83;
        }
        else
        {
          specialized _NativeDictionary.copy()();
          v28 = v96;
          if ((v84 & 1) == 0)
            goto LABEL_83;
        }
      }
      else
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v83, v79);
        v85 = specialized __RawDictionaryStorage.find<A>(_:)(7u);
        if ((v84 & 1) != (v86 & 1))
          goto LABEL_122;
        v21 = v85;
        v28 = v96;
        if ((v84 & 1) == 0)
        {
LABEL_83:
          v28[(v21 >> 6) + 8] |= 1 << v21;
          *(_BYTE *)(v28[6] + v21) = 7;
          outlined init with take of Any(&v97, (_OWORD *)(v28[7] + 32 * v21));
          v90 = v28[2];
          v62 = __OFADD__(v90, 1);
          v63 = v90 + 1;
          if (v62)
            goto LABEL_121;
          goto LABEL_84;
        }
      }
    }
    goto LABEL_6;
  }
  AGTreeValueGetValue();
  MetatypeMetadata = &type metadata for _GraphInputs.Phase;
  LODWORD(v100) = *(_DWORD *)AGGraphGetValue();
  swift_beginAccess();
  outlined init with take of Any(&v100, &v97);
  v53 = swift_isUniquelyReferenced_nonNull_native();
  v19 = *(_QWORD **)&v102[0];
  v96 = *(_QWORD **)&v102[0];
  *(_QWORD *)&v102[0] = 0x8000000000000000;
  v21 = specialized __RawDictionaryStorage.find<A>(_:)(6u);
  v55 = v19[2];
  v56 = (v54 & 1) == 0;
  v57 = v55 + v56;
  if (__OFADD__(v55, v56))
    goto LABEL_113;
  v58 = v54;
  if (v19[3] >= v57)
  {
    if ((v53 & 1) != 0)
    {
      v28 = v96;
      if ((v54 & 1) == 0)
        goto LABEL_73;
    }
    else
    {
      specialized _NativeDictionary.copy()();
      v28 = v96;
      if ((v58 & 1) == 0)
        goto LABEL_73;
    }
    goto LABEL_6;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v57, v53);
  v59 = specialized __RawDictionaryStorage.find<A>(_:)(6u);
  if ((v58 & 1) != (v60 & 1))
    goto LABEL_122;
  v21 = v59;
  v28 = v96;
  if ((v58 & 1) != 0)
    goto LABEL_6;
LABEL_73:
  v28[(v21 >> 6) + 8] |= 1 << v21;
  *(_BYTE *)(v28[6] + v21) = 6;
  outlined init with take of Any(&v97, (_OWORD *)(v28[7] + 32 * v21));
  v88 = v28[2];
  v62 = __OFADD__(v88, 1);
  v63 = v88 + 1;
  if (!v62)
  {
LABEL_84:
    v28[2] = v63;
    goto LABEL_7;
  }
  __break(1u);
LABEL_120:
  __break(1u);
LABEL_121:
  __break(1u);
LABEL_122:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t specialized project #1 <A>(type:) in static _ViewDebug.appendDebugData(from:to:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *boxed_opaque_existential_1;
  uint64_t Value;
  uint64_t v8[4];

  v8[3] = a4;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v8);
  Value = AGGraphGetValue();
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(a4 - 8) + 16))(boxed_opaque_existential_1, Value, a4);
  swift_beginAccess();
  specialized Dictionary.subscript.setter((uint64_t)v8, 1);
  return swift_endAccess();
}

uint64_t static _ViewDebug.serializedData(_:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD v8[14];

  v2 = type metadata accessor for JSONEncoder.NonConformingFloatEncodingStrategy();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (_QWORD *)((char *)v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  type metadata accessor for JSONEncoder();
  swift_allocObject();
  JSONEncoder.init()();
  *v5 = 6712937;
  v5[1] = 0xE300000000000000;
  v5[2] = 1718511917;
  v5[3] = 0xE400000000000000;
  v5[4] = 7233902;
  v5[5] = 0xE300000000000000;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v3 + 104))(v5, *MEMORY[0x24BDCB388], v2);
  dispatch thunk of JSONEncoder.nonConformingFloatEncodingStrategy.setter();
  v8[13] = a1;
  type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for [_ViewDebug.Data], (uint64_t)&type metadata for _ViewDebug.Data, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1250]);
  lazy protocol witness table accessor for type [_ViewDebug.Data] and conformance <A> [A](&lazy protocol witness table cache variable for type [_ViewDebug.Data] and conformance <A> [A], &lazy cache variable for type metadata for [_ViewDebug.Data], (uint64_t)&type metadata for _ViewDebug.Data, (uint64_t (*)(void))lazy protocol witness table accessor for type _ViewDebug.Data and conformance _ViewDebug.Data);
  v6 = dispatch thunk of JSONEncoder.encode<A>(_:)();
  swift_release();
  return v6;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance _ViewDebug.Data.CodingKeys(char *a1, char *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance _ViewDebug.Data.CodingKeys()
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance _ViewDebug.Data.CodingKeys()
{
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance _ViewDebug.Data.CodingKeys()
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance _ViewDebug.Data.CodingKeys@<X0>(Swift::String *a1@<X0>, char *a2@<X8>)
{
  Swift::Int v3;
  uint64_t result;
  char v5;

  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of _ViewDebug.Data.CodingKeys.init(rawValue:), *a1);
  result = swift_bridgeObjectRelease();
  if (v3 == 1)
    v5 = 1;
  else
    v5 = 2;
  if (!v3)
    v5 = 0;
  *a2 = v5;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance _ViewDebug.Data.CodingKeys(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  uint64_t v2;
  unint64_t v3;

  v2 = 0x69747265706F7270;
  if (*v1)
    v2 = 0x6E6572646C696863;
  v3 = 0xEA00000000007365;
  if (*v1)
    v3 = 0xE800000000000000;
  *a1 = v2;
  a1[1] = v3;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance _ViewDebug.Data.CodingKeys()
{
  _BYTE *v0;

  if (*v0)
    return 0x6E6572646C696863;
  else
    return 0x69747265706F7270;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance _ViewDebug.Data.CodingKeys@<X0>(Swift::String string@<0:X0, 8:X1>, char *a2@<X8>)
{
  void *object;
  Swift::String v3;
  Swift::Int v5;
  uint64_t result;
  char v7;

  object = string._object;
  v3._countAndFlagsBits = string._countAndFlagsBits;
  v3._object = object;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of _ViewDebug.Data.CodingKeys.init(rawValue:), v3);
  result = swift_bridgeObjectRelease();
  if (v5 == 1)
    v7 = 1;
  else
    v7 = 2;
  if (!v5)
    v7 = 0;
  *a2 = v7;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance _ViewDebug.Data.CodingKeys()
{
  lazy protocol witness table accessor for type _ViewDebug.Data.CodingKeys and conformance _ViewDebug.Data.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance _ViewDebug.Data.CodingKeys()
{
  lazy protocol witness table accessor for type _ViewDebug.Data.CodingKeys and conformance _ViewDebug.Data.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t _ViewDebug.Data.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  _QWORD v13[2];
  uint64_t v14;
  char v15;
  uint64_t v16;

  type metadata accessor for KeyedEncodingContainer<_ViewDebug.Data.CodingKeys>(0, &lazy cache variable for type metadata for KeyedEncodingContainer<_ViewDebug.Data.CodingKeys>, (void (*)(void))lazy protocol witness table accessor for type _ViewDebug.Data.CodingKeys and conformance _ViewDebug.Data.CodingKeys);
  v4 = v3;
  v14 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)v13 - v5;
  v8 = *v1;
  v7 = v1[1];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type _ViewDebug.Data.CodingKeys and conformance _ViewDebug.Data.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  v9 = v13[1];
  v10 = specialized Sequence.compactMap<A>(_:)(v8, v8, v7);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  v16 = v10;
  v15 = 0;
  type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for [_ViewDebug.Data.SerializedProperty], (uint64_t)&type metadata for _ViewDebug.Data.SerializedProperty, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1250]);
  lazy protocol witness table accessor for type [_ViewDebug.Data] and conformance <A> [A](&lazy protocol witness table cache variable for type [_ViewDebug.Data.SerializedProperty] and conformance <A> [A], &lazy cache variable for type metadata for [_ViewDebug.Data.SerializedProperty], (uint64_t)&type metadata for _ViewDebug.Data.SerializedProperty, (uint64_t (*)(void))lazy protocol witness table accessor for type _ViewDebug.Data.SerializedProperty and conformance _ViewDebug.Data.SerializedProperty);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (v9)
  {
    swift_bridgeObjectRelease();
    return (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v6, v4);
  }
  else
  {
    v12 = v14;
    swift_bridgeObjectRelease();
    v16 = v7;
    v15 = 1;
    type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for [_ViewDebug.Data], (uint64_t)&type metadata for _ViewDebug.Data, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1250]);
    lazy protocol witness table accessor for type [_ViewDebug.Data] and conformance <A> [A](&lazy protocol witness table cache variable for type [_ViewDebug.Data] and conformance <A> [A], &lazy cache variable for type metadata for [_ViewDebug.Data], (uint64_t)&type metadata for _ViewDebug.Data, (uint64_t (*)(void))lazy protocol witness table accessor for type _ViewDebug.Data and conformance _ViewDebug.Data);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v6, v4);
  }
}

uint64_t _ViewDebug.Data.SerializedProperty.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v9;
  char v10;
  char v11;

  type metadata accessor for KeyedEncodingContainer<_ViewDebug.Data.CodingKeys>(0, &lazy cache variable for type metadata for KeyedEncodingContainer<_ViewDebug.Data.SerializedProperty.CodingKeys>, (void (*)(void))lazy protocol witness table accessor for type _ViewDebug.Data.SerializedProperty.CodingKeys and conformance _ViewDebug.Data.SerializedProperty.CodingKeys);
  v4 = v3;
  v5 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v7 = (char *)&v9 - v6;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type _ViewDebug.Data.SerializedProperty.CodingKeys and conformance _ViewDebug.Data.SerializedProperty.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v11 = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v1)
  {
    v10 = 1;
    lazy protocol witness table accessor for type _ViewDebug.Data.SerializedAttribute and conformance _ViewDebug.Data.SerializedAttribute();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance _ViewDebug.Data.SerializedProperty.CodingKeys()
{
  _BYTE *v0;

  if (*v0)
    return 0x7475626972747461;
  else
    return 25705;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance _ViewDebug.Data.SerializedProperty.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = specialized _ViewDebug.Data.SerializedProperty.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance _ViewDebug.Data.SerializedProperty.CodingKeys()
{
  lazy protocol witness table accessor for type _ViewDebug.Data.SerializedProperty.CodingKeys and conformance _ViewDebug.Data.SerializedProperty.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance _ViewDebug.Data.SerializedProperty.CodingKeys()
{
  lazy protocol witness table accessor for type _ViewDebug.Data.SerializedProperty.CodingKeys and conformance _ViewDebug.Data.SerializedProperty.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance _ViewDebug.Data.SerializedProperty(_QWORD *a1)
{
  return _ViewDebug.Data.SerializedProperty.encode(to:)(a1);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance _ViewDebug.Data.SerializedAttribute.Flags()
{
  lazy protocol witness table accessor for type _ViewDebug.Data.SerializedAttribute.Flags and conformance _ViewDebug.Data.SerializedAttribute.Flags();
  return RawRepresentable<>.encode(to:)();
}

void protocol witness for static Equatable.== infix(_:_:) in conformance _ViewDebug.Data.SerializedAttribute.CodingKeys(char *a1)
{
  specialized == infix<A>(_:_:)(*a1);
}

void protocol witness for Hashable.hashValue.getter in conformance _ViewDebug.Data.SerializedAttribute.CodingKeys()
{
  char *v0;

  specialized RawRepresentable<>.hashValue.getter(*v0);
}

void protocol witness for Hashable.hash(into:) in conformance _ViewDebug.Data.SerializedAttribute.CodingKeys()
{
  __asm { BR              X10 }
}

uint64_t sub_2350D9DB0()
{
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

void protocol witness for Hashable._rawHashValue(seed:) in conformance _ViewDebug.Data.SerializedAttribute.CodingKeys(uint64_t a1)
{
  char *v1;

  specialized RawRepresentable<>._rawHashValue(seed:)(a1, *v1);
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance _ViewDebug.Data.SerializedAttribute.CodingKeys@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = specialized _ViewDebug.Data.SerializedAttribute.CodingKeys.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance _ViewDebug.Data.SerializedAttribute.CodingKeys()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_2350D9E98 + 4 * byte_2352C7F50[*v0]))();
}

void sub_2350D9E98(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = 1701869940;
  a1[1] = v1;
}

void sub_2350D9EA8(uint64_t a1@<X8>)
{
  strcpy((char *)a1, "readableType");
  *(_BYTE *)(a1 + 13) = 0;
  *(_WORD *)(a1 + 14) = -5120;
}

void sub_2350D9ECC(_QWORD *a1@<X8>)
{
  *a1 = 0x7367616C66;
  a1[1] = 0xE500000000000000;
}

void sub_2350D9EE4(_QWORD *a1@<X8>)
{
  *a1 = 0x65756C6176;
  a1[1] = 0xE500000000000000;
}

void sub_2350D9EFC(uint64_t a1@<X8>)
{
  strcpy((char *)a1, "subattributes");
  *(_WORD *)(a1 + 14) = -4864;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance _ViewDebug.Data.SerializedAttribute.CodingKeys()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_2350D9F4C + 4 * byte_2352C7F56[*v0]))(1701667182, 0xE400000000000000);
}

uint64_t sub_2350D9F4C()
{
  return 1701869940;
}

uint64_t sub_2350D9F58()
{
  return 0x656C626164616572;
}

uint64_t sub_2350D9F78()
{
  return 0x7367616C66;
}

uint64_t sub_2350D9F8C()
{
  return 0x65756C6176;
}

uint64_t sub_2350D9FA0()
{
  return 0x6972747461627573;
}

unint64_t protocol witness for CodingKey.init(stringValue:) in conformance _ViewDebug.Data.SerializedAttribute.CodingKeys@<X0>(Swift::String a1@<X1:X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = specialized _ViewDebug.Data.SerializedAttribute.CodingKeys.init(rawValue:)(a1);
  *a2 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance _ViewDebug.Data.SerializedAttribute.CodingKeys()
{
  lazy protocol witness table accessor for type _ViewDebug.Data.SerializedAttribute.CodingKeys and conformance _ViewDebug.Data.SerializedAttribute.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance _ViewDebug.Data.SerializedAttribute.CodingKeys()
{
  lazy protocol witness table accessor for type _ViewDebug.Data.SerializedAttribute.CodingKeys and conformance _ViewDebug.Data.SerializedAttribute.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t _ViewDebug.Data.SerializedAttribute.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  _BYTE v11[24];
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  _QWORD v16[4];

  v3 = v1;
  type metadata accessor for KeyedEncodingContainer<_ViewDebug.Data.CodingKeys>(0, &lazy cache variable for type metadata for KeyedEncodingContainer<_ViewDebug.Data.SerializedAttribute.CodingKeys>, (void (*)(void))lazy protocol witness table accessor for type _ViewDebug.Data.SerializedAttribute.CodingKeys and conformance _ViewDebug.Data.SerializedAttribute.CodingKeys);
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v9 = &v11[-v8];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type _ViewDebug.Data.SerializedAttribute.CodingKeys and conformance _ViewDebug.Data.SerializedAttribute.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v16[0]) = 0;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  if (v2)
    return (*(uint64_t (**)(_BYTE *, uint64_t))(v7 + 8))(v9, v6);
  LOBYTE(v16[0]) = 1;
  KeyedEncodingContainer.encode(_:forKey:)();
  LOBYTE(v16[0]) = 2;
  KeyedEncodingContainer.encode(_:forKey:)();
  v16[0] = *(_QWORD *)(v3 + 48);
  LOBYTE(v13) = 3;
  lazy protocol witness table accessor for type _ViewDebug.Data.SerializedAttribute.Flags and conformance _ViewDebug.Data.SerializedAttribute.Flags();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  v16[0] = *(_QWORD *)(v3 + 88);
  LOBYTE(v13) = 5;
  type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for [_ViewDebug.Data.SerializedAttribute], (uint64_t)&type metadata for _ViewDebug.Data.SerializedAttribute, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1250]);
  lazy protocol witness table accessor for type [_ViewDebug.Data] and conformance <A> [A](&lazy protocol witness table cache variable for type [_ViewDebug.Data.SerializedAttribute] and conformance <A> [A], &lazy cache variable for type metadata for [_ViewDebug.Data.SerializedAttribute], (uint64_t)&type metadata for _ViewDebug.Data.SerializedAttribute, (uint64_t (*)(void))lazy protocol witness table accessor for type _ViewDebug.Data.SerializedAttribute and conformance _ViewDebug.Data.SerializedAttribute);
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  outlined init with copy of Any?(v3 + 56, (uint64_t)v11);
  if (v12)
  {
    type metadata accessor for ScrollStateRequest(0, &lazy cache variable for type metadata for Encodable);
    if ((swift_dynamicCast() & 1) != 0)
    {
      if (*((_QWORD *)&v14 + 1))
      {
        outlined init with take of ScrollStateRequest(&v13, (uint64_t)v16);
        __swift_project_boxed_opaque_existential_1(v16, v16[3]);
        specialized encode #1 <A>(value:) in _ViewDebug.Data.SerializedAttribute.encode(to:)();
        (*(void (**)(_BYTE *, uint64_t))(v7 + 8))(v9, v6);
        return __swift_destroy_boxed_opaque_existential_1((uint64_t)v16);
      }
    }
    else
    {
      v15 = 0;
      v13 = 0u;
      v14 = 0u;
    }
  }
  else
  {
    outlined destroy of CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content?((uint64_t)v11, (unint64_t *)&lazy cache variable for type metadata for Any?, MEMORY[0x24BEE4AD8] + 8);
    v13 = 0u;
    v14 = 0u;
    v15 = 0;
  }
  (*(void (**)(_BYTE *, uint64_t))(v7 + 8))(v9, v6);
  return outlined destroy of CodableAttributedString.Range.DecodingWrapper<ResolvableProgress>((uint64_t)&v13, (uint64_t)&lazy cache variable for type metadata for Encodable?, (uint64_t)&lazy cache variable for type metadata for Encodable, MEMORY[0x24BEE0508], (uint64_t (*)(_QWORD))type metadata accessor for AnyTrackedValue?);
}

uint64_t specialized encode #1 <A>(value:) in _ViewDebug.Data.SerializedAttribute.encode(to:)()
{
  swift_beginAccess();
  type metadata accessor for KeyedEncodingContainer<_ViewDebug.Data.CodingKeys>(0, &lazy cache variable for type metadata for KeyedEncodingContainer<_ViewDebug.Data.SerializedAttribute.CodingKeys>, (void (*)(void))lazy protocol witness table accessor for type _ViewDebug.Data.SerializedAttribute.CodingKeys and conformance _ViewDebug.Data.SerializedAttribute.CodingKeys);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  return swift_endAccess();
}

uint64_t _ViewDebug.Data.SerializedAttribute.init(value:serializeValue:label:subattributes:)@<X0>(_QWORD *a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  _QWORD v16[4];

  *(_QWORD *)a6 = a3;
  *(_QWORD *)(a6 + 8) = a4;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  v16[0] = swift_getDynamicType();
  type metadata accessor for Any.Type();
  *(_QWORD *)(a6 + 16) = String.init<A>(reflecting:)();
  *(_QWORD *)(a6 + 24) = v10;
  *(_QWORD *)(a6 + 32) = AGTypeID.description.getter();
  *(_QWORD *)(a6 + 40) = v11;
  v12 = MEMORY[0x24BEE4AD8];
  type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for Any?, MEMORY[0x24BEE4AD8] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1C68]);
  _viewProtocolDescriptor();
  v13 = swift_conformsToProtocol();
  _viewModifierProtocolDescriptor();
  v14 = swift_conformsToProtocol();
  if (!v13)
  {
    if (!v14)
    {
      *(_QWORD *)(a6 + 48) = 0;
      if ((a2 & 1) != 0)
        goto LABEL_9;
      goto LABEL_7;
    }
    *(_QWORD *)(a6 + 48) = 2;
    if ((a2 & 1) == 0)
      goto LABEL_7;
LABEL_9:
    static _ViewDebug.Data.SerializedAttribute.serialize(value:)((uint64_t)a1, (uint64_t)v16);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    result = outlined init with take of AccessibilityDataSeriesConfiguration.AxisConfiguration?((uint64_t)v16, a6 + 56, (unint64_t *)&lazy cache variable for type metadata for Any?, v12 + 8);
    goto LABEL_10;
  }
  if (!v14)
  {
    *(_QWORD *)(a6 + 48) = 1;
    if ((a2 & 1) == 0)
      goto LABEL_7;
    goto LABEL_9;
  }
  *(_QWORD *)(a6 + 48) = 3;
  if ((a2 & 1) != 0)
    goto LABEL_9;
LABEL_7:
  result = __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  *(_OWORD *)(a6 + 72) = 0u;
  *(_OWORD *)(a6 + 56) = 0u;
LABEL_10:
  *(_QWORD *)(a6 + 88) = a5;
  return result;
}

double static _ViewDebug.Data.SerializedAttribute.serialize(value:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v16;
  uint64_t v17;
  double result;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  _BYTE v26[32];
  _QWORD v27[3];
  uint64_t v28;
  uint64_t v29;
  _OWORD v30[2];

  type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for Mirror.DisplayStyle?, (uint64_t (*)(uint64_t))MEMORY[0x24BEE4398], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v23 - v5;
  v7 = type metadata accessor for Mirror();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of Any(a1, (uint64_t)v30);
  outlined init with copy of Any(a1, (uint64_t)v26);
  type metadata accessor for ScrollStateRequest(0, &lazy cache variable for type metadata for CustomViewDebugValueConvertible);
  if ((swift_dynamicCast() & 1) != 0)
  {
    outlined init with take of ScrollStateRequest(&v23, (uint64_t)v27);
    v11 = v28;
    v12 = v29;
    __swift_project_boxed_opaque_existential_1(v27, v28);
    (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v12 + 8))(&v23, v11, v12);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v30);
    outlined init with take of Any(&v23, v30);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v27);
  }
  else
  {
    v25 = 0;
    v23 = 0u;
    v24 = 0u;
    outlined destroy of CodableAttributedString.Range.DecodingWrapper<ResolvableProgress>((uint64_t)&v23, (uint64_t)&lazy cache variable for type metadata for CustomViewDebugValueConvertible?, (uint64_t)&lazy cache variable for type metadata for CustomViewDebugValueConvertible, (uint64_t)&protocol descriptor for CustomViewDebugValueConvertible, (uint64_t (*)(_QWORD))type metadata accessor for AnyTrackedValue?);
  }
  outlined init with copy of Any((uint64_t)v30, (uint64_t)v26);
  type metadata accessor for ScrollStateRequest(0, &lazy cache variable for type metadata for Encodable);
  if (swift_dynamicCast())
  {
    outlined init with take of ScrollStateRequest(&v23, (uint64_t)v27);
    v13 = v28;
    v14 = __swift_project_boxed_opaque_existential_1(v27, v28);
    *(_QWORD *)(a2 + 24) = v13;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)a2);
    (*(void (**)(uint64_t *, _QWORD *, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(boxed_opaque_existential_1, v14, v13);
LABEL_8:
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v30);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v27);
    return result;
  }
  v25 = 0;
  v23 = 0u;
  v24 = 0u;
  outlined destroy of CodableAttributedString.Range.DecodingWrapper<ResolvableProgress>((uint64_t)&v23, (uint64_t)&lazy cache variable for type metadata for Encodable?, (uint64_t)&lazy cache variable for type metadata for Encodable, MEMORY[0x24BEE0508], (uint64_t (*)(_QWORD))type metadata accessor for AnyTrackedValue?);
  outlined init with copy of Any((uint64_t)v30, (uint64_t)v26);
  type metadata accessor for ScrollStateRequest(0, &lazy cache variable for type metadata for CustomDebugStringConvertible);
  if (swift_dynamicCast())
  {
    outlined init with take of ScrollStateRequest(&v23, (uint64_t)v27);
    __swift_project_boxed_opaque_existential_1(v27, v28);
    v16 = dispatch thunk of CustomStringConvertible.description.getter();
    *(_QWORD *)(a2 + 24) = MEMORY[0x24BEE0D00];
    *(_QWORD *)a2 = v16;
    *(_QWORD *)(a2 + 8) = v17;
    goto LABEL_8;
  }
  v25 = 0;
  v23 = 0u;
  v24 = 0u;
  outlined destroy of CodableAttributedString.Range.DecodingWrapper<ResolvableProgress>((uint64_t)&v23, (uint64_t)&lazy cache variable for type metadata for CustomDebugStringConvertible?, (uint64_t)&lazy cache variable for type metadata for CustomDebugStringConvertible, MEMORY[0x24BEE3A38], (uint64_t (*)(_QWORD))type metadata accessor for AnyTrackedValue?);
  outlined init with copy of Any((uint64_t)v30, (uint64_t)v27);
  Mirror.init(reflecting:)();
  Mirror.displayStyle.getter();
  v19 = type metadata accessor for Mirror.DisplayStyle();
  v20 = *(_QWORD *)(v19 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v6, 1, v19) == 1)
  {
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v30);
    outlined destroy of CodableAttributedString.Range.DecodingWrapper<ResolvableProgress>((uint64_t)v6, (uint64_t)&lazy cache variable for type metadata for Mirror.DisplayStyle?, (uint64_t)MEMORY[0x24BEE4398], (uint64_t)MEMORY[0x24BEE1C68], (uint64_t (*)(_QWORD))type metadata accessor for [(_:)]);
  }
  else
  {
    if ((*(unsigned int (**)(char *, uint64_t))(v20 + 88))(v6, v19) == *MEMORY[0x24BEE4380])
    {
      (*(void (**)(char *, uint64_t))(v20 + 8))(v6, v19);
      outlined init with copy of Any((uint64_t)v30, (uint64_t)v27);
      v21 = String.init<A>(describing:)();
      *(_QWORD *)(a2 + 24) = MEMORY[0x24BEE0D00];
      *(_QWORD *)a2 = v21;
      *(_QWORD *)(a2 + 8) = v22;
      (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v30);
      return result;
    }
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v30);
    (*(void (**)(char *, uint64_t))(v20 + 8))(v6, v19);
  }
  result = 0.0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  return result;
}

double _ViewDebug.Data.SerializedAttribute.init(type:)@<D0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BOOL8 v6;
  uint64_t v7;
  double result;

  type metadata accessor for Any.Type();
  *(_QWORD *)(a1 + 16) = String.init<A>(reflecting:)();
  *(_QWORD *)(a1 + 24) = v2;
  *(_QWORD *)(a1 + 32) = AGTypeID.description.getter();
  *(_QWORD *)(a1 + 40) = v3;
  _viewProtocolDescriptor();
  v4 = swift_conformsToProtocol();
  _viewModifierProtocolDescriptor();
  v5 = swift_conformsToProtocol();
  v6 = v4 != 0;
  v7 = 2;
  if (v4)
    v7 = 3;
  if (v5)
    v6 = v7;
  *(_QWORD *)(a1 + 48) = v6;
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_QWORD *)(a1 + 88) = 0;
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance _ViewDebug.Data.SerializedAttribute(_QWORD *a1)
{
  return _ViewDebug.Data.SerializedAttribute.encode(to:)(a1);
}

double closure #1 in _ViewDebug.Data.serializedProperties()@<D0>(_BYTE *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  BOOL v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  double result;
  uint64_t v18;
  _QWORD v19[4];
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;

  v6 = *a1;
  if (v6 == 1)
  {
    v12 = 6;
  }
  else
  {
    if (!*a1)
    {
      v7 = (uint64_t)(a1 + 8);
      LOBYTE(v20) = 0;
      outlined init with copy of Any((uint64_t)(a1 + 8), (uint64_t)&v20 + 8);
      type metadata accessor for Any.Type();
      v8 = swift_dynamicCast();
      v9 = v18;
      LOBYTE(v18) = *a1;
      outlined init with copy of Any((uint64_t)(a1 + 8), (uint64_t)v19);
      if (v8)
        v10 = v9 == 0;
      else
        v10 = 1;
      if (v10)
      {
        __swift_project_boxed_opaque_existential_1(v19, v19[3]);
        swift_getDynamicType();
      }
      outlined destroy of TypesettingConfiguration((uint64_t)&v18, (uint64_t (*)(_QWORD))type metadata accessor for (key: _ViewDebug.Property, value: Any));
      _ViewDebug.Data.SerializedAttribute.init(type:)(a4 + 8);
      v11 = *a1;
      LOBYTE(v20) = v11;
      outlined init with copy of Any(v7, (uint64_t)&v20 + 8);
      *(_DWORD *)a4 = v11;
      goto LABEL_14;
    }
    v12 = 4;
  }
  v18 = a2;
  v19[0] = a3;
  v13 = (uint64_t)(a1 + 8);
  _ViewDebug.Data.serializedAttribute(for:label:reflectionDepth:)((uint64_t)(a1 + 8), 0, 0, v12, &v20);
  if (*((_QWORD *)&v21 + 1))
  {
    v14 = v23;
    *(_OWORD *)(a4 + 40) = v22;
    *(_OWORD *)(a4 + 56) = v14;
    v15 = v25;
    *(_OWORD *)(a4 + 72) = v24;
    *(_OWORD *)(a4 + 88) = v15;
    v16 = v21;
    *(_OWORD *)(a4 + 8) = v20;
    *(_OWORD *)(a4 + 24) = v16;
    LOBYTE(v20) = v6;
    outlined init with copy of Any(v13, (uint64_t)&v20 + 8);
    *(_DWORD *)a4 = v6;
LABEL_14:
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v20 + 8);
    return result;
  }
  outlined destroy of CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content?((uint64_t)&v20, &lazy cache variable for type metadata for _ViewDebug.Data.SerializedAttribute?, (uint64_t)&type metadata for _ViewDebug.Data.SerializedAttribute);
  *(_QWORD *)(a4 + 96) = 0;
  result = 0.0;
  *(_OWORD *)(a4 + 64) = 0u;
  *(_OWORD *)(a4 + 80) = 0u;
  *(_OWORD *)(a4 + 32) = 0u;
  *(_OWORD *)(a4 + 48) = 0u;
  *(_OWORD *)a4 = 0u;
  *(_OWORD *)(a4 + 16) = 0u;
  return result;
}

uint64_t _ViewDebug.Data.serializedAttribute(for:label:reflectionDepth:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _OWORD *a5@<X8>)
{
  __int128 *v5;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t result;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t ObjectType;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  BOOL v32;
  _QWORD *v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  _OWORD *v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  __int128 v51;
  uint64_t v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  _QWORD v59[2];
  _OWORD v60[2];
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  _OWORD v71[2];
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  _OWORD v78[2];

  v52 = a2;
  type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for Mirror?, (uint64_t (*)(uint64_t))MEMORY[0x24BEE43D8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v45 - v11;
  v13 = type metadata accessor for Mirror();
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x24BDAC7A8](v13);
  v16 = (char *)&v45 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v51 = *v5;
  _ViewDebug.Data.unwrapped(_:)(a1, (uint64_t)&v72);
  if (!*((_QWORD *)&v73 + 1))
  {
    result = outlined destroy of CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content?((uint64_t)&v72, (unint64_t *)&lazy cache variable for type metadata for Any?, MEMORY[0x24BEE4AD8] + 8);
    a5[4] = 0u;
    a5[5] = 0u;
    a5[2] = 0u;
    a5[3] = 0u;
    *a5 = 0u;
    a5[1] = 0u;
    return result;
  }
  outlined init with take of Any(&v72, v78);
  v76 = 0u;
  v77 = 0u;
  v74 = 0u;
  v75 = 0u;
  v72 = 0u;
  v73 = 0u;
  outlined init with copy of Any((uint64_t)v78, (uint64_t)&v53);
  type metadata accessor for ScrollStateRequest(0, &lazy cache variable for type metadata for Encodable);
  if ((swift_dynamicCast() & 1) != 0)
  {
    outlined destroy of CodableAttributedString.Range.DecodingWrapper<ResolvableProgress>((uint64_t)&v65, (uint64_t)&lazy cache variable for type metadata for Encodable?, (uint64_t)&lazy cache variable for type metadata for Encodable, MEMORY[0x24BEE0508], (uint64_t (*)(_QWORD))type metadata accessor for AnyTrackedValue?);
    outlined init with copy of Any((uint64_t)v78, (uint64_t)v71);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v71);
LABEL_10:
    outlined init with copy of Any((uint64_t)v78, (uint64_t)&v53);
    swift_bridgeObjectRetain();
    v18 = 1;
    goto LABEL_11;
  }
  *(_QWORD *)&v67 = 0;
  v65 = 0u;
  v66 = 0u;
  outlined destroy of CodableAttributedString.Range.DecodingWrapper<ResolvableProgress>((uint64_t)&v65, (uint64_t)&lazy cache variable for type metadata for Encodable?, (uint64_t)&lazy cache variable for type metadata for Encodable, MEMORY[0x24BEE0508], (uint64_t (*)(_QWORD))type metadata accessor for AnyTrackedValue?);
  outlined init with copy of Any((uint64_t)v78, (uint64_t)v71);
  outlined init with take of Any(v71, &v53);
  type metadata accessor for ScrollStateRequest(0, &lazy cache variable for type metadata for CustomViewDebugValueConvertible);
  if ((swift_dynamicCast() & 1) != 0)
  {
    outlined destroy of CodableAttributedString.Range.DecodingWrapper<ResolvableProgress>((uint64_t)&v65, (uint64_t)&lazy cache variable for type metadata for CustomViewDebugValueConvertible?, (uint64_t)&lazy cache variable for type metadata for CustomViewDebugValueConvertible, (uint64_t)&protocol descriptor for CustomViewDebugValueConvertible, (uint64_t (*)(_QWORD))type metadata accessor for AnyTrackedValue?);
    goto LABEL_10;
  }
  *(_QWORD *)&v67 = 0;
  v65 = 0u;
  v66 = 0u;
  outlined destroy of CodableAttributedString.Range.DecodingWrapper<ResolvableProgress>((uint64_t)&v65, (uint64_t)&lazy cache variable for type metadata for CustomViewDebugValueConvertible?, (uint64_t)&lazy cache variable for type metadata for CustomViewDebugValueConvertible, (uint64_t)&protocol descriptor for CustomViewDebugValueConvertible, (uint64_t (*)(_QWORD))type metadata accessor for AnyTrackedValue?);
  if (!a4)
    goto LABEL_10;
  _ViewDebug.Data.effectiveMirror(for:)((uint64_t)v78, (uint64_t)v12);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13) == 1)
  {
    outlined destroy of CodableAttributedString.Range.DecodingWrapper<ResolvableProgress>((uint64_t)v12, (uint64_t)&lazy cache variable for type metadata for Mirror?, (uint64_t)MEMORY[0x24BEE43D8], (uint64_t)MEMORY[0x24BEE1C68], (uint64_t (*)(_QWORD))type metadata accessor for [(_:)]);
    outlined init with copy of Any((uint64_t)v78, (uint64_t)&v53);
    swift_bridgeObjectRetain();
    v18 = 0;
LABEL_11:
    _ViewDebug.Data.SerializedAttribute.init(value:serializeValue:label:subattributes:)(&v53, v18, v52, a3, 0, (uint64_t)&v65);
LABEL_12:
    outlined destroy of CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content?((uint64_t)&v72, &lazy cache variable for type metadata for _ViewDebug.Data.SerializedAttribute?, (uint64_t)&type metadata for _ViewDebug.Data.SerializedAttribute);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v78);
    outlined init with take of AccessibilityDataSeriesConfiguration.AxisConfiguration?((uint64_t)&v65, (uint64_t)&v72, &lazy cache variable for type metadata for _ViewDebug.Data.SerializedAttribute?, (uint64_t)&type metadata for _ViewDebug.Data.SerializedAttribute);
    return outlined init with take of AccessibilityDataSeriesConfiguration.AxisConfiguration?((uint64_t)&v72, (uint64_t)a5, &lazy cache variable for type metadata for _ViewDebug.Data.SerializedAttribute?, (uint64_t)&type metadata for _ViewDebug.Data.SerializedAttribute);
  }
  v46 = a3;
  v47 = a4;
  (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v16, v12, v13);
  v19 = Mirror.children.getter();
  v20 = *(_QWORD *)(v19 + 24);
  v49 = *(uint64_t **)(v19 + 40);
  v50 = v20;
  ObjectType = swift_getObjectType();
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  v48 = ObjectType;
  v22 = MEMORY[0x23B7C6D60](ObjectType, v50);
  v23 = swift_getObjectType();
  result = MEMORY[0x23B7C6D60](v23, v49);
  if (v22 == result)
  {
    v24 = dispatch thunk of _AnyIndexBox._isEqual(to:)();
    swift_release();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    v25 = v47;
    if ((v24 & 1) != 0)
    {
      outlined init with copy of Any((uint64_t)v78, (uint64_t)&v53);
      v26 = v46;
      swift_bridgeObjectRetain();
      v27 = 1;
      v28 = v52;
      v29 = v26;
      v30 = 0;
LABEL_32:
      _ViewDebug.Data.SerializedAttribute.init(value:serializeValue:label:subattributes:)(&v53, v27, v28, v29, v30, (uint64_t)&v65);
      (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
      goto LABEL_12;
    }
    Mirror.children.getter();
    v31 = dispatch thunk of _AnySequenceBox._makeIterator()();
    swift_release();
    swift_retain();
    v50 = v31;
    dispatch thunk of _AnyIteratorBoxBase.next()();
    if (!v64)
    {
      v33 = (_QWORD *)MEMORY[0x24BEE4AF8];
LABEL_31:
      swift_release_n();
      outlined init with copy of Any((uint64_t)v78, (uint64_t)&v53);
      v44 = v46;
      swift_bridgeObjectRetain();
      v27 = 0;
      v28 = v52;
      v29 = v44;
      v30 = (uint64_t)v33;
      goto LABEL_32;
    }
    v49 = &v63;
    v32 = __OFSUB__(v25, 1);
    v47 = v25 - 1;
    v33 = (_QWORD *)MEMORY[0x24BEE4AF8];
    v34 = v32;
    LODWORD(v48) = v34;
    while (1)
    {
      v35 = v61;
      v36 = v62;
      v59[0] = v61;
      v59[1] = v62;
      result = (uint64_t)outlined init with take of Any(v49, v60);
      v65 = v51;
      if ((v48 & 1) != 0)
        break;
      swift_bridgeObjectRetain();
      _ViewDebug.Data.serializedAttribute(for:label:reflectionDepth:)(&v53, v60, v35, v36, v47);
      swift_bridgeObjectRelease();
      if (*((_QWORD *)&v54 + 1))
      {
        v67 = v55;
        v68 = v56;
        v69 = v57;
        v70 = v58;
        v65 = v53;
        v66 = v54;
        outlined init with copy of _ViewDebug.Data.SerializedAttribute(&v65, (uint64_t)&v53);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v33 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v33[2] + 1, 1, v33);
        v38 = v33[2];
        v37 = v33[3];
        if (v38 >= v37 >> 1)
          v33 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v37 > 1), v38 + 1, 1, v33);
        v33[2] = v38 + 1;
        v39 = &v33[12 * v38];
        v40 = v54;
        v39[2] = v53;
        v39[3] = v40;
        v41 = v55;
        v42 = v56;
        v43 = v58;
        v39[6] = v57;
        v39[7] = v43;
        v39[4] = v41;
        v39[5] = v42;
        outlined destroy of _ViewDebug.Data.SerializedAttribute((uint64_t)&v65);
        outlined destroy of TypesettingConfiguration((uint64_t)v59, (uint64_t (*)(_QWORD))type metadata accessor for (label: String?, value: Any));
      }
      else
      {
        outlined destroy of TypesettingConfiguration((uint64_t)v59, (uint64_t (*)(_QWORD))type metadata accessor for (label: String?, value: Any));
        outlined destroy of CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content?((uint64_t)&v53, &lazy cache variable for type metadata for _ViewDebug.Data.SerializedAttribute?, (uint64_t)&type metadata for _ViewDebug.Data.SerializedAttribute);
      }
      dispatch thunk of _AnyIteratorBoxBase.next()();
      if (!v64)
        goto LABEL_31;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t _ViewDebug.Data.unwrapped(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v8[2];
  uint64_t v9;
  _BYTE v10[32];
  _QWORD v11[3];
  uint64_t v12;
  uint64_t v13;

  outlined init with copy of Any(a1, a2);
  outlined init with copy of Any(a1, (uint64_t)v10);
  type metadata accessor for ScrollStateRequest(0, &lazy cache variable for type metadata for ValueWrapper);
  v4 = MEMORY[0x24BEE4AD8] + 8;
  if ((swift_dynamicCast() & 1) != 0)
  {
    outlined init with take of ScrollStateRequest(v8, (uint64_t)v11);
    v5 = v12;
    v6 = v13;
    __swift_project_boxed_opaque_existential_1(v11, v12);
    (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v6 + 8))(v8, v5, v6);
    outlined destroy of CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content?(a2, (unint64_t *)&lazy cache variable for type metadata for Any?, v4);
    outlined init with take of AccessibilityDataSeriesConfiguration.AxisConfiguration?((uint64_t)v8, a2, (unint64_t *)&lazy cache variable for type metadata for Any?, v4);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v11);
  }
  else
  {
    v9 = 0;
    memset(v8, 0, sizeof(v8));
    return outlined destroy of CodableAttributedString.Range.DecodingWrapper<ResolvableProgress>((uint64_t)v8, (uint64_t)&lazy cache variable for type metadata for ValueWrapper?, (uint64_t)&lazy cache variable for type metadata for ValueWrapper, (uint64_t)&protocol descriptor for ValueWrapper, (uint64_t (*)(_QWORD))type metadata accessor for AnyTrackedValue?);
  }
}

uint64_t _ViewDebug.Data.effectiveMirror(for:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  _BYTE v12[32];
  _QWORD v13[3];
  uint64_t v14;
  uint64_t v15;

  outlined init with copy of Any(a1, (uint64_t)v12);
  type metadata accessor for ScrollStateRequest(0, &lazy cache variable for type metadata for CustomViewDebugReflectable);
  if (swift_dynamicCast())
  {
    outlined init with take of ScrollStateRequest(&v9, (uint64_t)v13);
    v4 = v14;
    v5 = v15;
    __swift_project_boxed_opaque_existential_1(v13, v14);
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v5);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v13);
  }
  v11 = 0;
  v9 = 0u;
  v10 = 0u;
  outlined destroy of CodableAttributedString.Range.DecodingWrapper<ResolvableProgress>((uint64_t)&v9, (uint64_t)&lazy cache variable for type metadata for CustomViewDebugReflectable?, (uint64_t)&lazy cache variable for type metadata for CustomViewDebugReflectable, (uint64_t)&protocol descriptor for CustomViewDebugReflectable, (uint64_t (*)(_QWORD))type metadata accessor for AnyTrackedValue?);
  outlined init with copy of Any(a1, (uint64_t)v12);
  type metadata accessor for ScrollStateRequest(0, &lazy cache variable for type metadata for CustomReflectable);
  if (swift_dynamicCast())
  {
    outlined init with take of ScrollStateRequest(&v9, (uint64_t)v13);
    __swift_project_boxed_opaque_existential_1(v13, v14);
    dispatch thunk of CustomReflectable.customMirror.getter();
    v6 = type metadata accessor for Mirror();
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(a2, 0, 1, v6);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v13);
  }
  v11 = 0;
  v9 = 0u;
  v10 = 0u;
  outlined destroy of CodableAttributedString.Range.DecodingWrapper<ResolvableProgress>((uint64_t)&v9, (uint64_t)&lazy cache variable for type metadata for CustomReflectable?, (uint64_t)&lazy cache variable for type metadata for CustomReflectable, MEMORY[0x24BEE2CE8], (uint64_t (*)(_QWORD))type metadata accessor for AnyTrackedValue?);
  outlined init with copy of Any(a1, (uint64_t)v13);
  Mirror.init(reflecting:)();
  v8 = type metadata accessor for Mirror();
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(a2, 0, 1, v8);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance _ViewDebug.Data(_QWORD *a1)
{
  return _ViewDebug.Data.encode(to:)(a1);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ViewTransform.Item.CodingKeys(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance ViewTransform.Item.CodingKeys()
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ViewTransform.Item.CodingKeys()
{
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ViewTransform.Item.CodingKeys()
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance ViewTransform.Item.CodingKeys@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = specialized ViewTransform.Item.CodingKeys.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance ViewTransform.Item.CodingKeys(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  int v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  BOOL v6;
  uint64_t v7;

  v2 = *v1;
  v3 = 0xEB000000006E6F69;
  v4 = 0xEF6D726F66736E61;
  v5 = 0x7254656E69666661;
  if (v2 != 1)
  {
    v5 = 0xD000000000000013;
    v4 = 0x80000002352DD5E0;
  }
  v6 = v2 == 0;
  if (*v1)
    v7 = v5;
  else
    v7 = 0x74616C736E617274;
  if (!v6)
    v3 = v4;
  *a1 = v7;
  a1[1] = v3;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance ViewTransform.Item.CodingKeys()
{
  _BYTE *v0;
  unint64_t v1;

  v1 = 0x7254656E69666661;
  if (*v0 != 1)
    v1 = 0xD000000000000013;
  if (*v0)
    return v1;
  else
    return 0x74616C736E617274;
}

unint64_t protocol witness for CodingKey.init(stringValue:) in conformance ViewTransform.Item.CodingKeys@<X0>(Swift::String a1@<X1:X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = specialized ViewTransform.Item.CodingKeys.init(rawValue:)(a1);
  *a2 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ViewTransform.Item.CodingKeys()
{
  lazy protocol witness table accessor for type ViewTransform.Item.CodingKeys and conformance ViewTransform.Item.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ViewTransform.Item.CodingKeys()
{
  lazy protocol witness table accessor for type ViewTransform.Item.CodingKeys and conformance ViewTransform.Item.CodingKeys();
  return CodingKey.debugDescription.getter();
}

void ViewTransform.Item.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  _BYTE v5[400];

  v2 = v1;
  type metadata accessor for KeyedEncodingContainer<_ViewDebug.Data.CodingKeys>(0, &lazy cache variable for type metadata for KeyedEncodingContainer<ViewTransform.Item.CodingKeys>, (void (*)(void))lazy protocol witness table accessor for type ViewTransform.Item.CodingKeys and conformance ViewTransform.Item.CodingKeys);
  MEMORY[0x24BDAC7A8](v4);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type ViewTransform.Item.CodingKeys and conformance ViewTransform.Item.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  outlined init with copy of ViewTransform.Item(v2, (uint64_t)v5);
  __asm { BR              X10 }
}

uint64_t sub_2350DBAD4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  *(_OWORD *)(v0 + 128) = *(_OWORD *)(v0 + 256);
  *(_BYTE *)v0 = 0;
  type metadata accessor for CGSize(0);
  lazy protocol witness table accessor for type CGSize and conformance CGSize();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8))(v3, v2);
}

__n128 CATransform3D.elements.getter()
{
  __int128 *v0;
  uint64_t v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __n128 result;
  __int128 v9;

  type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<CGFloat>, MEMORY[0x24BEE50B0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
  v1 = swift_allocObject();
  v2 = *v0;
  v3 = v0[1];
  *(_OWORD *)(v1 + 16) = xmmword_2352C89F0;
  *(_OWORD *)(v1 + 32) = v2;
  v4 = v0[2];
  v5 = v0[3];
  *(_OWORD *)(v1 + 48) = v3;
  *(_OWORD *)(v1 + 64) = v4;
  v6 = v0[4];
  v7 = v0[5];
  *(_OWORD *)(v1 + 80) = v5;
  *(_OWORD *)(v1 + 96) = v6;
  result = (__n128)v0[6];
  v9 = v0[7];
  *(_OWORD *)(v1 + 112) = v7;
  *(__n128 *)(v1 + 128) = result;
  *(_OWORD *)(v1 + 144) = v9;
  return result;
}

void protocol witness for Encodable.encode(to:) in conformance ViewTransform.Item(_QWORD *a1)
{
  ViewTransform.Item.encode(to:)(a1);
}

uint64_t Optional.wrappedValue.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  double v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v12;

  v4 = *(_QWORD *)(a1 - 8);
  v5 = MEMORY[0x24BDAC7A8](a1);
  v7 = (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, double))(v4 + 16))(v7, v5);
  v8 = *(_QWORD *)(a1 + 16);
  v9 = *(_QWORD *)(v8 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
  {
    result = (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v7, a1);
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
  }
  else
  {
    *(_QWORD *)(a2 + 24) = v8;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)a2);
    return (*(uint64_t (**)(uint64_t *, char *, uint64_t))(v9 + 32))(boxed_opaque_existential_1, v7, v8);
  }
  return result;
}

void static View._logChanges()(uint64_t a1)
{
  logChangedBodyProperties<A>(of:)(a1, a1);
}

unint64_t lazy protocol witness table accessor for type _ViewDebug.Data and conformance _ViewDebug.Data()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _ViewDebug.Data and conformance _ViewDebug.Data;
  if (!lazy protocol witness table cache variable for type _ViewDebug.Data and conformance _ViewDebug.Data)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for _ViewDebug.Data, &type metadata for _ViewDebug.Data);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ViewDebug.Data and conformance _ViewDebug.Data);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _ViewDebug.Data.CodingKeys and conformance _ViewDebug.Data.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _ViewDebug.Data.CodingKeys and conformance _ViewDebug.Data.CodingKeys;
  if (!lazy protocol witness table cache variable for type _ViewDebug.Data.CodingKeys and conformance _ViewDebug.Data.CodingKeys)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for _ViewDebug.Data.CodingKeys, &type metadata for _ViewDebug.Data.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ViewDebug.Data.CodingKeys and conformance _ViewDebug.Data.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _ViewDebug.Data.CodingKeys and conformance _ViewDebug.Data.CodingKeys;
  if (!lazy protocol witness table cache variable for type _ViewDebug.Data.CodingKeys and conformance _ViewDebug.Data.CodingKeys)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for _ViewDebug.Data.CodingKeys, &type metadata for _ViewDebug.Data.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ViewDebug.Data.CodingKeys and conformance _ViewDebug.Data.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _ViewDebug.Data.CodingKeys and conformance _ViewDebug.Data.CodingKeys;
  if (!lazy protocol witness table cache variable for type _ViewDebug.Data.CodingKeys and conformance _ViewDebug.Data.CodingKeys)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for _ViewDebug.Data.CodingKeys, &type metadata for _ViewDebug.Data.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ViewDebug.Data.CodingKeys and conformance _ViewDebug.Data.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _ViewDebug.Data.CodingKeys and conformance _ViewDebug.Data.CodingKeys;
  if (!lazy protocol witness table cache variable for type _ViewDebug.Data.CodingKeys and conformance _ViewDebug.Data.CodingKeys)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for _ViewDebug.Data.CodingKeys, &type metadata for _ViewDebug.Data.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ViewDebug.Data.CodingKeys and conformance _ViewDebug.Data.CodingKeys);
  }
  return result;
}

uint64_t specialized Sequence.compactMap<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t result;
  int64_t v9;
  _QWORD *v10;
  unint64_t v11;
  unint64_t i;
  unint64_t v14;
  int64_t v15;
  char v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  int64_t v21;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  _OWORD v30[2];
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  _OWORD v36[2];
  uint64_t v37;
  _OWORD v38[2];
  uint64_t v39;
  uint64_t v40;

  v40 = a3;
  v20 = a1 + 64;
  v5 = 1 << *(_BYTE *)(a1 + 32);
  v6 = -1;
  if (v5 < 64)
    v6 = ~(-1 << v5);
  v7 = v6 & *(_QWORD *)(a1 + 64);
  v21 = (unint64_t)(v5 + 63) >> 6;
  result = swift_bridgeObjectRetain();
  v9 = 0;
  v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
  if (v7)
    goto LABEL_6;
LABEL_7:
  if (__OFADD__(v9++, 1))
  {
    __break(1u);
    goto LABEL_35;
  }
  if (v9 >= v21)
    goto LABEL_33;
  v14 = *(_QWORD *)(v20 + 8 * v9);
  if (v14)
    goto LABEL_19;
  v15 = v9 + 1;
  if (v9 + 1 >= v21)
    goto LABEL_33;
  v14 = *(_QWORD *)(v20 + 8 * v15);
  if (v14)
  {
LABEL_18:
    v9 = v15;
LABEL_19:
    v7 = (v14 - 1) & v14;
    for (i = __clz(__rbit64(v14)) + (v9 << 6); ; i = v11 | (v9 << 6))
    {
      v16 = *(_BYTE *)(*(_QWORD *)(a1 + 48) + i);
      outlined init with copy of Any(*(_QWORD *)(a1 + 56) + 32 * i, (uint64_t)v38 + 8);
      LOBYTE(v38[0]) = v16;
      v36[0] = v38[0];
      v36[1] = v38[1];
      v37 = v39;
      closure #1 in _ViewDebug.Data.serializedProperties()(v36, a2, v40, (uint64_t)v30);
      if (v3)
        break;
      outlined destroy of TypesettingConfiguration((uint64_t)v36, (uint64_t (*)(_QWORD))type metadata accessor for (key: _ViewDebug.Property, value: Any));
      if ((_QWORD)v31)
      {
        v27 = v33;
        v28 = v34;
        v29 = v35;
        v23 = v30[0];
        v24 = v30[1];
        v25 = v31;
        v26 = v32;
        result = swift_isUniquelyReferenced_nonNull_native();
        if ((result & 1) == 0)
        {
          result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v10[2] + 1, 1, v10);
          v10 = (_QWORD *)result;
        }
        v18 = v10[2];
        v17 = v10[3];
        if (v18 >= v17 >> 1)
        {
          result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v17 > 1), v18 + 1, 1, v10);
          v10 = (_QWORD *)result;
        }
        v10[2] = v18 + 1;
        v19 = &v10[13 * v18];
        *((_OWORD *)v19 + 3) = v24;
        *((_OWORD *)v19 + 4) = v25;
        *((_OWORD *)v19 + 2) = v23;
        v19[16] = v29;
        *((_OWORD *)v19 + 6) = v27;
        *((_OWORD *)v19 + 7) = v28;
        *((_OWORD *)v19 + 5) = v26;
        if (!v7)
          goto LABEL_7;
      }
      else
      {
        result = outlined destroy of CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content?((uint64_t)v30, &lazy cache variable for type metadata for _ViewDebug.Data.SerializedProperty?, (uint64_t)&type metadata for _ViewDebug.Data.SerializedProperty);
        if (!v7)
          goto LABEL_7;
      }
LABEL_6:
      v11 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
    }
    outlined destroy of TypesettingConfiguration((uint64_t)v36, (uint64_t (*)(_QWORD))type metadata accessor for (key: _ViewDebug.Property, value: Any));
    swift_bridgeObjectRelease();
    goto LABEL_33;
  }
  v15 = v9 + 2;
  if (v9 + 2 >= v21)
  {
LABEL_33:
    swift_release();
    return (uint64_t)v10;
  }
  v14 = *(_QWORD *)(v20 + 8 * v15);
  if (v14)
    goto LABEL_18;
  v15 = v9 + 3;
  if (v9 + 3 >= v21)
    goto LABEL_33;
  v14 = *(_QWORD *)(v20 + 8 * v15);
  if (v14)
    goto LABEL_18;
  v15 = v9 + 4;
  if (v9 + 4 >= v21)
    goto LABEL_33;
  v14 = *(_QWORD *)(v20 + 8 * v15);
  if (v14)
    goto LABEL_18;
  while (1)
  {
    v9 = v15 + 1;
    if (__OFADD__(v15, 1))
      break;
    if (v9 >= v21)
      goto LABEL_33;
    v14 = *(_QWORD *)(v20 + 8 * v9);
    ++v15;
    if (v14)
      goto LABEL_19;
  }
LABEL_35:
  __break(1u);
  return result;
}

{
  uint64_t v3;
  uint64_t *v4;
  char **p_type;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  void *v10;
  void *v11;
  id v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  id v17;
  uint64_t result;
  id v19;
  id v20;
  id v21;
  unint64_t v22;
  unint64_t v23;
  _QWORD *v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  _QWORD *v29;
  uint64_t aBlock;
  uint64_t v33;
  uint64_t (*v34)(uint64_t);
  void *v35;
  uint64_t (*v36)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v37;
  _OWORD v38[3];
  uint64_t v39[2];

  v3 = *(_QWORD *)(a1 + 16);
  if (v3)
  {
    v4 = (uint64_t *)(swift_bridgeObjectRetain() + 56);
    v29 = (_QWORD *)MEMORY[0x24BEE4AF8];
    p_type = &stru_250685FF0.type;
    while (1)
    {
      v7 = *(v4 - 3);
      v6 = *(v4 - 2);
      v8 = *((unsigned __int8 *)v4 - 8);
      v9 = *v4;
      aBlock = a2;
      v33 = a3;
      v39[0] = 129;
      v38[0] = 0uLL;
      swift_bridgeObjectRetain();
      outlined copy of Text.Storage(v7, v6, v8);
      swift_retain();
      swift_retain();
      v10 = Text.resolveAttributedString(in:includeDefaultAttributes:options:idiom:)(&aBlock, 1, v39, (uint64_t *)v38, v7, v6, v8, v9);
      if (v10)
      {
        v11 = v10;
        v25 = v8;
        v26 = v6;
        v27 = v7;
        LOBYTE(v39[0]) = 0;
        memset(v38, 0, 32);
        v12 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDD1688]), sel_initWithAttributedString_, v10);

        v13 = v12;
        v28 = objc_msgSend(v13, p_type[301]);

        v14 = swift_allocObject();
        *(_QWORD *)(v14 + 16) = a2;
        *(_QWORD *)(v14 + 24) = a3;
        *(_QWORD *)(v14 + 32) = v39;
        *(_QWORD *)(v14 + 40) = v38;
        *(_QWORD *)(v14 + 48) = v13;
        *(_BYTE *)(v14 + 56) = 1;
        v15 = swift_allocObject();
        *(_QWORD *)(v15 + 16) = partial apply for closure #1 in static AccessibilityCore.resolveAttributedTextAttributes(in:environment:includeResolvableAttributes:);
        *(_QWORD *)(v15 + 24) = v14;
        v36 = partial apply for thunk for @callee_guaranteed (@guaranteed [NSAttributedStringKey : Any], @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ();
        v37 = v15;
        aBlock = MEMORY[0x24BDAC760];
        v33 = 1107296256;
        v34 = thunk for @escaping @callee_guaranteed (@guaranteed [NSAttributedStringKey : Any], @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ();
        v35 = &block_descriptor_34;
        v16 = _Block_copy(&aBlock);
        swift_retain();
        swift_retain();
        v17 = v13;
        swift_retain();
        swift_release();
        objc_msgSend(v17, sel_enumerateAttributesInRange_options_usingBlock_, 0, v28, 0, v16);
        _Block_release(v16);
        LOBYTE(v16) = swift_isEscapingClosureAtFileLocation();
        result = swift_release();
        if ((v16 & 1) != 0)
        {
          __break(1u);
          return result;
        }
        v19 = v17;
        v20 = objc_msgSend(v19, p_type[301]);

        v21 = objc_msgSend(v19, sel_attributedSubstringFromRange_, 0, v20);
        swift_release();
        swift_release();
        swift_release();
        swift_bridgeObjectRelease();
        outlined consume of Text.Storage(v27, v26, v25);
        swift_bridgeObjectRelease();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v29 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v29[2] + 1, 1, v29);
        v23 = v29[2];
        v22 = v29[3];
        if (v23 >= v22 >> 1)
          v29 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v22 > 1), v23 + 1, 1, v29);
        v29[2] = v23 + 1;
        v24 = &v29[3 * v23];
        v24[4] = v21;
        v24[5] = 0;
        *((_WORD *)v24 + 24) = 1;
        p_type = (char **)(&stru_250685FF0 + 16);
      }
      else
      {
        swift_release();
        swift_release();
        outlined consume of Text.Storage(v7, v6, v8);
        swift_bridgeObjectRelease();
      }
      v4 += 4;
      if (!--v3)
      {
        swift_bridgeObjectRelease();
        return (uint64_t)v29;
      }
    }
  }
  return MEMORY[0x24BEE4AF8];
}

uint64_t lazy protocol witness table accessor for type [_ViewDebug.Data] and conformance <A> [A](unint64_t *a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void))
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  result = *a1;
  if (!result)
  {
    type metadata accessor for MutableBox<CachedEnvironment>(255, a2, a3, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1250]);
    v8 = v7;
    v9 = a4();
    result = MEMORY[0x23B7C9C04](MEMORY[0x24BEE12A0], v8, &v9);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _ViewDebug.Data.SerializedProperty and conformance _ViewDebug.Data.SerializedProperty()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _ViewDebug.Data.SerializedProperty and conformance _ViewDebug.Data.SerializedProperty;
  if (!lazy protocol witness table cache variable for type _ViewDebug.Data.SerializedProperty and conformance _ViewDebug.Data.SerializedProperty)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for _ViewDebug.Data.SerializedProperty, &type metadata for _ViewDebug.Data.SerializedProperty);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ViewDebug.Data.SerializedProperty and conformance _ViewDebug.Data.SerializedProperty);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ViewTransform.Item.CodingKeys and conformance ViewTransform.Item.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ViewTransform.Item.CodingKeys and conformance ViewTransform.Item.CodingKeys;
  if (!lazy protocol witness table cache variable for type ViewTransform.Item.CodingKeys and conformance ViewTransform.Item.CodingKeys)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ViewTransform.Item.CodingKeys, &type metadata for ViewTransform.Item.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ViewTransform.Item.CodingKeys and conformance ViewTransform.Item.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ViewTransform.Item.CodingKeys and conformance ViewTransform.Item.CodingKeys;
  if (!lazy protocol witness table cache variable for type ViewTransform.Item.CodingKeys and conformance ViewTransform.Item.CodingKeys)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ViewTransform.Item.CodingKeys, &type metadata for ViewTransform.Item.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ViewTransform.Item.CodingKeys and conformance ViewTransform.Item.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ViewTransform.Item.CodingKeys and conformance ViewTransform.Item.CodingKeys;
  if (!lazy protocol witness table cache variable for type ViewTransform.Item.CodingKeys and conformance ViewTransform.Item.CodingKeys)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ViewTransform.Item.CodingKeys, &type metadata for ViewTransform.Item.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ViewTransform.Item.CodingKeys and conformance ViewTransform.Item.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ViewTransform.Item.CodingKeys and conformance ViewTransform.Item.CodingKeys;
  if (!lazy protocol witness table cache variable for type ViewTransform.Item.CodingKeys and conformance ViewTransform.Item.CodingKeys)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ViewTransform.Item.CodingKeys, &type metadata for ViewTransform.Item.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ViewTransform.Item.CodingKeys and conformance ViewTransform.Item.CodingKeys);
  }
  return result;
}

uint64_t outlined init with copy of ViewTransform.Item(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for ViewTransform.Item(a2, a1);
  return a2;
}

uint64_t outlined destroy of CoordinateSpace.Name(uint64_t a1)
{
  destroy for CoordinateSpace.Name(a1);
  return a1;
}

uint64_t outlined destroy of ViewTransform.Item(uint64_t a1)
{
  destroy for ViewTransform.Item(a1);
  return a1;
}

unint64_t lazy protocol witness table accessor for type CGSize and conformance CGSize()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type CGSize and conformance CGSize;
  if (!lazy protocol witness table cache variable for type CGSize and conformance CGSize)
  {
    type metadata accessor for CGSize(255);
    result = MEMORY[0x23B7C9C04](MEMORY[0x24BDBD848], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CGSize and conformance CGSize);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _ViewDebug.Properties and conformance _ViewDebug.Properties()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _ViewDebug.Properties and conformance _ViewDebug.Properties;
  if (!lazy protocol witness table cache variable for type _ViewDebug.Properties and conformance _ViewDebug.Properties)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for _ViewDebug.Properties, &type metadata for _ViewDebug.Properties);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ViewDebug.Properties and conformance _ViewDebug.Properties);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _ViewDebug.Properties and conformance _ViewDebug.Properties;
  if (!lazy protocol witness table cache variable for type _ViewDebug.Properties and conformance _ViewDebug.Properties)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for _ViewDebug.Properties, &type metadata for _ViewDebug.Properties);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ViewDebug.Properties and conformance _ViewDebug.Properties);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _ViewDebug.Properties and conformance _ViewDebug.Properties;
  if (!lazy protocol witness table cache variable for type _ViewDebug.Properties and conformance _ViewDebug.Properties)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for _ViewDebug.Properties, &type metadata for _ViewDebug.Properties);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ViewDebug.Properties and conformance _ViewDebug.Properties);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _ViewDebug.Properties and conformance _ViewDebug.Properties;
  if (!lazy protocol witness table cache variable for type _ViewDebug.Properties and conformance _ViewDebug.Properties)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for _ViewDebug.Properties, &type metadata for _ViewDebug.Properties);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ViewDebug.Properties and conformance _ViewDebug.Properties);
  }
  return result;
}

ValueMetadata *type metadata accessor for _ViewDebug()
{
  return &type metadata for _ViewDebug;
}

uint64_t storeEnumTagSinglePayload for _ViewDebug.Property(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 8 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 8) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF8)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF7)
    return ((uint64_t (*)(void))((char *)&loc_2350DC70C + 4 * byte_2352C7F67[v4]))();
  *a1 = a2 + 8;
  return ((uint64_t (*)(void))((char *)sub_2350DC740 + 4 * byte_2352C7F62[v4]))();
}

uint64_t sub_2350DC740(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_2350DC748(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x2350DC750);
  return result;
}

uint64_t sub_2350DC75C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x2350DC764);
  *(_BYTE *)result = a2 + 8;
  return result;
}

uint64_t sub_2350DC768(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_2350DC770(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for _ViewDebug.Property()
{
  return &type metadata for _ViewDebug.Property;
}

ValueMetadata *type metadata accessor for _ViewDebug.Properties()
{
  return &type metadata for _ViewDebug.Properties;
}

ValueMetadata *type metadata accessor for _ViewDebug.Data()
{
  return &type metadata for _ViewDebug.Data;
}

uint64_t dispatch thunk of CustomViewDebugReflectable.customViewDebugMirror.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of CustomViewDebugValueConvertible.viewDebugValue.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of ValueWrapper.wrappedValue.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t storeEnumTagSinglePayload for ViewTransform.Item.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_2350DC810 + 4 * byte_2352C7F71[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_2350DC844 + 4 * byte_2352C7F6C[v4]))();
}

uint64_t sub_2350DC844(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_2350DC84C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x2350DC854);
  return result;
}

uint64_t sub_2350DC860(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x2350DC868);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_2350DC86C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_2350DC874(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ViewTransform.Item.CodingKeys()
{
  return &type metadata for ViewTransform.Item.CodingKeys;
}

uint64_t destroy for _ViewDebug.Data.SerializedProperty(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(a1 + 88))
    __swift_destroy_boxed_opaque_existential_1(a1 + 64);
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for _ViewDebug.Data.SerializedProperty(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _OWORD *v7;
  uint64_t v8;
  __int128 v9;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  v4 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v4;
  v5 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v5;
  v6 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v6;
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  v7 = (_OWORD *)(a2 + 64);
  v8 = *(_QWORD *)(a2 + 88);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v8)
  {
    *(_QWORD *)(a1 + 88) = v8;
    (**(void (***)(uint64_t, _OWORD *, uint64_t))(v8 - 8))(a1 + 64, v7, v8);
  }
  else
  {
    v9 = v7[1];
    *(_OWORD *)(a1 + 64) = *v7;
    *(_OWORD *)(a1 + 80) = v9;
  }
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for _ViewDebug.Data.SerializedProperty(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  v4 = *(_QWORD *)(a2 + 88);
  if (!*(_QWORD *)(a1 + 88))
  {
    if (v4)
    {
      *(_QWORD *)(a1 + 88) = v4;
      (**(void (***)(uint64_t, uint64_t))(v4 - 8))(a1 + 64, a2 + 64);
      goto LABEL_8;
    }
LABEL_7:
    v5 = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 80) = v5;
    goto LABEL_8;
  }
  if (!v4)
  {
    __swift_destroy_boxed_opaque_existential_1(a1 + 64);
    goto LABEL_7;
  }
  __swift_assign_boxed_opaque_existential_0((uint64_t *)(a1 + 64), (uint64_t *)(a2 + 64));
LABEL_8:
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for _ViewDebug.Data.SerializedProperty(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  v4 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v4;
  swift_bridgeObjectRelease();
  v5 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v5;
  swift_bridgeObjectRelease();
  v6 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v6;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  if (*(_QWORD *)(a1 + 88))
    __swift_destroy_boxed_opaque_existential_1(a1 + 64);
  v7 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v7;
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for _ViewDebug.Data.SerializedProperty(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 104))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 32);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for _ViewDebug.Data.SerializedProperty(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 104) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 32) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 104) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for _ViewDebug.Data.SerializedProperty()
{
  return &type metadata for _ViewDebug.Data.SerializedProperty;
}

ValueMetadata *type metadata accessor for _ViewDebug.Data.CodingKeys()
{
  return &type metadata for _ViewDebug.Data.CodingKeys;
}

unint64_t lazy protocol witness table accessor for type _ViewDebug.Data.SerializedProperty.CodingKeys and conformance _ViewDebug.Data.SerializedProperty.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _ViewDebug.Data.SerializedProperty.CodingKeys and conformance _ViewDebug.Data.SerializedProperty.CodingKeys;
  if (!lazy protocol witness table cache variable for type _ViewDebug.Data.SerializedProperty.CodingKeys and conformance _ViewDebug.Data.SerializedProperty.CodingKeys)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for _ViewDebug.Data.SerializedProperty.CodingKeys, &unk_25060EA40);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ViewDebug.Data.SerializedProperty.CodingKeys and conformance _ViewDebug.Data.SerializedProperty.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _ViewDebug.Data.SerializedProperty.CodingKeys and conformance _ViewDebug.Data.SerializedProperty.CodingKeys;
  if (!lazy protocol witness table cache variable for type _ViewDebug.Data.SerializedProperty.CodingKeys and conformance _ViewDebug.Data.SerializedProperty.CodingKeys)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for _ViewDebug.Data.SerializedProperty.CodingKeys, &unk_25060EA40);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ViewDebug.Data.SerializedProperty.CodingKeys and conformance _ViewDebug.Data.SerializedProperty.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _ViewDebug.Data.SerializedProperty.CodingKeys and conformance _ViewDebug.Data.SerializedProperty.CodingKeys;
  if (!lazy protocol witness table cache variable for type _ViewDebug.Data.SerializedProperty.CodingKeys and conformance _ViewDebug.Data.SerializedProperty.CodingKeys)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for _ViewDebug.Data.SerializedProperty.CodingKeys, &unk_25060EA40);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ViewDebug.Data.SerializedProperty.CodingKeys and conformance _ViewDebug.Data.SerializedProperty.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _ViewDebug.Data.SerializedProperty.CodingKeys and conformance _ViewDebug.Data.SerializedProperty.CodingKeys;
  if (!lazy protocol witness table cache variable for type _ViewDebug.Data.SerializedProperty.CodingKeys and conformance _ViewDebug.Data.SerializedProperty.CodingKeys)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for _ViewDebug.Data.SerializedProperty.CodingKeys, &unk_25060EA40);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ViewDebug.Data.SerializedProperty.CodingKeys and conformance _ViewDebug.Data.SerializedProperty.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _ViewDebug.Data.SerializedAttribute and conformance _ViewDebug.Data.SerializedAttribute()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _ViewDebug.Data.SerializedAttribute and conformance _ViewDebug.Data.SerializedAttribute;
  if (!lazy protocol witness table cache variable for type _ViewDebug.Data.SerializedAttribute and conformance _ViewDebug.Data.SerializedAttribute)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for _ViewDebug.Data.SerializedAttribute, &type metadata for _ViewDebug.Data.SerializedAttribute);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ViewDebug.Data.SerializedAttribute and conformance _ViewDebug.Data.SerializedAttribute);
  }
  return result;
}

unint64_t specialized _ViewDebug.Data.SerializedAttribute.CodingKeys.init(rawValue:)(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of _ViewDebug.Data.SerializedAttribute.CodingKeys.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 >= 6)
    return 6;
  else
    return v3;
}

unint64_t specialized ViewTransform.Item.CodingKeys.init(rawValue:)(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of ViewTransform.Item.CodingKeys.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 >= 3)
    return 3;
  else
    return v3;
}

void type metadata accessor for (key: _ViewDebug.Property, value: Any)()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!lazy cache variable for type metadata for (key: _ViewDebug.Property, value: Any))
  {
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (key: _ViewDebug.Property, value: Any));
  }
}

uint64_t outlined init with copy of _ViewDebug.Data.SerializedAttribute(_QWORD *a1, uint64_t a2)
{
  initializeWithCopy for _ViewDebug.Data.SerializedAttribute(a2, a1);
  return a2;
}

uint64_t outlined destroy of _ViewDebug.Data.SerializedAttribute(uint64_t a1)
{
  destroy for _ViewDebug.Data.SerializedAttribute(a1);
  return a1;
}

uint64_t sub_2350DCF90()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t storeEnumTagSinglePayload for _ViewDebug.Data.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_2350DD000 + 4 * byte_2352C7F7B[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_2350DD034 + 4 * byte_2352C7F76[v4]))();
}

uint64_t sub_2350DD034(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_2350DD03C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x2350DD044);
  return result;
}

uint64_t sub_2350DD050(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x2350DD058);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_2350DD05C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_2350DD064(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for _ViewDebug.Data.SerializedProperty.CodingKeys()
{
  return &unk_25060EA40;
}

uint64_t destroy for _ViewDebug.Data.SerializedAttribute(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(a1 + 80))
    __swift_destroy_boxed_opaque_existential_1(a1 + 56);
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for _ViewDebug.Data.SerializedAttribute(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _OWORD *v7;
  uint64_t v8;
  __int128 v9;

  v4 = a2[1];
  *(_QWORD *)a1 = *a2;
  *(_QWORD *)(a1 + 8) = v4;
  v5 = a2[3];
  *(_QWORD *)(a1 + 16) = a2[2];
  *(_QWORD *)(a1 + 24) = v5;
  v6 = a2[5];
  *(_QWORD *)(a1 + 32) = a2[4];
  *(_QWORD *)(a1 + 40) = v6;
  *(_QWORD *)(a1 + 48) = a2[6];
  v7 = a2 + 7;
  v8 = a2[10];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v8)
  {
    *(_QWORD *)(a1 + 80) = v8;
    (**(void (***)(uint64_t, _OWORD *, uint64_t))(v8 - 8))(a1 + 56, v7, v8);
  }
  else
  {
    v9 = v7[1];
    *(_OWORD *)(a1 + 56) = *v7;
    *(_OWORD *)(a1 + 72) = v9;
  }
  *(_QWORD *)(a1 + 88) = a2[11];
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for _ViewDebug.Data.SerializedAttribute(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  v4 = *(_QWORD *)(a2 + 80);
  if (!*(_QWORD *)(a1 + 80))
  {
    if (v4)
    {
      *(_QWORD *)(a1 + 80) = v4;
      (**(void (***)(uint64_t, uint64_t))(v4 - 8))(a1 + 56, a2 + 56);
      goto LABEL_8;
    }
LABEL_7:
    v5 = *(_OWORD *)(a2 + 72);
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 72) = v5;
    goto LABEL_8;
  }
  if (!v4)
  {
    __swift_destroy_boxed_opaque_existential_1(a1 + 56);
    goto LABEL_7;
  }
  __swift_assign_boxed_opaque_existential_0((uint64_t *)(a1 + 56), (uint64_t *)(a2 + 56));
LABEL_8:
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for _ViewDebug.Data.SerializedAttribute(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  v6 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v6;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  if (*(_QWORD *)(a1 + 80))
    __swift_destroy_boxed_opaque_existential_1(a1 + 56);
  v7 = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = v7;
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for _ViewDebug.Data.SerializedAttribute()
{
  return &type metadata for _ViewDebug.Data.SerializedAttribute;
}

uint64_t specialized _ViewDebug.Data.SerializedProperty.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 25705 && a2 == 0xE200000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x7475626972747461 && a2 == 0xE900000000000065)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

void type metadata accessor for KeyedEncodingContainer<_ViewDebug.Data.CodingKeys>(uint64_t a1, unint64_t *a2, void (*a3)(void))
{
  unint64_t v4;
  uint64_t v5;

  if (!*a2)
  {
    a3();
    v4 = type metadata accessor for KeyedEncodingContainer();
    if (!v5)
      atomic_store(v4, a2);
  }
}

unint64_t lazy protocol witness table accessor for type _ViewDebug.Data.SerializedAttribute.CodingKeys and conformance _ViewDebug.Data.SerializedAttribute.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _ViewDebug.Data.SerializedAttribute.CodingKeys and conformance _ViewDebug.Data.SerializedAttribute.CodingKeys;
  if (!lazy protocol witness table cache variable for type _ViewDebug.Data.SerializedAttribute.CodingKeys and conformance _ViewDebug.Data.SerializedAttribute.CodingKeys)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for _ViewDebug.Data.SerializedAttribute.CodingKeys, &unk_25060EC00);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ViewDebug.Data.SerializedAttribute.CodingKeys and conformance _ViewDebug.Data.SerializedAttribute.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _ViewDebug.Data.SerializedAttribute.CodingKeys and conformance _ViewDebug.Data.SerializedAttribute.CodingKeys;
  if (!lazy protocol witness table cache variable for type _ViewDebug.Data.SerializedAttribute.CodingKeys and conformance _ViewDebug.Data.SerializedAttribute.CodingKeys)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for _ViewDebug.Data.SerializedAttribute.CodingKeys, &unk_25060EC00);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ViewDebug.Data.SerializedAttribute.CodingKeys and conformance _ViewDebug.Data.SerializedAttribute.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _ViewDebug.Data.SerializedAttribute.CodingKeys and conformance _ViewDebug.Data.SerializedAttribute.CodingKeys;
  if (!lazy protocol witness table cache variable for type _ViewDebug.Data.SerializedAttribute.CodingKeys and conformance _ViewDebug.Data.SerializedAttribute.CodingKeys)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for _ViewDebug.Data.SerializedAttribute.CodingKeys, &unk_25060EC00);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ViewDebug.Data.SerializedAttribute.CodingKeys and conformance _ViewDebug.Data.SerializedAttribute.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _ViewDebug.Data.SerializedAttribute.CodingKeys and conformance _ViewDebug.Data.SerializedAttribute.CodingKeys;
  if (!lazy protocol witness table cache variable for type _ViewDebug.Data.SerializedAttribute.CodingKeys and conformance _ViewDebug.Data.SerializedAttribute.CodingKeys)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for _ViewDebug.Data.SerializedAttribute.CodingKeys, &unk_25060EC00);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ViewDebug.Data.SerializedAttribute.CodingKeys and conformance _ViewDebug.Data.SerializedAttribute.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _ViewDebug.Data.SerializedAttribute.Flags and conformance _ViewDebug.Data.SerializedAttribute.Flags()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _ViewDebug.Data.SerializedAttribute.Flags and conformance _ViewDebug.Data.SerializedAttribute.Flags;
  if (!lazy protocol witness table cache variable for type _ViewDebug.Data.SerializedAttribute.Flags and conformance _ViewDebug.Data.SerializedAttribute.Flags)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for _ViewDebug.Data.SerializedAttribute.Flags, &unk_25060EC90);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ViewDebug.Data.SerializedAttribute.Flags and conformance _ViewDebug.Data.SerializedAttribute.Flags);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _ViewDebug.Data.SerializedAttribute.Flags and conformance _ViewDebug.Data.SerializedAttribute.Flags;
  if (!lazy protocol witness table cache variable for type _ViewDebug.Data.SerializedAttribute.Flags and conformance _ViewDebug.Data.SerializedAttribute.Flags)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for _ViewDebug.Data.SerializedAttribute.Flags, &unk_25060EC90);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ViewDebug.Data.SerializedAttribute.Flags and conformance _ViewDebug.Data.SerializedAttribute.Flags);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _ViewDebug.Data.SerializedAttribute.Flags and conformance _ViewDebug.Data.SerializedAttribute.Flags;
  if (!lazy protocol witness table cache variable for type _ViewDebug.Data.SerializedAttribute.Flags and conformance _ViewDebug.Data.SerializedAttribute.Flags)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for _ViewDebug.Data.SerializedAttribute.Flags, &unk_25060EC90);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ViewDebug.Data.SerializedAttribute.Flags and conformance _ViewDebug.Data.SerializedAttribute.Flags);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _ViewDebug.Data.SerializedAttribute.Flags and conformance _ViewDebug.Data.SerializedAttribute.Flags;
  if (!lazy protocol witness table cache variable for type _ViewDebug.Data.SerializedAttribute.Flags and conformance _ViewDebug.Data.SerializedAttribute.Flags)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for _ViewDebug.Data.SerializedAttribute.Flags, &unk_25060EC90);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ViewDebug.Data.SerializedAttribute.Flags and conformance _ViewDebug.Data.SerializedAttribute.Flags);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _ViewDebug.Data.SerializedAttribute.Flags and conformance _ViewDebug.Data.SerializedAttribute.Flags;
  if (!lazy protocol witness table cache variable for type _ViewDebug.Data.SerializedAttribute.Flags and conformance _ViewDebug.Data.SerializedAttribute.Flags)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for _ViewDebug.Data.SerializedAttribute.Flags, &unk_25060EC90);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ViewDebug.Data.SerializedAttribute.Flags and conformance _ViewDebug.Data.SerializedAttribute.Flags);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for _ViewDebug.Data.SerializedAttribute.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFB)
    goto LABEL_17;
  if (a2 + 5 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 5) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 5;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 5;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 5;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 6;
  v8 = v6 - 6;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for _ViewDebug.Data.SerializedAttribute.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_2350DD69C + 4 * byte_2352C7F85[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_2350DD6D0 + 4 * byte_2352C7F80[v4]))();
}

uint64_t sub_2350DD6D0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_2350DD6D8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x2350DD6E0);
  return result;
}

uint64_t sub_2350DD6EC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x2350DD6F4);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_2350DD6F8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_2350DD700(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for _ViewDebug.Data.SerializedAttribute.CodingKeys()
{
  return &unk_25060EC00;
}

void *type metadata accessor for _ViewDebug.Data.SerializedAttribute.Flags()
{
  return &unk_25060EC90;
}

uint64_t _ViewInputs.makeGestureContainer(responder:)(uint64_t *a1, uint64_t a2)
{
  uint64_t *v2;

  return specialized _ViewInputs.makeGestureContainer(responder:)((uint64_t)a1, v2, *a1, a2);
}

uint64_t static GestureContainerFactoryInput.defaultValue.getter()
{
  return 0;
}

uint64_t specialized _ViewInputs.makeGestureContainer(responder:)(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;

  v6 = *a2;
  swift_retain_n();
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  v7 = specialized closure #1 in PropertyList.subscript.getter(v6);
  v9 = v8;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  swift_release_n();
  if (v7)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 8))(a1, a4, v7, v9);
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t dispatch thunk of static GestureContainerFactory.makeGestureContainer(responder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 8))();
}

ValueMetadata *type metadata accessor for GestureContainerFactoryInput()
{
  return &type metadata for GestureContainerFactoryInput;
}

double static Animation.easeInOut.getter()
{
  uint64_t v0;
  double result;

  type metadata accessor for InternalAnimationBox<BezierAnimation>(0);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_235285B20;
  *(_OWORD *)(v0 + 32) = xmmword_235285B30;
  result = -2.0;
  *(_OWORD *)(v0 + 48) = xmmword_235285B40;
  *(_QWORD *)(v0 + 64) = 0;
  return result;
}

uint64_t static BezierTimingFunction.linear.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v10 = 0;
  v11 = 0;
  v8 = 0x3FF0000000000000;
  v9 = 0x3FF0000000000000;
  v6 = lazy protocol witness table accessor for type Double and conformance Double();
  return BezierTimingFunction.init<A>(p1:p2:)((uint64_t)&v11, (char *)&v10, (void (*)(char *, uint64_t))&v9, (uint64_t)&v8, a1, MEMORY[0x24BEE13C8], a2, v6, a3);
}

double static Animation.linear(duration:)(double a1)
{
  uint64_t v2;
  double result;

  type metadata accessor for InternalAnimationBox<BezierAnimation>(0);
  v2 = swift_allocObject();
  *(double *)(v2 + 16) = a1;
  *(_OWORD *)(v2 + 24) = xmmword_235285B40;
  *(_OWORD *)(v2 + 40) = xmmword_23527E880;
  result = 3.0;
  *(_OWORD *)(v2 + 56) = xmmword_2352AECF0;
  return result;
}

double static Animation.easeInOut(duration:)(double a1)
{
  uint64_t v2;
  double result;

  type metadata accessor for InternalAnimationBox<BezierAnimation>(0);
  v2 = swift_allocObject();
  *(double *)(v2 + 16) = a1;
  *(_OWORD *)(v2 + 24) = xmmword_2352C8A70;
  *(_OWORD *)(v2 + 40) = xmmword_2352C8A80;
  result = 3.0;
  *(_OWORD *)(v2 + 56) = xmmword_2352AECF0;
  return result;
}

double BezierAnimation.init(_:_:_:_:duration:)@<D0>(double *a1@<X8>, double a2@<D0>, double a3@<D1>, double a4@<D2>, double a5@<D3>, double a6@<D4>)
{
  double v6;
  double v7;
  double v8;
  double v9;
  double result;

  v6 = a2 * 3.0;
  v7 = (a4 - a2) * 3.0 - a2 * 3.0;
  v8 = a3 * 3.0;
  v9 = (a5 - a3) * 3.0 - a3 * 3.0;
  *a1 = a6;
  a1[1] = 1.0 - v6 - v7;
  a1[2] = v7;
  a1[3] = v6;
  result = 1.0 - v8 - v9;
  a1[4] = result;
  a1[5] = v9;
  a1[6] = v8;
  return result;
}

void type metadata accessor for InternalAnimationBox<BezierAnimation>(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  if (!lazy cache variable for type metadata for InternalAnimationBox<BezierAnimation>)
  {
    v2 = lazy protocol witness table accessor for type BezierAnimation and conformance BezierAnimation();
    v4 = type metadata accessor for InternalAnimationBox(a1, (uint64_t)&type metadata for BezierAnimation, v2, v3);
    if (!v5)
      atomic_store(v4, (unint64_t *)&lazy cache variable for type metadata for InternalAnimationBox<BezierAnimation>);
  }
}

double static Animation.easeIn(duration:)(double a1)
{
  uint64_t v2;
  double result;

  type metadata accessor for InternalAnimationBox<BezierAnimation>(0);
  v2 = swift_allocObject();
  *(double *)(v2 + 16) = a1;
  *(_OWORD *)(v2 + 24) = xmmword_2352C8A90;
  *(_OWORD *)(v2 + 40) = xmmword_2352C8A80;
  result = 3.0;
  *(_OWORD *)(v2 + 56) = xmmword_2352AECF0;
  return result;
}

double static Animation.easeIn.getter()
{
  uint64_t v0;
  double result;

  type metadata accessor for InternalAnimationBox<BezierAnimation>(0);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_2352C8AA0;
  *(_OWORD *)(v0 + 32) = xmmword_2352C8AB0;
  result = -2.0;
  *(_OWORD *)(v0 + 48) = xmmword_235285B40;
  *(_QWORD *)(v0 + 64) = 0;
  return result;
}

double static Animation.easeOut(duration:)(double a1)
{
  uint64_t v2;
  double result;

  type metadata accessor for InternalAnimationBox<BezierAnimation>(0);
  v2 = swift_allocObject();
  *(double *)(v2 + 16) = a1;
  *(_OWORD *)(v2 + 24) = xmmword_2352C8AC0;
  *(_OWORD *)(v2 + 40) = xmmword_23527E880;
  result = 3.0;
  *(_OWORD *)(v2 + 56) = xmmword_2352AECF0;
  return result;
}

double static Animation.easeOut.getter()
{
  uint64_t v0;
  double result;

  type metadata accessor for InternalAnimationBox<BezierAnimation>(0);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_2352C8AD0;
  *(_OWORD *)(v0 + 32) = xmmword_2352C8AE0;
  result = -2.0;
  *(_OWORD *)(v0 + 48) = xmmword_235285B40;
  *(_QWORD *)(v0 + 64) = 0;
  return result;
}

double static Animation.linear.getter()
{
  uint64_t v0;
  double result;

  type metadata accessor for InternalAnimationBox<BezierAnimation>(0);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_2352C8AF0;
  *(_OWORD *)(v0 + 32) = xmmword_2352AECF0;
  result = -2.0;
  *(_OWORD *)(v0 + 48) = xmmword_235285B40;
  *(_QWORD *)(v0 + 64) = 0;
  return result;
}

double static Animation.coreAnimationDefault(duration:)(double a1)
{
  uint64_t v2;
  double result;

  type metadata accessor for InternalAnimationBox<BezierAnimation>(0);
  v2 = swift_allocObject();
  *(double *)(v2 + 16) = a1;
  *(_OWORD *)(v2 + 24) = xmmword_2352C8B00;
  *(_OWORD *)(v2 + 40) = xmmword_2352C8B10;
  result = 2.4;
  *(_OWORD *)(v2 + 56) = xmmword_2352C8B20;
  return result;
}

double *static Animation.timingCurve(_:_:_:_:duration:)(double a1, double a2, double a3, double a4, double a5)
{
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double *result;

  v6 = a1 * 3.0;
  v7 = (a3 - a1) * 3.0 - a1 * 3.0;
  v8 = 1.0 - a1 * 3.0 - v7;
  v9 = a2 * 3.0;
  v10 = (a4 - a2) * 3.0;
  v11 = v10 - v9;
  v12 = 1.0 - v9 - (v10 - v9);
  type metadata accessor for InternalAnimationBox<BezierAnimation>(0);
  result = (double *)swift_allocObject();
  result[2] = a5;
  result[3] = v8;
  result[4] = v7;
  result[5] = v6;
  result[6] = v12;
  result[7] = v11;
  result[8] = v9;
  return result;
}

double BezierAnimation.duration.getter()
{
  uint64_t v0;

  return *(double *)v0;
}

void BezierAnimation.duration.setter(double a1)
{
  double *v1;

  *v1 = a1;
}

uint64_t (*BezierAnimation.duration.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

__n128 BezierAnimation.curve.getter@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  __int128 v2;
  __n128 result;

  v2 = *(_OWORD *)(v1 + 24);
  *(_OWORD *)a1 = *(_OWORD *)(v1 + 8);
  *(_OWORD *)(a1 + 16) = v2;
  result = *(__n128 *)(v1 + 40);
  *(__n128 *)(a1 + 32) = result;
  return result;
}

__n128 BezierAnimation.curve.setter(uint64_t a1)
{
  uint64_t v1;
  __int128 v2;
  __n128 result;

  v2 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v1 + 8) = *(_OWORD *)a1;
  *(_OWORD *)(v1 + 24) = v2;
  result = *(__n128 *)(a1 + 32);
  *(__n128 *)(v1 + 40) = result;
  return result;
}

uint64_t (*BezierAnimation.curve.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

__n128 BezierAnimation.init(curve:duration:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>)
{
  __int128 v3;
  __n128 result;

  *(double *)a2 = a3;
  v3 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(a2 + 8) = *(_OWORD *)a1;
  *(_OWORD *)(a2 + 24) = v3;
  result = *(__n128 *)(a1 + 32);
  *(__n128 *)(a2 + 40) = result;
  return result;
}

void BezierAnimation.animate<A>(value:time:context:)(double *a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>, Swift::Double a5@<D0>)
{
  __int128 *v5;
  uint64_t v11;
  __int128 v12;
  char v13;
  uint64_t v14;
  BOOL v15;
  double v16;
  double v17;
  double v18;
  uint64_t v19;
  double v20;
  double v21;
  double v22;
  double v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  char v28;
  _QWORD v29[7];
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  Swift::Double_optional v36;
  Swift::Double_optional v37;

  if (a2 == MEMORY[0x24BEE13C8])
  {
    v15 = *(double *)v5 <= 0.0 || *(double *)v5 < a5;
    v16 = 0.0;
    if (!v15)
    {
      v18 = *((double *)v5 + 5);
      v17 = *((double *)v5 + 6);
      v19 = *((_QWORD *)v5 + 3);
      v20 = *((double *)v5 + 4);
      v21 = *a1;
      v22 = a5 / *(double *)v5;
      if (v22 > 1.0)
        v22 = 1.0;
      v32 = *(__int128 *)((char *)v5 + 8);
      *(_QWORD *)&v33 = v19;
      *((double *)&v33 + 1) = v20;
      if (v22 <= 0.0)
        v22 = 0.0;
      *(double *)&v34 = v18;
      *((double *)&v34 + 1) = v17;
      v23 = UnitCurve.CubicSolver.solveX(_:epsilon:)(v22, 0.000000953674316);
      v16 = v21 * (round(v23 * (v17 + v23 * (v18 + v20 * v23)) * 1048576.0) * 0.000000953674316);
    }
    *(double *)a4 = v16;
    *(_BYTE *)(a4 + 8) = v15;
  }
  else if (type metadata accessor for AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>() == a2)
  {
    v24 = *((_QWORD *)v5 + 6);
    v25 = *((_OWORD *)a1 + 1);
    v30 = *(_OWORD *)a1;
    v31 = v25;
    v26 = v5[1];
    v32 = *v5;
    v33 = v26;
    v34 = v5[2];
    v35 = v24;
    v37 = BezierAnimation.fraction(for:)(a5);
    MEMORY[0x24BDAC7A8](*(_QWORD *)&v37.is_nil);
    _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lFSd_s5NeverO7SwiftUI14AnimatablePairVyAHy12CoreGraphics7CGFloatVAKGALGTg5(partial apply for specialized closure #1 in BezierAnimation.animate<A>(value:time:context:), v27, v28, (uint64_t)&v32);
    outlined init with take of AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>?((uint64_t)&v32, a4);
  }
  else
  {
    v11 = *((_QWORD *)v5 + 6);
    v12 = v5[1];
    v32 = *v5;
    v33 = v12;
    v34 = v5[2];
    v35 = v11;
    v36 = BezierAnimation.fraction(for:)(a5);
    *(_QWORD *)&v32 = *(_QWORD *)&v36.is_nil;
    BYTE8(v32) = v13 & 1;
    MEMORY[0x24BDAC7A8](*(_QWORD *)&v36.is_nil);
    v29[2] = a2;
    v29[3] = a3;
    v29[4] = a1;
    type metadata accessor for Double?();
    _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF((void (*)(char *, char *))partial apply for closure #1 in BezierAnimation.animate<A>(value:time:context:), (uint64_t)v29, MEMORY[0x24BEE4078], a2, v14, a4);
  }
}

Swift::Double_optional __swiftcall BezierAnimation.fraction(for:)(Swift::Double a1)
{
  double *v1;
  char v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  Swift::Double_optional result;

  if (*v1 <= 0.0 || *v1 < a1)
  {
    v3 = 0;
  }
  else
  {
    v5 = v1[5];
    v4 = v1[6];
    v6 = v1[4];
    v7 = a1 / *v1;
    if (v7 > 1.0)
      v7 = 1.0;
    if (v7 <= 0.0)
      v7 = 0.0;
    v8 = UnitCurve.CubicSolver.solveX(_:epsilon:)(v7, 0.000000953674316);
    a1 = round(v8 * (v4 + v8 * (v5 + v6 * v8)) * 1048576.0) * 0.000000953674316;
    v3 = LOBYTE(a1);
  }
  result.value = a1;
  result.is_nil = v3;
  return result;
}

double BezierAnimation.function.getter@<D0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  double v2;
  double v3;
  double v4;
  double result;

  v2 = *(double *)(v1 + 24);
  v3 = *(double *)(v1 + 40);
  v4 = *(double *)(v1 + 48);
  result = v2 / 3.0 + (*(double *)(v1 + 16) + v2) / 3.0;
  *(_QWORD *)a1 = *(_QWORD *)v1;
  *(double *)(a1 + 8) = v2 / 3.0;
  *(double *)(a1 + 16) = v4 / 3.0;
  *(double *)(a1 + 24) = result;
  *(double *)(a1 + 32) = v4 / 3.0 + (v3 + v4) / 3.0;
  *(_BYTE *)(a1 + 40) = 4;
  return result;
}

void BezierAnimation.hash(into:)()
{
  Swift::UInt64 *v0;
  Swift::UInt64 v1;

  if ((*v0 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v1 = *v0;
  else
    v1 = 0;
  Hasher._combine(_:)(v1);
  UnitCurve.CubicSolver.hash(into:)();
}

BOOL static BezierAnimation.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  float64x2_t v2;
  float64x2_t v3;
  float64x2_t v6[3];
  float64x2_t v7[3];

  if (*(double *)a1 == *(double *)a2)
  {
    v2 = *(float64x2_t *)(a1 + 24);
    v7[0] = *(float64x2_t *)(a1 + 8);
    v7[1] = v2;
    v7[2] = *(float64x2_t *)(a1 + 40);
    v3 = *(float64x2_t *)(a2 + 24);
    v6[0] = *(float64x2_t *)(a2 + 8);
    v6[1] = v3;
    v6[2] = *(float64x2_t *)(a2 + 40);
    return specialized static UnitCurve.CubicSolver.== infix(_:_:)(v7, v6);
  }
  else
  {
    return 0;
  }
}

Swift::Int BezierAnimation.hashValue.getter()
{
  Swift::UInt64 *v0;
  Swift::UInt64 v1;
  Swift::UInt64 v2;

  v1 = *v0;
  Hasher.init(_seed:)();
  if ((v1 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v2 = v1;
  else
    v2 = 0;
  Hasher._combine(_:)(v2);
  UnitCurve.CubicSolver.hash(into:)();
  return Hasher._finalize()();
}

double protocol witness for InternalCustomAnimation.function.getter in conformance BezierAnimation@<D0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  double v2;
  double v3;
  double v4;
  double result;

  v2 = *(double *)(v1 + 24);
  v3 = *(double *)(v1 + 40);
  v4 = *(double *)(v1 + 48);
  result = v2 / 3.0 + (*(double *)(v1 + 16) + v2) / 3.0;
  *(_QWORD *)a1 = *(_QWORD *)v1;
  *(double *)(a1 + 8) = v2 / 3.0;
  *(double *)(a1 + 16) = v4 / 3.0;
  *(double *)(a1 + 24) = result;
  *(double *)(a1 + 32) = v4 / 3.0 + (v3 + v4) / 3.0;
  *(_BYTE *)(a1 + 40) = 4;
  return result;
}

void protocol witness for Hashable.hash(into:) in conformance BezierAnimation()
{
  Swift::UInt64 *v0;
  Swift::UInt64 v1;

  if ((*v0 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v1 = *v0;
  else
    v1 = 0;
  Hasher._combine(_:)(v1);
  UnitCurve.CubicSolver.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance BezierAnimation()
{
  Swift::UInt64 *v0;
  Swift::UInt64 v1;

  Hasher.init(_seed:)();
  if ((*v0 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v1 = *v0;
  else
    v1 = 0;
  Hasher._combine(_:)(v1);
  UnitCurve.CubicSolver.hash(into:)();
  return Hasher._finalize()();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance BezierAnimation(uint64_t a1, uint64_t a2)
{
  float64x2_t v2;
  float64x2_t v3;
  float64x2_t v6[3];
  float64x2_t v7[3];

  if (*(double *)a1 == *(double *)a2)
  {
    v2 = *(float64x2_t *)(a1 + 24);
    v7[0] = *(float64x2_t *)(a1 + 8);
    v7[1] = v2;
    v7[2] = *(float64x2_t *)(a1 + 40);
    v3 = *(float64x2_t *)(a2 + 24);
    v6[0] = *(float64x2_t *)(a2 + 8);
    v6[1] = v3;
    v6[2] = *(float64x2_t *)(a2 + 40);
    return specialized static UnitCurve.CubicSolver.== infix(_:_:)(v7, v6);
  }
  else
  {
    return 0;
  }
}

uint64_t BezierTimingFunction.p1x.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8) + 16))(a2, v2);
}

uint64_t BezierTimingFunction.p1x.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 40))(v2, a1);
}

uint64_t (*BezierTimingFunction.p1x.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t BezierTimingFunction.p1y.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8) + 16))(a2, v2 + *(int *)(a1 + 36));
}

uint64_t BezierTimingFunction.p1y.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 40))(v2 + *(int *)(a2 + 36), a1);
}

uint64_t (*BezierTimingFunction.p1y.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t BezierTimingFunction.p2x.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8) + 16))(a2, v2 + *(int *)(a1 + 40));
}

uint64_t BezierTimingFunction.p2x.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 40))(v2 + *(int *)(a2 + 40), a1);
}

uint64_t (*BezierTimingFunction.p2x.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t BezierTimingFunction.p2y.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8) + 16))(a2, v2 + *(int *)(a1 + 44));
}

uint64_t BezierTimingFunction.p2y.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 40))(v2 + *(int *)(a2 + 44), a1);
}

uint64_t (*BezierTimingFunction.p2y.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t BezierTimingFunction.init<A>(p1:p2:)@<X0>(uint64_t a1@<X0>, char *a2@<X1>, void (*a3)(char *, uint64_t)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t TupleTypeMetadata2;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  double v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  char *v30;
  _QWORD *v31;
  void (*v32)(char *, uint64_t, uint64_t, double);
  char *v33;
  uint64_t v34;
  char *v35;
  char *v36;
  void (*v37)(char *, char *, uint64_t);
  void (*v38)(char *, uint64_t);
  uint64_t v39;
  char *v40;
  uint64_t v41;
  char *v42;
  char *v43;
  char *v44;
  uint64_t v45;
  char *v46;
  void (*v47)(char *, uint64_t);
  uint64_t v48;
  void (*v49)(uint64_t, char *, uint64_t);
  uint64_t v50;
  int *v51;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  char *v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  void (*v62)(char *, uint64_t);
  uint64_t v63;
  uint64_t v64;
  char *v65;
  char *v66;
  char *v67;
  char *v68;

  v63 = a8;
  v64 = a7;
  v55 = a4;
  v61 = a9;
  v62 = a3;
  v57 = a2;
  v60 = *(_QWORD *)(a5 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v66 = (char *)&v53 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v13);
  v68 = (char *)&v53 - v14;
  MEMORY[0x24BDAC7A8](v15);
  v67 = (char *)&v53 - v16;
  MEMORY[0x24BDAC7A8](v17);
  v65 = (char *)&v53 - v18;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v59 = *(_QWORD *)(TupleTypeMetadata2 - 8);
  MEMORY[0x24BDAC7A8](TupleTypeMetadata2);
  v21 = (char *)&v53 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v22);
  v24 = (char *)&v53 - v23;
  v26 = MEMORY[0x24BDAC7A8](v25);
  v28 = (char *)&v53 - v27;
  v30 = (char *)&v53 + *(int *)(v29 + 48) - v27;
  v31 = *(_QWORD **)(a6 - 8);
  v32 = (void (*)(char *, uint64_t, uint64_t, double))v31[4];
  v32((char *)&v53 - v27, a1, a6, v26);
  v33 = v30;
  v53 = v30;
  ((void (*)(char *, char *, uint64_t))v32)(v30, v57, a6);
  v34 = TupleTypeMetadata2;
  v54 = TupleTypeMetadata2;
  v35 = &v24[*(int *)(TupleTypeMetadata2 + 48)];
  v56 = v24;
  v57 = v35;
  ((void (*)(char *, void (*)(char *, uint64_t), uint64_t))v32)(v24, v62, a6);
  ((void (*)(char *, uint64_t, uint64_t))v32)(v35, v55, a6);
  v36 = &v21[*(int *)(v34 + 48)];
  v37 = (void (*)(char *, char *, uint64_t))v31[2];
  v58 = v28;
  v37(v21, v28, a6);
  v37(v36, v33, a6);
  dispatch thunk of BinaryFloatingPoint.init<A>(_:)();
  v38 = (void (*)(char *, uint64_t))v31[1];
  v38(v36, a6);
  v62 = v38;
  v39 = v54;
  v40 = &v21[*(int *)(v54 + 48)];
  v37(v21, v28, a6);
  v37(v40, v53, a6);
  dispatch thunk of BinaryFloatingPoint.init<A>(_:)();
  v38(v21, a6);
  v41 = v39;
  v42 = &v21[*(int *)(v39 + 48)];
  v43 = v56;
  v37(v21, v56, a6);
  v44 = v57;
  v37(v42, v57, a6);
  v45 = v64;
  dispatch thunk of BinaryFloatingPoint.init<A>(_:)();
  v62(v42, a6);
  v46 = &v21[*(int *)(v41 + 48)];
  v37(v21, v43, a6);
  v37(v46, v44, a6);
  dispatch thunk of BinaryFloatingPoint.init<A>(_:)();
  v47 = *(void (**)(char *, uint64_t))(v59 + 8);
  v47(v43, v41);
  v47(v58, v41);
  v62(v21, a6);
  v48 = v61;
  v49 = *(void (**)(uint64_t, char *, uint64_t))(v60 + 32);
  v49(v61, v65, a5);
  v51 = (int *)type metadata accessor for BezierTimingFunction(0, a5, v45, v50);
  v49(v48 + v51[9], v67, a5);
  v49(v48 + v51[10], v68, a5);
  return ((uint64_t (*)(uint64_t, char *, uint64_t))v49)(v48 + v51[11], v66, a5);
}

uint64_t partial apply for closure #1 in BezierAnimation.animate<A>(value:time:context:)@<X0>(double *a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  double v5;

  v3 = v2[2];
  v4 = v2[3];
  v5 = *a1;
  (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a2, v2[4], v3);
  return (*(uint64_t (**)(uint64_t, uint64_t, double))(v4 + 16))(v3, v4, v5);
}

void type metadata accessor for Double?()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for Double?)
  {
    v0 = type metadata accessor for Optional();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Double?);
  }
}

uint64_t BezierTimingFunction.p1.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  void (*v8)(uint64_t, uint64_t, uint64_t);

  v6 = *(_QWORD *)(a3 + 16);
  v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16);
  v8(a1, v3, v6);
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v8)(a2, v3 + *(int *)(a3 + 36), v6);
}

uint64_t BezierTimingFunction.p1.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t TupleTypeMetadata2;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  double v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  void (*v17)(char *, uint64_t, uint64_t, double);
  char *v18;
  void (*v19)(uint64_t, char *, uint64_t);
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;

  v6 = *(_QWORD *)(a3 + 16);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  MEMORY[0x24BDAC7A8](TupleTypeMetadata2);
  v9 = (char *)&v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)&v22 - v12;
  v15 = (char *)&v22 + *(int *)(v14 + 48) - v12;
  v16 = *(_QWORD *)(v6 - 8);
  v17 = *(void (**)(char *, uint64_t, uint64_t, double))(v16 + 32);
  v17((char *)&v22 - v12, a1, v6, v11);
  ((void (*)(char *, uint64_t, uint64_t))v17)(v15, a2, v6);
  v18 = &v9[*(int *)(TupleTypeMetadata2 + 48)];
  ((void (*)(char *, char *, uint64_t))v17)(v9, v13, v6);
  ((void (*)(char *, char *, uint64_t))v17)(v18, v15, v6);
  v19 = *(void (**)(uint64_t, char *, uint64_t))(v16 + 40);
  v20 = v23;
  v19(v23, v9, v6);
  return ((uint64_t (*)(uint64_t, char *, uint64_t))v19)(v20 + *(int *)(a3 + 36), v18, v6);
}

void (*BezierTimingFunction.p1.modify(_QWORD *a1, uint64_t a2))(void **a1, char a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t v6;
  uint64_t TupleTypeMetadata2;
  uint64_t v8;
  size_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  void (*v13)(void);

  v5 = malloc(0x48uLL);
  *a1 = v5;
  *v5 = a2;
  v5[1] = v2;
  v6 = *(_QWORD *)(a2 + 16);
  v5[2] = v6;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v5[3] = TupleTypeMetadata2;
  v8 = *(_QWORD *)(TupleTypeMetadata2 - 8);
  v5[4] = v8;
  v9 = *(_QWORD *)(v8 + 64);
  v5[5] = malloc(v9);
  v10 = (char *)malloc(v9);
  v5[6] = v10;
  v11 = *(int *)(TupleTypeMetadata2 + 48);
  *((_DWORD *)v5 + 16) = v11;
  v12 = &v10[v11];
  v13 = *(void (**)(void))(*(_QWORD *)(v6 - 8) + 16);
  v5[7] = v13;
  v13();
  ((void (*)(char *, uint64_t, uint64_t))v13)(v12, v2 + *(int *)(a2 + 36), v6);
  return BezierTimingFunction.p1.modify;
}

void BezierTimingFunction.p1.modify(void **a1, char a2)
{
  BezierTimingFunction.p1.modify(a1, a2, (void (*)(char *, char *, uint64_t))BezierTimingFunction.p1.setter);
}

uint64_t BezierTimingFunction.p2.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  void (*v8)(uint64_t, uint64_t, uint64_t);

  v6 = *(_QWORD *)(a3 + 16);
  v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16);
  v8(a1, v3 + *(int *)(a3 + 40), v6);
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v8)(a2, v3 + *(int *)(a3 + 44), v6);
}

uint64_t key path getter for BezierTimingFunction.p1 : <A>BezierTimingFunction<A>@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, void (*a3)(char *, char *, uint64_t)@<X3>, char *a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t TupleTypeMetadata2;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  void (*v21)(char *, char *, uint64_t);
  char *v22;
  uint64_t v24;

  v6 = *(_QWORD *)(a2 + a1 - 16);
  v7 = *(_QWORD *)(a2 + a1 - 8);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  MEMORY[0x24BDAC7A8](TupleTypeMetadata2);
  v10 = (char *)&v24 - v9;
  v11 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)&v24 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v15);
  v17 = (char *)&v24 - v16;
  v19 = type metadata accessor for BezierTimingFunction(0, v6, v7, v18);
  a3(v17, v14, v19);
  v20 = &v10[*(int *)(TupleTypeMetadata2 + 48)];
  v21 = *(void (**)(char *, char *, uint64_t))(v11 + 32);
  v21(v10, v17, v6);
  v21(v20, v14, v6);
  v22 = &a4[*(int *)(TupleTypeMetadata2 + 48)];
  v21(a4, v10, v6);
  return ((uint64_t (*)(char *, char *, uint64_t))v21)(v22, v20, v6);
}

uint64_t key path setter for BezierTimingFunction.p1 : <A>BezierTimingFunction<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(char *, char *, uint64_t))
{
  uint64_t v7;
  uint64_t v8;
  uint64_t TupleTypeMetadata2;
  double v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  void (*v17)(char *, uint64_t, uint64_t, double);
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;

  v7 = *(_QWORD *)(a4 + a3 - 16);
  v8 = *(_QWORD *)(a4 + a3 - 8);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v10 = MEMORY[0x24BDAC7A8](TupleTypeMetadata2);
  v12 = (char *)&v21 - v11;
  v14 = *(int *)(v13 + 48);
  v15 = &v12[v14];
  v16 = a1 + v14;
  v17 = *(void (**)(char *, uint64_t, uint64_t, double))(*(_QWORD *)(v7 - 8) + 16);
  v17(v12, a1, v7, v10);
  ((void (*)(char *, uint64_t, uint64_t))v17)(v15, v16, v7);
  v19 = type metadata accessor for BezierTimingFunction(0, v7, v8, v18);
  return a5(v12, v15, v19);
}

uint64_t BezierTimingFunction.p2.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t TupleTypeMetadata2;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  double v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  void (*v17)(char *, uint64_t, uint64_t, double);
  char *v18;
  void (*v19)(uint64_t, char *, uint64_t);
  uint64_t v21;
  uint64_t v22;

  v22 = a2;
  v6 = *(_QWORD *)(a3 + 16);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  MEMORY[0x24BDAC7A8](TupleTypeMetadata2);
  v9 = (char *)&v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)&v21 - v12;
  v15 = (char *)&v21 + *(int *)(v14 + 48) - v12;
  v16 = *(_QWORD *)(v6 - 8);
  v17 = *(void (**)(char *, uint64_t, uint64_t, double))(v16 + 32);
  v17((char *)&v21 - v12, a1, v6, v11);
  ((void (*)(char *, uint64_t, uint64_t))v17)(v15, v22, v6);
  v18 = &v9[*(int *)(TupleTypeMetadata2 + 48)];
  ((void (*)(char *, char *, uint64_t))v17)(v9, v13, v6);
  ((void (*)(char *, char *, uint64_t))v17)(v18, v15, v6);
  v19 = *(void (**)(uint64_t, char *, uint64_t))(v16 + 40);
  v19(v3 + *(int *)(a3 + 40), v9, v6);
  return ((uint64_t (*)(uint64_t, char *, uint64_t))v19)(v3 + *(int *)(a3 + 44), v18, v6);
}

void (*BezierTimingFunction.p2.modify(_QWORD *a1, uint64_t a2))(void **a1, char a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t v6;
  uint64_t TupleTypeMetadata2;
  uint64_t v8;
  size_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  void (*v13)(void);

  v5 = malloc(0x48uLL);
  *a1 = v5;
  *v5 = a2;
  v5[1] = v2;
  v6 = *(_QWORD *)(a2 + 16);
  v5[2] = v6;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v5[3] = TupleTypeMetadata2;
  v8 = *(_QWORD *)(TupleTypeMetadata2 - 8);
  v5[4] = v8;
  v9 = *(_QWORD *)(v8 + 64);
  v5[5] = malloc(v9);
  v10 = (char *)malloc(v9);
  v5[6] = v10;
  v11 = *(int *)(TupleTypeMetadata2 + 48);
  *((_DWORD *)v5 + 16) = v11;
  v12 = &v10[v11];
  v13 = *(void (**)(void))(*(_QWORD *)(v6 - 8) + 16);
  v5[7] = v13;
  v13();
  ((void (*)(char *, uint64_t, uint64_t))v13)(v12, v2 + *(int *)(a2 + 44), v6);
  return BezierTimingFunction.p2.modify;
}

void BezierTimingFunction.p2.modify(void **a1, char a2)
{
  BezierTimingFunction.p1.modify(a1, a2, (void (*)(char *, char *, uint64_t))BezierTimingFunction.p2.setter);
}

void BezierTimingFunction.p1.modify(void **a1, char a2, void (*a3)(char *, char *, uint64_t))
{
  uint64_t *v4;
  char *v5;
  void (*v6)(char *, char *, uint64_t);
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;

  v4 = (uint64_t *)*a1;
  if ((a2 & 1) != 0)
  {
    v5 = (char *)v4[6];
    v6 = (void (*)(char *, char *, uint64_t))v4[7];
    v7 = (char *)v4[5];
    v9 = v4[2];
    v8 = v4[3];
    v10 = *v4;
    v13 = v4[4];
    v11 = &v5[*((int *)v4 + 16)];
    v12 = &v7[*(int *)(v8 + 48)];
    v6(v7, v5, v9);
    v6(v12, v11, v9);
    a3(v7, v12, v10);
    (*(void (**)(char *, uint64_t))(v13 + 8))(v5, v8);
  }
  else
  {
    v7 = (char *)v4[5];
    v5 = (char *)v4[6];
    a3(v5, &v5[*((int *)v4 + 16)], *v4);
  }
  free(v5);
  free(v7);
  free(v4);
}

uint64_t static BezierTimingFunction.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;

  if ((dispatch thunk of static Equatable.== infix(_:_:)() & 1) != 0
    && (type metadata accessor for BezierTimingFunction(0, a3, a4, v6),
        (dispatch thunk of static Equatable.== infix(_:_:)() & 1) != 0)
    && (dispatch thunk of static Equatable.== infix(_:_:)() & 1) != 0)
  {
    return dispatch thunk of static Equatable.== infix(_:_:)() & 1;
  }
  else
  {
    return 0;
  }
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance BezierTimingFunction<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return static BezierTimingFunction.== infix(_:_:)(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24));
}

uint64_t BezierAnimation.encode(to:)(uint64_t a1)
{
  double *v1;
  float64_t v3;
  double v4;
  float64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int64_t isUniquelyReferenced_nonNull_native;
  uint64_t result;
  uint64_t v13;
  _QWORD *v14;
  unint64_t v15;
  unint64_t v16;
  float64x2_t v17[3];
  float64x2_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v4 = *v1;
  v3 = v1[1];
  v5 = v1[2];
  v6 = *((_QWORD *)v1 + 3);
  v7 = *((_QWORD *)v1 + 4);
  v8 = *((_QWORD *)v1 + 5);
  v9 = *((_QWORD *)v1 + 6);
  if (*v1 != 0.0)
  {
    ProtobufEncoder.encodeVarint(_:)(9uLL);
    v10 = *(_QWORD *)(a1 + 8);
    isUniquelyReferenced_nonNull_native = v10 + 8;
    if (__OFADD__(v10, 8))
      goto LABEL_14;
    if (*(_QWORD *)(a1 + 16) < isUniquelyReferenced_nonNull_native)
      goto LABEL_15;
    *(_QWORD *)(a1 + 8) = isUniquelyReferenced_nonNull_native;
    *(double *)(*(_QWORD *)a1 + v10) = v4;
  }
  while (1)
  {
    v18.f64[0] = v3;
    v18.f64[1] = v5;
    v19 = v6;
    v20 = v7;
    v21 = v8;
    v22 = v9;
    v17[0] = (float64x2_t)xmmword_235285B40;
    v17[1] = (float64x2_t)xmmword_23527E880;
    v17[2] = (float64x2_t)xmmword_2352AECF0;
    result = specialized static UnitCurve.CubicSolver.== infix(_:_:)(&v18, v17);
    if ((result & 1) != 0)
      break;
    ProtobufEncoder.encodeVarint(_:)(0x12uLL);
    v13 = *(_QWORD *)(a1 + 8);
    v14 = *(_QWORD **)(a1 + 24);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      isUniquelyReferenced_nonNull_native = (int64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v14[2] + 1, 1, v14);
      v14 = (_QWORD *)isUniquelyReferenced_nonNull_native;
    }
    v16 = v14[2];
    v15 = v14[3];
    if (v16 >= v15 >> 1)
    {
      isUniquelyReferenced_nonNull_native = (int64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v15 > 1), v16 + 1, 1, v14);
      v14 = (_QWORD *)isUniquelyReferenced_nonNull_native;
    }
    v14[2] = v16 + 1;
    v14[v16 + 4] = v13;
    *(_QWORD *)(a1 + 24) = v14;
    if (!__OFADD__(v13, 1))
    {
      *(_QWORD *)(a1 + 8) = v13 + 1;
      UnitCurve.CubicSolver.encode(to:)((double *)a1);
      return ProtobufEncoder.endLengthDelimited()();
    }
    __break(1u);
LABEL_14:
    __break(1u);
LABEL_15:
    *(double *)ProtobufEncoder.growBufferSlow(to:)(isUniquelyReferenced_nonNull_native) = v4;
  }
  return result;
}

unint64_t BezierAnimation.init(from:)@<X0>(unint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  _QWORD *v3;
  unint64_t v5;
  unint64_t v6;
  double v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  double *v11;
  _QWORD *v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  float *v20;
  float v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  _OWORD v28[3];

  v3 = (_QWORD *)result;
  v5 = *(_QWORD *)(result + 8);
  v6 = *(_QWORD *)(result + 16);
  if (v5 >= v6)
  {
    v27 = xmmword_2352AECF0;
    v26 = xmmword_23527E880;
    v7 = 0.0;
    v25 = xmmword_235285B40;
LABEL_4:
    v3[3] = 0;
    *(double *)a2 = v7;
    *(_OWORD *)(a2 + 8) = v25;
    *(_OWORD *)(a2 + 24) = v26;
    *(_OWORD *)(a2 + 40) = v27;
    return result;
  }
  v27 = xmmword_2352AECF0;
  v26 = xmmword_23527E880;
  v7 = 0.0;
  v25 = xmmword_235285B40;
  while (1)
  {
    result = v3[3];
    if (result)
    {
      v9 = v3[4];
      if (v5 < v9)
        goto LABEL_14;
      if (v9 < v5)
        goto LABEL_51;
      v3[3] = 0;
    }
    result = ProtobufDecoder.decodeVarint()();
    if (v2)
      return result;
    if (result <= 7)
      goto LABEL_51;
LABEL_14:
    if (result >> 3 != 2)
    {
      if (result >> 3 == 1)
      {
        v10 = result & 7;
        if (v10 == 5)
        {
          v20 = (float *)v3[1];
          if (v6 < (unint64_t)(v20 + 1))
            goto LABEL_51;
          v21 = *v20;
          v3[1] = v20 + 1;
          v7 = v21;
        }
        else
        {
          if (v10 == 2)
          {
            result = ProtobufDecoder.decodeVarint()();
            if (v2)
              return result;
            if ((result & 0x8000000000000000) != 0)
              goto LABEL_56;
            v11 = (double *)v3[1];
            if (v6 < (unint64_t)v11 + result)
              goto LABEL_51;
            v3[3] = 9;
            v3[4] = (char *)v11 + result;
          }
          else
          {
            if (v10 != 1)
              goto LABEL_51;
            v11 = (double *)v3[1];
          }
          if (v6 < (unint64_t)(v11 + 1))
            goto LABEL_51;
          v7 = *v11;
          v3[1] = v11 + 1;
        }
      }
      else
      {
        switch(result & 7)
        {
          case 0uLL:
            result = ProtobufDecoder.decodeVarint()();
            if (!v2)
              goto LABEL_7;
            return result;
          case 1uLL:
            v8 = v3[1] + 8;
            if (v6 < v8)
              goto LABEL_51;
            goto LABEL_6;
          case 2uLL:
            result = ProtobufDecoder.decodeVarint()();
            if (v2)
              return result;
            if ((result & 0x8000000000000000) != 0)
              goto LABEL_57;
            v8 = v3[1] + result;
            if (v6 < v8)
              goto LABEL_51;
LABEL_6:
            v3[1] = v8;
            break;
          case 5uLL:
            v8 = v3[1] + 4;
            if (v6 < v8)
              goto LABEL_51;
            goto LABEL_6;
          default:
            goto LABEL_51;
        }
      }
      goto LABEL_7;
    }
    if ((result & 7) != 2)
      goto LABEL_51;
    v12 = (_QWORD *)v3[5];
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v12[2] + 1, 1, v12);
    v14 = v12[2];
    v13 = v12[3];
    if (v14 >= v13 >> 1)
      v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v13 > 1), v14 + 1, 1, v12);
    v12[2] = v14 + 1;
    v12[v14 + 4] = v6;
    v3[5] = v12;
    result = ProtobufDecoder.decodeVarint()();
    if (v2)
      return result;
    if ((result & 0x8000000000000000) != 0)
      break;
    v15 = v3[1] + result;
    if (v6 < v15)
      goto LABEL_51;
    v3[2] = v15;
    UnitCurve.CubicSolver.init(from:)((unint64_t)v3, (double *)v28);
    v16 = (_QWORD *)v3[5];
    if (!v16[2])
      goto LABEL_55;
    result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) != 0)
    {
      v17 = v16[2];
      if (!v17)
        goto LABEL_50;
    }
    else
    {
      result = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v16);
      v16 = (_QWORD *)result;
      v17 = *(_QWORD *)(result + 16);
      if (!v17)
      {
LABEL_50:
        __break(1u);
LABEL_51:
        lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
        swift_allocError();
        return swift_willThrow();
      }
    }
    v18 = v17 - 1;
    v19 = v16[v18 + 4];
    v16[2] = v18;
    v3[5] = v16;
    v3[2] = v19;
    v25 = v28[0];
    v26 = v28[1];
    v27 = v28[2];
LABEL_7:
    v5 = v3[1];
    v6 = v3[2];
    if (v5 >= v6)
      goto LABEL_4;
  }
  __break(1u);
LABEL_55:
  __break(1u);
LABEL_56:
  __break(1u);
LABEL_57:
  __break(1u);
  __break(1u);
  result = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew()((_QWORD *)a2);
  v24 = *(_QWORD *)(result + 16);
  if (!v24)
  {
    __break(1u);
    JUMPOUT(0x2350DFA30);
  }
  v22 = v24 - 1;
  v23 = *(_QWORD *)(result + 8 * v22 + 32);
  *(_QWORD *)(result + 16) = v22;
  v3[5] = result;
  v3[2] = v23;
  return result;
}

uint64_t protocol witness for ProtobufEncodableMessage.encode(to:) in conformance BezierAnimation(uint64_t a1)
{
  return BezierAnimation.encode(to:)(a1);
}

unint64_t protocol witness for ProtobufDecodableMessage.init(from:) in conformance BezierAnimation@<X0>(unint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return BezierAnimation.init(from:)(a1, a2);
}

float64x2_t partial apply for specialized closure #1 in BezierAnimation.animate<A>(value:time:context:)@<Q0>(double *a1@<X0>, float64x2_t *a2@<X8>)
{
  uint64_t v2;
  float64x2_t *v3;
  float64x2_t result;

  v3 = *(float64x2_t **)(v2 + 16);
  result = vmulq_n_f64(v3[1], *a1);
  *a2 = vmulq_n_f64(*v3, *a1);
  a2[1] = result;
  return result;
}

uint64_t type metadata accessor for BezierTimingFunction(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for BezierTimingFunction);
}

unint64_t instantiation function for generic protocol witness table for BezierAnimation(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type BezierAnimation and conformance BezierAnimation();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table accessor for type BezierAnimation and conformance BezierAnimation();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_2350DFBB0@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, char *a3@<X8>)
{
  return key path getter for BezierTimingFunction.p1 : <A>BezierTimingFunction<A>(a1, a2, (void (*)(char *, char *, uint64_t))BezierTimingFunction.p1.getter, a3);
}

uint64_t sub_2350DFBCC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for BezierTimingFunction.p1 : <A>BezierTimingFunction<A>(a1, a2, a3, a4, (uint64_t (*)(char *, char *, uint64_t))BezierTimingFunction.p1.setter);
}

uint64_t sub_2350DFBE8()
{
  return 16;
}

__n128 sub_2350DFBF4(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_2350DFC00@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, char *a3@<X8>)
{
  return key path getter for BezierTimingFunction.p1 : <A>BezierTimingFunction<A>(a1, a2, (void (*)(char *, char *, uint64_t))BezierTimingFunction.p2.getter, a3);
}

uint64_t sub_2350DFC1C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for BezierTimingFunction.p1 : <A>BezierTimingFunction<A>(a1, a2, a3, a4, (uint64_t (*)(char *, char *, uint64_t))BezierTimingFunction.p2.setter);
}

uint64_t sub_2350DFC38()
{
  return 16;
}

__n128 sub_2350DFC44(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

ValueMetadata *type metadata accessor for BezierAnimation()
{
  return &type metadata for BezierAnimation;
}

uint64_t type metadata completion function for BezierTimingFunction()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for BezierTimingFunction(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v14;
  void (*v15)(uint64_t *, uint64_t *, uint64_t);
  unint64_t v16;
  unint64_t v17;

  v4 = a1;
  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  v8 = *(_DWORD *)(v6 + 80);
  v9 = ~v8;
  v10 = v7 + v8;
  v11 = ((v7 + v8 + ((v7 + v8 + ((v7 + v8) & ~v8)) & ~v8)) & ~v8) + v7;
  if (v8 > 7 || (*(_DWORD *)(v6 + 80) & 0x100000) != 0 || v11 > 0x18)
  {
    v14 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v14 + ((v8 + 16) & v9));
    swift_retain();
  }
  else
  {
    v15 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v6 + 16);
    v15(a1, a2, *(_QWORD *)(a3 + 16));
    v16 = ((unint64_t)a2 + v10) & v9;
    v15((uint64_t *)(((unint64_t)v4 + v10) & v9), (uint64_t *)v16, v5);
    v17 = (v10 + v16) & v9;
    v15((uint64_t *)((v10 + (((unint64_t)v4 + v10) & v9)) & v9), (uint64_t *)v17, v5);
    v15((uint64_t *)((v10 + ((v10 + (((unint64_t)v4 + v10) & v9)) & v9)) & v9), (uint64_t *)((v10 + v17) & v9), v5);
  }
  return v4;
}

uint64_t destroy for BezierTimingFunction(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v11)(uint64_t, uint64_t);

  v3 = *(_QWORD *)(a2 + 16);
  v4 = *(_QWORD *)(v3 - 8);
  v11 = *(void (**)(uint64_t, uint64_t))(v4 + 8);
  v11(a1, v3);
  v5 = *(_QWORD *)(v4 + 64);
  v6 = *(unsigned __int8 *)(v4 + 80);
  v7 = v5 + v6;
  v8 = (v5 + v6 + a1) & ~v6;
  v11(v8, v3);
  v9 = (v7 + v8) & ~v6;
  v11(v9, v3);
  return ((uint64_t (*)(uint64_t, uint64_t))v11)((v7 + v9) & ~v6, v3);
}

uint64_t initializeWithCopy for BezierTimingFunction(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16);
  v7(a1, a2, v5);
  v8 = *(unsigned __int8 *)(v6 + 80);
  v9 = *(_QWORD *)(v6 + 64) + v8;
  v10 = (v9 + a2) & ~v8;
  v7((v9 + a1) & ~v8, v10, v5);
  v11 = (v9 + v10) & ~v8;
  v7((v9 + ((v9 + a1) & ~v8)) & ~v8, v11, v5);
  v7((v9 + ((v9 + ((v9 + a1) & ~v8)) & ~v8)) & ~v8, (v9 + v11) & ~v8, v5);
  return a1;
}

uint64_t assignWithCopy for BezierTimingFunction(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 24);
  v7(a1, a2, v5);
  v8 = *(unsigned __int8 *)(v6 + 80);
  v9 = *(_QWORD *)(v6 + 64) + v8;
  v10 = (v9 + a2) & ~v8;
  v7((v9 + a1) & ~v8, v10, v5);
  v11 = (v9 + v10) & ~v8;
  v7((v9 + ((v9 + a1) & ~v8)) & ~v8, v11, v5);
  v7((v9 + ((v9 + ((v9 + a1) & ~v8)) & ~v8)) & ~v8, (v9 + v11) & ~v8, v5);
  return a1;
}

uint64_t initializeWithTake for BezierTimingFunction(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 32);
  v7(a1, a2, v5);
  v8 = *(unsigned __int8 *)(v6 + 80);
  v9 = *(_QWORD *)(v6 + 64) + v8;
  v10 = (v9 + a2) & ~v8;
  v7((v9 + a1) & ~v8, v10, v5);
  v11 = (v9 + v10) & ~v8;
  v7((v9 + ((v9 + a1) & ~v8)) & ~v8, v11, v5);
  v7((v9 + ((v9 + ((v9 + a1) & ~v8)) & ~v8)) & ~v8, (v9 + v11) & ~v8, v5);
  return a1;
}

uint64_t assignWithTake for BezierTimingFunction(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 40);
  v7(a1, a2, v5);
  v8 = *(unsigned __int8 *)(v6 + 80);
  v9 = *(_QWORD *)(v6 + 64) + v8;
  v10 = (v9 + a2) & ~v8;
  v7((v9 + a1) & ~v8, v10, v5);
  v11 = (v9 + v10) & ~v8;
  v7((v9 + ((v9 + a1) & ~v8)) & ~v8, v11, v5);
  v7((v9 + ((v9 + ((v9 + a1) & ~v8)) & ~v8)) & ~v8, (v9 + v11) & ~v8, v5);
  return a1;
}

uint64_t getEnumTagSinglePayload for BezierTimingFunction(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  int v10;
  unsigned int v11;
  int v12;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = a2 - v5;
  if (a2 <= v5)
    goto LABEL_18;
  v7 = *(unsigned __int8 *)(v4 + 80);
  v8 = ((*(_QWORD *)(v4 + 64) + v7 + ((*(_QWORD *)(v4 + 64) + v7 + ((*(_QWORD *)(v4 + 64) + v7) & ~v7)) & ~v7)) & ~v7)
     + *(_QWORD *)(v4 + 64);
  v9 = 8 * v8;
  if (v8 <= 3)
  {
    v11 = ((v6 + ~(-1 << v9)) >> v9) + 1;
    if (HIWORD(v11))
    {
      v10 = *(_DWORD *)(a1 + v8);
      if (!v10)
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v11 > 0xFF)
    {
      v10 = *(unsigned __int16 *)(a1 + v8);
      if (!*(_WORD *)(a1 + v8))
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v11 < 2)
    {
LABEL_18:
      if (v5)
        return (*(uint64_t (**)(void))(v4 + 48))();
      return 0;
    }
  }
  v10 = *(unsigned __int8 *)(a1 + v8);
  if (!*(_BYTE *)(a1 + v8))
    goto LABEL_18;
LABEL_11:
  v12 = (v10 - 1) << v9;
  if (v8 > 3)
    v12 = 0;
  if (!(_DWORD)v8)
    return v5 + v12 + 1;
  if (v8 > 3)
    LODWORD(v8) = 4;
  return ((uint64_t (*)(void))((char *)&loc_2350E0214 + 4 * byte_2352C8B30[(v8 - 1)]))();
}

void storeEnumTagSinglePayload for BezierTimingFunction(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  size_t v9;
  BOOL v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  int v15;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = *(unsigned __int8 *)(v6 + 80);
  v9 = ((*(_QWORD *)(v6 + 64) + v8 + ((*(_QWORD *)(v6 + 64) + v8 + ((*(_QWORD *)(v6 + 64) + v8) & ~v8)) & ~v8)) & ~v8)
     + *(_QWORD *)(v6 + 64);
  v10 = a3 >= v7;
  v11 = a3 - v7;
  if (v11 != 0 && v10)
  {
    if (v9 <= 3)
    {
      v14 = ((v11 + ~(-1 << (8 * v9))) >> (8 * v9)) + 1;
      if (HIWORD(v14))
      {
        v12 = 4u;
      }
      else if (v14 >= 0x100)
      {
        v12 = 2;
      }
      else
      {
        v12 = v14 > 1;
      }
    }
    else
    {
      v12 = 1u;
    }
  }
  else
  {
    v12 = 0;
  }
  if (v7 < a2)
  {
    v13 = ~v7 + a2;
    if (v9 < 4)
    {
      if ((_DWORD)v9)
      {
        v15 = v13 & ~(-1 << (8 * v9));
        bzero(a1, v9);
        if ((_DWORD)v9 == 3)
        {
          *a1 = v15;
          *((_BYTE *)a1 + 2) = BYTE2(v15);
        }
        else if ((_DWORD)v9 == 2)
        {
          *a1 = v15;
        }
        else
        {
          *(_BYTE *)a1 = v15;
        }
      }
    }
    else
    {
      bzero(a1, v9);
      *(_DWORD *)a1 = v13;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X11 }
}

void specialized static RendererLeafView.makeLeafView(view:inputs:)(unsigned int a1@<W0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  specialized static RendererLeafView.makeLeafView(view:inputs:)(a1, a2, (void (*)(uint64_t))protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase, &lazy cache variable for type metadata for LeafDisplayList<ColorView>, (uint64_t)&type metadata for ColorView, (uint64_t)&protocol witness table for ColorView, (void (*)(void))lazy protocol witness table accessor for type LeafDisplayList<ColorView> and conformance LeafDisplayList<A>, a3, (void (*)(uint64_t))protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase, &lazy cache variable for type metadata for LeafResponderFilter<ColorView>, (uint64_t)&protocol witness table for ColorView, (void (*)(void))lazy protocol witness table accessor for type LeafResponderFilter<ColorView> and conformance LeafResponderFilter<A>);
}

{
  specialized static RendererLeafView.makeLeafView(view:inputs:)(a1, a2, (void (*)(uint64_t))protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase, &lazy cache variable for type metadata for LeafDisplayList<BackdropView>, (uint64_t)&type metadata for BackdropView, (uint64_t)&protocol witness table for BackdropView, (void (*)(void))lazy protocol witness table accessor for type LeafDisplayList<BackdropView> and conformance LeafDisplayList<A>, a3, (void (*)(uint64_t))protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase, &lazy cache variable for type metadata for LeafResponderFilter<BackdropView>, (uint64_t)&protocol witness table for BackdropView, (void (*)(void))lazy protocol witness table accessor for type LeafResponderFilter<BackdropView> and conformance LeafResponderFilter<A>);
}

void specialized static RendererLeafView.makeLeafView(view:inputs:)(unsigned int a1@<W0>, uint64_t a2@<X1>, void (*a3)(uint64_t)@<X2>, unint64_t *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, void (*a7)(void)@<X6>, _QWORD *a8@<X8>, void (*a9)(uint64_t), unint64_t *a10, uint64_t a11, void (*a12)(void))
{
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  unsigned int v32;
  uint64_t v33;
  __int128 v34;
  uint64_t v35;
  unsigned __int8 v36;
  unint64_t v37;
  unint64_t v38;
  unsigned int v39;
  uint64_t v40;
  uint64_t v41;
  __int128 v42;
  __int128 v43;
  unsigned int v44;
  uint64_t v45;
  uint64_t v46;
  unsigned __int8 v47;
  unint64_t v48;
  unint64_t v49;
  __int128 v50;
  unsigned int v51;
  uint64_t v52;
  uint64_t v53;
  char v54;
  int v55;
  uint64_t v56;
  unsigned int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  unsigned int OffsetAttribute2;
  uint64_t v65;
  uint64_t v66;
  int v67;
  unsigned int v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  __int128 v72;
  __int128 v73;
  unsigned int v74;
  uint64_t KeyPath;
  int v76;
  uint64_t v77;
  unsigned __int8 v78;
  unint64_t v79;
  unint64_t v80;
  __int128 v81;
  int v82;
  unsigned int v83;
  uint64_t v84;
  uint64_t v85;
  __int128 v86;
  __int128 v87;
  unsigned int v88;
  uint64_t v89;
  int v90;
  __int128 v91;
  uint64_t v92;
  unsigned __int8 v93;
  unint64_t v94;
  unint64_t v95;
  uint64_t v96;
  unsigned int v97;
  unsigned int v98;
  uint64_t v99;
  void (*v100)(__int128 *, _QWORD);
  int v101;
  int v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  int v107;
  int v108;
  uint64_t v109;
  uint64_t v110;
  int v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  int v119;
  int v120;
  int v121;
  uint64_t v122;
  Swift::UInt32 v123;
  uint64_t v124;
  uint64_t v125;
  void (*v126)(void);
  uint64_t v127;
  uint64_t v128;
  _QWORD *v129;
  unsigned int v130;
  uint64_t v131;
  uint64_t v133;
  uint64_t v134;
  uint64_t v136;
  uint64_t v137;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  __int128 v143;
  __int128 v144;
  unsigned __int8 v145;
  unsigned int v146;
  unsigned __int8 v147;
  unsigned int v148;
  unsigned __int8 v149;
  __int128 v150;
  __int128 v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  int v155;
  __int128 v156;
  __int128 v157;
  __int128 v158;
  _QWORD v159[3];

  v159[1] = *MEMORY[0x24BDAC8D0];
  v141 = MEMORY[0x24BEE4AF8];
  LODWORD(v17) = *MEMORY[0x24BE096C0];
  LODWORD(v142) = 0;
  HIDWORD(v142) = *MEMORY[0x24BE096C0];
  v18 = *(_QWORD *)(a2 + 48);
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, (unint64_t *)&lazy cache variable for type metadata for _AnyPreferenceKey<DisplayList.Key>, (uint64_t)&type metadata for DisplayList.Key, (uint64_t)&protocol witness table for DisplayList.Key, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for _AnyPreferenceKey);
  v20 = *(_QWORD *)(v18 + 16);
  if (!v20)
  {
LABEL_68:
    *a8 = v141;
    a8[1] = v142;
    return;
  }
  v21 = v19;
  v126 = a7;
  v22 = (_QWORD *)(v18 + 32);
  v23 = (_QWORD *)(v18 + 32);
  v24 = *(_QWORD *)(v18 + 16);
  v131 = a5;
  v130 = a1;
  do
  {
    if (*v23 == v19)
    {
      v123 = ++lastIdentity;
      v25 = *(_OWORD *)(a2 + 32);
      v157 = *(_OWORD *)(a2 + 16);
      v158 = v25;
      v156 = *(_OWORD *)a2;
      LOBYTE(a1) = BYTE4(v25);
      if ((WORD2(v25) & 0x100) != 0)
        goto LABEL_72;
      goto LABEL_7;
    }
    v23 += 2;
    --v24;
  }
  while (v24);
  while (1)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, (unint64_t *)&lazy cache variable for type metadata for _AnyPreferenceKey<ViewRespondersKey>, (uint64_t)&type metadata for ViewRespondersKey, (uint64_t)&protocol witness table for ViewRespondersKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for _AnyPreferenceKey);
    v17 = v59;
    v60 = 0;
    while (1)
    {
      v61 = v60 + 1;
      if (__OFADD__(v60, 1))
        break;
      if (*v22 == v59)
      {
        v62 = *(_QWORD *)(a2 + 16);
        v63 = *(_DWORD *)(a2 + 36);
        swift_beginAccess();
        if ((v63 & 0x20) == 0)
        {
          OffsetAttribute2 = *(_DWORD *)(a2 + 72);
          LODWORD(v65) = *(_DWORD *)(a2 + 64);
          v66 = v131;
LABEL_67:
          v96 = swift_endAccess();
          v97 = *(_DWORD *)(a2 + 60);
          *(_QWORD *)&v150 = __PAIR64__(OffsetAttribute2, v130);
          *((_QWORD *)&v150 + 1) = __PAIR64__(v97, v65);
          *(_QWORD *)&v151 = 0;
          a9(v96);
          type metadata accessor for [ViewResponder](0);
          type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, a10, v66, a11, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for LeafResponderFilter);
          a12();
          v98 = Attribute.init<A>(body:value:flags:update:)();
          LOBYTE(v150) = 0;
          PreferencesOutputs.subscript.setter(v98, v17, (uint64_t)&protocol witness table for _AnyPreferenceKey<A>, v99);
          goto LABEL_68;
        }
        v129 = a8;
        v67 = *(_DWORD *)(a2 + 8);
        v136 = *(_QWORD *)(a2 + 16);
        v139 = *(_QWORD *)a2;
        v68 = *(_DWORD *)(a2 + 24);
        v69 = *(_QWORD *)(a2 + 32);
        v70 = *(_QWORD *)(a2 + 48);
        v133 = *(_QWORD *)(a2 + 40);
        v71 = *(_QWORD *)(a2 + 56);
        v127 = *(_QWORD *)(a2 + 64);
        v124 = *(_QWORD *)(a2 + 72);
        v121 = *(_DWORD *)(a2 + 80);
        v72 = *(_OWORD *)(a2 + 48);
        v152 = *(_OWORD *)(a2 + 32);
        v153 = v72;
        v154 = *(_OWORD *)(a2 + 64);
        v155 = *(_DWORD *)(a2 + 80);
        v73 = *(_OWORD *)(a2 + 16);
        v150 = *(_OWORD *)a2;
        v151 = v73;
        outlined retain of _ViewInputs(a2);
        v74 = _ViewInputs.geometryTransaction()();
        KeyPath = swift_getKeyPath();
        v76 = specialized CachedEnvironment.attribute<A>(keyPath:)(KeyPath);
        swift_release();
        if ((*(_BYTE *)(v62 + 81) & 1) == 0
          && (_DWORD)v127 == *(_DWORD *)(v62 + 32)
          && (_DWORD)v124 == *(_DWORD *)(v62 + 36)
          && v76 == *(_DWORD *)(v62 + 40)
          && v67 == *(_DWORD *)(v62 + 44)
          && v74 == *(_DWORD *)(v62 + 48)
          && v68 == *(_DWORD *)(v62 + 52))
        {
          if ((*(_BYTE *)(v62 + 72) & 1) == 0)
          {
            OffsetAttribute2 = *(_DWORD *)(v62 + 68);
LABEL_54:
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_release();
            swift_release();
            v82 = *(_DWORD *)(a2 + 8);
            v140 = *(_QWORD *)(a2 + 16);
            v83 = *(_DWORD *)(a2 + 24);
            v84 = *(_QWORD *)(a2 + 32);
            v128 = *(_QWORD *)(a2 + 40);
            v134 = *(_QWORD *)a2;
            v137 = *(_QWORD *)(a2 + 48);
            v85 = *(_QWORD *)(a2 + 56);
            v122 = *(_QWORD *)(a2 + 72);
            v125 = *(_QWORD *)(a2 + 64);
            v120 = *(_DWORD *)(a2 + 80);
            v86 = *(_OWORD *)(a2 + 48);
            v152 = *(_OWORD *)(a2 + 32);
            v153 = v86;
            v154 = *(_OWORD *)(a2 + 64);
            v155 = *(_DWORD *)(a2 + 80);
            v87 = *(_OWORD *)(a2 + 16);
            v150 = *(_OWORD *)a2;
            v151 = v87;
            outlined retain of _ViewInputs(a2);
            v88 = _ViewInputs.geometryTransaction()();
            v89 = swift_getKeyPath();
            v90 = specialized CachedEnvironment.attribute<A>(keyPath:)(v89);
            swift_release();
            if ((*(_BYTE *)(v62 + 81) & 1) == 0
              && (_DWORD)v125 == *(_DWORD *)(v62 + 32)
              && (_DWORD)v122 == *(_DWORD *)(v62 + 36)
              && v90 == *(_DWORD *)(v62 + 40)
              && v82 == *(_DWORD *)(v62 + 44)
              && v88 == *(_DWORD *)(v62 + 48)
              && v83 == *(_DWORD *)(v62 + 52))
            {
              a8 = v129;
              if ((*(_BYTE *)(v62 + 64) & 1) == 0)
              {
                LODWORD(v65) = *(_DWORD *)(v62 + 60);
LABEL_66:
                v66 = v131;
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_release();
                swift_release();
                goto LABEL_67;
              }
            }
            else
            {
              *(_QWORD *)&v150 = v134;
              DWORD2(v150) = v82;
              *(_QWORD *)&v151 = v140;
              *((_QWORD *)&v151 + 1) = __PAIR64__(v88, v83);
              *(_QWORD *)&v152 = v84;
              *((_QWORD *)&v152 + 1) = v128;
              *(_QWORD *)&v153 = v137;
              *((_QWORD *)&v153 + 1) = v85;
              *(_QWORD *)&v154 = v125;
              *((_QWORD *)&v154 + 1) = v122;
              v155 = v120;
              swift_retain();
              swift_retain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              CachedEnvironment.AnimatedFrame.init(inputs:pixelLength:environment:)(&v150, v90, (uint64_t)&v143);
              v91 = v144;
              v92 = v145;
              v93 = v149;
              v94 = v145 | ((unint64_t)v146 << 32);
              v95 = v147 | ((unint64_t)v148 << 32);
              *(_OWORD *)(v62 + 32) = v143;
              *(_OWORD *)(v62 + 48) = v91;
              *(_QWORD *)(v62 + 64) = v94;
              *(_QWORD *)(v62 + 72) = v95;
              *(_WORD *)(v62 + 80) = v93;
              a8 = v129;
              if (v92 != 1)
              {
                v65 = HIDWORD(*((_QWORD *)&v91 + 1));
                goto LABEL_66;
              }
            }
            LODWORD(v65) = AGGraphCreateOffsetAttribute2();
            *(_DWORD *)(v62 + 60) = v65;
            *(_BYTE *)(v62 + 64) = 0;
            goto LABEL_66;
          }
        }
        else
        {
          *(_QWORD *)&v150 = v139;
          DWORD2(v150) = v67;
          *(_QWORD *)&v151 = v136;
          *((_QWORD *)&v151 + 1) = __PAIR64__(v74, v68);
          *(_QWORD *)&v152 = v69;
          *((_QWORD *)&v152 + 1) = v133;
          *(_QWORD *)&v153 = v70;
          *((_QWORD *)&v153 + 1) = v71;
          *(_QWORD *)&v154 = v127;
          *((_QWORD *)&v154 + 1) = v124;
          v155 = v121;
          swift_retain();
          swift_retain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          CachedEnvironment.AnimatedFrame.init(inputs:pixelLength:environment:)(&v150, v76, (uint64_t)&v143);
          OffsetAttribute2 = v146;
          v77 = v147;
          v78 = v149;
          v79 = v145 | ((unint64_t)v146 << 32);
          v80 = v147 | ((unint64_t)v148 << 32);
          v81 = v144;
          *(_OWORD *)(v62 + 32) = v143;
          *(_OWORD *)(v62 + 48) = v81;
          *(_QWORD *)(v62 + 64) = v79;
          *(_QWORD *)(v62 + 72) = v80;
          *(_WORD *)(v62 + 80) = v78;
          if (v77 != 1)
            goto LABEL_54;
        }
        OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
        *(_DWORD *)(v62 + 68) = OffsetAttribute2;
        *(_BYTE *)(v62 + 72) = 0;
        goto LABEL_54;
      }
      ++v60;
      v22 += 2;
      if (v61 == v20)
        goto LABEL_68;
    }
    __break(1u);
LABEL_72:
    outlined retain of _ViewInputs(a2);
    specialized _ViewInputs.subscript.getter();
    outlined release of _ViewInputs(a2);
    if (AGWeakAttributeGetAttribute() == (_DWORD)v17)
      break;
    LODWORD(v143) = v123;
    v100 = (void (*)(__int128 *, _QWORD))Attribute<A>.subscript.modify();
    _DisplayList_StableIdentityScope.pushIdentity(_:)((Swift::UInt32 *)&v143);
    v100(&v150, 0);
LABEL_7:
    v26 = v157;
    swift_beginAccess();
    if ((a1 & 0x20) == 0)
    {
      LODWORD(v118) = *(_DWORD *)(a2 + 64);
      a1 = v130;
      goto LABEL_32;
    }
    v108 = *(_DWORD *)(a2 + 8);
    v27 = *(_DWORD *)(a2 + 24);
    v28 = *(_QWORD *)(a2 + 32);
    v114 = *(_QWORD *)(a2 + 40);
    v116 = *(_QWORD *)a2;
    v110 = *(_QWORD *)(a2 + 48);
    v112 = *(_QWORD *)(a2 + 16);
    v29 = *(_QWORD *)(a2 + 56);
    v104 = *(_QWORD *)(a2 + 72);
    v106 = *(_QWORD *)(a2 + 64);
    v102 = *(_DWORD *)(a2 + 80);
    v30 = *(_OWORD *)(a2 + 48);
    v152 = *(_OWORD *)(a2 + 32);
    v153 = v30;
    v154 = *(_OWORD *)(a2 + 64);
    v155 = *(_DWORD *)(a2 + 80);
    v31 = *(_OWORD *)(a2 + 16);
    v150 = *(_OWORD *)a2;
    v151 = v31;
    outlined retain of _ViewInputs(a2);
    v32 = _ViewInputs.geometryTransaction()();
    v33 = swift_getKeyPath();
    v119 = specialized CachedEnvironment.attribute<A>(keyPath:)(v33);
    swift_release();
    if ((*(_BYTE *)(v26 + 81) & 1) == 0
      && (_DWORD)v106 == *(_DWORD *)(v26 + 32)
      && (_DWORD)v104 == *(_DWORD *)(v26 + 36)
      && v119 == *(_DWORD *)(v26 + 40)
      && v108 == *(_DWORD *)(v26 + 44)
      && v32 == *(_DWORD *)(v26 + 48)
      && v27 == *(_DWORD *)(v26 + 52))
    {
      if ((*(_BYTE *)(v26 + 64) & 1) == 0)
      {
        LODWORD(v118) = *(_DWORD *)(v26 + 60);
        goto LABEL_20;
      }
LABEL_19:
      LODWORD(v118) = AGGraphCreateOffsetAttribute2();
      *(_DWORD *)(v26 + 60) = v118;
      *(_BYTE *)(v26 + 64) = 0;
      goto LABEL_20;
    }
    *(_QWORD *)&v150 = v116;
    DWORD2(v150) = v108;
    *(_QWORD *)&v151 = v112;
    *((_QWORD *)&v151 + 1) = __PAIR64__(v32, v27);
    *(_QWORD *)&v152 = v28;
    *((_QWORD *)&v152 + 1) = v114;
    *(_QWORD *)&v153 = v110;
    *((_QWORD *)&v153 + 1) = v29;
    *(_QWORD *)&v154 = v106;
    *((_QWORD *)&v154 + 1) = v104;
    v155 = v102;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    CachedEnvironment.AnimatedFrame.init(inputs:pixelLength:environment:)(&v150, v119, (uint64_t)&v143);
    v34 = v144;
    v35 = v145;
    v36 = v149;
    v37 = v145 | ((unint64_t)v146 << 32);
    v38 = v147 | ((unint64_t)v148 << 32);
    *(_OWORD *)(v26 + 32) = v143;
    *(_OWORD *)(v26 + 48) = v34;
    *(_QWORD *)(v26 + 64) = v37;
    *(_QWORD *)(v26 + 72) = v38;
    *(_WORD *)(v26 + 80) = v36;
    if (v35 == 1)
      goto LABEL_19;
    v118 = HIDWORD(*((_QWORD *)&v34 + 1));
LABEL_20:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    v109 = *(_QWORD *)a2;
    v107 = *(_DWORD *)(a2 + 8);
    v39 = *(_DWORD *)(a2 + 24);
    v40 = *(_QWORD *)(a2 + 32);
    v115 = *(_QWORD *)(a2 + 40);
    v117 = *(_QWORD *)(a2 + 16);
    v113 = *(_QWORD *)(a2 + 48);
    v41 = *(_QWORD *)(a2 + 56);
    v103 = *(_QWORD *)(a2 + 72);
    v105 = *(_QWORD *)(a2 + 64);
    v101 = *(_DWORD *)(a2 + 80);
    v42 = *(_OWORD *)(a2 + 48);
    v152 = *(_OWORD *)(a2 + 32);
    v153 = v42;
    v154 = *(_OWORD *)(a2 + 64);
    v155 = *(_DWORD *)(a2 + 80);
    v43 = *(_OWORD *)(a2 + 16);
    v150 = *(_OWORD *)a2;
    v151 = v43;
    outlined retain of _ViewInputs(a2);
    v44 = _ViewInputs.geometryTransaction()();
    v45 = swift_getKeyPath();
    v111 = specialized CachedEnvironment.attribute<A>(keyPath:)(v45);
    swift_release();
    if ((*(_BYTE *)(v26 + 81) & 1) == 0
      && (_DWORD)v105 == *(_DWORD *)(v26 + 32)
      && (_DWORD)v103 == *(_DWORD *)(v26 + 36)
      && v111 == *(_DWORD *)(v26 + 40)
      && v107 == *(_DWORD *)(v26 + 44)
      && v44 == *(_DWORD *)(v26 + 48)
      && v39 == *(_DWORD *)(v26 + 52))
    {
      a1 = v130;
      if ((*(_BYTE *)(v26 + 72) & 1) == 0)
        goto LABEL_31;
    }
    else
    {
      *(_QWORD *)&v150 = v109;
      DWORD2(v150) = v107;
      *(_QWORD *)&v151 = v117;
      *((_QWORD *)&v151 + 1) = __PAIR64__(v44, v39);
      *(_QWORD *)&v152 = v40;
      *((_QWORD *)&v152 + 1) = v115;
      *(_QWORD *)&v153 = v113;
      *((_QWORD *)&v153 + 1) = v41;
      *(_QWORD *)&v154 = v105;
      *((_QWORD *)&v154 + 1) = v103;
      v155 = v101;
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      CachedEnvironment.AnimatedFrame.init(inputs:pixelLength:environment:)(&v150, v111, (uint64_t)&v143);
      v46 = v147;
      v47 = v149;
      v48 = v145 | ((unint64_t)v146 << 32);
      v49 = v147 | ((unint64_t)v148 << 32);
      v50 = v144;
      *(_OWORD *)(v26 + 32) = v143;
      *(_OWORD *)(v26 + 48) = v50;
      *(_QWORD *)(v26 + 64) = v48;
      *(_QWORD *)(v26 + 72) = v49;
      *(_WORD *)(v26 + 80) = v47;
      a1 = v130;
      if (v46 != 1)
        goto LABEL_31;
    }
    *(_DWORD *)(v26 + 68) = AGGraphCreateOffsetAttribute2();
    *(_BYTE *)(v26 + 72) = 0;
LABEL_31:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
LABEL_32:
    swift_endAccess();
    v51 = AGGraphCreateOffsetAttribute2();
    v52 = v156;
    v159[0] = v156;
    outlined retain of _ViewInputs(a2);
    outlined retain of _GraphInputs((uint64_t)&v156);
    outlined retain of ViewTransform((uint64_t)v159);
    v53 = specialized find<A>(_:key:)(v52);
    if (v53)
      v54 = *(_BYTE *)(v53 + 72);
    else
      v54 = 0;
    v55 = *(_DWORD *)(a2 + 68);
    outlined release of ViewTransform((uint64_t)v159);
    outlined release of _GraphInputs((uint64_t)&v156);
    v56 = outlined release of _ViewInputs(a2);
    *(_QWORD *)&v150 = __PAIR64__(a1, v123);
    *((_QWORD *)&v150 + 1) = __PAIR64__(v51, v118);
    LODWORD(v151) = v55;
    BYTE4(v151) = v54;
    WORD3(v151) = 0;
    a3(v56);
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, a4, v131, a6, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for LeafDisplayList);
    v126();
    v57 = Attribute.init<A>(body:value:flags:update:)();
    LOBYTE(v150) = 0;
    PreferencesOutputs.subscript.setter(v57, v21, (uint64_t)&protocol witness table for _AnyPreferenceKey<A>, v58);
  }
  __break(1u);
}

uint64_t View._backdropEffect<A>(_:)(void (*a1)(double), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  uint64_t v16;
  char *v17;
  uint64_t v19;

  v19 = a5;
  v8 = *(_QWORD *)(a4 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v10 = (char *)&v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for _BackdropEffect(0, v11, v12, v11);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x24BDAC7A8](v13);
  v17 = (char *)&v19 - v16;
  a1(v15);
  (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v17, v10, a4);
  View.modifier<A>(_:)(v17, a3, v13, v19);
  return (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v17, v13);
}

uint64_t type metadata accessor for _BackdropEffect(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for _BackdropEffect);
}

uint64_t _BackdropEffect.init(backdrop:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 32))(a3, a1);
}

uint64_t _BackdropEffect.backdrop.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8) + 16))(a2, v2);
}

uint64_t _BackdropEffect.backdrop.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 40))(v2, a1);
}

uint64_t (*_BackdropEffect.backdrop.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t static _BackdropEffect._makeView(modifier:inputs:body:)@<X0>(int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(uint64_t *__return_ptr, uint64_t, __int128 *)@<X2>, uint64_t a4@<X4>, uint64_t a5@<X5>, _QWORD *a6@<X8>)
{
  int v8;
  int v9;
  uint64_t v10;
  int v11;
  __int128 v12;
  _QWORD v14[4];
  int v15;
  char v16;
  __int128 v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  int v23;

  v8 = *a1;
  v9 = *(_DWORD *)(a2 + 8);
  v10 = *(_QWORD *)(a2 + 16);
  v11 = *(_DWORD *)(a2 + 80);
  *(_QWORD *)&v17 = *(_QWORD *)a2;
  DWORD2(v17) = v9;
  v18 = v10;
  v12 = *(_OWORD *)(a2 + 40);
  v19 = *(_OWORD *)(a2 + 24);
  v20 = v12;
  v21 = *(_OWORD *)(a2 + 56);
  v22 = *(_QWORD *)(a2 + 72);
  v23 = v11;
  v14[2] = a4;
  v14[3] = a5;
  v15 = v8;
  swift_retain();
  v16 = 1;
  return specialized static _ViewOutputs.makeMaskView(inputs:contentBody:maskBody:outputsFromMask:mayUseForegroundColor:alignment:)(&v17, (void (*)(uint64_t *__return_ptr, __int128 *))partial apply for makeBg #1 <A>(inputs:) in static _BackdropEffect._makeView(modifier:inputs:body:), (uint64_t)v14, 1, 1, 0x100000000, a3, a6);
}

uint64_t makeBg #1 <A>(inputs:) in static _BackdropEffect._makeView(modifier:inputs:body:)@<X0>(uint64_t *a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v7;
  int v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int ShouldRecordTree;
  void (*v18)(int *, uint64_t *, uint64_t, uint64_t);
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  int v38;
  int v39;
  int v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  int v54;
  int v55;
  int v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  int v61;
  int v62;
  int v63;
  int v64;
  int v65;
  int v66;
  uint64_t v67;

  v67 = *MEMORY[0x24BDAC8D0];
  v7 = *a1;
  v8 = *((_DWORD *)a1 + 2);
  v9 = a1[2];
  v10 = *((_DWORD *)a1 + 6);
  v28 = *((_DWORD *)a1 + 9);
  v29 = *((_DWORD *)a1 + 8);
  v11 = a1[5];
  v12 = a1[6];
  v26 = *((_DWORD *)a1 + 15);
  v27 = *((_DWORD *)a1 + 14);
  v24 = *((_DWORD *)a1 + 17);
  v25 = *((_DWORD *)a1 + 16);
  v22 = *((_DWORD *)a1 + 19);
  v23 = *((_DWORD *)a1 + 18);
  v20 = *((_DWORD *)a1 + 7);
  v21 = *((_DWORD *)a1 + 20);
  v33 = a3;
  v34 = a4;
  LODWORD(v51) = a2;
  v13 = type metadata accessor for _BackdropEffect(255, a3, a4, a4);
  type metadata accessor for _GraphValue(0, v13, v14, v15);
  _GraphValue.subscript.getter((void (*)(uint64_t))partial apply for closure #1 in makeBg #1 <A>(inputs:) in static _BackdropEffect._makeView(modifier:inputs:body:), a3, &v32);
  v16 = v32;
  ShouldRecordTree = AGSubgraphShouldRecordTree();
  if (ShouldRecordTree)
    AGSubgraphBeginTreeElement();
  v51 = v7;
  v52 = v8;
  v53 = v9;
  v54 = v10;
  v55 = v20;
  v57 = v28;
  v58 = v11;
  v59 = v12;
  v60 = v27;
  v61 = v26;
  v62 = v25;
  v63 = v24;
  v64 = v23;
  v65 = v22;
  v66 = v21;
  v31 = v16;
  v35 = v7;
  v36 = v8;
  v37 = v9;
  v38 = v10;
  v39 = v20;
  v40 = 0;
  v41 = v28;
  v42 = v11;
  v43 = v12;
  v44 = v27;
  v45 = v26;
  v46 = v25;
  v47 = v24;
  v48 = v23;
  v49 = v22;
  v50 = v21;
  v18 = *(void (**)(int *, uint64_t *, uint64_t, uint64_t))(a4 + 24);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v18(&v31, &v35, a3, a4);
  v56 = v29;
  if (ShouldRecordTree)
  {
    specialized static _ViewDebug.reallyWrap<A>(_:value:inputs:)(a5, (uint64_t)&v51);
    AGSubgraphEndTreeElement();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

uint64_t partial apply for makeBg #1 <A>(inputs:) in static _BackdropEffect._makeView(modifier:inputs:body:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return makeBg #1 <A>(inputs:) in static _BackdropEffect._makeView(modifier:inputs:body:)(a1, *(_DWORD *)(v2 + 32), *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), a2);
}

uint64_t closure #1 in makeBg #1 <A>(inputs:) in static _BackdropEffect._makeView(modifier:inputs:body:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[6];

  v9[2] = type metadata accessor for _BackdropEffect(0, a2, a3, a4);
  v9[3] = a2;
  v6 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(a1, (uint64_t)partial apply for closure #1 in static PointerOffset.of(_:), (uint64_t)v9, a2, MEMORY[0x24BEE4078], v6, MEMORY[0x24BEE40A8], v7);
  return v9[5];
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance _BackdropEffect<A>@<X0>(int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(uint64_t *__return_ptr, uint64_t, __int128 *)@<X2>, uint64_t a4@<X4>, _QWORD *a5@<X8>)
{
  return static _BackdropEffect._makeView(modifier:inputs:body:)(a1, a2, a3, *(_QWORD *)(a4 + 16), *(_QWORD *)(a4 + 24), a5);
}

uint64_t static _BackdropEffectPlaceholder._makeView(view:inputs:)@<X0>(uint64_t *a1@<X1>, _QWORD *a2@<X8>)
{
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v12;
  int v13;
  int ShouldRecordTree;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  unsigned int OffsetAttribute2;
  uint64_t v22;
  int v23;
  uint64_t v24;
  int v25;
  int v26;
  int v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  int v41;
  int v42;
  int v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  uint64_t v54;

  v54 = *MEMORY[0x24BDAC8D0];
  v20 = *a1;
  v2 = *((_DWORD *)a1 + 2);
  v4 = *((_DWORD *)a1 + 6);
  v3 = *((_DWORD *)a1 + 7);
  v5 = *((_DWORD *)a1 + 9);
  v15 = *((_DWORD *)a1 + 8);
  v17 = a1[5];
  v18 = a1[2];
  v16 = a1[6];
  v7 = *((_DWORD *)a1 + 14);
  v6 = *((_DWORD *)a1 + 15);
  v8 = *((_DWORD *)a1 + 17);
  v9 = *((_DWORD *)a1 + 18);
  v12 = *((_DWORD *)a1 + 19);
  v13 = *((_DWORD *)a1 + 16);
  v10 = *((_DWORD *)a1 + 20);
  OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
  ShouldRecordTree = AGSubgraphShouldRecordTree();
  if (ShouldRecordTree)
    AGSubgraphBeginTreeElement();
  v22 = v20;
  v23 = v2;
  v24 = v18;
  v25 = v4;
  v26 = v3;
  v28 = v5;
  v29 = v17;
  v30 = v16;
  v31 = v7;
  v32 = v6;
  v33 = v13;
  v34 = v8;
  v35 = v9;
  v36 = v12;
  v37 = v10;
  v38 = v20;
  v39 = v2;
  v40 = v18;
  v41 = v4;
  v42 = v3;
  v43 = 0;
  v44 = v5;
  v45 = v17;
  v46 = v16;
  v47 = v7;
  v48 = v6;
  v49 = v13;
  v50 = v8;
  v51 = v9;
  v52 = v12;
  v53 = v10;
  swift_retain_n();
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  specialized static RendererLeafView.makeLeafView(view:inputs:)(OffsetAttribute2, (uint64_t)&v38, (void (*)(uint64_t))protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase, &lazy cache variable for type metadata for LeafDisplayList<BackdropView>, (uint64_t)&type metadata for BackdropView, (uint64_t)&protocol witness table for BackdropView, (void (*)(void))lazy protocol witness table accessor for type LeafDisplayList<BackdropView> and conformance LeafDisplayList<A>, a2, (void (*)(uint64_t))protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase, &lazy cache variable for type metadata for LeafResponderFilter<BackdropView>, (uint64_t)&protocol witness table for BackdropView, (void (*)(void))lazy protocol witness table accessor for type LeafResponderFilter<BackdropView> and conformance LeafResponderFilter<A>);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  v27 = v15;
  if ((ShouldRecordTree & 1) != 0)
  {
    specialized static _ViewDebug.reallyWrap<A>(_:value:inputs:)(a2, &v22);
    AGSubgraphEndTreeElement();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    return swift_release();
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    return swift_release();
  }
}

uint64_t getEnumTagSinglePayload for _BackdropEffect(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  char v8;
  int v9;
  unsigned int v10;
  int v11;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = a2 - v5;
  if (a2 <= v5)
    goto LABEL_18;
  v7 = *(_QWORD *)(v4 + 64);
  v8 = 8 * v7;
  if (v7 <= 3)
  {
    v10 = ((v6 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      v9 = *(_DWORD *)(a1 + v7);
      if (!v9)
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      v9 = *(unsigned __int16 *)(a1 + v7);
      if (!*(_WORD *)(a1 + v7))
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_18:
      if (v5)
        return (*(uint64_t (**)(void))(v4 + 48))();
      return 0;
    }
  }
  v9 = *(unsigned __int8 *)(a1 + v7);
  if (!*(_BYTE *)(a1 + v7))
    goto LABEL_18;
LABEL_11:
  v11 = (v9 - 1) << v8;
  if (v7 > 3)
    v11 = 0;
  if (!(_DWORD)v7)
    return v5 + v11 + 1;
  if (v7 > 3)
    LODWORD(v7) = 4;
  return ((uint64_t (*)(void))((char *)&loc_2350E1A70 + 4 * byte_2352C8CB0[(v7 - 1)]))();
}

void storeEnumTagSinglePayload for _BackdropEffect(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  BOOL v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = a3 >= v7;
  v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      v13 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v13))
      {
        v11 = 4u;
      }
      else if (v13 >= 0x100)
      {
        v11 = 2;
      }
      else
      {
        v11 = v13 > 1;
      }
    }
    else
    {
      v11 = 1u;
    }
  }
  else
  {
    v11 = 0;
  }
  if (v7 < a2)
  {
    v12 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        v14 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v14;
          *((_BYTE *)a1 + 2) = BYTE2(v14);
        }
        else if ((_DWORD)v8 == 2)
        {
          *a1 = v14;
        }
        else
        {
          *(_BYTE *)a1 = v14;
        }
      }
    }
    else
    {
      bzero(a1, *(_QWORD *)(v6 + 64));
      *(_DWORD *)a1 = v12;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X11 }
}

ValueMetadata *type metadata accessor for _BackdropEffectPlaceholder()
{
  return &type metadata for _BackdropEffectPlaceholder;
}

uint64_t sub_2350E1C80(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[2];

  v4 = *a1;
  v5 = a1[2];
  v6 = type metadata accessor for _BackdropEffect(255, a1[1], a1[3], a4);
  v8 = type metadata accessor for ModifiedContent(255, v4, v6, v7);
  v10[0] = v5;
  v10[1] = &protocol witness table for _BackdropEffect<A>;
  return MEMORY[0x23B7C9C04]("I{:\x1B̧\t", v8, v10);
}

unint64_t lazy protocol witness table accessor for type LeafResponderFilter<ColorView> and conformance LeafResponderFilter<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type LeafResponderFilter<ColorView> and conformance LeafResponderFilter<A>;
  if (!lazy protocol witness table cache variable for type LeafResponderFilter<ColorView> and conformance LeafResponderFilter<A>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for LeafResponderFilter<ColorView>, (uint64_t)&type metadata for ColorView, (uint64_t)&protocol witness table for ColorView, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for LeafResponderFilter);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for LeafResponderFilter<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LeafResponderFilter<ColorView> and conformance LeafResponderFilter<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type LeafDisplayList<ColorView> and conformance LeafDisplayList<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type LeafDisplayList<ColorView> and conformance LeafDisplayList<A>;
  if (!lazy protocol witness table cache variable for type LeafDisplayList<ColorView> and conformance LeafDisplayList<A>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for LeafDisplayList<ColorView>, (uint64_t)&type metadata for ColorView, (uint64_t)&protocol witness table for ColorView, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for LeafDisplayList);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for LeafDisplayList<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LeafDisplayList<ColorView> and conformance LeafDisplayList<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type LeafResponderFilter<BackdropView> and conformance LeafResponderFilter<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type LeafResponderFilter<BackdropView> and conformance LeafResponderFilter<A>;
  if (!lazy protocol witness table cache variable for type LeafResponderFilter<BackdropView> and conformance LeafResponderFilter<A>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for LeafResponderFilter<BackdropView>, (uint64_t)&type metadata for BackdropView, (uint64_t)&protocol witness table for BackdropView, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for LeafResponderFilter);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for LeafResponderFilter<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LeafResponderFilter<BackdropView> and conformance LeafResponderFilter<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type LeafDisplayList<BackdropView> and conformance LeafDisplayList<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type LeafDisplayList<BackdropView> and conformance LeafDisplayList<A>;
  if (!lazy protocol witness table cache variable for type LeafDisplayList<BackdropView> and conformance LeafDisplayList<A>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for LeafDisplayList<BackdropView>, (uint64_t)&type metadata for BackdropView, (uint64_t)&protocol witness table for BackdropView, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for LeafDisplayList);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for LeafDisplayList<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LeafDisplayList<BackdropView> and conformance LeafDisplayList<A>);
  }
  return result;
}

uint64_t partial apply for closure #1 in makeBg #1 <A>(inputs:) in static _BackdropEffect._makeView(modifier:inputs:body:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return closure #1 in makeBg #1 <A>(inputs:) in static _BackdropEffect._makeView(modifier:inputs:body:)(a1, *(_QWORD *)(v4 + 16), *(_QWORD *)(v4 + 24), a4);
}

uint64_t protocol witness for static Animatable._makeAnimatable(value:inputs:) in conformance CGPoint(uint64_t a1, _OWORD *a2)
{
  __int128 v2;
  _OWORD v4[3];

  v2 = a2[1];
  v4[0] = *a2;
  v4[1] = v2;
  v4[2] = a2[2];
  return specialized static Animatable._makeAnimatable(value:inputs:)(a1, (uint64_t)v4);
}

uint64_t static Animatable._makeAnimatable(value:inputs:)(int *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  _DWORD *v10;
  int v11;
  uint64_t result;
  BOOL v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  int v17;
  int v18;
  uint64_t v19;
  _BYTE v20[28];
  int v21;

  v8 = type metadata accessor for AnimatableAttribute(0, a3, a4, a4);
  MEMORY[0x24BDAC7A8](v8);
  v10 = &v20[-v9];
  v11 = *(_DWORD *)(a2 + 36);
  result = swift_getAssociatedTypeWitness();
  if (*(_QWORD *)(*(_QWORD *)(result - 8) + 64))
    v13 = (v11 & 1) == 0;
  else
    v13 = 0;
  if (v13)
  {
    v15 = *(_DWORD *)(a2 + 24);
    v14 = *(unsigned int *)(a2 + 28);
    v16 = *(_QWORD *)(a2 + 16);
    v17 = *(_DWORD *)(a2 + 8);
    v18 = *a1;
    swift_beginAccess();
    AnimatableAttribute.init(source:phase:time:transaction:environment:)(v18, v15, v17, v14, *(_DWORD *)(v16 + 16), a3, a4, v10);
    v19 = MEMORY[0x23B7C9C04](&protocol conformance descriptor for AnimatableAttribute<A>, v8);
    _GraphValue.init<A>(_:)((uint64_t)v10, a3, v8, v19, &v21);
    *a1 = v21;
    AGGraphGetFlags();
    return AGGraphSetFlags();
  }
  return result;
}

uint64_t (*protocol witness for Animatable.animatableData.modify in conformance IgnoresAutomaticPaddingLayout())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t (*Animatable<>.animatableData.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t protocol witness for static Animatable._makeAnimatable(value:inputs:) in conformance LinearGradient._Paint(uint64_t a1, _OWORD *a2)
{
  __int128 v2;
  _OWORD v4[3];

  v2 = a2[1];
  v4[0] = *a2;
  v4[1] = v2;
  v4[2] = a2[2];
  return specialized static Animatable._makeAnimatable(value:inputs:)(a1, (uint64_t)v4);
}

uint64_t protocol witness for static Animatable._makeAnimatable(value:inputs:) in conformance RadialGradient._Paint(uint64_t a1, _OWORD *a2)
{
  __int128 v2;
  _OWORD v4[3];

  v2 = a2[1];
  v4[0] = *a2;
  v4[1] = v2;
  v4[2] = a2[2];
  return specialized static Animatable._makeAnimatable(value:inputs:)(a1, (uint64_t)v4);
}

uint64_t protocol witness for static Animatable._makeAnimatable(value:inputs:) in conformance EllipticalGradient._Paint(uint64_t a1, _OWORD *a2)
{
  __int128 v2;
  _OWORD v4[3];

  v2 = a2[1];
  v4[0] = *a2;
  v4[1] = v2;
  v4[2] = a2[2];
  return specialized static Animatable._makeAnimatable(value:inputs:)(a1, (uint64_t)v4);
}

uint64_t protocol witness for static Animatable._makeAnimatable(value:inputs:) in conformance AngularGradient._Paint(uint64_t a1, _OWORD *a2)
{
  __int128 v2;
  _OWORD v4[3];

  v2 = a2[1];
  v4[0] = *a2;
  v4[1] = v2;
  v4[2] = a2[2];
  return specialized static Animatable._makeAnimatable(value:inputs:)(a1, (uint64_t)v4);
}

uint64_t static Animatable.makeAnimatable(value:inputs:)(unsigned int *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  int v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  unsigned int v14;

  v4 = *a2;
  v5 = *((_DWORD *)a2 + 2);
  v6 = a2[2];
  v7 = a2[5];
  v14 = *a1;
  v9 = v4;
  v10 = v5;
  v11 = v6;
  v12 = *(_OWORD *)(a2 + 3);
  v13 = v7;
  (*(void (**)(unsigned int *, uint64_t *))(a4 + 48))(&v14, &v9);
  return v14;
}

uint64_t protocol witness for static Animatable._makeAnimatable(value:inputs:) in conformance _OffsetEffect(uint64_t a1, _OWORD *a2)
{
  __int128 v2;
  _OWORD v4[3];

  v2 = a2[1];
  v4[0] = *a2;
  v4[1] = v2;
  v4[2] = a2[2];
  return specialized static Animatable._makeAnimatable(value:inputs:)(a1, (uint64_t)v4);
}

uint64_t protocol witness for static Animatable._makeAnimatable(value:inputs:) in conformance _ColorMonochromeEffect._Resolved(uint64_t a1, _OWORD *a2)
{
  __int128 v2;
  _OWORD v4[3];

  v2 = a2[1];
  v4[0] = *a2;
  v4[1] = v2;
  v4[2] = a2[2];
  return specialized static Animatable._makeAnimatable(value:inputs:)(a1, (uint64_t)v4);
}

uint64_t protocol witness for static Animatable._makeAnimatable(value:inputs:) in conformance ViewOrigin(uint64_t a1, _OWORD *a2)
{
  __int128 v2;
  _OWORD v4[3];

  v2 = a2[1];
  v4[0] = *a2;
  v4[1] = v2;
  v4[2] = a2[2];
  return specialized static Animatable._makeAnimatable(value:inputs:)(a1, (uint64_t)v4);
}

uint64_t protocol witness for static Animatable._makeAnimatable(value:inputs:) in conformance ViewSize(uint64_t a1, _OWORD *a2)
{
  __int128 v2;
  _OWORD v4[3];

  v2 = a2[1];
  v4[0] = *a2;
  v4[1] = v2;
  v4[2] = a2[2];
  return specialized static Animatable._makeAnimatable(value:inputs:)(a1, (uint64_t)v4);
}

uint64_t protocol witness for static Animatable._makeAnimatable(value:inputs:) in conformance ViewFrame(uint64_t a1, _OWORD *a2)
{
  __int128 v2;
  _OWORD v4[3];

  v2 = a2[1];
  v4[0] = *a2;
  v4[1] = v2;
  v4[2] = a2[2];
  return specialized static Animatable._makeAnimatable(value:inputs:)(a1, (uint64_t)v4);
}

uint64_t protocol witness for static Animatable._makeAnimatable(value:inputs:) in conformance _RotationEffect(uint64_t a1, _OWORD *a2)
{
  __int128 v2;
  _OWORD v4[3];

  v2 = a2[1];
  v4[0] = *a2;
  v4[1] = v2;
  v4[2] = a2[2];
  return specialized static Animatable._makeAnimatable(value:inputs:)(a1, (uint64_t)v4);
}

uint64_t protocol witness for static Animatable._makeAnimatable(value:inputs:) in conformance ResolvedGradient(uint64_t a1, _OWORD *a2)
{
  __int128 v2;
  _OWORD v4[3];

  v2 = a2[1];
  v4[0] = *a2;
  v4[1] = v2;
  v4[2] = a2[2];
  return specialized static Animatable._makeAnimatable(value:inputs:)(a1, (uint64_t)v4);
}

uint64_t protocol witness for static Animatable._makeAnimatable(value:inputs:) in conformance Color.Resolved(uint64_t a1, _OWORD *a2)
{
  __int128 v2;
  _OWORD v4[3];

  v2 = a2[1];
  v4[0] = *a2;
  v4[1] = v2;
  v4[2] = a2[2];
  return specialized static Animatable._makeAnimatable(value:inputs:)(a1, (uint64_t)v4);
}

uint64_t protocol witness for static Animatable._makeAnimatable(value:inputs:) in conformance Color.ResolvedVibrant(uint64_t a1, _OWORD *a2)
{
  __int128 v2;
  _OWORD v4[3];

  v2 = a2[1];
  v4[0] = *a2;
  v4[1] = v2;
  v4[2] = a2[2];
  return specialized static Animatable._makeAnimatable(value:inputs:)(a1, (uint64_t)v4);
}

uint64_t (*protocol witness for Animatable.animatableData.modify in conformance PrivacyRedactionViewModifier.Transform<A>.PrivacyEffect(_QWORD *a1))()
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = Animatable<>.animatableData.modify();
  return protocol witness for Animatable.animatableData.modify in conformance LinearGradient._Paint;
}

uint64_t protocol witness for static Animatable._makeAnimatable(value:inputs:) in conformance _ContrastEffect(uint64_t a1, _OWORD *a2)
{
  __int128 v2;
  _OWORD v4[3];

  v2 = a2[1];
  v4[0] = *a2;
  v4[1] = v2;
  v4[2] = a2[2];
  return specialized static Animatable._makeAnimatable(value:inputs:)(a1, (uint64_t)v4);
}

uint64_t protocol witness for static Animatable._makeAnimatable(value:inputs:) in conformance CGSize(uint64_t a1, _OWORD *a2)
{
  __int128 v2;
  _OWORD v4[3];

  v2 = a2[1];
  v4[0] = *a2;
  v4[1] = v2;
  v4[2] = a2[2];
  return specialized static Animatable._makeAnimatable(value:inputs:)(a1, (uint64_t)v4);
}

uint64_t protocol witness for static Animatable._makeAnimatable(value:inputs:) in conformance _BlurEffect(uint64_t a1, _OWORD *a2)
{
  __int128 v2;
  _OWORD v4[3];

  v2 = a2[1];
  v4[0] = *a2;
  v4[1] = v2;
  v4[2] = a2[2];
  return specialized static Animatable._makeAnimatable(value:inputs:)(a1, (uint64_t)v4);
}

uint64_t protocol witness for static Animatable._makeAnimatable(value:inputs:) in conformance _GrayscaleEffect(uint64_t a1, _OWORD *a2)
{
  __int128 v2;
  _OWORD v4[3];

  v2 = a2[1];
  v4[0] = *a2;
  v4[1] = v2;
  v4[2] = a2[2];
  return specialized static Animatable._makeAnimatable(value:inputs:)(a1, (uint64_t)v4);
}

uint64_t protocol witness for static Animatable._makeAnimatable(value:inputs:) in conformance _Rotation3DEffect(uint64_t a1, _OWORD *a2)
{
  __int128 v2;
  _OWORD v4[3];

  v2 = a2[1];
  v4[0] = *a2;
  v4[1] = v2;
  v4[2] = a2[2];
  return specialized static Animatable._makeAnimatable(value:inputs:)(a1, (uint64_t)v4);
}

uint64_t protocol witness for static Animatable._makeAnimatable(value:inputs:) in conformance _OpacityEffect(uint64_t a1, _OWORD *a2)
{
  __int128 v2;
  _OWORD v4[3];

  v2 = a2[1];
  v4[0] = *a2;
  v4[1] = v2;
  v4[2] = a2[2];
  return specialized static Animatable._makeAnimatable(value:inputs:)(a1, (uint64_t)v4);
}

uint64_t protocol witness for static Animatable._makeAnimatable(value:inputs:) in conformance OpacityRendererEffect(uint64_t a1, _OWORD *a2)
{
  __int128 v2;
  _OWORD v4[3];

  v2 = a2[1];
  v4[0] = *a2;
  v4[1] = v2;
  v4[2] = a2[2];
  return specialized static Animatable._makeAnimatable(value:inputs:)(a1, (uint64_t)v4);
}

uint64_t protocol witness for static Animatable._makeAnimatable(value:inputs:) in conformance _ShadowEffect._Resolved(uint64_t a1, _OWORD *a2)
{
  __int128 v2;
  _OWORD v4[3];

  v2 = a2[1];
  v4[0] = *a2;
  v4[1] = v2;
  v4[2] = a2[2];
  return specialized static Animatable._makeAnimatable(value:inputs:)(a1, (uint64_t)v4);
}

uint64_t protocol witness for static Animatable._makeAnimatable(value:inputs:) in conformance _BrightnessEffect(uint64_t a1, _OWORD *a2)
{
  __int128 v2;
  _OWORD v4[3];

  v2 = a2[1];
  v4[0] = *a2;
  v4[1] = v2;
  v4[2] = a2[2];
  return specialized static Animatable._makeAnimatable(value:inputs:)(a1, (uint64_t)v4);
}

uint64_t protocol witness for static Animatable._makeAnimatable(value:inputs:) in conformance UnitRect(uint64_t a1, _OWORD *a2)
{
  __int128 v2;
  _OWORD v4[3];

  v2 = a2[1];
  v4[0] = *a2;
  v4[1] = v2;
  v4[2] = a2[2];
  return specialized static Animatable._makeAnimatable(value:inputs:)(a1, (uint64_t)v4);
}

uint64_t protocol witness for static Animatable._makeAnimatable(value:inputs:) in conformance CombinedVisualEffect<A, B>(int *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return static Animatable._makeAnimatable(value:inputs:)(a1, a2, a3, a4);
}

uint64_t protocol witness for static Animatable._makeAnimatable(value:inputs:) in conformance VariableBlurStyle(uint64_t a1, _OWORD *a2)
{
  __int128 v2;
  _OWORD v4[3];

  v2 = a2[1];
  v4[0] = *a2;
  v4[1] = v2;
  v4[2] = a2[2];
  return specialized static Animatable._makeAnimatable(value:inputs:)(a1, (uint64_t)v4);
}

uint64_t protocol witness for static Animatable._makeAnimatable(value:inputs:) in conformance _ShapeStyle_Pack(uint64_t a1, _OWORD *a2)
{
  __int128 v2;
  _OWORD v4[3];

  v2 = a2[1];
  v4[0] = *a2;
  v4[1] = v2;
  v4[2] = a2[2];
  return specialized static Animatable._makeAnimatable(value:inputs:)(a1, (uint64_t)v4);
}

uint64_t protocol witness for static Animatable._makeAnimatable(value:inputs:) in conformance _ShapeStyle_Pack.Style(uint64_t a1, _OWORD *a2)
{
  __int128 v2;
  _OWORD v4[3];

  v2 = a2[1];
  v4[0] = *a2;
  v4[1] = v2;
  v4[2] = a2[2];
  return specialized static Animatable._makeAnimatable(value:inputs:)(a1, (uint64_t)v4);
}

uint64_t protocol witness for static Animatable._makeAnimatable(value:inputs:) in conformance _ShapeStyle_Pack.Fill(uint64_t a1, _OWORD *a2)
{
  __int128 v2;
  _OWORD v4[3];

  v2 = a2[1];
  v4[0] = *a2;
  v4[1] = v2;
  v4[2] = a2[2];
  return specialized static Animatable._makeAnimatable(value:inputs:)(a1, (uint64_t)v4);
}

uint64_t protocol witness for static Animatable._makeAnimatable(value:inputs:) in conformance _ShapeStyle_Pack.Effect(uint64_t a1, _OWORD *a2)
{
  __int128 v2;
  _OWORD v4[3];

  v2 = a2[1];
  v4[0] = *a2;
  v4[1] = v2;
  v4[2] = a2[2];
  return specialized static Animatable._makeAnimatable(value:inputs:)(a1, (uint64_t)v4);
}

uint64_t protocol witness for static Animatable._makeAnimatable(value:inputs:) in conformance _ShapeStyle_Pack.Effect.Kind(uint64_t a1, _OWORD *a2)
{
  __int128 v2;
  _OWORD v4[3];

  v2 = a2[1];
  v4[0] = *a2;
  v4[1] = v2;
  v4[2] = a2[2];
  return specialized static Animatable._makeAnimatable(value:inputs:)(a1, (uint64_t)v4);
}

uint64_t protocol witness for static Animatable._makeAnimatable(value:inputs:) in conformance BlurStyle(uint64_t a1, _OWORD *a2)
{
  __int128 v2;
  _OWORD v4[3];

  v2 = a2[1];
  v4[0] = *a2;
  v4[1] = v2;
  v4[2] = a2[2];
  return specialized static Animatable._makeAnimatable(value:inputs:)(a1, (uint64_t)v4);
}

uint64_t protocol witness for static Animatable._makeAnimatable(value:inputs:) in conformance Shader.ResolvedShader(uint64_t a1, _OWORD *a2)
{
  __int128 v2;
  _OWORD v4[3];

  v2 = a2[1];
  v4[0] = *a2;
  v4[1] = v2;
  v4[2] = a2[2];
  return specialized static Animatable._makeAnimatable(value:inputs:)(a1, (uint64_t)v4);
}

_DWORD *protocol witness for static Animatable._makeAnimatable(value:inputs:) in conformance AnyLayout(_DWORD *a1, _OWORD *a2)
{
  __int128 v2;
  _OWORD v4[3];

  v2 = a2[1];
  v4[0] = *a2;
  v4[1] = v2;
  v4[2] = a2[2];
  return specialized static Animatable._makeAnimatable(value:inputs:)(a1, (uint64_t)v4);
}

uint64_t protocol witness for static Animatable._makeAnimatable(value:inputs:) in conformance ResolvedShadowStyle(uint64_t a1, _OWORD *a2)
{
  __int128 v2;
  _OWORD v4[3];

  v2 = a2[1];
  v4[0] = *a2;
  v4[1] = v2;
  v4[2] = a2[2];
  return specialized static Animatable._makeAnimatable(value:inputs:)(a1, (uint64_t)v4);
}

uint64_t protocol witness for static Animatable._makeAnimatable(value:inputs:) in conformance StrokeStyle(uint64_t a1, _OWORD *a2)
{
  __int128 v2;
  _OWORD v4[3];

  v2 = a2[1];
  v4[0] = *a2;
  v4[1] = v2;
  v4[2] = a2[2];
  return specialized static Animatable._makeAnimatable(value:inputs:)(a1, (uint64_t)v4);
}

uint64_t protocol witness for static Animatable._makeAnimatable(value:inputs:) in conformance UnitPoint(uint64_t a1, _OWORD *a2)
{
  __int128 v2;
  _OWORD v4[3];

  v2 = a2[1];
  v4[0] = *a2;
  v4[1] = v2;
  v4[2] = a2[2];
  return specialized static Animatable._makeAnimatable(value:inputs:)(a1, (uint64_t)v4);
}

uint64_t protocol witness for static Animatable._makeAnimatable(value:inputs:) in conformance SummarySymbol(uint64_t a1, _OWORD *a2)
{
  __int128 v2;
  _OWORD v4[3];

  v2 = a2[1];
  v4[0] = *a2;
  v4[1] = v2;
  v4[2] = a2[2];
  return specialized static Animatable._makeAnimatable(value:inputs:)(a1, (uint64_t)v4);
}

_DWORD *protocol witness for static Animatable._makeAnimatable(value:inputs:) in conformance AnyShape(_DWORD *a1, _OWORD *a2)
{
  __int128 v2;
  _OWORD v4[3];

  v2 = a2[1];
  v4[0] = *a2;
  v4[1] = v2;
  v4[2] = a2[2];
  return specialized static Animatable._makeAnimatable(value:inputs:)(a1, (uint64_t)v4);
}

uint64_t protocol witness for static Animatable._makeAnimatable(value:inputs:) in conformance RoundedRectangle(uint64_t a1, _OWORD *a2)
{
  __int128 v2;
  _OWORD v4[3];

  v2 = a2[1];
  v4[0] = *a2;
  v4[1] = v2;
  v4[2] = a2[2];
  return specialized static Animatable._makeAnimatable(value:inputs:)(a1, (uint64_t)v4);
}

uint64_t protocol witness for static Animatable._makeAnimatable(value:inputs:) in conformance UnevenRoundedRectangle(uint64_t a1, _OWORD *a2)
{
  __int128 v2;
  _OWORD v4[3];

  v2 = a2[1];
  v4[0] = *a2;
  v4[1] = v2;
  v4[2] = a2[2];
  return specialized static Animatable._makeAnimatable(value:inputs:)(a1, (uint64_t)v4);
}

uint64_t protocol witness for static Animatable._makeAnimatable(value:inputs:) in conformance Rectangle._Inset(uint64_t a1, _OWORD *a2)
{
  __int128 v2;
  _OWORD v4[3];

  v2 = a2[1];
  v4[0] = *a2;
  v4[1] = v2;
  v4[2] = a2[2];
  return specialized static Animatable._makeAnimatable(value:inputs:)(a1, (uint64_t)v4);
}

uint64_t protocol witness for static Animatable._makeAnimatable(value:inputs:) in conformance RoundedRectangle._Inset(uint64_t a1, _OWORD *a2)
{
  __int128 v2;
  _OWORD v4[3];

  v2 = a2[1];
  v4[0] = *a2;
  v4[1] = v2;
  v4[2] = a2[2];
  return specialized static Animatable._makeAnimatable(value:inputs:)(a1, (uint64_t)v4);
}

uint64_t protocol witness for static Animatable._makeAnimatable(value:inputs:) in conformance UnevenRoundedRectangle._Inset(uint64_t a1, _OWORD *a2)
{
  __int128 v2;
  _OWORD v4[3];

  v2 = a2[1];
  v4[0] = *a2;
  v4[1] = v2;
  v4[2] = a2[2];
  return specialized static Animatable._makeAnimatable(value:inputs:)(a1, (uint64_t)v4);
}

uint64_t protocol witness for static Animatable._makeAnimatable(value:inputs:) in conformance Capsule._Inset(uint64_t a1, _OWORD *a2)
{
  __int128 v2;
  _OWORD v4[3];

  v2 = a2[1];
  v4[0] = *a2;
  v4[1] = v2;
  v4[2] = a2[2];
  return specialized static Animatable._makeAnimatable(value:inputs:)(a1, (uint64_t)v4);
}

uint64_t protocol witness for static Animatable._makeAnimatable(value:inputs:) in conformance Ellipse._Inset(uint64_t a1, _OWORD *a2)
{
  __int128 v2;
  _OWORD v4[3];

  v2 = a2[1];
  v4[0] = *a2;
  v4[1] = v2;
  v4[2] = a2[2];
  return specialized static Animatable._makeAnimatable(value:inputs:)(a1, (uint64_t)v4);
}

uint64_t protocol witness for static Animatable._makeAnimatable(value:inputs:) in conformance Circle._Inset(uint64_t a1, _OWORD *a2)
{
  __int128 v2;
  _OWORD v4[3];

  v2 = a2[1];
  v4[0] = *a2;
  v4[1] = v2;
  v4[2] = a2[2];
  return specialized static Animatable._makeAnimatable(value:inputs:)(a1, (uint64_t)v4);
}

uint64_t protocol witness for static Animatable._makeAnimatable(value:inputs:) in conformance EdgeInsets(uint64_t a1, _OWORD *a2)
{
  __int128 v2;
  _OWORD v4[3];

  v2 = a2[1];
  v4[0] = *a2;
  v4[1] = v2;
  v4[2] = a2[2];
  return specialized static Animatable._makeAnimatable(value:inputs:)(a1, (uint64_t)v4);
}

uint64_t protocol witness for static Animatable._makeAnimatable(value:inputs:) in conformance ContainerRelativeShape._Inset(uint64_t a1, _OWORD *a2)
{
  __int128 v2;
  _OWORD v4[3];

  v2 = a2[1];
  v4[0] = *a2;
  v4[1] = v2;
  v4[2] = a2[2];
  return specialized static Animatable._makeAnimatable(value:inputs:)(a1, (uint64_t)v4);
}

uint64_t Animatable<>.animatableData.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 16))(a2, v2);
}

uint64_t key path setter for Animatable<>.animatableData : <A>A(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  double v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v10;

  v4 = *(_QWORD *)(a4 + a3 - 24);
  v5 = MEMORY[0x24BDAC7A8](a1);
  v7 = (char *)&v10 - v6;
  (*(void (**)(char *, double))(v8 + 16))((char *)&v10 - v6, v5);
  return Animatable<>.animatableData.setter((uint64_t)v7, v4);
}

uint64_t Animatable<>.animatableData.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;

  v5 = *(_QWORD *)(a2 - 8);
  (*(void (**)(uint64_t))(v5 + 8))(v2);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 32))(v2, a1, a2);
}

void (*Animatable<>.animatableData.modify(_QWORD *a1, uint64_t a2))(_QWORD **a1, char a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t v6;
  size_t v7;
  void *v8;
  void (*v9)(void);

  v5 = malloc(0x30uLL);
  *a1 = v5;
  *v5 = a2;
  v5[1] = v2;
  v6 = *(_QWORD *)(a2 - 8);
  v5[2] = v6;
  v7 = *(_QWORD *)(v6 + 64);
  v5[3] = malloc(v7);
  v8 = malloc(v7);
  v9 = *(void (**)(void))(v6 + 16);
  v5[4] = v8;
  v5[5] = v9;
  v9();
  return Animatable<>.animatableData.modify;
}

void Animatable<>.animatableData.modify(_QWORD **a1, char a2)
{
  _QWORD *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void (*v8)(void *, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = *a1;
  if ((a2 & 1) != 0)
  {
    v3 = (void *)v2[4];
    v5 = v2[2];
    v4 = (void *)v2[3];
    v7 = *v2;
    v6 = (void *)v2[1];
    ((void (*)(void *, void *, _QWORD))v2[5])(v4, v3, *v2);
    v8 = *(void (**)(void *, uint64_t))(v5 + 8);
    v8(v6, v7);
    (*(void (**)(void *, void *, uint64_t))(v5 + 32))(v6, v4, v7);
    v8(v3, v7);
  }
  else
  {
    v4 = (void *)v2[3];
    v3 = (void *)v2[4];
    v9 = v2[1];
    v10 = v2[2];
    v11 = *v2;
    (*(void (**)(uint64_t, _QWORD))(v10 + 8))(v9, *v2);
    (*(void (**)(uint64_t, void *, uint64_t))(v10 + 32))(v9, v3, v11);
  }
  free(v3);
  free(v4);
  free(v2);
}

uint64_t Attribute<A>.animated(inputs:)(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  int v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  unsigned int v17;

  v7 = *a1;
  v8 = *((_DWORD *)a1 + 2);
  v9 = a1[2];
  v10 = a1[5];
  _GraphValue.init(_:)(a2, &v17);
  v12 = v7;
  v13 = v8;
  v14 = v9;
  v15 = *(_OWORD *)(a1 + 3);
  v16 = v10;
  (*(void (**)(unsigned int *, uint64_t *, uint64_t, uint64_t))(a4 + 48))(&v17, &v12, a3, a4);
  return v17;
}

double EmptyAnimatableData.magnitudeSquared.getter()
{
  return 0.0;
}

uint64_t static EmptyAnimatableData.== infix(_:_:)()
{
  return 1;
}

uint64_t protocol witness for static Animatable._makeAnimatable(value:inputs:) in conformance Double(uint64_t a1, _OWORD *a2)
{
  __int128 v2;
  _OWORD v4[3];

  v2 = a2[1];
  v4[0] = *a2;
  v4[1] = v2;
  v4[2] = a2[2];
  return specialized static Animatable._makeAnimatable(value:inputs:)(a1, (uint64_t)v4);
}

uint64_t protocol witness for static Animatable._makeAnimatable(value:inputs:) in conformance CGFloat(uint64_t a1, _OWORD *a2)
{
  __int128 v2;
  _OWORD v4[3];

  v2 = a2[1];
  v4[0] = *a2;
  v4[1] = v2;
  v4[2] = a2[2];
  return specialized static Animatable._makeAnimatable(value:inputs:)(a1, (uint64_t)v4);
}

uint64_t protocol witness for static Animatable._makeAnimatable(value:inputs:) in conformance MeshGradient._Paint(uint64_t a1, _OWORD *a2)
{
  __int128 v2;
  _OWORD v4[3];

  v2 = a2[1];
  v4[0] = *a2;
  v4[1] = v2;
  v4[2] = a2[2];
  return specialized static Animatable._makeAnimatable(value:inputs:)(a1, (uint64_t)v4);
}

uint64_t protocol witness for static Animatable._makeAnimatable(value:inputs:) in conformance _SaturationEffect(uint64_t a1, _OWORD *a2)
{
  __int128 v2;
  _OWORD v4[3];

  v2 = a2[1];
  v4[0] = *a2;
  v4[1] = v2;
  v4[2] = a2[2];
  return specialized static Animatable._makeAnimatable(value:inputs:)(a1, (uint64_t)v4);
}

uint64_t protocol witness for static Animatable._makeAnimatable(value:inputs:) in conformance Angle(uint64_t a1, _OWORD *a2)
{
  __int128 v2;
  _OWORD v4[3];

  v2 = a2[1];
  v4[0] = *a2;
  v4[1] = v2;
  v4[2] = a2[2];
  return specialized static Animatable._makeAnimatable(value:inputs:)(a1, (uint64_t)v4);
}

uint64_t protocol witness for static Animatable._makeAnimatable(value:inputs:) in conformance _ColorMultiplyEffect._Resolved(uint64_t a1, _OWORD *a2)
{
  __int128 v2;
  _OWORD v4[3];

  v2 = a2[1];
  v4[0] = *a2;
  v4[1] = v2;
  v4[2] = a2[2];
  return specialized static Animatable._makeAnimatable(value:inputs:)(a1, (uint64_t)v4);
}

uint64_t protocol witness for static Animatable._makeAnimatable(value:inputs:) in conformance ColorView(uint64_t a1, _OWORD *a2)
{
  __int128 v2;
  _OWORD v4[3];

  v2 = a2[1];
  v4[0] = *a2;
  v4[1] = v2;
  v4[2] = a2[2];
  return specialized static Animatable._makeAnimatable(value:inputs:)(a1, (uint64_t)v4);
}

uint64_t protocol witness for static Animatable._makeAnimatable(value:inputs:) in conformance CGRect(uint64_t a1, _OWORD *a2)
{
  __int128 v2;
  _OWORD v4[3];

  v2 = a2[1];
  v4[0] = *a2;
  v4[1] = v2;
  v4[2] = a2[2];
  return specialized static Animatable._makeAnimatable(value:inputs:)(a1, (uint64_t)v4);
}

uint64_t protocol witness for static Animatable._makeAnimatable(value:inputs:) in conformance _ScaleEffect(uint64_t a1, _OWORD *a2)
{
  __int128 v2;
  _OWORD v4[3];

  v2 = a2[1];
  v4[0] = *a2;
  v4[1] = v2;
  v4[2] = a2[2];
  return specialized static Animatable._makeAnimatable(value:inputs:)(a1, (uint64_t)v4);
}

uint64_t protocol witness for static Animatable._makeAnimatable(value:inputs:) in conformance RectangleCornerRadii(uint64_t a1, _OWORD *a2)
{
  __int128 v2;
  _OWORD v4[3];

  v2 = a2[1];
  v4[0] = *a2;
  v4[1] = v2;
  v4[2] = a2[2];
  return specialized static Animatable._makeAnimatable(value:inputs:)(a1, (uint64_t)v4);
}

uint64_t protocol witness for static Animatable._makeAnimatable(value:inputs:) in conformance _HueRotationEffect(uint64_t a1, _OWORD *a2)
{
  __int128 v2;
  _OWORD v4[3];

  v2 = a2[1];
  v4[0] = *a2;
  v4[1] = v2;
  v4[2] = a2[2];
  return specialized static Animatable._makeAnimatable(value:inputs:)(a1, (uint64_t)v4);
}

unint64_t instantiation function for generic protocol witness table for EmptyAnimatableData(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type EmptyAnimatableData and conformance EmptyAnimatableData();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_2350E2F58@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  return Animatable<>.animatableData.getter(*(_QWORD *)(a2 + a1 - 24), a3);
}

uint64_t sub_2350E2F84()
{
  return 24;
}

__n128 sub_2350E2F90(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t sub_2350E2FA8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _ViewInputs.base.modify(*(_QWORD *)(a4 + a3 - 16), *(_QWORD *)(a4 + a3 - 8));
}

uint64_t sub_2350E2FD0()
{
  return 16;
}

__n128 sub_2350E2FDC(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t dispatch thunk of Animatable.animatableData.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of Animatable.animatableData.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 32))();
}

uint64_t dispatch thunk of Animatable.animatableData.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 40))();
}

uint64_t dispatch thunk of static Animatable._makeAnimatable(value:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 48))();
}

ValueMetadata *type metadata accessor for EmptyAnimatableData()
{
  return &type metadata for EmptyAnimatableData;
}

void MeshGradient._Paint.animatableData.getter(float32x4_t *a1@<X8>)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  int64_t v6;
  char *v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  _QWORD *v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  char *v35;
  char *v36;
  char *v37;
  char *v38;
  char *v39;
  char *v40;
  char *v41;
  char *v42;
  char *v43;
  char *v44;
  int64_t v45;
  __int128 v46;
  uint64_t v47;
  _QWORD *v48;
  unint64_t v49;
  unint64_t v50;
  int64_t v51;
  unint64_t v52;
  int64_t v53;
  char *v54;
  char *v55;
  int64_t v56;
  uint64_t v57;
  __int128 v58;
  int32x4_t v59;
  float *v60;
  float32x4_t v61;
  int32x4_t v62;
  float32x2_t v63;
  float32x2_t v64;
  float32x2_t v65;
  int8x16_t v66;
  int8x16_t v67;
  float32x2_t v68;
  int8x8_t v69;
  unint64_t v70;
  unint64_t v71;
  float32x4_t v72;
  int8x16_t v73;
  float32x4_t v74;
  float32x4_t v75;
  __int128 v76;
  __int128 v77;
  int8x16_t v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  float v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  float v90;
  int32x4_t v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  int8x16_t v100;
  int8x16_t v101;
  int32x4_t v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  float32x4_t v117;
  uint64_t v118;

  v3 = *(_QWORD **)v1;
  v4 = *(_QWORD *)(v1 + 16);
  v5 = *(_QWORD *)(*(_QWORD *)v1 + 16);
  v78 = *(int8x16_t *)(v1 + 24);
  if ((*(_BYTE *)(v1 + 8) & 1) == 0)
  {
    if (v5 + 0x4000000000000000 >= 0)
    {
      v45 = 2 * v5;
      swift_bridgeObjectRetain();
      v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v45, 0, MEMORY[0x24BEE4AF8]);
      v47 = v3[2];
      if (v47)
      {
        v48 = v3 + 4;
        do
        {
          *(_QWORD *)&v46 = *v48;
          v50 = *((_QWORD *)v7 + 2);
          v49 = *((_QWORD *)v7 + 3);
          v51 = v49 >> 1;
          v52 = v50 + 1;
          if (v49 >> 1 <= v50)
          {
            v113 = v46;
            v54 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v49 > 1), v50 + 1, 1, v7);
            v46 = v113;
            v7 = v54;
            v49 = *((_QWORD *)v54 + 3);
            v51 = v49 >> 1;
          }
          *((_QWORD *)v7 + 2) = v52;
          *(_DWORD *)&v7[4 * v50 + 32] = v46;
          v53 = v50 + 2;
          if (v51 < v53)
          {
            v114 = v46;
            v55 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v49 > 1), v53, 1, v7);
            v46 = v114;
            v7 = v55;
          }
          *((_QWORD *)v7 + 2) = v53;
          *(_DWORD *)&v7[4 * v52 + 32] = DWORD1(v46);
          ++v48;
          --v47;
        }
        while (v47);
      }
      goto LABEL_35;
    }
LABEL_51:
    __break(1u);
    return;
  }
  v6 = 10 * v5;
  if ((unsigned __int128)(v5 * (__int128)10) >> 64 != (10 * v5) >> 63)
  {
    __break(1u);
    goto LABEL_51;
  }
  swift_bridgeObjectRetain();
  v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v6, 0, MEMORY[0x24BEE4AF8]);
  v13 = v3[2];
  if (v13)
  {
    v14 = v3 + 8;
    do
    {
      *(_QWORD *)&v12 = *(v14 - 4);
      *(_QWORD *)&v11 = *(v14 - 3);
      *(_QWORD *)&v10 = *(v14 - 2);
      *(_QWORD *)&v9 = *(v14 - 1);
      *(_QWORD *)&v8 = *v14;
      v16 = *((_QWORD *)v7 + 2);
      v15 = *((_QWORD *)v7 + 3);
      v17 = v15 >> 1;
      v18 = v16 + 1;
      if (v15 >> 1 <= v16)
      {
        v92 = v9;
        v103 = v8;
        v79 = v11;
        v84 = v10;
        v76 = v12;
        v35 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v15 > 1), v16 + 1, 1, v7);
        v12 = v76;
        v11 = v79;
        v10 = v84;
        v9 = v92;
        v8 = v103;
        v7 = v35;
        v15 = *((_QWORD *)v35 + 3);
        v17 = v15 >> 1;
      }
      *((_QWORD *)v7 + 2) = v18;
      *(_DWORD *)&v7[4 * v16 + 32] = v12;
      v19 = v16 + 2;
      if (v17 < (uint64_t)(v16 + 2))
      {
        v93 = v9;
        v104 = v8;
        v80 = v11;
        v85 = v10;
        v77 = v12;
        v36 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v15 > 1), v16 + 2, 1, v7);
        v12 = v77;
        v11 = v80;
        v10 = v85;
        v9 = v93;
        v8 = v104;
        v7 = v36;
      }
      *((_QWORD *)v7 + 2) = v19;
      *(_DWORD *)&v7[4 * v18 + 32] = DWORD1(v12);
      v20 = *((_QWORD *)v7 + 3);
      v21 = v16 + 3;
      if ((uint64_t)(v16 + 3) > (uint64_t)(v20 >> 1))
      {
        v94 = v9;
        v105 = v8;
        v81 = v11;
        v86 = v10;
        v37 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v20 > 1), v16 + 3, 1, v7);
        v11 = v81;
        v10 = v86;
        v9 = v94;
        v8 = v105;
        v7 = v37;
      }
      *((_QWORD *)v7 + 2) = v21;
      *(_DWORD *)&v7[4 * v19 + 32] = v11;
      v22 = *((_QWORD *)v7 + 3);
      v23 = v16 + 4;
      if ((uint64_t)(v16 + 4) > (uint64_t)(v22 >> 1))
      {
        v95 = v9;
        v106 = v8;
        v82 = v11;
        v87 = v10;
        v38 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v22 > 1), v16 + 4, 1, v7);
        v11 = v82;
        v10 = v87;
        v9 = v95;
        v8 = v106;
        v7 = v38;
      }
      *((_QWORD *)v7 + 2) = v23;
      *(_DWORD *)&v7[4 * v21 + 32] = DWORD1(v11);
      v24 = *((_QWORD *)v7 + 3);
      v25 = v16 + 5;
      if ((uint64_t)(v16 + 5) > (uint64_t)(v24 >> 1))
      {
        v96 = v9;
        v107 = v8;
        v88 = v10;
        v39 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v24 > 1), v16 + 5, 1, v7);
        v10 = v88;
        v9 = v96;
        v8 = v107;
        v7 = v39;
      }
      *((_QWORD *)v7 + 2) = v25;
      *(_DWORD *)&v7[4 * v23 + 32] = v10;
      v26 = *((_QWORD *)v7 + 3);
      v27 = v16 + 6;
      if ((uint64_t)(v16 + 6) > (uint64_t)(v26 >> 1))
      {
        v97 = v9;
        v108 = v8;
        v89 = v10;
        v40 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v26 > 1), v16 + 6, 1, v7);
        v10 = v89;
        v9 = v97;
        v8 = v108;
        v7 = v40;
      }
      *((_QWORD *)v7 + 2) = v27;
      *(_DWORD *)&v7[4 * v25 + 32] = DWORD1(v10);
      v28 = *((_QWORD *)v7 + 3);
      v29 = v16 + 7;
      if ((uint64_t)(v16 + 7) > (uint64_t)(v28 >> 1))
      {
        v98 = v9;
        v109 = v8;
        v41 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v28 > 1), v16 + 7, 1, v7);
        v9 = v98;
        v8 = v109;
        v7 = v41;
      }
      *((_QWORD *)v7 + 2) = v29;
      *(_DWORD *)&v7[4 * v27 + 32] = v9;
      v30 = *((_QWORD *)v7 + 3);
      v31 = v16 + 8;
      if ((uint64_t)(v16 + 8) > (uint64_t)(v30 >> 1))
      {
        v99 = v9;
        v110 = v8;
        v42 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v30 > 1), v16 + 8, 1, v7);
        v9 = v99;
        v8 = v110;
        v7 = v42;
      }
      *((_QWORD *)v7 + 2) = v31;
      *(_DWORD *)&v7[4 * v29 + 32] = DWORD1(v9);
      v32 = *((_QWORD *)v7 + 3);
      v33 = v16 + 9;
      if ((uint64_t)(v16 + 9) > (uint64_t)(v32 >> 1))
      {
        v111 = v8;
        v43 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v32 > 1), v16 + 9, 1, v7);
        v8 = v111;
        v7 = v43;
      }
      *((_QWORD *)v7 + 2) = v33;
      *(_DWORD *)&v7[4 * v31 + 32] = v8;
      v34 = *((_QWORD *)v7 + 3);
      if ((uint64_t)(v16 + 10) > (uint64_t)(v34 >> 1))
      {
        v112 = v8;
        v44 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v34 > 1), v16 + 10, 1, v7);
        v8 = v112;
        v7 = v44;
      }
      *((_QWORD *)v7 + 2) = v16 + 10;
      *(_DWORD *)&v7[4 * v33 + 32] = DWORD1(v8);
      v14 += 5;
      --v13;
    }
    while (v13);
  }
LABEL_35:
  swift_bridgeObjectRelease();
  v56 = *(_QWORD *)(v4 + 16);
  v57 = MEMORY[0x24BEE4AF8];
  if (v56)
  {
    v118 = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v56, 0);
    v57 = v118;
    if (one-time initialization token for legacyInterpolation != -1)
      swift_once();
    swift_beginAccess();
    v60 = (float *)(v4 + 44);
    v61.i64[0] = 0x4300000043000000;
    v61.i64[1] = 0x4300000043000000;
    do
    {
      v59.i64[0] = *(_QWORD *)(v60 - 3);
      *(float *)&v58 = *v60;
      v62 = v59;
      v62.i32[0] = *(__int32 *)(v60 - 1);
      if ((static Color.Resolved.legacyInterpolation & 1) == 0)
      {
        *(float32x2_t *)v61.f32 = vmul_f32(*(float32x2_t *)v59.i8, (float32x2_t)0x3F094D173ED30EB1);
        v115 = v58;
        v61.f32[0] = vaddv_f32(*(float32x2_t *)v61.f32) + (float)(*(v60 - 1) * 0.051446);
        v100 = (int8x16_t)v61;
        v63 = (float32x2_t)vrev64_s32((int32x2_t)vmul_f32(*(float32x2_t *)v59.i8, (float32x2_t)0x3E903D743E58FD3BLL));
        v64 = vmul_f32(*(float32x2_t *)v59.i8, (float32x2_t)0x3F2E42533DB4D7ECLL);
        v65 = vmul_n_f32((float32x2_t)0x3DDBF2F03F214649, *(float *)v62.i32);
        *(float *)v66.i32 = powf(fabsf(v61.f32[0]), 0.33333);
        v67.i64[0] = 0x8000000080000000;
        v67.i64[1] = 0x8000000080000000;
        v101 = vbslq_s8(v67, v66, v100);
        v68 = vadd_f32(vadd_f32(v63, v64), v65);
        *(float32x2_t *)v66.i8 = vabs_f32(v68);
        v83 = *(float *)v66.i32;
        v90 = powf(*(float *)&v66.i32[1], 0.33333);
        *(float *)v69.i32 = powf(v83, 0.33333);
        v61.i64[0] = 0x4300000043000000;
        v61.i64[1] = 0x4300000043000000;
        v59 = (int32x4_t)v101;
        *(float *)&v69.i32[1] = v90;
        v58 = v115;
        *(float *)v59.i32 = *(float *)&v115 * *(float *)v101.i32;
        *(float32x2_t *)v62.i8 = vmul_n_f32((float32x2_t)vbsl_s8((int8x8_t)0x8000000080000000, v69, (int8x8_t)v68), *(float *)&v115);
      }
      v118 = v57;
      v71 = *(_QWORD *)(v57 + 16);
      v70 = *(_QWORD *)(v57 + 24);
      if (v71 >= v70 >> 1)
      {
        v102 = v59;
        v116 = v58;
        v91 = v62;
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v70 > 1, v71 + 1, 1);
        v62 = v91;
        v59 = v102;
        v58 = v116;
        v61.i64[0] = 0x4300000043000000;
        v61.i64[1] = 0x4300000043000000;
        v57 = v118;
      }
      v72 = (float32x4_t)vuzp1q_s32(v59, v62);
      v72.i32[1] = v62.i32[1];
      v72.i32[3] = v58;
      *(_QWORD *)(v57 + 16) = v71 + 1;
      *(float32x4_t *)(v57 + 16 * v71 + 32) = vmulq_f32(v72, v61);
      v60 += 4;
      --v56;
    }
    while (v56);
  }
  if (one-time initialization token for legacyInterpolation != -1)
    swift_once();
  swift_beginAccess();
  if ((static Color.Resolved.legacyInterpolation & 1) != 0)
  {
    v74 = (float32x4_t)v78;
  }
  else
  {
    ResolvedGradient.ColorSpace.convertIn(_:)(v117.f32, v78, *(float *)&v78.i32[1], v78.u32[2], *(float *)&v78.i32[3], v73);
    v74 = v117;
  }
  v75.i64[0] = 0x4300000043000000;
  v75.i64[1] = 0x4300000043000000;
  a1->i64[0] = (uint64_t)v7;
  a1->i64[1] = v57;
  a1[1] = vmulq_f32(v74, v75);
}

uint64_t MeshGradient.resolvePaint(in:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  char v13;
  int32x2_t v14;
  int32x2_t v15;
  int32x2_t v16;
  int32x2_t v17;
  uint64_t v18;
  uint64_t (*v19)(_QWORD **);
  uint64_t result;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  char v26;
  uint64_t v27;
  int v28;
  _QWORD *v29;
  uint64_t v30;

  v9 = *v2;
  v10 = v2[1];
  v11 = *v2 * v10;
  if ((unsigned __int128)(*v2 * (__int128)v10) >> 64 != v11 >> 63)
  {
    __break(1u);
LABEL_18:
    v7 = specialized _ArrayBuffer._consumeAndCreateNew()(v7);
    goto LABEL_4;
  }
  v12 = v2;
  v5 = *a1;
  v6 = a1[1];
  v27 = v2[2];
  v26 = *((_BYTE *)v2 + 24);
  v2 = (uint64_t *)v2[6];
  v28 = *((unsigned __int8 *)v12 + 56);
  v3 = *((unsigned __int8 *)v12 + 57);
  v4 = v12[4];
  v13 = *((_BYTE *)v12 + 40);
  swift_bridgeObjectRetain();
  if ((v13 & 1) != 0)
    goto LABEL_5;
  v14.i32[0] = 0;
  v15.i32[0] = 0;
  v16.i32[0] = 0;
  v17.i32[0] = 0;
  v7 = (_QWORD *)specialized Array.init(repeating:count:)(v11, v14, v15, v16, v17);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    goto LABEL_18;
LABEL_4:
  v18 = v7[2];
  v29 = v7 + 4;
  v30 = v18;
  closure #1 in MeshGradient.resolvePaint(in:)(&v29, v11, v4, v5, v6);
  swift_bridgeObjectRelease();
  v4 = (uint64_t)v7;
LABEL_5:
  v29 = (_QWORD *)v5;
  v30 = v6;
  v19 = *(uint64_t (**)(_QWORD **))(*v2 + 104);
  swift_bridgeObjectRetain();
  result = v19(&v29);
  if (v3)
  {
    if (v3 == 1)
    {
      if ((v28 & 1) != 0)
        v25 = 17;
      else
        v25 = 1;
    }
    else if (v28)
    {
      v25 = 19;
    }
    else
    {
      v25 = 3;
    }
  }
  else if ((v28 & 1) != 0)
  {
    v25 = 16;
  }
  else
  {
    v25 = 0;
  }
  *(_QWORD *)a2 = v27;
  *(_BYTE *)(a2 + 8) = v26;
  *(_QWORD *)(a2 + 16) = v4;
  *(_DWORD *)(a2 + 24) = v21;
  *(_DWORD *)(a2 + 28) = v22;
  *(_DWORD *)(a2 + 32) = v23;
  *(_DWORD *)(a2 + 36) = v24;
  *(_QWORD *)(a2 + 40) = v9;
  *(_QWORD *)(a2 + 48) = v10;
  *(_DWORD *)(a2 + 56) = v25;
  return result;
}

uint64_t MeshGradient.withResolvedColors(in:_:)(uint64_t *a1, uint64_t (*a2)(uint64_t, uint64_t))
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t isStackAllocationSafe;
  uint64_t v12;
  uint64_t v13;
  _QWORD v14[2];

  v14[1] = *MEMORY[0x24BDAC8D0];
  v4 = v2[4];
  if ((v2[5] & 1) != 0)
  {
    v5 = *(_QWORD *)(v4 + 16);
    swift_bridgeObjectRetain();
    a2(v4 + 32, v5);
    return swift_bridgeObjectRelease();
  }
  v7 = v2[1];
  v8 = *v2 * v7;
  if ((unsigned __int128)(*v2 * (__int128)v7) >> 64 != v8 >> 63)
  {
    __break(1u);
    goto LABEL_11;
  }
  if (v8 < 0)
  {
LABEL_11:
    __break(1u);
LABEL_12:
    __break(1u);
  }
  if ((unint64_t)(v8 + 0x800000000000000) >> 60)
    goto LABEL_12;
  v9 = *a1;
  v10 = a1[1];
  swift_retain();
  swift_bridgeObjectRetain();
  isStackAllocationSafe = swift_retain();
  if (16 * v8 > 1024)
  {
    isStackAllocationSafe = swift_stdlib_isStackAllocationSafe();
    if (!(_DWORD)isStackAllocationSafe)
    {
      v13 = swift_slowAlloc();
      closure #1 in MeshGradient.withResolvedColors(in:_:)(v13, v8, v8, v4, v9, v10, a2);
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
      JUMPOUT(0x23B7C9D54);
    }
  }
  MEMORY[0x24BDAC7A8](isStackAllocationSafe);
  closure #1 in MeshGradient.withResolvedColors(in:_:)((uint64_t)v14 - v12, v8, v8, v4, v9, v10, a2);
  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

double MeshGradient.BezierPoint.position.getter()
{
  uint64_t v0;

  return *(double *)v0;
}

void MeshGradient.BezierPoint.position.setter(double a1)
{
  double *v1;

  *v1 = a1;
}

uint64_t (*MeshGradient.BezierPoint.position.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

double MeshGradient.BezierPoint.leadingControlPoint.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 8);
}

void MeshGradient.BezierPoint.leadingControlPoint.setter(double a1)
{
  uint64_t v1;

  *(double *)(v1 + 8) = a1;
}

uint64_t (*MeshGradient.BezierPoint.leadingControlPoint.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

double MeshGradient.BezierPoint.topControlPoint.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 16);
}

void MeshGradient.BezierPoint.topControlPoint.setter(double a1)
{
  uint64_t v1;

  *(double *)(v1 + 16) = a1;
}

uint64_t (*MeshGradient.BezierPoint.topControlPoint.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

double MeshGradient.BezierPoint.trailingControlPoint.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 24);
}

void MeshGradient.BezierPoint.trailingControlPoint.setter(double a1)
{
  uint64_t v1;

  *(double *)(v1 + 24) = a1;
}

uint64_t (*MeshGradient.BezierPoint.trailingControlPoint.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

double MeshGradient.BezierPoint.bottomControlPoint.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 32);
}

void MeshGradient.BezierPoint.bottomControlPoint.setter(double a1)
{
  uint64_t v1;

  *(double *)(v1 + 32) = a1;
}

uint64_t (*MeshGradient.BezierPoint.bottomControlPoint.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance MeshGradient.BezierPoint(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  _OWORD v5[2];
  uint64_t v6;
  _OWORD v7[2];
  uint64_t v8;

  v2 = *(_OWORD *)(a1 + 16);
  v5[0] = *(_OWORD *)a1;
  v5[1] = v2;
  v6 = *(_QWORD *)(a1 + 32);
  v3 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v3;
  v8 = *(_QWORD *)(a2 + 32);
  return specialized static MeshGradient.BezierPoint.== infix(_:_:)((float32x2_t *)v5, (float32x2_t *)v7) & 1;
}

uint64_t MeshGradient.width.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t MeshGradient.width.setter(uint64_t result)
{
  _QWORD *v1;

  *v1 = result;
  return result;
}

uint64_t (*MeshGradient.width.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t MeshGradient.height.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 8);
}

uint64_t MeshGradient.height.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 8) = result;
  return result;
}

uint64_t (*MeshGradient.height.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t MeshGradient.locations.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  char v2;

  v2 = *(_BYTE *)(v1 + 24);
  *(_QWORD *)a1 = *(_QWORD *)(v1 + 16);
  *(_BYTE *)(a1 + 8) = v2;
  return swift_bridgeObjectRetain();
}

uint64_t MeshGradient.locations.setter(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t result;

  v2 = *a1;
  v3 = *((_BYTE *)a1 + 8);
  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 16) = v2;
  *(_BYTE *)(v1 + 24) = v3;
  return result;
}

uint64_t (*MeshGradient.locations.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t MeshGradient.colors.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  char v2;

  v2 = *(_BYTE *)(v1 + 40);
  *(_QWORD *)a1 = *(_QWORD *)(v1 + 32);
  *(_BYTE *)(a1 + 8) = v2;
  return swift_bridgeObjectRetain();
}

uint64_t MeshGradient.colors.setter(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t result;

  v2 = *a1;
  v3 = *((_BYTE *)a1 + 8);
  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 32) = v2;
  *(_BYTE *)(v1 + 40) = v3;
  return result;
}

uint64_t (*MeshGradient.colors.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t MeshGradient.background.getter()
{
  return swift_retain();
}

uint64_t MeshGradient.background.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_release();
  *(_QWORD *)(v1 + 48) = a1;
  return result;
}

uint64_t (*MeshGradient.background.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t MeshGradient.smoothsColors.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 56);
}

uint64_t MeshGradient.smoothsColors.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 56) = result;
  return result;
}

uint64_t (*MeshGradient.smoothsColors.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

void MeshGradient.colorSpace.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 57);
}

_BYTE *MeshGradient.colorSpace.setter(_BYTE *result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 57) = *result;
  return result;
}

uint64_t (*MeshGradient.colorSpace.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t MeshGradient.init(width:height:locations:colors:background:smoothsColors:colorSpace:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X4>, char a6@<W5>, char *a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v8;
  char v9;
  uint64_t v10;
  char v11;
  char v12;

  v8 = *a3;
  v9 = *((_BYTE *)a3 + 8);
  v10 = *a4;
  v11 = *((_BYTE *)a4 + 8);
  v12 = *a7;
  *(_QWORD *)a8 = result;
  *(_QWORD *)(a8 + 8) = a2;
  *(_QWORD *)(a8 + 16) = v8;
  *(_BYTE *)(a8 + 24) = v9;
  *(_QWORD *)(a8 + 32) = v10;
  *(_BYTE *)(a8 + 40) = v11;
  *(_QWORD *)(a8 + 48) = a5;
  *(_BYTE *)(a8 + 56) = a6;
  *(_BYTE *)(a8 + 57) = v12;
  return result;
}

uint64_t MeshGradient._Paint.locations.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  char v2;

  v2 = *(_BYTE *)(v1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)v1;
  *(_BYTE *)(a1 + 8) = v2;
  return swift_bridgeObjectRetain();
}

uint64_t MeshGradient._Paint.locations.setter(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t result;

  v2 = *a1;
  v3 = *((_BYTE *)a1 + 8);
  result = swift_bridgeObjectRelease();
  *(_QWORD *)v1 = v2;
  *(_BYTE *)(v1 + 8) = v3;
  return result;
}

uint64_t (*MeshGradient._Paint.locations.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t MeshGradient._Paint.colors.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t MeshGradient._Paint.colors.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 16) = a1;
  return result;
}

uint64_t (*MeshGradient._Paint.colors.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

float MeshGradient._Paint.background.getter()
{
  uint64_t v0;

  return *(float *)(v0 + 24);
}

void MeshGradient._Paint.background.setter(float a1, float a2, float a3, float a4)
{
  float *v4;

  v4[6] = a1;
  v4[7] = a2;
  v4[8] = a3;
  v4[9] = a4;
}

uint64_t (*MeshGradient._Paint.background.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t MeshGradient._Paint.width.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 40);
}

uint64_t MeshGradient._Paint.width.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 40) = result;
  return result;
}

uint64_t (*MeshGradient._Paint.width.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t MeshGradient._Paint.height.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 48);
}

uint64_t MeshGradient._Paint.height.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 48) = result;
  return result;
}

uint64_t (*MeshGradient._Paint.height.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t MeshGradient._Paint.flags.getter()
{
  uint64_t v0;

  return *(unsigned int *)(v0 + 56);
}

uint64_t MeshGradient._Paint.flags.setter(uint64_t result)
{
  uint64_t v1;

  *(_DWORD *)(v1 + 56) = result;
  return result;
}

uint64_t (*MeshGradient._Paint.flags.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t MeshGradient._Paint.init(locations:colors:background:width:height:flags:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, int a5@<W4>, uint64_t a6@<X8>, float a7@<S0>, float a8@<S1>, float a9@<S2>, float a10@<S3>)
{
  char v10;

  v10 = *(_BYTE *)(result + 8);
  *(_QWORD *)a6 = *(_QWORD *)result;
  *(_BYTE *)(a6 + 8) = v10;
  *(_QWORD *)(a6 + 16) = a2;
  *(float *)(a6 + 24) = a7;
  *(float *)(a6 + 28) = a8;
  *(float *)(a6 + 32) = a9;
  *(float *)(a6 + 36) = a10;
  *(_QWORD *)(a6 + 40) = a3;
  *(_QWORD *)(a6 + 48) = a4;
  *(_DWORD *)(a6 + 56) = a5;
  return result;
}

_QWORD *closure #1 in MeshGradient.resolvePaint(in:)(_QWORD *result, int64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v5;
  int64_t v6;
  uint64_t *v9;
  float *v10;
  uint64_t v11;
  float (*v12)(_QWORD *);
  float v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  _QWORD v20[2];

  v5 = *(_QWORD *)(a3 + 16);
  if ((uint64_t)v5 >= a2)
    v6 = a2;
  else
    v6 = *(_QWORD *)(a3 + 16);
  if (v6 < 0)
  {
    __break(1u);
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  if (!v6)
    return result;
  if (!v5)
    goto LABEL_12;
  if (v6 - 1 >= v5)
  {
LABEL_13:
    __break(1u);
    return result;
  }
  v9 = (uint64_t *)(a3 + 32);
  v10 = (float *)(*result + 8);
  do
  {
    v11 = *v9++;
    v20[0] = a4;
    v20[1] = a5;
    v12 = *(float (**)(_QWORD *))(*(_QWORD *)v11 + 104);
    swift_retain();
    v13 = v12(v20);
    v15 = v14;
    v17 = v16;
    v19 = v18;
    result = (_QWORD *)swift_release();
    *(v10 - 2) = v13;
    *((_DWORD *)v10 - 1) = v15;
    *(_DWORD *)v10 = v17;
    *((_DWORD *)v10 + 1) = v19;
    v10 += 4;
    --v6;
  }
  while (v6);
  return result;
}

uint64_t specialized closure #1 in MeshGradient.withResolvedColors(in:_:)(uint64_t result, uint64_t a2, int64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  int64_t v9;
  uint64_t *v14;
  float *v15;
  uint64_t v16;
  float (*v17)(uint64_t *);
  float v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  _BYTE v28[16];
  uint64_t v29[2];
  uint64_t v30;

  v30 = result;
  v8 = *(_QWORD *)(a4 + 16);
  if ((uint64_t)v8 >= a3)
    v9 = a3;
  else
    v9 = *(_QWORD *)(a4 + 16);
  if (v9 < 0)
  {
    __break(1u);
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  if (!v9)
    goto LABEL_10;
  if (!v8)
    goto LABEL_23;
  if (v9 - 1 >= v8)
  {
LABEL_24:
    __break(1u);
    return result;
  }
  v14 = (uint64_t *)(a4 + 32);
  v15 = (float *)(v30 + 8);
  do
  {
    v16 = *v14++;
    v29[0] = a5;
    v29[1] = a6;
    v17 = *(float (**)(uint64_t *))(*(_QWORD *)v16 + 104);
    swift_retain();
    v18 = v17(v29);
    v20 = v19;
    v22 = v21;
    v24 = v23;
    swift_release();
    *(v15 - 2) = v18;
    *((_DWORD *)v15 - 1) = v20;
    *(_DWORD *)v15 = v22;
    *((_DWORD *)v15 + 1) = v24;
    v15 += 4;
    --v9;
  }
  while (v9);
LABEL_10:
  outlined init with take of MeshGradient.Locations((uint64_t *)(a8 + 16), (uint64_t)v29);
  outlined init with take of MeshGradient.Locations(v29, (uint64_t)v28);
  if (*(_BYTE *)(a8 + 57))
  {
    if (*(_BYTE *)(a8 + 57) == 1)
    {
      if ((*(_BYTE *)(a8 + 56) & 1) != 0)
        v25 = 17;
      else
        v25 = 1;
    }
    else if ((*(_BYTE *)(a8 + 56) & 1) != 0)
    {
      v25 = 19;
    }
    else
    {
      v25 = 3;
    }
  }
  else if ((*(_BYTE *)(a8 + 56) & 1) != 0)
  {
    v25 = 16;
  }
  else
  {
    v25 = 0;
  }
  v26 = *(_QWORD *)a8;
  v27 = *(_QWORD *)(a8 + 8);
  outlined retain of LinearGradient((uint64_t)v29);
  GraphicsContext.Storage.Shared.setMeshGradient(locations:colors:width:height:background:flags:)(v28, v30, a2, v26, v27, v25);
  outlined release of LinearGradient((uint64_t)v29);
  swift_release();
  return outlined release of LeafLayoutEngine<_ShapeView<Rectangle, MeshGradient>>(a8);
}

uint64_t closure #1 in MeshGradient.withResolvedColors(in:_:)(uint64_t result, uint64_t a2, int64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t (*a7)(uint64_t, uint64_t))
{
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t *v13;
  float *v14;
  uint64_t v15;
  float (*v16)(_QWORD *);
  float v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  _QWORD v25[2];

  v7 = *(_QWORD *)(a4 + 16);
  if ((uint64_t)v7 >= a3)
    v8 = a3;
  else
    v8 = *(_QWORD *)(a4 + 16);
  if (v8 < 0)
  {
    __break(1u);
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  v9 = result;
  if (!v8)
    return a7(v9, a2);
  if (!v7)
    goto LABEL_12;
  if (v8 - 1 < v7)
  {
    v13 = (uint64_t *)(a4 + 32);
    v14 = (float *)(result + 8);
    do
    {
      v15 = *v13++;
      v25[0] = a5;
      v25[1] = a6;
      v16 = *(float (**)(_QWORD *))(*(_QWORD *)v15 + 104);
      swift_retain();
      v17 = v16(v25);
      v19 = v18;
      v21 = v20;
      v23 = v22;
      swift_release();
      *(v14 - 2) = v17;
      *((_DWORD *)v14 - 1) = v19;
      *(_DWORD *)v14 = v21;
      *((_DWORD *)v14 + 1) = v23;
      v14 += 4;
      --v8;
    }
    while (v8);
    return a7(v9, a2);
  }
LABEL_13:
  __break(1u);
  return result;
}

uint64_t MeshGradient._Paint.draw(path:style:in:bounds:)(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD v31[5];
  char v32;
  _BYTE v33[160];
  uint64_t v34;
  char v35;
  uint64_t v36;
  __int128 v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD v45[5];
  _BYTE v46[48];

  outlined init with take of CGRect?(a4, (uint64_t)v45);
  v8 = v45[0];
  v9 = v45[1];
  v10 = v45[2];
  v11 = v45[3];
  v28 = a2[1];
  v29 = *a2;
  v12 = a2[3];
  v26 = a2[4];
  v27 = a2[2];
  v25 = *((_BYTE *)a2 + 40);
  v13 = *v4;
  v14 = *((_BYTE *)v4 + 8);
  v15 = v4[2];
  v24 = *(_OWORD *)(v4 + 3);
  v16 = v4[5];
  v17 = v4[6];
  v18 = *((_DWORD *)v4 + 14);
  outlined init with take of CGRect?(a4, (uint64_t)v46);
  if (v46[32] == 1)
  {
    Path.boundingRect.getter();
    v8 = v19;
    v9 = v20;
    v10 = v21;
    v11 = v22;
  }
  v34 = v13;
  v35 = v14;
  v36 = v15;
  v37 = v24;
  v38 = v16;
  v39 = v17;
  v40 = v18;
  v41 = v8;
  v42 = v9;
  v43 = v10;
  v44 = v11;
  _s7SwiftUI15GraphicsContextV15ResolvedShadingOWOi5_((uint64_t)&v34);
  outlined init with take of GraphicsContext.ResolvedShading((uint64_t)&v34, (uint64_t)v33);
  v31[0] = v29;
  v31[1] = v28;
  v31[2] = v27;
  v31[3] = v12;
  v31[4] = v26;
  v32 = v25;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  GraphicsContext.draw(_:with:style:)(a1, (uint64_t)v33, (uint64_t)v31, a3);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

BOOL MeshGradient._Paint.isClear.getter()
{
  uint64_t v0;
  uint64_t v1;
  _BOOL8 result;
  uint64_t v3;
  float *v4;
  uint64_t v5;

  v1 = *(_QWORD *)(v0 + 16);
  result = *(float *)(v0 + 36) == 0.0;
  v3 = *(_QWORD *)(v1 + 16);
  if (v3)
  {
    v4 = (float *)(v1 + 44);
    v5 = 1;
    do
    {
      if (result)
      {
        result = *v4 == 0.0;
        if (v3 == v5)
          return result;
      }
      else
      {
        result = 0;
        if (v3 == v5)
          return result;
      }
      v4 += 4;
    }
    while (!__OFADD__(v5++, 1));
    __break(1u);
  }
  return result;
}

BOOL MeshGradient._Paint.isOpaque.getter()
{
  uint64_t v0;
  uint64_t v1;
  _BOOL8 result;
  uint64_t v3;
  float *v4;
  uint64_t v5;

  v1 = *(_QWORD *)(v0 + 16);
  result = *(float *)(v0 + 36) == 1.0;
  v3 = *(_QWORD *)(v1 + 16);
  if (v3)
  {
    v4 = (float *)(v1 + 44);
    v5 = 1;
    do
    {
      if (result)
      {
        result = *v4 == 1.0;
        if (v3 == v5)
          return result;
      }
      else
      {
        result = 0;
        if (v3 == v5)
          return result;
      }
      v4 += 4;
    }
    while (!__OFADD__(v5++, 1));
    __break(1u);
  }
  return result;
}

uint64_t MeshGradient._Paint.isCALayerCompatible.getter()
{
  return 0;
}

double key path getter for MeshGradient._Paint.animatableData : MeshGradient._Paint@<D0>(float32x4_t *a1@<X8>)
{
  double result;
  float32x4_t v3;
  float32x4_t v4[2];

  MeshGradient._Paint.animatableData.getter(v4);
  result = *(double *)v4[0].i64;
  v3 = v4[1];
  *a1 = v4[0];
  a1[1] = v3;
  return result;
}

void key path setter for MeshGradient._Paint.animatableData : MeshGradient._Paint(float32x4_t *a1)
{
  uint64_t v1;
  float32x4_t v2[2];

  v1 = a1->i64[1];
  v2[0].i64[0] = a1->i64[0];
  v2[0].i64[1] = v1;
  v2[1] = a1[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  MeshGradient._Paint.animatableData.setter(v2);
}

void MeshGradient._Paint.animatableData.setter(float32x4_t *a1)
{
  unint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  float32x2_t v8;
  float *v9;
  float v10;
  float v11;
  float32x2_t v12;
  float v13;
  float v14;
  float32x2_t v15;
  float v16;
  float32x2_t v17;
  float32x2_t v18;
  float32x2_t v19;
  float32x2_t v20;
  _QWORD *v21;
  unint64_t v22;
  uint64_t v23;
  __int128 v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  __int128 v35;
  unint64_t v36;
  uint64_t v37;
  float32x4_t v38;
  float v39;
  __int32 v40;
  __int32 v41;
  __int32 v42;
  unint64_t v43;
  unint64_t v44;
  float32x4_t v45;
  float32x2_t v46;
  __int128 v47;
  __int128 v48;
  float32x4_t v49;
  float32x4_t v50;
  char v51;

  v2 = v1;
  v3 = a1->i64[0];
  v4 = a1->i64[1];
  v45 = a1[1];
  v5 = *(_QWORD **)(v1 + 16);
  if (v5[2] >= *(_QWORD *)(v4 + 16))
    v6 = *(_QWORD *)(v4 + 16);
  else
    v6 = v5[2];
  if (v6)
  {
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v5 = specialized _ArrayBuffer._consumeAndCreateNew()(v5);
    v7 = 0;
    v2 = 0;
    while (v2 < v5[2])
    {
      v11 = *(float *)(v4 + v7 * 8 + 40);
      v10 = *(float *)(v4 + v7 * 8 + 44);
      v12 = *(float32x2_t *)(v4 + v7 * 8 + 32);
      if (one-time initialization token for legacyInterpolation != -1)
        swift_once();
      v46 = vmul_f32(v12, (float32x2_t)0x3C0000003C000000);
      v13 = v11 * 0.0078125;
      v14 = v10 * 0.0078125;
      swift_beginAccess();
      if ((static Color.Resolved.legacyInterpolation & 1) != 0)
      {
        v8 = v46;
      }
      else
      {
        if (v14 == 0.0)
        {
          v15 = v46;
        }
        else
        {
          v15 = vmul_n_f32(v46, 1.0 / v14);
          v13 = v13 * (float)(1.0 / v14);
        }
        v16 = v13 * (float)(v13 * v13);
        v17 = vmul_f32(v15, vmul_f32(v15, v15));
        v18 = vsub_f32(vmul_f32(v17, (float32x2_t)0x40270644408274ABLL), (float32x2_t)vrev64_s32((int32x2_t)vmul_f32(v17, (float32x2_t)0x4053B18C3FA25C2DLL)));
        v19 = vmul_n_f32((float32x2_t)0x3EAEC16A3E6C8362, v16);
        v8.i32[0] = vadd_f32(v18, v19).u32[0];
        v8.i32[1] = vsub_f32(v18, v19).i32[1];
        v20 = vmul_f32(v17, (float32x2_t)0x3F34133EBB897F53);
        v13 = (float)(v16 * 1.7076) + vsub_f32(v20, (float32x2_t)vdup_lane_s32((int32x2_t)v20, 1)).f32[0];
      }
      ++v2;
      v5[v7 + 4] = v8;
      v9 = (float *)&v5[v7];
      v9[10] = v13;
      v9[11] = v14;
      v7 += 2;
      if (v6 == v2)
      {
        swift_bridgeObjectRelease();
        v2 = v1;
        *(_QWORD *)(v1 + 16) = v5;
        goto LABEL_19;
      }
    }
    __break(1u);
    goto LABEL_61;
  }
LABEL_19:
  v21 = *(_QWORD **)v2;
  v22 = *(_QWORD *)(v3 + 16);
  v23 = *(_QWORD *)(*(_QWORD *)v2 + 16);
  if ((*(_BYTE *)(v2 + 8) & 1) == 0)
  {
    if (v23 + 0x4000000000000000 >= 0)
    {
      if (v22 == 2 * v23)
      {
        if (v23)
        {
          v44 = v2;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          v36 = 0;
          v37 = 9;
          v2 = 32;
          while (v37 - 9 < v22)
          {
            LODWORD(v35) = *(_DWORD *)(v3 + v2);
            v48 = v35;
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
              v21 = specialized _ArrayBuffer._consumeAndCreateNew()(v21);
            v35 = v48;
            if (v36 >= v21[2])
              goto LABEL_73;
            *(_DWORD *)((char *)v21 + v2) = v48;
            v22 = *(_QWORD *)(v3 + 16);
            if (v37 - 8 >= v22)
              goto LABEL_74;
            DWORD1(v35) = *(_DWORD *)(v3 + 4 * v37);
            ++v36;
            *(_QWORD *)((char *)v21 + v2) = v35;
            v37 += 2;
            v2 += 8;
            if (v23 == v36)
            {
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              v2 = v44;
              goto LABEL_54;
            }
          }
          goto LABEL_72;
        }
LABEL_54:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        *(_QWORD *)v2 = v21;
        *(_BYTE *)(v2 + 8) = 0;
      }
      else
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      goto LABEL_55;
    }
LABEL_77:
    __break(1u);
    return;
  }
  if ((unsigned __int128)(v23 * (__int128)10) >> 64 != (10 * v23) >> 63)
  {
    __break(1u);
    goto LABEL_77;
  }
  if (v22 == 10 * v23 && v23 != 0)
  {
    v43 = v2;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v2 = 0;
    v26 = 0;
    v27 = 0;
    while (v2 < v22)
    {
      LODWORD(v25) = *(_DWORD *)(v3 + 4 * v2 + 32);
      v47 = v25;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v21 = specialized _ArrayBuffer._consumeAndCreateNew()(v21);
      v25 = v47;
      if (v27 >= v21[2])
        goto LABEL_62;
      LODWORD(v21[v26 + 4]) = v47;
      v22 = *(_QWORD *)(v3 + 16);
      if (v2 + 1 >= v22)
        goto LABEL_63;
      v28 = v3 + 4 * v2;
      DWORD1(v25) = *(_DWORD *)(v28 + 36);
      v21[v26 + 4] = v25;
      if (v2 + 2 >= v22)
        goto LABEL_64;
      LODWORD(v29) = *(_DWORD *)(v28 + 40);
      LODWORD(v21[v26 + 5]) = v29;
      if (v2 + 3 >= v22)
        goto LABEL_65;
      v30 = v3 + 4 * v2;
      HIDWORD(v29) = *(_DWORD *)(v30 + 44);
      v21[v26 + 5] = v29;
      if (v2 + 4 >= v22)
        goto LABEL_66;
      LODWORD(v31) = *(_DWORD *)(v30 + 48);
      LODWORD(v21[v26 + 6]) = v31;
      if (v2 + 5 >= v22)
        goto LABEL_67;
      v32 = v3 + 4 * v2;
      HIDWORD(v31) = *(_DWORD *)(v32 + 52);
      v21[v26 + 6] = v31;
      if (v2 + 6 >= v22)
        goto LABEL_68;
      LODWORD(v33) = *(_DWORD *)(v32 + 56);
      LODWORD(v21[v26 + 7]) = v33;
      if (v2 + 7 >= v22)
        goto LABEL_69;
      v34 = v3 + 4 * v2;
      HIDWORD(v33) = *(_DWORD *)(v34 + 60);
      v21[v26 + 7] = v33;
      if (v2 + 8 >= v22)
        goto LABEL_70;
      LODWORD(v25) = *(_DWORD *)(v34 + 64);
      LODWORD(v21[v26 + 8]) = v25;
      if (v2 + 9 >= v22)
        goto LABEL_71;
      ++v27;
      DWORD1(v25) = *(_DWORD *)(v3 + 4 * v2 + 68);
      v21[v26 + 8] = v25;
      v26 += 5;
      v2 += 10;
      if (v23 == v27)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v2 = v43;
        goto LABEL_53;
      }
    }
LABEL_61:
    __break(1u);
LABEL_62:
    __break(1u);
LABEL_63:
    __break(1u);
LABEL_64:
    __break(1u);
LABEL_65:
    __break(1u);
LABEL_66:
    __break(1u);
LABEL_67:
    __break(1u);
LABEL_68:
    __break(1u);
LABEL_69:
    __break(1u);
LABEL_70:
    __break(1u);
LABEL_71:
    __break(1u);
LABEL_72:
    __break(1u);
LABEL_73:
    __break(1u);
LABEL_74:
    __break(1u);
    goto LABEL_75;
  }
LABEL_53:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_QWORD *)v2 = v21;
  *(_BYTE *)(v2 + 8) = 1;
LABEL_55:
  v38.i64[0] = 0x3C0000003C000000;
  v38.i64[1] = 0x3C0000003C000000;
  if (one-time initialization token for legacyInterpolation != -1)
  {
LABEL_75:
    swift_once();
    v38.i64[0] = 0x3C0000003C000000;
    v38.i64[1] = 0x3C0000003C000000;
  }
  v49 = vmulq_f32(v45, v38);
  swift_beginAccess();
  if ((static Color.Resolved.legacyInterpolation & 1) != 0)
  {
    v39 = v49.f32[0];
    v41 = v49.i32[2];
    v40 = v49.i32[1];
    v42 = v49.i32[3];
  }
  else
  {
    v51 = 2;
    v50 = v49;
    v39 = ResolvedGradient.ColorSpace.convertOut(_:)(v50.f32);
  }
  *(float *)(v2 + 24) = v39;
  *(_DWORD *)(v2 + 28) = v40;
  *(_DWORD *)(v2 + 32) = v41;
  *(_DWORD *)(v2 + 36) = v42;
}

void (*MeshGradient._Paint.animatableData.modify(float32x4_t **a1))(uint64_t **a1, char a2)
{
  uint64_t v1;
  float32x4_t *v3;

  v3 = (float32x4_t *)malloc(0x28uLL);
  *a1 = v3;
  v3[2].i64[0] = v1;
  MeshGradient._Paint.animatableData.getter(v3);
  return MeshGradient._Paint.animatableData.modify;
}

void MeshGradient._Paint.animatableData.modify(uint64_t **a1, char a2)
{
  uint64_t *v2;
  uint64_t v3;
  int v4;
  int v5;
  int v6;
  int v7;
  float32x4_t v8;
  int v9;
  int v10;
  int v11;
  int v12;

  v2 = *a1;
  v3 = (*a1)[1];
  v5 = *((_DWORD *)*a1 + 4);
  v4 = *((_DWORD *)*a1 + 5);
  v7 = *((_DWORD *)*a1 + 6);
  v6 = *((_DWORD *)*a1 + 7);
  v8.i64[0] = **a1;
  v8.i64[1] = v3;
  v9 = v5;
  v10 = v4;
  v11 = v7;
  v12 = v6;
  if ((a2 & 1) != 0)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    MeshGradient._Paint.animatableData.setter(&v8);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    MeshGradient._Paint.animatableData.setter(&v8);
  }
  free(v2);
}

void static MeshGradient._Paint.leafProtobufTag.getter(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 9;
  *(_BYTE *)(a1 + 8) = 0;
}

uint64_t protocol witness for ResolvedPaint.draw(path:style:in:bounds:) in conformance MeshGradient._Paint(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD v31[5];
  char v32;
  _BYTE v33[160];
  uint64_t v34;
  char v35;
  uint64_t v36;
  __int128 v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD v45[5];
  _BYTE v46[48];

  outlined init with take of CGRect?(a4, (uint64_t)v45);
  v8 = v45[0];
  v9 = v45[1];
  v10 = v45[2];
  v11 = v45[3];
  v28 = a2[1];
  v29 = *a2;
  v12 = a2[3];
  v26 = a2[4];
  v27 = a2[2];
  v25 = *((_BYTE *)a2 + 40);
  v13 = *v4;
  v14 = *((_BYTE *)v4 + 8);
  v15 = v4[2];
  v24 = *(_OWORD *)(v4 + 3);
  v16 = v4[5];
  v17 = v4[6];
  v18 = *((_DWORD *)v4 + 14);
  outlined init with take of CGRect?(a4, (uint64_t)v46);
  if (v46[32] == 1)
  {
    Path.boundingRect.getter();
    v8 = v19;
    v9 = v20;
    v10 = v21;
    v11 = v22;
  }
  v34 = v13;
  v35 = v14;
  v36 = v15;
  v37 = v24;
  v38 = v16;
  v39 = v17;
  v40 = v18;
  v41 = v8;
  v42 = v9;
  v43 = v10;
  v44 = v11;
  _s7SwiftUI15GraphicsContextV15ResolvedShadingOWOi5_((uint64_t)&v34);
  outlined init with take of GraphicsContext.ResolvedShading((uint64_t)&v34, (uint64_t)v33);
  v31[0] = v29;
  v31[1] = v28;
  v31[2] = v27;
  v31[3] = v12;
  v31[4] = v26;
  v32 = v25;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  GraphicsContext.draw(_:with:style:)(a1, (uint64_t)v33, (uint64_t)v31, a3);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void protocol witness for static ResolvedPaint.leafProtobufTag.getter in conformance MeshGradient._Paint(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 9;
  *(_BYTE *)(a1 + 8) = 0;
}

void protocol witness for ResolvedPaint.encodePaint(to:) in conformance MeshGradient._Paint()
{
  uint64_t v0;
  __int128 v1;
  float v2[8];
  _BYTE v3[2];

  v1 = *(_OWORD *)(v0 + 16);
  *(_OWORD *)v2 = *(_OWORD *)(v0 + 32);
  ProtobufEncoder.archiveOptions.getter(v3);
  if (v3[1] > 1)
  {
    specialized ProtobufEncoder.messageField<A>(_:_:)(9);
  }
  else
  {
    ProtobufEncoder.encodeVarint(_:)(0xAuLL);
    specialized ProtobufEncoder.encodeMessage<A>(_:)(*((float *)&v1 + 2), *((float *)&v1 + 3), v2[0], v2[1]);
  }
}

void MeshGradient._Paint.encodePaint(to:)()
{
  uint64_t v0;
  __int128 v1;
  float v2[8];
  _BYTE v3[2];

  v1 = *(_OWORD *)(v0 + 16);
  *(_OWORD *)v2 = *(_OWORD *)(v0 + 32);
  ProtobufEncoder.archiveOptions.getter(v3);
  if (v3[1] >= 2)
  {
    specialized ProtobufEncoder.messageField<A>(_:_:)(9);
  }
  else
  {
    ProtobufEncoder.encodeVarint(_:)(0xAuLL);
    specialized ProtobufEncoder.encodeMessage<A>(_:)(*((float *)&v1 + 2), *((float *)&v1 + 3), v2[0], v2[1]);
  }
}

void (*protocol witness for Animatable.animatableData.modify in conformance MeshGradient._Paint(float32x4_t ***a1))(_QWORD *a1)
{
  float32x4_t **v2;

  v2 = (float32x4_t **)malloc(0x28uLL);
  *a1 = v2;
  v2[4] = (float32x4_t *)MeshGradient._Paint.animatableData.modify(v2);
  return protocol witness for Animatable.animatableData.modify in conformance LinearGradient._Paint;
}

void MeshGradient._Paint.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  float v6;
  float v7;
  float v8;
  float v9;
  int64_t v10;
  int64_t v11;
  Swift::UInt v12;
  uint64_t v13;
  float *v14;
  float *v15;
  float v16;
  float v17;
  float v18;
  float v19;
  int64_t v20;
  int64_t v21;
  int64_t v22;
  _QWORD *v23;
  unint64_t v24;
  unint64_t v25;
  int64_t v26;
  int64_t v27;
  uint64_t v28;
  int64_t v29;
  float *v30;
  int64_t v31;
  int64_t v32;
  int64_t v33;
  int64_t v34;
  float *v35;
  int64_t v36;
  int64_t v37;
  int64_t v38;
  int64_t v39;
  float *v40;
  int64_t v41;
  int64_t v42;
  int64_t v43;
  int64_t v44;
  int64_t v45;
  _BYTE *v46;
  int64_t v47;
  _BYTE *v48;
  int64_t v49;
  _BYTE *v50;
  int64_t v51;
  _BYTE *v52;
  int64_t v53;
  _BYTE *v54;
  int64_t v55;
  float v56;
  Swift::UInt v57;
  int64_t v58;

  v3 = v1;
  v5 = *(_QWORD *)(v3 + 16);
  v6 = *(float *)(v3 + 24);
  v7 = *(float *)(v3 + 28);
  v8 = *(float *)(v3 + 32);
  v9 = *(float *)(v3 + 36);
  v11 = *(_QWORD *)(v3 + 40);
  v10 = *(_QWORD *)(v3 + 48);
  v12 = *(unsigned int *)(v3 + 56);
  swift_bridgeObjectRetain();
  specialized ProtobufEncoder.messageField<A>(_:_:)(1);
  swift_bridgeObjectRelease();
  if (v2)
    return;
  v58 = v11;
  v13 = *(_QWORD *)(v5 + 16);
  if (!v13)
  {
LABEL_75:
    if (v6 == 0.0 && v7 == 0.0 && v8 == 0.0 && v9 == 0.0)
    {
      v55 = v58;
    }
    else
    {
      ProtobufEncoder.encodeVarint(_:)(0x1AuLL);
      specialized ProtobufEncoder.encodeMessage<A>(_:)(v6, v7, v8, v9);
      v55 = v58;
    }
    if (v55 > 0)
    {
      ProtobufEncoder.encodeVarint(_:)(0x20uLL);
      ProtobufEncoder.encodeVarint(_:)(v55);
    }
    if (v10 >= 1)
    {
      ProtobufEncoder.encodeVarint(_:)(0x28uLL);
      ProtobufEncoder.encodeVarint(_:)(v10);
    }
    if ((_DWORD)v12)
    {
      ProtobufEncoder.encodeVarint(_:)(0x30uLL);
      ProtobufEncoder.encodeVarint(_:)(v12);
    }
    return;
  }
  v56 = v9;
  v57 = v12;
  swift_bridgeObjectRetain();
  v14 = (float *)(v5 + 44);
  while (1)
  {
    v16 = *(v14 - 3);
    v17 = *(v14 - 2);
    v19 = *(v14 - 1);
    v18 = *v14;
    v20 = a1[1];
    v21 = a1[2];
    if (v20 >= v21)
    {
      v45 = v20 + 1;
      if (__OFADD__(v20, 1))
        goto LABEL_93;
      if (v21 < v45)
      {
        v46 = (_BYTE *)ProtobufEncoder.growBufferSlow(to:)(v45);
      }
      else
      {
        a1[1] = v45;
        v46 = (_BYTE *)(*a1 + v20);
      }
      *v46 = 18;
      v22 = a1[1];
    }
    else
    {
      *(_BYTE *)(*a1 + v20) = 18;
      v22 = v20 + 1;
      a1[1] = v20 + 1;
    }
    v23 = (_QWORD *)a1[3];
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v23 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v23[2] + 1, 1, v23);
    v25 = v23[2];
    v24 = v23[3];
    if (v25 >= v24 >> 1)
      v23 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v24 > 1), v25 + 1, 1, v23);
    v23[2] = v25 + 1;
    v23[v25 + 4] = v22;
    a1[3] = v23;
    v26 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    a1[1] = v26;
    if (v16 == 0.0)
    {
      if (v17 == 0.0)
        goto LABEL_16;
    }
    else
    {
      v27 = a1[2];
      if (v26 >= v27)
      {
        v47 = v22 + 2;
        if (__OFADD__(v26, 1))
          goto LABEL_94;
        if (v27 < v47)
        {
          v48 = (_BYTE *)ProtobufEncoder.growBufferSlow(to:)(v47);
        }
        else
        {
          a1[1] = v47;
          v48 = (_BYTE *)(*a1 + v26);
        }
        *v48 = 13;
        v28 = a1[1];
        v29 = v28 + 4;
        if (__OFADD__(v28, 4))
          goto LABEL_89;
      }
      else
      {
        *(_BYTE *)(*a1 + v26) = 13;
        v28 = v22 + 2;
        a1[1] = v22 + 2;
        v29 = v22 + 6;
        if (__OFADD__(v22 + 2, 4))
          goto LABEL_89;
      }
      if (a1[2] < v29)
      {
        v30 = (float *)ProtobufEncoder.growBufferSlow(to:)(v29);
      }
      else
      {
        a1[1] = v29;
        v30 = (float *)(*a1 + v28);
      }
      *v30 = v16;
      if (v17 == 0.0)
      {
LABEL_16:
        if (v19 == 0.0)
          goto LABEL_17;
        goto LABEL_29;
      }
    }
    v31 = a1[1];
    v32 = a1[2];
    if (v31 >= v32)
    {
      v49 = v31 + 1;
      if (__OFADD__(v31, 1))
        goto LABEL_95;
      if (v32 < v49)
      {
        v50 = (_BYTE *)ProtobufEncoder.growBufferSlow(to:)(v49);
      }
      else
      {
        a1[1] = v49;
        v50 = (_BYTE *)(*a1 + v31);
      }
      *v50 = 21;
      v33 = a1[1];
      v34 = v33 + 4;
      if (__OFADD__(v33, 4))
        goto LABEL_90;
    }
    else
    {
      *(_BYTE *)(*a1 + v31) = 21;
      v33 = v31 + 1;
      a1[1] = v33;
      v34 = v33 + 4;
      if (__OFADD__(v33, 4))
        goto LABEL_90;
    }
    if (a1[2] < v34)
    {
      v35 = (float *)ProtobufEncoder.growBufferSlow(to:)(v34);
    }
    else
    {
      a1[1] = v34;
      v35 = (float *)(*a1 + v33);
    }
    *v35 = v17;
    if (v19 == 0.0)
    {
LABEL_17:
      if (v18 == 1.0)
        goto LABEL_6;
LABEL_34:
      v41 = a1[1];
      v42 = a1[2];
      if (v41 >= v42)
      {
        v53 = v41 + 1;
        if (__OFADD__(v41, 1))
          goto LABEL_97;
        if (v42 < v53)
        {
          v54 = (_BYTE *)ProtobufEncoder.growBufferSlow(to:)(v53);
        }
        else
        {
          a1[1] = v53;
          v54 = (_BYTE *)(*a1 + v41);
        }
        *v54 = 37;
        v43 = a1[1];
        v44 = v43 + 4;
        if (__OFADD__(v43, 4))
          goto LABEL_92;
      }
      else
      {
        *(_BYTE *)(*a1 + v41) = 37;
        v43 = v41 + 1;
        a1[1] = v43;
        v44 = v43 + 4;
        if (__OFADD__(v43, 4))
          goto LABEL_92;
      }
      if (a1[2] >= v44)
      {
        a1[1] = v44;
        v15 = (float *)(*a1 + v43);
      }
      else
      {
        v15 = (float *)ProtobufEncoder.growBufferSlow(to:)(v44);
      }
      *v15 = v18;
      goto LABEL_6;
    }
LABEL_29:
    v36 = a1[1];
    v37 = a1[2];
    if (v36 >= v37)
    {
      v51 = v36 + 1;
      if (__OFADD__(v36, 1))
        goto LABEL_96;
      if (v37 < v51)
      {
        v52 = (_BYTE *)ProtobufEncoder.growBufferSlow(to:)(v51);
      }
      else
      {
        a1[1] = v51;
        v52 = (_BYTE *)(*a1 + v36);
      }
      *v52 = 29;
      v38 = a1[1];
      v39 = v38 + 4;
      if (__OFADD__(v38, 4))
        goto LABEL_91;
    }
    else
    {
      *(_BYTE *)(*a1 + v36) = 29;
      v38 = v36 + 1;
      a1[1] = v38;
      v39 = v38 + 4;
      if (__OFADD__(v38, 4))
        goto LABEL_91;
    }
    if (a1[2] < v39)
    {
      v40 = (float *)ProtobufEncoder.growBufferSlow(to:)(v39);
    }
    else
    {
      a1[1] = v39;
      v40 = (float *)(*a1 + v38);
    }
    *v40 = v19;
    if (v18 != 1.0)
      goto LABEL_34;
LABEL_6:
    ProtobufEncoder.endLengthDelimited()();
    v14 += 4;
    if (!--v13)
    {
      swift_bridgeObjectRelease();
      v12 = v57;
      v9 = v56;
      goto LABEL_75;
    }
  }
  __break(1u);
LABEL_89:
  __break(1u);
LABEL_90:
  __break(1u);
LABEL_91:
  __break(1u);
LABEL_92:
  __break(1u);
LABEL_93:
  __break(1u);
LABEL_94:
  __break(1u);
LABEL_95:
  __break(1u);
LABEL_96:
  __break(1u);
LABEL_97:
  __break(1u);
}

uint64_t MeshGradient._Paint.init(from:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  _QWORD *v3;
  unint64_t v5;
  unint64_t v6;
  int v7;
  _QWORD *v8;
  int v9;
  int v10;
  int v11;
  float v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  float *v17;
  unint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  _QWORD *v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  float v35;
  int v36;
  int v37;
  int v38;
  _QWORD *v39;
  float v40;
  int v41;
  int v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  _QWORD *v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  float v54;
  int v55;
  int v56;
  int v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char v79;
  char v80;

  v3 = (_QWORD *)result;
  v80 = 0;
  v5 = *(_QWORD *)(result + 8);
  v6 = *(_QWORD *)(result + 16);
  if (v5 >= v6)
  {
    v13 = 0;
    v14 = 0;
    v15 = 0;
    v7 = 0;
    v8 = (_QWORD *)MEMORY[0x24BEE4AF8];
    v9 = 0;
    v10 = 0;
    v11 = 0;
    v12 = 0.0;
    v16 = MEMORY[0x24BEE4AF8];
    goto LABEL_4;
  }
  v75 = 0;
  v76 = 0;
  v7 = 0;
  v8 = (_QWORD *)MEMORY[0x24BEE4AF8];
  v9 = 0;
  v10 = 0;
  v11 = 0;
  v12 = 0.0;
  v77 = MEMORY[0x24BEE4AF8];
  while (2)
  {
    result = v3[3];
    if (!result)
      goto LABEL_11;
    v18 = v3[4];
    if (v5 >= v18)
    {
      if (v18 < v5)
        goto LABEL_98;
      v3[3] = 0;
LABEL_11:
      result = ProtobufDecoder.decodeVarint()();
      if (v2)
        goto LABEL_99;
      if ((unint64_t)result <= 7)
        goto LABEL_98;
    }
    switch((unint64_t)result >> 3)
    {
      case 1uLL:
        if ((result & 7) != 2)
          goto LABEL_98;
        v19 = (_QWORD *)v3[5];
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v19 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v19[2] + 1, 1, v19);
        v21 = v19[2];
        v20 = v19[3];
        if (v21 >= v20 >> 1)
          v19 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v20 > 1), v21 + 1, 1, v19);
        v19[2] = v21 + 1;
        v19[v21 + 4] = v6;
        v3[5] = v19;
        v22 = ProtobufDecoder.decodeVarint()();
        if (v2)
          goto LABEL_99;
        if (v22 < 0)
        {
          __break(1u);
LABEL_110:
          __break(1u);
LABEL_111:
          __break(1u);
LABEL_112:
          __break(1u);
LABEL_113:
          __break(1u);
LABEL_114:
          __break(1u);
LABEL_115:
          __break(1u);
LABEL_116:
          __break(1u);
LABEL_117:
          __break(1u);
LABEL_118:
          __break(1u);
LABEL_119:
          __break(1u);
LABEL_120:
          __break(1u);
          __break(1u);
          v71 = specialized _ArrayBuffer._consumeAndCreateNew()((_QWORD *)a2);
          v72 = v71[2];
          if (v72)
            goto LABEL_107;
          __break(1u);
          v71 = (_QWORD *)v3[5];
          if (v71[2])
          {
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
            {
              v72 = v71[2];
              if (!v72)
                goto LABEL_104;
LABEL_107:
              v73 = v72 - 1;
              v74 = v71[v73 + 4];
              v71[2] = v73;
              v3[5] = v71;
              v3[2] = v74;
LABEL_99:
              swift_bridgeObjectRelease();
              return swift_bridgeObjectRelease();
            }
          }
          else
          {
            __break(1u);
          }
          v71 = specialized _ArrayBuffer._consumeAndCreateNew()(v71);
          v72 = v71[2];
          if (v72)
            goto LABEL_107;
LABEL_104:
          __break(1u);
          v71 = (_QWORD *)v3[5];
          if (v71[2])
          {
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
            {
              v72 = v71[2];
              if (v72)
                goto LABEL_107;
              goto LABEL_127;
            }
          }
          else
          {
            __break(1u);
          }
          v71 = specialized _ArrayBuffer._consumeAndCreateNew()(v71);
          v72 = v71[2];
          if (v72)
            goto LABEL_107;
LABEL_127:
          __break(1u);
          JUMPOUT(0x2350E5DC0);
        }
        v23 = v3[1] + v22;
        if (v6 < v23)
          goto LABEL_98;
        v3[2] = v23;
        MeshGradient.Locations.init(from:)(v3, (uint64_t)&v78);
        v24 = (_QWORD *)v3[5];
        if (!v24[2])
          goto LABEL_112;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
        {
          v25 = v24[2];
          if (!v25)
            goto LABEL_115;
        }
        else
        {
          v24 = specialized _ArrayBuffer._consumeAndCreateNew()(v24);
          v25 = v24[2];
          if (!v25)
            goto LABEL_115;
        }
        v26 = v25 - 1;
        v27 = v24[v26 + 4];
        v24[2] = v26;
        v3[5] = v24;
        v3[2] = v27;
        v28 = v78;
        v29 = v79;
        result = swift_bridgeObjectRelease();
        v80 = v29;
        v77 = v28;
LABEL_6:
        v5 = v3[1];
        v6 = v3[2];
        if (v5 < v6)
          continue;
        v13 = v80;
        v14 = v76;
        v16 = v77;
        v15 = v75;
LABEL_4:
        v3[3] = 0;
        *(_QWORD *)a2 = v16;
        *(_BYTE *)(a2 + 8) = v13;
        *(_QWORD *)(a2 + 16) = v8;
        *(float *)(a2 + 24) = v12;
        *(_DWORD *)(a2 + 28) = v11;
        *(_DWORD *)(a2 + 32) = v10;
        *(_DWORD *)(a2 + 36) = v9;
        *(_QWORD *)(a2 + 40) = v15;
        *(_QWORD *)(a2 + 48) = v14;
        *(_DWORD *)(a2 + 56) = v7;
        return result;
      case 2uLL:
        if ((result & 7) != 2)
          goto LABEL_98;
        v30 = (_QWORD *)v3[5];
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v30 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v30[2] + 1, 1, v30);
        v32 = v30[2];
        v31 = v30[3];
        if (v32 >= v31 >> 1)
          v30 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v31 > 1), v32 + 1, 1, v30);
        v30[2] = v32 + 1;
        v30[v32 + 4] = v6;
        v3[5] = v30;
        v33 = ProtobufDecoder.decodeVarint()();
        if (v2)
          goto LABEL_99;
        if (v33 < 0)
          goto LABEL_110;
        v34 = v3[1] + v33;
        if (v6 < v34)
          goto LABEL_98;
        v3[2] = v34;
        v35 = specialized Color.Resolved.init(from:)(v3);
        v39 = (_QWORD *)v3[5];
        if (!v39[2])
          goto LABEL_113;
        v40 = v35;
        v41 = v36;
        v42 = v37;
        v43 = v38;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
        {
          v44 = v39[2];
          if (!v44)
            goto LABEL_116;
        }
        else
        {
          v39 = specialized _ArrayBuffer._consumeAndCreateNew()(v39);
          v44 = v39[2];
          if (!v44)
            goto LABEL_116;
        }
        v45 = v44 - 1;
        v46 = v39[v45 + 4];
        v39[2] = v45;
        v3[5] = v39;
        v3[2] = v46;
        result = swift_isUniquelyReferenced_nonNull_native();
        if ((result & 1) == 0)
        {
          result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v8[2] + 1, 1, v8);
          v8 = (_QWORD *)result;
        }
        v48 = v8[2];
        v47 = v8[3];
        if (v48 >= v47 >> 1)
        {
          result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v47 > 1), v48 + 1, 1, v8);
          v8 = (_QWORD *)result;
        }
        v8[2] = v48 + 1;
        v17 = (float *)&v8[2 * v48];
        v17[8] = v40;
        *((_DWORD *)v17 + 9) = v41;
        *((_DWORD *)v17 + 10) = v42;
        *((_DWORD *)v17 + 11) = v43;
        goto LABEL_6;
      case 3uLL:
        if ((result & 7) != 2)
          goto LABEL_98;
        v49 = (_QWORD *)v3[5];
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v49 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v49[2] + 1, 1, v49);
        v51 = v49[2];
        v50 = v49[3];
        if (v51 >= v50 >> 1)
          v49 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v50 > 1), v51 + 1, 1, v49);
        v49[2] = v51 + 1;
        v49[v51 + 4] = v6;
        v3[5] = v49;
        v52 = ProtobufDecoder.decodeVarint()();
        if (v2)
          goto LABEL_99;
        if (v52 < 0)
          goto LABEL_111;
        v53 = v3[1] + v52;
        if (v6 < v53)
          goto LABEL_98;
        v3[2] = v53;
        v54 = specialized Color.Resolved.init(from:)(v3);
        v58 = (_QWORD *)v3[5];
        if (!v58[2])
          goto LABEL_114;
        v12 = v54;
        v11 = v55;
        v10 = v56;
        v9 = v57;
        result = swift_isUniquelyReferenced_nonNull_native();
        if ((result & 1) != 0)
        {
          v59 = v58[2];
          if (!v59)
            goto LABEL_97;
        }
        else
        {
          result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v58);
          v58 = (_QWORD *)result;
          v59 = *(_QWORD *)(result + 16);
          if (!v59)
          {
LABEL_97:
            __break(1u);
LABEL_98:
            lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
            swift_allocError();
            swift_willThrow();
            goto LABEL_99;
          }
        }
        v60 = v59 - 1;
        v61 = v58[v60 + 4];
        v58[2] = v60;
        v3[5] = v58;
        v3[2] = v61;
        goto LABEL_6;
      case 4uLL:
        if ((result & 7) == 0)
          goto LABEL_62;
        if ((result & 7) != 2)
          goto LABEL_98;
        v62 = ProtobufDecoder.decodeVarint()();
        if (v2)
          goto LABEL_99;
        if (v62 < 0)
          goto LABEL_117;
        v63 = v3[1] + v62;
        if (v6 < v63)
          goto LABEL_98;
        v3[3] = 32;
        v3[4] = v63;
LABEL_62:
        result = ProtobufDecoder.decodeVarint()();
        v64 = v75;
        if (v2)
          goto LABEL_99;
        if (result >= 0)
          v64 = result;
        v75 = v64;
        goto LABEL_6;
      case 5uLL:
        if ((result & 7) == 0)
          goto LABEL_72;
        if ((result & 7) != 2)
          goto LABEL_98;
        v65 = ProtobufDecoder.decodeVarint()();
        if (v2)
          goto LABEL_99;
        if (v65 < 0)
          goto LABEL_118;
        v66 = v3[1] + v65;
        if (v6 < v66)
          goto LABEL_98;
        v3[3] = 40;
        v3[4] = v66;
LABEL_72:
        result = ProtobufDecoder.decodeVarint()();
        v67 = v76;
        if (v2)
          goto LABEL_99;
        if (result >= 0)
          v67 = result;
        v76 = v67;
        goto LABEL_6;
      case 6uLL:
        if ((result & 7) == 0)
          goto LABEL_82;
        if ((result & 7) != 2)
          goto LABEL_98;
        v68 = ProtobufDecoder.decodeVarint()();
        if (v2)
          goto LABEL_99;
        if (v68 < 0)
          goto LABEL_119;
        v69 = v3[1] + v68;
        if (v6 < v69)
          goto LABEL_98;
        v3[3] = 48;
        v3[4] = v69;
LABEL_82:
        result = ProtobufDecoder.decodeVarint()();
        if (v2)
          goto LABEL_99;
        v7 = result;
        goto LABEL_6;
      default:
        switch(result & 7)
        {
          case 0:
            result = ProtobufDecoder.decodeVarint()();
            if (v2)
              goto LABEL_99;
            goto LABEL_6;
          case 1:
            v70 = v3[1] + 8;
            if (v6 < v70)
              goto LABEL_98;
            goto LABEL_91;
          case 2:
            result = ProtobufDecoder.decodeVarint()();
            if (v2)
              goto LABEL_99;
            if (result < 0)
              goto LABEL_120;
            v70 = v3[1] + result;
            if (v6 < v70)
              goto LABEL_98;
LABEL_91:
            v3[1] = v70;
            break;
          case 5:
            v70 = v3[1] + 4;
            if (v6 >= v70)
              goto LABEL_91;
            goto LABEL_98;
          default:
            goto LABEL_98;
        }
        goto LABEL_6;
    }
  }
}

void protocol witness for ProtobufEncodableMessage.encode(to:) in conformance MeshGradient._Paint(_QWORD *a1)
{
  MeshGradient._Paint.encode(to:)(a1);
}

uint64_t protocol witness for ProtobufDecodableMessage.init(from:) in conformance MeshGradient._Paint@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return MeshGradient._Paint.init(from:)(a1, a2);
}

uint64_t MeshGradient.Locations.encode(to:)(uint64_t result)
{
  _BYTE *v1;
  _BYTE *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t *i;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int64_t v11;
  int64_t v12;
  int64_t v13;
  _QWORD *v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  _BYTE *v18;
  uint64_t j;
  int64_t v20;
  int64_t v21;
  int64_t v22;
  _QWORD *v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  int64_t v27;
  int64_t v28;
  uint64_t v29;
  int64_t v30;
  int v31;
  int64_t v32;
  int64_t v33;
  int64_t v34;
  int64_t v35;
  int64_t v36;
  _BYTE *v37;
  _QWORD *v38;
  int64_t v39;
  _BYTE *v40;
  int64_t v41;
  _BYTE *v42;
  _DWORD *v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD v46[6];

  v2 = v1;
  v3 = (_QWORD *)result;
  v46[5] = *MEMORY[0x24BDAC8D0];
  v44 = *(_QWORD *)v2;
  v4 = *(_QWORD *)(*(_QWORD *)v2 + 16);
  if ((v2[8] & 1) != 0)
  {
    if (v4)
    {
      for (i = (uint64_t *)(swift_bridgeObjectRetain() + 64); ; i += 5)
      {
        v6 = *(i - 4);
        v7 = *(i - 3);
        v8 = *(i - 2);
        v9 = *(i - 1);
        v10 = *i;
        v11 = v3[1];
        v12 = v3[2];
        if (v11 >= v12)
        {
          v17 = v11 + 1;
          if (__OFADD__(v11, 1))
            goto LABEL_65;
          if (v12 < v17)
          {
            v18 = (_BYTE *)ProtobufEncoder.growBufferSlow(to:)(v17);
          }
          else
          {
            v3[1] = v17;
            v18 = (_BYTE *)(*v3 + v11);
          }
          *v18 = 18;
          v13 = v3[1];
        }
        else
        {
          *(_BYTE *)(*v3 + v11) = 18;
          v13 = v11 + 1;
          v3[1] = v11 + 1;
        }
        v14 = (_QWORD *)v3[3];
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v14[2] + 1, 1, v14);
        v16 = v14[2];
        v15 = v14[3];
        if (v16 >= v15 >> 1)
          v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v15 > 1), v16 + 1, 1, v14);
        v14[2] = v16 + 1;
        v14[v16 + 4] = v13;
        v3[3] = v14;
        if (__OFADD__(v13, 1))
          break;
        v3[1] = v13 + 1;
        v46[0] = v6;
        v46[1] = v7;
        v46[2] = v8;
        v46[3] = v9;
        v46[4] = v10;
        closure #1 in closure #2 in MeshGradient.Locations.encode(to:)((float *)v46, v3);
        ProtobufEncoder.endLengthDelimited()();
        if (!--v4)
          return swift_bridgeObjectRelease();
      }
      __break(1u);
LABEL_62:
      __break(1u);
LABEL_63:
      __break(1u);
LABEL_64:
      __break(1u);
LABEL_65:
      __break(1u);
LABEL_66:
      __break(1u);
LABEL_67:
      __break(1u);
LABEL_68:
      __break(1u);
    }
  }
  else if (v4)
  {
    swift_bridgeObjectRetain();
    for (j = 0; j != v4; ++j)
    {
      v45 = *(_QWORD *)(v44 + 8 * j + 32);
      v20 = v3[1];
      v21 = v3[2];
      if (v20 >= v21)
      {
        v36 = v20 + 1;
        if (__OFADD__(v20, 1))
          goto LABEL_66;
        if (v21 < v36)
        {
          v37 = (_BYTE *)ProtobufEncoder.growBufferSlow(to:)(v36);
        }
        else
        {
          v3[1] = v36;
          v37 = (_BYTE *)(*v3 + v20);
        }
        *v37 = 10;
        v22 = v3[1];
      }
      else
      {
        *(_BYTE *)(*v3 + v20) = 10;
        v22 = v20 + 1;
        v3[1] = v20 + 1;
      }
      v23 = (_QWORD *)v3[3];
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v23 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v23[2] + 1, 1, v23);
      v25 = v23[2];
      v24 = v23[3];
      v26 = v45;
      if (v25 >= v24 >> 1)
      {
        v38 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v24 > 1), v25 + 1, 1, v23);
        v26 = v45;
        v23 = v38;
      }
      v23[2] = v25 + 1;
      v23[v25 + 4] = v22;
      v3[3] = v23;
      v27 = v22 + 1;
      if (__OFADD__(v22, 1))
        goto LABEL_62;
      v3[1] = v27;
      if (*(float *)&v26 != 0.0)
      {
        v28 = v3[2];
        if (v27 >= v28)
        {
          v39 = v22 + 2;
          if (__OFADD__(v27, 1))
            goto LABEL_67;
          if (v28 < v39)
          {
            v40 = (_BYTE *)ProtobufEncoder.growBufferSlow(to:)(v39);
            v26 = v45;
          }
          else
          {
            v3[1] = v39;
            v40 = (_BYTE *)(*v3 + v27);
          }
          *v40 = 13;
          v29 = v3[1];
          v30 = v29 + 4;
          if (__OFADD__(v29, 4))
            goto LABEL_63;
        }
        else
        {
          *(_BYTE *)(*v3 + v27) = 13;
          v29 = v22 + 2;
          v3[1] = v22 + 2;
          v30 = v22 + 6;
          if (__OFADD__(v22 + 2, 4))
            goto LABEL_63;
        }
        if (v3[2] < v30)
        {
          v43 = (_DWORD *)ProtobufEncoder.growBufferSlow(to:)(v30);
          HIDWORD(v26) = HIDWORD(v45);
          *v43 = v45;
        }
        else
        {
          v3[1] = v30;
          *(_DWORD *)(*v3 + v29) = v26;
        }
      }
      v31 = HIDWORD(v26);
      if (*((float *)&v26 + 1) != 0.0)
      {
        v32 = v3[1];
        v33 = v3[2];
        if (v32 >= v33)
        {
          v41 = v32 + 1;
          if (__OFADD__(v32, 1))
            goto LABEL_68;
          if (v33 < v41)
          {
            v42 = (_BYTE *)ProtobufEncoder.growBufferSlow(to:)(v41);
          }
          else
          {
            v3[1] = v41;
            v42 = (_BYTE *)(*v3 + v32);
          }
          *v42 = 21;
          v34 = v3[1];
          v35 = v34 + 4;
          if (__OFADD__(v34, 4))
            goto LABEL_64;
        }
        else
        {
          *(_BYTE *)(*v3 + v32) = 21;
          v34 = v32 + 1;
          v3[1] = v34;
          v35 = v34 + 4;
          if (__OFADD__(v34, 4))
            goto LABEL_64;
        }
        if (v3[2] >= v35)
        {
          v3[1] = v35;
          *(_DWORD *)(*v3 + v34) = v31;
        }
        else
        {
          *(_DWORD *)ProtobufEncoder.growBufferSlow(to:)(v35) = v31;
        }
      }
      ProtobufEncoder.endLengthDelimited()();
    }
    return swift_bridgeObjectRelease();
  }
  return result;
}

float *closure #1 in closure #2 in MeshGradient.Locations.encode(to:)(float *result, _QWORD *a2)
{
  float *v3;
  uint64_t v4;
  float v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;

  v3 = result;
  v4 = 13;
  while (1)
  {
    v5 = *v3;
    if (*v3 != 0.0)
      break;
LABEL_4:
    ++v3;
    v4 += 8;
    if (v4 == 93)
      return result;
  }
  v6 = a2[1];
  v7 = a2[2];
  if (v6 < v7)
  {
    *(_BYTE *)(*a2 + v6) = v4;
    v8 = v6 + 1;
    a2[1] = v8;
    result = (float *)(v8 + 4);
    if (__OFADD__(v8, 4))
      goto LABEL_18;
    goto LABEL_8;
  }
  result = (float *)(v6 + 1);
  if (__OFADD__(v6, 1))
    goto LABEL_19;
  if (v7 < (uint64_t)result)
  {
    v9 = (_BYTE *)ProtobufEncoder.growBufferSlow(to:)((int64_t)result);
  }
  else
  {
    a2[1] = result;
    v9 = (_BYTE *)(*a2 + v6);
  }
  *v9 = v4 & 0x7D;
  v8 = a2[1];
  result = (float *)(v8 + 4);
  if (!__OFADD__(v8, 4))
  {
LABEL_8:
    if (a2[2] >= (uint64_t)result)
    {
      a2[1] = result;
      result = (float *)(*a2 + v8);
    }
    else
    {
      result = (float *)ProtobufEncoder.growBufferSlow(to:)((int64_t)result);
    }
    *result = v5;
    goto LABEL_4;
  }
LABEL_18:
  __break(1u);
LABEL_19:
  __break(1u);
  return result;
}

uint64_t MeshGradient.Locations.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  unint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  __n128 v16;
  unint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t result;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD v49[5];

  v5 = a1[1];
  v6 = a1[2];
  v7 = (_QWORD *)MEMORY[0x24BEE4AF8];
  v8 = (_QWORD *)MEMORY[0x24BEE4AF8];
  while (1)
  {
    if (v5 >= v6)
    {
      a1[3] = 0;
      v43 = v7[2];
      result = swift_bridgeObjectRelease();
      if (!v43)
        v7 = v8;
      *(_QWORD *)a2 = v7;
      *(_BYTE *)(a2 + 8) = v43 != 0;
      return result;
    }
    v10 = a1[3];
    if (v10)
    {
      v11 = a1[4];
      if (v5 < v11)
        goto LABEL_12;
      if (v11 < v5)
        goto LABEL_61;
      a1[3] = 0;
    }
    v10 = ProtobufDecoder.decodeVarint()();
    if (v2)
      goto LABEL_62;
    if (v10 < 8)
      goto LABEL_61;
LABEL_12:
    if (v10 >> 3 == 2)
      break;
    if (v10 >> 3 != 1)
    {
      switch(v10 & 7)
      {
        case 0uLL:
          ProtobufDecoder.decodeVarint()();
          if (v2)
            goto LABEL_62;
          goto LABEL_4;
        case 1uLL:
          v9 = a1[1] + 8;
          if (v6 >= v9)
            goto LABEL_3;
          goto LABEL_61;
        case 2uLL:
          v42 = ProtobufDecoder.decodeVarint()();
          if (v2)
            goto LABEL_62;
          if (v42 < 0)
            goto LABEL_75;
          v9 = a1[1] + v42;
          if (v6 < v9)
            goto LABEL_61;
LABEL_3:
          a1[1] = v9;
          break;
        case 5uLL:
          v9 = a1[1] + 4;
          if (v6 < v9)
            goto LABEL_61;
          goto LABEL_3;
        default:
          goto LABEL_61;
      }
      goto LABEL_4;
    }
    if ((v10 & 7) != 2)
      goto LABEL_61;
    v12 = (_QWORD *)a1[5];
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v12[2] + 1, 1, v12);
    v14 = v12[2];
    v13 = v12[3];
    if (v14 >= v13 >> 1)
      v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v13 > 1), v14 + 1, 1, v12);
    v12[2] = v14 + 1;
    v12[v14 + 4] = v6;
    a1[5] = v12;
    v15 = ProtobufDecoder.decodeVarint()();
    if (v2)
      goto LABEL_62;
    if (v15 < 0)
    {
      __break(1u);
LABEL_70:
      __break(1u);
LABEL_71:
      __break(1u);
LABEL_72:
      __break(1u);
LABEL_73:
      __break(1u);
LABEL_74:
      __break(1u);
LABEL_75:
      __break(1u);
      __break(1u);
      v45 = specialized _ArrayBuffer._consumeAndCreateNew()((_QWORD *)a2);
      v46 = v45[2];
      if (v46)
        goto LABEL_68;
      __break(1u);
      v45 = (_QWORD *)a1[5];
      if (v45[2])
      {
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
        {
          v46 = v45[2];
          if (v46)
          {
LABEL_68:
            v47 = v46 - 1;
            v48 = v45[v47 + 4];
            v45[2] = v47;
            swift_bridgeObjectRelease();
            result = swift_bridgeObjectRelease();
            a1[5] = v45;
            a1[2] = v48;
            return result;
          }
LABEL_79:
          __break(1u);
          JUMPOUT(0x2350E68D0);
        }
      }
      else
      {
        __break(1u);
      }
      v45 = specialized _ArrayBuffer._consumeAndCreateNew()(v45);
      v46 = v45[2];
      if (v46)
        goto LABEL_68;
      goto LABEL_79;
    }
    v17 = a1[1] + v15;
    if (v6 < v17)
      goto LABEL_61;
    a1[2] = v17;
    closure #1 in MeshGradient.Locations.init(from:)((unint64_t)a1, v49, v16);
    v18 = (_QWORD *)a1[5];
    if (!v18[2])
      goto LABEL_71;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
    {
      v19 = v18[2];
      if (!v19)
        goto LABEL_73;
    }
    else
    {
      v18 = specialized _ArrayBuffer._consumeAndCreateNew()(v18);
      v19 = v18[2];
      if (!v19)
        goto LABEL_73;
    }
    v20 = v19 - 1;
    v21 = v18[v20 + 4];
    v18[2] = v20;
    a1[5] = v18;
    a1[2] = v21;
    v22 = v49[0];
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v8[2] + 1, 1, v8);
    v24 = v8[2];
    v23 = v8[3];
    if (v24 >= v23 >> 1)
      v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v23 > 1), v24 + 1, 1, v8);
    v8[2] = v24 + 1;
    v8[v24 + 4] = v22;
LABEL_4:
    v5 = a1[1];
    v6 = a1[2];
  }
  if ((v10 & 7) != 2)
    goto LABEL_61;
  v25 = (_QWORD *)a1[5];
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v25 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v25[2] + 1, 1, v25);
  v27 = v25[2];
  v26 = v25[3];
  if (v27 >= v26 >> 1)
    v25 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v26 > 1), v27 + 1, 1, v25);
  v25[2] = v27 + 1;
  v25[v27 + 4] = v6;
  a1[5] = v25;
  v28 = ProtobufDecoder.decodeVarint()();
  if (v2)
    goto LABEL_62;
  if (v28 < 0)
    goto LABEL_70;
  v29 = a1[1] + v28;
  if (v6 >= v29)
  {
    a1[2] = v29;
    closure #2 in MeshGradient.Locations.init(from:)((unint64_t)a1, v49);
    v30 = (_QWORD *)a1[5];
    if (!v30[2])
      goto LABEL_72;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
    {
      v31 = v30[2];
      if (!v31)
        goto LABEL_74;
    }
    else
    {
      v30 = specialized _ArrayBuffer._consumeAndCreateNew()(v30);
      v31 = v30[2];
      if (!v31)
        goto LABEL_74;
    }
    v32 = v31 - 1;
    v33 = v30[v32 + 4];
    v30[2] = v32;
    a1[5] = v30;
    a1[2] = v33;
    v34 = v49[0];
    v35 = v49[1];
    v36 = v49[2];
    v37 = v49[3];
    v38 = v49[4];
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v7[2] + 1, 1, v7);
    v40 = v7[2];
    v39 = v7[3];
    if (v40 >= v39 >> 1)
      v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v39 > 1), v40 + 1, 1, v7);
    v7[2] = v40 + 1;
    v41 = &v7[5 * v40];
    v41[4] = v34;
    v41[5] = v35;
    v41[6] = v36;
    v41[7] = v37;
    v41[8] = v38;
    goto LABEL_4;
  }
LABEL_61:
  lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
  swift_allocError();
  swift_willThrow();
LABEL_62:
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

unint64_t closure #1 in MeshGradient.Locations.init(from:)@<X0>(unint64_t result@<X0>, _QWORD *a2@<X8>, __n128 a3@<Q0>)
{
  uint64_t v3;
  _QWORD *v4;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unsigned __int32 *v9;
  unsigned __int32 *v10;
  __n128 v11;
  __n128 v12;

  v4 = (_QWORD *)result;
  v6 = *(_QWORD *)(result + 8);
  v7 = *(_QWORD *)(result + 16);
  v12.n128_u64[0] = 0;
  if (v6 >= v7)
  {
LABEL_41:
    v4[3] = 0;
    *a2 = v12.n128_u64[0];
    return result;
  }
  a3.n128_u64[0] = 0;
  v12 = a3;
  while (1)
  {
    result = v4[3];
    if (result)
    {
      v8 = v4[4];
      if (v6 < v8)
        goto LABEL_9;
      if (v8 < v6)
        break;
      v4[3] = 0;
    }
    result = ProtobufDecoder.decodeVarint()();
    if (v3)
      return result;
    if (result <= 7)
      break;
LABEL_9:
    if (result >> 3 == 2)
    {
      if ((result & 7) == 2)
      {
        result = ProtobufDecoder.decodeVarint()();
        if (v3)
          return result;
        if ((result & 0x8000000000000000) != 0)
          goto LABEL_45;
        v10 = (unsigned __int32 *)v4[1];
        if (v7 < (unint64_t)v10 + result)
          break;
        v4[3] = 21;
        v4[4] = (char *)v10 + result;
      }
      else
      {
        if ((result & 7) != 5)
          break;
        v10 = (unsigned __int32 *)v4[1];
      }
      v6 = (unint64_t)(v10 + 1);
      if (v7 < (unint64_t)(v10 + 1))
        break;
      v11 = v12;
      v11.n128_u32[1] = *v10;
    }
    else
    {
      if (result >> 3 != 1)
      {
        switch(result & 7)
        {
          case 0uLL:
            result = ProtobufDecoder.decodeVarint()();
            if (v3)
              return result;
            v6 = v4[1];
            goto LABEL_40;
          case 1uLL:
            v6 = v4[1] + 8;
            goto LABEL_38;
          case 2uLL:
            result = ProtobufDecoder.decodeVarint()();
            if (v3)
              return result;
            if ((result & 0x8000000000000000) != 0)
              goto LABEL_46;
            v6 = v4[1] + result;
LABEL_38:
            if (v7 >= v6)
              goto LABEL_39;
            goto LABEL_42;
          case 5uLL:
            v6 = v4[1] + 4;
            goto LABEL_38;
          default:
            goto LABEL_42;
        }
      }
      if ((result & 7) == 2)
      {
        result = ProtobufDecoder.decodeVarint()();
        if (v3)
          return result;
        if ((result & 0x8000000000000000) != 0)
        {
          __break(1u);
LABEL_45:
          __break(1u);
LABEL_46:
          __break(1u);
          JUMPOUT(0x2350E6B28);
        }
        v9 = (unsigned __int32 *)v4[1];
        if (v7 < (unint64_t)v9 + result)
          break;
        v4[3] = 13;
        v4[4] = (char *)v9 + result;
      }
      else
      {
        if ((result & 7) != 5)
          break;
        v9 = (unsigned __int32 *)v4[1];
      }
      v6 = (unint64_t)(v9 + 1);
      if (v7 < (unint64_t)(v9 + 1))
        break;
      v11 = v12;
      v11.n128_u32[0] = *v9;
    }
    v12 = v11;
LABEL_39:
    v4[1] = v6;
LABEL_40:
    v7 = v4[2];
    if (v6 >= v7)
      goto LABEL_41;
  }
LABEL_42:
  lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
  swift_allocError();
  return swift_willThrow();
}

unint64_t closure #2 in MeshGradient.Locations.init(from:)@<X0>(unint64_t result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  _QWORD *v3;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int *v15;
  int v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;

  v3 = (_QWORD *)result;
  v19 = 0;
  v17 = 0u;
  v18 = 0u;
  v5 = *(_QWORD *)(result + 8);
  v6 = *(_QWORD *)(result + 16);
  v7 = 0;
  if (v5 < v6)
  {
    while (1)
    {
      v12 = v3[3];
      if (!v12)
        goto LABEL_12;
      v13 = v3[4];
      if (v5 >= v13)
        break;
LABEL_14:
      v14 = v12 & 7;
      if (v12 - 8 > 0x4F)
      {
        switch(v12 & 7)
        {
          case 0uLL:
            result = ProtobufDecoder.decodeVarint()();
            if (v2)
              return result;
            v5 = v3[1];
            break;
          case 1uLL:
            v5 = v3[1] + 8;
            goto LABEL_5;
          case 2uLL:
            result = ProtobufDecoder.decodeVarint()();
            if (v2)
              return result;
            if ((result & 0x8000000000000000) != 0)
              goto LABEL_35;
            v5 = v3[1] + result;
LABEL_5:
            if (v6 < v5)
              goto LABEL_31;
            v3[1] = v5;
            break;
          case 5uLL:
            v5 = v3[1] + 4;
            goto LABEL_5;
          default:
            goto LABEL_31;
        }
      }
      else
      {
        if (v14 == 2)
        {
          result = ProtobufDecoder.decodeVarint()();
          if (v2)
            return result;
          if ((result & 0x8000000000000000) != 0)
          {
            __break(1u);
LABEL_35:
            __break(1u);
            JUMPOUT(0x2350E6D50);
          }
          v15 = (int *)v3[1];
          if (v6 < (unint64_t)v15 + result)
          {
LABEL_31:
            lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
            swift_allocError();
            return swift_willThrow();
          }
          v3[3] = v12 & 0xFFFFFFFFFFFFFFF8 | 5;
          v3[4] = (char *)v15 + result;
        }
        else
        {
          if (v14 != 5)
            goto LABEL_31;
          v15 = (int *)v3[1];
        }
        v5 = (unint64_t)(v15 + 1);
        if (v6 < (unint64_t)(v15 + 1))
          goto LABEL_31;
        v16 = *v15;
        v3[1] = v5;
        *((_DWORD *)&v17 + (v12 >> 3) - 1) = v16;
      }
      v6 = v3[2];
      if (v5 >= v6)
      {
        v10 = *((_QWORD *)&v17 + 1);
        v11 = v17;
        v8 = *((_QWORD *)&v18 + 1);
        v9 = v18;
        v7 = v19;
        goto LABEL_3;
      }
    }
    if (v13 < v5)
      goto LABEL_31;
    v3[3] = 0;
LABEL_12:
    result = ProtobufDecoder.decodeVarint()();
    if (v2)
      return result;
    v12 = result;
    if (result <= 7)
      goto LABEL_31;
    goto LABEL_14;
  }
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = 0;
LABEL_3:
  v3[3] = 0;
  *a2 = v11;
  a2[1] = v10;
  a2[2] = v9;
  a2[3] = v8;
  a2[4] = v7;
  return result;
}

uint64_t protocol witness for ProtobufEncodableMessage.encode(to:) in conformance MeshGradient.Locations(uint64_t a1)
{
  return MeshGradient.Locations.encode(to:)(a1);
}

uint64_t protocol witness for ProtobufDecodableMessage.init(from:) in conformance MeshGradient.Locations@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return MeshGradient.Locations.init(from:)(a1, a2);
}

uint64_t specialized static MeshGradient.BezierPoint.== infix(_:_:)(float32x2_t *a1, float32x2_t *a2)
{
  int32x2_t v2;
  int32x2_t v3;
  int32x2_t v4;
  int32x2_t v5;
  int32x2_t v6;

  v2 = vceq_f32(*a1, *a2);
  if ((v2.i32[0] & v2.i32[1] & 1) == 0)
    return 0;
  v3 = vceq_f32(a1[1], a2[1]);
  if ((v3.i32[0] & v3.i32[1] & 1) == 0)
    return 0;
  v4 = vceq_f32(a1[2], a2[2]);
  if ((v4.i32[0] & v4.i32[1] & 1) == 0)
    return 0;
  v5 = vceq_f32(a1[3], a2[3]);
  if ((v5.i32[0] & v5.i32[1] & 1) == 0)
    return 0;
  v6 = vceq_f32(a1[4], a2[4]);
  return v6.i32[0] & v6.i32[1] & 1;
}

uint64_t specialized static MeshGradient._Paint.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  float32x2_t *v4;
  float32x4_t *v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  float32x2_t *v9;
  float32x4_t *v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unsigned __int8 v14;
  float32x4_t v16;
  float32x4_t v17;

  v4 = *(float32x2_t **)a1;
  v5 = *(float32x4_t **)(a1 + 16);
  v7 = *(_QWORD *)(a1 + 40);
  v6 = *(_QWORD *)(a1 + 48);
  v8 = *(_DWORD *)(a1 + 56);
  v9 = *(float32x2_t **)a2;
  v10 = *(float32x4_t **)(a2 + 16);
  v12 = *(_QWORD *)(a2 + 40);
  v11 = *(_QWORD *)(a2 + 48);
  v13 = *(_DWORD *)(a2 + 56);
  if ((*(_BYTE *)(a1 + 8) & 1) == 0)
  {
    if ((*(_BYTE *)(a2 + 8) & 1) != 0)
      return 0;
    v16 = *(float32x4_t *)(a2 + 24);
    v17 = *(float32x4_t *)(a1 + 24);
    if ((specialized static Array<A>.== infix(_:_:)(v4, v9) & 1) == 0)
      return 0;
LABEL_7:
    specialized static Array<A>.== infix(_:_:)(v5, v10);
    return v14 & (v6 == v11) & (v8 == v13) & vminv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(vmovn_s32(vceqq_f32(v17, v16)), 0xFuLL))) & (v7 == v12);
  }
  if ((*(_BYTE *)(a2 + 8) & 1) != 0)
  {
    v16 = *(float32x4_t *)(a2 + 24);
    v17 = *(float32x4_t *)(a1 + 24);
    if ((specialized static Array<A>.== infix(_:_:)((uint64_t)v4, (uint64_t)v9) & 1) != 0)
      goto LABEL_7;
  }
  return 0;
}

uint64_t specialized static MeshGradient.Locations.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  float32x2_t *v4;
  float32x2_t *v5;
  char v6;

  v4 = *(float32x2_t **)a1;
  v5 = *(float32x2_t **)a2;
  v6 = *(_BYTE *)(a2 + 8);
  if ((*(_BYTE *)(a1 + 8) & 1) != 0)
  {
    if ((v6 & 1) != 0)
      return specialized static Array<A>.== infix(_:_:)((uint64_t)v4, (uint64_t)v5);
    return 0;
  }
  if ((v6 & 1) != 0)
    return 0;
  return specialized static Array<A>.== infix(_:_:)(v4, v5);
}

BOOL specialized static MeshGradient.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  _BOOL8 result;
  float32x2_t *v4;
  float32x4_t *v5;
  char v6;
  uint64_t v7;
  int v8;
  int v9;
  float32x4_t *v10;
  char v11;
  uint64_t v12;
  int v13;
  int v14;
  __n128 v15;
  char v16;
  uint64_t v17;
  char v18;
  char v19;

  result = 0;
  if (*(_QWORD *)a1 == *(_QWORD *)a2 && *(_QWORD *)(a1 + 8) == *(_QWORD *)(a2 + 8))
  {
    v4 = *(float32x2_t **)(a1 + 16);
    v5 = *(float32x4_t **)(a1 + 32);
    v6 = *(_BYTE *)(a1 + 40);
    v7 = *(_QWORD *)(a1 + 48);
    v8 = *(unsigned __int8 *)(a1 + 56);
    v9 = *(unsigned __int8 *)(a1 + 57);
    v10 = *(float32x4_t **)(a2 + 32);
    v11 = *(_BYTE *)(a2 + 40);
    v12 = *(_QWORD *)(a2 + 48);
    v13 = *(unsigned __int8 *)(a2 + 56);
    v14 = *(unsigned __int8 *)(a2 + 57);
    if ((*(_BYTE *)(a1 + 24) & 1) != 0)
    {
      if ((*(_BYTE *)(a2 + 24) & 1) == 0
        || (specialized static Array<A>.== infix(_:_:)((uint64_t)v4, *(_QWORD *)(a2 + 16)) & 1) == 0)
      {
        return 0;
      }
    }
    else if ((*(_BYTE *)(a2 + 24) & 1) != 0
           || (specialized static Array<A>.== infix(_:_:)(v4, *(float32x2_t **)(a2 + 16)) & 1) == 0)
    {
      return 0;
    }
    if ((v6 & 1) != 0)
    {
      if ((v11 & 1) == 0)
        return 0;
      v15.n128_u64[0] = specialized static Array<A>.== infix(_:_:)(v5, v10);
      if ((v16 & 1) == 0)
        return 0;
    }
    else
    {
      if ((v11 & 1) != 0)
        return 0;
      swift_bridgeObjectRetain();
      v17 = swift_bridgeObjectRetain();
      v18 = specialized static Array<A>.== infix(_:_:)(v17, (uint64_t)v10);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v18 & 1) == 0)
        return 0;
    }
    if (v7 == v12)
    {
      if (v8 != v13)
        return 0;
    }
    else
    {
      v19 = (*(uint64_t (**)(uint64_t, __n128))(*(_QWORD *)v7 + 88))(v12, v15);
      result = 0;
      if ((v19 & 1) == 0 || ((v8 ^ v13) & 1) != 0)
        return result;
    }
    return v9 == v14;
  }
  return result;
}

void specialized static MeshGradient.Colors.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  float32x4_t *v2;
  uint64_t v3;

  v2 = *(float32x4_t **)a2;
  if ((*(_BYTE *)(a1 + 8) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 8) & 1) != 0)
      specialized static Array<A>.== infix(_:_:)(*(float32x4_t **)a1, *(float32x4_t **)a2);
  }
  else if ((*(_BYTE *)(a2 + 8) & 1) == 0)
  {
    swift_bridgeObjectRetain();
    v3 = swift_bridgeObjectRetain();
    specialized static Array<A>.== infix(_:_:)(v3, (uint64_t)v2);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
}

uint64_t specialized MeshGradient.withResolvedColors(in:_:)(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4, float a5, float a6, float a7, float a8)
{
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t isStackAllocationSafe;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  double v29;
  double v30;
  double v31;
  double v32;
  void *v33;
  uint64_t v34;
  void *v35;
  uint64_t v37;
  uint64_t v39[2];
  uint64_t v40;
  char v41;
  uint64_t v42;

  v42 = *MEMORY[0x24BDAC8D0];
  v14 = a2[4];
  if ((a2[5] & 1) != 0)
  {
    if (*(_BYTE *)(a4 + 57))
    {
      if (*(_BYTE *)(a4 + 57) == 1)
      {
        if ((*(_BYTE *)(a4 + 56) & 1) != 0)
          v15 = 17;
        else
          v15 = 1;
      }
      else if ((*(_BYTE *)(a4 + 56) & 1) != 0)
      {
        v15 = 19;
      }
      else
      {
        v15 = 3;
      }
    }
    else if ((*(_BYTE *)(a4 + 56) & 1) != 0)
    {
      v15 = 16;
    }
    else
    {
      v15 = 0;
    }
    outlined init with take of MeshGradient.Locations((uint64_t *)(a4 + 16), (uint64_t)v39);
    v24 = *(_QWORD *)a4;
    v25 = *(_QWORD *)(a4 + 8);
    outlined init with take of MeshGradient.Locations(v39, (uint64_t)&v40);
    v26 = v24 * v25;
    if ((v41 & 1) == 0)
    {
      if ((unsigned __int128)(v24 * (__int128)v25) >> 64 == (v24 * v25) >> 63)
      {
        v35 = *(void **)(a3 + 40);
        v28 = v40 + 32;
        swift_retain();
        outlined retain of LeafLayoutEngine<_ShapeView<Rectangle, MeshGradient>>(a4);
        swift_bridgeObjectRetain();
        outlined retain of LinearGradient((uint64_t)v39);
        LODWORD(v37) = v15;
        v33 = v35;
        v34 = 1;
        goto LABEL_26;
      }
      goto LABEL_30;
    }
    if ((unsigned __int128)(v24 * (__int128)v25) >> 64 == (v24 * v25) >> 63)
    {
      v27 = *(void **)(a3 + 40);
      v28 = v40 + 32;
      swift_retain();
      outlined retain of LeafLayoutEngine<_ShapeView<Rectangle, MeshGradient>>(a4);
      swift_bridgeObjectRetain();
      outlined retain of LinearGradient((uint64_t)v39);
      LODWORD(v37) = v15;
      v33 = v27;
      v34 = 2;
LABEL_26:
      *(float *)&v29 = a5;
      *(float *)&v30 = a6;
      *(float *)&v31 = a7;
      *(float *)&v32 = a8;
      objc_msgSend(v33, sel_setMeshGradientType_positions_colors_count_width_background_colorSpace_flags_, v34, v28, v14 + 32, v26, v24, 2, v29, v30, v31, v32, v37);
      outlined release of LinearGradient((uint64_t)v39);
      swift_release();
      swift_bridgeObjectRelease();
      return outlined release of LeafLayoutEngine<_ShapeView<Rectangle, MeshGradient>>(a4);
    }
LABEL_29:
    __break(1u);
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  v16 = a2[1];
  v17 = *a2 * v16;
  if ((unsigned __int128)(*a2 * (__int128)v16) >> 64 != v17 >> 63)
  {
    __break(1u);
    goto LABEL_29;
  }
  if (v17 < 0)
  {
LABEL_31:
    __break(1u);
LABEL_32:
    __break(1u);
  }
  if ((unint64_t)(v17 + 0x800000000000000) >> 60)
    goto LABEL_32;
  v18 = *a1;
  v19 = a1[1];
  swift_retain();
  outlined retain of LeafLayoutEngine<_ShapeView<Rectangle, MeshGradient>>(a4);
  swift_retain();
  outlined retain of LeafLayoutEngine<_ShapeView<Rectangle, MeshGradient>>(a4);
  swift_retain();
  swift_bridgeObjectRetain();
  isStackAllocationSafe = swift_retain();
  if (16 * v17 < 1025
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x24BDAC7A8](isStackAllocationSafe);
    v22 = (char *)&v39[-1] - v21;
    swift_retain();
    outlined retain of LeafLayoutEngine<_ShapeView<Rectangle, MeshGradient>>(a4);
    specialized closure #1 in MeshGradient.withResolvedColors(in:_:)((uint64_t)v22, v17, v17, v14, v18, v19, a3, a4);
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
  }
  else
  {
    v23 = swift_slowAlloc();
    swift_retain();
    outlined retain of LeafLayoutEngine<_ShapeView<Rectangle, MeshGradient>>(a4);
    specialized closure #1 in MeshGradient.withResolvedColors(in:_:)(v23, v17, v17, v14, v18, v19, a3, a4);
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    MEMORY[0x23B7C9D54](v23, -1, -1);
  }
  swift_release();
  outlined release of LeafLayoutEngine<_ShapeView<Rectangle, MeshGradient>>(a4);
  swift_release();
  return outlined release of LeafLayoutEngine<_ShapeView<Rectangle, MeshGradient>>(a4);
}

unint64_t instantiation function for generic protocol witness table for MeshGradient._Paint(uint64_t a1)
{
  unint64_t result;

  *(_QWORD *)(a1 + 8) = lazy protocol witness table accessor for type MeshGradient._Paint and conformance MeshGradient._Paint();
  result = lazy protocol witness table accessor for type MeshGradient._Paint and conformance MeshGradient._Paint();
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

uint64_t associated type witness table accessor for Animatable.AnimatableData : VectorArithmetic in MeshGradient._Paint()
{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type AnimatablePair<AnimatableArray<Float>, AnimatablePair<AnimatableArray<AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>, AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>> and conformance AnimatablePair<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for AnimatablePair<AnimatableArray<Float>, AnimatablePair<AnimatableArray<AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>, AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>>, (uint64_t)&protocol conformance descriptor for AnimatablePair<A, B>);
}

uint64_t destroy for MeshGradient()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t initializeWithCopy for MeshGradient(uint64_t a1, uint64_t a2)
{
  char v3;
  char v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v3 = *(_BYTE *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = v3;
  v4 = *(_BYTE *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = v4;
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_WORD *)(a1 + 56) = *(_WORD *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for MeshGradient(uint64_t a1, uint64_t a2)
{
  char v4;
  char v5;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v4 = *(_BYTE *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v5 = *(_BYTE *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = v5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_retain();
  swift_release();
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_BYTE *)(a1 + 57) = *(_BYTE *)(a2 + 57);
  return a1;
}

uint64_t assignWithTake for MeshGradient(uint64_t a1, uint64_t a2)
{
  char v4;
  char v5;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v4 = *(_BYTE *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = v4;
  swift_bridgeObjectRelease();
  v5 = *(_BYTE *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = v5;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_release();
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_BYTE *)(a1 + 57) = *(_BYTE *)(a2 + 57);
  return a1;
}

uint64_t getEnumTagSinglePayload for MeshGradient(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 58))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 48);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for MeshGradient(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_WORD *)(result + 56) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 58) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 48) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 58) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for MeshGradient()
{
  return &type metadata for MeshGradient;
}

ValueMetadata *type metadata accessor for MeshGradient.Locations()
{
  return &type metadata for MeshGradient.Locations;
}

ValueMetadata *type metadata accessor for MeshGradient.Colors()
{
  return &type metadata for MeshGradient.Colors;
}

ValueMetadata *type metadata accessor for MeshGradient.BezierPoint()
{
  return &type metadata for MeshGradient.BezierPoint;
}

uint64_t initializeWithCopy for MeshGradient._Paint(uint64_t a1, uint64_t a2)
{
  char v3;

  v3 = *(_BYTE *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for MeshGradient._Paint(uint64_t a1, uint64_t a2)
{
  char v4;

  v4 = *(_BYTE *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  return a1;
}

uint64_t assignWithTake for MeshGradient._Paint(uint64_t a1, uint64_t a2)
{
  char v4;

  v4 = *(_BYTE *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  return a1;
}

uint64_t getEnumTagSinglePayload for MeshGradient._Paint(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 60))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for MeshGradient._Paint(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_DWORD *)(result + 56) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 60) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 16) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 60) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for MeshGradient._Paint()
{
  return &type metadata for MeshGradient._Paint;
}

uint64_t outlined init with take of MeshGradient.Locations(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *a1;
  *(_BYTE *)(a2 + 8) = *((_BYTE *)a1 + 8);
  *(_QWORD *)a2 = v2;
  return a2;
}

uint64_t PinnedScrollableViews.rawValue.getter()
{
  unsigned int *v0;

  return *v0;
}

uint64_t PinnedScrollableViews.init(rawValue:)@<X0>(uint64_t result@<X0>, _DWORD *a2@<X8>)
{
  *a2 = result;
  return result;
}

void static PinnedScrollableViews.sectionHeaders.getter(_DWORD *a1@<X8>)
{
  *a1 = 1;
}

void static PinnedScrollableViews.sectionFooters.getter(_DWORD *a1@<X8>)
{
  *a1 = 2;
}

unint64_t lazy protocol witness table accessor for type PinnedScrollableViews and conformance PinnedScrollableViews()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PinnedScrollableViews and conformance PinnedScrollableViews;
  if (!lazy protocol witness table cache variable for type PinnedScrollableViews and conformance PinnedScrollableViews)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for PinnedScrollableViews, &type metadata for PinnedScrollableViews);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PinnedScrollableViews and conformance PinnedScrollableViews);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PinnedScrollableViews and conformance PinnedScrollableViews;
  if (!lazy protocol witness table cache variable for type PinnedScrollableViews and conformance PinnedScrollableViews)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for PinnedScrollableViews, &type metadata for PinnedScrollableViews);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PinnedScrollableViews and conformance PinnedScrollableViews);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PinnedScrollableViews and conformance PinnedScrollableViews;
  if (!lazy protocol witness table cache variable for type PinnedScrollableViews and conformance PinnedScrollableViews)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for PinnedScrollableViews, &type metadata for PinnedScrollableViews);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PinnedScrollableViews and conformance PinnedScrollableViews);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PinnedScrollableViews and conformance PinnedScrollableViews;
  if (!lazy protocol witness table cache variable for type PinnedScrollableViews and conformance PinnedScrollableViews)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for PinnedScrollableViews, &type metadata for PinnedScrollableViews);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PinnedScrollableViews and conformance PinnedScrollableViews);
  }
  return result;
}

ValueMetadata *type metadata accessor for PinnedScrollableViews()
{
  return &type metadata for PinnedScrollableViews;
}

uint64_t CorePlatformImage.system.getter()
{
  uint64_t v0;
  unsigned __int8 *v1;

  v1 = (unsigned __int8 *)(v0 + OBJC_IVAR____TtC7SwiftUI17CorePlatformImage_system);
  swift_beginAccess();
  return *v1;
}

uint64_t CorePlatformImage.system.setter(char a1)
{
  uint64_t v1;
  _BYTE *v3;
  uint64_t result;

  v3 = (_BYTE *)(v1 + OBJC_IVAR____TtC7SwiftUI17CorePlatformImage_system);
  result = swift_beginAccess();
  *v3 = a1;
  return result;
}

uint64_t (*CorePlatformImage.system.modify())()
{
  swift_beginAccess();
  return CAHostingLayer.propertiesNeedingUpdate.modify;
}

id CorePlatformImage.kitImage.getter()
{
  uint64_t v0;
  id *v1;

  v1 = (id *)(v0 + OBJC_IVAR____TtC7SwiftUI17CorePlatformImage_kitImage);
  swift_beginAccess();
  return *v1;
}

void CorePlatformImage.kitImage.setter(void *a1)
{
  uint64_t v1;
  void **v3;
  void *v4;

  v3 = (void **)(v1 + OBJC_IVAR____TtC7SwiftUI17CorePlatformImage_kitImage);
  swift_beginAccess();
  v4 = *v3;
  *v3 = a1;

}

uint64_t (*CorePlatformImage.kitImage.modify())()
{
  swift_beginAccess();
  return DisplayList.GraphicsRenderer.platformViewMode.modify;
}

uint64_t CorePlatformImage.isTemplate.getter()
{
  uint64_t v0;
  unsigned __int8 *v1;

  v1 = (unsigned __int8 *)(v0 + OBJC_IVAR____TtC7SwiftUI17CorePlatformImage_isTemplate);
  swift_beginAccess();
  return *v1;
}

uint64_t CorePlatformImage.isTemplate.setter(char a1)
{
  uint64_t v1;
  _BYTE *v3;
  uint64_t result;

  v3 = (_BYTE *)(v1 + OBJC_IVAR____TtC7SwiftUI17CorePlatformImage_isTemplate);
  result = swift_beginAccess();
  *v3 = a1;
  return result;
}

uint64_t (*CorePlatformImage.isTemplate.modify())()
{
  swift_beginAccess();
  return CAHostingLayer.propertiesNeedingUpdate.modify;
}

id CorePlatformImage.__allocating_init(system:kitImage:)(unsigned __int8 a1, void *a2)
{
  objc_class *v2;
  _BYTE *v5;
  _BYTE *v6;
  id v7;
  id v8;
  objc_super v10;

  v5 = objc_allocWithZone(v2);
  v5[OBJC_IVAR____TtC7SwiftUI17CorePlatformImage_system] = a1;
  *(_QWORD *)&v5[OBJC_IVAR____TtC7SwiftUI17CorePlatformImage_kitImage] = a2;
  v6 = v5;
  v7 = a2;
  v6[OBJC_IVAR____TtC7SwiftUI17CorePlatformImage_isTemplate] = _CorePlatformImageIsTemplate(a1, v7);

  v10.receiver = v6;
  v10.super_class = v2;
  v8 = objc_msgSendSuper2(&v10, sel_init);

  return v8;
}

id CorePlatformImage.init(system:kitImage:)(unsigned __int8 a1, void *a2)
{
  _BYTE *v2;
  objc_class *ObjectType;
  _BYTE *v6;
  id v7;
  id v8;
  objc_super v10;

  ObjectType = (objc_class *)swift_getObjectType();
  v2[OBJC_IVAR____TtC7SwiftUI17CorePlatformImage_system] = a1;
  *(_QWORD *)&v2[OBJC_IVAR____TtC7SwiftUI17CorePlatformImage_kitImage] = a2;
  v6 = v2;
  v7 = a2;
  v6[OBJC_IVAR____TtC7SwiftUI17CorePlatformImage_isTemplate] = _CorePlatformImageIsTemplate(a1, v7);

  v10.receiver = v6;
  v10.super_class = ObjectType;
  v8 = objc_msgSendSuper2(&v10, sel_init);

  return v8;
}

id CorePlatformImage.__allocating_init(system:cgImage:scale:orientation:)(unsigned __int8 a1, void *a2, unsigned __int8 a3, double a4)
{
  objc_class *v4;
  uint64_t v7;
  id v8;
  _BYTE *v9;
  _BYTE *v10;
  id v11;
  id v12;
  objc_super v14;

  v7 = a1;
  v8 = _CorePlatformImageMakeKitImage(a4, v7, (uint64_t)a2, a3);
  v9 = objc_allocWithZone(v4);
  v9[OBJC_IVAR____TtC7SwiftUI17CorePlatformImage_system] = a1;
  *(_QWORD *)&v9[OBJC_IVAR____TtC7SwiftUI17CorePlatformImage_kitImage] = v8;
  v10 = v9;
  v11 = v8;
  v10[OBJC_IVAR____TtC7SwiftUI17CorePlatformImage_isTemplate] = _CorePlatformImageIsTemplate(v7, v11);

  v14.receiver = v10;
  v14.super_class = v4;
  v12 = objc_msgSendSuper2(&v14, sel_init);

  return v12;
}

id CorePlatformImage.cgImage.getter()
{
  uint64_t v0;
  unsigned __int8 *v1;
  uint64_t v2;
  void **v3;

  v1 = (unsigned __int8 *)(v0 + OBJC_IVAR____TtC7SwiftUI17CorePlatformImage_system);
  swift_beginAccess();
  v2 = *v1;
  v3 = (void **)(v0 + OBJC_IVAR____TtC7SwiftUI17CorePlatformImage_kitImage);
  swift_beginAccess();
  return (id)_CorePlatformImageGetCGImage(v2, *v3);
}

double CorePlatformImage.size.getter()
{
  uint64_t v0;
  unsigned __int8 *v1;
  uint64_t v2;
  void **v3;

  v1 = (unsigned __int8 *)(v0 + OBJC_IVAR____TtC7SwiftUI17CorePlatformImage_system);
  swift_beginAccess();
  v2 = *v1;
  v3 = (void **)(v0 + OBJC_IVAR____TtC7SwiftUI17CorePlatformImage_kitImage);
  swift_beginAccess();
  return _CorePlatformImageGetSize(v2, *v3);
}

uint64_t CorePlatformImage.scale.getter()
{
  return CorePlatformImage.scale.getter((uint64_t (*)(uint64_t, _QWORD))_CorePlatformImageGetScale);
}

uint64_t CorePlatformImage.imageOrientation.getter()
{
  uint64_t v0;
  unsigned __int8 *v1;
  uint64_t v2;
  void **v3;

  v1 = (unsigned __int8 *)(v0 + OBJC_IVAR____TtC7SwiftUI17CorePlatformImage_system);
  swift_beginAccess();
  v2 = *v1;
  v3 = (void **)(v0 + OBJC_IVAR____TtC7SwiftUI17CorePlatformImage_kitImage);
  swift_beginAccess();
  return _CorePlatformImageGetImageOrientation(v2, *v3);
}

uint64_t CorePlatformImage.baselineOffsetFromBottom.getter()
{
  return CorePlatformImage.scale.getter((uint64_t (*)(uint64_t, _QWORD))_CorePlatformImageGetBaselineOffsetFromBottom);
}

uint64_t CorePlatformImage.scale.getter(uint64_t (*a1)(uint64_t, _QWORD))
{
  uint64_t v1;
  unsigned __int8 *v3;
  uint64_t v4;
  _QWORD *v5;

  v3 = (unsigned __int8 *)(v1 + OBJC_IVAR____TtC7SwiftUI17CorePlatformImage_system);
  swift_beginAccess();
  v4 = *v3;
  v5 = (_QWORD *)(v1 + OBJC_IVAR____TtC7SwiftUI17CorePlatformImage_kitImage);
  swift_beginAccess();
  return a1(v4, *v5);
}

double CorePlatformImage.alignmentRect.getter()
{
  swift_beginAccess();
  swift_beginAccess();
  return _CorePlatformImageGetAlignmentRect();
}

void key path getter for CorePlatformImage.alignmentRect : CorePlatformImage(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  swift_beginAccess();
  swift_beginAccess();
  *(double *)a1 = _CorePlatformImageGetAlignmentRect();
  *(_QWORD *)(a1 + 8) = v2;
  *(_QWORD *)(a1 + 16) = v3;
  *(_QWORD *)(a1 + 24) = v4;
}

uint64_t key path setter for CorePlatformImage.alignmentRect : CorePlatformImage(double *a1, uint64_t *a2)
{
  double v2;
  double v3;
  double v4;
  double v5;
  uint64_t v6;
  unsigned __int8 *v7;
  uint64_t v8;
  _QWORD *v9;

  v2 = *a1;
  v3 = a1[1];
  v4 = a1[2];
  v5 = a1[3];
  v6 = *a2;
  v7 = (unsigned __int8 *)(*a2 + OBJC_IVAR____TtC7SwiftUI17CorePlatformImage_system);
  swift_beginAccess();
  v8 = *v7;
  v9 = (_QWORD *)(v6 + OBJC_IVAR____TtC7SwiftUI17CorePlatformImage_kitImage);
  swift_beginAccess();
  return _CorePlatformImageSetAlignmentRect(v8, *v9, v2, v3, v4, v5);
}

uint64_t CorePlatformImage.alignmentRect.setter(double a1, double a2, double a3, double a4)
{
  uint64_t v4;
  unsigned __int8 *v9;
  uint64_t v10;
  _QWORD *v11;

  v9 = (unsigned __int8 *)(v4 + OBJC_IVAR____TtC7SwiftUI17CorePlatformImage_system);
  swift_beginAccess();
  v10 = *v9;
  v11 = (_QWORD *)(v4 + OBJC_IVAR____TtC7SwiftUI17CorePlatformImage_kitImage);
  swift_beginAccess();
  return _CorePlatformImageSetAlignmentRect(v10, *v11, a1, a2, a3, a4);
}

void (*CorePlatformImage.alignmentRect.modify(double **a1))(double **a1)
{
  uint64_t v1;
  double *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = (double *)malloc(0x68uLL);
  *a1 = v3;
  v4 = OBJC_IVAR____TtC7SwiftUI17CorePlatformImage_system;
  *((_QWORD *)v3 + 10) = v1;
  *((_QWORD *)v3 + 11) = v4;
  swift_beginAccess();
  *((_QWORD *)v3 + 12) = OBJC_IVAR____TtC7SwiftUI17CorePlatformImage_kitImage;
  swift_beginAccess();
  *v3 = _CorePlatformImageGetAlignmentRect();
  *((_QWORD *)v3 + 1) = v5;
  *((_QWORD *)v3 + 2) = v6;
  *((_QWORD *)v3 + 3) = v7;
  return CorePlatformImage.alignmentRect.modify;
}

void CorePlatformImage.alignmentRect.modify(double **a1)
{
  double *v1;

  v1 = *a1;
  _CorePlatformImageSetAlignmentRect(*(unsigned __int8 *)(*((_QWORD *)*a1 + 10) + *((_QWORD *)*a1 + 11)), *(_QWORD *)(*((_QWORD *)*a1 + 10) + *((_QWORD *)*a1 + 12)), **a1, (*a1)[1], (*a1)[2], (*a1)[3]);
  free(v1);
}

id CorePlatformImage.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void CorePlatformImage.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

id CorePlatformImage.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for CorePlatformImage()
{
  return objc_opt_self();
}

uint64_t method lookup function for CorePlatformImage()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of CorePlatformImage.__allocating_init(system:kitImage:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 104))();
}

uint64_t Unmanaged.map<A>(_:)(uint64_t (*a1)(uint64_t), uint64_t a2, uint64_t a3)
{
  return a1(a3);
}

{
  uint64_t v3;

  v3 = a1(a3);
  swift_unknownObjectRelease();
  return v3;
}

BOOL static Unmanaged.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return a1 == a2;
}

uint64_t Unmanaged.map<A>(_:)(uint64_t (*a1)(void), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;

  closure #1 in Unmanaged.map<A>(_:)(a1, a4, a5, (uint64_t)&v6);
  return v6;
}

uint64_t closure #1 in Unmanaged.map<A>(_:)@<X0>(uint64_t (*a1)(void)@<X1>, uint64_t a2@<X3>, uint64_t a3@<X4>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[6];

  v10[5] = a1();
  v10[2] = a2;
  v10[3] = a3;
  type metadata accessor for Optional();
  v7 = type metadata accessor for Unmanaged();
  _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF((void (*)(char *, char *))protocol witness for OptionSet.init(rawValue:) in conformance NSCalendarUnit, (uint64_t)v10, MEMORY[0x24BEE4078], v7, v8, a4);
  return swift_unknownObjectRelease();
}

BOOL static Unmanaged.!= infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return a1 != a2;
}

uint64_t destroy for Text.Effect.CompositionContext()
{
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

_QWORD *initializeWithCopy for Text.Effect.CompositionContext(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for Text.Effect.CompositionContext(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  a1[2] = a2[2];
  swift_retain();
  swift_release();
  a1[3] = a2[3];
  swift_retain();
  swift_release();
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for Text.Effect.CompositionContext(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_release();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  swift_release();
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for Text.Effect.CompositionContext()
{
  return &type metadata for Text.Effect.CompositionContext;
}

uint64_t specialized RangeSet.upperBound.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  char v5;
  uint64_t v6;
  void (*v7)(_BYTE *, _QWORD);
  uint64_t v8;
  _BYTE v11[32];

  type metadata accessor for RangeSet<Int>.Ranges(0, &lazy cache variable for type metadata for RangeSet<Int>.Ranges, (uint64_t (*)(_QWORD, _QWORD, _QWORD))MEMORY[0x24BEE4908]);
  v1 = v0;
  v2 = *(_QWORD *)(v0 - 8);
  MEMORY[0x24BDAC7A8](v0);
  v4 = &v11[-v3 - 8];
  type metadata accessor for RangeSet<Int>.Ranges(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<Int>, (uint64_t (*)(_QWORD, _QWORD, _QWORD))MEMORY[0x24BEE4968]);
  RangeSet.ranges.getter();
  lazy protocol witness table accessor for type RangeSet<Int>.Ranges and conformance RangeSet<A>.Ranges((unint64_t *)&lazy protocol witness table cache variable for type RangeSet<Int>.Ranges and conformance RangeSet<A>.Ranges, MEMORY[0x24BEE4930]);
  v5 = dispatch thunk of Collection.isEmpty.getter();
  v6 = 0;
  if ((v5 & 1) == 0)
  {
    dispatch thunk of Collection.endIndex.getter();
    lazy protocol witness table accessor for type RangeSet<Int>.Ranges and conformance RangeSet<A>.Ranges(&lazy protocol witness table cache variable for type RangeSet<Int>.Ranges and conformance RangeSet<A>.Ranges, MEMORY[0x24BEE4920]);
    dispatch thunk of BidirectionalCollection.index(before:)();
    v7 = (void (*)(_BYTE *, _QWORD))dispatch thunk of Collection.subscript.read();
    v6 = *(_QWORD *)(v8 + 8);
    v7(v11, 0);
  }
  v11[0] = v5 & 1;
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  if (v11[0])
    return 0;
  else
    return v6;
}

uint64_t Text.Effect.Composition.displacements(at:context:)(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  void *v6;
  uint64_t v7;
  char v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  char v18;
  __int128 v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v6 = *(void **)v5;
  v7 = *(_QWORD *)(v5 + 8);
  v8 = *(_BYTE *)(v5 + 16);
  v9 = *(_DWORD *)(v5 + 40);
  v10 = *(_QWORD *)(v5 + 64);
  v15 = *a1;
  v16 = v6;
  v17 = v7;
  v18 = v8;
  v19 = *(_OWORD *)(v5 + 24);
  v20 = v9;
  v21 = a2;
  v22 = a3;
  v23 = a4;
  v24 = a5;
  v25 = 0;
  v26 = MEMORY[0x24BEE4B00];
  v27 = MEMORY[0x24BEE4B00];
  v11 = *(_QWORD *)(v10 + 16);
  if (v11)
  {
    outlined copy of Text.Layout.Line.Line(v6, v7, v8);
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    v12 = v10 + 64;
    do
    {
      Text.Effect.Composition.Operation.appendDisplacement(to:)((uint64_t)&v15);
      v12 += 88;
      --v11;
    }
    while (v11);
    swift_bridgeObjectRelease();
    v13 = v26;
    v6 = v16;
    v7 = v17;
    v8 = v18;
  }
  else
  {
    outlined copy of Text.Layout.Line.Line(v6, v7, v8);
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    v13 = MEMORY[0x24BEE4B00];
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  outlined consume of Text.Layout.Line.Line(v6, v7, v8);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  return v13;
}

uint64_t Text.Effect.Composition.resolve(in:)(uint64_t result)
{
  __int128 *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  int v6;
  __int128 *v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  char v14;
  __int128 v15;
  int v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;

  v2 = *((_QWORD *)v1 + 8);
  v3 = *(_QWORD *)(v2 + 16);
  if (v3)
  {
    v4 = result;
    v5 = *((_BYTE *)v1 + 16);
    v11 = *(__int128 *)((char *)v1 + 24);
    v12 = *v1;
    v6 = *((_DWORD *)v1 + 10);
    swift_bridgeObjectRetain();
    v7 = (__int128 *)(v2 + 64);
    do
    {
      v8 = *((_QWORD *)v7 + 6);
      v9 = *(v7 - 1);
      v17 = *(v7 - 2);
      v18 = v9;
      v10 = v7[1];
      v19 = *v7;
      v20 = v10;
      v21 = v7[2];
      v22 = v8;
      v13 = v12;
      v14 = v5;
      v15 = v11;
      v16 = v6;
      Text.Effect.Composition.Operation.resolve(line:in:)((uint64_t)&v13, v4);
      v7 = (__int128 *)((char *)v7 + 88);
      --v3;
    }
    while (v3);
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t Text.Effect.Composition.needsUpdate(at:context:)(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  Swift::UInt64 *v9;
  uint64_t v10;
  Swift::UInt64 v11;
  void *v12;
  uint64_t v13;
  Swift::UInt64 v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  Swift::UInt64 v18;
  Swift::UInt64 v19;
  Swift::UInt64 v20;
  uint64_t v21;
  Swift::Int v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  _QWORD *v36;
  uint64_t result;
  uint64_t v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  _QWORD *v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t (*v56)(Swift::UInt64, uint64_t, _QWORD *, uint64_t, uint64_t, uint64_t *, uint64_t);
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t *v61;
  char v65;
  _QWORD *v66;
  unint64_t v68;
  uint64_t (*v69)(Swift::UInt64, uint64_t, _QWORD *, uint64_t, uint64_t, uint64_t *, uint64_t);
  uint64_t v70;
  uint64_t *v71;
  uint64_t v72;
  uint64_t v73;
  void *v74;
  uint64_t v75;
  char v76;
  uint64_t v77;
  _QWORD v78[2];
  char v79;
  uint64_t v80;
  uint64_t v81;
  int v82;
  Swift::UInt64 v83;
  Swift::UInt64 v84;
  Swift::UInt64 v85;

  v6 = *(_QWORD *)(v5 + 64);
  v73 = *(_QWORD *)(v6 + 16);
  if (!v73)
    return 0;
  v7 = *a1;
  v71 = a4 + 5;
  v72 = v6 + 32;
  v61 = a4 + 3;
  v60 = a4 + 4;
  swift_bridgeObjectRetain_n();
  v8 = 0;
  while (1)
  {
    v9 = (Swift::UInt64 *)(v72 + 88 * v8);
    v11 = *v9;
    v10 = v9[1];
    v12 = (void *)v9[2];
    v13 = v9[3];
    v14 = v9[4];
    v15 = v9[5];
    v16 = v9[6];
    v17 = v9[7];
    v19 = v9[8];
    v18 = v9[9];
    v20 = v9[10];
    v75 = v16;
    v76 = v14;
    if (v17 >> 62)
      break;
    v78[0] = v9[2];
    v78[1] = v13;
    v79 = v14 & 1;
    v80 = v15;
    v81 = v16;
    v82 = v17;
    v83 = v19;
    v84 = v18;
    v85 = v20;
    v77 = v7;
    v27 = v12;
    v28 = v13;
    v74 = v12;
    v29 = v13;
    v70 = v13;
    v30 = v14;
    v68 = v17;
    outlined copy of Text.Effect.Composition.Operation(v11, v10, v27, v28, v14, v15, v16, v17);
    outlined copy of Text.Effect.Composition.Operation(v11, v10, v74, v29, v30, v15, v16, v17);
    v31 = v10;
    v32 = Text.Effect.Composition.needsUpdate(at:context:)(&v77, a2, a3, a4, a5);
    swift_beginAccess();
    if (specialized Set.contains(_:)(v11, a4[5]))
    {
      outlined consume of Text.Effect.Composition.Operation(v11, v31, v74, v70, v76, v15, v16, v17);
      outlined consume of Text.Effect.Composition.Operation(v11, v31, v74, v70, v76, v15, v16, v17);
      if ((v32 & 1) != 0)
        goto LABEL_45;
    }
    else
    {
      swift_beginAccess();
      v40 = *v60;
      if (*(_QWORD *)(*v60 + 16))
      {
        v65 = v32;
        v41 = specialized __RawDictionaryStorage.find<A>(_:)(v11);
        if ((v42 & 1) != 0)
        {
          v43 = *(_QWORD **)(*(_QWORD *)(v40 + 56) + 8 * v41);
          result = swift_endAccess();
          if ((v32 & 1) != 0)
          {
            outlined consume of Text.Effect.Composition.Operation(v11, v31, v74, v70, v76, v15, v16, v17);
            outlined consume of Text.Effect.Composition.Operation(v11, v31, v74, v70, v76, v15, v16, v17);
LABEL_45:
            v59 = 1;
LABEL_46:
            swift_bridgeObjectRelease_n();
            return v59;
          }
          v66 = v43;
          v44 = *(_QWORD *)(a2 + 16);
          if (v44)
          {
            result = specialized __RawDictionaryStorage.find<A>(_:)(v11);
            if ((v45 & 1) != 0)
              v44 = *(_QWORD *)(*(_QWORD *)(a2 + 56) + 8 * result);
            else
              v44 = 0;
          }
          v54 = v44 + v31;
          if (__OFADD__(v44, v31))
            goto LABEL_49;
          v78[0] = v7;
          v55 = v16;
          v56 = *(uint64_t (**)(Swift::UInt64, uint64_t, _QWORD *, uint64_t, uint64_t, uint64_t *, uint64_t))((*MEMORY[0x24BEE4EA0] & *v66) + 0xD0);
          v57 = v66;
          v65 = v56(v11, v54, v78, a2, a3, a4, a5);

          v58 = v55;
          v17 = v68;
          outlined consume of Text.Effect.Composition.Operation(v11, v31, v74, v70, v76, v15, v58, v68);
          v46 = v11;
          v47 = v31;
          v48 = v74;
          v49 = v70;
          v50 = v76;
          v51 = v15;
        }
        else
        {
          swift_endAccess();
          outlined consume of Text.Effect.Composition.Operation(v11, v31, v74, v70, v76, v15, v16, v17);
          v46 = v11;
          v47 = v31;
          v48 = v74;
          v49 = v70;
          v50 = v76;
          v51 = v15;
        }
        outlined consume of Text.Effect.Composition.Operation(v46, v47, v48, v49, v50, v51, v75, v17);
        if ((v65 & 1) != 0)
          goto LABEL_45;
      }
      else
      {
        swift_endAccess();
        outlined consume of Text.Effect.Composition.Operation(v11, v31, v74, v70, v76, v15, v16, v17);
        outlined consume of Text.Effect.Composition.Operation(v11, v31, v74, v70, v76, v15, v16, v17);
        if ((v32 & 1) != 0)
          goto LABEL_45;
      }
    }
LABEL_5:
    if (++v8 == v73)
    {
      v59 = 0;
      goto LABEL_46;
    }
  }
  if (v17 >> 62 == 1)
  {
    outlined consume of Text.Effect.Composition.Operation(v11, v10, v12, v13, v14, v15, v16, v17);
    goto LABEL_4;
  }
  swift_beginAccess();
  v21 = *v71;
  if (!*(_QWORD *)(*v71 + 16))
    goto LABEL_18;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v11);
  v22 = Hasher._finalize()();
  v23 = -1 << *(_BYTE *)(v21 + 32);
  v24 = v22 & ~v23;
  if (((*(_QWORD *)(v21 + 56 + ((v24 >> 3) & 0xFFFFFFFFFFFFF8)) >> v24) & 1) == 0)
    goto LABEL_18;
  v25 = *(_QWORD *)(v21 + 48);
  if (*(_QWORD *)(v25 + 8 * v24) == v11)
  {
LABEL_4:
    outlined consume of Text.Effect.Composition.Operation(v11, v10, v12, v13, v76, v15, v75, v17);
    goto LABEL_5;
  }
  v26 = ~v23;
  while (1)
  {
    v24 = (v24 + 1) & v26;
    if (((*(_QWORD *)(v21 + 56 + ((v24 >> 3) & 0xFFFFFFFFFFFFF8)) >> v24) & 1) == 0)
      break;
    if (*(_QWORD *)(v25 + 8 * v24) == v11)
      goto LABEL_4;
  }
LABEL_18:
  swift_beginAccess();
  v33 = *v61;
  if (!*(_QWORD *)(*v61 + 16) || (v34 = specialized __RawDictionaryStorage.find<A>(_:)(v11), (v35 & 1) == 0))
  {
    swift_endAccess();
    goto LABEL_4;
  }
  v36 = *(_QWORD **)(*(_QWORD *)(v33 + 56) + 8 * v34);
  result = swift_endAccess();
  v38 = *(_QWORD *)(a2 + 16);
  if (v38)
  {
    result = specialized __RawDictionaryStorage.find<A>(_:)(v11);
    if ((v39 & 1) != 0)
      v38 = *(_QWORD *)(*(_QWORD *)(a2 + 56) + 8 * result);
    else
      v38 = 0;
  }
  v52 = v38 + v10;
  if (!__OFADD__(v38, v10))
  {
    v78[0] = v7;
    v69 = *(uint64_t (**)(Swift::UInt64, uint64_t, _QWORD *, uint64_t, uint64_t, uint64_t *, uint64_t))((*MEMORY[0x24BEE4EA0] & *v36) + 0xD0);
    v53 = v36;
    LOBYTE(v69) = v69(v11, v52, v78, a2, a3, a4, a5);

    outlined consume of Text.Effect.Composition.Operation(v11, v10, v12, v13, v76, v15, v75, v17);
    outlined consume of Text.Effect.Composition.Operation(v11, v10, v12, v13, v76, v15, v75, v17);
    if ((v69 & 1) != 0)
      goto LABEL_45;
    goto LABEL_5;
  }
  __break(1u);
LABEL_49:
  __break(1u);
  return result;
}

double Text.Effect.Composition.metrics(at:context:)(CGFloat *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  int v13;
  uint64_t v14;
  double v15;
  double v16;
  double v17;
  double v18;
  void *v19;
  uint64_t v20;
  unint64_t v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  uint64_t v51;
  char v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t v56;
  Swift::Int v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  CFIndex v64;
  const __CTLine *v65;
  CFIndex v66;
  void *v67;
  double TypographicBounds;
  double v69;
  const __CTLine *v70;
  uint64_t v71;
  void *v72;
  uint64_t v73;
  char v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  void *v78;
  char v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char v87;
  void *v88;
  _QWORD *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char v93;
  void *v94;
  uint64_t v95;
  char v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  char *v100;
  const __CTLine *v101;
  const __CTLine *v102;
  void *v103;
  CFRange StringRange;
  CFIndex v105;
  void (*v106)(CGPoint *, _QWORD);
  uint64_t v107;
  char *v108;
  double v109;
  double v110;
  double v111;
  uint64_t v112;
  void *v113;
  uint64_t v114;
  uint64_t v115;
  _QWORD v117[2];
  uint64_t v118;
  uint64_t *v119;
  uint64_t *v120;
  CGFloat v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  char *v127;
  unint64_t v128;
  uint64_t v129;
  uint64_t v130;
  int v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  double v138;
  uint64_t v139;
  char *v140;
  char *v141;
  uint64_t v142;
  CGFloat leading;
  CGFloat descent;
  CGFloat ascent;
  CGPoint originsBuffer;
  CGPoint buffer;
  char v148;
  uint64_t v149;
  uint64_t v150;
  int v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  CFRange v156;
  CFRange v157;
  CFRange v158;

  v124 = a5;
  v123 = a3;
  v125 = a2;
  v155 = *MEMORY[0x24BDAC8D0];
  type metadata accessor for RangeSet<Text.Layout.CharacterIndex>.Ranges(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<Text.Layout.CharacterIndex>, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x24BEE4968]);
  v126 = v8;
  v118 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v127 = (char *)v117 - v9;
  v10 = *(_QWORD *)(v5 + 64);
  v130 = *(_QWORD *)(v10 + 16);
  if (!v130)
    return 0.0;
  v121 = *a1;
  v12 = *(void **)v5;
  v11 = *(_QWORD *)(v5 + 8);
  v129 = v10 + 32;
  v120 = (uint64_t *)(a4 + 40);
  v122 = a4;
  v119 = (uint64_t *)(a4 + 24);
  v13 = *(unsigned __int8 *)(v5 + 16);
  v117[1] = v10;
  swift_bridgeObjectRetain_n();
  v14 = 0;
  v15 = 0.0;
  v16 = 0.0;
  v17 = 0.0;
  v18 = 0.0;
  v131 = v13;
  do
  {
    v36 = (uint64_t *)(v129 + 88 * v14);
    v37 = v36[1];
    v142 = *v36;
    v38 = (char *)v36[3];
    v140 = (char *)v36[2];
    v39 = v36[4];
    v40 = v36[5];
    v41 = v36[6];
    v42 = v36[7];
    v44 = v36[8];
    v43 = v36[9];
    v45 = v36[10];
    v138 = v15;
    v137 = v41;
    v136 = v40;
    v135 = v39;
    v134 = v14;
    v141 = v38;
    if (!(v42 >> 62))
    {
      v19 = v140;
      *(_QWORD *)&buffer.x = v140;
      *(_QWORD *)&buffer.y = v38;
      v148 = v39 & 1;
      v149 = v40;
      v150 = v41;
      v151 = v42;
      v152 = v44;
      v153 = v43;
      v154 = v45;
      originsBuffer.x = v121;
      v20 = v142;
      v139 = v44;
      outlined copy of Text.Effect.Composition.Operation(v142, v37, v140, (uint64_t)v38, v39, v40, v41, v42);
      outlined copy of Text.Layout.Line.Line(v12, v11, v13);
      v21 = v42;
      v22 = Text.Effect.Composition.metrics(at:context:)(&originsBuffer, v125, v123, v122, v124);
      v24 = v23;
      v26 = v25;
      v28 = v27;
      outlined consume of Text.Layout.Line.Line(v12, v11, v13);
      v29 = v20;
      v30 = v37;
      v31 = v19;
      v32 = (uint64_t)v141;
      v33 = v135;
      v34 = v136;
      v35 = v137;
      goto LABEL_4;
    }
    if (v42 >> 62 != 1)
    {
      v132 = v45;
      v133 = v43;
      v139 = v44;
      v55 = v120;
      swift_beginAccess();
      v56 = *v55;
      if (*(_QWORD *)(v56 + 16))
      {
        Hasher.init(_seed:)();
        Hasher._combine(_:)(v142);
        v57 = Hasher._finalize()();
        v38 = v141;
        v58 = -1 << *(_BYTE *)(v56 + 32);
        v59 = v57 & ~v58;
        if (((*(_QWORD *)(v56 + 56 + ((v59 >> 3) & 0xFFFFFFFFFFFFF8)) >> v59) & 1) != 0)
        {
          v60 = *(_QWORD *)(v56 + 48);
          v61 = v142;
          if (*(_QWORD *)(v60 + 8 * v59) != v142)
          {
            v77 = ~v58;
            do
            {
              v59 = (v59 + 1) & v77;
              if (((*(_QWORD *)(v56 + 56 + ((v59 >> 3) & 0xFFFFFFFFFFFFF8)) >> v59) & 1) == 0)
                goto LABEL_41;
            }
            while (*(_QWORD *)(v60 + 8 * v59) != v142);
            v61 = v142;
          }
          v78 = v140;
          v79 = v135;
          v80 = v136;
          v81 = v137;
          outlined consume of Text.Effect.Composition.Operation(v61, v37, v140, (uint64_t)v141, v135, v136, v137, v42);
          v48 = v61;
          v49 = v37;
          v50 = v78;
          v51 = (uint64_t)v141;
          v52 = v79;
          v53 = v80;
          v54 = v81;
          goto LABEL_40;
        }
      }
LABEL_41:
      v128 = v42;
      v83 = v119;
      swift_beginAccess();
      v84 = *v83;
      if (*(_QWORD *)(*v83 + 16))
      {
        v85 = v142;
        v86 = specialized __RawDictionaryStorage.find<A>(_:)(v142);
        if ((v87 & 1) != 0)
        {
          v88 = *(void **)(*(_QWORD *)(v84 + 56) + 8 * v86);
          swift_endAccess();
          outlined copy of Text.Layout.Line.Line(v12, v11, v13);
          lazy protocol witness table accessor for type Text.Layout.CharacterIndex and conformance Text.Layout.CharacterIndex();
          v89 = v88;
          RangeSet.init()();
          if (v140 != v38)
          {
            v100 = v140;
            if ((uint64_t)v38 < (uint64_t)v140)
              goto LABEL_78;
            while ((uint64_t)v100 < (uint64_t)v38)
            {
              if ((v13 & 1) != 0)
              {
                outlined copy of Text.Layout.Line.Line(v12, v11, 1);
                v101 = (const __CTLine *)(id)_NSTextLineFragmentGetCTLine(v12);
                if (!v101)
                  goto LABEL_80;
                v102 = v101;
                outlined consume of Text.Layout.Line.Line(v12, v11, 1);
              }
              else
              {
                outlined copy of Text.Layout.Line.Line(v12, v11, 0);
                outlined copy of Text.Layout.Line.Line(v12, v11, 0);

                swift_release();
                v102 = (const __CTLine *)v12;
              }
              v103 = (id)_CTLineGetRunAtIndex(v102, (CFIndex)v100);
              StringRange = CTRunGetStringRange((CTRunRef)v103);

              swift_release();
              v105 = StringRange.location + StringRange.length;
              if (__OFADD__(StringRange.location, StringRange.length))
                goto LABEL_73;
              v38 = v141;
              if (v105 < StringRange.location)
                goto LABEL_74;
              *(_QWORD *)&originsBuffer.x = StringRange.location;
              *(_QWORD *)&originsBuffer.y = StringRange.location + StringRange.length;
              if (__OFSUB__(v105, StringRange.location))
                goto LABEL_75;
              if (v105 != StringRange.location)
              {
                v106 = (void (*)(CGPoint *, _QWORD))RangeSet._ranges.modify();
                type metadata accessor for RangeSet<Text.Layout.CharacterIndex>.Ranges(0, &lazy cache variable for type metadata for RangeSet<Text.Layout.CharacterIndex>.Ranges, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x24BEE4908]);
                RangeSet.Ranges._insert(contentsOf:)();
                v106(&buffer, 0);
              }
              ++v100;
              LOBYTE(v13) = v131;
              if (v38 == v100)
                goto LABEL_44;
            }
            goto LABEL_72;
          }
LABEL_44:
          v90 = v125;
          v91 = *(_QWORD *)(v125 + 16);
          if (v91)
          {
            v92 = specialized __RawDictionaryStorage.find<A>(_:)(v142);
            if ((v93 & 1) != 0)
              v91 = *(_QWORD *)(*(_QWORD *)(v90 + 56) + 8 * v92);
            else
              v91 = 0;
          }
          if (__OFADD__(v91, v37))
            goto LABEL_77;
          buffer.x = v121;
          v107 = v142;
          v108 = v127;
          v22 = (*(double (**)(uint64_t, uint64_t, char *, CGPoint *, uint64_t, uint64_t, uint64_t, uint64_t))((*MEMORY[0x24BEE4EA0] & *v89) + 0xF0))(v142, v91 + v37, v127, &buffer, v90, v123, v122, v124);
          v24 = v109;
          v26 = v110;
          v28 = v111;

          (*(void (**)(char *, uint64_t))(v118 + 8))(v108, v126);
          outlined consume of Text.Layout.Line.Line(v12, v11, v13);
          v112 = v107;
          v113 = v140;
          v114 = (uint64_t)v38;
          LOBYTE(v107) = v135;
          v115 = v136;
          v76 = v137;
          v21 = v128;
          outlined consume of Text.Effect.Composition.Operation(v112, v37, v140, v114, v135, v136, v137, v128);
          v29 = v142;
          v30 = v37;
          v31 = v113;
          v32 = (uint64_t)v141;
          v33 = v107;
          v34 = v115;
LABEL_67:
          v35 = v76;
LABEL_4:
          outlined consume of Text.Effect.Composition.Operation(v29, v30, v31, v32, v33, v34, v35, v21);
          goto LABEL_5;
        }
        swift_endAccess();
      }
      else
      {
        swift_endAccess();
        v85 = v142;
      }
      v94 = v140;
      v95 = (uint64_t)v38;
      v96 = v135;
      v97 = v136;
      v98 = v137;
      v99 = v128;
      outlined consume of Text.Effect.Composition.Operation(v85, v37, v140, v95, v135, v136, v137, v128);
      v48 = v85;
      v49 = v37;
      v50 = v94;
      v51 = (uint64_t)v141;
      v52 = v96;
      v53 = v97;
      v54 = v98;
      v82 = v99;
      goto LABEL_50;
    }
    v46 = v142;
    if (v142 != v37)
    {
      if (v37 < v142)
        goto LABEL_76;
      v62 = v142;
      v63 = v45;
      v133 = v43;
      v139 = v44;
      v128 = v42;
      outlined copy of Text.Layout.Line.Line(v12, v11, v13);
      v28 = 0.0;
      v64 = v46;
      v26 = 0.0;
      v24 = 0.0;
      v22 = 0.0;
      while (v64 < v37)
      {
        if ((v13 & 1) != 0)
        {
          outlined copy of Text.Layout.Line.Line(v12, v11, 1);
          v70 = (const __CTLine *)(id)_NSTextLineFragmentGetCTLine(v12);
          if (!v70)
            goto LABEL_79;
          v65 = v70;
          outlined consume of Text.Layout.Line.Line(v12, v11, 1);
        }
        else
        {
          outlined copy of Text.Layout.Line.Line(v12, v11, 0);
          outlined copy of Text.Layout.Line.Line(v12, v11, 0);

          swift_release();
          v65 = (const __CTLine *)v12;
        }
        v66 = v64 + 1;
        v67 = (id)_CTLineGetRunAtIndex(v65, v64);
        buffer.x = 0.0;
        buffer.y = 0.0;
        ascent = 0.0;
        descent = 0.0;
        leading = 0.0;
        originsBuffer.y = 0.0;
        originsBuffer.x = 0.0;
        v156.location = 0;
        v156.length = 1;
        CTRunGetPositions((CTRunRef)v67, v156, &buffer);
        v157.location = 0;
        v157.length = 1;
        CTRunGetBaseAdvancesAndOrigins((CTRunRef)v67, v157, 0, &originsBuffer);
        v158.location = 0;
        v158.length = 0;
        TypographicBounds = CTRunGetTypographicBounds((CTRunRef)v67, v158, &ascent, &descent, &leading);

        swift_release();
        v69 = fabs(descent);
        if (v22 <= ascent)
          v22 = ascent;
        if (v24 <= v69)
          v24 = v69;
        if (v26 <= leading)
          v26 = leading;
        v28 = v28 + TypographicBounds;
        v64 = v66;
        if (v37 == v66)
        {
          outlined consume of Text.Layout.Line.Line(v12, v11, v13);
          v132 = v63;
          v71 = v62;
          v72 = v140;
          v73 = (uint64_t)v141;
          v74 = v135;
          v75 = v136;
          v76 = v137;
          v21 = v128;
          outlined consume of Text.Effect.Composition.Operation(v71, v37, v140, (uint64_t)v141, v135, v136, v137, v128);
          v29 = v142;
          v30 = v37;
          v31 = v72;
          v32 = v73;
          v33 = v74;
          v34 = v75;
          goto LABEL_67;
        }
      }
      __break(1u);
LABEL_72:
      __break(1u);
LABEL_73:
      __break(1u);
LABEL_74:
      __break(1u);
LABEL_75:
      __break(1u);
LABEL_76:
      __break(1u);
LABEL_77:
      __break(1u);
LABEL_78:
      __break(1u);
LABEL_79:
      __break(1u);
LABEL_80:
      __break(1u);
    }
    v47 = v140;
    outlined consume of Text.Effect.Composition.Operation(v142, v142, v140, (uint64_t)v38, v39, v40, v41, v42);
    v48 = v46;
    v49 = v46;
    v50 = v47;
    v51 = (uint64_t)v38;
    v52 = v135;
    v53 = v136;
    v54 = v137;
LABEL_40:
    v82 = v42;
LABEL_50:
    outlined consume of Text.Effect.Composition.Operation(v48, v49, v50, v51, v52, v53, v54, v82);
    v22 = 0.0;
    v24 = 0.0;
    v26 = 0.0;
    v28 = 0.0;
LABEL_5:
    v14 = v134 + 1;
    if (v18 <= v22)
      v18 = v22;
    if (v17 <= v24)
      v17 = v24;
    if (v16 <= v26)
      v16 = v26;
    v15 = v138 + v28;
  }
  while (v14 != v130);
  swift_bridgeObjectRelease_n();
  return v18;
}

uint64_t Text.Effect.Composition.widthDifference(at:context:)(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  double v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  double v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  Swift::Int v36;
  void *v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  void *v44;
  uint64_t v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  uint64_t v50;
  char v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char v60;
  void *v61;
  void *v62;
  uint64_t v63;
  _QWORD *v64;
  void *v65;
  _QWORD *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char v70;
  Swift::UInt64 v71;
  uint64_t v72;
  void *v73;
  char v74;
  uint64_t v75;
  void *v76;
  char *v77;
  char *v78;
  const __CTLine *v79;
  void *v80;
  CFRange StringRange;
  CFIndex v82;
  uint64_t (*v83)(_QWORD *, _QWORD);
  uint64_t v84;
  uint64_t v85;
  Swift::UInt64 v86;
  void *v87;
  char *v88;
  uint64_t v89;
  void *v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  _QWORD v94[2];
  uint64_t v95;
  uint64_t v96;
  uint64_t *v97;
  uint64_t *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  char *v107;
  char *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  void *v116;
  uint64_t v117;
  int v118;
  Swift::UInt64 v119;
  _QWORD v120[2];
  _QWORD v121[2];
  char v122;
  uint64_t v123;
  uint64_t v124;
  int v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;

  v101 = a5;
  v100 = a3;
  v102 = a2;
  type metadata accessor for RangeSet<Text.Layout.CharacterIndex>.Ranges(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<Text.Layout.CharacterIndex>, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x24BEE4968]);
  v106 = v8;
  v95 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v107 = (char *)v94 - v9;
  result = *(_QWORD *)(v5 + 64);
  v110 = *(_QWORD *)(result + 16);
  if (!v110)
    return result;
  v11 = *a1;
  v116 = *(void **)v5;
  v117 = *(_QWORD *)(v5 + 8);
  v109 = result + 32;
  v98 = (uint64_t *)(a4 + 40);
  v99 = a4;
  v97 = (uint64_t *)(a4 + 24);
  v118 = *(unsigned __int8 *)(v5 + 16);
  v94[1] = result;
  swift_bridgeObjectRetain_n();
  v12 = 0;
  v13 = 0.0;
  while (1)
  {
    v21 = (uint64_t *)(v109 + 88 * v12);
    v22 = *v21;
    v23 = v21[1];
    v24 = (char *)v21[2];
    v25 = (char *)v21[3];
    v27 = v21[4];
    v26 = v21[5];
    v28 = v21[6];
    v29 = v21[7];
    v30 = v21[8];
    v31 = v21[9];
    v32 = v21[10];
    v119 = *v21;
    if (!(v29 >> 62))
    {
      v121[0] = v24;
      v121[1] = v25;
      v122 = v27 & 1;
      v123 = v26;
      v124 = v28;
      v125 = v29;
      v126 = v30;
      v127 = v31;
      v128 = v32;
      v120[0] = v11;
      v113 = v32;
      outlined copy of Text.Effect.Composition.Operation(v22, v23, v24, (uint64_t)v25, v27, v26, v28, v29);
      v115 = v26;
      v43 = v27;
      v44 = v116;
      v108 = v25;
      v114 = v28;
      v45 = v117;
      v46 = v118;
      outlined copy of Text.Layout.Line.Line(v116, v117, v118);
      v112 = v29;
      v20 = Text.Effect.Composition.widthDifference(at:context:)(v120, v102, v100, v99, v101);
      outlined consume of Text.Layout.Line.Line(v44, v45, v46);
      v47 = v119;
      v48 = v23;
      v49 = v24;
      v50 = (uint64_t)v108;
      v51 = v43;
      v52 = v115;
      v53 = v114;
      v54 = v112;
LABEL_16:
      outlined consume of Text.Effect.Composition.Operation(v47, v48, v49, v50, v51, v52, v53, v54);
      goto LABEL_5;
    }
    if (v29 >> 62 != 1)
      break;
    v111 = v30;
    outlined consume of Text.Effect.Composition.Operation(v22, v23, v24, (uint64_t)v25, v27, v26, v28, v29);
    v14 = v119;
    v15 = v23;
    v16 = v24;
    v17 = (uint64_t)v25;
    v18 = v27;
    v19 = v26;
LABEL_4:
    outlined consume of Text.Effect.Composition.Operation(v14, v15, v16, v17, v18, v19, v28, v29);
    v20 = 0.0;
LABEL_5:
    ++v12;
    v13 = v13 + v20;
    if (v12 == v110)
      return swift_bridgeObjectRelease_n();
  }
  v113 = v32;
  v105 = v23;
  v114 = v28;
  v33 = v98;
  swift_beginAccess();
  v34 = *v33;
  v35 = *(_QWORD *)(v34 + 16);
  v108 = v24;
  v104 = v27;
  if (!v35)
    goto LABEL_17;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v119);
  v36 = Hasher._finalize()();
  v37 = v108;
  v38 = -1 << *(_BYTE *)(v34 + 32);
  v39 = v36 & ~v38;
  if (((*(_QWORD *)(v34 + 56 + ((v39 >> 3) & 0xFFFFFFFFFFFFF8)) >> v39) & 1) == 0)
    goto LABEL_17;
  v40 = *(_QWORD *)(v34 + 48);
  if (*(_QWORD *)(v40 + 8 * v39) == v119)
  {
LABEL_14:
    v42 = v105;
    v28 = v114;
    outlined consume of Text.Effect.Composition.Operation(v119, v105, v108, (uint64_t)v25, v27, v26, v114, v29);
    v19 = v26;
    v14 = v119;
    v15 = v42;
    v16 = v37;
    v17 = (uint64_t)v25;
    v18 = v104;
    goto LABEL_4;
  }
  v41 = ~v38;
  while (1)
  {
    v39 = (v39 + 1) & v41;
    if (((*(_QWORD *)(v34 + 56 + ((v39 >> 3) & 0xFFFFFFFFFFFFF8)) >> v39) & 1) == 0)
      break;
    if (*(_QWORD *)(v40 + 8 * v39) == v119)
      goto LABEL_14;
  }
LABEL_17:
  v115 = v26;
  v112 = v29;
  v55 = v97;
  swift_beginAccess();
  v56 = *v55;
  v57 = *(_QWORD *)(*v55 + 16);
  v111 = v30;
  v103 = v31;
  if (!v57)
  {
    swift_endAccess();
    v71 = v119;
    v72 = v105;
    v73 = v108;
    v74 = v104;
    v28 = v114;
    v29 = v112;
    outlined consume of Text.Effect.Composition.Operation(v119, v105, v108, (uint64_t)v25, v104, v115, v114, v112);
    v14 = v71;
    v15 = v72;
    v16 = v73;
LABEL_25:
    v17 = (uint64_t)v25;
    v18 = v74;
    v19 = v115;
    goto LABEL_4;
  }
  v58 = v119;
  v59 = specialized __RawDictionaryStorage.find<A>(_:)(v119);
  if ((v60 & 1) == 0)
  {
    swift_endAccess();
    v75 = v105;
    v76 = v108;
    v74 = v104;
    v28 = v114;
    v29 = v112;
    outlined consume of Text.Effect.Composition.Operation(v58, v105, v108, (uint64_t)v25, v104, v115, v114, v112);
    v14 = v58;
    v15 = v75;
    v16 = v76;
    goto LABEL_25;
  }
  v96 = v12;
  v61 = *(void **)(*(_QWORD *)(v56 + 56) + 8 * v59);
  swift_endAccess();
  v62 = v116;
  v63 = v117;
  outlined copy of Text.Layout.Line.Line(v116, v117, v118);
  lazy protocol witness table accessor for type Text.Layout.CharacterIndex and conformance Text.Layout.CharacterIndex();
  v64 = v61;
  v65 = v62;
  v66 = v64;
  result = RangeSet.init()();
  if (v108 == v25)
  {
LABEL_20:
    v67 = v102;
    v68 = *(_QWORD *)(v102 + 16);
    if (v68)
    {
      result = specialized __RawDictionaryStorage.find<A>(_:)(v119);
      v69 = v99;
      if ((v70 & 1) != 0)
        v68 = *(_QWORD *)(*(_QWORD *)(v67 + 56) + 8 * result);
      else
        v68 = 0;
      v84 = v115;
      v12 = v96;
    }
    else
    {
      v69 = v99;
      v84 = v115;
      v12 = v96;
    }
    v85 = v105;
    if (__OFADD__(v68, v105))
      goto LABEL_50;
    v121[0] = v11;
    v86 = v119;
    v87 = v65;
    v88 = v107;
    v20 = (*(double (**)(Swift::UInt64, uint64_t, char *, _QWORD *, uint64_t, uint64_t, uint64_t, uint64_t))((*MEMORY[0x24BEE4EA0] & *v66) + 0xF8))(v119, v68 + v105, v107, v121, v67, v100, v69, v101);

    (*(void (**)(char *, uint64_t))(v95 + 8))(v88, v106);
    outlined consume of Text.Layout.Line.Line(v87, v117, v118);
    v89 = v86;
    v90 = v108;
    LOBYTE(v86) = v104;
    v91 = v84;
    v92 = v114;
    v93 = v112;
    outlined consume of Text.Effect.Composition.Operation(v89, v85, v108, (uint64_t)v25, v104, v91, v114, v112);
    v47 = v119;
    v48 = v85;
    v49 = v90;
    v50 = (uint64_t)v25;
    v51 = v86;
    v52 = v115;
    v53 = v92;
    v54 = v93;
    goto LABEL_16;
  }
  v77 = v108;
  v78 = v25;
  if ((uint64_t)v25 < (uint64_t)v108)
    goto LABEL_51;
  while ((uint64_t)v77 < (uint64_t)v25)
  {
    if ((v118 & 1) != 0)
    {
      outlined copy of Text.Layout.Line.Line(v65, v63, 1);
      result = (uint64_t)(id)_NSTextLineFragmentGetCTLine(v65);
      if (!result)
        goto LABEL_52;
      v79 = (const __CTLine *)result;
      outlined consume of Text.Layout.Line.Line(v65, v63, 1);
    }
    else
    {
      outlined copy of Text.Layout.Line.Line(v65, v63, 0);
      outlined copy of Text.Layout.Line.Line(v65, v63, 0);

      swift_release();
      v79 = (const __CTLine *)v65;
    }
    v80 = (id)_CTLineGetRunAtIndex(v79, (CFIndex)v77);
    StringRange = CTRunGetStringRange((CTRunRef)v80);

    result = swift_release();
    v82 = StringRange.location + StringRange.length;
    if (__OFADD__(StringRange.location, StringRange.length))
      goto LABEL_47;
    if (v82 < StringRange.location)
      goto LABEL_48;
    v120[0] = StringRange.location;
    v120[1] = StringRange.location + StringRange.length;
    if (__OFSUB__(v82, StringRange.location))
      goto LABEL_49;
    if (v82 != StringRange.location)
    {
      v83 = (uint64_t (*)(_QWORD *, _QWORD))RangeSet._ranges.modify();
      type metadata accessor for RangeSet<Text.Layout.CharacterIndex>.Ranges(0, &lazy cache variable for type metadata for RangeSet<Text.Layout.CharacterIndex>.Ranges, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x24BEE4908]);
      RangeSet.Ranges._insert(contentsOf:)();
      result = v83(v121, 0);
    }
    ++v77;
    v25 = v78;
    v65 = v116;
    v63 = v117;
    if (v78 == v77)
      goto LABEL_20;
  }
  __break(1u);
LABEL_47:
  __break(1u);
LABEL_48:
  __break(1u);
LABEL_49:
  __break(1u);
LABEL_50:
  __break(1u);
LABEL_51:
  __break(1u);
LABEL_52:
  __break(1u);
  return result;
}

double Text.Effect.Composition.bounds(at:context:)(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  double x;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  CGFloat v20;
  double v21;
  CGFloat v22;
  double v23;
  CGFloat v24;
  double v25;
  CGFloat v26;
  int v29;
  __int128 v30;
  char v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD v42[2];
  char v43;
  __int128 v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  CGRect v58;
  CGRect v59;
  CGRect v60;

  v3 = *(_QWORD *)(v2 + 64);
  x = *MEMORY[0x24BDBF070];
  y = *(double *)(MEMORY[0x24BDBF070] + 8);
  width = *(double *)(MEMORY[0x24BDBF070] + 16);
  height = *(double *)(MEMORY[0x24BDBF070] + 24);
  v8 = *(_QWORD *)(v3 + 16);
  if (v8)
  {
    v34 = *a1;
    v32 = *(_QWORD *)(v2 + 8);
    v33 = *(void **)v2;
    v31 = *(_BYTE *)(v2 + 16);
    v30 = *(_OWORD *)(v2 + 24);
    v29 = *(_DWORD *)(v2 + 40);
    swift_bridgeObjectRetain();
    v9 = (uint64_t *)(v3 + 56);
    do
    {
      v10 = *(v9 - 2);
      v11 = (void *)*(v9 - 1);
      v12 = *v9;
      v13 = v9[1];
      v14 = v9[2];
      v15 = v9[3];
      v16 = v9[4];
      v17 = v9[5];
      v18 = v9[6];
      v19 = v9[7];
      v47 = *(v9 - 3);
      v48 = v10;
      v40 = v10;
      v41 = v47;
      v49 = v11;
      v50 = v12;
      v38 = v13;
      v39 = v11;
      v51 = v13;
      v52 = v14;
      v36 = v15;
      v37 = v14;
      v53 = v15;
      v54 = v16;
      v35 = v16;
      v55 = v17;
      v56 = v18;
      v57 = v19;
      v46 = v34;
      v42[0] = v33;
      v42[1] = v32;
      v43 = v31;
      v44 = v30;
      v45 = v29;
      outlined copy of Text.Effect.Composition.Operation(v47, v10, v11, v12, v13, v14, v15, v16);
      outlined copy of Text.Layout.Line.Line(v33, v32, v31);
      v20 = Text.Effect.Composition.Operation.bounds(at:line:context:)(&v46, v42, a2);
      v22 = v21;
      v24 = v23;
      v26 = v25;
      outlined consume of Text.Layout.Line.Line(v33, v32, v31);
      v58.origin.x = x;
      v58.origin.y = y;
      v58.size.width = width;
      v58.size.height = height;
      v60.origin.x = v20;
      v60.origin.y = v22;
      v60.size.width = v24;
      v60.size.height = v26;
      v59 = CGRectUnion(v58, v60);
      x = v59.origin.x;
      y = v59.origin.y;
      width = v59.size.width;
      height = v59.size.height;
      outlined consume of Text.Effect.Composition.Operation(v41, v40, v39, v12, v38, v37, v36, v35);
      v9 += 11;
      --v8;
    }
    while (v8);
    swift_bridgeObjectRelease();
  }
  return x;
}

uint64_t Text.Effect.Composition.append(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v3;
  _QWORD *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  _QWORD *v37;
  _QWORD *v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  uint64_t v45;
  void *v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58[11];
  uint64_t v59;
  uint64_t v60;
  void *v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;

  result = *(_QWORD *)(a1 + 64);
  v3 = *(_QWORD *)(result + 16);
  if (v3)
  {
    v4 = *(_QWORD **)(v1 + 64);
    v5 = (uint64_t *)(swift_bridgeObjectRetain() + 56);
    while (1)
    {
      v6 = *(v5 - 3);
      v7 = *(v5 - 2);
      v8 = (void *)*(v5 - 1);
      v14 = *v5;
      v16 = v5[1];
      v15 = v5[2];
      v17 = v5[3];
      v18 = v5[4];
      v19 = v5[7];
      v20 = v4[2];
      v53 = *v5;
      v54 = v5[5];
      v56 = v17;
      v57 = v15;
      v55 = v5[6];
      v51 = v3;
      v52 = v19;
      if (v20)
      {
        v21 = *v5;
        v22 = v5[4];
        outlined copy of Text.Effect.Composition.Operation(v6, v7, v8, v14, v16, v15, v17, v18);
        result = swift_isUniquelyReferenced_nonNull_native();
        if ((result & 1) == 0)
        {
          result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v4);
          v4 = (_QWORD *)result;
        }
        if (v20 > v4[2])
        {
          __break(1u);
          return result;
        }
        v47 = v7;
        v49 = v6;
        v58[0] = v6;
        v58[1] = v7;
        v46 = v8;
        v58[2] = (uint64_t)v8;
        v58[3] = v21;
        v58[4] = v16;
        v58[5] = v57;
        v58[6] = v56;
        v58[7] = v22;
        v58[8] = v54;
        v58[9] = v55;
        v58[10] = v19;
        Text.Effect.Composition.Operation.append(_:)(v58, &v59);
        v23 = v59;
        v24 = v63;
        v25 = v66;
        v26 = v67;
        v27 = v68;
        v28 = v69;
        if (v63 >> 1 == 0xFFFFFFFF && !HIDWORD(v66))
        {
          v7 = v47;
          v6 = v49;
          v8 = v46;
          v9 = v53;
        }
        else
        {
          v50 = v16;
          v44 = v61;
          v45 = v60;
          v42 = v64;
          v43 = v62;
          v41 = v65;
          outlined copy of Text.Effect.Composition.Operation(v59, v60, v61, v62, v63, v64, v65, v66);
          v16 = v4[2];
          v29 = v4[3];
          v30 = v16 + 1;
          if (v16 >= v29 >> 1)
          {
            v39 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v29 > 1), v16 + 1, 1, v4);
            v30 = v16 + 1;
            v4 = v39;
          }
          v4[2] = v30;
          v31 = &v4[11 * v16];
          v31[4] = v23;
          v31[5] = v45;
          v31[6] = v44;
          v31[7] = v43;
          v31[8] = v24;
          v31[9] = v42;
          v31[10] = v41;
          v31[11] = v25;
          v31[12] = v26;
          v31[13] = v27;
          v31[14] = v28;
          outlined consume of Text.Effect.Composition.Operation?(v23, v45, v44, v43, v24, v42, v41, v25);
          v7 = v47;
          v6 = v49;
          v8 = v46;
          v9 = v53;
          LOBYTE(v16) = v50;
        }
        v11 = v56;
        v10 = v57;
        v12 = v22;
        v13 = v51;
      }
      else
      {
        v32 = v5[2];
        v33 = v5[3];
        v48 = v5[4];
        outlined copy of Text.Effect.Composition.Operation(v6, v7, v8, v14, v16, v15, v17, v18);
        outlined copy of Text.Effect.Composition.Operation(v6, v7, v8, v53, v16, v32, v33, v48);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 1, v4);
        v11 = v56;
        v10 = v57;
        v12 = v48;
        v34 = v55;
        v36 = v4[2];
        v35 = v4[3];
        if (v36 >= v35 >> 1)
        {
          v38 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v35 > 1), v36 + 1, 1, v4);
          v34 = v55;
          v11 = v56;
          v12 = v48;
          v10 = v57;
          v4 = v38;
        }
        v4[2] = v36 + 1;
        v37 = &v4[11 * v36];
        v37[4] = v6;
        v37[5] = v7;
        v37[6] = v8;
        v37[7] = v53;
        v9 = v53;
        v13 = v51;
        v37[8] = v16;
        v37[9] = v10;
        v37[10] = v11;
        v37[11] = v12;
        v37[12] = v54;
        v37[13] = v34;
        v37[14] = v52;
      }
      v5 += 11;
      outlined consume of Text.Effect.Composition.Operation(v6, v7, v8, v9, v16, v10, v11, v12);
      v3 = v13 - 1;
      if (!v3)
      {
        result = swift_bridgeObjectRelease();
        *(_QWORD *)(v40 + 64) = v4;
        return result;
      }
    }
  }
  return result;
}

uint64_t Text.Effect.DrawingContent.draw(options:in:)(uint64_t result, uint64_t a2, char a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t i;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  _OWORD v35[9];
  _OWORD v36[4];

  v5 = *v4;
  v6 = v4[1];
  v7 = *((_OWORD *)v4 + 2);
  v36[0] = *((_OWORD *)v4 + 1);
  v36[1] = v7;
  v36[2] = *((_OWORD *)v4 + 3);
  v8 = *(_QWORD *)(v6 + 16);
  if (v8)
  {
    v11 = result;
    v12 = a3 & 1;
    swift_bridgeObjectRetain();
    v13 = v8 - 1;
    for (i = 32; ; i += 144)
    {
      v35[0] = *(_OWORD *)(v6 + i);
      v15 = *(_OWORD *)(v6 + i + 16);
      v16 = *(_OWORD *)(v6 + i + 32);
      v17 = *(_OWORD *)(v6 + i + 64);
      v35[3] = *(_OWORD *)(v6 + i + 48);
      v35[4] = v17;
      v35[1] = v15;
      v35[2] = v16;
      v18 = *(_OWORD *)(v6 + i + 80);
      v19 = *(_OWORD *)(v6 + i + 96);
      v20 = *(_OWORD *)(v6 + i + 128);
      v35[7] = *(_OWORD *)(v6 + i + 112);
      v35[8] = v20;
      v35[5] = v18;
      v35[6] = v19;
      v21 = *(_OWORD *)(v6 + i + 112);
      v32 = *(_OWORD *)(v6 + i + 96);
      v33 = v21;
      v34 = *(_OWORD *)(v6 + i + 128);
      v22 = *(_OWORD *)(v6 + i + 48);
      v28 = *(_OWORD *)(v6 + i + 32);
      v29 = v22;
      v23 = *(_OWORD *)(v6 + i + 80);
      v30 = *(_OWORD *)(v6 + i + 64);
      v31 = v23;
      v24 = *(_OWORD *)(v6 + i + 16);
      v26 = *(_OWORD *)(v6 + i);
      v27 = v24;
      v25 = v5;
      outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)v35, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))outlined copy of Text.Effect.ResolvedDrawing.Operation.Kind);
      Text.Effect.ResolvedDrawing.Operation.draw(at:context:options:in:)((uint64_t)&v25, (uint64_t)v36, v11, a2, v12, a4);
      outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)v35, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))outlined consume of Text.Effect.ResolvedDrawing.Operation.Kind);
      if (!v13)
        break;
      --v13;
    }
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t Text.Effect.BaseContext.content<A>(for:key:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  swift_retain();
  swift_retain();
  return Text.Effect.DrawableContent.init(keyframes:key:)(a6, a2, a3, a8, a9);
}

unint64_t protocol witness for static Equatable.== infix(_:_:) in conformance Text.Effect.Composition.Run(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  _OWORD v9[5];
  uint64_t v10;
  _OWORD v11[5];
  uint64_t v12;

  v2 = *(_QWORD *)(a1 + 80);
  v3 = *(_QWORD *)(a2 + 80);
  v4 = *(_OWORD *)(a1 + 16);
  v11[0] = *(_OWORD *)a1;
  v11[1] = v4;
  v5 = *(_OWORD *)(a1 + 48);
  v11[2] = *(_OWORD *)(a1 + 32);
  v11[3] = v5;
  v11[4] = *(_OWORD *)(a1 + 64);
  v12 = v2;
  v6 = *(_OWORD *)(a2 + 16);
  v9[0] = *(_OWORD *)a2;
  v9[1] = v6;
  v7 = *(_OWORD *)(a2 + 48);
  v9[2] = *(_OWORD *)(a2 + 32);
  v9[3] = v7;
  v9[4] = *(_OWORD *)(a2 + 64);
  v10 = v3;
  return (unint64_t)specialized static Text.Effect.Composition.Operation.== infix(_:_:)((uint64_t *)v11, (uint64_t *)v9) & 1;
}

uint64_t Text.Effect.Composition.appendIdentifiers(to:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  char v12;
  Swift::UInt64 v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  Swift::UInt64 v26;
  uint64_t v27;
  void *v29;
  Swift::UInt64 v30;
  uint64_t v31;
  Swift::UInt64 v32;
  uint64_t v33;
  uint64_t v34;
  Swift::UInt64 v35[2];
  char v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  result = *(_QWORD *)(v1 + 64);
  v3 = *(_QWORD *)(result + 16);
  if (v3)
  {
    v4 = (uint64_t *)(swift_bridgeObjectRetain() + 56);
    do
    {
      v13 = *(v4 - 3);
      v14 = *(v4 - 2);
      v16 = (void *)*(v4 - 1);
      v15 = *v4;
      v18 = v4[1];
      v17 = v4[2];
      v20 = v4[3];
      v19 = v4[4];
      v21 = v4[5];
      v22 = v4[6];
      v23 = v4[7];
      v34 = v14;
      if (v19 >> 62)
      {
        if (v19 >> 62 == 1)
        {
          v24 = *(v4 - 3);
          v29 = (void *)*(v4 - 1);
          v31 = *v4;
          outlined consume of Text.Effect.Composition.Operation(v13, v14, v16, v15, v18, v17, v20, v19);
          v7 = v24;
          v8 = v34;
          v10 = v29;
          v11 = v31;
          v12 = v18;
          v9 = v17;
        }
        else
        {
          v27 = *(v4 - 3);
          v33 = v4[2];
          v5 = *v4;
          v6 = (void *)*(v4 - 1);
          specialized Set._Variant.insert(_:)(v35, v13);
          outlined consume of Text.Effect.Composition.Operation(v27, v34, v6, v5, v18, v33, v20, v19);
          v7 = v27;
          v9 = v33;
          v8 = v34;
          v10 = v6;
          v11 = v5;
          v12 = v18;
        }
        v25 = v20;
      }
      else
      {
        v26 = *(v4 - 3);
        v30 = *(v4 - 1);
        v32 = *v4;
        outlined copy of Text.Effect.Composition.Operation(v13, v14, v16, v15, v18, v17, v20, v19);
        specialized Set._Variant.insert(_:)(v35, v26);
        v35[0] = v30;
        v35[1] = v32;
        v36 = v18 & 1;
        v37 = v17;
        v38 = v20;
        v39 = v19;
        v40 = v21;
        v41 = v22;
        v42 = v23;
        Text.Effect.Composition.appendIdentifiers(to:)(a1);
        v7 = v26;
        v9 = v17;
        v8 = v34;
        v10 = (void *)v30;
        v11 = v32;
        v12 = v18;
        v25 = v20;
      }
      outlined consume of Text.Effect.Composition.Operation(v7, v8, v10, v11, v12, v9, v25, v19);
      v4 += 11;
      --v3;
    }
    while (v3);
    return swift_bridgeObjectRelease();
  }
  return result;
}

void Text.Effect.Composition.Operation.bounds(at:line:context:)(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  Swift::UInt64 *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  Swift::UInt64 v10;
  unint64_t v11;
  uint64_t v12;
  Swift::UInt64 v13;
  Swift::UInt64 v14;
  Swift::UInt64 v15;
  void *v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  const __CTLine *v22;
  const __CTLine *v23;
  const __CTLine *v24;
  const __CTLine *v25;
  void *v26;
  void *v27;
  int v28;
  char v29;
  Swift::UInt64 v30;
  Swift::UInt64 v31;
  Swift::UInt64 v32;
  Swift::UInt64 v33;
  Swift::UInt64 v34;
  Swift::UInt v35;
  Swift::UInt64 v36;
  _QWORD v37[2];
  char v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  Swift::UInt64 v43;
  Swift::UInt v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  Swift::UInt64 v48;
  Swift::UInt64 v49;
  unint64_t v50;
  Swift::UInt64 v51;
  Swift::UInt64 v52;
  Swift::UInt64 v53;
  uint64_t v54;

  v5 = *a1;
  v6 = v3[1];
  v36 = *v3;
  v8 = (void *)v3[2];
  v7 = v3[3];
  v10 = v3[4];
  v9 = v3[5];
  v12 = v3[6];
  v11 = v3[7];
  v13 = v3[8];
  v14 = v3[9];
  v15 = v3[10];
  if (!(v11 >> 62))
  {
    v43 = v3[2];
    v44 = v7;
    LOBYTE(v45) = v10 & 1;
    v46 = v9;
    v47 = v12;
    LODWORD(v48) = v11;
    v49 = v13;
    v50 = v14;
    v51 = v15;
    v54 = v5;
    outlined copy of Text.Layout.Line.Line(v8, v7, v10 & 1);
    swift_bridgeObjectRetain();
    Text.Effect.Composition.bounds(at:context:)(&v54, (uint64_t)a3);
    outlined consume of Text.Effect.Composition.Operation(v36, v6, v8, v7, v10, v9, v12, v11);
    return;
  }
  v34 = v3[6];
  v35 = v3[1];
  v32 = v3[5];
  v33 = v3[4];
  v16 = *(void **)a2;
  v17 = *(_QWORD *)(a2 + 8);
  v18 = *(_BYTE *)(a2 + 16);
  v19 = *(_QWORD *)(a2 + 24);
  v20 = *(_QWORD *)(a2 + 32);
  v30 = v3[10];
  v31 = v3[8];
  v28 = *(_DWORD *)(a2 + 40);
  v29 = v18;
  v21 = *(void **)a2;
  if (v11 >> 62 != 1)
  {
    if ((v18 & 1) != 0)
    {
      outlined copy of Text.Layout.Line.Line(v21, v17, 1);
      v24 = (const __CTLine *)(id)_NSTextLineFragmentGetCTLine(v16);
      if (!v24)
        goto LABEL_18;
      v25 = v24;
      outlined consume of Text.Layout.Line.Line(v16, v17, 1);
    }
    else
    {
      outlined copy of Text.Layout.Line.Line(v21, v17, 0);
      outlined copy of Text.Layout.Line.Line(v16, v17, 0);

      swift_release();
      v25 = (const __CTLine *)v16;
    }
    v27 = (id)_CTLineGetRunAtIndex(v25, (CFIndex)v8);
    specialized Text.Layout.TypographicBounds.init(run:range:)((const __CTRun *)v27, (CFRange)0, (CGFloat *)&v54);
    swift_release();

    if (*(_QWORD *)(a3[5] + 16))
      specialized __RawDictionaryStorage.find<A>(_:)(v36, v35);
    goto LABEL_16;
  }
  if ((v18 & 1) == 0)
  {
    outlined copy of Text.Layout.Line.Line(v21, v17, 0);
    outlined copy of Text.Layout.Line.Line(v16, v17, 0);

    swift_release();
    v23 = (const __CTLine *)v16;
LABEL_11:
    v26 = (id)_CTLineGetRunAtIndex(v23, v36);
    specialized Text.Layout.TypographicBounds.init(run:range:)((const __CTRun *)v26, (CFRange)0, (CGFloat *)&v54);
    swift_release();

    if (*(_QWORD *)(a3[4] + 16))
      specialized __RawDictionaryStorage.find<A>(_:)(0);
LABEL_16:
    v43 = v36;
    v44 = v35;
    v45 = v8;
    v46 = v7;
    v47 = v33;
    v48 = v32;
    v49 = v34;
    v50 = v11;
    v51 = v31;
    v52 = v14;
    v53 = v30;
    v42 = v5;
    v37[0] = v16;
    v37[1] = v17;
    v38 = v29;
    v39 = v19;
    v40 = v20;
    v41 = v28;
    Text.Effect.Composition.Operation.metrics(at:line:context:)((CGFloat *)&v42, (uint64_t)v37, *a3, a3[1], a3[2], a3[3]);
    return;
  }
  outlined copy of Text.Layout.Line.Line(v21, v17, 1);
  v22 = (const __CTLine *)(id)_NSTextLineFragmentGetCTLine(v16);
  if (v22)
  {
    v23 = v22;
    outlined consume of Text.Layout.Line.Line(v16, v17, 1);
    goto LABEL_11;
  }
  __break(1u);
LABEL_18:
  __break(1u);
}

double closure #1 in Text.Effect.Composition.widthDifference(at:context:)@<D0>(double *a1@<X0>, uint64_t *a2@<X1>, __int128 *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, double *a8@<X8>, double a9@<D0>)
{
  double v10;
  __int128 v11;
  __int128 v12;
  double v13;
  double v14;
  double result;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  _BYTE v30[28];
  double v31;

  v10 = *a1;
  v18 = a2[1];
  v19 = *a2;
  v25 = (void *)a2[2];
  v26 = a2[3];
  v27 = a2[4];
  v28 = a2[5];
  v16 = a2[7];
  v17 = a2[6];
  v31 = a9;
  v11 = *a3;
  v12 = a3[1];
  *(_OWORD *)&v30[12] = *(__int128 *)((char *)a3 + 28);
  v29 = v11;
  *(_OWORD *)v30 = v12;
  outlined copy of Text.Effect.Composition.Operation(v19, v18, v25, v26, v27, v28, v17, v16);
  outlined retain of Text.Layout.Line((uint64_t)&v29);
  Text.Effect.Composition.Operation.widthDifference(at:line:context:)((uint64_t *)&v31, a3, a4, a5, a6, a7);
  v14 = v13;
  outlined release of Text.Layout.Line((uint64_t)&v29);
  outlined consume of Text.Effect.Composition.Operation(v19, v18, v25, v26, v27, v28, v17, v16);
  result = v10 + v14;
  *a8 = v10 + v14;
  return result;
}

void Text.Effect.Composition.Operation.widthDifference(at:line:context:)(uint64_t *a1, __int128 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  Swift::UInt64 *v6;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  Swift::UInt64 v17;
  uint64_t v18;
  void *v19;
  CFIndex v20;
  unint64_t v21;
  __int128 v22;
  char v23;
  int v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  Swift::UInt64 v31;
  Swift::UInt64 v32;
  Swift::UInt64 v33;
  uint64_t v34;
  Swift::UInt64 v35;
  uint64_t v36;
  __int128 v37;
  __int128 v38;
  Swift::UInt64 v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  __int128 v44;
  char v45;
  __int128 v46;
  int v47;
  Swift::UInt64 v48;
  Swift::UInt64 v49;
  Swift::UInt64 v50;

  v41 = a4;
  v42 = a3;
  type metadata accessor for RangeSet<Text.Layout.CharacterIndex>.Ranges(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<Text.Layout.CharacterIndex>, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x24BEE4968]);
  v12 = v11;
  v13 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v11);
  v15 = (char *)&v37 - v14;
  v16 = *a1;
  v17 = *v6;
  v18 = v6[1];
  v19 = (void *)v6[2];
  v20 = v6[3];
  v21 = v6[7];
  if (v21 >> 62)
  {
    if (v21 >> 62 != 1)
    {
      v39 = *v6;
      v40 = v18;
      v22 = *a2;
      v23 = *((_BYTE *)a2 + 16);
      v37 = *(__int128 *)((char *)a2 + 24);
      v38 = v22;
      v24 = *((_DWORD *)a2 + 10);
      v25 = Text.Effect.Keyframes.validTransform(_:)(v17, a5);
      if (v25)
      {
        v26 = v25;
        v44 = v38;
        v45 = v23;
        v46 = v37;
        v47 = v24;
        Text.Layout.Line.characterRanges(runIndices:)((CFIndex)v19, v20);
        v27 = v42;
        v28 = *(_QWORD *)(v42 + 16);
        if (v28)
        {
          v29 = specialized __RawDictionaryStorage.find<A>(_:)(v39);
          if ((v30 & 1) != 0)
            v28 = *(_QWORD *)(*(_QWORD *)(v27 + 56) + 8 * v29);
          else
            v28 = 0;
        }
        if (__OFADD__(v28, v40))
        {
          __break(1u);
        }
        else
        {
          *(_QWORD *)&v44 = v16;
          (*(void (**)(Swift::UInt64, uint64_t, char *, __int128 *, uint64_t, uint64_t, uint64_t, uint64_t))((*MEMORY[0x24BEE4EA0] & *v26) + 0xF8))(v39, v28 + v40, v15, &v44, v27, v41, a5, a6);

          (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
        }
      }
    }
  }
  else
  {
    *(_QWORD *)&v38 = a6;
    v32 = v6[9];
    v31 = v6[10];
    *(_QWORD *)&v37 = a5;
    v33 = v6[8];
    v34 = v6[5];
    v39 = v6[6];
    v40 = v18;
    v35 = v6[4];
    *(_QWORD *)&v44 = v19;
    *((_QWORD *)&v44 + 1) = v20;
    v45 = v35 & 1;
    *(_QWORD *)&v46 = v34;
    *((_QWORD *)&v46 + 1) = v39;
    v47 = v21;
    v48 = v33;
    v49 = v32;
    v50 = v31;
    v43 = v16;
    v36 = v17;
    outlined copy of Text.Layout.Line.Line(v19, v20, v35 & 1);
    swift_bridgeObjectRetain();
    Text.Effect.Composition.widthDifference(at:context:)(&v43, v42, v41, v37, v38);
    outlined consume of Text.Effect.Composition.Operation(v36, v40, v19, v20, v35, v34, v39, v21);
  }
}

double Text.Effect.Composition.Operation.lineBreakingMetrics(line:context:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t *v5;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  void *v22;
  CGFloat v23;
  char v24;
  double v25;
  double v26;
  double v27;
  double v28;
  const __CTLine *v29;
  uint64_t v30;
  void *v31;
  double TypographicBounds;
  double v33;
  const __CTLine *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  double v42;
  double v43;
  double v44;
  void *v45;
  CGFloat v46;
  char v47;
  CGFloat v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  double v58;
  double v59;
  double v60;
  double v61;
  double v62;
  double v63;
  double v64;
  uint64_t v65;
  int v66;
  _QWORD *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char v71;
  void *v72;
  _QWORD v74[4];
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  void *v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  _QWORD *v90;
  CGFloat v91;
  uint64_t v92;
  __int128 v93;
  CGFloat leading;
  CGFloat descent;
  CGFloat ascent;
  CGPoint originsBuffer;
  char v98;
  uint64_t v99;
  uint64_t v100;
  int v101;
  CGPoint buffer;
  _QWORD *v103;
  __int128 v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  CFRange v112;
  CFRange v113;
  CFRange v114;

  v86 = a5;
  v111 = *MEMORY[0x24BDAC8D0];
  type metadata accessor for RangeSet<Text.Layout.CharacterIndex>.Ranges(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<Text.Layout.CharacterIndex>, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x24BEE4968]);
  MEMORY[0x24BDAC7A8](v10);
  v15 = (char *)v74 - v14;
  v17 = *v5;
  v16 = v5[1];
  v18 = (void *)v5[2];
  v19 = v5[3];
  v20 = v5[7];
  if (!(v20 >> 62))
  {
    v35 = v5[10];
    v36 = *(_QWORD *)(v35 + 16);
    if (v36)
    {
      v37 = v5[4];
      v38 = v5[5];
      v39 = v5[6];
      v40 = v5[8];
      v74[1] = v5[9];
      v74[2] = v40;
      v75 = v17;
      v76 = v16;
      v83 = v37;
      v82 = v38;
      v81 = v39;
      v80 = v20;
      outlined copy of Text.Effect.Composition.Operation(v17, v16, v18, v19, v37, v38, v39, v20);
      swift_bridgeObjectRetain();
      v74[3] = v35;
      v41 = (uint64_t *)(v35 + 56);
      v42 = 0.0;
      v43 = 0.0;
      v44 = 0.0;
      v25 = 0.0;
      v77 = a4;
      v84 = a3;
      v85 = a2;
      v79 = v19;
      v78 = v18;
      v45 = v18;
      v46 = *(double *)&v19;
      do
      {
        *(_QWORD *)&v93 = v36;
        v47 = v83 & 1;
        v48 = *((double *)v41 - 2);
        v49 = (_QWORD *)*(v41 - 1);
        v50 = *v41;
        v51 = v41[1];
        v52 = v41[2];
        v53 = v41[3];
        v54 = v41[4];
        v55 = v41[5];
        v56 = v41[6];
        v57 = v41[7];
        *(_QWORD *)&buffer.x = *(v41 - 3);
        buffer.y = v48;
        v92 = *(_QWORD *)&buffer.x;
        v91 = v48;
        v103 = v49;
        *(_QWORD *)&v104 = v50;
        v90 = v49;
        v89 = v50;
        *((_QWORD *)&v104 + 1) = v51;
        v105 = v52;
        v88 = v51;
        v106 = v53;
        v107 = v54;
        v87 = v53;
        v108 = v55;
        v109 = v56;
        v110 = v57;
        *(_QWORD *)&originsBuffer.x = v45;
        originsBuffer.y = v46;
        v98 = v83 & 1;
        v99 = v82;
        v100 = v81;
        v101 = v80;
        outlined copy of Text.Effect.Composition.Operation(*(uint64_t *)&buffer.x, *(uint64_t *)&v48, v49, v50, v51, v52, v53, v54);
        outlined copy of Text.Layout.Line.Line(v45, *(uint64_t *)&v46, v47);
        v58 = Text.Effect.Composition.Operation.lineBreakingMetrics(line:context:)(&originsBuffer, v85, v84, v77, v86);
        v60 = v59;
        v62 = v61;
        v64 = v63;
        outlined consume of Text.Layout.Line.Line(v45, *(uint64_t *)&v46, v47);
        v65 = v93;
        outlined consume of Text.Effect.Composition.Operation(v92, *(uint64_t *)&v91, v90, v89, v88, v52, v87, v54);
        if (v25 <= v58)
          v25 = v58;
        if (v44 <= v60)
          v44 = v60;
        if (v43 <= v62)
          v43 = v62;
        v42 = v42 + v64;
        v41 += 11;
        v36 = v65 - 1;
      }
      while (v36);
      swift_bridgeObjectRelease();
      outlined consume of Text.Effect.Composition.Operation(v75, v76, v78, v79, v83, v82, v81, v80);
      return v25;
    }
    return 0.0;
  }
  v85 = a2;
  v84 = a3;
  v21 = a4;
  v22 = *(void **)a1;
  v23 = *(double *)(a1 + 8);
  v24 = *(_BYTE *)(a1 + 16);
  if (v20 >> 62 != 1)
  {
    v91 = *(double *)&v13;
    v92 = (uint64_t)v11;
    v93 = *(_OWORD *)(a1 + 24);
    v66 = *(_DWORD *)(a1 + 40);
    v67 = Text.Effect.Keyframes.validTransform(_:)(v17, v21);
    if (v67)
    {
      v90 = v67;
      *(_QWORD *)&buffer.x = v22;
      buffer.y = v23;
      LOBYTE(v103) = v24;
      v104 = v93;
      LODWORD(v105) = v66;
      Text.Layout.Line.characterRanges(runIndices:)((CFIndex)v18, v19);
      v68 = v85;
      v69 = *(_QWORD *)(v85 + 16);
      if (v69)
      {
        v70 = specialized __RawDictionaryStorage.find<A>(_:)(v17);
        if ((v71 & 1) != 0)
          v69 = *(_QWORD *)(*(_QWORD *)(v68 + 56) + 8 * v70);
        else
          v69 = 0;
      }
      if (__OFADD__(v69, v16))
        goto LABEL_38;
      v72 = v90;
      v25 = (*(double (**)(uint64_t, uint64_t, char *, uint64_t, uint64_t, uint64_t, uint64_t))((*MEMORY[0x24BEE4EA0] & *v90) + 0xE8))(v17, v69 + v16, v15, v68, v84, v21, v86);

      (*(void (**)(char *, uint64_t))(*(_QWORD *)&v91 + 8))(v15, v92);
      return v25;
    }
    return 0.0;
  }
  v25 = 0.0;
  v26 = 0.0;
  v27 = 0.0;
  v28 = 0.0;
  if (v17 != v16)
  {
    if (v16 >= v17)
      goto LABEL_14;
    __break(1u);
LABEL_6:
    outlined copy of Text.Layout.Line.Line(v11, v12, 0);
    outlined copy of Text.Layout.Line.Line(v22, *(uint64_t *)&v23, 0);

    swift_release();
    v29 = (const __CTLine *)v22;
    while (1)
    {
      v30 = v17 + 1;
      v31 = (id)_CTLineGetRunAtIndex(v29, v17);
      buffer.x = 0.0;
      buffer.y = 0.0;
      ascent = 0.0;
      descent = 0.0;
      leading = 0.0;
      originsBuffer.y = 0.0;
      originsBuffer.x = 0.0;
      v112.location = 0;
      v112.length = 1;
      CTRunGetPositions((CTRunRef)v31, v112, &buffer);
      v113.location = 0;
      v113.length = 1;
      CTRunGetBaseAdvancesAndOrigins((CTRunRef)v31, v113, 0, &originsBuffer);
      v114.location = 0;
      v114.length = 0;
      TypographicBounds = CTRunGetTypographicBounds((CTRunRef)v31, v114, &ascent, &descent, &leading);

      swift_release();
      v33 = fabs(descent);
      if (v25 <= ascent)
        v25 = ascent;
      if (v26 <= v33)
        v26 = v33;
      if (v27 <= leading)
        v27 = leading;
      v28 = v28 + TypographicBounds;
      ++v17;
      if (v16 == v30)
        return v25;
LABEL_14:
      if (v17 >= v16)
        break;
      v11 = v22;
      v12 = *(_QWORD *)&v23;
      if ((v24 & 1) == 0)
        goto LABEL_6;
      outlined copy of Text.Layout.Line.Line(v22, *(uint64_t *)&v23, 1);
      v34 = (const __CTLine *)(id)_NSTextLineFragmentGetCTLine(v22);
      if (!v34)
        goto LABEL_39;
      v29 = v34;
      outlined consume of Text.Layout.Line.Line(v22, *(uint64_t *)&v23, 1);
    }
    __break(1u);
LABEL_38:
    __break(1u);
LABEL_39:
    __break(1u);
  }
  return v25;
}

double Text.Effect.Composition.Operation.metrics(at:line:context:)(CGFloat *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  int64_t *v6;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  CGFloat v15;
  uint64_t v16;
  int64_t v17;
  CGFloat v18;
  void *v19;
  unint64_t v20;
  unint64_t v21;
  void *v22;
  CGFloat v23;
  char v24;
  double v25;
  double v26;
  double v27;
  double v28;
  const __CTLine *v29;
  int64_t v30;
  void *v31;
  double TypographicBounds;
  double v33;
  const __CTLine *v34;
  int64_t v35;
  int64_t v36;
  int64_t v37;
  int64_t v38;
  int v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  void *v45;
  _QWORD *v47;
  _BYTE v48[24];
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  CGPoint originsBuffer;
  CGFloat leading;
  CGFloat descent;
  CGFloat ascent;
  CGPoint buffer;
  char v58;
  __int128 v59;
  int v60;
  int64_t v61;
  int64_t v62;
  int64_t v63;
  uint64_t v64;
  CFRange v65;
  CFRange v66;
  CFRange v67;

  v50 = a6;
  v52 = a5;
  v49 = a4;
  v51 = a3;
  v64 = *MEMORY[0x24BDAC8D0];
  type metadata accessor for RangeSet<Text.Layout.CharacterIndex>.Ranges(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<Text.Layout.CharacterIndex>, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x24BEE4968]);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v14 = &v48[-v13 - 8];
  v15 = *a1;
  v17 = *v6;
  v16 = v6[1];
  v19 = (void *)v6[2];
  v18 = *((double *)v6 + 3);
  v20 = v6[7];
  v21 = v20 >> 62;
  if (v20 >> 62)
  {
    v22 = *(void **)a2;
    v23 = *(double *)(a2 + 8);
    v24 = *(_BYTE *)(a2 + 16);
    if ((_DWORD)v21 == 1)
    {
      v25 = 0.0;
      v26 = 0.0;
      v27 = 0.0;
      v28 = 0.0;
      if (v17 != v16)
      {
        if (v16 >= v17)
          goto LABEL_14;
        __break(1u);
LABEL_6:
        outlined copy of Text.Layout.Line.Line(v11, v12, 0);
        outlined copy of Text.Layout.Line.Line(v22, *(uint64_t *)&v23, 0);

        swift_release();
        v29 = (const __CTLine *)v22;
        while (1)
        {
          v30 = v17 + 1;
          v31 = (id)_CTLineGetRunAtIndex(v29, v17);
          buffer.x = 0.0;
          buffer.y = 0.0;
          descent = 0.0;
          ascent = 0.0;
          originsBuffer.y = 0.0;
          leading = 0.0;
          originsBuffer.x = 0.0;
          v65.location = 0;
          v65.length = 1;
          CTRunGetPositions((CTRunRef)v31, v65, &buffer);
          v66.location = 0;
          v66.length = 1;
          CTRunGetBaseAdvancesAndOrigins((CTRunRef)v31, v66, 0, &originsBuffer);
          v67.location = 0;
          v67.length = 0;
          TypographicBounds = CTRunGetTypographicBounds((CTRunRef)v31, v67, &ascent, &descent, &leading);

          swift_release();
          v33 = fabs(descent);
          if (v25 <= ascent)
            v25 = ascent;
          if (v26 <= v33)
            v26 = v33;
          if (v27 <= leading)
            v27 = leading;
          v28 = v28 + TypographicBounds;
          v17 = v30;
          if (v16 == v30)
            return v25;
LABEL_14:
          if (v17 >= v16)
            break;
          v11 = v22;
          v12 = *(_QWORD *)&v23;
          if ((v24 & 1) == 0)
            goto LABEL_6;
          outlined copy of Text.Layout.Line.Line(v22, *(uint64_t *)&v23, 1);
          v34 = (const __CTLine *)(id)_NSTextLineFragmentGetCTLine(v22);
          if (!v34)
            goto LABEL_30;
          v29 = v34;
          outlined consume of Text.Layout.Line.Line(v22, *(uint64_t *)&v23, 1);
        }
        __break(1u);
LABEL_29:
        __break(1u);
LABEL_30:
        __break(1u);
      }
    }
    else
    {
      *(_QWORD *)v48 = v11;
      *(_OWORD *)&v48[8] = *(_OWORD *)(a2 + 24);
      v39 = *(_DWORD *)(a2 + 40);
      v40 = Text.Effect.Keyframes.validTransform(_:)(v17, v52);
      if (v40)
      {
        v47 = v40;
        *(_QWORD *)&buffer.x = v22;
        buffer.y = v23;
        v58 = v24;
        v59 = *(_OWORD *)&v48[8];
        v60 = v39;
        Text.Layout.Line.characterRanges(runIndices:)((CFIndex)v19, *(CFIndex *)&v18);
        v41 = v51;
        v42 = *(_QWORD *)(v51 + 16);
        if (v42)
        {
          v43 = specialized __RawDictionaryStorage.find<A>(_:)(v17);
          if ((v44 & 1) != 0)
            v42 = *(_QWORD *)(*(_QWORD *)(v41 + 56) + 8 * v43);
          else
            v42 = 0;
        }
        if (__OFADD__(v42, v16))
          goto LABEL_29;
        buffer.x = v15;
        v45 = v47;
        v25 = (*(double (**)(int64_t, uint64_t, _BYTE *, CGPoint *, uint64_t, uint64_t, uint64_t, uint64_t))((*MEMORY[0x24BEE4EA0] & *v47) + 0xF0))(v17, v42 + v16, v14, &buffer, v41, v49, v52, v50);

        (*(void (**)(_BYTE *, _QWORD))(v10 + 8))(v14, *(_QWORD *)v48);
      }
      else
      {
        return 0.0;
      }
    }
  }
  else
  {
    v36 = v6[9];
    v35 = v6[10];
    v37 = v6[8];
    *(_QWORD *)&v48[8] = v6[6];
    v38 = v6[4];
    *(_QWORD *)v48 = v6[5];
    *(_QWORD *)&buffer.x = v19;
    buffer.y = v18;
    v58 = v38 & 1;
    v59 = *(_OWORD *)v48;
    v60 = v20;
    v61 = v37;
    v62 = v36;
    v63 = v35;
    originsBuffer.x = v15;
    outlined copy of Text.Layout.Line.Line(v19, *(uint64_t *)&v18, v38 & 1);
    swift_bridgeObjectRetain();
    v25 = Text.Effect.Composition.metrics(at:context:)(&originsBuffer.x, v51, v49, v52, v50);
    outlined consume of Text.Effect.Composition.Operation(v17, v16, v19, *(uint64_t *)&v18, v38, *(uint64_t *)v48, *(uint64_t *)&v48[8], v20);
  }
  return v25;
}

uint64_t Text.Effect.Composition.appendInteractionMetrics(to:at:context:)(_QWORD *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, char *a6)
{
  uint64_t v6;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  int v27;
  __int128 v28;
  char v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39[2];
  char v40;
  __int128 v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;

  result = *(_QWORD *)(v6 + 64);
  v9 = *(_QWORD *)(result + 16);
  if (v9)
  {
    v10 = *a2;
    v30 = *(_QWORD *)(v6 + 8);
    v31 = *(void **)v6;
    v29 = *(_BYTE *)(v6 + 16);
    v28 = *(_OWORD *)(v6 + 24);
    v27 = *(_DWORD *)(v6 + 40);
    v22 = a1;
    v11 = (uint64_t *)(swift_bridgeObjectRetain() + 56);
    do
    {
      v12 = *(v11 - 2);
      v13 = (void *)*(v11 - 1);
      v14 = *v11;
      v15 = v11[1];
      v16 = v11[2];
      v17 = v11[3];
      v18 = v11[4];
      v19 = v11[5];
      v20 = v11[6];
      v21 = v11[7];
      v44 = *(v11 - 3);
      v45 = v12;
      v37 = v12;
      v38 = v44;
      v46 = v13;
      v47 = v14;
      v35 = v14;
      v36 = v13;
      v48 = v15;
      v49 = v16;
      v33 = v16;
      v34 = v15;
      v50 = v17;
      v51 = v18;
      v32 = v17;
      v52 = v19;
      v53 = v20;
      v54 = v21;
      v43 = v10;
      v39[0] = (uint64_t)v31;
      v39[1] = v30;
      v40 = v29;
      v41 = v28;
      v42 = v27;
      outlined copy of Text.Effect.Composition.Operation(v44, v12, v13, v14, v15, v16, v17, v18);
      outlined copy of Text.Layout.Line.Line(v31, v30, v29);
      Text.Effect.Composition.Operation.appendInteractionMetrics(to:at:line:context:)(v22, &v43, v39, a3, a4, a5, a6);
      outlined consume of Text.Layout.Line.Line(v31, v30, v29);
      outlined consume of Text.Effect.Composition.Operation(v38, v37, v36, v35, v34, v33, v32, v18);
      v11 += 11;
      --v9;
    }
    while (v9);
    return swift_bridgeObjectRelease();
  }
  return result;
}

void Text.Effect.Composition.Operation.appendInteractionMetrics(to:at:line:context:)(_QWORD *a1, uint64_t *a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, char *a7)
{
  uint64_t *v7;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  CFIndex v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void (*v36)(uint64_t *, _QWORD);
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  Swift::UInt64 v50;
  _QWORD *v51;
  uint64_t v52;
  Swift::UInt v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void (*v61)(uint64_t *, _QWORD);
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  uint64_t v70;
  Swift::UInt64 v71;
  uint64_t v72;
  char v73;
  _QWORD *v74;
  Swift::UInt v75;
  char *v76;
  uint64_t v77;
  __int128 v78;
  uint64_t v79;
  uint64_t v80;
  __int128 v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char v93;
  uint64_t v94;
  uint64_t v95;
  int v96;

  v76 = a7;
  v80 = a6;
  *(_QWORD *)&v78 = a5;
  v79 = a4;
  type metadata accessor for RangeSet<Text.Layout.CharacterIndex>.Ranges(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<Text.Layout.CharacterIndex>, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x24BEE4968]);
  v77 = v11;
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v11);
  v14 = (char *)&v74 - v13;
  v15 = *a2;
  v17 = *v7;
  v16 = v7[1];
  v18 = (void *)v7[2];
  v19 = v7[3];
  v20 = v7[7];
  v21 = v20 >> 62;
  if (!(v20 >> 62))
  {
    v45 = v7[9];
    v44 = v7[10];
    v74 = a1;
    v46 = v7[8];
    v48 = v7[5];
    v47 = v7[6];
    v49 = v7[4];
    v75 = v16;
    *(_QWORD *)&v81 = v18;
    *((_QWORD *)&v81 + 1) = v19;
    LOBYTE(v82) = v49 & 1;
    v83 = v48;
    v84 = v47;
    LODWORD(v85) = v20;
    v86 = v46;
    v87 = v45;
    v88 = v44;
    v91 = v15;
    v77 = v17;
    outlined copy of Text.Layout.Line.Line(v18, v19, v49 & 1);
    swift_bridgeObjectRetain();
    Text.Effect.Composition.appendInteractionMetrics(to:at:context:)(v74, &v91, v79, v78, v80, v76);
    outlined consume of Text.Effect.Composition.Operation(v77, v75, v18, v19, v49, v48, v47, v20);
    return;
  }
  v22 = *a3;
  v23 = a3[1];
  v24 = *((unsigned __int8 *)a3 + 16);
  v25 = a3[3];
  v26 = a3[4];
  v27 = *((_DWORD *)a3 + 10);
  if ((_DWORD)v21 == 1)
  {
    *(_QWORD *)&v81 = v22;
    *((_QWORD *)&v81 + 1) = v23;
    LOBYTE(v82) = v24;
    v83 = v25;
    v84 = v26;
    LODWORD(v85) = v27;
    v91 = v22;
    v92 = v23;
    LODWORD(v80) = v24;
    v93 = v24;
    v94 = v25;
    v95 = v26;
    v96 = v27;
    Text.Layout.Line.characterRanges(runIndices:)(v17, v16);
    v28 = Text.Layout.Line.clusters(for:)();
    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v77);
    v29 = *((_QWORD *)v28 + 2);
    if (v29)
    {
      v79 = v23;
      v30 = type metadata accessor for Text.Effect.InteractionMetrics();
      v76 = (char *)a1 + *(int *)(v30 + 20);
      v78 = *(_OWORD *)((char *)a1 + *(int *)(v30 + 28));
      v74 = a1;
      v31 = (_QWORD *)*a1;
      v75 = (Swift::UInt)v28;
      v32 = (uint64_t *)(v28 + 48);
      while (1)
      {
        v34 = *(v32 - 2);
        v33 = *(v32 - 1);
        v35 = *v32;
        v91 = v22;
        v92 = v79;
        v93 = v80;
        v94 = v25;
        v95 = v26;
        v96 = v27;
        swift_bridgeObjectRetain();
        Text.Layout.Cluster.typographicBounds(with:)((uint64_t)&v91, v35, (uint64_t)&v81);
        v89 = v34;
        v90 = v33;
        if (__OFSUB__(v33, v34))
          break;
        if (v33 != v34)
        {
          v36 = (void (*)(uint64_t *, _QWORD))RangeSet._ranges.modify();
          type metadata accessor for RangeSet<Text.Layout.CharacterIndex>.Ranges(0, &lazy cache variable for type metadata for RangeSet<Text.Layout.CharacterIndex>.Ranges, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x24BEE4908]);
          RangeSet.Ranges._insert(contentsOf:)();
          v36(&v91, 0);
        }
        v37 = v84;
        v38 = v85;
        v39 = v82;
        v40 = v83;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v31 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v31[2] + 1, 1, v31);
        v42 = v31[2];
        v41 = v31[3];
        if (v42 >= v41 >> 1)
          v31 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v41 > 1), v42 + 1, 1, v31);
        v31[2] = v42 + 1;
        v43 = &v31[12 * v42];
        v43[4] = v34;
        v43[5] = v33;
        *((_OWORD *)v43 + 3) = v78;
        v43[8] = v40;
        v43[9] = v37;
        v43[10] = v38;
        v43[11] = v39;
        v43[12] = v40;
        v43[13] = v37;
        v43[14] = v38;
        v43[15] = v39;
        swift_bridgeObjectRelease();
        v32 += 3;
        if (!--v29)
          goto LABEL_28;
      }
      __break(1u);
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }
    goto LABEL_29;
  }
  v75 = v16;
  v50 = v17;
  v51 = Text.Effect.Keyframes.validTransform(_:)(v17, v80);
  if (!v51)
  {
    *(_QWORD *)&v81 = v22;
    *((_QWORD *)&v81 + 1) = v23;
    LOBYTE(v82) = v24;
    v83 = v25;
    v84 = v26;
    LODWORD(v85) = v27;
    v91 = v22;
    v92 = v23;
    LODWORD(v80) = v24;
    v93 = v24;
    v94 = v25;
    v95 = v26;
    v96 = v27;
    Text.Layout.Line.characterRanges(runIndices:)((CFIndex)v18, v19);
    v54 = Text.Layout.Line.clusters(for:)();
    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v77);
    v55 = *((_QWORD *)v54 + 2);
    if (v55)
    {
      v79 = v23;
      v56 = type metadata accessor for Text.Effect.InteractionMetrics();
      v76 = (char *)a1 + *(int *)(v56 + 20);
      v78 = *(_OWORD *)((char *)a1 + *(int *)(v56 + 28));
      v74 = a1;
      v31 = (_QWORD *)*a1;
      v75 = (Swift::UInt)v54;
      v57 = (uint64_t *)(v54 + 48);
      while (1)
      {
        v58 = *(v57 - 2);
        v59 = *(v57 - 1);
        v60 = *v57;
        v91 = v22;
        v92 = v79;
        v93 = v80;
        v94 = v25;
        v95 = v26;
        v96 = v27;
        swift_bridgeObjectRetain();
        Text.Layout.Cluster.typographicBounds(with:)((uint64_t)&v91, v60, (uint64_t)&v81);
        v89 = v58;
        v90 = v59;
        if (__OFSUB__(v59, v58))
          break;
        if (v59 != v58)
        {
          v61 = (void (*)(uint64_t *, _QWORD))RangeSet._ranges.modify();
          type metadata accessor for RangeSet<Text.Layout.CharacterIndex>.Ranges(0, &lazy cache variable for type metadata for RangeSet<Text.Layout.CharacterIndex>.Ranges, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x24BEE4908]);
          RangeSet.Ranges._insert(contentsOf:)();
          v61(&v91, 0);
        }
        v62 = v84;
        v63 = v85;
        v64 = v82;
        v65 = v83;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v31 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v31[2] + 1, 1, v31);
        v67 = v31[2];
        v66 = v31[3];
        if (v67 >= v66 >> 1)
          v31 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v66 > 1), v67 + 1, 1, v31);
        v31[2] = v67 + 1;
        v68 = &v31[12 * v67];
        v68[4] = v58;
        v68[5] = v59;
        *((_OWORD *)v68 + 3) = v78;
        v68[8] = v65;
        v68[9] = v62;
        v68[10] = v63;
        v68[11] = v64;
        v68[12] = v65;
        v68[13] = v62;
        v68[14] = v63;
        v68[15] = v64;
        swift_bridgeObjectRelease();
        v57 += 3;
        if (!--v55)
        {
LABEL_28:
          swift_bridgeObjectRelease();
          *v74 = v31;
          return;
        }
      }
      goto LABEL_38;
    }
LABEL_29:
    swift_bridgeObjectRelease();
    return;
  }
  v74 = v51;
  v52 = type metadata accessor for Text.Effect.InteractionMetrics();
  v53 = v75;
  if ((specialized Set.contains(_:)(v50, v75, *(_QWORD *)((char *)a1 + *(int *)(v52 + 24))) & 1) != 0)
  {

    return;
  }
  specialized Set._Variant.insert(_:)(&v81, v50, v53);
  v69 = v79;
  v70 = *(_QWORD *)(v79 + 16);
  if (v70)
  {
    v71 = v50;
    v72 = specialized __RawDictionaryStorage.find<A>(_:)(v50);
    if ((v73 & 1) != 0)
      v70 = *(_QWORD *)(*(_QWORD *)(v69 + 56) + 8 * v72);
    else
      v70 = 0;
  }
  else
  {
    v71 = v50;
  }
  if (!__OFADD__(v70, v75))
  {
    *(_QWORD *)&v81 = v15;
    (*(void (**)(Swift::UInt64, Swift::UInt, _QWORD *, __int128 *, uint64_t, _QWORD, uint64_t, char *))((*MEMORY[0x24BEE4EA0] & *v74) + 0x100))(v71, v70 + v75, a1, &v81, v69, v78, v80, v76);

    return;
  }
LABEL_39:
  __break(1u);
}

uint64_t Text.Effect.Composition.Operation.resolve(line:in:)(uint64_t a1, uint64_t a2)
{
  Swift::UInt64 *v2;
  CGFloat v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  Swift::UInt64 v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  Swift::UInt64 v15;
  void *v16;
  uint64_t v17;
  CGFloat v18;
  CGFloat v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  CGFloat v25;
  char v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  Swift::UInt64 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  Swift::UInt64 v35;
  void *v36;
  void *v37;
  int v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v54;
  void *v55;
  CGFloat v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  _QWORD *v60;
  uint64_t v61;
  char v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  char v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char v70;
  uint64_t v72;
  unint64_t v73;
  char v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  unint64_t v82;
  char v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  __int128 v99;
  __int128 v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  Swift::UInt64 v104;
  uint64_t v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  uint64_t v109;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  __int128 v118;
  __int128 v119;
  uint64_t v120;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  __int128 v131;
  __int128 v132;
  float v133;
  unsigned int v134;
  unsigned int v135;
  unsigned int v136;
  Swift::UInt64 v137;
  Swift::UInt64 v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  __int128 v142;
  uint64_t v143;
  uint64_t v144;
  CGFloat v145;
  CFIndex v146;
  void *v147;
  CGAffineTransform v148;
  uint64_t v149;
  __int128 v150;
  _BYTE v151[56];
  char v152;
  CGAffineTransform v153;

  type metadata accessor for RangeSet<Text.Layout.CharacterIndex>.Ranges(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<Text.Layout.CharacterIndex>, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x24BEE4968]);
  v7 = v6;
  v8 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)&v137 - v9;
  v11 = *v2;
  v12 = v2[1];
  v13 = (void *)v2[2];
  v14 = v2[3];
  v15 = v2[7] >> 62;
  if ((_DWORD)v15)
  {
    v146 = v2[3];
    v16 = *(void **)a1;
    v145 = *(double *)(a1 + 8);
    v17 = *(unsigned __int8 *)(a1 + 16);
    v19 = *(double *)(a1 + 24);
    v18 = *(double *)(a1 + 32);
    v20 = *(unsigned int *)(a1 + 40);
    if ((_DWORD)v15 == 1)
    {
      v21 = *(_QWORD *)a2;
      v22 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a2 + 16) + 64);
      if (*(_QWORD *)(v22 + 16)
        && (v23 = specialized __RawDictionaryStorage.find<A>(_:)(v11), (v24 & 1) != 0)
        && (v25 = *(double *)(*(_QWORD *)(v22 + 56) + 8 * v23), v25 != 0.0))
      {
        swift_retain();
        if (swift_isUniquelyReferenced_nonNull_native())
        {
          v91 = *(_QWORD *)(v21 + 24);
          v92 = *(_QWORD *)(v21 + 32);
          v93 = *(_QWORD *)(v21 + 40);
          v94 = *(_QWORD *)(v21 + 48);
          v96 = *(_QWORD *)(v21 + 56);
          v95 = *(_QWORD *)(v21 + 64);
        }
        else
        {
          type metadata accessor for Text.Effect.DrawingContext.Storage();
          v120 = swift_allocObject();
          *(_OWORD *)(v120 + 104) = 0u;
          *(_OWORD *)(v120 + 120) = 0u;
          *(_OWORD *)(v120 + 136) = 0u;
          __asm { FMOV            V0.2D, #1.0 }
          *(_OWORD *)(v120 + 152) = _Q0;
          *(_QWORD *)(v120 + 168) = 0x3FF0000000000000;
          *(_BYTE *)(v120 + 176) = 0;
          v146 = *(_QWORD *)(v21 + 16);
          *(_QWORD *)(v120 + 16) = v146;
          v92 = *(_QWORD *)(v21 + 32);
          v147 = *(void **)(v21 + 24);
          v93 = *(_QWORD *)(v21 + 40);
          v94 = *(_QWORD *)(v21 + 48);
          v96 = *(_QWORD *)(v21 + 56);
          v95 = *(_QWORD *)(v21 + 64);
          *(_QWORD *)(v120 + 24) = v147;
          *(_QWORD *)(v120 + 32) = v92;
          *(_QWORD *)(v120 + 40) = v93;
          *(_QWORD *)(v120 + 48) = v94;
          *(_QWORD *)(v120 + 56) = v96;
          *(_QWORD *)(v120 + 64) = v95;
          *(_QWORD *)(v120 + 72) = *(_QWORD *)(v21 + 72);
          v144 = v17;
          v123 = *(_QWORD *)(v21 + 184);
          v122 = *(_QWORD *)(v21 + 192);
          v143 = v20;
          v124 = v12;
          v125 = *(_QWORD *)(v21 + 200);
          v126 = *(_QWORD *)(v21 + 208);
          v127 = *(_QWORD *)(v21 + 216);
          *(_QWORD *)(v120 + 184) = v123;
          *(_QWORD *)(v120 + 192) = v122;
          *(_QWORD *)(v120 + 200) = v125;
          *(_QWORD *)(v120 + 208) = v126;
          *(_QWORD *)(v120 + 216) = v127;
          swift_retain();
          swift_retain();
          v128 = v125;
          v12 = v124;
          v20 = v143;
          outlined copy of Text.Effect.StopCollector?(v123, v122, v128, v126);
          outlined consume of Text.Effect.StopCollector?(0, 0, 0, 0);
          v129 = *(_QWORD *)(v21 + 80);
          v130 = *(_QWORD *)(v21 + 88);
          LOBYTE(v123) = *(_BYTE *)(v21 + 96);
          swift_release();
          *(_QWORD *)(v120 + 80) = v129;
          *(_QWORD *)(v120 + 88) = v130;
          v17 = v144;
          *(_BYTE *)(v120 + 96) = v123;
          swift_release();
          v91 = (uint64_t)v147;
          v21 = v120;
        }
        v149 = v91;
        *(_QWORD *)&v150 = v92;
        *((_QWORD *)&v150 + 1) = v93;
        *(_QWORD *)v151 = v94;
        *(_QWORD *)&v151[8] = v96;
        *(_QWORD *)&v151[16] = v95;
        CGAffineTransformTranslate(&v153, (CGAffineTransform *)&v149, v25, 0.0);
        v131 = *(_OWORD *)&v153.c;
        v132 = *(_OWORD *)&v153.tx;
        *(_OWORD *)(v21 + 24) = *(_OWORD *)&v153.a;
        *(_OWORD *)(v21 + 40) = v131;
        *(_OWORD *)(v21 + 56) = v132;
      }
      else
      {
        swift_retain();
      }
      v26 = *(_BYTE *)(v21 + 96);
      v27 = 0uLL;
      if ((v26 & 1) == 0)
        v27 = *(_OWORD *)(v21 + 80);
      v149 = (uint64_t)v16;
      v28 = *(_QWORD *)&v145;
      *(CGFloat *)&v150 = v145;
      *((_QWORD *)&v150 + 1) = v17;
      *(CGFloat *)v151 = v19;
      *(CGFloat *)&v151[8] = v18;
      *(_QWORD *)&v151[16] = v20;
      *(_QWORD *)&v151[24] = v11;
      *(_QWORD *)&v151[32] = v12;
      *(_OWORD *)&v151[40] = v27;
      v152 = v26;
      outlined copy of Text.Layout.Line.Line(v16, *(uint64_t *)&v145, v17);
      Text.Effect.DrawingContext.Storage.append(_:)((uint64_t)&v149);
      outlined consume of Text.Layout.Line.Line(v16, v28, v17);
      return swift_release();
    }
    v143 = v20;
    v144 = v17;
    v57 = v12;
    v147 = v13;
    v58 = *(_QWORD *)a2;
    v59 = Text.Effect.Keyframes.validTransform(_:)(v11, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a2 + 16) + 48));
    if (v59)
    {
      v60 = v59;
      v61 = *(_QWORD *)(a2 + 24);
      v62 = *(_BYTE *)(a2 + 32);
      v63 = *(_QWORD *)(a2 + 40);
      v149 = v58;
      v150 = *(_OWORD *)(a2 + 8);
      *(_QWORD *)v151 = v61;
      v151[8] = v62;
      *(_QWORD *)&v151[16] = v63;
      v64 = *(_QWORD *)(*(_QWORD *)(v58 + 16) + 72);
      if (*(_QWORD *)(v64 + 16)
        && (v65 = specialized __RawDictionaryStorage.find<A>(_:)(v11, v57), (v66 & 1) != 0)
        && (v3 = *(double *)(*(_QWORD *)(v64 + 56) + 8 * v65), v3 != 0.0))
      {
        swift_retain();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          type metadata accessor for Text.Effect.DrawingContext.Storage();
          v97 = swift_allocObject();
          *(_OWORD *)(v97 + 104) = 0u;
          *(_OWORD *)(v97 + 120) = 0u;
          *(_OWORD *)(v97 + 136) = 0u;
          __asm { FMOV            V0.2D, #1.0 }
          *(_OWORD *)(v97 + 152) = _Q0;
          *(_QWORD *)(v97 + 168) = 0x3FF0000000000000;
          *(_BYTE *)(v97 + 176) = 0;
          *((_QWORD *)&v142 + 1) = *(_QWORD *)(v58 + 16);
          *(_QWORD *)(v97 + 16) = *((_QWORD *)&v142 + 1);
          v99 = *(_OWORD *)(v58 + 40);
          v100 = *(_OWORD *)(v58 + 56);
          *(_OWORD *)(v97 + 24) = *(_OWORD *)(v58 + 24);
          *(_OWORD *)(v97 + 40) = v99;
          *(_OWORD *)(v97 + 56) = v100;
          *(_QWORD *)(v97 + 72) = *(_QWORD *)(v58 + 72);
          *(_QWORD *)&v142 = *(_QWORD *)(v58 + 184);
          v141 = *(_QWORD *)(v58 + 192);
          v101 = v141;
          v140 = *(_QWORD *)(v58 + 200);
          v102 = v140;
          v139 = *(_QWORD *)(v58 + 208);
          v103 = v139;
          v138 = *(_QWORD *)(v58 + 216);
          v104 = v138;
          *(_QWORD *)(v97 + 184) = v142;
          *(_QWORD *)(v97 + 192) = v101;
          *(_QWORD *)(v97 + 200) = v102;
          *(_QWORD *)(v97 + 208) = v103;
          *(_QWORD *)(v97 + 216) = v104;
          swift_retain();
          swift_retain();
          outlined copy of Text.Effect.StopCollector?(v142, v141, v140, v139);
          outlined consume of Text.Effect.StopCollector?(0, 0, 0, 0);
          *((_QWORD *)&v142 + 1) = *(_QWORD *)(v58 + 80);
          *(_QWORD *)&v142 = *(_QWORD *)(v58 + 88);
          LODWORD(v141) = *(unsigned __int8 *)(v58 + 96);
          swift_release();
          v105 = v142;
          *(_QWORD *)(v97 + 80) = *((_QWORD *)&v142 + 1);
          *(_QWORD *)(v97 + 88) = v105;
          *(_BYTE *)(v97 + 96) = v141;
          v149 = v97;
          swift_release();
          v58 = v97;
        }
        v106 = *(_OWORD *)(v58 + 40);
        *(_OWORD *)&v153.a = *(_OWORD *)(v58 + 24);
        *(_OWORD *)&v153.c = v106;
        *(_OWORD *)&v153.tx = *(_OWORD *)(v58 + 56);
        CGAffineTransformTranslate(&v148, &v153, v3, 0.0);
        v107 = *(_OWORD *)&v148.c;
        v108 = *(_OWORD *)&v148.tx;
        *(_OWORD *)(v58 + 24) = *(_OWORD *)&v148.a;
        *(_OWORD *)(v58 + 40) = v107;
        *(_OWORD *)(v58 + 56) = v108;
      }
      else
      {
        swift_retain();
      }
      *(_QWORD *)&v153.a = v16;
      v153.b = v145;
      LOBYTE(v153.c) = v144;
      v153.d = v19;
      v153.tx = v18;
      LODWORD(v153.ty) = v143;
      Text.Layout.Line.characterRanges(runIndices:)((CFIndex)v147, v146);
      v67 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a2 + 16) + 32);
      v68 = *(_QWORD *)(v67 + 16);
      if (v68)
      {
        v69 = specialized __RawDictionaryStorage.find<A>(_:)(v11);
        if ((v70 & 1) != 0)
          v68 = *(_QWORD *)(*(_QWORD *)(v67 + 56) + 8 * v69);
        else
          v68 = 0;
      }
      if (!__OFADD__(v68, v57))
      {
        (*(void (**)(Swift::UInt64, uint64_t, char *, uint64_t *))((*MEMORY[0x24BEE4EA0] & *v60) + 0xE0))(v11, v68 + v57, v10, &v149);

        (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
        return swift_release();
      }
      __break(1u);
    }
    else
    {
      v72 = *(_QWORD *)(*(_QWORD *)(v58 + 16) + 64);
      v3 = 0.0;
      if (*(_QWORD *)(v72 + 16))
      {
        v73 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v147);
        v57 = v144;
        if ((v74 & 1) != 0)
          v3 = *(double *)(*(_QWORD *)(v72 + 56) + 8 * v73);
      }
      else
      {
        v57 = v144;
      }
      LODWORD(v10) = _SwiftUIIsAppleInternalBuild();
      if (!(_DWORD)v10)
      {
        v81 = 0;
        v82 = 0;
        goto LABEL_33;
      }
    }
    v133 = specialized Color.Resolved.init(red:green:blue:opacity:)(1.0, 0.0, 0.0);
    v81 = LODWORD(v133) | ((unint64_t)v134 << 32);
    v82 = v135 | ((unint64_t)v136 << 32);
LABEL_33:
    v83 = v10 ^ 1;
    swift_retain();
    if (v3 == 0.0)
    {
      v84 = *(_QWORD *)&v145;
      if ((*(_BYTE *)(v58 + 96) & 1) != 0)
      {
LABEL_36:
        v149 = (uint64_t)v16;
        *(_QWORD *)&v150 = v84;
        *((_QWORD *)&v150 + 1) = v57;
        *(CGFloat *)v151 = v19;
        *(CGFloat *)&v151[8] = v18;
        *(_QWORD *)&v151[16] = v143;
        *(_QWORD *)&v151[24] = v147;
        *(_QWORD *)&v151[32] = v146;
        *(_QWORD *)&v151[40] = v81;
        *(_QWORD *)&v151[48] = v82;
        v152 = v83;
        outlined copy of Text.Layout.Line.Line(v16, v84, v57);
        Text.Effect.DrawingContext.Storage.append(_:)((uint64_t)&v149);
        outlined consume of Text.Layout.Line.Line(v16, v84, v57);
        return swift_release();
      }
    }
    else
    {
      if (swift_isUniquelyReferenced_nonNull_native())
      {
        v85 = *(_QWORD *)(v58 + 24);
        v86 = *(_QWORD *)(v58 + 32);
        v87 = *(_QWORD *)(v58 + 40);
        v88 = *(_QWORD *)(v58 + 48);
        v90 = *(_QWORD *)(v58 + 56);
        v89 = *(_QWORD *)(v58 + 64);
      }
      else
      {
        type metadata accessor for Text.Effect.DrawingContext.Storage();
        v109 = swift_allocObject();
        *(_OWORD *)(v109 + 104) = 0u;
        *(_OWORD *)(v109 + 120) = 0u;
        *(_OWORD *)(v109 + 136) = 0u;
        __asm { FMOV            V0.2D, #1.0 }
        *(_OWORD *)(v109 + 152) = _Q0;
        *(_QWORD *)(v109 + 168) = 0x3FF0000000000000;
        *(_BYTE *)(v109 + 176) = 0;
        *(_QWORD *)(v109 + 16) = *(_QWORD *)(v58 + 16);
        v86 = *(_QWORD *)(v58 + 32);
        v141 = *(_QWORD *)(v58 + 24);
        v87 = *(_QWORD *)(v58 + 40);
        v88 = *(_QWORD *)(v58 + 48);
        v90 = *(_QWORD *)(v58 + 56);
        v89 = *(_QWORD *)(v58 + 64);
        *(_QWORD *)(v109 + 24) = v141;
        *(_QWORD *)(v109 + 32) = v86;
        *(_QWORD *)(v109 + 40) = v87;
        *(_QWORD *)(v109 + 48) = v88;
        *(_QWORD *)(v109 + 56) = v90;
        *(_QWORD *)(v109 + 64) = v89;
        *(_QWORD *)(v109 + 72) = *(_QWORD *)(v58 + 72);
        *(_QWORD *)&v142 = v82;
        v111 = *(_QWORD *)(v58 + 184);
        v112 = *(_QWORD *)(v58 + 192);
        *((_QWORD *)&v142 + 1) = v81;
        v113 = *(_QWORD *)(v58 + 200);
        v114 = *(_QWORD *)(v58 + 208);
        v115 = *(_QWORD *)(v58 + 216);
        *(_QWORD *)(v109 + 184) = v111;
        *(_QWORD *)(v109 + 192) = v112;
        *(_QWORD *)(v109 + 200) = v113;
        *(_QWORD *)(v109 + 208) = v114;
        *(_QWORD *)(v109 + 216) = v115;
        swift_retain();
        swift_retain();
        v57 = v144;
        outlined copy of Text.Effect.StopCollector?(v111, v112, v113, v114);
        outlined consume of Text.Effect.StopCollector?(0, 0, 0, 0);
        v116 = *(_QWORD *)(v58 + 80);
        v117 = *(_QWORD *)(v58 + 88);
        LOBYTE(v112) = *(_BYTE *)(v58 + 96);
        swift_release();
        *(_QWORD *)(v109 + 80) = v116;
        *(_QWORD *)(v109 + 88) = v117;
        v81 = *((_QWORD *)&v142 + 1);
        v82 = v142;
        *(_BYTE *)(v109 + 96) = v112;
        swift_release();
        v85 = v141;
        v58 = v109;
      }
      v84 = *(_QWORD *)&v145;
      v149 = v85;
      *(_QWORD *)&v150 = v86;
      *((_QWORD *)&v150 + 1) = v87;
      *(_QWORD *)v151 = v88;
      *(_QWORD *)&v151[8] = v90;
      *(_QWORD *)&v151[16] = v89;
      CGAffineTransformTranslate(&v153, (CGAffineTransform *)&v149, v3, 0.0);
      v118 = *(_OWORD *)&v153.c;
      v119 = *(_OWORD *)&v153.tx;
      *(_OWORD *)(v58 + 24) = *(_OWORD *)&v153.a;
      *(_OWORD *)(v58 + 40) = v118;
      *(_OWORD *)(v58 + 56) = v119;
      if ((*(_BYTE *)(v58 + 96) & 1) != 0)
        goto LABEL_36;
    }
    v83 = 0;
    v81 = *(_QWORD *)(v58 + 80);
    v82 = *(_QWORD *)(v58 + 88);
    goto LABEL_36;
  }
  v145 = *((double *)v2 + 7);
  v144 = v12;
  v147 = v13;
  v29 = v11;
  v30 = v2[4];
  v31 = v2[5];
  v32 = v2[6];
  v34 = v2[8];
  v33 = v2[9];
  v35 = v2[10];
  v143 = *(_QWORD *)a2;
  v36 = Text.Effect.Keyframes.validFilter(_:)(v29, *(_QWORD *)(*(_QWORD *)(v143 + 16) + 48));
  if (!v36)
  {
    v149 = (uint64_t)v147;
    *(_QWORD *)&v150 = v14;
    BYTE8(v150) = v30 & 1;
    *(_QWORD *)v151 = v31;
    *(_QWORD *)&v151[8] = v32;
    *(_DWORD *)&v151[16] = LODWORD(v145);
    *(_QWORD *)&v151[24] = v34;
    *(_QWORD *)&v151[32] = v33;
    *(_QWORD *)&v151[40] = v35;
    return Text.Effect.Composition.resolve(in:)(a2);
  }
  v37 = v36;
  v138 = v35;
  v139 = v33;
  v140 = v34;
  v141 = v29;
  v146 = v14;
  *(_QWORD *)&v142 = v31;
  *((_QWORD *)&v142 + 1) = v32;
  v38 = LODWORD(v145);
  outlined copy of Text.Effect.Composition.Operation(v29, v144, v147, v14, v30, v31, v32, *(unint64_t *)&v145);

  v39 = *(_QWORD **)(v143 + 16);
  v40 = v39[3];
  v41 = v39[4];
  v42 = v39[5];
  v43 = v39[6];
  v44 = v39[7];
  v46 = v39[8];
  v45 = v39[9];
  type metadata accessor for Text.Effect.DrawingContext.Storage.Shared();
  v47 = (_QWORD *)swift_allocObject();
  v47[3] = v40;
  v47[4] = v41;
  v47[5] = v42;
  v47[6] = v43;
  v47[7] = v44;
  v47[8] = v46;
  v47[9] = v45;
  v47[2] = MEMORY[0x24BEE4AF8];
  type metadata accessor for Text.Effect.DrawingContext.Storage();
  v48 = swift_allocObject();
  *(_QWORD *)(v48 + 32) = 0;
  *(_QWORD *)(v48 + 40) = 0;
  *(_QWORD *)(v48 + 48) = 0x3FF0000000000000;
  *(_QWORD *)(v48 + 56) = 0;
  *(_QWORD *)(v48 + 64) = 0;
  *(_QWORD *)(v48 + 72) = 0x3FF0000000000000;
  *(_QWORD *)(v48 + 80) = 0;
  *(_QWORD *)(v48 + 88) = 0;
  *(_BYTE *)(v48 + 96) = 1;
  *(_OWORD *)(v48 + 104) = 0u;
  *(_OWORD *)(v48 + 120) = 0u;
  *(_OWORD *)(v48 + 136) = 0u;
  __asm { FMOV            V1.2D, #1.0 }
  *(_OWORD *)(v48 + 152) = _Q1;
  *(_QWORD *)(v48 + 168) = 0x3FF0000000000000;
  *(_BYTE *)(v48 + 176) = 0;
  *(_OWORD *)(v48 + 184) = 0u;
  *(_OWORD *)(v48 + 200) = 0u;
  *(_QWORD *)(v48 + 216) = 0;
  *(_QWORD *)(v48 + 16) = v47;
  *(_QWORD *)(v48 + 24) = 0x3FF0000000000000;
  v54 = MEMORY[0x23B7C9E44](v44 + 16);
  if (v54)
  {
    v55 = (void *)v54;
    v56 = *(double *)(v54 + OBJC_IVAR____TtC7SwiftUI19TextEffectsRenderer_contentsScale);
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();

  }
  else
  {
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v56 = 1.0;
  }
  *(_QWORD *)&v153.a = v48;
  memset(&v153.b, 0, 24);
  LOBYTE(v153.tx) = 1;
  v153.ty = v56;
  v149 = (uint64_t)v147;
  *(_QWORD *)&v150 = v146;
  v137 = v30;
  BYTE8(v150) = v30 & 1;
  v75 = v142;
  *(_OWORD *)v151 = v142;
  v76 = *((_QWORD *)&v142 + 1);
  *(_DWORD *)&v151[16] = v38;
  *(_QWORD *)&v151[24] = v140;
  *(_QWORD *)&v151[32] = v139;
  *(_QWORD *)&v151[40] = v138;
  Text.Effect.Composition.resolve(in:)(&v153);
  v77 = *(_QWORD *)(*(_QWORD *)&v153.a + 16);
  swift_beginAccess();
  v78 = *(_QWORD *)(v77 + 16);
  *(_QWORD *)(v77 + 16) = MEMORY[0x24BEE4AF8];
  v79 = v141;
  v149 = v141;
  v80 = v144;
  *(_QWORD *)&v150 = v144;
  *((_QWORD *)&v150 + 1) = v78;
  memset(v151, 0, sizeof(v151));
  v152 = 0x80;
  swift_bridgeObjectRetain();
  Text.Effect.DrawingContext.Storage.append(_:)((uint64_t)&v149);
  swift_bridgeObjectRelease_n();
  outlined consume of Text.Effect.Composition.Operation(v79, v80, v147, v146, v137, v75, v76, *(unint64_t *)&v145);
  return swift_release();
}

unint64_t Text.Effect.Composition.DisplacementCollector.recordTransform(_:)(Swift::UInt64 a1, Swift::UInt a2)
{
  uint64_t v2;
  unint64_t result;
  char v6;
  double v7;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v9;

  if (!*(_QWORD *)(*(_QWORD *)(v2 + 104) + 16)
    || (result = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2), (v6 & 1) == 0))
  {
    v7 = *(double *)(v2 + 88);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v9 = *(_QWORD *)(v2 + 104);
    *(_QWORD *)(v2 + 104) = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a1, a2, isUniquelyReferenced_nonNull_native, v7);
    *(_QWORD *)(v2 + 104) = v9;
    return swift_bridgeObjectRelease();
  }
  return result;
}

void Text.Effect.Composition.Operation.appendDisplacement(to:)(uint64_t a1)
{
  Swift::UInt64 *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  Swift::UInt64 v8;
  int64_t v9;
  int64_t v10;
  char v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  char v15;
  unint64_t v16;
  uint64_t v17;
  _BOOL8 v18;
  uint64_t v19;
  char v20;
  unint64_t v21;
  char v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  Swift::UInt64 v28;
  uint64_t v29;
  Swift::UInt64 v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  CFIndex v34;
  CFIndex v35;
  _QWORD *v36;
  _QWORD *v37;
  char v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  char v44;
  uint64_t v45;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v47;
  char v48;
  unint64_t v49;
  uint64_t v50;
  _BOOL8 v51;
  uint64_t v52;
  char v53;
  unint64_t v54;
  char v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  double v60;
  __int128 v61;
  _BYTE v62[32];
  __int128 v63;
  __int128 v64;
  uint64_t v65;

  type metadata accessor for RangeSet<Text.Layout.CharacterIndex>.Ranges(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<Text.Layout.CharacterIndex>, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x24BEE4968]);
  v4 = v3;
  v5 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v7 = &v62[-v6 - 16];
  v8 = v1[7] >> 62;
  if (!(_DWORD)v8)
  {
    v28 = v1[10];
    v29 = *(_QWORD *)(v28 + 16);
    if (v29)
    {
      swift_bridgeObjectRetain();
      v30 = v28 + 64;
      do
      {
        v31 = *(_QWORD *)(v30 + 48);
        v32 = *(_OWORD *)(v30 - 16);
        v61 = *(_OWORD *)(v30 - 32);
        *(_OWORD *)v62 = v32;
        v33 = *(_OWORD *)(v30 + 16);
        *(_OWORD *)&v62[16] = *(_OWORD *)v30;
        v63 = v33;
        v64 = *(_OWORD *)(v30 + 32);
        v65 = v31;
        Text.Effect.Composition.Operation.appendDisplacement(to:)(a1);
        v30 += 88;
        --v29;
      }
      while (v29);
      swift_bridgeObjectRelease();
    }
    return;
  }
  v9 = *v1;
  v10 = v1[1];
  if ((_DWORD)v8 != 1)
  {
    v34 = v1[2];
    v35 = v1[3];
    v36 = Text.Effect.Keyframes.validTransform(_:)(*v1, *(_QWORD *)(a1 + 72));
    if (v36)
    {
      v37 = v36;
      Text.Effect.Composition.DisplacementCollector.recordTransform(_:)(v9, v10);
      v38 = *(_BYTE *)(a1 + 24);
      v39 = *(_DWORD *)(a1 + 48);
      v61 = *(_OWORD *)(a1 + 8);
      v62[0] = v38;
      *(_OWORD *)&v62[8] = *(_OWORD *)(a1 + 32);
      *(_DWORD *)&v62[24] = v39;
      Text.Layout.Line.characterRanges(runIndices:)(v34, v35);
      v40 = *(_QWORD *)(a1 + 56);
      v41 = *(_QWORD *)(v40 + 16);
      if (v41)
      {
        v42 = specialized __RawDictionaryStorage.find<A>(_:)(v9);
        if ((v43 & 1) != 0)
          v41 = *(_QWORD *)(*(_QWORD *)(v40 + 56) + 8 * v42);
        else
          v41 = 0;
      }
      if (__OFADD__(v41, v10))
        goto LABEL_61;
      *(_QWORD *)&v61 = *(_QWORD *)a1;
      v60 = (*(double (**)(int64_t, uint64_t, _BYTE *, __int128 *, uint64_t, _QWORD, _QWORD, _QWORD))((*MEMORY[0x24BEE4EA0] & *v37) + 0xF8))(v9, v41 + v10, v7, &v61, v40, *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80));

      (*(void (**)(_BYTE *, uint64_t))(v5 + 8))(v7, v4);
      *(double *)(a1 + 88) = v60 + *(double *)(a1 + 88);
      return;
    }
    if (v34 == v35)
      return;
    if (v35 < v34)
      goto LABEL_63;
    while (1)
    {
      if (v34 >= v35)
        goto LABEL_57;
      if (*(_QWORD *)(*(_QWORD *)(a1 + 96) + 16))
      {
        specialized __RawDictionaryStorage.find<A>(_:)(v34);
        if ((v44 & 1) != 0)
          goto LABEL_36;
      }
      v45 = *(_QWORD *)(a1 + 88);
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *(_QWORD *)&v61 = *(_QWORD *)(a1 + 96);
      v47 = v61;
      *(_QWORD *)(a1 + 96) = 0x8000000000000000;
      v49 = specialized __RawDictionaryStorage.find<A>(_:)(v34);
      v50 = *(_QWORD *)(v47 + 16);
      v51 = (v48 & 1) == 0;
      v52 = v50 + v51;
      if (__OFADD__(v50, v51))
        goto LABEL_59;
      v53 = v48;
      if (*(_QWORD *)(v47 + 24) >= v52)
      {
        if ((isUniquelyReferenced_nonNull_native & 1) != 0)
        {
          v56 = (_QWORD *)v61;
          if ((v48 & 1) == 0)
            goto LABEL_47;
        }
        else
        {
          specialized _NativeDictionary.copy()();
          v56 = (_QWORD *)v61;
          if ((v53 & 1) == 0)
            goto LABEL_47;
        }
      }
      else
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v52, isUniquelyReferenced_nonNull_native);
        v54 = specialized __RawDictionaryStorage.find<A>(_:)(v34);
        if ((v53 & 1) != (v55 & 1))
          goto LABEL_64;
        v49 = v54;
        v56 = (_QWORD *)v61;
        if ((v53 & 1) == 0)
        {
LABEL_47:
          v56[(v49 >> 6) + 8] |= 1 << v49;
          v57 = 8 * v49;
          *(_QWORD *)(v56[6] + v57) = v34;
          *(_QWORD *)(v56[7] + v57) = v45;
          v58 = v56[2];
          v26 = __OFADD__(v58, 1);
          v59 = v58 + 1;
          if (v26)
            goto LABEL_60;
          v56[2] = v59;
          goto LABEL_35;
        }
      }
      *(_QWORD *)(v56[7] + 8 * v49) = v45;
LABEL_35:
      *(_QWORD *)(a1 + 96) = v56;
      swift_bridgeObjectRelease();
LABEL_36:
      if (v35 == ++v34)
        return;
    }
  }
  if (v9 == v10)
    return;
  if (v10 < v9)
    goto LABEL_62;
  while (v9 < v10)
  {
    if (*(_QWORD *)(*(_QWORD *)(a1 + 96) + 16))
    {
      specialized __RawDictionaryStorage.find<A>(_:)(v9);
      if ((v11 & 1) != 0)
        goto LABEL_8;
    }
    v12 = *(_QWORD *)(a1 + 88);
    v13 = swift_isUniquelyReferenced_nonNull_native();
    *(_QWORD *)&v61 = *(_QWORD *)(a1 + 96);
    v14 = v61;
    *(_QWORD *)(a1 + 96) = 0x8000000000000000;
    v16 = specialized __RawDictionaryStorage.find<A>(_:)(v9);
    v17 = *(_QWORD *)(v14 + 16);
    v18 = (v15 & 1) == 0;
    v19 = v17 + v18;
    if (__OFADD__(v17, v18))
      goto LABEL_56;
    v20 = v15;
    if (*(_QWORD *)(v14 + 24) >= v19)
    {
      if ((v13 & 1) != 0)
      {
        v23 = (_QWORD *)v61;
        if ((v15 & 1) == 0)
          goto LABEL_19;
      }
      else
      {
        specialized _NativeDictionary.copy()();
        v23 = (_QWORD *)v61;
        if ((v20 & 1) == 0)
          goto LABEL_19;
      }
    }
    else
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v19, v13);
      v21 = specialized __RawDictionaryStorage.find<A>(_:)(v9);
      if ((v20 & 1) != (v22 & 1))
        goto LABEL_64;
      v16 = v21;
      v23 = (_QWORD *)v61;
      if ((v20 & 1) == 0)
      {
LABEL_19:
        v23[(v16 >> 6) + 8] |= 1 << v16;
        v24 = 8 * v16;
        *(_QWORD *)(v23[6] + v24) = v9;
        *(_QWORD *)(v23[7] + v24) = v12;
        v25 = v23[2];
        v26 = __OFADD__(v25, 1);
        v27 = v25 + 1;
        if (v26)
          goto LABEL_58;
        v23[2] = v27;
        goto LABEL_7;
      }
    }
    *(_QWORD *)(v23[7] + 8 * v16) = v12;
LABEL_7:
    *(_QWORD *)(a1 + 96) = v23;
    swift_bridgeObjectRelease();
LABEL_8:
    if (v10 == ++v9)
      return;
  }
  __break(1u);
LABEL_56:
  __break(1u);
LABEL_57:
  __break(1u);
LABEL_58:
  __break(1u);
LABEL_59:
  __break(1u);
LABEL_60:
  __break(1u);
LABEL_61:
  __break(1u);
LABEL_62:
  __break(1u);
LABEL_63:
  __break(1u);
LABEL_64:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
}

uint64_t Text.Effect.Composition.updateNonadjacentFragmentIdentifiers(map:)(uint64_t result)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  _QWORD *v7;

  v2 = *(_QWORD **)(v1 + 64);
  v3 = v2[2];
  if (v3)
  {
    v4 = v1;
    v5 = result;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
LABEL_9:
      v2 = specialized _ArrayBuffer._consumeAndCreateNew()(v2);
    v6 = 0;
    v7 = v2 + 4;
    do
    {
      if (v6 >= v2[2])
      {
        __break(1u);
        goto LABEL_9;
      }
      ++v6;
      result = Text.Effect.Composition.Run.updateNonadjacentFragmentIdentifiers(map:)(v5);
      v7 += 11;
    }
    while (v3 != v6);
    *(_QWORD *)(v4 + 64) = v2;
  }
  return result;
}

uint64_t FragmentIdentifierOffsetMap.countMap.getter(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  int64_t v5;
  int64_t v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  int64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char isUniquelyReferenced_nonNull_native;
  char v17;
  unint64_t v18;
  uint64_t v19;
  _BOOL8 v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t result;
  uint64_t v30;

  v30 = a1 + 64;
  v2 = 1 << *(_BYTE *)(a1 + 32);
  v3 = -1;
  if (v2 < 64)
    v3 = ~(-1 << v2);
  v4 = v3 & *(_QWORD *)(a1 + 64);
  v5 = (unint64_t)(v2 + 63) >> 6;
  swift_bridgeObjectRetain();
  v6 = 0;
  v7 = (_QWORD *)MEMORY[0x24BEE4B00];
  while (1)
  {
    if (v4)
    {
      v8 = __clz(__rbit64(v4));
      v4 &= v4 - 1;
      v9 = v8 | (v6 << 6);
    }
    else
    {
      v10 = v6 + 1;
      if (__OFADD__(v6, 1))
        goto LABEL_38;
      if (v10 >= v5)
      {
LABEL_34:
        swift_release();
        return (uint64_t)v7;
      }
      v11 = *(_QWORD *)(v30 + 8 * v10);
      ++v6;
      if (!v11)
      {
        v6 = v10 + 1;
        if (v10 + 1 >= v5)
          goto LABEL_34;
        v11 = *(_QWORD *)(v30 + 8 * v6);
        if (!v11)
        {
          v6 = v10 + 2;
          if (v10 + 2 >= v5)
            goto LABEL_34;
          v11 = *(_QWORD *)(v30 + 8 * v6);
          if (!v11)
          {
            v12 = v10 + 3;
            if (v12 >= v5)
              goto LABEL_34;
            v11 = *(_QWORD *)(v30 + 8 * v12);
            if (!v11)
            {
              while (1)
              {
                v6 = v12 + 1;
                if (__OFADD__(v12, 1))
                  goto LABEL_39;
                if (v6 >= v5)
                  goto LABEL_34;
                v11 = *(_QWORD *)(v30 + 8 * v6);
                ++v12;
                if (v11)
                  goto LABEL_21;
              }
            }
            v6 = v12;
          }
        }
      }
LABEL_21:
      v4 = (v11 - 1) & v11;
      v9 = __clz(__rbit64(v11)) + (v6 << 6);
    }
    v13 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 24 * v9 + 16);
    v14 = v13 + 1;
    if (__OFADD__(v13, 1))
      break;
    v15 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8 * v9);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v18 = specialized __RawDictionaryStorage.find<A>(_:)(v15);
    v19 = v7[2];
    v20 = (v17 & 1) == 0;
    v21 = v19 + v20;
    if (__OFADD__(v19, v20))
      goto LABEL_36;
    v22 = v17;
    if (v7[3] >= v21)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      {
        if ((v17 & 1) != 0)
          goto LABEL_4;
      }
      else
      {
        specialized _NativeDictionary.copy()();
        if ((v22 & 1) != 0)
          goto LABEL_4;
      }
    }
    else
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v21, isUniquelyReferenced_nonNull_native);
      v23 = specialized __RawDictionaryStorage.find<A>(_:)(v15);
      if ((v22 & 1) != (v24 & 1))
        goto LABEL_40;
      v18 = v23;
      if ((v22 & 1) != 0)
      {
LABEL_4:
        *(_QWORD *)(v7[7] + 8 * v18) = v14;
        goto LABEL_5;
      }
    }
    v7[(v18 >> 6) + 8] |= 1 << v18;
    v25 = 8 * v18;
    *(_QWORD *)(v7[6] + v25) = v15;
    *(_QWORD *)(v7[7] + v25) = v14;
    v26 = v7[2];
    v27 = __OFADD__(v26, 1);
    v28 = v26 + 1;
    if (v27)
      goto LABEL_37;
    v7[2] = v28;
LABEL_5:
    swift_bridgeObjectRelease();
  }
  __break(1u);
LABEL_36:
  __break(1u);
LABEL_37:
  __break(1u);
LABEL_38:
  __break(1u);
LABEL_39:
  __break(1u);
LABEL_40:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t Text.Effect.Composition.Run.updateNonadjacentFragmentIdentifiers(map:)(uint64_t result)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  unint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v2 = result;
  v3 = *v1;
  v4 = v1[1];
  v6 = (void *)v1[2];
  v5 = v1[3];
  v7 = v1[7];
  if (v7 >> 62)
  {
    if (v7 >> 62 != 1)
    {
      result = FragmentIdentifierOffsetMap.offset(for:runIndices:)(*v1, v1[2], v1[3]);
      if (!__OFADD__(v4, result))
      {
        *v1 = v3;
        v1[1] = v4 + result;
        v1[2] = (uint64_t)v6;
        v1[3] = v5;
        v1[5] = 0;
        v1[6] = 0;
        v1[4] = 0;
        v1[7] = 0x8000000000000000;
        v1[9] = 0;
        v1[10] = 0;
        v1[8] = 0;
        return result;
      }
      goto LABEL_15;
    }
  }
  else
  {
    v9 = v1[9];
    v8 = (_QWORD *)v1[10];
    v20 = v1[4];
    v21 = v1[6];
    v22 = v1[5];
    v23 = v1[8];
    outlined copy of Text.Layout.Line.Line(v6, v5, v20 & 1);
    swift_bridgeObjectRetain();
    v10 = Text.Effect.Composition.runIndices.getter();
    result = FragmentIdentifierOffsetMap.offset(for:runIndices:)(v3, v10, v11);
    if (__OFADD__(v4, result))
    {
LABEL_16:
      __break(1u);
      return result;
    }
    v16 = v4 + result;
    v17 = v9;
    v18 = v4;
    v19 = v3;
    v12 = v8[2];
    v13 = v8;
    if (v12)
    {
      v14 = 0;
      v15 = 32;
      while (1)
      {
        result = swift_isUniquelyReferenced_nonNull_native();
        if ((result & 1) == 0)
        {
          result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v13);
          v13 = (_QWORD *)result;
        }
        if (v14 >= v13[2])
          break;
        ++v14;
        Text.Effect.Composition.Run.updateNonadjacentFragmentIdentifiers(map:)(v2);
        v15 += 88;
        if (v12 == v14)
          goto LABEL_12;
      }
      __break(1u);
LABEL_15:
      __break(1u);
      goto LABEL_16;
    }
LABEL_12:
    result = outlined consume of Text.Effect.Composition.Operation(v19, v18, v6, v5, v20, v22, v21, v7);
    *v1 = v19;
    v1[1] = v16;
    v1[2] = (uint64_t)v6;
    v1[3] = v5;
    v1[4] = v20 & 1;
    v1[5] = v22;
    v1[6] = v21;
    v1[7] = v7;
    v1[8] = v23;
    v1[9] = v17;
    v1[10] = (uint64_t)v13;
  }
  return result;
}

uint64_t Text.Effect.Composition.runIndices.getter()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  char v24;
  char v25;
  uint64_t result;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  type metadata accessor for RangeSet<Int>.Ranges(0, &lazy cache variable for type metadata for RangeSet<Int>.Ranges, (uint64_t (*)(_QWORD, _QWORD, _QWORD))MEMORY[0x24BEE4908]);
  v2 = v1;
  v3 = *(_QWORD *)(v1 - 8);
  MEMORY[0x24BDAC7A8](v1);
  v5 = (char *)&v27 - v4;
  type metadata accessor for RangeSet<Int>.Ranges(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<Int>, (uint64_t (*)(_QWORD, _QWORD, _QWORD))MEMORY[0x24BEE4968]);
  v7 = v6;
  v27 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v27 - v8;
  v10 = *v0;
  v11 = v0[1];
  v12 = *((_BYTE *)v0 + 16);
  v13 = v0[3];
  v14 = v0[4];
  v15 = *((_DWORD *)v0 + 10);
  v16 = v0[6];
  v17 = v0[7];
  v18 = v0[8];
  RangeSet.init()();
  v28 = v10;
  v29 = v11;
  v30 = v12;
  v31 = v13;
  v32 = v14;
  v33 = v15;
  v34 = v16;
  v35 = v17;
  v36 = v18;
  Text.Effect.Composition.appendRunIndices(to:)((uint64_t)v9);
  RangeSet.ranges.getter();
  v19 = RangeSet.Ranges.count.getter();
  if (v19 == 1)
  {
    RangeSet.Ranges.subscript.getter();
    (*(void (**)(char *, uint64_t))(v27 + 8))(v9, v7);
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    return v28;
  }
  MEMORY[0x24BDAC7A8](v19);
  *(&v27 - 2) = (uint64_t)v5;
  specialized static Log.internalError(_:file:line:)((uint64_t)"SwiftUICore/Logging.swift", 25, 2, 107, partial apply for implicit closure #1 in Text.Effect.Composition.runIndices.getter);
  v21 = specialized RangeSet.lowerBound.getter();
  if ((v22 & 1) != 0)
    v20 = 0;
  else
    v20 = v21;
  v23 = specialized RangeSet.upperBound.getter();
  v25 = v24;
  result = (*(uint64_t (**)(char *, uint64_t))(v27 + 8))(v9, v7);
  if ((v25 & 1) != 0)
    v23 = 0;
  if (v23 >= v20)
  {
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    return v20;
  }
  __break(1u);
  return result;
}

uint64_t Text.Effect.Composition.appendRunIndices(to:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v3;
  uint64_t *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  void (*v20)(_QWORD *, _QWORD);
  void (*v21)(_QWORD *, _QWORD);
  char v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD v29[2];
  char v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  result = *(_QWORD *)(v1 + 64);
  v3 = *(_QWORD *)(result + 16);
  if (v3)
  {
    v4 = (uint64_t *)(swift_bridgeObjectRetain() + 56);
    do
    {
      v5 = (void *)*(v4 - 1);
      v6 = *v4;
      v7 = v4[1];
      v8 = v4[2];
      v9 = v4[3];
      v10 = v4[4];
      v11 = v4[5];
      v12 = v4[6];
      v13 = v4[7];
      if (v10 >> 62)
      {
        v14 = *(v4 - 3);
        v15 = *(v4 - 2);
        if (v10 >> 62 == 1)
        {
          v37 = *(v4 - 3);
          v38 = v15;
          v16 = v14;
          if (v14 != v15)
          {
            v24 = v8;
            v26 = v9;
            v22 = v7;
            type metadata accessor for RangeSet<Int>.Ranges(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<Int>, (uint64_t (*)(_QWORD, _QWORD, _QWORD))MEMORY[0x24BEE4968]);
            v20 = (void (*)(_QWORD *, _QWORD))RangeSet._ranges.modify();
            type metadata accessor for RangeSet<Int>.Ranges(0, &lazy cache variable for type metadata for RangeSet<Int>.Ranges, (uint64_t (*)(_QWORD, _QWORD, _QWORD))MEMORY[0x24BEE4908]);
            RangeSet.Ranges._insert(contentsOf:)();
            v20(v29, 0);
            LOBYTE(v7) = v22;
            v8 = v24;
            v9 = v26;
            v16 = v15;
          }
          v17 = v14;
          v18 = v5;
          v19 = v6;
        }
        else
        {
          v37 = *(v4 - 1);
          v38 = v6;
          v19 = (uint64_t)v5;
          if (v5 != (void *)v6)
          {
            v25 = v8;
            v27 = v9;
            v23 = v7;
            type metadata accessor for RangeSet<Int>.Ranges(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<Int>, (uint64_t (*)(_QWORD, _QWORD, _QWORD))MEMORY[0x24BEE4968]);
            v21 = (void (*)(_QWORD *, _QWORD))RangeSet._ranges.modify();
            type metadata accessor for RangeSet<Int>.Ranges(0, &lazy cache variable for type metadata for RangeSet<Int>.Ranges, (uint64_t (*)(_QWORD, _QWORD, _QWORD))MEMORY[0x24BEE4908]);
            RangeSet.Ranges._insert(contentsOf:)();
            v21(v29, 0);
            LOBYTE(v7) = v23;
            v8 = v25;
            v9 = v27;
            v19 = v6;
          }
          v17 = v14;
          v16 = v15;
          v18 = v5;
        }
        outlined consume of Text.Effect.Composition.Operation(v17, v16, v18, v19, v7, v8, v9, v10);
      }
      else
      {
        v29[0] = *(v4 - 1);
        v29[1] = v6;
        v30 = v7 & 1;
        v31 = v8;
        v32 = v9;
        v33 = v10;
        v34 = v11;
        v35 = v12;
        v36 = v13;
        Text.Effect.Composition.appendRunIndices(to:)(a1);
      }
      v4 += 11;
      --v3;
    }
    while (v3);
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t implicit closure #1 in Text.Effect.Composition.runIndices.getter()
{
  Swift::String v0;
  Swift::String v1;
  Swift::String v2;

  _StringGuts.grow(_:)(23);
  v0._object = (void *)0x80000002352E7470;
  v0._countAndFlagsBits = 0xD000000000000015;
  String.append(_:)(v0);
  type metadata accessor for RangeSet<Int>.Ranges(0, &lazy cache variable for type metadata for RangeSet<Int>.Ranges, (uint64_t (*)(_QWORD, _QWORD, _QWORD))MEMORY[0x24BEE4908]);
  lazy protocol witness table accessor for type RangeSet<Int>.Ranges and conformance RangeSet<A>.Ranges(&lazy protocol witness table cache variable for type RangeSet<Int>.Ranges and conformance RangeSet<A>.Ranges, MEMORY[0x24BEE4938]);
  v1._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v1);
  swift_bridgeObjectRelease();
  v2._countAndFlagsBits = 0;
  v2._object = (void *)0xE000000000000000;
  String.append(_:)(v2);
  return 0;
}

uint64_t FragmentIdentifierOffsetMap.offset(for:runIndices:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v8;
  uint64_t result;
  char v10;
  uint64_t *v11;
  uint64_t v12;
  char isUniquelyReferenced_nonNull_native;
  char v15;
  uint64_t v16;
  uint64_t v17;

  v4 = v3;
  v8 = *v3;
  if (!*(_QWORD *)(v8 + 16))
    goto LABEL_6;
  result = specialized __RawDictionaryStorage.find<A>(_:)(a1);
  if ((v10 & 1) == 0)
    goto LABEL_6;
  v11 = (uint64_t *)(*(_QWORD *)(v8 + 56) + 24 * result);
  v12 = v11[2];
  if (v11[1] == a2)
  {
    a2 = *v11;
    if (*v11 > a3)
    {
      __break(1u);
LABEL_6:
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v16 = *v4;
      *v4 = 0x8000000000000000;
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a2, a3, 0, a1, isUniquelyReferenced_nonNull_native);
      *v4 = v16;
      swift_bridgeObjectRelease();
      return 0;
    }
LABEL_8:
    v15 = swift_isUniquelyReferenced_nonNull_native();
    v17 = *v4;
    *v4 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a2, a3, v12, a1, v15);
    *v4 = v17;
    swift_bridgeObjectRelease();
    return v12;
  }
  if (!__OFADD__(v12++, 1))
    goto LABEL_8;
  __break(1u);
  return result;
}

_QWORD *Text.Effect.Composition.Operation.append(_:)@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *result;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  unint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t *v36;
  _QWORD *v37;
  unint64_t v38;
  void *v39;
  uint64_t v40;
  _QWORD *v41;
  unint64_t v42;
  unint64_t v43;
  _QWORD *v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  void *v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  _QWORD *v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t v82;
  _QWORD *v83;
  _QWORD *v84;
  _QWORD *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  void *v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  void *v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  void *v103;
  char v104;
  void *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  unsigned int v112;
  _QWORD *v113;
  char v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t *v120;
  void *v121;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  void *v128;
  uint64_t v129;
  char v130;
  unint64_t v131;
  uint64_t v132;
  uint64_t v133;
  unint64_t v134;
  unint64_t v135;
  _QWORD *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  unint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  void *v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  _QWORD v168[11];
  _QWORD v169[3];
  uint64_t v170;
  unint64_t v171;
  uint64_t v172;
  uint64_t v173;
  unint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  _QWORD v178[23];

  v4 = *a1;
  v5 = a1[1];
  v6 = (void *)a1[2];
  v7 = a1[3];
  v9 = a1[4];
  v8 = a1[5];
  v10 = a1[6];
  v11 = a1[7];
  v13 = a1[8];
  v12 = a1[9];
  v14 = a1[10];
  v15 = (void *)v2[2];
  v17 = *v2;
  v16 = v2[1];
  v18 = v2[3];
  v19 = v2[4];
  v21 = v2[5];
  v20 = v2[6];
  v22 = v2[7];
  v24 = v2 + 8;
  v23 = v2[8];
  v26 = v2[9];
  result = (_QWORD *)v2[10];
  v178[0] = *v2;
  v178[1] = v16;
  v178[2] = v15;
  v178[3] = v18;
  v178[4] = v19;
  v178[5] = v21;
  v178[6] = v20;
  v178[7] = v22;
  v178[8] = v23;
  v178[9] = v26;
  v178[10] = result;
  v178[11] = v4;
  v178[12] = v5;
  v178[13] = v6;
  v178[14] = v7;
  v178[15] = v9;
  v178[16] = v8;
  v178[17] = v10;
  v178[18] = v11;
  v178[19] = v13;
  v178[20] = v12;
  v178[21] = v14;
  v159 = v10;
  if (v22 >> 62)
  {
    if (v22 >> 62 == 1)
    {
      if (v11 >> 62 == 1)
      {
        v140 = v14;
        v142 = v9;
        v149 = v12;
        v137 = v13;
        v27 = v8;
        v28 = (uint64_t)v6;
        v134 = v11;
        v145 = v7;
        result = (_QWORD *)outlined release of (Text.Effect.Composition.Operation, Text.Effect.Composition.Operation)((uint64_t)v178);
        if (v16 != v4)
        {
          *a2 = v4;
          a2[1] = v5;
          a2[2] = v28;
          a2[3] = v145;
          a2[4] = v142;
          a2[5] = v27;
          a2[6] = v159;
          a2[7] = v134;
          a2[8] = v137;
          a2[9] = v149;
          a2[10] = v140;
          return result;
        }
        if (v5 < v17)
          goto LABEL_50;
        *v2 = v17;
        v2[1] = v5;
        v29 = 0uLL;
        *((_OWORD *)v2 + 1) = 0u;
        *((_OWORD *)v2 + 2) = 0u;
        v2[6] = 0;
        v2[7] = 0x4000000000000000;
        v2[9] = 0;
        v2[10] = 0;
        *v24 = 0;
LABEL_20:
        *(_OWORD *)a2 = v29;
        *((_OWORD *)a2 + 1) = v29;
        a2[4] = 0x1FFFFFFFELL;
        *(_OWORD *)(a2 + 5) = v29;
        *(_OWORD *)(a2 + 7) = v29;
        *(_OWORD *)(a2 + 9) = v29;
        return result;
      }
    }
    else if (v11 >> 62 == 2)
    {
      v127 = v18;
      v129 = (uint64_t)v15;
      v139 = v13;
      v155 = v8;
      v144 = v9;
      v147 = v7;
      v38 = v11;
      v151 = v12;
      v39 = v6;
      v40 = v14;
      result = (_QWORD *)outlined release of (Text.Effect.Composition.Operation, Text.Effect.Composition.Operation)((uint64_t)v178);
      if (v17 != v4)
        goto LABEL_44;
      if (__OFSUB__(v5, v16))
        goto LABEL_52;
      if (v5 != v16 || (void *)v127 != v39)
      {
LABEL_44:
        *a2 = v4;
        a2[1] = v5;
        a2[2] = (uint64_t)v39;
        a2[3] = v147;
        a2[4] = v144;
        a2[5] = v155;
        a2[6] = v159;
        a2[7] = v38;
        a2[8] = v139;
        a2[9] = v151;
        a2[10] = v40;
        return result;
      }
      if (v147 < v129)
        goto LABEL_53;
      *v2 = v4;
      v2[1] = v5;
      v2[2] = v129;
      v2[3] = v147;
      v2[5] = 0;
      v2[6] = 0;
      v2[4] = 0;
      v2[7] = 0x8000000000000000;
      v2[9] = 0;
      v2[10] = 0;
      *v24 = 0;
      v29 = 0uLL;
      goto LABEL_20;
    }
LABEL_42:
    v156 = v8;
    v97 = v14;
    v98 = v6;
    v99 = v7;
    v100 = v12;
    v101 = v11;
    v102 = v13;
    outlined copy of Text.Effect.Composition.Operation(v4, v5, v6, v7, v9, v8, v10, v11);
    outlined release of (Text.Effect.Composition.Operation, Text.Effect.Composition.Operation)((uint64_t)v178);
    *a2 = v4;
    a2[1] = v5;
    a2[2] = (uint64_t)v98;
    a2[3] = v99;
    a2[4] = v9;
    a2[5] = v156;
    a2[6] = v159;
    a2[7] = v101;
    a2[8] = v102;
    a2[9] = v100;
    a2[10] = v97;
    return (_QWORD *)outlined copy of Text.Effect.Composition.Operation(v4, v5, v98, v99, v9, v156, v159, v101);
  }
  v150 = v12;
  v141 = v14;
  v136 = result;
  if (v11 >> 62)
  {
    v91 = v6;
    v92 = v7;
    v93 = v11;
    v94 = v10;
    v95 = v8;
    v96 = v13;
    outlined copy of Text.Layout.Line.Line(v15, v18, v19 & 1);
    swift_bridgeObjectRetain();
    v14 = v141;
    v13 = v96;
    v8 = v95;
    v6 = v91;
    v10 = v94;
    v11 = v93;
    v7 = v92;
    v12 = v150;
    goto LABEL_42;
  }
  v143 = v9;
  v146 = v7;
  v133 = v20;
  v135 = v11;
  v154 = v8;
  v138 = v13;
  v131 = v22;
  v132 = v21;
  v130 = v19;
  if (v17 != v4)
    goto LABEL_43;
  if (__OFSUB__(v5, v16))
    goto LABEL_51;
  if (v5 != v16)
  {
LABEL_43:
    v103 = v6;
    v104 = v9;
    v105 = v15;
    v106 = v18;
    outlined copy of Text.Effect.Composition.Operation(v4, v5, v6, v7, v104, v8, v10, v11);
    outlined copy of Text.Effect.Composition.Operation(v17, v16, v105, v106, v130, v132, v133, v131);
    outlined release of (Text.Effect.Composition.Operation, Text.Effect.Composition.Operation)((uint64_t)v178);
    *a2 = v4;
    a2[1] = v5;
    a2[2] = (uint64_t)v103;
    a2[3] = v146;
    a2[4] = v143;
    a2[5] = v154;
    a2[6] = v159;
    a2[7] = v135;
    a2[8] = v138;
    a2[9] = v150;
    a2[10] = v141;
    outlined copy of Text.Layout.Line.Line(v103, v146, v143 & 1);
    return (_QWORD *)swift_bridgeObjectRetain();
  }
  v123 = v19 & 1;
  v124 = v26;
  v125 = v23;
  v126 = v18;
  v128 = v15;
  if (!*(_QWORD *)(v14 + 16))
  {
    v114 = v9;
    v109 = v5;
    outlined copy of Text.Effect.Composition.Operation(v4, v5, v6, v7, v114, v8, v10, v11);
    v113 = v136;
    v107 = v124;
    v108 = v126;
    v112 = v131;
    v111 = v132;
    v110 = v133;
    outlined copy of Text.Effect.Composition.Operation(v4, v5, v128, v126, v130, v132, v133, v131);
    swift_bridgeObjectRetain();
LABEL_48:
    outlined release of (Text.Effect.Composition.Operation, Text.Effect.Composition.Operation)((uint64_t)v178);
    result = (_QWORD *)swift_bridgeObjectRelease();
    *v2 = v4;
    v2[1] = v109;
    v2[2] = (uint64_t)v128;
    v2[3] = v108;
    v2[4] = v123;
    v2[5] = v111;
    v2[6] = v110;
    v2[7] = v112;
    v2[8] = v125;
    v2[9] = v107;
    v2[10] = (uint64_t)v113;
    *(_OWORD *)a2 = 0u;
    *((_OWORD *)a2 + 1) = 0u;
    a2[4] = 0x1FFFFFFFELL;
    *(_OWORD *)(a2 + 5) = 0u;
    *(_OWORD *)(a2 + 7) = 0u;
    *(_OWORD *)(a2 + 9) = 0u;
    return result;
  }
  v120 = v2;
  v30 = v14;
  v162 = *(_QWORD *)(v14 + 16);
  v31 = v6;
  v32 = v7;
  v33 = v11;
  outlined copy of Text.Effect.Composition.Operation(v4, v5, v6, v7, v9, v8, v10, v11);
  outlined copy of Text.Effect.Composition.Operation(v4, v5, v128, v126, v130, v132, v133, v131);
  v121 = v31;
  v34 = v31;
  v35 = v162;
  outlined copy of Text.Effect.Composition.Operation(v4, v5, v34, v32, v9, v154, v159, v33);
  outlined copy of Text.Effect.Composition.Operation(v4, v5, v128, v126, v130, v132, v133, v131);
  swift_bridgeObjectRetain();
  v36 = (uint64_t *)(v30 + 56);
  v37 = v136;
  v148 = v4;
  while (1)
  {
    v163 = v35;
    v52 = *(v36 - 3);
    v53 = *(v36 - 2);
    v55 = (void *)*(v36 - 1);
    v54 = *v36;
    v56 = v36[1];
    v57 = v36[2];
    v58 = v36[3];
    v59 = v36[4];
    v60 = v36[6];
    v61 = v36[7];
    v62 = v37[2];
    v63 = v37;
    v157 = v53;
    v158 = v52;
    v166 = v57;
    v167 = *v36;
    v160 = v60;
    v161 = v55;
    v164 = v58;
    v165 = v36[5];
    if (!v62)
    {
      v72 = *v36;
      v73 = v36[1];
      v74 = *(v36 - 2);
      v75 = *(v36 - 3);
      v76 = v36[2];
      v153 = v36[4];
      outlined copy of Text.Effect.Composition.Operation(v52, v53, v55, v54, v56, v57, v58, v59);
      v77 = v72;
      v78 = v73;
      outlined copy of Text.Effect.Composition.Operation(v75, v74, v55, v77, v73, v76, v164, v153);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
        v79 = v63;
      else
        v79 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 1, v63);
      v47 = v163;
      v81 = v79[2];
      v80 = v79[3];
      v82 = v81 + 1;
      v49 = v166;
      v48 = v167;
      if (v81 >= v80 >> 1)
      {
        v84 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v80 > 1), v81 + 1, 1, v79);
        v82 = v81 + 1;
        v46 = v164;
        v49 = v166;
        v48 = v167;
        v50 = v78;
        v79 = v84;
      }
      else
      {
        v50 = v78;
        v46 = v164;
      }
      v83 = &v79[11 * v81];
      v83[4] = v75;
      v45 = v83 + 4;
      v67 = v74;
      v68 = v55;
      v37 = v79;
      v79[2] = v82;
      v88 = v48;
      v69 = v50;
      v90 = v49;
      v89 = v46;
      v51 = v153;
      v70 = v153;
      v87 = v165;
      v71 = v160;
      goto LABEL_24;
    }
    v64 = *(v36 - 3);
    v65 = *(v36 - 2);
    v152 = v36[1];
    v66 = v36[4];
    outlined copy of Text.Effect.Composition.Operation(v52, v53, v55, v54, v56, v57, v58, v59);
    result = (swift_isUniquelyReferenced_nonNull_native() & 1) != 0
           ? v37
           : specialized _ArrayBuffer._consumeAndCreateNew()(v37);
    v47 = v163;
    if (v62 > result[2])
      break;
    v168[0] = v64;
    v168[1] = v65;
    v37 = result;
    v168[2] = v55;
    v168[3] = v167;
    v168[4] = v152;
    v168[5] = v166;
    v168[6] = v164;
    v168[7] = v66;
    v168[8] = v165;
    v168[9] = v60;
    v168[10] = v61;
    Text.Effect.Composition.Operation.append(_:)(v169, v168);
    v86 = v169[0];
    v67 = v169[1];
    v68 = (void *)v169[2];
    v88 = v170;
    v69 = v171;
    v90 = v172;
    v89 = v173;
    v70 = v174;
    v87 = v175;
    v71 = v176;
    v61 = v177;
    if (v171 >> 1 == 0xFFFFFFFF && !HIDWORD(v174))
    {
      v49 = v166;
      v48 = v167;
      LOBYTE(v50) = v152;
      v46 = v164;
      v51 = v66;
      goto LABEL_25;
    }
    v41 = v37;
    v43 = v37[2];
    v42 = v37[3];
    if (v43 >= v42 >> 1)
    {
      v118 = v173;
      v119 = v170;
      v115 = v172;
      v116 = v169[0];
      v117 = v175;
      v85 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v42 > 1), v43 + 1, 1, v37);
      v86 = v116;
      v87 = v117;
      v89 = v118;
      v88 = v119;
      v90 = v115;
      v41 = v85;
    }
    v41[2] = v43 + 1;
    v37 = v41;
    v44 = &v41[11 * v43];
    v44[4] = v86;
    v45 = v44 + 4;
    v47 = v163;
    v46 = v164;
    v49 = v166;
    v48 = v167;
    LOBYTE(v50) = v152;
    v51 = v66;
LABEL_24:
    v45[1] = v67;
    v45[2] = v68;
    v45[3] = v88;
    v45[4] = v69;
    v45[5] = v90;
    v45[6] = v89;
    v45[7] = v70;
    v45[8] = v87;
    v45[9] = v71;
    v45[10] = v61;
LABEL_25:
    v36 += 11;
    outlined consume of Text.Effect.Composition.Operation(v158, v157, v161, v48, v50, v49, v46, v51);
    v35 = v47 - 1;
    v4 = v148;
    if (!v35)
    {
      v107 = v124;
      v108 = v126;
      v109 = v5;
      v111 = v132;
      v110 = v133;
      v112 = v131;
      v113 = v37;
      outlined consume of Text.Effect.Composition.Operation(v148, v5, v128, v126, v130, v132, v133, v131);
      outlined consume of Text.Effect.Composition.Operation(v148, v5, v121, v146, v143, v154, v159, v135);
      v2 = v120;
      goto LABEL_48;
    }
  }
  __break(1u);
LABEL_50:
  __break(1u);
LABEL_51:
  __break(1u);
LABEL_52:
  __break(1u);
LABEL_53:
  __break(1u);
  return result;
}

char *Text.Effect.Composition.appendCharacterRanges(line:to:)(char *result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  char v6;
  unint64_t v7;
  CFIndex *v8;
  CFIndex v9;
  uint64_t v10;
  const __CTLine *v11;
  void *v12;
  CFRange StringRange;
  CFIndex v14;
  uint64_t (*v15)(_QWORD *, _QWORD);
  int v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  CFIndex v24;
  CFIndex v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  void *v29;
  uint64_t v30;
  CFIndex v31;
  CFIndex v32;
  CFIndex location;
  CFIndex v35;
  char v36;
  __int128 v37;
  int v38;
  _QWORD v39[2];
  char v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  CFIndex v44;
  CFIndex v45;
  CFIndex v46;

  v3 = *(_QWORD *)(v2 + 64);
  v20 = *(_QWORD *)(v3 + 16);
  if (v20)
  {
    v4 = *(void **)result;
    v5 = *((_QWORD *)result + 1);
    v6 = result[16];
    v17 = *(_OWORD *)(result + 24);
    v19 = v3 + 32;
    v16 = *((_DWORD *)result + 10);
    result = (char *)swift_bridgeObjectRetain();
    v7 = 0;
    v18 = v3;
    while (v7 < *(_QWORD *)(v3 + 16))
    {
      v8 = (CFIndex *)(v19 + 88 * v7);
      v29 = (void *)v8[2];
      v30 = v8[3];
      v25 = v8[4];
      v26 = v8[5];
      v24 = v8[8];
      v32 = v8[9];
      v31 = v8[10];
      v27 = v8[6];
      v28 = v8[7];
      if (v28 >> 62)
      {
        v21 = v7;
        v9 = *v8;
        v10 = v8[1];
        v22 = v10;
        v23 = *v8;
        if (v28 >> 62 != 1)
        {
          v9 = v8[2];
          v10 = v8[3];
        }
        if (v9 != v10)
        {
          if (v10 < v9)
            goto LABEL_31;
          while (v9 < v10)
          {
            if ((v6 & 1) != 0)
            {
              outlined copy of Text.Layout.Line.Line(v4, v5, 1);
              result = (char *)(id)_NSTextLineFragmentGetCTLine(v4);
              if (!result)
                goto LABEL_32;
              v11 = (const __CTLine *)result;
              outlined consume of Text.Layout.Line.Line(v4, v5, 1);
            }
            else
            {
              outlined copy of Text.Layout.Line.Line(v4, v5, 0);
              outlined copy of Text.Layout.Line.Line(v4, v5, 0);

              swift_release();
              v11 = (const __CTLine *)v4;
            }
            v12 = (id)_CTLineGetRunAtIndex(v11, v9);
            StringRange = CTRunGetStringRange((CTRunRef)v12);

            result = (char *)swift_release();
            v14 = StringRange.location + StringRange.length;
            if (__OFADD__(StringRange.location, StringRange.length))
              goto LABEL_27;
            if (v14 < StringRange.location)
              goto LABEL_28;
            location = StringRange.location;
            v35 = StringRange.location + StringRange.length;
            if (__OFSUB__(v14, StringRange.location))
              goto LABEL_29;
            if (v14 != StringRange.location)
            {
              type metadata accessor for RangeSet<Text.Layout.CharacterIndex>.Ranges(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<Text.Layout.CharacterIndex>, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x24BEE4968]);
              v15 = (uint64_t (*)(_QWORD *, _QWORD))RangeSet._ranges.modify();
              type metadata accessor for RangeSet<Text.Layout.CharacterIndex>.Ranges(0, &lazy cache variable for type metadata for RangeSet<Text.Layout.CharacterIndex>.Ranges, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x24BEE4908]);
              RangeSet.Ranges._insert(contentsOf:)();
              result = (char *)v15(v39, 0);
            }
            if (v10 == ++v9)
              goto LABEL_3;
          }
          __break(1u);
LABEL_27:
          __break(1u);
LABEL_28:
          __break(1u);
LABEL_29:
          __break(1u);
          break;
        }
LABEL_3:
        outlined consume of Text.Effect.Composition.Operation(v23, v22, v29, v30, v25, v26, v27, v28);
        result = (char *)outlined consume of Text.Effect.Composition.Operation(v23, v22, v29, v30, v25, v26, v27, v28);
        v3 = v18;
        v7 = v21;
      }
      else
      {
        v39[0] = v8[2];
        v39[1] = v30;
        v40 = v25 & 1;
        v41 = v26;
        v42 = v27;
        v43 = v28;
        v44 = v24;
        v45 = v32;
        v46 = v31;
        location = (CFIndex)v4;
        v35 = v5;
        v36 = v6;
        v37 = v17;
        v38 = v16;
        result = (char *)Text.Effect.Composition.appendCharacterRanges(line:to:)(&location, a2);
      }
      if (++v7 == v20)
        return (char *)swift_bridgeObjectRelease();
    }
    __break(1u);
LABEL_31:
    __break(1u);
LABEL_32:
    __break(1u);
  }
  return result;
}

uint64_t closure #1 in Text.Effect.Composition.clipDrawingBounds(context:)(Swift::UInt64 *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t result;
  void *v10;
  char v11;
  Swift::UInt64 v12;
  void *v13;
  uint64_t v14;
  Swift::UInt64 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *i;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  _QWORD v48[12];
  uint64_t v49;

  v6 = v5;
  v7 = *a1;
  v8 = a1[7];
  if (v8 >> 62)
  {
    if (v8 >> 62 != 1)
    {
      result = (uint64_t)Text.Effect.Keyframes.validTransform(_:)(*a1, a4);
      if (result)
      {
        v10 = (void *)result;
        v11 = (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *(_QWORD *)result) + 0x110))();

        return v11 & 1;
      }
      return result;
    }
    return 0;
  }
  v12 = a1[10];
  if (!*(_QWORD *)(v12 + 16))
    return 0;
  v43 = *(_QWORD *)(v12 + 16);
  v49 = v6;
  v13 = (void *)a1[2];
  v38 = a1[1];
  v14 = a1[3];
  v15 = a1[4];
  v16 = a1[5];
  v17 = a1[6];
  swift_bridgeObjectRetain();
  v35 = v13;
  v36 = v7;
  v33 = v15;
  v34 = v14;
  v31 = v17;
  v32 = v16;
  v37 = v8;
  outlined copy of Text.Effect.Composition.Operation(v7, v38, v13, v14, v15, v16, v17, v8);
  for (i = (uint64_t *)(v12 + 56); ; i += 11)
  {
    v19 = i[6];
    v20 = i[7];
    v21 = i[4];
    v22 = i[5];
    v24 = i[2];
    v23 = i[3];
    v26 = *i;
    v25 = i[1];
    v28 = *(i - 2);
    v27 = (void *)*(i - 1);
    v29 = *(i - 3);
    v48[0] = v29;
    v48[1] = v28;
    v48[2] = v27;
    v48[3] = v26;
    v48[4] = v25;
    v48[5] = v24;
    v45 = v24;
    v46 = v23;
    v48[6] = v23;
    v48[7] = v21;
    v47 = v21;
    v48[8] = v22;
    v48[9] = v19;
    v48[10] = v20;
    outlined copy of Text.Effect.Composition.Operation(v29, v28, v27, v26, v25, v24, v23, v21);
    v30 = v49;
    v44 = closure #1 in Text.Effect.Composition.clipDrawingBounds(context:)(v48, a2, a3, a4, a5);
    v49 = v30;
    outlined consume of Text.Effect.Composition.Operation(v29, v28, v27, v26, v25, v45, v46, v47);
    if ((v44 & 1) != 0)
      break;
    if (!--v43)
    {
      swift_bridgeObjectRelease();
      outlined consume of Text.Effect.Composition.Operation(v36, v38, v35, v34, v33, v32, v31, v37);
      return 0;
    }
  }
  swift_bridgeObjectRelease();
  outlined consume of Text.Effect.Composition.Operation(v36, v38, v35, v34, v33, v32, v31, v37);
  return 1;
}

uint64_t specialized static Text.Effect.Composition.== infix(_:_:)(double *a1, double *a2)
{
  double v4;
  double v5;
  double v6;
  uint64_t v7;
  double v8;
  int v9;
  double v10;
  double v11;
  uint64_t v12;

  if (a1[3] != a2[3] || a1[4] != a2[4])
    return 0;
  v4 = *a1;
  v5 = a1[6];
  v6 = a1[7];
  v7 = *((_QWORD *)a1 + 8);
  v8 = *a2;
  v9 = *((unsigned __int8 *)a2 + 16);
  v10 = a2[6];
  v11 = a2[7];
  v12 = *((_QWORD *)a2 + 8);
  if (((_BYTE)a1[2] & 1) != 0)
  {
    if (!v9)
      return 0;
  }
  else if ((v9 & 1) != 0)
  {
    return 0;
  }
  if (*(_QWORD *)&v4 == *(_QWORD *)&v8 && v5 == v10 && v6 == v11)
    return specialized static Array<A>.== infix(_:_:)(v7, v12);
  return 0;
}

uint64_t *specialized static Text.Effect.Composition.Operation.== infix(_:_:)(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v26;
  void *v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  char v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  void *v53;
  double v54[2];
  char v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  double v62[2];
  char v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  _QWORD v70[23];

  v3 = *result;
  v2 = result[1];
  v5 = (void *)result[2];
  v4 = result[3];
  v6 = result[4];
  v7 = result[5];
  v8 = result[6];
  v9 = result[7];
  v10 = result[8];
  v11 = result[9];
  v12 = result[10];
  v14 = *a2;
  v13 = a2[1];
  v15 = (void *)a2[2];
  v16 = a2[3];
  v18 = a2[4];
  v17 = a2[5];
  v19 = a2[6];
  v20 = a2[7];
  v21 = a2[8];
  v22 = a2[9];
  v23 = a2[10];
  v70[0] = *result;
  v70[1] = v2;
  v70[2] = v5;
  v70[3] = v4;
  v70[4] = v6;
  v70[5] = v7;
  v70[6] = v8;
  v70[7] = v9;
  v70[8] = v10;
  v70[9] = v11;
  v70[10] = v12;
  v70[11] = v14;
  v70[12] = v13;
  v70[13] = v15;
  v70[14] = v16;
  v70[15] = v18;
  v70[16] = v17;
  v70[17] = v19;
  v70[18] = v20;
  v70[19] = v21;
  v70[20] = v22;
  v70[21] = v23;
  if (!(v9 >> 62))
  {
    if (!(v20 >> 62))
    {
      v50 = v19;
      v51 = v17;
      if (v3 == v14)
      {
        if (__OFSUB__(v13, v2))
        {
          __break(1u);
          goto LABEL_32;
        }
        if (v13 == v2)
        {
          *(_QWORD *)&v62[0] = v5;
          *(_QWORD *)&v62[1] = v4;
          v63 = v6 & 1;
          v64 = v7;
          v65 = v8;
          v66 = v9;
          v67 = v10;
          v68 = v11;
          v69 = v12;
          *(_QWORD *)&v54[0] = v15;
          *(_QWORD *)&v54[1] = v16;
          v55 = v18 & 1;
          v56 = v17;
          v57 = v19;
          v58 = v20;
          v59 = v21;
          v60 = v22;
          v61 = v23;
          v52 = v15;
          v43 = v16;
          v44 = v4;
          v48 = v6;
          v49 = v2;
          v27 = v5;
          v47 = v5;
          v45 = v7;
          v46 = v8;
          outlined copy of Text.Effect.Composition.Operation(v3, v2, v15, v16, v18, v17, v19, v20);
          outlined copy of Text.Effect.Composition.Operation(v3, v49, v27, v44, v48, v45, v46, v9);
          outlined copy of Text.Effect.Composition.Operation(v3, v49, v47, v44, v48, v45, v46, v9);
          outlined copy of Text.Effect.Composition.Operation(v3, v49, v52, v43, v18, v51, v50, v20);
          v26 = specialized static Text.Effect.Composition.== infix(_:_:)(v62, v54);
          outlined release of (Text.Effect.Composition.Operation, Text.Effect.Composition.Operation)((uint64_t)v70);
          outlined consume of Text.Effect.Composition.Operation(v3, v49, v52, v43, v18, v51, v50, v20);
          outlined consume of Text.Effect.Composition.Operation(v3, v49, v47, v44, v48, v45, v46, v9);
          return (uint64_t *)(v26 & 1);
        }
      }
      v40 = v3;
      v41 = v15;
      v42 = v16;
      outlined copy of Text.Effect.Composition.Operation(v40, v2, v5, v4, v6, v7, v8, v9);
      v37 = v14;
      v38 = v13;
      v15 = v41;
      v16 = v42;
      v39 = v18;
      v19 = v50;
      v17 = v51;
      goto LABEL_27;
    }
    v53 = v15;
    v34 = v16;
    v35 = v19;
    v36 = v18;
    v18 = v17;
    outlined copy of Text.Layout.Line.Line(v5, v4, v6 & 1);
    swift_bridgeObjectRetain();
    v17 = v18;
    LOBYTE(v18) = v36;
    v19 = v35;
    v15 = v53;
    v16 = v34;
LABEL_26:
    v37 = v14;
    v38 = v13;
    v39 = v18;
LABEL_27:
    outlined copy of Text.Effect.Composition.Operation(v37, v38, v15, v16, v39, v17, v19, v20);
    outlined release of (Text.Effect.Composition.Operation, Text.Effect.Composition.Operation)((uint64_t)v70);
    goto LABEL_28;
  }
  if (v9 >> 62 == 1)
  {
    if (v20 >> 62 == 1)
    {
      v24 = v2;
      outlined release of (Text.Effect.Composition.Operation, Text.Effect.Composition.Operation)((uint64_t)v70);
      v26 = v3 == v14 && v24 == v13;
      return (uint64_t *)(v26 & 1);
    }
    goto LABEL_26;
  }
  if (v20 >> 62 != 2)
    goto LABEL_26;
  v28 = v5;
  v29 = v4;
  v30 = v2;
  v31 = v15;
  v32 = v16;
  result = (uint64_t *)outlined release of (Text.Effect.Composition.Operation, Text.Effect.Composition.Operation)((uint64_t)v70);
  if (v3 != v14)
  {
LABEL_28:
    v26 = 0;
    return (uint64_t *)(v26 & 1);
  }
  if (!__OFSUB__(v13, v30))
  {
    if (v13 == v30)
    {
      v26 = v28 == v31 && v29 == v32;
      return (uint64_t *)(v26 & 1);
    }
    goto LABEL_28;
  }
LABEL_32:
  __break(1u);
  return result;
}

double specialized Text.Effect.BaseContext.fragment<A>(for:key:fragment:)@<D0>(Swift::UInt64 a1@<X1>, uint64_t a2@<X2>, unint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  __int128 v10;
  double result;
  _OWORD v12[2];
  __int128 v13;
  uint64_t v14;

  swift_retain();
  swift_retain();
  Text.Effect.DrawableFragment.init(keyframes:key:fragment:)(a4, a1, a2, a3, (uint64_t)v12);
  v10 = v12[1];
  *(_OWORD *)a5 = v12[0];
  *(_OWORD *)(a5 + 16) = v10;
  result = *(double *)&v13;
  *(_OWORD *)(a5 + 32) = v13;
  *(_QWORD *)(a5 + 48) = v14;
  return result;
}

uint64_t outlined consume of Text.Effect.Composition.Operation?(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7, unint64_t a8)
{
  if (a5 >> 1 != 0xFFFFFFFF || HIDWORD(a8) != 0)
    return outlined consume of Text.Effect.Composition.Operation(a1, a2, a3, a4, a5, a6, a7, a8);
  return a1;
}

uint64_t partial apply for implicit closure #1 in Text.Effect.Composition.runIndices.getter()
{
  return implicit closure #1 in Text.Effect.Composition.runIndices.getter();
}

uint64_t lazy protocol witness table accessor for type RangeSet<Int>.Ranges and conformance RangeSet<A>.Ranges(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    type metadata accessor for RangeSet<Int>.Ranges(255, &lazy cache variable for type metadata for RangeSet<Int>.Ranges, (uint64_t (*)(_QWORD, _QWORD, _QWORD))MEMORY[0x24BEE4908]);
    result = MEMORY[0x23B7C9C04](a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

ValueMetadata *type metadata accessor for FragmentIdentifierOffsetMap.Entry()
{
  return &type metadata for FragmentIdentifierOffsetMap.Entry;
}

ValueMetadata *type metadata accessor for Text.Effect.Composition.Run()
{
  return &type metadata for Text.Effect.Composition.Run;
}

uint64_t destroy for Text.Effect.Composition.Run(uint64_t a1)
{
  return outlined consume of Text.Effect.Composition.Operation(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(void **)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56));
}

uint64_t *initializeWithCopy for Text.Effect.Composition.Run(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;

  v3 = *a2;
  v4 = a2[1];
  v5 = (void *)a2[2];
  v6 = a2[3];
  v7 = a2[4];
  v8 = a2[5];
  v9 = a2[6];
  v10 = a2[7];
  v11 = a2[8];
  v13 = a2[9];
  v14 = a2[10];
  outlined copy of Text.Effect.Composition.Operation(*a2, v4, v5, v6, v7, v8, v9, v10);
  *a1 = v3;
  a1[1] = v4;
  a1[2] = (uint64_t)v5;
  a1[3] = v6;
  a1[4] = v7;
  a1[5] = v8;
  a1[6] = v9;
  a1[7] = v10;
  a1[8] = v11;
  a1[9] = v13;
  a1[10] = v14;
  return a1;
}

uint64_t *assignWithCopy for Text.Effect.Composition.Run(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v21;
  uint64_t v22;

  v3 = *a2;
  v4 = a2[1];
  v5 = (void *)a2[2];
  v6 = a2[3];
  v7 = a2[4];
  v8 = a2[5];
  v9 = a2[6];
  v10 = a2[7];
  v11 = a2[8];
  v21 = a2[9];
  v22 = a2[10];
  outlined copy of Text.Effect.Composition.Operation(*a2, v4, v5, v6, v7, v8, v9, v10);
  v12 = *a1;
  v13 = a1[1];
  v14 = (void *)a1[2];
  v15 = a1[3];
  v16 = a1[4];
  v17 = a1[5];
  v18 = a1[6];
  v19 = a1[7];
  *a1 = v3;
  a1[1] = v4;
  a1[2] = (uint64_t)v5;
  a1[3] = v6;
  a1[4] = v7;
  a1[5] = v8;
  a1[6] = v9;
  a1[7] = v10;
  a1[8] = v11;
  a1[9] = v21;
  a1[10] = v22;
  outlined consume of Text.Effect.Composition.Operation(v12, v13, v14, v15, v16, v17, v18, v19);
  return a1;
}

uint64_t assignWithTake for Text.Effect.Composition.Run(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  __int128 v12;
  __int128 v13;

  v3 = *(_QWORD *)(a2 + 80);
  v4 = *(_QWORD *)a1;
  v6 = *(_QWORD *)(a1 + 8);
  v5 = *(void **)(a1 + 16);
  v7 = *(_QWORD *)(a1 + 24);
  v8 = *(_QWORD *)(a1 + 32);
  v9 = *(_QWORD *)(a1 + 40);
  v10 = *(_QWORD *)(a1 + 48);
  v11 = *(_QWORD *)(a1 + 56);
  v12 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v12;
  v13 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v13;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 80) = v3;
  outlined consume of Text.Effect.Composition.Operation(v4, v6, v5, v7, v8, v9, v10, v11);
  return a1;
}

uint64_t getEnumTagSinglePayload for Text.Effect.Composition.Run(uint64_t a1, int a2)
{
  uint64_t v2;
  int v3;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 88))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 32) >> 1;
  if (v2 > 0x80000000)
    v3 = ~(_DWORD)v2;
  else
    v3 = -1;
  return (v3 + 1);
}

double storeEnumTagSinglePayload for Text.Effect.Composition.Run(uint64_t a1, int a2, int a3)
{
  double result;

  if (a2 < 0)
  {
    result = 0.0;
    *(_OWORD *)(a1 + 72) = 0u;
    *(_OWORD *)(a1 + 56) = 0u;
    *(_OWORD *)(a1 + 40) = 0u;
    *(_OWORD *)(a1 + 24) = 0u;
    *(_OWORD *)(a1 + 8) = 0u;
    *(_QWORD *)a1 = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(a1 + 88) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      result = 0.0;
      *(_OWORD *)a1 = 0u;
      *(_OWORD *)(a1 + 16) = 0u;
      *(_QWORD *)(a1 + 32) = 2 * -a2;
      *(_OWORD *)(a1 + 40) = 0u;
      *(_OWORD *)(a1 + 56) = 0u;
      *(_OWORD *)(a1 + 72) = 0u;
      return result;
    }
    *(_BYTE *)(a1 + 88) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t getEnumTag for Text.Effect.Composition.Operation(uint64_t a1)
{
  return *(_QWORD *)(a1 + 56) >> 62;
}

uint64_t destructiveProjectEnumData for Text.Effect.Composition.Operation(uint64_t result)
{
  *(_QWORD *)(result + 56) &= 0x3FFFFFFFFFFFFFFFuLL;
  return result;
}

uint64_t destructiveInjectEnumTag for Text.Effect.Composition.Operation(uint64_t result, int a2)
{
  *(_QWORD *)(result + 32) &= 1uLL;
  *(_DWORD *)(result + 60) = a2 << 30;
  return result;
}

ValueMetadata *type metadata accessor for Text.Effect.Composition.Operation()
{
  return &type metadata for Text.Effect.Composition.Operation;
}

ValueMetadata *type metadata accessor for Text.Effect.Composition.Displacements()
{
  return &type metadata for Text.Effect.Composition.Displacements;
}

uint64_t destroy for Text.Effect.BaseContext()
{
  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

_QWORD *initializeWithCopy for Text.Effect.BaseContext(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  return a1;
}

_QWORD *assignWithCopy for Text.Effect.BaseContext(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  a1[2] = a2[2];
  swift_retain();
  swift_release();
  a1[3] = a2[3];
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for Text.Effect.BaseContext(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_release();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  swift_release();
  return a1;
}

ValueMetadata *type metadata accessor for Text.Effect.BaseContext()
{
  return &type metadata for Text.Effect.BaseContext;
}

uint64_t destroy for Text.Effect.Composition(uint64_t a1)
{
  outlined consume of Text.Layout.Line.Line(*(void **)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for Text.Effect.Composition(uint64_t a1, uint64_t a2)
{
  void *v4;
  uint64_t v5;
  char v6;

  v4 = *(void **)a2;
  v5 = *(_QWORD *)(a2 + 8);
  v6 = *(_BYTE *)(a2 + 16);
  outlined copy of Text.Layout.Line.Line(*(void **)a2, v5, v6);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  *(_BYTE *)(a1 + 16) = v6;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for Text.Effect.Composition(uint64_t a1, uint64_t a2)
{
  void *v4;
  uint64_t v5;
  char v6;
  void *v7;
  uint64_t v8;
  char v9;

  v4 = *(void **)a2;
  v5 = *(_QWORD *)(a2 + 8);
  v6 = *(_BYTE *)(a2 + 16);
  outlined copy of Text.Layout.Line.Line(*(void **)a2, v5, v6);
  v7 = *(void **)a1;
  v8 = *(_QWORD *)(a1 + 8);
  v9 = *(_BYTE *)(a1 + 16);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  *(_BYTE *)(a1 + 16) = v6;
  outlined consume of Text.Layout.Line.Line(v7, v8, v9);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for Text.Effect.Composition(uint64_t a1, uint64_t a2)
{
  char v4;
  void *v5;
  uint64_t v6;
  char v7;

  v4 = *(_BYTE *)(a2 + 16);
  v5 = *(void **)a1;
  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(_BYTE *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = v4;
  outlined consume of Text.Layout.Line.Line(v5, v6, v7);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for Text.Effect.Composition()
{
  return &type metadata for Text.Effect.Composition;
}

void *type metadata accessor for FragmentIdentifierOffsetMap()
{
  return &unk_25063DCB8;
}

uint64_t protocol witness for CustomAnimationModifier.velocity<A, B>(base:value:time:context:) in conformance SpeedAnimation@<X0>(uint64_t a1@<X3>, uint64_t a2@<X8>)
{
  return CustomAnimationModifier.velocity<A, B>(base:value:time:context:)(a1, a2);
}

uint64_t CustomAnimationModifier.velocity<A, B>(base:value:time:context:)@<X0>(uint64_t a1@<X4>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 56))(a2, 1, 1, a1);
}

uint64_t Animation.modifier<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a1, a3, a4);
}

uint64_t protocol witness for CustomAnimationModifier.shouldMerge<A, B>(base:previous:previousBase:value:time:context:) in conformance LogicalCompletionModifier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  return CustomAnimationModifier.shouldMerge<A, B>(base:previous:previousBase:value:time:context:)(a1, a9, a2, a3, a4, a5, a11, a6, a7, a12, a8, a10);
}

uint64_t CustomAnimationModifier.shouldMerge<A, B>(base:previous:previousBase:value:time:context:)(uint64_t a1, double a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char v19;
  uint64_t v21;

  v15 = *(_QWORD *)(a9 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v17 = (char *)&v21 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((dispatch thunk of static Equatable.== infix(_:_:)() & 1) != 0)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v17, a4, a9);
    Animation.init<A>(_:)((uint64_t)v17, a9, a12, v18);
    v19 = (*(uint64_t (**)(double))(a12 + 32))(a2);
    swift_release();
  }
  else
  {
    v19 = 0;
  }
  return v19 & 1;
}

uint64_t CustomAnimationModifiedContent.base.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8) + 16))(a2, v2);
}

uint64_t CustomAnimationModifiedContent.base.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 40))(v2, a1);
}

uint64_t (*CustomAnimationModifiedContent.base.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t CustomAnimationModifiedContent.modifier.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 24) - 8) + 16))(a2, v2 + *(int *)(a1 + 52));
}

uint64_t CustomAnimationModifiedContent.modifier.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 24) - 8) + 40))(v2 + *(int *)(a2 + 52), a1);
}

uint64_t (*CustomAnimationModifiedContent.modifier.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t CustomAnimationModifiedContent.animate<A>(value:time:context:)(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, _QWORD, _QWORD, _QWORD))(a3[5] + 16))(v5, a1, a2, a4, a3[2], a5, a3[4], a3[3], a3[5]);
}

uint64_t CustomAnimationModifiedContent.velocity<A>(value:time:context:)(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  char v7;
  char v8;
  _QWORD v10[2];
  char v11;
  char v12;

  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(_BYTE *)(a2 + 16);
  v8 = *(_BYTE *)(a2 + 17);
  v10[0] = *(_QWORD *)a2;
  v10[1] = v6;
  v11 = v7;
  v12 = v8;
  return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *, uint64_t, _QWORD, uint64_t, _QWORD, _QWORD, _QWORD))(a3[5] + 24))(v5, a1, v10, a4, a3[2], a5, a3[4], a3[3], a3[5]);
}

uint64_t CustomAnimationModifiedContent.shouldMerge<A>(previous:value:time:context:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, double a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  double v20;
  uint64_t v21;
  char *v22;
  int v23;
  void (*v24)(char *, uint64_t, uint64_t, uint64_t);
  char v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD v30[5];

  v8 = v7;
  v28 = a5;
  v29 = a6;
  v14 = type metadata accessor for Optional();
  v15 = *(_QWORD *)(v14 - 8);
  MEMORY[0x24BDAC7A8](v14);
  v17 = (char *)&v27 - v16;
  v18 = *(_QWORD *)(a4 - 8);
  v20 = MEMORY[0x24BDAC7A8](v19);
  v22 = (char *)&v27 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(_QWORD *__return_ptr, double))(*(_QWORD *)a1 + 88))(v30, v20);
  type metadata accessor for ScrollStateRequest(0, (unint64_t *)&lazy cache variable for type metadata for CustomAnimation);
  v23 = swift_dynamicCast();
  v24 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v18 + 56);
  if (v23)
  {
    v24(v17, 0, 1, a4);
    (*(void (**)(char *, char *, uint64_t))(v18 + 32))(v22, v17, a4);
    v25 = (*(uint64_t (**)(uint64_t, char *, char *, uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, double, _QWORD, _QWORD, _QWORD))(*(_QWORD *)(a4 + 40) + 32))(v8, &v22[*(int *)(a4 + 52)], v22, a2, a3, v28, *(_QWORD *)(a4 + 16), v29, a7, *(_QWORD *)(a4 + 32), *(_QWORD *)(a4 + 24), *(_QWORD *)(a4 + 40));
    (*(void (**)(char *, uint64_t))(v18 + 8))(v22, a4);
  }
  else
  {
    v24(v17, 1, 1, a4);
    (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v14);
    v25 = 0;
  }
  return v25 & 1;
}

uint64_t CustomAnimationModifiedContent.function.getter(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  _QWORD v10[5];
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;

  static Animation.Function.custom<A>(_:)(v1, a1[2], a1[4], (uint64_t)&v12);
  v3 = v12;
  v4 = v13;
  v5 = v14;
  v6 = v15;
  v7 = v16;
  v8 = v17;
  v10[0] = v12;
  v10[1] = v13;
  v10[2] = v14;
  v10[3] = v15;
  v10[4] = v16;
  v11 = v17;
  (*(void (**)(_QWORD *, uint64_t))(a1[5] + 40))(v10, a1[3]);
  return outlined consume of Animation.Function(v3, v4, v5, v6, v7, v8);
}

uint64_t CustomAnimationModifiedContent.hash(into:)()
{
  dispatch thunk of Hashable.hash(into:)();
  return dispatch thunk of Hashable.hash(into:)();
}

uint64_t static CustomAnimationModifiedContent.== infix(_:_:)()
{
  if ((dispatch thunk of static Equatable.== infix(_:_:)() & 1) != 0)
    type metadata accessor for CustomAnimationModifiedContent();
  return 0;
}

void type metadata accessor for CustomAnimationModifiedContent()
{
  JUMPOUT(0x23B7C9B5CLL);
}

Swift::Int CustomAnimationModifiedContent.hashValue.getter(uint64_t a1)
{
  return PausedFormatStyle.hashValue.getter(a1, (void (*)(_BYTE *, uint64_t))CustomAnimationModifiedContent.hash(into:));
}

void CustomAnimationModifiedContent.init(base:modifier:)(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 32))(a3, a1);
  type metadata accessor for CustomAnimationModifiedContent();
}

uint64_t sub_2350F127C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 32))(v3 + *(int *)(a1 + 52), v2, v1);
}

uint64_t protocol witness for CustomAnimation.animate<A>(value:time:context:) in conformance CustomAnimationModifiedContent<A, B>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  return CustomAnimationModifiedContent.animate<A>(value:time:context:)(a1, a2, a5, a3, a4);
}

uint64_t protocol witness for CustomAnimation.velocity<A>(value:time:context:) in conformance CustomAnimationModifiedContent<A, B>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  return CustomAnimationModifiedContent.velocity<A>(value:time:context:)(a1, a2, a5, a3, a4);
}

uint64_t protocol witness for CustomAnimation.shouldMerge<A>(previous:value:time:context:) in conformance CustomAnimationModifiedContent<A, B>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, double a7)
{
  return CustomAnimationModifiedContent.shouldMerge<A>(previous:value:time:context:)(a1, a2, a3, a6, a4, a5, a7);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance CustomAnimationModifiedContent<A, B>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance TimeDataFormatting.Configuration<A, B>(a1, a2, a3, (void (*)(_BYTE *, uint64_t))CustomAnimationModifiedContent.hash(into:));
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance CustomAnimationModifiedContent<A, B>()
{
  return static CustomAnimationModifiedContent.== infix(_:_:)();
}

uint64_t CustomAnimationModifiedContent.encode(to:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  uint64_t v15;
  uint64_t v16;
  ValueMetadata *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v22[2];
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  _QWORD v27[3];
  ValueMetadata *v28;
  _UNKNOWN **v29;

  v4 = v2;
  v7 = *(_QWORD *)(a2 + 24);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v10 = (char *)v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *(_QWORD *)(v11 + 16);
  v14 = MEMORY[0x24BDAC7A8](v13);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v16 + 16))((char *)v22 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0), v4, v12, v14);
  type metadata accessor for ScrollStateRequest(0, &lazy cache variable for type metadata for EncodableAnimation);
  if (swift_dynamicCast())
  {
    outlined init with take of ScrollStateRequest(&v24, (uint64_t)v27);
  }
  else
  {
    v26 = 0;
    v24 = 0u;
    v25 = 0u;
    v28 = &type metadata for DefaultAnimation;
    v29 = &protocol witness table for DefaultAnimation;
    outlined destroy of AnyTrackedValue?((uint64_t)&v24, (unint64_t *)&lazy cache variable for type metadata for EncodableAnimation?, &lazy cache variable for type metadata for EncodableAnimation);
  }
  v17 = v28;
  v18 = (uint64_t)v29;
  __swift_project_boxed_opaque_existential_1(v27, (uint64_t)v28);
  EncodableAnimation.encodeAnimation(to:)(a1, (uint64_t)v17, v18);
  if (!v3)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, v4 + *(int *)(a2 + 52), v7);
    type metadata accessor for ScrollStateRequest(0, &lazy cache variable for type metadata for ProtobufEncodableMessage);
    if ((swift_dynamicCast() & 1) != 0)
    {
      outlined init with take of ScrollStateRequest(v22, (uint64_t)&v24);
      v19 = *((_QWORD *)&v25 + 1);
      v20 = v26;
      __swift_project_boxed_opaque_existential_1(&v24, *((uint64_t *)&v25 + 1));
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v20 + 8))(a1, v19, v20);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v24);
    }
    else
    {
      v23 = 0;
      memset(v22, 0, sizeof(v22));
      outlined destroy of AnyTrackedValue?((uint64_t)v22, &lazy cache variable for type metadata for ProtobufEncodableMessage?, &lazy cache variable for type metadata for ProtobufEncodableMessage);
    }
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v27);
}

uint64_t protocol witness for ProtobufEncodableMessage.encode(to:) in conformance CustomAnimationModifiedContent<A, B>(uint64_t a1, uint64_t a2)
{
  return CustomAnimationModifiedContent.encode(to:)(a1, a2);
}

void InternalCustomAnimationModifiedContent._base.getter()
{
  type metadata accessor for CustomAnimationModifiedContent();
}

uint64_t sub_2350F15A4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 16))(v1, v2, a1);
}

void InternalCustomAnimationModifiedContent._base.setter()
{
  type metadata accessor for CustomAnimationModifiedContent();
}

uint64_t sub_2350F1600(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 40))(v2, v1, a1);
}

uint64_t (*InternalCustomAnimationModifiedContent._base.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

void InternalCustomAnimationModifiedContent.init(base:modifier:)(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 32))(a3, a1);
  type metadata accessor for CustomAnimationModifiedContent();
}

uint64_t sub_2350F1690(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 32))(v3 + *(int *)(a1 + 52), v2, v1);
}

void InternalCustomAnimationModifiedContent.modifier.getter()
{
  type metadata accessor for CustomAnimationModifiedContent();
}

uint64_t sub_2350F16FC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(v1, v2 + *(int *)(a1 + 52), v3);
}

void InternalCustomAnimationModifiedContent.animate<A>(value:time:context:)()
{
  type metadata accessor for CustomAnimationModifiedContent();
}

uint64_t sub_2350F1788(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  double v6;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, _QWORD, _QWORD, double, _QWORD))(a1[5] + 16))(v5, v4, v3, v2, a1[2], v1, a1[4], a1[3], v6, a1[5]);
}

void InternalCustomAnimationModifiedContent.velocity<A>(value:time:context:)()
{
  type metadata accessor for CustomAnimationModifiedContent();
}

uint64_t sub_2350F1848(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  char v8;
  double v9;
  uint64_t v11;
  uint64_t v12;
  char v13;
  char v14;

  v11 = v5;
  v12 = v6;
  v13 = v7;
  v14 = v8;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t *, uint64_t, _QWORD, uint64_t, _QWORD, _QWORD, double, _QWORD))(a1[5] + 24))(v4, v3, &v11, v2, a1[2], v1, a1[4], a1[3], v9, a1[5]);
}

uint64_t InternalCustomAnimationModifiedContent.shouldMerge<A>(previous:value:time:context:)(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  double v16;
  uint64_t v17;
  char *v18;
  int v19;
  void (*v20)(char *, uint64_t, uint64_t, _QWORD *);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD v25[7];
  _QWORD v26[5];

  v25[3] = a2;
  v25[4] = a5;
  v25[5] = a3;
  v9 = a4[2];
  v25[6] = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v10 = type metadata accessor for Optional();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)v25 - v12;
  v14 = *(a4 - 1);
  v16 = MEMORY[0x24BDAC7A8](v15);
  v18 = (char *)v25 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(_QWORD *__return_ptr, double))(*(_QWORD *)a1 + 88))(v26, v16);
  type metadata accessor for ScrollStateRequest(0, (unint64_t *)&lazy cache variable for type metadata for CustomAnimation);
  v19 = swift_dynamicCast();
  v20 = *(void (**)(char *, uint64_t, uint64_t, _QWORD *))(v14 + 56);
  if (v19)
  {
    v20(v13, 0, 1, a4);
    (*(void (**)(char *, char *, _QWORD *))(v14 + 32))(v18, v13, a4);
    v21 = a4[3];
    v22 = *(_QWORD *)(a4[4] + 8);
    v25[1] = a6;
    v23 = a4[5];
    v26[0] = v9;
    v26[1] = v21;
    v26[2] = v22;
    v26[3] = v23;
    type metadata accessor for CustomAnimationModifiedContent();
  }
  v20(v13, 1, 1, a4);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  return 0;
}

void InternalCustomAnimationModifiedContent.function.getter(uint64_t a1)
{
  uint64_t v1;

  MEMORY[0x24BDAC7A8](a1);
  MEMORY[0x24BDAC7A8](v1);
  InternalCustomAnimationModifiedContent.modifier.getter();
}

uint64_t sub_2350F1B94()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;

  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v6, v1, v5);
  (*(void (**)(uint64_t))(*(_QWORD *)(v3 + 32) + 16))(v5);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v6, v5);
  v8 = *(_QWORD *)(v7 - 128);
  v9 = *(_QWORD *)(v7 - 120);
  v10 = *(_QWORD *)(v7 - 112);
  v11 = *(_QWORD *)(v7 - 104);
  v12 = *(_QWORD *)(v7 - 96);
  v13 = *(_BYTE *)(v7 - 88);
  *(_QWORD *)(v7 - 176) = v8;
  *(_QWORD *)(v7 - 168) = v9;
  *(_QWORD *)(v7 - 160) = v10;
  *(_QWORD *)(v7 - 152) = v11;
  *(_QWORD *)(v7 - 144) = v12;
  *(_BYTE *)(v7 - 136) = v13;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 + 40) + 40))(v7 - 176, v0);
  outlined consume of Animation.Function(v8, v9, v10, v11, v12, v13);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 192) + 8))(v4, v0);
}

void InternalCustomAnimationModifiedContent.hash(into:)()
{
  type metadata accessor for CustomAnimationModifiedContent();
}

uint64_t sub_2350F1C90()
{
  return CustomAnimationModifiedContent.hash(into:)();
}

uint64_t static InternalCustomAnimationModifiedContent.== infix(_:_:)()
{
  return static CustomAnimationModifiedContent.== infix(_:_:)();
}

Swift::Int InternalCustomAnimationModifiedContent.hashValue.getter(uint64_t a1)
{
  return PausedFormatStyle.hashValue.getter(a1, (void (*)(_BYTE *, uint64_t))InternalCustomAnimationModifiedContent.hash(into:));
}

void protocol witness for CustomAnimation.animate<A>(value:time:context:) in conformance InternalCustomAnimationModifiedContent<A, B>()
{
  InternalCustomAnimationModifiedContent.animate<A>(value:time:context:)();
}

void protocol witness for CustomAnimation.velocity<A>(value:time:context:) in conformance InternalCustomAnimationModifiedContent<A, B>()
{
  InternalCustomAnimationModifiedContent.velocity<A>(value:time:context:)();
}

uint64_t protocol witness for CustomAnimation.shouldMerge<A>(previous:value:time:context:) in conformance InternalCustomAnimationModifiedContent<A, B>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, _QWORD *a6)
{
  return InternalCustomAnimationModifiedContent.shouldMerge<A>(previous:value:time:context:)(a1, a2, a3, a6, a4, a5);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance InternalCustomAnimationModifiedContent<A, B>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance TimeDataFormatting.Configuration<A, B>(a1, a2, a3, (void (*)(_BYTE *, uint64_t))InternalCustomAnimationModifiedContent.hash(into:));
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance InternalCustomAnimationModifiedContent<A, B>()
{
  return static InternalCustomAnimationModifiedContent.== infix(_:_:)();
}

void InternalCustomAnimationModifiedContent.encode(to:)()
{
  type metadata accessor for CustomAnimationModifiedContent();
}

uint64_t sub_2350F1D5C(uint64_t a1)
{
  uint64_t v1;

  return CustomAnimationModifiedContent.encode(to:)(v1, a1);
}

uint64_t instantiation function for generic protocol witness table for CustomAnimationModifiedContent<A, B>(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for CustomAnimationModifiedContent<A, B>);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

{
  uint64_t result;

  result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for CustomAnimationModifiedContent<A, B>);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

void base witness table accessor for Equatable in CustomAnimationModifiedContent<A, B>()
{
  JUMPOUT(0x23B7C9C04);
}

uint64_t instantiation function for generic protocol witness table for InternalCustomAnimationModifiedContent<A, B>(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for InternalCustomAnimationModifiedContent<A, B>);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

{
  uint64_t result;

  result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for InternalCustomAnimationModifiedContent<A, B>);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

void base witness table accessor for Equatable in InternalCustomAnimationModifiedContent<A, B>()
{
  JUMPOUT(0x23B7C9C04);
}

void protocol witness for ProtobufEncodableMessage.encode(to:) in conformance InternalCustomAnimationModifiedContent<A, B>()
{
  InternalCustomAnimationModifiedContent.encode(to:)();
}

uint64_t dispatch thunk of CustomAnimationModifier.animate<A, B>(base:value:time:context:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return (*(uint64_t (**)(void))(a9 + 16))();
}

uint64_t dispatch thunk of CustomAnimationModifier.velocity<A, B>(base:value:time:context:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return (*(uint64_t (**)(void))(a9 + 24))();
}

uint64_t dispatch thunk of CustomAnimationModifier.shouldMerge<A, B>(base:previous:previousBase:value:time:context:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return (*(uint64_t (**)(void))(a11 + 32))();
}

uint64_t dispatch thunk of CustomAnimationModifier.function(base:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 40))();
}

void type metadata completion function for InternalCustomAnimationModifiedContent()
{
  type metadata accessor for CustomAnimationModifiedContent();
}

uint64_t getEnumTagSinglePayload for CustomAnimationModifiedContent(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  char v13;
  int v14;
  unsigned int v15;
  int v16;
  int v17;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= v5)
    v8 = *(_DWORD *)(v4 + 84);
  else
    v8 = *(_DWORD *)(v6 + 84);
  if (!a2)
    return 0;
  v9 = *(unsigned __int8 *)(v6 + 80);
  v10 = *(_QWORD *)(v4 + 64) + v9;
  v11 = a2 - v8;
  if (a2 <= v8)
    goto LABEL_23;
  v12 = (v10 & ~v9) + *(_QWORD *)(v6 + 64);
  v13 = 8 * v12;
  if (v12 <= 3)
  {
    v15 = ((v11 + ~(-1 << v13)) >> v13) + 1;
    if (HIWORD(v15))
    {
      v14 = *(_DWORD *)(a1 + v12);
      if (!v14)
        goto LABEL_23;
      goto LABEL_14;
    }
    if (v15 > 0xFF)
    {
      v14 = *(unsigned __int16 *)(a1 + v12);
      if (!*(_WORD *)(a1 + v12))
        goto LABEL_23;
      goto LABEL_14;
    }
    if (v15 < 2)
    {
LABEL_23:
      if (v8)
      {
        if (v5 >= v7)
          return (*(uint64_t (**)(void))(v4 + 48))();
        else
          return (*(uint64_t (**)(uint64_t))(v6 + 48))((v10 + a1) & ~v9);
      }
      return 0;
    }
  }
  v14 = *(unsigned __int8 *)(a1 + v12);
  if (!*(_BYTE *)(a1 + v12))
    goto LABEL_23;
LABEL_14:
  v16 = (v14 - 1) << v13;
  if (v12 > 3)
    v16 = 0;
  if (!(_DWORD)v12)
    return v8 + v16 + 1;
  if (v12 <= 3)
    v17 = (v10 & ~(_DWORD)v9) + *(_DWORD *)(v6 + 64);
  else
    v17 = 4;
  return ((uint64_t (*)(void))((char *)&loc_2350F2004 + 4 * byte_2352C9404[v17 - 1]))();
}

void storeEnumTagSinglePayload for CustomAnimationModifiedContent(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  int v12;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 24) - 8);
  if (*(_DWORD *)(v6 + 84) <= *(_DWORD *)(v5 + 84))
    v7 = *(_DWORD *)(v5 + 84);
  else
    v7 = *(_DWORD *)(v6 + 84);
  v8 = ((*(_QWORD *)(v5 + 64) + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))
     + *(_QWORD *)(v6 + 64);
  if (a3 > v7)
  {
    if (v8 <= 3)
    {
      v11 = ((a3 - v7 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v11))
      {
        v9 = 4u;
      }
      else if (v11 >= 0x100)
      {
        v9 = 2;
      }
      else
      {
        v9 = v11 > 1;
      }
    }
    else
    {
      v9 = 1u;
    }
  }
  else
  {
    v9 = 0;
  }
  if (v7 < a2)
  {
    v10 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        v12 = v10 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v12;
          *((_BYTE *)a1 + 2) = BYTE2(v12);
        }
        else if ((_DWORD)v8 == 2)
        {
          *a1 = v12;
        }
        else
        {
          *(_BYTE *)a1 = v12;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v10;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X16 }
}

void type metadata accessor for InternalCustomAnimationModifiedContent()
{
  JUMPOUT(0x23B7C9B5CLL);
}

uint64_t static Optional<A>._makeView(view:inputs:)@<X0>(int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  int v10;
  int v11;
  int v12;
  unsigned int v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  int v37;
  int v38;
  int v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  unint64_t v51;
  __int128 v52;
  uint64_t v53;
  unint64_t v54;
  __int128 v55;
  uint64_t v56;

  v6 = *a1;
  v7 = *(_QWORD *)a2;
  v8 = *(_DWORD *)(a2 + 8);
  v9 = *(_QWORD *)(a2 + 16);
  v10 = *(_DWORD *)(a2 + 24);
  v11 = *(_DWORD *)(a2 + 28);
  v12 = *(_DWORD *)(a2 + 32);
  v20 = *(_DWORD *)(a2 + 36);
  v21 = *(_QWORD *)(a2 + 40);
  v22 = *(_QWORD *)(a2 + 48);
  v23 = *(_DWORD *)(a2 + 56);
  v24 = *(_DWORD *)(a2 + 60);
  v25 = *(_DWORD *)(a2 + 64);
  v26 = *(_DWORD *)(a2 + 68);
  v27 = *(_DWORD *)(a2 + 72);
  v28 = *(_DWORD *)(a2 + 76);
  v29 = *(_DWORD *)(a2 + 80);
  if (one-time initialization token for introduced != -1)
    swift_once();
  v13 = static _SemanticFeature_v2.introduced;
  if (one-time initialization token for forced != -1)
    swift_once();
  swift_beginAccess();
  if (byte_25426FAB4 == 1)
  {
    if ((dyld_program_sdk_at_least() & 1) == 0)
    {
LABEL_7:
      v14 = type metadata accessor for Optional();
      static Optional.makeConditionalMetadata<A>(_:)(a3, (uint64_t)&type metadata for ViewDescriptor, (uint64_t)&protocol witness table for ViewDescriptor, &v54);
      v15 = v54;
      v51 = v54;
      v52 = v55;
      v53 = v56;
      v50 = v6;
      v34 = v7;
      v35 = v8;
      v36 = v9;
      v37 = v10;
      v38 = v11;
      v39 = v12;
      v40 = v20;
      v41 = v21;
      v42 = v22;
      v43 = v23;
      v44 = v24;
      v45 = v25;
      v46 = v26;
      v47 = v27;
      v48 = v28;
      v49 = v29;
      v33 = a4;
      v16 = MEMORY[0x23B7C9C04](&protocol conformance descriptor for <A> A?, v14, &v33);
      static DynamicView.makeDynamicView(metadata:view:inputs:)((uint64_t)&v51, &v50, (uint64_t)&v34, v14, v16, a5);
      outlined consume of ConditionalTypeDescriptor<A>.Storage<A>(v15);
      return swift_bridgeObjectRelease();
    }
  }
  else if (static Semantics.forced < v13)
  {
    goto LABEL_7;
  }
  v18 = type metadata accessor for Optional();
  LODWORD(v54) = v6;
  v34 = v7;
  v35 = v8;
  v36 = v9;
  v37 = v10;
  v38 = v11;
  v39 = v12;
  v40 = v20;
  v41 = v21;
  v42 = v22;
  v43 = v23;
  v44 = v24;
  v45 = v25;
  v46 = v26;
  v47 = v27;
  v48 = v28;
  v49 = v29;
  v32 = a4;
  v19 = MEMORY[0x23B7C9C04](&protocol conformance descriptor for <A> A?, v18, &v32);
  return static View.makeImplicitRoot(view:inputs:)((int *)&v54, &v34, v18, v19, (uint64_t)a5);
}

uint64_t static Optional<A>._makeViewList(view:inputs:)@<X0>(int *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _DWORD *a5@<X8>)
{
  int v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  char v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  char v31;
  int v32;
  unint64_t v33;
  __int128 v34;
  uint64_t v35;
  unint64_t v36;
  __int128 v37;
  uint64_t v38;

  v7 = *a1;
  v8 = *a2;
  v9 = *((_DWORD *)a2 + 2);
  v10 = a2[2];
  v19 = *(_OWORD *)(a2 + 5);
  v11 = a2[7];
  v12 = *((_DWORD *)a2 + 16);
  v18 = a2[9];
  v17 = *((_BYTE *)a2 + 80);
  v13 = type metadata accessor for Optional();
  static Optional.makeConditionalMetadata<A>(_:)(a3, (uint64_t)&type metadata for ViewDescriptor, (uint64_t)&protocol witness table for ViewDescriptor, &v36);
  v14 = v36;
  v33 = v36;
  v34 = v37;
  v35 = v38;
  v32 = v7;
  v24 = v9;
  v25 = v10;
  v26 = *(_OWORD *)(a2 + 3);
  v27 = v19;
  v28 = v11;
  v29 = v12;
  v30 = v18;
  v31 = v17;
  v22 = a4;
  v23 = v8;
  v15 = MEMORY[0x23B7C9C04](&protocol conformance descriptor for <A> A?, v13, &v22);
  static DynamicView.makeDynamicViewList(metadata:view:inputs:)((uint64_t)&v33, &v32, (uint64_t)&v23, v13, v15, a5);
  outlined consume of ConditionalTypeDescriptor<A>.Storage<A>(v14);
  return swift_bridgeObjectRelease();
}

uint64_t static Optional<A>._viewListCount(inputs:)(__int128 *a1, uint64_t a2, uint64_t a3)
{
  int v3;
  uint64_t v4;
  __int128 v6;
  int v7;
  uint64_t v8;

  v3 = *((_DWORD *)a1 + 4);
  v4 = *((_QWORD *)a1 + 3);
  v6 = *a1;
  v7 = v3;
  v8 = v4;
  (*(uint64_t (**)(__int128 *))(a3 + 40))(&v6);
  return 0;
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance <A> A?@<X0>(int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  return static Optional<A>._makeView(view:inputs:)(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a4 - 8), a5);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance <A> A?@<X0>(int *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _DWORD *a5@<X8>)
{
  return static Optional<A>._makeViewList(view:inputs:)(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a4 - 8), a5);
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance <A> A?(__int128 *a1, uint64_t a2, uint64_t a3)
{
  static Optional<A>._viewListCount(inputs:)(a1, *(_QWORD *)(a2 + 16), *(_QWORD *)(a3 - 8));
  return 0;
}

uint64_t static Optional<A>.canTransition.getter()
{
  return 1;
}

uint64_t Optional<A>.childInfo(metadata:)(uint64_t a1, __int128 *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  char v12;
  _QWORD v13[4];
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;

  v7 = *((_QWORD *)a2 + 2);
  v8 = *((_QWORD *)a2 + 3);
  v13[2] = *(_QWORD *)(a3 + 16);
  v13[3] = a4;
  v14 = *a2;
  v15 = v7;
  v16 = v8;
  type metadata accessor for (Any.Type, UniqueID?)();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v4, (uint64_t)partial apply for closure #1 in Optional<A>.childInfo(metadata:), (uint64_t)v13, a3, MEMORY[0x24BEE4078], v9, MEMORY[0x24BEE40A8], v10);
  result = v17;
  v12 = v19;
  *(_QWORD *)a1 = v18;
  *(_BYTE *)(a1 + 8) = v12;
  return result;
}

unint64_t closure #1 in Optional<A>.childInfo(metadata:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, unint64_t *a5@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t result;

  v7 = (uint64_t)(a5 + 1);
  type metadata accessor for ConditionalMetadata<ViewDescriptor>(0, a2, a3, a4);
  v9 = v8;
  v10 = type metadata accessor for Optional();
  result = ConditionalMetadata.childInfo<A>(ptr:emptyType:)(v7, a1, (unint64_t)&type metadata for EmptyView, v9, v10);
  *a5 = result;
  return result;
}

unint64_t partial apply for closure #1 in Optional<A>.childInfo(metadata:)@<X0>(uint64_t a1@<X0>, unint64_t *a2@<X8>)
{
  uint64_t *v2;

  return closure #1 in Optional<A>.childInfo(metadata:)(a1, v2[4], v2[5], v2[6], a2);
}

void type metadata accessor for (Any.Type, UniqueID?)()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!lazy cache variable for type metadata for (Any.Type, UniqueID?))
  {
    type metadata accessor for Any.Type();
    type metadata accessor for UniqueID?();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (Any.Type, UniqueID?));
  }
}

void type metadata accessor for UniqueID?()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for UniqueID?)
  {
    v0 = type metadata accessor for Optional();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for UniqueID?);
  }
}

uint64_t Optional<A>.makeChildView(metadata:view:inputs:)(__int128 *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  _QWORD v14[4];
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  _OWORD *v19;
  _OWORD v20[5];
  int v21;

  v9 = *((_QWORD *)a1 + 2);
  v10 = *((_QWORD *)a1 + 3);
  v11 = *(_OWORD *)(a3 + 48);
  v20[2] = *(_OWORD *)(a3 + 32);
  v20[3] = v11;
  v20[4] = *(_OWORD *)(a3 + 64);
  v21 = *(_DWORD *)(a3 + 80);
  v12 = *(_OWORD *)(a3 + 16);
  v20[0] = *(_OWORD *)a3;
  v20[1] = v12;
  v14[2] = *(_QWORD *)(a4 + 16);
  v14[3] = a5;
  v15 = *a1;
  v16 = v9;
  v17 = v10;
  v18 = a2;
  v19 = v20;
  return _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v8, (uint64_t)partial apply for closure #1 in Optional<A>.makeChildView(metadata:view:inputs:), (uint64_t)v14, a4, MEMORY[0x24BEE4078], (uint64_t)&type metadata for _ViewOutputs, MEMORY[0x24BEE40A8], a8);
}

unint64_t *partial apply for closure #1 in Optional<A>.makeChildView(metadata:view:inputs:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  _OWORD v13[5];
  int v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;

  v5 = *(_QWORD *)(v2 + 48);
  v6 = *(_QWORD *)(v2 + 56);
  v7 = *(_DWORD *)(v2 + 64);
  v8 = *(_QWORD *)(v2 + 72);
  v15 = *(_OWORD *)(v2 + 32);
  v16 = v5;
  v17 = v6;
  v9 = *(_OWORD *)(v8 + 48);
  v13[2] = *(_OWORD *)(v8 + 32);
  v13[3] = v9;
  v13[4] = *(_OWORD *)(v8 + 64);
  v14 = *(_DWORD *)(v8 + 80);
  v10 = *(_OWORD *)(v8 + 16);
  v13[0] = *(_OWORD *)v8;
  v13[1] = v10;
  v11 = type metadata accessor for Optional();
  return ConditionalMetadata<>.makeView<A>(ptr:view:inputs:)(a1, v7, (uint64_t *)v13, v11, a2);
}

uint64_t Optional<A>.makeChildViewList(metadata:view:inputs:)(__int128 *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  _QWORD v14[4];
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  _OWORD *v19;
  _OWORD v20[5];
  char v21;

  v9 = *((_QWORD *)a1 + 2);
  v10 = *((_QWORD *)a1 + 3);
  v11 = *(_OWORD *)(a3 + 48);
  v20[2] = *(_OWORD *)(a3 + 32);
  v20[3] = v11;
  v20[4] = *(_OWORD *)(a3 + 64);
  v21 = *(_BYTE *)(a3 + 80);
  v12 = *(_OWORD *)(a3 + 16);
  v20[0] = *(_OWORD *)a3;
  v20[1] = v12;
  v14[2] = *(_QWORD *)(a4 + 16);
  v14[3] = a5;
  v15 = *a1;
  v16 = v9;
  v17 = v10;
  v18 = a2;
  v19 = v20;
  return _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v8, (uint64_t)partial apply for closure #1 in Optional<A>.makeChildViewList(metadata:view:inputs:), (uint64_t)v14, a4, MEMORY[0x24BEE4078], (uint64_t)&type metadata for _ViewListOutputs, MEMORY[0x24BEE40A8], a8);
}

uint64_t partial apply for closure #1 in Optional<A>.makeChildViewList(metadata:view:inputs:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  _OWORD v13[5];
  char v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;

  v5 = *(_QWORD *)(v2 + 48);
  v6 = *(_QWORD *)(v2 + 56);
  v7 = *(_DWORD *)(v2 + 64);
  v8 = *(_QWORD *)(v2 + 72);
  v15 = *(_OWORD *)(v2 + 32);
  v16 = v5;
  v17 = v6;
  v9 = *(_OWORD *)(v8 + 48);
  v13[2] = *(_OWORD *)(v8 + 32);
  v13[3] = v9;
  v13[4] = *(_OWORD *)(v8 + 64);
  v14 = *(_BYTE *)(v8 + 80);
  v10 = *(_OWORD *)(v8 + 16);
  v13[0] = *(_OWORD *)v8;
  v13[1] = v10;
  v11 = type metadata accessor for Optional();
  return ConditionalMetadata<>.makeViewList<A>(ptr:view:inputs:)(a1, v7, (uint64_t *)v13, v11, a2);
}

uint64_t protocol witness for DynamicView.childInfo(metadata:) in conformance <A> A?(uint64_t a1, __int128 *a2, uint64_t a3, uint64_t a4)
{
  return Optional<A>.childInfo(metadata:)(a1, a2, a3, *(_QWORD *)(a4 - 8));
}

uint64_t protocol witness for DynamicView.makeChildView(metadata:view:inputs:) in conformance <A> A?(__int128 *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return Optional<A>.makeChildView(metadata:view:inputs:)(a1, a2, a3, a4, *(_QWORD *)(a5 - 8), a6, a7, a8);
}

uint64_t protocol witness for DynamicView.makeChildViewList(metadata:view:inputs:) in conformance <A> A?(__int128 *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return Optional<A>.makeChildViewList(metadata:view:inputs:)(a1, a2, a3, a4, *(_QWORD *)(a5 - 8), a6, a7, a8);
}

void type metadata accessor for ConditionalMetadata<ViewDescriptor>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  uint64_t v5;

  if (!lazy cache variable for type metadata for ConditionalMetadata<ViewDescriptor>)
  {
    v4 = type metadata accessor for ConditionalMetadata(0, (uint64_t)&type metadata for ViewDescriptor, (uint64_t)&protocol witness table for ViewDescriptor, a4);
    if (!v5)
      atomic_store(v4, (unint64_t *)&lazy cache variable for type metadata for ConditionalMetadata<ViewDescriptor>);
  }
}

uint64_t WeakBox.init(_:)()
{
  swift_unknownObjectWeakInit();
  swift_unknownObjectWeakAssign();
  return swift_unknownObjectRelease();
}

uint64_t Indirect.value.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;

  v5 = *(_QWORD *)v2 + *(_QWORD *)(**(_QWORD **)v2 + 88);
  swift_beginAccess();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8) + 16))(a2, v5);
}

uint64_t static Indirect<A>.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(_BYTE *, uint64_t, uint64_t);
  uint64_t v20;
  char v21;
  void (*v22)(_BYTE *, uint64_t);
  _BYTE v24[24];

  v4 = *(_QWORD *)(a3 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v6 = &v24[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v7);
  v9 = &v24[-v8];
  v11 = *v10;
  v13 = *v12;
  v16 = type metadata accessor for Indirect(0, v14, v14, v15);
  v17 = v11 + *(_QWORD *)(*(_QWORD *)v11 + 88);
  swift_beginAccess();
  v18 = *(_QWORD *)(v16 + 16);
  v19 = *(void (**)(_BYTE *, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 16);
  v19(v9, v17, v18);
  v20 = v13 + *(_QWORD *)(*(_QWORD *)v13 + 88);
  swift_beginAccess();
  v19(v6, v20, v18);
  v21 = dispatch thunk of static Equatable.== infix(_:_:)();
  v22 = *(void (**)(_BYTE *, uint64_t))(v4 + 8);
  v22(v6, a3);
  v22(v9, a3);
  return v21 & 1;
}

uint64_t Indirect.value.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;

  v6 = *(_QWORD *)(a2 + 16);
  type metadata accessor for MutableBox(0, v6, a3, a4);
  if ((isKnownUniquelyReferenced<A>(_:)() & 1) != 0)
  {
    v7 = *(_QWORD *)v4 + *(_QWORD *)(**(_QWORD **)v4 + 88);
    swift_beginAccess();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(v7, a1, v6);
    return swift_endAccess();
  }
  else
  {
    v9 = swift_allocObject();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v9 + 80) - 8) + 32))(v9 + *(_QWORD *)(*(_QWORD *)v9 + 88), a1);
    result = swift_release();
    *(_QWORD *)v4 = v9;
  }
  return result;
}

uint64_t MutableBox.__allocating_init(_:)(uint64_t a1)
{
  uint64_t v2;

  v2 = swift_allocObject();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v2 + 80) - 8) + 32))(v2 + *(_QWORD *)(*(_QWORD *)v2 + 88), a1);
  return v2;
}

uint64_t Box.value.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v1 + 80) - 8) + 16))(a1, v1 + *(_QWORD *)(*(_QWORD *)v1 + 88));
}

uint64_t static Box<A>.== infix(_:_:)()
{
  return dispatch thunk of static Equatable.== infix(_:_:)() & 1;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance <A> Box<A>()
{
  return static Box<A>.== infix(_:_:)();
}

uint64_t (*MutableBox.value.modify())()
{
  swift_beginAccess();
  return DisplayList.GraphicsRenderer.platformViewMode.modify;
}

uint64_t Box.init(_:)(uint64_t a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v1 + 80) - 8) + 32))(v1 + *(_QWORD *)(*(_QWORD *)v1 + 88), a1);
  return v1;
}

uint64_t type metadata accessor for Indirect(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Indirect);
}

uint64_t type metadata accessor for MutableBox(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for MutableBox);
}

uint64_t MutableBox.value.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;

  v3 = *v1;
  v4 = (uint64_t)v1 + *(_QWORD *)(*v1 + 88);
  swift_beginAccess();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(v3 + 80) - 8) + 16))(a1, v4);
}

uint64_t key path setter for MutableBox.wrappedValue : <A>MutableBox<A>(uint64_t a1)
{
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v5;

  MEMORY[0x24BDAC7A8](a1);
  v2 = (char *)&v5 - v1;
  (*(void (**)(char *))(v3 + 16))((char *)&v5 - v1);
  return MutableBox.wrappedValue.setter(v2);
}

uint64_t MutableBox.value.setter(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;

  v3 = *v1;
  v4 = (uint64_t)v1 + *(_QWORD *)(*v1 + 88);
  swift_beginAccess();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(v3 + 80) - 8) + 40))(v4, a1);
  return swift_endAccess();
}

void (*MutableBox.wrappedValue.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t *v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  size_t v7;
  void *v8;
  uint64_t v9;

  v3 = malloc(0x40uLL);
  *a1 = v3;
  v3[3] = v1;
  v4 = *v1;
  v5 = *(_QWORD *)(*v1 + 80);
  v3[4] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v3[5] = v6;
  v7 = *(_QWORD *)(v6 + 64);
  v3[6] = malloc(v7);
  v8 = malloc(v7);
  v3[7] = v8;
  v9 = (uint64_t)v1 + *(_QWORD *)(v4 + 88);
  swift_beginAccess();
  (*(void (**)(void *, uint64_t, uint64_t))(v6 + 16))(v8, v9, v5);
  return MutableBox.wrappedValue.modify;
}

void MutableBox.wrappedValue.modify(uint64_t a1, char a2)
{
  _QWORD *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *(_QWORD **)a1;
  v3 = *(void **)(*(_QWORD *)a1 + 48);
  v4 = *(void **)(*(_QWORD *)a1 + 56);
  if ((a2 & 1) != 0)
  {
    v5 = v2[4];
    v6 = v2[5];
    (*(void (**)(_QWORD, void *, uint64_t))(v6 + 16))(*(_QWORD *)(*(_QWORD *)a1 + 48), v4, v5);
    MutableBox.wrappedValue.setter(v3);
    (*(void (**)(void *, uint64_t))(v6 + 8))(v4, v5);
  }
  else
  {
    MutableBox.wrappedValue.setter(*(_QWORD *)(*(_QWORD *)a1 + 56));
  }
  free(v4);
  free(v3);
  free(v2);
}

uint64_t MutableBox.projectedValue.getter()
{
  return swift_retain();
}

uint64_t Box.deinit()
{
  uint64_t v0;

  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v0 + 80) - 8) + 8))(v0 + *(_QWORD *)(*(_QWORD *)v0 + 88));
  return v0;
}

uint64_t Box.__deallocating_deinit()
{
  uint64_t v0;

  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v0 + 80) - 8) + 8))(v0 + *(_QWORD *)(*(_QWORD *)v0 + 88));
  return swift_deallocClassInstance();
}

uint64_t static MutableBox<A>.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(_BYTE *, uint64_t, uint64_t);
  uint64_t v14;
  char v15;
  void (*v16)(_BYTE *, uint64_t);
  _BYTE v18[24];

  v4 = *(_QWORD *)(v2 + 80);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v7 = &v18[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v8);
  v10 = &v18[-v9];
  v12 = v11 + *(_QWORD *)(*(_QWORD *)v11 + 88);
  swift_beginAccess();
  v13 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v5 + 16);
  v13(v10, v12, v4);
  v14 = a2 + *(_QWORD *)(*(_QWORD *)a2 + 88);
  swift_beginAccess();
  v13(v7, v14, v4);
  v15 = dispatch thunk of static Equatable.== infix(_:_:)();
  v16 = *(void (**)(_BYTE *, uint64_t))(v5 + 8);
  v16(v7, v4);
  v16(v10, v4);
  return v15 & 1;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance <A> MutableBox<A>(uint64_t *a1, uint64_t *a2)
{
  return static MutableBox<A>.== infix(_:_:)(*a1, *a2);
}

uint64_t key path getter for WeakBox.base : <A>WeakBox<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  _BYTE v11[8];

  v7 = type metadata accessor for WeakBox(0, *(_QWORD *)(a3 + a2 - 8), a3, a4);
  v8 = *(_QWORD *)(v7 - 8);
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v8 + 16))(v11, a1, v7);
  v9 = MEMORY[0x23B7C9E44](v11);
  result = (*(uint64_t (**)(_BYTE *, uint64_t))(v8 + 8))(v11, v7);
  *a5 = v9;
  return result;
}

void WeakBox.base.getter()
{
  JUMPOUT(0x23B7C9E44);
}

uint64_t WeakBox.base.setter()
{
  swift_unknownObjectWeakAssign();
  return swift_unknownObjectRelease();
}

uint64_t (*WeakBox.base.modify(_QWORD *a1))()
{
  uint64_t v1;

  a1[1] = v1;
  *a1 = MEMORY[0x23B7C9E44](v1);
  return WeakBox.base.modify;
}

uint64_t key path getter for HashableWeakBox.base : <A>HashableWeakBox<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  _BYTE v11[16];

  v7 = type metadata accessor for HashableWeakBox(0, *(_QWORD *)(a3 + a2 - 8), a3, a4);
  v8 = *(_QWORD *)(v7 - 8);
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v8 + 16))(v11, a1, v7);
  v9 = MEMORY[0x23B7C9E44](v11);
  result = (*(uint64_t (**)(_BYTE *, uint64_t))(v8 + 8))(v11, v7);
  *a5 = v9;
  return result;
}

void HashableWeakBox.base.getter()
{
  JUMPOUT(0x23B7C9E44);
}

uint64_t HashableWeakBox.base.setter()
{
  swift_unknownObjectWeakAssign();
  return swift_unknownObjectRelease();
}

uint64_t (*HashableWeakBox.base.modify(_QWORD *a1))()
{
  uint64_t v1;

  a1[1] = v1;
  *a1 = MEMORY[0x23B7C9E44](v1);
  return WeakBox.base.modify;
}

uint64_t WeakBox.base.modify()
{
  swift_unknownObjectWeakAssign();
  return swift_unknownObjectRelease();
}

uint64_t HashableWeakBox.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;

  swift_unknownObjectWeakInit();
  swift_unknownObjectWeakAssign();
  result = swift_unknownObjectRelease();
  *(_QWORD *)(a2 + 8) = a1;
  return result;
}

void HashableWeakBox.hash(into:)()
{
  uint64_t v0;

  Hasher._combine(_:)(*(_QWORD *)(v0 + 8));
}

BOOL static HashableWeakBox.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a1 + 8) == *(_QWORD *)(a2 + 8);
}

Swift::Int HashableWeakBox.hashValue.getter()
{
  uint64_t v0;

  Hasher.init(_seed:)();
  Hasher._combine(_:)(*(_QWORD *)(v0 + 8));
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance HashableWeakBox<A>()
{
  Hasher.init(_seed:)();
  HashableWeakBox.hash(into:)();
  return Hasher._finalize()();
}

uint64_t key path setter for Indirect.value : <A>Indirect<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  double v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;

  v4 = *(_QWORD *)(a4 + a3 - 8);
  v5 = MEMORY[0x24BDAC7A8](a1);
  v7 = (char *)&v15 - v6;
  (*(void (**)(char *, double))(v8 + 16))((char *)&v15 - v6, v5);
  v11 = type metadata accessor for Indirect(0, v4, v9, v10);
  return Indirect.value.setter((uint64_t)v7, v11, v12, v13);
}

void (*Indirect.value.modify(_QWORD *a1, uint64_t a2))(uint64_t *a1, char a2, uint64_t a3, uint64_t a4)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  void *v9;
  uint64_t v10;
  void (*v11)(void *, uint64_t, uint64_t);

  v5 = malloc(0x50uLL);
  *a1 = v5;
  v5[3] = a2;
  v5[4] = v2;
  v6 = *(_QWORD *)(a2 + 16);
  v5[5] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v5[6] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v5[7] = malloc(v8);
  v9 = malloc(v8);
  v5[8] = v9;
  v10 = *(_QWORD *)v2 + *(_QWORD *)(**(_QWORD **)v2 + 88);
  swift_beginAccess();
  v11 = *(void (**)(void *, uint64_t, uint64_t))(v7 + 16);
  v5[9] = v11;
  v11(v9, v10, v6);
  return Indirect.value.modify;
}

void Indirect.value.modify(uint64_t *a1, char a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = *a1;
  if ((a2 & 1) != 0)
  {
    v5 = *(void **)(v4 + 64);
    v7 = *(_QWORD *)(v4 + 48);
    v6 = *(void **)(v4 + 56);
    v8 = *(_QWORD *)(v4 + 40);
    v9 = *(_QWORD *)(v4 + 24);
    (*(void (**)(void *, void *, uint64_t))(v4 + 72))(v6, v5, v8);
    Indirect.value.setter((uint64_t)v6, v9, v10, v11);
    (*(void (**)(void *, uint64_t))(v7 + 8))(v5, v8);
  }
  else
  {
    v6 = *(void **)(v4 + 56);
    v5 = *(void **)(v4 + 64);
    Indirect.value.setter((uint64_t)v5, *(_QWORD *)(v4 + 24), a3, a4);
  }
  free(v5);
  free(v6);
  free((void *)v4);
}

uint64_t Indirect.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v7;
  uint64_t result;

  type metadata accessor for MutableBox(0, a2, a3, a4);
  v7 = swift_allocObject();
  result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v7 + 80) - 8) + 32))(v7 + *(_QWORD *)(*(_QWORD *)v7 + 88), a1);
  *a5 = v7;
  return result;
}

uint64_t Indirect.wrappedValue.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;

  v5 = *(_QWORD *)v2 + *(_QWORD *)(**(_QWORD **)v2 + 88);
  swift_beginAccess();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8) + 16))(a2, v5);
}

uint64_t Indirect.wrappedValue.setter(uint64_t a1, uint64_t a2)
{
  specialized Indirect.wrappedValue.setter(a1, a2);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 8))(a1);
}

void (*Indirect.wrappedValue.modify(_QWORD *a1, uint64_t a2))(uint64_t *a1, char a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  void *v9;
  uint64_t v10;
  void (*v11)(void *, uint64_t, uint64_t);

  v5 = malloc(0x50uLL);
  *a1 = v5;
  v5[3] = a2;
  v5[4] = v2;
  v6 = *(_QWORD *)(a2 + 16);
  v5[5] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v5[6] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v5[7] = malloc(v8);
  v9 = malloc(v8);
  v5[8] = v9;
  v10 = *(_QWORD *)v2 + *(_QWORD *)(**(_QWORD **)v2 + 88);
  swift_beginAccess();
  v11 = *(void (**)(void *, uint64_t, uint64_t))(v7 + 16);
  v5[9] = v11;
  v11(v9, v10, v6);
  return Indirect.wrappedValue.modify;
}

void Indirect.wrappedValue.modify(uint64_t *a1, char a2)
{
  uint64_t v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(void *, uint64_t);
  uint64_t v9;
  uint64_t v10;

  v2 = *a1;
  if ((a2 & 1) != 0)
  {
    v3 = *(void **)(v2 + 64);
    v5 = *(_QWORD *)(v2 + 48);
    v4 = *(void **)(v2 + 56);
    v6 = *(_QWORD *)(v2 + 40);
    v7 = *(_QWORD *)(v2 + 24);
    (*(void (**)(void *, void *, uint64_t))(v2 + 72))(v4, v3, v6);
    specialized Indirect.wrappedValue.setter((uint64_t)v4, v7);
    v8 = *(void (**)(void *, uint64_t))(v5 + 8);
    v8(v4, v6);
    v8(v3, v6);
  }
  else
  {
    v4 = *(void **)(v2 + 56);
    v3 = *(void **)(v2 + 64);
    v9 = *(_QWORD *)(v2 + 40);
    v10 = *(_QWORD *)(v2 + 48);
    specialized Indirect.wrappedValue.setter((uint64_t)v3, *(_QWORD *)(v2 + 24));
    (*(void (**)(void *, uint64_t))(v10 + 8))(v3, v9);
  }
  free(v3);
  free(v4);
  free((void *)v2);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance <A> Indirect<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return static Indirect<A>.== infix(_:_:)(a1, a2, *(_QWORD *)(a3 + 16));
}

uint64_t specialized Indirect.wrappedValue.setter(uint64_t a1, uint64_t a2)
{
  double v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v3 = MEMORY[0x24BDAC7A8](a1);
  v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, double))(v6 + 16))(v5, v3);
  return Indirect.value.setter((uint64_t)v5, a2, v7, v8);
}

void base witness table accessor for Equatable in HashableWeakBox<A>()
{
  JUMPOUT(0x23B7C9C04);
}

uint64_t sub_2350F3CD8()
{
  return MutableBox.wrappedValue.getter();
}

uint64_t sub_2350F3CFC()
{
  return 8;
}

_QWORD *sub_2350F3D08(_QWORD *result, _QWORD *a2)
{
  *a2 = *result;
  return result;
}

uint64_t sub_2350F3D18()
{
  return swift_unknownObjectWeakAssign();
}

uint64_t sub_2350F3D28()
{
  return 8;
}

uint64_t sub_2350F3D38()
{
  return swift_unknownObjectWeakAssign();
}

uint64_t sub_2350F3D48()
{
  return 8;
}

uint64_t sub_2350F3D54(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return keypath_get_9Tm(a1, a2, a3, (uint64_t (*)(uint64_t))Indirect.value.getter);
}

uint64_t sub_2350F3D64()
{
  return 8;
}

uint64_t sub_2350F3D70(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return keypath_get_9Tm(a1, a2, a3, (uint64_t (*)(uint64_t))Indirect.wrappedValue.getter);
}

uint64_t keypath_get_9Tm(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t))
{
  uint64_t v5;

  v5 = type metadata accessor for Indirect(0, *(_QWORD *)(a3 + a2 - 8), a3, (uint64_t)a4);
  return a4(v5);
}

uint64_t sub_2350F3DD0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;

  v5 = type metadata accessor for Indirect(0, *(_QWORD *)(a4 + a3 - 8), a3, a4);
  return specialized Indirect.wrappedValue.setter(a1, v5);
}

uint64_t sub_2350F3E0C()
{
  return 8;
}

uint64_t type metadata accessor for Box(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Box);
}

uint64_t method lookup function for Box()
{
  return swift_lookUpClassMethod();
}

uint64_t type metadata completion function for Box()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    result = swift_initClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t method lookup function for MutableBox()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of MutableBox.__allocating_init(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 96))();
}

uint64_t type metadata accessor for WeakBox(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for WeakBox);
}

uint64_t getEnumTagSinglePayload for HashableWeakBox(uint64_t a1, int a2)
{
  int v3;

  if (!a2)
    return 0;
  if (a2 != 1 && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 2);
  if (*(_QWORD *)(a1 + 8))
    v3 = -1;
  else
    v3 = 0;
  return (v3 + 1);
}

uint64_t storeEnumTagSinglePayload for HashableWeakBox(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 1)
  {
    *(_QWORD *)result = a2 - 2;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 2)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if (a3 >= 2)
      *(_BYTE *)(result + 16) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = 0;
  }
  return result;
}

uint64_t type metadata accessor for HashableWeakBox(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for HashableWeakBox);
}

uint64_t static PropertyKey<>.valuesEqual(_:_:)()
{
  swift_getAssociatedTypeWitness();
  return dispatch thunk of static Equatable.== infix(_:_:)() & 1;
}

uint64_t specialized Sequence<>.contains(_:)(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t i;
  uint64_t v4;
  _BOOL8 v5;
  BOOL v6;

  v2 = *(_QWORD *)(a2 + 16);
  if (!v2)
    return 0;
  if (*(_QWORD *)(a2 + 32) == result)
    return 1;
  if (v2 == 1)
    return 0;
  for (i = 5; ; ++i)
  {
    v4 = i - 3;
    if (__OFADD__(i - 4, 1))
      break;
    v6 = *(_QWORD *)(a2 + 8 * i) == result;
    v5 = v6;
    v6 = v6 || v4 == v2;
    if (v6)
      return v5;
  }
  __break(1u);
  return result;
}

{
  uint64_t v2;
  uint64_t i;
  uint64_t v4;
  _BOOL8 v5;
  BOOL v6;

  v2 = *(_QWORD *)(a2 + 16);
  if (!v2)
    return 0;
  if (*(_QWORD *)(a2 + 32) == result)
    return 1;
  if (v2 == 1)
    return 0;
  for (i = 5; ; ++i)
  {
    v4 = i - 3;
    if (__OFADD__(i - 4, 1))
      break;
    v6 = *(_QWORD *)(a2 + 8 * i) == result;
    v5 = v6;
    v6 = v6 || v4 == v2;
    if (v6)
      return v5;
  }
  __break(1u);
  return result;
}

uint64_t protocol witness for static PropertyKey.valuesEqual(_:_:) in conformance _GraphInputs.ScrollPositionKey()
{
  return protocol witness for static PropertyKey.valuesEqual(_:_:) in conformance _GraphInputs.ScrollPositionKey();
}

{
  type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for ScrollPositionStorage?, (uint64_t)&type metadata for ScrollPositionStorage, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1C68]);
  return AGCompareValues();
}

uint64_t static PropertyKey.valuesEqual(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  int v9;
  unsigned __int8 v10;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v8 = a2;
  v9 = 3;
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(a1, (uint64_t)partial apply for closure #1 in compareValues<A>(_:_:options:), (uint64_t)&v6, AssociatedTypeWitness, MEMORY[0x24BEE4078], MEMORY[0x24BEE1328], MEMORY[0x24BEE40A8], v4);
  return v10;
}

uint64_t protocol witness for static PropertyKey.valuesEqual(_:_:) in conformance _GraphInputs.ImageRepresentationKey(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static PropertyKey.valuesEqual(_:_:) in conformance _GraphInputs.ImageRepresentationKey(a1, a2, a3, a4, (void (*)(_QWORD))type metadata accessor for PlatformImageRepresentable.Type?);
}

uint64_t protocol witness for static PropertyKey.valuesEqual(_:_:) in conformance _GraphInputs.NamedImageRepresentationKey(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static PropertyKey.valuesEqual(_:_:) in conformance _GraphInputs.ImageRepresentationKey(a1, a2, a3, a4, (void (*)(_QWORD))type metadata accessor for PlatformNamedImageRepresentable.Type?);
}

uint64_t protocol witness for static PropertyKey.valuesEqual(_:_:) in conformance _DisplayList_StableIdentityScope()
{
  return static WeakAttribute.== infix(_:_:)();
}

uint64_t protocol witness for static PropertyKey.valuesEqual(_:_:) in conformance BodyInput<A>()
{
  lazy protocol witness table accessor for type Stack<BodyInputElement> and conformance <A> Stack<A>();
  return static PropertyKey<>.valuesEqual(_:_:)() & 1;
}

uint64_t static PropertyList.value<A>(as:from:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 224))(a3, a3);
}

uint64_t specialized PropertyList.Element.forEach(filter:_:)(uint64_t *a1, _QWORD *a2, _QWORD *a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  Swift::String v9;
  Swift::String v10;
  uint64_t result;
  uint64_t v12;

  v7 = *a1;
  while (1)
  {
    while ((v7 & ~a2[7]) != 0)
    {
      a2 = (_QWORD *)a2[5];
      if (!a2)
        return 1;
    }
    v8 = a2[3];
    if (v8)
    {
      v12 = v7;
      if ((specialized PropertyList.Element.forEach(filter:_:)(&v12, v8, a3, a4) & 1) == 0)
        return 0;
    }
    if (*a3)
    {
      v9._countAndFlagsBits = 8236;
      v9._object = (void *)0xE200000000000000;
      String.append(_:)(v9);
    }
    v10._countAndFlagsBits = (*(uint64_t (**)(void))(*a2 + 200))();
    String.append(_:)(v10);
    result = swift_bridgeObjectRelease();
    if (__OFADD__(*a3, 1))
      break;
    ++*a3;
    a2 = (_QWORD *)a2[4];
    if (!a2)
      return 1;
  }
  __break(1u);
  return result;
}

uint64_t specialized PropertyList.Element.forEach(filter:_:)(uint64_t *a1, _QWORD *a2, uint64_t a3, uint64_t *a4, _BYTE *a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21[4];

  v21[3] = *MEMORY[0x24BDAC8D0];
  v9 = *a1;
  while (1)
  {
    while ((v9 & ~a2[7]) != 0)
    {
      a2 = (_QWORD *)a2[5];
      if (!a2)
        return 1;
    }
    v10 = a2[3];
    if (v10)
    {
      v21[0] = v9;
      if ((specialized PropertyList.Element.forEach(filter:_:)(v21, v10, a3, a4, a5) & 1) == 0)
        return 0;
    }
    v11 = a2[2];
    swift_retain();
    v12 = MEMORY[0x23B7C80F8](v11);
    if (v12)
    {
      if (!a3 || v12 != a3)
        goto LABEL_20;
    }
    else if (a3)
    {
      goto LABEL_20;
    }
    v13 = *a4;
    if (*(_QWORD *)(*a4 + 16))
    {
      v14 = static Hasher._hash(seed:_:)();
      v15 = -1 << *(_BYTE *)(v13 + 32);
      v16 = v14 & ~v15;
      if (((*(_QWORD *)(v13 + 56 + ((v16 >> 3) & 0xFFFFFFFFFFFFF8)) >> v16) & 1) != 0)
      {
        v17 = *(_QWORD *)(v13 + 48);
        if (*(_QWORD *)(v17 + 8 * v16) == v11)
          goto LABEL_20;
        v18 = ~v15;
        while (1)
        {
          v16 = (v16 + 1) & v18;
          if (((*(_QWORD *)(v13 + 56 + ((v16 >> 3) & 0xFFFFFFFFFFFFF8)) >> v16) & 1) == 0)
            break;
          if (*(_QWORD *)(v17 + 8 * v16) == v11)
            goto LABEL_20;
        }
      }
    }
    specialized Set._Variant.insert(_:)(v21, v11);
    type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for Stack<BodyInputElement>, (uint64_t)&type metadata for BodyInputElement, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for Stack);
    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*a2 + 224))(v21, v19, v19);
    if (v21[0])
    {
      *a5 = 0;
      swift_beginAccess();
      if (static ReuseTrace.recorder)
        AGGraphAddTraceEvent();
      swift_retain();
      specialized static Log.graphReuse(_:)();
      swift_release_n();
      swift_release();
      return 0;
    }
    *a5 = 1;
LABEL_20:
    swift_release();
    a2 = (_QWORD *)a2[4];
    if (!a2)
      return 1;
  }
}

uint64_t PropertyList.Element.forEach(filter:_:)(uint64_t *a1, void (*a2)(_QWORD *, BOOL *), uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v7;
  char v8;
  uint64_t v10;
  BOOL v11;

  v4 = v3;
  v7 = *a1;
  v11 = 0;
  while (1)
  {
    while ((v7 & ~v4[7]) != 0)
    {
      v4 = (_QWORD *)v4[5];
      if (!v4)
        return 1;
    }
    if (v4[3])
    {
      v10 = v7;
      v8 = PropertyList.Element.forEach(filter:_:)(&v10, a2, a3);
      v11 = (v8 & 1) == 0;
      if ((v8 & 1) == 0)
        break;
    }
    a2(v4, &v11);
    if (v11)
      break;
    v4 = (_QWORD *)v4[4];
    if (!v4)
      return 1;
  }
  return 0;
}

uint64_t protocol witness for static PropertyKey.valuesEqual(_:_:) in conformance BodyCountInput<A>(uint64_t a1, uint64_t a2)
{
  return static PropertyKey.valuesEqual(_:_:)(a1, a2) & 1;
}

Swift::UInt PropertyList.override(with:)(Swift::UInt result)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;

  v2 = v1;
  v3 = result;
  v4 = (_QWORD *)*v1;
  if (v4)
  {
    if (result)
    {
      if (v4[3])
      {
        type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, (unint64_t *)&lazy cache variable for type metadata for TypedElement<EmptyKey>, (uint64_t)&type metadata for EmptyKey, (uint64_t)&protocol witness table for EmptyKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for TypedElement);
        swift_allocObject();
        swift_retain();
        result = PropertyList.Element.init(keyType:before:after:)((Swift::Int)&type metadata for EmptyKey, v3, (uint64_t)v4).value;
        v3 = result;
      }
      else
      {
        v5 = v4[4];
        v6 = *(uint64_t (**)(uint64_t, uint64_t))(*v4 + 216);
        swift_retain();
        v7 = swift_retain();
        v8 = v6(v7, v5);
        swift_release();
        swift_release();
        result = swift_release();
        v3 = v8;
      }
    }
    else
    {
      v3 = (uint64_t)v4;
    }
  }
  else
  {
    result = swift_retain();
  }
  *v2 = v3;
  return result;
}

uint64_t PropertyList.Tracker.__allocating_init()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v0 = swift_allocObject();
  type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for AtomicBuffer<TrackerData>, (uint64_t)&type metadata for TrackerData, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for AtomicBuffer);
  v1 = swift_allocObject();
  *(_DWORD *)(v1 + 16) = 0;
  v2 = MEMORY[0x24BEE4B00];
  v3 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v1 + 24) = 0;
  *(_QWORD *)(v1 + 32) = v2;
  *(_QWORD *)(v1 + 40) = v2;
  *(_QWORD *)(v1 + 48) = v3;
  *(_BYTE *)(v1 + 56) = 0;
  *(_QWORD *)(v0 + 16) = v1;
  return v0;
}

uint64_t PropertyList.Tracker.hasDifferentUsedValues(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v14[3];
  uint64_t v15;
  uint64_t v16;

  v3 = *(_QWORD *)(v1 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v3 + 16));
  v5 = *(_QWORD *)(v3 + 24);
  v4 = *(_QWORD *)(v3 + 32);
  v6 = *(_QWORD *)(v3 + 40);
  v7 = *(_QWORD *)(v3 + 48);
  v8 = *(unsigned __int8 *)(v3 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 16));
  swift_release();
  if (v8 == 1)
    goto LABEL_16;
  if (!a1)
  {
    if (!v5)
      goto LABEL_13;
LABEL_6:
    if ((compare(_:against:)(v4, a1) & 1) != 0 && (compare(_:against:)(v6, a1) & 1) != 0)
    {
      v9 = *(_QWORD *)(v7 + 16);
      if (!v9)
        goto LABEL_13;
      v10 = v7 + 32;
      swift_bridgeObjectRetain();
      while (1)
      {
        outlined init with copy of AnyTrackedValue(v10, (uint64_t)v14);
        v11 = v15;
        v12 = v16;
        __swift_project_boxed_opaque_existential_1(v14, v15);
        if (((*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 16))(a1, v11, v12) & 1) == 0)
          break;
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v14);
        v10 += 40;
        if (!--v9)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease_n();
          return 0;
        }
      }
      swift_bridgeObjectRelease();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v14);
    }
LABEL_16:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return 1;
  }
  if (*(_QWORD *)(a1 + 64) != v5)
    goto LABEL_6;
LABEL_13:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return 0;
}

Swift::Void __swiftcall PropertyList.Tracker.reset()()
{
  uint64_t v0;
  uint64_t v1;
  char isUniquelyReferenced_nonNull_native;
  char v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *(_QWORD *)(v0 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v1 + 16));
  *(_QWORD *)(v1 + 24) = 0;
  if (*(_QWORD *)(*(_QWORD *)(v1 + 32) + 16))
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v6 = *(_QWORD *)(v1 + 32);
    *(_QWORD *)(v1 + 32) = 0x8000000000000000;
    type metadata accessor for _NativeDictionary<ObjectIdentifier, AnyTrackedValue>();
    _NativeDictionary.removeAll(isUnique:)(isUniquelyReferenced_nonNull_native);
    *(_QWORD *)(v1 + 32) = v6;
    swift_bridgeObjectRelease();
  }
  if (*(_QWORD *)(*(_QWORD *)(v1 + 40) + 16))
  {
    v3 = swift_isUniquelyReferenced_nonNull_native();
    v7 = *(_QWORD *)(v1 + 40);
    *(_QWORD *)(v1 + 40) = 0x8000000000000000;
    type metadata accessor for _NativeDictionary<ObjectIdentifier, AnyTrackedValue>();
    _NativeDictionary.removeAll(isUnique:)(v3);
    *(_QWORD *)(v1 + 40) = v7;
    swift_bridgeObjectRelease();
  }
  v4 = swift_isUniquelyReferenced_nonNull_native();
  v5 = *(_QWORD *)(v1 + 48);
  if (v4)
  {
    specialized Array.replaceSubrange<A>(_:with:)(0, *(_QWORD *)(v5 + 16));
  }
  else
  {
    *(_QWORD *)(v1 + 48) = specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(0, *(_QWORD *)(v5 + 24) >> 1);
    swift_bridgeObjectRelease();
  }
  *(_BYTE *)(v1 + 56) = 0;
  os_unfair_lock_unlock((os_unfair_lock_t)(v1 + 16));
  swift_release();
}

uint64_t protocol witness for static PropertyKey.valuesEqual(_:_:) in conformance _GraphInputs.PrivacyReductionAccessibilityProviderKey(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static PropertyKey.valuesEqual(_:_:) in conformance _GraphInputs.PrivacyReductionAccessibilityProviderKey(a1, a2, a3, a4, (unint64_t *)&lazy cache variable for type metadata for PrivacyReductionAccessibilityProvider.Type, &lazy cache variable for type metadata for PrivacyReductionAccessibilityProvider);
}

uint64_t protocol witness for static PropertyKey.valuesEqual(_:_:) in conformance MatchedGeometryScope()
{
  type metadata accessor for PropertyList.Element?(0, &lazy cache variable for type metadata for MatchedGeometryScope?, 255, (void (*)(uint64_t))type metadata accessor for MatchedGeometryScope);
  return AGCompareValues();
}

uint64_t protocol witness for static PropertyKey.valuesEqual(_:_:) in conformance _GraphInputs.LayoutAccessibilityProviderKey(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static PropertyKey.valuesEqual(_:_:) in conformance _GraphInputs.PrivacyReductionAccessibilityProviderKey(a1, a2, a3, a4, &lazy cache variable for type metadata for LayoutAccessibilityProvider.Type, &lazy cache variable for type metadata for LayoutAccessibilityProvider);
}

uint64_t protocol witness for static PropertyKey.valuesEqual(_:_:) in conformance _GraphInputs.SpacerRepresentationKey(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static PropertyKey.valuesEqual(_:_:) in conformance _GraphInputs.ImageRepresentationKey(a1, a2, a3, a4, (void (*)(_QWORD))type metadata accessor for PlatformSpacerRepresentable.Type?);
}

uint64_t protocol witness for static PropertyKey.valuesEqual(_:_:) in conformance _GraphInputs.OpacityAccessibilityProviderKey(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static PropertyKey.valuesEqual(_:_:) in conformance _GraphInputs.PrivacyReductionAccessibilityProviderKey(a1, a2, a3, a4, &lazy cache variable for type metadata for OpacityAccessibilityProvider.Type, &lazy cache variable for type metadata for OpacityAccessibilityProvider);
}

uint64_t protocol witness for static PropertyKey.valuesEqual(_:_:) in conformance _GraphInputs.TextAlwaysOnProviderKey(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static PropertyKey.valuesEqual(_:_:) in conformance _GraphInputs.ImageRepresentationKey(a1, a2, a3, a4, (void (*)(_QWORD))type metadata accessor for TextAlwaysOnProvider.Type?);
}

uint64_t protocol witness for static PropertyKey.valuesEqual(_:_:) in conformance _GraphInputs.TextRepresentationKey(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static PropertyKey.valuesEqual(_:_:) in conformance _GraphInputs.ImageRepresentationKey(a1, a2, a3, a4, (void (*)(_QWORD))type metadata accessor for PlatformTextRepresentable.Type?);
}

uint64_t protocol witness for static PropertyKey.valuesEqual(_:_:) in conformance _GraphInputs.TextSelectionRepresentationKey(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static PropertyKey.valuesEqual(_:_:) in conformance _GraphInputs.ImageRepresentationKey(a1, a2, a3, a4, (void (*)(_QWORD))type metadata accessor for PlatformTextSelectionRepresentation.Type?);
}

uint64_t PropertyList.init()()
{
  return 0;
}

uint64_t PropertyList.subscript.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  _QWORD v9[7];
  uint64_t v10;

  v10 = a2;
  v9[2] = a3;
  v9[3] = a4;
  v9[4] = a2;
  v9[5] = a1;
  type metadata accessor for PropertyList.Element?(0, &lazy cache variable for type metadata for PropertyList.Element?, a3, (void (*)(uint64_t))type metadata accessor for PropertyList.Element);
  v5 = v4;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  swift_retain();
  _ss20withExtendedLifetimeyq0_x_q0_yq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v10, (uint64_t)partial apply for closure #1 in PropertyList.subscript.getter, (uint64_t)v9, v5, MEMORY[0x24BEE4078], AssociatedTypeWitness, MEMORY[0x24BEE40A8], v7);
  return swift_release();
}

{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a4 + 24))(a2, a3, a4);
}

uint64_t PropertyList.subscript.setter(uint64_t a1, Swift::Int a2, uint64_t a3, uint64_t a4)
{
  uint64_t AssociatedTypeWitness;

  specialized PropertyList.subscript.setter(a1, a2, a3, a4);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 8))(a1, AssociatedTypeWitness);
}

BOOL PropertyList.isEmpty.getter(uint64_t a1)
{
  return a1 == 0;
}

uint64_t PropertyList.mayNotBeEqual(to:)(unint64_t a1, unint64_t a2)
{
  BOOL v4;
  char v5;
  uint64_t v7;

  if (a2)
  {
    if (a1)
    {
      v7 = MEMORY[0x24BEE4AF8];
      swift_retain();
      swift_retain();
      v4 = compareLists(_:_:ignoredTypes:)(a2, a1, (uint64_t)&v7);
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      v5 = !v4;
    }
    else
    {
      v5 = 1;
    }
  }
  else
  {
    v5 = a1 != 0;
  }
  return v5 & 1;
}

uint64_t PropertyList.set(_:)(uint64_t result)
{
  uint64_t *v1;
  uint64_t v2;

  v2 = result;
  if (!*v1)
  {
    if (!result)
      return result;
    goto LABEL_6;
  }
  if (!result || *v1 != result)
  {
LABEL_6:
    swift_retain();
    result = swift_release();
    *v1 = v2;
  }
  return result;
}

uint64_t PropertyList.init(data:)(uint64_t result)
{
  if (result)
  {
    type metadata accessor for PropertyList.Element();
    return swift_dynamicCastClassUnconditional();
  }
  return result;
}

void PropertyList.forEach<A>(keyType:_:)(int a1, uint64_t a2, uint64_t a3, uint64_t a4, Swift::Int hashValue, uint64_t a6)
{
  SwiftUI::BloomFilter v10;
  _QWORD v11[7];
  uint64_t v12;

  if (a4)
  {
    v10.value = BloomFilter.init(hashValue:)(hashValue).value;
    MEMORY[0x24BDAC7A8](v10.value);
    v11[2] = hashValue;
    v11[3] = a6;
    v11[4] = a2;
    v11[5] = a3;
    PropertyList.Element.forEach(filter:_:)(&v12, (void (*)(_QWORD *, BOOL *))partial apply for closure #1 in PropertyList.forEach<A>(keyType:_:), (uint64_t)v11);
  }
}

uint64_t PropertyList.merge(_:)(uint64_t result)
{
  SwiftUI::BloomFilter *v1;
  SwiftUI::BloomFilter *v2;
  uint64_t v3;
  _QWORD *value;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  SwiftUI::BloomFilter v13;
  uint64_t v14;
  uint64_t (*v15)(uint64_t, uint64_t);
  uint64_t v16;

  v2 = v1;
  v3 = result;
  value = (_QWORD *)v1->value;
  if (value)
  {
    if (result && value != (_QWORD *)result)
    {
      swift_retain_n();
      result = swift_retain_n();
      v5 = 0;
      v6 = value;
      v7 = value;
      v8 = v3;
      v9 = v3;
      do
      {
        if (*(_DWORD *)(v8 + 48) >= *((_DWORD *)v7 + 12))
        {
          if (__OFADD__(v5++, 1))
          {
            __break(1u);
            return result;
          }
          v11 = *(_QWORD *)(v8 + 32);
          swift_retain();
          swift_release();
          if (!v11)
          {
LABEL_19:
            swift_release();
            swift_release();
            goto LABEL_20;
          }
          swift_release();
          result = swift_retain();
          v8 = v11;
          v9 = v11;
        }
        else
        {
          swift_release();
          v6 = (_QWORD *)v7[4];
          if (!v6)
            goto LABEL_19;
          swift_retain_n();
          result = swift_release();
          v7 = v6;
        }
      }
      while (v7 != (_QWORD *)v8);
      swift_release_n();
      if (!v9 || v6 != (_QWORD *)v9)
      {
LABEL_20:
        if (value[3])
        {
          type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, (unint64_t *)&lazy cache variable for type metadata for TypedElement<EmptyKey>, (uint64_t)&type metadata for EmptyKey, (uint64_t)&protocol witness table for EmptyKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for TypedElement);
          swift_allocObject();
          swift_retain();
          v13.value = PropertyList.Element.init(keyType:before:after:)((Swift::Int)&type metadata for EmptyKey, v3, (uint64_t)value).value;
        }
        else
        {
          v14 = value[4];
          v15 = *(uint64_t (**)(uint64_t, uint64_t))(*value + 216);
          swift_retain();
          v16 = swift_retain();
          v13.value = v15(v16, v14);
          swift_release();
          swift_release();
          swift_release();
        }
        swift_release();
        result = swift_release();
        v2->value = v13.value;
        return result;
      }
      if (v6 != (_QWORD *)v3)
      {
        if (v6 == value)
        {
          swift_retain();
          result = swift_release_n();
          v2->value = v3;
          return result;
        }
        if (v5)
        {
          v12 = type metadata accessor for PropertyList.Element();
          MEMORY[0x24BDAC7A8](v12);
          AGTupleWithBuffer();
          swift_release();
          return swift_release();
        }
      }
      return swift_release_n();
    }
  }
  else
  {
    v2->value = result;
    return swift_retain();
  }
  return result;
}

uint64_t protocol witness for static PropertyKey.valuesEqual(_:_:) in conformance ImplicitRootType(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static PropertyKey.valuesEqual(_:_:) in conformance _GraphInputs.PrivacyReductionAccessibilityProviderKey(a1, a2, a3, a4, (unint64_t *)&lazy cache variable for type metadata for _VariadicView_AnyImplicitRoot.Type, &lazy cache variable for type metadata for _VariadicView_AnyImplicitRoot);
}

uint64_t protocol witness for static PropertyKey.valuesEqual(_:_:) in conformance ReferenceDateInput()
{
  type metadata accessor for PropertyList.Element?(0, &lazy cache variable for type metadata for Date?, 255, (void (*)(uint64_t))MEMORY[0x24BDCE900]);
  return static WeakAttribute.== infix(_:_:)();
}

uint64_t protocol witness for static PropertyKey.valuesEqual(_:_:) in conformance EventBindingBridgeFactoryInput(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static PropertyKey.valuesEqual(_:_:) in conformance _GraphInputs.ImageRepresentationKey(a1, a2, a3, a4, (void (*)(_QWORD))type metadata accessor for EventBindingBridgeFactory.Type?);
}

uint64_t protocol witness for static PropertyKey.valuesEqual(_:_:) in conformance <> InvertedViewInputPredicate<A>()
{
  return static PropertyKey<>.valuesEqual(_:_:)() & 1;
}

uint64_t PropertyList.Tracker.initializeValues(from:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  if (a1)
    v2 = *(_QWORD *)(a1 + 64);
  else
    v2 = 0;
  v3 = *(_QWORD *)(v1 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v3 + 16));
  *(_QWORD *)(v3 + 24) = v2;
  os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 16));
  return swift_release();
}

uint64_t PropertyList.id.getter@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  if (result)
    *a2 = *(_QWORD *)(result + 64);
  else
    *a2 = 0;
  return result;
}

uint64_t PropertyList.Tracker.invalidateAllValues(from:to:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  v5 = *(_QWORD *)(v2 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v5 + 16));
  v6 = *(_QWORD *)(v5 + 24);
  if (a1)
  {
    if (v6 != *(_QWORD *)(a1 + 64))
      goto LABEL_12;
    if (!a2)
    {
      if (v6)
      {
        move(_:to:)(v5 + 32, v5 + 48);
        move(_:to:)(v5 + 40, v5 + 48);
        *(_QWORD *)(v5 + 24) = 0;
      }
      goto LABEL_12;
    }
  }
  else
  {
    if (v6)
      v7 = 1;
    else
      v7 = a2 == 0;
    if (v7)
      goto LABEL_12;
  }
  if (v6 != *(_QWORD *)(a2 + 64))
  {
    move(_:to:)(v5 + 32, v5 + 48);
    move(_:to:)(v5 + 40, v5 + 48);
    *(_QWORD *)(v5 + 24) = *(_QWORD *)(a2 + 64);
  }
LABEL_12:
  os_unfair_lock_unlock((os_unfair_lock_t)(v5 + 16));
  return swift_release();
}

uint64_t PropertyList.Tracker.formUnion(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  os_unfair_lock_s *v7;
  _QWORD v9[4];
  char v10;

  v2 = *(_QWORD *)(a1 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v2 + 16));
  v3 = *(_QWORD *)(v2 + 32);
  v4 = *(_QWORD *)(v2 + 40);
  v5 = *(_QWORD *)(v2 + 48);
  v6 = *(_BYTE *)(v2 + 56);
  v9[0] = *(_QWORD *)(v2 + 24);
  v9[1] = v3;
  v9[2] = v4;
  v9[3] = v5;
  v7 = *(os_unfair_lock_s **)(v1 + 16);
  v10 = v6;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  os_unfair_lock_lock(v7 + 4);
  TrackerData.formUnion(_:)((uint64_t)v9);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  os_unfair_lock_unlock(v7 + 4);
  swift_release();
  os_unfair_lock_unlock((os_unfair_lock_t)(v2 + 16));
  return swift_release();
}

uint64_t PropertyList.Tracker.valueWithSecondaryLookup<A>(_:secondaryLookupHandler:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t AssociatedTypeWitness;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char v17;
  uint64_t v18;
  _UNKNOWN **v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28[2];
  uint64_t v29[3];
  uint64_t v30;
  _UNKNOWN **v31;

  v26 = a2;
  v27 = a5;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v10 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v12 = (char *)&v24 - v11;
  v13 = *(_QWORD *)(v5 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v13 + 16));
  v14 = *(_QWORD *)(v13 + 24);
  if (!a1)
  {
    if (!v14)
      goto LABEL_3;
LABEL_7:
    *(_BYTE *)(v13 + 56) = 1;
    PropertyList.valueWithSecondaryLookup<A>(_:)(v26, a1, a3, a4);
    goto LABEL_9;
  }
  if (v14 != *(_QWORD *)(a1 + 64))
    goto LABEL_7;
LABEL_3:
  v25 = swift_checkMetadataState();
  v15 = *(_QWORD *)(v13 + 32);
  if (*(_QWORD *)(v15 + 16) && (v16 = specialized __RawDictionaryStorage.find<A>(_:)(v25), (v17 & 1) != 0))
  {
    outlined init with copy of AnyTrackedValue(*(_QWORD *)(v15 + 56) + 40 * v16, (uint64_t)v28);
    outlined init with take of ScrollStateRequest(v28, (uint64_t)v29);
    v18 = v30;
    v19 = v31;
    __swift_project_boxed_opaque_existential_1(v29, v30);
    ((void (*)(uint64_t, uint64_t, _UNKNOWN **))v19[1])(AssociatedTypeWitness, v18, v19);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v29);
  }
  else
  {
    v20 = v27;
    PropertyList.valueWithSecondaryLookup<A>(_:)(v26, a1, a3, a4);
    (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, v20, AssociatedTypeWitness);
    v30 = type metadata accessor for SecondaryLookupTrackedValue(0, a3, a4, v21);
    v31 = &protocol witness table for SecondaryLookupTrackedValue<A>;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v29);
    SecondaryLookupTrackedValue.init(_:)((uint64_t)v12, (uint64_t)boxed_opaque_existential_1);
    specialized Dictionary.subscript.setter((uint64_t)v29, v25);
  }
LABEL_9:
  os_unfair_lock_unlock((os_unfair_lock_t)(v13 + 16));
  return swift_release();
}

uint64_t PropertyList.valueWithSecondaryLookup<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  _QWORD v7[7];
  uint64_t v8;

  v8 = a2;
  v7[2] = a3;
  v7[3] = a4;
  v7[4] = a2;
  v7[5] = a1;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return _ss20withExtendedLifetimeyq0_x_q0_yq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v8, (uint64_t)partial apply for closure #1 in PropertyList.valueWithSecondaryLookup<A>(_:), (uint64_t)v7, (uint64_t)&type metadata for PropertyList, MEMORY[0x24BEE4078], AssociatedTypeWitness, MEMORY[0x24BEE40A8], v5);
}

uint64_t PropertyList.Tracker.value<A>(_:for:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t AssociatedTypeWitness;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char v17;
  uint64_t v18;
  _UNKNOWN **v19;
  uint64_t v20;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v22;
  _QWORD v24[2];
  __int128 v25[2];
  uint64_t v26[3];
  uint64_t v27;
  _UNKNOWN **v28;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v10 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v12 = (char *)v24 - v11;
  v13 = *(_QWORD *)(v4 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v13 + 16));
  v14 = *(_QWORD *)(v13 + 24);
  if (!a1)
  {
    if (!v14)
      goto LABEL_3;
LABEL_7:
    *(_BYTE *)(v13 + 56) = 1;
    PropertyList.subscript.getter(a2, a1, a2, a3);
    goto LABEL_9;
  }
  if (v14 != *(_QWORD *)(a1 + 64))
    goto LABEL_7;
LABEL_3:
  v15 = *(_QWORD *)(v13 + 32);
  v24[1] = v13 + 32;
  if (*(_QWORD *)(v15 + 16) && (v16 = specialized __RawDictionaryStorage.find<A>(_:)(a2), (v17 & 1) != 0))
  {
    outlined init with copy of AnyTrackedValue(*(_QWORD *)(v15 + 56) + 40 * v16, (uint64_t)v25);
    outlined init with take of ScrollStateRequest(v25, (uint64_t)v26);
    v18 = v27;
    v19 = v28;
    __swift_project_boxed_opaque_existential_1(v26, v27);
    ((void (*)(uint64_t, uint64_t, _UNKNOWN **))v19[1])(AssociatedTypeWitness, v18, v19);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v26);
  }
  else
  {
    PropertyList.subscript.getter(a2, a1, a2, a3);
    (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, a4, AssociatedTypeWitness);
    v27 = type metadata accessor for TrackedValue(0, a2, a3, v20);
    v28 = &protocol witness table for TrackedValue<A>;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v26);
    v22 = swift_getAssociatedTypeWitness();
    (*(void (**)(uint64_t *, char *, uint64_t))(*(_QWORD *)(v22 - 8) + 32))(boxed_opaque_existential_1, v12, v22);
    specialized Dictionary.subscript.setter((uint64_t)v26, a2);
  }
LABEL_9:
  os_unfair_lock_unlock((os_unfair_lock_t)(v13 + 16));
  return swift_release();
}

uint64_t PropertyList.Tracker.invalidateValue<A>(for:from:to:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  char v10;
  BOOL v11;
  _QWORD *v12;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  _QWORD *v18;
  __int128 v19;
  uint64_t v20;
  _BYTE v21[40];

  v8 = *(_QWORD *)(v4 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v8 + 16));
  v9 = *(_QWORD *)(v8 + 24);
  if (a2)
  {
    if (v9 != *(_QWORD *)(a2 + 64))
      goto LABEL_22;
    if (!a3)
    {
      if (!v9)
        goto LABEL_22;
      v10 = 1;
      goto LABEL_12;
    }
  }
  else
  {
    if (v9)
      v11 = 1;
    else
      v11 = a3 == 0;
    if (v11)
      goto LABEL_22;
  }
  if (v9 == *(_QWORD *)(a3 + 64))
    goto LABEL_22;
  v10 = 0;
LABEL_12:
  specialized Dictionary._Variant.removeValue(forKey:)(a4, (uint64_t)&v19);
  if (v20)
  {
    outlined init with take of ScrollStateRequest(&v19, (uint64_t)v21);
    outlined init with copy of AnyTrackedValue((uint64_t)v21, (uint64_t)&v19);
    v12 = *(_QWORD **)(v8 + 48);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(_QWORD *)(v8 + 48) = v12;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v12[2] + 1, 1, v12);
      *(_QWORD *)(v8 + 48) = v12;
    }
    v15 = v12[2];
    v14 = v12[3];
    v16 = v15 + 1;
    if (v15 >= v14 >> 1)
    {
      v18 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v14 > 1), v15 + 1, 1, v12);
      v16 = v15 + 1;
      v12 = v18;
      *(_QWORD *)(v8 + 48) = v18;
    }
    v12[2] = v16;
    outlined init with take of ScrollStateRequest(&v19, (uint64_t)&v12[5 * v15 + 4]);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v21);
  }
  else
  {
    outlined destroy of AnyTrackedValue?((uint64_t)&v19);
  }
  move(_:to:)(v8 + 40, v8 + 48);
  if ((v10 & 1) != 0)
    *(_QWORD *)(v8 + 24) = 0;
  else
    *(_QWORD *)(v8 + 24) = *(_QWORD *)(a3 + 64);
LABEL_22:
  os_unfair_lock_unlock((os_unfair_lock_t)(v8 + 16));
  return swift_release();
}

uint64_t PropertyList.Tracker.derivedValue<A>(_:for:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t AssociatedTypeWitness;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char v17;
  uint64_t v18;
  _UNKNOWN **v19;
  void (*v20)(uint64_t, uint64_t, uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  __int128 v28[2];
  uint64_t v29[3];
  uint64_t v30;
  _UNKNOWN **v31;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v10 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v12 = (char *)&v26 - v11;
  v13 = *(_QWORD *)(v4 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v13 + 16));
  v14 = *(_QWORD *)(v13 + 24);
  if (!a1)
  {
    if (!v14)
      goto LABEL_3;
LABEL_7:
    *(_BYTE *)(v13 + 56) = 1;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(a3 + 24))(a1, a2, a3);
    goto LABEL_9;
  }
  if (v14 != *(_QWORD *)(a1 + 64))
    goto LABEL_7;
LABEL_3:
  v27 = a4;
  v15 = *(_QWORD *)(v13 + 40);
  if (*(_QWORD *)(v15 + 16) && (v16 = specialized __RawDictionaryStorage.find<A>(_:)(a2), (v17 & 1) != 0))
  {
    outlined init with copy of AnyTrackedValue(*(_QWORD *)(v15 + 56) + 40 * v16, (uint64_t)v28);
    outlined init with take of ScrollStateRequest(v28, (uint64_t)v29);
    v18 = v30;
    v19 = v31;
    __swift_project_boxed_opaque_existential_1(v29, v30);
    ((void (*)(uint64_t, uint64_t, _UNKNOWN **))v19[1])(AssociatedTypeWitness, v18, v19);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v29);
  }
  else
  {
    v20 = *(void (**)(uint64_t, uint64_t, uint64_t))(a3 + 24);
    v26 = v13 + 40;
    v21 = v27;
    v20(a1, a2, a3);
    (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, v21, AssociatedTypeWitness);
    v30 = type metadata accessor for DerivedValue(0, a2, a3, v22);
    v31 = &protocol witness table for DerivedValue<A>;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v29);
    v24 = swift_getAssociatedTypeWitness();
    (*(void (**)(uint64_t *, char *, uint64_t))(*(_QWORD *)(v24 - 8) + 32))(boxed_opaque_existential_1, v12, v24);
    specialized Dictionary.subscript.setter((uint64_t)v29, a2);
  }
LABEL_9:
  os_unfair_lock_unlock((os_unfair_lock_t)(v13 + 16));
  return swift_release();
}

uint64_t PropertyList.description.getter(_QWORD *a1)
{
  Swift::String v1;
  uint64_t v3;
  uint64_t v4;
  _QWORD v5[2];

  v5[0] = 91;
  v5[1] = 0xE100000000000000;
  v4 = 0;
  if (a1)
  {
    v3 = 0;
    specialized PropertyList.Element.forEach(filter:_:)(&v3, a1, &v4, (uint64_t)v5);
  }
  v1._countAndFlagsBits = 93;
  v1._object = (void *)0xE100000000000000;
  String.append(_:)(v1);
  return v5[0];
}

uint64_t protocol witness for static PropertyKey.valuesEqual(_:_:) in conformance _GraphInputs.GestureAccessibilityProviderKey(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static PropertyKey.valuesEqual(_:_:) in conformance _GraphInputs.PrivacyReductionAccessibilityProviderKey(a1, a2, a3, a4, &lazy cache variable for type metadata for GestureAccessibilityProvider.Type, &lazy cache variable for type metadata for GestureAccessibilityProvider);
}

uint64_t protocol witness for static PropertyKey.valuesEqual(_:_:) in conformance TextRendererInput()
{
  type metadata accessor for TextRendererBoxBase();
  return static WeakAttribute.== infix(_:_:)();
}

uint64_t protocol witness for static PropertyKey.valuesEqual(_:_:) in conformance ReusableInputs()
{
  return AGCompareValues();
}

uint64_t protocol witness for static PropertyKey.valuesEqual(_:_:) in conformance _GraphInputs.ImageAccessibilityProviderKey(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static PropertyKey.valuesEqual(_:_:) in conformance _GraphInputs.PrivacyReductionAccessibilityProviderKey(a1, a2, a3, a4, &lazy cache variable for type metadata for ImageAccessibilityProvider.Type, &lazy cache variable for type metadata for ImageAccessibilityProvider);
}

uint64_t protocol witness for static PropertyKey.valuesEqual(_:_:) in conformance GestureContainerFactoryInput(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static PropertyKey.valuesEqual(_:_:) in conformance _GraphInputs.ImageRepresentationKey(a1, a2, a3, a4, (void (*)(_QWORD))type metadata accessor for GestureContainerFactory.Type?);
}

uint64_t protocol witness for static PropertyKey.valuesEqual(_:_:) in conformance _GraphInputs.ImageRepresentationKey(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(_QWORD))
{
  a5(0);
  return AGCompareValues();
}

uint64_t PropertyList.elements.setter(uint64_t a1)
{
  _QWORD *v1;
  uint64_t result;

  result = swift_release();
  *v1 = a1;
  return result;
}

uint64_t (*PropertyList.elements.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t closure #1 in PropertyList.subscript.getter@<X0>(Swift::Int hashValue@<X1>, uint64_t a2@<X0>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t AssociatedTypeWitness;
  uint64_t v14;

  BloomFilter.init(hashValue:)(hashValue);
  v10 = find1<A>(_:key:filter:)(a2, hashValue, &v14, a3, a4);
  if (!v10)
    return (*(uint64_t (**)(uint64_t, uint64_t))(a4 + 16))(a3, a4);
  v11 = v10 + *(_QWORD *)(*(_QWORD *)v10 + 248);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 16))(a5, v11, AssociatedTypeWitness);
}

uint64_t closure #1 in PropertyList.subscript.setter(uint64_t *a1, Swift::Int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v11 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v13 = (char *)&v21 - v12;
  v14 = *a1;
  BloomFilter.init(hashValue:)(a2);
  v15 = find1<A>(_:key:filter:)(v14, a2, &v22, a4, a5);
  if (!v15
    || (v17 = v15 + *(_QWORD *)(*(_QWORD *)v15 + 248),
        v18 = swift_getAssociatedTypeWitness(),
        (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 16))(v13, v17, v18),
        LOBYTE(v17) = (*(uint64_t (**)(uint64_t, char *, uint64_t, uint64_t))(a5 + 24))(a3, v13, a4, a5),
        result = (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v13, AssociatedTypeWitness),
        (v17 & 1) == 0))
  {
    type metadata accessor for TypedElement(0, a4, a5, v16);
    v20 = *a1;
    swift_allocObject();
    swift_retain();
    *(SwiftUI::BloomFilter *)a1 = specialized TypedElement.init(value:before:after:)(a3, 0, v20);
    return swift_release();
  }
  return result;
}

void (*PropertyList.subscript.modify(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4))(Swift::Int **a1, char a2)
{
  uint64_t *v4;
  _QWORD *v9;
  uint64_t AssociatedTypeWitness;
  uint64_t v11;
  size_t v12;

  v9 = malloc(0x40uLL);
  *a1 = v9;
  v9[2] = a4;
  v9[3] = v4;
  *v9 = a2;
  v9[1] = a3;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v9[4] = AssociatedTypeWitness;
  v11 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v9[5] = v11;
  v12 = *(_QWORD *)(v11 + 64);
  v9[6] = malloc(v12);
  v9[7] = malloc(v12);
  PropertyList.subscript.getter(a2, *v4, a3, a4);
  return PropertyList.subscript.modify;
}

void PropertyList.subscript.modify(Swift::Int **a1, char a2)
{
  Swift::Int *v2;
  void *v3;
  void *v4;
  Swift::Int v5;
  Swift::Int v6;
  uint64_t v7;
  uint64_t v8;
  Swift::Int v9;
  void (*v10)(void *, Swift::Int);

  v2 = *a1;
  v3 = (void *)(*a1)[6];
  v4 = (void *)(*a1)[7];
  v5 = (*a1)[4];
  v6 = (*a1)[5];
  v7 = (*a1)[2];
  v9 = **a1;
  v8 = (*a1)[1];
  if ((a2 & 1) != 0)
  {
    (*(void (**)(Swift::Int, void *, Swift::Int))(v6 + 16))((*a1)[6], v4, v5);
    specialized PropertyList.subscript.setter((uint64_t)v3, v9, v8, v7);
    v10 = *(void (**)(void *, Swift::Int))(v6 + 8);
    v10(v3, v5);
  }
  else
  {
    specialized PropertyList.subscript.setter((*a1)[7], v9, v8, v7);
    v10 = *(void (**)(void *, Swift::Int))(v6 + 8);
  }
  v10(v4, v5);
  free(v4);
  free(v3);
  free(v2);
}

uint64_t closure #1 in PropertyList.valueWithSecondaryLookup<A>(_:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t AssociatedConformanceWitness;
  uint64_t AssociatedTypeWitness;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  Swift::Int v13;
  Swift::Int v14;
  uint64_t v15;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v20 = a5;
  v18 = a1;
  v19 = a2;
  swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v9 = type metadata accessor for Optional();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v17 - v11;
  v13 = swift_getAssociatedTypeWitness();
  BloomFilter.init(hashValue:)(v13);
  v14 = swift_getAssociatedTypeWitness();
  BloomFilter.init(hashValue:)(v14);
  findValueWithSecondaryLookup<A>(_:secondaryLookupHandler:filter:secondaryFilter:)(v18, v19, &v22, &v21, a3, a4, v12);
  v15 = *(_QWORD *)(AssociatedTypeWitness - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v12, 1, AssociatedTypeWitness) != 1)
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v15 + 32))(v20, v12, AssociatedTypeWitness);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  swift_checkMetadataState();
  return (*(uint64_t (**)(void))(AssociatedConformanceWitness + 16))();
}

uint64_t findValueWithSecondaryLookup<A>(_:secondaryLookupHandler:filter:secondaryFilter:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, char *a7@<X8>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  __n128 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  void (*v44)(char *, char *, uint64_t *);
  char *v45;
  uint64_t v47;
  char *v48;
  char *v49;
  char *v50;
  char *v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;

  v55 = a3;
  v56 = a2;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  v57 = AssociatedTypeWitness;
  v13 = swift_getAssociatedTypeWitness();
  v53 = *(_QWORD *)(v13 - 8);
  v54 = v13;
  MEMORY[0x24BDAC7A8](v13);
  v52 = (char *)&v47 - v14;
  v15 = swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  v16 = swift_getAssociatedTypeWitness();
  v17 = type metadata accessor for Optional();
  v58 = *(_QWORD *)(v17 - 8);
  v59 = v17;
  MEMORY[0x24BDAC7A8](v17);
  v51 = (char *)&v47 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v19);
  v21 = (char *)&v47 - v20;
  v60 = *(_QWORD *)(v16 - 8);
  MEMORY[0x24BDAC7A8](v22);
  v26.n128_f64[0] = MEMORY[0x24BDAC7A8](v23);
  if (a1)
  {
    v48 = v25;
    v49 = (char *)&v47 - v24;
    v50 = a7;
    v27 = *v55;
    v28 = *a4;
    v55 = (uint64_t *)v16;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          v29 = a1[7];
          v30 = v27 & ~v29;
          v31 = v29 & v28;
          if (!v30 || v31 == v28)
            break;
          a1 = (_QWORD *)a1[5];
          if (!a1)
            goto LABEL_18;
        }
        v33 = a1[3];
        if (v33)
        {
          v61 = v28;
          v62 = v27;
          findValueWithSecondaryLookup<A>(_:secondaryLookupHandler:filter:secondaryFilter:)(v33, v56, &v62, &v61, a5, a6, v26);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v60 + 48))(v21, 1, v16) != 1)
          {
            v44 = *(void (**)(char *, char *, uint64_t *))(v60 + 32);
            v45 = v49;
            v44(v49, v21, v55);
            goto LABEL_23;
          }
          (*(void (**)(char *, uint64_t))(v58 + 8))(v21, v59);
        }
        v34 = a1[2];
        if (v34 == swift_checkMetadataState())
        {
          v41 = (char *)a1 + *(_QWORD *)(*a1 + 248);
          v42 = swift_getAssociatedTypeWitness();
          a7 = v50;
          v43 = v41;
          v16 = (uint64_t)v55;
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v42 - 8) + 16))(v50, v43, v42);
          goto LABEL_24;
        }
        if (v34 == swift_checkMetadataState())
          break;
        a1 = (_QWORD *)a1[4];
        if (!a1)
          goto LABEL_18;
      }
      v35 = v15;
      v36 = (char *)a1 + *(_QWORD *)(*a1 + 248);
      v37 = swift_getAssociatedTypeWitness();
      v38 = v52;
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v37 - 8) + 16))(v52, v36, v37);
      v16 = (uint64_t)v55;
      v39 = v51;
      (*(void (**)(char *, uint64_t, uint64_t))(a6 + 40))(v38, a5, a6);
      (*(void (**)(char *, uint64_t))(v53 + 8))(v38, v54);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v60 + 48))(v39, 1, v16) != 1)
        break;
      (*(void (**)(char *, uint64_t))(v58 + 8))(v39, v59);
      v15 = v35;
      a1 = (_QWORD *)a1[4];
      if (!a1)
      {
LABEL_18:
        v40 = 1;
        a7 = v50;
        return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v60 + 56))(a7, v40, 1, v16, v26);
      }
    }
    v44 = *(void (**)(char *, char *, uint64_t *))(v60 + 32);
    v45 = v48;
    v44(v48, v39, v55);
LABEL_23:
    a7 = v50;
    v44(v50, v45, v55);
    v16 = (uint64_t)v55;
LABEL_24:
    v40 = 0;
  }
  else
  {
    v40 = 1;
  }
  return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v60 + 56))(a7, v40, 1, v16, v26);
}

SwiftUI::BloomFilter PropertyList.prependValue<A>(_:for:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v7;
  SwiftUI::BloomFilter result;

  v5 = v4;
  type metadata accessor for TypedElement(0, a3, a4, a4);
  v7 = *v5;
  swift_allocObject();
  result.value = specialized TypedElement.init(value:before:after:)(a1, 0, v7).value;
  *v5 = result.value;
  return result;
}

uint64_t PropertyList.mayNotBeEqual(to:ignoredTypes:)(unint64_t a1, uint64_t a2, unint64_t a3)
{
  BOOL v5;
  char v6;
  uint64_t v8;

  if (a3)
  {
    if (a1)
    {
      v8 = a2;
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
      v5 = compareLists(_:_:ignoredTypes:)(a3, a1, (uint64_t)&v8);
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      v6 = !v5;
    }
    else
    {
      v6 = 1;
    }
  }
  else
  {
    v6 = a1 != 0;
  }
  return v6 & 1;
}

BOOL PropertyList.isIdentical(to:)(uint64_t a1, uint64_t a2)
{
  _BOOL4 v2;

  v2 = a2 == a1;
  if (!a1)
    v2 = a2 == 0;
  if (a2)
    return v2;
  else
    return a1 == 0;
}

BOOL compareLists(_:_:ignoredTypes:)(unint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  uint64_t v6;

  if (*(_DWORD *)(a1 + 48) == *(_DWORD *)(a2 + 48))
  {
    v3 = a2;
    v4 = a1;
    if (a1 == a2)
      return 1;
    while (((*(uint64_t (**)(unint64_t, uint64_t))(*(_QWORD *)v4 + 208))(v3, a3) & 1) != 0)
    {
      v6 = *(_QWORD *)(v3 + 24);
      if (*(_QWORD *)(v4 + 24))
      {
        if (!v6 || (compareLists(_:_:ignoredTypes:)() & 1) == 0)
          return 0;
      }
      else if (v6)
      {
        return 0;
      }
      v4 = *(_QWORD *)(v4 + 32);
      v3 = *(_QWORD *)(v3 + 32);
      if (!v4 || !v3)
        return (v4 | v3) == 0;
      if (v4 == v3)
        return 1;
    }
  }
  return 0;
}

void closure #1 in PropertyList.forEach<A>(keyType:_:)(_QWORD *a1, uint64_t a2, void (*a3)(char *, uint64_t), uint64_t a4, uint64_t a5)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v10 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v12 = (char *)&v15 - v11;
  if (a1[2] == a5)
  {
    v13 = (char *)a1 + *(_QWORD *)(*a1 + 248);
    v14 = swift_getAssociatedTypeWitness();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v12, v13, v14);
    a3(v12, a2);
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, AssociatedTypeWitness);
  }
}

uint64_t closure #1 in PropertyList.merge(_:)(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t *a6)
{
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;

  if (type metadata accessor for PropertyList.Element() != a1)
  {
LABEL_15:
    __break(1u);
LABEL_16:
    __break(1u);
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  *(_QWORD *)a3 = a4;
  swift_retain();
  swift_release();
  v11 = *a5;
  if (*a5 < 0)
    goto LABEL_16;
  if (!v11)
    return swift_arrayDestroy();
  v12 = a2;
  while (*(_QWORD *)a3)
  {
    *v12 = *(_QWORD *)a3;
    if (!*(_QWORD *)a3)
      goto LABEL_19;
    *(_QWORD *)a3 = *(_QWORD *)(*(_QWORD *)a3 + 32);
    swift_retain();
    swift_retain();
    swift_release();
    ++v12;
    if (!--v11)
    {
      v13 = *a5;
      if (*a5 < 0)
        goto LABEL_17;
      if (v13)
      {
        v14 = *a5;
        while (v13 >= v14)
        {
          v15 = v14 - 1;
          v16 = *a6;
          v17 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2[v14 - 1] + 216);
          swift_retain();
          swift_retain();
          v18 = swift_retain();
          v19 = v17(v18, v16);
          swift_release();
          swift_release();
          swift_release();
          *a6 = v19;
          swift_release();
          v14 = v15;
          if (!v15)
            return swift_arrayDestroy();
        }
        __break(1u);
        __break(1u);
        goto LABEL_15;
      }
      return swift_arrayDestroy();
    }
  }
LABEL_18:
  __break(1u);
LABEL_19:
  __break(1u);
  return swift_arrayDestroy();
}

uint64_t PropertyList.merging(_:)(uint64_t a1, uint64_t a2)
{
  swift_retain();
  PropertyList.merge(_:)(a1);
  return a2;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance PropertyList()
{
  _QWORD **v0;
  _QWORD *v1;
  Swift::String v2;
  uint64_t v4;
  uint64_t v5;
  _QWORD v6[2];

  v1 = *v0;
  v6[0] = 91;
  v6[1] = 0xE100000000000000;
  v5 = 0;
  if (v1)
  {
    v4 = 0;
    specialized PropertyList.Element.forEach(filter:_:)(&v4, v1, &v5, (uint64_t)v6);
  }
  v2._countAndFlagsBits = 93;
  v2._object = (void *)0xE100000000000000;
  String.append(_:)(v2);
  return v6[0];
}

uint64_t TrackedValue.hasMatchingValue(in:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v11;

  v5 = *(_QWORD *)(a2 + 16);
  v4 = *(_QWORD *)(a2 + 24);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v7 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v9 = (char *)&v11 - v8;
  PropertyList.subscript.getter(v5, a1, v5, v4);
  LOBYTE(a1) = (*(uint64_t (**)(uint64_t, char *, uint64_t, uint64_t))(v4 + 24))(v2, v9, v5, v4);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, AssociatedTypeWitness);
  return a1 & 1;
}

uint64_t protocol witness for AnyTrackedValue.unwrap<A>() in conformance TrackedValue<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return TrackedValue.unwrap<A>()(a1, a2);
}

uint64_t TrackedValue.unwrap<A>()@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  char *v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;

  v3 = v2;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v7 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v8 = *(_QWORD *)(v7 + 64);
  v9 = MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v11 = (char *)&v14 - v10;
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t, double))(v7 + 16))((char *)&v14 - v10, v3, AssociatedTypeWitness, v9);
  v13 = *(_QWORD *)(a1 - 8);
  if (v8 == *(_QWORD *)(v13 + 64))
  {
    (*(void (**)(uint64_t, char *, uint64_t))(v13 + 16))(a2, v11, a1);
    return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v11, AssociatedTypeWitness);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t DerivedValue.hasMatchingValue(in:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t AssociatedTypeWitness;
  uint64_t v6;
  double v7;
  uint64_t v8;
  char *v9;
  char v10;
  uint64_t v12;

  v4 = *(_QWORD *)(a2 + 16);
  v3 = *(_QWORD *)(a2 + 24);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v6 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v7 = MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v9 = (char *)&v12 - v8;
  (*(void (**)(uint64_t, uint64_t, uint64_t, double))(v3 + 24))(a1, v4, v3, v7);
  swift_getAssociatedConformanceWitness();
  v10 = dispatch thunk of static Equatable.== infix(_:_:)();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v9, AssociatedTypeWitness);
  return v10 & 1;
}

uint64_t protocol witness for AnyTrackedValue.unwrap<A>() in conformance DerivedValue<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return TrackedValue.unwrap<A>()(a1, a2);
}

uint64_t SecondaryLookupTrackedValue.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t AssociatedTypeWitness;

  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 32))(a2, a1, AssociatedTypeWitness);
}

uint64_t SecondaryLookupTrackedValue.unwrap<A>()@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  char *v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;

  v3 = v2;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v7 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v8 = *(_QWORD *)(v7 + 64);
  v9 = MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v11 = (char *)&v14 - v10;
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t, double))(v7 + 16))((char *)&v14 - v10, v3, AssociatedTypeWitness, v9);
  v13 = *(_QWORD *)(a1 - 8);
  if (v8 == *(_QWORD *)(v13 + 64))
  {
    (*(void (**)(uint64_t, char *, uint64_t))(v13 + 16))(a2, v11, a1);
    return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v11, AssociatedTypeWitness);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t SecondaryLookupTrackedValue.hasMatchingValue(in:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t AssociatedConformanceWitness;
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v12;

  v5 = *(_QWORD *)(a2 + 16);
  v4 = *(_QWORD *)(a2 + 24);
  swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v8 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v10 = (char *)&v12 - v9;
  PropertyList.valueWithSecondaryLookup<A>(_:)(v5, a1, v5, v4);
  swift_checkMetadataState();
  LOBYTE(a1) = (*(uint64_t (**)(uint64_t, char *))(AssociatedConformanceWitness + 24))(v2, v10);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, AssociatedTypeWitness);
  return a1 & 1;
}

uint64_t protocol witness for AnyTrackedValue.unwrap<A>() in conformance SecondaryLookupTrackedValue<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return SecondaryLookupTrackedValue.unwrap<A>()(a1, a2);
}

__n128 property wrapper backing initializer of PropertyList.Tracker.data@<Q0>(uint64_t a1@<X0>, __n128 **a2@<X8>)
{
  unint64_t v4;
  unint64_t v5;
  unsigned __int8 v6;
  __n128 *v7;
  __n128 result;

  v4 = *(_QWORD *)a1;
  v5 = *(_QWORD *)(a1 + 24);
  v6 = *(_BYTE *)(a1 + 32);
  type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for AtomicBuffer<TrackerData>, (uint64_t)&type metadata for TrackerData, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for AtomicBuffer);
  v7 = (__n128 *)swift_allocObject();
  v7[1].n128_u32[0] = 0;
  v7[1].n128_u64[1] = v4;
  result = *(__n128 *)(a1 + 8);
  v7[2] = result;
  v7[3].n128_u64[0] = v5;
  v7[3].n128_u8[8] = v6;
  *a2 = v7;
  return result;
}

uint64_t PropertyList.Tracker.init()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for AtomicBuffer<TrackerData>, (uint64_t)&type metadata for TrackerData, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for AtomicBuffer);
  v1 = swift_allocObject();
  *(_DWORD *)(v1 + 16) = 0;
  v2 = MEMORY[0x24BEE4B00];
  v3 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v1 + 24) = 0;
  *(_QWORD *)(v1 + 32) = v2;
  *(_QWORD *)(v1 + 40) = v2;
  *(_QWORD *)(v1 + 48) = v3;
  *(_BYTE *)(v1 + 56) = 0;
  *(_QWORD *)(v0 + 16) = v1;
  return v0;
}

uint64_t TrackerData.formUnion(_:)(uint64_t result)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  BOOL v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  char isUniquelyReferenced_nonNull_native;
  char v10;
  uint64_t v11;
  uint64_t v12;

  v2 = *(_QWORD *)result;
  v3 = *v1;
  if (*(_QWORD *)result)
    v4 = v3 == v2;
  else
    v4 = 1;
  if (!v4)
  {
    v5 = *(_QWORD *)(result + 8);
    v6 = *(_QWORD *)(result + 16);
    v7 = *(_QWORD *)(result + 24);
    v8 = *(_BYTE *)(result + 32);
    if (v3)
    {
      *v1 = v2;
      swift_bridgeObjectRetain();
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v12 = v1[1];
      v1[1] = 0x8000000000000000;
      specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(v5, (uint64_t)specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A, @in_guaranteed B) -> (@out A, @out B), 0, isUniquelyReferenced_nonNull_native, &v12);
      v1[1] = v12;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      v10 = swift_isUniquelyReferenced_nonNull_native();
      v12 = v1[2];
      v1[2] = 0x8000000000000000;
      specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(v6, (uint64_t)specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A, @in_guaranteed B) -> (@out A, @out B), 0, v10, &v12);
      v1[2] = v12;
      swift_bridgeObjectRelease();
      v11 = swift_bridgeObjectRetain();
      result = specialized Array.append<A>(contentsOf:)(v11);
      *((_BYTE *)v1 + 32) = (*((_BYTE *)v1 + 32) | v8) & 1;
    }
    else
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      *v1 = v2;
      v1[1] = v5;
      v1[2] = v6;
      v1[3] = v7;
      *((_BYTE *)v1 + 32) = v8;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      return swift_bridgeObjectRetain();
    }
  }
  return result;
}

uint64_t PropertyList.Tracker.deinit()
{
  uint64_t v0;

  swift_release();
  return v0;
}

uint64_t PropertyList.Tracker.__deallocating_deinit()
{
  swift_release();
  return swift_deallocClassInstance();
}

uint64_t move(_:to:)(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  int64_t v5;
  int64_t v6;
  uint64_t *v7;
  _QWORD *isUniquelyReferenced_nonNull_native;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  unint64_t v22;
  char v23;
  uint64_t v24;
  int64_t v25;
  __int128 v26[3];
  uint64_t v27;
  __int128 v28;
  uint64_t v29;

  v2 = *(_QWORD *)(*(_QWORD *)result + 16);
  if (!v2)
    return result;
  v4 = *(_QWORD **)a2;
  v5 = *(_QWORD *)(*(_QWORD *)a2 + 16);
  v6 = v5 + v2;
  if (__OFADD__(v5, v2))
    goto LABEL_43;
  v7 = (uint64_t *)result;
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native();
  if (!(_DWORD)isUniquelyReferenced_nonNull_native || v6 > v4[3] >> 1)
  {
    if (v5 <= v6)
      v9 = v6;
    else
      v9 = v5;
    v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v9, 0, v4);
  }
  *(_QWORD *)a2 = v4;
  v10 = *v7;
  v24 = *v7 + 64;
  v11 = 1 << *(_BYTE *)(*v7 + 32);
  v12 = -1;
  if (v11 < 64)
    v12 = ~(-1 << v11);
  v13 = v12 & *(_QWORD *)(*v7 + 64);
  v25 = (unint64_t)(v11 + 63) >> 6;
  result = swift_bridgeObjectRetain();
  v14 = 0;
  if (!v13)
    goto LABEL_14;
LABEL_12:
  v15 = __clz(__rbit64(v13));
  v13 &= v13 - 1;
  v16 = v15 | (v14 << 6);
LABEL_13:
  v17 = *(_QWORD *)(v10 + 56);
  *(_QWORD *)&v26[0] = *(_QWORD *)(*(_QWORD *)(v10 + 48) + 8 * v16);
  outlined init with copy of AnyTrackedValue(v17 + 40 * v16, (uint64_t)v26 + 8);
  while (1)
  {
    outlined init with take of (key: ObjectIdentifier, value: AnyTrackedValue)?((uint64_t)v26, (uint64_t)&v27);
    if (!v29)
    {
      swift_release();
      result = *v7;
      if (*(_QWORD *)(*v7 + 16))
      {
        v23 = swift_isUniquelyReferenced_nonNull_native();
        v27 = *v7;
        *v7 = 0x8000000000000000;
        type metadata accessor for _NativeDictionary<ObjectIdentifier, AnyTrackedValue>();
        _NativeDictionary.removeAll(isUnique:)(v23);
        *v7 = v27;
        return swift_bridgeObjectRelease();
      }
      return result;
    }
    outlined init with take of ScrollStateRequest(&v28, (uint64_t)v26);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v4[2] + 1, 1, v4);
    v22 = v4[2];
    v21 = v4[3];
    if (v22 >= v21 >> 1)
      v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v21 > 1), v22 + 1, 1, v4);
    v4[2] = v22 + 1;
    result = outlined init with take of ScrollStateRequest(v26, (uint64_t)&v4[5 * v22 + 4]);
    *(_QWORD *)a2 = v4;
    if (v13)
      goto LABEL_12;
LABEL_14:
    v18 = v14 + 1;
    if (__OFADD__(v14, 1))
      break;
    if (v18 < v25)
    {
      v19 = *(_QWORD *)(v24 + 8 * v18);
      if (v19)
        goto LABEL_17;
      v20 = v14 + 2;
      ++v14;
      if (v18 + 1 < v25)
      {
        v19 = *(_QWORD *)(v24 + 8 * v20);
        if (v19)
          goto LABEL_20;
        v14 = v18 + 1;
        if (v18 + 2 < v25)
        {
          v19 = *(_QWORD *)(v24 + 8 * (v18 + 2));
          if (v19)
          {
            v18 += 2;
            goto LABEL_17;
          }
          v20 = v18 + 3;
          v14 = v18 + 2;
          if (v18 + 3 < v25)
          {
            v19 = *(_QWORD *)(v24 + 8 * v20);
            if (!v19)
            {
              while (1)
              {
                v18 = v20 + 1;
                if (__OFADD__(v20, 1))
                  goto LABEL_44;
                if (v18 >= v25)
                {
                  v14 = v25 - 1;
                  goto LABEL_31;
                }
                v19 = *(_QWORD *)(v24 + 8 * v18);
                ++v20;
                if (v19)
                  goto LABEL_17;
              }
            }
LABEL_20:
            v18 = v20;
LABEL_17:
            v13 = (v19 - 1) & v19;
            v16 = __clz(__rbit64(v19)) + (v18 << 6);
            v14 = v18;
            goto LABEL_13;
          }
        }
      }
    }
LABEL_31:
    v13 = 0;
    memset(v26, 0, sizeof(v26));
  }
  __break(1u);
LABEL_43:
  __break(1u);
LABEL_44:
  __break(1u);
  return result;
}

uint64_t compare(_:against:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t result;
  int64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  int64_t v12;
  unint64_t v13;
  int64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  char v23[8];
  __int128 v24;
  uint64_t v25;

  v18 = a1 + 64;
  v4 = 1 << *(_BYTE *)(a1 + 32);
  v5 = -1;
  if (v4 < 64)
    v5 = ~(-1 << v4);
  v6 = v5 & *(_QWORD *)(a1 + 64);
  v19 = (unint64_t)(v4 + 63) >> 6;
  result = swift_bridgeObjectRetain();
  v8 = 0;
  if (!v6)
    goto LABEL_6;
LABEL_4:
  v9 = __clz(__rbit64(v6));
  v6 &= v6 - 1;
  v10 = v9 | (v8 << 6);
LABEL_5:
  v11 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)&v20 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8 * v10);
  outlined init with copy of AnyTrackedValue(v11 + 40 * v10, (uint64_t)&v20 + 8);
  while (1)
  {
    outlined init with take of (key: ObjectIdentifier, value: AnyTrackedValue)?((uint64_t)&v20, (uint64_t)v23);
    v15 = v25;
    if (!v25)
    {
      swift_release();
      return v15 == 0;
    }
    outlined init with take of ScrollStateRequest(&v24, (uint64_t)&v20);
    v16 = *((_QWORD *)&v21 + 1);
    v17 = v22;
    __swift_project_boxed_opaque_existential_1(&v20, *((uint64_t *)&v21 + 1));
    if (((*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v17 + 16))(a2, v16, v17) & 1) == 0)
      break;
    result = __swift_destroy_boxed_opaque_existential_1((uint64_t)&v20);
    if (v6)
      goto LABEL_4;
LABEL_6:
    v12 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
      __break(1u);
      goto LABEL_32;
    }
    if (v12 < v19)
    {
      v13 = *(_QWORD *)(v18 + 8 * v12);
      if (v13)
        goto LABEL_9;
      v14 = v8 + 2;
      ++v8;
      if (v12 + 1 < v19)
      {
        v13 = *(_QWORD *)(v18 + 8 * v14);
        if (v13)
          goto LABEL_12;
        v8 = v12 + 1;
        if (v12 + 2 < v19)
        {
          v13 = *(_QWORD *)(v18 + 8 * (v12 + 2));
          if (v13)
          {
            v12 += 2;
            goto LABEL_9;
          }
          v14 = v12 + 3;
          v8 = v12 + 2;
          if (v12 + 3 < v19)
          {
            v13 = *(_QWORD *)(v18 + 8 * v14);
            if (!v13)
            {
              while (1)
              {
                v12 = v14 + 1;
                if (__OFADD__(v14, 1))
                  break;
                if (v12 >= v19)
                {
                  v8 = v19 - 1;
                  goto LABEL_23;
                }
                v13 = *(_QWORD *)(v18 + 8 * v12);
                ++v14;
                if (v13)
                  goto LABEL_9;
              }
LABEL_32:
              __break(1u);
              return result;
            }
LABEL_12:
            v12 = v14;
LABEL_9:
            v6 = (v13 - 1) & v13;
            v10 = __clz(__rbit64(v13)) + (v12 << 6);
            v8 = v12;
            goto LABEL_5;
          }
        }
      }
    }
LABEL_23:
    v6 = 0;
    v21 = 0u;
    v22 = 0u;
    v20 = 0u;
  }
  swift_release();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v20);
  return v15 == 0;
}

SwiftUI::BloomFilter PropertyList.Element.init(keyType:before:after:)(Swift::Int a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  SwiftUI::BloomFilter result;
  int v8;
  int v9;
  int v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  unsigned int v16;
  int v17;
  uint64_t v18;

  *(_QWORD *)(v3 + 32) = 0;
  *(_QWORD *)(v3 + 40) = 0;
  *(_QWORD *)(v3 + 64) = AGMakeUniqueID();
  *(_QWORD *)(v3 + 16) = a1;
  *(_QWORD *)(v3 + 24) = a2;
  *(_QWORD *)(v3 + 32) = a3;
  swift_retain();
  swift_retain();
  swift_release();
  result.value = BloomFilter.init(hashValue:)(a1).value;
  if (!a2)
  {
    v13 = v18;
    if (a3)
    {
      v14 = *(_DWORD *)(a3 + 48);
      v15 = v14 + 1;
      if (v14 == -1)
        goto LABEL_17;
      v16 = *(_DWORD *)(a3 + 52);
      if (v16 > 0xF)
      {
        v17 = 1;
        v12 = a3;
      }
      else
      {
        v17 = v16 + 1;
        v13 = *(_QWORD *)(a3 + 56) | v18;
        v12 = *(_QWORD *)(a3 + 40);
      }
      swift_release();
      *(_DWORD *)(v3 + 48) = v15;
      *(_DWORD *)(v3 + 52) = v17;
    }
    else
    {
      v12 = 0;
      *(_QWORD *)(v3 + 48) = 0x100000001;
    }
    *(_QWORD *)(v3 + 56) = v13;
    goto LABEL_15;
  }
  v8 = *(_DWORD *)(a2 + 48);
  result.value = swift_release();
  v9 = v8 + 1;
  if (v8 == -1)
  {
    __break(1u);
  }
  else
  {
    if (!a3)
    {
LABEL_6:
      *(_DWORD *)(v3 + 48) = v9;
      *(_DWORD *)(v3 + 52) = 0;
      *(_QWORD *)(v3 + 56) = -1;
      v12 = v3;
LABEL_15:
      *(_QWORD *)(v3 + 40) = v12;
      return (SwiftUI::BloomFilter)v3;
    }
    v10 = *(_DWORD *)(a3 + 48);
    v11 = __CFADD__(v9, v10);
    v9 += v10;
    if (!v11)
    {
      swift_release();
      goto LABEL_6;
    }
  }
LABEL_17:
  __break(1u);
  return result;
}

uint64_t PropertyList.Element.deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char isUniquelyReferenced_native;

  v1 = swift_retain();
  while (v1)
  {
    v2 = *(_QWORD *)(v1 + 32);
    *(_QWORD *)(v1 + 32) = 0;
    swift_release();
    isUniquelyReferenced_native = swift_isUniquelyReferenced_native();
    v1 = v2;
    if ((isUniquelyReferenced_native & 1) == 0)
    {
      swift_release();
      break;
    }
  }
  swift_release();
  swift_release();
  return v0;
}

uint64_t PropertyList.Element.__deallocating_deinit()
{
  PropertyList.Element.deinit();
  return swift_deallocClassInstance();
}

void PropertyList.Element.description.getter()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void PropertyList.Element.matches(_:ignoredTypes:)()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void PropertyList.Element.copy(before:after:)()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void PropertyList.Element.value<A>(as:)()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance PropertyList.Element()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 200))();
}

uint64_t TypedElement.description.getter()
{
  Swift::String v0;
  Swift::String v1;

  v0._countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  v1._countAndFlagsBits = 2112800;
  v1._object = (void *)0xE300000000000000;
  String.append(_:)(v1);
  swift_getAssociatedTypeWitness();
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  return 0;
}

uint64_t TypedElement.matches(_:ignoredTypes:)(_QWORD *a1, uint64_t *a2)
{
  _QWORD *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v12;
  char v13;
  _QWORD *v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;

  v5 = *(_QWORD *)(*v2 + 232);
  v6 = *(_QWORD *)(*v2 + 240);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v8 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v10 = (char *)&v17 - v9;
  if (a1[2] != v2[2])
    return 0;
  if ((specialized Sequence<>.contains(_:)(v5, *a2) & 1) == 0)
  {
    v12 = (char *)v2 + *(_QWORD *)(*v2 + 248);
    (*(void (**)(uint64_t, uint64_t))(*a1 + 224))(AssociatedTypeWitness, AssociatedTypeWitness);
    v13 = (*(uint64_t (**)(char *, char *, uint64_t, uint64_t))(v6 + 24))(v12, v10, v5, v6);
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, AssociatedTypeWitness);
    if ((v13 & 1) == 0)
      return 0;
    v14 = (_QWORD *)*a2;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v14[2] + 1, 1, v14);
    v16 = v14[2];
    v15 = v14[3];
    if (v16 >= v15 >> 1)
      v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v15 > 1), v16 + 1, 1, v14);
    v14[2] = v16 + 1;
    v14[v16 + 4] = v5;
    *a2 = (uint64_t)v14;
  }
  return 1;
}

SwiftUI::BloomFilter TypedElement.copy(before:after:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;

  v5 = v2 + *(_QWORD *)(*(_QWORD *)v2 + 248);
  swift_allocObject();
  swift_retain();
  swift_retain();
  return specialized TypedElement.init(value:before:after:)(v5, a1, a2);
}

uint64_t TypedElement.value<A>(as:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  char *v2;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  v5 = *(_QWORD *)v2;
  result = swift_getAssociatedTypeWitness();
  v7 = *(_QWORD *)(a1 - 8);
  if (*(_QWORD *)(*(_QWORD *)(result - 8) + 64) == *(_QWORD *)(v7 + 64))
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v7 + 16))(a2, &v2[*(_QWORD *)(v5 + 248)], a1);
  __break(1u);
  return result;
}

uint64_t TypedElement.__ivar_destroyer()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t AssociatedTypeWitness;

  v1 = v0 + *(_QWORD *)(*(_QWORD *)v0 + 248);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 8))(v1, AssociatedTypeWitness);
}

uint64_t TypedElement.deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t AssociatedTypeWitness;

  PropertyList.Element.deinit();
  v1 = v0 + *(_QWORD *)(*(_QWORD *)v0 + 248);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 8))(v1, AssociatedTypeWitness);
  return v0;
}

uint64_t TypedElement.__deallocating_deinit()
{
  TypedElement.deinit();
  return swift_deallocClassInstance();
}

uint64_t find1<A>(_:key:filter:)(uint64_t result, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (result)
  {
    v8 = (_QWORD *)result;
    v9 = *a3;
    while (1)
    {
      while ((v9 & ~v8[7]) != 0)
      {
        v8 = (_QWORD *)v8[5];
        if (!v8)
          return 0;
      }
      v10 = v8[3];
      if (v10)
      {
        v11 = v9;
        result = find1<A>(_:key:filter:)(v10, a2, &v11, a4, a5);
        if (result)
          return result;
      }
      if (v8[2] == a4)
        break;
      v8 = (_QWORD *)v8[4];
      if (!v8)
        return 0;
    }
    return (uint64_t)v8;
  }
  return result;
}

uint64_t protocol witness for static PropertyKey.valuesEqual(_:_:) in conformance EmptyKey()
{
  return AGCompareValues();
}

uint64_t protocol witness for static PropertyKey.valuesEqual(_:_:) in conformance ForEachEvictionInput()
{
  return static WeakAttribute.== infix(_:_:)();
}

uint64_t protocol witness for static PropertyKey.valuesEqual(_:_:) in conformance _GraphInputs.TextAccessibilityProviderKey(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static PropertyKey.valuesEqual(_:_:) in conformance _GraphInputs.PrivacyReductionAccessibilityProviderKey(a1, a2, a3, a4, &lazy cache variable for type metadata for TextAccessibilityProvider.Type, &lazy cache variable for type metadata for TextAccessibilityProvider);
}

uint64_t protocol witness for static PropertyKey.valuesEqual(_:_:) in conformance _GraphInputs.PrivacyReductionAccessibilityProviderKey(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t *a5, unint64_t *a6)
{
  type metadata accessor for ImageStyleProtocol.Type(0, a5, a6);
  return AGCompareValues();
}

BOOL protocol witness for static PropertyKey.valuesEqual(_:_:) in conformance InterfaceIdiomInput(_QWORD *a1, _QWORD *a2)
{
  BOOL v2;

  if (*a1)
    v2 = *a2 == 0;
  else
    v2 = 1;
  if (v2)
    return (*a1 | *a2) == 0;
  else
    return (*(uint64_t (**)(void))(a1[1] + 8))() & 1;
}

BOOL protocol witness for static PropertyKey.valuesEqual(_:_:) in conformance _GraphInputs.SavedTransactionKey(uint64_t *a1, uint64_t *a2)
{
  return specialized static Array<A>.== infix(_:_:)(*a1, *a2);
}

uint64_t protocol witness for static PropertyKey.valuesEqual(_:_:) in conformance Image.Style()
{
  type metadata accessor for Stack<ImageStyleProtocol.Type>(0);
  return AGCompareValues();
}

uint64_t type metadata accessor for TypedElement(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for TypedElement);
}

uint64_t specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A, @in_guaranteed B) -> (@out A, @out B)@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t result;

  v3 = *a1;
  result = outlined init with copy of AnyTrackedValue((uint64_t)(a1 + 1), (uint64_t)(a2 + 1));
  *a2 = v3;
  return result;
}

SwiftUI::BloomFilter specialized TypedElement.init(value:before:after:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  Swift::Int v8;
  uint64_t AssociatedTypeWitness;

  v7 = v3 + *(_QWORD *)(*(_QWORD *)v3 + 248);
  v8 = *(_QWORD *)(*(_QWORD *)v3 + 232);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 16))(v7, a1, AssociatedTypeWitness);
  return PropertyList.Element.init(keyType:before:after:)(v8, a2, a3);
}

uint64_t specialized PropertyList.subscript.setter(uint64_t a1, Swift::Int a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;

  swift_retain();
  closure #1 in PropertyList.subscript.setter(v4, a2, a1, a3, a4);
  return swift_release();
}

uint64_t partial apply for closure #1 in PropertyList.subscript.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;

  return closure #1 in PropertyList.subscript.getter(v1[5], v1[4], v1[2], v1[3], a1);
}

uint64_t type metadata accessor for PropertyList.Element()
{
  return objc_opt_self();
}

void partial apply for closure #1 in PropertyList.forEach<A>(keyType:_:)(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;

  closure #1 in PropertyList.forEach<A>(keyType:_:)(a1, a2, *(void (**)(char *, uint64_t))(v2 + 32), *(_QWORD *)(v2 + 40), *(_QWORD *)(v2 + 16));
}

uint64_t partial apply for closure #1 in PropertyList.merge(_:)(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;

  return closure #1 in PropertyList.merge(_:)(a1, a2, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), *(uint64_t **)(v2 + 32), *(uint64_t **)(v2 + 40));
}

uint64_t type metadata accessor for SecondaryLookupTrackedValue(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for SecondaryLookupTrackedValue);
}

uint64_t partial apply for closure #1 in PropertyList.valueWithSecondaryLookup<A>(_:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return closure #1 in PropertyList.valueWithSecondaryLookup<A>(_:)(*(_QWORD **)(v1 + 32), *(_QWORD *)(v1 + 40), *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), a1);
}

uint64_t type metadata accessor for TrackedValue(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for TrackedValue);
}

uint64_t outlined destroy of AnyTrackedValue?(uint64_t a1)
{
  uint64_t v2;

  type metadata accessor for AnyTrackedValue?();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void type metadata accessor for AnyTrackedValue?()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for AnyTrackedValue?)
  {
    type metadata accessor for ScrollStateRequest(255, (unint64_t *)&lazy cache variable for type metadata for AnyTrackedValue);
    v0 = type metadata accessor for Optional();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for AnyTrackedValue?);
  }
}

uint64_t type metadata accessor for DerivedValue(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for DerivedValue);
}

uint64_t dispatch thunk of static PropertyKey.defaultValue.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of static PropertyKey.valuesEqual(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 24))();
}

uint64_t dispatch thunk of static DerivedPropertyKey.value(in:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

ValueMetadata *type metadata accessor for PropertyList()
{
  return &type metadata for PropertyList;
}

uint64_t type metadata accessor for PropertyList.Tracker()
{
  return objc_opt_self();
}

uint64_t method lookup function for PropertyList.Tracker()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of PropertyList.Tracker.__allocating_init()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 88))();
}

uint64_t method lookup function for PropertyList.Element()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of PropertyList.Element.description.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 200))();
}

uint64_t type metadata completion function for TypedElement()
{
  uint64_t result;
  unint64_t v1;

  result = swift_getAssociatedTypeWitness();
  if (v1 <= 0x3F)
  {
    result = swift_initClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t dispatch thunk of static PropertyKeyLookup.lookup(in:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 40))();
}

uint64_t type metadata completion function for DerivedValue()
{
  return type metadata completion function for DerivedValue();
}

{
  uint64_t result;
  unint64_t v1;

  result = swift_getAssociatedTypeWitness();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for DerivedValue(uint64_t *a1, uint64_t *a2)
{
  return initializeBufferWithCopyOfBuffer for DerivedValue(a1, a2);
}

{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  uint64_t v9;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = *(_DWORD *)(v5 + 80);
  if (v6 <= 7 && *(_QWORD *)(v5 + 64) <= 0x18uLL && (*(_DWORD *)(v5 + 80) & 0x100000) == 0)
  {
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
  }
  else
  {
    v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v6 + 16) & ~v6));
    swift_retain();
  }
  return a1;
}

uint64_t destroy for DerivedValue(uint64_t a1)
{
  return destroy for DerivedValue(a1);
}

{
  uint64_t AssociatedTypeWitness;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 8))(a1, AssociatedTypeWitness);
}

uint64_t initializeWithCopy for DerivedValue(uint64_t a1, uint64_t a2)
{
  return initializeWithCopy for DerivedValue(a1, a2);
}

{
  uint64_t AssociatedTypeWitness;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 16))(a1, a2, AssociatedTypeWitness);
  return a1;
}

uint64_t assignWithCopy for DerivedValue(uint64_t a1, uint64_t a2)
{
  return assignWithCopy for DerivedValue(a1, a2);
}

{
  uint64_t AssociatedTypeWitness;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 24))(a1, a2, AssociatedTypeWitness);
  return a1;
}

uint64_t initializeWithTake for DerivedValue(uint64_t a1, uint64_t a2)
{
  return initializeWithTake for DerivedValue(a1, a2);
}

{
  uint64_t AssociatedTypeWitness;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 32))(a1, a2, AssociatedTypeWitness);
  return a1;
}

uint64_t assignWithTake for DerivedValue(uint64_t a1, uint64_t a2)
{
  return assignWithTake for DerivedValue(a1, a2);
}

{
  uint64_t AssociatedTypeWitness;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 40))(a1, a2, AssociatedTypeWitness);
  return a1;
}

uint64_t getEnumTagSinglePayload for DerivedValue(uint64_t a1, unsigned int a2)
{
  return getEnumTagSinglePayload for DerivedValue(a1, a2);
}

{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  int v9;
  unsigned int v10;
  int v11;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  if (!a2)
    return 0;
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = *(unsigned int *)(v5 + 84);
  if (a2 <= v6)
    goto LABEL_18;
  v7 = *(_QWORD *)(v5 + 64);
  v8 = 8 * v7;
  if (v7 <= 3)
  {
    v10 = ((a2 - v6 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      v9 = *(_DWORD *)(a1 + v7);
      if (!v9)
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      v9 = *(unsigned __int16 *)(a1 + v7);
      if (!*(_WORD *)(a1 + v7))
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_18:
      if ((_DWORD)v6)
        return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(a1, v6, AssociatedTypeWitness);
      return 0;
    }
  }
  v9 = *(unsigned __int8 *)(a1 + v7);
  if (!*(_BYTE *)(a1 + v7))
    goto LABEL_18;
LABEL_11:
  v11 = (v9 - 1) << v8;
  if (v7 > 3)
    v11 = 0;
  if ((_DWORD)v7)
  {
    if (v7 > 3)
      LODWORD(v7) = 4;
    __asm { BR              X11 }
  }
  return (v6 + v11 + 1);
}

void storeEnumTagSinglePayload for DerivedValue(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  storeEnumTagSinglePayload for DerivedValue(a1, a2, a3);
}

{
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  int v12;

  v6 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = *(_QWORD *)(v6 + 64);
  if (a3 <= v7)
  {
    v9 = 0;
  }
  else if (v8 <= 3)
  {
    v11 = ((a3 - v7 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
    if (HIWORD(v11))
    {
      v9 = 4u;
    }
    else if (v11 >= 0x100)
    {
      v9 = 2;
    }
    else
    {
      v9 = v11 > 1;
    }
  }
  else
  {
    v9 = 1u;
  }
  if (v7 < a2)
  {
    v10 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        v12 = v10 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *(_WORD *)a1 = v12;
          a1[2] = BYTE2(v12);
        }
        else if ((_DWORD)v8 == 2)
        {
          *(_WORD *)a1 = v12;
        }
        else
        {
          *a1 = v12;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v10;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X11 }
}

uint64_t type metadata completion function for TrackedValue()
{
  return type metadata completion function for DerivedValue();
}

uint64_t *initializeBufferWithCopyOfBuffer for TrackedValue(uint64_t *a1, uint64_t *a2)
{
  return initializeBufferWithCopyOfBuffer for DerivedValue(a1, a2);
}

uint64_t destroy for TrackedValue(uint64_t a1)
{
  return destroy for DerivedValue(a1);
}

uint64_t initializeWithCopy for TrackedValue(uint64_t a1, uint64_t a2)
{
  return initializeWithCopy for DerivedValue(a1, a2);
}

uint64_t assignWithCopy for TrackedValue(uint64_t a1, uint64_t a2)
{
  return assignWithCopy for DerivedValue(a1, a2);
}

uint64_t initializeWithTake for TrackedValue(uint64_t a1, uint64_t a2)
{
  return initializeWithTake for DerivedValue(a1, a2);
}

uint64_t assignWithTake for TrackedValue(uint64_t a1, uint64_t a2)
{
  return assignWithTake for DerivedValue(a1, a2);
}

uint64_t getEnumTagSinglePayload for TrackedValue(uint64_t a1, unsigned int a2)
{
  return getEnumTagSinglePayload for DerivedValue(a1, a2);
}

void storeEnumTagSinglePayload for TrackedValue(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  storeEnumTagSinglePayload for DerivedValue(a1, a2, a3);
}

uint64_t type metadata completion function for SecondaryLookupTrackedValue()
{
  uint64_t result;
  unint64_t v1;

  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  result = swift_getAssociatedTypeWitness();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for SecondaryLookupTrackedValue(uint64_t *a1, uint64_t *a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  uint64_t v9;

  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = *(_DWORD *)(v5 + 80);
  if (v6 <= 7 && *(_QWORD *)(v5 + 64) <= 0x18uLL && (*(_DWORD *)(v5 + 80) & 0x100000) == 0)
  {
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
  }
  else
  {
    v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v6 + 16) & ~v6));
    swift_retain();
  }
  return a1;
}

uint64_t destroy for SecondaryLookupTrackedValue(uint64_t a1)
{
  uint64_t AssociatedTypeWitness;

  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 8))(a1, AssociatedTypeWitness);
}

uint64_t initializeWithCopy for SecondaryLookupTrackedValue(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;

  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 16))(a1, a2, AssociatedTypeWitness);
  return a1;
}

uint64_t assignWithCopy for SecondaryLookupTrackedValue(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;

  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 24))(a1, a2, AssociatedTypeWitness);
  return a1;
}

uint64_t initializeWithTake for SecondaryLookupTrackedValue(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;

  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 32))(a1, a2, AssociatedTypeWitness);
  return a1;
}

uint64_t assignWithTake for SecondaryLookupTrackedValue(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;

  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 40))(a1, a2, AssociatedTypeWitness);
  return a1;
}

uint64_t getEnumTagSinglePayload for SecondaryLookupTrackedValue(uint64_t a1, unsigned int a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  int v9;
  unsigned int v10;
  int v11;

  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  if (!a2)
    return 0;
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = *(unsigned int *)(v5 + 84);
  if (a2 <= v6)
    goto LABEL_18;
  v7 = *(_QWORD *)(v5 + 64);
  v8 = 8 * v7;
  if (v7 <= 3)
  {
    v10 = ((a2 - v6 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      v9 = *(_DWORD *)(a1 + v7);
      if (!v9)
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      v9 = *(unsigned __int16 *)(a1 + v7);
      if (!*(_WORD *)(a1 + v7))
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_18:
      if ((_DWORD)v6)
        return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(a1, v6, AssociatedTypeWitness);
      return 0;
    }
  }
  v9 = *(unsigned __int8 *)(a1 + v7);
  if (!*(_BYTE *)(a1 + v7))
    goto LABEL_18;
LABEL_11:
  v11 = (v9 - 1) << v8;
  if (v7 > 3)
    v11 = 0;
  if ((_DWORD)v7)
  {
    if (v7 > 3)
      LODWORD(v7) = 4;
    __asm { BR              X11 }
  }
  return (v6 + v11 + 1);
}

void storeEnumTagSinglePayload for SecondaryLookupTrackedValue(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  int v12;

  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  v6 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = *(_QWORD *)(v6 + 64);
  if (a3 <= v7)
  {
    v9 = 0;
  }
  else if (v8 <= 3)
  {
    v11 = ((a3 - v7 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
    if (HIWORD(v11))
    {
      v9 = 4u;
    }
    else if (v11 >= 0x100)
    {
      v9 = 2;
    }
    else
    {
      v9 = v11 > 1;
    }
  }
  else
  {
    v9 = 1u;
  }
  if (v7 < a2)
  {
    v10 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        v12 = v10 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *(_WORD *)a1 = v12;
          a1[2] = BYTE2(v12);
        }
        else if ((_DWORD)v8 == 2)
        {
          *(_WORD *)a1 = v12;
        }
        else
        {
          *a1 = v12;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v10;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X11 }
}

uint64_t destroy for TrackerData()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for TrackerData(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for TrackerData(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  return a1;
}

uint64_t assignWithTake for TrackerData(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  return a1;
}

uint64_t getEnumTagSinglePayload for TrackerData(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 33))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for TrackerData(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_BYTE *)(result + 32) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 33) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 33) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for TrackerData()
{
  return &type metadata for TrackerData;
}

ValueMetadata *type metadata accessor for EmptyKey()
{
  return &type metadata for EmptyKey;
}

unint64_t lazy protocol witness table accessor for type BodyInputElement and conformance BodyInputElement()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type BodyInputElement and conformance BodyInputElement;
  if (!lazy protocol witness table cache variable for type BodyInputElement and conformance BodyInputElement)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for BodyInputElement, &type metadata for BodyInputElement);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BodyInputElement and conformance BodyInputElement);
  }
  return result;
}

void type metadata accessor for GestureContainerFactory.Type?()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for GestureContainerFactory.Type?)
  {
    type metadata accessor for ImageStyleProtocol.Type(255, &lazy cache variable for type metadata for GestureContainerFactory.Type, &lazy cache variable for type metadata for GestureContainerFactory);
    v0 = type metadata accessor for Optional();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for GestureContainerFactory.Type?);
  }
}

void type metadata accessor for EventBindingBridgeFactory.Type?()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for EventBindingBridgeFactory.Type?)
  {
    type metadata accessor for ImageStyleProtocol.Type(255, &lazy cache variable for type metadata for EventBindingBridgeFactory.Type, &lazy cache variable for type metadata for EventBindingBridgeFactory);
    v0 = type metadata accessor for Optional();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for EventBindingBridgeFactory.Type?);
  }
}

uint64_t outlined init with take of (key: ObjectIdentifier, value: AnyTrackedValue)?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for PropertyList.Element?(0, (unint64_t *)&lazy cache variable for type metadata for (key: ObjectIdentifier, value: AnyTrackedValue)?, 255, (void (*)(uint64_t))type metadata accessor for (key: ObjectIdentifier, value: AnyTrackedValue));
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void type metadata accessor for PropertyList.Element?(uint64_t a1, unint64_t *a2, uint64_t a3, void (*a4)(uint64_t))
{
  unint64_t v5;
  uint64_t v6;

  if (!*a2)
  {
    a4(a3);
    v5 = type metadata accessor for Optional();
    if (!v6)
      atomic_store(v5, a2);
  }
}

uint64_t _s7SwiftUI12PropertyListV7ElementC7forEach6filter_SbAA11BloomFilterV_ys9UnmanagedVyAEG_SbztXEtF03_s7a4UI12cd54V7forEach7keyType_yxm_y5ValueQz_SbztXEtAA0C3KeyRzlFys9k5VyAC7e3CG_U121XEfU_AA011TransactioncJ033_B2543BCA257433E04979186A1DC2B6BCLLVyAA09AnimationJ033_D98E9A1069CEEADA58829ED440E36F30LLVG_Tg5xSbRi_zRi0_zlyAA9AnimationVSgIsgnl_Tf1ncn_nTf4nng_n(uint64_t *a1, _QWORD *a2, void (*a3)(uint64_t *, BOOL *), uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  BOOL v14;

  v7 = *a1;
  v14 = 0;
  while (1)
  {
    while ((v7 & ~a2[7]) != 0)
    {
      a2 = (_QWORD *)a2[5];
      if (!a2)
        return 1;
    }
    v8 = a2[3];
    if (v8)
    {
      v13 = v7;
      v9 = _s7SwiftUI12PropertyListV7ElementC7forEach6filter_SbAA11BloomFilterV_ys9UnmanagedVyAEG_SbztXEtF03_s7a4UI12cd54V7forEach7keyType_yxm_y5ValueQz_SbztXEtAA0C3KeyRzlFys9k5VyAC7e3CG_U121XEfU_AA011TransactioncJ033_B2543BCA257433E04979186A1DC2B6BCLLVyAA09AnimationJ033_D98E9A1069CEEADA58829ED440E36F30LLVG_Tg5xSbRi_zRi0_zlyAA9AnimationVSgIsgnl_Tf1ncn_nTf4nng_n(&v13, v8, a3, a4);
      v14 = (v9 & 1) == 0;
      if ((v9 & 1) == 0)
        break;
    }
    v10 = a2[2];
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, (unint64_t *)&lazy cache variable for type metadata for TransactionPropertyKey<AnimationKey>, (uint64_t)&type metadata for AnimationKey, (uint64_t)&protocol witness table for AnimationKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for TransactionPropertyKey);
    if (v10 == v11)
    {
      v13 = a2[9];
      swift_retain();
      a3(&v13, &v14);
      swift_release();
      if (v14)
        break;
    }
    a2 = (_QWORD *)a2[4];
    if (!a2)
      return 1;
  }
  return 0;
}

uint64_t _SizedShape.shape.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8) + 16))(a2, v2);
}

uint64_t _SizedShape.shape.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 40))(v2, a1);
}

uint64_t (*_SizedShape.shape.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

double _SizedShape.size.getter(uint64_t a1)
{
  uint64_t v1;

  return *(double *)(v1 + *(int *)(a1 + 36));
}

uint64_t _SizedShape.size.setter(uint64_t result, double a2, double a3)
{
  uint64_t v3;
  double *v4;

  v4 = (double *)(v3 + *(int *)(result + 36));
  *v4 = a2;
  v4[1] = a3;
  return result;
}

uint64_t (*_SizedShape.size.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t _SizedShape.init(shape:size:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>, double a5@<D0>, double a6@<D1>)
{
  uint64_t v11;
  uint64_t result;
  double *v13;

  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 32))(a4, a1, a2);
  result = type metadata accessor for _SizedShape(0, a2, a3, v11);
  v13 = (double *)(a4 + *(int *)(result + 36));
  *v13 = a5;
  v13[1] = a6;
  return result;
}

uint64_t type metadata accessor for _SizedShape(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for _SizedShape);
}

double _SizedShape.path(in:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>, __n128 a3@<Q0>, __n128 a4@<Q1>)
{
  uint64_t v4;
  double result;
  __int128 v7;
  _OWORD v8[2];
  char v9;

  (*(void (**)(_OWORD *__return_ptr, _QWORD, __n128, __n128, double, double))(*(_QWORD *)(a1 + 24) + 24))(v8, *(_QWORD *)(a1 + 16), a3, a4, *(double *)(v4 + *(int *)(a1 + 36)), *(double *)(v4 + *(int *)(a1 + 36) + 8));
  result = *(double *)v8;
  v7 = v8[1];
  *(_OWORD *)a2 = v8[0];
  *(_OWORD *)(a2 + 16) = v7;
  *(_BYTE *)(a2 + 32) = v9;
  return result;
}

uint64_t static _SizedShape.role.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t _SizedShape.layoutDirectionBehavior.getter(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(*(_QWORD *)(a1 + 24) + 40))(*(_QWORD *)(a1 + 16));
}

void _SizedShape.animatableData.getter(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t AssociatedTypeWitness;
  double v8;
  uint64_t v9;
  char *v10;
  __int128 v11;

  v5 = *(_QWORD *)(a1 + 16);
  v6 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v8 = MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v10 = (char *)&v11 - v9;
  (*(void (**)(uint64_t, uint64_t, double))(v6 + 24))(v5, v6, v8);
  v11 = *(_OWORD *)(v2 + *(int *)(a1 + 36));
  type metadata accessor for AnimatablePair<CGFloat, CGFloat>();
  swift_getAssociatedConformanceWitness();
  lazy protocol witness table accessor for type AnimatablePair<CGFloat, CGFloat> and conformance AnimatablePair<A, B>();
  AnimatablePair.init(_:_:)((uint64_t)v10, AssociatedTypeWitness, a2);
}

void _SizedShape.animatableData.setter(uint64_t a1)
{
  specialized _SizedShape.animatableData.setter(a1);
}

void sub_2350FA72C()
{
  swift_getAssociatedTypeWitness();
  type metadata accessor for AnimatablePair<CGFloat, CGFloat>();
  swift_getAssociatedConformanceWitness();
  lazy protocol witness table accessor for type AnimatablePair<CGFloat, CGFloat> and conformance AnimatablePair<A, B>();
  type metadata accessor for AnimatablePair();
}

uint64_t sub_2350FA7A0(uint64_t a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 8))(v1, a1);
}

void _SizedShape.animatableData.modify(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t AssociatedConformanceWitness;
  unint64_t v9;

  v5 = malloc(0x50uLL);
  *a1 = v5;
  v5[4] = a2;
  v5[5] = v2;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v7 = type metadata accessor for AnimatablePair<CGFloat, CGFloat>();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v9 = lazy protocol witness table accessor for type AnimatablePair<CGFloat, CGFloat> and conformance AnimatablePair<A, B>();
  *v5 = AssociatedTypeWitness;
  v5[1] = v7;
  v5[2] = AssociatedConformanceWitness;
  v5[3] = v9;
  type metadata accessor for AnimatablePair();
}

void sub_2350FA874(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  size_t v4;
  void *v5;

  v2[6] = a1;
  v3 = *(_QWORD *)(a1 - 8);
  v2[7] = v3;
  v4 = *(_QWORD *)(v3 + 64);
  v2[8] = malloc(v4);
  v5 = malloc(v4);
  v2[9] = v5;
  _SizedShape.animatableData.getter(v1, (uint64_t)v5);
}

void (*sub_2350FA8AC())(uint64_t a1, char a2)
{
  return _SizedShape.animatableData.modify;
}

void _SizedShape.animatableData.modify(uint64_t a1, char a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)a1 + 64);
  if ((a2 & 1) != 0)
  {
    (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(*(_QWORD *)a1 + 56) + 16))(*(_QWORD *)(*(_QWORD *)a1 + 64), *(_QWORD *)(*(_QWORD *)a1 + 72), *(_QWORD *)(*(_QWORD *)a1 + 48));
    specialized _SizedShape.animatableData.setter(v2);
  }
  specialized _SizedShape.animatableData.setter(*(_QWORD *)(*(_QWORD *)a1 + 72));
}

double protocol witness for Shape.path(in:) in conformance _SizedShape<A>@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>, __n128 a3@<Q0>, __n128 a4@<Q1>)
{
  double result;
  __int128 v6;
  _OWORD v7[2];
  char v8;

  _SizedShape.path(in:)(a1, (uint64_t)v7, a3, a4);
  result = *(double *)v7;
  v6 = v7[1];
  *(_OWORD *)a2 = v7[0];
  *(_OWORD *)(a2 + 16) = v6;
  *(_BYTE *)(a2 + 32) = v8;
  return result;
}

uint64_t protocol witness for static Shape.role.getter in conformance _SizedShape<A>(uint64_t a1)
{
  return static _SizedShape.role.getter(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24));
}

void protocol witness for Animatable.animatableData.setter in conformance _SizedShape<A>(uint64_t a1)
{
  specialized _SizedShape.animatableData.setter(a1);
}

void sub_2350FA9F0()
{
  swift_getAssociatedTypeWitness();
  type metadata accessor for AnimatablePair<CGFloat, CGFloat>();
  swift_getAssociatedConformanceWitness();
  lazy protocol witness table accessor for type AnimatablePair<CGFloat, CGFloat> and conformance AnimatablePair<A, B>();
  type metadata accessor for AnimatablePair();
}

uint64_t sub_2350FAA64(uint64_t a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 8))(v1, a1);
}

void protocol witness for Animatable.animatableData.modify in conformance _SizedShape<A>(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t AssociatedConformanceWitness;
  unint64_t v9;

  v5 = malloc(0x50uLL);
  *a1 = v5;
  v5[4] = v2;
  v5[5] = a2;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v7 = type metadata accessor for AnimatablePair<CGFloat, CGFloat>();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v9 = lazy protocol witness table accessor for type AnimatablePair<CGFloat, CGFloat> and conformance AnimatablePair<A, B>();
  *v5 = AssociatedTypeWitness;
  v5[1] = v7;
  v5[2] = AssociatedConformanceWitness;
  v5[3] = v9;
  type metadata accessor for AnimatablePair();
}

void sub_2350FAB38(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  size_t v4;
  void *v5;

  v2[6] = a1;
  v3 = *(_QWORD *)(a1 - 8);
  v2[7] = v3;
  v4 = *(_QWORD *)(v3 + 64);
  v2[8] = malloc(v4);
  v5 = malloc(v4);
  v2[9] = v5;
  _SizedShape.animatableData.getter(v1, (uint64_t)v5);
}

void (*sub_2350FAB70())(uint64_t a1, char a2)
{
  return protocol witness for Animatable.animatableData.modify in conformance _SizedShape<A>;
}

void protocol witness for Animatable.animatableData.modify in conformance _SizedShape<A>(uint64_t a1, char a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)a1 + 64);
  if ((a2 & 1) != 0)
  {
    (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(*(_QWORD *)a1 + 56) + 16))(*(_QWORD *)(*(_QWORD *)a1 + 64), *(_QWORD *)(*(_QWORD *)a1 + 72), *(_QWORD *)(*(_QWORD *)a1 + 48));
    specialized _SizedShape.animatableData.setter(v2);
  }
  specialized _SizedShape.animatableData.setter(*(_QWORD *)(*(_QWORD *)a1 + 72));
}

uint64_t Shape.size(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, double a4@<D0>, double a5@<D1>)
{
  uint64_t v5;
  uint64_t v11;
  double v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t result;
  double *v17;
  uint64_t v18;

  v11 = *(_QWORD *)(a1 - 8);
  v12 = MEMORY[0x24BDAC7A8](a1);
  v14 = (char *)&v18 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v11 + 16))(v14, v5, a1, v12);
  (*(void (**)(uint64_t, char *, uint64_t))(v11 + 32))(a3, v14, a1);
  result = type metadata accessor for _SizedShape(0, a1, a2, v15);
  v17 = (double *)(a3 + *(int *)(result + 36));
  *v17 = a4;
  v17[1] = a5;
  return result;
}

uint64_t Shape.size(_:anchor:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, double a4@<D0>, double a5@<D1>, double a6@<D2>, double a7@<D3>)
{
  uint64_t v7;
  uint64_t v15;
  double v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t result;
  double *v21;
  double *v22;
  uint64_t v23;

  v15 = *(_QWORD *)(a1 - 8);
  v16 = MEMORY[0x24BDAC7A8](a1);
  v18 = (char *)&v23 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v15 + 16))(v18, v7, a1, v16);
  (*(void (**)(uint64_t, char *, uint64_t))(v15 + 32))(a3, v18, a1);
  result = type metadata accessor for AnchoredSizedShape(0, a1, a2, v19);
  v21 = (double *)(a3 + *(int *)(result + 36));
  *v21 = a4;
  v21[1] = a5;
  v22 = (double *)(a3 + *(int *)(result + 40));
  *v22 = a6;
  v22[1] = a7;
  return result;
}

void AnchoredSizedShape.path(in:)(uint64_t a1@<X0>, uint64_t a2@<X8>, __n128 a3@<Q0>, __n128 a4@<Q1>, double a5@<D2>, double a6@<D3>)
{
  uint64_t v6;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  double *v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  _QWORD v23[4];
  char v24;
  _QWORD v25[4];
  char v26;
  CGAffineTransform v27;

  (*(void (**)(_QWORD *__return_ptr, _QWORD, __n128, __n128, double, double))(*(_QWORD *)(a1 + 24) + 24))(v23, *(_QWORD *)(a1 + 16), a3, a4, *(double *)(v6 + *(int *)(a1 + 36)), *(double *)(v6 + *(int *)(a1 + 36) + 8));
  v11 = v23[0];
  v12 = v23[1];
  v13 = v23[2];
  v14 = v23[3];
  v15 = v24;
  Path.boundingRect.getter();
  v16 = (double *)(v6 + *(int *)(a1 + 40));
  v21 = *v16 * a5 - (v18 + v17 * *v16);
  v22 = v16[1] * a6 - (v20 + v19 * v16[1]);
  if (v21 != 0.0 || v22 != 0.0)
  {
    CGAffineTransformMakeTranslation(&v27, v21, v22);
    Path.applying(_:)(&v27.a, (uint64_t)v25);
    v11 = v25[0];
    v12 = v25[1];
    v13 = v25[2];
    v14 = v25[3];
    v15 = v26;
    outlined release of Path((uint64_t)v23);
  }
  *(_QWORD *)a2 = v11;
  *(_QWORD *)(a2 + 8) = v12;
  *(_QWORD *)(a2 + 16) = v13;
  *(_QWORD *)(a2 + 24) = v14;
  *(_BYTE *)(a2 + 32) = v15;
}

void AnchoredSizedShape.animatableData.getter()
{
  uint64_t AssociatedTypeWitness;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  type metadata accessor for AnimatablePair<CGFloat, CGFloat>();
  swift_getAssociatedConformanceWitness();
  lazy protocol witness table accessor for type AnimatablePair<CGFloat, CGFloat> and conformance AnimatablePair<A, B>();
  type metadata accessor for AnimatablePair();
}

void sub_2350FAFAC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  double v16;
  uint64_t v17;
  char *v18;

  v16 = MEMORY[0x24BDAC7A8](a1);
  v18 = (char *)&a9 - v17;
  (*(void (**)(uint64_t, uint64_t, double))(v11 + 24))(v12, v11, v16);
  *(_OWORD *)(v15 - 112) = *(_OWORD *)(v9 + *(int *)(v10 + 36));
  AnimatablePair.init(_:_:)(v14, v13, (uint64_t)v18);
}

void sub_2350FB01C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(float64x2_t *)(v4 - 112) = vmulq_f64(*(float64x2_t *)(v1 + *(int *)(v2 + 40)), (float64x2_t)vdupq_n_s64(0x4060000000000000uLL));
  MEMORY[0x23B7C9C04](&protocol conformance descriptor for AnimatablePair<A, B>, v0);
  AnimatablePair.init(_:_:)(v3, v0, *(_QWORD *)(v4 - 120));
}

double protocol witness for Shape.path(in:) in conformance AnchoredSizedShape<A>@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>, __n128 a3@<Q0>, __n128 a4@<Q1>, double a5@<D2>, double a6@<D3>)
{
  double result;
  __int128 v8;
  _OWORD v9[2];
  char v10;

  AnchoredSizedShape.path(in:)(a1, (uint64_t)v9, a3, a4, a5, a6);
  result = *(double *)v9;
  v8 = v9[1];
  *(_OWORD *)a2 = v9[0];
  *(_OWORD *)(a2 + 16) = v8;
  *(_BYTE *)(a2 + 32) = v10;
  return result;
}

void protocol witness for Animatable.animatableData.setter in conformance AnchoredSizedShape<A>()
{
  specialized AnchoredSizedShape.animatableData.setter();
}

void sub_2350FB0F0()
{
  swift_getAssociatedTypeWitness();
  type metadata accessor for AnimatablePair<CGFloat, CGFloat>();
  swift_getAssociatedConformanceWitness();
  lazy protocol witness table accessor for type AnimatablePair<CGFloat, CGFloat> and conformance AnimatablePair<A, B>();
  type metadata accessor for AnimatablePair();
}

void sub_2350FB168(uint64_t a1)
{
  MEMORY[0x23B7C9C04](&protocol conformance descriptor for AnimatablePair<A, B>, a1);
  type metadata accessor for AnimatablePair();
}

uint64_t sub_2350FB190(uint64_t a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 8))(v1, a1);
}

void protocol witness for Animatable.animatableData.modify in conformance AnchoredSizedShape<A>(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t AssociatedConformanceWitness;
  unint64_t v9;

  v5 = malloc(0x70uLL);
  *a1 = v5;
  v5[8] = v2;
  v5[9] = a2;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v7 = type metadata accessor for AnimatablePair<CGFloat, CGFloat>();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v9 = lazy protocol witness table accessor for type AnimatablePair<CGFloat, CGFloat> and conformance AnimatablePair<A, B>();
  *v5 = AssociatedTypeWitness;
  v5[1] = v7;
  v5[2] = AssociatedConformanceWitness;
  v5[3] = v9;
  type metadata accessor for AnimatablePair();
}

void sub_2350FB268(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;

  v5 = MEMORY[0x23B7C9C04](&protocol conformance descriptor for AnimatablePair<A, B>, a1);
  *(_QWORD *)(v1 + 32) = a1;
  *(_QWORD *)(v1 + 40) = v3;
  v6 = v1 + 32;
  *(_QWORD *)(v6 + 16) = v5;
  *(_QWORD *)(v6 + 24) = v2;
  type metadata accessor for AnimatablePair();
}

void sub_2350FB290(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  size_t v3;

  v1[6] = a1;
  v2 = *(_QWORD *)(a1 - 8);
  v1[7] = v2;
  v3 = *(_QWORD *)(v2 + 64);
  v1[8] = malloc(v3);
  v1[9] = malloc(v3);
  AnchoredSizedShape.animatableData.getter();
}

void (*sub_2350FB2C8())(uint64_t a1, char a2)
{
  return protocol witness for Animatable.animatableData.modify in conformance AnchoredSizedShape<A>;
}

void protocol witness for Animatable.animatableData.modify in conformance AnchoredSizedShape<A>(uint64_t a1, char a2)
{
  if ((a2 & 1) != 0)
  {
    (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(*(_QWORD *)a1 + 88) + 16))(*(_QWORD *)(*(_QWORD *)a1 + 96), *(_QWORD *)(*(_QWORD *)a1 + 104), *(_QWORD *)(*(_QWORD *)a1 + 80));
    specialized AnchoredSizedShape.animatableData.setter();
  }
  specialized AnchoredSizedShape.animatableData.setter();
}

void specialized AnchoredSizedShape.animatableData.setter()
{
  uint64_t AssociatedTypeWitness;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  type metadata accessor for AnimatablePair<CGFloat, CGFloat>();
  swift_getAssociatedConformanceWitness();
  lazy protocol witness table accessor for type AnimatablePair<CGFloat, CGFloat> and conformance AnimatablePair<A, B>();
  type metadata accessor for AnimatablePair();
}

void sub_2350FB468(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  double v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;

  v17 = MEMORY[0x24BDAC7A8](a1);
  v19 = (char *)&a9 - v18;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v20 + 16))((char *)&a9 - v18, v9, a1, v17);
  (*(void (**)(uint64_t, char *, uint64_t))(v10 + 32))(v11, v19, v12);
  v21 = MEMORY[0x23B7C9C04](&protocol conformance descriptor for AnimatablePair<A, B>, a1);
  *(_QWORD *)(v15 - 128) = a1;
  *(_QWORD *)(v15 - 120) = v13;
  *(_QWORD *)(v15 - 112) = v21;
  *(_QWORD *)(v15 - 104) = v14;
  type metadata accessor for AnimatablePair();
}

float64x2_t sub_2350FB4EC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, _QWORD, uint64_t);
  uint64_t v9;
  _QWORD *v10;
  float64x2_t result;

  v8 = *(void (**)(uint64_t, _QWORD, uint64_t))(v3 + 32);
  *(_OWORD *)(v5 - 160) = *(_OWORD *)(v2 + *(int *)(a1 + 52));
  v9 = *(_QWORD *)(v5 - 136);
  v8(v4, *(_QWORD *)(v5 - 144), v3);
  v10 = (_QWORD *)(v9 + *(int *)(v1 + 36));
  *v10 = v6;
  v10[1] = v7;
  result = vmulq_f64(*(float64x2_t *)(v5 - 160), (float64x2_t)vdupq_n_s64(0x3F80000000000000uLL));
  *(float64x2_t *)(v9 + *(int *)(v1 + 40)) = result;
  return result;
}

void specialized _SizedShape.animatableData.setter(uint64_t a1)
{
  uint64_t AssociatedTypeWitness;
  double v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t AssociatedConformanceWitness;
  unint64_t v8;
  _QWORD v9[4];

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v3 = MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v4 + 16))((char *)v9 - v5, a1, AssociatedTypeWitness, v3);
  v6 = type metadata accessor for AnimatablePair<CGFloat, CGFloat>();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v8 = lazy protocol witness table accessor for type AnimatablePair<CGFloat, CGFloat> and conformance AnimatablePair<A, B>();
  v9[0] = AssociatedTypeWitness;
  v9[1] = v6;
  v9[2] = AssociatedConformanceWitness;
  v9[3] = v8;
  type metadata accessor for AnimatablePair();
}

uint64_t sub_2350FB630(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  _QWORD *v11;

  v7 = (uint64_t *)(v5 + *(int *)(a1 + 52));
  v8 = *v7;
  v9 = v7[1];
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 32))(v6, v4, v3);
  v11 = (_QWORD *)(v2 + *(int *)(v1 + 36));
  *v11 = v8;
  v11[1] = v9;
  return result;
}

uint64_t instantiation function for generic protocol witness table for _SizedShape<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return instantiation function for generic protocol witness table for RawRepresentableProxy<A>(a1, a2, a3, (uint64_t)&protocol conformance descriptor for _SizedShape<A>, (uint64_t)&protocol conformance descriptor for _SizedShape<A>);
}

void sub_2350FB694(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v5;

  v5 = type metadata accessor for _SizedShape(0, *(_QWORD *)(a2 + a1 - 16), *(_QWORD *)(a2 + a1 - 8), a3);
  _SizedShape.animatableData.getter(v5, a4);
}

void sub_2350FB6CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  type metadata accessor for _SizedShape(0, *(_QWORD *)(a4 + a3 - 16), *(_QWORD *)(a4 + a3 - 8), a4);
  specialized _SizedShape.animatableData.setter(a1);
}

uint64_t sub_2350FB708()
{
  return 16;
}

__n128 sub_2350FB714(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t type metadata completion function for _SizedShape()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t assignWithCopy for _SizedShape(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 24))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (_QWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = (_QWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *v7 = *v8;
  v7[1] = v8[1];
  return a1;
}

uint64_t assignWithTake for _SizedShape(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 40))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (_QWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = (_QWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *v7 = *v8;
  v7[1] = v8[1];
  return a1;
}

uint64_t getEnumTagSinglePayload for _SizedShape(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 >= a2)
  {
    if (v5)
      return (*(uint64_t (**)(void))(v4 + 48))();
    return 0;
  }
  if (((((*(_QWORD *)(v4 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 16) & 0xFFFFFFF8) != 0)
    v6 = 2;
  else
    v6 = a2 - v5 + 1;
  if (v6 >= 0x10000)
    v7 = 4;
  else
    v7 = 2;
  if (v6 < 0x100)
    v7 = 1;
  if (v6 >= 2)
    v8 = v7;
  else
    v8 = 0;
  return ((uint64_t (*)(void))((char *)&loc_2350FB8CC + 4 * byte_2352C9B00[v8]))();
}

void storeEnumTagSinglePayload for _SizedShape(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  int v11;
  unsigned int v12;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  if (v7 >= a3)
  {
    v11 = 0;
    if (a2 <= v7)
      goto LABEL_14;
  }
  else
  {
    v8 = a3 - v7;
    if (((*(_DWORD *)(v6 + 64) + 7) & 0xFFFFFFF8) == 0xFFFFFFF0)
      v9 = v8 + 1;
    else
      v9 = 2;
    if (v9 >= 0x10000)
      v10 = 4;
    else
      v10 = 2;
    if (v9 < 0x100)
      v10 = 1;
    if (v9 >= 2)
      v11 = v10;
    else
      v11 = 0;
    if (a2 <= v7)
LABEL_14:
      __asm { BR              X11 }
  }
  if (((*(_DWORD *)(v6 + 64) + 7) & 0xFFFFFFF8) != 0xFFFFFFF0)
  {
    v12 = ~v7 + a2;
    bzero(a1, ((*(_QWORD *)(v6 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 16);
    *a1 = v12;
  }
  __asm { BR              X10 }
}

void sub_2350FBA0C()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
}

void sub_2350FBA14(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x2350FBA1CLL);
}

void sub_2350FBA38()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
}

void sub_2350FBA40()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
}

uint64_t sub_2350FBA48(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_WORD *)(v4 + v5) = 0;
  if (!a2)
    JUMPOUT(0x2350FBA50);
  return (*(uint64_t (**)(uint64_t))(v3 + 56))(v4);
}

void sub_2350FBA68(_QWORD *a1)
{
  get_witness_table_7SwiftUI5ShapeRzlAA06_SizedC0VyxGAaBHPyHCTm(a1, (void (*)(uint64_t, _QWORD, _QWORD))type metadata accessor for _SizedShape);
}

void sub_2350FBA7C(_QWORD *a1)
{
  get_witness_table_7SwiftUI5ShapeRzlAA06_SizedC0VyxGAaBHPyHCTm(a1, (void (*)(uint64_t, _QWORD, _QWORD))type metadata accessor for AnchoredSizedShape);
}

void get_witness_table_7SwiftUI5ShapeRzlAA06_SizedC0VyxGAaBHPyHCTm(_QWORD *a1, void (*a2)(uint64_t, _QWORD, _QWORD))
{
  a2(255, *a1, a1[1]);
  JUMPOUT(0x23B7C9C04);
}

uint64_t type metadata accessor for AnchoredSizedShape(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AnchoredSizedShape);
}

uint64_t type metadata completion function for AnchoredSizedShape()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for AnchoredSizedShape(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v9;
  _OWORD *v10;
  _OWORD *v11;

  v4 = a1;
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0 || ((((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 16 > 0x18)
  {
    v9 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
    swift_retain();
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    v10 = (_OWORD *)(((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
    v11 = (_OWORD *)(((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
    *v10 = *v11;
    *(_OWORD *)(((unint64_t)v10 + 23) & 0xFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v11 + 23) & 0xFFFFFFFFFFFFF8);
  }
  return v4;
}

uint64_t initializeWithCopy for AnchoredSizedShape(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _OWORD *v7;
  _OWORD *v8;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 16))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (_OWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = (_OWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *v7 = *v8;
  *(_OWORD *)(((unint64_t)v7 + 23) & 0xFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v8 + 23) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t assignWithCopy for AnchoredSizedShape(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 24))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (_QWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = (_QWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *v7 = *v8;
  v7[1] = v8[1];
  v9 = (_QWORD *)(((unint64_t)v7 + 23) & 0xFFFFFFFFFFFFFFF8);
  v10 = (_QWORD *)(((unint64_t)v8 + 23) & 0xFFFFFFFFFFFFFFF8);
  *v9 = *v10;
  v9[1] = v10[1];
  return a1;
}

uint64_t initializeWithTake for AnchoredSizedShape(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _OWORD *v7;
  _OWORD *v8;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 32))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (_OWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = (_OWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *v7 = *v8;
  *(_OWORD *)(((unint64_t)v7 + 23) & 0xFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v8 + 23) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t assignWithTake for AnchoredSizedShape(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 40))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (_QWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = (_QWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *v7 = *v8;
  v7[1] = v8[1];
  v9 = (_QWORD *)(((unint64_t)v7 + 23) & 0xFFFFFFFFFFFFFFF8);
  v10 = (_QWORD *)(((unint64_t)v8 + 23) & 0xFFFFFFFFFFFFFFF8);
  *v9 = *v10;
  v9[1] = v10[1];
  return a1;
}

uint64_t getEnumTagSinglePayload for AnchoredSizedShape(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 >= a2)
  {
    if (v5)
      return (*(uint64_t (**)(void))(v4 + 48))();
    return 0;
  }
  if (((((((*(_QWORD *)(v4 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 16) & 0xFFFFFFF8) != 0)
    v6 = 2;
  else
    v6 = a2 - v5 + 1;
  if (v6 >= 0x10000)
    v7 = 4;
  else
    v7 = 2;
  if (v6 < 0x100)
    v7 = 1;
  if (v6 >= 2)
    v8 = v7;
  else
    v8 = 0;
  return ((uint64_t (*)(void))((char *)&loc_2350FBE68 + 4 * byte_2352C9B0F[v8]))();
}

void storeEnumTagSinglePayload for AnchoredSizedShape(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  int v11;
  unsigned int v12;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  if (v7 >= a3)
  {
    v11 = 0;
    if (a2 <= v7)
      goto LABEL_14;
  }
  else
  {
    v8 = a3 - v7;
    if (((((*(_DWORD *)(v6 + 64) + 7) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8) == 0xFFFFFFF0)
      v9 = v8 + 1;
    else
      v9 = 2;
    if (v9 >= 0x10000)
      v10 = 4;
    else
      v10 = 2;
    if (v9 < 0x100)
      v10 = 1;
    if (v9 >= 2)
      v11 = v10;
    else
      v11 = 0;
    if (a2 <= v7)
LABEL_14:
      __asm { BR              X11 }
  }
  if (((((*(_DWORD *)(v6 + 64) + 7) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8) != 0xFFFFFFF0)
  {
    v12 = ~v7 + a2;
    bzero(a1, ((((*(_QWORD *)(v6 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 16);
    *a1 = v12;
  }
  __asm { BR              X10 }
}

void sub_2350FBFB0()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
}

void sub_2350FBFB8(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x2350FBFC0);
}

void sub_2350FBFDC()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
}

void sub_2350FBFE4()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
}

uint64_t sub_2350FBFEC(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_WORD *)(v4 + v5) = 0;
  if (!a2)
    JUMPOUT(0x2350FBFF4);
  return (*(uint64_t (**)(uint64_t))(v3 + 56))(v4);
}

uint64_t instantiation function for generic protocol witness table for AnchoredSizedShape<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return instantiation function for generic protocol witness table for RawRepresentableProxy<A>(a1, a2, a3, (uint64_t)&protocol conformance descriptor for AnchoredSizedShape<A>, (uint64_t)&protocol conformance descriptor for AnchoredSizedShape<A>);
}

void TappableEvent.phase.getter(_BYTE *a1@<X8>)
{
  _BYTE *v1;

  *a1 = *v1;
}

_BYTE *TappableEvent.phase.setter(_BYTE *result)
{
  _BYTE *v1;

  *v1 = *result;
  return result;
}

uint64_t (*TappableEvent.phase.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

double TappableEvent.timestamp.getter@<D0>(double *a1@<X8>)
{
  uint64_t v1;
  double result;

  result = *(double *)(v1 + 8);
  *a1 = result;
  return result;
}

double TappableEvent.timestamp.setter(double *a1)
{
  uint64_t v1;
  double result;

  result = *a1;
  *(double *)(v1 + 8) = *a1;
  return result;
}

uint64_t (*TappableEvent.timestamp.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t TappableEvent.binding.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_QWORD *)(v1 + 16);
  return swift_retain();
}

uint64_t TappableEvent.binding.setter(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;

  v2 = *a1;
  result = swift_release();
  *(_QWORD *)(v1 + 16) = v2;
  return result;
}

uint64_t (*TappableEvent.binding.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

double TappableEvent.init<A>(_:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  char v8;
  double result;
  double v10;
  uint64_t v11;

  v7 = *(_QWORD *)(a3 + 8);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v7 + 8))(&v11, a2, v7);
  v8 = v11;
  (*(void (**)(double *__return_ptr, uint64_t, uint64_t))(v7 + 16))(&v10, a2, v7);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 8))(a1, a2);
  result = v10;
  *(_BYTE *)a4 = v8;
  *(double *)(a4 + 8) = result;
  *(_QWORD *)(a4 + 16) = 0;
  return result;
}

uint64_t TappableEvent.init(_:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;

  v5 = a1[3];
  v4 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v5);
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)(v4 + 8) + 8))(&v12, v5);
  v6 = v12;
  v8 = a1[3];
  v7 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v8);
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)(v7 + 8) + 16))(&v11, v8);
  v9 = v11;
  *(_BYTE *)a2 = v6;
  *(_QWORD *)(a2 + 8) = v9;
  *(_QWORD *)(a2 + 16) = 0;
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t TappableEvent.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  uint64_t result;
  __int128 v11;
  __int128 v12;
  __int128 v13[2];
  uint64_t v14;
  _QWORD v15[3];
  uint64_t v16;
  uint64_t v17;
  _BYTE v18[40];

  outlined init with copy of AnyTrackedValue(a1, (uint64_t)v15);
  type metadata accessor for ScrollStateRequest(0, (unint64_t *)&lazy cache variable for type metadata for EventType);
  type metadata accessor for ScrollStateRequest(0, &lazy cache variable for type metadata for TappableEventType);
  if ((swift_dynamicCast() & 1) != 0)
  {
    outlined init with take of ScrollStateRequest(v13, (uint64_t)v18);
    outlined init with copy of AnyTrackedValue((uint64_t)v18, (uint64_t)v15);
    v5 = v16;
    v4 = v17;
    __swift_project_boxed_opaque_existential_1(v15, v16);
    (*(void (**)(__int128 *__return_ptr, uint64_t))(*(_QWORD *)(v4 + 8) + 8))(v13, v5);
    v6 = LOBYTE(v13[0]);
    v8 = v16;
    v7 = v17;
    __swift_project_boxed_opaque_existential_1(v15, v16);
    (*(void (**)(__int128 *__return_ptr, uint64_t))(*(_QWORD *)(v7 + 8) + 16))(v13, v8);
    *(_QWORD *)&v9 = *(_QWORD *)&v13[0];
    v12 = v9;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v15);
    __swift_destroy_boxed_opaque_existential_1(a1);
    result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v18);
    v11 = v12;
  }
  else
  {
    v14 = 0;
    memset(v13, 0, sizeof(v13));
    __swift_destroy_boxed_opaque_existential_1(a1);
    result = outlined destroy of TypesettingConfiguration((uint64_t)v13, (uint64_t (*)(_QWORD))type metadata accessor for TappableEventType?);
    v6 = 0;
    v11 = xmmword_235260F20;
  }
  *(_QWORD *)a2 = v6;
  *(_OWORD *)(a2 + 8) = v11;
  return result;
}

void type metadata accessor for TappableEventType?()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for TappableEventType?)
  {
    type metadata accessor for ScrollStateRequest(255, &lazy cache variable for type metadata for TappableEventType);
    v0 = type metadata accessor for Optional();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TappableEventType?);
  }
}

void TappableSpatialEvent.phase.getter(_BYTE *a1@<X8>)
{
  _BYTE *v1;

  *a1 = *v1;
}

_BYTE *TappableSpatialEvent.phase.setter(_BYTE *result)
{
  _BYTE *v1;

  *v1 = *result;
  return result;
}

uint64_t (*TappableSpatialEvent.phase.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

double TappableSpatialEvent.timestamp.getter@<D0>(double *a1@<X8>)
{
  uint64_t v1;
  double result;

  result = *(double *)(v1 + 8);
  *a1 = result;
  return result;
}

double TappableSpatialEvent.timestamp.setter(double *a1)
{
  uint64_t v1;
  double result;

  result = *a1;
  *(double *)(v1 + 8) = *a1;
  return result;
}

uint64_t (*TappableSpatialEvent.timestamp.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t TappableSpatialEvent.binding.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_QWORD *)(v1 + 16);
  return swift_retain();
}

uint64_t TappableSpatialEvent.binding.setter(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;

  v2 = *a1;
  result = swift_release();
  *(_QWORD *)(v1 + 16) = v2;
  return result;
}

uint64_t (*TappableSpatialEvent.binding.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

double TappableSpatialEvent.globalLocation.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 24);
}

void TappableSpatialEvent.globalLocation.setter(double a1, double a2)
{
  uint64_t v2;

  *(double *)(v2 + 24) = a1;
  *(double *)(v2 + 32) = a2;
}

uint64_t (*TappableSpatialEvent.globalLocation.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

double TappableSpatialEvent.location.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 40);
}

void TappableSpatialEvent.location.setter(double a1, double a2)
{
  uint64_t v2;

  *(double *)(v2 + 40) = a1;
  *(double *)(v2 + 48) = a2;
}

uint64_t (*TappableSpatialEvent.location.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

double TappableSpatialEvent.radius.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 56);
}

void TappableSpatialEvent.radius.setter(double a1)
{
  uint64_t v1;

  *(double *)(v1 + 56) = a1;
}

uint64_t (*TappableSpatialEvent.radius.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t TappableSpatialEvent.init<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  char v9;
  uint64_t v10;
  double v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;

  v8 = *(_QWORD *)(a3 + 8);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v8 + 8))(&v20, a2, v8);
  v9 = v20;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v8 + 16))(&v19, a2, v8);
  v10 = v19;
  v11 = (*(double (**)(uint64_t, uint64_t))(a3 + 16))(a2, a3);
  v13 = v12;
  v14 = (*(double (**)(uint64_t, uint64_t))(a3 + 40))(a2, a3);
  v16 = v15;
  v17 = (*(double (**)(uint64_t, uint64_t))(a3 + 64))(a2, a3);
  result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 8))(a1, a2);
  *(_BYTE *)a4 = v9;
  *(_QWORD *)(a4 + 8) = v10;
  *(_QWORD *)(a4 + 16) = 0;
  *(double *)(a4 + 24) = v11;
  *(_QWORD *)(a4 + 32) = v13;
  *(double *)(a4 + 40) = v14;
  *(_QWORD *)(a4 + 48) = v16;
  *(double *)(a4 + 56) = v17;
  return result;
}

uint64_t TappableSpatialEvent.init(_:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  double v22;
  uint64_t v24;
  uint64_t v25;

  v5 = a1[3];
  v4 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v5);
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)(v4 + 8) + 8))(&v25, v5);
  v6 = v25;
  v8 = a1[3];
  v7 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v8);
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)(v7 + 8) + 16))(&v24, v8);
  v9 = v24;
  v10 = a1[3];
  v11 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v10);
  v12 = (*(double (**)(uint64_t, uint64_t))(v11 + 16))(v10, v11);
  v14 = v13;
  v15 = a1[3];
  v16 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v15);
  v17 = (*(double (**)(uint64_t, uint64_t))(v16 + 40))(v15, v16);
  v19 = v18;
  v20 = a1[3];
  v21 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v20);
  v22 = (*(double (**)(uint64_t, uint64_t))(v21 + 64))(v20, v21);
  *(_BYTE *)a2 = v6;
  *(_QWORD *)(a2 + 8) = v9;
  *(_QWORD *)(a2 + 16) = 0;
  *(double *)(a2 + 24) = v12;
  *(_QWORD *)(a2 + 32) = v14;
  *(double *)(a2 + 40) = v17;
  *(_QWORD *)(a2 + 48) = v19;
  *(double *)(a2 + 56) = v22;
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t TappableSpatialEvent.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v10[6];
  _BYTE v11[56];
  uint64_t v12;
  _OWORD v13[3];

  outlined init with copy of AnyTrackedValue(a1, (uint64_t)v10);
  type metadata accessor for ScrollStateRequest(0, (unint64_t *)&lazy cache variable for type metadata for EventType);
  type metadata accessor for SpatialEventType & TappableEventType();
  if ((swift_dynamicCast() & 1) != 0)
  {
    outlined init with take of Decodable & Encodable((__int128 *)v11, v13);
    outlined init with copy of Decodable & Encodable((uint64_t)v13, (uint64_t)v10);
    TappableSpatialEvent.init(_:)(v10, (uint64_t)v11);
    __swift_destroy_boxed_opaque_existential_1(a1);
    result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v13);
    v5 = v11[0];
    v6 = *(_OWORD *)&v11[8];
    v7 = *(_OWORD *)&v11[24];
    v8 = *(_OWORD *)&v11[40];
    v9 = v12;
  }
  else
  {
    memset(v11, 0, 48);
    __swift_destroy_boxed_opaque_existential_1(a1);
    result = outlined destroy of TypesettingConfiguration((uint64_t)v11, (uint64_t (*)(_QWORD))type metadata accessor for (SpatialEventType & TappableEventType)?);
    v7 = 0uLL;
    v5 = 0;
    v9 = 0;
    v6 = xmmword_235260F20;
    v8 = 0uLL;
  }
  *(_QWORD *)a2 = v5;
  *(_OWORD *)(a2 + 8) = v6;
  *(_OWORD *)(a2 + 24) = v7;
  *(_OWORD *)(a2 + 40) = v8;
  *(_QWORD *)(a2 + 56) = v9;
  return result;
}

void protocol witness for SpatialEventType.globalLocation.setter in conformance TappableSpatialEvent(double a1, double a2)
{
  uint64_t v2;

  *(double *)(v2 + 24) = a1;
  *(double *)(v2 + 32) = a2;
}

uint64_t (*protocol witness for SpatialEventType.globalLocation.modify in conformance TappableSpatialEvent())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

double protocol witness for SpatialEventType.location.getter in conformance TappableSpatialEvent()
{
  uint64_t v0;

  return *(double *)(v0 + 40);
}

void protocol witness for SpatialEventType.location.setter in conformance TappableSpatialEvent(double a1, double a2)
{
  uint64_t v2;

  *(double *)(v2 + 40) = a1;
  *(double *)(v2 + 48) = a2;
}

double protocol witness for SpatialEventType.radius.getter in conformance TappableSpatialEvent()
{
  uint64_t v0;

  return *(double *)(v0 + 56);
}

BOOL specialized static TappableEvent.== infix(_:_:)(double *a1, double *a2)
{
  uint64_t v3;
  uint64_t v4;

  if (*(unsigned __int8 *)a1 != *(unsigned __int8 *)a2 || a1[1] != a2[1])
    return 0;
  v3 = *((_QWORD *)a1 + 2);
  v4 = *((_QWORD *)a2 + 2);
  if (!v3)
  {
    if (!v4)
      return 1;
    goto LABEL_13;
  }
  if (!v4)
  {
    swift_retain();
LABEL_13:
    swift_release();
    return 0;
  }
  return v3 == v4;
}

unint64_t type metadata accessor for SpatialEventType & TappableEventType()
{
  unint64_t result;

  result = lazy cache variable for type metadata for SpatialEventType & TappableEventType;
  if (!lazy cache variable for type metadata for SpatialEventType & TappableEventType)
  {
    result = swift_getExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for SpatialEventType & TappableEventType);
  }
  return result;
}

void type metadata accessor for (SpatialEventType & TappableEventType)?()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for (SpatialEventType & TappableEventType)?)
  {
    type metadata accessor for SpatialEventType & TappableEventType();
    v0 = type metadata accessor for Optional();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for (SpatialEventType & TappableEventType)?);
  }
}

BOOL specialized static TappableSpatialEvent.== infix(_:_:)(double *a1, double *a2)
{
  _BOOL8 result;
  uint64_t v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  uint64_t v10;
  double v11;
  double v12;
  double v13;
  double v14;
  BOOL v15;
  BOOL v16;

  result = 0;
  if (*(unsigned __int8 *)a1 != *(unsigned __int8 *)a2 || a1[1] != a2[1])
    return result;
  v4 = *((_QWORD *)a1 + 2);
  v6 = a1[3];
  v5 = a1[4];
  v8 = a1[5];
  v7 = a1[6];
  v9 = a1[7];
  v10 = *((_QWORD *)a2 + 2);
  v12 = a2[3];
  v11 = a2[4];
  v14 = a2[5];
  v13 = a2[6];
  if (!v4)
  {
    if (!v10)
    {
      if (v6 == v12 && v5 == v11 && v8 == v14 && v7 == v13)
        return v9 == a2[7];
      return 0;
    }
LABEL_20:
    swift_release();
    return 0;
  }
  if (!v10)
  {
    swift_retain();
    goto LABEL_20;
  }
  result = 0;
  if (v4 == v10)
  {
    v15 = v6 == v12 && v5 == v11;
    v16 = v15 && v8 == v14;
    if (v16 && v7 == v13)
      return v9 == a2[7];
  }
  return result;
}

ValueMetadata *type metadata accessor for TappableEvent()
{
  return &type metadata for TappableEvent;
}

uint64_t initializeWithCopy for TappableSpatialEvent(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v3 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for TappableSpatialEvent(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  return a1;
}

uint64_t assignWithTake for TappableSpatialEvent(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_release();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  return a1;
}

uint64_t getEnumTagSinglePayload for TappableSpatialEvent(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 64))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 16);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for TappableSpatialEvent(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 64) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 64) = 0;
    if (a2)
      *(_QWORD *)(result + 16) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for TappableSpatialEvent()
{
  return &type metadata for TappableSpatialEvent;
}

uint64_t dispatch thunk of TouchTypeProviding.touchType.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

SwiftUI::ProtobufFormat::Field_optional __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> ProtobufDecoder.nextField()()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  Swift::UInt v5;
  unint64_t v6;
  Swift::Bool v7;
  SwiftUI::ProtobufFormat::Field_optional result;

  v3 = v0;
  v4 = v1[1];
  if (v4 >= v1[2])
  {
    v5 = 0;
    v1[3] = 0;
    goto LABEL_10;
  }
  v5 = v1[3];
  if (v5)
  {
    v6 = v1[4];
    if (v4 < v6)
      goto LABEL_10;
    if (v6 < v4)
    {
LABEL_8:
      lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
      swift_allocError();
      v5 = swift_willThrow();
      goto LABEL_11;
    }
    v1[3] = 0;
  }
  v5 = ProtobufDecoder.decodeVarint()();
  if (!v2)
  {
    if (v5 < 8)
      goto LABEL_8;
LABEL_10:
    *(_QWORD *)v3 = v5;
    *(_BYTE *)(v3 + 8) = v5 == 0;
  }
LABEL_11:
  result.value.rawValue = v5;
  result.is_nil = v7;
  return result;
}

Swift::Double ProtobufDecoder.cgFloatField(_:)(uint64_t *a1)
{
  uint64_t v2;

  v2 = *a1;
  return ProtobufDecoder.doubleField(_:)((SwiftUI::ProtobufFormat::Field)&v2);
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> ProtobufDecoder.skipField(_:)(SwiftUI::ProtobufFormat::Field a1)
{
  uint64_t v1;
  unint64_t v2;

  switch(*(_QWORD *)a1.rawValue & 7)
  {
    case 0:
      ProtobufDecoder.decodeVarint()();
      return;
    case 1:
      v2 = *(_QWORD *)(v1 + 8) + 8;
      if (*(_QWORD *)(v1 + 16) < v2)
        goto LABEL_7;
      goto LABEL_4;
    case 2:
      ProtobufDecoder.decodeDataBuffer()();
      return;
    case 5:
      v2 = *(_QWORD *)(v1 + 8) + 4;
      if (*(_QWORD *)(v1 + 16) < v2)
        goto LABEL_7;
LABEL_4:
      *(_QWORD *)(v1 + 8) = v2;
      break;
    default:
LABEL_7:
      lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
      swift_allocError();
      swift_willThrow();
      break;
  }
}

Swift::UInt ProtobufDecoder.enumField<A>(_:)(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  Swift::UInt result;
  uint64_t v6;
  uint64_t v7;

  v7 = *a1;
  result = ProtobufDecoder.uintField(_:)((SwiftUI::ProtobufFormat::Field)&v7);
  if (!v6)
    return (*(uint64_t (**)(Swift::UInt, uint64_t, uint64_t))(a3 + 16))(result, a2, a3);
  return result;
}

uint64_t ProtobufDecoder.messageField<A>(_:)(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  if ((*a1 & 7) == 2)
    return ProtobufDecoder.decodeMessage<A>()(a2, a3);
  lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
  swift_allocError();
  return swift_willThrow();
}

Swift::String __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> ProtobufDecoder.stringField(_:)(SwiftUI::ProtobufFormat::Field a1)
{
  uint64_t v1;
  void *v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  void *v14;
  Swift::String result;
  uint64_t v16;
  uint64_t v17;

  v4 = type metadata accessor for String.Encoding();
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = *(_QWORD *)a1.rawValue;
  v7 = ProtobufDecoder.dataField(_:)(&v17);
  if (!v1)
  {
    v9 = v7;
    v10 = v8;
    static String.Encoding.utf8.getter();
    v11 = String.init(data:encoding:)();
    if (v12)
    {
      v6 = (char *)v11;
      v2 = v12;
    }
    else
    {
      lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
      swift_allocError();
      swift_willThrow();
    }
    outlined consume of Data._Representation(v9, v10);
  }
  v13 = (uint64_t)v6;
  v14 = v2;
  result._object = v14;
  result._countAndFlagsBits = v13;
  return result;
}

void ProtobufDecoder.codableField<A>(_:)(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  __int128 *v4;
  uint64_t v5;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  __int128 v14;
  uint64_t v15;

  v14 = *v4;
  v15 = *a1;
  v8 = (id)v14;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v9 = ProtobufDecoder.dataField(_:)(&v15);
  if (v5)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

  }
  else
  {
    v11 = v9;
    v12 = v10;
    ProtobufDecoder.value<A>(fromBinaryPlist:type:)(v10, a2, a3, a4);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    outlined consume of Data._Representation(v11, v12);
  }
}

Swift::UInt __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> ProtobufDecoder.uintField(_:)(SwiftUI::ProtobufFormat::Field a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  Swift::UInt result;
  Swift::UInt v5;

  v3 = *(_QWORD *)a1.rawValue;
  if ((*(_QWORD *)a1.rawValue & 7) == 0)
    return ProtobufDecoder.decodeVarint()();
  if ((*(_QWORD *)a1.rawValue & 7) != 2)
  {
LABEL_6:
    lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
    swift_allocError();
    return swift_willThrow();
  }
  result = ProtobufDecoder.decodeVarint()();
  if (!v2)
  {
    if ((result & 0x8000000000000000) != 0)
    {
      __break(1u);
      return result;
    }
    v5 = v1[1] + result;
    if (v1[2] < v5)
      goto LABEL_6;
    v1[3] = v3 & 0xFFFFFFFFFFFFFFF8;
    v1[4] = v5;
    return ProtobufDecoder.decodeVarint()();
  }
  return result;
}

uint64_t ProtobufDecoder.messageField<A>(_:_:)(_QWORD *a1, void (*a2)(uint64_t))
{
  if ((*a1 & 7) == 2)
    return ProtobufDecoder.decodeMessage<A>(_:)(a2);
  lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
  swift_allocError();
  return swift_willThrow();
}

Swift::Int __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> ProtobufDecoder.intField(_:)(SwiftUI::ProtobufFormat::Field a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  Swift::Int result;
  unint64_t v5;

  v3 = *(_QWORD *)a1.rawValue;
  if ((*(_QWORD *)a1.rawValue & 7) == 0)
  {
LABEL_8:
    result = ProtobufDecoder.decodeVarint()();
    if (!v2)
      return -(result & 1) ^ (result >> 1);
    return result;
  }
  if ((*(_QWORD *)a1.rawValue & 7) != 2)
  {
LABEL_6:
    lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
    swift_allocError();
    return swift_willThrow();
  }
  result = ProtobufDecoder.decodeVarint()();
  if (!v2)
  {
    if (result < 0)
    {
      __break(1u);
      return result;
    }
    v5 = v1[1] + result;
    if (v1[2] < v5)
      goto LABEL_6;
    v1[3] = v3 & 0xFFFFFFFFFFFFFFF8;
    v1[4] = v5;
    goto LABEL_8;
  }
  return result;
}

Swift::Bool __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> ProtobufDecoder.BOOLField(_:)(SwiftUI::ProtobufFormat::Field a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  unint64_t v6;
  uint64_t v7;

  v3 = *(_QWORD *)a1.rawValue;
  if ((*(_QWORD *)a1.rawValue & 7) == 0)
    goto LABEL_8;
  if ((*(_QWORD *)a1.rawValue & 7) != 2)
  {
LABEL_6:
    lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
    swift_allocError();
    swift_willThrow();
    goto LABEL_10;
  }
  v4 = ProtobufDecoder.decodeVarint()();
  if (!v2)
  {
    if (v4 < 0)
    {
      __break(1u);
      return v4;
    }
    v6 = v1[1] + v4;
    if (v1[2] < v6)
      goto LABEL_6;
    v1[3] = v3 & 0xFFFFFFFFFFFFFFF8;
    v1[4] = v6;
LABEL_8:
    v7 = ProtobufDecoder.decodeVarint()();
    if (!v2)
      v5 = v7 != 0;
  }
LABEL_10:
  LOBYTE(v4) = v5;
  return v4;
}

Swift::Double __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> ProtobufDecoder.doubleField(_:)(SwiftUI::ProtobufFormat::Field a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  Swift::Double *v5;
  unint64_t v6;
  Swift::Double result;
  float *v8;
  float v9;
  uint64_t v10;

  v3 = *(_QWORD *)a1.rawValue;
  v4 = *(_QWORD *)a1.rawValue & 7;
  switch(v4)
  {
    case 5:
      v8 = (float *)v1[1];
      if (v1[2] >= (unint64_t)(v8 + 1))
      {
        v9 = *v8;
        v1[1] = v8 + 1;
        return v9;
      }
      break;
    case 2:
      v10 = ProtobufDecoder.decodeVarint()();
      if (v2)
        return result;
      if (v10 < 0)
      {
        __break(1u);
        return result;
      }
      v5 = (Swift::Double *)v1[1];
      v6 = v1[2];
      if (v6 >= (unint64_t)v5 + v10)
      {
        v1[3] = v3 & 0xFFFFFFFFFFFFFFF8 | 1;
        v1[4] = (char *)v5 + v10;
LABEL_5:
        if (v6 >= (unint64_t)(v5 + 1))
        {
          result = *v5;
          v1[1] = v5 + 1;
          return result;
        }
      }
      break;
    case 1:
      v5 = (Swift::Double *)v1[1];
      v6 = v1[2];
      goto LABEL_5;
  }
  lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
  swift_allocError();
  swift_willThrow();
  return result;
}

Swift::UInt8 __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> ProtobufDecoder.uint8Field(_:)(SwiftUI::ProtobufFormat::Field a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)a1.rawValue;
  return ProtobufDecoder.uintField(_:)((SwiftUI::ProtobufFormat::Field)&v2);
}

Swift::Float __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> ProtobufDecoder.floatField(_:)(SwiftUI::ProtobufFormat::Field a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  Swift::Float *v5;
  unint64_t v6;
  Swift::Float result;
  uint64_t v8;

  v3 = *(_QWORD *)a1.rawValue;
  v4 = *(_QWORD *)a1.rawValue & 7;
  if (v4 == 2)
  {
    v8 = ProtobufDecoder.decodeVarint()();
    if (v2)
      return result;
    if (v8 < 0)
    {
      __break(1u);
      return result;
    }
    v5 = (Swift::Float *)v1[1];
    v6 = v1[2];
    if (v6 >= (unint64_t)v5 + v8)
    {
      v1[3] = v3 & 0xFFFFFFFFFFFFFFF8 | 5;
      v1[4] = (char *)v5 + v8;
LABEL_4:
      if (v6 >= (unint64_t)(v5 + 1))
      {
        result = *v5;
        v1[1] = v5 + 1;
        return result;
      }
    }
  }
  else if (v4 == 5)
  {
    v5 = (Swift::Float *)v1[1];
    v6 = v1[2];
    goto LABEL_4;
  }
  lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
  swift_allocError();
  swift_willThrow();
  return result;
}

Swift::UInt32 __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> ProtobufDecoder.uint32Field(_:)(SwiftUI::ProtobufFormat::Field a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)a1.rawValue;
  return ProtobufDecoder.uintField(_:)((SwiftUI::ProtobufFormat::Field)&v2);
}

uint64_t ProtobufDecoder.dataBufferField(_:)(_QWORD *a1)
{
  if ((*a1 & 7) == 2)
    return ProtobufDecoder.decodeDataBuffer()();
  lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
  swift_allocError();
  return swift_willThrow();
}

uint64_t ProtobufDecoder.dataField(_:)(_QWORD *a1)
{
  id *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;

  if ((*a1 & 7) != 2)
  {
    lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
    swift_allocError();
    swift_willThrow();
    return v3;
  }
  v4 = ProtobufDecoder.decodeDataBuffer()();
  if (v2)
    return v3;
  v3 = 0;
  if (!v4)
    return v3;
  v6 = v5 - v4;
  if (v5 == v4)
    return v3;
  v7 = v4 - (_QWORD)objc_msgSend(objc_retainAutorelease(*v1), sel_bytes);
  result = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  v10 = v9;
  if (__OFADD__(v7, v6))
  {
    __break(1u);
  }
  else if (v7 + v6 >= v7)
  {
    v11 = result;
    v3 = Data._Representation.subscript.getter();
    outlined consume of Data._Representation(v11, v10);
    return v3;
  }
  __break(1u);
  return result;
}

void ProtobufDecoder.init(_:)(uint64_t a1, uint64_t a2)
{
  objc_class *v3;
  objc_class *v4;

  v3 = Data._bridgeToObjectiveC()().super.isa;
  -[objc_class bytes](v3, sel_bytes);
  v4 = v3;
  __asm { BR              X10 }
}

uint64_t sub_2350FD69C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;

  result = outlined consume of Data._Representation(v4, v3);
  *v0 = v2;
  v0[1] = v1;
  v6 = MEMORY[0x24BEE4AF8];
  v0[2] = v1 + BYTE6(v3);
  v0[3] = 0;
  v0[4] = v1;
  v0[5] = v6;
  v0[6] = MEMORY[0x24BEE4B00];
  return result;
}

Swift::UInt64 __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> ProtobufDecoder.uint64Field(_:)(SwiftUI::ProtobufFormat::Field a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  Swift::UInt64 result;
  Swift::UInt64 v5;

  v3 = *(_QWORD *)a1.rawValue;
  if ((*(_QWORD *)a1.rawValue & 7) == 0)
    return ProtobufDecoder.decodeVarint()();
  if ((*(_QWORD *)a1.rawValue & 7) != 2)
  {
LABEL_6:
    lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
    swift_allocError();
    return swift_willThrow();
  }
  result = ProtobufDecoder.decodeVarint()();
  if (!v2)
  {
    if ((result & 0x8000000000000000) != 0)
    {
      __break(1u);
      return result;
    }
    v5 = v1[1] + result;
    if (v1[2] < v5)
      goto LABEL_6;
    v1[3] = v3 & 0xFFFFFFFFFFFFFFF8;
    v1[4] = v5;
    return ProtobufDecoder.decodeVarint()();
  }
  return result;
}

Swift::UInt16 __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> ProtobufDecoder.uint16Field(_:)(SwiftUI::ProtobufFormat::Field a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)a1.rawValue;
  return ProtobufDecoder.uintField(_:)((SwiftUI::ProtobufFormat::Field)&v2);
}

uint64_t static ProtobufDecoder.DecodingError.== infix(_:_:)()
{
  return 1;
}

void ProtobufDecoder.DecodingError.hash(into:)()
{
  Hasher._combine(_:)(0);
}

Swift::Int ProtobufDecoder.DecodingError.hashValue.getter()
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(0);
  return Hasher._finalize()();
}

uint64_t ProtobufDecoder.userInfo.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t ProtobufDecoder.userInfo.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 48) = a1;
  return result;
}

uint64_t (*ProtobufDecoder.userInfo.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t ProtobufDecoder.decodeVarint()()
{
  uint64_t v0;
  _BYTE *v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t result;
  _BYTE *v5;
  unint64_t v6;
  _BYTE *v7;

  v1 = *(_BYTE **)(v0 + 8);
  v2 = *(_QWORD *)(v0 + 16);
  if (v2 < (unint64_t)(v1 + 1))
  {
LABEL_8:
    lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
    swift_allocError();
    return swift_willThrow();
  }
  else
  {
    v3 = 0;
    result = 0;
    while (1)
    {
      v5 = v1 + 1;
      v6 = (unint64_t)(*v1 & 0x7F) << v3;
      if (v3 > 0x3F)
        v6 = 0;
      result |= v6;
      if ((*v1 & 0x80) == 0)
        break;
      v3 += 7;
      v7 = v1 + 2;
      ++v1;
      if (v2 < (unint64_t)v7)
      {
        *(_QWORD *)(v0 + 8) = v5;
        goto LABEL_8;
      }
    }
    *(_QWORD *)(v0 + 8) = v1 + 1;
  }
  return result;
}

uint64_t ProtobufDecoder.decodeDataBuffer()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;
  uint64_t v3;

  result = ProtobufDecoder.decodeVarint()();
  if (!v1)
  {
    v3 = result;
    if (result < 0)
    {
      __break(1u);
    }
    else
    {
      result = *(_QWORD *)(v0 + 8);
      if (*(_QWORD *)(v0 + 16) >= (unint64_t)(result + v3))
      {
        *(_QWORD *)(v0 + 8) = result + v3;
      }
      else
      {
        lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
        swift_allocError();
        return swift_willThrow();
      }
    }
  }
  return result;
}

Swift::UInt32 __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> ProtobufDecoder.fixed32Field(_:)(SwiftUI::ProtobufFormat::Field a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _DWORD *v5;
  unint64_t v6;
  uint64_t v7;

  v3 = *(_QWORD *)a1.rawValue;
  v4 = *(_QWORD *)a1.rawValue & 7;
  if (v4 != 2)
  {
    if (v4 == 5)
    {
      v5 = (_DWORD *)v1[1];
      v6 = v1[2];
      goto LABEL_4;
    }
LABEL_9:
    lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
    swift_allocError();
    LODWORD(v7) = swift_willThrow();
    return v7;
  }
  v7 = ProtobufDecoder.decodeVarint()();
  if (v2)
    return v7;
  if (v7 < 0)
  {
    __break(1u);
    return v7;
  }
  v5 = (_DWORD *)v1[1];
  v6 = v1[2];
  if (v6 < (unint64_t)v5 + v7)
    goto LABEL_9;
  v1[3] = v3 & 0xFFFFFFFFFFFFFFF8 | 5;
  v1[4] = (char *)v5 + v7;
LABEL_4:
  if (v6 < (unint64_t)(v5 + 1))
    goto LABEL_9;
  LODWORD(v7) = *v5;
  v1[1] = v5 + 1;
  return v7;
}

Swift::UInt64 __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> ProtobufDecoder.fixed64Field(_:)(SwiftUI::ProtobufFormat::Field a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  Swift::UInt64 *v5;
  unint64_t v6;
  Swift::UInt64 result;

  v3 = *(_QWORD *)a1.rawValue;
  v4 = *(_QWORD *)a1.rawValue & 7;
  if (v4 == 2)
  {
    result = ProtobufDecoder.decodeVarint()();
    if (v2)
      return result;
    if ((result & 0x8000000000000000) != 0)
    {
      __break(1u);
      return result;
    }
    v5 = (Swift::UInt64 *)v1[1];
    v6 = v1[2];
    if (v6 >= (unint64_t)v5 + result)
    {
      v1[3] = v3 & 0xFFFFFFFFFFFFFFF8 | 1;
      v1[4] = (char *)v5 + result;
LABEL_4:
      if (v6 >= (unint64_t)(v5 + 1))
      {
        result = *v5;
        v1[1] = v5 + 1;
        return result;
      }
    }
  }
  else if (v4 == 1)
  {
    v5 = (Swift::UInt64 *)v1[1];
    v6 = v1[2];
    goto LABEL_4;
  }
  lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
  swift_allocError();
  return swift_willThrow();
}

uint64_t ProtobufDecoder.decodeMessage<A>()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = v2;
  result = ProtobufDecoder.beginMessage()();
  if (!v3)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(a2 + 8))(v2, a1, a2);
    v8 = *(_QWORD **)(v2 + 40);
    if (v8[2])
    {
      result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) != 0)
      {
        v9 = v8[2];
        if (v9)
        {
LABEL_5:
          v10 = v9 - 1;
          v11 = v8[v10 + 4];
          v8[2] = v10;
          *(_QWORD *)(v4 + 40) = v8;
          *(_QWORD *)(v4 + 16) = v11;
          return result;
        }
LABEL_9:
        __break(1u);
        return result;
      }
    }
    else
    {
      __break(1u);
    }
    result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v8);
    v8 = (_QWORD *)result;
    v9 = *(_QWORD *)(result + 16);
    if (v9)
      goto LABEL_5;
    goto LABEL_9;
  }
  return result;
}

uint64_t ProtobufDecoder.decodeMessage<A>(_:)(void (*a1)(uint64_t))
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = v1;
  result = ProtobufDecoder.beginMessage()();
  if (!v2)
  {
    a1(v1);
    v6 = *(_QWORD **)(v1 + 40);
    if (v6[2])
    {
      result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) != 0)
      {
        v7 = v6[2];
        if (v7)
        {
LABEL_5:
          v8 = v7 - 1;
          v9 = v6[v8 + 4];
          v6[2] = v8;
          *(_QWORD *)(v3 + 40) = v6;
          *(_QWORD *)(v3 + 16) = v9;
          return result;
        }
LABEL_9:
        __break(1u);
        return result;
      }
    }
    else
    {
      __break(1u);
    }
    result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v6);
    v6 = (_QWORD *)result;
    v7 = *(_QWORD *)(result + 16);
    if (v7)
      goto LABEL_5;
    goto LABEL_9;
  }
  return result;
}

uint64_t specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + a1);
}

{
  return *(unsigned int *)(a2 + a1);
}

uint64_t ProtobufDecoder.beginMessage()()
{
  _QWORD *v0;
  uint64_t v1;
  unint64_t v2;
  _QWORD *v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t result;
  unint64_t v7;

  v2 = v0[2];
  v3 = (_QWORD *)v0[5];
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3[2] + 1, 1, v3);
  v5 = v3[2];
  v4 = v3[3];
  if (v5 >= v4 >> 1)
    v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v4 > 1), v5 + 1, 1, v3);
  v3[2] = v5 + 1;
  v3[v5 + 4] = v2;
  v0[5] = v3;
  result = ProtobufDecoder.decodeVarint()();
  if (!v1)
  {
    if (result < 0)
    {
      __break(1u);
    }
    else
    {
      v7 = v0[1] + result;
      if (v2 >= v7)
      {
        v0[2] = v7;
      }
      else
      {
        lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
        swift_allocError();
        return swift_willThrow();
      }
    }
  }
  return result;
}

uint64_t destroy for ProtobufDecoder(id *a1)
{

  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for ProtobufDecoder(uint64_t a1, uint64_t a2)
{
  void *v3;
  uint64_t v4;
  id v5;

  v3 = *(void **)a2;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v4;
  v5 = v3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for ProtobufDecoder(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;

  v4 = *(void **)a2;
  v5 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = v4;

  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for ProtobufDecoder(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for ProtobufDecoder()
{
  return &type metadata for ProtobufDecoder;
}

uint64_t storeEnumTagSinglePayload for ProtobufDecoder.DecodingError(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_2350FE058 + 4 * byte_2352C9D7A[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_2350FE078 + 4 * byte_2352C9D7F[v4]))();
}

_BYTE *sub_2350FE058(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_2350FE078(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_2350FE080(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_2350FE088(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_2350FE090(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_2350FE098(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for ProtobufDecoder.DecodingError()
{
  return &type metadata for ProtobufDecoder.DecodingError;
}

uint64_t EnvironmentValues.capitalizationContext.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  void (**v5)(void);
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  _BYTE v10[16];

  v3 = type metadata accessor for EnvironmentValues.Key.Value();
  MEMORY[0x24BDAC7A8](v3);
  v5 = (void (**)(void))&v10[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v6 = *v1;
  if (v1[1])
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v6, (uint64_t)v5);
    swift_release_n();
  }
  else
  {
    v7 = swift_retain_n();
    specialized closure #1 in PropertyList.subscript.getter(v7, (uint64_t)v5);
    swift_release();
  }
  swift_release_n();
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    (*v5)();
    return swift_release();
  }
  else
  {
    v9 = type metadata accessor for FormatStyleCapitalizationContext();
    return (*(uint64_t (**)(uint64_t, void (**)(void), uint64_t))(*(_QWORD *)(v9 - 8) + 32))(a1, v5, v9);
  }
}

uint64_t type metadata accessor for EnvironmentValues.Key.Value()
{
  uint64_t result;

  result = type metadata singleton initialization cache for EnvironmentValues.Key.Value;
  if (!type metadata singleton initialization cache for EnvironmentValues.Key.Value)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t EnvironmentValues.capitalizationContext(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v8;

  v4 = type metadata accessor for EnvironmentValues.Key.Value();
  MEMORY[0x24BDAC7A8](v4);
  v6 = (uint64_t *)((char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  *v6 = a1;
  v6[1] = a2;
  swift_storeEnumTagMultiPayload();
  swift_retain();
  specialized EnvironmentValues._set<A>(_:for:)((uint64_t)v6);
  return outlined destroy of EnvironmentValues.Key.Value((uint64_t)v6);
}

uint64_t outlined destroy of EnvironmentValues.Key.Value(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for EnvironmentValues.Key.Value();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t key path setter for EnvironmentValues.capitalizationContext : EnvironmentValues(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  double v7;
  uint64_t v8;
  char *v9;
  void (*v10)(char *, uint64_t, uint64_t, double);
  uint64_t v12;

  v2 = type metadata accessor for EnvironmentValues.Key.Value();
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)&v12 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for FormatStyleCapitalizationContext();
  v6 = *(_QWORD *)(v5 - 8);
  v7 = MEMORY[0x24BDAC7A8](v5);
  v9 = (char *)&v12 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(void (**)(char *, uint64_t, uint64_t, double))(v6 + 16);
  v10(v9, a1, v5, v7);
  ((void (*)(char *, char *, uint64_t))v10)(v4, v9, v5);
  swift_storeEnumTagMultiPayload();
  specialized EnvironmentValues._set<A>(_:for:)((uint64_t)v4);
  outlined destroy of EnvironmentValues.Key.Value((uint64_t)v4);
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v9, v5);
}

uint64_t EnvironmentValues.capitalizationContext.setter(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  v2 = type metadata accessor for EnvironmentValues.Key.Value();
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)&v8 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for FormatStyleCapitalizationContext();
  v6 = *(_QWORD *)(v5 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v4, a1, v5);
  swift_storeEnumTagMultiPayload();
  specialized EnvironmentValues._set<A>(_:for:)((uint64_t)v4);
  outlined destroy of EnvironmentValues.Key.Value((uint64_t)v4);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(a1, v5);
}

void (*EnvironmentValues.capitalizationContext.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  size_t v7;
  void *v8;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = type metadata accessor for EnvironmentValues.Key.Value();
  v3[1] = v4;
  v3[2] = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v5 = type metadata accessor for FormatStyleCapitalizationContext();
  v3[3] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v3[4] = v6;
  v7 = *(_QWORD *)(v6 + 64);
  v3[5] = malloc(v7);
  v8 = malloc(v7);
  v3[6] = v8;
  EnvironmentValues.capitalizationContext.getter((uint64_t)v8);
  return EnvironmentValues.capitalizationContext.modify;
}

void EnvironmentValues.capitalizationContext.modify(uint64_t a1, char a2)
{
  void *v2;
  void *v3;
  uint64_t v4;
  void (*v5)(void *, void *, uint64_t);
  void *v6;
  void *v7;
  uint64_t v8;
  void (*v9)(void *, uint64_t);

  v2 = *(void **)a1;
  v4 = *(_QWORD *)(*(_QWORD *)a1 + 32);
  v3 = *(void **)(*(_QWORD *)a1 + 40);
  v5 = *(void (**)(void *, void *, uint64_t))(v4 + 16);
  v6 = *(void **)(*(_QWORD *)a1 + 48);
  v7 = *(void **)(*(_QWORD *)a1 + 16);
  v8 = *(_QWORD *)(*(_QWORD *)a1 + 24);
  if ((a2 & 1) != 0)
  {
    v5(*(void **)(*(_QWORD *)a1 + 40), v6, v8);
    v5(v7, v3, v8);
    swift_storeEnumTagMultiPayload();
    specialized EnvironmentValues._set<A>(_:for:)((uint64_t)v7);
    outlined destroy of EnvironmentValues.Key.Value((uint64_t)v7);
    v9 = *(void (**)(void *, uint64_t))(v4 + 8);
    v9(v3, v8);
  }
  else
  {
    v5(*(void **)(*(_QWORD *)a1 + 16), v6, v8);
    swift_storeEnumTagMultiPayload();
    specialized EnvironmentValues._set<A>(_:for:)((uint64_t)v7);
    outlined destroy of EnvironmentValues.Key.Value((uint64_t)v7);
    v9 = *(void (**)(void *, uint64_t))(v4 + 8);
  }
  v9(v6, v8);
  free(v6);
  free(v3);
  free(v7);
  free(v2);
}

uint64_t protocol witness for static EnvironmentKey.defaultValue.getter in conformance EnvironmentValues.Key@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if (one-time initialization token for defaultValue != -1)
    swift_once();
  v2 = type metadata accessor for EnvironmentValues.Key.Value();
  v3 = __swift_project_value_buffer(v2, (uint64_t)static EnvironmentValues.Key.defaultValue);
  return outlined init with copy of EnvironmentValues.Key.Value(v3, a1);
}

uint64_t Date.RelativeFormatStyle.capitalizationContext(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return Date.RelativeFormatStyle.capitalizationContext(_:)(a1, MEMORY[0x24BDCE510], MEMORY[0x24BDCE530], MEMORY[0x24BDCE518], a2);
}

uint64_t protocol witness for CapitalizationContextDependentFormatStyle.capitalizationContext(_:) in conformance Date.RelativeFormatStyle@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return protocol witness for CapitalizationContextDependentFormatStyle.capitalizationContext(_:) in conformance Date.RelativeFormatStyle(a1, a2, MEMORY[0x24BDCE510], MEMORY[0x24BDCE518], a3);
}

uint64_t Date.AnchoredRelativeFormatStyle.capitalizationContext(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return Date.RelativeFormatStyle.capitalizationContext(_:)(a1, MEMORY[0x24BDCE7B8], (uint64_t (*)(_QWORD))MEMORY[0x24BDCE828], MEMORY[0x24BDCE7C0], a2);
}

uint64_t protocol witness for CapitalizationContextDependentFormatStyle.capitalizationContext(_:) in conformance Date.AnchoredRelativeFormatStyle@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return protocol witness for CapitalizationContextDependentFormatStyle.capitalizationContext(_:) in conformance Date.RelativeFormatStyle(a1, a2, MEMORY[0x24BDCE7B8], MEMORY[0x24BDCE7C0], a3);
}

uint64_t Date.FormatStyle.capitalizationContext(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return Date.RelativeFormatStyle.capitalizationContext(_:)(a1, (uint64_t (*)(double))MEMORY[0x24BDCE000], (uint64_t (*)(_QWORD))MEMORY[0x24BDCE2A0], (uint64_t (*)(char *))MEMORY[0x24BDCE008], a2);
}

uint64_t Date.RelativeFormatStyle.capitalizationContext(_:)@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(double)@<X1>, uint64_t (*a3)(_QWORD)@<X2>, uint64_t (*a4)(char *)@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  double v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  void (*v19)(char *, uint64_t);
  uint64_t v20;
  uint64_t result;
  uint64_t v22;
  uint64_t (*v23)(char *);

  v23 = a4;
  v10 = type metadata accessor for FormatStyleCapitalizationContext();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)&v22 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = MEMORY[0x24BDAC7A8](v14);
  v17 = (char *)&v22 - v16;
  v18 = a2(v15);
  MEMORY[0x23B7C4858](v18);
  LOBYTE(a2) = MEMORY[0x23B7C484C](v17, v13);
  v19 = *(void (**)(char *, uint64_t))(v11 + 8);
  v19(v13, v10);
  v19(v17, v10);
  v20 = a3(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 16))(a5, v5, v20);
  if ((a2 & 1) != 0)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v17, a1, v10);
    return v23(v17);
  }
  return result;
}

uint64_t protocol witness for CapitalizationContextDependentFormatStyle.capitalizationContext(_:) in conformance Date.FormatStyle@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return protocol witness for CapitalizationContextDependentFormatStyle.capitalizationContext(_:) in conformance Date.RelativeFormatStyle(a1, a2, (uint64_t (*)(double))MEMORY[0x24BDCE000], (uint64_t (*)(char *))MEMORY[0x24BDCE008], a3);
}

uint64_t protocol witness for CapitalizationContextDependentFormatStyle.capitalizationContext(_:) in conformance Date.RelativeFormatStyle@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(double)@<X3>, uint64_t (*a4)(char *)@<X4>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  double v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  void (*v19)(char *, uint64_t);
  uint64_t result;
  uint64_t v21;
  uint64_t (*v22)(char *);

  v22 = a4;
  v10 = type metadata accessor for FormatStyleCapitalizationContext();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)&v21 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = MEMORY[0x24BDAC7A8](v14);
  v17 = (char *)&v21 - v16;
  v18 = a3(v15);
  MEMORY[0x23B7C4858](v18);
  LOBYTE(a3) = MEMORY[0x23B7C484C](v17, v13);
  v19 = *(void (**)(char *, uint64_t))(v11 + 8);
  v19(v13, v10);
  v19(v17, v10);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 16))(a5, v5, a2);
  if ((a3 & 1) != 0)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v17, a1, v10);
    return v22(v17);
  }
  return result;
}

uint64_t Date.FormatStyle.Attributed.capitalizationContext(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char v13;
  void (*v14)(char *, uint64_t);
  uint64_t v15;
  uint64_t result;
  uint64_t v17;

  v5 = type metadata accessor for FormatStyleCapitalizationContext();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v17 - v10;
  swift_getKeyPath();
  MEMORY[0x23B7C49FC]();
  v12 = swift_release();
  MEMORY[0x23B7C4858](v12);
  v13 = MEMORY[0x23B7C484C](v11, v8);
  v14 = *(void (**)(char *, uint64_t))(v6 + 8);
  v14(v8, v5);
  v14(v11, v5);
  v15 = type metadata accessor for Date.FormatStyle.Attributed();
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(a2, v2, v15);
  if ((v13 & 1) != 0)
  {
    swift_getKeyPath();
    (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v11, a1, v5);
    return Date.FormatStyle.Attributed.subscript.setter();
  }
  return result;
}

uint64_t sub_2350FEB24()
{
  return Date.FormatStyle.capitalizationContext.getter();
}

uint64_t key path setter for Date.FormatStyle.capitalizationContext : Date.FormatStyle(uint64_t a1)
{
  uint64_t v2;
  double v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v2 = type metadata accessor for FormatStyleCapitalizationContext();
  v3 = MEMORY[0x24BDAC7A8](v2);
  (*(void (**)(char *, uint64_t, double))(v5 + 16))((char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v3);
  return Date.FormatStyle.capitalizationContext.setter();
}

uint64_t instantiation function for generic protocol witness table for Date.RelativeFormatStyle(uint64_t a1)
{
  uint64_t result;

  result = lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type Date.RelativeFormatStyle and conformance Date.RelativeFormatStyle, MEMORY[0x24BDCE530], MEMORY[0x24BDCE528]);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_2350FEC04@<X0>(uint64_t a1@<X8>)
{
  return EnvironmentValues.capitalizationContext.getter(a1);
}

uint64_t dispatch thunk of CapitalizationContextDependentFormatStyle.capitalizationContext(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 16))();
}

uint64_t *initializeBufferWithCopyOfBuffer for EnvironmentValues.Key.Value(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v7 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v7 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v6 = a2[1];
      *a1 = *a2;
      a1[1] = v6;
      swift_retain();
    }
    else
    {
      v8 = type metadata accessor for FormatStyleCapitalizationContext();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a1, a2, v8);
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t destroy for EnvironmentValues.Key.Value(uint64_t a1)
{
  uint64_t v3;

  if (swift_getEnumCaseMultiPayload() == 1)
    return swift_release();
  v3 = type metadata accessor for FormatStyleCapitalizationContext();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
}

_QWORD *initializeWithCopy for EnvironmentValues.Key.Value(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;

  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v4 = a2[1];
    *a1 = *a2;
    a1[1] = v4;
    swift_retain();
  }
  else
  {
    v5 = type metadata accessor for FormatStyleCapitalizationContext();
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a1, a2, v5);
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

_QWORD *assignWithCopy for EnvironmentValues.Key.Value(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;

  if (a1 != a2)
  {
    outlined destroy of EnvironmentValues.Key.Value((uint64_t)a1);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v4 = a2[1];
      *a1 = *a2;
      a1[1] = v4;
      swift_retain();
    }
    else
    {
      v5 = type metadata accessor for FormatStyleCapitalizationContext();
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a1, a2, v5);
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

void *initializeWithTake for EnvironmentValues.Key.Value(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;

  if (swift_getEnumCaseMultiPayload())
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  else
  {
    v6 = type metadata accessor for FormatStyleCapitalizationContext();
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

void *assignWithTake for EnvironmentValues.Key.Value(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;

  if (a1 != a2)
  {
    outlined destroy of EnvironmentValues.Key.Value((uint64_t)a1);
    if (swift_getEnumCaseMultiPayload())
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    }
    else
    {
      v6 = type metadata accessor for FormatStyleCapitalizationContext();
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
      swift_storeEnumTagMultiPayload();
    }
  }
  return a1;
}

uint64_t type metadata completion function for EnvironmentValues.Key.Value()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for FormatStyleCapitalizationContext();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

uint64_t outlined init with copy of EnvironmentValues.Key.Value(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for EnvironmentValues.Key.Value();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

ValueMetadata *type metadata accessor for EnvironmentValues.Key()
{
  return &type metadata for EnvironmentValues.Key;
}

Swift::Int specialized MutableCollection<>.sort(by:)(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, char a12)
{
  uint64_t v16;
  uint64_t v17;
  Swift::Int result;
  uint64_t v23[2];
  char v24;

  v16 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v16 = specialized _ContiguousArrayBuffer._consumeAndCreateNew()(v16);
  v17 = *(_QWORD *)(v16 + 16);
  v23[0] = v16 + 32;
  v23[1] = v17;
  v24 = a10 & 1;
  result = specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(v23, a2, a3, a4, a5, a6, a7, a8, a9, a10 & 1, a11, a12 & 1);
  *a1 = v16;
  return result;
}

_QWORD *specialized MutableCollection<>.sort(by:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, char a12)
{
  _QWORD *v15;
  uint64_t v16;
  _QWORD *result;
  uint64_t v18;
  unint64_t v19;
  uint64_t v24;
  _QWORD *v25;

  v15 = *(_QWORD **)a1;
  v16 = *(_QWORD *)(a1 + 8);
  v25 = specialized _copyCollectionToContiguousArray<A>(_:)(*(_QWORD **)a1, v16);
  specialized MutableCollection<>.sort(by:)((uint64_t *)&v25, a2, a3, a4, a5, a6, a7, a8, a9, a10 & 1, a11, a12 & 1);
  result = v25;
  if (v24)
    return (_QWORD *)swift_release();
  if ((v16 & 0x8000000000000000) == 0)
  {
    if (!v16)
      return (_QWORD *)swift_release();
    v18 = v25[2];
    if (!v18)
      return (_QWORD *)swift_release();
    v19 = 0;
    while ((v18 & ~(v18 >> 63)) != v19)
    {
      if (v19 >= result[2])
        goto LABEL_14;
      if (v19 == 0x111111111111112)
        goto LABEL_15;
      *v15 = result[v19 + 4];
      if (v16 - 1 != v19)
      {
        ++v19;
        v15 += 15;
        if (v18 != v19)
          continue;
      }
      return (_QWORD *)swift_release();
    }
    __break(1u);
LABEL_14:
    __break(1u);
LABEL_15:
    __break(1u);
  }
  __break(1u);
  return result;
}

_QWORD *StackLayout.update(children:majorAxis:minorAxisAlignment:uniformSpacing:)(int *a1, char a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v5;
  uint64_t v6;
  char v10;
  int v11;
  uint64_t v12;
  char v13;
  char v14;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v16;
  char v18;

  v6 = v5;
  v10 = a2 & 1;
  v11 = *a1;
  v12 = *((_QWORD *)a1 + 1);
  v13 = *((_BYTE *)a1 + 16);
  v14 = *((_BYTE *)a1 + 17);
  v18 = *(_BYTE *)(v6 + 98);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)v6 = a3;
  *(_QWORD *)(v6 + 8) = a4;
  *(_BYTE *)(v6 + 16) = a5 & 1;
  *(_BYTE *)(v6 + 17) = v10;
  *(_QWORD *)(v6 + 24) = 0;
  *(_QWORD *)(v6 + 32) = 0xFFF0000000000000;
  *(_BYTE *)(v6 + 40) = 0;
  *(_QWORD *)(v6 + 48) = 0xFFF0000000000000;
  *(_BYTE *)(v6 + 56) = 0;
  *(_QWORD *)(v6 + 64) = 0;
  *(_QWORD *)(v6 + 72) = 0;
  *(_DWORD *)(v6 + 80) = v11;
  *(_QWORD *)(v6 + 88) = v12;
  *(_BYTE *)(v6 + 96) = v13;
  *(_BYTE *)(v6 + 97) = v14;
  *(_BYTE *)(v6 + 98) = v18;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v16 = *(_QWORD *)(v6 + 104);
  if (isUniquelyReferenced_nonNull_native)
  {
    specialized Array.replaceSubrange<A>(_:with:)(0, *(_QWORD *)(v16 + 16));
  }
  else
  {
    *(_QWORD *)(v6 + 104) = specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(0, *(_QWORD *)(v16 + 24) >> 1);
    swift_bridgeObjectRelease();
  }
  return StackLayout.makeChildren()();
}

uint64_t StackLayout.explicitAlignment(_:in:proposal:)(unint64_t a1, uint64_t a2, char a3, uint64_t a4, char a5, double a6, double a7, double a8, double a9)
{
  uint64_t v9;
  _QWORD *v17;
  uint64_t v18;
  uint64_t result;
  char v20;
  double v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;

  if ((a3 & 1) != 0)
    *(double *)&a2 = NAN;
  if ((a5 & 1) != 0)
    *(double *)&a4 = NAN;
  v17 = *(_QWORD **)(v9 + 104);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v17 = specialized _ArrayBuffer._consumeAndCreateNew()(v17);
  v18 = v17[2];
  *(double *)&v22 = a8;
  *((double *)&v22 + 1) = a9;
  v23 = a2;
  v24 = a4;
  *(double *)&result = COERCE_DOUBLE(StackLayout.UnmanagedImplementation.explicitAlignment(_:at:)(a1, &v22, v9, (uint64_t)(v17 + 4), v18));
  *(_QWORD *)(v9 + 104) = v17;
  if ((a1 & 1) != 0)
    v21 = a7;
  else
    v21 = a6;
  if ((v20 & 1) == 0)
    *(double *)&result = v21 + *(double *)&result;
  return result;
}

_QWORD *StackLayout.makeChildren()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *result;
  int64_t v6;
  unint64_t v7;
  _DWORD *v8;
  _DWORD *v9;
  double v10;
  unint64_t v11;
  unint64_t v12;
  _DWORD *v13;
  double width;
  __int128 *InputValue;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _DWORD *v20;
  __int128 *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t IsOwner;
  uint64_t v25;
  int v26;
  Swift::UInt v27;
  char v28;
  double v29;
  CGSize *p_height;
  unint64_t v31;
  _DWORD *v32;
  __int128 *v33;
  uint64_t v34;
  uint64_t v35;
  double v36;
  __int128 v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  _QWORD *v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  char v51;
  __int128 v52;
  uint64_t v53;
  char v54;
  _QWORD v55[3];

  v1 = v0;
  v2 = *(_QWORD *)(v0 + 88);
  v45 = *(_BYTE *)(v0 + 97);
  v51 = *(_BYTE *)(v0 + 96);
  v3 = specialized Collection.count.getter(*(unsigned int *)(v0 + 80), v2);
  v4 = *(_QWORD **)(v1 + 104);
  result = (_QWORD *)swift_isUniquelyReferenced_nonNull_native();
  if (!(_DWORD)result || v3 > v4[3] >> 1)
  {
    if (v4[2] <= v3)
      v6 = v3;
    else
      v6 = v4[2];
    result = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(result, v6, 0, v4);
    v4 = result;
  }
  *(_QWORD *)(v1 + 104) = v4;
  *(_QWORD *)(v1 + 24) = 0;
  v47 = *(_QWORD *)(v2 + 16);
  if (!v47)
    return result;
  v7 = 0;
  v8 = (_DWORD *)(v2 + 32);
  v9 = (_DWORD *)(v2 + 24);
  v50 = *MEMORY[0x24BE096C0];
  v10 = 0.0;
  v46 = v2 + 32;
  v48 = v2;
  v49 = v1;
  while (1)
  {
    if (v7)
    {
      if ((*(_BYTE *)(v1 + 16) & 1) != 0)
      {
        v11 = v7 - 1;
        v12 = *(_QWORD *)(v2 + 16);
        if ((v51 & 1) != 0)
        {
          if (v11 >= v12)
            goto LABEL_74;
          v13 = (_DWORD *)(v46 + 12 * v11);
        }
        else
        {
          v13 = v9;
          if (v11 >= v12)
            goto LABEL_75;
        }
        if (*v13 == v50)
        {
          InputValue = &static LayoutComputer.defaultValue;
          if (one-time initialization token for defaultValue != -1)
          {
            swift_once();
            InputValue = &static LayoutComputer.defaultValue;
          }
        }
        else
        {
          InputValue = (__int128 *)AGGraphGetInputValue();
        }
        v16 = *(_QWORD *)InputValue;
        v17 = one-time initialization token for lockAssertionsAreEnabled;
        swift_retain();
        if (v17 != -1)
          swift_once();
        if (lockAssertionsAreEnabled)
        {
          if (one-time initialization token for _lock != -1)
            swift_once();
          if (!_MovableLockIsOwner(static Update._lock))
            goto LABEL_78;
        }
        (*(void (**)(_QWORD *__return_ptr))(*(_QWORD *)v16 + 112))(v55);
        swift_release();
        v18 = v55[0];
        v19 = *(_QWORD *)(v2 + 16);
        if ((v51 & 1) != 0)
        {
          v20 = v8;
          if (v7 >= v19)
            goto LABEL_76;
        }
        else
        {
          if (v7 >= v19)
            goto LABEL_77;
          v20 = (_DWORD *)(v46 + 8 * v7);
        }
        if (*v20 == v50)
        {
          v21 = &static LayoutComputer.defaultValue;
          if (one-time initialization token for defaultValue != -1)
          {
            swift_once();
            v21 = &static LayoutComputer.defaultValue;
          }
        }
        else
        {
          v21 = (__int128 *)AGGraphGetInputValue();
        }
        v22 = *(_QWORD *)v21;
        if (lockAssertionsAreEnabled)
        {
          v23 = one-time initialization token for _lock;
          swift_retain();
          if (v23 != -1)
            swift_once();
          IsOwner = _MovableLockIsOwner(static Update._lock);
          if ((IsOwner & 1) == 0)
            goto LABEL_78;
        }
        else
        {
          IsOwner = swift_retain();
        }
        (*(void (**)(_QWORD *__return_ptr, uint64_t))(*(_QWORD *)v22 + 112))(v55, IsOwner);
        swift_release();
        v25 = v55[0];
        v26 = *(unsigned __int8 *)(v1 + 17);
        v55[0] = v18;
        v54 = v45;
        v53 = v25;
        v27 = Spacing.distanceToSuccessorView(along:layoutDirection:preferring:)(v26, &v54, &v53);
        if ((v28 & 1) != 0)
        {
          if (one-time initialization token for defaultSpacingValue != -1)
            swift_once();
          p_height = (CGSize *)&defaultSpacingValue.height;
          if (!v26)
            p_height = &defaultSpacingValue;
          width = p_height->width;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
        }
        else
        {
          v29 = *(double *)&v27;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          width = v29;
        }
        v2 = v48;
        v1 = v49;
      }
      else
      {
        width = *(double *)(v1 + 8);
      }
      v10 = v10 + width;
      *(double *)(v1 + 24) = v10;
    }
    else
    {
      width = 0.0;
    }
    v31 = *(_QWORD *)(v2 + 16);
    if ((v51 & 1) != 0)
      break;
    if (v7 >= v31)
      goto LABEL_73;
    v32 = (_DWORD *)(v46 + 8 * v7);
LABEL_56:
    if (*v32 == v50)
    {
      v33 = &static LayoutComputer.defaultValue;
      if (one-time initialization token for defaultValue != -1)
      {
        swift_once();
        v33 = &static LayoutComputer.defaultValue;
      }
    }
    else
    {
      v33 = (__int128 *)AGGraphGetInputValue();
    }
    v34 = *(_QWORD *)v33;
    v35 = one-time initialization token for lockAssertionsAreEnabled;
    swift_retain();
    if (v35 != -1)
      swift_once();
    if (lockAssertionsAreEnabled)
    {
      if (one-time initialization token for _lock != -1)
        swift_once();
      if (!_MovableLockIsOwner(static Update._lock))
        goto LABEL_78;
    }
    v36 = (*(double (**)(void))(*(_QWORD *)v34 + 88))();
    swift_release();
    if (one-time initialization token for invalidValue != -1)
      swift_once();
    v37 = static ViewGeometry.invalidValue;
    v38 = qword_25426DBB8;
    v39 = unk_25426DBC0;
    v40 = xmmword_25426DBC8;
    v52 = *(__int128 *)((char *)&xmmword_25426DBC8 + 8);
    v41 = qword_25426DBE0;
    v43 = v4[2];
    v42 = v4[3];
    result = (_QWORD *)swift_retain();
    if (v43 >= v42 >> 1)
    {
      result = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v42 > 1), v43 + 1, 1, v4);
      v4 = result;
    }
    v4[2] = v43 + 1;
    v44 = &v4[15 * v43];
    v44[10] = v7;
    *((double *)v44 + 4) = v36;
    v44[5] = 0;
    *((_BYTE *)v44 + 48) = 1;
    v44[7] = 0;
    *((_BYTE *)v44 + 64) = 1;
    *((double *)v44 + 9) = width;
    *(_OWORD *)(v44 + 11) = v37;
    v44[13] = v38;
    v44[14] = v39;
    v44[15] = v40;
    *((_OWORD *)v44 + 8) = v52;
    v9 += 2;
    v8 += 3;
    ++v7;
    v44[18] = v41;
    v2 = v48;
    v1 = v49;
    if (v47 == v7)
    {
      *(_QWORD *)(v49 + 104) = v4;
      return result;
    }
  }
  v32 = v8;
  if (v7 < v31)
    goto LABEL_56;
  __break(1u);
LABEL_73:
  __break(1u);
LABEL_74:
  __break(1u);
LABEL_75:
  __break(1u);
LABEL_76:
  __break(1u);
LABEL_77:
  __break(1u);
LABEL_78:
  result = (_QWORD *)_assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

__n128 closure #1 in StackLayout.sizeThatFits(_:)@<Q0>(__n128 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, double a4@<X3>, char a5@<W4>, double a6@<X5>, char a7@<W6>, __n128 *a8@<X8>)
{
  uint64_t v14;
  char v15;
  char v16;
  char v17;
  __n128 result;

  if ((a1[2].n128_u8[8] & 1) != 0)
  {
    if ((a5 & 1) == 0)
      goto LABEL_10;
  }
  else if ((a5 & 1) != 0 || a1[2].n128_f64[0] != a4)
  {
    goto LABEL_10;
  }
  if ((a1[3].n128_u8[8] & 1) != 0)
  {
    if ((a7 & 1) != 0)
      goto LABEL_20;
LABEL_10:
    if (!a3)
      goto LABEL_20;
    goto LABEL_11;
  }
  if ((a7 & 1) != 0)
    goto LABEL_10;
  if (a1[3].n128_f64[0] != a6 && a3 != 0)
  {
LABEL_11:
    if (a1[1].n128_u8[1])
      v14 = *(_QWORD *)&a4;
    else
      v14 = *(_QWORD *)&a6;
    if (a1[1].n128_u8[1])
      v15 = a5;
    else
      v15 = a7;
    v16 = a5 & 1;
    v17 = a7 & 1;
    specialized StackLayout.UnmanagedImplementation.placeChildren1(in:minorProposalForChild:)(*(uint64_t *)&a4, a5 & 1, *(uint64_t *)&a6, a7 & 1, (uint64_t)a1, a2, a3, v14, v15 & 1);
    if (a1[6].n128_u8[2] == 1)
      StackLayout.UnmanagedImplementation.resizeAnyChildrenWithTrailingOverflow(in:)(*(uint64_t *)&a4, v16, *(uint64_t *)&a6, v17, (uint64_t)a1, a2, a3);
    a1[2].n128_f64[0] = a4;
    a1[2].n128_u8[8] = v16;
    a1[3].n128_f64[0] = a6;
    a1[3].n128_u8[8] = v17;
  }
LABEL_20:
  result = a1[4];
  *a8 = result;
  return result;
}

void StackLayout.UnmanagedImplementation.commitPlacements(in:proposedSize:)(uint64_t a1, char a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, CGFloat a8, CGFloat a9, double a10, double a11)
{
  _QWORD *v13;
  double MinX;
  double v15;
  double v19;
  uint64_t v20;
  char v21;
  char v22;
  uint64_t v23;
  unsigned __int8 v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double MinY;
  double v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  double v35;
  CGFloat v36;
  CGFloat v37;
  CGFloat v38;
  CGFloat v39;
  double MaxX;
  double v41;
  unint64_t v42;
  double v43;
  double v44;
  uint64_t v45;
  CGFloat v46;
  uint64_t v47;
  int v48;
  double v49;
  double v51;
  uint64_t v52;
  char isUniquelyReferenced_nonNull_native;
  _QWORD *v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  double v58;
  double v59;
  double v60;
  double v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  double v66;
  CGFloat v67;
  CGFloat v68;
  CGFloat v69;
  double v70;
  unint64_t v71;
  double v72;
  double v73;
  double v74;
  uint64_t v75;
  uint64_t v76;
  double v77;
  uint64_t v78;
  int v79;
  double v80;
  double v82;
  uint64_t v84;
  uint64_t v85;
  _QWORD *v86;
  char v87;
  _QWORD *v88;
  _QWORD *v89;
  uint64_t v90;
  uint64_t v91;
  double v92;
  char v93;
  char v94;
  CGFloat v95;
  int v96;
  double v97;
  CGFloat v98;
  CGFloat v99;
  uint64_t v100;
  uint64_t v101;
  __int128 rect;
  __int128 recta;
  _QWORD v104[5];
  CGRect v105;
  CGRect v106;
  CGRect v107;
  CGRect v108;
  CGRect v109;
  CGRect v110;
  CGRect v111;

  v13 = (_QWORD *)a5;
  MinX = a11;
  v15 = a10;
  v19 = NAN;
  if ((a2 & 1) != 0)
    *(double *)&a1 = NAN;
  *(double *)v104 = a10;
  *(double *)&v104[1] = a11;
  if ((a4 & 1) == 0)
    v19 = *(double *)&a3;
  v104[2] = a1;
  *(double *)&v104[3] = v19;
  v20 = StackLayout.UnmanagedImplementation.proposalWhenPlacing(in:)(v104, a5);
  LOBYTE(v104[0]) = v21 & 1;
  StackLayout.UnmanagedImplementation.placeChildren(in:)(v20, v21 & 1, v23, v22 & 1, (uint64_t)v13, a6, a7);
  v24 = *((_BYTE *)v13 + 97);
  v97 = MinX;
  v98 = a8;
  v95 = v15;
  v96 = v24;
  v99 = a9;
  v25 = a8;
  v26 = a9;
  if ((*((_BYTE *)v13 + 17) & 1) != 0)
  {
    v27 = v15;
    v28 = MinX;
    MinY = CGRectGetMinY(*(CGRect *)&v25);
    if (a6 && a7)
    {
      v30 = MinY;
      v93 = *((_BYTE *)v13 + 96);
      v100 = v13[11];
      swift_bridgeObjectRetain();
      v31 = 0;
      v32 = a6 + 56;
      v33 = 120 * a7;
      v34 = 40;
      while (1)
      {
        v42 = *(_QWORD *)(v100 + 16);
        if (v31 == v42)
          goto LABEL_80;
        v43 = *(double *)(v32 - 16);
        v44 = *(double *)v32;
        a7 = *(_QWORD *)(v32 + 16);
        v45 = *(_QWORD *)(v32 + 24);
        v46 = *(double *)(v32 + 32);
        v47 = *(_QWORD *)(v32 + 56);
        if ((v93 & 1) != 0)
        {
          if (v31 >= v42)
            goto LABEL_87;
          v48 = *(_DWORD *)(v100 + v34);
        }
        else
        {
          if (v31 >= v42)
            goto LABEL_88;
          v48 = v31;
        }
        if (v31 >= v42)
        {
          __break(1u);
LABEL_82:
          __break(1u);
LABEL_83:
          __break(1u);
LABEL_84:
          __break(1u);
LABEL_85:
          __break(1u);
LABEL_86:
          __break(1u);
LABEL_87:
          __break(1u);
LABEL_88:
          __break(1u);
LABEL_89:
          __break(1u);
LABEL_90:
          __break(1u);
LABEL_91:
          __break(1u);
LABEL_92:
          __break(1u);
          return;
        }
        rect = *(_OWORD *)(v32 + 40);
        v49 = v30 + v43;
        if ((COERCE_UNSIGNED_INT64(v30 + v43) & 0xFFFFFFFFFFFFFLL) != 0
          && (~COERCE__INT64(v30 + v43) & 0x7FF0000000000000) == 0)
        {
          v51 = *(double *)(v32 + 8);
        }
        else
        {
          v51 = v30 + v43;
        }
        swift_retain_n();
        if ((v24 & 1) != 0)
        {
          v107.origin.x = v44;
          v107.origin.y = v51;
          v107.size.width = v46;
          *(_QWORD *)&v107.size.height = rect;
          v44 = v15 - CGRectGetMaxX(v107);
        }
        v108.origin.x = v98;
        v108.origin.y = v99;
        v108.size.width = v15;
        v108.size.height = MinX;
        MinX = CGRectGetMinX(v108);
        swift_retain();
        v52 = _threadLayoutData();
        if (!v52)
          goto LABEL_91;
        a6 = v52;
        if ((*(_BYTE *)v52 & 1) != 0)
          goto LABEL_83;
        v13 = *(_QWORD **)(v52 + 8);
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        *(_QWORD *)(a6 + 8) = v13;
        if ((isUniquelyReferenced_nonNull_native & 1) != 0)
        {
          if (v48 < 0)
            goto LABEL_37;
        }
        else
        {
          v13 = specialized _ArrayBuffer._consumeAndCreateNew()(v13);
          *(_QWORD *)(a6 + 8) = v13;
          if (v48 < 0)
          {
LABEL_37:
            __break(1u);
            goto LABEL_38;
          }
        }
        if (v13[2] <= v48)
          goto LABEL_85;
        v54 = &v13[8 * (uint64_t)v48];
        v57 = v54[4];
        v55 = v54 + 4;
        v56 = v57;
        swift_release();
        if ((~v57 & 0x7FF0000000000000) == 0 && (v56 & 0xFFFFFFFFFFFFFLL) != 0)
          ++*(_QWORD *)(a6 + 16);
        v58 = v44 + MinX;
        *(double *)v55 = v58;
        *((double *)v55 + 1) = v51;
        v55[2] = a7;
        v55[3] = v45;
        *((CGFloat *)v55 + 4) = v46;
        *(_OWORD *)(v55 + 5) = rect;
        v55[7] = v47;
        v24 = v96;
        if (v96 == *(unsigned __int8 *)(a6 + 56))
        {
          swift_retain();
        }
        else
        {
          v35 = *(double *)(a6 + 24);
          v36 = *(double *)(a6 + 32);
          v37 = v46;
          v38 = *(double *)(a6 + 40);
          v39 = *(double *)(a6 + 48);
          swift_retain();
          v105.origin.x = v35;
          v105.origin.y = v36;
          v105.size.width = v38;
          v105.size.height = v39;
          MaxX = CGRectGetMaxX(v105);
          v106.origin.x = v58;
          v106.origin.y = v51;
          v106.size.width = v37;
          *(_QWORD *)&v106.size.height = rect;
          v41 = MaxX - (CGRectGetMaxX(v106) - v35);
          v15 = v95;
          *(double *)v55 = v41;
        }
        MinX = v97;
        v30 = v49 + *(double *)&rect;
        swift_release_n();
        v34 += 12;
        v32 += 120;
        ++v31;
        v33 -= 120;
        if (!v33)
          goto LABEL_80;
      }
    }
  }
  else
  {
LABEL_38:
    v59 = v15;
    v60 = MinX;
    if ((v24 & 1) != 0)
    {
      v61 = CGRectGetMaxX(*(CGRect *)&v25);
      if (!a6)
        return;
    }
    else
    {
      v61 = CGRectGetMinX(*(CGRect *)&v25);
      if (!a6)
        return;
    }
    if (a7)
    {
      v94 = *((_BYTE *)v13 + 96);
      v101 = v13[11];
      swift_bridgeObjectRetain();
      v62 = 0;
      v63 = a6 + 56;
      v64 = 120 * a7;
      v65 = 40;
      do
      {
        v71 = *(_QWORD *)(v101 + 16);
        if (v62 == v71)
          break;
        v72 = *(double *)(v63 - 16);
        v74 = *(double *)v63;
        v73 = *(double *)(v63 + 8);
        v75 = *(_QWORD *)(v63 + 16);
        v76 = *(_QWORD *)(v63 + 24);
        v77 = *(double *)(v63 + 32);
        v78 = *(_QWORD *)(v63 + 56);
        if ((v94 & 1) != 0)
        {
          if (v62 >= v71)
            goto LABEL_89;
          v79 = *(_DWORD *)(v101 + v65);
        }
        else
        {
          if (v62 >= v71)
            goto LABEL_90;
          v79 = v62;
        }
        if (v62 >= v71)
          goto LABEL_82;
        recta = *(_OWORD *)(v63 + 40);
        swift_retain_n();
        v111.origin.x = v98;
        v111.origin.y = v99;
        v111.size.width = v95;
        v111.size.height = MinX;
        v80 = CGRectGetMinY(v111);
        if ((v24 & 1) != 0)
        {
          v61 = v61 - v72 - v77;
          if ((*(_QWORD *)&v61 & 0xFFFFFFFFFFFFFLL) != 0 && (~*(_QWORD *)&v61 & 0x7FF0000000000000) == 0)
            v82 = v74;
          else
            v82 = v61;
        }
        else
        {
          if ((COERCE_UNSIGNED_INT64(v61 + v72) & 0xFFFFFFFFFFFFFLL) != 0
            && (~COERCE__INT64(v61 + v72) & 0x7FF0000000000000) == 0)
          {
            v82 = v74;
          }
          else
          {
            v82 = v61 + v72;
          }
          v61 = v61 + v72 + v77;
        }
        swift_retain();
        v84 = _threadLayoutData();
        if (!v84)
          goto LABEL_92;
        v85 = v84;
        if ((*(_BYTE *)v84 & 1) != 0)
          goto LABEL_84;
        v86 = *(_QWORD **)(v84 + 8);
        v87 = swift_isUniquelyReferenced_nonNull_native();
        *(_QWORD *)(v85 + 8) = v86;
        if ((v87 & 1) != 0)
        {
          if (v79 < 0)
            goto LABEL_78;
        }
        else
        {
          v86 = specialized _ArrayBuffer._consumeAndCreateNew()(v86);
          *(_QWORD *)(v85 + 8) = v86;
          if (v79 < 0)
          {
LABEL_78:
            __break(1u);
            return;
          }
        }
        if (v86[2] <= v79)
          goto LABEL_86;
        v88 = &v86[8 * (uint64_t)v79];
        v91 = v88[4];
        v89 = v88 + 4;
        v90 = v91;
        swift_release();
        if ((~v91 & 0x7FF0000000000000) == 0 && (v90 & 0xFFFFFFFFFFFFFLL) != 0)
          ++*(_QWORD *)(v85 + 16);
        v92 = v73 + v80;
        *(double *)v89 = v82;
        *((double *)v89 + 1) = v92;
        v89[2] = v75;
        v89[3] = v76;
        *((double *)v89 + 4) = v77;
        *(_OWORD *)(v89 + 5) = recta;
        v89[7] = v78;
        v24 = v96;
        if (v96 == *(unsigned __int8 *)(v85 + 56))
        {
          swift_retain();
        }
        else
        {
          v66 = *(double *)(v85 + 24);
          v67 = *(double *)(v85 + 32);
          v68 = *(double *)(v85 + 40);
          v69 = *(double *)(v85 + 48);
          swift_retain();
          v109.origin.x = v66;
          v109.origin.y = v67;
          v109.size.width = v68;
          v109.size.height = v69;
          v70 = CGRectGetMaxX(v109);
          v110.origin.x = v82;
          v110.origin.y = v92;
          v110.size.width = v77;
          *(_QWORD *)&v110.size.height = recta;
          *(double *)v89 = v70 - (CGRectGetMaxX(v110) - v66);
        }
        MinX = v97;
        swift_release_n();
        v65 += 12;
        v63 += 120;
        ++v62;
        v64 -= 120;
      }
      while (v64);
LABEL_80:
      swift_bridgeObjectRelease();
    }
  }
}

unint64_t StackLayout.UnmanagedImplementation.spacing()@<X0>(double a1@<X0>, _QWORD *a2@<X8>)
{
  double v2;
  unint64_t result;
  _QWORD *v4;
  unint64_t v5;
  int v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  __int128 *InputValue;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  int64_t v17;
  int64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  unint64_t v37;
  unsigned __int8 *v38;
  unint64_t v39;
  _BOOL4 v40;
  double v41;
  double v42;
  double v43;
  unint64_t v44;
  Swift::UInt v45;
  int v46;
  char v47;
  unint64_t v48;
  uint64_t v49;
  _BOOL8 v50;
  uint64_t v51;
  char v52;
  unint64_t v53;
  char v54;
  uint64_t v55;
  double v56;
  double v57;
  double v58;
  double v59;
  double v60;
  double v61;
  double v62;
  double v63;
  double v64;
  double v65;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  BOOL v75;
  uint64_t v76;
  double v78;
  int v79;
  uint64_t v80;
  unint64_t v81;
  _QWORD *v82;
  char v83;
  uint64_t v84;
  uint64_t v85;
  double v86;
  uint64_t v87;
  uint64_t v88;
  unsigned __int8 *v89;
  uint64_t v90;
  unint64_t v91;
  Swift::UInt8 v92;
  uint64_t v93;
  unsigned __int8 v94;

  v2 = a1;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)&a1 + 88) + 16))
  {
    if (one-time initialization token for zero != -1)
      goto LABEL_123;
    goto LABEL_4;
  }
  result = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  v4 = (_QWORD *)result;
LABEL_5:
  v80 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)&v2 + 88) + 16);
  if (v80)
  {
    v5 = 0;
    v79 = *MEMORY[0x24BE096C0];
    v78 = v2;
    while (1)
    {
      LOBYTE(v93) = *(_BYTE *)(*(_QWORD *)&v2 + 97);
      AbsoluteEdge.Set.init(_:layoutDirection:)((unsigned __int8 *)&v93, &v94);
      v6 = v94;
      v7 = *(_QWORD *)(*(_QWORD *)&v2 + 88);
      v8 = *(_QWORD *)(v7 + 16);
      if ((*(_BYTE *)(*(_QWORD *)&v2 + 96) & 1) != 0)
      {
        if (v5 >= v8)
          goto LABEL_120;
        v9 = v7 + 12 * v5;
      }
      else
      {
        if (v5 >= v8)
          goto LABEL_121;
        v9 = v7 + 8 * v5;
      }
      v82 = v4;
      if (*(_DWORD *)(v9 + 32) == v79)
      {
        InputValue = &static LayoutComputer.defaultValue;
        if (one-time initialization token for defaultValue != -1)
        {
          swift_once();
          InputValue = &static LayoutComputer.defaultValue;
        }
      }
      else
      {
        InputValue = (__int128 *)AGGraphGetInputValue();
      }
      v11 = *(_QWORD *)InputValue;
      v12 = one-time initialization token for lockAssertionsAreEnabled;
      swift_retain();
      if (v12 != -1)
        swift_once();
      if (lockAssertionsAreEnabled)
      {
        if (one-time initialization token for _lock != -1)
          swift_once();
        if (!_MovableLockIsOwner(static Update._lock))
          break;
      }
      (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v11 + 112))(&v93);
      swift_release();
      v13 = v93;
      if (v6)
      {
        v81 = v5;
        *(_QWORD *)&v2 = v93 + 64;
        v14 = 1 << *(_BYTE *)(v93 + 32);
        if (v14 < 64)
          v15 = ~(-1 << v14);
        else
          v15 = -1;
        v16 = v15 & *(_QWORD *)(v93 + 64);
        v17 = (unint64_t)(v14 + 63) >> 6;
        swift_bridgeObjectRetain();
        v18 = 0;
        v19 = MEMORY[0x24BEE4AF8];
        v87 = v13;
        while (1)
        {
          if (v16)
          {
            v20 = __clz(__rbit64(v16));
            v16 &= v16 - 1;
            v21 = v20 | (v18 << 6);
            goto LABEL_49;
          }
          v22 = v18 + 1;
          if (__OFADD__(v18, 1))
          {
            __break(1u);
LABEL_117:
            __break(1u);
LABEL_118:
            __break(1u);
LABEL_119:
            __break(1u);
LABEL_120:
            __break(1u);
LABEL_121:
            __break(1u);
            goto LABEL_122;
          }
          if (v22 >= v17)
            goto LABEL_59;
          v23 = *(_QWORD *)(*(_QWORD *)&v2 + 8 * v22);
          ++v18;
          if (!v23)
          {
            v18 = v22 + 1;
            if (v22 + 1 >= v17)
              goto LABEL_59;
            v23 = *(_QWORD *)(*(_QWORD *)&v2 + 8 * v18);
            if (!v23)
            {
              v18 = v22 + 2;
              if (v22 + 2 >= v17)
                goto LABEL_59;
              v23 = *(_QWORD *)(*(_QWORD *)&v2 + 8 * v18);
              if (!v23)
              {
                v18 = v22 + 3;
                if (v22 + 3 >= v17)
                  goto LABEL_59;
                v23 = *(_QWORD *)(*(_QWORD *)&v2 + 8 * v18);
                if (!v23)
                {
                  v18 = v22 + 4;
                  if (v22 + 4 >= v17)
                    goto LABEL_59;
                  v23 = *(_QWORD *)(*(_QWORD *)&v2 + 8 * v18);
                  if (!v23)
                    break;
                }
              }
            }
          }
LABEL_48:
          v16 = (v23 - 1) & v23;
          v21 = __clz(__rbit64(v23)) + (v18 << 6);
LABEL_49:
          v25 = *(_QWORD *)(v13 + 48) + 16 * v21;
          v26 = *(unsigned __int8 *)(v25 + 8);
          if (v26 - 9 < 0xEF || (v26 & 0x80) != 0 || v26 > 7 || ((1 << v26) & ~v6) == 0)
          {
            v27 = *(_QWORD *)v25;
            v28 = *(_QWORD *)(v13 + 56) + 40 * v21;
            v29 = *(_QWORD *)v28;
            v30 = *(_QWORD *)(v28 + 8);
            v88 = *(_QWORD *)(v28 + 16);
            v85 = *(_QWORD *)(v28 + 24);
            v83 = *(_BYTE *)(v28 + 32);
            isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
            v93 = v19;
            v90 = v30;
            if ((isUniquelyReferenced_nonNull_native & 1) == 0)
            {
              specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v19 + 16) + 1, 1);
              v19 = v93;
            }
            v33 = *(_QWORD *)(v19 + 16);
            v32 = *(_QWORD *)(v19 + 24);
            if (v33 >= v32 >> 1)
            {
              specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v32 > 1, v33 + 1, 1);
              v19 = v93;
            }
            *(_QWORD *)(v19 + 16) = v33 + 1;
            v34 = v19 + 56 * v33;
            *(_QWORD *)(v34 + 32) = v27;
            *(_BYTE *)(v34 + 40) = v26;
            *(_QWORD *)(v34 + 48) = v29;
            *(_QWORD *)(v34 + 56) = v90;
            v13 = v87;
            *(_QWORD *)(v34 + 64) = v88;
            *(_QWORD *)(v34 + 72) = v85;
            *(_BYTE *)(v34 + 80) = v83;
          }
        }
        v24 = v22 + 5;
        if (v24 < v17)
        {
          v23 = *(_QWORD *)(*(_QWORD *)&v2 + 8 * v24);
          if (!v23)
          {
            while (1)
            {
              v18 = v24 + 1;
              if (__OFADD__(v24, 1))
                break;
              if (v18 >= v17)
                goto LABEL_59;
              v23 = *(_QWORD *)(*(_QWORD *)&v2 + 8 * v18);
              ++v24;
              if (v23)
                goto LABEL_48;
            }
LABEL_122:
            __break(1u);
LABEL_123:
            swift_once();
LABEL_4:
            v4 = (_QWORD *)static Spacing.zero;
            result = swift_bridgeObjectRetain();
            goto LABEL_5;
          }
          v18 = v24;
          goto LABEL_48;
        }
LABEL_59:
        swift_release();
        v35 = specialized _arrayForceCast<A, B>(_:)(v19);
        swift_release();
        v4 = v82;
        v36 = swift_isUniquelyReferenced_nonNull_native();
        v93 = (uint64_t)v82;
        v2 = *(double *)(v35 + 16);
        swift_bridgeObjectRetain();
        v86 = v2;
        if (v2 != 0.0)
        {
          v37 = 0;
          v38 = (unsigned __int8 *)(v35 + 80);
          v84 = v35;
          do
          {
            if (v37 >= *(_QWORD *)(v35 + 16))
              goto LABEL_117;
            v45 = *((_QWORD *)v38 - 6);
            if (v45 == 1)
              break;
            v89 = v38;
            v91 = v37;
            v41 = *((double *)v38 - 4);
            v2 = *((double *)v38 - 3);
            v42 = *((double *)v38 - 2);
            v43 = *((double *)v38 - 1);
            v46 = *v38;
            v92 = *(v38 - 40);
            v48 = specialized __RawDictionaryStorage.find<A>(_:)(v45, v92);
            v49 = v4[2];
            v50 = (v47 & 1) == 0;
            v51 = v49 + v50;
            if (__OFADD__(v49, v50))
              goto LABEL_118;
            v52 = v47;
            if (v4[3] >= v51)
            {
              if ((v36 & 1) != 0)
              {
                v4 = (_QWORD *)v93;
                if ((v47 & 1) != 0)
                  goto LABEL_77;
              }
              else
              {
                specialized _NativeDictionary.copy()();
                v4 = (_QWORD *)v93;
                if ((v52 & 1) != 0)
                  goto LABEL_77;
              }
            }
            else
            {
              specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v51, v36 & 1);
              v53 = specialized __RawDictionaryStorage.find<A>(_:)(v45, v92);
              if ((v52 & 1) != (v54 & 1))
              {
                KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
                __break(1u);
                goto LABEL_125;
              }
              v48 = v53;
              v4 = (_QWORD *)v93;
              if ((v52 & 1) != 0)
              {
LABEL_77:
                v55 = v4[7] + 40 * v48;
                v56 = *(double *)v55;
                v57 = *(double *)(v55 + 8);
                v59 = *(double *)(v55 + 16);
                v58 = *(double *)(v55 + 24);
                v44 = *(unsigned __int8 *)(v55 + 32);
                if (v46)
                {
                  if (v46 == 1)
                  {
                    if ((_DWORD)v44 == 1)
                    {
                      v60 = v41;
                      v61 = v2;
                      v62 = v42;
                      v63 = *(double *)v55;
                      v64 = *(double *)(v55 + 8);
                      v65 = *(double *)(v55 + 16);
                      if (v41 != v56 || v2 != v57 || v42 != v59 || v43 != v58)
                        goto LABEL_105;
                      LOBYTE(v44) = 1;
LABEL_66:
                      *(double *)v55 = v41;
                      *(double *)(v55 + 8) = v2;
                      *(double *)(v55 + 16) = v42;
                      *(double *)(v55 + 24) = v43;
                      *(_BYTE *)(v55 + 32) = v44;
                      goto LABEL_67;
                    }
                    v39 = 1;
LABEL_62:
                    v40 = v39 < v44;
                  }
                  else
                  {
                    if ((_DWORD)v44 != 2)
                    {
                      v39 = 2;
                      goto LABEL_62;
                    }
                    v60 = v41;
                    v61 = v2;
                    v62 = v42;
                    v63 = *(double *)v55;
                    v64 = *(double *)(v55 + 8);
                    v65 = *(double *)(v55 + 16);
                    if (v41 == v56 && v2 == v57 && v42 == v59 && v43 == v58)
                    {
                      LOBYTE(v44) = 2;
                      goto LABEL_66;
                    }
LABEL_105:
                    v40 = v60 + v61 + v62 < v63 + v64 + v65;
                  }
                }
                else
                {
                  if (*(_BYTE *)(v55 + 32))
                  {
                    v39 = 0;
                    goto LABEL_62;
                  }
                  if (v41 == v56)
                  {
                    LOBYTE(v44) = 0;
                    goto LABEL_66;
                  }
                  v40 = v41 < v56;
                }
                if (v40)
                {
                  v41 = *(double *)v55;
                  v2 = *(double *)(v55 + 8);
                  v42 = *(double *)(v55 + 16);
                  v43 = *(double *)(v55 + 24);
                }
                else
                {
                  LOBYTE(v44) = v46;
                }
                goto LABEL_66;
              }
            }
            v4[(v48 >> 6) + 8] |= 1 << v48;
            v72 = v4[6] + 16 * v48;
            *(_QWORD *)v72 = v45;
            *(_BYTE *)(v72 + 8) = v92;
            v73 = v4[7] + 40 * v48;
            *(double *)v73 = v41;
            *(double *)(v73 + 8) = v2;
            *(double *)(v73 + 16) = v42;
            *(double *)(v73 + 24) = v43;
            *(_BYTE *)(v73 + 32) = v46;
            v74 = v4[2];
            v75 = __OFADD__(v74, 1);
            v76 = v74 + 1;
            if (v75)
              goto LABEL_119;
            v4[2] = v76;
LABEL_67:
            v35 = v84;
            v37 = v91 + 1;
            v38 = v89 + 56;
            v36 = 1;
          }
          while (*(_QWORD *)&v86 != v91 + 1);
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        result = swift_bridgeObjectRelease_n();
        v2 = v78;
        v5 = v81;
      }
      else
      {
        result = swift_bridgeObjectRelease();
        v4 = v82;
      }
      if (++v5 == v80)
        goto LABEL_115;
    }
LABEL_125:
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
LABEL_115:
    *a2 = v4;
  }
  return result;
}

uint64_t StackLayout.UnmanagedImplementation.explicitAlignment(_:at:)(unint64_t a1, __int128 *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  __int128 v9;
  uint64_t v10;
  char v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  double *v16;
  _QWORD *v17;
  uint64_t *v18;
  double v19;
  double v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  double v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  double v29;
  unint64_t v30;
  _QWORD *v31;
  os_unfair_lock_s *v32;
  uint64_t v33;
  double v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t result;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  char v43;
  __int128 v44;
  __int128 v45;

  v9 = a2[1];
  v44 = *a2;
  v45 = v9;
  v10 = StackLayout.UnmanagedImplementation.proposalWhenPlacing(in:)(&v44, a3);
  LOBYTE(v44) = v11 & 1;
  StackLayout.UnmanagedImplementation.placeChildren(in:)(v10, v11 & 1, v13, v12 & 1, a3, a4, a5);
  v42 = 0;
  v43 = 1;
  if (!a4 || !a5)
    return 0;
  v14 = 0;
  v15 = 120 * a5;
  v41 = a1 >> 1;
  v40 = (a1 >> 1) - 1;
  v16 = (double *)(a4 + 112);
  v17 = &unk_254270000;
  v18 = &lazy protocol witness table cache variable for type EnvironmentPropertyKey<TextScaleKey> and conformance EnvironmentPropertyKey<A>;
  while (1)
  {
    v19 = *(v16 - 7);
    v20 = *(v16 - 6);
    v21 = *((_QWORD *)v16 - 5);
    v22 = *((_QWORD *)v16 - 3);
    v23 = *((_QWORD *)v16 - 2);
    v24 = *((_QWORD *)v16 - 1);
    v25 = *v16;
    v26 = v17[225];
    swift_retain();
    if (v26 != -1)
      swift_once();
    if (*((_BYTE *)v18 + 1984) == 1)
    {
      if (one-time initialization token for _lock != -1)
        swift_once();
      if (!_MovableLockIsOwner(static Update._lock))
        break;
    }
    *(_QWORD *)&v44 = v22;
    *((_QWORD *)&v44 + 1) = v23;
    *(_QWORD *)&v45 = v24;
    *((double *)&v45 + 1) = v25;
    *(double *)&v27 = COERCE_DOUBLE((*(uint64_t (**)(unint64_t, __int128 *))(*(_QWORD *)v21 + 144))(a1, &v44));
    if ((v28 & 1) != 0)
    {
      swift_release();
    }
    else
    {
      v29 = *(double *)&v27;
      if ((a1 & 1) != 0)
        v19 = v20;
      v30 = a1;
      if (one-time initialization token for _typeCache != -1)
        swift_once();
      v31 = static AlignmentKey._typeCache;
      v32 = (os_unfair_lock_s *)((char *)static AlignmentKey._typeCache + 16);
      swift_retain();
      os_unfair_lock_lock(v32);
      v33 = v31[4];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      os_unfair_lock_unlock(v32);
      swift_release();
      if (v30 < 2)
      {
        __break(1u);
LABEL_24:
        __break(1u);
LABEL_25:
        __break(1u);
        break;
      }
      if (v41 > *(_QWORD *)(v33 + 16))
        goto LABEL_24;
      a1 = v30;
      v34 = v19 + v29;
      v35 = v33 + 16 * v40;
      v36 = *(_QWORD *)(v35 + 32);
      v37 = *(_QWORD *)(v35 + 40);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t *, uint64_t, uint64_t, double))(v37 + 16))(v14, &v42, v36, v37, v34);
      swift_release();
      if (__OFADD__(v14++, 1))
        goto LABEL_25;
      v17 = (_QWORD *)&unk_254270000;
      v18 = &lazy protocol witness table cache variable for type EnvironmentPropertyKey<TextScaleKey> and conformance EnvironmentPropertyKey<A>;
    }
    v16 += 15;
    v15 -= 120;
    if (!v15)
      return v42;
  }
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t StackLayout.UnmanagedImplementation.placeChildren(in:)(uint64_t result, char a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v11;
  uint64_t v12;
  char v13;
  char v14;
  char v15;

  v11 = result;
  if ((*(_BYTE *)(a5 + 40) & 1) != 0)
  {
    if ((a2 & 1) == 0)
      goto LABEL_10;
  }
  else if ((a2 & 1) != 0 || *(double *)(a5 + 32) != *(double *)&result)
  {
    goto LABEL_10;
  }
  if ((*(_BYTE *)(a5 + 56) & 1) != 0)
  {
    if ((a4 & 1) != 0)
      return result;
LABEL_10:
    if (!a7)
      return result;
    goto LABEL_11;
  }
  if ((a4 & 1) != 0)
    goto LABEL_10;
  if (*(double *)(a5 + 48) != *(double *)&a3 && a7 != 0)
  {
LABEL_11:
    if (*(_BYTE *)(a5 + 17))
      v12 = result;
    else
      v12 = a3;
    if (*(_BYTE *)(a5 + 17))
      v13 = a2;
    else
      v13 = a4;
    v14 = a2 & 1;
    v15 = a4 & 1;
    *(double *)&result = COERCE_DOUBLE(specialized StackLayout.UnmanagedImplementation.placeChildren1(in:minorProposalForChild:)(result, a2 & 1, a3, a4 & 1, a5, a6, a7, v12, v13 & 1));
    if (*(_BYTE *)(a5 + 98) == 1)
      *(double *)&result = COERCE_DOUBLE(StackLayout.UnmanagedImplementation.resizeAnyChildrenWithTrailingOverflow(in:)(v11, v14, a3, v15, a5, a6, a7));
    *(_QWORD *)(a5 + 32) = v11;
    *(_BYTE *)(a5 + 40) = v14;
    *(double *)(a5 + 48) = *(double *)&a3;
    *(_BYTE *)(a5 + 56) = v15;
  }
  return result;
}

uint64_t StackLayout.UnmanagedImplementation.proposalWhenPlacing(in:)(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  BOOL v4;
  uint64_t result;
  BOOL v6;

  v3 = a1[3];
  v4 = (~a1[2] & 0x7FF0000000000000) == 0 && (a1[2] & 0xFFFFFFFFFFFFFLL) != 0;
  if (v4)
    result = 0;
  else
    result = a1[2];
  if (*(_BYTE *)(a2 + 17))
    v6 = v4;
  else
    v6 = (~v3 & 0x7FF0000000000000) == 0 && (v3 & 0xFFFFFFFFFFFFFLL) != 0;
  if (v6)
  {
    if (*(_BYTE *)(a2 + 17))
      return *a1;
  }
  return result;
}

uint64_t specialized StackLayout.UnmanagedImplementation.sizeChildrenGenerallyWithConcreteMajorProposal(in:minorProposalForChild:)(uint64_t a1, char a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8, double a9)
{
  int v9;
  char v10;
  uint64_t v13;
  uint64_t v15;
  double v18;
  uint64_t result;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  double v23;
  double v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  double v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  uint64_t v41;
  double v42;
  double v43;
  double v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  BOOL v48;
  uint64_t v49;
  unint64_t v50;
  double v51;
  double v52;
  uint64_t v53;
  double *v54;
  double v55;
  double v56;
  int v57;
  double v58;
  double v59;
  double v60;
  double v61;
  double v62;
  double v63;
  double v64;
  double v65;
  double v66;
  double v67;
  uint64_t v68;
  uint64_t v69;
  __int128 *InputValue;
  double v71;
  double v72;
  uint64_t v73;
  double v74;
  double v75;
  double v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char v80;
  char v81;
  _QWORD *v82;
  os_unfair_lock_s *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char v89;
  _QWORD *v90;
  uint64_t v91;
  int v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  double v97;
  double v98;
  double v99;
  double v100;
  double v101;
  double v102;
  double v103;
  char v104;
  CGRect v105;

  v9 = *(unsigned __int8 *)(a5 + 17);
  if (*(_BYTE *)(a5 + 17))
    v10 = a4;
  else
    v10 = a2;
  if ((v10 & 1) == 0)
  {
    v13 = a7;
    v15 = a5;
    v18 = *(double *)(a5 + 24);
    LOBYTE(v98) = a2 & 1;
    v104 = a4 & 1;
    result = StackLayout.UnmanagedImplementation.prioritize(_:proposedSize:)(a6, a7, a1, a2 & 1, a3, a4 & 1, a5, a6, a7);
    v95 = a6;
    if (a6)
      v20 = a6;
    else
      v20 = -8;
    if ((v13 & 0x8000000000000000) == 0)
    {
      if (!v13)
        return result;
      v21 = 0;
      v89 = a8;
      v22 = (_QWORD *)(v20 + 48);
      if (v9)
        v23 = *(double *)&a3;
      else
        v23 = *(double *)&a1;
      v24 = v23 - v18;
      v92 = *MEMORY[0x24BE096C0];
      v90 = v22;
      v91 = v15;
      v88 = v13;
      while (v21 < v13)
      {
        if ((unsigned __int128)(v21 * (__int128)120) >> 64 != (120 * v21) >> 63)
          goto LABEL_150;
        v25 = v22[15 * v21];
        v26 = v95;
        if (v21 < 0)
          goto LABEL_151;
        v27 = v13;
        if (v21 + 1 != v13)
        {
          v27 = v21 + 1;
          while (v27 < v13)
          {
            if ((unsigned __int128)(v27 * (__int128)120) >> 64 != (120 * v27) >> 63)
              goto LABEL_135;
            if (*(double *)(v95 + 120 * v22[15 * v27]) != *(double *)(v95 + 120 * v25))
              goto LABEL_25;
            if (v13 == ++v27)
            {
              v27 = v13;
              goto LABEL_25;
            }
          }
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
LABEL_142:
          __break(1u);
LABEL_143:
          __break(1u);
LABEL_144:
          __break(1u);
LABEL_145:
          __break(1u);
LABEL_146:
          __break(1u);
LABEL_147:
          __break(1u);
LABEL_148:
          __break(1u);
          break;
        }
LABEL_25:
        if (v27 < v21)
          goto LABEL_148;
        if (v27 > v13)
          goto LABEL_152;
        v28 = 0.0;
        if (v25 == *v22)
        {
          if (v27 != v13)
          {
            v29 = v27;
            while (v29 < v13)
            {
              if ((unsigned __int128)(v29 * (__int128)120) >> 64 != (120 * v29) >> 63)
                goto LABEL_138;
              if (v27 < 0)
                goto LABEL_140;
              v30 = v95 + 120 * v22[15 * v29];
              if ((*(_BYTE *)(v30 + 16) & 1) != 0)
                goto LABEL_154;
              ++v29;
              v28 = v28 + *(double *)(v30 + 8);
              if (v13 == v29)
                goto LABEL_35;
            }
            goto LABEL_136;
          }
LABEL_35:
          v24 = v24 - v28;
          if (v21 != v27)
            goto LABEL_45;
        }
        else
        {
          if (v21 != v27)
          {
            v31 = v21;
            while (v31 < v27)
            {
              if ((unsigned __int128)(v31 * (__int128)120) >> 64 != (120 * v31) >> 63)
                goto LABEL_139;
              if (v21 < 0)
                goto LABEL_141;
              v32 = v95 + 120 * v22[15 * v31];
              if ((*(_BYTE *)(v32 + 16) & 1) != 0)
                goto LABEL_155;
              ++v31;
              v28 = v28 + *(double *)(v32 + 8);
              if (v27 == v31)
                goto LABEL_44;
            }
            goto LABEL_137;
          }
LABEL_44:
          v24 = v24 + v28;
          if (v21 != v27)
          {
LABEL_45:
            if (v27 <= v21)
              v33 = v21;
            else
              v33 = v27;
            v93 = v27;
            v94 = v33;
            while (v94 != v21)
            {
              v45 = 15 * v21;
              if ((unsigned __int128)(v21 * (__int128)120) >> 64 != (120 * v21) >> 63)
                goto LABEL_130;
              v46 = v21 + 1;
              if ((v21 | v27 | (v21 + 1)) < 0)
                goto LABEL_131;
              v47 = v27 - v46;
              if (__OFSUB__(v27, v46))
                goto LABEL_132;
              v48 = __OFADD__(v47, 1);
              v49 = v47 + 1;
              if (v48)
                goto LABEL_133;
              v50 = v22[v45];
              v51 = 0.0;
              if (v24 / (double)v49 > 0.0)
                v52 = v24 / (double)v49;
              else
                v52 = 0.0;
              v53 = v26 + 120 * v50;
              v55 = *(double *)(v53 + 56);
              v56 = *(double *)(v53 + 64);
              v54 = (double *)(v53 + 56);
              v57 = *(unsigned __int8 *)(v15 + 17);
              v58 = v54[4];
              v59 = v54[5];
              v105.origin.x = v55;
              v105.origin.y = v56;
              v105.size.width = v58;
              v105.size.height = v59;
              if (!CGRectIsNull(v105))
              {
                if ((v89 & 1) != 0)
                  v60 = v59;
                else
                  v60 = v58;
                if ((v89 & 1) != 0)
                  v61 = v56;
                else
                  v61 = v55;
                v62 = v61 + v60;
                if (v62 >= v61)
                  v63 = v61;
                else
                  v63 = v62;
                if (v61 > v62)
                  v62 = v61;
                if (v63 <= v62)
                  v51 = v62;
              }
              v64 = v51 - a9;
              v40 = 0.0;
              if (v51 - a9 <= 0.0)
                v64 = 0.0;
              v65 = a9 - v64;
              if (v57)
                v66 = v65;
              else
                v66 = v52;
              if (v57)
                v67 = v52;
              else
                v67 = v65;
              v68 = *(_QWORD *)(v15 + 88);
              if ((*(_BYTE *)(v15 + 96) & 1) != 0)
              {
                if ((v50 & 0x8000000000000000) != 0)
                  goto LABEL_142;
                if (v50 >= *(_QWORD *)(v68 + 16))
                  goto LABEL_144;
                v69 = v68 + 12 * v50;
              }
              else
              {
                if ((v50 & 0x8000000000000000) != 0)
                  goto LABEL_143;
                if (v50 >= *(_QWORD *)(v68 + 16))
                  goto LABEL_145;
                v69 = v68 + 8 * v50;
              }
              v97 = v67;
              v96 = v50;
              if (*(_DWORD *)(v69 + 32) == v92)
              {
                InputValue = &static LayoutComputer.defaultValue;
                if (one-time initialization token for defaultValue != -1)
                {
                  swift_once();
                  InputValue = &static LayoutComputer.defaultValue;
                }
              }
              else
              {
                InputValue = (__int128 *)AGGraphGetInputValue();
              }
              v72 = *(double *)InputValue;
              v71 = *((double *)InputValue + 1);
              v73 = one-time initialization token for lockAssertionsAreEnabled;
              swift_retain();
              if (v73 != -1)
                swift_once();
              if (lockAssertionsAreEnabled)
              {
                if (one-time initialization token for _lock != -1)
                  swift_once();
                if (!_MovableLockIsOwner(static Update._lock))
                  goto LABEL_157;
              }
              v98 = v66;
              LOBYTE(v99) = 0;
              v100 = v97;
              LOBYTE(v101) = 0;
              v74 = (*(double (**)(double *))(**(_QWORD **)&v72 + 120))(&v98);
              v76 = v75;
              v77 = *(_QWORD *)v15;
              if (lockAssertionsAreEnabled)
              {
                v78 = one-time initialization token for _lock;
                swift_retain();
                if (v78 != -1)
                  swift_once();
                if (!_MovableLockIsOwner(static Update._lock))
                  goto LABEL_157;
              }
              else
              {
                swift_retain();
              }
              v98 = v74;
              v99 = v76;
              v100 = v66;
              v101 = v97;
              *(double *)&v79 = COERCE_DOUBLE((*(uint64_t (**)(unint64_t, double *))(**(_QWORD **)&v72 + 144))(v77, &v98));
              v81 = v80;
              swift_release();
              if ((v81 & 1) != 0)
              {
                if (one-time initialization token for _typeCache != -1)
                  swift_once();
                v82 = static AlignmentKey._typeCache;
                v83 = (os_unfair_lock_s *)((char *)static AlignmentKey._typeCache + 16);
                swift_retain();
                os_unfair_lock_lock(v83);
                v84 = v82[4];
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                os_unfair_lock_unlock(v83);
                swift_release();
                if (v77 < 2)
                  goto LABEL_146;
                if (v77 >> 1 > *(_QWORD *)(v84 + 16))
                  goto LABEL_147;
                v85 = v84 + 16 * ((v77 >> 1) - 1);
                v86 = *(_QWORD *)(v85 + 32);
                v87 = *(_QWORD *)(v85 + 40);
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                v98 = v72;
                v99 = v71;
                v100 = v74;
                v101 = v76;
                v36 = v97;
                v102 = v66;
                v103 = v97;
                (*(void (**)(double *, uint64_t, uint64_t))(v87 + 8))(&v98, v86, v87);
                v34 = v88;
              }
              else
              {
                v34 = v13;
                v35 = *(double *)&v79;
                v36 = v97;
              }
              v37 = INFINITY;
              if ((*(_QWORD *)&v35 & 0xFFFFFFFFFFFFFLL) == 0)
                v37 = v35;
              if ((~*(_QWORD *)&v35 & 0x7FF0000000000000) == 0)
                v35 = v37;
              v38 = -v35;
              v15 = v91;
              if (*(_BYTE *)(v91 + 17))
                v39 = v38;
              else
                v39 = 0.0;
              if (!*(_BYTE *)(v91 + 17))
                v40 = v38;
              result = swift_release();
              v41 = v95 + 120 * v96;
              *v54 = v39;
              v54[1] = v40;
              v54[2] = v72;
              v54[3] = v71;
              v54[4] = v74;
              v54[5] = v76;
              *(double *)(v41 + 104) = v66;
              *(double *)(v41 + 112) = v36;
              if (*(_BYTE *)(v91 + 17))
                v42 = v76;
              else
                v42 = v74;
              v43 = v24 - v42;
              if ((*(_QWORD *)&v43 & 0xFFFFFFFFFFFFFLL) != 0)
                v44 = v24;
              else
                v44 = v43;
              if ((~*(_QWORD *)&v43 & 0x7FF0000000000000) != 0)
                v24 = v43;
              else
                v24 = v44;
              v21 = v46;
              v27 = v93;
              v22 = v90;
              v13 = v34;
              v26 = v95;
              if (v93 == v46)
                goto LABEL_14;
            }
            __break(1u);
LABEL_130:
            __break(1u);
LABEL_131:
            __break(1u);
LABEL_132:
            __break(1u);
LABEL_133:
            __break(1u);
            goto LABEL_134;
          }
        }
LABEL_14:
        v21 = v27;
        if (v27 == v13)
          return result;
      }
      __break(1u);
LABEL_150:
      __break(1u);
LABEL_151:
      __break(1u);
LABEL_152:
      __break(1u);
    }
    __break(1u);
LABEL_154:
    __break(1u);
LABEL_155:
    __break(1u);
  }
  __break(1u);
LABEL_157:
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized StackLayout.UnmanagedImplementation.sizeChildrenGenerallyWithConcreteMajorProposal(in:minorProposalForChild:)(uint64_t a1, char a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  int v9;
  char v10;
  uint64_t v11;
  uint64_t v13;
  double v16;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  double v21;
  double v22;
  uint64_t v23;
  uint64_t v24;
  double v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  uint64_t v36;
  double v37;
  double v38;
  double v39;
  BOOL v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  BOOL v44;
  uint64_t v45;
  unint64_t v46;
  double v47;
  double v48;
  int v49;
  double v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  __int128 *InputValue;
  double v55;
  double v56;
  uint64_t v57;
  double v58;
  double v59;
  double v60;
  double v61;
  double v62;
  unint64_t v63;
  uint64_t v64;
  double v65;
  uint64_t v66;
  char v67;
  char v68;
  _QWORD *v69;
  os_unfair_lock_s *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  uint64_t v77;
  int v78;
  uint64_t v80;
  uint64_t v81;
  double v82;
  double v83;
  double v84;
  double v85;
  double v86;
  double v87;
  char v88;

  v9 = *(unsigned __int8 *)(a5 + 17);
  if (*(_BYTE *)(a5 + 17))
    v10 = a4;
  else
    v10 = a2;
  if ((v10 & 1) == 0)
  {
    v11 = a7;
    v13 = a5;
    v16 = *(double *)(a5 + 24);
    LOBYTE(v82) = a2 & 1;
    v88 = a4 & 1;
    result = StackLayout.UnmanagedImplementation.prioritize(_:proposedSize:)(a6, a7, a1, a2 & 1, a3, a4 & 1, a5, a6, a7);
    if (a6)
      v18 = a6;
    else
      v18 = -8;
    if ((v11 & 0x8000000000000000) == 0)
    {
      if (!v11)
        return result;
      v19 = 0;
      v20 = (_QWORD *)(v18 + 48);
      if (v9)
        v21 = *(double *)&a3;
      else
        v21 = *(double *)&a1;
      v22 = v21 - v16;
      v78 = *MEMORY[0x24BE096C0];
      v76 = a6;
      v77 = v11;
      v75 = v20;
      v81 = v13;
      while (v19 < v11)
      {
        if ((unsigned __int128)(v19 * (__int128)120) >> 64 != (120 * v19) >> 63)
          goto LABEL_146;
        v23 = v20[15 * v19];
        if (v19 < 0)
          goto LABEL_147;
        v24 = v11;
        if (v19 + 1 != v11)
        {
          v24 = v19 + 1;
          while (v24 < v11)
          {
            if ((unsigned __int128)(v24 * (__int128)120) >> 64 != (120 * v24) >> 63)
              goto LABEL_131;
            if (*(double *)(a6 + 120 * v20[15 * v24]) != *(double *)(a6 + 120 * v23))
              goto LABEL_25;
            if (v11 == ++v24)
            {
              v24 = v11;
              goto LABEL_25;
            }
          }
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
LABEL_142:
          __break(1u);
LABEL_143:
          __break(1u);
LABEL_144:
          __break(1u);
          break;
        }
LABEL_25:
        if (v24 < v19)
          goto LABEL_144;
        if (v24 > v11)
          goto LABEL_148;
        v25 = 0.0;
        if (v23 == *v20)
        {
          if (v24 != v11)
          {
            v26 = v24;
            while (v26 < v11)
            {
              if ((unsigned __int128)(v26 * (__int128)120) >> 64 != (120 * v26) >> 63)
                goto LABEL_134;
              if (v24 < 0)
                goto LABEL_136;
              v27 = a6 + 120 * v20[15 * v26];
              if ((*(_BYTE *)(v27 + 16) & 1) != 0)
                goto LABEL_150;
              ++v26;
              v25 = v25 + *(double *)(v27 + 8);
              if (v11 == v26)
                goto LABEL_35;
            }
            goto LABEL_132;
          }
LABEL_35:
          v22 = v22 - v25;
          if (v19 != v24)
            goto LABEL_45;
        }
        else
        {
          if (v19 != v24)
          {
            v28 = v19;
            while (v28 < v24)
            {
              if ((unsigned __int128)(v28 * (__int128)120) >> 64 != (120 * v28) >> 63)
                goto LABEL_135;
              if (v19 < 0)
                goto LABEL_137;
              v29 = a6 + 120 * v20[15 * v28];
              if ((*(_BYTE *)(v29 + 16) & 1) != 0)
                goto LABEL_151;
              ++v28;
              v25 = v25 + *(double *)(v29 + 8);
              if (v24 == v28)
                goto LABEL_44;
            }
            goto LABEL_133;
          }
LABEL_44:
          v22 = v22 + v25;
          if (v19 != v24)
          {
LABEL_45:
            if (v24 <= v19)
              v30 = v19;
            else
              v30 = v24;
            v80 = v30;
            while (v80 != v19)
            {
              v41 = 15 * v19;
              if ((unsigned __int128)(v19 * (__int128)120) >> 64 != (120 * v19) >> 63)
                goto LABEL_126;
              v42 = v19 + 1;
              if ((v19 | v24 | (v19 + 1)) < 0)
                goto LABEL_127;
              v43 = v24 - v42;
              if (__OFSUB__(v24, v42))
                goto LABEL_128;
              v44 = __OFADD__(v43, 1);
              v45 = v43 + 1;
              if (v44)
                goto LABEL_129;
              v46 = v20[v41];
              v47 = v22 / (double)v45;
              if (v47 <= 0.0)
                v47 = 0.0;
              if (*(_BYTE *)(v13 + 17) == 1)
                v48 = *(double *)&a8;
              else
                v48 = v47;
              if (*(_BYTE *)(v13 + 17) == 1)
                v49 = a9 & 1;
              else
                v49 = 0;
              if (*(_BYTE *)(v13 + 17) == 1)
                v50 = v47;
              else
                v50 = *(double *)&a8;
              if (*(_BYTE *)(v13 + 17) == 1)
                v51 = 0;
              else
                v51 = a9 & 1;
              v52 = *(_QWORD *)(v13 + 88);
              if ((*(_BYTE *)(v13 + 96) & 1) != 0)
              {
                if ((v46 & 0x8000000000000000) != 0)
                  goto LABEL_138;
                if (v46 >= *(_QWORD *)(v52 + 16))
                  goto LABEL_140;
                v53 = v52 + 12 * v46;
              }
              else
              {
                if ((v46 & 0x8000000000000000) != 0)
                  goto LABEL_139;
                if (v46 >= *(_QWORD *)(v52 + 16))
                  goto LABEL_141;
                v53 = v52 + 8 * v46;
              }
              if (*(_DWORD *)(v53 + 32) == v78)
              {
                InputValue = &static LayoutComputer.defaultValue;
                if (one-time initialization token for defaultValue != -1)
                {
                  swift_once();
                  InputValue = &static LayoutComputer.defaultValue;
                }
              }
              else
              {
                InputValue = (__int128 *)AGGraphGetInputValue();
              }
              v56 = *(double *)InputValue;
              v55 = *((double *)InputValue + 1);
              v57 = one-time initialization token for lockAssertionsAreEnabled;
              swift_retain();
              if (v57 != -1)
                swift_once();
              if (lockAssertionsAreEnabled)
              {
                if (one-time initialization token for _lock != -1)
                  swift_once();
                if (!_MovableLockIsOwner(static Update._lock))
                  goto LABEL_153;
              }
              v82 = v48;
              LOBYTE(v83) = v49;
              v84 = v50;
              LOBYTE(v85) = v51;
              v58 = (*(double (**)(double *))(**(_QWORD **)&v56 + 120))(&v82);
              v60 = v59;
              if (v49)
                v61 = NAN;
              else
                v61 = v48;
              if (v51)
                v62 = NAN;
              else
                v62 = v50;
              v63 = *(_QWORD *)v81;
              if (lockAssertionsAreEnabled)
              {
                v64 = one-time initialization token for _lock;
                swift_retain();
                v65 = v55;
                if (v64 != -1)
                  swift_once();
                if (!_MovableLockIsOwner(static Update._lock))
                  goto LABEL_153;
              }
              else
              {
                swift_retain();
                v65 = v55;
              }
              v82 = v58;
              v83 = v60;
              v84 = v61;
              v85 = v62;
              *(double *)&v66 = COERCE_DOUBLE((*(uint64_t (**)(unint64_t, double *))(**(_QWORD **)&v56 + 144))(v63, &v82));
              v68 = v67;
              swift_release();
              if ((v68 & 1) != 0)
              {
                if (one-time initialization token for _typeCache != -1)
                  swift_once();
                v69 = static AlignmentKey._typeCache;
                v70 = (os_unfair_lock_s *)((char *)static AlignmentKey._typeCache + 16);
                swift_retain();
                os_unfair_lock_lock(v70);
                v71 = v69[4];
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                os_unfair_lock_unlock(v70);
                swift_release();
                if (v63 < 2)
                  goto LABEL_142;
                if (v63 >> 1 > *(_QWORD *)(v71 + 16))
                  goto LABEL_143;
                v72 = v71 + 16 * ((v63 >> 1) - 1);
                v73 = *(_QWORD *)(v72 + 32);
                v74 = *(_QWORD *)(v72 + 40);
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                v82 = v56;
                v83 = v55;
                v65 = v55;
                v84 = v58;
                v85 = v60;
                v86 = v61;
                v87 = v62;
                (*(void (**)(double *, uint64_t, uint64_t))(v74 + 8))(&v82, v73, v74);
              }
              else
              {
                v31 = *(double *)&v66;
              }
              v32 = INFINITY;
              if ((*(_QWORD *)&v31 & 0xFFFFFFFFFFFFFLL) == 0)
                v32 = v31;
              if ((~*(_QWORD *)&v31 & 0x7FF0000000000000) == 0)
                v31 = v32;
              v33 = -v31;
              v13 = v81;
              if (*(_BYTE *)(v81 + 17))
                v34 = v33;
              else
                v34 = 0.0;
              if (*(_BYTE *)(v81 + 17))
                v35 = 0.0;
              else
                v35 = v33;
              a6 = v76;
              v36 = v76 + 120 * v46;
              result = swift_release();
              *(double *)(v36 + 56) = v34;
              *(double *)(v36 + 64) = v35;
              *(double *)(v36 + 72) = v56;
              *(double *)(v36 + 80) = v65;
              *(double *)(v36 + 88) = v58;
              *(double *)(v36 + 96) = v60;
              *(double *)(v36 + 104) = v61;
              *(double *)(v36 + 112) = v62;
              if (*(_BYTE *)(v81 + 17))
                v37 = v60;
              else
                v37 = v58;
              v38 = v22 - v37;
              if ((*(_QWORD *)&v38 & 0xFFFFFFFFFFFFFLL) != 0)
                v39 = v22;
              else
                v39 = v38;
              if ((~*(_QWORD *)&v38 & 0x7FF0000000000000) != 0)
                v22 = v38;
              else
                v22 = v39;
              v19 = v42;
              v40 = v24 == v42;
              v11 = v77;
              v20 = v75;
              if (v40)
                goto LABEL_14;
            }
            __break(1u);
LABEL_126:
            __break(1u);
LABEL_127:
            __break(1u);
LABEL_128:
            __break(1u);
LABEL_129:
            __break(1u);
            goto LABEL_130;
          }
        }
LABEL_14:
        v19 = v24;
        if (v24 == v11)
          return result;
      }
      __break(1u);
LABEL_146:
      __break(1u);
LABEL_147:
      __break(1u);
LABEL_148:
      __break(1u);
    }
    __break(1u);
LABEL_150:
    __break(1u);
LABEL_151:
    __break(1u);
  }
  __break(1u);
LABEL_153:
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t StackLayout.UnmanagedImplementation.prioritize(_:proposedSize:)(uint64_t result, uint64_t a2, uint64_t a3, char a4, uint64_t a5, char a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v10;
  int v11;
  int v12;
  double v13;
  double *v14;
  _BYTE *v15;
  BOOL v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  double v24;
  uint64_t v25;
  double v26;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  __int128 *InputValue;
  uint64_t v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  uint64_t v45;
  char v46;
  uint64_t v47;
  char v48;
  char v49;
  unint64_t *v50[3];

  v10 = a2;
  v11 = a4 & 1;
  v12 = *(unsigned __int8 *)(a7 + 17);
  if (v12 == 1)
    v13 = *(double *)&a3;
  else
    v13 = *(double *)&a5;
  if (v12 == 1)
  {
    v14 = (double *)(a7 + 32);
  }
  else
  {
    v11 = a6 & 1;
    v14 = (double *)(a7 + 48);
  }
  if (v12 == 1)
    v15 = (_BYTE *)(a7 + 40);
  else
    v15 = (_BYTE *)(a7 + 56);
  if ((*v15 & 1) != 0)
  {
    if (!v11)
      goto LABEL_19;
  }
  else
  {
    if (*v14 != v13)
      LOBYTE(v11) = 1;
    if ((v11 & 1) != 0)
      goto LABEL_19;
  }
  v16 = v12 == 0;
  v17 = 32;
  if (!v16)
    v17 = 48;
  if (*(_BYTE *)(a7 + v17 + 8) != 1)
    return result;
LABEL_19:
  if (!a2)
    goto LABEL_23;
  if ((a2 & 0x8000000000000000) == 0)
  {
    v18 = (_BYTE *)(result + 32);
    v19 = a2;
    do
    {
      *((_QWORD *)v18 - 3) = 0;
      *(v18 - 16) = 1;
      *((_QWORD *)v18 - 1) = 0;
      *v18 = 1;
      v18 += 120;
      --v19;
    }
    while (v19);
LABEL_23:
    if (result)
      v20 = result;
    else
      v20 = -8;
    v21 = v20 + 8;
    if (result)
      v22 = result + 48;
    else
      v22 = 40;
    v50[0] = (unint64_t *)v22;
    v50[1] = (unint64_t *)a2;
    LOBYTE(v45) = a4 & 1;
    v49 = a6 & 1;
    if (a9 <= 32)
      result = (uint64_t)specialized BidirectionalCollection<>.insertionSort(by:)(v50, v20, a2, v20 + 8, a2, a7, a8, a9, a3, a4 & 1, a5, a6 & 1);
    else
      result = (uint64_t)slowPath #1 (_:) in StackLayout.UnmanagedImplementation.prioritize(_:proposedSize:)((uint64_t)v50, v20, a2, v20 + 8, a2, a7, a8, a9, a3, a4 & 1, a5, a6 & 1);
    v23 = 120 * *(_QWORD *)v22;
    if ((unsigned __int128)(*(uint64_t *)v22 * (__int128)120) >> 64 == v23 >> 63)
    {
      if (!v10)
        return result;
      v24 = *(double *)(v20 + v23);
      v39 = *MEMORY[0x24BE096C0];
      v25 = v10;
      v40 = v10;
      while (!__OFSUB__(v25--, 1))
      {
        if (v25 < 0 || v25 >= v10)
          goto LABEL_69;
        if ((unsigned __int128)(v25 * (__int128)120) >> 64 != (120 * v25) >> 63)
          goto LABEL_70;
        v28 = *(_QWORD *)(v22 + 120 * v25);
        v29 = 120 * v28;
        if ((unsigned __int128)((uint64_t)v28 * (__int128)120) >> 64 != (uint64_t)(120 * v28) >> 63)
          goto LABEL_71;
        if (*(double *)(v20 + 120 * v28) == v24)
          return result;
        v30 = v21 + v29;
        if (*(_BYTE *)(v21 + v29 + 8) == 1)
        {
          v31 = *(unsigned __int8 *)(a7 + 17);
          if (*(_BYTE *)(a7 + 17))
            v32 = a3;
          else
            v32 = 0;
          if (*(_BYTE *)(a7 + 17))
            v33 = 0;
          else
            v33 = a5;
          v34 = *(_QWORD *)(a7 + 88);
          if ((*(_BYTE *)(a7 + 96) & 1) != 0)
          {
            if ((v28 & 0x8000000000000000) != 0)
              goto LABEL_72;
            if (v28 >= *(_QWORD *)(v34 + 16))
              goto LABEL_74;
            v35 = v34 + 12 * v28;
          }
          else
          {
            if ((v28 & 0x8000000000000000) != 0)
              goto LABEL_73;
            if (v28 >= *(_QWORD *)(v34 + 16))
              goto LABEL_75;
            v35 = v34 + 8 * v28;
          }
          if (*(_DWORD *)(v35 + 32) == v39)
          {
            InputValue = &static LayoutComputer.defaultValue;
            if (one-time initialization token for defaultValue != -1)
            {
              swift_once();
              InputValue = &static LayoutComputer.defaultValue;
            }
          }
          else
          {
            InputValue = (__int128 *)AGGraphGetInputValue();
          }
          v37 = *(_QWORD *)InputValue;
          v38 = one-time initialization token for lockAssertionsAreEnabled;
          swift_retain();
          if (v38 != -1)
            swift_once();
          v21 = v20 + 8;
          if (lockAssertionsAreEnabled)
          {
            if (one-time initialization token for _lock != -1)
              swift_once();
            if (!_MovableLockIsOwner(static Update._lock))
              goto LABEL_78;
          }
          v45 = v32;
          v46 = v31 & a4;
          v47 = v33;
          v48 = (v31 ^ 1) & a6;
          v26 = (*(double (**)(uint64_t *, uint64_t))(*(_QWORD *)v37 + 128))(&v45, v31);
          result = swift_release();
          *(double *)v30 = v26;
          *(_BYTE *)(v30 + 8) = 0;
          v10 = v40;
        }
        if (!v25)
          return result;
      }
      __break(1u);
LABEL_69:
      __break(1u);
LABEL_70:
      __break(1u);
LABEL_71:
      __break(1u);
LABEL_72:
      __break(1u);
LABEL_73:
      __break(1u);
LABEL_74:
      __break(1u);
LABEL_75:
      __break(1u);
    }
    __break(1u);
  }
  __break(1u);
LABEL_78:
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

_QWORD *slowPath #1 (_:) in StackLayout.UnmanagedImplementation.prioritize(_:proposedSize:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, char a12)
{
  return specialized MutableCollection<>.sort(by:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10 & 1, a11, a12 & 1);
}

uint64_t specialized StackLayout.UnmanagedImplementation.placeChildren1(in:minorProposalForChild:)(uint64_t a1, char a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8, double a9)
{
  uint64_t v9;
  char v12;
  char v13;
  uint64_t result;
  double v15;
  double v16;
  double v17;
  CGFloat *v18;
  uint64_t v19;
  double v20;
  double v21;
  double v22;
  double v23;
  int v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  uint64_t v30;
  int v31;
  double *v32;
  double *v33;
  double v34;
  double v35;
  double *v37;
  double v38;
  double v40;
  double v41;
  CGRect v42;

  v9 = a7;
  v12 = a8 & 1;
  if (*(_BYTE *)(a5 + 17))
    v13 = a4;
  else
    v13 = a2;
  if ((v13 & 1) != 0)
    result = specialized StackLayout.UnmanagedImplementation.sizeChildrenIdeally(in:minorProposalForChild:)(a5, a6, a7, v12, a9);
  else
    result = specialized StackLayout.UnmanagedImplementation.sizeChildrenGenerallyWithConcreteMajorProposal(in:minorProposalForChild:)(a1, a2 & 1, a3, a4 & 1, a5, a6, a7, v12, a9);
  v15 = 0.0;
  v16 = 0.0;
  v17 = 0.0;
  if (!a6)
  {
LABEL_33:
    if (!v9)
      goto LABEL_59;
    if (v9 < 0)
    {
LABEL_66:
      __break(1u);
      return result;
    }
    v30 = 0;
    v31 = *(unsigned __int8 *)(a5 + 17);
    v32 = (double *)(a6 + 96);
    v15 = 0.0;
    while (1)
    {
      v35 = v15 + *(v32 - 7);
      if ((~*(_QWORD *)&v35 & 0x7FF0000000000000) != 0 || (*(_QWORD *)&v35 & 0xFFFFFFFFFFFFFLL) == 0)
      {
        if ((v31 & 1) == 0)
        {
          *(v32 - 5) = v35;
LABEL_50:
          v37 = v32 - 4;
          goto LABEL_51;
        }
        *(v32 - 4) = v35;
      }
      else if ((v31 & 1) == 0)
      {
        goto LABEL_50;
      }
      v37 = (double *)(a6 + 120 * v30 + 56);
LABEL_51:
      v38 = *v37 - v16;
      if ((~*(_QWORD *)&v38 & 0x7FF0000000000000) != 0 || (*(_QWORD *)&v38 & 0xFFFFFFFFFFFFFLL) == 0)
      {
        if ((v31 & 1) != 0)
        {
          *(v32 - 5) = v38;
          v34 = *v32;
        }
        else
        {
          *(v32 - 4) = v38;
          v34 = *(v32 - 1);
        }
      }
      else
      {
        v33 = v32 - 1;
        if (v31)
          v33 = v32;
        v34 = *v33;
      }
      v15 = v35 + v34;
      v32 += 15;
      ++v30;
      if (!--v9)
        goto LABEL_59;
    }
  }
  if (v9)
  {
    v18 = (CGFloat *)(a6 + 96);
    v19 = 120 * v9;
    while (1)
    {
      v20 = *(v18 - 5);
      v21 = *(v18 - 4);
      v22 = *(v18 - 1);
      v23 = *v18;
      v24 = *(unsigned __int8 *)(a5 + 17);
      v42.origin.x = v20;
      v42.origin.y = v21;
      v42.size.width = v22;
      v42.size.height = *v18;
      result = CGRectIsNull(v42);
      v25 = 0.0;
      v26 = 0.0;
      if ((result & 1) == 0)
      {
        if (v24)
          v27 = v22;
        else
          v27 = v23;
        if (v24)
          v26 = v20;
        else
          v26 = v21;
        v28 = v26 + v27;
        if (v28 >= v26)
          v29 = v26;
        else
          v29 = v28;
        if (v26 <= v28)
          v26 = v28;
        if (v29 > v26)
          v25 = 0.0;
        else
          v25 = v29;
        if (v29 > v26)
          v26 = 0.0;
      }
      if (v25 < v16)
        v16 = v25;
      if (v17 <= v26)
        v17 = v26;
      if (v16 > v17)
        break;
      v18 += 15;
      v19 -= 120;
      if (!v19)
        goto LABEL_33;
    }
    __break(1u);
    goto LABEL_66;
  }
LABEL_59:
  v40 = v17 - v16;
  if (*(_BYTE *)(a5 + 17))
    v41 = v17 - v16;
  else
    v41 = v15;
  if (*(_BYTE *)(a5 + 17))
    v40 = v15;
  *(double *)(a5 + 64) = v41;
  *(double *)(a5 + 72) = v40;
  return result;
}

uint64_t specialized StackLayout.UnmanagedImplementation.placeChildren1(in:minorProposalForChild:)(uint64_t a1, char a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  uint64_t v9;
  char v12;
  char v13;
  uint64_t result;
  double v15;
  double v16;
  double v17;
  CGFloat *v18;
  uint64_t v19;
  double v20;
  double v21;
  double v22;
  double v23;
  int v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  uint64_t v30;
  int v31;
  double *v32;
  double *v33;
  double v34;
  double v35;
  double *v37;
  double v38;
  double v40;
  double v41;
  CGRect v42;

  v9 = a7;
  v12 = a9 & 1;
  if (*(_BYTE *)(a5 + 17))
    v13 = a4;
  else
    v13 = a2;
  if ((v13 & 1) != 0)
    result = specialized StackLayout.UnmanagedImplementation.sizeChildrenIdeally(in:minorProposalForChild:)(a5, a6, a7, a8, v12);
  else
    result = specialized StackLayout.UnmanagedImplementation.sizeChildrenGenerallyWithConcreteMajorProposal(in:minorProposalForChild:)(a1, a2 & 1, a3, a4 & 1, a5, a6, a7, a8, v12);
  v15 = 0.0;
  v16 = 0.0;
  v17 = 0.0;
  if (!a6)
  {
LABEL_33:
    if (!v9)
      goto LABEL_59;
    if (v9 < 0)
    {
LABEL_66:
      __break(1u);
      return result;
    }
    v30 = 0;
    v31 = *(unsigned __int8 *)(a5 + 17);
    v32 = (double *)(a6 + 96);
    v15 = 0.0;
    while (1)
    {
      v35 = v15 + *(v32 - 7);
      if ((~*(_QWORD *)&v35 & 0x7FF0000000000000) != 0 || (*(_QWORD *)&v35 & 0xFFFFFFFFFFFFFLL) == 0)
      {
        if ((v31 & 1) == 0)
        {
          *(v32 - 5) = v35;
LABEL_50:
          v37 = v32 - 4;
          goto LABEL_51;
        }
        *(v32 - 4) = v35;
      }
      else if ((v31 & 1) == 0)
      {
        goto LABEL_50;
      }
      v37 = (double *)(a6 + 120 * v30 + 56);
LABEL_51:
      v38 = *v37 - v16;
      if ((~*(_QWORD *)&v38 & 0x7FF0000000000000) != 0 || (*(_QWORD *)&v38 & 0xFFFFFFFFFFFFFLL) == 0)
      {
        if ((v31 & 1) != 0)
        {
          *(v32 - 5) = v38;
          v34 = *v32;
        }
        else
        {
          *(v32 - 4) = v38;
          v34 = *(v32 - 1);
        }
      }
      else
      {
        v33 = v32 - 1;
        if (v31)
          v33 = v32;
        v34 = *v33;
      }
      v15 = v35 + v34;
      v32 += 15;
      ++v30;
      if (!--v9)
        goto LABEL_59;
    }
  }
  if (v9)
  {
    v18 = (CGFloat *)(a6 + 96);
    v19 = 120 * v9;
    while (1)
    {
      v20 = *(v18 - 5);
      v21 = *(v18 - 4);
      v22 = *(v18 - 1);
      v23 = *v18;
      v24 = *(unsigned __int8 *)(a5 + 17);
      v42.origin.x = v20;
      v42.origin.y = v21;
      v42.size.width = v22;
      v42.size.height = *v18;
      result = CGRectIsNull(v42);
      v25 = 0.0;
      v26 = 0.0;
      if ((result & 1) == 0)
      {
        if (v24)
          v27 = v22;
        else
          v27 = v23;
        if (v24)
          v26 = v20;
        else
          v26 = v21;
        v28 = v26 + v27;
        if (v28 >= v26)
          v29 = v26;
        else
          v29 = v28;
        if (v26 <= v28)
          v26 = v28;
        if (v29 > v26)
          v25 = 0.0;
        else
          v25 = v29;
        if (v29 > v26)
          v26 = 0.0;
      }
      if (v25 < v16)
        v16 = v25;
      if (v17 <= v26)
        v17 = v26;
      if (v16 > v17)
        break;
      v18 += 15;
      v19 -= 120;
      if (!v19)
        goto LABEL_33;
    }
    __break(1u);
    goto LABEL_66;
  }
LABEL_59:
  v40 = v17 - v16;
  if (*(_BYTE *)(a5 + 17))
    v41 = v17 - v16;
  else
    v41 = v15;
  if (*(_BYTE *)(a5 + 17))
    v40 = v15;
  *(double *)(a5 + 64) = v41;
  *(double *)(a5 + 72) = v40;
  return result;
}

uint64_t StackLayout.UnmanagedImplementation.resizeAnyChildrenWithTrailingOverflow(in:)(uint64_t result, char a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  double v7;
  char v8;
  uint64_t v9;
  double v10;
  double v11;
  double *v12;
  uint64_t v13;
  double *v14;

  if (*(_BYTE *)(a5 + 17))
    v7 = *(double *)&result;
  else
    v7 = *(double *)&a3;
  if (*(_BYTE *)(a5 + 17))
    v8 = a2;
  else
    v8 = a4;
  v9 = 72;
  if (*(_BYTE *)(a5 + 17))
    v9 = 64;
  v10 = *(double *)(a5 + v9);
  v11 = v7;
  if ((v8 & 1) != 0)
    v11 = INFINITY;
  if (v10 > v11)
  {
    if (a6 && a7)
    {
      v12 = (double *)(a6 + 96);
      v13 = 120 * a7;
      while (1)
      {
        v14 = v12 - 1;
        if (!*(_BYTE *)(a5 + 17))
          v14 = v12;
        if (*v14 == v10)
          break;
        v12 += 15;
        v13 -= 120;
        if (!v13)
          return specialized StackLayout.UnmanagedImplementation.placeChildren1(in:minorProposalForChild:)(result, a2 & 1, a3, a4 & 1, a5, a6, a7, *(_BYTE *)(a5 + 17) ^ 1u, v11);
      }
    }
    else
    {
      return specialized StackLayout.UnmanagedImplementation.placeChildren1(in:minorProposalForChild:)(result, a2 & 1, a3, a4 & 1, a5, a6, a7, *(_BYTE *)(a5 + 17) ^ 1u, v11);
    }
  }
  return result;
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance VerticalStackOrientationModifier(uint64_t a1, uint64_t *a2, void (*a3)(uint64_t, uint64_t *))
{
  int v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  int v23;

  v4 = *((_DWORD *)a2 + 2);
  v5 = a2[2];
  v6 = *((_DWORD *)a2 + 8);
  v7 = a2[5];
  v8 = a2[6];
  v9 = *((_DWORD *)a2 + 20);
  v10 = *((_DWORD *)a2 + 9) & 0xFFFFFFF3 | 4;
  v13 = *a2;
  v14 = v4;
  v15 = v5;
  v16 = a2[3];
  v17 = v6;
  v18 = v10;
  v19 = v7;
  v20 = v8;
  v21 = *(_OWORD *)(a2 + 7);
  v22 = a2[9];
  v23 = v9;
  swift_retain_n();
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  v11 = swift_bridgeObjectRetain_n();
  a3(v11, &v13);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  return swift_release_n();
}

uint64_t View.verticalStackOrientation()(uint64_t a1, uint64_t a2)
{
  return View.modifier<A>(_:)(a1, a1, &type metadata for VerticalStackOrientationModifier, a2);
}

uint64_t sub_2351028B8(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[2];

  v4 = a1[1];
  v5 = type metadata accessor for ModifiedContent(255, *a1, (uint64_t)&type metadata for VerticalStackOrientationModifier, a4);
  v7[0] = v4;
  v7[1] = &protocol witness table for VerticalStackOrientationModifier;
  return MEMORY[0x23B7C9C04]("I{:\x1B̧\t", v5, v7);
}

ValueMetadata *type metadata accessor for StackLayout()
{
  return &type metadata for StackLayout;
}

ValueMetadata *type metadata accessor for VerticalStackOrientationModifier()
{
  return &type metadata for VerticalStackOrientationModifier;
}

Swift::Int specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, char a12)
{
  uint64_t v12;
  Swift::Int v14;
  Swift::Int result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  Swift::Int v20;
  uint64_t v21;
  Swift::Int v22;
  Swift::Int v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  double v27;
  double v28;
  Swift::Int v29;
  _BOOL4 v30;
  Swift::Int v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  double v35;
  double v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  double v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  __int128 *v49;
  __int128 *v50;
  uint64_t v51;
  uint64_t v52;
  double v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  double v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  __int128 *v68;
  __int128 *v69;
  uint64_t v70;
  uint64_t v71;
  double v72;
  uint64_t v73;
  uint64_t v74;
  double v75;
  double v76;
  double v77;
  double v78;
  _BOOL4 v79;
  _BOOL4 v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  Swift::Int v88;
  uint64_t v89;
  Swift::Int v90;
  int64_t *v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  int64_t v95;
  uint64_t v96;
  double v97;
  double v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  double v105;
  char v106;
  uint64_t v107;
  char v108;
  uint64_t v109;
  uint64_t v110;
  char v111;
  char v112;
  char v113;
  double v114;
  double v115;
  __int128 *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  char v120;
  uint64_t v121;
  char v122;
  uint64_t v123;
  uint64_t v124;
  char v125;
  char v126;
  char v127;
  double v128;
  double v129;
  double v130;
  char v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  char v135;
  char v136;
  char v137;
  double v138;
  double v139;
  double v140;
  double v141;
  BOOL v142;
  _BOOL4 v143;
  BOOL v144;
  int64_t v145;
  unint64_t v146;
  unint64_t v147;
  unint64_t v148;
  char *v149;
  char *v150;
  unint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  char v155;
  char *v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  BOOL v162;
  unint64_t v163;
  char *v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  char *v169;
  uint64_t v170;
  uint64_t v171;
  BOOL v172;
  uint64_t v173;
  char v174;
  char *v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  BOOL v179;
  uint64_t v180;
  uint64_t v181;
  char *v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  char *v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  Swift::Int v190;
  unint64_t v191;
  char *v192;
  uint64_t v193;
  char *v194;
  uint64_t v195;
  char *v196;
  uint64_t *v197;
  unint64_t v198;
  double v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  __int128 *InputValue;
  __int128 *v206;
  uint64_t v207;
  uint64_t v208;
  double v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  double v218;
  char v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  __int128 *v224;
  _DWORD *v225;
  int v226;
  double v227;
  uint64_t v228;
  uint64_t v229;
  double v230;
  double v231;
  double v232;
  double v233;
  _BOOL4 v234;
  _BOOL4 v235;
  char *v236;
  uint64_t v237;
  unint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t *v241;
  char *v242;
  unint64_t v243;
  uint64_t v244;
  uint64_t *v245;
  uint64_t v246;
  Swift::Int v247;
  Swift::Int v248;
  Swift::Int v249;
  char *v250;
  int64_t *v251;
  uint64_t v252;
  char *v253;
  int v258;
  uint64_t v259;
  char v260;
  char v261;
  uint64_t v262;
  char v263;
  char v264;
  _BOOL4 v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  Swift::Int v270;
  Swift::Int v271;
  uint64_t v272;
  _DWORD v276[6];
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  char v280;

  v14 = a1[1];
  result = _minimumMergeRunLength(_:)(v14);
  if (result >= v14)
  {
    if ((v14 & 0x8000000000000000) == 0)
    {
      if (v14)
      {
        LOBYTE(v277) = a10 & 1;
        LOBYTE(v276[0]) = a12 & 1;
        return specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(0, v14, 1, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10 & 1, a11, a12 & 1);
      }
      return result;
    }
    goto LABEL_440;
  }
  if (v14 >= 0)
    v16 = v14;
  else
    v16 = v14 + 1;
  if (v14 < -1)
    goto LABEL_481;
  v249 = v14;
  v247 = result;
  v259 = v12;
  v245 = a1;
  if (v14 < 2)
  {
    v19 = (char *)MEMORY[0x24BEE4AF8];
    v253 = (char *)(MEMORY[0x24BEE4AF8] + 32);
    v246 = MEMORY[0x24BEE4AF8];
    if (v14 != 1)
    {
      v148 = *(_QWORD *)(MEMORY[0x24BEE4AF8] + 16);
      goto LABEL_397;
    }
  }
  else
  {
    v17 = v16 >> 1;
    v18 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(_QWORD *)(v18 + 16) = v17;
    v246 = v18;
    v253 = (char *)(v18 + 32);
  }
  v20 = 0;
  v21 = *a1;
  v244 = *a1 - 8;
  v19 = (char *)MEMORY[0x24BEE4AF8];
  v258 = *MEMORY[0x24BE096C0];
  v22 = v249;
  v272 = v21;
  do
  {
    v23 = v20++;
    v250 = v19;
    v252 = v23;
    if (v20 >= v22)
      goto LABEL_170;
    v24 = *(_QWORD *)(v21 + 8 * v20);
    v25 = 120 * v24;
    if ((unsigned __int128)((uint64_t)v24 * (__int128)120) >> 64 != (uint64_t)(120 * v24) >> 63)
      goto LABEL_437;
    v26 = *(_QWORD *)(v21 + 8 * v23);
    if ((unsigned __int128)((uint64_t)v26 * (__int128)120) >> 64 != (uint64_t)(120 * v26) >> 63)
    {
LABEL_438:
      __break(1u);
LABEL_439:
      __break(1u);
LABEL_440:
      __break(1u);
LABEL_441:
      __break(1u);
LABEL_442:
      __break(1u);
LABEL_443:
      __break(1u);
LABEL_444:
      __break(1u);
LABEL_445:
      __break(1u);
LABEL_446:
      __break(1u);
LABEL_447:
      __break(1u);
LABEL_448:
      __break(1u);
LABEL_449:
      __break(1u);
LABEL_450:
      __break(1u);
LABEL_451:
      __break(1u);
LABEL_452:
      __break(1u);
LABEL_453:
      __break(1u);
LABEL_454:
      __break(1u);
LABEL_455:
      __break(1u);
LABEL_456:
      __break(1u);
LABEL_457:
      __break(1u);
LABEL_458:
      __break(1u);
LABEL_459:
      __break(1u);
LABEL_460:
      __break(1u);
LABEL_461:
      __break(1u);
LABEL_462:
      __break(1u);
LABEL_463:
      __break(1u);
LABEL_464:
      __break(1u);
LABEL_465:
      __break(1u);
LABEL_466:
      __break(1u);
LABEL_467:
      __break(1u);
LABEL_468:
      __break(1u);
LABEL_469:
      __break(1u);
LABEL_470:
      __break(1u);
LABEL_471:
      __break(1u);
LABEL_472:
      __break(1u);
LABEL_473:
      __break(1u);
LABEL_474:
      __break(1u);
LABEL_475:
      __break(1u);
LABEL_476:
      __break(1u);
LABEL_477:
      __break(1u);
LABEL_478:
      __break(1u);
LABEL_479:
      __break(1u);
LABEL_480:
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
LABEL_481:
      result = _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      return result;
    }
    v27 = *(double *)(a2 + 120 * v24);
    v28 = *(double *)(a2 + 120 * v26);
    if (v28 < v27)
      goto LABEL_17;
    if (v27 < v28)
      goto LABEL_21;
    v81 = a4 + v25;
    v270 = v20;
    if ((*(_BYTE *)(a4 + v25 + 8) & 1) != 0)
    {
      v82 = *(unsigned __int8 *)(a6 + 17);
      if (*(_BYTE *)(a6 + 17))
        v83 = a9;
      else
        v83 = 0;
      if (*(_BYTE *)(a6 + 17))
        v84 = 0;
      else
        v84 = a11;
      v85 = *(_QWORD *)(a6 + 88);
      if ((*(_BYTE *)(a6 + 96) & 1) != 0)
      {
        if ((v24 & 0x8000000000000000) != 0)
          goto LABEL_461;
        if (v24 >= *(_QWORD *)(v85 + 16))
          goto LABEL_464;
        v86 = v85 + 12 * v24;
      }
      else
      {
        if ((v24 & 0x8000000000000000) != 0)
          goto LABEL_462;
        if (v24 >= *(_QWORD *)(v85 + 16))
          goto LABEL_465;
        v86 = v85 + 8 * v24;
      }
      if (*(_DWORD *)(v86 + 32) == v258)
      {
        InputValue = &static LayoutComputer.defaultValue;
        if (one-time initialization token for defaultValue != -1)
        {
          swift_once();
          InputValue = &static LayoutComputer.defaultValue;
        }
      }
      else
      {
        InputValue = (__int128 *)AGGraphGetInputValue();
      }
      v207 = *(_QWORD *)InputValue;
      v208 = one-time initialization token for lockAssertionsAreEnabled;
      swift_retain();
      if (v208 != -1)
        swift_once();
      if (lockAssertionsAreEnabled)
      {
        if (one-time initialization token for _lock != -1)
          swift_once();
        if (!_MovableLockIsOwner(static Update._lock))
          goto LABEL_480;
      }
      v277 = v83;
      LOBYTE(v278) = v82 & a10;
      v279 = v84;
      v280 = (v82 ^ 1) & a12;
      v199 = (*(double (**)(uint64_t *, uint64_t))(*(_QWORD *)v207 + 128))(&v277, v82);
      swift_release();
      *(double *)v81 = v199;
      *(_BYTE *)(v81 + 8) = 0;
      v20 = v270;
      v21 = v272;
      v23 = v252;
      if ((*(_BYTE *)(v81 + 24) & 1) == 0)
      {
LABEL_333:
        v209 = *(double *)(v81 + 16);
        goto LABEL_342;
      }
    }
    else
    {
      v199 = *(double *)v81;
      if ((*(_BYTE *)(v81 + 24) & 1) == 0)
        goto LABEL_333;
    }
    v200 = *(unsigned __int8 *)(a6 + 17);
    if (*(_BYTE *)(a6 + 17))
      v201 = a9;
    else
      v201 = 0x7FF0000000000000;
    if (*(_BYTE *)(a6 + 17))
      v202 = 0x7FF0000000000000;
    else
      v202 = a11;
    v203 = *(_QWORD *)(a6 + 88);
    if ((*(_BYTE *)(a6 + 96) & 1) != 0)
    {
      if ((v24 & 0x8000000000000000) != 0)
        goto LABEL_463;
      if (v24 >= *(_QWORD *)(v203 + 16))
        goto LABEL_468;
      v204 = v203 + 12 * v24;
    }
    else
    {
      if ((v24 & 0x8000000000000000) != 0)
        goto LABEL_466;
      if (v24 >= *(_QWORD *)(v203 + 16))
        goto LABEL_467;
      v204 = v203 + 8 * v24;
    }
    if (*(_DWORD *)(v204 + 32) == v258)
    {
      v206 = &static LayoutComputer.defaultValue;
      if (one-time initialization token for defaultValue != -1)
      {
        swift_once();
        v206 = &static LayoutComputer.defaultValue;
      }
    }
    else
    {
      v206 = (__int128 *)AGGraphGetInputValue();
    }
    v210 = *(_QWORD *)v206;
    v211 = one-time initialization token for lockAssertionsAreEnabled;
    swift_retain();
    if (v211 != -1)
      swift_once();
    if (lockAssertionsAreEnabled)
    {
      if (one-time initialization token for _lock != -1)
        swift_once();
      if (!_MovableLockIsOwner(static Update._lock))
        goto LABEL_480;
    }
    v277 = v201;
    LOBYTE(v278) = v200 & a10;
    v279 = v202;
    v280 = (v200 ^ 1) & a12;
    v209 = (*(double (**)(uint64_t *, uint64_t))(*(_QWORD *)v210 + 128))(&v277, v200);
    swift_release();
    *(double *)(v81 + 16) = v209;
    *(_BYTE *)(v81 + 24) = 0;
    v20 = v270;
    v21 = v272;
    v23 = v252;
LABEL_342:
    v212 = a4 + 120 * v26;
    if ((*(_BYTE *)(v212 + 8) & 1) != 0)
    {
      v213 = *(unsigned __int8 *)(a6 + 17);
      if (*(_BYTE *)(a6 + 17))
        v214 = a9;
      else
        v214 = 0;
      if (*(_BYTE *)(a6 + 17))
        v215 = 0;
      else
        v215 = a11;
      v216 = *(_QWORD *)(a6 + 88);
      if ((*(_BYTE *)(a6 + 96) & 1) != 0)
      {
        if ((v26 & 0x8000000000000000) != 0)
          goto LABEL_470;
        if (v26 >= *(_QWORD *)(v216 + 16))
          goto LABEL_472;
        v217 = v216 + 12 * v26;
      }
      else
      {
        if ((v26 & 0x8000000000000000) != 0)
          goto LABEL_469;
        if (v26 >= *(_QWORD *)(v216 + 16))
          goto LABEL_471;
        v217 = v216 + 8 * v26;
      }
      if (*(_DWORD *)(v217 + 32) == v258)
      {
        v224 = &static LayoutComputer.defaultValue;
        if (one-time initialization token for defaultValue != -1)
        {
          swift_once();
          v224 = &static LayoutComputer.defaultValue;
        }
      }
      else
      {
        v224 = (__int128 *)AGGraphGetInputValue();
      }
      v228 = *(_QWORD *)v224;
      v229 = one-time initialization token for lockAssertionsAreEnabled;
      swift_retain();
      if (v229 != -1)
        swift_once();
      if (lockAssertionsAreEnabled)
      {
        if (one-time initialization token for _lock != -1)
          swift_once();
        if (!_MovableLockIsOwner(static Update._lock))
          goto LABEL_480;
      }
      v277 = v214;
      LOBYTE(v278) = v213 & a10;
      v279 = v215;
      v280 = (v213 ^ 1) & a12;
      v218 = (*(double (**)(uint64_t *, uint64_t))(*(_QWORD *)v228 + 128))(&v277, v213);
      swift_release();
      *(double *)v212 = v218;
      *(_BYTE *)(v212 + 8) = 0;
      v22 = v249;
      v20 = v270;
      v21 = v272;
      v23 = v252;
      if ((*(_BYTE *)(v212 + 24) & 1) == 0)
      {
LABEL_381:
        v227 = *(double *)(v212 + 16);
        goto LABEL_382;
      }
    }
    else
    {
      v218 = *(double *)v212;
      v22 = v249;
      if ((*(_BYTE *)(v212 + 24) & 1) == 0)
        goto LABEL_381;
    }
    v219 = *(_BYTE *)(a6 + 17);
    if (v219)
      v220 = a9;
    else
      v220 = 0x7FF0000000000000;
    v221 = a11;
    if (*(_BYTE *)(a6 + 17))
      v221 = 0x7FF0000000000000;
    v222 = *(_QWORD *)(a6 + 88);
    if ((*(_BYTE *)(a6 + 96) & 1) != 0)
    {
      if ((v26 & 0x8000000000000000) != 0)
        goto LABEL_474;
      if (v26 >= *(_QWORD *)(v222 + 16))
        goto LABEL_475;
      v223 = v222 + 12 * v26;
    }
    else
    {
      if ((v26 & 0x8000000000000000) != 0)
        goto LABEL_473;
      if (v26 >= *(_QWORD *)(v222 + 16))
        goto LABEL_476;
      v223 = v222 + 8 * v26;
    }
    v225 = (_DWORD *)(v223 + 32);
    v226 = *(_DWORD *)(v223 + 36);
    LODWORD(v225) = *v225;
    v276[0] = *(_DWORD *)(a6 + 80);
    v276[1] = (_DWORD)v225;
    v276[2] = v226;
    v277 = v220;
    LOBYTE(v278) = v219 & a10;
    v279 = v221;
    v280 = (v219 ^ 1) & a12;
    LayoutProxy.lengthThatFits(_:in:)(&v277, v219);
    *(double *)(v212 + 16) = v227;
    *(_BYTE *)(v212 + 24) = 0;
    v21 = v272;
LABEL_382:
    v230 = v209 - v199;
    v231 = -v199;
    if (v209 - v199 != INFINITY)
      v231 = 0.0;
    v232 = v227 - v218;
    if (v232 == INFINITY)
      v233 = -v218;
    else
      v233 = 0.0;
    v234 = v231 < v233;
    if (v230 != v232)
      v234 = v230 < v232;
    if (v234)
    {
LABEL_17:
      v29 = v23 + 2;
      if (v23 + 2 < v22)
      {
        v30 = 1;
LABEL_23:
        v31 = v29;
        v265 = v30;
        while (1)
        {
          v29 = v31;
          v32 = *(_QWORD *)(v21 + 8 * v31);
          v33 = 120 * v32;
          if ((unsigned __int128)((uint64_t)v32 * (__int128)120) >> 64 != (uint64_t)(120 * v32) >> 63)
            goto LABEL_419;
          v34 = *(_QWORD *)(v21 + 8 * v20);
          if ((unsigned __int128)((uint64_t)v34 * (__int128)120) >> 64 != (uint64_t)(120 * v34) >> 63)
          {
LABEL_420:
            __break(1u);
LABEL_421:
            __break(1u);
LABEL_422:
            __break(1u);
LABEL_423:
            __break(1u);
LABEL_424:
            __break(1u);
LABEL_425:
            __break(1u);
LABEL_426:
            __break(1u);
LABEL_427:
            __break(1u);
LABEL_428:
            __break(1u);
LABEL_429:
            __break(1u);
LABEL_430:
            __break(1u);
LABEL_431:
            __break(1u);
LABEL_432:
            __break(1u);
LABEL_433:
            __break(1u);
LABEL_434:
            __break(1u);
LABEL_435:
            __break(1u);
LABEL_436:
            __break(1u);
LABEL_437:
            __break(1u);
            goto LABEL_438;
          }
          v35 = *(double *)(a2 + 120 * v32);
          v36 = *(double *)(a2 + 120 * v34);
          if (v36 < v35)
            goto LABEL_24;
          if (v35 < v36)
            goto LABEL_30;
          v37 = a4 + v33;
          if ((*(_BYTE *)(a4 + v33 + 8) & 1) != 0)
          {
            v38 = *(unsigned __int8 *)(a6 + 17);
            if (*(_BYTE *)(a6 + 17))
              v39 = a9;
            else
              v39 = 0;
            if (*(_BYTE *)(a6 + 17))
              v40 = 0;
            else
              v40 = a11;
            v41 = *(_QWORD *)(a6 + 88);
            if ((*(_BYTE *)(a6 + 96) & 1) != 0)
            {
              if ((v32 & 0x8000000000000000) != 0)
                goto LABEL_444;
              if (v32 >= *(_QWORD *)(v41 + 16))
                goto LABEL_446;
              v42 = v41 + 12 * v32;
            }
            else
            {
              if ((v32 & 0x8000000000000000) != 0)
                goto LABEL_445;
              if (v32 >= *(_QWORD *)(v41 + 16))
                goto LABEL_449;
              v42 = v41 + 8 * v32;
            }
            if (*(_DWORD *)(v42 + 32) == v258)
            {
              v49 = &static LayoutComputer.defaultValue;
              if (one-time initialization token for defaultValue != -1)
              {
                swift_once();
                v49 = &static LayoutComputer.defaultValue;
              }
            }
            else
            {
              v49 = (__int128 *)AGGraphGetInputValue();
            }
            v51 = *(_QWORD *)v49;
            v52 = one-time initialization token for lockAssertionsAreEnabled;
            swift_retain();
            if (v52 != -1)
              swift_once();
            if (lockAssertionsAreEnabled)
            {
              if (one-time initialization token for _lock != -1)
                swift_once();
              if (!_MovableLockIsOwner(static Update._lock))
                goto LABEL_480;
            }
            v277 = v39;
            LOBYTE(v278) = v38 & a10;
            v279 = v40;
            v280 = (v38 ^ 1) & a12;
            v43 = (*(double (**)(uint64_t *, uint64_t))(*(_QWORD *)v51 + 128))(&v277, v38);
            swift_release();
            *(double *)v37 = v43;
            *(_BYTE *)(v37 + 8) = 0;
            v19 = v250;
            v21 = v272;
            v23 = v252;
            v30 = v265;
            if ((*(_BYTE *)(v37 + 24) & 1) == 0)
            {
LABEL_74:
              v53 = *(double *)(v37 + 16);
              goto LABEL_83;
            }
          }
          else
          {
            v43 = *(double *)v37;
            if ((*(_BYTE *)(v37 + 24) & 1) == 0)
              goto LABEL_74;
          }
          v44 = *(unsigned __int8 *)(a6 + 17);
          if (*(_BYTE *)(a6 + 17))
            v45 = a9;
          else
            v45 = 0x7FF0000000000000;
          if (*(_BYTE *)(a6 + 17))
            v46 = 0x7FF0000000000000;
          else
            v46 = a11;
          v47 = *(_QWORD *)(a6 + 88);
          if ((*(_BYTE *)(a6 + 96) & 1) != 0)
          {
            if ((v32 & 0x8000000000000000) != 0)
              goto LABEL_447;
            if (v32 >= *(_QWORD *)(v47 + 16))
              goto LABEL_451;
            v48 = v47 + 12 * v32;
          }
          else
          {
            if ((v32 & 0x8000000000000000) != 0)
              goto LABEL_448;
            if (v32 >= *(_QWORD *)(v47 + 16))
              goto LABEL_452;
            v48 = v47 + 8 * v32;
          }
          if (*(_DWORD *)(v48 + 32) == v258)
          {
            v50 = &static LayoutComputer.defaultValue;
            if (one-time initialization token for defaultValue != -1)
            {
              swift_once();
              v50 = &static LayoutComputer.defaultValue;
            }
          }
          else
          {
            v50 = (__int128 *)AGGraphGetInputValue();
          }
          v54 = *(_QWORD *)v50;
          v55 = one-time initialization token for lockAssertionsAreEnabled;
          swift_retain();
          if (v55 != -1)
            swift_once();
          if (lockAssertionsAreEnabled)
          {
            if (one-time initialization token for _lock != -1)
              swift_once();
            if (!_MovableLockIsOwner(static Update._lock))
              goto LABEL_480;
          }
          v277 = v45;
          LOBYTE(v278) = v44 & a10;
          v279 = v46;
          v280 = (v44 ^ 1) & a12;
          v53 = (*(double (**)(uint64_t *, uint64_t))(*(_QWORD *)v54 + 128))(&v277, v44);
          swift_release();
          *(double *)(v37 + 16) = v53;
          *(_BYTE *)(v37 + 24) = 0;
          v19 = v250;
          v21 = v272;
          v23 = v252;
          v30 = v265;
LABEL_83:
          v56 = a4 + 120 * v34;
          if ((*(_BYTE *)(v56 + 8) & 1) != 0)
          {
            v57 = *(unsigned __int8 *)(a6 + 17);
            if (*(_BYTE *)(a6 + 17))
              v58 = a9;
            else
              v58 = 0;
            if (*(_BYTE *)(a6 + 17))
              v59 = 0;
            else
              v59 = a11;
            v60 = *(_QWORD *)(a6 + 88);
            if ((*(_BYTE *)(a6 + 96) & 1) != 0)
            {
              if ((v34 & 0x8000000000000000) != 0)
                goto LABEL_450;
              if (v34 >= *(_QWORD *)(v60 + 16))
                goto LABEL_456;
              v61 = v60 + 12 * v34;
            }
            else
            {
              if ((v34 & 0x8000000000000000) != 0)
                goto LABEL_453;
              if (v34 >= *(_QWORD *)(v60 + 16))
                goto LABEL_455;
              v61 = v60 + 8 * v34;
            }
            if (*(_DWORD *)(v61 + 32) == v258)
            {
              v68 = &static LayoutComputer.defaultValue;
              if (one-time initialization token for defaultValue != -1)
              {
                swift_once();
                v68 = &static LayoutComputer.defaultValue;
              }
            }
            else
            {
              v68 = (__int128 *)AGGraphGetInputValue();
            }
            v70 = *(_QWORD *)v68;
            v71 = one-time initialization token for lockAssertionsAreEnabled;
            swift_retain();
            if (v71 != -1)
              swift_once();
            if (lockAssertionsAreEnabled)
            {
              if (one-time initialization token for _lock != -1)
                swift_once();
              if (!_MovableLockIsOwner(static Update._lock))
                goto LABEL_480;
            }
            v277 = v58;
            LOBYTE(v278) = v57 & a10;
            v279 = v59;
            v280 = (v57 ^ 1) & a12;
            v62 = (*(double (**)(uint64_t *, uint64_t))(*(_QWORD *)v70 + 128))(&v277, v57);
            swift_release();
            *(double *)v56 = v62;
            *(_BYTE *)(v56 + 8) = 0;
            v19 = v250;
            v21 = v272;
            v23 = v252;
            v30 = v265;
            if ((*(_BYTE *)(v56 + 24) & 1) == 0)
            {
LABEL_125:
              v72 = *(double *)(v56 + 16);
              v22 = v249;
              goto LABEL_134;
            }
          }
          else
          {
            v62 = *(double *)v56;
            if ((*(_BYTE *)(v56 + 24) & 1) == 0)
              goto LABEL_125;
          }
          v63 = *(unsigned __int8 *)(a6 + 17);
          if (*(_BYTE *)(a6 + 17))
            v64 = a9;
          else
            v64 = 0x7FF0000000000000;
          if (*(_BYTE *)(a6 + 17))
            v65 = 0x7FF0000000000000;
          else
            v65 = a11;
          v66 = *(_QWORD *)(a6 + 88);
          if ((*(_BYTE *)(a6 + 96) & 1) != 0)
          {
            if ((v34 & 0x8000000000000000) != 0)
              goto LABEL_454;
            if (v34 >= *(_QWORD *)(v66 + 16))
              goto LABEL_459;
            v67 = v66 + 12 * v34;
          }
          else
          {
            if ((v34 & 0x8000000000000000) != 0)
              goto LABEL_457;
            if (v34 >= *(_QWORD *)(v66 + 16))
              goto LABEL_458;
            v67 = v66 + 8 * v34;
          }
          if (*(_DWORD *)(v67 + 32) == v258)
          {
            v69 = &static LayoutComputer.defaultValue;
            if (one-time initialization token for defaultValue != -1)
            {
              swift_once();
              v69 = &static LayoutComputer.defaultValue;
            }
          }
          else
          {
            v69 = (__int128 *)AGGraphGetInputValue();
          }
          v73 = *(_QWORD *)v69;
          v74 = one-time initialization token for lockAssertionsAreEnabled;
          swift_retain();
          if (v74 != -1)
            swift_once();
          if (lockAssertionsAreEnabled)
          {
            if (one-time initialization token for _lock != -1)
              swift_once();
            if (!_MovableLockIsOwner(static Update._lock))
              goto LABEL_480;
          }
          v277 = v64;
          LOBYTE(v278) = v63 & a10;
          v279 = v65;
          v280 = (v63 ^ 1) & a12;
          v72 = (*(double (**)(uint64_t *, uint64_t))(*(_QWORD *)v73 + 128))(&v277, v63);
          swift_release();
          *(double *)(v56 + 16) = v72;
          *(_BYTE *)(v56 + 24) = 0;
          v22 = v249;
          v19 = v250;
          v21 = v272;
          v23 = v252;
          v30 = v265;
LABEL_134:
          v75 = v53 - v43;
          if (v53 - v43 == INFINITY)
            v76 = -v43;
          else
            v76 = 0.0;
          v77 = v72 - v62;
          if (v72 - v62 == INFINITY)
            v78 = -v62;
          else
            v78 = 0.0;
          v79 = v76 < v78;
          if (v75 != v77)
            v79 = v75 < v77;
          if (!v79)
          {
            v80 = v77 < v75;
            if (v75 == v77)
              v80 = v78 < v76;
            if (!v80)
            {
              if (((v30 ^ ((uint64_t)v32 >= (uint64_t)v34)) & 1) == 0)
                goto LABEL_160;
              goto LABEL_25;
            }
LABEL_30:
            if (v30)
              goto LABEL_161;
            goto LABEL_25;
          }
LABEL_24:
          if (!v30)
            goto LABEL_169;
LABEL_25:
          v31 = v29 + 1;
          v20 = v29;
          if (v29 + 1 >= v22)
          {
            ++v29;
            goto LABEL_160;
          }
        }
      }
      goto LABEL_162;
    }
    v235 = v232 < v230;
    if (v230 == v232)
      v235 = v233 < v231;
    if (v235)
    {
LABEL_21:
      v29 = v23 + 2;
      if (v23 + 2 < v22)
      {
        v30 = 0;
        goto LABEL_23;
      }
      goto LABEL_169;
    }
    v30 = (uint64_t)v24 < (uint64_t)v26;
    v29 = v23 + 2;
    if (v23 + 2 < v22)
      goto LABEL_23;
LABEL_160:
    v20 = v29;
    if (!v30)
      goto LABEL_170;
LABEL_161:
    if (v29 < v23)
      goto LABEL_441;
LABEL_162:
    if (v23 < v29)
    {
      v87 = v29 - 1;
      v88 = v23;
      do
      {
        if (v88 != v87)
        {
          if (!v21)
            goto LABEL_478;
          v89 = *(_QWORD *)(v21 + 8 * v88);
          *(_QWORD *)(v21 + 8 * v88) = *(_QWORD *)(v21 + 8 * v87);
          *(_QWORD *)(v21 + 8 * v87) = v89;
        }
        v144 = ++v88 < v87--;
      }
      while (v144);
    }
LABEL_169:
    v20 = v29;
LABEL_170:
    if (v20 >= v22)
      goto LABEL_252;
    if (__OFSUB__(v20, v23))
      goto LABEL_439;
    if (v20 - v23 >= v247)
      goto LABEL_252;
    if (__OFADD__(v23, v247))
      goto LABEL_442;
    if (v23 + v247 >= v22)
      v90 = v22;
    else
      v90 = v23 + v247;
    if (v90 < v23)
      goto LABEL_443;
    if (v20 == v90)
      goto LABEL_252;
    v91 = (int64_t *)(v244 + 8 * v20);
    v248 = v90;
    while (2)
    {
      v92 = *(_QWORD *)(v21 + 8 * v20);
      v93 = v252;
      v251 = v91;
      v271 = v20;
      do
      {
        v94 = 120 * v92;
        if ((unsigned __int128)((uint64_t)v92 * (__int128)120) >> 64 != (uint64_t)(120 * v92) >> 63)
        {
          __break(1u);
LABEL_410:
          __break(1u);
LABEL_411:
          __break(1u);
LABEL_412:
          __break(1u);
LABEL_413:
          __break(1u);
LABEL_414:
          __break(1u);
LABEL_415:
          __break(1u);
LABEL_416:
          __break(1u);
LABEL_417:
          __break(1u);
LABEL_418:
          __break(1u);
LABEL_419:
          __break(1u);
          goto LABEL_420;
        }
        v95 = *v91;
        v96 = 120 * *v91;
        if ((unsigned __int128)(*v91 * (__int128)120) >> 64 != v96 >> 63)
          goto LABEL_410;
        v97 = *(double *)(a2 + 120 * v92);
        v98 = *(double *)(a2 + v96);
        if (v98 >= v97)
        {
          if (v97 < v98)
            break;
          v99 = a4 + v94;
          if ((*(_BYTE *)(a4 + v94 + 8) & 1) != 0)
          {
            v100 = *(unsigned __int8 *)(a6 + 17);
            if (*(_BYTE *)(a6 + 17))
              v101 = a9;
            else
              v101 = 0;
            if (*(_BYTE *)(a6 + 17))
              v102 = 0;
            else
              v102 = a11;
            v103 = *(_QWORD *)(a6 + 88);
            if ((*(_BYTE *)(a6 + 96) & 1) != 0)
            {
              if ((v92 & 0x8000000000000000) != 0)
                goto LABEL_415;
              if (v92 >= *(_QWORD *)(v103 + 16))
                goto LABEL_417;
              v104 = v103 + 12 * v92;
            }
            else
            {
              if ((v92 & 0x8000000000000000) != 0)
                goto LABEL_416;
              if (v92 >= *(_QWORD *)(v103 + 16))
                goto LABEL_418;
              v104 = v103 + 8 * v92;
            }
            v267 = v101;
            if (*(_DWORD *)(v104 + 32) == v258)
            {
              v116 = &static LayoutComputer.defaultValue;
              if (one-time initialization token for defaultValue != -1)
              {
                swift_once();
                v116 = &static LayoutComputer.defaultValue;
              }
            }
            else
            {
              v116 = (__int128 *)AGGraphGetInputValue();
            }
            v117 = *(_QWORD *)v116;
            v118 = one-time initialization token for lockAssertionsAreEnabled;
            swift_retain();
            if (v118 != -1)
              swift_once();
            if (lockAssertionsAreEnabled)
            {
              if (one-time initialization token for _lock != -1)
                swift_once();
              if (!_MovableLockIsOwner(static Update._lock))
                goto LABEL_480;
            }
            v277 = v267;
            LOBYTE(v278) = v100 & a10;
            v279 = v102;
            v280 = (v100 ^ 1) & a12;
            v105 = (*(double (**)(uint64_t *, uint64_t))(*(_QWORD *)v117 + 128))(&v277, v100);
            swift_release();
            *(double *)v99 = v105;
            *(_BYTE *)(v99 + 8) = 0;
            if ((*(_BYTE *)(v99 + 24) & 1) == 0)
              goto LABEL_217;
          }
          else
          {
            v105 = *(double *)v99;
            if ((*(_BYTE *)(v99 + 24) & 1) == 0)
            {
LABEL_217:
              v115 = *(double *)(v99 + 16);
              goto LABEL_218;
            }
          }
          v106 = *(_BYTE *)(a6 + 17);
          v107 = a9;
          if (!v106)
            v107 = 0x7FF0000000000000;
          v266 = v107;
          v108 = v106 & a10;
          v109 = a11;
          if (*(_BYTE *)(a6 + 17))
            v109 = 0x7FF0000000000000;
          v262 = v109;
          v260 = a12 & ~v106;
          v110 = *(_QWORD *)(a6 + 88);
          v111 = *(_BYTE *)(a6 + 96);
          v112 = *(_BYTE *)(a6 + 97);
          LODWORD(v277) = *(_DWORD *)(a6 + 80);
          v278 = v110;
          LOBYTE(v279) = v111;
          BYTE1(v279) = v112;
          LayoutSubviews.subscript.getter(v92, (uint64_t)v276);
          v113 = *(_BYTE *)(a6 + 17);
          v277 = v266;
          LOBYTE(v278) = v108;
          v279 = v262;
          v280 = v260 & 1;
          LayoutProxy.lengthThatFits(_:in:)(&v277, v113);
          v115 = v114;
          *(double *)(v99 + 16) = v114;
          *(_BYTE *)(v99 + 24) = 0;
LABEL_218:
          v119 = a4 + v96;
          if ((*(_BYTE *)(a4 + v96 + 8) & 1) != 0)
          {
            v120 = *(_BYTE *)(a6 + 17);
            v121 = a9;
            if (!v120)
              v121 = 0;
            v268 = v121;
            v122 = v120 & a10;
            if (*(_BYTE *)(a6 + 17))
              v123 = 0;
            else
              v123 = a11;
            v263 = a12 & ~v120;
            v124 = *(_QWORD *)(a6 + 88);
            v125 = *(_BYTE *)(a6 + 96);
            v126 = *(_BYTE *)(a6 + 97);
            LODWORD(v277) = *(_DWORD *)(a6 + 80);
            v278 = v124;
            LOBYTE(v279) = v125;
            BYTE1(v279) = v126;
            LayoutSubviews.subscript.getter(v95, (uint64_t)v276);
            v127 = *(_BYTE *)(a6 + 17);
            v277 = v268;
            LOBYTE(v278) = v122;
            v279 = v123;
            v280 = v263 & 1;
            LayoutProxy.lengthThatFits(_:in:)(&v277, v127);
            v129 = v128;
            *(double *)v119 = v128;
            *(_BYTE *)(v119 + 8) = 0;
            if ((*(_BYTE *)(v119 + 24) & 1) == 0)
              goto LABEL_225;
          }
          else
          {
            v129 = *(double *)v119;
            if ((*(_BYTE *)(v119 + 24) & 1) == 0)
            {
LABEL_225:
              v130 = *(double *)(v119 + 16);
              v21 = v272;
              goto LABEL_233;
            }
          }
          v131 = *(_BYTE *)(a6 + 17);
          v132 = a9;
          if (!v131)
            v132 = 0x7FF0000000000000;
          v269 = v132;
          v264 = v131 & a10;
          if (*(_BYTE *)(a6 + 17))
            v133 = 0x7FF0000000000000;
          else
            v133 = a11;
          v261 = a12 & ~v131;
          v134 = *(_QWORD *)(a6 + 88);
          v135 = *(_BYTE *)(a6 + 96);
          v136 = *(_BYTE *)(a6 + 97);
          LODWORD(v277) = *(_DWORD *)(a6 + 80);
          v278 = v134;
          LOBYTE(v279) = v135;
          BYTE1(v279) = v136;
          LayoutSubviews.subscript.getter(v95, (uint64_t)v276);
          v137 = *(_BYTE *)(a6 + 17);
          v277 = v269;
          LOBYTE(v278) = v264;
          v279 = v133;
          v280 = v261 & 1;
          LayoutProxy.lengthThatFits(_:in:)(&v277, v137);
          *(double *)(v119 + 16) = v130;
          *(_BYTE *)(v119 + 24) = 0;
          v21 = v272;
LABEL_233:
          v138 = v115 - v105;
          v139 = -v105;
          if (v115 - v105 != INFINITY)
            v139 = 0.0;
          v140 = v130 - v129;
          if (v140 == INFINITY)
            v141 = -v129;
          else
            v141 = 0.0;
          v142 = v139 < v141;
          if (v138 != v140)
            v142 = v138 < v140;
          v20 = v271;
          if (!v142)
          {
            v143 = v140 >= v138;
            if (v138 == v140)
              v143 = v141 >= v139;
            v144 = v143 && (uint64_t)v92 < v95;
            if (!v144)
              break;
          }
        }
        if (!v21)
          goto LABEL_460;
        v145 = *v91;
        v92 = v91[1];
        *v91 = v92;
        v91[1] = v145;
        --v91;
        ++v93;
      }
      while (v20 != v93);
      ++v20;
      v91 = v251 + 1;
      if (v20 != v248)
        continue;
      break;
    }
    v20 = v248;
    v19 = v250;
    v23 = v252;
LABEL_252:
    if (v20 < v23)
      goto LABEL_436;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v19 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v19 + 2) + 1, 1, v19);
    v147 = *((_QWORD *)v19 + 2);
    v146 = *((_QWORD *)v19 + 3);
    v148 = v147 + 1;
    v21 = v272;
    if (v147 >= v146 >> 1)
    {
      v236 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v146 > 1), v147 + 1, 1, v19);
      v21 = v272;
      v19 = v236;
    }
    *((_QWORD *)v19 + 2) = v148;
    v149 = v19 + 32;
    v150 = &v19[16 * v147 + 32];
    *(_QWORD *)v150 = v23;
    *((_QWORD *)v150 + 1) = v20;
    if (v147)
    {
      while (2)
      {
        v151 = v148 - 1;
        if (v148 >= 4)
        {
          v156 = &v149[16 * v148];
          v157 = *((_QWORD *)v156 - 8);
          v158 = *((_QWORD *)v156 - 7);
          v162 = __OFSUB__(v158, v157);
          v159 = v158 - v157;
          if (v162)
            goto LABEL_421;
          v161 = *((_QWORD *)v156 - 6);
          v160 = *((_QWORD *)v156 - 5);
          v162 = __OFSUB__(v160, v161);
          v154 = v160 - v161;
          v155 = v162;
          if (v162)
            goto LABEL_422;
          v163 = v148 - 2;
          v164 = &v149[16 * v148 - 32];
          v166 = *(_QWORD *)v164;
          v165 = *((_QWORD *)v164 + 1);
          v162 = __OFSUB__(v165, v166);
          v167 = v165 - v166;
          if (v162)
            goto LABEL_424;
          v162 = __OFADD__(v154, v167);
          v168 = v154 + v167;
          if (v162)
            goto LABEL_427;
          if (v168 >= v159)
          {
            v186 = &v149[16 * v151];
            v188 = *(_QWORD *)v186;
            v187 = *((_QWORD *)v186 + 1);
            v162 = __OFSUB__(v187, v188);
            v189 = v187 - v188;
            if (v162)
              goto LABEL_431;
            v179 = v154 < v189;
          }
          else
          {
LABEL_271:
            if ((v155 & 1) != 0)
              goto LABEL_423;
            v163 = v148 - 2;
            v169 = &v149[16 * v148 - 32];
            v171 = *(_QWORD *)v169;
            v170 = *((_QWORD *)v169 + 1);
            v172 = __OFSUB__(v170, v171);
            v173 = v170 - v171;
            v174 = v172;
            if (v172)
              goto LABEL_426;
            v175 = &v149[16 * v151];
            v177 = *(_QWORD *)v175;
            v176 = *((_QWORD *)v175 + 1);
            v162 = __OFSUB__(v176, v177);
            v178 = v176 - v177;
            if (v162)
              goto LABEL_429;
            if (__OFADD__(v173, v178))
              goto LABEL_430;
            if (v173 + v178 < v154)
              goto LABEL_283;
            v179 = v154 < v178;
          }
          if (v179)
            v151 = v163;
        }
        else
        {
          if (v148 == 3)
          {
            v153 = *((_QWORD *)v19 + 4);
            v152 = *((_QWORD *)v19 + 5);
            v162 = __OFSUB__(v152, v153);
            v154 = v152 - v153;
            v155 = v162;
            goto LABEL_271;
          }
          v180 = *((_QWORD *)v19 + 4);
          v181 = *((_QWORD *)v19 + 5);
          v162 = __OFSUB__(v181, v180);
          v173 = v181 - v180;
          v174 = v162;
LABEL_283:
          if ((v174 & 1) != 0)
            goto LABEL_425;
          v182 = &v149[16 * v151];
          v184 = *(_QWORD *)v182;
          v183 = *((_QWORD *)v182 + 1);
          v162 = __OFSUB__(v183, v184);
          v185 = v183 - v184;
          if (v162)
            goto LABEL_428;
          if (v185 < v173)
            goto LABEL_300;
        }
        v190 = v20;
        v191 = v151 - 1;
        if (v151 - 1 >= v148)
          goto LABEL_411;
        if (!v21)
          goto LABEL_477;
        v192 = &v149[16 * v191];
        v193 = *(_QWORD *)v192;
        v194 = &v149[16 * v151];
        v195 = *((_QWORD *)v194 + 1);
        v196 = (char *)(v21 + 8 * *(_QWORD *)v192);
        v197 = (uint64_t *)(v21 + 8 * *(_QWORD *)v194);
        LOBYTE(v277) = a10 & 1;
        LOBYTE(v276[0]) = a12 & 1;
        specialized _merge<A>(low:mid:high:buffer:by:)(v196, v197, v21 + 8 * v195, v253, a2, a3, a4, a5, a6, a7, a8, a9, a10 & 1, a11, a12 & 1);
        if (v259)
          goto LABEL_408;
        if (v195 < v193)
          goto LABEL_412;
        if (v151 > *((_QWORD *)v19 + 2))
          goto LABEL_413;
        *(_QWORD *)v192 = v193;
        *(_QWORD *)&v149[16 * v191 + 8] = v195;
        v198 = *((_QWORD *)v19 + 2);
        if (v151 >= v198)
          goto LABEL_414;
        v148 = v198 - 1;
        memmove(&v149[16 * v151], v194 + 16, 16 * (v198 - 1 - v151));
        *((_QWORD *)v19 + 2) = v198 - 1;
        v144 = v198 > 2;
        v21 = v272;
        v20 = v190;
        if (!v144)
          goto LABEL_300;
        continue;
      }
    }
    v148 = 1;
LABEL_300:
    v22 = v249;
  }
  while (v20 < v249);
LABEL_397:
  if (v148 >= 2)
  {
    v237 = *v245;
    do
    {
      v238 = v148 - 2;
      if (v148 < 2)
        goto LABEL_432;
      if (!v237)
        goto LABEL_479;
      v239 = *(_QWORD *)&v19[16 * v238 + 32];
      v240 = *(_QWORD *)&v19[16 * v148 + 24];
      v241 = (uint64_t *)(v237 + 8 * *(_QWORD *)&v19[16 * v148 + 16]);
      LOBYTE(v277) = a10 & 1;
      LOBYTE(v276[0]) = a12 & 1;
      specialized _merge<A>(low:mid:high:buffer:by:)((char *)(v237 + 8 * v239), v241, v237 + 8 * v240, v253, a2, a3, a4, a5, a6, a7, a8, a9, a10 & 1, a11, a12 & 1);
      if (v259)
        break;
      if (v240 < v239)
        goto LABEL_433;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v19 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v19);
      if (v238 >= *((_QWORD *)v19 + 2))
        goto LABEL_434;
      v242 = &v19[16 * v238 + 32];
      *(_QWORD *)v242 = v239;
      *((_QWORD *)v242 + 1) = v240;
      v243 = *((_QWORD *)v19 + 2);
      if (v148 > v243)
        goto LABEL_435;
      memmove(&v19[16 * v148 + 16], &v19[16 * v148 + 32], 16 * (v243 - v148));
      *((_QWORD *)v19 + 2) = v243 - 1;
      v148 = v243 - 1;
    }
    while (v243 > 2);
  }
LABEL_408:
  swift_bridgeObjectRelease();
  *(_QWORD *)(v246 + 16) = 0;
  return swift_bridgeObjectRelease();
}

uint64_t specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, char a15)
{
  uint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  double v21;
  double v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  double v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  __int128 *InputValue;
  __int128 *v36;
  uint64_t v37;
  uint64_t v38;
  double v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  double v48;
  __int128 *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  double v57;
  __int128 *v58;
  uint64_t v59;
  uint64_t v60;
  double v61;
  double v62;
  double v63;
  double v64;
  BOOL v65;
  _BOOL4 v66;
  uint64_t v68;
  uint64_t v70;
  uint64_t *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  int v79;
  uint64_t v82;
  uint64_t v83;
  char v84;
  uint64_t v85;
  char v86;

  v70 = result;
  if (a3 == a2)
    return result;
  v82 = *a4;
  v15 = (uint64_t *)(*a4 + 8 * a3 - 8);
  v79 = *MEMORY[0x24BE096C0];
LABEL_5:
  v16 = *(_QWORD *)(v82 + 8 * a3);
  v17 = v70;
  v71 = v15;
  v78 = a3;
  while (1)
  {
    v18 = 120 * v16;
    if ((unsigned __int128)((uint64_t)v16 * (__int128)120) >> 64 != (uint64_t)(120 * v16) >> 63)
      break;
    v19 = *v15;
    v20 = 120 * *v15;
    if ((unsigned __int128)(*v15 * (__int128)120) >> 64 != v20 >> 63)
      goto LABEL_133;
    v21 = *(double *)(a5 + 120 * v16);
    v22 = *(double *)(a5 + v20);
    if (v22 < v21)
      goto LABEL_129;
    if (v21 < v22)
      goto LABEL_4;
    v23 = a7 + v18;
    if ((*(_BYTE *)(a7 + v18 + 8) & 1) != 0)
    {
      v24 = *(unsigned __int8 *)(a9 + 17);
      if (*(_BYTE *)(a9 + 17))
        v25 = a12;
      else
        v25 = 0;
      if (*(_BYTE *)(a9 + 17))
        v26 = 0;
      else
        v26 = a14;
      v27 = *(_QWORD *)(a9 + 88);
      if ((*(_BYTE *)(a9 + 96) & 1) != 0)
      {
        if ((v16 & 0x8000000000000000) != 0)
          goto LABEL_135;
        if (v16 >= *(_QWORD *)(v27 + 16))
          goto LABEL_136;
        v28 = v27 + 12 * v16;
      }
      else
      {
        if ((v16 & 0x8000000000000000) != 0)
          goto LABEL_134;
        if (v16 >= *(_QWORD *)(v27 + 16))
          goto LABEL_138;
        v28 = v27 + 8 * v16;
      }
      v72 = v25;
      v75 = v26;
      if (*(_DWORD *)(v28 + 32) == v79)
      {
        InputValue = &static LayoutComputer.defaultValue;
        if (one-time initialization token for defaultValue != -1)
        {
          swift_once();
          InputValue = &static LayoutComputer.defaultValue;
        }
      }
      else
      {
        InputValue = (__int128 *)AGGraphGetInputValue();
      }
      v37 = *(_QWORD *)InputValue;
      v38 = one-time initialization token for lockAssertionsAreEnabled;
      swift_retain();
      if (v38 != -1)
        swift_once();
      if (lockAssertionsAreEnabled)
      {
        if (one-time initialization token for _lock != -1)
          swift_once();
        if (!_MovableLockIsOwner(static Update._lock))
          goto LABEL_151;
      }
      v83 = v72;
      v84 = v24 & a13;
      v85 = v75;
      v86 = (v24 ^ 1) & a15;
      v29 = (*(double (**)(uint64_t *, uint64_t))(*(_QWORD *)v37 + 128))(&v83, v24);
      result = swift_release();
      *(double *)v23 = v29;
      *(_BYTE *)(v23 + 8) = 0;
      if ((*(_BYTE *)(v23 + 24) & 1) == 0)
      {
LABEL_52:
        v39 = *(double *)(v23 + 16);
        goto LABEL_61;
      }
    }
    else
    {
      v29 = *(double *)v23;
      if ((*(_BYTE *)(v23 + 24) & 1) == 0)
        goto LABEL_52;
    }
    v30 = *(unsigned __int8 *)(a9 + 17);
    if (*(_BYTE *)(a9 + 17))
      v31 = a12;
    else
      v31 = 0x7FF0000000000000;
    if (*(_BYTE *)(a9 + 17))
      v32 = 0x7FF0000000000000;
    else
      v32 = a14;
    v33 = *(_QWORD *)(a9 + 88);
    v74 = v31;
    if ((*(_BYTE *)(a9 + 96) & 1) != 0)
    {
      if ((v16 & 0x8000000000000000) != 0)
        goto LABEL_137;
      if (v16 >= *(_QWORD *)(v33 + 16))
        goto LABEL_142;
      v34 = v33 + 12 * v16;
    }
    else
    {
      if ((v16 & 0x8000000000000000) != 0)
        goto LABEL_139;
      if (v16 >= *(_QWORD *)(v33 + 16))
        goto LABEL_143;
      v34 = v33 + 8 * v16;
    }
    v73 = v32;
    if (*(_DWORD *)(v34 + 32) == v79)
    {
      v36 = &static LayoutComputer.defaultValue;
      if (one-time initialization token for defaultValue != -1)
      {
        swift_once();
        v36 = &static LayoutComputer.defaultValue;
      }
    }
    else
    {
      v36 = (__int128 *)AGGraphGetInputValue();
    }
    v40 = *(_QWORD *)v36;
    v41 = one-time initialization token for lockAssertionsAreEnabled;
    swift_retain();
    if (v41 != -1)
      swift_once();
    if (lockAssertionsAreEnabled)
    {
      if (one-time initialization token for _lock != -1)
        swift_once();
      if (!_MovableLockIsOwner(static Update._lock))
        goto LABEL_151;
    }
    v83 = v74;
    v84 = v30 & a13;
    v85 = v73;
    v86 = (v30 ^ 1) & a15;
    v39 = (*(double (**)(uint64_t *, uint64_t))(*(_QWORD *)v40 + 128))(&v83, v30);
    result = swift_release();
    *(double *)(v23 + 16) = v39;
    *(_BYTE *)(v23 + 24) = 0;
LABEL_61:
    v42 = a7 + v20;
    if ((*(_BYTE *)(v42 + 8) & 1) != 0)
    {
      v43 = *(unsigned __int8 *)(a9 + 17);
      if (*(_BYTE *)(a9 + 17))
        v44 = a12;
      else
        v44 = 0;
      if (*(_BYTE *)(a9 + 17))
        v45 = 0;
      else
        v45 = a14;
      v46 = *(_QWORD *)(a9 + 88);
      if ((*(_BYTE *)(a9 + 96) & 1) != 0)
      {
        if ((v19 & 0x8000000000000000) != 0)
          goto LABEL_140;
        if (v19 >= *(_QWORD *)(v46 + 16))
          goto LABEL_144;
        v47 = v46 + 12 * v19;
      }
      else
      {
        if ((v19 & 0x8000000000000000) != 0)
          goto LABEL_141;
        if (v19 >= *(_QWORD *)(v46 + 16))
          goto LABEL_145;
        v47 = v46 + 8 * v19;
      }
      v76 = v44;
      if (*(_DWORD *)(v47 + 32) == v79)
      {
        v49 = &static LayoutComputer.defaultValue;
        if (one-time initialization token for defaultValue != -1)
        {
          swift_once();
          v49 = &static LayoutComputer.defaultValue;
        }
      }
      else
      {
        v49 = (__int128 *)AGGraphGetInputValue();
      }
      v50 = *(_QWORD *)v49;
      v51 = one-time initialization token for lockAssertionsAreEnabled;
      swift_retain();
      if (v51 != -1)
        swift_once();
      if (lockAssertionsAreEnabled)
      {
        if (one-time initialization token for _lock != -1)
          swift_once();
        if (!_MovableLockIsOwner(static Update._lock))
          goto LABEL_151;
      }
      v83 = v76;
      v84 = v43 & a13;
      v85 = v45;
      v86 = (v43 ^ 1) & a15;
      v48 = (*(double (**)(uint64_t *, uint64_t))(*(_QWORD *)v50 + 128))(&v83, v43);
      result = swift_release();
      *(double *)v42 = v48;
      *(_BYTE *)(v42 + 8) = 0;
    }
    else
    {
      v48 = *(double *)v42;
    }
    a3 = v78;
    if ((*(_BYTE *)(v42 + 24) & 1) != 0)
    {
      v52 = *(unsigned __int8 *)(a9 + 17);
      if (*(_BYTE *)(a9 + 17))
        v53 = a12;
      else
        v53 = 0x7FF0000000000000;
      if (*(_BYTE *)(a9 + 17))
        v54 = 0x7FF0000000000000;
      else
        v54 = a14;
      v55 = *(_QWORD *)(a9 + 88);
      if ((*(_BYTE *)(a9 + 96) & 1) != 0)
      {
        if ((v19 & 0x8000000000000000) != 0)
          goto LABEL_146;
        if (v19 >= *(_QWORD *)(v55 + 16))
          goto LABEL_148;
        v56 = v55 + 12 * v19;
      }
      else
      {
        if ((v19 & 0x8000000000000000) != 0)
          goto LABEL_147;
        if (v19 >= *(_QWORD *)(v55 + 16))
          goto LABEL_149;
        v56 = v55 + 8 * v19;
      }
      v77 = v53;
      if (*(_DWORD *)(v56 + 32) == v79)
      {
        v58 = &static LayoutComputer.defaultValue;
        if (one-time initialization token for defaultValue != -1)
        {
          swift_once();
          v58 = &static LayoutComputer.defaultValue;
        }
      }
      else
      {
        v58 = (__int128 *)AGGraphGetInputValue();
      }
      v59 = *(_QWORD *)v58;
      v60 = one-time initialization token for lockAssertionsAreEnabled;
      swift_retain();
      if (v60 != -1)
        swift_once();
      if (lockAssertionsAreEnabled)
      {
        if (one-time initialization token for _lock != -1)
          swift_once();
        if (!_MovableLockIsOwner(static Update._lock))
          goto LABEL_151;
      }
      v83 = v77;
      v84 = v52 & a13;
      v85 = v54;
      v86 = (v52 ^ 1) & a15;
      v57 = (*(double (**)(uint64_t *, uint64_t))(*(_QWORD *)v59 + 128))(&v83, v52);
      result = swift_release();
      *(double *)(v42 + 16) = v57;
      *(_BYTE *)(v42 + 24) = 0;
      a3 = v78;
    }
    else
    {
      v57 = *(double *)(v42 + 16);
    }
    v61 = v39 - v29;
    if (v39 - v29 == INFINITY)
      v62 = -v29;
    else
      v62 = 0.0;
    v63 = v57 - v48;
    if (v57 - v48 == INFINITY)
      v64 = -v48;
    else
      v64 = 0.0;
    v65 = v62 < v64;
    if (v61 != v63)
      v65 = v61 < v63;
    if (!v65)
    {
      v66 = v63 >= v61;
      if (v61 == v63)
        v66 = v64 >= v62;
      if (!v66 || (uint64_t)v16 >= (uint64_t)v19)
      {
LABEL_4:
        ++a3;
        v15 = v71 + 1;
        if (a3 == a2)
          return result;
        goto LABEL_5;
      }
    }
LABEL_129:
    if (!v82)
      goto LABEL_150;
    v68 = *v15;
    v16 = v15[1];
    *v15 = v16;
    v15[1] = v68;
    --v15;
    if (a3 == ++v17)
      goto LABEL_4;
  }
  __break(1u);
LABEL_133:
  __break(1u);
LABEL_134:
  __break(1u);
LABEL_135:
  __break(1u);
LABEL_136:
  __break(1u);
LABEL_137:
  __break(1u);
LABEL_138:
  __break(1u);
LABEL_139:
  __break(1u);
LABEL_140:
  __break(1u);
LABEL_141:
  __break(1u);
LABEL_142:
  __break(1u);
LABEL_143:
  __break(1u);
LABEL_144:
  __break(1u);
LABEL_145:
  __break(1u);
LABEL_146:
  __break(1u);
LABEL_147:
  __break(1u);
LABEL_148:
  __break(1u);
LABEL_149:
  __break(1u);
LABEL_150:
  __break(1u);
LABEL_151:
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized _merge<A>(low:mid:high:buffer:by:)(char *a1, uint64_t *__src, unint64_t a3, char *__dst, uint64_t a5, int a6, uint64_t a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, char a15)
{
  unint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  double v28;
  double v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  double v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  __int128 *InputValue;
  __int128 *v44;
  uint64_t v45;
  uint64_t v46;
  double v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  double v56;
  __int128 *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  double v65;
  __int128 *v66;
  uint64_t v67;
  uint64_t v68;
  double v69;
  double v70;
  double v71;
  double v72;
  BOOL v73;
  _BOOL4 v74;
  char *v76;
  _QWORD *v77;
  char *v78;
  unint64_t v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t *v82;
  uint64_t *v83;
  double v84;
  double v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  double v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  __int128 *v98;
  __int128 *v99;
  uint64_t v100;
  uint64_t v101;
  double v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  double v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  __int128 *v117;
  __int128 *v118;
  uint64_t v119;
  uint64_t v120;
  double v121;
  uint64_t v122;
  uint64_t v123;
  double v124;
  double v125;
  double v126;
  double v127;
  BOOL v128;
  _BOOL4 v129;
  uint64_t result;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  unint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  int v143;
  char *v144;
  int v145;
  char *v146;
  uint64_t v148;
  char *v149;
  char *v150;
  char *__srca;
  char *__srcb;
  uint64_t v153;
  char v154;
  uint64_t v155;
  char v156;
  char *v157;
  char *v158;
  uint64_t *v159;

  v15 = a3;
  v16 = __src;
  v17 = (char *)__src - a1;
  v18 = (char *)__src - a1 + 7;
  if ((char *)__src - a1 >= 0)
    v18 = (char *)__src - a1;
  v19 = v18 >> 3;
  v20 = a3 - (_QWORD)__src;
  v21 = a3 - (_QWORD)__src + 7;
  if ((uint64_t)(a3 - (_QWORD)__src) >= 0)
    v21 = a3 - (_QWORD)__src;
  v22 = v21 >> 3;
  v158 = __dst;
  v159 = (uint64_t *)a1;
  v148 = a5;
  v149 = __dst;
  __srca = a1;
  if (v19 < v21 >> 3)
  {
    if (v17 < -7)
      goto LABEL_324;
    if (__dst != a1 || &a1[8 * v19] <= __dst)
    {
      memmove(__dst, a1, 8 * v19);
      __dst = v149;
      a1 = __srca;
      a5 = v148;
    }
    v23 = &__dst[8 * v19];
    v157 = v23;
    if (v17 >= 8 && (unint64_t)v16 < v15)
    {
      v145 = *MEMORY[0x24BE096C0];
      v144 = &__dst[8 * v19];
      v138 = v15;
      while (1)
      {
        v24 = *v16;
        v25 = 120 * *v16;
        if ((unsigned __int128)(*v16 * (__int128)120) >> 64 != v25 >> 63)
          goto LABEL_289;
        v26 = *(_QWORD *)__dst;
        v27 = 120 * *(_QWORD *)__dst;
        if ((unsigned __int128)(*(uint64_t *)__dst * (__int128)120) >> 64 != v27 >> 63)
          goto LABEL_290;
        v28 = *(double *)(a5 + v25);
        v29 = *(double *)(a5 + v27);
        if (v29 < v28)
          goto LABEL_16;
        if (v28 < v29)
          goto LABEL_21;
        v31 = a7 + v25;
        v150 = __dst;
        __srcb = a1;
        if ((*(_BYTE *)(a7 + v25 + 8) & 1) != 0)
        {
          v32 = *(unsigned __int8 *)(a9 + 17);
          if (*(_BYTE *)(a9 + 17))
            v33 = a12;
          else
            v33 = 0;
          if (*(_BYTE *)(a9 + 17))
            v34 = 0;
          else
            v34 = a14;
          v35 = *(_QWORD *)(a9 + 88);
          if ((*(_BYTE *)(a9 + 96) & 1) != 0)
          {
            if ((v24 & 0x8000000000000000) != 0)
              goto LABEL_307;
            if (v24 >= *(_QWORD *)(v35 + 16))
              goto LABEL_309;
            v36 = v35 + 12 * v24;
          }
          else
          {
            if ((v24 & 0x8000000000000000) != 0)
              goto LABEL_308;
            if (v24 >= *(_QWORD *)(v35 + 16))
              goto LABEL_311;
            v36 = v35 + 8 * v24;
          }
          v142 = v33;
          if (*(_DWORD *)(v36 + 32) == v145)
          {
            InputValue = &static LayoutComputer.defaultValue;
            if (one-time initialization token for defaultValue != -1)
            {
              swift_once();
              InputValue = &static LayoutComputer.defaultValue;
            }
          }
          else
          {
            InputValue = (__int128 *)AGGraphGetInputValue();
          }
          v45 = *(_QWORD *)InputValue;
          v46 = one-time initialization token for lockAssertionsAreEnabled;
          swift_retain();
          if (v46 != -1)
            swift_once();
          if (lockAssertionsAreEnabled)
          {
            if (one-time initialization token for _lock != -1)
              swift_once();
            if (!_MovableLockIsOwner(static Update._lock))
              goto LABEL_323;
          }
          v153 = v142;
          v154 = v32 & a13;
          v155 = v34;
          v156 = (v32 ^ 1) & a15;
          v37 = (*(double (**)(uint64_t *, uint64_t))(*(_QWORD *)v45 + 128))(&v153, v32);
          swift_release();
          *(double *)v31 = v37;
          *(_BYTE *)(v31 + 8) = 0;
          a5 = v148;
          __dst = v150;
          a1 = __srcb;
          if ((*(_BYTE *)(v31 + 24) & 1) == 0)
          {
LABEL_69:
            v47 = *(double *)(v31 + 16);
            goto LABEL_78;
          }
        }
        else
        {
          v37 = *(double *)v31;
          if ((*(_BYTE *)(v31 + 24) & 1) == 0)
            goto LABEL_69;
        }
        v38 = *(unsigned __int8 *)(a9 + 17);
        if (*(_BYTE *)(a9 + 17))
          v39 = a12;
        else
          v39 = 0x7FF0000000000000;
        if (*(_BYTE *)(a9 + 17))
          v40 = 0x7FF0000000000000;
        else
          v40 = a14;
        v41 = *(_QWORD *)(a9 + 88);
        if ((*(_BYTE *)(a9 + 96) & 1) != 0)
        {
          if ((v24 & 0x8000000000000000) != 0)
            goto LABEL_310;
          if (v24 >= *(_QWORD *)(v41 + 16))
            goto LABEL_315;
          v42 = v41 + 12 * v24;
        }
        else
        {
          if ((v24 & 0x8000000000000000) != 0)
            goto LABEL_312;
          if (v24 >= *(_QWORD *)(v41 + 16))
            goto LABEL_313;
          v42 = v41 + 8 * v24;
        }
        if (*(_DWORD *)(v42 + 32) == v145)
        {
          v44 = &static LayoutComputer.defaultValue;
          if (one-time initialization token for defaultValue != -1)
          {
            swift_once();
            v44 = &static LayoutComputer.defaultValue;
          }
        }
        else
        {
          v44 = (__int128 *)AGGraphGetInputValue();
        }
        v48 = *(_QWORD *)v44;
        v49 = one-time initialization token for lockAssertionsAreEnabled;
        swift_retain();
        if (v49 != -1)
          swift_once();
        if (lockAssertionsAreEnabled)
        {
          if (one-time initialization token for _lock != -1)
            swift_once();
          if (!_MovableLockIsOwner(static Update._lock))
            goto LABEL_323;
        }
        v153 = v39;
        v154 = v38 & a13;
        v155 = v40;
        v156 = (v38 ^ 1) & a15;
        v47 = (*(double (**)(uint64_t *, uint64_t))(*(_QWORD *)v48 + 128))(&v153, v38);
        swift_release();
        *(double *)(v31 + 16) = v47;
        *(_BYTE *)(v31 + 24) = 0;
        a5 = v148;
        __dst = v150;
        a1 = __srcb;
        v15 = v138;
LABEL_78:
        v50 = a7 + v27;
        if ((*(_BYTE *)(v50 + 8) & 1) != 0)
        {
          v51 = *(unsigned __int8 *)(a9 + 17);
          if (*(_BYTE *)(a9 + 17))
            v52 = a12;
          else
            v52 = 0;
          if (*(_BYTE *)(a9 + 17))
            v53 = 0;
          else
            v53 = a14;
          v54 = *(_QWORD *)(a9 + 88);
          if ((*(_BYTE *)(a9 + 96) & 1) != 0)
          {
            if ((v26 & 0x8000000000000000) != 0)
              goto LABEL_316;
            if (v26 >= *(_QWORD *)(v54 + 16))
              goto LABEL_319;
            v55 = v54 + 12 * v26;
          }
          else
          {
            if ((v26 & 0x8000000000000000) != 0)
              goto LABEL_314;
            if (v26 >= *(_QWORD *)(v54 + 16))
              goto LABEL_318;
            v55 = v54 + 8 * v26;
          }
          if (*(_DWORD *)(v55 + 32) == v145)
          {
            v57 = &static LayoutComputer.defaultValue;
            if (one-time initialization token for defaultValue != -1)
            {
              swift_once();
              v57 = &static LayoutComputer.defaultValue;
            }
          }
          else
          {
            v57 = (__int128 *)AGGraphGetInputValue();
          }
          v58 = *(_QWORD *)v57;
          v59 = one-time initialization token for lockAssertionsAreEnabled;
          swift_retain();
          if (v59 != -1)
            swift_once();
          if (lockAssertionsAreEnabled)
          {
            if (one-time initialization token for _lock != -1)
              swift_once();
            if (!_MovableLockIsOwner(static Update._lock))
              goto LABEL_323;
          }
          v153 = v52;
          v154 = v51 & a13;
          v155 = v53;
          v156 = (v51 ^ 1) & a15;
          v56 = (*(double (**)(uint64_t *, uint64_t))(*(_QWORD *)v58 + 128))(&v153, v51);
          swift_release();
          *(double *)v50 = v56;
          *(_BYTE *)(v50 + 8) = 0;
          a5 = v148;
          __dst = v150;
          a1 = __srcb;
        }
        else
        {
          v56 = *(double *)v50;
        }
        v23 = v144;
        if ((*(_BYTE *)(v50 + 24) & 1) != 0)
        {
          v60 = *(unsigned __int8 *)(a9 + 17);
          if (*(_BYTE *)(a9 + 17))
            v61 = a12;
          else
            v61 = 0x7FF0000000000000;
          if (*(_BYTE *)(a9 + 17))
            v62 = 0x7FF0000000000000;
          else
            v62 = a14;
          v63 = *(_QWORD *)(a9 + 88);
          if ((*(_BYTE *)(a9 + 96) & 1) != 0)
          {
            if ((v26 & 0x8000000000000000) != 0)
              goto LABEL_317;
            if (v26 >= *(_QWORD *)(v63 + 16))
              goto LABEL_322;
            v64 = v63 + 12 * v26;
          }
          else
          {
            if ((v26 & 0x8000000000000000) != 0)
              goto LABEL_320;
            if (v26 >= *(_QWORD *)(v63 + 16))
              goto LABEL_321;
            v64 = v63 + 8 * v26;
          }
          if (*(_DWORD *)(v64 + 32) == v145)
          {
            v66 = &static LayoutComputer.defaultValue;
            if (one-time initialization token for defaultValue != -1)
            {
              swift_once();
              v66 = &static LayoutComputer.defaultValue;
            }
          }
          else
          {
            v66 = (__int128 *)AGGraphGetInputValue();
          }
          v67 = *(_QWORD *)v66;
          v68 = one-time initialization token for lockAssertionsAreEnabled;
          swift_retain();
          if (v68 != -1)
            swift_once();
          if (lockAssertionsAreEnabled)
          {
            if (one-time initialization token for _lock != -1)
              swift_once();
            if (!_MovableLockIsOwner(static Update._lock))
              goto LABEL_323;
          }
          v153 = v61;
          v154 = v60 & a13;
          v155 = v62;
          v156 = (v60 ^ 1) & a15;
          v65 = (*(double (**)(uint64_t *, uint64_t))(*(_QWORD *)v67 + 128))(&v153, v60);
          swift_release();
          *(double *)(v50 + 16) = v65;
          *(_BYTE *)(v50 + 24) = 0;
          a5 = v148;
          __dst = v150;
          a1 = __srcb;
          v23 = v144;
        }
        else
        {
          v65 = *(double *)(v50 + 16);
        }
        v69 = v47 - v37;
        if (v47 - v37 == INFINITY)
          v70 = -v37;
        else
          v70 = 0.0;
        v71 = v65 - v56;
        if (v65 - v56 == INFINITY)
          v72 = -v56;
        else
          v72 = 0.0;
        v73 = v70 < v72;
        if (v69 != v71)
          v73 = v69 < v71;
        if (!v73)
        {
          v74 = v71 >= v69;
          if (v69 == v71)
            v74 = v72 >= v70;
          if (!v74 || (uint64_t)v24 >= (uint64_t)v26)
          {
LABEL_21:
            if (a1 != __dst)
              *(_QWORD *)a1 = *(_QWORD *)__dst;
            __dst += 8;
            v158 = __dst;
            v30 = v16;
            goto LABEL_24;
          }
        }
LABEL_16:
        v30 = v16 + 1;
        if (a1 < (char *)v16 || a1 >= (char *)v30 || a1 != (char *)v16)
          *(_QWORD *)a1 = *v16;
LABEL_24:
        a1 += 8;
        if (__dst < v23)
        {
          v16 = v30;
          if ((unint64_t)v30 < v15)
            continue;
        }
        v159 = (uint64_t *)a1;
        break;
      }
    }
LABEL_286:
    specialized $defer #1 <A>() in _merge<A>(low:mid:high:buffer:by:)((void **)&v159, (const void **)&v158, &v157);
    return 1;
  }
  if (v20 < -7)
    goto LABEL_324;
  if (__dst != (char *)__src || &__src[v22] <= (uint64_t *)__dst)
  {
    memmove(__dst, __src, 8 * v22);
    __dst = v149;
    a1 = __srca;
    a5 = v148;
  }
  v76 = &__dst[8 * v22];
  v157 = v76;
  v159 = v16;
  if (v20 < 8 || a1 >= (char *)v16)
    goto LABEL_286;
  v77 = (_QWORD *)(v15 - 8);
  v143 = *MEMORY[0x24BE096C0];
  while (1)
  {
    v78 = v76 - 8;
    v79 = *((_QWORD *)v76 - 1);
    v80 = 120 * v79;
    if ((unsigned __int128)((uint64_t)v79 * (__int128)120) >> 64 != (uint64_t)(120 * v79) >> 63)
      break;
    v82 = v16 - 1;
    v81 = *(v16 - 1);
    if ((unsigned __int128)((uint64_t)v81 * (__int128)120) >> 64 != (uint64_t)(120 * v81) >> 63)
      goto LABEL_288;
    v83 = v77 + 1;
    v84 = *(double *)(a5 + 120 * v79);
    v85 = *(double *)(a5 + 120 * v81);
    if (v85 < v84)
    {
LABEL_156:
      if (v83 != v16 || v77 >= v16)
        *v77 = *v82;
      v159 = v16 - 1;
      if (v76 <= __dst)
        goto LABEL_286;
      goto LABEL_167;
    }
    if (v84 >= v85)
    {
      v146 = v76;
      v86 = a7 + v80;
      v139 = a7 + v80;
      if ((*(_BYTE *)(a7 + v80 + 8) & 1) != 0)
      {
        v87 = *(unsigned __int8 *)(a9 + 17);
        if (*(_BYTE *)(a9 + 17))
          v88 = a12;
        else
          v88 = 0;
        if (*(_BYTE *)(a9 + 17))
          v89 = 0;
        else
          v89 = a14;
        v90 = *(_QWORD *)(a9 + 88);
        if ((*(_BYTE *)(a9 + 96) & 1) != 0)
        {
          if ((v79 & 0x8000000000000000) != 0)
            goto LABEL_291;
          if (v79 >= *(_QWORD *)(v90 + 16))
            goto LABEL_293;
          v91 = v90 + 12 * v79;
        }
        else
        {
          if ((v79 & 0x8000000000000000) != 0)
            goto LABEL_292;
          if (v79 >= *(_QWORD *)(v90 + 16))
            goto LABEL_295;
          v91 = v90 + 8 * v79;
        }
        v132 = v88;
        v134 = v89;
        if (*(_DWORD *)(v91 + 32) == v143)
        {
          v98 = &static LayoutComputer.defaultValue;
          if (one-time initialization token for defaultValue != -1)
          {
            swift_once();
            v98 = &static LayoutComputer.defaultValue;
          }
        }
        else
        {
          v98 = (__int128 *)AGGraphGetInputValue();
        }
        v100 = *(_QWORD *)v98;
        v101 = one-time initialization token for lockAssertionsAreEnabled;
        swift_retain();
        if (v101 != -1)
          swift_once();
        if (lockAssertionsAreEnabled)
        {
          if (one-time initialization token for _lock != -1)
            swift_once();
          if (!_MovableLockIsOwner(static Update._lock))
            goto LABEL_323;
        }
        v153 = v132;
        v154 = v87 & a13;
        v155 = v134;
        v156 = (v87 ^ 1) & a15;
        v92 = (*(double (**)(uint64_t *, uint64_t))(*(_QWORD *)v100 + 128))(&v153, v87);
        swift_release();
        v86 = v139;
        *(double *)v139 = v92;
        *(_BYTE *)(v139 + 8) = 0;
        a5 = v148;
        __dst = v149;
        a1 = __srca;
        v76 = v146;
        if ((*(_BYTE *)(v139 + 24) & 1) == 0)
        {
LABEL_210:
          v102 = *(double *)(v86 + 16);
          goto LABEL_219;
        }
      }
      else
      {
        v92 = *(double *)v86;
        if ((*(_BYTE *)(v86 + 24) & 1) == 0)
          goto LABEL_210;
      }
      v93 = *(unsigned __int8 *)(a9 + 17);
      v94 = 0x7FF0000000000000;
      if (*(_BYTE *)(a9 + 17))
        v95 = a12;
      else
        v95 = 0x7FF0000000000000;
      if (!*(_BYTE *)(a9 + 17))
        v94 = a14;
      v96 = *(_QWORD *)(a9 + 88);
      if ((*(_BYTE *)(a9 + 96) & 1) != 0)
      {
        if ((v79 & 0x8000000000000000) != 0)
          goto LABEL_294;
        if (v79 >= *(_QWORD *)(v96 + 16))
          goto LABEL_299;
        v97 = v96 + 12 * v79;
      }
      else
      {
        if ((v79 & 0x8000000000000000) != 0)
          goto LABEL_296;
        if (v79 >= *(_QWORD *)(v96 + 16))
          goto LABEL_300;
        v97 = v96 + 8 * v79;
      }
      v133 = v95;
      v135 = v94;
      if (*(_DWORD *)(v97 + 32) == v143)
      {
        v99 = &static LayoutComputer.defaultValue;
        if (one-time initialization token for defaultValue != -1)
        {
          swift_once();
          v99 = &static LayoutComputer.defaultValue;
        }
      }
      else
      {
        v99 = (__int128 *)AGGraphGetInputValue();
      }
      v103 = *(_QWORD *)v99;
      v104 = one-time initialization token for lockAssertionsAreEnabled;
      swift_retain();
      if (v104 != -1)
        swift_once();
      if (lockAssertionsAreEnabled)
      {
        if (one-time initialization token for _lock != -1)
          swift_once();
        if (!_MovableLockIsOwner(static Update._lock))
          goto LABEL_323;
      }
      v153 = v133;
      v154 = v93 & a13;
      v155 = v135;
      v156 = (v93 ^ 1) & a15;
      v102 = (*(double (**)(uint64_t *, uint64_t))(*(_QWORD *)v103 + 128))(&v153, v93);
      swift_release();
      *(double *)(v139 + 16) = v102;
      *(_BYTE *)(v139 + 24) = 0;
      a5 = v148;
      __dst = v149;
      a1 = __srca;
      v76 = v146;
LABEL_219:
      v105 = a7 + 120 * v81;
      if ((*(_BYTE *)(v105 + 8) & 1) != 0)
      {
        v106 = *(unsigned __int8 *)(a9 + 17);
        if (*(_BYTE *)(a9 + 17))
          v107 = a12;
        else
          v107 = 0;
        if (*(_BYTE *)(a9 + 17))
          v108 = 0;
        else
          v108 = a14;
        v109 = *(_QWORD *)(a9 + 88);
        v140 = v107;
        if ((*(_BYTE *)(a9 + 96) & 1) != 0)
        {
          if ((v81 & 0x8000000000000000) != 0)
            goto LABEL_297;
          if (v81 >= *(_QWORD *)(v109 + 16))
            goto LABEL_301;
          v110 = v109 + 12 * v81;
        }
        else
        {
          if ((v81 & 0x8000000000000000) != 0)
            goto LABEL_298;
          if (v81 >= *(_QWORD *)(v109 + 16))
            goto LABEL_303;
          v110 = v109 + 8 * v81;
        }
        v136 = v108;
        if (*(_DWORD *)(v110 + 32) == v143)
        {
          v117 = &static LayoutComputer.defaultValue;
          if (one-time initialization token for defaultValue != -1)
          {
            swift_once();
            v117 = &static LayoutComputer.defaultValue;
          }
        }
        else
        {
          v117 = (__int128 *)AGGraphGetInputValue();
        }
        v119 = *(_QWORD *)v117;
        v120 = one-time initialization token for lockAssertionsAreEnabled;
        swift_retain();
        if (v120 != -1)
          swift_once();
        if (lockAssertionsAreEnabled)
        {
          if (one-time initialization token for _lock != -1)
            swift_once();
          if (!_MovableLockIsOwner(static Update._lock))
            goto LABEL_323;
        }
        v153 = v140;
        v154 = v106 & a13;
        v155 = v136;
        v156 = (v106 ^ 1) & a15;
        v111 = (*(double (**)(uint64_t *, uint64_t))(*(_QWORD *)v119 + 128))(&v153, v106);
        swift_release();
        *(double *)v105 = v111;
        *(_BYTE *)(v105 + 8) = 0;
        a5 = v148;
        __dst = v149;
        a1 = __srca;
        v76 = v146;
        if ((*(_BYTE *)(v105 + 24) & 1) == 0)
        {
LABEL_260:
          v121 = *(double *)(v105 + 16);
          goto LABEL_269;
        }
      }
      else
      {
        v111 = *(double *)v105;
        if ((*(_BYTE *)(v105 + 24) & 1) == 0)
          goto LABEL_260;
      }
      v112 = *(unsigned __int8 *)(a9 + 17);
      v113 = 0x7FF0000000000000;
      if (*(_BYTE *)(a9 + 17))
        v114 = a12;
      else
        v114 = 0x7FF0000000000000;
      if (!*(_BYTE *)(a9 + 17))
        v113 = a14;
      v115 = *(_QWORD *)(a9 + 88);
      if ((*(_BYTE *)(a9 + 96) & 1) != 0)
      {
        if ((v81 & 0x8000000000000000) != 0)
          goto LABEL_302;
        if (v81 >= *(_QWORD *)(v115 + 16))
          goto LABEL_305;
        v116 = v115 + 12 * v81;
      }
      else
      {
        if ((v81 & 0x8000000000000000) != 0)
          goto LABEL_304;
        if (v81 >= *(_QWORD *)(v115 + 16))
          goto LABEL_306;
        v116 = v115 + 8 * v81;
      }
      v137 = v114;
      v141 = v113;
      if (*(_DWORD *)(v116 + 32) == v143)
      {
        v118 = &static LayoutComputer.defaultValue;
        if (one-time initialization token for defaultValue != -1)
        {
          swift_once();
          v118 = &static LayoutComputer.defaultValue;
        }
      }
      else
      {
        v118 = (__int128 *)AGGraphGetInputValue();
      }
      v122 = *(_QWORD *)v118;
      v123 = one-time initialization token for lockAssertionsAreEnabled;
      swift_retain();
      if (v123 != -1)
        swift_once();
      if (lockAssertionsAreEnabled)
      {
        if (one-time initialization token for _lock != -1)
          swift_once();
        if (!_MovableLockIsOwner(static Update._lock))
          goto LABEL_323;
      }
      v153 = v137;
      v154 = v112 & a13;
      v155 = v141;
      v156 = (v112 ^ 1) & a15;
      v121 = (*(double (**)(uint64_t *, uint64_t))(*(_QWORD *)v122 + 128))(&v153, v112);
      swift_release();
      *(double *)(v105 + 16) = v121;
      *(_BYTE *)(v105 + 24) = 0;
      a5 = v148;
      __dst = v149;
      a1 = __srca;
      v76 = v146;
LABEL_269:
      v124 = v102 - v92;
      if (v102 - v92 == INFINITY)
        v125 = -v92;
      else
        v125 = 0.0;
      v126 = v121 - v111;
      if (v121 - v111 == INFINITY)
        v127 = -v111;
      else
        v127 = 0.0;
      v128 = v125 < v127;
      if (v124 != v126)
        v128 = v124 < v126;
      v83 = v77 + 1;
      if (v128)
        goto LABEL_156;
      v129 = v126 >= v124;
      if (v124 == v126)
        v129 = v127 >= v125;
      v83 = v77 + 1;
      if (v129 && (uint64_t)v79 < (uint64_t)v81)
        goto LABEL_156;
    }
    v157 = v78;
    if (v83 < (uint64_t *)v76 || v77 >= (_QWORD *)v76 || v83 != (uint64_t *)v76)
      *v77 = *(_QWORD *)v78;
    v82 = v16;
    v76 = v78;
    if (v78 <= __dst)
      goto LABEL_286;
LABEL_167:
    --v77;
    v16 = v82;
    if (v82 <= (uint64_t *)a1)
      goto LABEL_286;
  }
  __break(1u);
LABEL_288:
  __break(1u);
LABEL_289:
  __break(1u);
LABEL_290:
  __break(1u);
LABEL_291:
  __break(1u);
LABEL_292:
  __break(1u);
LABEL_293:
  __break(1u);
LABEL_294:
  __break(1u);
LABEL_295:
  __break(1u);
LABEL_296:
  __break(1u);
LABEL_297:
  __break(1u);
LABEL_298:
  __break(1u);
LABEL_299:
  __break(1u);
LABEL_300:
  __break(1u);
LABEL_301:
  __break(1u);
LABEL_302:
  __break(1u);
LABEL_303:
  __break(1u);
LABEL_304:
  __break(1u);
LABEL_305:
  __break(1u);
LABEL_306:
  __break(1u);
LABEL_307:
  __break(1u);
LABEL_308:
  __break(1u);
LABEL_309:
  __break(1u);
LABEL_310:
  __break(1u);
LABEL_311:
  __break(1u);
LABEL_312:
  __break(1u);
LABEL_313:
  __break(1u);
LABEL_314:
  __break(1u);
LABEL_315:
  __break(1u);
LABEL_316:
  __break(1u);
LABEL_317:
  __break(1u);
LABEL_318:
  __break(1u);
LABEL_319:
  __break(1u);
LABEL_320:
  __break(1u);
LABEL_321:
  __break(1u);
LABEL_322:
  __break(1u);
LABEL_323:
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
LABEL_324:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized StackLayout.UnmanagedImplementation.sizeChildrenIdeally(in:minorProposalForChild:)(uint64_t result, uint64_t a2, uint64_t a3, char a4, double a5)
{
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  char v20;
  double v21;
  double v22;
  double v23;
  double v24;
  BOOL IsNull;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  unint64_t v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  uint64_t v38;
  unint64_t v39;
  _DWORD *v40;
  __int128 *InputValue;
  double v42;
  uint64_t v43;
  uint64_t v44;
  int v46;
  double v47;
  uint64_t v48;
  double v49;
  uint64_t v50;
  double v51;
  double v52;
  CGRect v53;

  if (!a3)
    return result;
  if (a3 < 0)
    goto LABEL_61;
  v7 = result;
  v8 = 0;
  v9 = a2 + 56;
  v46 = *MEMORY[0x24BE096C0];
  v10 = 32;
  while (1)
  {
    v20 = *(_BYTE *)(v7 + 17);
    v21 = *(double *)v9;
    v22 = *(double *)(v9 + 8);
    v23 = *(double *)(v9 + 32);
    v24 = *(double *)(v9 + 40);
    v53.origin.x = *(CGFloat *)v9;
    v53.origin.y = v22;
    v53.size.width = v23;
    v53.size.height = v24;
    IsNull = CGRectIsNull(v53);
    v26 = 0.0;
    if (!IsNull)
    {
      if ((a4 & 1) != 0)
        v27 = v24;
      else
        v27 = v23;
      if ((a4 & 1) != 0)
        v28 = v22;
      else
        v28 = v21;
      v29 = v28 + v27;
      if (v29 >= v28)
        v30 = v28;
      else
        v30 = v29;
      if (v28 <= v29)
        v28 = v29;
      v26 = 0.0;
      if (v30 <= v28)
        v26 = v28;
    }
    v31 = v8 + 1;
    v32 = v26 - a5;
    if (v32 <= 0.0)
      v32 = 0.0;
    v33 = a5 - v32;
    v34 = (v20 & 1) != 0 ? NAN : v33;
    v35 = (v20 & 1) != 0 ? v33 : NAN;
    v36 = (v20 & 1) != 0 ? v33 : 0.0;
    v37 = (v20 & 1) != 0 ? 0.0 : v33;
    v38 = *(_QWORD *)(v7 + 88);
    v39 = *(_QWORD *)(v38 + 16);
    if ((*(_BYTE *)(v7 + 96) & 1) == 0)
      break;
    if (v8 >= v39)
      goto LABEL_60;
    v40 = (_DWORD *)(v38 + v10);
LABEL_49:
    if (*v40 == v46)
    {
      InputValue = &static LayoutComputer.defaultValue;
      if (one-time initialization token for defaultValue != -1)
      {
        swift_once();
        InputValue = &static LayoutComputer.defaultValue;
      }
    }
    else
    {
      InputValue = (__int128 *)AGGraphGetInputValue();
    }
    v42 = *(double *)InputValue;
    v43 = *((_QWORD *)InputValue + 1);
    v44 = one-time initialization token for lockAssertionsAreEnabled;
    swift_retain();
    if (v44 != -1)
      swift_once();
    if (lockAssertionsAreEnabled)
    {
      if (one-time initialization token for _lock != -1)
        swift_once();
      if (!_MovableLockIsOwner(static Update._lock))
        goto LABEL_62;
    }
    v47 = v36;
    LOBYTE(v48) = v20 ^ 1;
    v49 = v37;
    LOBYTE(v50) = v20;
    v11 = (*(double (**)(double *))(**(_QWORD **)&v42 + 120))(&v47);
    v13 = v12;
    v14 = *(_QWORD *)v7;
    v47 = v42;
    v48 = v43;
    v49 = v11;
    v50 = v12;
    v51 = v35;
    v52 = v34;
    ViewDimensions.subscript.getter(v14);
    v16 = INFINITY;
    if ((*(_QWORD *)&v15 & 0xFFFFFFFFFFFFFLL) == 0)
      v16 = v15;
    if ((~*(_QWORD *)&v15 & 0x7FF0000000000000) == 0)
      v15 = v16;
    v17 = -v15;
    if (*(_BYTE *)(v7 + 17))
      v18 = v17;
    else
      v18 = 0.0;
    if (*(_BYTE *)(v7 + 17))
      v19 = 0.0;
    else
      v19 = v17;
    result = swift_release();
    *(double *)v9 = v18;
    *(double *)(v9 + 8) = v19;
    *(double *)(v9 + 16) = v42;
    *(_QWORD *)(v9 + 24) = v43;
    *(double *)(v9 + 32) = v11;
    *(_QWORD *)(v9 + 40) = v13;
    v10 += 12;
    *(double *)(v9 + 48) = v35;
    *(double *)(v9 + 56) = v34;
    v9 += 120;
    v8 = v31;
    if (a3 == v31)
      return result;
  }
  if (v8 < v39)
  {
    v40 = (_DWORD *)(v38 + 8 * v8 + 32);
    goto LABEL_49;
  }
  __break(1u);
LABEL_60:
  __break(1u);
LABEL_61:
  __break(1u);
LABEL_62:
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized StackLayout.UnmanagedImplementation.sizeChildrenIdeally(in:minorProposalForChild:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int8 a5)
{
  uint64_t v5;
  unint64_t v6;
  double *v7;
  uint64_t v8;
  double v9;
  double v10;
  double v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  unsigned __int8 v20;
  double v21;
  double v22;
  uint64_t v23;
  unint64_t v24;
  _DWORD *v25;
  __int128 *InputValue;
  uint64_t v27;
  double v28;
  uint64_t v29;
  int v30;
  double v34;
  uint64_t v35;
  double v36;
  uint64_t v37;
  double v38;
  double v39;

  if (!a3)
    return result;
  if (a3 < 0)
    goto LABEL_45;
  v5 = result;
  v6 = 0;
  v7 = (double *)(a2 + 112);
  v8 = 32;
  v30 = *MEMORY[0x24BE096C0];
  while (1)
  {
    v20 = *(_BYTE *)(v5 + 17);
    v21 = v20 ? *(double *)&a4 : 0.0;
    v22 = *(_BYTE *)(v5 + 17) ? 0.0 : *(double *)&a4;
    v23 = *(_QWORD *)(v5 + 88);
    v24 = *(_QWORD *)(v23 + 16);
    if ((*(_BYTE *)(v5 + 96) & 1) == 0)
      break;
    if (v6 >= v24)
      goto LABEL_44;
    v25 = (_DWORD *)(v23 + v8);
LABEL_33:
    if (*v25 == v30)
    {
      InputValue = &static LayoutComputer.defaultValue;
      if (one-time initialization token for defaultValue != -1)
      {
        swift_once();
        InputValue = &static LayoutComputer.defaultValue;
      }
    }
    else
    {
      InputValue = (__int128 *)AGGraphGetInputValue();
    }
    v28 = *(double *)InputValue;
    v27 = *((_QWORD *)InputValue + 1);
    v29 = one-time initialization token for lockAssertionsAreEnabled;
    swift_retain();
    if (v29 != -1)
      swift_once();
    if (lockAssertionsAreEnabled)
    {
      if (one-time initialization token for _lock != -1)
        swift_once();
      if (!_MovableLockIsOwner(static Update._lock))
        goto LABEL_46;
    }
    ++v6;
    v34 = v21;
    if (((v20 | a5) & 1) != 0)
      v9 = NAN;
    else
      v9 = v22;
    LOBYTE(v35) = (v20 ^ 1 | a5) & 1;
    v36 = v22;
    LOBYTE(v37) = (v20 | a5) & 1;
    if ((_BYTE)v35)
      v10 = NAN;
    else
      v10 = v21;
    v11 = (*(double (**)(double *))(**(_QWORD **)&v28 + 120))(&v34);
    v13 = v12;
    v14 = *(_QWORD *)v5;
    v34 = v28;
    v35 = v27;
    v36 = v11;
    v37 = v12;
    v38 = v10;
    v39 = v9;
    ViewDimensions.subscript.getter(v14);
    v16 = INFINITY;
    if ((*(_QWORD *)&v15 & 0xFFFFFFFFFFFFFLL) == 0)
      v16 = v15;
    if ((~*(_QWORD *)&v15 & 0x7FF0000000000000) == 0)
      v15 = v16;
    v17 = -v15;
    if (*(_BYTE *)(v5 + 17))
      v18 = v17;
    else
      v18 = 0.0;
    if (*(_BYTE *)(v5 + 17))
      v19 = 0.0;
    else
      v19 = v17;
    result = swift_release();
    *(v7 - 7) = v18;
    *(v7 - 6) = v19;
    *(v7 - 5) = v28;
    *((_QWORD *)v7 - 4) = v27;
    *(v7 - 3) = v11;
    *((_QWORD *)v7 - 2) = v13;
    v8 += 12;
    *(v7 - 1) = v10;
    *v7 = v9;
    v7 += 15;
    if (a3 == v6)
      return result;
  }
  if (v6 < v24)
  {
    v25 = (_DWORD *)(v23 + 8 * v6 + 32);
    goto LABEL_33;
  }
  __break(1u);
LABEL_44:
  __break(1u);
LABEL_45:
  __break(1u);
LABEL_46:
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t initializeWithCopy for StackLayout.Child(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 17) = *(_OWORD *)(a2 + 17);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  v3 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = v3;
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for StackLayout.Child(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = v4;
  v5 = *(_QWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = v5;
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  return a1;
}

uint64_t assignWithTake for StackLayout.Child(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  swift_release();
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  return a1;
}

uint64_t getEnumTagSinglePayload for StackLayout.Child(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 120))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 72);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for StackLayout.Child(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 120) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 72) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 120) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for StackLayout.Child()
{
  return &type metadata for StackLayout.Child;
}

uint64_t destroy for StackLayout.Header()
{
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for StackLayout.Header(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  char v4;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_BYTE *)(a1 + 17) = *(_BYTE *)(a2 + 17);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 41) = *(_OWORD *)(a2 + 41);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  v4 = *(_BYTE *)(a2 + 96);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_BYTE *)(a1 + 96) = v4;
  *(_BYTE *)(a1 + 97) = *(_BYTE *)(a2 + 97);
  *(_BYTE *)(a1 + 98) = *(_BYTE *)(a2 + 98);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for StackLayout.Header(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 17) = *(_BYTE *)(a2 + 17);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  v5 = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = v5;
  v6 = *(_QWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = v6;
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  LOBYTE(v6) = *(_BYTE *)(a2 + 96);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_BYTE *)(a1 + 96) = v6;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 97) = *(_BYTE *)(a2 + 97);
  *(_BYTE *)(a1 + 98) = *(_BYTE *)(a2 + 98);
  return a1;
}

__n128 __swift_memcpy99_8(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __n128 result;
  __int128 v5;
  __int128 v6;

  v2 = *a2;
  v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  result = (__n128)a2[3];
  v5 = a2[4];
  v6 = a2[5];
  *(_DWORD *)(a1 + 95) = *(_DWORD *)((char *)a2 + 95);
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  *(__n128 *)(a1 + 48) = result;
  return result;
}

uint64_t assignWithTake for StackLayout.Header(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_BYTE *)(a1 + 17) = *(_BYTE *)(a2 + 17);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  LOBYTE(v4) = *(_BYTE *)(a2 + 96);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_BYTE *)(a1 + 96) = v4;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 97) = *(_BYTE *)(a2 + 97);
  *(_BYTE *)(a1 + 98) = *(_BYTE *)(a2 + 98);
  return a1;
}

uint64_t getEnumTagSinglePayload for StackLayout.Header(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 99))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 17);
  v4 = v3 >= 2;
  v5 = v3 - 2;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for StackLayout.Header(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_QWORD *)(result + 88) = 0;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 98) = 0;
    *(_WORD *)(result + 96) = 0;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 99) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 99) = 0;
    if (a2)
      *(_BYTE *)(result + 17) = a2 + 1;
  }
  return result;
}

void *type metadata accessor for StackLayout.Header()
{
  return &unk_250611AB8;
}

void *type metadata accessor for StackLayout.MajorAxisRangeCache()
{
  return &unk_2506119A8;
}

_BYTE *protocol witness for Collection.subscript.read in conformance Text.Effect.FlatPath.Elements(_BYTE *result, unint64_t *a2)
{
  uint64_t v2;
  unint64_t v3;

  v3 = *a2;
  if ((*a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (v3 < *(_QWORD *)(*(_QWORD *)v2 + 16))
  {
    *result = *(_BYTE *)(*(_QWORD *)v2 + v3 + 32);
    return _ViewInputs.base.modify;
  }
  __break(1u);
  return result;
}

uint64_t *protocol witness for Collection.subscript.getter in conformance Text.Effect.FlatPath.Elements@<X0>(uint64_t *result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t **v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;

  v3 = *result;
  if (*result < 0 || (v4 = result[1], result = *v2, (*v2)[2] < v4))
  {
    __break(1u);
  }
  else
  {
    v5 = v2[1];
    *a2 = v3;
    a2[1] = v4;
    a2[2] = result;
    a2[3] = v5;
    return (uint64_t *)swift_bridgeObjectRetain();
  }
  return result;
}

unint64_t protocol witness for RandomAccessCollection.index(_:offsetBy:limitedBy:) in conformance Text.Effect.FlatPath.Elements@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X1>, unint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t *v4;
  unint64_t result;
  char v7;

  result = specialized RandomAccessCollection.index(_:offsetBy:limitedBy:)(*a1, a2, *a3, *v4);
  *(_QWORD *)a4 = result;
  *(_BYTE *)(a4 + 8) = v7 & 1;
  return result;
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance Text.Effect.FlatPath.Elements()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = specialized _copyCollectionToContiguousArray<A>(_:)(*v0, v0[1]);
  swift_bridgeObjectRelease();
  return v1;
}

_QWORD *protocol witness for Sequence._copyContents(initializing:) in conformance Text.Effect.FlatPath.Elements(_QWORD *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t *v3;

  return specialized Sequence._copyContents(initializing:)(a1, a2, a3, *v3, v3[1]);
}

void closure #1 in Text.Effect.FlatPath.init(_:)(__int128 *a1)
{
  _BYTE v1[64];

  outlined init with take of GraphicsContext.GradientGeometry(a1, (uint64_t)v1);
  __asm { BR              X10 }
}

uint64_t sub_235106BE4()
{
  uint64_t *v0;
  _QWORD **v1;
  _QWORD *v2;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t result;
  unint64_t v8;
  unint64_t v9;
  __int128 v10;

  v2 = *v1;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *v1 = v2;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2[2] + 1, 1, v2);
    *v1 = v2;
  }
  v5 = v2[2];
  v4 = v2[3];
  if (v5 >= v4 >> 1)
    v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v4 > 1), v5 + 1, 1, v2);
  v2[2] = v5 + 1;
  *(_OWORD *)&v2[2 * v5 + 4] = v10;
  *v1 = v2;
  v6 = *v0;
  result = swift_isUniquelyReferenced_nonNull_native();
  *v0 = v6;
  if ((result & 1) == 0)
  {
    result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v6 + 16) + 1, 1, (char *)v6);
    v6 = result;
    *v0 = result;
  }
  v9 = *(_QWORD *)(v6 + 16);
  v8 = *(_QWORD *)(v6 + 24);
  if (v9 >= v8 >> 1)
  {
    result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v8 > 1), v9 + 1, 1, (char *)v6);
    v6 = result;
  }
  *(_QWORD *)(v6 + 16) = v9 + 1;
  *(_BYTE *)(v6 + v9 + 32) = 1;
  *v0 = v6;
  return result;
}

uint64_t specialized Path.init(elements:points:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  if (*(_QWORD *)(a3 + 16) != a2)
  {
    swift_bridgeObjectRelease();
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    JUMPOUT(0x235107ACCLL);
  }
  if (*(_QWORD *)(result + 16))
    __asm { BR              X10 }
  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 16) = 0;
  *(_QWORD *)(a4 + 24) = 0;
  *(_BYTE *)(a4 + 32) = 6;
  return result;
}

ValueMetadata *type metadata accessor for Text.Effect.FlatPath()
{
  return &type metadata for Text.Effect.FlatPath;
}

uint64_t storeEnumTagSinglePayload for Text.Effect.FlatPath.Element(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_235107B3C + 4 * byte_2352C9FEE[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_235107B70 + 4 * byte_2352C9FE9[v4]))();
}

uint64_t sub_235107B70(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_235107B78(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x235107B80);
  return result;
}

uint64_t sub_235107B8C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x235107B94);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_235107B98(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_235107BA0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for Text.Effect.FlatPath.Element()
{
  return &type metadata for Text.Effect.FlatPath.Element;
}

unint64_t lazy protocol witness table accessor for type Text.Effect.FlatPath.Element and conformance Text.Effect.FlatPath.Element()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Text.Effect.FlatPath.Element and conformance Text.Effect.FlatPath.Element;
  if (!lazy protocol witness table cache variable for type Text.Effect.FlatPath.Element and conformance Text.Effect.FlatPath.Element)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Text.Effect.FlatPath.Element, &type metadata for Text.Effect.FlatPath.Element);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.Effect.FlatPath.Element and conformance Text.Effect.FlatPath.Element);
  }
  return result;
}

ValueMetadata *type metadata accessor for Text.Effect.FlatPath.Elements()
{
  return &type metadata for Text.Effect.FlatPath.Elements;
}

uint64_t associated type witness table accessor for Sequence.Iterator : IteratorProtocol in Text.Effect.FlatPath.Elements()
{
  return lazy protocol witness table accessor for type IndexingIterator<Text.Effect.FlatPath.Elements> and conformance IndexingIterator<A>(&lazy protocol witness table cache variable for type IndexingIterator<Text.Effect.FlatPath.Elements> and conformance IndexingIterator<A>, &lazy cache variable for type metadata for IndexingIterator<Text.Effect.FlatPath.Elements>, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x24BEE2C00], MEMORY[0x24BEE2C18]);
}

unint64_t lazy protocol witness table accessor for type Text.Effect.FlatPath.Elements and conformance Text.Effect.FlatPath.Elements()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Text.Effect.FlatPath.Elements and conformance Text.Effect.FlatPath.Elements;
  if (!lazy protocol witness table cache variable for type Text.Effect.FlatPath.Elements and conformance Text.Effect.FlatPath.Elements)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Text.Effect.FlatPath.Elements, &type metadata for Text.Effect.FlatPath.Elements);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.Effect.FlatPath.Elements and conformance Text.Effect.FlatPath.Elements);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Text.Effect.FlatPath.Elements and conformance Text.Effect.FlatPath.Elements;
  if (!lazy protocol witness table cache variable for type Text.Effect.FlatPath.Elements and conformance Text.Effect.FlatPath.Elements)
  {
    result = MEMORY[0x23B7C9C04]("A{:\x1BШ\t", &type metadata for Text.Effect.FlatPath.Elements);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.Effect.FlatPath.Elements and conformance Text.Effect.FlatPath.Elements);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Text.Effect.FlatPath.Elements and conformance Text.Effect.FlatPath.Elements;
  if (!lazy protocol witness table cache variable for type Text.Effect.FlatPath.Elements and conformance Text.Effect.FlatPath.Elements)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Text.Effect.FlatPath.Elements, &type metadata for Text.Effect.FlatPath.Elements);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.Effect.FlatPath.Elements and conformance Text.Effect.FlatPath.Elements);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Text.Effect.FlatPath.Elements and conformance Text.Effect.FlatPath.Elements;
  if (!lazy protocol witness table cache variable for type Text.Effect.FlatPath.Elements and conformance Text.Effect.FlatPath.Elements)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Text.Effect.FlatPath.Elements, &type metadata for Text.Effect.FlatPath.Elements);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.Effect.FlatPath.Elements and conformance Text.Effect.FlatPath.Elements);
  }
  return result;
}

uint64_t associated type witness table accessor for Collection.SubSequence : Collection in Text.Effect.FlatPath.Elements()
{
  return lazy protocol witness table accessor for type IndexingIterator<Text.Effect.FlatPath.Elements> and conformance IndexingIterator<A>(&lazy protocol witness table cache variable for type Slice<Text.Effect.FlatPath.Elements> and conformance Slice<A>, &lazy cache variable for type metadata for Slice<Text.Effect.FlatPath.Elements>, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x24BEE41D8], MEMORY[0x24BEE4238]);
}

uint64_t lazy protocol witness table accessor for type IndexingIterator<Text.Effect.FlatPath.Elements> and conformance IndexingIterator<A>(unint64_t *a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, unint64_t), uint64_t a4)
{
  uint64_t result;
  uint64_t v7;

  result = *a1;
  if (!result)
  {
    type metadata accessor for IndexingIterator<Text.Effect.FlatPath.Elements>(255, a2, a3);
    result = MEMORY[0x23B7C9C04](a4, v7);
    atomic_store(result, a1);
  }
  return result;
}

void type metadata accessor for IndexingIterator<Text.Effect.FlatPath.Elements>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, unint64_t))
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    v6 = lazy protocol witness table accessor for type Text.Effect.FlatPath.Elements and conformance Text.Effect.FlatPath.Elements();
    v7 = a3(a1, &type metadata for Text.Effect.FlatPath.Elements, v6);
    if (!v8)
      atomic_store(v7, a2);
  }
}

uint64_t associated type witness table accessor for Collection.SubSequence : BidirectionalCollection in Text.Effect.FlatPath.Elements()
{
  return lazy protocol witness table accessor for type Slice<Text.Effect.FlatPath.Elements> and conformance <> Slice<A>(&lazy protocol witness table cache variable for type Slice<Text.Effect.FlatPath.Elements> and conformance <> Slice<A>, (uint64_t (*)(void))lazy protocol witness table accessor for type Text.Effect.FlatPath.Elements and conformance Text.Effect.FlatPath.Elements, MEMORY[0x24BEE4218]);
}

uint64_t associated type witness table accessor for Collection.SubSequence : RandomAccessCollection in Text.Effect.FlatPath.Elements()
{
  return lazy protocol witness table accessor for type Slice<Text.Effect.FlatPath.Elements> and conformance <> Slice<A>(&lazy protocol witness table cache variable for type Slice<Text.Effect.FlatPath.Elements> and conformance <> Slice<A>, (uint64_t (*)(void))lazy protocol witness table accessor for type Text.Effect.FlatPath.Elements and conformance Text.Effect.FlatPath.Elements, MEMORY[0x24BEE4230]);
}

uint64_t lazy protocol witness table accessor for type Slice<Text.Effect.FlatPath.Elements> and conformance <> Slice<A>(unint64_t *a1, uint64_t (*a2)(void), uint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  result = *a1;
  if (!result)
  {
    type metadata accessor for IndexingIterator<Text.Effect.FlatPath.Elements>(255, &lazy cache variable for type metadata for Slice<Text.Effect.FlatPath.Elements>, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x24BEE41D8]);
    v8 = v7;
    v9 = a2();
    result = MEMORY[0x23B7C9C04](a3, v8, &v9);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance ResetDeltaModifier@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(_QWORD *__return_ptr)@<X2>, _QWORD *a4@<X8>)
{
  return protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance _OffsetEffect(a1, a2, a3, specialized _ViewListOutputs.multiModifier<A>(_:inputs:), a4);
}

uint64_t static MultiViewModifier._makeViewList(modifier:inputs:body:)(int *a1, uint64_t *a2, void (*a3)(void), uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  char v12;
  uint64_t v14;
  int v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  __int128 v19;
  int v20;
  uint64_t v21;
  char v22;
  int v23;

  v6 = *a2;
  v7 = *((_DWORD *)a2 + 2);
  v8 = a2[2];
  v9 = a2[5];
  v10 = *((_DWORD *)a2 + 16);
  v11 = a2[9];
  v12 = *((_BYTE *)a2 + 80);
  v23 = *a1;
  v14 = v6;
  v15 = v7;
  v16 = v8;
  v17 = *(_OWORD *)(a2 + 3);
  v18 = v9;
  v19 = *((_OWORD *)a2 + 3);
  v20 = v10;
  v21 = v11;
  v22 = v12;
  return static ViewModifier.makeMultiViewList(modifier:inputs:body:)(&v23, (uint64_t)&v14, a3, a4, a5, *(_QWORD *)(a6 + 8));
}

void protocol witness for ViewModifier.body(content:) in conformance ResetDeltaModifier()
{
  _StringGuts.grow(_:)(34);
  swift_bridgeObjectRelease();
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void ViewModifier<>.body(content:)()
{
  specialized ViewModifier<>.body(content:)();
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance IgnoresAutomaticPaddingLayout@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(_QWORD *__return_ptr)@<X2>, _QWORD *a4@<X8>)
{
  return protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance _OffsetEffect(a1, a2, a3, specialized _ViewListOutputs.multiModifier<A>(_:inputs:), a4);
}

void protocol witness for ViewModifier.body(content:) in conformance IgnoresAutomaticPaddingLayout()
{
  protocol witness for ViewModifier.body(content:) in conformance IgnoresAutomaticPaddingLayout();
}

{
  _StringGuts.grow(_:)(34);
  swift_bridgeObjectRelease();
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t specialized static ModifiedContent<>._makeView(modifier:inputs:body:)@<X0>(uint64_t a1@<X1>, void (*a2)(uint64_t *__return_ptr, uint64_t, uint64_t *)@<X2>, uint64_t a3@<X8>)
{
  int OffsetAttribute2;
  int ShouldRecordTree;
  int v6;
  int v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  unsigned int v24;
  uint64_t KeyPath;
  int v26;
  int v27;
  int v28;
  int v29;
  __int128 v30;
  uint64_t v31;
  unsigned __int8 v32;
  unint64_t v33;
  unint64_t v34;
  unsigned int v35;
  uint64_t v36;
  int v37;
  int v38;
  uint64_t v39;
  unsigned __int8 v40;
  unint64_t v41;
  unint64_t v42;
  __int128 v43;
  int v44;
  int v45;
  unsigned int v46;
  int v47;
  uint64_t v49;
  uint64_t v50;
  int v52;
  unsigned int v53;
  int v54;
  int v55;
  int v57;
  int v58;
  int v59;
  unsigned int v60;
  int v61;
  int v62;
  int v63;
  int v64;
  unsigned int v65;
  int v66;
  __int128 v67;
  __int128 v68;
  int v69;
  unsigned int v70;
  uint64_t v71;
  uint64_t v72;
  int v73;
  int v74;
  int v75;
  int v76;
  int v77;
  int v78;
  int v79;
  _OWORD v80[2];
  __int128 v81;
  __int128 v82;
  __int128 v83;
  int v84;
  uint64_t v85;
  int v86;
  int v87;
  uint64_t v88;
  unsigned int v89;
  uint64_t v90;
  unsigned int v91;
  uint64_t v92;
  uint64_t v93;
  int v94;
  int v95;
  int v96;
  int v97;
  int v98;
  int v99;
  int v100;
  uint64_t v101;

  v101 = *MEMORY[0x24BDAC8D0];
  swift_retain();
  OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
  ShouldRecordTree = AGSubgraphShouldRecordTree();
  if (ShouldRecordTree)
    AGSubgraphBeginTreeElement();
  v54 = ShouldRecordTree;
  v55 = OffsetAttribute2;
  v6 = *(_DWORD *)(a1 + 80);
  v59 = *(_DWORD *)(a1 + 72);
  v63 = *(_DWORD *)(a1 + 76);
  v64 = *(_DWORD *)(a1 + 68);
  v7 = *(_DWORD *)(a1 + 56);
  v62 = *(_DWORD *)(a1 + 60);
  v8 = *(_QWORD *)a1;
  v9 = *(_DWORD *)(a1 + 8);
  v10 = *(_QWORD *)(a1 + 16);
  v11 = *(_DWORD *)(a1 + 28);
  v65 = *(_DWORD *)(a1 + 24);
  v66 = *(_DWORD *)(a1 + 64);
  v12 = *(_DWORD *)(a1 + 36);
  v52 = *(_DWORD *)(a1 + 32);
  v13 = *(_QWORD *)(a1 + 40);
  v14 = *(_QWORD *)(a1 + 48);
  v15 = *(_OWORD *)(a1 + 16);
  v80[0] = *(_OWORD *)a1;
  v80[1] = v15;
  v16 = *(_OWORD *)(a1 + 32);
  v17 = *(_OWORD *)(a1 + 48);
  v18 = *(_OWORD *)(a1 + 64);
  v84 = v6;
  v82 = v17;
  v83 = v18;
  v81 = v16;
  LODWORD(v81) = 0;
  outlined retain of _ViewInputs(a1);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v50 = AGMakeUniqueID();
  swift_beginAccess();
  v57 = v7;
  v58 = v9;
  v53 = v11;
  v60 = v12;
  v61 = v6;
  if ((v12 & 0x20) == 0)
  {
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v19 = v59;
    v20 = v66;
    v21 = v63;
    v22 = v64;
    v23 = v62;
    goto LABEL_28;
  }
  v85 = v8;
  v86 = v9;
  v88 = v10;
  v89 = v65;
  v90 = v11;
  v91 = v12;
  v92 = v13;
  v93 = v14;
  v94 = v7;
  v95 = v62;
  v96 = v66;
  v97 = v64;
  v98 = v59;
  v99 = v63;
  v100 = v6;
  swift_retain_n();
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  v24 = _ViewInputs.geometryTransaction()();
  KeyPath = swift_getKeyPath();
  v26 = specialized CachedEnvironment.attribute<A>(keyPath:)(KeyPath);
  swift_release();
  if ((*(_BYTE *)(v10 + 81) & 1) == 0
    && v66 == *(_DWORD *)(v10 + 32)
    && v59 == *(_DWORD *)(v10 + 36)
    && v26 == *(_DWORD *)(v10 + 40)
    && v9 == *(_DWORD *)(v10 + 44)
    && v24 == *(_DWORD *)(v10 + 48)
    && v65 == *(_DWORD *)(v10 + 52))
  {
    v29 = v59;
    v27 = v7;
    v28 = v66;
    if ((*(_BYTE *)(v10 + 64) & 1) == 0)
    {
      LODWORD(v49) = *(_DWORD *)(v10 + 60);
      goto LABEL_16;
    }
    goto LABEL_15;
  }
  v85 = v8;
  v86 = v9;
  v88 = v10;
  v89 = v65;
  v90 = v24;
  v91 = v12;
  v92 = v13;
  v93 = v14;
  v27 = v7;
  v94 = v7;
  v95 = v62;
  v28 = v66;
  v96 = v66;
  v97 = v64;
  v29 = v59;
  v98 = v59;
  v99 = v63;
  v100 = v61;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  CachedEnvironment.AnimatedFrame.init(inputs:pixelLength:environment:)(&v85, v26, (uint64_t)&v67);
  v30 = v68;
  v31 = v69;
  v32 = v72;
  v33 = v69 | ((unint64_t)v70 << 32);
  v34 = v71 | ((unint64_t)HIDWORD(v71) << 32);
  *(_OWORD *)(v10 + 32) = v67;
  *(_OWORD *)(v10 + 48) = v30;
  *(_QWORD *)(v10 + 64) = v33;
  *(_QWORD *)(v10 + 72) = v34;
  *(_WORD *)(v10 + 80) = v32;
  if (v31 == 1)
  {
LABEL_15:
    LODWORD(v49) = AGGraphCreateOffsetAttribute2();
    *(_DWORD *)(v10 + 60) = v49;
    *(_BYTE *)(v10 + 64) = 0;
    goto LABEL_16;
  }
  v49 = HIDWORD(*((_QWORD *)&v30 + 1));
LABEL_16:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  v85 = v8;
  v86 = v58;
  v88 = v10;
  v89 = v65;
  v90 = v53;
  v91 = v12;
  v92 = v13;
  v93 = v14;
  v94 = v27;
  v95 = v62;
  v96 = v28;
  v97 = v64;
  v98 = v29;
  v99 = v63;
  v100 = v61;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v35 = _ViewInputs.geometryTransaction()();
  v36 = swift_getKeyPath();
  v37 = specialized CachedEnvironment.attribute<A>(keyPath:)(v36);
  swift_release();
  v38 = v29;
  if ((*(_BYTE *)(v10 + 81) & 1) == 0
    && v28 == *(_DWORD *)(v10 + 32)
    && v29 == *(_DWORD *)(v10 + 36)
    && v37 == *(_DWORD *)(v10 + 40)
    && v58 == *(_DWORD *)(v10 + 44)
    && v35 == *(_DWORD *)(v10 + 48)
    && v65 == *(_DWORD *)(v10 + 52))
  {
    v21 = v63;
    v22 = v64;
    v23 = v62;
    if ((*(_BYTE *)(v10 + 72) & 1) == 0)
    {
      v19 = *(_DWORD *)(v10 + 68);
      goto LABEL_27;
    }
  }
  else
  {
    v85 = v8;
    v86 = v58;
    v88 = v10;
    v89 = v65;
    v90 = v35;
    v91 = v12;
    v92 = v13;
    v93 = v14;
    v23 = v62;
    v21 = v63;
    v94 = v57;
    v95 = v62;
    v22 = v64;
    v96 = v28;
    v97 = v64;
    v98 = v38;
    v99 = v63;
    v100 = v61;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    CachedEnvironment.AnimatedFrame.init(inputs:pixelLength:environment:)(&v85, v37, (uint64_t)&v67);
    v19 = v70;
    v39 = v71;
    v40 = v72;
    v41 = v69 | ((unint64_t)v70 << 32);
    v42 = v71 | ((unint64_t)HIDWORD(v71) << 32);
    v43 = v68;
    *(_OWORD *)(v10 + 32) = v67;
    *(_OWORD *)(v10 + 48) = v43;
    *(_QWORD *)(v10 + 64) = v41;
    *(_QWORD *)(v10 + 72) = v42;
    *(_WORD *)(v10 + 80) = v40;
    if (v39 != 1)
      goto LABEL_27;
  }
  v19 = AGGraphCreateOffsetAttribute2();
  *(_DWORD *)(v10 + 68) = v19;
  *(_BYTE *)(v10 + 72) = 0;
LABEL_27:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  v20 = v49;
LABEL_28:
  swift_endAccess();
  v85 = v50;
  v86 = v23;
  v87 = v20;
  LODWORD(v88) = v19;
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  lazy protocol witness table accessor for type _SafeAreaInsetsModifier.Transform and conformance _SafeAreaInsetsModifier.Transform();
  v44 = Attribute.init<A>(body:value:flags:update:)();
  v85 = v50;
  v86 = v55;
  v87 = v21;
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  lazy protocol witness table accessor for type _SafeAreaInsetsModifier.Insets and conformance _SafeAreaInsetsModifier.Insets();
  v45 = Attribute.init<A>(body:value:flags:update:)();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v46 = AGGraphCreateOffsetAttribute2();
  v47 = v54;
  if (v54)
    AGSubgraphBeginTreeElement();
  *(_QWORD *)&v67 = v8;
  DWORD2(v67) = v58;
  *(_QWORD *)&v68 = v10;
  *((_QWORD *)&v68 + 1) = __PAIR64__(v53, v65);
  v70 = v60;
  v71 = v13;
  v72 = v14;
  v73 = v57;
  v74 = v44;
  v75 = v66;
  v76 = v22;
  v77 = v59;
  v78 = v45;
  v79 = v61;
  v85 = v8;
  v86 = v58;
  v88 = v10;
  v89 = v65;
  v90 = v53;
  v91 = v60;
  v92 = v13;
  v93 = v14;
  v94 = v57;
  v95 = v44;
  v96 = v66;
  v97 = v22;
  v98 = v59;
  v99 = v45;
  v100 = v61;
  swift_retain();
  swift_retain_n();
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  specialized static UnaryLayout<>.makeViewImpl(modifier:inputs:body:)(v46, (uint64_t)&v85, a2, a3);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  v69 = 4;
  if (v54)
  {
    specialized static _ViewDebug.reallyWrap<A>(_:value:inputs:)(a3, &v67);
    AGSubgraphEndTreeElement();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_release_n();
    swift_release_n();
    v47 = v54;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_release_n();
    swift_release();
  }
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  LODWORD(v81) = v52;
  if (v47)
  {
    specialized static _ViewDebug.reallyWrap<A>(_:value:inputs:)(a3, v80);
    AGSubgraphEndTreeElement();
  }
  swift_release_n();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

double static ModifiedContent<>._makeView(modifier:inputs:body:)@<D0>(int *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, double *a9@<X8>)
{
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  int ShouldRecordTree;
  void (*v23)(uint64_t *__return_ptr, int *, uint64_t *, uint64_t (*)@<X0>(uint64_t *@<X1>, uint64_t@<X8>), uint64_t, uint64_t, uint64_t);
  double result;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v38;
  int v39;
  uint64_t v40;
  int v42;
  uint64_t v43;
  double v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  int v53;
  int v54;
  int v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  int v60;
  int v61;
  int v62;
  int v63;
  int v64;
  int v65;
  uint64_t v66;
  int v67;
  uint64_t v68;
  int v69;
  int v70;
  int v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  int v75;
  int v76;
  int v77;
  int v78;
  int v79;
  int v80;
  int v81;
  uint64_t v82;

  v82 = *MEMORY[0x24BDAC8D0];
  v13 = *a1;
  v40 = *a2;
  v14 = a2[2];
  v27 = *((_DWORD *)a2 + 6);
  v28 = *((_DWORD *)a2 + 2);
  v26 = *((_DWORD *)a2 + 7);
  v39 = *((_DWORD *)a2 + 8);
  v15 = a2[5];
  v16 = a2[6];
  v35 = *((_DWORD *)a2 + 14);
  v36 = *((_DWORD *)a2 + 9);
  v33 = *((_DWORD *)a2 + 16);
  v34 = *((_DWORD *)a2 + 15);
  v31 = *((_DWORD *)a2 + 18);
  v32 = *((_DWORD *)a2 + 17);
  v29 = *((_DWORD *)a2 + 20);
  v30 = *((_DWORD *)a2 + 19);
  v46 = a5;
  v47 = a6;
  v48 = a7;
  v49 = a8;
  LODWORD(v66) = v13;
  v17 = type metadata accessor for ModifiedContent(255, a5, a6, a4);
  type metadata accessor for _GraphValue(0, v17, v18, v19);
  _GraphValue.subscript.getter((void (*)(uint64_t))partial apply for closure #1 in static ModifiedContent<>._makeView(modifier:inputs:body:), a6, &v45);
  v20 = v45;
  v21 = swift_allocObject();
  *(_QWORD *)(v21 + 16) = a5;
  *(_QWORD *)(v21 + 24) = a6;
  *(_QWORD *)(v21 + 32) = a7;
  *(_QWORD *)(v21 + 40) = a8;
  *(_DWORD *)(v21 + 48) = v13;
  *(_QWORD *)(v21 + 56) = a3;
  *(_QWORD *)(v21 + 64) = a4;
  ShouldRecordTree = AGSubgraphShouldRecordTree();
  swift_retain();
  v38 = ShouldRecordTree;
  if (ShouldRecordTree)
    AGSubgraphBeginTreeElement();
  v66 = v40;
  v68 = v14;
  v67 = v28;
  v69 = v27;
  v70 = v26;
  v72 = v36;
  v73 = v15;
  v74 = v16;
  v75 = v35;
  v76 = v34;
  v77 = v33;
  v78 = v32;
  v79 = v31;
  v80 = v30;
  v81 = v29;
  v42 = v20;
  v50 = v40;
  v51 = v28;
  v52 = v14;
  v53 = v27;
  v54 = v26;
  v55 = 0;
  v56 = v36;
  v57 = v15;
  v58 = v16;
  v59 = v35;
  v60 = v34;
  v61 = v33;
  v62 = v32;
  v63 = v31;
  v64 = v30;
  v65 = v29;
  v23 = *(void (**)(uint64_t *__return_ptr, int *, uint64_t *, uint64_t (*)@<X0>(uint64_t *@<X1>, uint64_t@<X8>), uint64_t, uint64_t, uint64_t))(a8 + 24);
  swift_retain_n();
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  v23(&v43, &v42, &v50, partial apply for closure #2 in static ModifiedContent<>._makeView(modifier:inputs:body:), v21, a6, a8);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  v71 = v39;
  if (v38)
  {
    specialized static _ViewDebug.reallyWrap<A>(_:value:inputs:)((uint64_t)&v43, (uint64_t)&v66);
    AGSubgraphEndTreeElement();
  }
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  *(_QWORD *)a9 = v43;
  result = v44;
  a9[1] = v44;
  return result;
}

uint64_t View.modifier<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;

  v9 = *(_QWORD *)(a3 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v11 = (char *)&v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = *(_QWORD *)(v12 - 8);
  v15 = MEMORY[0x24BDAC7A8](v14);
  v17 = (char *)&v21 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v13 + 16))(v17, v4, a2, v15);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a1, a3);
  (*(void (**)(uint64_t, char *, uint64_t))(v13 + 32))(a4, v17, a2);
  v19 = type metadata accessor for ModifiedContent(0, a2, a3, v18);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v9 + 32))(a4 + *(int *)(v19 + 36), v11, a3);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance AutomaticPaddingViewModifier.PaddingLayout.WrappedLayout@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(_QWORD *__return_ptr)@<X2>, _QWORD *a4@<X8>)
{
  return protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance _OffsetEffect(a1, a2, a3, specialized _ViewListOutputs.multiModifier<A>(_:inputs:), a4);
}

void protocol witness for ViewModifier.body(content:) in conformance AutomaticPaddingViewModifier.PaddingLayout.WrappedLayout()
{
  _StringGuts.grow(_:)(34);
  swift_bridgeObjectRelease();
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance AutomaticPaddingViewModifier@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(_QWORD *__return_ptr)@<X2>, _QWORD *a4@<X8>)
{
  return protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance _OffsetEffect(a1, a2, a3, specialized _ViewListOutputs.multiModifier<A>(_:inputs:), a4);
}

void protocol witness for ViewModifier.body(content:) in conformance AutomaticPaddingViewModifier()
{
  _StringGuts.grow(_:)(34);
  swift_bridgeObjectRelease();
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance ScrollPhaseStateConfigurationModifier@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(_QWORD *__return_ptr)@<X2>, _QWORD *a4@<X8>)
{
  return protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance _OffsetEffect(a1, a2, a3, specialized _ViewListOutputs.multiModifier<A>(_:inputs:), a4);
}

void protocol witness for ViewModifier.body(content:) in conformance ScrollPhaseStateConfigurationModifier()
{
  protocol witness for ViewModifier.body(content:) in conformance IgnoresAutomaticPaddingLayout();
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance ResetScrollInputsModifier@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(_QWORD *__return_ptr)@<X2>, _QWORD *a4@<X8>)
{
  return protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance _OffsetEffect(a1, a2, a3, specialized _ViewListOutputs.multiModifier<A>(_:inputs:), a4);
}

void protocol witness for ViewModifier.body(content:) in conformance ResetScrollInputsModifier()
{
  protocol witness for ViewModifier.body(content:) in conformance IgnoresAutomaticPaddingLayout();
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance ScrollPositionBindingModifier(int *a1, uint64_t a2, void (*a3)(uint64_t, uint64_t *), uint64_t a4)
{
  int v4;
  __int128 v5;
  __int128 v6;
  _OWORD v8[5];
  int v9;

  v4 = *a1;
  v5 = *(_OWORD *)(a2 + 48);
  v8[2] = *(_OWORD *)(a2 + 32);
  v8[3] = v5;
  v8[4] = *(_OWORD *)(a2 + 64);
  v9 = *(_DWORD *)(a2 + 80);
  v6 = *(_OWORD *)(a2 + 16);
  v8[0] = *(_OWORD *)a2;
  v8[1] = v6;
  return specialized static ViewModifier<>._makeView(modifier:inputs:body:)(v4, (uint64_t)v8, a3, a4, (void (*)(uint64_t *, __int128 *))specialized static ScrollPositionBindingModifier._makeInputs(modifier:inputs:));
}

uint64_t specialized static ViewModifier<>._makeView(modifier:inputs:body:)(uint64_t a1, uint64_t a2, void (*a3)(uint64_t, Swift::UInt *))
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  Swift::UInt value;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v18;
  Swift::UInt v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  int v29;

  v4 = *(_QWORD *)a2;
  v5 = *(_DWORD *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a2 + 24);
  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a2 + 40);
  outlined retain of _ViewInputs(a2);
  v10 = swift_retain();
  v11 = specialized find<A>(_:key:)(v10);
  if (!v11 || (value = v4, *(_BYTE *)(v11 + 72) != 1))
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for TypedElement<VariantThatFitsFlag>, (uint64_t)&type metadata for VariantThatFitsFlag, (uint64_t)&protocol witness table for VariantThatFitsFlag, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for TypedElement);
    *(_BYTE *)(swift_allocObject() + 72) = 1;
    value = PropertyList.Element.init(keyType:before:after:)((Swift::Int)&type metadata for VariantThatFitsFlag, 0, v4).value;
  }
  v13 = *(_DWORD *)(a2 + 80);
  v14 = *(_QWORD *)(a2 + 48);
  v18 = *(_OWORD *)(a2 + 56);
  v15 = *(_QWORD *)(a2 + 72);
  swift_release();
  v20 = value;
  v21 = v5;
  v22 = v6;
  v23 = v7;
  v24 = v8;
  v25 = v9;
  v26 = v14;
  v27 = v18;
  v28 = v15;
  v29 = v13;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  v16 = swift_bridgeObjectRetain();
  a3(v16, &v20);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  return swift_release_n();
}

uint64_t specialized static ViewModifier<>._makeView(modifier:inputs:body:)(uint64_t a1, uint64_t a2, void (*a3)(uint64_t, uint64_t *))
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v9;
  int v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  int v17;
  __int128 v18;
  _BYTE v19[32];
  _BYTE v20[32];
  int v21;
  uint64_t v22;

  v22 = *(_QWORD *)a2;
  v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)&v19[16] = *(_OWORD *)(a2 + 32);
  *(_OWORD *)v20 = v4;
  *(_OWORD *)&v20[16] = *(_OWORD *)(a2 + 64);
  v21 = *(_DWORD *)(a2 + 80);
  v5 = *(_OWORD *)(a2 + 16);
  v18 = *(_OWORD *)a2;
  *(_OWORD *)v19 = v5;
  outlined retain of _ViewInputs(a2);
  if (one-time initialization token for defaultValue != -1)
    swift_once();
  v6 = static StyleContextInput.defaultValue;
  swift_retain();
  specialized closure #1 in PropertyList.subscript.setter((uint64_t *)&v18, v6, *((uint64_t *)&v6 + 1));
  outlined release of ViewTransform((uint64_t)&v22);
  v9 = v18;
  v10 = DWORD2(v18);
  v11 = *(_QWORD *)v19;
  v12 = *(_OWORD *)&v19[8];
  v13 = *(_QWORD *)&v19[24];
  v14 = *(_QWORD *)v20;
  v15 = *(_OWORD *)&v20[8];
  v16 = *(_QWORD *)&v20[24];
  v17 = v21;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  v7 = swift_bridgeObjectRetain();
  a3(v7, &v9);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  return swift_release_n();
}

uint64_t specialized static ViewModifier<>._makeView(modifier:inputs:body:)(int a1, uint64_t a2, void (*a3)(uint64_t, uint64_t *))
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v9;
  int v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  int v17;
  __int128 v18;
  _BYTE v19[32];
  _BYTE v20[32];
  int v21;

  v4 = *(_OWORD *)(a2 + 32);
  v5 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)v20 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)&v20[16] = v5;
  v21 = *(_DWORD *)(a2 + 80);
  v6 = *(_OWORD *)(a2 + 16);
  v18 = *(_OWORD *)a2;
  *(_OWORD *)v19 = v6;
  *(_OWORD *)&v19[16] = v4;
  LODWORD(v9) = a1;
  outlined retain of _ViewInputs(a2);
  protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance _TransactionModifier((uint64_t)&v9, (uint64_t)&v18);
  v9 = v18;
  v10 = DWORD2(v18);
  v11 = *(_QWORD *)v19;
  v12 = *(_OWORD *)&v19[8];
  v13 = *(_QWORD *)&v19[24];
  v14 = *(_QWORD *)v20;
  v15 = *(_OWORD *)&v20[8];
  v16 = *(_QWORD *)&v20[24];
  v17 = v21;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  v7 = swift_bridgeObjectRetain();
  a3(v7, &v9);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  return swift_release_n();
}

uint64_t specialized static ViewModifier<>._makeView(modifier:inputs:body:)(int a1, uint64_t a2, void (*a3)(uint64_t, uint64_t *), uint64_t a4, void (*a5)(uint64_t *, __int128 *))
{
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v12;
  int v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  int v20;
  __int128 v21;
  _BYTE v22[32];
  _BYTE v23[32];
  int v24;

  v7 = *(_OWORD *)(a2 + 32);
  v8 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)v23 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)&v23[16] = v8;
  v24 = *(_DWORD *)(a2 + 80);
  v9 = *(_OWORD *)(a2 + 16);
  v21 = *(_OWORD *)a2;
  *(_OWORD *)v22 = v9;
  *(_OWORD *)&v22[16] = v7;
  LODWORD(v12) = a1;
  outlined retain of _ViewInputs(a2);
  a5(&v12, &v21);
  v12 = v21;
  v13 = DWORD2(v21);
  v14 = *(_QWORD *)v22;
  v15 = *(_OWORD *)&v22[8];
  v16 = *(_QWORD *)&v22[24];
  v17 = *(_QWORD *)v23;
  v18 = *(_OWORD *)&v23[8];
  v19 = *(_QWORD *)&v23[24];
  v20 = v24;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  v10 = swift_bridgeObjectRetain();
  a3(v10, &v12);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  return swift_release_n();
}

uint64_t static ViewModifier<>._makeView(modifier:inputs:body:)(int *a1, uint64_t *a2, void (*a3)(uint64_t, uint64_t *), uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  void (*v15)(uint64_t *, uint64_t *, uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v19;
  int v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  uint64_t v35;
  int v36;

  v9 = *a1;
  v10 = *((_DWORD *)a2 + 2);
  v11 = a2[2];
  v12 = a2[5];
  v13 = a2[6];
  v14 = *((_DWORD *)a2 + 20);
  v28 = *a2;
  v29 = v10;
  v30 = v11;
  v31 = *(_OWORD *)(a2 + 3);
  v32 = v12;
  v33 = v13;
  v34 = *(_OWORD *)(a2 + 7);
  v35 = a2[9];
  v36 = v14;
  LODWORD(v19) = v9;
  v15 = *(void (**)(uint64_t *, uint64_t *, uint64_t, uint64_t))(a7 + 8);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v15(&v19, &v28, a5, a7);
  v19 = v28;
  v20 = v29;
  v21 = v30;
  v22 = v31;
  v23 = v32;
  v24 = v33;
  v25 = v34;
  v26 = v35;
  v27 = v36;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  v16 = swift_bridgeObjectRetain();
  a3(v16, &v19);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  return swift_release_n();
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance ScrollPositionBindingModifier(int *a1, uint64_t a2, void (*a3)(uint64_t, uint64_t *), uint64_t a4)
{
  int v4;
  __int128 v5;
  __int128 v6;
  _OWORD v8[5];
  char v9;

  v4 = *a1;
  v5 = *(_OWORD *)(a2 + 48);
  v8[2] = *(_OWORD *)(a2 + 32);
  v8[3] = v5;
  v8[4] = *(_OWORD *)(a2 + 64);
  v9 = *(_BYTE *)(a2 + 80);
  v6 = *(_OWORD *)(a2 + 16);
  v8[0] = *(_OWORD *)a2;
  v8[1] = v6;
  return specialized static ViewModifier<>._makeViewList(modifier:inputs:body:)(v4, (uint64_t)v8, a3, a4, (void (*)(uint64_t *, __int128 *))specialized static ScrollPositionBindingModifier._makeInputs(modifier:inputs:));
}

uint64_t specialized static ViewModifier<>._makeViewList(modifier:inputs:body:)(uint64_t a1, uint64_t a2, void (*a3)(uint64_t, Swift::UInt *))
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  Swift::UInt value;
  uint64_t v13;
  char v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  Swift::UInt v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  char v32;

  v4 = *(_QWORD *)a2;
  v5 = *(_DWORD *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a2 + 24);
  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a2 + 40);
  outlined retain of _ViewListInputs(a2);
  v10 = swift_retain();
  v11 = specialized find<A>(_:key:)(v10);
  if (!v11 || (value = v4, *(_BYTE *)(v11 + 72) != 1))
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for TypedElement<VariantThatFitsFlag>, (uint64_t)&type metadata for VariantThatFitsFlag, (uint64_t)&protocol witness table for VariantThatFitsFlag, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for TypedElement);
    *(_BYTE *)(swift_allocObject() + 72) = 1;
    value = PropertyList.Element.init(keyType:before:after:)((Swift::Int)&type metadata for VariantThatFitsFlag, 0, v4).value;
  }
  v13 = *(_QWORD *)(a2 + 72);
  v14 = *(_BYTE *)(a2 + 80);
  v15 = *(_DWORD *)(a2 + 64);
  v18 = a2 + 48;
  v17 = *(_QWORD *)(a2 + 48);
  v16 = *(_QWORD *)(v18 + 8);
  swift_release();
  v22 = value;
  v23 = v5;
  v24 = v6;
  v25 = v7;
  v26 = v8;
  v27 = v9;
  v28 = v17;
  v29 = v16;
  v30 = v15;
  v31 = v13;
  v32 = v14;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  v19 = swift_bridgeObjectRetain();
  a3(v19, &v22);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  return swift_release_n();
}

uint64_t specialized static ViewModifier<>._makeViewList(modifier:inputs:body:)(uint64_t a1, uint64_t a2, void (*a3)(uint64_t, uint64_t *))
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v9;
  int v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  __int128 v14;
  int v15;
  uint64_t v16;
  char v17;
  __int128 v18;
  _BYTE v19[32];
  __int128 v20;
  __int128 v21;
  char v22;
  uint64_t v23;

  v23 = *(_QWORD *)a2;
  v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)&v19[16] = *(_OWORD *)(a2 + 32);
  v20 = v4;
  v21 = *(_OWORD *)(a2 + 64);
  v22 = *(_BYTE *)(a2 + 80);
  v5 = *(_OWORD *)(a2 + 16);
  v18 = *(_OWORD *)a2;
  *(_OWORD *)v19 = v5;
  outlined retain of _ViewListInputs(a2);
  if (one-time initialization token for defaultValue != -1)
    swift_once();
  v6 = static StyleContextInput.defaultValue;
  swift_retain();
  specialized closure #1 in PropertyList.subscript.setter((uint64_t *)&v18, v6, *((uint64_t *)&v6 + 1));
  outlined release of ViewTransform((uint64_t)&v23);
  v9 = v18;
  v10 = DWORD2(v18);
  v11 = *(_QWORD *)v19;
  v12 = *(_OWORD *)&v19[8];
  v13 = *(_QWORD *)&v19[24];
  v14 = v20;
  v15 = v21;
  v16 = *((_QWORD *)&v21 + 1);
  v17 = v22;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  v7 = swift_bridgeObjectRetain();
  a3(v7, &v9);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  return swift_release_n();
}

uint64_t specialized static ViewModifier<>._makeViewList(modifier:inputs:body:)(int a1, uint64_t a2, void (*a3)(uint64_t, uint64_t *))
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v9;
  int v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  __int128 v14;
  int v15;
  uint64_t v16;
  char v17;
  __int128 v18;
  _BYTE v19[32];
  __int128 v20;
  __int128 v21;
  char v22;

  v4 = *(_OWORD *)(a2 + 32);
  v5 = *(_OWORD *)(a2 + 64);
  v20 = *(_OWORD *)(a2 + 48);
  v21 = v5;
  v22 = *(_BYTE *)(a2 + 80);
  v6 = *(_OWORD *)(a2 + 16);
  v18 = *(_OWORD *)a2;
  *(_OWORD *)v19 = v6;
  *(_OWORD *)&v19[16] = v4;
  LODWORD(v9) = a1;
  outlined retain of _ViewListInputs(a2);
  protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance _TransactionModifier((uint64_t)&v9, (uint64_t)&v18);
  v9 = v18;
  v10 = DWORD2(v18);
  v11 = *(_QWORD *)v19;
  v12 = *(_OWORD *)&v19[8];
  v13 = *(_QWORD *)&v19[24];
  v14 = v20;
  v15 = v21;
  v16 = *((_QWORD *)&v21 + 1);
  v17 = v22;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  v7 = swift_bridgeObjectRetain();
  a3(v7, &v9);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  return swift_release_n();
}

uint64_t specialized static ViewModifier<>._makeViewList(modifier:inputs:body:)(int a1, uint64_t a2, void (*a3)(uint64_t, uint64_t *), uint64_t a4, void (*a5)(uint64_t *, __int128 *))
{
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v12;
  int v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  __int128 v17;
  int v18;
  uint64_t v19;
  char v20;
  __int128 v21;
  _BYTE v22[32];
  __int128 v23;
  __int128 v24;
  char v25;

  v7 = *(_OWORD *)(a2 + 32);
  v8 = *(_OWORD *)(a2 + 64);
  v23 = *(_OWORD *)(a2 + 48);
  v24 = v8;
  v25 = *(_BYTE *)(a2 + 80);
  v9 = *(_OWORD *)(a2 + 16);
  v21 = *(_OWORD *)a2;
  *(_OWORD *)v22 = v9;
  *(_OWORD *)&v22[16] = v7;
  LODWORD(v12) = a1;
  outlined retain of _ViewListInputs(a2);
  a5(&v12, &v21);
  v12 = v21;
  v13 = DWORD2(v21);
  v14 = *(_QWORD *)v22;
  v15 = *(_OWORD *)&v22[8];
  v16 = *(_QWORD *)&v22[24];
  v17 = v23;
  v18 = v24;
  v19 = *((_QWORD *)&v24 + 1);
  v20 = v25;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  v10 = swift_bridgeObjectRetain();
  a3(v10, &v12);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  return swift_release_n();
}

uint64_t static ViewModifier<>._makeViewList(modifier:inputs:body:)(int *a1, uint64_t *a2, void (*a3)(uint64_t, uint64_t *), uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  char v15;
  void (*v16)(uint64_t *, uint64_t *, uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v20;
  int v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  __int128 v25;
  int v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  __int128 v32;
  uint64_t v33;
  __int128 v34;
  int v35;
  uint64_t v36;
  char v37;

  v9 = *a1;
  v10 = *((_DWORD *)a2 + 2);
  v11 = a2[2];
  v12 = a2[5];
  v13 = *((_DWORD *)a2 + 16);
  v14 = a2[9];
  v15 = *((_BYTE *)a2 + 80);
  v29 = *a2;
  v30 = v10;
  v31 = v11;
  v32 = *(_OWORD *)(a2 + 3);
  v33 = v12;
  v34 = *((_OWORD *)a2 + 3);
  v35 = v13;
  v36 = v14;
  v37 = v15;
  LODWORD(v20) = v9;
  v16 = *(void (**)(uint64_t *, uint64_t *, uint64_t, uint64_t))(a7 + 8);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  v16(&v20, &v29, a5, a7);
  v20 = v29;
  v21 = v30;
  v22 = v31;
  v23 = v32;
  v24 = v33;
  v25 = v34;
  v26 = v35;
  v27 = v36;
  v28 = v37;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  v17 = swift_bridgeObjectRetain();
  a3(v17, &v20);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  return swift_release_n();
}

uint64_t static ViewModifier<>._viewListCount(inputs:body:)(__int128 *a1, uint64_t (*a2)(__int128 *))
{
  int v2;
  uint64_t v3;
  __int128 v5;
  int v6;
  uint64_t v7;

  v2 = *((_DWORD *)a1 + 4);
  v3 = *((_QWORD *)a1 + 3);
  v5 = *a1;
  v6 = v2;
  v7 = v3;
  return a2(&v5);
}

void protocol witness for ViewModifier.body(content:) in conformance ScrollPositionBindingModifier()
{
  specialized ViewModifier.bodyError()();
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance ScrollValueModifier(int *a1, uint64_t a2, void (*a3)(uint64_t, uint64_t *), uint64_t a4)
{
  int v4;
  __int128 v5;
  __int128 v6;
  _OWORD v8[5];
  int v9;

  v4 = *a1;
  v5 = *(_OWORD *)(a2 + 48);
  v8[2] = *(_OWORD *)(a2 + 32);
  v8[3] = v5;
  v8[4] = *(_OWORD *)(a2 + 64);
  v9 = *(_DWORD *)(a2 + 80);
  v6 = *(_OWORD *)(a2 + 16);
  v8[0] = *(_OWORD *)a2;
  v8[1] = v6;
  return specialized static ViewModifier<>._makeView(modifier:inputs:body:)(v4, (uint64_t)v8, a3, a4, (void (*)(uint64_t *, __int128 *))specialized static ScrollValueModifier._makeInputs(modifier:inputs:));
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance ScrollValueModifier(int *a1, uint64_t a2, void (*a3)(uint64_t, uint64_t *), uint64_t a4)
{
  int v4;
  __int128 v5;
  __int128 v6;
  _OWORD v8[5];
  char v9;

  v4 = *a1;
  v5 = *(_OWORD *)(a2 + 48);
  v8[2] = *(_OWORD *)(a2 + 32);
  v8[3] = v5;
  v8[4] = *(_OWORD *)(a2 + 64);
  v9 = *(_BYTE *)(a2 + 80);
  v6 = *(_OWORD *)(a2 + 16);
  v8[0] = *(_OWORD *)a2;
  v8[1] = v6;
  return specialized static ViewModifier<>._makeViewList(modifier:inputs:body:)(v4, (uint64_t)v8, a3, a4, (void (*)(uint64_t *, __int128 *))specialized static ScrollValueModifier._makeInputs(modifier:inputs:));
}

void protocol witness for ViewModifier.body(content:) in conformance ScrollValueModifier()
{
  specialized ViewModifier.bodyError()();
}

void protocol witness for ViewModifier.body(content:) in conformance _OffsetEffect()
{
  specialized ViewModifier.bodyError()(0x4574657366664F5FLL, (void *)0xED00007463656666);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance _ColorMonochromeEffect._Resolved@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(_QWORD *__return_ptr)@<X2>, _QWORD *a4@<X8>)
{
  return protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance _OffsetEffect(a1, a2, a3, specialized _ViewListOutputs.multiModifier<A>(_:inputs:), a4);
}

void protocol witness for ViewModifier.body(content:) in conformance _ColorMonochromeEffect._Resolved()
{
  specialized ViewModifier.bodyError()(0x65766C6F7365525FLL, (void *)0xE900000000000064);
}

void protocol witness for ViewModifier.body(content:) in conformance _ColorMonochromeEffect()
{
  specialized ViewModifier.bodyError()(0xD000000000000016, (void *)0x80000002352E1100);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance _FixedSizeLayout@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(_QWORD *__return_ptr)@<X2>, _QWORD *a4@<X8>)
{
  return protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance _OffsetEffect(a1, a2, a3, specialized _ViewListOutputs.multiModifier<A>(_:inputs:), a4);
}

void protocol witness for ViewModifier.body(content:) in conformance _FixedSizeLayout()
{
  specialized ViewModifier.bodyError()(0xD000000000000010, (void *)0x80000002352E7F90);
}

void protocol witness for ViewModifier.body(content:) in conformance _RotationEffect()
{
  specialized ViewModifier.bodyError()(0x6F697461746F525FLL, (void *)0xEF7463656666456ELL);
}

void static ViewInputsModifier.graphInputsSemantics.getter(uint64_t a1@<X8>)
{
  *(_DWORD *)a1 = 0;
  *(_BYTE *)(a1 + 4) = 1;
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance _ForegroundColorModifier(unsigned int *a1, uint64_t a2, void (*a3)(uint64_t, unint64_t *))
{
  unsigned int v3;
  __int128 v4;
  __int128 v5;
  _OWORD v7[5];
  int v8;

  v3 = *a1;
  v4 = *(_OWORD *)(a2 + 48);
  v7[2] = *(_OWORD *)(a2 + 32);
  v7[3] = v4;
  v7[4] = *(_OWORD *)(a2 + 64);
  v8 = *(_DWORD *)(a2 + 80);
  v5 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v5;
  return specialized static ViewInputsModifier._makeView(modifier:inputs:body:)(v3, (uint64_t)v7, a3);
}

uint64_t specialized static ViewInputsModifier._makeView(modifier:inputs:body:)(uint64_t a1, uint64_t a2, void (*a3)(uint64_t, Swift::UInt *))
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  Swift::UInt value;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v18;
  Swift::UInt v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  int v29;

  v4 = *(_QWORD *)a2;
  v5 = *(_DWORD *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a2 + 24);
  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a2 + 40);
  outlined retain of _ViewInputs(a2);
  v10 = swift_retain();
  v11 = specialized find<A>(_:key:)(v10);
  if (!v11 || (value = v4, *(_BYTE *)(v11 + 72) != 1))
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for TypedElement<PreferTextLayoutManagerInput>, (uint64_t)&type metadata for PreferTextLayoutManagerInput, (uint64_t)&protocol witness table for PreferTextLayoutManagerInput, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for TypedElement);
    *(_BYTE *)(swift_allocObject() + 72) = 1;
    value = PropertyList.Element.init(keyType:before:after:)((Swift::Int)&type metadata for PreferTextLayoutManagerInput, 0, v4).value;
  }
  v13 = *(_DWORD *)(a2 + 80);
  v14 = *(_QWORD *)(a2 + 48);
  v18 = *(_OWORD *)(a2 + 56);
  v15 = *(_QWORD *)(a2 + 72);
  swift_release();
  v20 = value;
  v21 = v5;
  v22 = v6;
  v23 = v7;
  v24 = v8;
  v25 = v9;
  v26 = v14;
  v27 = v18;
  v28 = v15;
  v29 = v13;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  v16 = swift_bridgeObjectRetain();
  a3(v16, &v20);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  return swift_release_n();
}

{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  Swift::UInt value;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v18;
  Swift::UInt v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  int v29;

  type metadata accessor for Date?(0);
  v4 = *(_QWORD *)a2;
  v5 = *(_DWORD *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a2 + 24);
  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a2 + 40);
  outlined retain of _ViewInputs(a2);
  AGGraphCreateOffsetAttribute2();
  v10 = AGCreateWeakAttribute();
  v11 = swift_retain();
  if (!specialized find<A>(_:key:)(v11) || (value = v4, (static WeakAttribute.== infix(_:_:)() & 1) == 0))
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for TypedElement<ReferenceDateInput>, (uint64_t)&type metadata for ReferenceDateInput, (uint64_t)&protocol witness table for ReferenceDateInput, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for TypedElement);
    *(_QWORD *)(swift_allocObject() + 72) = v10;
    value = PropertyList.Element.init(keyType:before:after:)((Swift::Int)&type metadata for ReferenceDateInput, 0, v4).value;
  }
  v13 = *(_DWORD *)(a2 + 80);
  v14 = *(_QWORD *)(a2 + 48);
  v18 = *(_OWORD *)(a2 + 56);
  v15 = *(_QWORD *)(a2 + 72);
  swift_release();
  v20 = value;
  v21 = v5;
  v22 = v6;
  v23 = v7;
  v24 = v8;
  v25 = v9;
  v26 = v14;
  v27 = v18;
  v28 = v15;
  v29 = v13;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  v16 = swift_bridgeObjectRetain();
  a3(v16, &v20);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  return swift_release_n();
}

uint64_t specialized static ViewInputsModifier._makeView(modifier:inputs:body:)(unsigned int a1, uint64_t a2, void (*a3)(uint64_t, unint64_t *))
{
  unint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  int v22;
  unint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  uint64_t v33;
  int v34;
  uint64_t v35;

  v35 = *MEMORY[0x24BDAC8D0];
  v5 = *(_QWORD *)a2;
  v6 = *(_DWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a2 + 16);
  v22 = *(_DWORD *)(a2 + 36);
  v8 = *(_QWORD *)(a2 + 40);
  v9 = *(_DWORD *)(a2 + 32) | 0x20;
  v10 = *(_QWORD *)(a2 + 24);
  swift_beginAccess();
  v24 = __PAIR64__(*(_DWORD *)(v7 + 16), a1);
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  outlined retain of _ViewInputs(a2);
  lazy protocol witness table accessor for type _ForegroundColorModifier.ChildEnvironment and conformance _ForegroundColorModifier.ChildEnvironment();
  v11 = Attribute.init<A>(body:value:flags:update:)();
  v12 = MEMORY[0x24BEE4AF8];
  v13 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  type metadata accessor for MutableBox<CachedEnvironment>(0, v14, v15, v16);
  v17 = swift_allocObject();
  *(_DWORD *)(v17 + 16) = v11;
  *(_QWORD *)(v17 + 24) = v12;
  *(_OWORD *)(v17 + 32) = 0u;
  *(_OWORD *)(v17 + 48) = 0u;
  *(_OWORD *)(v17 + 64) = 0u;
  *(_WORD *)(v17 + 80) = 256;
  *(_QWORD *)(v17 + 88) = v13;
  swift_release();
  v18 = *(_DWORD *)(a2 + 80);
  v19 = *(_QWORD *)(a2 + 48);
  v24 = v5;
  v25 = v6;
  v26 = v17;
  v27 = v10;
  v28 = v9;
  v29 = v22;
  v30 = v8;
  v31 = v19;
  v32 = *(_OWORD *)(a2 + 56);
  v33 = *(_QWORD *)(a2 + 72);
  v34 = v18;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  v20 = swift_bridgeObjectRetain();
  a3(v20, &v24);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  return swift_release_n();
}

uint64_t static ViewInputsModifier._makeView(modifier:inputs:body:)(int *a1, uint64_t *a2, void (*a3)(uint64_t, uint64_t *), uint64_t a4, uint64_t a5, uint64_t a6)
{
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  void (*v14)(uint64_t *, uint64_t *, uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v18;
  int v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  int v35;

  v8 = *a1;
  v9 = *((_DWORD *)a2 + 2);
  v10 = a2[2];
  v11 = a2[5];
  v12 = a2[6];
  v13 = *((_DWORD *)a2 + 20);
  v27 = *a2;
  v28 = v9;
  v29 = v10;
  v30 = *(_OWORD *)(a2 + 3);
  v31 = v11;
  v32 = v12;
  v33 = *(_OWORD *)(a2 + 7);
  v34 = a2[9];
  v35 = v13;
  LODWORD(v18) = v8;
  v14 = *(void (**)(uint64_t *, uint64_t *, uint64_t, uint64_t))(a6 + 24);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v14(&v18, &v27, a5, a6);
  v18 = v27;
  v19 = v28;
  v20 = v29;
  v21 = v30;
  v22 = v31;
  v23 = v32;
  v24 = v33;
  v25 = v34;
  v26 = v35;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  v15 = swift_bridgeObjectRetain();
  a3(v15, &v18);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  return swift_release_n();
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance _ForegroundColorModifier@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(_QWORD *__return_ptr)@<X2>, _QWORD *a4@<X8>)
{
  return protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance _OffsetEffect(a1, a2, a3, specialized _ViewListOutputs.multiModifier<A>(_:inputs:), a4);
}

uint64_t static ViewInputsModifier._makeViewList(modifier:inputs:body:)(int *a1, uint64_t *a2, void (*a3)(void), uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8;
  int v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v17;
  void (*v18)(uint64_t *, uint64_t *, uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int32 v28;
  char v29;
  uint64_t v30;
  uint64_t v32;
  int v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  __int32 v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int32x4_t v50;
  uint64_t v51;
  unsigned int v52;

  v23 = *a1;
  v8 = *a2;
  v9 = *((_DWORD *)a2 + 2);
  v10 = a2[2];
  v12 = *((_DWORD *)a2 + 6);
  v11 = *((_DWORD *)a2 + 7);
  v14 = *((_DWORD *)a2 + 8);
  v13 = *((_DWORD *)a2 + 9);
  v25 = a2[5];
  v26 = a2[6];
  v27 = a2[7];
  v30 = a2[9];
  v28 = *((_DWORD *)a2 + 16);
  v29 = *((_BYTE *)a2 + 80);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(a6 + 16))(&v43, a5, a6);
  if ((v43 & 0x100000000) != 0)
    goto LABEL_6;
  v15 = v43;
  if (one-time initialization token for forced != -1)
    swift_once();
  swift_beginAccess();
  if (byte_25426FAB4 == 1)
  {
    if ((dyld_program_sdk_at_least() & 1) == 0)
    {
LABEL_6:
      LODWORD(v32) = v23;
      v43 = v8;
      v44 = v9;
      v45 = v10;
      v46 = __PAIR64__(v11, v12);
      v47 = __PAIR64__(v13, v14);
      v48 = v25;
      v49 = v26;
      v50.i64[0] = v27;
      v50.i32[2] = v28;
      v51 = v30;
      LOBYTE(v52) = v29;
      return static ViewModifier.makeMultiViewList(modifier:inputs:body:)((int *)&v32, (uint64_t)&v43, a3, a4, a5, *(_QWORD *)(a6 + 8));
    }
  }
  else if (static Semantics.forced < v15)
  {
    goto LABEL_6;
  }
  v17 = *MEMORY[0x24BE096C0];
  v43 = v8;
  v44 = v9;
  v45 = v10;
  v46 = __PAIR64__(v11, v12);
  v47 = __PAIR64__(v13, v14);
  v48 = v25;
  v49 = MEMORY[0x24BEE4AF8];
  v50 = vdupq_n_s32(v17);
  LODWORD(v51) = v17;
  HIDWORD(v51) = v17;
  v52 = v17;
  LODWORD(v32) = v23;
  v18 = *(void (**)(uint64_t *, uint64_t *, uint64_t, uint64_t))(a6 + 24);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  v18(&v32, &v43, a5, a6);
  v19 = v43;
  LODWORD(v18) = v44;
  v20 = v45;
  v21 = v48;
  swift_bridgeObjectRetain_n();
  swift_retain_n();
  swift_retain_n();
  v22 = swift_bridgeObjectRetain_n();
  v32 = v19;
  v33 = (int)v18;
  v34 = v20;
  v35 = v46;
  v36 = v47;
  v37 = v21;
  v38 = v26;
  v39 = v27;
  v40 = v28;
  v41 = v30;
  v42 = v29;
  ((void (*)(uint64_t, uint64_t *))a3)(v22, &v32);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  return swift_release_n();
}

void protocol witness for ViewModifier.body(content:) in conformance _ForegroundColorModifier()
{
  specialized ViewModifier.bodyError()(0xD000000000000018, (void *)0x80000002352E7F70);
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance VariantThatFitsModifier(unsigned int *a1, uint64_t a2, void (*a3)(uint64_t, Swift::UInt *))
{
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  _OWORD v7[5];
  int v8;

  v3 = *a1;
  v4 = *(_OWORD *)(a2 + 48);
  v7[2] = *(_OWORD *)(a2 + 32);
  v7[3] = v4;
  v7[4] = *(_OWORD *)(a2 + 64);
  v8 = *(_DWORD *)(a2 + 80);
  v5 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v5;
  return specialized static ViewModifier<>._makeView(modifier:inputs:body:)(v3, (uint64_t)v7, a3);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance VariantThatFitsModifier(unsigned int *a1, uint64_t a2, void (*a3)(uint64_t, Swift::UInt *))
{
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  _OWORD v7[5];
  char v8;

  v3 = *a1;
  v4 = *(_OWORD *)(a2 + 48);
  v7[2] = *(_OWORD *)(a2 + 32);
  v7[3] = v4;
  v7[4] = *(_OWORD *)(a2 + 64);
  v8 = *(_BYTE *)(a2 + 80);
  v5 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v5;
  return specialized static ViewModifier<>._makeViewList(modifier:inputs:body:)(v3, (uint64_t)v7, a3);
}

void protocol witness for ViewModifier.body(content:) in conformance VariantThatFitsModifier()
{
  protocol witness for ViewModifier.body(content:) in conformance IgnoresAutomaticPaddingLayout();
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance CustomModifier<A, B>(int *a1, uint64_t *a2, void (*a3)(void), uint64_t a4, uint64_t a5)
{
  return static MultiViewModifier._makeViewList(modifier:inputs:body:)(a1, a2, a3, a4, a5, (uint64_t)&protocol witness table for CustomModifier<A, B>);
}

{
  return static MultiViewModifier._makeViewList(modifier:inputs:body:)(a1, a2, a3, a4, a5, (uint64_t)&protocol witness table for CustomModifier<A, B>);
}

{
  return static MultiViewModifier._makeViewList(modifier:inputs:body:)(a1, a2, a3, a4, a5, (uint64_t)&protocol witness table for CustomModifier<A, B>);
}

void protocol witness for ViewModifier.body(content:) in conformance CustomModifier<A, B>()
{
  specialized ViewModifier<>.body(content:)();
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance _PaddingLayout@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(_QWORD *__return_ptr)@<X2>, _QWORD *a4@<X8>)
{
  return protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance _OffsetEffect(a1, a2, a3, specialized _ViewListOutputs.multiModifier<A>(_:inputs:), a4);
}

void protocol witness for ViewModifier.body(content:) in conformance _PaddingLayout()
{
  specialized ViewModifier.bodyError()(0x676E69646461505FLL, (void *)0xEE0074756F79614CLL);
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance StyleContextWriter<A>(int *a1, uint64_t *a2, void (*a3)(uint64_t, uint64_t *), uint64_t a4, uint64_t a5, uint64_t a6)
{
  return static ViewModifier<>._makeView(modifier:inputs:body:)(a1, a2, a3, a4, a5, a6, (uint64_t)&protocol witness table for StyleContextWriter<A>);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance StyleContextWriter<A>(int *a1, uint64_t *a2, void (*a3)(uint64_t, uint64_t *), uint64_t a4, uint64_t a5, uint64_t a6)
{
  return static ViewModifier<>._makeViewList(modifier:inputs:body:)(a1, a2, a3, a4, a5, a6, (uint64_t)&protocol witness table for StyleContextWriter<A>);
}

uint64_t protocol witness for static ViewModifier._viewListCount(inputs:body:) in conformance StyleContextWriter<A>(__int128 *a1, uint64_t (*a2)(__int128 *))
{
  return static ViewModifier<>._viewListCount(inputs:body:)(a1, a2);
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance DefaultStyleContextWriter(unsigned int *a1, uint64_t a2, void (*a3)(uint64_t, uint64_t *))
{
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  _OWORD v7[5];
  int v8;

  v3 = *a1;
  v4 = *(_OWORD *)(a2 + 48);
  v7[2] = *(_OWORD *)(a2 + 32);
  v7[3] = v4;
  v7[4] = *(_OWORD *)(a2 + 64);
  v8 = *(_DWORD *)(a2 + 80);
  v5 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v5;
  return specialized static ViewModifier<>._makeView(modifier:inputs:body:)(v3, (uint64_t)v7, a3);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance DefaultStyleContextWriter(unsigned int *a1, uint64_t a2, void (*a3)(uint64_t, uint64_t *))
{
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  _OWORD v7[5];
  char v8;

  v3 = *a1;
  v4 = *(_OWORD *)(a2 + 48);
  v7[2] = *(_OWORD *)(a2 + 32);
  v7[3] = v4;
  v7[4] = *(_OWORD *)(a2 + 64);
  v8 = *(_BYTE *)(a2 + 80);
  v5 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v5;
  return specialized static ViewModifier<>._makeViewList(modifier:inputs:body:)(v3, (uint64_t)v7, a3);
}

void protocol witness for ViewModifier.body(content:) in conformance DefaultStyleContextWriter()
{
  specialized ViewModifier.bodyError()(0xD000000000000019, (void *)0x80000002352E7F50);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance _BlendModeEffect@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(_QWORD *__return_ptr)@<X2>, _QWORD *a4@<X8>)
{
  return protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance _OffsetEffect(a1, a2, a3, specialized _ViewListOutputs.multiModifier<A>(_:inputs:), a4);
}

void protocol witness for ViewModifier.body(content:) in conformance _BlendModeEffect()
{
  specialized ViewModifier.bodyError()(0xD000000000000010, (void *)0x80000002352E7F30);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance _ExtendedBlendModeEffect@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(_QWORD *__return_ptr)@<X2>, _QWORD *a4@<X8>)
{
  return protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance _OffsetEffect(a1, a2, a3, specialized _ViewListOutputs.multiModifier<A>(_:inputs:), a4);
}

void protocol witness for ViewModifier.body(content:) in conformance _ExtendedBlendModeEffect()
{
  specialized ViewModifier.bodyError()(0xD000000000000018, (void *)0x80000002352E7F10);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance GraphicsBlendModeEffect@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(_QWORD *__return_ptr)@<X2>, _QWORD *a4@<X8>)
{
  return protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance _OffsetEffect(a1, a2, a3, specialized _ViewListOutputs.multiModifier<A>(_:inputs:), a4);
}

void protocol witness for ViewModifier.body(content:) in conformance GraphicsBlendModeEffect()
{
  _StringGuts.grow(_:)(34);
  swift_bridgeObjectRelease();
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance _ColorMatrixEffect@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(_QWORD *__return_ptr)@<X2>, _QWORD *a4@<X8>)
{
  return protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance _OffsetEffect(a1, a2, a3, specialized _ViewListOutputs.multiModifier<A>(_:inputs:), a4);
}

void protocol witness for ViewModifier.body(content:) in conformance _ColorMatrixEffect()
{
  specialized ViewModifier.bodyError()(0xD000000000000012, (void *)0x80000002352E7EF0);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance _PremultipliedColorMatrixEffect@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(_QWORD *__return_ptr)@<X2>, _QWORD *a4@<X8>)
{
  return protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance _OffsetEffect(a1, a2, a3, specialized _ViewListOutputs.multiModifier<A>(_:inputs:), a4);
}

void protocol witness for ViewModifier.body(content:) in conformance _PremultipliedColorMatrixEffect()
{
  specialized ViewModifier.bodyError()(0xD00000000000001FLL, (void *)0x80000002352E7ED0);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance PrivacyRedactionViewModifier.Transform<A>.PrivacyEffect(int *a1, uint64_t *a2, void (*a3)(void), uint64_t a4, uint64_t a5)
{
  return static MultiViewModifier._makeViewList(modifier:inputs:body:)(a1, a2, a3, a4, a5, (uint64_t)&protocol witness table for PrivacyRedactionViewModifier.Transform<A>.PrivacyEffect);
}

uint64_t ModifiedContent.init(content:modifier:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;

  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 32))(a5, a1);
  v10 = a5 + *(int *)(type metadata accessor for ModifiedContent(0, a3, a4, v9) + 36);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a4 - 8) + 32))(v10, a2, a4);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance PrivacyRedactionViewModifier@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(_QWORD *__return_ptr)@<X2>, _QWORD *a4@<X8>)
{
  return protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance _OffsetEffect(a1, a2, a3, specialized _ViewListOutputs.multiModifier<A>(_:inputs:), a4);
}

void protocol witness for ViewModifier.body(content:) in conformance PrivacyRedactionViewModifier()
{
  protocol witness for ViewModifier.body(content:) in conformance IgnoresAutomaticPaddingLayout();
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance _ContrastEffect@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(_QWORD *__return_ptr)@<X2>, _QWORD *a4@<X8>)
{
  return protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance _OffsetEffect(a1, a2, a3, specialized _ViewListOutputs.multiModifier<A>(_:inputs:), a4);
}

void protocol witness for ViewModifier.body(content:) in conformance _ContrastEffect()
{
  specialized ViewModifier.bodyError()(0x736172746E6F435FLL, (void *)0xEF74636566664574);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance _MatchedGeometryEffect<A>(int *a1, uint64_t *a2, void (*a3)(void), uint64_t a4, uint64_t a5)
{
  return static MultiViewModifier._makeViewList(modifier:inputs:body:)(a1, a2, a3, a4, a5, (uint64_t)&protocol witness table for _MatchedGeometryEffect<A>);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance MatchedGeometryEffect2<A, B>(int *a1, uint64_t *a2, void (*a3)(void), uint64_t a4, uint64_t a5)
{
  return static MultiViewModifier._makeViewList(modifier:inputs:body:)(a1, a2, a3, a4, a5, (uint64_t)&protocol witness table for MatchedGeometryEffect2<A, B>);
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance _EnvironmentKeyWritingModifier<A>(int *a1, uint64_t *a2, void (*a3)(uint64_t, uint64_t *), uint64_t a4, uint64_t a5, uint64_t a6)
{
  return static ViewModifier<>._makeView(modifier:inputs:body:)(a1, a2, a3, a4, a5, a6, (uint64_t)&protocol witness table for _EnvironmentKeyWritingModifier<A>);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance _EnvironmentKeyWritingModifier<A>(int *a1, uint64_t *a2, void (*a3)(uint64_t, uint64_t *), uint64_t a4, uint64_t a5, uint64_t a6)
{
  return static ViewModifier<>._makeViewList(modifier:inputs:body:)(a1, a2, a3, a4, a5, a6, (uint64_t)&protocol witness table for _EnvironmentKeyWritingModifier<A>);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance _OverlayModifier<A>(int *a1, uint64_t *a2, void (*a3)(void), uint64_t a4, uint64_t a5)
{
  return static MultiViewModifier._makeViewList(modifier:inputs:body:)(a1, a2, a3, a4, a5, (uint64_t)&protocol witness table for _OverlayModifier<A>);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance _OverlayStyleModifier<A>(int *a1, uint64_t *a2, void (*a3)(void), uint64_t a4, uint64_t a5)
{
  return static MultiViewModifier._makeViewList(modifier:inputs:body:)(a1, a2, a3, a4, a5, (uint64_t)&protocol witness table for _OverlayStyleModifier<A>);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance _OverlayShapeModifier<A, B>(int *a1, uint64_t *a2, void (*a3)(void), uint64_t a4, uint64_t a5)
{
  return static MultiViewModifier._makeViewList(modifier:inputs:body:)(a1, a2, a3, a4, a5, (uint64_t)&protocol witness table for _OverlayShapeModifier<A, B>);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance MoveTransition.MoveLayout@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(_QWORD *__return_ptr)@<X2>, _QWORD *a4@<X8>)
{
  return protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance _OffsetEffect(a1, a2, a3, specialized _ViewListOutputs.multiModifier<A>(_:inputs:), a4);
}

void protocol witness for ViewModifier.body(content:) in conformance MoveTransition.MoveLayout()
{
  protocol witness for ViewModifier.body(content:) in conformance IgnoresAutomaticPaddingLayout();
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance _BlurEffect@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(_QWORD *__return_ptr)@<X2>, _QWORD *a4@<X8>)
{
  return protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance _OffsetEffect(a1, a2, a3, specialized _ViewListOutputs.multiModifier<A>(_:inputs:), a4);
}

void protocol witness for ViewModifier.body(content:) in conformance _BlurEffect()
{
  specialized ViewModifier.bodyError()(0x66664572756C425FLL, (void *)0xEB00000000746365);
}

uint64_t static ViewModifier.makeMultiViewList(modifier:inputs:body:)(int *a1, uint64_t a2, void (*a3)(void), uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  int v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  char v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  int v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  int v27;
  int v28;
  int v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  char v36;

  v20 = *a1;
  v7 = *(_DWORD *)(a2 + 8);
  v8 = *(_QWORD *)(a2 + 16);
  v9 = *(_DWORD *)(a2 + 24);
  v10 = *(_DWORD *)(a2 + 28);
  v11 = *(_DWORD *)(a2 + 32);
  v12 = *(_DWORD *)(a2 + 36);
  v14 = *(_QWORD *)(a2 + 40);
  v13 = *(_QWORD *)(a2 + 48);
  v19 = *(_QWORD *)(a2 + 56);
  v18 = *(_DWORD *)(a2 + 64);
  v17 = *(_QWORD *)(a2 + 72);
  v16 = *(_BYTE *)(a2 + 80);
  v24 = *(_QWORD *)a2;
  v6 = v24;
  v25 = v7;
  v26 = v8;
  v27 = v9;
  v28 = v10;
  v29 = v11;
  v30 = v12;
  v31 = v14;
  v32 = v13;
  v33 = v19;
  v34 = v18;
  v35 = v17;
  v36 = v16;
  a3();
  v23 = v20;
  v24 = v6;
  v25 = v7;
  v26 = v8;
  v27 = v9;
  v28 = v10;
  v29 = v11;
  v30 = v12;
  v31 = v14;
  v32 = v13;
  v33 = v19;
  v34 = v18;
  v35 = v17;
  v36 = v16;
  return _ViewListOutputs.multiModifier<A>(_:inputs:)(&v23, &v24, a5, a6);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance _ColorInvertEffect@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(_QWORD *__return_ptr)@<X2>, _QWORD *a4@<X8>)
{
  return protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance _OffsetEffect(a1, a2, a3, specialized _ViewListOutputs.multiModifier<A>(_:inputs:), a4);
}

void protocol witness for ViewModifier.body(content:) in conformance _ColorInvertEffect()
{
  specialized ViewModifier.bodyError()(0xD000000000000012, (void *)0x80000002352E7EB0);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance _ForegroundLayerViewModifier@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(_QWORD *__return_ptr)@<X2>, _QWORD *a4@<X8>)
{
  return protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance _OffsetEffect(a1, a2, a3, specialized _ViewListOutputs.multiModifier<A>(_:inputs:), a4);
}

void protocol witness for ViewModifier.body(content:) in conformance _ForegroundLayerViewModifier()
{
  specialized ViewModifier.bodyError()(0xD00000000000001CLL, (void *)0x80000002352E7E90);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance _ForegroundLayerColorMatrixEffect@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(_QWORD *__return_ptr)@<X2>, _QWORD *a4@<X8>)
{
  return protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance _OffsetEffect(a1, a2, a3, specialized _ViewListOutputs.multiModifier<A>(_:inputs:), a4);
}

void protocol witness for ViewModifier.body(content:) in conformance _ForegroundLayerColorMatrixEffect()
{
  specialized ViewModifier.bodyError()(0xD000000000000021, (void *)0x80000002352E7E60);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance _ForegroundLayerLevelViewModifier@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(_QWORD *__return_ptr)@<X2>, _QWORD *a4@<X8>)
{
  return protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance _OffsetEffect(a1, a2, a3, specialized _ViewListOutputs.multiModifier<A>(_:inputs:), a4);
}

void protocol witness for ViewModifier.body(content:) in conformance _ForegroundLayerLevelViewModifier()
{
  specialized ViewModifier.bodyError()(0xD000000000000021, (void *)0x80000002352E7E30);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance _ForegroundLayerLevelColorMatrixEffect@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(_QWORD *__return_ptr)@<X2>, _QWORD *a4@<X8>)
{
  return protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance _OffsetEffect(a1, a2, a3, specialized _ViewListOutputs.multiModifier<A>(_:inputs:), a4);
}

void protocol witness for ViewModifier.body(content:) in conformance _ForegroundLayerLevelColorMatrixEffect()
{
  specialized ViewModifier.bodyError()(0xD000000000000026, (void *)0x80000002352E7E00);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance _GrayscaleEffect@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(_QWORD *__return_ptr)@<X2>, _QWORD *a4@<X8>)
{
  return protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance _OffsetEffect(a1, a2, a3, specialized _ViewListOutputs.multiModifier<A>(_:inputs:), a4);
}

void protocol witness for ViewModifier.body(content:) in conformance _GrayscaleEffect()
{
  specialized ViewModifier.bodyError()(0xD000000000000010, (void *)0x80000002352E5ED0);
}

void protocol witness for ViewModifier.body(content:) in conformance _Rotation3DEffect()
{
  specialized ViewModifier.bodyError()(0xD000000000000011, (void *)0x80000002352E5EB0);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance _OpacityEffect@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(_QWORD *__return_ptr)@<X2>, _QWORD *a4@<X8>)
{
  return protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance _OffsetEffect(a1, a2, a3, specialized _ViewListOutputs.multiModifier<A>(_:inputs:), a4);
}

void protocol witness for ViewModifier.body(content:) in conformance _OpacityEffect()
{
  specialized ViewModifier.bodyError()(0x7974696361704F5FLL, (void *)0xEE00746365666645);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance OpacityRendererEffect@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(_QWORD *__return_ptr)@<X2>, _QWORD *a4@<X8>)
{
  return protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance _OffsetEffect(a1, a2, a3, specialized _ViewListOutputs.multiModifier<A>(_:inputs:), a4);
}

void protocol witness for ViewModifier.body(content:) in conformance OpacityRendererEffect()
{
  specialized ViewModifier.bodyError()(0xD000000000000015, (void *)0x80000002352E5E90);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance _ShadowEffect._Resolved@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(_QWORD *__return_ptr)@<X2>, _QWORD *a4@<X8>)
{
  return protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance _OffsetEffect(a1, a2, a3, specialized _ViewListOutputs.multiModifier<A>(_:inputs:), a4);
}

void protocol witness for ViewModifier.body(content:) in conformance _ShadowEffect()
{
  specialized ViewModifier.bodyError()(0x45776F646168535FLL, (void *)0xED00007463656666);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance _DrawingGroupEffect@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(_QWORD *__return_ptr)@<X2>, _QWORD *a4@<X8>)
{
  return protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance _OffsetEffect(a1, a2, a3, specialized _ViewListOutputs.multiModifier<A>(_:inputs:), a4);
}

void protocol witness for ViewModifier.body(content:) in conformance _DrawingGroupEffect()
{
  specialized ViewModifier.bodyError()(0xD000000000000013, (void *)0x80000002352E7DE0);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance _BrightnessEffect@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(_QWORD *__return_ptr)@<X2>, _QWORD *a4@<X8>)
{
  return protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance _OffsetEffect(a1, a2, a3, specialized _ViewListOutputs.multiModifier<A>(_:inputs:), a4);
}

void protocol witness for ViewModifier.body(content:) in conformance _BrightnessEffect()
{
  specialized ViewModifier.bodyError()(0xD000000000000011, (void *)0x80000002352E5E70);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance GraphicsFilter@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(_QWORD *__return_ptr)@<X2>, _QWORD *a4@<X8>)
{
  return protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance _OffsetEffect(a1, a2, a3, specialized _ViewListOutputs.multiModifier<A>(_:inputs:), a4);
}

void protocol witness for ViewModifier.body(content:) in conformance GraphicsFilter()
{
  specialized ViewModifier.bodyError()(0x7363696870617247, (void *)0xEE007265746C6946);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance GraphicsBlendMode@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(_QWORD *__return_ptr)@<X2>, _QWORD *a4@<X8>)
{
  return protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance _OffsetEffect(a1, a2, a3, specialized _ViewListOutputs.multiModifier<A>(_:inputs:), a4);
}

void protocol witness for ViewModifier.body(content:) in conformance GraphicsBlendMode()
{
  specialized ViewModifier.bodyError()(0xD000000000000011, (void *)0x80000002352E7DC0);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance _GeometryGroupEffect@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(_QWORD *__return_ptr)@<X2>, _QWORD *a4@<X8>)
{
  return protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance _OffsetEffect(a1, a2, a3, specialized _ViewListOutputs.multiModifier<A>(_:inputs:), a4);
}

void protocol witness for ViewModifier.body(content:) in conformance _GeometryGroupEffect()
{
  specialized ViewModifier.bodyError()(0xD000000000000014, (void *)0x80000002352E7DA0);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance _MaskAlignmentEffect<A>(int *a1, uint64_t *a2, void (*a3)(void), uint64_t a4, uint64_t a5)
{
  return static MultiViewModifier._makeViewList(modifier:inputs:body:)(a1, a2, a3, a4, a5, (uint64_t)&protocol witness table for _MaskAlignmentEffect<A>);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance _MaskEffect<A>(int *a1, uint64_t *a2, void (*a3)(void), uint64_t a4, uint64_t a5)
{
  return static MultiViewModifier._makeViewList(modifier:inputs:body:)(a1, a2, a3, a4, a5, (uint64_t)&protocol witness table for _MaskEffect<A>);
}

uint64_t protocol witness for static ViewModifier._viewListCount(inputs:body:) in conformance _MaskEffect<A>()
{
  return static ViewModifier<>._viewListCount(inputs:body:)();
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance _CompositingGroupEffect@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(_QWORD *__return_ptr)@<X2>, _QWORD *a4@<X8>)
{
  return protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance _OffsetEffect(a1, a2, a3, specialized _ViewListOutputs.multiModifier<A>(_:inputs:), a4);
}

void protocol witness for ViewModifier.body(content:) in conformance _CompositingGroupEffect()
{
  specialized ViewModifier.bodyError()(0xD000000000000017, (void *)0x80000002352E7D80);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance VariableBlurStyle@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(_QWORD *__return_ptr)@<X2>, _QWORD *a4@<X8>)
{
  return protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance _OffsetEffect(a1, a2, a3, specialized _ViewListOutputs.multiModifier<A>(_:inputs:), a4);
}

void protocol witness for ViewModifier.body(content:) in conformance VariableBlurStyle()
{
  specialized ViewModifier.bodyError()(0xD000000000000011, (void *)0x80000002352E5E50);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance MaterialView<A>(int *a1, uint64_t *a2, void (*a3)(void), uint64_t a4, uint64_t a5)
{
  return static MultiViewModifier._makeViewList(modifier:inputs:body:)(a1, a2, a3, a4, a5, (uint64_t)&protocol witness table for MaterialView<A>);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance HitTestBindingModifier@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(_QWORD *__return_ptr)@<X2>, _QWORD *a4@<X8>)
{
  return protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance _OffsetEffect(a1, a2, a3, specialized _ViewListOutputs.multiModifier<A>(_:inputs:), a4);
}

void protocol witness for ViewModifier.body(content:) in conformance HitTestBindingModifier()
{
  specialized ViewModifier.bodyError()(0xD000000000000016, (void *)0x80000002352E7D60);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance _ShaderFilterEffect@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(_QWORD *__return_ptr)@<X2>, _QWORD *a4@<X8>)
{
  return protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance _OffsetEffect(a1, a2, a3, specialized _ViewListOutputs.multiModifier<A>(_:inputs:), a4);
}

void protocol witness for ViewModifier.body(content:) in conformance _ShaderFilterEffect()
{
  specialized ViewModifier.bodyError()(0xD000000000000013, (void *)0x80000002352E7D40);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance Shader.ResolvedShader@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(_QWORD *__return_ptr)@<X2>, _QWORD *a4@<X8>)
{
  return protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance _OffsetEffect(a1, a2, a3, specialized _ViewListOutputs.multiModifier<A>(_:inputs:), a4);
}

void protocol witness for ViewModifier.body(content:) in conformance Shader.ResolvedShader()
{
  specialized ViewModifier.bodyError()(0x6465766C6F736552, (void *)0xEE00726564616853);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance _AspectRatioLayout@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(_QWORD *__return_ptr)@<X2>, _QWORD *a4@<X8>)
{
  return protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance _OffsetEffect(a1, a2, a3, specialized _ViewListOutputs.multiModifier<A>(_:inputs:), a4);
}

void protocol witness for ViewModifier.body(content:) in conformance _AspectRatioLayout()
{
  specialized ViewModifier.bodyError()(0xD000000000000012, (void *)0x80000002352E7D20);
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance ReferenceDateModifier(unsigned int *a1, uint64_t a2, void (*a3)(uint64_t, Swift::UInt *))
{
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  _OWORD v7[5];
  int v8;

  v3 = *a1;
  v4 = *(_OWORD *)(a2 + 48);
  v7[2] = *(_OWORD *)(a2 + 32);
  v7[3] = v4;
  v7[4] = *(_OWORD *)(a2 + 64);
  v8 = *(_DWORD *)(a2 + 80);
  v5 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v5;
  return specialized static ViewInputsModifier._makeView(modifier:inputs:body:)(v3, (uint64_t)v7, a3);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance ReferenceDateModifier@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(_QWORD *__return_ptr)@<X2>, _QWORD *a4@<X8>)
{
  return protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance _OffsetEffect(a1, a2, a3, specialized _ViewListOutputs.multiModifier<A>(_:inputs:), a4);
}

void protocol witness for ViewModifier.body(content:) in conformance ReferenceDateModifier()
{
  specialized ViewModifier.bodyError()();
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance _OverlayPreferenceModifier<A, B>(int *a1, uint64_t *a2, void (*a3)(void), uint64_t a4, uint64_t a5)
{
  return static MultiViewModifier._makeViewList(modifier:inputs:body:)(a1, a2, a3, a4, a5, (uint64_t)&protocol witness table for _OverlayPreferenceModifier<A, B>);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance _BackgroundPreferenceModifier<A, B>(int *a1, uint64_t *a2, void (*a3)(void), uint64_t a4, uint64_t a5)
{
  return static MultiViewModifier._makeViewList(modifier:inputs:body:)(a1, a2, a3, a4, a5, (uint64_t)&protocol witness table for _BackgroundPreferenceModifier<A, B>);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance ViewListArchivedAnimation.Effect@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(_QWORD *__return_ptr)@<X2>, _QWORD *a4@<X8>)
{
  return protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance _OffsetEffect(a1, a2, a3, specialized _ViewListOutputs.multiModifier<A>(_:inputs:), a4);
}

void protocol witness for ViewModifier.body(content:) in conformance ViewListArchivedAnimation.Effect()
{
  _StringGuts.grow(_:)(34);
  swift_bridgeObjectRelease();
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance PreferTextLayoutManagerInputModifier(unsigned int *a1, uint64_t a2, void (*a3)(uint64_t, Swift::UInt *))
{
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  _OWORD v7[5];
  int v8;

  v3 = *a1;
  v4 = *(_OWORD *)(a2 + 48);
  v7[2] = *(_OWORD *)(a2 + 32);
  v7[3] = v4;
  v7[4] = *(_OWORD *)(a2 + 64);
  v8 = *(_DWORD *)(a2 + 80);
  v5 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v5;
  return specialized static ViewInputsModifier._makeView(modifier:inputs:body:)(v3, (uint64_t)v7, a3);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance PreferTextLayoutManagerInputModifier@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(_QWORD *__return_ptr)@<X2>, _QWORD *a4@<X8>)
{
  return protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance _OffsetEffect(a1, a2, a3, specialized _ViewListOutputs.multiModifier<A>(_:inputs:), a4);
}

void protocol witness for ViewModifier.body(content:) in conformance PreferTextLayoutManagerInputModifier()
{
  protocol witness for ViewModifier.body(content:) in conformance IgnoresAutomaticPaddingLayout();
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance _FillMaskEffect<A>(int *a1, uint64_t *a2, void (*a3)(void), uint64_t a4, uint64_t a5)
{
  return static MultiViewModifier._makeViewList(modifier:inputs:body:)(a1, a2, a3, a4, a5, (uint64_t)&protocol witness table for _FillMaskEffect<A>);
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance LineLimitModifier(unsigned int *a1, uint64_t *a2, void (*a3)(uint64_t, uint64_t *), uint64_t a4, uint64_t a5, uint64_t a6)
{
  return protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance LineLimitModifier(a1, a2, a3, a4, a5, a6, (void (*)(uint64_t, uint64_t *))specialized static EnvironmentModifier._makeInputs(modifier:inputs:));
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance LineLimitModifier(unsigned int *a1, uint64_t *a2, void (*a3)(uint64_t, uint64_t *), uint64_t a4, uint64_t a5, uint64_t a6)
{
  return protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance LineLimitModifier(a1, a2, a3, a4, a5, a6, (void (*)(uint64_t, uint64_t *))specialized static EnvironmentModifier._makeInputs(modifier:inputs:));
}

void protocol witness for ViewModifier.body(content:) in conformance LineLimitModifier()
{
  _StringGuts.grow(_:)(34);
  swift_bridgeObjectRelease();
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t specialized static EnvironmentModifier._makeInputs(modifier:inputs:)(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  int v11;

  swift_beginAccess();
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for UpdateEnvironment<LineLimitModifier>, (uint64_t)&type metadata for LineLimitModifier, (uint64_t)&protocol witness table for LineLimitModifier, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for UpdateEnvironment);
  lazy protocol witness table accessor for type UpdateEnvironment<LineLimitModifier> and conformance UpdateEnvironment<A>(&lazy protocol witness table cache variable for type UpdateEnvironment<LineLimitModifier> and conformance UpdateEnvironment<A>, &lazy cache variable for type metadata for UpdateEnvironment<LineLimitModifier>, (uint64_t)&type metadata for LineLimitModifier, (uint64_t)&protocol witness table for LineLimitModifier);
  v3 = Attribute.init<A>(body:value:flags:update:)();
  v4 = MEMORY[0x24BEE4AF8];
  v5 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  type metadata accessor for MutableBox<CachedEnvironment>(0, v6, v7, v8);
  v9 = swift_allocObject();
  *(_DWORD *)(v9 + 16) = v3;
  *(_QWORD *)(v9 + 24) = v4;
  *(_OWORD *)(v9 + 32) = 0u;
  *(_OWORD *)(v9 + 48) = 0u;
  *(_OWORD *)(v9 + 64) = 0u;
  *(_WORD *)(v9 + 80) = 256;
  *(_QWORD *)(v9 + 88) = v5;
  result = swift_release();
  *(_QWORD *)(a2 + 16) = v9;
  v11 = *(_DWORD *)(a2 + 32);
  if ((v11 & 0x20) == 0)
    *(_DWORD *)(a2 + 32) = v11 | 0x20;
  return result;
}

{
  int v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  int v11;

  swift_beginAccess();
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for UpdateEnvironment<SystemColorSchemeModifier>, (uint64_t)&type metadata for SystemColorSchemeModifier, (uint64_t)&protocol witness table for SystemColorSchemeModifier, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for UpdateEnvironment);
  lazy protocol witness table accessor for type UpdateEnvironment<LineLimitModifier> and conformance UpdateEnvironment<A>(&lazy protocol witness table cache variable for type UpdateEnvironment<SystemColorSchemeModifier> and conformance UpdateEnvironment<A>, &lazy cache variable for type metadata for UpdateEnvironment<SystemColorSchemeModifier>, (uint64_t)&type metadata for SystemColorSchemeModifier, (uint64_t)&protocol witness table for SystemColorSchemeModifier);
  v3 = Attribute.init<A>(body:value:flags:update:)();
  v4 = MEMORY[0x24BEE4AF8];
  v5 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  type metadata accessor for MutableBox<CachedEnvironment>(0, v6, v7, v8);
  v9 = swift_allocObject();
  *(_DWORD *)(v9 + 16) = v3;
  *(_QWORD *)(v9 + 24) = v4;
  *(_OWORD *)(v9 + 32) = 0u;
  *(_OWORD *)(v9 + 48) = 0u;
  *(_OWORD *)(v9 + 64) = 0u;
  *(_WORD *)(v9 + 80) = 256;
  *(_QWORD *)(v9 + 88) = v5;
  result = swift_release();
  *(_QWORD *)(a2 + 16) = v9;
  v11 = *(_DWORD *)(a2 + 32);
  if ((v11 & 0x20) == 0)
    *(_DWORD *)(a2 + 32) = v11 | 0x20;
  return result;
}

